
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea0083d4 	b	28fb8 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e92d4010 	push	{r4, lr}
    806c:	e24dd945 	sub	sp, sp, #1130496	; 0x114000
    8070:	e24ddeb3 	sub	sp, sp, #2864	; 0xb30
    8074:	e24dd008 	sub	sp, sp, #8
    8078:	e1a0000d 	mov	r0, sp
    807c:	eb00000f 	bl	80c0 <CKernel::CKernel()>
    8080:	e1a0000d 	mov	r0, sp
    8084:	eb0000a5 	bl	8320 <CKernel::Initialize()>
    8088:	e2504000 	subs	r4, r0, #0
    808c:	0a000004 	beq	80a4 <main+0x3c>
    8090:	e1a0000d 	mov	r0, sp
    8094:	eb0000e9 	bl	8440 <CKernel::Run()>
    8098:	e2404002 	sub	r4, r0, #2
    809c:	e16f4f14 	clz	r4, r4
    80a0:	e1a042a4 	lsr	r4, r4, #5
    80a4:	e1a0000d 	mov	r0, sp
    80a8:	eb000074 	bl	8280 <CKernel::~CKernel()>
    80ac:	e1a00004 	mov	r0, r4
    80b0:	e28dd945 	add	sp, sp, #1130496	; 0x114000
    80b4:	e28ddeb3 	add	sp, sp, #2864	; 0xb30
    80b8:	e28dd008 	add	sp, sp, #8
    80bc:	e8bd8010 	pop	{r4, pc}

000080c0 <CKernel::CKernel()>:
    80c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    80c4:	e1a04000 	mov	r4, r0
    80c8:	e24dd010 	sub	sp, sp, #16
    80cc:	eb00cd6b 	bl	3b680 <Display::Display()>
    80d0:	e3a01001 	mov	r1, #1
    80d4:	e2840efa 	add	r0, r4, #4000	; 0xfa0
    80d8:	eb008da8 	bl	2b780 <CMemorySystem::CMemorySystem(bool)>
    80dc:	e2847d42 	add	r7, r4, #4224	; 0x1080
    80e0:	e2840d41 	add	r0, r4, #4160	; 0x1040
    80e4:	e3a01000 	mov	r1, #0
    80e8:	e2877008 	add	r7, r7, #8
    80ec:	e280003c 	add	r0, r0, #60	; 0x3c
    80f0:	eb007107 	bl	24514 <CActLED::CActLED(bool)>
    80f4:	e2845d63 	add	r5, r4, #6336	; 0x18c0
    80f8:	e1a00007 	mov	r0, r7
    80fc:	eb00782e 	bl	261bc <CKernelOptions::CKernelOptions()>
    8100:	e2850024 	add	r0, r5, #36	; 0x24
    8104:	eb007349 	bl	24e30 <CDeviceNameService::CDeviceNameService()>
    8108:	e2856030 	add	r6, r5, #48	; 0x30
    810c:	e285002c 	add	r0, r5, #44	; 0x2c
    8110:	eb008c9f 	bl	2b394 <CExceptionHandler::CExceptionHandler()>
    8114:	e1a00006 	mov	r0, r6
    8118:	eb008ee4 	bl	2bcb0 <CInterruptSystem::CInterruptSystem()>
    811c:	e3a03000 	mov	r3, #0
    8120:	e2848c1b 	add	r8, r4, #6912	; 0x1b00
    8124:	e284ac6a 	add	sl, r4, #27136	; 0x6a00
    8128:	e2888030 	add	r8, r8, #48	; 0x30
    812c:	e1a02003 	mov	r2, r3
    8130:	e28a9060 	add	r9, sl, #96	; 0x60
    8134:	e1a01006 	mov	r1, r6
    8138:	e1a00008 	mov	r0, r8
    813c:	e1a05003 	mov	r5, r3
    8140:	eb009339 	bl	2ce2c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)>
    8144:	e1a01006 	mov	r1, r6
    8148:	e1a00009 	mov	r0, r9
    814c:	eb0083db 	bl	290c0 <CTimer::CTimer(CInterruptSystem*)>
    8150:	e1a00007 	mov	r0, r7
    8154:	eb0077e3 	bl	260e8 <CKernelOptions::GetLogLevel() const>
    8158:	e1a02009 	mov	r2, r9
    815c:	e1a01000 	mov	r1, r0
    8160:	e28a009c 	add	r0, sl, #156	; 0x9c
    8164:	eb007928 	bl	2660c <CLogger::CLogger(unsigned int, CTimer*)>
    8168:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    816c:	e1a02009 	mov	r2, r9
    8170:	e1a01006 	mov	r1, r6
    8174:	e2847b1b 	add	r7, r4, #27648	; 0x6c00
    8178:	e2800094 	add	r0, r0, #148	; 0x94
    817c:	eb000681 	bl	9b88 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>
    8180:	e2870018 	add	r0, r7, #24
    8184:	eb006f28 	bl	23e2c <CScheduler::CScheduler()>
    8188:	e59fc0d8 	ldr	ip, [pc, #216]	; 8268 <CKernel::CKernel()+0x1a8>
    818c:	e2846c6d 	add	r6, r4, #27904	; 0x6d00
    8190:	e58dc004 	str	ip, [sp, #4]
    8194:	e1a03005 	mov	r3, r5
    8198:	e28660a8 	add	r6, r6, #168	; 0xa8
    819c:	e1a02005 	mov	r2, r5
    81a0:	e1a01005 	mov	r1, r5
    81a4:	e287007c 	add	r0, r7, #124	; 0x7c
    81a8:	e58d5008 	str	r5, [sp, #8]
    81ac:	e58d5000 	str	r5, [sp]
    81b0:	e2847ce5 	add	r7, r4, #58624	; 0xe500
    81b4:	eb0044aa 	bl	19464 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>
    81b8:	e28770c4 	add	r7, r7, #196	; 0xc4
    81bc:	e1a01008 	mov	r1, r8
    81c0:	e1a02005 	mov	r2, r5
    81c4:	e1a00006 	mov	r0, r6
    81c8:	e284ab3a 	add	sl, r4, #59392	; 0xe800
    81cc:	e59f8098 	ldr	r8, [pc, #152]	; 826c <CKernel::CKernel()+0x1ac>
    81d0:	eb00a2a2 	bl	30c60 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)>
    81d4:	e28aa044 	add	sl, sl, #68	; 0x44
    81d8:	e1a00007 	mov	r0, r7
    81dc:	eb00a395 	bl	31038 <BusAccess::BusAccess()>
    81e0:	e0848008 	add	r8, r4, r8
    81e4:	e1a0000a 	mov	r0, sl
    81e8:	eb00ad39 	bl	336d4 <TargetProgrammer::TargetProgrammer()>
    81ec:	e1a02007 	mov	r2, r7
    81f0:	e1a01006 	mov	r1, r6
    81f4:	e1a00008 	mov	r0, r8
    81f8:	eb00add3 	bl	3394c <HwManager::HwManager(CommandHandler&, BusAccess&)>
    81fc:	e59f906c 	ldr	r9, [pc, #108]	; 8270 <CKernel::CKernel()+0x1b0>
    8200:	e59f006c 	ldr	r0, [pc, #108]	; 8274 <CKernel::CKernel()+0x1b4>
    8204:	e1a03007 	mov	r3, r7
    8208:	e1a02008 	mov	r2, r8
    820c:	e1a01006 	mov	r1, r6
    8210:	e0849009 	add	r9, r4, r9
    8214:	e0840000 	add	r0, r4, r0
    8218:	eb00b1fc 	bl	34a10 <BusControlAPI::BusControlAPI(CommandHandler&, HwManager&, BusAccess&)>
    821c:	e1a03008 	mov	r3, r8
    8220:	e1a02006 	mov	r2, r6
    8224:	e1a01004 	mov	r1, r4
    8228:	e1a00009 	mov	r0, r9
    822c:	e88d0480 	stm	sp, {r7, sl}
    8230:	eb00b866 	bl	363d0 <McManager::McManager(DisplayBase*, CommandHandler&, HwManager&, BusAccess&, TargetProgrammer&)>
    8234:	e59f003c 	ldr	r0, [pc, #60]	; 8278 <CKernel::CKernel()+0x1b8>
    8238:	e1a03009 	mov	r3, r9
    823c:	e1a02006 	mov	r2, r6
    8240:	e1a01004 	mov	r1, r4
    8244:	e0840000 	add	r0, r4, r0
    8248:	eb0000dc 	bl	85c0 <BusRaiderApp::BusRaiderApp(Display&, CommsManager&, McManager&)>
    824c:	e1a00004 	mov	r0, r4
    8250:	e59f2024 	ldr	r2, [pc, #36]	; 827c <CKernel::CKernel()+0x1bc>
    8254:	e2843945 	add	r3, r4, #1130496	; 0x114000
    8258:	e5824000 	str	r4, [r2]
    825c:	e5c35b34 	strb	r5, [r3, #2868]	; 0xb34
    8260:	e28dd010 	add	sp, sp, #16
    8264:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8268:	0003e5c4 	.word	0x0003e5c4
    826c:	0010e934 	.word	0x0010e934
    8270:	0010ee68 	.word	0x0010ee68
    8274:	0010e974 	.word	0x0010e974
    8278:	001115f8 	.word	0x001115f8
    827c:	0004da60 	.word	0x0004da60

00008280 <CKernel::~CKernel()>:
    8280:	e92d4070 	push	{r4, r5, r6, lr}
    8284:	e1a04000 	mov	r4, r0
    8288:	e2800c6d 	add	r0, r0, #27904	; 0x6d00
    828c:	e2845b1b 	add	r5, r4, #27648	; 0x6c00
    8290:	e28000a8 	add	r0, r0, #168	; 0xa8
    8294:	eb00a297 	bl	30cf8 <CommsManager::~CommsManager()>
    8298:	e285007c 	add	r0, r5, #124	; 0x7c
    829c:	eb00453d 	bl	19798 <CNetSubSystem::~CNetSubSystem()>
    82a0:	e2850018 	add	r0, r5, #24
    82a4:	eb006efc 	bl	23e9c <CScheduler::~CScheduler()>
    82a8:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    82ac:	e2845c6a 	add	r5, r4, #27136	; 0x6a00
    82b0:	e2800094 	add	r0, r0, #148	; 0x94
    82b4:	eb000ee0 	bl	be3c <CDWHCIDevice::~CDWHCIDevice()>
    82b8:	e285009c 	add	r0, r5, #156	; 0x9c
    82bc:	eb0078e8 	bl	26664 <CLogger::~CLogger()>
    82c0:	e2850060 	add	r0, r5, #96	; 0x60
    82c4:	eb00839e 	bl	29144 <CTimer::~CTimer()>
    82c8:	e2840c1b 	add	r0, r4, #6912	; 0x1b00
    82cc:	e2845d63 	add	r5, r4, #6336	; 0x18c0
    82d0:	e2800030 	add	r0, r0, #48	; 0x30
    82d4:	eb009355 	bl	2d030 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>
    82d8:	e2850030 	add	r0, r5, #48	; 0x30
    82dc:	eb008e7e 	bl	2bcdc <CInterruptSystem::~CInterruptSystem()>
    82e0:	e285002c 	add	r0, r5, #44	; 0x2c
    82e4:	eb008c4f 	bl	2b428 <CExceptionHandler::~CExceptionHandler()>
    82e8:	e2850024 	add	r0, r5, #36	; 0x24
    82ec:	eb0072e0 	bl	24e74 <CDeviceNameService::~CDeviceNameService()>
    82f0:	e2840d42 	add	r0, r4, #4224	; 0x1080
    82f4:	e2800008 	add	r0, r0, #8
    82f8:	eb00776e 	bl	260b8 <CKernelOptions::~CKernelOptions()>
    82fc:	e2840d41 	add	r0, r4, #4160	; 0x1040
    8300:	e280003c 	add	r0, r0, #60	; 0x3c
    8304:	eb0070a8 	bl	245ac <CActLED::~CActLED()>
    8308:	e2840efa 	add	r0, r4, #4000	; 0xfa0
    830c:	eb008d6b 	bl	2b8c0 <CMemorySystem::~CMemorySystem()>
    8310:	e1a00004 	mov	r0, r4
    8314:	eb00cc51 	bl	3b460 <Display::~Display()>
    8318:	e1a00004 	mov	r0, r4
    831c:	e8bd8070 	pop	{r4, r5, r6, pc}

00008320 <CKernel::Initialize()>:
    8320:	e92d4070 	push	{r4, r5, r6, lr}
    8324:	e2805d63 	add	r5, r0, #6336	; 0x18c0
    8328:	e1a04000 	mov	r4, r0
    832c:	e2850030 	add	r0, r5, #48	; 0x30
    8330:	eb008e78 	bl	2bd18 <CInterruptSystem::Initialize()>
    8334:	e3500000 	cmp	r0, #0
    8338:	1a000002 	bne	8348 <CKernel::Initialize()+0x28>
    833c:	e3a05000 	mov	r5, #0
    8340:	e1a00005 	mov	r0, r5
    8344:	e8bd8070 	pop	{r4, r5, r6, pc}
    8348:	e1a00004 	mov	r0, r4
    834c:	eb00ccd7 	bl	3b6b0 <Display::init()>
    8350:	e3500000 	cmp	r0, #0
    8354:	0afffff8 	beq	833c <CKernel::Initialize()+0x1c>
    8358:	e2840d42 	add	r0, r4, #4224	; 0x1080
    835c:	e2800008 	add	r0, r0, #8
    8360:	eb00775d 	bl	260dc <CKernelOptions::GetLogDevice() const>
    8364:	e3a02000 	mov	r2, #0
    8368:	e1a01000 	mov	r1, r0
    836c:	e2850024 	add	r0, r5, #36	; 0x24
    8370:	eb007346 	bl	25090 <CDeviceNameService::GetDevice(char const*, bool)>
    8374:	e2845c6a 	add	r5, r4, #27136	; 0x6a00
    8378:	e3500000 	cmp	r0, #0
    837c:	11a01000 	movne	r1, r0
    8380:	01a01004 	moveq	r1, r4
    8384:	e285009c 	add	r0, r5, #156	; 0x9c
    8388:	eb0078d4 	bl	266e0 <CLogger::Initialize(CDevice*)>
    838c:	e3500000 	cmp	r0, #0
    8390:	0affffe9 	beq	833c <CKernel::Initialize()+0x1c>
    8394:	e59f3090 	ldr	r3, [pc, #144]	; 842c <CKernel::Initialize()+0x10c>
    8398:	e2840c1b 	add	r0, r4, #6912	; 0x1b00
    839c:	e1a02003 	mov	r2, r3
    83a0:	e3a01ae1 	mov	r1, #921600	; 0xe1000
    83a4:	e2800030 	add	r0, r0, #48	; 0x30
    83a8:	eb009388 	bl	2d1d0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)>
    83ac:	e3500000 	cmp	r0, #0
    83b0:	0affffe1 	beq	833c <CKernel::Initialize()+0x1c>
    83b4:	e2850060 	add	r0, r5, #96	; 0x60
    83b8:	eb00860c 	bl	29bf0 <CTimer::Initialize()>
    83bc:	e3500000 	cmp	r0, #0
    83c0:	0affffdd 	beq	833c <CKernel::Initialize()+0x1c>
    83c4:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    83c8:	e2800094 	add	r0, r0, #148	; 0x94
    83cc:	eb000eff 	bl	bfd0 <CDWHCIDevice::Initialize()>
    83d0:	e3500000 	cmp	r0, #0
    83d4:	0affffd8 	beq	833c <CKernel::Initialize()+0x1c>
    83d8:	e2840c6d 	add	r0, r4, #27904	; 0x6d00
    83dc:	e28000a8 	add	r0, r0, #168	; 0xa8
    83e0:	eb00a249 	bl	30d0c <CommsManager::setup()>
    83e4:	e1a05000 	mov	r5, r0
    83e8:	e2840ce5 	add	r0, r4, #58624	; 0xe500
    83ec:	e28000c4 	add	r0, r0, #196	; 0xc4
    83f0:	eb00a345 	bl	3110c <BusAccess::init()>
    83f4:	e59f0034 	ldr	r0, [pc, #52]	; 8430 <CKernel::Initialize()+0x110>
    83f8:	e0840000 	add	r0, r4, r0
    83fc:	eb00ad5f 	bl	33980 <HwManager::init()>
    8400:	e59f002c 	ldr	r0, [pc, #44]	; 8434 <CKernel::Initialize()+0x114>
    8404:	e0840000 	add	r0, r4, r0
    8408:	eb00b194 	bl	34a60 <BusControlAPI::init()>
    840c:	e59f0024 	ldr	r0, [pc, #36]	; 8438 <CKernel::Initialize()+0x118>
    8410:	e0840000 	add	r0, r4, r0
    8414:	eb00b80c 	bl	3644c <McManager::init()>
    8418:	e59f001c 	ldr	r0, [pc, #28]	; 843c <CKernel::Initialize()+0x11c>
    841c:	e0840000 	add	r0, r4, r0
    8420:	eb000086 	bl	8640 <BusRaiderApp::init()>
    8424:	e1a00005 	mov	r0, r5
    8428:	e8bd8070 	pop	{r4, r5, r6, pc}
    842c:	000f4240 	.word	0x000f4240
    8430:	0010e934 	.word	0x0010e934
    8434:	0010e974 	.word	0x0010e974
    8438:	0010ee68 	.word	0x0010ee68
    843c:	001115f8 	.word	0x001115f8

00008440 <CKernel::Run()>:
    8440:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8444:	e1a04000 	mov	r4, r0
    8448:	e280ac6a 	add	sl, r0, #27136	; 0x6a00
    844c:	e28aa09c 	add	sl, sl, #156	; 0x9c
    8450:	e1a0000a 	mov	r0, sl
    8454:	e3a02003 	mov	r2, #3
    8458:	e59f3110 	ldr	r3, [pc, #272]	; 8570 <CKernel::Run()+0x130>
    845c:	e59f1110 	ldr	r1, [pc, #272]	; 8574 <CKernel::Run()+0x134>
    8460:	eb0078b1 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8464:	e2840d63 	add	r0, r4, #6336	; 0x18c0
    8468:	e3a02000 	mov	r2, #0
    846c:	e59f1104 	ldr	r1, [pc, #260]	; 8578 <CKernel::Run()+0x138>
    8470:	e2800024 	add	r0, r0, #36	; 0x24
    8474:	eb007305 	bl	25090 <CDeviceNameService::GetDevice(char const*, bool)>
    8478:	e2506000 	subs	r6, r0, #0
    847c:	0a00002f 	beq	8540 <CKernel::Run()+0x100>
    8480:	e3a02001 	mov	r2, #1
    8484:	e59f50f0 	ldr	r5, [pc, #240]	; 857c <CKernel::Run()+0x13c>
    8488:	e1a01002 	mov	r1, r2
    848c:	e0845005 	add	r5, r4, r5
    8490:	e1a00005 	mov	r0, r5
    8494:	eb00009e 	bl	8714 <BusRaiderApp::peripheralStatus(bool, bool)>
    8498:	e1a00006 	mov	r0, r6
    849c:	e59f70dc 	ldr	r7, [pc, #220]	; 8580 <CKernel::Run()+0x140>
    84a0:	e59f60dc 	ldr	r6, [pc, #220]	; 8584 <CKernel::Run()+0x144>
    84a4:	e59f10dc 	ldr	r1, [pc, #220]	; 8588 <CKernel::Run()+0x148>
    84a8:	eb000519 	bl	9914 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>
    84ac:	e59f90d8 	ldr	r9, [pc, #216]	; 858c <CKernel::Run()+0x14c>
    84b0:	e0847007 	add	r7, r4, r7
    84b4:	e0846006 	add	r6, r4, r6
    84b8:	e2848945 	add	r8, r4, #1130496	; 0x114000
    84bc:	ea00000e 	b	84fc <CKernel::Run()+0xbc>
    84c0:	e5d83b34 	ldrb	r3, [r8, #2868]	; 0xb34
    84c4:	e3530000 	cmp	r3, #0
    84c8:	1a000011 	bne	8514 <CKernel::Run()+0xd4>
    84cc:	eb00a5c7 	bl	31bf0 <BusAccess::service()>
    84d0:	e1a00007 	mov	r0, r7
    84d4:	eb00ad62 	bl	33a64 <HwManager::service()>
    84d8:	e0840009 	add	r0, r4, r9
    84dc:	eb00b39e 	bl	3535c <BusControlAPI::service()>
    84e0:	e1a00006 	mov	r0, r6
    84e4:	eb00b9a6 	bl	36b84 <McManager::service()>
    84e8:	e1a00005 	mov	r0, r5
    84ec:	eb000343 	bl	9200 <BusRaiderApp::service()>
    84f0:	e2840c6d 	add	r0, r4, #27904	; 0x6d00
    84f4:	e28000a8 	add	r0, r0, #168	; 0xa8
    84f8:	eb00a24c 	bl	30e30 <CommsManager::service()>
    84fc:	eb008977 	bl	2aae0 <IsChainBootEnabled>
    8500:	e1a03000 	mov	r3, r0
    8504:	e2840ce5 	add	r0, r4, #58624	; 0xe500
    8508:	e3530000 	cmp	r3, #0
    850c:	e28000c4 	add	r0, r0, #196	; 0xc4
    8510:	0affffea 	beq	84c0 <CKernel::Run()+0x80>
    8514:	e1a0000a 	mov	r0, sl
    8518:	e3a02003 	mov	r2, #3
    851c:	e59f306c 	ldr	r3, [pc, #108]	; 8590 <CKernel::Run()+0x150>
    8520:	e59f104c 	ldr	r1, [pc, #76]	; 8574 <CKernel::Run()+0x134>
    8524:	eb007880 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8528:	e2840b1b 	add	r0, r4, #27648	; 0x6c00
    852c:	e3a01001 	mov	r1, #1
    8530:	e2800018 	add	r0, r0, #24
    8534:	eb006f6b 	bl	242e8 <CScheduler::Sleep(unsigned int)>
    8538:	e3a00002 	mov	r0, #2
    853c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8540:	e59f5034 	ldr	r5, [pc, #52]	; 857c <CKernel::Run()+0x13c>
    8544:	e1a0000a 	mov	r0, sl
    8548:	e3a02001 	mov	r2, #1
    854c:	e59f3040 	ldr	r3, [pc, #64]	; 8594 <CKernel::Run()+0x154>
    8550:	e59f101c 	ldr	r1, [pc, #28]	; 8574 <CKernel::Run()+0x134>
    8554:	e0845005 	add	r5, r4, r5
    8558:	eb007873 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    855c:	e1a00005 	mov	r0, r5
    8560:	e1a02006 	mov	r2, r6
    8564:	e3a01001 	mov	r1, #1
    8568:	eb000069 	bl	8714 <BusRaiderApp::peripheralStatus(bool, bool)>
    856c:	eaffffc9 	b	8498 <CKernel::Run()+0x58>
    8570:	0003e5d0 	.word	0x0003e5d0
    8574:	0003e628 	.word	0x0003e628
    8578:	0003e5f4 	.word	0x0003e5f4
    857c:	001115f8 	.word	0x001115f8
    8580:	0010e934 	.word	0x0010e934
    8584:	0010ee68 	.word	0x0010ee68
    8588:	00008598 	.word	0x00008598
    858c:	0010e974 	.word	0x0010e974
    8590:	0003e610 	.word	0x0003e610
    8594:	0003e5fc 	.word	0x0003e5fc

00008598 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)>:
    8598:	e1a0c000 	mov	ip, r0
    859c:	e59f3014 	ldr	r3, [pc, #20]	; 85b8 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x20>
    85a0:	e59f0014 	ldr	r0, [pc, #20]	; 85bc <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x24>
    85a4:	e5933000 	ldr	r3, [r3]
    85a8:	e1a02001 	mov	r2, r1
    85ac:	e0830000 	add	r0, r3, r0
    85b0:	e1a0100c 	mov	r1, ip
    85b4:	ea0001a3 	b	8c48 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)>
    85b8:	0004da60 	.word	0x0004da60
    85bc:	001115f8 	.word	0x001115f8

000085c0 <BusRaiderApp::BusRaiderApp(Display&, CommsManager&, McManager&)>:
    85c0:	e92d4030 	push	{r4, r5, lr}
    85c4:	e3a0e000 	mov	lr, #0
    85c8:	e3a05064 	mov	r5, #100	; 0x64
    85cc:	e3e04000 	mvn	r4, #0
    85d0:	e1c027fc 	strd	r2, [r0, #124]	; 0x7c
    85d4:	e59f2060 	ldr	r2, [pc, #96]	; 863c <BusRaiderApp::BusRaiderApp(Display&, CommsManager&, McManager&)+0x7c>
    85d8:	e2803a03 	add	r3, r0, #12288	; 0x3000
    85dc:	e5820000 	str	r0, [r2]
    85e0:	e2832e53 	add	r2, r3, #1328	; 0x530
    85e4:	e5801078 	str	r1, [r0, #120]	; 0x78
    85e8:	e5c0e008 	strb	lr, [r0, #8]
    85ec:	e580e070 	str	lr, [r0, #112]	; 0x70
    85f0:	e583e528 	str	lr, [r3, #1320]	; 0x528
    85f4:	e5835530 	str	r5, [r3, #1328]	; 0x530
    85f8:	e583e52c 	str	lr, [r3, #1324]	; 0x52c
    85fc:	e580e004 	str	lr, [r0, #4]
    8600:	e580e074 	str	lr, [r0, #116]	; 0x74
    8604:	e5c0e084 	strb	lr, [r0, #132]	; 0x84
    8608:	e5c0e000 	strb	lr, [r0]
    860c:	e5c0e854 	strb	lr, [r0, #2132]	; 0x854
    8610:	e5c0e872 	strb	lr, [r0, #2162]	; 0x872
    8614:	e5c0e890 	strb	lr, [r0, #2192]	; 0x890
    8618:	e5c0e8f4 	strb	lr, [r0, #2292]	; 0x8f4
    861c:	e5c0e958 	strb	lr, [r0, #2392]	; 0x958
    8620:	e580e95c 	str	lr, [r0, #2396]	; 0x95c
    8624:	e5c0e960 	strb	lr, [r0, #2400]	; 0x960
    8628:	e583e070 	str	lr, [r3, #112]	; 0x70
    862c:	e583e074 	str	lr, [r3, #116]	; 0x74
    8630:	e1c2e0b4 	strh	lr, [r2, #4]
    8634:	e5834538 	str	r4, [r3, #1336]	; 0x538
    8638:	e8bd8030 	pop	{r4, r5, pc}
    863c:	0004da64 	.word	0x0004da64

00008640 <BusRaiderApp::init()>:
    8640:	e3a03000 	mov	r3, #0
    8644:	e3e01000 	mvn	r1, #0
    8648:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    864c:	e2802a03 	add	r2, r0, #12288	; 0x3000
    8650:	e24dd00c 	sub	sp, sp, #12
    8654:	e5803004 	str	r3, [r0, #4]
    8658:	e5c03008 	strb	r3, [r0, #8]
    865c:	e5803070 	str	r3, [r0, #112]	; 0x70
    8660:	e5803074 	str	r3, [r0, #116]	; 0x74
    8664:	e5c03084 	strb	r3, [r0, #132]	; 0x84
    8668:	e5c03000 	strb	r3, [r0]
    866c:	e5c03854 	strb	r3, [r0, #2132]	; 0x854
    8670:	e5c03872 	strb	r3, [r0, #2162]	; 0x872
    8674:	e5c03890 	strb	r3, [r0, #2192]	; 0x890
    8678:	e5c038f4 	strb	r3, [r0, #2292]	; 0x8f4
    867c:	e5c03958 	strb	r3, [r0, #2392]	; 0x958
    8680:	e580395c 	str	r3, [r0, #2396]	; 0x95c
    8684:	e5c03960 	strb	r3, [r0, #2400]	; 0x960
    8688:	e58d3004 	str	r3, [sp, #4]
    868c:	e5823070 	str	r3, [r2, #112]	; 0x70
    8690:	e5823074 	str	r3, [r2, #116]	; 0x74
    8694:	e5c23535 	strb	r3, [r2, #1333]	; 0x535
    8698:	e58d3000 	str	r3, [sp]
    869c:	e5821538 	str	r1, [r2, #1336]	; 0x538
    86a0:	e59f3014 	ldr	r3, [pc, #20]	; 86bc <BusRaiderApp::init()+0x7c>
    86a4:	e1a01000 	mov	r1, r0
    86a8:	e3a02001 	mov	r2, #1
    86ac:	e590007c 	ldr	r0, [r0, #124]	; 0x7c
    86b0:	eb009c89 	bl	2f8dc <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
    86b4:	e28dd00c 	add	sp, sp, #12
    86b8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    86bc:	00009664 	.word	0x00009664

000086c0 <BusRaiderApp::clear()>:
    86c0:	e3a03000 	mov	r3, #0
    86c4:	e3e01000 	mvn	r1, #0
    86c8:	e2802a03 	add	r2, r0, #12288	; 0x3000
    86cc:	e5803004 	str	r3, [r0, #4]
    86d0:	e5c03008 	strb	r3, [r0, #8]
    86d4:	e5803070 	str	r3, [r0, #112]	; 0x70
    86d8:	e5803074 	str	r3, [r0, #116]	; 0x74
    86dc:	e5c03084 	strb	r3, [r0, #132]	; 0x84
    86e0:	e5c03000 	strb	r3, [r0]
    86e4:	e5c03854 	strb	r3, [r0, #2132]	; 0x854
    86e8:	e5c03872 	strb	r3, [r0, #2162]	; 0x872
    86ec:	e5c03890 	strb	r3, [r0, #2192]	; 0x890
    86f0:	e5c038f4 	strb	r3, [r0, #2292]	; 0x8f4
    86f4:	e5c03958 	strb	r3, [r0, #2392]	; 0x958
    86f8:	e580395c 	str	r3, [r0, #2396]	; 0x95c
    86fc:	e5c03960 	strb	r3, [r0, #2400]	; 0x960
    8700:	e5823070 	str	r3, [r2, #112]	; 0x70
    8704:	e5823074 	str	r3, [r2, #116]	; 0x74
    8708:	e5c23535 	strb	r3, [r2, #1333]	; 0x535
    870c:	e5821538 	str	r1, [r2, #1336]	; 0x538
    8710:	e12fff1e 	bx	lr

00008714 <BusRaiderApp::peripheralStatus(bool, bool)>:
    8714:	e3510000 	cmp	r1, #0
    8718:	0a00000a 	beq	8748 <BusRaiderApp::peripheralStatus(bool, bool)+0x34>
    871c:	e3520000 	cmp	r2, #0
    8720:	e5900078 	ldr	r0, [r0, #120]	; 0x78
    8724:	0a000003 	beq	8738 <BusRaiderApp::peripheralStatus(bool, bool)+0x24>
    8728:	e3a02002 	mov	r2, #2
    872c:	e3a01008 	mov	r1, #8
    8730:	e59f3024 	ldr	r3, [pc, #36]	; 875c <BusRaiderApp::peripheralStatus(bool, bool)+0x48>
    8734:	ea00cc2a 	b	3b7e4 <Display::statusPut(int, int, char const*)>
    8738:	e3a02001 	mov	r2, #1
    873c:	e3a01008 	mov	r1, #8
    8740:	e59f3018 	ldr	r3, [pc, #24]	; 8760 <BusRaiderApp::peripheralStatus(bool, bool)+0x4c>
    8744:	ea00cc26 	b	3b7e4 <Display::statusPut(int, int, char const*)>
    8748:	e1a02001 	mov	r2, r1
    874c:	e5900078 	ldr	r0, [r0, #120]	; 0x78
    8750:	e3a01008 	mov	r1, #8
    8754:	e59f3008 	ldr	r3, [pc, #8]	; 8764 <BusRaiderApp::peripheralStatus(bool, bool)+0x50>
    8758:	ea00cc21 	b	3b7e4 <Display::statusPut(int, int, char const*)>
    875c:	0003e630 	.word	0x0003e630
    8760:	0003e650 	.word	0x0003e650
    8764:	0003e664 	.word	0x0003e664

00008768 <BusRaiderApp::statusDisplayUpdate()>:
    8768:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    876c:	e1a05000 	mov	r5, r0
    8770:	e5903080 	ldr	r3, [r0, #128]	; 0x80
    8774:	e24dd0d4 	sub	sp, sp, #212	; 0xd4
    8778:	e593400c 	ldr	r4, [r3, #12]
    877c:	e590607c 	ldr	r6, [r0, #124]	; 0x7c
    8780:	eb009551 	bl	2dccc <micros>
    8784:	e5951004 	ldr	r1, [r5, #4]
    8788:	e59f244c 	ldr	r2, [pc, #1100]	; 8bdc <BusRaiderApp::statusDisplayUpdate()+0x474>
    878c:	eb00956c 	bl	2dd44 <isTimeout>
    8790:	e3500000 	cmp	r0, #0
    8794:	1a000001 	bne	87a0 <BusRaiderApp::statusDisplayUpdate()+0x38>
    8798:	e28dd0d4 	add	sp, sp, #212	; 0xd4
    879c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    87a0:	eb009549 	bl	2dccc <micros>
    87a4:	e3a02000 	mov	r2, #0
    87a8:	e59f7430 	ldr	r7, [pc, #1072]	; 8be0 <BusRaiderApp::statusDisplayUpdate()+0x478>
    87ac:	e1a01002 	mov	r1, r2
    87b0:	e5973000 	ldr	r3, [r7]
    87b4:	e5850004 	str	r0, [r5, #4]
    87b8:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    87bc:	eb00cc08 	bl	3b7e4 <Display::statusPut(int, int, char const*)>
    87c0:	e5973004 	ldr	r3, [r7, #4]
    87c4:	e3a02000 	mov	r2, #0
    87c8:	e3a01001 	mov	r1, #1
    87cc:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    87d0:	e2857e8f 	add	r7, r5, #2288	; 0x8f0
    87d4:	eb00cc02 	bl	3b7e4 <Display::statusPut(int, int, char const*)>
    87d8:	e2877004 	add	r7, r7, #4
    87dc:	e3a02032 	mov	r2, #50	; 0x32
    87e0:	e59f13fc 	ldr	r1, [pc, #1020]	; 8be4 <BusRaiderApp::statusDisplayUpdate()+0x47c>
    87e4:	e28d005c 	add	r0, sp, #92	; 0x5c
    87e8:	eb009571 	bl	2ddb4 <strlcpy>
    87ec:	e1a00007 	mov	r0, r7
    87f0:	eb0085c9 	bl	29f1c <strlen>
    87f4:	e3500000 	cmp	r0, #0
    87f8:	0a0000b0 	beq	8ac0 <BusRaiderApp::statusDisplayUpdate()+0x358>
    87fc:	e1a01007 	mov	r1, r7
    8800:	e3a02032 	mov	r2, #50	; 0x32
    8804:	e28d005c 	add	r0, sp, #92	; 0x5c
    8808:	eb009585 	bl	2de24 <strlcat>
    880c:	e5942000 	ldr	r2, [r4]
    8810:	e59f13d0 	ldr	r1, [pc, #976]	; 8be8 <BusRaiderApp::statusDisplayUpdate()+0x480>
    8814:	e1a03fc2 	asr	r3, r2, #31
    8818:	e0c10291 	smull	r0, r1, r1, r2
    881c:	e0633141 	rsb	r3, r3, r1, asr #2
    8820:	e0831103 	add	r1, r3, r3, lsl #2
    8824:	e0422081 	sub	r2, r2, r1, lsl #1
    8828:	e58d2000 	str	r2, [sp]
    882c:	e3a0101e 	mov	r1, #30
    8830:	e59f23b4 	ldr	r2, [pc, #948]	; 8bec <BusRaiderApp::statusDisplayUpdate()+0x484>
    8834:	e28d0090 	add	r0, sp, #144	; 0x90
    8838:	eb0095c9 	bl	2df64 <snprintf>
    883c:	e3a02032 	mov	r2, #50	; 0x32
    8840:	e28d1090 	add	r1, sp, #144	; 0x90
    8844:	e28d005c 	add	r0, sp, #92	; 0x5c
    8848:	eb009575 	bl	2de24 <strlcat>
    884c:	e3a02032 	mov	r2, #50	; 0x32
    8850:	e59f1398 	ldr	r1, [pc, #920]	; 8bf0 <BusRaiderApp::statusDisplayUpdate()+0x488>
    8854:	e28d005c 	add	r0, sp, #92	; 0x5c
    8858:	eb009571 	bl	2de24 <strlcat>
    885c:	e3a02000 	mov	r2, #0
    8860:	e3a01002 	mov	r1, #2
    8864:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8868:	e28d305c 	add	r3, sp, #92	; 0x5c
    886c:	eb00cbdc 	bl	3b7e4 <Display::statusPut(int, int, char const*)>
    8870:	e3a02000 	mov	r2, #0
    8874:	e5d53872 	ldrb	r3, [r5, #2162]	; 0x872
    8878:	e5cd205c 	strb	r2, [sp, #92]	; 0x5c
    887c:	e3530043 	cmp	r3, #67	; 0x43
    8880:	e3a02032 	mov	r2, #50	; 0x32
    8884:	0a00009a 	beq	8af4 <BusRaiderApp::statusDisplayUpdate()+0x38c>
    8888:	e59f1364 	ldr	r1, [pc, #868]	; 8bf4 <BusRaiderApp::statusDisplayUpdate()+0x48c>
    888c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8890:	eb009547 	bl	2ddb4 <strlcpy>
    8894:	e3a02001 	mov	r2, #1
    8898:	e3a01003 	mov	r1, #3
    889c:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    88a0:	e28d305c 	add	r3, sp, #92	; 0x5c
    88a4:	eb00cbce 	bl	3b7e4 <Display::statusPut(int, int, char const*)>
    88a8:	e3a02032 	mov	r2, #50	; 0x32
    88ac:	e59f1344 	ldr	r1, [pc, #836]	; 8bf8 <BusRaiderApp::statusDisplayUpdate()+0x490>
    88b0:	e28d005c 	add	r0, sp, #92	; 0x5c
    88b4:	eb00953e 	bl	2ddb4 <strlcpy>
    88b8:	e5950080 	ldr	r0, [r5, #128]	; 0x80
    88bc:	eb00b72a 	bl	3656c <McManager::getMachineName()>
    88c0:	e3a02032 	mov	r2, #50	; 0x32
    88c4:	e1a01000 	mov	r1, r0
    88c8:	e28d005c 	add	r0, sp, #92	; 0x5c
    88cc:	eb009554 	bl	2de24 <strlcat>
    88d0:	e3a02028 	mov	r2, #40	; 0x28
    88d4:	e59f1320 	ldr	r1, [pc, #800]	; 8bfc <BusRaiderApp::statusDisplayUpdate()+0x494>
    88d8:	e28d005c 	add	r0, sp, #92	; 0x5c
    88dc:	eb009550 	bl	2de24 <strlcat>
    88e0:	e3a01004 	mov	r1, #4
    88e4:	e3a02000 	mov	r2, #0
    88e8:	e28d305c 	add	r3, sp, #92	; 0x5c
    88ec:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    88f0:	eb00cbbb 	bl	3b7e4 <Display::statusPut(int, int, char const*)>
    88f4:	e5950080 	ldr	r0, [r5, #128]	; 0x80
    88f8:	eb00b783 	bl	3670c <McManager::getMachineClock()>
    88fc:	e59f32fc 	ldr	r3, [pc, #764]	; 8c00 <BusRaiderApp::statusDisplayUpdate()+0x498>
    8900:	e1a02fc0 	asr	r2, r0, #31
    8904:	e0c31093 	smull	r1, r3, r3, r0
    8908:	e0623943 	rsb	r3, r2, r3, asr #18
    890c:	e0632283 	rsb	r2, r3, r3, lsl #5
    8910:	e0622302 	rsb	r2, r2, r2, lsl #6
    8914:	e0832182 	add	r2, r3, r2, lsl #3
    8918:	e59f12e4 	ldr	r1, [pc, #740]	; 8c04 <BusRaiderApp::statusDisplayUpdate()+0x49c>
    891c:	e0400302 	sub	r0, r0, r2, lsl #6
    8920:	e0c12091 	smull	r2, r1, r1, r0
    8924:	e59fc2dc 	ldr	ip, [pc, #732]	; 8c08 <BusRaiderApp::statusDisplayUpdate()+0x4a0>
    8928:	e1a02fc0 	asr	r2, r0, #31
    892c:	e150000c 	cmp	r0, ip
    8930:	e0622341 	rsb	r2, r2, r1, asr #6
    8934:	aa00006b 	bge	8ae8 <BusRaiderApp::statusDisplayUpdate()+0x380>
    8938:	e59f12cc 	ldr	r1, [pc, #716]	; 8c0c <BusRaiderApp::statusDisplayUpdate()+0x4a4>
    893c:	e1500001 	cmp	r0, r1
    8940:	c59f02c8 	ldrgt	r0, [pc, #712]	; 8c10 <BusRaiderApp::statusDisplayUpdate()+0x4a8>
    8944:	e59f12c8 	ldr	r1, [pc, #712]	; 8c14 <BusRaiderApp::statusDisplayUpdate()+0x4ac>
    8948:	d1a00001 	movle	r0, r1
    894c:	e98d0005 	stmib	sp, {r0, r2}
    8950:	e58d1000 	str	r1, [sp]
    8954:	e59f22bc 	ldr	r2, [pc, #700]	; 8c18 <BusRaiderApp::statusDisplayUpdate()+0x4b0>
    8958:	e3a01032 	mov	r1, #50	; 0x32
    895c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8960:	eb00957f 	bl	2df64 <snprintf>
    8964:	e3a02032 	mov	r2, #50	; 0x32
    8968:	e59f12ac 	ldr	r1, [pc, #684]	; 8c1c <BusRaiderApp::statusDisplayUpdate()+0x4b4>
    896c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8970:	eb00952b 	bl	2de24 <strlcat>
    8974:	e3a02000 	mov	r2, #0
    8978:	e3a01005 	mov	r1, #5
    897c:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8980:	e28d305c 	add	r3, sp, #92	; 0x5c
    8984:	eb00cb96 	bl	3b7e4 <Display::statusPut(int, int, char const*)>
    8988:	e3a03000 	mov	r3, #0
    898c:	e3a02032 	mov	r2, #50	; 0x32
    8990:	e59f1288 	ldr	r1, [pc, #648]	; 8c20 <BusRaiderApp::statusDisplayUpdate()+0x4b8>
    8994:	e28d005c 	add	r0, sp, #92	; 0x5c
    8998:	e5cd305c 	strb	r3, [sp, #92]	; 0x5c
    899c:	eb009504 	bl	2ddb4 <strlcpy>
    89a0:	e1a00004 	mov	r0, r4
    89a4:	eb00a541 	bl	31eb0 <BusAccess::isUnderControl()>
    89a8:	e3500000 	cmp	r0, #0
    89ac:	1a000060 	bne	8b34 <BusRaiderApp::statusDisplayUpdate()+0x3cc>
    89b0:	e3a02000 	mov	r2, #0
    89b4:	e3a01006 	mov	r1, #6
    89b8:	e28d305c 	add	r3, sp, #92	; 0x5c
    89bc:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    89c0:	eb00cb87 	bl	3b7e4 <Display::statusPut(int, int, char const*)>
    89c4:	e5950080 	ldr	r0, [r5, #128]	; 0x80
    89c8:	eb00b8ac 	bl	36c80 <McManager::getDisplayRefreshRate()>
    89cc:	e3a04000 	mov	r4, #0
    89d0:	e1a07000 	mov	r7, r0
    89d4:	e5d51000 	ldrb	r1, [r5]
    89d8:	e59f3244 	ldr	r3, [pc, #580]	; 8c24 <BusRaiderApp::statusDisplayUpdate()+0x4bc>
    89dc:	e59f2244 	ldr	r2, [pc, #580]	; 8c28 <BusRaiderApp::statusDisplayUpdate()+0x4c0>
    89e0:	e1510004 	cmp	r1, r4
    89e4:	11a01002 	movne	r1, r2
    89e8:	01a01003 	moveq	r1, r3
    89ec:	e3a02028 	mov	r2, #40	; 0x28
    89f0:	e28d0030 	add	r0, sp, #48	; 0x30
    89f4:	eb0094ee 	bl	2ddb4 <strlcpy>
    89f8:	e5d53000 	ldrb	r3, [r5]
    89fc:	e3a02028 	mov	r2, #40	; 0x28
    8a00:	e2233001 	eor	r3, r3, #1
    8a04:	e59f1220 	ldr	r1, [pc, #544]	; 8c2c <BusRaiderApp::statusDisplayUpdate()+0x4c4>
    8a08:	e5c53000 	strb	r3, [r5]
    8a0c:	e28d0030 	add	r0, sp, #48	; 0x30
    8a10:	eb009503 	bl	2de24 <strlcat>
    8a14:	e3a0300a 	mov	r3, #10
    8a18:	e3a02028 	mov	r2, #40	; 0x28
    8a1c:	e28d101c 	add	r1, sp, #28
    8a20:	e1a00007 	mov	r0, r7
    8a24:	eb0096a8 	bl	2e4cc <rditoa>
    8a28:	e3a02028 	mov	r2, #40	; 0x28
    8a2c:	e28d101c 	add	r1, sp, #28
    8a30:	e28d0030 	add	r0, sp, #48	; 0x30
    8a34:	eb0094fa 	bl	2de24 <strlcat>
    8a38:	e3a02028 	mov	r2, #40	; 0x28
    8a3c:	e59f11ec 	ldr	r1, [pc, #492]	; 8c30 <BusRaiderApp::statusDisplayUpdate()+0x4c8>
    8a40:	e28d0030 	add	r0, sp, #48	; 0x30
    8a44:	eb0094f6 	bl	2de24 <strlcat>
    8a48:	e1a02004 	mov	r2, r4
    8a4c:	e3a01007 	mov	r1, #7
    8a50:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8a54:	e28d3030 	add	r3, sp, #48	; 0x30
    8a58:	eb00cb61 	bl	3b7e4 <Display::statusPut(int, int, char const*)>
    8a5c:	e1a00006 	mov	r0, r6
    8a60:	e28d2018 	add	r2, sp, #24
    8a64:	e28d1014 	add	r1, sp, #20
    8a68:	e58d4014 	str	r4, [sp, #20]
    8a6c:	e58d4018 	str	r4, [sp, #24]
    8a70:	eb009c33 	bl	2fb44 <CommandHandler::getFileReceiveStatus(unsigned long&, unsigned long&)>
    8a74:	e3500000 	cmp	r0, #0
    8a78:	058d0014 	streq	r0, [sp, #20]
    8a7c:	0a000008 	beq	8aa4 <BusRaiderApp::statusDisplayUpdate()+0x33c>
    8a80:	e59d1014 	ldr	r1, [sp, #20]
    8a84:	e3510000 	cmp	r1, #0
    8a88:	0a000005 	beq	8aa4 <BusRaiderApp::statusDisplayUpdate()+0x33c>
    8a8c:	e59d0018 	ldr	r0, [sp, #24]
    8a90:	e0800100 	add	r0, r0, r0, lsl #2
    8a94:	e1a00180 	lsl	r0, r0, #3
    8a98:	eb00d0eb 	bl	3ce4c <__udivsi3>
    8a9c:	e2506000 	subs	r6, r0, #0
    8aa0:	ca000028 	bgt	8b48 <BusRaiderApp::statusDisplayUpdate()+0x3e0>
    8aa4:	e3a02001 	mov	r2, #1
    8aa8:	e3a0100a 	mov	r1, #10
    8aac:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8ab0:	e59f317c 	ldr	r3, [pc, #380]	; 8c34 <BusRaiderApp::statusDisplayUpdate()+0x4cc>
    8ab4:	eb00cb4a 	bl	3b7e4 <Display::statusPut(int, int, char const*)>
    8ab8:	e28dd0d4 	add	sp, sp, #212	; 0xd4
    8abc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8ac0:	e3a02032 	mov	r2, #50	; 0x32
    8ac4:	e59f116c 	ldr	r1, [pc, #364]	; 8c38 <BusRaiderApp::statusDisplayUpdate()+0x4d0>
    8ac8:	e28d005c 	add	r0, sp, #92	; 0x5c
    8acc:	eb0094d4 	bl	2de24 <strlcat>
    8ad0:	e3a02001 	mov	r2, #1
    8ad4:	e3a01002 	mov	r1, #2
    8ad8:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8adc:	e28d305c 	add	r3, sp, #92	; 0x5c
    8ae0:	eb00cb3f 	bl	3b7e4 <Display::statusPut(int, int, char const*)>
    8ae4:	eaffff61 	b	8870 <BusRaiderApp::statusDisplayUpdate()+0x108>
    8ae8:	e59f1120 	ldr	r1, [pc, #288]	; 8c10 <BusRaiderApp::statusDisplayUpdate()+0x4a8>
    8aec:	e1a00001 	mov	r0, r1
    8af0:	eaffff95 	b	894c <BusRaiderApp::statusDisplayUpdate()+0x1e4>
    8af4:	e59f1140 	ldr	r1, [pc, #320]	; 8c3c <BusRaiderApp::statusDisplayUpdate()+0x4d4>
    8af8:	e28d005c 	add	r0, sp, #92	; 0x5c
    8afc:	eb0094ac 	bl	2ddb4 <strlcpy>
    8b00:	e5d53958 	ldrb	r3, [r5, #2392]	; 0x958
    8b04:	e3530000 	cmp	r3, #0
    8b08:	1a00002d 	bne	8bc4 <BusRaiderApp::statusDisplayUpdate()+0x45c>
    8b0c:	e3a02032 	mov	r2, #50	; 0x32
    8b10:	e59f10d8 	ldr	r1, [pc, #216]	; 8bf0 <BusRaiderApp::statusDisplayUpdate()+0x488>
    8b14:	e28d005c 	add	r0, sp, #92	; 0x5c
    8b18:	eb0094c1 	bl	2de24 <strlcat>
    8b1c:	e3a02000 	mov	r2, #0
    8b20:	e3a01003 	mov	r1, #3
    8b24:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8b28:	e28d305c 	add	r3, sp, #92	; 0x5c
    8b2c:	eb00cb2c 	bl	3b7e4 <Display::statusPut(int, int, char const*)>
    8b30:	eaffff5c 	b	88a8 <BusRaiderApp::statusDisplayUpdate()+0x140>
    8b34:	e3a02032 	mov	r2, #50	; 0x32
    8b38:	e59f1100 	ldr	r1, [pc, #256]	; 8c40 <BusRaiderApp::statusDisplayUpdate()+0x4d8>
    8b3c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8b40:	eb0094b7 	bl	2de24 <strlcat>
    8b44:	eaffff99 	b	89b0 <BusRaiderApp::statusDisplayUpdate()+0x248>
    8b48:	e3a0203c 	mov	r2, #60	; 0x3c
    8b4c:	e59f10f0 	ldr	r1, [pc, #240]	; 8c44 <BusRaiderApp::statusDisplayUpdate()+0x4dc>
    8b50:	e28d0090 	add	r0, sp, #144	; 0x90
    8b54:	eb009496 	bl	2ddb4 <strlcpy>
    8b58:	e28d0090 	add	r0, sp, #144	; 0x90
    8b5c:	eb0084ee 	bl	29f1c <strlen>
    8b60:	e28d1090 	add	r1, sp, #144	; 0x90
    8b64:	e2402001 	sub	r2, r0, #1
    8b68:	e0812002 	add	r2, r1, r2
    8b6c:	e1a03004 	mov	r3, r4
    8b70:	e3a01023 	mov	r1, #35	; 0x23
    8b74:	ea000002 	b	8b84 <BusRaiderApp::statusDisplayUpdate()+0x41c>
    8b78:	e1560003 	cmp	r6, r3
    8b7c:	c3a01023 	movgt	r1, #35	; 0x23
    8b80:	d3a01020 	movle	r1, #32
    8b84:	e2833001 	add	r3, r3, #1
    8b88:	e3530028 	cmp	r3, #40	; 0x28
    8b8c:	e5e21001 	strb	r1, [r2, #1]!
    8b90:	1afffff8 	bne	8b78 <BusRaiderApp::statusDisplayUpdate()+0x410>
    8b94:	e3a0105d 	mov	r1, #93	; 0x5d
    8b98:	e3a0e000 	mov	lr, #0
    8b9c:	e28d30d0 	add	r3, sp, #208	; 0xd0
    8ba0:	e083c000 	add	ip, r3, r0
    8ba4:	e54c1018 	strb	r1, [ip, #-24]	; 0xffffffe8
    8ba8:	e3a02001 	mov	r2, #1
    8bac:	e3a0100a 	mov	r1, #10
    8bb0:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8bb4:	e28d3090 	add	r3, sp, #144	; 0x90
    8bb8:	e54ce017 	strb	lr, [ip, #-23]	; 0xffffffe9
    8bbc:	eb00cb08 	bl	3b7e4 <Display::statusPut(int, int, char const*)>
    8bc0:	eafffef4 	b	8798 <BusRaiderApp::statusDisplayUpdate()+0x30>
    8bc4:	e2851e85 	add	r1, r5, #2128	; 0x850
    8bc8:	e3a02032 	mov	r2, #50	; 0x32
    8bcc:	e2811004 	add	r1, r1, #4
    8bd0:	e28d005c 	add	r0, sp, #92	; 0x5c
    8bd4:	eb009492 	bl	2de24 <strlcat>
    8bd8:	eaffffcb 	b	8b0c <BusRaiderApp::statusDisplayUpdate()+0x3a4>
    8bdc:	000f4240 	.word	0x000f4240
    8be0:	0004781c 	.word	0x0004781c
    8be4:	0003e688 	.word	0x0003e688
    8be8:	66666667 	.word	0x66666667
    8bec:	0003e6b0 	.word	0x0003e6b0
    8bf0:	0003e6c0 	.word	0x0003e6c0
    8bf4:	0003e6d8 	.word	0x0003e6d8
    8bf8:	0003e6f0 	.word	0x0003e6f0
    8bfc:	0003e6f8 	.word	0x0003e6f8
    8c00:	431bde83 	.word	0x431bde83
    8c04:	10624dd3 	.word	0x10624dd3
    8c08:	000186a0 	.word	0x000186a0
    8c0c:	0000270f 	.word	0x0000270f
    8c10:	00047150 	.word	0x00047150
    8c14:	0003f63c 	.word	0x0003f63c
    8c18:	0003e710 	.word	0x0003e710
    8c1c:	0003e6c4 	.word	0x0003e6c4
    8c20:	0003e724 	.word	0x0003e724
    8c24:	0003e684 	.word	0x0003e684
    8c28:	0003e680 	.word	0x0003e680
    8c2c:	0003e73c 	.word	0x0003e73c
    8c30:	0003e748 	.word	0x0003e748
    8c34:	0003e760 	.word	0x0003e760
    8c38:	0003e698 	.word	0x0003e698
    8c3c:	0003e6cc 	.word	0x0003e6cc
    8c40:	0003e72c 	.word	0x0003e72c
    8c44:	0003e754 	.word	0x0003e754

00008c48 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)>:
    8c48:	e59f30b8 	ldr	r3, [pc, #184]	; 8d08 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0xc0>
    8c4c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8c50:	e5936000 	ldr	r6, [r3]
    8c54:	e2864a03 	add	r4, r6, #12288	; 0x3000
    8c58:	e5945530 	ldr	r5, [r4, #1328]	; 0x530
    8c5c:	e3550000 	cmp	r5, #0
    8c60:	08bd80f0 	popeq	{r4, r5, r6, r7, pc}
    8c64:	e5940528 	ldr	r0, [r4, #1320]	; 0x528
    8c68:	e594352c 	ldr	r3, [r4, #1324]	; 0x52c
    8c6c:	e1500003 	cmp	r0, r3
    8c70:	0a000008 	beq	8c98 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0x50>
    8c74:	e594052c 	ldr	r0, [r4, #1324]	; 0x52c
    8c78:	e5943528 	ldr	r3, [r4, #1320]	; 0x528
    8c7c:	e1500003 	cmp	r0, r3
    8c80:	e5943528 	ldr	r3, [r4, #1320]	; 0x528
    8c84:	2a00001b 	bcs	8cf8 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0xb0>
    8c88:	e245c001 	sub	ip, r5, #1
    8c8c:	e3500000 	cmp	r0, #0
    8c90:	015c0003 	cmpeq	ip, r3
    8c94:	08bd80f0 	popeq	{r4, r5, r6, r7, pc}
    8c98:	e594e528 	ldr	lr, [r4, #1320]	; 0x528
    8c9c:	e2423001 	sub	r3, r2, #1
    8ca0:	e08e008e 	add	r0, lr, lr, lsl #1
    8ca4:	e0860100 	add	r0, r6, r0, lsl #2
    8ca8:	e2800dc1 	add	r0, r0, #12352	; 0x3040
    8cac:	e2800038 	add	r0, r0, #56	; 0x38
    8cb0:	e1a0708e 	lsl	r7, lr, #1
    8cb4:	e282c005 	add	ip, r2, #5
    8cb8:	e5f32001 	ldrb	r2, [r3, #1]!
    8cbc:	e153000c 	cmp	r3, ip
    8cc0:	e4c02001 	strb	r2, [r0], #1
    8cc4:	1afffffb 	bne	8cb8 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0x70>
    8cc8:	e087300e 	add	r3, r7, lr
    8ccc:	e0863103 	add	r3, r6, r3, lsl #2
    8cd0:	e2833dc2 	add	r3, r3, #12416	; 0x3080
    8cd4:	e5831000 	str	r1, [r3]
    8cd8:	e5943528 	ldr	r3, [r4, #1320]	; 0x528
    8cdc:	e2833001 	add	r3, r3, #1
    8ce0:	e5843528 	str	r3, [r4, #1320]	; 0x528
    8ce4:	e5943528 	ldr	r3, [r4, #1320]	; 0x528
    8ce8:	e1530005 	cmp	r3, r5
    8cec:	23a03000 	movcs	r3, #0
    8cf0:	25843528 	strcs	r3, [r4, #1320]	; 0x528
    8cf4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8cf8:	e0400003 	sub	r0, r0, r3
    8cfc:	e3500001 	cmp	r0, #1
    8d00:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
    8d04:	eaffffe3 	b	8c98 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0x50>
    8d08:	0004da64 	.word	0x0004da64

00008d0c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)>:
    8d0c:	e1a03001 	mov	r3, r1
    8d10:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d14:	e590407c 	ldr	r4, [r0, #124]	; 0x7c
    8d18:	e24ddb1e 	sub	sp, sp, #30720	; 0x7800
    8d1c:	e24dd01c 	sub	sp, sp, #28
    8d20:	e1a01004 	mov	r1, r4
    8d24:	e1a06000 	mov	r6, r0
    8d28:	e1a07002 	mov	r7, r2
    8d2c:	e28d000c 	add	r0, sp, #12
    8d30:	e3a02e19 	mov	r2, #400	; 0x190
    8d34:	e58d3004 	str	r3, [sp, #4]
    8d38:	eb008672 	bl	2a708 <memcpy>
    8d3c:	e2843f65 	add	r3, r4, #404	; 0x194
    8d40:	e5945190 	ldr	r5, [r4, #400]	; 0x190
    8d44:	e1d310bc 	ldrh	r1, [r3, #12]
    8d48:	e5d4e198 	ldrb	lr, [r4, #408]	; 0x198
    8d4c:	e5d4c199 	ldrb	ip, [r4, #409]	; 0x199
    8d50:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
    8d54:	e5d4019b 	ldrb	r0, [r4, #411]	; 0x19b
    8d58:	e28d2f6b 	add	r2, sp, #428	; 0x1ac
    8d5c:	e594819c 	ldr	r8, [r4, #412]	; 0x19c
    8d60:	e58d519c 	str	r5, [sp, #412]	; 0x19c
    8d64:	e1c210b0 	strh	r1, [r2]
    8d68:	e5d451a3 	ldrb	r5, [r4, #419]	; 0x1a3
    8d6c:	e5d421a2 	ldrb	r2, [r4, #418]	; 0x1a2
    8d70:	e59f1458 	ldr	r1, [pc, #1112]	; 91d0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4c4>
    8d74:	e59f9458 	ldr	r9, [pc, #1112]	; 91d4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4c8>
    8d78:	e5cde1a4 	strb	lr, [sp, #420]	; 0x1a4
    8d7c:	e5cdc1a5 	strb	ip, [sp, #421]	; 0x1a5
    8d80:	e5d4e1a4 	ldrb	lr, [r4, #420]	; 0x1a4
    8d84:	e594c1a8 	ldr	ip, [r4, #424]	; 0x1a8
    8d88:	e5cd31a6 	strb	r3, [sp, #422]	; 0x1a6
    8d8c:	e5cd01a7 	strb	r0, [sp, #423]	; 0x1a7
    8d90:	e59431ac 	ldr	r3, [r4, #428]	; 0x1ac
    8d94:	e28d0f72 	add	r0, sp, #456	; 0x1c8
    8d98:	e58d11a0 	str	r1, [sp, #416]	; 0x1a0
    8d9c:	e5cd21ae 	strb	r2, [sp, #430]	; 0x1ae
    8da0:	e2841f6d 	add	r1, r4, #436	; 0x1b4
    8da4:	e59f242c 	ldr	r2, [pc, #1068]	; 91d8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4cc>
    8da8:	e5cd51af 	strb	r5, [sp, #431]	; 0x1af
    8dac:	e2400008 	sub	r0, r0, #8
    8db0:	e2845a02 	add	r5, r4, #8192	; 0x2000
    8db4:	e58d81a8 	str	r8, [sp, #424]	; 0x1a8
    8db8:	e5cde1b0 	strb	lr, [sp, #432]	; 0x1b0
    8dbc:	e58dc1b4 	str	ip, [sp, #436]	; 0x1b4
    8dc0:	e58d31b8 	str	r3, [sp, #440]	; 0x1b8
    8dc4:	e58d91bc 	str	r9, [sp, #444]	; 0x1bc
    8dc8:	eb00864e 	bl	2a708 <memcpy>
    8dcc:	e595e8c4 	ldr	lr, [r5, #2244]	; 0x8c4
    8dd0:	e595c8c8 	ldr	ip, [r5, #2248]	; 0x8c8
    8dd4:	e28d3b0a 	add	r3, sp, #10240	; 0x2800
    8dd8:	e2833018 	add	r3, r3, #24
    8ddc:	e28d8b12 	add	r8, sp, #18432	; 0x4800
    8de0:	e2888018 	add	r8, r8, #24
    8de4:	e2851e8d 	add	r1, r5, #2256	; 0x8d0
    8de8:	e58390c0 	str	r9, [r3, #192]	; 0xc0
    8dec:	e583e0b8 	str	lr, [r3, #184]	; 0xb8
    8df0:	e583c0bc 	str	ip, [r3, #188]	; 0xbc
    8df4:	e59f23dc 	ldr	r2, [pc, #988]	; 91d8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4cc>
    8df8:	e28300c4 	add	r0, r3, #196	; 0xc4
    8dfc:	eb008641 	bl	2a708 <memcpy>
    8e00:	e1a0c008 	mov	ip, r8
    8e04:	e2843901 	add	r3, r4, #16384	; 0x4000
    8e08:	e5932fec 	ldr	r2, [r3, #4076]	; 0xfec
    8e0c:	e593afe0 	ldr	sl, [r3, #4064]	; 0xfe0
    8e10:	e5939fe4 	ldr	r9, [r3, #4068]	; 0xfe4
    8e14:	e593efe8 	ldr	lr, [r3, #4072]	; 0xfe8
    8e18:	e5ac27e0 	str	r2, [ip, #2016]!	; 0x7e0
    8e1c:	e2833eff 	add	r3, r3, #4080	; 0xff0
    8e20:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    8e24:	e2845a05 	add	r5, r4, #20480	; 0x5000
    8e28:	e98c000f 	stmib	ip, {r0, r1, r2, r3}
    8e2c:	e2880e7f 	add	r0, r8, #2032	; 0x7f0
    8e30:	e1a01005 	mov	r1, r5
    8e34:	e3a02065 	mov	r2, #101	; 0x65
    8e38:	e2800004 	add	r0, r0, #4
    8e3c:	e588a7d4 	str	sl, [r8, #2004]	; 0x7d4
    8e40:	e58897d8 	str	r9, [r8, #2008]	; 0x7d8
    8e44:	e588e7dc 	str	lr, [r8, #2012]	; 0x7dc
    8e48:	eb00862e 	bl	2a708 <memcpy>
    8e4c:	e2883e85 	add	r3, r8, #2128	; 0x850
    8e50:	e2833009 	add	r3, r3, #9
    8e54:	e2852065 	add	r2, r5, #101	; 0x65
    8e58:	e2851085 	add	r1, r5, #133	; 0x85
    8e5c:	e5928000 	ldr	r8, [r2]
    8e60:	e592e004 	ldr	lr, [r2, #4]
    8e64:	e592c008 	ldr	ip, [r2, #8]
    8e68:	e592000c 	ldr	r0, [r2, #12]
    8e6c:	e2822010 	add	r2, r2, #16
    8e70:	e1520001 	cmp	r2, r1
    8e74:	e5838000 	str	r8, [r3]
    8e78:	e583e004 	str	lr, [r3, #4]
    8e7c:	e583c008 	str	ip, [r3, #8]
    8e80:	e583000c 	str	r0, [r3, #12]
    8e84:	e2833010 	add	r3, r3, #16
    8e88:	1afffff3 	bne	8e5c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x150>
    8e8c:	e1a08005 	mov	r8, r5
    8e90:	e5920000 	ldr	r0, [r2]
    8e94:	e5921004 	ldr	r1, [r2, #4]
    8e98:	e5830000 	str	r0, [r3]
    8e9c:	e5831004 	str	r1, [r3, #4]
    8ea0:	e5d2c008 	ldrb	ip, [r2, #8]
    8ea4:	e28d0a05 	add	r0, sp, #20480	; 0x5000
    8ea8:	e285108e 	add	r1, r5, #142	; 0x8e
    8eac:	e5c3c008 	strb	ip, [r3, #8]
    8eb0:	e59f2324 	ldr	r2, [pc, #804]	; 91dc <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4d0>
    8eb4:	e280009a 	add	r0, r0, #154	; 0x9a
    8eb8:	eb008612 	bl	2a708 <memcpy>
    8ebc:	e28deb16 	add	lr, sp, #22528	; 0x5800
    8ec0:	e28ee018 	add	lr, lr, #24
    8ec4:	e595286c 	ldr	r2, [r5, #2156]	; 0x86c
    8ec8:	e28e3064 	add	r3, lr, #100	; 0x64
    8ecc:	e285ce87 	add	ip, r5, #2160	; 0x870
    8ed0:	e595b860 	ldr	fp, [r5, #2144]	; 0x860
    8ed4:	e595a864 	ldr	sl, [r5, #2148]	; 0x864
    8ed8:	e5959868 	ldr	r9, [r5, #2152]	; 0x868
    8edc:	e58d2000 	str	r2, [sp]
    8ee0:	e89c0007 	ldm	ip, {r0, r1, r2}
    8ee4:	e8830007 	stm	r3, {r0, r1, r2}
    8ee8:	e28e5070 	add	r5, lr, #112	; 0x70
    8eec:	e28cc00c 	add	ip, ip, #12
    8ef0:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    8ef4:	e8a5000f 	stmia	r5!, {r0, r1, r2, r3}
    8ef8:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    8efc:	e8a5000f 	stmia	r5!, {r0, r1, r2, r3}
    8f00:	e59d2000 	ldr	r2, [sp]
    8f04:	e58eb054 	str	fp, [lr, #84]	; 0x54
    8f08:	e58ea058 	str	sl, [lr, #88]	; 0x58
    8f0c:	e58e905c 	str	r9, [lr, #92]	; 0x5c
    8f10:	e58e2060 	str	r2, [lr, #96]	; 0x60
    8f14:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    8f18:	e8a5000f 	stmia	r5!, {r0, r1, r2, r3}
    8f1c:	e59c3000 	ldr	r3, [ip]
    8f20:	e3a02efa 	mov	r2, #4000	; 0xfa0
    8f24:	e1c530b0 	strh	r3, [r5]
    8f28:	e5b838b0 	ldr	r3, [r8, #2224]!	; 0x8b0
    8f2c:	e28e00a8 	add	r0, lr, #168	; 0xa8
    8f30:	e58e30a4 	str	r3, [lr, #164]	; 0xa4
    8f34:	e2881004 	add	r1, r8, #4
    8f38:	e28d5b1a 	add	r5, sp, #26624	; 0x6800
    8f3c:	eb0085f1 	bl	2a708 <memcpy>
    8f40:	e2855018 	add	r5, r5, #24
    8f44:	e2841b1a 	add	r1, r4, #26624	; 0x6800
    8f48:	e3a02efa 	mov	r2, #4000	; 0xfa0
    8f4c:	e2811054 	add	r1, r1, #84	; 0x54
    8f50:	e2850048 	add	r0, r5, #72	; 0x48
    8f54:	eb0085eb 	bl	2a708 <memcpy>
    8f58:	e2844a07 	add	r4, r4, #28672	; 0x7000
    8f5c:	e5d71000 	ldrb	r1, [r7]
    8f60:	e59427f4 	ldr	r2, [r4, #2036]	; 0x7f4
    8f64:	e5d437f8 	ldrb	r3, [r4, #2040]	; 0x7f8
    8f68:	e28dcb1e 	add	ip, sp, #30720	; 0x7800
    8f6c:	e2844e7f 	add	r4, r4, #2032	; 0x7f0
    8f70:	e284400c 	add	r4, r4, #12
    8f74:	e351003b 	cmp	r1, #59	; 0x3b
    8f78:	e28cc018 	add	ip, ip, #24
    8f7c:	e5852fe8 	str	r2, [r5, #4072]	; 0xfe8
    8f80:	e5c53fec 	strb	r3, [r5, #4076]	; 0xfec
    8f84:	e894000f 	ldm	r4, {r0, r1, r2, r3}
    8f88:	e90c000f 	stmdb	ip, {r0, r1, r2, r3}
    8f8c:	e5d63008 	ldrb	r3, [r6, #8]
    8f90:	0a00002e 	beq	9050 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x344>
    8f94:	e3530000 	cmp	r3, #0
    8f98:	0a000022 	beq	9028 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x31c>
    8f9c:	e5963070 	ldr	r3, [r6, #112]	; 0x70
    8fa0:	e3530063 	cmp	r3, #99	; 0x63
    8fa4:	da000005 	ble	8fc0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2b4>
    8fa8:	e28d400c 	add	r4, sp, #12
    8fac:	e1a00004 	mov	r0, r4
    8fb0:	eb009efe 	bl	30bb0 <CommandHandler::~CommandHandler()>
    8fb4:	e28ddb1e 	add	sp, sp, #30720	; 0x7800
    8fb8:	e28dd01c 	add	sp, sp, #28
    8fbc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8fc0:	e1a01007 	mov	r1, r7
    8fc4:	e59d0004 	ldr	r0, [sp, #4]
    8fc8:	eb00bcbd 	bl	382c4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>
    8fcc:	e1a05000 	mov	r5, r0
    8fd0:	eb0083d1 	bl	29f1c <strlen>
    8fd4:	e3500000 	cmp	r0, #0
    8fd8:	0afffff2 	beq	8fa8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x29c>
    8fdc:	e1d530d0 	ldrsb	r3, [r5]
    8fe0:	e3530008 	cmp	r3, #8
    8fe4:	0a00002f 	beq	90a8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x39c>
    8fe8:	e353000d 	cmp	r3, #13
    8fec:	0a000039 	beq	90d8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3cc>
    8ff0:	e2433020 	sub	r3, r3, #32
    8ff4:	e6ef3073 	uxtb	r3, r3
    8ff8:	e353005e 	cmp	r3, #94	; 0x5e
    8ffc:	8affffe9 	bhi	8fa8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x29c>
    9000:	e5963070 	ldr	r3, [r6, #112]	; 0x70
    9004:	e28d400c 	add	r4, sp, #12
    9008:	e2832001 	add	r2, r3, #1
    900c:	e5862070 	str	r2, [r6, #112]	; 0x70
    9010:	e1d510d0 	ldrsb	r1, [r5]
    9014:	e0863003 	add	r3, r6, r3
    9018:	e5c31009 	strb	r1, [r3, #9]
    901c:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    9020:	eb00ca4f 	bl	3b964 <Display::consolePut(int)>
    9024:	eaffffe0 	b	8fac <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2a0>
    9028:	e5960080 	ldr	r0, [r6, #128]	; 0x80
    902c:	eb00b54b 	bl	36560 <McManager::getMachine()>
    9030:	e2503000 	subs	r3, r0, #0
    9034:	0affffdb 	beq	8fa8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x29c>
    9038:	e5933000 	ldr	r3, [r3]
    903c:	e1a02007 	mov	r2, r7
    9040:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    9044:	e59d1004 	ldr	r1, [sp, #4]
    9048:	e12fff33 	blx	r3
    904c:	eaffffd5 	b	8fa8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x29c>
    9050:	e3530000 	cmp	r3, #0
    9054:	0a000003 	beq	9068 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x35c>
    9058:	e3a03001 	mov	r3, #1
    905c:	e28d400c 	add	r4, sp, #12
    9060:	e5c63008 	strb	r3, [r6, #8]
    9064:	eaffffd0 	b	8fac <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2a0>
    9068:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    906c:	e59f116c 	ldr	r1, [pc, #364]	; 91e0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4d4>
    9070:	eb00ca36 	bl	3b950 <Display::consolePut(char const*)>
    9074:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    9078:	e59f1164 	ldr	r1, [pc, #356]	; 91e4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4d8>
    907c:	eb00ca33 	bl	3b950 <Display::consolePut(char const*)>
    9080:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    9084:	e59f115c 	ldr	r1, [pc, #348]	; 91e8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4dc>
    9088:	eb00ca30 	bl	3b950 <Display::consolePut(char const*)>
    908c:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    9090:	e59f1154 	ldr	r1, [pc, #340]	; 91ec <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4e0>
    9094:	eb00ca2d 	bl	3b950 <Display::consolePut(char const*)>
    9098:	e59f1150 	ldr	r1, [pc, #336]	; 91f0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4e4>
    909c:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    90a0:	eb00ca2a 	bl	3b950 <Display::consolePut(char const*)>
    90a4:	eaffffeb 	b	9058 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x34c>
    90a8:	e5963070 	ldr	r3, [r6, #112]	; 0x70
    90ac:	e3a01008 	mov	r1, #8
    90b0:	e3530000 	cmp	r3, #0
    90b4:	c2433001 	subgt	r3, r3, #1
    90b8:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    90bc:	c5863070 	strgt	r3, [r6, #112]	; 0x70
    90c0:	eb00ca27 	bl	3b964 <Display::consolePut(int)>
    90c4:	e3a01020 	mov	r1, #32
    90c8:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    90cc:	eb00ca24 	bl	3b964 <Display::consolePut(int)>
    90d0:	e28d400c 	add	r4, sp, #12
    90d4:	eaffffb4 	b	8fac <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2a0>
    90d8:	e3a02000 	mov	r2, #0
    90dc:	e5963070 	ldr	r3, [r6, #112]	; 0x70
    90e0:	e5c62008 	strb	r2, [r6, #8]
    90e4:	e1530002 	cmp	r3, r2
    90e8:	e0863003 	add	r3, r6, r3
    90ec:	e5c32009 	strb	r2, [r3, #9]
    90f0:	ca000007 	bgt	9114 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x408>
    90f4:	e28d400c 	add	r4, sp, #12
    90f8:	e3a05000 	mov	r5, #0
    90fc:	e59f10f0 	ldr	r1, [pc, #240]	; 91f4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4e8>
    9100:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    9104:	e5865070 	str	r5, [r6, #112]	; 0x70
    9108:	eb00ca10 	bl	3b950 <Display::consolePut(char const*)>
    910c:	e5c65008 	strb	r5, [r6, #8]
    9110:	eaffffa5 	b	8fac <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2a0>
    9114:	e1d600d9 	ldrsb	r0, [r6, #9]
    9118:	eb0094c3 	bl	2e42c <rdtolower>
    911c:	e3500074 	cmp	r0, #116	; 0x74
    9120:	0afffff3 	beq	90f4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3e8>
    9124:	e1d600d9 	ldrsb	r0, [r6, #9]
    9128:	eb0094bf 	bl	2e42c <rdtolower>
    912c:	e350006d 	cmp	r0, #109	; 0x6d
    9130:	0a00001a 	beq	91a0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x494>
    9134:	e1d600d9 	ldrsb	r0, [r6, #9]
    9138:	eb0094bb 	bl	2e42c <rdtolower>
    913c:	e3500062 	cmp	r0, #98	; 0x62
    9140:	0affffeb 	beq	90f4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3e8>
    9144:	e1d600d9 	ldrsb	r0, [r6, #9]
    9148:	eb0094b7 	bl	2e42c <rdtolower>
    914c:	e3500072 	cmp	r0, #114	; 0x72
    9150:	0affffe7 	beq	90f4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3e8>
    9154:	e1d600d9 	ldrsb	r0, [r6, #9]
    9158:	eb0094b3 	bl	2e42c <rdtolower>
    915c:	e3500073 	cmp	r0, #115	; 0x73
    9160:	0affffe3 	beq	90f4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3e8>
    9164:	e2865009 	add	r5, r6, #9
    9168:	e28d400c 	add	r4, sp, #12
    916c:	e1a00004 	mov	r0, r4
    9170:	e1a01005 	mov	r1, r5
    9174:	eb009c08 	bl	3019c <CommandHandler::sendAPIReq(char const*)>
    9178:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    917c:	e59f1074 	ldr	r1, [pc, #116]	; 91f8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4ec>
    9180:	eb00c9f2 	bl	3b950 <Display::consolePut(char const*)>
    9184:	e1a01005 	mov	r1, r5
    9188:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    918c:	eb00c9ef 	bl	3b950 <Display::consolePut(char const*)>
    9190:	e59f1064 	ldr	r1, [pc, #100]	; 91fc <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4f0>
    9194:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    9198:	eb00c9ec 	bl	3b950 <Display::consolePut(char const*)>
    919c:	eaffffd5 	b	90f8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3ec>
    91a0:	e3a02001 	mov	r2, #1
    91a4:	e5963080 	ldr	r3, [r6, #128]	; 0x80
    91a8:	e2865a03 	add	r5, r6, #12288	; 0x3000
    91ac:	e5c52535 	strb	r2, [r5, #1333]	; 0x535
    91b0:	e1a00006 	mov	r0, r6
    91b4:	e593200c 	ldr	r2, [r3, #12]
    91b8:	e5961078 	ldr	r1, [r6, #120]	; 0x78
    91bc:	eb00becd 	bl	38cf8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)>
    91c0:	e3a03000 	mov	r3, #0
    91c4:	e28d400c 	add	r4, sp, #12
    91c8:	e5c53535 	strb	r3, [r5, #1333]	; 0x535
    91cc:	eaffffc9 	b	90f8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3ec>
    91d0:	00045c28 	.word	0x00045c28
    91d4:	0003e980 	.word	0x0003e980
    91d8:	00002710 	.word	0x00002710
    91dc:	000007d1 	.word	0x000007d1
    91e0:	0003e794 	.word	0x0003e794
    91e4:	0003e7a4 	.word	0x0003e7a4
    91e8:	0003e7e4 	.word	0x0003e7e4
    91ec:	0003e80c 	.word	0x0003e80c
    91f0:	0003e834 	.word	0x0003e834
    91f4:	0003e874 	.word	0x0003e874
    91f8:	0003e85c 	.word	0x0003e85c
    91fc:	00046f54 	.word	0x00046f54

00009200 <BusRaiderApp::service()>:
    9200:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9204:	e1a04000 	mov	r4, r0
    9208:	e24dde7d 	sub	sp, sp, #2000	; 0x7d0
    920c:	e24dd00c 	sub	sp, sp, #12
    9210:	e590607c 	ldr	r6, [r0, #124]	; 0x7c
    9214:	eb0092ac 	bl	2dccc <micros>
    9218:	e5941074 	ldr	r1, [r4, #116]	; 0x74
    921c:	e59f21f4 	ldr	r2, [pc, #500]	; 9418 <BusRaiderApp::service()+0x218>
    9220:	eb0092c7 	bl	2dd44 <isTimeout>
    9224:	e3500000 	cmp	r0, #0
    9228:	0a000005 	beq	9244 <BusRaiderApp::service()+0x44>
    922c:	e59f31e8 	ldr	r3, [pc, #488]	; 941c <BusRaiderApp::service()+0x21c>
    9230:	e5933000 	ldr	r3, [r3]
    9234:	e2833a05 	add	r3, r3, #20480	; 0x5000
    9238:	e5935860 	ldr	r5, [r3, #2144]	; 0x860
    923c:	e3550000 	cmp	r5, #0
    9240:	0a000055 	beq	939c <BusRaiderApp::service()+0x19c>
    9244:	eb0092a1 	bl	2dcd0 <millis>
    9248:	e59f21d0 	ldr	r2, [pc, #464]	; 9420 <BusRaiderApp::service()+0x220>
    924c:	e594195c 	ldr	r1, [r4, #2396]	; 0x95c
    9250:	eb0092bb 	bl	2dd44 <isTimeout>
    9254:	e3500000 	cmp	r0, #0
    9258:	0a000007 	beq	927c <BusRaiderApp::service()+0x7c>
    925c:	e59f31b8 	ldr	r3, [pc, #440]	; 941c <BusRaiderApp::service()+0x21c>
    9260:	e5933000 	ldr	r3, [r3]
    9264:	e2833a05 	add	r3, r3, #20480	; 0x5000
    9268:	e5933860 	ldr	r3, [r3, #2144]	; 0x860
    926c:	e3530000 	cmp	r3, #0
    9270:	0a000058 	beq	93d8 <BusRaiderApp::service()+0x1d8>
    9274:	eb009295 	bl	2dcd0 <millis>
    9278:	e584095c 	str	r0, [r4, #2396]	; 0x95c
    927c:	e2845a03 	add	r5, r4, #12288	; 0x3000
    9280:	e5953070 	ldr	r3, [r5, #112]	; 0x70
    9284:	e3530000 	cmp	r3, #0
    9288:	0a000026 	beq	9328 <BusRaiderApp::service()+0x128>
    928c:	e1a00004 	mov	r0, r4
    9290:	ebfffd34 	bl	8768 <BusRaiderApp::statusDisplayUpdate()>
    9294:	e5d56534 	ldrb	r6, [r5, #1332]	; 0x534
    9298:	e3560000 	cmp	r6, #0
    929c:	0a000002 	beq	92ac <BusRaiderApp::service()+0xac>
    92a0:	e5d53535 	ldrb	r3, [r5, #1333]	; 0x535
    92a4:	e3530000 	cmp	r3, #0
    92a8:	0a00001b 	beq	931c <BusRaiderApp::service()+0x11c>
    92ac:	e5952528 	ldr	r2, [r5, #1320]	; 0x528
    92b0:	e595352c 	ldr	r3, [r5, #1324]	; 0x52c
    92b4:	e1520003 	cmp	r2, r3
    92b8:	0a000017 	beq	931c <BusRaiderApp::service()+0x11c>
    92bc:	e595352c 	ldr	r3, [r5, #1324]	; 0x52c
    92c0:	e595252c 	ldr	r2, [r5, #1324]	; 0x52c
    92c4:	e5951530 	ldr	r1, [r5, #1328]	; 0x530
    92c8:	e2822001 	add	r2, r2, #1
    92cc:	e585252c 	str	r2, [r5, #1324]	; 0x52c
    92d0:	e595252c 	ldr	r2, [r5, #1324]	; 0x52c
    92d4:	e1520001 	cmp	r2, r1
    92d8:	23a02000 	movcs	r2, #0
    92dc:	2585252c 	strcs	r2, [r5, #1324]	; 0x52c
    92e0:	e3560000 	cmp	r6, #0
    92e4:	1a00001b 	bne	9358 <BusRaiderApp::service()+0x158>
    92e8:	e3a01001 	mov	r1, #1
    92ec:	e0833113 	add	r3, r3, r3, lsl r1
    92f0:	e1a03103 	lsl	r3, r3, #2
    92f4:	e2832dc1 	add	r2, r3, #12352	; 0x3040
    92f8:	e0843003 	add	r3, r4, r3
    92fc:	e2833dc2 	add	r3, r3, #12416	; 0x3080
    9300:	e5c51534 	strb	r1, [r5, #1332]	; 0x534
    9304:	e2822038 	add	r2, r2, #56	; 0x38
    9308:	e1a00004 	mov	r0, r4
    930c:	e5d31000 	ldrb	r1, [r3]
    9310:	e0842002 	add	r2, r4, r2
    9314:	ebfffe7c 	bl	8d0c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)>
    9318:	e5c56534 	strb	r6, [r5, #1332]	; 0x534
    931c:	e28dde7d 	add	sp, sp, #2000	; 0x7d0
    9320:	e28dd00c 	add	sp, sp, #12
    9324:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9328:	eb009267 	bl	2dccc <micros>
    932c:	e59f20f0 	ldr	r2, [pc, #240]	; 9424 <BusRaiderApp::service()+0x224>
    9330:	e5951074 	ldr	r1, [r5, #116]	; 0x74
    9334:	eb009282 	bl	2dd44 <isTimeout>
    9338:	e3500000 	cmp	r0, #0
    933c:	0affffd2 	beq	928c <BusRaiderApp::service()+0x8c>
    9340:	e1a00006 	mov	r0, r6
    9344:	e59f10dc 	ldr	r1, [pc, #220]	; 9428 <BusRaiderApp::service()+0x228>
    9348:	eb009b93 	bl	3019c <CommandHandler::sendAPIReq(char const*)>
    934c:	eb00925e 	bl	2dccc <micros>
    9350:	e5850074 	str	r0, [r5, #116]	; 0x74
    9354:	eaffffcc 	b	928c <BusRaiderApp::service()+0x8c>
    9358:	e0833083 	add	r3, r3, r3, lsl #1
    935c:	e1a03103 	lsl	r3, r3, #2
    9360:	e2831dc1 	add	r1, r3, #12352	; 0x3040
    9364:	e0843003 	add	r3, r4, r3
    9368:	e2833dc2 	add	r3, r3, #12416	; 0x3080
    936c:	e2811038 	add	r1, r1, #56	; 0x38
    9370:	e5d30000 	ldrb	r0, [r3]
    9374:	e0841001 	add	r1, r4, r1
    9378:	eb00bbd1 	bl	382c4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>
    937c:	e1a04000 	mov	r4, r0
    9380:	eb0082e5 	bl	29f1c <strlen>
    9384:	e3500000 	cmp	r0, #0
    9388:	11d430d0 	ldrsbne	r3, [r4]
    938c:	15853538 	strne	r3, [r5, #1336]	; 0x538
    9390:	e28dde7d 	add	sp, sp, #2000	; 0x7d0
    9394:	e28dd00c 	add	sp, sp, #12
    9398:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    939c:	e5940080 	ldr	r0, [r4, #128]	; 0x80
    93a0:	eb00b47b 	bl	36594 <McManager::getMachineJSON()>
    93a4:	e2847084 	add	r7, r4, #132	; 0x84
    93a8:	e1a01000 	mov	r1, r0
    93ac:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    93b0:	e28d0008 	add	r0, sp, #8
    93b4:	eb00927e 	bl	2ddb4 <strlcpy>
    93b8:	e1a01007 	mov	r1, r7
    93bc:	e28d0008 	add	r0, sp, #8
    93c0:	eb0082df 	bl	29f44 <strcmp>
    93c4:	e3500000 	cmp	r0, #0
    93c8:	1a000006 	bne	93e8 <BusRaiderApp::service()+0x1e8>
    93cc:	eb00923e 	bl	2dccc <micros>
    93d0:	e5840074 	str	r0, [r4, #116]	; 0x74
    93d4:	eaffff9a 	b	9244 <BusRaiderApp::service()+0x44>
    93d8:	e1a00006 	mov	r0, r6
    93dc:	e59f1048 	ldr	r1, [pc, #72]	; 942c <BusRaiderApp::service()+0x22c>
    93e0:	eb009b6d 	bl	3019c <CommandHandler::sendAPIReq(char const*)>
    93e4:	eaffffa2 	b	9274 <BusRaiderApp::service()+0x74>
    93e8:	e28d1008 	add	r1, sp, #8
    93ec:	e1a00007 	mov	r0, r7
    93f0:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    93f4:	eb00926e 	bl	2ddb4 <strlcpy>
    93f8:	e1a03005 	mov	r3, r5
    93fc:	e1a00006 	mov	r0, r6
    9400:	e59f1028 	ldr	r1, [pc, #40]	; 9430 <BusRaiderApp::service()+0x230>
    9404:	e58d5004 	str	r5, [sp, #4]
    9408:	e58d5000 	str	r5, [sp]
    940c:	e28d2008 	add	r2, sp, #8
    9410:	eb009a17 	bl	2fc74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
    9414:	eaffffec 	b	93cc <BusRaiderApp::service()+0x1cc>
    9418:	000f4240 	.word	0x000f4240
    941c:	0004db74 	.word	0x0004db74
    9420:	00001388 	.word	0x00001388
    9424:	004c4b40 	.word	0x004c4b40
    9428:	0003e8a4 	.word	0x0003e8a4
    942c:	0003e894 	.word	0x0003e894
    9430:	0003e884 	.word	0x0003e884

00009434 <BusRaiderApp::getPiStatus(char*, int)>:
    9434:	e92d4070 	push	{r4, r5, r6, lr}
    9438:	e1a04001 	mov	r4, r1
    943c:	e5900080 	ldr	r0, [r0, #128]	; 0x80
    9440:	e1a05002 	mov	r5, r2
    9444:	eb00b452 	bl	36594 <McManager::getMachineJSON()>
    9448:	e3540000 	cmp	r4, #0
    944c:	08bd8070 	popeq	{r4, r5, r6, pc}
    9450:	e1a01000 	mov	r1, r0
    9454:	e1a02005 	mov	r2, r5
    9458:	e1a00004 	mov	r0, r4
    945c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9460:	ea009253 	b	2ddb4 <strlcpy>

00009464 <BusRaiderApp::storeESP32StatusInfo(char const*)>:
    9464:	e92d4030 	push	{r4, r5, lr}
    9468:	e24dde45 	sub	sp, sp, #1104	; 0x450
    946c:	e24dd00c 	sub	sp, sp, #12
    9470:	e1a04000 	mov	r4, r0
    9474:	e58d1004 	str	r1, [sp, #4]
    9478:	eb009214 	bl	2dcd0 <millis>
    947c:	e2845e85 	add	r5, r4, #2128	; 0x850
    9480:	e584095c 	str	r0, [r4, #2396]	; 0x95c
    9484:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    9488:	eb009217 	bl	2dcec <microsDelay>
    948c:	e2855004 	add	r5, r5, #4
    9490:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    9494:	e59d1004 	ldr	r1, [sp, #4]
    9498:	e28d2070 	add	r2, sp, #112	; 0x70
    949c:	e59f00c4 	ldr	r0, [pc, #196]	; 9568 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x104>
    94a0:	eb0092f0 	bl	2e068 <jsonGetValueForKey>
    94a4:	e1a02005 	mov	r2, r5
    94a8:	e3a0301e 	mov	r3, #30
    94ac:	e28d1070 	add	r1, sp, #112	; 0x70
    94b0:	e59f00b4 	ldr	r0, [pc, #180]	; 956c <BusRaiderApp::storeESP32StatusInfo(char const*)+0x108>
    94b4:	eb0092eb 	bl	2e068 <jsonGetValueForKey>
    94b8:	e59f10b0 	ldr	r1, [pc, #176]	; 9570 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x10c>
    94bc:	e1a00005 	mov	r0, r5
    94c0:	eb00829f 	bl	29f44 <strcmp>
    94c4:	e2500000 	subs	r0, r0, #0
    94c8:	13a00001 	movne	r0, #1
    94cc:	e2842e87 	add	r2, r4, #2160	; 0x870
    94d0:	e3a0301e 	mov	r3, #30
    94d4:	e5c40958 	strb	r0, [r4, #2392]	; 0x958
    94d8:	e2822002 	add	r2, r2, #2
    94dc:	e28d1070 	add	r1, sp, #112	; 0x70
    94e0:	e59f008c 	ldr	r0, [pc, #140]	; 9574 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x110>
    94e4:	eb0092df 	bl	2e068 <jsonGetValueForKey>
    94e8:	e3a03064 	mov	r3, #100	; 0x64
    94ec:	e2842e89 	add	r2, r4, #2192	; 0x890
    94f0:	e28d1070 	add	r1, sp, #112	; 0x70
    94f4:	e59f007c 	ldr	r0, [pc, #124]	; 9578 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x114>
    94f8:	eb0092da 	bl	2e068 <jsonGetValueForKey>
    94fc:	e2842e8f 	add	r2, r4, #2288	; 0x8f0
    9500:	e3a03064 	mov	r3, #100	; 0x64
    9504:	e2822004 	add	r2, r2, #4
    9508:	e28d1070 	add	r1, sp, #112	; 0x70
    950c:	e59f0068 	ldr	r0, [pc, #104]	; 957c <BusRaiderApp::storeESP32StatusInfo(char const*)+0x118>
    9510:	eb0092d4 	bl	2e068 <jsonGetValueForKey>
    9514:	e3a0c000 	mov	ip, #0
    9518:	e3a03064 	mov	r3, #100	; 0x64
    951c:	e28d1070 	add	r1, sp, #112	; 0x70
    9520:	e28d200c 	add	r2, sp, #12
    9524:	e59f0054 	ldr	r0, [pc, #84]	; 9580 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x11c>
    9528:	e5cdc00c 	strb	ip, [sp, #12]
    952c:	eb0092cd 	bl	2e068 <jsonGetValueForKey>
    9530:	e28d000c 	add	r0, sp, #12
    9534:	eb008278 	bl	29f1c <strlen>
    9538:	e3500000 	cmp	r0, #0
    953c:	03a00014 	moveq	r0, #20
    9540:	1a000005 	bne	955c <BusRaiderApp::storeESP32StatusInfo(char const*)+0xf8>
    9544:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    9548:	e593300c 	ldr	r3, [r3, #12]
    954c:	e5830000 	str	r0, [r3]
    9550:	e28dde45 	add	sp, sp, #1104	; 0x450
    9554:	e28dd00c 	add	sp, sp, #12
    9558:	e8bd8030 	pop	{r4, r5, pc}
    955c:	e28d000c 	add	r0, sp, #12
    9560:	eb008464 	bl	2a6f8 <atoi>
    9564:	eafffff6 	b	9544 <BusRaiderApp::storeESP32StatusInfo(char const*)+0xe0>
    9568:	0003e8b0 	.word	0x0003e8b0
    956c:	0003e8bc 	.word	0x0003e8bc
    9570:	0003e8c4 	.word	0x0003e8c4
    9574:	0003e8cc 	.word	0x0003e8cc
    9578:	0003e8d8 	.word	0x0003e8d8
    957c:	0003e8e0 	.word	0x0003e8e0
    9580:	0003e8e8 	.word	0x0003e8e8

00009584 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
    9584:	e92d4070 	push	{r4, r5, r6, lr}
    9588:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    958c:	e1a06000 	mov	r6, r0
    9590:	e3a030c8 	mov	r3, #200	; 0xc8
    9594:	e59f00b8 	ldr	r0, [pc, #184]	; 9654 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd0>
    9598:	e28d2004 	add	r2, sp, #4
    959c:	e1a05001 	mov	r5, r1
    95a0:	eb0092b0 	bl	2e068 <jsonGetValueForKey>
    95a4:	e2504000 	subs	r4, r0, #0
    95a8:	1a000003 	bne	95bc <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
    95ac:	e3a04000 	mov	r4, #0
    95b0:	e1a00004 	mov	r0, r4
    95b4:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    95b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    95bc:	e3a03000 	mov	r3, #0
    95c0:	e59d20e0 	ldr	r2, [sp, #224]	; 0xe0
    95c4:	e59f108c 	ldr	r1, [pc, #140]	; 9658 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd4>
    95c8:	e5c23000 	strb	r3, [r2]
    95cc:	e28d0004 	add	r0, sp, #4
    95d0:	eb008278 	bl	29fb8 <strcasecmp>
    95d4:	e3500000 	cmp	r0, #0
    95d8:	0a000010 	beq	9620 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9c>
    95dc:	e59f1078 	ldr	r1, [pc, #120]	; 965c <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd8>
    95e0:	e28d0004 	add	r0, sp, #4
    95e4:	eb008273 	bl	29fb8 <strcasecmp>
    95e8:	e3500000 	cmp	r0, #0
    95ec:	0a000012 	beq	963c <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb8>
    95f0:	e59f1068 	ldr	r1, [pc, #104]	; 9660 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdc>
    95f4:	e28d0004 	add	r0, sp, #4
    95f8:	eb00826e 	bl	29fb8 <strcasecmp>
    95fc:	e3500000 	cmp	r0, #0
    9600:	1affffe9 	bne	95ac <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x28>
    9604:	e1a01005 	mov	r1, r5
    9608:	e5960080 	ldr	r0, [r6, #128]	; 0x80
    960c:	eb00b44f 	bl	36750 <McManager::setupMachine(char const*)>
    9610:	e3a03001 	mov	r3, #1
    9614:	e286ca03 	add	ip, r6, #12288	; 0x3000
    9618:	e58c3070 	str	r3, [ip, #112]	; 0x70
    961c:	eaffffe3 	b	95b0 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2c>
    9620:	e1a00006 	mov	r0, r6
    9624:	e59d20e4 	ldr	r2, [sp, #228]	; 0xe4
    9628:	e59d10e0 	ldr	r1, [sp, #224]	; 0xe0
    962c:	ebffff80 	bl	9434 <BusRaiderApp::getPiStatus(char*, int)>
    9630:	e1a00004 	mov	r0, r4
    9634:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    9638:	e8bd8070 	pop	{r4, r5, r6, pc}
    963c:	e1a00006 	mov	r0, r6
    9640:	e1a01005 	mov	r1, r5
    9644:	ebffff86 	bl	9464 <BusRaiderApp::storeESP32StatusInfo(char const*)>
    9648:	e1a00004 	mov	r0, r4
    964c:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    9650:	e8bd8070 	pop	{r4, r5, r6, pc}
    9654:	0003e8f0 	.word	0x0003e8f0
    9658:	0003e8f8 	.word	0x0003e8f8
    965c:	0003e904 	.word	0x0003e904
    9660:	0003e918 	.word	0x0003e918

00009664 <BusRaiderApp::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
    9664:	e3500000 	cmp	r0, #0
    9668:	012fff1e 	bxeq	lr
    966c:	eaffffc4 	b	9584 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

00009670 <BusRaiderApp::selfTestHelperService()>:
    9670:	eafffee2 	b	9200 <BusRaiderApp::service()>

00009674 <BusRaiderApp::selfTestKeyboardGet()>:
    9674:	e3e02000 	mvn	r2, #0
    9678:	e2803a03 	add	r3, r0, #12288	; 0x3000
    967c:	e5930538 	ldr	r0, [r3, #1336]	; 0x538
    9680:	e5832538 	str	r2, [r3, #1336]	; 0x538
    9684:	e12fff1e 	bx	lr

00009688 <SimpleBuffer::~SimpleBuffer()>:
    9688:	e12fff1e 	bx	lr

0000968c <SimpleBuffer::~SimpleBuffer()>:
    968c:	e92d4010 	push	{r4, lr}
    9690:	e1a04000 	mov	r4, r0
    9694:	e59f1008 	ldr	r1, [pc, #8]	; 96a4 <SimpleBuffer::~SimpleBuffer()+0x18>
    9698:	eb00860e 	bl	2aed8 <operator delete(void*, unsigned int)>
    969c:	e1a00004 	mov	r0, r4
    96a0:	e8bd8010 	pop	{r4, pc}
    96a4:	00002718 	.word	0x00002718

000096a8 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
    96a8:	e92d4070 	push	{r4, r5, r6, lr}
    96ac:	e3a06000 	mov	r6, #0
    96b0:	e1a04000 	mov	r4, r0
    96b4:	e59f5034 	ldr	r5, [pc, #52]	; 96f0 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x48>
    96b8:	e580643c 	str	r6, [r0, #1084]	; 0x43c
    96bc:	e2853008 	add	r3, r5, #8
    96c0:	e5803000 	str	r3, [r0]
    96c4:	eb006eb0 	bl	2518c <CDeviceNameService::Get()>
    96c8:	e1a03006 	mov	r3, r6
    96cc:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
    96d0:	e2851030 	add	r1, r5, #48	; 0x30
    96d4:	eb006ed2 	bl	25224 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
    96d8:	e2840024 	add	r0, r4, #36	; 0x24
    96dc:	eb003ac3 	bl	181f0 <CKeyboardBehaviour::~CKeyboardBehaviour()>
    96e0:	e1a00004 	mov	r0, r4
    96e4:	eb002236 	bl	11fc4 <CUSBHIDDevice::~CUSBHIDDevice()>
    96e8:	e1a00004 	mov	r0, r4
    96ec:	e8bd8070 	pop	{r4, r5, r6, pc}
    96f0:	0003e9e8 	.word	0x0003e9e8

000096f4 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
    96f4:	e92d4010 	push	{r4, lr}
    96f8:	e1a04000 	mov	r4, r0
    96fc:	ebffffe9 	bl	96a8 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
    9700:	e1a00004 	mov	r0, r4
    9704:	e3a01e45 	mov	r1, #1104	; 0x450
    9708:	eb0085f2 	bl	2aed8 <operator delete(void*, unsigned int)>
    970c:	e1a00004 	mov	r0, r4
    9710:	e8bd8010 	pop	{r4, pc}

00009714 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
    9714:	e2522008 	subs	r2, r2, #8
    9718:	13a02001 	movne	r2, #1
    971c:	e3510000 	cmp	r1, #0
    9720:	03a02001 	moveq	r2, #1
    9724:	e3520000 	cmp	r2, #0
    9728:	112fff1e 	bxne	lr
    972c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9730:	e590343c 	ldr	r3, [r0, #1084]	; 0x43c
    9734:	e1a05001 	mov	r5, r1
    9738:	e3530000 	cmp	r3, #0
    973c:	e1a06000 	mov	r6, r0
    9740:	e24dd00c 	sub	sp, sp, #12
    9744:	0a000003 	beq	9758 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
    9748:	e4d10002 	ldrb	r0, [r1], #2
    974c:	e28dd00c 	add	sp, sp, #12
    9750:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9754:	e12fff13 	bx	r3
    9758:	e1a04003 	mov	r4, r3
    975c:	e3a07001 	mov	r7, #1
    9760:	e2808024 	add	r8, r0, #36	; 0x24
    9764:	ea000004 	b	977c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>
    9768:	e1120003 	tst	r2, r3
    976c:	1a000041 	bne	9878 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x164>
    9770:	e2844001 	add	r4, r4, #1
    9774:	e3540008 	cmp	r4, #8
    9778:	0a00000d 	beq	97b4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xa0>
    977c:	e5d52000 	ldrb	r2, [r5]
    9780:	e1a03417 	lsl	r3, r7, r4
    9784:	e1120003 	tst	r2, r3
    9788:	e5d62440 	ldrb	r2, [r6, #1088]	; 0x440
    978c:	0afffff5 	beq	9768 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x54>
    9790:	e1120003 	tst	r2, r3
    9794:	1afffff5 	bne	9770 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x5c>
    9798:	e2441080 	sub	r1, r4, #128	; 0x80
    979c:	e1a00008 	mov	r0, r8
    97a0:	e6ef1071 	uxtb	r1, r1
    97a4:	e2844001 	add	r4, r4, #1
    97a8:	eb003af2 	bl	18378 <CKeyboardBehaviour::KeyPressed(unsigned char)>
    97ac:	e3540008 	cmp	r4, #8
    97b0:	1afffff1 	bne	977c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>
    97b4:	e2867d11 	add	r7, r6, #1088	; 0x440
    97b8:	e2878002 	add	r8, r7, #2
    97bc:	e1a09008 	mov	r9, r8
    97c0:	e2874008 	add	r4, r7, #8
    97c4:	e285b002 	add	fp, r5, #2
    97c8:	e285a008 	add	sl, r5, #8
    97cc:	e2860024 	add	r0, r6, #36	; 0x24
    97d0:	ea000001 	b	97dc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc8>
    97d4:	e1540009 	cmp	r4, r9
    97d8:	0a00000d 	beq	9814 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x100>
    97dc:	e4d91001 	ldrb	r1, [r9], #1
    97e0:	e3510000 	cmp	r1, #0
    97e4:	11a0300b 	movne	r3, fp
    97e8:	0afffff9 	beq	97d4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc0>
    97ec:	e4d32001 	ldrb	r2, [r3], #1
    97f0:	e1520001 	cmp	r2, r1
    97f4:	0afffff6 	beq	97d4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc0>
    97f8:	e15a0003 	cmp	sl, r3
    97fc:	1afffffa 	bne	97ec <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd8>
    9800:	e58d0004 	str	r0, [sp, #4]
    9804:	eb003ae9 	bl	183b0 <CKeyboardBehaviour::KeyReleased(unsigned char)>
    9808:	e1540009 	cmp	r4, r9
    980c:	e59d0004 	ldr	r0, [sp, #4]
    9810:	1afffff1 	bne	97dc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc8>
    9814:	e2866024 	add	r6, r6, #36	; 0x24
    9818:	e2859001 	add	r9, r5, #1
    981c:	e285a007 	add	sl, r5, #7
    9820:	ea000001 	b	982c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x118>
    9824:	e15a0009 	cmp	sl, r9
    9828:	0a00000c 	beq	9860 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x14c>
    982c:	e5f91001 	ldrb	r1, [r9, #1]!
    9830:	e3510000 	cmp	r1, #0
    9834:	11a03008 	movne	r3, r8
    9838:	0afffff9 	beq	9824 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
    983c:	e4d32001 	ldrb	r2, [r3], #1
    9840:	e1520001 	cmp	r2, r1
    9844:	0afffff6 	beq	9824 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
    9848:	e1540003 	cmp	r4, r3
    984c:	1afffffa 	bne	983c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x128>
    9850:	e1a00006 	mov	r0, r6
    9854:	eb003ac7 	bl	18378 <CKeyboardBehaviour::KeyPressed(unsigned char)>
    9858:	e15a0009 	cmp	sl, r9
    985c:	1afffff2 	bne	982c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x118>
    9860:	e1a01005 	mov	r1, r5
    9864:	e1a00007 	mov	r0, r7
    9868:	e3a02008 	mov	r2, #8
    986c:	e28dd00c 	add	sp, sp, #12
    9870:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9874:	ea0083a3 	b	2a708 <memcpy>
    9878:	e2441080 	sub	r1, r4, #128	; 0x80
    987c:	e1a00008 	mov	r0, r8
    9880:	e6ef1071 	uxtb	r1, r1
    9884:	eb003ac9 	bl	183b0 <CKeyboardBehaviour::KeyReleased(unsigned char)>
    9888:	eaffffb8 	b	9770 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x5c>

0000988c <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
    988c:	e92d4010 	push	{r4, lr}
    9890:	e1a04000 	mov	r4, r0
    9894:	e3a02008 	mov	r2, #8
    9898:	eb0021b3 	bl	11f6c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
    989c:	e1a00004 	mov	r0, r4
    98a0:	e59f3028 	ldr	r3, [pc, #40]	; 98d0 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x44>
    98a4:	e4803024 	str	r3, [r0], #36	; 0x24
    98a8:	eb003a44 	bl	181c0 <CKeyboardBehaviour::CKeyboardBehaviour()>
    98ac:	e3a01000 	mov	r1, #0
    98b0:	e3a02008 	mov	r2, #8
    98b4:	e2840d11 	add	r0, r4, #1088	; 0x440
    98b8:	e584143c 	str	r1, [r4, #1084]	; 0x43c
    98bc:	e5c41448 	strb	r1, [r4, #1096]	; 0x448
    98c0:	e584144c 	str	r1, [r4, #1100]	; 0x44c
    98c4:	eb008146 	bl	29de4 <memset>
    98c8:	e1a00004 	mov	r0, r4
    98cc:	e8bd8010 	pop	{r4, pc}
    98d0:	0003e9f0 	.word	0x0003e9f0

000098d4 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
    98d4:	e2800024 	add	r0, r0, #36	; 0x24
    98d8:	ea003a4e 	b	18218 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

000098dc <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
    98dc:	e2800024 	add	r0, r0, #36	; 0x24
    98e0:	ea003a57 	b	18244 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

000098e4 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
    98e4:	e2800024 	add	r0, r0, #36	; 0x24
    98e8:	ea003a60 	b	18270 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

000098ec <CUSBKeyboardDevice::GetLEDStatus() const>:
    98ec:	e92d4010 	push	{r4, lr}
    98f0:	e2800024 	add	r0, r0, #36	; 0x24
    98f4:	eb003a68 	bl	1829c <CKeyboardBehaviour::GetLEDStatus() const>
    98f8:	e2003001 	and	r3, r0, #1
    98fc:	e3100002 	tst	r0, #2
    9900:	13833002 	orrne	r3, r3, #2
    9904:	e3100004 	tst	r0, #4
    9908:	13833004 	orrne	r3, r3, #4
    990c:	e1a00003 	mov	r0, r3
    9910:	e8bd8010 	pop	{r4, pc}

00009914 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>:
    9914:	e3510000 	cmp	r1, #0
    9918:	0a000001 	beq	9924 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x10>
    991c:	e580143c 	str	r1, [r0, #1084]	; 0x43c
    9920:	e12fff1e 	bx	lr
    9924:	e3a0207d 	mov	r2, #125	; 0x7d
    9928:	e92d4010 	push	{r4, lr}
    992c:	e59f1004 	ldr	r1, [pc, #4]	; 9938 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x24>
    9930:	e59f0004 	ldr	r0, [pc, #4]	; 993c <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x28>
    9934:	eb006b52 	bl	24684 <assertion_failed>
    9938:	0003e988 	.word	0x0003e988
    993c:	0003e998 	.word	0x0003e998

00009940 <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
    9940:	e92d4030 	push	{r4, r5, lr}
    9944:	e24dd024 	sub	sp, sp, #36	; 0x24
    9948:	e1a04000 	mov	r4, r0
    994c:	e5cd101c 	strb	r1, [sp, #28]
    9950:	eb0017cf 	bl	f894 <CUSBFunction::GetHost() const>
    9954:	e1a05000 	mov	r5, r0
    9958:	e1a00004 	mov	r0, r4
    995c:	eb0017c1 	bl	f868 <CUSBFunction::GetEndpoint0() const>
    9960:	e1a01000 	mov	r1, r0
    9964:	e1a00004 	mov	r0, r4
    9968:	e58d1014 	str	r1, [sp, #20]
    996c:	eb001824 	bl	fa04 <CUSBFunction::GetInterfaceNumber() const>
    9970:	e3a0e001 	mov	lr, #1
    9974:	e3a0cc02 	mov	ip, #512	; 0x200
    9978:	e6ff3070 	uxth	r3, r0
    997c:	e28d201c 	add	r2, sp, #28
    9980:	e58d3004 	str	r3, [sp, #4]
    9984:	e58d2008 	str	r2, [sp, #8]
    9988:	e1a00005 	mov	r0, r5
    998c:	e3a03009 	mov	r3, #9
    9990:	e3a02021 	mov	r2, #33	; 0x21
    9994:	e59d1014 	ldr	r1, [sp, #20]
    9998:	e58de00c 	str	lr, [sp, #12]
    999c:	e58dc000 	str	ip, [sp]
    99a0:	eb002367 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    99a4:	e1e00000 	mvn	r0, r0
    99a8:	e1a00fa0 	lsr	r0, r0, #31
    99ac:	e28dd024 	add	sp, sp, #36	; 0x24
    99b0:	e8bd8030 	pop	{r4, r5, pc}

000099b4 <CUSBKeyboardDevice::Configure()>:
    99b4:	e92d4030 	push	{r4, r5, lr}
    99b8:	e3a01000 	mov	r1, #0
    99bc:	e24dd00c 	sub	sp, sp, #12
    99c0:	e1a04000 	mov	r4, r0
    99c4:	eb0021a9 	bl	12070 <CUSBHIDDevice::Configure(unsigned int)>
    99c8:	e2505000 	subs	r5, r0, #0
    99cc:	0a000012 	beq	9a1c <CUSBKeyboardDevice::Configure()+0x68>
    99d0:	e5d41448 	ldrb	r1, [r4, #1096]	; 0x448
    99d4:	e1a00004 	mov	r0, r4
    99d8:	ebffffd8 	bl	9940 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
    99dc:	e59f2058 	ldr	r2, [pc, #88]	; 9a3c <CUSBKeyboardDevice::Configure()+0x88>
    99e0:	e5923000 	ldr	r3, [r2]
    99e4:	e584344c 	str	r3, [r4, #1100]	; 0x44c
    99e8:	e2833001 	add	r3, r3, #1
    99ec:	e5823000 	str	r3, [r2]
    99f0:	eb006de5 	bl	2518c <CDeviceNameService::Get()>
    99f4:	e3a02000 	mov	r2, #0
    99f8:	e58d2000 	str	r2, [sp]
    99fc:	e1a03004 	mov	r3, r4
    9a00:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
    9a04:	e59f1034 	ldr	r1, [pc, #52]	; 9a40 <CUSBKeyboardDevice::Configure()+0x8c>
    9a08:	eb006deb 	bl	251bc <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    9a0c:	e1a00004 	mov	r0, r4
    9a10:	e28dd00c 	add	sp, sp, #12
    9a14:	e8bd4030 	pop	{r4, r5, lr}
    9a18:	ea0022b7 	b	124fc <CUSBHIDDevice::StartRequest()>
    9a1c:	eb007400 	bl	26a24 <CLogger::Get()>
    9a20:	e3a02001 	mov	r2, #1
    9a24:	e59f3018 	ldr	r3, [pc, #24]	; 9a44 <CUSBKeyboardDevice::Configure()+0x90>
    9a28:	e59f1018 	ldr	r1, [pc, #24]	; 9a48 <CUSBKeyboardDevice::Configure()+0x94>
    9a2c:	eb00733e 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9a30:	e1a00005 	mov	r0, r5
    9a34:	e28dd00c 	add	sp, sp, #12
    9a38:	e8bd8030 	pop	{r4, r5, pc}
    9a3c:	00047824 	.word	0x00047824
    9a40:	0003ea18 	.word	0x0003ea18
    9a44:	0003e9b4 	.word	0x0003e9b4
    9a48:	0003ea20 	.word	0x0003ea20

00009a4c <CUSBKeyboardDevice::UpdateLEDs()>:
    9a4c:	e590343c 	ldr	r3, [r0, #1084]	; 0x43c
    9a50:	e3530000 	cmp	r3, #0
    9a54:	112fff1e 	bxne	lr
    9a58:	e92d4010 	push	{r4, lr}
    9a5c:	e1a04000 	mov	r4, r0
    9a60:	ebffffa1 	bl	98ec <CUSBKeyboardDevice::GetLEDStatus() const>
    9a64:	e5d43448 	ldrb	r3, [r4, #1096]	; 0x448
    9a68:	e1530000 	cmp	r3, r0
    9a6c:	08bd8010 	popeq	{r4, pc}
    9a70:	e1a01000 	mov	r1, r0
    9a74:	e5c40448 	strb	r0, [r4, #1096]	; 0x448
    9a78:	e1a00004 	mov	r0, r4
    9a7c:	ebffffaf 	bl	9940 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
    9a80:	e3500000 	cmp	r0, #0
    9a84:	18bd8010 	popne	{r4, pc}
    9a88:	eb0073e5 	bl	26a24 <CLogger::Get()>
    9a8c:	e8bd4010 	pop	{r4, lr}
    9a90:	e3a02001 	mov	r2, #1
    9a94:	e59f3004 	ldr	r3, [pc, #4]	; 9aa0 <CUSBKeyboardDevice::UpdateLEDs()+0x54>
    9a98:	e59f1004 	ldr	r1, [pc, #4]	; 9aa4 <CUSBKeyboardDevice::UpdateLEDs()+0x58>
    9a9c:	ea007322 	b	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9aa0:	0003e9d0 	.word	0x0003e9d0
    9aa4:	0003ea20 	.word	0x0003ea20

00009aa8 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
    9aa8:	e0802002 	add	r2, r0, r2
    9aac:	ea000002 	b	9abc <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
    9ab0:	e4d03001 	ldrb	r3, [r0], #1
    9ab4:	e1530001 	cmp	r3, r1
    9ab8:	0a000003 	beq	9acc <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
    9abc:	e1500002 	cmp	r0, r2
    9ac0:	1afffffa 	bne	9ab0 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
    9ac4:	e3a00000 	mov	r0, #0
    9ac8:	e12fff1e 	bx	lr
    9acc:	e3a00001 	mov	r0, #1
    9ad0:	e12fff1e 	bx	lr

00009ad4 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    9ad4:	e3520000 	cmp	r2, #0
    9ad8:	e92d4010 	push	{r4, lr}
    9adc:	0a000005 	beq	9af8 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x24>
    9ae0:	e351000f 	cmp	r1, #15
    9ae4:	8a000007 	bhi	9b08 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x34>
    9ae8:	e3a03000 	mov	r3, #0
    9aec:	e0821001 	add	r1, r2, r1
    9af0:	e5c1305c 	strb	r3, [r1, #92]	; 0x5c
    9af4:	e8bd8010 	pop	{r4, pc}
    9af8:	e59f2018 	ldr	r2, [pc, #24]	; 9b18 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x44>
    9afc:	e59f1018 	ldr	r1, [pc, #24]	; 9b1c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x48>
    9b00:	e59f0018 	ldr	r0, [pc, #24]	; 9b20 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x4c>
    9b04:	eb006ade 	bl	24684 <assertion_failed>
    9b08:	e59f2014 	ldr	r2, [pc, #20]	; 9b24 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x50>
    9b0c:	e59f1008 	ldr	r1, [pc, #8]	; 9b1c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x48>
    9b10:	e59f0010 	ldr	r0, [pc, #16]	; 9b28 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x54>
    9b14:	eb006ada 	bl	24684 <assertion_failed>
    9b18:	000002ab 	.word	0x000002ab
    9b1c:	0003ea28 	.word	0x0003ea28
    9b20:	0003ea38 	.word	0x0003ea38
    9b24:	000002ae 	.word	0x000002ae
    9b28:	0003ea44 	.word	0x0003ea44

00009b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>:
    9b2c:	e92d4030 	push	{r4, r5, lr}
    9b30:	e24dd01c 	sub	sp, sp, #28
    9b34:	e1a05000 	mov	r5, r0
    9b38:	e28d000c 	add	r0, sp, #12
    9b3c:	eb000c34 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9b40:	e3a03000 	mov	r3, #0
    9b44:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9b48:	eb0073b5 	bl	26a24 <CLogger::Get()>
    9b4c:	e1a04000 	mov	r4, r0
    9b50:	e28d000c 	add	r0, sp, #12
    9b54:	eb000c37 	bl	cc38 <CDWHCIRegister::Read()>
    9b58:	e3a02004 	mov	r2, #4
    9b5c:	e88d0021 	stm	sp, {r0, r5}
    9b60:	e59f3018 	ldr	r3, [pc, #24]	; 9b80 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]+0x54>
    9b64:	e1a00004 	mov	r0, r4
    9b68:	e59f1014 	ldr	r1, [pc, #20]	; 9b84 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]+0x58>
    9b6c:	eb0072ee 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9b70:	e28d000c 	add	r0, sp, #12
    9b74:	eb000c2e 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    9b78:	e28dd01c 	add	sp, sp, #28
    9b7c:	e8bd8030 	pop	{r4, r5, pc}
    9b80:	0003ea64 	.word	0x0003ea64
    9b84:	0003efa4 	.word	0x0003efa4

00009b88 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>:
    9b88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9b8c:	e1a04000 	mov	r4, r0
    9b90:	e3a05000 	mov	r5, #0
    9b94:	e1a07001 	mov	r7, r1
    9b98:	e1a06002 	mov	r6, r2
    9b9c:	eb0022dd 	bl	12718 <CUSBHostController::CUSBHostController()>
    9ba0:	e3a03001 	mov	r3, #1
    9ba4:	e59f20a8 	ldr	r2, [pc, #168]	; 9c54 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xcc>
    9ba8:	e5845010 	str	r5, [r4, #16]
    9bac:	e5843014 	str	r3, [r4, #20]
    9bb0:	e5843058 	str	r3, [r4, #88]	; 0x58
    9bb4:	e1a01004 	mov	r1, r4
    9bb8:	e5847004 	str	r7, [r4, #4]
    9bbc:	e5846008 	str	r6, [r4, #8]
    9bc0:	e5842000 	str	r2, [r4]
    9bc4:	e584500c 	str	r5, [r4, #12]
    9bc8:	e584506c 	str	r5, [r4, #108]	; 0x6c
    9bcc:	e5845070 	str	r5, [r4, #112]	; 0x70
    9bd0:	e2840074 	add	r0, r4, #116	; 0x74
    9bd4:	eb000d02 	bl	cfe4 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    9bd8:	e5943004 	ldr	r3, [r4, #4]
    9bdc:	e5c45080 	strb	r5, [r4, #128]	; 0x80
    9be0:	e1530005 	cmp	r3, r5
    9be4:	e5c45081 	strb	r5, [r4, #129]	; 0x81
    9be8:	0a000011 	beq	9c34 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xac>
    9bec:	e5943008 	ldr	r3, [r4, #8]
    9bf0:	e3530000 	cmp	r3, #0
    9bf4:	11a02005 	movne	r2, r5
    9bf8:	12843014 	addne	r3, r4, #20
    9bfc:	12841054 	addne	r1, r4, #84	; 0x54
    9c00:	0a00000f 	beq	9c44 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xbc>
    9c04:	e5a32004 	str	r2, [r3, #4]!
    9c08:	e1530001 	cmp	r3, r1
    9c0c:	1afffffc 	bne	9c04 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x7c>
    9c10:	e3a03000 	mov	r3, #0
    9c14:	e1a01003 	mov	r1, r3
    9c18:	e0842003 	add	r2, r4, r3
    9c1c:	e2833001 	add	r3, r3, #1
    9c20:	e3530010 	cmp	r3, #16
    9c24:	e5c2105c 	strb	r1, [r2, #92]	; 0x5c
    9c28:	1afffffa 	bne	9c18 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x90>
    9c2c:	e1a00004 	mov	r0, r4
    9c30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9c34:	e3a0204b 	mov	r2, #75	; 0x4b
    9c38:	e59f1018 	ldr	r1, [pc, #24]	; 9c58 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    9c3c:	e59f0018 	ldr	r0, [pc, #24]	; 9c5c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd4>
    9c40:	eb006a8f 	bl	24684 <assertion_failed>
    9c44:	e3a0204c 	mov	r2, #76	; 0x4c
    9c48:	e59f1008 	ldr	r1, [pc, #8]	; 9c58 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    9c4c:	e59f000c 	ldr	r0, [pc, #12]	; 9c60 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd8>
    9c50:	eb006a8b 	bl	24684 <assertion_failed>
    9c54:	0003efb4 	.word	0x0003efb4
    9c58:	0003ea28 	.word	0x0003ea28
    9c5c:	0003ea70 	.word	0x0003ea70
    9c60:	0003ea88 	.word	0x0003ea88

00009c64 <CDWHCIDevice::GetPortSpeed()>:
    9c64:	e92d4010 	push	{r4, lr}
    9c68:	e24dd010 	sub	sp, sp, #16
    9c6c:	e59f1038 	ldr	r1, [pc, #56]	; 9cac <CDWHCIDevice::GetPortSpeed()+0x48>
    9c70:	e28d0004 	add	r0, sp, #4
    9c74:	eb000be6 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9c78:	e28d0004 	add	r0, sp, #4
    9c7c:	eb000bed 	bl	cc38 <CDWHCIRegister::Read()>
    9c80:	e1a008a0 	lsr	r0, r0, #17
    9c84:	e2000003 	and	r0, r0, #3
    9c88:	e3500003 	cmp	r0, #3
    9c8c:	03a04004 	moveq	r4, #4
    9c90:	12600002 	rsbne	r0, r0, #2
    9c94:	16ef4070 	uxtbne	r4, r0
    9c98:	e28d0004 	add	r0, sp, #4
    9c9c:	eb000be4 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    9ca0:	e1a00004 	mov	r0, r4
    9ca4:	e28dd010 	add	sp, sp, #16
    9ca8:	e8bd8010 	pop	{r4, pc}
    9cac:	20980440 	.word	0x20980440

00009cb0 <CDWHCIDevice::OvercurrentDetected()>:
    9cb0:	e92d4010 	push	{r4, lr}
    9cb4:	e24dd010 	sub	sp, sp, #16
    9cb8:	e59f1028 	ldr	r1, [pc, #40]	; 9ce8 <CDWHCIDevice::OvercurrentDetected()+0x38>
    9cbc:	e28d0004 	add	r0, sp, #4
    9cc0:	eb000bd3 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9cc4:	e28d0004 	add	r0, sp, #4
    9cc8:	eb000bda 	bl	cc38 <CDWHCIRegister::Read()>
    9ccc:	e1a04000 	mov	r4, r0
    9cd0:	e28d0004 	add	r0, sp, #4
    9cd4:	eb000bd6 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    9cd8:	e1a00224 	lsr	r0, r4, #4
    9cdc:	e2000001 	and	r0, r0, #1
    9ce0:	e28dd010 	add	sp, sp, #16
    9ce4:	e8bd8010 	pop	{r4, pc}
    9ce8:	20980440 	.word	0x20980440

00009cec <CDWHCIDevice::DisableRootPort(bool)>:
    9cec:	e3a03000 	mov	r3, #0
    9cf0:	e92d4010 	push	{r4, lr}
    9cf4:	e1a04001 	mov	r4, r1
    9cf8:	e24dd010 	sub	sp, sp, #16
    9cfc:	e5c03080 	strb	r3, [r0, #128]	; 0x80
    9d00:	e59f1048 	ldr	r1, [pc, #72]	; 9d50 <CDWHCIDevice::DisableRootPort(bool)+0x64>
    9d04:	e28d0004 	add	r0, sp, #4
    9d08:	eb000bc1 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9d0c:	e28d0004 	add	r0, sp, #4
    9d10:	eb000bc8 	bl	cc38 <CDWHCIRegister::Read()>
    9d14:	e3e01004 	mvn	r1, #4
    9d18:	e28d0004 	add	r0, sp, #4
    9d1c:	eb000bf9 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    9d20:	e3540000 	cmp	r4, #0
    9d24:	1a000005 	bne	9d40 <CDWHCIDevice::DisableRootPort(bool)+0x54>
    9d28:	e28d0004 	add	r0, sp, #4
    9d2c:	eb000bc8 	bl	cc54 <CDWHCIRegister::Write()>
    9d30:	e28d0004 	add	r0, sp, #4
    9d34:	eb000bbe 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    9d38:	e28dd010 	add	sp, sp, #16
    9d3c:	e8bd8010 	pop	{r4, pc}
    9d40:	e3e01a01 	mvn	r1, #4096	; 0x1000
    9d44:	e28d0004 	add	r0, sp, #4
    9d48:	eb000bee 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    9d4c:	eafffff5 	b	9d28 <CDWHCIDevice::DisableRootPort(bool)+0x3c>
    9d50:	20980440 	.word	0x20980440

00009d54 <CDWHCIDevice::PowerOn()>:
    9d54:	e3a01000 	mov	r1, #0
    9d58:	e92d4030 	push	{r4, r5, lr}
    9d5c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    9d60:	e28d000c 	add	r0, sp, #12
    9d64:	e1a05001 	mov	r5, r1
    9d68:	eb006a66 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    9d6c:	e3a03014 	mov	r3, #20
    9d70:	e3a0c003 	mov	ip, #3
    9d74:	e59f1040 	ldr	r1, [pc, #64]	; 9dbc <CDWHCIDevice::PowerOn()+0x68>
    9d78:	e28d000c 	add	r0, sp, #12
    9d7c:	e58d5000 	str	r5, [sp]
    9d80:	e08d2003 	add	r2, sp, r3
    9d84:	e58dc020 	str	ip, [sp, #32]
    9d88:	e58dc024 	str	ip, [sp, #36]	; 0x24
    9d8c:	eb006a69 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9d90:	e2504000 	subs	r4, r0, #0
    9d94:	0a000003 	beq	9da8 <CDWHCIDevice::PowerOn()+0x54>
    9d98:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
    9d9c:	e3100002 	tst	r0, #2
    9da0:	11a04005 	movne	r4, r5
    9da4:	02004001 	andeq	r4, r0, #1
    9da8:	e28d000c 	add	r0, sp, #12
    9dac:	eb006a5c 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
    9db0:	e1a00004 	mov	r0, r4
    9db4:	e28dd02c 	add	sp, sp, #44	; 0x2c
    9db8:	e8bd8030 	pop	{r4, r5, pc}
    9dbc:	00028001 	.word	0x00028001

00009dc0 <CDWHCIDevice::EnableGlobalInterrupts()>:
    9dc0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9dc4:	e24dd014 	sub	sp, sp, #20
    9dc8:	e59f1030 	ldr	r1, [pc, #48]	; 9e00 <CDWHCIDevice::EnableGlobalInterrupts()+0x40>
    9dcc:	e28d0004 	add	r0, sp, #4
    9dd0:	eb000b8f 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9dd4:	e28d0004 	add	r0, sp, #4
    9dd8:	eb000b96 	bl	cc38 <CDWHCIRegister::Read()>
    9ddc:	e3a01001 	mov	r1, #1
    9de0:	e28d0004 	add	r0, sp, #4
    9de4:	eb000bd5 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    9de8:	e28d0004 	add	r0, sp, #4
    9dec:	eb000b98 	bl	cc54 <CDWHCIRegister::Write()>
    9df0:	e28d0004 	add	r0, sp, #4
    9df4:	eb000b8e 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    9df8:	e28dd014 	add	sp, sp, #20
    9dfc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9e00:	20980008 	.word	0x20980008

00009e04 <CDWHCIDevice::EnableCommonInterrupts()>:
    9e04:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9e08:	e24dd014 	sub	sp, sp, #20
    9e0c:	e59f1024 	ldr	r1, [pc, #36]	; 9e38 <CDWHCIDevice::EnableCommonInterrupts()+0x34>
    9e10:	e28d0004 	add	r0, sp, #4
    9e14:	eb000b7e 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9e18:	e28d0004 	add	r0, sp, #4
    9e1c:	eb000c06 	bl	ce3c <CDWHCIRegister::SetAll()>
    9e20:	e28d0004 	add	r0, sp, #4
    9e24:	eb000b8a 	bl	cc54 <CDWHCIRegister::Write()>
    9e28:	e28d0004 	add	r0, sp, #4
    9e2c:	eb000b80 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    9e30:	e28dd014 	add	sp, sp, #20
    9e34:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9e38:	20980014 	.word	0x20980014

00009e3c <CDWHCIDevice::EnableHostInterrupts()>:
    9e3c:	e92d4010 	push	{r4, lr}
    9e40:	e1a04000 	mov	r4, r0
    9e44:	e24dd010 	sub	sp, sp, #16
    9e48:	e3a02000 	mov	r2, #0
    9e4c:	e59f1040 	ldr	r1, [pc, #64]	; 9e94 <CDWHCIDevice::EnableHostInterrupts()+0x58>
    9e50:	e28d0004 	add	r0, sp, #4
    9e54:	eb000b72 	bl	cc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9e58:	e28d0004 	add	r0, sp, #4
    9e5c:	eb000b7c 	bl	cc54 <CDWHCIRegister::Write()>
    9e60:	e1a00004 	mov	r0, r4
    9e64:	ebffffe6 	bl	9e04 <CDWHCIDevice::EnableCommonInterrupts()>
    9e68:	e28d0004 	add	r0, sp, #4
    9e6c:	eb000b71 	bl	cc38 <CDWHCIRegister::Read()>
    9e70:	e3a01402 	mov	r1, #33554432	; 0x2000000
    9e74:	e28d0004 	add	r0, sp, #4
    9e78:	eb000bb0 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    9e7c:	e28d0004 	add	r0, sp, #4
    9e80:	eb000b73 	bl	cc54 <CDWHCIRegister::Write()>
    9e84:	e28d0004 	add	r0, sp, #4
    9e88:	eb000b69 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    9e8c:	e28dd010 	add	sp, sp, #16
    9e90:	e8bd8010 	pop	{r4, pc}
    9e94:	20980018 	.word	0x20980018

00009e98 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    9e98:	e92d4030 	push	{r4, r5, lr}
    9e9c:	e1a04000 	mov	r4, r0
    9ea0:	e24dd014 	sub	sp, sp, #20
    9ea4:	e1a05001 	mov	r5, r1
    9ea8:	e28d0004 	add	r0, sp, #4
    9eac:	e59f1064 	ldr	r1, [pc, #100]	; 9f18 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x80>
    9eb0:	eb000b57 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9eb4:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    9eb8:	e3500000 	cmp	r0, #0
    9ebc:	1a00000e 	bne	9efc <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x64>
    9ec0:	e28d0004 	add	r0, sp, #4
    9ec4:	eb000b5b 	bl	cc38 <CDWHCIRegister::Read()>
    9ec8:	e3a01001 	mov	r1, #1
    9ecc:	e28d0004 	add	r0, sp, #4
    9ed0:	e1a01511 	lsl	r1, r1, r5
    9ed4:	eb000b99 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    9ed8:	e28d0004 	add	r0, sp, #4
    9edc:	eb000b5c 	bl	cc54 <CDWHCIRegister::Write()>
    9ee0:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    9ee4:	e3530000 	cmp	r3, #0
    9ee8:	1a000005 	bne	9f04 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x6c>
    9eec:	e28d0004 	add	r0, sp, #4
    9ef0:	eb000b4f 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    9ef4:	e28dd014 	add	sp, sp, #20
    9ef8:	e8bd8030 	pop	{r4, r5, pc}
    9efc:	eb008714 	bl	2bb54 <EnterCritical>
    9f00:	eaffffee 	b	9ec0 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x28>
    9f04:	eb00873c 	bl	2bbfc <LeaveCritical>
    9f08:	e28d0004 	add	r0, sp, #4
    9f0c:	eb000b48 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    9f10:	e28dd014 	add	sp, sp, #20
    9f14:	e8bd8030 	pop	{r4, r5, pc}
    9f18:	20980418 	.word	0x20980418

00009f1c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    9f1c:	e92d4030 	push	{r4, r5, lr}
    9f20:	e1a04000 	mov	r4, r0
    9f24:	e24dd014 	sub	sp, sp, #20
    9f28:	e1a05001 	mov	r5, r1
    9f2c:	e28d0004 	add	r0, sp, #4
    9f30:	e59f1064 	ldr	r1, [pc, #100]	; 9f9c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x80>
    9f34:	eb000b36 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9f38:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    9f3c:	e3500000 	cmp	r0, #0
    9f40:	1a00000e 	bne	9f80 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x64>
    9f44:	e28d0004 	add	r0, sp, #4
    9f48:	eb000b3a 	bl	cc38 <CDWHCIRegister::Read()>
    9f4c:	e3a01001 	mov	r1, #1
    9f50:	e28d0004 	add	r0, sp, #4
    9f54:	e1e01511 	mvn	r1, r1, lsl r5
    9f58:	eb000b6a 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    9f5c:	e28d0004 	add	r0, sp, #4
    9f60:	eb000b3b 	bl	cc54 <CDWHCIRegister::Write()>
    9f64:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    9f68:	e3530000 	cmp	r3, #0
    9f6c:	1a000005 	bne	9f88 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x6c>
    9f70:	e28d0004 	add	r0, sp, #4
    9f74:	eb000b2e 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    9f78:	e28dd014 	add	sp, sp, #20
    9f7c:	e8bd8030 	pop	{r4, r5, pc}
    9f80:	eb0086f3 	bl	2bb54 <EnterCritical>
    9f84:	eaffffee 	b	9f44 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x28>
    9f88:	eb00871b 	bl	2bbfc <LeaveCritical>
    9f8c:	e28d0004 	add	r0, sp, #4
    9f90:	eb000b27 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    9f94:	e28dd014 	add	sp, sp, #20
    9f98:	e8bd8030 	pop	{r4, r5, pc}
    9f9c:	20980418 	.word	0x20980418

00009fa0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    9fa0:	e92d4070 	push	{r4, r5, r6, lr}
    9fa4:	e2514000 	subs	r4, r1, #0
    9fa8:	e24dd048 	sub	sp, sp, #72	; 0x48
    9fac:	0a0000e4 	beq	a344 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3a4>
    9fb0:	e1a06000 	mov	r6, r0
    9fb4:	e1a00004 	mov	r0, r4
    9fb8:	eb000d08 	bl	d3e0 <CDWHCITransferStageData::GetChannelNumber() const>
    9fbc:	e596300c 	ldr	r3, [r6, #12]
    9fc0:	e1a05000 	mov	r5, r0
    9fc4:	e1530000 	cmp	r3, r0
    9fc8:	9a0000e1 	bls	a354 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b4>
    9fcc:	e3a01001 	mov	r1, #1
    9fd0:	e1a00004 	mov	r0, r4
    9fd4:	eb000cfb 	bl	d3c8 <CDWHCITransferStageData::SetSubState(unsigned int)>
    9fd8:	e59f1384 	ldr	r1, [pc, #900]	; a364 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c4>
    9fdc:	e1a0000d 	mov	r0, sp
    9fe0:	e0811285 	add	r1, r1, r5, lsl #5
    9fe4:	eb000b0a 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9fe8:	e1a0000d 	mov	r0, sp
    9fec:	eb000b92 	bl	ce3c <CDWHCIRegister::SetAll()>
    9ff0:	e1a0000d 	mov	r0, sp
    9ff4:	eb000b16 	bl	cc54 <CDWHCIRegister::Write()>
    9ff8:	e59f1368 	ldr	r1, [pc, #872]	; a368 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c8>
    9ffc:	e1a05285 	lsl	r5, r5, #5
    a000:	e3a02000 	mov	r2, #0
    a004:	e0851001 	add	r1, r5, r1
    a008:	e28d000c 	add	r0, sp, #12
    a00c:	eb000b04 	bl	cc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a010:	e1a00004 	mov	r0, r4
    a014:	eb000e2a 	bl	d8c4 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a018:	e3c014ff 	bic	r1, r0, #-16777216	; 0xff000000
    a01c:	e3c1173e 	bic	r1, r1, #16252928	; 0xf80000
    a020:	e28d000c 	add	r0, sp, #12
    a024:	eb000b45 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a028:	e1a00004 	mov	r0, r4
    a02c:	eb000e26 	bl	d8cc <CDWHCITransferStageData::GetPacketsToTransfer() const>
    a030:	e1a01000 	mov	r1, r0
    a034:	e59f3330 	ldr	r3, [pc, #816]	; a36c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3cc>
    a038:	e28d000c 	add	r0, sp, #12
    a03c:	e0031981 	and	r1, r3, r1, lsl #19
    a040:	eb000b3e 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a044:	e1a00004 	mov	r0, r4
    a048:	eb000df3 	bl	d81c <CDWHCITransferStageData::GetPID() const>
    a04c:	e1a01000 	mov	r1, r0
    a050:	e28d000c 	add	r0, sp, #12
    a054:	e1a01e81 	lsl	r1, r1, #29
    a058:	eb000b38 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a05c:	e28d000c 	add	r0, sp, #12
    a060:	eb000afb 	bl	cc54 <CDWHCIRegister::Write()>
    a064:	e1a00004 	mov	r0, r4
    a068:	eb000e0a 	bl	d898 <CDWHCITransferStageData::GetDMAAddress() const>
    a06c:	e59f12fc 	ldr	r1, [pc, #764]	; a370 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d0>
    a070:	e3c00103 	bic	r0, r0, #-1073741824	; 0xc0000000
    a074:	e3802101 	orr	r2, r0, #1073741824	; 0x40000000
    a078:	e0851001 	add	r1, r5, r1
    a07c:	e28d0018 	add	r0, sp, #24
    a080:	eb000ae7 	bl	cc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a084:	e28d0018 	add	r0, sp, #24
    a088:	eb000af1 	bl	cc54 <CDWHCIRegister::Write()>
    a08c:	e1a00004 	mov	r0, r4
    a090:	eb000e00 	bl	d898 <CDWHCITransferStageData::GetDMAAddress() const>
    a094:	e1a06000 	mov	r6, r0
    a098:	e1a00004 	mov	r0, r4
    a09c:	eb000e08 	bl	d8c4 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a0a0:	e1a01000 	mov	r1, r0
    a0a4:	e1a00006 	mov	r0, r6
    a0a8:	eb0086e9 	bl	2bc54 <CleanAndInvalidateDataCacheRange>
    a0ac:	e59f12c0 	ldr	r1, [pc, #704]	; a374 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d4>
    a0b0:	e3a02000 	mov	r2, #0
    a0b4:	e0851001 	add	r1, r5, r1
    a0b8:	e28d0024 	add	r0, sp, #36	; 0x24
    a0bc:	eb000ad8 	bl	cc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a0c0:	e1a00004 	mov	r0, r4
    a0c4:	eb000e02 	bl	d8d4 <CDWHCITransferStageData::IsSplit() const>
    a0c8:	e3500000 	cmp	r0, #0
    a0cc:	1a00007f 	bne	a2d0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x330>
    a0d0:	e28d0024 	add	r0, sp, #36	; 0x24
    a0d4:	eb000ade 	bl	cc54 <CDWHCIRegister::Write()>
    a0d8:	e59f1298 	ldr	r1, [pc, #664]	; a378 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d8>
    a0dc:	e28d0030 	add	r0, sp, #48	; 0x30
    a0e0:	e0851001 	add	r1, r5, r1
    a0e4:	eb000aca 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a0e8:	e28d0030 	add	r0, sp, #48	; 0x30
    a0ec:	eb000ad1 	bl	cc38 <CDWHCIRegister::Read()>
    a0f0:	e59f1284 	ldr	r1, [pc, #644]	; a37c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3dc>
    a0f4:	e28d0030 	add	r0, sp, #48	; 0x30
    a0f8:	eb000b02 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    a0fc:	e1a00004 	mov	r0, r4
    a100:	eb000dc1 	bl	d80c <CDWHCITransferStageData::GetMaxPacketSize() const>
    a104:	e1a01a80 	lsl	r1, r0, #21
    a108:	e1a01aa1 	lsr	r1, r1, #21
    a10c:	e28d0030 	add	r0, sp, #48	; 0x30
    a110:	eb000b0a 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a114:	e3e01603 	mvn	r1, #3145728	; 0x300000
    a118:	e28d0030 	add	r0, sp, #48	; 0x30
    a11c:	eb000af9 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    a120:	e3a01601 	mov	r1, #1048576	; 0x100000
    a124:	e28d0030 	add	r0, sp, #48	; 0x30
    a128:	eb000b04 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a12c:	e1a00004 	mov	r0, r4
    a130:	eb000dd4 	bl	d888 <CDWHCITransferStageData::IsDirectionIn() const>
    a134:	e3500000 	cmp	r0, #0
    a138:	1a000055 	bne	a294 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2f4>
    a13c:	e3e01902 	mvn	r1, #32768	; 0x8000
    a140:	e28d0030 	add	r0, sp, #48	; 0x30
    a144:	eb000aef 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    a148:	e1a00004 	mov	r0, r4
    a14c:	eb000db0 	bl	d814 <CDWHCITransferStageData::GetSpeed() const>
    a150:	e3500000 	cmp	r0, #0
    a154:	1a000055 	bne	a2b0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x310>
    a158:	e3a01802 	mov	r1, #131072	; 0x20000
    a15c:	e28d0030 	add	r0, sp, #48	; 0x30
    a160:	eb000af6 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a164:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
    a168:	e28d0030 	add	r0, sp, #48	; 0x30
    a16c:	eb000ae5 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    a170:	e1a00004 	mov	r0, r4
    a174:	eb000d74 	bl	d74c <CDWHCITransferStageData::GetDeviceAddress() const>
    a178:	e1a01000 	mov	r1, r0
    a17c:	e28d0030 	add	r0, sp, #48	; 0x30
    a180:	e1a01b01 	lsl	r1, r1, #22
    a184:	eb000aed 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a188:	e3e01703 	mvn	r1, #786432	; 0xc0000
    a18c:	e28d0030 	add	r0, sp, #48	; 0x30
    a190:	eb000adc 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    a194:	e1a00004 	mov	r0, r4
    a198:	eb000d77 	bl	d77c <CDWHCITransferStageData::GetEndpointType() const>
    a19c:	e1a01000 	mov	r1, r0
    a1a0:	e28d0030 	add	r0, sp, #48	; 0x30
    a1a4:	e1a01901 	lsl	r1, r1, #18
    a1a8:	eb000ae4 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a1ac:	e3e01b1e 	mvn	r1, #30720	; 0x7800
    a1b0:	e28d0030 	add	r0, sp, #48	; 0x30
    a1b4:	eb000ad3 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    a1b8:	e1a00004 	mov	r0, r4
    a1bc:	eb000d86 	bl	d7dc <CDWHCITransferStageData::GetEndpointNumber() const>
    a1c0:	e1a01000 	mov	r1, r0
    a1c4:	e28d0030 	add	r0, sp, #48	; 0x30
    a1c8:	e1a01581 	lsl	r1, r1, #11
    a1cc:	eb000adb 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a1d0:	e1a00004 	mov	r0, r4
    a1d4:	eb000e34 	bl	daac <CDWHCITransferStageData::GetFrameScheduler() const>
    a1d8:	e2506000 	subs	r6, r0, #0
    a1dc:	0a00000b 	beq	a210 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x270>
    a1e0:	e5963000 	ldr	r3, [r6]
    a1e4:	e5933014 	ldr	r3, [r3, #20]
    a1e8:	e12fff33 	blx	r3
    a1ec:	e5963000 	ldr	r3, [r6]
    a1f0:	e1a00006 	mov	r0, r6
    a1f4:	e5933018 	ldr	r3, [r3, #24]
    a1f8:	e12fff33 	blx	r3
    a1fc:	e3500000 	cmp	r0, #0
    a200:	0a00002e 	beq	a2c0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x320>
    a204:	e3a01202 	mov	r1, #536870912	; 0x20000000
    a208:	e28d0030 	add	r0, sp, #48	; 0x30
    a20c:	eb000acb 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a210:	e59f1168 	ldr	r1, [pc, #360]	; a380 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3e0>
    a214:	e28d003c 	add	r0, sp, #60	; 0x3c
    a218:	e0851001 	add	r1, r5, r1
    a21c:	eb000a7c 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a220:	e1a00004 	mov	r0, r4
    a224:	eb000de5 	bl	d9c0 <CDWHCITransferStageData::GetStatusMask() const>
    a228:	e1a01000 	mov	r1, r0
    a22c:	e28d003c 	add	r0, sp, #60	; 0x3c
    a230:	eb000aa1 	bl	ccbc <CDWHCIRegister::Set(unsigned int)>
    a234:	e28d003c 	add	r0, sp, #60	; 0x3c
    a238:	eb000a85 	bl	cc54 <CDWHCIRegister::Write()>
    a23c:	e28d0030 	add	r0, sp, #48	; 0x30
    a240:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a244:	eb000abd 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a248:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
    a24c:	e28d0030 	add	r0, sp, #48	; 0x30
    a250:	eb000aac 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    a254:	e28d0030 	add	r0, sp, #48	; 0x30
    a258:	eb000a7d 	bl	cc54 <CDWHCIRegister::Write()>
    a25c:	e28d003c 	add	r0, sp, #60	; 0x3c
    a260:	eb000a73 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    a264:	e28d0030 	add	r0, sp, #48	; 0x30
    a268:	eb000a71 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    a26c:	e28d0024 	add	r0, sp, #36	; 0x24
    a270:	eb000a6f 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    a274:	e28d0018 	add	r0, sp, #24
    a278:	eb000a6d 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    a27c:	e28d000c 	add	r0, sp, #12
    a280:	eb000a6b 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    a284:	e1a0000d 	mov	r0, sp
    a288:	eb000a69 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    a28c:	e28dd048 	add	sp, sp, #72	; 0x48
    a290:	e8bd8070 	pop	{r4, r5, r6, pc}
    a294:	e3a01902 	mov	r1, #32768	; 0x8000
    a298:	e28d0030 	add	r0, sp, #48	; 0x30
    a29c:	eb000aa7 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a2a0:	e1a00004 	mov	r0, r4
    a2a4:	eb000d5a 	bl	d814 <CDWHCITransferStageData::GetSpeed() const>
    a2a8:	e3500000 	cmp	r0, #0
    a2ac:	0affffa9 	beq	a158 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1b8>
    a2b0:	e3e01802 	mvn	r1, #131072	; 0x20000
    a2b4:	e28d0030 	add	r0, sp, #48	; 0x30
    a2b8:	eb000a92 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    a2bc:	eaffffa8 	b	a164 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1c4>
    a2c0:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    a2c4:	e28d0030 	add	r0, sp, #48	; 0x30
    a2c8:	eb000a8e 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    a2cc:	eaffffcf 	b	a210 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x270>
    a2d0:	e1a00004 	mov	r0, r4
    a2d4:	eb000da2 	bl	d964 <CDWHCITransferStageData::GetHubPortAddress() const>
    a2d8:	e1a01000 	mov	r1, r0
    a2dc:	e28d0024 	add	r0, sp, #36	; 0x24
    a2e0:	eb000a96 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a2e4:	e1a00004 	mov	r0, r4
    a2e8:	eb000d88 	bl	d910 <CDWHCITransferStageData::GetHubAddress() const>
    a2ec:	e1a01000 	mov	r1, r0
    a2f0:	e28d0024 	add	r0, sp, #36	; 0x24
    a2f4:	e1a01381 	lsl	r1, r1, #7
    a2f8:	eb000a90 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a2fc:	e1a00004 	mov	r0, r4
    a300:	eb000dac 	bl	d9b8 <CDWHCITransferStageData::GetSplitPosition() const>
    a304:	e1a01000 	mov	r1, r0
    a308:	e28d0024 	add	r0, sp, #36	; 0x24
    a30c:	e1a01701 	lsl	r1, r1, #14
    a310:	eb000a8a 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a314:	e1a00004 	mov	r0, r4
    a318:	eb000d6f 	bl	d8dc <CDWHCITransferStageData::IsSplitComplete() const>
    a31c:	e3500000 	cmp	r0, #0
    a320:	1a000003 	bne	a334 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x394>
    a324:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a328:	e28d0024 	add	r0, sp, #36	; 0x24
    a32c:	eb000a83 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a330:	eaffff66 	b	a0d0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x130>
    a334:	e3a01801 	mov	r1, #65536	; 0x10000
    a338:	e28d0024 	add	r0, sp, #36	; 0x24
    a33c:	eb000a7f 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a340:	eafffff7 	b	a324 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x384>
    a344:	e59f2038 	ldr	r2, [pc, #56]	; a384 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3e4>
    a348:	e59f1038 	ldr	r1, [pc, #56]	; a388 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3e8>
    a34c:	e59f0038 	ldr	r0, [pc, #56]	; a38c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3ec>
    a350:	eb0068cb 	bl	24684 <assertion_failed>
    a354:	e3a02e35 	mov	r2, #848	; 0x350
    a358:	e59f1028 	ldr	r1, [pc, #40]	; a388 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3e8>
    a35c:	e59f002c 	ldr	r0, [pc, #44]	; a390 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3f0>
    a360:	eb0068c7 	bl	24684 <assertion_failed>
    a364:	20980508 	.word	0x20980508
    a368:	20980510 	.word	0x20980510
    a36c:	1ff80000 	.word	0x1ff80000
    a370:	20980514 	.word	0x20980514
    a374:	20980504 	.word	0x20980504
    a378:	20980500 	.word	0x20980500
    a37c:	fffff800 	.word	0xfffff800
    a380:	2098050c 	.word	0x2098050c
    a384:	0000034e 	.word	0x0000034e
    a388:	0003ea28 	.word	0x0003ea28
    a38c:	0003ea98 	.word	0x0003ea98
    a390:	0003eaa8 	.word	0x0003eaa8

0000a394 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    a394:	e92d4070 	push	{r4, r5, r6, lr}
    a398:	e2514000 	subs	r4, r1, #0
    a39c:	e24dd018 	sub	sp, sp, #24
    a3a0:	0a000032 	beq	a470 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xdc>
    a3a4:	e1a06000 	mov	r6, r0
    a3a8:	e1a00004 	mov	r0, r4
    a3ac:	eb000c0b 	bl	d3e0 <CDWHCITransferStageData::GetChannelNumber() const>
    a3b0:	e596300c 	ldr	r3, [r6, #12]
    a3b4:	e1530000 	cmp	r3, r0
    a3b8:	9a000030 	bls	a480 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xec>
    a3bc:	e59f10cc 	ldr	r1, [pc, #204]	; a490 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xfc>
    a3c0:	e0801001 	add	r1, r0, r1
    a3c4:	e1a05281 	lsl	r5, r1, #5
    a3c8:	e1a01005 	mov	r1, r5
    a3cc:	e1a0000d 	mov	r0, sp
    a3d0:	eb000a0f 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a3d4:	e1a0000d 	mov	r0, sp
    a3d8:	eb000a16 	bl	cc38 <CDWHCIRegister::Read()>
    a3dc:	e1a0000d 	mov	r0, sp
    a3e0:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a3e4:	eb000a38 	bl	cccc <CDWHCIRegister::IsSet(unsigned int) const>
    a3e8:	e3500000 	cmp	r0, #0
    a3ec:	1a000006 	bne	a40c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x78>
    a3f0:	e1a01004 	mov	r1, r4
    a3f4:	e1a00006 	mov	r0, r6
    a3f8:	ebfffee8 	bl	9fa0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    a3fc:	e1a0000d 	mov	r0, sp
    a400:	eb000a0b 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    a404:	e28dd018 	add	sp, sp, #24
    a408:	e8bd8070 	pop	{r4, r5, r6, pc}
    a40c:	e1a00004 	mov	r0, r4
    a410:	e3a01000 	mov	r1, #0
    a414:	eb000beb 	bl	d3c8 <CDWHCITransferStageData::SetSubState(unsigned int)>
    a418:	e1a0000d 	mov	r0, sp
    a41c:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
    a420:	eb000a38 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    a424:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    a428:	e1a0000d 	mov	r0, sp
    a42c:	eb000a43 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    a430:	e1a0000d 	mov	r0, sp
    a434:	eb000a06 	bl	cc54 <CDWHCIRegister::Write()>
    a438:	e285100c 	add	r1, r5, #12
    a43c:	e28d000c 	add	r0, sp, #12
    a440:	eb0009f3 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a444:	e3a01002 	mov	r1, #2
    a448:	e28d000c 	add	r0, sp, #12
    a44c:	eb000a1a 	bl	ccbc <CDWHCIRegister::Set(unsigned int)>
    a450:	e28d000c 	add	r0, sp, #12
    a454:	eb0009fe 	bl	cc54 <CDWHCIRegister::Write()>
    a458:	e28d000c 	add	r0, sp, #12
    a45c:	eb0009f4 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    a460:	e1a0000d 	mov	r0, sp
    a464:	eb0009f2 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    a468:	e28dd018 	add	sp, sp, #24
    a46c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a470:	e59f201c 	ldr	r2, [pc, #28]	; a494 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x100>
    a474:	e59f101c 	ldr	r1, [pc, #28]	; a498 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x104>
    a478:	e59f001c 	ldr	r0, [pc, #28]	; a49c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x108>
    a47c:	eb006880 	bl	24684 <assertion_failed>
    a480:	e59f2018 	ldr	r2, [pc, #24]	; a4a0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x10c>
    a484:	e59f100c 	ldr	r1, [pc, #12]	; a498 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x104>
    a488:	e59f0014 	ldr	r0, [pc, #20]	; a4a4 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x110>
    a48c:	eb00687c 	bl	24684 <assertion_failed>
    a490:	0104c028 	.word	0x0104c028
    a494:	00000333 	.word	0x00000333
    a498:	0003ea28 	.word	0x0003ea28
    a49c:	0003ea98 	.word	0x0003ea98
    a4a0:	00000335 	.word	0x00000335
    a4a4:	0003eaa8 	.word	0x0003eaa8

0000a4a8 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>:
    a4a8:	e92d4070 	push	{r4, r5, r6, lr}
    a4ac:	e3a05000 	mov	r5, #0
    a4b0:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    a4b4:	e1510005 	cmp	r1, r5
    a4b8:	0a00001d 	beq	a534 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x8c>
    a4bc:	e1a06000 	mov	r6, r0
    a4c0:	e1a00001 	mov	r0, r1
    a4c4:	e1a04001 	mov	r4, r1
    a4c8:	eb000bbc 	bl	d3c0 <CDWHCITransferStageData::GetState() const>
    a4cc:	e3500003 	cmp	r0, #3
    a4d0:	1a00001b 	bne	a544 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x9c>
    a4d4:	e1a00004 	mov	r0, r4
    a4d8:	eb000cfd 	bl	d8d4 <CDWHCITransferStageData::IsSplit() const>
    a4dc:	e2501000 	subs	r1, r0, #0
    a4e0:	1a000007 	bne	a504 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x5c>
    a4e4:	e1a00004 	mov	r0, r4
    a4e8:	eb000bb2 	bl	d3b8 <CDWHCITransferStageData::SetState(unsigned int)>
    a4ec:	e1a01004 	mov	r1, r4
    a4f0:	e1a00006 	mov	r0, r6
    a4f4:	ebffffa6 	bl	a394 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a4f8:	e3a03000 	mov	r3, #0
    a4fc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a500:	e8bd8070 	pop	{r4, r5, r6, pc}
    a504:	e1a00004 	mov	r0, r4
    a508:	e3a01001 	mov	r1, #1
    a50c:	eb000ba9 	bl	d3b8 <CDWHCITransferStageData::SetState(unsigned int)>
    a510:	e1a01005 	mov	r1, r5
    a514:	e1a00004 	mov	r0, r4
    a518:	eb000b9a 	bl	d388 <CDWHCITransferStageData::SetSplitComplete(bool)>
    a51c:	e1a00004 	mov	r0, r4
    a520:	eb000d61 	bl	daac <CDWHCITransferStageData::GetFrameScheduler() const>
    a524:	e5903000 	ldr	r3, [r0]
    a528:	e5933008 	ldr	r3, [r3, #8]
    a52c:	e12fff33 	blx	r3
    a530:	eaffffed 	b	a4ec <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x44>
    a534:	e59f2018 	ldr	r2, [pc, #24]	; a554 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xac>
    a538:	e59f1018 	ldr	r1, [pc, #24]	; a558 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    a53c:	e59f0018 	ldr	r0, [pc, #24]	; a55c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb4>
    a540:	eb00684f 	bl	24684 <assertion_failed>
    a544:	e59f2014 	ldr	r2, [pc, #20]	; a560 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb8>
    a548:	e59f1008 	ldr	r1, [pc, #8]	; a558 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    a54c:	e59f0010 	ldr	r0, [pc, #16]	; a564 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xbc>
    a550:	eb00684b 	bl	24684 <assertion_failed>
    a554:	0000053d 	.word	0x0000053d
    a558:	0003ea28 	.word	0x0003ea28
    a55c:	0003ea98 	.word	0x0003ea98
    a560:	0000053e 	.word	0x0000053e
    a564:	0003eac0 	.word	0x0003eac0

0000a568 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)>:
    a568:	e2520000 	subs	r0, r2, #0
    a56c:	e92d4010 	push	{r4, lr}
    a570:	0a000003 	beq	a584 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x1c>
    a574:	e3510000 	cmp	r1, #0
    a578:	0a000005 	beq	a594 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x2c>
    a57c:	e8bd4010 	pop	{r4, lr}
    a580:	eaffffc8 	b	a4a8 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    a584:	e59f2018 	ldr	r2, [pc, #24]	; a5a4 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x3c>
    a588:	e59f1018 	ldr	r1, [pc, #24]	; a5a8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x40>
    a58c:	e59f0018 	ldr	r0, [pc, #24]	; a5ac <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x44>
    a590:	eb00683b 	bl	24684 <assertion_failed>
    a594:	e59f2014 	ldr	r2, [pc, #20]	; a5b0 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x48>
    a598:	e59f1008 	ldr	r1, [pc, #8]	; a5a8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x40>
    a59c:	e59f0010 	ldr	r0, [pc, #16]	; a5b4 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
    a5a0:	eb006837 	bl	24684 <assertion_failed>
    a5a4:	00000554 	.word	0x00000554
    a5a8:	0003ea28 	.word	0x0003ea28
    a5ac:	0003ea38 	.word	0x0003ea38
    a5b0:	00000557 	.word	0x00000557
    a5b4:	0003eaf4 	.word	0x0003eaf4

0000a5b8 <CDWHCIDevice::AllocateChannel()>:
    a5b8:	e92d4070 	push	{r4, r5, r6, lr}
    a5bc:	e1a05000 	mov	r5, r0
    a5c0:	e5900014 	ldr	r0, [r0, #20]
    a5c4:	e3500000 	cmp	r0, #0
    a5c8:	1a000014 	bne	a620 <CDWHCIDevice::AllocateChannel()+0x68>
    a5cc:	e595100c 	ldr	r1, [r5, #12]
    a5d0:	e3510000 	cmp	r1, #0
    a5d4:	0a00000e 	beq	a614 <CDWHCIDevice::AllocateChannel()+0x5c>
    a5d8:	e5954010 	ldr	r4, [r5, #16]
    a5dc:	e2144001 	ands	r4, r4, #1
    a5e0:	0a000022 	beq	a670 <CDWHCIDevice::AllocateChannel()+0xb8>
    a5e4:	e3a04000 	mov	r4, #0
    a5e8:	e3a03001 	mov	r3, #1
    a5ec:	ea000002 	b	a5fc <CDWHCIDevice::AllocateChannel()+0x44>
    a5f0:	e5952010 	ldr	r2, [r5, #16]
    a5f4:	e1120003 	tst	r2, r3
    a5f8:	0a000012 	beq	a648 <CDWHCIDevice::AllocateChannel()+0x90>
    a5fc:	e2844001 	add	r4, r4, #1
    a600:	e1540001 	cmp	r4, r1
    a604:	e1a03083 	lsl	r3, r3, #1
    a608:	3afffff8 	bcc	a5f0 <CDWHCIDevice::AllocateChannel()+0x38>
    a60c:	e3500000 	cmp	r0, #0
    a610:	1a000014 	bne	a668 <CDWHCIDevice::AllocateChannel()+0xb0>
    a614:	e3a04010 	mov	r4, #16
    a618:	e1a00004 	mov	r0, r4
    a61c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a620:	eb00854b 	bl	2bb54 <EnterCritical>
    a624:	e595100c 	ldr	r1, [r5, #12]
    a628:	e3510000 	cmp	r1, #0
    a62c:	05950014 	ldreq	r0, [r5, #20]
    a630:	0afffff5 	beq	a60c <CDWHCIDevice::AllocateChannel()+0x54>
    a634:	e5954010 	ldr	r4, [r5, #16]
    a638:	e5950014 	ldr	r0, [r5, #20]
    a63c:	e2144001 	ands	r4, r4, #1
    a640:	1affffe7 	bne	a5e4 <CDWHCIDevice::AllocateChannel()+0x2c>
    a644:	e3a03001 	mov	r3, #1
    a648:	e5952010 	ldr	r2, [r5, #16]
    a64c:	e3500000 	cmp	r0, #0
    a650:	e1823003 	orr	r3, r2, r3
    a654:	e5853010 	str	r3, [r5, #16]
    a658:	0affffee 	beq	a618 <CDWHCIDevice::AllocateChannel()+0x60>
    a65c:	eb008566 	bl	2bbfc <LeaveCritical>
    a660:	e1a00004 	mov	r0, r4
    a664:	e8bd8070 	pop	{r4, r5, r6, pc}
    a668:	eb008563 	bl	2bbfc <LeaveCritical>
    a66c:	eaffffe8 	b	a614 <CDWHCIDevice::AllocateChannel()+0x5c>
    a670:	e5953010 	ldr	r3, [r5, #16]
    a674:	e3833001 	orr	r3, r3, #1
    a678:	e5853010 	str	r3, [r5, #16]
    a67c:	eaffffe5 	b	a618 <CDWHCIDevice::AllocateChannel()+0x60>

0000a680 <CDWHCIDevice::FreeChannel(unsigned int)>:
    a680:	e590300c 	ldr	r3, [r0, #12]
    a684:	e92d4070 	push	{r4, r5, r6, lr}
    a688:	e1530001 	cmp	r3, r1
    a68c:	9a000012 	bls	a6dc <CDWHCIDevice::FreeChannel(unsigned int)+0x5c>
    a690:	e3a05001 	mov	r5, #1
    a694:	e1a04000 	mov	r4, r0
    a698:	e5900014 	ldr	r0, [r0, #20]
    a69c:	e1a05115 	lsl	r5, r5, r1
    a6a0:	e3500000 	cmp	r0, #0
    a6a4:	1a00000a 	bne	a6d4 <CDWHCIDevice::FreeChannel(unsigned int)+0x54>
    a6a8:	e5943010 	ldr	r3, [r4, #16]
    a6ac:	e1130005 	tst	r3, r5
    a6b0:	0a00000d 	beq	a6ec <CDWHCIDevice::FreeChannel(unsigned int)+0x6c>
    a6b4:	e5941010 	ldr	r1, [r4, #16]
    a6b8:	e5943014 	ldr	r3, [r4, #20]
    a6bc:	e1c11005 	bic	r1, r1, r5
    a6c0:	e3530000 	cmp	r3, #0
    a6c4:	e5841010 	str	r1, [r4, #16]
    a6c8:	08bd8070 	popeq	{r4, r5, r6, pc}
    a6cc:	e8bd4070 	pop	{r4, r5, r6, lr}
    a6d0:	ea008549 	b	2bbfc <LeaveCritical>
    a6d4:	eb00851e 	bl	2bb54 <EnterCritical>
    a6d8:	eafffff2 	b	a6a8 <CDWHCIDevice::FreeChannel(unsigned int)+0x28>
    a6dc:	e59f2018 	ldr	r2, [pc, #24]	; a6fc <CDWHCIDevice::FreeChannel(unsigned int)+0x7c>
    a6e0:	e59f1018 	ldr	r1, [pc, #24]	; a700 <CDWHCIDevice::FreeChannel(unsigned int)+0x80>
    a6e4:	e59f0018 	ldr	r0, [pc, #24]	; a704 <CDWHCIDevice::FreeChannel(unsigned int)+0x84>
    a6e8:	eb0067e5 	bl	24684 <assertion_failed>
    a6ec:	e59f2014 	ldr	r2, [pc, #20]	; a708 <CDWHCIDevice::FreeChannel(unsigned int)+0x88>
    a6f0:	e59f1008 	ldr	r1, [pc, #8]	; a700 <CDWHCIDevice::FreeChannel(unsigned int)+0x80>
    a6f4:	e59f0010 	ldr	r0, [pc, #16]	; a70c <CDWHCIDevice::FreeChannel(unsigned int)+0x8c>
    a6f8:	eb0067e1 	bl	24684 <assertion_failed>
    a6fc:	00000578 	.word	0x00000578
    a700:	0003ea28 	.word	0x0003ea28
    a704:	0003eaa8 	.word	0x0003eaa8
    a708:	0000057d 	.word	0x0000057d
    a70c:	0003eb00 	.word	0x0003eb00

0000a710 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>:
    a710:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a714:	e2515000 	subs	r5, r1, #0
    a718:	e24dd00c 	sub	sp, sp, #12
    a71c:	0a000039 	beq	a808 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xf8>
    a720:	e1a04000 	mov	r4, r0
    a724:	e1a07003 	mov	r7, r3
    a728:	e1a08002 	mov	r8, r2
    a72c:	ebffffa1 	bl	a5b8 <CDWHCIDevice::AllocateChannel()>
    a730:	e594300c 	ldr	r3, [r4, #12]
    a734:	e1a06000 	mov	r6, r0
    a738:	e1530000 	cmp	r3, r0
    a73c:	93a05000 	movls	r5, #0
    a740:	8a000002 	bhi	a750 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x40>
    a744:	e1a00005 	mov	r0, r5
    a748:	e28dd00c 	add	sp, sp, #12
    a74c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a750:	e3a00054 	mov	r0, #84	; 0x54
    a754:	eb000cd6 	bl	dab4 <CDWHCITransferStageData::operator new(unsigned int)>
    a758:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    a75c:	e58d7000 	str	r7, [sp]
    a760:	e58d3004 	str	r3, [sp, #4]
    a764:	e1a02005 	mov	r2, r5
    a768:	e1a03008 	mov	r3, r8
    a76c:	e1a01006 	mov	r1, r6
    a770:	e0848106 	add	r8, r4, r6, lsl #2
    a774:	e1a07000 	mov	r7, r0
    a778:	eb000b2b 	bl	d42c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>
    a77c:	e5989018 	ldr	r9, [r8, #24]
    a780:	e3590000 	cmp	r9, #0
    a784:	1a000030 	bne	a84c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x13c>
    a788:	e1a01006 	mov	r1, r6
    a78c:	e1a00004 	mov	r0, r4
    a790:	e5887018 	str	r7, [r8, #24]
    a794:	ebfffdbf 	bl	9e98 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    a798:	e1a00007 	mov	r0, r7
    a79c:	eb000c4c 	bl	d8d4 <CDWHCITransferStageData::IsSplit() const>
    a7a0:	e2501000 	subs	r1, r0, #0
    a7a4:	e1a00007 	mov	r0, r7
    a7a8:	0a000014 	beq	a800 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xf0>
    a7ac:	eb000b09 	bl	d3d8 <CDWHCITransferStageData::BeginSplitCycle()>
    a7b0:	e2505000 	subs	r5, r0, #0
    a7b4:	0a000017 	beq	a818 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x108>
    a7b8:	e3a01001 	mov	r1, #1
    a7bc:	e1a00007 	mov	r0, r7
    a7c0:	eb000afc 	bl	d3b8 <CDWHCITransferStageData::SetState(unsigned int)>
    a7c4:	e1a01009 	mov	r1, r9
    a7c8:	e1a00007 	mov	r0, r7
    a7cc:	eb000aed 	bl	d388 <CDWHCITransferStageData::SetSplitComplete(bool)>
    a7d0:	e1a00007 	mov	r0, r7
    a7d4:	eb000cb4 	bl	daac <CDWHCITransferStageData::GetFrameScheduler() const>
    a7d8:	e5903000 	ldr	r3, [r0]
    a7dc:	e5933008 	ldr	r3, [r3, #8]
    a7e0:	e12fff33 	blx	r3
    a7e4:	e3a05001 	mov	r5, #1
    a7e8:	e1a00004 	mov	r0, r4
    a7ec:	e1a01007 	mov	r1, r7
    a7f0:	ebfffee7 	bl	a394 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a7f4:	e1a00005 	mov	r0, r5
    a7f8:	e28dd00c 	add	sp, sp, #12
    a7fc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a800:	eb000aec 	bl	d3b8 <CDWHCITransferStageData::SetState(unsigned int)>
    a804:	eafffff6 	b	a7e4 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xd4>
    a808:	e59f204c 	ldr	r2, [pc, #76]	; a85c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x14c>
    a80c:	e59f104c 	ldr	r1, [pc, #76]	; a860 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x150>
    a810:	e59f004c 	ldr	r0, [pc, #76]	; a864 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x154>
    a814:	eb00679a 	bl	24684 <assertion_failed>
    a818:	e1a01006 	mov	r1, r6
    a81c:	e1a00004 	mov	r0, r4
    a820:	ebfffdbd 	bl	9f1c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a824:	e1a00007 	mov	r0, r7
    a828:	eb000a5b 	bl	d19c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    a82c:	e1a00007 	mov	r0, r7
    a830:	e3a01054 	mov	r1, #84	; 0x54
    a834:	eb000cb4 	bl	db0c <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    a838:	e1a01006 	mov	r1, r6
    a83c:	e1a00004 	mov	r0, r4
    a840:	e5885018 	str	r5, [r8, #24]
    a844:	ebffff8d 	bl	a680 <CDWHCIDevice::FreeChannel(unsigned int)>
    a848:	eaffffbd 	b	a744 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x34>
    a84c:	e59f2014 	ldr	r2, [pc, #20]	; a868 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x158>
    a850:	e59f1008 	ldr	r1, [pc, #8]	; a860 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x150>
    a854:	e59f0010 	ldr	r0, [pc, #16]	; a86c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x15c>
    a858:	eb006789 	bl	24684 <assertion_failed>
    a85c:	000002b6 	.word	0x000002b6
    a860:	0003ea28 	.word	0x0003ea28
    a864:	0003eb24 	.word	0x0003eb24
    a868:	000002c7 	.word	0x000002c7
    a86c:	0003eb30 	.word	0x0003eb30

0000a870 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
    a870:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    a874:	e21330ff 	ands	r3, r3, #255	; 0xff
    a878:	1a000020 	bne	a900 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x90>
    a87c:	e92d4070 	push	{r4, r5, r6, lr}
    a880:	e1a04001 	mov	r4, r1
    a884:	e24dd008 	sub	sp, sp, #8
    a888:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a88c:	e3510000 	cmp	r1, #0
    a890:	0a00001c 	beq	a908 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x98>
    a894:	e1a06000 	mov	r6, r0
    a898:	e1a00001 	mov	r0, r1
    a89c:	e1a05002 	mov	r5, r2
    a8a0:	eb0026b2 	bl	14370 <CUSBRequest::GetEndpoint() const>
    a8a4:	eb001294 	bl	f2fc <CUSBEndpoint::GetType() const>
    a8a8:	e3500001 	cmp	r0, #1
    a8ac:	1a000019 	bne	a918 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xa8>
    a8b0:	e1a00004 	mov	r0, r4
    a8b4:	eb0026ec 	bl	1446c <CUSBRequest::GetBufLen() const>
    a8b8:	e3500000 	cmp	r0, #0
    a8bc:	0a00001e 	beq	a93c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xcc>
    a8c0:	e3a01000 	mov	r1, #0
    a8c4:	e1a00004 	mov	r0, r4
    a8c8:	eb0026b2 	bl	14398 <CUSBRequest::SetStatus(int)>
    a8cc:	e1a00004 	mov	r0, r4
    a8d0:	eb0026a6 	bl	14370 <CUSBRequest::GetEndpoint() const>
    a8d4:	eb00128a 	bl	f304 <CUSBEndpoint::IsDirectionIn() const>
    a8d8:	e1a01004 	mov	r1, r4
    a8dc:	e1a02000 	mov	r2, r0
    a8e0:	e3a03000 	mov	r3, #0
    a8e4:	e1a00006 	mov	r0, r6
    a8e8:	e58d5000 	str	r5, [sp]
    a8ec:	ebffff87 	bl	a710 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    a8f0:	e3a03000 	mov	r3, #0
    a8f4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a8f8:	e28dd008 	add	sp, sp, #8
    a8fc:	e8bd8070 	pop	{r4, r5, r6, pc}
    a900:	e3a00000 	mov	r0, #0
    a904:	e12fff1e 	bx	lr
    a908:	e3a02f45 	mov	r2, #276	; 0x114
    a90c:	e59f1038 	ldr	r1, [pc, #56]	; a94c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    a910:	e59f0038 	ldr	r0, [pc, #56]	; a950 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    a914:	eb00675a 	bl	24684 <assertion_failed>
    a918:	e1a00004 	mov	r0, r4
    a91c:	eb002693 	bl	14370 <CUSBRequest::GetEndpoint() const>
    a920:	eb001275 	bl	f2fc <CUSBEndpoint::GetType() const>
    a924:	e3500002 	cmp	r0, #2
    a928:	0affffe0 	beq	a8b0 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x40>
    a92c:	e59f2020 	ldr	r2, [pc, #32]	; a954 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe4>
    a930:	e59f1014 	ldr	r1, [pc, #20]	; a94c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    a934:	e59f001c 	ldr	r0, [pc, #28]	; a958 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe8>
    a938:	eb006751 	bl	24684 <assertion_failed>
    a93c:	e59f2018 	ldr	r2, [pc, #24]	; a95c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xec>
    a940:	e59f1004 	ldr	r1, [pc, #4]	; a94c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    a944:	e59f0014 	ldr	r0, [pc, #20]	; a960 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xf0>
    a948:	eb00674d 	bl	24684 <assertion_failed>
    a94c:	0003ea28 	.word	0x0003ea28
    a950:	0003eb24 	.word	0x0003eb24
    a954:	00000115 	.word	0x00000115
    a958:	0003eb64 	.word	0x0003eb64
    a95c:	00000117 	.word	0x00000117
    a960:	0003eb4c 	.word	0x0003eb4c

0000a964 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>:
    a964:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a968:	e0808101 	add	r8, r0, r1, lsl #2
    a96c:	e5984018 	ldr	r4, [r8, #24]
    a970:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    a974:	e3540000 	cmp	r4, #0
    a978:	0a0000ac 	beq	ac30 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2cc>
    a97c:	e1a06000 	mov	r6, r0
    a980:	e1a00004 	mov	r0, r4
    a984:	e1a05001 	mov	r5, r1
    a988:	eb000c3d 	bl	da84 <CDWHCITransferStageData::GetURB() const>
    a98c:	e2507000 	subs	r7, r0, #0
    a990:	0a0000aa 	beq	ac40 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2dc>
    a994:	e1a00004 	mov	r0, r4
    a998:	eb000a8c 	bl	d3d0 <CDWHCITransferStageData::GetSubState() const>
    a99c:	e2503000 	subs	r3, r0, #0
    a9a0:	0a00003d 	beq	aa9c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x138>
    a9a4:	e3530001 	cmp	r3, #1
    a9a8:	1a000123 	bne	ae3c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4d8>
    a9ac:	e1a00004 	mov	r0, r4
    a9b0:	eb000bb8 	bl	d898 <CDWHCITransferStageData::GetDMAAddress() const>
    a9b4:	e1a09000 	mov	r9, r0
    a9b8:	e1a00004 	mov	r0, r4
    a9bc:	eb000bc0 	bl	d8c4 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a9c0:	e1a01000 	mov	r1, r0
    a9c4:	e1a00009 	mov	r0, r9
    a9c8:	eb0084a1 	bl	2bc54 <CleanAndInvalidateDataCacheRange>
    a9cc:	e59f1478 	ldr	r1, [pc, #1144]	; ae4c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4e8>
    a9d0:	e28d0010 	add	r0, sp, #16
    a9d4:	e0811285 	add	r1, r1, r5, lsl #5
    a9d8:	eb00088d 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a9dc:	e28d0010 	add	r0, sp, #16
    a9e0:	eb000894 	bl	cc38 <CDWHCIRegister::Read()>
    a9e4:	e59f1464 	ldr	r1, [pc, #1124]	; ae50 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4ec>
    a9e8:	e1a03285 	lsl	r3, r5, #5
    a9ec:	e0831001 	add	r1, r3, r1
    a9f0:	e28d001c 	add	r0, sp, #28
    a9f4:	eb000886 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a9f8:	e28d001c 	add	r0, sp, #28
    a9fc:	eb00088d 	bl	cc38 <CDWHCIRegister::Read()>
    aa00:	e3500002 	cmp	r0, #2
    aa04:	0a00006d 	beq	abc0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x25c>
    aa08:	e1a00004 	mov	r0, r4
    aa0c:	eb000a75 	bl	d3e8 <CDWHCITransferStageData::IsPeriodic() const>
    aa10:	e3500000 	cmp	r0, #0
    aa14:	1a0000e8 	bne	adbc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x458>
    aa18:	e28d001c 	add	r0, sp, #28
    aa1c:	eb000885 	bl	cc38 <CDWHCIRegister::Read()>
    aa20:	e1a01000 	mov	r1, r0
    aa24:	e28d0010 	add	r0, sp, #16
    aa28:	e58d100c 	str	r1, [sp, #12]
    aa2c:	eb000896 	bl	cc8c <CDWHCIRegister::Get() const>
    aa30:	e1a09000 	mov	r9, r0
    aa34:	e28d0010 	add	r0, sp, #16
    aa38:	eb000893 	bl	cc8c <CDWHCIRegister::Get() const>
    aa3c:	e59f2410 	ldr	r2, [pc, #1040]	; ae54 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f0>
    aa40:	e3c034ff 	bic	r3, r0, #-16777216	; 0xff000000
    aa44:	e00229a9 	and	r2, r2, r9, lsr #19
    aa48:	e59d100c 	ldr	r1, [sp, #12]
    aa4c:	e3c3373e 	bic	r3, r3, #16252928	; 0xf80000
    aa50:	e1a00004 	mov	r0, r4
    aa54:	eb0009e3 	bl	d1e8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    aa58:	e28d001c 	add	r0, sp, #28
    aa5c:	eb000874 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    aa60:	e28d0010 	add	r0, sp, #16
    aa64:	eb000872 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    aa68:	e1a00004 	mov	r0, r4
    aa6c:	eb000a53 	bl	d3c0 <CDWHCITransferStageData::GetState() const>
    aa70:	e3500001 	cmp	r0, #1
    aa74:	e1a09000 	mov	r9, r0
    aa78:	0a000060 	beq	ac00 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x29c>
    aa7c:	e3500002 	cmp	r0, #2
    aa80:	0a00002d 	beq	ab3c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1d8>
    aa84:	e3500000 	cmp	r0, #0
    aa88:	0a000008 	beq	aab0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x14c>
    aa8c:	e59f23c4 	ldr	r2, [pc, #964]	; ae58 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f4>
    aa90:	e59f13c4 	ldr	r1, [pc, #964]	; ae5c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f8>
    aa94:	e59f03c4 	ldr	r0, [pc, #964]	; ae60 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4fc>
    aa98:	eb0066f9 	bl	24684 <assertion_failed>
    aa9c:	e1a01004 	mov	r1, r4
    aaa0:	e1a00006 	mov	r0, r6
    aaa4:	ebfffd3d 	bl	9fa0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    aaa8:	e28dd02c 	add	sp, sp, #44	; 0x2c
    aaac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aab0:	e1a00004 	mov	r0, r4
    aab4:	eb000bce 	bl	d9f4 <CDWHCITransferStageData::GetTransactionStatus() const>
    aab8:	e59fb3a4 	ldr	fp, [pc, #932]	; ae64 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x500>
    aabc:	e1a0a000 	mov	sl, r0
    aac0:	e00bb000 	and	fp, fp, r0
    aac4:	e35b0000 	cmp	fp, #0
    aac8:	1a0000b8 	bne	adb0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x44c>
    aacc:	e3100050 	tst	r0, #80	; 0x50
    aad0:	0a000042 	beq	abe0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x27c>
    aad4:	e1a00004 	mov	r0, r4
    aad8:	eb000a42 	bl	d3e8 <CDWHCITransferStageData::IsPeriodic() const>
    aadc:	e3500000 	cmp	r0, #0
    aae0:	0a00003e 	beq	abe0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x27c>
    aae4:	e1a00004 	mov	r0, r4
    aae8:	eb000bd5 	bl	da44 <CDWHCITransferStageData::IsTimeout() const>
    aaec:	e3500000 	cmp	r0, #0
    aaf0:	1a00001e 	bne	ab70 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x20c>
    aaf4:	e3a01003 	mov	r1, #3
    aaf8:	e1a00004 	mov	r0, r4
    aafc:	eb000a2d 	bl	d3b8 <CDWHCITransferStageData::SetState(unsigned int)>
    ab00:	e1a00007 	mov	r0, r7
    ab04:	eb002619 	bl	14370 <CUSBRequest::GetEndpoint() const>
    ab08:	eb001205 	bl	f324 <CUSBEndpoint::GetInterval() const>
    ab0c:	e0800100 	add	r0, r0, r0, lsl #2
    ab10:	e59f3350 	ldr	r3, [pc, #848]	; ae68 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x504>
    ab14:	e0800100 	add	r0, r0, r0, lsl #2
    ab18:	e1a01100 	lsl	r1, r0, #2
    ab1c:	e0813193 	umull	r3, r1, r3, r1
    ab20:	e58d6000 	str	r6, [sp]
    ab24:	e1a03004 	mov	r3, r4
    ab28:	e5960008 	ldr	r0, [r6, #8]
    ab2c:	e59f2338 	ldr	r2, [pc, #824]	; ae6c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x508>
    ab30:	e1a01321 	lsr	r1, r1, #6
    ab34:	eb007adc 	bl	296ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    ab38:	eaffffda 	b	aaa8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>
    ab3c:	e1a00004 	mov	r0, r4
    ab40:	eb000bab 	bl	d9f4 <CDWHCITransferStageData::GetTransactionStatus() const>
    ab44:	e59f3318 	ldr	r3, [pc, #792]	; ae64 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x500>
    ab48:	e1a09000 	mov	r9, r0
    ab4c:	e0033000 	and	r3, r3, r0
    ab50:	e3530000 	cmp	r3, #0
    ab54:	0a00003d 	beq	ac50 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2ec>
    ab58:	eb006fb1 	bl	26a24 <CLogger::Get()>
    ab5c:	e58d9000 	str	r9, [sp]
    ab60:	e3a02001 	mov	r2, #1
    ab64:	e59f3304 	ldr	r3, [pc, #772]	; ae70 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x50c>
    ab68:	e59f1304 	ldr	r1, [pc, #772]	; ae74 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x510>
    ab6c:	eb006eee 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ab70:	e3a01000 	mov	r1, #0
    ab74:	e1a00007 	mov	r0, r7
    ab78:	eb002606 	bl	14398 <CUSBRequest::SetStatus(int)>
    ab7c:	e1a01005 	mov	r1, r5
    ab80:	e1a00006 	mov	r0, r6
    ab84:	ebfffce4 	bl	9f1c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    ab88:	e1a00004 	mov	r0, r4
    ab8c:	eb000982 	bl	d19c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    ab90:	e1a00004 	mov	r0, r4
    ab94:	e3a01054 	mov	r1, #84	; 0x54
    ab98:	eb000bdb 	bl	db0c <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    ab9c:	e3a03000 	mov	r3, #0
    aba0:	e1a01005 	mov	r1, r5
    aba4:	e1a00006 	mov	r0, r6
    aba8:	e5883018 	str	r3, [r8, #24]
    abac:	ebfffeb3 	bl	a680 <CDWHCIDevice::FreeChannel(unsigned int)>
    abb0:	e1a00007 	mov	r0, r7
    abb4:	eb002639 	bl	144a0 <CUSBRequest::CallCompletionRoutine()>
    abb8:	e28dd02c 	add	sp, sp, #44	; 0x2c
    abbc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abc0:	e1a01004 	mov	r1, r4
    abc4:	e1a00006 	mov	r0, r6
    abc8:	ebfffdf1 	bl	a394 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    abcc:	e28d001c 	add	r0, sp, #28
    abd0:	eb000817 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    abd4:	e28d0010 	add	r0, sp, #16
    abd8:	eb000815 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    abdc:	eaffffb1 	b	aaa8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>
    abe0:	e1a00004 	mov	r0, r4
    abe4:	eb000b29 	bl	d890 <CDWHCITransferStageData::IsStatusStage() const>
    abe8:	e3500000 	cmp	r0, #0
    abec:	0a000069 	beq	ad98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x434>
    abf0:	e3a01001 	mov	r1, #1
    abf4:	e1a00007 	mov	r0, r7
    abf8:	eb0025e6 	bl	14398 <CUSBRequest::SetStatus(int)>
    abfc:	eaffffde 	b	ab7c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x218>
    ac00:	e1a00004 	mov	r0, r4
    ac04:	eb000b7a 	bl	d9f4 <CDWHCITransferStageData::GetTransactionStatus() const>
    ac08:	e59f3268 	ldr	r3, [pc, #616]	; ae78 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x514>
    ac0c:	e1a0a000 	mov	sl, r0
    ac10:	e0033000 	and	r3, r3, r0
    ac14:	e3530000 	cmp	r3, #0
    ac18:	0a000033 	beq	acec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x388>
    ac1c:	eb006f80 	bl	26a24 <CLogger::Get()>
    ac20:	e1a02009 	mov	r2, r9
    ac24:	e59f3244 	ldr	r3, [pc, #580]	; ae70 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x50c>
    ac28:	e58da000 	str	sl, [sp]
    ac2c:	eaffffcd 	b	ab68 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x204>
    ac30:	e59f2244 	ldr	r2, [pc, #580]	; ae7c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x518>
    ac34:	e59f1220 	ldr	r1, [pc, #544]	; ae5c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f8>
    ac38:	e59f0240 	ldr	r0, [pc, #576]	; ae80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x51c>
    ac3c:	eb006690 	bl	24684 <assertion_failed>
    ac40:	e59f223c 	ldr	r2, [pc, #572]	; ae84 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x520>
    ac44:	e59f1210 	ldr	r1, [pc, #528]	; ae5c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f8>
    ac48:	e59f0238 	ldr	r0, [pc, #568]	; ae88 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x524>
    ac4c:	eb00668c 	bl	24684 <assertion_failed>
    ac50:	e1a00004 	mov	r0, r4
    ac54:	eb000b94 	bl	daac <CDWHCITransferStageData::GetFrameScheduler() const>
    ac58:	e5903000 	ldr	r3, [r0]
    ac5c:	e1a01009 	mov	r1, r9
    ac60:	e5933010 	ldr	r3, [r3, #16]
    ac64:	e12fff33 	blx	r3
    ac68:	e1a00004 	mov	r0, r4
    ac6c:	eb000b8e 	bl	daac <CDWHCITransferStageData::GetFrameScheduler() const>
    ac70:	e5903000 	ldr	r3, [r0]
    ac74:	e593300c 	ldr	r3, [r3, #12]
    ac78:	e12fff33 	blx	r3
    ac7c:	e3500000 	cmp	r0, #0
    ac80:	1a000035 	bne	ad5c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3f8>
    ac84:	e1a00004 	mov	r0, r4
    ac88:	eb000b64 	bl	da20 <CDWHCITransferStageData::IsStageComplete() const>
    ac8c:	e2509000 	subs	r9, r0, #0
    ac90:	1a000035 	bne	ad6c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x408>
    ac94:	e1a00004 	mov	r0, r4
    ac98:	eb0009ce 	bl	d3d8 <CDWHCITransferStageData::BeginSplitCycle()>
    ac9c:	e250a000 	subs	sl, r0, #0
    aca0:	1a00001e 	bne	ad20 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3bc>
    aca4:	e1a0100a 	mov	r1, sl
    aca8:	e1a00007 	mov	r0, r7
    acac:	eb0025b9 	bl	14398 <CUSBRequest::SetStatus(int)>
    acb0:	e1a01005 	mov	r1, r5
    acb4:	e1a00006 	mov	r0, r6
    acb8:	ebfffc97 	bl	9f1c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    acbc:	e1a00004 	mov	r0, r4
    acc0:	eb000935 	bl	d19c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    acc4:	e1a00004 	mov	r0, r4
    acc8:	e3a01054 	mov	r1, #84	; 0x54
    accc:	eb000b8e 	bl	db0c <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    acd0:	e588a018 	str	sl, [r8, #24]
    acd4:	e1a00006 	mov	r0, r6
    acd8:	e1a01005 	mov	r1, r5
    acdc:	ebfffe67 	bl	a680 <CDWHCIDevice::FreeChannel(unsigned int)>
    ace0:	e1a00007 	mov	r0, r7
    ace4:	eb0025ed 	bl	144a0 <CUSBRequest::CallCompletionRoutine()>
    ace8:	eaffff6e 	b	aaa8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>
    acec:	e1a00004 	mov	r0, r4
    acf0:	eb000b6d 	bl	daac <CDWHCITransferStageData::GetFrameScheduler() const>
    acf4:	e5903000 	ldr	r3, [r0]
    acf8:	e1a0100a 	mov	r1, sl
    acfc:	e5933010 	ldr	r3, [r3, #16]
    ad00:	e12fff33 	blx	r3
    ad04:	e1a00004 	mov	r0, r4
    ad08:	e3a01002 	mov	r1, #2
    ad0c:	eb0009a9 	bl	d3b8 <CDWHCITransferStageData::SetState(unsigned int)>
    ad10:	e1a01009 	mov	r1, r9
    ad14:	e1a00004 	mov	r0, r4
    ad18:	eb00099a 	bl	d388 <CDWHCITransferStageData::SetSplitComplete(bool)>
    ad1c:	eaffffd1 	b	ac68 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x304>
    ad20:	e1a00004 	mov	r0, r4
    ad24:	eb0009af 	bl	d3e8 <CDWHCITransferStageData::IsPeriodic() const>
    ad28:	e250a000 	subs	sl, r0, #0
    ad2c:	1a000031 	bne	adf8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x494>
    ad30:	e3a01001 	mov	r1, #1
    ad34:	e1a00004 	mov	r0, r4
    ad38:	eb00099e 	bl	d3b8 <CDWHCITransferStageData::SetState(unsigned int)>
    ad3c:	e1a0100a 	mov	r1, sl
    ad40:	e1a00004 	mov	r0, r4
    ad44:	eb00098f 	bl	d388 <CDWHCITransferStageData::SetSplitComplete(bool)>
    ad48:	e1a00004 	mov	r0, r4
    ad4c:	eb000b56 	bl	daac <CDWHCITransferStageData::GetFrameScheduler() const>
    ad50:	e5903000 	ldr	r3, [r0]
    ad54:	e5933008 	ldr	r3, [r3, #8]
    ad58:	e12fff33 	blx	r3
    ad5c:	e1a01004 	mov	r1, r4
    ad60:	e1a00006 	mov	r0, r6
    ad64:	ebfffd8a 	bl	a394 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    ad68:	eaffff4e 	b	aaa8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>
    ad6c:	e1a01005 	mov	r1, r5
    ad70:	e1a00006 	mov	r0, r6
    ad74:	ebfffc68 	bl	9f1c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    ad78:	e1a00004 	mov	r0, r4
    ad7c:	eb000ac3 	bl	d890 <CDWHCITransferStageData::IsStatusStage() const>
    ad80:	e3500000 	cmp	r0, #0
    ad84:	0a000015 	beq	ade0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x47c>
    ad88:	e3a01001 	mov	r1, #1
    ad8c:	e1a00007 	mov	r0, r7
    ad90:	eb002580 	bl	14398 <CUSBRequest::SetStatus(int)>
    ad94:	eaffff7b 	b	ab88 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x224>
    ad98:	e1a00004 	mov	r0, r4
    ad9c:	eb000b23 	bl	da30 <CDWHCITransferStageData::GetResultLen() const>
    ada0:	e1a01000 	mov	r1, r0
    ada4:	e1a00007 	mov	r0, r7
    ada8:	eb00257c 	bl	143a0 <CUSBRequest::SetResultLen(unsigned int)>
    adac:	eaffff8f 	b	abf0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x28c>
    adb0:	eb006f1b 	bl	26a24 <CLogger::Get()>
    adb4:	e58da000 	str	sl, [sp]
    adb8:	eaffff68 	b	ab60 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1fc>
    adbc:	e28d0010 	add	r0, sp, #16
    adc0:	eb0007b1 	bl	cc8c <CDWHCIRegister::Get() const>
    adc4:	e2200206 	eor	r0, r0, #1610612736	; 0x60000000
    adc8:	e3100206 	tst	r0, #1610612736	; 0x60000000
    adcc:	1affff11 	bne	aa18 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0xb4>
    add0:	e59f20b4 	ldr	r2, [pc, #180]	; ae8c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x528>
    add4:	e59f1080 	ldr	r1, [pc, #128]	; ae5c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f8>
    add8:	e59f00b0 	ldr	r0, [pc, #176]	; ae90 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x52c>
    addc:	eb006628 	bl	24684 <assertion_failed>
    ade0:	e1a00004 	mov	r0, r4
    ade4:	eb000b11 	bl	da30 <CDWHCITransferStageData::GetResultLen() const>
    ade8:	e1a01000 	mov	r1, r0
    adec:	e1a00007 	mov	r0, r7
    adf0:	eb00256a 	bl	143a0 <CUSBRequest::SetResultLen(unsigned int)>
    adf4:	eaffffe3 	b	ad88 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x424>
    adf8:	e1a00004 	mov	r0, r4
    adfc:	eb000b10 	bl	da44 <CDWHCITransferStageData::IsTimeout() const>
    ae00:	e3500000 	cmp	r0, #0
    ae04:	0affff3a 	beq	aaf4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x190>
    ae08:	e1a01005 	mov	r1, r5
    ae0c:	e1a00006 	mov	r0, r6
    ae10:	ebfffc41 	bl	9f1c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    ae14:	e1a01009 	mov	r1, r9
    ae18:	e1a00007 	mov	r0, r7
    ae1c:	eb00255d 	bl	14398 <CUSBRequest::SetStatus(int)>
    ae20:	e1a00004 	mov	r0, r4
    ae24:	eb0008dc 	bl	d19c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    ae28:	e1a00004 	mov	r0, r4
    ae2c:	e3a01054 	mov	r1, #84	; 0x54
    ae30:	eb000b35 	bl	db0c <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    ae34:	e5889018 	str	r9, [r8, #24]
    ae38:	eaffffa5 	b	acd4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x370>
    ae3c:	e59f2050 	ldr	r2, [pc, #80]	; ae94 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x530>
    ae40:	e59f1014 	ldr	r1, [pc, #20]	; ae5c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f8>
    ae44:	e59f0014 	ldr	r0, [pc, #20]	; ae60 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4fc>
    ae48:	eb00660d 	bl	24684 <assertion_failed>
    ae4c:	20980510 	.word	0x20980510
    ae50:	20980508 	.word	0x20980508
    ae54:	000003ff 	.word	0x000003ff
    ae58:	000004cc 	.word	0x000004cc
    ae5c:	0003ea28 	.word	0x0003ea28
    ae60:	0003f63c 	.word	0x0003f63c
    ae64:	0000078c 	.word	0x0000078c
    ae68:	10624dd3 	.word	0x10624dd3
    ae6c:	0000a568 	.word	0x0000a568
    ae70:	0003ec50 	.word	0x0003ec50
    ae74:	0003efa4 	.word	0x0003efa4
    ae78:	000007dc 	.word	0x000007dc
    ae7c:	000003c1 	.word	0x000003c1
    ae80:	0003ea98 	.word	0x0003ea98
    ae84:	000003c3 	.word	0x000003c3
    ae88:	0003eb24 	.word	0x0003eb24
    ae8c:	000003e1 	.word	0x000003e1
    ae90:	0003ebd8 	.word	0x0003ebd8
    ae94:	000003eb 	.word	0x000003eb

0000ae98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    ae98:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    ae9c:	e3530000 	cmp	r3, #0
    aea0:	112fff1e 	bxne	lr
    aea4:	eafffeae 	b	a964 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>

0000aea8 <CDWHCIDevice::InterruptHandler()>:
    aea8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    aeac:	e3a04000 	mov	r4, #0
    aeb0:	e1a06000 	mov	r6, r0
    aeb4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    aeb8:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    aebc:	e59f10dc 	ldr	r1, [pc, #220]	; afa0 <CDWHCIDevice::InterruptHandler()+0xf8>
    aec0:	e28d0004 	add	r0, sp, #4
    aec4:	eb000752 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aec8:	e28d0004 	add	r0, sp, #4
    aecc:	eb000759 	bl	cc38 <CDWHCIRegister::Read()>
    aed0:	e28d0004 	add	r0, sp, #4
    aed4:	eb00076c 	bl	cc8c <CDWHCIRegister::Get() const>
    aed8:	e3100402 	tst	r0, #33554432	; 0x2000000
    aedc:	1a000007 	bne	af00 <CDWHCIDevice::InterruptHandler()+0x58>
    aee0:	e28d0004 	add	r0, sp, #4
    aee4:	eb00075a 	bl	cc54 <CDWHCIRegister::Write()>
    aee8:	e3a03000 	mov	r3, #0
    aeec:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    aef0:	e28d0004 	add	r0, sp, #4
    aef4:	eb00074e 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    aef8:	e28dd02c 	add	sp, sp, #44	; 0x2c
    aefc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    af00:	e59f109c 	ldr	r1, [pc, #156]	; afa4 <CDWHCIDevice::InterruptHandler()+0xfc>
    af04:	e28d0010 	add	r0, sp, #16
    af08:	eb000741 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    af0c:	e28d0010 	add	r0, sp, #16
    af10:	eb000748 	bl	cc38 <CDWHCIRegister::Read()>
    af14:	e28d0010 	add	r0, sp, #16
    af18:	eb00074d 	bl	cc54 <CDWHCIRegister::Write()>
    af1c:	e596300c 	ldr	r3, [r6, #12]
    af20:	e1530004 	cmp	r3, r4
    af24:	0a00001a 	beq	af94 <CDWHCIDevice::InterruptHandler()+0xec>
    af28:	e3a05001 	mov	r5, #1
    af2c:	e59f7074 	ldr	r7, [pc, #116]	; afa8 <CDWHCIDevice::InterruptHandler()+0x100>
    af30:	ea000004 	b	af48 <CDWHCIDevice::InterruptHandler()+0xa0>
    af34:	e596300c 	ldr	r3, [r6, #12]
    af38:	e2844001 	add	r4, r4, #1
    af3c:	e1530004 	cmp	r3, r4
    af40:	e1a05085 	lsl	r5, r5, #1
    af44:	9a000012 	bls	af94 <CDWHCIDevice::InterruptHandler()+0xec>
    af48:	e28d0010 	add	r0, sp, #16
    af4c:	eb00074e 	bl	cc8c <CDWHCIRegister::Get() const>
    af50:	e1100005 	tst	r0, r5
    af54:	0afffff6 	beq	af34 <CDWHCIDevice::InterruptHandler()+0x8c>
    af58:	e3a02000 	mov	r2, #0
    af5c:	e0871284 	add	r1, r7, r4, lsl #5
    af60:	e28d001c 	add	r0, sp, #28
    af64:	eb00072e 	bl	cc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    af68:	e28d001c 	add	r0, sp, #28
    af6c:	eb000738 	bl	cc54 <CDWHCIRegister::Write()>
    af70:	e5d63081 	ldrb	r3, [r6, #129]	; 0x81
    af74:	e3530000 	cmp	r3, #0
    af78:	1a000002 	bne	af88 <CDWHCIDevice::InterruptHandler()+0xe0>
    af7c:	e1a01004 	mov	r1, r4
    af80:	e1a00006 	mov	r0, r6
    af84:	ebfffe76 	bl	a964 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>
    af88:	e28d001c 	add	r0, sp, #28
    af8c:	eb000728 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    af90:	eaffffe7 	b	af34 <CDWHCIDevice::InterruptHandler()+0x8c>
    af94:	e28d0010 	add	r0, sp, #16
    af98:	eb000725 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    af9c:	eaffffcf 	b	aee0 <CDWHCIDevice::InterruptHandler()+0x38>
    afa0:	20980014 	.word	0x20980014
    afa4:	20980414 	.word	0x20980414
    afa8:	2098050c 	.word	0x2098050c

0000afac <CDWHCIDevice::InterruptStub(void*)>:
    afac:	e3500000 	cmp	r0, #0
    afb0:	0a000000 	beq	afb8 <CDWHCIDevice::InterruptStub(void*)+0xc>
    afb4:	eaffffbb 	b	aea8 <CDWHCIDevice::InterruptHandler()>
    afb8:	e92d4010 	push	{r4, lr}
    afbc:	e59f2008 	ldr	r2, [pc, #8]	; afcc <CDWHCIDevice::InterruptStub(void*)+0x20>
    afc0:	e59f1008 	ldr	r1, [pc, #8]	; afd0 <CDWHCIDevice::InterruptStub(void*)+0x24>
    afc4:	e59f0008 	ldr	r0, [pc, #8]	; afd4 <CDWHCIDevice::InterruptStub(void*)+0x28>
    afc8:	eb0065ad 	bl	24684 <assertion_failed>
    afcc:	00000532 	.word	0x00000532
    afd0:	0003ea28 	.word	0x0003ea28
    afd4:	0003ea38 	.word	0x0003ea38

0000afd8 <CDWHCIDevice::AllocateWaitBlock()>:
    afd8:	e92d4070 	push	{r4, r5, r6, lr}
    afdc:	e1a05000 	mov	r5, r0
    afe0:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    afe4:	e3500000 	cmp	r0, #0
    afe8:	1a000014 	bne	b040 <CDWHCIDevice::AllocateWaitBlock()+0x68>
    afec:	e3a04000 	mov	r4, #0
    aff0:	e3a03001 	mov	r3, #1
    aff4:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    aff8:	e1120003 	tst	r2, r3
    affc:	0a000007 	beq	b020 <CDWHCIDevice::AllocateWaitBlock()+0x48>
    b000:	e2844001 	add	r4, r4, #1
    b004:	e3540010 	cmp	r4, #16
    b008:	e1a03083 	lsl	r3, r3, #1
    b00c:	1afffff8 	bne	aff4 <CDWHCIDevice::AllocateWaitBlock()+0x1c>
    b010:	e3500000 	cmp	r0, #0
    b014:	1a000006 	bne	b034 <CDWHCIDevice::AllocateWaitBlock()+0x5c>
    b018:	e1a00004 	mov	r0, r4
    b01c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b020:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    b024:	e3500000 	cmp	r0, #0
    b028:	e1823003 	orr	r3, r2, r3
    b02c:	e585306c 	str	r3, [r5, #108]	; 0x6c
    b030:	0afffff8 	beq	b018 <CDWHCIDevice::AllocateWaitBlock()+0x40>
    b034:	eb0082f0 	bl	2bbfc <LeaveCritical>
    b038:	e1a00004 	mov	r0, r4
    b03c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b040:	eb0082c3 	bl	2bb54 <EnterCritical>
    b044:	e5950070 	ldr	r0, [r5, #112]	; 0x70
    b048:	eaffffe7 	b	afec <CDWHCIDevice::AllocateWaitBlock()+0x14>

0000b04c <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    b04c:	e351000f 	cmp	r1, #15
    b050:	e92d4070 	push	{r4, r5, r6, lr}
    b054:	8a000012 	bhi	b0a4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x58>
    b058:	e3a05001 	mov	r5, #1
    b05c:	e1a04000 	mov	r4, r0
    b060:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    b064:	e1a05115 	lsl	r5, r5, r1
    b068:	e3500000 	cmp	r0, #0
    b06c:	1a00000a 	bne	b09c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x50>
    b070:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    b074:	e1130005 	tst	r3, r5
    b078:	0a00000d 	beq	b0b4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x68>
    b07c:	e594106c 	ldr	r1, [r4, #108]	; 0x6c
    b080:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    b084:	e1c11005 	bic	r1, r1, r5
    b088:	e3530000 	cmp	r3, #0
    b08c:	e584106c 	str	r1, [r4, #108]	; 0x6c
    b090:	08bd8070 	popeq	{r4, r5, r6, pc}
    b094:	e8bd4070 	pop	{r4, r5, r6, lr}
    b098:	ea0082d7 	b	2bbfc <LeaveCritical>
    b09c:	eb0082ac 	bl	2bb54 <EnterCritical>
    b0a0:	eafffff2 	b	b070 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x24>
    b0a4:	e59f2018 	ldr	r2, [pc, #24]	; b0c4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x78>
    b0a8:	e59f1018 	ldr	r1, [pc, #24]	; b0c8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x7c>
    b0ac:	e59f0018 	ldr	r0, [pc, #24]	; b0cc <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x80>
    b0b0:	eb006573 	bl	24684 <assertion_failed>
    b0b4:	e59f2014 	ldr	r2, [pc, #20]	; b0d0 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x84>
    b0b8:	e59f1008 	ldr	r1, [pc, #8]	; b0c8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x7c>
    b0bc:	e59f0010 	ldr	r0, [pc, #16]	; b0d4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x88>
    b0c0:	eb00656f 	bl	24684 <assertion_failed>
    b0c4:	0000059d 	.word	0x0000059d
    b0c8:	0003ea28 	.word	0x0003ea28
    b0cc:	0003ea44 	.word	0x0003ea44
    b0d0:	000005a2 	.word	0x000005a2
    b0d4:	0003ec74 	.word	0x0003ec74

0000b0d8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>:
    b0d8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    b0dc:	e24dd00c 	sub	sp, sp, #12
    b0e0:	e1a08001 	mov	r8, r1
    b0e4:	e1a05002 	mov	r5, r2
    b0e8:	e1a09003 	mov	r9, r3
    b0ec:	e1a07000 	mov	r7, r0
    b0f0:	ebffffb8 	bl	afd8 <CDWHCIDevice::AllocateWaitBlock()>
    b0f4:	e350000f 	cmp	r0, #15
    b0f8:	8a000023 	bhi	b18c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xb4>
    b0fc:	e3580000 	cmp	r8, #0
    b100:	0a00002c 	beq	b1b8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xe0>
    b104:	e1a04000 	mov	r4, r0
    b108:	e1a03007 	mov	r3, r7
    b10c:	e1a02000 	mov	r2, r0
    b110:	e59f10c0 	ldr	r1, [pc, #192]	; b1d8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x100>
    b114:	e1a00008 	mov	r0, r8
    b118:	e0876004 	add	r6, r7, r4
    b11c:	eb0024d4 	bl	14474 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    b120:	e5d6305c 	ldrb	r3, [r6, #92]	; 0x5c
    b124:	e3530000 	cmp	r3, #0
    b128:	1a000026 	bne	b1c8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xf0>
    b12c:	e3a01001 	mov	r1, #1
    b130:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    b134:	e1a02005 	mov	r2, r5
    b138:	e58d3000 	str	r3, [sp]
    b13c:	e1a00007 	mov	r0, r7
    b140:	e5c6105c 	strb	r1, [r6, #92]	; 0x5c
    b144:	e1a03009 	mov	r3, r9
    b148:	e1a01008 	mov	r1, r8
    b14c:	ebfffd6f 	bl	a710 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    b150:	e2505000 	subs	r5, r0, #0
    b154:	0a000010 	beq	b19c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xc4>
    b158:	e5d6305c 	ldrb	r3, [r6, #92]	; 0x5c
    b15c:	e3530000 	cmp	r3, #0
    b160:	1afffffc 	bne	b158 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x80>
    b164:	e1a01004 	mov	r1, r4
    b168:	e1a00007 	mov	r0, r7
    b16c:	ebffffb6 	bl	b04c <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b170:	e1a00008 	mov	r0, r8
    b174:	eb00248b 	bl	143a8 <CUSBRequest::GetStatus() const>
    b178:	e2505000 	subs	r5, r0, #0
    b17c:	13a05001 	movne	r5, #1
    b180:	e1a00005 	mov	r0, r5
    b184:	e28dd00c 	add	sp, sp, #12
    b188:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b18c:	e3a05000 	mov	r5, #0
    b190:	e1a00005 	mov	r0, r5
    b194:	e28dd00c 	add	sp, sp, #12
    b198:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b19c:	e1a00007 	mov	r0, r7
    b1a0:	e1a01004 	mov	r1, r4
    b1a4:	e5c6505c 	strb	r5, [r6, #92]	; 0x5c
    b1a8:	ebffffa7 	bl	b04c <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b1ac:	e1a00005 	mov	r0, r5
    b1b0:	e28dd00c 	add	sp, sp, #12
    b1b4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b1b8:	e3a02e29 	mov	r2, #656	; 0x290
    b1bc:	e59f1018 	ldr	r1, [pc, #24]	; b1dc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    b1c0:	e59f0018 	ldr	r0, [pc, #24]	; b1e0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x108>
    b1c4:	eb00652e 	bl	24684 <assertion_failed>
    b1c8:	e59f2014 	ldr	r2, [pc, #20]	; b1e4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x10c>
    b1cc:	e59f1008 	ldr	r1, [pc, #8]	; b1dc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    b1d0:	e59f0010 	ldr	r0, [pc, #16]	; b1e8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x110>
    b1d4:	eb00652a 	bl	24684 <assertion_failed>
    b1d8:	00009ad4 	.word	0x00009ad4
    b1dc:	0003ea28 	.word	0x0003ea28
    b1e0:	0003eb24 	.word	0x0003eb24
    b1e4:	00000293 	.word	0x00000293
    b1e8:	0003ec9c 	.word	0x0003ec9c

0000b1ec <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
    b1ec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b1f0:	e5d0c081 	ldrb	ip, [r0, #129]	; 0x81
    b1f4:	e1a04001 	mov	r4, r1
    b1f8:	e21c10ff 	ands	r1, ip, #255	; 0xff
    b1fc:	e24dd00c 	sub	sp, sp, #12
    b200:	1a000022 	bne	b290 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b204:	ee071f9a 	mcr	15, 0, r1, cr7, cr10, {4}
    b208:	e3540000 	cmp	r4, #0
    b20c:	0a000070 	beq	b3d4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1e8>
    b210:	e1a06000 	mov	r6, r0
    b214:	e1a00004 	mov	r0, r4
    b218:	e1a05002 	mov	r5, r2
    b21c:	eb00245d 	bl	14398 <CUSBRequest::SetStatus(int)>
    b220:	e1a00004 	mov	r0, r4
    b224:	eb002451 	bl	14370 <CUSBRequest::GetEndpoint() const>
    b228:	eb001033 	bl	f2fc <CUSBEndpoint::GetType() const>
    b22c:	e3500000 	cmp	r0, #0
    b230:	1a000019 	bne	b29c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xb0>
    b234:	e3550000 	cmp	r5, #0
    b238:	1a000069 	bne	b3e4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1f8>
    b23c:	e1a00004 	mov	r0, r4
    b240:	eb002466 	bl	143e0 <CUSBRequest::GetSetupData()>
    b244:	e3500000 	cmp	r0, #0
    b248:	0a000069 	beq	b3f4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x208>
    b24c:	e1d030d0 	ldrsb	r3, [r0]
    b250:	e1a00004 	mov	r0, r4
    b254:	e3530000 	cmp	r3, #0
    b258:	ba000028 	blt	b300 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x114>
    b25c:	eb002482 	bl	1446c <CUSBRequest::GetBufLen() const>
    b260:	e2507000 	subs	r7, r0, #0
    b264:	1a000041 	bne	b370 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x184>
    b268:	e1a03007 	mov	r3, r7
    b26c:	e1a02007 	mov	r2, r7
    b270:	e1a01004 	mov	r1, r4
    b274:	e1a00006 	mov	r0, r6
    b278:	e58d7000 	str	r7, [sp]
    b27c:	ebffff95 	bl	b0d8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b280:	e3500000 	cmp	r0, #0
    b284:	13a03001 	movne	r3, #1
    b288:	158d7000 	strne	r7, [sp]
    b28c:	1a000049 	bne	b3b8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1cc>
    b290:	e3a00000 	mov	r0, #0
    b294:	e28dd00c 	add	sp, sp, #12
    b298:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b29c:	e1a00004 	mov	r0, r4
    b2a0:	eb002432 	bl	14370 <CUSBRequest::GetEndpoint() const>
    b2a4:	eb001014 	bl	f2fc <CUSBEndpoint::GetType() const>
    b2a8:	e3500001 	cmp	r0, #1
    b2ac:	1a000054 	bne	b404 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x218>
    b2b0:	e1a00004 	mov	r0, r4
    b2b4:	eb00246c 	bl	1446c <CUSBRequest::GetBufLen() const>
    b2b8:	e3500000 	cmp	r0, #0
    b2bc:	0a000059 	beq	b428 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x23c>
    b2c0:	e1a00004 	mov	r0, r4
    b2c4:	eb002429 	bl	14370 <CUSBRequest::GetEndpoint() const>
    b2c8:	eb00100d 	bl	f304 <CUSBEndpoint::IsDirectionIn() const>
    b2cc:	e1a01004 	mov	r1, r4
    b2d0:	e1a02000 	mov	r2, r0
    b2d4:	e3a03000 	mov	r3, #0
    b2d8:	e1a00006 	mov	r0, r6
    b2dc:	e58d5000 	str	r5, [sp]
    b2e0:	ebffff7c 	bl	b0d8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b2e4:	e3500000 	cmp	r0, #0
    b2e8:	0affffe8 	beq	b290 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b2ec:	e3a03000 	mov	r3, #0
    b2f0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b2f4:	e3a00001 	mov	r0, #1
    b2f8:	e28dd00c 	add	sp, sp, #12
    b2fc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b300:	eb002459 	bl	1446c <CUSBRequest::GetBufLen() const>
    b304:	e3500000 	cmp	r0, #0
    b308:	0a00004a 	beq	b438 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x24c>
    b30c:	e1a03005 	mov	r3, r5
    b310:	e1a02005 	mov	r2, r5
    b314:	e1a01004 	mov	r1, r4
    b318:	e1a00006 	mov	r0, r6
    b31c:	e58d5000 	str	r5, [sp]
    b320:	ebffff6c 	bl	b0d8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b324:	e3500000 	cmp	r0, #0
    b328:	0affffd8 	beq	b290 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b32c:	e1a03005 	mov	r3, r5
    b330:	e3a02001 	mov	r2, #1
    b334:	e1a01004 	mov	r1, r4
    b338:	e1a00006 	mov	r0, r6
    b33c:	e58d5000 	str	r5, [sp]
    b340:	ebffff64 	bl	b0d8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b344:	e3500000 	cmp	r0, #0
    b348:	0affffd0 	beq	b290 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b34c:	e1a02005 	mov	r2, r5
    b350:	e1a01004 	mov	r1, r4
    b354:	e1a00006 	mov	r0, r6
    b358:	e3a03001 	mov	r3, #1
    b35c:	e58d5000 	str	r5, [sp]
    b360:	ebffff5c 	bl	b0d8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b364:	e3500000 	cmp	r0, #0
    b368:	1affffdf 	bne	b2ec <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x100>
    b36c:	eaffffc7 	b	b290 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b370:	e1a03005 	mov	r3, r5
    b374:	e1a02005 	mov	r2, r5
    b378:	e1a01004 	mov	r1, r4
    b37c:	e1a00006 	mov	r0, r6
    b380:	e58d5000 	str	r5, [sp]
    b384:	ebffff53 	bl	b0d8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b388:	e3500000 	cmp	r0, #0
    b38c:	0affffbf 	beq	b290 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b390:	e1a03005 	mov	r3, r5
    b394:	e1a02005 	mov	r2, r5
    b398:	e1a01004 	mov	r1, r4
    b39c:	e1a00006 	mov	r0, r6
    b3a0:	e58d5000 	str	r5, [sp]
    b3a4:	ebffff4b 	bl	b0d8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b3a8:	e3500000 	cmp	r0, #0
    b3ac:	0affffb7 	beq	b290 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b3b0:	e3a03001 	mov	r3, #1
    b3b4:	e58d5000 	str	r5, [sp]
    b3b8:	e1a01004 	mov	r1, r4
    b3bc:	e1a00006 	mov	r0, r6
    b3c0:	e1a02003 	mov	r2, r3
    b3c4:	ebffff43 	bl	b0d8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b3c8:	e3500000 	cmp	r0, #0
    b3cc:	1affffc6 	bne	b2ec <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x100>
    b3d0:	eaffffae 	b	b290 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b3d4:	e3a020cf 	mov	r2, #207	; 0xcf
    b3d8:	e59f1068 	ldr	r1, [pc, #104]	; b448 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b3dc:	e59f0068 	ldr	r0, [pc, #104]	; b44c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x260>
    b3e0:	eb0064a7 	bl	24684 <assertion_failed>
    b3e4:	e3a020d5 	mov	r2, #213	; 0xd5
    b3e8:	e59f1058 	ldr	r1, [pc, #88]	; b448 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b3ec:	e59f005c 	ldr	r0, [pc, #92]	; b450 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x264>
    b3f0:	eb0064a3 	bl	24684 <assertion_failed>
    b3f4:	e3a020d8 	mov	r2, #216	; 0xd8
    b3f8:	e59f1048 	ldr	r1, [pc, #72]	; b448 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b3fc:	e59f0050 	ldr	r0, [pc, #80]	; b454 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x268>
    b400:	eb00649f 	bl	24684 <assertion_failed>
    b404:	e1a00004 	mov	r0, r4
    b408:	eb0023d8 	bl	14370 <CUSBRequest::GetEndpoint() const>
    b40c:	eb000fba 	bl	f2fc <CUSBEndpoint::GetType() const>
    b410:	e3500002 	cmp	r0, #2
    b414:	0affffa5 	beq	b2b0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xc4>
    b418:	e3a020fc 	mov	r2, #252	; 0xfc
    b41c:	e59f1024 	ldr	r1, [pc, #36]	; b448 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b420:	e59f0030 	ldr	r0, [pc, #48]	; b458 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    b424:	eb006496 	bl	24684 <assertion_failed>
    b428:	e3a020fe 	mov	r2, #254	; 0xfe
    b42c:	e59f1014 	ldr	r1, [pc, #20]	; b448 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b430:	e59f0024 	ldr	r0, [pc, #36]	; b45c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x270>
    b434:	eb006492 	bl	24684 <assertion_failed>
    b438:	e3a020dc 	mov	r2, #220	; 0xdc
    b43c:	e59f1004 	ldr	r1, [pc, #4]	; b448 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b440:	e59f0014 	ldr	r0, [pc, #20]	; b45c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x270>
    b444:	eb00648e 	bl	24684 <assertion_failed>
    b448:	0003ea28 	.word	0x0003ea28
    b44c:	0003eb24 	.word	0x0003eb24
    b450:	0003ecb4 	.word	0x0003ecb4
    b454:	0003ecd4 	.word	0x0003ecd4
    b458:	0003eb64 	.word	0x0003eb64
    b45c:	0003eb4c 	.word	0x0003eb4c

0000b460 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>:
    b460:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b464:	e2515000 	subs	r5, r1, #0
    b468:	e59d4020 	ldr	r4, [sp, #32]
    b46c:	0a00001e 	beq	b4ec <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x8c>
    b470:	e3520000 	cmp	r2, #0
    b474:	e1a06002 	mov	r6, r2
    b478:	0a00001f 	beq	b4fc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x9c>
    b47c:	e3540000 	cmp	r4, #0
    b480:	0a000021 	beq	b50c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xac>
    b484:	e1a07000 	mov	r7, r0
    b488:	e1a08003 	mov	r8, r3
    b48c:	e2239001 	eor	r9, r3, #1
    b490:	ea000003 	b	b4a4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x44>
    b494:	e3a00001 	mov	r0, #1
    b498:	eb007a10 	bl	29ce0 <CTimer::SimpleMsDelay(unsigned int)>
    b49c:	e2544001 	subs	r4, r4, #1
    b4a0:	0a00000f 	beq	b4e4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x84>
    b4a4:	e1a00005 	mov	r0, r5
    b4a8:	eb0005e2 	bl	cc38 <CDWHCIRegister::Read()>
    b4ac:	e1160000 	tst	r6, r0
    b4b0:	11a0c009 	movne	ip, r9
    b4b4:	01a0c008 	moveq	ip, r8
    b4b8:	e35c0000 	cmp	ip, #0
    b4bc:	0a000006 	beq	b4dc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x7c>
    b4c0:	e5973008 	ldr	r3, [r7, #8]
    b4c4:	e3530000 	cmp	r3, #0
    b4c8:	1afffff1 	bne	b494 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x34>
    b4cc:	e59f2048 	ldr	r2, [pc, #72]	; b51c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xbc>
    b4d0:	e59f1048 	ldr	r1, [pc, #72]	; b520 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    b4d4:	e59f0048 	ldr	r0, [pc, #72]	; b524 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    b4d8:	eb006469 	bl	24684 <assertion_failed>
    b4dc:	e3a00001 	mov	r0, #1
    b4e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b4e4:	e1a00004 	mov	r0, r4
    b4e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b4ec:	e59f2034 	ldr	r2, [pc, #52]	; b528 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc8>
    b4f0:	e59f1028 	ldr	r1, [pc, #40]	; b520 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    b4f4:	e59f0030 	ldr	r0, [pc, #48]	; b52c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xcc>
    b4f8:	eb006461 	bl	24684 <assertion_failed>
    b4fc:	e59f202c 	ldr	r2, [pc, #44]	; b530 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd0>
    b500:	e59f1018 	ldr	r1, [pc, #24]	; b520 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    b504:	e59f0028 	ldr	r0, [pc, #40]	; b534 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd4>
    b508:	eb00645d 	bl	24684 <assertion_failed>
    b50c:	e59f2024 	ldr	r2, [pc, #36]	; b538 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd8>
    b510:	e59f1008 	ldr	r1, [pc, #8]	; b520 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    b514:	e59f0020 	ldr	r0, [pc, #32]	; b53c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xdc>
    b518:	eb006459 	bl	24684 <assertion_failed>
    b51c:	000005b3 	.word	0x000005b3
    b520:	0003ea28 	.word	0x0003ea28
    b524:	0003ea88 	.word	0x0003ea88
    b528:	000005ad 	.word	0x000005ad
    b52c:	0003ece0 	.word	0x0003ece0
    b530:	000005ae 	.word	0x000005ae
    b534:	0003ecf0 	.word	0x0003ecf0
    b538:	000005af 	.word	0x000005af
    b53c:	0003ecfc 	.word	0x0003ecfc

0000b540 <CDWHCIDevice::EnableRootPort()>:
    b540:	e92d4030 	push	{r4, r5, lr}
    b544:	e24dd01c 	sub	sp, sp, #28
    b548:	e1a04000 	mov	r4, r0
    b54c:	eb006af6 	bl	2612c <CKernelOptions::Get()>
    b550:	e3500000 	cmp	r0, #0
    b554:	0a00002c 	beq	b60c <CDWHCIDevice::EnableRootPort()+0xcc>
    b558:	eb006ae6 	bl	260f8 <CKernelOptions::GetUSBPowerDelay() const>
    b55c:	e2505000 	subs	r5, r0, #0
    b560:	0a000029 	beq	b60c <CDWHCIDevice::EnableRootPort()+0xcc>
    b564:	e59f10a8 	ldr	r1, [pc, #168]	; b614 <CDWHCIDevice::EnableRootPort()+0xd4>
    b568:	e28d000c 	add	r0, sp, #12
    b56c:	eb0005a8 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b570:	e3a03001 	mov	r3, #1
    b574:	e1a00004 	mov	r0, r4
    b578:	e1a02003 	mov	r2, r3
    b57c:	e58d5000 	str	r5, [sp]
    b580:	e28d100c 	add	r1, sp, #12
    b584:	ebffffb5 	bl	b460 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b588:	e2504000 	subs	r4, r0, #0
    b58c:	0a000019 	beq	b5f8 <CDWHCIDevice::EnableRootPort()+0xb8>
    b590:	e3a00064 	mov	r0, #100	; 0x64
    b594:	eb0079d1 	bl	29ce0 <CTimer::SimpleMsDelay(unsigned int)>
    b598:	e28d000c 	add	r0, sp, #12
    b59c:	eb0005a5 	bl	cc38 <CDWHCIRegister::Read()>
    b5a0:	e3e0102e 	mvn	r1, #46	; 0x2e
    b5a4:	e28d000c 	add	r0, sp, #12
    b5a8:	eb0005d6 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    b5ac:	e3a01c01 	mov	r1, #256	; 0x100
    b5b0:	e28d000c 	add	r0, sp, #12
    b5b4:	eb0005e1 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    b5b8:	e28d000c 	add	r0, sp, #12
    b5bc:	eb0005a4 	bl	cc54 <CDWHCIRegister::Write()>
    b5c0:	e3a00032 	mov	r0, #50	; 0x32
    b5c4:	eb0079c5 	bl	29ce0 <CTimer::SimpleMsDelay(unsigned int)>
    b5c8:	e28d000c 	add	r0, sp, #12
    b5cc:	eb000599 	bl	cc38 <CDWHCIRegister::Read()>
    b5d0:	e3e0102e 	mvn	r1, #46	; 0x2e
    b5d4:	e28d000c 	add	r0, sp, #12
    b5d8:	eb0005ca 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    b5dc:	e3e01c01 	mvn	r1, #256	; 0x100
    b5e0:	e28d000c 	add	r0, sp, #12
    b5e4:	eb0005c7 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    b5e8:	e28d000c 	add	r0, sp, #12
    b5ec:	eb000598 	bl	cc54 <CDWHCIRegister::Write()>
    b5f0:	e3a00014 	mov	r0, #20
    b5f4:	eb0079b9 	bl	29ce0 <CTimer::SimpleMsDelay(unsigned int)>
    b5f8:	e28d000c 	add	r0, sp, #12
    b5fc:	eb00058c 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    b600:	e1a00004 	mov	r0, r4
    b604:	e28dd01c 	add	sp, sp, #28
    b608:	e8bd8030 	pop	{r4, r5, pc}
    b60c:	e59f5004 	ldr	r5, [pc, #4]	; b618 <CDWHCIDevice::EnableRootPort()+0xd8>
    b610:	eaffffd3 	b	b564 <CDWHCIDevice::EnableRootPort()+0x24>
    b614:	20980440 	.word	0x20980440
    b618:	000001fe 	.word	0x000001fe

0000b61c <CDWHCIDevice::Reset()>:
    b61c:	e92d4030 	push	{r4, r5, lr}
    b620:	e1a04000 	mov	r4, r0
    b624:	e3a05064 	mov	r5, #100	; 0x64
    b628:	e24dd01c 	sub	sp, sp, #28
    b62c:	e3a02000 	mov	r2, #0
    b630:	e59f1080 	ldr	r1, [pc, #128]	; b6b8 <CDWHCIDevice::Reset()+0x9c>
    b634:	e28d000c 	add	r0, sp, #12
    b638:	eb000579 	bl	cc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b63c:	e1a00004 	mov	r0, r4
    b640:	e3a03001 	mov	r3, #1
    b644:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    b648:	e28d100c 	add	r1, sp, #12
    b64c:	e58d5000 	str	r5, [sp]
    b650:	ebffff82 	bl	b460 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b654:	e3500000 	cmp	r0, #0
    b658:	1a000005 	bne	b674 <CDWHCIDevice::Reset()+0x58>
    b65c:	e3a04000 	mov	r4, #0
    b660:	e28d000c 	add	r0, sp, #12
    b664:	eb000572 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    b668:	e1a00004 	mov	r0, r4
    b66c:	e28dd01c 	add	sp, sp, #28
    b670:	e8bd8030 	pop	{r4, r5, pc}
    b674:	e3a01001 	mov	r1, #1
    b678:	e28d000c 	add	r0, sp, #12
    b67c:	eb0005af 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    b680:	e28d000c 	add	r0, sp, #12
    b684:	eb000572 	bl	cc54 <CDWHCIRegister::Write()>
    b688:	e3a0300a 	mov	r3, #10
    b68c:	e1a00004 	mov	r0, r4
    b690:	e58d3000 	str	r3, [sp]
    b694:	e3a02001 	mov	r2, #1
    b698:	e3a03000 	mov	r3, #0
    b69c:	e28d100c 	add	r1, sp, #12
    b6a0:	ebffff6e 	bl	b460 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b6a4:	e2504000 	subs	r4, r0, #0
    b6a8:	0affffeb 	beq	b65c <CDWHCIDevice::Reset()+0x40>
    b6ac:	e1a00005 	mov	r0, r5
    b6b0:	eb00798a 	bl	29ce0 <CTimer::SimpleMsDelay(unsigned int)>
    b6b4:	eaffffe9 	b	b660 <CDWHCIDevice::Reset()+0x44>
    b6b8:	20980010 	.word	0x20980010

0000b6bc <CDWHCIDevice::InitCore()>:
    b6bc:	e92d4030 	push	{r4, r5, lr}
    b6c0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    b6c4:	e59f1234 	ldr	r1, [pc, #564]	; b900 <CDWHCIDevice::InitCore()+0x244>
    b6c8:	e1a04000 	mov	r4, r0
    b6cc:	e28d0004 	add	r0, sp, #4
    b6d0:	eb00054f 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b6d4:	e28d0004 	add	r0, sp, #4
    b6d8:	eb000556 	bl	cc38 <CDWHCIRegister::Read()>
    b6dc:	eb006a92 	bl	2612c <CKernelOptions::Get()>
    b6e0:	eb006a86 	bl	26100 <CKernelOptions::GetUSBFullSpeed() const>
    b6e4:	e3500000 	cmp	r0, #0
    b6e8:	1a000074 	bne	b8c0 <CDWHCIDevice::InitCore()+0x204>
    b6ec:	e3e01601 	mvn	r1, #1048576	; 0x100000
    b6f0:	e28d0004 	add	r0, sp, #4
    b6f4:	eb000583 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    b6f8:	e3e01501 	mvn	r1, #4194304	; 0x400000
    b6fc:	e28d0004 	add	r0, sp, #4
    b700:	eb000580 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    b704:	e28d0004 	add	r0, sp, #4
    b708:	eb000551 	bl	cc54 <CDWHCIRegister::Write()>
    b70c:	e1a00004 	mov	r0, r4
    b710:	ebffffc1 	bl	b61c <CDWHCIDevice::Reset()>
    b714:	e2505000 	subs	r5, r0, #0
    b718:	0a000062 	beq	b8a8 <CDWHCIDevice::InitCore()+0x1ec>
    b71c:	e28d0004 	add	r0, sp, #4
    b720:	eb000544 	bl	cc38 <CDWHCIRegister::Read()>
    b724:	e3e01010 	mvn	r1, #16
    b728:	e28d0004 	add	r0, sp, #4
    b72c:	eb000575 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    b730:	e3e01008 	mvn	r1, #8
    b734:	e28d0004 	add	r0, sp, #4
    b738:	eb000572 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    b73c:	e28d0004 	add	r0, sp, #4
    b740:	eb000543 	bl	cc54 <CDWHCIRegister::Write()>
    b744:	e59f11b8 	ldr	r1, [pc, #440]	; b904 <CDWHCIDevice::InitCore()+0x248>
    b748:	e28d0010 	add	r0, sp, #16
    b74c:	eb000530 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b750:	e28d0010 	add	r0, sp, #16
    b754:	eb000537 	bl	cc38 <CDWHCIRegister::Read()>
    b758:	e28d0010 	add	r0, sp, #16
    b75c:	eb00054a 	bl	cc8c <CDWHCIRegister::Get() const>
    b760:	e1a001a0 	lsr	r0, r0, #3
    b764:	e2000003 	and	r0, r0, #3
    b768:	e3500002 	cmp	r0, #2
    b76c:	1a00005b 	bne	b8e0 <CDWHCIDevice::InitCore()+0x224>
    b770:	e28d0004 	add	r0, sp, #4
    b774:	eb00052f 	bl	cc38 <CDWHCIRegister::Read()>
    b778:	e28d0010 	add	r0, sp, #16
    b77c:	eb000542 	bl	cc8c <CDWHCIRegister::Get() const>
    b780:	e1a00320 	lsr	r0, r0, #6
    b784:	e2000003 	and	r0, r0, #3
    b788:	e3500002 	cmp	r0, #2
    b78c:	0a000038 	beq	b874 <CDWHCIDevice::InitCore()+0x1b8>
    b790:	e3e01802 	mvn	r1, #131072	; 0x20000
    b794:	e28d0004 	add	r0, sp, #4
    b798:	eb00055a 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    b79c:	e3e01702 	mvn	r1, #524288	; 0x80000
    b7a0:	e28d0004 	add	r0, sp, #4
    b7a4:	eb000557 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    b7a8:	e28d0004 	add	r0, sp, #4
    b7ac:	eb000528 	bl	cc54 <CDWHCIRegister::Write()>
    b7b0:	e594300c 	ldr	r3, [r4, #12]
    b7b4:	e3530000 	cmp	r3, #0
    b7b8:	1a00004c 	bne	b8f0 <CDWHCIDevice::InitCore()+0x234>
    b7bc:	e28d0010 	add	r0, sp, #16
    b7c0:	eb000531 	bl	cc8c <CDWHCIRegister::Get() const>
    b7c4:	e1a00720 	lsr	r0, r0, #14
    b7c8:	e200000f 	and	r0, r0, #15
    b7cc:	e2403003 	sub	r3, r0, #3
    b7d0:	e353000c 	cmp	r3, #12
    b7d4:	e2800001 	add	r0, r0, #1
    b7d8:	e584000c 	str	r0, [r4, #12]
    b7dc:	8a00003b 	bhi	b8d0 <CDWHCIDevice::InitCore()+0x214>
    b7e0:	e59f1120 	ldr	r1, [pc, #288]	; b908 <CDWHCIDevice::InitCore()+0x24c>
    b7e4:	e28d001c 	add	r0, sp, #28
    b7e8:	eb000509 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b7ec:	e28d001c 	add	r0, sp, #28
    b7f0:	eb000510 	bl	cc38 <CDWHCIRegister::Read()>
    b7f4:	e3a01020 	mov	r1, #32
    b7f8:	e28d001c 	add	r0, sp, #28
    b7fc:	eb00054f 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    b800:	e3a01010 	mov	r1, #16
    b804:	e28d001c 	add	r0, sp, #28
    b808:	eb00054c 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    b80c:	e3e01006 	mvn	r1, #6
    b810:	e28d001c 	add	r0, sp, #28
    b814:	eb00053b 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    b818:	e28d001c 	add	r0, sp, #28
    b81c:	eb00050c 	bl	cc54 <CDWHCIRegister::Write()>
    b820:	e28d0004 	add	r0, sp, #4
    b824:	eb000503 	bl	cc38 <CDWHCIRegister::Read()>
    b828:	e3e01c02 	mvn	r1, #512	; 0x200
    b82c:	e28d0004 	add	r0, sp, #4
    b830:	eb000534 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    b834:	e3e01c01 	mvn	r1, #256	; 0x100
    b838:	e28d0004 	add	r0, sp, #4
    b83c:	eb000531 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    b840:	e28d0004 	add	r0, sp, #4
    b844:	eb000502 	bl	cc54 <CDWHCIRegister::Write()>
    b848:	e1a00004 	mov	r0, r4
    b84c:	ebfff96c 	bl	9e04 <CDWHCIDevice::EnableCommonInterrupts()>
    b850:	e28d001c 	add	r0, sp, #28
    b854:	eb0004f6 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    b858:	e28d0010 	add	r0, sp, #16
    b85c:	eb0004f4 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    b860:	e28d0004 	add	r0, sp, #4
    b864:	eb0004f2 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    b868:	e1a00005 	mov	r0, r5
    b86c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    b870:	e8bd8030 	pop	{r4, r5, pc}
    b874:	e28d0010 	add	r0, sp, #16
    b878:	eb000503 	bl	cc8c <CDWHCIRegister::Get() const>
    b87c:	e1a00420 	lsr	r0, r0, #8
    b880:	e2000003 	and	r0, r0, #3
    b884:	e3500001 	cmp	r0, #1
    b888:	1affffc0 	bne	b790 <CDWHCIDevice::InitCore()+0xd4>
    b88c:	e28d0004 	add	r0, sp, #4
    b890:	e3a01802 	mov	r1, #131072	; 0x20000
    b894:	eb000529 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    b898:	e3a01702 	mov	r1, #524288	; 0x80000
    b89c:	e28d0004 	add	r0, sp, #4
    b8a0:	eb000526 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    b8a4:	eaffffbf 	b	b7a8 <CDWHCIDevice::InitCore()+0xec>
    b8a8:	eb006c5d 	bl	26a24 <CLogger::Get()>
    b8ac:	e3a02001 	mov	r2, #1
    b8b0:	e59f3054 	ldr	r3, [pc, #84]	; b90c <CDWHCIDevice::InitCore()+0x250>
    b8b4:	e59f1054 	ldr	r1, [pc, #84]	; b910 <CDWHCIDevice::InitCore()+0x254>
    b8b8:	eb006b9b 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b8bc:	eaffffe7 	b	b860 <CDWHCIDevice::InitCore()+0x1a4>
    b8c0:	e3a01040 	mov	r1, #64	; 0x40
    b8c4:	e28d0004 	add	r0, sp, #4
    b8c8:	eb00051c 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    b8cc:	eaffff86 	b	b6ec <CDWHCIDevice::InitCore()+0x30>
    b8d0:	e59f203c 	ldr	r2, [pc, #60]	; b914 <CDWHCIDevice::InitCore()+0x258>
    b8d4:	e59f103c 	ldr	r1, [pc, #60]	; b918 <CDWHCIDevice::InitCore()+0x25c>
    b8d8:	e59f003c 	ldr	r0, [pc, #60]	; b91c <CDWHCIDevice::InitCore()+0x260>
    b8dc:	eb006368 	bl	24684 <assertion_failed>
    b8e0:	e59f2038 	ldr	r2, [pc, #56]	; b920 <CDWHCIDevice::InitCore()+0x264>
    b8e4:	e59f102c 	ldr	r1, [pc, #44]	; b918 <CDWHCIDevice::InitCore()+0x25c>
    b8e8:	e59f0034 	ldr	r0, [pc, #52]	; b924 <CDWHCIDevice::InitCore()+0x268>
    b8ec:	eb006364 	bl	24684 <assertion_failed>
    b8f0:	e59f2030 	ldr	r2, [pc, #48]	; b928 <CDWHCIDevice::InitCore()+0x26c>
    b8f4:	e59f101c 	ldr	r1, [pc, #28]	; b918 <CDWHCIDevice::InitCore()+0x25c>
    b8f8:	e59f002c 	ldr	r0, [pc, #44]	; b92c <CDWHCIDevice::InitCore()+0x270>
    b8fc:	eb006360 	bl	24684 <assertion_failed>
    b900:	2098000c 	.word	0x2098000c
    b904:	20980048 	.word	0x20980048
    b908:	20980008 	.word	0x20980008
    b90c:	0003ed0c 	.word	0x0003ed0c
    b910:	0003efa4 	.word	0x0003efa4
    b914:	00000187 	.word	0x00000187
    b918:	0003ea28 	.word	0x0003ea28
    b91c:	0003ed68 	.word	0x0003ed68
    b920:	00000175 	.word	0x00000175
    b924:	0003ed1c 	.word	0x0003ed1c
    b928:	00000185 	.word	0x00000185
    b92c:	0003ed54 	.word	0x0003ed54

0000b930 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    b930:	e92d4030 	push	{r4, r5, lr}
    b934:	e1a05001 	mov	r5, r1
    b938:	e24dd01c 	sub	sp, sp, #28
    b93c:	e3a02000 	mov	r2, #0
    b940:	e1a04000 	mov	r4, r0
    b944:	e59f106c 	ldr	r1, [pc, #108]	; b9b8 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x88>
    b948:	e28d000c 	add	r0, sp, #12
    b94c:	eb0004b4 	bl	cc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b950:	e3a01020 	mov	r1, #32
    b954:	e28d000c 	add	r0, sp, #12
    b958:	eb0004f8 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    b95c:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
    b960:	e28d000c 	add	r0, sp, #12
    b964:	eb0004e7 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    b968:	e1a01305 	lsl	r1, r5, #6
    b96c:	e28d000c 	add	r0, sp, #12
    b970:	eb0004f2 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    b974:	e28d000c 	add	r0, sp, #12
    b978:	eb0004b5 	bl	cc54 <CDWHCIRegister::Write()>
    b97c:	e3a0300a 	mov	r3, #10
    b980:	e1a00004 	mov	r0, r4
    b984:	e58d3000 	str	r3, [sp]
    b988:	e3a02020 	mov	r2, #32
    b98c:	e3a03000 	mov	r3, #0
    b990:	e28d100c 	add	r1, sp, #12
    b994:	ebfffeb1 	bl	b460 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b998:	e3500000 	cmp	r0, #0
    b99c:	0a000001 	beq	b9a8 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x78>
    b9a0:	e3a00001 	mov	r0, #1
    b9a4:	eb0078d4 	bl	29cfc <CTimer::SimpleusDelay(unsigned int)>
    b9a8:	e28d000c 	add	r0, sp, #12
    b9ac:	eb0004a0 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    b9b0:	e28dd01c 	add	sp, sp, #28
    b9b4:	e8bd8030 	pop	{r4, r5, pc}
    b9b8:	20980010 	.word	0x20980010

0000b9bc <CDWHCIDevice::FlushRxFIFO()>:
    b9bc:	e92d4010 	push	{r4, lr}
    b9c0:	e24dd018 	sub	sp, sp, #24
    b9c4:	e3a02000 	mov	r2, #0
    b9c8:	e1a04000 	mov	r4, r0
    b9cc:	e59f1054 	ldr	r1, [pc, #84]	; ba28 <CDWHCIDevice::FlushRxFIFO()+0x6c>
    b9d0:	e28d000c 	add	r0, sp, #12
    b9d4:	eb000492 	bl	cc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b9d8:	e3a01010 	mov	r1, #16
    b9dc:	e28d000c 	add	r0, sp, #12
    b9e0:	eb0004d6 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    b9e4:	e28d000c 	add	r0, sp, #12
    b9e8:	eb000499 	bl	cc54 <CDWHCIRegister::Write()>
    b9ec:	e3a0300a 	mov	r3, #10
    b9f0:	e1a00004 	mov	r0, r4
    b9f4:	e58d3000 	str	r3, [sp]
    b9f8:	e3a02010 	mov	r2, #16
    b9fc:	e3a03000 	mov	r3, #0
    ba00:	e28d100c 	add	r1, sp, #12
    ba04:	ebfffe95 	bl	b460 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    ba08:	e3500000 	cmp	r0, #0
    ba0c:	0a000001 	beq	ba18 <CDWHCIDevice::FlushRxFIFO()+0x5c>
    ba10:	e3a00001 	mov	r0, #1
    ba14:	eb0078b8 	bl	29cfc <CTimer::SimpleusDelay(unsigned int)>
    ba18:	e28d000c 	add	r0, sp, #12
    ba1c:	eb000484 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    ba20:	e28dd018 	add	sp, sp, #24
    ba24:	e8bd8010 	pop	{r4, pc}
    ba28:	20980010 	.word	0x20980010

0000ba2c <CDWHCIDevice::InitHost()>:
    ba2c:	e92d4030 	push	{r4, r5, lr}
    ba30:	e24dd064 	sub	sp, sp, #100	; 0x64
    ba34:	e3a02000 	mov	r2, #0
    ba38:	e59f11d4 	ldr	r1, [pc, #468]	; bc14 <CDWHCIDevice::InitHost()+0x1e8>
    ba3c:	e1a04000 	mov	r4, r0
    ba40:	e1a0000d 	mov	r0, sp
    ba44:	eb000476 	bl	cc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    ba48:	e1a0000d 	mov	r0, sp
    ba4c:	eb000480 	bl	cc54 <CDWHCIRegister::Write()>
    ba50:	e59f11c0 	ldr	r1, [pc, #448]	; bc18 <CDWHCIDevice::InitHost()+0x1ec>
    ba54:	e28d000c 	add	r0, sp, #12
    ba58:	eb00046d 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ba5c:	e28d000c 	add	r0, sp, #12
    ba60:	eb000474 	bl	cc38 <CDWHCIRegister::Read()>
    ba64:	e3e01003 	mvn	r1, #3
    ba68:	e28d000c 	add	r0, sp, #12
    ba6c:	eb0004a5 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    ba70:	e59f11a4 	ldr	r1, [pc, #420]	; bc1c <CDWHCIDevice::InitHost()+0x1f0>
    ba74:	e28d0018 	add	r0, sp, #24
    ba78:	eb000465 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ba7c:	e59f119c 	ldr	r1, [pc, #412]	; bc20 <CDWHCIDevice::InitHost()+0x1f4>
    ba80:	e28d0024 	add	r0, sp, #36	; 0x24
    ba84:	eb000462 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ba88:	e28d0018 	add	r0, sp, #24
    ba8c:	eb000469 	bl	cc38 <CDWHCIRegister::Read()>
    ba90:	e1a00320 	lsr	r0, r0, #6
    ba94:	e2000003 	and	r0, r0, #3
    ba98:	e3500002 	cmp	r0, #2
    ba9c:	0a000048 	beq	bbc4 <CDWHCIDevice::InitHost()+0x198>
    baa0:	e3a01000 	mov	r1, #0
    baa4:	e28d000c 	add	r0, sp, #12
    baa8:	eb0004a4 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    baac:	e28d000c 	add	r0, sp, #12
    bab0:	eb000467 	bl	cc54 <CDWHCIRegister::Write()>
    bab4:	e3a02b01 	mov	r2, #1024	; 0x400
    bab8:	e59f1164 	ldr	r1, [pc, #356]	; bc24 <CDWHCIDevice::InitHost()+0x1f8>
    babc:	e28d0030 	add	r0, sp, #48	; 0x30
    bac0:	eb000457 	bl	cc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bac4:	e28d0030 	add	r0, sp, #48	; 0x30
    bac8:	eb000461 	bl	cc54 <CDWHCIRegister::Write()>
    bacc:	e3a02000 	mov	r2, #0
    bad0:	e59f1150 	ldr	r1, [pc, #336]	; bc28 <CDWHCIDevice::InitHost()+0x1fc>
    bad4:	e28d003c 	add	r0, sp, #60	; 0x3c
    bad8:	eb000451 	bl	cc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    badc:	e3a01b01 	mov	r1, #1024	; 0x400
    bae0:	e28d003c 	add	r0, sp, #60	; 0x3c
    bae4:	eb000495 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    bae8:	e3a01301 	mov	r1, #67108864	; 0x4000000
    baec:	e28d003c 	add	r0, sp, #60	; 0x3c
    baf0:	eb000492 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    baf4:	e28d003c 	add	r0, sp, #60	; 0x3c
    baf8:	eb000455 	bl	cc54 <CDWHCIRegister::Write()>
    bafc:	e3a02000 	mov	r2, #0
    bb00:	e59f1124 	ldr	r1, [pc, #292]	; bc2c <CDWHCIDevice::InitHost()+0x200>
    bb04:	e28d0048 	add	r0, sp, #72	; 0x48
    bb08:	eb000445 	bl	cc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bb0c:	e3a01b02 	mov	r1, #2048	; 0x800
    bb10:	e28d0048 	add	r0, sp, #72	; 0x48
    bb14:	eb000489 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    bb18:	e3a01301 	mov	r1, #67108864	; 0x4000000
    bb1c:	e28d0048 	add	r0, sp, #72	; 0x48
    bb20:	eb000486 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    bb24:	e28d0048 	add	r0, sp, #72	; 0x48
    bb28:	eb000449 	bl	cc54 <CDWHCIRegister::Write()>
    bb2c:	e3a01010 	mov	r1, #16
    bb30:	e1a00004 	mov	r0, r4
    bb34:	ebffff7d 	bl	b930 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    bb38:	e1a00004 	mov	r0, r4
    bb3c:	ebffff9e 	bl	b9bc <CDWHCIDevice::FlushRxFIFO()>
    bb40:	e59f10e8 	ldr	r1, [pc, #232]	; bc30 <CDWHCIDevice::InitHost()+0x204>
    bb44:	e28d0054 	add	r0, sp, #84	; 0x54
    bb48:	eb000431 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bb4c:	e28d0054 	add	r0, sp, #84	; 0x54
    bb50:	eb000438 	bl	cc38 <CDWHCIRegister::Read()>
    bb54:	e3e0102e 	mvn	r1, #46	; 0x2e
    bb58:	e28d0054 	add	r0, sp, #84	; 0x54
    bb5c:	eb000469 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    bb60:	e28d0054 	add	r0, sp, #84	; 0x54
    bb64:	eb000448 	bl	cc8c <CDWHCIRegister::Get() const>
    bb68:	e3100a01 	tst	r0, #4096	; 0x1000
    bb6c:	0a000022 	beq	bbfc <CDWHCIDevice::InitHost()+0x1d0>
    bb70:	e1a00004 	mov	r0, r4
    bb74:	ebfff8b0 	bl	9e3c <CDWHCIDevice::EnableHostInterrupts()>
    bb78:	e28d0054 	add	r0, sp, #84	; 0x54
    bb7c:	eb00042c 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    bb80:	e28d0048 	add	r0, sp, #72	; 0x48
    bb84:	eb00042a 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    bb88:	e28d003c 	add	r0, sp, #60	; 0x3c
    bb8c:	eb000428 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    bb90:	e28d0030 	add	r0, sp, #48	; 0x30
    bb94:	eb000426 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    bb98:	e28d0024 	add	r0, sp, #36	; 0x24
    bb9c:	eb000424 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    bba0:	e28d0018 	add	r0, sp, #24
    bba4:	eb000422 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    bba8:	e28d000c 	add	r0, sp, #12
    bbac:	eb000420 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    bbb0:	e1a0000d 	mov	r0, sp
    bbb4:	eb00041e 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    bbb8:	e3a00001 	mov	r0, #1
    bbbc:	e28dd064 	add	sp, sp, #100	; 0x64
    bbc0:	e8bd8030 	pop	{r4, r5, pc}
    bbc4:	e28d0018 	add	r0, sp, #24
    bbc8:	eb00042f 	bl	cc8c <CDWHCIRegister::Get() const>
    bbcc:	e1a00420 	lsr	r0, r0, #8
    bbd0:	e2005003 	and	r5, r0, #3
    bbd4:	e3550001 	cmp	r5, #1
    bbd8:	1affffb0 	bne	baa0 <CDWHCIDevice::InitHost()+0x74>
    bbdc:	e28d0024 	add	r0, sp, #36	; 0x24
    bbe0:	eb000414 	bl	cc38 <CDWHCIRegister::Read()>
    bbe4:	e3100802 	tst	r0, #131072	; 0x20000
    bbe8:	0affffac 	beq	baa0 <CDWHCIDevice::InitHost()+0x74>
    bbec:	e1a01005 	mov	r1, r5
    bbf0:	e28d000c 	add	r0, sp, #12
    bbf4:	eb000451 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    bbf8:	eaffffab 	b	baac <CDWHCIDevice::InitHost()+0x80>
    bbfc:	e28d0054 	add	r0, sp, #84	; 0x54
    bc00:	e3a01a01 	mov	r1, #4096	; 0x1000
    bc04:	eb00044d 	bl	cd40 <CDWHCIRegister::Or(unsigned int)>
    bc08:	e28d0054 	add	r0, sp, #84	; 0x54
    bc0c:	eb000410 	bl	cc54 <CDWHCIRegister::Write()>
    bc10:	eaffffd6 	b	bb70 <CDWHCIDevice::InitHost()+0x144>
    bc14:	20980e00 	.word	0x20980e00
    bc18:	20980400 	.word	0x20980400
    bc1c:	20980048 	.word	0x20980048
    bc20:	2098000c 	.word	0x2098000c
    bc24:	20980024 	.word	0x20980024
    bc28:	20980028 	.word	0x20980028
    bc2c:	20980100 	.word	0x20980100
    bc30:	20980440 	.word	0x20980440

0000bc34 <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    bc34:	e92d4030 	push	{r4, r5, lr}
    bc38:	e24dd01c 	sub	sp, sp, #28
    bc3c:	e1a05001 	mov	r5, r1
    bc40:	e28d000c 	add	r0, sp, #12
    bc44:	e1a01002 	mov	r1, r2
    bc48:	eb0003f1 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bc4c:	e3a03000 	mov	r3, #0
    bc50:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bc54:	eb006b72 	bl	26a24 <CLogger::Get()>
    bc58:	e1a04000 	mov	r4, r0
    bc5c:	e28d000c 	add	r0, sp, #12
    bc60:	eb0003f4 	bl	cc38 <CDWHCIRegister::Read()>
    bc64:	e3a02004 	mov	r2, #4
    bc68:	e88d0021 	stm	sp, {r0, r5}
    bc6c:	e59f3018 	ldr	r3, [pc, #24]	; bc8c <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x58>
    bc70:	e1a00004 	mov	r0, r4
    bc74:	e59f1014 	ldr	r1, [pc, #20]	; bc90 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x5c>
    bc78:	eb006aab 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bc7c:	e28d000c 	add	r0, sp, #12
    bc80:	eb0003eb 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    bc84:	e28dd01c 	add	sp, sp, #28
    bc88:	e8bd8030 	pop	{r4, r5, pc}
    bc8c:	0003ea64 	.word	0x0003ea64
    bc90:	0003efa4 	.word	0x0003efa4

0000bc94 <CDWHCIDevice::DumpStatus(unsigned int)>:
    bc94:	e92d4070 	push	{r4, r5, r6, lr}
    bc98:	e1a05001 	mov	r5, r1
    bc9c:	e59f0104 	ldr	r0, [pc, #260]	; bda8 <CDWHCIDevice::DumpStatus(unsigned int)+0x114>
    bca0:	e59f1104 	ldr	r1, [pc, #260]	; bdac <CDWHCIDevice::DumpStatus(unsigned int)+0x118>
    bca4:	ebfff7a0 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bca8:	e59f1100 	ldr	r1, [pc, #256]	; bdb0 <CDWHCIDevice::DumpStatus(unsigned int)+0x11c>
    bcac:	e59f0100 	ldr	r0, [pc, #256]	; bdb4 <CDWHCIDevice::DumpStatus(unsigned int)+0x120>
    bcb0:	ebfff79d 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bcb4:	e59f10fc 	ldr	r1, [pc, #252]	; bdb8 <CDWHCIDevice::DumpStatus(unsigned int)+0x124>
    bcb8:	e59f00fc 	ldr	r0, [pc, #252]	; bdbc <CDWHCIDevice::DumpStatus(unsigned int)+0x128>
    bcbc:	ebfff79a 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bcc0:	e59f10f8 	ldr	r1, [pc, #248]	; bdc0 <CDWHCIDevice::DumpStatus(unsigned int)+0x12c>
    bcc4:	e59f00f8 	ldr	r0, [pc, #248]	; bdc4 <CDWHCIDevice::DumpStatus(unsigned int)+0x130>
    bcc8:	ebfff797 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bccc:	e59f10f4 	ldr	r1, [pc, #244]	; bdc8 <CDWHCIDevice::DumpStatus(unsigned int)+0x134>
    bcd0:	e59f00f4 	ldr	r0, [pc, #244]	; bdcc <CDWHCIDevice::DumpStatus(unsigned int)+0x138>
    bcd4:	ebfff794 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bcd8:	e59f10f0 	ldr	r1, [pc, #240]	; bdd0 <CDWHCIDevice::DumpStatus(unsigned int)+0x13c>
    bcdc:	e59f00f0 	ldr	r0, [pc, #240]	; bdd4 <CDWHCIDevice::DumpStatus(unsigned int)+0x140>
    bce0:	ebfff791 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bce4:	e59f10ec 	ldr	r1, [pc, #236]	; bdd8 <CDWHCIDevice::DumpStatus(unsigned int)+0x144>
    bce8:	e59f00ec 	ldr	r0, [pc, #236]	; bddc <CDWHCIDevice::DumpStatus(unsigned int)+0x148>
    bcec:	ebfff78e 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bcf0:	e59f10e8 	ldr	r1, [pc, #232]	; bde0 <CDWHCIDevice::DumpStatus(unsigned int)+0x14c>
    bcf4:	e59f00e8 	ldr	r0, [pc, #232]	; bde4 <CDWHCIDevice::DumpStatus(unsigned int)+0x150>
    bcf8:	ebfff78b 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bcfc:	e59f10e4 	ldr	r1, [pc, #228]	; bde8 <CDWHCIDevice::DumpStatus(unsigned int)+0x154>
    bd00:	e59f00e4 	ldr	r0, [pc, #228]	; bdec <CDWHCIDevice::DumpStatus(unsigned int)+0x158>
    bd04:	ebfff788 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd08:	e59f10e0 	ldr	r1, [pc, #224]	; bdf0 <CDWHCIDevice::DumpStatus(unsigned int)+0x15c>
    bd0c:	e59f00e0 	ldr	r0, [pc, #224]	; bdf4 <CDWHCIDevice::DumpStatus(unsigned int)+0x160>
    bd10:	ebfff785 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd14:	e59f10dc 	ldr	r1, [pc, #220]	; bdf8 <CDWHCIDevice::DumpStatus(unsigned int)+0x164>
    bd18:	e59f00dc 	ldr	r0, [pc, #220]	; bdfc <CDWHCIDevice::DumpStatus(unsigned int)+0x168>
    bd1c:	ebfff782 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd20:	e59f40d8 	ldr	r4, [pc, #216]	; be00 <CDWHCIDevice::DumpStatus(unsigned int)+0x16c>
    bd24:	e59f10d8 	ldr	r1, [pc, #216]	; be04 <CDWHCIDevice::DumpStatus(unsigned int)+0x170>
    bd28:	e59f00d8 	ldr	r0, [pc, #216]	; be08 <CDWHCIDevice::DumpStatus(unsigned int)+0x174>
    bd2c:	ebfff77e 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd30:	e59f10d4 	ldr	r1, [pc, #212]	; be0c <CDWHCIDevice::DumpStatus(unsigned int)+0x178>
    bd34:	e59f00d4 	ldr	r0, [pc, #212]	; be10 <CDWHCIDevice::DumpStatus(unsigned int)+0x17c>
    bd38:	ebfff77b 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd3c:	e0854004 	add	r4, r5, r4
    bd40:	e59f10cc 	ldr	r1, [pc, #204]	; be14 <CDWHCIDevice::DumpStatus(unsigned int)+0x180>
    bd44:	e59f00cc 	ldr	r0, [pc, #204]	; be18 <CDWHCIDevice::DumpStatus(unsigned int)+0x184>
    bd48:	e1a04284 	lsl	r4, r4, #5
    bd4c:	ebfff776 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd50:	e59f10c4 	ldr	r1, [pc, #196]	; be1c <CDWHCIDevice::DumpStatus(unsigned int)+0x188>
    bd54:	e59f00c4 	ldr	r0, [pc, #196]	; be20 <CDWHCIDevice::DumpStatus(unsigned int)+0x18c>
    bd58:	ebfff773 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd5c:	e1a01004 	mov	r1, r4
    bd60:	e59f00bc 	ldr	r0, [pc, #188]	; be24 <CDWHCIDevice::DumpStatus(unsigned int)+0x190>
    bd64:	ebfff770 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd68:	e2841004 	add	r1, r4, #4
    bd6c:	e59f00b4 	ldr	r0, [pc, #180]	; be28 <CDWHCIDevice::DumpStatus(unsigned int)+0x194>
    bd70:	ebfff76d 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd74:	e2841008 	add	r1, r4, #8
    bd78:	e59f00ac 	ldr	r0, [pc, #172]	; be2c <CDWHCIDevice::DumpStatus(unsigned int)+0x198>
    bd7c:	ebfff76a 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd80:	e284100c 	add	r1, r4, #12
    bd84:	e59f00a4 	ldr	r0, [pc, #164]	; be30 <CDWHCIDevice::DumpStatus(unsigned int)+0x19c>
    bd88:	ebfff767 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd8c:	e2841010 	add	r1, r4, #16
    bd90:	e59f009c 	ldr	r0, [pc, #156]	; be34 <CDWHCIDevice::DumpStatus(unsigned int)+0x1a0>
    bd94:	ebfff764 	bl	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd98:	e2841014 	add	r1, r4, #20
    bd9c:	e59f0094 	ldr	r0, [pc, #148]	; be38 <CDWHCIDevice::DumpStatus(unsigned int)+0x1a4>
    bda0:	e8bd4070 	pop	{r4, r5, r6, lr}
    bda4:	eafff760 	b	9b2c <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bda8:	0003eda0 	.word	0x0003eda0
    bdac:	20980000 	.word	0x20980000
    bdb0:	20980008 	.word	0x20980008
    bdb4:	0003edac 	.word	0x0003edac
    bdb8:	2098000c 	.word	0x2098000c
    bdbc:	0003edb4 	.word	0x0003edb4
    bdc0:	20980010 	.word	0x20980010
    bdc4:	0003edbc 	.word	0x0003edbc
    bdc8:	20980014 	.word	0x20980014
    bdcc:	0003edc4 	.word	0x0003edc4
    bdd0:	20980018 	.word	0x20980018
    bdd4:	0003edd0 	.word	0x0003edd0
    bdd8:	20980024 	.word	0x20980024
    bddc:	0003eddc 	.word	0x0003eddc
    bde0:	20980028 	.word	0x20980028
    bde4:	0003ede8 	.word	0x0003ede8
    bde8:	2098002c 	.word	0x2098002c
    bdec:	0003edfc 	.word	0x0003edfc
    bdf0:	20980100 	.word	0x20980100
    bdf4:	0003ee0c 	.word	0x0003ee0c
    bdf8:	20980400 	.word	0x20980400
    bdfc:	0003ee24 	.word	0x0003ee24
    be00:	0104c028 	.word	0x0104c028
    be04:	20980410 	.word	0x20980410
    be08:	0003ee30 	.word	0x0003ee30
    be0c:	20980414 	.word	0x20980414
    be10:	0003ee48 	.word	0x0003ee48
    be14:	20980418 	.word	0x20980418
    be18:	0003ee5c 	.word	0x0003ee5c
    be1c:	20980440 	.word	0x20980440
    be20:	0003ee74 	.word	0x0003ee74
    be24:	0003ee80 	.word	0x0003ee80
    be28:	0003ee98 	.word	0x0003ee98
    be2c:	0003eeb0 	.word	0x0003eeb0
    be30:	0003eec4 	.word	0x0003eec4
    be34:	0003eedc 	.word	0x0003eedc
    be38:	0003eef4 	.word	0x0003eef4

0000be3c <CDWHCIDevice::~CDWHCIDevice()>:
    be3c:	e3a03001 	mov	r3, #1
    be40:	e92d4030 	push	{r4, r5, lr}
    be44:	e5901008 	ldr	r1, [r0, #8]
    be48:	e59f20bc 	ldr	r2, [pc, #188]	; bf0c <CDWHCIDevice::~CDWHCIDevice()+0xd0>
    be4c:	e3510000 	cmp	r1, #0
    be50:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    be54:	e5802000 	str	r2, [r0]
    be58:	e5c03081 	strb	r3, [r0, #129]	; 0x81
    be5c:	0a000022 	beq	beec <CDWHCIDevice::~CDWHCIDevice()+0xb0>
    be60:	e1a04000 	mov	r4, r0
    be64:	e3a000c8 	mov	r0, #200	; 0xc8
    be68:	eb00779c 	bl	29ce0 <CTimer::SimpleMsDelay(unsigned int)>
    be6c:	e5940004 	ldr	r0, [r4, #4]
    be70:	e3500000 	cmp	r0, #0
    be74:	0a000020 	beq	befc <CDWHCIDevice::~CDWHCIDevice()+0xc0>
    be78:	e3a05000 	mov	r5, #0
    be7c:	e3a01009 	mov	r1, #9
    be80:	eb008065 	bl	2c01c <CInterruptSystem::DisconnectIRQ(unsigned int)>
    be84:	e1a00004 	mov	r0, r4
    be88:	ebfffde3 	bl	b61c <CDWHCIDevice::Reset()>
    be8c:	e1a01005 	mov	r1, r5
    be90:	e28d000c 	add	r0, sp, #12
    be94:	eb00621b 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    be98:	e3a03014 	mov	r3, #20
    be9c:	e3a01003 	mov	r1, #3
    bea0:	e3a0c002 	mov	ip, #2
    bea4:	e08d2003 	add	r2, sp, r3
    bea8:	e58d1020 	str	r1, [sp, #32]
    beac:	e28d000c 	add	r0, sp, #12
    beb0:	e59f1058 	ldr	r1, [pc, #88]	; bf10 <CDWHCIDevice::~CDWHCIDevice()+0xd4>
    beb4:	e58d5000 	str	r5, [sp]
    beb8:	e58dc024 	str	ip, [sp, #36]	; 0x24
    bebc:	eb00621d 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    bec0:	e5845004 	str	r5, [r4, #4]
    bec4:	e5845008 	str	r5, [r4, #8]
    bec8:	e28d000c 	add	r0, sp, #12
    becc:	eb006214 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
    bed0:	e2840074 	add	r0, r4, #116	; 0x74
    bed4:	eb0003fe 	bl	ced4 <CDWHCIRootPort::~CDWHCIRootPort()>
    bed8:	e1a00004 	mov	r0, r4
    bedc:	eb001a11 	bl	12728 <CUSBHostController::~CUSBHostController()>
    bee0:	e1a00004 	mov	r0, r4
    bee4:	e28dd02c 	add	sp, sp, #44	; 0x2c
    bee8:	e8bd8030 	pop	{r4, r5, pc}
    beec:	e3a0205d 	mov	r2, #93	; 0x5d
    bef0:	e59f101c 	ldr	r1, [pc, #28]	; bf14 <CDWHCIDevice::~CDWHCIDevice()+0xd8>
    bef4:	e59f001c 	ldr	r0, [pc, #28]	; bf18 <CDWHCIDevice::~CDWHCIDevice()+0xdc>
    bef8:	eb0061e1 	bl	24684 <assertion_failed>
    befc:	e3a02060 	mov	r2, #96	; 0x60
    bf00:	e59f100c 	ldr	r1, [pc, #12]	; bf14 <CDWHCIDevice::~CDWHCIDevice()+0xd8>
    bf04:	e59f0010 	ldr	r0, [pc, #16]	; bf1c <CDWHCIDevice::~CDWHCIDevice()+0xe0>
    bf08:	eb0061dd 	bl	24684 <assertion_failed>
    bf0c:	0003efb4 	.word	0x0003efb4
    bf10:	00028001 	.word	0x00028001
    bf14:	0003ea28 	.word	0x0003ea28
    bf18:	0003ea88 	.word	0x0003ea88
    bf1c:	0003ea70 	.word	0x0003ea70

0000bf20 <CDWHCIDevice::~CDWHCIDevice()>:
    bf20:	e92d4010 	push	{r4, lr}
    bf24:	e1a04000 	mov	r4, r0
    bf28:	ebffffc3 	bl	be3c <CDWHCIDevice::~CDWHCIDevice()>
    bf2c:	e1a00004 	mov	r0, r4
    bf30:	e3a01084 	mov	r1, #132	; 0x84
    bf34:	eb007be7 	bl	2aed8 <operator delete(void*, unsigned int)>
    bf38:	e1a00004 	mov	r0, r4
    bf3c:	e8bd8010 	pop	{r4, pc}

0000bf40 <CDWHCIDevice::ReScanDevices()>:
    bf40:	e92d4010 	push	{r4, lr}
    bf44:	e3a03000 	mov	r3, #0
    bf48:	e1a04000 	mov	r4, r0
    bf4c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    bf50:	e5d03080 	ldrb	r3, [r0, #128]	; 0x80
    bf54:	e3530000 	cmp	r3, #0
    bf58:	1a000016 	bne	bfb8 <CDWHCIDevice::ReScanDevices()+0x78>
    bf5c:	ebfffd77 	bl	b540 <CDWHCIDevice::EnableRootPort()>
    bf60:	e3500000 	cmp	r0, #0
    bf64:	1a000007 	bne	bf88 <CDWHCIDevice::ReScanDevices()+0x48>
    bf68:	eb006aad 	bl	26a24 <CLogger::Get()>
    bf6c:	e3a02002 	mov	r2, #2
    bf70:	e59f304c 	ldr	r3, [pc, #76]	; bfc4 <CDWHCIDevice::ReScanDevices()+0x84>
    bf74:	e59f104c 	ldr	r1, [pc, #76]	; bfc8 <CDWHCIDevice::ReScanDevices()+0x88>
    bf78:	eb0069eb 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bf7c:	e3a03000 	mov	r3, #0
    bf80:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bf84:	e8bd8010 	pop	{r4, pc}
    bf88:	e3a03001 	mov	r3, #1
    bf8c:	e2840074 	add	r0, r4, #116	; 0x74
    bf90:	e5c43080 	strb	r3, [r4, #128]	; 0x80
    bf94:	eb000421 	bl	d020 <CDWHCIRootPort::Initialize()>
    bf98:	e3500000 	cmp	r0, #0
    bf9c:	1afffff6 	bne	bf7c <CDWHCIDevice::ReScanDevices()+0x3c>
    bfa0:	eb006a9f 	bl	26a24 <CLogger::Get()>
    bfa4:	e3a02002 	mov	r2, #2
    bfa8:	e59f301c 	ldr	r3, [pc, #28]	; bfcc <CDWHCIDevice::ReScanDevices()+0x8c>
    bfac:	e59f1014 	ldr	r1, [pc, #20]	; bfc8 <CDWHCIDevice::ReScanDevices()+0x88>
    bfb0:	eb0069dd 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bfb4:	eafffff0 	b	bf7c <CDWHCIDevice::ReScanDevices()+0x3c>
    bfb8:	e2800074 	add	r0, r0, #116	; 0x74
    bfbc:	eb0003f8 	bl	cfa4 <CDWHCIRootPort::ReScanDevices()>
    bfc0:	eaffffed 	b	bf7c <CDWHCIDevice::ReScanDevices()+0x3c>
    bfc4:	0003ef28 	.word	0x0003ef28
    bfc8:	0003efa4 	.word	0x0003efa4
    bfcc:	0003ef0c 	.word	0x0003ef0c

0000bfd0 <CDWHCIDevice::Initialize()>:
    bfd0:	e92d4070 	push	{r4, r5, r6, lr}
    bfd4:	e3a01001 	mov	r1, #1
    bfd8:	e24dd020 	sub	sp, sp, #32
    bfdc:	e1a04000 	mov	r4, r0
    bfe0:	e3a00020 	mov	r0, #32
    bfe4:	eb002183 	bl	145f8 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
    bfe8:	e3a01001 	mov	r1, #1
    bfec:	e3a00010 	mov	r0, #16
    bff0:	eb0006f4 	bl	dbc8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>
    bff4:	e3a01001 	mov	r1, #1
    bff8:	e3a00010 	mov	r0, #16
    bffc:	eb000138 	bl	c4e4 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    c000:	e3a01001 	mov	r1, #1
    c004:	e3a00010 	mov	r0, #16
    c008:	eb0002e5 	bl	cba4 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    c00c:	e3a01001 	mov	r1, #1
    c010:	e3a00010 	mov	r0, #16
    c014:	eb0001d2 	bl	c764 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>
    c018:	e3a06000 	mov	r6, #0
    c01c:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    c020:	e5943004 	ldr	r3, [r4, #4]
    c024:	e1530006 	cmp	r3, r6
    c028:	0a00004c 	beq	c160 <CDWHCIDevice::Initialize()+0x190>
    c02c:	e5943008 	ldr	r3, [r4, #8]
    c030:	e3530000 	cmp	r3, #0
    c034:	0a00004d 	beq	c170 <CDWHCIDevice::Initialize()+0x1a0>
    c038:	e59f1168 	ldr	r1, [pc, #360]	; c1a8 <CDWHCIDevice::Initialize()+0x1d8>
    c03c:	e28d0008 	add	r0, sp, #8
    c040:	eb0002f3 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c044:	e28d0008 	add	r0, sp, #8
    c048:	eb0002fa 	bl	cc38 <CDWHCIRegister::Read()>
    c04c:	e59f3158 	ldr	r3, [pc, #344]	; c1ac <CDWHCIDevice::Initialize()+0x1dc>
    c050:	e1500003 	cmp	r0, r3
    c054:	1a000024 	bne	c0ec <CDWHCIDevice::Initialize()+0x11c>
    c058:	e1a00004 	mov	r0, r4
    c05c:	ebfff73c 	bl	9d54 <CDWHCIDevice::PowerOn()>
    c060:	e2505000 	subs	r5, r0, #0
    c064:	0a000037 	beq	c148 <CDWHCIDevice::Initialize()+0x178>
    c068:	e59f1140 	ldr	r1, [pc, #320]	; c1b0 <CDWHCIDevice::Initialize()+0x1e0>
    c06c:	e28d0014 	add	r0, sp, #20
    c070:	eb0002e7 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c074:	e28d0014 	add	r0, sp, #20
    c078:	eb0002ee 	bl	cc38 <CDWHCIRegister::Read()>
    c07c:	e3e01001 	mvn	r1, #1
    c080:	e28d0014 	add	r0, sp, #20
    c084:	eb00031f 	bl	cd08 <CDWHCIRegister::And(unsigned int)>
    c088:	e28d0014 	add	r0, sp, #20
    c08c:	eb0002f0 	bl	cc54 <CDWHCIRegister::Write()>
    c090:	e5940004 	ldr	r0, [r4, #4]
    c094:	e3500000 	cmp	r0, #0
    c098:	0a00003e 	beq	c198 <CDWHCIDevice::Initialize()+0x1c8>
    c09c:	e1a03004 	mov	r3, r4
    c0a0:	e3a01009 	mov	r1, #9
    c0a4:	e59f2108 	ldr	r2, [pc, #264]	; c1b4 <CDWHCIDevice::Initialize()+0x1e4>
    c0a8:	eb007fa7 	bl	2bf4c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    c0ac:	e1a00004 	mov	r0, r4
    c0b0:	ebfffd81 	bl	b6bc <CDWHCIDevice::InitCore()>
    c0b4:	e2505000 	subs	r5, r0, #0
    c0b8:	0a00001c 	beq	c130 <CDWHCIDevice::Initialize()+0x160>
    c0bc:	e1a00004 	mov	r0, r4
    c0c0:	ebfff73e 	bl	9dc0 <CDWHCIDevice::EnableGlobalInterrupts()>
    c0c4:	e1a00004 	mov	r0, r4
    c0c8:	ebfffe57 	bl	ba2c <CDWHCIDevice::InitHost()>
    c0cc:	e2505000 	subs	r5, r0, #0
    c0d0:	0a00002a 	beq	c180 <CDWHCIDevice::Initialize()+0x1b0>
    c0d4:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
    c0d8:	e1a00004 	mov	r0, r4
    c0dc:	ebffff97 	bl	bf40 <CDWHCIDevice::ReScanDevices()>
    c0e0:	e28d0014 	add	r0, sp, #20
    c0e4:	eb0002d2 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    c0e8:	ea00000b 	b	c11c <CDWHCIDevice::Initialize()+0x14c>
    c0ec:	eb006a4c 	bl	26a24 <CLogger::Get()>
    c0f0:	e1a04000 	mov	r4, r0
    c0f4:	e28d0008 	add	r0, sp, #8
    c0f8:	eb0002e3 	bl	cc8c <CDWHCIRegister::Get() const>
    c0fc:	e1a02000 	mov	r2, r0
    c100:	e59f30b0 	ldr	r3, [pc, #176]	; c1b8 <CDWHCIDevice::Initialize()+0x1e8>
    c104:	e58d2000 	str	r2, [sp]
    c108:	e1a00004 	mov	r0, r4
    c10c:	e3a02001 	mov	r2, #1
    c110:	e59f10a4 	ldr	r1, [pc, #164]	; c1bc <CDWHCIDevice::Initialize()+0x1ec>
    c114:	e1a05006 	mov	r5, r6
    c118:	eb006983 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c11c:	e28d0008 	add	r0, sp, #8
    c120:	eb0002c3 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    c124:	e1a00005 	mov	r0, r5
    c128:	e28dd020 	add	sp, sp, #32
    c12c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c130:	eb006a3b 	bl	26a24 <CLogger::Get()>
    c134:	e3a02001 	mov	r2, #1
    c138:	e59f3080 	ldr	r3, [pc, #128]	; c1c0 <CDWHCIDevice::Initialize()+0x1f0>
    c13c:	e59f1078 	ldr	r1, [pc, #120]	; c1bc <CDWHCIDevice::Initialize()+0x1ec>
    c140:	eb006979 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c144:	eaffffe5 	b	c0e0 <CDWHCIDevice::Initialize()+0x110>
    c148:	eb006a35 	bl	26a24 <CLogger::Get()>
    c14c:	e3a02001 	mov	r2, #1
    c150:	e59f306c 	ldr	r3, [pc, #108]	; c1c4 <CDWHCIDevice::Initialize()+0x1f4>
    c154:	e59f1060 	ldr	r1, [pc, #96]	; c1bc <CDWHCIDevice::Initialize()+0x1ec>
    c158:	eb006973 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c15c:	eaffffee 	b	c11c <CDWHCIDevice::Initialize()+0x14c>
    c160:	e3a0207a 	mov	r2, #122	; 0x7a
    c164:	e59f105c 	ldr	r1, [pc, #92]	; c1c8 <CDWHCIDevice::Initialize()+0x1f8>
    c168:	e59f005c 	ldr	r0, [pc, #92]	; c1cc <CDWHCIDevice::Initialize()+0x1fc>
    c16c:	eb006144 	bl	24684 <assertion_failed>
    c170:	e3a0207b 	mov	r2, #123	; 0x7b
    c174:	e59f104c 	ldr	r1, [pc, #76]	; c1c8 <CDWHCIDevice::Initialize()+0x1f8>
    c178:	e59f0050 	ldr	r0, [pc, #80]	; c1d0 <CDWHCIDevice::Initialize()+0x200>
    c17c:	eb006140 	bl	24684 <assertion_failed>
    c180:	eb006a27 	bl	26a24 <CLogger::Get()>
    c184:	e3a02001 	mov	r2, #1
    c188:	e59f3044 	ldr	r3, [pc, #68]	; c1d4 <CDWHCIDevice::Initialize()+0x204>
    c18c:	e59f1028 	ldr	r1, [pc, #40]	; c1bc <CDWHCIDevice::Initialize()+0x1ec>
    c190:	eb006965 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c194:	eaffffd1 	b	c0e0 <CDWHCIDevice::Initialize()+0x110>
    c198:	e3a02090 	mov	r2, #144	; 0x90
    c19c:	e59f1024 	ldr	r1, [pc, #36]	; c1c8 <CDWHCIDevice::Initialize()+0x1f8>
    c1a0:	e59f0024 	ldr	r0, [pc, #36]	; c1cc <CDWHCIDevice::Initialize()+0x1fc>
    c1a4:	eb006136 	bl	24684 <assertion_failed>
    c1a8:	20980040 	.word	0x20980040
    c1ac:	4f54280a 	.word	0x4f54280a
    c1b0:	20980008 	.word	0x20980008
    c1b4:	0000afac 	.word	0x0000afac
    c1b8:	0003ef4c 	.word	0x0003ef4c
    c1bc:	0003efa4 	.word	0x0003efa4
    c1c0:	0003ef74 	.word	0x0003ef74
    c1c4:	0003ef64 	.word	0x0003ef64
    c1c8:	0003ea28 	.word	0x0003ea28
    c1cc:	0003ea70 	.word	0x0003ea70
    c1d0:	0003ea88 	.word	0x0003ea88
    c1d4:	0003ef8c 	.word	0x0003ef8c

0000c1d8 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    c1d8:	e12fff1e 	bx	lr

0000c1dc <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
    c1dc:	e3a03000 	mov	r3, #0
    c1e0:	e5803008 	str	r3, [r0, #8]
    c1e4:	e12fff1e 	bx	lr

0000c1e8 <CDWHCIFrameSchedulerNonPeriodic::WaitForFrame()>:
    c1e8:	e12fff1e 	bx	lr

0000c1ec <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
    c1ec:	e3a00000 	mov	r0, #0
    c1f0:	e12fff1e 	bx	lr

0000c1f4 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
    c1f4:	e5903008 	ldr	r3, [r0, #8]
    c1f8:	e92d4010 	push	{r4, lr}
    c1fc:	e3530003 	cmp	r3, #3
    c200:	8a000008 	bhi	c228 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x34>
    c204:	e3530001 	cmp	r3, #1
    c208:	8a00000c 	bhi	c240 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x4c>
    c20c:	03a01002 	moveq	r1, #2
    c210:	03a02003 	moveq	r2, #3
    c214:	05801008 	streq	r1, [r0, #8]
    c218:	0580200c 	streq	r2, [r0, #12]
    c21c:	1a00000b 	bne	c250 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x5c>
    c220:	e1a00003 	mov	r0, r3
    c224:	e8bd8010 	pop	{r4, pc}
    c228:	e2433004 	sub	r3, r3, #4
    c22c:	e3530001 	cmp	r3, #1
    c230:	8a000006 	bhi	c250 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x5c>
    c234:	e3a03000 	mov	r3, #0
    c238:	e1a00003 	mov	r0, r3
    c23c:	e8bd8010 	pop	{r4, pc}
    c240:	e59f0018 	ldr	r0, [pc, #24]	; c260 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x6c>
    c244:	eb0076ac 	bl	29cfc <CTimer::SimpleusDelay(unsigned int)>
    c248:	e3a03001 	mov	r3, #1
    c24c:	eafffff3 	b	c220 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x2c>
    c250:	e3a0205f 	mov	r2, #95	; 0x5f
    c254:	e59f1008 	ldr	r1, [pc, #8]	; c264 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x70>
    c258:	e59f0008 	ldr	r0, [pc, #8]	; c268 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x74>
    c25c:	eb006108 	bl	24684 <assertion_failed>
    c260:	00000271 	.word	0x00000271
    c264:	0003efc4 	.word	0x0003efc4
    c268:	0003f63c 	.word	0x0003f63c

0000c26c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
    c26c:	e92d4010 	push	{r4, lr}
    c270:	e5903008 	ldr	r3, [r0, #8]
    c274:	e1a04000 	mov	r4, r0
    c278:	e3530000 	cmp	r3, #0
    c27c:	e24dd010 	sub	sp, sp, #16
    c280:	0a000013 	beq	c2d4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x68>
    c284:	e2433002 	sub	r3, r3, #2
    c288:	e3530001 	cmp	r3, #1
    c28c:	8a000024 	bhi	c324 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xb8>
    c290:	e3110001 	tst	r1, #1
    c294:	13a03004 	movne	r3, #4
    c298:	15803008 	strne	r3, [r0, #8]
    c29c:	1a00000a 	bne	c2cc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    c2a0:	e3110060 	tst	r1, #96	; 0x60
    c2a4:	1a000012 	bne	c2f4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x88>
    c2a8:	e3110010 	tst	r1, #16
    c2ac:	0a000020 	beq	c334 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xc8>
    c2b0:	e590300c 	ldr	r3, [r0, #12]
    c2b4:	e3530000 	cmp	r3, #0
    c2b8:	e2433001 	sub	r3, r3, #1
    c2bc:	e580300c 	str	r3, [r0, #12]
    c2c0:	0a000014 	beq	c318 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xac>
    c2c4:	e3a03003 	mov	r3, #3
    c2c8:	e5843008 	str	r3, [r4, #8]
    c2cc:	e28dd010 	add	sp, sp, #16
    c2d0:	e8bd8010 	pop	{r4, pc}
    c2d4:	e3110020 	tst	r1, #32
    c2d8:	13a03001 	movne	r3, #1
    c2dc:	15803008 	strne	r3, [r0, #8]
    c2e0:	1afffff9 	bne	c2cc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    c2e4:	e3a0206b 	mov	r2, #107	; 0x6b
    c2e8:	e59f1074 	ldr	r1, [pc, #116]	; c364 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    c2ec:	e59f0074 	ldr	r0, [pc, #116]	; c368 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xfc>
    c2f0:	eb0060e3 	bl	24684 <assertion_failed>
    c2f4:	e590300c 	ldr	r3, [r0, #12]
    c2f8:	e3530000 	cmp	r3, #0
    c2fc:	e2433001 	sub	r3, r3, #1
    c300:	e580300c 	str	r3, [r0, #12]
    c304:	1affffee 	bne	c2c4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x58>
    c308:	e3a03005 	mov	r3, #5
    c30c:	e5843008 	str	r3, [r4, #8]
    c310:	e28dd010 	add	sp, sp, #16
    c314:	e8bd8010 	pop	{r4, pc}
    c318:	e59f004c 	ldr	r0, [pc, #76]	; c36c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x100>
    c31c:	eb007676 	bl	29cfc <CTimer::SimpleusDelay(unsigned int)>
    c320:	eafffff8 	b	c308 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x9c>
    c324:	e3a0209b 	mov	r2, #155	; 0x9b
    c328:	e59f1034 	ldr	r1, [pc, #52]	; c364 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    c32c:	e59f003c 	ldr	r0, [pc, #60]	; c370 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x104>
    c330:	eb0060d3 	bl	24684 <assertion_failed>
    c334:	e58d100c 	str	r1, [sp, #12]
    c338:	eb0069b9 	bl	26a24 <CLogger::Get()>
    c33c:	e59d100c 	ldr	r1, [sp, #12]
    c340:	e3a02001 	mov	r2, #1
    c344:	e58d1000 	str	r1, [sp]
    c348:	e59f3024 	ldr	r3, [pc, #36]	; c374 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x108>
    c34c:	e59f1024 	ldr	r1, [pc, #36]	; c378 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x10c>
    c350:	eb0068f5 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c354:	e3a02096 	mov	r2, #150	; 0x96
    c358:	e59f1004 	ldr	r1, [pc, #4]	; c364 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    c35c:	e59f000c 	ldr	r0, [pc, #12]	; c370 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x104>
    c360:	eb0060c7 	bl	24684 <assertion_failed>
    c364:	0003efc4 	.word	0x0003efc4
    c368:	0003efdc 	.word	0x0003efdc
    c36c:	00000271 	.word	0x00000271
    c370:	0003f63c 	.word	0x0003f63c
    c374:	0003f000 	.word	0x0003f000
    c378:	0003f014 	.word	0x0003f014

0000c37c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
    c37c:	e59f3034 	ldr	r3, [pc, #52]	; c3b8 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x3c>
    c380:	e92d4010 	push	{r4, lr}
    c384:	e5803000 	str	r3, [r0]
    c388:	e1a04000 	mov	r4, r0
    c38c:	eb007688 	bl	29db4 <CTimer::Get()>
    c390:	e3a03006 	mov	r3, #6
    c394:	e3500000 	cmp	r0, #0
    c398:	e9840009 	stmib	r4, {r0, r3}
    c39c:	0a000001 	beq	c3a8 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x2c>
    c3a0:	e1a00004 	mov	r0, r4
    c3a4:	e8bd8010 	pop	{r4, pc}
    c3a8:	e3a0202e 	mov	r2, #46	; 0x2e
    c3ac:	e59f1008 	ldr	r1, [pc, #8]	; c3bc <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x40>
    c3b0:	e59f0008 	ldr	r0, [pc, #8]	; c3c0 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x44>
    c3b4:	eb0060b2 	bl	24684 <assertion_failed>
    c3b8:	0003f0a0 	.word	0x0003f0a0
    c3bc:	0003efc4 	.word	0x0003efc4
    c3c0:	0003ea88 	.word	0x0003ea88

0000c3c4 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>:
    c3c4:	e3500010 	cmp	r0, #16
    c3c8:	e92d4010 	push	{r4, lr}
    c3cc:	1a000005 	bne	c3e8 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x24>
    c3d0:	e59f3030 	ldr	r3, [pc, #48]	; c408 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x44>
    c3d4:	e5930000 	ldr	r0, [r3]
    c3d8:	e3500000 	cmp	r0, #0
    c3dc:	0a000005 	beq	c3f8 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x34>
    c3e0:	e8bd4010 	pop	{r4, lr}
    c3e4:	ea0061a8 	b	24a8c <CClassAllocator::Allocate()>
    c3e8:	e3a020bd 	mov	r2, #189	; 0xbd
    c3ec:	e59f1018 	ldr	r1, [pc, #24]	; c40c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x48>
    c3f0:	e59f0018 	ldr	r0, [pc, #24]	; c410 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x4c>
    c3f4:	eb0060a2 	bl	24684 <assertion_failed>
    c3f8:	e3a020bd 	mov	r2, #189	; 0xbd
    c3fc:	e59f1008 	ldr	r1, [pc, #8]	; c40c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x48>
    c400:	e59f000c 	ldr	r0, [pc, #12]	; c414 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x50>
    c404:	eb00609e 	bl	24684 <assertion_failed>
    c408:	0004da68 	.word	0x0004da68
    c40c:	0003efc4 	.word	0x0003efc4
    c410:	0003f01c 	.word	0x0003f01c
    c414:	0003f050 	.word	0x0003f050

0000c418 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>:
    c418:	e3510010 	cmp	r1, #16
    c41c:	e92d4010 	push	{r4, lr}
    c420:	1a000006 	bne	c440 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x28>
    c424:	e59f3034 	ldr	r3, [pc, #52]	; c460 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x48>
    c428:	e1a01000 	mov	r1, r0
    c42c:	e5930000 	ldr	r0, [r3]
    c430:	e3500000 	cmp	r0, #0
    c434:	0a000005 	beq	c450 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x38>
    c438:	e8bd4010 	pop	{r4, lr}
    c43c:	ea0061cd 	b	24b78 <CClassAllocator::Free(void*)>
    c440:	e3a020bd 	mov	r2, #189	; 0xbd
    c444:	e59f1018 	ldr	r1, [pc, #24]	; c464 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x4c>
    c448:	e59f0018 	ldr	r0, [pc, #24]	; c468 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x50>
    c44c:	eb00608c 	bl	24684 <assertion_failed>
    c450:	e3a020bd 	mov	r2, #189	; 0xbd
    c454:	e59f1008 	ldr	r1, [pc, #8]	; c464 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x4c>
    c458:	e59f000c 	ldr	r0, [pc, #12]	; c46c <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x54>
    c45c:	eb006088 	bl	24684 <assertion_failed>
    c460:	0004da68 	.word	0x0004da68
    c464:	0003efc4 	.word	0x0003efc4
    c468:	0003f01c 	.word	0x0003f01c
    c46c:	0003f050 	.word	0x0003f050

0000c470 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    c470:	e92d4010 	push	{r4, lr}
    c474:	e1a04000 	mov	r4, r0
    c478:	e3a01010 	mov	r1, #16
    c47c:	ebffffe5 	bl	c418 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>
    c480:	e1a00004 	mov	r0, r4
    c484:	e8bd8010 	pop	{r4, pc}

0000c488 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)>:
    c488:	e92d4070 	push	{r4, r5, r6, lr}
    c48c:	e59f6040 	ldr	r6, [pc, #64]	; c4d4 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x4c>
    c490:	e5963000 	ldr	r3, [r6]
    c494:	e3530000 	cmp	r3, #0
    c498:	1a000009 	bne	c4c4 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x3c>
    c49c:	e1a04000 	mov	r4, r0
    c4a0:	e3a0001c 	mov	r0, #28
    c4a4:	eb007a7d 	bl	2aea0 <operator new(unsigned int)>
    c4a8:	e1a05000 	mov	r5, r0
    c4ac:	e1a02004 	mov	r2, r4
    c4b0:	e3a01010 	mov	r1, #16
    c4b4:	e59f301c 	ldr	r3, [pc, #28]	; c4d8 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x50>
    c4b8:	eb00615a 	bl	24a28 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    c4bc:	e5865000 	str	r5, [r6]
    c4c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c4c4:	e3a020bd 	mov	r2, #189	; 0xbd
    c4c8:	e59f100c 	ldr	r1, [pc, #12]	; c4dc <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x54>
    c4cc:	e59f000c 	ldr	r0, [pc, #12]	; c4e0 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x58>
    c4d0:	eb00606b 	bl	24684 <assertion_failed>
    c4d4:	0004da68 	.word	0x0004da68
    c4d8:	0003f078 	.word	0x0003f078
    c4dc:	0003efc4 	.word	0x0003efc4
    c4e0:	0003f064 	.word	0x0003f064

0000c4e4 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    c4e4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c4e8:	e59f7054 	ldr	r7, [pc, #84]	; c544 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    c4ec:	e24dd00c 	sub	sp, sp, #12
    c4f0:	e5973000 	ldr	r3, [r7]
    c4f4:	e3530000 	cmp	r3, #0
    c4f8:	1a00000d 	bne	c534 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    c4fc:	e1a05001 	mov	r5, r1
    c500:	e1a04000 	mov	r4, r0
    c504:	e3a0001c 	mov	r0, #28
    c508:	eb007a64 	bl	2aea0 <operator new(unsigned int)>
    c50c:	e59f1034 	ldr	r1, [pc, #52]	; c548 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    c510:	e1a03005 	mov	r3, r5
    c514:	e58d1000 	str	r1, [sp]
    c518:	e1a02004 	mov	r2, r4
    c51c:	e3a01010 	mov	r1, #16
    c520:	e1a06000 	mov	r6, r0
    c524:	eb00614b 	bl	24a58 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c528:	e5876000 	str	r6, [r7]
    c52c:	e28dd00c 	add	sp, sp, #12
    c530:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c534:	e3a020bd 	mov	r2, #189	; 0xbd
    c538:	e59f100c 	ldr	r1, [pc, #12]	; c54c <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    c53c:	e59f000c 	ldr	r0, [pc, #12]	; c550 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    c540:	eb00604f 	bl	24684 <assertion_failed>
    c544:	0004da68 	.word	0x0004da68
    c548:	0003f078 	.word	0x0003f078
    c54c:	0003efc4 	.word	0x0003efc4
    c550:	0003f064 	.word	0x0003f064

0000c554 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    c554:	e12fff1e 	bx	lr

0000c558 <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
    c558:	e1d000b6 	ldrh	r0, [r0, #6]
    c55c:	e2000001 	and	r0, r0, #1
    c560:	e12fff1e 	bx	lr

0000c564 <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
    c564:	e3a02026 	mov	r2, #38	; 0x26
    c568:	e92d4010 	push	{r4, lr}
    c56c:	e59f1004 	ldr	r1, [pc, #4]	; c578 <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x14>
    c570:	e59f0004 	ldr	r0, [pc, #4]	; c57c <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x18>
    c574:	eb006042 	bl	24684 <assertion_failed>
    c578:	0003f0bc 	.word	0x0003f0bc
    c57c:	0003f63c 	.word	0x0003f63c

0000c580 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
    c580:	e3a0202b 	mov	r2, #43	; 0x2b
    c584:	e92d4010 	push	{r4, lr}
    c588:	e59f1004 	ldr	r1, [pc, #4]	; c594 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x14>
    c58c:	e59f0004 	ldr	r0, [pc, #4]	; c598 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x18>
    c590:	eb00603b 	bl	24684 <assertion_failed>
    c594:	0003f0bc 	.word	0x0003f0bc
    c598:	0003f63c 	.word	0x0003f63c

0000c59c <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
    c59c:	e3a02031 	mov	r2, #49	; 0x31
    c5a0:	e92d4010 	push	{r4, lr}
    c5a4:	e59f1004 	ldr	r1, [pc, #4]	; c5b0 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x14>
    c5a8:	e59f0004 	ldr	r0, [pc, #4]	; c5b4 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x18>
    c5ac:	eb006034 	bl	24684 <assertion_failed>
    c5b0:	0003f0bc 	.word	0x0003f0bc
    c5b4:	0003f63c 	.word	0x0003f63c

0000c5b8 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()>:
    c5b8:	e92d4030 	push	{r4, r5, lr}
    c5bc:	e24dd014 	sub	sp, sp, #20
    c5c0:	e1a04000 	mov	r4, r0
    c5c4:	e59f1054 	ldr	r1, [pc, #84]	; c620 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x68>
    c5c8:	e28d0004 	add	r0, sp, #4
    c5cc:	eb000190 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c5d0:	e28d0004 	add	r0, sp, #4
    c5d4:	eb000197 	bl	cc38 <CDWHCIRegister::Read()>
    c5d8:	e59f5044 	ldr	r5, [pc, #68]	; c624 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x6c>
    c5dc:	e5d43004 	ldrb	r3, [r4, #4]
    c5e0:	e2800001 	add	r0, r0, #1
    c5e4:	e0000005 	and	r0, r0, r5
    c5e8:	e3530000 	cmp	r3, #0
    c5ec:	e1c400b6 	strh	r0, [r4, #6]
    c5f0:	0a000003 	beq	c604 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x4c>
    c5f4:	e28d0004 	add	r0, sp, #4
    c5f8:	eb00018d 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    c5fc:	e28dd014 	add	sp, sp, #20
    c600:	e8bd8030 	pop	{r4, r5, pc}
    c604:	e28d0004 	add	r0, sp, #4
    c608:	eb00018a 	bl	cc38 <CDWHCIRegister::Read()>
    c60c:	e1d420b6 	ldrh	r2, [r4, #6]
    c610:	e0003005 	and	r3, r0, r5
    c614:	e1530002 	cmp	r3, r2
    c618:	1afffff9 	bne	c604 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x4c>
    c61c:	eafffff4 	b	c5f4 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x3c>
    c620:	20980408 	.word	0x20980408
    c624:	00003fff 	.word	0x00003fff

0000c628 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>:
    c628:	e3a02901 	mov	r2, #16384	; 0x4000
    c62c:	e59fc00c 	ldr	ip, [pc, #12]	; c640 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)+0x18>
    c630:	e5c01004 	strb	r1, [r0, #4]
    c634:	e580c000 	str	ip, [r0]
    c638:	e1c020b6 	strh	r2, [r0, #6]
    c63c:	e12fff1e 	bx	lr
    c640:	0003f12c 	.word	0x0003f12c

0000c644 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>:
    c644:	e3500008 	cmp	r0, #8
    c648:	e92d4010 	push	{r4, lr}
    c64c:	1a000005 	bne	c668 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x24>
    c650:	e59f3030 	ldr	r3, [pc, #48]	; c688 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x44>
    c654:	e5930000 	ldr	r0, [r3]
    c658:	e3500000 	cmp	r0, #0
    c65c:	0a000005 	beq	c678 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x34>
    c660:	e8bd4010 	pop	{r4, lr}
    c664:	ea006108 	b	24a8c <CClassAllocator::Allocate()>
    c668:	e3a0205a 	mov	r2, #90	; 0x5a
    c66c:	e59f1018 	ldr	r1, [pc, #24]	; c68c <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x48>
    c670:	e59f0018 	ldr	r0, [pc, #24]	; c690 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x4c>
    c674:	eb006002 	bl	24684 <assertion_failed>
    c678:	e3a0205a 	mov	r2, #90	; 0x5a
    c67c:	e59f1008 	ldr	r1, [pc, #8]	; c68c <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x48>
    c680:	e59f000c 	ldr	r0, [pc, #12]	; c694 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x50>
    c684:	eb005ffe 	bl	24684 <assertion_failed>
    c688:	0004da6c 	.word	0x0004da6c
    c68c:	0003f0bc 	.word	0x0003f0bc
    c690:	0003f0d8 	.word	0x0003f0d8
    c694:	0003f050 	.word	0x0003f050

0000c698 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>:
    c698:	e3510008 	cmp	r1, #8
    c69c:	e92d4010 	push	{r4, lr}
    c6a0:	1a000006 	bne	c6c0 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x28>
    c6a4:	e59f3034 	ldr	r3, [pc, #52]	; c6e0 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x48>
    c6a8:	e1a01000 	mov	r1, r0
    c6ac:	e5930000 	ldr	r0, [r3]
    c6b0:	e3500000 	cmp	r0, #0
    c6b4:	0a000005 	beq	c6d0 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x38>
    c6b8:	e8bd4010 	pop	{r4, lr}
    c6bc:	ea00612d 	b	24b78 <CClassAllocator::Free(void*)>
    c6c0:	e3a0205a 	mov	r2, #90	; 0x5a
    c6c4:	e59f1018 	ldr	r1, [pc, #24]	; c6e4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x4c>
    c6c8:	e59f0018 	ldr	r0, [pc, #24]	; c6e8 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x50>
    c6cc:	eb005fec 	bl	24684 <assertion_failed>
    c6d0:	e3a0205a 	mov	r2, #90	; 0x5a
    c6d4:	e59f1008 	ldr	r1, [pc, #8]	; c6e4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x4c>
    c6d8:	e59f000c 	ldr	r0, [pc, #12]	; c6ec <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x54>
    c6dc:	eb005fe8 	bl	24684 <assertion_failed>
    c6e0:	0004da6c 	.word	0x0004da6c
    c6e4:	0003f0bc 	.word	0x0003f0bc
    c6e8:	0003f0d8 	.word	0x0003f0d8
    c6ec:	0003f050 	.word	0x0003f050

0000c6f0 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    c6f0:	e92d4010 	push	{r4, lr}
    c6f4:	e1a04000 	mov	r4, r0
    c6f8:	e3a01008 	mov	r1, #8
    c6fc:	ebffffe5 	bl	c698 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>
    c700:	e1a00004 	mov	r0, r4
    c704:	e8bd8010 	pop	{r4, pc}

0000c708 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)>:
    c708:	e92d4070 	push	{r4, r5, r6, lr}
    c70c:	e59f6040 	ldr	r6, [pc, #64]	; c754 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x4c>
    c710:	e5963000 	ldr	r3, [r6]
    c714:	e3530000 	cmp	r3, #0
    c718:	1a000009 	bne	c744 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x3c>
    c71c:	e1a04000 	mov	r4, r0
    c720:	e3a0001c 	mov	r0, #28
    c724:	eb0079dd 	bl	2aea0 <operator new(unsigned int)>
    c728:	e1a05000 	mov	r5, r0
    c72c:	e1a02004 	mov	r2, r4
    c730:	e3a01008 	mov	r1, #8
    c734:	e59f301c 	ldr	r3, [pc, #28]	; c758 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x50>
    c738:	eb0060ba 	bl	24a28 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    c73c:	e5865000 	str	r5, [r6]
    c740:	e8bd8070 	pop	{r4, r5, r6, pc}
    c744:	e3a0205a 	mov	r2, #90	; 0x5a
    c748:	e59f100c 	ldr	r1, [pc, #12]	; c75c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x54>
    c74c:	e59f000c 	ldr	r0, [pc, #12]	; c760 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x58>
    c750:	eb005fcb 	bl	24684 <assertion_failed>
    c754:	0004da6c 	.word	0x0004da6c
    c758:	0003f108 	.word	0x0003f108
    c75c:	0003f0bc 	.word	0x0003f0bc
    c760:	0003f064 	.word	0x0003f064

0000c764 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>:
    c764:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c768:	e59f7054 	ldr	r7, [pc, #84]	; c7c4 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    c76c:	e24dd00c 	sub	sp, sp, #12
    c770:	e5973000 	ldr	r3, [r7]
    c774:	e3530000 	cmp	r3, #0
    c778:	1a00000d 	bne	c7b4 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    c77c:	e1a05001 	mov	r5, r1
    c780:	e1a04000 	mov	r4, r0
    c784:	e3a0001c 	mov	r0, #28
    c788:	eb0079c4 	bl	2aea0 <operator new(unsigned int)>
    c78c:	e59f1034 	ldr	r1, [pc, #52]	; c7c8 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    c790:	e1a03005 	mov	r3, r5
    c794:	e58d1000 	str	r1, [sp]
    c798:	e1a02004 	mov	r2, r4
    c79c:	e3a01008 	mov	r1, #8
    c7a0:	e1a06000 	mov	r6, r0
    c7a4:	eb0060ab 	bl	24a58 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c7a8:	e5876000 	str	r6, [r7]
    c7ac:	e28dd00c 	add	sp, sp, #12
    c7b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c7b4:	e3a0205a 	mov	r2, #90	; 0x5a
    c7b8:	e59f100c 	ldr	r1, [pc, #12]	; c7cc <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    c7bc:	e59f000c 	ldr	r0, [pc, #12]	; c7d0 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    c7c0:	eb005faf 	bl	24684 <assertion_failed>
    c7c4:	0004da6c 	.word	0x0004da6c
    c7c8:	0003f108 	.word	0x0003f108
    c7cc:	0003f0bc 	.word	0x0003f0bc
    c7d0:	0003f064 	.word	0x0003f064

0000c7d4 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    c7d4:	e12fff1e 	bx	lr

0000c7d8 <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
    c7d8:	e3a02901 	mov	r2, #16384	; 0x4000
    c7dc:	e3a03000 	mov	r3, #0
    c7e0:	e1c021b0 	strh	r2, [r0, #16]
    c7e4:	e5803008 	str	r3, [r0, #8]
    c7e8:	e12fff1e 	bx	lr

0000c7ec <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
    c7ec:	e1d001b0 	ldrh	r0, [r0, #16]
    c7f0:	e2000001 	and	r0, r0, #1
    c7f4:	e12fff1e 	bx	lr

0000c7f8 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()>:
    c7f8:	e92d4010 	push	{r4, lr}
    c7fc:	e1a04000 	mov	r4, r0
    c800:	e24dd010 	sub	sp, sp, #16
    c804:	e59f1058 	ldr	r1, [pc, #88]	; c864 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x6c>
    c808:	e28d0004 	add	r0, sp, #4
    c80c:	eb000100 	bl	cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c810:	e1d431b0 	ldrh	r3, [r4, #16]
    c814:	e3530901 	cmp	r3, #16384	; 0x4000
    c818:	0a000009 	beq	c844 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x4c>
    c81c:	e28d0004 	add	r0, sp, #4
    c820:	eb000104 	bl	cc38 <CDWHCIRegister::Read()>
    c824:	e1d431b0 	ldrh	r3, [r4, #16]
    c828:	e2000007 	and	r0, r0, #7
    c82c:	e1500003 	cmp	r0, r3
    c830:	1afffff9 	bne	c81c <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
    c834:	e28d0004 	add	r0, sp, #4
    c838:	eb0000fd 	bl	cc34 <CDWHCIRegister::~CDWHCIRegister()>
    c83c:	e28dd010 	add	sp, sp, #16
    c840:	e8bd8010 	pop	{r4, pc}
    c844:	e28d0004 	add	r0, sp, #4
    c848:	eb0000fa 	bl	cc38 <CDWHCIRegister::Read()>
    c84c:	e2800001 	add	r0, r0, #1
    c850:	e2003007 	and	r3, r0, #7
    c854:	e3530006 	cmp	r3, #6
    c858:	03a03007 	moveq	r3, #7
    c85c:	e1c431b0 	strh	r3, [r4, #16]
    c860:	eaffffed 	b	c81c <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
    c864:	20980408 	.word	0x20980408

0000c868 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
    c868:	e5903008 	ldr	r3, [r0, #8]
    c86c:	e92d4010 	push	{r4, lr}
    c870:	e3530003 	cmp	r3, #3
    c874:	0a000016 	beq	c8d4 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x6c>
    c878:	8a00000f 	bhi	c8bc <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x54>
    c87c:	e3530001 	cmp	r3, #1
    c880:	1a000022 	bne	c910 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xa8>
    c884:	e3a01002 	mov	r1, #2
    c888:	e1d021b0 	ldrh	r2, [r0, #16]
    c88c:	e5801008 	str	r1, [r0, #8]
    c890:	e3520901 	cmp	r2, #16384	; 0x4000
    c894:	0a000019 	beq	c900 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x98>
    c898:	e3520005 	cmp	r2, #5
    c89c:	13a01003 	movne	r1, #3
    c8a0:	03a01002 	moveq	r1, #2
    c8a4:	e2822002 	add	r2, r2, #2
    c8a8:	e2022007 	and	r2, r2, #7
    c8ac:	e1c021b0 	strh	r2, [r0, #16]
    c8b0:	e580100c 	str	r1, [r0, #12]
    c8b4:	e1a00003 	mov	r0, r3
    c8b8:	e8bd8010 	pop	{r4, pc}
    c8bc:	e2433004 	sub	r3, r3, #4
    c8c0:	e3530001 	cmp	r3, #1
    c8c4:	8a000011 	bhi	c910 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xa8>
    c8c8:	e3a03000 	mov	r3, #0
    c8cc:	e1a00003 	mov	r0, r3
    c8d0:	e8bd8010 	pop	{r4, pc}
    c8d4:	e1d031b0 	ldrh	r3, [r0, #16]
    c8d8:	e3530901 	cmp	r3, #16384	; 0x4000
    c8dc:	12833001 	addne	r3, r3, #1
    c8e0:	12033007 	andne	r3, r3, #7
    c8e4:	11c031b0 	strhne	r3, [r0, #16]
    c8e8:	13a03001 	movne	r3, #1
    c8ec:	1afffff6 	bne	c8cc <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x64>
    c8f0:	e3a02062 	mov	r2, #98	; 0x62
    c8f4:	e59f1024 	ldr	r1, [pc, #36]	; c920 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xb8>
    c8f8:	e59f0024 	ldr	r0, [pc, #36]	; c924 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    c8fc:	eb005f60 	bl	24684 <assertion_failed>
    c900:	e3a02054 	mov	r2, #84	; 0x54
    c904:	e59f1014 	ldr	r1, [pc, #20]	; c920 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xb8>
    c908:	e59f0014 	ldr	r0, [pc, #20]	; c924 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    c90c:	eb005f5c 	bl	24684 <assertion_failed>
    c910:	e3a0206e 	mov	r2, #110	; 0x6e
    c914:	e59f1004 	ldr	r1, [pc, #4]	; c920 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xb8>
    c918:	e59f0008 	ldr	r0, [pc, #8]	; c928 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc0>
    c91c:	eb005f58 	bl	24684 <assertion_failed>
    c920:	0003f148 	.word	0x0003f148
    c924:	0003f160 	.word	0x0003f160
    c928:	0003f63c 	.word	0x0003f63c

0000c92c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
    c92c:	e92d4010 	push	{r4, lr}
    c930:	e5903008 	ldr	r3, [r0, #8]
    c934:	e1a04000 	mov	r4, r0
    c938:	e3530000 	cmp	r3, #0
    c93c:	e24dd010 	sub	sp, sp, #16
    c940:	0a000010 	beq	c988 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x5c>
    c944:	e2433002 	sub	r3, r3, #2
    c948:	e3530001 	cmp	r3, #1
    c94c:	8a000022 	bhi	c9dc <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xb0>
    c950:	e3110001 	tst	r1, #1
    c954:	13a03004 	movne	r3, #4
    c958:	15803008 	strne	r3, [r0, #8]
    c95c:	1a000007 	bne	c980 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    c960:	e3110060 	tst	r1, #96	; 0x60
    c964:	1a00000f 	bne	c9a8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x7c>
    c968:	e3110010 	tst	r1, #16
    c96c:	0a00001e 	beq	c9ec <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xc0>
    c970:	e59f00a4 	ldr	r0, [pc, #164]	; ca1c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf0>
    c974:	eb0074e0 	bl	29cfc <CTimer::SimpleusDelay(unsigned int)>
    c978:	e3a03005 	mov	r3, #5
    c97c:	e5843008 	str	r3, [r4, #8]
    c980:	e28dd010 	add	sp, sp, #16
    c984:	e8bd8010 	pop	{r4, pc}
    c988:	e3110020 	tst	r1, #32
    c98c:	13a03001 	movne	r3, #1
    c990:	15803008 	strne	r3, [r0, #8]
    c994:	1afffff9 	bne	c980 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    c998:	e3a0207a 	mov	r2, #122	; 0x7a
    c99c:	e59f107c 	ldr	r1, [pc, #124]	; ca20 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    c9a0:	e59f007c 	ldr	r0, [pc, #124]	; ca24 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
    c9a4:	eb005f36 	bl	24684 <assertion_failed>
    c9a8:	e590300c 	ldr	r3, [r0, #12]
    c9ac:	e3530000 	cmp	r3, #0
    c9b0:	e2433001 	sub	r3, r3, #1
    c9b4:	e580300c 	str	r3, [r0, #12]
    c9b8:	13a03003 	movne	r3, #3
    c9bc:	15803008 	strne	r3, [r0, #8]
    c9c0:	1affffee 	bne	c980 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    c9c4:	e3a03005 	mov	r3, #5
    c9c8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    c9cc:	e5843008 	str	r3, [r4, #8]
    c9d0:	e28dd010 	add	sp, sp, #16
    c9d4:	e8bd4010 	pop	{r4, lr}
    c9d8:	ea0074c7 	b	29cfc <CTimer::SimpleusDelay(unsigned int)>
    c9dc:	e3a020a6 	mov	r2, #166	; 0xa6
    c9e0:	e59f1038 	ldr	r1, [pc, #56]	; ca20 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    c9e4:	e59f003c 	ldr	r0, [pc, #60]	; ca28 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xfc>
    c9e8:	eb005f25 	bl	24684 <assertion_failed>
    c9ec:	e58d100c 	str	r1, [sp, #12]
    c9f0:	eb00680b 	bl	26a24 <CLogger::Get()>
    c9f4:	e59d100c 	ldr	r1, [sp, #12]
    c9f8:	e3a02001 	mov	r2, #1
    c9fc:	e58d1000 	str	r1, [sp]
    ca00:	e59f3024 	ldr	r3, [pc, #36]	; ca2c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x100>
    ca04:	e59f1024 	ldr	r1, [pc, #36]	; ca30 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x104>
    ca08:	eb006747 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ca0c:	e3a020a1 	mov	r2, #161	; 0xa1
    ca10:	e59f1008 	ldr	r1, [pc, #8]	; ca20 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    ca14:	e59f000c 	ldr	r0, [pc, #12]	; ca28 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xfc>
    ca18:	eb005f19 	bl	24684 <assertion_failed>
    ca1c:	00000271 	.word	0x00000271
    ca20:	0003f148 	.word	0x0003f148
    ca24:	0003efdc 	.word	0x0003efdc
    ca28:	0003f63c 	.word	0x0003f63c
    ca2c:	0003f000 	.word	0x0003f000
    ca30:	0003f014 	.word	0x0003f014

0000ca34 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
    ca34:	e59f303c 	ldr	r3, [pc, #60]	; ca78 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x44>
    ca38:	e92d4010 	push	{r4, lr}
    ca3c:	e5803000 	str	r3, [r0]
    ca40:	e1a04000 	mov	r4, r0
    ca44:	eb0074da 	bl	29db4 <CTimer::Get()>
    ca48:	e3a02006 	mov	r2, #6
    ca4c:	e3a03901 	mov	r3, #16384	; 0x4000
    ca50:	e3500000 	cmp	r0, #0
    ca54:	e9840005 	stmib	r4, {r0, r2}
    ca58:	e1c431b0 	strh	r3, [r4, #16]
    ca5c:	0a000001 	beq	ca68 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x34>
    ca60:	e1a00004 	mov	r0, r4
    ca64:	e8bd8010 	pop	{r4, pc}
    ca68:	e3a02034 	mov	r2, #52	; 0x34
    ca6c:	e59f1008 	ldr	r1, [pc, #8]	; ca7c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x48>
    ca70:	e59f0008 	ldr	r0, [pc, #8]	; ca80 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x4c>
    ca74:	eb005f02 	bl	24684 <assertion_failed>
    ca78:	0003f1d8 	.word	0x0003f1d8
    ca7c:	0003f148 	.word	0x0003f148
    ca80:	0003ea88 	.word	0x0003ea88

0000ca84 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>:
    ca84:	e3500014 	cmp	r0, #20
    ca88:	e92d4010 	push	{r4, lr}
    ca8c:	1a000005 	bne	caa8 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x24>
    ca90:	e59f3030 	ldr	r3, [pc, #48]	; cac8 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x44>
    ca94:	e5930000 	ldr	r0, [r3]
    ca98:	e3500000 	cmp	r0, #0
    ca9c:	0a000005 	beq	cab8 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x34>
    caa0:	e8bd4010 	pop	{r4, lr}
    caa4:	ea005ff8 	b	24a8c <CClassAllocator::Allocate()>
    caa8:	e3a020e2 	mov	r2, #226	; 0xe2
    caac:	e59f1018 	ldr	r1, [pc, #24]	; cacc <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x48>
    cab0:	e59f0018 	ldr	r0, [pc, #24]	; cad0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x4c>
    cab4:	eb005ef2 	bl	24684 <assertion_failed>
    cab8:	e3a020e2 	mov	r2, #226	; 0xe2
    cabc:	e59f1008 	ldr	r1, [pc, #8]	; cacc <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x48>
    cac0:	e59f000c 	ldr	r0, [pc, #12]	; cad4 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x50>
    cac4:	eb005eee 	bl	24684 <assertion_failed>
    cac8:	0004da70 	.word	0x0004da70
    cacc:	0003f148 	.word	0x0003f148
    cad0:	0003f180 	.word	0x0003f180
    cad4:	0003f050 	.word	0x0003f050

0000cad8 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>:
    cad8:	e3510014 	cmp	r1, #20
    cadc:	e92d4010 	push	{r4, lr}
    cae0:	1a000006 	bne	cb00 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x28>
    cae4:	e59f3034 	ldr	r3, [pc, #52]	; cb20 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x48>
    cae8:	e1a01000 	mov	r1, r0
    caec:	e5930000 	ldr	r0, [r3]
    caf0:	e3500000 	cmp	r0, #0
    caf4:	0a000005 	beq	cb10 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x38>
    caf8:	e8bd4010 	pop	{r4, lr}
    cafc:	ea00601d 	b	24b78 <CClassAllocator::Free(void*)>
    cb00:	e3a020e2 	mov	r2, #226	; 0xe2
    cb04:	e59f1018 	ldr	r1, [pc, #24]	; cb24 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x4c>
    cb08:	e59f0018 	ldr	r0, [pc, #24]	; cb28 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x50>
    cb0c:	eb005edc 	bl	24684 <assertion_failed>
    cb10:	e3a020e2 	mov	r2, #226	; 0xe2
    cb14:	e59f1008 	ldr	r1, [pc, #8]	; cb24 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x4c>
    cb18:	e59f000c 	ldr	r0, [pc, #12]	; cb2c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x54>
    cb1c:	eb005ed8 	bl	24684 <assertion_failed>
    cb20:	0004da70 	.word	0x0004da70
    cb24:	0003f148 	.word	0x0003f148
    cb28:	0003f180 	.word	0x0003f180
    cb2c:	0003f050 	.word	0x0003f050

0000cb30 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    cb30:	e92d4010 	push	{r4, lr}
    cb34:	e1a04000 	mov	r4, r0
    cb38:	e3a01014 	mov	r1, #20
    cb3c:	ebffffe5 	bl	cad8 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>
    cb40:	e1a00004 	mov	r0, r4
    cb44:	e8bd8010 	pop	{r4, pc}

0000cb48 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)>:
    cb48:	e92d4070 	push	{r4, r5, r6, lr}
    cb4c:	e59f6040 	ldr	r6, [pc, #64]	; cb94 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x4c>
    cb50:	e5963000 	ldr	r3, [r6]
    cb54:	e3530000 	cmp	r3, #0
    cb58:	1a000009 	bne	cb84 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x3c>
    cb5c:	e1a04000 	mov	r4, r0
    cb60:	e3a0001c 	mov	r0, #28
    cb64:	eb0078cd 	bl	2aea0 <operator new(unsigned int)>
    cb68:	e1a05000 	mov	r5, r0
    cb6c:	e1a02004 	mov	r2, r4
    cb70:	e3a01014 	mov	r1, #20
    cb74:	e59f301c 	ldr	r3, [pc, #28]	; cb98 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x50>
    cb78:	eb005faa 	bl	24a28 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    cb7c:	e5865000 	str	r5, [r6]
    cb80:	e8bd8070 	pop	{r4, r5, r6, pc}
    cb84:	e3a020e2 	mov	r2, #226	; 0xe2
    cb88:	e59f100c 	ldr	r1, [pc, #12]	; cb9c <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x54>
    cb8c:	e59f000c 	ldr	r0, [pc, #12]	; cba0 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x58>
    cb90:	eb005ebb 	bl	24684 <assertion_failed>
    cb94:	0004da70 	.word	0x0004da70
    cb98:	0003f1b0 	.word	0x0003f1b0
    cb9c:	0003f148 	.word	0x0003f148
    cba0:	0003f064 	.word	0x0003f064

0000cba4 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    cba4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    cba8:	e59f7054 	ldr	r7, [pc, #84]	; cc04 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    cbac:	e24dd00c 	sub	sp, sp, #12
    cbb0:	e5973000 	ldr	r3, [r7]
    cbb4:	e3530000 	cmp	r3, #0
    cbb8:	1a00000d 	bne	cbf4 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    cbbc:	e1a05001 	mov	r5, r1
    cbc0:	e1a04000 	mov	r4, r0
    cbc4:	e3a0001c 	mov	r0, #28
    cbc8:	eb0078b4 	bl	2aea0 <operator new(unsigned int)>
    cbcc:	e59f1034 	ldr	r1, [pc, #52]	; cc08 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    cbd0:	e1a03005 	mov	r3, r5
    cbd4:	e58d1000 	str	r1, [sp]
    cbd8:	e1a02004 	mov	r2, r4
    cbdc:	e3a01014 	mov	r1, #20
    cbe0:	e1a06000 	mov	r6, r0
    cbe4:	eb005f9b 	bl	24a58 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    cbe8:	e5876000 	str	r6, [r7]
    cbec:	e28dd00c 	add	sp, sp, #12
    cbf0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    cbf4:	e3a020e2 	mov	r2, #226	; 0xe2
    cbf8:	e59f100c 	ldr	r1, [pc, #12]	; cc0c <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    cbfc:	e59f000c 	ldr	r0, [pc, #12]	; cc10 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    cc00:	eb005e9f 	bl	24684 <assertion_failed>
    cc04:	0004da70 	.word	0x0004da70
    cc08:	0003f1b0 	.word	0x0003f1b0
    cc0c:	0003f148 	.word	0x0003f148
    cc10:	0003f064 	.word	0x0003f064

0000cc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
    cc14:	e3a02000 	mov	r2, #0
    cc18:	e5801004 	str	r1, [r0, #4]
    cc1c:	e5c02000 	strb	r2, [r0]
    cc20:	e12fff1e 	bx	lr

0000cc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
    cc24:	e3a0c001 	mov	ip, #1
    cc28:	e9800006 	stmib	r0, {r1, r2}
    cc2c:	e5c0c000 	strb	ip, [r0]
    cc30:	e12fff1e 	bx	lr

0000cc34 <CDWHCIRegister::~CDWHCIRegister()>:
    cc34:	e12fff1e 	bx	lr

0000cc38 <CDWHCIRegister::Read()>:
    cc38:	e3a02001 	mov	r2, #1
    cc3c:	e5903004 	ldr	r3, [r0, #4]
    cc40:	e5933000 	ldr	r3, [r3]
    cc44:	e5c02000 	strb	r2, [r0]
    cc48:	e5803008 	str	r3, [r0, #8]
    cc4c:	e1a00003 	mov	r0, r3
    cc50:	e12fff1e 	bx	lr

0000cc54 <CDWHCIRegister::Write()>:
    cc54:	e5d03000 	ldrb	r3, [r0]
    cc58:	e3530000 	cmp	r3, #0
    cc5c:	0a000003 	beq	cc70 <CDWHCIRegister::Write()+0x1c>
    cc60:	e5902008 	ldr	r2, [r0, #8]
    cc64:	e5903004 	ldr	r3, [r0, #4]
    cc68:	e5832000 	str	r2, [r3]
    cc6c:	e12fff1e 	bx	lr
    cc70:	e3a02035 	mov	r2, #53	; 0x35
    cc74:	e92d4010 	push	{r4, lr}
    cc78:	e59f1004 	ldr	r1, [pc, #4]	; cc84 <CDWHCIRegister::Write()+0x30>
    cc7c:	e59f0004 	ldr	r0, [pc, #4]	; cc88 <CDWHCIRegister::Write()+0x34>
    cc80:	eb005e7f 	bl	24684 <assertion_failed>
    cc84:	0003f1f4 	.word	0x0003f1f4
    cc88:	0003f208 	.word	0x0003f208

0000cc8c <CDWHCIRegister::Get() const>:
    cc8c:	e5d03000 	ldrb	r3, [r0]
    cc90:	e3530000 	cmp	r3, #0
    cc94:	0a000001 	beq	cca0 <CDWHCIRegister::Get() const+0x14>
    cc98:	e5900008 	ldr	r0, [r0, #8]
    cc9c:	e12fff1e 	bx	lr
    cca0:	e3a0203b 	mov	r2, #59	; 0x3b
    cca4:	e92d4010 	push	{r4, lr}
    cca8:	e59f1004 	ldr	r1, [pc, #4]	; ccb4 <CDWHCIRegister::Get() const+0x28>
    ccac:	e59f0004 	ldr	r0, [pc, #4]	; ccb8 <CDWHCIRegister::Get() const+0x2c>
    ccb0:	eb005e73 	bl	24684 <assertion_failed>
    ccb4:	0003f1f4 	.word	0x0003f1f4
    ccb8:	0003f208 	.word	0x0003f208

0000ccbc <CDWHCIRegister::Set(unsigned int)>:
    ccbc:	e3a03001 	mov	r3, #1
    ccc0:	e5801008 	str	r1, [r0, #8]
    ccc4:	e5c03000 	strb	r3, [r0]
    ccc8:	e12fff1e 	bx	lr

0000cccc <CDWHCIRegister::IsSet(unsigned int) const>:
    cccc:	e5d03000 	ldrb	r3, [r0]
    ccd0:	e3530000 	cmp	r3, #0
    ccd4:	0a000004 	beq	ccec <CDWHCIRegister::IsSet(unsigned int) const+0x20>
    ccd8:	e5903008 	ldr	r3, [r0, #8]
    ccdc:	e1110003 	tst	r1, r3
    cce0:	13a00001 	movne	r0, #1
    cce4:	03a00000 	moveq	r0, #0
    cce8:	e12fff1e 	bx	lr
    ccec:	e3a02047 	mov	r2, #71	; 0x47
    ccf0:	e92d4010 	push	{r4, lr}
    ccf4:	e59f1004 	ldr	r1, [pc, #4]	; cd00 <CDWHCIRegister::IsSet(unsigned int) const+0x34>
    ccf8:	e59f0004 	ldr	r0, [pc, #4]	; cd04 <CDWHCIRegister::IsSet(unsigned int) const+0x38>
    ccfc:	eb005e60 	bl	24684 <assertion_failed>
    cd00:	0003f1f4 	.word	0x0003f1f4
    cd04:	0003f208 	.word	0x0003f208

0000cd08 <CDWHCIRegister::And(unsigned int)>:
    cd08:	e5d03000 	ldrb	r3, [r0]
    cd0c:	e3530000 	cmp	r3, #0
    cd10:	0a000003 	beq	cd24 <CDWHCIRegister::And(unsigned int)+0x1c>
    cd14:	e5903008 	ldr	r3, [r0, #8]
    cd18:	e0011003 	and	r1, r1, r3
    cd1c:	e5801008 	str	r1, [r0, #8]
    cd20:	e12fff1e 	bx	lr
    cd24:	e3a0204d 	mov	r2, #77	; 0x4d
    cd28:	e92d4010 	push	{r4, lr}
    cd2c:	e59f1004 	ldr	r1, [pc, #4]	; cd38 <CDWHCIRegister::And(unsigned int)+0x30>
    cd30:	e59f0004 	ldr	r0, [pc, #4]	; cd3c <CDWHCIRegister::And(unsigned int)+0x34>
    cd34:	eb005e52 	bl	24684 <assertion_failed>
    cd38:	0003f1f4 	.word	0x0003f1f4
    cd3c:	0003f208 	.word	0x0003f208

0000cd40 <CDWHCIRegister::Or(unsigned int)>:
    cd40:	e5d03000 	ldrb	r3, [r0]
    cd44:	e3530000 	cmp	r3, #0
    cd48:	0a000003 	beq	cd5c <CDWHCIRegister::Or(unsigned int)+0x1c>
    cd4c:	e5903008 	ldr	r3, [r0, #8]
    cd50:	e1831001 	orr	r1, r3, r1
    cd54:	e5801008 	str	r1, [r0, #8]
    cd58:	e12fff1e 	bx	lr
    cd5c:	e3a02053 	mov	r2, #83	; 0x53
    cd60:	e92d4010 	push	{r4, lr}
    cd64:	e59f1004 	ldr	r1, [pc, #4]	; cd70 <CDWHCIRegister::Or(unsigned int)+0x30>
    cd68:	e59f0004 	ldr	r0, [pc, #4]	; cd74 <CDWHCIRegister::Or(unsigned int)+0x34>
    cd6c:	eb005e44 	bl	24684 <assertion_failed>
    cd70:	0003f1f4 	.word	0x0003f1f4
    cd74:	0003f208 	.word	0x0003f208

0000cd78 <CDWHCIRegister::ClearBit(unsigned int)>:
    cd78:	e5d03000 	ldrb	r3, [r0]
    cd7c:	e92d4010 	push	{r4, lr}
    cd80:	e3530000 	cmp	r3, #0
    cd84:	0a000006 	beq	cda4 <CDWHCIRegister::ClearBit(unsigned int)+0x2c>
    cd88:	e351001f 	cmp	r1, #31
    cd8c:	8a000008 	bhi	cdb4 <CDWHCIRegister::ClearBit(unsigned int)+0x3c>
    cd90:	e3a02001 	mov	r2, #1
    cd94:	e5903008 	ldr	r3, [r0, #8]
    cd98:	e1c31112 	bic	r1, r3, r2, lsl r1
    cd9c:	e5801008 	str	r1, [r0, #8]
    cda0:	e8bd8010 	pop	{r4, pc}
    cda4:	e3a02059 	mov	r2, #89	; 0x59
    cda8:	e59f1014 	ldr	r1, [pc, #20]	; cdc4 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    cdac:	e59f0014 	ldr	r0, [pc, #20]	; cdc8 <CDWHCIRegister::ClearBit(unsigned int)+0x50>
    cdb0:	eb005e33 	bl	24684 <assertion_failed>
    cdb4:	e3a0205a 	mov	r2, #90	; 0x5a
    cdb8:	e59f1004 	ldr	r1, [pc, #4]	; cdc4 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    cdbc:	e59f0008 	ldr	r0, [pc, #8]	; cdcc <CDWHCIRegister::ClearBit(unsigned int)+0x54>
    cdc0:	eb005e2f 	bl	24684 <assertion_failed>
    cdc4:	0003f1f4 	.word	0x0003f1f4
    cdc8:	0003f208 	.word	0x0003f208
    cdcc:	0003f214 	.word	0x0003f214

0000cdd0 <CDWHCIRegister::SetBit(unsigned int)>:
    cdd0:	e5d03000 	ldrb	r3, [r0]
    cdd4:	e92d4010 	push	{r4, lr}
    cdd8:	e3530000 	cmp	r3, #0
    cddc:	0a000006 	beq	cdfc <CDWHCIRegister::SetBit(unsigned int)+0x2c>
    cde0:	e351001f 	cmp	r1, #31
    cde4:	8a000008 	bhi	ce0c <CDWHCIRegister::SetBit(unsigned int)+0x3c>
    cde8:	e3a02001 	mov	r2, #1
    cdec:	e5903008 	ldr	r3, [r0, #8]
    cdf0:	e1831112 	orr	r1, r3, r2, lsl r1
    cdf4:	e5801008 	str	r1, [r0, #8]
    cdf8:	e8bd8010 	pop	{r4, pc}
    cdfc:	e3a02060 	mov	r2, #96	; 0x60
    ce00:	e59f1014 	ldr	r1, [pc, #20]	; ce1c <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    ce04:	e59f0014 	ldr	r0, [pc, #20]	; ce20 <CDWHCIRegister::SetBit(unsigned int)+0x50>
    ce08:	eb005e1d 	bl	24684 <assertion_failed>
    ce0c:	e3a02061 	mov	r2, #97	; 0x61
    ce10:	e59f1004 	ldr	r1, [pc, #4]	; ce1c <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    ce14:	e59f0008 	ldr	r0, [pc, #8]	; ce24 <CDWHCIRegister::SetBit(unsigned int)+0x54>
    ce18:	eb005e19 	bl	24684 <assertion_failed>
    ce1c:	0003f1f4 	.word	0x0003f1f4
    ce20:	0003f208 	.word	0x0003f208
    ce24:	0003f214 	.word	0x0003f214

0000ce28 <CDWHCIRegister::ClearAll()>:
    ce28:	e3a02000 	mov	r2, #0
    ce2c:	e3a03001 	mov	r3, #1
    ce30:	e5802008 	str	r2, [r0, #8]
    ce34:	e5c03000 	strb	r3, [r0]
    ce38:	e12fff1e 	bx	lr

0000ce3c <CDWHCIRegister::SetAll()>:
    ce3c:	e3e02000 	mvn	r2, #0
    ce40:	e3a03001 	mov	r3, #1
    ce44:	e5802008 	str	r2, [r0, #8]
    ce48:	e5c03000 	strb	r3, [r0]
    ce4c:	e12fff1e 	bx	lr

0000ce50 <CDWHCIRegister::Dump() const>:
    ce50:	e92d4010 	push	{r4, lr}
    ce54:	e5d03000 	ldrb	r3, [r0]
    ce58:	e1a04000 	mov	r4, r0
    ce5c:	e3530000 	cmp	r3, #0
    ce60:	e24dd008 	sub	sp, sp, #8
    ce64:	0a00000c 	beq	ce9c <CDWHCIRegister::Dump() const+0x4c>
    ce68:	eb0066ed 	bl	26a24 <CLogger::Get()>
    ce6c:	e5943004 	ldr	r3, [r4, #4]
    ce70:	e5942008 	ldr	r2, [r4, #8]
    ce74:	e1a03a03 	lsl	r3, r3, #20
    ce78:	e1a03a23 	lsr	r3, r3, #20
    ce7c:	e58d3000 	str	r3, [sp]
    ce80:	e58d2004 	str	r2, [sp, #4]
    ce84:	e59f303c 	ldr	r3, [pc, #60]	; cec8 <CDWHCIRegister::Dump() const+0x78>
    ce88:	e3a02004 	mov	r2, #4
    ce8c:	e59f1038 	ldr	r1, [pc, #56]	; cecc <CDWHCIRegister::Dump() const+0x7c>
    ce90:	eb006625 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ce94:	e28dd008 	add	sp, sp, #8
    ce98:	e8bd8010 	pop	{r4, pc}
    ce9c:	eb0066e0 	bl	26a24 <CLogger::Get()>
    cea0:	e5942004 	ldr	r2, [r4, #4]
    cea4:	e59f3024 	ldr	r3, [pc, #36]	; ced0 <CDWHCIRegister::Dump() const+0x80>
    cea8:	e1a02a02 	lsl	r2, r2, #20
    ceac:	e1a02a22 	lsr	r2, r2, #20
    ceb0:	e58d2000 	str	r2, [sp]
    ceb4:	e59f1010 	ldr	r1, [pc, #16]	; cecc <CDWHCIRegister::Dump() const+0x7c>
    ceb8:	e3a02004 	mov	r2, #4
    cebc:	eb00661a 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cec0:	e28dd008 	add	sp, sp, #8
    cec4:	e8bd8010 	pop	{r4, pc}
    cec8:	0003f230 	.word	0x0003f230
    cecc:	0003f24c 	.word	0x0003f24c
    ced0:	0003f254 	.word	0x0003f254

0000ced4 <CDWHCIRootPort::~CDWHCIRootPort()>:
    ced4:	e92d4010 	push	{r4, lr}
    ced8:	e1a04000 	mov	r4, r0
    cedc:	e5900008 	ldr	r0, [r0, #8]
    cee0:	e59f301c 	ldr	r3, [pc, #28]	; cf04 <CDWHCIRootPort::~CDWHCIRootPort()+0x30>
    cee4:	e3500000 	cmp	r0, #0
    cee8:	e5843000 	str	r3, [r4]
    ceec:	0a000002 	beq	cefc <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    cef0:	e5903000 	ldr	r3, [r0]
    cef4:	e5933004 	ldr	r3, [r3, #4]
    cef8:	e12fff33 	blx	r3
    cefc:	e1a00004 	mov	r0, r4
    cf00:	e8bd8010 	pop	{r4, pc}
    cf04:	0003f340 	.word	0x0003f340

0000cf08 <CDWHCIRootPort::~CDWHCIRootPort()>:
    cf08:	e92d4010 	push	{r4, lr}
    cf0c:	e1a04000 	mov	r4, r0
    cf10:	e5900008 	ldr	r0, [r0, #8]
    cf14:	e59f3028 	ldr	r3, [pc, #40]	; cf44 <CDWHCIRootPort::~CDWHCIRootPort()+0x3c>
    cf18:	e3500000 	cmp	r0, #0
    cf1c:	e5843000 	str	r3, [r4]
    cf20:	0a000002 	beq	cf30 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    cf24:	e5903000 	ldr	r3, [r0]
    cf28:	e5933004 	ldr	r3, [r3, #4]
    cf2c:	e12fff33 	blx	r3
    cf30:	e1a00004 	mov	r0, r4
    cf34:	e3a0100c 	mov	r1, #12
    cf38:	eb0077e6 	bl	2aed8 <operator delete(void*, unsigned int)>
    cf3c:	e1a00004 	mov	r0, r4
    cf40:	e8bd8010 	pop	{r4, pc}
    cf44:	0003f340 	.word	0x0003f340

0000cf48 <CDWHCIRootPort::RemoveDevice()>:
    cf48:	e92d4010 	push	{r4, lr}
    cf4c:	e1a04000 	mov	r4, r0
    cf50:	e5900004 	ldr	r0, [r0, #4]
    cf54:	e3500000 	cmp	r0, #0
    cf58:	0a00000b 	beq	cf8c <CDWHCIRootPort::RemoveDevice()+0x44>
    cf5c:	e3a01000 	mov	r1, #0
    cf60:	ebfff361 	bl	9cec <CDWHCIDevice::DisableRootPort(bool)>
    cf64:	e5940008 	ldr	r0, [r4, #8]
    cf68:	e3500000 	cmp	r0, #0
    cf6c:	0a000002 	beq	cf7c <CDWHCIRootPort::RemoveDevice()+0x34>
    cf70:	e5903000 	ldr	r3, [r0]
    cf74:	e5933004 	ldr	r3, [r3, #4]
    cf78:	e12fff33 	blx	r3
    cf7c:	e3a03000 	mov	r3, #0
    cf80:	e3a00001 	mov	r0, #1
    cf84:	e5843008 	str	r3, [r4, #8]
    cf88:	e8bd8010 	pop	{r4, pc}
    cf8c:	e3a0206d 	mov	r2, #109	; 0x6d
    cf90:	e59f1004 	ldr	r1, [pc, #4]	; cf9c <CDWHCIRootPort::RemoveDevice()+0x54>
    cf94:	e59f0004 	ldr	r0, [pc, #4]	; cfa0 <CDWHCIRootPort::RemoveDevice()+0x58>
    cf98:	eb005db9 	bl	24684 <assertion_failed>
    cf9c:	0003f274 	.word	0x0003f274
    cfa0:	0003f288 	.word	0x0003f288

0000cfa4 <CDWHCIRootPort::ReScanDevices()>:
    cfa4:	e92d4010 	push	{r4, lr}
    cfa8:	e5904008 	ldr	r4, [r0, #8]
    cfac:	e3540000 	cmp	r4, #0
    cfb0:	0a000002 	beq	cfc0 <CDWHCIRootPort::ReScanDevices()+0x1c>
    cfb4:	e1a00004 	mov	r0, r4
    cfb8:	e8bd4010 	pop	{r4, lr}
    cfbc:	ea0003fb 	b	dfb0 <CUSBDevice::ReScanDevices()>
    cfc0:	eb006697 	bl	26a24 <CLogger::Get()>
    cfc4:	e3a02002 	mov	r2, #2
    cfc8:	e59f300c 	ldr	r3, [pc, #12]	; cfdc <CDWHCIRootPort::ReScanDevices()+0x38>
    cfcc:	e59f100c 	ldr	r1, [pc, #12]	; cfe0 <CDWHCIRootPort::ReScanDevices()+0x3c>
    cfd0:	eb0065d5 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cfd4:	e1a00004 	mov	r0, r4
    cfd8:	e8bd8010 	pop	{r4, pc}
    cfdc:	0003f298 	.word	0x0003f298
    cfe0:	0003f350 	.word	0x0003f350

0000cfe4 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
    cfe4:	e3a02000 	mov	r2, #0
    cfe8:	e59fc024 	ldr	ip, [pc, #36]	; d014 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x30>
    cfec:	e1510002 	cmp	r1, r2
    cff0:	e5801004 	str	r1, [r0, #4]
    cff4:	e580c000 	str	ip, [r0]
    cff8:	e5802008 	str	r2, [r0, #8]
    cffc:	112fff1e 	bxne	lr
    d000:	e3a0201f 	mov	r2, #31
    d004:	e92d4010 	push	{r4, lr}
    d008:	e59f1008 	ldr	r1, [pc, #8]	; d018 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x34>
    d00c:	e59f0008 	ldr	r0, [pc, #8]	; d01c <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x38>
    d010:	eb005d9b 	bl	24684 <assertion_failed>
    d014:	0003f340 	.word	0x0003f340
    d018:	0003f274 	.word	0x0003f274
    d01c:	0003f288 	.word	0x0003f288

0000d020 <CDWHCIRootPort::Initialize()>:
    d020:	e92d4070 	push	{r4, r5, r6, lr}
    d024:	e1a04000 	mov	r4, r0
    d028:	e5900004 	ldr	r0, [r0, #4]
    d02c:	e3500000 	cmp	r0, #0
    d030:	0a00003d 	beq	d12c <CDWHCIRootPort::Initialize()+0x10c>
    d034:	ebfff30a 	bl	9c64 <CDWHCIDevice::GetPortSpeed()>
    d038:	e3500004 	cmp	r0, #4
    d03c:	e1a05000 	mov	r5, r0
    d040:	0a000031 	beq	d10c <CDWHCIRootPort::Initialize()+0xec>
    d044:	e5943008 	ldr	r3, [r4, #8]
    d048:	e3530000 	cmp	r3, #0
    d04c:	1a00003a 	bne	d13c <CDWHCIRootPort::Initialize()+0x11c>
    d050:	e3a00058 	mov	r0, #88	; 0x58
    d054:	eb007791 	bl	2aea0 <operator new(unsigned int)>
    d058:	e1a06000 	mov	r6, r0
    d05c:	e1a02005 	mov	r2, r5
    d060:	e1a03004 	mov	r3, r4
    d064:	e5941004 	ldr	r1, [r4, #4]
    d068:	eb000349 	bl	dd94 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>
    d06c:	e1a00006 	mov	r0, r6
    d070:	e5846008 	str	r6, [r4, #8]
    d074:	eb0004f7 	bl	e458 <CUSBDevice::Initialize()>
    d078:	e3500000 	cmp	r0, #0
    d07c:	e5940008 	ldr	r0, [r4, #8]
    d080:	0a00000f 	beq	d0c4 <CDWHCIRootPort::Initialize()+0xa4>
    d084:	e5903000 	ldr	r3, [r0]
    d088:	e593300c 	ldr	r3, [r3, #12]
    d08c:	e12fff33 	blx	r3
    d090:	e2505000 	subs	r5, r0, #0
    d094:	0a000013 	beq	d0e8 <CDWHCIRootPort::Initialize()+0xc8>
    d098:	eb006661 	bl	26a24 <CLogger::Get()>
    d09c:	e3a02004 	mov	r2, #4
    d0a0:	e59f30d4 	ldr	r3, [pc, #212]	; d17c <CDWHCIRootPort::Initialize()+0x15c>
    d0a4:	e59f10d4 	ldr	r1, [pc, #212]	; d180 <CDWHCIRootPort::Initialize()+0x160>
    d0a8:	eb00659f 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d0ac:	e5940004 	ldr	r0, [r4, #4]
    d0b0:	ebfff2fe 	bl	9cb0 <CDWHCIDevice::OvercurrentDetected()>
    d0b4:	e3500000 	cmp	r0, #0
    d0b8:	1a000023 	bne	d14c <CDWHCIRootPort::Initialize()+0x12c>
    d0bc:	e1a00005 	mov	r0, r5
    d0c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    d0c4:	e3500000 	cmp	r0, #0
    d0c8:	0a000002 	beq	d0d8 <CDWHCIRootPort::Initialize()+0xb8>
    d0cc:	e5903000 	ldr	r3, [r0]
    d0d0:	e5933004 	ldr	r3, [r3, #4]
    d0d4:	e12fff33 	blx	r3
    d0d8:	e3a05000 	mov	r5, #0
    d0dc:	e1a00005 	mov	r0, r5
    d0e0:	e5845008 	str	r5, [r4, #8]
    d0e4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d0e8:	eb00664d 	bl	26a24 <CLogger::Get()>
    d0ec:	e3a02002 	mov	r2, #2
    d0f0:	e59f308c 	ldr	r3, [pc, #140]	; d184 <CDWHCIRootPort::Initialize()+0x164>
    d0f4:	e59f1084 	ldr	r1, [pc, #132]	; d180 <CDWHCIRootPort::Initialize()+0x160>
    d0f8:	eb00658b 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d0fc:	e5940008 	ldr	r0, [r4, #8]
    d100:	e3500000 	cmp	r0, #0
    d104:	1afffff0 	bne	d0cc <CDWHCIRootPort::Initialize()+0xac>
    d108:	eafffff2 	b	d0d8 <CDWHCIRootPort::Initialize()+0xb8>
    d10c:	e3a05000 	mov	r5, #0
    d110:	eb006643 	bl	26a24 <CLogger::Get()>
    d114:	e3a02001 	mov	r2, #1
    d118:	e59f3068 	ldr	r3, [pc, #104]	; d188 <CDWHCIRootPort::Initialize()+0x168>
    d11c:	e59f105c 	ldr	r1, [pc, #92]	; d180 <CDWHCIRootPort::Initialize()+0x160>
    d120:	eb006581 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d124:	e1a00005 	mov	r0, r5
    d128:	e8bd8070 	pop	{r4, r5, r6, pc}
    d12c:	e3a0202c 	mov	r2, #44	; 0x2c
    d130:	e59f1054 	ldr	r1, [pc, #84]	; d18c <CDWHCIRootPort::Initialize()+0x16c>
    d134:	e59f0054 	ldr	r0, [pc, #84]	; d190 <CDWHCIRootPort::Initialize()+0x170>
    d138:	eb005d51 	bl	24684 <assertion_failed>
    d13c:	e3a02036 	mov	r2, #54	; 0x36
    d140:	e59f1044 	ldr	r1, [pc, #68]	; d18c <CDWHCIRootPort::Initialize()+0x16c>
    d144:	e59f0048 	ldr	r0, [pc, #72]	; d194 <CDWHCIRootPort::Initialize()+0x174>
    d148:	eb005d4d 	bl	24684 <assertion_failed>
    d14c:	eb006634 	bl	26a24 <CLogger::Get()>
    d150:	e3a02001 	mov	r2, #1
    d154:	e59f303c 	ldr	r3, [pc, #60]	; d198 <CDWHCIRootPort::Initialize()+0x178>
    d158:	e59f1020 	ldr	r1, [pc, #32]	; d180 <CDWHCIRootPort::Initialize()+0x160>
    d15c:	eb006572 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d160:	e5940004 	ldr	r0, [r4, #4]
    d164:	e3a01001 	mov	r1, #1
    d168:	ebfff2df 	bl	9cec <CDWHCIDevice::DisableRootPort(bool)>
    d16c:	e5940008 	ldr	r0, [r4, #8]
    d170:	e3500000 	cmp	r0, #0
    d174:	1affffd4 	bne	d0cc <CDWHCIRootPort::Initialize()+0xac>
    d178:	eaffffd6 	b	d0d8 <CDWHCIRootPort::Initialize()+0xb8>
    d17c:	0003f30c 	.word	0x0003f30c
    d180:	0003f350 	.word	0x0003f350
    d184:	0003f2f4 	.word	0x0003f2f4
    d188:	0003f2c8 	.word	0x0003f2c8
    d18c:	0003f274 	.word	0x0003f274
    d190:	0003f288 	.word	0x0003f288
    d194:	0003f2e4 	.word	0x0003f2e4
    d198:	0003f320 	.word	0x0003f320

0000d19c <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    d19c:	e92d4010 	push	{r4, lr}
    d1a0:	e1a04000 	mov	r4, r0
    d1a4:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    d1a8:	e3500000 	cmp	r0, #0
    d1ac:	0a000002 	beq	d1bc <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    d1b0:	e5903000 	ldr	r3, [r0]
    d1b4:	e5933004 	ldr	r3, [r3, #4]
    d1b8:	e12fff33 	blx	r3
    d1bc:	e3a03000 	mov	r3, #0
    d1c0:	e5940044 	ldr	r0, [r4, #68]	; 0x44
    d1c4:	e5843050 	str	r3, [r4, #80]	; 0x50
    d1c8:	e1500003 	cmp	r0, r3
    d1cc:	e5843048 	str	r3, [r4, #72]	; 0x48
    d1d0:	0a000000 	beq	d1d8 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x3c>
    d1d4:	eb00773e 	bl	2aed4 <operator delete[](void*)>
    d1d8:	e1a00004 	mov	r0, r4
    d1dc:	e8bd8010 	pop	{r4, pc}

0000d1e0 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>:
    d1e0:	e5801000 	str	r1, [r0]
    d1e4:	e12fff1e 	bx	lr

0000d1e8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    d1e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d1ec:	e1a04000 	mov	r4, r0
    d1f0:	e59f0178 	ldr	r0, [pc, #376]	; d370 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    d1f4:	e5841040 	str	r1, [r4, #64]	; 0x40
    d1f8:	e0000001 	and	r0, r0, r1
    d1fc:	e3500000 	cmp	r0, #0
    d200:	0a00000f 	beq	d244 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x5c>
    d204:	e3110010 	tst	r1, #16
    d208:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    d20c:	e5940004 	ldr	r0, [r4, #4]
    d210:	eb001cb4 	bl	144e8 <CUSBRequest::IsCompleteOnNAK() const>
    d214:	e3500000 	cmp	r0, #0
    d218:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    d21c:	e5940018 	ldr	r0, [r4, #24]
    d220:	eb000835 	bl	f2fc <CUSBEndpoint::GetType() const>
    d224:	e3500001 	cmp	r0, #1
    d228:	1a000048 	bne	d350 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x168>
    d22c:	e5d43008 	ldrb	r3, [r4, #8]
    d230:	e3530000 	cmp	r3, #0
    d234:	0a000049 	beq	d360 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x178>
    d238:	e3a03000 	mov	r3, #0
    d23c:	e5843028 	str	r3, [r4, #40]	; 0x28
    d240:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d244:	e1a05002 	mov	r5, r2
    d248:	e5d41010 	ldrb	r1, [r4, #16]
    d24c:	e5946030 	ldr	r6, [r4, #48]	; 0x30
    d250:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    d254:	e3510000 	cmp	r1, #0
    d258:	e0467005 	sub	r7, r6, r5
    d25c:	e0423003 	sub	r3, r2, r3
    d260:	0a00001d 	beq	d2dc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xf4>
    d264:	e5d40011 	ldrb	r0, [r4, #17]
    d268:	e3530000 	cmp	r3, #0
    d26c:	13a01000 	movne	r1, #0
    d270:	02001001 	andeq	r1, r0, #1
    d274:	e3510000 	cmp	r1, #0
    d278:	1a000022 	bne	d308 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x120>
    d27c:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    d280:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    d284:	e0811003 	add	r1, r1, r3
    d288:	e3500000 	cmp	r0, #0
    d28c:	e0823003 	add	r3, r2, r3
    d290:	e5841034 	str	r1, [r4, #52]	; 0x34
    d294:	e5843048 	str	r3, [r4, #72]	; 0x48
    d298:	1a000015 	bne	d2f4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x10c>
    d29c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d2a0:	e1530007 	cmp	r3, r7
    d2a4:	3a000021 	bcc	d330 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x148>
    d2a8:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    d2ac:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    d2b0:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    d2b4:	e0833005 	add	r3, r3, r5
    d2b8:	e0410002 	sub	r0, r1, r2
    d2bc:	e0433006 	sub	r3, r3, r6
    d2c0:	e150000c 	cmp	r0, ip
    d2c4:	e5843028 	str	r3, [r4, #40]	; 0x28
    d2c8:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    d2cc:	e1510002 	cmp	r1, r2
    d2d0:	3a00001a 	bcc	d340 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x158>
    d2d4:	e584002c 	str	r0, [r4, #44]	; 0x2c
    d2d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d2dc:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    d2e0:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    d2e4:	e0811003 	add	r1, r1, r3
    d2e8:	e0823003 	add	r3, r2, r3
    d2ec:	e5841034 	str	r1, [r4, #52]	; 0x34
    d2f0:	e5843048 	str	r3, [r4, #72]	; 0x48
    d2f4:	e1a01007 	mov	r1, r7
    d2f8:	e5d42009 	ldrb	r2, [r4, #9]
    d2fc:	e5940018 	ldr	r0, [r4, #24]
    d300:	eb000823 	bl	f394 <CUSBEndpoint::SkipPID(unsigned int, bool)>
    d304:	eaffffe4 	b	d29c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb4>
    d308:	e3520000 	cmp	r2, #0
    d30c:	15942020 	ldrne	r2, [r4, #32]
    d310:	10020792 	mulne	r2, r2, r7
    d314:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    d318:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    d31c:	e0811002 	add	r1, r1, r2
    d320:	e0832002 	add	r2, r3, r2
    d324:	e5841034 	str	r1, [r4, #52]	; 0x34
    d328:	e5842048 	str	r2, [r4, #72]	; 0x48
    d32c:	eafffff0 	b	d2f4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x10c>
    d330:	e3a020d6 	mov	r2, #214	; 0xd6
    d334:	e59f1038 	ldr	r1, [pc, #56]	; d374 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    d338:	e59f0038 	ldr	r0, [pc, #56]	; d378 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x190>
    d33c:	eb005cd0 	bl	24684 <assertion_failed>
    d340:	e3a020dc 	mov	r2, #220	; 0xdc
    d344:	e59f1028 	ldr	r1, [pc, #40]	; d374 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    d348:	e59f002c 	ldr	r0, [pc, #44]	; d37c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x194>
    d34c:	eb005ccc 	bl	24684 <assertion_failed>
    d350:	e3a020b9 	mov	r2, #185	; 0xb9
    d354:	e59f1018 	ldr	r1, [pc, #24]	; d374 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    d358:	e59f0020 	ldr	r0, [pc, #32]	; d380 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x198>
    d35c:	eb005cc8 	bl	24684 <assertion_failed>
    d360:	e3a020ba 	mov	r2, #186	; 0xba
    d364:	e59f1008 	ldr	r1, [pc, #8]	; d374 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    d368:	e59f0014 	ldr	r0, [pc, #20]	; d384 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x19c>
    d36c:	eb005cc4 	bl	24684 <assertion_failed>
    d370:	000007dc 	.word	0x000007dc
    d374:	0003f358 	.word	0x0003f358
    d378:	0003f3a4 	.word	0x0003f3a4
    d37c:	0003f3c8 	.word	0x0003f3c8
    d380:	0003f370 	.word	0x0003f370
    d384:	0003f39c 	.word	0x0003f39c

0000d388 <CDWHCITransferStageData::SetSplitComplete(bool)>:
    d388:	e5d03010 	ldrb	r3, [r0, #16]
    d38c:	e3530000 	cmp	r3, #0
    d390:	0a000001 	beq	d39c <CDWHCITransferStageData::SetSplitComplete(bool)+0x14>
    d394:	e5c01011 	strb	r1, [r0, #17]
    d398:	e12fff1e 	bx	lr
    d39c:	e3a020e3 	mov	r2, #227	; 0xe3
    d3a0:	e92d4010 	push	{r4, lr}
    d3a4:	e59f1004 	ldr	r1, [pc, #4]	; d3b0 <CDWHCITransferStageData::SetSplitComplete(bool)+0x28>
    d3a8:	e59f0004 	ldr	r0, [pc, #4]	; d3b4 <CDWHCITransferStageData::SetSplitComplete(bool)+0x2c>
    d3ac:	eb005cb4 	bl	24684 <assertion_failed>
    d3b0:	0003f358 	.word	0x0003f358
    d3b4:	0003f3f4 	.word	0x0003f3f4

0000d3b8 <CDWHCITransferStageData::SetState(unsigned int)>:
    d3b8:	e5801038 	str	r1, [r0, #56]	; 0x38
    d3bc:	e12fff1e 	bx	lr

0000d3c0 <CDWHCITransferStageData::GetState() const>:
    d3c0:	e5900038 	ldr	r0, [r0, #56]	; 0x38
    d3c4:	e12fff1e 	bx	lr

0000d3c8 <CDWHCITransferStageData::SetSubState(unsigned int)>:
    d3c8:	e580103c 	str	r1, [r0, #60]	; 0x3c
    d3cc:	e12fff1e 	bx	lr

0000d3d0 <CDWHCITransferStageData::GetSubState() const>:
    d3d0:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    d3d4:	e12fff1e 	bx	lr

0000d3d8 <CDWHCITransferStageData::BeginSplitCycle()>:
    d3d8:	e3a00001 	mov	r0, #1
    d3dc:	e12fff1e 	bx	lr

0000d3e0 <CDWHCITransferStageData::GetChannelNumber() const>:
    d3e0:	e5900000 	ldr	r0, [r0]
    d3e4:	e12fff1e 	bx	lr

0000d3e8 <CDWHCITransferStageData::IsPeriodic() const>:
    d3e8:	e5900018 	ldr	r0, [r0, #24]
    d3ec:	e92d4010 	push	{r4, lr}
    d3f0:	e3500000 	cmp	r0, #0
    d3f4:	0a000006 	beq	d414 <CDWHCITransferStageData::IsPeriodic() const+0x2c>
    d3f8:	eb0007bf 	bl	f2fc <CUSBEndpoint::GetType() const>
    d3fc:	e2400002 	sub	r0, r0, #2
    d400:	e6ef0070 	uxtb	r0, r0
    d404:	e3500001 	cmp	r0, #1
    d408:	83a00000 	movhi	r0, #0
    d40c:	93a00001 	movls	r0, #1
    d410:	e8bd8010 	pop	{r4, pc}
    d414:	e3a02f42 	mov	r2, #264	; 0x108
    d418:	e59f1004 	ldr	r1, [pc, #4]	; d424 <CDWHCITransferStageData::IsPeriodic() const+0x3c>
    d41c:	e59f0004 	ldr	r0, [pc, #4]	; d428 <CDWHCITransferStageData::IsPeriodic() const+0x40>
    d420:	eb005c97 	bl	24684 <assertion_failed>
    d424:	0003f358 	.word	0x0003f358
    d428:	0003f408 	.word	0x0003f408

0000d42c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>:
    d42c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d430:	e1a04000 	mov	r4, r0
    d434:	e3a00000 	mov	r0, #0
    d438:	e24dd00c 	sub	sp, sp, #12
    d43c:	e5dd6020 	ldrb	r6, [sp, #32]
    d440:	e1520000 	cmp	r2, r0
    d444:	e8840006 	stm	r4, {r1, r2}
    d448:	e5c43008 	strb	r3, [r4, #8]
    d44c:	e5c46009 	strb	r6, [r4, #9]
    d450:	e584000c 	str	r0, [r4, #12]
    d454:	e5c40011 	strb	r0, [r4, #17]
    d458:	e5840034 	str	r0, [r4, #52]	; 0x34
    d45c:	e5840038 	str	r0, [r4, #56]	; 0x38
    d460:	e584003c 	str	r0, [r4, #60]	; 0x3c
    d464:	e5840040 	str	r0, [r4, #64]	; 0x40
    d468:	e5840044 	str	r0, [r4, #68]	; 0x44
    d46c:	e584004c 	str	r0, [r4, #76]	; 0x4c
    d470:	e5840050 	str	r0, [r4, #80]	; 0x50
    d474:	0a00008e 	beq	d6b4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x288>
    d478:	e1a00002 	mov	r0, r2
    d47c:	e1a05002 	mov	r5, r2
    d480:	eb001bba 	bl	14370 <CUSBRequest::GetEndpoint() const>
    d484:	e3500000 	cmp	r0, #0
    d488:	e5840018 	str	r0, [r4, #24]
    d48c:	0a00008c 	beq	d6c4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x298>
    d490:	eb00078d 	bl	f2cc <CUSBEndpoint::GetDevice() const>
    d494:	e3500000 	cmp	r0, #0
    d498:	e5840014 	str	r0, [r4, #20]
    d49c:	0a00008c 	beq	d6d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2a8>
    d4a0:	eb000375 	bl	e27c <CUSBDevice::GetSpeed() const>
    d4a4:	e1a03000 	mov	r3, r0
    d4a8:	e5940018 	ldr	r0, [r4, #24]
    d4ac:	e5c4301c 	strb	r3, [r4, #28]
    d4b0:	eb000799 	bl	f31c <CUSBEndpoint::GetMaxPacketSize() const>
    d4b4:	e1a03000 	mov	r3, r0
    d4b8:	e5940014 	ldr	r0, [r4, #20]
    d4bc:	e5843020 	str	r3, [r4, #32]
    d4c0:	eb00036f 	bl	e284 <CUSBDevice::IsSplit() const>
    d4c4:	e3560000 	cmp	r6, #0
    d4c8:	e5c40010 	strb	r0, [r4, #16]
    d4cc:	0a000020 	beq	d554 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x128>
    d4d0:	e5946044 	ldr	r6, [r4, #68]	; 0x44
    d4d4:	e3560000 	cmp	r6, #0
    d4d8:	1a000085 	bne	d6f4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2c8>
    d4dc:	e3a00004 	mov	r0, #4
    d4e0:	eb007674 	bl	2aeb8 <operator new[](unsigned int)>
    d4e4:	e3a03001 	mov	r3, #1
    d4e8:	e1a05000 	mov	r5, r0
    d4ec:	e5846024 	str	r6, [r4, #36]	; 0x24
    d4f0:	e5840044 	str	r0, [r4, #68]	; 0x44
    d4f4:	e5840048 	str	r0, [r4, #72]	; 0x48
    d4f8:	e584602c 	str	r6, [r4, #44]	; 0x2c
    d4fc:	e5843028 	str	r3, [r4, #40]	; 0x28
    d500:	e5843030 	str	r3, [r4, #48]	; 0x30
    d504:	e3150003 	tst	r5, #3
    d508:	1a000075 	bne	d6e4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2b8>
    d50c:	e5d43010 	ldrb	r3, [r4, #16]
    d510:	e3530000 	cmp	r3, #0
    d514:	0a000032 	beq	d5e4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1b8>
    d518:	e1a00004 	mov	r0, r4
    d51c:	ebffffb1 	bl	d3e8 <CDWHCITransferStageData::IsPeriodic() const>
    d520:	e3500000 	cmp	r0, #0
    d524:	0a000040 	beq	d62c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x200>
    d528:	e3a00014 	mov	r0, #20
    d52c:	ebfffd54 	bl	ca84 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>
    d530:	e1a05000 	mov	r5, r0
    d534:	ebfffd3e 	bl	ca34 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    d538:	e5845050 	str	r5, [r4, #80]	; 0x50
    d53c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    d540:	e3530000 	cmp	r3, #0
    d544:	1a000040 	bne	d64c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x220>
    d548:	e1a00004 	mov	r0, r4
    d54c:	e28dd00c 	add	sp, sp, #12
    d550:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d554:	e1a01006 	mov	r1, r6
    d558:	e5940018 	ldr	r0, [r4, #24]
    d55c:	eb00077c 	bl	f354 <CUSBEndpoint::GetNextPID(bool)>
    d560:	e3500000 	cmp	r0, #0
    d564:	e1a00005 	mov	r0, r5
    d568:	0a00004b 	beq	d69c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x270>
    d56c:	eb001baf 	bl	14430 <CUSBRequest::GetBuffer()>
    d570:	e1a03000 	mov	r3, r0
    d574:	e1a00005 	mov	r0, r5
    d578:	e5843048 	str	r3, [r4, #72]	; 0x48
    d57c:	eb001bba 	bl	1446c <CUSBRequest::GetBufLen() const>
    d580:	e1a06000 	mov	r6, r0
    d584:	e5945048 	ldr	r5, [r4, #72]	; 0x48
    d588:	e5840024 	str	r0, [r4, #36]	; 0x24
    d58c:	e5947020 	ldr	r7, [r4, #32]
    d590:	e2470001 	sub	r0, r7, #1
    d594:	e1a01007 	mov	r1, r7
    d598:	e0800006 	add	r0, r0, r6
    d59c:	eb00be2a 	bl	3ce4c <__udivsi3>
    d5a0:	e5d43010 	ldrb	r3, [r4, #16]
    d5a4:	e5840028 	str	r0, [r4, #40]	; 0x28
    d5a8:	e3530000 	cmp	r3, #0
    d5ac:	0584602c 	streq	r6, [r4, #44]	; 0x2c
    d5b0:	05840030 	streq	r0, [r4, #48]	; 0x30
    d5b4:	0a000004 	beq	d5cc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1a0>
    d5b8:	e1570006 	cmp	r7, r6
    d5bc:	31a06007 	movcc	r6, r7
    d5c0:	e3a03001 	mov	r3, #1
    d5c4:	e584602c 	str	r6, [r4, #44]	; 0x2c
    d5c8:	e5843030 	str	r3, [r4, #48]	; 0x30
    d5cc:	e3550000 	cmp	r5, #0
    d5d0:	1affffcb 	bne	d504 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xd8>
    d5d4:	e3a0206c 	mov	r2, #108	; 0x6c
    d5d8:	e59f1144 	ldr	r1, [pc, #324]	; d724 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d5dc:	e59f0144 	ldr	r0, [pc, #324]	; d728 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2fc>
    d5e0:	eb005c27 	bl	24684 <assertion_failed>
    d5e4:	e5940014 	ldr	r0, [r4, #20]
    d5e8:	eb000327 	bl	e28c <CUSBDevice::GetHubAddress() const>
    d5ec:	e3500000 	cmp	r0, #0
    d5f0:	1affffd1 	bne	d53c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x110>
    d5f4:	e5d4301c 	ldrb	r3, [r4, #28]
    d5f8:	e3530002 	cmp	r3, #2
    d5fc:	0affffce 	beq	d53c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x110>
    d600:	e1a00004 	mov	r0, r4
    d604:	ebffff77 	bl	d3e8 <CDWHCITransferStageData::IsPeriodic() const>
    d608:	e1a01000 	mov	r1, r0
    d60c:	e3a00008 	mov	r0, #8
    d610:	e58d1004 	str	r1, [sp, #4]
    d614:	ebfffc0a 	bl	c644 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>
    d618:	e1a05000 	mov	r5, r0
    d61c:	e59d1004 	ldr	r1, [sp, #4]
    d620:	ebfffc00 	bl	c628 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>
    d624:	e5845050 	str	r5, [r4, #80]	; 0x50
    d628:	eaffffc3 	b	d53c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x110>
    d62c:	e3a00010 	mov	r0, #16
    d630:	ebfffb63 	bl	c3c4 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>
    d634:	e1a05000 	mov	r5, r0
    d638:	ebfffb4f 	bl	c37c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
    d63c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    d640:	e5845050 	str	r5, [r4, #80]	; 0x50
    d644:	e3530000 	cmp	r3, #0
    d648:	0affffbe 	beq	d548 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x11c>
    d64c:	e5940018 	ldr	r0, [r4, #24]
    d650:	eb000729 	bl	f2fc <CUSBEndpoint::GetType() const>
    d654:	e3500002 	cmp	r0, #2
    d658:	1a000029 	bne	d704 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d65c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    d660:	e59f20c4 	ldr	r2, [pc, #196]	; d72c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x300>
    d664:	e0833103 	add	r3, r3, r3, lsl #2
    d668:	e0833103 	add	r3, r3, r3, lsl #2
    d66c:	e1a03103 	lsl	r3, r3, #2
    d670:	e0821392 	umull	r1, r2, r2, r3
    d674:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    d678:	e1a03322 	lsr	r3, r2, #6
    d67c:	e584300c 	str	r3, [r4, #12]
    d680:	3a000023 	bcc	d714 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e8>
    d684:	eb0071ca 	bl	29db4 <CTimer::Get()>
    d688:	eb006f17 	bl	292ec <CTimer::GetTicks() const>
    d68c:	e584004c 	str	r0, [r4, #76]	; 0x4c
    d690:	e1a00004 	mov	r0, r4
    d694:	e28dd00c 	add	sp, sp, #12
    d698:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d69c:	eb001b4f 	bl	143e0 <CUSBRequest::GetSetupData()>
    d6a0:	e3a06008 	mov	r6, #8
    d6a4:	e1a05000 	mov	r5, r0
    d6a8:	e5846024 	str	r6, [r4, #36]	; 0x24
    d6ac:	e5840048 	str	r0, [r4, #72]	; 0x48
    d6b0:	eaffffb5 	b	d58c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x160>
    d6b4:	e3a02031 	mov	r2, #49	; 0x31
    d6b8:	e59f1064 	ldr	r1, [pc, #100]	; d724 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d6bc:	e59f006c 	ldr	r0, [pc, #108]	; d730 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x304>
    d6c0:	eb005bef 	bl	24684 <assertion_failed>
    d6c4:	e3a02034 	mov	r2, #52	; 0x34
    d6c8:	e59f1054 	ldr	r1, [pc, #84]	; d724 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d6cc:	e59f0060 	ldr	r0, [pc, #96]	; d734 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x308>
    d6d0:	eb005beb 	bl	24684 <assertion_failed>
    d6d4:	e3a02036 	mov	r2, #54	; 0x36
    d6d8:	e59f1044 	ldr	r1, [pc, #68]	; d724 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d6dc:	e59f0054 	ldr	r0, [pc, #84]	; d738 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x30c>
    d6e0:	eb005be7 	bl	24684 <assertion_failed>
    d6e4:	e3a0206d 	mov	r2, #109	; 0x6d
    d6e8:	e59f1034 	ldr	r1, [pc, #52]	; d724 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d6ec:	e59f0048 	ldr	r0, [pc, #72]	; d73c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x310>
    d6f0:	eb005be3 	bl	24684 <assertion_failed>
    d6f4:	e3a02061 	mov	r2, #97	; 0x61
    d6f8:	e59f1024 	ldr	r1, [pc, #36]	; d724 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d6fc:	e59f003c 	ldr	r0, [pc, #60]	; d740 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x314>
    d700:	eb005bdf 	bl	24684 <assertion_failed>
    d704:	e3a02088 	mov	r2, #136	; 0x88
    d708:	e59f1014 	ldr	r1, [pc, #20]	; d724 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d70c:	e59f0030 	ldr	r0, [pc, #48]	; d744 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x318>
    d710:	eb005bdb 	bl	24684 <assertion_failed>
    d714:	e3a0208b 	mov	r2, #139	; 0x8b
    d718:	e59f1004 	ldr	r1, [pc, #4]	; d724 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d71c:	e59f0024 	ldr	r0, [pc, #36]	; d748 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x31c>
    d720:	eb005bd7 	bl	24684 <assertion_failed>
    d724:	0003f358 	.word	0x0003f358
    d728:	0003f44c 	.word	0x0003f44c
    d72c:	10624dd3 	.word	0x10624dd3
    d730:	0003f41c 	.word	0x0003f41c
    d734:	0003f408 	.word	0x0003f408
    d738:	0003f428 	.word	0x0003f428
    d73c:	0003f464 	.word	0x0003f464
    d740:	0003f438 	.word	0x0003f438
    d744:	0003f48c 	.word	0x0003f48c
    d748:	0003f4c0 	.word	0x0003f4c0

0000d74c <CDWHCITransferStageData::GetDeviceAddress() const>:
    d74c:	e5900014 	ldr	r0, [r0, #20]
    d750:	e3500000 	cmp	r0, #0
    d754:	0a000000 	beq	d75c <CDWHCITransferStageData::GetDeviceAddress() const+0x10>
    d758:	ea0002c5 	b	e274 <CUSBDevice::GetAddress() const>
    d75c:	e92d4010 	push	{r4, lr}
    d760:	e59f2008 	ldr	r2, [pc, #8]	; d770 <CDWHCITransferStageData::GetDeviceAddress() const+0x24>
    d764:	e59f1008 	ldr	r1, [pc, #8]	; d774 <CDWHCITransferStageData::GetDeviceAddress() const+0x28>
    d768:	e59f0008 	ldr	r0, [pc, #8]	; d778 <CDWHCITransferStageData::GetDeviceAddress() const+0x2c>
    d76c:	eb005bc4 	bl	24684 <assertion_failed>
    d770:	00000111 	.word	0x00000111
    d774:	0003f358 	.word	0x0003f358
    d778:	0003f428 	.word	0x0003f428

0000d77c <CDWHCITransferStageData::GetEndpointType() const>:
    d77c:	e5900018 	ldr	r0, [r0, #24]
    d780:	e92d4010 	push	{r4, lr}
    d784:	e3500000 	cmp	r0, #0
    d788:	0a000005 	beq	d7a4 <CDWHCITransferStageData::GetEndpointType() const+0x28>
    d78c:	eb0006da 	bl	f2fc <CUSBEndpoint::GetType() const>
    d790:	e3500002 	cmp	r0, #2
    d794:	8a000006 	bhi	d7b4 <CDWHCITransferStageData::GetEndpointType() const+0x38>
    d798:	e59f3024 	ldr	r3, [pc, #36]	; d7c4 <CDWHCITransferStageData::GetEndpointType() const+0x48>
    d79c:	e7d30100 	ldrb	r0, [r3, r0, lsl #2]
    d7a0:	e8bd8010 	pop	{r4, pc}
    d7a4:	e59f201c 	ldr	r2, [pc, #28]	; d7c8 <CDWHCITransferStageData::GetEndpointType() const+0x4c>
    d7a8:	e59f101c 	ldr	r1, [pc, #28]	; d7cc <CDWHCITransferStageData::GetEndpointType() const+0x50>
    d7ac:	e59f001c 	ldr	r0, [pc, #28]	; d7d0 <CDWHCITransferStageData::GetEndpointType() const+0x54>
    d7b0:	eb005bb3 	bl	24684 <assertion_failed>
    d7b4:	e59f2018 	ldr	r2, [pc, #24]	; d7d4 <CDWHCITransferStageData::GetEndpointType() const+0x58>
    d7b8:	e59f100c 	ldr	r1, [pc, #12]	; d7cc <CDWHCITransferStageData::GetEndpointType() const+0x50>
    d7bc:	e59f0014 	ldr	r0, [pc, #20]	; d7d8 <CDWHCITransferStageData::GetEndpointType() const+0x5c>
    d7c0:	eb005baf 	bl	24684 <assertion_failed>
    d7c4:	0003f534 	.word	0x0003f534
    d7c8:	00000117 	.word	0x00000117
    d7cc:	0003f358 	.word	0x0003f358
    d7d0:	0003f408 	.word	0x0003f408
    d7d4:	0000012a 	.word	0x0000012a
    d7d8:	0003f63c 	.word	0x0003f63c

0000d7dc <CDWHCITransferStageData::GetEndpointNumber() const>:
    d7dc:	e5900018 	ldr	r0, [r0, #24]
    d7e0:	e3500000 	cmp	r0, #0
    d7e4:	0a000000 	beq	d7ec <CDWHCITransferStageData::GetEndpointNumber() const+0x10>
    d7e8:	ea0006c1 	b	f2f4 <CUSBEndpoint::GetNumber() const>
    d7ec:	e92d4010 	push	{r4, lr}
    d7f0:	e59f2008 	ldr	r2, [pc, #8]	; d800 <CDWHCITransferStageData::GetEndpointNumber() const+0x24>
    d7f4:	e59f1008 	ldr	r1, [pc, #8]	; d804 <CDWHCITransferStageData::GetEndpointNumber() const+0x28>
    d7f8:	e59f0008 	ldr	r0, [pc, #8]	; d808 <CDWHCITransferStageData::GetEndpointNumber() const+0x2c>
    d7fc:	eb005ba0 	bl	24684 <assertion_failed>
    d800:	00000133 	.word	0x00000133
    d804:	0003f358 	.word	0x0003f358
    d808:	0003f408 	.word	0x0003f408

0000d80c <CDWHCITransferStageData::GetMaxPacketSize() const>:
    d80c:	e5900020 	ldr	r0, [r0, #32]
    d810:	e12fff1e 	bx	lr

0000d814 <CDWHCITransferStageData::GetSpeed() const>:
    d814:	e5d0001c 	ldrb	r0, [r0, #28]
    d818:	e12fff1e 	bx	lr

0000d81c <CDWHCITransferStageData::GetPID() const>:
    d81c:	e5903018 	ldr	r3, [r0, #24]
    d820:	e92d4010 	push	{r4, lr}
    d824:	e3530000 	cmp	r3, #0
    d828:	0a000008 	beq	d850 <CDWHCITransferStageData::GetPID() const+0x34>
    d82c:	e5d01009 	ldrb	r1, [r0, #9]
    d830:	e1a00003 	mov	r0, r3
    d834:	eb0006c6 	bl	f354 <CUSBEndpoint::GetNextPID(bool)>
    d838:	e3500002 	cmp	r0, #2
    d83c:	8a000007 	bhi	d860 <CDWHCITransferStageData::GetPID() const+0x44>
    d840:	e59f3028 	ldr	r3, [pc, #40]	; d870 <CDWHCITransferStageData::GetPID() const+0x54>
    d844:	e0830000 	add	r0, r3, r0
    d848:	e5d0000c 	ldrb	r0, [r0, #12]
    d84c:	e8bd8010 	pop	{r4, pc}
    d850:	e59f201c 	ldr	r2, [pc, #28]	; d874 <CDWHCITransferStageData::GetPID() const+0x58>
    d854:	e59f101c 	ldr	r1, [pc, #28]	; d878 <CDWHCITransferStageData::GetPID() const+0x5c>
    d858:	e59f001c 	ldr	r0, [pc, #28]	; d87c <CDWHCITransferStageData::GetPID() const+0x60>
    d85c:	eb005b88 	bl	24684 <assertion_failed>
    d860:	e59f2018 	ldr	r2, [pc, #24]	; d880 <CDWHCITransferStageData::GetPID() const+0x64>
    d864:	e59f100c 	ldr	r1, [pc, #12]	; d878 <CDWHCITransferStageData::GetPID() const+0x5c>
    d868:	e59f0014 	ldr	r0, [pc, #20]	; d884 <CDWHCITransferStageData::GetPID() const+0x68>
    d86c:	eb005b84 	bl	24684 <assertion_failed>
    d870:	0003f534 	.word	0x0003f534
    d874:	00000143 	.word	0x00000143
    d878:	0003f358 	.word	0x0003f358
    d87c:	0003f408 	.word	0x0003f408
    d880:	00000156 	.word	0x00000156
    d884:	0003f63c 	.word	0x0003f63c

0000d888 <CDWHCITransferStageData::IsDirectionIn() const>:
    d888:	e5d00008 	ldrb	r0, [r0, #8]
    d88c:	e12fff1e 	bx	lr

0000d890 <CDWHCITransferStageData::IsStatusStage() const>:
    d890:	e5d00009 	ldrb	r0, [r0, #9]
    d894:	e12fff1e 	bx	lr

0000d898 <CDWHCITransferStageData::GetDMAAddress() const>:
    d898:	e5900048 	ldr	r0, [r0, #72]	; 0x48
    d89c:	e3500000 	cmp	r0, #0
    d8a0:	112fff1e 	bxne	lr
    d8a4:	e92d4010 	push	{r4, lr}
    d8a8:	e59f2008 	ldr	r2, [pc, #8]	; d8b8 <CDWHCITransferStageData::GetDMAAddress() const+0x20>
    d8ac:	e59f1008 	ldr	r1, [pc, #8]	; d8bc <CDWHCITransferStageData::GetDMAAddress() const+0x24>
    d8b0:	e59f0008 	ldr	r0, [pc, #8]	; d8c0 <CDWHCITransferStageData::GetDMAAddress() const+0x28>
    d8b4:	eb005b72 	bl	24684 <assertion_failed>
    d8b8:	00000169 	.word	0x00000169
    d8bc:	0003f358 	.word	0x0003f358
    d8c0:	0003f44c 	.word	0x0003f44c

0000d8c4 <CDWHCITransferStageData::GetBytesToTransfer() const>:
    d8c4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d8c8:	e12fff1e 	bx	lr

0000d8cc <CDWHCITransferStageData::GetPacketsToTransfer() const>:
    d8cc:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    d8d0:	e12fff1e 	bx	lr

0000d8d4 <CDWHCITransferStageData::IsSplit() const>:
    d8d4:	e5d00010 	ldrb	r0, [r0, #16]
    d8d8:	e12fff1e 	bx	lr

0000d8dc <CDWHCITransferStageData::IsSplitComplete() const>:
    d8dc:	e5d03010 	ldrb	r3, [r0, #16]
    d8e0:	e3530000 	cmp	r3, #0
    d8e4:	0a000001 	beq	d8f0 <CDWHCITransferStageData::IsSplitComplete() const+0x14>
    d8e8:	e5d00011 	ldrb	r0, [r0, #17]
    d8ec:	e12fff1e 	bx	lr
    d8f0:	e92d4010 	push	{r4, lr}
    d8f4:	e59f2008 	ldr	r2, [pc, #8]	; d904 <CDWHCITransferStageData::IsSplitComplete() const+0x28>
    d8f8:	e59f1008 	ldr	r1, [pc, #8]	; d908 <CDWHCITransferStageData::IsSplitComplete() const+0x2c>
    d8fc:	e59f0008 	ldr	r0, [pc, #8]	; d90c <CDWHCITransferStageData::IsSplitComplete() const+0x30>
    d900:	eb005b5f 	bl	24684 <assertion_failed>
    d904:	0000017f 	.word	0x0000017f
    d908:	0003f358 	.word	0x0003f358
    d90c:	0003f3f4 	.word	0x0003f3f4

0000d910 <CDWHCITransferStageData::GetHubAddress() const>:
    d910:	e5d03010 	ldrb	r3, [r0, #16]
    d914:	e92d4010 	push	{r4, lr}
    d918:	e3530000 	cmp	r3, #0
    d91c:	0a000004 	beq	d934 <CDWHCITransferStageData::GetHubAddress() const+0x24>
    d920:	e5900014 	ldr	r0, [r0, #20]
    d924:	e3500000 	cmp	r0, #0
    d928:	0a000005 	beq	d944 <CDWHCITransferStageData::GetHubAddress() const+0x34>
    d92c:	e8bd4010 	pop	{r4, lr}
    d930:	ea000255 	b	e28c <CUSBDevice::GetHubAddress() const>
    d934:	e59f2018 	ldr	r2, [pc, #24]	; d954 <CDWHCITransferStageData::GetHubAddress() const+0x44>
    d938:	e59f1018 	ldr	r1, [pc, #24]	; d958 <CDWHCITransferStageData::GetHubAddress() const+0x48>
    d93c:	e59f0018 	ldr	r0, [pc, #24]	; d95c <CDWHCITransferStageData::GetHubAddress() const+0x4c>
    d940:	eb005b4f 	bl	24684 <assertion_failed>
    d944:	e3a02f62 	mov	r2, #392	; 0x188
    d948:	e59f1008 	ldr	r1, [pc, #8]	; d958 <CDWHCITransferStageData::GetHubAddress() const+0x48>
    d94c:	e59f000c 	ldr	r0, [pc, #12]	; d960 <CDWHCITransferStageData::GetHubAddress() const+0x50>
    d950:	eb005b4b 	bl	24684 <assertion_failed>
    d954:	00000186 	.word	0x00000186
    d958:	0003f358 	.word	0x0003f358
    d95c:	0003f3f4 	.word	0x0003f3f4
    d960:	0003f428 	.word	0x0003f428

0000d964 <CDWHCITransferStageData::GetHubPortAddress() const>:
    d964:	e5d03010 	ldrb	r3, [r0, #16]
    d968:	e92d4010 	push	{r4, lr}
    d96c:	e3530000 	cmp	r3, #0
    d970:	0a000004 	beq	d988 <CDWHCITransferStageData::GetHubPortAddress() const+0x24>
    d974:	e5900014 	ldr	r0, [r0, #20]
    d978:	e3500000 	cmp	r0, #0
    d97c:	0a000005 	beq	d998 <CDWHCITransferStageData::GetHubPortAddress() const+0x34>
    d980:	e8bd4010 	pop	{r4, lr}
    d984:	ea000242 	b	e294 <CUSBDevice::GetHubPortNumber() const>
    d988:	e59f2018 	ldr	r2, [pc, #24]	; d9a8 <CDWHCITransferStageData::GetHubPortAddress() const+0x44>
    d98c:	e59f1018 	ldr	r1, [pc, #24]	; d9ac <CDWHCITransferStageData::GetHubPortAddress() const+0x48>
    d990:	e59f0018 	ldr	r0, [pc, #24]	; d9b0 <CDWHCITransferStageData::GetHubPortAddress() const+0x4c>
    d994:	eb005b3a 	bl	24684 <assertion_failed>
    d998:	e3a02e19 	mov	r2, #400	; 0x190
    d99c:	e59f1008 	ldr	r1, [pc, #8]	; d9ac <CDWHCITransferStageData::GetHubPortAddress() const+0x48>
    d9a0:	e59f000c 	ldr	r0, [pc, #12]	; d9b4 <CDWHCITransferStageData::GetHubPortAddress() const+0x50>
    d9a4:	eb005b36 	bl	24684 <assertion_failed>
    d9a8:	0000018e 	.word	0x0000018e
    d9ac:	0003f358 	.word	0x0003f358
    d9b0:	0003f3f4 	.word	0x0003f3f4
    d9b4:	0003f428 	.word	0x0003f428

0000d9b8 <CDWHCITransferStageData::GetSplitPosition() const>:
    d9b8:	e3a00003 	mov	r0, #3
    d9bc:	e12fff1e 	bx	lr

0000d9c0 <CDWHCITransferStageData::GetStatusMask() const>:
    d9c0:	e5d03010 	ldrb	r3, [r0, #16]
    d9c4:	e3530000 	cmp	r3, #0
    d9c8:	0a000001 	beq	d9d4 <CDWHCITransferStageData::GetStatusMask() const+0x14>
    d9cc:	e59f0018 	ldr	r0, [pc, #24]	; d9ec <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    d9d0:	e12fff1e 	bx	lr
    d9d4:	e92d4010 	push	{r4, lr}
    d9d8:	ebfffe82 	bl	d3e8 <CDWHCITransferStageData::IsPeriodic() const>
    d9dc:	e3500000 	cmp	r0, #0
    d9e0:	159f0004 	ldrne	r0, [pc, #4]	; d9ec <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    d9e4:	059f0004 	ldreq	r0, [pc, #4]	; d9f0 <CDWHCITransferStageData::GetStatusMask() const+0x30>
    d9e8:	e8bd8010 	pop	{r4, pc}
    d9ec:	000007ff 	.word	0x000007ff
    d9f0:	0000078f 	.word	0x0000078f

0000d9f4 <CDWHCITransferStageData::GetTransactionStatus() const>:
    d9f4:	e5900040 	ldr	r0, [r0, #64]	; 0x40
    d9f8:	e3500000 	cmp	r0, #0
    d9fc:	112fff1e 	bxne	lr
    da00:	e92d4010 	push	{r4, lr}
    da04:	e59f2008 	ldr	r2, [pc, #8]	; da14 <CDWHCITransferStageData::GetTransactionStatus() const+0x20>
    da08:	e59f1008 	ldr	r1, [pc, #8]	; da18 <CDWHCITransferStageData::GetTransactionStatus() const+0x24>
    da0c:	e59f0008 	ldr	r0, [pc, #8]	; da1c <CDWHCITransferStageData::GetTransactionStatus() const+0x28>
    da10:	eb005b1b 	bl	24684 <assertion_failed>
    da14:	000001ad 	.word	0x000001ad
    da18:	0003f358 	.word	0x0003f358
    da1c:	0003f4d4 	.word	0x0003f4d4

0000da20 <CDWHCITransferStageData::IsStageComplete() const>:
    da20:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    da24:	e16f0f10 	clz	r0, r0
    da28:	e1a002a0 	lsr	r0, r0, #5
    da2c:	e12fff1e 	bx	lr

0000da30 <CDWHCITransferStageData::GetResultLen() const>:
    da30:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    da34:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    da38:	e1520000 	cmp	r2, r0
    da3c:	31a00002 	movcc	r0, r2
    da40:	e12fff1e 	bx	lr

0000da44 <CDWHCITransferStageData::IsTimeout() const>:
    da44:	e590300c 	ldr	r3, [r0, #12]
    da48:	e3530000 	cmp	r3, #0
    da4c:	1a000001 	bne	da58 <CDWHCITransferStageData::IsTimeout() const+0x14>
    da50:	e1a00003 	mov	r0, r3
    da54:	e12fff1e 	bx	lr
    da58:	e92d4010 	push	{r4, lr}
    da5c:	e1a04000 	mov	r4, r0
    da60:	eb0070d3 	bl	29db4 <CTimer::Get()>
    da64:	eb006e20 	bl	292ec <CTimer::GetTicks() const>
    da68:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    da6c:	e594300c 	ldr	r3, [r4, #12]
    da70:	e0400002 	sub	r0, r0, r2
    da74:	e1500003 	cmp	r0, r3
    da78:	33a00000 	movcc	r0, #0
    da7c:	23a00001 	movcs	r0, #1
    da80:	e8bd8010 	pop	{r4, pc}

0000da84 <CDWHCITransferStageData::GetURB() const>:
    da84:	e5900004 	ldr	r0, [r0, #4]
    da88:	e3500000 	cmp	r0, #0
    da8c:	112fff1e 	bxne	lr
    da90:	e3a02f73 	mov	r2, #460	; 0x1cc
    da94:	e92d4010 	push	{r4, lr}
    da98:	e59f1004 	ldr	r1, [pc, #4]	; daa4 <CDWHCITransferStageData::GetURB() const+0x20>
    da9c:	e59f0004 	ldr	r0, [pc, #4]	; daa8 <CDWHCITransferStageData::GetURB() const+0x24>
    daa0:	eb005af7 	bl	24684 <assertion_failed>
    daa4:	0003f358 	.word	0x0003f358
    daa8:	0003f41c 	.word	0x0003f41c

0000daac <CDWHCITransferStageData::GetFrameScheduler() const>:
    daac:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    dab0:	e12fff1e 	bx	lr

0000dab4 <CDWHCITransferStageData::operator new(unsigned int)>:
    dab4:	e3500054 	cmp	r0, #84	; 0x54
    dab8:	e92d4010 	push	{r4, lr}
    dabc:	1a000005 	bne	dad8 <CDWHCITransferStageData::operator new(unsigned int)+0x24>
    dac0:	e59f3030 	ldr	r3, [pc, #48]	; daf8 <CDWHCITransferStageData::operator new(unsigned int)+0x44>
    dac4:	e5930000 	ldr	r0, [r3]
    dac8:	e3500000 	cmp	r0, #0
    dacc:	0a000005 	beq	dae8 <CDWHCITransferStageData::operator new(unsigned int)+0x34>
    dad0:	e8bd4010 	pop	{r4, lr}
    dad4:	ea005bec 	b	24a8c <CClassAllocator::Allocate()>
    dad8:	e59f201c 	ldr	r2, [pc, #28]	; dafc <CDWHCITransferStageData::operator new(unsigned int)+0x48>
    dadc:	e59f101c 	ldr	r1, [pc, #28]	; db00 <CDWHCITransferStageData::operator new(unsigned int)+0x4c>
    dae0:	e59f001c 	ldr	r0, [pc, #28]	; db04 <CDWHCITransferStageData::operator new(unsigned int)+0x50>
    dae4:	eb005ae6 	bl	24684 <assertion_failed>
    dae8:	e59f200c 	ldr	r2, [pc, #12]	; dafc <CDWHCITransferStageData::operator new(unsigned int)+0x48>
    daec:	e59f100c 	ldr	r1, [pc, #12]	; db00 <CDWHCITransferStageData::operator new(unsigned int)+0x4c>
    daf0:	e59f0010 	ldr	r0, [pc, #16]	; db08 <CDWHCITransferStageData::operator new(unsigned int)+0x54>
    daf4:	eb005ae2 	bl	24684 <assertion_failed>
    daf8:	0004da74 	.word	0x0004da74
    dafc:	000001d5 	.word	0x000001d5
    db00:	0003f358 	.word	0x0003f358
    db04:	0003f4f0 	.word	0x0003f4f0
    db08:	0003f050 	.word	0x0003f050

0000db0c <CDWHCITransferStageData::operator delete(void*, unsigned int)>:
    db0c:	e3510054 	cmp	r1, #84	; 0x54
    db10:	e92d4010 	push	{r4, lr}
    db14:	1a000006 	bne	db34 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x28>
    db18:	e59f3034 	ldr	r3, [pc, #52]	; db54 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x48>
    db1c:	e1a01000 	mov	r1, r0
    db20:	e5930000 	ldr	r0, [r3]
    db24:	e3500000 	cmp	r0, #0
    db28:	0a000005 	beq	db44 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x38>
    db2c:	e8bd4010 	pop	{r4, lr}
    db30:	ea005c10 	b	24b78 <CClassAllocator::Free(void*)>
    db34:	e59f201c 	ldr	r2, [pc, #28]	; db58 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x4c>
    db38:	e59f101c 	ldr	r1, [pc, #28]	; db5c <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x50>
    db3c:	e59f001c 	ldr	r0, [pc, #28]	; db60 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x54>
    db40:	eb005acf 	bl	24684 <assertion_failed>
    db44:	e59f200c 	ldr	r2, [pc, #12]	; db58 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x4c>
    db48:	e59f100c 	ldr	r1, [pc, #12]	; db5c <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x50>
    db4c:	e59f0010 	ldr	r0, [pc, #16]	; db64 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x58>
    db50:	eb005acb 	bl	24684 <assertion_failed>
    db54:	0004da74 	.word	0x0004da74
    db58:	000001d5 	.word	0x000001d5
    db5c:	0003f358 	.word	0x0003f358
    db60:	0003f4f0 	.word	0x0003f4f0
    db64:	0003f050 	.word	0x0003f050

0000db68 <CDWHCITransferStageData::InitAllocator(unsigned int)>:
    db68:	e92d4070 	push	{r4, r5, r6, lr}
    db6c:	e59f6040 	ldr	r6, [pc, #64]	; dbb4 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x4c>
    db70:	e5963000 	ldr	r3, [r6]
    db74:	e3530000 	cmp	r3, #0
    db78:	1a000009 	bne	dba4 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x3c>
    db7c:	e1a04000 	mov	r4, r0
    db80:	e3a0001c 	mov	r0, #28
    db84:	eb0074c5 	bl	2aea0 <operator new(unsigned int)>
    db88:	e1a05000 	mov	r5, r0
    db8c:	e1a02004 	mov	r2, r4
    db90:	e3a01054 	mov	r1, #84	; 0x54
    db94:	e59f301c 	ldr	r3, [pc, #28]	; dbb8 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x50>
    db98:	eb005ba2 	bl	24a28 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    db9c:	e5865000 	str	r5, [r6]
    dba0:	e8bd8070 	pop	{r4, r5, r6, pc}
    dba4:	e59f2010 	ldr	r2, [pc, #16]	; dbbc <CDWHCITransferStageData::InitAllocator(unsigned int)+0x54>
    dba8:	e59f1010 	ldr	r1, [pc, #16]	; dbc0 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x58>
    dbac:	e59f0010 	ldr	r0, [pc, #16]	; dbc4 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x5c>
    dbb0:	eb005ab3 	bl	24684 <assertion_failed>
    dbb4:	0004da74 	.word	0x0004da74
    dbb8:	0003f51c 	.word	0x0003f51c
    dbbc:	000001d5 	.word	0x000001d5
    dbc0:	0003f358 	.word	0x0003f358
    dbc4:	0003f064 	.word	0x0003f064

0000dbc8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>:
    dbc8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    dbcc:	e59f7054 	ldr	r7, [pc, #84]	; dc28 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    dbd0:	e24dd00c 	sub	sp, sp, #12
    dbd4:	e5973000 	ldr	r3, [r7]
    dbd8:	e3530000 	cmp	r3, #0
    dbdc:	1a00000d 	bne	dc18 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    dbe0:	e1a05001 	mov	r5, r1
    dbe4:	e1a04000 	mov	r4, r0
    dbe8:	e3a0001c 	mov	r0, #28
    dbec:	eb0074ab 	bl	2aea0 <operator new(unsigned int)>
    dbf0:	e59f1034 	ldr	r1, [pc, #52]	; dc2c <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    dbf4:	e1a03005 	mov	r3, r5
    dbf8:	e58d1000 	str	r1, [sp]
    dbfc:	e1a02004 	mov	r2, r4
    dc00:	e3a01054 	mov	r1, #84	; 0x54
    dc04:	e1a06000 	mov	r6, r0
    dc08:	eb005b92 	bl	24a58 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    dc0c:	e5876000 	str	r6, [r7]
    dc10:	e28dd00c 	add	sp, sp, #12
    dc14:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    dc18:	e59f2010 	ldr	r2, [pc, #16]	; dc30 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    dc1c:	e59f1010 	ldr	r1, [pc, #16]	; dc34 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    dc20:	e59f0010 	ldr	r0, [pc, #16]	; dc38 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x70>
    dc24:	eb005a96 	bl	24684 <assertion_failed>
    dc28:	0004da74 	.word	0x0004da74
    dc2c:	0003f51c 	.word	0x0003f51c
    dc30:	000001d5 	.word	0x000001d5
    dc34:	0003f358 	.word	0x0003f358
    dc38:	0003f064 	.word	0x0003f064

0000dc3c <CUSBDevice::~CUSBDevice()>:
    dc3c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dc40:	e1a04000 	mov	r4, r0
    dc44:	e1a05000 	mov	r5, r0
    dc48:	e3a07000 	mov	r7, #0
    dc4c:	e59f3110 	ldr	r3, [pc, #272]	; dd64 <CUSBDevice::~CUSBDevice()+0x128>
    dc50:	e2806054 	add	r6, r0, #84	; 0x54
    dc54:	e484302c 	str	r3, [r4], #44	; 0x2c
    dc58:	e5b40004 	ldr	r0, [r4, #4]!
    dc5c:	e3500000 	cmp	r0, #0
    dc60:	0a000002 	beq	dc70 <CUSBDevice::~CUSBDevice()+0x34>
    dc64:	e5903000 	ldr	r3, [r0]
    dc68:	e5933004 	ldr	r3, [r3, #4]
    dc6c:	e12fff33 	blx	r3
    dc70:	e1560004 	cmp	r6, r4
    dc74:	e5847000 	str	r7, [r4]
    dc78:	1afffff6 	bne	dc58 <CUSBDevice::~CUSBDevice()+0x1c>
    dc7c:	e5d53014 	ldrb	r3, [r5, #20]
    dc80:	e3530000 	cmp	r3, #0
    dc84:	0a000010 	beq	dccc <CUSBDevice::~CUSBDevice()+0x90>
    dc88:	e59fc0d8 	ldr	ip, [pc, #216]	; dd68 <CUSBDevice::~CUSBDevice()+0x12c>
    dc8c:	e2634020 	rsb	r4, r3, #32
    dc90:	e59ce000 	ldr	lr, [ip]
    dc94:	e59c0004 	ldr	r0, [ip, #4]
    dc98:	e1a0133e 	lsr	r1, lr, r3
    dc9c:	e1811410 	orr	r1, r1, r0, lsl r4
    dca0:	e2432020 	sub	r2, r3, #32
    dca4:	e1811230 	orr	r1, r1, r0, lsr r2
    dca8:	e3110001 	tst	r1, #1
    dcac:	0a000028 	beq	dd54 <CUSBDevice::~CUSBDevice()+0x118>
    dcb0:	e3a01001 	mov	r1, #1
    dcb4:	e1a02211 	lsl	r2, r1, r2
    dcb8:	e1822431 	orr	r2, r2, r1, lsr r4
    dcbc:	e1c02002 	bic	r2, r0, r2
    dcc0:	e1ce3311 	bic	r3, lr, r1, lsl r3
    dcc4:	e58c2004 	str	r2, [ip, #4]
    dcc8:	e58c3000 	str	r3, [ip]
    dccc:	e595402c 	ldr	r4, [r5, #44]	; 0x2c
    dcd0:	e3540000 	cmp	r4, #0
    dcd4:	0a000004 	beq	dcec <CUSBDevice::~CUSBDevice()+0xb0>
    dcd8:	e1a00004 	mov	r0, r4
    dcdc:	eb00270f 	bl	17920 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    dce0:	e1a00004 	mov	r0, r4
    dce4:	e3a0101c 	mov	r1, #28
    dce8:	eb00747a 	bl	2aed8 <operator delete(void*, unsigned int)>
    dcec:	e3a03000 	mov	r3, #0
    dcf0:	e5950028 	ldr	r0, [r5, #40]	; 0x28
    dcf4:	e585302c 	str	r3, [r5, #44]	; 0x2c
    dcf8:	e1500003 	cmp	r0, r3
    dcfc:	0a000001 	beq	dd08 <CUSBDevice::~CUSBDevice()+0xcc>
    dd00:	e3a01009 	mov	r1, #9
    dd04:	eb007473 	bl	2aed8 <operator delete(void*, unsigned int)>
    dd08:	e3a03000 	mov	r3, #0
    dd0c:	e5950024 	ldr	r0, [r5, #36]	; 0x24
    dd10:	e5853028 	str	r3, [r5, #40]	; 0x28
    dd14:	e1500003 	cmp	r0, r3
    dd18:	0a000001 	beq	dd24 <CUSBDevice::~CUSBDevice()+0xe8>
    dd1c:	e3a01012 	mov	r1, #18
    dd20:	eb00746c 	bl	2aed8 <operator delete(void*, unsigned int)>
    dd24:	e3a03000 	mov	r3, #0
    dd28:	e5954018 	ldr	r4, [r5, #24]
    dd2c:	e5853024 	str	r3, [r5, #36]	; 0x24
    dd30:	e1540003 	cmp	r4, r3
    dd34:	0a000004 	beq	dd4c <CUSBDevice::~CUSBDevice()+0x110>
    dd38:	e1a00004 	mov	r0, r4
    dd3c:	eb000561 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
    dd40:	e1a00004 	mov	r0, r4
    dd44:	e3a01014 	mov	r1, #20
    dd48:	eb007462 	bl	2aed8 <operator delete(void*, unsigned int)>
    dd4c:	e1a00005 	mov	r0, r5
    dd50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dd54:	e3a02088 	mov	r2, #136	; 0x88
    dd58:	e59f100c 	ldr	r1, [pc, #12]	; dd6c <CUSBDevice::~CUSBDevice()+0x130>
    dd5c:	e59f000c 	ldr	r0, [pc, #12]	; dd70 <CUSBDevice::~CUSBDevice()+0x134>
    dd60:	eb005a47 	bl	24684 <assertion_failed>
    dd64:	0003f900 	.word	0x0003f900
    dd68:	0004da78 	.word	0x0004da78
    dd6c:	0003f544 	.word	0x0003f544
    dd70:	0003f554 	.word	0x0003f554

0000dd74 <CUSBDevice::~CUSBDevice()>:
    dd74:	e92d4010 	push	{r4, lr}
    dd78:	e1a04000 	mov	r4, r0
    dd7c:	ebffffae 	bl	dc3c <CUSBDevice::~CUSBDevice()>
    dd80:	e1a00004 	mov	r0, r4
    dd84:	e3a01058 	mov	r1, #88	; 0x58
    dd88:	eb007452 	bl	2aed8 <operator delete(void*, unsigned int)>
    dd8c:	e1a00004 	mov	r0, r4
    dd90:	e8bd8010 	pop	{r4, pc}

0000dd94 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>:
    dd94:	e92d4070 	push	{r4, r5, r6, lr}
    dd98:	e1a04000 	mov	r4, r0
    dd9c:	e3a05000 	mov	r5, #0
    dda0:	e3a00001 	mov	r0, #1
    dda4:	e1510005 	cmp	r1, r5
    dda8:	e5841004 	str	r1, [r4, #4]
    ddac:	e59f108c 	ldr	r1, [pc, #140]	; de40 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xac>
    ddb0:	e5843008 	str	r3, [r4, #8]
    ddb4:	e5c42015 	strb	r2, [r4, #21]
    ddb8:	e5841000 	str	r1, [r4]
    ddbc:	e5c4001e 	strb	r0, [r4, #30]
    ddc0:	e584500c 	str	r5, [r4, #12]
    ddc4:	e5c45014 	strb	r5, [r4, #20]
    ddc8:	e5845018 	str	r5, [r4, #24]
    ddcc:	e1c451bc 	strh	r5, [r4, #28]
    ddd0:	e5845020 	str	r5, [r4, #32]
    ddd4:	e5845024 	str	r5, [r4, #36]	; 0x24
    ddd8:	e5845028 	str	r5, [r4, #40]	; 0x28
    dddc:	e584502c 	str	r5, [r4, #44]	; 0x2c
    dde0:	0a00000e 	beq	de20 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x8c>
    dde4:	e3530000 	cmp	r3, #0
    dde8:	0a000010 	beq	de30 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x9c>
    ddec:	e3a00014 	mov	r0, #20
    ddf0:	eb00742a 	bl	2aea0 <operator new(unsigned int)>
    ddf4:	e1a06000 	mov	r6, r0
    ddf8:	e1a01004 	mov	r1, r4
    ddfc:	eb0004bb 	bl	f0f0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    de00:	e5846018 	str	r6, [r4, #24]
    de04:	e284302c 	add	r3, r4, #44	; 0x2c
    de08:	e2842054 	add	r2, r4, #84	; 0x54
    de0c:	e5a35004 	str	r5, [r3, #4]!
    de10:	e1530002 	cmp	r3, r2
    de14:	1afffffc 	bne	de0c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x78>
    de18:	e1a00004 	mov	r0, r4
    de1c:	e8bd8070 	pop	{r4, r5, r6, pc}
    de20:	e3a02038 	mov	r2, #56	; 0x38
    de24:	e59f1018 	ldr	r1, [pc, #24]	; de44 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb0>
    de28:	e59f0018 	ldr	r0, [pc, #24]	; de48 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb4>
    de2c:	eb005a14 	bl	24684 <assertion_failed>
    de30:	e3a02039 	mov	r2, #57	; 0x39
    de34:	e59f1008 	ldr	r1, [pc, #8]	; de44 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb0>
    de38:	e59f000c 	ldr	r0, [pc, #12]	; de4c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb8>
    de3c:	eb005a10 	bl	24684 <assertion_failed>
    de40:	0003f900 	.word	0x0003f900
    de44:	0003f544 	.word	0x0003f544
    de48:	0003f288 	.word	0x0003f288
    de4c:	0003f584 	.word	0x0003f584

0000de50 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>:
    de50:	e92d4070 	push	{r4, r5, r6, lr}
    de54:	e3a0c000 	mov	ip, #0
    de58:	e1a04000 	mov	r4, r0
    de5c:	e151000c 	cmp	r1, ip
    de60:	e59f0130 	ldr	r0, [pc, #304]	; df98 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x148>
    de64:	e5841004 	str	r1, [r4, #4]
    de68:	e59d1010 	ldr	r1, [sp, #16]
    de6c:	e584300c 	str	r3, [r4, #12]
    de70:	e5c42015 	strb	r2, [r4, #21]
    de74:	e5840000 	str	r0, [r4]
    de78:	e5841010 	str	r1, [r4, #16]
    de7c:	e584c008 	str	ip, [r4, #8]
    de80:	e5c4c014 	strb	ip, [r4, #20]
    de84:	e584c018 	str	ip, [r4, #24]
    de88:	e584c024 	str	ip, [r4, #36]	; 0x24
    de8c:	e584c028 	str	ip, [r4, #40]	; 0x28
    de90:	e584c02c 	str	ip, [r4, #44]	; 0x2c
    de94:	0a00002f 	beq	df58 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x108>
    de98:	e3530000 	cmp	r3, #0
    de9c:	0a000031 	beq	df68 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x118>
    dea0:	e1a00003 	mov	r0, r3
    dea4:	eb000665 	bl	f840 <CUSBFunction::GetDevice() const>
    dea8:	e3500000 	cmp	r0, #0
    deac:	0a000031 	beq	df78 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x128>
    deb0:	e5d0301c 	ldrb	r3, [r0, #28]
    deb4:	e5c4301c 	strb	r3, [r4, #28]
    deb8:	e5d0201d 	ldrb	r2, [r0, #29]
    debc:	e3530000 	cmp	r3, #0
    dec0:	e5c4201d 	strb	r2, [r4, #29]
    dec4:	e5d0301e 	ldrb	r3, [r0, #30]
    dec8:	e5c4301e 	strb	r3, [r4, #30]
    decc:	e5903020 	ldr	r3, [r0, #32]
    ded0:	e5843020 	str	r3, [r4, #32]
    ded4:	0a000010 	beq	df1c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xcc>
    ded8:	e5945018 	ldr	r5, [r4, #24]
    dedc:	e3550000 	cmp	r5, #0
    dee0:	1a000028 	bne	df88 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x138>
    dee4:	e3a00014 	mov	r0, #20
    dee8:	eb0073ec 	bl	2aea0 <operator new(unsigned int)>
    deec:	e1a01004 	mov	r1, r4
    def0:	e1a06000 	mov	r6, r0
    def4:	eb00047d 	bl	f0f0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    def8:	e1a02005 	mov	r2, r5
    defc:	e5846018 	str	r6, [r4, #24]
    df00:	e284302c 	add	r3, r4, #44	; 0x2c
    df04:	e2841054 	add	r1, r4, #84	; 0x54
    df08:	e5a32004 	str	r2, [r3, #4]!
    df0c:	e1530001 	cmp	r3, r1
    df10:	1afffffc 	bne	df08 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xb8>
    df14:	e1a00004 	mov	r0, r4
    df18:	e8bd8070 	pop	{r4, r5, r6, pc}
    df1c:	e5d03015 	ldrb	r3, [r0, #21]
    df20:	e3530002 	cmp	r3, #2
    df24:	1affffeb 	bne	ded8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    df28:	e5d43015 	ldrb	r3, [r4, #21]
    df2c:	e3530001 	cmp	r3, #1
    df30:	8affffe8 	bhi	ded8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    df34:	e3a02001 	mov	r2, #1
    df38:	e5943010 	ldr	r3, [r4, #16]
    df3c:	e5c4201c 	strb	r2, [r4, #28]
    df40:	e5d02014 	ldrb	r2, [r0, #20]
    df44:	e2833001 	add	r3, r3, #1
    df48:	e5c4201d 	strb	r2, [r4, #29]
    df4c:	e5840020 	str	r0, [r4, #32]
    df50:	e5c4301e 	strb	r3, [r4, #30]
    df54:	eaffffdf 	b	ded8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    df58:	e3a02057 	mov	r2, #87	; 0x57
    df5c:	e59f1038 	ldr	r1, [pc, #56]	; df9c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    df60:	e59f0038 	ldr	r0, [pc, #56]	; dfa0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x150>
    df64:	eb0059c6 	bl	24684 <assertion_failed>
    df68:	e3a02058 	mov	r2, #88	; 0x58
    df6c:	e59f1028 	ldr	r1, [pc, #40]	; df9c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    df70:	e59f002c 	ldr	r0, [pc, #44]	; dfa4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x154>
    df74:	eb0059c2 	bl	24684 <assertion_failed>
    df78:	e3a0205b 	mov	r2, #91	; 0x5b
    df7c:	e59f1018 	ldr	r1, [pc, #24]	; df9c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    df80:	e59f0020 	ldr	r0, [pc, #32]	; dfa8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x158>
    df84:	eb0059be 	bl	24684 <assertion_failed>
    df88:	e3a02073 	mov	r2, #115	; 0x73
    df8c:	e59f1008 	ldr	r1, [pc, #8]	; df9c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    df90:	e59f0014 	ldr	r0, [pc, #20]	; dfac <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x15c>
    df94:	eb0059ba 	bl	24684 <assertion_failed>
    df98:	0003f900 	.word	0x0003f900
    df9c:	0003f544 	.word	0x0003f544
    dfa0:	0003f288 	.word	0x0003f288
    dfa4:	0003f598 	.word	0x0003f598
    dfa8:	0003f5a4 	.word	0x0003f5a4
    dfac:	0003f5b4 	.word	0x0003f5b4

0000dfb0 <CUSBDevice::ReScanDevices()>:
    dfb0:	e92d4070 	push	{r4, r5, r6, lr}
    dfb4:	e3a05000 	mov	r5, #0
    dfb8:	e280402c 	add	r4, r0, #44	; 0x2c
    dfbc:	e2806054 	add	r6, r0, #84	; 0x54
    dfc0:	e5b40004 	ldr	r0, [r4, #4]!
    dfc4:	e3500000 	cmp	r0, #0
    dfc8:	0a000004 	beq	dfe0 <CUSBDevice::ReScanDevices()+0x30>
    dfcc:	e5903000 	ldr	r3, [r0]
    dfd0:	e5933020 	ldr	r3, [r3, #32]
    dfd4:	e12fff33 	blx	r3
    dfd8:	e3500000 	cmp	r0, #0
    dfdc:	11a05000 	movne	r5, r0
    dfe0:	e1540006 	cmp	r4, r6
    dfe4:	1afffff5 	bne	dfc0 <CUSBDevice::ReScanDevices()+0x10>
    dfe8:	e1a00005 	mov	r0, r5
    dfec:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dff0 <CUSBDevice::RemoveDevice()>:
    dff0:	e5903008 	ldr	r3, [r0, #8]
    dff4:	e3530000 	cmp	r3, #0
    dff8:	0a000003 	beq	e00c <CUSBDevice::RemoveDevice()+0x1c>
    dffc:	e5932000 	ldr	r2, [r3]
    e000:	e1a00003 	mov	r0, r3
    e004:	e592300c 	ldr	r3, [r2, #12]
    e008:	e12fff13 	bx	r3
    e00c:	e590300c 	ldr	r3, [r0, #12]
    e010:	e3530000 	cmp	r3, #0
    e014:	0a000002 	beq	e024 <CUSBDevice::RemoveDevice()+0x34>
    e018:	e5901010 	ldr	r1, [r0, #16]
    e01c:	e1a00003 	mov	r0, r3
    e020:	ea001a12 	b	14870 <CUSBStandardHub::RemoveDevice(unsigned int)>
    e024:	e3a02f7e 	mov	r2, #504	; 0x1f8
    e028:	e92d4010 	push	{r4, lr}
    e02c:	e59f1004 	ldr	r1, [pc, #4]	; e038 <CUSBDevice::RemoveDevice()+0x48>
    e030:	e59f0004 	ldr	r0, [pc, #4]	; e03c <CUSBDevice::RemoveDevice()+0x4c>
    e034:	eb005992 	bl	24684 <assertion_failed>
    e038:	0003f544 	.word	0x0003f544
    e03c:	0003f598 	.word	0x0003f598

0000e040 <CUSBDevice::GetName(TDeviceNameSelector) const>:
    e040:	e92d4070 	push	{r4, r5, r6, lr}
    e044:	e1a06000 	mov	r6, r0
    e048:	e24dd008 	sub	sp, sp, #8
    e04c:	e3a00010 	mov	r0, #16
    e050:	e1a04001 	mov	r4, r1
    e054:	eb007391 	bl	2aea0 <operator new(unsigned int)>
    e058:	e1a05000 	mov	r5, r0
    e05c:	eb006660 	bl	279e4 <CString::CString()>
    e060:	e3540000 	cmp	r4, #0
    e064:	0a000012 	beq	e0b4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x74>
    e068:	e3540001 	cmp	r4, #1
    e06c:	1a00002d 	bne	e128 <CUSBDevice::GetName(TDeviceNameSelector) const+0xe8>
    e070:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    e074:	e3510000 	cmp	r1, #0
    e078:	0a000022 	beq	e108 <CUSBDevice::GetName(TDeviceNameSelector) const+0xc8>
    e07c:	e5d12004 	ldrb	r2, [r1, #4]
    e080:	e2423001 	sub	r3, r2, #1
    e084:	e6ef3073 	uxtb	r3, r3
    e088:	e35300fd 	cmp	r3, #253	; 0xfd
    e08c:	8a000017 	bhi	e0f0 <CUSBDevice::GetName(TDeviceNameSelector) const+0xb0>
    e090:	e5d13005 	ldrb	r3, [r1, #5]
    e094:	e5d11006 	ldrb	r1, [r1, #6]
    e098:	e1a00005 	mov	r0, r5
    e09c:	e58d1000 	str	r1, [sp]
    e0a0:	e59f1090 	ldr	r1, [pc, #144]	; e138 <CUSBDevice::GetName(TDeviceNameSelector) const+0xf8>
    e0a4:	eb006b98 	bl	28f0c <CString::Format(char const*, ...)>
    e0a8:	e1a00005 	mov	r0, r5
    e0ac:	e28dd008 	add	sp, sp, #8
    e0b0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e0b4:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    e0b8:	e3510000 	cmp	r1, #0
    e0bc:	0a000015 	beq	e118 <CUSBDevice::GetName(TDeviceNameSelector) const+0xd8>
    e0c0:	e5d1000b 	ldrb	r0, [r1, #11]
    e0c4:	e5d1300a 	ldrb	r3, [r1, #10]
    e0c8:	e5d12008 	ldrb	r2, [r1, #8]
    e0cc:	e5d11009 	ldrb	r1, [r1, #9]
    e0d0:	e1833400 	orr	r3, r3, r0, lsl #8
    e0d4:	e1822401 	orr	r2, r2, r1, lsl #8
    e0d8:	e1a00005 	mov	r0, r5
    e0dc:	e59f1058 	ldr	r1, [pc, #88]	; e13c <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
    e0e0:	eb006b89 	bl	28f0c <CString::Format(char const*, ...)>
    e0e4:	e1a00005 	mov	r0, r5
    e0e8:	e28dd008 	add	sp, sp, #8
    e0ec:	e8bd8070 	pop	{r4, r5, r6, pc}
    e0f0:	e1a00005 	mov	r0, r5
    e0f4:	e59f1044 	ldr	r1, [pc, #68]	; e140 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
    e0f8:	eb006657 	bl	27a5c <CString::operator=(char const*)>
    e0fc:	e1a00005 	mov	r0, r5
    e100:	e28dd008 	add	sp, sp, #8
    e104:	e8bd8070 	pop	{r4, r5, r6, pc}
    e108:	e59f2034 	ldr	r2, [pc, #52]	; e144 <CUSBDevice::GetName(TDeviceNameSelector) const+0x104>
    e10c:	e59f1034 	ldr	r1, [pc, #52]	; e148 <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
    e110:	e59f0034 	ldr	r0, [pc, #52]	; e14c <CUSBDevice::GetName(TDeviceNameSelector) const+0x10c>
    e114:	eb00595a 	bl	24684 <assertion_failed>
    e118:	e3a02f81 	mov	r2, #516	; 0x204
    e11c:	e59f1024 	ldr	r1, [pc, #36]	; e148 <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
    e120:	e59f0024 	ldr	r0, [pc, #36]	; e14c <CUSBDevice::GetName(TDeviceNameSelector) const+0x10c>
    e124:	eb005956 	bl	24684 <assertion_failed>
    e128:	e3a02f86 	mov	r2, #536	; 0x218
    e12c:	e59f1014 	ldr	r1, [pc, #20]	; e148 <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
    e130:	e59f0018 	ldr	r0, [pc, #24]	; e150 <CUSBDevice::GetName(TDeviceNameSelector) const+0x110>
    e134:	eb005952 	bl	24684 <assertion_failed>
    e138:	0003f5f0 	.word	0x0003f5f0
    e13c:	0003f5dc 	.word	0x0003f5dc
    e140:	0003f5e8 	.word	0x0003f5e8
    e144:	0000020b 	.word	0x0000020b
    e148:	0003f544 	.word	0x0003f544
    e14c:	0003f5c8 	.word	0x0003f5c8
    e150:	0003f63c 	.word	0x0003f63c

0000e154 <CUSBDevice::GetNames() const>:
    e154:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e158:	e1a07000 	mov	r7, r0
    e15c:	e3a00010 	mov	r0, #16
    e160:	eb00734e 	bl	2aea0 <operator new(unsigned int)>
    e164:	e3a06000 	mov	r6, #0
    e168:	e1a05000 	mov	r5, r0
    e16c:	eb00661c 	bl	279e4 <CString::CString()>
    e170:	e59f80b8 	ldr	r8, [pc, #184]	; e230 <CUSBDevice::GetNames() const+0xdc>
    e174:	e59f90b8 	ldr	r9, [pc, #184]	; e234 <CUSBDevice::GetNames() const+0xe0>
    e178:	e1a01006 	mov	r1, r6
    e17c:	e1a00007 	mov	r0, r7
    e180:	ebffffae 	bl	e040 <CUSBDevice::GetName(TDeviceNameSelector) const>
    e184:	e2504000 	subs	r4, r0, #0
    e188:	0a000020 	beq	e210 <CUSBDevice::GetNames() const+0xbc>
    e18c:	e1a01008 	mov	r1, r8
    e190:	eb006682 	bl	27ba0 <CString::Compare(char const*) const>
    e194:	e3500000 	cmp	r0, #0
    e198:	1a00000d 	bne	e1d4 <CUSBDevice::GetNames() const+0x80>
    e19c:	e5943000 	ldr	r3, [r4]
    e1a0:	e1a00004 	mov	r0, r4
    e1a4:	e5933004 	ldr	r3, [r3, #4]
    e1a8:	e12fff33 	blx	r3
    e1ac:	e3560001 	cmp	r6, #1
    e1b0:	1a000005 	bne	e1cc <CUSBDevice::GetNames() const+0x78>
    e1b4:	e1a00005 	mov	r0, r5
    e1b8:	eb006653 	bl	27b0c <CString::GetLength() const>
    e1bc:	e3500000 	cmp	r0, #0
    e1c0:	0a00000d 	beq	e1fc <CUSBDevice::GetNames() const+0xa8>
    e1c4:	e1a00005 	mov	r0, r5
    e1c8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e1cc:	e3a06001 	mov	r6, #1
    e1d0:	eaffffe8 	b	e178 <CUSBDevice::GetNames() const+0x24>
    e1d4:	e1a00005 	mov	r0, r5
    e1d8:	eb00664b 	bl	27b0c <CString::GetLength() const>
    e1dc:	e3500000 	cmp	r0, #0
    e1e0:	1a00000e 	bne	e220 <CUSBDevice::GetNames() const+0xcc>
    e1e4:	e1a00004 	mov	r0, r4
    e1e8:	eb006615 	bl	27a44 <CString::operator char const*() const>
    e1ec:	e1a01000 	mov	r1, r0
    e1f0:	e1a00005 	mov	r0, r5
    e1f4:	eb006648 	bl	27b1c <CString::Append(char const*)>
    e1f8:	eaffffe7 	b	e19c <CUSBDevice::GetNames() const+0x48>
    e1fc:	e1a00005 	mov	r0, r5
    e200:	e59f1028 	ldr	r1, [pc, #40]	; e230 <CUSBDevice::GetNames() const+0xdc>
    e204:	eb006614 	bl	27a5c <CString::operator=(char const*)>
    e208:	e1a00005 	mov	r0, r5
    e20c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e210:	e59f2020 	ldr	r2, [pc, #32]	; e238 <CUSBDevice::GetNames() const+0xe4>
    e214:	e59f1020 	ldr	r1, [pc, #32]	; e23c <CUSBDevice::GetNames() const+0xe8>
    e218:	e59f0020 	ldr	r0, [pc, #32]	; e240 <CUSBDevice::GetNames() const+0xec>
    e21c:	eb005918 	bl	24684 <assertion_failed>
    e220:	e1a01009 	mov	r1, r9
    e224:	e1a00005 	mov	r0, r5
    e228:	eb00663b 	bl	27b1c <CString::Append(char const*)>
    e22c:	eaffffec 	b	e1e4 <CUSBDevice::GetNames() const+0x90>
    e230:	0003f5e8 	.word	0x0003f5e8
    e234:	0003f608 	.word	0x0003f608
    e238:	00000229 	.word	0x00000229
    e23c:	0003f544 	.word	0x0003f544
    e240:	0003f5fc 	.word	0x0003f5fc

0000e244 <CUSBDevice::SetAddress(unsigned char)>:
    e244:	e351003f 	cmp	r1, #63	; 0x3f
    e248:	8a000001 	bhi	e254 <CUSBDevice::SetAddress(unsigned char)+0x10>
    e24c:	e5c01014 	strb	r1, [r0, #20]
    e250:	e12fff1e 	bx	lr
    e254:	e92d4010 	push	{r4, lr}
    e258:	e59f2008 	ldr	r2, [pc, #8]	; e268 <CUSBDevice::SetAddress(unsigned char)+0x24>
    e25c:	e59f1008 	ldr	r1, [pc, #8]	; e26c <CUSBDevice::SetAddress(unsigned char)+0x28>
    e260:	e59f0008 	ldr	r0, [pc, #8]	; e270 <CUSBDevice::SetAddress(unsigned char)+0x2c>
    e264:	eb005906 	bl	24684 <assertion_failed>
    e268:	00000243 	.word	0x00000243
    e26c:	0003f544 	.word	0x0003f544
    e270:	0003f60c 	.word	0x0003f60c

0000e274 <CUSBDevice::GetAddress() const>:
    e274:	e5d00014 	ldrb	r0, [r0, #20]
    e278:	e12fff1e 	bx	lr

0000e27c <CUSBDevice::GetSpeed() const>:
    e27c:	e5d00015 	ldrb	r0, [r0, #21]
    e280:	e12fff1e 	bx	lr

0000e284 <CUSBDevice::IsSplit() const>:
    e284:	e5d0001c 	ldrb	r0, [r0, #28]
    e288:	e12fff1e 	bx	lr

0000e28c <CUSBDevice::GetHubAddress() const>:
    e28c:	e5d0001d 	ldrb	r0, [r0, #29]
    e290:	e12fff1e 	bx	lr

0000e294 <CUSBDevice::GetHubPortNumber() const>:
    e294:	e5d0001e 	ldrb	r0, [r0, #30]
    e298:	e12fff1e 	bx	lr

0000e29c <CUSBDevice::GetTTHubDevice() const>:
    e29c:	e5900020 	ldr	r0, [r0, #32]
    e2a0:	e12fff1e 	bx	lr

0000e2a4 <CUSBDevice::GetEndpoint0() const>:
    e2a4:	e5900018 	ldr	r0, [r0, #24]
    e2a8:	e3500000 	cmp	r0, #0
    e2ac:	112fff1e 	bxne	lr
    e2b0:	e3a02f9b 	mov	r2, #620	; 0x26c
    e2b4:	e92d4010 	push	{r4, lr}
    e2b8:	e59f1004 	ldr	r1, [pc, #4]	; e2c4 <CUSBDevice::GetEndpoint0() const+0x20>
    e2bc:	e59f0004 	ldr	r0, [pc, #4]	; e2c8 <CUSBDevice::GetEndpoint0() const+0x24>
    e2c0:	eb0058ef 	bl	24684 <assertion_failed>
    e2c4:	0003f544 	.word	0x0003f544
    e2c8:	0003f62c 	.word	0x0003f62c

0000e2cc <CUSBDevice::GetHost() const>:
    e2cc:	e5900004 	ldr	r0, [r0, #4]
    e2d0:	e3500000 	cmp	r0, #0
    e2d4:	112fff1e 	bxne	lr
    e2d8:	e92d4010 	push	{r4, lr}
    e2dc:	e59f2008 	ldr	r2, [pc, #8]	; e2ec <CUSBDevice::GetHost() const+0x20>
    e2e0:	e59f1008 	ldr	r1, [pc, #8]	; e2f0 <CUSBDevice::GetHost() const+0x24>
    e2e4:	e59f0008 	ldr	r0, [pc, #8]	; e2f4 <CUSBDevice::GetHost() const+0x28>
    e2e8:	eb0058e5 	bl	24684 <assertion_failed>
    e2ec:	00000272 	.word	0x00000272
    e2f0:	0003f544 	.word	0x0003f544
    e2f4:	0003f288 	.word	0x0003f288

0000e2f8 <CUSBDevice::GetDeviceDescriptor() const>:
    e2f8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    e2fc:	e3500000 	cmp	r0, #0
    e300:	112fff1e 	bxne	lr
    e304:	e3a02f9e 	mov	r2, #632	; 0x278
    e308:	e92d4010 	push	{r4, lr}
    e30c:	e59f1004 	ldr	r1, [pc, #4]	; e318 <CUSBDevice::GetDeviceDescriptor() const+0x20>
    e310:	e59f0004 	ldr	r0, [pc, #4]	; e31c <CUSBDevice::GetDeviceDescriptor() const+0x24>
    e314:	eb0058da 	bl	24684 <assertion_failed>
    e318:	0003f544 	.word	0x0003f544
    e31c:	0003f5c8 	.word	0x0003f5c8

0000e320 <CUSBDevice::GetConfigurationDescriptor() const>:
    e320:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    e324:	e3500000 	cmp	r0, #0
    e328:	112fff1e 	bxne	lr
    e32c:	e92d4010 	push	{r4, lr}
    e330:	e59f2008 	ldr	r2, [pc, #8]	; e340 <CUSBDevice::GetConfigurationDescriptor() const+0x20>
    e334:	e59f1008 	ldr	r1, [pc, #8]	; e344 <CUSBDevice::GetConfigurationDescriptor() const+0x24>
    e338:	e59f0008 	ldr	r0, [pc, #8]	; e348 <CUSBDevice::GetConfigurationDescriptor() const+0x28>
    e33c:	eb0058d0 	bl	24684 <assertion_failed>
    e340:	0000027e 	.word	0x0000027e
    e344:	0003f544 	.word	0x0003f544
    e348:	0003f640 	.word	0x0003f640

0000e34c <CUSBDevice::GetDescriptor(unsigned char)>:
    e34c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e350:	e3500000 	cmp	r0, #0
    e354:	0a000000 	beq	e35c <CUSBDevice::GetDescriptor(unsigned char)+0x10>
    e358:	ea002573 	b	1792c <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e35c:	e3a02fa1 	mov	r2, #644	; 0x284
    e360:	e92d4010 	push	{r4, lr}
    e364:	e59f1004 	ldr	r1, [pc, #4]	; e370 <CUSBDevice::GetDescriptor(unsigned char)+0x24>
    e368:	e59f0004 	ldr	r0, [pc, #4]	; e374 <CUSBDevice::GetDescriptor(unsigned char)+0x28>
    e36c:	eb0058c4 	bl	24684 <assertion_failed>
    e370:	0003f544 	.word	0x0003f544
    e374:	0003f654 	.word	0x0003f654

0000e378 <CUSBDevice::ConfigurationError(char const*) const>:
    e378:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e37c:	e3500000 	cmp	r0, #0
    e380:	0a000000 	beq	e388 <CUSBDevice::ConfigurationError(char const*) const+0x10>
    e384:	ea0025a3 	b	17a18 <CUSBConfigurationParser::Error(char const*) const>
    e388:	e92d4010 	push	{r4, lr}
    e38c:	e59f2008 	ldr	r2, [pc, #8]	; e39c <CUSBDevice::ConfigurationError(char const*) const+0x24>
    e390:	e59f1008 	ldr	r1, [pc, #8]	; e3a0 <CUSBDevice::ConfigurationError(char const*) const+0x28>
    e394:	e59f0008 	ldr	r0, [pc, #8]	; e3a4 <CUSBDevice::ConfigurationError(char const*) const+0x2c>
    e398:	eb0058b9 	bl	24684 <assertion_failed>
    e39c:	0000028a 	.word	0x0000028a
    e3a0:	0003f544 	.word	0x0003f544
    e3a4:	0003f654 	.word	0x0003f654

0000e3a8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
    e3a8:	e92d000c 	push	{r2, r3}
    e3ac:	e92d4070 	push	{r4, r5, r6, lr}
    e3b0:	e24dd020 	sub	sp, sp, #32
    e3b4:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
    e3b8:	e3560000 	cmp	r6, #0
    e3bc:	0a00001d 	beq	e438 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x90>
    e3c0:	e1a04000 	mov	r4, r0
    e3c4:	e28d0010 	add	r0, sp, #16
    e3c8:	e1a05001 	mov	r5, r1
    e3cc:	eb006584 	bl	279e4 <CString::CString()>
    e3d0:	e5d4301e 	ldrb	r3, [r4, #30]
    e3d4:	e59f206c 	ldr	r2, [pc, #108]	; e448 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa0>
    e3d8:	e58d3000 	str	r3, [sp]
    e3dc:	e59f1068 	ldr	r1, [pc, #104]	; e44c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa4>
    e3e0:	e5d4301d 	ldrb	r3, [r4, #29]
    e3e4:	e28d0010 	add	r0, sp, #16
    e3e8:	eb006ac7 	bl	28f0c <CString::Format(char const*, ...)>
    e3ec:	e28d3034 	add	r3, sp, #52	; 0x34
    e3f0:	e58d300c 	str	r3, [sp, #12]
    e3f4:	eb00618a 	bl	26a24 <CLogger::Get()>
    e3f8:	e1a04000 	mov	r4, r0
    e3fc:	e28d0010 	add	r0, sp, #16
    e400:	eb00658f 	bl	27a44 <CString::operator char const*() const>
    e404:	e59dc00c 	ldr	ip, [sp, #12]
    e408:	e1a01000 	mov	r1, r0
    e40c:	e1a03006 	mov	r3, r6
    e410:	e1a00004 	mov	r0, r4
    e414:	e1a02005 	mov	r2, r5
    e418:	e58dc000 	str	ip, [sp]
    e41c:	eb0060ce 	bl	2675c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    e420:	e28d0010 	add	r0, sp, #16
    e424:	eb00653b 	bl	27918 <CString::~CString()>
    e428:	e28dd020 	add	sp, sp, #32
    e42c:	e8bd4070 	pop	{r4, r5, r6, lr}
    e430:	e28dd008 	add	sp, sp, #8
    e434:	e12fff1e 	bx	lr
    e438:	e3a02e29 	mov	r2, #656	; 0x290
    e43c:	e59f100c 	ldr	r1, [pc, #12]	; e450 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa8>
    e440:	e59f000c 	ldr	r0, [pc, #12]	; e454 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xac>
    e444:	eb00588e 	bl	24684 <assertion_failed>
    e448:	0003f910 	.word	0x0003f910
    e44c:	0003f67c 	.word	0x0003f67c
    e450:	0003f544 	.word	0x0003f544
    e454:	0003f66c 	.word	0x0003f66c

0000e458 <CUSBDevice::Initialize()>:
    e458:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e45c:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    e460:	e24dd01c 	sub	sp, sp, #28
    e464:	e3550000 	cmp	r5, #0
    e468:	1a0000aa 	bne	e718 <CUSBDevice::Initialize()+0x2c0>
    e46c:	e1a04000 	mov	r4, r0
    e470:	e3a00012 	mov	r0, #18
    e474:	eb007289 	bl	2aea0 <operator new(unsigned int)>
    e478:	e5943004 	ldr	r3, [r4, #4]
    e47c:	e5840024 	str	r0, [r4, #36]	; 0x24
    e480:	e3530000 	cmp	r3, #0
    e484:	0a0000a7 	beq	e728 <CUSBDevice::Initialize()+0x2d0>
    e488:	e5941018 	ldr	r1, [r4, #24]
    e48c:	e3510000 	cmp	r1, #0
    e490:	0a0000a8 	beq	e738 <CUSBDevice::Initialize()+0x2e0>
    e494:	e3a02008 	mov	r2, #8
    e498:	e3a07080 	mov	r7, #128	; 0x80
    e49c:	e58d0000 	str	r0, [sp]
    e4a0:	e98d0084 	stmib	sp, {r2, r7}
    e4a4:	e1a00003 	mov	r0, r3
    e4a8:	e3a02001 	mov	r2, #1
    e4ac:	e1a03005 	mov	r3, r5
    e4b0:	e58d500c 	str	r5, [sp, #12]
    e4b4:	eb0010d4 	bl	1280c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e4b8:	e3500008 	cmp	r0, #8
    e4bc:	1a000014 	bne	e514 <CUSBDevice::Initialize()+0xbc>
    e4c0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e4c4:	e5d3a000 	ldrb	sl, [r3]
    e4c8:	e35a0012 	cmp	sl, #18
    e4cc:	1a000002 	bne	e4dc <CUSBDevice::Initialize()+0x84>
    e4d0:	e5d36001 	ldrb	r6, [r3, #1]
    e4d4:	e3560001 	cmp	r6, #1
    e4d8:	0a00000f 	beq	e51c <CUSBDevice::Initialize()+0xc4>
    e4dc:	e59f2624 	ldr	r2, [pc, #1572]	; eb08 <CUSBDevice::Initialize()+0x6b0>
    e4e0:	e3a01001 	mov	r1, #1
    e4e4:	e1a00004 	mov	r0, r4
    e4e8:	ebffffae 	bl	e3a8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e4ec:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    e4f0:	e3500000 	cmp	r0, #0
    e4f4:	0a000001 	beq	e500 <CUSBDevice::Initialize()+0xa8>
    e4f8:	e3a01012 	mov	r1, #18
    e4fc:	eb007275 	bl	2aed8 <operator delete(void*, unsigned int)>
    e500:	e3a05000 	mov	r5, #0
    e504:	e5845024 	str	r5, [r4, #36]	; 0x24
    e508:	e1a00005 	mov	r0, r5
    e50c:	e28dd01c 	add	sp, sp, #28
    e510:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e514:	e59f25f0 	ldr	r2, [pc, #1520]	; eb0c <CUSBDevice::Initialize()+0x6b4>
    e518:	eafffff0 	b	e4e0 <CUSBDevice::Initialize()+0x88>
    e51c:	e5d31007 	ldrb	r1, [r3, #7]
    e520:	e5940018 	ldr	r0, [r4, #24]
    e524:	eb000378 	bl	f30c <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
    e528:	e3500000 	cmp	r0, #0
    e52c:	0a000088 	beq	e754 <CUSBDevice::Initialize()+0x2fc>
    e530:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e534:	e58d500c 	str	r5, [sp, #12]
    e538:	e88d0408 	stm	sp, {r3, sl}
    e53c:	e58d7008 	str	r7, [sp, #8]
    e540:	e1a03005 	mov	r3, r5
    e544:	e1a02006 	mov	r2, r6
    e548:	e5941018 	ldr	r1, [r4, #24]
    e54c:	e5940004 	ldr	r0, [r4, #4]
    e550:	eb0010ad 	bl	1280c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e554:	e3500012 	cmp	r0, #18
    e558:	1a00007a 	bne	e748 <CUSBDevice::Initialize()+0x2f0>
    e55c:	e59fc5ac 	ldr	ip, [pc, #1452]	; eb10 <CUSBDevice::Initialize()+0x6b8>
    e560:	e1a0e006 	mov	lr, r6
    e564:	e89c0005 	ldm	ip, {r0, r2}
    e568:	ea000002 	b	e578 <CUSBDevice::Initialize()+0x120>
    e56c:	e2866001 	add	r6, r6, #1
    e570:	e3560040 	cmp	r6, #64	; 0x40
    e574:	0a000085 	beq	e790 <CUSBDevice::Initialize()+0x338>
    e578:	e1a09005 	mov	r9, r5
    e57c:	e266a020 	rsb	sl, r6, #32
    e580:	e1a03630 	lsr	r3, r0, r6
    e584:	e1833a12 	orr	r3, r3, r2, lsl sl
    e588:	e2461020 	sub	r1, r6, #32
    e58c:	e1833132 	orr	r3, r3, r2, lsr r1
    e590:	e2038001 	and	r8, r3, #1
    e594:	e1983009 	orrs	r3, r8, r9
    e598:	e6ef7076 	uxtb	r7, r6
    e59c:	1afffff2 	bne	e56c <CUSBDevice::Initialize()+0x114>
    e5a0:	e1a0111e 	lsl	r1, lr, r1
    e5a4:	e1811a3e 	orr	r1, r1, lr, lsr sl
    e5a8:	e1813002 	orr	r3, r1, r2
    e5ac:	e180e61e 	orr	lr, r0, lr, lsl r6
    e5b0:	e1a02007 	mov	r2, r7
    e5b4:	e5940004 	ldr	r0, [r4, #4]
    e5b8:	e5941018 	ldr	r1, [r4, #24]
    e5bc:	e58c3004 	str	r3, [ip, #4]
    e5c0:	e58ce000 	str	lr, [ip]
    e5c4:	eb00109e 	bl	12844 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
    e5c8:	e2505000 	subs	r5, r0, #0
    e5cc:	0a00007f 	beq	e7d0 <CUSBDevice::Initialize()+0x378>
    e5d0:	e5945028 	ldr	r5, [r4, #40]	; 0x28
    e5d4:	e5c47014 	strb	r7, [r4, #20]
    e5d8:	e3550000 	cmp	r5, #0
    e5dc:	1a000081 	bne	e7e8 <CUSBDevice::Initialize()+0x390>
    e5e0:	e3a00009 	mov	r0, #9
    e5e4:	eb00722d 	bl	2aea0 <operator new(unsigned int)>
    e5e8:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    e5ec:	e5840028 	str	r0, [r4, #40]	; 0x28
    e5f0:	e5d12008 	ldrb	r2, [r1, #8]
    e5f4:	e5d1c009 	ldrb	ip, [r1, #9]
    e5f8:	e59f3514 	ldr	r3, [pc, #1300]	; eb14 <CUSBDevice::Initialize()+0x6bc>
    e5fc:	e182240c 	orr	r2, r2, ip, lsl #8
    e600:	e1520003 	cmp	r2, r3
    e604:	1a000006 	bne	e624 <CUSBDevice::Initialize()+0x1cc>
    e608:	e5d1500a 	ldrb	r5, [r1, #10]
    e60c:	e5d1200b 	ldrb	r2, [r1, #11]
    e610:	e59f3500 	ldr	r3, [pc, #1280]	; eb18 <CUSBDevice::Initialize()+0x6c0>
    e614:	e1855402 	orr	r5, r5, r2, lsl #8
    e618:	e0455003 	sub	r5, r5, r3
    e61c:	e16f5f15 	clz	r5, r5
    e620:	e1a052a5 	lsr	r5, r5, #5
    e624:	e3a06009 	mov	r6, #9
    e628:	e3a08000 	mov	r8, #0
    e62c:	e3a07080 	mov	r7, #128	; 0x80
    e630:	e88d01c1 	stm	sp, {r0, r6, r7, r8}
    e634:	e1a03005 	mov	r3, r5
    e638:	e3a02002 	mov	r2, #2
    e63c:	e5941018 	ldr	r1, [r4, #24]
    e640:	e5940004 	ldr	r0, [r4, #4]
    e644:	eb001070 	bl	1280c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e648:	e1500006 	cmp	r0, r6
    e64c:	1a000055 	bne	e7a8 <CUSBDevice::Initialize()+0x350>
    e650:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    e654:	e5d06000 	ldrb	r6, [r0]
    e658:	e3560009 	cmp	r6, #9
    e65c:	1a00003f 	bne	e760 <CUSBDevice::Initialize()+0x308>
    e660:	e5d0a001 	ldrb	sl, [r0, #1]
    e664:	e35a0002 	cmp	sl, #2
    e668:	1a00003c 	bne	e760 <CUSBDevice::Initialize()+0x308>
    e66c:	e5d09002 	ldrb	r9, [r0, #2]
    e670:	e5d03003 	ldrb	r3, [r0, #3]
    e674:	e1899403 	orr	r9, r9, r3, lsl #8
    e678:	e3590c02 	cmp	r9, #512	; 0x200
    e67c:	8a000037 	bhi	e760 <CUSBDevice::Initialize()+0x308>
    e680:	e1a01006 	mov	r1, r6
    e684:	eb007213 	bl	2aed8 <operator delete(void*, unsigned int)>
    e688:	e1a00009 	mov	r0, r9
    e68c:	eb007209 	bl	2aeb8 <operator new[](unsigned int)>
    e690:	e58d800c 	str	r8, [sp, #12]
    e694:	e5840028 	str	r0, [r4, #40]	; 0x28
    e698:	e58d0000 	str	r0, [sp]
    e69c:	e58d7008 	str	r7, [sp, #8]
    e6a0:	e58d9004 	str	r9, [sp, #4]
    e6a4:	e1a03005 	mov	r3, r5
    e6a8:	e1a0200a 	mov	r2, sl
    e6ac:	e5941018 	ldr	r1, [r4, #24]
    e6b0:	e5940004 	ldr	r0, [r4, #4]
    e6b4:	eb001054 	bl	1280c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e6b8:	e1500009 	cmp	r0, r9
    e6bc:	e1a05000 	mov	r5, r0
    e6c0:	159f2454 	ldrne	r2, [pc, #1108]	; eb1c <CUSBDevice::Initialize()+0x6c4>
    e6c4:	1a000026 	bne	e764 <CUSBDevice::Initialize()+0x30c>
    e6c8:	e594902c 	ldr	r9, [r4, #44]	; 0x2c
    e6cc:	e3590000 	cmp	r9, #0
    e6d0:	1a0000d5 	bne	ea2c <CUSBDevice::Initialize()+0x5d4>
    e6d4:	e3a0001c 	mov	r0, #28
    e6d8:	eb0071f0 	bl	2aea0 <operator new(unsigned int)>
    e6dc:	e1a06000 	mov	r6, r0
    e6e0:	e1a02005 	mov	r2, r5
    e6e4:	e5941028 	ldr	r1, [r4, #40]	; 0x28
    e6e8:	eb002421 	bl	17774 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
    e6ec:	e1a00006 	mov	r0, r6
    e6f0:	e584602c 	str	r6, [r4, #44]	; 0x2c
    e6f4:	eb00248a 	bl	17924 <CUSBConfigurationParser::IsValid() const>
    e6f8:	e2505000 	subs	r5, r0, #0
    e6fc:	1a00003d 	bne	e7f8 <CUSBDevice::Initialize()+0x3a0>
    e700:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e704:	e3500000 	cmp	r0, #0
    e708:	0a0000e1 	beq	ea94 <CUSBDevice::Initialize()+0x63c>
    e70c:	e59f140c 	ldr	r1, [pc, #1036]	; eb20 <CUSBDevice::Initialize()+0x6c8>
    e710:	eb0024c0 	bl	17a18 <CUSBConfigurationParser::Error(char const*) const>
    e714:	eaffff7b 	b	e508 <CUSBDevice::Initialize()+0xb0>
    e718:	e3a020a7 	mov	r2, #167	; 0xa7
    e71c:	e59f1400 	ldr	r1, [pc, #1024]	; eb24 <CUSBDevice::Initialize()+0x6cc>
    e720:	e59f0400 	ldr	r0, [pc, #1024]	; eb28 <CUSBDevice::Initialize()+0x6d0>
    e724:	eb0057d6 	bl	24684 <assertion_failed>
    e728:	e3a020ab 	mov	r2, #171	; 0xab
    e72c:	e59f13f0 	ldr	r1, [pc, #1008]	; eb24 <CUSBDevice::Initialize()+0x6cc>
    e730:	e59f03f4 	ldr	r0, [pc, #1012]	; eb2c <CUSBDevice::Initialize()+0x6d4>
    e734:	eb0057d2 	bl	24684 <assertion_failed>
    e738:	e3a020ac 	mov	r2, #172	; 0xac
    e73c:	e59f13e0 	ldr	r1, [pc, #992]	; eb24 <CUSBDevice::Initialize()+0x6cc>
    e740:	e59f03e8 	ldr	r0, [pc, #1000]	; eb30 <CUSBDevice::Initialize()+0x6d8>
    e744:	eb0057ce 	bl	24684 <assertion_failed>
    e748:	e1a01006 	mov	r1, r6
    e74c:	e59f23e0 	ldr	r2, [pc, #992]	; eb34 <CUSBDevice::Initialize()+0x6dc>
    e750:	eaffff63 	b	e4e4 <CUSBDevice::Initialize()+0x8c>
    e754:	e1a01006 	mov	r1, r6
    e758:	e59f23d8 	ldr	r2, [pc, #984]	; eb38 <CUSBDevice::Initialize()+0x6e0>
    e75c:	eaffff60 	b	e4e4 <CUSBDevice::Initialize()+0x8c>
    e760:	e59f23d4 	ldr	r2, [pc, #980]	; eb3c <CUSBDevice::Initialize()+0x6e4>
    e764:	e1a00004 	mov	r0, r4
    e768:	e3a01001 	mov	r1, #1
    e76c:	ebffff0d 	bl	e3a8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e770:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    e774:	e3500000 	cmp	r0, #0
    e778:	0a000001 	beq	e784 <CUSBDevice::Initialize()+0x32c>
    e77c:	e3a01009 	mov	r1, #9
    e780:	eb0071d4 	bl	2aed8 <operator delete(void*, unsigned int)>
    e784:	e3a05000 	mov	r5, #0
    e788:	e5845028 	str	r5, [r4, #40]	; 0x28
    e78c:	eaffff5d 	b	e508 <CUSBDevice::Initialize()+0xb0>
    e790:	e1a00004 	mov	r0, r4
    e794:	e3a01001 	mov	r1, #1
    e798:	e59f23a0 	ldr	r2, [pc, #928]	; eb40 <CUSBDevice::Initialize()+0x6e8>
    e79c:	ebffff01 	bl	e3a8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e7a0:	e3a05000 	mov	r5, #0
    e7a4:	eaffff57 	b	e508 <CUSBDevice::Initialize()+0xb0>
    e7a8:	e1a00004 	mov	r0, r4
    e7ac:	e3a01001 	mov	r1, #1
    e7b0:	e59f238c 	ldr	r2, [pc, #908]	; eb44 <CUSBDevice::Initialize()+0x6ec>
    e7b4:	ebfffefb 	bl	e3a8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e7b8:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    e7bc:	e1500008 	cmp	r0, r8
    e7c0:	0affffef 	beq	e784 <CUSBDevice::Initialize()+0x32c>
    e7c4:	e1a01006 	mov	r1, r6
    e7c8:	eb0071c2 	bl	2aed8 <operator delete(void*, unsigned int)>
    e7cc:	eaffffec 	b	e784 <CUSBDevice::Initialize()+0x32c>
    e7d0:	e1a03006 	mov	r3, r6
    e7d4:	e1a00004 	mov	r0, r4
    e7d8:	e3a01001 	mov	r1, #1
    e7dc:	e59f2364 	ldr	r2, [pc, #868]	; eb48 <CUSBDevice::Initialize()+0x6f0>
    e7e0:	ebfffef0 	bl	e3a8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e7e4:	eaffff47 	b	e508 <CUSBDevice::Initialize()+0xb0>
    e7e8:	e3a02c01 	mov	r2, #256	; 0x100
    e7ec:	e59f1330 	ldr	r1, [pc, #816]	; eb24 <CUSBDevice::Initialize()+0x6cc>
    e7f0:	e59f0354 	ldr	r0, [pc, #852]	; eb4c <CUSBDevice::Initialize()+0x6f4>
    e7f4:	eb0057a2 	bl	24684 <assertion_failed>
    e7f8:	e1a00004 	mov	r0, r4
    e7fc:	ebfffe54 	bl	e154 <CUSBDevice::GetNames() const>
    e800:	e2506000 	subs	r6, r0, #0
    e804:	0a0000b3 	beq	ead8 <CUSBDevice::Initialize()+0x680>
    e808:	eb00648d 	bl	27a44 <CString::operator char const*() const>
    e80c:	e3a01003 	mov	r1, #3
    e810:	e1a03000 	mov	r3, r0
    e814:	e59f2334 	ldr	r2, [pc, #820]	; eb50 <CUSBDevice::Initialize()+0x6f8>
    e818:	e1a00004 	mov	r0, r4
    e81c:	ebfffee1 	bl	e3a8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e820:	e5963000 	ldr	r3, [r6]
    e824:	e1a00006 	mov	r0, r6
    e828:	e5933004 	ldr	r3, [r3, #4]
    e82c:	e1a08009 	mov	r8, r9
    e830:	e1a07009 	mov	r7, r9
    e834:	e12fff33 	blx	r3
    e838:	e1a09005 	mov	r9, r5
    e83c:	e59fb310 	ldr	fp, [pc, #784]	; eb54 <CUSBDevice::Initialize()+0x6fc>
    e840:	e59fa310 	ldr	sl, [pc, #784]	; eb58 <CUSBDevice::Initialize()+0x700>
    e844:	e3a01004 	mov	r1, #4
    e848:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e84c:	eb002436 	bl	1792c <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e850:	e3500000 	cmp	r0, #0
    e854:	0a000092 	beq	eaa4 <CUSBDevice::Initialize()+0x64c>
    e858:	e5d03002 	ldrb	r3, [r0, #2]
    e85c:	e1530007 	cmp	r3, r7
    e860:	21a05003 	movcs	r5, r3
    e864:	31a05007 	movcc	r5, r7
    e868:	3a000051 	bcc	e9b4 <CUSBDevice::Initialize()+0x55c>
    e86c:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    e870:	e3530000 	cmp	r3, #0
    e874:	0a000068 	beq	ea1c <CUSBDevice::Initialize()+0x5c4>
    e878:	e0846108 	add	r6, r4, r8, lsl #2
    e87c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    e880:	e3530000 	cmp	r3, #0
    e884:	1a000060 	bne	ea0c <CUSBDevice::Initialize()+0x5b4>
    e888:	e3a00010 	mov	r0, #16
    e88c:	eb007183 	bl	2aea0 <operator new(unsigned int)>
    e890:	e1a07000 	mov	r7, r0
    e894:	e1a01004 	mov	r1, r4
    e898:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    e89c:	eb00035c 	bl	f614 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    e8a0:	e3580000 	cmp	r8, #0
    e8a4:	e5867030 	str	r7, [r6, #48]	; 0x30
    e8a8:	1a000026 	bne	e948 <CUSBDevice::Initialize()+0x4f0>
    e8ac:	e1a01008 	mov	r1, r8
    e8b0:	e1a00004 	mov	r0, r4
    e8b4:	ebfffde1 	bl	e040 <CUSBDevice::GetName(TDeviceNameSelector) const>
    e8b8:	e1a01000 	mov	r1, r0
    e8bc:	e1a00007 	mov	r0, r7
    e8c0:	eb0000f1 	bl	ec8c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    e8c4:	e2507000 	subs	r7, r0, #0
    e8c8:	0a000015 	beq	e924 <CUSBDevice::Initialize()+0x4cc>
    e8cc:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    e8d0:	e3530000 	cmp	r3, #0
    e8d4:	0a000058 	beq	ea3c <CUSBDevice::Initialize()+0x5e4>
    e8d8:	e5932000 	ldr	r2, [r3]
    e8dc:	e1a00003 	mov	r0, r3
    e8e0:	e5923004 	ldr	r3, [r2, #4]
    e8e4:	e12fff33 	blx	r3
    e8e8:	e3570000 	cmp	r7, #0
    e8ec:	0a00007d 	beq	eae8 <CUSBDevice::Initialize()+0x690>
    e8f0:	e5973000 	ldr	r3, [r7]
    e8f4:	e1a00007 	mov	r0, r7
    e8f8:	e5933018 	ldr	r3, [r3, #24]
    e8fc:	e5867030 	str	r7, [r6, #48]	; 0x30
    e900:	e12fff33 	blx	r3
    e904:	e2503000 	subs	r3, r0, #0
    e908:	0a000053 	beq	ea5c <CUSBDevice::Initialize()+0x604>
    e90c:	e2888001 	add	r8, r8, #1
    e910:	e358000a 	cmp	r8, #10
    e914:	0a000075 	beq	eaf0 <CUSBDevice::Initialize()+0x698>
    e918:	e2855001 	add	r5, r5, #1
    e91c:	e6ef7075 	uxtb	r7, r5
    e920:	eaffffc7 	b	e844 <CUSBDevice::Initialize()+0x3ec>
    e924:	e3a01001 	mov	r1, #1
    e928:	e1a00004 	mov	r0, r4
    e92c:	e5947030 	ldr	r7, [r4, #48]	; 0x30
    e930:	ebfffdc2 	bl	e040 <CUSBDevice::GetName(TDeviceNameSelector) const>
    e934:	e1a01000 	mov	r1, r0
    e938:	e1a00007 	mov	r0, r7
    e93c:	eb0000d2 	bl	ec8c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    e940:	e2507000 	subs	r7, r0, #0
    e944:	1affffe0 	bne	e8cc <CUSBDevice::Initialize()+0x474>
    e948:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    e94c:	eb000391 	bl	f798 <CUSBFunction::GetInterfaceName() const>
    e950:	e2507000 	subs	r7, r0, #0
    e954:	0a00005b 	beq	eac8 <CUSBDevice::Initialize()+0x670>
    e958:	e1a0100a 	mov	r1, sl
    e95c:	eb00648f 	bl	27ba0 <CString::Compare(char const*) const>
    e960:	e2503000 	subs	r3, r0, #0
    e964:	e58d3014 	str	r3, [sp, #20]
    e968:	1a000018 	bne	e9d0 <CUSBDevice::Initialize()+0x578>
    e96c:	e5973000 	ldr	r3, [r7]
    e970:	e1a00007 	mov	r0, r7
    e974:	e5933004 	ldr	r3, [r3, #4]
    e978:	e12fff33 	blx	r3
    e97c:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    e980:	e3500000 	cmp	r0, #0
    e984:	0a000004 	beq	e99c <CUSBDevice::Initialize()+0x544>
    e988:	e5903000 	ldr	r3, [r0]
    e98c:	e5933004 	ldr	r3, [r3, #4]
    e990:	e12fff33 	blx	r3
    e994:	e59d3014 	ldr	r3, [sp, #20]
    e998:	e5863030 	str	r3, [r6, #48]	; 0x30
    e99c:	e3a01002 	mov	r1, #2
    e9a0:	e1a00004 	mov	r0, r4
    e9a4:	e59f21b0 	ldr	r2, [pc, #432]	; eb5c <CUSBDevice::Initialize()+0x704>
    e9a8:	e1a07005 	mov	r7, r5
    e9ac:	ebfffe7d 	bl	e3a8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e9b0:	eaffffa3 	b	e844 <CUSBDevice::Initialize()+0x3ec>
    e9b4:	e5d03003 	ldrb	r3, [r0, #3]
    e9b8:	e3a01004 	mov	r1, #4
    e9bc:	e1a00004 	mov	r0, r4
    e9c0:	e59f2198 	ldr	r2, [pc, #408]	; eb60 <CUSBDevice::Initialize()+0x708>
    e9c4:	e1a07005 	mov	r7, r5
    e9c8:	ebfffe76 	bl	e3a8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e9cc:	eaffff9c 	b	e844 <CUSBDevice::Initialize()+0x3ec>
    e9d0:	e1a00007 	mov	r0, r7
    e9d4:	eb00641a 	bl	27a44 <CString::operator char const*() const>
    e9d8:	e3a01003 	mov	r1, #3
    e9dc:	e1a03000 	mov	r3, r0
    e9e0:	e59f217c 	ldr	r2, [pc, #380]	; eb64 <CUSBDevice::Initialize()+0x70c>
    e9e4:	e1a00004 	mov	r0, r4
    e9e8:	ebfffe6e 	bl	e3a8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e9ec:	e1a01007 	mov	r1, r7
    e9f0:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    e9f4:	eb0000a4 	bl	ec8c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    e9f8:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    e9fc:	e1a07000 	mov	r7, r0
    ea00:	e3530000 	cmp	r3, #0
    ea04:	1affffb3 	bne	e8d8 <CUSBDevice::Initialize()+0x480>
    ea08:	eaffffb6 	b	e8e8 <CUSBDevice::Initialize()+0x490>
    ea0c:	e59f2154 	ldr	r2, [pc, #340]	; eb68 <CUSBDevice::Initialize()+0x710>
    ea10:	e59f110c 	ldr	r1, [pc, #268]	; eb24 <CUSBDevice::Initialize()+0x6cc>
    ea14:	e59f0150 	ldr	r0, [pc, #336]	; eb6c <CUSBDevice::Initialize()+0x714>
    ea18:	eb005719 	bl	24684 <assertion_failed>
    ea1c:	e59f214c 	ldr	r2, [pc, #332]	; eb70 <CUSBDevice::Initialize()+0x718>
    ea20:	e59f10fc 	ldr	r1, [pc, #252]	; eb24 <CUSBDevice::Initialize()+0x6cc>
    ea24:	e59f0148 	ldr	r0, [pc, #328]	; eb74 <CUSBDevice::Initialize()+0x71c>
    ea28:	eb005715 	bl	24684 <assertion_failed>
    ea2c:	e59f2144 	ldr	r2, [pc, #324]	; eb78 <CUSBDevice::Initialize()+0x720>
    ea30:	e59f10ec 	ldr	r1, [pc, #236]	; eb24 <CUSBDevice::Initialize()+0x6cc>
    ea34:	e59f0140 	ldr	r0, [pc, #320]	; eb7c <CUSBDevice::Initialize()+0x724>
    ea38:	eb005711 	bl	24684 <assertion_failed>
    ea3c:	e5973000 	ldr	r3, [r7]
    ea40:	e1a00007 	mov	r0, r7
    ea44:	e5933018 	ldr	r3, [r3, #24]
    ea48:	e5847030 	str	r7, [r4, #48]	; 0x30
    ea4c:	e12fff33 	blx	r3
    ea50:	e3500000 	cmp	r0, #0
    ea54:	13a08001 	movne	r8, #1
    ea58:	1affffae 	bne	e918 <CUSBDevice::Initialize()+0x4c0>
    ea5c:	e1a00004 	mov	r0, r4
    ea60:	e1a0200b 	mov	r2, fp
    ea64:	e3a01001 	mov	r1, #1
    ea68:	ebfffe4e 	bl	e3a8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ea6c:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    ea70:	e3500000 	cmp	r0, #0
    ea74:	0a000002 	beq	ea84 <CUSBDevice::Initialize()+0x62c>
    ea78:	e5903000 	ldr	r3, [r0]
    ea7c:	e5933004 	ldr	r3, [r3, #4]
    ea80:	e12fff33 	blx	r3
    ea84:	e3a03000 	mov	r3, #0
    ea88:	e1a07005 	mov	r7, r5
    ea8c:	e5863030 	str	r3, [r6, #48]	; 0x30
    ea90:	eaffff6b 	b	e844 <CUSBDevice::Initialize()+0x3ec>
    ea94:	e59f20e4 	ldr	r2, [pc, #228]	; eb80 <CUSBDevice::Initialize()+0x728>
    ea98:	e59f1084 	ldr	r1, [pc, #132]	; eb24 <CUSBDevice::Initialize()+0x6cc>
    ea9c:	e59f00d0 	ldr	r0, [pc, #208]	; eb74 <CUSBDevice::Initialize()+0x71c>
    eaa0:	eb0056f7 	bl	24684 <assertion_failed>
    eaa4:	e3580000 	cmp	r8, #0
    eaa8:	e1a05009 	mov	r5, r9
    eaac:	1afffe95 	bne	e508 <CUSBDevice::Initialize()+0xb0>
    eab0:	e1a00004 	mov	r0, r4
    eab4:	e3a01002 	mov	r1, #2
    eab8:	e59f20c4 	ldr	r2, [pc, #196]	; eb84 <CUSBDevice::Initialize()+0x72c>
    eabc:	e1a05008 	mov	r5, r8
    eac0:	ebfffe38 	bl	e3a8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    eac4:	eafffe8f 	b	e508 <CUSBDevice::Initialize()+0xb0>
    eac8:	e3a02d06 	mov	r2, #384	; 0x180
    eacc:	e59f1050 	ldr	r1, [pc, #80]	; eb24 <CUSBDevice::Initialize()+0x6cc>
    ead0:	e59f00b0 	ldr	r0, [pc, #176]	; eb88 <CUSBDevice::Initialize()+0x730>
    ead4:	eb0056ea 	bl	24684 <assertion_failed>
    ead8:	e59f20ac 	ldr	r2, [pc, #172]	; eb8c <CUSBDevice::Initialize()+0x734>
    eadc:	e59f1040 	ldr	r1, [pc, #64]	; eb24 <CUSBDevice::Initialize()+0x6cc>
    eae0:	e59f00a8 	ldr	r0, [pc, #168]	; eb90 <CUSBDevice::Initialize()+0x738>
    eae4:	eb0056e6 	bl	24684 <assertion_failed>
    eae8:	e5867030 	str	r7, [r6, #48]	; 0x30
    eaec:	eaffffaa 	b	e99c <CUSBDevice::Initialize()+0x544>
    eaf0:	e1a00004 	mov	r0, r4
    eaf4:	e3a01002 	mov	r1, #2
    eaf8:	e59f2094 	ldr	r2, [pc, #148]	; eb94 <CUSBDevice::Initialize()+0x73c>
    eafc:	e1a05003 	mov	r5, r3
    eb00:	ebfffe28 	bl	e3a8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    eb04:	eafffe7f 	b	e508 <CUSBDevice::Initialize()+0xb0>
    eb08:	0003f6c0 	.word	0x0003f6c0
    eb0c:	0003f698 	.word	0x0003f698
    eb10:	0004da78 	.word	0x0004da78
    eb14:	00000525 	.word	0x00000525
    eb18:	0000a4a2 	.word	0x0000a4a2
    eb1c:	0003f7a0 	.word	0x0003f7a0
    eb20:	0003f910 	.word	0x0003f910
    eb24:	0003f544 	.word	0x0003f544
    eb28:	0003f684 	.word	0x0003f684
    eb2c:	0003f288 	.word	0x0003f288
    eb30:	0003f62c 	.word	0x0003f62c
    eb34:	0003f704 	.word	0x0003f704
    eb38:	0003f6dc 	.word	0x0003f6dc
    eb3c:	0003f77c 	.word	0x0003f77c
    eb40:	0003f8c4 	.word	0x0003f8c4
    eb44:	0003f750 	.word	0x0003f750
    eb48:	0003f724 	.word	0x0003f724
    eb4c:	0003f73c 	.word	0x0003f73c
    eb50:	0003f7e8 	.word	0x0003f7e8
    eb54:	0003f864 	.word	0x0003f864
    eb58:	0003f5e8 	.word	0x0003f5e8
    eb5c:	0003f848 	.word	0x0003f848
    eb60:	0003f7f8 	.word	0x0003f7f8
    eb64:	0003f834 	.word	0x0003f834
    eb68:	0000016e 	.word	0x0000016e
    eb6c:	0003f818 	.word	0x0003f818
    eb70:	0000016d 	.word	0x0000016d
    eb74:	0003f654 	.word	0x0003f654
    eb78:	0000013e 	.word	0x0000013e
    eb7c:	0003f7c4 	.word	0x0003f7c4
    eb80:	0000028a 	.word	0x0000028a
    eb84:	0003f8a0 	.word	0x0003f8a0
    eb88:	0003f5fc 	.word	0x0003f5fc
    eb8c:	0000014a 	.word	0x0000014a
    eb90:	0003f7dc 	.word	0x0003f7dc
    eb94:	0003f880 	.word	0x0003f880

0000eb98 <CUSBDevice::Configure()>:
    eb98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    eb9c:	e1a05000 	mov	r5, r0
    eba0:	e5900004 	ldr	r0, [r0, #4]
    eba4:	e3500000 	cmp	r0, #0
    eba8:	0a000029 	beq	ec54 <CUSBDevice::Configure()+0xbc>
    ebac:	e5951018 	ldr	r1, [r5, #24]
    ebb0:	e3510000 	cmp	r1, #0
    ebb4:	0a00002a 	beq	ec64 <CUSBDevice::Configure()+0xcc>
    ebb8:	e5956028 	ldr	r6, [r5, #40]	; 0x28
    ebbc:	e3560000 	cmp	r6, #0
    ebc0:	0a000019 	beq	ec2c <CUSBDevice::Configure()+0x94>
    ebc4:	e5d62005 	ldrb	r2, [r6, #5]
    ebc8:	eb000f30 	bl	12890 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    ebcc:	e2506000 	subs	r6, r0, #0
    ebd0:	0a000017 	beq	ec34 <CUSBDevice::Configure()+0x9c>
    ebd4:	e3a06000 	mov	r6, #0
    ebd8:	e1a07006 	mov	r7, r6
    ebdc:	e285402c 	add	r4, r5, #44	; 0x2c
    ebe0:	e2855054 	add	r5, r5, #84	; 0x54
    ebe4:	e5b40004 	ldr	r0, [r4, #4]!
    ebe8:	e3500000 	cmp	r0, #0
    ebec:	0a00000c 	beq	ec24 <CUSBDevice::Configure()+0x8c>
    ebf0:	e5903000 	ldr	r3, [r0]
    ebf4:	e593301c 	ldr	r3, [r3, #28]
    ebf8:	e12fff33 	blx	r3
    ebfc:	e3500000 	cmp	r0, #0
    ec00:	11a06000 	movne	r6, r0
    ec04:	1a000006 	bne	ec24 <CUSBDevice::Configure()+0x8c>
    ec08:	e5940000 	ldr	r0, [r4]
    ec0c:	e3500000 	cmp	r0, #0
    ec10:	0a000002 	beq	ec20 <CUSBDevice::Configure()+0x88>
    ec14:	e5903000 	ldr	r3, [r0]
    ec18:	e5933004 	ldr	r3, [r3, #4]
    ec1c:	e12fff33 	blx	r3
    ec20:	e5847000 	str	r7, [r4]
    ec24:	e1540005 	cmp	r4, r5
    ec28:	1affffed 	bne	ebe4 <CUSBDevice::Configure()+0x4c>
    ec2c:	e1a00006 	mov	r0, r6
    ec30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ec34:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    ec38:	e1a00005 	mov	r0, r5
    ec3c:	e3a01001 	mov	r1, #1
    ec40:	e5d33005 	ldrb	r3, [r3, #5]
    ec44:	e59f2028 	ldr	r2, [pc, #40]	; ec74 <CUSBDevice::Configure()+0xdc>
    ec48:	ebfffdd6 	bl	e3a8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ec4c:	e1a00006 	mov	r0, r6
    ec50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ec54:	e59f201c 	ldr	r2, [pc, #28]	; ec78 <CUSBDevice::Configure()+0xe0>
    ec58:	e59f101c 	ldr	r1, [pc, #28]	; ec7c <CUSBDevice::Configure()+0xe4>
    ec5c:	e59f001c 	ldr	r0, [pc, #28]	; ec80 <CUSBDevice::Configure()+0xe8>
    ec60:	eb005687 	bl	24684 <assertion_failed>
    ec64:	e59f2018 	ldr	r2, [pc, #24]	; ec84 <CUSBDevice::Configure()+0xec>
    ec68:	e59f100c 	ldr	r1, [pc, #12]	; ec7c <CUSBDevice::Configure()+0xe4>
    ec6c:	e59f0014 	ldr	r0, [pc, #20]	; ec88 <CUSBDevice::Configure()+0xf0>
    ec70:	eb005683 	bl	24684 <assertion_failed>
    ec74:	0003f8d8 	.word	0x0003f8d8
    ec78:	000001b9 	.word	0x000001b9
    ec7c:	0003f544 	.word	0x0003f544
    ec80:	0003f288 	.word	0x0003f288
    ec84:	000001ba 	.word	0x000001ba
    ec88:	0003f62c 	.word	0x0003f62c

0000ec8c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
    ec8c:	e92d4070 	push	{r4, r5, r6, lr}
    ec90:	e2505000 	subs	r5, r0, #0
    ec94:	0a00002c 	beq	ed4c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xc0>
    ec98:	e3510000 	cmp	r1, #0
    ec9c:	e1a04001 	mov	r4, r1
    eca0:	0a00002d 	beq	ed5c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xd0>
    eca4:	e1a00004 	mov	r0, r4
    eca8:	e59f13cc 	ldr	r1, [pc, #972]	; f07c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f0>
    ecac:	eb0063bb 	bl	27ba0 <CString::Compare(char const*) const>
    ecb0:	e3500000 	cmp	r0, #0
    ecb4:	1a000014 	bne	ed0c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x80>
    ecb8:	e3a00068 	mov	r0, #104	; 0x68
    ecbc:	eb007077 	bl	2aea0 <operator new(unsigned int)>
    ecc0:	e1a01005 	mov	r1, r5
    ecc4:	e1a05000 	mov	r5, r0
    ecc8:	eb0016a2 	bl	14758 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
    eccc:	e1a00005 	mov	r0, r5
    ecd0:	eb0002da 	bl	f840 <CUSBFunction::GetDevice() const>
    ecd4:	e1a06000 	mov	r6, r0
    ecd8:	e1a00004 	mov	r0, r4
    ecdc:	eb006358 	bl	27a44 <CString::operator char const*() const>
    ece0:	e3a01003 	mov	r1, #3
    ece4:	e1a03000 	mov	r3, r0
    ece8:	e59f2390 	ldr	r2, [pc, #912]	; f080 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f4>
    ecec:	e1a00006 	mov	r0, r6
    ecf0:	ebfffdac 	bl	e3a8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ecf4:	e5943000 	ldr	r3, [r4]
    ecf8:	e1a00004 	mov	r0, r4
    ecfc:	e5933004 	ldr	r3, [r3, #4]
    ed00:	e12fff33 	blx	r3
    ed04:	e1a00005 	mov	r0, r5
    ed08:	e8bd8070 	pop	{r4, r5, r6, pc}
    ed0c:	e1a00004 	mov	r0, r4
    ed10:	e59f136c 	ldr	r1, [pc, #876]	; f084 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f8>
    ed14:	eb0063a1 	bl	27ba0 <CString::Compare(char const*) const>
    ed18:	e3500000 	cmp	r0, #0
    ed1c:	0affffe5 	beq	ecb8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2c>
    ed20:	e1a00004 	mov	r0, r4
    ed24:	e59f135c 	ldr	r1, [pc, #860]	; f088 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3fc>
    ed28:	eb00639c 	bl	27ba0 <CString::Compare(char const*) const>
    ed2c:	e3500000 	cmp	r0, #0
    ed30:	1a00000d 	bne	ed6c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xe0>
    ed34:	e3a00030 	mov	r0, #48	; 0x30
    ed38:	eb007058 	bl	2aea0 <operator new(unsigned int)>
    ed3c:	e1a01005 	mov	r1, r5
    ed40:	e1a05000 	mov	r5, r0
    ed44:	eb000f4b 	bl	12a78 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
    ed48:	eaffffdf 	b	eccc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ed4c:	e3a0202b 	mov	r2, #43	; 0x2b
    ed50:	e59f1334 	ldr	r1, [pc, #820]	; f08c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x400>
    ed54:	e59f0334 	ldr	r0, [pc, #820]	; f090 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x404>
    ed58:	eb005649 	bl	24684 <assertion_failed>
    ed5c:	e3a0202c 	mov	r2, #44	; 0x2c
    ed60:	e59f1324 	ldr	r1, [pc, #804]	; f08c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x400>
    ed64:	e59f0328 	ldr	r0, [pc, #808]	; f094 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x408>
    ed68:	eb005645 	bl	24684 <assertion_failed>
    ed6c:	e1a00004 	mov	r0, r4
    ed70:	e59f1320 	ldr	r1, [pc, #800]	; f098 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40c>
    ed74:	eb006389 	bl	27ba0 <CString::Compare(char const*) const>
    ed78:	e3500000 	cmp	r0, #0
    ed7c:	0a00000a 	beq	edac <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x120>
    ed80:	e1a00004 	mov	r0, r4
    ed84:	e59f1310 	ldr	r1, [pc, #784]	; f09c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x410>
    ed88:	eb006384 	bl	27ba0 <CString::Compare(char const*) const>
    ed8c:	e3500000 	cmp	r0, #0
    ed90:	1a00000b 	bne	edc4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x138>
    ed94:	e3a00030 	mov	r0, #48	; 0x30
    ed98:	eb007040 	bl	2aea0 <operator new(unsigned int)>
    ed9c:	e1a01005 	mov	r1, r5
    eda0:	e1a05000 	mov	r5, r0
    eda4:	eb001465 	bl	13f40 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
    eda8:	eaffffc7 	b	eccc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    edac:	e3a00e45 	mov	r0, #1104	; 0x450
    edb0:	eb00703a 	bl	2aea0 <operator new(unsigned int)>
    edb4:	e1a01005 	mov	r1, r5
    edb8:	e1a05000 	mov	r5, r0
    edbc:	ebffeab2 	bl	988c <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
    edc0:	eaffffc1 	b	eccc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    edc4:	e1a00004 	mov	r0, r4
    edc8:	e59f12d0 	ldr	r1, [pc, #720]	; f0a0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x414>
    edcc:	eb006373 	bl	27ba0 <CString::Compare(char const*) const>
    edd0:	e3500000 	cmp	r0, #0
    edd4:	1a000006 	bne	edf4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x168>
    edd8:	e3a00f4f 	mov	r0, #316	; 0x13c
    eddc:	eb00702f 	bl	2aea0 <operator new(unsigned int)>
    ede0:	e1a01005 	mov	r1, r5
    ede4:	e3a02001 	mov	r2, #1
    ede8:	e1a05000 	mov	r5, r0
    edec:	eb00069a 	bl	1085c <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    edf0:	eaffffb5 	b	eccc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    edf4:	e1a00004 	mov	r0, r4
    edf8:	e59f12a4 	ldr	r1, [pc, #676]	; f0a4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x418>
    edfc:	eb006367 	bl	27ba0 <CString::Compare(char const*) const>
    ee00:	e3500000 	cmp	r0, #0
    ee04:	1a000005 	bne	ee20 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x194>
    ee08:	e3a00f5b 	mov	r0, #364	; 0x16c
    ee0c:	eb007023 	bl	2aea0 <operator new(unsigned int)>
    ee10:	e1a01005 	mov	r1, r5
    ee14:	e1a05000 	mov	r5, r0
    ee18:	eb0003a1 	bl	fca4 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
    ee1c:	eaffffaa 	b	eccc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ee20:	e1a00004 	mov	r0, r4
    ee24:	e59f127c 	ldr	r1, [pc, #636]	; f0a8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x41c>
    ee28:	eb00635c 	bl	27ba0 <CString::Compare(char const*) const>
    ee2c:	e3500000 	cmp	r0, #0
    ee30:	0a000004 	beq	ee48 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1bc>
    ee34:	e1a00004 	mov	r0, r4
    ee38:	e59f126c 	ldr	r1, [pc, #620]	; f0ac <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x420>
    ee3c:	eb006357 	bl	27ba0 <CString::Compare(char const*) const>
    ee40:	e3500000 	cmp	r0, #0
    ee44:	1a000005 	bne	ee60 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1d4>
    ee48:	e3a00f53 	mov	r0, #332	; 0x14c
    ee4c:	eb007013 	bl	2aea0 <operator new(unsigned int)>
    ee50:	e1a01005 	mov	r1, r5
    ee54:	e1a05000 	mov	r5, r0
    ee58:	eb0004f7 	bl	1023c <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
    ee5c:	eaffff9a 	b	eccc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ee60:	e1a00004 	mov	r0, r4
    ee64:	e59f1244 	ldr	r1, [pc, #580]	; f0b0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x424>
    ee68:	eb00634c 	bl	27ba0 <CString::Compare(char const*) const>
    ee6c:	e3500000 	cmp	r0, #0
    ee70:	0a000004 	beq	ee88 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1fc>
    ee74:	e1a00004 	mov	r0, r4
    ee78:	e59f1234 	ldr	r1, [pc, #564]	; f0b4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x428>
    ee7c:	eb006347 	bl	27ba0 <CString::Compare(char const*) const>
    ee80:	e3500000 	cmp	r0, #0
    ee84:	1a000005 	bne	eea0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x214>
    ee88:	e3a00e13 	mov	r0, #304	; 0x130
    ee8c:	eb007003 	bl	2aea0 <operator new(unsigned int)>
    ee90:	e1a01005 	mov	r1, r5
    ee94:	e1a05000 	mov	r5, r0
    ee98:	eb000aaa 	bl	11948 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
    ee9c:	eaffff8a 	b	eccc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eea0:	e1a00004 	mov	r0, r4
    eea4:	e59f120c 	ldr	r1, [pc, #524]	; f0b8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x42c>
    eea8:	eb00633c 	bl	27ba0 <CString::Compare(char const*) const>
    eeac:	e3500000 	cmp	r0, #0
    eeb0:	0a000004 	beq	eec8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x23c>
    eeb4:	e1a00004 	mov	r0, r4
    eeb8:	e59f11fc 	ldr	r1, [pc, #508]	; f0bc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x430>
    eebc:	eb006337 	bl	27ba0 <CString::Compare(char const*) const>
    eec0:	e3500000 	cmp	r0, #0
    eec4:	1a000005 	bne	eee0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x254>
    eec8:	e3a00f4d 	mov	r0, #308	; 0x134
    eecc:	eb006ff3 	bl	2aea0 <operator new(unsigned int)>
    eed0:	e1a01005 	mov	r1, r5
    eed4:	e1a05000 	mov	r5, r0
    eed8:	eb000bb3 	bl	11dac <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
    eedc:	eaffff7a 	b	eccc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eee0:	e1a00004 	mov	r0, r4
    eee4:	e59f11d4 	ldr	r1, [pc, #468]	; f0c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x434>
    eee8:	eb00632c 	bl	27ba0 <CString::Compare(char const*) const>
    eeec:	e3500000 	cmp	r0, #0
    eef0:	0afffff4 	beq	eec8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x23c>
    eef4:	e1a00004 	mov	r0, r4
    eef8:	e59f11c4 	ldr	r1, [pc, #452]	; f0c4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x438>
    eefc:	eb006327 	bl	27ba0 <CString::Compare(char const*) const>
    ef00:	e3500000 	cmp	r0, #0
    ef04:	0affffef 	beq	eec8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x23c>
    ef08:	e1a00004 	mov	r0, r4
    ef0c:	e59f11b4 	ldr	r1, [pc, #436]	; f0c8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x43c>
    ef10:	eb006322 	bl	27ba0 <CString::Compare(char const*) const>
    ef14:	e3500000 	cmp	r0, #0
    ef18:	1a000005 	bne	ef34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2a8>
    ef1c:	e3a00f4d 	mov	r0, #308	; 0x134
    ef20:	eb006fde 	bl	2aea0 <operator new(unsigned int)>
    ef24:	e1a01005 	mov	r1, r5
    ef28:	e1a05000 	mov	r5, r0
    ef2c:	eb000906 	bl	1134c <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
    ef30:	eaffff65 	b	eccc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ef34:	e1a00004 	mov	r0, r4
    ef38:	e59f118c 	ldr	r1, [pc, #396]	; f0cc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x440>
    ef3c:	eb006317 	bl	27ba0 <CString::Compare(char const*) const>
    ef40:	e3500000 	cmp	r0, #0
    ef44:	0a000004 	beq	ef5c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2d0>
    ef48:	e1a00004 	mov	r0, r4
    ef4c:	e59f117c 	ldr	r1, [pc, #380]	; f0d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x444>
    ef50:	eb006312 	bl	27ba0 <CString::Compare(char const*) const>
    ef54:	e3500000 	cmp	r0, #0
    ef58:	1a000005 	bne	ef74 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2e8>
    ef5c:	e3a0001c 	mov	r0, #28
    ef60:	eb006fce 	bl	2aea0 <operator new(unsigned int)>
    ef64:	e1a01005 	mov	r1, r5
    ef68:	e1a05000 	mov	r5, r0
    ef6c:	eb00144a 	bl	1409c <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
    ef70:	eaffff55 	b	eccc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ef74:	e1a00004 	mov	r0, r4
    ef78:	e59f1154 	ldr	r1, [pc, #340]	; f0d4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x448>
    ef7c:	eb006307 	bl	27ba0 <CString::Compare(char const*) const>
    ef80:	e3500000 	cmp	r0, #0
    ef84:	1a000005 	bne	efa0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x314>
    ef88:	e3a00024 	mov	r0, #36	; 0x24
    ef8c:	eb006fc3 	bl	2aea0 <operator new(unsigned int)>
    ef90:	e1a01005 	mov	r1, r5
    ef94:	e1a05000 	mov	r5, r0
    ef98:	eb001ce8 	bl	16340 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
    ef9c:	eaffff4a 	b	eccc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    efa0:	e1a00004 	mov	r0, r4
    efa4:	e59f112c 	ldr	r1, [pc, #300]	; f0d8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44c>
    efa8:	eb0062fc 	bl	27ba0 <CString::Compare(char const*) const>
    efac:	e3500000 	cmp	r0, #0
    efb0:	1a000005 	bne	efcc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x340>
    efb4:	e3a00024 	mov	r0, #36	; 0x24
    efb8:	eb006fb8 	bl	2aea0 <operator new(unsigned int)>
    efbc:	e1a01005 	mov	r1, r5
    efc0:	e1a05000 	mov	r5, r0
    efc4:	eb001957 	bl	15528 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
    efc8:	eaffff3f 	b	eccc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    efcc:	e1a00004 	mov	r0, r4
    efd0:	e59f1104 	ldr	r1, [pc, #260]	; f0dc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x450>
    efd4:	eb0062f1 	bl	27ba0 <CString::Compare(char const*) const>
    efd8:	e3500000 	cmp	r0, #0
    efdc:	0a000004 	beq	eff4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x368>
    efe0:	e1a00004 	mov	r0, r4
    efe4:	e59f10f4 	ldr	r1, [pc, #244]	; f0e0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x454>
    efe8:	eb0062ec 	bl	27ba0 <CString::Compare(char const*) const>
    efec:	e3500000 	cmp	r0, #0
    eff0:	1a000005 	bne	f00c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x380>
    eff4:	e3a00028 	mov	r0, #40	; 0x28
    eff8:	eb006fa8 	bl	2aea0 <operator new(unsigned int)>
    effc:	e1a01005 	mov	r1, r5
    f000:	e1a05000 	mov	r5, r0
    f004:	eb001f1b 	bl	16c78 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
    f008:	eaffff2f 	b	eccc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f00c:	e1a00004 	mov	r0, r4
    f010:	e59f10cc 	ldr	r1, [pc, #204]	; f0e4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x458>
    f014:	eb0062e1 	bl	27ba0 <CString::Compare(char const*) const>
    f018:	e3500000 	cmp	r0, #0
    f01c:	0a000004 	beq	f034 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3a8>
    f020:	e1a00004 	mov	r0, r4
    f024:	e59f10bc 	ldr	r1, [pc, #188]	; f0e8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x45c>
    f028:	eb0062dc 	bl	27ba0 <CString::Compare(char const*) const>
    f02c:	e3500000 	cmp	r0, #0
    f030:	1a000005 	bne	f04c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3c0>
    f034:	e3a00028 	mov	r0, #40	; 0x28
    f038:	eb006f98 	bl	2aea0 <operator new(unsigned int)>
    f03c:	e1a01005 	mov	r1, r5
    f040:	e1a05000 	mov	r5, r0
    f044:	eb0011a4 	bl	136dc <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>
    f048:	eaffff1f 	b	eccc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f04c:	e1a00004 	mov	r0, r4
    f050:	e59f1094 	ldr	r1, [pc, #148]	; f0ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x460>
    f054:	eb0062d1 	bl	27ba0 <CString::Compare(char const*) const>
    f058:	e3500000 	cmp	r0, #0
    f05c:	13a05000 	movne	r5, #0
    f060:	1affff23 	bne	ecf4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
    f064:	e3a00024 	mov	r0, #36	; 0x24
    f068:	eb006f8c 	bl	2aea0 <operator new(unsigned int)>
    f06c:	e1a01005 	mov	r1, r5
    f070:	e1a05000 	mov	r5, r0
    f074:	eb0020dc 	bl	173ec <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
    f078:	eaffff13 	b	eccc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f07c:	0003f940 	.word	0x0003f940
    f080:	0003fa6c 	.word	0x0003fa6c
    f084:	0003f94c 	.word	0x0003f94c
    f088:	0003f958 	.word	0x0003f958
    f08c:	0003f918 	.word	0x0003f918
    f090:	0003f930 	.word	0x0003f930
    f094:	0003f5fc 	.word	0x0003f5fc
    f098:	0003f964 	.word	0x0003f964
    f09c:	0003f970 	.word	0x0003f970
    f0a0:	0003f97c 	.word	0x0003f97c
    f0a4:	0003f988 	.word	0x0003f988
    f0a8:	0003f994 	.word	0x0003f994
    f0ac:	0003f9a0 	.word	0x0003f9a0
    f0b0:	0003f9ac 	.word	0x0003f9ac
    f0b4:	0003f9b8 	.word	0x0003f9b8
    f0b8:	0003f9c4 	.word	0x0003f9c4
    f0bc:	0003f9d0 	.word	0x0003f9d0
    f0c0:	0003f9dc 	.word	0x0003f9dc
    f0c4:	0003f9e8 	.word	0x0003f9e8
    f0c8:	0003f9f4 	.word	0x0003f9f4
    f0cc:	0003fa00 	.word	0x0003fa00
    f0d0:	0003fa0c 	.word	0x0003fa0c
    f0d4:	0003fa18 	.word	0x0003fa18
    f0d8:	0003fa24 	.word	0x0003fa24
    f0dc:	0003fa30 	.word	0x0003fa30
    f0e0:	0003fa3c 	.word	0x0003fa3c
    f0e4:	0003fa48 	.word	0x0003fa48
    f0e8:	0003fa54 	.word	0x0003fa54
    f0ec:	0003fa60 	.word	0x0003fa60

0000f0f0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
    f0f0:	e3a02000 	mov	r2, #0
    f0f4:	e92d4010 	push	{r4, lr}
    f0f8:	e3a0c001 	mov	ip, #1
    f0fc:	e3a0e008 	mov	lr, #8
    f100:	e1510002 	cmp	r1, r2
    f104:	e5801000 	str	r1, [r0]
    f108:	e580e008 	str	lr, [r0, #8]
    f10c:	e580c00c 	str	ip, [r0, #12]
    f110:	e1c020b4 	strh	r2, [r0, #4]
    f114:	e5c02006 	strb	r2, [r0, #6]
    f118:	e5c02010 	strb	r2, [r0, #16]
    f11c:	18bd8010 	popne	{r4, pc}
    f120:	e3a02023 	mov	r2, #35	; 0x23
    f124:	e59f1004 	ldr	r1, [pc, #4]	; f130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x40>
    f128:	e59f0004 	ldr	r0, [pc, #4]	; f134 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x44>
    f12c:	eb005554 	bl	24684 <assertion_failed>
    f130:	0003fa88 	.word	0x0003fa88
    f134:	0003f428 	.word	0x0003f428

0000f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
    f138:	e92d4070 	push	{r4, r5, r6, lr}
    f13c:	e3a05001 	mov	r5, #1
    f140:	e3510000 	cmp	r1, #0
    f144:	e5801000 	str	r1, [r0]
    f148:	e580500c 	str	r5, [r0, #12]
    f14c:	e5c05010 	strb	r5, [r0, #16]
    f150:	0a000040 	beq	f258 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x120>
    f154:	e3520000 	cmp	r2, #0
    f158:	0a000042 	beq	f268 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x130>
    f15c:	e5d23000 	ldrb	r3, [r2]
    f160:	e3530006 	cmp	r3, #6
    f164:	9a000043 	bls	f278 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x140>
    f168:	e5d23001 	ldrb	r3, [r2, #1]
    f16c:	e3530005 	cmp	r3, #5
    f170:	1a000044 	bne	f288 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x150>
    f174:	e5d23003 	ldrb	r3, [r2, #3]
    f178:	e1a04000 	mov	r4, r0
    f17c:	e2033003 	and	r3, r3, #3
    f180:	e3530002 	cmp	r3, #2
    f184:	0a000020 	beq	f20c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd4>
    f188:	e3530003 	cmp	r3, #3
    f18c:	1a000043 	bne	f2a0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x168>
    f190:	e3a00002 	mov	r0, #2
    f194:	e5d23002 	ldrb	r3, [r2, #2]
    f198:	e5c40005 	strb	r0, [r4, #5]
    f19c:	e203000f 	and	r0, r3, #15
    f1a0:	e1a033a3 	lsr	r3, r3, #7
    f1a4:	e5c40004 	strb	r0, [r4, #4]
    f1a8:	e5c43006 	strb	r3, [r4, #6]
    f1ac:	e5d20005 	ldrb	r0, [r2, #5]
    f1b0:	e5d23004 	ldrb	r3, [r2, #4]
    f1b4:	e5d22006 	ldrb	r2, [r2, #6]
    f1b8:	e1833400 	orr	r3, r3, r0, lsl #8
    f1bc:	e1a03a83 	lsl	r3, r3, #21
    f1c0:	e1a03aa3 	lsr	r3, r3, #21
    f1c4:	e3520001 	cmp	r2, #1
    f1c8:	e1a00001 	mov	r0, r1
    f1cc:	e5843008 	str	r3, [r4, #8]
    f1d0:	21a06002 	movcs	r6, r2
    f1d4:	33a06001 	movcc	r6, #1
    f1d8:	ebfffc27 	bl	e27c <CUSBDevice::GetSpeed() const>
    f1dc:	e3500001 	cmp	r0, #1
    f1e0:	9a000017 	bls	f244 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x10c>
    f1e4:	e3560010 	cmp	r6, #16
    f1e8:	31a02006 	movcc	r2, r6
    f1ec:	23a02010 	movcs	r2, #16
    f1f0:	e2422001 	sub	r2, r2, #1
    f1f4:	e1a05215 	lsl	r5, r5, r2
    f1f8:	e1b021a5 	lsrs	r2, r5, #3
    f1fc:	1a000025 	bne	f298 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x160>
    f200:	e3a03014 	mov	r3, #20
    f204:	e584300c 	str	r3, [r4, #12]
    f208:	ea00000b 	b	f23c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x104>
    f20c:	e5d23002 	ldrb	r3, [r2, #2]
    f210:	e5c05005 	strb	r5, [r0, #5]
    f214:	e203100f 	and	r1, r3, #15
    f218:	e1a033a3 	lsr	r3, r3, #7
    f21c:	e5c01004 	strb	r1, [r0, #4]
    f220:	e5c03006 	strb	r3, [r0, #6]
    f224:	e5d23004 	ldrb	r3, [r2, #4]
    f228:	e5d22005 	ldrb	r2, [r2, #5]
    f22c:	e1833402 	orr	r3, r3, r2, lsl #8
    f230:	e1a03a83 	lsl	r3, r3, #21
    f234:	e1a03aa3 	lsr	r3, r3, #21
    f238:	e5803008 	str	r3, [r0, #8]
    f23c:	e1a00004 	mov	r0, r4
    f240:	e8bd8070 	pop	{r4, r5, r6, pc}
    f244:	e1a02006 	mov	r2, r6
    f248:	e584600c 	str	r6, [r4, #12]
    f24c:	e3520013 	cmp	r2, #19
    f250:	8afffff9 	bhi	f23c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x104>
    f254:	eaffffe9 	b	f200 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc8>
    f258:	e3a02032 	mov	r2, #50	; 0x32
    f25c:	e59f104c 	ldr	r1, [pc, #76]	; f2b0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    f260:	e59f004c 	ldr	r0, [pc, #76]	; f2b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x17c>
    f264:	eb005506 	bl	24684 <assertion_failed>
    f268:	e3a02034 	mov	r2, #52	; 0x34
    f26c:	e59f103c 	ldr	r1, [pc, #60]	; f2b0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    f270:	e59f0040 	ldr	r0, [pc, #64]	; f2b8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x180>
    f274:	eb005502 	bl	24684 <assertion_failed>
    f278:	e3a02035 	mov	r2, #53	; 0x35
    f27c:	e59f102c 	ldr	r1, [pc, #44]	; f2b0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    f280:	e59f0034 	ldr	r0, [pc, #52]	; f2bc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x184>
    f284:	eb0054fe 	bl	24684 <assertion_failed>
    f288:	e3a02036 	mov	r2, #54	; 0x36
    f28c:	e59f101c 	ldr	r1, [pc, #28]	; f2b0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    f290:	e59f0028 	ldr	r0, [pc, #40]	; f2c0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x188>
    f294:	eb0054fa 	bl	24684 <assertion_failed>
    f298:	e584200c 	str	r2, [r4, #12]
    f29c:	eaffffea 	b	f24c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x114>
    f2a0:	e3a02043 	mov	r2, #67	; 0x43
    f2a4:	e59f1004 	ldr	r1, [pc, #4]	; f2b0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    f2a8:	e59f0014 	ldr	r0, [pc, #20]	; f2c4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x18c>
    f2ac:	eb0054f4 	bl	24684 <assertion_failed>
    f2b0:	0003fa88 	.word	0x0003fa88
    f2b4:	0003f428 	.word	0x0003f428
    f2b8:	0003fa98 	.word	0x0003fa98
    f2bc:	0003faa4 	.word	0x0003faa4
    f2c0:	0003fac4 	.word	0x0003fac4
    f2c4:	0003f63c 	.word	0x0003f63c

0000f2c8 <CUSBEndpoint::~CUSBEndpoint()>:
    f2c8:	e12fff1e 	bx	lr

0000f2cc <CUSBEndpoint::GetDevice() const>:
    f2cc:	e5900000 	ldr	r0, [r0]
    f2d0:	e3500000 	cmp	r0, #0
    f2d4:	112fff1e 	bxne	lr
    f2d8:	e3a02086 	mov	r2, #134	; 0x86
    f2dc:	e92d4010 	push	{r4, lr}
    f2e0:	e59f1004 	ldr	r1, [pc, #4]	; f2ec <CUSBEndpoint::GetDevice() const+0x20>
    f2e4:	e59f0004 	ldr	r0, [pc, #4]	; f2f0 <CUSBEndpoint::GetDevice() const+0x24>
    f2e8:	eb0054e5 	bl	24684 <assertion_failed>
    f2ec:	0003fa88 	.word	0x0003fa88
    f2f0:	0003f428 	.word	0x0003f428

0000f2f4 <CUSBEndpoint::GetNumber() const>:
    f2f4:	e5d00004 	ldrb	r0, [r0, #4]
    f2f8:	e12fff1e 	bx	lr

0000f2fc <CUSBEndpoint::GetType() const>:
    f2fc:	e5d00005 	ldrb	r0, [r0, #5]
    f300:	e12fff1e 	bx	lr

0000f304 <CUSBEndpoint::IsDirectionIn() const>:
    f304:	e5d00006 	ldrb	r0, [r0, #6]
    f308:	e12fff1e 	bx	lr

0000f30c <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
    f30c:	e1a03000 	mov	r3, r0
    f310:	e3a00001 	mov	r0, #1
    f314:	e5831008 	str	r1, [r3, #8]
    f318:	e12fff1e 	bx	lr

0000f31c <CUSBEndpoint::GetMaxPacketSize() const>:
    f31c:	e5900008 	ldr	r0, [r0, #8]
    f320:	e12fff1e 	bx	lr

0000f324 <CUSBEndpoint::GetInterval() const>:
    f324:	e5d03005 	ldrb	r3, [r0, #5]
    f328:	e3530002 	cmp	r3, #2
    f32c:	1a000001 	bne	f338 <CUSBEndpoint::GetInterval() const+0x14>
    f330:	e590000c 	ldr	r0, [r0, #12]
    f334:	e12fff1e 	bx	lr
    f338:	e3a020ae 	mov	r2, #174	; 0xae
    f33c:	e92d4010 	push	{r4, lr}
    f340:	e59f1004 	ldr	r1, [pc, #4]	; f34c <CUSBEndpoint::GetInterval() const+0x28>
    f344:	e59f0004 	ldr	r0, [pc, #4]	; f350 <CUSBEndpoint::GetInterval() const+0x2c>
    f348:	eb0054cd 	bl	24684 <assertion_failed>
    f34c:	0003fa88 	.word	0x0003fa88
    f350:	0003faf4 	.word	0x0003faf4

0000f354 <CUSBEndpoint::GetNextPID(bool)>:
    f354:	e3510000 	cmp	r1, #0
    f358:	0a000004 	beq	f370 <CUSBEndpoint::GetNextPID(bool)+0x1c>
    f35c:	e5d03005 	ldrb	r3, [r0, #5]
    f360:	e3530000 	cmp	r3, #0
    f364:	1a000003 	bne	f378 <CUSBEndpoint::GetNextPID(bool)+0x24>
    f368:	e3a00002 	mov	r0, #2
    f36c:	e12fff1e 	bx	lr
    f370:	e5d00010 	ldrb	r0, [r0, #16]
    f374:	e12fff1e 	bx	lr
    f378:	e3a020b7 	mov	r2, #183	; 0xb7
    f37c:	e92d4010 	push	{r4, lr}
    f380:	e59f1004 	ldr	r1, [pc, #4]	; f38c <CUSBEndpoint::GetNextPID(bool)+0x38>
    f384:	e59f0004 	ldr	r0, [pc, #4]	; f390 <CUSBEndpoint::GetNextPID(bool)+0x3c>
    f388:	eb0054bd 	bl	24684 <assertion_failed>
    f38c:	0003fa88 	.word	0x0003fa88
    f390:	0003fb14 	.word	0x0003fb14

0000f394 <CUSBEndpoint::SkipPID(unsigned int, bool)>:
    f394:	e5d03005 	ldrb	r3, [r0, #5]
    f398:	e92d4010 	push	{r4, lr}
    f39c:	e3530002 	cmp	r3, #2
    f3a0:	8a000019 	bhi	f40c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x78>
    f3a4:	e3520000 	cmp	r2, #0
    f3a8:	1a000008 	bne	f3d0 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x3c>
    f3ac:	e5d03010 	ldrb	r3, [r0, #16]
    f3b0:	e3530001 	cmp	r3, #1
    f3b4:	0a00000f 	beq	f3f8 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x64>
    f3b8:	e3530002 	cmp	r3, #2
    f3bc:	1a000007 	bne	f3e0 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x4c>
    f3c0:	e3110001 	tst	r1, #1
    f3c4:	13a03001 	movne	r3, #1
    f3c8:	15c03010 	strbne	r3, [r0, #16]
    f3cc:	e8bd8010 	pop	{r4, pc}
    f3d0:	e3530000 	cmp	r3, #0
    f3d4:	1a000010 	bne	f41c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x88>
    f3d8:	e5c03010 	strb	r3, [r0, #16]
    f3dc:	e8bd8010 	pop	{r4, pc}
    f3e0:	e3530000 	cmp	r3, #0
    f3e4:	0a000005 	beq	f400 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x6c>
    f3e8:	e3a020dc 	mov	r2, #220	; 0xdc
    f3ec:	e59f1038 	ldr	r1, [pc, #56]	; f42c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x98>
    f3f0:	e59f0038 	ldr	r0, [pc, #56]	; f430 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x9c>
    f3f4:	eb0054a2 	bl	24684 <assertion_failed>
    f3f8:	e3110001 	tst	r1, #1
    f3fc:	08bd8010 	popeq	{r4, pc}
    f400:	e3a03002 	mov	r3, #2
    f404:	e5c03010 	strb	r3, [r0, #16]
    f408:	e8bd8010 	pop	{r4, pc}
    f40c:	e3a020c1 	mov	r2, #193	; 0xc1
    f410:	e59f1014 	ldr	r1, [pc, #20]	; f42c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x98>
    f414:	e59f0018 	ldr	r0, [pc, #24]	; f434 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa0>
    f418:	eb005499 	bl	24684 <assertion_failed>
    f41c:	e3a020e2 	mov	r2, #226	; 0xe2
    f420:	e59f1004 	ldr	r1, [pc, #4]	; f42c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x98>
    f424:	e59f000c 	ldr	r0, [pc, #12]	; f438 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa4>
    f428:	eb005495 	bl	24684 <assertion_failed>
    f42c:	0003fa88 	.word	0x0003fa88
    f430:	0003f63c 	.word	0x0003f63c
    f434:	0003fb34 	.word	0x0003fb34
    f438:	0003fb14 	.word	0x0003fb14

0000f43c <CUSBEndpoint::ResetPID()>:
    f43c:	e5d03005 	ldrb	r3, [r0, #5]
    f440:	e3530001 	cmp	r3, #1
    f444:	1a000001 	bne	f450 <CUSBEndpoint::ResetPID()+0x14>
    f448:	e5c03010 	strb	r3, [r0, #16]
    f44c:	e12fff1e 	bx	lr
    f450:	e3a020ed 	mov	r2, #237	; 0xed
    f454:	e92d4010 	push	{r4, lr}
    f458:	e59f1004 	ldr	r1, [pc, #4]	; f464 <CUSBEndpoint::ResetPID()+0x28>
    f45c:	e59f0004 	ldr	r0, [pc, #4]	; f468 <CUSBEndpoint::ResetPID()+0x2c>
    f460:	eb005487 	bl	24684 <assertion_failed>
    f464:	0003fa88 	.word	0x0003fa88
    f468:	0003fb94 	.word	0x0003fb94

0000f46c <CUSBFunction::Initialize()>:
    f46c:	e3a00001 	mov	r0, #1
    f470:	e12fff1e 	bx	lr

0000f474 <CUSBFunction::ReScanDevices()>:
    f474:	e3a00000 	mov	r0, #0
    f478:	e12fff1e 	bx	lr

0000f47c <CUSBFunction::~CUSBFunction()>:
    f47c:	e3a03000 	mov	r3, #0
    f480:	e92d4070 	push	{r4, r5, r6, lr}
    f484:	e5905008 	ldr	r5, [r0, #8]
    f488:	e59f2040 	ldr	r2, [pc, #64]	; f4d0 <CUSBFunction::~CUSBFunction()+0x54>
    f48c:	e1550003 	cmp	r5, r3
    f490:	e1a04000 	mov	r4, r0
    f494:	e5802000 	str	r2, [r0]
    f498:	e580300c 	str	r3, [r0, #12]
    f49c:	0a000004 	beq	f4b4 <CUSBFunction::~CUSBFunction()+0x38>
    f4a0:	e1a00005 	mov	r0, r5
    f4a4:	eb00211d 	bl	17920 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    f4a8:	e1a00005 	mov	r0, r5
    f4ac:	e3a0101c 	mov	r1, #28
    f4b0:	eb006e88 	bl	2aed8 <operator delete(void*, unsigned int)>
    f4b4:	e3a03000 	mov	r3, #0
    f4b8:	e1a00004 	mov	r0, r4
    f4bc:	e5843008 	str	r3, [r4, #8]
    f4c0:	e5843004 	str	r3, [r4, #4]
    f4c4:	eb005647 	bl	24de8 <CDevice::~CDevice()>
    f4c8:	e1a00004 	mov	r0, r4
    f4cc:	e8bd8070 	pop	{r4, r5, r6, pc}
    f4d0:	0003fc58 	.word	0x0003fc58

0000f4d4 <CUSBFunction::~CUSBFunction()>:
    f4d4:	e92d4010 	push	{r4, lr}
    f4d8:	e1a04000 	mov	r4, r0
    f4dc:	ebffffe6 	bl	f47c <CUSBFunction::~CUSBFunction()>
    f4e0:	e1a00004 	mov	r0, r4
    f4e4:	e3a01010 	mov	r1, #16
    f4e8:	eb006e7a 	bl	2aed8 <operator delete(void*, unsigned int)>
    f4ec:	e1a00004 	mov	r0, r4
    f4f0:	e8bd8010 	pop	{r4, pc}

0000f4f4 <CUSBFunction::RemoveDevice()>:
    f4f4:	e5900004 	ldr	r0, [r0, #4]
    f4f8:	e3500000 	cmp	r0, #0
    f4fc:	0a000000 	beq	f504 <CUSBFunction::RemoveDevice()+0x10>
    f500:	eafffaba 	b	dff0 <CUSBDevice::RemoveDevice()>
    f504:	e3a02066 	mov	r2, #102	; 0x66
    f508:	e92d4010 	push	{r4, lr}
    f50c:	e59f1004 	ldr	r1, [pc, #4]	; f518 <CUSBFunction::RemoveDevice()+0x24>
    f510:	e59f0004 	ldr	r0, [pc, #4]	; f51c <CUSBFunction::RemoveDevice()+0x28>
    f514:	eb00545a 	bl	24684 <assertion_failed>
    f518:	0003fbb0 	.word	0x0003fbb0
    f51c:	0003f428 	.word	0x0003f428

0000f520 <CUSBFunction::Configure()>:
    f520:	e92d4070 	push	{r4, r5, r6, lr}
    f524:	e590300c 	ldr	r3, [r0, #12]
    f528:	e24dd010 	sub	sp, sp, #16
    f52c:	e3530000 	cmp	r3, #0
    f530:	0a000026 	beq	f5d0 <CUSBFunction::Configure()+0xb0>
    f534:	e5d33003 	ldrb	r3, [r3, #3]
    f538:	e3530000 	cmp	r3, #0
    f53c:	0a000019 	beq	f5a8 <CUSBFunction::Configure()+0x88>
    f540:	e1a04000 	mov	r4, r0
    f544:	e5900004 	ldr	r0, [r0, #4]
    f548:	e3500000 	cmp	r0, #0
    f54c:	0a000023 	beq	f5e0 <CUSBFunction::Configure()+0xc0>
    f550:	ebfffb5d 	bl	e2cc <CUSBDevice::GetHost() const>
    f554:	e5943004 	ldr	r3, [r4, #4]
    f558:	e1a06000 	mov	r6, r0
    f55c:	e3530000 	cmp	r3, #0
    f560:	0a000022 	beq	f5f0 <CUSBFunction::Configure()+0xd0>
    f564:	e3a05000 	mov	r5, #0
    f568:	e1a00003 	mov	r0, r3
    f56c:	ebfffb4c 	bl	e2a4 <CUSBDevice::GetEndpoint0() const>
    f570:	e594300c 	ldr	r3, [r4, #12]
    f574:	e58d500c 	str	r5, [sp, #12]
    f578:	e58d5008 	str	r5, [sp, #8]
    f57c:	e5d32002 	ldrb	r2, [r3, #2]
    f580:	e1a01000 	mov	r1, r0
    f584:	e58d2004 	str	r2, [sp, #4]
    f588:	e5d33003 	ldrb	r3, [r3, #3]
    f58c:	e1a00006 	mov	r0, r6
    f590:	e58d3000 	str	r3, [sp]
    f594:	e3a02001 	mov	r2, #1
    f598:	e3a0300b 	mov	r3, #11
    f59c:	eb000c68 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f5a0:	e1500005 	cmp	r0, r5
    f5a4:	ba000002 	blt	f5b4 <CUSBFunction::Configure()+0x94>
    f5a8:	e3a00001 	mov	r0, #1
    f5ac:	e28dd010 	add	sp, sp, #16
    f5b0:	e8bd8070 	pop	{r4, r5, r6, pc}
    f5b4:	eb005d1a 	bl	26a24 <CLogger::Get()>
    f5b8:	e3a02001 	mov	r2, #1
    f5bc:	e59f303c 	ldr	r3, [pc, #60]	; f600 <CUSBFunction::Configure()+0xe0>
    f5c0:	e59f103c 	ldr	r1, [pc, #60]	; f604 <CUSBFunction::Configure()+0xe4>
    f5c4:	eb005c58 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f5c8:	e1a00005 	mov	r0, r5
    f5cc:	eafffff6 	b	f5ac <CUSBFunction::Configure()+0x8c>
    f5d0:	e3a0204e 	mov	r2, #78	; 0x4e
    f5d4:	e59f102c 	ldr	r1, [pc, #44]	; f608 <CUSBFunction::Configure()+0xe8>
    f5d8:	e59f002c 	ldr	r0, [pc, #44]	; f60c <CUSBFunction::Configure()+0xec>
    f5dc:	eb005428 	bl	24684 <assertion_failed>
    f5e0:	e3a02090 	mov	r2, #144	; 0x90
    f5e4:	e59f101c 	ldr	r1, [pc, #28]	; f608 <CUSBFunction::Configure()+0xe8>
    f5e8:	e59f0020 	ldr	r0, [pc, #32]	; f610 <CUSBFunction::Configure()+0xf0>
    f5ec:	eb005424 	bl	24684 <assertion_failed>
    f5f0:	e3a0208a 	mov	r2, #138	; 0x8a
    f5f4:	e59f100c 	ldr	r1, [pc, #12]	; f608 <CUSBFunction::Configure()+0xe8>
    f5f8:	e59f0010 	ldr	r0, [pc, #16]	; f610 <CUSBFunction::Configure()+0xf0>
    f5fc:	eb005420 	bl	24684 <assertion_failed>
    f600:	0003fbd8 	.word	0x0003fbd8
    f604:	0003fc7c 	.word	0x0003fc7c
    f608:	0003fbb0 	.word	0x0003fbb0
    f60c:	0003fbc0 	.word	0x0003fbc0
    f610:	0003f428 	.word	0x0003f428

0000f614 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
    f614:	e92d4070 	push	{r4, r5, r6, lr}
    f618:	e1a04000 	mov	r4, r0
    f61c:	e1a05001 	mov	r5, r1
    f620:	e1a06002 	mov	r6, r2
    f624:	eb0055fd 	bl	24e20 <CDevice::CDevice()>
    f628:	e3a03000 	mov	r3, #0
    f62c:	e59f207c 	ldr	r2, [pc, #124]	; f6b0 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x9c>
    f630:	e1550003 	cmp	r5, r3
    f634:	e8840024 	stm	r4, {r2, r5}
    f638:	e5843008 	str	r3, [r4, #8]
    f63c:	e584300c 	str	r3, [r4, #12]
    f640:	0a00000e 	beq	f680 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x6c>
    f644:	e3560000 	cmp	r6, #0
    f648:	0a000010 	beq	f690 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x7c>
    f64c:	e3a0001c 	mov	r0, #28
    f650:	eb006e12 	bl	2aea0 <operator new(unsigned int)>
    f654:	e1a05000 	mov	r5, r0
    f658:	e1a01006 	mov	r1, r6
    f65c:	eb002097 	bl	178c0 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
    f660:	e1a00005 	mov	r0, r5
    f664:	e5845008 	str	r5, [r4, #8]
    f668:	eb0020d8 	bl	179d0 <CUSBConfigurationParser::GetCurrentDescriptor()>
    f66c:	e3500000 	cmp	r0, #0
    f670:	e584000c 	str	r0, [r4, #12]
    f674:	0a000009 	beq	f6a0 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x8c>
    f678:	e1a00004 	mov	r0, r4
    f67c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f680:	e3a02022 	mov	r2, #34	; 0x22
    f684:	e59f1028 	ldr	r1, [pc, #40]	; f6b4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    f688:	e59f0028 	ldr	r0, [pc, #40]	; f6b8 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa4>
    f68c:	eb0053fc 	bl	24684 <assertion_failed>
    f690:	e3a02024 	mov	r2, #36	; 0x24
    f694:	e59f1018 	ldr	r1, [pc, #24]	; f6b4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    f698:	e59f001c 	ldr	r0, [pc, #28]	; f6bc <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa8>
    f69c:	eb0053f8 	bl	24684 <assertion_failed>
    f6a0:	e3a02029 	mov	r2, #41	; 0x29
    f6a4:	e59f1008 	ldr	r1, [pc, #8]	; f6b4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    f6a8:	e59f0010 	ldr	r0, [pc, #16]	; f6c0 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xac>
    f6ac:	eb0053f4 	bl	24684 <assertion_failed>
    f6b0:	0003fc58 	.word	0x0003fc58
    f6b4:	0003fbb0 	.word	0x0003fbb0
    f6b8:	0003f428 	.word	0x0003f428
    f6bc:	0003fbf0 	.word	0x0003fbf0
    f6c0:	0003fbc0 	.word	0x0003fbc0

0000f6c4 <CUSBFunction::CUSBFunction(CUSBFunction*)>:
    f6c4:	e92d4070 	push	{r4, r5, r6, lr}
    f6c8:	e1a04000 	mov	r4, r0
    f6cc:	e1a05001 	mov	r5, r1
    f6d0:	eb0055d2 	bl	24e20 <CDevice::CDevice()>
    f6d4:	e3a03000 	mov	r3, #0
    f6d8:	e59f20a0 	ldr	r2, [pc, #160]	; f780 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xbc>
    f6dc:	e1550003 	cmp	r5, r3
    f6e0:	e1c420f0 	strd	r2, [r4]
    f6e4:	e5843008 	str	r3, [r4, #8]
    f6e8:	e584300c 	str	r3, [r4, #12]
    f6ec:	0a000013 	beq	f740 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x7c>
    f6f0:	e5953004 	ldr	r3, [r5, #4]
    f6f4:	e3530000 	cmp	r3, #0
    f6f8:	e5843004 	str	r3, [r4, #4]
    f6fc:	0a000013 	beq	f750 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x8c>
    f700:	e5953008 	ldr	r3, [r5, #8]
    f704:	e3530000 	cmp	r3, #0
    f708:	0a000014 	beq	f760 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x9c>
    f70c:	e3a0001c 	mov	r0, #28
    f710:	eb006de2 	bl	2aea0 <operator new(unsigned int)>
    f714:	e1a06000 	mov	r6, r0
    f718:	e5951008 	ldr	r1, [r5, #8]
    f71c:	eb002067 	bl	178c0 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
    f720:	e1a00006 	mov	r0, r6
    f724:	e5846008 	str	r6, [r4, #8]
    f728:	eb0020a8 	bl	179d0 <CUSBConfigurationParser::GetCurrentDescriptor()>
    f72c:	e3500000 	cmp	r0, #0
    f730:	e584000c 	str	r0, [r4, #12]
    f734:	0a00000d 	beq	f770 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xac>
    f738:	e1a00004 	mov	r0, r4
    f73c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f740:	e3a02031 	mov	r2, #49	; 0x31
    f744:	e59f1038 	ldr	r1, [pc, #56]	; f784 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f748:	e59f0038 	ldr	r0, [pc, #56]	; f788 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc4>
    f74c:	eb0053cc 	bl	24684 <assertion_failed>
    f750:	e3a02033 	mov	r2, #51	; 0x33
    f754:	e59f1028 	ldr	r1, [pc, #40]	; f784 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f758:	e59f002c 	ldr	r0, [pc, #44]	; f78c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc8>
    f75c:	eb0053c8 	bl	24684 <assertion_failed>
    f760:	e3a02035 	mov	r2, #53	; 0x35
    f764:	e59f1018 	ldr	r1, [pc, #24]	; f784 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f768:	e59f0020 	ldr	r0, [pc, #32]	; f790 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xcc>
    f76c:	eb0053c4 	bl	24684 <assertion_failed>
    f770:	e3a0203a 	mov	r2, #58	; 0x3a
    f774:	e59f1008 	ldr	r1, [pc, #8]	; f784 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f778:	e59f0014 	ldr	r0, [pc, #20]	; f794 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xd0>
    f77c:	eb0053c0 	bl	24684 <assertion_failed>
    f780:	0003fc58 	.word	0x0003fc58
    f784:	0003fbb0 	.word	0x0003fbb0
    f788:	0003fc04 	.word	0x0003fc04
    f78c:	0003f428 	.word	0x0003f428
    f790:	0003fc14 	.word	0x0003fc14
    f794:	0003fbc0 	.word	0x0003fbc0

0000f798 <CUSBFunction::GetInterfaceName() const>:
    f798:	e92d4030 	push	{r4, r5, lr}
    f79c:	e1a05000 	mov	r5, r0
    f7a0:	e24dd00c 	sub	sp, sp, #12
    f7a4:	e3a00010 	mov	r0, #16
    f7a8:	eb006dbc 	bl	2aea0 <operator new(unsigned int)>
    f7ac:	e59f1054 	ldr	r1, [pc, #84]	; f808 <CUSBFunction::GetInterfaceName() const+0x70>
    f7b0:	e1a04000 	mov	r4, r0
    f7b4:	eb006090 	bl	279fc <CString::CString(char const*)>
    f7b8:	e595100c 	ldr	r1, [r5, #12]
    f7bc:	e3510000 	cmp	r1, #0
    f7c0:	0a000004 	beq	f7d8 <CUSBFunction::GetInterfaceName() const+0x40>
    f7c4:	e5d12005 	ldrb	r2, [r1, #5]
    f7c8:	e2423001 	sub	r3, r2, #1
    f7cc:	e6ef3073 	uxtb	r3, r3
    f7d0:	e35300fd 	cmp	r3, #253	; 0xfd
    f7d4:	9a000002 	bls	f7e4 <CUSBFunction::GetInterfaceName() const+0x4c>
    f7d8:	e1a00004 	mov	r0, r4
    f7dc:	e28dd00c 	add	sp, sp, #12
    f7e0:	e8bd8030 	pop	{r4, r5, pc}
    f7e4:	e5d13006 	ldrb	r3, [r1, #6]
    f7e8:	e5d11007 	ldrb	r1, [r1, #7]
    f7ec:	e1a00004 	mov	r0, r4
    f7f0:	e58d1000 	str	r1, [sp]
    f7f4:	e59f1010 	ldr	r1, [pc, #16]	; f80c <CUSBFunction::GetInterfaceName() const+0x74>
    f7f8:	eb0065c3 	bl	28f0c <CString::Format(char const*, ...)>
    f7fc:	e1a00004 	mov	r0, r4
    f800:	e28dd00c 	add	sp, sp, #12
    f804:	e8bd8030 	pop	{r4, r5, pc}
    f808:	0003f5e8 	.word	0x0003f5e8
    f80c:	0003fc34 	.word	0x0003fc34

0000f810 <CUSBFunction::GetNumEndpoints() const>:
    f810:	e590300c 	ldr	r3, [r0, #12]
    f814:	e3530000 	cmp	r3, #0
    f818:	0a000001 	beq	f824 <CUSBFunction::GetNumEndpoints() const+0x14>
    f81c:	e5d30004 	ldrb	r0, [r3, #4]
    f820:	e12fff1e 	bx	lr
    f824:	e3a0207e 	mov	r2, #126	; 0x7e
    f828:	e92d4010 	push	{r4, lr}
    f82c:	e59f1004 	ldr	r1, [pc, #4]	; f838 <CUSBFunction::GetNumEndpoints() const+0x28>
    f830:	e59f0004 	ldr	r0, [pc, #4]	; f83c <CUSBFunction::GetNumEndpoints() const+0x2c>
    f834:	eb005392 	bl	24684 <assertion_failed>
    f838:	0003fbb0 	.word	0x0003fbb0
    f83c:	0003fbc0 	.word	0x0003fbc0

0000f840 <CUSBFunction::GetDevice() const>:
    f840:	e5900004 	ldr	r0, [r0, #4]
    f844:	e3500000 	cmp	r0, #0
    f848:	112fff1e 	bxne	lr
    f84c:	e3a02084 	mov	r2, #132	; 0x84
    f850:	e92d4010 	push	{r4, lr}
    f854:	e59f1004 	ldr	r1, [pc, #4]	; f860 <CUSBFunction::GetDevice() const+0x20>
    f858:	e59f0004 	ldr	r0, [pc, #4]	; f864 <CUSBFunction::GetDevice() const+0x24>
    f85c:	eb005388 	bl	24684 <assertion_failed>
    f860:	0003fbb0 	.word	0x0003fbb0
    f864:	0003f428 	.word	0x0003f428

0000f868 <CUSBFunction::GetEndpoint0() const>:
    f868:	e5900004 	ldr	r0, [r0, #4]
    f86c:	e3500000 	cmp	r0, #0
    f870:	0a000000 	beq	f878 <CUSBFunction::GetEndpoint0() const+0x10>
    f874:	eafffa8a 	b	e2a4 <CUSBDevice::GetEndpoint0() const>
    f878:	e3a0208a 	mov	r2, #138	; 0x8a
    f87c:	e92d4010 	push	{r4, lr}
    f880:	e59f1004 	ldr	r1, [pc, #4]	; f88c <CUSBFunction::GetEndpoint0() const+0x24>
    f884:	e59f0004 	ldr	r0, [pc, #4]	; f890 <CUSBFunction::GetEndpoint0() const+0x28>
    f888:	eb00537d 	bl	24684 <assertion_failed>
    f88c:	0003fbb0 	.word	0x0003fbb0
    f890:	0003f428 	.word	0x0003f428

0000f894 <CUSBFunction::GetHost() const>:
    f894:	e5900004 	ldr	r0, [r0, #4]
    f898:	e3500000 	cmp	r0, #0
    f89c:	0a000000 	beq	f8a4 <CUSBFunction::GetHost() const+0x10>
    f8a0:	eafffa89 	b	e2cc <CUSBDevice::GetHost() const>
    f8a4:	e3a02090 	mov	r2, #144	; 0x90
    f8a8:	e92d4010 	push	{r4, lr}
    f8ac:	e59f1004 	ldr	r1, [pc, #4]	; f8b8 <CUSBFunction::GetHost() const+0x24>
    f8b0:	e59f0004 	ldr	r0, [pc, #4]	; f8bc <CUSBFunction::GetHost() const+0x28>
    f8b4:	eb005372 	bl	24684 <assertion_failed>
    f8b8:	0003fbb0 	.word	0x0003fbb0
    f8bc:	0003f428 	.word	0x0003f428

0000f8c0 <CUSBFunction::GetDescriptor(unsigned char)>:
    f8c0:	e5900008 	ldr	r0, [r0, #8]
    f8c4:	e3500000 	cmp	r0, #0
    f8c8:	0a000000 	beq	f8d0 <CUSBFunction::GetDescriptor(unsigned char)+0x10>
    f8cc:	ea002016 	b	1792c <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    f8d0:	e3a02096 	mov	r2, #150	; 0x96
    f8d4:	e92d4010 	push	{r4, lr}
    f8d8:	e59f1004 	ldr	r1, [pc, #4]	; f8e4 <CUSBFunction::GetDescriptor(unsigned char)+0x24>
    f8dc:	e59f0004 	ldr	r0, [pc, #4]	; f8e8 <CUSBFunction::GetDescriptor(unsigned char)+0x28>
    f8e0:	eb005367 	bl	24684 <assertion_failed>
    f8e4:	0003fbb0 	.word	0x0003fbb0
    f8e8:	0003f654 	.word	0x0003f654

0000f8ec <CUSBFunction::ConfigurationError(char const*) const>:
    f8ec:	e5900008 	ldr	r0, [r0, #8]
    f8f0:	e92d4010 	push	{r4, lr}
    f8f4:	e3500000 	cmp	r0, #0
    f8f8:	0a000003 	beq	f90c <CUSBFunction::ConfigurationError(char const*) const+0x20>
    f8fc:	e3510000 	cmp	r1, #0
    f900:	0a000005 	beq	f91c <CUSBFunction::ConfigurationError(char const*) const+0x30>
    f904:	e8bd4010 	pop	{r4, lr}
    f908:	ea002042 	b	17a18 <CUSBConfigurationParser::Error(char const*) const>
    f90c:	e3a0209c 	mov	r2, #156	; 0x9c
    f910:	e59f1014 	ldr	r1, [pc, #20]	; f92c <CUSBFunction::ConfigurationError(char const*) const+0x40>
    f914:	e59f0014 	ldr	r0, [pc, #20]	; f930 <CUSBFunction::ConfigurationError(char const*) const+0x44>
    f918:	eb005359 	bl	24684 <assertion_failed>
    f91c:	e3a0209d 	mov	r2, #157	; 0x9d
    f920:	e59f1004 	ldr	r1, [pc, #4]	; f92c <CUSBFunction::ConfigurationError(char const*) const+0x40>
    f924:	e59f0008 	ldr	r0, [pc, #8]	; f934 <CUSBFunction::ConfigurationError(char const*) const+0x48>
    f928:	eb005355 	bl	24684 <assertion_failed>
    f92c:	0003fbb0 	.word	0x0003fbb0
    f930:	0003f654 	.word	0x0003f654
    f934:	0003fc40 	.word	0x0003fc40

0000f938 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
    f938:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f93c:	e1a04000 	mov	r4, r0
    f940:	e590000c 	ldr	r0, [r0, #12]
    f944:	e3500000 	cmp	r0, #0
    f948:	0a00001d 	beq	f9c4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x8c>
    f94c:	e1a07003 	mov	r7, r3
    f950:	e5943008 	ldr	r3, [r4, #8]
    f954:	e3530000 	cmp	r3, #0
    f958:	0a00001d 	beq	f9d4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x9c>
    f95c:	e5943004 	ldr	r3, [r4, #4]
    f960:	e1a05001 	mov	r5, r1
    f964:	e3530000 	cmp	r3, #0
    f968:	e1a06002 	mov	r6, r2
    f96c:	1a000009 	bne	f998 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x60>
    f970:	ea00001b 	b	f9e4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xac>
    f974:	e3a01004 	mov	r1, #4
    f978:	e5940004 	ldr	r0, [r4, #4]
    f97c:	ebfffa72 	bl	e34c <CUSBDevice::GetDescriptor(unsigned char)>
    f980:	e3a01004 	mov	r1, #4
    f984:	e5940008 	ldr	r0, [r4, #8]
    f988:	eb001fe7 	bl	1792c <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    f98c:	e3500000 	cmp	r0, #0
    f990:	e584000c 	str	r0, [r4, #12]
    f994:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    f998:	e5d0c005 	ldrb	ip, [r0, #5]
    f99c:	e15c0005 	cmp	ip, r5
    f9a0:	1afffff3 	bne	f974 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
    f9a4:	e5d01006 	ldrb	r1, [r0, #6]
    f9a8:	e1510006 	cmp	r1, r6
    f9ac:	1afffff0 	bne	f974 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
    f9b0:	e5d03007 	ldrb	r3, [r0, #7]
    f9b4:	e1530007 	cmp	r3, r7
    f9b8:	1affffed 	bne	f974 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
    f9bc:	e3a00001 	mov	r0, #1
    f9c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f9c4:	e3a020a3 	mov	r2, #163	; 0xa3
    f9c8:	e59f1024 	ldr	r1, [pc, #36]	; f9f4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xbc>
    f9cc:	e59f0024 	ldr	r0, [pc, #36]	; f9f8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc0>
    f9d0:	eb00532b 	bl	24684 <assertion_failed>
    f9d4:	e3a020a4 	mov	r2, #164	; 0xa4
    f9d8:	e59f1014 	ldr	r1, [pc, #20]	; f9f4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xbc>
    f9dc:	e59f0018 	ldr	r0, [pc, #24]	; f9fc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
    f9e0:	eb005327 	bl	24684 <assertion_failed>
    f9e4:	e3a020a5 	mov	r2, #165	; 0xa5
    f9e8:	e59f1004 	ldr	r1, [pc, #4]	; f9f4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xbc>
    f9ec:	e59f000c 	ldr	r0, [pc, #12]	; fa00 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc8>
    f9f0:	eb005323 	bl	24684 <assertion_failed>
    f9f4:	0003fbb0 	.word	0x0003fbb0
    f9f8:	0003fbc0 	.word	0x0003fbc0
    f9fc:	0003f654 	.word	0x0003f654
    fa00:	0003f428 	.word	0x0003f428

0000fa04 <CUSBFunction::GetInterfaceNumber() const>:
    fa04:	e590300c 	ldr	r3, [r0, #12]
    fa08:	e3530000 	cmp	r3, #0
    fa0c:	0a000001 	beq	fa18 <CUSBFunction::GetInterfaceNumber() const+0x14>
    fa10:	e5d30002 	ldrb	r0, [r3, #2]
    fa14:	e12fff1e 	bx	lr
    fa18:	e3a020bb 	mov	r2, #187	; 0xbb
    fa1c:	e92d4010 	push	{r4, lr}
    fa20:	e59f1004 	ldr	r1, [pc, #4]	; fa2c <CUSBFunction::GetInterfaceNumber() const+0x28>
    fa24:	e59f0004 	ldr	r0, [pc, #4]	; fa30 <CUSBFunction::GetInterfaceNumber() const+0x2c>
    fa28:	eb005315 	bl	24684 <assertion_failed>
    fa2c:	0003fbb0 	.word	0x0003fbb0
    fa30:	0003fbc0 	.word	0x0003fbc0

0000fa34 <CUSBFunction::GetInterfaceClass() const>:
    fa34:	e590300c 	ldr	r3, [r0, #12]
    fa38:	e3530000 	cmp	r3, #0
    fa3c:	0a000001 	beq	fa48 <CUSBFunction::GetInterfaceClass() const+0x14>
    fa40:	e5d30005 	ldrb	r0, [r3, #5]
    fa44:	e12fff1e 	bx	lr
    fa48:	e3a020c1 	mov	r2, #193	; 0xc1
    fa4c:	e92d4010 	push	{r4, lr}
    fa50:	e59f1004 	ldr	r1, [pc, #4]	; fa5c <CUSBFunction::GetInterfaceClass() const+0x28>
    fa54:	e59f0004 	ldr	r0, [pc, #4]	; fa60 <CUSBFunction::GetInterfaceClass() const+0x2c>
    fa58:	eb005309 	bl	24684 <assertion_failed>
    fa5c:	0003fbb0 	.word	0x0003fbb0
    fa60:	0003fbc0 	.word	0x0003fbc0

0000fa64 <CUSBFunction::GetInterfaceSubClass() const>:
    fa64:	e590300c 	ldr	r3, [r0, #12]
    fa68:	e3530000 	cmp	r3, #0
    fa6c:	0a000001 	beq	fa78 <CUSBFunction::GetInterfaceSubClass() const+0x14>
    fa70:	e5d30006 	ldrb	r0, [r3, #6]
    fa74:	e12fff1e 	bx	lr
    fa78:	e3a020c7 	mov	r2, #199	; 0xc7
    fa7c:	e92d4010 	push	{r4, lr}
    fa80:	e59f1004 	ldr	r1, [pc, #4]	; fa8c <CUSBFunction::GetInterfaceSubClass() const+0x28>
    fa84:	e59f0004 	ldr	r0, [pc, #4]	; fa90 <CUSBFunction::GetInterfaceSubClass() const+0x2c>
    fa88:	eb0052fd 	bl	24684 <assertion_failed>
    fa8c:	0003fbb0 	.word	0x0003fbb0
    fa90:	0003fbc0 	.word	0x0003fbc0

0000fa94 <CUSBFunction::GetInterfaceProtocol() const>:
    fa94:	e590300c 	ldr	r3, [r0, #12]
    fa98:	e3530000 	cmp	r3, #0
    fa9c:	0a000001 	beq	faa8 <CUSBFunction::GetInterfaceProtocol() const+0x14>
    faa0:	e5d30007 	ldrb	r0, [r3, #7]
    faa4:	e12fff1e 	bx	lr
    faa8:	e3a020cd 	mov	r2, #205	; 0xcd
    faac:	e92d4010 	push	{r4, lr}
    fab0:	e59f1004 	ldr	r1, [pc, #4]	; fabc <CUSBFunction::GetInterfaceProtocol() const+0x28>
    fab4:	e59f0004 	ldr	r0, [pc, #4]	; fac0 <CUSBFunction::GetInterfaceProtocol() const+0x2c>
    fab8:	eb0052f1 	bl	24684 <assertion_failed>
    fabc:	0003fbb0 	.word	0x0003fbb0
    fac0:	0003fbc0 	.word	0x0003fbc0

0000fac4 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
    fac4:	e92d4010 	push	{r4, lr}
    fac8:	e1a04000 	mov	r4, r0
    facc:	e59f300c 	ldr	r3, [pc, #12]	; fae0 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x1c>
    fad0:	e5803000 	str	r3, [r0]
    fad4:	eb000349 	bl	10800 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    fad8:	e1a00004 	mov	r0, r4
    fadc:	e8bd8010 	pop	{r4, pc}
    fae0:	0003fd0c 	.word	0x0003fd0c

0000fae4 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
    fae4:	e92d4010 	push	{r4, lr}
    fae8:	e1a04000 	mov	r4, r0
    faec:	e59f3018 	ldr	r3, [pc, #24]	; fb0c <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x28>
    faf0:	e5803000 	str	r3, [r0]
    faf4:	eb000341 	bl	10800 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    faf8:	e1a00004 	mov	r0, r4
    fafc:	e3a01f5b 	mov	r1, #364	; 0x16c
    fb00:	eb006cf4 	bl	2aed8 <operator delete(void*, unsigned int)>
    fb04:	e1a00004 	mov	r0, r4
    fb08:	e8bd8010 	pop	{r4, pc}
    fb0c:	0003fd0c 	.word	0x0003fd0c

0000fb10 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
    fb10:	e92d4030 	push	{r4, r5, lr}
    fb14:	e1a04001 	mov	r4, r1
    fb18:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    fb1c:	e2801f4f 	add	r1, r0, #316	; 0x13c
    fb20:	e1a05000 	mov	r5, r0
    fb24:	e3a02030 	mov	r2, #48	; 0x30
    fb28:	e28d0018 	add	r0, sp, #24
    fb2c:	eb006af5 	bl	2a708 <memcpy>
    fb30:	e3540001 	cmp	r4, #1
    fb34:	0a000007 	beq	fb58 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x48>
    fb38:	e3540002 	cmp	r4, #2
    fb3c:	0a000029 	beq	fbe8 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xd8>
    fb40:	e3540000 	cmp	r4, #0
    fb44:	0a000023 	beq	fbd8 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xc8>
    fb48:	e59f20b4 	ldr	r2, [pc, #180]	; fc04 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xf4>
    fb4c:	e59f10b4 	ldr	r1, [pc, #180]	; fc08 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xf8>
    fb50:	e59f00b4 	ldr	r0, [pc, #180]	; fc0c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xfc>
    fb54:	eb0052ca 	bl	24684 <assertion_failed>
    fb58:	e3e01001 	mvn	r1, #1
    fb5c:	e3e02c01 	mvn	r2, #256	; 0x100
    fb60:	e3a03000 	mov	r3, #0
    fb64:	e5cd1019 	strb	r1, [sp, #25]
    fb68:	e1cd21ba 	strh	r2, [sp, #26]
    fb6c:	e5cd301c 	strb	r3, [sp, #28]
    fb70:	e1a00005 	mov	r0, r5
    fb74:	ebffff46 	bl	f894 <CUSBFunction::GetHost() const>
    fb78:	e1a04000 	mov	r4, r0
    fb7c:	e1a00005 	mov	r0, r5
    fb80:	ebffff38 	bl	f868 <CUSBFunction::GetEndpoint0() const>
    fb84:	e1a01000 	mov	r1, r0
    fb88:	e1a00005 	mov	r0, r5
    fb8c:	e58d1014 	str	r1, [sp, #20]
    fb90:	ebffff9b 	bl	fa04 <CUSBFunction::GetInterfaceNumber() const>
    fb94:	e3a0c030 	mov	ip, #48	; 0x30
    fb98:	e6ff3070 	uxth	r3, r0
    fb9c:	e59f206c 	ldr	r2, [pc, #108]	; fc10 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x100>
    fba0:	e58d3004 	str	r3, [sp, #4]
    fba4:	e28d3018 	add	r3, sp, #24
    fba8:	e58d3008 	str	r3, [sp, #8]
    fbac:	e58d2000 	str	r2, [sp]
    fbb0:	e1a00004 	mov	r0, r4
    fbb4:	e3a03009 	mov	r3, #9
    fbb8:	e3a02021 	mov	r2, #33	; 0x21
    fbbc:	e59d1014 	ldr	r1, [sp, #20]
    fbc0:	e58dc00c 	str	ip, [sp, #12]
    fbc4:	eb000ade 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fbc8:	e1e00000 	mvn	r0, r0
    fbcc:	e1a00fa0 	lsr	r0, r0, #31
    fbd0:	e28dd04c 	add	sp, sp, #76	; 0x4c
    fbd4:	e8bd8030 	pop	{r4, r5, pc}
    fbd8:	e5cd4019 	strb	r4, [sp, #25]
    fbdc:	e1cd41ba 	strh	r4, [sp, #26]
    fbe0:	e5cd401c 	strb	r4, [sp, #28]
    fbe4:	eaffffe1 	b	fb70 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
    fbe8:	e3e01001 	mvn	r1, #1
    fbec:	e3a02cfe 	mov	r2, #65024	; 0xfe00
    fbf0:	e3e03000 	mvn	r3, #0
    fbf4:	e5cd1019 	strb	r1, [sp, #25]
    fbf8:	e1cd21ba 	strh	r2, [sp, #26]
    fbfc:	e5cd301c 	strb	r3, [sp, #28]
    fc00:	eaffffda 	b	fb70 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
    fc04:	0000010e 	.word	0x0000010e
    fc08:	0003fc84 	.word	0x0003fc84
    fc0c:	0003f63c 	.word	0x0003f63c
    fc10:	00000201 	.word	0x00000201

0000fc14 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
    fc14:	e351000a 	cmp	r1, #10
    fc18:	9a000001 	bls	fc24 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x10>
    fc1c:	e3a00000 	mov	r0, #0
    fc20:	e12fff1e 	bx	lr
    fc24:	e59f3070 	ldr	r3, [pc, #112]	; fc9c <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x88>
    fc28:	e92d4030 	push	{r4, r5, lr}
    fc2c:	e0831001 	add	r1, r3, r1
    fc30:	e5d1304c 	ldrb	r3, [r1, #76]	; 0x4c
    fc34:	e24dd01c 	sub	sp, sp, #28
    fc38:	e1a03083 	lsl	r3, r3, #1
    fc3c:	e5c03145 	strb	r3, [r0, #325]	; 0x145
    fc40:	e1a04000 	mov	r4, r0
    fc44:	ebffff12 	bl	f894 <CUSBFunction::GetHost() const>
    fc48:	e1a05000 	mov	r5, r0
    fc4c:	e1a00004 	mov	r0, r4
    fc50:	ebffff04 	bl	f868 <CUSBFunction::GetEndpoint0() const>
    fc54:	e1a01000 	mov	r1, r0
    fc58:	e1a00004 	mov	r0, r4
    fc5c:	e58d1014 	str	r1, [sp, #20]
    fc60:	ebffff67 	bl	fa04 <CUSBFunction::GetInterfaceNumber() const>
    fc64:	e3a0c030 	mov	ip, #48	; 0x30
    fc68:	e59f2030 	ldr	r2, [pc, #48]	; fca0 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x8c>
    fc6c:	e6ff3070 	uxth	r3, r0
    fc70:	e2844f4f 	add	r4, r4, #316	; 0x13c
    fc74:	e88d101c 	stm	sp, {r2, r3, r4, ip}
    fc78:	e1a00005 	mov	r0, r5
    fc7c:	e3a03009 	mov	r3, #9
    fc80:	e3a02021 	mov	r2, #33	; 0x21
    fc84:	e59d1014 	ldr	r1, [sp, #20]
    fc88:	eb000aad 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fc8c:	e1e00000 	mvn	r0, r0
    fc90:	e1a00fa0 	lsr	r0, r0, #31
    fc94:	e28dd01c 	add	sp, sp, #28
    fc98:	e8bd8030 	pop	{r4, r5, pc}
    fc9c:	0003fd04 	.word	0x0003fd04
    fca0:	00000201 	.word	0x00000201

0000fca4 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
    fca4:	e92d4070 	push	{r4, r5, r6, lr}
    fca8:	e3a02000 	mov	r2, #0
    fcac:	e1a04000 	mov	r4, r0
    fcb0:	eb0002e9 	bl	1085c <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    fcb4:	e3a03000 	mov	r3, #0
    fcb8:	e59f5030 	ldr	r5, [pc, #48]	; fcf0 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)+0x4c>
    fcbc:	e1a00004 	mov	r0, r4
    fcc0:	e2852008 	add	r2, r5, #8
    fcc4:	e5842000 	str	r2, [r4]
    fcc8:	e3a01003 	mov	r1, #3
    fccc:	e1a02003 	mov	r2, r3
    fcd0:	ebffff18 	bl	f938 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
    fcd4:	e3a02030 	mov	r2, #48	; 0x30
    fcd8:	e5c4013a 	strb	r0, [r4, #314]	; 0x13a
    fcdc:	e2851058 	add	r1, r5, #88	; 0x58
    fce0:	e2840f4f 	add	r0, r4, #316	; 0x13c
    fce4:	eb006a87 	bl	2a708 <memcpy>
    fce8:	e1a00004 	mov	r0, r4
    fcec:	e8bd8070 	pop	{r4, r5, r6, pc}
    fcf0:	0003fd04 	.word	0x0003fd04

0000fcf4 <CUSBGamePadPS3Device::PS3Enable()>:
    fcf4:	e92d4030 	push	{r4, r5, lr}
    fcf8:	e59f3084 	ldr	r3, [pc, #132]	; fd84 <CUSBGamePadPS3Device::PS3Enable()+0x90>
    fcfc:	e24dd024 	sub	sp, sp, #36	; 0x24
    fd00:	e58d301c 	str	r3, [sp, #28]
    fd04:	e1a04000 	mov	r4, r0
    fd08:	ebfffee1 	bl	f894 <CUSBFunction::GetHost() const>
    fd0c:	e1a05000 	mov	r5, r0
    fd10:	e1a00004 	mov	r0, r4
    fd14:	ebfffed3 	bl	f868 <CUSBFunction::GetEndpoint0() const>
    fd18:	e1a01000 	mov	r1, r0
    fd1c:	e1a00004 	mov	r0, r4
    fd20:	e58d1014 	str	r1, [sp, #20]
    fd24:	ebffff36 	bl	fa04 <CUSBFunction::GetInterfaceNumber() const>
    fd28:	e3a0c004 	mov	ip, #4
    fd2c:	e3a02ffd 	mov	r2, #1012	; 0x3f4
    fd30:	e6ff3070 	uxth	r3, r0
    fd34:	e58d3004 	str	r3, [sp, #4]
    fd38:	e28d301c 	add	r3, sp, #28
    fd3c:	e58d2000 	str	r2, [sp]
    fd40:	e58d3008 	str	r3, [sp, #8]
    fd44:	e1a00005 	mov	r0, r5
    fd48:	e3a03009 	mov	r3, #9
    fd4c:	e3a02021 	mov	r2, #33	; 0x21
    fd50:	e59d1014 	ldr	r1, [sp, #20]
    fd54:	e58dc00c 	str	ip, [sp, #12]
    fd58:	eb000a79 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fd5c:	e3500000 	cmp	r0, #0
    fd60:	b3a00000 	movlt	r0, #0
    fd64:	ba000004 	blt	fd7c <CUSBGamePadPS3Device::PS3Enable()+0x88>
    fd68:	e5943000 	ldr	r3, [r4]
    fd6c:	e1a00004 	mov	r0, r4
    fd70:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
    fd74:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    fd78:	e12fff33 	blx	r3
    fd7c:	e28dd024 	add	sp, sp, #36	; 0x24
    fd80:	e8bd8030 	pop	{r4, r5, pc}
    fd84:	00000c42 	.word	0x00000c42

0000fd88 <CUSBGamePadPS3Device::Configure()>:
    fd88:	e92d4030 	push	{r4, r5, lr}
    fd8c:	e5d0313a 	ldrb	r3, [r0, #314]	; 0x13a
    fd90:	e24dd00c 	sub	sp, sp, #12
    fd94:	e3530000 	cmp	r3, #0
    fd98:	0a00001e 	beq	fe18 <CUSBGamePadPS3Device::Configure()+0x90>
    fd9c:	e1a04000 	mov	r4, r0
    fda0:	eb00040e 	bl	10de0 <CUSBGamePadStandardDevice::Configure()>
    fda4:	e3500000 	cmp	r0, #0
    fda8:	0a000029 	beq	fe54 <CUSBGamePadPS3Device::Configure()+0xcc>
    fdac:	e2845f4a 	add	r5, r4, #296	; 0x128
    fdb0:	e1d530b0 	ldrh	r3, [r5]
    fdb4:	e2433031 	sub	r3, r3, #49	; 0x31
    fdb8:	e3530001 	cmp	r3, #1
    fdbc:	8a00001a 	bhi	fe2c <CUSBGamePadPS3Device::Configure()+0xa4>
    fdc0:	e3a01010 	mov	r1, #16
    fdc4:	e3a0c013 	mov	ip, #19
    fdc8:	e1a03004 	mov	r3, r4
    fdcc:	e3a02000 	mov	r2, #0
    fdd0:	e3a000ff 	mov	r0, #255	; 0xff
    fdd4:	e5841024 	str	r1, [r4, #36]	; 0x24
    fdd8:	e584c104 	str	ip, [r4, #260]	; 0x104
    fddc:	e28410c0 	add	r1, r4, #192	; 0xc0
    fde0:	e583202c 	str	r2, [r3, #44]	; 0x2c
    fde4:	e5830030 	str	r0, [r3, #48]	; 0x30
    fde8:	e283300c 	add	r3, r3, #12
    fdec:	e1530001 	cmp	r3, r1
    fdf0:	1afffffa 	bne	fde0 <CUSBGamePadPS3Device::Configure()+0x58>
    fdf4:	e1a00004 	mov	r0, r4
    fdf8:	e58420e8 	str	r2, [r4, #232]	; 0xe8
    fdfc:	ebffffbc 	bl	fcf4 <CUSBGamePadPS3Device::PS3Enable()>
    fe00:	e3500000 	cmp	r0, #0
    fe04:	0a00001a 	beq	fe74 <CUSBGamePadPS3Device::Configure()+0xec>
    fe08:	e1a00004 	mov	r0, r4
    fe0c:	e28dd00c 	add	sp, sp, #12
    fe10:	e8bd4030 	pop	{r4, r5, lr}
    fe14:	ea0009b8 	b	124fc <CUSBHIDDevice::StartRequest()>
    fe18:	e59f1074 	ldr	r1, [pc, #116]	; fe94 <CUSBGamePadPS3Device::Configure()+0x10c>
    fe1c:	ebfffeb2 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
    fe20:	e3a00000 	mov	r0, #0
    fe24:	e28dd00c 	add	sp, sp, #12
    fe28:	e8bd8030 	pop	{r4, r5, pc}
    fe2c:	eb005afc 	bl	26a24 <CLogger::Get()>
    fe30:	e1d520b0 	ldrh	r2, [r5]
    fe34:	e59f305c 	ldr	r3, [pc, #92]	; fe98 <CUSBGamePadPS3Device::Configure()+0x110>
    fe38:	e58d2000 	str	r2, [sp]
    fe3c:	e59f1050 	ldr	r1, [pc, #80]	; fe94 <CUSBGamePadPS3Device::Configure()+0x10c>
    fe40:	e3a02001 	mov	r2, #1
    fe44:	eb005a38 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fe48:	e3a00000 	mov	r0, #0
    fe4c:	e28dd00c 	add	sp, sp, #12
    fe50:	e8bd8030 	pop	{r4, r5, pc}
    fe54:	eb005af2 	bl	26a24 <CLogger::Get()>
    fe58:	e3a02001 	mov	r2, #1
    fe5c:	e59f3038 	ldr	r3, [pc, #56]	; fe9c <CUSBGamePadPS3Device::Configure()+0x114>
    fe60:	e59f102c 	ldr	r1, [pc, #44]	; fe94 <CUSBGamePadPS3Device::Configure()+0x10c>
    fe64:	eb005a30 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fe68:	e3a00000 	mov	r0, #0
    fe6c:	e28dd00c 	add	sp, sp, #12
    fe70:	e8bd8030 	pop	{r4, r5, pc}
    fe74:	eb005aea 	bl	26a24 <CLogger::Get()>
    fe78:	e3a02001 	mov	r2, #1
    fe7c:	e59f301c 	ldr	r3, [pc, #28]	; fea0 <CUSBGamePadPS3Device::Configure()+0x118>
    fe80:	e59f100c 	ldr	r1, [pc, #12]	; fe94 <CUSBGamePadPS3Device::Configure()+0x10c>
    fe84:	eb005a28 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fe88:	e3a00000 	mov	r0, #0
    fe8c:	e28dd00c 	add	sp, sp, #12
    fe90:	e8bd8030 	pop	{r4, r5, pc}
    fe94:	0003fd8c 	.word	0x0003fd8c
    fe98:	0003fcb8 	.word	0x0003fcb8
    fe9c:	0003fc98 	.word	0x0003fc98
    fea0:	0003fcd4 	.word	0x0003fcd4

0000fea4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
    fea4:	e2803f4a 	add	r3, r0, #296	; 0x128
    fea8:	e1d330b0 	ldrh	r3, [r3]
    feac:	e92d4010 	push	{r4, lr}
    feb0:	e3530031 	cmp	r3, #49	; 0x31
    feb4:	e1a0c000 	mov	ip, r0
    feb8:	e1a04001 	mov	r4, r1
    febc:	0a000007 	beq	fee0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x3c>
    fec0:	e3530032 	cmp	r3, #50	; 0x32
    fec4:	0a000044 	beq	ffdc <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x138>
    fec8:	e3530000 	cmp	r3, #0
    fecc:	0a000040 	beq	ffd4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x130>
    fed0:	e3a02092 	mov	r2, #146	; 0x92
    fed4:	e59f1118 	ldr	r1, [pc, #280]	; fff4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
    fed8:	e59f0118 	ldr	r0, [pc, #280]	; fff8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x154>
    fedc:	eb0051e8 	bl	24684 <assertion_failed>
    fee0:	e3510000 	cmp	r1, #0
    fee4:	0a00003e 	beq	ffe4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x140>
    fee8:	e5d40003 	ldrb	r0, [r4, #3]
    feec:	e5d42002 	ldrb	r2, [r4, #2]
    fef0:	e5d41004 	ldrb	r1, [r4, #4]
    fef4:	e1822400 	orr	r2, r2, r0, lsl #8
    fef8:	e5d40005 	ldrb	r0, [r4, #5]
    fefc:	e1822801 	orr	r2, r2, r1, lsl #16
    ff00:	e59f10f4 	ldr	r1, [pc, #244]	; fffc <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x158>
    ff04:	e1820c00 	orr	r0, r2, r0, lsl #24
    ff08:	e59fe0f0 	ldr	lr, [pc, #240]	; 10000 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x15c>
    ff0c:	e00112a0 	and	r1, r1, r0, lsr #5
    ff10:	e1a02682 	lsl	r2, r2, #13
    ff14:	e00e0580 	and	r0, lr, r0, lsl #11
    ff18:	e1812ea2 	orr	r2, r1, r2, lsr #29
    ff1c:	e1822000 	orr	r2, r2, r0
    ff20:	e58c2108 	str	r2, [ip, #264]	; 0x108
    ff24:	e5d42006 	ldrb	r2, [r4, #6]
    ff28:	e3a03006 	mov	r3, #6
    ff2c:	e58c2028 	str	r2, [ip, #40]	; 0x28
    ff30:	e5d41007 	ldrb	r1, [r4, #7]
    ff34:	e59fe0c8 	ldr	lr, [pc, #200]	; 10004 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x160>
    ff38:	e58c1034 	str	r1, [ip, #52]	; 0x34
    ff3c:	e5d40008 	ldrb	r0, [r4, #8]
    ff40:	e284200d 	add	r2, r4, #13
    ff44:	e58c0040 	str	r0, [ip, #64]	; 0x40
    ff48:	e5d40009 	ldrb	r0, [r4, #9]
    ff4c:	e2841019 	add	r1, r4, #25
    ff50:	e58c004c 	str	r0, [ip, #76]	; 0x4c
    ff54:	ea000000 	b	ff5c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb8>
    ff58:	e5be3004 	ldr	r3, [lr, #4]!
    ff5c:	e5f20001 	ldrb	r0, [r2, #1]!
    ff60:	e0833083 	add	r3, r3, r3, lsl #1
    ff64:	e08c3103 	add	r3, ip, r3, lsl #2
    ff68:	e1520001 	cmp	r2, r1
    ff6c:	e5830028 	str	r0, [r3, #40]	; 0x28
    ff70:	1afffff8 	bne	ff58 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb4>
    ff74:	e1d432b9 	ldrh	r3, [r4, #41]	; 0x29
    ff78:	e59f2088 	ldr	r2, [pc, #136]	; 10008 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x164>
    ff7c:	e6bf3fb3 	rev16	r3, r3
    ff80:	e6ff3073 	uxth	r3, r3
    ff84:	e0423003 	sub	r3, r2, r3
    ff88:	e58c310c 	str	r3, [ip, #268]	; 0x10c
    ff8c:	e1d432bb 	ldrh	r3, [r4, #43]	; 0x2b
    ff90:	e6bf3fb3 	rev16	r3, r3
    ff94:	e6ff3073 	uxth	r3, r3
    ff98:	e0423003 	sub	r3, r2, r3
    ff9c:	e58c3110 	str	r3, [ip, #272]	; 0x110
    ffa0:	e1d432bd 	ldrh	r3, [r4, #45]	; 0x2d
    ffa4:	e6bf3fb3 	rev16	r3, r3
    ffa8:	e6ff3073 	uxth	r3, r3
    ffac:	e0422003 	sub	r2, r2, r3
    ffb0:	e58c2114 	str	r2, [ip, #276]	; 0x114
    ffb4:	e5d4302f 	ldrb	r3, [r4, #47]	; 0x2f
    ffb8:	e5d42030 	ldrb	r2, [r4, #48]	; 0x30
    ffbc:	e1833402 	orr	r3, r3, r2, lsl #8
    ffc0:	e6bf3fb3 	rev16	r3, r3
    ffc4:	e6ff3073 	uxth	r3, r3
    ffc8:	e2433006 	sub	r3, r3, #6
    ffcc:	e58c3120 	str	r3, [ip, #288]	; 0x120
    ffd0:	e8bd8010 	pop	{r4, pc}
    ffd4:	e8bd4010 	pop	{r4, lr}
    ffd8:	ea000277 	b	109bc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
    ffdc:	e2814001 	add	r4, r1, #1
    ffe0:	eaffffc0 	b	fee8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x44>
    ffe4:	e3a02097 	mov	r2, #151	; 0x97
    ffe8:	e59f1004 	ldr	r1, [pc, #4]	; fff4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
    ffec:	e59f0018 	ldr	r0, [pc, #24]	; 1000c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x168>
    fff0:	eb0051a3 	bl	24684 <assertion_failed>
    fff4:	0003fc84 	.word	0x0003fc84
    fff8:	0003f63c 	.word	0x0003f63c
    fffc:	000007f8 	.word	0x000007f8
   10000:	0007f800 	.word	0x0007f800
   10004:	0003fd98 	.word	0x0003fd98
   10008:	000001ff 	.word	0x000001ff
   1000c:	0003fcf4 	.word	0x0003fcf4

00010010 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   10010:	e3a00000 	mov	r0, #0
   10014:	e12fff1e 	bx	lr

00010018 <CUSBGamePadPS3Device::GetProperties()>:
   10018:	e3a0001b 	mov	r0, #27
   1001c:	e12fff1e 	bx	lr

00010020 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
   10020:	e5d13001 	ldrb	r3, [r1, #1]
   10024:	e59f21a0 	ldr	r2, [pc, #416]	; 101cc <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x1ac>
   10028:	e5803028 	str	r3, [r0, #40]	; 0x28
   1002c:	e5d13002 	ldrb	r3, [r1, #2]
   10030:	e5803034 	str	r3, [r0, #52]	; 0x34
   10034:	e5d13003 	ldrb	r3, [r1, #3]
   10038:	e5803040 	str	r3, [r0, #64]	; 0x40
   1003c:	e5d13004 	ldrb	r3, [r1, #4]
   10040:	e580304c 	str	r3, [r0, #76]	; 0x4c
   10044:	e5d13008 	ldrb	r3, [r1, #8]
   10048:	e5803058 	str	r3, [r0, #88]	; 0x58
   1004c:	e5d13009 	ldrb	r3, [r1, #9]
   10050:	e5803064 	str	r3, [r0, #100]	; 0x64
   10054:	e5d13005 	ldrb	r3, [r1, #5]
   10058:	e203300f 	and	r3, r3, #15
   1005c:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   10060:	e58030ec 	str	r3, [r0, #236]	; 0xec
   10064:	e5802108 	str	r2, [r0, #264]	; 0x108
   10068:	e5d13005 	ldrb	r3, [r1, #5]
   1006c:	e3130080 	tst	r3, #128	; 0x80
   10070:	13822080 	orrne	r2, r2, #128	; 0x80
   10074:	15802108 	strne	r2, [r0, #264]	; 0x108
   10078:	e3130040 	tst	r3, #64	; 0x40
   1007c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10080:	13822c01 	orrne	r2, r2, #256	; 0x100
   10084:	15802108 	strne	r2, [r0, #264]	; 0x108
   10088:	e3130020 	tst	r3, #32
   1008c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10090:	13822c02 	orrne	r2, r2, #512	; 0x200
   10094:	15802108 	strne	r2, [r0, #264]	; 0x108
   10098:	e3130010 	tst	r3, #16
   1009c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   100a0:	13833b01 	orrne	r3, r3, #1024	; 0x400
   100a4:	15803108 	strne	r3, [r0, #264]	; 0x108
   100a8:	e5d13006 	ldrb	r3, [r1, #6]
   100ac:	e3130080 	tst	r3, #128	; 0x80
   100b0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   100b4:	13822a02 	orrne	r2, r2, #8192	; 0x2000
   100b8:	15802108 	strne	r2, [r0, #264]	; 0x108
   100bc:	e3130040 	tst	r3, #64	; 0x40
   100c0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   100c4:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   100c8:	15802108 	strne	r2, [r0, #264]	; 0x108
   100cc:	e3130020 	tst	r3, #32
   100d0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   100d4:	13822901 	orrne	r2, r2, #16384	; 0x4000
   100d8:	15802108 	strne	r2, [r0, #264]	; 0x108
   100dc:	e3130010 	tst	r3, #16
   100e0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   100e4:	13822b02 	orrne	r2, r2, #2048	; 0x800
   100e8:	15802108 	strne	r2, [r0, #264]	; 0x108
   100ec:	e3130008 	tst	r3, #8
   100f0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   100f4:	13822010 	orrne	r2, r2, #16
   100f8:	15802108 	strne	r2, [r0, #264]	; 0x108
   100fc:	e3130004 	tst	r3, #4
   10100:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10104:	13822008 	orrne	r2, r2, #8
   10108:	15802108 	strne	r2, [r0, #264]	; 0x108
   1010c:	e3130002 	tst	r3, #2
   10110:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10114:	13822040 	orrne	r2, r2, #64	; 0x40
   10118:	15802108 	strne	r2, [r0, #264]	; 0x108
   1011c:	e3130001 	tst	r3, #1
   10120:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10124:	13833020 	orrne	r3, r3, #32
   10128:	15803108 	strne	r3, [r0, #264]	; 0x108
   1012c:	e5d13007 	ldrb	r3, [r1, #7]
   10130:	e3130002 	tst	r3, #2
   10134:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10138:	13822602 	orrne	r2, r2, #2097152	; 0x200000
   1013c:	15802108 	strne	r2, [r0, #264]	; 0x108
   10140:	e3130001 	tst	r3, #1
   10144:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10148:	13833001 	orrne	r3, r3, #1
   1014c:	15803108 	strne	r3, [r0, #264]	; 0x108
   10150:	e5d12014 	ldrb	r2, [r1, #20]
   10154:	e5d13013 	ldrb	r3, [r1, #19]
   10158:	e1833402 	orr	r3, r3, r2, lsl #8
   1015c:	e6bf3073 	sxth	r3, r3
   10160:	e580310c 	str	r3, [r0, #268]	; 0x10c
   10164:	e5d12018 	ldrb	r2, [r1, #24]
   10168:	e5d13017 	ldrb	r3, [r1, #23]
   1016c:	e1833402 	orr	r3, r3, r2, lsl #8
   10170:	e6bf3073 	sxth	r3, r3
   10174:	e5803110 	str	r3, [r0, #272]	; 0x110
   10178:	e5d12016 	ldrb	r2, [r1, #22]
   1017c:	e5d13015 	ldrb	r3, [r1, #21]
   10180:	e1833402 	orr	r3, r3, r2, lsl #8
   10184:	e6bf3073 	sxth	r3, r3
   10188:	e5803114 	str	r3, [r0, #276]	; 0x114
   1018c:	e5d12012 	ldrb	r2, [r1, #18]
   10190:	e5d13011 	ldrb	r3, [r1, #17]
   10194:	e1833402 	orr	r3, r3, r2, lsl #8
   10198:	e6bf3073 	sxth	r3, r3
   1019c:	e5803118 	str	r3, [r0, #280]	; 0x118
   101a0:	e5d1200e 	ldrb	r2, [r1, #14]
   101a4:	e5d1300d 	ldrb	r3, [r1, #13]
   101a8:	e1833402 	orr	r3, r3, r2, lsl #8
   101ac:	e6bf3073 	sxth	r3, r3
   101b0:	e580311c 	str	r3, [r0, #284]	; 0x11c
   101b4:	e5d1300f 	ldrb	r3, [r1, #15]
   101b8:	e5d12010 	ldrb	r2, [r1, #16]
   101bc:	e1833402 	orr	r3, r3, r2, lsl #8
   101c0:	e6bf3073 	sxth	r3, r3
   101c4:	e5803120 	str	r3, [r0, #288]	; 0x120
   101c8:	e12fff1e 	bx	lr
   101cc:	0003fe10 	.word	0x0003fe10

000101d0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   101d0:	e92d4010 	push	{r4, lr}
   101d4:	e1a04000 	mov	r4, r0
   101d8:	e5900140 	ldr	r0, [r0, #320]	; 0x140
   101dc:	e59f3034 	ldr	r3, [pc, #52]	; 10218 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x48>
   101e0:	e3500000 	cmp	r0, #0
   101e4:	e5843000 	str	r3, [r4]
   101e8:	0a000002 	beq	101f8 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
   101ec:	e5903000 	ldr	r3, [r0]
   101f0:	e5933004 	ldr	r3, [r3, #4]
   101f4:	e12fff33 	blx	r3
   101f8:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   101fc:	e3500000 	cmp	r0, #0
   10200:	0a000000 	beq	10208 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
   10204:	eb006b32 	bl	2aed4 <operator delete[](void*)>
   10208:	e1a00004 	mov	r0, r4
   1020c:	eb001e80 	bl	17c14 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10210:	e1a00004 	mov	r0, r4
   10214:	e8bd8010 	pop	{r4, pc}
   10218:	0003fe3c 	.word	0x0003fe3c

0001021c <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   1021c:	e92d4010 	push	{r4, lr}
   10220:	e1a04000 	mov	r4, r0
   10224:	ebffffe9 	bl	101d0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>
   10228:	e1a00004 	mov	r0, r4
   1022c:	e3a01f53 	mov	r1, #332	; 0x14c
   10230:	eb006b28 	bl	2aed8 <operator delete(void*, unsigned int)>
   10234:	e1a00004 	mov	r0, r4
   10238:	e8bd8010 	pop	{r4, pc}

0001023c <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
   1023c:	e92d4010 	push	{r4, lr}
   10240:	e1a04000 	mov	r4, r0
   10244:	eb001e61 	bl	17bd0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   10248:	e3a03000 	mov	r3, #0
   1024c:	e59f2030 	ldr	r2, [pc, #48]	; 10284 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)+0x48>
   10250:	e1a00004 	mov	r0, r4
   10254:	e5842000 	str	r2, [r4]
   10258:	e3a01003 	mov	r1, #3
   1025c:	e1a02003 	mov	r2, r3
   10260:	ebfffdb4 	bl	f938 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   10264:	e3a03000 	mov	r3, #0
   10268:	e2842f51 	add	r2, r4, #324	; 0x144
   1026c:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   10270:	e584313c 	str	r3, [r4, #316]	; 0x13c
   10274:	e5843140 	str	r3, [r4, #320]	; 0x140
   10278:	e1a00004 	mov	r0, r4
   1027c:	e1c230b0 	strh	r3, [r2]
   10280:	e8bd8010 	pop	{r4, pc}
   10284:	0003fe3c 	.word	0x0003fe3c

00010288 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
   10288:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1028c:	e5d13007 	ldrb	r3, [r1, #7]
   10290:	e1a06001 	mov	r6, r1
   10294:	e3130002 	tst	r3, #2
   10298:	e1a05000 	mov	r5, r0
   1029c:	1a00004f 	bne	103e0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x158>
   102a0:	e5d00144 	ldrb	r0, [r0, #324]	; 0x144
   102a4:	e3500000 	cmp	r0, #0
   102a8:	1a000050 	bne	103f0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x168>
   102ac:	e3a04000 	mov	r4, #0
   102b0:	e5d67021 	ldrb	r7, [r6, #33]	; 0x21
   102b4:	e1a09004 	mov	r9, r4
   102b8:	e2473001 	sub	r3, r7, #1
   102bc:	e3530003 	cmp	r3, #3
   102c0:	23a07001 	movcs	r7, #1
   102c4:	e2858f51 	add	r8, r5, #324	; 0x144
   102c8:	ea00001a 	b	10338 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb0>
   102cc:	e5d53145 	ldrb	r3, [r5, #325]	; 0x145
   102d0:	e3530000 	cmp	r3, #0
   102d4:	1a000029 	bne	10380 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xf8>
   102d8:	e5d12006 	ldrb	r2, [r1, #6]
   102dc:	e5d1e005 	ldrb	lr, [r1, #5]
   102e0:	e5d1c004 	ldrb	ip, [r1, #4]
   102e4:	e1a01202 	lsl	r1, r2, #4
   102e8:	e1a02003 	mov	r2, r3
   102ec:	e20ea00f 	and	sl, lr, #15
   102f0:	e18cc40a 	orr	ip, ip, sl, lsl #8
   102f4:	e181122e 	orr	r1, r1, lr, lsr #4
   102f8:	e285af52 	add	sl, r5, #328	; 0x148
   102fc:	e3500000 	cmp	r0, #0
   10300:	e3a00001 	mov	r0, #1
   10304:	e5c50145 	strb	r0, [r5, #325]	; 0x145
   10308:	e1c8c0b2 	strh	ip, [r8, #2]
   1030c:	e1ca10b0 	strh	r1, [sl]
   10310:	0a000004 	beq	10328 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xa0>
   10314:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   10318:	e3500000 	cmp	r0, #0
   1031c:	0a000013 	beq	10370 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xe8>
   10320:	e5d51144 	ldrb	r1, [r5, #324]	; 0x144
   10324:	eb0021a5 	bl	189c0 <CMouseDevice::ReportHandler(unsigned int, int, int)>
   10328:	e2844001 	add	r4, r4, #1
   1032c:	e1570004 	cmp	r7, r4
   10330:	e3a00000 	mov	r0, #0
   10334:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10338:	e0843184 	add	r3, r4, r4, lsl #3
   1033c:	e0863003 	add	r3, r6, r3
   10340:	e5d32023 	ldrb	r2, [r3, #35]	; 0x23
   10344:	e2831020 	add	r1, r3, #32
   10348:	e1b033a2 	lsrs	r3, r2, #7
   1034c:	0affffde 	beq	102cc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x44>
   10350:	e3500000 	cmp	r0, #0
   10354:	e5c59145 	strb	r9, [r5, #325]	; 0x145
   10358:	0afffff2 	beq	10328 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xa0>
   1035c:	e3a03000 	mov	r3, #0
   10360:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   10364:	e1a02003 	mov	r2, r3
   10368:	e3500000 	cmp	r0, #0
   1036c:	1affffeb 	bne	10320 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x98>
   10370:	e59f208c 	ldr	r2, [pc, #140]	; 10404 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x17c>
   10374:	e59f108c 	ldr	r1, [pc, #140]	; 10408 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x180>
   10378:	e59f008c 	ldr	r0, [pc, #140]	; 1040c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x184>
   1037c:	eb0050c0 	bl	24684 <assertion_failed>
   10380:	e5d1b005 	ldrb	fp, [r1, #5]
   10384:	e5d1c004 	ldrb	ip, [r1, #4]
   10388:	e20b300f 	and	r3, fp, #15
   1038c:	e1d820b2 	ldrh	r2, [r8, #2]
   10390:	e18cc403 	orr	ip, ip, r3, lsl #8
   10394:	e04c2002 	sub	r2, ip, r2
   10398:	e352007f 	cmp	r2, #127	; 0x7f
   1039c:	e3e0e07e 	mvn	lr, #126	; 0x7e
   103a0:	a3a0207f 	movge	r2, #127	; 0x7f
   103a4:	e5d11006 	ldrb	r1, [r1, #6]
   103a8:	e285af52 	add	sl, r5, #328	; 0x148
   103ac:	e1da30b0 	ldrh	r3, [sl]
   103b0:	e1a01201 	lsl	r1, r1, #4
   103b4:	e181122b 	orr	r1, r1, fp, lsr #4
   103b8:	e0413003 	sub	r3, r1, r3
   103bc:	e152000e 	cmp	r2, lr
   103c0:	b1a0200e 	movlt	r2, lr
   103c4:	e353007f 	cmp	r3, #127	; 0x7f
   103c8:	a3a0307f 	movge	r3, #127	; 0x7f
   103cc:	e153000e 	cmp	r3, lr
   103d0:	b1a0300e 	movlt	r3, lr
   103d4:	e192e003 	orrs	lr, r2, r3
   103d8:	13800001 	orrne	r0, r0, #1
   103dc:	eaffffc6 	b	102fc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x74>
   103e0:	e5d02144 	ldrb	r2, [r0, #324]	; 0x144
   103e4:	e3520000 	cmp	r2, #0
   103e8:	13a00000 	movne	r0, #0
   103ec:	1affffae 	bne	102ac <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x24>
   103f0:	e1a030a3 	lsr	r3, r3, #1
   103f4:	e2033001 	and	r3, r3, #1
   103f8:	e3a00001 	mov	r0, #1
   103fc:	e5c53144 	strb	r3, [r5, #324]	; 0x144
   10400:	eaffffa9 	b	102ac <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x24>
   10404:	0000015a 	.word	0x0000015a
   10408:	0003fdc8 	.word	0x0003fdc8
   1040c:	0003fddc 	.word	0x0003fddc

00010410 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
   10410:	e2422040 	sub	r2, r2, #64	; 0x40
   10414:	e16f2f12 	clz	r2, r2
   10418:	e3510000 	cmp	r1, #0
   1041c:	e1a022a2 	lsr	r2, r2, #5
   10420:	03a02000 	moveq	r2, #0
   10424:	e3520000 	cmp	r2, #0
   10428:	012fff1e 	bxeq	lr
   1042c:	e92d4070 	push	{r4, r5, r6, lr}
   10430:	e1a04000 	mov	r4, r0
   10434:	e5903000 	ldr	r3, [r0]
   10438:	e1a05001 	mov	r5, r1
   1043c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   10440:	e12fff33 	blx	r3
   10444:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   10448:	e3530000 	cmp	r3, #0
   1044c:	0a000003 	beq	10460 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x50>
   10450:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   10454:	e2841024 	add	r1, r4, #36	; 0x24
   10458:	e2400001 	sub	r0, r0, #1
   1045c:	e12fff33 	blx	r3
   10460:	e5943140 	ldr	r3, [r4, #320]	; 0x140
   10464:	e3530000 	cmp	r3, #0
   10468:	08bd8070 	popeq	{r4, r5, r6, pc}
   1046c:	e1a01005 	mov	r1, r5
   10470:	e1a00004 	mov	r0, r4
   10474:	e8bd4070 	pop	{r4, r5, r6, lr}
   10478:	eaffff82 	b	10288 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>

0001047c <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
   1047c:	e92d4010 	push	{r4, lr}
   10480:	e590213c 	ldr	r2, [r0, #316]	; 0x13c
   10484:	e5d0c131 	ldrb	ip, [r0, #305]	; 0x131
   10488:	e3a03000 	mov	r3, #0
   1048c:	e5c2c003 	strb	ip, [r2, #3]
   10490:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10494:	e5d0e133 	ldrb	lr, [r0, #307]	; 0x133
   10498:	e3a02020 	mov	r2, #32
   1049c:	e5cce004 	strb	lr, [ip, #4]
   104a0:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   104a4:	e5d0e132 	ldrb	lr, [r0, #306]	; 0x132
   104a8:	e5cce005 	strb	lr, [ip, #5]
   104ac:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   104b0:	e5d0e134 	ldrb	lr, [r0, #308]	; 0x134
   104b4:	e5cce006 	strb	lr, [ip, #6]
   104b8:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   104bc:	e5d0e135 	ldrb	lr, [r0, #309]	; 0x135
   104c0:	e5cce007 	strb	lr, [ip, #7]
   104c4:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   104c8:	e5d0e136 	ldrb	lr, [r0, #310]	; 0x136
   104cc:	e5cce008 	strb	lr, [ip, #8]
   104d0:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   104d4:	e5d0e137 	ldrb	lr, [r0, #311]	; 0x137
   104d8:	e5cce009 	strb	lr, [ip, #9]
   104dc:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   104e0:	e5d0e138 	ldrb	lr, [r0, #312]	; 0x138
   104e4:	e5cce00a 	strb	lr, [ip, #10]
   104e8:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   104ec:	eb000779 	bl	122d8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   104f0:	e2504000 	subs	r4, r0, #0
   104f4:	0a000001 	beq	10500 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x84>
   104f8:	e1a00004 	mov	r0, r4
   104fc:	e8bd8010 	pop	{r4, pc}
   10500:	eb005947 	bl	26a24 <CLogger::Get()>
   10504:	e3a02001 	mov	r2, #1
   10508:	e59f300c 	ldr	r3, [pc, #12]	; 1051c <CUSBGamePadPS4Device::SendLedRumbleCommand()+0xa0>
   1050c:	e59f100c 	ldr	r1, [pc, #12]	; 10520 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0xa4>
   10510:	eb005885 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10514:	e1a00004 	mov	r0, r4
   10518:	e8bd8010 	pop	{r4, pc}
   1051c:	0003fdf0 	.word	0x0003fdf0
   10520:	0003fe80 	.word	0x0003fe80

00010524 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
   10524:	e2411001 	sub	r1, r1, #1
   10528:	e3510006 	cmp	r1, #6
   1052c:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   10530:	ea000029 	b	105dc <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xb8>
   10534:	00010564 	.word	0x00010564
   10538:	00010578 	.word	0x00010578
   1053c:	0001058c 	.word	0x0001058c
   10540:	000105a0 	.word	0x000105a0
   10544:	000105b4 	.word	0x000105b4
   10548:	000105c8 	.word	0x000105c8
   1054c:	00010550 	.word	0x00010550
   10550:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
   10554:	e3e03000 	mvn	r3, #0
   10558:	e5802134 	str	r2, [r0, #308]	; 0x134
   1055c:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   10560:	eaffffc5 	b	1047c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10564:	e3e02000 	mvn	r2, #0
   10568:	e59f307c 	ldr	r3, [pc, #124]	; 105ec <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xc8>
   1056c:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   10570:	e5803134 	str	r3, [r0, #308]	; 0x134
   10574:	eaffffc0 	b	1047c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10578:	e3e02000 	mvn	r2, #0
   1057c:	e59f306c 	ldr	r3, [pc, #108]	; 105f0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xcc>
   10580:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   10584:	e5803134 	str	r3, [r0, #308]	; 0x134
   10588:	eaffffbb 	b	1047c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1058c:	e3e02000 	mvn	r2, #0
   10590:	e59f305c 	ldr	r3, [pc, #92]	; 105f4 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xd0>
   10594:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   10598:	e5803134 	str	r3, [r0, #308]	; 0x134
   1059c:	eaffffb6 	b	1047c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   105a0:	e3e02000 	mvn	r2, #0
   105a4:	e59f304c 	ldr	r3, [pc, #76]	; 105f8 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xd4>
   105a8:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   105ac:	e5803134 	str	r3, [r0, #308]	; 0x134
   105b0:	eaffffb1 	b	1047c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   105b4:	e3e02000 	mvn	r2, #0
   105b8:	e59f303c 	ldr	r3, [pc, #60]	; 105fc <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xd8>
   105bc:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   105c0:	e5803134 	str	r3, [r0, #308]	; 0x134
   105c4:	eaffffac 	b	1047c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   105c8:	e3e02000 	mvn	r2, #0
   105cc:	e59f302c 	ldr	r3, [pc, #44]	; 10600 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xdc>
   105d0:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   105d4:	e5803134 	str	r3, [r0, #308]	; 0x134
   105d8:	eaffffa7 	b	1047c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   105dc:	e3a03000 	mov	r3, #0
   105e0:	e5803134 	str	r3, [r0, #308]	; 0x134
   105e4:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   105e8:	eaffffdc 	b	10560 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x3c>
   105ec:	7fff0000 	.word	0x7fff0000
   105f0:	7f0000ff 	.word	0x7f0000ff
   105f4:	7fff00ff 	.word	0x7fff00ff
   105f8:	7f00ff00 	.word	0x7f00ff00
   105fc:	7fffff00 	.word	0x7fffff00
   10600:	7f00ffff 	.word	0x7f00ffff

00010604 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   10604:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   10608:	e1a0e821 	lsr	lr, r1, #16
   1060c:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   10610:	e1a02421 	lsr	r2, r1, #8
   10614:	e5c01136 	strb	r1, [r0, #310]	; 0x136
   10618:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   1061c:	e5c0e134 	strb	lr, [r0, #308]	; 0x134
   10620:	e5c02135 	strb	r2, [r0, #309]	; 0x135
   10624:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   10628:	eaffff93 	b	1047c <CUSBGamePadPS4Device::SendLedRumbleCommand()>

0001062c <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
   1062c:	e3510001 	cmp	r1, #1
   10630:	0a000005 	beq	1064c <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x20>
   10634:	e3510002 	cmp	r1, #2
   10638:	0a00000e 	beq	10678 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x4c>
   1063c:	e3510000 	cmp	r1, #0
   10640:	0a000007 	beq	10664 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x38>
   10644:	e3a00001 	mov	r0, #1
   10648:	e12fff1e 	bx	lr
   1064c:	e3e0100c 	mvn	r1, #12
   10650:	e3a02cff 	mov	r2, #65280	; 0xff00
   10654:	e2803e13 	add	r3, r0, #304	; 0x130
   10658:	e5c01131 	strb	r1, [r0, #305]	; 0x131
   1065c:	e1c320b2 	strh	r2, [r3, #2]
   10660:	eaffff85 	b	1047c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10664:	e3e0200f 	mvn	r2, #15
   10668:	e2803e13 	add	r3, r0, #304	; 0x130
   1066c:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   10670:	e1c310b2 	strh	r1, [r3, #2]
   10674:	eaffff80 	b	1047c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10678:	e3e0100c 	mvn	r1, #12
   1067c:	e3a020ff 	mov	r2, #255	; 0xff
   10680:	e2803e13 	add	r3, r0, #304	; 0x130
   10684:	e5c01131 	strb	r1, [r0, #305]	; 0x131
   10688:	e1c320b2 	strh	r2, [r3, #2]
   1068c:	eaffff7a 	b	1047c <CUSBGamePadPS4Device::SendLedRumbleCommand()>

00010690 <CUSBGamePadPS4Device::DisableTouchpad()>:
   10690:	e3a02000 	mov	r2, #0
   10694:	e59f3004 	ldr	r3, [pc, #4]	; 106a0 <CUSBGamePadPS4Device::DisableTouchpad()+0x10>
   10698:	e5c32000 	strb	r2, [r3]
   1069c:	e12fff1e 	bx	lr
   106a0:	00047828 	.word	0x00047828

000106a4 <CUSBGamePadPS4Device::Configure()>:
   106a4:	e5d03130 	ldrb	r3, [r0, #304]	; 0x130
   106a8:	e92d4070 	push	{r4, r5, r6, lr}
   106ac:	e3530000 	cmp	r3, #0
   106b0:	0a00003c 	beq	107a8 <CUSBGamePadPS4Device::Configure()+0x104>
   106b4:	e3a02040 	mov	r2, #64	; 0x40
   106b8:	e2803f4a 	add	r3, r0, #296	; 0x128
   106bc:	e1c320b0 	strh	r2, [r3]
   106c0:	e1a04000 	mov	r4, r0
   106c4:	eb001d16 	bl	17b24 <CUSBGamePadDevice::Configure()>
   106c8:	e3500000 	cmp	r0, #0
   106cc:	0a00003f 	beq	107d0 <CUSBGamePadPS4Device::Configure()+0x12c>
   106d0:	e59f3114 	ldr	r3, [pc, #276]	; 107ec <CUSBGamePadPS4Device::Configure()+0x148>
   106d4:	e5d33000 	ldrb	r3, [r3]
   106d8:	e3530000 	cmp	r3, #0
   106dc:	1a000035 	bne	107b8 <CUSBGamePadPS4Device::Configure()+0x114>
   106e0:	e3a02006 	mov	r2, #6
   106e4:	e3a0c00e 	mov	ip, #14
   106e8:	e3a00001 	mov	r0, #1
   106ec:	e1a03004 	mov	r3, r4
   106f0:	e3a05000 	mov	r5, #0
   106f4:	e3a010ff 	mov	r1, #255	; 0xff
   106f8:	e5842024 	str	r2, [r4, #36]	; 0x24
   106fc:	e584c104 	str	ip, [r4, #260]	; 0x104
   10700:	e58400e8 	str	r0, [r4, #232]	; 0xe8
   10704:	e2842048 	add	r2, r4, #72	; 0x48
   10708:	e583502c 	str	r5, [r3, #44]	; 0x2c
   1070c:	e5831030 	str	r1, [r3, #48]	; 0x30
   10710:	e283300c 	add	r3, r3, #12
   10714:	e1530002 	cmp	r3, r2
   10718:	1afffffa 	bne	10708 <CUSBGamePadPS4Device::Configure()+0x64>
   1071c:	e3a00020 	mov	r0, #32
   10720:	eb0069e4 	bl	2aeb8 <operator new[](unsigned int)>
   10724:	e3a06005 	mov	r6, #5
   10728:	e3a02020 	mov	r2, #32
   1072c:	e3a01000 	mov	r1, #0
   10730:	e584013c 	str	r0, [r4, #316]	; 0x13c
   10734:	eb0065aa 	bl	29de4 <memset>
   10738:	e3a0e007 	mov	lr, #7
   1073c:	e3a0c004 	mov	ip, #4
   10740:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
   10744:	e3e03000 	mvn	r3, #0
   10748:	e3e0000f 	mvn	r0, #15
   1074c:	e594113c 	ldr	r1, [r4, #316]	; 0x13c
   10750:	e5c16000 	strb	r6, [r1]
   10754:	e594113c 	ldr	r1, [r4, #316]	; 0x13c
   10758:	e5c1e001 	strb	lr, [r1, #1]
   1075c:	e594113c 	ldr	r1, [r4, #316]	; 0x13c
   10760:	e5c1c002 	strb	ip, [r1, #2]
   10764:	e2841e13 	add	r1, r4, #304	; 0x130
   10768:	e5c40131 	strb	r0, [r4, #305]	; 0x131
   1076c:	e1c150b2 	strh	r5, [r1, #2]
   10770:	e1a00004 	mov	r0, r4
   10774:	e5842134 	str	r2, [r4, #308]	; 0x134
   10778:	e5c43138 	strb	r3, [r4, #312]	; 0x138
   1077c:	ebffff3e 	bl	1047c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10780:	e2843f4d 	add	r3, r4, #308	; 0x134
   10784:	e1c350b0 	strh	r5, [r3]
   10788:	e3a000fa 	mov	r0, #250	; 0xfa
   1078c:	e5c45136 	strb	r5, [r4, #310]	; 0x136
   10790:	eb006552 	bl	29ce0 <CTimer::SimpleMsDelay(unsigned int)>
   10794:	e1a00004 	mov	r0, r4
   10798:	ebffff37 	bl	1047c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1079c:	e1a00004 	mov	r0, r4
   107a0:	e8bd4070 	pop	{r4, r5, r6, lr}
   107a4:	ea000754 	b	124fc <CUSBHIDDevice::StartRequest()>
   107a8:	e59f1040 	ldr	r1, [pc, #64]	; 107f0 <CUSBGamePadPS4Device::Configure()+0x14c>
   107ac:	ebfffc4e 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   107b0:	e3a00000 	mov	r0, #0
   107b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   107b8:	e3a00028 	mov	r0, #40	; 0x28
   107bc:	eb0069b7 	bl	2aea0 <operator new(unsigned int)>
   107c0:	e1a05000 	mov	r5, r0
   107c4:	eb002043 	bl	188d8 <CMouseDevice::CMouseDevice()>
   107c8:	e5845140 	str	r5, [r4, #320]	; 0x140
   107cc:	eaffffc3 	b	106e0 <CUSBGamePadPS4Device::Configure()+0x3c>
   107d0:	eb005893 	bl	26a24 <CLogger::Get()>
   107d4:	e3a02001 	mov	r2, #1
   107d8:	e59f3014 	ldr	r3, [pc, #20]	; 107f4 <CUSBGamePadPS4Device::Configure()+0x150>
   107dc:	e59f100c 	ldr	r1, [pc, #12]	; 107f0 <CUSBGamePadPS4Device::Configure()+0x14c>
   107e0:	eb0057d1 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   107e4:	e3a00000 	mov	r0, #0
   107e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   107ec:	00047828 	.word	0x00047828
   107f0:	0003fe80 	.word	0x0003fe80
   107f4:	0003fc98 	.word	0x0003fc98

000107f8 <CUSBGamePadPS4Device::GetProperties()>:
   107f8:	e3a0003f 	mov	r0, #63	; 0x3f
   107fc:	e12fff1e 	bx	lr

00010800 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   10800:	e92d4010 	push	{r4, lr}
   10804:	e1a04000 	mov	r4, r0
   10808:	e5900134 	ldr	r0, [r0, #308]	; 0x134
   1080c:	e59f3024 	ldr	r3, [pc, #36]	; 10838 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x38>
   10810:	e3500000 	cmp	r0, #0
   10814:	e5843000 	str	r3, [r4]
   10818:	0a000000 	beq	10820 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
   1081c:	eb0069ac 	bl	2aed4 <operator delete[](void*)>
   10820:	e3a03000 	mov	r3, #0
   10824:	e1a00004 	mov	r0, r4
   10828:	e5843134 	str	r3, [r4, #308]	; 0x134
   1082c:	eb001cf8 	bl	17c14 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10830:	e1a00004 	mov	r0, r4
   10834:	e8bd8010 	pop	{r4, pc}
   10838:	0003ff00 	.word	0x0003ff00

0001083c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   1083c:	e92d4010 	push	{r4, lr}
   10840:	e1a04000 	mov	r4, r0
   10844:	ebffffed 	bl	10800 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   10848:	e1a00004 	mov	r0, r4
   1084c:	e3a01f4f 	mov	r1, #316	; 0x13c
   10850:	eb0069a0 	bl	2aed8 <operator delete(void*, unsigned int)>
   10854:	e1a00004 	mov	r0, r4
   10858:	e8bd8010 	pop	{r4, pc}

0001085c <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
   1085c:	e92d4070 	push	{r4, r5, r6, lr}
   10860:	e1a04000 	mov	r4, r0
   10864:	e1a05002 	mov	r5, r2
   10868:	eb001cd8 	bl	17bd0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   1086c:	e3a03000 	mov	r3, #0
   10870:	e59f1018 	ldr	r1, [pc, #24]	; 10890 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)+0x34>
   10874:	e2842f4e 	add	r2, r4, #312	; 0x138
   10878:	e5c45130 	strb	r5, [r4, #304]	; 0x130
   1087c:	e5841000 	str	r1, [r4]
   10880:	e5843134 	str	r3, [r4, #308]	; 0x134
   10884:	e1a00004 	mov	r0, r4
   10888:	e1c230b0 	strh	r3, [r2]
   1088c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10890:	0003ff00 	.word	0x0003ff00

00010894 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   10894:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10898:	e0819002 	add	r9, r1, r2
   1089c:	e2895007 	add	r5, r9, #7
   108a0:	e1a051a5 	lsr	r5, r5, #3
   108a4:	e15501a1 	cmp	r5, r1, lsr #3
   108a8:	e24dd00c 	sub	sp, sp, #12
   108ac:	9a000035 	bls	10988 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xf4>
   108b0:	e3a07001 	mov	r7, #1
   108b4:	e3a04000 	mov	r4, #0
   108b8:	e201e007 	and	lr, r1, #7
   108bc:	e08e6002 	add	r6, lr, r2
   108c0:	e1a06617 	lsl	r6, r7, r6
   108c4:	e6ef6076 	uxtb	r6, r6
   108c8:	e1a07e17 	lsl	r7, r7, lr
   108cc:	e6ef7077 	uxtb	r7, r7
   108d0:	e246a001 	sub	sl, r6, #1
   108d4:	e1a0c1a1 	lsr	ip, r1, #3
   108d8:	e0466007 	sub	r6, r6, r7
   108dc:	e2491001 	sub	r1, r9, #1
   108e0:	e2677000 	rsb	r7, r7, #0
   108e4:	e6ef907a 	uxtb	r9, sl
   108e8:	e1a08000 	mov	r8, r0
   108ec:	e1a0300c 	mov	r3, ip
   108f0:	e1a00004 	mov	r0, r4
   108f4:	e1a011a1 	lsr	r1, r1, #3
   108f8:	e58d9004 	str	r9, [sp, #4]
   108fc:	e6ef6076 	uxtb	r6, r6
   10900:	e6ef7077 	uxtb	r7, r7
   10904:	e26eb008 	rsb	fp, lr, #8
   10908:	ea00000d 	b	10944 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb0>
   1090c:	e15c0003 	cmp	ip, r3
   10910:	0a000015 	beq	1096c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>
   10914:	e1510003 	cmp	r1, r3
   10918:	07d89001 	ldrbeq	r9, [r8, r1]
   1091c:	059da004 	ldreq	sl, [sp, #4]
   10920:	17d8a003 	ldrbne	sl, [r8, r3]
   10924:	12844008 	addne	r4, r4, #8
   10928:	0009900a 	andeq	r9, r9, sl
   1092c:	10429004 	subne	r9, r2, r4
   10930:	01800009 	orreq	r0, r0, r9
   10934:	1180091a 	orrne	r0, r0, sl, lsl r9
   10938:	e2833001 	add	r3, r3, #1
   1093c:	e1530005 	cmp	r3, r5
   10940:	0a000007 	beq	10964 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd0>
   10944:	e151000c 	cmp	r1, ip
   10948:	1affffef 	bne	1090c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x78>
   1094c:	e7d80003 	ldrb	r0, [r8, r3]
   10950:	e2833001 	add	r3, r3, #1
   10954:	e0000006 	and	r0, r0, r6
   10958:	e1530005 	cmp	r3, r5
   1095c:	e1a00e50 	asr	r0, r0, lr
   10960:	1afffff7 	bne	10944 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb0>
   10964:	e28dd00c 	add	sp, sp, #12
   10968:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1096c:	e7d8000c 	ldrb	r0, [r8, ip]
   10970:	e084400b 	add	r4, r4, fp
   10974:	e0000007 	and	r0, r0, r7
   10978:	e1a00e50 	asr	r0, r0, lr
   1097c:	e0429004 	sub	r9, r2, r4
   10980:	e1a00910 	lsl	r0, r0, r9
   10984:	eaffffeb 	b	10938 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa4>
   10988:	e3a00000 	mov	r0, #0
   1098c:	e28dd00c 	add	sp, sp, #12
   10990:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010994 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   10994:	e92d4010 	push	{r4, lr}
   10998:	e1a04002 	mov	r4, r2
   1099c:	ebffffbc 	bl	10894 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   109a0:	e3a03001 	mov	r3, #1
   109a4:	e2422001 	sub	r2, r2, #1
   109a8:	e0102213 	ands	r2, r0, r3, lsl r2
   109ac:	11a03413 	lslne	r3, r3, r4
   109b0:	12633000 	rsbne	r3, r3, #0
   109b4:	11800003 	orrne	r0, r0, r3
   109b8:	e8bd8010 	pop	{r4, pc}

000109bc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
   109bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109c0:	e5905134 	ldr	r5, [r0, #308]	; 0x134
   109c4:	e24dd034 	sub	sp, sp, #52	; 0x34
   109c8:	e3550000 	cmp	r5, #0
   109cc:	e58d0010 	str	r0, [sp, #16]
   109d0:	0a000099 	beq	10c3c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x280>
   109d4:	e59d3010 	ldr	r3, [sp, #16]
   109d8:	e2833f4e 	add	r3, r3, #312	; 0x138
   109dc:	e1d340b0 	ldrh	r4, [r3]
   109e0:	e3540000 	cmp	r4, #0
   109e4:	0a0000f4 	beq	10dbc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x400>
   109e8:	e3a09000 	mov	r9, #0
   109ec:	e59fb3e0 	ldr	fp, [pc, #992]	; 10dd4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x418>
   109f0:	ee071a90 	vmov	s15, r1
   109f4:	e1a0a009 	mov	sl, r9
   109f8:	e1a07009 	mov	r7, r9
   109fc:	e1a06009 	mov	r6, r9
   10a00:	e58db008 	str	fp, [sp, #8]
   10a04:	e58d901c 	str	r9, [sp, #28]
   10a08:	e58d9018 	str	r9, [sp, #24]
   10a0c:	e58d9004 	str	r9, [sp, #4]
   10a10:	e58db014 	str	fp, [sp, #20]
   10a14:	e58db00c 	str	fp, [sp, #12]
   10a18:	ea000007 	b	10a3c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x80>
   10a1c:	e3530014 	cmp	r3, #20
   10a20:	058d800c 	streq	r8, [sp, #12]
   10a24:	0a000002 	beq	10a34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10a28:	da000033 	ble	10afc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x140>
   10a2c:	e3530024 	cmp	r3, #36	; 0x24
   10a30:	01a0b008 	moveq	fp, r8
   10a34:	e3540000 	cmp	r4, #0
   10a38:	0a000022 	beq	10ac8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x10c>
   10a3c:	e1d530d0 	ldrsb	r3, [r5]
   10a40:	e2038003 	and	r8, r3, #3
   10a44:	e3580001 	cmp	r8, #1
   10a48:	0a000055 	beq	10ba4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e8>
   10a4c:	e3580002 	cmp	r8, #2
   10a50:	0a00004c 	beq	10b88 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1cc>
   10a54:	e3580000 	cmp	r8, #0
   10a58:	02444001 	subeq	r4, r4, #1
   10a5c:	06ff4074 	uxtheq	r4, r4
   10a60:	02855001 	addeq	r5, r5, #1
   10a64:	0a00000a 	beq	10a94 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xd8>
   10a68:	e1d580d3 	ldrsb	r8, [r5, #3]
   10a6c:	e1d520d2 	ldrsb	r2, [r5, #2]
   10a70:	e1d510d1 	ldrsb	r1, [r5, #1]
   10a74:	e1a08808 	lsl	r8, r8, #16
   10a78:	e1888402 	orr	r8, r8, r2, lsl #8
   10a7c:	e1d520d4 	ldrsb	r2, [r5, #4]
   10a80:	e2444005 	sub	r4, r4, #5
   10a84:	e1888001 	orr	r8, r8, r1
   10a88:	e6ff4074 	uxth	r4, r4
   10a8c:	e1888c02 	orr	r8, r8, r2, lsl #24
   10a90:	e2855005 	add	r5, r5, #5
   10a94:	e20330fc 	and	r3, r3, #252	; 0xfc
   10a98:	e3530084 	cmp	r3, #132	; 0x84
   10a9c:	0a00002c 	beq	10b54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x198>
   10aa0:	e3530034 	cmp	r3, #52	; 0x34
   10aa4:	0a000043 	beq	10bb8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1fc>
   10aa8:	daffffdb 	ble	10a1c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10aac:	e3530080 	cmp	r3, #128	; 0x80
   10ab0:	0a000042 	beq	10bc0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10ab4:	da000016 	ble	10b14 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x158>
   10ab8:	e3530094 	cmp	r3, #148	; 0x94
   10abc:	01a07008 	moveq	r7, r8
   10ac0:	e3540000 	cmp	r4, #0
   10ac4:	1affffdc 	bne	10a3c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x80>
   10ac8:	e59d3004 	ldr	r3, [sp, #4]
   10acc:	e2834007 	add	r4, r3, #7
   10ad0:	e1a041a4 	lsr	r4, r4, #3
   10ad4:	e6ff4074 	uxth	r4, r4
   10ad8:	e59d2010 	ldr	r2, [sp, #16]
   10adc:	e59d1018 	ldr	r1, [sp, #24]
   10ae0:	e2823f4a 	add	r3, r2, #296	; 0x128
   10ae4:	e5821024 	str	r1, [r2, #36]	; 0x24
   10ae8:	e59d101c 	ldr	r1, [sp, #28]
   10aec:	e58210e8 	str	r1, [r2, #232]	; 0xe8
   10af0:	e1c340b0 	strh	r4, [r3]
   10af4:	e28dd034 	add	sp, sp, #52	; 0x34
   10af8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10afc:	e3530004 	cmp	r3, #4
   10b00:	1a000009 	bne	10b2c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x170>
   10b04:	e3590001 	cmp	r9, #1
   10b08:	03580009 	cmpeq	r8, #9
   10b0c:	03a09002 	moveq	r9, #2
   10b10:	eaffffc7 	b	10a34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10b14:	e3530044 	cmp	r3, #68	; 0x44
   10b18:	058d8008 	streq	r8, [sp, #8]
   10b1c:	0affffc4 	beq	10a34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10b20:	e3530074 	cmp	r3, #116	; 0x74
   10b24:	01a06008 	moveq	r6, r8
   10b28:	eaffffc1 	b	10a34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10b2c:	e3530008 	cmp	r3, #8
   10b30:	1affffbf 	bne	10a34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10b34:	e3580036 	cmp	r8, #54	; 0x36
   10b38:	ca000028 	bgt	10be0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x224>
   10b3c:	e358002f 	cmp	r8, #47	; 0x2f
   10b40:	ca00003a 	bgt	10c30 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x274>
   10b44:	e2488004 	sub	r8, r8, #4
   10b48:	e3580001 	cmp	r8, #1
   10b4c:	93a09001 	movls	r9, #1
   10b50:	eaffffb7 	b	10a34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10b54:	e35a0000 	cmp	sl, #0
   10b58:	1affffda 	bne	10ac8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x10c>
   10b5c:	e1a0100a 	mov	r1, sl
   10b60:	e3a02008 	mov	r2, #8
   10b64:	ee170a90 	vmov	r0, s15
   10b68:	ebffff49 	bl	10894 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10b6c:	e3500000 	cmp	r0, #0
   10b70:	11500008 	cmpne	r0, r8
   10b74:	1affffde 	bne	10af4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x138>
   10b78:	e3a03008 	mov	r3, #8
   10b7c:	e1a0a008 	mov	sl, r8
   10b80:	e58d3004 	str	r3, [sp, #4]
   10b84:	eaffffaa 	b	10a34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10b88:	e5d58001 	ldrb	r8, [r5, #1]
   10b8c:	e1d520d2 	ldrsb	r2, [r5, #2]
   10b90:	e2444003 	sub	r4, r4, #3
   10b94:	e6ff4074 	uxth	r4, r4
   10b98:	e1888402 	orr	r8, r8, r2, lsl #8
   10b9c:	e2855003 	add	r5, r5, #3
   10ba0:	eaffffbb 	b	10a94 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xd8>
   10ba4:	e2444002 	sub	r4, r4, #2
   10ba8:	e1d580d1 	ldrsb	r8, [r5, #1]
   10bac:	e6ff4074 	uxth	r4, r4
   10bb0:	e2855002 	add	r5, r5, #2
   10bb4:	eaffffb6 	b	10a94 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xd8>
   10bb8:	e58d8014 	str	r8, [sp, #20]
   10bbc:	eaffff9c 	b	10a34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10bc0:	e2088003 	and	r8, r8, #3
   10bc4:	e3580002 	cmp	r8, #2
   10bc8:	0a000009 	beq	10bf4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x238>
   10bcc:	e0020796 	mul	r2, r6, r7
   10bd0:	e59d3004 	ldr	r3, [sp, #4]
   10bd4:	e0833002 	add	r3, r3, r2
   10bd8:	e58d3004 	str	r3, [sp, #4]
   10bdc:	eaffff94 	b	10a34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10be0:	e3580039 	cmp	r8, #57	; 0x39
   10be4:	1affff92 	bne	10a34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10be8:	e3590001 	cmp	r9, #1
   10bec:	03a09004 	moveq	r9, #4
   10bf0:	eaffff8f 	b	10a34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10bf4:	e3590003 	cmp	r9, #3
   10bf8:	0a000013 	beq	10c4c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x290>
   10bfc:	e3590004 	cmp	r9, #4
   10c00:	0a00004a 	beq	10d30 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x374>
   10c04:	e3590002 	cmp	r9, #2
   10c08:	e0020796 	mul	r2, r6, r7
   10c0c:	1affffef 	bne	10bd0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   10c10:	e59d8010 	ldr	r8, [sp, #16]
   10c14:	ee170a90 	vmov	r0, s15
   10c18:	e59d1004 	ldr	r1, [sp, #4]
   10c1c:	e5887104 	str	r7, [r8, #260]	; 0x104
   10c20:	ebffff1b 	bl	10894 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10c24:	e3a09001 	mov	r9, #1
   10c28:	e5880108 	str	r0, [r8, #264]	; 0x108
   10c2c:	eaffffe7 	b	10bd0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   10c30:	e3590001 	cmp	r9, #1
   10c34:	03a09003 	moveq	r9, #3
   10c38:	eaffff7d 	b	10a34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10c3c:	e3a020a2 	mov	r2, #162	; 0xa2
   10c40:	e59f1190 	ldr	r1, [pc, #400]	; 10dd8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x41c>
   10c44:	e59f0190 	ldr	r0, [pc, #400]	; 10ddc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x420>
   10c48:	eb004e8d 	bl	24684 <assertion_failed>
   10c4c:	e3570000 	cmp	r7, #0
   10c50:	0a00005c 	beq	10dc8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x40c>
   10c54:	e59d200c 	ldr	r2, [sp, #12]
   10c58:	e59f1174 	ldr	r1, [pc, #372]	; 10dd4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x418>
   10c5c:	e59d0014 	ldr	r0, [sp, #20]
   10c60:	e1520001 	cmp	r2, r1
   10c64:	e1a03002 	mov	r3, r2
   10c68:	01a03000 	moveq	r3, r0
   10c6c:	e15b0001 	cmp	fp, r1
   10c70:	e59d2008 	ldr	r2, [sp, #8]
   10c74:	11a0200b 	movne	r2, fp
   10c78:	e59d0018 	ldr	r0, [sp, #24]
   10c7c:	e59d1004 	ldr	r1, [sp, #4]
   10c80:	e59dc010 	ldr	ip, [sp, #16]
   10c84:	e0808080 	add	r8, r0, r0, lsl #1
   10c88:	e2800001 	add	r0, r0, #1
   10c8c:	e58da020 	str	sl, [sp, #32]
   10c90:	e58d5024 	str	r5, [sp, #36]	; 0x24
   10c94:	e58d4028 	str	r4, [sp, #40]	; 0x28
   10c98:	e58db02c 	str	fp, [sp, #44]	; 0x2c
   10c9c:	e1a04006 	mov	r4, r6
   10ca0:	e3a09000 	mov	r9, #0
   10ca4:	e1a05002 	mov	r5, r2
   10ca8:	e1a0b003 	mov	fp, r3
   10cac:	e1a06001 	mov	r6, r1
   10cb0:	ee17aa90 	vmov	sl, s15
   10cb4:	e08c8108 	add	r8, ip, r8, lsl #2
   10cb8:	e58d0018 	str	r0, [sp, #24]
   10cbc:	ea000009 	b	10ce8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x32c>
   10cc0:	ebfffef3 	bl	10894 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10cc4:	e59d3018 	ldr	r3, [sp, #24]
   10cc8:	e5880028 	str	r0, [r8, #40]	; 0x28
   10ccc:	e083c009 	add	ip, r3, r9
   10cd0:	e2899001 	add	r9, r9, #1
   10cd4:	e359000f 	cmp	r9, #15
   10cd8:	91590007 	cmpls	r9, r7
   10cdc:	e0866004 	add	r6, r6, r4
   10ce0:	e288800c 	add	r8, r8, #12
   10ce4:	2a000008 	bcs	10d0c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x350>
   10ce8:	e35b0000 	cmp	fp, #0
   10cec:	e1a02004 	mov	r2, r4
   10cf0:	e1a01006 	mov	r1, r6
   10cf4:	e1a0000a 	mov	r0, sl
   10cf8:	e588b02c 	str	fp, [r8, #44]	; 0x2c
   10cfc:	e5885030 	str	r5, [r8, #48]	; 0x30
   10d00:	aaffffee 	bge	10cc0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x304>
   10d04:	ebffff22 	bl	10994 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   10d08:	eaffffed 	b	10cc4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x308>
   10d0c:	e1a06004 	mov	r6, r4
   10d10:	e3a09001 	mov	r9, #1
   10d14:	e0020796 	mul	r2, r6, r7
   10d18:	e59da020 	ldr	sl, [sp, #32]
   10d1c:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   10d20:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
   10d24:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   10d28:	e58dc018 	str	ip, [sp, #24]
   10d2c:	eaffffa7 	b	10bd0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   10d30:	e3570000 	cmp	r7, #0
   10d34:	0a000023 	beq	10dc8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x40c>
   10d38:	e59d201c 	ldr	r2, [sp, #28]
   10d3c:	e59d0010 	ldr	r0, [sp, #16]
   10d40:	e282303b 	add	r3, r2, #59	; 0x3b
   10d44:	e59d1004 	ldr	r1, [sp, #4]
   10d48:	e0809103 	add	r9, r0, r3, lsl #2
   10d4c:	e2823001 	add	r3, r2, #1
   10d50:	e58da01c 	str	sl, [sp, #28]
   10d54:	e1a02006 	mov	r2, r6
   10d58:	e58d5020 	str	r5, [sp, #32]
   10d5c:	e3a08000 	mov	r8, #0
   10d60:	e1a05009 	mov	r5, r9
   10d64:	e1a06001 	mov	r6, r1
   10d68:	ee17aa90 	vmov	sl, s15
   10d6c:	e1a09003 	mov	r9, r3
   10d70:	e58d4024 	str	r4, [sp, #36]	; 0x24
   10d74:	e1a01006 	mov	r1, r6
   10d78:	e1a0000a 	mov	r0, sl
   10d7c:	e0894008 	add	r4, r9, r8
   10d80:	e2888001 	add	r8, r8, #1
   10d84:	ebfffec2 	bl	10894 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10d88:	e3580005 	cmp	r8, #5
   10d8c:	91580007 	cmpls	r8, r7
   10d90:	e0866002 	add	r6, r6, r2
   10d94:	e4850004 	str	r0, [r5], #4
   10d98:	3afffff5 	bcc	10d74 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3b8>
   10d9c:	e1a06002 	mov	r6, r2
   10da0:	e59da01c 	ldr	sl, [sp, #28]
   10da4:	e3a09001 	mov	r9, #1
   10da8:	e58d401c 	str	r4, [sp, #28]
   10dac:	e0020792 	mul	r2, r2, r7
   10db0:	e59d5020 	ldr	r5, [sp, #32]
   10db4:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   10db8:	eaffff84 	b	10bd0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   10dbc:	e58d401c 	str	r4, [sp, #28]
   10dc0:	e58d4018 	str	r4, [sp, #24]
   10dc4:	eaffff43 	b	10ad8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x11c>
   10dc8:	e1a02007 	mov	r2, r7
   10dcc:	e3a09001 	mov	r9, #1
   10dd0:	eaffff7e 	b	10bd0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   10dd4:	f8a432eb 	.word	0xf8a432eb
   10dd8:	0003fe8c 	.word	0x0003fe8c
   10ddc:	0003fea4 	.word	0x0003fea4

00010de0 <CUSBGamePadStandardDevice::Configure()>:
   10de0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10de4:	e3a01021 	mov	r1, #33	; 0x21
   10de8:	e24dd080 	sub	sp, sp, #128	; 0x80
   10dec:	e1a04000 	mov	r4, r0
   10df0:	ebfffab2 	bl	f8c0 <CUSBFunction::GetDescriptor(unsigned char)>
   10df4:	e2505000 	subs	r5, r0, #0
   10df8:	0a000003 	beq	10e0c <CUSBGamePadStandardDevice::Configure()+0x2c>
   10dfc:	e5d50007 	ldrb	r0, [r5, #7]
   10e00:	e5d53008 	ldrb	r3, [r5, #8]
   10e04:	e1900403 	orrs	r0, r0, r3, lsl #8
   10e08:	1a000006 	bne	10e28 <CUSBGamePadStandardDevice::Configure()+0x48>
   10e0c:	e1a00004 	mov	r0, r4
   10e10:	e59f1164 	ldr	r1, [pc, #356]	; 10f7c <CUSBGamePadStandardDevice::Configure()+0x19c>
   10e14:	ebfffab4 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   10e18:	e3a05000 	mov	r5, #0
   10e1c:	e1a00005 	mov	r0, r5
   10e20:	e28dd080 	add	sp, sp, #128	; 0x80
   10e24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10e28:	e2846f4e 	add	r6, r4, #312	; 0x138
   10e2c:	e1c600b0 	strh	r0, [r6]
   10e30:	eb006820 	bl	2aeb8 <operator new[](unsigned int)>
   10e34:	e1a03000 	mov	r3, r0
   10e38:	e1a00004 	mov	r0, r4
   10e3c:	e5843134 	str	r3, [r4, #308]	; 0x134
   10e40:	ebfffa93 	bl	f894 <CUSBFunction::GetHost() const>
   10e44:	e1a07000 	mov	r7, r0
   10e48:	e1a00004 	mov	r0, r4
   10e4c:	ebfffa85 	bl	f868 <CUSBFunction::GetEndpoint0() const>
   10e50:	e1a01000 	mov	r1, r0
   10e54:	e5d52006 	ldrb	r2, [r5, #6]
   10e58:	e1a00004 	mov	r0, r4
   10e5c:	e1d680b0 	ldrh	r8, [r6]
   10e60:	e5945134 	ldr	r5, [r4, #308]	; 0x134
   10e64:	e58d1014 	str	r1, [sp, #20]
   10e68:	e58d2010 	str	r2, [sp, #16]
   10e6c:	ebfffae4 	bl	fa04 <CUSBFunction::GetInterfaceNumber() const>
   10e70:	e3a0c081 	mov	ip, #129	; 0x81
   10e74:	e6ff3070 	uxth	r3, r0
   10e78:	e58d300c 	str	r3, [sp, #12]
   10e7c:	e1a00007 	mov	r0, r7
   10e80:	e3a03000 	mov	r3, #0
   10e84:	e59d1014 	ldr	r1, [sp, #20]
   10e88:	e59d2010 	ldr	r2, [sp, #16]
   10e8c:	e58d8004 	str	r8, [sp, #4]
   10e90:	e58d5000 	str	r5, [sp]
   10e94:	e58dc008 	str	ip, [sp, #8]
   10e98:	eb00065b 	bl	1280c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   10e9c:	e1d630b0 	ldrh	r3, [r6]
   10ea0:	e1500003 	cmp	r0, r3
   10ea4:	1a000021 	bne	10f30 <CUSBGamePadStandardDevice::Configure()+0x150>
   10ea8:	e3a01000 	mov	r1, #0
   10eac:	e3a02060 	mov	r2, #96	; 0x60
   10eb0:	e28d0020 	add	r0, sp, #32
   10eb4:	e58d101c 	str	r1, [sp, #28]
   10eb8:	eb0063c9 	bl	29de4 <memset>
   10ebc:	e5943000 	ldr	r3, [r4]
   10ec0:	e1a00004 	mov	r0, r4
   10ec4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   10ec8:	e28d101c 	add	r1, sp, #28
   10ecc:	e12fff33 	blx	r3
   10ed0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10ed4:	e3530000 	cmp	r3, #0
   10ed8:	1a000005 	bne	10ef4 <CUSBGamePadStandardDevice::Configure()+0x114>
   10edc:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   10ee0:	e3530000 	cmp	r3, #0
   10ee4:	1a000002 	bne	10ef4 <CUSBGamePadStandardDevice::Configure()+0x114>
   10ee8:	e5945104 	ldr	r5, [r4, #260]	; 0x104
   10eec:	e3550000 	cmp	r5, #0
   10ef0:	0affffc9 	beq	10e1c <CUSBGamePadStandardDevice::Configure()+0x3c>
   10ef4:	e2843f4a 	add	r3, r4, #296	; 0x128
   10ef8:	e1d330b0 	ldrh	r3, [r3]
   10efc:	e3530000 	cmp	r3, #0
   10f00:	0a000019 	beq	10f6c <CUSBGamePadStandardDevice::Configure()+0x18c>
   10f04:	e1a00004 	mov	r0, r4
   10f08:	eb001b05 	bl	17b24 <CUSBGamePadDevice::Configure()>
   10f0c:	e2505000 	subs	r5, r0, #0
   10f10:	0a00000f 	beq	10f54 <CUSBGamePadStandardDevice::Configure()+0x174>
   10f14:	e5d43130 	ldrb	r3, [r4, #304]	; 0x130
   10f18:	e3530000 	cmp	r3, #0
   10f1c:	0affffbe 	beq	10e1c <CUSBGamePadStandardDevice::Configure()+0x3c>
   10f20:	e1a00004 	mov	r0, r4
   10f24:	eb000574 	bl	124fc <CUSBHIDDevice::StartRequest()>
   10f28:	e1a05000 	mov	r5, r0
   10f2c:	eaffffba 	b	10e1c <CUSBGamePadStandardDevice::Configure()+0x3c>
   10f30:	e3a05000 	mov	r5, #0
   10f34:	eb0056ba 	bl	26a24 <CLogger::Get()>
   10f38:	e3a02001 	mov	r2, #1
   10f3c:	e59f303c 	ldr	r3, [pc, #60]	; 10f80 <CUSBGamePadStandardDevice::Configure()+0x1a0>
   10f40:	e59f1034 	ldr	r1, [pc, #52]	; 10f7c <CUSBGamePadStandardDevice::Configure()+0x19c>
   10f44:	eb0055f8 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10f48:	e1a00005 	mov	r0, r5
   10f4c:	e28dd080 	add	sp, sp, #128	; 0x80
   10f50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10f54:	eb0056b2 	bl	26a24 <CLogger::Get()>
   10f58:	e3a02001 	mov	r2, #1
   10f5c:	e59f3020 	ldr	r3, [pc, #32]	; 10f84 <CUSBGamePadStandardDevice::Configure()+0x1a4>
   10f60:	e59f1014 	ldr	r1, [pc, #20]	; 10f7c <CUSBGamePadStandardDevice::Configure()+0x19c>
   10f64:	eb0055f0 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10f68:	eaffffab 	b	10e1c <CUSBGamePadStandardDevice::Configure()+0x3c>
   10f6c:	e3a02085 	mov	r2, #133	; 0x85
   10f70:	e59f1010 	ldr	r1, [pc, #16]	; 10f88 <CUSBGamePadStandardDevice::Configure()+0x1a8>
   10f74:	e59f0010 	ldr	r0, [pc, #16]	; 10f8c <CUSBGamePadStandardDevice::Configure()+0x1ac>
   10f78:	eb004dc1 	bl	24684 <assertion_failed>
   10f7c:	0003ff44 	.word	0x0003ff44
   10f80:	0003fec0 	.word	0x0003fec0
   10f84:	0003fc98 	.word	0x0003fc98
   10f88:	0003fe8c 	.word	0x0003fe8c
   10f8c:	0003fee4 	.word	0x0003fee4

00010f90 <CUSBGamePadDevice::GetProperties()>:
   10f90:	e3a00000 	mov	r0, #0
   10f94:	e12fff1e 	bx	lr

00010f98 <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
   10f98:	e3a00000 	mov	r0, #0
   10f9c:	e12fff1e 	bx	lr

00010fa0 <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
   10fa0:	e3a00000 	mov	r0, #0
   10fa4:	e12fff1e 	bx	lr

00010fa8 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   10fa8:	e92d4010 	push	{r4, lr}
   10fac:	e1a04000 	mov	r4, r0
   10fb0:	e59f300c 	ldr	r3, [pc, #12]	; 10fc4 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x1c>
   10fb4:	e5803000 	str	r3, [r0]
   10fb8:	eb001b15 	bl	17c14 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10fbc:	e1a00004 	mov	r0, r4
   10fc0:	e8bd8010 	pop	{r4, pc}
   10fc4:	00040054 	.word	0x00040054

00010fc8 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   10fc8:	e92d4010 	push	{r4, lr}
   10fcc:	e1a04000 	mov	r4, r0
   10fd0:	e59f3018 	ldr	r3, [pc, #24]	; 10ff0 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x28>
   10fd4:	e5803000 	str	r3, [r0]
   10fd8:	eb001b0d 	bl	17c14 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10fdc:	e1a00004 	mov	r0, r4
   10fe0:	e3a01f4d 	mov	r1, #308	; 0x134
   10fe4:	eb0067bb 	bl	2aed8 <operator delete(void*, unsigned int)>
   10fe8:	e1a00004 	mov	r0, r4
   10fec:	e8bd8010 	pop	{r4, pc}
   10ff0:	00040054 	.word	0x00040054

00010ff4 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   10ff4:	e92d4010 	push	{r4, lr}
   10ff8:	e5d13000 	ldrb	r3, [r1]
   10ffc:	e1a04001 	mov	r4, r1
   11000:	e3530030 	cmp	r3, #48	; 0x30
   11004:	e24dd008 	sub	sp, sp, #8
   11008:	1a00006e 	bne	111c8 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1d4>
   1100c:	e3a03000 	mov	r3, #0
   11010:	e5803108 	str	r3, [r0, #264]	; 0x108
   11014:	e5d13003 	ldrb	r3, [r1, #3]
   11018:	e3130001 	tst	r3, #1
   1101c:	13a03080 	movne	r3, #128	; 0x80
   11020:	15803108 	strne	r3, [r0, #264]	; 0x108
   11024:	15d13003 	ldrbne	r3, [r1, #3]
   11028:	e3130002 	tst	r3, #2
   1102c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11030:	13833b01 	orrne	r3, r3, #1024	; 0x400
   11034:	15803108 	strne	r3, [r0, #264]	; 0x108
   11038:	15d13003 	ldrbne	r3, [r1, #3]
   1103c:	e3130004 	tst	r3, #4
   11040:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11044:	13833c01 	orrne	r3, r3, #256	; 0x100
   11048:	15803108 	strne	r3, [r0, #264]	; 0x108
   1104c:	15d13003 	ldrbne	r3, [r1, #3]
   11050:	e3130008 	tst	r3, #8
   11054:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11058:	13833c02 	orrne	r3, r3, #512	; 0x200
   1105c:	15803108 	strne	r3, [r0, #264]	; 0x108
   11060:	15d13003 	ldrbne	r3, [r1, #3]
   11064:	e3130040 	tst	r3, #64	; 0x40
   11068:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1106c:	13833040 	orrne	r3, r3, #64	; 0x40
   11070:	15803108 	strne	r3, [r0, #264]	; 0x108
   11074:	15d13003 	ldrbne	r3, [r1, #3]
   11078:	e3130080 	tst	r3, #128	; 0x80
   1107c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11080:	13833010 	orrne	r3, r3, #16
   11084:	15803108 	strne	r3, [r0, #264]	; 0x108
   11088:	e5d13004 	ldrb	r3, [r1, #4]
   1108c:	e3130001 	tst	r3, #1
   11090:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11094:	13833702 	orrne	r3, r3, #524288	; 0x80000
   11098:	15803108 	strne	r3, [r0, #264]	; 0x108
   1109c:	15d13004 	ldrbne	r3, [r1, #4]
   110a0:	e3130002 	tst	r3, #2
   110a4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   110a8:	13833601 	orrne	r3, r3, #1048576	; 0x100000
   110ac:	15803108 	strne	r3, [r0, #264]	; 0x108
   110b0:	15d13004 	ldrbne	r3, [r1, #4]
   110b4:	e3130004 	tst	r3, #4
   110b8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   110bc:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   110c0:	15803108 	strne	r3, [r0, #264]	; 0x108
   110c4:	15d13004 	ldrbne	r3, [r1, #4]
   110c8:	e3130008 	tst	r3, #8
   110cc:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   110d0:	13833a01 	orrne	r3, r3, #4096	; 0x1000
   110d4:	15803108 	strne	r3, [r0, #264]	; 0x108
   110d8:	15d13004 	ldrbne	r3, [r1, #4]
   110dc:	e3130010 	tst	r3, #16
   110e0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   110e4:	13833001 	orrne	r3, r3, #1
   110e8:	15803108 	strne	r3, [r0, #264]	; 0x108
   110ec:	15d13004 	ldrbne	r3, [r1, #4]
   110f0:	e3130020 	tst	r3, #32
   110f4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   110f8:	13833b02 	orrne	r3, r3, #2048	; 0x800
   110fc:	15803108 	strne	r3, [r0, #264]	; 0x108
   11100:	e5d13005 	ldrb	r3, [r1, #5]
   11104:	e3130001 	tst	r3, #1
   11108:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1110c:	13833802 	orrne	r3, r3, #131072	; 0x20000
   11110:	15803108 	strne	r3, [r0, #264]	; 0x108
   11114:	15d13005 	ldrbne	r3, [r1, #5]
   11118:	e3130002 	tst	r3, #2
   1111c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11120:	13833902 	orrne	r3, r3, #32768	; 0x8000
   11124:	15803108 	strne	r3, [r0, #264]	; 0x108
   11128:	15d13005 	ldrbne	r3, [r1, #5]
   1112c:	e3130004 	tst	r3, #4
   11130:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11134:	13833801 	orrne	r3, r3, #65536	; 0x10000
   11138:	15803108 	strne	r3, [r0, #264]	; 0x108
   1113c:	15d13005 	ldrbne	r3, [r1, #5]
   11140:	e3130008 	tst	r3, #8
   11144:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11148:	13833701 	orrne	r3, r3, #262144	; 0x40000
   1114c:	15803108 	strne	r3, [r0, #264]	; 0x108
   11150:	15d13005 	ldrbne	r3, [r1, #5]
   11154:	e3130040 	tst	r3, #64	; 0x40
   11158:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1115c:	13833020 	orrne	r3, r3, #32
   11160:	15803108 	strne	r3, [r0, #264]	; 0x108
   11164:	15d13005 	ldrbne	r3, [r1, #5]
   11168:	e3130080 	tst	r3, #128	; 0x80
   1116c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11170:	13833008 	orrne	r3, r3, #8
   11174:	15803108 	strne	r3, [r0, #264]	; 0x108
   11178:	e5d12007 	ldrb	r2, [r1, #7]
   1117c:	e5d13006 	ldrb	r3, [r1, #6]
   11180:	e1833402 	orr	r3, r3, r2, lsl #8
   11184:	e1a03243 	asr	r3, r3, #4
   11188:	e6ef3073 	uxtb	r3, r3
   1118c:	e5803028 	str	r3, [r0, #40]	; 0x28
   11190:	e5d13008 	ldrb	r3, [r1, #8]
   11194:	e26330ff 	rsb	r3, r3, #255	; 0xff
   11198:	e5803034 	str	r3, [r0, #52]	; 0x34
   1119c:	e5d13009 	ldrb	r3, [r1, #9]
   111a0:	e5d1200a 	ldrb	r2, [r1, #10]
   111a4:	e1833402 	orr	r3, r3, r2, lsl #8
   111a8:	e1a03243 	asr	r3, r3, #4
   111ac:	e6ef3073 	uxtb	r3, r3
   111b0:	e5803040 	str	r3, [r0, #64]	; 0x40
   111b4:	e5d1300b 	ldrb	r3, [r1, #11]
   111b8:	e26330ff 	rsb	r3, r3, #255	; 0xff
   111bc:	e580304c 	str	r3, [r0, #76]	; 0x4c
   111c0:	e28dd008 	add	sp, sp, #8
   111c4:	e8bd8010 	pop	{r4, pc}
   111c8:	eb005615 	bl	26a24 <CLogger::Get()>
   111cc:	e5d42000 	ldrb	r2, [r4]
   111d0:	e59f3014 	ldr	r3, [pc, #20]	; 111ec <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1f8>
   111d4:	e58d2000 	str	r2, [sp]
   111d8:	e59f1010 	ldr	r1, [pc, #16]	; 111f0 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1fc>
   111dc:	e3a02003 	mov	r2, #3
   111e0:	eb005551 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   111e4:	e28dd008 	add	sp, sp, #8
   111e8:	e8bd8010 	pop	{r4, pc}
   111ec:	0003ff50 	.word	0x0003ff50
   111f0:	00040098 	.word	0x00040098

000111f4 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   111f4:	e1a0c000 	mov	ip, r0
   111f8:	e92d4070 	push	{r4, r5, r6, lr}
   111fc:	e1a06001 	mov	r6, r1
   11200:	e5d03131 	ldrb	r3, [r0, #305]	; 0x131
   11204:	e24dd010 	sub	sp, sp, #16
   11208:	e59f5064 	ldr	r5, [pc, #100]	; 11274 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x80>
   1120c:	e2832001 	add	r2, r3, #1
   11210:	e28d4004 	add	r4, sp, #4
   11214:	e203e00f 	and	lr, r3, #15
   11218:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   1121c:	e3a03000 	mov	r3, #0
   11220:	e8950007 	ldm	r5, {r0, r1, r2}
   11224:	e8840007 	stm	r4, {r0, r1, r2}
   11228:	e1a01004 	mov	r1, r4
   1122c:	e1a0000c 	mov	r0, ip
   11230:	e3a0200c 	mov	r2, #12
   11234:	e5cde005 	strb	lr, [sp, #5]
   11238:	e5cd600f 	strb	r6, [sp, #15]
   1123c:	eb000425 	bl	122d8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11240:	e2504000 	subs	r4, r0, #0
   11244:	0a000002 	beq	11254 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x60>
   11248:	e1a00004 	mov	r0, r4
   1124c:	e28dd010 	add	sp, sp, #16
   11250:	e8bd8070 	pop	{r4, r5, r6, pc}
   11254:	eb0055f2 	bl	26a24 <CLogger::Get()>
   11258:	e3a02001 	mov	r2, #1
   1125c:	e59f3014 	ldr	r3, [pc, #20]	; 11278 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x84>
   11260:	e2451010 	sub	r1, r5, #16
   11264:	eb005530 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11268:	e1a00004 	mov	r0, r4
   1126c:	e28dd010 	add	sp, sp, #16
   11270:	e8bd8070 	pop	{r4, r5, r6, pc}
   11274:	000400a8 	.word	0x000400a8
   11278:	0003ff6c 	.word	0x0003ff6c

0001127c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   1127c:	e92d4010 	push	{r4, lr}
   11280:	e1a0e000 	mov	lr, r0
   11284:	e59f20b0 	ldr	r2, [pc, #176]	; 1133c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xc0>
   11288:	e24dd010 	sub	sp, sp, #16
   1128c:	e28dc004 	add	ip, sp, #4
   11290:	e1a03001 	mov	r3, r1
   11294:	e3510001 	cmp	r1, #1
   11298:	e8920007 	ldm	r2, {r0, r1, r2}
   1129c:	e8ac0003 	stmia	ip!, {r0, r1}
   112a0:	e1a0000e 	mov	r0, lr
   112a4:	e1cc20b0 	strh	r2, [ip]
   112a8:	0a00001e 	beq	11328 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xac>
   112ac:	e3530002 	cmp	r3, #2
   112b0:	0a000005 	beq	112cc <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   112b4:	e3530000 	cmp	r3, #0
   112b8:	13a04001 	movne	r4, #1
   112bc:	0a000006 	beq	112dc <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x60>
   112c0:	e1a00004 	mov	r0, r4
   112c4:	e28dd010 	add	sp, sp, #16
   112c8:	e8bd8010 	pop	{r4, pc}
   112cc:	e3a02d82 	mov	r2, #8320	; 0x2080
   112d0:	e3e0309d 	mvn	r3, #157	; 0x9d
   112d4:	e1cd20b6 	strh	r2, [sp, #6]
   112d8:	e1cd30b8 	strh	r3, [sp, #8]
   112dc:	e5d03131 	ldrb	r3, [r0, #305]	; 0x131
   112e0:	e28d1004 	add	r1, sp, #4
   112e4:	e2832001 	add	r2, r3, #1
   112e8:	e203c00f 	and	ip, r3, #15
   112ec:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   112f0:	e3a03000 	mov	r3, #0
   112f4:	e3a0200a 	mov	r2, #10
   112f8:	e5cdc005 	strb	ip, [sp, #5]
   112fc:	eb0003f5 	bl	122d8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11300:	e2504000 	subs	r4, r0, #0
   11304:	1affffed 	bne	112c0 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x44>
   11308:	eb0055c5 	bl	26a24 <CLogger::Get()>
   1130c:	e3a02001 	mov	r2, #1
   11310:	e59f3028 	ldr	r3, [pc, #40]	; 11340 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xc4>
   11314:	e59f1028 	ldr	r1, [pc, #40]	; 11344 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xc8>
   11318:	eb005503 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1131c:	e1a00004 	mov	r0, r4
   11320:	e28dd010 	add	sp, sp, #16
   11324:	e8bd8010 	pop	{r4, pc}
   11328:	e3e0209d 	mvn	r2, #157	; 0x9d
   1132c:	e59f3014 	ldr	r3, [pc, #20]	; 11348 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xcc>
   11330:	e1cd20bc 	strh	r2, [sp, #12]
   11334:	e1cd30ba 	strh	r3, [sp, #10]
   11338:	eaffffe7 	b	112dc <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x60>
   1133c:	000400b4 	.word	0x000400b4
   11340:	0003ff80 	.word	0x0003ff80
   11344:	00040098 	.word	0x00040098
   11348:	00002098 	.word	0x00002098

0001134c <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   1134c:	e92d4010 	push	{r4, lr}
   11350:	e1a04000 	mov	r4, r0
   11354:	eb001a1d 	bl	17bd0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11358:	e3a03000 	mov	r3, #0
   1135c:	e59f2024 	ldr	r2, [pc, #36]	; 11388 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)+0x3c>
   11360:	e1a00004 	mov	r0, r4
   11364:	e5842000 	str	r2, [r4]
   11368:	e3a01003 	mov	r1, #3
   1136c:	e1a02003 	mov	r2, r3
   11370:	ebfff970 	bl	f938 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   11374:	e3a03000 	mov	r3, #0
   11378:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   1137c:	e5c43131 	strb	r3, [r4, #305]	; 0x131
   11380:	e1a00004 	mov	r0, r4
   11384:	e8bd8010 	pop	{r4, pc}
   11388:	00040054 	.word	0x00040054

0001138c <CUSBGamePadSwitchProDevice::Configure()>:
   1138c:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   11390:	e28db018 	add	fp, sp, #24
   11394:	e24dd014 	sub	sp, sp, #20
   11398:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
   1139c:	e3550000 	cmp	r5, #0
   113a0:	0a00005c 	beq	11518 <CUSBGamePadSwitchProDevice::Configure()+0x18c>
   113a4:	e3a03040 	mov	r3, #64	; 0x40
   113a8:	e2806f4a 	add	r6, r0, #296	; 0x128
   113ac:	e1c630b0 	strh	r3, [r6]
   113b0:	e1a04000 	mov	r4, r0
   113b4:	eb0019da 	bl	17b24 <CUSBGamePadDevice::Configure()>
   113b8:	e2505000 	subs	r5, r0, #0
   113bc:	0a000062 	beq	1154c <CUSBGamePadSwitchProDevice::Configure()+0x1c0>
   113c0:	e3a03012 	mov	r3, #18
   113c4:	e1a0100d 	mov	r1, sp
   113c8:	e1d620b0 	ldrh	r2, [r6]
   113cc:	e5843104 	str	r3, [r4, #260]	; 0x104
   113d0:	e2823007 	add	r3, r2, #7
   113d4:	e1a031a3 	lsr	r3, r3, #3
   113d8:	e0413183 	sub	r3, r1, r3, lsl #3
   113dc:	e3a07000 	mov	r7, #0
   113e0:	e3a000ff 	mov	r0, #255	; 0xff
   113e4:	e1a0d003 	mov	sp, r3
   113e8:	e3a0c004 	mov	ip, #4
   113ec:	e1a0100d 	mov	r1, sp
   113f0:	e1a03007 	mov	r3, r7
   113f4:	e584c024 	str	ip, [r4, #36]	; 0x24
   113f8:	e5840030 	str	r0, [r4, #48]	; 0x30
   113fc:	e584003c 	str	r0, [r4, #60]	; 0x3c
   11400:	e5840048 	str	r0, [r4, #72]	; 0x48
   11404:	e5840054 	str	r0, [r4, #84]	; 0x54
   11408:	e58470e8 	str	r7, [r4, #232]	; 0xe8
   1140c:	e1a00004 	mov	r0, r4
   11410:	e584702c 	str	r7, [r4, #44]	; 0x2c
   11414:	e5847038 	str	r7, [r4, #56]	; 0x38
   11418:	e5847044 	str	r7, [r4, #68]	; 0x44
   1141c:	e5847050 	str	r7, [r4, #80]	; 0x50
   11420:	eb000408 	bl	12448 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   11424:	e3a0cd0e 	mov	ip, #896	; 0x380
   11428:	e1a03007 	mov	r3, r7
   1142c:	e3a02002 	mov	r2, #2
   11430:	e1a00004 	mov	r0, r4
   11434:	e24b1028 	sub	r1, fp, #40	; 0x28
   11438:	e14bc2b8 	strh	ip, [fp, #-40]	; 0xffffffd8
   1143c:	eb0003a5 	bl	122d8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11440:	e2505000 	subs	r5, r0, #0
   11444:	e1a0800d 	mov	r8, sp
   11448:	0a000037 	beq	1152c <CUSBGamePadSwitchProDevice::Configure()+0x1a0>
   1144c:	e1a03007 	mov	r3, r7
   11450:	e1a0100d 	mov	r1, sp
   11454:	e1a00004 	mov	r0, r4
   11458:	e1d620b0 	ldrh	r2, [r6]
   1145c:	eb0003f9 	bl	12448 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   11460:	e3500000 	cmp	r0, #0
   11464:	da000040 	ble	1156c <CUSBGamePadSwitchProDevice::Configure()+0x1e0>
   11468:	e5dd3000 	ldrb	r3, [sp]
   1146c:	e3530081 	cmp	r3, #129	; 0x81
   11470:	1a00001f 	bne	114f4 <CUSBGamePadSwitchProDevice::Configure()+0x168>
   11474:	e5dd3001 	ldrb	r3, [sp, #1]
   11478:	e3530003 	cmp	r3, #3
   1147c:	1a00001c 	bne	114f4 <CUSBGamePadSwitchProDevice::Configure()+0x168>
   11480:	e3a0cd0a 	mov	ip, #640	; 0x280
   11484:	e1a03007 	mov	r3, r7
   11488:	e3a02002 	mov	r2, #2
   1148c:	e1a00004 	mov	r0, r4
   11490:	e24b1024 	sub	r1, fp, #36	; 0x24
   11494:	e14bc2b4 	strh	ip, [fp, #-36]	; 0xffffffdc
   11498:	eb00038e 	bl	122d8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1149c:	e2505000 	subs	r5, r0, #0
   114a0:	0a000038 	beq	11588 <CUSBGamePadSwitchProDevice::Configure()+0x1fc>
   114a4:	e1a03007 	mov	r3, r7
   114a8:	e1a0100d 	mov	r1, sp
   114ac:	e1a00004 	mov	r0, r4
   114b0:	e1d620b0 	ldrh	r2, [r6]
   114b4:	eb0003e3 	bl	12448 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   114b8:	e3500000 	cmp	r0, #0
   114bc:	da000050 	ble	11604 <CUSBGamePadSwitchProDevice::Configure()+0x278>
   114c0:	e5dd3000 	ldrb	r3, [sp]
   114c4:	e3530081 	cmp	r3, #129	; 0x81
   114c8:	1a000002 	bne	114d8 <CUSBGamePadSwitchProDevice::Configure()+0x14c>
   114cc:	e5dd3001 	ldrb	r3, [sp, #1]
   114d0:	e3530002 	cmp	r3, #2
   114d4:	0a000031 	beq	115a0 <CUSBGamePadSwitchProDevice::Configure()+0x214>
   114d8:	eb005551 	bl	26a24 <CLogger::Get()>
   114dc:	e3a02001 	mov	r2, #1
   114e0:	e59f3168 	ldr	r3, [pc, #360]	; 11650 <CUSBGamePadSwitchProDevice::Configure()+0x2c4>
   114e4:	e59f1168 	ldr	r1, [pc, #360]	; 11654 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   114e8:	eb00548f 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   114ec:	e3a05000 	mov	r5, #0
   114f0:	ea000005 	b	1150c <CUSBGamePadSwitchProDevice::Configure()+0x180>
   114f4:	eb00554a 	bl	26a24 <CLogger::Get()>
   114f8:	e3a02001 	mov	r2, #1
   114fc:	e59f3154 	ldr	r3, [pc, #340]	; 11658 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   11500:	e59f114c 	ldr	r1, [pc, #332]	; 11654 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   11504:	eb005488 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11508:	e3a05000 	mov	r5, #0
   1150c:	e1a00005 	mov	r0, r5
   11510:	e24bd018 	sub	sp, fp, #24
   11514:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   11518:	e59f1134 	ldr	r1, [pc, #308]	; 11654 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   1151c:	ebfff8f2 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   11520:	e1a00005 	mov	r0, r5
   11524:	e24bd018 	sub	sp, fp, #24
   11528:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1152c:	eb00553c 	bl	26a24 <CLogger::Get()>
   11530:	e3a02001 	mov	r2, #1
   11534:	e59f311c 	ldr	r3, [pc, #284]	; 11658 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   11538:	e59f1114 	ldr	r1, [pc, #276]	; 11654 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   1153c:	eb00547a 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11540:	e1a00005 	mov	r0, r5
   11544:	e24bd018 	sub	sp, fp, #24
   11548:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1154c:	eb005534 	bl	26a24 <CLogger::Get()>
   11550:	e3a02001 	mov	r2, #1
   11554:	e59f3100 	ldr	r3, [pc, #256]	; 1165c <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   11558:	e59f10f4 	ldr	r1, [pc, #244]	; 11654 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   1155c:	eb005472 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11560:	e1a00005 	mov	r0, r5
   11564:	e24bd018 	sub	sp, fp, #24
   11568:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1156c:	eb00552c 	bl	26a24 <CLogger::Get()>
   11570:	e3a02001 	mov	r2, #1
   11574:	e59f30e4 	ldr	r3, [pc, #228]	; 11660 <CUSBGamePadSwitchProDevice::Configure()+0x2d4>
   11578:	e59f10d4 	ldr	r1, [pc, #212]	; 11654 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   1157c:	e1a05007 	mov	r5, r7
   11580:	eb005469 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11584:	eaffffe0 	b	1150c <CUSBGamePadSwitchProDevice::Configure()+0x180>
   11588:	eb005525 	bl	26a24 <CLogger::Get()>
   1158c:	e3a02001 	mov	r2, #1
   11590:	e59f30b8 	ldr	r3, [pc, #184]	; 11650 <CUSBGamePadSwitchProDevice::Configure()+0x2c4>
   11594:	e59f10b8 	ldr	r1, [pc, #184]	; 11654 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   11598:	eb005463 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1159c:	eaffffda 	b	1150c <CUSBGamePadSwitchProDevice::Configure()+0x180>
   115a0:	e3a0cd12 	mov	ip, #1152	; 0x480
   115a4:	e3a03000 	mov	r3, #0
   115a8:	e3a02002 	mov	r2, #2
   115ac:	e1a00004 	mov	r0, r4
   115b0:	e24b1020 	sub	r1, fp, #32
   115b4:	e14bc2b0 	strh	ip, [fp, #-32]	; 0xffffffe0
   115b8:	eb000346 	bl	122d8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   115bc:	e2505000 	subs	r5, r0, #0
   115c0:	0a00001c 	beq	11638 <CUSBGamePadSwitchProDevice::Configure()+0x2ac>
   115c4:	e5943000 	ldr	r3, [r4]
   115c8:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   115cc:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   115d0:	e1a00004 	mov	r0, r4
   115d4:	e12fff33 	blx	r3
   115d8:	e1a01008 	mov	r1, r8
   115dc:	e3a03000 	mov	r3, #0
   115e0:	e1a00004 	mov	r0, r4
   115e4:	e1d620b0 	ldrh	r2, [r6]
   115e8:	eb000396 	bl	12448 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   115ec:	e3500000 	cmp	r0, #0
   115f0:	da00000a 	ble	11620 <CUSBGamePadSwitchProDevice::Configure()+0x294>
   115f4:	e1a00004 	mov	r0, r4
   115f8:	eb0003bf 	bl	124fc <CUSBHIDDevice::StartRequest()>
   115fc:	e1a05000 	mov	r5, r0
   11600:	eaffffc1 	b	1150c <CUSBGamePadSwitchProDevice::Configure()+0x180>
   11604:	eb005506 	bl	26a24 <CLogger::Get()>
   11608:	e3a02001 	mov	r2, #1
   1160c:	e59f3050 	ldr	r3, [pc, #80]	; 11664 <CUSBGamePadSwitchProDevice::Configure()+0x2d8>
   11610:	e59f103c 	ldr	r1, [pc, #60]	; 11654 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   11614:	e1a05007 	mov	r5, r7
   11618:	eb005443 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1161c:	eaffffba 	b	1150c <CUSBGamePadSwitchProDevice::Configure()+0x180>
   11620:	eb0054ff 	bl	26a24 <CLogger::Get()>
   11624:	e3a02001 	mov	r2, #1
   11628:	e59f3038 	ldr	r3, [pc, #56]	; 11668 <CUSBGamePadSwitchProDevice::Configure()+0x2dc>
   1162c:	e59f1020 	ldr	r1, [pc, #32]	; 11654 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   11630:	eb00543d 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11634:	eaffffee 	b	115f4 <CUSBGamePadSwitchProDevice::Configure()+0x268>
   11638:	eb0054f9 	bl	26a24 <CLogger::Get()>
   1163c:	e3a02001 	mov	r2, #1
   11640:	e59f3024 	ldr	r3, [pc, #36]	; 1166c <CUSBGamePadSwitchProDevice::Configure()+0x2e0>
   11644:	e59f1008 	ldr	r1, [pc, #8]	; 11654 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   11648:	eb005437 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1164c:	eaffffae 	b	1150c <CUSBGamePadSwitchProDevice::Configure()+0x180>
   11650:	0003ffd8 	.word	0x0003ffd8
   11654:	00040098 	.word	0x00040098
   11658:	0003ff98 	.word	0x0003ff98
   1165c:	0003fc98 	.word	0x0003fc98
   11660:	0003ffb8 	.word	0x0003ffb8
   11664:	0003fff4 	.word	0x0003fff4
   11668:	00040030 	.word	0x00040030
   1166c:	00040010 	.word	0x00040010

00011670 <CUSBGamePadSwitchProDevice::GetProperties()>:
   11670:	e3a0004b 	mov	r0, #75	; 0x4b
   11674:	e12fff1e 	bx	lr

00011678 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   11678:	e92d4010 	push	{r4, lr}
   1167c:	e1a04000 	mov	r4, r0
   11680:	e59f300c 	ldr	r3, [pc, #12]	; 11694 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x1c>
   11684:	e5803000 	str	r3, [r0]
   11688:	eb001961 	bl	17c14 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   1168c:	e1a00004 	mov	r0, r4
   11690:	e8bd8010 	pop	{r4, pc}
   11694:	00040104 	.word	0x00040104

00011698 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   11698:	e92d4010 	push	{r4, lr}
   1169c:	e1a04000 	mov	r4, r0
   116a0:	e59f3018 	ldr	r3, [pc, #24]	; 116c0 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x28>
   116a4:	e5803000 	str	r3, [r0]
   116a8:	eb001959 	bl	17c14 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   116ac:	e1a00004 	mov	r0, r4
   116b0:	e3a01e13 	mov	r1, #304	; 0x130
   116b4:	eb006607 	bl	2aed8 <operator delete(void*, unsigned int)>
   116b8:	e1a00004 	mov	r0, r4
   116bc:	e8bd8010 	pop	{r4, pc}
   116c0:	00040104 	.word	0x00040104

000116c4 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   116c4:	e242200e 	sub	r2, r2, #14
   116c8:	e16f2f12 	clz	r2, r2
   116cc:	e3510000 	cmp	r1, #0
   116d0:	e1a022a2 	lsr	r2, r2, #5
   116d4:	03a02000 	moveq	r2, #0
   116d8:	e3520000 	cmp	r2, #0
   116dc:	012fff1e 	bxeq	lr
   116e0:	e5d12000 	ldrb	r2, [r1]
   116e4:	e3520000 	cmp	r2, #0
   116e8:	112fff1e 	bxne	lr
   116ec:	e5d13001 	ldrb	r3, [r1, #1]
   116f0:	e3530014 	cmp	r3, #20
   116f4:	112fff1e 	bxne	lr
   116f8:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   116fc:	e92d4070 	push	{r4, r5, r6, lr}
   11700:	e3530000 	cmp	r3, #0
   11704:	e1a04000 	mov	r4, r0
   11708:	08bd8070 	popeq	{r4, r5, r6, pc}
   1170c:	e1a05000 	mov	r5, r0
   11710:	e4953024 	ldr	r3, [r5], #36	; 0x24
   11714:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11718:	e12fff33 	blx	r3
   1171c:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   11720:	e1a01005 	mov	r1, r5
   11724:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   11728:	e2400001 	sub	r0, r0, #1
   1172c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11730:	e12fff13 	bx	r3

00011734 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   11734:	e3510000 	cmp	r1, #0
   11738:	e92d4010 	push	{r4, lr}
   1173c:	0a00003e 	beq	1183c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x108>
   11740:	e5d13000 	ldrb	r3, [r1]
   11744:	e5d12001 	ldrb	r2, [r1, #1]
   11748:	e1833402 	orr	r3, r3, r2, lsl #8
   1174c:	e3530b05 	cmp	r3, #5120	; 0x1400
   11750:	1a00003d 	bne	1184c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x118>
   11754:	e3a0e000 	mov	lr, #0
   11758:	e5d12002 	ldrb	r2, [r1, #2]
   1175c:	e5d1c003 	ldrb	ip, [r1, #3]
   11760:	e59f30f4 	ldr	r3, [pc, #244]	; 1185c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x128>
   11764:	e580e108 	str	lr, [r0, #264]	; 0x108
   11768:	e182240c 	orr	r2, r2, ip, lsl #8
   1176c:	e283e040 	add	lr, r3, #64	; 0x40
   11770:	e3120001 	tst	r2, #1
   11774:	15934000 	ldrne	r4, [r3]
   11778:	1590c108 	ldrne	ip, [r0, #264]	; 0x108
   1177c:	e2833004 	add	r3, r3, #4
   11780:	118cc004 	orrne	ip, ip, r4
   11784:	1580c108 	strne	ip, [r0, #264]	; 0x108
   11788:	e15e0003 	cmp	lr, r3
   1178c:	e1a020a2 	lsr	r2, r2, #1
   11790:	1afffff6 	bne	11770 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x3c>
   11794:	e3a0c000 	mov	ip, #0
   11798:	e1a0200c 	mov	r2, ip
   1179c:	e5d1e007 	ldrb	lr, [r1, #7]
   117a0:	e5d13006 	ldrb	r3, [r1, #6]
   117a4:	e183340e 	orr	r3, r3, lr, lsl #8
   117a8:	e6bf3073 	sxth	r3, r3
   117ac:	e2833902 	add	r3, r3, #32768	; 0x8000
   117b0:	e59fe0a8 	ldr	lr, [pc, #168]	; 11860 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x12c>
   117b4:	e1a03423 	lsr	r3, r3, #8
   117b8:	e0822082 	add	r2, r2, r2, lsl #1
   117bc:	e28cc001 	add	ip, ip, #1
   117c0:	e0802102 	add	r2, r0, r2, lsl #2
   117c4:	e35c0004 	cmp	ip, #4
   117c8:	e5823028 	str	r3, [r2, #40]	; 0x28
   117cc:	0a00000b 	beq	11800 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xcc>
   117d0:	e081208c 	add	r2, r1, ip, lsl #1
   117d4:	e5d24007 	ldrb	r4, [r2, #7]
   117d8:	e5d23006 	ldrb	r3, [r2, #6]
   117dc:	e49e2004 	ldr	r2, [lr], #4
   117e0:	e1833404 	orr	r3, r3, r4, lsl #8
   117e4:	e6bf3073 	sxth	r3, r3
   117e8:	e3c24002 	bic	r4, r2, #2
   117ec:	e2833902 	add	r3, r3, #32768	; 0x8000
   117f0:	e3540001 	cmp	r4, #1
   117f4:	e1a03423 	lsr	r3, r3, #8
   117f8:	026330ff 	rsbeq	r3, r3, #255	; 0xff
   117fc:	eaffffed 	b	117b8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x84>
   11800:	e5d13004 	ldrb	r3, [r1, #4]
   11804:	e5803058 	str	r3, [r0, #88]	; 0x58
   11808:	e1d130d4 	ldrsb	r3, [r1, #4]
   1180c:	e3530000 	cmp	r3, #0
   11810:	b5903108 	ldrlt	r3, [r0, #264]	; 0x108
   11814:	b3833008 	orrlt	r3, r3, #8
   11818:	b5803108 	strlt	r3, [r0, #264]	; 0x108
   1181c:	e5d13005 	ldrb	r3, [r1, #5]
   11820:	e5803064 	str	r3, [r0, #100]	; 0x64
   11824:	e1d130d5 	ldrsb	r3, [r1, #5]
   11828:	e3530000 	cmp	r3, #0
   1182c:	b5903108 	ldrlt	r3, [r0, #264]	; 0x108
   11830:	b3833010 	orrlt	r3, r3, #16
   11834:	b5803108 	strlt	r3, [r0, #264]	; 0x108
   11838:	e8bd8010 	pop	{r4, pc}
   1183c:	e3a02077 	mov	r2, #119	; 0x77
   11840:	e59f101c 	ldr	r1, [pc, #28]	; 11864 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x130>
   11844:	e59f001c 	ldr	r0, [pc, #28]	; 11868 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x134>
   11848:	eb004b8d 	bl	24684 <assertion_failed>
   1184c:	e3a02078 	mov	r2, #120	; 0x78
   11850:	e59f100c 	ldr	r1, [pc, #12]	; 11864 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x130>
   11854:	e59f0010 	ldr	r0, [pc, #16]	; 1186c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x138>
   11858:	eb004b89 	bl	24684 <assertion_failed>
   1185c:	00040148 	.word	0x00040148
   11860:	0004018c 	.word	0x0004018c
   11864:	000400c0 	.word	0x000400c0
   11868:	0003fcf4 	.word	0x0003fcf4
   1186c:	000400d8 	.word	0x000400d8

00011870 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   11870:	e3510004 	cmp	r1, #4
   11874:	9a000001 	bls	11880 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x10>
   11878:	e3a00000 	mov	r0, #0
   1187c:	e12fff1e 	bx	lr
   11880:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11884:	e59f302c 	ldr	r3, [pc, #44]	; 118b8 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x48>
   11888:	e24dd00c 	sub	sp, sp, #12
   1188c:	e0831001 	add	r1, r3, r1
   11890:	e5d1e0a4 	ldrb	lr, [r1, #164]	; 0xa4
   11894:	e59fc020 	ldr	ip, [pc, #32]	; 118bc <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x4c>
   11898:	e3a03000 	mov	r3, #0
   1189c:	e3a02003 	mov	r2, #3
   118a0:	e28d1004 	add	r1, sp, #4
   118a4:	e5cde006 	strb	lr, [sp, #6]
   118a8:	e1cdc0b4 	strh	ip, [sp, #4]
   118ac:	eb000289 	bl	122d8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   118b0:	e28dd00c 	add	sp, sp, #12
   118b4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   118b8:	000400fc 	.word	0x000400fc
   118bc:	00000301 	.word	0x00000301

000118c0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   118c0:	e92d4030 	push	{r4, r5, lr}
   118c4:	e24dd00c 	sub	sp, sp, #12
   118c8:	e1a04001 	mov	r4, r1
   118cc:	e1a05000 	mov	r5, r0
   118d0:	e3a02008 	mov	r2, #8
   118d4:	e1a0000d 	mov	r0, sp
   118d8:	e3a01000 	mov	r1, #0
   118dc:	eb006140 	bl	29de4 <memset>
   118e0:	e3a03008 	mov	r3, #8
   118e4:	e3540001 	cmp	r4, #1
   118e8:	e5cd3001 	strb	r3, [sp, #1]
   118ec:	0a000007 	beq	11910 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   118f0:	e3540002 	cmp	r4, #2
   118f4:	0a00000e 	beq	11934 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x74>
   118f8:	e3540000 	cmp	r4, #0
   118fc:	0a000005 	beq	11918 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x58>
   11900:	e3a020e5 	mov	r2, #229	; 0xe5
   11904:	e59f1034 	ldr	r1, [pc, #52]	; 11940 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x80>
   11908:	e59f0034 	ldr	r0, [pc, #52]	; 11944 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x84>
   1190c:	eb004b5c 	bl	24684 <assertion_failed>
   11910:	e3e03000 	mvn	r3, #0
   11914:	e5cd3004 	strb	r3, [sp, #4]
   11918:	e1a0100d 	mov	r1, sp
   1191c:	e1a00005 	mov	r0, r5
   11920:	e3a03000 	mov	r3, #0
   11924:	e3a02008 	mov	r2, #8
   11928:	eb00026a 	bl	122d8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1192c:	e28dd00c 	add	sp, sp, #12
   11930:	e8bd8030 	pop	{r4, r5, pc}
   11934:	e3e03000 	mvn	r3, #0
   11938:	e5cd3003 	strb	r3, [sp, #3]
   1193c:	eafffff5 	b	11918 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x58>
   11940:	000400c0 	.word	0x000400c0
   11944:	0003f63c 	.word	0x0003f63c

00011948 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   11948:	e92d4010 	push	{r4, lr}
   1194c:	e1a04000 	mov	r4, r0
   11950:	eb00189e 	bl	17bd0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11954:	e59f3008 	ldr	r3, [pc, #8]	; 11964 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)+0x1c>
   11958:	e1a00004 	mov	r0, r4
   1195c:	e5843000 	str	r3, [r4]
   11960:	e8bd8010 	pop	{r4, pc}
   11964:	00040104 	.word	0x00040104

00011968 <CUSBGamePadXbox360Device::Configure()>:
   11968:	e3a0200e 	mov	r2, #14
   1196c:	e2803f4a 	add	r3, r0, #296	; 0x128
   11970:	e92d4010 	push	{r4, lr}
   11974:	e1c320b0 	strh	r2, [r3]
   11978:	e1a04000 	mov	r4, r0
   1197c:	eb001868 	bl	17b24 <CUSBGamePadDevice::Configure()>
   11980:	e3500000 	cmp	r0, #0
   11984:	0a00001e 	beq	11a04 <CUSBGamePadXbox360Device::Configure()+0x9c>
   11988:	e3a03000 	mov	r3, #0
   1198c:	e3a020ff 	mov	r2, #255	; 0xff
   11990:	e3a0c012 	mov	ip, #18
   11994:	e3a00006 	mov	r0, #6
   11998:	e5941000 	ldr	r1, [r4]
   1199c:	e5840024 	str	r0, [r4, #36]	; 0x24
   119a0:	e584302c 	str	r3, [r4, #44]	; 0x2c
   119a4:	e5843038 	str	r3, [r4, #56]	; 0x38
   119a8:	e5843044 	str	r3, [r4, #68]	; 0x44
   119ac:	e5843050 	str	r3, [r4, #80]	; 0x50
   119b0:	e584305c 	str	r3, [r4, #92]	; 0x5c
   119b4:	e5843068 	str	r3, [r4, #104]	; 0x68
   119b8:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   119bc:	e1a00004 	mov	r0, r4
   119c0:	e5913034 	ldr	r3, [r1, #52]	; 0x34
   119c4:	e584c104 	str	ip, [r4, #260]	; 0x104
   119c8:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   119cc:	e5842030 	str	r2, [r4, #48]	; 0x30
   119d0:	e584203c 	str	r2, [r4, #60]	; 0x3c
   119d4:	e5842048 	str	r2, [r4, #72]	; 0x48
   119d8:	e5842054 	str	r2, [r4, #84]	; 0x54
   119dc:	e5842060 	str	r2, [r4, #96]	; 0x60
   119e0:	e584206c 	str	r2, [r4, #108]	; 0x6c
   119e4:	e12fff33 	blx	r3
   119e8:	e3500000 	cmp	r0, #0
   119ec:	1a000001 	bne	119f8 <CUSBGamePadXbox360Device::Configure()+0x90>
   119f0:	e3a00000 	mov	r0, #0
   119f4:	e8bd8010 	pop	{r4, pc}
   119f8:	e1a00004 	mov	r0, r4
   119fc:	e8bd4010 	pop	{r4, lr}
   11a00:	ea0002bd 	b	124fc <CUSBHIDDevice::StartRequest()>
   11a04:	eb005406 	bl	26a24 <CLogger::Get()>
   11a08:	e3a02001 	mov	r2, #1
   11a0c:	e59f300c 	ldr	r3, [pc, #12]	; 11a20 <CUSBGamePadXbox360Device::Configure()+0xb8>
   11a10:	e59f100c 	ldr	r1, [pc, #12]	; 11a24 <CUSBGamePadXbox360Device::Configure()+0xbc>
   11a14:	eb005344 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11a18:	e3a00000 	mov	r0, #0
   11a1c:	e8bd8010 	pop	{r4, pc}
   11a20:	0003fc98 	.word	0x0003fc98
   11a24:	000401a8 	.word	0x000401a8

00011a28 <CUSBGamePadXbox360Device::GetProperties()>:
   11a28:	e3a0000b 	mov	r0, #11
   11a2c:	e12fff1e 	bx	lr

00011a30 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   11a30:	e3a02000 	mov	r2, #0
   11a34:	e5d13004 	ldrb	r3, [r1, #4]
   11a38:	e5802108 	str	r2, [r0, #264]	; 0x108
   11a3c:	e3130004 	tst	r3, #4
   11a40:	13a02901 	movne	r2, #16384	; 0x4000
   11a44:	15802108 	strne	r2, [r0, #264]	; 0x108
   11a48:	e3130008 	tst	r3, #8
   11a4c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11a50:	13822b02 	orrne	r2, r2, #2048	; 0x800
   11a54:	15802108 	strne	r2, [r0, #264]	; 0x108
   11a58:	e3130010 	tst	r3, #16
   11a5c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11a60:	13822c02 	orrne	r2, r2, #512	; 0x200
   11a64:	15802108 	strne	r2, [r0, #264]	; 0x108
   11a68:	e3130020 	tst	r3, #32
   11a6c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11a70:	13822c01 	orrne	r2, r2, #256	; 0x100
   11a74:	15802108 	strne	r2, [r0, #264]	; 0x108
   11a78:	e3130040 	tst	r3, #64	; 0x40
   11a7c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11a80:	13822b01 	orrne	r2, r2, #1024	; 0x400
   11a84:	15802108 	strne	r2, [r0, #264]	; 0x108
   11a88:	e1b033a3 	lsrs	r3, r3, #7
   11a8c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11a90:	13833080 	orrne	r3, r3, #128	; 0x80
   11a94:	15803108 	strne	r3, [r0, #264]	; 0x108
   11a98:	e5d13005 	ldrb	r3, [r1, #5]
   11a9c:	e3130001 	tst	r3, #1
   11aa0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11aa4:	13822902 	orrne	r2, r2, #32768	; 0x8000
   11aa8:	15802108 	strne	r2, [r0, #264]	; 0x108
   11aac:	e3130002 	tst	r3, #2
   11ab0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11ab4:	13822802 	orrne	r2, r2, #131072	; 0x20000
   11ab8:	15802108 	strne	r2, [r0, #264]	; 0x108
   11abc:	e3130004 	tst	r3, #4
   11ac0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11ac4:	13822701 	orrne	r2, r2, #262144	; 0x40000
   11ac8:	15802108 	strne	r2, [r0, #264]	; 0x108
   11acc:	e3130008 	tst	r3, #8
   11ad0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11ad4:	13822801 	orrne	r2, r2, #65536	; 0x10000
   11ad8:	15802108 	strne	r2, [r0, #264]	; 0x108
   11adc:	e3130010 	tst	r3, #16
   11ae0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11ae4:	13822020 	orrne	r2, r2, #32
   11ae8:	15802108 	strne	r2, [r0, #264]	; 0x108
   11aec:	e3130020 	tst	r3, #32
   11af0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11af4:	13822040 	orrne	r2, r2, #64	; 0x40
   11af8:	15802108 	strne	r2, [r0, #264]	; 0x108
   11afc:	e3130040 	tst	r3, #64	; 0x40
   11b00:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b04:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   11b08:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b0c:	e1b033a3 	lsrs	r3, r3, #7
   11b10:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11b14:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   11b18:	15803108 	strne	r3, [r0, #264]	; 0x108
   11b1c:	e5d12007 	ldrb	r2, [r1, #7]
   11b20:	e5d13006 	ldrb	r3, [r1, #6]
   11b24:	e1833402 	orr	r3, r3, r2, lsl #8
   11b28:	e1a03143 	asr	r3, r3, #2
   11b2c:	e353007f 	cmp	r3, #127	; 0x7f
   11b30:	e5803058 	str	r3, [r0, #88]	; 0x58
   11b34:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   11b38:	c3833008 	orrgt	r3, r3, #8
   11b3c:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   11b40:	e5d12009 	ldrb	r2, [r1, #9]
   11b44:	e5d13008 	ldrb	r3, [r1, #8]
   11b48:	e1833402 	orr	r3, r3, r2, lsl #8
   11b4c:	e1a03143 	asr	r3, r3, #2
   11b50:	e353007f 	cmp	r3, #127	; 0x7f
   11b54:	e5803064 	str	r3, [r0, #100]	; 0x64
   11b58:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   11b5c:	c3833010 	orrgt	r3, r3, #16
   11b60:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   11b64:	e5d1200b 	ldrb	r2, [r1, #11]
   11b68:	e5d1300a 	ldrb	r3, [r1, #10]
   11b6c:	e1833402 	orr	r3, r3, r2, lsl #8
   11b70:	e6bf3073 	sxth	r3, r3
   11b74:	e2833902 	add	r3, r3, #32768	; 0x8000
   11b78:	e1a03423 	lsr	r3, r3, #8
   11b7c:	e5803028 	str	r3, [r0, #40]	; 0x28
   11b80:	e5d1200d 	ldrb	r2, [r1, #13]
   11b84:	e5d1300c 	ldrb	r3, [r1, #12]
   11b88:	e1833402 	orr	r3, r3, r2, lsl #8
   11b8c:	e6bf3073 	sxth	r3, r3
   11b90:	e2833902 	add	r3, r3, #32768	; 0x8000
   11b94:	e1a03423 	lsr	r3, r3, #8
   11b98:	e22330ff 	eor	r3, r3, #255	; 0xff
   11b9c:	e5803034 	str	r3, [r0, #52]	; 0x34
   11ba0:	e5d1200f 	ldrb	r2, [r1, #15]
   11ba4:	e5d1300e 	ldrb	r3, [r1, #14]
   11ba8:	e1833402 	orr	r3, r3, r2, lsl #8
   11bac:	e6bf3073 	sxth	r3, r3
   11bb0:	e2833902 	add	r3, r3, #32768	; 0x8000
   11bb4:	e1a03423 	lsr	r3, r3, #8
   11bb8:	e5803040 	str	r3, [r0, #64]	; 0x40
   11bbc:	e5d13010 	ldrb	r3, [r1, #16]
   11bc0:	e5d12011 	ldrb	r2, [r1, #17]
   11bc4:	e1833402 	orr	r3, r3, r2, lsl #8
   11bc8:	e6bf3073 	sxth	r3, r3
   11bcc:	e2833902 	add	r3, r3, #32768	; 0x8000
   11bd0:	e1a03423 	lsr	r3, r3, #8
   11bd4:	e22330ff 	eor	r3, r3, #255	; 0xff
   11bd8:	e580304c 	str	r3, [r0, #76]	; 0x4c
   11bdc:	e12fff1e 	bx	lr

00011be0 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   11be0:	e92d4010 	push	{r4, lr}
   11be4:	e1a04000 	mov	r4, r0
   11be8:	e59f300c 	ldr	r3, [pc, #12]	; 11bfc <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x1c>
   11bec:	e5803000 	str	r3, [r0]
   11bf0:	eb001807 	bl	17c14 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11bf4:	e1a00004 	mov	r0, r4
   11bf8:	e8bd8010 	pop	{r4, pc}
   11bfc:	00040204 	.word	0x00040204

00011c00 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   11c00:	e92d4010 	push	{r4, lr}
   11c04:	e1a04000 	mov	r4, r0
   11c08:	e59f3018 	ldr	r3, [pc, #24]	; 11c28 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x28>
   11c0c:	e5803000 	str	r3, [r0]
   11c10:	eb0017ff 	bl	17c14 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11c14:	e1a00004 	mov	r0, r4
   11c18:	e3a01f4d 	mov	r1, #308	; 0x134
   11c1c:	eb0064ad 	bl	2aed8 <operator delete(void*, unsigned int)>
   11c20:	e1a00004 	mov	r0, r4
   11c24:	e8bd8010 	pop	{r4, pc}
   11c28:	00040204 	.word	0x00040204

00011c2c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   11c2c:	e251c000 	subs	ip, r1, #0
   11c30:	012fff1e 	bxeq	lr
   11c34:	e92d4030 	push	{r4, r5, lr}
   11c38:	e3520006 	cmp	r2, #6
   11c3c:	e1a04000 	mov	r4, r0
   11c40:	e24dd014 	sub	sp, sp, #20
   11c44:	0a000009 	beq	11c70 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
   11c48:	e2422012 	sub	r2, r2, #18
   11c4c:	e16f2f12 	clz	r2, r2
   11c50:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   11c54:	e1a022a2 	lsr	r2, r2, #5
   11c58:	e3530000 	cmp	r3, #0
   11c5c:	03a02000 	moveq	r2, #0
   11c60:	e3520000 	cmp	r2, #0
   11c64:	1a00001b 	bne	11cd8 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xac>
   11c68:	e28dd014 	add	sp, sp, #20
   11c6c:	e8bd8030 	pop	{r4, r5, pc}
   11c70:	e5dc3000 	ldrb	r3, [ip]
   11c74:	e3530007 	cmp	r3, #7
   11c78:	1afffffa 	bne	11c68 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11c7c:	e5dc3001 	ldrb	r3, [ip, #1]
   11c80:	e3530030 	cmp	r3, #48	; 0x30
   11c84:	1afffff7 	bne	11c68 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11c88:	e1a0e00d 	mov	lr, sp
   11c8c:	e59f5078 	ldr	r5, [pc, #120]	; 11d0c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe0>
   11c90:	e5dcc002 	ldrb	ip, [ip, #2]
   11c94:	e895000f 	ldm	r5, {r0, r1, r2, r3}
   11c98:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   11c9c:	e1a00004 	mov	r0, r4
   11ca0:	e5ce3000 	strb	r3, [lr]
   11ca4:	e3a0200d 	mov	r2, #13
   11ca8:	e3a03000 	mov	r3, #0
   11cac:	e1a0100d 	mov	r1, sp
   11cb0:	e5cdc002 	strb	ip, [sp, #2]
   11cb4:	eb0001ab 	bl	12368 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   11cb8:	e3500000 	cmp	r0, #0
   11cbc:	1affffe9 	bne	11c68 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11cc0:	eb005357 	bl	26a24 <CLogger::Get()>
   11cc4:	e3a02001 	mov	r2, #1
   11cc8:	e59f3040 	ldr	r3, [pc, #64]	; 11d10 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
   11ccc:	e2851010 	add	r1, r5, #16
   11cd0:	eb005295 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11cd4:	eaffffe3 	b	11c68 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11cd8:	e5dc3000 	ldrb	r3, [ip]
   11cdc:	e3530020 	cmp	r3, #32
   11ce0:	1affffe0 	bne	11c68 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11ce4:	e1a05000 	mov	r5, r0
   11ce8:	e4953024 	ldr	r3, [r5], #36	; 0x24
   11cec:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11cf0:	e12fff33 	blx	r3
   11cf4:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   11cf8:	e1a01005 	mov	r1, r5
   11cfc:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   11d00:	e2400001 	sub	r0, r0, #1
   11d04:	e12fff33 	blx	r3
   11d08:	eaffffd6 	b	11c68 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11d0c:	00040248 	.word	0x00040248
   11d10:	000401b8 	.word	0x000401b8

00011d14 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   11d14:	e92d4010 	push	{r4, lr}
   11d18:	e24dd010 	sub	sp, sp, #16
   11d1c:	e1a0c00d 	mov	ip, sp
   11d20:	e1a04000 	mov	r4, r0
   11d24:	e59f3074 	ldr	r3, [pc, #116]	; 11da0 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   11d28:	e1a0e001 	mov	lr, r1
   11d2c:	e3510001 	cmp	r1, #1
   11d30:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   11d34:	e8ac0007 	stmia	ip!, {r0, r1, r2}
   11d38:	e1a00004 	mov	r0, r4
   11d3c:	e5cc3000 	strb	r3, [ip]
   11d40:	0a000007 	beq	11d64 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   11d44:	e35e0002 	cmp	lr, #2
   11d48:	0a000011 	beq	11d94 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x80>
   11d4c:	e35e0000 	cmp	lr, #0
   11d50:	0a000005 	beq	11d6c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x58>
   11d54:	e3a020ee 	mov	r2, #238	; 0xee
   11d58:	e59f1044 	ldr	r1, [pc, #68]	; 11da4 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x90>
   11d5c:	e59f0044 	ldr	r0, [pc, #68]	; 11da8 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x94>
   11d60:	eb004a47 	bl	24684 <assertion_failed>
   11d64:	e3e03000 	mvn	r3, #0
   11d68:	e5cd3009 	strb	r3, [sp, #9]
   11d6c:	e5d0c130 	ldrb	ip, [r0, #304]	; 0x130
   11d70:	e1a0100d 	mov	r1, sp
   11d74:	e28c3001 	add	r3, ip, #1
   11d78:	e3a0200d 	mov	r2, #13
   11d7c:	e5c03130 	strb	r3, [r0, #304]	; 0x130
   11d80:	e3a03000 	mov	r3, #0
   11d84:	e5cdc002 	strb	ip, [sp, #2]
   11d88:	eb000152 	bl	122d8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11d8c:	e28dd010 	add	sp, sp, #16
   11d90:	e8bd8010 	pop	{r4, pc}
   11d94:	e3e03000 	mvn	r3, #0
   11d98:	e5cd3008 	strb	r3, [sp, #8]
   11d9c:	eafffff2 	b	11d6c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x58>
   11da0:	00040268 	.word	0x00040268
   11da4:	000401cc 	.word	0x000401cc
   11da8:	0003f63c 	.word	0x0003f63c

00011dac <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   11dac:	e92d4010 	push	{r4, lr}
   11db0:	e1a04000 	mov	r4, r0
   11db4:	eb001785 	bl	17bd0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11db8:	e3a02000 	mov	r2, #0
   11dbc:	e59f300c 	ldr	r3, [pc, #12]	; 11dd0 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)+0x24>
   11dc0:	e1a00004 	mov	r0, r4
   11dc4:	e5c42130 	strb	r2, [r4, #304]	; 0x130
   11dc8:	e5843000 	str	r3, [r4]
   11dcc:	e8bd8010 	pop	{r4, pc}
   11dd0:	00040204 	.word	0x00040204

00011dd4 <CUSBGamePadXboxOneDevice::Configure()>:
   11dd4:	e3a02040 	mov	r2, #64	; 0x40
   11dd8:	e92d4070 	push	{r4, r5, r6, lr}
   11ddc:	e2803f4a 	add	r3, r0, #296	; 0x128
   11de0:	e24dd008 	sub	sp, sp, #8
   11de4:	e1c320b0 	strh	r2, [r3]
   11de8:	e1a04000 	mov	r4, r0
   11dec:	eb00174c 	bl	17b24 <CUSBGamePadDevice::Configure()>
   11df0:	e2505000 	subs	r5, r0, #0
   11df4:	0a00002a 	beq	11ea4 <CUSBGamePadXboxOneDevice::Configure()+0xd0>
   11df8:	e3a03000 	mov	r3, #0
   11dfc:	e3a020ff 	mov	r2, #255	; 0xff
   11e00:	e3a01010 	mov	r1, #16
   11e04:	e3a0c006 	mov	ip, #6
   11e08:	e59f60b4 	ldr	r6, [pc, #180]	; 11ec4 <CUSBGamePadXboxOneDevice::Configure()+0xf0>
   11e0c:	e5841104 	str	r1, [r4, #260]	; 0x104
   11e10:	e5842030 	str	r2, [r4, #48]	; 0x30
   11e14:	e8960003 	ldm	r6, {r0, r1}
   11e18:	e584203c 	str	r2, [r4, #60]	; 0x3c
   11e1c:	e58d0000 	str	r0, [sp]
   11e20:	e5cd1004 	strb	r1, [sp, #4]
   11e24:	e5842048 	str	r2, [r4, #72]	; 0x48
   11e28:	e5842054 	str	r2, [r4, #84]	; 0x54
   11e2c:	e5842060 	str	r2, [r4, #96]	; 0x60
   11e30:	e584206c 	str	r2, [r4, #108]	; 0x6c
   11e34:	e1a0100d 	mov	r1, sp
   11e38:	e3a02005 	mov	r2, #5
   11e3c:	e1a00004 	mov	r0, r4
   11e40:	e584c024 	str	ip, [r4, #36]	; 0x24
   11e44:	e584302c 	str	r3, [r4, #44]	; 0x2c
   11e48:	e5843038 	str	r3, [r4, #56]	; 0x38
   11e4c:	e5843044 	str	r3, [r4, #68]	; 0x44
   11e50:	e5843050 	str	r3, [r4, #80]	; 0x50
   11e54:	e584305c 	str	r3, [r4, #92]	; 0x5c
   11e58:	e5843068 	str	r3, [r4, #104]	; 0x68
   11e5c:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   11e60:	eb00011c 	bl	122d8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11e64:	e2505000 	subs	r5, r0, #0
   11e68:	0a000005 	beq	11e84 <CUSBGamePadXboxOneDevice::Configure()+0xb0>
   11e6c:	e1a00004 	mov	r0, r4
   11e70:	eb0001a1 	bl	124fc <CUSBHIDDevice::StartRequest()>
   11e74:	e1a05000 	mov	r5, r0
   11e78:	e1a00005 	mov	r0, r5
   11e7c:	e28dd008 	add	sp, sp, #8
   11e80:	e8bd8070 	pop	{r4, r5, r6, pc}
   11e84:	eb0052e6 	bl	26a24 <CLogger::Get()>
   11e88:	e3a02001 	mov	r2, #1
   11e8c:	e59f3034 	ldr	r3, [pc, #52]	; 11ec8 <CUSBGamePadXboxOneDevice::Configure()+0xf4>
   11e90:	e2461020 	sub	r1, r6, #32
   11e94:	eb005224 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11e98:	e1a00005 	mov	r0, r5
   11e9c:	e28dd008 	add	sp, sp, #8
   11ea0:	e8bd8070 	pop	{r4, r5, r6, pc}
   11ea4:	eb0052de 	bl	26a24 <CLogger::Get()>
   11ea8:	e3a02001 	mov	r2, #1
   11eac:	e59f3018 	ldr	r3, [pc, #24]	; 11ecc <CUSBGamePadXboxOneDevice::Configure()+0xf8>
   11eb0:	e59f1018 	ldr	r1, [pc, #24]	; 11ed0 <CUSBGamePadXboxOneDevice::Configure()+0xfc>
   11eb4:	eb00521c 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11eb8:	e1a00005 	mov	r0, r5
   11ebc:	e28dd008 	add	sp, sp, #8
   11ec0:	e8bd8070 	pop	{r4, r5, r6, pc}
   11ec4:	00040278 	.word	0x00040278
   11ec8:	000401e4 	.word	0x000401e4
   11ecc:	0003fc98 	.word	0x0003fc98
   11ed0:	00040258 	.word	0x00040258

00011ed4 <CUSBGamePadXboxOneDevice::GetProperties()>:
   11ed4:	e3a00009 	mov	r0, #9
   11ed8:	e12fff1e 	bx	lr

00011edc <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   11edc:	e92d4070 	push	{r4, r5, r6, lr}
   11ee0:	e2504000 	subs	r4, r0, #0
   11ee4:	0a000017 	beq	11f48 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x6c>
   11ee8:	e1a05001 	mov	r5, r1
   11eec:	eb00092d 	bl	143a8 <CUSBRequest::GetStatus() const>
   11ef0:	e3500000 	cmp	r0, #0
   11ef4:	0a00000d 	beq	11f30 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x54>
   11ef8:	e1a00004 	mov	r0, r4
   11efc:	eb00091a 	bl	1436c <CUSBRequest::~CUSBRequest()>
   11f00:	e1a00004 	mov	r0, r4
   11f04:	e3a01028 	mov	r1, #40	; 0x28
   11f08:	eb00098d 	bl	14544 <CUSBRequest::operator delete(void*, unsigned int)>
   11f0c:	e3550000 	cmp	r5, #0
   11f10:	1a000003 	bne	11f24 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x48>
   11f14:	e3a020b8 	mov	r2, #184	; 0xb8
   11f18:	e59f1038 	ldr	r1, [pc, #56]	; 11f58 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x7c>
   11f1c:	e59f0038 	ldr	r0, [pc, #56]	; 11f5c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x80>
   11f20:	eb0049d7 	bl	24684 <assertion_failed>
   11f24:	e1a00005 	mov	r0, r5
   11f28:	e8bd4070 	pop	{r4, r5, r6, lr}
   11f2c:	ea0063e8 	b	2aed4 <operator delete[](void*)>
   11f30:	eb0052bb 	bl	26a24 <CLogger::Get()>
   11f34:	e3a02002 	mov	r2, #2
   11f38:	e59f3020 	ldr	r3, [pc, #32]	; 11f60 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x84>
   11f3c:	e59f1020 	ldr	r1, [pc, #32]	; 11f64 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x88>
   11f40:	eb0051f9 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11f44:	eaffffeb 	b	11ef8 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x1c>
   11f48:	e3a020af 	mov	r2, #175	; 0xaf
   11f4c:	e59f1004 	ldr	r1, [pc, #4]	; 11f58 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x7c>
   11f50:	e59f0010 	ldr	r0, [pc, #16]	; 11f68 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x8c>
   11f54:	eb0049ca 	bl	24684 <assertion_failed>
   11f58:	00040280 	.word	0x00040280
   11f5c:	000402b0 	.word	0x000402b0
   11f60:	00040294 	.word	0x00040294
   11f64:	00040384 	.word	0x00040384
   11f68:	0003eb24 	.word	0x0003eb24

00011f6c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   11f6c:	e92d4070 	push	{r4, r5, r6, lr}
   11f70:	e1a04000 	mov	r4, r0
   11f74:	e1a05002 	mov	r5, r2
   11f78:	ebfff5d1 	bl	f6c4 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   11f7c:	e3a03000 	mov	r3, #0
   11f80:	e59f2038 	ldr	r2, [pc, #56]	; 11fc0 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x54>
   11f84:	e1550003 	cmp	r5, r3
   11f88:	e5845010 	str	r5, [r4, #16]
   11f8c:	e5842000 	str	r2, [r4]
   11f90:	e5843014 	str	r3, [r4, #20]
   11f94:	e5843018 	str	r3, [r4, #24]
   11f98:	e584301c 	str	r3, [r4, #28]
   11f9c:	e5843020 	str	r3, [r4, #32]
   11fa0:	1a000001 	bne	11fac <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x40>
   11fa4:	e1a00004 	mov	r0, r4
   11fa8:	e8bd8070 	pop	{r4, r5, r6, pc}
   11fac:	e1a00005 	mov	r0, r5
   11fb0:	eb0063c0 	bl	2aeb8 <operator new[](unsigned int)>
   11fb4:	e5840020 	str	r0, [r4, #32]
   11fb8:	e1a00004 	mov	r0, r4
   11fbc:	e8bd8070 	pop	{r4, r5, r6, pc}
   11fc0:	00040394 	.word	0x00040394

00011fc4 <CUSBHIDDevice::~CUSBHIDDevice()>:
   11fc4:	e92d4070 	push	{r4, r5, r6, lr}
   11fc8:	e1a04000 	mov	r4, r0
   11fcc:	e5900020 	ldr	r0, [r0, #32]
   11fd0:	e59f3074 	ldr	r3, [pc, #116]	; 1204c <CUSBHIDDevice::~CUSBHIDDevice()+0x88>
   11fd4:	e3500000 	cmp	r0, #0
   11fd8:	e5843000 	str	r3, [r4]
   11fdc:	0a000000 	beq	11fe4 <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
   11fe0:	eb0063bb 	bl	2aed4 <operator delete[](void*)>
   11fe4:	e3a03000 	mov	r3, #0
   11fe8:	e5945018 	ldr	r5, [r4, #24]
   11fec:	e5843020 	str	r3, [r4, #32]
   11ff0:	e1550003 	cmp	r5, r3
   11ff4:	0a000004 	beq	1200c <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   11ff8:	e1a00005 	mov	r0, r5
   11ffc:	ebfff4b1 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   12000:	e1a00005 	mov	r0, r5
   12004:	e3a01014 	mov	r1, #20
   12008:	eb0063b2 	bl	2aed8 <operator delete(void*, unsigned int)>
   1200c:	e3a03000 	mov	r3, #0
   12010:	e5945014 	ldr	r5, [r4, #20]
   12014:	e5843018 	str	r3, [r4, #24]
   12018:	e1550003 	cmp	r5, r3
   1201c:	0a000004 	beq	12034 <CUSBHIDDevice::~CUSBHIDDevice()+0x70>
   12020:	e1a00005 	mov	r0, r5
   12024:	ebfff4a7 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   12028:	e1a00005 	mov	r0, r5
   1202c:	e3a01014 	mov	r1, #20
   12030:	eb0063a8 	bl	2aed8 <operator delete(void*, unsigned int)>
   12034:	e3a03000 	mov	r3, #0
   12038:	e1a00004 	mov	r0, r4
   1203c:	e5843014 	str	r3, [r4, #20]
   12040:	ebfff50d 	bl	f47c <CUSBFunction::~CUSBFunction()>
   12044:	e1a00004 	mov	r0, r4
   12048:	e8bd8070 	pop	{r4, r5, r6, pc}
   1204c:	00040394 	.word	0x00040394

00012050 <CUSBHIDDevice::~CUSBHIDDevice()>:
   12050:	e92d4010 	push	{r4, lr}
   12054:	e1a04000 	mov	r4, r0
   12058:	ebffffd9 	bl	11fc4 <CUSBHIDDevice::~CUSBHIDDevice()>
   1205c:	e1a00004 	mov	r0, r4
   12060:	e3a01024 	mov	r1, #36	; 0x24
   12064:	eb00639b 	bl	2aed8 <operator delete(void*, unsigned int)>
   12068:	e1a00004 	mov	r0, r4
   1206c:	e8bd8010 	pop	{r4, pc}

00012070 <CUSBHIDDevice::Configure(unsigned int)>:
   12070:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12074:	e24dd01c 	sub	sp, sp, #28
   12078:	e1a07001 	mov	r7, r1
   1207c:	e1a05000 	mov	r5, r0
   12080:	ebfff5e2 	bl	f810 <CUSBFunction::GetNumEndpoints() const>
   12084:	e2506000 	subs	r6, r0, #0
   12088:	1a000004 	bne	120a0 <CUSBHIDDevice::Configure(unsigned int)+0x30>
   1208c:	ea000052 	b	121dc <CUSBHIDDevice::Configure(unsigned int)+0x16c>
   12090:	e5d43003 	ldrb	r3, [r4, #3]
   12094:	e203303f 	and	r3, r3, #63	; 0x3f
   12098:	e3530003 	cmp	r3, #3
   1209c:	0a00001e 	beq	1211c <CUSBHIDDevice::Configure(unsigned int)+0xac>
   120a0:	e3a01005 	mov	r1, #5
   120a4:	e1a00005 	mov	r0, r5
   120a8:	ebfff604 	bl	f8c0 <CUSBFunction::GetDescriptor(unsigned char)>
   120ac:	e2504000 	subs	r4, r0, #0
   120b0:	1afffff6 	bne	12090 <CUSBHIDDevice::Configure(unsigned int)+0x20>
   120b4:	e5956014 	ldr	r6, [r5, #20]
   120b8:	e1a00005 	mov	r0, r5
   120bc:	e3560000 	cmp	r6, #0
   120c0:	0a00004b 	beq	121f4 <CUSBHIDDevice::Configure(unsigned int)+0x184>
   120c4:	ebfff515 	bl	f520 <CUSBFunction::Configure()>
   120c8:	e2506000 	subs	r6, r0, #0
   120cc:	0a000033 	beq	121a0 <CUSBHIDDevice::Configure(unsigned int)+0x130>
   120d0:	e1a00005 	mov	r0, r5
   120d4:	ebfff656 	bl	fa34 <CUSBFunction::GetInterfaceClass() const>
   120d8:	e3500003 	cmp	r0, #3
   120dc:	0a000049 	beq	12208 <CUSBHIDDevice::Configure(unsigned int)+0x198>
   120e0:	e5953010 	ldr	r3, [r5, #16]
   120e4:	e3530000 	cmp	r3, #0
   120e8:	1a000034 	bne	121c0 <CUSBHIDDevice::Configure(unsigned int)+0x150>
   120ec:	e3570000 	cmp	r7, #0
   120f0:	e5857010 	str	r7, [r5, #16]
   120f4:	0a000064 	beq	1228c <CUSBHIDDevice::Configure(unsigned int)+0x21c>
   120f8:	e5953020 	ldr	r3, [r5, #32]
   120fc:	e3530000 	cmp	r3, #0
   12100:	1a000069 	bne	122ac <CUSBHIDDevice::Configure(unsigned int)+0x23c>
   12104:	e1a00007 	mov	r0, r7
   12108:	eb00636a 	bl	2aeb8 <operator new[](unsigned int)>
   1210c:	e5850020 	str	r0, [r5, #32]
   12110:	e1a00006 	mov	r0, r6
   12114:	e28dd01c 	add	sp, sp, #28
   12118:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1211c:	e1d430d2 	ldrsb	r3, [r4, #2]
   12120:	e3530000 	cmp	r3, #0
   12124:	ba00000e 	blt	12164 <CUSBHIDDevice::Configure(unsigned int)+0xf4>
   12128:	e5953018 	ldr	r3, [r5, #24]
   1212c:	e1a00005 	mov	r0, r5
   12130:	e3530000 	cmp	r3, #0
   12134:	1a000058 	bne	1229c <CUSBHIDDevice::Configure(unsigned int)+0x22c>
   12138:	ebfff5c0 	bl	f840 <CUSBFunction::GetDevice() const>
   1213c:	e1a01000 	mov	r1, r0
   12140:	e3a00014 	mov	r0, #20
   12144:	e58d1014 	str	r1, [sp, #20]
   12148:	eb006354 	bl	2aea0 <operator new(unsigned int)>
   1214c:	e1a06000 	mov	r6, r0
   12150:	e1a02004 	mov	r2, r4
   12154:	e59d1014 	ldr	r1, [sp, #20]
   12158:	ebfff3f6 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1215c:	e5856018 	str	r6, [r5, #24]
   12160:	eaffffce 	b	120a0 <CUSBHIDDevice::Configure(unsigned int)+0x30>
   12164:	e5953014 	ldr	r3, [r5, #20]
   12168:	e1a00005 	mov	r0, r5
   1216c:	e3530000 	cmp	r3, #0
   12170:	1a000049 	bne	1229c <CUSBHIDDevice::Configure(unsigned int)+0x22c>
   12174:	ebfff5b1 	bl	f840 <CUSBFunction::GetDevice() const>
   12178:	e1a01000 	mov	r1, r0
   1217c:	e3a00014 	mov	r0, #20
   12180:	e58d1014 	str	r1, [sp, #20]
   12184:	eb006345 	bl	2aea0 <operator new(unsigned int)>
   12188:	e1a06000 	mov	r6, r0
   1218c:	e1a02004 	mov	r2, r4
   12190:	e59d1014 	ldr	r1, [sp, #20]
   12194:	ebfff3e7 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12198:	e5856014 	str	r6, [r5, #20]
   1219c:	eaffffbf 	b	120a0 <CUSBHIDDevice::Configure(unsigned int)+0x30>
   121a0:	eb00521f 	bl	26a24 <CLogger::Get()>
   121a4:	e3a02001 	mov	r2, #1
   121a8:	e59f310c 	ldr	r3, [pc, #268]	; 122bc <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   121ac:	e59f110c 	ldr	r1, [pc, #268]	; 122c0 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   121b0:	eb00515d 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   121b4:	e1a00006 	mov	r0, r6
   121b8:	e28dd01c 	add	sp, sp, #28
   121bc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   121c0:	e5953020 	ldr	r3, [r5, #32]
   121c4:	e3530000 	cmp	r3, #0
   121c8:	1afffff9 	bne	121b4 <CUSBHIDDevice::Configure(unsigned int)+0x144>
   121cc:	e3a02082 	mov	r2, #130	; 0x82
   121d0:	e59f10ec 	ldr	r1, [pc, #236]	; 122c4 <CUSBHIDDevice::Configure(unsigned int)+0x254>
   121d4:	e59f00ec 	ldr	r0, [pc, #236]	; 122c8 <CUSBHIDDevice::Configure(unsigned int)+0x258>
   121d8:	eb004929 	bl	24684 <assertion_failed>
   121dc:	e1a00005 	mov	r0, r5
   121e0:	e59f10d8 	ldr	r1, [pc, #216]	; 122c0 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   121e4:	ebfff5c0 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   121e8:	e1a00006 	mov	r0, r6
   121ec:	e28dd01c 	add	sp, sp, #28
   121f0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   121f4:	e59f10c4 	ldr	r1, [pc, #196]	; 122c0 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   121f8:	ebfff5bb 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   121fc:	e1a00006 	mov	r0, r6
   12200:	e28dd01c 	add	sp, sp, #28
   12204:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12208:	e1a00005 	mov	r0, r5
   1220c:	ebfff614 	bl	fa64 <CUSBFunction::GetInterfaceSubClass() const>
   12210:	e3500001 	cmp	r0, #1
   12214:	e1a08000 	mov	r8, r0
   12218:	1affffb0 	bne	120e0 <CUSBHIDDevice::Configure(unsigned int)+0x70>
   1221c:	e1a00005 	mov	r0, r5
   12220:	ebfff59b 	bl	f894 <CUSBFunction::GetHost() const>
   12224:	e1a09000 	mov	r9, r0
   12228:	e1a00005 	mov	r0, r5
   1222c:	ebfff58d 	bl	f868 <CUSBFunction::GetEndpoint0() const>
   12230:	e1a01000 	mov	r1, r0
   12234:	e1a00005 	mov	r0, r5
   12238:	e58d1014 	str	r1, [sp, #20]
   1223c:	ebfff5f0 	bl	fa04 <CUSBFunction::GetInterfaceNumber() const>
   12240:	e6ff3070 	uxth	r3, r0
   12244:	e58d3004 	str	r3, [sp, #4]
   12248:	e1a00009 	mov	r0, r9
   1224c:	e3a0300b 	mov	r3, #11
   12250:	e3a02021 	mov	r2, #33	; 0x21
   12254:	e59d1014 	ldr	r1, [sp, #20]
   12258:	e58d400c 	str	r4, [sp, #12]
   1225c:	e58d4008 	str	r4, [sp, #8]
   12260:	e58d4000 	str	r4, [sp]
   12264:	eb000136 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12268:	e3500000 	cmp	r0, #0
   1226c:	aaffff9b 	bge	120e0 <CUSBHIDDevice::Configure(unsigned int)+0x70>
   12270:	eb0051eb 	bl	26a24 <CLogger::Get()>
   12274:	e1a02008 	mov	r2, r8
   12278:	e59f304c 	ldr	r3, [pc, #76]	; 122cc <CUSBHIDDevice::Configure(unsigned int)+0x25c>
   1227c:	e59f103c 	ldr	r1, [pc, #60]	; 122c0 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   12280:	e1a06004 	mov	r6, r4
   12284:	eb005128 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12288:	eaffffc9 	b	121b4 <CUSBHIDDevice::Configure(unsigned int)+0x144>
   1228c:	e3a0207d 	mov	r2, #125	; 0x7d
   12290:	e59f102c 	ldr	r1, [pc, #44]	; 122c4 <CUSBHIDDevice::Configure(unsigned int)+0x254>
   12294:	e59f0034 	ldr	r0, [pc, #52]	; 122d0 <CUSBHIDDevice::Configure(unsigned int)+0x260>
   12298:	eb0048f9 	bl	24684 <assertion_failed>
   1229c:	e59f101c 	ldr	r1, [pc, #28]	; 122c0 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   122a0:	ebfff591 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   122a4:	e3a06000 	mov	r6, #0
   122a8:	eaffffc1 	b	121b4 <CUSBHIDDevice::Configure(unsigned int)+0x144>
   122ac:	e3a0207f 	mov	r2, #127	; 0x7f
   122b0:	e59f100c 	ldr	r1, [pc, #12]	; 122c4 <CUSBHIDDevice::Configure(unsigned int)+0x254>
   122b4:	e59f0018 	ldr	r0, [pc, #24]	; 122d4 <CUSBHIDDevice::Configure(unsigned int)+0x264>
   122b8:	eb0048f1 	bl	24684 <assertion_failed>
   122bc:	0003fbd8 	.word	0x0003fbd8
   122c0:	00040384 	.word	0x00040384
   122c4:	00040280 	.word	0x00040280
   122c8:	00040310 	.word	0x00040310
   122cc:	000402c4 	.word	0x000402c4
   122d0:	000402e0 	.word	0x000402e0
   122d4:	000402f8 	.word	0x000402f8

000122d8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   122d8:	e590c018 	ldr	ip, [r0, #24]
   122dc:	e35c0000 	cmp	ip, #0
   122e0:	0a000013 	beq	12334 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x5c>
   122e4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   122e8:	e3510000 	cmp	r1, #0
   122ec:	e1a05001 	mov	r5, r1
   122f0:	e24dd00c 	sub	sp, sp, #12
   122f4:	0a000010 	beq	1233c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x64>
   122f8:	e3520000 	cmp	r2, #0
   122fc:	e1a06002 	mov	r6, r2
   12300:	0a000011 	beq	1234c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x74>
   12304:	e1a07003 	mov	r7, r3
   12308:	e1a04000 	mov	r4, r0
   1230c:	ebfff560 	bl	f894 <CUSBFunction::GetHost() const>
   12310:	e58d7000 	str	r7, [sp]
   12314:	e1a03006 	mov	r3, r6
   12318:	e1a02005 	mov	r2, r5
   1231c:	e5941018 	ldr	r1, [r4, #24]
   12320:	eb00016d 	bl	128dc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12324:	e1e00000 	mvn	r0, r0
   12328:	e1a00fa0 	lsr	r0, r0, #31
   1232c:	e28dd00c 	add	sp, sp, #12
   12330:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12334:	e1a0000c 	mov	r0, ip
   12338:	e12fff1e 	bx	lr
   1233c:	e3a0208e 	mov	r2, #142	; 0x8e
   12340:	e59f1014 	ldr	r1, [pc, #20]	; 1235c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x84>
   12344:	e59f0014 	ldr	r0, [pc, #20]	; 12360 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x88>
   12348:	eb0048cd 	bl	24684 <assertion_failed>
   1234c:	e3a0208f 	mov	r2, #143	; 0x8f
   12350:	e59f1004 	ldr	r1, [pc, #4]	; 1235c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x84>
   12354:	e59f0008 	ldr	r0, [pc, #8]	; 12364 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x8c>
   12358:	eb0048c9 	bl	24684 <assertion_failed>
   1235c:	00040280 	.word	0x00040280
   12360:	00040460 	.word	0x00040460
   12364:	00040328 	.word	0x00040328

00012368 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   12368:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1236c:	e1a04000 	mov	r4, r0
   12370:	e5900018 	ldr	r0, [r0, #24]
   12374:	e24dd008 	sub	sp, sp, #8
   12378:	e3500000 	cmp	r0, #0
   1237c:	0a000023 	beq	12410 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xa8>
   12380:	e3510000 	cmp	r1, #0
   12384:	e1a06001 	mov	r6, r1
   12388:	0a000022 	beq	12418 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xb0>
   1238c:	e3520000 	cmp	r2, #0
   12390:	e1a05002 	mov	r5, r2
   12394:	0a000023 	beq	12428 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xc0>
   12398:	e1a00002 	mov	r0, r2
   1239c:	e1a07003 	mov	r7, r3
   123a0:	eb0062c4 	bl	2aeb8 <operator new[](unsigned int)>
   123a4:	e1a01006 	mov	r1, r6
   123a8:	e1a02005 	mov	r2, r5
   123ac:	e1a08000 	mov	r8, r0
   123b0:	eb0060d4 	bl	2a708 <memcpy>
   123b4:	e3a00028 	mov	r0, #40	; 0x28
   123b8:	eb00084c 	bl	144f0 <CUSBRequest::operator new(unsigned int)>
   123bc:	e3a01000 	mov	r1, #0
   123c0:	e1a06000 	mov	r6, r0
   123c4:	e58d1000 	str	r1, [sp]
   123c8:	e1a03005 	mov	r3, r5
   123cc:	e1a02008 	mov	r2, r8
   123d0:	e5941018 	ldr	r1, [r4, #24]
   123d4:	eb0007c4 	bl	142ec <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   123d8:	e1a03004 	mov	r3, r4
   123dc:	e1a02008 	mov	r2, r8
   123e0:	e1a00006 	mov	r0, r6
   123e4:	e59f104c 	ldr	r1, [pc, #76]	; 12438 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd0>
   123e8:	eb000821 	bl	14474 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   123ec:	e1a00004 	mov	r0, r4
   123f0:	ebfff527 	bl	f894 <CUSBFunction::GetHost() const>
   123f4:	e1a01006 	mov	r1, r6
   123f8:	e1a02007 	mov	r2, r7
   123fc:	e5903000 	ldr	r3, [r0]
   12400:	e593300c 	ldr	r3, [r3, #12]
   12404:	e28dd008 	add	sp, sp, #8
   12408:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1240c:	e12fff13 	bx	r3
   12410:	e28dd008 	add	sp, sp, #8
   12414:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12418:	e3a020a0 	mov	r2, #160	; 0xa0
   1241c:	e59f1018 	ldr	r1, [pc, #24]	; 1243c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd4>
   12420:	e59f0018 	ldr	r0, [pc, #24]	; 12440 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd8>
   12424:	eb004896 	bl	24684 <assertion_failed>
   12428:	e3a020a1 	mov	r2, #161	; 0xa1
   1242c:	e59f1008 	ldr	r1, [pc, #8]	; 1243c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd4>
   12430:	e59f000c 	ldr	r0, [pc, #12]	; 12444 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xdc>
   12434:	eb004892 	bl	24684 <assertion_failed>
   12438:	00011edc 	.word	0x00011edc
   1243c:	00040280 	.word	0x00040280
   12440:	00040460 	.word	0x00040460
   12444:	00040328 	.word	0x00040328

00012448 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   12448:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1244c:	e590c01c 	ldr	ip, [r0, #28]
   12450:	e24dd00c 	sub	sp, sp, #12
   12454:	e35c0000 	cmp	ip, #0
   12458:	1a000012 	bne	124a8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x60>
   1245c:	e1a07003 	mov	r7, r3
   12460:	e5903014 	ldr	r3, [r0, #20]
   12464:	e1a04000 	mov	r4, r0
   12468:	e3530000 	cmp	r3, #0
   1246c:	0a000011 	beq	124b8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x70>
   12470:	e3510000 	cmp	r1, #0
   12474:	e1a05001 	mov	r5, r1
   12478:	0a000012 	beq	124c8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x80>
   1247c:	e3520000 	cmp	r2, #0
   12480:	e1a06002 	mov	r6, r2
   12484:	0a000013 	beq	124d8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x90>
   12488:	ebfff501 	bl	f894 <CUSBFunction::GetHost() const>
   1248c:	e58d7000 	str	r7, [sp]
   12490:	e1a03006 	mov	r3, r6
   12494:	e1a02005 	mov	r2, r5
   12498:	e5941014 	ldr	r1, [r4, #20]
   1249c:	eb00010e 	bl	128dc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   124a0:	e28dd00c 	add	sp, sp, #12
   124a4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   124a8:	e3a020be 	mov	r2, #190	; 0xbe
   124ac:	e59f1034 	ldr	r1, [pc, #52]	; 124e8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   124b0:	e59f0034 	ldr	r0, [pc, #52]	; 124ec <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa4>
   124b4:	eb004872 	bl	24684 <assertion_failed>
   124b8:	e3a020c0 	mov	r2, #192	; 0xc0
   124bc:	e59f1024 	ldr	r1, [pc, #36]	; 124e8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   124c0:	e59f0028 	ldr	r0, [pc, #40]	; 124f0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa8>
   124c4:	eb00486e 	bl	24684 <assertion_failed>
   124c8:	e3a020c1 	mov	r2, #193	; 0xc1
   124cc:	e59f1014 	ldr	r1, [pc, #20]	; 124e8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   124d0:	e59f001c 	ldr	r0, [pc, #28]	; 124f4 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   124d4:	eb00486a 	bl	24684 <assertion_failed>
   124d8:	e3a020c2 	mov	r2, #194	; 0xc2
   124dc:	e59f1004 	ldr	r1, [pc, #4]	; 124e8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   124e0:	e59f0010 	ldr	r0, [pc, #16]	; 124f8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb0>
   124e4:	eb004866 	bl	24684 <assertion_failed>
   124e8:	00040280 	.word	0x00040280
   124ec:	00040338 	.word	0x00040338
   124f0:	00040344 	.word	0x00040344
   124f4:	00040460 	.word	0x00040460
   124f8:	00040328 	.word	0x00040328

000124fc <CUSBHIDDevice::StartRequest()>:
   124fc:	e92d4070 	push	{r4, r5, r6, lr}
   12500:	e5903014 	ldr	r3, [r0, #20]
   12504:	e24dd008 	sub	sp, sp, #8
   12508:	e3530000 	cmp	r3, #0
   1250c:	0a000020 	beq	12594 <CUSBHIDDevice::StartRequest()+0x98>
   12510:	e5903020 	ldr	r3, [r0, #32]
   12514:	e1a04000 	mov	r4, r0
   12518:	e3530000 	cmp	r3, #0
   1251c:	0a000020 	beq	125a4 <CUSBHIDDevice::StartRequest()+0xa8>
   12520:	e590501c 	ldr	r5, [r0, #28]
   12524:	e3550000 	cmp	r5, #0
   12528:	1a000021 	bne	125b4 <CUSBHIDDevice::StartRequest()+0xb8>
   1252c:	e5903010 	ldr	r3, [r0, #16]
   12530:	e3530000 	cmp	r3, #0
   12534:	0a000022 	beq	125c4 <CUSBHIDDevice::StartRequest()+0xc8>
   12538:	e3a00028 	mov	r0, #40	; 0x28
   1253c:	eb0007eb 	bl	144f0 <CUSBRequest::operator new(unsigned int)>
   12540:	e1a06000 	mov	r6, r0
   12544:	e58d5000 	str	r5, [sp]
   12548:	e5943010 	ldr	r3, [r4, #16]
   1254c:	e5942020 	ldr	r2, [r4, #32]
   12550:	e5941014 	ldr	r1, [r4, #20]
   12554:	eb000764 	bl	142ec <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   12558:	e1a03004 	mov	r3, r4
   1255c:	e1a02005 	mov	r2, r5
   12560:	e1a00006 	mov	r0, r6
   12564:	e59f1068 	ldr	r1, [pc, #104]	; 125d4 <CUSBHIDDevice::StartRequest()+0xd8>
   12568:	e584601c 	str	r6, [r4, #28]
   1256c:	eb0007c0 	bl	14474 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   12570:	e1a00004 	mov	r0, r4
   12574:	ebfff4c6 	bl	f894 <CUSBFunction::GetHost() const>
   12578:	e1a02005 	mov	r2, r5
   1257c:	e5903000 	ldr	r3, [r0]
   12580:	e594101c 	ldr	r1, [r4, #28]
   12584:	e593300c 	ldr	r3, [r3, #12]
   12588:	e28dd008 	add	sp, sp, #8
   1258c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12590:	e12fff13 	bx	r3
   12594:	e3a020c8 	mov	r2, #200	; 0xc8
   12598:	e59f1038 	ldr	r1, [pc, #56]	; 125d8 <CUSBHIDDevice::StartRequest()+0xdc>
   1259c:	e59f0038 	ldr	r0, [pc, #56]	; 125dc <CUSBHIDDevice::StartRequest()+0xe0>
   125a0:	eb004837 	bl	24684 <assertion_failed>
   125a4:	e3a020c9 	mov	r2, #201	; 0xc9
   125a8:	e59f1028 	ldr	r1, [pc, #40]	; 125d8 <CUSBHIDDevice::StartRequest()+0xdc>
   125ac:	e59f002c 	ldr	r0, [pc, #44]	; 125e0 <CUSBHIDDevice::StartRequest()+0xe4>
   125b0:	eb004833 	bl	24684 <assertion_failed>
   125b4:	e3a020cb 	mov	r2, #203	; 0xcb
   125b8:	e59f1018 	ldr	r1, [pc, #24]	; 125d8 <CUSBHIDDevice::StartRequest()+0xdc>
   125bc:	e59f0020 	ldr	r0, [pc, #32]	; 125e4 <CUSBHIDDevice::StartRequest()+0xe8>
   125c0:	eb00482f 	bl	24684 <assertion_failed>
   125c4:	e3a020cc 	mov	r2, #204	; 0xcc
   125c8:	e59f1008 	ldr	r1, [pc, #8]	; 125d8 <CUSBHIDDevice::StartRequest()+0xdc>
   125cc:	e59f0014 	ldr	r0, [pc, #20]	; 125e8 <CUSBHIDDevice::StartRequest()+0xec>
   125d0:	eb00482b 	bl	24684 <assertion_failed>
   125d4:	000126e8 	.word	0x000126e8
   125d8:	00040280 	.word	0x00040280
   125dc:	00040344 	.word	0x00040344
   125e0:	00040310 	.word	0x00040310
   125e4:	00040338 	.word	0x00040338
   125e8:	000402e0 	.word	0x000402e0

000125ec <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   125ec:	e92d4030 	push	{r4, r5, lr}
   125f0:	e3510000 	cmp	r1, #0
   125f4:	e24dd00c 	sub	sp, sp, #12
   125f8:	0a00002d 	beq	126b4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xc8>
   125fc:	e590501c 	ldr	r5, [r0, #28]
   12600:	e1a04000 	mov	r4, r0
   12604:	e1550001 	cmp	r5, r1
   12608:	1a00002d 	bne	126c4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   1260c:	e1a00005 	mov	r0, r5
   12610:	eb000764 	bl	143a8 <CUSBRequest::GetStatus() const>
   12614:	e2502000 	subs	r2, r0, #0
   12618:	e5943000 	ldr	r3, [r4]
   1261c:	1a000013 	bne	12670 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x84>
   12620:	e1a01002 	mov	r1, r2
   12624:	e1a00004 	mov	r0, r4
   12628:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1262c:	e12fff33 	blx	r3
   12630:	e594501c 	ldr	r5, [r4, #28]
   12634:	e3550000 	cmp	r5, #0
   12638:	0a000004 	beq	12650 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x64>
   1263c:	e1a00005 	mov	r0, r5
   12640:	eb000749 	bl	1436c <CUSBRequest::~CUSBRequest()>
   12644:	e1a00005 	mov	r0, r5
   12648:	e3a01028 	mov	r1, #40	; 0x28
   1264c:	eb0007bc 	bl	14544 <CUSBRequest::operator delete(void*, unsigned int)>
   12650:	e3a03000 	mov	r3, #0
   12654:	e1a00004 	mov	r0, r4
   12658:	e584301c 	str	r3, [r4, #28]
   1265c:	ebffffa6 	bl	124fc <CUSBHIDDevice::StartRequest()>
   12660:	e3500000 	cmp	r0, #0
   12664:	0a00000b 	beq	12698 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xac>
   12668:	e28dd00c 	add	sp, sp, #12
   1266c:	e8bd8030 	pop	{r4, r5, pc}
   12670:	e5941020 	ldr	r1, [r4, #32]
   12674:	e1a00005 	mov	r0, r5
   12678:	e58d1004 	str	r1, [sp, #4]
   1267c:	e5935024 	ldr	r5, [r3, #36]	; 0x24
   12680:	eb00074a 	bl	143b0 <CUSBRequest::GetResultLength() const>
   12684:	e59d1004 	ldr	r1, [sp, #4]
   12688:	e1a02000 	mov	r2, r0
   1268c:	e1a00004 	mov	r0, r4
   12690:	e12fff35 	blx	r5
   12694:	eaffffe5 	b	12630 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x44>
   12698:	eb0050e1 	bl	26a24 <CLogger::Get()>
   1269c:	e3a02001 	mov	r2, #1
   126a0:	e59f302c 	ldr	r3, [pc, #44]	; 126d4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe8>
   126a4:	e59f102c 	ldr	r1, [pc, #44]	; 126d8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xec>
   126a8:	e28dd00c 	add	sp, sp, #12
   126ac:	e8bd4030 	pop	{r4, r5, lr}
   126b0:	ea00501d 	b	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   126b4:	e3a020d6 	mov	r2, #214	; 0xd6
   126b8:	e59f101c 	ldr	r1, [pc, #28]	; 126dc <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xf0>
   126bc:	e59f001c 	ldr	r0, [pc, #28]	; 126e0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xf4>
   126c0:	eb0047ef 	bl	24684 <assertion_failed>
   126c4:	e3a020d7 	mov	r2, #215	; 0xd7
   126c8:	e59f100c 	ldr	r1, [pc, #12]	; 126dc <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xf0>
   126cc:	e59f0010 	ldr	r0, [pc, #16]	; 126e4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xf8>
   126d0:	eb0047eb 	bl	24684 <assertion_failed>
   126d4:	0004036c 	.word	0x0004036c
   126d8:	00040384 	.word	0x00040384
   126dc:	00040280 	.word	0x00040280
   126e0:	0003eb24 	.word	0x0003eb24
   126e4:	0004035c 	.word	0x0004035c

000126e8 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   126e8:	e3520000 	cmp	r2, #0
   126ec:	0a000002 	beq	126fc <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   126f0:	e1a01000 	mov	r1, r0
   126f4:	e1a00002 	mov	r0, r2
   126f8:	eaffffbb 	b	125ec <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   126fc:	e3a020ee 	mov	r2, #238	; 0xee
   12700:	e92d4010 	push	{r4, lr}
   12704:	e59f1004 	ldr	r1, [pc, #4]	; 12710 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   12708:	e59f0004 	ldr	r0, [pc, #4]	; 12714 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   1270c:	eb0047dc 	bl	24684 <assertion_failed>
   12710:	00040280 	.word	0x00040280
   12714:	0003ea38 	.word	0x0003ea38

00012718 <CUSBHostController::CUSBHostController()>:
   12718:	e59f3004 	ldr	r3, [pc, #4]	; 12724 <CUSBHostController::CUSBHostController()+0xc>
   1271c:	e5803000 	str	r3, [r0]
   12720:	e12fff1e 	bx	lr
   12724:	000403c4 	.word	0x000403c4

00012728 <CUSBHostController::~CUSBHostController()>:
   12728:	e12fff1e 	bx	lr

0001272c <CUSBHostController::~CUSBHostController()>:
   1272c:	e92d4010 	push	{r4, lr}
   12730:	e1a04000 	mov	r4, r0
   12734:	e3a01004 	mov	r1, #4
   12738:	eb0061e6 	bl	2aed8 <operator delete(void*, unsigned int)>
   1273c:	e1a00004 	mov	r0, r4
   12740:	e8bd8010 	pop	{r4, pc}

00012744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
   12744:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12748:	e1a05000 	mov	r5, r0
   1274c:	e24dd038 	sub	sp, sp, #56	; 0x38
   12750:	e3a00008 	mov	r0, #8
   12754:	e1dd66b4 	ldrh	r6, [sp, #100]	; 0x64
   12758:	e1a08002 	mov	r8, r2
   1275c:	e1a07003 	mov	r7, r3
   12760:	e1dda5b8 	ldrh	sl, [sp, #88]	; 0x58
   12764:	e1dd95bc 	ldrh	r9, [sp, #92]	; 0x5c
   12768:	e58d100c 	str	r1, [sp, #12]
   1276c:	eb0061cb 	bl	2aea0 <operator new(unsigned int)>
   12770:	e1a04000 	mov	r4, r0
   12774:	e58d0000 	str	r0, [sp]
   12778:	e5c08000 	strb	r8, [r0]
   1277c:	e1a0042a 	lsr	r0, sl, #8
   12780:	e1a0e429 	lsr	lr, r9, #8
   12784:	e1a0c426 	lsr	ip, r6, #8
   12788:	e1a03006 	mov	r3, r6
   1278c:	e59d100c 	ldr	r1, [sp, #12]
   12790:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
   12794:	e5c40003 	strb	r0, [r4, #3]
   12798:	e28d0010 	add	r0, sp, #16
   1279c:	e5c4e005 	strb	lr, [r4, #5]
   127a0:	e5c4c007 	strb	ip, [r4, #7]
   127a4:	e5c47001 	strb	r7, [r4, #1]
   127a8:	e5c4a002 	strb	sl, [r4, #2]
   127ac:	e5c49004 	strb	r9, [r4, #4]
   127b0:	e5c46006 	strb	r6, [r4, #6]
   127b4:	eb0006cc 	bl	142ec <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   127b8:	e5953000 	ldr	r3, [r5]
   127bc:	e1a00005 	mov	r0, r5
   127c0:	e3a02000 	mov	r2, #0
   127c4:	e5933008 	ldr	r3, [r3, #8]
   127c8:	e28d1010 	add	r1, sp, #16
   127cc:	e12fff33 	blx	r3
   127d0:	e3500000 	cmp	r0, #0
   127d4:	0a00000a 	beq	12804 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xc0>
   127d8:	e28d0010 	add	r0, sp, #16
   127dc:	eb0006f3 	bl	143b0 <CUSBRequest::GetResultLength() const>
   127e0:	e1a05000 	mov	r5, r0
   127e4:	e1a00004 	mov	r0, r4
   127e8:	e3a01008 	mov	r1, #8
   127ec:	eb0061b9 	bl	2aed8 <operator delete(void*, unsigned int)>
   127f0:	e28d0010 	add	r0, sp, #16
   127f4:	eb0006dc 	bl	1436c <CUSBRequest::~CUSBRequest()>
   127f8:	e1a00005 	mov	r0, r5
   127fc:	e28dd038 	add	sp, sp, #56	; 0x38
   12800:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12804:	e3e05000 	mvn	r5, #0
   12808:	eafffff5 	b	127e4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xa0>

0001280c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
   1280c:	e92d4010 	push	{r4, lr}
   12810:	e1833402 	orr	r3, r3, r2, lsl #8
   12814:	e59d4008 	ldr	r4, [sp, #8]
   12818:	e5dde010 	ldrb	lr, [sp, #16]
   1281c:	e1ddc1b4 	ldrh	ip, [sp, #20]
   12820:	e58d3008 	str	r3, [sp, #8]
   12824:	e1dd30bc 	ldrh	r3, [sp, #12]
   12828:	e1a0200e 	mov	r2, lr
   1282c:	e58d3014 	str	r3, [sp, #20]
   12830:	e58d4010 	str	r4, [sp, #16]
   12834:	e58dc00c 	str	ip, [sp, #12]
   12838:	e3a03006 	mov	r3, #6
   1283c:	e8bd4010 	pop	{r4, lr}
   12840:	eaffffbf 	b	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

00012844 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
   12844:	e92d4010 	push	{r4, lr}
   12848:	e3a04000 	mov	r4, #0
   1284c:	e24dd010 	sub	sp, sp, #16
   12850:	e58d2000 	str	r2, [sp]
   12854:	e3a03005 	mov	r3, #5
   12858:	e1a02004 	mov	r2, r4
   1285c:	e58d400c 	str	r4, [sp, #12]
   12860:	e58d4008 	str	r4, [sp, #8]
   12864:	e58d4004 	str	r4, [sp, #4]
   12868:	ebffffb5 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1286c:	e1500004 	cmp	r0, r4
   12870:	b1a00004 	movlt	r0, r4
   12874:	ba000003 	blt	12888 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x44>
   12878:	eb005d4d 	bl	29db4 <CTimer::Get()>
   1287c:	e3a00032 	mov	r0, #50	; 0x32
   12880:	eb005d16 	bl	29ce0 <CTimer::SimpleMsDelay(unsigned int)>
   12884:	e3a00001 	mov	r0, #1
   12888:	e28dd010 	add	sp, sp, #16
   1288c:	e8bd8010 	pop	{r4, pc}

00012890 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
   12890:	e92d4010 	push	{r4, lr}
   12894:	e3a04000 	mov	r4, #0
   12898:	e24dd010 	sub	sp, sp, #16
   1289c:	e58d2000 	str	r2, [sp]
   128a0:	e3a03009 	mov	r3, #9
   128a4:	e1a02004 	mov	r2, r4
   128a8:	e58d400c 	str	r4, [sp, #12]
   128ac:	e58d4008 	str	r4, [sp, #8]
   128b0:	e58d4004 	str	r4, [sp, #4]
   128b4:	ebffffa2 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   128b8:	e1500004 	cmp	r0, r4
   128bc:	b1a00004 	movlt	r0, r4
   128c0:	ba000003 	blt	128d4 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x44>
   128c4:	eb005d3a 	bl	29db4 <CTimer::Get()>
   128c8:	e3a00032 	mov	r0, #50	; 0x32
   128cc:	eb005d03 	bl	29ce0 <CTimer::SimpleMsDelay(unsigned int)>
   128d0:	e3a00001 	mov	r0, #1
   128d4:	e28dd010 	add	sp, sp, #16
   128d8:	e8bd8010 	pop	{r4, pc}

000128dc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
   128dc:	e3a0c000 	mov	ip, #0
   128e0:	e92d4010 	push	{r4, lr}
   128e4:	e1a04000 	mov	r4, r0
   128e8:	e24dd030 	sub	sp, sp, #48	; 0x30
   128ec:	e58dc000 	str	ip, [sp]
   128f0:	e28d0008 	add	r0, sp, #8
   128f4:	eb00067c 	bl	142ec <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   128f8:	e5943000 	ldr	r3, [r4]
   128fc:	e1a00004 	mov	r0, r4
   12900:	e5933008 	ldr	r3, [r3, #8]
   12904:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   12908:	e28d1008 	add	r1, sp, #8
   1290c:	e12fff33 	blx	r3
   12910:	e3500000 	cmp	r0, #0
   12914:	0a000007 	beq	12938 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x5c>
   12918:	e28d0008 	add	r0, sp, #8
   1291c:	eb0006a3 	bl	143b0 <CUSBRequest::GetResultLength() const>
   12920:	e1a04000 	mov	r4, r0
   12924:	e28d0008 	add	r0, sp, #8
   12928:	eb00068f 	bl	1436c <CUSBRequest::~CUSBRequest()>
   1292c:	e1a00004 	mov	r0, r4
   12930:	e28dd030 	add	sp, sp, #48	; 0x30
   12934:	e8bd8010 	pop	{r4, pc}
   12938:	e3e04000 	mvn	r4, #0
   1293c:	eafffff8 	b	12924 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x48>

00012940 <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
   12940:	e1c022f0 	strd	r2, [r0, #32]
   12944:	e1a01003 	mov	r1, r3
   12948:	e1a00002 	mov	r0, r2
   1294c:	e12fff1e 	bx	lr

00012950 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   12950:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
   12954:	e59f30e8 	ldr	r3, [pc, #232]	; 12a44 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xf4>
   12958:	e3520000 	cmp	r2, #0
   1295c:	e92d4070 	push	{r4, r5, r6, lr}
   12960:	e1a04000 	mov	r4, r0
   12964:	e5803000 	str	r3, [r0]
   12968:	1a000021 	bne	129f4 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xa4>
   1296c:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   12970:	e3550000 	cmp	r5, #0
   12974:	0a000004 	beq	1298c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x3c>
   12978:	e1a00005 	mov	r0, r5
   1297c:	eb00194f 	bl	18ec0 <CPartitionManager::~CPartitionManager()>
   12980:	e1a00005 	mov	r0, r5
   12984:	e3a01024 	mov	r1, #36	; 0x24
   12988:	eb006152 	bl	2aed8 <operator delete(void*, unsigned int)>
   1298c:	e3a03000 	mov	r3, #0
   12990:	e5945014 	ldr	r5, [r4, #20]
   12994:	e5843028 	str	r3, [r4, #40]	; 0x28
   12998:	e1550003 	cmp	r5, r3
   1299c:	0a000004 	beq	129b4 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x64>
   129a0:	e1a00005 	mov	r0, r5
   129a4:	ebfff247 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   129a8:	e1a00005 	mov	r0, r5
   129ac:	e3a01014 	mov	r1, #20
   129b0:	eb006148 	bl	2aed8 <operator delete(void*, unsigned int)>
   129b4:	e3a03000 	mov	r3, #0
   129b8:	e5945010 	ldr	r5, [r4, #16]
   129bc:	e5843014 	str	r3, [r4, #20]
   129c0:	e1550003 	cmp	r5, r3
   129c4:	0a000004 	beq	129dc <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x8c>
   129c8:	e1a00005 	mov	r0, r5
   129cc:	ebfff23d 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   129d0:	e1a00005 	mov	r0, r5
   129d4:	e3a01014 	mov	r1, #20
   129d8:	eb00613e 	bl	2aed8 <operator delete(void*, unsigned int)>
   129dc:	e3a03000 	mov	r3, #0
   129e0:	e1a00004 	mov	r0, r4
   129e4:	e5843010 	str	r3, [r4, #16]
   129e8:	ebfff2a3 	bl	f47c <CUSBFunction::~CUSBFunction()>
   129ec:	e1a00004 	mov	r0, r4
   129f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   129f4:	eb0049e4 	bl	2518c <CDeviceNameService::Get()>
   129f8:	e3a03001 	mov	r3, #1
   129fc:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   12a00:	e59f1040 	ldr	r1, [pc, #64]	; 12a48 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xf8>
   12a04:	eb004a06 	bl	25224 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   12a08:	e3a03001 	mov	r3, #1
   12a0c:	e59f1038 	ldr	r1, [pc, #56]	; 12a4c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xfc>
   12a10:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12a14:	e5912000 	ldr	r2, [r1]
   12a18:	e1a03013 	lsl	r3, r3, r0
   12a1c:	e1130002 	tst	r3, r2
   12a20:	13a00000 	movne	r0, #0
   12a24:	11c23003 	bicne	r3, r2, r3
   12a28:	15813000 	strne	r3, [r1]
   12a2c:	1584002c 	strne	r0, [r4, #44]	; 0x2c
   12a30:	1affffcd 	bne	1296c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x1c>
   12a34:	e3a020d4 	mov	r2, #212	; 0xd4
   12a38:	e59f1010 	ldr	r1, [pc, #16]	; 12a50 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x100>
   12a3c:	e59f0010 	ldr	r0, [pc, #16]	; 12a54 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x104>
   12a40:	eb00470f 	bl	24684 <assertion_failed>
   12a44:	00040684 	.word	0x00040684
   12a48:	000403d4 	.word	0x000403d4
   12a4c:	0004da80 	.word	0x0004da80
   12a50:	000403dc 	.word	0x000403dc
   12a54:	000403f0 	.word	0x000403f0

00012a58 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   12a58:	e92d4010 	push	{r4, lr}
   12a5c:	e1a04000 	mov	r4, r0
   12a60:	ebffffba 	bl	12950 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
   12a64:	e1a00004 	mov	r0, r4
   12a68:	e3a01030 	mov	r1, #48	; 0x30
   12a6c:	eb006119 	bl	2aed8 <operator delete(void*, unsigned int)>
   12a70:	e1a00004 	mov	r0, r4
   12a74:	e8bd8010 	pop	{r4, pc}

00012a78 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
   12a78:	e92d4010 	push	{r4, lr}
   12a7c:	e1a04000 	mov	r4, r0
   12a80:	ebfff30f 	bl	f6c4 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   12a84:	e3a03000 	mov	r3, #0
   12a88:	e3a00000 	mov	r0, #0
   12a8c:	e3a01000 	mov	r1, #0
   12a90:	e59f2024 	ldr	r2, [pc, #36]	; 12abc <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x44>
   12a94:	e1c402f0 	strd	r0, [r4, #32]
   12a98:	e5842000 	str	r2, [r4]
   12a9c:	e1a00004 	mov	r0, r4
   12aa0:	e5843010 	str	r3, [r4, #16]
   12aa4:	e5843014 	str	r3, [r4, #20]
   12aa8:	e5843018 	str	r3, [r4, #24]
   12aac:	e584301c 	str	r3, [r4, #28]
   12ab0:	e5843028 	str	r3, [r4, #40]	; 0x28
   12ab4:	e584302c 	str	r3, [r4, #44]	; 0x2c
   12ab8:	e8bd8010 	pop	{r4, pc}
   12abc:	00040684 	.word	0x00040684

00012ac0 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
   12ac0:	e590001c 	ldr	r0, [r0, #28]
   12ac4:	e12fff1e 	bx	lr

00012ac8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>:
   12ac8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12acc:	e2519000 	subs	r9, r1, #0
   12ad0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   12ad4:	e59d5058 	ldr	r5, [sp, #88]	; 0x58
   12ad8:	e5dd805c 	ldrb	r8, [sp, #92]	; 0x5c
   12adc:	0a000058 	beq	12c44 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x17c>
   12ae0:	e1a07003 	mov	r7, r3
   12ae4:	e2423006 	sub	r3, r2, #6
   12ae8:	e353000a 	cmp	r3, #10
   12aec:	e1a06002 	mov	r6, r2
   12af0:	8a000057 	bhi	12c54 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x18c>
   12af4:	e2572000 	subs	r2, r7, #0
   12af8:	13a02001 	movne	r2, #1
   12afc:	e3550000 	cmp	r5, #0
   12b00:	03a02001 	moveq	r2, #1
   12b04:	e3520000 	cmp	r2, #0
   12b08:	0a000055 	beq	12c64 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x19c>
   12b0c:	e1a04000 	mov	r4, r0
   12b10:	e3a0201f 	mov	r2, #31
   12b14:	e3a01000 	mov	r1, #0
   12b18:	e28d0018 	add	r0, sp, #24
   12b1c:	eb005cb0 	bl	29de4 <memset>
   12b20:	e3580000 	cmp	r8, #0
   12b24:	13a0e080 	movne	lr, #128	; 0x80
   12b28:	03a0e000 	moveq	lr, #0
   12b2c:	e5dd0026 	ldrb	r0, [sp, #38]	; 0x26
   12b30:	e594c018 	ldr	ip, [r4, #24]
   12b34:	e3c0301f 	bic	r3, r0, #31
   12b38:	e206001f 	and	r0, r6, #31
   12b3c:	e1800003 	orr	r0, r0, r3
   12b40:	e5dd3025 	ldrb	r3, [sp, #37]	; 0x25
   12b44:	e28cc001 	add	ip, ip, #1
   12b48:	e1a02006 	mov	r2, r6
   12b4c:	e59f61e0 	ldr	r6, [pc, #480]	; 12d34 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x26c>
   12b50:	e584c018 	str	ip, [r4, #24]
   12b54:	e3c3300f 	bic	r3, r3, #15
   12b58:	e1a01009 	mov	r1, r9
   12b5c:	e5cd0026 	strb	r0, [sp, #38]	; 0x26
   12b60:	e28d0027 	add	r0, sp, #39	; 0x27
   12b64:	e5cde024 	strb	lr, [sp, #36]	; 0x24
   12b68:	e58dc01c 	str	ip, [sp, #28]
   12b6c:	e5cd3025 	strb	r3, [sp, #37]	; 0x25
   12b70:	e58d6018 	str	r6, [sp, #24]
   12b74:	e58d5020 	str	r5, [sp, #32]
   12b78:	eb005ee2 	bl	2a708 <memcpy>
   12b7c:	e1a00004 	mov	r0, r4
   12b80:	ebfff343 	bl	f894 <CUSBFunction::GetHost() const>
   12b84:	e2506000 	subs	r6, r0, #0
   12b88:	0a000039 	beq	12c74 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1ac>
   12b8c:	e3a09000 	mov	r9, #0
   12b90:	e58d9000 	str	r9, [sp]
   12b94:	e3a0301f 	mov	r3, #31
   12b98:	e5941014 	ldr	r1, [r4, #20]
   12b9c:	e28d2018 	add	r2, sp, #24
   12ba0:	ebffff4d 	bl	128dc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12ba4:	e1500009 	cmp	r0, r9
   12ba8:	ba00005a 	blt	12d18 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x250>
   12bac:	e3550000 	cmp	r5, #0
   12bb0:	0a000009 	beq	12bdc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x114>
   12bb4:	e1c401d0 	ldrd	r0, [r4, #16]
   12bb8:	e3580000 	cmp	r8, #0
   12bbc:	11a01000 	movne	r1, r0
   12bc0:	e1a03005 	mov	r3, r5
   12bc4:	e1a02007 	mov	r2, r7
   12bc8:	e1a00006 	mov	r0, r6
   12bcc:	e58d9000 	str	r9, [sp]
   12bd0:	ebffff41 	bl	128dc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12bd4:	e2505000 	subs	r5, r0, #0
   12bd8:	ba000029 	blt	12c84 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1bc>
   12bdc:	e3a03000 	mov	r3, #0
   12be0:	e58d3000 	str	r3, [sp]
   12be4:	e1a00006 	mov	r0, r6
   12be8:	e3a0300d 	mov	r3, #13
   12bec:	e5941010 	ldr	r1, [r4, #16]
   12bf0:	e28d2008 	add	r2, sp, #8
   12bf4:	ebffff38 	bl	128dc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12bf8:	e350000d 	cmp	r0, #13
   12bfc:	1a000030 	bne	12cc4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1fc>
   12c00:	e59f3130 	ldr	r3, [pc, #304]	; 12d38 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x270>
   12c04:	e59d2008 	ldr	r2, [sp, #8]
   12c08:	e1520003 	cmp	r2, r3
   12c0c:	1a000025 	bne	12ca8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1e0>
   12c10:	e5943018 	ldr	r3, [r4, #24]
   12c14:	e59d200c 	ldr	r2, [sp, #12]
   12c18:	e1520003 	cmp	r2, r3
   12c1c:	1a00002f 	bne	12ce0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x218>
   12c20:	e5dd3014 	ldrb	r3, [sp, #20]
   12c24:	e3530000 	cmp	r3, #0
   12c28:	1a00001c 	bne	12ca0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1d8>
   12c2c:	e59d3010 	ldr	r3, [sp, #16]
   12c30:	e3530000 	cmp	r3, #0
   12c34:	1a000030 	bne	12cfc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x234>
   12c38:	e1a00005 	mov	r0, r5
   12c3c:	e28dd03c 	add	sp, sp, #60	; 0x3c
   12c40:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12c44:	e3a02f8e 	mov	r2, #568	; 0x238
   12c48:	e59f10ec 	ldr	r1, [pc, #236]	; 12d3c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
   12c4c:	e59f00ec 	ldr	r0, [pc, #236]	; 12d40 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   12c50:	eb00468b 	bl	24684 <assertion_failed>
   12c54:	e59f20e8 	ldr	r2, [pc, #232]	; 12d44 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x27c>
   12c58:	e59f10dc 	ldr	r1, [pc, #220]	; 12d3c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
   12c5c:	e59f00e4 	ldr	r0, [pc, #228]	; 12d48 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x280>
   12c60:	eb004687 	bl	24684 <assertion_failed>
   12c64:	e59f20e0 	ldr	r2, [pc, #224]	; 12d4c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x284>
   12c68:	e59f10cc 	ldr	r1, [pc, #204]	; 12d3c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
   12c6c:	e59f00dc 	ldr	r0, [pc, #220]	; 12d50 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x288>
   12c70:	eb004683 	bl	24684 <assertion_failed>
   12c74:	e59f20d8 	ldr	r2, [pc, #216]	; 12d54 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x28c>
   12c78:	e59f10bc 	ldr	r1, [pc, #188]	; 12d3c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
   12c7c:	e59f00d4 	ldr	r0, [pc, #212]	; 12d58 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
   12c80:	eb00467f 	bl	24684 <assertion_failed>
   12c84:	eb004f66 	bl	26a24 <CLogger::Get()>
   12c88:	e3a02001 	mov	r2, #1
   12c8c:	e59f30c8 	ldr	r3, [pc, #200]	; 12d5c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x294>
   12c90:	e59f10c8 	ldr	r1, [pc, #200]	; 12d60 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12c94:	eb004ea4 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12c98:	e3e05000 	mvn	r5, #0
   12c9c:	eaffffe5 	b	12c38 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12ca0:	e3e05000 	mvn	r5, #0
   12ca4:	eaffffe3 	b	12c38 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12ca8:	eb004f5d 	bl	26a24 <CLogger::Get()>
   12cac:	e3a02001 	mov	r2, #1
   12cb0:	e59f30ac 	ldr	r3, [pc, #172]	; 12d64 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12cb4:	e59f10a4 	ldr	r1, [pc, #164]	; 12d60 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12cb8:	eb004e9b 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12cbc:	e3e05000 	mvn	r5, #0
   12cc0:	eaffffdc 	b	12c38 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12cc4:	eb004f56 	bl	26a24 <CLogger::Get()>
   12cc8:	e3a02001 	mov	r2, #1
   12ccc:	e59f3094 	ldr	r3, [pc, #148]	; 12d68 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a0>
   12cd0:	e59f1088 	ldr	r1, [pc, #136]	; 12d60 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12cd4:	eb004e94 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12cd8:	e3e05000 	mvn	r5, #0
   12cdc:	eaffffd5 	b	12c38 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12ce0:	eb004f4f 	bl	26a24 <CLogger::Get()>
   12ce4:	e3a02001 	mov	r2, #1
   12ce8:	e59f307c 	ldr	r3, [pc, #124]	; 12d6c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a4>
   12cec:	e59f106c 	ldr	r1, [pc, #108]	; 12d60 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12cf0:	eb004e8d 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12cf4:	e3e05000 	mvn	r5, #0
   12cf8:	eaffffce 	b	12c38 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12cfc:	eb004f48 	bl	26a24 <CLogger::Get()>
   12d00:	e3a02001 	mov	r2, #1
   12d04:	e59f3064 	ldr	r3, [pc, #100]	; 12d70 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
   12d08:	e59f1050 	ldr	r1, [pc, #80]	; 12d60 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12d0c:	eb004e86 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12d10:	e3e05000 	mvn	r5, #0
   12d14:	eaffffc7 	b	12c38 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12d18:	eb004f41 	bl	26a24 <CLogger::Get()>
   12d1c:	e3a02001 	mov	r2, #1
   12d20:	e59f304c 	ldr	r3, [pc, #76]	; 12d74 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2ac>
   12d24:	e59f1034 	ldr	r1, [pc, #52]	; 12d60 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12d28:	eb004e7f 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12d2c:	e3e05000 	mvn	r5, #0
   12d30:	eaffffc0 	b	12c38 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12d34:	43425355 	.word	0x43425355
   12d38:	53425355 	.word	0x53425355
   12d3c:	000403dc 	.word	0x000403dc
   12d40:	0004041c 	.word	0x0004041c
   12d44:	00000239 	.word	0x00000239
   12d48:	0004042c 	.word	0x0004042c
   12d4c:	0000023a 	.word	0x0000023a
   12d50:	00040450 	.word	0x00040450
   12d54:	00000249 	.word	0x00000249
   12d58:	00040470 	.word	0x00040470
   12d5c:	00040490 	.word	0x00040490
   12d60:	000406a8 	.word	0x000406a8
   12d64:	000404bc 	.word	0x000404bc
   12d68:	000404a8 	.word	0x000404a8
   12d6c:	000404d4 	.word	0x000404d4
   12d70:	000404e8 	.word	0x000404e8
   12d74:	0004047c 	.word	0x0004047c

00012d78 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
   12d78:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12d7c:	e2513000 	subs	r3, r1, #0
   12d80:	e24dd01c 	sub	sp, sp, #28
   12d84:	0a000027 	beq	12e28 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xb0>
   12d88:	e1c062d0 	ldrd	r6, [r0, #32]
   12d8c:	e1a04002 	mov	r4, r2
   12d90:	e59f20c4 	ldr	r2, [pc, #196]	; 12e5c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xe4>
   12d94:	e1a01000 	mov	r1, r0
   12d98:	e1120006 	tst	r2, r6
   12d9c:	13a01001 	movne	r1, #1
   12da0:	03a01000 	moveq	r1, #0
   12da4:	e3570c02 	cmp	r7, #512	; 0x200
   12da8:	03560000 	cmpeq	r6, #0
   12dac:	23811001 	orrcs	r1, r1, #1
   12db0:	e3510000 	cmp	r1, #0
   12db4:	1a00001f 	bne	12e38 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc0>
   12db8:	e014c002 	ands	ip, r4, r2
   12dbc:	e1a024a6 	lsr	r2, r6, #9
   12dc0:	e1822b87 	orr	r2, r2, r7, lsl #23
   12dc4:	1a00001b 	bne	12e38 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc0>
   12dc8:	e3a05001 	mov	r5, #1
   12dcc:	e3a0e028 	mov	lr, #40	; 0x28
   12dd0:	e1a014a4 	lsr	r1, r4, #9
   12dd4:	e6bf1fb1 	rev16	r1, r1
   12dd8:	e6bf2f32 	rev	r2, r2
   12ddc:	e1cd20be 	strh	r2, [sp, #14]
   12de0:	e5cdc012 	strb	ip, [sp, #18]
   12de4:	e1a02822 	lsr	r2, r2, #16
   12de8:	e5cdc015 	strb	ip, [sp, #21]
   12dec:	e6ffc071 	uxth	ip, r1
   12df0:	e1cd21b0 	strh	r2, [sp, #16]
   12df4:	e1a0c42c 	lsr	ip, ip, #8
   12df8:	e5cd1013 	strb	r1, [sp, #19]
   12dfc:	e3a0200a 	mov	r2, #10
   12e00:	e1cd40f0 	strd	r4, [sp]
   12e04:	e28d100c 	add	r1, sp, #12
   12e08:	e5cdc014 	strb	ip, [sp, #20]
   12e0c:	e1cde0bc 	strh	lr, [sp, #12]
   12e10:	ebffff2c 	bl	12ac8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12e14:	e1500004 	cmp	r0, r4
   12e18:	1a000008 	bne	12e40 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc8>
   12e1c:	e1a00004 	mov	r0, r4
   12e20:	e28dd01c 	add	sp, sp, #28
   12e24:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12e28:	e59f2030 	ldr	r2, [pc, #48]	; 12e60 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xe8>
   12e2c:	e59f1030 	ldr	r1, [pc, #48]	; 12e64 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xec>
   12e30:	e59f0030 	ldr	r0, [pc, #48]	; 12e68 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf0>
   12e34:	eb004612 	bl	24684 <assertion_failed>
   12e38:	e3e04000 	mvn	r4, #0
   12e3c:	eafffff6 	b	12e1c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xa4>
   12e40:	eb004ef7 	bl	26a24 <CLogger::Get()>
   12e44:	e1a02005 	mov	r2, r5
   12e48:	e59f301c 	ldr	r3, [pc, #28]	; 12e6c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf4>
   12e4c:	e59f101c 	ldr	r1, [pc, #28]	; 12e70 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf8>
   12e50:	eb004e35 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12e54:	e3e04000 	mvn	r4, #0
   12e58:	eaffffef 	b	12e1c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xa4>
   12e5c:	000001ff 	.word	0x000001ff
   12e60:	000001ed 	.word	0x000001ed
   12e64:	000403dc 	.word	0x000403dc
   12e68:	00040460 	.word	0x00040460
   12e6c:	00040500 	.word	0x00040500
   12e70:	000406a8 	.word	0x000406a8

00012e74 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
   12e74:	e92d40d0 	push	{r4, r6, r7, lr}
   12e78:	e2513000 	subs	r3, r1, #0
   12e7c:	e24dd018 	sub	sp, sp, #24
   12e80:	0a000026 	beq	12f20 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xac>
   12e84:	e1c062d0 	ldrd	r6, [r0, #32]
   12e88:	e1a04002 	mov	r4, r2
   12e8c:	e59f20c0 	ldr	r2, [pc, #192]	; 12f54 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xe0>
   12e90:	e1a01000 	mov	r1, r0
   12e94:	e1120006 	tst	r2, r6
   12e98:	13a01001 	movne	r1, #1
   12e9c:	03a01000 	moveq	r1, #0
   12ea0:	e3570c02 	cmp	r7, #512	; 0x200
   12ea4:	03560000 	cmpeq	r6, #0
   12ea8:	23811001 	orrcs	r1, r1, #1
   12eac:	e3510000 	cmp	r1, #0
   12eb0:	1a00001e 	bne	12f30 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xbc>
   12eb4:	e014c002 	ands	ip, r4, r2
   12eb8:	e1a024a6 	lsr	r2, r6, #9
   12ebc:	e1822b87 	orr	r2, r2, r7, lsl #23
   12ec0:	1a00001a 	bne	12f30 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xbc>
   12ec4:	e1a014a4 	lsr	r1, r4, #9
   12ec8:	e6bf1fb1 	rev16	r1, r1
   12ecc:	e6bf2f32 	rev	r2, r2
   12ed0:	e88d1010 	stm	sp, {r4, ip}
   12ed4:	e6ffe071 	uxth	lr, r1
   12ed8:	e1cd20be 	strh	r2, [sp, #14]
   12edc:	e5cdc012 	strb	ip, [sp, #18]
   12ee0:	e1a02822 	lsr	r2, r2, #16
   12ee4:	e5cdc015 	strb	ip, [sp, #21]
   12ee8:	e59fc068 	ldr	ip, [pc, #104]	; 12f58 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xe4>
   12eec:	e1a0e42e 	lsr	lr, lr, #8
   12ef0:	e1cd21b0 	strh	r2, [sp, #16]
   12ef4:	e5cd1013 	strb	r1, [sp, #19]
   12ef8:	e3a0200a 	mov	r2, #10
   12efc:	e28d100c 	add	r1, sp, #12
   12f00:	e5cde014 	strb	lr, [sp, #20]
   12f04:	e1cdc0bc 	strh	ip, [sp, #12]
   12f08:	ebfffeee 	bl	12ac8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12f0c:	e3500000 	cmp	r0, #0
   12f10:	a1a00004 	movge	r0, r4
   12f14:	ba000007 	blt	12f38 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc4>
   12f18:	e28dd018 	add	sp, sp, #24
   12f1c:	e8bd80d0 	pop	{r4, r6, r7, pc}
   12f20:	e59f2034 	ldr	r2, [pc, #52]	; 12f5c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xe8>
   12f24:	e59f1034 	ldr	r1, [pc, #52]	; 12f60 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xec>
   12f28:	e59f0034 	ldr	r0, [pc, #52]	; 12f64 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xf0>
   12f2c:	eb0045d4 	bl	24684 <assertion_failed>
   12f30:	e3e00000 	mvn	r0, #0
   12f34:	eafffff7 	b	12f18 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xa4>
   12f38:	eb004eb9 	bl	26a24 <CLogger::Get()>
   12f3c:	e3a02001 	mov	r2, #1
   12f40:	e59f3020 	ldr	r3, [pc, #32]	; 12f68 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xf4>
   12f44:	e59f1020 	ldr	r1, [pc, #32]	; 12f6c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xf8>
   12f48:	eb004df7 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12f4c:	e3e00000 	mvn	r0, #0
   12f50:	eafffff0 	b	12f18 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xa4>
   12f54:	000001ff 	.word	0x000001ff
   12f58:	0000082a 	.word	0x0000082a
   12f5c:	00000212 	.word	0x00000212
   12f60:	000403dc 	.word	0x000403dc
   12f64:	00040460 	.word	0x00040460
   12f68:	00040510 	.word	0x00040510
   12f6c:	000406a8 	.word	0x000406a8

00012f70 <CUSBBulkOnlyMassStorageDevice::Reset()>:
   12f70:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12f74:	e24dd014 	sub	sp, sp, #20
   12f78:	e1a05000 	mov	r5, r0
   12f7c:	ebfff244 	bl	f894 <CUSBFunction::GetHost() const>
   12f80:	e2506000 	subs	r6, r0, #0
   12f84:	0a00002e 	beq	13044 <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
   12f88:	e1a00005 	mov	r0, r5
   12f8c:	ebfff235 	bl	f868 <CUSBFunction::GetEndpoint0() const>
   12f90:	e3a04000 	mov	r4, #0
   12f94:	e1a01000 	mov	r1, r0
   12f98:	e3a030ff 	mov	r3, #255	; 0xff
   12f9c:	e3a02021 	mov	r2, #33	; 0x21
   12fa0:	e1a00006 	mov	r0, r6
   12fa4:	e58d400c 	str	r4, [sp, #12]
   12fa8:	e58d4008 	str	r4, [sp, #8]
   12fac:	e58d4004 	str	r4, [sp, #4]
   12fb0:	e58d4000 	str	r4, [sp]
   12fb4:	ebfffde2 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12fb8:	e1500004 	cmp	r0, r4
   12fbc:	ba000024 	blt	13054 <CUSBBulkOnlyMassStorageDevice::Reset()+0xe4>
   12fc0:	e1a00005 	mov	r0, r5
   12fc4:	ebfff227 	bl	f868 <CUSBFunction::GetEndpoint0() const>
   12fc8:	e3a07001 	mov	r7, #1
   12fcc:	e1a01000 	mov	r1, r0
   12fd0:	e1a03007 	mov	r3, r7
   12fd4:	e3a02002 	mov	r2, #2
   12fd8:	e1a00006 	mov	r0, r6
   12fdc:	e88d0090 	stm	sp, {r4, r7}
   12fe0:	e58d400c 	str	r4, [sp, #12]
   12fe4:	e58d4008 	str	r4, [sp, #8]
   12fe8:	ebfffdd5 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12fec:	e3500000 	cmp	r0, #0
   12ff0:	ba000025 	blt	1308c <CUSBBulkOnlyMassStorageDevice::Reset()+0x11c>
   12ff4:	e1a00005 	mov	r0, r5
   12ff8:	ebfff21a 	bl	f868 <CUSBFunction::GetEndpoint0() const>
   12ffc:	e3a02002 	mov	r2, #2
   13000:	e1a01000 	mov	r1, r0
   13004:	e1a03007 	mov	r3, r7
   13008:	e1a00006 	mov	r0, r6
   1300c:	e58d400c 	str	r4, [sp, #12]
   13010:	e58d4008 	str	r4, [sp, #8]
   13014:	e58d4000 	str	r4, [sp]
   13018:	e58d2004 	str	r2, [sp, #4]
   1301c:	ebfffdc8 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13020:	e3500000 	cmp	r0, #0
   13024:	ba000011 	blt	13070 <CUSBBulkOnlyMassStorageDevice::Reset()+0x100>
   13028:	e5950010 	ldr	r0, [r5, #16]
   1302c:	ebfff102 	bl	f43c <CUSBEndpoint::ResetPID()>
   13030:	e5950014 	ldr	r0, [r5, #20]
   13034:	ebfff100 	bl	f43c <CUSBEndpoint::ResetPID()>
   13038:	e1a00004 	mov	r0, r4
   1303c:	e28dd014 	add	sp, sp, #20
   13040:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13044:	e3a02fa2 	mov	r2, #648	; 0x288
   13048:	e59f1058 	ldr	r1, [pc, #88]	; 130a8 <CUSBBulkOnlyMassStorageDevice::Reset()+0x138>
   1304c:	e59f0058 	ldr	r0, [pc, #88]	; 130ac <CUSBBulkOnlyMassStorageDevice::Reset()+0x13c>
   13050:	eb00458b 	bl	24684 <assertion_failed>
   13054:	eb004e72 	bl	26a24 <CLogger::Get()>
   13058:	e3a02004 	mov	r2, #4
   1305c:	e59f304c 	ldr	r3, [pc, #76]	; 130b0 <CUSBBulkOnlyMassStorageDevice::Reset()+0x140>
   13060:	e59f104c 	ldr	r1, [pc, #76]	; 130b4 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   13064:	eb004db0 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13068:	e3e00000 	mvn	r0, #0
   1306c:	eafffff2 	b	1303c <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   13070:	eb004e6b 	bl	26a24 <CLogger::Get()>
   13074:	e3a02004 	mov	r2, #4
   13078:	e59f3038 	ldr	r3, [pc, #56]	; 130b8 <CUSBBulkOnlyMassStorageDevice::Reset()+0x148>
   1307c:	e59f1030 	ldr	r1, [pc, #48]	; 130b4 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   13080:	eb004da9 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13084:	e3e00000 	mvn	r0, #0
   13088:	eaffffeb 	b	1303c <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   1308c:	eb004e64 	bl	26a24 <CLogger::Get()>
   13090:	e3a02004 	mov	r2, #4
   13094:	e59f3020 	ldr	r3, [pc, #32]	; 130bc <CUSBBulkOnlyMassStorageDevice::Reset()+0x14c>
   13098:	e59f1014 	ldr	r1, [pc, #20]	; 130b4 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   1309c:	eb004da2 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   130a0:	e3e00000 	mvn	r0, #0
   130a4:	eaffffe4 	b	1303c <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   130a8:	000403dc 	.word	0x000403dc
   130ac:	00040470 	.word	0x00040470
   130b0:	00040520 	.word	0x00040520
   130b4:	000406a8 	.word	0x000406a8
   130b8:	00040554 	.word	0x00040554
   130bc:	00040534 	.word	0x00040534

000130c0 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
   130c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   130c4:	e1a05002 	mov	r5, r2
   130c8:	e1a07000 	mov	r7, r0
   130cc:	e1a09001 	mov	r9, r1
   130d0:	e1a08002 	mov	r8, r2
   130d4:	e3a06004 	mov	r6, #4
   130d8:	e1a02005 	mov	r2, r5
   130dc:	e1a01009 	mov	r1, r9
   130e0:	e1a00007 	mov	r0, r7
   130e4:	ebffff23 	bl	12d78 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
   130e8:	e1500005 	cmp	r0, r5
   130ec:	e1a04000 	mov	r4, r0
   130f0:	1a000001 	bne	130fc <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x3c>
   130f4:	e1a00008 	mov	r0, r8
   130f8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130fc:	e1a00007 	mov	r0, r7
   13100:	ebffff9a 	bl	12f70 <CUSBBulkOnlyMassStorageDevice::Reset()>
   13104:	e3500000 	cmp	r0, #0
   13108:	1a000004 	bne	13120 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x60>
   1310c:	e2566001 	subs	r6, r6, #1
   13110:	1afffff0 	bne	130d8 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x18>
   13114:	e1a08004 	mov	r8, r4
   13118:	e1a00008 	mov	r0, r8
   1311c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13120:	e1a08000 	mov	r8, r0
   13124:	eafffff2 	b	130f4 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x34>

00013128 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
   13128:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1312c:	e1a05002 	mov	r5, r2
   13130:	e1a07000 	mov	r7, r0
   13134:	e1a09001 	mov	r9, r1
   13138:	e1a08002 	mov	r8, r2
   1313c:	e3a06004 	mov	r6, #4
   13140:	e1a02005 	mov	r2, r5
   13144:	e1a01009 	mov	r1, r9
   13148:	e1a00007 	mov	r0, r7
   1314c:	ebffff48 	bl	12e74 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
   13150:	e1500005 	cmp	r0, r5
   13154:	e1a04000 	mov	r4, r0
   13158:	1a000001 	bne	13164 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x3c>
   1315c:	e1a00008 	mov	r0, r8
   13160:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13164:	e1a00007 	mov	r0, r7
   13168:	ebffff80 	bl	12f70 <CUSBBulkOnlyMassStorageDevice::Reset()>
   1316c:	e3500000 	cmp	r0, #0
   13170:	1a000004 	bne	13188 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x60>
   13174:	e2566001 	subs	r6, r6, #1
   13178:	1afffff0 	bne	13140 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x18>
   1317c:	e1a08004 	mov	r8, r4
   13180:	e1a00008 	mov	r0, r8
   13184:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13188:	e1a08000 	mov	r8, r0
   1318c:	eafffff2 	b	1315c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x34>

00013190 <CUSBBulkOnlyMassStorageDevice::Configure()>:
   13190:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13194:	e24dd068 	sub	sp, sp, #104	; 0x68
   13198:	e1a05000 	mov	r5, r0
   1319c:	ebfff19b 	bl	f810 <CUSBFunction::GetNumEndpoints() const>
   131a0:	e3500001 	cmp	r0, #1
   131a4:	8a000004 	bhi	131bc <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   131a8:	ea0000cb 	b	134dc <CUSBBulkOnlyMassStorageDevice::Configure()+0x34c>
   131ac:	e5d43003 	ldrb	r3, [r4, #3]
   131b0:	e203303f 	and	r3, r3, #63	; 0x3f
   131b4:	e3530002 	cmp	r3, #2
   131b8:	0a000029 	beq	13264 <CUSBBulkOnlyMassStorageDevice::Configure()+0xd4>
   131bc:	e3a01005 	mov	r1, #5
   131c0:	e1a00005 	mov	r0, r5
   131c4:	ebfff1bd 	bl	f8c0 <CUSBFunction::GetDescriptor(unsigned char)>
   131c8:	e2504000 	subs	r4, r0, #0
   131cc:	1afffff6 	bne	131ac <CUSBBulkOnlyMassStorageDevice::Configure()+0x1c>
   131d0:	e5953010 	ldr	r3, [r5, #16]
   131d4:	e1a00005 	mov	r0, r5
   131d8:	e3530000 	cmp	r3, #0
   131dc:	0a0000b0 	beq	134a4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   131e0:	e5953014 	ldr	r3, [r5, #20]
   131e4:	e3530000 	cmp	r3, #0
   131e8:	0a0000ad 	beq	134a4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   131ec:	ebfff0cb 	bl	f520 <CUSBFunction::Configure()>
   131f0:	e2506000 	subs	r6, r0, #0
   131f4:	0a0000b0 	beq	134bc <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
   131f8:	e3a00024 	mov	r0, #36	; 0x24
   131fc:	e3a06001 	mov	r6, #1
   13200:	e3a0c012 	mov	ip, #18
   13204:	e88d0041 	stm	sp, {r0, r6}
   13208:	e1cd01b8 	strh	r0, [sp, #24]
   1320c:	e3a02006 	mov	r2, #6
   13210:	e1a00005 	mov	r0, r5
   13214:	e28d3044 	add	r3, sp, #68	; 0x44
   13218:	e28d1014 	add	r1, sp, #20
   1321c:	e58dc014 	str	ip, [sp, #20]
   13220:	ebfffe28 	bl	12ac8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   13224:	e3500024 	cmp	r0, #36	; 0x24
   13228:	1a0000b2 	bne	134f8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x368>
   1322c:	e5dd3044 	ldrb	r3, [sp, #68]	; 0x44
   13230:	e213701f 	ands	r7, r3, #31
   13234:	03a04063 	moveq	r4, #99	; 0x63
   13238:	0a00002a 	beq	132e8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x158>
   1323c:	eb004df8 	bl	26a24 <CLogger::Get()>
   13240:	e5dd3044 	ldrb	r3, [sp, #68]	; 0x44
   13244:	e1a02006 	mov	r2, r6
   13248:	e203301f 	and	r3, r3, #31
   1324c:	e58d3000 	str	r3, [sp]
   13250:	e59f13b8 	ldr	r1, [pc, #952]	; 13610 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   13254:	e59f33b8 	ldr	r3, [pc, #952]	; 13614 <CUSBBulkOnlyMassStorageDevice::Configure()+0x484>
   13258:	e1a06004 	mov	r6, r4
   1325c:	eb004d32 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13260:	ea000092 	b	134b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   13264:	e1d430d2 	ldrsb	r3, [r4, #2]
   13268:	e3530000 	cmp	r3, #0
   1326c:	ba00007d 	blt	13468 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d8>
   13270:	e5953014 	ldr	r3, [r5, #20]
   13274:	e1a00005 	mov	r0, r5
   13278:	e3530000 	cmp	r3, #0
   1327c:	1a000088 	bne	134a4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   13280:	ebfff16e 	bl	f840 <CUSBFunction::GetDevice() const>
   13284:	e1a01000 	mov	r1, r0
   13288:	e3a00014 	mov	r0, #20
   1328c:	e58d100c 	str	r1, [sp, #12]
   13290:	eb005f02 	bl	2aea0 <operator new(unsigned int)>
   13294:	e1a06000 	mov	r6, r0
   13298:	e1a02004 	mov	r2, r4
   1329c:	e59d100c 	ldr	r1, [sp, #12]
   132a0:	ebffefa4 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   132a4:	e5856014 	str	r6, [r5, #20]
   132a8:	eaffffc3 	b	131bc <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   132ac:	e3a00012 	mov	r0, #18
   132b0:	e3a06001 	mov	r6, #1
   132b4:	e3a0c003 	mov	ip, #3
   132b8:	e88d0041 	stm	sp, {r0, r6}
   132bc:	e1cd02b8 	strh	r0, [sp, #40]	; 0x28
   132c0:	e3a02006 	mov	r2, #6
   132c4:	e1a00005 	mov	r0, r5
   132c8:	e28d3030 	add	r3, sp, #48	; 0x30
   132cc:	e28d1024 	add	r1, sp, #36	; 0x24
   132d0:	e58dc024 	str	ip, [sp, #36]	; 0x24
   132d4:	ebfffdfb 	bl	12ac8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   132d8:	e3500000 	cmp	r0, #0
   132dc:	ba00008e 	blt	1351c <CUSBBulkOnlyMassStorageDevice::Configure()+0x38c>
   132e0:	e2544001 	subs	r4, r4, #1
   132e4:	0a00009b 	beq	13558 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3c8>
   132e8:	eb005ab1 	bl	29db4 <CTimer::Get()>
   132ec:	e3a00064 	mov	r0, #100	; 0x64
   132f0:	eb005a7a 	bl	29ce0 <CTimer::SimpleMsDelay(unsigned int)>
   132f4:	e3a03000 	mov	r3, #0
   132f8:	e3a02006 	mov	r2, #6
   132fc:	e1a00005 	mov	r0, r5
   13300:	e58d7004 	str	r7, [sp, #4]
   13304:	e58d7000 	str	r7, [sp]
   13308:	e28d101c 	add	r1, sp, #28
   1330c:	e58d701c 	str	r7, [sp, #28]
   13310:	e1cd72b0 	strh	r7, [sp, #32]
   13314:	ebfffdeb 	bl	12ac8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   13318:	e3500000 	cmp	r0, #0
   1331c:	baffffe2 	blt	132ac <CUSBBulkOnlyMassStorageDevice::Configure()+0x11c>
   13320:	e3a02008 	mov	r2, #8
   13324:	e3a04001 	mov	r4, #1
   13328:	e3a0c025 	mov	ip, #37	; 0x25
   1332c:	e88d0014 	stm	sp, {r2, r4}
   13330:	e1a00005 	mov	r0, r5
   13334:	e3a0200a 	mov	r2, #10
   13338:	e28d301c 	add	r3, sp, #28
   1333c:	e28d1024 	add	r1, sp, #36	; 0x24
   13340:	e58d7028 	str	r7, [sp, #40]	; 0x28
   13344:	e1cd72bc 	strh	r7, [sp, #44]	; 0x2c
   13348:	e58dc024 	str	ip, [sp, #36]	; 0x24
   1334c:	ebfffddd 	bl	12ac8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   13350:	e3500008 	cmp	r0, #8
   13354:	1a000086 	bne	13574 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3e4>
   13358:	e59d3020 	ldr	r3, [sp, #32]
   1335c:	e3530802 	cmp	r3, #131072	; 0x20000
   13360:	e6bf6f33 	rev	r6, r3
   13364:	1a000073 	bne	13538 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3a8>
   13368:	e59d301c 	ldr	r3, [sp, #28]
   1336c:	e6bf3f33 	rev	r3, r3
   13370:	e3730001 	cmn	r3, #1
   13374:	e585301c 	str	r3, [r5, #28]
   13378:	0a00008e 	beq	135b8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x428>
   1337c:	e2833001 	add	r3, r3, #1
   13380:	e585301c 	str	r3, [r5, #28]
   13384:	eb004da6 	bl	26a24 <CLogger::Get()>
   13388:	e595201c 	ldr	r2, [r5, #28]
   1338c:	e59f8284 	ldr	r8, [pc, #644]	; 13618 <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
   13390:	e1a025a2 	lsr	r2, r2, #11
   13394:	e59f3280 	ldr	r3, [pc, #640]	; 1361c <CUSBBulkOnlyMassStorageDevice::Configure()+0x48c>
   13398:	e59f1270 	ldr	r1, [pc, #624]	; 13610 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   1339c:	e58d2000 	str	r2, [sp]
   133a0:	e3a02004 	mov	r2, #4
   133a4:	eb004ce0 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   133a8:	e1a07004 	mov	r7, r4
   133ac:	e1a03004 	mov	r3, r4
   133b0:	e5981000 	ldr	r1, [r8]
   133b4:	ea000002 	b	133c4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x234>
   133b8:	e2833001 	add	r3, r3, #1
   133bc:	e3530020 	cmp	r3, #32
   133c0:	0a000083 	beq	135d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x444>
   133c4:	e1a02317 	lsl	r2, r7, r3
   133c8:	e1120001 	tst	r2, r1
   133cc:	1afffff9 	bne	133b8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x228>
   133d0:	e595002c 	ldr	r0, [r5, #44]	; 0x2c
   133d4:	e1822001 	orr	r2, r2, r1
   133d8:	e3500000 	cmp	r0, #0
   133dc:	e5882000 	str	r2, [r8]
   133e0:	1a000086 	bne	13600 <CUSBBulkOnlyMassStorageDevice::Configure()+0x470>
   133e4:	e585302c 	str	r3, [r5, #44]	; 0x2c
   133e8:	e28d0030 	add	r0, sp, #48	; 0x30
   133ec:	eb00517c 	bl	279e4 <CString::CString()>
   133f0:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   133f4:	e59f1224 	ldr	r1, [pc, #548]	; 13620 <CUSBBulkOnlyMassStorageDevice::Configure()+0x490>
   133f8:	e28d0030 	add	r0, sp, #48	; 0x30
   133fc:	eb0056c2 	bl	28f0c <CString::Format(char const*, ...)>
   13400:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   13404:	e3530000 	cmp	r3, #0
   13408:	1a000078 	bne	135f0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x460>
   1340c:	e28d0030 	add	r0, sp, #48	; 0x30
   13410:	eb00518b 	bl	27a44 <CString::operator char const*() const>
   13414:	e1a02000 	mov	r2, r0
   13418:	e3a00024 	mov	r0, #36	; 0x24
   1341c:	e58d200c 	str	r2, [sp, #12]
   13420:	eb005e9e 	bl	2aea0 <operator new(unsigned int)>
   13424:	e1a04000 	mov	r4, r0
   13428:	e1a01005 	mov	r1, r5
   1342c:	e59d200c 	ldr	r2, [sp, #12]
   13430:	eb001696 	bl	18e90 <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   13434:	e1a00004 	mov	r0, r4
   13438:	e5854028 	str	r4, [r5, #40]	; 0x28
   1343c:	eb0016d0 	bl	18f84 <CPartitionManager::Initialize()>
   13440:	e2506000 	subs	r6, r0, #0
   13444:	1a000051 	bne	13590 <CUSBBulkOnlyMassStorageDevice::Configure()+0x400>
   13448:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   1344c:	e5983000 	ldr	r3, [r8]
   13450:	e585602c 	str	r6, [r5, #44]	; 0x2c
   13454:	e1c37217 	bic	r7, r3, r7, lsl r2
   13458:	e5887000 	str	r7, [r8]
   1345c:	e28d0030 	add	r0, sp, #48	; 0x30
   13460:	eb00512c 	bl	27918 <CString::~CString()>
   13464:	ea000011 	b	134b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   13468:	e5953010 	ldr	r3, [r5, #16]
   1346c:	e1a00005 	mov	r0, r5
   13470:	e3530000 	cmp	r3, #0
   13474:	1a00000a 	bne	134a4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   13478:	ebfff0f0 	bl	f840 <CUSBFunction::GetDevice() const>
   1347c:	e1a01000 	mov	r1, r0
   13480:	e3a00014 	mov	r0, #20
   13484:	e58d100c 	str	r1, [sp, #12]
   13488:	eb005e84 	bl	2aea0 <operator new(unsigned int)>
   1348c:	e1a06000 	mov	r6, r0
   13490:	e1a02004 	mov	r2, r4
   13494:	e59d100c 	ldr	r1, [sp, #12]
   13498:	ebffef26 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1349c:	e5856010 	str	r6, [r5, #16]
   134a0:	eaffff45 	b	131bc <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   134a4:	e59f1164 	ldr	r1, [pc, #356]	; 13610 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   134a8:	ebfff10f 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   134ac:	e3a06000 	mov	r6, #0
   134b0:	e1a00006 	mov	r0, r6
   134b4:	e28dd068 	add	sp, sp, #104	; 0x68
   134b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   134bc:	eb004d58 	bl	26a24 <CLogger::Get()>
   134c0:	e3a02001 	mov	r2, #1
   134c4:	e59f3158 	ldr	r3, [pc, #344]	; 13624 <CUSBBulkOnlyMassStorageDevice::Configure()+0x494>
   134c8:	e59f1140 	ldr	r1, [pc, #320]	; 13610 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   134cc:	eb004c96 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   134d0:	e1a00006 	mov	r0, r6
   134d4:	e28dd068 	add	sp, sp, #104	; 0x68
   134d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   134dc:	e3a06000 	mov	r6, #0
   134e0:	e1a00005 	mov	r0, r5
   134e4:	e59f1124 	ldr	r1, [pc, #292]	; 13610 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   134e8:	ebfff0ff 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   134ec:	e1a00006 	mov	r0, r6
   134f0:	e28dd068 	add	sp, sp, #104	; 0x68
   134f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   134f8:	eb004d49 	bl	26a24 <CLogger::Get()>
   134fc:	e1a02006 	mov	r2, r6
   13500:	e1a06004 	mov	r6, r4
   13504:	e59f311c 	ldr	r3, [pc, #284]	; 13628 <CUSBBulkOnlyMassStorageDevice::Configure()+0x498>
   13508:	e59f1100 	ldr	r1, [pc, #256]	; 13610 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   1350c:	eb004c86 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13510:	e1a00006 	mov	r0, r6
   13514:	e28dd068 	add	sp, sp, #104	; 0x68
   13518:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1351c:	eb004d40 	bl	26a24 <CLogger::Get()>
   13520:	e1a02006 	mov	r2, r6
   13524:	e59f3100 	ldr	r3, [pc, #256]	; 1362c <CUSBBulkOnlyMassStorageDevice::Configure()+0x49c>
   13528:	e59f10e0 	ldr	r1, [pc, #224]	; 13610 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   1352c:	eb004c7e 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13530:	e3a06000 	mov	r6, #0
   13534:	eaffffdd 	b	134b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   13538:	eb004d39 	bl	26a24 <CLogger::Get()>
   1353c:	e58d6000 	str	r6, [sp]
   13540:	e1a02004 	mov	r2, r4
   13544:	e59f30e4 	ldr	r3, [pc, #228]	; 13630 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4a0>
   13548:	e59f10c0 	ldr	r1, [pc, #192]	; 13610 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   1354c:	eb004c76 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13550:	e3a06000 	mov	r6, #0
   13554:	eaffffd5 	b	134b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   13558:	eb004d31 	bl	26a24 <CLogger::Get()>
   1355c:	e1a02006 	mov	r2, r6
   13560:	e59f30cc 	ldr	r3, [pc, #204]	; 13634 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4a4>
   13564:	e59f10a4 	ldr	r1, [pc, #164]	; 13610 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   13568:	e1a06004 	mov	r6, r4
   1356c:	eb004c6e 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13570:	eaffffce 	b	134b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   13574:	eb004d2a 	bl	26a24 <CLogger::Get()>
   13578:	e1a02004 	mov	r2, r4
   1357c:	e59f30b4 	ldr	r3, [pc, #180]	; 13638 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4a8>
   13580:	e59f1088 	ldr	r1, [pc, #136]	; 13610 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   13584:	eb004c68 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13588:	e3a06000 	mov	r6, #0
   1358c:	eaffffc7 	b	134b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   13590:	eb0046fd 	bl	2518c <CDeviceNameService::Get()>
   13594:	e1a04000 	mov	r4, r0
   13598:	e28d0030 	add	r0, sp, #48	; 0x30
   1359c:	eb005128 	bl	27a44 <CString::operator char const*() const>
   135a0:	e1a02005 	mov	r2, r5
   135a4:	e1a01000 	mov	r1, r0
   135a8:	e3a03001 	mov	r3, #1
   135ac:	e1a00004 	mov	r0, r4
   135b0:	eb004645 	bl	24ecc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   135b4:	eaffffa8 	b	1345c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2cc>
   135b8:	eb004d19 	bl	26a24 <CLogger::Get()>
   135bc:	e1a02004 	mov	r2, r4
   135c0:	e59f3074 	ldr	r3, [pc, #116]	; 1363c <CUSBBulkOnlyMassStorageDevice::Configure()+0x4ac>
   135c4:	e59f1044 	ldr	r1, [pc, #68]	; 13610 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   135c8:	eb004c57 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   135cc:	e3a06000 	mov	r6, #0
   135d0:	eaffffb6 	b	134b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   135d4:	eb004d12 	bl	26a24 <CLogger::Get()>
   135d8:	e3a02001 	mov	r2, #1
   135dc:	e59f305c 	ldr	r3, [pc, #92]	; 13640 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4b0>
   135e0:	e59f1028 	ldr	r1, [pc, #40]	; 13610 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   135e4:	eb004c50 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   135e8:	e3a06000 	mov	r6, #0
   135ec:	eaffffaf 	b	134b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   135f0:	e59f204c 	ldr	r2, [pc, #76]	; 13644 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4b4>
   135f4:	e59f104c 	ldr	r1, [pc, #76]	; 13648 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4b8>
   135f8:	e59f004c 	ldr	r0, [pc, #76]	; 1364c <CUSBBulkOnlyMassStorageDevice::Configure()+0x4bc>
   135fc:	eb004420 	bl	24684 <assertion_failed>
   13600:	e59f2048 	ldr	r2, [pc, #72]	; 13650 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4c0>
   13604:	e59f103c 	ldr	r1, [pc, #60]	; 13648 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4b8>
   13608:	e59f0044 	ldr	r0, [pc, #68]	; 13654 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4c4>
   1360c:	eb00441c 	bl	24684 <assertion_failed>
   13610:	000406a8 	.word	0x000406a8
   13614:	0004058c 	.word	0x0004058c
   13618:	0004da80 	.word	0x0004da80
   1361c:	00040614 	.word	0x00040614
   13620:	00040644 	.word	0x00040644
   13624:	0003fbd8 	.word	0x0003fbd8
   13628:	00040574 	.word	0x00040574
   1362c:	000405ac 	.word	0x000405ac
   13630:	000405dc 	.word	0x000405dc
   13634:	00040668 	.word	0x00040668
   13638:	000405c4 	.word	0x000405c4
   1363c:	000405f8 	.word	0x000405f8
   13640:	0003f8c4 	.word	0x0003f8c4
   13644:	0000019d 	.word	0x0000019d
   13648:	000403dc 	.word	0x000403dc
   1364c:	0004064c 	.word	0x0004064c
   13650:	00000197 	.word	0x00000197
   13654:	0004062c 	.word	0x0004062c

00013658 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   13658:	e92d4070 	push	{r4, r5, r6, lr}
   1365c:	e1a04000 	mov	r4, r0
   13660:	e5900020 	ldr	r0, [r0, #32]
   13664:	e59f304c 	ldr	r3, [pc, #76]	; 136b8 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x60>
   13668:	e3500000 	cmp	r0, #0
   1366c:	e5843000 	str	r3, [r4]
   13670:	0a000002 	beq	13680 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x28>
   13674:	eb005e16 	bl	2aed4 <operator delete[](void*)>
   13678:	e3a03000 	mov	r3, #0
   1367c:	e5843020 	str	r3, [r4, #32]
   13680:	e5945010 	ldr	r5, [r4, #16]
   13684:	e3550000 	cmp	r5, #0
   13688:	0a000006 	beq	136a8 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x50>
   1368c:	e1a00005 	mov	r0, r5
   13690:	ebffef0c 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   13694:	e1a00005 	mov	r0, r5
   13698:	e3a01014 	mov	r1, #20
   1369c:	eb005e0d 	bl	2aed8 <operator delete(void*, unsigned int)>
   136a0:	e3a03000 	mov	r3, #0
   136a4:	e5843010 	str	r3, [r4, #16]
   136a8:	e1a00004 	mov	r0, r4
   136ac:	ebffef72 	bl	f47c <CUSBFunction::~CUSBFunction()>
   136b0:	e1a00004 	mov	r0, r4
   136b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   136b8:	0004079c 	.word	0x0004079c

000136bc <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   136bc:	e92d4010 	push	{r4, lr}
   136c0:	e1a04000 	mov	r4, r0
   136c4:	ebffffe3 	bl	13658 <CUSBMIDIDevice::~CUSBMIDIDevice()>
   136c8:	e1a00004 	mov	r0, r4
   136cc:	e3a01028 	mov	r1, #40	; 0x28
   136d0:	eb005e00 	bl	2aed8 <operator delete(void*, unsigned int)>
   136d4:	e1a00004 	mov	r0, r4
   136d8:	e8bd8010 	pop	{r4, pc}

000136dc <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>:
   136dc:	e92d4010 	push	{r4, lr}
   136e0:	e1a04000 	mov	r4, r0
   136e4:	ebffeff6 	bl	f6c4 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   136e8:	e3a03000 	mov	r3, #0
   136ec:	e59f201c 	ldr	r2, [pc, #28]	; 13710 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)+0x34>
   136f0:	e1a00004 	mov	r0, r4
   136f4:	e5843010 	str	r3, [r4, #16]
   136f8:	e5842000 	str	r2, [r4]
   136fc:	e5843014 	str	r3, [r4, #20]
   13700:	e5843018 	str	r3, [r4, #24]
   13704:	e5843020 	str	r3, [r4, #32]
   13708:	e5843024 	str	r3, [r4, #36]	; 0x24
   1370c:	e8bd8010 	pop	{r4, pc}
   13710:	0004079c 	.word	0x0004079c

00013714 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   13714:	e5903014 	ldr	r3, [r0, #20]
   13718:	e92d4010 	push	{r4, lr}
   1371c:	e3530000 	cmp	r3, #0
   13720:	1a000006 	bne	13740 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x2c>
   13724:	e3510000 	cmp	r1, #0
   13728:	e5801014 	str	r1, [r0, #20]
   1372c:	18bd8010 	popne	{r4, pc}
   13730:	e3a0209b 	mov	r2, #155	; 0x9b
   13734:	e59f1014 	ldr	r1, [pc, #20]	; 13750 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x3c>
   13738:	e59f0014 	ldr	r0, [pc, #20]	; 13754 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x40>
   1373c:	eb0043d0 	bl	24684 <assertion_failed>
   13740:	e3a02099 	mov	r2, #153	; 0x99
   13744:	e59f1004 	ldr	r1, [pc, #4]	; 13750 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x3c>
   13748:	e59f0008 	ldr	r0, [pc, #8]	; 13758 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x44>
   1374c:	eb0043cc 	bl	24684 <assertion_failed>
   13750:	000406b0 	.word	0x000406b0
   13754:	000406d4 	.word	0x000406d4
   13758:	000406bc 	.word	0x000406bc

0001375c <CUSBMIDIDevice::StartRequest()>:
   1375c:	e92d4070 	push	{r4, r5, r6, lr}
   13760:	e5903010 	ldr	r3, [r0, #16]
   13764:	e24dd008 	sub	sp, sp, #8
   13768:	e3530000 	cmp	r3, #0
   1376c:	0a000022 	beq	137fc <CUSBMIDIDevice::StartRequest()+0xa0>
   13770:	e5903020 	ldr	r3, [r0, #32]
   13774:	e1a04000 	mov	r4, r0
   13778:	e3530000 	cmp	r3, #0
   1377c:	0a000022 	beq	1380c <CUSBMIDIDevice::StartRequest()+0xb0>
   13780:	e5905018 	ldr	r5, [r0, #24]
   13784:	e3550000 	cmp	r5, #0
   13788:	1a000023 	bne	1381c <CUSBMIDIDevice::StartRequest()+0xc0>
   1378c:	e1d031bc 	ldrh	r3, [r0, #28]
   13790:	e3530000 	cmp	r3, #0
   13794:	0a000024 	beq	1382c <CUSBMIDIDevice::StartRequest()+0xd0>
   13798:	e3a00028 	mov	r0, #40	; 0x28
   1379c:	eb000353 	bl	144f0 <CUSBRequest::operator new(unsigned int)>
   137a0:	e1a06000 	mov	r6, r0
   137a4:	e58d5000 	str	r5, [sp]
   137a8:	e1d431bc 	ldrh	r3, [r4, #28]
   137ac:	e5942020 	ldr	r2, [r4, #32]
   137b0:	e5941010 	ldr	r1, [r4, #16]
   137b4:	eb0002cc 	bl	142ec <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   137b8:	e1a03004 	mov	r3, r4
   137bc:	e1a02005 	mov	r2, r5
   137c0:	e59f1074 	ldr	r1, [pc, #116]	; 1383c <CUSBMIDIDevice::StartRequest()+0xe0>
   137c4:	e1a00006 	mov	r0, r6
   137c8:	e5846018 	str	r6, [r4, #24]
   137cc:	eb000328 	bl	14474 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   137d0:	e5940018 	ldr	r0, [r4, #24]
   137d4:	eb000340 	bl	144dc <CUSBRequest::SetCompleteOnNAK()>
   137d8:	e1a00004 	mov	r0, r4
   137dc:	ebfff02c 	bl	f894 <CUSBFunction::GetHost() const>
   137e0:	e1a02005 	mov	r2, r5
   137e4:	e5903000 	ldr	r3, [r0]
   137e8:	e5941018 	ldr	r1, [r4, #24]
   137ec:	e593300c 	ldr	r3, [r3, #12]
   137f0:	e28dd008 	add	sp, sp, #8
   137f4:	e8bd4070 	pop	{r4, r5, r6, lr}
   137f8:	e12fff13 	bx	r3
   137fc:	e3a020a0 	mov	r2, #160	; 0xa0
   13800:	e59f1038 	ldr	r1, [pc, #56]	; 13840 <CUSBMIDIDevice::StartRequest()+0xe4>
   13804:	e59f0038 	ldr	r0, [pc, #56]	; 13844 <CUSBMIDIDevice::StartRequest()+0xe8>
   13808:	eb00439d 	bl	24684 <assertion_failed>
   1380c:	e3a020a1 	mov	r2, #161	; 0xa1
   13810:	e59f1028 	ldr	r1, [pc, #40]	; 13840 <CUSBMIDIDevice::StartRequest()+0xe4>
   13814:	e59f002c 	ldr	r0, [pc, #44]	; 13848 <CUSBMIDIDevice::StartRequest()+0xec>
   13818:	eb004399 	bl	24684 <assertion_failed>
   1381c:	e3a020a3 	mov	r2, #163	; 0xa3
   13820:	e59f1018 	ldr	r1, [pc, #24]	; 13840 <CUSBMIDIDevice::StartRequest()+0xe4>
   13824:	e59f0020 	ldr	r0, [pc, #32]	; 1384c <CUSBMIDIDevice::StartRequest()+0xf0>
   13828:	eb004395 	bl	24684 <assertion_failed>
   1382c:	e3a020a4 	mov	r2, #164	; 0xa4
   13830:	e59f1008 	ldr	r1, [pc, #8]	; 13840 <CUSBMIDIDevice::StartRequest()+0xe4>
   13834:	e59f0014 	ldr	r0, [pc, #20]	; 13850 <CUSBMIDIDevice::StartRequest()+0xf4>
   13838:	eb004391 	bl	24684 <assertion_failed>
   1383c:	00013aa8 	.word	0x00013aa8
   13840:	000406b0 	.word	0x000406b0
   13844:	000406ec 	.word	0x000406ec
   13848:	00040700 	.word	0x00040700
   1384c:	00040338 	.word	0x00040338
   13850:	00040718 	.word	0x00040718

00013854 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)>:
   13854:	e3520000 	cmp	r2, #0
   13858:	e92d4010 	push	{r4, lr}
   1385c:	0a000007 	beq	13880 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x2c>
   13860:	e5923024 	ldr	r3, [r2, #36]	; 0x24
   13864:	e1500003 	cmp	r0, r3
   13868:	1a000008 	bne	13890 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x3c>
   1386c:	e8bd4010 	pop	{r4, lr}
   13870:	e3a03000 	mov	r3, #0
   13874:	e1a00002 	mov	r0, r2
   13878:	e5823024 	str	r3, [r2, #36]	; 0x24
   1387c:	eaffffb6 	b	1375c <CUSBMIDIDevice::StartRequest()>
   13880:	e3a020f0 	mov	r2, #240	; 0xf0
   13884:	e59f1014 	ldr	r1, [pc, #20]	; 138a0 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
   13888:	e59f0014 	ldr	r0, [pc, #20]	; 138a4 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x50>
   1388c:	eb00437c 	bl	24684 <assertion_failed>
   13890:	e3a020e7 	mov	r2, #231	; 0xe7
   13894:	e59f1004 	ldr	r1, [pc, #4]	; 138a0 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
   13898:	e59f0008 	ldr	r0, [pc, #8]	; 138a8 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x54>
   1389c:	eb004378 	bl	24684 <assertion_failed>
   138a0:	000406b0 	.word	0x000406b0
   138a4:	0003ea38 	.word	0x0003ea38
   138a8:	0004072c 	.word	0x0004072c

000138ac <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>:
   138ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   138b0:	e3510000 	cmp	r1, #0
   138b4:	e24dd008 	sub	sp, sp, #8
   138b8:	0a000058 	beq	13a20 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x174>
   138bc:	e5905018 	ldr	r5, [r0, #24]
   138c0:	e1a04000 	mov	r4, r0
   138c4:	e1550001 	cmp	r5, r1
   138c8:	1a000058 	bne	13a30 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x184>
   138cc:	e1a00005 	mov	r0, r5
   138d0:	eb0002b4 	bl	143a8 <CUSBRequest::GetStatus() const>
   138d4:	e3500000 	cmp	r0, #0
   138d8:	1a000017 	bne	1393c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x90>
   138dc:	e5945018 	ldr	r5, [r4, #24]
   138e0:	e3550000 	cmp	r5, #0
   138e4:	0a000006 	beq	13904 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   138e8:	e1a00005 	mov	r0, r5
   138ec:	eb00029e 	bl	1436c <CUSBRequest::~CUSBRequest()>
   138f0:	e1a00005 	mov	r0, r5
   138f4:	e3a01028 	mov	r1, #40	; 0x28
   138f8:	eb000311 	bl	14544 <CUSBRequest::operator delete(void*, unsigned int)>
   138fc:	e3a03000 	mov	r3, #0
   13900:	e5843018 	str	r3, [r4, #24]
   13904:	e5945024 	ldr	r5, [r4, #36]	; 0x24
   13908:	e3550000 	cmp	r5, #0
   1390c:	1a00003f 	bne	13a10 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x164>
   13910:	eb005927 	bl	29db4 <CTimer::Get()>
   13914:	e1a03005 	mov	r3, r5
   13918:	e3a01001 	mov	r1, #1
   1391c:	e59f2164 	ldr	r2, [pc, #356]	; 13a88 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1dc>
   13920:	e58d4000 	str	r4, [sp]
   13924:	eb005760 	bl	296ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   13928:	e3500000 	cmp	r0, #0
   1392c:	e5840024 	str	r0, [r4, #36]	; 0x24
   13930:	0a000042 	beq	13a40 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x194>
   13934:	e28dd008 	add	sp, sp, #8
   13938:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1393c:	e1a00005 	mov	r0, r5
   13940:	eb00029a 	bl	143b0 <CUSBRequest::GetResultLength() const>
   13944:	e2108003 	ands	r8, r0, #3
   13948:	1affffe3 	bne	138dc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x30>
   1394c:	e5946020 	ldr	r6, [r4, #32]
   13950:	e3560000 	cmp	r6, #0
   13954:	0a00003d 	beq	13a50 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a4>
   13958:	e1a00005 	mov	r0, r5
   1395c:	eb000293 	bl	143b0 <CUSBRequest::GetResultLength() const>
   13960:	e5945020 	ldr	r5, [r4, #32]
   13964:	e0860000 	add	r0, r6, r0
   13968:	e1500005 	cmp	r0, r5
   1396c:	9a00003b 	bls	13a60 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b4>
   13970:	e1e06005 	mvn	r6, r5
   13974:	e0806006 	add	r6, r0, r6
   13978:	e2853005 	add	r3, r5, #5
   1397c:	e3c66003 	bic	r6, r6, #3
   13980:	e59f7104 	ldr	r7, [pc, #260]	; 13a8c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e0>
   13984:	e0866003 	add	r6, r6, r3
   13988:	e2855001 	add	r5, r5, #1
   1398c:	e5550001 	ldrb	r0, [r5, #-1]
   13990:	e3500000 	cmp	r0, #0
   13994:	0a00000a 	beq	139c4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x118>
   13998:	e5948014 	ldr	r8, [r4, #20]
   1399c:	e3580000 	cmp	r8, #0
   139a0:	03a08001 	moveq	r8, #1
   139a4:	0a000006 	beq	139c4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x118>
   139a8:	e200300f 	and	r3, r0, #15
   139ac:	e0873103 	add	r3, r7, r3, lsl #2
   139b0:	e1a01005 	mov	r1, r5
   139b4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   139b8:	e1a00220 	lsr	r0, r0, #4
   139bc:	e12fff38 	blx	r8
   139c0:	e3a08001 	mov	r8, #1
   139c4:	e2855004 	add	r5, r5, #4
   139c8:	e1560005 	cmp	r6, r5
   139cc:	1affffee 	bne	1398c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xe0>
   139d0:	e5945018 	ldr	r5, [r4, #24]
   139d4:	e3550000 	cmp	r5, #0
   139d8:	0a000004 	beq	139f0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x144>
   139dc:	e1a00005 	mov	r0, r5
   139e0:	eb000261 	bl	1436c <CUSBRequest::~CUSBRequest()>
   139e4:	e1a00005 	mov	r0, r5
   139e8:	e3a01028 	mov	r1, #40	; 0x28
   139ec:	eb0002d4 	bl	14544 <CUSBRequest::operator delete(void*, unsigned int)>
   139f0:	e3a03000 	mov	r3, #0
   139f4:	e1580003 	cmp	r8, r3
   139f8:	e5843018 	str	r3, [r4, #24]
   139fc:	0affffc0 	beq	13904 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   13a00:	e1a00004 	mov	r0, r4
   13a04:	e28dd008 	add	sp, sp, #8
   13a08:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   13a0c:	eaffff52 	b	1375c <CUSBMIDIDevice::StartRequest()>
   13a10:	e3a020d7 	mov	r2, #215	; 0xd7
   13a14:	e59f1074 	ldr	r1, [pc, #116]	; 13a90 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e4>
   13a18:	e59f0074 	ldr	r0, [pc, #116]	; 13a94 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e8>
   13a1c:	eb004318 	bl	24684 <assertion_failed>
   13a20:	e3a020b0 	mov	r2, #176	; 0xb0
   13a24:	e59f1064 	ldr	r1, [pc, #100]	; 13a90 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e4>
   13a28:	e59f0068 	ldr	r0, [pc, #104]	; 13a98 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1ec>
   13a2c:	eb004314 	bl	24684 <assertion_failed>
   13a30:	e3a020b1 	mov	r2, #177	; 0xb1
   13a34:	e59f1054 	ldr	r1, [pc, #84]	; 13a90 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e4>
   13a38:	e59f005c 	ldr	r0, [pc, #92]	; 13a9c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1f0>
   13a3c:	eb004310 	bl	24684 <assertion_failed>
   13a40:	e3a020d9 	mov	r2, #217	; 0xd9
   13a44:	e59f1044 	ldr	r1, [pc, #68]	; 13a90 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e4>
   13a48:	e59f0050 	ldr	r0, [pc, #80]	; 13aa0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1f4>
   13a4c:	eb00430c 	bl	24684 <assertion_failed>
   13a50:	e3a020b8 	mov	r2, #184	; 0xb8
   13a54:	e59f1034 	ldr	r1, [pc, #52]	; 13a90 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e4>
   13a58:	e59f0044 	ldr	r0, [pc, #68]	; 13aa4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1f8>
   13a5c:	eb004308 	bl	24684 <assertion_failed>
   13a60:	e5945018 	ldr	r5, [r4, #24]
   13a64:	e3550000 	cmp	r5, #0
   13a68:	0affffa5 	beq	13904 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   13a6c:	e1a00005 	mov	r0, r5
   13a70:	eb00023d 	bl	1436c <CUSBRequest::~CUSBRequest()>
   13a74:	e1a00005 	mov	r0, r5
   13a78:	e3a01028 	mov	r1, #40	; 0x28
   13a7c:	eb0002b0 	bl	14544 <CUSBRequest::operator delete(void*, unsigned int)>
   13a80:	e5848018 	str	r8, [r4, #24]
   13a84:	eaffff9e 	b	13904 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   13a88:	00013854 	.word	0x00013854
   13a8c:	00040794 	.word	0x00040794
   13a90:	000406b0 	.word	0x000406b0
   13a94:	00040740 	.word	0x00040740
   13a98:	0003eb24 	.word	0x0003eb24
   13a9c:	0004035c 	.word	0x0004035c
   13aa0:	00040750 	.word	0x00040750
   13aa4:	00040700 	.word	0x00040700

00013aa8 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   13aa8:	e3520000 	cmp	r2, #0
   13aac:	0a000002 	beq	13abc <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   13ab0:	e1a01000 	mov	r1, r0
   13ab4:	e1a00002 	mov	r0, r2
   13ab8:	eaffff7b 	b	138ac <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   13abc:	e3a020e0 	mov	r2, #224	; 0xe0
   13ac0:	e92d4010 	push	{r4, lr}
   13ac4:	e59f1004 	ldr	r1, [pc, #4]	; 13ad0 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   13ac8:	e59f0004 	ldr	r0, [pc, #4]	; 13ad4 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   13acc:	eb0042ec 	bl	24684 <assertion_failed>
   13ad0:	000406b0 	.word	0x000406b0
   13ad4:	0003ea38 	.word	0x0003ea38

00013ad8 <CUSBMIDIDevice::TimerHandler(unsigned int)>:
   13ad8:	e5902024 	ldr	r2, [r0, #36]	; 0x24
   13adc:	e1520001 	cmp	r2, r1
   13ae0:	1a000002 	bne	13af0 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x18>
   13ae4:	e3a02000 	mov	r2, #0
   13ae8:	e5802024 	str	r2, [r0, #36]	; 0x24
   13aec:	eaffff1a 	b	1375c <CUSBMIDIDevice::StartRequest()>
   13af0:	e3a020e7 	mov	r2, #231	; 0xe7
   13af4:	e92d4010 	push	{r4, lr}
   13af8:	e59f1004 	ldr	r1, [pc, #4]	; 13b04 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x2c>
   13afc:	e59f0004 	ldr	r0, [pc, #4]	; 13b08 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x30>
   13b00:	eb0042df 	bl	24684 <assertion_failed>
   13b04:	000406b0 	.word	0x000406b0
   13b08:	0004072c 	.word	0x0004072c

00013b0c <CUSBMIDIDevice::Configure()>:
   13b0c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13b10:	e24dd01c 	sub	sp, sp, #28
   13b14:	e1a05000 	mov	r5, r0
   13b18:	ebffef3c 	bl	f810 <CUSBFunction::GetNumEndpoints() const>
   13b1c:	e2506000 	subs	r6, r0, #0
   13b20:	e1a00005 	mov	r0, r5
   13b24:	0a000042 	beq	13c34 <CUSBMIDIDevice::Configure()+0x128>
   13b28:	ebffef44 	bl	f840 <CUSBFunction::GetDevice() const>
   13b2c:	ebffe9f1 	bl	e2f8 <CUSBDevice::GetDeviceDescriptor() const>
   13b30:	e3500000 	cmp	r0, #0
   13b34:	0a000073 	beq	13d08 <CUSBMIDIDevice::Configure()+0x1fc>
   13b38:	e5d03008 	ldrb	r3, [r0, #8]
   13b3c:	e5d01009 	ldrb	r1, [r0, #9]
   13b40:	e59f21d0 	ldr	r2, [pc, #464]	; 13d18 <CUSBMIDIDevice::Configure()+0x20c>
   13b44:	e1833401 	orr	r3, r3, r1, lsl #8
   13b48:	e1530002 	cmp	r3, r2
   13b4c:	05d0600a 	ldrbeq	r6, [r0, #10]
   13b50:	05d0200b 	ldrbeq	r2, [r0, #11]
   13b54:	059f31c0 	ldreq	r3, [pc, #448]	; 13d1c <CUSBMIDIDevice::Configure()+0x210>
   13b58:	01866402 	orreq	r6, r6, r2, lsl #8
   13b5c:	00466003 	subeq	r6, r6, r3
   13b60:	016f6f16 	clzeq	r6, r6
   13b64:	13a06000 	movne	r6, #0
   13b68:	01a062a6 	lsreq	r6, r6, #5
   13b6c:	e3a01005 	mov	r1, #5
   13b70:	e1a00005 	mov	r0, r5
   13b74:	ebffef51 	bl	f8c0 <CUSBFunction::GetDescriptor(unsigned char)>
   13b78:	e2504000 	subs	r4, r0, #0
   13b7c:	0a000031 	beq	13c48 <CUSBMIDIDevice::Configure()+0x13c>
   13b80:	e1d430d2 	ldrsb	r3, [r4, #2]
   13b84:	e3530000 	cmp	r3, #0
   13b88:	aafffff7 	bge	13b6c <CUSBMIDIDevice::Configure()+0x60>
   13b8c:	e5d43003 	ldrb	r3, [r4, #3]
   13b90:	e203303f 	and	r3, r3, #63	; 0x3f
   13b94:	e3530002 	cmp	r3, #2
   13b98:	1afffff3 	bne	13b6c <CUSBMIDIDevice::Configure()+0x60>
   13b9c:	e3560000 	cmp	r6, #0
   13ba0:	0a000019 	beq	13c0c <CUSBMIDIDevice::Configure()+0x100>
   13ba4:	e5953010 	ldr	r3, [r5, #16]
   13ba8:	e3530000 	cmp	r3, #0
   13bac:	1a000050 	bne	13cf4 <CUSBMIDIDevice::Configure()+0x1e8>
   13bb0:	e1a00005 	mov	r0, r5
   13bb4:	ebffef21 	bl	f840 <CUSBFunction::GetDevice() const>
   13bb8:	e1a01000 	mov	r1, r0
   13bbc:	e3a00014 	mov	r0, #20
   13bc0:	e58d1004 	str	r1, [sp, #4]
   13bc4:	eb005cb5 	bl	2aea0 <operator new(unsigned int)>
   13bc8:	e1a07000 	mov	r7, r0
   13bcc:	e1a02004 	mov	r2, r4
   13bd0:	e59d1004 	ldr	r1, [sp, #4]
   13bd4:	ebffed57 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13bd8:	e5857010 	str	r7, [r5, #16]
   13bdc:	e5d40004 	ldrb	r0, [r4, #4]
   13be0:	e5d42005 	ldrb	r2, [r4, #5]
   13be4:	e5953020 	ldr	r3, [r5, #32]
   13be8:	e1800402 	orr	r0, r0, r2, lsl #8
   13bec:	e3c00003 	bic	r0, r0, #3
   13bf0:	e6ff0070 	uxth	r0, r0
   13bf4:	e3530000 	cmp	r3, #0
   13bf8:	e1c501bc 	strh	r0, [r5, #28]
   13bfc:	1a000038 	bne	13ce4 <CUSBMIDIDevice::Configure()+0x1d8>
   13c00:	eb005cac 	bl	2aeb8 <operator new[](unsigned int)>
   13c04:	e5850020 	str	r0, [r5, #32]
   13c08:	eaffffd7 	b	13b6c <CUSBMIDIDevice::Configure()+0x60>
   13c0c:	e3a01025 	mov	r1, #37	; 0x25
   13c10:	e1a00005 	mov	r0, r5
   13c14:	ebffef29 	bl	f8c0 <CUSBFunction::GetDescriptor(unsigned char)>
   13c18:	e3500000 	cmp	r0, #0
   13c1c:	0affffd2 	beq	13b6c <CUSBMIDIDevice::Configure()+0x60>
   13c20:	e5d43000 	ldrb	r3, [r4]
   13c24:	e0843003 	add	r3, r4, r3
   13c28:	e1500003 	cmp	r0, r3
   13c2c:	1affffce 	bne	13b6c <CUSBMIDIDevice::Configure()+0x60>
   13c30:	eaffffdb 	b	13ba4 <CUSBMIDIDevice::Configure()+0x98>
   13c34:	e59f10e4 	ldr	r1, [pc, #228]	; 13d20 <CUSBMIDIDevice::Configure()+0x214>
   13c38:	ebffef2b 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   13c3c:	e1a00006 	mov	r0, r6
   13c40:	e28dd01c 	add	sp, sp, #28
   13c44:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13c48:	e5956010 	ldr	r6, [r5, #16]
   13c4c:	e1a00005 	mov	r0, r5
   13c50:	e3560000 	cmp	r6, #0
   13c54:	0afffff6 	beq	13c34 <CUSBMIDIDevice::Configure()+0x128>
   13c58:	ebffee30 	bl	f520 <CUSBFunction::Configure()>
   13c5c:	e2506000 	subs	r6, r0, #0
   13c60:	0a000019 	beq	13ccc <CUSBMIDIDevice::Configure()+0x1c0>
   13c64:	e28d0008 	add	r0, sp, #8
   13c68:	eb004f5d 	bl	279e4 <CString::CString()>
   13c6c:	e59f30b0 	ldr	r3, [pc, #176]	; 13d24 <CUSBMIDIDevice::Configure()+0x218>
   13c70:	e59f10b0 	ldr	r1, [pc, #176]	; 13d28 <CUSBMIDIDevice::Configure()+0x21c>
   13c74:	e5932000 	ldr	r2, [r3]
   13c78:	e28d0008 	add	r0, sp, #8
   13c7c:	e282c001 	add	ip, r2, #1
   13c80:	e583c000 	str	ip, [r3]
   13c84:	eb0054a0 	bl	28f0c <CString::Format(char const*, ...)>
   13c88:	eb00453f 	bl	2518c <CDeviceNameService::Get()>
   13c8c:	e1a06000 	mov	r6, r0
   13c90:	e28d0008 	add	r0, sp, #8
   13c94:	eb004f6a 	bl	27a44 <CString::operator char const*() const>
   13c98:	e1a03004 	mov	r3, r4
   13c9c:	e1a01000 	mov	r1, r0
   13ca0:	e1a02005 	mov	r2, r5
   13ca4:	e1a00006 	mov	r0, r6
   13ca8:	eb004487 	bl	24ecc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   13cac:	e1a00005 	mov	r0, r5
   13cb0:	ebfffea9 	bl	1375c <CUSBMIDIDevice::StartRequest()>
   13cb4:	e1a06000 	mov	r6, r0
   13cb8:	e28d0008 	add	r0, sp, #8
   13cbc:	eb004f15 	bl	27918 <CString::~CString()>
   13cc0:	e1a00006 	mov	r0, r6
   13cc4:	e28dd01c 	add	sp, sp, #28
   13cc8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13ccc:	eb004b54 	bl	26a24 <CLogger::Get()>
   13cd0:	e3a02001 	mov	r2, #1
   13cd4:	e59f3050 	ldr	r3, [pc, #80]	; 13d2c <CUSBMIDIDevice::Configure()+0x220>
   13cd8:	e59f1040 	ldr	r1, [pc, #64]	; 13d20 <CUSBMIDIDevice::Configure()+0x214>
   13cdc:	eb004a92 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13ce0:	eaffffd5 	b	13c3c <CUSBMIDIDevice::Configure()+0x130>
   13ce4:	e3a0207d 	mov	r2, #125	; 0x7d
   13ce8:	e59f1040 	ldr	r1, [pc, #64]	; 13d30 <CUSBMIDIDevice::Configure()+0x224>
   13cec:	e59f0040 	ldr	r0, [pc, #64]	; 13d34 <CUSBMIDIDevice::Configure()+0x228>
   13cf0:	eb004263 	bl	24684 <assertion_failed>
   13cf4:	e1a00005 	mov	r0, r5
   13cf8:	e59f1020 	ldr	r1, [pc, #32]	; 13d20 <CUSBMIDIDevice::Configure()+0x214>
   13cfc:	ebffeefa 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   13d00:	e3a06000 	mov	r6, #0
   13d04:	eaffffcc 	b	13c3c <CUSBMIDIDevice::Configure()+0x130>
   13d08:	e3a02051 	mov	r2, #81	; 0x51
   13d0c:	e59f101c 	ldr	r1, [pc, #28]	; 13d30 <CUSBMIDIDevice::Configure()+0x224>
   13d10:	e59f0020 	ldr	r0, [pc, #32]	; 13d38 <CUSBMIDIDevice::Configure()+0x22c>
   13d14:	eb00425a 	bl	24684 <assertion_failed>
   13d18:	00000582 	.word	0x00000582
   13d1c:	0000012a 	.word	0x0000012a
   13d20:	00040800 	.word	0x00040800
   13d24:	0004782c 	.word	0x0004782c
   13d28:	0004078c 	.word	0x0004078c
   13d2c:	0003fbd8 	.word	0x0003fbd8
   13d30:	000406b0 	.word	0x000406b0
   13d34:	00040774 	.word	0x00040774
   13d38:	00040760 	.word	0x00040760

00013d3c <CUSBMouseDevice::~CUSBMouseDevice()>:
   13d3c:	e92d4010 	push	{r4, lr}
   13d40:	e1a04000 	mov	r4, r0
   13d44:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   13d48:	e59f3044 	ldr	r3, [pc, #68]	; 13d94 <CUSBMouseDevice::~CUSBMouseDevice()+0x58>
   13d4c:	e3500000 	cmp	r0, #0
   13d50:	e5843000 	str	r3, [r4]
   13d54:	0a000002 	beq	13d64 <CUSBMouseDevice::~CUSBMouseDevice()+0x28>
   13d58:	e5903000 	ldr	r3, [r0]
   13d5c:	e5933004 	ldr	r3, [r3, #4]
   13d60:	e12fff33 	blx	r3
   13d64:	e3a03000 	mov	r3, #0
   13d68:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   13d6c:	e5843024 	str	r3, [r4, #36]	; 0x24
   13d70:	e1500003 	cmp	r0, r3
   13d74:	0a000000 	beq	13d7c <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   13d78:	eb005c55 	bl	2aed4 <operator delete[](void*)>
   13d7c:	e3a03000 	mov	r3, #0
   13d80:	e1a00004 	mov	r0, r4
   13d84:	e5843028 	str	r3, [r4, #40]	; 0x28
   13d88:	ebfff88d 	bl	11fc4 <CUSBHIDDevice::~CUSBHIDDevice()>
   13d8c:	e1a00004 	mov	r0, r4
   13d90:	e8bd8010 	pop	{r4, pc}
   13d94:	00040810 	.word	0x00040810

00013d98 <CUSBMouseDevice::~CUSBMouseDevice()>:
   13d98:	e92d4010 	push	{r4, lr}
   13d9c:	e1a04000 	mov	r4, r0
   13da0:	ebffffe5 	bl	13d3c <CUSBMouseDevice::~CUSBMouseDevice()>
   13da4:	e1a00004 	mov	r0, r4
   13da8:	e3a01030 	mov	r1, #48	; 0x30
   13dac:	eb005c49 	bl	2aed8 <operator delete(void*, unsigned int)>
   13db0:	e1a00004 	mov	r0, r4
   13db4:	e8bd8010 	pop	{r4, pc}

00013db8 <CUSBMouseDevice::Configure()>:
   13db8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13dbc:	e3a01021 	mov	r1, #33	; 0x21
   13dc0:	e24dd01c 	sub	sp, sp, #28
   13dc4:	e1a04000 	mov	r4, r0
   13dc8:	ebffeebc 	bl	f8c0 <CUSBFunction::GetDescriptor(unsigned char)>
   13dcc:	e2505000 	subs	r5, r0, #0
   13dd0:	0a000003 	beq	13de4 <CUSBMouseDevice::Configure()+0x2c>
   13dd4:	e5d50007 	ldrb	r0, [r5, #7]
   13dd8:	e5d53008 	ldrb	r3, [r5, #8]
   13ddc:	e1900403 	orrs	r0, r0, r3, lsl #8
   13de0:	1a000005 	bne	13dfc <CUSBMouseDevice::Configure()+0x44>
   13de4:	e1a00004 	mov	r0, r4
   13de8:	e59f10f4 	ldr	r1, [pc, #244]	; 13ee4 <CUSBMouseDevice::Configure()+0x12c>
   13dec:	ebffeebe 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   13df0:	e3a00000 	mov	r0, #0
   13df4:	e28dd01c 	add	sp, sp, #28
   13df8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13dfc:	e1c402bc 	strh	r0, [r4, #44]	; 0x2c
   13e00:	eb005c2c 	bl	2aeb8 <operator new[](unsigned int)>
   13e04:	e1a03000 	mov	r3, r0
   13e08:	e1a00004 	mov	r0, r4
   13e0c:	e5843028 	str	r3, [r4, #40]	; 0x28
   13e10:	ebffee9f 	bl	f894 <CUSBFunction::GetHost() const>
   13e14:	e1a06000 	mov	r6, r0
   13e18:	e1a00004 	mov	r0, r4
   13e1c:	ebffee91 	bl	f868 <CUSBFunction::GetEndpoint0() const>
   13e20:	e1a01000 	mov	r1, r0
   13e24:	e5d52006 	ldrb	r2, [r5, #6]
   13e28:	e1a00004 	mov	r0, r4
   13e2c:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   13e30:	e1d472bc 	ldrh	r7, [r4, #44]	; 0x2c
   13e34:	e58d1014 	str	r1, [sp, #20]
   13e38:	e58d2010 	str	r2, [sp, #16]
   13e3c:	ebffeef0 	bl	fa04 <CUSBFunction::GetInterfaceNumber() const>
   13e40:	e3a0c081 	mov	ip, #129	; 0x81
   13e44:	e6ff3070 	uxth	r3, r0
   13e48:	e58d300c 	str	r3, [sp, #12]
   13e4c:	e1a00006 	mov	r0, r6
   13e50:	e3a03000 	mov	r3, #0
   13e54:	e88d00a0 	stm	sp, {r5, r7}
   13e58:	e59d1014 	ldr	r1, [sp, #20]
   13e5c:	e59d2010 	ldr	r2, [sp, #16]
   13e60:	e58dc008 	str	ip, [sp, #8]
   13e64:	ebfffa68 	bl	1280c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   13e68:	e1d432bc 	ldrh	r3, [r4, #44]	; 0x2c
   13e6c:	e1500003 	cmp	r0, r3
   13e70:	0a000007 	beq	13e94 <CUSBMouseDevice::Configure()+0xdc>
   13e74:	eb004aea 	bl	26a24 <CLogger::Get()>
   13e78:	e3a02001 	mov	r2, #1
   13e7c:	e59f3064 	ldr	r3, [pc, #100]	; 13ee8 <CUSBMouseDevice::Configure()+0x130>
   13e80:	e59f105c 	ldr	r1, [pc, #92]	; 13ee4 <CUSBMouseDevice::Configure()+0x12c>
   13e84:	eb004a28 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13e88:	e3a00000 	mov	r0, #0
   13e8c:	e28dd01c 	add	sp, sp, #28
   13e90:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13e94:	e3a01000 	mov	r1, #0
   13e98:	e1a00004 	mov	r0, r4
   13e9c:	ebfff873 	bl	12070 <CUSBHIDDevice::Configure(unsigned int)>
   13ea0:	e3500000 	cmp	r0, #0
   13ea4:	0a000008 	beq	13ecc <CUSBMouseDevice::Configure()+0x114>
   13ea8:	e3a00028 	mov	r0, #40	; 0x28
   13eac:	eb005bfb 	bl	2aea0 <operator new(unsigned int)>
   13eb0:	e1a05000 	mov	r5, r0
   13eb4:	eb001287 	bl	188d8 <CMouseDevice::CMouseDevice()>
   13eb8:	e1a00004 	mov	r0, r4
   13ebc:	e5845024 	str	r5, [r4, #36]	; 0x24
   13ec0:	e28dd01c 	add	sp, sp, #28
   13ec4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   13ec8:	eafff98b 	b	124fc <CUSBHIDDevice::StartRequest()>
   13ecc:	eb004ad4 	bl	26a24 <CLogger::Get()>
   13ed0:	e3a02001 	mov	r2, #1
   13ed4:	e59f3010 	ldr	r3, [pc, #16]	; 13eec <CUSBMouseDevice::Configure()+0x134>
   13ed8:	e59f1004 	ldr	r1, [pc, #4]	; 13ee4 <CUSBMouseDevice::Configure()+0x12c>
   13edc:	eb004a12 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13ee0:	eaffffc2 	b	13df0 <CUSBMouseDevice::Configure()+0x38>
   13ee4:	00040838 	.word	0x00040838
   13ee8:	0003fec0 	.word	0x0003fec0
   13eec:	0003e9b4 	.word	0x0003e9b4

00013ef0 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   13ef0:	e2422003 	sub	r2, r2, #3
   13ef4:	e16f2f12 	clz	r2, r2
   13ef8:	e3510000 	cmp	r1, #0
   13efc:	e1a022a2 	lsr	r2, r2, #5
   13f00:	03a02000 	moveq	r2, #0
   13f04:	e3520000 	cmp	r2, #0
   13f08:	e1a02001 	mov	r2, r1
   13f0c:	012fff1e 	bxeq	lr
   13f10:	e5d13000 	ldrb	r3, [r1]
   13f14:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   13f18:	e3130002 	tst	r3, #2
   13f1c:	e2031001 	and	r1, r3, #1
   13f20:	13811002 	orrne	r1, r1, #2
   13f24:	e3130004 	tst	r3, #4
   13f28:	13811004 	orrne	r1, r1, #4
   13f2c:	e3500000 	cmp	r0, #0
   13f30:	012fff1e 	bxeq	lr
   13f34:	e1d230d2 	ldrsb	r3, [r2, #2]
   13f38:	e1d220d1 	ldrsb	r2, [r2, #1]
   13f3c:	ea00129f 	b	189c0 <CMouseDevice::ReportHandler(unsigned int, int, int)>

00013f40 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   13f40:	e92d4010 	push	{r4, lr}
   13f44:	e3a02003 	mov	r2, #3
   13f48:	e1a04000 	mov	r4, r0
   13f4c:	ebfff806 	bl	11f6c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   13f50:	e3a03000 	mov	r3, #0
   13f54:	e59f2010 	ldr	r2, [pc, #16]	; 13f6c <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x2c>
   13f58:	e1a00004 	mov	r0, r4
   13f5c:	e5843024 	str	r3, [r4, #36]	; 0x24
   13f60:	e5842000 	str	r2, [r4]
   13f64:	e5843028 	str	r3, [r4, #40]	; 0x28
   13f68:	e8bd8010 	pop	{r4, pc}
   13f6c:	00040810 	.word	0x00040810

00013f70 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   13f70:	e92d4070 	push	{r4, r5, r6, lr}
   13f74:	e5905018 	ldr	r5, [r0, #24]
   13f78:	e59f3060 	ldr	r3, [pc, #96]	; 13fe0 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x70>
   13f7c:	e3550000 	cmp	r5, #0
   13f80:	e1a04000 	mov	r4, r0
   13f84:	e5803000 	str	r3, [r0]
   13f88:	0a000004 	beq	13fa0 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x30>
   13f8c:	e1a00005 	mov	r0, r5
   13f90:	ebffeccc 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   13f94:	e1a00005 	mov	r0, r5
   13f98:	e3a01014 	mov	r1, #20
   13f9c:	eb005bcd 	bl	2aed8 <operator delete(void*, unsigned int)>
   13fa0:	e3a03000 	mov	r3, #0
   13fa4:	e5945014 	ldr	r5, [r4, #20]
   13fa8:	e5843018 	str	r3, [r4, #24]
   13fac:	e1550003 	cmp	r5, r3
   13fb0:	0a000004 	beq	13fc8 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x58>
   13fb4:	e1a00005 	mov	r0, r5
   13fb8:	ebffecc2 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   13fbc:	e1a00005 	mov	r0, r5
   13fc0:	e3a01014 	mov	r1, #20
   13fc4:	eb005bc3 	bl	2aed8 <operator delete(void*, unsigned int)>
   13fc8:	e3a03000 	mov	r3, #0
   13fcc:	e1a00004 	mov	r0, r4
   13fd0:	e5843014 	str	r3, [r4, #20]
   13fd4:	ebffed28 	bl	f47c <CUSBFunction::~CUSBFunction()>
   13fd8:	e1a00004 	mov	r0, r4
   13fdc:	e8bd8070 	pop	{r4, r5, r6, pc}
   13fe0:	0004088c 	.word	0x0004088c

00013fe4 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   13fe4:	e92d4010 	push	{r4, lr}
   13fe8:	e1a04000 	mov	r4, r0
   13fec:	ebffffdf 	bl	13f70 <CUSBPrinterDevice::~CUSBPrinterDevice()>
   13ff0:	e1a00004 	mov	r0, r4
   13ff4:	e3a0101c 	mov	r1, #28
   13ff8:	eb005bb6 	bl	2aed8 <operator delete(void*, unsigned int)>
   13ffc:	e1a00004 	mov	r0, r4
   14000:	e8bd8010 	pop	{r4, pc}

00014004 <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   14004:	e92d4070 	push	{r4, r5, r6, lr}
   14008:	e2515000 	subs	r5, r1, #0
   1400c:	e24dd008 	sub	sp, sp, #8
   14010:	0a000011 	beq	1405c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x58>
   14014:	e3520000 	cmp	r2, #0
   14018:	e1a04002 	mov	r4, r2
   1401c:	0a000012 	beq	1406c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x68>
   14020:	e1a06000 	mov	r6, r0
   14024:	ebffee1a 	bl	f894 <CUSBFunction::GetHost() const>
   14028:	e3500000 	cmp	r0, #0
   1402c:	0a000012 	beq	1407c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x78>
   14030:	e3a03000 	mov	r3, #0
   14034:	e5961018 	ldr	r1, [r6, #24]
   14038:	e1a02005 	mov	r2, r5
   1403c:	e58d3000 	str	r3, [sp]
   14040:	e1a03004 	mov	r3, r4
   14044:	ebfffa24 	bl	128dc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   14048:	e3500000 	cmp	r0, #0
   1404c:	a1a00004 	movge	r0, r4
   14050:	b3e00000 	mvnlt	r0, #0
   14054:	e28dd008 	add	sp, sp, #8
   14058:	e8bd8070 	pop	{r4, r5, r6, pc}
   1405c:	e3a0207e 	mov	r2, #126	; 0x7e
   14060:	e59f1024 	ldr	r1, [pc, #36]	; 1408c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   14064:	e59f0024 	ldr	r0, [pc, #36]	; 14090 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x8c>
   14068:	eb004185 	bl	24684 <assertion_failed>
   1406c:	e3a0207f 	mov	r2, #127	; 0x7f
   14070:	e59f1014 	ldr	r1, [pc, #20]	; 1408c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   14074:	e59f0018 	ldr	r0, [pc, #24]	; 14094 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x90>
   14078:	eb004181 	bl	24684 <assertion_failed>
   1407c:	e3a02082 	mov	r2, #130	; 0x82
   14080:	e59f1004 	ldr	r1, [pc, #4]	; 1408c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   14084:	e59f000c 	ldr	r0, [pc, #12]	; 14098 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x94>
   14088:	eb00417d 	bl	24684 <assertion_failed>
   1408c:	00040840 	.word	0x00040840
   14090:	00040460 	.word	0x00040460
   14094:	00040850 	.word	0x00040850
   14098:	00040470 	.word	0x00040470

0001409c <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   1409c:	e92d4010 	push	{r4, lr}
   140a0:	e1a04000 	mov	r4, r0
   140a4:	ebffed86 	bl	f6c4 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   140a8:	e3a03000 	mov	r3, #0
   140ac:	e59f2014 	ldr	r2, [pc, #20]	; 140c8 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x2c>
   140b0:	e1a00004 	mov	r0, r4
   140b4:	e5c43010 	strb	r3, [r4, #16]
   140b8:	e5842000 	str	r2, [r4]
   140bc:	e5843014 	str	r3, [r4, #20]
   140c0:	e5843018 	str	r3, [r4, #24]
   140c4:	e8bd8010 	pop	{r4, pc}
   140c8:	0004088c 	.word	0x0004088c

000140cc <CUSBPrinterDevice::Configure()>:
   140cc:	e92d4070 	push	{r4, r5, r6, lr}
   140d0:	e24dd020 	sub	sp, sp, #32
   140d4:	e1a05000 	mov	r5, r0
   140d8:	ebffee6d 	bl	fa94 <CUSBFunction::GetInterfaceProtocol() const>
   140dc:	e2403001 	sub	r3, r0, #1
   140e0:	e3530001 	cmp	r3, #1
   140e4:	e5c50010 	strb	r0, [r5, #16]
   140e8:	8a00003b 	bhi	141dc <CUSBPrinterDevice::Configure()+0x110>
   140ec:	e1a00005 	mov	r0, r5
   140f0:	ebffedc6 	bl	f810 <CUSBFunction::GetNumEndpoints() const>
   140f4:	e5d53010 	ldrb	r3, [r5, #16]
   140f8:	e3530001 	cmp	r3, #1
   140fc:	03a03001 	moveq	r3, #1
   14100:	13a03002 	movne	r3, #2
   14104:	e1500003 	cmp	r0, r3
   14108:	aa00000a 	bge	14138 <CUSBPrinterDevice::Configure()+0x6c>
   1410c:	e3a04000 	mov	r4, #0
   14110:	e1a00005 	mov	r0, r5
   14114:	e59f11bc 	ldr	r1, [pc, #444]	; 142d8 <CUSBPrinterDevice::Configure()+0x20c>
   14118:	ebffedf3 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   1411c:	e1a00004 	mov	r0, r4
   14120:	e28dd020 	add	sp, sp, #32
   14124:	e8bd8070 	pop	{r4, r5, r6, pc}
   14128:	e5d43003 	ldrb	r3, [r4, #3]
   1412c:	e203303f 	and	r3, r3, #63	; 0x3f
   14130:	e3530002 	cmp	r3, #2
   14134:	0a000033 	beq	14208 <CUSBPrinterDevice::Configure()+0x13c>
   14138:	e3a01005 	mov	r1, #5
   1413c:	e1a00005 	mov	r0, r5
   14140:	ebffedde 	bl	f8c0 <CUSBFunction::GetDescriptor(unsigned char)>
   14144:	e2504000 	subs	r4, r0, #0
   14148:	1afffff6 	bne	14128 <CUSBPrinterDevice::Configure()+0x5c>
   1414c:	e5954018 	ldr	r4, [r5, #24]
   14150:	e3540000 	cmp	r4, #0
   14154:	0a000054 	beq	142ac <CUSBPrinterDevice::Configure()+0x1e0>
   14158:	e5d53010 	ldrb	r3, [r5, #16]
   1415c:	e1a00005 	mov	r0, r5
   14160:	e3530001 	cmp	r3, #1
   14164:	0a000002 	beq	14174 <CUSBPrinterDevice::Configure()+0xa8>
   14168:	e5954014 	ldr	r4, [r5, #20]
   1416c:	e3540000 	cmp	r4, #0
   14170:	0a000051 	beq	142bc <CUSBPrinterDevice::Configure()+0x1f0>
   14174:	ebffece9 	bl	f520 <CUSBFunction::Configure()>
   14178:	e2504000 	subs	r4, r0, #0
   1417c:	0a000042 	beq	1428c <CUSBPrinterDevice::Configure()+0x1c0>
   14180:	e28d0010 	add	r0, sp, #16
   14184:	eb004e16 	bl	279e4 <CString::CString()>
   14188:	e59f314c 	ldr	r3, [pc, #332]	; 142dc <CUSBPrinterDevice::Configure()+0x210>
   1418c:	e59f114c 	ldr	r1, [pc, #332]	; 142e0 <CUSBPrinterDevice::Configure()+0x214>
   14190:	e5932000 	ldr	r2, [r3]
   14194:	e28d0010 	add	r0, sp, #16
   14198:	e282c001 	add	ip, r2, #1
   1419c:	e583c000 	str	ip, [r3]
   141a0:	eb005359 	bl	28f0c <CString::Format(char const*, ...)>
   141a4:	eb0043f8 	bl	2518c <CDeviceNameService::Get()>
   141a8:	e1a06000 	mov	r6, r0
   141ac:	e28d0010 	add	r0, sp, #16
   141b0:	eb004e23 	bl	27a44 <CString::operator char const*() const>
   141b4:	e1a02005 	mov	r2, r5
   141b8:	e1a01000 	mov	r1, r0
   141bc:	e3a03000 	mov	r3, #0
   141c0:	e1a00006 	mov	r0, r6
   141c4:	eb004340 	bl	24ecc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   141c8:	e28d0010 	add	r0, sp, #16
   141cc:	eb004dd1 	bl	27918 <CString::~CString()>
   141d0:	e1a00004 	mov	r0, r4
   141d4:	e28dd020 	add	sp, sp, #32
   141d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   141dc:	e3a04000 	mov	r4, #0
   141e0:	eb004a0f 	bl	26a24 <CLogger::Get()>
   141e4:	e5d52010 	ldrb	r2, [r5, #16]
   141e8:	e59f30f4 	ldr	r3, [pc, #244]	; 142e4 <CUSBPrinterDevice::Configure()+0x218>
   141ec:	e58d2000 	str	r2, [sp]
   141f0:	e59f10e0 	ldr	r1, [pc, #224]	; 142d8 <CUSBPrinterDevice::Configure()+0x20c>
   141f4:	e3a02001 	mov	r2, #1
   141f8:	eb00494b 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   141fc:	e1a00004 	mov	r0, r4
   14200:	e28dd020 	add	sp, sp, #32
   14204:	e8bd8070 	pop	{r4, r5, r6, pc}
   14208:	e1d430d2 	ldrsb	r3, [r4, #2]
   1420c:	e3530000 	cmp	r3, #0
   14210:	ba00000e 	blt	14250 <CUSBPrinterDevice::Configure()+0x184>
   14214:	e5953018 	ldr	r3, [r5, #24]
   14218:	e1a00005 	mov	r0, r5
   1421c:	e3530000 	cmp	r3, #0
   14220:	1a000028 	bne	142c8 <CUSBPrinterDevice::Configure()+0x1fc>
   14224:	ebffed85 	bl	f840 <CUSBFunction::GetDevice() const>
   14228:	e1a01000 	mov	r1, r0
   1422c:	e3a00014 	mov	r0, #20
   14230:	e58d100c 	str	r1, [sp, #12]
   14234:	eb005b19 	bl	2aea0 <operator new(unsigned int)>
   14238:	e1a06000 	mov	r6, r0
   1423c:	e1a02004 	mov	r2, r4
   14240:	e59d100c 	ldr	r1, [sp, #12]
   14244:	ebffebbb 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14248:	e5856018 	str	r6, [r5, #24]
   1424c:	eaffffb9 	b	14138 <CUSBPrinterDevice::Configure()+0x6c>
   14250:	e5953014 	ldr	r3, [r5, #20]
   14254:	e1a00005 	mov	r0, r5
   14258:	e3530000 	cmp	r3, #0
   1425c:	1a000019 	bne	142c8 <CUSBPrinterDevice::Configure()+0x1fc>
   14260:	ebffed76 	bl	f840 <CUSBFunction::GetDevice() const>
   14264:	e1a01000 	mov	r1, r0
   14268:	e3a00014 	mov	r0, #20
   1426c:	e58d100c 	str	r1, [sp, #12]
   14270:	eb005b0a 	bl	2aea0 <operator new(unsigned int)>
   14274:	e1a06000 	mov	r6, r0
   14278:	e1a02004 	mov	r2, r4
   1427c:	e59d100c 	ldr	r1, [sp, #12]
   14280:	ebffebac 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14284:	e5856014 	str	r6, [r5, #20]
   14288:	eaffffaa 	b	14138 <CUSBPrinterDevice::Configure()+0x6c>
   1428c:	eb0049e4 	bl	26a24 <CLogger::Get()>
   14290:	e3a02001 	mov	r2, #1
   14294:	e59f304c 	ldr	r3, [pc, #76]	; 142e8 <CUSBPrinterDevice::Configure()+0x21c>
   14298:	e59f1038 	ldr	r1, [pc, #56]	; 142d8 <CUSBPrinterDevice::Configure()+0x20c>
   1429c:	eb004922 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   142a0:	e1a00004 	mov	r0, r4
   142a4:	e28dd020 	add	sp, sp, #32
   142a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   142ac:	e1a00005 	mov	r0, r5
   142b0:	e59f1020 	ldr	r1, [pc, #32]	; 142d8 <CUSBPrinterDevice::Configure()+0x20c>
   142b4:	ebffed8c 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   142b8:	eaffffc4 	b	141d0 <CUSBPrinterDevice::Configure()+0x104>
   142bc:	e59f1014 	ldr	r1, [pc, #20]	; 142d8 <CUSBPrinterDevice::Configure()+0x20c>
   142c0:	ebffed89 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   142c4:	eaffffc1 	b	141d0 <CUSBPrinterDevice::Configure()+0x104>
   142c8:	e59f1008 	ldr	r1, [pc, #8]	; 142d8 <CUSBPrinterDevice::Configure()+0x20c>
   142cc:	ebffed86 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   142d0:	e3a04000 	mov	r4, #0
   142d4:	eaffffbd 	b	141d0 <CUSBPrinterDevice::Configure()+0x104>
   142d8:	000408b0 	.word	0x000408b0
   142dc:	00047830 	.word	0x00047830
   142e0:	0004087c 	.word	0x0004087c
   142e4:	0004085c 	.word	0x0004085c
   142e8:	0003fbd8 	.word	0x0003fbd8

000142ec <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
   142ec:	e92d4010 	push	{r4, lr}
   142f0:	e3a0e000 	mov	lr, #0
   142f4:	e5801000 	str	r1, [r0]
   142f8:	e151000e 	cmp	r1, lr
   142fc:	e59d1008 	ldr	r1, [sp, #8]
   14300:	e1c020f8 	strd	r2, [r0, #8]
   14304:	e5801004 	str	r1, [r0, #4]
   14308:	e580e010 	str	lr, [r0, #16]
   1430c:	e580e014 	str	lr, [r0, #20]
   14310:	e580e018 	str	lr, [r0, #24]
   14314:	e580e01c 	str	lr, [r0, #28]
   14318:	e580e020 	str	lr, [r0, #32]
   1431c:	e5c0e024 	strb	lr, [r0, #36]	; 0x24
   14320:	0a00000a 	beq	14350 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x64>
   14324:	e2522000 	subs	r2, r2, #0
   14328:	13a02001 	movne	r2, #1
   1432c:	e3530000 	cmp	r3, #0
   14330:	11a03002 	movne	r3, r2
   14334:	03a03001 	moveq	r3, #1
   14338:	e3530000 	cmp	r3, #0
   1433c:	18bd8010 	popne	{r4, pc}
   14340:	e3a02024 	mov	r2, #36	; 0x24
   14344:	e59f1014 	ldr	r1, [pc, #20]	; 14360 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x74>
   14348:	e59f0014 	ldr	r0, [pc, #20]	; 14364 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x78>
   1434c:	eb0040cc 	bl	24684 <assertion_failed>
   14350:	e3a02023 	mov	r2, #35	; 0x23
   14354:	e59f1004 	ldr	r1, [pc, #4]	; 14360 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x74>
   14358:	e59f0008 	ldr	r0, [pc, #8]	; 14368 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x7c>
   1435c:	eb0040c8 	bl	24684 <assertion_failed>
   14360:	000408b8 	.word	0x000408b8
   14364:	000408c8 	.word	0x000408c8
   14368:	0003f408 	.word	0x0003f408

0001436c <CUSBRequest::~CUSBRequest()>:
   1436c:	e12fff1e 	bx	lr

00014370 <CUSBRequest::GetEndpoint() const>:
   14370:	e5900000 	ldr	r0, [r0]
   14374:	e3500000 	cmp	r0, #0
   14378:	112fff1e 	bxne	lr
   1437c:	e3a02031 	mov	r2, #49	; 0x31
   14380:	e92d4010 	push	{r4, lr}
   14384:	e59f1004 	ldr	r1, [pc, #4]	; 14390 <CUSBRequest::GetEndpoint() const+0x20>
   14388:	e59f0004 	ldr	r0, [pc, #4]	; 14394 <CUSBRequest::GetEndpoint() const+0x24>
   1438c:	eb0040bc 	bl	24684 <assertion_failed>
   14390:	000408b8 	.word	0x000408b8
   14394:	0003f408 	.word	0x0003f408

00014398 <CUSBRequest::SetStatus(int)>:
   14398:	e5801010 	str	r1, [r0, #16]
   1439c:	e12fff1e 	bx	lr

000143a0 <CUSBRequest::SetResultLen(unsigned int)>:
   143a0:	e5801014 	str	r1, [r0, #20]
   143a4:	e12fff1e 	bx	lr

000143a8 <CUSBRequest::GetStatus() const>:
   143a8:	e5900010 	ldr	r0, [r0, #16]
   143ac:	e12fff1e 	bx	lr

000143b0 <CUSBRequest::GetResultLength() const>:
   143b0:	e5903010 	ldr	r3, [r0, #16]
   143b4:	e3530000 	cmp	r3, #0
   143b8:	0a000001 	beq	143c4 <CUSBRequest::GetResultLength() const+0x14>
   143bc:	e5900014 	ldr	r0, [r0, #20]
   143c0:	e12fff1e 	bx	lr
   143c4:	e3a02046 	mov	r2, #70	; 0x46
   143c8:	e92d4010 	push	{r4, lr}
   143cc:	e59f1004 	ldr	r1, [pc, #4]	; 143d8 <CUSBRequest::GetResultLength() const+0x28>
   143d0:	e59f0004 	ldr	r0, [pc, #4]	; 143dc <CUSBRequest::GetResultLength() const+0x2c>
   143d4:	eb0040aa 	bl	24684 <assertion_failed>
   143d8:	000408b8 	.word	0x000408b8
   143dc:	000408ec 	.word	0x000408ec

000143e0 <CUSBRequest::GetSetupData()>:
   143e0:	e92d4010 	push	{r4, lr}
   143e4:	e1a04000 	mov	r4, r0
   143e8:	e5900000 	ldr	r0, [r0]
   143ec:	ebffebc2 	bl	f2fc <CUSBEndpoint::GetType() const>
   143f0:	e3500000 	cmp	r0, #0
   143f4:	1a000006 	bne	14414 <CUSBRequest::GetSetupData()+0x34>
   143f8:	e5940004 	ldr	r0, [r4, #4]
   143fc:	e3500000 	cmp	r0, #0
   14400:	18bd8010 	popne	{r4, pc}
   14404:	e3a0204e 	mov	r2, #78	; 0x4e
   14408:	e59f1014 	ldr	r1, [pc, #20]	; 14424 <CUSBRequest::GetSetupData()+0x44>
   1440c:	e59f0014 	ldr	r0, [pc, #20]	; 14428 <CUSBRequest::GetSetupData()+0x48>
   14410:	eb00409b 	bl	24684 <assertion_failed>
   14414:	e3a0204d 	mov	r2, #77	; 0x4d
   14418:	e59f1004 	ldr	r1, [pc, #4]	; 14424 <CUSBRequest::GetSetupData()+0x44>
   1441c:	e59f0008 	ldr	r0, [pc, #8]	; 1442c <CUSBRequest::GetSetupData()+0x4c>
   14420:	eb004097 	bl	24684 <assertion_failed>
   14424:	000408b8 	.word	0x000408b8
   14428:	00040928 	.word	0x00040928
   1442c:	000408f8 	.word	0x000408f8

00014430 <CUSBRequest::GetBuffer()>:
   14430:	e5903008 	ldr	r3, [r0, #8]
   14434:	e3530000 	cmp	r3, #0
   14438:	0a000001 	beq	14444 <CUSBRequest::GetBuffer()+0x14>
   1443c:	e1a00003 	mov	r0, r3
   14440:	e12fff1e 	bx	lr
   14444:	e590200c 	ldr	r2, [r0, #12]
   14448:	e3520000 	cmp	r2, #0
   1444c:	0afffffa 	beq	1443c <CUSBRequest::GetBuffer()+0xc>
   14450:	e3a02055 	mov	r2, #85	; 0x55
   14454:	e92d4010 	push	{r4, lr}
   14458:	e59f1004 	ldr	r1, [pc, #4]	; 14464 <CUSBRequest::GetBuffer()+0x34>
   1445c:	e59f0004 	ldr	r0, [pc, #4]	; 14468 <CUSBRequest::GetBuffer()+0x38>
   14460:	eb004087 	bl	24684 <assertion_failed>
   14464:	000408b8 	.word	0x000408b8
   14468:	000408c8 	.word	0x000408c8

0001446c <CUSBRequest::GetBufLen() const>:
   1446c:	e590000c 	ldr	r0, [r0, #12]
   14470:	e12fff1e 	bx	lr

00014474 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
   14474:	e3510000 	cmp	r1, #0
   14478:	e1c021fc 	strd	r2, [r0, #28]
   1447c:	e5801018 	str	r1, [r0, #24]
   14480:	112fff1e 	bxne	lr
   14484:	e3a02066 	mov	r2, #102	; 0x66
   14488:	e92d4010 	push	{r4, lr}
   1448c:	e59f1004 	ldr	r1, [pc, #4]	; 14498 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x24>
   14490:	e59f0004 	ldr	r0, [pc, #4]	; 1449c <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x28>
   14494:	eb00407a 	bl	24684 <assertion_failed>
   14498:	000408b8 	.word	0x000408b8
   1449c:	0004093c 	.word	0x0004093c

000144a0 <CUSBRequest::CallCompletionRoutine()>:
   144a0:	e92d4010 	push	{r4, lr}
   144a4:	e590e018 	ldr	lr, [r0, #24]
   144a8:	e35e0000 	cmp	lr, #0
   144ac:	0a000004 	beq	144c4 <CUSBRequest::CallCompletionRoutine()+0x24>
   144b0:	e1a0300e 	mov	r3, lr
   144b4:	e8bd4010 	pop	{r4, lr}
   144b8:	e5902020 	ldr	r2, [r0, #32]
   144bc:	e590101c 	ldr	r1, [r0, #28]
   144c0:	e12fff13 	bx	r3
   144c4:	e3a0206b 	mov	r2, #107	; 0x6b
   144c8:	e59f1004 	ldr	r1, [pc, #4]	; 144d4 <CUSBRequest::CallCompletionRoutine()+0x34>
   144cc:	e59f0004 	ldr	r0, [pc, #4]	; 144d8 <CUSBRequest::CallCompletionRoutine()+0x38>
   144d0:	eb00406b 	bl	24684 <assertion_failed>
   144d4:	000408b8 	.word	0x000408b8
   144d8:	0004093c 	.word	0x0004093c

000144dc <CUSBRequest::SetCompleteOnNAK()>:
   144dc:	e3a03001 	mov	r3, #1
   144e0:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   144e4:	e12fff1e 	bx	lr

000144e8 <CUSBRequest::IsCompleteOnNAK() const>:
   144e8:	e5d00024 	ldrb	r0, [r0, #36]	; 0x24
   144ec:	e12fff1e 	bx	lr

000144f0 <CUSBRequest::operator new(unsigned int)>:
   144f0:	e3500028 	cmp	r0, #40	; 0x28
   144f4:	e92d4010 	push	{r4, lr}
   144f8:	1a000005 	bne	14514 <CUSBRequest::operator new(unsigned int)+0x24>
   144fc:	e59f3030 	ldr	r3, [pc, #48]	; 14534 <CUSBRequest::operator new(unsigned int)+0x44>
   14500:	e5930000 	ldr	r0, [r3]
   14504:	e3500000 	cmp	r0, #0
   14508:	0a000005 	beq	14524 <CUSBRequest::operator new(unsigned int)+0x34>
   1450c:	e8bd4010 	pop	{r4, lr}
   14510:	ea00415d 	b	24a8c <CClassAllocator::Allocate()>
   14514:	e3a0207a 	mov	r2, #122	; 0x7a
   14518:	e59f1018 	ldr	r1, [pc, #24]	; 14538 <CUSBRequest::operator new(unsigned int)+0x48>
   1451c:	e59f0018 	ldr	r0, [pc, #24]	; 1453c <CUSBRequest::operator new(unsigned int)+0x4c>
   14520:	eb004057 	bl	24684 <assertion_failed>
   14524:	e3a0207a 	mov	r2, #122	; 0x7a
   14528:	e59f1008 	ldr	r1, [pc, #8]	; 14538 <CUSBRequest::operator new(unsigned int)+0x48>
   1452c:	e59f000c 	ldr	r0, [pc, #12]	; 14540 <CUSBRequest::operator new(unsigned int)+0x50>
   14530:	eb004053 	bl	24684 <assertion_failed>
   14534:	0004da84 	.word	0x0004da84
   14538:	000408b8 	.word	0x000408b8
   1453c:	00040958 	.word	0x00040958
   14540:	0003f050 	.word	0x0003f050

00014544 <CUSBRequest::operator delete(void*, unsigned int)>:
   14544:	e3510028 	cmp	r1, #40	; 0x28
   14548:	e92d4010 	push	{r4, lr}
   1454c:	1a000006 	bne	1456c <CUSBRequest::operator delete(void*, unsigned int)+0x28>
   14550:	e59f3034 	ldr	r3, [pc, #52]	; 1458c <CUSBRequest::operator delete(void*, unsigned int)+0x48>
   14554:	e1a01000 	mov	r1, r0
   14558:	e5930000 	ldr	r0, [r3]
   1455c:	e3500000 	cmp	r0, #0
   14560:	0a000005 	beq	1457c <CUSBRequest::operator delete(void*, unsigned int)+0x38>
   14564:	e8bd4010 	pop	{r4, lr}
   14568:	ea004182 	b	24b78 <CClassAllocator::Free(void*)>
   1456c:	e3a0207a 	mov	r2, #122	; 0x7a
   14570:	e59f1018 	ldr	r1, [pc, #24]	; 14590 <CUSBRequest::operator delete(void*, unsigned int)+0x4c>
   14574:	e59f0018 	ldr	r0, [pc, #24]	; 14594 <CUSBRequest::operator delete(void*, unsigned int)+0x50>
   14578:	eb004041 	bl	24684 <assertion_failed>
   1457c:	e3a0207a 	mov	r2, #122	; 0x7a
   14580:	e59f1008 	ldr	r1, [pc, #8]	; 14590 <CUSBRequest::operator delete(void*, unsigned int)+0x4c>
   14584:	e59f000c 	ldr	r0, [pc, #12]	; 14598 <CUSBRequest::operator delete(void*, unsigned int)+0x54>
   14588:	eb00403d 	bl	24684 <assertion_failed>
   1458c:	0004da84 	.word	0x0004da84
   14590:	000408b8 	.word	0x000408b8
   14594:	00040958 	.word	0x00040958
   14598:	0003f050 	.word	0x0003f050

0001459c <CUSBRequest::InitAllocator(unsigned int)>:
   1459c:	e92d4070 	push	{r4, r5, r6, lr}
   145a0:	e59f6040 	ldr	r6, [pc, #64]	; 145e8 <CUSBRequest::InitAllocator(unsigned int)+0x4c>
   145a4:	e5963000 	ldr	r3, [r6]
   145a8:	e3530000 	cmp	r3, #0
   145ac:	1a000009 	bne	145d8 <CUSBRequest::InitAllocator(unsigned int)+0x3c>
   145b0:	e1a04000 	mov	r4, r0
   145b4:	e3a0001c 	mov	r0, #28
   145b8:	eb005a38 	bl	2aea0 <operator new(unsigned int)>
   145bc:	e1a05000 	mov	r5, r0
   145c0:	e1a02004 	mov	r2, r4
   145c4:	e3a01028 	mov	r1, #40	; 0x28
   145c8:	e59f301c 	ldr	r3, [pc, #28]	; 145ec <CUSBRequest::InitAllocator(unsigned int)+0x50>
   145cc:	eb004115 	bl	24a28 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   145d0:	e5865000 	str	r5, [r6]
   145d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   145d8:	e3a0207a 	mov	r2, #122	; 0x7a
   145dc:	e59f100c 	ldr	r1, [pc, #12]	; 145f0 <CUSBRequest::InitAllocator(unsigned int)+0x54>
   145e0:	e59f000c 	ldr	r0, [pc, #12]	; 145f4 <CUSBRequest::InitAllocator(unsigned int)+0x58>
   145e4:	eb004026 	bl	24684 <assertion_failed>
   145e8:	0004da84 	.word	0x0004da84
   145ec:	00040978 	.word	0x00040978
   145f0:	000408b8 	.word	0x000408b8
   145f4:	0003f064 	.word	0x0003f064

000145f8 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
   145f8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   145fc:	e59f7054 	ldr	r7, [pc, #84]	; 14658 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   14600:	e24dd00c 	sub	sp, sp, #12
   14604:	e5973000 	ldr	r3, [r7]
   14608:	e3530000 	cmp	r3, #0
   1460c:	1a00000d 	bne	14648 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
   14610:	e1a05001 	mov	r5, r1
   14614:	e1a04000 	mov	r4, r0
   14618:	e3a0001c 	mov	r0, #28
   1461c:	eb005a1f 	bl	2aea0 <operator new(unsigned int)>
   14620:	e59f1034 	ldr	r1, [pc, #52]	; 1465c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   14624:	e1a03005 	mov	r3, r5
   14628:	e58d1000 	str	r1, [sp]
   1462c:	e1a02004 	mov	r2, r4
   14630:	e3a01028 	mov	r1, #40	; 0x28
   14634:	e1a06000 	mov	r6, r0
   14638:	eb004106 	bl	24a58 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   1463c:	e5876000 	str	r6, [r7]
   14640:	e28dd00c 	add	sp, sp, #12
   14644:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14648:	e3a0207a 	mov	r2, #122	; 0x7a
   1464c:	e59f100c 	ldr	r1, [pc, #12]	; 14660 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   14650:	e59f000c 	ldr	r0, [pc, #12]	; 14664 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   14654:	eb00400a 	bl	24684 <assertion_failed>
   14658:	0004da84 	.word	0x0004da84
   1465c:	00040978 	.word	0x00040978
   14660:	000408b8 	.word	0x000408b8
   14664:	0003f064 	.word	0x0003f064

00014668 <CUSBStandardHub::~CUSBStandardHub()>:
   14668:	e5902018 	ldr	r2, [r0, #24]
   1466c:	e59f30c0 	ldr	r3, [pc, #192]	; 14734 <CUSBStandardHub::~CUSBStandardHub()+0xcc>
   14670:	e3520000 	cmp	r2, #0
   14674:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14678:	e1a07000 	mov	r7, r0
   1467c:	e5803000 	str	r3, [r0]
   14680:	0a000014 	beq	146d8 <CUSBStandardHub::~CUSBStandardHub()+0x70>
   14684:	e3a04000 	mov	r4, #0
   14688:	e1a08004 	mov	r8, r4
   1468c:	e2806020 	add	r6, r0, #32
   14690:	e2805040 	add	r5, r0, #64	; 0x40
   14694:	e4950004 	ldr	r0, [r5], #4
   14698:	e2844001 	add	r4, r4, #1
   1469c:	e3500000 	cmp	r0, #0
   146a0:	0a000001 	beq	146ac <CUSBStandardHub::~CUSBStandardHub()+0x44>
   146a4:	e3a01004 	mov	r1, #4
   146a8:	eb005a0a 	bl	2aed8 <operator delete(void*, unsigned int)>
   146ac:	e5960000 	ldr	r0, [r6]
   146b0:	e5058004 	str	r8, [r5, #-4]
   146b4:	e3500000 	cmp	r0, #0
   146b8:	0a000002 	beq	146c8 <CUSBStandardHub::~CUSBStandardHub()+0x60>
   146bc:	e5903000 	ldr	r3, [r0]
   146c0:	e5933004 	ldr	r3, [r3, #4]
   146c4:	e12fff33 	blx	r3
   146c8:	e5973018 	ldr	r3, [r7, #24]
   146cc:	e4868004 	str	r8, [r6], #4
   146d0:	e1530004 	cmp	r3, r4
   146d4:	8affffee 	bhi	14694 <CUSBStandardHub::~CUSBStandardHub()+0x2c>
   146d8:	e3a03000 	mov	r3, #0
   146dc:	e5974014 	ldr	r4, [r7, #20]
   146e0:	e5873018 	str	r3, [r7, #24]
   146e4:	e1540003 	cmp	r4, r3
   146e8:	0a000004 	beq	14700 <CUSBStandardHub::~CUSBStandardHub()+0x98>
   146ec:	e1a00004 	mov	r0, r4
   146f0:	ebffeaf4 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   146f4:	e1a00004 	mov	r0, r4
   146f8:	e3a01014 	mov	r1, #20
   146fc:	eb0059f5 	bl	2aed8 <operator delete(void*, unsigned int)>
   14700:	e3a03000 	mov	r3, #0
   14704:	e5970010 	ldr	r0, [r7, #16]
   14708:	e5873014 	str	r3, [r7, #20]
   1470c:	e1500003 	cmp	r0, r3
   14710:	0a000001 	beq	1471c <CUSBStandardHub::~CUSBStandardHub()+0xb4>
   14714:	e3a01009 	mov	r1, #9
   14718:	eb0059ee 	bl	2aed8 <operator delete(void*, unsigned int)>
   1471c:	e3a03000 	mov	r3, #0
   14720:	e1a00007 	mov	r0, r7
   14724:	e5873010 	str	r3, [r7, #16]
   14728:	ebffeb53 	bl	f47c <CUSBFunction::~CUSBFunction()>
   1472c:	e1a00007 	mov	r0, r7
   14730:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14734:	00040b9c 	.word	0x00040b9c

00014738 <CUSBStandardHub::~CUSBStandardHub()>:
   14738:	e92d4010 	push	{r4, lr}
   1473c:	e1a04000 	mov	r4, r0
   14740:	ebffffc8 	bl	14668 <CUSBStandardHub::~CUSBStandardHub()>
   14744:	e1a00004 	mov	r0, r4
   14748:	e3a01068 	mov	r1, #104	; 0x68
   1474c:	eb0059e1 	bl	2aed8 <operator delete(void*, unsigned int)>
   14750:	e1a00004 	mov	r0, r4
   14754:	e8bd8010 	pop	{r4, pc}

00014758 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
   14758:	e92d4010 	push	{r4, lr}
   1475c:	e1a04000 	mov	r4, r0
   14760:	ebffebd7 	bl	f6c4 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   14764:	e3a03000 	mov	r3, #0
   14768:	e59f103c 	ldr	r1, [pc, #60]	; 147ac <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x54>
   1476c:	e1a02003 	mov	r2, r3
   14770:	e5843010 	str	r3, [r4, #16]
   14774:	e5841000 	str	r1, [r4]
   14778:	e5843014 	str	r3, [r4, #20]
   1477c:	e5843018 	str	r3, [r4, #24]
   14780:	e5c4301c 	strb	r3, [r4, #28]
   14784:	e2841060 	add	r1, r4, #96	; 0x60
   14788:	e2843020 	add	r3, r4, #32
   1478c:	e2840040 	add	r0, r4, #64	; 0x40
   14790:	e4832004 	str	r2, [r3], #4
   14794:	e1530000 	cmp	r3, r0
   14798:	e583201c 	str	r2, [r3, #28]
   1479c:	e4c12001 	strb	r2, [r1], #1
   147a0:	1afffffa 	bne	14790 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x38>
   147a4:	e1a00004 	mov	r0, r4
   147a8:	e8bd8010 	pop	{r4, pc}
   147ac:	00040b9c 	.word	0x00040b9c

000147b0 <CUSBStandardHub::DisablePort(unsigned int)>:
   147b0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   147b4:	e5903018 	ldr	r3, [r0, #24]
   147b8:	e24dd014 	sub	sp, sp, #20
   147bc:	e1530001 	cmp	r3, r1
   147c0:	9a000022 	bls	14850 <CUSBStandardHub::DisablePort(unsigned int)+0xa0>
   147c4:	e1a05001 	mov	r5, r1
   147c8:	e1a04000 	mov	r4, r0
   147cc:	ebffec30 	bl	f894 <CUSBFunction::GetHost() const>
   147d0:	e3a06001 	mov	r6, #1
   147d4:	e1a07000 	mov	r7, r0
   147d8:	e1a00004 	mov	r0, r4
   147dc:	ebffec21 	bl	f868 <CUSBFunction::GetEndpoint0() const>
   147e0:	e3a08000 	mov	r8, #0
   147e4:	e0859006 	add	r9, r5, r6
   147e8:	e6ff3079 	uxth	r3, r9
   147ec:	e1a01000 	mov	r1, r0
   147f0:	e58d3004 	str	r3, [sp, #4]
   147f4:	e1a00007 	mov	r0, r7
   147f8:	e1a03006 	mov	r3, r6
   147fc:	e3a02023 	mov	r2, #35	; 0x23
   14800:	e58d800c 	str	r8, [sp, #12]
   14804:	e58d8008 	str	r8, [sp, #8]
   14808:	e58d6000 	str	r6, [sp]
   1480c:	ebfff7cc 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14810:	e1500008 	cmp	r0, r8
   14814:	a0844005 	addge	r4, r4, r5
   14818:	a1a00006 	movge	r0, r6
   1481c:	a5c48060 	strbge	r8, [r4, #96]	; 0x60
   14820:	ba000001 	blt	1482c <CUSBStandardHub::DisablePort(unsigned int)+0x7c>
   14824:	e28dd014 	add	sp, sp, #20
   14828:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1482c:	eb00487c 	bl	26a24 <CLogger::Get()>
   14830:	e1a02006 	mov	r2, r6
   14834:	e59f3024 	ldr	r3, [pc, #36]	; 14860 <CUSBStandardHub::DisablePort(unsigned int)+0xb0>
   14838:	e59f1024 	ldr	r1, [pc, #36]	; 14864 <CUSBStandardHub::DisablePort(unsigned int)+0xb4>
   1483c:	e58d9000 	str	r9, [sp]
   14840:	eb0047b9 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14844:	e1a00008 	mov	r0, r8
   14848:	e28dd014 	add	sp, sp, #20
   1484c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14850:	e3a020c7 	mov	r2, #199	; 0xc7
   14854:	e59f100c 	ldr	r1, [pc, #12]	; 14868 <CUSBStandardHub::DisablePort(unsigned int)+0xb8>
   14858:	e59f000c 	ldr	r0, [pc, #12]	; 1486c <CUSBStandardHub::DisablePort(unsigned int)+0xbc>
   1485c:	eb003f88 	bl	24684 <assertion_failed>
   14860:	000409b0 	.word	0x000409b0
   14864:	00040bc0 	.word	0x00040bc0
   14868:	00040984 	.word	0x00040984
   1486c:	00040998 	.word	0x00040998

00014870 <CUSBStandardHub::RemoveDevice(unsigned int)>:
   14870:	e92d4070 	push	{r4, r5, r6, lr}
   14874:	e1a05000 	mov	r5, r0
   14878:	e1a04001 	mov	r4, r1
   1487c:	ebffffcb 	bl	147b0 <CUSBStandardHub::DisablePort(unsigned int)>
   14880:	e2506000 	subs	r6, r0, #0
   14884:	0a000008 	beq	148ac <CUSBStandardHub::RemoveDevice(unsigned int)+0x3c>
   14888:	e0854104 	add	r4, r5, r4, lsl #2
   1488c:	e5940020 	ldr	r0, [r4, #32]
   14890:	e3500000 	cmp	r0, #0
   14894:	0a000002 	beq	148a4 <CUSBStandardHub::RemoveDevice(unsigned int)+0x34>
   14898:	e5903000 	ldr	r3, [r0]
   1489c:	e5933004 	ldr	r3, [r3, #4]
   148a0:	e12fff33 	blx	r3
   148a4:	e3a03000 	mov	r3, #0
   148a8:	e5843020 	str	r3, [r4, #32]
   148ac:	e1a00006 	mov	r0, r6
   148b0:	e8bd8070 	pop	{r4, r5, r6, pc}

000148b4 <CUSBStandardHub::Initialize()>:
   148b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   148b8:	e24dd010 	sub	sp, sp, #16
   148bc:	e1a04000 	mov	r4, r0
   148c0:	ebffeae9 	bl	f46c <CUSBFunction::Initialize()>
   148c4:	e2505000 	subs	r5, r0, #0
   148c8:	0a00001d 	beq	14944 <CUSBStandardHub::Initialize()+0x90>
   148cc:	e5946010 	ldr	r6, [r4, #16]
   148d0:	e3560000 	cmp	r6, #0
   148d4:	1a00003a 	bne	149c4 <CUSBStandardHub::Initialize()+0x110>
   148d8:	e3a00009 	mov	r0, #9
   148dc:	eb00596f 	bl	2aea0 <operator new(unsigned int)>
   148e0:	e1a03000 	mov	r3, r0
   148e4:	e1a00004 	mov	r0, r4
   148e8:	e5843010 	str	r3, [r4, #16]
   148ec:	ebffebe8 	bl	f894 <CUSBFunction::GetHost() const>
   148f0:	e1a07000 	mov	r7, r0
   148f4:	e1a00004 	mov	r0, r4
   148f8:	ebffebda 	bl	f868 <CUSBFunction::GetEndpoint0() const>
   148fc:	e3a08009 	mov	r8, #9
   14900:	e3a0c0a0 	mov	ip, #160	; 0xa0
   14904:	e5942010 	ldr	r2, [r4, #16]
   14908:	e1a01000 	mov	r1, r0
   1490c:	e1a03006 	mov	r3, r6
   14910:	e88d1104 	stm	sp, {r2, r8, ip}
   14914:	e58d600c 	str	r6, [sp, #12]
   14918:	e1a00007 	mov	r0, r7
   1491c:	e3a02029 	mov	r2, #41	; 0x29
   14920:	ebfff7b9 	bl	1280c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   14924:	e1500008 	cmp	r0, r8
   14928:	e1a06000 	mov	r6, r0
   1492c:	1a000007 	bne	14950 <CUSBStandardHub::Initialize()+0x9c>
   14930:	e5943010 	ldr	r3, [r4, #16]
   14934:	e5d33002 	ldrb	r3, [r3, #2]
   14938:	e3530008 	cmp	r3, #8
   1493c:	e5843018 	str	r3, [r4, #24]
   14940:	8a000012 	bhi	14990 <CUSBStandardHub::Initialize()+0xdc>
   14944:	e1a00005 	mov	r0, r5
   14948:	e28dd010 	add	sp, sp, #16
   1494c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14950:	eb004833 	bl	26a24 <CLogger::Get()>
   14954:	e3a02001 	mov	r2, #1
   14958:	e59f3074 	ldr	r3, [pc, #116]	; 149d4 <CUSBStandardHub::Initialize()+0x120>
   1495c:	e59f1074 	ldr	r1, [pc, #116]	; 149d8 <CUSBStandardHub::Initialize()+0x124>
   14960:	eb004771 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14964:	e5940010 	ldr	r0, [r4, #16]
   14968:	e3500000 	cmp	r0, #0
   1496c:	0a000001 	beq	14978 <CUSBStandardHub::Initialize()+0xc4>
   14970:	e1a01008 	mov	r1, r8
   14974:	eb005957 	bl	2aed8 <operator delete(void*, unsigned int)>
   14978:	e3a00000 	mov	r0, #0
   1497c:	e1a05000 	mov	r5, r0
   14980:	e5840010 	str	r0, [r4, #16]
   14984:	e1a00005 	mov	r0, r5
   14988:	e28dd010 	add	sp, sp, #16
   1498c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14990:	eb004823 	bl	26a24 <CLogger::Get()>
   14994:	e5942018 	ldr	r2, [r4, #24]
   14998:	e59f303c 	ldr	r3, [pc, #60]	; 149dc <CUSBStandardHub::Initialize()+0x128>
   1499c:	e58d2000 	str	r2, [sp]
   149a0:	e59f1030 	ldr	r1, [pc, #48]	; 149d8 <CUSBStandardHub::Initialize()+0x124>
   149a4:	e3a02001 	mov	r2, #1
   149a8:	eb00475f 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   149ac:	e5940010 	ldr	r0, [r4, #16]
   149b0:	e3500000 	cmp	r0, #0
   149b4:	0affffef 	beq	14978 <CUSBStandardHub::Initialize()+0xc4>
   149b8:	e1a01006 	mov	r1, r6
   149bc:	eb005945 	bl	2aed8 <operator delete(void*, unsigned int)>
   149c0:	eaffffec 	b	14978 <CUSBStandardHub::Initialize()+0xc4>
   149c4:	e3a02055 	mov	r2, #85	; 0x55
   149c8:	e59f1010 	ldr	r1, [pc, #16]	; 149e0 <CUSBStandardHub::Initialize()+0x12c>
   149cc:	e59f0010 	ldr	r0, [pc, #16]	; 149e4 <CUSBStandardHub::Initialize()+0x130>
   149d0:	eb003f2b 	bl	24684 <assertion_failed>
   149d4:	000409d8 	.word	0x000409d8
   149d8:	00040bc0 	.word	0x00040bc0
   149dc:	000409f4 	.word	0x000409f4
   149e0:	00040984 	.word	0x00040984
   149e4:	000409c8 	.word	0x000409c8

000149e8 <CUSBStandardHub::EnumeratePorts()>:
   149e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149ec:	ed2d8b02 	vpush	{d8}
   149f0:	e24dd01c 	sub	sp, sp, #28
   149f4:	e1a0b000 	mov	fp, r0
   149f8:	ebffeba5 	bl	f894 <CUSBFunction::GetHost() const>
   149fc:	e2504000 	subs	r4, r0, #0
   14a00:	0a00013c 	beq	14ef8 <CUSBStandardHub::EnumeratePorts()+0x510>
   14a04:	e1a0000b 	mov	r0, fp
   14a08:	ebffeb96 	bl	f868 <CUSBFunction::GetEndpoint0() const>
   14a0c:	e2505000 	subs	r5, r0, #0
   14a10:	0a00013c 	beq	14f08 <CUSBStandardHub::EnumeratePorts()+0x520>
   14a14:	e59b3018 	ldr	r3, [fp, #24]
   14a18:	e3530000 	cmp	r3, #0
   14a1c:	0a00013d 	beq	14f18 <CUSBStandardHub::EnumeratePorts()+0x530>
   14a20:	e5db601c 	ldrb	r6, [fp, #28]
   14a24:	e3560000 	cmp	r6, #0
   14a28:	0a0000cd 	beq	14d64 <CUSBStandardHub::EnumeratePorts()+0x37c>
   14a2c:	e28b3020 	add	r3, fp, #32
   14a30:	e3a07000 	mov	r7, #0
   14a34:	e1a06003 	mov	r6, r3
   14a38:	e58d3014 	str	r3, [sp, #20]
   14a3c:	e4960004 	ldr	r0, [r6], #4
   14a40:	e3500000 	cmp	r0, #0
   14a44:	1a0000ac 	bne	14cfc <CUSBStandardHub::EnumeratePorts()+0x314>
   14a48:	e596001c 	ldr	r0, [r6, #28]
   14a4c:	e3500000 	cmp	r0, #0
   14a50:	0a0000bb 	beq	14d44 <CUSBStandardHub::EnumeratePorts()+0x35c>
   14a54:	e3a03004 	mov	r3, #4
   14a58:	e58d300c 	str	r3, [sp, #12]
   14a5c:	e3a03000 	mov	r3, #0
   14a60:	e2879001 	add	r9, r7, #1
   14a64:	e6ffa079 	uxth	sl, r9
   14a68:	e58d0008 	str	r0, [sp, #8]
   14a6c:	e3a020a3 	mov	r2, #163	; 0xa3
   14a70:	e1a01005 	mov	r1, r5
   14a74:	e1a00004 	mov	r0, r4
   14a78:	e88d0408 	stm	sp, {r3, sl}
   14a7c:	ebfff730 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14a80:	e3500004 	cmp	r0, #4
   14a84:	e1a08000 	mov	r8, r0
   14a88:	1a0000a2 	bne	14d18 <CUSBStandardHub::EnumeratePorts()+0x330>
   14a8c:	e596301c 	ldr	r3, [r6, #28]
   14a90:	e5d32001 	ldrb	r2, [r3, #1]
   14a94:	e5d33000 	ldrb	r3, [r3]
   14a98:	e3120001 	tst	r2, #1
   14a9c:	e1833402 	orr	r3, r3, r2, lsl #8
   14aa0:	0a0000e5 	beq	14e3c <CUSBStandardHub::EnumeratePorts()+0x454>
   14aa4:	e3130001 	tst	r3, #1
   14aa8:	0a000034 	beq	14b80 <CUSBStandardHub::EnumeratePorts()+0x198>
   14aac:	e3a03000 	mov	r3, #0
   14ab0:	e3a02023 	mov	r2, #35	; 0x23
   14ab4:	e58d300c 	str	r3, [sp, #12]
   14ab8:	e58d3008 	str	r3, [sp, #8]
   14abc:	e1a01005 	mov	r1, r5
   14ac0:	e3a03003 	mov	r3, #3
   14ac4:	e1a00004 	mov	r0, r4
   14ac8:	e88d0500 	stm	sp, {r8, sl}
   14acc:	ebfff71c 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14ad0:	e3500000 	cmp	r0, #0
   14ad4:	ba0000cd 	blt	14e10 <CUSBStandardHub::EnumeratePorts()+0x428>
   14ad8:	eb0054b5 	bl	29db4 <CTimer::Get()>
   14adc:	e3a00064 	mov	r0, #100	; 0x64
   14ae0:	eb00547e 	bl	29ce0 <CTimer::SimpleMsDelay(unsigned int)>
   14ae4:	e3a03000 	mov	r3, #0
   14ae8:	e58d800c 	str	r8, [sp, #12]
   14aec:	e596201c 	ldr	r2, [r6, #28]
   14af0:	e1a01005 	mov	r1, r5
   14af4:	e58d2008 	str	r2, [sp, #8]
   14af8:	e1a00004 	mov	r0, r4
   14afc:	e3a020a3 	mov	r2, #163	; 0xa3
   14b00:	e58da004 	str	sl, [sp, #4]
   14b04:	e58d3000 	str	r3, [sp]
   14b08:	ebfff70d 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14b0c:	e3500004 	cmp	r0, #4
   14b10:	1a000145 	bne	1502c <CUSBStandardHub::EnumeratePorts()+0x644>
   14b14:	e596201c 	ldr	r2, [r6, #28]
   14b18:	e5d23000 	ldrb	r3, [r2]
   14b1c:	e5d22001 	ldrb	r2, [r2, #1]
   14b20:	e3130002 	tst	r3, #2
   14b24:	e1833402 	orr	r3, r3, r2, lsl #8
   14b28:	0a0000e7 	beq	14ecc <CUSBStandardHub::EnumeratePorts()+0x4e4>
   14b2c:	e2132008 	ands	r2, r3, #8
   14b30:	1a00013f 	bne	15034 <CUSBStandardHub::EnumeratePorts()+0x64c>
   14b34:	e3130c02 	tst	r3, #512	; 0x200
   14b38:	11a0a002 	movne	sl, r2
   14b3c:	0a000084 	beq	14d54 <CUSBStandardHub::EnumeratePorts()+0x36c>
   14b40:	e5163004 	ldr	r3, [r6, #-4]
   14b44:	e3530000 	cmp	r3, #0
   14b48:	1a0000f6 	bne	14f28 <CUSBStandardHub::EnumeratePorts()+0x540>
   14b4c:	e3a00058 	mov	r0, #88	; 0x58
   14b50:	eb0058d2 	bl	2aea0 <operator new(unsigned int)>
   14b54:	e1a08000 	mov	r8, r0
   14b58:	e1a0200a 	mov	r2, sl
   14b5c:	e1a0300b 	mov	r3, fp
   14b60:	e1a01004 	mov	r1, r4
   14b64:	e58d7000 	str	r7, [sp]
   14b68:	ebffe4b8 	bl	de50 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>
   14b6c:	e1a00008 	mov	r0, r8
   14b70:	e5068004 	str	r8, [r6, #-4]
   14b74:	ebffe637 	bl	e458 <CUSBDevice::Initialize()>
   14b78:	e3500000 	cmp	r0, #0
   14b7c:	0a000096 	beq	14ddc <CUSBStandardHub::EnumeratePorts()+0x3f4>
   14b80:	e59b3018 	ldr	r3, [fp, #24]
   14b84:	e1a07009 	mov	r7, r9
   14b88:	e1530009 	cmp	r3, r9
   14b8c:	8affffaa 	bhi	14a3c <CUSBStandardHub::EnumeratePorts()+0x54>
   14b90:	e3530000 	cmp	r3, #0
   14b94:	0a000027 	beq	14c38 <CUSBStandardHub::EnumeratePorts()+0x250>
   14b98:	e3e0805e 	mvn	r8, #94	; 0x5e
   14b9c:	e048800b 	sub	r8, r8, fp
   14ba0:	ee084a10 	vmov	s16, r4
   14ba4:	e28b6060 	add	r6, fp, #96	; 0x60
   14ba8:	e1a0400b 	mov	r4, fp
   14bac:	e59fa4d4 	ldr	sl, [pc, #1236]	; 15088 <CUSBStandardHub::EnumeratePorts()+0x6a0>
   14bb0:	e1a0b008 	mov	fp, r8
   14bb4:	e59f94d0 	ldr	r9, [pc, #1232]	; 1508c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14bb8:	e59d8014 	ldr	r8, [sp, #20]
   14bbc:	ea000011 	b	14c08 <CUSBStandardHub::EnumeratePorts()+0x220>
   14bc0:	e3a02001 	mov	r2, #1
   14bc4:	e5903000 	ldr	r3, [r0]
   14bc8:	e5c62000 	strb	r2, [r6]
   14bcc:	e593300c 	ldr	r3, [r3, #12]
   14bd0:	e12fff33 	blx	r3
   14bd4:	e3500000 	cmp	r0, #0
   14bd8:	e08b7006 	add	r7, fp, r6
   14bdc:	0a00009a 	beq	14e4c <CUSBStandardHub::EnumeratePorts()+0x464>
   14be0:	eb00478f 	bl	26a24 <CLogger::Get()>
   14be4:	e1a0300a 	mov	r3, sl
   14be8:	e3a02004 	mov	r2, #4
   14bec:	e1a01009 	mov	r1, r9
   14bf0:	e58d7000 	str	r7, [sp]
   14bf4:	eb0046cc 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14bf8:	e5943018 	ldr	r3, [r4, #24]
   14bfc:	e1570003 	cmp	r7, r3
   14c00:	e2866001 	add	r6, r6, #1
   14c04:	2a000009 	bcs	14c30 <CUSBStandardHub::EnumeratePorts()+0x248>
   14c08:	e4980004 	ldr	r0, [r8], #4
   14c0c:	e3500000 	cmp	r0, #0
   14c10:	0a000002 	beq	14c20 <CUSBStandardHub::EnumeratePorts()+0x238>
   14c14:	e5d62000 	ldrb	r2, [r6]
   14c18:	e3520000 	cmp	r2, #0
   14c1c:	0affffe7 	beq	14bc0 <CUSBStandardHub::EnumeratePorts()+0x1d8>
   14c20:	e08b7006 	add	r7, fp, r6
   14c24:	e1570003 	cmp	r7, r3
   14c28:	e2866001 	add	r6, r6, #1
   14c2c:	3afffff5 	bcc	14c08 <CUSBStandardHub::EnumeratePorts()+0x220>
   14c30:	e1a0b004 	mov	fp, r4
   14c34:	ee184a10 	vmov	r4, s16
   14c38:	e3a00004 	mov	r0, #4
   14c3c:	eb005897 	bl	2aea0 <operator new(unsigned int)>
   14c40:	e3a06000 	mov	r6, #0
   14c44:	e3a07004 	mov	r7, #4
   14c48:	e58d0008 	str	r0, [sp, #8]
   14c4c:	e1a08000 	mov	r8, r0
   14c50:	e1a03006 	mov	r3, r6
   14c54:	e3a020a0 	mov	r2, #160	; 0xa0
   14c58:	e1a01005 	mov	r1, r5
   14c5c:	e1a00004 	mov	r0, r4
   14c60:	e58d700c 	str	r7, [sp, #12]
   14c64:	e58d6004 	str	r6, [sp, #4]
   14c68:	e58d6000 	str	r6, [sp]
   14c6c:	ebfff6b4 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14c70:	e1500007 	cmp	r0, r7
   14c74:	e1a09000 	mov	r9, r0
   14c78:	1a0000ae 	bne	14f38 <CUSBStandardHub::EnumeratePorts()+0x550>
   14c7c:	e5d83000 	ldrb	r3, [r8]
   14c80:	e3130002 	tst	r3, #2
   14c84:	0a0000b4 	beq	14f5c <CUSBStandardHub::EnumeratePorts()+0x574>
   14c88:	e59b3018 	ldr	r3, [fp, #24]
   14c8c:	e3530000 	cmp	r3, #0
   14c90:	13a07001 	movne	r7, #1
   14c94:	13a09008 	movne	r9, #8
   14c98:	0a00000d 	beq	14cd4 <CUSBStandardHub::EnumeratePorts()+0x2ec>
   14c9c:	e6ff3077 	uxth	r3, r7
   14ca0:	e3a02023 	mov	r2, #35	; 0x23
   14ca4:	e58d3004 	str	r3, [sp, #4]
   14ca8:	e1a01005 	mov	r1, r5
   14cac:	e3a03001 	mov	r3, #1
   14cb0:	e1a00004 	mov	r0, r4
   14cb4:	e58d600c 	str	r6, [sp, #12]
   14cb8:	e58d6008 	str	r6, [sp, #8]
   14cbc:	e58d9000 	str	r9, [sp]
   14cc0:	ebfff69f 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14cc4:	e59b2018 	ldr	r2, [fp, #24]
   14cc8:	e1570002 	cmp	r7, r2
   14ccc:	e2877001 	add	r7, r7, #1
   14cd0:	3afffff1 	bcc	14c9c <CUSBStandardHub::EnumeratePorts()+0x2b4>
   14cd4:	eb004752 	bl	26a24 <CLogger::Get()>
   14cd8:	e3a02001 	mov	r2, #1
   14cdc:	e59f33ac 	ldr	r3, [pc, #940]	; 15090 <CUSBStandardHub::EnumeratePorts()+0x6a8>
   14ce0:	e59f13a4 	ldr	r1, [pc, #932]	; 1508c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14ce4:	eb004690 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ce8:	e1a00008 	mov	r0, r8
   14cec:	e3a01004 	mov	r1, #4
   14cf0:	eb005878 	bl	2aed8 <operator delete(void*, unsigned int)>
   14cf4:	e3a06000 	mov	r6, #0
   14cf8:	ea000033 	b	14dcc <CUSBStandardHub::EnumeratePorts()+0x3e4>
   14cfc:	ebffe4ab 	bl	dfb0 <CUSBDevice::ReScanDevices()>
   14d00:	e59b3018 	ldr	r3, [fp, #24]
   14d04:	e2879001 	add	r9, r7, #1
   14d08:	e1530009 	cmp	r3, r9
   14d0c:	e1a07009 	mov	r7, r9
   14d10:	8affff49 	bhi	14a3c <CUSBStandardHub::EnumeratePorts()+0x54>
   14d14:	eaffff9d 	b	14b90 <CUSBStandardHub::EnumeratePorts()+0x1a8>
   14d18:	eb004741 	bl	26a24 <CLogger::Get()>
   14d1c:	e59f3370 	ldr	r3, [pc, #880]	; 15094 <CUSBStandardHub::EnumeratePorts()+0x6ac>
   14d20:	e3a02001 	mov	r2, #1
   14d24:	e59f1360 	ldr	r1, [pc, #864]	; 1508c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14d28:	e58d9000 	str	r9, [sp]
   14d2c:	eb00467e 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14d30:	e59b3018 	ldr	r3, [fp, #24]
   14d34:	e1a07009 	mov	r7, r9
   14d38:	e1530009 	cmp	r3, r9
   14d3c:	8affff3e 	bhi	14a3c <CUSBStandardHub::EnumeratePorts()+0x54>
   14d40:	eaffff92 	b	14b90 <CUSBStandardHub::EnumeratePorts()+0x1a8>
   14d44:	e3a00004 	mov	r0, #4
   14d48:	eb005854 	bl	2aea0 <operator new(unsigned int)>
   14d4c:	e586001c 	str	r0, [r6, #28]
   14d50:	eaffff3f 	b	14a54 <CUSBStandardHub::EnumeratePorts()+0x6c>
   14d54:	e3130b01 	tst	r3, #1024	; 0x400
   14d58:	13a0a002 	movne	sl, #2
   14d5c:	03a0a001 	moveq	sl, #1
   14d60:	eaffff76 	b	14b40 <CUSBStandardHub::EnumeratePorts()+0x158>
   14d64:	e1a08006 	mov	r8, r6
   14d68:	e3a09008 	mov	r9, #8
   14d6c:	e1a07006 	mov	r7, r6
   14d70:	ea000002 	b	14d80 <CUSBStandardHub::EnumeratePorts()+0x398>
   14d74:	e59b3018 	ldr	r3, [fp, #24]
   14d78:	e1530007 	cmp	r3, r7
   14d7c:	9a000042 	bls	14e8c <CUSBStandardHub::EnumeratePorts()+0x4a4>
   14d80:	e2877001 	add	r7, r7, #1
   14d84:	e6ff3077 	uxth	r3, r7
   14d88:	e58d3004 	str	r3, [sp, #4]
   14d8c:	e3a02023 	mov	r2, #35	; 0x23
   14d90:	e3a03003 	mov	r3, #3
   14d94:	e1a01005 	mov	r1, r5
   14d98:	e1a00004 	mov	r0, r4
   14d9c:	e58d800c 	str	r8, [sp, #12]
   14da0:	e58d8008 	str	r8, [sp, #8]
   14da4:	e58d9000 	str	r9, [sp]
   14da8:	ebfff665 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14dac:	e3500000 	cmp	r0, #0
   14db0:	aaffffef 	bge	14d74 <CUSBStandardHub::EnumeratePorts()+0x38c>
   14db4:	eb00471a 	bl	26a24 <CLogger::Get()>
   14db8:	e3a02001 	mov	r2, #1
   14dbc:	e59f32d4 	ldr	r3, [pc, #724]	; 15098 <CUSBStandardHub::EnumeratePorts()+0x6b0>
   14dc0:	e59f12c4 	ldr	r1, [pc, #708]	; 1508c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14dc4:	e58d7000 	str	r7, [sp]
   14dc8:	eb004657 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14dcc:	e1a00006 	mov	r0, r6
   14dd0:	e28dd01c 	add	sp, sp, #28
   14dd4:	ecbd8b02 	vpop	{d8}
   14dd8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ddc:	e5160004 	ldr	r0, [r6, #-4]
   14de0:	e3500000 	cmp	r0, #0
   14de4:	0a000002 	beq	14df4 <CUSBStandardHub::EnumeratePorts()+0x40c>
   14de8:	e5903000 	ldr	r3, [r0]
   14dec:	e5933004 	ldr	r3, [r3, #4]
   14df0:	e12fff33 	blx	r3
   14df4:	e3a03000 	mov	r3, #0
   14df8:	e5063004 	str	r3, [r6, #-4]
   14dfc:	e59b3018 	ldr	r3, [fp, #24]
   14e00:	e1a07009 	mov	r7, r9
   14e04:	e1530009 	cmp	r3, r9
   14e08:	8affff0b 	bhi	14a3c <CUSBStandardHub::EnumeratePorts()+0x54>
   14e0c:	eaffff5f 	b	14b90 <CUSBStandardHub::EnumeratePorts()+0x1a8>
   14e10:	eb004703 	bl	26a24 <CLogger::Get()>
   14e14:	e59f3280 	ldr	r3, [pc, #640]	; 1509c <CUSBStandardHub::EnumeratePorts()+0x6b4>
   14e18:	e3a02001 	mov	r2, #1
   14e1c:	e59f1268 	ldr	r1, [pc, #616]	; 1508c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14e20:	e58d9000 	str	r9, [sp]
   14e24:	eb004640 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14e28:	e59b3018 	ldr	r3, [fp, #24]
   14e2c:	e1a07009 	mov	r7, r9
   14e30:	e1530009 	cmp	r3, r9
   14e34:	8affff00 	bhi	14a3c <CUSBStandardHub::EnumeratePorts()+0x54>
   14e38:	eaffff54 	b	14b90 <CUSBStandardHub::EnumeratePorts()+0x1a8>
   14e3c:	e59f225c 	ldr	r2, [pc, #604]	; 150a0 <CUSBStandardHub::EnumeratePorts()+0x6b8>
   14e40:	e59f125c 	ldr	r1, [pc, #604]	; 150a4 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   14e44:	e59f025c 	ldr	r0, [pc, #604]	; 150a8 <CUSBStandardHub::EnumeratePorts()+0x6c0>
   14e48:	eb003e0d 	bl	24684 <assertion_failed>
   14e4c:	eb0046f4 	bl	26a24 <CLogger::Get()>
   14e50:	e3a02002 	mov	r2, #2
   14e54:	e1a01009 	mov	r1, r9
   14e58:	e59f324c 	ldr	r3, [pc, #588]	; 150ac <CUSBStandardHub::EnumeratePorts()+0x6c4>
   14e5c:	e58d7000 	str	r7, [sp]
   14e60:	eb004631 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14e64:	e5180004 	ldr	r0, [r8, #-4]
   14e68:	e3500000 	cmp	r0, #0
   14e6c:	0a000002 	beq	14e7c <CUSBStandardHub::EnumeratePorts()+0x494>
   14e70:	e5903000 	ldr	r3, [r0]
   14e74:	e5933004 	ldr	r3, [r3, #4]
   14e78:	e12fff33 	blx	r3
   14e7c:	e3a03000 	mov	r3, #0
   14e80:	e5083004 	str	r3, [r8, #-4]
   14e84:	e5943018 	ldr	r3, [r4, #24]
   14e88:	eaffff5b 	b	14bfc <CUSBStandardHub::EnumeratePorts()+0x214>
   14e8c:	e3a03001 	mov	r3, #1
   14e90:	e5cb301c 	strb	r3, [fp, #28]
   14e94:	eb0044a4 	bl	2612c <CKernelOptions::Get()>
   14e98:	e3500000 	cmp	r0, #0
   14e9c:	0a000002 	beq	14eac <CUSBStandardHub::EnumeratePorts()+0x4c4>
   14ea0:	eb004494 	bl	260f8 <CKernelOptions::GetUSBPowerDelay() const>
   14ea4:	e2506000 	subs	r6, r0, #0
   14ea8:	1a000000 	bne	14eb0 <CUSBStandardHub::EnumeratePorts()+0x4c8>
   14eac:	e59f61fc 	ldr	r6, [pc, #508]	; 150b0 <CUSBStandardHub::EnumeratePorts()+0x6c8>
   14eb0:	eb0053bf 	bl	29db4 <CTimer::Get()>
   14eb4:	e1a00006 	mov	r0, r6
   14eb8:	eb005388 	bl	29ce0 <CTimer::SimpleMsDelay(unsigned int)>
   14ebc:	e59b3018 	ldr	r3, [fp, #24]
   14ec0:	e3530000 	cmp	r3, #0
   14ec4:	1afffed8 	bne	14a2c <CUSBStandardHub::EnumeratePorts()+0x44>
   14ec8:	eaffff5a 	b	14c38 <CUSBStandardHub::EnumeratePorts()+0x250>
   14ecc:	eb0046d4 	bl	26a24 <CLogger::Get()>
   14ed0:	e59f31dc 	ldr	r3, [pc, #476]	; 150b4 <CUSBStandardHub::EnumeratePorts()+0x6cc>
   14ed4:	e3a02001 	mov	r2, #1
   14ed8:	e59f11ac 	ldr	r1, [pc, #428]	; 1508c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14edc:	e58d9000 	str	r9, [sp]
   14ee0:	eb004611 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ee4:	e59b3018 	ldr	r3, [fp, #24]
   14ee8:	e1a07009 	mov	r7, r9
   14eec:	e1530009 	cmp	r3, r9
   14ef0:	8afffed1 	bhi	14a3c <CUSBStandardHub::EnumeratePorts()+0x54>
   14ef4:	eaffff25 	b	14b90 <CUSBStandardHub::EnumeratePorts()+0x1a8>
   14ef8:	e3a020e3 	mov	r2, #227	; 0xe3
   14efc:	e59f11a0 	ldr	r1, [pc, #416]	; 150a4 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   14f00:	e59f01b0 	ldr	r0, [pc, #432]	; 150b8 <CUSBStandardHub::EnumeratePorts()+0x6d0>
   14f04:	eb003dde 	bl	24684 <assertion_failed>
   14f08:	e3a020e6 	mov	r2, #230	; 0xe6
   14f0c:	e59f1190 	ldr	r1, [pc, #400]	; 150a4 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   14f10:	e59f01a4 	ldr	r0, [pc, #420]	; 150bc <CUSBStandardHub::EnumeratePorts()+0x6d4>
   14f14:	eb003dda 	bl	24684 <assertion_failed>
   14f18:	e3a020e8 	mov	r2, #232	; 0xe8
   14f1c:	e59f1180 	ldr	r1, [pc, #384]	; 150a4 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   14f20:	e59f0198 	ldr	r0, [pc, #408]	; 150c0 <CUSBStandardHub::EnumeratePorts()+0x6d8>
   14f24:	eb003dd6 	bl	24684 <assertion_failed>
   14f28:	e59f2194 	ldr	r2, [pc, #404]	; 150c4 <CUSBStandardHub::EnumeratePorts()+0x6dc>
   14f2c:	e59f1170 	ldr	r1, [pc, #368]	; 150a4 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   14f30:	e59f0190 	ldr	r0, [pc, #400]	; 150c8 <CUSBStandardHub::EnumeratePorts()+0x6e0>
   14f34:	eb003dd2 	bl	24684 <assertion_failed>
   14f38:	eb0046b9 	bl	26a24 <CLogger::Get()>
   14f3c:	e3a02001 	mov	r2, #1
   14f40:	e59f3184 	ldr	r3, [pc, #388]	; 150cc <CUSBStandardHub::EnumeratePorts()+0x6e4>
   14f44:	e59f1140 	ldr	r1, [pc, #320]	; 1508c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14f48:	eb0045f7 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14f4c:	e1a01007 	mov	r1, r7
   14f50:	e1a00008 	mov	r0, r8
   14f54:	eb0057df 	bl	2aed8 <operator delete(void*, unsigned int)>
   14f58:	eaffff9b 	b	14dcc <CUSBStandardHub::EnumeratePorts()+0x3e4>
   14f5c:	e1a00008 	mov	r0, r8
   14f60:	e1a01009 	mov	r1, r9
   14f64:	eb0057db 	bl	2aed8 <operator delete(void*, unsigned int)>
   14f68:	e59b3018 	ldr	r3, [fp, #24]
   14f6c:	e3530000 	cmp	r3, #0
   14f70:	0a000042 	beq	15080 <CUSBStandardHub::EnumeratePorts()+0x698>
   14f74:	e3a07001 	mov	r7, #1
   14f78:	e58d9014 	str	r9, [sp, #20]
   14f7c:	e1a06007 	mov	r6, r7
   14f80:	e28b9040 	add	r9, fp, #64	; 0x40
   14f84:	ea000004 	b	14f9c <CUSBStandardHub::EnumeratePorts()+0x5b4>
   14f88:	e59b3018 	ldr	r3, [fp, #24]
   14f8c:	e2872001 	add	r2, r7, #1
   14f90:	e1530007 	cmp	r3, r7
   14f94:	9affff8c 	bls	14dcc <CUSBStandardHub::EnumeratePorts()+0x3e4>
   14f98:	e1a07002 	mov	r7, r2
   14f9c:	e3a08000 	mov	r8, #0
   14fa0:	e4992004 	ldr	r2, [r9], #4
   14fa4:	e59d3014 	ldr	r3, [sp, #20]
   14fa8:	e6ffa077 	uxth	sl, r7
   14fac:	e58d300c 	str	r3, [sp, #12]
   14fb0:	e58d2008 	str	r2, [sp, #8]
   14fb4:	e1a03008 	mov	r3, r8
   14fb8:	e3a020a3 	mov	r2, #163	; 0xa3
   14fbc:	e1a01005 	mov	r1, r5
   14fc0:	e1a00004 	mov	r0, r4
   14fc4:	e58d8000 	str	r8, [sp]
   14fc8:	e58da004 	str	sl, [sp, #4]
   14fcc:	ebfff5dc 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14fd0:	e3500004 	cmp	r0, #4
   14fd4:	1affffeb 	bne	14f88 <CUSBStandardHub::EnumeratePorts()+0x5a0>
   14fd8:	e5193004 	ldr	r3, [r9, #-4]
   14fdc:	e5d33000 	ldrb	r3, [r3]
   14fe0:	e3130008 	tst	r3, #8
   14fe4:	0affffe7 	beq	14f88 <CUSBStandardHub::EnumeratePorts()+0x5a0>
   14fe8:	e3a03008 	mov	r3, #8
   14fec:	e1a01005 	mov	r1, r5
   14ff0:	e3a02023 	mov	r2, #35	; 0x23
   14ff4:	e88d0408 	stm	sp, {r3, sl}
   14ff8:	e1a00004 	mov	r0, r4
   14ffc:	e3a03001 	mov	r3, #1
   15000:	e58d800c 	str	r8, [sp, #12]
   15004:	e58d8008 	str	r8, [sp, #8]
   15008:	ebfff5cd 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1500c:	eb004684 	bl	26a24 <CLogger::Get()>
   15010:	e3a02001 	mov	r2, #1
   15014:	e59f30b4 	ldr	r3, [pc, #180]	; 150d0 <CUSBStandardHub::EnumeratePorts()+0x6e8>
   15018:	e59f106c 	ldr	r1, [pc, #108]	; 1508c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   1501c:	e58d7000 	str	r7, [sp]
   15020:	e1a06008 	mov	r6, r8
   15024:	eb0045c0 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15028:	eaffffd6 	b	14f88 <CUSBStandardHub::EnumeratePorts()+0x5a0>
   1502c:	e3a06000 	mov	r6, #0
   15030:	eaffff65 	b	14dcc <CUSBStandardHub::EnumeratePorts()+0x3e4>
   15034:	e3a02000 	mov	r2, #0
   15038:	e3a03008 	mov	r3, #8
   1503c:	e1a01005 	mov	r1, r5
   15040:	e58d200c 	str	r2, [sp, #12]
   15044:	e58d2008 	str	r2, [sp, #8]
   15048:	e58d3000 	str	r3, [sp]
   1504c:	e3a02023 	mov	r2, #35	; 0x23
   15050:	e3a03001 	mov	r3, #1
   15054:	e1a00004 	mov	r0, r4
   15058:	e58da004 	str	sl, [sp, #4]
   1505c:	ebfff5b8 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15060:	eb00466f 	bl	26a24 <CLogger::Get()>
   15064:	e3a02001 	mov	r2, #1
   15068:	e59f3060 	ldr	r3, [pc, #96]	; 150d0 <CUSBStandardHub::EnumeratePorts()+0x6e8>
   1506c:	e59f1018 	ldr	r1, [pc, #24]	; 1508c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   15070:	e58d9000 	str	r9, [sp]
   15074:	eb0045ac 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15078:	e3a06000 	mov	r6, #0
   1507c:	eaffff52 	b	14dcc <CUSBStandardHub::EnumeratePorts()+0x3e4>
   15080:	e3a06001 	mov	r6, #1
   15084:	eaffff50 	b	14dcc <CUSBStandardHub::EnumeratePorts()+0x3e4>
   15088:	00040b24 	.word	0x00040b24
   1508c:	00040bc0 	.word	0x00040bc0
   15090:	00040b58 	.word	0x00040b58
   15094:	00040a40 	.word	0x00040a40
   15098:	00040a28 	.word	0x00040a28
   1509c:	00040a94 	.word	0x00040a94
   150a0:	00000125 	.word	0x00000125
   150a4:	00040984 	.word	0x00040984
   150a8:	00040a60 	.word	0x00040a60
   150ac:	00040b00 	.word	0x00040b00
   150b0:	000001fe 	.word	0x000001fe
   150b4:	00040aac 	.word	0x00040aac
   150b8:	00040470 	.word	0x00040470
   150bc:	00040a08 	.word	0x00040a08
   150c0:	00040a18 	.word	0x00040a18
   150c4:	00000162 	.word	0x00000162
   150c8:	00040ae8 	.word	0x00040ae8
   150cc:	00040b40 	.word	0x00040b40
   150d0:	00040ac4 	.word	0x00040ac4

000150d4 <CUSBStandardHub::ReScanDevices()>:
   150d4:	eafffe43 	b	149e8 <CUSBStandardHub::EnumeratePorts()>

000150d8 <CUSBStandardHub::Configure()>:
   150d8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   150dc:	e24dd01c 	sub	sp, sp, #28
   150e0:	e1a04000 	mov	r4, r0
   150e4:	ebffe9c9 	bl	f810 <CUSBFunction::GetNumEndpoints() const>
   150e8:	e3500001 	cmp	r0, #1
   150ec:	1a00000c 	bne	15124 <CUSBStandardHub::Configure()+0x4c>
   150f0:	e1a05000 	mov	r5, r0
   150f4:	e3a01005 	mov	r1, #5
   150f8:	e1a00004 	mov	r0, r4
   150fc:	ebffe9ef 	bl	f8c0 <CUSBFunction::GetDescriptor(unsigned char)>
   15100:	e2506000 	subs	r6, r0, #0
   15104:	0a000006 	beq	15124 <CUSBStandardHub::Configure()+0x4c>
   15108:	e1d630d2 	ldrsb	r3, [r6, #2]
   1510c:	e3530000 	cmp	r3, #0
   15110:	aa000003 	bge	15124 <CUSBStandardHub::Configure()+0x4c>
   15114:	e5d63003 	ldrb	r3, [r6, #3]
   15118:	e203303f 	and	r3, r3, #63	; 0x3f
   1511c:	e3530003 	cmp	r3, #3
   15120:	0a000006 	beq	15140 <CUSBStandardHub::Configure()+0x68>
   15124:	e1a00004 	mov	r0, r4
   15128:	e59f10e0 	ldr	r1, [pc, #224]	; 15210 <CUSBStandardHub::Configure()+0x138>
   1512c:	ebffe9ee 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   15130:	e3a06000 	mov	r6, #0
   15134:	e1a00006 	mov	r0, r6
   15138:	e28dd01c 	add	sp, sp, #28
   1513c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15140:	e1a00004 	mov	r0, r4
   15144:	ebffe9bd 	bl	f840 <CUSBFunction::GetDevice() const>
   15148:	e1a01000 	mov	r1, r0
   1514c:	e3a00014 	mov	r0, #20
   15150:	e58d1004 	str	r1, [sp, #4]
   15154:	eb005751 	bl	2aea0 <operator new(unsigned int)>
   15158:	e1a07000 	mov	r7, r0
   1515c:	e1a02006 	mov	r2, r6
   15160:	e59d1004 	ldr	r1, [sp, #4]
   15164:	ebffe7f3 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15168:	e1a00004 	mov	r0, r4
   1516c:	e5847014 	str	r7, [r4, #20]
   15170:	ebffe8ea 	bl	f520 <CUSBFunction::Configure()>
   15174:	e2506000 	subs	r6, r0, #0
   15178:	0a00001e 	beq	151f8 <CUSBStandardHub::Configure()+0x120>
   1517c:	e28d0008 	add	r0, sp, #8
   15180:	eb004a17 	bl	279e4 <CString::CString()>
   15184:	e59f3088 	ldr	r3, [pc, #136]	; 15214 <CUSBStandardHub::Configure()+0x13c>
   15188:	e59f1088 	ldr	r1, [pc, #136]	; 15218 <CUSBStandardHub::Configure()+0x140>
   1518c:	e5932000 	ldr	r2, [r3]
   15190:	e28d0008 	add	r0, sp, #8
   15194:	e282c001 	add	ip, r2, #1
   15198:	e583c000 	str	ip, [r3]
   1519c:	eb004f5a 	bl	28f0c <CString::Format(char const*, ...)>
   151a0:	eb003ff9 	bl	2518c <CDeviceNameService::Get()>
   151a4:	e1a06000 	mov	r6, r0
   151a8:	e28d0008 	add	r0, sp, #8
   151ac:	eb004a24 	bl	27a44 <CString::operator char const*() const>
   151b0:	e3a03000 	mov	r3, #0
   151b4:	e1a01000 	mov	r1, r0
   151b8:	e1a02004 	mov	r2, r4
   151bc:	e1a00006 	mov	r0, r6
   151c0:	eb003f41 	bl	24ecc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   151c4:	e1a00004 	mov	r0, r4
   151c8:	ebfffe06 	bl	149e8 <CUSBStandardHub::EnumeratePorts()>
   151cc:	e2506000 	subs	r6, r0, #0
   151d0:	0a000002 	beq	151e0 <CUSBStandardHub::Configure()+0x108>
   151d4:	e28d0008 	add	r0, sp, #8
   151d8:	eb0049ce 	bl	27918 <CString::~CString()>
   151dc:	eaffffd4 	b	15134 <CUSBStandardHub::Configure()+0x5c>
   151e0:	eb00460f 	bl	26a24 <CLogger::Get()>
   151e4:	e1a02005 	mov	r2, r5
   151e8:	e59f302c 	ldr	r3, [pc, #44]	; 1521c <CUSBStandardHub::Configure()+0x144>
   151ec:	e59f101c 	ldr	r1, [pc, #28]	; 15210 <CUSBStandardHub::Configure()+0x138>
   151f0:	eb00454d 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   151f4:	eafffff6 	b	151d4 <CUSBStandardHub::Configure()+0xfc>
   151f8:	eb004609 	bl	26a24 <CLogger::Get()>
   151fc:	e1a02005 	mov	r2, r5
   15200:	e59f3018 	ldr	r3, [pc, #24]	; 15220 <CUSBStandardHub::Configure()+0x148>
   15204:	e59f1004 	ldr	r1, [pc, #4]	; 15210 <CUSBStandardHub::Configure()+0x138>
   15208:	eb004547 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1520c:	eaffffc8 	b	15134 <CUSBStandardHub::Configure()+0x5c>
   15210:	00040bc0 	.word	0x00040bc0
   15214:	00047834 	.word	0x00047834
   15218:	00040b74 	.word	0x00040b74
   1521c:	00040b7c 	.word	0x00040b7c
   15220:	0003fbd8 	.word	0x0003fbd8

00015224 <CLAN7800Device::GetMACAddress() const>:
   15224:	e280001c 	add	r0, r0, #28
   15228:	e12fff1e 	bx	lr

0001522c <CLAN7800Device::~CLAN7800Device()>:
   1522c:	e92d4070 	push	{r4, r5, r6, lr}
   15230:	e59f3074 	ldr	r3, [pc, #116]	; 152ac <CLAN7800Device::~CLAN7800Device()+0x80>
   15234:	e5905018 	ldr	r5, [r0, #24]
   15238:	e2832040 	add	r2, r3, #64	; 0x40
   1523c:	e3550000 	cmp	r5, #0
   15240:	e1a04000 	mov	r4, r0
   15244:	e5803000 	str	r3, [r0]
   15248:	e5802010 	str	r2, [r0, #16]
   1524c:	0a000004 	beq	15264 <CLAN7800Device::~CLAN7800Device()+0x38>
   15250:	e1a00005 	mov	r0, r5
   15254:	ebffe81b 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   15258:	e1a00005 	mov	r0, r5
   1525c:	e3a01014 	mov	r1, #20
   15260:	eb00571c 	bl	2aed8 <operator delete(void*, unsigned int)>
   15264:	e3a03000 	mov	r3, #0
   15268:	e5945014 	ldr	r5, [r4, #20]
   1526c:	e5843018 	str	r3, [r4, #24]
   15270:	e1550003 	cmp	r5, r3
   15274:	0a000004 	beq	1528c <CLAN7800Device::~CLAN7800Device()+0x60>
   15278:	e1a00005 	mov	r0, r5
   1527c:	ebffe811 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   15280:	e1a00005 	mov	r0, r5
   15284:	e3a01014 	mov	r1, #20
   15288:	eb005712 	bl	2aed8 <operator delete(void*, unsigned int)>
   1528c:	e3a03000 	mov	r3, #0
   15290:	e284001c 	add	r0, r4, #28
   15294:	e5843014 	str	r3, [r4, #20]
   15298:	eb00561e 	bl	2ab18 <CMACAddress::~CMACAddress()>
   1529c:	e1a00004 	mov	r0, r4
   152a0:	ebffe875 	bl	f47c <CUSBFunction::~CUSBFunction()>
   152a4:	e1a00004 	mov	r0, r4
   152a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   152ac:	00040d7c 	.word	0x00040d7c

000152b0 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   152b0:	e2400010 	sub	r0, r0, #16
   152b4:	eaffffdc 	b	1522c <CLAN7800Device::~CLAN7800Device()>

000152b8 <CLAN7800Device::~CLAN7800Device()>:
   152b8:	e92d4010 	push	{r4, lr}
   152bc:	e1a04000 	mov	r4, r0
   152c0:	ebffffd9 	bl	1522c <CLAN7800Device::~CLAN7800Device()>
   152c4:	e1a00004 	mov	r0, r4
   152c8:	e3a01024 	mov	r1, #36	; 0x24
   152cc:	eb005701 	bl	2aed8 <operator delete(void*, unsigned int)>
   152d0:	e1a00004 	mov	r0, r4
   152d4:	e8bd8010 	pop	{r4, pc}

000152d8 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   152d8:	e2400010 	sub	r0, r0, #16
   152dc:	eafffff5 	b	152b8 <CLAN7800Device::~CLAN7800Device()>

000152e0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   152e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   152e4:	e5903014 	ldr	r3, [r0, #20]
   152e8:	e24dd030 	sub	sp, sp, #48	; 0x30
   152ec:	e3530000 	cmp	r3, #0
   152f0:	0a000034 	beq	153c8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xe8>
   152f4:	e3510000 	cmp	r1, #0
   152f8:	e1a04001 	mov	r4, r1
   152fc:	0a000035 	beq	153d8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xf8>
   15300:	e3a07000 	mov	r7, #0
   15304:	e1a05000 	mov	r5, r0
   15308:	e1a01003 	mov	r1, r3
   1530c:	e1a06002 	mov	r6, r2
   15310:	e3a03d19 	mov	r3, #1600	; 0x640
   15314:	e1a02004 	mov	r2, r4
   15318:	e58d7000 	str	r7, [sp]
   1531c:	e28d0008 	add	r0, sp, #8
   15320:	ebfffbf1 	bl	142ec <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15324:	e1a00005 	mov	r0, r5
   15328:	ebffe959 	bl	f894 <CUSBFunction::GetHost() const>
   1532c:	e5903000 	ldr	r3, [r0]
   15330:	e1a02007 	mov	r2, r7
   15334:	e5933008 	ldr	r3, [r3, #8]
   15338:	e28d1008 	add	r1, sp, #8
   1533c:	e12fff33 	blx	r3
   15340:	e2505000 	subs	r5, r0, #0
   15344:	1a000005 	bne	15360 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x80>
   15348:	e3a05000 	mov	r5, #0
   1534c:	e28d0008 	add	r0, sp, #8
   15350:	ebfffc05 	bl	1436c <CUSBRequest::~CUSBRequest()>
   15354:	e1a00005 	mov	r0, r5
   15358:	e28dd030 	add	sp, sp, #48	; 0x30
   1535c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15360:	e28d0008 	add	r0, sp, #8
   15364:	ebfffc11 	bl	143b0 <CUSBRequest::GetResultLength() const>
   15368:	e3500009 	cmp	r0, #9
   1536c:	9afffff5 	bls	15348 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x68>
   15370:	e5948000 	ldr	r8, [r4]
   15374:	e3180501 	tst	r8, #4194304	; 0x400000
   15378:	1a00001a 	bne	153e8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x108>
   1537c:	e1a03908 	lsl	r3, r8, #18
   15380:	e1a03923 	lsr	r3, r3, #18
   15384:	e240200a 	sub	r2, r0, #10
   15388:	e1520003 	cmp	r2, r3
   1538c:	1a00001d 	bne	15408 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x128>
   15390:	e3520004 	cmp	r2, #4
   15394:	9a00001f 	bls	15418 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x138>
   15398:	e240700e 	sub	r7, r0, #14
   1539c:	e1a02007 	mov	r2, r7
   153a0:	e1a00004 	mov	r0, r4
   153a4:	e284100a 	add	r1, r4, #10
   153a8:	eb0054d6 	bl	2a708 <memcpy>
   153ac:	e3560000 	cmp	r6, #0
   153b0:	15867000 	strne	r7, [r6]
   153b4:	1affffe4 	bne	1534c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   153b8:	e59f2068 	ldr	r2, [pc, #104]	; 15428 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x148>
   153bc:	e59f1068 	ldr	r1, [pc, #104]	; 1542c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   153c0:	e59f0068 	ldr	r0, [pc, #104]	; 15430 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x150>
   153c4:	eb003cae 	bl	24684 <assertion_failed>
   153c8:	e59f2064 	ldr	r2, [pc, #100]	; 15434 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x154>
   153cc:	e59f1058 	ldr	r1, [pc, #88]	; 1542c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   153d0:	e59f0060 	ldr	r0, [pc, #96]	; 15438 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x158>
   153d4:	eb003caa 	bl	24684 <assertion_failed>
   153d8:	e3a02d07 	mov	r2, #448	; 0x1c0
   153dc:	e59f1048 	ldr	r1, [pc, #72]	; 1542c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   153e0:	e59f0054 	ldr	r0, [pc, #84]	; 1543c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x15c>
   153e4:	eb003ca6 	bl	24684 <assertion_failed>
   153e8:	eb00458d 	bl	26a24 <CLogger::Get()>
   153ec:	e3a02002 	mov	r2, #2
   153f0:	e59f3048 	ldr	r3, [pc, #72]	; 15440 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   153f4:	e59f1048 	ldr	r1, [pc, #72]	; 15444 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x164>
   153f8:	e58d8000 	str	r8, [sp]
   153fc:	e1a05007 	mov	r5, r7
   15400:	eb0044c9 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15404:	eaffffd0 	b	1534c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   15408:	e59f2038 	ldr	r2, [pc, #56]	; 15448 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x168>
   1540c:	e59f1018 	ldr	r1, [pc, #24]	; 1542c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   15410:	e59f0034 	ldr	r0, [pc, #52]	; 1544c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x16c>
   15414:	eb003c9a 	bl	24684 <assertion_failed>
   15418:	e3a02f76 	mov	r2, #472	; 0x1d8
   1541c:	e59f1008 	ldr	r1, [pc, #8]	; 1542c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   15420:	e59f0028 	ldr	r0, [pc, #40]	; 15450 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x170>
   15424:	eb003c96 	bl	24684 <assertion_failed>
   15428:	000001e3 	.word	0x000001e3
   1542c:	00040bc8 	.word	0x00040bc8
   15430:	00040c48 	.word	0x00040c48
   15434:	000001bf 	.word	0x000001bf
   15438:	00040bd4 	.word	0x00040bd4
   1543c:	00040460 	.word	0x00040460
   15440:	00040bec 	.word	0x00040bec
   15444:	00040de4 	.word	0x00040de4
   15448:	000001d7 	.word	0x000001d7
   1544c:	00040c04 	.word	0x00040c04
   15450:	00040c34 	.word	0x00040c34

00015454 <non-virtual thunk to CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   15454:	e2400010 	sub	r0, r0, #16
   15458:	eaffffa0 	b	152e0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>

0001545c <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   1545c:	e3520d19 	cmp	r2, #1600	; 0x640
   15460:	8a00001d 	bhi	154dc <CLAN7800Device::SendFrame(void const*, unsigned int)+0x80>
   15464:	e92d4070 	push	{r4, r5, r6, lr}
   15468:	e3510000 	cmp	r1, #0
   1546c:	e24dde65 	sub	sp, sp, #1616	; 0x650
   15470:	e24dd008 	sub	sp, sp, #8
   15474:	0a00001a 	beq	154e4 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x88>
   15478:	e1a05000 	mov	r5, r0
   1547c:	e1a04002 	mov	r4, r2
   15480:	e3a06000 	mov	r6, #0
   15484:	e28d0018 	add	r0, sp, #24
   15488:	e2403008 	sub	r3, r0, #8
   1548c:	e58d300c 	str	r3, [sp, #12]
   15490:	eb00549c 	bl	2a708 <memcpy>
   15494:	e5952018 	ldr	r2, [r5, #24]
   15498:	e3843501 	orr	r3, r4, #4194304	; 0x400000
   1549c:	e1520006 	cmp	r2, r6
   154a0:	e58d6014 	str	r6, [sp, #20]
   154a4:	e58d3010 	str	r3, [sp, #16]
   154a8:	0a000011 	beq	154f4 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x98>
   154ac:	e1a00005 	mov	r0, r5
   154b0:	ebffe8f7 	bl	f894 <CUSBFunction::GetHost() const>
   154b4:	e58d6000 	str	r6, [sp]
   154b8:	e59d200c 	ldr	r2, [sp, #12]
   154bc:	e5951018 	ldr	r1, [r5, #24]
   154c0:	e2843008 	add	r3, r4, #8
   154c4:	ebfff504 	bl	128dc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   154c8:	e1e00000 	mvn	r0, r0
   154cc:	e1a00fa0 	lsr	r0, r0, #31
   154d0:	e28dde65 	add	sp, sp, #1616	; 0x650
   154d4:	e28dd008 	add	sp, sp, #8
   154d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   154dc:	e3a00000 	mov	r0, #0
   154e0:	e12fff1e 	bx	lr
   154e4:	e59f2018 	ldr	r2, [pc, #24]	; 15504 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xa8>
   154e8:	e59f1018 	ldr	r1, [pc, #24]	; 15508 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xac>
   154ec:	e59f0018 	ldr	r0, [pc, #24]	; 1550c <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb0>
   154f0:	eb003c63 	bl	24684 <assertion_failed>
   154f4:	e59f2014 	ldr	r2, [pc, #20]	; 15510 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb4>
   154f8:	e59f1008 	ldr	r1, [pc, #8]	; 15508 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xac>
   154fc:	e59f0010 	ldr	r0, [pc, #16]	; 15514 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb8>
   15500:	eb003c5f 	bl	24684 <assertion_failed>
   15504:	000001b2 	.word	0x000001b2
   15508:	00040bc8 	.word	0x00040bc8
   1550c:	00040460 	.word	0x00040460
   15510:	000001b9 	.word	0x000001b9
   15514:	00040c5c 	.word	0x00040c5c

00015518 <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)>:
   15518:	e2400010 	sub	r0, r0, #16
   1551c:	eaffffce 	b	1545c <CLAN7800Device::SendFrame(void const*, unsigned int)>

00015520 <non-virtual thunk to CLAN7800Device::GetMACAddress() const>:
   15520:	e280000c 	add	r0, r0, #12
   15524:	e12fff1e 	bx	lr

00015528 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   15528:	e92d4010 	push	{r4, lr}
   1552c:	e1a04000 	mov	r4, r0
   15530:	ebffe863 	bl	f6c4 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15534:	e3a02000 	mov	r2, #0
   15538:	e59f3024 	ldr	r3, [pc, #36]	; 15564 <CLAN7800Device::CLAN7800Device(CUSBFunction*)+0x3c>
   1553c:	e5842014 	str	r2, [r4, #20]
   15540:	e2831008 	add	r1, r3, #8
   15544:	e2833048 	add	r3, r3, #72	; 0x48
   15548:	e5841000 	str	r1, [r4]
   1554c:	e5843010 	str	r3, [r4, #16]
   15550:	e5842018 	str	r2, [r4, #24]
   15554:	e284001c 	add	r0, r4, #28
   15558:	eb00556b 	bl	2ab0c <CMACAddress::CMACAddress()>
   1555c:	e1a00004 	mov	r0, r4
   15560:	e8bd8010 	pop	{r4, pc}
   15564:	00040d74 	.word	0x00040d74

00015568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   15568:	e92d4070 	push	{r4, r5, r6, lr}
   1556c:	e24dd018 	sub	sp, sp, #24
   15570:	e1a04001 	mov	r4, r1
   15574:	e1a05000 	mov	r5, r0
   15578:	e58d2014 	str	r2, [sp, #20]
   1557c:	ebffe8c4 	bl	f894 <CUSBFunction::GetHost() const>
   15580:	e1a06000 	mov	r6, r0
   15584:	e1a00005 	mov	r0, r5
   15588:	ebffe8b6 	bl	f868 <CUSBFunction::GetEndpoint0() const>
   1558c:	e3a05000 	mov	r5, #0
   15590:	e3a02004 	mov	r2, #4
   15594:	e6ffc074 	uxth	ip, r4
   15598:	e28d3014 	add	r3, sp, #20
   1559c:	e1a01000 	mov	r1, r0
   155a0:	e58d200c 	str	r2, [sp, #12]
   155a4:	e58d3008 	str	r3, [sp, #8]
   155a8:	e1a00006 	mov	r0, r6
   155ac:	e3a030a0 	mov	r3, #160	; 0xa0
   155b0:	e3a02040 	mov	r2, #64	; 0x40
   155b4:	e58dc004 	str	ip, [sp, #4]
   155b8:	e58d5000 	str	r5, [sp]
   155bc:	ebfff460 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   155c0:	e1500005 	cmp	r0, r5
   155c4:	a3a00001 	movge	r0, #1
   155c8:	ba000001 	blt	155d4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x6c>
   155cc:	e28dd018 	add	sp, sp, #24
   155d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   155d4:	eb004512 	bl	26a24 <CLogger::Get()>
   155d8:	e3a02002 	mov	r2, #2
   155dc:	e59f3014 	ldr	r3, [pc, #20]	; 155f8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x90>
   155e0:	e59f1014 	ldr	r1, [pc, #20]	; 155fc <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x94>
   155e4:	e58d4000 	str	r4, [sp]
   155e8:	eb00444f 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   155ec:	e1a00005 	mov	r0, r5
   155f0:	e28dd018 	add	sp, sp, #24
   155f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   155f8:	00040c74 	.word	0x00040c74
   155fc:	00040de4 	.word	0x00040de4

00015600 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   15600:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15604:	e24dd014 	sub	sp, sp, #20
   15608:	e1a05001 	mov	r5, r1
   1560c:	e1a07002 	mov	r7, r2
   15610:	e1a04000 	mov	r4, r0
   15614:	ebffe89e 	bl	f894 <CUSBFunction::GetHost() const>
   15618:	e1a06000 	mov	r6, r0
   1561c:	e1a00004 	mov	r0, r4
   15620:	ebffe890 	bl	f868 <CUSBFunction::GetEndpoint0() const>
   15624:	e3a04000 	mov	r4, #0
   15628:	e3a03004 	mov	r3, #4
   1562c:	e6ff2075 	uxth	r2, r5
   15630:	e1a01000 	mov	r1, r0
   15634:	e58d2004 	str	r2, [sp, #4]
   15638:	e58d300c 	str	r3, [sp, #12]
   1563c:	e1a00006 	mov	r0, r6
   15640:	e3a030a1 	mov	r3, #161	; 0xa1
   15644:	e3a020c0 	mov	r2, #192	; 0xc0
   15648:	e58d7008 	str	r7, [sp, #8]
   1564c:	e58d4000 	str	r4, [sp]
   15650:	ebfff43b 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15654:	e3500004 	cmp	r0, #4
   15658:	03a00001 	moveq	r0, #1
   1565c:	1a000001 	bne	15668 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x68>
   15660:	e28dd014 	add	sp, sp, #20
   15664:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15668:	eb0044ed 	bl	26a24 <CLogger::Get()>
   1566c:	e3a02002 	mov	r2, #2
   15670:	e59f3014 	ldr	r3, [pc, #20]	; 1568c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x8c>
   15674:	e59f1014 	ldr	r1, [pc, #20]	; 15690 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x90>
   15678:	e58d5000 	str	r5, [sp]
   1567c:	eb00442a 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15680:	e1a00004 	mov	r0, r4
   15684:	e28dd014 	add	sp, sp, #20
   15688:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1568c:	00040c90 	.word	0x00040c90
   15690:	00040de4 	.word	0x00040de4

00015694 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   15694:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15698:	e24dd00c 	sub	sp, sp, #12
   1569c:	e1a07000 	mov	r7, r0
   156a0:	e1a08001 	mov	r8, r1
   156a4:	e1a09002 	mov	r9, r2
   156a8:	e1a0a003 	mov	sl, r3
   156ac:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   156b0:	e59db034 	ldr	fp, [sp, #52]	; 0x34
   156b4:	eb0051be 	bl	29db4 <CTimer::Get()>
   156b8:	e2504000 	subs	r4, r0, #0
   156bc:	0a000019 	beq	15728 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x94>
   156c0:	eb004f09 	bl	292ec <CTimer::GetTicks() const>
   156c4:	e1a06000 	mov	r6, r0
   156c8:	ea00000e 	b	15708 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   156cc:	e1a00004 	mov	r0, r4
   156d0:	eb004f05 	bl	292ec <CTimer::GetTicks() const>
   156d4:	e0400006 	sub	r0, r0, r6
   156d8:	e150000b 	cmp	r0, fp
   156dc:	2a00000e 	bcs	1571c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   156e0:	e1a01008 	mov	r1, r8
   156e4:	e1a00007 	mov	r0, r7
   156e8:	e28d2004 	add	r2, sp, #4
   156ec:	ebffffc3 	bl	15600 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   156f0:	e3500000 	cmp	r0, #0
   156f4:	0a000008 	beq	1571c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   156f8:	e59d3004 	ldr	r3, [sp, #4]
   156fc:	e0033009 	and	r3, r3, r9
   15700:	e153000a 	cmp	r3, sl
   15704:	0a000005 	beq	15720 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   15708:	e3550000 	cmp	r5, #0
   1570c:	0affffee 	beq	156cc <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   15710:	e1a00005 	mov	r0, r5
   15714:	eb005178 	bl	29cfc <CTimer::SimpleusDelay(unsigned int)>
   15718:	eaffffeb 	b	156cc <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   1571c:	e3a00000 	mov	r0, #0
   15720:	e28dd00c 	add	sp, sp, #12
   15724:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15728:	e59f2008 	ldr	r2, [pc, #8]	; 15738 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa4>
   1572c:	e59f1008 	ldr	r1, [pc, #8]	; 1573c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa8>
   15730:	e59f0008 	ldr	r0, [pc, #8]	; 15740 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   15734:	eb003bd2 	bl	24684 <assertion_failed>
   15738:	0000028e 	.word	0x0000028e
   1573c:	00040bc8 	.word	0x00040bc8
   15740:	00040cac 	.word	0x00040cac

00015744 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   15744:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15748:	e351001f 	cmp	r1, #31
   1574c:	e24dd008 	sub	sp, sp, #8
   15750:	8a000023 	bhi	157e4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xa0>
   15754:	e3a06000 	mov	r6, #0
   15758:	e3a08064 	mov	r8, #100	; 0x64
   1575c:	e1a04001 	mov	r4, r1
   15760:	e1a05002 	mov	r5, r2
   15764:	e1a03006 	mov	r3, r6
   15768:	e3a02001 	mov	r2, #1
   1576c:	e3a01e12 	mov	r1, #288	; 0x120
   15770:	e88d0140 	stm	sp, {r6, r8}
   15774:	e1a07000 	mov	r7, r0
   15778:	ebffffc5 	bl	15694 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1577c:	e1500006 	cmp	r0, r6
   15780:	1a000002 	bne	15790 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x4c>
   15784:	e3a00000 	mov	r0, #0
   15788:	e28dd008 	add	sp, sp, #8
   1578c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15790:	e1a02005 	mov	r2, r5
   15794:	e3a01f49 	mov	r1, #292	; 0x124
   15798:	e1a00007 	mov	r0, r7
   1579c:	ebffff71 	bl	15568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   157a0:	e3500000 	cmp	r0, #0
   157a4:	0afffff6 	beq	15784 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   157a8:	e59f2044 	ldr	r2, [pc, #68]	; 157f4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb0>
   157ac:	e3a01e12 	mov	r1, #288	; 0x120
   157b0:	e1a00007 	mov	r0, r7
   157b4:	e1822304 	orr	r2, r2, r4, lsl #6
   157b8:	ebffff6a 	bl	15568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   157bc:	e3500000 	cmp	r0, #0
   157c0:	0affffef 	beq	15784 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   157c4:	e1a03006 	mov	r3, r6
   157c8:	e1a00007 	mov	r0, r7
   157cc:	e3a02001 	mov	r2, #1
   157d0:	e3a01e12 	mov	r1, #288	; 0x120
   157d4:	e88d0140 	stm	sp, {r6, r8}
   157d8:	ebffffad 	bl	15694 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   157dc:	e28dd008 	add	sp, sp, #8
   157e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   157e4:	e59f200c 	ldr	r2, [pc, #12]	; 157f8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb4>
   157e8:	e59f100c 	ldr	r1, [pc, #12]	; 157fc <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb8>
   157ec:	e59f000c 	ldr	r0, [pc, #12]	; 15800 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xbc>
   157f0:	eb003ba3 	bl	24684 <assertion_failed>
   157f4:	00000803 	.word	0x00000803
   157f8:	00000259 	.word	0x00000259
   157fc:	00040bc8 	.word	0x00040bc8
   15800:	00040cb8 	.word	0x00040cb8

00015804 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   15804:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15808:	e351001f 	cmp	r1, #31
   1580c:	e24dd010 	sub	sp, sp, #16
   15810:	8a00002d 	bhi	158cc <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xc8>
   15814:	e3a05000 	mov	r5, #0
   15818:	e3a08064 	mov	r8, #100	; 0x64
   1581c:	e1a04001 	mov	r4, r1
   15820:	e1a07002 	mov	r7, r2
   15824:	e1a03005 	mov	r3, r5
   15828:	e3a02001 	mov	r2, #1
   1582c:	e3a01e12 	mov	r1, #288	; 0x120
   15830:	e88d0120 	stm	sp, {r5, r8}
   15834:	e1a06000 	mov	r6, r0
   15838:	ebffff95 	bl	15694 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1583c:	e3500000 	cmp	r0, #0
   15840:	1a000001 	bne	1584c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x48>
   15844:	e28dd010 	add	sp, sp, #16
   15848:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1584c:	e59f2088 	ldr	r2, [pc, #136]	; 158dc <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xd8>
   15850:	e3a01e12 	mov	r1, #288	; 0x120
   15854:	e1a00006 	mov	r0, r6
   15858:	e1822304 	orr	r2, r2, r4, lsl #6
   1585c:	ebffff41 	bl	15568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15860:	e1500005 	cmp	r0, r5
   15864:	0a000007 	beq	15888 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x84>
   15868:	e1a03005 	mov	r3, r5
   1586c:	e3a02001 	mov	r2, #1
   15870:	e3a01e12 	mov	r1, #288	; 0x120
   15874:	e1a00006 	mov	r0, r6
   15878:	e88d0120 	stm	sp, {r5, r8}
   1587c:	ebffff84 	bl	15694 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15880:	e3500000 	cmp	r0, #0
   15884:	1a000002 	bne	15894 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x90>
   15888:	e3a00000 	mov	r0, #0
   1588c:	e28dd010 	add	sp, sp, #16
   15890:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15894:	e1a00006 	mov	r0, r6
   15898:	e3a01f49 	mov	r1, #292	; 0x124
   1589c:	e28d200c 	add	r2, sp, #12
   158a0:	ebffff56 	bl	15600 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   158a4:	e3500000 	cmp	r0, #0
   158a8:	0afffff6 	beq	15888 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x84>
   158ac:	e3570000 	cmp	r7, #0
   158b0:	159d300c 	ldrne	r3, [sp, #12]
   158b4:	11c730b0 	strhne	r3, [r7]
   158b8:	1affffe1 	bne	15844 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x40>
   158bc:	e3a02fa1 	mov	r2, #644	; 0x284
   158c0:	e59f1018 	ldr	r1, [pc, #24]	; 158e0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xdc>
   158c4:	e59f0018 	ldr	r0, [pc, #24]	; 158e4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe0>
   158c8:	eb003b6d 	bl	24684 <assertion_failed>
   158cc:	e3a02e27 	mov	r2, #624	; 0x270
   158d0:	e59f1008 	ldr	r1, [pc, #8]	; 158e0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xdc>
   158d4:	e59f000c 	ldr	r0, [pc, #12]	; 158e8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe4>
   158d8:	eb003b69 	bl	24684 <assertion_failed>
   158dc:	00000801 	.word	0x00000801
   158e0:	00040bc8 	.word	0x00040bc8
   158e4:	00040cc8 	.word	0x00040cc8
   158e8:	00040cb8 	.word	0x00040cb8

000158ec <CLAN7800Device::IsLinkUp()>:
   158ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   158f0:	e24dd00c 	sub	sp, sp, #12
   158f4:	e3a01001 	mov	r1, #1
   158f8:	e28d2006 	add	r2, sp, #6
   158fc:	ebffffc0 	bl	15804 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   15900:	e3500000 	cmp	r0, #0
   15904:	11dd00b6 	ldrhne	r0, [sp, #6]
   15908:	11a00140 	asrne	r0, r0, #2
   1590c:	12000001 	andne	r0, r0, #1
   15910:	e28dd00c 	add	sp, sp, #12
   15914:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00015918 <non-virtual thunk to CLAN7800Device::IsLinkUp()>:
   15918:	e2400010 	sub	r0, r0, #16
   1591c:	eafffff2 	b	158ec <CLAN7800Device::IsLinkUp()>

00015920 <CLAN7800Device::GetLinkSpeed()>:
   15920:	e92d4010 	push	{r4, lr}
   15924:	e3a02000 	mov	r2, #0
   15928:	e3a0101f 	mov	r1, #31
   1592c:	e24dd008 	sub	sp, sp, #8
   15930:	e1a04000 	mov	r4, r0
   15934:	ebffff82 	bl	15744 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   15938:	e3500000 	cmp	r0, #0
   1593c:	0a00000e 	beq	1597c <CLAN7800Device::GetLinkSpeed()+0x5c>
   15940:	e1a00004 	mov	r0, r4
   15944:	e3a0101c 	mov	r1, #28
   15948:	e28d2006 	add	r2, sp, #6
   1594c:	ebffffac 	bl	15804 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   15950:	e3500000 	cmp	r0, #0
   15954:	0a000008 	beq	1597c <CLAN7800Device::GetLinkSpeed()+0x5c>
   15958:	e1dd30b6 	ldrh	r3, [sp, #6]
   1595c:	e3130901 	tst	r3, #16384	; 0x4000
   15960:	1a00000d 	bne	1599c <CLAN7800Device::GetLinkSpeed()+0x7c>
   15964:	e3130902 	tst	r3, #32768	; 0x8000
   15968:	0a000003 	beq	1597c <CLAN7800Device::GetLinkSpeed()+0x5c>
   1596c:	e1a031c3 	asr	r3, r3, #3
   15970:	e2033007 	and	r3, r3, #7
   15974:	e3530007 	cmp	r3, #7
   15978:	1a000002 	bne	15988 <CLAN7800Device::GetLinkSpeed()+0x68>
   1597c:	e3a00006 	mov	r0, #6
   15980:	e28dd008 	add	sp, sp, #8
   15984:	e8bd8010 	pop	{r4, pc}
   15988:	e59f201c 	ldr	r2, [pc, #28]	; 159ac <CLAN7800Device::GetLinkSpeed()+0x8c>
   1598c:	e0823003 	add	r3, r2, r3
   15990:	e5d30078 	ldrb	r0, [r3, #120]	; 0x78
   15994:	e28dd008 	add	sp, sp, #8
   15998:	e8bd8010 	pop	{r4, pc}
   1599c:	e59f200c 	ldr	r2, [pc, #12]	; 159b0 <CLAN7800Device::GetLinkSpeed()+0x90>
   159a0:	e59f100c 	ldr	r1, [pc, #12]	; 159b4 <CLAN7800Device::GetLinkSpeed()+0x94>
   159a4:	e59f000c 	ldr	r0, [pc, #12]	; 159b8 <CLAN7800Device::GetLinkSpeed()+0x98>
   159a8:	eb003b35 	bl	24684 <assertion_failed>
   159ac:	00040d74 	.word	0x00040d74
   159b0:	00000203 	.word	0x00000203
   159b4:	00040bc8 	.word	0x00040bc8
   159b8:	00040cd4 	.word	0x00040cd4

000159bc <non-virtual thunk to CLAN7800Device::GetLinkSpeed()>:
   159bc:	e2400010 	sub	r0, r0, #16
   159c0:	eaffffd6 	b	15920 <CLAN7800Device::GetLinkSpeed()>

000159c4 <CLAN7800Device::InitPHY()>:
   159c4:	e92d4010 	push	{r4, lr}
   159c8:	e3a02000 	mov	r2, #0
   159cc:	e3a0101f 	mov	r1, #31
   159d0:	e24dd008 	sub	sp, sp, #8
   159d4:	e1a04000 	mov	r4, r0
   159d8:	ebffff59 	bl	15744 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   159dc:	e3500000 	cmp	r0, #0
   159e0:	1a000001 	bne	159ec <CLAN7800Device::InitPHY()+0x28>
   159e4:	e28dd008 	add	sp, sp, #8
   159e8:	e8bd8010 	pop	{r4, pc}
   159ec:	e3a0101d 	mov	r1, #29
   159f0:	e1a00004 	mov	r0, r4
   159f4:	e28d2006 	add	r2, sp, #6
   159f8:	ebffff81 	bl	15804 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   159fc:	e3500000 	cmp	r0, #0
   15a00:	0afffff7 	beq	159e4 <CLAN7800Device::InitPHY()+0x20>
   15a04:	e1dd20b6 	ldrh	r2, [sp, #6]
   15a08:	e1a00004 	mov	r0, r4
   15a0c:	e3c220ff 	bic	r2, r2, #255	; 0xff
   15a10:	e3822061 	orr	r2, r2, #97	; 0x61
   15a14:	e3a0101d 	mov	r1, #29
   15a18:	e1cd20b6 	strh	r2, [sp, #6]
   15a1c:	ebffff48 	bl	15744 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   15a20:	e28dd008 	add	sp, sp, #8
   15a24:	e8bd8010 	pop	{r4, pc}

00015a28 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   15a28:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15a2c:	e24dd00c 	sub	sp, sp, #12
   15a30:	e1a05002 	mov	r5, r2
   15a34:	e28d2004 	add	r2, sp, #4
   15a38:	e1a07003 	mov	r7, r3
   15a3c:	e1a06000 	mov	r6, r0
   15a40:	e1a04001 	mov	r4, r1
   15a44:	ebfffeed 	bl	15600 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   15a48:	e3500000 	cmp	r0, #0
   15a4c:	0a000006 	beq	15a6c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x44>
   15a50:	e59d2004 	ldr	r2, [sp, #4]
   15a54:	e1a01004 	mov	r1, r4
   15a58:	e0073002 	and	r3, r7, r2
   15a5c:	e1832005 	orr	r2, r3, r5
   15a60:	e1a00006 	mov	r0, r6
   15a64:	e58d2004 	str	r2, [sp, #4]
   15a68:	ebfffebe 	bl	15568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15a6c:	e28dd00c 	add	sp, sp, #12
   15a70:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00015a74 <CLAN7800Device::InitMACAddress()>:
   15a74:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15a78:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   15a7c:	e3a01000 	mov	r1, #0
   15a80:	e1a04000 	mov	r4, r0
   15a84:	e28d000c 	add	r0, sp, #12
   15a88:	eb003b1e 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   15a8c:	e3a03000 	mov	r3, #0
   15a90:	e59f10f4 	ldr	r1, [pc, #244]	; 15b8c <CLAN7800Device::InitMACAddress()+0x118>
   15a94:	e58d3000 	str	r3, [sp]
   15a98:	e28d000c 	add	r0, sp, #12
   15a9c:	e3a03014 	mov	r3, #20
   15aa0:	e28d2024 	add	r2, sp, #36	; 0x24
   15aa4:	eb003b23 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   15aa8:	e3500000 	cmp	r0, #0
   15aac:	1a000005 	bne	15ac8 <CLAN7800Device::InitMACAddress()+0x54>
   15ab0:	e3a04000 	mov	r4, #0
   15ab4:	e28d000c 	add	r0, sp, #12
   15ab8:	eb003b19 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   15abc:	e1a00004 	mov	r0, r4
   15ac0:	e28dd03c 	add	sp, sp, #60	; 0x3c
   15ac4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15ac8:	e284601c 	add	r6, r4, #28
   15acc:	e1a00006 	mov	r0, r6
   15ad0:	e28d1030 	add	r1, sp, #48	; 0x30
   15ad4:	eb00542d 	bl	2ab90 <CMACAddress::Set(unsigned char const*)>
   15ad8:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   15adc:	e3a01f47 	mov	r1, #284	; 0x11c
   15ae0:	e1a02005 	mov	r2, r5
   15ae4:	e1a00004 	mov	r0, r4
   15ae8:	e1dd73b4 	ldrh	r7, [sp, #52]	; 0x34
   15aec:	ebfffe9d 	bl	15568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15af0:	e3500000 	cmp	r0, #0
   15af4:	0affffed 	beq	15ab0 <CLAN7800Device::InitMACAddress()+0x3c>
   15af8:	e1a02007 	mov	r2, r7
   15afc:	e3a01f46 	mov	r1, #280	; 0x118
   15b00:	e1a00004 	mov	r0, r4
   15b04:	ebfffe97 	bl	15568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15b08:	e3500000 	cmp	r0, #0
   15b0c:	0affffe7 	beq	15ab0 <CLAN7800Device::InitMACAddress()+0x3c>
   15b10:	e1a02005 	mov	r2, r5
   15b14:	e1a00004 	mov	r0, r4
   15b18:	e59f1070 	ldr	r1, [pc, #112]	; 15b90 <CLAN7800Device::InitMACAddress()+0x11c>
   15b1c:	ebfffe91 	bl	15568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15b20:	e3500000 	cmp	r0, #0
   15b24:	0affffe1 	beq	15ab0 <CLAN7800Device::InitMACAddress()+0x3c>
   15b28:	e1a00004 	mov	r0, r4
   15b2c:	e3a01b01 	mov	r1, #1024	; 0x400
   15b30:	e3872102 	orr	r2, r7, #-2147483648	; 0x80000000
   15b34:	ebfffe8b 	bl	15568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15b38:	e2504000 	subs	r4, r0, #0
   15b3c:	0affffdb 	beq	15ab0 <CLAN7800Device::InitMACAddress()+0x3c>
   15b40:	e28d0014 	add	r0, sp, #20
   15b44:	eb0047a6 	bl	279e4 <CString::CString()>
   15b48:	e28d1014 	add	r1, sp, #20
   15b4c:	e1a00006 	mov	r0, r6
   15b50:	eb005468 	bl	2acf8 <CMACAddress::Format(CString*) const>
   15b54:	eb0043b2 	bl	26a24 <CLogger::Get()>
   15b58:	e1a05000 	mov	r5, r0
   15b5c:	e28d0014 	add	r0, sp, #20
   15b60:	eb0047b7 	bl	27a44 <CString::operator char const*() const>
   15b64:	e1a02000 	mov	r2, r0
   15b68:	e59f3024 	ldr	r3, [pc, #36]	; 15b94 <CLAN7800Device::InitMACAddress()+0x120>
   15b6c:	e1a00005 	mov	r0, r5
   15b70:	e58d2000 	str	r2, [sp]
   15b74:	e59f101c 	ldr	r1, [pc, #28]	; 15b98 <CLAN7800Device::InitMACAddress()+0x124>
   15b78:	e3a02004 	mov	r2, #4
   15b7c:	eb0042ea 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15b80:	e28d0014 	add	r0, sp, #20
   15b84:	eb004763 	bl	27918 <CString::~CString()>
   15b88:	eaffffc9 	b	15ab4 <CLAN7800Device::InitMACAddress()+0x40>
   15b8c:	00010003 	.word	0x00010003
   15b90:	00000404 	.word	0x00000404
   15b94:	00040cfc 	.word	0x00040cfc
   15b98:	00040de4 	.word	0x00040de4

00015b9c <CLAN7800Device::Configure()>:
   15b9c:	e92d4070 	push	{r4, r5, r6, lr}
   15ba0:	e24dd018 	sub	sp, sp, #24
   15ba4:	e1a05000 	mov	r5, r0
   15ba8:	ebffe718 	bl	f810 <CUSBFunction::GetNumEndpoints() const>
   15bac:	e3500003 	cmp	r0, #3
   15bb0:	0a000004 	beq	15bc8 <CLAN7800Device::Configure()+0x2c>
   15bb4:	ea00004d 	b	15cf0 <CLAN7800Device::Configure()+0x154>
   15bb8:	e5d43003 	ldrb	r3, [r4, #3]
   15bbc:	e203303f 	and	r3, r3, #63	; 0x3f
   15bc0:	e3530002 	cmp	r3, #2
   15bc4:	0a000022 	beq	15c54 <CLAN7800Device::Configure()+0xb8>
   15bc8:	e3a01005 	mov	r1, #5
   15bcc:	e1a00005 	mov	r0, r5
   15bd0:	ebffe73a 	bl	f8c0 <CUSBFunction::GetDescriptor(unsigned char)>
   15bd4:	e2504000 	subs	r4, r0, #0
   15bd8:	1afffff6 	bne	15bb8 <CLAN7800Device::Configure()+0x1c>
   15bdc:	e5953014 	ldr	r3, [r5, #20]
   15be0:	e1a00005 	mov	r0, r5
   15be4:	e3530000 	cmp	r3, #0
   15be8:	0a00003a 	beq	15cd8 <CLAN7800Device::Configure()+0x13c>
   15bec:	e5953018 	ldr	r3, [r5, #24]
   15bf0:	e3530000 	cmp	r3, #0
   15bf4:	0a000037 	beq	15cd8 <CLAN7800Device::Configure()+0x13c>
   15bf8:	ebffe648 	bl	f520 <CUSBFunction::Configure()>
   15bfc:	e2506000 	subs	r6, r0, #0
   15c00:	0a0000d7 	beq	15f64 <CLAN7800Device::Configure()+0x3c8>
   15c04:	e1a01004 	mov	r1, r4
   15c08:	e1a00005 	mov	r0, r5
   15c0c:	e28d2014 	add	r2, sp, #20
   15c10:	ebfffe7a 	bl	15600 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   15c14:	e3500000 	cmp	r0, #0
   15c18:	0a000002 	beq	15c28 <CLAN7800Device::Configure()+0x8c>
   15c1c:	e1dd31b6 	ldrh	r3, [sp, #22]
   15c20:	e3530b1e 	cmp	r3, #30720	; 0x7800
   15c24:	0a000038 	beq	15d0c <CLAN7800Device::Configure()+0x170>
   15c28:	e3a06000 	mov	r6, #0
   15c2c:	eb00437c 	bl	26a24 <CLogger::Get()>
   15c30:	e1dd21b6 	ldrh	r2, [sp, #22]
   15c34:	e59f33b0 	ldr	r3, [pc, #944]	; 15fec <CLAN7800Device::Configure()+0x450>
   15c38:	e58d2000 	str	r2, [sp]
   15c3c:	e59f13ac 	ldr	r1, [pc, #940]	; 15ff0 <CLAN7800Device::Configure()+0x454>
   15c40:	e3a02001 	mov	r2, #1
   15c44:	eb0042b8 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15c48:	e1a00006 	mov	r0, r6
   15c4c:	e28dd018 	add	sp, sp, #24
   15c50:	e8bd8070 	pop	{r4, r5, r6, pc}
   15c54:	e1d430d2 	ldrsb	r3, [r4, #2]
   15c58:	e3530000 	cmp	r3, #0
   15c5c:	ba00000e 	blt	15c9c <CLAN7800Device::Configure()+0x100>
   15c60:	e5953018 	ldr	r3, [r5, #24]
   15c64:	e1a00005 	mov	r0, r5
   15c68:	e3530000 	cmp	r3, #0
   15c6c:	1a000019 	bne	15cd8 <CLAN7800Device::Configure()+0x13c>
   15c70:	ebffe6f2 	bl	f840 <CUSBFunction::GetDevice() const>
   15c74:	e1a01000 	mov	r1, r0
   15c78:	e3a00014 	mov	r0, #20
   15c7c:	e58d100c 	str	r1, [sp, #12]
   15c80:	eb005486 	bl	2aea0 <operator new(unsigned int)>
   15c84:	e1a06000 	mov	r6, r0
   15c88:	e1a02004 	mov	r2, r4
   15c8c:	e59d100c 	ldr	r1, [sp, #12]
   15c90:	ebffe528 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15c94:	e5856018 	str	r6, [r5, #24]
   15c98:	eaffffca 	b	15bc8 <CLAN7800Device::Configure()+0x2c>
   15c9c:	e5953014 	ldr	r3, [r5, #20]
   15ca0:	e1a00005 	mov	r0, r5
   15ca4:	e3530000 	cmp	r3, #0
   15ca8:	1a00000a 	bne	15cd8 <CLAN7800Device::Configure()+0x13c>
   15cac:	ebffe6e3 	bl	f840 <CUSBFunction::GetDevice() const>
   15cb0:	e1a01000 	mov	r1, r0
   15cb4:	e3a00014 	mov	r0, #20
   15cb8:	e58d100c 	str	r1, [sp, #12]
   15cbc:	eb005477 	bl	2aea0 <operator new(unsigned int)>
   15cc0:	e1a06000 	mov	r6, r0
   15cc4:	e1a02004 	mov	r2, r4
   15cc8:	e59d100c 	ldr	r1, [sp, #12]
   15ccc:	ebffe519 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15cd0:	e5856014 	str	r6, [r5, #20]
   15cd4:	eaffffbb 	b	15bc8 <CLAN7800Device::Configure()+0x2c>
   15cd8:	e59f1310 	ldr	r1, [pc, #784]	; 15ff0 <CLAN7800Device::Configure()+0x454>
   15cdc:	ebffe702 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   15ce0:	e3a06000 	mov	r6, #0
   15ce4:	e1a00006 	mov	r0, r6
   15ce8:	e28dd018 	add	sp, sp, #24
   15cec:	e8bd8070 	pop	{r4, r5, r6, pc}
   15cf0:	e3a06000 	mov	r6, #0
   15cf4:	e1a00005 	mov	r0, r5
   15cf8:	e59f12f0 	ldr	r1, [pc, #752]	; 15ff0 <CLAN7800Device::Configure()+0x454>
   15cfc:	ebffe6fa 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   15d00:	e1a00006 	mov	r0, r6
   15d04:	e28dd018 	add	sp, sp, #24
   15d08:	e8bd8070 	pop	{r4, r5, r6, pc}
   15d0c:	e3e03000 	mvn	r3, #0
   15d10:	e3a02002 	mov	r2, #2
   15d14:	e3a01010 	mov	r1, #16
   15d18:	e1a00005 	mov	r0, r5
   15d1c:	ebffff41 	bl	15a28 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15d20:	e3500000 	cmp	r0, #0
   15d24:	0a000096 	beq	15f84 <CLAN7800Device::Configure()+0x3e8>
   15d28:	e3a01064 	mov	r1, #100	; 0x64
   15d2c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   15d30:	e58d1004 	str	r1, [sp, #4]
   15d34:	e58d2000 	str	r2, [sp]
   15d38:	e1a03004 	mov	r3, r4
   15d3c:	e3a02002 	mov	r2, #2
   15d40:	e3a01010 	mov	r1, #16
   15d44:	e1a00005 	mov	r0, r5
   15d48:	ebfffe51 	bl	15694 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15d4c:	e3500000 	cmp	r0, #0
   15d50:	0a00008b 	beq	15f84 <CLAN7800Device::Configure()+0x3e8>
   15d54:	e1a00005 	mov	r0, r5
   15d58:	ebffff45 	bl	15a74 <CLAN7800Device::InitMACAddress()>
   15d5c:	e2506000 	subs	r6, r0, #0
   15d60:	0a000095 	beq	15fbc <CLAN7800Device::Configure()+0x420>
   15d64:	e3a02018 	mov	r2, #24
   15d68:	e3a01090 	mov	r1, #144	; 0x90
   15d6c:	e1a00005 	mov	r0, r5
   15d70:	ebfffdfc 	bl	15568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15d74:	e3500000 	cmp	r0, #0
   15d78:	0a00008d 	beq	15fb4 <CLAN7800Device::Configure()+0x418>
   15d7c:	e3a02b02 	mov	r2, #2048	; 0x800
   15d80:	e3a01094 	mov	r1, #148	; 0x94
   15d84:	e1a00005 	mov	r0, r5
   15d88:	ebfffdf6 	bl	15568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15d8c:	e3500000 	cmp	r0, #0
   15d90:	0a000087 	beq	15fb4 <CLAN7800Device::Configure()+0x418>
   15d94:	e3e03010 	mvn	r3, #16
   15d98:	e3a02603 	mov	r2, #3145728	; 0x300000
   15d9c:	e3a01010 	mov	r1, #16
   15da0:	e1a00005 	mov	r0, r5
   15da4:	ebffff1f 	bl	15a28 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15da8:	e3500000 	cmp	r0, #0
   15dac:	0a000080 	beq	15fb4 <CLAN7800Device::Configure()+0x418>
   15db0:	e3e03040 	mvn	r3, #64	; 0x40
   15db4:	e3a02020 	mov	r2, #32
   15db8:	e3a01080 	mov	r1, #128	; 0x80
   15dbc:	e1a00005 	mov	r0, r5
   15dc0:	ebffff18 	bl	15a28 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15dc4:	e3500000 	cmp	r0, #0
   15dc8:	0a000079 	beq	15fb4 <CLAN7800Device::Configure()+0x418>
   15dcc:	e3a02017 	mov	r2, #23
   15dd0:	e3a010c8 	mov	r1, #200	; 0xc8
   15dd4:	e1a00005 	mov	r0, r5
   15dd8:	ebfffde2 	bl	15568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15ddc:	e3500000 	cmp	r0, #0
   15de0:	0a000073 	beq	15fb4 <CLAN7800Device::Configure()+0x418>
   15de4:	e3a02017 	mov	r2, #23
   15de8:	e3a010cc 	mov	r1, #204	; 0xcc
   15dec:	e1a00005 	mov	r0, r5
   15df0:	ebfffddc 	bl	15568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15df4:	e3500000 	cmp	r0, #0
   15df8:	0a00006d 	beq	15fb4 <CLAN7800Device::Configure()+0x418>
   15dfc:	e3a02000 	mov	r2, #0
   15e00:	e3a01098 	mov	r1, #152	; 0x98
   15e04:	e1a00005 	mov	r0, r5
   15e08:	ebfffdd6 	bl	15568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15e0c:	e3500000 	cmp	r0, #0
   15e10:	0a000067 	beq	15fb4 <CLAN7800Device::Configure()+0x418>
   15e14:	e3e02000 	mvn	r2, #0
   15e18:	e3a0100c 	mov	r1, #12
   15e1c:	e1a00005 	mov	r0, r5
   15e20:	ebfffdd0 	bl	15568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15e24:	e3500000 	cmp	r0, #0
   15e28:	0a000061 	beq	15fb4 <CLAN7800Device::Configure()+0x418>
   15e2c:	e3a02000 	mov	r2, #0
   15e30:	e3a01f43 	mov	r1, #268	; 0x10c
   15e34:	e1a00005 	mov	r0, r5
   15e38:	ebfffdca 	bl	15568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15e3c:	e3500000 	cmp	r0, #0
   15e40:	0a00005b 	beq	15fb4 <CLAN7800Device::Configure()+0x418>
   15e44:	e3a02000 	mov	r2, #0
   15e48:	e3a010d0 	mov	r1, #208	; 0xd0
   15e4c:	e1a00005 	mov	r0, r5
   15e50:	ebfffdc4 	bl	15568 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15e54:	e3500000 	cmp	r0, #0
   15e58:	0a000055 	beq	15fb4 <CLAN7800Device::Configure()+0x418>
   15e5c:	e3e03000 	mvn	r3, #0
   15e60:	e3a010b0 	mov	r1, #176	; 0xb0
   15e64:	e1a00005 	mov	r0, r5
   15e68:	e59f2184 	ldr	r2, [pc, #388]	; 15ff4 <CLAN7800Device::Configure()+0x458>
   15e6c:	ebfffeed 	bl	15a28 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15e70:	e3500000 	cmp	r0, #0
   15e74:	0a00004e 	beq	15fb4 <CLAN7800Device::Configure()+0x418>
   15e78:	e3e03000 	mvn	r3, #0
   15e7c:	e3a02010 	mov	r2, #16
   15e80:	e3a01014 	mov	r1, #20
   15e84:	e1a00005 	mov	r0, r5
   15e88:	ebfffee6 	bl	15a28 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15e8c:	e3500000 	cmp	r0, #0
   15e90:	0a000042 	beq	15fa0 <CLAN7800Device::Configure()+0x404>
   15e94:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   15e98:	e3a03064 	mov	r3, #100	; 0x64
   15e9c:	e3a01014 	mov	r1, #20
   15ea0:	e1cd20f0 	strd	r2, [sp]
   15ea4:	e1a00005 	mov	r0, r5
   15ea8:	e3a03080 	mov	r3, #128	; 0x80
   15eac:	e3a02090 	mov	r2, #144	; 0x90
   15eb0:	ebfffdf7 	bl	15694 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15eb4:	e3500000 	cmp	r0, #0
   15eb8:	0a000038 	beq	15fa0 <CLAN7800Device::Configure()+0x404>
   15ebc:	e3e03000 	mvn	r3, #0
   15ec0:	e3a02b06 	mov	r2, #6144	; 0x1800
   15ec4:	e3a01c01 	mov	r1, #256	; 0x100
   15ec8:	e1a00005 	mov	r0, r5
   15ecc:	ebfffed5 	bl	15a28 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15ed0:	e3500000 	cmp	r0, #0
   15ed4:	0a000036 	beq	15fb4 <CLAN7800Device::Configure()+0x418>
   15ed8:	e3e03000 	mvn	r3, #0
   15edc:	e3a02001 	mov	r2, #1
   15ee0:	e3a01f42 	mov	r1, #264	; 0x108
   15ee4:	e1a00005 	mov	r0, r5
   15ee8:	ebfffece 	bl	15a28 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15eec:	e3500000 	cmp	r0, #0
   15ef0:	0a00002f 	beq	15fb4 <CLAN7800Device::Configure()+0x418>
   15ef4:	e3e03000 	mvn	r3, #0
   15ef8:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   15efc:	e3a010c4 	mov	r1, #196	; 0xc4
   15f00:	e1a00005 	mov	r0, r5
   15f04:	ebfffec7 	bl	15a28 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15f08:	e3500000 	cmp	r0, #0
   15f0c:	0a000028 	beq	15fb4 <CLAN7800Device::Configure()+0x418>
   15f10:	e3a01f41 	mov	r1, #260	; 0x104
   15f14:	e1a00005 	mov	r0, r5
   15f18:	e59f30d8 	ldr	r3, [pc, #216]	; 15ff8 <CLAN7800Device::Configure()+0x45c>
   15f1c:	e59f20d8 	ldr	r2, [pc, #216]	; 15ffc <CLAN7800Device::Configure()+0x460>
   15f20:	ebfffec0 	bl	15a28 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15f24:	e3500000 	cmp	r0, #0
   15f28:	0a000021 	beq	15fb4 <CLAN7800Device::Configure()+0x418>
   15f2c:	e3e03000 	mvn	r3, #0
   15f30:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   15f34:	e3a010c0 	mov	r1, #192	; 0xc0
   15f38:	e1a00005 	mov	r0, r5
   15f3c:	ebfffeb9 	bl	15a28 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15f40:	e3500000 	cmp	r0, #0
   15f44:	0a00001a 	beq	15fb4 <CLAN7800Device::Configure()+0x418>
   15f48:	e1a00005 	mov	r0, r5
   15f4c:	ebfffe9c 	bl	159c4 <CLAN7800Device::InitPHY()>
   15f50:	e2506000 	subs	r6, r0, #0
   15f54:	0a00001e 	beq	15fd4 <CLAN7800Device::Configure()+0x438>
   15f58:	e2850010 	add	r0, r5, #16
   15f5c:	eb005386 	bl	2ad7c <CNetDevice::AddNetDevice()>
   15f60:	eaffff5f 	b	15ce4 <CLAN7800Device::Configure()+0x148>
   15f64:	eb0042ae 	bl	26a24 <CLogger::Get()>
   15f68:	e3a02001 	mov	r2, #1
   15f6c:	e59f308c 	ldr	r3, [pc, #140]	; 16000 <CLAN7800Device::Configure()+0x464>
   15f70:	e59f1078 	ldr	r1, [pc, #120]	; 15ff0 <CLAN7800Device::Configure()+0x454>
   15f74:	eb0041ec 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15f78:	e1a00006 	mov	r0, r6
   15f7c:	e28dd018 	add	sp, sp, #24
   15f80:	e8bd8070 	pop	{r4, r5, r6, pc}
   15f84:	eb0042a6 	bl	26a24 <CLogger::Get()>
   15f88:	e3a02001 	mov	r2, #1
   15f8c:	e59f3070 	ldr	r3, [pc, #112]	; 16004 <CLAN7800Device::Configure()+0x468>
   15f90:	e59f1058 	ldr	r1, [pc, #88]	; 15ff0 <CLAN7800Device::Configure()+0x454>
   15f94:	eb0041e4 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15f98:	e3a06000 	mov	r6, #0
   15f9c:	eaffff50 	b	15ce4 <CLAN7800Device::Configure()+0x148>
   15fa0:	eb00429f 	bl	26a24 <CLogger::Get()>
   15fa4:	e3a02001 	mov	r2, #1
   15fa8:	e59f3058 	ldr	r3, [pc, #88]	; 16008 <CLAN7800Device::Configure()+0x46c>
   15fac:	e59f103c 	ldr	r1, [pc, #60]	; 15ff0 <CLAN7800Device::Configure()+0x454>
   15fb0:	eb0041dd 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15fb4:	e3a06000 	mov	r6, #0
   15fb8:	eaffff49 	b	15ce4 <CLAN7800Device::Configure()+0x148>
   15fbc:	eb004298 	bl	26a24 <CLogger::Get()>
   15fc0:	e3a02001 	mov	r2, #1
   15fc4:	e59f3040 	ldr	r3, [pc, #64]	; 1600c <CLAN7800Device::Configure()+0x470>
   15fc8:	e59f1020 	ldr	r1, [pc, #32]	; 15ff0 <CLAN7800Device::Configure()+0x454>
   15fcc:	eb0041d6 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15fd0:	eaffff43 	b	15ce4 <CLAN7800Device::Configure()+0x148>
   15fd4:	eb004292 	bl	26a24 <CLogger::Get()>
   15fd8:	e3a02001 	mov	r2, #1
   15fdc:	e59f302c 	ldr	r3, [pc, #44]	; 16010 <CLAN7800Device::Configure()+0x474>
   15fe0:	e59f1008 	ldr	r1, [pc, #8]	; 15ff0 <CLAN7800Device::Configure()+0x454>
   15fe4:	eb0041d0 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15fe8:	eaffff3d 	b	15ce4 <CLAN7800Device::Configure()+0x148>
   15fec:	00040d10 	.word	0x00040d10
   15ff0:	00040de4 	.word	0x00040de4
   15ff4:	00000402 	.word	0x00000402
   15ff8:	c000ffff 	.word	0xc000ffff
   15ffc:	05ee0001 	.word	0x05ee0001
   16000:	0003fbd8 	.word	0x0003fbd8
   16004:	00040d28 	.word	0x00040d28
   16008:	00040d50 	.word	0x00040d50
   1600c:	00040d38 	.word	0x00040d38
   16010:	00040d64 	.word	0x00040d64

00016014 <CNetDevice::GetType()>:
   16014:	e3a00000 	mov	r0, #0
   16018:	e12fff1e 	bx	lr

0001601c <CNetDevice::IsSendFrameAdvisable()>:
   1601c:	e3a00001 	mov	r0, #1
   16020:	e12fff1e 	bx	lr

00016024 <CNetDevice::UpdatePHY()>:
   16024:	e3a00000 	mov	r0, #0
   16028:	e12fff1e 	bx	lr

0001602c <CSMSC951xDevice::GetMACAddress() const>:
   1602c:	e280001c 	add	r0, r0, #28
   16030:	e12fff1e 	bx	lr

00016034 <CSMSC951xDevice::~CSMSC951xDevice()>:
   16034:	e92d4070 	push	{r4, r5, r6, lr}
   16038:	e59f3074 	ldr	r3, [pc, #116]	; 160b4 <CSMSC951xDevice::~CSMSC951xDevice()+0x80>
   1603c:	e5905018 	ldr	r5, [r0, #24]
   16040:	e2832040 	add	r2, r3, #64	; 0x40
   16044:	e3550000 	cmp	r5, #0
   16048:	e1a04000 	mov	r4, r0
   1604c:	e5803000 	str	r3, [r0]
   16050:	e5802010 	str	r2, [r0, #16]
   16054:	0a000004 	beq	1606c <CSMSC951xDevice::~CSMSC951xDevice()+0x38>
   16058:	e1a00005 	mov	r0, r5
   1605c:	ebffe499 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   16060:	e1a00005 	mov	r0, r5
   16064:	e3a01014 	mov	r1, #20
   16068:	eb00539a 	bl	2aed8 <operator delete(void*, unsigned int)>
   1606c:	e3a03000 	mov	r3, #0
   16070:	e5945014 	ldr	r5, [r4, #20]
   16074:	e5843018 	str	r3, [r4, #24]
   16078:	e1550003 	cmp	r5, r3
   1607c:	0a000004 	beq	16094 <CSMSC951xDevice::~CSMSC951xDevice()+0x60>
   16080:	e1a00005 	mov	r0, r5
   16084:	ebffe48f 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   16088:	e1a00005 	mov	r0, r5
   1608c:	e3a01014 	mov	r1, #20
   16090:	eb005390 	bl	2aed8 <operator delete(void*, unsigned int)>
   16094:	e3a03000 	mov	r3, #0
   16098:	e284001c 	add	r0, r4, #28
   1609c:	e5843014 	str	r3, [r4, #20]
   160a0:	eb00529c 	bl	2ab18 <CMACAddress::~CMACAddress()>
   160a4:	e1a00004 	mov	r0, r4
   160a8:	ebffe4f3 	bl	f47c <CUSBFunction::~CUSBFunction()>
   160ac:	e1a00004 	mov	r0, r4
   160b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   160b4:	00040f28 	.word	0x00040f28

000160b8 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   160b8:	e2400010 	sub	r0, r0, #16
   160bc:	eaffffdc 	b	16034 <CSMSC951xDevice::~CSMSC951xDevice()>

000160c0 <CSMSC951xDevice::~CSMSC951xDevice()>:
   160c0:	e92d4010 	push	{r4, lr}
   160c4:	e1a04000 	mov	r4, r0
   160c8:	ebffffd9 	bl	16034 <CSMSC951xDevice::~CSMSC951xDevice()>
   160cc:	e1a00004 	mov	r0, r4
   160d0:	e3a01024 	mov	r1, #36	; 0x24
   160d4:	eb00537f 	bl	2aed8 <operator delete(void*, unsigned int)>
   160d8:	e1a00004 	mov	r0, r4
   160dc:	e8bd8010 	pop	{r4, pc}

000160e0 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   160e0:	e2400010 	sub	r0, r0, #16
   160e4:	eafffff5 	b	160c0 <CSMSC951xDevice::~CSMSC951xDevice()>

000160e8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   160e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   160ec:	e5903014 	ldr	r3, [r0, #20]
   160f0:	e24dd030 	sub	sp, sp, #48	; 0x30
   160f4:	e3530000 	cmp	r3, #0
   160f8:	0a000036 	beq	161d8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf0>
   160fc:	e3510000 	cmp	r1, #0
   16100:	e1a04001 	mov	r4, r1
   16104:	0a000037 	beq	161e8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x100>
   16108:	e3a07000 	mov	r7, #0
   1610c:	e1a05000 	mov	r5, r0
   16110:	e1a01003 	mov	r1, r3
   16114:	e1a06002 	mov	r6, r2
   16118:	e3a03d19 	mov	r3, #1600	; 0x640
   1611c:	e1a02004 	mov	r2, r4
   16120:	e58d7000 	str	r7, [sp]
   16124:	e28d0008 	add	r0, sp, #8
   16128:	ebfff86f 	bl	142ec <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1612c:	e1a00005 	mov	r0, r5
   16130:	ebffe5d7 	bl	f894 <CUSBFunction::GetHost() const>
   16134:	e5903000 	ldr	r3, [r0]
   16138:	e1a02007 	mov	r2, r7
   1613c:	e5933008 	ldr	r3, [r3, #8]
   16140:	e28d1008 	add	r1, sp, #8
   16144:	e12fff33 	blx	r3
   16148:	e2508000 	subs	r8, r0, #0
   1614c:	1a000005 	bne	16168 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x80>
   16150:	e3a08000 	mov	r8, #0
   16154:	e28d0008 	add	r0, sp, #8
   16158:	ebfff883 	bl	1436c <CUSBRequest::~CUSBRequest()>
   1615c:	e1a00008 	mov	r0, r8
   16160:	e28dd030 	add	sp, sp, #48	; 0x30
   16164:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16168:	e28d0008 	add	r0, sp, #8
   1616c:	ebfff88f 	bl	143b0 <CUSBRequest::GetResultLength() const>
   16170:	e3500003 	cmp	r0, #3
   16174:	9afffff5 	bls	16150 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   16178:	e5945000 	ldr	r5, [r4]
   1617c:	e59f30b4 	ldr	r3, [pc, #180]	; 16238 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x150>
   16180:	e0033005 	and	r3, r3, r5
   16184:	e3530000 	cmp	r3, #0
   16188:	1a00001a 	bne	161f8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x110>
   1618c:	e59f30a8 	ldr	r3, [pc, #168]	; 1623c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x154>
   16190:	e2402004 	sub	r2, r0, #4
   16194:	e0033825 	and	r3, r3, r5, lsr #16
   16198:	e1520003 	cmp	r2, r3
   1619c:	1a00001d 	bne	16218 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x130>
   161a0:	e3520004 	cmp	r2, #4
   161a4:	9a00001f 	bls	16228 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x140>
   161a8:	e2425004 	sub	r5, r2, #4
   161ac:	e1a02005 	mov	r2, r5
   161b0:	e1a00004 	mov	r0, r4
   161b4:	e2841004 	add	r1, r4, #4
   161b8:	eb005152 	bl	2a708 <memcpy>
   161bc:	e3560000 	cmp	r6, #0
   161c0:	15865000 	strne	r5, [r6]
   161c4:	1affffe2 	bne	16154 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   161c8:	e59f2070 	ldr	r2, [pc, #112]	; 16240 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x158>
   161cc:	e59f1070 	ldr	r1, [pc, #112]	; 16244 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   161d0:	e59f0070 	ldr	r0, [pc, #112]	; 16248 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x160>
   161d4:	eb00392a 	bl	24684 <assertion_failed>
   161d8:	e59f206c 	ldr	r2, [pc, #108]	; 1624c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x164>
   161dc:	e59f1060 	ldr	r1, [pc, #96]	; 16244 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   161e0:	e59f0068 	ldr	r0, [pc, #104]	; 16250 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x168>
   161e4:	eb003926 	bl	24684 <assertion_failed>
   161e8:	e3a02f45 	mov	r2, #276	; 0x114
   161ec:	e59f1050 	ldr	r1, [pc, #80]	; 16244 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   161f0:	e59f005c 	ldr	r0, [pc, #92]	; 16254 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x16c>
   161f4:	eb003922 	bl	24684 <assertion_failed>
   161f8:	eb004209 	bl	26a24 <CLogger::Get()>
   161fc:	e3a02002 	mov	r2, #2
   16200:	e59f3050 	ldr	r3, [pc, #80]	; 16258 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   16204:	e59f1050 	ldr	r1, [pc, #80]	; 1625c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x174>
   16208:	e58d5000 	str	r5, [sp]
   1620c:	e1a08007 	mov	r8, r7
   16210:	eb004145 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16214:	eaffffce 	b	16154 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   16218:	e59f2040 	ldr	r2, [pc, #64]	; 16260 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x178>
   1621c:	e59f1020 	ldr	r1, [pc, #32]	; 16244 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   16220:	e59f003c 	ldr	r0, [pc, #60]	; 16264 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x17c>
   16224:	eb003916 	bl	24684 <assertion_failed>
   16228:	e3a02f4b 	mov	r2, #300	; 0x12c
   1622c:	e59f1010 	ldr	r1, [pc, #16]	; 16244 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   16230:	e59f0030 	ldr	r0, [pc, #48]	; 16268 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x180>
   16234:	eb003912 	bl	24684 <assertion_failed>
   16238:	400090de 	.word	0x400090de
   1623c:	00003fff 	.word	0x00003fff
   16240:	00000137 	.word	0x00000137
   16244:	00040df4 	.word	0x00040df4
   16248:	00040c48 	.word	0x00040c48
   1624c:	00000113 	.word	0x00000113
   16250:	00040bd4 	.word	0x00040bd4
   16254:	00040460 	.word	0x00040460
   16258:	00040bec 	.word	0x00040bec
   1625c:	00040f90 	.word	0x00040f90
   16260:	0000012b 	.word	0x0000012b
   16264:	00040e04 	.word	0x00040e04
   16268:	00040c34 	.word	0x00040c34

0001626c <non-virtual thunk to CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   1626c:	e2400010 	sub	r0, r0, #16
   16270:	eaffff9c 	b	160e8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>

00016274 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   16274:	e3520d19 	cmp	r2, #1600	; 0x640
   16278:	8a00001d 	bhi	162f4 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x80>
   1627c:	e92d4030 	push	{r4, r5, lr}
   16280:	e3510000 	cmp	r1, #0
   16284:	e24dde65 	sub	sp, sp, #1616	; 0x650
   16288:	e24dd00c 	sub	sp, sp, #12
   1628c:	0a00001a 	beq	162fc <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x88>
   16290:	e1a05000 	mov	r5, r0
   16294:	e1a04002 	mov	r4, r2
   16298:	e28d0018 	add	r0, sp, #24
   1629c:	e2403008 	sub	r3, r0, #8
   162a0:	e58d300c 	str	r3, [sp, #12]
   162a4:	eb005117 	bl	2a708 <memcpy>
   162a8:	e5952018 	ldr	r2, [r5, #24]
   162ac:	e3843a03 	orr	r3, r4, #12288	; 0x3000
   162b0:	e3520000 	cmp	r2, #0
   162b4:	e58d4014 	str	r4, [sp, #20]
   162b8:	e58d3010 	str	r3, [sp, #16]
   162bc:	0a000012 	beq	1630c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x98>
   162c0:	e1a00005 	mov	r0, r5
   162c4:	ebffe572 	bl	f894 <CUSBFunction::GetHost() const>
   162c8:	e3a0c000 	mov	ip, #0
   162cc:	e5951018 	ldr	r1, [r5, #24]
   162d0:	e59d200c 	ldr	r2, [sp, #12]
   162d4:	e2843008 	add	r3, r4, #8
   162d8:	e58dc000 	str	ip, [sp]
   162dc:	ebfff17e 	bl	128dc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   162e0:	e1e00000 	mvn	r0, r0
   162e4:	e1a00fa0 	lsr	r0, r0, #31
   162e8:	e28dde65 	add	sp, sp, #1616	; 0x650
   162ec:	e28dd00c 	add	sp, sp, #12
   162f0:	e8bd8030 	pop	{r4, r5, pc}
   162f4:	e3a00000 	mov	r0, #0
   162f8:	e12fff1e 	bx	lr
   162fc:	e59f2018 	ldr	r2, [pc, #24]	; 1631c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xa8>
   16300:	e59f1018 	ldr	r1, [pc, #24]	; 16320 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xac>
   16304:	e59f0018 	ldr	r0, [pc, #24]	; 16324 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb0>
   16308:	eb0038dd 	bl	24684 <assertion_failed>
   1630c:	e59f2014 	ldr	r2, [pc, #20]	; 16328 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb4>
   16310:	e59f1008 	ldr	r1, [pc, #8]	; 16320 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xac>
   16314:	e59f0010 	ldr	r0, [pc, #16]	; 1632c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb8>
   16318:	eb0038d9 	bl	24684 <assertion_failed>
   1631c:	00000106 	.word	0x00000106
   16320:	00040df4 	.word	0x00040df4
   16324:	00040460 	.word	0x00040460
   16328:	0000010d 	.word	0x0000010d
   1632c:	00040c5c 	.word	0x00040c5c

00016330 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   16330:	e2400010 	sub	r0, r0, #16
   16334:	eaffffce 	b	16274 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>

00016338 <non-virtual thunk to CSMSC951xDevice::GetMACAddress() const>:
   16338:	e280000c 	add	r0, r0, #12
   1633c:	e12fff1e 	bx	lr

00016340 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   16340:	e92d4010 	push	{r4, lr}
   16344:	e1a04000 	mov	r4, r0
   16348:	ebffe4dd 	bl	f6c4 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1634c:	e3a02000 	mov	r2, #0
   16350:	e59f3024 	ldr	r3, [pc, #36]	; 1637c <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)+0x3c>
   16354:	e5842014 	str	r2, [r4, #20]
   16358:	e2831008 	add	r1, r3, #8
   1635c:	e2833048 	add	r3, r3, #72	; 0x48
   16360:	e5841000 	str	r1, [r4]
   16364:	e5843010 	str	r3, [r4, #16]
   16368:	e5842018 	str	r2, [r4, #24]
   1636c:	e284001c 	add	r0, r4, #28
   16370:	eb0051e5 	bl	2ab0c <CMACAddress::CMACAddress()>
   16374:	e1a00004 	mov	r0, r4
   16378:	e8bd8010 	pop	{r4, pc}
   1637c:	00040f20 	.word	0x00040f20

00016380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   16380:	e92d4070 	push	{r4, r5, r6, lr}
   16384:	e24dd018 	sub	sp, sp, #24
   16388:	e1a04001 	mov	r4, r1
   1638c:	e58d2014 	str	r2, [sp, #20]
   16390:	e1a06000 	mov	r6, r0
   16394:	ebffe53e 	bl	f894 <CUSBFunction::GetHost() const>
   16398:	e1a05000 	mov	r5, r0
   1639c:	e1a00006 	mov	r0, r6
   163a0:	ebffe530 	bl	f868 <CUSBFunction::GetEndpoint0() const>
   163a4:	e3a0c004 	mov	ip, #4
   163a8:	e3a02000 	mov	r2, #0
   163ac:	e28d3014 	add	r3, sp, #20
   163b0:	e6ff4074 	uxth	r4, r4
   163b4:	e1a01000 	mov	r1, r0
   163b8:	e58d2000 	str	r2, [sp]
   163bc:	e58d3008 	str	r3, [sp, #8]
   163c0:	e1a00005 	mov	r0, r5
   163c4:	e3a030a0 	mov	r3, #160	; 0xa0
   163c8:	e3a02040 	mov	r2, #64	; 0x40
   163cc:	e58d4004 	str	r4, [sp, #4]
   163d0:	e58dc00c 	str	ip, [sp, #12]
   163d4:	ebfff0da 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   163d8:	e1e00000 	mvn	r0, r0
   163dc:	e1a00fa0 	lsr	r0, r0, #31
   163e0:	e28dd018 	add	sp, sp, #24
   163e4:	e8bd8070 	pop	{r4, r5, r6, pc}

000163e8 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   163e8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   163ec:	e24dd014 	sub	sp, sp, #20
   163f0:	e1a06002 	mov	r6, r2
   163f4:	e1a04001 	mov	r4, r1
   163f8:	e1a07000 	mov	r7, r0
   163fc:	ebffe524 	bl	f894 <CUSBFunction::GetHost() const>
   16400:	e1a05000 	mov	r5, r0
   16404:	e1a00007 	mov	r0, r7
   16408:	ebffe516 	bl	f868 <CUSBFunction::GetEndpoint0() const>
   1640c:	e3a02004 	mov	r2, #4
   16410:	e3a03000 	mov	r3, #0
   16414:	e6ff4074 	uxth	r4, r4
   16418:	e1a01000 	mov	r1, r0
   1641c:	e58d200c 	str	r2, [sp, #12]
   16420:	e58d3000 	str	r3, [sp]
   16424:	e1a00005 	mov	r0, r5
   16428:	e3a030a1 	mov	r3, #161	; 0xa1
   1642c:	e3a020c0 	mov	r2, #192	; 0xc0
   16430:	e98d0050 	stmib	sp, {r4, r6}
   16434:	ebfff0c2 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16438:	e2400004 	sub	r0, r0, #4
   1643c:	e16f0f10 	clz	r0, r0
   16440:	e1a002a0 	lsr	r0, r0, #5
   16444:	e28dd014 	add	sp, sp, #20
   16448:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001644c <CSMSC951xDevice::PHYWaitNotBusy()>:
   1644c:	e92d4070 	push	{r4, r5, r6, lr}
   16450:	e24dd008 	sub	sp, sp, #8
   16454:	e1a06000 	mov	r6, r0
   16458:	eb004e55 	bl	29db4 <CTimer::Get()>
   1645c:	e2504000 	subs	r4, r0, #0
   16460:	0a000013 	beq	164b4 <CSMSC951xDevice::PHYWaitNotBusy()+0x68>
   16464:	eb004ba0 	bl	292ec <CTimer::GetTicks() const>
   16468:	e1a05000 	mov	r5, r0
   1646c:	ea000008 	b	16494 <CSMSC951xDevice::PHYWaitNotBusy()+0x48>
   16470:	e3a01f45 	mov	r1, #276	; 0x114
   16474:	e1a00006 	mov	r0, r6
   16478:	e28d2004 	add	r2, sp, #4
   1647c:	ebffffd9 	bl	163e8 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   16480:	e3500000 	cmp	r0, #0
   16484:	0a000007 	beq	164a8 <CSMSC951xDevice::PHYWaitNotBusy()+0x5c>
   16488:	e59d2004 	ldr	r2, [sp, #4]
   1648c:	e3120001 	tst	r2, #1
   16490:	0a000005 	beq	164ac <CSMSC951xDevice::PHYWaitNotBusy()+0x60>
   16494:	e1a00004 	mov	r0, r4
   16498:	eb004b93 	bl	292ec <CTimer::GetTicks() const>
   1649c:	e0403005 	sub	r3, r0, r5
   164a0:	e3530063 	cmp	r3, #99	; 0x63
   164a4:	9afffff1 	bls	16470 <CSMSC951xDevice::PHYWaitNotBusy()+0x24>
   164a8:	e3a00000 	mov	r0, #0
   164ac:	e28dd008 	add	sp, sp, #8
   164b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   164b4:	e59f2008 	ldr	r2, [pc, #8]	; 164c4 <CSMSC951xDevice::PHYWaitNotBusy()+0x78>
   164b8:	e59f1008 	ldr	r1, [pc, #8]	; 164c8 <CSMSC951xDevice::PHYWaitNotBusy()+0x7c>
   164bc:	e59f0008 	ldr	r0, [pc, #8]	; 164cc <CSMSC951xDevice::PHYWaitNotBusy()+0x80>
   164c0:	eb00386f 	bl	24684 <assertion_failed>
   164c4:	0000018e 	.word	0x0000018e
   164c8:	00040df4 	.word	0x00040df4
   164cc:	00040cac 	.word	0x00040cac

000164d0 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   164d0:	e351001f 	cmp	r1, #31
   164d4:	e92d4070 	push	{r4, r5, r6, lr}
   164d8:	8a000017 	bhi	1653c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x6c>
   164dc:	e1a04001 	mov	r4, r1
   164e0:	e1a06002 	mov	r6, r2
   164e4:	e1a05000 	mov	r5, r0
   164e8:	ebffffd7 	bl	1644c <CSMSC951xDevice::PHYWaitNotBusy()>
   164ec:	e3500000 	cmp	r0, #0
   164f0:	1a000001 	bne	164fc <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x2c>
   164f4:	e3a00000 	mov	r0, #0
   164f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   164fc:	e1a02006 	mov	r2, r6
   16500:	e3a01f46 	mov	r1, #280	; 0x118
   16504:	e1a00005 	mov	r0, r5
   16508:	ebffff9c 	bl	16380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   1650c:	e3500000 	cmp	r0, #0
   16510:	0afffff7 	beq	164f4 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   16514:	e59f2030 	ldr	r2, [pc, #48]	; 1654c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x7c>
   16518:	e3a01f45 	mov	r1, #276	; 0x114
   1651c:	e1a00005 	mov	r0, r5
   16520:	e1822304 	orr	r2, r2, r4, lsl #6
   16524:	ebffff95 	bl	16380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16528:	e3500000 	cmp	r0, #0
   1652c:	0afffff0 	beq	164f4 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   16530:	e1a00005 	mov	r0, r5
   16534:	e8bd4070 	pop	{r4, r5, r6, lr}
   16538:	eaffffc3 	b	1644c <CSMSC951xDevice::PHYWaitNotBusy()>
   1653c:	e59f200c 	ldr	r2, [pc, #12]	; 16550 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x80>
   16540:	e59f100c 	ldr	r1, [pc, #12]	; 16554 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x84>
   16544:	e59f000c 	ldr	r0, [pc, #12]	; 16558 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x88>
   16548:	eb00384d 	bl	24684 <assertion_failed>
   1654c:	00000803 	.word	0x00000803
   16550:	00000162 	.word	0x00000162
   16554:	00040df4 	.word	0x00040df4
   16558:	00040cb8 	.word	0x00040cb8

0001655c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   1655c:	e92d4070 	push	{r4, r5, r6, lr}
   16560:	e351001f 	cmp	r1, #31
   16564:	e24dd008 	sub	sp, sp, #8
   16568:	8a000023 	bhi	165fc <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xa0>
   1656c:	e1a04001 	mov	r4, r1
   16570:	e1a06002 	mov	r6, r2
   16574:	e1a05000 	mov	r5, r0
   16578:	ebffffb3 	bl	1644c <CSMSC951xDevice::PHYWaitNotBusy()>
   1657c:	e3500000 	cmp	r0, #0
   16580:	1a000001 	bne	1658c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x30>
   16584:	e28dd008 	add	sp, sp, #8
   16588:	e8bd8070 	pop	{r4, r5, r6, pc}
   1658c:	e59f2078 	ldr	r2, [pc, #120]	; 1660c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb0>
   16590:	e3a01f45 	mov	r1, #276	; 0x114
   16594:	e1a00005 	mov	r0, r5
   16598:	e1822304 	orr	r2, r2, r4, lsl #6
   1659c:	ebffff77 	bl	16380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   165a0:	e3500000 	cmp	r0, #0
   165a4:	0a000003 	beq	165b8 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x5c>
   165a8:	e1a00005 	mov	r0, r5
   165ac:	ebffffa6 	bl	1644c <CSMSC951xDevice::PHYWaitNotBusy()>
   165b0:	e3500000 	cmp	r0, #0
   165b4:	1a000002 	bne	165c4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x68>
   165b8:	e3a00000 	mov	r0, #0
   165bc:	e28dd008 	add	sp, sp, #8
   165c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   165c4:	e1a00005 	mov	r0, r5
   165c8:	e3a01f46 	mov	r1, #280	; 0x118
   165cc:	e28d2004 	add	r2, sp, #4
   165d0:	ebffff84 	bl	163e8 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   165d4:	e3500000 	cmp	r0, #0
   165d8:	0afffff6 	beq	165b8 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x5c>
   165dc:	e3560000 	cmp	r6, #0
   165e0:	159d3004 	ldrne	r3, [sp, #4]
   165e4:	11c630b0 	strhne	r3, [r6]
   165e8:	1affffe5 	bne	16584 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x28>
   165ec:	e59f201c 	ldr	r2, [pc, #28]	; 16610 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb4>
   165f0:	e59f101c 	ldr	r1, [pc, #28]	; 16614 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb8>
   165f4:	e59f001c 	ldr	r0, [pc, #28]	; 16618 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xbc>
   165f8:	eb003821 	bl	24684 <assertion_failed>
   165fc:	e59f2018 	ldr	r2, [pc, #24]	; 1661c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc0>
   16600:	e59f100c 	ldr	r1, [pc, #12]	; 16614 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb8>
   16604:	e59f0014 	ldr	r0, [pc, #20]	; 16620 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc4>
   16608:	eb00381d 	bl	24684 <assertion_failed>
   1660c:	00000801 	.word	0x00000801
   16610:	00000185 	.word	0x00000185
   16614:	00040df4 	.word	0x00040df4
   16618:	00040cc8 	.word	0x00040cc8
   1661c:	00000175 	.word	0x00000175
   16620:	00040cb8 	.word	0x00040cb8

00016624 <CSMSC951xDevice::IsLinkUp()>:
   16624:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   16628:	e24dd00c 	sub	sp, sp, #12
   1662c:	e3a01001 	mov	r1, #1
   16630:	e28d2006 	add	r2, sp, #6
   16634:	ebffffc8 	bl	1655c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   16638:	e3500000 	cmp	r0, #0
   1663c:	11dd00b6 	ldrhne	r0, [sp, #6]
   16640:	11a00140 	asrne	r0, r0, #2
   16644:	12000001 	andne	r0, r0, #1
   16648:	e28dd00c 	add	sp, sp, #12
   1664c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00016650 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()>:
   16650:	e2400010 	sub	r0, r0, #16
   16654:	eafffff2 	b	16624 <CSMSC951xDevice::IsLinkUp()>

00016658 <CSMSC951xDevice::GetLinkSpeed()>:
   16658:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1665c:	e24dd00c 	sub	sp, sp, #12
   16660:	e3a0101f 	mov	r1, #31
   16664:	e28d2006 	add	r2, sp, #6
   16668:	ebffffbb 	bl	1655c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   1666c:	e3500000 	cmp	r0, #0
   16670:	0a000007 	beq	16694 <CSMSC951xDevice::GetLinkSpeed()+0x3c>
   16674:	e1dd30b6 	ldrh	r3, [sp, #6]
   16678:	e3130a01 	tst	r3, #4096	; 0x1000
   1667c:	0a000004 	beq	16694 <CSMSC951xDevice::GetLinkSpeed()+0x3c>
   16680:	e1a03143 	asr	r3, r3, #2
   16684:	e2033007 	and	r3, r3, #7
   16688:	e2433001 	sub	r3, r3, #1
   1668c:	e3530005 	cmp	r3, #5
   16690:	9a000002 	bls	166a0 <CSMSC951xDevice::GetLinkSpeed()+0x48>
   16694:	e3a00006 	mov	r0, #6
   16698:	e28dd00c 	add	sp, sp, #12
   1669c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   166a0:	e59f200c 	ldr	r2, [pc, #12]	; 166b4 <CSMSC951xDevice::GetLinkSpeed()+0x5c>
   166a4:	e0823003 	add	r3, r2, r3
   166a8:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
   166ac:	e28dd00c 	add	sp, sp, #12
   166b0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   166b4:	00040f20 	.word	0x00040f20

000166b8 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()>:
   166b8:	e2400010 	sub	r0, r0, #16
   166bc:	eaffffe5 	b	16658 <CSMSC951xDevice::GetLinkSpeed()>

000166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   166c0:	e92d4030 	push	{r4, r5, lr}
   166c4:	e1a04002 	mov	r4, r2
   166c8:	e24dd014 	sub	sp, sp, #20
   166cc:	e1a05001 	mov	r5, r1
   166d0:	e28d200c 	add	r2, sp, #12
   166d4:	e1a01004 	mov	r1, r4
   166d8:	ebffff42 	bl	163e8 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   166dc:	e3500000 	cmp	r0, #0
   166e0:	0a000008 	beq	16708 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x48>
   166e4:	eb0040ce 	bl	26a24 <CLogger::Get()>
   166e8:	e59d300c 	ldr	r3, [sp, #12]
   166ec:	e3a02004 	mov	r2, #4
   166f0:	e88d0028 	stm	sp, {r3, r5}
   166f4:	e59f102c 	ldr	r1, [pc, #44]	; 16728 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   166f8:	e59f302c 	ldr	r3, [pc, #44]	; 1672c <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x6c>
   166fc:	eb00400a 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16700:	e28dd014 	add	sp, sp, #20
   16704:	e8bd8030 	pop	{r4, r5, pc}
   16708:	eb0040c5 	bl	26a24 <CLogger::Get()>
   1670c:	e3a02001 	mov	r2, #1
   16710:	e59f3018 	ldr	r3, [pc, #24]	; 16730 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x70>
   16714:	e59f100c 	ldr	r1, [pc, #12]	; 16728 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   16718:	e58d4000 	str	r4, [sp]
   1671c:	eb004002 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16720:	e28dd014 	add	sp, sp, #20
   16724:	e8bd8030 	pop	{r4, r5, pc}
   16728:	00040f90 	.word	0x00040f90
   1672c:	00040e24 	.word	0x00040e24
   16730:	00040c90 	.word	0x00040c90

00016734 <CSMSC951xDevice::DumpRegs()>:
   16734:	e92d4010 	push	{r4, lr}
   16738:	e1a04000 	mov	r4, r0
   1673c:	e3a02000 	mov	r2, #0
   16740:	e59f1134 	ldr	r1, [pc, #308]	; 1687c <CSMSC951xDevice::DumpRegs()+0x148>
   16744:	ebffffdd 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16748:	e1a00004 	mov	r0, r4
   1674c:	e3a02008 	mov	r2, #8
   16750:	e59f1128 	ldr	r1, [pc, #296]	; 16880 <CSMSC951xDevice::DumpRegs()+0x14c>
   16754:	ebffffd9 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16758:	e1a00004 	mov	r0, r4
   1675c:	e3a0200c 	mov	r2, #12
   16760:	e59f111c 	ldr	r1, [pc, #284]	; 16884 <CSMSC951xDevice::DumpRegs()+0x150>
   16764:	ebffffd5 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16768:	e1a00004 	mov	r0, r4
   1676c:	e3a02010 	mov	r2, #16
   16770:	e59f1110 	ldr	r1, [pc, #272]	; 16888 <CSMSC951xDevice::DumpRegs()+0x154>
   16774:	ebffffd1 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16778:	e1a00004 	mov	r0, r4
   1677c:	e3a02014 	mov	r2, #20
   16780:	e59f1104 	ldr	r1, [pc, #260]	; 1688c <CSMSC951xDevice::DumpRegs()+0x158>
   16784:	ebffffcd 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16788:	e1a00004 	mov	r0, r4
   1678c:	e3a02018 	mov	r2, #24
   16790:	e59f10f8 	ldr	r1, [pc, #248]	; 16890 <CSMSC951xDevice::DumpRegs()+0x15c>
   16794:	ebffffc9 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16798:	e1a00004 	mov	r0, r4
   1679c:	e3a02020 	mov	r2, #32
   167a0:	e59f10ec 	ldr	r1, [pc, #236]	; 16894 <CSMSC951xDevice::DumpRegs()+0x160>
   167a4:	ebffffc5 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   167a8:	e1a00004 	mov	r0, r4
   167ac:	e3a02024 	mov	r2, #36	; 0x24
   167b0:	e59f10e0 	ldr	r1, [pc, #224]	; 16898 <CSMSC951xDevice::DumpRegs()+0x164>
   167b4:	ebffffc1 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   167b8:	e1a00004 	mov	r0, r4
   167bc:	e3a02028 	mov	r2, #40	; 0x28
   167c0:	e59f10d4 	ldr	r1, [pc, #212]	; 1689c <CSMSC951xDevice::DumpRegs()+0x168>
   167c4:	ebffffbd 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   167c8:	e1a00004 	mov	r0, r4
   167cc:	e3a0202c 	mov	r2, #44	; 0x2c
   167d0:	e59f10c8 	ldr	r1, [pc, #200]	; 168a0 <CSMSC951xDevice::DumpRegs()+0x16c>
   167d4:	ebffffb9 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   167d8:	e1a00004 	mov	r0, r4
   167dc:	e3a02038 	mov	r2, #56	; 0x38
   167e0:	e59f10bc 	ldr	r1, [pc, #188]	; 168a4 <CSMSC951xDevice::DumpRegs()+0x170>
   167e4:	ebffffb5 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   167e8:	e1a00004 	mov	r0, r4
   167ec:	e3a02068 	mov	r2, #104	; 0x68
   167f0:	e59f10b0 	ldr	r1, [pc, #176]	; 168a8 <CSMSC951xDevice::DumpRegs()+0x174>
   167f4:	ebffffb1 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   167f8:	e1a00004 	mov	r0, r4
   167fc:	e3a0206c 	mov	r2, #108	; 0x6c
   16800:	e59f10a4 	ldr	r1, [pc, #164]	; 168ac <CSMSC951xDevice::DumpRegs()+0x178>
   16804:	ebffffad 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16808:	e1a00004 	mov	r0, r4
   1680c:	e3a02c01 	mov	r2, #256	; 0x100
   16810:	e59f1098 	ldr	r1, [pc, #152]	; 168b0 <CSMSC951xDevice::DumpRegs()+0x17c>
   16814:	ebffffa9 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16818:	e1a00004 	mov	r0, r4
   1681c:	e3a02f41 	mov	r2, #260	; 0x104
   16820:	e59f108c 	ldr	r1, [pc, #140]	; 168b4 <CSMSC951xDevice::DumpRegs()+0x180>
   16824:	ebffffa5 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16828:	e1a00004 	mov	r0, r4
   1682c:	e3a02f42 	mov	r2, #264	; 0x108
   16830:	e59f1080 	ldr	r1, [pc, #128]	; 168b8 <CSMSC951xDevice::DumpRegs()+0x184>
   16834:	ebffffa1 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16838:	e1a00004 	mov	r0, r4
   1683c:	e3a02f43 	mov	r2, #268	; 0x10c
   16840:	e59f1074 	ldr	r1, [pc, #116]	; 168bc <CSMSC951xDevice::DumpRegs()+0x188>
   16844:	ebffff9d 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16848:	e1a00004 	mov	r0, r4
   1684c:	e3a02e11 	mov	r2, #272	; 0x110
   16850:	e59f1068 	ldr	r1, [pc, #104]	; 168c0 <CSMSC951xDevice::DumpRegs()+0x18c>
   16854:	ebffff99 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16858:	e1a00004 	mov	r0, r4
   1685c:	e3a02f47 	mov	r2, #284	; 0x11c
   16860:	e59f105c 	ldr	r1, [pc, #92]	; 168c4 <CSMSC951xDevice::DumpRegs()+0x190>
   16864:	ebffff95 	bl	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16868:	e1a00004 	mov	r0, r4
   1686c:	e8bd4010 	pop	{r4, lr}
   16870:	e3a02f4b 	mov	r2, #300	; 0x12c
   16874:	e59f104c 	ldr	r1, [pc, #76]	; 168c8 <CSMSC951xDevice::DumpRegs()+0x194>
   16878:	eaffff90 	b	166c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1687c:	00040e2c 	.word	0x00040e2c
   16880:	00040e34 	.word	0x00040e34
   16884:	00040e3c 	.word	0x00040e3c
   16888:	00040e44 	.word	0x00040e44
   1688c:	00040e4c 	.word	0x00040e4c
   16890:	00040e54 	.word	0x00040e54
   16894:	00040e60 	.word	0x00040e60
   16898:	00040e68 	.word	0x00040e68
   1689c:	00040e6c 	.word	0x00040e6c
   168a0:	00040e78 	.word	0x00040e78
   168a4:	00040e80 	.word	0x00040e80
   168a8:	00040e8c 	.word	0x00040e8c
   168ac:	00040e98 	.word	0x00040e98
   168b0:	00040ea4 	.word	0x00040ea4
   168b4:	00040eac 	.word	0x00040eac
   168b8:	00040eb4 	.word	0x00040eb4
   168bc:	00040ebc 	.word	0x00040ebc
   168c0:	00040ec4 	.word	0x00040ec4
   168c4:	00040ecc 	.word	0x00040ecc
   168c8:	00040ed4 	.word	0x00040ed4

000168cc <CSMSC951xDevice::Configure()>:
   168cc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   168d0:	e3a07000 	mov	r7, #0
   168d4:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   168d8:	e1a01007 	mov	r1, r7
   168dc:	e1a05000 	mov	r5, r0
   168e0:	e28d001c 	add	r0, sp, #28
   168e4:	eb003787 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   168e8:	e3a03014 	mov	r3, #20
   168ec:	e59f1284 	ldr	r1, [pc, #644]	; 16b78 <CSMSC951xDevice::Configure()+0x2ac>
   168f0:	e28d001c 	add	r0, sp, #28
   168f4:	e58d7000 	str	r7, [sp]
   168f8:	e28d2034 	add	r2, sp, #52	; 0x34
   168fc:	eb00378d 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   16900:	e2504000 	subs	r4, r0, #0
   16904:	0a00006e 	beq	16ac4 <CSMSC951xDevice::Configure()+0x1f8>
   16908:	e285601c 	add	r6, r5, #28
   1690c:	e28d1040 	add	r1, sp, #64	; 0x40
   16910:	e1a00006 	mov	r0, r6
   16914:	eb00509d 	bl	2ab90 <CMACAddress::Set(unsigned char const*)>
   16918:	e28d0024 	add	r0, sp, #36	; 0x24
   1691c:	eb004430 	bl	279e4 <CString::CString()>
   16920:	e28d1024 	add	r1, sp, #36	; 0x24
   16924:	e1a00006 	mov	r0, r6
   16928:	eb0050f2 	bl	2acf8 <CMACAddress::Format(CString*) const>
   1692c:	eb00403c 	bl	26a24 <CLogger::Get()>
   16930:	e1a04000 	mov	r4, r0
   16934:	e28d0024 	add	r0, sp, #36	; 0x24
   16938:	eb004441 	bl	27a44 <CString::operator char const*() const>
   1693c:	e1a02000 	mov	r2, r0
   16940:	e59f3234 	ldr	r3, [pc, #564]	; 16b7c <CSMSC951xDevice::Configure()+0x2b0>
   16944:	e1a00004 	mov	r0, r4
   16948:	e59f1230 	ldr	r1, [pc, #560]	; 16b80 <CSMSC951xDevice::Configure()+0x2b4>
   1694c:	e58d2000 	str	r2, [sp]
   16950:	e3a02004 	mov	r2, #4
   16954:	eb003f74 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16958:	e1a00005 	mov	r0, r5
   1695c:	ebffe3ab 	bl	f810 <CUSBFunction::GetNumEndpoints() const>
   16960:	e3500003 	cmp	r0, #3
   16964:	0a00000e 	beq	169a4 <CSMSC951xDevice::Configure()+0xd8>
   16968:	e1a00005 	mov	r0, r5
   1696c:	e59f120c 	ldr	r1, [pc, #524]	; 16b80 <CSMSC951xDevice::Configure()+0x2b4>
   16970:	e1a04007 	mov	r4, r7
   16974:	ebffe3dc 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   16978:	e28d0024 	add	r0, sp, #36	; 0x24
   1697c:	eb0043e5 	bl	27918 <CString::~CString()>
   16980:	e28d001c 	add	r0, sp, #28
   16984:	eb003766 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   16988:	e1a00004 	mov	r0, r4
   1698c:	e28dd04c 	add	sp, sp, #76	; 0x4c
   16990:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16994:	e5d43003 	ldrb	r3, [r4, #3]
   16998:	e203303f 	and	r3, r3, #63	; 0x3f
   1699c:	e3530002 	cmp	r3, #2
   169a0:	0a000035 	beq	16a7c <CSMSC951xDevice::Configure()+0x1b0>
   169a4:	e3a01005 	mov	r1, #5
   169a8:	e1a00005 	mov	r0, r5
   169ac:	ebffe3c3 	bl	f8c0 <CUSBFunction::GetDescriptor(unsigned char)>
   169b0:	e2504000 	subs	r4, r0, #0
   169b4:	1afffff6 	bne	16994 <CSMSC951xDevice::Configure()+0xc8>
   169b8:	e5953014 	ldr	r3, [r5, #20]
   169bc:	e1a00005 	mov	r0, r5
   169c0:	e3530000 	cmp	r3, #0
   169c4:	0a00004a 	beq	16af4 <CSMSC951xDevice::Configure()+0x228>
   169c8:	e5953018 	ldr	r3, [r5, #24]
   169cc:	e3530000 	cmp	r3, #0
   169d0:	0a000047 	beq	16af4 <CSMSC951xDevice::Configure()+0x228>
   169d4:	ebffe2d1 	bl	f520 <CUSBFunction::Configure()>
   169d8:	e2504000 	subs	r4, r0, #0
   169dc:	0a00003e 	beq	16adc <CSMSC951xDevice::Configure()+0x210>
   169e0:	e1a00006 	mov	r0, r6
   169e4:	e28d1014 	add	r1, sp, #20
   169e8:	eb005092 	bl	2ac38 <CMACAddress::CopyTo(unsigned char*) const>
   169ec:	e5dd2019 	ldrb	r2, [sp, #25]
   169f0:	e5dd3018 	ldrb	r3, [sp, #24]
   169f4:	e3a01f41 	mov	r1, #260	; 0x104
   169f8:	e1a00005 	mov	r0, r5
   169fc:	e1832402 	orr	r2, r3, r2, lsl #8
   16a00:	e59d4014 	ldr	r4, [sp, #20]
   16a04:	ebfffe5d 	bl	16380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16a08:	e3500000 	cmp	r0, #0
   16a0c:	0a00004b 	beq	16b40 <CSMSC951xDevice::Configure()+0x274>
   16a10:	e1a02004 	mov	r2, r4
   16a14:	e3a01f42 	mov	r1, #264	; 0x108
   16a18:	e1a00005 	mov	r0, r5
   16a1c:	ebfffe57 	bl	16380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16a20:	e3500000 	cmp	r0, #0
   16a24:	0a000045 	beq	16b40 <CSMSC951xDevice::Configure()+0x274>
   16a28:	e3a01024 	mov	r1, #36	; 0x24
   16a2c:	e1a00005 	mov	r0, r5
   16a30:	e59f214c 	ldr	r2, [pc, #332]	; 16b84 <CSMSC951xDevice::Configure()+0x2b8>
   16a34:	ebfffe51 	bl	16380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16a38:	e3500000 	cmp	r0, #0
   16a3c:	0a000046 	beq	16b5c <CSMSC951xDevice::Configure()+0x290>
   16a40:	e3a01c01 	mov	r1, #256	; 0x100
   16a44:	e1a00005 	mov	r0, r5
   16a48:	e59f2138 	ldr	r2, [pc, #312]	; 16b88 <CSMSC951xDevice::Configure()+0x2bc>
   16a4c:	ebfffe4b 	bl	16380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16a50:	e3500000 	cmp	r0, #0
   16a54:	0a000040 	beq	16b5c <CSMSC951xDevice::Configure()+0x290>
   16a58:	e3a02004 	mov	r2, #4
   16a5c:	e3a01010 	mov	r1, #16
   16a60:	e1a00005 	mov	r0, r5
   16a64:	ebfffe45 	bl	16380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16a68:	e2504000 	subs	r4, r0, #0
   16a6c:	0a00003a 	beq	16b5c <CSMSC951xDevice::Configure()+0x290>
   16a70:	e2850010 	add	r0, r5, #16
   16a74:	eb0050c0 	bl	2ad7c <CNetDevice::AddNetDevice()>
   16a78:	eaffffbe 	b	16978 <CSMSC951xDevice::Configure()+0xac>
   16a7c:	e1d430d2 	ldrsb	r3, [r4, #2]
   16a80:	e3530000 	cmp	r3, #0
   16a84:	ba00001e 	blt	16b04 <CSMSC951xDevice::Configure()+0x238>
   16a88:	e5953018 	ldr	r3, [r5, #24]
   16a8c:	e1a00005 	mov	r0, r5
   16a90:	e3530000 	cmp	r3, #0
   16a94:	1a000016 	bne	16af4 <CSMSC951xDevice::Configure()+0x228>
   16a98:	ebffe368 	bl	f840 <CUSBFunction::GetDevice() const>
   16a9c:	e1a01000 	mov	r1, r0
   16aa0:	e3a00014 	mov	r0, #20
   16aa4:	e58d100c 	str	r1, [sp, #12]
   16aa8:	eb0050fc 	bl	2aea0 <operator new(unsigned int)>
   16aac:	e1a07000 	mov	r7, r0
   16ab0:	e1a02004 	mov	r2, r4
   16ab4:	e59d100c 	ldr	r1, [sp, #12]
   16ab8:	ebffe19e 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16abc:	e5857018 	str	r7, [r5, #24]
   16ac0:	eaffffb7 	b	169a4 <CSMSC951xDevice::Configure()+0xd8>
   16ac4:	eb003fd6 	bl	26a24 <CLogger::Get()>
   16ac8:	e3a02001 	mov	r2, #1
   16acc:	e59f30b8 	ldr	r3, [pc, #184]	; 16b8c <CSMSC951xDevice::Configure()+0x2c0>
   16ad0:	e59f10a8 	ldr	r1, [pc, #168]	; 16b80 <CSMSC951xDevice::Configure()+0x2b4>
   16ad4:	eb003f14 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16ad8:	eaffffa8 	b	16980 <CSMSC951xDevice::Configure()+0xb4>
   16adc:	eb003fd0 	bl	26a24 <CLogger::Get()>
   16ae0:	e3a02001 	mov	r2, #1
   16ae4:	e59f30a4 	ldr	r3, [pc, #164]	; 16b90 <CSMSC951xDevice::Configure()+0x2c4>
   16ae8:	e59f1090 	ldr	r1, [pc, #144]	; 16b80 <CSMSC951xDevice::Configure()+0x2b4>
   16aec:	eb003f0e 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16af0:	eaffffa0 	b	16978 <CSMSC951xDevice::Configure()+0xac>
   16af4:	e59f1084 	ldr	r1, [pc, #132]	; 16b80 <CSMSC951xDevice::Configure()+0x2b4>
   16af8:	ebffe37b 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   16afc:	e3a04000 	mov	r4, #0
   16b00:	eaffff9c 	b	16978 <CSMSC951xDevice::Configure()+0xac>
   16b04:	e5953014 	ldr	r3, [r5, #20]
   16b08:	e1a00005 	mov	r0, r5
   16b0c:	e3530000 	cmp	r3, #0
   16b10:	1afffff7 	bne	16af4 <CSMSC951xDevice::Configure()+0x228>
   16b14:	ebffe349 	bl	f840 <CUSBFunction::GetDevice() const>
   16b18:	e1a01000 	mov	r1, r0
   16b1c:	e3a00014 	mov	r0, #20
   16b20:	e58d100c 	str	r1, [sp, #12]
   16b24:	eb0050dd 	bl	2aea0 <operator new(unsigned int)>
   16b28:	e1a07000 	mov	r7, r0
   16b2c:	e1a02004 	mov	r2, r4
   16b30:	e59d100c 	ldr	r1, [sp, #12]
   16b34:	ebffe17f 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16b38:	e5857014 	str	r7, [r5, #20]
   16b3c:	eaffff98 	b	169a4 <CSMSC951xDevice::Configure()+0xd8>
   16b40:	eb003fb7 	bl	26a24 <CLogger::Get()>
   16b44:	e3a02001 	mov	r2, #1
   16b48:	e59f3044 	ldr	r3, [pc, #68]	; 16b94 <CSMSC951xDevice::Configure()+0x2c8>
   16b4c:	e59f102c 	ldr	r1, [pc, #44]	; 16b80 <CSMSC951xDevice::Configure()+0x2b4>
   16b50:	eb003ef5 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16b54:	e3a04000 	mov	r4, #0
   16b58:	eaffff86 	b	16978 <CSMSC951xDevice::Configure()+0xac>
   16b5c:	eb003fb0 	bl	26a24 <CLogger::Get()>
   16b60:	e3a02001 	mov	r2, #1
   16b64:	e59f302c 	ldr	r3, [pc, #44]	; 16b98 <CSMSC951xDevice::Configure()+0x2cc>
   16b68:	e59f1010 	ldr	r1, [pc, #16]	; 16b80 <CSMSC951xDevice::Configure()+0x2b4>
   16b6c:	eb003eee 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16b70:	e3a04000 	mov	r4, #0
   16b74:	eaffff7f 	b	16978 <CSMSC951xDevice::Configure()+0xac>
   16b78:	00010003 	.word	0x00010003
   16b7c:	00040cfc 	.word	0x00040cfc
   16b80:	00040f90 	.word	0x00040f90
   16b84:	01110000 	.word	0x01110000
   16b88:	0080000c 	.word	0x0080000c
   16b8c:	00040edc 	.word	0x00040edc
   16b90:	0003fbd8 	.word	0x0003fbd8
   16b94:	00040ef4 	.word	0x00040ef4
   16b98:	00040f0c 	.word	0x00040f0c

00016b9c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   16b9c:	e3a03000 	mov	r3, #0
   16ba0:	e92d4070 	push	{r4, r5, r6, lr}
   16ba4:	e1a04000 	mov	r4, r0
   16ba8:	e5900020 	ldr	r0, [r0, #32]
   16bac:	e59f20a0 	ldr	r2, [pc, #160]	; 16c54 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xb8>
   16bb0:	e1500003 	cmp	r0, r3
   16bb4:	e5842000 	str	r2, [r4]
   16bb8:	e5843024 	str	r3, [r4, #36]	; 0x24
   16bbc:	0a000000 	beq	16bc4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x28>
   16bc0:	eb0050c3 	bl	2aed4 <operator delete[](void*)>
   16bc4:	e3a03000 	mov	r3, #0
   16bc8:	e5945018 	ldr	r5, [r4, #24]
   16bcc:	e5843020 	str	r3, [r4, #32]
   16bd0:	e1550003 	cmp	r5, r3
   16bd4:	0a000004 	beq	16bec <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x50>
   16bd8:	e1a00005 	mov	r0, r5
   16bdc:	ebffe1b9 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   16be0:	e1a00005 	mov	r0, r5
   16be4:	e3a01014 	mov	r1, #20
   16be8:	eb0050ba 	bl	2aed8 <operator delete(void*, unsigned int)>
   16bec:	e3a03000 	mov	r3, #0
   16bf0:	e5945014 	ldr	r5, [r4, #20]
   16bf4:	e5843018 	str	r3, [r4, #24]
   16bf8:	e1550003 	cmp	r5, r3
   16bfc:	0a000004 	beq	16c14 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x78>
   16c00:	e1a00005 	mov	r0, r5
   16c04:	ebffe1af 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   16c08:	e1a00005 	mov	r0, r5
   16c0c:	e3a01014 	mov	r1, #20
   16c10:	eb0050b0 	bl	2aed8 <operator delete(void*, unsigned int)>
   16c14:	e3a03000 	mov	r3, #0
   16c18:	e5945010 	ldr	r5, [r4, #16]
   16c1c:	e5843014 	str	r3, [r4, #20]
   16c20:	e1550003 	cmp	r5, r3
   16c24:	0a000004 	beq	16c3c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xa0>
   16c28:	e1a00005 	mov	r0, r5
   16c2c:	ebffe1a5 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   16c30:	e1a00005 	mov	r0, r5
   16c34:	e3a01014 	mov	r1, #20
   16c38:	eb0050a6 	bl	2aed8 <operator delete(void*, unsigned int)>
   16c3c:	e3a03000 	mov	r3, #0
   16c40:	e1a00004 	mov	r0, r4
   16c44:	e5843010 	str	r3, [r4, #16]
   16c48:	ebffe20b 	bl	f47c <CUSBFunction::~CUSBFunction()>
   16c4c:	e1a00004 	mov	r0, r4
   16c50:	e8bd8070 	pop	{r4, r5, r6, pc}
   16c54:	00041044 	.word	0x00041044

00016c58 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   16c58:	e92d4010 	push	{r4, lr}
   16c5c:	e1a04000 	mov	r4, r0
   16c60:	ebffffcd 	bl	16b9c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   16c64:	e1a00004 	mov	r0, r4
   16c68:	e3a01028 	mov	r1, #40	; 0x28
   16c6c:	eb005099 	bl	2aed8 <operator delete(void*, unsigned int)>
   16c70:	e1a00004 	mov	r0, r4
   16c74:	e8bd8010 	pop	{r4, pc}

00016c78 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   16c78:	e92d4010 	push	{r4, lr}
   16c7c:	e1a04000 	mov	r4, r0
   16c80:	ebffe28f 	bl	f6c4 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   16c84:	e3a03000 	mov	r3, #0
   16c88:	e59f2020 	ldr	r2, [pc, #32]	; 16cb0 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x38>
   16c8c:	e1a00004 	mov	r0, r4
   16c90:	e5843010 	str	r3, [r4, #16]
   16c94:	e5842000 	str	r2, [r4]
   16c98:	e5843014 	str	r3, [r4, #20]
   16c9c:	e5843018 	str	r3, [r4, #24]
   16ca0:	e584301c 	str	r3, [r4, #28]
   16ca4:	e5843020 	str	r3, [r4, #32]
   16ca8:	e5843024 	str	r3, [r4, #36]	; 0x24
   16cac:	e8bd8010 	pop	{r4, pc}
   16cb0:	00041044 	.word	0x00041044

00016cb4 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   16cb4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16cb8:	e24dd014 	sub	sp, sp, #20
   16cbc:	e1a06001 	mov	r6, r1
   16cc0:	e1a04002 	mov	r4, r2
   16cc4:	e1a07000 	mov	r7, r0
   16cc8:	ebffe2f1 	bl	f894 <CUSBFunction::GetHost() const>
   16ccc:	e1a05000 	mov	r5, r0
   16cd0:	e1a00007 	mov	r0, r7
   16cd4:	ebffe2e3 	bl	f868 <CUSBFunction::GetEndpoint0() const>
   16cd8:	e3a03000 	mov	r3, #0
   16cdc:	e6ff4074 	uxth	r4, r4
   16ce0:	e1a01000 	mov	r1, r0
   16ce4:	e3a02020 	mov	r2, #32
   16ce8:	e1a00005 	mov	r0, r5
   16cec:	e58d6008 	str	r6, [sp, #8]
   16cf0:	e58d400c 	str	r4, [sp, #12]
   16cf4:	e58d3004 	str	r3, [sp, #4]
   16cf8:	e58d3000 	str	r3, [sp]
   16cfc:	ebffee90 	bl	12744 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16d00:	e1e00000 	mvn	r0, r0
   16d04:	e1a00fa0 	lsr	r0, r0, #31
   16d08:	e28dd014 	add	sp, sp, #20
   16d0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00016d10 <CUSBBluetoothDevice::StartRequest()>:
   16d10:	e92d4070 	push	{r4, r5, r6, lr}
   16d14:	e1a04000 	mov	r4, r0
   16d18:	e5900010 	ldr	r0, [r0, #16]
   16d1c:	e24dd010 	sub	sp, sp, #16
   16d20:	e3500000 	cmp	r0, #0
   16d24:	0a00001f 	beq	16da8 <CUSBBluetoothDevice::StartRequest()+0x98>
   16d28:	e5943020 	ldr	r3, [r4, #32]
   16d2c:	e3530000 	cmp	r3, #0
   16d30:	0a000020 	beq	16db8 <CUSBBluetoothDevice::StartRequest()+0xa8>
   16d34:	e594501c 	ldr	r5, [r4, #28]
   16d38:	e3550000 	cmp	r5, #0
   16d3c:	1a000021 	bne	16dc8 <CUSBBluetoothDevice::StartRequest()+0xb8>
   16d40:	ebffe175 	bl	f31c <CUSBEndpoint::GetMaxPacketSize() const>
   16d44:	e1a03000 	mov	r3, r0
   16d48:	e3a00028 	mov	r0, #40	; 0x28
   16d4c:	e58d300c 	str	r3, [sp, #12]
   16d50:	ebfff5e6 	bl	144f0 <CUSBRequest::operator new(unsigned int)>
   16d54:	e1a06000 	mov	r6, r0
   16d58:	e58d5000 	str	r5, [sp]
   16d5c:	e59d300c 	ldr	r3, [sp, #12]
   16d60:	e5942020 	ldr	r2, [r4, #32]
   16d64:	e5941010 	ldr	r1, [r4, #16]
   16d68:	ebfff55f 	bl	142ec <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   16d6c:	e1a03004 	mov	r3, r4
   16d70:	e1a02005 	mov	r2, r5
   16d74:	e1a00006 	mov	r0, r6
   16d78:	e59f1058 	ldr	r1, [pc, #88]	; 16dd8 <CUSBBluetoothDevice::StartRequest()+0xc8>
   16d7c:	e584601c 	str	r6, [r4, #28]
   16d80:	ebfff5bb 	bl	14474 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   16d84:	e1a00004 	mov	r0, r4
   16d88:	ebffe2c1 	bl	f894 <CUSBFunction::GetHost() const>
   16d8c:	e1a02005 	mov	r2, r5
   16d90:	e5903000 	ldr	r3, [r0]
   16d94:	e594101c 	ldr	r1, [r4, #28]
   16d98:	e593300c 	ldr	r3, [r3, #12]
   16d9c:	e28dd010 	add	sp, sp, #16
   16da0:	e8bd4070 	pop	{r4, r5, r6, lr}
   16da4:	e12fff13 	bx	r3
   16da8:	e3a020a3 	mov	r2, #163	; 0xa3
   16dac:	e59f1028 	ldr	r1, [pc, #40]	; 16ddc <CUSBBluetoothDevice::StartRequest()+0xcc>
   16db0:	e59f0028 	ldr	r0, [pc, #40]	; 16de0 <CUSBBluetoothDevice::StartRequest()+0xd0>
   16db4:	eb003632 	bl	24684 <assertion_failed>
   16db8:	e3a020a4 	mov	r2, #164	; 0xa4
   16dbc:	e59f1018 	ldr	r1, [pc, #24]	; 16ddc <CUSBBluetoothDevice::StartRequest()+0xcc>
   16dc0:	e59f001c 	ldr	r0, [pc, #28]	; 16de4 <CUSBBluetoothDevice::StartRequest()+0xd4>
   16dc4:	eb00362e 	bl	24684 <assertion_failed>
   16dc8:	e3a020a6 	mov	r2, #166	; 0xa6
   16dcc:	e59f1008 	ldr	r1, [pc, #8]	; 16ddc <CUSBBluetoothDevice::StartRequest()+0xcc>
   16dd0:	e59f0010 	ldr	r0, [pc, #16]	; 16de8 <CUSBBluetoothDevice::StartRequest()+0xd8>
   16dd4:	eb00362a 	bl	24684 <assertion_failed>
   16dd8:	00016f3c 	.word	0x00016f3c
   16ddc:	00040fa4 	.word	0x00040fa4
   16de0:	00040fb8 	.word	0x00040fb8
   16de4:	00040fd4 	.word	0x00040fd4
   16de8:	00040338 	.word	0x00040338

00016dec <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   16dec:	e3510000 	cmp	r1, #0
   16df0:	e5801024 	str	r1, [r0, #36]	; 0x24
   16df4:	0a000000 	beq	16dfc <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x10>
   16df8:	eaffffc4 	b	16d10 <CUSBBluetoothDevice::StartRequest()>
   16dfc:	e3a0209c 	mov	r2, #156	; 0x9c
   16e00:	e92d4010 	push	{r4, lr}
   16e04:	e59f1004 	ldr	r1, [pc, #4]	; 16e10 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x24>
   16e08:	e59f0004 	ldr	r0, [pc, #4]	; 16e14 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x28>
   16e0c:	eb00361c 	bl	24684 <assertion_failed>
   16e10:	00040fa4 	.word	0x00040fa4
   16e14:	00040fe8 	.word	0x00040fe8

00016e18 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   16e18:	e3510000 	cmp	r1, #0
   16e1c:	e92d4070 	push	{r4, r5, r6, lr}
   16e20:	0a00002d 	beq	16edc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   16e24:	e590501c 	ldr	r5, [r0, #28]
   16e28:	e1a04000 	mov	r4, r0
   16e2c:	e1550001 	cmp	r5, r1
   16e30:	1a00002d 	bne	16eec <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   16e34:	e5903020 	ldr	r3, [r0, #32]
   16e38:	e3530000 	cmp	r3, #0
   16e3c:	0a00002e 	beq	16efc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   16e40:	e1a00005 	mov	r0, r5
   16e44:	ebfff557 	bl	143a8 <CUSBRequest::GetStatus() const>
   16e48:	e3500000 	cmp	r0, #0
   16e4c:	0a00001c 	beq	16ec4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xac>
   16e50:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   16e54:	e3560000 	cmp	r6, #0
   16e58:	0a00002b 	beq	16f0c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xf4>
   16e5c:	e1a00005 	mov	r0, r5
   16e60:	e5945020 	ldr	r5, [r4, #32]
   16e64:	ebfff551 	bl	143b0 <CUSBRequest::GetResultLength() const>
   16e68:	e1a01000 	mov	r1, r0
   16e6c:	e1a00005 	mov	r0, r5
   16e70:	e12fff36 	blx	r6
   16e74:	e594501c 	ldr	r5, [r4, #28]
   16e78:	e3550000 	cmp	r5, #0
   16e7c:	0a000004 	beq	16e94 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x7c>
   16e80:	e1a00005 	mov	r0, r5
   16e84:	ebfff538 	bl	1436c <CUSBRequest::~CUSBRequest()>
   16e88:	e1a00005 	mov	r0, r5
   16e8c:	e3a01028 	mov	r1, #40	; 0x28
   16e90:	ebfff5ab 	bl	14544 <CUSBRequest::operator delete(void*, unsigned int)>
   16e94:	e3a03000 	mov	r3, #0
   16e98:	e1a00004 	mov	r0, r4
   16e9c:	e584301c 	str	r3, [r4, #28]
   16ea0:	ebffff9a 	bl	16d10 <CUSBBluetoothDevice::StartRequest()>
   16ea4:	e3500000 	cmp	r0, #0
   16ea8:	18bd8070 	popne	{r4, r5, r6, pc}
   16eac:	eb003edc 	bl	26a24 <CLogger::Get()>
   16eb0:	e8bd4070 	pop	{r4, r5, r6, lr}
   16eb4:	e3a02001 	mov	r2, #1
   16eb8:	e59f305c 	ldr	r3, [pc, #92]	; 16f1c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x104>
   16ebc:	e59f105c 	ldr	r1, [pc, #92]	; 16f20 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x108>
   16ec0:	ea003e19 	b	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16ec4:	eb003ed6 	bl	26a24 <CLogger::Get()>
   16ec8:	e3a02002 	mov	r2, #2
   16ecc:	e59f3050 	ldr	r3, [pc, #80]	; 16f24 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x10c>
   16ed0:	e59f1048 	ldr	r1, [pc, #72]	; 16f20 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x108>
   16ed4:	eb003e14 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16ed8:	eaffffe5 	b	16e74 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x5c>
   16edc:	e3a020b2 	mov	r2, #178	; 0xb2
   16ee0:	e59f1040 	ldr	r1, [pc, #64]	; 16f28 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   16ee4:	e59f0040 	ldr	r0, [pc, #64]	; 16f2c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   16ee8:	eb0035e5 	bl	24684 <assertion_failed>
   16eec:	e3a020b3 	mov	r2, #179	; 0xb3
   16ef0:	e59f1030 	ldr	r1, [pc, #48]	; 16f28 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   16ef4:	e59f0034 	ldr	r0, [pc, #52]	; 16f30 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x118>
   16ef8:	eb0035e1 	bl	24684 <assertion_failed>
   16efc:	e3a020b4 	mov	r2, #180	; 0xb4
   16f00:	e59f1020 	ldr	r1, [pc, #32]	; 16f28 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   16f04:	e59f0028 	ldr	r0, [pc, #40]	; 16f34 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   16f08:	eb0035dd 	bl	24684 <assertion_failed>
   16f0c:	e3a020b8 	mov	r2, #184	; 0xb8
   16f10:	e59f1010 	ldr	r1, [pc, #16]	; 16f28 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   16f14:	e59f001c 	ldr	r0, [pc, #28]	; 16f38 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x120>
   16f18:	eb0035d9 	bl	24684 <assertion_failed>
   16f1c:	0004036c 	.word	0x0004036c
   16f20:	00041068 	.word	0x00041068
   16f24:	00041000 	.word	0x00041000
   16f28:	00040fa4 	.word	0x00040fa4
   16f2c:	0003eb24 	.word	0x0003eb24
   16f30:	0004035c 	.word	0x0004035c
   16f34:	00040fd4 	.word	0x00040fd4
   16f38:	00040fe8 	.word	0x00040fe8

00016f3c <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   16f3c:	e3520000 	cmp	r2, #0
   16f40:	0a000002 	beq	16f50 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   16f44:	e1a01000 	mov	r1, r0
   16f48:	e1a00002 	mov	r0, r2
   16f4c:	eaffffb1 	b	16e18 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   16f50:	e3a020cc 	mov	r2, #204	; 0xcc
   16f54:	e92d4010 	push	{r4, lr}
   16f58:	e59f1004 	ldr	r1, [pc, #4]	; 16f64 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   16f5c:	e59f0004 	ldr	r0, [pc, #4]	; 16f68 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   16f60:	eb0035c7 	bl	24684 <assertion_failed>
   16f64:	00040fa4 	.word	0x00040fa4
   16f68:	0003ea38 	.word	0x0003ea38

00016f6c <CUSBBluetoothDevice::Configure()>:
   16f6c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16f70:	e24dd01c 	sub	sp, sp, #28
   16f74:	e1a05000 	mov	r5, r0
   16f78:	ebffe2a1 	bl	fa04 <CUSBFunction::GetInterfaceNumber() const>
   16f7c:	e2506000 	subs	r6, r0, #0
   16f80:	1a000044 	bne	17098 <CUSBBluetoothDevice::Configure()+0x12c>
   16f84:	e1a00005 	mov	r0, r5
   16f88:	ebffe220 	bl	f810 <CUSBFunction::GetNumEndpoints() const>
   16f8c:	e3500003 	cmp	r0, #3
   16f90:	1a00003a 	bne	17080 <CUSBBluetoothDevice::Configure()+0x114>
   16f94:	e3a01005 	mov	r1, #5
   16f98:	e1a00005 	mov	r0, r5
   16f9c:	ebffe247 	bl	f8c0 <CUSBFunction::GetDescriptor(unsigned char)>
   16fa0:	e2504000 	subs	r4, r0, #0
   16fa4:	0a000044 	beq	170bc <CUSBBluetoothDevice::Configure()+0x150>
   16fa8:	e5d42003 	ldrb	r2, [r4, #3]
   16fac:	e202203f 	and	r2, r2, #63	; 0x3f
   16fb0:	e3520002 	cmp	r2, #2
   16fb4:	0a000010 	beq	16ffc <CUSBBluetoothDevice::Configure()+0x90>
   16fb8:	e3520003 	cmp	r2, #3
   16fbc:	1afffff4 	bne	16f94 <CUSBBluetoothDevice::Configure()+0x28>
   16fc0:	e5953010 	ldr	r3, [r5, #16]
   16fc4:	e1a00005 	mov	r0, r5
   16fc8:	e3530000 	cmp	r3, #0
   16fcc:	1a000044 	bne	170e4 <CUSBBluetoothDevice::Configure()+0x178>
   16fd0:	ebffe21a 	bl	f840 <CUSBFunction::GetDevice() const>
   16fd4:	e1a01000 	mov	r1, r0
   16fd8:	e3a00014 	mov	r0, #20
   16fdc:	e58d1004 	str	r1, [sp, #4]
   16fe0:	eb004fae 	bl	2aea0 <operator new(unsigned int)>
   16fe4:	e1a06000 	mov	r6, r0
   16fe8:	e1a02004 	mov	r2, r4
   16fec:	e59d1004 	ldr	r1, [sp, #4]
   16ff0:	ebffe050 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16ff4:	e5856010 	str	r6, [r5, #16]
   16ff8:	eaffffe5 	b	16f94 <CUSBBluetoothDevice::Configure()+0x28>
   16ffc:	e1d430d2 	ldrsb	r3, [r4, #2]
   17000:	e3530000 	cmp	r3, #0
   17004:	ba00000e 	blt	17044 <CUSBBluetoothDevice::Configure()+0xd8>
   17008:	e5953018 	ldr	r3, [r5, #24]
   1700c:	e1a00005 	mov	r0, r5
   17010:	e3530000 	cmp	r3, #0
   17014:	1a000032 	bne	170e4 <CUSBBluetoothDevice::Configure()+0x178>
   17018:	ebffe208 	bl	f840 <CUSBFunction::GetDevice() const>
   1701c:	e1a01000 	mov	r1, r0
   17020:	e3a00014 	mov	r0, #20
   17024:	e58d1004 	str	r1, [sp, #4]
   17028:	eb004f9c 	bl	2aea0 <operator new(unsigned int)>
   1702c:	e1a06000 	mov	r6, r0
   17030:	e1a02004 	mov	r2, r4
   17034:	e59d1004 	ldr	r1, [sp, #4]
   17038:	ebffe03e 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1703c:	e5856018 	str	r6, [r5, #24]
   17040:	eaffffd3 	b	16f94 <CUSBBluetoothDevice::Configure()+0x28>
   17044:	e5953014 	ldr	r3, [r5, #20]
   17048:	e1a00005 	mov	r0, r5
   1704c:	e3530000 	cmp	r3, #0
   17050:	1a000023 	bne	170e4 <CUSBBluetoothDevice::Configure()+0x178>
   17054:	ebffe1f9 	bl	f840 <CUSBFunction::GetDevice() const>
   17058:	e1a01000 	mov	r1, r0
   1705c:	e3a00014 	mov	r0, #20
   17060:	e58d1004 	str	r1, [sp, #4]
   17064:	eb004f8d 	bl	2aea0 <operator new(unsigned int)>
   17068:	e1a06000 	mov	r6, r0
   1706c:	e1a02004 	mov	r2, r4
   17070:	e59d1004 	ldr	r1, [sp, #4]
   17074:	ebffe02f 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17078:	e5856014 	str	r6, [r5, #20]
   1707c:	eaffffc4 	b	16f94 <CUSBBluetoothDevice::Configure()+0x28>
   17080:	e1a00005 	mov	r0, r5
   17084:	e59f10fc 	ldr	r1, [pc, #252]	; 17188 <CUSBBluetoothDevice::Configure()+0x21c>
   17088:	ebffe217 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   1708c:	e1a00006 	mov	r0, r6
   17090:	e28dd01c 	add	sp, sp, #28
   17094:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17098:	e3a06000 	mov	r6, #0
   1709c:	eb003e60 	bl	26a24 <CLogger::Get()>
   170a0:	e3a02002 	mov	r2, #2
   170a4:	e59f30e0 	ldr	r3, [pc, #224]	; 1718c <CUSBBluetoothDevice::Configure()+0x220>
   170a8:	e59f10d8 	ldr	r1, [pc, #216]	; 17188 <CUSBBluetoothDevice::Configure()+0x21c>
   170ac:	eb003d9e 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   170b0:	e1a00006 	mov	r0, r6
   170b4:	e28dd01c 	add	sp, sp, #28
   170b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   170bc:	e5953014 	ldr	r3, [r5, #20]
   170c0:	e3530000 	cmp	r3, #0
   170c4:	0a000005 	beq	170e0 <CUSBBluetoothDevice::Configure()+0x174>
   170c8:	e5953018 	ldr	r3, [r5, #24]
   170cc:	e3530000 	cmp	r3, #0
   170d0:	0a000002 	beq	170e0 <CUSBBluetoothDevice::Configure()+0x174>
   170d4:	e5953010 	ldr	r3, [r5, #16]
   170d8:	e3530000 	cmp	r3, #0
   170dc:	1a000006 	bne	170fc <CUSBBluetoothDevice::Configure()+0x190>
   170e0:	e1a00005 	mov	r0, r5
   170e4:	e3a06000 	mov	r6, #0
   170e8:	e59f1098 	ldr	r1, [pc, #152]	; 17188 <CUSBBluetoothDevice::Configure()+0x21c>
   170ec:	ebffe1fe 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   170f0:	e1a00006 	mov	r0, r6
   170f4:	e28dd01c 	add	sp, sp, #28
   170f8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   170fc:	e1a00005 	mov	r0, r5
   17100:	ebffe106 	bl	f520 <CUSBFunction::Configure()>
   17104:	e2506000 	subs	r6, r0, #0
   17108:	0a000018 	beq	17170 <CUSBBluetoothDevice::Configure()+0x204>
   1710c:	e5950010 	ldr	r0, [r5, #16]
   17110:	ebffe081 	bl	f31c <CUSBEndpoint::GetMaxPacketSize() const>
   17114:	eb004f67 	bl	2aeb8 <operator new[](unsigned int)>
   17118:	e5850020 	str	r0, [r5, #32]
   1711c:	e28d0008 	add	r0, sp, #8
   17120:	eb00422f 	bl	279e4 <CString::CString()>
   17124:	e59f3064 	ldr	r3, [pc, #100]	; 17190 <CUSBBluetoothDevice::Configure()+0x224>
   17128:	e59f1064 	ldr	r1, [pc, #100]	; 17194 <CUSBBluetoothDevice::Configure()+0x228>
   1712c:	e5932000 	ldr	r2, [r3]
   17130:	e28d0008 	add	r0, sp, #8
   17134:	e282c001 	add	ip, r2, #1
   17138:	e583c000 	str	ip, [r3]
   1713c:	eb004772 	bl	28f0c <CString::Format(char const*, ...)>
   17140:	eb003811 	bl	2518c <CDeviceNameService::Get()>
   17144:	e1a07000 	mov	r7, r0
   17148:	e28d0008 	add	r0, sp, #8
   1714c:	eb00423c 	bl	27a44 <CString::operator char const*() const>
   17150:	e1a03004 	mov	r3, r4
   17154:	e1a01000 	mov	r1, r0
   17158:	e1a02005 	mov	r2, r5
   1715c:	e1a00007 	mov	r0, r7
   17160:	eb003759 	bl	24ecc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   17164:	e28d0008 	add	r0, sp, #8
   17168:	eb0041ea 	bl	27918 <CString::~CString()>
   1716c:	eaffffc6 	b	1708c <CUSBBluetoothDevice::Configure()+0x120>
   17170:	eb003e2b 	bl	26a24 <CLogger::Get()>
   17174:	e3a02001 	mov	r2, #1
   17178:	e59f3018 	ldr	r3, [pc, #24]	; 17198 <CUSBBluetoothDevice::Configure()+0x22c>
   1717c:	e59f1004 	ldr	r1, [pc, #4]	; 17188 <CUSBBluetoothDevice::Configure()+0x21c>
   17180:	eb003d69 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17184:	eaffffc0 	b	1708c <CUSBBluetoothDevice::Configure()+0x120>
   17188:	00041068 	.word	0x00041068
   1718c:	00041010 	.word	0x00041010
   17190:	00047838 	.word	0x00047838
   17194:	00041034 	.word	0x00041034
   17198:	0003fbd8 	.word	0x0003fbd8

0001719c <CUSBCDCEthernetDevice::GetMACAddress() const>:
   1719c:	e280001c 	add	r0, r0, #28
   171a0:	e12fff1e 	bx	lr

000171a4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   171a4:	e92d4070 	push	{r4, r5, r6, lr}
   171a8:	e59f3074 	ldr	r3, [pc, #116]	; 17224 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x80>
   171ac:	e5905018 	ldr	r5, [r0, #24]
   171b0:	e2832038 	add	r2, r3, #56	; 0x38
   171b4:	e3550000 	cmp	r5, #0
   171b8:	e1a04000 	mov	r4, r0
   171bc:	e5803000 	str	r3, [r0]
   171c0:	e5802010 	str	r2, [r0, #16]
   171c4:	0a000004 	beq	171dc <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x38>
   171c8:	e1a00005 	mov	r0, r5
   171cc:	ebffe03d 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   171d0:	e1a00005 	mov	r0, r5
   171d4:	e3a01014 	mov	r1, #20
   171d8:	eb004f3e 	bl	2aed8 <operator delete(void*, unsigned int)>
   171dc:	e3a03000 	mov	r3, #0
   171e0:	e5945014 	ldr	r5, [r4, #20]
   171e4:	e5843018 	str	r3, [r4, #24]
   171e8:	e1550003 	cmp	r5, r3
   171ec:	0a000004 	beq	17204 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x60>
   171f0:	e1a00005 	mov	r0, r5
   171f4:	ebffe033 	bl	f2c8 <CUSBEndpoint::~CUSBEndpoint()>
   171f8:	e1a00005 	mov	r0, r5
   171fc:	e3a01014 	mov	r1, #20
   17200:	eb004f34 	bl	2aed8 <operator delete(void*, unsigned int)>
   17204:	e3a03000 	mov	r3, #0
   17208:	e284001c 	add	r0, r4, #28
   1720c:	e5843014 	str	r3, [r4, #20]
   17210:	eb004e40 	bl	2ab18 <CMACAddress::~CMACAddress()>
   17214:	e1a00004 	mov	r0, r4
   17218:	ebffe097 	bl	f47c <CUSBFunction::~CUSBFunction()>
   1721c:	e1a00004 	mov	r0, r4
   17220:	e8bd8070 	pop	{r4, r5, r6, pc}
   17224:	000410bc 	.word	0x000410bc

00017228 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   17228:	e2400010 	sub	r0, r0, #16
   1722c:	eaffffdc 	b	171a4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

00017230 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   17230:	e92d4010 	push	{r4, lr}
   17234:	e1a04000 	mov	r4, r0
   17238:	ebffffd9 	bl	171a4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   1723c:	e1a00004 	mov	r0, r4
   17240:	e3a01024 	mov	r1, #36	; 0x24
   17244:	eb004f23 	bl	2aed8 <operator delete(void*, unsigned int)>
   17248:	e1a00004 	mov	r0, r4
   1724c:	e8bd8010 	pop	{r4, pc}

00017250 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   17250:	e2400010 	sub	r0, r0, #16
   17254:	eafffff5 	b	17230 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

00017258 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   17258:	e92d4070 	push	{r4, r5, r6, lr}
   1725c:	e5903014 	ldr	r3, [r0, #20]
   17260:	e24dd030 	sub	sp, sp, #48	; 0x30
   17264:	e3530000 	cmp	r3, #0
   17268:	0a000026 	beq	17308 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xb0>
   1726c:	e3510000 	cmp	r1, #0
   17270:	0a000028 	beq	17318 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xc0>
   17274:	e3a05000 	mov	r5, #0
   17278:	e1a04000 	mov	r4, r0
   1727c:	e1a06002 	mov	r6, r2
   17280:	e58d5000 	str	r5, [sp]
   17284:	e1a02001 	mov	r2, r1
   17288:	e28d0008 	add	r0, sp, #8
   1728c:	e1a01003 	mov	r1, r3
   17290:	e3a03d19 	mov	r3, #1600	; 0x640
   17294:	ebfff414 	bl	142ec <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   17298:	e28d0008 	add	r0, sp, #8
   1729c:	ebfff48e 	bl	144dc <CUSBRequest::SetCompleteOnNAK()>
   172a0:	e1a00004 	mov	r0, r4
   172a4:	ebffe17a 	bl	f894 <CUSBFunction::GetHost() const>
   172a8:	e5903000 	ldr	r3, [r0]
   172ac:	e1a02005 	mov	r2, r5
   172b0:	e5933008 	ldr	r3, [r3, #8]
   172b4:	e28d1008 	add	r1, sp, #8
   172b8:	e12fff33 	blx	r3
   172bc:	e2504000 	subs	r4, r0, #0
   172c0:	1a000005 	bne	172dc <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x84>
   172c4:	e3a04000 	mov	r4, #0
   172c8:	e28d0008 	add	r0, sp, #8
   172cc:	ebfff426 	bl	1436c <CUSBRequest::~CUSBRequest()>
   172d0:	e1a00004 	mov	r0, r4
   172d4:	e28dd030 	add	sp, sp, #48	; 0x30
   172d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   172dc:	e28d0008 	add	r0, sp, #8
   172e0:	ebfff432 	bl	143b0 <CUSBRequest::GetResultLength() const>
   172e4:	e3500000 	cmp	r0, #0
   172e8:	0afffff5 	beq	172c4 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   172ec:	e3560000 	cmp	r6, #0
   172f0:	15860000 	strne	r0, [r6]
   172f4:	1afffff3 	bne	172c8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x70>
   172f8:	e3a020c3 	mov	r2, #195	; 0xc3
   172fc:	e59f1024 	ldr	r1, [pc, #36]	; 17328 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   17300:	e59f0024 	ldr	r0, [pc, #36]	; 1732c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd4>
   17304:	eb0034de 	bl	24684 <assertion_failed>
   17308:	e3a020b2 	mov	r2, #178	; 0xb2
   1730c:	e59f1014 	ldr	r1, [pc, #20]	; 17328 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   17310:	e59f0018 	ldr	r0, [pc, #24]	; 17330 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd8>
   17314:	eb0034da 	bl	24684 <assertion_failed>
   17318:	e3a020b3 	mov	r2, #179	; 0xb3
   1731c:	e59f1004 	ldr	r1, [pc, #4]	; 17328 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   17320:	e59f000c 	ldr	r0, [pc, #12]	; 17334 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   17324:	eb0034d6 	bl	24684 <assertion_failed>
   17328:	00041070 	.word	0x00041070
   1732c:	00040c48 	.word	0x00040c48
   17330:	00040bd4 	.word	0x00040bd4
   17334:	00040460 	.word	0x00040460

00017338 <non-virtual thunk to CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   17338:	e2400010 	sub	r0, r0, #16
   1733c:	eaffffc5 	b	17258 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>

00017340 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   17340:	e92d4070 	push	{r4, r5, r6, lr}
   17344:	e5903018 	ldr	r3, [r0, #24]
   17348:	e24dd008 	sub	sp, sp, #8
   1734c:	e3530000 	cmp	r3, #0
   17350:	0a000011 	beq	1739c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x5c>
   17354:	e3510000 	cmp	r1, #0
   17358:	e1a05001 	mov	r5, r1
   1735c:	0a000012 	beq	173ac <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x6c>
   17360:	e3520d19 	cmp	r2, #1600	; 0x640
   17364:	e1a06002 	mov	r6, r2
   17368:	8a000013 	bhi	173bc <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x7c>
   1736c:	e1a04000 	mov	r4, r0
   17370:	ebffe147 	bl	f894 <CUSBFunction::GetHost() const>
   17374:	e3a0c000 	mov	ip, #0
   17378:	e5941018 	ldr	r1, [r4, #24]
   1737c:	e1a03006 	mov	r3, r6
   17380:	e1a02005 	mov	r2, r5
   17384:	e58dc000 	str	ip, [sp]
   17388:	ebffed53 	bl	128dc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1738c:	e1e00000 	mvn	r0, r0
   17390:	e1a00fa0 	lsr	r0, r0, #31
   17394:	e28dd008 	add	sp, sp, #8
   17398:	e8bd8070 	pop	{r4, r5, r6, pc}
   1739c:	e3a020aa 	mov	r2, #170	; 0xaa
   173a0:	e59f1024 	ldr	r1, [pc, #36]	; 173cc <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   173a4:	e59f0024 	ldr	r0, [pc, #36]	; 173d0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x90>
   173a8:	eb0034b5 	bl	24684 <assertion_failed>
   173ac:	e3a020ab 	mov	r2, #171	; 0xab
   173b0:	e59f1014 	ldr	r1, [pc, #20]	; 173cc <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   173b4:	e59f0018 	ldr	r0, [pc, #24]	; 173d4 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x94>
   173b8:	eb0034b1 	bl	24684 <assertion_failed>
   173bc:	e3a020ac 	mov	r2, #172	; 0xac
   173c0:	e59f1004 	ldr	r1, [pc, #4]	; 173cc <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   173c4:	e59f000c 	ldr	r0, [pc, #12]	; 173d8 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   173c8:	eb0034ad 	bl	24684 <assertion_failed>
   173cc:	00041070 	.word	0x00041070
   173d0:	00040c5c 	.word	0x00040c5c
   173d4:	00040460 	.word	0x00040460
   173d8:	00041084 	.word	0x00041084

000173dc <non-virtual thunk to CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   173dc:	e2400010 	sub	r0, r0, #16
   173e0:	eaffffd6 	b	17340 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>

000173e4 <non-virtual thunk to CUSBCDCEthernetDevice::GetMACAddress() const>:
   173e4:	e280000c 	add	r0, r0, #12
   173e8:	e12fff1e 	bx	lr

000173ec <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   173ec:	e92d4010 	push	{r4, lr}
   173f0:	e1a04000 	mov	r4, r0
   173f4:	ebffe0b2 	bl	f6c4 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   173f8:	e3a02000 	mov	r2, #0
   173fc:	e59f3024 	ldr	r3, [pc, #36]	; 17428 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x3c>
   17400:	e5842014 	str	r2, [r4, #20]
   17404:	e2831008 	add	r1, r3, #8
   17408:	e2833040 	add	r3, r3, #64	; 0x40
   1740c:	e5841000 	str	r1, [r4]
   17410:	e5843010 	str	r3, [r4, #16]
   17414:	e5842018 	str	r2, [r4, #24]
   17418:	e284001c 	add	r0, r4, #28
   1741c:	eb004dba 	bl	2ab0c <CMACAddress::CMACAddress()>
   17420:	e1a00004 	mov	r0, r4
   17424:	e8bd8010 	pop	{r4, pc}
   17428:	000410b4 	.word	0x000410b4

0001742c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   1742c:	e92d4030 	push	{r4, r5, lr}
   17430:	e24dd01c 	sub	sp, sp, #28
   17434:	e1a05001 	mov	r5, r1
   17438:	e1a04000 	mov	r4, r0
   1743c:	ebffe0ff 	bl	f840 <CUSBFunction::GetDevice() const>
   17440:	e1a01000 	mov	r1, r0
   17444:	e28d000c 	add	r0, sp, #12
   17448:	eb00020a 	bl	17c78 <CUSBString::CUSBString(CUSBDevice*)>
   1744c:	e3550000 	cmp	r5, #0
   17450:	1a000005 	bne	1746c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x40>
   17454:	e3a05000 	mov	r5, #0
   17458:	e28d000c 	add	r0, sp, #12
   1745c:	eb000248 	bl	17d84 <CUSBString::~CUSBString()>
   17460:	e1a00005 	mov	r0, r5
   17464:	e28dd01c 	add	sp, sp, #28
   17468:	e8bd8030 	pop	{r4, r5, pc}
   1746c:	e28d000c 	add	r0, sp, #12
   17470:	eb0002e7 	bl	18014 <CUSBString::GetLanguageID()>
   17474:	e1a01005 	mov	r1, r5
   17478:	e1a02000 	mov	r2, r0
   1747c:	e28d000c 	add	r0, sp, #12
   17480:	eb00024f 	bl	17dc4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   17484:	e2505000 	subs	r5, r0, #0
   17488:	0afffff1 	beq	17454 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1748c:	e28d000c 	add	r0, sp, #12
   17490:	eb0002dd 	bl	1800c <CUSBString::Get() const>
   17494:	e3500000 	cmp	r0, #0
   17498:	12801002 	addne	r1, r0, #2
   1749c:	128dc003 	addne	ip, sp, #3
   174a0:	1280000e 	addne	r0, r0, #14
   174a4:	0a000018 	beq	1750c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe0>
   174a8:	e15130d2 	ldrsb	r3, [r1, #-2]
   174ac:	e3530039 	cmp	r3, #57	; 0x39
   174b0:	c2433007 	subgt	r3, r3, #7
   174b4:	e6ef3073 	uxtb	r3, r3
   174b8:	e2433030 	sub	r3, r3, #48	; 0x30
   174bc:	e6ef2073 	uxtb	r2, r3
   174c0:	e352000f 	cmp	r2, #15
   174c4:	8affffe2 	bhi	17454 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   174c8:	e15130d1 	ldrsb	r3, [r1, #-1]
   174cc:	e3530039 	cmp	r3, #57	; 0x39
   174d0:	c2433007 	subgt	r3, r3, #7
   174d4:	e6ef3073 	uxtb	r3, r3
   174d8:	e2433030 	sub	r3, r3, #48	; 0x30
   174dc:	e6ef3073 	uxtb	r3, r3
   174e0:	e353000f 	cmp	r3, #15
   174e4:	8affffda 	bhi	17454 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   174e8:	e2811002 	add	r1, r1, #2
   174ec:	e1833202 	orr	r3, r3, r2, lsl #4
   174f0:	e1500001 	cmp	r0, r1
   174f4:	e5ec3001 	strb	r3, [ip, #1]!
   174f8:	1affffea 	bne	174a8 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   174fc:	e284001c 	add	r0, r4, #28
   17500:	e28d1004 	add	r1, sp, #4
   17504:	eb004da1 	bl	2ab90 <CMACAddress::Set(unsigned char const*)>
   17508:	eaffffd2 	b	17458 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x2c>
   1750c:	e3a020d3 	mov	r2, #211	; 0xd3
   17510:	e59f1004 	ldr	r1, [pc, #4]	; 1751c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf0>
   17514:	e59f0004 	ldr	r0, [pc, #4]	; 17520 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf4>
   17518:	eb003459 	bl	24684 <assertion_failed>
   1751c:	00041070 	.word	0x00041070
   17520:	000410a4 	.word	0x000410a4

00017524 <CUSBCDCEthernetDevice::Configure()>:
   17524:	e92d4070 	push	{r4, r5, r6, lr}
   17528:	e1a05000 	mov	r5, r0
   1752c:	e24dd020 	sub	sp, sp, #32
   17530:	ea000002 	b	17540 <CUSBCDCEthernetDevice::Configure()+0x1c>
   17534:	e5d43002 	ldrb	r3, [r4, #2]
   17538:	e353000f 	cmp	r3, #15
   1753c:	0a000011 	beq	17588 <CUSBCDCEthernetDevice::Configure()+0x64>
   17540:	e3a01024 	mov	r1, #36	; 0x24
   17544:	e1a00005 	mov	r0, r5
   17548:	ebffe0dc 	bl	f8c0 <CUSBFunction::GetDescriptor(unsigned char)>
   1754c:	e2504000 	subs	r4, r0, #0
   17550:	1afffff7 	bne	17534 <CUSBCDCEthernetDevice::Configure()+0x10>
   17554:	e1a00005 	mov	r0, r5
   17558:	e59f11f4 	ldr	r1, [pc, #500]	; 17754 <CUSBCDCEthernetDevice::Configure()+0x230>
   1755c:	ebffe0e2 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   17560:	ea000046 	b	17680 <CUSBCDCEthernetDevice::Configure()+0x15c>
   17564:	e5d32006 	ldrb	r2, [r3, #6]
   17568:	e3520000 	cmp	r2, #0
   1756c:	1a000005 	bne	17588 <CUSBCDCEthernetDevice::Configure()+0x64>
   17570:	e5d32007 	ldrb	r2, [r3, #7]
   17574:	e3520000 	cmp	r2, #0
   17578:	1a000002 	bne	17588 <CUSBCDCEthernetDevice::Configure()+0x64>
   1757c:	e5d33004 	ldrb	r3, [r3, #4]
   17580:	e3530001 	cmp	r3, #1
   17584:	8a000008 	bhi	175ac <CUSBCDCEthernetDevice::Configure()+0x88>
   17588:	e3a01004 	mov	r1, #4
   1758c:	e1a00005 	mov	r0, r5
   17590:	ebffe0ca 	bl	f8c0 <CUSBFunction::GetDescriptor(unsigned char)>
   17594:	e2503000 	subs	r3, r0, #0
   17598:	0a000066 	beq	17738 <CUSBCDCEthernetDevice::Configure()+0x214>
   1759c:	e5d32005 	ldrb	r2, [r3, #5]
   175a0:	e352000a 	cmp	r2, #10
   175a4:	1afffff7 	bne	17588 <CUSBCDCEthernetDevice::Configure()+0x64>
   175a8:	eaffffed 	b	17564 <CUSBCDCEthernetDevice::Configure()+0x40>
   175ac:	e5d41003 	ldrb	r1, [r4, #3]
   175b0:	e1a00005 	mov	r0, r5
   175b4:	ebffff9c 	bl	1742c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   175b8:	e2504000 	subs	r4, r0, #0
   175bc:	0a00002a 	beq	1766c <CUSBCDCEthernetDevice::Configure()+0x148>
   175c0:	e28d0010 	add	r0, sp, #16
   175c4:	eb004106 	bl	279e4 <CString::CString()>
   175c8:	e28d1010 	add	r1, sp, #16
   175cc:	e285001c 	add	r0, r5, #28
   175d0:	eb004dc8 	bl	2acf8 <CMACAddress::Format(CString*) const>
   175d4:	eb003d12 	bl	26a24 <CLogger::Get()>
   175d8:	e1a04000 	mov	r4, r0
   175dc:	e28d0010 	add	r0, sp, #16
   175e0:	eb004117 	bl	27a44 <CString::operator char const*() const>
   175e4:	e1a02000 	mov	r2, r0
   175e8:	e59f3168 	ldr	r3, [pc, #360]	; 17758 <CUSBCDCEthernetDevice::Configure()+0x234>
   175ec:	e58d2000 	str	r2, [sp]
   175f0:	e1a00004 	mov	r0, r4
   175f4:	e3a02004 	mov	r2, #4
   175f8:	e59f1154 	ldr	r1, [pc, #340]	; 17754 <CUSBCDCEthernetDevice::Configure()+0x230>
   175fc:	eb003c4a 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17600:	ea000003 	b	17614 <CUSBCDCEthernetDevice::Configure()+0xf0>
   17604:	e5d43003 	ldrb	r3, [r4, #3]
   17608:	e203303f 	and	r3, r3, #63	; 0x3f
   1760c:	e3530002 	cmp	r3, #2
   17610:	0a00001d 	beq	1768c <CUSBCDCEthernetDevice::Configure()+0x168>
   17614:	e3a01005 	mov	r1, #5
   17618:	e1a00005 	mov	r0, r5
   1761c:	ebffe0a7 	bl	f8c0 <CUSBFunction::GetDescriptor(unsigned char)>
   17620:	e2504000 	subs	r4, r0, #0
   17624:	1afffff6 	bne	17604 <CUSBCDCEthernetDevice::Configure()+0xe0>
   17628:	e5953014 	ldr	r3, [r5, #20]
   1762c:	e1a00005 	mov	r0, r5
   17630:	e3530000 	cmp	r3, #0
   17634:	0a00002c 	beq	176ec <CUSBCDCEthernetDevice::Configure()+0x1c8>
   17638:	e5953018 	ldr	r3, [r5, #24]
   1763c:	e3530000 	cmp	r3, #0
   17640:	0a000029 	beq	176ec <CUSBCDCEthernetDevice::Configure()+0x1c8>
   17644:	ebffdfb5 	bl	f520 <CUSBFunction::Configure()>
   17648:	e2504000 	subs	r4, r0, #0
   1764c:	0a000020 	beq	176d4 <CUSBCDCEthernetDevice::Configure()+0x1b0>
   17650:	e2850010 	add	r0, r5, #16
   17654:	eb004dc8 	bl	2ad7c <CNetDevice::AddNetDevice()>
   17658:	e28d0010 	add	r0, sp, #16
   1765c:	eb0040ad 	bl	27918 <CString::~CString()>
   17660:	e1a00004 	mov	r0, r4
   17664:	e28dd020 	add	sp, sp, #32
   17668:	e8bd8070 	pop	{r4, r5, r6, pc}
   1766c:	eb003cec 	bl	26a24 <CLogger::Get()>
   17670:	e3a02001 	mov	r2, #1
   17674:	e59f30e0 	ldr	r3, [pc, #224]	; 1775c <CUSBCDCEthernetDevice::Configure()+0x238>
   17678:	e59f10d4 	ldr	r1, [pc, #212]	; 17754 <CUSBCDCEthernetDevice::Configure()+0x230>
   1767c:	eb003c2a 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17680:	e1a00004 	mov	r0, r4
   17684:	e28dd020 	add	sp, sp, #32
   17688:	e8bd8070 	pop	{r4, r5, r6, pc}
   1768c:	e1d430d2 	ldrsb	r3, [r4, #2]
   17690:	e3530000 	cmp	r3, #0
   17694:	ba000018 	blt	176fc <CUSBCDCEthernetDevice::Configure()+0x1d8>
   17698:	e5953018 	ldr	r3, [r5, #24]
   1769c:	e1a00005 	mov	r0, r5
   176a0:	e3530000 	cmp	r3, #0
   176a4:	1a000010 	bne	176ec <CUSBCDCEthernetDevice::Configure()+0x1c8>
   176a8:	ebffe064 	bl	f840 <CUSBFunction::GetDevice() const>
   176ac:	e1a01000 	mov	r1, r0
   176b0:	e3a00014 	mov	r0, #20
   176b4:	e58d100c 	str	r1, [sp, #12]
   176b8:	eb004df8 	bl	2aea0 <operator new(unsigned int)>
   176bc:	e1a06000 	mov	r6, r0
   176c0:	e1a02004 	mov	r2, r4
   176c4:	e59d100c 	ldr	r1, [sp, #12]
   176c8:	ebffde9a 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   176cc:	e5856018 	str	r6, [r5, #24]
   176d0:	eaffffcf 	b	17614 <CUSBCDCEthernetDevice::Configure()+0xf0>
   176d4:	eb003cd2 	bl	26a24 <CLogger::Get()>
   176d8:	e3a02001 	mov	r2, #1
   176dc:	e59f307c 	ldr	r3, [pc, #124]	; 17760 <CUSBCDCEthernetDevice::Configure()+0x23c>
   176e0:	e59f106c 	ldr	r1, [pc, #108]	; 17754 <CUSBCDCEthernetDevice::Configure()+0x230>
   176e4:	eb003c10 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   176e8:	eaffffda 	b	17658 <CUSBCDCEthernetDevice::Configure()+0x134>
   176ec:	e59f1060 	ldr	r1, [pc, #96]	; 17754 <CUSBCDCEthernetDevice::Configure()+0x230>
   176f0:	ebffe07d 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   176f4:	e3a04000 	mov	r4, #0
   176f8:	eaffffd6 	b	17658 <CUSBCDCEthernetDevice::Configure()+0x134>
   176fc:	e5953014 	ldr	r3, [r5, #20]
   17700:	e1a00005 	mov	r0, r5
   17704:	e3530000 	cmp	r3, #0
   17708:	1afffff7 	bne	176ec <CUSBCDCEthernetDevice::Configure()+0x1c8>
   1770c:	ebffe04b 	bl	f840 <CUSBFunction::GetDevice() const>
   17710:	e1a01000 	mov	r1, r0
   17714:	e3a00014 	mov	r0, #20
   17718:	e58d100c 	str	r1, [sp, #12]
   1771c:	eb004ddf 	bl	2aea0 <operator new(unsigned int)>
   17720:	e1a06000 	mov	r6, r0
   17724:	e1a02004 	mov	r2, r4
   17728:	e59d100c 	ldr	r1, [sp, #12]
   1772c:	ebffde81 	bl	f138 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17730:	e5856014 	str	r6, [r5, #20]
   17734:	eaffffb6 	b	17614 <CUSBCDCEthernetDevice::Configure()+0xf0>
   17738:	e1a04003 	mov	r4, r3
   1773c:	e1a00005 	mov	r0, r5
   17740:	e59f100c 	ldr	r1, [pc, #12]	; 17754 <CUSBCDCEthernetDevice::Configure()+0x230>
   17744:	ebffe068 	bl	f8ec <CUSBFunction::ConfigurationError(char const*) const>
   17748:	e1a00004 	mov	r0, r4
   1774c:	e28dd020 	add	sp, sp, #32
   17750:	e8bd8070 	pop	{r4, r5, r6, pc}
   17754:	0004111c 	.word	0x0004111c
   17758:	00040cfc 	.word	0x00040cfc
   1775c:	00040edc 	.word	0x00040edc
   17760:	0003fbd8 	.word	0x0003fbd8

00017764 <CNetDevice::IsLinkUp()>:
   17764:	e3a00001 	mov	r0, #1
   17768:	e12fff1e 	bx	lr

0001776c <CNetDevice::GetLinkSpeed()>:
   1776c:	e3a00006 	mov	r0, #6
   17770:	e12fff1e 	bx	lr

00017774 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   17774:	e3a03000 	mov	r3, #0
   17778:	e92d4070 	push	{r4, r5, r6, lr}
   1777c:	e1510003 	cmp	r1, r3
   17780:	e0814002 	add	r4, r1, r2
   17784:	e8800006 	stm	r0, {r1, r2}
   17788:	e5801010 	str	r1, [r0, #16]
   1778c:	e5801018 	str	r1, [r0, #24]
   17790:	e580400c 	str	r4, [r0, #12]
   17794:	e5c03008 	strb	r3, [r0, #8]
   17798:	e5803014 	str	r3, [r0, #20]
   1779c:	0a00003b 	beq	17890 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x11c>
   177a0:	e2423004 	sub	r3, r2, #4
   177a4:	e3530f7f 	cmp	r3, #508	; 0x1fc
   177a8:	88bd8070 	pophi	{r4, r5, r6, pc}
   177ac:	e5d13000 	ldrb	r3, [r1]
   177b0:	e3530009 	cmp	r3, #9
   177b4:	18bd8070 	popne	{r4, r5, r6, pc}
   177b8:	e5d1c001 	ldrb	ip, [r1, #1]
   177bc:	e35c0002 	cmp	ip, #2
   177c0:	18bd8070 	popne	{r4, r5, r6, pc}
   177c4:	e5d13002 	ldrb	r3, [r1, #2]
   177c8:	e5d1e003 	ldrb	lr, [r1, #3]
   177cc:	e183340e 	orr	r3, r3, lr, lsl #8
   177d0:	e1530002 	cmp	r3, r2
   177d4:	88bd8070 	pophi	{r4, r5, r6, pc}
   177d8:	30814003 	addcc	r4, r1, r3
   177dc:	e2813002 	add	r3, r1, #2
   177e0:	3580400c 	strcc	r4, [r0, #12]
   177e4:	e1540003 	cmp	r4, r3
   177e8:	9a00002c 	bls	178a0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x12c>
   177ec:	e3a05000 	mov	r5, #0
   177f0:	e3a02009 	mov	r2, #9
   177f4:	e1a0e005 	mov	lr, r5
   177f8:	ea000008 	b	17820 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xac>
   177fc:	e35c0002 	cmp	ip, #2
   17800:	0a00001e 	beq	17880 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x10c>
   17804:	e2832002 	add	r2, r3, #2
   17808:	e1540002 	cmp	r4, r2
   1780c:	9a000024 	bls	178a4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x130>
   17810:	e1a01003 	mov	r1, r3
   17814:	e1a0e00c 	mov	lr, ip
   17818:	e5d32000 	ldrb	r2, [r3]
   1781c:	e5d3c001 	ldrb	ip, [r3, #1]
   17820:	e0813002 	add	r3, r1, r2
   17824:	e1530004 	cmp	r3, r4
   17828:	8a00000a 	bhi	17858 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   1782c:	e35c0004 	cmp	ip, #4
   17830:	0a00000a 	beq	17860 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xec>
   17834:	e35c0005 	cmp	ip, #5
   17838:	1affffef 	bne	177fc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x88>
   1783c:	e31e00fd 	tst	lr, #253	; 0xfd
   17840:	0a000004 	beq	17858 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   17844:	e3550000 	cmp	r5, #0
   17848:	13a0e009 	movne	lr, #9
   1784c:	03a0e007 	moveq	lr, #7
   17850:	e152000e 	cmp	r2, lr
   17854:	0affffea 	beq	17804 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x90>
   17858:	e5801018 	str	r1, [r0, #24]
   1785c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17860:	e35e0000 	cmp	lr, #0
   17864:	0afffffb 	beq	17858 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   17868:	e5d15005 	ldrb	r5, [r1, #5]
   1786c:	e3a0e009 	mov	lr, #9
   17870:	e2455001 	sub	r5, r5, #1
   17874:	e16f5f15 	clz	r5, r5
   17878:	e1a052a5 	lsr	r5, r5, #5
   1787c:	eafffff3 	b	17850 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xdc>
   17880:	e35e0000 	cmp	lr, #0
   17884:	1afffff3 	bne	17858 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   17888:	e3a0e009 	mov	lr, #9
   1788c:	eaffffef 	b	17850 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xdc>
   17890:	e3a02024 	mov	r2, #36	; 0x24
   17894:	e59f101c 	ldr	r1, [pc, #28]	; 178b8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x144>
   17898:	e59f001c 	ldr	r0, [pc, #28]	; 178bc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x148>
   1789c:	eb003378 	bl	24684 <assertion_failed>
   178a0:	e1a03001 	mov	r3, r1
   178a4:	e1530004 	cmp	r3, r4
   178a8:	03a03001 	moveq	r3, #1
   178ac:	15803018 	strne	r3, [r0, #24]
   178b0:	05c03008 	strbeq	r3, [r0, #8]
   178b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   178b8:	00041124 	.word	0x00041124
   178bc:	00041138 	.word	0x00041138

000178c0 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   178c0:	e3510000 	cmp	r1, #0
   178c4:	e92d4010 	push	{r4, lr}
   178c8:	0a00000e 	beq	17908 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x48>
   178cc:	e591e000 	ldr	lr, [r1]
   178d0:	e591c004 	ldr	ip, [r1, #4]
   178d4:	e5d12008 	ldrb	r2, [r1, #8]
   178d8:	e591400c 	ldr	r4, [r1, #12]
   178dc:	e580e000 	str	lr, [r0]
   178e0:	e580c004 	str	ip, [r0, #4]
   178e4:	e591e010 	ldr	lr, [r1, #16]
   178e8:	e591c014 	ldr	ip, [r1, #20]
   178ec:	e5c02008 	strb	r2, [r0, #8]
   178f0:	e5912018 	ldr	r2, [r1, #24]
   178f4:	e580400c 	str	r4, [r0, #12]
   178f8:	e580e010 	str	lr, [r0, #16]
   178fc:	e580c014 	str	ip, [r0, #20]
   17900:	e5802018 	str	r2, [r0, #24]
   17904:	e8bd8010 	pop	{r4, pc}
   17908:	e3a02082 	mov	r2, #130	; 0x82
   1790c:	e59f1004 	ldr	r1, [pc, #4]	; 17918 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x58>
   17910:	e59f0004 	ldr	r0, [pc, #4]	; 1791c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x5c>
   17914:	eb00335a 	bl	24684 <assertion_failed>
   17918:	00041124 	.word	0x00041124
   1791c:	00041148 	.word	0x00041148

00017920 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   17920:	e12fff1e 	bx	lr

00017924 <CUSBConfigurationParser::IsValid() const>:
   17924:	e5d00008 	ldrb	r0, [r0, #8]
   17928:	e12fff1e 	bx	lr

0001792c <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   1792c:	e5d03008 	ldrb	r3, [r0, #8]
   17930:	e92d4010 	push	{r4, lr}
   17934:	e3530000 	cmp	r3, #0
   17938:	0a00001d 	beq	179b4 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x88>
   1793c:	e5903010 	ldr	r3, [r0, #16]
   17940:	e590c00c 	ldr	ip, [r0, #12]
   17944:	e153000c 	cmp	r3, ip
   17948:	3a000008 	bcc	17970 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x44>
   1794c:	ea000016 	b	179ac <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x80>
   17950:	e3510005 	cmp	r1, #5
   17954:	03520004 	cmpeq	r2, #4
   17958:	0a000013 	beq	179ac <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x80>
   1795c:	e1520001 	cmp	r2, r1
   17960:	0a00000c 	beq	17998 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x6c>
   17964:	e153000c 	cmp	r3, ip
   17968:	e5803010 	str	r3, [r0, #16]
   1796c:	0a00000e 	beq	179ac <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x80>
   17970:	e5d3e000 	ldrb	lr, [r3]
   17974:	e1a04003 	mov	r4, r3
   17978:	e5d32001 	ldrb	r2, [r3, #1]
   1797c:	e083300e 	add	r3, r3, lr
   17980:	e153000c 	cmp	r3, ip
   17984:	9afffff1 	bls	17950 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x24>
   17988:	e3a020a9 	mov	r2, #169	; 0xa9
   1798c:	e59f1030 	ldr	r1, [pc, #48]	; 179c4 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x98>
   17990:	e59f0030 	ldr	r0, [pc, #48]	; 179c8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   17994:	eb00333a 	bl	24684 <assertion_failed>
   17998:	e5803010 	str	r3, [r0, #16]
   1799c:	e5804018 	str	r4, [r0, #24]
   179a0:	e5804014 	str	r4, [r0, #20]
   179a4:	e1a00004 	mov	r0, r4
   179a8:	e8bd8010 	pop	{r4, pc}
   179ac:	e3a04000 	mov	r4, #0
   179b0:	eafffffa 	b	179a0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x74>
   179b4:	e3a0209f 	mov	r2, #159	; 0x9f
   179b8:	e59f1004 	ldr	r1, [pc, #4]	; 179c4 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x98>
   179bc:	e59f0008 	ldr	r0, [pc, #8]	; 179cc <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa0>
   179c0:	eb00332f 	bl	24684 <assertion_failed>
   179c4:	00041124 	.word	0x00041124
   179c8:	00041158 	.word	0x00041158
   179cc:	0003f208 	.word	0x0003f208

000179d0 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   179d0:	e5d03008 	ldrb	r3, [r0, #8]
   179d4:	e92d4010 	push	{r4, lr}
   179d8:	e3530000 	cmp	r3, #0
   179dc:	0a000006 	beq	179fc <CUSBConfigurationParser::GetCurrentDescriptor()+0x2c>
   179e0:	e5900014 	ldr	r0, [r0, #20]
   179e4:	e3500000 	cmp	r0, #0
   179e8:	18bd8010 	popne	{r4, pc}
   179ec:	e3a020c8 	mov	r2, #200	; 0xc8
   179f0:	e59f1014 	ldr	r1, [pc, #20]	; 17a0c <CUSBConfigurationParser::GetCurrentDescriptor()+0x3c>
   179f4:	e59f0014 	ldr	r0, [pc, #20]	; 17a10 <CUSBConfigurationParser::GetCurrentDescriptor()+0x40>
   179f8:	eb003321 	bl	24684 <assertion_failed>
   179fc:	e3a020c7 	mov	r2, #199	; 0xc7
   17a00:	e59f1004 	ldr	r1, [pc, #4]	; 17a0c <CUSBConfigurationParser::GetCurrentDescriptor()+0x3c>
   17a04:	e59f0008 	ldr	r0, [pc, #8]	; 17a14 <CUSBConfigurationParser::GetCurrentDescriptor()+0x44>
   17a08:	eb00331d 	bl	24684 <assertion_failed>
   17a0c:	00041124 	.word	0x00041124
   17a10:	00041174 	.word	0x00041174
   17a14:	0003f208 	.word	0x0003f208

00017a18 <CUSBConfigurationParser::Error(char const*) const>:
   17a18:	e92d4030 	push	{r4, r5, lr}
   17a1c:	e2515000 	subs	r5, r1, #0
   17a20:	e24dd00c 	sub	sp, sp, #12
   17a24:	0a00000e 	beq	17a64 <CUSBConfigurationParser::Error(char const*) const+0x4c>
   17a28:	e1a04000 	mov	r4, r0
   17a2c:	eb003bfc 	bl	26a24 <CLogger::Get()>
   17a30:	e5941000 	ldr	r1, [r4]
   17a34:	e5942018 	ldr	r2, [r4, #24]
   17a38:	e59f3034 	ldr	r3, [pc, #52]	; 17a74 <CUSBConfigurationParser::Error(char const*) const+0x5c>
   17a3c:	e0422001 	sub	r2, r2, r1
   17a40:	e58d2000 	str	r2, [sp]
   17a44:	e1a01005 	mov	r1, r5
   17a48:	e3a02001 	mov	r2, #1
   17a4c:	eb003b36 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17a50:	e1c400d0 	ldrd	r0, [r4]
   17a54:	e1a02005 	mov	r2, r5
   17a58:	e28dd00c 	add	sp, sp, #12
   17a5c:	e8bd4030 	pop	{r4, r5, lr}
   17a60:	ea003477 	b	24c44 <debug_hexdump(void const*, unsigned int, char const*)>
   17a64:	e3a020cf 	mov	r2, #207	; 0xcf
   17a68:	e59f1008 	ldr	r1, [pc, #8]	; 17a78 <CUSBConfigurationParser::Error(char const*) const+0x60>
   17a6c:	e59f0008 	ldr	r0, [pc, #8]	; 17a7c <CUSBConfigurationParser::Error(char const*) const+0x64>
   17a70:	eb003303 	bl	24684 <assertion_failed>
   17a74:	00041190 	.word	0x00041190
   17a78:	00041124 	.word	0x00041124
   17a7c:	0003fc40 	.word	0x0003fc40

00017a80 <CUSBGamePadDevice::GetInitialState()>:
   17a80:	e2800024 	add	r0, r0, #36	; 0x24
   17a84:	e12fff1e 	bx	lr

00017a88 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   17a88:	e3510000 	cmp	r1, #0
   17a8c:	012fff1e 	bxeq	lr
   17a90:	e2803f4a 	add	r3, r0, #296	; 0x128
   17a94:	e1d330b0 	ldrh	r3, [r3]
   17a98:	e92d4070 	push	{r4, r5, r6, lr}
   17a9c:	e1530002 	cmp	r3, r2
   17aa0:	e1a04000 	mov	r4, r0
   17aa4:	18bd8070 	popne	{r4, r5, r6, pc}
   17aa8:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   17aac:	e3530000 	cmp	r3, #0
   17ab0:	08bd8070 	popeq	{r4, r5, r6, pc}
   17ab4:	e1a05000 	mov	r5, r0
   17ab8:	e4953024 	ldr	r3, [r5], #36	; 0x24
   17abc:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   17ac0:	e12fff33 	blx	r3
   17ac4:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   17ac8:	e1a01005 	mov	r1, r5
   17acc:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   17ad0:	e2400001 	sub	r0, r0, #1
   17ad4:	e8bd4070 	pop	{r4, r5, r6, lr}
   17ad8:	e12fff13 	bx	r3

00017adc <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   17adc:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   17ae0:	e92d4010 	push	{r4, lr}
   17ae4:	e3530000 	cmp	r3, #0
   17ae8:	1a000006 	bne	17b08 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x2c>
   17aec:	e3510000 	cmp	r1, #0
   17af0:	e5801124 	str	r1, [r0, #292]	; 0x124
   17af4:	18bd8010 	popne	{r4, pc}
   17af8:	e3a0204d 	mov	r2, #77	; 0x4d
   17afc:	e59f1014 	ldr	r1, [pc, #20]	; 17b18 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x3c>
   17b00:	e59f0014 	ldr	r0, [pc, #20]	; 17b1c <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x40>
   17b04:	eb0032de 	bl	24684 <assertion_failed>
   17b08:	e3a0204b 	mov	r2, #75	; 0x4b
   17b0c:	e59f1004 	ldr	r1, [pc, #4]	; 17b18 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x3c>
   17b10:	e59f0008 	ldr	r0, [pc, #8]	; 17b20 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x44>
   17b14:	eb0032da 	bl	24684 <assertion_failed>
   17b18:	000411c0 	.word	0x000411c0
   17b1c:	000411e8 	.word	0x000411e8
   17b20:	000411d0 	.word	0x000411d0

00017b24 <CUSBGamePadDevice::Configure()>:
   17b24:	e92d4030 	push	{r4, r5, lr}
   17b28:	e2803f4a 	add	r3, r0, #296	; 0x128
   17b2c:	e1d310b0 	ldrh	r1, [r3]
   17b30:	e24dd00c 	sub	sp, sp, #12
   17b34:	e3510000 	cmp	r1, #0
   17b38:	0a00001a 	beq	17ba8 <CUSBGamePadDevice::Configure()+0x84>
   17b3c:	e1a04000 	mov	r4, r0
   17b40:	ebffe94a 	bl	12070 <CUSBHIDDevice::Configure(unsigned int)>
   17b44:	e2505000 	subs	r5, r0, #0
   17b48:	0a00000e 	beq	17b88 <CUSBGamePadDevice::Configure()+0x64>
   17b4c:	e59f2064 	ldr	r2, [pc, #100]	; 17bb8 <CUSBGamePadDevice::Configure()+0x94>
   17b50:	e5923000 	ldr	r3, [r2]
   17b54:	e584312c 	str	r3, [r4, #300]	; 0x12c
   17b58:	e2833001 	add	r3, r3, #1
   17b5c:	e5823000 	str	r3, [r2]
   17b60:	eb003589 	bl	2518c <CDeviceNameService::Get()>
   17b64:	e3a02000 	mov	r2, #0
   17b68:	e58d2000 	str	r2, [sp]
   17b6c:	e1a03004 	mov	r3, r4
   17b70:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   17b74:	e59f1040 	ldr	r1, [pc, #64]	; 17bbc <CUSBGamePadDevice::Configure()+0x98>
   17b78:	eb00358f 	bl	251bc <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   17b7c:	e1a00005 	mov	r0, r5
   17b80:	e28dd00c 	add	sp, sp, #12
   17b84:	e8bd8030 	pop	{r4, r5, pc}
   17b88:	eb003ba5 	bl	26a24 <CLogger::Get()>
   17b8c:	e3a02001 	mov	r2, #1
   17b90:	e59f3028 	ldr	r3, [pc, #40]	; 17bc0 <CUSBGamePadDevice::Configure()+0x9c>
   17b94:	e59f1028 	ldr	r1, [pc, #40]	; 17bc4 <CUSBGamePadDevice::Configure()+0xa0>
   17b98:	eb003ae3 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17b9c:	e1a00005 	mov	r0, r5
   17ba0:	e28dd00c 	add	sp, sp, #12
   17ba4:	e8bd8030 	pop	{r4, r5, pc}
   17ba8:	e3a02035 	mov	r2, #53	; 0x35
   17bac:	e59f1014 	ldr	r1, [pc, #20]	; 17bc8 <CUSBGamePadDevice::Configure()+0xa4>
   17bb0:	e59f0014 	ldr	r0, [pc, #20]	; 17bcc <CUSBGamePadDevice::Configure()+0xa8>
   17bb4:	eb0032b2 	bl	24684 <assertion_failed>
   17bb8:	0004783c 	.word	0x0004783c
   17bbc:	00041208 	.word	0x00041208
   17bc0:	0003e9b4 	.word	0x0003e9b4
   17bc4:	00041200 	.word	0x00041200
   17bc8:	000411c0 	.word	0x000411c0
   17bcc:	0003fee4 	.word	0x0003fee4

00017bd0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   17bd0:	e92d4010 	push	{r4, lr}
   17bd4:	e3a02000 	mov	r2, #0
   17bd8:	e1a04000 	mov	r4, r0
   17bdc:	ebffe8e2 	bl	11f6c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   17be0:	e3a01000 	mov	r1, #0
   17be4:	e59f2024 	ldr	r2, [pc, #36]	; 17c10 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x40>
   17be8:	e2843f4a 	add	r3, r4, #296	; 0x128
   17bec:	e5842000 	str	r2, [r4]
   17bf0:	e5841124 	str	r1, [r4, #292]	; 0x124
   17bf4:	e3a02c01 	mov	r2, #256	; 0x100
   17bf8:	e1c310b0 	strh	r1, [r3]
   17bfc:	e2840024 	add	r0, r4, #36	; 0x24
   17c00:	e584112c 	str	r1, [r4, #300]	; 0x12c
   17c04:	eb004876 	bl	29de4 <memset>
   17c08:	e1a00004 	mov	r0, r4
   17c0c:	e8bd8010 	pop	{r4, pc}
   17c10:	00041218 	.word	0x00041218

00017c14 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   17c14:	e92d4070 	push	{r4, r5, r6, lr}
   17c18:	e3a06000 	mov	r6, #0
   17c1c:	e1a04000 	mov	r4, r0
   17c20:	e59f502c 	ldr	r5, [pc, #44]	; 17c54 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x40>
   17c24:	e5806124 	str	r6, [r0, #292]	; 0x124
   17c28:	e2853018 	add	r3, r5, #24
   17c2c:	e5803000 	str	r3, [r0]
   17c30:	eb003555 	bl	2518c <CDeviceNameService::Get()>
   17c34:	e1a03006 	mov	r3, r6
   17c38:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   17c3c:	e2851008 	add	r1, r5, #8
   17c40:	eb003577 	bl	25224 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   17c44:	e1a00004 	mov	r0, r4
   17c48:	ebffe8dd 	bl	11fc4 <CUSBHIDDevice::~CUSBHIDDevice()>
   17c4c:	e1a00004 	mov	r0, r4
   17c50:	e8bd8070 	pop	{r4, r5, r6, pc}
   17c54:	00041200 	.word	0x00041200

00017c58 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   17c58:	e92d4010 	push	{r4, lr}
   17c5c:	e1a04000 	mov	r4, r0
   17c60:	ebffffeb 	bl	17c14 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   17c64:	e1a00004 	mov	r0, r4
   17c68:	e3a01e13 	mov	r1, #304	; 0x130
   17c6c:	eb004c99 	bl	2aed8 <operator delete(void*, unsigned int)>
   17c70:	e1a00004 	mov	r0, r4
   17c74:	e8bd8010 	pop	{r4, pc}

00017c78 <CUSBString::CUSBString(CUSBDevice*)>:
   17c78:	e3a03000 	mov	r3, #0
   17c7c:	e92d4070 	push	{r4, r5, r6, lr}
   17c80:	e880000a 	stm	r0, {r1, r3}
   17c84:	e1a04000 	mov	r4, r0
   17c88:	e3a00010 	mov	r0, #16
   17c8c:	eb004c83 	bl	2aea0 <operator new(unsigned int)>
   17c90:	e1a05000 	mov	r5, r0
   17c94:	eb003f52 	bl	279e4 <CString::CString()>
   17c98:	e5943000 	ldr	r3, [r4]
   17c9c:	e5845008 	str	r5, [r4, #8]
   17ca0:	e3530000 	cmp	r3, #0
   17ca4:	0a000001 	beq	17cb0 <CUSBString::CUSBString(CUSBDevice*)+0x38>
   17ca8:	e1a00004 	mov	r0, r4
   17cac:	e8bd8070 	pop	{r4, r5, r6, pc}
   17cb0:	e3a02023 	mov	r2, #35	; 0x23
   17cb4:	e59f1004 	ldr	r1, [pc, #4]	; 17cc0 <CUSBString::CUSBString(CUSBDevice*)+0x48>
   17cb8:	e59f0004 	ldr	r0, [pc, #4]	; 17cc4 <CUSBString::CUSBString(CUSBDevice*)+0x4c>
   17cbc:	eb003270 	bl	24684 <assertion_failed>
   17cc0:	0004125c 	.word	0x0004125c
   17cc4:	0003f428 	.word	0x0003f428

00017cc8 <CUSBString::CUSBString(CUSBString*)>:
   17cc8:	e3a03000 	mov	r3, #0
   17ccc:	e92d4070 	push	{r4, r5, r6, lr}
   17cd0:	e5803004 	str	r3, [r0, #4]
   17cd4:	e1a04000 	mov	r4, r0
   17cd8:	e3a00010 	mov	r0, #16
   17cdc:	e1a05001 	mov	r5, r1
   17ce0:	eb004c6e 	bl	2aea0 <operator new(unsigned int)>
   17ce4:	e1a06000 	mov	r6, r0
   17ce8:	eb003f3d 	bl	279e4 <CString::CString()>
   17cec:	e3550000 	cmp	r5, #0
   17cf0:	e5846008 	str	r6, [r4, #8]
   17cf4:	0a000016 	beq	17d54 <CUSBString::CUSBString(CUSBString*)+0x8c>
   17cf8:	e1c520d0 	ldrd	r2, [r5]
   17cfc:	e3530000 	cmp	r3, #0
   17d00:	e5842000 	str	r2, [r4]
   17d04:	0a000008 	beq	17d2c <CUSBString::CUSBString(CUSBString*)+0x64>
   17d08:	e5d30000 	ldrb	r0, [r3]
   17d0c:	eb004c69 	bl	2aeb8 <operator new[](unsigned int)>
   17d10:	e5951004 	ldr	r1, [r5, #4]
   17d14:	e5840004 	str	r0, [r4, #4]
   17d18:	e5d12000 	ldrb	r2, [r1]
   17d1c:	eb004a79 	bl	2a708 <memcpy>
   17d20:	e5943008 	ldr	r3, [r4, #8]
   17d24:	e3530000 	cmp	r3, #0
   17d28:	0a000005 	beq	17d44 <CUSBString::CUSBString(CUSBString*)+0x7c>
   17d2c:	e5953008 	ldr	r3, [r5, #8]
   17d30:	e3530000 	cmp	r3, #0
   17d34:	0a00000a 	beq	17d64 <CUSBString::CUSBString(CUSBString*)+0x9c>
   17d38:	e1a00004 	mov	r0, r4
   17d3c:	e5843008 	str	r3, [r4, #8]
   17d40:	e8bd8070 	pop	{r4, r5, r6, pc}
   17d44:	e3a02035 	mov	r2, #53	; 0x35
   17d48:	e59f1024 	ldr	r1, [pc, #36]	; 17d74 <CUSBString::CUSBString(CUSBString*)+0xac>
   17d4c:	e59f0024 	ldr	r0, [pc, #36]	; 17d78 <CUSBString::CUSBString(CUSBString*)+0xb0>
   17d50:	eb00324b 	bl	24684 <assertion_failed>
   17d54:	e3a0202b 	mov	r2, #43	; 0x2b
   17d58:	e59f1014 	ldr	r1, [pc, #20]	; 17d74 <CUSBString::CUSBString(CUSBString*)+0xac>
   17d5c:	e59f0018 	ldr	r0, [pc, #24]	; 17d7c <CUSBString::CUSBString(CUSBString*)+0xb4>
   17d60:	eb003247 	bl	24684 <assertion_failed>
   17d64:	e3a02036 	mov	r2, #54	; 0x36
   17d68:	e59f1004 	ldr	r1, [pc, #4]	; 17d74 <CUSBString::CUSBString(CUSBString*)+0xac>
   17d6c:	e59f000c 	ldr	r0, [pc, #12]	; 17d80 <CUSBString::CUSBString(CUSBString*)+0xb8>
   17d70:	eb003243 	bl	24684 <assertion_failed>
   17d74:	0004125c 	.word	0x0004125c
   17d78:	0004126c 	.word	0x0004126c
   17d7c:	0003f930 	.word	0x0003f930
   17d80:	0004127c 	.word	0x0004127c

00017d84 <CUSBString::~CUSBString()>:
   17d84:	e92d4010 	push	{r4, lr}
   17d88:	e1a04000 	mov	r4, r0
   17d8c:	e5900008 	ldr	r0, [r0, #8]
   17d90:	e3500000 	cmp	r0, #0
   17d94:	0a000002 	beq	17da4 <CUSBString::~CUSBString()+0x20>
   17d98:	e5903000 	ldr	r3, [r0]
   17d9c:	e5933004 	ldr	r3, [r3, #4]
   17da0:	e12fff33 	blx	r3
   17da4:	e3a03000 	mov	r3, #0
   17da8:	e5940004 	ldr	r0, [r4, #4]
   17dac:	e5843008 	str	r3, [r4, #8]
   17db0:	e1500003 	cmp	r0, r3
   17db4:	0a000000 	beq	17dbc <CUSBString::~CUSBString()+0x38>
   17db8:	eb004c45 	bl	2aed4 <operator delete[](void*)>
   17dbc:	e1a00004 	mov	r0, r4
   17dc0:	e8bd8010 	pop	{r4, pc}

00017dc4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   17dc4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dc8:	e2517000 	subs	r7, r1, #0
   17dcc:	e28db020 	add	fp, sp, #32
   17dd0:	e24dd014 	sub	sp, sp, #20
   17dd4:	0a000051 	beq	17f20 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x15c>
   17dd8:	e1a04000 	mov	r4, r0
   17ddc:	e5900004 	ldr	r0, [r0, #4]
   17de0:	e1a05002 	mov	r5, r2
   17de4:	e3500000 	cmp	r0, #0
   17de8:	0a000000 	beq	17df0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   17dec:	eb004c38 	bl	2aed4 <operator delete[](void*)>
   17df0:	e3a00004 	mov	r0, #4
   17df4:	eb004c2f 	bl	2aeb8 <operator new[](unsigned int)>
   17df8:	e5943000 	ldr	r3, [r4]
   17dfc:	e5840004 	str	r0, [r4, #4]
   17e00:	e3530000 	cmp	r3, #0
   17e04:	0a000049 	beq	17f30 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x16c>
   17e08:	e1a00003 	mov	r0, r3
   17e0c:	ebffd92e 	bl	e2cc <CUSBDevice::GetHost() const>
   17e10:	e1a06000 	mov	r6, r0
   17e14:	e5940000 	ldr	r0, [r4]
   17e18:	ebffd921 	bl	e2a4 <CUSBDevice::GetEndpoint0() const>
   17e1c:	e3a08080 	mov	r8, #128	; 0x80
   17e20:	e3a02004 	mov	r2, #4
   17e24:	e5943004 	ldr	r3, [r4, #4]
   17e28:	e1a01000 	mov	r1, r0
   17e2c:	e98d0104 	stmib	sp, {r2, r8}
   17e30:	e58d3000 	str	r3, [sp]
   17e34:	e1a00006 	mov	r0, r6
   17e38:	e1a03007 	mov	r3, r7
   17e3c:	e3a02003 	mov	r2, #3
   17e40:	e58d500c 	str	r5, [sp, #12]
   17e44:	ebffea70 	bl	1280c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17e48:	e3500000 	cmp	r0, #0
   17e4c:	ba000030 	blt	17f14 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17e50:	e5940004 	ldr	r0, [r4, #4]
   17e54:	e5d06000 	ldrb	r6, [r0]
   17e58:	e3560001 	cmp	r6, #1
   17e5c:	9a00002c 	bls	17f14 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17e60:	e3160001 	tst	r6, #1
   17e64:	1a00002a 	bne	17f14 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17e68:	e5d09001 	ldrb	r9, [r0, #1]
   17e6c:	e3590003 	cmp	r9, #3
   17e70:	1a000027 	bne	17f14 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17e74:	e3560004 	cmp	r6, #4
   17e78:	8a000030 	bhi	17f40 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x17c>
   17e7c:	e3560002 	cmp	r6, #2
   17e80:	0a000054 	beq	17fd8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x214>
   17e84:	e3560004 	cmp	r6, #4
   17e88:	024dd008 	subeq	sp, sp, #8
   17e8c:	03a0e001 	moveq	lr, #1
   17e90:	028d5010 	addeq	r5, sp, #16
   17e94:	1a000053 	bne	17fe8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x224>
   17e98:	e24e1001 	sub	r1, lr, #1
   17e9c:	e0811005 	add	r1, r1, r5
   17ea0:	e245c001 	sub	ip, r5, #1
   17ea4:	e2656001 	rsb	r6, r5, #1
   17ea8:	e086200c 	add	r2, r6, ip
   17eac:	e0802082 	add	r2, r0, r2, lsl #1
   17eb0:	e5d23002 	ldrb	r3, [r2, #2]
   17eb4:	e5d22003 	ldrb	r2, [r2, #3]
   17eb8:	e1833402 	orr	r3, r3, r2, lsl #8
   17ebc:	e2432020 	sub	r2, r3, #32
   17ec0:	e352005e 	cmp	r2, #94	; 0x5e
   17ec4:	83a0305f 	movhi	r3, #95	; 0x5f
   17ec8:	e5ec3001 	strb	r3, [ip, #1]!
   17ecc:	e15c0001 	cmp	ip, r1
   17ed0:	1afffff4 	bne	17ea8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xe4>
   17ed4:	e3a03000 	mov	r3, #0
   17ed8:	e5940008 	ldr	r0, [r4, #8]
   17edc:	e7c5300e 	strb	r3, [r5, lr]
   17ee0:	e1500003 	cmp	r0, r3
   17ee4:	0a000002 	beq	17ef4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x130>
   17ee8:	e5903000 	ldr	r3, [r0]
   17eec:	e5933004 	ldr	r3, [r3, #4]
   17ef0:	e12fff33 	blx	r3
   17ef4:	e3a00010 	mov	r0, #16
   17ef8:	eb004be8 	bl	2aea0 <operator new(unsigned int)>
   17efc:	e1a06000 	mov	r6, r0
   17f00:	e1a01005 	mov	r1, r5
   17f04:	eb003ebc 	bl	279fc <CString::CString(char const*)>
   17f08:	e3a00001 	mov	r0, #1
   17f0c:	e5846008 	str	r6, [r4, #8]
   17f10:	ea000000 	b	17f18 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x154>
   17f14:	e3a00000 	mov	r0, #0
   17f18:	e24bd020 	sub	sp, fp, #32
   17f1c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f20:	e3a02047 	mov	r2, #71	; 0x47
   17f24:	e59f10cc 	ldr	r1, [pc, #204]	; 17ff8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x234>
   17f28:	e59f00cc 	ldr	r0, [pc, #204]	; 17ffc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x238>
   17f2c:	eb0031d4 	bl	24684 <assertion_failed>
   17f30:	e3a0204d 	mov	r2, #77	; 0x4d
   17f34:	e59f10bc 	ldr	r1, [pc, #188]	; 17ff8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x234>
   17f38:	e59f00c0 	ldr	r0, [pc, #192]	; 18000 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x23c>
   17f3c:	eb0031d0 	bl	24684 <assertion_failed>
   17f40:	e3a01002 	mov	r1, #2
   17f44:	eb004be3 	bl	2aed8 <operator delete(void*, unsigned int)>
   17f48:	e1a00006 	mov	r0, r6
   17f4c:	eb004bd9 	bl	2aeb8 <operator new[](unsigned int)>
   17f50:	e1a03000 	mov	r3, r0
   17f54:	e5940000 	ldr	r0, [r4]
   17f58:	e5843004 	str	r3, [r4, #4]
   17f5c:	ebffd8da 	bl	e2cc <CUSBDevice::GetHost() const>
   17f60:	e1a0a000 	mov	sl, r0
   17f64:	e5940000 	ldr	r0, [r4]
   17f68:	ebffd8cd 	bl	e2a4 <CUSBDevice::GetEndpoint0() const>
   17f6c:	e594c004 	ldr	ip, [r4, #4]
   17f70:	e1a01000 	mov	r1, r0
   17f74:	e1a03007 	mov	r3, r7
   17f78:	e1a0000a 	mov	r0, sl
   17f7c:	e1a02009 	mov	r2, r9
   17f80:	e98d0140 	stmib	sp, {r6, r8}
   17f84:	e58d500c 	str	r5, [sp, #12]
   17f88:	e58dc000 	str	ip, [sp]
   17f8c:	ebffea1e 	bl	1280c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17f90:	e1560000 	cmp	r6, r0
   17f94:	1affffde 	bne	17f14 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17f98:	e5940004 	ldr	r0, [r4, #4]
   17f9c:	e5d03000 	ldrb	r3, [r0]
   17fa0:	e1530006 	cmp	r3, r6
   17fa4:	1affffda 	bne	17f14 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17fa8:	e5d02001 	ldrb	r2, [r0, #1]
   17fac:	e3520003 	cmp	r2, #3
   17fb0:	1affffd7 	bne	17f14 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17fb4:	e3130001 	tst	r3, #1
   17fb8:	1a00000a 	bne	17fe8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x224>
   17fbc:	e2433002 	sub	r3, r3, #2
   17fc0:	e1a0e0c3 	asr	lr, r3, #1
   17fc4:	e28e3008 	add	r3, lr, #8
   17fc8:	e3c33007 	bic	r3, r3, #7
   17fcc:	e04dd003 	sub	sp, sp, r3
   17fd0:	e28d5010 	add	r5, sp, #16
   17fd4:	eaffffaf 	b	17e98 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xd4>
   17fd8:	e3a02075 	mov	r2, #117	; 0x75
   17fdc:	e59f1014 	ldr	r1, [pc, #20]	; 17ff8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x234>
   17fe0:	e59f001c 	ldr	r0, [pc, #28]	; 18004 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x240>
   17fe4:	eb0031a6 	bl	24684 <assertion_failed>
   17fe8:	e3a02076 	mov	r2, #118	; 0x76
   17fec:	e59f1004 	ldr	r1, [pc, #4]	; 17ff8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x234>
   17ff0:	e59f0010 	ldr	r0, [pc, #16]	; 18008 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x244>
   17ff4:	eb0031a2 	bl	24684 <assertion_failed>
   17ff8:	0004125c 	.word	0x0004125c
   17ffc:	00041294 	.word	0x00041294
   18000:	0003f428 	.word	0x0003f428
   18004:	000412a0 	.word	0x000412a0
   18008:	000412bc 	.word	0x000412bc

0001800c <CUSBString::Get() const>:
   1800c:	e5900008 	ldr	r0, [r0, #8]
   18010:	ea003e8b 	b	27a44 <CString::operator char const*() const>

00018014 <CUSBString::GetLanguageID()>:
   18014:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   18018:	e1a06000 	mov	r6, r0
   1801c:	e24dd014 	sub	sp, sp, #20
   18020:	e3a00004 	mov	r0, #4
   18024:	eb004ba3 	bl	2aeb8 <operator new[](unsigned int)>
   18028:	e5963000 	ldr	r3, [r6]
   1802c:	e3530000 	cmp	r3, #0
   18030:	0a000057 	beq	18194 <CUSBString::GetLanguageID()+0x180>
   18034:	e1a04000 	mov	r4, r0
   18038:	e1a00003 	mov	r0, r3
   1803c:	ebffd8a2 	bl	e2cc <CUSBDevice::GetHost() const>
   18040:	e1a05000 	mov	r5, r0
   18044:	e5960000 	ldr	r0, [r6]
   18048:	ebffd895 	bl	e2a4 <CUSBDevice::GetEndpoint0() const>
   1804c:	e3a07080 	mov	r7, #128	; 0x80
   18050:	e3a03000 	mov	r3, #0
   18054:	e3a02004 	mov	r2, #4
   18058:	e1a01000 	mov	r1, r0
   1805c:	e98d0084 	stmib	sp, {r2, r7}
   18060:	e1a00005 	mov	r0, r5
   18064:	e3a02003 	mov	r2, #3
   18068:	e58d4000 	str	r4, [sp]
   1806c:	e58d300c 	str	r3, [sp, #12]
   18070:	ebffe9e5 	bl	1280c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   18074:	e3500000 	cmp	r0, #0
   18078:	ba00001e 	blt	180f8 <CUSBString::GetLanguageID()+0xe4>
   1807c:	e5d45000 	ldrb	r5, [r4]
   18080:	e3550003 	cmp	r5, #3
   18084:	9a00001b 	bls	180f8 <CUSBString::GetLanguageID()+0xe4>
   18088:	e2159001 	ands	r9, r5, #1
   1808c:	1a000019 	bne	180f8 <CUSBString::GetLanguageID()+0xe4>
   18090:	e5d48001 	ldrb	r8, [r4, #1]
   18094:	e3580003 	cmp	r8, #3
   18098:	1a000016 	bne	180f8 <CUSBString::GetLanguageID()+0xe4>
   1809c:	e3550004 	cmp	r5, #4
   180a0:	1a00001a 	bne	18110 <CUSBString::GetLanguageID()+0xfc>
   180a4:	e3a02000 	mov	r2, #0
   180a8:	e2455002 	sub	r5, r5, #2
   180ac:	e59f00fc 	ldr	r0, [pc, #252]	; 181b0 <CUSBString::GetLanguageID()+0x19c>
   180b0:	e1a030c5 	asr	r3, r5, #1
   180b4:	e0841082 	add	r1, r4, r2, lsl #1
   180b8:	e5d15002 	ldrb	r5, [r1, #2]
   180bc:	e5d11003 	ldrb	r1, [r1, #3]
   180c0:	e1855401 	orr	r5, r5, r1, lsl #8
   180c4:	e1550000 	cmp	r5, r0
   180c8:	0a000035 	beq	181a4 <CUSBString::GetLanguageID()+0x190>
   180cc:	e2822001 	add	r2, r2, #1
   180d0:	e1530002 	cmp	r3, r2
   180d4:	1afffff6 	bne	180b4 <CUSBString::GetLanguageID()+0xa0>
   180d8:	e5d45002 	ldrb	r5, [r4, #2]
   180dc:	e5d43003 	ldrb	r3, [r4, #3]
   180e0:	e1a00004 	mov	r0, r4
   180e4:	e1855403 	orr	r5, r5, r3, lsl #8
   180e8:	eb004b79 	bl	2aed4 <operator delete[](void*)>
   180ec:	e1a00005 	mov	r0, r5
   180f0:	e28dd014 	add	sp, sp, #20
   180f4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   180f8:	e1a00004 	mov	r0, r4
   180fc:	eb004b74 	bl	2aed4 <operator delete[](void*)>
   18100:	e59f50a8 	ldr	r5, [pc, #168]	; 181b0 <CUSBString::GetLanguageID()+0x19c>
   18104:	e1a00005 	mov	r0, r5
   18108:	e28dd014 	add	sp, sp, #20
   1810c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18110:	e1a00004 	mov	r0, r4
   18114:	eb004b6e 	bl	2aed4 <operator delete[](void*)>
   18118:	e1a00005 	mov	r0, r5
   1811c:	eb004b65 	bl	2aeb8 <operator new[](unsigned int)>
   18120:	e1a04000 	mov	r4, r0
   18124:	e5960000 	ldr	r0, [r6]
   18128:	ebffd867 	bl	e2cc <CUSBDevice::GetHost() const>
   1812c:	e1a03000 	mov	r3, r0
   18130:	e5960000 	ldr	r0, [r6]
   18134:	e1a06003 	mov	r6, r3
   18138:	ebffd859 	bl	e2a4 <CUSBDevice::GetEndpoint0() const>
   1813c:	e1a03009 	mov	r3, r9
   18140:	e1a01000 	mov	r1, r0
   18144:	e1a02008 	mov	r2, r8
   18148:	e1a00006 	mov	r0, r6
   1814c:	e98d02a0 	stmib	sp, {r5, r7, r9}
   18150:	e58d4000 	str	r4, [sp]
   18154:	ebffe9ac 	bl	1280c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   18158:	e1550000 	cmp	r5, r0
   1815c:	1affffe5 	bne	180f8 <CUSBString::GetLanguageID()+0xe4>
   18160:	e5d43000 	ldrb	r3, [r4]
   18164:	e1530005 	cmp	r3, r5
   18168:	1affffe2 	bne	180f8 <CUSBString::GetLanguageID()+0xe4>
   1816c:	e5d42001 	ldrb	r2, [r4, #1]
   18170:	e3520003 	cmp	r2, #3
   18174:	1affffdf 	bne	180f8 <CUSBString::GetLanguageID()+0xe4>
   18178:	e3130001 	tst	r3, #1
   1817c:	e1a05003 	mov	r5, r3
   18180:	0affffc7 	beq	180a4 <CUSBString::GetLanguageID()+0x90>
   18184:	e3a020c8 	mov	r2, #200	; 0xc8
   18188:	e59f1024 	ldr	r1, [pc, #36]	; 181b4 <CUSBString::GetLanguageID()+0x1a0>
   1818c:	e59f0024 	ldr	r0, [pc, #36]	; 181b8 <CUSBString::GetLanguageID()+0x1a4>
   18190:	eb00313b 	bl	24684 <assertion_failed>
   18194:	e3a0209a 	mov	r2, #154	; 0x9a
   18198:	e59f1014 	ldr	r1, [pc, #20]	; 181b4 <CUSBString::GetLanguageID()+0x1a0>
   1819c:	e59f0018 	ldr	r0, [pc, #24]	; 181bc <CUSBString::GetLanguageID()+0x1a8>
   181a0:	eb003137 	bl	24684 <assertion_failed>
   181a4:	e1a00004 	mov	r0, r4
   181a8:	eb004b49 	bl	2aed4 <operator delete[](void*)>
   181ac:	eaffffd4 	b	18104 <CUSBString::GetLanguageID()+0xf0>
   181b0:	00000409 	.word	0x00000409
   181b4:	0004125c 	.word	0x0004125c
   181b8:	000412e0 	.word	0x000412e0
   181bc:	0003f428 	.word	0x0003f428

000181c0 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   181c0:	e3a03000 	mov	r3, #0
   181c4:	e92d4010 	push	{r4, lr}
   181c8:	e1a04000 	mov	r4, r0
   181cc:	e5803000 	str	r3, [r0]
   181d0:	e5803004 	str	r3, [r0, #4]
   181d4:	e5803008 	str	r3, [r0, #8]
   181d8:	e1c030bc 	strh	r3, [r0, #12]
   181dc:	e5803010 	str	r3, [r0, #16]
   181e0:	e2800014 	add	r0, r0, #20
   181e4:	eb00017d 	bl	187e0 <CKeyMap::CKeyMap()>
   181e8:	e1a00004 	mov	r0, r4
   181ec:	e8bd8010 	pop	{r4, pc}

000181f0 <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   181f0:	e3a03000 	mov	r3, #0
   181f4:	e92d4010 	push	{r4, lr}
   181f8:	e1a04000 	mov	r4, r0
   181fc:	e5803000 	str	r3, [r0]
   18200:	e5803004 	str	r3, [r0, #4]
   18204:	e5803008 	str	r3, [r0, #8]
   18208:	e2800014 	add	r0, r0, #20
   1820c:	eb0000ae 	bl	184cc <CKeyMap::~CKeyMap()>
   18210:	e1a00004 	mov	r0, r4
   18214:	e8bd8010 	pop	{r4, pc}

00018218 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   18218:	e3510000 	cmp	r1, #0
   1821c:	0a000001 	beq	18228 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x10>
   18220:	e5801000 	str	r1, [r0]
   18224:	e12fff1e 	bx	lr
   18228:	e3a0202f 	mov	r2, #47	; 0x2f
   1822c:	e92d4010 	push	{r4, lr}
   18230:	e59f1004 	ldr	r1, [pc, #4]	; 1823c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x24>
   18234:	e59f0004 	ldr	r0, [pc, #4]	; 18240 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x28>
   18238:	eb003111 	bl	24684 <assertion_failed>
   1823c:	00041304 	.word	0x00041304
   18240:	0004131c 	.word	0x0004131c

00018244 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   18244:	e3510000 	cmp	r1, #0
   18248:	0a000001 	beq	18254 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x10>
   1824c:	e5801004 	str	r1, [r0, #4]
   18250:	e12fff1e 	bx	lr
   18254:	e3a02035 	mov	r2, #53	; 0x35
   18258:	e92d4010 	push	{r4, lr}
   1825c:	e59f1004 	ldr	r1, [pc, #4]	; 18268 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x24>
   18260:	e59f0004 	ldr	r0, [pc, #4]	; 1826c <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x28>
   18264:	eb003106 	bl	24684 <assertion_failed>
   18268:	00041304 	.word	0x00041304
   1826c:	00041334 	.word	0x00041334

00018270 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   18270:	e3510000 	cmp	r1, #0
   18274:	0a000001 	beq	18280 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x10>
   18278:	e5801008 	str	r1, [r0, #8]
   1827c:	e12fff1e 	bx	lr
   18280:	e3a0203b 	mov	r2, #59	; 0x3b
   18284:	e92d4010 	push	{r4, lr}
   18288:	e59f1004 	ldr	r1, [pc, #4]	; 18294 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x24>
   1828c:	e59f0004 	ldr	r0, [pc, #4]	; 18298 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x28>
   18290:	eb0030fb 	bl	24684 <assertion_failed>
   18294:	00041304 	.word	0x00041304
   18298:	00041350 	.word	0x00041350

0001829c <CKeyboardBehaviour::GetLEDStatus() const>:
   1829c:	e2800014 	add	r0, r0, #20
   182a0:	ea000121 	b	1872c <CKeyMap::GetLEDStatus() const>

000182a4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   182a4:	e92d4030 	push	{r4, r5, lr}
   182a8:	e2805014 	add	r5, r0, #20
   182ac:	e5d0200c 	ldrb	r2, [r0, #12]
   182b0:	e24dd014 	sub	sp, sp, #20
   182b4:	e1a04000 	mov	r4, r0
   182b8:	e1a00005 	mov	r0, r5
   182bc:	e58d2004 	str	r2, [sp, #4]
   182c0:	eb0000a4 	bl	18558 <CKeyMap::Translate(unsigned char, unsigned char)>
   182c4:	e59f30a4 	ldr	r3, [pc, #164]	; 18370 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xcc>
   182c8:	e59d2004 	ldr	r2, [sp, #4]
   182cc:	e1500003 	cmp	r0, r3
   182d0:	8a000009 	bhi	182fc <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x58>
   182d4:	e243300c 	sub	r3, r3, #12
   182d8:	e1500003 	cmp	r0, r3
   182dc:	8a00001b 	bhi	18350 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xac>
   182e0:	e2403e13 	sub	r3, r0, #304	; 0x130
   182e4:	e2433003 	sub	r3, r3, #3
   182e8:	e6ff3073 	uxth	r3, r3
   182ec:	e3530002 	cmp	r3, #2
   182f0:	8a00000a 	bhi	18320 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x7c>
   182f4:	e28dd014 	add	sp, sp, #20
   182f8:	e8bd8030 	pop	{r4, r5, pc}
   182fc:	e59f3070 	ldr	r3, [pc, #112]	; 18374 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xd0>
   18300:	e1500003 	cmp	r0, r3
   18304:	1a000005 	bne	18320 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x7c>
   18308:	e5943008 	ldr	r3, [r4, #8]
   1830c:	e3530000 	cmp	r3, #0
   18310:	0afffff7 	beq	182f4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x50>
   18314:	e12fff33 	blx	r3
   18318:	e28dd014 	add	sp, sp, #20
   1831c:	e8bd8030 	pop	{r4, r5, pc}
   18320:	e1a01000 	mov	r1, r0
   18324:	e28d300c 	add	r3, sp, #12
   18328:	e1a00005 	mov	r0, r5
   1832c:	eb0000cd 	bl	18668 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   18330:	e3500000 	cmp	r0, #0
   18334:	0affffee 	beq	182f4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x50>
   18338:	e5943000 	ldr	r3, [r4]
   1833c:	e3530000 	cmp	r3, #0
   18340:	0affffeb 	beq	182f4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x50>
   18344:	e12fff33 	blx	r3
   18348:	e28dd014 	add	sp, sp, #20
   1834c:	e8bd8030 	pop	{r4, r5, pc}
   18350:	e5943004 	ldr	r3, [r4, #4]
   18354:	e3530000 	cmp	r3, #0
   18358:	0affffe5 	beq	182f4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x50>
   1835c:	e2400f4d 	sub	r0, r0, #308	; 0x134
   18360:	e2400002 	sub	r0, r0, #2
   18364:	e12fff33 	blx	r3
   18368:	e28dd014 	add	sp, sp, #20
   1836c:	e8bd8030 	pop	{r4, r5, pc}
   18370:	00000141 	.word	0x00000141
   18374:	00000142 	.word	0x00000142

00018378 <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   18378:	e2212080 	eor	r2, r1, #128	; 0x80
   1837c:	e3520007 	cmp	r2, #7
   18380:	e241c080 	sub	ip, r1, #128	; 0x80
   18384:	8a000004 	bhi	1839c <CKeyboardBehaviour::KeyPressed(unsigned char)+0x24>
   18388:	e3a01001 	mov	r1, #1
   1838c:	e5d0300c 	ldrb	r3, [r0, #12]
   18390:	e1833c11 	orr	r3, r3, r1, lsl ip
   18394:	e5c0300c 	strb	r3, [r0, #12]
   18398:	e12fff1e 	bx	lr
   1839c:	e5d0c00d 	ldrb	ip, [r0, #13]
   183a0:	e15c0001 	cmp	ip, r1
   183a4:	012fff1e 	bxeq	lr
   183a8:	e5c0100d 	strb	r1, [r0, #13]
   183ac:	eaffffbc 	b	182a4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

000183b0 <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   183b0:	e2213080 	eor	r3, r1, #128	; 0x80
   183b4:	e3530007 	cmp	r3, #7
   183b8:	e92d4010 	push	{r4, lr}
   183bc:	e1a04000 	mov	r4, r0
   183c0:	8a000005 	bhi	183dc <CKeyboardBehaviour::KeyReleased(unsigned char)+0x2c>
   183c4:	e2412080 	sub	r2, r1, #128	; 0x80
   183c8:	e3a01001 	mov	r1, #1
   183cc:	e5d0300c 	ldrb	r3, [r0, #12]
   183d0:	e1c33211 	bic	r3, r3, r1, lsl r2
   183d4:	e5c0300c 	strb	r3, [r0, #12]
   183d8:	e8bd8010 	pop	{r4, pc}
   183dc:	e5d0300d 	ldrb	r3, [r0, #13]
   183e0:	e1530001 	cmp	r3, r1
   183e4:	18bd8010 	popne	{r4, pc}
   183e8:	e5903010 	ldr	r3, [r0, #16]
   183ec:	e3530000 	cmp	r3, #0
   183f0:	1a000002 	bne	18400 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   183f4:	e3a03000 	mov	r3, #0
   183f8:	e5c4300d 	strb	r3, [r4, #13]
   183fc:	e8bd8010 	pop	{r4, pc}
   18400:	eb00466b 	bl	29db4 <CTimer::Get()>
   18404:	e5941010 	ldr	r1, [r4, #16]
   18408:	eb0044f9 	bl	297f4 <CTimer::CancelKernelTimer(unsigned int)>
   1840c:	e3a03000 	mov	r3, #0
   18410:	e5843010 	str	r3, [r4, #16]
   18414:	eafffff6 	b	183f4 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

00018418 <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   18418:	e92d4010 	push	{r4, lr}
   1841c:	e5903010 	ldr	r3, [r0, #16]
   18420:	e24dd008 	sub	sp, sp, #8
   18424:	e1530001 	cmp	r3, r1
   18428:	1a000013 	bne	1847c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x64>
   1842c:	e5d0100d 	ldrb	r1, [r0, #13]
   18430:	e1a04000 	mov	r4, r0
   18434:	e3510000 	cmp	r1, #0
   18438:	1a000001 	bne	18444 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x2c>
   1843c:	e28dd008 	add	sp, sp, #8
   18440:	e8bd8010 	pop	{r4, pc}
   18444:	ebffff96 	bl	182a4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   18448:	eb004659 	bl	29db4 <CTimer::Get()>
   1844c:	e3a03000 	mov	r3, #0
   18450:	e3a01008 	mov	r1, #8
   18454:	e59f2030 	ldr	r2, [pc, #48]	; 1848c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x74>
   18458:	e58d4000 	str	r4, [sp]
   1845c:	eb004492 	bl	296ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   18460:	e3500000 	cmp	r0, #0
   18464:	e5840010 	str	r0, [r4, #16]
   18468:	1afffff3 	bne	1843c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x24>
   1846c:	e3a020b7 	mov	r2, #183	; 0xb7
   18470:	e59f1018 	ldr	r1, [pc, #24]	; 18490 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x78>
   18474:	e59f0018 	ldr	r0, [pc, #24]	; 18494 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x7c>
   18478:	eb003081 	bl	24684 <assertion_failed>
   1847c:	e3a020b0 	mov	r2, #176	; 0xb0
   18480:	e59f1008 	ldr	r1, [pc, #8]	; 18490 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x78>
   18484:	e59f000c 	ldr	r0, [pc, #12]	; 18498 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x80>
   18488:	eb00307d 	bl	24684 <assertion_failed>
   1848c:	0001849c 	.word	0x0001849c
   18490:	00041304 	.word	0x00041304
   18494:	00040750 	.word	0x00040750
   18498:	00041368 	.word	0x00041368

0001849c <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   1849c:	e3520000 	cmp	r2, #0
   184a0:	0a000002 	beq	184b0 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x14>
   184a4:	e1a01000 	mov	r1, r0
   184a8:	e1a00002 	mov	r0, r2
   184ac:	eaffffd9 	b	18418 <CKeyboardBehaviour::TimerHandler(unsigned int)>
   184b0:	e3a020be 	mov	r2, #190	; 0xbe
   184b4:	e92d4010 	push	{r4, lr}
   184b8:	e59f1004 	ldr	r1, [pc, #4]	; 184c4 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x28>
   184bc:	e59f0004 	ldr	r0, [pc, #4]	; 184c8 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x2c>
   184c0:	eb00306f 	bl	24684 <assertion_failed>
   184c4:	00041304 	.word	0x00041304
   184c8:	0003ea38 	.word	0x0003ea38

000184cc <CKeyMap::~CKeyMap()>:
   184cc:	e12fff1e 	bx	lr

000184d0 <CKeyMap::ClearTable(unsigned char)>:
   184d0:	e3510003 	cmp	r1, #3
   184d4:	8a000008 	bhi	184fc <CKeyMap::ClearTable(unsigned char)+0x2c>
   184d8:	e3a0c000 	mov	ip, #0
   184dc:	e2802b01 	add	r2, r0, #1024	; 0x400
   184e0:	e0822081 	add	r2, r2, r1, lsl #1
   184e4:	e0803081 	add	r3, r0, r1, lsl #1
   184e8:	e0c3c0b8 	strh	ip, [r3], #8
   184ec:	e1530002 	cmp	r3, r2
   184f0:	1afffffc 	bne	184e8 <CKeyMap::ClearTable(unsigned char)+0x18>
   184f4:	e3a00001 	mov	r0, #1
   184f8:	e12fff1e 	bx	lr
   184fc:	e3a00000 	mov	r0, #0
   18500:	e12fff1e 	bx	lr

00018504 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   18504:	e6afc072 	sxtb	ip, r2
   18508:	e35c0000 	cmp	ip, #0
   1850c:	c3a0c000 	movgt	ip, #0
   18510:	d3a0c001 	movle	ip, #1
   18514:	e3510003 	cmp	r1, #3
   18518:	838cc001 	orrhi	ip, ip, #1
   1851c:	e35c0000 	cmp	ip, #0
   18520:	1a000008 	bne	18548 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x44>
   18524:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   18528:	e59fe024 	ldr	lr, [pc, #36]	; 18554 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x50>
   1852c:	e153000e 	cmp	r3, lr
   18530:	93a0c001 	movls	ip, #1
   18534:	90811102 	addls	r1, r1, r2, lsl #2
   18538:	91a01081 	lslls	r1, r1, #1
   1853c:	918030b1 	strhls	r3, [r0, r1]
   18540:	e1a0000c 	mov	r0, ip
   18544:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18548:	e3a0c000 	mov	ip, #0
   1854c:	e1a0000c 	mov	r0, ip
   18550:	e12fff1e 	bx	lr
   18554:	00000132 	.word	0x00000132

00018558 <CKeyMap::Translate(unsigned char, unsigned char)>:
   18558:	e6af3071 	sxtb	r3, r1
   1855c:	e3530000 	cmp	r3, #0
   18560:	e1a0c000 	mov	ip, r0
   18564:	da000027 	ble	18608 <CKeyMap::Translate(unsigned char, unsigned char)+0xb0>
   18568:	e1a03181 	lsl	r3, r1, #3
   1856c:	e19030b3 	ldrh	r3, [r0, r3]
   18570:	e3530f42 	cmp	r3, #264	; 0x108
   18574:	0a00001d 	beq	185f0 <CKeyMap::Translate(unsigned char, unsigned char)+0x98>
   18578:	e2430f43 	sub	r0, r3, #268	; 0x10c
   1857c:	e2400003 	sub	r0, r0, #3
   18580:	e350000b 	cmp	r0, #11
   18584:	8a000001 	bhi	18590 <CKeyMap::Translate(unsigned char, unsigned char)+0x38>
   18588:	e3120004 	tst	r2, #4
   1858c:	1a000021 	bne	18618 <CKeyMap::Translate(unsigned char, unsigned char)+0xc0>
   18590:	e312008c 	tst	r2, #140	; 0x8c
   18594:	1a00001b 	bne	18608 <CKeyMap::Translate(unsigned char, unsigned char)+0xb0>
   18598:	e2413053 	sub	r3, r1, #83	; 0x53
   1859c:	e3530010 	cmp	r3, #16
   185a0:	9a00001a 	bls	18610 <CKeyMap::Translate(unsigned char, unsigned char)+0xb8>
   185a4:	e3120040 	tst	r2, #64	; 0x40
   185a8:	0a000027 	beq	1864c <CKeyMap::Translate(unsigned char, unsigned char)+0xf4>
   185ac:	e3120022 	tst	r2, #34	; 0x22
   185b0:	13a03003 	movne	r3, #3
   185b4:	03a03002 	moveq	r3, #2
   185b8:	e0831101 	add	r1, r3, r1, lsl #2
   185bc:	e1a01081 	lsl	r1, r1, #1
   185c0:	e19c00b1 	ldrh	r0, [ip, r1]
   185c4:	e59f3090 	ldr	r3, [pc, #144]	; 1865c <CKeyMap::Translate(unsigned char, unsigned char)+0x104>
   185c8:	e1500003 	cmp	r0, r3
   185cc:	0a000019 	beq	18638 <CKeyMap::Translate(unsigned char, unsigned char)+0xe0>
   185d0:	e3500e12 	cmp	r0, #288	; 0x120
   185d4:	0a000012 	beq	18624 <CKeyMap::Translate(unsigned char, unsigned char)+0xcc>
   185d8:	e3500f47 	cmp	r0, #284	; 0x11c
   185dc:	05dc3400 	ldrbeq	r3, [ip, #1024]	; 0x400
   185e0:	02800017 	addeq	r0, r0, #23
   185e4:	02233001 	eoreq	r3, r3, #1
   185e8:	05cc3400 	strbeq	r3, [ip, #1024]	; 0x400
   185ec:	e12fff1e 	bx	lr
   185f0:	e3120011 	tst	r2, #17
   185f4:	0affffe5 	beq	18590 <CKeyMap::Translate(unsigned char, unsigned char)+0x38>
   185f8:	e3120004 	tst	r2, #4
   185fc:	0affffe3 	beq	18590 <CKeyMap::Translate(unsigned char, unsigned char)+0x38>
   18600:	e59f0058 	ldr	r0, [pc, #88]	; 18660 <CKeyMap::Translate(unsigned char, unsigned char)+0x108>
   18604:	e12fff1e 	bx	lr
   18608:	e3a00000 	mov	r0, #0
   1860c:	e12fff1e 	bx	lr
   18610:	e5dc3401 	ldrb	r3, [ip, #1025]	; 0x401
   18614:	eaffffe7 	b	185b8 <CKeyMap::Translate(unsigned char, unsigned char)+0x60>
   18618:	e2830027 	add	r0, r3, #39	; 0x27
   1861c:	e6ff0070 	uxth	r0, r0
   18620:	e12fff1e 	bx	lr
   18624:	e5dc3401 	ldrb	r3, [ip, #1025]	; 0x401
   18628:	e3a00f4d 	mov	r0, #308	; 0x134
   1862c:	e2233001 	eor	r3, r3, #1
   18630:	e5cc3401 	strb	r3, [ip, #1025]	; 0x401
   18634:	e12fff1e 	bx	lr
   18638:	e5dc3402 	ldrb	r3, [ip, #1026]	; 0x402
   1863c:	e59f0020 	ldr	r0, [pc, #32]	; 18664 <CKeyMap::Translate(unsigned char, unsigned char)+0x10c>
   18640:	e2233001 	eor	r3, r3, #1
   18644:	e5cc3402 	strb	r3, [ip, #1026]	; 0x402
   18648:	e12fff1e 	bx	lr
   1864c:	e3120022 	tst	r2, #34	; 0x22
   18650:	13a03001 	movne	r3, #1
   18654:	03a03000 	moveq	r3, #0
   18658:	eaffffd6 	b	185b8 <CKeyMap::Translate(unsigned char, unsigned char)+0x60>
   1865c:	0000011e 	.word	0x0000011e
   18660:	00000142 	.word	0x00000142
   18664:	00000135 	.word	0x00000135

00018668 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   18668:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1866c:	e241c021 	sub	ip, r1, #33	; 0x21
   18670:	e59fe0ac 	ldr	lr, [pc, #172]	; 18724 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xbc>
   18674:	e6ffc07c 	uxth	ip, ip
   18678:	e15c000e 	cmp	ip, lr
   1867c:	8a000023 	bhi	18710 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa8>
   18680:	e1a0c000 	mov	ip, r0
   18684:	e2410c01 	sub	r0, r1, #256	; 0x100
   18688:	e6ffe070 	uxth	lr, r0
   1868c:	e35e0032 	cmp	lr, #50	; 0x32
   18690:	9a000020 	bls	18718 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   18694:	e3120011 	tst	r2, #17
   18698:	e6af2071 	sxtb	r2, r1
   1869c:	0a000009 	beq	186c8 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x60>
   186a0:	e6ef1071 	uxtb	r1, r1
   186a4:	e2412061 	sub	r2, r1, #97	; 0x61
   186a8:	e3520019 	cmp	r2, #25
   186ac:	8a000017 	bhi	18710 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa8>
   186b0:	e3a02000 	mov	r2, #0
   186b4:	e2411060 	sub	r1, r1, #96	; 0x60
   186b8:	e1a00003 	mov	r0, r3
   186bc:	e5c31000 	strb	r1, [r3]
   186c0:	e5c32001 	strb	r2, [r3, #1]
   186c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   186c8:	e5dc0400 	ldrb	r0, [ip, #1024]	; 0x400
   186cc:	e3500000 	cmp	r0, #0
   186d0:	0a000009 	beq	186fc <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x94>
   186d4:	e6ef1071 	uxtb	r1, r1
   186d8:	e2410041 	sub	r0, r1, #65	; 0x41
   186dc:	e3500019 	cmp	r0, #25
   186e0:	92811020 	addls	r1, r1, #32
   186e4:	96af2071 	sxtbls	r2, r1
   186e8:	9a000003 	bls	186fc <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x94>
   186ec:	e2410061 	sub	r0, r1, #97	; 0x61
   186f0:	e3500019 	cmp	r0, #25
   186f4:	92411020 	subls	r1, r1, #32
   186f8:	96af2071 	sxtbls	r2, r1
   186fc:	e3a01000 	mov	r1, #0
   18700:	e1a00003 	mov	r0, r3
   18704:	e5c32000 	strb	r2, [r3]
   18708:	e5c31001 	strb	r1, [r3, #1]
   1870c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18710:	e3a00000 	mov	r0, #0
   18714:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18718:	e59f3008 	ldr	r3, [pc, #8]	; 18728 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xc0>
   1871c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   18720:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18724:	00000111 	.word	0x00000111
   18728:	00047840 	.word	0x00047840

0001872c <CKeyMap::GetLEDStatus() const>:
   1872c:	e5d03400 	ldrb	r3, [r0, #1024]	; 0x400
   18730:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   18734:	e3530000 	cmp	r3, #0
   18738:	13a03002 	movne	r3, #2
   1873c:	03a03000 	moveq	r3, #0
   18740:	e3520000 	cmp	r2, #0
   18744:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   18748:	13833001 	orrne	r3, r3, #1
   1874c:	e3520000 	cmp	r2, #0
   18750:	13833004 	orrne	r3, r3, #4
   18754:	e1a00003 	mov	r0, r3
   18758:	e12fff1e 	bx	lr

0001875c <CKeyMap::LookupDefaultMap(char const*)>:
   1875c:	e92d4070 	push	{r4, r5, r6, lr}
   18760:	e59f4064 	ldr	r4, [pc, #100]	; 187cc <CKeyMap::LookupDefaultMap(char const*)+0x70>
   18764:	e1a06000 	mov	r6, r0
   18768:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   1876c:	e3500000 	cmp	r0, #0
   18770:	0a000013 	beq	187c4 <CKeyMap::LookupDefaultMap(char const*)+0x68>
   18774:	e3560000 	cmp	r6, #0
   18778:	13a05000 	movne	r5, #0
   1877c:	128440d0 	addne	r4, r4, #208	; 0xd0
   18780:	1a000004 	bne	18798 <CKeyMap::LookupDefaultMap(char const*)+0x3c>
   18784:	ea00000a 	b	187b4 <CKeyMap::LookupDefaultMap(char const*)+0x58>
   18788:	e4940004 	ldr	r0, [r4], #4
   1878c:	e2855001 	add	r5, r5, #1
   18790:	e3500000 	cmp	r0, #0
   18794:	0a00000a 	beq	187c4 <CKeyMap::LookupDefaultMap(char const*)+0x68>
   18798:	e1a01006 	mov	r1, r6
   1879c:	eb0045e8 	bl	29f44 <strcmp>
   187a0:	e3500000 	cmp	r0, #0
   187a4:	1afffff7 	bne	18788 <CKeyMap::LookupDefaultMap(char const*)+0x2c>
   187a8:	e59f0020 	ldr	r0, [pc, #32]	; 187d0 <CKeyMap::LookupDefaultMap(char const*)+0x74>
   187ac:	e0800505 	add	r0, r0, r5, lsl #10
   187b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   187b4:	e59f2018 	ldr	r2, [pc, #24]	; 187d4 <CKeyMap::LookupDefaultMap(char const*)+0x78>
   187b8:	e59f1018 	ldr	r1, [pc, #24]	; 187d8 <CKeyMap::LookupDefaultMap(char const*)+0x7c>
   187bc:	e59f0018 	ldr	r0, [pc, #24]	; 187dc <CKeyMap::LookupDefaultMap(char const*)+0x80>
   187c0:	eb002faf 	bl	24684 <assertion_failed>
   187c4:	e3a00000 	mov	r0, #0
   187c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   187cc:	00047840 	.word	0x00047840
   187d0:	00041484 	.word	0x00041484
   187d4:	0000013f 	.word	0x0000013f
   187d8:	0004137c 	.word	0x0004137c
   187dc:	00041388 	.word	0x00041388

000187e0 <CKeyMap::CKeyMap()>:
   187e0:	e3a01c01 	mov	r1, #256	; 0x100
   187e4:	e3a03000 	mov	r3, #0
   187e8:	e2802b01 	add	r2, r0, #1024	; 0x400
   187ec:	e92d4010 	push	{r4, lr}
   187f0:	e1c210b0 	strh	r1, [r2]
   187f4:	e5c03402 	strb	r3, [r0, #1026]	; 0x402
   187f8:	e1a04000 	mov	r4, r0
   187fc:	eb00364a 	bl	2612c <CKernelOptions::Get()>
   18800:	eb00363a 	bl	260f0 <CKernelOptions::GetKeyMap() const>
   18804:	e3500000 	cmp	r0, #0
   18808:	0a00000f 	beq	1884c <CKeyMap::CKeyMap()+0x6c>
   1880c:	ebffffd2 	bl	1875c <CKeyMap::LookupDefaultMap(char const*)>
   18810:	e2501000 	subs	r1, r0, #0
   18814:	0a000004 	beq	1882c <CKeyMap::CKeyMap()+0x4c>
   18818:	e3a02b01 	mov	r2, #1024	; 0x400
   1881c:	e1a00004 	mov	r0, r4
   18820:	eb0047b8 	bl	2a708 <memcpy>
   18824:	e1a00004 	mov	r0, r4
   18828:	e8bd8010 	pop	{r4, pc}
   1882c:	e59f0028 	ldr	r0, [pc, #40]	; 1885c <CKeyMap::CKeyMap()+0x7c>
   18830:	ebffffc9 	bl	1875c <CKeyMap::LookupDefaultMap(char const*)>
   18834:	e2501000 	subs	r1, r0, #0
   18838:	1afffff6 	bne	18818 <CKeyMap::CKeyMap()+0x38>
   1883c:	e3a02080 	mov	r2, #128	; 0x80
   18840:	e59f1018 	ldr	r1, [pc, #24]	; 18860 <CKeyMap::CKeyMap()+0x80>
   18844:	e59f0018 	ldr	r0, [pc, #24]	; 18864 <CKeyMap::CKeyMap()+0x84>
   18848:	eb002f8d 	bl	24684 <assertion_failed>
   1884c:	e3a0207a 	mov	r2, #122	; 0x7a
   18850:	e59f1008 	ldr	r1, [pc, #8]	; 18860 <CKeyMap::CKeyMap()+0x80>
   18854:	e59f000c 	ldr	r0, [pc, #12]	; 18868 <CKeyMap::CKeyMap()+0x88>
   18858:	eb002f89 	bl	24684 <assertion_failed>
   1885c:	00041398 	.word	0x00041398
   18860:	0004137c 	.word	0x0004137c
   18864:	0004139c 	.word	0x0004139c
   18868:	00041388 	.word	0x00041388

0001886c <CMouseDevice::~CMouseDevice()>:
   1886c:	e92d4070 	push	{r4, r5, r6, lr}
   18870:	e3a06000 	mov	r6, #0
   18874:	e1a04000 	mov	r4, r0
   18878:	e59f5034 	ldr	r5, [pc, #52]	; 188b4 <CMouseDevice::~CMouseDevice()+0x48>
   1887c:	e5806020 	str	r6, [r0, #32]
   18880:	e2853008 	add	r3, r5, #8
   18884:	e5803000 	str	r3, [r0]
   18888:	eb00323f 	bl	2518c <CDeviceNameService::Get()>
   1888c:	e1a03006 	mov	r3, r6
   18890:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   18894:	e2851020 	add	r1, r5, #32
   18898:	eb003261 	bl	25224 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1889c:	e2840004 	add	r0, r4, #4
   188a0:	eb00005e 	bl	18a20 <CMouseBehaviour::~CMouseBehaviour()>
   188a4:	e1a00004 	mov	r0, r4
   188a8:	eb00314e 	bl	24de8 <CDevice::~CDevice()>
   188ac:	e1a00004 	mov	r0, r4
   188b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   188b4:	00042c90 	.word	0x00042c90

000188b8 <CMouseDevice::~CMouseDevice()>:
   188b8:	e92d4010 	push	{r4, lr}
   188bc:	e1a04000 	mov	r4, r0
   188c0:	ebffffe9 	bl	1886c <CMouseDevice::~CMouseDevice()>
   188c4:	e1a00004 	mov	r0, r4
   188c8:	e3a01028 	mov	r1, #40	; 0x28
   188cc:	eb004981 	bl	2aed8 <operator delete(void*, unsigned int)>
   188d0:	e1a00004 	mov	r0, r4
   188d4:	e8bd8010 	pop	{r4, pc}

000188d8 <CMouseDevice::CMouseDevice()>:
   188d8:	e92d4070 	push	{r4, r5, r6, lr}
   188dc:	e1a04000 	mov	r4, r0
   188e0:	e24dd008 	sub	sp, sp, #8
   188e4:	eb00314d 	bl	24e20 <CDevice::CDevice()>
   188e8:	e1a00004 	mov	r0, r4
   188ec:	e3a06000 	mov	r6, #0
   188f0:	e59f5044 	ldr	r5, [pc, #68]	; 1893c <CMouseDevice::CMouseDevice()+0x64>
   188f4:	e2853008 	add	r3, r5, #8
   188f8:	e4803004 	str	r3, [r0], #4
   188fc:	eb00003e 	bl	189fc <CMouseBehaviour::CMouseBehaviour()>
   18900:	e59f2038 	ldr	r2, [pc, #56]	; 18940 <CMouseDevice::CMouseDevice()+0x68>
   18904:	e5846020 	str	r6, [r4, #32]
   18908:	e5923000 	ldr	r3, [r2]
   1890c:	e5843024 	str	r3, [r4, #36]	; 0x24
   18910:	e2833001 	add	r3, r3, #1
   18914:	e5823000 	str	r3, [r2]
   18918:	eb00321b 	bl	2518c <CDeviceNameService::Get()>
   1891c:	e58d6000 	str	r6, [sp]
   18920:	e1a03004 	mov	r3, r4
   18924:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   18928:	e2851020 	add	r1, r5, #32
   1892c:	eb003222 	bl	251bc <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   18930:	e1a00004 	mov	r0, r4
   18934:	e28dd008 	add	sp, sp, #8
   18938:	e8bd8070 	pop	{r4, r5, r6, pc}
   1893c:	00042c90 	.word	0x00042c90
   18940:	00047928 	.word	0x00047928

00018944 <CMouseDevice::Setup(unsigned int, unsigned int)>:
   18944:	e2800004 	add	r0, r0, #4
   18948:	ea000035 	b	18a24 <CMouseBehaviour::Setup(unsigned int, unsigned int)>

0001894c <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   1894c:	e2800004 	add	r0, r0, #4
   18950:	ea00007b 	b	18b44 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>

00018954 <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   18954:	e2800004 	add	r0, r0, #4
   18958:	ea000102 	b	18d68 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

0001895c <CMouseDevice::ShowCursor(bool)>:
   1895c:	e2800004 	add	r0, r0, #4
   18960:	ea000124 	b	18df8 <CMouseBehaviour::ShowCursor(bool)>

00018964 <CMouseDevice::UpdateCursor()>:
   18964:	e5903020 	ldr	r3, [r0, #32]
   18968:	e3530000 	cmp	r3, #0
   1896c:	112fff1e 	bxne	lr
   18970:	e2800004 	add	r0, r0, #4
   18974:	ea00013a 	b	18e64 <CMouseBehaviour::UpdateCursor()>

00018978 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))>:
   18978:	e5903020 	ldr	r3, [r0, #32]
   1897c:	e92d4010 	push	{r4, lr}
   18980:	e3530000 	cmp	r3, #0
   18984:	1a000006 	bne	189a4 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x2c>
   18988:	e3510000 	cmp	r1, #0
   1898c:	e5801020 	str	r1, [r0, #32]
   18990:	18bd8010 	popne	{r4, pc}
   18994:	e3a0204a 	mov	r2, #74	; 0x4a
   18998:	e59f1014 	ldr	r1, [pc, #20]	; 189b4 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x3c>
   1899c:	e59f0014 	ldr	r0, [pc, #20]	; 189b8 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x40>
   189a0:	eb002f37 	bl	24684 <assertion_failed>
   189a4:	e3a02048 	mov	r2, #72	; 0x48
   189a8:	e59f1004 	ldr	r1, [pc, #4]	; 189b4 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x3c>
   189ac:	e59f0008 	ldr	r0, [pc, #8]	; 189bc <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x44>
   189b0:	eb002f33 	bl	24684 <assertion_failed>
   189b4:	00042c84 	.word	0x00042c84
   189b8:	000411e8 	.word	0x000411e8
   189bc:	000411d0 	.word	0x000411d0

000189c0 <CMouseDevice::ReportHandler(unsigned int, int, int)>:
   189c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   189c4:	e1a04000 	mov	r4, r0
   189c8:	e2800004 	add	r0, r0, #4
   189cc:	e1a07003 	mov	r7, r3
   189d0:	e1a05001 	mov	r5, r1
   189d4:	e1a06002 	mov	r6, r2
   189d8:	eb00006b 	bl	18b8c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>
   189dc:	e5943020 	ldr	r3, [r4, #32]
   189e0:	e3530000 	cmp	r3, #0
   189e4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   189e8:	e1a02007 	mov	r2, r7
   189ec:	e1a01006 	mov	r1, r6
   189f0:	e1a00005 	mov	r0, r5
   189f4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   189f8:	e12fff13 	bx	r3

000189fc <CMouseBehaviour::CMouseBehaviour()>:
   189fc:	e3a02000 	mov	r2, #0
   18a00:	e5802000 	str	r2, [r0]
   18a04:	e5802004 	str	r2, [r0, #4]
   18a08:	e5802008 	str	r2, [r0, #8]
   18a0c:	e580200c 	str	r2, [r0, #12]
   18a10:	e1c021b0 	strh	r2, [r0, #16]
   18a14:	e5802014 	str	r2, [r0, #20]
   18a18:	e5802018 	str	r2, [r0, #24]
   18a1c:	e12fff1e 	bx	lr

00018a20 <CMouseBehaviour::~CMouseBehaviour()>:
   18a20:	e12fff1e 	bx	lr

00018a24 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   18a24:	e92d4010 	push	{r4, lr}
   18a28:	e5903000 	ldr	r3, [r0]
   18a2c:	e24dd038 	sub	sp, sp, #56	; 0x38
   18a30:	e3530000 	cmp	r3, #0
   18a34:	1a00002b 	bne	18ae8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xc4>
   18a38:	e3510000 	cmp	r1, #0
   18a3c:	e5801000 	str	r1, [r0]
   18a40:	0a00002c 	beq	18af8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xd4>
   18a44:	e5904004 	ldr	r4, [r0, #4]
   18a48:	e3540000 	cmp	r4, #0
   18a4c:	1a00002d 	bne	18b08 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xe4>
   18a50:	e3520000 	cmp	r2, #0
   18a54:	e5802004 	str	r2, [r0, #4]
   18a58:	0a00002e 	beq	18b18 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xf4>
   18a5c:	e2813001 	add	r3, r1, #1
   18a60:	e2822001 	add	r2, r2, #1
   18a64:	e1a030a3 	lsr	r3, r3, #1
   18a68:	e1a020a2 	lsr	r2, r2, #1
   18a6c:	e1a01004 	mov	r1, r4
   18a70:	e5803008 	str	r3, [r0, #8]
   18a74:	e580200c 	str	r2, [r0, #12]
   18a78:	e28d000c 	add	r0, sp, #12
   18a7c:	eb002f21 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   18a80:	e3a03018 	mov	r3, #24
   18a84:	e3a0c010 	mov	ip, #16
   18a88:	e59f1098 	ldr	r1, [pc, #152]	; 18b28 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x104>
   18a8c:	e58d3000 	str	r3, [sp]
   18a90:	e3c11103 	bic	r1, r1, #-1073741824	; 0xc0000000
   18a94:	e3811101 	orr	r1, r1, #1073741824	; 0x40000000
   18a98:	e3a03024 	mov	r3, #36	; 0x24
   18a9c:	e28d2014 	add	r2, sp, #20
   18aa0:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   18aa4:	e28d000c 	add	r0, sp, #12
   18aa8:	e59f107c 	ldr	r1, [pc, #124]	; 18b2c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x108>
   18aac:	e58d4028 	str	r4, [sp, #40]	; 0x28
   18ab0:	e58d4030 	str	r4, [sp, #48]	; 0x30
   18ab4:	e58d4034 	str	r4, [sp, #52]	; 0x34
   18ab8:	e58dc020 	str	ip, [sp, #32]
   18abc:	e58dc024 	str	ip, [sp, #36]	; 0x24
   18ac0:	eb002f1c 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   18ac4:	e2504000 	subs	r4, r0, #0
   18ac8:	159d4020 	ldrne	r4, [sp, #32]
   18acc:	e28d000c 	add	r0, sp, #12
   18ad0:	116f4f14 	clzne	r4, r4
   18ad4:	11a042a4 	lsrne	r4, r4, #5
   18ad8:	eb002f11 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   18adc:	e1a00004 	mov	r0, r4
   18ae0:	e28dd038 	add	sp, sp, #56	; 0x38
   18ae4:	e8bd8010 	pop	{r4, pc}
   18ae8:	e3a0204c 	mov	r2, #76	; 0x4c
   18aec:	e59f103c 	ldr	r1, [pc, #60]	; 18b30 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18af0:	e59f003c 	ldr	r0, [pc, #60]	; 18b34 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x110>
   18af4:	eb002ee2 	bl	24684 <assertion_failed>
   18af8:	e3a0204e 	mov	r2, #78	; 0x4e
   18afc:	e59f102c 	ldr	r1, [pc, #44]	; 18b30 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18b00:	e59f0030 	ldr	r0, [pc, #48]	; 18b38 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x114>
   18b04:	eb002ede 	bl	24684 <assertion_failed>
   18b08:	e3a02050 	mov	r2, #80	; 0x50
   18b0c:	e59f101c 	ldr	r1, [pc, #28]	; 18b30 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18b10:	e59f0024 	ldr	r0, [pc, #36]	; 18b3c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x118>
   18b14:	eb002eda 	bl	24684 <assertion_failed>
   18b18:	e3a02052 	mov	r2, #82	; 0x52
   18b1c:	e59f100c 	ldr	r1, [pc, #12]	; 18b30 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18b20:	e59f0018 	ldr	r0, [pc, #24]	; 18b40 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x11c>
   18b24:	eb002ed6 	bl	24684 <assertion_failed>
   18b28:	00042d70 	.word	0x00042d70
   18b2c:	00008010 	.word	0x00008010
   18b30:	00042cb8 	.word	0x00042cb8
   18b34:	00042ccc 	.word	0x00042ccc
   18b38:	00042ce0 	.word	0x00042ce0
   18b3c:	00042cf4 	.word	0x00042cf4
   18b40:	00042d0c 	.word	0x00042d0c

00018b44 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   18b44:	e5903018 	ldr	r3, [r0, #24]
   18b48:	e92d4010 	push	{r4, lr}
   18b4c:	e3530000 	cmp	r3, #0
   18b50:	1a000006 	bne	18b70 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x2c>
   18b54:	e3510000 	cmp	r1, #0
   18b58:	e5801018 	str	r1, [r0, #24]
   18b5c:	18bd8010 	popne	{r4, pc}
   18b60:	e3a02070 	mov	r2, #112	; 0x70
   18b64:	e59f1014 	ldr	r1, [pc, #20]	; 18b80 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x3c>
   18b68:	e59f0014 	ldr	r0, [pc, #20]	; 18b84 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x40>
   18b6c:	eb002ec4 	bl	24684 <assertion_failed>
   18b70:	e3a0206e 	mov	r2, #110	; 0x6e
   18b74:	e59f1004 	ldr	r1, [pc, #4]	; 18b80 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x3c>
   18b78:	e59f0008 	ldr	r0, [pc, #8]	; 18b88 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x44>
   18b7c:	eb002ec0 	bl	24684 <assertion_failed>
   18b80:	00042cb8 	.word	0x00042cb8
   18b84:	00040fe8 	.word	0x00040fe8
   18b88:	00042d20 	.word	0x00042d20

00018b8c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>:
   18b8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18b90:	e1a04000 	mov	r4, r0
   18b94:	e5900000 	ldr	r0, [r0]
   18b98:	e3500000 	cmp	r0, #0
   18b9c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   18ba0:	e1a05001 	mov	r5, r1
   18ba4:	e5941004 	ldr	r1, [r4, #4]
   18ba8:	e3510000 	cmp	r1, #0
   18bac:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   18bb0:	e59fc134 	ldr	ip, [pc, #308]	; 18cec <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x160>
   18bb4:	e0822182 	add	r2, r2, r2, lsl #3
   18bb8:	e1a02082 	lsl	r2, r2, #1
   18bbc:	e0c6e29c 	smull	lr, r6, ip, r2
   18bc0:	e0833183 	add	r3, r3, r3, lsl #3
   18bc4:	e1a03083 	lsl	r3, r3, #1
   18bc8:	e0cce39c 	smull	lr, ip, ip, r3
   18bcc:	e1a02fc2 	asr	r2, r2, #31
   18bd0:	e594e008 	ldr	lr, [r4, #8]
   18bd4:	e0622146 	rsb	r2, r2, r6, asr #2
   18bd8:	e082200e 	add	r2, r2, lr
   18bdc:	e1a03fc3 	asr	r3, r3, #31
   18be0:	e1500002 	cmp	r0, r2
   18be4:	e594000c 	ldr	r0, [r4, #12]
   18be8:	e063314c 	rsb	r3, r3, ip, asr #2
   18bec:	e0803003 	add	r3, r0, r3
   18bf0:	9a000031 	bls	18cbc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x130>
   18bf4:	e1510003 	cmp	r1, r3
   18bf8:	e1c420f8 	strd	r2, [r4, #8]
   18bfc:	8a000035 	bhi	18cd8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x14c>
   18c00:	e152000e 	cmp	r2, lr
   18c04:	e584000c 	str	r0, [r4, #12]
   18c08:	0a000008 	beq	18c30 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa4>
   18c0c:	e3a03001 	mov	r3, #1
   18c10:	e5946018 	ldr	r6, [r4, #24]
   18c14:	e5c43010 	strb	r3, [r4, #16]
   18c18:	e3560000 	cmp	r6, #0
   18c1c:	0a000024 	beq	18cb4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   18c20:	e1a01005 	mov	r1, r5
   18c24:	e3a00000 	mov	r0, #0
   18c28:	e594300c 	ldr	r3, [r4, #12]
   18c2c:	e12fff36 	blx	r6
   18c30:	e5943014 	ldr	r3, [r4, #20]
   18c34:	e1530005 	cmp	r3, r5
   18c38:	0a00001d 	beq	18cb4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   18c3c:	e5942018 	ldr	r2, [r4, #24]
   18c40:	e3520000 	cmp	r2, #0
   18c44:	0a00001a 	beq	18cb4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   18c48:	e3a06000 	mov	r6, #0
   18c4c:	e3a07001 	mov	r7, #1
   18c50:	e1a01617 	lsl	r1, r7, r6
   18c54:	e1110003 	tst	r1, r3
   18c58:	0a00000c 	beq	18c90 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x104>
   18c5c:	e1150001 	tst	r5, r1
   18c60:	1a000003 	bne	18c74 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe8>
   18c64:	e1c420d8 	ldrd	r2, [r4, #8]
   18c68:	e3a00002 	mov	r0, #2
   18c6c:	e5948018 	ldr	r8, [r4, #24]
   18c70:	e12fff38 	blx	r8
   18c74:	e2866001 	add	r6, r6, #1
   18c78:	e3560003 	cmp	r6, #3
   18c7c:	0a00000c 	beq	18cb4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   18c80:	e5943014 	ldr	r3, [r4, #20]
   18c84:	e1a01617 	lsl	r1, r7, r6
   18c88:	e1110003 	tst	r1, r3
   18c8c:	1afffff2 	bne	18c5c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xd0>
   18c90:	e1150001 	tst	r5, r1
   18c94:	0afffff6 	beq	18c74 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe8>
   18c98:	e1c420d8 	ldrd	r2, [r4, #8]
   18c9c:	e3a00001 	mov	r0, #1
   18ca0:	e5948018 	ldr	r8, [r4, #24]
   18ca4:	e2866001 	add	r6, r6, #1
   18ca8:	e12fff38 	blx	r8
   18cac:	e3560003 	cmp	r6, #3
   18cb0:	1afffff2 	bne	18c80 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xf4>
   18cb4:	e5845014 	str	r5, [r4, #20]
   18cb8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18cbc:	e1510003 	cmp	r1, r3
   18cc0:	e584300c 	str	r3, [r4, #12]
   18cc4:	9a000006 	bls	18ce4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x158>
   18cc8:	e1500003 	cmp	r0, r3
   18ccc:	11a0200e 	movne	r2, lr
   18cd0:	1affffcd 	bne	18c0c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x80>
   18cd4:	eaffffd5 	b	18c30 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa4>
   18cd8:	e152000e 	cmp	r2, lr
   18cdc:	1affffca 	bne	18c0c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x80>
   18ce0:	eafffff8 	b	18cc8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x13c>
   18ce4:	e584000c 	str	r0, [r4, #12]
   18ce8:	eaffffd0 	b	18c30 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa4>
   18cec:	66666667 	.word	0x66666667

00018cf0 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   18cf0:	e92d4070 	push	{r4, r5, r6, lr}
   18cf4:	e24dd030 	sub	sp, sp, #48	; 0x30
   18cf8:	e1a05000 	mov	r5, r0
   18cfc:	e1a04001 	mov	r4, r1
   18d00:	e28d000c 	add	r0, sp, #12
   18d04:	e3a01000 	mov	r1, #0
   18d08:	e1a06002 	mov	r6, r2
   18d0c:	eb002e7d 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   18d10:	e3a03010 	mov	r3, #16
   18d14:	e3a0c001 	mov	ip, #1
   18d18:	e59f1044 	ldr	r1, [pc, #68]	; 18d64 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)+0x74>
   18d1c:	e58d3000 	str	r3, [sp]
   18d20:	e28d2014 	add	r2, sp, #20
   18d24:	e3a0301c 	mov	r3, #28
   18d28:	e28d000c 	add	r0, sp, #12
   18d2c:	e58d4028 	str	r4, [sp, #40]	; 0x28
   18d30:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   18d34:	e58d6020 	str	r6, [sp, #32]
   18d38:	e58d5024 	str	r5, [sp, #36]	; 0x24
   18d3c:	eb002e7d 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   18d40:	e2504000 	subs	r4, r0, #0
   18d44:	159d4020 	ldrne	r4, [sp, #32]
   18d48:	e28d000c 	add	r0, sp, #12
   18d4c:	116f4f14 	clzne	r4, r4
   18d50:	11a042a4 	lsrne	r4, r4, #5
   18d54:	eb002e72 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   18d58:	e1a00004 	mov	r0, r4
   18d5c:	e28dd030 	add	sp, sp, #48	; 0x30
   18d60:	e8bd8070 	pop	{r4, r5, r6, pc}
   18d64:	00008011 	.word	0x00008011

00018d68 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   18d68:	e590c000 	ldr	ip, [r0]
   18d6c:	e92d4010 	push	{r4, lr}
   18d70:	e35c0000 	cmp	ip, #0
   18d74:	0a000014 	beq	18dcc <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x64>
   18d78:	e1a03001 	mov	r3, r1
   18d7c:	e5901004 	ldr	r1, [r0, #4]
   18d80:	e3510000 	cmp	r1, #0
   18d84:	0a000014 	beq	18ddc <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x74>
   18d88:	e15c0003 	cmp	ip, r3
   18d8c:	81510002 	cmphi	r1, r2
   18d90:	8a000001 	bhi	18d9c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x34>
   18d94:	e3a00000 	mov	r0, #0
   18d98:	e8bd8010 	pop	{r4, pc}
   18d9c:	e5d01011 	ldrb	r1, [r0, #17]
   18da0:	e5803008 	str	r3, [r0, #8]
   18da4:	e3510000 	cmp	r1, #0
   18da8:	e580200c 	str	r2, [r0, #12]
   18dac:	1a000001 	bne	18db8 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x50>
   18db0:	e3a00001 	mov	r0, #1
   18db4:	e8bd8010 	pop	{r4, pc}
   18db8:	e1a01002 	mov	r1, r2
   18dbc:	e8bd4010 	pop	{r4, lr}
   18dc0:	e1a00003 	mov	r0, r3
   18dc4:	e3a02001 	mov	r2, #1
   18dc8:	eaffffc8 	b	18cf0 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   18dcc:	e3a02075 	mov	r2, #117	; 0x75
   18dd0:	e59f1014 	ldr	r1, [pc, #20]	; 18dec <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x84>
   18dd4:	e59f0014 	ldr	r0, [pc, #20]	; 18df0 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x88>
   18dd8:	eb002e29 	bl	24684 <assertion_failed>
   18ddc:	e3a02076 	mov	r2, #118	; 0x76
   18de0:	e59f1004 	ldr	r1, [pc, #4]	; 18dec <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x84>
   18de4:	e59f0008 	ldr	r0, [pc, #8]	; 18df4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x8c>
   18de8:	eb002e25 	bl	24684 <assertion_failed>
   18dec:	00042cb8 	.word	0x00042cb8
   18df0:	00042ce0 	.word	0x00042ce0
   18df4:	00042d0c 	.word	0x00042d0c

00018df8 <CMouseBehaviour::ShowCursor(bool)>:
   18df8:	e1a02001 	mov	r2, r1
   18dfc:	e5903008 	ldr	r3, [r0, #8]
   18e00:	e5901000 	ldr	r1, [r0]
   18e04:	e92d4010 	push	{r4, lr}
   18e08:	e1530001 	cmp	r3, r1
   18e0c:	e5d04011 	ldrb	r4, [r0, #17]
   18e10:	e5c02011 	strb	r2, [r0, #17]
   18e14:	2a000007 	bcs	18e38 <CMouseBehaviour::ShowCursor(bool)+0x40>
   18e18:	e590100c 	ldr	r1, [r0, #12]
   18e1c:	e5900004 	ldr	r0, [r0, #4]
   18e20:	e1510000 	cmp	r1, r0
   18e24:	2a000007 	bcs	18e48 <CMouseBehaviour::ShowCursor(bool)+0x50>
   18e28:	e1a00003 	mov	r0, r3
   18e2c:	ebffffaf 	bl	18cf0 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   18e30:	e1a00004 	mov	r0, r4
   18e34:	e8bd8010 	pop	{r4, pc}
   18e38:	e3a0208d 	mov	r2, #141	; 0x8d
   18e3c:	e59f1014 	ldr	r1, [pc, #20]	; 18e58 <CMouseBehaviour::ShowCursor(bool)+0x60>
   18e40:	e59f0014 	ldr	r0, [pc, #20]	; 18e5c <CMouseBehaviour::ShowCursor(bool)+0x64>
   18e44:	eb002e0e 	bl	24684 <assertion_failed>
   18e48:	e3a0208e 	mov	r2, #142	; 0x8e
   18e4c:	e59f1004 	ldr	r1, [pc, #4]	; 18e58 <CMouseBehaviour::ShowCursor(bool)+0x60>
   18e50:	e59f0008 	ldr	r0, [pc, #8]	; 18e60 <CMouseBehaviour::ShowCursor(bool)+0x68>
   18e54:	eb002e0a 	bl	24684 <assertion_failed>
   18e58:	00042cb8 	.word	0x00042cb8
   18e5c:	00042d38 	.word	0x00042d38
   18e60:	00042d54 	.word	0x00042d54

00018e64 <CMouseBehaviour::UpdateCursor()>:
   18e64:	e5d03011 	ldrb	r3, [r0, #17]
   18e68:	e3530000 	cmp	r3, #0
   18e6c:	012fff1e 	bxeq	lr
   18e70:	e5d03010 	ldrb	r3, [r0, #16]
   18e74:	e3530000 	cmp	r3, #0
   18e78:	012fff1e 	bxeq	lr
   18e7c:	e3a03000 	mov	r3, #0
   18e80:	e3a02001 	mov	r2, #1
   18e84:	e5c03010 	strb	r3, [r0, #16]
   18e88:	e1c000d8 	ldrd	r0, [r0, #8]
   18e8c:	eaffff97 	b	18cf0 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

00018e90 <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   18e90:	e92d4010 	push	{r4, lr}
   18e94:	e1a04000 	mov	r4, r0
   18e98:	e4801004 	str	r1, [r0], #4
   18e9c:	e1a01002 	mov	r1, r2
   18ea0:	eb003ad5 	bl	279fc <CString::CString(char const*)>
   18ea4:	e3a03000 	mov	r3, #0
   18ea8:	e1a00004 	mov	r0, r4
   18eac:	e5843014 	str	r3, [r4, #20]
   18eb0:	e5843018 	str	r3, [r4, #24]
   18eb4:	e584301c 	str	r3, [r4, #28]
   18eb8:	e5843020 	str	r3, [r4, #32]
   18ebc:	e8bd8010 	pop	{r4, pc}

00018ec0 <CPartitionManager::~CPartitionManager()>:
   18ec0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18ec4:	e1a06000 	mov	r6, r0
   18ec8:	e3a07000 	mov	r7, #0
   18ecc:	e59fa0ac 	ldr	sl, [pc, #172]	; 18f80 <CPartitionManager::~CPartitionManager()+0xc0>
   18ed0:	e24dd010 	sub	sp, sp, #16
   18ed4:	e2809004 	add	r9, r0, #4
   18ed8:	e2804014 	add	r4, r0, #20
   18edc:	e2808024 	add	r8, r0, #36	; 0x24
   18ee0:	e4943004 	ldr	r3, [r4], #4
   18ee4:	e3530000 	cmp	r3, #0
   18ee8:	0a00001b 	beq	18f5c <CPartitionManager::~CPartitionManager()+0x9c>
   18eec:	e1a0000d 	mov	r0, sp
   18ef0:	eb003abb 	bl	279e4 <CString::CString()>
   18ef4:	e1a00009 	mov	r0, r9
   18ef8:	eb003ad1 	bl	27a44 <CString::operator char const*() const>
   18efc:	e2877001 	add	r7, r7, #1
   18f00:	e1a02000 	mov	r2, r0
   18f04:	e1a03007 	mov	r3, r7
   18f08:	e1a0100a 	mov	r1, sl
   18f0c:	e1a0000d 	mov	r0, sp
   18f10:	eb003ffd 	bl	28f0c <CString::Format(char const*, ...)>
   18f14:	eb00309c 	bl	2518c <CDeviceNameService::Get()>
   18f18:	e1a05000 	mov	r5, r0
   18f1c:	e1a0000d 	mov	r0, sp
   18f20:	eb003ac7 	bl	27a44 <CString::operator char const*() const>
   18f24:	e3a02001 	mov	r2, #1
   18f28:	e1a01000 	mov	r1, r0
   18f2c:	e1a00005 	mov	r0, r5
   18f30:	eb003012 	bl	24f80 <CDeviceNameService::RemoveDevice(char const*, bool)>
   18f34:	e5140004 	ldr	r0, [r4, #-4]
   18f38:	e3500000 	cmp	r0, #0
   18f3c:	0a000002 	beq	18f4c <CPartitionManager::~CPartitionManager()+0x8c>
   18f40:	e5903000 	ldr	r3, [r0]
   18f44:	e5933004 	ldr	r3, [r3, #4]
   18f48:	e12fff33 	blx	r3
   18f4c:	e3a03000 	mov	r3, #0
   18f50:	e1a0000d 	mov	r0, sp
   18f54:	e5043004 	str	r3, [r4, #-4]
   18f58:	eb003a6e 	bl	27918 <CString::~CString()>
   18f5c:	e1540008 	cmp	r4, r8
   18f60:	1affffde 	bne	18ee0 <CPartitionManager::~CPartitionManager()+0x20>
   18f64:	e3a03000 	mov	r3, #0
   18f68:	e1a00009 	mov	r0, r9
   18f6c:	e5863000 	str	r3, [r6]
   18f70:	eb003a68 	bl	27918 <CString::~CString()>
   18f74:	e1a00006 	mov	r0, r6
   18f78:	e28dd010 	add	sp, sp, #16
   18f7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f80:	00043170 	.word	0x00043170

00018f84 <CPartitionManager::Initialize()>:
   18f84:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f88:	e1a05000 	mov	r5, r0
   18f8c:	e5900000 	ldr	r0, [r0]
   18f90:	e3a03000 	mov	r3, #0
   18f94:	e5901000 	ldr	r1, [r0]
   18f98:	e3a02000 	mov	r2, #0
   18f9c:	e5911010 	ldr	r1, [r1, #16]
   18fa0:	e24ddf87 	sub	sp, sp, #540	; 0x21c
   18fa4:	e12fff31 	blx	r1
   18fa8:	e1903001 	orrs	r3, r0, r1
   18fac:	1a00002c 	bne	19064 <CPartitionManager::Initialize()+0xe0>
   18fb0:	e5950000 	ldr	r0, [r5]
   18fb4:	e3a02c02 	mov	r2, #512	; 0x200
   18fb8:	e5903000 	ldr	r3, [r0]
   18fbc:	e28d1018 	add	r1, sp, #24
   18fc0:	e5933008 	ldr	r3, [r3, #8]
   18fc4:	e12fff33 	blx	r3
   18fc8:	e3500c02 	cmp	r0, #512	; 0x200
   18fcc:	1a000024 	bne	19064 <CPartitionManager::Initialize()+0xe0>
   18fd0:	e28d3f85 	add	r3, sp, #532	; 0x214
   18fd4:	e2833002 	add	r3, r3, #2
   18fd8:	e1d320b0 	ldrh	r2, [r3]
   18fdc:	e59f31a4 	ldr	r3, [pc, #420]	; 19188 <CPartitionManager::Initialize()+0x204>
   18fe0:	e1520003 	cmp	r2, r3
   18fe4:	1a00005b 	bne	19158 <CPartitionManager::Initialize()+0x1d4>
   18fe8:	e3a04000 	mov	r4, #0
   18fec:	e1a06004 	mov	r6, r4
   18ff0:	e59f8194 	ldr	r8, [pc, #404]	; 1918c <CPartitionManager::Initialize()+0x208>
   18ff4:	e2857014 	add	r7, r5, #20
   18ff8:	e28d3018 	add	r3, sp, #24
   18ffc:	e0833204 	add	r3, r3, r4, lsl #4
   19000:	e5d321c2 	ldrb	r2, [r3, #450]	; 0x1c2
   19004:	e2423005 	sub	r3, r2, #5
   19008:	e16f3f13 	clz	r3, r3
   1900c:	e3520000 	cmp	r2, #0
   19010:	e1a032a3 	lsr	r3, r3, #5
   19014:	03a03001 	moveq	r3, #1
   19018:	e352000f 	cmp	r2, #15
   1901c:	03833001 	orreq	r3, r3, #1
   19020:	e35200ef 	cmp	r2, #239	; 0xef
   19024:	03833001 	orreq	r3, r3, #1
   19028:	e3530000 	cmp	r3, #0
   1902c:	0a000014 	beq	19084 <CPartitionManager::Initialize()+0x100>
   19030:	e2844001 	add	r4, r4, #1
   19034:	e3540004 	cmp	r4, #4
   19038:	1affffee 	bne	18ff8 <CPartitionManager::Initialize()+0x74>
   1903c:	e3560000 	cmp	r6, #0
   19040:	13a00001 	movne	r0, #1
   19044:	1a00000c 	bne	1907c <CPartitionManager::Initialize()+0xf8>
   19048:	eb003675 	bl	26a24 <CLogger::Get()>
   1904c:	e3a02002 	mov	r2, #2
   19050:	e59f3138 	ldr	r3, [pc, #312]	; 19190 <CPartitionManager::Initialize()+0x20c>
   19054:	e59f1138 	ldr	r1, [pc, #312]	; 19194 <CPartitionManager::Initialize()+0x210>
   19058:	eb0035b3 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1905c:	e3a00001 	mov	r0, #1
   19060:	ea000005 	b	1907c <CPartitionManager::Initialize()+0xf8>
   19064:	eb00366e 	bl	26a24 <CLogger::Get()>
   19068:	e3a02001 	mov	r2, #1
   1906c:	e59f3124 	ldr	r3, [pc, #292]	; 19198 <CPartitionManager::Initialize()+0x214>
   19070:	e59f111c 	ldr	r1, [pc, #284]	; 19194 <CPartitionManager::Initialize()+0x210>
   19074:	eb0035ac 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19078:	e3a00000 	mov	r0, #0
   1907c:	e28ddf87 	add	sp, sp, #540	; 0x21c
   19080:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19084:	e28d3f86 	add	r3, sp, #536	; 0x218
   19088:	e284901c 	add	r9, r4, #28
   1908c:	e0839209 	add	r9, r3, r9, lsl #4
   19090:	e2491f7e 	sub	r1, r9, #504	; 0x1f8
   19094:	e15130b2 	ldrh	r3, [r1, #-2]
   19098:	e1d120b0 	ldrh	r2, [r1]
   1909c:	e1933802 	orrs	r3, r3, r2, lsl #16
   190a0:	0affffe2 	beq	19030 <CPartitionManager::Initialize()+0xac>
   190a4:	e2499f7d 	sub	r9, r9, #500	; 0x1f4
   190a8:	e15930b2 	ldrh	r3, [r9, #-2]
   190ac:	e1d920b0 	ldrh	r2, [r9]
   190b0:	e1933802 	orrs	r3, r3, r2, lsl #16
   190b4:	0affffdd 	beq	19030 <CPartitionManager::Initialize()+0xac>
   190b8:	e7973104 	ldr	r3, [r7, r4, lsl #2]
   190bc:	e3530000 	cmp	r3, #0
   190c0:	1a00002c 	bne	19178 <CPartitionManager::Initialize()+0x1f4>
   190c4:	e3a00020 	mov	r0, #32
   190c8:	e58d1004 	str	r1, [sp, #4]
   190cc:	eb004773 	bl	2aea0 <operator new(unsigned int)>
   190d0:	e1a0a005 	mov	sl, r5
   190d4:	e1a0b000 	mov	fp, r0
   190d8:	e59d1004 	ldr	r1, [sp, #4]
   190dc:	e1d9e0b0 	ldrh	lr, [r9]
   190e0:	e1d1c0b0 	ldrh	ip, [r1]
   190e4:	e15930b2 	ldrh	r3, [r9, #-2]
   190e8:	e15120b2 	ldrh	r2, [r1, #-2]
   190ec:	e183380e 	orr	r3, r3, lr, lsl #16
   190f0:	e182280c 	orr	r2, r2, ip, lsl #16
   190f4:	e49a1004 	ldr	r1, [sl], #4
   190f8:	eb0000bf 	bl	193fc <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   190fc:	e787b104 	str	fp, [r7, r4, lsl #2]
   19100:	e28d0008 	add	r0, sp, #8
   19104:	eb003a36 	bl	279e4 <CString::CString()>
   19108:	e1a0000a 	mov	r0, sl
   1910c:	eb003a4c 	bl	27a44 <CString::operator char const*() const>
   19110:	e2866001 	add	r6, r6, #1
   19114:	e1a02000 	mov	r2, r0
   19118:	e1a03006 	mov	r3, r6
   1911c:	e1a01008 	mov	r1, r8
   19120:	e28d0008 	add	r0, sp, #8
   19124:	eb003f78 	bl	28f0c <CString::Format(char const*, ...)>
   19128:	eb003017 	bl	2518c <CDeviceNameService::Get()>
   1912c:	e1a09000 	mov	r9, r0
   19130:	e28d0008 	add	r0, sp, #8
   19134:	eb003a42 	bl	27a44 <CString::operator char const*() const>
   19138:	e3a03001 	mov	r3, #1
   1913c:	e1a01000 	mov	r1, r0
   19140:	e7972104 	ldr	r2, [r7, r4, lsl #2]
   19144:	e1a00009 	mov	r0, r9
   19148:	eb002f5f 	bl	24ecc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1914c:	e28d0008 	add	r0, sp, #8
   19150:	eb0039f0 	bl	27918 <CString::~CString()>
   19154:	eaffffb5 	b	19030 <CPartitionManager::Initialize()+0xac>
   19158:	eb003631 	bl	26a24 <CLogger::Get()>
   1915c:	e3a02002 	mov	r2, #2
   19160:	e59f3034 	ldr	r3, [pc, #52]	; 1919c <CPartitionManager::Initialize()+0x218>
   19164:	e59f1028 	ldr	r1, [pc, #40]	; 19194 <CPartitionManager::Initialize()+0x210>
   19168:	eb00356f 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1916c:	e3a00001 	mov	r0, #1
   19170:	e28ddf87 	add	sp, sp, #540	; 0x21c
   19174:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19178:	e3a02078 	mov	r2, #120	; 0x78
   1917c:	e59f101c 	ldr	r1, [pc, #28]	; 191a0 <CPartitionManager::Initialize()+0x21c>
   19180:	e59f001c 	ldr	r0, [pc, #28]	; 191a4 <CPartitionManager::Initialize()+0x220>
   19184:	eb002d3e 	bl	24684 <assertion_failed>
   19188:	0000aa55 	.word	0x0000aa55
   1918c:	00043170 	.word	0x00043170
   19190:	000431cc 	.word	0x000431cc
   19194:	000431f0 	.word	0x000431f0
   19198:	00043178 	.word	0x00043178
   1919c:	00043188 	.word	0x00043188
   191a0:	0004319c 	.word	0x0004319c
   191a4:	000431b4 	.word	0x000431b4

000191a8 <CPartition::~CPartition()>:
   191a8:	e3a02000 	mov	r2, #0
   191ac:	e92d4010 	push	{r4, lr}
   191b0:	e1a04000 	mov	r4, r0
   191b4:	e59f3010 	ldr	r3, [pc, #16]	; 191cc <CPartition::~CPartition()+0x24>
   191b8:	e5802004 	str	r2, [r0, #4]
   191bc:	e5803000 	str	r3, [r0]
   191c0:	eb002f08 	bl	24de8 <CDevice::~CDevice()>
   191c4:	e1a00004 	mov	r0, r4
   191c8:	e8bd8010 	pop	{r4, pc}
   191cc:	00043210 	.word	0x00043210

000191d0 <CPartition::~CPartition()>:
   191d0:	e3a02000 	mov	r2, #0
   191d4:	e92d4010 	push	{r4, lr}
   191d8:	e1a04000 	mov	r4, r0
   191dc:	e59f301c 	ldr	r3, [pc, #28]	; 19200 <CPartition::~CPartition()+0x30>
   191e0:	e5802004 	str	r2, [r0, #4]
   191e4:	e5803000 	str	r3, [r0]
   191e8:	eb002efe 	bl	24de8 <CDevice::~CDevice()>
   191ec:	e1a00004 	mov	r0, r4
   191f0:	e3a01020 	mov	r1, #32
   191f4:	eb004737 	bl	2aed8 <operator delete(void*, unsigned int)>
   191f8:	e1a00004 	mov	r0, r4
   191fc:	e8bd8010 	pop	{r4, pc}
   19200:	00043210 	.word	0x00043210

00019204 <CPartition::Read(void*, unsigned int)>:
   19204:	e5d0c018 	ldrb	ip, [r0, #24]
   19208:	e35c0000 	cmp	ip, #0
   1920c:	1a00001d 	bne	19288 <CPartition::Read(void*, unsigned int)+0x84>
   19210:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19214:	e3a05000 	mov	r5, #0
   19218:	e3a09000 	mov	r9, #0
   1921c:	e59f406c 	ldr	r4, [pc, #108]	; 19290 <CPartition::Read(void*, unsigned int)+0x8c>
   19220:	e590c010 	ldr	ip, [r0, #16]
   19224:	e0944002 	adds	r4, r4, r2
   19228:	e5903014 	ldr	r3, [r0, #20]
   1922c:	e2a55000 	adc	r5, r5, #0
   19230:	e094c00c 	adds	ip, r4, ip
   19234:	e0a53003 	adc	r3, r5, r3
   19238:	e590800c 	ldr	r8, [r0, #12]
   1923c:	e1a064ac 	lsr	r6, ip, #9
   19240:	e1a074a3 	lsr	r7, r3, #9
   19244:	e1866b83 	orr	r6, r6, r3, lsl #23
   19248:	e1590007 	cmp	r9, r7
   1924c:	01580006 	cmpeq	r8, r6
   19250:	3a00000a 	bcc	19280 <CPartition::Read(void*, unsigned int)+0x7c>
   19254:	e5900004 	ldr	r0, [r0, #4]
   19258:	e3500000 	cmp	r0, #0
   1925c:	0a000003 	beq	19270 <CPartition::Read(void*, unsigned int)+0x6c>
   19260:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19264:	e5903000 	ldr	r3, [r0]
   19268:	e5933008 	ldr	r3, [r3, #8]
   1926c:	e12fff13 	bx	r3
   19270:	e3a02035 	mov	r2, #53	; 0x35
   19274:	e59f1018 	ldr	r1, [pc, #24]	; 19294 <CPartition::Read(void*, unsigned int)+0x90>
   19278:	e59f0018 	ldr	r0, [pc, #24]	; 19298 <CPartition::Read(void*, unsigned int)+0x94>
   1927c:	eb002d00 	bl	24684 <assertion_failed>
   19280:	e3e00000 	mvn	r0, #0
   19284:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19288:	e3e00000 	mvn	r0, #0
   1928c:	e12fff1e 	bx	lr
   19290:	000001ff 	.word	0x000001ff
   19294:	000431f8 	.word	0x000431f8
   19298:	0003f428 	.word	0x0003f428

0001929c <CPartition::Write(void const*, unsigned int)>:
   1929c:	e5d0c018 	ldrb	ip, [r0, #24]
   192a0:	e35c0000 	cmp	ip, #0
   192a4:	1a00001d 	bne	19320 <CPartition::Write(void const*, unsigned int)+0x84>
   192a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   192ac:	e3a05000 	mov	r5, #0
   192b0:	e3a09000 	mov	r9, #0
   192b4:	e59f406c 	ldr	r4, [pc, #108]	; 19328 <CPartition::Write(void const*, unsigned int)+0x8c>
   192b8:	e590c010 	ldr	ip, [r0, #16]
   192bc:	e0944002 	adds	r4, r4, r2
   192c0:	e5903014 	ldr	r3, [r0, #20]
   192c4:	e2a55000 	adc	r5, r5, #0
   192c8:	e094c00c 	adds	ip, r4, ip
   192cc:	e0a53003 	adc	r3, r5, r3
   192d0:	e590800c 	ldr	r8, [r0, #12]
   192d4:	e1a064ac 	lsr	r6, ip, #9
   192d8:	e1a074a3 	lsr	r7, r3, #9
   192dc:	e1866b83 	orr	r6, r6, r3, lsl #23
   192e0:	e1590007 	cmp	r9, r7
   192e4:	01580006 	cmpeq	r8, r6
   192e8:	3a00000a 	bcc	19318 <CPartition::Write(void const*, unsigned int)+0x7c>
   192ec:	e5900004 	ldr	r0, [r0, #4]
   192f0:	e3500000 	cmp	r0, #0
   192f4:	0a000003 	beq	19308 <CPartition::Write(void const*, unsigned int)+0x6c>
   192f8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   192fc:	e5903000 	ldr	r3, [r0]
   19300:	e593300c 	ldr	r3, [r3, #12]
   19304:	e12fff13 	bx	r3
   19308:	e3a02047 	mov	r2, #71	; 0x47
   1930c:	e59f1018 	ldr	r1, [pc, #24]	; 1932c <CPartition::Write(void const*, unsigned int)+0x90>
   19310:	e59f0018 	ldr	r0, [pc, #24]	; 19330 <CPartition::Write(void const*, unsigned int)+0x94>
   19314:	eb002cda 	bl	24684 <assertion_failed>
   19318:	e3e00000 	mvn	r0, #0
   1931c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19320:	e3e00000 	mvn	r0, #0
   19324:	e12fff1e 	bx	lr
   19328:	000001ff 	.word	0x000001ff
   1932c:	000431f8 	.word	0x000431f8
   19330:	0003f428 	.word	0x0003f428

00019334 <CPartition::Seek(unsigned long long)>:
   19334:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19338:	e3a0b000 	mov	fp, #0
   1933c:	e1a0500b 	mov	r5, fp
   19340:	e1a04b82 	lsl	r4, r2, #23
   19344:	e1a06002 	mov	r6, r2
   19348:	e3a02001 	mov	r2, #1
   1934c:	e1a04ba4 	lsr	r4, r4, #23
   19350:	e1941005 	orrs	r1, r4, r5
   19354:	e5c02018 	strb	r2, [r0, #24]
   19358:	1a00001e 	bne	193d8 <CPartition::Seek(unsigned long long)+0xa4>
   1935c:	e1a0a003 	mov	sl, r3
   19360:	e3a03000 	mov	r3, #0
   19364:	e590200c 	ldr	r2, [r0, #12]
   19368:	e1a044a6 	lsr	r4, r6, #9
   1936c:	e1a054aa 	lsr	r5, sl, #9
   19370:	e1844b8a 	orr	r4, r4, sl, lsl #23
   19374:	e1550003 	cmp	r5, r3
   19378:	01540002 	cmpeq	r4, r2
   1937c:	e1a07000 	mov	r7, r0
   19380:	2a000014 	bcs	193d8 <CPartition::Seek(unsigned long long)+0xa4>
   19384:	e9900009 	ldmib	r0, {r0, r3}
   19388:	e1a02483 	lsl	r2, r3, #9
   1938c:	e0968002 	adds	r8, r6, r2
   19390:	e1a03ba3 	lsr	r3, r3, #23
   19394:	e0aa9003 	adc	r9, sl, r3
   19398:	e3500000 	cmp	r0, #0
   1939c:	0a000010 	beq	193e4 <CPartition::Seek(unsigned long long)+0xb0>
   193a0:	e5903000 	ldr	r3, [r0]
   193a4:	e1a02008 	mov	r2, r8
   193a8:	e5931010 	ldr	r1, [r3, #16]
   193ac:	e1a03009 	mov	r3, r9
   193b0:	e12fff31 	blx	r1
   193b4:	e1510009 	cmp	r1, r9
   193b8:	01500008 	cmpeq	r0, r8
   193bc:	1a000005 	bne	193d8 <CPartition::Seek(unsigned long long)+0xa4>
   193c0:	e1a00006 	mov	r0, r6
   193c4:	e1a0100a 	mov	r1, sl
   193c8:	e5876010 	str	r6, [r7, #16]
   193cc:	e587a014 	str	sl, [r7, #20]
   193d0:	e5c7b018 	strb	fp, [r7, #24]
   193d4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193d8:	e3e00000 	mvn	r0, #0
   193dc:	e1a01000 	mov	r1, r0
   193e0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193e4:	e3a02059 	mov	r2, #89	; 0x59
   193e8:	e59f1004 	ldr	r1, [pc, #4]	; 193f4 <CPartition::Seek(unsigned long long)+0xc0>
   193ec:	e59f0004 	ldr	r0, [pc, #4]	; 193f8 <CPartition::Seek(unsigned long long)+0xc4>
   193f0:	eb002ca3 	bl	24684 <assertion_failed>
   193f4:	000431f8 	.word	0x000431f8
   193f8:	0003f428 	.word	0x0003f428

000193fc <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   193fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19400:	e1a05001 	mov	r5, r1
   19404:	e1a04000 	mov	r4, r0
   19408:	e1a07002 	mov	r7, r2
   1940c:	e1a06003 	mov	r6, r3
   19410:	eb002e82 	bl	24e20 <CDevice::CDevice()>
   19414:	e3a03001 	mov	r3, #1
   19418:	e3a00000 	mov	r0, #0
   1941c:	e3a01000 	mov	r1, #0
   19420:	e59f2030 	ldr	r2, [pc, #48]	; 19458 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x5c>
   19424:	e3550000 	cmp	r5, #0
   19428:	e98400a0 	stmib	r4, {r5, r7}
   1942c:	e1c401f0 	strd	r0, [r4, #16]
   19430:	e584600c 	str	r6, [r4, #12]
   19434:	e5842000 	str	r2, [r4]
   19438:	e5c43018 	strb	r3, [r4, #24]
   1943c:	0a000001 	beq	19448 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   19440:	e1a00004 	mov	r0, r4
   19444:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19448:	e3a0201f 	mov	r2, #31
   1944c:	e59f1008 	ldr	r1, [pc, #8]	; 1945c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x60>
   19450:	e59f0008 	ldr	r0, [pc, #8]	; 19460 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x64>
   19454:	eb002c8a 	bl	24684 <assertion_failed>
   19458:	00043210 	.word	0x00043210
   1945c:	000431f8 	.word	0x000431f8
   19460:	0003f428 	.word	0x0003f428

00019464 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>:
   19464:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19468:	e1a04000 	mov	r4, r0
   1946c:	e1a06001 	mov	r6, r1
   19470:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   19474:	e59fc110 	ldr	ip, [pc, #272]	; 1958c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x128>
   19478:	e3510000 	cmp	r1, #0
   1947c:	01a0100c 	moveq	r1, ip
   19480:	e2805010 	add	r5, r0, #16
   19484:	e5dda028 	ldrb	sl, [sp, #40]	; 0x28
   19488:	e1a07003 	mov	r7, r3
   1948c:	e280903c 	add	r9, r0, #60	; 0x3c
   19490:	e1a08002 	mov	r8, r2
   19494:	eb003958 	bl	279fc <CString::CString(char const*)>
   19498:	e1a00005 	mov	r0, r5
   1949c:	eb001da9 	bl	20b48 <CNetConfig::CNetConfig()>
   194a0:	e1a0200a 	mov	r2, sl
   194a4:	e1a01005 	mov	r1, r5
   194a8:	e1a00009 	mov	r0, r9
   194ac:	e284a060 	add	sl, r4, #96	; 0x60
   194b0:	eb000921 	bl	1b93c <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>
   194b4:	e1a02009 	mov	r2, r9
   194b8:	e1a01005 	mov	r1, r5
   194bc:	e2849098 	add	r9, r4, #152	; 0x98
   194c0:	e1a0000a 	mov	r0, sl
   194c4:	eb000748 	bl	1b1ec <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>
   194c8:	e1a0200a 	mov	r2, sl
   194cc:	e1a01005 	mov	r1, r5
   194d0:	e1a00009 	mov	r0, r9
   194d4:	eb000507 	bl	1a8f8 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>
   194d8:	e1a02009 	mov	r2, r9
   194dc:	e1a01005 	mov	r1, r5
   194e0:	e28400d8 	add	r0, r4, #216	; 0xd8
   194e4:	eb0000f2 	bl	198b4 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>
   194e8:	e3a01000 	mov	r1, #0
   194ec:	e16f0f16 	clz	r0, r6
   194f0:	e59f3098 	ldr	r3, [pc, #152]	; 19590 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x12c>
   194f4:	e1a002a0 	lsr	r0, r0, #5
   194f8:	e5932000 	ldr	r2, [r3]
   194fc:	e5841128 	str	r1, [r4, #296]	; 0x128
   19500:	e1520001 	cmp	r2, r1
   19504:	e5c40124 	strb	r0, [r4, #292]	; 0x124
   19508:	1a00001b 	bne	1957c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x118>
   1950c:	e1a01000 	mov	r1, r0
   19510:	e1a00005 	mov	r0, r5
   19514:	e5834000 	str	r4, [r3]
   19518:	eb001d52 	bl	20a68 <CNetConfig::SetDHCP(bool)>
   1951c:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   19520:	e3530000 	cmp	r3, #0
   19524:	0a000001 	beq	19530 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xcc>
   19528:	e1a00004 	mov	r0, r4
   1952c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19530:	e1a01006 	mov	r1, r6
   19534:	e1a00005 	mov	r0, r5
   19538:	eb001da1 	bl	20bc4 <CNetConfig::SetIPAddress(unsigned char const*)>
   1953c:	e1a01008 	mov	r1, r8
   19540:	e1a00005 	mov	r0, r5
   19544:	eb001da5 	bl	20be0 <CNetConfig::SetNetMask(unsigned char const*)>
   19548:	e3570000 	cmp	r7, #0
   1954c:	0a000002 	beq	1955c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xf8>
   19550:	e1a01007 	mov	r1, r7
   19554:	e1a00005 	mov	r0, r5
   19558:	eb001d48 	bl	20a80 <CNetConfig::SetDefaultGateway(unsigned char const*)>
   1955c:	e59d3020 	ldr	r3, [sp, #32]
   19560:	e3530000 	cmp	r3, #0
   19564:	0affffef 	beq	19528 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xc4>
   19568:	e1a00005 	mov	r0, r5
   1956c:	e1a01003 	mov	r1, r3
   19570:	eb001d44 	bl	20a88 <CNetConfig::SetDNSServer(unsigned char const*)>
   19574:	e1a00004 	mov	r0, r4
   19578:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1957c:	e3a02026 	mov	r2, #38	; 0x26
   19580:	e59f100c 	ldr	r1, [pc, #12]	; 19594 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x130>
   19584:	e59f000c 	ldr	r0, [pc, #12]	; 19598 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x134>
   19588:	eb002c3d 	bl	24684 <assertion_failed>
   1958c:	00047150 	.word	0x00047150
   19590:	0004da88 	.word	0x0004da88
   19594:	00043228 	.word	0x00043228
   19598:	0004323c 	.word	0x0004323c

0001959c <CNetSubSystem::Process()>:
   1959c:	e59f3034 	ldr	r3, [pc, #52]	; 195d8 <CNetSubSystem::Process()+0x3c>
   195a0:	e5933000 	ldr	r3, [r3]
   195a4:	e3530000 	cmp	r3, #0
   195a8:	012fff1e 	bxeq	lr
   195ac:	e92d4010 	push	{r4, lr}
   195b0:	e1a04000 	mov	r4, r0
   195b4:	e280003c 	add	r0, r0, #60	; 0x3c
   195b8:	eb000951 	bl	1bb04 <CNetDeviceLayer::Process()>
   195bc:	e2840060 	add	r0, r4, #96	; 0x60
   195c0:	eb00076a 	bl	1b370 <CLinkLayer::Process()>
   195c4:	e2840098 	add	r0, r4, #152	; 0x98
   195c8:	eb00051a 	bl	1aa38 <CNetworkLayer::Process()>
   195cc:	e28400d8 	add	r0, r4, #216	; 0xd8
   195d0:	e8bd4010 	pop	{r4, lr}
   195d4:	ea0003da 	b	1a544 <CTransportLayer::Process()>
   195d8:	0004da88 	.word	0x0004da88

000195dc <CNetSubSystem::GetConfig()>:
   195dc:	e2800010 	add	r0, r0, #16
   195e0:	e12fff1e 	bx	lr

000195e4 <CNetSubSystem::GetNetDeviceLayer()>:
   195e4:	e280003c 	add	r0, r0, #60	; 0x3c
   195e8:	e12fff1e 	bx	lr

000195ec <CNetSubSystem::GetLinkLayer()>:
   195ec:	e2800060 	add	r0, r0, #96	; 0x60
   195f0:	e12fff1e 	bx	lr

000195f4 <CNetSubSystem::GetTransportLayer()>:
   195f4:	e28000d8 	add	r0, r0, #216	; 0xd8
   195f8:	e12fff1e 	bx	lr

000195fc <CNetSubSystem::IsRunning() const>:
   195fc:	e5d03124 	ldrb	r3, [r0, #292]	; 0x124
   19600:	e3530000 	cmp	r3, #0
   19604:	0a000003 	beq	19618 <CNetSubSystem::IsRunning() const+0x1c>
   19608:	e5900128 	ldr	r0, [r0, #296]	; 0x128
   1960c:	e3500000 	cmp	r0, #0
   19610:	0a000002 	beq	19620 <CNetSubSystem::IsRunning() const+0x24>
   19614:	ea00206e 	b	217d4 <CDHCPClient::IsBound() const>
   19618:	e3a00001 	mov	r0, #1
   1961c:	e12fff1e 	bx	lr
   19620:	e3a0209d 	mov	r2, #157	; 0x9d
   19624:	e92d4010 	push	{r4, lr}
   19628:	e59f1004 	ldr	r1, [pc, #4]	; 19634 <CNetSubSystem::IsRunning() const+0x38>
   1962c:	e59f0004 	ldr	r0, [pc, #4]	; 19638 <CNetSubSystem::IsRunning() const+0x3c>
   19630:	eb002c13 	bl	24684 <assertion_failed>
   19634:	00043228 	.word	0x00043228
   19638:	0004324c 	.word	0x0004324c

0001963c <CNetSubSystem::Initialize(bool)>:
   1963c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   19640:	e2806010 	add	r6, r0, #16
   19644:	e24dd00c 	sub	sp, sp, #12
   19648:	e1a04000 	mov	r4, r0
   1964c:	e1a00006 	mov	r0, r6
   19650:	e1a05001 	mov	r5, r1
   19654:	eb001d0d 	bl	20a90 <CNetConfig::GetIPAddress() const>
   19658:	eb001e46 	bl	20f78 <CIPAddress::IsNull() const>
   1965c:	e1a01000 	mov	r1, r0
   19660:	e1a00006 	mov	r0, r6
   19664:	e5c41124 	strb	r1, [r4, #292]	; 0x124
   19668:	eb001cfe 	bl	20a68 <CNetConfig::SetDHCP(bool)>
   1966c:	e1a01005 	mov	r1, r5
   19670:	e284003c 	add	r0, r4, #60	; 0x3c
   19674:	eb0008c7 	bl	1b998 <CNetDeviceLayer::Initialize(bool)>
   19678:	e3500000 	cmp	r0, #0
   1967c:	1a000003 	bne	19690 <CNetSubSystem::Initialize(bool)+0x54>
   19680:	e3a06000 	mov	r6, #0
   19684:	e1a00006 	mov	r0, r6
   19688:	e28dd00c 	add	sp, sp, #12
   1968c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   19690:	e2846060 	add	r6, r4, #96	; 0x60
   19694:	e1a00006 	mov	r0, r6
   19698:	eb000709 	bl	1b2c4 <CLinkLayer::Initialize()>
   1969c:	e3500000 	cmp	r0, #0
   196a0:	0afffff6 	beq	19680 <CNetSubSystem::Initialize(bool)+0x44>
   196a4:	e2847098 	add	r7, r4, #152	; 0x98
   196a8:	e1a00007 	mov	r0, r7
   196ac:	eb0004c8 	bl	1a9d4 <CNetworkLayer::Initialize()>
   196b0:	e3500000 	cmp	r0, #0
   196b4:	0afffff1 	beq	19680 <CNetSubSystem::Initialize(bool)+0x44>
   196b8:	e1a00006 	mov	r0, r6
   196bc:	e1a01007 	mov	r1, r7
   196c0:	eb000718 	bl	1b328 <CLinkLayer::AttachLayer(CNetworkLayer*)>
   196c4:	e28400d8 	add	r0, r4, #216	; 0xd8
   196c8:	eb00009f 	bl	1994c <CTransportLayer::Initialize()>
   196cc:	e2506000 	subs	r6, r0, #0
   196d0:	0affffea 	beq	19680 <CNetSubSystem::Initialize(bool)+0x44>
   196d4:	e3a000e0 	mov	r0, #224	; 0xe0
   196d8:	eb0045f0 	bl	2aea0 <operator new(unsigned int)>
   196dc:	e1a01004 	mov	r1, r4
   196e0:	eb000068 	bl	19888 <CNetTask::CNetTask(CNetSubSystem*)>
   196e4:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   196e8:	e3530000 	cmp	r3, #0
   196ec:	0a00000d 	beq	19728 <CNetSubSystem::Initialize(bool)+0xec>
   196f0:	e5943128 	ldr	r3, [r4, #296]	; 0x128
   196f4:	e3530000 	cmp	r3, #0
   196f8:	1a000014 	bne	19750 <CNetSubSystem::Initialize(bool)+0x114>
   196fc:	e1a00004 	mov	r0, r4
   19700:	eb0038cf 	bl	27a44 <CString::operator char const*() const>
   19704:	e1a02000 	mov	r2, r0
   19708:	e3a00e1e 	mov	r0, #480	; 0x1e0
   1970c:	e58d2004 	str	r2, [sp, #4]
   19710:	eb0045e2 	bl	2aea0 <operator new(unsigned int)>
   19714:	e1a07000 	mov	r7, r0
   19718:	e1a01004 	mov	r1, r4
   1971c:	e59d2004 	ldr	r2, [sp, #4]
   19720:	eb001ff5 	bl	216fc <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>
   19724:	e5847128 	str	r7, [r4, #296]	; 0x128
   19728:	e3550000 	cmp	r5, #0
   1972c:	1a000002 	bne	1973c <CNetSubSystem::Initialize(bool)+0x100>
   19730:	eaffffd3 	b	19684 <CNetSubSystem::Initialize(bool)+0x48>
   19734:	eb002b26 	bl	243d4 <CScheduler::Get()>
   19738:	eb002a9a 	bl	241a8 <CScheduler::Yield()>
   1973c:	e1a00004 	mov	r0, r4
   19740:	ebffffad 	bl	195fc <CNetSubSystem::IsRunning() const>
   19744:	e3500000 	cmp	r0, #0
   19748:	0afffff9 	beq	19734 <CNetSubSystem::Initialize(bool)+0xf8>
   1974c:	eaffffcc 	b	19684 <CNetSubSystem::Initialize(bool)+0x48>
   19750:	e3a02060 	mov	r2, #96	; 0x60
   19754:	e59f1004 	ldr	r1, [pc, #4]	; 19760 <CNetSubSystem::Initialize(bool)+0x124>
   19758:	e59f0004 	ldr	r0, [pc, #4]	; 19764 <CNetSubSystem::Initialize(bool)+0x128>
   1975c:	eb002bc8 	bl	24684 <assertion_failed>
   19760:	00043228 	.word	0x00043228
   19764:	00043260 	.word	0x00043260

00019768 <CNetSubSystem::Get()>:
   19768:	e59f301c 	ldr	r3, [pc, #28]	; 1978c <CNetSubSystem::Get()+0x24>
   1976c:	e5930000 	ldr	r0, [r3]
   19770:	e3500000 	cmp	r0, #0
   19774:	112fff1e 	bxne	lr
   19778:	e3a020a3 	mov	r2, #163	; 0xa3
   1977c:	e92d4010 	push	{r4, lr}
   19780:	e59f1008 	ldr	r1, [pc, #8]	; 19790 <CNetSubSystem::Get()+0x28>
   19784:	e59f0008 	ldr	r0, [pc, #8]	; 19794 <CNetSubSystem::Get()+0x2c>
   19788:	eb002bbd 	bl	24684 <assertion_failed>
   1978c:	0004da88 	.word	0x0004da88
   19790:	00043228 	.word	0x00043228
   19794:	00043274 	.word	0x00043274

00019798 <CNetSubSystem::~CNetSubSystem()>:
   19798:	e92d4010 	push	{r4, lr}
   1979c:	e3a02000 	mov	r2, #0
   197a0:	e1a04000 	mov	r4, r0
   197a4:	e59f3038 	ldr	r3, [pc, #56]	; 197e4 <CNetSubSystem::~CNetSubSystem()+0x4c>
   197a8:	e28000d8 	add	r0, r0, #216	; 0xd8
   197ac:	e5832000 	str	r2, [r3]
   197b0:	eb000359 	bl	1a51c <CTransportLayer::~CTransportLayer()>
   197b4:	e2840098 	add	r0, r4, #152	; 0x98
   197b8:	eb00046d 	bl	1a974 <CNetworkLayer::~CNetworkLayer()>
   197bc:	e2840060 	add	r0, r4, #96	; 0x60
   197c0:	eb0006a8 	bl	1b268 <CLinkLayer::~CLinkLayer()>
   197c4:	e284003c 	add	r0, r4, #60	; 0x3c
   197c8:	eb000867 	bl	1b96c <CNetDeviceLayer::~CNetDeviceLayer()>
   197cc:	e2840010 	add	r0, r4, #16
   197d0:	eb001c96 	bl	20a30 <CNetConfig::~CNetConfig()>
   197d4:	e1a00004 	mov	r0, r4
   197d8:	eb00384e 	bl	27918 <CString::~CString()>
   197dc:	e1a00004 	mov	r0, r4
   197e0:	e8bd8010 	pop	{r4, pc}
   197e4:	0004da88 	.word	0x0004da88

000197e8 <CNetTask::~CNetTask()>:
   197e8:	e3a02000 	mov	r2, #0
   197ec:	e92d4010 	push	{r4, lr}
   197f0:	e1a04000 	mov	r4, r0
   197f4:	e59f3010 	ldr	r3, [pc, #16]	; 1980c <CNetTask::~CNetTask()+0x24>
   197f8:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   197fc:	e5803000 	str	r3, [r0]
   19800:	eb00290e 	bl	23c40 <CTask::~CTask()>
   19804:	e1a00004 	mov	r0, r4
   19808:	e8bd8010 	pop	{r4, pc}
   1980c:	000432b0 	.word	0x000432b0

00019810 <CNetTask::~CNetTask()>:
   19810:	e3a02000 	mov	r2, #0
   19814:	e92d4010 	push	{r4, lr}
   19818:	e1a04000 	mov	r4, r0
   1981c:	e59f301c 	ldr	r3, [pc, #28]	; 19840 <CNetTask::~CNetTask()+0x30>
   19820:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   19824:	e5803000 	str	r3, [r0]
   19828:	eb002904 	bl	23c40 <CTask::~CTask()>
   1982c:	e1a00004 	mov	r0, r4
   19830:	e3a010e0 	mov	r1, #224	; 0xe0
   19834:	eb0045a7 	bl	2aed8 <operator delete(void*, unsigned int)>
   19838:	e1a00004 	mov	r0, r4
   1983c:	e8bd8010 	pop	{r4, pc}
   19840:	000432b0 	.word	0x000432b0

00019844 <CNetTask::Run()>:
   19844:	e92d4010 	push	{r4, lr}
   19848:	e1a04000 	mov	r4, r0
   1984c:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   19850:	e3500000 	cmp	r0, #0
   19854:	0a000005 	beq	19870 <CNetTask::Run()+0x2c>
   19858:	ebffff4f 	bl	1959c <CNetSubSystem::Process()>
   1985c:	eb002adc 	bl	243d4 <CScheduler::Get()>
   19860:	eb002a50 	bl	241a8 <CScheduler::Yield()>
   19864:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   19868:	e3500000 	cmp	r0, #0
   1986c:	1afffff9 	bne	19858 <CNetTask::Run()+0x14>
   19870:	e3a02026 	mov	r2, #38	; 0x26
   19874:	e59f1004 	ldr	r1, [pc, #4]	; 19880 <CNetTask::Run()+0x3c>
   19878:	e59f0004 	ldr	r0, [pc, #4]	; 19884 <CNetTask::Run()+0x40>
   1987c:	eb002b80 	bl	24684 <assertion_failed>
   19880:	00043284 	.word	0x00043284
   19884:	00043290 	.word	0x00043290

00019888 <CNetTask::CNetTask(CNetSubSystem*)>:
   19888:	e92d4070 	push	{r4, r5, r6, lr}
   1988c:	e1a04000 	mov	r4, r0
   19890:	e1a05001 	mov	r5, r1
   19894:	e3a01902 	mov	r1, #32768	; 0x8000
   19898:	eb002939 	bl	23d84 <CTask::CTask(unsigned int)>
   1989c:	e59f300c 	ldr	r3, [pc, #12]	; 198b0 <CNetTask::CNetTask(CNetSubSystem*)+0x28>
   198a0:	e1a00004 	mov	r0, r4
   198a4:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   198a8:	e5843000 	str	r3, [r4]
   198ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   198b0:	000432b0 	.word	0x000432b0

000198b4 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>:
   198b4:	e92d4070 	push	{r4, r5, r6, lr}
   198b8:	e1a06002 	mov	r6, r2
   198bc:	e3a02064 	mov	r2, #100	; 0x64
   198c0:	e1a04000 	mov	r4, r0
   198c4:	e5801000 	str	r1, [r0]
   198c8:	e1a05001 	mov	r5, r1
   198cc:	e5806004 	str	r6, [r0, #4]
   198d0:	e1a01002 	mov	r1, r2
   198d4:	e2800008 	add	r0, r0, #8
   198d8:	eb003762 	bl	27668 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   198dc:	e3a03000 	mov	r3, #0
   198e0:	e59f0054 	ldr	r0, [pc, #84]	; 1993c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x88>
   198e4:	e584301c 	str	r3, [r4, #28]
   198e8:	e1c401b8 	strh	r0, [r4, #24]
   198ec:	e1a02006 	mov	r2, r6
   198f0:	e1a01005 	mov	r1, r5
   198f4:	e2840020 	add	r0, r4, #32
   198f8:	eb001ba2 	bl	20788 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>
   198fc:	e5943000 	ldr	r3, [r4]
   19900:	e3530000 	cmp	r3, #0
   19904:	0a000004 	beq	1991c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x68>
   19908:	e5943004 	ldr	r3, [r4, #4]
   1990c:	e3530000 	cmp	r3, #0
   19910:	0a000005 	beq	1992c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x78>
   19914:	e1a00004 	mov	r0, r4
   19918:	e8bd8070 	pop	{r4, r5, r6, pc}
   1991c:	e3a02025 	mov	r2, #37	; 0x25
   19920:	e59f1018 	ldr	r1, [pc, #24]	; 19940 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x8c>
   19924:	e59f0018 	ldr	r0, [pc, #24]	; 19944 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x90>
   19928:	eb002b55 	bl	24684 <assertion_failed>
   1992c:	e3a02026 	mov	r2, #38	; 0x26
   19930:	e59f1008 	ldr	r1, [pc, #8]	; 19940 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x8c>
   19934:	e59f000c 	ldr	r0, [pc, #12]	; 19948 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x94>
   19938:	eb002b51 	bl	24684 <assertion_failed>
   1993c:	ffffea60 	.word	0xffffea60
   19940:	000432bc 	.word	0x000432bc
   19944:	000432d0 	.word	0x000432d0
   19948:	000432e4 	.word	0x000432e4

0001994c <CTransportLayer::Initialize()>:
   1994c:	e3a00001 	mov	r0, #1
   19950:	e12fff1e 	bx	lr

00019954 <CTransportLayer::Bind(unsigned short, int)>:
   19954:	e3520011 	cmp	r2, #17
   19958:	1a000051 	bne	19aa4 <CTransportLayer::Bind(unsigned short, int)+0x150>
   1995c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19960:	e1a06000 	mov	r6, r0
   19964:	e590001c 	ldr	r0, [r0, #28]
   19968:	e1a07001 	mov	r7, r1
   1996c:	e3500000 	cmp	r0, #0
   19970:	1a000036 	bne	19a50 <CTransportLayer::Bind(unsigned short, int)+0xfc>
   19974:	e3a04000 	mov	r4, #0
   19978:	e2865008 	add	r5, r6, #8
   1997c:	ea000006 	b	1999c <CTransportLayer::Bind(unsigned short, int)+0x48>
   19980:	e1a01004 	mov	r1, r4
   19984:	e1a00005 	mov	r0, r5
   19988:	eb00375f 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1998c:	e5903000 	ldr	r3, [r0]
   19990:	e3530000 	cmp	r3, #0
   19994:	0a000004 	beq	199ac <CTransportLayer::Bind(unsigned short, int)+0x58>
   19998:	e2844001 	add	r4, r4, #1
   1999c:	e1a00005 	mov	r0, r5
   199a0:	eb003757 	bl	27704 <CPtrArray::GetCount() const>
   199a4:	e1500004 	cmp	r0, r4
   199a8:	8afffff4 	bhi	19980 <CTransportLayer::Bind(unsigned short, int)+0x2c>
   199ac:	e1a00005 	mov	r0, r5
   199b0:	eb003753 	bl	27704 <CPtrArray::GetCount() const>
   199b4:	e1500004 	cmp	r0, r4
   199b8:	9a00001f 	bls	19a3c <CTransportLayer::Bind(unsigned short, int)+0xe8>
   199bc:	e3570000 	cmp	r7, #0
   199c0:	0a000030 	beq	19a88 <CTransportLayer::Bind(unsigned short, int)+0x134>
   199c4:	e5963000 	ldr	r3, [r6]
   199c8:	e3530000 	cmp	r3, #0
   199cc:	0a000021 	beq	19a58 <CTransportLayer::Bind(unsigned short, int)+0x104>
   199d0:	e5963004 	ldr	r3, [r6, #4]
   199d4:	e3530000 	cmp	r3, #0
   199d8:	0a000022 	beq	19a68 <CTransportLayer::Bind(unsigned short, int)+0x114>
   199dc:	e3a00048 	mov	r0, #72	; 0x48
   199e0:	eb00452e 	bl	2aea0 <operator new(unsigned int)>
   199e4:	e8960006 	ldm	r6, {r1, r2}
   199e8:	e1a03007 	mov	r3, r7
   199ec:	e1a07000 	mov	r7, r0
   199f0:	eb001129 	bl	1de9c <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   199f4:	e1a01004 	mov	r1, r4
   199f8:	e1a00005 	mov	r0, r5
   199fc:	eb003742 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19a00:	e1a01004 	mov	r1, r4
   19a04:	e5807000 	str	r7, [r0]
   19a08:	e1a00005 	mov	r0, r5
   19a0c:	eb00373e 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19a10:	e5903000 	ldr	r3, [r0]
   19a14:	e3530000 	cmp	r3, #0
   19a18:	0a000016 	beq	19a78 <CTransportLayer::Bind(unsigned short, int)+0x124>
   19a1c:	e596301c 	ldr	r3, [r6, #28]
   19a20:	e3530000 	cmp	r3, #0
   19a24:	1a000001 	bne	19a30 <CTransportLayer::Bind(unsigned short, int)+0xdc>
   19a28:	e1a00004 	mov	r0, r4
   19a2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19a30:	eb004871 	bl	2bbfc <LeaveCritical>
   19a34:	e1a00004 	mov	r0, r4
   19a38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19a3c:	e3a01000 	mov	r1, #0
   19a40:	e1a00005 	mov	r0, r5
   19a44:	eb003768 	bl	277ec <CPtrArray::Append(void*)>
   19a48:	e1a04000 	mov	r4, r0
   19a4c:	eaffffda 	b	199bc <CTransportLayer::Bind(unsigned short, int)+0x68>
   19a50:	eb00483f 	bl	2bb54 <EnterCritical>
   19a54:	eaffffc6 	b	19974 <CTransportLayer::Bind(unsigned short, int)+0x20>
   19a58:	e3a020ad 	mov	r2, #173	; 0xad
   19a5c:	e59f1048 	ldr	r1, [pc, #72]	; 19aac <CTransportLayer::Bind(unsigned short, int)+0x158>
   19a60:	e59f0048 	ldr	r0, [pc, #72]	; 19ab0 <CTransportLayer::Bind(unsigned short, int)+0x15c>
   19a64:	eb002b06 	bl	24684 <assertion_failed>
   19a68:	e3a020ae 	mov	r2, #174	; 0xae
   19a6c:	e59f1038 	ldr	r1, [pc, #56]	; 19aac <CTransportLayer::Bind(unsigned short, int)+0x158>
   19a70:	e59f003c 	ldr	r0, [pc, #60]	; 19ab4 <CTransportLayer::Bind(unsigned short, int)+0x160>
   19a74:	eb002b02 	bl	24684 <assertion_failed>
   19a78:	e3a020b0 	mov	r2, #176	; 0xb0
   19a7c:	e59f1028 	ldr	r1, [pc, #40]	; 19aac <CTransportLayer::Bind(unsigned short, int)+0x158>
   19a80:	e59f0030 	ldr	r0, [pc, #48]	; 19ab8 <CTransportLayer::Bind(unsigned short, int)+0x164>
   19a84:	eb002afe 	bl	24684 <assertion_failed>
   19a88:	e596301c 	ldr	r3, [r6, #28]
   19a8c:	e3530000 	cmp	r3, #0
   19a90:	1a000001 	bne	19a9c <CTransportLayer::Bind(unsigned short, int)+0x148>
   19a94:	e3e00000 	mvn	r0, #0
   19a98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19a9c:	eb004856 	bl	2bbfc <LeaveCritical>
   19aa0:	eafffffb 	b	19a94 <CTransportLayer::Bind(unsigned short, int)+0x140>
   19aa4:	e3e00000 	mvn	r0, #0
   19aa8:	e12fff1e 	bx	lr
   19aac:	000432bc 	.word	0x000432bc
   19ab0:	000432d0 	.word	0x000432d0
   19ab4:	000432e4 	.word	0x000432e4
   19ab8:	000432fc 	.word	0x000432fc

00019abc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>:
   19abc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ac0:	e1a07000 	mov	r7, r0
   19ac4:	e590001c 	ldr	r0, [r0, #28]
   19ac8:	e24dd014 	sub	sp, sp, #20
   19acc:	e3500000 	cmp	r0, #0
   19ad0:	e1a05003 	mov	r5, r3
   19ad4:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
   19ad8:	e58d1008 	str	r1, [sp, #8]
   19adc:	e58d200c 	str	r2, [sp, #12]
   19ae0:	1a000070 	bne	19ca8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1ec>
   19ae4:	e3a06000 	mov	r6, #0
   19ae8:	e2874008 	add	r4, r7, #8
   19aec:	ea000006 	b	19b0c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x50>
   19af0:	e1a01006 	mov	r1, r6
   19af4:	e1a00004 	mov	r0, r4
   19af8:	eb003703 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19afc:	e5903000 	ldr	r3, [r0]
   19b00:	e3530000 	cmp	r3, #0
   19b04:	0a000004 	beq	19b1c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x60>
   19b08:	e2866001 	add	r6, r6, #1
   19b0c:	e1a00004 	mov	r0, r4
   19b10:	eb0036fb 	bl	27704 <CPtrArray::GetCount() const>
   19b14:	e1500006 	cmp	r0, r6
   19b18:	8afffff4 	bhi	19af0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x34>
   19b1c:	e1a00004 	mov	r0, r4
   19b20:	eb0036f7 	bl	27704 <CPtrArray::GetCount() const>
   19b24:	e1500006 	cmp	r0, r6
   19b28:	9a000059 	bls	19c94 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1d8>
   19b2c:	e3550000 	cmp	r5, #0
   19b30:	1a000026 	bne	19bd0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x114>
   19b34:	e59f9204 	ldr	r9, [pc, #516]	; 19d40 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x284>
   19b38:	e59fb204 	ldr	fp, [pc, #516]	; 19d44 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   19b3c:	e1d751b8 	ldrh	r5, [r7, #24]
   19b40:	e3a0a000 	mov	sl, #0
   19b44:	e2853001 	add	r3, r5, #1
   19b48:	e6ff3073 	uxth	r3, r3
   19b4c:	e1530009 	cmp	r3, r9
   19b50:	91c731b8 	strhls	r3, [r7, #24]
   19b54:	81c7b1b8 	strhhi	fp, [r7, #24]
   19b58:	ea000000 	b	19b60 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   19b5c:	e28aa001 	add	sl, sl, #1
   19b60:	e1a00004 	mov	r0, r4
   19b64:	eb0036e6 	bl	27704 <CPtrArray::GetCount() const>
   19b68:	e150000a 	cmp	r0, sl
   19b6c:	9a000013 	bls	19bc0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x104>
   19b70:	e1a0100a 	mov	r1, sl
   19b74:	e1a00004 	mov	r0, r4
   19b78:	eb0036e3 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19b7c:	e5903000 	ldr	r3, [r0]
   19b80:	e3530000 	cmp	r3, #0
   19b84:	0afffff4 	beq	19b5c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19b88:	e1a0100a 	mov	r1, sl
   19b8c:	e1a00004 	mov	r0, r4
   19b90:	eb0036dd 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19b94:	e5900000 	ldr	r0, [r0]
   19b98:	eb000e46 	bl	1d4b8 <CNetConnection::GetOwnPort() const>
   19b9c:	e1500005 	cmp	r0, r5
   19ba0:	1affffed 	bne	19b5c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19ba4:	e1a0100a 	mov	r1, sl
   19ba8:	e1a00004 	mov	r0, r4
   19bac:	eb0036d6 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19bb0:	e5900000 	ldr	r0, [r0]
   19bb4:	eb000e49 	bl	1d4e0 <CNetConnection::GetProtocol() const>
   19bb8:	e1500008 	cmp	r0, r8
   19bbc:	1affffe6 	bne	19b5c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19bc0:	e1a00004 	mov	r0, r4
   19bc4:	eb0036ce 	bl	27704 <CPtrArray::GetCount() const>
   19bc8:	e150000a 	cmp	r0, sl
   19bcc:	8affffda 	bhi	19b3c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x80>
   19bd0:	e5973000 	ldr	r3, [r7]
   19bd4:	e3530000 	cmp	r3, #0
   19bd8:	0a00004c 	beq	19d10 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x254>
   19bdc:	e5973004 	ldr	r3, [r7, #4]
   19be0:	e3530000 	cmp	r3, #0
   19be4:	0a00004d 	beq	19d20 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x264>
   19be8:	e3580006 	cmp	r8, #6
   19bec:	0a00002f 	beq	19cb0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1f4>
   19bf0:	e3580011 	cmp	r8, #17
   19bf4:	1a000021 	bne	19c80 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1c4>
   19bf8:	e3a00048 	mov	r0, #72	; 0x48
   19bfc:	eb0044a7 	bl	2aea0 <operator new(unsigned int)>
   19c00:	e59d300c 	ldr	r3, [sp, #12]
   19c04:	e58d5004 	str	r5, [sp, #4]
   19c08:	e58d3000 	str	r3, [sp]
   19c0c:	e8970006 	ldm	r7, {r1, r2}
   19c10:	e59d3008 	ldr	r3, [sp, #8]
   19c14:	e1a05000 	mov	r5, r0
   19c18:	eb001084 	bl	1de30 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   19c1c:	e1a01006 	mov	r1, r6
   19c20:	e1a00004 	mov	r0, r4
   19c24:	eb0036b8 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19c28:	e597301c 	ldr	r3, [r7, #28]
   19c2c:	e5805000 	str	r5, [r0]
   19c30:	e3530000 	cmp	r3, #0
   19c34:	1a00002d 	bne	19cf0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x234>
   19c38:	e1a01006 	mov	r1, r6
   19c3c:	e1a00004 	mov	r0, r4
   19c40:	eb0036b1 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19c44:	e5903000 	ldr	r3, [r0]
   19c48:	e3530000 	cmp	r3, #0
   19c4c:	0a000037 	beq	19d30 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x274>
   19c50:	e1a00004 	mov	r0, r4
   19c54:	e1a01006 	mov	r1, r6
   19c58:	eb0036ab 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19c5c:	e5900000 	ldr	r0, [r0]
   19c60:	e59f20e0 	ldr	r2, [pc, #224]	; 19d48 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28c>
   19c64:	e5903000 	ldr	r3, [r0]
   19c68:	e5933008 	ldr	r3, [r3, #8]
   19c6c:	e1530002 	cmp	r3, r2
   19c70:	1a000020 	bne	19cf8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x23c>
   19c74:	e3e00000 	mvn	r0, #0
   19c78:	e28dd014 	add	sp, sp, #20
   19c7c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c80:	e597301c 	ldr	r3, [r7, #28]
   19c84:	e3530000 	cmp	r3, #0
   19c88:	0afffff9 	beq	19c74 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1b8>
   19c8c:	eb0047da 	bl	2bbfc <LeaveCritical>
   19c90:	eafffff7 	b	19c74 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1b8>
   19c94:	e3a01000 	mov	r1, #0
   19c98:	e1a00004 	mov	r0, r4
   19c9c:	eb0036d2 	bl	277ec <CPtrArray::Append(void*)>
   19ca0:	e1a06000 	mov	r6, r0
   19ca4:	eaffffa0 	b	19b2c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x70>
   19ca8:	eb0047a9 	bl	2bb54 <EnterCritical>
   19cac:	eaffff8c 	b	19ae4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28>
   19cb0:	e3a000e0 	mov	r0, #224	; 0xe0
   19cb4:	eb004479 	bl	2aea0 <operator new(unsigned int)>
   19cb8:	e59d300c 	ldr	r3, [sp, #12]
   19cbc:	e58d5004 	str	r5, [sp, #4]
   19cc0:	e58d3000 	str	r3, [sp]
   19cc4:	e8970006 	ldm	r7, {r1, r2}
   19cc8:	e59d3008 	ldr	r3, [sp, #8]
   19ccc:	e1a05000 	mov	r5, r0
   19cd0:	eb0012de 	bl	1e850 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   19cd4:	e1a01006 	mov	r1, r6
   19cd8:	e1a00004 	mov	r0, r4
   19cdc:	eb00368a 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19ce0:	e597301c 	ldr	r3, [r7, #28]
   19ce4:	e5805000 	str	r5, [r0]
   19ce8:	e3530000 	cmp	r3, #0
   19cec:	0affffd1 	beq	19c38 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x17c>
   19cf0:	eb0047c1 	bl	2bbfc <LeaveCritical>
   19cf4:	eaffffcf 	b	19c38 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x17c>
   19cf8:	e12fff33 	blx	r3
   19cfc:	e3500000 	cmp	r0, #0
   19d00:	baffffdb 	blt	19c74 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1b8>
   19d04:	e1a00006 	mov	r0, r6
   19d08:	e28dd014 	add	sp, sp, #20
   19d0c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d10:	e3a020e1 	mov	r2, #225	; 0xe1
   19d14:	e59f1030 	ldr	r1, [pc, #48]	; 19d4c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x290>
   19d18:	e59f0030 	ldr	r0, [pc, #48]	; 19d50 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x294>
   19d1c:	eb002a58 	bl	24684 <assertion_failed>
   19d20:	e3a020e2 	mov	r2, #226	; 0xe2
   19d24:	e59f1020 	ldr	r1, [pc, #32]	; 19d4c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x290>
   19d28:	e59f0024 	ldr	r0, [pc, #36]	; 19d54 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x298>
   19d2c:	eb002a54 	bl	24684 <assertion_failed>
   19d30:	e3a020f4 	mov	r2, #244	; 0xf4
   19d34:	e59f1010 	ldr	r1, [pc, #16]	; 19d4c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x290>
   19d38:	e59f0018 	ldr	r0, [pc, #24]	; 19d58 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x29c>
   19d3c:	eb002a50 	bl	24684 <assertion_failed>
   19d40:	0000ee47 	.word	0x0000ee47
   19d44:	ffffea60 	.word	0xffffea60
   19d48:	0001a87c 	.word	0x0001a87c
   19d4c:	000432bc 	.word	0x000432bc
   19d50:	000432d0 	.word	0x000432d0
   19d54:	000432e4 	.word	0x000432e4
   19d58:	000432fc 	.word	0x000432fc

00019d5c <CTransportLayer::Listen(unsigned short, int)>:
   19d5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19d60:	e1a06000 	mov	r6, r0
   19d64:	e590001c 	ldr	r0, [r0, #28]
   19d68:	e1a07001 	mov	r7, r1
   19d6c:	e3500000 	cmp	r0, #0
   19d70:	e1a08002 	mov	r8, r2
   19d74:	1a000038 	bne	19e5c <CTransportLayer::Listen(unsigned short, int)+0x100>
   19d78:	e3a04000 	mov	r4, #0
   19d7c:	e2865008 	add	r5, r6, #8
   19d80:	ea000006 	b	19da0 <CTransportLayer::Listen(unsigned short, int)+0x44>
   19d84:	e1a01004 	mov	r1, r4
   19d88:	e1a00005 	mov	r0, r5
   19d8c:	eb00365e 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19d90:	e5903000 	ldr	r3, [r0]
   19d94:	e3530000 	cmp	r3, #0
   19d98:	0a000004 	beq	19db0 <CTransportLayer::Listen(unsigned short, int)+0x54>
   19d9c:	e2844001 	add	r4, r4, #1
   19da0:	e1a00005 	mov	r0, r5
   19da4:	eb003656 	bl	27704 <CPtrArray::GetCount() const>
   19da8:	e1500004 	cmp	r0, r4
   19dac:	8afffff4 	bhi	19d84 <CTransportLayer::Listen(unsigned short, int)+0x28>
   19db0:	e1a00005 	mov	r0, r5
   19db4:	eb003652 	bl	27704 <CPtrArray::GetCount() const>
   19db8:	e1500004 	cmp	r0, r4
   19dbc:	9a000021 	bls	19e48 <CTransportLayer::Listen(unsigned short, int)+0xec>
   19dc0:	e3570000 	cmp	r7, #0
   19dc4:	0a000032 	beq	19e94 <CTransportLayer::Listen(unsigned short, int)+0x138>
   19dc8:	e3580006 	cmp	r8, #6
   19dcc:	1a000030 	bne	19e94 <CTransportLayer::Listen(unsigned short, int)+0x138>
   19dd0:	e5963000 	ldr	r3, [r6]
   19dd4:	e3530000 	cmp	r3, #0
   19dd8:	0a000021 	beq	19e64 <CTransportLayer::Listen(unsigned short, int)+0x108>
   19ddc:	e5963004 	ldr	r3, [r6, #4]
   19de0:	e3530000 	cmp	r3, #0
   19de4:	0a000022 	beq	19e74 <CTransportLayer::Listen(unsigned short, int)+0x118>
   19de8:	e3a000e0 	mov	r0, #224	; 0xe0
   19dec:	eb00442b 	bl	2aea0 <operator new(unsigned int)>
   19df0:	e8960006 	ldm	r6, {r1, r2}
   19df4:	e1a03007 	mov	r3, r7
   19df8:	e1a07000 	mov	r7, r0
   19dfc:	eb0010dc 	bl	1e174 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   19e00:	e1a01004 	mov	r1, r4
   19e04:	e1a00005 	mov	r0, r5
   19e08:	eb00363f 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19e0c:	e1a01004 	mov	r1, r4
   19e10:	e5807000 	str	r7, [r0]
   19e14:	e1a00005 	mov	r0, r5
   19e18:	eb00363b 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19e1c:	e5903000 	ldr	r3, [r0]
   19e20:	e3530000 	cmp	r3, #0
   19e24:	0a000016 	beq	19e84 <CTransportLayer::Listen(unsigned short, int)+0x128>
   19e28:	e596301c 	ldr	r3, [r6, #28]
   19e2c:	e3530000 	cmp	r3, #0
   19e30:	1a000001 	bne	19e3c <CTransportLayer::Listen(unsigned short, int)+0xe0>
   19e34:	e1a00004 	mov	r0, r4
   19e38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19e3c:	eb00476e 	bl	2bbfc <LeaveCritical>
   19e40:	e1a00004 	mov	r0, r4
   19e44:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19e48:	e3a01000 	mov	r1, #0
   19e4c:	e1a00005 	mov	r0, r5
   19e50:	eb003665 	bl	277ec <CPtrArray::Append(void*)>
   19e54:	e1a04000 	mov	r4, r0
   19e58:	eaffffd8 	b	19dc0 <CTransportLayer::Listen(unsigned short, int)+0x64>
   19e5c:	eb00473c 	bl	2bb54 <EnterCritical>
   19e60:	eaffffc4 	b	19d78 <CTransportLayer::Listen(unsigned short, int)+0x1c>
   19e64:	e59f2048 	ldr	r2, [pc, #72]	; 19eb4 <CTransportLayer::Listen(unsigned short, int)+0x158>
   19e68:	e59f1048 	ldr	r1, [pc, #72]	; 19eb8 <CTransportLayer::Listen(unsigned short, int)+0x15c>
   19e6c:	e59f0048 	ldr	r0, [pc, #72]	; 19ebc <CTransportLayer::Listen(unsigned short, int)+0x160>
   19e70:	eb002a03 	bl	24684 <assertion_failed>
   19e74:	e59f2044 	ldr	r2, [pc, #68]	; 19ec0 <CTransportLayer::Listen(unsigned short, int)+0x164>
   19e78:	e59f1038 	ldr	r1, [pc, #56]	; 19eb8 <CTransportLayer::Listen(unsigned short, int)+0x15c>
   19e7c:	e59f0040 	ldr	r0, [pc, #64]	; 19ec4 <CTransportLayer::Listen(unsigned short, int)+0x168>
   19e80:	eb0029ff 	bl	24684 <assertion_failed>
   19e84:	e59f203c 	ldr	r2, [pc, #60]	; 19ec8 <CTransportLayer::Listen(unsigned short, int)+0x16c>
   19e88:	e59f1028 	ldr	r1, [pc, #40]	; 19eb8 <CTransportLayer::Listen(unsigned short, int)+0x15c>
   19e8c:	e59f0038 	ldr	r0, [pc, #56]	; 19ecc <CTransportLayer::Listen(unsigned short, int)+0x170>
   19e90:	eb0029fb 	bl	24684 <assertion_failed>
   19e94:	e596301c 	ldr	r3, [r6, #28]
   19e98:	e3530000 	cmp	r3, #0
   19e9c:	1a000001 	bne	19ea8 <CTransportLayer::Listen(unsigned short, int)+0x14c>
   19ea0:	e3e00000 	mvn	r0, #0
   19ea4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19ea8:	eb004753 	bl	2bbfc <LeaveCritical>
   19eac:	e3e00000 	mvn	r0, #0
   19eb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19eb4:	0000011e 	.word	0x0000011e
   19eb8:	000432bc 	.word	0x000432bc
   19ebc:	000432d0 	.word	0x000432d0
   19ec0:	0000011f 	.word	0x0000011f
   19ec4:	000432e4 	.word	0x000432e4
   19ec8:	00000121 	.word	0x00000121
   19ecc:	000432fc 	.word	0x000432fc

00019ed0 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>:
   19ed0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19ed4:	e2535000 	subs	r5, r3, #0
   19ed8:	ba00001f 	blt	19f5c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x8c>
   19edc:	e2804008 	add	r4, r0, #8
   19ee0:	e1a00004 	mov	r0, r4
   19ee4:	e1a06001 	mov	r6, r1
   19ee8:	e1a07002 	mov	r7, r2
   19eec:	eb003604 	bl	27704 <CPtrArray::GetCount() const>
   19ef0:	e1500005 	cmp	r0, r5
   19ef4:	da000012 	ble	19f44 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x74>
   19ef8:	e1a01005 	mov	r1, r5
   19efc:	e1a00004 	mov	r0, r4
   19f00:	eb003601 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19f04:	e5903000 	ldr	r3, [r0]
   19f08:	e3530000 	cmp	r3, #0
   19f0c:	0a00000c 	beq	19f44 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x74>
   19f10:	e3560000 	cmp	r6, #0
   19f14:	0a000014 	beq	19f6c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x9c>
   19f18:	e3570000 	cmp	r7, #0
   19f1c:	0a000016 	beq	19f7c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xac>
   19f20:	e1a01005 	mov	r1, r5
   19f24:	e1a00004 	mov	r0, r4
   19f28:	eb0035f7 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19f2c:	e5900000 	ldr	r0, [r0]
   19f30:	e59f2054 	ldr	r2, [pc, #84]	; 19f8c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xbc>
   19f34:	e5903000 	ldr	r3, [r0]
   19f38:	e593300c 	ldr	r3, [r3, #12]
   19f3c:	e1530002 	cmp	r3, r2
   19f40:	1a000001 	bne	19f4c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x7c>
   19f44:	e3e00000 	mvn	r0, #0
   19f48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19f4c:	e1a02007 	mov	r2, r7
   19f50:	e1a01006 	mov	r1, r6
   19f54:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   19f58:	e12fff13 	bx	r3
   19f5c:	e59f202c 	ldr	r2, [pc, #44]	; 19f90 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc0>
   19f60:	e59f102c 	ldr	r1, [pc, #44]	; 19f94 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   19f64:	e59f002c 	ldr	r0, [pc, #44]	; 19f98 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc8>
   19f68:	eb0029c5 	bl	24684 <assertion_failed>
   19f6c:	e59f2028 	ldr	r2, [pc, #40]	; 19f9c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xcc>
   19f70:	e59f101c 	ldr	r1, [pc, #28]	; 19f94 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   19f74:	e59f0024 	ldr	r0, [pc, #36]	; 19fa0 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xd0>
   19f78:	eb0029c1 	bl	24684 <assertion_failed>
   19f7c:	e59f2020 	ldr	r2, [pc, #32]	; 19fa4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xd4>
   19f80:	e59f100c 	ldr	r1, [pc, #12]	; 19f94 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   19f84:	e59f001c 	ldr	r0, [pc, #28]	; 19fa8 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xd8>
   19f88:	eb0029bd 	bl	24684 <assertion_failed>
   19f8c:	0001a884 	.word	0x0001a884
   19f90:	0000012a 	.word	0x0000012a
   19f94:	000432bc 	.word	0x000432bc
   19f98:	00043314 	.word	0x00043314
   19f9c:	00000131 	.word	0x00000131
   19fa0:	00043328 	.word	0x00043328
   19fa4:	00000132 	.word	0x00000132
   19fa8:	00043338 	.word	0x00043338

00019fac <CTransportLayer::Disconnect(int)>:
   19fac:	e92d4070 	push	{r4, r5, r6, lr}
   19fb0:	e2515000 	subs	r5, r1, #0
   19fb4:	ba000017 	blt	1a018 <CTransportLayer::Disconnect(int)+0x6c>
   19fb8:	e2804008 	add	r4, r0, #8
   19fbc:	e1a00004 	mov	r0, r4
   19fc0:	eb0035cf 	bl	27704 <CPtrArray::GetCount() const>
   19fc4:	e1500005 	cmp	r0, r5
   19fc8:	da00000e 	ble	1a008 <CTransportLayer::Disconnect(int)+0x5c>
   19fcc:	e1a01005 	mov	r1, r5
   19fd0:	e1a00004 	mov	r0, r4
   19fd4:	eb0035cc 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19fd8:	e5903000 	ldr	r3, [r0]
   19fdc:	e3530000 	cmp	r3, #0
   19fe0:	0a000008 	beq	1a008 <CTransportLayer::Disconnect(int)+0x5c>
   19fe4:	e1a01005 	mov	r1, r5
   19fe8:	e1a00004 	mov	r0, r4
   19fec:	eb0035c6 	bl	2770c <CPtrArray::operator[](unsigned int)>
   19ff0:	e5900000 	ldr	r0, [r0]
   19ff4:	e59f202c 	ldr	r2, [pc, #44]	; 1a028 <CTransportLayer::Disconnect(int)+0x7c>
   19ff8:	e5903000 	ldr	r3, [r0]
   19ffc:	e5933010 	ldr	r3, [r3, #16]
   1a000:	e1530002 	cmp	r3, r2
   1a004:	1a000001 	bne	1a010 <CTransportLayer::Disconnect(int)+0x64>
   1a008:	e3e00000 	mvn	r0, #0
   1a00c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a010:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a014:	e12fff13 	bx	r3
   1a018:	e3a02f4e 	mov	r2, #312	; 0x138
   1a01c:	e59f1008 	ldr	r1, [pc, #8]	; 1a02c <CTransportLayer::Disconnect(int)+0x80>
   1a020:	e59f0008 	ldr	r0, [pc, #8]	; 1a030 <CTransportLayer::Disconnect(int)+0x84>
   1a024:	eb002996 	bl	24684 <assertion_failed>
   1a028:	0001a88c 	.word	0x0001a88c
   1a02c:	000432bc 	.word	0x000432bc
   1a030:	00043314 	.word	0x00043314

0001a034 <CTransportLayer::Send(void const*, unsigned int, int, int)>:
   1a034:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a038:	e59d5018 	ldr	r5, [sp, #24]
   1a03c:	e3550000 	cmp	r5, #0
   1a040:	ba000022 	blt	1a0d0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x9c>
   1a044:	e2804008 	add	r4, r0, #8
   1a048:	e1a00004 	mov	r0, r4
   1a04c:	e1a06001 	mov	r6, r1
   1a050:	e1a08002 	mov	r8, r2
   1a054:	e1a07003 	mov	r7, r3
   1a058:	eb0035a9 	bl	27704 <CPtrArray::GetCount() const>
   1a05c:	e1500005 	cmp	r0, r5
   1a060:	da000012 	ble	1a0b0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x7c>
   1a064:	e1a01005 	mov	r1, r5
   1a068:	e1a00004 	mov	r0, r4
   1a06c:	eb0035a6 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a070:	e5903000 	ldr	r3, [r0]
   1a074:	e3530000 	cmp	r3, #0
   1a078:	0a00000c 	beq	1a0b0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x7c>
   1a07c:	e3560000 	cmp	r6, #0
   1a080:	0a000016 	beq	1a0e0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xac>
   1a084:	e3580000 	cmp	r8, #0
   1a088:	0a000018 	beq	1a0f0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xbc>
   1a08c:	e1a01005 	mov	r1, r5
   1a090:	e1a00004 	mov	r0, r4
   1a094:	eb00359c 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a098:	e5900000 	ldr	r0, [r0]
   1a09c:	e59f305c 	ldr	r3, [pc, #92]	; 1a100 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xcc>
   1a0a0:	e5902000 	ldr	r2, [r0]
   1a0a4:	e592e014 	ldr	lr, [r2, #20]
   1a0a8:	e15e0003 	cmp	lr, r3
   1a0ac:	1a000001 	bne	1a0b8 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x84>
   1a0b0:	e3e00000 	mvn	r0, #0
   1a0b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a0b8:	e1a03007 	mov	r3, r7
   1a0bc:	e1a02008 	mov	r2, r8
   1a0c0:	e1a01006 	mov	r1, r6
   1a0c4:	e1a0c00e 	mov	ip, lr
   1a0c8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a0cc:	e12fff1c 	bx	ip
   1a0d0:	e3a02f51 	mov	r2, #324	; 0x144
   1a0d4:	e59f1028 	ldr	r1, [pc, #40]	; 1a104 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd0>
   1a0d8:	e59f0028 	ldr	r0, [pc, #40]	; 1a108 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd4>
   1a0dc:	eb002968 	bl	24684 <assertion_failed>
   1a0e0:	e59f2024 	ldr	r2, [pc, #36]	; 1a10c <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd8>
   1a0e4:	e59f1018 	ldr	r1, [pc, #24]	; 1a104 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd0>
   1a0e8:	e59f0020 	ldr	r0, [pc, #32]	; 1a110 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xdc>
   1a0ec:	eb002964 	bl	24684 <assertion_failed>
   1a0f0:	e3a02f53 	mov	r2, #332	; 0x14c
   1a0f4:	e59f1008 	ldr	r1, [pc, #8]	; 1a104 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd0>
   1a0f8:	e59f0014 	ldr	r0, [pc, #20]	; 1a114 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xe0>
   1a0fc:	eb002960 	bl	24684 <assertion_failed>
   1a100:	0001a894 	.word	0x0001a894
   1a104:	000432bc 	.word	0x000432bc
   1a108:	00043314 	.word	0x00043314
   1a10c:	0000014b 	.word	0x0000014b
   1a110:	0004334c 	.word	0x0004334c
   1a114:	00043358 	.word	0x00043358

0001a118 <CTransportLayer::Receive(void*, int, int)>:
   1a118:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a11c:	e2535000 	subs	r5, r3, #0
   1a120:	ba00001d 	blt	1a19c <CTransportLayer::Receive(void*, int, int)+0x84>
   1a124:	e2804008 	add	r4, r0, #8
   1a128:	e1a00004 	mov	r0, r4
   1a12c:	e1a06001 	mov	r6, r1
   1a130:	e1a07002 	mov	r7, r2
   1a134:	eb003572 	bl	27704 <CPtrArray::GetCount() const>
   1a138:	e1500005 	cmp	r0, r5
   1a13c:	da000010 	ble	1a184 <CTransportLayer::Receive(void*, int, int)+0x6c>
   1a140:	e1a01005 	mov	r1, r5
   1a144:	e1a00004 	mov	r0, r4
   1a148:	eb00356f 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a14c:	e5903000 	ldr	r3, [r0]
   1a150:	e3530000 	cmp	r3, #0
   1a154:	0a00000a 	beq	1a184 <CTransportLayer::Receive(void*, int, int)+0x6c>
   1a158:	e3560000 	cmp	r6, #0
   1a15c:	0a000012 	beq	1a1ac <CTransportLayer::Receive(void*, int, int)+0x94>
   1a160:	e1a01005 	mov	r1, r5
   1a164:	e1a00004 	mov	r0, r4
   1a168:	eb003567 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a16c:	e5900000 	ldr	r0, [r0]
   1a170:	e59f2044 	ldr	r2, [pc, #68]	; 1a1bc <CTransportLayer::Receive(void*, int, int)+0xa4>
   1a174:	e5903000 	ldr	r3, [r0]
   1a178:	e5933018 	ldr	r3, [r3, #24]
   1a17c:	e1530002 	cmp	r3, r2
   1a180:	1a000001 	bne	1a18c <CTransportLayer::Receive(void*, int, int)+0x74>
   1a184:	e3e00000 	mvn	r0, #0
   1a188:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a18c:	e1a02007 	mov	r2, r7
   1a190:	e1a01006 	mov	r1, r6
   1a194:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a198:	e12fff13 	bx	r3
   1a19c:	e59f201c 	ldr	r2, [pc, #28]	; 1a1c0 <CTransportLayer::Receive(void*, int, int)+0xa8>
   1a1a0:	e59f101c 	ldr	r1, [pc, #28]	; 1a1c4 <CTransportLayer::Receive(void*, int, int)+0xac>
   1a1a4:	e59f001c 	ldr	r0, [pc, #28]	; 1a1c8 <CTransportLayer::Receive(void*, int, int)+0xb0>
   1a1a8:	eb002935 	bl	24684 <assertion_failed>
   1a1ac:	e59f2018 	ldr	r2, [pc, #24]	; 1a1cc <CTransportLayer::Receive(void*, int, int)+0xb4>
   1a1b0:	e59f100c 	ldr	r1, [pc, #12]	; 1a1c4 <CTransportLayer::Receive(void*, int, int)+0xac>
   1a1b4:	e59f0014 	ldr	r0, [pc, #20]	; 1a1d0 <CTransportLayer::Receive(void*, int, int)+0xb8>
   1a1b8:	eb002931 	bl	24684 <assertion_failed>
   1a1bc:	0001a89c 	.word	0x0001a89c
   1a1c0:	00000152 	.word	0x00000152
   1a1c4:	000432bc 	.word	0x000432bc
   1a1c8:	00043314 	.word	0x00043314
   1a1cc:	00000159 	.word	0x00000159
   1a1d0:	00040460 	.word	0x00040460

0001a1d4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>:
   1a1d4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a1d8:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   1a1dc:	e59d9020 	ldr	r9, [sp, #32]
   1a1e0:	e3550000 	cmp	r5, #0
   1a1e4:	e1dda2b4 	ldrh	sl, [sp, #36]	; 0x24
   1a1e8:	ba000024 	blt	1a280 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xac>
   1a1ec:	e2804008 	add	r4, r0, #8
   1a1f0:	e1a00004 	mov	r0, r4
   1a1f4:	e1a06001 	mov	r6, r1
   1a1f8:	e1a08002 	mov	r8, r2
   1a1fc:	e1a07003 	mov	r7, r3
   1a200:	eb00353f 	bl	27704 <CPtrArray::GetCount() const>
   1a204:	e1500005 	cmp	r0, r5
   1a208:	da000012 	ble	1a258 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x84>
   1a20c:	e1a01005 	mov	r1, r5
   1a210:	e1a00004 	mov	r0, r4
   1a214:	eb00353c 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a218:	e5903000 	ldr	r3, [r0]
   1a21c:	e3530000 	cmp	r3, #0
   1a220:	0a00000c 	beq	1a258 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x84>
   1a224:	e3560000 	cmp	r6, #0
   1a228:	0a000018 	beq	1a290 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xbc>
   1a22c:	e3580000 	cmp	r8, #0
   1a230:	0a00001a 	beq	1a2a0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xcc>
   1a234:	e1a01005 	mov	r1, r5
   1a238:	e1a00004 	mov	r0, r4
   1a23c:	eb003532 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a240:	e5900000 	ldr	r0, [r0]
   1a244:	e59f3064 	ldr	r3, [pc, #100]	; 1a2b0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xdc>
   1a248:	e5902000 	ldr	r2, [r0]
   1a24c:	e592e01c 	ldr	lr, [r2, #28]
   1a250:	e15e0003 	cmp	lr, r3
   1a254:	1a000001 	bne	1a260 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x8c>
   1a258:	e3e00000 	mvn	r0, #0
   1a25c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a260:	e1a03007 	mov	r3, r7
   1a264:	e1a02008 	mov	r2, r8
   1a268:	e1a01006 	mov	r1, r6
   1a26c:	e1a0c00e 	mov	ip, lr
   1a270:	e58da024 	str	sl, [sp, #36]	; 0x24
   1a274:	e58d9020 	str	r9, [sp, #32]
   1a278:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a27c:	e12fff1c 	bx	ip
   1a280:	e3a02e16 	mov	r2, #352	; 0x160
   1a284:	e59f1028 	ldr	r1, [pc, #40]	; 1a2b4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   1a288:	e59f0028 	ldr	r0, [pc, #40]	; 1a2b8 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe4>
   1a28c:	eb0028fc 	bl	24684 <assertion_failed>
   1a290:	e59f2024 	ldr	r2, [pc, #36]	; 1a2bc <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe8>
   1a294:	e59f1018 	ldr	r1, [pc, #24]	; 1a2b4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   1a298:	e59f0020 	ldr	r0, [pc, #32]	; 1a2c0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xec>
   1a29c:	eb0028f8 	bl	24684 <assertion_failed>
   1a2a0:	e3a02f5a 	mov	r2, #360	; 0x168
   1a2a4:	e59f1008 	ldr	r1, [pc, #8]	; 1a2b4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   1a2a8:	e59f0014 	ldr	r0, [pc, #20]	; 1a2c4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xf0>
   1a2ac:	eb0028f4 	bl	24684 <assertion_failed>
   1a2b0:	0001a8a4 	.word	0x0001a8a4
   1a2b4:	000432bc 	.word	0x000432bc
   1a2b8:	00043314 	.word	0x00043314
   1a2bc:	00000167 	.word	0x00000167
   1a2c0:	0004334c 	.word	0x0004334c
   1a2c4:	00043358 	.word	0x00043358

0001a2c8 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>:
   1a2c8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a2cc:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1a2d0:	e59d9020 	ldr	r9, [sp, #32]
   1a2d4:	e3550000 	cmp	r5, #0
   1a2d8:	ba000021 	blt	1a364 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x9c>
   1a2dc:	e2804008 	add	r4, r0, #8
   1a2e0:	e1a00004 	mov	r0, r4
   1a2e4:	e1a06001 	mov	r6, r1
   1a2e8:	e1a08002 	mov	r8, r2
   1a2ec:	e1a07003 	mov	r7, r3
   1a2f0:	eb003503 	bl	27704 <CPtrArray::GetCount() const>
   1a2f4:	e1500005 	cmp	r0, r5
   1a2f8:	da000010 	ble	1a340 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x78>
   1a2fc:	e1a01005 	mov	r1, r5
   1a300:	e1a00004 	mov	r0, r4
   1a304:	eb003500 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a308:	e5903000 	ldr	r3, [r0]
   1a30c:	e3530000 	cmp	r3, #0
   1a310:	0a00000a 	beq	1a340 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x78>
   1a314:	e3560000 	cmp	r6, #0
   1a318:	0a000015 	beq	1a374 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xac>
   1a31c:	e1a01005 	mov	r1, r5
   1a320:	e1a00004 	mov	r0, r4
   1a324:	eb0034f8 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a328:	e5900000 	ldr	r0, [r0]
   1a32c:	e59f3050 	ldr	r3, [pc, #80]	; 1a384 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xbc>
   1a330:	e5902000 	ldr	r2, [r0]
   1a334:	e592e020 	ldr	lr, [r2, #32]
   1a338:	e15e0003 	cmp	lr, r3
   1a33c:	1a000001 	bne	1a348 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x80>
   1a340:	e3e00000 	mvn	r0, #0
   1a344:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a348:	e1a03007 	mov	r3, r7
   1a34c:	e1a02008 	mov	r2, r8
   1a350:	e1a01006 	mov	r1, r6
   1a354:	e1a0c00e 	mov	ip, lr
   1a358:	e58d9020 	str	r9, [sp, #32]
   1a35c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a360:	e12fff1c 	bx	ip
   1a364:	e3a02e17 	mov	r2, #368	; 0x170
   1a368:	e59f1018 	ldr	r1, [pc, #24]	; 1a388 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xc0>
   1a36c:	e59f0018 	ldr	r0, [pc, #24]	; 1a38c <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xc4>
   1a370:	eb0028c3 	bl	24684 <assertion_failed>
   1a374:	e59f2014 	ldr	r2, [pc, #20]	; 1a390 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xc8>
   1a378:	e59f1008 	ldr	r1, [pc, #8]	; 1a388 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xc0>
   1a37c:	e59f0010 	ldr	r0, [pc, #16]	; 1a394 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xcc>
   1a380:	eb0028bf 	bl	24684 <assertion_failed>
   1a384:	0001a8ac 	.word	0x0001a8ac
   1a388:	000432bc 	.word	0x000432bc
   1a38c:	00043314 	.word	0x00043314
   1a390:	00000177 	.word	0x00000177
   1a394:	00040460 	.word	0x00040460

0001a398 <CTransportLayer::SetOptionBroadcast(bool, int)>:
   1a398:	e92d4070 	push	{r4, r5, r6, lr}
   1a39c:	e2525000 	subs	r5, r2, #0
   1a3a0:	ba000019 	blt	1a40c <CTransportLayer::SetOptionBroadcast(bool, int)+0x74>
   1a3a4:	e2804008 	add	r4, r0, #8
   1a3a8:	e1a00004 	mov	r0, r4
   1a3ac:	e1a06001 	mov	r6, r1
   1a3b0:	eb0034d3 	bl	27704 <CPtrArray::GetCount() const>
   1a3b4:	e1500005 	cmp	r0, r5
   1a3b8:	da00000e 	ble	1a3f8 <CTransportLayer::SetOptionBroadcast(bool, int)+0x60>
   1a3bc:	e1a01005 	mov	r1, r5
   1a3c0:	e1a00004 	mov	r0, r4
   1a3c4:	eb0034d0 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a3c8:	e5903000 	ldr	r3, [r0]
   1a3cc:	e3530000 	cmp	r3, #0
   1a3d0:	0a000008 	beq	1a3f8 <CTransportLayer::SetOptionBroadcast(bool, int)+0x60>
   1a3d4:	e1a01005 	mov	r1, r5
   1a3d8:	e1a00004 	mov	r0, r4
   1a3dc:	eb0034ca 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a3e0:	e5900000 	ldr	r0, [r0]
   1a3e4:	e59f2030 	ldr	r2, [pc, #48]	; 1a41c <CTransportLayer::SetOptionBroadcast(bool, int)+0x84>
   1a3e8:	e5903000 	ldr	r3, [r0]
   1a3ec:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1a3f0:	e1530002 	cmp	r3, r2
   1a3f4:	1a000001 	bne	1a400 <CTransportLayer::SetOptionBroadcast(bool, int)+0x68>
   1a3f8:	e3e00000 	mvn	r0, #0
   1a3fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a400:	e1a01006 	mov	r1, r6
   1a404:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a408:	e12fff13 	bx	r3
   1a40c:	e59f200c 	ldr	r2, [pc, #12]	; 1a420 <CTransportLayer::SetOptionBroadcast(bool, int)+0x88>
   1a410:	e59f100c 	ldr	r1, [pc, #12]	; 1a424 <CTransportLayer::SetOptionBroadcast(bool, int)+0x8c>
   1a414:	e59f000c 	ldr	r0, [pc, #12]	; 1a428 <CTransportLayer::SetOptionBroadcast(bool, int)+0x90>
   1a418:	eb002899 	bl	24684 <assertion_failed>
   1a41c:	0001a8b4 	.word	0x0001a8b4
   1a420:	0000017e 	.word	0x0000017e
   1a424:	000432bc 	.word	0x000432bc
   1a428:	00043314 	.word	0x00043314

0001a42c <CTransportLayer::IsConnected(int) const>:
   1a42c:	e92d4070 	push	{r4, r5, r6, lr}
   1a430:	e2515000 	subs	r5, r1, #0
   1a434:	ba000015 	blt	1a490 <CTransportLayer::IsConnected(int) const+0x64>
   1a438:	e2804008 	add	r4, r0, #8
   1a43c:	e1a00004 	mov	r0, r4
   1a440:	eb0034af 	bl	27704 <CPtrArray::GetCount() const>
   1a444:	e1500005 	cmp	r0, r5
   1a448:	ca000001 	bgt	1a454 <CTransportLayer::IsConnected(int) const+0x28>
   1a44c:	e3a00000 	mov	r0, #0
   1a450:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a454:	e1a01005 	mov	r1, r5
   1a458:	e1a00004 	mov	r0, r4
   1a45c:	eb0034c6 	bl	2777c <CPtrArray::operator[](unsigned int) const>
   1a460:	e3500000 	cmp	r0, #0
   1a464:	0afffff8 	beq	1a44c <CTransportLayer::IsConnected(int) const+0x20>
   1a468:	e1a01005 	mov	r1, r5
   1a46c:	e1a00004 	mov	r0, r4
   1a470:	eb0034c1 	bl	2777c <CPtrArray::operator[](unsigned int) const>
   1a474:	e5903000 	ldr	r3, [r0]
   1a478:	e59f2020 	ldr	r2, [pc, #32]	; 1a4a0 <CTransportLayer::IsConnected(int) const+0x74>
   1a47c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   1a480:	e1530002 	cmp	r3, r2
   1a484:	0afffff0 	beq	1a44c <CTransportLayer::IsConnected(int) const+0x20>
   1a488:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a48c:	e12fff13 	bx	r3
   1a490:	e59f200c 	ldr	r2, [pc, #12]	; 1a4a4 <CTransportLayer::IsConnected(int) const+0x78>
   1a494:	e59f100c 	ldr	r1, [pc, #12]	; 1a4a8 <CTransportLayer::IsConnected(int) const+0x7c>
   1a498:	e59f000c 	ldr	r0, [pc, #12]	; 1a4ac <CTransportLayer::IsConnected(int) const+0x80>
   1a49c:	eb002878 	bl	24684 <assertion_failed>
   1a4a0:	0001a8bc 	.word	0x0001a8bc
   1a4a4:	0000018a 	.word	0x0000018a
   1a4a8:	000432bc 	.word	0x000432bc
   1a4ac:	00043314 	.word	0x00043314

0001a4b0 <CTransportLayer::GetForeignIP(int) const>:
   1a4b0:	e92d4070 	push	{r4, r5, r6, lr}
   1a4b4:	e2515000 	subs	r5, r1, #0
   1a4b8:	ba000010 	blt	1a500 <CTransportLayer::GetForeignIP(int) const+0x50>
   1a4bc:	e2804008 	add	r4, r0, #8
   1a4c0:	e1a00004 	mov	r0, r4
   1a4c4:	eb00348e 	bl	27704 <CPtrArray::GetCount() const>
   1a4c8:	e1500005 	cmp	r0, r5
   1a4cc:	da000009 	ble	1a4f8 <CTransportLayer::GetForeignIP(int) const+0x48>
   1a4d0:	e1a01005 	mov	r1, r5
   1a4d4:	e1a00004 	mov	r0, r4
   1a4d8:	eb0034a7 	bl	2777c <CPtrArray::operator[](unsigned int) const>
   1a4dc:	e3500000 	cmp	r0, #0
   1a4e0:	0a000004 	beq	1a4f8 <CTransportLayer::GetForeignIP(int) const+0x48>
   1a4e4:	e1a01005 	mov	r1, r5
   1a4e8:	e1a00004 	mov	r0, r4
   1a4ec:	eb0034a2 	bl	2777c <CPtrArray::operator[](unsigned int) const>
   1a4f0:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a4f4:	ea000bed 	b	1d4b0 <CNetConnection::GetForeignIP() const>
   1a4f8:	e3a00000 	mov	r0, #0
   1a4fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a500:	e59f2008 	ldr	r2, [pc, #8]	; 1a510 <CTransportLayer::GetForeignIP(int) const+0x60>
   1a504:	e59f1008 	ldr	r1, [pc, #8]	; 1a514 <CTransportLayer::GetForeignIP(int) const+0x64>
   1a508:	e59f0008 	ldr	r0, [pc, #8]	; 1a518 <CTransportLayer::GetForeignIP(int) const+0x68>
   1a50c:	eb00285c 	bl	24684 <assertion_failed>
   1a510:	00000196 	.word	0x00000196
   1a514:	000432bc 	.word	0x000432bc
   1a518:	00043314 	.word	0x00043314

0001a51c <CTransportLayer::~CTransportLayer()>:
   1a51c:	e3a03000 	mov	r3, #0
   1a520:	e92d4010 	push	{r4, lr}
   1a524:	e1a04000 	mov	r4, r0
   1a528:	e5803004 	str	r3, [r0, #4]
   1a52c:	e4803020 	str	r3, [r0], #32
   1a530:	eb001881 	bl	2073c <CTCPRejector::~CTCPRejector()>
   1a534:	e2840008 	add	r0, r4, #8
   1a538:	eb003466 	bl	276d8 <CPtrArray::~CPtrArray()>
   1a53c:	e1a00004 	mov	r0, r4
   1a540:	e8bd8010 	pop	{r4, pc}

0001a544 <CTransportLayer::Process()>:
   1a544:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a548:	e1a09000 	mov	r9, r0
   1a54c:	e24dde67 	sub	sp, sp, #1648	; 0x670
   1a550:	e24dd004 	sub	sp, sp, #4
   1a554:	e28d0020 	add	r0, sp, #32
   1a558:	e28d7028 	add	r7, sp, #40	; 0x28
   1a55c:	eb0019a6 	bl	20bfc <CIPAddress::CIPAddress()>
   1a560:	e1a00007 	mov	r0, r7
   1a564:	eb0019a4 	bl	20bfc <CIPAddress::CIPAddress()>
   1a568:	e5990004 	ldr	r0, [r9, #4]
   1a56c:	e3500000 	cmp	r0, #0
   1a570:	0a0000b8 	beq	1a858 <CTransportLayer::Process()+0x314>
   1a574:	e2894008 	add	r4, r9, #8
   1a578:	e28da01c 	add	sl, sp, #28
   1a57c:	e2896020 	add	r6, r9, #32
   1a580:	e88d0480 	stm	sp, {r7, sl}
   1a584:	e28d3020 	add	r3, sp, #32
   1a588:	e28d2018 	add	r2, sp, #24
   1a58c:	e28d1030 	add	r1, sp, #48	; 0x30
   1a590:	eb000255 	bl	1aeec <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>
   1a594:	e3500000 	cmp	r0, #0
   1a598:	0a000021 	beq	1a624 <CTransportLayer::Process()+0xe0>
   1a59c:	e3a05000 	mov	r5, #0
   1a5a0:	ea000015 	b	1a5fc <CTransportLayer::Process()+0xb8>
   1a5a4:	e1a01005 	mov	r1, r5
   1a5a8:	e1a00004 	mov	r0, r4
   1a5ac:	eb003456 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a5b0:	e5903000 	ldr	r3, [r0]
   1a5b4:	e3530000 	cmp	r3, #0
   1a5b8:	0a00000e 	beq	1a5f8 <CTransportLayer::Process()+0xb4>
   1a5bc:	e1a01005 	mov	r1, r5
   1a5c0:	e1a00004 	mov	r0, r4
   1a5c4:	eb003450 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a5c8:	e5900000 	ldr	r0, [r0]
   1a5cc:	e59d201c 	ldr	r2, [sp, #28]
   1a5d0:	e5903000 	ldr	r3, [r0]
   1a5d4:	e58d2004 	str	r2, [sp, #4]
   1a5d8:	e58d7000 	str	r7, [sp]
   1a5dc:	e5938034 	ldr	r8, [r3, #52]	; 0x34
   1a5e0:	e59d2018 	ldr	r2, [sp, #24]
   1a5e4:	e28d3020 	add	r3, sp, #32
   1a5e8:	e28d1030 	add	r1, sp, #48	; 0x30
   1a5ec:	e12fff38 	blx	r8
   1a5f0:	e3500000 	cmp	r0, #0
   1a5f4:	1a000004 	bne	1a60c <CTransportLayer::Process()+0xc8>
   1a5f8:	e2855001 	add	r5, r5, #1
   1a5fc:	e1a00004 	mov	r0, r4
   1a600:	eb00343f 	bl	27704 <CPtrArray::GetCount() const>
   1a604:	e1500005 	cmp	r0, r5
   1a608:	8affffe5 	bhi	1a5a4 <CTransportLayer::Process()+0x60>
   1a60c:	e1a00004 	mov	r0, r4
   1a610:	eb00343b 	bl	27704 <CPtrArray::GetCount() const>
   1a614:	e1500005 	cmp	r0, r5
   1a618:	9a00006e 	bls	1a7d8 <CTransportLayer::Process()+0x294>
   1a61c:	e5990004 	ldr	r0, [r9, #4]
   1a620:	eaffffd6 	b	1a580 <CTransportLayer::Process()+0x3c>
   1a624:	e59f823c 	ldr	r8, [pc, #572]	; 1a868 <CTransportLayer::Process()+0x324>
   1a628:	e28db016 	add	fp, sp, #22
   1a62c:	e28d3014 	add	r3, sp, #20
   1a630:	e58d3000 	str	r3, [sp]
   1a634:	e58da008 	str	sl, [sp, #8]
   1a638:	e58db004 	str	fp, [sp, #4]
   1a63c:	e1a03007 	mov	r3, r7
   1a640:	e5990004 	ldr	r0, [r9, #4]
   1a644:	e28d2020 	add	r2, sp, #32
   1a648:	e28d1013 	add	r1, sp, #19
   1a64c:	eb00026d 	bl	1b008 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>
   1a650:	e3500000 	cmp	r0, #0
   1a654:	0a000021 	beq	1a6e0 <CTransportLayer::Process()+0x19c>
   1a658:	e3a05000 	mov	r5, #0
   1a65c:	ea000000 	b	1a664 <CTransportLayer::Process()+0x120>
   1a660:	e2855001 	add	r5, r5, #1
   1a664:	e1a00004 	mov	r0, r4
   1a668:	eb003425 	bl	27704 <CPtrArray::GetCount() const>
   1a66c:	e1500005 	cmp	r0, r5
   1a670:	9affffed 	bls	1a62c <CTransportLayer::Process()+0xe8>
   1a674:	e1a01005 	mov	r1, r5
   1a678:	e1a00004 	mov	r0, r4
   1a67c:	eb003422 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a680:	e5903000 	ldr	r3, [r0]
   1a684:	e3530000 	cmp	r3, #0
   1a688:	0afffff4 	beq	1a660 <CTransportLayer::Process()+0x11c>
   1a68c:	e1a01005 	mov	r1, r5
   1a690:	e1a00004 	mov	r0, r4
   1a694:	eb00341c 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a698:	e5900000 	ldr	r0, [r0]
   1a69c:	e5903000 	ldr	r3, [r0]
   1a6a0:	e5936038 	ldr	r6, [r3, #56]	; 0x38
   1a6a4:	e1560008 	cmp	r6, r8
   1a6a8:	0affffec 	beq	1a660 <CTransportLayer::Process()+0x11c>
   1a6ac:	e59d101c 	ldr	r1, [sp, #28]
   1a6b0:	e1dd21b6 	ldrh	r2, [sp, #22]
   1a6b4:	e1dd31b4 	ldrh	r3, [sp, #20]
   1a6b8:	e58d1008 	str	r1, [sp, #8]
   1a6bc:	e58d2004 	str	r2, [sp, #4]
   1a6c0:	e58d3000 	str	r3, [sp]
   1a6c4:	e5dd1013 	ldrb	r1, [sp, #19]
   1a6c8:	e1a03007 	mov	r3, r7
   1a6cc:	e28d2020 	add	r2, sp, #32
   1a6d0:	e12fff36 	blx	r6
   1a6d4:	e3500000 	cmp	r0, #0
   1a6d8:	0affffe0 	beq	1a660 <CTransportLayer::Process()+0x11c>
   1a6dc:	eaffffd2 	b	1a62c <CTransportLayer::Process()+0xe8>
   1a6e0:	e1a05000 	mov	r5, r0
   1a6e4:	e1a0a000 	mov	sl, r0
   1a6e8:	e59f617c 	ldr	r6, [pc, #380]	; 1a86c <CTransportLayer::Process()+0x328>
   1a6ec:	e59f817c 	ldr	r8, [pc, #380]	; 1a870 <CTransportLayer::Process()+0x32c>
   1a6f0:	ea000016 	b	1a750 <CTransportLayer::Process()+0x20c>
   1a6f4:	e1a01005 	mov	r1, r5
   1a6f8:	e1a00004 	mov	r0, r4
   1a6fc:	eb003402 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a700:	e5903000 	ldr	r3, [r0]
   1a704:	e3530000 	cmp	r3, #0
   1a708:	0a00000f 	beq	1a74c <CTransportLayer::Process()+0x208>
   1a70c:	e1a01005 	mov	r1, r5
   1a710:	e1a00004 	mov	r0, r4
   1a714:	eb0033fc 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a718:	e5900000 	ldr	r0, [r0]
   1a71c:	e5903000 	ldr	r3, [r0]
   1a720:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1a724:	e1530006 	cmp	r3, r6
   1a728:	1a000033 	bne	1a7fc <CTransportLayer::Process()+0x2b8>
   1a72c:	e1a01005 	mov	r1, r5
   1a730:	e1a00004 	mov	r0, r4
   1a734:	eb0033f4 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a738:	e5900000 	ldr	r0, [r0]
   1a73c:	e5903000 	ldr	r3, [r0]
   1a740:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   1a744:	e1530008 	cmp	r3, r8
   1a748:	1a00003c 	bne	1a840 <CTransportLayer::Process()+0x2fc>
   1a74c:	e2855001 	add	r5, r5, #1
   1a750:	e1a00004 	mov	r0, r4
   1a754:	eb0033ea 	bl	27704 <CPtrArray::GetCount() const>
   1a758:	e1500005 	cmp	r0, r5
   1a75c:	8affffe4 	bhi	1a6f4 <CTransportLayer::Process()+0x1b0>
   1a760:	e599001c 	ldr	r0, [r9, #28]
   1a764:	e3500000 	cmp	r0, #0
   1a768:	1a000038 	bne	1a850 <CTransportLayer::Process()+0x30c>
   1a76c:	e1a00004 	mov	r0, r4
   1a770:	eb0033e3 	bl	27704 <CPtrArray::GetCount() const>
   1a774:	e3500000 	cmp	r0, #0
   1a778:	e2405001 	sub	r5, r0, #1
   1a77c:	1a000005 	bne	1a798 <CTransportLayer::Process()+0x254>
   1a780:	ea00000a 	b	1a7b0 <CTransportLayer::Process()+0x26c>
   1a784:	e1a00004 	mov	r0, r4
   1a788:	e2455001 	sub	r5, r5, #1
   1a78c:	eb003454 	bl	278e4 <CPtrArray::RemoveLast()>
   1a790:	e3750001 	cmn	r5, #1
   1a794:	0a000005 	beq	1a7b0 <CTransportLayer::Process()+0x26c>
   1a798:	e1a01005 	mov	r1, r5
   1a79c:	e1a00004 	mov	r0, r4
   1a7a0:	eb0033d9 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a7a4:	e5903000 	ldr	r3, [r0]
   1a7a8:	e3530000 	cmp	r3, #0
   1a7ac:	0afffff4 	beq	1a784 <CTransportLayer::Process()+0x240>
   1a7b0:	e599301c 	ldr	r3, [r9, #28]
   1a7b4:	e3530000 	cmp	r3, #0
   1a7b8:	1a000022 	bne	1a848 <CTransportLayer::Process()+0x304>
   1a7bc:	e1a00007 	mov	r0, r7
   1a7c0:	eb001923 	bl	20c54 <CIPAddress::~CIPAddress()>
   1a7c4:	e28d0020 	add	r0, sp, #32
   1a7c8:	eb001921 	bl	20c54 <CIPAddress::~CIPAddress()>
   1a7cc:	e28dde67 	add	sp, sp, #1648	; 0x670
   1a7d0:	e28dd004 	add	sp, sp, #4
   1a7d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7d8:	e59d301c 	ldr	r3, [sp, #28]
   1a7dc:	e1a00006 	mov	r0, r6
   1a7e0:	e58d3004 	str	r3, [sp, #4]
   1a7e4:	e59d2018 	ldr	r2, [sp, #24]
   1a7e8:	e58d7000 	str	r7, [sp]
   1a7ec:	e28d3020 	add	r3, sp, #32
   1a7f0:	e28d1030 	add	r1, sp, #48	; 0x30
   1a7f4:	eb001823 	bl	20888 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>
   1a7f8:	eaffff87 	b	1a61c <CTransportLayer::Process()+0xd8>
   1a7fc:	e12fff33 	blx	r3
   1a800:	e3500000 	cmp	r0, #0
   1a804:	0affffc8 	beq	1a72c <CTransportLayer::Process()+0x1e8>
   1a808:	e1a01005 	mov	r1, r5
   1a80c:	e1a00004 	mov	r0, r4
   1a810:	eb0033bd 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a814:	e5900000 	ldr	r0, [r0]
   1a818:	e3500000 	cmp	r0, #0
   1a81c:	0a000002 	beq	1a82c <CTransportLayer::Process()+0x2e8>
   1a820:	e5903000 	ldr	r3, [r0]
   1a824:	e5933004 	ldr	r3, [r3, #4]
   1a828:	e12fff33 	blx	r3
   1a82c:	e1a01005 	mov	r1, r5
   1a830:	e1a00004 	mov	r0, r4
   1a834:	eb0033b4 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1a838:	e580a000 	str	sl, [r0]
   1a83c:	eaffffc2 	b	1a74c <CTransportLayer::Process()+0x208>
   1a840:	e12fff33 	blx	r3
   1a844:	eaffffc0 	b	1a74c <CTransportLayer::Process()+0x208>
   1a848:	eb0044eb 	bl	2bbfc <LeaveCritical>
   1a84c:	eaffffda 	b	1a7bc <CTransportLayer::Process()+0x278>
   1a850:	eb0044bf 	bl	2bb54 <EnterCritical>
   1a854:	eaffffc4 	b	1a76c <CTransportLayer::Process()+0x228>
   1a858:	e3a0203a 	mov	r2, #58	; 0x3a
   1a85c:	e59f1010 	ldr	r1, [pc, #16]	; 1a874 <CTransportLayer::Process()+0x330>
   1a860:	e59f0010 	ldr	r0, [pc, #16]	; 1a878 <CTransportLayer::Process()+0x334>
   1a864:	eb002786 	bl	24684 <assertion_failed>
   1a868:	0001a8d0 	.word	0x0001a8d0
   1a86c:	0001a8c4 	.word	0x0001a8c4
   1a870:	0001a8cc 	.word	0x0001a8cc
   1a874:	000432bc 	.word	0x000432bc
   1a878:	000432e4 	.word	0x000432e4

0001a87c <CTCPRejector::Connect()>:
   1a87c:	e3e00000 	mvn	r0, #0
   1a880:	e12fff1e 	bx	lr

0001a884 <CTCPRejector::Accept(CIPAddress*, unsigned short*)>:
   1a884:	e3e00000 	mvn	r0, #0
   1a888:	e12fff1e 	bx	lr

0001a88c <CTCPRejector::Close()>:
   1a88c:	e3e00000 	mvn	r0, #0
   1a890:	e12fff1e 	bx	lr

0001a894 <CTCPRejector::Send(void const*, unsigned int, int)>:
   1a894:	e3e00000 	mvn	r0, #0
   1a898:	e12fff1e 	bx	lr

0001a89c <CTCPRejector::Receive(void*, int)>:
   1a89c:	e3e00000 	mvn	r0, #0
   1a8a0:	e12fff1e 	bx	lr

0001a8a4 <CTCPRejector::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1a8a4:	e3e00000 	mvn	r0, #0
   1a8a8:	e12fff1e 	bx	lr

0001a8ac <CTCPRejector::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1a8ac:	e3e00000 	mvn	r0, #0
   1a8b0:	e12fff1e 	bx	lr

0001a8b4 <CTCPRejector::SetOptionBroadcast(bool)>:
   1a8b4:	e3e00000 	mvn	r0, #0
   1a8b8:	e12fff1e 	bx	lr

0001a8bc <CTCPRejector::IsConnected() const>:
   1a8bc:	e3a00000 	mov	r0, #0
   1a8c0:	e12fff1e 	bx	lr

0001a8c4 <CTCPRejector::IsTerminated() const>:
   1a8c4:	e3a00000 	mov	r0, #0
   1a8c8:	e12fff1e 	bx	lr

0001a8cc <CTCPRejector::Process()>:
   1a8cc:	e12fff1e 	bx	lr

0001a8d0 <CTCPRejector::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1a8d0:	e3a00000 	mov	r0, #0
   1a8d4:	e12fff1e 	bx	lr

0001a8d8 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]>:
   1a8d8:	e92d4010 	push	{r4, lr}
   1a8dc:	e59f2008 	ldr	r2, [pc, #8]	; 1a8ec <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]+0x14>
   1a8e0:	e59f1008 	ldr	r1, [pc, #8]	; 1a8f0 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]+0x18>
   1a8e4:	e59f0008 	ldr	r0, [pc, #8]	; 1a8f4 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]+0x1c>
   1a8e8:	eb002765 	bl	24684 <assertion_failed>
   1a8ec:	0000012b 	.word	0x0000012b
   1a8f0:	00043364 	.word	0x00043364
   1a8f4:	00043378 	.word	0x00043378

0001a8f8 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>:
   1a8f8:	e3a03000 	mov	r3, #0
   1a8fc:	e92d4010 	push	{r4, lr}
   1a900:	e1a04000 	mov	r4, r0
   1a904:	e880000e 	stm	r0, {r1, r2, r3}
   1a908:	e280000c 	add	r0, r0, #12
   1a90c:	eb001a07 	bl	21130 <CNetQueue::CNetQueue()>
   1a910:	e2840018 	add	r0, r4, #24
   1a914:	eb001a05 	bl	21130 <CNetQueue::CNetQueue()>
   1a918:	e2840024 	add	r0, r4, #36	; 0x24
   1a91c:	eb001a03 	bl	21130 <CNetQueue::CNetQueue()>
   1a920:	e2840030 	add	r0, r4, #48	; 0x30
   1a924:	eb0009f1 	bl	1d0f0 <CRouteCache::CRouteCache()>
   1a928:	e5943000 	ldr	r3, [r4]
   1a92c:	e3530000 	cmp	r3, #0
   1a930:	0a000004 	beq	1a948 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x50>
   1a934:	e5943004 	ldr	r3, [r4, #4]
   1a938:	e3530000 	cmp	r3, #0
   1a93c:	0a000005 	beq	1a958 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x60>
   1a940:	e1a00004 	mov	r0, r4
   1a944:	e8bd8010 	pop	{r4, pc}
   1a948:	e3a0201f 	mov	r2, #31
   1a94c:	e59f1014 	ldr	r1, [pc, #20]	; 1a968 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x70>
   1a950:	e59f0014 	ldr	r0, [pc, #20]	; 1a96c <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x74>
   1a954:	eb00274a 	bl	24684 <assertion_failed>
   1a958:	e3a02020 	mov	r2, #32
   1a95c:	e59f1004 	ldr	r1, [pc, #4]	; 1a968 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x70>
   1a960:	e59f0008 	ldr	r0, [pc, #8]	; 1a970 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x78>
   1a964:	eb002746 	bl	24684 <assertion_failed>
   1a968:	00043364 	.word	0x00043364
   1a96c:	000432d0 	.word	0x000432d0
   1a970:	0004338c 	.word	0x0004338c

0001a974 <CNetworkLayer::~CNetworkLayer()>:
   1a974:	e92d4070 	push	{r4, r5, r6, lr}
   1a978:	e5905008 	ldr	r5, [r0, #8]
   1a97c:	e1a04000 	mov	r4, r0
   1a980:	e3550000 	cmp	r5, #0
   1a984:	0a000004 	beq	1a99c <CNetworkLayer::~CNetworkLayer()+0x28>
   1a988:	e1a00005 	mov	r0, r5
   1a98c:	eb00083a 	bl	1ca7c <CICMPHandler::~CICMPHandler()>
   1a990:	e1a00005 	mov	r0, r5
   1a994:	e3a01010 	mov	r1, #16
   1a998:	eb00414e 	bl	2aed8 <operator delete(void*, unsigned int)>
   1a99c:	e3a03000 	mov	r3, #0
   1a9a0:	e1a00004 	mov	r0, r4
   1a9a4:	e5843008 	str	r3, [r4, #8]
   1a9a8:	e5843004 	str	r3, [r4, #4]
   1a9ac:	e4803030 	str	r3, [r0], #48	; 0x30
   1a9b0:	eb0009e9 	bl	1d15c <CRouteCache::~CRouteCache()>
   1a9b4:	e2840024 	add	r0, r4, #36	; 0x24
   1a9b8:	eb001a14 	bl	21210 <CNetQueue::~CNetQueue()>
   1a9bc:	e2840018 	add	r0, r4, #24
   1a9c0:	eb001a12 	bl	21210 <CNetQueue::~CNetQueue()>
   1a9c4:	e284000c 	add	r0, r4, #12
   1a9c8:	eb001a10 	bl	21210 <CNetQueue::~CNetQueue()>
   1a9cc:	e1a00004 	mov	r0, r4
   1a9d0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a9d4 <CNetworkLayer::Initialize()>:
   1a9d4:	e92d4030 	push	{r4, r5, lr}
   1a9d8:	e5903008 	ldr	r3, [r0, #8]
   1a9dc:	e24dd00c 	sub	sp, sp, #12
   1a9e0:	e3530000 	cmp	r3, #0
   1a9e4:	1a00000d 	bne	1aa20 <CNetworkLayer::Initialize()+0x4c>
   1a9e8:	e1a04000 	mov	r4, r0
   1a9ec:	e3a00010 	mov	r0, #16
   1a9f0:	eb00412a 	bl	2aea0 <operator new(unsigned int)>
   1a9f4:	e1a02004 	mov	r2, r4
   1a9f8:	e4921024 	ldr	r1, [r2], #36	; 0x24
   1a9fc:	e2843018 	add	r3, r4, #24
   1aa00:	e58d2000 	str	r2, [sp]
   1aa04:	e1a02004 	mov	r2, r4
   1aa08:	e1a05000 	mov	r5, r0
   1aa0c:	eb0007fa 	bl	1c9fc <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>
   1aa10:	e3a00001 	mov	r0, #1
   1aa14:	e5845008 	str	r5, [r4, #8]
   1aa18:	e28dd00c 	add	sp, sp, #12
   1aa1c:	e8bd8030 	pop	{r4, r5, pc}
   1aa20:	e3a0202e 	mov	r2, #46	; 0x2e
   1aa24:	e59f1004 	ldr	r1, [pc, #4]	; 1aa30 <CNetworkLayer::Initialize()+0x5c>
   1aa28:	e59f0004 	ldr	r0, [pc, #4]	; 1aa34 <CNetworkLayer::Initialize()+0x60>
   1aa2c:	eb002714 	bl	24684 <assertion_failed>
   1aa30:	00043364 	.word	0x00043364
   1aa34:	000433a0 	.word	0x000433a0

0001aa38 <CNetworkLayer::Process()>:
   1aa38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1aa3c:	e1a05000 	mov	r5, r0
   1aa40:	e5900000 	ldr	r0, [r0]
   1aa44:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1aa48:	e3500000 	cmp	r0, #0
   1aa4c:	0a000052 	beq	1ab9c <CNetworkLayer::Process()+0x164>
   1aa50:	eb00180e 	bl	20a90 <CNetConfig::GetIPAddress() const>
   1aa54:	e2506000 	subs	r6, r0, #0
   1aa58:	0a000053 	beq	1abac <CNetworkLayer::Process()+0x174>
   1aa5c:	e5950004 	ldr	r0, [r5, #4]
   1aa60:	e3500000 	cmp	r0, #0
   1aa64:	0a000054 	beq	1abbc <CNetworkLayer::Process()+0x184>
   1aa68:	e28d7008 	add	r7, sp, #8
   1aa6c:	ea000014 	b	1aac4 <CNetworkLayer::Process()+0x8c>
   1aa70:	e59d3004 	ldr	r3, [sp, #4]
   1aa74:	e3530014 	cmp	r3, #20
   1aa78:	9a000010 	bls	1aac0 <CNetworkLayer::Process()+0x88>
   1aa7c:	e5dd1010 	ldrb	r1, [sp, #16]
   1aa80:	e201100f 	and	r1, r1, #15
   1aa84:	e2412005 	sub	r2, r1, #5
   1aa88:	e3520001 	cmp	r2, #1
   1aa8c:	8a00000b 	bhi	1aac0 <CNetworkLayer::Process()+0x88>
   1aa90:	e1530101 	cmp	r3, r1, lsl #2
   1aa94:	e1a04101 	lsl	r4, r1, #2
   1aa98:	9a000008 	bls	1aac0 <CNetworkLayer::Process()+0x88>
   1aa9c:	e1a01004 	mov	r1, r4
   1aaa0:	e28d0010 	add	r0, sp, #16
   1aaa4:	eb001ae7 	bl	21648 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1aaa8:	e3500000 	cmp	r0, #0
   1aaac:	1a000003 	bne	1aac0 <CNetworkLayer::Process()+0x88>
   1aab0:	e5dd3010 	ldrb	r3, [sp, #16]
   1aab4:	e1a03243 	asr	r3, r3, #4
   1aab8:	e3530004 	cmp	r3, #4
   1aabc:	0a00000b 	beq	1aaf0 <CNetworkLayer::Process()+0xb8>
   1aac0:	e5950004 	ldr	r0, [r5, #4]
   1aac4:	e28d2004 	add	r2, sp, #4
   1aac8:	e28d1010 	add	r1, sp, #16
   1aacc:	eb000307 	bl	1b6f0 <CLinkLayer::Receive(void*, unsigned int*)>
   1aad0:	e3500000 	cmp	r0, #0
   1aad4:	1affffe5 	bne	1aa70 <CNetworkLayer::Process()+0x38>
   1aad8:	e5950008 	ldr	r0, [r5, #8]
   1aadc:	e3500000 	cmp	r0, #0
   1aae0:	0a000039 	beq	1abcc <CNetworkLayer::Process()+0x194>
   1aae4:	eb000823 	bl	1cb78 <CICMPHandler::Process()>
   1aae8:	e28dde65 	add	sp, sp, #1616	; 0x650
   1aaec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1aaf0:	e28d1020 	add	r1, sp, #32
   1aaf4:	e1a00007 	mov	r0, r7
   1aaf8:	eb0018d6 	bl	20e58 <CIPAddress::CIPAddress(unsigned char const*)>
   1aafc:	e1a00006 	mov	r0, r6
   1ab00:	eb00191c 	bl	20f78 <CIPAddress::IsNull() const>
   1ab04:	e3500000 	cmp	r0, #0
   1ab08:	0a000013 	beq	1ab5c <CNetworkLayer::Process()+0x124>
   1ab0c:	e1a00007 	mov	r0, r7
   1ab10:	eb001926 	bl	20fb0 <CIPAddress::IsBroadcast() const>
   1ab14:	e3500000 	cmp	r0, #0
   1ab18:	0a00000c 	beq	1ab50 <CNetworkLayer::Process()+0x118>
   1ab1c:	e1dd31b6 	ldrh	r3, [sp, #22]
   1ab20:	e3130020 	tst	r3, #32
   1ab24:	1a000009 	bne	1ab50 <CNetworkLayer::Process()+0x118>
   1ab28:	e6bf3fb3 	rev16	r3, r3
   1ab2c:	e2033c1f 	and	r3, r3, #7936	; 0x1f00
   1ab30:	e3530000 	cmp	r3, #0
   1ab34:	1a000005 	bne	1ab50 <CNetworkLayer::Process()+0x118>
   1ab38:	e1dd31b2 	ldrh	r3, [sp, #18]
   1ab3c:	e59d2004 	ldr	r2, [sp, #4]
   1ab40:	e6bf3fb3 	rev16	r3, r3
   1ab44:	e6ff3073 	uxth	r3, r3
   1ab48:	e1520003 	cmp	r2, r3
   1ab4c:	2a000022 	bcs	1abdc <CNetworkLayer::Process()+0x1a4>
   1ab50:	e1a00007 	mov	r0, r7
   1ab54:	eb00183e 	bl	20c54 <CIPAddress::~CIPAddress()>
   1ab58:	eaffffd8 	b	1aac0 <CNetworkLayer::Process()+0x88>
   1ab5c:	e1a01007 	mov	r1, r7
   1ab60:	e1a00006 	mov	r0, r6
   1ab64:	eb001853 	bl	20cb8 <CIPAddress::operator!=(CIPAddress const&) const>
   1ab68:	e3500000 	cmp	r0, #0
   1ab6c:	0affffea 	beq	1ab1c <CNetworkLayer::Process()+0xe4>
   1ab70:	e1a00007 	mov	r0, r7
   1ab74:	eb00190d 	bl	20fb0 <CIPAddress::IsBroadcast() const>
   1ab78:	e3500000 	cmp	r0, #0
   1ab7c:	1affffe6 	bne	1ab1c <CNetworkLayer::Process()+0xe4>
   1ab80:	e5950000 	ldr	r0, [r5]
   1ab84:	eb0017cb 	bl	20ab8 <CNetConfig::GetBroadcastAddress() const>
   1ab88:	e1a01007 	mov	r1, r7
   1ab8c:	eb001849 	bl	20cb8 <CIPAddress::operator!=(CIPAddress const&) const>
   1ab90:	e3500000 	cmp	r0, #0
   1ab94:	0affffe0 	beq	1ab1c <CNetworkLayer::Process()+0xe4>
   1ab98:	eaffffec 	b	1ab50 <CNetworkLayer::Process()+0x118>
   1ab9c:	e3a02037 	mov	r2, #55	; 0x37
   1aba0:	e59f1098 	ldr	r1, [pc, #152]	; 1ac40 <CNetworkLayer::Process()+0x208>
   1aba4:	e59f0098 	ldr	r0, [pc, #152]	; 1ac44 <CNetworkLayer::Process()+0x20c>
   1aba8:	eb0026b5 	bl	24684 <assertion_failed>
   1abac:	e3a02039 	mov	r2, #57	; 0x39
   1abb0:	e59f1088 	ldr	r1, [pc, #136]	; 1ac40 <CNetworkLayer::Process()+0x208>
   1abb4:	e59f008c 	ldr	r0, [pc, #140]	; 1ac48 <CNetworkLayer::Process()+0x210>
   1abb8:	eb0026b1 	bl	24684 <assertion_failed>
   1abbc:	e3a0203d 	mov	r2, #61	; 0x3d
   1abc0:	e59f1078 	ldr	r1, [pc, #120]	; 1ac40 <CNetworkLayer::Process()+0x208>
   1abc4:	e59f0080 	ldr	r0, [pc, #128]	; 1ac4c <CNetworkLayer::Process()+0x214>
   1abc8:	eb0026ad 	bl	24684 <assertion_failed>
   1abcc:	e3a0208a 	mov	r2, #138	; 0x8a
   1abd0:	e59f1068 	ldr	r1, [pc, #104]	; 1ac40 <CNetworkLayer::Process()+0x208>
   1abd4:	e59f0074 	ldr	r0, [pc, #116]	; 1ac50 <CNetworkLayer::Process()+0x218>
   1abd8:	eb0026a9 	bl	24684 <assertion_failed>
   1abdc:	e3a00009 	mov	r0, #9
   1abe0:	e58d3004 	str	r3, [sp, #4]
   1abe4:	eb0040ad 	bl	2aea0 <operator new(unsigned int)>
   1abe8:	e1a08000 	mov	r8, r0
   1abec:	e5dd3019 	ldrb	r3, [sp, #25]
   1abf0:	e28d101c 	add	r1, sp, #28
   1abf4:	e4c03001 	strb	r3, [r0], #1
   1abf8:	e3a02004 	mov	r2, #4
   1abfc:	eb003ec1 	bl	2a708 <memcpy>
   1ac00:	e28d1020 	add	r1, sp, #32
   1ac04:	e3a02004 	mov	r2, #4
   1ac08:	e2880005 	add	r0, r8, #5
   1ac0c:	eb003ebd 	bl	2a708 <memcpy>
   1ac10:	e5dd3019 	ldrb	r3, [sp, #25]
   1ac14:	e59d2004 	ldr	r2, [sp, #4]
   1ac18:	e3530001 	cmp	r3, #1
   1ac1c:	e28d1010 	add	r1, sp, #16
   1ac20:	e0422004 	sub	r2, r2, r4
   1ac24:	e1a03008 	mov	r3, r8
   1ac28:	e0811004 	add	r1, r1, r4
   1ac2c:	02850018 	addeq	r0, r5, #24
   1ac30:	1285000c 	addne	r0, r5, #12
   1ac34:	e58d2004 	str	r2, [sp, #4]
   1ac38:	eb001979 	bl	21224 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1ac3c:	eaffffc3 	b	1ab50 <CNetworkLayer::Process()+0x118>
   1ac40:	00043364 	.word	0x00043364
   1ac44:	000432d0 	.word	0x000432d0
   1ac48:	000433b4 	.word	0x000433b4
   1ac4c:	0004338c 	.word	0x0004338c
   1ac50:	00043378 	.word	0x00043378

0001ac54 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>:
   1ac54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac58:	e1a04003 	mov	r4, r3
   1ac5c:	ed2d8b02 	vpush	{d8}
   1ac60:	e59f3268 	ldr	r3, [pc, #616]	; 1aed0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x27c>
   1ac64:	e244c001 	sub	ip, r4, #1
   1ac68:	e28db028 	add	fp, sp, #40	; 0x28
   1ac6c:	e15c0003 	cmp	ip, r3
   1ac70:	e24dd00c 	sub	sp, sp, #12
   1ac74:	8a000052 	bhi	1adc4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x170>
   1ac78:	e1a09002 	mov	r9, r2
   1ac7c:	e284201b 	add	r2, r4, #27
   1ac80:	e59b3004 	ldr	r3, [fp, #4]
   1ac84:	e3c22007 	bic	r2, r2, #7
   1ac88:	e04dd002 	sub	sp, sp, r2
   1ac8c:	e3a0a000 	mov	sl, #0
   1ac90:	e3a0c040 	mov	ip, #64	; 0x40
   1ac94:	e3a07045 	mov	r7, #69	; 0x45
   1ac98:	e5cd3009 	strb	r3, [sp, #9]
   1ac9c:	e1a0300d 	mov	r3, sp
   1aca0:	e2848014 	add	r8, r4, #20
   1aca4:	e6bfefb8 	rev16	lr, r8
   1aca8:	e1a06000 	mov	r6, r0
   1acac:	e5900000 	ldr	r0, [r0]
   1acb0:	e1a05001 	mov	r5, r1
   1acb4:	e6ff107e 	uxth	r1, lr
   1acb8:	e1a01421 	lsr	r1, r1, #8
   1acbc:	e150000a 	cmp	r0, sl
   1acc0:	ee083a10 	vmov	s16, r3
   1acc4:	e5cd1003 	strb	r1, [sp, #3]
   1acc8:	e5cde002 	strb	lr, [sp, #2]
   1accc:	e5cd7000 	strb	r7, [sp]
   1acd0:	e5cda001 	strb	sl, [sp, #1]
   1acd4:	e5cda004 	strb	sl, [sp, #4]
   1acd8:	e5cda005 	strb	sl, [sp, #5]
   1acdc:	e5cda007 	strb	sl, [sp, #7]
   1ace0:	e5cdc006 	strb	ip, [sp, #6]
   1ace4:	e5cdc008 	strb	ip, [sp, #8]
   1ace8:	0a000054 	beq	1ae40 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1ec>
   1acec:	eb001767 	bl	20a90 <CNetConfig::GetIPAddress() const>
   1acf0:	e2507000 	subs	r7, r0, #0
   1acf4:	0a000055 	beq	1ae50 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1fc>
   1acf8:	e28d100c 	add	r1, sp, #12
   1acfc:	eb001886 	bl	20f1c <CIPAddress::CopyTo(unsigned char*) const>
   1ad00:	e1a00005 	mov	r0, r5
   1ad04:	e28d1010 	add	r1, sp, #16
   1ad08:	eb001883 	bl	20f1c <CIPAddress::CopyTo(unsigned char*) const>
   1ad0c:	e3a01014 	mov	r1, #20
   1ad10:	e1a0000d 	mov	r0, sp
   1ad14:	e5cda00a 	strb	sl, [sp, #10]
   1ad18:	e5cda00b 	strb	sl, [sp, #11]
   1ad1c:	eb001a49 	bl	21648 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1ad20:	e3590000 	cmp	r9, #0
   1ad24:	e1a02420 	lsr	r2, r0, #8
   1ad28:	e5cd000a 	strb	r0, [sp, #10]
   1ad2c:	e5cd200b 	strb	r2, [sp, #11]
   1ad30:	0a000033 	beq	1ae04 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1b0>
   1ad34:	e1a02004 	mov	r2, r4
   1ad38:	e1a01009 	mov	r1, r9
   1ad3c:	e28d0014 	add	r0, sp, #20
   1ad40:	eb003e70 	bl	2a708 <memcpy>
   1ad44:	e1a00007 	mov	r0, r7
   1ad48:	eb00188a 	bl	20f78 <CIPAddress::IsNull() const>
   1ad4c:	e3500000 	cmp	r0, #0
   1ad50:	0a000003 	beq	1ad64 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x110>
   1ad54:	e1a00005 	mov	r0, r5
   1ad58:	eb001894 	bl	20fb0 <CIPAddress::IsBroadcast() const>
   1ad5c:	e2504000 	subs	r4, r0, #0
   1ad60:	0a00001c 	beq	1add8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x184>
   1ad64:	e24b0034 	sub	r0, fp, #52	; 0x34
   1ad68:	eb0017a3 	bl	20bfc <CIPAddress::CIPAddress()>
   1ad6c:	e5960000 	ldr	r0, [r6]
   1ad70:	eb00174a 	bl	20aa0 <CNetConfig::GetNetMask() const>
   1ad74:	e1a01005 	mov	r1, r5
   1ad78:	e1a02000 	mov	r2, r0
   1ad7c:	e1a00007 	mov	r0, r7
   1ad80:	eb0018bd 	bl	2107c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   1ad84:	e2504000 	subs	r4, r0, #0
   1ad88:	0a000021 	beq	1ae14 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1c0>
   1ad8c:	e5960004 	ldr	r0, [r6, #4]
   1ad90:	e3500000 	cmp	r0, #0
   1ad94:	0a000031 	beq	1ae60 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x20c>
   1ad98:	e1a03008 	mov	r3, r8
   1ad9c:	ee182a10 	vmov	r2, s16
   1ada0:	e1a01005 	mov	r1, r5
   1ada4:	eb0001e7 	bl	1b548 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>
   1ada8:	e1a04000 	mov	r4, r0
   1adac:	e24b0034 	sub	r0, fp, #52	; 0x34
   1adb0:	eb0017a7 	bl	20c54 <CIPAddress::~CIPAddress()>
   1adb4:	e1a00004 	mov	r0, r4
   1adb8:	e24bd028 	sub	sp, fp, #40	; 0x28
   1adbc:	ecbd8b02 	vpop	{d8}
   1adc0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1adc4:	e3a04000 	mov	r4, #0
   1adc8:	e1a00004 	mov	r0, r4
   1adcc:	e24bd028 	sub	sp, fp, #40	; 0x28
   1add0:	ecbd8b02 	vpop	{d8}
   1add4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1add8:	e5960008 	ldr	r0, [r6, #8]
   1addc:	e3500000 	cmp	r0, #0
   1ade0:	0a000039 	beq	1aecc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x278>
   1ade4:	e1a03008 	mov	r3, r8
   1ade8:	e1a0200d 	mov	r2, sp
   1adec:	e1a01004 	mov	r1, r4
   1adf0:	eb000856 	bl	1cf50 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1adf4:	e1a00004 	mov	r0, r4
   1adf8:	e24bd028 	sub	sp, fp, #40	; 0x28
   1adfc:	ecbd8b02 	vpop	{d8}
   1ae00:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae04:	e3a020ad 	mov	r2, #173	; 0xad
   1ae08:	e59f10c4 	ldr	r1, [pc, #196]	; 1aed4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x280>
   1ae0c:	e59f00c4 	ldr	r0, [pc, #196]	; 1aed8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x284>
   1ae10:	eb00261b 	bl	24684 <assertion_failed>
   1ae14:	e1a00005 	mov	r0, r5
   1ae18:	eb001833 	bl	20eec <CIPAddress::Get() const>
   1ae1c:	e1a01000 	mov	r1, r0
   1ae20:	e2860030 	add	r0, r6, #48	; 0x30
   1ae24:	eb00090c 	bl	1d25c <CRouteCache::GetRoute(unsigned char const*) const>
   1ae28:	e2501000 	subs	r1, r0, #0
   1ae2c:	0a00000f 	beq	1ae70 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x21c>
   1ae30:	e24b0034 	sub	r0, fp, #52	; 0x34
   1ae34:	eb0017f7 	bl	20e18 <CIPAddress::Set(unsigned char const*)>
   1ae38:	e24b5034 	sub	r5, fp, #52	; 0x34
   1ae3c:	eaffffd2 	b	1ad8c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x138>
   1ae40:	e3a020a2 	mov	r2, #162	; 0xa2
   1ae44:	e59f1088 	ldr	r1, [pc, #136]	; 1aed4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x280>
   1ae48:	e59f008c 	ldr	r0, [pc, #140]	; 1aedc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x288>
   1ae4c:	eb00260c 	bl	24684 <assertion_failed>
   1ae50:	e3a020a4 	mov	r2, #164	; 0xa4
   1ae54:	e59f1078 	ldr	r1, [pc, #120]	; 1aed4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x280>
   1ae58:	e59f0080 	ldr	r0, [pc, #128]	; 1aee0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x28c>
   1ae5c:	eb002608 	bl	24684 <assertion_failed>
   1ae60:	e3a020d0 	mov	r2, #208	; 0xd0
   1ae64:	e59f1068 	ldr	r1, [pc, #104]	; 1aed4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x280>
   1ae68:	e59f0074 	ldr	r0, [pc, #116]	; 1aee4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x290>
   1ae6c:	eb002604 	bl	24684 <assertion_failed>
   1ae70:	e5960000 	ldr	r0, [r6]
   1ae74:	eb00170b 	bl	20aa8 <CNetConfig::GetDefaultGateway() const>
   1ae78:	e1a05000 	mov	r5, r0
   1ae7c:	eb00183d 	bl	20f78 <CIPAddress::IsNull() const>
   1ae80:	e3500000 	cmp	r0, #0
   1ae84:	0a000007 	beq	1aea8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x254>
   1ae88:	e5960008 	ldr	r0, [r6, #8]
   1ae8c:	e3500000 	cmp	r0, #0
   1ae90:	0a00000d 	beq	1aecc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x278>
   1ae94:	e1a03008 	mov	r3, r8
   1ae98:	ee182a10 	vmov	r2, s16
   1ae9c:	e1a01004 	mov	r1, r4
   1aea0:	eb00082a 	bl	1cf50 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1aea4:	eaffffc0 	b	1adac <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x158>
   1aea8:	e5960004 	ldr	r0, [r6, #4]
   1aeac:	e3500000 	cmp	r0, #0
   1aeb0:	0affffea 	beq	1ae60 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x20c>
   1aeb4:	e3550000 	cmp	r5, #0
   1aeb8:	1affffb6 	bne	1ad98 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x144>
   1aebc:	e3a020d1 	mov	r2, #209	; 0xd1
   1aec0:	e59f100c 	ldr	r1, [pc, #12]	; 1aed4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x280>
   1aec4:	e59f001c 	ldr	r0, [pc, #28]	; 1aee8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x294>
   1aec8:	eb0025ed 	bl	24684 <assertion_failed>
   1aecc:	ebfffe81 	bl	1a8d8 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]>
   1aed0:	0000062b 	.word	0x0000062b
   1aed4:	00043364 	.word	0x00043364
   1aed8:	000433c8 	.word	0x000433c8
   1aedc:	000432d0 	.word	0x000432d0
   1aee0:	000433b4 	.word	0x000433b4
   1aee4:	0004338c 	.word	0x0004338c
   1aee8:	000433d8 	.word	0x000433d8

0001aeec <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>:
   1aeec:	e92d4030 	push	{r4, r5, lr}
   1aef0:	e3510000 	cmp	r1, #0
   1aef4:	e24dd00c 	sub	sp, sp, #12
   1aef8:	0a000027 	beq	1af9c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xb0>
   1aefc:	e3520000 	cmp	r2, #0
   1af00:	e1a04002 	mov	r4, r2
   1af04:	0a000028 	beq	1afac <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xc0>
   1af08:	e280000c 	add	r0, r0, #12
   1af0c:	e28d2004 	add	r2, sp, #4
   1af10:	e1a05003 	mov	r5, r3
   1af14:	eb001908 	bl	2133c <CNetQueue::Dequeue(void*, void**)>
   1af18:	e3500000 	cmp	r0, #0
   1af1c:	e5840000 	str	r0, [r4]
   1af20:	0a000017 	beq	1af84 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x98>
   1af24:	e59d4004 	ldr	r4, [sp, #4]
   1af28:	e3540000 	cmp	r4, #0
   1af2c:	0a000016 	beq	1af8c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xa0>
   1af30:	e59d301c 	ldr	r3, [sp, #28]
   1af34:	e3530000 	cmp	r3, #0
   1af38:	0a00001f 	beq	1afbc <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xd0>
   1af3c:	e5d43000 	ldrb	r3, [r4]
   1af40:	e59d201c 	ldr	r2, [sp, #28]
   1af44:	e3550000 	cmp	r5, #0
   1af48:	e5823000 	str	r3, [r2]
   1af4c:	0a00001e 	beq	1afcc <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xe0>
   1af50:	e1a00005 	mov	r0, r5
   1af54:	e2841001 	add	r1, r4, #1
   1af58:	eb0017ae 	bl	20e18 <CIPAddress::Set(unsigned char const*)>
   1af5c:	e59d3018 	ldr	r3, [sp, #24]
   1af60:	e3530000 	cmp	r3, #0
   1af64:	0a00001c 	beq	1afdc <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xf0>
   1af68:	e59d0018 	ldr	r0, [sp, #24]
   1af6c:	e2841005 	add	r1, r4, #5
   1af70:	eb0017a8 	bl	20e18 <CIPAddress::Set(unsigned char const*)>
   1af74:	e1a00004 	mov	r0, r4
   1af78:	e3a01009 	mov	r1, #9
   1af7c:	eb003fd5 	bl	2aed8 <operator delete(void*, unsigned int)>
   1af80:	e3a00001 	mov	r0, #1
   1af84:	e28dd00c 	add	sp, sp, #12
   1af88:	e8bd8030 	pop	{r4, r5, pc}
   1af8c:	e3a020e2 	mov	r2, #226	; 0xe2
   1af90:	e59f1054 	ldr	r1, [pc, #84]	; 1afec <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1af94:	e59f0054 	ldr	r0, [pc, #84]	; 1aff0 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x104>
   1af98:	eb0025b9 	bl	24684 <assertion_failed>
   1af9c:	e3a020d9 	mov	r2, #217	; 0xd9
   1afa0:	e59f1044 	ldr	r1, [pc, #68]	; 1afec <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1afa4:	e59f0048 	ldr	r0, [pc, #72]	; 1aff4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x108>
   1afa8:	eb0025b5 	bl	24684 <assertion_failed>
   1afac:	e3a020da 	mov	r2, #218	; 0xda
   1afb0:	e59f1034 	ldr	r1, [pc, #52]	; 1afec <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1afb4:	e59f003c 	ldr	r0, [pc, #60]	; 1aff8 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x10c>
   1afb8:	eb0025b1 	bl	24684 <assertion_failed>
   1afbc:	e3a020e4 	mov	r2, #228	; 0xe4
   1afc0:	e59f1024 	ldr	r1, [pc, #36]	; 1afec <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1afc4:	e59f0030 	ldr	r0, [pc, #48]	; 1affc <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x110>
   1afc8:	eb0025ad 	bl	24684 <assertion_failed>
   1afcc:	e3a020e7 	mov	r2, #231	; 0xe7
   1afd0:	e59f1014 	ldr	r1, [pc, #20]	; 1afec <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1afd4:	e59f0024 	ldr	r0, [pc, #36]	; 1b000 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x114>
   1afd8:	eb0025a9 	bl	24684 <assertion_failed>
   1afdc:	e3a020ea 	mov	r2, #234	; 0xea
   1afe0:	e59f1004 	ldr	r1, [pc, #4]	; 1afec <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1afe4:	e59f0018 	ldr	r0, [pc, #24]	; 1b004 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x118>
   1afe8:	eb0025a5 	bl	24684 <assertion_failed>
   1afec:	00043364 	.word	0x00043364
   1aff0:	0004334c 	.word	0x0004334c
   1aff4:	00040460 	.word	0x00040460
   1aff8:	00040c48 	.word	0x00040c48
   1affc:	000433e8 	.word	0x000433e8
   1b000:	000433f8 	.word	0x000433f8
   1b004:	00043408 	.word	0x00043408

0001b008 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>:
   1b008:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b00c:	e24dd014 	sub	sp, sp, #20
   1b010:	e1a04001 	mov	r4, r1
   1b014:	e1a05002 	mov	r5, r2
   1b018:	e1a0100d 	mov	r1, sp
   1b01c:	e3a02000 	mov	r2, #0
   1b020:	e2800024 	add	r0, r0, #36	; 0x24
   1b024:	e1a06003 	mov	r6, r3
   1b028:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   1b02c:	eb0018c2 	bl	2133c <CNetQueue::Dequeue(void*, void**)>
   1b030:	e3500000 	cmp	r0, #0
   1b034:	0a000020 	beq	1b0bc <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xb4>
   1b038:	e350000e 	cmp	r0, #14
   1b03c:	1a000024 	bne	1b0d4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xcc>
   1b040:	e3540000 	cmp	r4, #0
   1b044:	0a000026 	beq	1b0e4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xdc>
   1b048:	e5dd3000 	ldrb	r3, [sp]
   1b04c:	e3570000 	cmp	r7, #0
   1b050:	e5c43000 	strb	r3, [r4]
   1b054:	0a00001a 	beq	1b0c4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xbc>
   1b058:	e5dd3001 	ldrb	r3, [sp, #1]
   1b05c:	e3550000 	cmp	r5, #0
   1b060:	e5873000 	str	r3, [r7]
   1b064:	0a000022 	beq	1b0f4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xec>
   1b068:	e1a00005 	mov	r0, r5
   1b06c:	e28d1002 	add	r1, sp, #2
   1b070:	eb001768 	bl	20e18 <CIPAddress::Set(unsigned char const*)>
   1b074:	e3560000 	cmp	r6, #0
   1b078:	0a000021 	beq	1b104 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xfc>
   1b07c:	e1a00006 	mov	r0, r6
   1b080:	e28d1006 	add	r1, sp, #6
   1b084:	eb001763 	bl	20e18 <CIPAddress::Set(unsigned char const*)>
   1b088:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1b08c:	e3530000 	cmp	r3, #0
   1b090:	0a00001f 	beq	1b114 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x10c>
   1b094:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
   1b098:	e1dd30ba 	ldrh	r3, [sp, #10]
   1b09c:	e3520000 	cmp	r2, #0
   1b0a0:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1b0a4:	e1c230b0 	strh	r3, [r2]
   1b0a8:	0a00001d 	beq	1b124 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x11c>
   1b0ac:	e3a00001 	mov	r0, #1
   1b0b0:	e1dd30bc 	ldrh	r3, [sp, #12]
   1b0b4:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
   1b0b8:	e1c230b0 	strh	r3, [r2]
   1b0bc:	e28dd014 	add	sp, sp, #20
   1b0c0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1b0c4:	e59f2068 	ldr	r2, [pc, #104]	; 1b134 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x12c>
   1b0c8:	e59f1068 	ldr	r1, [pc, #104]	; 1b138 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b0cc:	e59f0068 	ldr	r0, [pc, #104]	; 1b13c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x134>
   1b0d0:	eb00256b 	bl	24684 <assertion_failed>
   1b0d4:	e3a020fe 	mov	r2, #254	; 0xfe
   1b0d8:	e59f1058 	ldr	r1, [pc, #88]	; 1b138 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b0dc:	e59f005c 	ldr	r0, [pc, #92]	; 1b140 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x138>
   1b0e0:	eb002567 	bl	24684 <assertion_failed>
   1b0e4:	e3a02c01 	mov	r2, #256	; 0x100
   1b0e8:	e59f1048 	ldr	r1, [pc, #72]	; 1b138 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b0ec:	e59f0050 	ldr	r0, [pc, #80]	; 1b144 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x13c>
   1b0f0:	eb002563 	bl	24684 <assertion_failed>
   1b0f4:	e59f204c 	ldr	r2, [pc, #76]	; 1b148 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x140>
   1b0f8:	e59f1038 	ldr	r1, [pc, #56]	; 1b138 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b0fc:	e59f0048 	ldr	r0, [pc, #72]	; 1b14c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x144>
   1b100:	eb00255f 	bl	24684 <assertion_failed>
   1b104:	e59f2044 	ldr	r2, [pc, #68]	; 1b150 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x148>
   1b108:	e59f1028 	ldr	r1, [pc, #40]	; 1b138 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b10c:	e59f0040 	ldr	r0, [pc, #64]	; 1b154 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x14c>
   1b110:	eb00255b 	bl	24684 <assertion_failed>
   1b114:	e3a02f43 	mov	r2, #268	; 0x10c
   1b118:	e59f1018 	ldr	r1, [pc, #24]	; 1b138 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b11c:	e59f0034 	ldr	r0, [pc, #52]	; 1b158 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x150>
   1b120:	eb002557 	bl	24684 <assertion_failed>
   1b124:	e59f2030 	ldr	r2, [pc, #48]	; 1b15c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x154>
   1b128:	e59f1008 	ldr	r1, [pc, #8]	; 1b138 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b12c:	e59f002c 	ldr	r0, [pc, #44]	; 1b160 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x158>
   1b130:	eb002553 	bl	24684 <assertion_failed>
   1b134:	00000103 	.word	0x00000103
   1b138:	00043364 	.word	0x00043364
   1b13c:	000433e8 	.word	0x000433e8
   1b140:	00043418 	.word	0x00043418
   1b144:	00043438 	.word	0x00043438
   1b148:	00000106 	.word	0x00000106
   1b14c:	000433f8 	.word	0x000433f8
   1b150:	00000109 	.word	0x00000109
   1b154:	00043408 	.word	0x00043408
   1b158:	00043444 	.word	0x00043444
   1b15c:	0000010f 	.word	0x0000010f
   1b160:	00043454 	.word	0x00043454

0001b164 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>:
   1b164:	e2800030 	add	r0, r0, #48	; 0x30
   1b168:	ea000802 	b	1d178 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>

0001b16c <CNetworkLayer::GetGateway(unsigned char const*) const>:
   1b16c:	e92d4010 	push	{r4, lr}
   1b170:	e1a04000 	mov	r4, r0
   1b174:	e2800030 	add	r0, r0, #48	; 0x30
   1b178:	eb000837 	bl	1d25c <CRouteCache::GetRoute(unsigned char const*) const>
   1b17c:	e3500000 	cmp	r0, #0
   1b180:	18bd8010 	popne	{r4, pc}
   1b184:	e5940000 	ldr	r0, [r4]
   1b188:	e3500000 	cmp	r0, #0
   1b18c:	0a000004 	beq	1b1a4 <CNetworkLayer::GetGateway(unsigned char const*) const+0x38>
   1b190:	eb001644 	bl	20aa8 <CNetConfig::GetDefaultGateway() const>
   1b194:	e3500000 	cmp	r0, #0
   1b198:	0a000005 	beq	1b1b4 <CNetworkLayer::GetGateway(unsigned char const*) const+0x48>
   1b19c:	e8bd4010 	pop	{r4, lr}
   1b1a0:	ea001751 	b	20eec <CIPAddress::Get() const>
   1b1a4:	e59f2018 	ldr	r2, [pc, #24]	; 1b1c4 <CNetworkLayer::GetGateway(unsigned char const*) const+0x58>
   1b1a8:	e59f1018 	ldr	r1, [pc, #24]	; 1b1c8 <CNetworkLayer::GetGateway(unsigned char const*) const+0x5c>
   1b1ac:	e59f0018 	ldr	r0, [pc, #24]	; 1b1cc <CNetworkLayer::GetGateway(unsigned char const*) const+0x60>
   1b1b0:	eb002533 	bl	24684 <assertion_failed>
   1b1b4:	e3a02f49 	mov	r2, #292	; 0x124
   1b1b8:	e59f1008 	ldr	r1, [pc, #8]	; 1b1c8 <CNetworkLayer::GetGateway(unsigned char const*) const+0x5c>
   1b1bc:	e59f000c 	ldr	r0, [pc, #12]	; 1b1d0 <CNetworkLayer::GetGateway(unsigned char const*) const+0x64>
   1b1c0:	eb00252f 	bl	24684 <assertion_failed>
   1b1c4:	00000122 	.word	0x00000122
   1b1c8:	00043364 	.word	0x00043364
   1b1cc:	000432d0 	.word	0x000432d0
   1b1d0:	00043468 	.word	0x00043468

0001b1d4 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>:
   1b1d4:	e5900008 	ldr	r0, [r0, #8]
   1b1d8:	e3500000 	cmp	r0, #0
   1b1dc:	0a000000 	beq	1b1e4 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)+0x10>
   1b1e0:	ea00075a 	b	1cf50 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1b1e4:	e92d4010 	push	{r4, lr}
   1b1e8:	ebfffdba 	bl	1a8d8 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]>

0001b1ec <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>:
   1b1ec:	e92d4070 	push	{r4, r5, r6, lr}
   1b1f0:	e3a05000 	mov	r5, #0
   1b1f4:	e1a04000 	mov	r4, r0
   1b1f8:	e8800026 	stm	r0, {r1, r2, r5}
   1b1fc:	e580500c 	str	r5, [r0, #12]
   1b200:	e2800010 	add	r0, r0, #16
   1b204:	eb0017c9 	bl	21130 <CNetQueue::CNetQueue()>
   1b208:	e284001c 	add	r0, r4, #28
   1b20c:	eb0017c7 	bl	21130 <CNetQueue::CNetQueue()>
   1b210:	e2840028 	add	r0, r4, #40	; 0x28
   1b214:	eb0017c5 	bl	21130 <CNetQueue::CNetQueue()>
   1b218:	e5943000 	ldr	r3, [r4]
   1b21c:	e1c453b4 	strh	r5, [r4, #52]	; 0x34
   1b220:	e1530005 	cmp	r3, r5
   1b224:	0a000004 	beq	1b23c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x50>
   1b228:	e5943004 	ldr	r3, [r4, #4]
   1b22c:	e3530000 	cmp	r3, #0
   1b230:	0a000005 	beq	1b24c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x60>
   1b234:	e1a00004 	mov	r0, r4
   1b238:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b23c:	e3a02025 	mov	r2, #37	; 0x25
   1b240:	e59f1014 	ldr	r1, [pc, #20]	; 1b25c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x70>
   1b244:	e59f0014 	ldr	r0, [pc, #20]	; 1b260 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x74>
   1b248:	eb00250d 	bl	24684 <assertion_failed>
   1b24c:	e3a02026 	mov	r2, #38	; 0x26
   1b250:	e59f1004 	ldr	r1, [pc, #4]	; 1b25c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x70>
   1b254:	e59f0008 	ldr	r0, [pc, #8]	; 1b264 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x78>
   1b258:	eb002509 	bl	24684 <assertion_failed>
   1b25c:	00043480 	.word	0x00043480
   1b260:	000432d0 	.word	0x000432d0
   1b264:	00043490 	.word	0x00043490

0001b268 <CLinkLayer::~CLinkLayer()>:
   1b268:	e92d4070 	push	{r4, r5, r6, lr}
   1b26c:	e590500c 	ldr	r5, [r0, #12]
   1b270:	e1a04000 	mov	r4, r0
   1b274:	e3550000 	cmp	r5, #0
   1b278:	0a000004 	beq	1b290 <CLinkLayer::~CLinkLayer()+0x28>
   1b27c:	e1a00005 	mov	r0, r5
   1b280:	eb000317 	bl	1bee4 <CARPHandler::~CARPHandler()>
   1b284:	e1a00005 	mov	r0, r5
   1b288:	e3a01f93 	mov	r1, #588	; 0x24c
   1b28c:	eb003f11 	bl	2aed8 <operator delete(void*, unsigned int)>
   1b290:	e3a03000 	mov	r3, #0
   1b294:	e1a00004 	mov	r0, r4
   1b298:	e584300c 	str	r3, [r4, #12]
   1b29c:	e5843008 	str	r3, [r4, #8]
   1b2a0:	e5843004 	str	r3, [r4, #4]
   1b2a4:	e4803028 	str	r3, [r0], #40	; 0x28
   1b2a8:	eb0017d8 	bl	21210 <CNetQueue::~CNetQueue()>
   1b2ac:	e284001c 	add	r0, r4, #28
   1b2b0:	eb0017d6 	bl	21210 <CNetQueue::~CNetQueue()>
   1b2b4:	e2840010 	add	r0, r4, #16
   1b2b8:	eb0017d4 	bl	21210 <CNetQueue::~CNetQueue()>
   1b2bc:	e1a00004 	mov	r0, r4
   1b2c0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b2c4 <CLinkLayer::Initialize()>:
   1b2c4:	e92d4030 	push	{r4, r5, lr}
   1b2c8:	e5903000 	ldr	r3, [r0]
   1b2cc:	e24dd00c 	sub	sp, sp, #12
   1b2d0:	e3530000 	cmp	r3, #0
   1b2d4:	0a00000d 	beq	1b310 <CLinkLayer::Initialize()+0x4c>
   1b2d8:	e1a04000 	mov	r4, r0
   1b2dc:	e3a00f93 	mov	r0, #588	; 0x24c
   1b2e0:	eb003eee 	bl	2aea0 <operator new(unsigned int)>
   1b2e4:	e1a02004 	mov	r2, r4
   1b2e8:	e4921010 	ldr	r1, [r2], #16
   1b2ec:	e1a03004 	mov	r3, r4
   1b2f0:	e58d2000 	str	r2, [sp]
   1b2f4:	e5942004 	ldr	r2, [r4, #4]
   1b2f8:	e1a05000 	mov	r5, r0
   1b2fc:	eb0002d1 	bl	1be48 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>
   1b300:	e3a00001 	mov	r0, #1
   1b304:	e584500c 	str	r5, [r4, #12]
   1b308:	e28dd00c 	add	sp, sp, #12
   1b30c:	e8bd8030 	pop	{r4, r5, pc}
   1b310:	e3a02035 	mov	r2, #53	; 0x35
   1b314:	e59f1004 	ldr	r1, [pc, #4]	; 1b320 <CLinkLayer::Initialize()+0x5c>
   1b318:	e59f0004 	ldr	r0, [pc, #4]	; 1b324 <CLinkLayer::Initialize()+0x60>
   1b31c:	eb0024d8 	bl	24684 <assertion_failed>
   1b320:	00043480 	.word	0x00043480
   1b324:	000432d0 	.word	0x000432d0

0001b328 <CLinkLayer::AttachLayer(CNetworkLayer*)>:
   1b328:	e5903008 	ldr	r3, [r0, #8]
   1b32c:	e92d4010 	push	{r4, lr}
   1b330:	e3530000 	cmp	r3, #0
   1b334:	1a000006 	bne	1b354 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x2c>
   1b338:	e3510000 	cmp	r1, #0
   1b33c:	e5801008 	str	r1, [r0, #8]
   1b340:	18bd8010 	popne	{r4, pc}
   1b344:	e3a02040 	mov	r2, #64	; 0x40
   1b348:	e59f1014 	ldr	r1, [pc, #20]	; 1b364 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x3c>
   1b34c:	e59f0014 	ldr	r0, [pc, #20]	; 1b368 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x40>
   1b350:	eb0024cb 	bl	24684 <assertion_failed>
   1b354:	e3a0203e 	mov	r2, #62	; 0x3e
   1b358:	e59f1004 	ldr	r1, [pc, #4]	; 1b364 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x3c>
   1b35c:	e59f0008 	ldr	r0, [pc, #8]	; 1b36c <CLinkLayer::AttachLayer(CNetworkLayer*)+0x44>
   1b360:	eb0024c7 	bl	24684 <assertion_failed>
   1b364:	00043480 	.word	0x00043480
   1b368:	000432e4 	.word	0x000432e4
   1b36c:	000434a4 	.word	0x000434a4

0001b370 <CLinkLayer::Process()>:
   1b370:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b374:	e1a04000 	mov	r4, r0
   1b378:	e5900004 	ldr	r0, [r0, #4]
   1b37c:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1b380:	e3500000 	cmp	r0, #0
   1b384:	e24dd008 	sub	sp, sp, #8
   1b388:	0a000057 	beq	1b4ec <CLinkLayer::Process()+0x17c>
   1b38c:	eb000225 	bl	1bc28 <CNetDeviceLayer::GetMACAddress() const>
   1b390:	e2506000 	subs	r6, r0, #0
   1b394:	0a000058 	beq	1b4fc <CLinkLayer::Process()+0x18c>
   1b398:	e5940004 	ldr	r0, [r4, #4]
   1b39c:	e3500000 	cmp	r0, #0
   1b3a0:	0a000059 	beq	1b50c <CLinkLayer::Process()+0x19c>
   1b3a4:	e28d3018 	add	r3, sp, #24
   1b3a8:	e59f717c 	ldr	r7, [pc, #380]	; 1b52c <CLinkLayer::Process()+0x1bc>
   1b3ac:	e28d5010 	add	r5, sp, #16
   1b3b0:	e283800e 	add	r8, r3, #14
   1b3b4:	e28d200c 	add	r2, sp, #12
   1b3b8:	e28d1018 	add	r1, sp, #24
   1b3bc:	eb000229 	bl	1bc68 <CNetDeviceLayer::Receive(void*, unsigned int*)>
   1b3c0:	e3500000 	cmp	r0, #0
   1b3c4:	0a000041 	beq	1b4d0 <CLinkLayer::Process()+0x160>
   1b3c8:	e59d300c 	ldr	r3, [sp, #12]
   1b3cc:	e3530d19 	cmp	r3, #1600	; 0x640
   1b3d0:	8a000029 	bhi	1b47c <CLinkLayer::Process()+0x10c>
   1b3d4:	e353000e 	cmp	r3, #14
   1b3d8:	9a000016 	bls	1b438 <CLinkLayer::Process()+0xc8>
   1b3dc:	e28d1018 	add	r1, sp, #24
   1b3e0:	e1a00005 	mov	r0, r5
   1b3e4:	eb003df9 	bl	2abd0 <CMACAddress::CMACAddress(unsigned char const*)>
   1b3e8:	e1a01006 	mov	r1, r6
   1b3ec:	e1a00005 	mov	r0, r5
   1b3f0:	eb003de1 	bl	2ab7c <CMACAddress::operator!=(CMACAddress const&) const>
   1b3f4:	e3500000 	cmp	r0, #0
   1b3f8:	1a000010 	bne	1b440 <CLinkLayer::Process()+0xd0>
   1b3fc:	e59d200c 	ldr	r2, [sp, #12]
   1b400:	e242200e 	sub	r2, r2, #14
   1b404:	e3520000 	cmp	r2, #0
   1b408:	e58d200c 	str	r2, [sp, #12]
   1b40c:	0a00002b 	beq	1b4c0 <CLinkLayer::Process()+0x150>
   1b410:	e1dd32b4 	ldrh	r3, [sp, #36]	; 0x24
   1b414:	e3530008 	cmp	r3, #8
   1b418:	0a000012 	beq	1b468 <CLinkLayer::Process()+0xf8>
   1b41c:	e1530007 	cmp	r3, r7
   1b420:	0a00000b 	beq	1b454 <CLinkLayer::Process()+0xe4>
   1b424:	e1d423b4 	ldrh	r2, [r4, #52]	; 0x34
   1b428:	e1520003 	cmp	r2, r3
   1b42c:	0a000016 	beq	1b48c <CLinkLayer::Process()+0x11c>
   1b430:	e1a00005 	mov	r0, r5
   1b434:	eb003db7 	bl	2ab18 <CMACAddress::~CMACAddress()>
   1b438:	e5940004 	ldr	r0, [r4, #4]
   1b43c:	eaffffdc 	b	1b3b4 <CLinkLayer::Process()+0x44>
   1b440:	e1a00005 	mov	r0, r5
   1b444:	eb003e12 	bl	2ac94 <CMACAddress::IsBroadcast() const>
   1b448:	e3500000 	cmp	r0, #0
   1b44c:	1affffea 	bne	1b3fc <CLinkLayer::Process()+0x8c>
   1b450:	eafffff6 	b	1b430 <CLinkLayer::Process()+0xc0>
   1b454:	e3a03000 	mov	r3, #0
   1b458:	e1a01008 	mov	r1, r8
   1b45c:	e2840010 	add	r0, r4, #16
   1b460:	eb00176f 	bl	21224 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b464:	eafffff1 	b	1b430 <CLinkLayer::Process()+0xc0>
   1b468:	e3a03000 	mov	r3, #0
   1b46c:	e1a01008 	mov	r1, r8
   1b470:	e284001c 	add	r0, r4, #28
   1b474:	eb00176a 	bl	21224 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b478:	eaffffec 	b	1b430 <CLinkLayer::Process()+0xc0>
   1b47c:	e3a0204e 	mov	r2, #78	; 0x4e
   1b480:	e59f10a8 	ldr	r1, [pc, #168]	; 1b530 <CLinkLayer::Process()+0x1c0>
   1b484:	e59f00a8 	ldr	r0, [pc, #168]	; 1b534 <CLinkLayer::Process()+0x1c4>
   1b488:	eb00247d 	bl	24684 <assertion_failed>
   1b48c:	e3a00006 	mov	r0, #6
   1b490:	eb003e82 	bl	2aea0 <operator new(unsigned int)>
   1b494:	e3a02006 	mov	r2, #6
   1b498:	e28d3018 	add	r3, sp, #24
   1b49c:	e0831002 	add	r1, r3, r2
   1b4a0:	e58d0004 	str	r0, [sp, #4]
   1b4a4:	eb003c97 	bl	2a708 <memcpy>
   1b4a8:	e1a01008 	mov	r1, r8
   1b4ac:	e59d3004 	ldr	r3, [sp, #4]
   1b4b0:	e59d200c 	ldr	r2, [sp, #12]
   1b4b4:	e2840028 	add	r0, r4, #40	; 0x28
   1b4b8:	eb001759 	bl	21224 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b4bc:	eaffffdb 	b	1b430 <CLinkLayer::Process()+0xc0>
   1b4c0:	e3a0205d 	mov	r2, #93	; 0x5d
   1b4c4:	e59f1064 	ldr	r1, [pc, #100]	; 1b530 <CLinkLayer::Process()+0x1c0>
   1b4c8:	e59f0068 	ldr	r0, [pc, #104]	; 1b538 <CLinkLayer::Process()+0x1c8>
   1b4cc:	eb00246c 	bl	24684 <assertion_failed>
   1b4d0:	e594000c 	ldr	r0, [r4, #12]
   1b4d4:	e3500000 	cmp	r0, #0
   1b4d8:	0a00000f 	beq	1b51c <CLinkLayer::Process()+0x1ac>
   1b4dc:	eb000375 	bl	1c2b8 <CARPHandler::Process()>
   1b4e0:	e28dde65 	add	sp, sp, #1616	; 0x650
   1b4e4:	e28dd008 	add	sp, sp, #8
   1b4e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1b4ec:	e3a02045 	mov	r2, #69	; 0x45
   1b4f0:	e59f1038 	ldr	r1, [pc, #56]	; 1b530 <CLinkLayer::Process()+0x1c0>
   1b4f4:	e59f0040 	ldr	r0, [pc, #64]	; 1b53c <CLinkLayer::Process()+0x1cc>
   1b4f8:	eb002461 	bl	24684 <assertion_failed>
   1b4fc:	e3a02047 	mov	r2, #71	; 0x47
   1b500:	e59f1028 	ldr	r1, [pc, #40]	; 1b530 <CLinkLayer::Process()+0x1c0>
   1b504:	e59f0034 	ldr	r0, [pc, #52]	; 1b540 <CLinkLayer::Process()+0x1d0>
   1b508:	eb00245d 	bl	24684 <assertion_failed>
   1b50c:	e3a02049 	mov	r2, #73	; 0x49
   1b510:	e59f1018 	ldr	r1, [pc, #24]	; 1b530 <CLinkLayer::Process()+0x1c0>
   1b514:	e59f0020 	ldr	r0, [pc, #32]	; 1b53c <CLinkLayer::Process()+0x1cc>
   1b518:	eb002459 	bl	24684 <assertion_failed>
   1b51c:	e3a02077 	mov	r2, #119	; 0x77
   1b520:	e59f1008 	ldr	r1, [pc, #8]	; 1b530 <CLinkLayer::Process()+0x1c0>
   1b524:	e59f0018 	ldr	r0, [pc, #24]	; 1b544 <CLinkLayer::Process()+0x1d4>
   1b528:	eb002455 	bl	24684 <assertion_failed>
   1b52c:	00000608 	.word	0x00000608
   1b530:	00043480 	.word	0x00043480
   1b534:	00041084 	.word	0x00041084
   1b538:	00043358 	.word	0x00043358
   1b53c:	00043490 	.word	0x00043490
   1b540:	000434bc 	.word	0x000434bc
   1b544:	000434d0 	.word	0x000434d0

0001b548 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>:
   1b548:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b54c:	e1a04003 	mov	r4, r3
   1b550:	e59f317c 	ldr	r3, [pc, #380]	; 1b6d4 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x18c>
   1b554:	e244c001 	sub	ip, r4, #1
   1b558:	e28db01c 	add	fp, sp, #28
   1b55c:	e15c0003 	cmp	ip, r3
   1b560:	e24dd010 	sub	sp, sp, #16
   1b564:	8a000033 	bhi	1b638 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xf0>
   1b568:	e1a05000 	mov	r5, r0
   1b56c:	e2843015 	add	r3, r4, #21
   1b570:	e5900004 	ldr	r0, [r0, #4]
   1b574:	e3c33007 	bic	r3, r3, #7
   1b578:	e04dd003 	sub	sp, sp, r3
   1b57c:	e3500000 	cmp	r0, #0
   1b580:	e28d8008 	add	r8, sp, #8
   1b584:	e284900e 	add	r9, r4, #14
   1b588:	0a000041 	beq	1b694 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x14c>
   1b58c:	e1a07001 	mov	r7, r1
   1b590:	e1a06002 	mov	r6, r2
   1b594:	eb0001a3 	bl	1bc28 <CNetDeviceLayer::GetMACAddress() const>
   1b598:	e3500000 	cmp	r0, #0
   1b59c:	0a000040 	beq	1b6a4 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x15c>
   1b5a0:	e28d100e 	add	r1, sp, #14
   1b5a4:	eb003da3 	bl	2ac38 <CMACAddress::CopyTo(unsigned char*) const>
   1b5a8:	e3a02000 	mov	r2, #0
   1b5ac:	e3a03008 	mov	r3, #8
   1b5b0:	e1560002 	cmp	r6, r2
   1b5b4:	e5c8200d 	strb	r2, [r8, #13]
   1b5b8:	e5c8300c 	strb	r3, [r8, #12]
   1b5bc:	0a000030 	beq	1b684 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x13c>
   1b5c0:	e1a02004 	mov	r2, r4
   1b5c4:	e1a01006 	mov	r1, r6
   1b5c8:	e28d0016 	add	r0, sp, #22
   1b5cc:	eb003c4d 	bl	2a708 <memcpy>
   1b5d0:	e5953000 	ldr	r3, [r5]
   1b5d4:	e3530000 	cmp	r3, #0
   1b5d8:	0a000035 	beq	1b6b4 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x16c>
   1b5dc:	e595300c 	ldr	r3, [r5, #12]
   1b5e0:	e3530000 	cmp	r3, #0
   1b5e4:	0a000036 	beq	1b6c4 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x17c>
   1b5e8:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b5ec:	eb003d46 	bl	2ab0c <CMACAddress::CMACAddress()>
   1b5f0:	e1a00007 	mov	r0, r7
   1b5f4:	eb00166d 	bl	20fb0 <CIPAddress::IsBroadcast() const>
   1b5f8:	e3500000 	cmp	r0, #0
   1b5fc:	0a000010 	beq	1b644 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xfc>
   1b600:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b604:	eb003d76 	bl	2abe4 <CMACAddress::SetBroadcast()>
   1b608:	e1a01008 	mov	r1, r8
   1b60c:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b610:	eb003d88 	bl	2ac38 <CMACAddress::CopyTo(unsigned char*) const>
   1b614:	e1a02009 	mov	r2, r9
   1b618:	e1a01008 	mov	r1, r8
   1b61c:	e5950004 	ldr	r0, [r5, #4]
   1b620:	eb00018d 	bl	1bc5c <CNetDeviceLayer::Send(void const*, unsigned int)>
   1b624:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b628:	eb003d3a 	bl	2ab18 <CMACAddress::~CMACAddress()>
   1b62c:	e3a00001 	mov	r0, #1
   1b630:	e24bd01c 	sub	sp, fp, #28
   1b634:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b638:	e3a00000 	mov	r0, #0
   1b63c:	e24bd01c 	sub	sp, fp, #28
   1b640:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b644:	e5950000 	ldr	r0, [r5]
   1b648:	eb00151a 	bl	20ab8 <CNetConfig::GetBroadcastAddress() const>
   1b64c:	e1a01000 	mov	r1, r0
   1b650:	e1a00007 	mov	r0, r7
   1b654:	eb00157f 	bl	20c58 <CIPAddress::operator==(CIPAddress const&) const>
   1b658:	e3500000 	cmp	r0, #0
   1b65c:	1affffe7 	bne	1b600 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xb8>
   1b660:	e58d9000 	str	r9, [sp]
   1b664:	e1a01007 	mov	r1, r7
   1b668:	e1a03008 	mov	r3, r8
   1b66c:	e595000c 	ldr	r0, [r5, #12]
   1b670:	e24b2024 	sub	r2, fp, #36	; 0x24
   1b674:	eb00040f 	bl	1c6b8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>
   1b678:	e3500000 	cmp	r0, #0
   1b67c:	1affffe1 	bne	1b608 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xc0>
   1b680:	eaffffe7 	b	1b624 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xdc>
   1b684:	e3a0208e 	mov	r2, #142	; 0x8e
   1b688:	e59f1048 	ldr	r1, [pc, #72]	; 1b6d8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b68c:	e59f0048 	ldr	r0, [pc, #72]	; 1b6dc <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x194>
   1b690:	eb0023fb 	bl	24684 <assertion_failed>
   1b694:	e3a02087 	mov	r2, #135	; 0x87
   1b698:	e59f1038 	ldr	r1, [pc, #56]	; 1b6d8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b69c:	e59f003c 	ldr	r0, [pc, #60]	; 1b6e0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x198>
   1b6a0:	eb0023f7 	bl	24684 <assertion_failed>
   1b6a4:	e3a02089 	mov	r2, #137	; 0x89
   1b6a8:	e59f1028 	ldr	r1, [pc, #40]	; 1b6d8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b6ac:	e59f0030 	ldr	r0, [pc, #48]	; 1b6e4 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x19c>
   1b6b0:	eb0023f3 	bl	24684 <assertion_failed>
   1b6b4:	e3a02092 	mov	r2, #146	; 0x92
   1b6b8:	e59f1018 	ldr	r1, [pc, #24]	; 1b6d8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b6bc:	e59f0024 	ldr	r0, [pc, #36]	; 1b6e8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x1a0>
   1b6c0:	eb0023ef 	bl	24684 <assertion_failed>
   1b6c4:	e3a02093 	mov	r2, #147	; 0x93
   1b6c8:	e59f1008 	ldr	r1, [pc, #8]	; 1b6d8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b6cc:	e59f0018 	ldr	r0, [pc, #24]	; 1b6ec <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x1a4>
   1b6d0:	eb0023eb 	bl	24684 <assertion_failed>
   1b6d4:	00000631 	.word	0x00000631
   1b6d8:	00043480 	.word	0x00043480
   1b6dc:	000434e4 	.word	0x000434e4
   1b6e0:	00043490 	.word	0x00043490
   1b6e4:	000434bc 	.word	0x000434bc
   1b6e8:	000432d0 	.word	0x000432d0
   1b6ec:	000434d0 	.word	0x000434d0

0001b6f0 <CLinkLayer::Receive(void*, unsigned int*)>:
   1b6f0:	e3510000 	cmp	r1, #0
   1b6f4:	e92d4010 	push	{r4, lr}
   1b6f8:	0a000009 	beq	1b724 <CLinkLayer::Receive(void*, unsigned int*)+0x34>
   1b6fc:	e3520000 	cmp	r2, #0
   1b700:	e1a04002 	mov	r4, r2
   1b704:	0a00000a 	beq	1b734 <CLinkLayer::Receive(void*, unsigned int*)+0x44>
   1b708:	e3a02000 	mov	r2, #0
   1b70c:	e280001c 	add	r0, r0, #28
   1b710:	eb001709 	bl	2133c <CNetQueue::Dequeue(void*, void**)>
   1b714:	e5840000 	str	r0, [r4]
   1b718:	e2500000 	subs	r0, r0, #0
   1b71c:	13a00001 	movne	r0, #1
   1b720:	e8bd8010 	pop	{r4, pc}
   1b724:	e3a020a9 	mov	r2, #169	; 0xa9
   1b728:	e59f1014 	ldr	r1, [pc, #20]	; 1b744 <CLinkLayer::Receive(void*, unsigned int*)+0x54>
   1b72c:	e59f0014 	ldr	r0, [pc, #20]	; 1b748 <CLinkLayer::Receive(void*, unsigned int*)+0x58>
   1b730:	eb0023d3 	bl	24684 <assertion_failed>
   1b734:	e3a020aa 	mov	r2, #170	; 0xaa
   1b738:	e59f1004 	ldr	r1, [pc, #4]	; 1b744 <CLinkLayer::Receive(void*, unsigned int*)+0x54>
   1b73c:	e59f0008 	ldr	r0, [pc, #8]	; 1b74c <CLinkLayer::Receive(void*, unsigned int*)+0x5c>
   1b740:	eb0023cf 	bl	24684 <assertion_failed>
   1b744:	00043480 	.word	0x00043480
   1b748:	00040460 	.word	0x00040460
   1b74c:	00040c48 	.word	0x00040c48

0001b750 <CLinkLayer::SendRaw(void const*, unsigned int)>:
   1b750:	e3510000 	cmp	r1, #0
   1b754:	e92d4010 	push	{r4, lr}
   1b758:	0a000007 	beq	1b77c <CLinkLayer::SendRaw(void const*, unsigned int)+0x2c>
   1b75c:	e3520000 	cmp	r2, #0
   1b760:	0a000009 	beq	1b78c <CLinkLayer::SendRaw(void const*, unsigned int)+0x3c>
   1b764:	e5900004 	ldr	r0, [r0, #4]
   1b768:	e3500000 	cmp	r0, #0
   1b76c:	0a00000a 	beq	1b79c <CLinkLayer::SendRaw(void const*, unsigned int)+0x4c>
   1b770:	eb000139 	bl	1bc5c <CNetDeviceLayer::Send(void const*, unsigned int)>
   1b774:	e3a00001 	mov	r0, #1
   1b778:	e8bd8010 	pop	{r4, pc}
   1b77c:	e3a020b2 	mov	r2, #178	; 0xb2
   1b780:	e59f1024 	ldr	r1, [pc, #36]	; 1b7ac <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b784:	e59f0024 	ldr	r0, [pc, #36]	; 1b7b0 <CLinkLayer::SendRaw(void const*, unsigned int)+0x60>
   1b788:	eb0023bd 	bl	24684 <assertion_failed>
   1b78c:	e3a020b3 	mov	r2, #179	; 0xb3
   1b790:	e59f1014 	ldr	r1, [pc, #20]	; 1b7ac <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b794:	e59f0018 	ldr	r0, [pc, #24]	; 1b7b4 <CLinkLayer::SendRaw(void const*, unsigned int)+0x64>
   1b798:	eb0023b9 	bl	24684 <assertion_failed>
   1b79c:	e3a020b4 	mov	r2, #180	; 0xb4
   1b7a0:	e59f1004 	ldr	r1, [pc, #4]	; 1b7ac <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b7a4:	e59f000c 	ldr	r0, [pc, #12]	; 1b7b8 <CLinkLayer::SendRaw(void const*, unsigned int)+0x68>
   1b7a8:	eb0023b5 	bl	24684 <assertion_failed>
   1b7ac:	00043480 	.word	0x00043480
   1b7b0:	000434f4 	.word	0x000434f4
   1b7b4:	00043358 	.word	0x00043358
   1b7b8:	00043490 	.word	0x00043490

0001b7bc <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)>:
   1b7bc:	e92d4030 	push	{r4, r5, lr}
   1b7c0:	e3510000 	cmp	r1, #0
   1b7c4:	e24dd00c 	sub	sp, sp, #12
   1b7c8:	0a00001c 	beq	1b840 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x84>
   1b7cc:	e3520000 	cmp	r2, #0
   1b7d0:	e1a04002 	mov	r4, r2
   1b7d4:	0a00001d 	beq	1b850 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x94>
   1b7d8:	e2800028 	add	r0, r0, #40	; 0x28
   1b7dc:	e28d2004 	add	r2, sp, #4
   1b7e0:	e1a05003 	mov	r5, r3
   1b7e4:	eb0016d4 	bl	2133c <CNetQueue::Dequeue(void*, void**)>
   1b7e8:	e3500000 	cmp	r0, #0
   1b7ec:	e5840000 	str	r0, [r4]
   1b7f0:	0a00000b 	beq	1b824 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x68>
   1b7f4:	e3550000 	cmp	r5, #0
   1b7f8:	e59d4004 	ldr	r4, [sp, #4]
   1b7fc:	0a00000a 	beq	1b82c <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x70>
   1b800:	e3540000 	cmp	r4, #0
   1b804:	0a000015 	beq	1b860 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa4>
   1b808:	e1a00005 	mov	r0, r5
   1b80c:	e1a01004 	mov	r1, r4
   1b810:	eb003cde 	bl	2ab90 <CMACAddress::Set(unsigned char const*)>
   1b814:	e1a00004 	mov	r0, r4
   1b818:	e3a01006 	mov	r1, #6
   1b81c:	eb003dad 	bl	2aed8 <operator delete(void*, unsigned int)>
   1b820:	e3a00001 	mov	r0, #1
   1b824:	e28dd00c 	add	sp, sp, #12
   1b828:	e8bd8030 	pop	{r4, r5, pc}
   1b82c:	e3540000 	cmp	r4, #0
   1b830:	03a00001 	moveq	r0, #1
   1b834:	1afffff6 	bne	1b814 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x58>
   1b838:	e28dd00c 	add	sp, sp, #12
   1b83c:	e8bd8030 	pop	{r4, r5, pc}
   1b840:	e3a020bd 	mov	r2, #189	; 0xbd
   1b844:	e59f1024 	ldr	r1, [pc, #36]	; 1b870 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xb4>
   1b848:	e59f0024 	ldr	r0, [pc, #36]	; 1b874 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xb8>
   1b84c:	eb00238c 	bl	24684 <assertion_failed>
   1b850:	e3a020be 	mov	r2, #190	; 0xbe
   1b854:	e59f1014 	ldr	r1, [pc, #20]	; 1b870 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xb4>
   1b858:	e59f0018 	ldr	r0, [pc, #24]	; 1b878 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xbc>
   1b85c:	eb002388 	bl	24684 <assertion_failed>
   1b860:	e3a020c9 	mov	r2, #201	; 0xc9
   1b864:	e59f1004 	ldr	r1, [pc, #4]	; 1b870 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xb4>
   1b868:	e59f000c 	ldr	r0, [pc, #12]	; 1b87c <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xc0>
   1b86c:	eb002384 	bl	24684 <assertion_failed>
   1b870:	00043480 	.word	0x00043480
   1b874:	00040460 	.word	0x00040460
   1b878:	00040c48 	.word	0x00040c48
   1b87c:	0004334c 	.word	0x0004334c

0001b880 <CLinkLayer::EnableReceiveRaw(unsigned short)>:
   1b880:	e1d033b4 	ldrh	r3, [r0, #52]	; 0x34
   1b884:	e3530000 	cmp	r3, #0
   1b888:	1a000005 	bne	1b8a4 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x24>
   1b88c:	e3510000 	cmp	r1, #0
   1b890:	0a000005 	beq	1b8ac <CLinkLayer::EnableReceiveRaw(unsigned short)+0x2c>
   1b894:	e6bf1fb1 	rev16	r1, r1
   1b898:	e1c013b4 	strh	r1, [r0, #52]	; 0x34
   1b89c:	e3a00001 	mov	r0, #1
   1b8a0:	e12fff1e 	bx	lr
   1b8a4:	e3a00000 	mov	r0, #0
   1b8a8:	e12fff1e 	bx	lr
   1b8ac:	e3a020d9 	mov	r2, #217	; 0xd9
   1b8b0:	e92d4010 	push	{r4, lr}
   1b8b4:	e59f1004 	ldr	r1, [pc, #4]	; 1b8c0 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x40>
   1b8b8:	e59f0004 	ldr	r0, [pc, #4]	; 1b8c4 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x44>
   1b8bc:	eb002370 	bl	24684 <assertion_failed>
   1b8c0:	00043480 	.word	0x00043480
   1b8c4:	00043500 	.word	0x00043500

0001b8c8 <CLinkLayer::ResolveFailed(void const*, unsigned int)>:
   1b8c8:	e3510000 	cmp	r1, #0
   1b8cc:	e92d4010 	push	{r4, lr}
   1b8d0:	0a000009 	beq	1b8fc <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x34>
   1b8d4:	e352000e 	cmp	r2, #14
   1b8d8:	9a00000b 	bls	1b90c <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x44>
   1b8dc:	e5900008 	ldr	r0, [r0, #8]
   1b8e0:	e3500000 	cmp	r0, #0
   1b8e4:	0a00000c 	beq	1b91c <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x54>
   1b8e8:	e8bd4010 	pop	{r4, lr}
   1b8ec:	e242300e 	sub	r3, r2, #14
   1b8f0:	e281200e 	add	r2, r1, #14
   1b8f4:	e3a01001 	mov	r1, #1
   1b8f8:	eafffe35 	b	1b1d4 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>
   1b8fc:	e3a020e1 	mov	r2, #225	; 0xe1
   1b900:	e59f1024 	ldr	r1, [pc, #36]	; 1b92c <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1b904:	e59f0024 	ldr	r0, [pc, #36]	; 1b930 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x68>
   1b908:	eb00235d 	bl	24684 <assertion_failed>
   1b90c:	e3a020e2 	mov	r2, #226	; 0xe2
   1b910:	e59f1014 	ldr	r1, [pc, #20]	; 1b92c <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1b914:	e59f0018 	ldr	r0, [pc, #24]	; 1b934 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x6c>
   1b918:	eb002359 	bl	24684 <assertion_failed>
   1b91c:	e3a020e3 	mov	r2, #227	; 0xe3
   1b920:	e59f1004 	ldr	r1, [pc, #4]	; 1b92c <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1b924:	e59f000c 	ldr	r0, [pc, #12]	; 1b938 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x70>
   1b928:	eb002355 	bl	24684 <assertion_failed>
   1b92c:	00043480 	.word	0x00043480
   1b930:	00043514 	.word	0x00043514
   1b934:	00043528 	.word	0x00043528
   1b938:	000432e4 	.word	0x000432e4

0001b93c <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>:
   1b93c:	e3a03000 	mov	r3, #0
   1b940:	e92d4010 	push	{r4, lr}
   1b944:	e1a04000 	mov	r4, r0
   1b948:	e5801004 	str	r1, [r0, #4]
   1b94c:	e5c02000 	strb	r2, [r0]
   1b950:	e5803008 	str	r3, [r0, #8]
   1b954:	e280000c 	add	r0, r0, #12
   1b958:	eb0015f4 	bl	21130 <CNetQueue::CNetQueue()>
   1b95c:	e2840018 	add	r0, r4, #24
   1b960:	eb0015f2 	bl	21130 <CNetQueue::CNetQueue()>
   1b964:	e1a00004 	mov	r0, r4
   1b968:	e8bd8010 	pop	{r4, pc}

0001b96c <CNetDeviceLayer::~CNetDeviceLayer()>:
   1b96c:	e3a03000 	mov	r3, #0
   1b970:	e92d4010 	push	{r4, lr}
   1b974:	e1a04000 	mov	r4, r0
   1b978:	e5803008 	str	r3, [r0, #8]
   1b97c:	e5803004 	str	r3, [r0, #4]
   1b980:	e2800018 	add	r0, r0, #24
   1b984:	eb001621 	bl	21210 <CNetQueue::~CNetQueue()>
   1b988:	e284000c 	add	r0, r4, #12
   1b98c:	eb00161f 	bl	21210 <CNetQueue::~CNetQueue()>
   1b990:	e1a00004 	mov	r0, r4
   1b994:	e8bd8010 	pop	{r4, pc}

0001b998 <CNetDeviceLayer::Initialize(bool)>:
   1b998:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b99c:	e5903008 	ldr	r3, [r0, #8]
   1b9a0:	e24dd00c 	sub	sp, sp, #12
   1b9a4:	e3530000 	cmp	r3, #0
   1b9a8:	1a000049 	bne	1bad4 <CNetDeviceLayer::Initialize(bool)+0x13c>
   1b9ac:	e1a04000 	mov	r4, r0
   1b9b0:	e5d00000 	ldrb	r0, [r0]
   1b9b4:	e1a05001 	mov	r5, r1
   1b9b8:	eb003d07 	bl	2addc <CNetDevice::GetNetDevice(TNetDeviceType)>
   1b9bc:	e3500000 	cmp	r0, #0
   1b9c0:	e1a06000 	mov	r6, r0
   1b9c4:	e5840008 	str	r0, [r4, #8]
   1b9c8:	0a000039 	beq	1bab4 <CNetDeviceLayer::Initialize(bool)+0x11c>
   1b9cc:	e3a000e0 	mov	r0, #224	; 0xe0
   1b9d0:	eb003d32 	bl	2aea0 <operator new(unsigned int)>
   1b9d4:	e5941008 	ldr	r1, [r4, #8]
   1b9d8:	eb0000e5 	bl	1bd74 <CPHYTask::CPHYTask(CNetDevice*)>
   1b9dc:	e3550000 	cmp	r5, #0
   1b9e0:	1a000002 	bne	1b9f0 <CNetDeviceLayer::Initialize(bool)+0x58>
   1b9e4:	e3a00001 	mov	r0, #1
   1b9e8:	e28dd00c 	add	sp, sp, #12
   1b9ec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1b9f0:	eb0038ef 	bl	29db4 <CTimer::Get()>
   1b9f4:	eb00363c 	bl	292ec <CTimer::GetTicks() const>
   1b9f8:	e1a06000 	mov	r6, r0
   1b9fc:	e59f70e0 	ldr	r7, [pc, #224]	; 1bae4 <CNetDeviceLayer::Initialize(bool)+0x14c>
   1ba00:	eb0038eb 	bl	29db4 <CTimer::Get()>
   1ba04:	eb003638 	bl	292ec <CTimer::GetTicks() const>
   1ba08:	e0403006 	sub	r3, r0, r6
   1ba0c:	e3530e19 	cmp	r3, #400	; 0x190
   1ba10:	2a00001f 	bcs	1ba94 <CNetDeviceLayer::Initialize(bool)+0xfc>
   1ba14:	e5940008 	ldr	r0, [r4, #8]
   1ba18:	e5902000 	ldr	r2, [r0]
   1ba1c:	e592301c 	ldr	r3, [r2, #28]
   1ba20:	e1530007 	cmp	r3, r7
   1ba24:	1a000014 	bne	1ba7c <CNetDeviceLayer::Initialize(bool)+0xe4>
   1ba28:	e5923020 	ldr	r3, [r2, #32]
   1ba2c:	e59f20b4 	ldr	r2, [pc, #180]	; 1bae8 <CNetDeviceLayer::Initialize(bool)+0x150>
   1ba30:	e1530002 	cmp	r3, r2
   1ba34:	0affffea 	beq	1b9e4 <CNetDeviceLayer::Initialize(bool)+0x4c>
   1ba38:	e12fff33 	blx	r3
   1ba3c:	e3500006 	cmp	r0, #6
   1ba40:	e1a06000 	mov	r6, r0
   1ba44:	0affffe6 	beq	1b9e4 <CNetDeviceLayer::Initialize(bool)+0x4c>
   1ba48:	eb002bf5 	bl	26a24 <CLogger::Get()>
   1ba4c:	e1a04000 	mov	r4, r0
   1ba50:	e1a00006 	mov	r0, r6
   1ba54:	eb003cd1 	bl	2ada0 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>
   1ba58:	e1a02000 	mov	r2, r0
   1ba5c:	e59f3088 	ldr	r3, [pc, #136]	; 1baec <CNetDeviceLayer::Initialize(bool)+0x154>
   1ba60:	e1a00004 	mov	r0, r4
   1ba64:	e58d2000 	str	r2, [sp]
   1ba68:	e59f1080 	ldr	r1, [pc, #128]	; 1baf0 <CNetDeviceLayer::Initialize(bool)+0x158>
   1ba6c:	e3a02003 	mov	r2, #3
   1ba70:	eb002b2d 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ba74:	e1a00005 	mov	r0, r5
   1ba78:	eaffffda 	b	1b9e8 <CNetDeviceLayer::Initialize(bool)+0x50>
   1ba7c:	e12fff33 	blx	r3
   1ba80:	e3500000 	cmp	r0, #0
   1ba84:	0affffdd 	beq	1ba00 <CNetDeviceLayer::Initialize(bool)+0x68>
   1ba88:	e5940008 	ldr	r0, [r4, #8]
   1ba8c:	e5902000 	ldr	r2, [r0]
   1ba90:	eaffffe4 	b	1ba28 <CNetDeviceLayer::Initialize(bool)+0x90>
   1ba94:	eb002be2 	bl	26a24 <CLogger::Get()>
   1ba98:	e3a02002 	mov	r2, #2
   1ba9c:	e59f3050 	ldr	r3, [pc, #80]	; 1baf4 <CNetDeviceLayer::Initialize(bool)+0x15c>
   1baa0:	e59f1048 	ldr	r1, [pc, #72]	; 1baf0 <CNetDeviceLayer::Initialize(bool)+0x158>
   1baa4:	eb002b20 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1baa8:	e1a00005 	mov	r0, r5
   1baac:	e28dd00c 	add	sp, sp, #12
   1bab0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1bab4:	eb002bda 	bl	26a24 <CLogger::Get()>
   1bab8:	e3a02001 	mov	r2, #1
   1babc:	e59f3034 	ldr	r3, [pc, #52]	; 1baf8 <CNetDeviceLayer::Initialize(bool)+0x160>
   1bac0:	e59f1028 	ldr	r1, [pc, #40]	; 1baf0 <CNetDeviceLayer::Initialize(bool)+0x158>
   1bac4:	eb002b18 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bac8:	e1a00006 	mov	r0, r6
   1bacc:	e28dd00c 	add	sp, sp, #12
   1bad0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1bad4:	e3a02033 	mov	r2, #51	; 0x33
   1bad8:	e59f101c 	ldr	r1, [pc, #28]	; 1bafc <CNetDeviceLayer::Initialize(bool)+0x164>
   1badc:	e59f001c 	ldr	r0, [pc, #28]	; 1bb00 <CNetDeviceLayer::Initialize(bool)+0x168>
   1bae0:	eb0022e7 	bl	24684 <assertion_failed>
   1bae4:	00017764 	.word	0x00017764
   1bae8:	0001776c 	.word	0x0001776c
   1baec:	00043588 	.word	0x00043588
   1baf0:	000435a4 	.word	0x000435a4
   1baf4:	00043578 	.word	0x00043578
   1baf8:	0004355c 	.word	0x0004355c
   1bafc:	0004354c 	.word	0x0004354c
   1bb00:	0003f2e4 	.word	0x0003f2e4

0001bb04 <CNetDeviceLayer::Process()>:
   1bb04:	e92d4070 	push	{r4, r5, r6, lr}
   1bb08:	e1a04000 	mov	r4, r0
   1bb0c:	e5900008 	ldr	r0, [r0, #8]
   1bb10:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1bb14:	e3500000 	cmp	r0, #0
   1bb18:	e24dd008 	sub	sp, sp, #8
   1bb1c:	0a000037 	beq	1bc00 <CNetDeviceLayer::Process()+0xfc>
   1bb20:	e59f50e8 	ldr	r5, [pc, #232]	; 1bc10 <CNetDeviceLayer::Process()+0x10c>
   1bb24:	e284600c 	add	r6, r4, #12
   1bb28:	ea00000f 	b	1bb6c <CNetDeviceLayer::Process()+0x68>
   1bb2c:	e3a02000 	mov	r2, #0
   1bb30:	e1a00006 	mov	r0, r6
   1bb34:	e28d1008 	add	r1, sp, #8
   1bb38:	eb0015ff 	bl	2133c <CNetQueue::Dequeue(void*, void**)>
   1bb3c:	e3500000 	cmp	r0, #0
   1bb40:	e1a02000 	mov	r2, r0
   1bb44:	e58d0004 	str	r0, [sp, #4]
   1bb48:	0a00000e 	beq	1bb88 <CNetDeviceLayer::Process()+0x84>
   1bb4c:	e5940008 	ldr	r0, [r4, #8]
   1bb50:	e28d1008 	add	r1, sp, #8
   1bb54:	e5903000 	ldr	r3, [r0]
   1bb58:	e5933014 	ldr	r3, [r3, #20]
   1bb5c:	e12fff33 	blx	r3
   1bb60:	e3500000 	cmp	r0, #0
   1bb64:	0a00001f 	beq	1bbe8 <CNetDeviceLayer::Process()+0xe4>
   1bb68:	e5940008 	ldr	r0, [r4, #8]
   1bb6c:	e5903000 	ldr	r3, [r0]
   1bb70:	e5933010 	ldr	r3, [r3, #16]
   1bb74:	e1530005 	cmp	r3, r5
   1bb78:	0affffeb 	beq	1bb2c <CNetDeviceLayer::Process()+0x28>
   1bb7c:	e12fff33 	blx	r3
   1bb80:	e3500000 	cmp	r0, #0
   1bb84:	1affffe8 	bne	1bb2c <CNetDeviceLayer::Process()+0x28>
   1bb88:	e2845018 	add	r5, r4, #24
   1bb8c:	ea000003 	b	1bba0 <CNetDeviceLayer::Process()+0x9c>
   1bb90:	e3a03000 	mov	r3, #0
   1bb94:	e1a00005 	mov	r0, r5
   1bb98:	e28d1008 	add	r1, sp, #8
   1bb9c:	eb0015a0 	bl	21224 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1bba0:	e5940008 	ldr	r0, [r4, #8]
   1bba4:	e28d2004 	add	r2, sp, #4
   1bba8:	e5903000 	ldr	r3, [r0]
   1bbac:	e28d1008 	add	r1, sp, #8
   1bbb0:	e5933018 	ldr	r3, [r3, #24]
   1bbb4:	e12fff33 	blx	r3
   1bbb8:	e3500000 	cmp	r0, #0
   1bbbc:	0a000006 	beq	1bbdc <CNetDeviceLayer::Process()+0xd8>
   1bbc0:	e59d2004 	ldr	r2, [sp, #4]
   1bbc4:	e3520000 	cmp	r2, #0
   1bbc8:	1afffff0 	bne	1bb90 <CNetDeviceLayer::Process()+0x8c>
   1bbcc:	e3a0206d 	mov	r2, #109	; 0x6d
   1bbd0:	e59f103c 	ldr	r1, [pc, #60]	; 1bc14 <CNetDeviceLayer::Process()+0x110>
   1bbd4:	e59f003c 	ldr	r0, [pc, #60]	; 1bc18 <CNetDeviceLayer::Process()+0x114>
   1bbd8:	eb0022a9 	bl	24684 <assertion_failed>
   1bbdc:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1bbe0:	e28dd008 	add	sp, sp, #8
   1bbe4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bbe8:	eb002b8d 	bl	26a24 <CLogger::Get()>
   1bbec:	e3a02002 	mov	r2, #2
   1bbf0:	e59f3024 	ldr	r3, [pc, #36]	; 1bc1c <CNetDeviceLayer::Process()+0x118>
   1bbf4:	e59f1024 	ldr	r1, [pc, #36]	; 1bc20 <CNetDeviceLayer::Process()+0x11c>
   1bbf8:	eb002acb 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bbfc:	eaffffe1 	b	1bb88 <CNetDeviceLayer::Process()+0x84>
   1bc00:	e3a0205c 	mov	r2, #92	; 0x5c
   1bc04:	e59f1008 	ldr	r1, [pc, #8]	; 1bc14 <CNetDeviceLayer::Process()+0x110>
   1bc08:	e59f0014 	ldr	r0, [pc, #20]	; 1bc24 <CNetDeviceLayer::Process()+0x120>
   1bc0c:	eb00229c 	bl	24684 <assertion_failed>
   1bc10:	0001601c 	.word	0x0001601c
   1bc14:	0004354c 	.word	0x0004354c
   1bc18:	00043358 	.word	0x00043358
   1bc1c:	00043594 	.word	0x00043594
   1bc20:	000435a4 	.word	0x000435a4
   1bc24:	0003f428 	.word	0x0003f428

0001bc28 <CNetDeviceLayer::GetMACAddress() const>:
   1bc28:	e5900008 	ldr	r0, [r0, #8]
   1bc2c:	e3500000 	cmp	r0, #0
   1bc30:	0a000002 	beq	1bc40 <CNetDeviceLayer::GetMACAddress() const+0x18>
   1bc34:	e5903000 	ldr	r3, [r0]
   1bc38:	e593300c 	ldr	r3, [r3, #12]
   1bc3c:	e12fff13 	bx	r3
   1bc40:	e3a02074 	mov	r2, #116	; 0x74
   1bc44:	e92d4010 	push	{r4, lr}
   1bc48:	e59f1004 	ldr	r1, [pc, #4]	; 1bc54 <CNetDeviceLayer::GetMACAddress() const+0x2c>
   1bc4c:	e59f0004 	ldr	r0, [pc, #4]	; 1bc58 <CNetDeviceLayer::GetMACAddress() const+0x30>
   1bc50:	eb00228b 	bl	24684 <assertion_failed>
   1bc54:	0004354c 	.word	0x0004354c
   1bc58:	0003f428 	.word	0x0003f428

0001bc5c <CNetDeviceLayer::Send(void const*, unsigned int)>:
   1bc5c:	e3a03000 	mov	r3, #0
   1bc60:	e280000c 	add	r0, r0, #12
   1bc64:	ea00156e 	b	21224 <CNetQueue::Enqueue(void const*, unsigned int, void*)>

0001bc68 <CNetDeviceLayer::Receive(void*, unsigned int*)>:
   1bc68:	e92d4010 	push	{r4, lr}
   1bc6c:	e2800018 	add	r0, r0, #24
   1bc70:	e1a04002 	mov	r4, r2
   1bc74:	e3a02000 	mov	r2, #0
   1bc78:	eb0015af 	bl	2133c <CNetQueue::Dequeue(void*, void**)>
   1bc7c:	e3500000 	cmp	r0, #0
   1bc80:	08bd8010 	popeq	{r4, pc}
   1bc84:	e3540000 	cmp	r4, #0
   1bc88:	0a000002 	beq	1bc98 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x30>
   1bc8c:	e5840000 	str	r0, [r4]
   1bc90:	e3a00001 	mov	r0, #1
   1bc94:	e8bd8010 	pop	{r4, pc}
   1bc98:	e3a02085 	mov	r2, #133	; 0x85
   1bc9c:	e59f1004 	ldr	r1, [pc, #4]	; 1bca8 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x40>
   1bca0:	e59f0004 	ldr	r0, [pc, #4]	; 1bcac <CNetDeviceLayer::Receive(void*, unsigned int*)+0x44>
   1bca4:	eb002276 	bl	24684 <assertion_failed>
   1bca8:	0004354c 	.word	0x0004354c
   1bcac:	00040c48 	.word	0x00040c48

0001bcb0 <CPHYTask::~CPHYTask()>:
   1bcb0:	e3a02000 	mov	r2, #0
   1bcb4:	e92d4010 	push	{r4, lr}
   1bcb8:	e1a04000 	mov	r4, r0
   1bcbc:	e59f3010 	ldr	r3, [pc, #16]	; 1bcd4 <CPHYTask::~CPHYTask()+0x24>
   1bcc0:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   1bcc4:	e5803000 	str	r3, [r0]
   1bcc8:	eb001fdc 	bl	23c40 <CTask::~CTask()>
   1bccc:	e1a00004 	mov	r0, r4
   1bcd0:	e8bd8010 	pop	{r4, pc}
   1bcd4:	000435c0 	.word	0x000435c0

0001bcd8 <CPHYTask::~CPHYTask()>:
   1bcd8:	e3a02000 	mov	r2, #0
   1bcdc:	e92d4010 	push	{r4, lr}
   1bce0:	e1a04000 	mov	r4, r0
   1bce4:	e59f301c 	ldr	r3, [pc, #28]	; 1bd08 <CPHYTask::~CPHYTask()+0x30>
   1bce8:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   1bcec:	e5803000 	str	r3, [r0]
   1bcf0:	eb001fd2 	bl	23c40 <CTask::~CTask()>
   1bcf4:	e1a00004 	mov	r0, r4
   1bcf8:	e3a010e0 	mov	r1, #224	; 0xe0
   1bcfc:	eb003c75 	bl	2aed8 <operator delete(void*, unsigned int)>
   1bd00:	e1a00004 	mov	r0, r4
   1bd04:	e8bd8010 	pop	{r4, pc}
   1bd08:	000435c0 	.word	0x000435c0

0001bd0c <CPHYTask::Run()>:
   1bd0c:	e92d4070 	push	{r4, r5, r6, lr}
   1bd10:	e1a04000 	mov	r4, r0
   1bd14:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   1bd18:	e3500000 	cmp	r0, #0
   1bd1c:	0a00000d 	beq	1bd58 <CPHYTask::Run()+0x4c>
   1bd20:	e59f5040 	ldr	r5, [pc, #64]	; 1bd68 <CPHYTask::Run()+0x5c>
   1bd24:	e5903000 	ldr	r3, [r0]
   1bd28:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1bd2c:	e1530005 	cmp	r3, r5
   1bd30:	08bd8070 	popeq	{r4, r5, r6, pc}
   1bd34:	e12fff33 	blx	r3
   1bd38:	e3500000 	cmp	r0, #0
   1bd3c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1bd40:	eb0021a3 	bl	243d4 <CScheduler::Get()>
   1bd44:	e3a01e7d 	mov	r1, #2000	; 0x7d0
   1bd48:	eb00217d 	bl	24344 <CScheduler::MsSleep(unsigned int)>
   1bd4c:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   1bd50:	e3500000 	cmp	r0, #0
   1bd54:	1afffff2 	bne	1bd24 <CPHYTask::Run()+0x18>
   1bd58:	e3a02026 	mov	r2, #38	; 0x26
   1bd5c:	e59f1008 	ldr	r1, [pc, #8]	; 1bd6c <CPHYTask::Run()+0x60>
   1bd60:	e59f0008 	ldr	r0, [pc, #8]	; 1bd70 <CPHYTask::Run()+0x64>
   1bd64:	eb002246 	bl	24684 <assertion_failed>
   1bd68:	00016024 	.word	0x00016024
   1bd6c:	000435ac 	.word	0x000435ac
   1bd70:	0003f428 	.word	0x0003f428

0001bd74 <CPHYTask::CPHYTask(CNetDevice*)>:
   1bd74:	e92d4070 	push	{r4, r5, r6, lr}
   1bd78:	e1a04000 	mov	r4, r0
   1bd7c:	e1a05001 	mov	r5, r1
   1bd80:	e3a01902 	mov	r1, #32768	; 0x8000
   1bd84:	eb001ffe 	bl	23d84 <CTask::CTask(unsigned int)>
   1bd88:	e59f300c 	ldr	r3, [pc, #12]	; 1bd9c <CPHYTask::CPHYTask(CNetDevice*)+0x28>
   1bd8c:	e1a00004 	mov	r0, r4
   1bd90:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   1bd94:	e5843000 	str	r3, [r4]
   1bd98:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bd9c:	000435c0 	.word	0x000435c0

0001bda0 <CARPHandler::TimerHandler(unsigned int, void*, void*)>:
   1bda0:	e92d4070 	push	{r4, r5, r6, lr}
   1bda4:	e2524000 	subs	r4, r2, #0
   1bda8:	0a00001a 	beq	1be18 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x78>
   1bdac:	e5943010 	ldr	r3, [r4, #16]
   1bdb0:	e1a05001 	mov	r5, r1
   1bdb4:	e1530001 	cmp	r3, r1
   1bdb8:	9a00001a 	bls	1be28 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x88>
   1bdbc:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1bdc0:	e3500000 	cmp	r0, #0
   1bdc4:	1a000006 	bne	1bde4 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x44>
   1bdc8:	e0615181 	rsb	r5, r1, r1, lsl #3
   1bdcc:	e0844105 	add	r4, r4, r5, lsl #2
   1bdd0:	e5d43014 	ldrb	r3, [r4, #20]
   1bdd4:	e3530001 	cmp	r3, #1
   1bdd8:	03a03002 	moveq	r3, #2
   1bddc:	05c43014 	strbeq	r3, [r4, #20]
   1bde0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bde4:	e0655185 	rsb	r5, r5, r5, lsl #3
   1bde8:	e0845105 	add	r5, r4, r5, lsl #2
   1bdec:	eb003f58 	bl	2bb54 <EnterCritical>
   1bdf0:	e5d53014 	ldrb	r3, [r5, #20]
   1bdf4:	e3530001 	cmp	r3, #1
   1bdf8:	03a02002 	moveq	r2, #2
   1bdfc:	05943244 	ldreq	r3, [r4, #580]	; 0x244
   1be00:	15943244 	ldrne	r3, [r4, #580]	; 0x244
   1be04:	05c52014 	strbeq	r2, [r5, #20]
   1be08:	e3530000 	cmp	r3, #0
   1be0c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1be10:	e8bd4070 	pop	{r4, r5, r6, lr}
   1be14:	ea003f78 	b	2bbfc <LeaveCritical>
   1be18:	e59f2018 	ldr	r2, [pc, #24]	; 1be38 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x98>
   1be1c:	e59f1018 	ldr	r1, [pc, #24]	; 1be3c <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x9c>
   1be20:	e59f0018 	ldr	r0, [pc, #24]	; 1be40 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa0>
   1be24:	eb002216 	bl	24684 <assertion_failed>
   1be28:	e3a02f6b 	mov	r2, #428	; 0x1ac
   1be2c:	e59f1008 	ldr	r1, [pc, #8]	; 1be3c <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x9c>
   1be30:	e59f000c 	ldr	r0, [pc, #12]	; 1be44 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa4>
   1be34:	eb002212 	bl	24684 <assertion_failed>
   1be38:	000001a9 	.word	0x000001a9
   1be3c:	000435cc 	.word	0x000435cc
   1be40:	0003ea38 	.word	0x0003ea38
   1be44:	000435dc 	.word	0x000435dc

0001be48 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>:
   1be48:	e92d4010 	push	{r4, lr}
   1be4c:	e3a0e000 	mov	lr, #0
   1be50:	e3a04001 	mov	r4, #1
   1be54:	e151000e 	cmp	r1, lr
   1be58:	e5801000 	str	r1, [r0]
   1be5c:	e59d1008 	ldr	r1, [sp, #8]
   1be60:	e1c020f4 	strd	r2, [r0, #4]
   1be64:	e5804244 	str	r4, [r0, #580]	; 0x244
   1be68:	e580100c 	str	r1, [r0, #12]
   1be6c:	e580e010 	str	lr, [r0, #16]
   1be70:	e580e248 	str	lr, [r0, #584]	; 0x248
   1be74:	0a000009 	beq	1bea0 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x58>
   1be78:	e3520000 	cmp	r2, #0
   1be7c:	0a00000b 	beq	1beb0 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x68>
   1be80:	e3530000 	cmp	r3, #0
   1be84:	0a00000d 	beq	1bec0 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x78>
   1be88:	e3510000 	cmp	r1, #0
   1be8c:	18bd8010 	popne	{r4, pc}
   1be90:	e3a02045 	mov	r2, #69	; 0x45
   1be94:	e59f1034 	ldr	r1, [pc, #52]	; 1bed0 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x88>
   1be98:	e59f0034 	ldr	r0, [pc, #52]	; 1bed4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x8c>
   1be9c:	eb0021f8 	bl	24684 <assertion_failed>
   1bea0:	e3a02042 	mov	r2, #66	; 0x42
   1bea4:	e59f1024 	ldr	r1, [pc, #36]	; 1bed0 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x88>
   1bea8:	e59f0028 	ldr	r0, [pc, #40]	; 1bed8 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x90>
   1beac:	eb0021f4 	bl	24684 <assertion_failed>
   1beb0:	e3a02043 	mov	r2, #67	; 0x43
   1beb4:	e59f1014 	ldr	r1, [pc, #20]	; 1bed0 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x88>
   1beb8:	e59f001c 	ldr	r0, [pc, #28]	; 1bedc <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x94>
   1bebc:	eb0021f0 	bl	24684 <assertion_failed>
   1bec0:	e3a02044 	mov	r2, #68	; 0x44
   1bec4:	e59f1004 	ldr	r1, [pc, #4]	; 1bed0 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x88>
   1bec8:	e59f0010 	ldr	r0, [pc, #16]	; 1bee0 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x98>
   1becc:	eb0021ec 	bl	24684 <assertion_failed>
   1bed0:	000435cc 	.word	0x000435cc
   1bed4:	000435f8 	.word	0x000435f8
   1bed8:	000432d0 	.word	0x000432d0
   1bedc:	00043490 	.word	0x00043490
   1bee0:	0004338c 	.word	0x0004338c

0001bee4 <CARPHandler::~CARPHandler()>:
   1bee4:	e5903010 	ldr	r3, [r0, #16]
   1bee8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1beec:	e3530000 	cmp	r3, #0
   1bef0:	e1a07000 	mov	r7, r0
   1bef4:	0a000010 	beq	1bf3c <CARPHandler::~CARPHandler()+0x58>
   1bef8:	e3a05000 	mov	r5, #0
   1befc:	e1a04000 	mov	r4, r0
   1bf00:	e1a08005 	mov	r8, r5
   1bf04:	e594602c 	ldr	r6, [r4, #44]	; 0x2c
   1bf08:	e2855001 	add	r5, r5, #1
   1bf0c:	e3560000 	cmp	r6, #0
   1bf10:	0a000005 	beq	1bf2c <CARPHandler::~CARPHandler()+0x48>
   1bf14:	e1a00006 	mov	r0, r6
   1bf18:	eb0014bc 	bl	21210 <CNetQueue::~CNetQueue()>
   1bf1c:	e1a00006 	mov	r0, r6
   1bf20:	e3a0100c 	mov	r1, #12
   1bf24:	eb003beb 	bl	2aed8 <operator delete(void*, unsigned int)>
   1bf28:	e5973010 	ldr	r3, [r7, #16]
   1bf2c:	e1530005 	cmp	r3, r5
   1bf30:	e584802c 	str	r8, [r4, #44]	; 0x2c
   1bf34:	e284401c 	add	r4, r4, #28
   1bf38:	8afffff1 	bhi	1bf04 <CARPHandler::~CARPHandler()+0x20>
   1bf3c:	e1a00007 	mov	r0, r7
   1bf40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001bf44 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>:
   1bf44:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bf48:	e1a06000 	mov	r6, r0
   1bf4c:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1bf50:	e1a07001 	mov	r7, r1
   1bf54:	e3500000 	cmp	r0, #0
   1bf58:	e1a08002 	mov	r8, r2
   1bf5c:	1a000029 	bne	1c008 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xc4>
   1bf60:	e5962010 	ldr	r2, [r6, #16]
   1bf64:	e3520000 	cmp	r2, #0
   1bf68:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bf6c:	e3a04000 	mov	r4, #0
   1bf70:	e2865015 	add	r5, r6, #21
   1bf74:	e0643184 	rsb	r3, r4, r4, lsl #3
   1bf78:	e0863103 	add	r3, r6, r3, lsl #2
   1bf7c:	e5d30014 	ldrb	r0, [r3, #20]
   1bf80:	e1a09184 	lsl	r9, r4, #3
   1bf84:	e3500001 	cmp	r0, #1
   1bf88:	0a000002 	beq	1bf98 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x54>
   1bf8c:	e5d33014 	ldrb	r3, [r3, #20]
   1bf90:	e3530002 	cmp	r3, #2
   1bf94:	1a000005 	bne	1bfb0 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x6c>
   1bf98:	e1a01005 	mov	r1, r5
   1bf9c:	e1a00007 	mov	r0, r7
   1bfa0:	eb00135b 	bl	20d14 <CIPAddress::operator==(unsigned char const*) const>
   1bfa4:	e3500000 	cmp	r0, #0
   1bfa8:	1a000009 	bne	1bfd4 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x90>
   1bfac:	e5962010 	ldr	r2, [r6, #16]
   1bfb0:	e2844001 	add	r4, r4, #1
   1bfb4:	e1520004 	cmp	r2, r4
   1bfb8:	e285501c 	add	r5, r5, #28
   1bfbc:	8affffec 	bhi	1bf74 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x30>
   1bfc0:	e5963244 	ldr	r3, [r6, #580]	; 0x244
   1bfc4:	e3530000 	cmp	r3, #0
   1bfc8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bfcc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bfd0:	ea003f09 	b	2bbfc <LeaveCritical>
   1bfd4:	e0494004 	sub	r4, r9, r4
   1bfd8:	e0865104 	add	r5, r6, r4, lsl #2
   1bfdc:	e1a04104 	lsl	r4, r4, #2
   1bfe0:	eb003773 	bl	29db4 <CTimer::Get()>
   1bfe4:	e2844019 	add	r4, r4, #25
   1bfe8:	e5951020 	ldr	r1, [r5, #32]
   1bfec:	eb003600 	bl	297f4 <CTimer::CancelKernelTimer(unsigned int)>
   1bff0:	e1a00008 	mov	r0, r8
   1bff4:	e0861004 	add	r1, r6, r4
   1bff8:	eb003b0e 	bl	2ac38 <CMACAddress::CopyTo(unsigned char*) const>
   1bffc:	e3a03003 	mov	r3, #3
   1c000:	e5c53014 	strb	r3, [r5, #20]
   1c004:	eaffffed 	b	1bfc0 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x7c>
   1c008:	eb003ed1 	bl	2bb54 <EnterCritical>
   1c00c:	e5962010 	ldr	r2, [r6, #16]
   1c010:	e3520000 	cmp	r2, #0
   1c014:	1affffd4 	bne	1bf6c <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x28>
   1c018:	eaffffe8 	b	1bfc0 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x7c>

0001c01c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>:
   1c01c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c020:	e1a09000 	mov	r9, r0
   1c024:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1c028:	e1a06001 	mov	r6, r1
   1c02c:	e3500000 	cmp	r0, #0
   1c030:	e1a08002 	mov	r8, r2
   1c034:	e24dd00c 	sub	sp, sp, #12
   1c038:	1a000049 	bne	1c164 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x148>
   1c03c:	e599e010 	ldr	lr, [r9, #16]
   1c040:	e35e0000 	cmp	lr, #0
   1c044:	0a000032 	beq	1c114 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xf8>
   1c048:	e3a04000 	mov	r4, #0
   1c04c:	e3a05014 	mov	r5, #20
   1c050:	e2897015 	add	r7, r9, #21
   1c054:	ea000004 	b	1c06c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x50>
   1c058:	e3550014 	cmp	r5, #20
   1c05c:	01a05004 	moveq	r5, r4
   1c060:	e2844001 	add	r4, r4, #1
   1c064:	e15e0004 	cmp	lr, r4
   1c068:	9a00000e 	bls	1c0a8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x8c>
   1c06c:	e0643184 	rsb	r3, r4, r4, lsl #3
   1c070:	e0892103 	add	r2, r9, r3, lsl #2
   1c074:	e5d2c014 	ldrb	ip, [r2, #20]
   1c078:	e1a03103 	lsl	r3, r3, #2
   1c07c:	e35c0000 	cmp	ip, #0
   1c080:	0afffff4 	beq	1c058 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x3c>
   1c084:	e1a00006 	mov	r0, r6
   1c088:	e0871003 	add	r1, r7, r3
   1c08c:	eb001320 	bl	20d14 <CIPAddress::operator==(unsigned char const*) const>
   1c090:	e3500000 	cmp	r0, #0
   1c094:	1a000017 	bne	1c0f8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xdc>
   1c098:	e599e010 	ldr	lr, [r9, #16]
   1c09c:	e2844001 	add	r4, r4, #1
   1c0a0:	e15e0004 	cmp	lr, r4
   1c0a4:	8afffff0 	bhi	1c06c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x50>
   1c0a8:	e3550014 	cmp	r5, #20
   1c0ac:	0a000016 	beq	1c10c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xf0>
   1c0b0:	e0657185 	rsb	r7, r5, r5, lsl #3
   1c0b4:	e1a07107 	lsl	r7, r7, #2
   1c0b8:	e287a019 	add	sl, r7, #25
   1c0bc:	e1a04185 	lsl	r4, r5, #3
   1c0c0:	e2877015 	add	r7, r7, #21
   1c0c4:	e1a00006 	mov	r0, r6
   1c0c8:	e0891007 	add	r1, r9, r7
   1c0cc:	eb001392 	bl	20f1c <CIPAddress::CopyTo(unsigned char*) const>
   1c0d0:	e089100a 	add	r1, r9, sl
   1c0d4:	e1a00008 	mov	r0, r8
   1c0d8:	eb003ad6 	bl	2ac38 <CMACAddress::CopyTo(unsigned char*) const>
   1c0dc:	eb003734 	bl	29db4 <CTimer::Get()>
   1c0e0:	eb003481 	bl	292ec <CTimer::GetTicks() const>
   1c0e4:	e3a03004 	mov	r3, #4
   1c0e8:	e0445005 	sub	r5, r4, r5
   1c0ec:	e0895105 	add	r5, r9, r5, lsl #2
   1c0f0:	e5850028 	str	r0, [r5, #40]	; 0x28
   1c0f4:	e5c53014 	strb	r3, [r5, #20]
   1c0f8:	e5993244 	ldr	r3, [r9, #580]	; 0x244
   1c0fc:	e3530000 	cmp	r3, #0
   1c100:	1a00001f 	bne	1c184 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x168>
   1c104:	e28dd00c 	add	sp, sp, #12
   1c108:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c10c:	e35e0014 	cmp	lr, #20
   1c110:	0afffff8 	beq	1c0f8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xdc>
   1c114:	e1a0500e 	mov	r5, lr
   1c118:	e06ea18e 	rsb	sl, lr, lr, lsl #3
   1c11c:	e1a0a10a 	lsl	sl, sl, #2
   1c120:	e28a7015 	add	r7, sl, #21
   1c124:	e28aa019 	add	sl, sl, #25
   1c128:	e3a03000 	mov	r3, #0
   1c12c:	e06eb18e 	rsb	fp, lr, lr, lsl #3
   1c130:	e089b10b 	add	fp, r9, fp, lsl #2
   1c134:	e5cb3014 	strb	r3, [fp, #20]
   1c138:	e3a0000c 	mov	r0, #12
   1c13c:	e1a0418e 	lsl	r4, lr, #3
   1c140:	eb003b56 	bl	2aea0 <operator new(unsigned int)>
   1c144:	e58d0004 	str	r0, [sp, #4]
   1c148:	eb0013f8 	bl	21130 <CNetQueue::CNetQueue()>
   1c14c:	e5993010 	ldr	r3, [r9, #16]
   1c150:	e59d2004 	ldr	r2, [sp, #4]
   1c154:	e2833001 	add	r3, r3, #1
   1c158:	e58b202c 	str	r2, [fp, #44]	; 0x2c
   1c15c:	e5893010 	str	r3, [r9, #16]
   1c160:	eaffffd7 	b	1c0c4 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xa8>
   1c164:	eb003e7a 	bl	2bb54 <EnterCritical>
   1c168:	e599e010 	ldr	lr, [r9, #16]
   1c16c:	e35e0000 	cmp	lr, #0
   1c170:	e1a0500e 	mov	r5, lr
   1c174:	1affffb3 	bne	1c048 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x2c>
   1c178:	e3a0a019 	mov	sl, #25
   1c17c:	e3a07015 	mov	r7, #21
   1c180:	eaffffe8 	b	1c128 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x10c>
   1c184:	e28dd00c 	add	sp, sp, #12
   1c188:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c18c:	ea003e9a 	b	2bbfc <LeaveCritical>

0001c190 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>:
   1c190:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1c194:	e1a04000 	mov	r4, r0
   1c198:	e5900000 	ldr	r0, [r0]
   1c19c:	e24dd034 	sub	sp, sp, #52	; 0x34
   1c1a0:	e3500000 	cmp	r0, #0
   1c1a4:	0a00002a 	beq	1c254 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xc4>
   1c1a8:	e1a08001 	mov	r8, r1
   1c1ac:	e1a07002 	mov	r7, r2
   1c1b0:	e1a05003 	mov	r5, r3
   1c1b4:	eb001235 	bl	20a90 <CNetConfig::GetIPAddress() const>
   1c1b8:	e2509000 	subs	r9, r0, #0
   1c1bc:	0a000028 	beq	1c264 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xd4>
   1c1c0:	e5940004 	ldr	r0, [r4, #4]
   1c1c4:	e3500000 	cmp	r0, #0
   1c1c8:	0a000029 	beq	1c274 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xe4>
   1c1cc:	ebfffe95 	bl	1bc28 <CNetDeviceLayer::GetMACAddress() const>
   1c1d0:	e2506000 	subs	r6, r0, #0
   1c1d4:	0a00002a 	beq	1c284 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xf4>
   1c1d8:	e1a00005 	mov	r0, r5
   1c1dc:	e28d1004 	add	r1, sp, #4
   1c1e0:	eb003a94 	bl	2ac38 <CMACAddress::CopyTo(unsigned char*) const>
   1c1e4:	e1a00006 	mov	r0, r6
   1c1e8:	e28d100a 	add	r1, sp, #10
   1c1ec:	eb003a91 	bl	2ac38 <CMACAddress::CopyTo(unsigned char*) const>
   1c1f0:	e3580000 	cmp	r8, #0
   1c1f4:	13a0cc01 	movne	ip, #256	; 0x100
   1c1f8:	03a0cc02 	moveq	ip, #512	; 0x200
   1c1fc:	e59f3090 	ldr	r3, [pc, #144]	; 1c294 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x104>
   1c200:	e59f2090 	ldr	r2, [pc, #144]	; 1c298 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x108>
   1c204:	e1a00006 	mov	r0, r6
   1c208:	e28d101a 	add	r1, sp, #26
   1c20c:	e1cd21f0 	strd	r2, [sp, #16]
   1c210:	e1cdc1b8 	strh	ip, [sp, #24]
   1c214:	eb003a87 	bl	2ac38 <CMACAddress::CopyTo(unsigned char*) const>
   1c218:	e1a00009 	mov	r0, r9
   1c21c:	e28d1020 	add	r1, sp, #32
   1c220:	eb00133d 	bl	20f1c <CIPAddress::CopyTo(unsigned char*) const>
   1c224:	e1a00005 	mov	r0, r5
   1c228:	e28d1024 	add	r1, sp, #36	; 0x24
   1c22c:	eb003a81 	bl	2ac38 <CMACAddress::CopyTo(unsigned char*) const>
   1c230:	e1a00007 	mov	r0, r7
   1c234:	e28d102a 	add	r1, sp, #42	; 0x2a
   1c238:	eb001337 	bl	20f1c <CIPAddress::CopyTo(unsigned char*) const>
   1c23c:	e3a0202a 	mov	r2, #42	; 0x2a
   1c240:	e5940004 	ldr	r0, [r4, #4]
   1c244:	e28d1004 	add	r1, sp, #4
   1c248:	ebfffe83 	bl	1bc5c <CNetDeviceLayer::Send(void const*, unsigned int)>
   1c24c:	e28dd034 	add	sp, sp, #52	; 0x34
   1c250:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c254:	e59f2040 	ldr	r2, [pc, #64]	; 1c29c <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x10c>
   1c258:	e59f1040 	ldr	r1, [pc, #64]	; 1c2a0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x110>
   1c25c:	e59f0040 	ldr	r0, [pc, #64]	; 1c2a4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x114>
   1c260:	eb002107 	bl	24684 <assertion_failed>
   1c264:	e3a02f63 	mov	r2, #396	; 0x18c
   1c268:	e59f1030 	ldr	r1, [pc, #48]	; 1c2a0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x110>
   1c26c:	e59f0034 	ldr	r0, [pc, #52]	; 1c2a8 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x118>
   1c270:	eb002103 	bl	24684 <assertion_failed>
   1c274:	e59f2030 	ldr	r2, [pc, #48]	; 1c2ac <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x11c>
   1c278:	e59f1020 	ldr	r1, [pc, #32]	; 1c2a0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x110>
   1c27c:	e59f002c 	ldr	r0, [pc, #44]	; 1c2b0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x120>
   1c280:	eb0020ff 	bl	24684 <assertion_failed>
   1c284:	e3a02e19 	mov	r2, #400	; 0x190
   1c288:	e59f1010 	ldr	r1, [pc, #16]	; 1c2a0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x110>
   1c28c:	e59f0020 	ldr	r0, [pc, #32]	; 1c2b4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x124>
   1c290:	eb0020fb 	bl	24684 <assertion_failed>
   1c294:	04060008 	.word	0x04060008
   1c298:	01000608 	.word	0x01000608
   1c29c:	0000018a 	.word	0x0000018a
   1c2a0:	000435cc 	.word	0x000435cc
   1c2a4:	000432d0 	.word	0x000432d0
   1c2a8:	000433b4 	.word	0x000433b4
   1c2ac:	0000018e 	.word	0x0000018e
   1c2b0:	00043490 	.word	0x00043490
   1c2b4:	000434bc 	.word	0x000434bc

0001c2b8 <CARPHandler::Process()>:
   1c2b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2bc:	e1a05000 	mov	r5, r0
   1c2c0:	e5900000 	ldr	r0, [r0]
   1c2c4:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1c2c8:	e3500000 	cmp	r0, #0
   1c2cc:	e24dd00c 	sub	sp, sp, #12
   1c2d0:	0a0000c5 	beq	1c5ec <CARPHandler::Process()+0x334>
   1c2d4:	eb0011ed 	bl	20a90 <CNetConfig::GetIPAddress() const>
   1c2d8:	e2504000 	subs	r4, r0, #0
   1c2dc:	0a0000ca 	beq	1c60c <CARPHandler::Process()+0x354>
   1c2e0:	e595000c 	ldr	r0, [r5, #12]
   1c2e4:	e3500000 	cmp	r0, #0
   1c2e8:	0a0000cb 	beq	1c61c <CARPHandler::Process()+0x364>
   1c2ec:	e28d3018 	add	r3, sp, #24
   1c2f0:	e28d6030 	add	r6, sp, #48	; 0x30
   1c2f4:	e2838008 	add	r8, r3, #8
   1c2f8:	e3a02000 	mov	r2, #0
   1c2fc:	e28d1018 	add	r1, sp, #24
   1c300:	eb00140d 	bl	2133c <CNetQueue::Dequeue(void*, void**)>
   1c304:	e2507000 	subs	r7, r0, #0
   1c308:	0a00000f 	beq	1c34c <CARPHandler::Process()+0x94>
   1c30c:	e357001b 	cmp	r7, #27
   1c310:	9a00000b 	bls	1c344 <CARPHandler::Process()+0x8c>
   1c314:	e1dd31b8 	ldrh	r3, [sp, #24]
   1c318:	e3530c01 	cmp	r3, #256	; 0x100
   1c31c:	1a000008 	bne	1c344 <CARPHandler::Process()+0x8c>
   1c320:	e1dd31ba 	ldrh	r3, [sp, #26]
   1c324:	e3530008 	cmp	r3, #8
   1c328:	1a000005 	bne	1c344 <CARPHandler::Process()+0x8c>
   1c32c:	e5dd301c 	ldrb	r3, [sp, #28]
   1c330:	e3530006 	cmp	r3, #6
   1c334:	1a000002 	bne	1c344 <CARPHandler::Process()+0x8c>
   1c338:	e5dd301d 	ldrb	r3, [sp, #29]
   1c33c:	e3530004 	cmp	r3, #4
   1c340:	0a00008c 	beq	1c578 <CARPHandler::Process()+0x2c0>
   1c344:	e595000c 	ldr	r0, [r5, #12]
   1c348:	eaffffea 	b	1c2f8 <CARPHandler::Process()+0x40>
   1c34c:	e5953008 	ldr	r3, [r5, #8]
   1c350:	e3530000 	cmp	r3, #0
   1c354:	0a0000b4 	beq	1c62c <CARPHandler::Process()+0x374>
   1c358:	e5953004 	ldr	r3, [r5, #4]
   1c35c:	e3530000 	cmp	r3, #0
   1c360:	0a0000b5 	beq	1c63c <CARPHandler::Process()+0x384>
   1c364:	e5952010 	ldr	r2, [r5, #16]
   1c368:	e3520000 	cmp	r2, #0
   1c36c:	0a000027 	beq	1c410 <CARPHandler::Process()+0x158>
   1c370:	e1a06007 	mov	r6, r7
   1c374:	e59fa318 	ldr	sl, [pc, #792]	; 1c694 <CARPHandler::Process()+0x3dc>
   1c378:	e2854019 	add	r4, r5, #25
   1c37c:	e28d9010 	add	r9, sp, #16
   1c380:	e066b186 	rsb	fp, r6, r6, lsl #3
   1c384:	e085b10b 	add	fp, r5, fp, lsl #2
   1c388:	e5db3014 	ldrb	r3, [fp, #20]
   1c38c:	e1a08186 	lsl	r8, r6, #3
   1c390:	e3530002 	cmp	r3, #2
   1c394:	e6ef3073 	uxtb	r3, r3
   1c398:	0a00003f 	beq	1c49c <CARPHandler::Process()+0x1e4>
   1c39c:	e3530003 	cmp	r3, #3
   1c3a0:	1a000016 	bne	1c400 <CARPHandler::Process()+0x148>
   1c3a4:	e5940013 	ldr	r0, [r4, #19]
   1c3a8:	e3500000 	cmp	r0, #0
   1c3ac:	1a000009 	bne	1c3d8 <CARPHandler::Process()+0x120>
   1c3b0:	ea00006c 	b	1c568 <CARPHandler::Process()+0x2b0>
   1c3b4:	e3a02006 	mov	r2, #6
   1c3b8:	e1a01004 	mov	r1, r4
   1c3bc:	e28d0018 	add	r0, sp, #24
   1c3c0:	eb0038d0 	bl	2a708 <memcpy>
   1c3c4:	e5950004 	ldr	r0, [r5, #4]
   1c3c8:	e1a0200b 	mov	r2, fp
   1c3cc:	e28d1018 	add	r1, sp, #24
   1c3d0:	ebfffe21 	bl	1bc5c <CNetDeviceLayer::Send(void const*, unsigned int)>
   1c3d4:	e5940013 	ldr	r0, [r4, #19]
   1c3d8:	e3a02000 	mov	r2, #0
   1c3dc:	e28d1018 	add	r1, sp, #24
   1c3e0:	eb0013d5 	bl	2133c <CNetQueue::Dequeue(void*, void**)>
   1c3e4:	e250b000 	subs	fp, r0, #0
   1c3e8:	1afffff1 	bne	1c3b4 <CARPHandler::Process()+0xfc>
   1c3ec:	e3a03004 	mov	r3, #4
   1c3f0:	e0488006 	sub	r8, r8, r6
   1c3f4:	e0858108 	add	r8, r5, r8, lsl #2
   1c3f8:	e5c83014 	strb	r3, [r8, #20]
   1c3fc:	e5952010 	ldr	r2, [r5, #16]
   1c400:	e2866001 	add	r6, r6, #1
   1c404:	e1520006 	cmp	r2, r6
   1c408:	e284401c 	add	r4, r4, #28
   1c40c:	8affffdb 	bhi	1c380 <CARPHandler::Process()+0xc8>
   1c410:	eb003667 	bl	29db4 <CTimer::Get()>
   1c414:	eb0033b4 	bl	292ec <CTimer::GetTicks() const>
   1c418:	e5953248 	ldr	r3, [r5, #584]	; 0x248
   1c41c:	e59f2274 	ldr	r2, [pc, #628]	; 1c698 <CARPHandler::Process()+0x3e0>
   1c420:	e0403003 	sub	r3, r0, r3
   1c424:	e1530002 	cmp	r3, r2
   1c428:	e1a04000 	mov	r4, r0
   1c42c:	9a000017 	bls	1c490 <CARPHandler::Process()+0x1d8>
   1c430:	e5950244 	ldr	r0, [r5, #580]	; 0x244
   1c434:	e5854248 	str	r4, [r5, #584]	; 0x248
   1c438:	e3500000 	cmp	r0, #0
   1c43c:	1a000084 	bne	1c654 <CARPHandler::Process()+0x39c>
   1c440:	e595c010 	ldr	ip, [r5, #16]
   1c444:	e35c0000 	cmp	ip, #0
   1c448:	0a000010 	beq	1c490 <CARPHandler::Process()+0x1d8>
   1c44c:	e3a06000 	mov	r6, #0
   1c450:	e285e028 	add	lr, r5, #40	; 0x28
   1c454:	e0673187 	rsb	r3, r7, r7, lsl #3
   1c458:	e0852103 	add	r2, r5, r3, lsl #2
   1c45c:	e5d21014 	ldrb	r1, [r2, #20]
   1c460:	e3510004 	cmp	r1, #4
   1c464:	1a000004 	bne	1c47c <CARPHandler::Process()+0x1c4>
   1c468:	e79e3103 	ldr	r3, [lr, r3, lsl #2]
   1c46c:	e2833cea 	add	r3, r3, #59904	; 0xea00
   1c470:	e2833060 	add	r3, r3, #96	; 0x60
   1c474:	e1530004 	cmp	r3, r4
   1c478:	35c26014 	strbcc	r6, [r2, #20]
   1c47c:	e2877001 	add	r7, r7, #1
   1c480:	e15c0007 	cmp	ip, r7
   1c484:	8afffff2 	bhi	1c454 <CARPHandler::Process()+0x19c>
   1c488:	e3500000 	cmp	r0, #0
   1c48c:	1a00006e 	bne	1c64c <CARPHandler::Process()+0x394>
   1c490:	e28dde65 	add	sp, sp, #1616	; 0x650
   1c494:	e28dd00c 	add	sp, sp, #12
   1c498:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c49c:	e594300b 	ldr	r3, [r4, #11]
   1c4a0:	e3530002 	cmp	r3, #2
   1c4a4:	e2833001 	add	r3, r3, #1
   1c4a8:	e584300b 	str	r3, [r4, #11]
   1c4ac:	8a00001b 	bhi	1c520 <CARPHandler::Process()+0x268>
   1c4b0:	e2441004 	sub	r1, r4, #4
   1c4b4:	e1a00009 	mov	r0, r9
   1c4b8:	eb001266 	bl	20e58 <CIPAddress::CIPAddress(unsigned char const*)>
   1c4bc:	e28d0008 	add	r0, sp, #8
   1c4c0:	eb003991 	bl	2ab0c <CMACAddress::CMACAddress()>
   1c4c4:	e28d0008 	add	r0, sp, #8
   1c4c8:	eb0039c5 	bl	2abe4 <CMACAddress::SetBroadcast()>
   1c4cc:	e1a02009 	mov	r2, r9
   1c4d0:	e3a01001 	mov	r1, #1
   1c4d4:	e1a00005 	mov	r0, r5
   1c4d8:	e28d3008 	add	r3, sp, #8
   1c4dc:	ebffff2b 	bl	1c190 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1c4e0:	e3a03001 	mov	r3, #1
   1c4e4:	e5cb3014 	strb	r3, [fp, #20]
   1c4e8:	eb003631 	bl	29db4 <CTimer::Get()>
   1c4ec:	e1a0200a 	mov	r2, sl
   1c4f0:	e3a01050 	mov	r1, #80	; 0x50
   1c4f4:	e1a03006 	mov	r3, r6
   1c4f8:	e58d5000 	str	r5, [sp]
   1c4fc:	eb00346a 	bl	296ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1c500:	e1a03000 	mov	r3, r0
   1c504:	e28d0008 	add	r0, sp, #8
   1c508:	e5843007 	str	r3, [r4, #7]
   1c50c:	eb003981 	bl	2ab18 <CMACAddress::~CMACAddress()>
   1c510:	e1a00009 	mov	r0, r9
   1c514:	eb0011ce 	bl	20c54 <CIPAddress::~CIPAddress()>
   1c518:	e5952010 	ldr	r2, [r5, #16]
   1c51c:	eaffffb7 	b	1c400 <CARPHandler::Process()+0x148>
   1c520:	e5940013 	ldr	r0, [r4, #19]
   1c524:	e3500000 	cmp	r0, #0
   1c528:	1a000004 	bne	1c540 <CARPHandler::Process()+0x288>
   1c52c:	ea000032 	b	1c5fc <CARPHandler::Process()+0x344>
   1c530:	e5950008 	ldr	r0, [r5, #8]
   1c534:	e28d1018 	add	r1, sp, #24
   1c538:	ebfffce2 	bl	1b8c8 <CLinkLayer::ResolveFailed(void const*, unsigned int)>
   1c53c:	e5940013 	ldr	r0, [r4, #19]
   1c540:	e3a02000 	mov	r2, #0
   1c544:	e28d1018 	add	r1, sp, #24
   1c548:	eb00137b 	bl	2133c <CNetQueue::Dequeue(void*, void**)>
   1c54c:	e2502000 	subs	r2, r0, #0
   1c550:	1afffff6 	bne	1c530 <CARPHandler::Process()+0x278>
   1c554:	e0488006 	sub	r8, r8, r6
   1c558:	e0858108 	add	r8, r5, r8, lsl #2
   1c55c:	e5c82014 	strb	r2, [r8, #20]
   1c560:	e5952010 	ldr	r2, [r5, #16]
   1c564:	eaffffa5 	b	1c400 <CARPHandler::Process()+0x148>
   1c568:	e3a020aa 	mov	r2, #170	; 0xaa
   1c56c:	e59f1128 	ldr	r1, [pc, #296]	; 1c69c <CARPHandler::Process()+0x3e4>
   1c570:	e59f0128 	ldr	r0, [pc, #296]	; 1c6a0 <CARPHandler::Process()+0x3e8>
   1c574:	eb002042 	bl	24684 <assertion_failed>
   1c578:	e1a00004 	mov	r0, r4
   1c57c:	eb00127d 	bl	20f78 <CIPAddress::IsNull() const>
   1c580:	e3500000 	cmp	r0, #0
   1c584:	1affff6e 	bne	1c344 <CARPHandler::Process()+0x8c>
   1c588:	e1a01006 	mov	r1, r6
   1c58c:	e1a00004 	mov	r0, r4
   1c590:	eb0011f6 	bl	20d70 <CIPAddress::operator!=(unsigned char const*) const>
   1c594:	e2507000 	subs	r7, r0, #0
   1c598:	1affff69 	bne	1c344 <CARPHandler::Process()+0x8c>
   1c59c:	e1a01008 	mov	r1, r8
   1c5a0:	e28d0008 	add	r0, sp, #8
   1c5a4:	eb003989 	bl	2abd0 <CMACAddress::CMACAddress(unsigned char const*)>
   1c5a8:	e28d0010 	add	r0, sp, #16
   1c5ac:	e28d1026 	add	r1, sp, #38	; 0x26
   1c5b0:	eb001228 	bl	20e58 <CIPAddress::CIPAddress(unsigned char const*)>
   1c5b4:	e1dd31be 	ldrh	r3, [sp, #30]
   1c5b8:	e3530c01 	cmp	r3, #256	; 0x100
   1c5bc:	0a00002a 	beq	1c66c <CARPHandler::Process()+0x3b4>
   1c5c0:	e3530c02 	cmp	r3, #512	; 0x200
   1c5c4:	1a000003 	bne	1c5d8 <CARPHandler::Process()+0x320>
   1c5c8:	e1a00005 	mov	r0, r5
   1c5cc:	e28d2008 	add	r2, sp, #8
   1c5d0:	e28d1010 	add	r1, sp, #16
   1c5d4:	ebfffe5a 	bl	1bf44 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>
   1c5d8:	e28d0010 	add	r0, sp, #16
   1c5dc:	eb00119c 	bl	20c54 <CIPAddress::~CIPAddress()>
   1c5e0:	e28d0008 	add	r0, sp, #8
   1c5e4:	eb00394b 	bl	2ab18 <CMACAddress::~CMACAddress()>
   1c5e8:	eaffff55 	b	1c344 <CARPHandler::Process()+0x8c>
   1c5ec:	e3a02057 	mov	r2, #87	; 0x57
   1c5f0:	e59f10a4 	ldr	r1, [pc, #164]	; 1c69c <CARPHandler::Process()+0x3e4>
   1c5f4:	e59f00a8 	ldr	r0, [pc, #168]	; 1c6a4 <CARPHandler::Process()+0x3ec>
   1c5f8:	eb002021 	bl	24684 <assertion_failed>
   1c5fc:	e3a0209f 	mov	r2, #159	; 0x9f
   1c600:	e59f1094 	ldr	r1, [pc, #148]	; 1c69c <CARPHandler::Process()+0x3e4>
   1c604:	e59f0094 	ldr	r0, [pc, #148]	; 1c6a0 <CARPHandler::Process()+0x3e8>
   1c608:	eb00201d 	bl	24684 <assertion_failed>
   1c60c:	e3a02059 	mov	r2, #89	; 0x59
   1c610:	e59f1084 	ldr	r1, [pc, #132]	; 1c69c <CARPHandler::Process()+0x3e4>
   1c614:	e59f008c 	ldr	r0, [pc, #140]	; 1c6a8 <CARPHandler::Process()+0x3f0>
   1c618:	eb002019 	bl	24684 <assertion_failed>
   1c61c:	e3a0205f 	mov	r2, #95	; 0x5f
   1c620:	e59f1074 	ldr	r1, [pc, #116]	; 1c69c <CARPHandler::Process()+0x3e4>
   1c624:	e59f0080 	ldr	r0, [pc, #128]	; 1c6ac <CARPHandler::Process()+0x3f4>
   1c628:	eb002015 	bl	24684 <assertion_failed>
   1c62c:	e3a02088 	mov	r2, #136	; 0x88
   1c630:	e59f1064 	ldr	r1, [pc, #100]	; 1c69c <CARPHandler::Process()+0x3e4>
   1c634:	e59f0074 	ldr	r0, [pc, #116]	; 1c6b0 <CARPHandler::Process()+0x3f8>
   1c638:	eb002011 	bl	24684 <assertion_failed>
   1c63c:	e3a02089 	mov	r2, #137	; 0x89
   1c640:	e59f1054 	ldr	r1, [pc, #84]	; 1c69c <CARPHandler::Process()+0x3e4>
   1c644:	e59f0068 	ldr	r0, [pc, #104]	; 1c6b4 <CARPHandler::Process()+0x3fc>
   1c648:	eb00200d 	bl	24684 <assertion_failed>
   1c64c:	eb003d6a 	bl	2bbfc <LeaveCritical>
   1c650:	eaffff8e 	b	1c490 <CARPHandler::Process()+0x1d8>
   1c654:	eb003d3e 	bl	2bb54 <EnterCritical>
   1c658:	e595c010 	ldr	ip, [r5, #16]
   1c65c:	e5950244 	ldr	r0, [r5, #580]	; 0x244
   1c660:	e35c0000 	cmp	ip, #0
   1c664:	1affff78 	bne	1c44c <CARPHandler::Process()+0x194>
   1c668:	eaffff86 	b	1c488 <CARPHandler::Process()+0x1d0>
   1c66c:	e1a01007 	mov	r1, r7
   1c670:	e1a00005 	mov	r0, r5
   1c674:	e28d2010 	add	r2, sp, #16
   1c678:	e28d3008 	add	r3, sp, #8
   1c67c:	ebfffec3 	bl	1c190 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1c680:	e1a00005 	mov	r0, r5
   1c684:	e28d2008 	add	r2, sp, #8
   1c688:	e28d1010 	add	r1, sp, #16
   1c68c:	ebfffe62 	bl	1c01c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>
   1c690:	eaffffd0 	b	1c5d8 <CARPHandler::Process()+0x320>
   1c694:	0001bda0 	.word	0x0001bda0
   1c698:	0000176f 	.word	0x0000176f
   1c69c:	000435cc 	.word	0x000435cc
   1c6a0:	00043608 	.word	0x00043608
   1c6a4:	000432d0 	.word	0x000432d0
   1c6a8:	000433b4 	.word	0x000433b4
   1c6ac:	000435f8 	.word	0x000435f8
   1c6b0:	0004338c 	.word	0x0004338c
   1c6b4:	00043490 	.word	0x00043490

0001c6b8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>:
   1c6b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6bc:	e1a05000 	mov	r5, r0
   1c6c0:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1c6c4:	e24dd024 	sub	sp, sp, #36	; 0x24
   1c6c8:	e3500000 	cmp	r0, #0
   1c6cc:	e1a09001 	mov	r9, r1
   1c6d0:	e58d2014 	str	r2, [sp, #20]
   1c6d4:	e58d3010 	str	r3, [sp, #16]
   1c6d8:	1a00007f 	bne	1c8dc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x224>
   1c6dc:	e595c010 	ldr	ip, [r5, #16]
   1c6e0:	e35c0000 	cmp	ip, #0
   1c6e4:	e1a0700c 	mov	r7, ip
   1c6e8:	0a0000a7 	beq	1c98c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2d4>
   1c6ec:	e3e08000 	mvn	r8, #0
   1c6f0:	e285a015 	add	sl, r5, #21
   1c6f4:	e3a04000 	mov	r4, #0
   1c6f8:	e3a07014 	mov	r7, #20
   1c6fc:	e1a0600a 	mov	r6, sl
   1c700:	e58d800c 	str	r8, [sp, #12]
   1c704:	ea000007 	b	1c728 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x70>
   1c708:	e3530000 	cmp	r3, #0
   1c70c:	1a00004f 	bne	1c850 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x198>
   1c710:	e3570014 	cmp	r7, #20
   1c714:	01a07004 	moveq	r7, r4
   1c718:	e2844001 	add	r4, r4, #1
   1c71c:	e15c0004 	cmp	ip, r4
   1c720:	e286601c 	add	r6, r6, #28
   1c724:	9a000018 	bls	1c78c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xd4>
   1c728:	e064b184 	rsb	fp, r4, r4, lsl #3
   1c72c:	e085a10b 	add	sl, r5, fp, lsl #2
   1c730:	e5da3014 	ldrb	r3, [sl, #20]
   1c734:	e1a0b10b 	lsl	fp, fp, #2
   1c738:	e3530003 	cmp	r3, #3
   1c73c:	e6ef3073 	uxtb	r3, r3
   1c740:	9afffff0 	bls	1c708 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x50>
   1c744:	e3530004 	cmp	r3, #4
   1c748:	1a00009d 	bne	1c9c4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x30c>
   1c74c:	e5963013 	ldr	r3, [r6, #19]
   1c750:	e1a01006 	mov	r1, r6
   1c754:	e1530008 	cmp	r3, r8
   1c758:	31a08003 	movcc	r8, r3
   1c75c:	e59d300c 	ldr	r3, [sp, #12]
   1c760:	31a03004 	movcc	r3, r4
   1c764:	e1a00009 	mov	r0, r9
   1c768:	e58d300c 	str	r3, [sp, #12]
   1c76c:	eb001168 	bl	20d14 <CIPAddress::operator==(unsigned char const*) const>
   1c770:	e3500000 	cmp	r0, #0
   1c774:	1a00006c 	bne	1c92c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x274>
   1c778:	e595c010 	ldr	ip, [r5, #16]
   1c77c:	e2844001 	add	r4, r4, #1
   1c780:	e15c0004 	cmp	ip, r4
   1c784:	e286601c 	add	r6, r6, #28
   1c788:	8affffe6 	bhi	1c728 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x70>
   1c78c:	e3570014 	cmp	r7, #20
   1c790:	0a000043 	beq	1c8a4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x1ec>
   1c794:	e0676187 	rsb	r6, r7, r7, lsl #3
   1c798:	e1a06106 	lsl	r6, r6, #2
   1c79c:	e2866015 	add	r6, r6, #21
   1c7a0:	e1a04187 	lsl	r4, r7, #3
   1c7a4:	e3a08001 	mov	r8, #1
   1c7a8:	e0444007 	sub	r4, r4, r7
   1c7ac:	e0854104 	add	r4, r5, r4, lsl #2
   1c7b0:	e1a00009 	mov	r0, r9
   1c7b4:	e0851006 	add	r1, r5, r6
   1c7b8:	e5c48014 	strb	r8, [r4, #20]
   1c7bc:	eb0011d6 	bl	20f1c <CIPAddress::CopyTo(unsigned char*) const>
   1c7c0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c7c4:	e3500000 	cmp	r0, #0
   1c7c8:	0a00006b 	beq	1c97c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2c4>
   1c7cc:	e3a03000 	mov	r3, #0
   1c7d0:	e59d1010 	ldr	r1, [sp, #16]
   1c7d4:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1c7d8:	eb001291 	bl	21224 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c7dc:	eb003574 	bl	29db4 <CTimer::Get()>
   1c7e0:	eb0032c1 	bl	292ec <CTimer::GetTicks() const>
   1c7e4:	e5848024 	str	r8, [r4, #36]	; 0x24
   1c7e8:	e5840028 	str	r0, [r4, #40]	; 0x28
   1c7ec:	eb003570 	bl	29db4 <CTimer::Get()>
   1c7f0:	e1a03007 	mov	r3, r7
   1c7f4:	e3a01050 	mov	r1, #80	; 0x50
   1c7f8:	e59f21d4 	ldr	r2, [pc, #468]	; 1c9d4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x31c>
   1c7fc:	e58d5000 	str	r5, [sp]
   1c800:	eb0033a9 	bl	296ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1c804:	e5840020 	str	r0, [r4, #32]
   1c808:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   1c80c:	e3530000 	cmp	r3, #0
   1c810:	1a000057 	bne	1c974 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2bc>
   1c814:	e28d0018 	add	r0, sp, #24
   1c818:	eb0038bb 	bl	2ab0c <CMACAddress::CMACAddress()>
   1c81c:	e28d0018 	add	r0, sp, #24
   1c820:	eb0038ef 	bl	2abe4 <CMACAddress::SetBroadcast()>
   1c824:	e1a02009 	mov	r2, r9
   1c828:	e1a00005 	mov	r0, r5
   1c82c:	e3a01001 	mov	r1, #1
   1c830:	e28d3018 	add	r3, sp, #24
   1c834:	ebfffe55 	bl	1c190 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1c838:	e28d0018 	add	r0, sp, #24
   1c83c:	eb0038b5 	bl	2ab18 <CMACAddress::~CMACAddress()>
   1c840:	e3a02000 	mov	r2, #0
   1c844:	e1a00002 	mov	r0, r2
   1c848:	e28dd024 	add	sp, sp, #36	; 0x24
   1c84c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c850:	e1a01006 	mov	r1, r6
   1c854:	e1a00009 	mov	r0, r9
   1c858:	eb00112d 	bl	20d14 <CIPAddress::operator==(unsigned char const*) const>
   1c85c:	e3500000 	cmp	r0, #0
   1c860:	0affffc4 	beq	1c778 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xc0>
   1c864:	e59a002c 	ldr	r0, [sl, #44]	; 0x2c
   1c868:	e3500000 	cmp	r0, #0
   1c86c:	0a00004c 	beq	1c9a4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2ec>
   1c870:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1c874:	e3a03000 	mov	r3, #0
   1c878:	e59d1010 	ldr	r1, [sp, #16]
   1c87c:	eb001268 	bl	21224 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c880:	eb00354b 	bl	29db4 <CTimer::Get()>
   1c884:	eb003298 	bl	292ec <CTimer::GetTicks() const>
   1c888:	e58a0028 	str	r0, [sl, #40]	; 0x28
   1c88c:	e5952244 	ldr	r2, [r5, #580]	; 0x244
   1c890:	e3520000 	cmp	r2, #0
   1c894:	0affffea 	beq	1c844 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x18c>
   1c898:	eb003cd7 	bl	2bbfc <LeaveCritical>
   1c89c:	e3a02000 	mov	r2, #0
   1c8a0:	eaffffe7 	b	1c844 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x18c>
   1c8a4:	e35c0014 	cmp	ip, #20
   1c8a8:	1a00000d 	bne	1c8e4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x22c>
   1c8ac:	e59d300c 	ldr	r3, [sp, #12]
   1c8b0:	e3530013 	cmp	r3, #19
   1c8b4:	8a00003e 	bhi	1c9b4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2fc>
   1c8b8:	e3a02000 	mov	r2, #0
   1c8bc:	e59d700c 	ldr	r7, [sp, #12]
   1c8c0:	e0673187 	rsb	r3, r7, r7, lsl #3
   1c8c4:	e1a06103 	lsl	r6, r3, #2
   1c8c8:	e0853103 	add	r3, r5, r3, lsl #2
   1c8cc:	e2866015 	add	r6, r6, #21
   1c8d0:	e5c32014 	strb	r2, [r3, #20]
   1c8d4:	e1a04187 	lsl	r4, r7, #3
   1c8d8:	eaffffb1 	b	1c7a4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xec>
   1c8dc:	eb003c9c 	bl	2bb54 <EnterCritical>
   1c8e0:	eaffff7d 	b	1c6dc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x24>
   1c8e4:	e1a0700c 	mov	r7, ip
   1c8e8:	e06c618c 	rsb	r6, ip, ip, lsl #3
   1c8ec:	e1a06106 	lsl	r6, r6, #2
   1c8f0:	e2866015 	add	r6, r6, #21
   1c8f4:	e3a03000 	mov	r3, #0
   1c8f8:	e06c818c 	rsb	r8, ip, ip, lsl #3
   1c8fc:	e0858108 	add	r8, r5, r8, lsl #2
   1c900:	e5c83014 	strb	r3, [r8, #20]
   1c904:	e3a0000c 	mov	r0, #12
   1c908:	e1a0418c 	lsl	r4, ip, #3
   1c90c:	eb003963 	bl	2aea0 <operator new(unsigned int)>
   1c910:	e1a0a000 	mov	sl, r0
   1c914:	eb001205 	bl	21130 <CNetQueue::CNetQueue()>
   1c918:	e5953010 	ldr	r3, [r5, #16]
   1c91c:	e588a02c 	str	sl, [r8, #44]	; 0x2c
   1c920:	e2833001 	add	r3, r3, #1
   1c924:	e5853010 	str	r3, [r5, #16]
   1c928:	eaffff9d 	b	1c7a4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xec>
   1c92c:	e59d3014 	ldr	r3, [sp, #20]
   1c930:	e3530000 	cmp	r3, #0
   1c934:	0a000016 	beq	1c994 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2dc>
   1c938:	e28b3019 	add	r3, fp, #25
   1c93c:	e0851003 	add	r1, r5, r3
   1c940:	e58d000c 	str	r0, [sp, #12]
   1c944:	e59d0014 	ldr	r0, [sp, #20]
   1c948:	eb003890 	bl	2ab90 <CMACAddress::Set(unsigned char const*)>
   1c94c:	eb003518 	bl	29db4 <CTimer::Get()>
   1c950:	eb003265 	bl	292ec <CTimer::GetTicks() const>
   1c954:	e58a0028 	str	r0, [sl, #40]	; 0x28
   1c958:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   1c95c:	e59d200c 	ldr	r2, [sp, #12]
   1c960:	e3530000 	cmp	r3, #0
   1c964:	0affffb6 	beq	1c844 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x18c>
   1c968:	eb003ca3 	bl	2bbfc <LeaveCritical>
   1c96c:	e59d200c 	ldr	r2, [sp, #12]
   1c970:	eaffffb3 	b	1c844 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x18c>
   1c974:	eb003ca0 	bl	2bbfc <LeaveCritical>
   1c978:	eaffffa5 	b	1c814 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x15c>
   1c97c:	e59f2054 	ldr	r2, [pc, #84]	; 1c9d8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x320>
   1c980:	e59f1054 	ldr	r1, [pc, #84]	; 1c9dc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   1c984:	e59f0054 	ldr	r0, [pc, #84]	; 1c9e0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x328>
   1c988:	eb001f3d 	bl	24684 <assertion_failed>
   1c98c:	e3a06015 	mov	r6, #21
   1c990:	eaffffd7 	b	1c8f4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x23c>
   1c994:	e3a020ff 	mov	r2, #255	; 0xff
   1c998:	e59f103c 	ldr	r1, [pc, #60]	; 1c9dc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   1c99c:	e59f0040 	ldr	r0, [pc, #64]	; 1c9e4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x32c>
   1c9a0:	eb001f37 	bl	24684 <assertion_failed>
   1c9a4:	e3a020eb 	mov	r2, #235	; 0xeb
   1c9a8:	e59f102c 	ldr	r1, [pc, #44]	; 1c9dc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   1c9ac:	e59f0034 	ldr	r0, [pc, #52]	; 1c9e8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x330>
   1c9b0:	eb001f33 	bl	24684 <assertion_failed>
   1c9b4:	e59f2030 	ldr	r2, [pc, #48]	; 1c9ec <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x334>
   1c9b8:	e59f101c 	ldr	r1, [pc, #28]	; 1c9dc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   1c9bc:	e59f002c 	ldr	r0, [pc, #44]	; 1c9f0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1c9c0:	eb001f2f 	bl	24684 <assertion_failed>
   1c9c4:	e59f2028 	ldr	r2, [pc, #40]	; 1c9f4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x33c>
   1c9c8:	e59f100c 	ldr	r1, [pc, #12]	; 1c9dc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   1c9cc:	e59f0024 	ldr	r0, [pc, #36]	; 1c9f8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x340>
   1c9d0:	eb001f2b 	bl	24684 <assertion_failed>
   1c9d4:	0001bda0 	.word	0x0001bda0
   1c9d8:	00000129 	.word	0x00000129
   1c9dc:	000435cc 	.word	0x000435cc
   1c9e0:	00043608 	.word	0x00043608
   1c9e4:	00043640 	.word	0x00043640
   1c9e8:	00043620 	.word	0x00043620
   1c9ec:	0000011d 	.word	0x0000011d
   1c9f0:	00043654 	.word	0x00043654
   1c9f4:	0000010a 	.word	0x0000010a
   1c9f8:	0003f63c 	.word	0x0003f63c

0001c9fc <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>:
   1c9fc:	e92d4010 	push	{r4, lr}
   1ca00:	e59de008 	ldr	lr, [sp, #8]
   1ca04:	e3510000 	cmp	r1, #0
   1ca08:	e880400e 	stm	r0, {r1, r2, r3, lr}
   1ca0c:	0a000009 	beq	1ca38 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x3c>
   1ca10:	e3520000 	cmp	r2, #0
   1ca14:	0a00000b 	beq	1ca48 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x4c>
   1ca18:	e3530000 	cmp	r3, #0
   1ca1c:	0a00000d 	beq	1ca58 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x5c>
   1ca20:	e35e0000 	cmp	lr, #0
   1ca24:	18bd8010 	popne	{r4, pc}
   1ca28:	e3a0203e 	mov	r2, #62	; 0x3e
   1ca2c:	e59f1034 	ldr	r1, [pc, #52]	; 1ca68 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1ca30:	e59f0034 	ldr	r0, [pc, #52]	; 1ca6c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x70>
   1ca34:	eb001f12 	bl	24684 <assertion_failed>
   1ca38:	e3a0203b 	mov	r2, #59	; 0x3b
   1ca3c:	e59f1024 	ldr	r1, [pc, #36]	; 1ca68 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1ca40:	e59f0028 	ldr	r0, [pc, #40]	; 1ca70 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x74>
   1ca44:	eb001f0e 	bl	24684 <assertion_failed>
   1ca48:	e3a0203c 	mov	r2, #60	; 0x3c
   1ca4c:	e59f1014 	ldr	r1, [pc, #20]	; 1ca68 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1ca50:	e59f001c 	ldr	r0, [pc, #28]	; 1ca74 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x78>
   1ca54:	eb001f0a 	bl	24684 <assertion_failed>
   1ca58:	e3a0203d 	mov	r2, #61	; 0x3d
   1ca5c:	e59f1004 	ldr	r1, [pc, #4]	; 1ca68 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1ca60:	e59f0010 	ldr	r0, [pc, #16]	; 1ca78 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x7c>
   1ca64:	eb001f06 	bl	24684 <assertion_failed>
   1ca68:	00043670 	.word	0x00043670
   1ca6c:	00043680 	.word	0x00043680
   1ca70:	000432d0 	.word	0x000432d0
   1ca74:	000432e4 	.word	0x000432e4
   1ca78:	000435f8 	.word	0x000435f8

0001ca7c <CICMPHandler::~CICMPHandler()>:
   1ca7c:	e12fff1e 	bx	lr

0001ca80 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>:
   1ca80:	e92d4070 	push	{r4, r5, r6, lr}
   1ca84:	e3510002 	cmp	r1, #2
   1ca88:	e24dd010 	sub	sp, sp, #16
   1ca8c:	8a000024 	bhi	1cb24 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xa4>
   1ca90:	e3520000 	cmp	r2, #0
   1ca94:	e1a05002 	mov	r5, r2
   1ca98:	e5cd1000 	strb	r1, [sp]
   1ca9c:	0a000024 	beq	1cb34 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xb4>
   1caa0:	e1a04003 	mov	r4, r3
   1caa4:	e5d23009 	ldrb	r3, [r2, #9]
   1caa8:	e2851010 	add	r1, r5, #16
   1caac:	e3a02004 	mov	r2, #4
   1cab0:	e1a06000 	mov	r6, r0
   1cab4:	e28d0002 	add	r0, sp, #2
   1cab8:	e5cd3001 	strb	r3, [sp, #1]
   1cabc:	eb003711 	bl	2a708 <memcpy>
   1cac0:	e3a02004 	mov	r2, #4
   1cac4:	e285100c 	add	r1, r5, #12
   1cac8:	e28d0006 	add	r0, sp, #6
   1cacc:	eb00370d 	bl	2a708 <memcpy>
   1cad0:	e3540000 	cmp	r4, #0
   1cad4:	0a00001a 	beq	1cb44 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xc4>
   1cad8:	e5d42002 	ldrb	r2, [r4, #2]
   1cadc:	e5d4c003 	ldrb	ip, [r4, #3]
   1cae0:	e5d43000 	ldrb	r3, [r4]
   1cae4:	e5d41001 	ldrb	r1, [r4, #1]
   1cae8:	e596000c 	ldr	r0, [r6, #12]
   1caec:	e182240c 	orr	r2, r2, ip, lsl #8
   1caf0:	e1833401 	orr	r3, r3, r1, lsl #8
   1caf4:	e6bf2fb2 	rev16	r2, r2
   1caf8:	e6bf3fb3 	rev16	r3, r3
   1cafc:	e3500000 	cmp	r0, #0
   1cb00:	e1cd20ba 	strh	r2, [sp, #10]
   1cb04:	e1cd30bc 	strh	r3, [sp, #12]
   1cb08:	0a000011 	beq	1cb54 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xd4>
   1cb0c:	e1a0100d 	mov	r1, sp
   1cb10:	e3a03000 	mov	r3, #0
   1cb14:	e3a0200e 	mov	r2, #14
   1cb18:	eb0011c1 	bl	21224 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1cb1c:	e28dd010 	add	sp, sp, #16
   1cb20:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cb24:	e3a020ee 	mov	r2, #238	; 0xee
   1cb28:	e59f1034 	ldr	r1, [pc, #52]	; 1cb64 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cb2c:	e59f0034 	ldr	r0, [pc, #52]	; 1cb68 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe8>
   1cb30:	eb001ed3 	bl	24684 <assertion_failed>
   1cb34:	e3a020f3 	mov	r2, #243	; 0xf3
   1cb38:	e59f1024 	ldr	r1, [pc, #36]	; 1cb64 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cb3c:	e59f0028 	ldr	r0, [pc, #40]	; 1cb6c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xec>
   1cb40:	eb001ecf 	bl	24684 <assertion_failed>
   1cb44:	e3a020f8 	mov	r2, #248	; 0xf8
   1cb48:	e59f1014 	ldr	r1, [pc, #20]	; 1cb64 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cb4c:	e59f001c 	ldr	r0, [pc, #28]	; 1cb70 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xf0>
   1cb50:	eb001ecb 	bl	24684 <assertion_failed>
   1cb54:	e3a020fc 	mov	r2, #252	; 0xfc
   1cb58:	e59f1004 	ldr	r1, [pc, #4]	; 1cb64 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cb5c:	e59f0010 	ldr	r0, [pc, #16]	; 1cb74 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xf4>
   1cb60:	eb001ec7 	bl	24684 <assertion_failed>
   1cb64:	00043670 	.word	0x00043670
   1cb68:	0004369c 	.word	0x0004369c
   1cb6c:	000436bc 	.word	0x000436bc
   1cb70:	000436cc 	.word	0x000436cc
   1cb74:	00043680 	.word	0x00043680

0001cb78 <CICMPHandler::Process()>:
   1cb78:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb7c:	e1a05000 	mov	r5, r0
   1cb80:	e5900008 	ldr	r0, [r0, #8]
   1cb84:	e24dde67 	sub	sp, sp, #1648	; 0x670
   1cb88:	e3500000 	cmp	r0, #0
   1cb8c:	e24dd004 	sub	sp, sp, #4
   1cb90:	0a00007c 	beq	1cd88 <CICMPHandler::Process()+0x210>
   1cb94:	e59fb388 	ldr	fp, [pc, #904]	; 1cf24 <CICMPHandler::Process()+0x3ac>
   1cb98:	e59f7388 	ldr	r7, [pc, #904]	; 1cf28 <CICMPHandler::Process()+0x3b0>
   1cb9c:	e59fa388 	ldr	sl, [pc, #904]	; 1cf2c <CICMPHandler::Process()+0x3b4>
   1cba0:	e59f9388 	ldr	r9, [pc, #904]	; 1cf30 <CICMPHandler::Process()+0x3b8>
   1cba4:	e28d6018 	add	r6, sp, #24
   1cba8:	e28d2014 	add	r2, sp, #20
   1cbac:	e28d1030 	add	r1, sp, #48	; 0x30
   1cbb0:	eb0011e1 	bl	2133c <CNetQueue::Dequeue(void*, void**)>
   1cbb4:	e2504000 	subs	r4, r0, #0
   1cbb8:	0a000076 	beq	1cd98 <CICMPHandler::Process()+0x220>
   1cbbc:	e59d8014 	ldr	r8, [sp, #20]
   1cbc0:	e3580000 	cmp	r8, #0
   1cbc4:	0a000050 	beq	1cd0c <CICMPHandler::Process()+0x194>
   1cbc8:	e5d82000 	ldrb	r2, [r8]
   1cbcc:	e3520001 	cmp	r2, #1
   1cbd0:	1a000051 	bne	1cd1c <CICMPHandler::Process()+0x1a4>
   1cbd4:	e2881001 	add	r1, r8, #1
   1cbd8:	e1a00006 	mov	r0, r6
   1cbdc:	eb00109d 	bl	20e58 <CIPAddress::CIPAddress(unsigned char const*)>
   1cbe0:	e2881005 	add	r1, r8, #5
   1cbe4:	e28d0020 	add	r0, sp, #32
   1cbe8:	eb00109a 	bl	20e58 <CIPAddress::CIPAddress(unsigned char const*)>
   1cbec:	e1a00008 	mov	r0, r8
   1cbf0:	e3a01009 	mov	r1, #9
   1cbf4:	eb0038b7 	bl	2aed8 <operator delete(void*, unsigned int)>
   1cbf8:	e5953000 	ldr	r3, [r5]
   1cbfc:	e3530000 	cmp	r3, #0
   1cc00:	0a000049 	beq	1cd2c <CICMPHandler::Process()+0x1b4>
   1cc04:	e28d0020 	add	r0, sp, #32
   1cc08:	eb0010e8 	bl	20fb0 <CIPAddress::IsBroadcast() const>
   1cc0c:	e3500000 	cmp	r0, #0
   1cc10:	1a000008 	bne	1cc38 <CICMPHandler::Process()+0xc0>
   1cc14:	e5950000 	ldr	r0, [r5]
   1cc18:	eb000fa6 	bl	20ab8 <CNetConfig::GetBroadcastAddress() const>
   1cc1c:	e1a01000 	mov	r1, r0
   1cc20:	e28d0020 	add	r0, sp, #32
   1cc24:	eb00100b 	bl	20c58 <CIPAddress::operator==(CIPAddress const&) const>
   1cc28:	e3540007 	cmp	r4, #7
   1cc2c:	93800001 	orrls	r0, r0, #1
   1cc30:	e31000ff 	tst	r0, #255	; 0xff
   1cc34:	0a000005 	beq	1cc50 <CICMPHandler::Process()+0xd8>
   1cc38:	e28d0020 	add	r0, sp, #32
   1cc3c:	eb001004 	bl	20c54 <CIPAddress::~CIPAddress()>
   1cc40:	e1a00006 	mov	r0, r6
   1cc44:	eb001002 	bl	20c54 <CIPAddress::~CIPAddress()>
   1cc48:	e5950008 	ldr	r0, [r5, #8]
   1cc4c:	eaffffd5 	b	1cba8 <CICMPHandler::Process()+0x30>
   1cc50:	e1a01004 	mov	r1, r4
   1cc54:	e28d0030 	add	r0, sp, #48	; 0x30
   1cc58:	eb00127a 	bl	21648 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1cc5c:	e3500000 	cmp	r0, #0
   1cc60:	1afffff4 	bne	1cc38 <CICMPHandler::Process()+0xc0>
   1cc64:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   1cc68:	e3530008 	cmp	r3, #8
   1cc6c:	0a000032 	beq	1cd3c <CICMPHandler::Process()+0x1c4>
   1cc70:	e354001c 	cmp	r4, #28
   1cc74:	9affffef 	bls	1cc38 <CICMPHandler::Process()+0xc0>
   1cc78:	e5dd3038 	ldrb	r3, [sp, #56]	; 0x38
   1cc7c:	e203200f 	and	r2, r3, #15
   1cc80:	e2421005 	sub	r1, r2, #5
   1cc84:	e3510001 	cmp	r1, #1
   1cc88:	8affffea 	bhi	1cc38 <CICMPHandler::Process()+0xc0>
   1cc8c:	e1a03243 	asr	r3, r3, #4
   1cc90:	e3530004 	cmp	r3, #4
   1cc94:	1affffe7 	bne	1cc38 <CICMPHandler::Process()+0xc0>
   1cc98:	e5950000 	ldr	r0, [r5]
   1cc9c:	e58d200c 	str	r2, [sp, #12]
   1cca0:	eb000f7a 	bl	20a90 <CNetConfig::GetIPAddress() const>
   1cca4:	e28d1044 	add	r1, sp, #68	; 0x44
   1cca8:	eb001030 	bl	20d70 <CIPAddress::operator!=(unsigned char const*) const>
   1ccac:	e3500000 	cmp	r0, #0
   1ccb0:	1affffe0 	bne	1cc38 <CICMPHandler::Process()+0xc0>
   1ccb4:	e59d200c 	ldr	r2, [sp, #12]
   1ccb8:	e1a02102 	lsl	r2, r2, #2
   1ccbc:	e2823010 	add	r3, r2, #16
   1ccc0:	e1530004 	cmp	r3, r4
   1ccc4:	8affffdb 	bhi	1cc38 <CICMPHandler::Process()+0xc0>
   1ccc8:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   1cccc:	e28d4038 	add	r4, sp, #56	; 0x38
   1ccd0:	e2433003 	sub	r3, r3, #3
   1ccd4:	e0844002 	add	r4, r4, r2
   1ccd8:	e3530009 	cmp	r3, #9
   1ccdc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1cce0:	eaffffd4 	b	1cc38 <CICMPHandler::Process()+0xc0>
   1cce4:	0001ce84 	.word	0x0001ce84
   1cce8:	0001cc38 	.word	0x0001cc38
   1ccec:	0001ce0c 	.word	0x0001ce0c
   1ccf0:	0001cc38 	.word	0x0001cc38
   1ccf4:	0001cc38 	.word	0x0001cc38
   1ccf8:	0001cc38 	.word	0x0001cc38
   1ccfc:	0001cc38 	.word	0x0001cc38
   1cd00:	0001cc38 	.word	0x0001cc38
   1cd04:	0001cdd8 	.word	0x0001cdd8
   1cd08:	0001cda4 	.word	0x0001cda4
   1cd0c:	e3a02052 	mov	r2, #82	; 0x52
   1cd10:	e59f121c 	ldr	r1, [pc, #540]	; 1cf34 <CICMPHandler::Process()+0x3bc>
   1cd14:	e59f021c 	ldr	r0, [pc, #540]	; 1cf38 <CICMPHandler::Process()+0x3c0>
   1cd18:	eb001e59 	bl	24684 <assertion_failed>
   1cd1c:	e3a02053 	mov	r2, #83	; 0x53
   1cd20:	e59f120c 	ldr	r1, [pc, #524]	; 1cf34 <CICMPHandler::Process()+0x3bc>
   1cd24:	e59f0210 	ldr	r0, [pc, #528]	; 1cf3c <CICMPHandler::Process()+0x3c4>
   1cd28:	eb001e55 	bl	24684 <assertion_failed>
   1cd2c:	e3a0205b 	mov	r2, #91	; 0x5b
   1cd30:	e59f11fc 	ldr	r1, [pc, #508]	; 1cf34 <CICMPHandler::Process()+0x3bc>
   1cd34:	e59f0204 	ldr	r0, [pc, #516]	; 1cf40 <CICMPHandler::Process()+0x3c8>
   1cd38:	eb001e51 	bl	24684 <assertion_failed>
   1cd3c:	e5dd3031 	ldrb	r3, [sp, #49]	; 0x31
   1cd40:	e3530000 	cmp	r3, #0
   1cd44:	1affffbb 	bne	1cc38 <CICMPHandler::Process()+0xc0>
   1cd48:	e1a01004 	mov	r1, r4
   1cd4c:	e28d0030 	add	r0, sp, #48	; 0x30
   1cd50:	e58d3030 	str	r3, [sp, #48]	; 0x30
   1cd54:	eb00123b 	bl	21648 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1cd58:	e5952004 	ldr	r2, [r5, #4]
   1cd5c:	e1cd03b2 	strh	r0, [sp, #50]	; 0x32
   1cd60:	e3520000 	cmp	r2, #0
   1cd64:	0a000053 	beq	1ceb8 <CICMPHandler::Process()+0x340>
   1cd68:	e3a01001 	mov	r1, #1
   1cd6c:	e1a03004 	mov	r3, r4
   1cd70:	e58d1000 	str	r1, [sp]
   1cd74:	e1a00002 	mov	r0, r2
   1cd78:	e1a01006 	mov	r1, r6
   1cd7c:	e28d2030 	add	r2, sp, #48	; 0x30
   1cd80:	ebfff7b3 	bl	1ac54 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1cd84:	eaffffab 	b	1cc38 <CICMPHandler::Process()+0xc0>
   1cd88:	e3a0204e 	mov	r2, #78	; 0x4e
   1cd8c:	e59f11a0 	ldr	r1, [pc, #416]	; 1cf34 <CICMPHandler::Process()+0x3bc>
   1cd90:	e59f01ac 	ldr	r0, [pc, #428]	; 1cf44 <CICMPHandler::Process()+0x3cc>
   1cd94:	eb001e3a 	bl	24684 <assertion_failed>
   1cd98:	e28dde67 	add	sp, sp, #1648	; 0x670
   1cd9c:	e28dd004 	add	sp, sp, #4
   1cda0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cda4:	eb00271e 	bl	26a24 <CLogger::Get()>
   1cda8:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1cdac:	e1a0300b 	mov	r3, fp
   1cdb0:	e1a01007 	mov	r1, r7
   1cdb4:	e58d2000 	str	r2, [sp]
   1cdb8:	e3a02002 	mov	r2, #2
   1cdbc:	eb00265a 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cdc0:	e1a03004 	mov	r3, r4
   1cdc4:	e3a01002 	mov	r1, #2
   1cdc8:	e1a00005 	mov	r0, r5
   1cdcc:	e28d2038 	add	r2, sp, #56	; 0x38
   1cdd0:	ebffff2a 	bl	1ca80 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1cdd4:	eaffff97 	b	1cc38 <CICMPHandler::Process()+0xc0>
   1cdd8:	eb002711 	bl	26a24 <CLogger::Get()>
   1cddc:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1cde0:	e1a0300a 	mov	r3, sl
   1cde4:	e1a01007 	mov	r1, r7
   1cde8:	e58d2000 	str	r2, [sp]
   1cdec:	e3a02002 	mov	r2, #2
   1cdf0:	eb00264d 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cdf4:	e1a03004 	mov	r3, r4
   1cdf8:	e3a01001 	mov	r1, #1
   1cdfc:	e1a00005 	mov	r0, r5
   1ce00:	e28d2038 	add	r2, sp, #56	; 0x38
   1ce04:	ebffff1d 	bl	1ca80 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1ce08:	eaffff8a 	b	1cc38 <CICMPHandler::Process()+0xc0>
   1ce0c:	e28d0028 	add	r0, sp, #40	; 0x28
   1ce10:	e28d1034 	add	r1, sp, #52	; 0x34
   1ce14:	eb00100f 	bl	20e58 <CIPAddress::CIPAddress(unsigned char const*)>
   1ce18:	e5953004 	ldr	r3, [r5, #4]
   1ce1c:	e3530000 	cmp	r3, #0
   1ce20:	0a000028 	beq	1cec8 <CICMPHandler::Process()+0x350>
   1ce24:	e5950000 	ldr	r0, [r5]
   1ce28:	eb000f18 	bl	20a90 <CNetConfig::GetIPAddress() const>
   1ce2c:	e1a01000 	mov	r1, r0
   1ce30:	e5950000 	ldr	r0, [r5]
   1ce34:	e58d100c 	str	r1, [sp, #12]
   1ce38:	eb000f18 	bl	20aa0 <CNetConfig::GetNetMask() const>
   1ce3c:	e59d100c 	ldr	r1, [sp, #12]
   1ce40:	e1a02000 	mov	r2, r0
   1ce44:	e28d0028 	add	r0, sp, #40	; 0x28
   1ce48:	eb00108b 	bl	2107c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   1ce4c:	e3500000 	cmp	r0, #0
   1ce50:	0a000008 	beq	1ce78 <CICMPHandler::Process()+0x300>
   1ce54:	e28d4048 	add	r4, sp, #72	; 0x48
   1ce58:	e1a01004 	mov	r1, r4
   1ce5c:	e5950004 	ldr	r0, [r5, #4]
   1ce60:	ebfff8c1 	bl	1b16c <CNetworkLayer::GetGateway(unsigned char const*) const>
   1ce64:	e1a01000 	mov	r1, r0
   1ce68:	e1a00006 	mov	r0, r6
   1ce6c:	eb000fbf 	bl	20d70 <CIPAddress::operator!=(unsigned char const*) const>
   1ce70:	e3500000 	cmp	r0, #0
   1ce74:	0a000017 	beq	1ced8 <CICMPHandler::Process()+0x360>
   1ce78:	e28d0028 	add	r0, sp, #40	; 0x28
   1ce7c:	eb000f74 	bl	20c54 <CIPAddress::~CIPAddress()>
   1ce80:	eaffff6c 	b	1cc38 <CICMPHandler::Process()+0xc0>
   1ce84:	eb0026e6 	bl	26a24 <CLogger::Get()>
   1ce88:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1ce8c:	e1a01007 	mov	r1, r7
   1ce90:	e58d2000 	str	r2, [sp]
   1ce94:	e59f30ac 	ldr	r3, [pc, #172]	; 1cf48 <CICMPHandler::Process()+0x3d0>
   1ce98:	e3a02004 	mov	r2, #4
   1ce9c:	eb002622 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cea0:	e1a03004 	mov	r3, r4
   1cea4:	e3a01000 	mov	r1, #0
   1cea8:	e1a00005 	mov	r0, r5
   1ceac:	e28d2038 	add	r2, sp, #56	; 0x38
   1ceb0:	ebfffef2 	bl	1ca80 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1ceb4:	eaffff5f 	b	1cc38 <CICMPHandler::Process()+0xc0>
   1ceb8:	e3a02078 	mov	r2, #120	; 0x78
   1cebc:	e59f1070 	ldr	r1, [pc, #112]	; 1cf34 <CICMPHandler::Process()+0x3bc>
   1cec0:	e59f0084 	ldr	r0, [pc, #132]	; 1cf4c <CICMPHandler::Process()+0x3d4>
   1cec4:	eb001dee 	bl	24684 <assertion_failed>
   1cec8:	e3a020a7 	mov	r2, #167	; 0xa7
   1cecc:	e59f1060 	ldr	r1, [pc, #96]	; 1cf34 <CICMPHandler::Process()+0x3bc>
   1ced0:	e59f0074 	ldr	r0, [pc, #116]	; 1cf4c <CICMPHandler::Process()+0x3d4>
   1ced4:	eb001dea 	bl	24684 <assertion_failed>
   1ced8:	eb0026d1 	bl	26a24 <CLogger::Get()>
   1cedc:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1cee0:	e1a01007 	mov	r1, r7
   1cee4:	e1a03009 	mov	r3, r9
   1cee8:	e58d2000 	str	r2, [sp]
   1ceec:	e3a02004 	mov	r2, #4
   1cef0:	eb00260d 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cef4:	e5953004 	ldr	r3, [r5, #4]
   1cef8:	e28d0028 	add	r0, sp, #40	; 0x28
   1cefc:	e58d300c 	str	r3, [sp, #12]
   1cf00:	eb000ff9 	bl	20eec <CIPAddress::Get() const>
   1cf04:	e59d300c 	ldr	r3, [sp, #12]
   1cf08:	e1a02000 	mov	r2, r0
   1cf0c:	e1a01004 	mov	r1, r4
   1cf10:	e1a00003 	mov	r0, r3
   1cf14:	ebfff892 	bl	1b164 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>
   1cf18:	e28d0028 	add	r0, sp, #40	; 0x28
   1cf1c:	eb000f4c 	bl	20c54 <CIPAddress::~CIPAddress()>
   1cf20:	eaffff44 	b	1cc38 <CICMPHandler::Process()+0xc0>
   1cf24:	0004374c 	.word	0x0004374c
   1cf28:	000438d8 	.word	0x000438d8
   1cf2c:	00043738 	.word	0x00043738
   1cf30:	00043728 	.word	0x00043728
   1cf34:	00043670 	.word	0x00043670
   1cf38:	0004334c 	.word	0x0004334c
   1cf3c:	000436e4 	.word	0x000436e4
   1cf40:	000432d0 	.word	0x000432d0
   1cf44:	000435f8 	.word	0x000435f8
   1cf48:	00043708 	.word	0x00043708
   1cf4c:	000432e4 	.word	0x000432e4

0001cf50 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>:
   1cf50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1cf54:	e2524000 	subs	r4, r2, #0
   1cf58:	e24dd020 	sub	sp, sp, #32
   1cf5c:	0a00003f 	beq	1d060 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x110>
   1cf60:	e3530014 	cmp	r3, #20
   1cf64:	e1a06003 	mov	r6, r3
   1cf68:	9a000040 	bls	1d070 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x120>
   1cf6c:	e5d43000 	ldrb	r3, [r4]
   1cf70:	e1a08001 	mov	r8, r1
   1cf74:	e203200f 	and	r2, r3, #15
   1cf78:	e2421005 	sub	r1, r2, #5
   1cf7c:	e3510001 	cmp	r1, #1
   1cf80:	8a00003e 	bhi	1d080 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x130>
   1cf84:	e1a03243 	asr	r3, r3, #4
   1cf88:	e3530004 	cmp	r3, #4
   1cf8c:	e1a05102 	lsl	r5, r2, #2
   1cf90:	1a00003e 	bne	1d090 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x140>
   1cf94:	e1a07000 	mov	r7, r0
   1cf98:	e5900000 	ldr	r0, [r0]
   1cf9c:	eb000ebb 	bl	20a90 <CNetConfig::GetIPAddress() const>
   1cfa0:	e284100c 	add	r1, r4, #12
   1cfa4:	eb000f5a 	bl	20d14 <CIPAddress::operator==(unsigned char const*) const>
   1cfa8:	e3500000 	cmp	r0, #0
   1cfac:	0a00003b 	beq	1d0a0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x150>
   1cfb0:	e2853008 	add	r3, r5, #8
   1cfb4:	e1530006 	cmp	r3, r6
   1cfb8:	8a00003c 	bhi	1d0b0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x160>
   1cfbc:	e3580000 	cmp	r8, #0
   1cfc0:	e0845005 	add	r5, r4, r5
   1cfc4:	0a000023 	beq	1d058 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x108>
   1cfc8:	e59f10f0 	ldr	r1, [pc, #240]	; 1d0c0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x170>
   1cfcc:	e59f30f0 	ldr	r3, [pc, #240]	; 1d0c4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x174>
   1cfd0:	e3580001 	cmp	r8, #1
   1cfd4:	11a08001 	movne	r8, r1
   1cfd8:	01a08003 	moveq	r8, r3
   1cfdc:	e28d0010 	add	r0, sp, #16
   1cfe0:	eb002a7f 	bl	279e4 <CString::CString()>
   1cfe4:	e2841010 	add	r1, r4, #16
   1cfe8:	e28d0008 	add	r0, sp, #8
   1cfec:	eb000f99 	bl	20e58 <CIPAddress::CIPAddress(unsigned char const*)>
   1cff0:	e28d1010 	add	r1, sp, #16
   1cff4:	e28d0008 	add	r0, sp, #8
   1cff8:	eb000ffd 	bl	20ff4 <CIPAddress::Format(CString*) const>
   1cffc:	eb002688 	bl	26a24 <CLogger::Get()>
   1d000:	e1a06000 	mov	r6, r0
   1d004:	e28d0010 	add	r0, sp, #16
   1d008:	eb002a8d 	bl	27a44 <CString::operator char const*() const>
   1d00c:	e1a03000 	mov	r3, r0
   1d010:	e3a02004 	mov	r2, #4
   1d014:	e1a00006 	mov	r0, r6
   1d018:	e58d3004 	str	r3, [sp, #4]
   1d01c:	e59f10a4 	ldr	r1, [pc, #164]	; 1d0c8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x178>
   1d020:	e59f30a4 	ldr	r3, [pc, #164]	; 1d0cc <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x17c>
   1d024:	e58d8000 	str	r8, [sp]
   1d028:	eb0025bf 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d02c:	e1a03005 	mov	r3, r5
   1d030:	e1a02004 	mov	r2, r4
   1d034:	e3a01000 	mov	r1, #0
   1d038:	e1a00007 	mov	r0, r7
   1d03c:	ebfffe8f 	bl	1ca80 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1d040:	e28d0008 	add	r0, sp, #8
   1d044:	eb000f02 	bl	20c54 <CIPAddress::~CIPAddress()>
   1d048:	e28d0010 	add	r0, sp, #16
   1d04c:	eb002a31 	bl	27918 <CString::~CString()>
   1d050:	e28dd020 	add	sp, sp, #32
   1d054:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d058:	e59f8070 	ldr	r8, [pc, #112]	; 1d0d0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1d05c:	eaffffde 	b	1cfdc <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x8c>
   1d060:	e3a020c9 	mov	r2, #201	; 0xc9
   1d064:	e59f1068 	ldr	r1, [pc, #104]	; 1d0d4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d068:	e59f0068 	ldr	r0, [pc, #104]	; 1d0d8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x188>
   1d06c:	eb001d84 	bl	24684 <assertion_failed>
   1d070:	e3a020ca 	mov	r2, #202	; 0xca
   1d074:	e59f1058 	ldr	r1, [pc, #88]	; 1d0d4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d078:	e59f005c 	ldr	r0, [pc, #92]	; 1d0dc <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x18c>
   1d07c:	eb001d80 	bl	24684 <assertion_failed>
   1d080:	e3a020ce 	mov	r2, #206	; 0xce
   1d084:	e59f1048 	ldr	r1, [pc, #72]	; 1d0d4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d088:	e59f0050 	ldr	r0, [pc, #80]	; 1d0e0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x190>
   1d08c:	eb001d7c 	bl	24684 <assertion_failed>
   1d090:	e3a020d2 	mov	r2, #210	; 0xd2
   1d094:	e59f1038 	ldr	r1, [pc, #56]	; 1d0d4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d098:	e59f0044 	ldr	r0, [pc, #68]	; 1d0e4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x194>
   1d09c:	eb001d78 	bl	24684 <assertion_failed>
   1d0a0:	e3a020d3 	mov	r2, #211	; 0xd3
   1d0a4:	e59f1028 	ldr	r1, [pc, #40]	; 1d0d4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d0a8:	e59f0038 	ldr	r0, [pc, #56]	; 1d0e8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x198>
   1d0ac:	eb001d74 	bl	24684 <assertion_failed>
   1d0b0:	e3a020d4 	mov	r2, #212	; 0xd4
   1d0b4:	e59f1018 	ldr	r1, [pc, #24]	; 1d0d4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d0b8:	e59f002c 	ldr	r0, [pc, #44]	; 1d0ec <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x19c>
   1d0bc:	eb001d70 	bl	24684 <assertion_failed>
   1d0c0:	00047150 	.word	0x00047150
   1d0c4:	00043770 	.word	0x00043770
   1d0c8:	000438d8 	.word	0x000438d8
   1d0cc:	000438b8 	.word	0x000438b8
   1d0d0:	00043764 	.word	0x00043764
   1d0d4:	00043670 	.word	0x00043670
   1d0d8:	00043778 	.word	0x00043778
   1d0dc:	00043790 	.word	0x00043790
   1d0e0:	000437b0 	.word	0x000437b0
   1d0e4:	00043810 	.word	0x00043810
   1d0e8:	0004383c 	.word	0x0004383c
   1d0ec:	00043878 	.word	0x00043878

0001d0f0 <CRouteCache::CRouteCache()>:
   1d0f0:	e3a02064 	mov	r2, #100	; 0x64
   1d0f4:	e92d4010 	push	{r4, lr}
   1d0f8:	e1a04000 	mov	r4, r0
   1d0fc:	e1a01002 	mov	r1, r2
   1d100:	eb002958 	bl	27668 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   1d104:	e1a00004 	mov	r0, r4
   1d108:	e8bd8010 	pop	{r4, pc}

0001d10c <CRouteCache::Flush()>:
   1d10c:	e92d4070 	push	{r4, r5, r6, lr}
   1d110:	e1a05000 	mov	r5, r0
   1d114:	eb00297a 	bl	27704 <CPtrArray::GetCount() const>
   1d118:	e3500000 	cmp	r0, #0
   1d11c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1d120:	e2404001 	sub	r4, r0, #1
   1d124:	e1a01004 	mov	r1, r4
   1d128:	e1a00005 	mov	r0, r5
   1d12c:	eb002976 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1d130:	e5900000 	ldr	r0, [r0]
   1d134:	e2444001 	sub	r4, r4, #1
   1d138:	e3500000 	cmp	r0, #0
   1d13c:	0a000001 	beq	1d148 <CRouteCache::Flush()+0x3c>
   1d140:	e3a01008 	mov	r1, #8
   1d144:	eb003763 	bl	2aed8 <operator delete(void*, unsigned int)>
   1d148:	e1a00005 	mov	r0, r5
   1d14c:	eb0029e4 	bl	278e4 <CPtrArray::RemoveLast()>
   1d150:	e3740001 	cmn	r4, #1
   1d154:	1afffff2 	bne	1d124 <CRouteCache::Flush()+0x18>
   1d158:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d15c <CRouteCache::~CRouteCache()>:
   1d15c:	e92d4010 	push	{r4, lr}
   1d160:	e1a04000 	mov	r4, r0
   1d164:	ebffffe8 	bl	1d10c <CRouteCache::Flush()>
   1d168:	e1a00004 	mov	r0, r4
   1d16c:	eb002959 	bl	276d8 <CPtrArray::~CPtrArray()>
   1d170:	e1a00004 	mov	r0, r4
   1d174:	e8bd8010 	pop	{r4, pc}

0001d178 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>:
   1d178:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d17c:	e2516000 	subs	r6, r1, #0
   1d180:	0a000029 	beq	1d22c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xb4>
   1d184:	e3520000 	cmp	r2, #0
   1d188:	e1a08002 	mov	r8, r2
   1d18c:	0a00002a 	beq	1d23c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xc4>
   1d190:	e1a07000 	mov	r7, r0
   1d194:	eb00295a 	bl	27704 <CPtrArray::GetCount() const>
   1d198:	e2509000 	subs	r9, r0, #0
   1d19c:	0a000014 	beq	1d1f4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x7c>
   1d1a0:	e3a04000 	mov	r4, #0
   1d1a4:	ea000008 	b	1d1cc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x54>
   1d1a8:	e3a02004 	mov	r2, #4
   1d1ac:	e1a01006 	mov	r1, r6
   1d1b0:	e1a00005 	mov	r0, r5
   1d1b4:	eb003344 	bl	29ecc <memcmp>
   1d1b8:	e3500000 	cmp	r0, #0
   1d1bc:	0a000015 	beq	1d218 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xa0>
   1d1c0:	e2844001 	add	r4, r4, #1
   1d1c4:	e1590004 	cmp	r9, r4
   1d1c8:	0a000009 	beq	1d1f4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x7c>
   1d1cc:	e1a01004 	mov	r1, r4
   1d1d0:	e1a00007 	mov	r0, r7
   1d1d4:	eb00294c 	bl	2770c <CPtrArray::operator[](unsigned int)>
   1d1d8:	e5905000 	ldr	r5, [r0]
   1d1dc:	e3550000 	cmp	r5, #0
   1d1e0:	1afffff0 	bne	1d1a8 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x30>
   1d1e4:	e3a0203e 	mov	r2, #62	; 0x3e
   1d1e8:	e59f105c 	ldr	r1, [pc, #92]	; 1d24c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd4>
   1d1ec:	e59f005c 	ldr	r0, [pc, #92]	; 1d250 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd8>
   1d1f0:	eb001d23 	bl	24684 <assertion_failed>
   1d1f4:	e3a00008 	mov	r0, #8
   1d1f8:	eb003728 	bl	2aea0 <operator new(unsigned int)>
   1d1fc:	e1a05000 	mov	r5, r0
   1d200:	e1a01006 	mov	r1, r6
   1d204:	e3a02004 	mov	r2, #4
   1d208:	eb00353e 	bl	2a708 <memcpy>
   1d20c:	e1a01005 	mov	r1, r5
   1d210:	e1a00007 	mov	r0, r7
   1d214:	eb002974 	bl	277ec <CPtrArray::Append(void*)>
   1d218:	e1a01008 	mov	r1, r8
   1d21c:	e2850004 	add	r0, r5, #4
   1d220:	e3a02004 	mov	r2, #4
   1d224:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d228:	ea003536 	b	2a708 <memcpy>
   1d22c:	e3a02035 	mov	r2, #53	; 0x35
   1d230:	e59f1014 	ldr	r1, [pc, #20]	; 1d24c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd4>
   1d234:	e59f0018 	ldr	r0, [pc, #24]	; 1d254 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xdc>
   1d238:	eb001d11 	bl	24684 <assertion_failed>
   1d23c:	e3a02036 	mov	r2, #54	; 0x36
   1d240:	e59f1004 	ldr	r1, [pc, #4]	; 1d24c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd4>
   1d244:	e59f000c 	ldr	r0, [pc, #12]	; 1d258 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xe0>
   1d248:	eb001d0d 	bl	24684 <assertion_failed>
   1d24c:	000438e0 	.word	0x000438e0
   1d250:	00043910 	.word	0x00043910
   1d254:	000438f0 	.word	0x000438f0
   1d258:	00043900 	.word	0x00043900

0001d25c <CRouteCache::GetRoute(unsigned char const*) const>:
   1d25c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d260:	e2516000 	subs	r6, r1, #0
   1d264:	0a00001a 	beq	1d2d4 <CRouteCache::GetRoute(unsigned char const*) const+0x78>
   1d268:	e1a07000 	mov	r7, r0
   1d26c:	eb002924 	bl	27704 <CPtrArray::GetCount() const>
   1d270:	e2508000 	subs	r8, r0, #0
   1d274:	0a000012 	beq	1d2c4 <CRouteCache::GetRoute(unsigned char const*) const+0x68>
   1d278:	e3a05000 	mov	r5, #0
   1d27c:	ea000007 	b	1d2a0 <CRouteCache::GetRoute(unsigned char const*) const+0x44>
   1d280:	e3a02004 	mov	r2, #4
   1d284:	e1a01006 	mov	r1, r6
   1d288:	eb00330f 	bl	29ecc <memcmp>
   1d28c:	e3500000 	cmp	r0, #0
   1d290:	0a00000d 	beq	1d2cc <CRouteCache::GetRoute(unsigned char const*) const+0x70>
   1d294:	e2855001 	add	r5, r5, #1
   1d298:	e1580005 	cmp	r8, r5
   1d29c:	0a000008 	beq	1d2c4 <CRouteCache::GetRoute(unsigned char const*) const+0x68>
   1d2a0:	e1a01005 	mov	r1, r5
   1d2a4:	e1a00007 	mov	r0, r7
   1d2a8:	eb002933 	bl	2777c <CPtrArray::operator[](unsigned int) const>
   1d2ac:	e2504000 	subs	r4, r0, #0
   1d2b0:	1afffff2 	bne	1d280 <CRouteCache::GetRoute(unsigned char const*) const+0x24>
   1d2b4:	e3a0205d 	mov	r2, #93	; 0x5d
   1d2b8:	e59f1024 	ldr	r1, [pc, #36]	; 1d2e4 <CRouteCache::GetRoute(unsigned char const*) const+0x88>
   1d2bc:	e59f0024 	ldr	r0, [pc, #36]	; 1d2e8 <CRouteCache::GetRoute(unsigned char const*) const+0x8c>
   1d2c0:	eb001cef 	bl	24684 <assertion_failed>
   1d2c4:	e3a00000 	mov	r0, #0
   1d2c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d2cc:	e2840004 	add	r0, r4, #4
   1d2d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d2d4:	e3a02057 	mov	r2, #87	; 0x57
   1d2d8:	e59f1004 	ldr	r1, [pc, #4]	; 1d2e4 <CRouteCache::GetRoute(unsigned char const*) const+0x88>
   1d2dc:	e59f0008 	ldr	r0, [pc, #8]	; 1d2ec <CRouteCache::GetRoute(unsigned char const*) const+0x90>
   1d2e0:	eb001ce7 	bl	24684 <assertion_failed>
   1d2e4:	000438e0 	.word	0x000438e0
   1d2e8:	00043910 	.word	0x00043910
   1d2ec:	000438f0 	.word	0x000438f0

0001d2f0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>:
   1d2f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d2f4:	e1a05003 	mov	r5, r3
   1d2f8:	e1a04000 	mov	r4, r0
   1d2fc:	e1a06001 	mov	r6, r1
   1d300:	e59f3088 	ldr	r3, [pc, #136]	; 1d390 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1d304:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
   1d308:	e1dd92b0 	ldrh	r9, [sp, #32]
   1d30c:	e1dd82b4 	ldrh	r8, [sp, #36]	; 0x24
   1d310:	e5802008 	str	r2, [r0, #8]
   1d314:	e5803000 	str	r3, [r0]
   1d318:	e5801004 	str	r1, [r0, #4]
   1d31c:	e1a01005 	mov	r1, r5
   1d320:	e280000c 	add	r0, r0, #12
   1d324:	eb000e3b 	bl	20c18 <CIPAddress::CIPAddress(CIPAddress const&)>
   1d328:	e1a00006 	mov	r0, r6
   1d32c:	e1c491b4 	strh	r9, [r4, #20]
   1d330:	e1c481b6 	strh	r8, [r4, #22]
   1d334:	e5847018 	str	r7, [r4, #24]
   1d338:	eb000dd4 	bl	20a90 <CNetConfig::GetIPAddress() const>
   1d33c:	e1a03007 	mov	r3, r7
   1d340:	e1a01000 	mov	r1, r0
   1d344:	e1a02005 	mov	r2, r5
   1d348:	e284001c 	add	r0, r4, #28
   1d34c:	eb00104c 	bl	21484 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>
   1d350:	e5943004 	ldr	r3, [r4, #4]
   1d354:	e3530000 	cmp	r3, #0
   1d358:	0a000004 	beq	1d370 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x80>
   1d35c:	e5943008 	ldr	r3, [r4, #8]
   1d360:	e3530000 	cmp	r3, #0
   1d364:	0a000005 	beq	1d380 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x90>
   1d368:	e1a00004 	mov	r0, r4
   1d36c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d370:	e3a02025 	mov	r2, #37	; 0x25
   1d374:	e59f1018 	ldr	r1, [pc, #24]	; 1d394 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   1d378:	e59f0018 	ldr	r0, [pc, #24]	; 1d398 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa8>
   1d37c:	eb001cc0 	bl	24684 <assertion_failed>
   1d380:	e3a02026 	mov	r2, #38	; 0x26
   1d384:	e59f1008 	ldr	r1, [pc, #8]	; 1d394 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   1d388:	e59f000c 	ldr	r0, [pc, #12]	; 1d39c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xac>
   1d38c:	eb001cbc 	bl	24684 <assertion_failed>
   1d390:	00043948 	.word	0x00043948
   1d394:	0004391c 	.word	0x0004391c
   1d398:	000432d0 	.word	0x000432d0
   1d39c:	000432e4 	.word	0x000432e4

0001d3a0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>:
   1d3a0:	e92d4070 	push	{r4, r5, r6, lr}
   1d3a4:	e1a05001 	mov	r5, r1
   1d3a8:	e59f107c 	ldr	r1, [pc, #124]	; 1d42c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x8c>
   1d3ac:	e1a04000 	mov	r4, r0
   1d3b0:	e5802008 	str	r2, [r0, #8]
   1d3b4:	e5801000 	str	r1, [r0]
   1d3b8:	e5805004 	str	r5, [r0, #4]
   1d3bc:	e280000c 	add	r0, r0, #12
   1d3c0:	e1a06003 	mov	r6, r3
   1d3c4:	eb000e0c 	bl	20bfc <CIPAddress::CIPAddress()>
   1d3c8:	e3a03000 	mov	r3, #0
   1d3cc:	e1a00005 	mov	r0, r5
   1d3d0:	e1c431b4 	strh	r3, [r4, #20]
   1d3d4:	e1c461b6 	strh	r6, [r4, #22]
   1d3d8:	eb000dac 	bl	20a90 <CNetConfig::GetIPAddress() const>
   1d3dc:	e59d2010 	ldr	r2, [sp, #16]
   1d3e0:	e1a01000 	mov	r1, r0
   1d3e4:	e284001c 	add	r0, r4, #28
   1d3e8:	eb001019 	bl	21454 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>
   1d3ec:	e5943004 	ldr	r3, [r4, #4]
   1d3f0:	e3530000 	cmp	r3, #0
   1d3f4:	0a000004 	beq	1d40c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x6c>
   1d3f8:	e5943008 	ldr	r3, [r4, #8]
   1d3fc:	e3530000 	cmp	r3, #0
   1d400:	0a000005 	beq	1d41c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x7c>
   1d404:	e1a00004 	mov	r0, r4
   1d408:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d40c:	e3a02033 	mov	r2, #51	; 0x33
   1d410:	e59f1018 	ldr	r1, [pc, #24]	; 1d430 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x90>
   1d414:	e59f0018 	ldr	r0, [pc, #24]	; 1d434 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x94>
   1d418:	eb001c99 	bl	24684 <assertion_failed>
   1d41c:	e3a02034 	mov	r2, #52	; 0x34
   1d420:	e59f1008 	ldr	r1, [pc, #8]	; 1d430 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x90>
   1d424:	e59f000c 	ldr	r0, [pc, #12]	; 1d438 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x98>
   1d428:	eb001c95 	bl	24684 <assertion_failed>
   1d42c:	00043948 	.word	0x00043948
   1d430:	0004391c 	.word	0x0004391c
   1d434:	000432d0 	.word	0x000432d0
   1d438:	000432e4 	.word	0x000432e4

0001d43c <CNetConnection::~CNetConnection()>:
   1d43c:	e3a03000 	mov	r3, #0
   1d440:	e92d4010 	push	{r4, lr}
   1d444:	e1a04000 	mov	r4, r0
   1d448:	e59f201c 	ldr	r2, [pc, #28]	; 1d46c <CNetConnection::~CNetConnection()+0x30>
   1d44c:	e5803008 	str	r3, [r0, #8]
   1d450:	e1c020f0 	strd	r2, [r0]
   1d454:	e280001c 	add	r0, r0, #28
   1d458:	eb00101a 	bl	214c8 <CChecksumCalculator::~CChecksumCalculator()>
   1d45c:	e284000c 	add	r0, r4, #12
   1d460:	eb000dfb 	bl	20c54 <CIPAddress::~CIPAddress()>
   1d464:	e1a00004 	mov	r0, r4
   1d468:	e8bd8010 	pop	{r4, pc}
   1d46c:	00043948 	.word	0x00043948

0001d470 <CNetConnection::~CNetConnection()>:
   1d470:	e3a03000 	mov	r3, #0
   1d474:	e92d4010 	push	{r4, lr}
   1d478:	e1a04000 	mov	r4, r0
   1d47c:	e59f2028 	ldr	r2, [pc, #40]	; 1d4ac <CNetConnection::~CNetConnection()+0x3c>
   1d480:	e5803008 	str	r3, [r0, #8]
   1d484:	e1c020f0 	strd	r2, [r0]
   1d488:	e280001c 	add	r0, r0, #28
   1d48c:	eb00100d 	bl	214c8 <CChecksumCalculator::~CChecksumCalculator()>
   1d490:	e284000c 	add	r0, r4, #12
   1d494:	eb000dee 	bl	20c54 <CIPAddress::~CIPAddress()>
   1d498:	e1a00004 	mov	r0, r4
   1d49c:	e3a0102c 	mov	r1, #44	; 0x2c
   1d4a0:	eb00368c 	bl	2aed8 <operator delete(void*, unsigned int)>
   1d4a4:	e1a00004 	mov	r0, r4
   1d4a8:	e8bd8010 	pop	{r4, pc}
   1d4ac:	00043948 	.word	0x00043948

0001d4b0 <CNetConnection::GetForeignIP() const>:
   1d4b0:	e280000c 	add	r0, r0, #12
   1d4b4:	ea000e8c 	b	20eec <CIPAddress::Get() const>

0001d4b8 <CNetConnection::GetOwnPort() const>:
   1d4b8:	e1d001b6 	ldrh	r0, [r0, #22]
   1d4bc:	e3500000 	cmp	r0, #0
   1d4c0:	112fff1e 	bxne	lr
   1d4c4:	e3a02044 	mov	r2, #68	; 0x44
   1d4c8:	e92d4010 	push	{r4, lr}
   1d4cc:	e59f1004 	ldr	r1, [pc, #4]	; 1d4d8 <CNetConnection::GetOwnPort() const+0x20>
   1d4d0:	e59f0004 	ldr	r0, [pc, #4]	; 1d4dc <CNetConnection::GetOwnPort() const+0x24>
   1d4d4:	eb001c6a 	bl	24684 <assertion_failed>
   1d4d8:	0004391c 	.word	0x0004391c
   1d4dc:	00043930 	.word	0x00043930

0001d4e0 <CNetConnection::GetProtocol() const>:
   1d4e0:	e5900018 	ldr	r0, [r0, #24]
   1d4e4:	e12fff1e 	bx	lr

0001d4e8 <CUDPConnection::Accept(CIPAddress*, unsigned short*)>:
   1d4e8:	e3e00000 	mvn	r0, #0
   1d4ec:	e12fff1e 	bx	lr

0001d4f0 <CUDPConnection::Close()>:
   1d4f0:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1d4f4:	e3530000 	cmp	r3, #0
   1d4f8:	13a03000 	movne	r3, #0
   1d4fc:	15c03029 	strbne	r3, [r0, #41]	; 0x29
   1d500:	11a00003 	movne	r0, r3
   1d504:	03e00000 	mvneq	r0, #0
   1d508:	e12fff1e 	bx	lr

0001d50c <CUDPConnection::SetOptionBroadcast(bool)>:
   1d50c:	e1a03000 	mov	r3, r0
   1d510:	e3a00000 	mov	r0, #0
   1d514:	e5c31040 	strb	r1, [r3, #64]	; 0x40
   1d518:	e12fff1e 	bx	lr

0001d51c <CUDPConnection::IsConnected() const>:
   1d51c:	e3a00000 	mov	r0, #0
   1d520:	e12fff1e 	bx	lr

0001d524 <CUDPConnection::IsTerminated() const>:
   1d524:	e5d00029 	ldrb	r0, [r0, #41]	; 0x29
   1d528:	e2200001 	eor	r0, r0, #1
   1d52c:	e12fff1e 	bx	lr

0001d530 <CUDPConnection::Process()>:
   1d530:	e12fff1e 	bx	lr

0001d534 <CUDPConnection::Send(void const*, unsigned int, int)>:
   1d534:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d538:	e28db01c 	add	fp, sp, #28
   1d53c:	e24dd008 	sub	sp, sp, #8
   1d540:	e1a04000 	mov	r4, r0
   1d544:	e5900044 	ldr	r0, [r0, #68]	; 0x44
   1d548:	e3500000 	cmp	r0, #0
   1d54c:	b3a03000 	movlt	r3, #0
   1d550:	b5843044 	strlt	r3, [r4, #68]	; 0x44
   1d554:	ba00004d 	blt	1d690 <CUDPConnection::Send(void const*, unsigned int, int)+0x15c>
   1d558:	e1a06002 	mov	r6, r2
   1d55c:	e5d4202a 	ldrb	r2, [r4, #42]	; 0x2a
   1d560:	e3520000 	cmp	r2, #0
   1d564:	0a000057 	beq	1d6c8 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d568:	e3d33040 	bics	r3, r3, #64	; 0x40
   1d56c:	1a000055 	bne	1d6c8 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d570:	e59f3188 	ldr	r3, [pc, #392]	; 1d700 <CUDPConnection::Send(void const*, unsigned int, int)+0x1cc>
   1d574:	e2462001 	sub	r2, r6, #1
   1d578:	e1520003 	cmp	r2, r3
   1d57c:	e2868008 	add	r8, r6, #8
   1d580:	8a000050 	bhi	1d6c8 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d584:	e5943004 	ldr	r3, [r4, #4]
   1d588:	e3530000 	cmp	r3, #0
   1d58c:	0a00004f 	beq	1d6d0 <CUDPConnection::Send(void const*, unsigned int, int)+0x19c>
   1d590:	e5d43040 	ldrb	r3, [r4, #64]	; 0x40
   1d594:	e1a07001 	mov	r7, r1
   1d598:	e3530000 	cmp	r3, #0
   1d59c:	0a00003d 	beq	1d698 <CUDPConnection::Send(void const*, unsigned int, int)+0x164>
   1d5a0:	e3a0c000 	mov	ip, #0
   1d5a4:	e1d401b6 	ldrh	r0, [r4, #22]
   1d5a8:	e2882007 	add	r2, r8, #7
   1d5ac:	e6bf0fb0 	rev16	r0, r0
   1d5b0:	e3c22007 	bic	r2, r2, #7
   1d5b4:	e1d411b4 	ldrh	r1, [r4, #20]
   1d5b8:	e04dd002 	sub	sp, sp, r2
   1d5bc:	e6ffe070 	uxth	lr, r0
   1d5c0:	e28d5008 	add	r5, sp, #8
   1d5c4:	e6bf1fb1 	rev16	r1, r1
   1d5c8:	e1a0242e 	lsr	r2, lr, #8
   1d5cc:	e5cd0008 	strb	r0, [sp, #8]
   1d5d0:	e5c52001 	strb	r2, [r5, #1]
   1d5d4:	e6ff2071 	uxth	r2, r1
   1d5d8:	e6bf3fb8 	rev16	r3, r8
   1d5dc:	e1a02422 	lsr	r2, r2, #8
   1d5e0:	e5c52003 	strb	r2, [r5, #3]
   1d5e4:	e6ff2073 	uxth	r2, r3
   1d5e8:	e1a02422 	lsr	r2, r2, #8
   1d5ec:	e157000c 	cmp	r7, ip
   1d5f0:	e5c51002 	strb	r1, [r5, #2]
   1d5f4:	e5c53004 	strb	r3, [r5, #4]
   1d5f8:	e5c52005 	strb	r2, [r5, #5]
   1d5fc:	e5c5c006 	strb	ip, [r5, #6]
   1d600:	e5c5c007 	strb	ip, [r5, #7]
   1d604:	0a000035 	beq	1d6e0 <CUDPConnection::Send(void const*, unsigned int, int)+0x1ac>
   1d608:	e1a02006 	mov	r2, r6
   1d60c:	e1a01007 	mov	r1, r7
   1d610:	e2850008 	add	r0, r5, #8
   1d614:	eb00343b 	bl	2a708 <memcpy>
   1d618:	e5940004 	ldr	r0, [r4, #4]
   1d61c:	eb000d1b 	bl	20a90 <CNetConfig::GetIPAddress() const>
   1d620:	e284901c 	add	r9, r4, #28
   1d624:	e1a01000 	mov	r1, r0
   1d628:	e284700c 	add	r7, r4, #12
   1d62c:	e1a00009 	mov	r0, r9
   1d630:	eb000fa5 	bl	214cc <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1d634:	e1a00009 	mov	r0, r9
   1d638:	e1a01007 	mov	r1, r7
   1d63c:	eb000fa6 	bl	214dc <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1d640:	e1a02008 	mov	r2, r8
   1d644:	e1a01005 	mov	r1, r5
   1d648:	e1a00009 	mov	r0, r9
   1d64c:	eb000fcd 	bl	21588 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d650:	e594c008 	ldr	ip, [r4, #8]
   1d654:	e1a03420 	lsr	r3, r0, #8
   1d658:	e35c0000 	cmp	ip, #0
   1d65c:	e5c50006 	strb	r0, [r5, #6]
   1d660:	e5c53007 	strb	r3, [r5, #7]
   1d664:	0a000021 	beq	1d6f0 <CUDPConnection::Send(void const*, unsigned int, int)+0x1bc>
   1d668:	e3a0e011 	mov	lr, #17
   1d66c:	e1a03008 	mov	r3, r8
   1d670:	e1a02005 	mov	r2, r5
   1d674:	e1a01007 	mov	r1, r7
   1d678:	e1a0000c 	mov	r0, ip
   1d67c:	e58de000 	str	lr, [sp]
   1d680:	ebfff573 	bl	1ac54 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1d684:	e3500000 	cmp	r0, #0
   1d688:	0a00000e 	beq	1d6c8 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d68c:	e1a00006 	mov	r0, r6
   1d690:	e24bd01c 	sub	sp, fp, #28
   1d694:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d698:	e284500c 	add	r5, r4, #12
   1d69c:	e1a00005 	mov	r0, r5
   1d6a0:	eb000e42 	bl	20fb0 <CIPAddress::IsBroadcast() const>
   1d6a4:	e3500000 	cmp	r0, #0
   1d6a8:	1a000006 	bne	1d6c8 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d6ac:	e5940004 	ldr	r0, [r4, #4]
   1d6b0:	eb000d00 	bl	20ab8 <CNetConfig::GetBroadcastAddress() const>
   1d6b4:	e1a01000 	mov	r1, r0
   1d6b8:	e1a00005 	mov	r0, r5
   1d6bc:	eb000d65 	bl	20c58 <CIPAddress::operator==(CIPAddress const&) const>
   1d6c0:	e3500000 	cmp	r0, #0
   1d6c4:	0affffb5 	beq	1d5a0 <CUDPConnection::Send(void const*, unsigned int, int)+0x6c>
   1d6c8:	e3e00000 	mvn	r0, #0
   1d6cc:	eaffffef 	b	1d690 <CUDPConnection::Send(void const*, unsigned int, int)+0x15c>
   1d6d0:	e3a0207b 	mov	r2, #123	; 0x7b
   1d6d4:	e59f1028 	ldr	r1, [pc, #40]	; 1d704 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d0>
   1d6d8:	e59f0028 	ldr	r0, [pc, #40]	; 1d708 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d4>
   1d6dc:	eb001be8 	bl	24684 <assertion_failed>
   1d6e0:	e3a0208b 	mov	r2, #139	; 0x8b
   1d6e4:	e59f1018 	ldr	r1, [pc, #24]	; 1d704 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d0>
   1d6e8:	e59f001c 	ldr	r0, [pc, #28]	; 1d70c <CUDPConnection::Send(void const*, unsigned int, int)+0x1d8>
   1d6ec:	eb001be4 	bl	24684 <assertion_failed>
   1d6f0:	e3a02093 	mov	r2, #147	; 0x93
   1d6f4:	e59f1008 	ldr	r1, [pc, #8]	; 1d704 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d0>
   1d6f8:	e59f0010 	ldr	r0, [pc, #16]	; 1d710 <CUDPConnection::Send(void const*, unsigned int, int)+0x1dc>
   1d6fc:	eb001be0 	bl	24684 <assertion_failed>
   1d700:	00000637 	.word	0x00000637
   1d704:	00043984 	.word	0x00043984
   1d708:	000432d0 	.word	0x000432d0
   1d70c:	0004334c 	.word	0x0004334c
   1d710:	000432e4 	.word	0x000432e4

0001d714 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1d714:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   1d718:	e28db018 	add	fp, sp, #24
   1d71c:	e24dd014 	sub	sp, sp, #20
   1d720:	e590c044 	ldr	ip, [r0, #68]	; 0x44
   1d724:	e1a04000 	mov	r4, r0
   1d728:	e35c0000 	cmp	ip, #0
   1d72c:	b3a03000 	movlt	r3, #0
   1d730:	e1db60b8 	ldrh	r6, [fp, #8]
   1d734:	b5803044 	strlt	r3, [r0, #68]	; 0x44
   1d738:	ba00004d 	blt	1d874 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x160>
   1d73c:	e5d0c02a 	ldrb	ip, [r0, #42]	; 0x2a
   1d740:	e35c0000 	cmp	ip, #0
   1d744:	1a00004d 	bne	1d880 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x16c>
   1d748:	e1a0e003 	mov	lr, r3
   1d74c:	e3de3040 	bics	r3, lr, #64	; 0x40
   1d750:	1a00005c 	bne	1d8c8 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1b4>
   1d754:	e1a05002 	mov	r5, r2
   1d758:	e59f31a0 	ldr	r3, [pc, #416]	; 1d900 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1ec>
   1d75c:	e2422001 	sub	r2, r2, #1
   1d760:	e1520003 	cmp	r2, r3
   1d764:	e2858008 	add	r8, r5, #8
   1d768:	8a000056 	bhi	1d8c8 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1b4>
   1d76c:	e5903004 	ldr	r3, [r0, #4]
   1d770:	e3530000 	cmp	r3, #0
   1d774:	0a000055 	beq	1d8d0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1bc>
   1d778:	e5d03040 	ldrb	r3, [r0, #64]	; 0x40
   1d77c:	e1a07001 	mov	r7, r1
   1d780:	e3530000 	cmp	r3, #0
   1d784:	0a000044 	beq	1d89c <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x188>
   1d788:	e3a00000 	mov	r0, #0
   1d78c:	e1d411b6 	ldrh	r1, [r4, #22]
   1d790:	e2882007 	add	r2, r8, #7
   1d794:	e6bf1fb1 	rev16	r1, r1
   1d798:	e3c22007 	bic	r2, r2, #7
   1d79c:	e04dd002 	sub	sp, sp, r2
   1d7a0:	e6ffe071 	uxth	lr, r1
   1d7a4:	e6bfcfb6 	rev16	ip, r6
   1d7a8:	e6bf3fb8 	rev16	r3, r8
   1d7ac:	e28d6008 	add	r6, sp, #8
   1d7b0:	e1a0242e 	lsr	r2, lr, #8
   1d7b4:	e5cd1008 	strb	r1, [sp, #8]
   1d7b8:	e5c62001 	strb	r2, [r6, #1]
   1d7bc:	e6ff107c 	uxth	r1, ip
   1d7c0:	e6ff2073 	uxth	r2, r3
   1d7c4:	e1a01421 	lsr	r1, r1, #8
   1d7c8:	e1a02422 	lsr	r2, r2, #8
   1d7cc:	e1570000 	cmp	r7, r0
   1d7d0:	e5c6c002 	strb	ip, [r6, #2]
   1d7d4:	e5c61003 	strb	r1, [r6, #3]
   1d7d8:	e5c63004 	strb	r3, [r6, #4]
   1d7dc:	e5c62005 	strb	r2, [r6, #5]
   1d7e0:	e5c60006 	strb	r0, [r6, #6]
   1d7e4:	e5c60007 	strb	r0, [r6, #7]
   1d7e8:	0a00003c 	beq	1d8e0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1cc>
   1d7ec:	e1a02005 	mov	r2, r5
   1d7f0:	e1a01007 	mov	r1, r7
   1d7f4:	e2860008 	add	r0, r6, #8
   1d7f8:	eb0033c2 	bl	2a708 <memcpy>
   1d7fc:	e5940004 	ldr	r0, [r4, #4]
   1d800:	eb000ca2 	bl	20a90 <CNetConfig::GetIPAddress() const>
   1d804:	e284701c 	add	r7, r4, #28
   1d808:	e1a01000 	mov	r1, r0
   1d80c:	e1a00007 	mov	r0, r7
   1d810:	eb000f2d 	bl	214cc <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1d814:	e1a00007 	mov	r0, r7
   1d818:	e59b1004 	ldr	r1, [fp, #4]
   1d81c:	eb000f2e 	bl	214dc <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1d820:	e1a02008 	mov	r2, r8
   1d824:	e1a01006 	mov	r1, r6
   1d828:	e1a00007 	mov	r0, r7
   1d82c:	eb000f55 	bl	21588 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d830:	e1a03000 	mov	r3, r0
   1d834:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   1d838:	e5940008 	ldr	r0, [r4, #8]
   1d83c:	e1a02423 	lsr	r2, r3, #8
   1d840:	e3500000 	cmp	r0, #0
   1d844:	e5c63006 	strb	r3, [r6, #6]
   1d848:	e5c62007 	strb	r2, [r6, #7]
   1d84c:	0a000027 	beq	1d8f0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1dc>
   1d850:	e3a01011 	mov	r1, #17
   1d854:	e1a03008 	mov	r3, r8
   1d858:	e58d1000 	str	r1, [sp]
   1d85c:	e1a02006 	mov	r2, r6
   1d860:	e59b1004 	ldr	r1, [fp, #4]
   1d864:	ebfff4fa 	bl	1ac54 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1d868:	e3500000 	cmp	r0, #0
   1d86c:	0a000015 	beq	1d8c8 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1b4>
   1d870:	e1a0c005 	mov	ip, r5
   1d874:	e1a0000c 	mov	r0, ip
   1d878:	e24bd018 	sub	sp, fp, #24
   1d87c:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1d880:	e590c000 	ldr	ip, [r0]
   1d884:	e59c4014 	ldr	r4, [ip, #20]
   1d888:	e12fff34 	blx	r4
   1d88c:	e1a0c000 	mov	ip, r0
   1d890:	e1a0000c 	mov	r0, ip
   1d894:	e24bd018 	sub	sp, fp, #24
   1d898:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1d89c:	e59b0004 	ldr	r0, [fp, #4]
   1d8a0:	eb000dc2 	bl	20fb0 <CIPAddress::IsBroadcast() const>
   1d8a4:	e3500000 	cmp	r0, #0
   1d8a8:	1a000006 	bne	1d8c8 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1b4>
   1d8ac:	e5940004 	ldr	r0, [r4, #4]
   1d8b0:	eb000c80 	bl	20ab8 <CNetConfig::GetBroadcastAddress() const>
   1d8b4:	e1a01000 	mov	r1, r0
   1d8b8:	e59b0004 	ldr	r0, [fp, #4]
   1d8bc:	eb000ce5 	bl	20c58 <CIPAddress::operator==(CIPAddress const&) const>
   1d8c0:	e3500000 	cmp	r0, #0
   1d8c4:	0affffaf 	beq	1d788 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x74>
   1d8c8:	e3e0c000 	mvn	ip, #0
   1d8cc:	eaffffe8 	b	1d874 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x160>
   1d8d0:	e3a020e4 	mov	r2, #228	; 0xe4
   1d8d4:	e59f1028 	ldr	r1, [pc, #40]	; 1d904 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f0>
   1d8d8:	e59f0028 	ldr	r0, [pc, #40]	; 1d908 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f4>
   1d8dc:	eb001b68 	bl	24684 <assertion_failed>
   1d8e0:	e3a020f4 	mov	r2, #244	; 0xf4
   1d8e4:	e59f1018 	ldr	r1, [pc, #24]	; 1d904 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f0>
   1d8e8:	e59f001c 	ldr	r0, [pc, #28]	; 1d90c <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f8>
   1d8ec:	eb001b64 	bl	24684 <assertion_failed>
   1d8f0:	e3a020fc 	mov	r2, #252	; 0xfc
   1d8f4:	e59f1008 	ldr	r1, [pc, #8]	; 1d904 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f0>
   1d8f8:	e59f0010 	ldr	r0, [pc, #16]	; 1d910 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1fc>
   1d8fc:	eb001b60 	bl	24684 <assertion_failed>
   1d900:	00000637 	.word	0x00000637
   1d904:	00043984 	.word	0x00043984
   1d908:	000432d0 	.word	0x000432d0
   1d90c:	0004334c 	.word	0x0004334c
   1d910:	000432e4 	.word	0x000432e4

0001d914 <CUDPConnection::Receive(void*, int)>:
   1d914:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1d918:	e1a06000 	mov	r6, r0
   1d91c:	e5900044 	ldr	r0, [r0, #68]	; 0x44
   1d920:	e24dd00c 	sub	sp, sp, #12
   1d924:	e3500000 	cmp	r0, #0
   1d928:	ba000022 	blt	1d9b8 <CUDPConnection::Receive(void*, int)+0xa4>
   1d92c:	e1a05001 	mov	r5, r1
   1d930:	e1a09002 	mov	r9, r2
   1d934:	e286702c 	add	r7, r6, #44	; 0x2c
   1d938:	e2868038 	add	r8, r6, #56	; 0x38
   1d93c:	e3550000 	cmp	r5, #0
   1d940:	0a000018 	beq	1d9a8 <CUDPConnection::Receive(void*, int)+0x94>
   1d944:	e1a01005 	mov	r1, r5
   1d948:	e1a00007 	mov	r0, r7
   1d94c:	e28d2004 	add	r2, sp, #4
   1d950:	eb000e79 	bl	2133c <CNetQueue::Dequeue(void*, void**)>
   1d954:	e2504000 	subs	r4, r0, #0
   1d958:	0a000007 	beq	1d97c <CUDPConnection::Receive(void*, int)+0x68>
   1d95c:	e59d0004 	ldr	r0, [sp, #4]
   1d960:	e3500000 	cmp	r0, #0
   1d964:	0a000019 	beq	1d9d0 <CUDPConnection::Receive(void*, int)+0xbc>
   1d968:	e3a01006 	mov	r1, #6
   1d96c:	eb003559 	bl	2aed8 <operator delete(void*, unsigned int)>
   1d970:	e1a00004 	mov	r0, r4
   1d974:	e28dd00c 	add	sp, sp, #12
   1d978:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d97c:	e3590040 	cmp	r9, #64	; 0x40
   1d980:	0a000010 	beq	1d9c8 <CUDPConnection::Receive(void*, int)+0xb4>
   1d984:	e1a00008 	mov	r0, r8
   1d988:	eb001ab7 	bl	2446c <CSynchronizationEvent::Clear()>
   1d98c:	e1a00008 	mov	r0, r8
   1d990:	eb001ac6 	bl	244b0 <CSynchronizationEvent::Wait()>
   1d994:	e5960044 	ldr	r0, [r6, #68]	; 0x44
   1d998:	e3500000 	cmp	r0, #0
   1d99c:	aaffffe6 	bge	1d93c <CUDPConnection::Receive(void*, int)+0x28>
   1d9a0:	e5864044 	str	r4, [r6, #68]	; 0x44
   1d9a4:	eafffff2 	b	1d974 <CUDPConnection::Receive(void*, int)+0x60>
   1d9a8:	e3a020a7 	mov	r2, #167	; 0xa7
   1d9ac:	e59f102c 	ldr	r1, [pc, #44]	; 1d9e0 <CUDPConnection::Receive(void*, int)+0xcc>
   1d9b0:	e59f002c 	ldr	r0, [pc, #44]	; 1d9e4 <CUDPConnection::Receive(void*, int)+0xd0>
   1d9b4:	eb001b32 	bl	24684 <assertion_failed>
   1d9b8:	e3a03000 	mov	r3, #0
   1d9bc:	e5863044 	str	r3, [r6, #68]	; 0x44
   1d9c0:	e28dd00c 	add	sp, sp, #12
   1d9c4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d9c8:	e1a00004 	mov	r0, r4
   1d9cc:	eaffffe8 	b	1d974 <CUDPConnection::Receive(void*, int)+0x60>
   1d9d0:	e3a020bf 	mov	r2, #191	; 0xbf
   1d9d4:	e59f1004 	ldr	r1, [pc, #4]	; 1d9e0 <CUDPConnection::Receive(void*, int)+0xcc>
   1d9d8:	e59f0008 	ldr	r0, [pc, #8]	; 1d9e8 <CUDPConnection::Receive(void*, int)+0xd4>
   1d9dc:	eb001b28 	bl	24684 <assertion_failed>
   1d9e0:	00043984 	.word	0x00043984
   1d9e4:	00040460 	.word	0x00040460
   1d9e8:	0004334c 	.word	0x0004334c

0001d9ec <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1d9ec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d9f0:	e1a06000 	mov	r6, r0
   1d9f4:	e5900044 	ldr	r0, [r0, #68]	; 0x44
   1d9f8:	e24dd008 	sub	sp, sp, #8
   1d9fc:	e3500000 	cmp	r0, #0
   1da00:	ba000028 	blt	1daa8 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xbc>
   1da04:	e1a05001 	mov	r5, r1
   1da08:	e1a09002 	mov	r9, r2
   1da0c:	e1a0a003 	mov	sl, r3
   1da10:	e286702c 	add	r7, r6, #44	; 0x2c
   1da14:	e2868038 	add	r8, r6, #56	; 0x38
   1da18:	e3550000 	cmp	r5, #0
   1da1c:	0a00001d 	beq	1da98 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xac>
   1da20:	e1a01005 	mov	r1, r5
   1da24:	e1a00007 	mov	r0, r7
   1da28:	e28d2004 	add	r2, sp, #4
   1da2c:	eb000e42 	bl	2133c <CNetQueue::Dequeue(void*, void**)>
   1da30:	e2504000 	subs	r4, r0, #0
   1da34:	0a00000c 	beq	1da6c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x80>
   1da38:	e59d5004 	ldr	r5, [sp, #4]
   1da3c:	e3550000 	cmp	r5, #0
   1da40:	0a00001c 	beq	1dab8 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xcc>
   1da44:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1da48:	e35a0000 	cmp	sl, #0
   1da4c:	13530000 	cmpne	r3, #0
   1da50:	1a00001c 	bne	1dac8 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xdc>
   1da54:	e1a00005 	mov	r0, r5
   1da58:	e3a01006 	mov	r1, #6
   1da5c:	eb00351d 	bl	2aed8 <operator delete(void*, unsigned int)>
   1da60:	e1a00004 	mov	r0, r4
   1da64:	e28dd008 	add	sp, sp, #8
   1da68:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1da6c:	e3590040 	cmp	r9, #64	; 0x40
   1da70:	0afffffa 	beq	1da60 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x74>
   1da74:	e1a00008 	mov	r0, r8
   1da78:	eb001a7b 	bl	2446c <CSynchronizationEvent::Clear()>
   1da7c:	e1a00008 	mov	r0, r8
   1da80:	eb001a8a 	bl	244b0 <CSynchronizationEvent::Wait()>
   1da84:	e5960044 	ldr	r0, [r6, #68]	; 0x44
   1da88:	e3500000 	cmp	r0, #0
   1da8c:	aaffffe1 	bge	1da18 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x2c>
   1da90:	e5864044 	str	r4, [r6, #68]	; 0x44
   1da94:	eafffff2 	b	1da64 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x78>
   1da98:	e3a02e11 	mov	r2, #272	; 0x110
   1da9c:	e59f1040 	ldr	r1, [pc, #64]	; 1dae4 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xf8>
   1daa0:	e59f0040 	ldr	r0, [pc, #64]	; 1dae8 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xfc>
   1daa4:	eb001af6 	bl	24684 <assertion_failed>
   1daa8:	e3a03000 	mov	r3, #0
   1daac:	e5863044 	str	r3, [r6, #68]	; 0x44
   1dab0:	e28dd008 	add	sp, sp, #8
   1dab4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dab8:	e3a02f4a 	mov	r2, #296	; 0x128
   1dabc:	e59f1020 	ldr	r1, [pc, #32]	; 1dae4 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xf8>
   1dac0:	e59f0024 	ldr	r0, [pc, #36]	; 1daec <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x100>
   1dac4:	eb001aee 	bl	24684 <assertion_failed>
   1dac8:	e1a0000a 	mov	r0, sl
   1dacc:	e1a01005 	mov	r1, r5
   1dad0:	eb000cd0 	bl	20e18 <CIPAddress::Set(unsigned char const*)>
   1dad4:	e1d530b4 	ldrh	r3, [r5, #4]
   1dad8:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1dadc:	e1c230b0 	strh	r3, [r2]
   1dae0:	eaffffdb 	b	1da54 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x68>
   1dae4:	00043984 	.word	0x00043984
   1dae8:	00040460 	.word	0x00040460
   1daec:	0004334c 	.word	0x0004334c

0001daf0 <CUDPConnection::Connect()>:
   1daf0:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1daf4:	e3530000 	cmp	r3, #0
   1daf8:	0a000001 	beq	1db04 <CUDPConnection::Connect()+0x14>
   1dafc:	e3a00000 	mov	r0, #0
   1db00:	e12fff1e 	bx	lr
   1db04:	e3a02049 	mov	r2, #73	; 0x49
   1db08:	e92d4010 	push	{r4, lr}
   1db0c:	e59f1004 	ldr	r1, [pc, #4]	; 1db18 <CUDPConnection::Connect()+0x28>
   1db10:	e59f0004 	ldr	r0, [pc, #4]	; 1db1c <CUDPConnection::Connect()+0x2c>
   1db14:	eb001ada 	bl	24684 <assertion_failed>
   1db18:	00043984 	.word	0x00043984
   1db1c:	00043998 	.word	0x00043998

0001db20 <CUDPConnection::~CUDPConnection()>:
   1db20:	e5d02029 	ldrb	r2, [r0, #41]	; 0x29
   1db24:	e59f3040 	ldr	r3, [pc, #64]	; 1db6c <CUDPConnection::~CUDPConnection()+0x4c>
   1db28:	e3520000 	cmp	r2, #0
   1db2c:	e92d4010 	push	{r4, lr}
   1db30:	e5803000 	str	r3, [r0]
   1db34:	1a000008 	bne	1db5c <CUDPConnection::~CUDPConnection()+0x3c>
   1db38:	e1a04000 	mov	r4, r0
   1db3c:	e2800038 	add	r0, r0, #56	; 0x38
   1db40:	eb001a3d 	bl	2443c <CSynchronizationEvent::~CSynchronizationEvent()>
   1db44:	e284002c 	add	r0, r4, #44	; 0x2c
   1db48:	eb000db0 	bl	21210 <CNetQueue::~CNetQueue()>
   1db4c:	e1a00004 	mov	r0, r4
   1db50:	ebfffe39 	bl	1d43c <CNetConnection::~CNetConnection()>
   1db54:	e1a00004 	mov	r0, r4
   1db58:	e8bd8010 	pop	{r4, pc}
   1db5c:	e3a02044 	mov	r2, #68	; 0x44
   1db60:	e59f1008 	ldr	r1, [pc, #8]	; 1db70 <CUDPConnection::~CUDPConnection()+0x50>
   1db64:	e59f0008 	ldr	r0, [pc, #8]	; 1db74 <CUDPConnection::~CUDPConnection()+0x54>
   1db68:	eb001ac5 	bl	24684 <assertion_failed>
   1db6c:	000439b4 	.word	0x000439b4
   1db70:	00043984 	.word	0x00043984
   1db74:	000439a0 	.word	0x000439a0

0001db78 <CUDPConnection::~CUDPConnection()>:
   1db78:	e92d4010 	push	{r4, lr}
   1db7c:	e1a04000 	mov	r4, r0
   1db80:	ebffffe6 	bl	1db20 <CUDPConnection::~CUDPConnection()>
   1db84:	e1a00004 	mov	r0, r4
   1db88:	e3a01048 	mov	r1, #72	; 0x48
   1db8c:	eb0034d1 	bl	2aed8 <operator delete(void*, unsigned int)>
   1db90:	e1a00004 	mov	r0, r4
   1db94:	e8bd8010 	pop	{r4, pc}

0001db98 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1db98:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1db9c:	e24dd00c 	sub	sp, sp, #12
   1dba0:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
   1dba4:	e35c0011 	cmp	ip, #17
   1dba8:	1a00001b 	bne	1dc1c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x84>
   1dbac:	e3520008 	cmp	r2, #8
   1dbb0:	e1a07002 	mov	r7, r2
   1dbb4:	9a000044 	bls	1dccc <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x134>
   1dbb8:	e1a04001 	mov	r4, r1
   1dbbc:	e5d11002 	ldrb	r1, [r1, #2]
   1dbc0:	e5d42003 	ldrb	r2, [r4, #3]
   1dbc4:	e1a06003 	mov	r6, r3
   1dbc8:	e1811402 	orr	r1, r1, r2, lsl #8
   1dbcc:	e1d031b6 	ldrh	r3, [r0, #22]
   1dbd0:	e6bf1fb1 	rev16	r1, r1
   1dbd4:	e6ff1071 	uxth	r1, r1
   1dbd8:	e1530001 	cmp	r3, r1
   1dbdc:	e1a05000 	mov	r5, r0
   1dbe0:	1a00000d 	bne	1dc1c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x84>
   1dbe4:	e5903004 	ldr	r3, [r0, #4]
   1dbe8:	e3530000 	cmp	r3, #0
   1dbec:	0a000059 	beq	1dd58 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c0>
   1dbf0:	e5d48000 	ldrb	r8, [r4]
   1dbf4:	e5d42001 	ldrb	r2, [r4, #1]
   1dbf8:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1dbfc:	e1888402 	orr	r8, r8, r2, lsl #8
   1dc00:	e6bf8fb8 	rev16	r8, r8
   1dc04:	e3530000 	cmp	r3, #0
   1dc08:	e6ff3078 	uxth	r3, r8
   1dc0c:	0a000016 	beq	1dc6c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd4>
   1dc10:	e1d021b4 	ldrh	r2, [r0, #20]
   1dc14:	e1520003 	cmp	r2, r3
   1dc18:	0a000002 	beq	1dc28 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x90>
   1dc1c:	e3a00000 	mov	r0, #0
   1dc20:	e28dd00c 	add	sp, sp, #12
   1dc24:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1dc28:	e280900c 	add	r9, r0, #12
   1dc2c:	e1a00009 	mov	r0, r9
   1dc30:	e1a01006 	mov	r1, r6
   1dc34:	eb000c1f 	bl	20cb8 <CIPAddress::operator!=(CIPAddress const&) const>
   1dc38:	e3500000 	cmp	r0, #0
   1dc3c:	0a00000a 	beq	1dc6c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd4>
   1dc40:	e1a00009 	mov	r0, r9
   1dc44:	eb000cd9 	bl	20fb0 <CIPAddress::IsBroadcast() const>
   1dc48:	e3500000 	cmp	r0, #0
   1dc4c:	1a000006 	bne	1dc6c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd4>
   1dc50:	e5950004 	ldr	r0, [r5, #4]
   1dc54:	eb000b97 	bl	20ab8 <CNetConfig::GetBroadcastAddress() const>
   1dc58:	e1a01000 	mov	r1, r0
   1dc5c:	e1a00009 	mov	r0, r9
   1dc60:	eb000c14 	bl	20cb8 <CIPAddress::operator!=(CIPAddress const&) const>
   1dc64:	e3500000 	cmp	r0, #0
   1dc68:	1affffeb 	bne	1dc1c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x84>
   1dc6c:	e5d43004 	ldrb	r3, [r4, #4]
   1dc70:	e5d42005 	ldrb	r2, [r4, #5]
   1dc74:	e1833402 	orr	r3, r3, r2, lsl #8
   1dc78:	e6bf3fb3 	rev16	r3, r3
   1dc7c:	e6ff3073 	uxth	r3, r3
   1dc80:	e1570003 	cmp	r7, r3
   1dc84:	3a000010 	bcc	1dccc <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x134>
   1dc88:	e5d43006 	ldrb	r3, [r4, #6]
   1dc8c:	e5d42007 	ldrb	r2, [r4, #7]
   1dc90:	e1933402 	orrs	r3, r3, r2, lsl #8
   1dc94:	0a00000f 	beq	1dcd8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x140>
   1dc98:	e285001c 	add	r0, r5, #28
   1dc9c:	e1a01006 	mov	r1, r6
   1dca0:	e58d0004 	str	r0, [sp, #4]
   1dca4:	eb000e08 	bl	214cc <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1dca8:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   1dcac:	e59d0004 	ldr	r0, [sp, #4]
   1dcb0:	eb000e09 	bl	214dc <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1dcb4:	e1a02007 	mov	r2, r7
   1dcb8:	e1a01004 	mov	r1, r4
   1dcbc:	e59d0004 	ldr	r0, [sp, #4]
   1dcc0:	eb000e30 	bl	21588 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1dcc4:	e3500000 	cmp	r0, #0
   1dcc8:	0a000002 	beq	1dcd8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x140>
   1dccc:	e3e00000 	mvn	r0, #0
   1dcd0:	e28dd00c 	add	sp, sp, #12
   1dcd4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1dcd8:	e5d53040 	ldrb	r3, [r5, #64]	; 0x40
   1dcdc:	e3530000 	cmp	r3, #0
   1dce0:	1a00000c 	bne	1dd18 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x180>
   1dce4:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
   1dce8:	eb000cb0 	bl	20fb0 <CIPAddress::IsBroadcast() const>
   1dcec:	e3500000 	cmp	r0, #0
   1dcf0:	1a000006 	bne	1dd10 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x178>
   1dcf4:	e5950004 	ldr	r0, [r5, #4]
   1dcf8:	eb000b6e 	bl	20ab8 <CNetConfig::GetBroadcastAddress() const>
   1dcfc:	e1a01000 	mov	r1, r0
   1dd00:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
   1dd04:	eb000bd3 	bl	20c58 <CIPAddress::operator==(CIPAddress const&) const>
   1dd08:	e3500000 	cmp	r0, #0
   1dd0c:	0a000001 	beq	1dd18 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x180>
   1dd10:	e3a00001 	mov	r0, #1
   1dd14:	eaffffc1 	b	1dc20 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x88>
   1dd18:	e3a00006 	mov	r0, #6
   1dd1c:	eb00345f 	bl	2aea0 <operator new(unsigned int)>
   1dd20:	e1a09000 	mov	r9, r0
   1dd24:	e1a00006 	mov	r0, r6
   1dd28:	e1a01009 	mov	r1, r9
   1dd2c:	eb000c7a 	bl	20f1c <CIPAddress::CopyTo(unsigned char*) const>
   1dd30:	e1a03009 	mov	r3, r9
   1dd34:	e2472008 	sub	r2, r7, #8
   1dd38:	e2841008 	add	r1, r4, #8
   1dd3c:	e285002c 	add	r0, r5, #44	; 0x2c
   1dd40:	e1c980b4 	strh	r8, [r9, #4]
   1dd44:	eb000d36 	bl	21224 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1dd48:	e2850038 	add	r0, r5, #56	; 0x38
   1dd4c:	eb0019c9 	bl	24478 <CSynchronizationEvent::Set()>
   1dd50:	e3a00001 	mov	r0, #1
   1dd54:	eaffffb1 	b	1dc20 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x88>
   1dd58:	e59f2008 	ldr	r2, [pc, #8]	; 1dd68 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d0>
   1dd5c:	e59f1008 	ldr	r1, [pc, #8]	; 1dd6c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d4>
   1dd60:	e59f0008 	ldr	r0, [pc, #8]	; 1dd70 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   1dd64:	eb001a46 	bl	24684 <assertion_failed>
   1dd68:	0000015e 	.word	0x0000015e
   1dd6c:	00043984 	.word	0x00043984
   1dd70:	000432d0 	.word	0x000432d0

0001dd74 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1dd74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1dd78:	e59d1020 	ldr	r1, [sp, #32]
   1dd7c:	e1a05003 	mov	r5, r3
   1dd80:	e3510011 	cmp	r1, #17
   1dd84:	e1dd71b8 	ldrh	r7, [sp, #24]
   1dd88:	e1dd31bc 	ldrh	r3, [sp, #28]
   1dd8c:	1a000013 	bne	1dde0 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   1dd90:	e1a06002 	mov	r6, r2
   1dd94:	e1d021b6 	ldrh	r2, [r0, #22]
   1dd98:	e1a04000 	mov	r4, r0
   1dd9c:	e1520003 	cmp	r2, r3
   1dda0:	1a00000e 	bne	1dde0 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   1dda4:	e5900004 	ldr	r0, [r0, #4]
   1dda8:	e3500000 	cmp	r0, #0
   1ddac:	0a000018 	beq	1de14 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1ddb0:	eb000b36 	bl	20a90 <CNetConfig::GetIPAddress() const>
   1ddb4:	e1a01000 	mov	r1, r0
   1ddb8:	e1a00005 	mov	r0, r5
   1ddbc:	eb000bbd 	bl	20cb8 <CIPAddress::operator!=(CIPAddress const&) const>
   1ddc0:	e3500000 	cmp	r0, #0
   1ddc4:	1a000005 	bne	1dde0 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   1ddc8:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1ddcc:	e3530000 	cmp	r3, #0
   1ddd0:	0a000009 	beq	1ddfc <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x88>
   1ddd4:	e1d431b4 	ldrh	r3, [r4, #20]
   1ddd8:	e1530007 	cmp	r3, r7
   1dddc:	0a000001 	beq	1dde8 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x74>
   1dde0:	e3a00000 	mov	r0, #0
   1dde4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1dde8:	e1a01006 	mov	r1, r6
   1ddec:	e284000c 	add	r0, r4, #12
   1ddf0:	eb000bb0 	bl	20cb8 <CIPAddress::operator!=(CIPAddress const&) const>
   1ddf4:	e3500000 	cmp	r0, #0
   1ddf8:	1afffff8 	bne	1dde0 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   1ddfc:	e3e03000 	mvn	r3, #0
   1de00:	e2840038 	add	r0, r4, #56	; 0x38
   1de04:	e5843044 	str	r3, [r4, #68]	; 0x44
   1de08:	eb00199a 	bl	24478 <CSynchronizationEvent::Set()>
   1de0c:	e3a00001 	mov	r0, #1
   1de10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1de14:	e59f2008 	ldr	r2, [pc, #8]	; 1de24 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb0>
   1de18:	e59f1008 	ldr	r1, [pc, #8]	; 1de28 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb4>
   1de1c:	e59f0008 	ldr	r0, [pc, #8]	; 1de2c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb8>
   1de20:	eb001a17 	bl	24684 <assertion_failed>
   1de24:	000001a7 	.word	0x000001a7
   1de28:	00043984 	.word	0x00043984
   1de2c:	000432d0 	.word	0x000432d0

0001de30 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1de30:	e3a0c011 	mov	ip, #17
   1de34:	e92d4010 	push	{r4, lr}
   1de38:	e24dd010 	sub	sp, sp, #16
   1de3c:	e1dde1b8 	ldrh	lr, [sp, #24]
   1de40:	e58dc008 	str	ip, [sp, #8]
   1de44:	e1ddc1bc 	ldrh	ip, [sp, #28]
   1de48:	e58de000 	str	lr, [sp]
   1de4c:	e58dc004 	str	ip, [sp, #4]
   1de50:	e1a04000 	mov	r4, r0
   1de54:	ebfffd25 	bl	1d2f0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1de58:	e3a03001 	mov	r3, #1
   1de5c:	e59f2034 	ldr	r2, [pc, #52]	; 1de98 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x68>
   1de60:	e5c43029 	strb	r3, [r4, #41]	; 0x29
   1de64:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1de68:	e5842000 	str	r2, [r4]
   1de6c:	e284002c 	add	r0, r4, #44	; 0x2c
   1de70:	eb000cae 	bl	21130 <CNetQueue::CNetQueue()>
   1de74:	e3a01000 	mov	r1, #0
   1de78:	e2840038 	add	r0, r4, #56	; 0x38
   1de7c:	eb00196a 	bl	2442c <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1de80:	e3a03000 	mov	r3, #0
   1de84:	e1a00004 	mov	r0, r4
   1de88:	e5c43040 	strb	r3, [r4, #64]	; 0x40
   1de8c:	e5843044 	str	r3, [r4, #68]	; 0x44
   1de90:	e28dd010 	add	sp, sp, #16
   1de94:	e8bd8010 	pop	{r4, pc}
   1de98:	000439b4 	.word	0x000439b4

0001de9c <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1de9c:	e3a0c011 	mov	ip, #17
   1dea0:	e92d4030 	push	{r4, r5, lr}
   1dea4:	e24dd00c 	sub	sp, sp, #12
   1dea8:	e58dc000 	str	ip, [sp]
   1deac:	e1a04000 	mov	r4, r0
   1deb0:	e3a05000 	mov	r5, #0
   1deb4:	ebfffd39 	bl	1d3a0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1deb8:	e3a02001 	mov	r2, #1
   1debc:	e59f3030 	ldr	r3, [pc, #48]	; 1def4 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0x58>
   1dec0:	e5c42029 	strb	r2, [r4, #41]	; 0x29
   1dec4:	e5843000 	str	r3, [r4]
   1dec8:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   1decc:	e284002c 	add	r0, r4, #44	; 0x2c
   1ded0:	eb000c96 	bl	21130 <CNetQueue::CNetQueue()>
   1ded4:	e1a01005 	mov	r1, r5
   1ded8:	e2840038 	add	r0, r4, #56	; 0x38
   1dedc:	eb001952 	bl	2442c <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1dee0:	e1a00004 	mov	r0, r4
   1dee4:	e5c45040 	strb	r5, [r4, #64]	; 0x40
   1dee8:	e5845044 	str	r5, [r4, #68]	; 0x44
   1deec:	e28dd00c 	add	sp, sp, #12
   1def0:	e8bd8030 	pop	{r4, r5, pc}
   1def4:	000439b4 	.word	0x000439b4

0001def8 <CTCPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1def8:	e590c000 	ldr	ip, [r0]
   1defc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1df00:	e59ce014 	ldr	lr, [ip, #20]
   1df04:	e1a0c00e 	mov	ip, lr
   1df08:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1df0c:	e12fff1c 	bx	ip

0001df10 <CTCPConnection::SetOptionBroadcast(bool)>:
   1df10:	e3a00000 	mov	r0, #0
   1df14:	e12fff1e 	bx	lr

0001df18 <CTCPConnection::IsConnected() const>:
   1df18:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1df1c:	e3530002 	cmp	r3, #2
   1df20:	9a000003 	bls	1df34 <CTCPConnection::IsConnected() const+0x1c>
   1df24:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   1df28:	e250000a 	subs	r0, r0, #10
   1df2c:	13a00001 	movne	r0, #1
   1df30:	e12fff1e 	bx	lr
   1df34:	e3a00000 	mov	r0, #0
   1df38:	e12fff1e 	bx	lr

0001df3c <CTCPConnection::IsTerminated() const>:
   1df3c:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   1df40:	e16f0f10 	clz	r0, r0
   1df44:	e1a002a0 	lsr	r0, r0, #5
   1df48:	e12fff1e 	bx	lr

0001df4c <CTCPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1df4c:	e590c000 	ldr	ip, [r0]
   1df50:	e92d4070 	push	{r4, r5, r6, lr}
   1df54:	e1a05003 	mov	r5, r3
   1df58:	e59c3018 	ldr	r3, [ip, #24]
   1df5c:	e1a04000 	mov	r4, r0
   1df60:	e12fff33 	blx	r3
   1df64:	e3500000 	cmp	r0, #0
   1df68:	d8bd8070 	pople	{r4, r5, r6, pc}
   1df6c:	e59d3010 	ldr	r3, [sp, #16]
   1df70:	e2532000 	subs	r2, r3, #0
   1df74:	13a02001 	movne	r2, #1
   1df78:	e3550000 	cmp	r5, #0
   1df7c:	11a00002 	movne	r0, r2
   1df80:	03a00000 	moveq	r0, #0
   1df84:	e3500000 	cmp	r0, #0
   1df88:	08bd8070 	popeq	{r4, r5, r6, pc}
   1df8c:	e1a00005 	mov	r0, r5
   1df90:	e284100c 	add	r1, r4, #12
   1df94:	eb000bb4 	bl	20e6c <CIPAddress::Set(CIPAddress const&)>
   1df98:	e1d431b4 	ldrh	r3, [r4, #20]
   1df9c:	e59d2010 	ldr	r2, [sp, #16]
   1dfa0:	e3a00000 	mov	r0, #0
   1dfa4:	e1c230b0 	strh	r3, [r2]
   1dfa8:	e8bd8070 	pop	{r4, r5, r6, pc}

0001dfac <CTCPConnection::Send(void const*, unsigned int, int)>:
   1dfac:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1dfb0:	e1a08003 	mov	r8, r3
   1dfb4:	e3d83040 	bics	r3, r8, #64	; 0x40
   1dfb8:	e24dd00c 	sub	sp, sp, #12
   1dfbc:	1a00000d 	bne	1dff8 <CTCPConnection::Send(void const*, unsigned int, int)+0x4c>
   1dfc0:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1dfc4:	e1a07000 	mov	r7, r0
   1dfc8:	e3530000 	cmp	r3, #0
   1dfcc:	ba00002a 	blt	1e07c <CTCPConnection::Send(void const*, unsigned int, int)+0xd0>
   1dfd0:	e1a06002 	mov	r6, r2
   1dfd4:	e5d0202a 	ldrb	r2, [r0, #42]	; 0x2a
   1dfd8:	e1a04001 	mov	r4, r1
   1dfdc:	e352000a 	cmp	r2, #10
   1dfe0:	e6ef2072 	uxtb	r2, r2
   1dfe4:	8a000006 	bhi	1e004 <CTCPConnection::Send(void const*, unsigned int, int)+0x58>
   1dfe8:	e3a0c001 	mov	ip, #1
   1dfec:	e59f10cc 	ldr	r1, [pc, #204]	; 1e0c0 <CTCPConnection::Send(void const*, unsigned int, int)+0x114>
   1dff0:	e011321c 	ands	r3, r1, ip, lsl r2
   1dff4:	0a000002 	beq	1e004 <CTCPConnection::Send(void const*, unsigned int, int)+0x58>
   1dff8:	e3e00000 	mvn	r0, #0
   1dffc:	e28dd00c 	add	sp, sp, #12
   1e000:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e004:	e3540000 	cmp	r4, #0
   1e008:	0a000025 	beq	1e0a4 <CTCPConnection::Send(void const*, unsigned int, int)+0xf8>
   1e00c:	e3560d19 	cmp	r6, #1600	; 0x640
   1e010:	9a00001c 	bls	1e088 <CTCPConnection::Send(void const*, unsigned int, int)+0xdc>
   1e014:	e1a05006 	mov	r5, r6
   1e018:	e2879030 	add	r9, r7, #48	; 0x30
   1e01c:	e1a01004 	mov	r1, r4
   1e020:	e3a03000 	mov	r3, #0
   1e024:	e3a02d19 	mov	r2, #1600	; 0x640
   1e028:	e1a00009 	mov	r0, r9
   1e02c:	e2455d19 	sub	r5, r5, #1600	; 0x640
   1e030:	eb000c7b 	bl	21224 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1e034:	e3550d19 	cmp	r5, #1600	; 0x640
   1e038:	e2844d19 	add	r4, r4, #1600	; 0x640
   1e03c:	8afffff6 	bhi	1e01c <CTCPConnection::Send(void const*, unsigned int, int)+0x70>
   1e040:	e1a02005 	mov	r2, r5
   1e044:	e1a01004 	mov	r1, r4
   1e048:	e1a00009 	mov	r0, r9
   1e04c:	e3a03000 	mov	r3, #0
   1e050:	eb000c73 	bl	21224 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1e054:	e3180040 	tst	r8, #64	; 0x40
   1e058:	1a00000e 	bne	1e098 <CTCPConnection::Send(void const*, unsigned int, int)+0xec>
   1e05c:	e2870070 	add	r0, r7, #112	; 0x70
   1e060:	e58d0004 	str	r0, [sp, #4]
   1e064:	eb001900 	bl	2446c <CSynchronizationEvent::Clear()>
   1e068:	e59d0004 	ldr	r0, [sp, #4]
   1e06c:	eb00190f 	bl	244b0 <CSynchronizationEvent::Wait()>
   1e070:	e597302c 	ldr	r3, [r7, #44]	; 0x2c
   1e074:	e3530000 	cmp	r3, #0
   1e078:	aa000006 	bge	1e098 <CTCPConnection::Send(void const*, unsigned int, int)+0xec>
   1e07c:	e597002c 	ldr	r0, [r7, #44]	; 0x2c
   1e080:	e28dd00c 	add	sp, sp, #12
   1e084:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e088:	e3560000 	cmp	r6, #0
   1e08c:	1a000008 	bne	1e0b4 <CTCPConnection::Send(void const*, unsigned int, int)+0x108>
   1e090:	e3180040 	tst	r8, #64	; 0x40
   1e094:	0afffff0 	beq	1e05c <CTCPConnection::Send(void const*, unsigned int, int)+0xb0>
   1e098:	e1a00006 	mov	r0, r6
   1e09c:	e28dd00c 	add	sp, sp, #12
   1e0a0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e0a4:	e3a02d06 	mov	r2, #384	; 0x180
   1e0a8:	e59f1014 	ldr	r1, [pc, #20]	; 1e0c4 <CTCPConnection::Send(void const*, unsigned int, int)+0x118>
   1e0ac:	e59f0014 	ldr	r0, [pc, #20]	; 1e0c8 <CTCPConnection::Send(void const*, unsigned int, int)+0x11c>
   1e0b0:	eb001973 	bl	24684 <assertion_failed>
   1e0b4:	e1a05006 	mov	r5, r6
   1e0b8:	e2879030 	add	r9, r7, #48	; 0x30
   1e0bc:	eaffffdf 	b	1e040 <CTCPConnection::Send(void const*, unsigned int, int)+0x94>
   1e0c0:	00000763 	.word	0x00000763
   1e0c4:	000439f0 	.word	0x000439f0
   1e0c8:	0004334c 	.word	0x0004334c

0001e0cc <CTCPConnection::Receive(void*, int)>:
   1e0cc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e0d0:	e3d29040 	bics	r9, r2, #64	; 0x40
   1e0d4:	1a000012 	bne	1e124 <CTCPConnection::Receive(void*, int)+0x58>
   1e0d8:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1e0dc:	e1a04000 	mov	r4, r0
   1e0e0:	e3530000 	cmp	r3, #0
   1e0e4:	ba00001c 	blt	1e15c <CTCPConnection::Receive(void*, int)+0x90>
   1e0e8:	e1a07001 	mov	r7, r1
   1e0ec:	e2025040 	and	r5, r2, #64	; 0x40
   1e0f0:	e280803c 	add	r8, r0, #60	; 0x3c
   1e0f4:	e2806068 	add	r6, r0, #104	; 0x68
   1e0f8:	e3a02000 	mov	r2, #0
   1e0fc:	e1a01007 	mov	r1, r7
   1e100:	e1a00008 	mov	r0, r8
   1e104:	eb000c8c 	bl	2133c <CNetQueue::Dequeue(void*, void**)>
   1e108:	e3500000 	cmp	r0, #0
   1e10c:	1a000015 	bne	1e168 <CTCPConnection::Receive(void*, int)+0x9c>
   1e110:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1e114:	e3530001 	cmp	r3, #1
   1e118:	e6ef3073 	uxtb	r3, r3
   1e11c:	e2433005 	sub	r3, r3, #5
   1e120:	8a000002 	bhi	1e130 <CTCPConnection::Receive(void*, int)+0x64>
   1e124:	e3e09000 	mvn	r9, #0
   1e128:	e1a00009 	mov	r0, r9
   1e12c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e130:	e3530005 	cmp	r3, #5
   1e134:	9afffffa 	bls	1e124 <CTCPConnection::Receive(void*, int)+0x58>
   1e138:	e3550000 	cmp	r5, #0
   1e13c:	1afffff9 	bne	1e128 <CTCPConnection::Receive(void*, int)+0x5c>
   1e140:	e1a00006 	mov	r0, r6
   1e144:	eb0018c8 	bl	2446c <CSynchronizationEvent::Clear()>
   1e148:	e1a00006 	mov	r0, r6
   1e14c:	eb0018d7 	bl	244b0 <CSynchronizationEvent::Wait()>
   1e150:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e154:	e3530000 	cmp	r3, #0
   1e158:	aaffffe6 	bge	1e0f8 <CTCPConnection::Receive(void*, int)+0x2c>
   1e15c:	e594902c 	ldr	r9, [r4, #44]	; 0x2c
   1e160:	e1a00009 	mov	r0, r9
   1e164:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e168:	e1a09000 	mov	r9, r0
   1e16c:	e1a00009 	mov	r0, r9
   1e170:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0001e174 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1e174:	e3a0c006 	mov	ip, #6
   1e178:	e92d4070 	push	{r4, r5, r6, lr}
   1e17c:	e1a04000 	mov	r4, r0
   1e180:	e3a05000 	mov	r5, #0
   1e184:	e3a06001 	mov	r6, #1
   1e188:	e24dd008 	sub	sp, sp, #8
   1e18c:	e58dc000 	str	ip, [sp]
   1e190:	ebfffc82 	bl	1d3a0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1e194:	e59f30b0 	ldr	r3, [pc, #176]	; 1e24c <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xd8>
   1e198:	e5c4602a 	strb	r6, [r4, #42]	; 0x2a
   1e19c:	e5843000 	str	r3, [r4]
   1e1a0:	e5c45029 	strb	r5, [r4, #41]	; 0x29
   1e1a4:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1e1a8:	e2840030 	add	r0, r4, #48	; 0x30
   1e1ac:	eb000bdf 	bl	21130 <CNetQueue::CNetQueue()>
   1e1b0:	e284003c 	add	r0, r4, #60	; 0x3c
   1e1b4:	eb000bdd 	bl	21130 <CNetQueue::CNetQueue()>
   1e1b8:	e3a01801 	mov	r1, #65536	; 0x10000
   1e1bc:	e2840048 	add	r0, r4, #72	; 0x48
   1e1c0:	eb0007b3 	bl	20094 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1e1c4:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   1e1c8:	e1a01005 	mov	r1, r5
   1e1cc:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   1e1d0:	e2840068 	add	r0, r4, #104	; 0x68
   1e1d4:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1e1d8:	e5845060 	str	r5, [r4, #96]	; 0x60
   1e1dc:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1e1e0:	eb001891 	bl	2442c <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e1e4:	e1a01005 	mov	r1, r5
   1e1e8:	e2840070 	add	r0, r4, #112	; 0x70
   1e1ec:	eb00188e 	bl	2442c <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e1f0:	eb002eef 	bl	29db4 <CTimer::Get()>
   1e1f4:	e3a02f86 	mov	r2, #536	; 0x218
   1e1f8:	e59f3050 	ldr	r3, [pc, #80]	; 1e250 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xdc>
   1e1fc:	e5840078 	str	r0, [r4, #120]	; 0x78
   1e200:	e1c42bb4 	strh	r2, [r4, #180]	; 0xb4
   1e204:	e5843094 	str	r3, [r4, #148]	; 0x94
   1e208:	e58430ac 	str	r3, [r4, #172]	; 0xac
   1e20c:	e5846088 	str	r6, [r4, #136]	; 0x88
   1e210:	e1c459b8 	strh	r5, [r4, #152]	; 0x98
   1e214:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   1e218:	e58450b0 	str	r5, [r4, #176]	; 0xb0
   1e21c:	e28400b8 	add	r0, r4, #184	; 0xb8
   1e220:	eb000887 	bl	20444 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1e224:	e1a00004 	mov	r0, r4
   1e228:	e59f2024 	ldr	r2, [pc, #36]	; 1e254 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xe0>
   1e22c:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1e230:	e5923000 	ldr	r3, [r2]
   1e234:	e5845080 	str	r5, [r4, #128]	; 0x80
   1e238:	e0833006 	add	r3, r3, r6
   1e23c:	e5845084 	str	r5, [r4, #132]	; 0x84
   1e240:	e5823000 	str	r3, [r2]
   1e244:	e28dd008 	add	sp, sp, #8
   1e248:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e24c:	00043c20 	.word	0x00043c20
   1e250:	00003908 	.word	0x00003908
   1e254:	0004da8c 	.word	0x0004da8c

0001e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>:
   1e258:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e25c:	e2017c02 	and	r7, r1, #512	; 0x200
   1e260:	e3570000 	cmp	r7, #0
   1e264:	03a05014 	moveq	r5, #20
   1e268:	13a05018 	movne	r5, #24
   1e26c:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1e270:	e24dd00c 	sub	sp, sp, #12
   1e274:	e59de674 	ldr	lr, [sp, #1652]	; 0x674
   1e278:	03a0b005 	moveq	fp, #5
   1e27c:	13a0b006 	movne	fp, #6
   1e280:	e095600e 	adds	r6, r5, lr
   1e284:	e59da670 	ldr	sl, [sp, #1648]	; 0x670
   1e288:	2a00003d 	bcs	1e384 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x12c>
   1e28c:	e1d091b6 	ldrh	r9, [r0, #22]
   1e290:	e1d081b4 	ldrh	r8, [r0, #20]
   1e294:	e6bfcf32 	rev	ip, r2
   1e298:	e6bf9fb9 	rev16	r9, r9
   1e29c:	e6bf2fb8 	rev16	r2, r8
   1e2a0:	e58dc00c 	str	ip, [sp, #12]
   1e2a4:	e211ca01 	ands	ip, r1, #4096	; 0x1000
   1e2a8:	e1a04000 	mov	r4, r0
   1e2ac:	e1cd90b8 	strh	r9, [sp, #8]
   1e2b0:	e1cd20ba 	strh	r2, [sp, #10]
   1e2b4:	1a000028 	bne	1e35c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x104>
   1e2b8:	e1d439b8 	ldrh	r3, [r4, #152]	; 0x98
   1e2bc:	e3570000 	cmp	r7, #0
   1e2c0:	e6bf3fb3 	rev16	r3, r3
   1e2c4:	e59420ac 	ldr	r2, [r4, #172]	; 0xac
   1e2c8:	e1cd31ba 	strh	r3, [sp, #26]
   1e2cc:	159f30c0 	ldrne	r3, [pc, #192]	; 1e394 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x13c>
   1e2d0:	e181020b 	orr	r0, r1, fp, lsl #4
   1e2d4:	e6bf2fb2 	rev16	r2, r2
   1e2d8:	158d301c 	strne	r3, [sp, #28]
   1e2dc:	e35e0000 	cmp	lr, #0
   1e2e0:	e1cd01b4 	strh	r0, [sp, #20]
   1e2e4:	e58dc010 	str	ip, [sp, #16]
   1e2e8:	e1cd21b6 	strh	r2, [sp, #22]
   1e2ec:	0a000006 	beq	1e30c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0xb4>
   1e2f0:	e35a0000 	cmp	sl, #0
   1e2f4:	0a00001e 	beq	1e374 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x11c>
   1e2f8:	e28d3008 	add	r3, sp, #8
   1e2fc:	e1a0200e 	mov	r2, lr
   1e300:	e1a0100a 	mov	r1, sl
   1e304:	e0830005 	add	r0, r3, r5
   1e308:	eb0030fe 	bl	2a708 <memcpy>
   1e30c:	e3a03000 	mov	r3, #0
   1e310:	e1a02006 	mov	r2, r6
   1e314:	e28d1008 	add	r1, sp, #8
   1e318:	e284001c 	add	r0, r4, #28
   1e31c:	e1cd31b8 	strh	r3, [sp, #24]
   1e320:	eb000c98 	bl	21588 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1e324:	e594c008 	ldr	ip, [r4, #8]
   1e328:	e1cd01b8 	strh	r0, [sp, #24]
   1e32c:	e35c0000 	cmp	ip, #0
   1e330:	0a00000b 	beq	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x10c>
   1e334:	e3a0e006 	mov	lr, #6
   1e338:	e1a03006 	mov	r3, r6
   1e33c:	e1a0000c 	mov	r0, ip
   1e340:	e28d2008 	add	r2, sp, #8
   1e344:	e284100c 	add	r1, r4, #12
   1e348:	e58de000 	str	lr, [sp]
   1e34c:	ebfff240 	bl	1ac54 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1e350:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1e354:	e28dd00c 	add	sp, sp, #12
   1e358:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e35c:	e6bfcf33 	rev	ip, r3
   1e360:	eaffffd4 	b	1e2b8 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x60>
   1e364:	e59f202c 	ldr	r2, [pc, #44]	; 1e398 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x140>
   1e368:	e59f102c 	ldr	r1, [pc, #44]	; 1e39c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x144>
   1e36c:	e59f002c 	ldr	r0, [pc, #44]	; 1e3a0 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x148>
   1e370:	eb0018c3 	bl	24684 <assertion_failed>
   1e374:	e59f2028 	ldr	r2, [pc, #40]	; 1e3a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x14c>
   1e378:	e59f101c 	ldr	r1, [pc, #28]	; 1e39c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x144>
   1e37c:	e59f0024 	ldr	r0, [pc, #36]	; 1e3a8 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x150>
   1e380:	eb0018bf 	bl	24684 <assertion_failed>
   1e384:	e59f2020 	ldr	r2, [pc, #32]	; 1e3ac <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x154>
   1e388:	e59f100c 	ldr	r1, [pc, #12]	; 1e39c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x144>
   1e38c:	e59f001c 	ldr	r0, [pc, #28]	; 1e3b0 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x158>
   1e390:	eb0018bb 	bl	24684 <assertion_failed>
   1e394:	b4050402 	.word	0xb4050402
   1e398:	00000587 	.word	0x00000587
   1e39c:	000439f0 	.word	0x000439f0
   1e3a0:	000432e4 	.word	0x000432e4
   1e3a4:	00000571 	.word	0x00000571
   1e3a8:	0004334c 	.word	0x0004334c
   1e3ac:	00000557 	.word	0x00000557
   1e3b0:	00043a04 	.word	0x00043a04

0001e3b4 <CTCPConnection::ScanOptions(TTCPHeader*)>:
   1e3b4:	e3510000 	cmp	r1, #0
   1e3b8:	e92d4010 	push	{r4, lr}
   1e3bc:	0a000029 	beq	1e468 <CTCPConnection::ScanOptions(TTCPHeader*)+0xb4>
   1e3c0:	e5d1200c 	ldrb	r2, [r1, #12]
   1e3c4:	e2813016 	add	r3, r1, #22
   1e3c8:	e1a02222 	lsr	r2, r2, #4
   1e3cc:	e0812102 	add	r2, r1, r2, lsl #2
   1e3d0:	e1520003 	cmp	r2, r3
   1e3d4:	e2811014 	add	r1, r1, #20
   1e3d8:	38bd8010 	popcc	{r4, pc}
   1e3dc:	e5d13000 	ldrb	r3, [r1]
   1e3e0:	e59fe090 	ldr	lr, [pc, #144]	; 1e478 <CTCPConnection::ScanOptions(TTCPHeader*)+0xc4>
   1e3e4:	e3530001 	cmp	r3, #1
   1e3e8:	0a00000b 	beq	1e41c <CTCPConnection::ScanOptions(TTCPHeader*)+0x68>
   1e3ec:	e3530002 	cmp	r3, #2
   1e3f0:	0a00000b 	beq	1e424 <CTCPConnection::ScanOptions(TTCPHeader*)+0x70>
   1e3f4:	e3530000 	cmp	r3, #0
   1e3f8:	08bd8010 	popeq	{r4, pc}
   1e3fc:	e5d13001 	ldrb	r3, [r1, #1]
   1e400:	e0811003 	add	r1, r1, r3
   1e404:	e2813002 	add	r3, r1, #2
   1e408:	e1520003 	cmp	r2, r3
   1e40c:	38bd8010 	popcc	{r4, pc}
   1e410:	e5d13000 	ldrb	r3, [r1]
   1e414:	e3530001 	cmp	r3, #1
   1e418:	1afffff3 	bne	1e3ec <CTCPConnection::ScanOptions(TTCPHeader*)+0x38>
   1e41c:	e2811001 	add	r1, r1, #1
   1e420:	eafffff7 	b	1e404 <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1e424:	e5d13001 	ldrb	r3, [r1, #1]
   1e428:	e3530004 	cmp	r3, #4
   1e42c:	1afffff3 	bne	1e400 <CTCPConnection::ScanOptions(TTCPHeader*)+0x4c>
   1e430:	e281c004 	add	ip, r1, #4
   1e434:	e152000c 	cmp	r2, ip
   1e438:	3afffff0 	bcc	1e400 <CTCPConnection::ScanOptions(TTCPHeader*)+0x4c>
   1e43c:	e1d1c0b2 	ldrh	ip, [r1, #2]
   1e440:	e6bfcfbc 	rev16	ip, ip
   1e444:	e6ffc07c 	uxth	ip, ip
   1e448:	e28cc014 	add	ip, ip, #20
   1e44c:	e15c000e 	cmp	ip, lr
   1e450:	21a0c00e 	movcs	ip, lr
   1e454:	e24cc014 	sub	ip, ip, #20
   1e458:	e35c0009 	cmp	ip, #9
   1e45c:	9affffe7 	bls	1e400 <CTCPConnection::ScanOptions(TTCPHeader*)+0x4c>
   1e460:	e1c0cbb4 	strh	ip, [r0, #180]	; 0xb4
   1e464:	eaffffe4 	b	1e3fc <CTCPConnection::ScanOptions(TTCPHeader*)+0x48>
   1e468:	e59f200c 	ldr	r2, [pc, #12]	; 1e47c <CTCPConnection::ScanOptions(TTCPHeader*)+0xc8>
   1e46c:	e59f100c 	ldr	r1, [pc, #12]	; 1e480 <CTCPConnection::ScanOptions(TTCPHeader*)+0xcc>
   1e470:	e59f000c 	ldr	r0, [pc, #12]	; 1e484 <CTCPConnection::ScanOptions(TTCPHeader*)+0xd0>
   1e474:	eb001882 	bl	24684 <assertion_failed>
   1e478:	000005c8 	.word	0x000005c8
   1e47c:	0000058d 	.word	0x0000058d
   1e480:	000439f0 	.word	0x000439f0
   1e484:	00043a24 	.word	0x00043a24

0001e488 <CTCPConnection::CalculateISN()>:
   1e488:	e92d4070 	push	{r4, r5, r6, lr}
   1e48c:	e1a05000 	mov	r5, r0
   1e490:	e5900078 	ldr	r0, [r0, #120]	; 0x78
   1e494:	e3500000 	cmp	r0, #0
   1e498:	0a00000f 	beq	1e4dc <CTCPConnection::CalculateISN()+0x54>
   1e49c:	eb002b96 	bl	292fc <CTimer::GetTime() const>
   1e4a0:	e1a04000 	mov	r4, r0
   1e4a4:	e5950078 	ldr	r0, [r5, #120]	; 0x78
   1e4a8:	eb002b8f 	bl	292ec <CTimer::GetTicks() const>
   1e4ac:	e59f3038 	ldr	r3, [pc, #56]	; 1e4ec <CTCPConnection::CalculateISN()+0x64>
   1e4b0:	e0844104 	add	r4, r4, r4, lsl #2
   1e4b4:	e0832093 	umull	r2, r3, r3, r0
   1e4b8:	e1a032a3 	lsr	r3, r3, #5
   1e4bc:	e0833103 	add	r3, r3, r3, lsl #2
   1e4c0:	e0833103 	add	r3, r3, r3, lsl #2
   1e4c4:	e0844104 	add	r4, r4, r4, lsl #2
   1e4c8:	e0400103 	sub	r0, r0, r3, lsl #2
   1e4cc:	e0800104 	add	r0, r0, r4, lsl #2
   1e4d0:	e0800080 	add	r0, r0, r0, lsl #1
   1e4d4:	e0600180 	rsb	r0, r0, r0, lsl #3
   1e4d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e4dc:	e59f200c 	ldr	r2, [pc, #12]	; 1e4f0 <CTCPConnection::CalculateISN()+0x68>
   1e4e0:	e59f100c 	ldr	r1, [pc, #12]	; 1e4f4 <CTCPConnection::CalculateISN()+0x6c>
   1e4e4:	e59f000c 	ldr	r0, [pc, #12]	; 1e4f8 <CTCPConnection::CalculateISN()+0x70>
   1e4e8:	eb001865 	bl	24684 <assertion_failed>
   1e4ec:	51eb851f 	.word	0x51eb851f
   1e4f0:	000005b6 	.word	0x000005b6
   1e4f4:	000439f0 	.word	0x000439f0
   1e4f8:	0003ea88 	.word	0x0003ea88

0001e4fc <CTCPConnection::StopTimer(unsigned int)>:
   1e4fc:	e3510002 	cmp	r1, #2
   1e500:	e92d4070 	push	{r4, r5, r6, lr}
   1e504:	8a00001c 	bhi	1e57c <CTCPConnection::StopTimer(unsigned int)+0x80>
   1e508:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   1e50c:	e1a05000 	mov	r5, r0
   1e510:	e3530000 	cmp	r3, #0
   1e514:	0a00001c 	beq	1e58c <CTCPConnection::StopTimer(unsigned int)+0x90>
   1e518:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   1e51c:	e281401e 	add	r4, r1, #30
   1e520:	e3500000 	cmp	r0, #0
   1e524:	1a00000d 	bne	1e560 <CTCPConnection::StopTimer(unsigned int)+0x64>
   1e528:	e0852104 	add	r2, r5, r4, lsl #2
   1e52c:	e5921004 	ldr	r1, [r2, #4]
   1e530:	e3510000 	cmp	r1, #0
   1e534:	08bd8070 	popeq	{r4, r5, r6, pc}
   1e538:	e1a00003 	mov	r0, r3
   1e53c:	eb002cac 	bl	297f4 <CTimer::CancelKernelTimer(unsigned int)>
   1e540:	e3a03000 	mov	r3, #0
   1e544:	e0851104 	add	r1, r5, r4, lsl #2
   1e548:	e5813004 	str	r3, [r1, #4]
   1e54c:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   1e550:	e3530000 	cmp	r3, #0
   1e554:	08bd8070 	popeq	{r4, r5, r6, pc}
   1e558:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e55c:	ea0035a6 	b	2bbfc <LeaveCritical>
   1e560:	eb00357b 	bl	2bb54 <EnterCritical>
   1e564:	e0853104 	add	r3, r5, r4, lsl #2
   1e568:	e5931004 	ldr	r1, [r3, #4]
   1e56c:	e3510000 	cmp	r1, #0
   1e570:	0afffff5 	beq	1e54c <CTCPConnection::StopTimer(unsigned int)+0x50>
   1e574:	e5953078 	ldr	r3, [r5, #120]	; 0x78
   1e578:	eaffffee 	b	1e538 <CTCPConnection::StopTimer(unsigned int)+0x3c>
   1e57c:	e59f2018 	ldr	r2, [pc, #24]	; 1e59c <CTCPConnection::StopTimer(unsigned int)+0xa0>
   1e580:	e59f1018 	ldr	r1, [pc, #24]	; 1e5a0 <CTCPConnection::StopTimer(unsigned int)+0xa4>
   1e584:	e59f0018 	ldr	r0, [pc, #24]	; 1e5a4 <CTCPConnection::StopTimer(unsigned int)+0xa8>
   1e588:	eb00183d 	bl	24684 <assertion_failed>
   1e58c:	e59f2014 	ldr	r2, [pc, #20]	; 1e5a8 <CTCPConnection::StopTimer(unsigned int)+0xac>
   1e590:	e59f1008 	ldr	r1, [pc, #8]	; 1e5a0 <CTCPConnection::StopTimer(unsigned int)+0xa4>
   1e594:	e59f0010 	ldr	r0, [pc, #16]	; 1e5ac <CTCPConnection::StopTimer(unsigned int)+0xb0>
   1e598:	eb001839 	bl	24684 <assertion_failed>
   1e59c:	000005c9 	.word	0x000005c9
   1e5a0:	000439f0 	.word	0x000439f0
   1e5a4:	00043a34 	.word	0x00043a34
   1e5a8:	000005ca 	.word	0x000005ca
   1e5ac:	0003ea88 	.word	0x0003ea88

0001e5b0 <CTCPConnection::~CTCPConnection()>:
   1e5b0:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1e5b4:	e59f30bc 	ldr	r3, [pc, #188]	; 1e678 <CTCPConnection::~CTCPConnection()+0xc8>
   1e5b8:	e21110ff 	ands	r1, r1, #255	; 0xff
   1e5bc:	e92d4070 	push	{r4, r5, r6, lr}
   1e5c0:	e5803000 	str	r3, [r0]
   1e5c4:	1a000023 	bne	1e658 <CTCPConnection::~CTCPConnection()+0xa8>
   1e5c8:	e1a04000 	mov	r4, r0
   1e5cc:	ebffffca 	bl	1e4fc <CTCPConnection::StopTimer(unsigned int)>
   1e5d0:	e3a01001 	mov	r1, #1
   1e5d4:	e1a00004 	mov	r0, r4
   1e5d8:	ebffffc7 	bl	1e4fc <CTCPConnection::StopTimer(unsigned int)>
   1e5dc:	e2845068 	add	r5, r4, #104	; 0x68
   1e5e0:	e3a01002 	mov	r1, #2
   1e5e4:	e1a00004 	mov	r0, r4
   1e5e8:	ebffffc3 	bl	1e4fc <CTCPConnection::StopTimer(unsigned int)>
   1e5ec:	e2846070 	add	r6, r4, #112	; 0x70
   1e5f0:	e1a00005 	mov	r0, r5
   1e5f4:	eb00179f 	bl	24478 <CSynchronizationEvent::Set()>
   1e5f8:	e1a00006 	mov	r0, r6
   1e5fc:	eb00179d 	bl	24478 <CSynchronizationEvent::Set()>
   1e600:	e59f2074 	ldr	r2, [pc, #116]	; 1e67c <CTCPConnection::~CTCPConnection()+0xcc>
   1e604:	e5923000 	ldr	r3, [r2]
   1e608:	e3530000 	cmp	r3, #0
   1e60c:	0a000015 	beq	1e668 <CTCPConnection::~CTCPConnection()+0xb8>
   1e610:	e2433001 	sub	r3, r3, #1
   1e614:	e28400b8 	add	r0, r4, #184	; 0xb8
   1e618:	e5823000 	str	r3, [r2]
   1e61c:	eb00079f 	bl	204a0 <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>
   1e620:	e1a00006 	mov	r0, r6
   1e624:	eb001784 	bl	2443c <CSynchronizationEvent::~CSynchronizationEvent()>
   1e628:	e1a00005 	mov	r0, r5
   1e62c:	eb001782 	bl	2443c <CSynchronizationEvent::~CSynchronizationEvent()>
   1e630:	e2840048 	add	r0, r4, #72	; 0x48
   1e634:	eb0006ab 	bl	200e8 <CRetransmissionQueue::~CRetransmissionQueue()>
   1e638:	e284003c 	add	r0, r4, #60	; 0x3c
   1e63c:	eb000af3 	bl	21210 <CNetQueue::~CNetQueue()>
   1e640:	e2840030 	add	r0, r4, #48	; 0x30
   1e644:	eb000af1 	bl	21210 <CNetQueue::~CNetQueue()>
   1e648:	e1a00004 	mov	r0, r4
   1e64c:	ebfffb7a 	bl	1d43c <CNetConnection::~CNetConnection()>
   1e650:	e1a00004 	mov	r0, r4
   1e654:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e658:	e3a020d1 	mov	r2, #209	; 0xd1
   1e65c:	e59f101c 	ldr	r1, [pc, #28]	; 1e680 <CTCPConnection::~CTCPConnection()+0xd0>
   1e660:	e59f001c 	ldr	r0, [pc, #28]	; 1e684 <CTCPConnection::~CTCPConnection()+0xd4>
   1e664:	eb001806 	bl	24684 <assertion_failed>
   1e668:	e3a020dc 	mov	r2, #220	; 0xdc
   1e66c:	e59f100c 	ldr	r1, [pc, #12]	; 1e680 <CTCPConnection::~CTCPConnection()+0xd0>
   1e670:	e59f0010 	ldr	r0, [pc, #16]	; 1e688 <CTCPConnection::~CTCPConnection()+0xd8>
   1e674:	eb001802 	bl	24684 <assertion_failed>
   1e678:	00043c20 	.word	0x00043c20
   1e67c:	0004da8c 	.word	0x0004da8c
   1e680:	000439f0 	.word	0x000439f0
   1e684:	00043a50 	.word	0x00043a50
   1e688:	00043a6c 	.word	0x00043a6c

0001e68c <CTCPConnection::~CTCPConnection()>:
   1e68c:	e92d4010 	push	{r4, lr}
   1e690:	e1a04000 	mov	r4, r0
   1e694:	ebffffc5 	bl	1e5b0 <CTCPConnection::~CTCPConnection()>
   1e698:	e1a00004 	mov	r0, r4
   1e69c:	e3a010e0 	mov	r1, #224	; 0xe0
   1e6a0:	eb00320c 	bl	2aed8 <operator delete(void*, unsigned int)>
   1e6a4:	e1a00004 	mov	r0, r4
   1e6a8:	e8bd8010 	pop	{r4, pc}

0001e6ac <CTCPConnection::Close()>:
   1e6ac:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1e6b0:	e92d4010 	push	{r4, lr}
   1e6b4:	e3530000 	cmp	r3, #0
   1e6b8:	e1a04000 	mov	r4, r0
   1e6bc:	ba00000e 	blt	1e6fc <CTCPConnection::Close()+0x50>
   1e6c0:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1e6c4:	e353000a 	cmp	r3, #10
   1e6c8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e6cc:	ea000017 	b	1e730 <CTCPConnection::Close()+0x84>
   1e6d0:	0001e704 	.word	0x0001e704
   1e6d4:	0001e768 	.word	0x0001e768
   1e6d8:	0001e768 	.word	0x0001e768
   1e6dc:	0001e744 	.word	0x0001e744
   1e6e0:	0001e744 	.word	0x0001e744
   1e6e4:	0001e730 	.word	0x0001e730
   1e6e8:	0001e730 	.word	0x0001e730
   1e6ec:	0001e70c 	.word	0x0001e70c
   1e6f0:	0001e704 	.word	0x0001e704
   1e6f4:	0001e704 	.word	0x0001e704
   1e6f8:	0001e704 	.word	0x0001e704
   1e6fc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e700:	e8bd8010 	pop	{r4, pc}
   1e704:	e3e00000 	mvn	r0, #0
   1e708:	e8bd8010 	pop	{r4, pc}
   1e70c:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   1e710:	e3530000 	cmp	r3, #0
   1e714:	1a00001c 	bne	1e78c <CTCPConnection::Close()+0xe0>
   1e718:	e3a01005 	mov	r1, #5
   1e71c:	e3a02009 	mov	r2, #9
   1e720:	e3a03001 	mov	r3, #1
   1e724:	e5801060 	str	r1, [r0, #96]	; 0x60
   1e728:	e5c0205f 	strb	r2, [r0, #95]	; 0x5f
   1e72c:	e5c0305e 	strb	r3, [r0, #94]	; 0x5e
   1e730:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e734:	e3530000 	cmp	r3, #0
   1e738:	baffffef 	blt	1e6fc <CTCPConnection::Close()+0x50>
   1e73c:	e3a00000 	mov	r0, #0
   1e740:	e8bd8010 	pop	{r4, pc}
   1e744:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   1e748:	e3530000 	cmp	r3, #0
   1e74c:	1a00000a 	bne	1e77c <CTCPConnection::Close()+0xd0>
   1e750:	e3a03005 	mov	r3, #5
   1e754:	e3a02001 	mov	r2, #1
   1e758:	e5803060 	str	r3, [r0, #96]	; 0x60
   1e75c:	e5c0305f 	strb	r3, [r0, #95]	; 0x5f
   1e760:	e5c0205e 	strb	r2, [r0, #94]	; 0x5e
   1e764:	eafffff1 	b	1e730 <CTCPConnection::Close()+0x84>
   1e768:	e3a01001 	mov	r1, #1
   1e76c:	ebffff62 	bl	1e4fc <CTCPConnection::StopTimer(unsigned int)>
   1e770:	e3a03000 	mov	r3, #0
   1e774:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1e778:	eaffffec 	b	1e730 <CTCPConnection::Close()+0x84>
   1e77c:	e3a02d05 	mov	r2, #320	; 0x140
   1e780:	e59f1014 	ldr	r1, [pc, #20]	; 1e79c <CTCPConnection::Close()+0xf0>
   1e784:	e59f0014 	ldr	r0, [pc, #20]	; 1e7a0 <CTCPConnection::Close()+0xf4>
   1e788:	eb0017bd 	bl	24684 <assertion_failed>
   1e78c:	e59f2010 	ldr	r2, [pc, #16]	; 1e7a4 <CTCPConnection::Close()+0xf8>
   1e790:	e59f1004 	ldr	r1, [pc, #4]	; 1e79c <CTCPConnection::Close()+0xf0>
   1e794:	e59f0004 	ldr	r0, [pc, #4]	; 1e7a0 <CTCPConnection::Close()+0xf4>
   1e798:	eb0017b9 	bl	24684 <assertion_failed>
   1e79c:	000439f0 	.word	0x000439f0
   1e7a0:	00043a80 	.word	0x00043a80
   1e7a4:	0000014b 	.word	0x0000014b

0001e7a8 <CTCPConnection::StartTimer(unsigned int, unsigned int)>:
   1e7a8:	e92d4070 	push	{r4, r5, r6, lr}
   1e7ac:	e3510002 	cmp	r1, #2
   1e7b0:	e24dd008 	sub	sp, sp, #8
   1e7b4:	8a000012 	bhi	1e804 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x5c>
   1e7b8:	e3520000 	cmp	r2, #0
   1e7bc:	e1a06002 	mov	r6, r2
   1e7c0:	0a000013 	beq	1e814 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x6c>
   1e7c4:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   1e7c8:	e1a04000 	mov	r4, r0
   1e7cc:	e3530000 	cmp	r3, #0
   1e7d0:	0a000013 	beq	1e824 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x7c>
   1e7d4:	e1a05001 	mov	r5, r1
   1e7d8:	ebffff47 	bl	1e4fc <CTCPConnection::StopTimer(unsigned int)>
   1e7dc:	e58d4000 	str	r4, [sp]
   1e7e0:	e1a01006 	mov	r1, r6
   1e7e4:	e1a03005 	mov	r3, r5
   1e7e8:	e59f2044 	ldr	r2, [pc, #68]	; 1e834 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x8c>
   1e7ec:	e5940078 	ldr	r0, [r4, #120]	; 0x78
   1e7f0:	eb002bad 	bl	296ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1e7f4:	e0841105 	add	r1, r4, r5, lsl #2
   1e7f8:	e581007c 	str	r0, [r1, #124]	; 0x7c
   1e7fc:	e28dd008 	add	sp, sp, #8
   1e800:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e804:	e59f202c 	ldr	r2, [pc, #44]	; 1e838 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x90>
   1e808:	e59f102c 	ldr	r1, [pc, #44]	; 1e83c <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e80c:	e59f002c 	ldr	r0, [pc, #44]	; 1e840 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x98>
   1e810:	eb00179b 	bl	24684 <assertion_failed>
   1e814:	e59f2028 	ldr	r2, [pc, #40]	; 1e844 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x9c>
   1e818:	e59f101c 	ldr	r1, [pc, #28]	; 1e83c <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e81c:	e59f0024 	ldr	r0, [pc, #36]	; 1e848 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0xa0>
   1e820:	eb001797 	bl	24684 <assertion_failed>
   1e824:	e3a02d17 	mov	r2, #1472	; 0x5c0
   1e828:	e59f100c 	ldr	r1, [pc, #12]	; 1e83c <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e82c:	e59f0018 	ldr	r0, [pc, #24]	; 1e84c <CTCPConnection::StartTimer(unsigned int, unsigned int)+0xa4>
   1e830:	eb001793 	bl	24684 <assertion_failed>
   1e834:	00020044 	.word	0x00020044
   1e838:	000005be 	.word	0x000005be
   1e83c:	000439f0 	.word	0x000439f0
   1e840:	00043a34 	.word	0x00043a34
   1e844:	000005bf 	.word	0x000005bf
   1e848:	00043a90 	.word	0x00043a90
   1e84c:	0003ea88 	.word	0x0003ea88

0001e850 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1e850:	e3a0c006 	mov	ip, #6
   1e854:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1e858:	e1a04000 	mov	r4, r0
   1e85c:	e3a05000 	mov	r5, #0
   1e860:	e3a06001 	mov	r6, #1
   1e864:	e24dd014 	sub	sp, sp, #20
   1e868:	e1dde2b8 	ldrh	lr, [sp, #40]	; 0x28
   1e86c:	e58dc008 	str	ip, [sp, #8]
   1e870:	e1ddc2bc 	ldrh	ip, [sp, #44]	; 0x2c
   1e874:	e58de000 	str	lr, [sp]
   1e878:	e58dc004 	str	ip, [sp, #4]
   1e87c:	ebfffa9b 	bl	1d2f0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1e880:	e59f3140 	ldr	r3, [pc, #320]	; 1e9c8 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x178>
   1e884:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   1e888:	e5843000 	str	r3, [r4]
   1e88c:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1e890:	e5c46029 	strb	r6, [r4, #41]	; 0x29
   1e894:	e2840030 	add	r0, r4, #48	; 0x30
   1e898:	eb000a24 	bl	21130 <CNetQueue::CNetQueue()>
   1e89c:	e284003c 	add	r0, r4, #60	; 0x3c
   1e8a0:	eb000a22 	bl	21130 <CNetQueue::CNetQueue()>
   1e8a4:	e3a01801 	mov	r1, #65536	; 0x10000
   1e8a8:	e2840048 	add	r0, r4, #72	; 0x48
   1e8ac:	eb0005f8 	bl	20094 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1e8b0:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   1e8b4:	e1a01005 	mov	r1, r5
   1e8b8:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   1e8bc:	e2840068 	add	r0, r4, #104	; 0x68
   1e8c0:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1e8c4:	e5845060 	str	r5, [r4, #96]	; 0x60
   1e8c8:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1e8cc:	eb0016d6 	bl	2442c <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e8d0:	e1a01005 	mov	r1, r5
   1e8d4:	e2840070 	add	r0, r4, #112	; 0x70
   1e8d8:	eb0016d3 	bl	2442c <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e8dc:	eb002d34 	bl	29db4 <CTimer::Get()>
   1e8e0:	e3a02f86 	mov	r2, #536	; 0x218
   1e8e4:	e59f30e0 	ldr	r3, [pc, #224]	; 1e9cc <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x17c>
   1e8e8:	e28470b8 	add	r7, r4, #184	; 0xb8
   1e8ec:	e5840078 	str	r0, [r4, #120]	; 0x78
   1e8f0:	e1c42bb4 	strh	r2, [r4, #180]	; 0xb4
   1e8f4:	e5843094 	str	r3, [r4, #148]	; 0x94
   1e8f8:	e58430ac 	str	r3, [r4, #172]	; 0xac
   1e8fc:	e1a00007 	mov	r0, r7
   1e900:	e5846088 	str	r6, [r4, #136]	; 0x88
   1e904:	e1c459b8 	strh	r5, [r4, #152]	; 0x98
   1e908:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   1e90c:	e58450b0 	str	r5, [r4, #176]	; 0xb0
   1e910:	eb0006cb 	bl	20444 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1e914:	e59f20b4 	ldr	r2, [pc, #180]	; 1e9d0 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x180>
   1e918:	e1a00004 	mov	r0, r4
   1e91c:	e5923000 	ldr	r3, [r2]
   1e920:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1e924:	e0833006 	add	r3, r3, r6
   1e928:	e5845080 	str	r5, [r4, #128]	; 0x80
   1e92c:	e5845084 	str	r5, [r4, #132]	; 0x84
   1e930:	e5823000 	str	r3, [r2]
   1e934:	ebfffed3 	bl	1e488 <CTCPConnection::CalculateISN()>
   1e938:	e1a01000 	mov	r1, r0
   1e93c:	e1a00007 	mov	r0, r7
   1e940:	e58410a4 	str	r1, [r4, #164]	; 0xa4
   1e944:	eb0006d8 	bl	204ac <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1e948:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   1e94c:	e1a03005 	mov	r3, r5
   1e950:	e0821006 	add	r1, r2, r6
   1e954:	e58d5004 	str	r5, [sp, #4]
   1e958:	e58d5000 	str	r5, [sp]
   1e95c:	e1a00004 	mov	r0, r4
   1e960:	e5841090 	str	r1, [r4, #144]	; 0x90
   1e964:	e584208c 	str	r2, [r4, #140]	; 0x8c
   1e968:	e3a01c02 	mov	r1, #512	; 0x200
   1e96c:	ebfffe39 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e970:	e1500005 	cmp	r0, r5
   1e974:	1a000002 	bne	1e984 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x134>
   1e978:	e1a00004 	mov	r0, r4
   1e97c:	e28dd014 	add	sp, sp, #20
   1e980:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1e984:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1e988:	e1a02006 	mov	r2, r6
   1e98c:	e1a00007 	mov	r0, r7
   1e990:	eb0006e1 	bl	2051c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1e994:	e3a03005 	mov	r3, #5
   1e998:	e3a02002 	mov	r2, #2
   1e99c:	e1a00007 	mov	r0, r7
   1e9a0:	e5c4202a 	strb	r2, [r4, #42]	; 0x2a
   1e9a4:	e5843060 	str	r3, [r4, #96]	; 0x60
   1e9a8:	eb0006bd 	bl	204a4 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1e9ac:	e1a01006 	mov	r1, r6
   1e9b0:	e1a02000 	mov	r2, r0
   1e9b4:	e1a00004 	mov	r0, r4
   1e9b8:	ebffff7a 	bl	1e7a8 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1e9bc:	e1a00004 	mov	r0, r4
   1e9c0:	e28dd014 	add	sp, sp, #20
   1e9c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1e9c8:	00043c20 	.word	0x00043c20
   1e9cc:	00003908 	.word	0x00003908
   1e9d0:	0004da8c 	.word	0x0004da8c

0001e9d4 <CTCPConnection::Process()>:
   1e9d4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1e9d8:	e5d03064 	ldrb	r3, [r0, #100]	; 0x64
   1e9dc:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1e9e0:	e3530000 	cmp	r3, #0
   1e9e4:	e1a04000 	mov	r4, r0
   1e9e8:	e24dd004 	sub	sp, sp, #4
   1e9ec:	1a00002a 	bne	1ea9c <CTCPConnection::Process()+0xc8>
   1e9f0:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1e9f4:	e353000a 	cmp	r3, #10
   1e9f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e9fc:	ea0000b9 	b	1ece8 <CTCPConnection::Process()+0x314>
   1ea00:	0001ea90 	.word	0x0001ea90
   1ea04:	0001ea90 	.word	0x0001ea90
   1ea08:	0001ea2c 	.word	0x0001ea2c
   1ea0c:	0001ea2c 	.word	0x0001ea2c
   1ea10:	0001eac0 	.word	0x0001eac0
   1ea14:	0001eac0 	.word	0x0001eac0
   1ea18:	0001ea90 	.word	0x0001ea90
   1ea1c:	0001eac0 	.word	0x0001eac0
   1ea20:	0001eac0 	.word	0x0001eac0
   1ea24:	0001eac0 	.word	0x0001eac0
   1ea28:	0001ea90 	.word	0x0001ea90
   1ea2c:	e5d0305d 	ldrb	r3, [r0, #93]	; 0x5d
   1ea30:	e3530000 	cmp	r3, #0
   1ea34:	0a000015 	beq	1ea90 <CTCPConnection::Process()+0xbc>
   1ea38:	e3a03000 	mov	r3, #0
   1ea3c:	e5c0305d 	strb	r3, [r0, #93]	; 0x5d
   1ea40:	e5d0202a 	ldrb	r2, [r0, #42]	; 0x2a
   1ea44:	e58d3004 	str	r3, [sp, #4]
   1ea48:	e3520002 	cmp	r2, #2
   1ea4c:	e58d3000 	str	r3, [sp]
   1ea50:	03a01c02 	moveq	r1, #512	; 0x200
   1ea54:	11c02ad4 	ldrdne	r2, [r0, #164]	; 0xa4
   1ea58:	13a01c12 	movne	r1, #4608	; 0x1200
   1ea5c:	059020a4 	ldreq	r2, [r0, #164]	; 0xa4
   1ea60:	ebfffdfc 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ea64:	e3a02001 	mov	r2, #1
   1ea68:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1ea6c:	e28400b8 	add	r0, r4, #184	; 0xb8
   1ea70:	e58d000c 	str	r0, [sp, #12]
   1ea74:	eb0006a8 	bl	2051c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1ea78:	e59d000c 	ldr	r0, [sp, #12]
   1ea7c:	eb000688 	bl	204a4 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1ea80:	e3a01001 	mov	r1, #1
   1ea84:	e1a02000 	mov	r2, r0
   1ea88:	e1a00004 	mov	r0, r4
   1ea8c:	ebffff45 	bl	1e7a8 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ea90:	e28dde65 	add	sp, sp, #1616	; 0x650
   1ea94:	e28dd004 	add	sp, sp, #4
   1ea98:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ea9c:	e3e02000 	mvn	r2, #0
   1eaa0:	e3a03000 	mov	r3, #0
   1eaa4:	e580202c 	str	r2, [r0, #44]	; 0x2c
   1eaa8:	e2800068 	add	r0, r0, #104	; 0x68
   1eaac:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1eab0:	eb001670 	bl	24478 <CSynchronizationEvent::Set()>
   1eab4:	e28dde65 	add	sp, sp, #1616	; 0x650
   1eab8:	e28dd004 	add	sp, sp, #4
   1eabc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1eac0:	e2806048 	add	r6, r0, #72	; 0x48
   1eac4:	e1a00006 	mov	r0, r6
   1eac8:	eb00058f 	bl	2010c <CRetransmissionQueue::IsEmpty() const>
   1eacc:	e3500000 	cmp	r0, #0
   1ead0:	1a000062 	bne	1ec60 <CTCPConnection::Process()+0x28c>
   1ead4:	e2845030 	add	r5, r4, #48	; 0x30
   1ead8:	ea000008 	b	1eb00 <CTCPConnection::Process()+0x12c>
   1eadc:	e3a02000 	mov	r2, #0
   1eae0:	e1a00005 	mov	r0, r5
   1eae4:	e28d1010 	add	r1, sp, #16
   1eae8:	eb000a13 	bl	2133c <CNetQueue::Dequeue(void*, void**)>
   1eaec:	e2502000 	subs	r2, r0, #0
   1eaf0:	0a000006 	beq	1eb10 <CTCPConnection::Process()+0x13c>
   1eaf4:	e1a00006 	mov	r0, r6
   1eaf8:	e28d1010 	add	r1, sp, #16
   1eafc:	eb0005a8 	bl	201a4 <CRetransmissionQueue::Write(void const*, unsigned int)>
   1eb00:	e1a00006 	mov	r0, r6
   1eb04:	eb000586 	bl	20124 <CRetransmissionQueue::GetFreeSpace() const>
   1eb08:	e3500d19 	cmp	r0, #1600	; 0x640
   1eb0c:	2afffff2 	bcs	1eadc <CTCPConnection::Process()+0x108>
   1eb10:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1eb14:	e3530004 	cmp	r3, #4
   1eb18:	0a000042 	beq	1ec28 <CTCPConnection::Process()+0x254>
   1eb1c:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1eb20:	e3530007 	cmp	r3, #7
   1eb24:	0a00003f 	beq	1ec28 <CTCPConnection::Process()+0x254>
   1eb28:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
   1eb2c:	e3530000 	cmp	r3, #0
   1eb30:	1a000043 	bne	1ec44 <CTCPConnection::Process()+0x270>
   1eb34:	e28d7010 	add	r7, sp, #16
   1eb38:	e2848030 	add	r8, r4, #48	; 0x30
   1eb3c:	ea000015 	b	1eb98 <CTCPConnection::Process()+0x1c4>
   1eb40:	e3a01a01 	mov	r1, #4096	; 0x1000
   1eb44:	e58d5004 	str	r5, [sp, #4]
   1eb48:	e58d7000 	str	r7, [sp]
   1eb4c:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   1eb50:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   1eb54:	e28490b8 	add	r9, r4, #184	; 0xb8
   1eb58:	e1a00004 	mov	r0, r4
   1eb5c:	ebfffdbd 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1eb60:	e1a02005 	mov	r2, r5
   1eb64:	e5941090 	ldr	r1, [r4, #144]	; 0x90
   1eb68:	e1a00009 	mov	r0, r9
   1eb6c:	e58d900c 	str	r9, [sp, #12]
   1eb70:	eb000669 	bl	2051c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1eb74:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   1eb78:	e59d000c 	ldr	r0, [sp, #12]
   1eb7c:	e0835005 	add	r5, r3, r5
   1eb80:	e5845090 	str	r5, [r4, #144]	; 0x90
   1eb84:	eb000646 	bl	204a4 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1eb88:	e3a01001 	mov	r1, #1
   1eb8c:	e1a02000 	mov	r2, r0
   1eb90:	e1a00004 	mov	r0, r4
   1eb94:	ebffff03 	bl	1e7a8 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1eb98:	e1a00006 	mov	r0, r6
   1eb9c:	eb0005b0 	bl	20264 <CRetransmissionQueue::GetBytesAvailable() const>
   1eba0:	e3500000 	cmp	r0, #0
   1eba4:	0affffb9 	beq	1ea90 <CTCPConnection::Process()+0xbc>
   1eba8:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
   1ebac:	e5942094 	ldr	r2, [r4, #148]	; 0x94
   1ebb0:	e5945090 	ldr	r5, [r4, #144]	; 0x90
   1ebb4:	e0833002 	add	r3, r3, r2
   1ebb8:	e0533005 	subs	r3, r3, r5
   1ebbc:	0affffb3 	beq	1ea90 <CTCPConnection::Process()+0xbc>
   1ebc0:	e1d45bb4 	ldrh	r5, [r4, #180]	; 0xb4
   1ebc4:	e1550003 	cmp	r5, r3
   1ebc8:	31a03005 	movcc	r3, r5
   1ebcc:	e1530000 	cmp	r3, r0
   1ebd0:	31a05003 	movcc	r5, r3
   1ebd4:	21a05000 	movcs	r5, r0
   1ebd8:	e3550d19 	cmp	r5, #1600	; 0x640
   1ebdc:	8a00000d 	bhi	1ec18 <CTCPConnection::Process()+0x244>
   1ebe0:	e1a02005 	mov	r2, r5
   1ebe4:	e1a01007 	mov	r1, r7
   1ebe8:	e1a00006 	mov	r0, r6
   1ebec:	eb0005bb 	bl	202e0 <CRetransmissionQueue::Read(void*, unsigned int)>
   1ebf0:	e1a00006 	mov	r0, r6
   1ebf4:	eb000544 	bl	2010c <CRetransmissionQueue::IsEmpty() const>
   1ebf8:	e3500000 	cmp	r0, #0
   1ebfc:	0affffcf 	beq	1eb40 <CTCPConnection::Process()+0x16c>
   1ec00:	e1a00008 	mov	r0, r8
   1ec04:	eb00094e 	bl	21144 <CNetQueue::IsEmpty() const>
   1ec08:	e3500000 	cmp	r0, #0
   1ec0c:	0affffcb 	beq	1eb40 <CTCPConnection::Process()+0x16c>
   1ec10:	e3a01b06 	mov	r1, #6144	; 0x1800
   1ec14:	eaffffca 	b	1eb44 <CTCPConnection::Process()+0x170>
   1ec18:	e59f20d0 	ldr	r2, [pc, #208]	; 1ecf0 <CTCPConnection::Process()+0x31c>
   1ec1c:	e59f10d0 	ldr	r1, [pc, #208]	; 1ecf4 <CTCPConnection::Process()+0x320>
   1ec20:	e59f00d0 	ldr	r0, [pc, #208]	; 1ecf8 <CTCPConnection::Process()+0x324>
   1ec24:	eb001696 	bl	24684 <assertion_failed>
   1ec28:	e2840030 	add	r0, r4, #48	; 0x30
   1ec2c:	eb000944 	bl	21144 <CNetQueue::IsEmpty() const>
   1ec30:	e3500000 	cmp	r0, #0
   1ec34:	0affffbb 	beq	1eb28 <CTCPConnection::Process()+0x154>
   1ec38:	e2840070 	add	r0, r4, #112	; 0x70
   1ec3c:	eb00160d 	bl	24478 <CSynchronizationEvent::Set()>
   1ec40:	eaffffb8 	b	1eb28 <CTCPConnection::Process()+0x154>
   1ec44:	e3a03000 	mov	r3, #0
   1ec48:	e1a00006 	mov	r0, r6
   1ec4c:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
   1ec50:	eb0005f3 	bl	20424 <CRetransmissionQueue::Reset()>
   1ec54:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
   1ec58:	e5843090 	str	r3, [r4, #144]	; 0x90
   1ec5c:	eaffffb4 	b	1eb34 <CTCPConnection::Process()+0x160>
   1ec60:	e2840030 	add	r0, r4, #48	; 0x30
   1ec64:	eb000936 	bl	21144 <CNetQueue::IsEmpty() const>
   1ec68:	e3500000 	cmp	r0, #0
   1ec6c:	0affff98 	beq	1ead4 <CTCPConnection::Process()+0x100>
   1ec70:	e5d4305e 	ldrb	r3, [r4, #94]	; 0x5e
   1ec74:	e3530000 	cmp	r3, #0
   1ec78:	0affff95 	beq	1ead4 <CTCPConnection::Process()+0x100>
   1ec7c:	e3a07000 	mov	r7, #0
   1ec80:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   1ec84:	e58d7004 	str	r7, [sp, #4]
   1ec88:	e58d7000 	str	r7, [sp]
   1ec8c:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   1ec90:	e28450b8 	add	r5, r4, #184	; 0xb8
   1ec94:	e3a01c11 	mov	r1, #4352	; 0x1100
   1ec98:	e1a00004 	mov	r0, r4
   1ec9c:	ebfffd6d 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1eca0:	e5941090 	ldr	r1, [r4, #144]	; 0x90
   1eca4:	e1a00005 	mov	r0, r5
   1eca8:	e3a02001 	mov	r2, #1
   1ecac:	e58d500c 	str	r5, [sp, #12]
   1ecb0:	eb000619 	bl	2051c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1ecb4:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   1ecb8:	e5d4205f 	ldrb	r2, [r4, #95]	; 0x5f
   1ecbc:	e2833001 	add	r3, r3, #1
   1ecc0:	e5c4202a 	strb	r2, [r4, #42]	; 0x2a
   1ecc4:	e59d000c 	ldr	r0, [sp, #12]
   1ecc8:	e5843090 	str	r3, [r4, #144]	; 0x90
   1eccc:	e5c4705e 	strb	r7, [r4, #94]	; 0x5e
   1ecd0:	eb0005f3 	bl	204a4 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1ecd4:	e3a01001 	mov	r1, #1
   1ecd8:	e1a02000 	mov	r2, r0
   1ecdc:	e1a00004 	mov	r0, r4
   1ece0:	ebfffeb0 	bl	1e7a8 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ece4:	eaffff7a 	b	1ead4 <CTCPConnection::Process()+0x100>
   1ece8:	e2806048 	add	r6, r0, #72	; 0x48
   1ecec:	eaffff78 	b	1ead4 <CTCPConnection::Process()+0x100>
   1ecf0:	0000025b 	.word	0x0000025b
   1ecf4:	000439f0 	.word	0x000439f0
   1ecf8:	00041084 	.word	0x00041084

0001ecfc <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1ecfc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ed00:	e59d1020 	ldr	r1, [sp, #32]
   1ed04:	e1dd61b8 	ldrh	r6, [sp, #24]
   1ed08:	e3510006 	cmp	r1, #6
   1ed0c:	e1dd71bc 	ldrh	r7, [sp, #28]
   1ed10:	1a000018 	bne	1ed78 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   1ed14:	e1a05003 	mov	r5, r3
   1ed18:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1ed1c:	e1a04000 	mov	r4, r0
   1ed20:	e3530001 	cmp	r3, #1
   1ed24:	9a000013 	bls	1ed78 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   1ed28:	e1a01002 	mov	r1, r2
   1ed2c:	e280000c 	add	r0, r0, #12
   1ed30:	eb0007e0 	bl	20cb8 <CIPAddress::operator!=(CIPAddress const&) const>
   1ed34:	e3500000 	cmp	r0, #0
   1ed38:	1a00000e 	bne	1ed78 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   1ed3c:	e1d431b4 	ldrh	r3, [r4, #20]
   1ed40:	e1530006 	cmp	r3, r6
   1ed44:	1a00000b 	bne	1ed78 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   1ed48:	e5940004 	ldr	r0, [r4, #4]
   1ed4c:	e3500000 	cmp	r0, #0
   1ed50:	0a000019 	beq	1edbc <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xc0>
   1ed54:	eb00074d 	bl	20a90 <CNetConfig::GetIPAddress() const>
   1ed58:	e1a01000 	mov	r1, r0
   1ed5c:	e1a00005 	mov	r0, r5
   1ed60:	eb0007d4 	bl	20cb8 <CIPAddress::operator!=(CIPAddress const&) const>
   1ed64:	e3500000 	cmp	r0, #0
   1ed68:	1a000002 	bne	1ed78 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   1ed6c:	e1d431b6 	ldrh	r3, [r4, #22]
   1ed70:	e1530007 	cmp	r3, r7
   1ed74:	0a000001 	beq	1ed80 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x84>
   1ed78:	e3a00000 	mov	r0, #0
   1ed7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ed80:	e3e03000 	mvn	r3, #0
   1ed84:	e1a00004 	mov	r0, r4
   1ed88:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1ed8c:	e3a01001 	mov	r1, #1
   1ed90:	ebfffdd9 	bl	1e4fc <CTCPConnection::StopTimer(unsigned int)>
   1ed94:	e3a0300a 	mov	r3, #10
   1ed98:	e3a01002 	mov	r1, #2
   1ed9c:	e1a00004 	mov	r0, r4
   1eda0:	e59f2024 	ldr	r2, [pc, #36]	; 1edcc <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd0>
   1eda4:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1eda8:	ebfffe7e 	bl	1e7a8 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1edac:	e2840068 	add	r0, r4, #104	; 0x68
   1edb0:	eb0015b0 	bl	24478 <CSynchronizationEvent::Set()>
   1edb4:	e3a00001 	mov	r0, #1
   1edb8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1edbc:	e59f200c 	ldr	r2, [pc, #12]	; 1edd0 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd4>
   1edc0:	e59f100c 	ldr	r1, [pc, #12]	; 1edd4 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd8>
   1edc4:	e59f000c 	ldr	r0, [pc, #12]	; 1edd8 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xdc>
   1edc8:	eb00162d 	bl	24684 <assertion_failed>
   1edcc:	00001770 	.word	0x00001770
   1edd0:	00000539 	.word	0x00000539
   1edd4:	000439f0 	.word	0x000439f0
   1edd8:	000432d0 	.word	0x000432d0

0001eddc <CTCPConnection::DumpStatus()>:
   1eddc:	e92d4010 	push	{r4, lr}
   1ede0:	e1a04000 	mov	r4, r0
   1ede4:	e24dd020 	sub	sp, sp, #32
   1ede8:	eb001f0d 	bl	26a24 <CLogger::Get()>
   1edec:	e594c0a4 	ldr	ip, [r4, #164]	; 0xa4
   1edf0:	e5941090 	ldr	r1, [r4, #144]	; 0x90
   1edf4:	e594e0b0 	ldr	lr, [r4, #176]	; 0xb0
   1edf8:	e594208c 	ldr	r2, [r4, #140]	; 0x8c
   1edfc:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   1ee00:	e041100c 	sub	r1, r1, ip
   1ee04:	e042200c 	sub	r2, r2, ip
   1ee08:	e043300e 	sub	r3, r3, lr
   1ee0c:	e5d4e02a 	ldrb	lr, [r4, #42]	; 0x2a
   1ee10:	e58d1008 	str	r1, [sp, #8]
   1ee14:	e1d4c1b4 	ldrh	ip, [r4, #20]
   1ee18:	e58d2004 	str	r2, [sp, #4]
   1ee1c:	e59410ac 	ldr	r1, [r4, #172]	; 0xac
   1ee20:	e5942094 	ldr	r2, [r4, #148]	; 0x94
   1ee24:	e58d3010 	str	r3, [sp, #16]
   1ee28:	e58d1014 	str	r1, [sp, #20]
   1ee2c:	e58d200c 	str	r2, [sp, #12]
   1ee30:	e59f3018 	ldr	r3, [pc, #24]	; 1ee50 <CTCPConnection::DumpStatus()+0x74>
   1ee34:	e3a02004 	mov	r2, #4
   1ee38:	e59f1014 	ldr	r1, [pc, #20]	; 1ee54 <CTCPConnection::DumpStatus()+0x78>
   1ee3c:	e58de000 	str	lr, [sp]
   1ee40:	e58dc018 	str	ip, [sp, #24]
   1ee44:	eb001e38 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ee48:	e28dd020 	add	sp, sp, #32
   1ee4c:	e8bd8010 	pop	{r4, pc}
   1ee50:	00043a98 	.word	0x00043a98
   1ee54:	00043c5c 	.word	0x00043c5c

0001ee58 <CTCPConnection::NewState(TTCPState, unsigned int)>:
   1ee58:	e92d4070 	push	{r4, r5, r6, lr}
   1ee5c:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1ee60:	e24dd010 	sub	sp, sp, #16
   1ee64:	e353000a 	cmp	r3, #10
   1ee68:	8a000015 	bhi	1eec4 <CTCPConnection::NewState(TTCPState, unsigned int)+0x6c>
   1ee6c:	e351000a 	cmp	r1, #10
   1ee70:	e1a04001 	mov	r4, r1
   1ee74:	8a000016 	bhi	1eed4 <CTCPConnection::NewState(TTCPState, unsigned int)+0x7c>
   1ee78:	e1a05000 	mov	r5, r0
   1ee7c:	e1a06002 	mov	r6, r2
   1ee80:	eb001ee7 	bl	26a24 <CLogger::Get()>
   1ee84:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1ee88:	e59f1054 	ldr	r1, [pc, #84]	; 1eee4 <CTCPConnection::NewState(TTCPState, unsigned int)+0x8c>
   1ee8c:	e58d6008 	str	r6, [sp, #8]
   1ee90:	e081c104 	add	ip, r1, r4, lsl #2
   1ee94:	e0813103 	add	r3, r1, r3, lsl #2
   1ee98:	e5932048 	ldr	r2, [r3, #72]	; 0x48
   1ee9c:	e59c3048 	ldr	r3, [ip, #72]	; 0x48
   1eea0:	e2811044 	add	r1, r1, #68	; 0x44
   1eea4:	e1cd20f0 	strd	r2, [sp]
   1eea8:	e3a02004 	mov	r2, #4
   1eeac:	e59f3034 	ldr	r3, [pc, #52]	; 1eee8 <CTCPConnection::NewState(TTCPState, unsigned int)+0x90>
   1eeb0:	eb001e1d 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1eeb4:	e1a00004 	mov	r0, r4
   1eeb8:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   1eebc:	e28dd010 	add	sp, sp, #16
   1eec0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1eec4:	e59f2020 	ldr	r2, [pc, #32]	; 1eeec <CTCPConnection::NewState(TTCPState, unsigned int)+0x94>
   1eec8:	e59f1020 	ldr	r1, [pc, #32]	; 1eef0 <CTCPConnection::NewState(TTCPState, unsigned int)+0x98>
   1eecc:	e59f0020 	ldr	r0, [pc, #32]	; 1eef4 <CTCPConnection::NewState(TTCPState, unsigned int)+0x9c>
   1eed0:	eb0015eb 	bl	24684 <assertion_failed>
   1eed4:	e59f201c 	ldr	r2, [pc, #28]	; 1eef8 <CTCPConnection::NewState(TTCPState, unsigned int)+0xa0>
   1eed8:	e59f1010 	ldr	r1, [pc, #16]	; 1eef0 <CTCPConnection::NewState(TTCPState, unsigned int)+0x98>
   1eedc:	e59f0018 	ldr	r0, [pc, #24]	; 1eefc <CTCPConnection::NewState(TTCPState, unsigned int)+0xa4>
   1eee0:	eb0015e7 	bl	24684 <assertion_failed>
   1eee4:	00043c18 	.word	0x00043c18
   1eee8:	00043b34 	.word	0x00043b34
   1eeec:	00000647 	.word	0x00000647
   1eef0:	000439f0 	.word	0x000439f0
   1eef4:	00043ad0 	.word	0x00043ad0
   1eef8:	00000648 	.word	0x00000648
   1eefc:	00043b04 	.word	0x00043b04

0001ef00 <CTCPConnection::UnexpectedState(unsigned int)>:
   1ef00:	e92d4030 	push	{r4, r5, lr}
   1ef04:	e1a05000 	mov	r5, r0
   1ef08:	e1a04001 	mov	r4, r1
   1ef0c:	e24dd00c 	sub	sp, sp, #12
   1ef10:	ebffffb1 	bl	1eddc <CTCPConnection::DumpStatus()>
   1ef14:	eb001ec2 	bl	26a24 <CLogger::Get()>
   1ef18:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1ef1c:	e3a02000 	mov	r2, #0
   1ef20:	e88d0018 	stm	sp, {r3, r4}
   1ef24:	e59f100c 	ldr	r1, [pc, #12]	; 1ef38 <CTCPConnection::UnexpectedState(unsigned int)+0x38>
   1ef28:	e59f300c 	ldr	r3, [pc, #12]	; 1ef3c <CTCPConnection::UnexpectedState(unsigned int)+0x3c>
   1ef2c:	eb001dfe 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ef30:	e28dd00c 	add	sp, sp, #12
   1ef34:	e8bd8030 	pop	{r4, r5, pc}
   1ef38:	00043c5c 	.word	0x00043c5c
   1ef3c:	00043b50 	.word	0x00043b50

0001ef40 <CTCPConnection::Connect()>:
   1ef40:	e92d4010 	push	{r4, lr}
   1ef44:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1ef48:	e1a04000 	mov	r4, r0
   1ef4c:	e3530000 	cmp	r3, #0
   1ef50:	e24dd008 	sub	sp, sp, #8
   1ef54:	ba000013 	blt	1efa8 <CTCPConnection::Connect()+0x68>
   1ef58:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1ef5c:	e353000a 	cmp	r3, #10
   1ef60:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1ef64:	ea00000f 	b	1efa8 <CTCPConnection::Connect()+0x68>
   1ef68:	0001efc8 	.word	0x0001efc8
   1ef6c:	0001efb4 	.word	0x0001efb4
   1ef70:	0001ef94 	.word	0x0001ef94
   1ef74:	0001ef94 	.word	0x0001ef94
   1ef78:	0001efa8 	.word	0x0001efa8
   1ef7c:	0001efb4 	.word	0x0001efb4
   1ef80:	0001efb4 	.word	0x0001efb4
   1ef84:	0001efb4 	.word	0x0001efb4
   1ef88:	0001efb4 	.word	0x0001efb4
   1ef8c:	0001efb4 	.word	0x0001efb4
   1ef90:	0001efb4 	.word	0x0001efb4
   1ef94:	e2800068 	add	r0, r0, #104	; 0x68
   1ef98:	e58d0004 	str	r0, [sp, #4]
   1ef9c:	eb001532 	bl	2446c <CSynchronizationEvent::Clear()>
   1efa0:	e59d0004 	ldr	r0, [sp, #4]
   1efa4:	eb001541 	bl	244b0 <CSynchronizationEvent::Wait()>
   1efa8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1efac:	e28dd008 	add	sp, sp, #8
   1efb0:	e8bd8010 	pop	{r4, pc}
   1efb4:	e3a010f9 	mov	r1, #249	; 0xf9
   1efb8:	ebffffd0 	bl	1ef00 <CTCPConnection::UnexpectedState(unsigned int)>
   1efbc:	e3e00000 	mvn	r0, #0
   1efc0:	e28dd008 	add	sp, sp, #8
   1efc4:	e8bd8010 	pop	{r4, pc}
   1efc8:	e3e00000 	mvn	r0, #0
   1efcc:	eafffff6 	b	1efac <CTCPConnection::Connect()+0x6c>

0001efd0 <CTCPConnection::Accept(CIPAddress*, unsigned short*)>:
   1efd0:	e92d4070 	push	{r4, r5, r6, lr}
   1efd4:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1efd8:	e1a04000 	mov	r4, r0
   1efdc:	e3530000 	cmp	r3, #0
   1efe0:	e24dd008 	sub	sp, sp, #8
   1efe4:	ba000024 	blt	1f07c <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xac>
   1efe8:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1efec:	e1a05001 	mov	r5, r1
   1eff0:	e1a06002 	mov	r6, r2
   1eff4:	e353000a 	cmp	r3, #10
   1eff8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1effc:	ea000012 	b	1f04c <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x7c>
   1f000:	0001f02c 	.word	0x0001f02c
   1f004:	0001f038 	.word	0x0001f038
   1f008:	0001f088 	.word	0x0001f088
   1f00c:	0001f04c 	.word	0x0001f04c
   1f010:	0001f04c 	.word	0x0001f04c
   1f014:	0001f02c 	.word	0x0001f02c
   1f018:	0001f02c 	.word	0x0001f02c
   1f01c:	0001f02c 	.word	0x0001f02c
   1f020:	0001f02c 	.word	0x0001f02c
   1f024:	0001f02c 	.word	0x0001f02c
   1f028:	0001f02c 	.word	0x0001f02c
   1f02c:	e3e00000 	mvn	r0, #0
   1f030:	e28dd008 	add	sp, sp, #8
   1f034:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f038:	e2800068 	add	r0, r0, #104	; 0x68
   1f03c:	e58d0004 	str	r0, [sp, #4]
   1f040:	eb001509 	bl	2446c <CSynchronizationEvent::Clear()>
   1f044:	e59d0004 	ldr	r0, [sp, #4]
   1f048:	eb001518 	bl	244b0 <CSynchronizationEvent::Wait()>
   1f04c:	e3550000 	cmp	r5, #0
   1f050:	0a000011 	beq	1f09c <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xcc>
   1f054:	e1a00005 	mov	r0, r5
   1f058:	e284100c 	add	r1, r4, #12
   1f05c:	eb000782 	bl	20e6c <CIPAddress::Set(CIPAddress const&)>
   1f060:	e3560000 	cmp	r6, #0
   1f064:	0a000010 	beq	1f0ac <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xdc>
   1f068:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f06c:	e1d431b4 	ldrh	r3, [r4, #20]
   1f070:	e1c630b0 	strh	r3, [r6]
   1f074:	e28dd008 	add	sp, sp, #8
   1f078:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f07c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f080:	e28dd008 	add	sp, sp, #8
   1f084:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f088:	e59f102c 	ldr	r1, [pc, #44]	; 1f0bc <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xec>
   1f08c:	ebffff9b 	bl	1ef00 <CTCPConnection::UnexpectedState(unsigned int)>
   1f090:	e3e00000 	mvn	r0, #0
   1f094:	e28dd008 	add	sp, sp, #8
   1f098:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f09c:	e59f201c 	ldr	r2, [pc, #28]	; 1f0c0 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xf0>
   1f0a0:	e59f101c 	ldr	r1, [pc, #28]	; 1f0c4 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xf4>
   1f0a4:	e59f001c 	ldr	r0, [pc, #28]	; 1f0c8 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xf8>
   1f0a8:	eb001575 	bl	24684 <assertion_failed>
   1f0ac:	e59f2018 	ldr	r2, [pc, #24]	; 1f0cc <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xfc>
   1f0b0:	e59f100c 	ldr	r1, [pc, #12]	; 1f0c4 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xf4>
   1f0b4:	e59f0014 	ldr	r0, [pc, #20]	; 1f0d0 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x100>
   1f0b8:	eb001571 	bl	24684 <assertion_failed>
   1f0bc:	0000010d 	.word	0x0000010d
   1f0c0:	00000123 	.word	0x00000123
   1f0c4:	000439f0 	.word	0x000439f0
   1f0c8:	00043328 	.word	0x00043328
   1f0cc:	00000126 	.word	0x00000126
   1f0d0:	00043338 	.word	0x00043338

0001f0d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1f0d4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0d8:	e24dd024 	sub	sp, sp, #36	; 0x24
   1f0dc:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   1f0e0:	e35c0006 	cmp	ip, #6
   1f0e4:	1a00000f 	bne	1f128 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   1f0e8:	e3520013 	cmp	r2, #19
   1f0ec:	e1a06002 	mov	r6, r2
   1f0f0:	9a00000f 	bls	1f134 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x60>
   1f0f4:	e3510000 	cmp	r1, #0
   1f0f8:	e1a04001 	mov	r4, r1
   1f0fc:	0a00010b 	beq	1f530 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x45c>
   1f100:	e1a05000 	mov	r5, r0
   1f104:	e1a07003 	mov	r7, r3
   1f108:	e5d10003 	ldrb	r0, [r1, #3]
   1f10c:	e5d13002 	ldrb	r3, [r1, #2]
   1f110:	e1d511b6 	ldrh	r1, [r5, #22]
   1f114:	e1833400 	orr	r3, r3, r0, lsl #8
   1f118:	e6bf3fb3 	rev16	r3, r3
   1f11c:	e6ff3073 	uxth	r3, r3
   1f120:	e1510003 	cmp	r1, r3
   1f124:	0a000005 	beq	1f140 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6c>
   1f128:	e3a00000 	mov	r0, #0
   1f12c:	e28dd024 	add	sp, sp, #36	; 0x24
   1f130:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f134:	e3e00000 	mvn	r0, #0
   1f138:	e28dd024 	add	sp, sp, #36	; 0x24
   1f13c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f140:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f144:	e3530001 	cmp	r3, #1
   1f148:	0a00004a 	beq	1f278 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1a4>
   1f14c:	e1a01007 	mov	r1, r7
   1f150:	e285000c 	add	r0, r5, #12
   1f154:	eb0006d7 	bl	20cb8 <CIPAddress::operator!=(CIPAddress const&) const>
   1f158:	e3500000 	cmp	r0, #0
   1f15c:	1afffff1 	bne	1f128 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   1f160:	e5d43000 	ldrb	r3, [r4]
   1f164:	e5d40001 	ldrb	r0, [r4, #1]
   1f168:	e1d511b4 	ldrh	r1, [r5, #20]
   1f16c:	e1833400 	orr	r3, r3, r0, lsl #8
   1f170:	e6bf3fb3 	rev16	r3, r3
   1f174:	e6ff3073 	uxth	r3, r3
   1f178:	e1510003 	cmp	r1, r3
   1f17c:	0285a01c 	addeq	sl, r5, #28
   1f180:	1affffe8 	bne	1f128 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   1f184:	e1a02006 	mov	r2, r6
   1f188:	e1a01004 	mov	r1, r4
   1f18c:	e1a0000a 	mov	r0, sl
   1f190:	eb0008fc 	bl	21588 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1f194:	e3500000 	cmp	r0, #0
   1f198:	1affffe2 	bne	1f128 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   1f19c:	e5d41005 	ldrb	r1, [r4, #5]
   1f1a0:	e5d43004 	ldrb	r3, [r4, #4]
   1f1a4:	e5d4c006 	ldrb	ip, [r4, #6]
   1f1a8:	e1833401 	orr	r3, r3, r1, lsl #8
   1f1ac:	e183380c 	orr	r3, r3, ip, lsl #16
   1f1b0:	e5d4c007 	ldrb	ip, [r4, #7]
   1f1b4:	e5d4100c 	ldrb	r1, [r4, #12]
   1f1b8:	e5d48008 	ldrb	r8, [r4, #8]
   1f1bc:	e5d4e009 	ldrb	lr, [r4, #9]
   1f1c0:	e5d4900d 	ldrb	r9, [r4, #13]
   1f1c4:	e5d4000a 	ldrb	r0, [r4, #10]
   1f1c8:	e1833c0c 	orr	r3, r3, ip, lsl #24
   1f1cc:	e1819409 	orr	r9, r1, r9, lsl #8
   1f1d0:	e188840e 	orr	r8, r8, lr, lsl #8
   1f1d4:	e1a01221 	lsr	r1, r1, #4
   1f1d8:	e6bf3f33 	rev	r3, r3
   1f1dc:	e2192c02 	ands	r2, r9, #512	; 0x200
   1f1e0:	e0466101 	sub	r6, r6, r1, lsl #2
   1f1e4:	e1888800 	orr	r8, r8, r0, lsl #16
   1f1e8:	e5d4000b 	ldrb	r0, [r4, #11]
   1f1ec:	e58d300c 	str	r3, [sp, #12]
   1f1f0:	e1a03101 	lsl	r3, r1, #2
   1f1f4:	e58d3014 	str	r3, [sp, #20]
   1f1f8:	1286b001 	addne	fp, r6, #1
   1f1fc:	01a0b006 	moveq	fp, r6
   1f200:	e2193c01 	ands	r3, r9, #256	; 0x100
   1f204:	e58d2018 	str	r2, [sp, #24]
   1f208:	e58d301c 	str	r3, [sp, #28]
   1f20c:	e5d4300e 	ldrb	r3, [r4, #14]
   1f210:	e5d4200f 	ldrb	r2, [r4, #15]
   1f214:	e1888c00 	orr	r8, r8, r0, lsl #24
   1f218:	e1833402 	orr	r3, r3, r2, lsl #8
   1f21c:	e6bf3fb3 	rev16	r3, r3
   1f220:	e6ff3073 	uxth	r3, r3
   1f224:	e1a01004 	mov	r1, r4
   1f228:	e1a00005 	mov	r0, r5
   1f22c:	e58d3010 	str	r3, [sp, #16]
   1f230:	128bb001 	addne	fp, fp, #1
   1f234:	ebfffc5e 	bl	1e3b4 <CTCPConnection::ScanOptions(TTCPHeader*)>
   1f238:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f23c:	e6bf8f38 	rev	r8, r8
   1f240:	e353000a 	cmp	r3, #10
   1f244:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f248:	ea000027 	b	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f24c:	0001f3d4 	.word	0x0001f3d4
   1f250:	0001f434 	.word	0x0001f434
   1f254:	0001f2f4 	.word	0x0001f2f4
   1f258:	0001f298 	.word	0x0001f298
   1f25c:	0001f298 	.word	0x0001f298
   1f260:	0001f298 	.word	0x0001f298
   1f264:	0001f298 	.word	0x0001f298
   1f268:	0001f298 	.word	0x0001f298
   1f26c:	0001f298 	.word	0x0001f298
   1f270:	0001f298 	.word	0x0001f298
   1f274:	0001f298 	.word	0x0001f298
   1f278:	e5d4300d 	ldrb	r3, [r4, #13]
   1f27c:	e3130002 	tst	r3, #2
   1f280:	0affffa8 	beq	1f128 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   1f284:	e285a01c 	add	sl, r5, #28
   1f288:	e1a0000a 	mov	r0, sl
   1f28c:	e1a01007 	mov	r1, r7
   1f290:	eb000891 	bl	214dc <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f294:	eaffffba 	b	1f184 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb0>
   1f298:	e59530ac 	ldr	r3, [r5, #172]	; 0xac
   1f29c:	e3530000 	cmp	r3, #0
   1f2a0:	0a0000c3 	beq	1f5b4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4e0>
   1f2a4:	e59520a8 	ldr	r2, [r5, #168]	; 0xa8
   1f2a8:	e59d000c 	ldr	r0, [sp, #12]
   1f2ac:	e35b0000 	cmp	fp, #0
   1f2b0:	e0421000 	sub	r1, r2, r0
   1f2b4:	1a0000a1 	bne	1f540 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x46c>
   1f2b8:	e3510000 	cmp	r1, #0
   1f2bc:	da0001b6 	ble	1f99c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8c8>
   1f2c0:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f2c4:	e3530003 	cmp	r3, #3
   1f2c8:	0a0000a8 	beq	1f570 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x49c>
   1f2cc:	e3a02000 	mov	r2, #0
   1f2d0:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f2d4:	e58d2004 	str	r2, [sp, #4]
   1f2d8:	e58d2000 	str	r2, [sp]
   1f2dc:	e1a00005 	mov	r0, r5
   1f2e0:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f2e4:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f2e8:	ebfffbda 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f2ec:	e3a00001 	mov	r0, #1
   1f2f0:	eaffff8d 	b	1f12c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f2f4:	e3190a01 	tst	r9, #4096	; 0x1000
   1f2f8:	1a0000b4 	bne	1f5d0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4fc>
   1f2fc:	e1a03529 	lsr	r3, r9, #10
   1f300:	e2192c02 	ands	r2, r9, #512	; 0x200
   1f304:	e2233001 	eor	r3, r3, #1
   1f308:	e3520000 	cmp	r2, #0
   1f30c:	03a03000 	moveq	r3, #0
   1f310:	12033001 	andne	r3, r3, #1
   1f314:	e3530000 	cmp	r3, #0
   1f318:	0afffff3 	beq	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f31c:	e59d200c 	ldr	r2, [sp, #12]
   1f320:	e2823001 	add	r3, r2, #1
   1f324:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1f328:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f32c:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1f330:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f334:	e0423003 	sub	r3, r2, r3
   1f338:	e3530000 	cmp	r3, #0
   1f33c:	ba0001b2 	blt	1fa0c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x938>
   1f340:	e3a07000 	mov	r7, #0
   1f344:	e3a03003 	mov	r3, #3
   1f348:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f34c:	e58d7004 	str	r7, [sp, #4]
   1f350:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   1f354:	e58d7000 	str	r7, [sp]
   1f358:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f35c:	e3a01c12 	mov	r1, #4608	; 0x1200
   1f360:	e28580b8 	add	r8, r5, #184	; 0xb8
   1f364:	e1a00005 	mov	r0, r5
   1f368:	ebfffbba 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f36c:	e3a02001 	mov	r2, #1
   1f370:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1f374:	e1a00008 	mov	r0, r8
   1f378:	e58d800c 	str	r8, [sp, #12]
   1f37c:	eb000466 	bl	2051c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1f380:	e3a03005 	mov	r3, #5
   1f384:	e59d000c 	ldr	r0, [sp, #12]
   1f388:	e5853060 	str	r3, [r5, #96]	; 0x60
   1f38c:	eb000444 	bl	204a4 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1f390:	e3a01001 	mov	r1, #1
   1f394:	e1a02000 	mov	r2, r0
   1f398:	e1a00005 	mov	r0, r5
   1f39c:	ebfffd01 	bl	1e7a8 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1f3a0:	e59d301c 	ldr	r3, [sp, #28]
   1f3a4:	e1530007 	cmp	r3, r7
   1f3a8:	1a0001b3 	bne	1fa7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9a8>
   1f3ac:	e1560007 	cmp	r6, r7
   1f3b0:	0affffcd 	beq	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f3b4:	e59d3014 	ldr	r3, [sp, #20]
   1f3b8:	e285003c 	add	r0, r5, #60	; 0x3c
   1f3bc:	e0841003 	add	r1, r4, r3
   1f3c0:	e1a02006 	mov	r2, r6
   1f3c4:	e3a03000 	mov	r3, #0
   1f3c8:	eb000795 	bl	21224 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1f3cc:	e3a00001 	mov	r0, #1
   1f3d0:	eaffff55 	b	1f12c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f3d4:	e2196b01 	ands	r6, r9, #1024	; 0x400
   1f3d8:	1affffc3 	bne	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f3dc:	e2199a01 	ands	r9, r9, #4096	; 0x1000
   1f3e0:	e1a01007 	mov	r1, r7
   1f3e4:	e285000c 	add	r0, r5, #12
   1f3e8:	0a0000c7 	beq	1f70c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x638>
   1f3ec:	eb00069e 	bl	20e6c <CIPAddress::Set(CIPAddress const&)>
   1f3f0:	e5d43000 	ldrb	r3, [r4]
   1f3f4:	e5d42001 	ldrb	r2, [r4, #1]
   1f3f8:	e1a01007 	mov	r1, r7
   1f3fc:	e1833402 	orr	r3, r3, r2, lsl #8
   1f400:	e6bf3fb3 	rev16	r3, r3
   1f404:	e1c531b4 	strh	r3, [r5, #20]
   1f408:	e1a0000a 	mov	r0, sl
   1f40c:	eb000832 	bl	214dc <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f410:	e1a03006 	mov	r3, r6
   1f414:	e58d6004 	str	r6, [sp, #4]
   1f418:	e58d6000 	str	r6, [sp]
   1f41c:	e1a02008 	mov	r2, r8
   1f420:	e1a00005 	mov	r0, r5
   1f424:	e3a01b01 	mov	r1, #1024	; 0x400
   1f428:	ebfffb8a 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f42c:	e3a00001 	mov	r0, #1
   1f430:	eaffff3d 	b	1f12c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f434:	e2193b01 	ands	r3, r9, #1024	; 0x400
   1f438:	1affffab 	bne	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f43c:	e2199a01 	ands	r9, r9, #4096	; 0x1000
   1f440:	1a0000c3 	bne	1f754 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x680>
   1f444:	e59d3018 	ldr	r3, [sp, #24]
   1f448:	e3530000 	cmp	r3, #0
   1f44c:	0affffa6 	beq	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f450:	e59f39e8 	ldr	r3, [pc, #2536]	; 1fe40 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd6c>
   1f454:	e5933000 	ldr	r3, [r3]
   1f458:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   1f45c:	2a0000a8 	bcs	1f704 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x630>
   1f460:	e59d200c 	ldr	r2, [sp, #12]
   1f464:	e59d1010 	ldr	r1, [sp, #16]
   1f468:	e2823001 	add	r3, r2, #1
   1f46c:	e35b0000 	cmp	fp, #0
   1f470:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1f474:	e5851094 	str	r1, [r5, #148]	; 0x94
   1f478:	e585209c 	str	r2, [r5, #156]	; 0x9c
   1f47c:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f480:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1f484:	0a0001b5 	beq	1fb60 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa8c>
   1f488:	e3560000 	cmp	r6, #0
   1f48c:	1a000189 	bne	1fab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9e4>
   1f490:	e1a00005 	mov	r0, r5
   1f494:	ebfffbfb 	bl	1e488 <CTCPConnection::CalculateISN()>
   1f498:	e28560b8 	add	r6, r5, #184	; 0xb8
   1f49c:	e1a01000 	mov	r1, r0
   1f4a0:	e58500a4 	str	r0, [r5, #164]	; 0xa4
   1f4a4:	e1a00006 	mov	r0, r6
   1f4a8:	eb0003ff 	bl	204ac <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1f4ac:	e1a01007 	mov	r1, r7
   1f4b0:	e285000c 	add	r0, r5, #12
   1f4b4:	eb00066c 	bl	20e6c <CIPAddress::Set(CIPAddress const&)>
   1f4b8:	e5d42001 	ldrb	r2, [r4, #1]
   1f4bc:	e5d43000 	ldrb	r3, [r4]
   1f4c0:	e1a01007 	mov	r1, r7
   1f4c4:	e1833402 	orr	r3, r3, r2, lsl #8
   1f4c8:	e6bf3fb3 	rev16	r3, r3
   1f4cc:	e1a0000a 	mov	r0, sl
   1f4d0:	e1c531b4 	strh	r3, [r5, #20]
   1f4d4:	eb000800 	bl	214dc <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f4d8:	e3a02000 	mov	r2, #0
   1f4dc:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f4e0:	e58d2004 	str	r2, [sp, #4]
   1f4e4:	e58d2000 	str	r2, [sp]
   1f4e8:	e3a01c12 	mov	r1, #4608	; 0x1200
   1f4ec:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1f4f0:	e1a00005 	mov	r0, r5
   1f4f4:	ebfffb57 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f4f8:	e1a00006 	mov	r0, r6
   1f4fc:	e3a02001 	mov	r2, #1
   1f500:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1f504:	eb000404 	bl	2051c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1f508:	e3a02003 	mov	r2, #3
   1f50c:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1f510:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1f514:	e2832001 	add	r2, r3, #1
   1f518:	e2850068 	add	r0, r5, #104	; 0x68
   1f51c:	e585308c 	str	r3, [r5, #140]	; 0x8c
   1f520:	e5852090 	str	r2, [r5, #144]	; 0x90
   1f524:	eb0013d3 	bl	24478 <CSynchronizationEvent::Set()>
   1f528:	e3a00001 	mov	r0, #1
   1f52c:	eafffefe 	b	1f12c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f530:	e3a02f9f 	mov	r2, #636	; 0x27c
   1f534:	e59f1908 	ldr	r1, [pc, #2312]	; 1fe44 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd70>
   1f538:	e59f0908 	ldr	r0, [pc, #2312]	; 1fe48 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd74>
   1f53c:	eb001450 	bl	24684 <assertion_failed>
   1f540:	e3510000 	cmp	r1, #0
   1f544:	da000119 	ble	1f9b0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8dc>
   1f548:	e59d100c 	ldr	r1, [sp, #12]
   1f54c:	e081000b 	add	r0, r1, fp
   1f550:	e2821001 	add	r1, r2, #1
   1f554:	e0411000 	sub	r1, r1, r0
   1f558:	e3510000 	cmp	r1, #0
   1f55c:	caffff57 	bgt	1f2c0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ec>
   1f560:	e0833002 	add	r3, r3, r2
   1f564:	e1e03003 	mvn	r3, r3
   1f568:	e1730000 	cmn	r3, r0
   1f56c:	5affff53 	bpl	1f2c0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ec>
   1f570:	e3190b01 	tst	r9, #1024	; 0x400
   1f574:	0a000044 	beq	1f68c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5b8>
   1f578:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f57c:	e3530007 	cmp	r3, #7
   1f580:	e6ef3073 	uxtb	r3, r3
   1f584:	8a000037 	bhi	1f668 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x594>
   1f588:	e3530003 	cmp	r3, #3
   1f58c:	8a000115 	bhi	1f9e8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x914>
   1f590:	1a00010f 	bne	1f9d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x900>
   1f594:	e2850048 	add	r0, r5, #72	; 0x48
   1f598:	eb0003a4 	bl	20430 <CRetransmissionQueue::Flush()>
   1f59c:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   1f5a0:	e3530000 	cmp	r3, #0
   1f5a4:	1a00014a 	bne	1fad4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa00>
   1f5a8:	e3a00001 	mov	r0, #1
   1f5ac:	e5c5002a 	strb	r0, [r5, #42]	; 0x2a
   1f5b0:	eafffedd 	b	1f12c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f5b4:	e35b0000 	cmp	fp, #0
   1f5b8:	1affff40 	bne	1f2c0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ec>
   1f5bc:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f5c0:	e59d200c 	ldr	r2, [sp, #12]
   1f5c4:	e1520003 	cmp	r2, r3
   1f5c8:	1affff3c 	bne	1f2c0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ec>
   1f5cc:	eaffffe7 	b	1f570 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x49c>
   1f5d0:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1f5d4:	e0433008 	sub	r3, r3, r8
   1f5d8:	e3530000 	cmp	r3, #0
   1f5dc:	aa00001c 	bge	1f654 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x580>
   1f5e0:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f5e4:	e0483003 	sub	r3, r8, r3
   1f5e8:	e3530000 	cmp	r3, #0
   1f5ec:	ca000018 	bgt	1f654 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x580>
   1f5f0:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f5f4:	e0433008 	sub	r3, r3, r8
   1f5f8:	e3530000 	cmp	r3, #0
   1f5fc:	caffff3a 	bgt	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f600:	e3190b01 	tst	r9, #1024	; 0x400
   1f604:	1a0000db 	bne	1f978 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8a4>
   1f608:	e2193c02 	ands	r3, r9, #512	; 0x200
   1f60c:	e3530000 	cmp	r3, #0
   1f610:	0affff35 	beq	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f614:	e59d200c 	ldr	r2, [sp, #12]
   1f618:	e1a01008 	mov	r1, r8
   1f61c:	e2823001 	add	r3, r2, #1
   1f620:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1f624:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f628:	e28500b8 	add	r0, r5, #184	; 0xb8
   1f62c:	eb00041e 	bl	206ac <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1f630:	e595108c 	ldr	r1, [r5, #140]	; 0x8c
   1f634:	e0481001 	sub	r1, r8, r1
   1f638:	e3510001 	cmp	r1, #1
   1f63c:	9a000002 	bls	1f64c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x578>
   1f640:	e2411001 	sub	r1, r1, #1
   1f644:	e2850048 	add	r0, r5, #72	; 0x48
   1f648:	eb000354 	bl	203a0 <CRetransmissionQueue::Advance(unsigned int)>
   1f64c:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1f650:	eaffff35 	b	1f32c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x258>
   1f654:	e2193b01 	ands	r3, r9, #1024	; 0x400
   1f658:	1affff23 	bne	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f65c:	e58d3004 	str	r3, [sp, #4]
   1f660:	e58d3000 	str	r3, [sp]
   1f664:	eaffff6c 	b	1f41c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x348>
   1f668:	e2433008 	sub	r3, r3, #8
   1f66c:	e3530002 	cmp	r3, #2
   1f670:	8a0000d7 	bhi	1f9d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x900>
   1f674:	e3a03000 	mov	r3, #0
   1f678:	e2850068 	add	r0, r5, #104	; 0x68
   1f67c:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f680:	eb00137c 	bl	24478 <CSynchronizationEvent::Set()>
   1f684:	e3a00001 	mov	r0, #1
   1f688:	eafffea7 	b	1f12c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f68c:	e2193c02 	ands	r3, r9, #512	; 0x200
   1f690:	e3530000 	cmp	r3, #0
   1f694:	0a00003c 	beq	1f78c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b8>
   1f698:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f69c:	e3530003 	cmp	r3, #3
   1f6a0:	1a000002 	bne	1f6b0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5dc>
   1f6a4:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   1f6a8:	e3530000 	cmp	r3, #0
   1f6ac:	0affffbd 	beq	1f5a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4d4>
   1f6b0:	e3a04000 	mov	r4, #0
   1f6b4:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f6b8:	e3a01b01 	mov	r1, #1024	; 0x400
   1f6bc:	e1a03004 	mov	r3, r4
   1f6c0:	e1a00005 	mov	r0, r5
   1f6c4:	e58d4004 	str	r4, [sp, #4]
   1f6c8:	e58d4000 	str	r4, [sp]
   1f6cc:	ebfffae1 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f6d0:	e3e03000 	mvn	r3, #0
   1f6d4:	e2850048 	add	r0, r5, #72	; 0x48
   1f6d8:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1f6dc:	eb000353 	bl	20430 <CRetransmissionQueue::Flush()>
   1f6e0:	e2850030 	add	r0, r5, #48	; 0x30
   1f6e4:	eb00069a 	bl	21154 <CNetQueue::Flush()>
   1f6e8:	e285003c 	add	r0, r5, #60	; 0x3c
   1f6ec:	eb000698 	bl	21154 <CNetQueue::Flush()>
   1f6f0:	e2850068 	add	r0, r5, #104	; 0x68
   1f6f4:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   1f6f8:	eb00135e 	bl	24478 <CSynchronizationEvent::Set()>
   1f6fc:	e3a00001 	mov	r0, #1
   1f700:	eafffe89 	b	1f12c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f704:	e1a01007 	mov	r1, r7
   1f708:	e285000c 	add	r0, r5, #12
   1f70c:	eb0005d6 	bl	20e6c <CIPAddress::Set(CIPAddress const&)>
   1f710:	e5d42001 	ldrb	r2, [r4, #1]
   1f714:	e5d43000 	ldrb	r3, [r4]
   1f718:	e1a01007 	mov	r1, r7
   1f71c:	e1833402 	orr	r3, r3, r2, lsl #8
   1f720:	e6bf3fb3 	rev16	r3, r3
   1f724:	e1a0000a 	mov	r0, sl
   1f728:	e1c531b4 	strh	r3, [r5, #20]
   1f72c:	eb00076a 	bl	214dc <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f730:	e59d300c 	ldr	r3, [sp, #12]
   1f734:	e1a02009 	mov	r2, r9
   1f738:	e1a00005 	mov	r0, r5
   1f73c:	e3a01b05 	mov	r1, #5120	; 0x1400
   1f740:	e58d9004 	str	r9, [sp, #4]
   1f744:	e58d9000 	str	r9, [sp]
   1f748:	e083300b 	add	r3, r3, fp
   1f74c:	ebfffac1 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f750:	eafffee5 	b	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f754:	e1a01007 	mov	r1, r7
   1f758:	e285000c 	add	r0, r5, #12
   1f75c:	e58d300c 	str	r3, [sp, #12]
   1f760:	eb0005c1 	bl	20e6c <CIPAddress::Set(CIPAddress const&)>
   1f764:	e5d40001 	ldrb	r0, [r4, #1]
   1f768:	e5d42000 	ldrb	r2, [r4]
   1f76c:	e1a01007 	mov	r1, r7
   1f770:	e1822400 	orr	r2, r2, r0, lsl #8
   1f774:	e6bf2fb2 	rev16	r2, r2
   1f778:	e1a0000a 	mov	r0, sl
   1f77c:	e1c521b4 	strh	r2, [r5, #20]
   1f780:	eb000755 	bl	214dc <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f784:	e59d300c 	ldr	r3, [sp, #12]
   1f788:	eaffffb3 	b	1f65c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x588>
   1f78c:	e3190a01 	tst	r9, #4096	; 0x1000
   1f790:	0afffed5 	beq	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f794:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f798:	e2433003 	sub	r3, r3, #3
   1f79c:	e3530007 	cmp	r3, #7
   1f7a0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f7a4:	ea000199 	b	1fe10 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd3c>
   1f7a8:	0001f818 	.word	0x0001f818
   1f7ac:	0001f7c8 	.word	0x0001f7c8
   1f7b0:	0001f7c8 	.word	0x0001f7c8
   1f7b4:	0001f7c8 	.word	0x0001f7c8
   1f7b8:	0001f7c8 	.word	0x0001f7c8
   1f7bc:	0001f7c8 	.word	0x0001f7c8
   1f7c0:	0001f950 	.word	0x0001f950
   1f7c4:	0001f90c 	.word	0x0001f90c
   1f7c8:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f7cc:	e0532008 	subs	r2, r3, r8
   1f7d0:	4a0000e8 	bmi	1fb78 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xaa4>
   1f7d4:	e0483003 	sub	r3, r8, r3
   1f7d8:	e3530000 	cmp	r3, #0
   1f7dc:	c5952090 	ldrgt	r2, [r5, #144]	; 0x90
   1f7e0:	da0000ec 	ble	1fb98 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xac4>
   1f7e4:	e0423008 	sub	r3, r2, r8
   1f7e8:	e3530000 	cmp	r3, #0
   1f7ec:	ba000140 	blt	1fcf4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc20>
   1f7f0:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f7f4:	e2433004 	sub	r3, r3, #4
   1f7f8:	e3530004 	cmp	r3, #4
   1f7fc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f800:	ea00018a 	b	1fe30 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd5c>
   1f804:	0001f854 	.word	0x0001f854
   1f808:	0001fd30 	.word	0x0001fd30
   1f80c:	0001fd74 	.word	0x0001fd74
   1f810:	0001f854 	.word	0x0001f854
   1f814:	0001fd90 	.word	0x0001fd90
   1f818:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f81c:	e0433008 	sub	r3, r3, r8
   1f820:	e3530000 	cmp	r3, #0
   1f824:	ca000003 	bgt	1f838 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x764>
   1f828:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f82c:	e0483003 	sub	r3, r8, r3
   1f830:	e3530000 	cmp	r3, #0
   1f834:	da000167 	ble	1fdd8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd04>
   1f838:	e3a03000 	mov	r3, #0
   1f83c:	e1a02008 	mov	r2, r8
   1f840:	e3a01b01 	mov	r1, #1024	; 0x400
   1f844:	e1a00005 	mov	r0, r5
   1f848:	e58d3004 	str	r3, [sp, #4]
   1f84c:	e58d3000 	str	r3, [sp]
   1f850:	ebfffa80 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f854:	e35b0000 	cmp	fp, #0
   1f858:	0afffea3 	beq	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f85c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f860:	e3530006 	cmp	r3, #6
   1f864:	e6ef3073 	uxtb	r3, r3
   1f868:	8a000055 	bhi	1f9c4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8f0>
   1f86c:	e3530003 	cmp	r3, #3
   1f870:	8a00009f 	bhi	1faf4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa20>
   1f874:	e1a00005 	mov	r0, r5
   1f878:	e59f15cc 	ldr	r1, [pc, #1484]	; 1fe4c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd78>
   1f87c:	ebfffd9f 	bl	1ef00 <CTCPConnection::UnexpectedState(unsigned int)>
   1f880:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f884:	e3530000 	cmp	r3, #0
   1f888:	0afffe97 	beq	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f88c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f890:	e3530001 	cmp	r3, #1
   1f894:	0afffe94 	beq	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f898:	e5d5202a 	ldrb	r2, [r5, #42]	; 0x2a
   1f89c:	e59d301c 	ldr	r3, [sp, #28]
   1f8a0:	e3530000 	cmp	r3, #0
   1f8a4:	13520002 	cmpne	r2, #2
   1f8a8:	03a02001 	moveq	r2, #1
   1f8ac:	13a02000 	movne	r2, #0
   1f8b0:	0afffe8d 	beq	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f8b4:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f8b8:	e58d2004 	str	r2, [sp, #4]
   1f8bc:	e2833001 	add	r3, r3, #1
   1f8c0:	e58d2000 	str	r2, [sp]
   1f8c4:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f8c8:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f8cc:	e1a00005 	mov	r0, r5
   1f8d0:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f8d4:	ebfffa5f 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f8d8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f8dc:	e2433003 	sub	r3, r3, #3
   1f8e0:	e3530007 	cmp	r3, #7
   1f8e4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f8e8:	ea00014c 	b	1fe20 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd4c>
   1f8ec:	0001fc58 	.word	0x0001fc58
   1f8f0:	0001fc58 	.word	0x0001fc58
   1f8f4:	0001fca4 	.word	0x0001fca4
   1f8f8:	0001fc70 	.word	0x0001fc70
   1f8fc:	0001f2ec 	.word	0x0001f2ec
   1f900:	0001f2ec 	.word	0x0001f2ec
   1f904:	0001f2ec 	.word	0x0001f2ec
   1f908:	0001fd18 	.word	0x0001fd18
   1f90c:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f910:	e1580003 	cmp	r8, r3
   1f914:	1affffce 	bne	1f854 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1f918:	e3a02000 	mov	r2, #0
   1f91c:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f920:	e5c5205e 	strb	r2, [r5, #94]	; 0x5e
   1f924:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f928:	e58d2004 	str	r2, [sp, #4]
   1f92c:	e58d2000 	str	r2, [sp]
   1f930:	e1a00005 	mov	r0, r5
   1f934:	e1a02008 	mov	r2, r8
   1f938:	ebfffa46 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f93c:	e3a01002 	mov	r1, #2
   1f940:	e1a00005 	mov	r0, r5
   1f944:	e59f2504 	ldr	r2, [pc, #1284]	; 1fe50 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd7c>
   1f948:	ebfffb96 	bl	1e7a8 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1f94c:	eaffffc0 	b	1f854 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1f950:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f954:	e1580003 	cmp	r8, r3
   1f958:	1affffbd 	bne	1f854 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1f95c:	e3a03000 	mov	r3, #0
   1f960:	e2850068 	add	r0, r5, #104	; 0x68
   1f964:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1f968:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f96c:	eb0012c1 	bl	24478 <CSynchronizationEvent::Set()>
   1f970:	e3a00001 	mov	r0, #1
   1f974:	eafffdec 	b	1f12c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f978:	e3a03000 	mov	r3, #0
   1f97c:	e3e02000 	mvn	r2, #0
   1f980:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f984:	e2850068 	add	r0, r5, #104	; 0x68
   1f988:	e5c5305d 	strb	r3, [r5, #93]	; 0x5d
   1f98c:	e585202c 	str	r2, [r5, #44]	; 0x2c
   1f990:	eb0012b8 	bl	24478 <CSynchronizationEvent::Set()>
   1f994:	e3a00001 	mov	r0, #1
   1f998:	eafffde3 	b	1f12c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f99c:	e0833002 	add	r3, r3, r2
   1f9a0:	e0403003 	sub	r3, r0, r3
   1f9a4:	e3530000 	cmp	r3, #0
   1f9a8:	aafffe44 	bge	1f2c0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ec>
   1f9ac:	eafffeef 	b	1f570 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x49c>
   1f9b0:	e0831002 	add	r1, r3, r2
   1f9b4:	e0401001 	sub	r1, r0, r1
   1f9b8:	e3510000 	cmp	r1, #0
   1f9bc:	aafffee1 	bge	1f548 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x474>
   1f9c0:	eafffeea 	b	1f570 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x49c>
   1f9c4:	e2433007 	sub	r3, r3, #7
   1f9c8:	e3530003 	cmp	r3, #3
   1f9cc:	9affffab 	bls	1f880 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7ac>
   1f9d0:	eaffffa7 	b	1f874 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7a0>
   1f9d4:	e1a00005 	mov	r0, r5
   1f9d8:	e59f1474 	ldr	r1, [pc, #1140]	; 1fe54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd80>
   1f9dc:	ebfffd47 	bl	1ef00 <CTCPConnection::UnexpectedState(unsigned int)>
   1f9e0:	e3a00001 	mov	r0, #1
   1f9e4:	eafffdd0 	b	1f12c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f9e8:	e3e03000 	mvn	r3, #0
   1f9ec:	e2850048 	add	r0, r5, #72	; 0x48
   1f9f0:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1f9f4:	eb00028d 	bl	20430 <CRetransmissionQueue::Flush()>
   1f9f8:	e2850030 	add	r0, r5, #48	; 0x30
   1f9fc:	eb0005d4 	bl	21154 <CNetQueue::Flush()>
   1fa00:	e285003c 	add	r0, r5, #60	; 0x3c
   1fa04:	eb0005d2 	bl	21154 <CNetQueue::Flush()>
   1fa08:	eaffff19 	b	1f674 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5a0>
   1fa0c:	e3a07000 	mov	r7, #0
   1fa10:	e3a03004 	mov	r3, #4
   1fa14:	e3a01001 	mov	r1, #1
   1fa18:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fa1c:	e1a00005 	mov	r0, r5
   1fa20:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   1fa24:	ebfffab4 	bl	1e4fc <CTCPConnection::StopTimer(unsigned int)>
   1fa28:	e3a03005 	mov	r3, #5
   1fa2c:	e2850068 	add	r0, r5, #104	; 0x68
   1fa30:	e5853060 	str	r3, [r5, #96]	; 0x60
   1fa34:	eb00128f 	bl	24478 <CSynchronizationEvent::Set()>
   1fa38:	e59d3010 	ldr	r3, [sp, #16]
   1fa3c:	e58d7004 	str	r7, [sp, #4]
   1fa40:	e58d7000 	str	r7, [sp]
   1fa44:	e5853094 	str	r3, [r5, #148]	; 0x94
   1fa48:	e59d300c 	ldr	r3, [sp, #12]
   1fa4c:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fa50:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1fa54:	e1a00005 	mov	r0, r5
   1fa58:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fa5c:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fa60:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1fa64:	ebfff9fb 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fa68:	e2193c01 	ands	r3, r9, #256	; 0x100
   1fa6c:	e1560007 	cmp	r6, r7
   1fa70:	01530007 	cmpeq	r3, r7
   1fa74:	1affff76 	bne	1f854 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fa78:	eafffe1b 	b	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1fa7c:	e58d7004 	str	r7, [sp, #4]
   1fa80:	e58d7000 	str	r7, [sp]
   1fa84:	e1a03007 	mov	r3, r7
   1fa88:	e3a01b01 	mov	r1, #1024	; 0x400
   1fa8c:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fa90:	e1a00005 	mov	r0, r5
   1fa94:	ebfff9ef 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fa98:	e3e03000 	mvn	r3, #0
   1fa9c:	e5c5702a 	strb	r7, [r5, #42]	; 0x2a
   1faa0:	e2850068 	add	r0, r5, #104	; 0x68
   1faa4:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1faa8:	eb001272 	bl	24478 <CSynchronizationEvent::Set()>
   1faac:	e3560000 	cmp	r6, #0
   1fab0:	0afffe0d 	beq	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1fab4:	eafffe3e 	b	1f3b4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x2e0>
   1fab8:	e59d1014 	ldr	r1, [sp, #20]
   1fabc:	e1a03009 	mov	r3, r9
   1fac0:	e1a02006 	mov	r2, r6
   1fac4:	e0841001 	add	r1, r4, r1
   1fac8:	e285003c 	add	r0, r5, #60	; 0x3c
   1facc:	eb0005d4 	bl	21224 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1fad0:	eafffe6e 	b	1f490 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3bc>
   1fad4:	e3e02000 	mvn	r2, #0
   1fad8:	e3a03000 	mov	r3, #0
   1fadc:	e585202c 	str	r2, [r5, #44]	; 0x2c
   1fae0:	e2850068 	add	r0, r5, #104	; 0x68
   1fae4:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fae8:	eb001262 	bl	24478 <CSynchronizationEvent::Set()>
   1faec:	e3a00001 	mov	r0, #1
   1faf0:	eafffd8d 	b	1f12c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1faf4:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1faf8:	e59d200c 	ldr	r2, [sp, #12]
   1fafc:	e1520003 	cmp	r2, r3
   1fb00:	1a00001a 	bne	1fb70 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa9c>
   1fb04:	e3560000 	cmp	r6, #0
   1fb08:	0affff5c 	beq	1f880 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7ac>
   1fb0c:	e59d3014 	ldr	r3, [sp, #20]
   1fb10:	e1a02006 	mov	r2, r6
   1fb14:	e0841003 	add	r1, r4, r3
   1fb18:	e285003c 	add	r0, r5, #60	; 0x3c
   1fb1c:	e3a03000 	mov	r3, #0
   1fb20:	eb0005bf 	bl	21224 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1fb24:	e3a02000 	mov	r2, #0
   1fb28:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fb2c:	e58d2004 	str	r2, [sp, #4]
   1fb30:	e0863003 	add	r3, r6, r3
   1fb34:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1fb38:	e58d2000 	str	r2, [sp]
   1fb3c:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fb40:	e1a00005 	mov	r0, r5
   1fb44:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fb48:	ebfff9c2 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fb4c:	e3190b02 	tst	r9, #2048	; 0x800
   1fb50:	0affff4a 	beq	1f880 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7ac>
   1fb54:	e2850068 	add	r0, r5, #104	; 0x68
   1fb58:	eb001246 	bl	24478 <CSynchronizationEvent::Set()>
   1fb5c:	eaffff47 	b	1f880 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7ac>
   1fb60:	e59f22f0 	ldr	r2, [pc, #752]	; 1fe58 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd84>
   1fb64:	e59f12d8 	ldr	r1, [pc, #728]	; 1fe44 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd70>
   1fb68:	e59f02ec 	ldr	r0, [pc, #748]	; 1fe5c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd88>
   1fb6c:	eb0012c4 	bl	24684 <assertion_failed>
   1fb70:	e3a02000 	mov	r2, #0
   1fb74:	eafffdd6 	b	1f2d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x200>
   1fb78:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fb7c:	e0481002 	sub	r1, r8, r2
   1fb80:	e3510000 	cmp	r1, #0
   1fb84:	da00001a 	ble	1fbf4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb20>
   1fb88:	e0483003 	sub	r3, r8, r3
   1fb8c:	e3530000 	cmp	r3, #0
   1fb90:	caffff13 	bgt	1f7e4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x710>
   1fb94:	eaffff15 	b	1f7f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fb98:	e3520000 	cmp	r2, #0
   1fb9c:	1affff13 	bne	1f7f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fba0:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fba4:	e0483003 	sub	r3, r8, r3
   1fba8:	e3530000 	cmp	r3, #0
   1fbac:	caffff0f 	bgt	1f7f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fbb0:	e595309c 	ldr	r3, [r5, #156]	; 0x9c
   1fbb4:	e59d100c 	ldr	r1, [sp, #12]
   1fbb8:	e0432001 	sub	r2, r3, r1
   1fbbc:	e3520000 	cmp	r2, #0
   1fbc0:	ba000005 	blt	1fbdc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb08>
   1fbc4:	e1510003 	cmp	r1, r3
   1fbc8:	1affff08 	bne	1f7f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fbcc:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1fbd0:	e0433008 	sub	r3, r3, r8
   1fbd4:	e3530000 	cmp	r3, #0
   1fbd8:	caffff04 	bgt	1f7f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fbdc:	e59d3010 	ldr	r3, [sp, #16]
   1fbe0:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1fbe4:	e5853094 	str	r3, [r5, #148]	; 0x94
   1fbe8:	e59d300c 	ldr	r3, [sp, #12]
   1fbec:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1fbf0:	eafffefe 	b	1f7f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fbf4:	e1a01008 	mov	r1, r8
   1fbf8:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fbfc:	eb0002aa 	bl	206ac <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fc00:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fc04:	e595708c 	ldr	r7, [r5, #140]	; 0x8c
   1fc08:	e1580003 	cmp	r8, r3
   1fc0c:	e0487007 	sub	r7, r8, r7
   1fc10:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1fc14:	0a000030 	beq	1fcdc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc08>
   1fc18:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1fc1c:	e3530005 	cmp	r3, #5
   1fc20:	0a000029 	beq	1fccc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbf8>
   1fc24:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1fc28:	e3530008 	cmp	r3, #8
   1fc2c:	0a000026 	beq	1fccc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbf8>
   1fc30:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1fc34:	e3570001 	cmp	r7, #1
   1fc38:	03530004 	cmpeq	r3, #4
   1fc3c:	0affffdb 	beq	1fbb0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xadc>
   1fc40:	e3570000 	cmp	r7, #0
   1fc44:	0affffd9 	beq	1fbb0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xadc>
   1fc48:	e1a01007 	mov	r1, r7
   1fc4c:	e2850048 	add	r0, r5, #72	; 0x48
   1fc50:	eb0001d2 	bl	203a0 <CRetransmissionQueue::Advance(unsigned int)>
   1fc54:	eaffffd5 	b	1fbb0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xadc>
   1fc58:	e3a03007 	mov	r3, #7
   1fc5c:	e2850068 	add	r0, r5, #104	; 0x68
   1fc60:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fc64:	eb001203 	bl	24478 <CSynchronizationEvent::Set()>
   1fc68:	e3a00001 	mov	r0, #1
   1fc6c:	eafffd2e 	b	1f12c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fc70:	e3a01001 	mov	r1, #1
   1fc74:	e1a00005 	mov	r0, r5
   1fc78:	ebfffa1f 	bl	1e4fc <CTCPConnection::StopTimer(unsigned int)>
   1fc7c:	e1a00005 	mov	r0, r5
   1fc80:	e3a01000 	mov	r1, #0
   1fc84:	ebfffa1c 	bl	1e4fc <CTCPConnection::StopTimer(unsigned int)>
   1fc88:	e3a0300a 	mov	r3, #10
   1fc8c:	e1a00005 	mov	r0, r5
   1fc90:	e3a01002 	mov	r1, #2
   1fc94:	e59f21b4 	ldr	r2, [pc, #436]	; 1fe50 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd7c>
   1fc98:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fc9c:	ebfffac1 	bl	1e7a8 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fca0:	eafffd91 	b	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1fca4:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fca8:	e1580003 	cmp	r8, r3
   1fcac:	03a04000 	moveq	r4, #0
   1fcb0:	03a01001 	moveq	r1, #1
   1fcb4:	05c5405e 	strbeq	r4, [r5, #94]	; 0x5e
   1fcb8:	0affffed 	beq	1fc74 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xba0>
   1fcbc:	e3a03008 	mov	r3, #8
   1fcc0:	e3a00001 	mov	r0, #1
   1fcc4:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fcc8:	eafffd17 	b	1f12c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fccc:	e3a03000 	mov	r3, #0
   1fcd0:	e2477001 	sub	r7, r7, #1
   1fcd4:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1fcd8:	eaffffd4 	b	1fc30 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb5c>
   1fcdc:	e3a01001 	mov	r1, #1
   1fce0:	e1a00005 	mov	r0, r5
   1fce4:	ebfffa04 	bl	1e4fc <CTCPConnection::StopTimer(unsigned int)>
   1fce8:	e3a03005 	mov	r3, #5
   1fcec:	e5853060 	str	r3, [r5, #96]	; 0x60
   1fcf0:	eaffffc8 	b	1fc18 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb44>
   1fcf4:	e3a03000 	mov	r3, #0
   1fcf8:	e58d3004 	str	r3, [sp, #4]
   1fcfc:	e58d3000 	str	r3, [sp]
   1fd00:	e1a00005 	mov	r0, r5
   1fd04:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fd08:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fd0c:	ebfff951 	bl	1e258 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fd10:	e3a00001 	mov	r0, #1
   1fd14:	eafffd04 	b	1f12c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fd18:	e1a00005 	mov	r0, r5
   1fd1c:	e3a01002 	mov	r1, #2
   1fd20:	e59f2128 	ldr	r2, [pc, #296]	; 1fe50 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd7c>
   1fd24:	ebfffa9f 	bl	1e7a8 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fd28:	e3a00001 	mov	r0, #1
   1fd2c:	eafffcfe 	b	1f12c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fd30:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fd34:	e1580003 	cmp	r8, r3
   1fd38:	1afffec5 	bne	1f854 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fd3c:	e1a01008 	mov	r1, r8
   1fd40:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fd44:	eb000258 	bl	206ac <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fd48:	e3a03000 	mov	r3, #0
   1fd4c:	e3a01001 	mov	r1, #1
   1fd50:	e1a00005 	mov	r0, r5
   1fd54:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1fd58:	ebfff9e7 	bl	1e4fc <CTCPConnection::StopTimer(unsigned int)>
   1fd5c:	e3a03006 	mov	r3, #6
   1fd60:	e3a01002 	mov	r1, #2
   1fd64:	e1a00005 	mov	r0, r5
   1fd68:	e59f20e0 	ldr	r2, [pc, #224]	; 1fe50 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd7c>
   1fd6c:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fd70:	ebfffa8c 	bl	1e7a8 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fd74:	e2850048 	add	r0, r5, #72	; 0x48
   1fd78:	eb0000e3 	bl	2010c <CRetransmissionQueue::IsEmpty() const>
   1fd7c:	e3500000 	cmp	r0, #0
   1fd80:	0afffeb3 	beq	1f854 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fd84:	e2850068 	add	r0, r5, #104	; 0x68
   1fd88:	eb0011ba 	bl	24478 <CSynchronizationEvent::Set()>
   1fd8c:	eafffeb0 	b	1f854 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fd90:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fd94:	e1580003 	cmp	r8, r3
   1fd98:	1afffead 	bne	1f854 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fd9c:	e1a01008 	mov	r1, r8
   1fda0:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fda4:	eb000240 	bl	206ac <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fda8:	e3a03000 	mov	r3, #0
   1fdac:	e1a00005 	mov	r0, r5
   1fdb0:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1fdb4:	e3a01001 	mov	r1, #1
   1fdb8:	ebfff9cf 	bl	1e4fc <CTCPConnection::StopTimer(unsigned int)>
   1fdbc:	e3a0300a 	mov	r3, #10
   1fdc0:	e3a01002 	mov	r1, #2
   1fdc4:	e1a00005 	mov	r0, r5
   1fdc8:	e59f2080 	ldr	r2, [pc, #128]	; 1fe50 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd7c>
   1fdcc:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fdd0:	ebfffa74 	bl	1e7a8 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fdd4:	eafffe9e 	b	1f854 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fdd8:	e59d3010 	ldr	r3, [sp, #16]
   1fddc:	e1a01008 	mov	r1, r8
   1fde0:	e5853094 	str	r3, [r5, #148]	; 0x94
   1fde4:	e59d300c 	ldr	r3, [sp, #12]
   1fde8:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1fdec:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1fdf0:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1fdf4:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fdf8:	eb00022b 	bl	206ac <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fdfc:	e3a02004 	mov	r2, #4
   1fe00:	e3a03005 	mov	r3, #5
   1fe04:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1fe08:	e5853060 	str	r3, [r5, #96]	; 0x60
   1fe0c:	eafffe90 	b	1f854 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fe10:	e1a00005 	mov	r0, r5
   1fe14:	e59f1044 	ldr	r1, [pc, #68]	; 1fe60 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd8c>
   1fe18:	ebfffc38 	bl	1ef00 <CTCPConnection::UnexpectedState(unsigned int)>
   1fe1c:	eafffe8c 	b	1f854 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fe20:	e1a00005 	mov	r0, r5
   1fe24:	e59f1038 	ldr	r1, [pc, #56]	; 1fe64 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd90>
   1fe28:	ebfffc34 	bl	1ef00 <CTCPConnection::UnexpectedState(unsigned int)>
   1fe2c:	eafffd2e 	b	1f2ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1fe30:	e3a01e49 	mov	r1, #1168	; 0x490
   1fe34:	e1a00005 	mov	r0, r5
   1fe38:	ebfffc30 	bl	1ef00 <CTCPConnection::UnexpectedState(unsigned int)>
   1fe3c:	eafffe84 	b	1f854 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fe40:	0004da8c 	.word	0x0004da8c
   1fe44:	000439f0 	.word	0x000439f0
   1fe48:	000433c8 	.word	0x000433c8
   1fe4c:	000004dc 	.word	0x000004dc
   1fe50:	00001770 	.word	0x00001770
   1fe54:	000003e3 	.word	0x000003e3
   1fe58:	00000301 	.word	0x00000301
   1fe5c:	00043b70 	.word	0x00043b70
   1fe60:	000004a9 	.word	0x000004a9
   1fe64:	00000519 	.word	0x00000519

0001fe68 <CTCPConnection::TimerHandler(unsigned int)>:
   1fe68:	e3510002 	cmp	r1, #2
   1fe6c:	e92d4070 	push	{r4, r5, r6, lr}
   1fe70:	8a00002d 	bhi	1ff2c <CTCPConnection::TimerHandler(unsigned int)+0xc4>
   1fe74:	e1a04000 	mov	r4, r0
   1fe78:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   1fe7c:	e1a05001 	mov	r5, r1
   1fe80:	e3500000 	cmp	r0, #0
   1fe84:	1a00000c 	bne	1febc <CTCPConnection::TimerHandler(unsigned int)+0x54>
   1fe88:	e281301e 	add	r3, r1, #30
   1fe8c:	e0843103 	add	r3, r4, r3, lsl #2
   1fe90:	e5932004 	ldr	r2, [r3, #4]
   1fe94:	e3520000 	cmp	r2, #0
   1fe98:	15830004 	strne	r0, [r3, #4]
   1fe9c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1fea0:	e3550001 	cmp	r5, #1
   1fea4:	0a000012 	beq	1fef4 <CTCPConnection::TimerHandler(unsigned int)+0x8c>
   1fea8:	e3550002 	cmp	r5, #2
   1feac:	1a000054 	bne	20004 <CTCPConnection::TimerHandler(unsigned int)+0x19c>
   1feb0:	e3a03000 	mov	r3, #0
   1feb4:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1feb8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1febc:	eb002f24 	bl	2bb54 <EnterCritical>
   1fec0:	e285301e 	add	r3, r5, #30
   1fec4:	e0843103 	add	r3, r4, r3, lsl #2
   1fec8:	e5932004 	ldr	r2, [r3, #4]
   1fecc:	e3520000 	cmp	r2, #0
   1fed0:	0a000010 	beq	1ff18 <CTCPConnection::TimerHandler(unsigned int)+0xb0>
   1fed4:	e3a01000 	mov	r1, #0
   1fed8:	e5942088 	ldr	r2, [r4, #136]	; 0x88
   1fedc:	e5831004 	str	r1, [r3, #4]
   1fee0:	e1520001 	cmp	r2, r1
   1fee4:	0affffed 	beq	1fea0 <CTCPConnection::TimerHandler(unsigned int)+0x38>
   1fee8:	eb002f43 	bl	2bbfc <LeaveCritical>
   1feec:	e3550001 	cmp	r5, #1
   1fef0:	1affffec 	bne	1fea8 <CTCPConnection::TimerHandler(unsigned int)+0x40>
   1fef4:	e28400b8 	add	r0, r4, #184	; 0xb8
   1fef8:	eb0001ac 	bl	205b0 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>
   1fefc:	e5943060 	ldr	r3, [r4, #96]	; 0x60
   1ff00:	e3530000 	cmp	r3, #0
   1ff04:	e2433001 	sub	r3, r3, #1
   1ff08:	e5843060 	str	r3, [r4, #96]	; 0x60
   1ff0c:	1a00000a 	bne	1ff3c <CTCPConnection::TimerHandler(unsigned int)+0xd4>
   1ff10:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1ff14:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ff18:	e5943088 	ldr	r3, [r4, #136]	; 0x88
   1ff1c:	e3530000 	cmp	r3, #0
   1ff20:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ff24:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ff28:	ea002f33 	b	2bbfc <LeaveCritical>
   1ff2c:	e59f20e0 	ldr	r2, [pc, #224]	; 20014 <CTCPConnection::TimerHandler(unsigned int)+0x1ac>
   1ff30:	e59f10e0 	ldr	r1, [pc, #224]	; 20018 <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   1ff34:	e59f00e0 	ldr	r0, [pc, #224]	; 2001c <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   1ff38:	eb0011d1 	bl	24684 <assertion_failed>
   1ff3c:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1ff40:	e353000a 	cmp	r3, #10
   1ff44:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1ff48:	ea00000a 	b	1ff78 <CTCPConnection::TimerHandler(unsigned int)+0x110>
   1ff4c:	0001ff7c 	.word	0x0001ff7c
   1ff50:	0001ff7c 	.word	0x0001ff7c
   1ff54:	0001ffbc 	.word	0x0001ffbc
   1ff58:	0001ffbc 	.word	0x0001ffbc
   1ff5c:	0001ffa4 	.word	0x0001ffa4
   1ff60:	0001ff8c 	.word	0x0001ff8c
   1ff64:	0001ff7c 	.word	0x0001ff7c
   1ff68:	0001ffa4 	.word	0x0001ffa4
   1ff6c:	0001ff8c 	.word	0x0001ff8c
   1ff70:	0001ff8c 	.word	0x0001ff8c
   1ff74:	0001ff7c 	.word	0x0001ff7c
   1ff78:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ff7c:	e1a00004 	mov	r0, r4
   1ff80:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ff84:	e59f1094 	ldr	r1, [pc, #148]	; 20020 <CTCPConnection::TimerHandler(unsigned int)+0x1b8>
   1ff88:	eafffbdc 	b	1ef00 <CTCPConnection::UnexpectedState(unsigned int)>
   1ff8c:	e5d4305e 	ldrb	r3, [r4, #94]	; 0x5e
   1ff90:	e3530000 	cmp	r3, #0
   1ff94:	1a00000e 	bne	1ffd4 <CTCPConnection::TimerHandler(unsigned int)+0x16c>
   1ff98:	e3a03001 	mov	r3, #1
   1ff9c:	e5c4305e 	strb	r3, [r4, #94]	; 0x5e
   1ffa0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ffa4:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
   1ffa8:	e3530000 	cmp	r3, #0
   1ffac:	1a00000c 	bne	1ffe4 <CTCPConnection::TimerHandler(unsigned int)+0x17c>
   1ffb0:	e3a03001 	mov	r3, #1
   1ffb4:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
   1ffb8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ffbc:	e5d4305d 	ldrb	r3, [r4, #93]	; 0x5d
   1ffc0:	e3530000 	cmp	r3, #0
   1ffc4:	1a00000a 	bne	1fff4 <CTCPConnection::TimerHandler(unsigned int)+0x18c>
   1ffc8:	e3a03001 	mov	r3, #1
   1ffcc:	e5c4305d 	strb	r3, [r4, #93]	; 0x5d
   1ffd0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ffd4:	e59f2048 	ldr	r2, [pc, #72]	; 20024 <CTCPConnection::TimerHandler(unsigned int)+0x1bc>
   1ffd8:	e59f1038 	ldr	r1, [pc, #56]	; 20018 <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   1ffdc:	e59f0044 	ldr	r0, [pc, #68]	; 20028 <CTCPConnection::TimerHandler(unsigned int)+0x1c0>
   1ffe0:	eb0011a7 	bl	24684 <assertion_failed>
   1ffe4:	e59f2040 	ldr	r2, [pc, #64]	; 2002c <CTCPConnection::TimerHandler(unsigned int)+0x1c4>
   1ffe8:	e59f1028 	ldr	r1, [pc, #40]	; 20018 <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   1ffec:	e59f003c 	ldr	r0, [pc, #60]	; 20030 <CTCPConnection::TimerHandler(unsigned int)+0x1c8>
   1fff0:	eb0011a3 	bl	24684 <assertion_failed>
   1fff4:	e59f2038 	ldr	r2, [pc, #56]	; 20034 <CTCPConnection::TimerHandler(unsigned int)+0x1cc>
   1fff8:	e59f1018 	ldr	r1, [pc, #24]	; 20018 <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   1fffc:	e59f0034 	ldr	r0, [pc, #52]	; 20038 <CTCPConnection::TimerHandler(unsigned int)+0x1d0>
   20000:	eb00119f 	bl	24684 <assertion_failed>
   20004:	e59f2030 	ldr	r2, [pc, #48]	; 2003c <CTCPConnection::TimerHandler(unsigned int)+0x1d4>
   20008:	e59f1008 	ldr	r1, [pc, #8]	; 20018 <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   2000c:	e59f002c 	ldr	r0, [pc, #44]	; 20040 <CTCPConnection::TimerHandler(unsigned int)+0x1d8>
   20010:	eb00119b 	bl	24684 <assertion_failed>
   20014:	000005d9 	.word	0x000005d9
   20018:	000439f0 	.word	0x000439f0
   2001c:	00043a34 	.word	0x00043a34
   20020:	000005f9 	.word	0x000005f9
   20024:	0000060b 	.word	0x0000060b
   20028:	00043a80 	.word	0x00043a80
   2002c:	00000604 	.word	0x00000604
   20030:	00043b8c 	.word	0x00043b8c
   20034:	000005fe 	.word	0x000005fe
   20038:	00043b80 	.word	0x00043b80
   2003c:	00000617 	.word	0x00000617
   20040:	0003f63c 	.word	0x0003f63c

00020044 <CTCPConnection::TimerStub(unsigned int, void*, void*)>:
   20044:	e2520000 	subs	r0, r2, #0
   20048:	e92d4010 	push	{r4, lr}
   2004c:	0a000003 	beq	20060 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x1c>
   20050:	e3510002 	cmp	r1, #2
   20054:	8a000005 	bhi	20070 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x2c>
   20058:	e8bd4010 	pop	{r4, lr}
   2005c:	eaffff81 	b	1fe68 <CTCPConnection::TimerHandler(unsigned int)>
   20060:	e59f2018 	ldr	r2, [pc, #24]	; 20080 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x3c>
   20064:	e59f1018 	ldr	r1, [pc, #24]	; 20084 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x40>
   20068:	e59f0018 	ldr	r0, [pc, #24]	; 20088 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x44>
   2006c:	eb001184 	bl	24684 <assertion_failed>
   20070:	e59f2014 	ldr	r2, [pc, #20]	; 2008c <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x48>
   20074:	e59f1008 	ldr	r1, [pc, #8]	; 20084 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x40>
   20078:	e59f0010 	ldr	r0, [pc, #16]	; 20090 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x4c>
   2007c:	eb001180 	bl	24684 <assertion_failed>
   20080:	0000061f 	.word	0x0000061f
   20084:	000439f0 	.word	0x000439f0
   20088:	0003ea38 	.word	0x0003ea38
   2008c:	00000622 	.word	0x00000622
   20090:	00043a34 	.word	0x00043a34

00020094 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>:
   20094:	e3a03000 	mov	r3, #0
   20098:	e3510001 	cmp	r1, #1
   2009c:	e92d4010 	push	{r4, lr}
   200a0:	e880000a 	stm	r0, {r1, r3}
   200a4:	e5803008 	str	r3, [r0, #8]
   200a8:	e580300c 	str	r3, [r0, #12]
   200ac:	e5803010 	str	r3, [r0, #16]
   200b0:	9a000006 	bls	200d0 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x3c>
   200b4:	e1a04000 	mov	r4, r0
   200b8:	e1a00001 	mov	r0, r1
   200bc:	eb002b7d 	bl	2aeb8 <operator new[](unsigned int)>
   200c0:	e1a03000 	mov	r3, r0
   200c4:	e1a00004 	mov	r0, r4
   200c8:	e5843004 	str	r3, [r4, #4]
   200cc:	e8bd8010 	pop	{r4, pc}
   200d0:	e3a0201e 	mov	r2, #30
   200d4:	e59f1004 	ldr	r1, [pc, #4]	; 200e0 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x4c>
   200d8:	e59f0004 	ldr	r0, [pc, #4]	; 200e4 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x50>
   200dc:	eb001168 	bl	24684 <assertion_failed>
   200e0:	00043c8c 	.word	0x00043c8c
   200e4:	00043ca4 	.word	0x00043ca4

000200e8 <CRetransmissionQueue::~CRetransmissionQueue()>:
   200e8:	e92d4010 	push	{r4, lr}
   200ec:	e1a04000 	mov	r4, r0
   200f0:	e5900004 	ldr	r0, [r0, #4]
   200f4:	e3500000 	cmp	r0, #0
   200f8:	0a000001 	beq	20104 <CRetransmissionQueue::~CRetransmissionQueue()+0x1c>
   200fc:	e3a01001 	mov	r1, #1
   20100:	eb002b74 	bl	2aed8 <operator delete(void*, unsigned int)>
   20104:	e1a00004 	mov	r0, r4
   20108:	e8bd8010 	pop	{r4, pc}

0002010c <CRetransmissionQueue::IsEmpty() const>:
   2010c:	e590200c 	ldr	r2, [r0, #12]
   20110:	e5900008 	ldr	r0, [r0, #8]
   20114:	e0420000 	sub	r0, r2, r0
   20118:	e16f0f10 	clz	r0, r0
   2011c:	e1a002a0 	lsr	r0, r0, #5
   20120:	e12fff1e 	bx	lr

00020124 <CRetransmissionQueue::GetFreeSpace() const>:
   20124:	e5903000 	ldr	r3, [r0]
   20128:	e92d4010 	push	{r4, lr}
   2012c:	e3530001 	cmp	r3, #1
   20130:	9a00000b 	bls	20164 <CRetransmissionQueue::GetFreeSpace() const+0x40>
   20134:	e5902008 	ldr	r2, [r0, #8]
   20138:	e1530002 	cmp	r3, r2
   2013c:	9a00000c 	bls	20174 <CRetransmissionQueue::GetFreeSpace() const+0x50>
   20140:	e590000c 	ldr	r0, [r0, #12]
   20144:	e1530000 	cmp	r3, r0
   20148:	9a00000d 	bls	20184 <CRetransmissionQueue::GetFreeSpace() const+0x60>
   2014c:	e1520000 	cmp	r2, r0
   20150:	20833000 	addcs	r3, r3, r0
   20154:	22433001 	subcs	r3, r3, #1
   20158:	32403001 	subcc	r3, r0, #1
   2015c:	e0430002 	sub	r0, r3, r2
   20160:	e8bd8010 	pop	{r4, pc}
   20164:	e3a02033 	mov	r2, #51	; 0x33
   20168:	e59f1024 	ldr	r1, [pc, #36]	; 20194 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   2016c:	e59f0024 	ldr	r0, [pc, #36]	; 20198 <CRetransmissionQueue::GetFreeSpace() const+0x74>
   20170:	eb001143 	bl	24684 <assertion_failed>
   20174:	e3a02034 	mov	r2, #52	; 0x34
   20178:	e59f1014 	ldr	r1, [pc, #20]	; 20194 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   2017c:	e59f0018 	ldr	r0, [pc, #24]	; 2019c <CRetransmissionQueue::GetFreeSpace() const+0x78>
   20180:	eb00113f 	bl	24684 <assertion_failed>
   20184:	e3a02035 	mov	r2, #53	; 0x35
   20188:	e59f1004 	ldr	r1, [pc, #4]	; 20194 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   2018c:	e59f000c 	ldr	r0, [pc, #12]	; 201a0 <CRetransmissionQueue::GetFreeSpace() const+0x7c>
   20190:	eb00113b 	bl	24684 <assertion_failed>
   20194:	00043c8c 	.word	0x00043c8c
   20198:	00043ca4 	.word	0x00043ca4
   2019c:	00043cb0 	.word	0x00043cb0
   201a0:	00043cc4 	.word	0x00043cc4

000201a4 <CRetransmissionQueue::Write(void const*, unsigned int)>:
   201a4:	e92d4070 	push	{r4, r5, r6, lr}
   201a8:	e2526000 	subs	r6, r2, #0
   201ac:	0a000017 	beq	20210 <CRetransmissionQueue::Write(void const*, unsigned int)+0x6c>
   201b0:	e1a05001 	mov	r5, r1
   201b4:	e1a04000 	mov	r4, r0
   201b8:	ebffffd9 	bl	20124 <CRetransmissionQueue::GetFreeSpace() const>
   201bc:	e1500006 	cmp	r0, r6
   201c0:	3a000016 	bcc	20220 <CRetransmissionQueue::Write(void const*, unsigned int)+0x7c>
   201c4:	e3550000 	cmp	r5, #0
   201c8:	0a000018 	beq	20230 <CRetransmissionQueue::Write(void const*, unsigned int)+0x8c>
   201cc:	e5943004 	ldr	r3, [r4, #4]
   201d0:	e3530000 	cmp	r3, #0
   201d4:	15941008 	ldrne	r1, [r4, #8]
   201d8:	10856006 	addne	r6, r5, r6
   201dc:	0a000017 	beq	20240 <CRetransmissionQueue::Write(void const*, unsigned int)+0x9c>
   201e0:	e2812001 	add	r2, r1, #1
   201e4:	e5842008 	str	r2, [r4, #8]
   201e8:	e4d52001 	ldrb	r2, [r5], #1
   201ec:	e7c32001 	strb	r2, [r3, r1]
   201f0:	e5940008 	ldr	r0, [r4, #8]
   201f4:	e5941000 	ldr	r1, [r4]
   201f8:	eb00738e 	bl	3d038 <__aeabi_uidivmod>
   201fc:	e1560005 	cmp	r6, r5
   20200:	e5841008 	str	r1, [r4, #8]
   20204:	08bd8070 	popeq	{r4, r5, r6, pc}
   20208:	e5943004 	ldr	r3, [r4, #4]
   2020c:	eafffff3 	b	201e0 <CRetransmissionQueue::Write(void const*, unsigned int)+0x3c>
   20210:	e3a02041 	mov	r2, #65	; 0x41
   20214:	e59f1034 	ldr	r1, [pc, #52]	; 20250 <CRetransmissionQueue::Write(void const*, unsigned int)+0xac>
   20218:	e59f0034 	ldr	r0, [pc, #52]	; 20254 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   2021c:	eb001118 	bl	24684 <assertion_failed>
   20220:	e3a02042 	mov	r2, #66	; 0x42
   20224:	e59f1024 	ldr	r1, [pc, #36]	; 20250 <CRetransmissionQueue::Write(void const*, unsigned int)+0xac>
   20228:	e59f0028 	ldr	r0, [pc, #40]	; 20258 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb4>
   2022c:	eb001114 	bl	24684 <assertion_failed>
   20230:	e3a02045 	mov	r2, #69	; 0x45
   20234:	e59f1014 	ldr	r1, [pc, #20]	; 20250 <CRetransmissionQueue::Write(void const*, unsigned int)+0xac>
   20238:	e59f001c 	ldr	r0, [pc, #28]	; 2025c <CRetransmissionQueue::Write(void const*, unsigned int)+0xb8>
   2023c:	eb001110 	bl	24684 <assertion_failed>
   20240:	e3a02046 	mov	r2, #70	; 0x46
   20244:	e59f1004 	ldr	r1, [pc, #4]	; 20250 <CRetransmissionQueue::Write(void const*, unsigned int)+0xac>
   20248:	e59f0010 	ldr	r0, [pc, #16]	; 20260 <CRetransmissionQueue::Write(void const*, unsigned int)+0xbc>
   2024c:	eb00110c 	bl	24684 <assertion_failed>
   20250:	00043c8c 	.word	0x00043c8c
   20254:	00043358 	.word	0x00043358
   20258:	00043cd8 	.word	0x00043cd8
   2025c:	00043cf4 	.word	0x00043cf4
   20260:	00041138 	.word	0x00041138

00020264 <CRetransmissionQueue::GetBytesAvailable() const>:
   20264:	e5903000 	ldr	r3, [r0]
   20268:	e92d4010 	push	{r4, lr}
   2026c:	e3530001 	cmp	r3, #1
   20270:	9a00000a 	bls	202a0 <CRetransmissionQueue::GetBytesAvailable() const+0x3c>
   20274:	e5902008 	ldr	r2, [r0, #8]
   20278:	e1530002 	cmp	r3, r2
   2027c:	9a00000b 	bls	202b0 <CRetransmissionQueue::GetBytesAvailable() const+0x4c>
   20280:	e5900010 	ldr	r0, [r0, #16]
   20284:	e1530000 	cmp	r3, r0
   20288:	9a00000c 	bls	202c0 <CRetransmissionQueue::GetBytesAvailable() const+0x5c>
   2028c:	e1520000 	cmp	r2, r0
   20290:	30833002 	addcc	r3, r3, r2
   20294:	30430000 	subcc	r0, r3, r0
   20298:	20420000 	subcs	r0, r2, r0
   2029c:	e8bd8010 	pop	{r4, pc}
   202a0:	e3a02051 	mov	r2, #81	; 0x51
   202a4:	e59f1024 	ldr	r1, [pc, #36]	; 202d0 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   202a8:	e59f0024 	ldr	r0, [pc, #36]	; 202d4 <CRetransmissionQueue::GetBytesAvailable() const+0x70>
   202ac:	eb0010f4 	bl	24684 <assertion_failed>
   202b0:	e3a02052 	mov	r2, #82	; 0x52
   202b4:	e59f1014 	ldr	r1, [pc, #20]	; 202d0 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   202b8:	e59f0018 	ldr	r0, [pc, #24]	; 202d8 <CRetransmissionQueue::GetBytesAvailable() const+0x74>
   202bc:	eb0010f0 	bl	24684 <assertion_failed>
   202c0:	e3a02053 	mov	r2, #83	; 0x53
   202c4:	e59f1004 	ldr	r1, [pc, #4]	; 202d0 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   202c8:	e59f000c 	ldr	r0, [pc, #12]	; 202dc <CRetransmissionQueue::GetBytesAvailable() const+0x78>
   202cc:	eb0010ec 	bl	24684 <assertion_failed>
   202d0:	00043c8c 	.word	0x00043c8c
   202d4:	00043ca4 	.word	0x00043ca4
   202d8:	00043cb0 	.word	0x00043cb0
   202dc:	00043cfc 	.word	0x00043cfc

000202e0 <CRetransmissionQueue::Read(void*, unsigned int)>:
   202e0:	e92d4070 	push	{r4, r5, r6, lr}
   202e4:	e2526000 	subs	r6, r2, #0
   202e8:	0a000017 	beq	2034c <CRetransmissionQueue::Read(void*, unsigned int)+0x6c>
   202ec:	e1a05001 	mov	r5, r1
   202f0:	e1a04000 	mov	r4, r0
   202f4:	ebffffda 	bl	20264 <CRetransmissionQueue::GetBytesAvailable() const>
   202f8:	e1500006 	cmp	r0, r6
   202fc:	3a000016 	bcc	2035c <CRetransmissionQueue::Read(void*, unsigned int)+0x7c>
   20300:	e3550000 	cmp	r5, #0
   20304:	0a000018 	beq	2036c <CRetransmissionQueue::Read(void*, unsigned int)+0x8c>
   20308:	e5943004 	ldr	r3, [r4, #4]
   2030c:	e3530000 	cmp	r3, #0
   20310:	15941010 	ldrne	r1, [r4, #16]
   20314:	10856006 	addne	r6, r5, r6
   20318:	0a000017 	beq	2037c <CRetransmissionQueue::Read(void*, unsigned int)+0x9c>
   2031c:	e2812001 	add	r2, r1, #1
   20320:	e5842010 	str	r2, [r4, #16]
   20324:	e7d33001 	ldrb	r3, [r3, r1]
   20328:	e4c53001 	strb	r3, [r5], #1
   2032c:	e5940010 	ldr	r0, [r4, #16]
   20330:	e5941000 	ldr	r1, [r4]
   20334:	eb00733f 	bl	3d038 <__aeabi_uidivmod>
   20338:	e1560005 	cmp	r6, r5
   2033c:	e5841010 	str	r1, [r4, #16]
   20340:	08bd8070 	popeq	{r4, r5, r6, pc}
   20344:	e5943004 	ldr	r3, [r4, #4]
   20348:	eafffff3 	b	2031c <CRetransmissionQueue::Read(void*, unsigned int)+0x3c>
   2034c:	e3a0205f 	mov	r2, #95	; 0x5f
   20350:	e59f1034 	ldr	r1, [pc, #52]	; 2038c <CRetransmissionQueue::Read(void*, unsigned int)+0xac>
   20354:	e59f0034 	ldr	r0, [pc, #52]	; 20390 <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   20358:	eb0010c9 	bl	24684 <assertion_failed>
   2035c:	e3a02060 	mov	r2, #96	; 0x60
   20360:	e59f1024 	ldr	r1, [pc, #36]	; 2038c <CRetransmissionQueue::Read(void*, unsigned int)+0xac>
   20364:	e59f0028 	ldr	r0, [pc, #40]	; 20394 <CRetransmissionQueue::Read(void*, unsigned int)+0xb4>
   20368:	eb0010c5 	bl	24684 <assertion_failed>
   2036c:	e3a02063 	mov	r2, #99	; 0x63
   20370:	e59f1014 	ldr	r1, [pc, #20]	; 2038c <CRetransmissionQueue::Read(void*, unsigned int)+0xac>
   20374:	e59f001c 	ldr	r0, [pc, #28]	; 20398 <CRetransmissionQueue::Read(void*, unsigned int)+0xb8>
   20378:	eb0010c1 	bl	24684 <assertion_failed>
   2037c:	e3a02064 	mov	r2, #100	; 0x64
   20380:	e59f1004 	ldr	r1, [pc, #4]	; 2038c <CRetransmissionQueue::Read(void*, unsigned int)+0xac>
   20384:	e59f0010 	ldr	r0, [pc, #16]	; 2039c <CRetransmissionQueue::Read(void*, unsigned int)+0xbc>
   20388:	eb0010bd 	bl	24684 <assertion_failed>
   2038c:	00043c8c 	.word	0x00043c8c
   20390:	00043358 	.word	0x00043358
   20394:	00043d14 	.word	0x00043d14
   20398:	00043cf4 	.word	0x00043cf4
   2039c:	00041138 	.word	0x00041138

000203a0 <CRetransmissionQueue::Advance(unsigned int)>:
   203a0:	e5903000 	ldr	r3, [r0]
   203a4:	e92d4010 	push	{r4, lr}
   203a8:	e3530001 	cmp	r3, #1
   203ac:	9a00000c 	bls	203e4 <CRetransmissionQueue::Advance(unsigned int)+0x44>
   203b0:	e590200c 	ldr	r2, [r0, #12]
   203b4:	e1a04000 	mov	r4, r0
   203b8:	e1530002 	cmp	r3, r2
   203bc:	9a00000c 	bls	203f4 <CRetransmissionQueue::Advance(unsigned int)+0x54>
   203c0:	e1a00001 	mov	r0, r1
   203c4:	e5941010 	ldr	r1, [r4, #16]
   203c8:	e1530001 	cmp	r3, r1
   203cc:	9a00000c 	bls	20404 <CRetransmissionQueue::Advance(unsigned int)+0x64>
   203d0:	e1a01003 	mov	r1, r3
   203d4:	e0820000 	add	r0, r2, r0
   203d8:	eb007316 	bl	3d038 <__aeabi_uidivmod>
   203dc:	e584100c 	str	r1, [r4, #12]
   203e0:	e8bd8010 	pop	{r4, pc}
   203e4:	e3a0206f 	mov	r2, #111	; 0x6f
   203e8:	e59f1024 	ldr	r1, [pc, #36]	; 20414 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   203ec:	e59f0024 	ldr	r0, [pc, #36]	; 20418 <CRetransmissionQueue::Advance(unsigned int)+0x78>
   203f0:	eb0010a3 	bl	24684 <assertion_failed>
   203f4:	e3a02070 	mov	r2, #112	; 0x70
   203f8:	e59f1014 	ldr	r1, [pc, #20]	; 20414 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   203fc:	e59f0018 	ldr	r0, [pc, #24]	; 2041c <CRetransmissionQueue::Advance(unsigned int)+0x7c>
   20400:	eb00109f 	bl	24684 <assertion_failed>
   20404:	e3a02071 	mov	r2, #113	; 0x71
   20408:	e59f1004 	ldr	r1, [pc, #4]	; 20414 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   2040c:	e59f000c 	ldr	r0, [pc, #12]	; 20420 <CRetransmissionQueue::Advance(unsigned int)+0x80>
   20410:	eb00109b 	bl	24684 <assertion_failed>
   20414:	00043c8c 	.word	0x00043c8c
   20418:	00043ca4 	.word	0x00043ca4
   2041c:	00043cc4 	.word	0x00043cc4
   20420:	00043cfc 	.word	0x00043cfc

00020424 <CRetransmissionQueue::Reset()>:
   20424:	e590300c 	ldr	r3, [r0, #12]
   20428:	e5803010 	str	r3, [r0, #16]
   2042c:	e12fff1e 	bx	lr

00020430 <CRetransmissionQueue::Flush()>:
   20430:	e3a03000 	mov	r3, #0
   20434:	e5803008 	str	r3, [r0, #8]
   20438:	e580300c 	str	r3, [r0, #12]
   2043c:	e5803010 	str	r3, [r0, #16]
   20440:	e12fff1e 	bx	lr

00020444 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>:
   20444:	e92d4010 	push	{r4, lr}
   20448:	e1a04000 	mov	r4, r0
   2044c:	eb002658 	bl	29db4 <CTimer::Get()>
   20450:	e3a03000 	mov	r3, #0
   20454:	e3a02001 	mov	r2, #1
   20458:	e3a01f4b 	mov	r1, #300	; 0x12c
   2045c:	e1500003 	cmp	r0, r3
   20460:	e5840000 	str	r0, [r4]
   20464:	e5841008 	str	r1, [r4, #8]
   20468:	e5843004 	str	r3, [r4, #4]
   2046c:	e5c43018 	strb	r3, [r4, #24]
   20470:	e5843020 	str	r3, [r4, #32]
   20474:	e5c4200c 	strb	r2, [r4, #12]
   20478:	e5842024 	str	r2, [r4, #36]	; 0x24
   2047c:	0a000001 	beq	20488 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x44>
   20480:	e1a00004 	mov	r0, r4
   20484:	e8bd8010 	pop	{r4, pc}
   20488:	e3a02033 	mov	r2, #51	; 0x33
   2048c:	e59f1004 	ldr	r1, [pc, #4]	; 20498 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x54>
   20490:	e59f0004 	ldr	r0, [pc, #4]	; 2049c <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x58>
   20494:	eb00107a 	bl	24684 <assertion_failed>
   20498:	00043d34 	.word	0x00043d34
   2049c:	0003ea88 	.word	0x0003ea88

000204a0 <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>:
   204a0:	e12fff1e 	bx	lr

000204a4 <CRetransmissionTimeoutCalculator::GetRTO() const>:
   204a4:	e5900008 	ldr	r0, [r0, #8]
   204a8:	e12fff1e 	bx	lr

000204ac <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>:
   204ac:	e92d4070 	push	{r4, r5, r6, lr}
   204b0:	e1a04000 	mov	r4, r0
   204b4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   204b8:	e1a05001 	mov	r5, r1
   204bc:	e3500000 	cmp	r0, #0
   204c0:	1a000007 	bne	204e4 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)+0x38>
   204c4:	e3a02f4b 	mov	r2, #300	; 0x12c
   204c8:	e3a03001 	mov	r3, #1
   204cc:	e5841004 	str	r1, [r4, #4]
   204d0:	e5c40018 	strb	r0, [r4, #24]
   204d4:	e5840020 	str	r0, [r4, #32]
   204d8:	e5842008 	str	r2, [r4, #8]
   204dc:	e5c4300c 	strb	r3, [r4, #12]
   204e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   204e4:	eb002d9a 	bl	2bb54 <EnterCritical>
   204e8:	e3a03000 	mov	r3, #0
   204ec:	e3a01f4b 	mov	r1, #300	; 0x12c
   204f0:	e3a02001 	mov	r2, #1
   204f4:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   204f8:	e5845004 	str	r5, [r4, #4]
   204fc:	e1500003 	cmp	r0, r3
   20500:	e5841008 	str	r1, [r4, #8]
   20504:	e5c4200c 	strb	r2, [r4, #12]
   20508:	e5c43018 	strb	r3, [r4, #24]
   2050c:	e5843020 	str	r3, [r4, #32]
   20510:	08bd8070 	popeq	{r4, r5, r6, pc}
   20514:	e8bd4070 	pop	{r4, r5, r6, lr}
   20518:	ea002db7 	b	2bbfc <LeaveCritical>

0002051c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>:
   2051c:	e92d4010 	push	{r4, lr}
   20520:	e1a04000 	mov	r4, r0
   20524:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   20528:	e3500000 	cmp	r0, #0
   2052c:	1a000011 	bne	20578 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x5c>
   20530:	e5d43018 	ldrb	r3, [r4, #24]
   20534:	e3530000 	cmp	r3, #0
   20538:	18bd8010 	popne	{r4, pc}
   2053c:	e5943020 	ldr	r3, [r4, #32]
   20540:	e3530000 	cmp	r3, #0
   20544:	1a000006 	bne	20564 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   20548:	e3a03001 	mov	r3, #1
   2054c:	e5940000 	ldr	r0, [r4]
   20550:	e5c43018 	strb	r3, [r4, #24]
   20554:	e3500000 	cmp	r0, #0
   20558:	0a00000e 	beq	20598 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x7c>
   2055c:	eb002362 	bl	292ec <CTimer::GetTicks() const>
   20560:	e584001c 	str	r0, [r4, #28]
   20564:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   20568:	e3530000 	cmp	r3, #0
   2056c:	08bd8010 	popeq	{r4, pc}
   20570:	e8bd4010 	pop	{r4, lr}
   20574:	ea002da0 	b	2bbfc <LeaveCritical>
   20578:	eb002d75 	bl	2bb54 <EnterCritical>
   2057c:	e5d43018 	ldrb	r3, [r4, #24]
   20580:	e3530000 	cmp	r3, #0
   20584:	1afffff6 	bne	20564 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   20588:	e5943020 	ldr	r3, [r4, #32]
   2058c:	e3530000 	cmp	r3, #0
   20590:	1afffff3 	bne	20564 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   20594:	eaffffeb 	b	20548 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x2c>
   20598:	e3a0205f 	mov	r2, #95	; 0x5f
   2059c:	e59f1004 	ldr	r1, [pc, #4]	; 205a8 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x8c>
   205a0:	e59f0004 	ldr	r0, [pc, #4]	; 205ac <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x90>
   205a4:	eb001036 	bl	24684 <assertion_failed>
   205a8:	00043d34 	.word	0x00043d34
   205ac:	0003ea88 	.word	0x0003ea88

000205b0 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>:
   205b0:	e92d4010 	push	{r4, lr}
   205b4:	e1a04000 	mov	r4, r0
   205b8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   205bc:	e3500000 	cmp	r0, #0
   205c0:	1a000011 	bne	2060c <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x5c>
   205c4:	e5943008 	ldr	r3, [r4, #8]
   205c8:	e59f2048 	ldr	r2, [pc, #72]	; 20618 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x68>
   205cc:	e1a03083 	lsl	r3, r3, #1
   205d0:	e1530002 	cmp	r3, r2
   205d4:	21a03002 	movcs	r3, r2
   205d8:	e5942020 	ldr	r2, [r4, #32]
   205dc:	e5843008 	str	r3, [r4, #8]
   205e0:	e2823001 	add	r3, r2, #1
   205e4:	e3530002 	cmp	r3, #2
   205e8:	e5843020 	str	r3, [r4, #32]
   205ec:	83a03001 	movhi	r3, #1
   205f0:	85c4300c 	strbhi	r3, [r4, #12]
   205f4:	e3a03000 	mov	r3, #0
   205f8:	e1500003 	cmp	r0, r3
   205fc:	e5c43018 	strb	r3, [r4, #24]
   20600:	08bd8010 	popeq	{r4, pc}
   20604:	e8bd4010 	pop	{r4, lr}
   20608:	ea002d7b 	b	2bbfc <LeaveCritical>
   2060c:	eb002d50 	bl	2bb54 <EnterCritical>
   20610:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   20614:	eaffffea 	b	205c4 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x14>
   20618:	00002ee0 	.word	0x00002ee0

0002061c <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>:
   2061c:	e5d0300c 	ldrb	r3, [r0, #12]
   20620:	e3530000 	cmp	r3, #0
   20624:	0a00000d 	beq	20660 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x44>
   20628:	e3a02000 	mov	r2, #0
   2062c:	e1a030a1 	lsr	r3, r1, #1
   20630:	e5801010 	str	r1, [r0, #16]
   20634:	e5c0200c 	strb	r2, [r0, #12]
   20638:	e5803014 	str	r3, [r0, #20]
   2063c:	e1a03103 	lsl	r3, r3, #2
   20640:	e3530001 	cmp	r3, #1
   20644:	20811003 	addcs	r1, r1, r3
   20648:	32811001 	addcc	r1, r1, #1
   2064c:	e3510063 	cmp	r1, #99	; 0x63
   20650:	8a00000f 	bhi	20694 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x78>
   20654:	e3a03064 	mov	r3, #100	; 0x64
   20658:	e5803008 	str	r3, [r0, #8]
   2065c:	e12fff1e 	bx	lr
   20660:	e1c021d0 	ldrd	r2, [r0, #16]
   20664:	e042c001 	sub	ip, r2, r1
   20668:	e35c0000 	cmp	ip, #0
   2066c:	b26cc000 	rsblt	ip, ip, #0
   20670:	e0622182 	rsb	r2, r2, r2, lsl #3
   20674:	e0833083 	add	r3, r3, r3, lsl #1
   20678:	e0821001 	add	r1, r2, r1
   2067c:	e083300c 	add	r3, r3, ip
   20680:	e1a011a1 	lsr	r1, r1, #3
   20684:	e1a03123 	lsr	r3, r3, #2
   20688:	e5801010 	str	r1, [r0, #16]
   2068c:	e5803014 	str	r3, [r0, #20]
   20690:	eaffffe9 	b	2063c <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x20>
   20694:	e59f300c 	ldr	r3, [pc, #12]	; 206a8 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x8c>
   20698:	e1510003 	cmp	r1, r3
   2069c:	21a01003 	movcs	r1, r3
   206a0:	e5801008 	str	r1, [r0, #8]
   206a4:	e12fff1e 	bx	lr
   206a8:	00002ee0 	.word	0x00002ee0

000206ac <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>:
   206ac:	e92d4010 	push	{r4, lr}
   206b0:	e1a04000 	mov	r4, r0
   206b4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   206b8:	e3500000 	cmp	r0, #0
   206bc:	1a000016 	bne	2071c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x70>
   206c0:	e5d43018 	ldrb	r3, [r4, #24]
   206c4:	e3530000 	cmp	r3, #0
   206c8:	0a00000b 	beq	206fc <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x50>
   206cc:	e5943020 	ldr	r3, [r4, #32]
   206d0:	e3530000 	cmp	r3, #0
   206d4:	1a000008 	bne	206fc <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x50>
   206d8:	e5940000 	ldr	r0, [r4]
   206dc:	e3500000 	cmp	r0, #0
   206e0:	0a00000f 	beq	20724 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x78>
   206e4:	eb002300 	bl	292ec <CTimer::GetTicks() const>
   206e8:	e1a01000 	mov	r1, r0
   206ec:	e594301c 	ldr	r3, [r4, #28]
   206f0:	e1a00004 	mov	r0, r4
   206f4:	e0411003 	sub	r1, r1, r3
   206f8:	ebffffc7 	bl	2061c <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>
   206fc:	e3a03000 	mov	r3, #0
   20700:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   20704:	e5c43018 	strb	r3, [r4, #24]
   20708:	e1520003 	cmp	r2, r3
   2070c:	e5843020 	str	r3, [r4, #32]
   20710:	08bd8010 	popeq	{r4, pc}
   20714:	e8bd4010 	pop	{r4, lr}
   20718:	ea002d37 	b	2bbfc <LeaveCritical>
   2071c:	eb002d0c 	bl	2bb54 <EnterCritical>
   20720:	eaffffe6 	b	206c0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x14>
   20724:	e3a02074 	mov	r2, #116	; 0x74
   20728:	e59f1004 	ldr	r1, [pc, #4]	; 20734 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x88>
   2072c:	e59f0004 	ldr	r0, [pc, #4]	; 20738 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x8c>
   20730:	eb000fd3 	bl	24684 <assertion_failed>
   20734:	00043d34 	.word	0x00043d34
   20738:	0003ea88 	.word	0x0003ea88

0002073c <CTCPRejector::~CTCPRejector()>:
   2073c:	e92d4010 	push	{r4, lr}
   20740:	e1a04000 	mov	r4, r0
   20744:	e59f300c 	ldr	r3, [pc, #12]	; 20758 <CTCPRejector::~CTCPRejector()+0x1c>
   20748:	e5803000 	str	r3, [r0]
   2074c:	ebfff33a 	bl	1d43c <CNetConnection::~CNetConnection()>
   20750:	e1a00004 	mov	r0, r4
   20754:	e8bd8010 	pop	{r4, pc}
   20758:	00043d80 	.word	0x00043d80

0002075c <CTCPRejector::~CTCPRejector()>:
   2075c:	e92d4010 	push	{r4, lr}
   20760:	e1a04000 	mov	r4, r0
   20764:	e59f3018 	ldr	r3, [pc, #24]	; 20784 <CTCPRejector::~CTCPRejector()+0x28>
   20768:	e5803000 	str	r3, [r0]
   2076c:	ebfff332 	bl	1d43c <CNetConnection::~CNetConnection()>
   20770:	e1a00004 	mov	r0, r4
   20774:	e3a0102c 	mov	r1, #44	; 0x2c
   20778:	eb0029d6 	bl	2aed8 <operator delete(void*, unsigned int)>
   2077c:	e1a00004 	mov	r0, r4
   20780:	e8bd8010 	pop	{r4, pc}
   20784:	00043d80 	.word	0x00043d80

00020788 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>:
   20788:	e3a03006 	mov	r3, #6
   2078c:	e92d4010 	push	{r4, lr}
   20790:	e1a04000 	mov	r4, r0
   20794:	e24dd008 	sub	sp, sp, #8
   20798:	e58d3000 	str	r3, [sp]
   2079c:	e3a03000 	mov	r3, #0
   207a0:	ebfff2fe 	bl	1d3a0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   207a4:	e1a00004 	mov	r0, r4
   207a8:	e59f3008 	ldr	r3, [pc, #8]	; 207b8 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)+0x30>
   207ac:	e5843000 	str	r3, [r4]
   207b0:	e28dd008 	add	sp, sp, #8
   207b4:	e8bd8010 	pop	{r4, pc}
   207b8:	00043d80 	.word	0x00043d80

000207bc <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>:
   207bc:	e92d4010 	push	{r4, lr}
   207c0:	e3110c02 	tst	r1, #512	; 0x200
   207c4:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   207c8:	e24dd008 	sub	sp, sp, #8
   207cc:	1a000022 	bne	2085c <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xa0>
   207d0:	e1d0c1b6 	ldrh	ip, [r0, #22]
   207d4:	e1a04000 	mov	r4, r0
   207d8:	e6bfcfbc 	rev16	ip, ip
   207dc:	e1cdc0b8 	strh	ip, [sp, #8]
   207e0:	e211ca01 	ands	ip, r1, #4096	; 0x1000
   207e4:	16bfcf33 	revne	ip, r3
   207e8:	e3a03000 	mov	r3, #0
   207ec:	e1d001b4 	ldrh	r0, [r0, #20]
   207f0:	e6bf2f32 	rev	r2, r2
   207f4:	e6bf0fb0 	rev16	r0, r0
   207f8:	e3811050 	orr	r1, r1, #80	; 0x50
   207fc:	e58d200c 	str	r2, [sp, #12]
   20800:	e1cd00ba 	strh	r0, [sp, #10]
   20804:	e1cd11b4 	strh	r1, [sp, #20]
   20808:	e3a02014 	mov	r2, #20
   2080c:	e28d1008 	add	r1, sp, #8
   20810:	e284001c 	add	r0, r4, #28
   20814:	e1cd31b6 	strh	r3, [sp, #22]
   20818:	e58d3018 	str	r3, [sp, #24]
   2081c:	e58dc010 	str	ip, [sp, #16]
   20820:	eb000358 	bl	21588 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   20824:	e5943008 	ldr	r3, [r4, #8]
   20828:	e1cd01b8 	strh	r0, [sp, #24]
   2082c:	e3530000 	cmp	r3, #0
   20830:	0a00000d 	beq	2086c <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xb0>
   20834:	e3a0c006 	mov	ip, #6
   20838:	e1a00003 	mov	r0, r3
   2083c:	e28d2008 	add	r2, sp, #8
   20840:	e3a03014 	mov	r3, #20
   20844:	e284100c 	add	r1, r4, #12
   20848:	e58dc000 	str	ip, [sp]
   2084c:	ebffe900 	bl	1ac54 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   20850:	e28ddd19 	add	sp, sp, #1600	; 0x640
   20854:	e28dd008 	add	sp, sp, #8
   20858:	e8bd8010 	pop	{r4, pc}
   2085c:	e3a020a1 	mov	r2, #161	; 0xa1
   20860:	e59f1014 	ldr	r1, [pc, #20]	; 2087c <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc0>
   20864:	e59f0014 	ldr	r0, [pc, #20]	; 20880 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc4>
   20868:	eb000f85 	bl	24684 <assertion_failed>
   2086c:	e3a020c7 	mov	r2, #199	; 0xc7
   20870:	e59f1004 	ldr	r1, [pc, #4]	; 2087c <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc0>
   20874:	e59f0008 	ldr	r0, [pc, #8]	; 20884 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc8>
   20878:	eb000f81 	bl	24684 <assertion_failed>
   2087c:	00043d4c 	.word	0x00043d4c
   20880:	00043d5c 	.word	0x00043d5c
   20884:	000432e4 	.word	0x000432e4

00020888 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   20888:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2088c:	e24dd008 	sub	sp, sp, #8
   20890:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
   20894:	e35c0006 	cmp	ip, #6
   20898:	1a000053 	bne	209ec <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   2089c:	e3520013 	cmp	r2, #19
   208a0:	e1a07002 	mov	r7, r2
   208a4:	9a000053 	bls	209f8 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x170>
   208a8:	e3510000 	cmp	r1, #0
   208ac:	e1a04001 	mov	r4, r1
   208b0:	0a000053 	beq	20a04 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x17c>
   208b4:	e5d11002 	ldrb	r1, [r1, #2]
   208b8:	e1a06003 	mov	r6, r3
   208bc:	e5d43003 	ldrb	r3, [r4, #3]
   208c0:	e1a05000 	mov	r5, r0
   208c4:	e1811403 	orr	r1, r1, r3, lsl #8
   208c8:	e6bf1fb1 	rev16	r1, r1
   208cc:	e6ff3071 	uxth	r3, r1
   208d0:	e3530000 	cmp	r3, #0
   208d4:	e1c011b6 	strh	r1, [r0, #22]
   208d8:	0a000046 	beq	209f8 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x170>
   208dc:	e5900004 	ldr	r0, [r0, #4]
   208e0:	e3500000 	cmp	r0, #0
   208e4:	0a00004a 	beq	20a14 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18c>
   208e8:	eb000068 	bl	20a90 <CNetConfig::GetIPAddress() const>
   208ec:	eb0001a1 	bl	20f78 <CIPAddress::IsNull() const>
   208f0:	e3500000 	cmp	r0, #0
   208f4:	1a00003c 	bne	209ec <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   208f8:	e5950004 	ldr	r0, [r5, #4]
   208fc:	eb000063 	bl	20a90 <CNetConfig::GetIPAddress() const>
   20900:	e285801c 	add	r8, r5, #28
   20904:	e1a01000 	mov	r1, r0
   20908:	e1a00008 	mov	r0, r8
   2090c:	e58d8004 	str	r8, [sp, #4]
   20910:	eb0002ed 	bl	214cc <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   20914:	e1a01006 	mov	r1, r6
   20918:	e59d0004 	ldr	r0, [sp, #4]
   2091c:	eb0002ee 	bl	214dc <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   20920:	e1a02007 	mov	r2, r7
   20924:	e1a01004 	mov	r1, r4
   20928:	e59d0004 	ldr	r0, [sp, #4]
   2092c:	eb000315 	bl	21588 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   20930:	e3500000 	cmp	r0, #0
   20934:	1a00002c 	bne	209ec <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   20938:	e5d42005 	ldrb	r2, [r4, #5]
   2093c:	e5d49004 	ldrb	r9, [r4, #4]
   20940:	e5d41009 	ldrb	r1, [r4, #9]
   20944:	e1899402 	orr	r9, r9, r2, lsl #8
   20948:	e5d42006 	ldrb	r2, [r4, #6]
   2094c:	e5d4300c 	ldrb	r3, [r4, #12]
   20950:	e5d4a008 	ldrb	sl, [r4, #8]
   20954:	e5d4800d 	ldrb	r8, [r4, #13]
   20958:	e1899802 	orr	r9, r9, r2, lsl #16
   2095c:	e5d4200a 	ldrb	r2, [r4, #10]
   20960:	e1838408 	orr	r8, r3, r8, lsl #8
   20964:	e18aa401 	orr	sl, sl, r1, lsl #8
   20968:	e1a03223 	lsr	r3, r3, #4
   2096c:	e5d41007 	ldrb	r1, [r4, #7]
   20970:	e0477103 	sub	r7, r7, r3, lsl #2
   20974:	e3180c02 	tst	r8, #512	; 0x200
   20978:	e18aa802 	orr	sl, sl, r2, lsl #16
   2097c:	e5d4200b 	ldrb	r2, [r4, #11]
   20980:	12877001 	addne	r7, r7, #1
   20984:	e285000c 	add	r0, r5, #12
   20988:	e3180c01 	tst	r8, #256	; 0x100
   2098c:	e1899c01 	orr	r9, r9, r1, lsl #24
   20990:	e1a01006 	mov	r1, r6
   20994:	e18aac02 	orr	sl, sl, r2, lsl #24
   20998:	12877001 	addne	r7, r7, #1
   2099c:	eb000132 	bl	20e6c <CIPAddress::Set(CIPAddress const&)>
   209a0:	e5d42000 	ldrb	r2, [r4]
   209a4:	e5d41001 	ldrb	r1, [r4, #1]
   209a8:	e2183b01 	ands	r3, r8, #1024	; 0x400
   209ac:	e1822401 	orr	r2, r2, r1, lsl #8
   209b0:	e6bf2fb2 	rev16	r2, r2
   209b4:	13a00001 	movne	r0, #1
   209b8:	e1c521b4 	strh	r2, [r5, #20]
   209bc:	1a00000b 	bne	209f0 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x168>
   209c0:	e2182a01 	ands	r2, r8, #4096	; 0x1000
   209c4:	06bf3f39 	reveq	r3, r9
   209c8:	01a00005 	moveq	r0, r5
   209cc:	03a01b05 	moveq	r1, #5120	; 0x1400
   209d0:	11a00005 	movne	r0, r5
   209d4:	13a01b01 	movne	r1, #1024	; 0x400
   209d8:	00833007 	addeq	r3, r3, r7
   209dc:	16bf2f3a 	revne	r2, sl
   209e0:	ebffff75 	bl	207bc <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>
   209e4:	e3a00001 	mov	r0, #1
   209e8:	ea000000 	b	209f0 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x168>
   209ec:	e3a00000 	mov	r0, #0
   209f0:	e28dd008 	add	sp, sp, #8
   209f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   209f8:	e3e00000 	mvn	r0, #0
   209fc:	e28dd008 	add	sp, sp, #8
   20a00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20a04:	e3a02052 	mov	r2, #82	; 0x52
   20a08:	e59f1014 	ldr	r1, [pc, #20]	; 20a24 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x19c>
   20a0c:	e59f0014 	ldr	r0, [pc, #20]	; 20a28 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1a0>
   20a10:	eb000f1b 	bl	24684 <assertion_failed>
   20a14:	e3a0205b 	mov	r2, #91	; 0x5b
   20a18:	e59f1004 	ldr	r1, [pc, #4]	; 20a24 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x19c>
   20a1c:	e59f0008 	ldr	r0, [pc, #8]	; 20a2c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1a4>
   20a20:	eb000f17 	bl	24684 <assertion_failed>
   20a24:	00043d4c 	.word	0x00043d4c
   20a28:	000433c8 	.word	0x000433c8
   20a2c:	000432d0 	.word	0x000432d0

00020a30 <CNetConfig::~CNetConfig()>:
   20a30:	e92d4010 	push	{r4, lr}
   20a34:	e1a04000 	mov	r4, r0
   20a38:	e2800024 	add	r0, r0, #36	; 0x24
   20a3c:	eb000084 	bl	20c54 <CIPAddress::~CIPAddress()>
   20a40:	e284001c 	add	r0, r4, #28
   20a44:	eb000082 	bl	20c54 <CIPAddress::~CIPAddress()>
   20a48:	e2840014 	add	r0, r4, #20
   20a4c:	eb000080 	bl	20c54 <CIPAddress::~CIPAddress()>
   20a50:	e284000c 	add	r0, r4, #12
   20a54:	eb00007e 	bl	20c54 <CIPAddress::~CIPAddress()>
   20a58:	e2840004 	add	r0, r4, #4
   20a5c:	eb00007c 	bl	20c54 <CIPAddress::~CIPAddress()>
   20a60:	e1a00004 	mov	r0, r4
   20a64:	e8bd8010 	pop	{r4, pc}

00020a68 <CNetConfig::SetDHCP(bool)>:
   20a68:	e5c01000 	strb	r1, [r0]
   20a6c:	e12fff1e 	bx	lr

00020a70 <CNetConfig::SetDefaultGateway(unsigned int)>:
   20a70:	e2800014 	add	r0, r0, #20
   20a74:	ea0000e3 	b	20e08 <CIPAddress::Set(unsigned int)>

00020a78 <CNetConfig::SetDNSServer(unsigned int)>:
   20a78:	e280001c 	add	r0, r0, #28
   20a7c:	ea0000e1 	b	20e08 <CIPAddress::Set(unsigned int)>

00020a80 <CNetConfig::SetDefaultGateway(unsigned char const*)>:
   20a80:	e2800014 	add	r0, r0, #20
   20a84:	ea0000e3 	b	20e18 <CIPAddress::Set(unsigned char const*)>

00020a88 <CNetConfig::SetDNSServer(unsigned char const*)>:
   20a88:	e280001c 	add	r0, r0, #28
   20a8c:	ea0000e1 	b	20e18 <CIPAddress::Set(unsigned char const*)>

00020a90 <CNetConfig::GetIPAddress() const>:
   20a90:	e2800004 	add	r0, r0, #4
   20a94:	e12fff1e 	bx	lr

00020a98 <CNetConfig::IsDHCPUsed() const>:
   20a98:	e5d00000 	ldrb	r0, [r0]
   20a9c:	e12fff1e 	bx	lr

00020aa0 <CNetConfig::GetNetMask() const>:
   20aa0:	e280000c 	add	r0, r0, #12
   20aa4:	ea000110 	b	20eec <CIPAddress::Get() const>

00020aa8 <CNetConfig::GetDefaultGateway() const>:
   20aa8:	e2800014 	add	r0, r0, #20
   20aac:	e12fff1e 	bx	lr

00020ab0 <CNetConfig::GetDNSServer() const>:
   20ab0:	e280001c 	add	r0, r0, #28
   20ab4:	e12fff1e 	bx	lr

00020ab8 <CNetConfig::GetBroadcastAddress() const>:
   20ab8:	e2800024 	add	r0, r0, #36	; 0x24
   20abc:	e12fff1e 	bx	lr

00020ac0 <CNetConfig::UpdateBroadcastAddress()>:
   20ac0:	e92d4010 	push	{r4, lr}
   20ac4:	e1a04000 	mov	r4, r0
   20ac8:	e24dd008 	sub	sp, sp, #8
   20acc:	e1a0100d 	mov	r1, sp
   20ad0:	e2800004 	add	r0, r0, #4
   20ad4:	eb000110 	bl	20f1c <CIPAddress::CopyTo(unsigned char*) const>
   20ad8:	e284000c 	add	r0, r4, #12
   20adc:	e28d1004 	add	r1, sp, #4
   20ae0:	eb00010d 	bl	20f1c <CIPAddress::CopyTo(unsigned char*) const>
   20ae4:	e89d000a 	ldm	sp, {r1, r3}
   20ae8:	e1e03003 	mvn	r3, r3
   20aec:	e2840024 	add	r0, r4, #36	; 0x24
   20af0:	e1831001 	orr	r1, r3, r1
   20af4:	eb0000c3 	bl	20e08 <CIPAddress::Set(unsigned int)>
   20af8:	e28dd008 	add	sp, sp, #8
   20afc:	e8bd8010 	pop	{r4, pc}

00020b00 <CNetConfig::Reset()>:
   20b00:	e92d4010 	push	{r4, lr}
   20b04:	e1a04000 	mov	r4, r0
   20b08:	e59f1034 	ldr	r1, [pc, #52]	; 20b44 <CNetConfig::Reset()+0x44>
   20b0c:	e2800004 	add	r0, r0, #4
   20b10:	eb0000c0 	bl	20e18 <CIPAddress::Set(unsigned char const*)>
   20b14:	e284000c 	add	r0, r4, #12
   20b18:	e59f1024 	ldr	r1, [pc, #36]	; 20b44 <CNetConfig::Reset()+0x44>
   20b1c:	eb0000bd 	bl	20e18 <CIPAddress::Set(unsigned char const*)>
   20b20:	e2840014 	add	r0, r4, #20
   20b24:	e59f1018 	ldr	r1, [pc, #24]	; 20b44 <CNetConfig::Reset()+0x44>
   20b28:	eb0000ba 	bl	20e18 <CIPAddress::Set(unsigned char const*)>
   20b2c:	e284001c 	add	r0, r4, #28
   20b30:	e59f100c 	ldr	r1, [pc, #12]	; 20b44 <CNetConfig::Reset()+0x44>
   20b34:	eb0000b7 	bl	20e18 <CIPAddress::Set(unsigned char const*)>
   20b38:	e1a00004 	mov	r0, r4
   20b3c:	e8bd4010 	pop	{r4, lr}
   20b40:	eaffffde 	b	20ac0 <CNetConfig::UpdateBroadcastAddress()>
   20b44:	00043dbc 	.word	0x00043dbc

00020b48 <CNetConfig::CNetConfig()>:
   20b48:	e3a03001 	mov	r3, #1
   20b4c:	e92d4010 	push	{r4, lr}
   20b50:	e1a04000 	mov	r4, r0
   20b54:	e4c03004 	strb	r3, [r0], #4
   20b58:	eb000027 	bl	20bfc <CIPAddress::CIPAddress()>
   20b5c:	e284000c 	add	r0, r4, #12
   20b60:	eb000025 	bl	20bfc <CIPAddress::CIPAddress()>
   20b64:	e2840014 	add	r0, r4, #20
   20b68:	eb000023 	bl	20bfc <CIPAddress::CIPAddress()>
   20b6c:	e284001c 	add	r0, r4, #28
   20b70:	eb000021 	bl	20bfc <CIPAddress::CIPAddress()>
   20b74:	e2840024 	add	r0, r4, #36	; 0x24
   20b78:	eb00001f 	bl	20bfc <CIPAddress::CIPAddress()>
   20b7c:	e1a00004 	mov	r0, r4
   20b80:	ebffffde 	bl	20b00 <CNetConfig::Reset()>
   20b84:	e1a00004 	mov	r0, r4
   20b88:	e8bd8010 	pop	{r4, pc}

00020b8c <CNetConfig::SetIPAddress(unsigned int)>:
   20b8c:	e92d4010 	push	{r4, lr}
   20b90:	e1a04000 	mov	r4, r0
   20b94:	e2800004 	add	r0, r0, #4
   20b98:	eb00009a 	bl	20e08 <CIPAddress::Set(unsigned int)>
   20b9c:	e1a00004 	mov	r0, r4
   20ba0:	e8bd4010 	pop	{r4, lr}
   20ba4:	eaffffc5 	b	20ac0 <CNetConfig::UpdateBroadcastAddress()>

00020ba8 <CNetConfig::SetNetMask(unsigned int)>:
   20ba8:	e92d4010 	push	{r4, lr}
   20bac:	e1a04000 	mov	r4, r0
   20bb0:	e280000c 	add	r0, r0, #12
   20bb4:	eb000093 	bl	20e08 <CIPAddress::Set(unsigned int)>
   20bb8:	e1a00004 	mov	r0, r4
   20bbc:	e8bd4010 	pop	{r4, lr}
   20bc0:	eaffffbe 	b	20ac0 <CNetConfig::UpdateBroadcastAddress()>

00020bc4 <CNetConfig::SetIPAddress(unsigned char const*)>:
   20bc4:	e92d4010 	push	{r4, lr}
   20bc8:	e1a04000 	mov	r4, r0
   20bcc:	e2800004 	add	r0, r0, #4
   20bd0:	eb000090 	bl	20e18 <CIPAddress::Set(unsigned char const*)>
   20bd4:	e1a00004 	mov	r0, r4
   20bd8:	e8bd4010 	pop	{r4, lr}
   20bdc:	eaffffb7 	b	20ac0 <CNetConfig::UpdateBroadcastAddress()>

00020be0 <CNetConfig::SetNetMask(unsigned char const*)>:
   20be0:	e92d4010 	push	{r4, lr}
   20be4:	e1a04000 	mov	r4, r0
   20be8:	e280000c 	add	r0, r0, #12
   20bec:	eb000089 	bl	20e18 <CIPAddress::Set(unsigned char const*)>
   20bf0:	e1a00004 	mov	r0, r4
   20bf4:	e8bd4010 	pop	{r4, lr}
   20bf8:	eaffffb0 	b	20ac0 <CNetConfig::UpdateBroadcastAddress()>

00020bfc <CIPAddress::CIPAddress()>:
   20bfc:	e3a02000 	mov	r2, #0
   20c00:	e5c02000 	strb	r2, [r0]
   20c04:	e12fff1e 	bx	lr

00020c08 <CIPAddress::CIPAddress(unsigned int)>:
   20c08:	e3a02001 	mov	r2, #1
   20c0c:	e5801004 	str	r1, [r0, #4]
   20c10:	e5c02000 	strb	r2, [r0]
   20c14:	e12fff1e 	bx	lr

00020c18 <CIPAddress::CIPAddress(CIPAddress const&)>:
   20c18:	e5d12000 	ldrb	r2, [r1]
   20c1c:	e3520000 	cmp	r2, #0
   20c20:	0a000004 	beq	20c38 <CIPAddress::CIPAddress(CIPAddress const&)+0x20>
   20c24:	e3a0c001 	mov	ip, #1
   20c28:	e5912004 	ldr	r2, [r1, #4]
   20c2c:	e5c0c000 	strb	ip, [r0]
   20c30:	e5802004 	str	r2, [r0, #4]
   20c34:	e12fff1e 	bx	lr
   20c38:	e3a0202e 	mov	r2, #46	; 0x2e
   20c3c:	e92d4010 	push	{r4, lr}
   20c40:	e59f1004 	ldr	r1, [pc, #4]	; 20c4c <CIPAddress::CIPAddress(CIPAddress const&)+0x34>
   20c44:	e59f0004 	ldr	r0, [pc, #4]	; 20c50 <CIPAddress::CIPAddress(CIPAddress const&)+0x38>
   20c48:	eb000e8d 	bl	24684 <assertion_failed>
   20c4c:	00043dc0 	.word	0x00043dc0
   20c50:	00043dd0 	.word	0x00043dd0

00020c54 <CIPAddress::~CIPAddress()>:
   20c54:	e12fff1e 	bx	lr

00020c58 <CIPAddress::operator==(CIPAddress const&) const>:
   20c58:	e5d03000 	ldrb	r3, [r0]
   20c5c:	e92d4010 	push	{r4, lr}
   20c60:	e3530000 	cmp	r3, #0
   20c64:	0a000008 	beq	20c8c <CIPAddress::operator==(CIPAddress const&) const+0x34>
   20c68:	e5d13000 	ldrb	r3, [r1]
   20c6c:	e3530000 	cmp	r3, #0
   20c70:	0a000009 	beq	20c9c <CIPAddress::operator==(CIPAddress const&) const+0x44>
   20c74:	e5900004 	ldr	r0, [r0, #4]
   20c78:	e5913004 	ldr	r3, [r1, #4]
   20c7c:	e0400003 	sub	r0, r0, r3
   20c80:	e16f0f10 	clz	r0, r0
   20c84:	e1a002a0 	lsr	r0, r0, #5
   20c88:	e8bd8010 	pop	{r4, pc}
   20c8c:	e3a0203e 	mov	r2, #62	; 0x3e
   20c90:	e59f1014 	ldr	r1, [pc, #20]	; 20cac <CIPAddress::operator==(CIPAddress const&) const+0x54>
   20c94:	e59f0014 	ldr	r0, [pc, #20]	; 20cb0 <CIPAddress::operator==(CIPAddress const&) const+0x58>
   20c98:	eb000e79 	bl	24684 <assertion_failed>
   20c9c:	e3a0203f 	mov	r2, #63	; 0x3f
   20ca0:	e59f1004 	ldr	r1, [pc, #4]	; 20cac <CIPAddress::operator==(CIPAddress const&) const+0x54>
   20ca4:	e59f0008 	ldr	r0, [pc, #8]	; 20cb4 <CIPAddress::operator==(CIPAddress const&) const+0x5c>
   20ca8:	eb000e75 	bl	24684 <assertion_failed>
   20cac:	00043dc0 	.word	0x00043dc0
   20cb0:	0003f208 	.word	0x0003f208
   20cb4:	00043de4 	.word	0x00043de4

00020cb8 <CIPAddress::operator!=(CIPAddress const&) const>:
   20cb8:	e5d03000 	ldrb	r3, [r0]
   20cbc:	e92d4010 	push	{r4, lr}
   20cc0:	e3530000 	cmp	r3, #0
   20cc4:	0a000007 	beq	20ce8 <CIPAddress::operator!=(CIPAddress const&) const+0x30>
   20cc8:	e5d13000 	ldrb	r3, [r1]
   20ccc:	e3530000 	cmp	r3, #0
   20cd0:	0a000008 	beq	20cf8 <CIPAddress::operator!=(CIPAddress const&) const+0x40>
   20cd4:	e5900004 	ldr	r0, [r0, #4]
   20cd8:	e5913004 	ldr	r3, [r1, #4]
   20cdc:	e0500003 	subs	r0, r0, r3
   20ce0:	13a00001 	movne	r0, #1
   20ce4:	e8bd8010 	pop	{r4, pc}
   20ce8:	e3a02045 	mov	r2, #69	; 0x45
   20cec:	e59f1014 	ldr	r1, [pc, #20]	; 20d08 <CIPAddress::operator!=(CIPAddress const&) const+0x50>
   20cf0:	e59f0014 	ldr	r0, [pc, #20]	; 20d0c <CIPAddress::operator!=(CIPAddress const&) const+0x54>
   20cf4:	eb000e62 	bl	24684 <assertion_failed>
   20cf8:	e3a02046 	mov	r2, #70	; 0x46
   20cfc:	e59f1004 	ldr	r1, [pc, #4]	; 20d08 <CIPAddress::operator!=(CIPAddress const&) const+0x50>
   20d00:	e59f0008 	ldr	r0, [pc, #8]	; 20d10 <CIPAddress::operator!=(CIPAddress const&) const+0x58>
   20d04:	eb000e5e 	bl	24684 <assertion_failed>
   20d08:	00043dc0 	.word	0x00043dc0
   20d0c:	0003f208 	.word	0x0003f208
   20d10:	00043de4 	.word	0x00043de4

00020d14 <CIPAddress::operator==(unsigned char const*) const>:
   20d14:	e5d02000 	ldrb	r2, [r0]
   20d18:	e92d4010 	push	{r4, lr}
   20d1c:	e3520000 	cmp	r2, #0
   20d20:	0a000007 	beq	20d44 <CIPAddress::operator==(unsigned char const*) const+0x30>
   20d24:	e3510000 	cmp	r1, #0
   20d28:	0a000009 	beq	20d54 <CIPAddress::operator==(unsigned char const*) const+0x40>
   20d2c:	e3a02004 	mov	r2, #4
   20d30:	e2800004 	add	r0, r0, #4
   20d34:	eb002464 	bl	29ecc <memcmp>
   20d38:	e16f0f10 	clz	r0, r0
   20d3c:	e1a002a0 	lsr	r0, r0, #5
   20d40:	e8bd8010 	pop	{r4, pc}
   20d44:	e3a0204c 	mov	r2, #76	; 0x4c
   20d48:	e59f1014 	ldr	r1, [pc, #20]	; 20d64 <CIPAddress::operator==(unsigned char const*) const+0x50>
   20d4c:	e59f0014 	ldr	r0, [pc, #20]	; 20d68 <CIPAddress::operator==(unsigned char const*) const+0x54>
   20d50:	eb000e4b 	bl	24684 <assertion_failed>
   20d54:	e3a0204d 	mov	r2, #77	; 0x4d
   20d58:	e59f1004 	ldr	r1, [pc, #4]	; 20d64 <CIPAddress::operator==(unsigned char const*) const+0x50>
   20d5c:	e59f0008 	ldr	r0, [pc, #8]	; 20d6c <CIPAddress::operator==(unsigned char const*) const+0x58>
   20d60:	eb000e47 	bl	24684 <assertion_failed>
   20d64:	00043dc0 	.word	0x00043dc0
   20d68:	0003f208 	.word	0x0003f208
   20d6c:	00043df8 	.word	0x00043df8

00020d70 <CIPAddress::operator!=(unsigned char const*) const>:
   20d70:	e92d4010 	push	{r4, lr}
   20d74:	ebffffe6 	bl	20d14 <CIPAddress::operator==(unsigned char const*) const>
   20d78:	e2200001 	eor	r0, r0, #1
   20d7c:	e6ef0070 	uxtb	r0, r0
   20d80:	e8bd8010 	pop	{r4, pc}

00020d84 <CIPAddress::operator==(unsigned int) const>:
   20d84:	e5d03000 	ldrb	r3, [r0]
   20d88:	e3530000 	cmp	r3, #0
   20d8c:	0a000004 	beq	20da4 <CIPAddress::operator==(unsigned int) const+0x20>
   20d90:	e5900004 	ldr	r0, [r0, #4]
   20d94:	e0400001 	sub	r0, r0, r1
   20d98:	e16f0f10 	clz	r0, r0
   20d9c:	e1a002a0 	lsr	r0, r0, #5
   20da0:	e12fff1e 	bx	lr
   20da4:	e3a02058 	mov	r2, #88	; 0x58
   20da8:	e92d4010 	push	{r4, lr}
   20dac:	e59f1004 	ldr	r1, [pc, #4]	; 20db8 <CIPAddress::operator==(unsigned int) const+0x34>
   20db0:	e59f0004 	ldr	r0, [pc, #4]	; 20dbc <CIPAddress::operator==(unsigned int) const+0x38>
   20db4:	eb000e32 	bl	24684 <assertion_failed>
   20db8:	00043dc0 	.word	0x00043dc0
   20dbc:	0003f208 	.word	0x0003f208

00020dc0 <CIPAddress::operator!=(unsigned int) const>:
   20dc0:	e5d03000 	ldrb	r3, [r0]
   20dc4:	e3530000 	cmp	r3, #0
   20dc8:	0a000003 	beq	20ddc <CIPAddress::operator!=(unsigned int) const+0x1c>
   20dcc:	e5900004 	ldr	r0, [r0, #4]
   20dd0:	e0500001 	subs	r0, r0, r1
   20dd4:	13a00001 	movne	r0, #1
   20dd8:	e12fff1e 	bx	lr
   20ddc:	e3a0205e 	mov	r2, #94	; 0x5e
   20de0:	e92d4010 	push	{r4, lr}
   20de4:	e59f1004 	ldr	r1, [pc, #4]	; 20df0 <CIPAddress::operator!=(unsigned int) const+0x30>
   20de8:	e59f0004 	ldr	r0, [pc, #4]	; 20df4 <CIPAddress::operator!=(unsigned int) const+0x34>
   20dec:	eb000e24 	bl	24684 <assertion_failed>
   20df0:	00043dc0 	.word	0x00043dc0
   20df4:	0003f208 	.word	0x0003f208

00020df8 <CIPAddress::operator=(unsigned int)>:
   20df8:	e3a02001 	mov	r2, #1
   20dfc:	e5801004 	str	r1, [r0, #4]
   20e00:	e5c02000 	strb	r2, [r0]
   20e04:	e12fff1e 	bx	lr

00020e08 <CIPAddress::Set(unsigned int)>:
   20e08:	e3a03001 	mov	r3, #1
   20e0c:	e5801004 	str	r1, [r0, #4]
   20e10:	e5c03000 	strb	r3, [r0]
   20e14:	e12fff1e 	bx	lr

00020e18 <CIPAddress::Set(unsigned char const*)>:
   20e18:	e3510000 	cmp	r1, #0
   20e1c:	e92d4010 	push	{r4, lr}
   20e20:	0a000006 	beq	20e40 <CIPAddress::Set(unsigned char const*)+0x28>
   20e24:	e3a02004 	mov	r2, #4
   20e28:	e1a04000 	mov	r4, r0
   20e2c:	e0800002 	add	r0, r0, r2
   20e30:	eb002634 	bl	2a708 <memcpy>
   20e34:	e3a03001 	mov	r3, #1
   20e38:	e5c43000 	strb	r3, [r4]
   20e3c:	e8bd8010 	pop	{r4, pc}
   20e40:	e3a02075 	mov	r2, #117	; 0x75
   20e44:	e59f1004 	ldr	r1, [pc, #4]	; 20e50 <CIPAddress::Set(unsigned char const*)+0x38>
   20e48:	e59f0004 	ldr	r0, [pc, #4]	; 20e54 <CIPAddress::Set(unsigned char const*)+0x3c>
   20e4c:	eb000e0c 	bl	24684 <assertion_failed>
   20e50:	00043dc0 	.word	0x00043dc0
   20e54:	00043e08 	.word	0x00043e08

00020e58 <CIPAddress::CIPAddress(unsigned char const*)>:
   20e58:	e92d4010 	push	{r4, lr}
   20e5c:	e1a04000 	mov	r4, r0
   20e60:	ebffffec 	bl	20e18 <CIPAddress::Set(unsigned char const*)>
   20e64:	e1a00004 	mov	r0, r4
   20e68:	e8bd8010 	pop	{r4, pc}

00020e6c <CIPAddress::Set(CIPAddress const&)>:
   20e6c:	e5d13000 	ldrb	r3, [r1]
   20e70:	e3530000 	cmp	r3, #0
   20e74:	0a000004 	beq	20e8c <CIPAddress::Set(CIPAddress const&)+0x20>
   20e78:	e3a02001 	mov	r2, #1
   20e7c:	e5913004 	ldr	r3, [r1, #4]
   20e80:	e5c02000 	strb	r2, [r0]
   20e84:	e5803004 	str	r3, [r0, #4]
   20e88:	e12fff1e 	bx	lr
   20e8c:	e3a0207e 	mov	r2, #126	; 0x7e
   20e90:	e92d4010 	push	{r4, lr}
   20e94:	e59f1004 	ldr	r1, [pc, #4]	; 20ea0 <CIPAddress::Set(CIPAddress const&)+0x34>
   20e98:	e59f0004 	ldr	r0, [pc, #4]	; 20ea4 <CIPAddress::Set(CIPAddress const&)+0x38>
   20e9c:	eb000df8 	bl	24684 <assertion_failed>
   20ea0:	00043dc0 	.word	0x00043dc0
   20ea4:	00043dd0 	.word	0x00043dd0

00020ea8 <CIPAddress::SetBroadcast()>:
   20ea8:	e3e02000 	mvn	r2, #0
   20eac:	e3a03001 	mov	r3, #1
   20eb0:	e5802004 	str	r2, [r0, #4]
   20eb4:	e5c03000 	strb	r3, [r0]
   20eb8:	e12fff1e 	bx	lr

00020ebc <CIPAddress::operator unsigned int() const>:
   20ebc:	e5d03000 	ldrb	r3, [r0]
   20ec0:	e3530000 	cmp	r3, #0
   20ec4:	0a000001 	beq	20ed0 <CIPAddress::operator unsigned int() const+0x14>
   20ec8:	e5900004 	ldr	r0, [r0, #4]
   20ecc:	e12fff1e 	bx	lr
   20ed0:	e3a0208f 	mov	r2, #143	; 0x8f
   20ed4:	e92d4010 	push	{r4, lr}
   20ed8:	e59f1004 	ldr	r1, [pc, #4]	; 20ee4 <CIPAddress::operator unsigned int() const+0x28>
   20edc:	e59f0004 	ldr	r0, [pc, #4]	; 20ee8 <CIPAddress::operator unsigned int() const+0x2c>
   20ee0:	eb000de7 	bl	24684 <assertion_failed>
   20ee4:	00043dc0 	.word	0x00043dc0
   20ee8:	0003f208 	.word	0x0003f208

00020eec <CIPAddress::Get() const>:
   20eec:	e5d03000 	ldrb	r3, [r0]
   20ef0:	e3530000 	cmp	r3, #0
   20ef4:	0a000001 	beq	20f00 <CIPAddress::Get() const+0x14>
   20ef8:	e2800004 	add	r0, r0, #4
   20efc:	e12fff1e 	bx	lr
   20f00:	e3a02095 	mov	r2, #149	; 0x95
   20f04:	e92d4010 	push	{r4, lr}
   20f08:	e59f1004 	ldr	r1, [pc, #4]	; 20f14 <CIPAddress::Get() const+0x28>
   20f0c:	e59f0004 	ldr	r0, [pc, #4]	; 20f18 <CIPAddress::Get() const+0x2c>
   20f10:	eb000ddb 	bl	24684 <assertion_failed>
   20f14:	00043dc0 	.word	0x00043dc0
   20f18:	0003f208 	.word	0x0003f208

00020f1c <CIPAddress::CopyTo(unsigned char*) const>:
   20f1c:	e5d02000 	ldrb	r2, [r0]
   20f20:	e92d4010 	push	{r4, lr}
   20f24:	e3520000 	cmp	r2, #0
   20f28:	0a000007 	beq	20f4c <CIPAddress::CopyTo(unsigned char*) const+0x30>
   20f2c:	e3510000 	cmp	r1, #0
   20f30:	e1a03000 	mov	r3, r0
   20f34:	e1a00001 	mov	r0, r1
   20f38:	0a000007 	beq	20f5c <CIPAddress::CopyTo(unsigned char*) const+0x40>
   20f3c:	e8bd4010 	pop	{r4, lr}
   20f40:	e3a02004 	mov	r2, #4
   20f44:	e2831004 	add	r1, r3, #4
   20f48:	ea0025ee 	b	2a708 <memcpy>
   20f4c:	e3a0209b 	mov	r2, #155	; 0x9b
   20f50:	e59f1014 	ldr	r1, [pc, #20]	; 20f6c <CIPAddress::CopyTo(unsigned char*) const+0x50>
   20f54:	e59f0014 	ldr	r0, [pc, #20]	; 20f70 <CIPAddress::CopyTo(unsigned char*) const+0x54>
   20f58:	eb000dc9 	bl	24684 <assertion_failed>
   20f5c:	e3a0209c 	mov	r2, #156	; 0x9c
   20f60:	e59f1004 	ldr	r1, [pc, #4]	; 20f6c <CIPAddress::CopyTo(unsigned char*) const+0x50>
   20f64:	e59f0008 	ldr	r0, [pc, #8]	; 20f74 <CIPAddress::CopyTo(unsigned char*) const+0x58>
   20f68:	eb000dc5 	bl	24684 <assertion_failed>
   20f6c:	00043dc0 	.word	0x00043dc0
   20f70:	0003f208 	.word	0x0003f208
   20f74:	00040460 	.word	0x00040460

00020f78 <CIPAddress::IsNull() const>:
   20f78:	e5d03000 	ldrb	r3, [r0]
   20f7c:	e3530000 	cmp	r3, #0
   20f80:	0a000003 	beq	20f94 <CIPAddress::IsNull() const+0x1c>
   20f84:	e5900004 	ldr	r0, [r0, #4]
   20f88:	e16f0f10 	clz	r0, r0
   20f8c:	e1a002a0 	lsr	r0, r0, #5
   20f90:	e12fff1e 	bx	lr
   20f94:	e3a020a2 	mov	r2, #162	; 0xa2
   20f98:	e92d4010 	push	{r4, lr}
   20f9c:	e59f1004 	ldr	r1, [pc, #4]	; 20fa8 <CIPAddress::IsNull() const+0x30>
   20fa0:	e59f0004 	ldr	r0, [pc, #4]	; 20fac <CIPAddress::IsNull() const+0x34>
   20fa4:	eb000db6 	bl	24684 <assertion_failed>
   20fa8:	00043dc0 	.word	0x00043dc0
   20fac:	0003f208 	.word	0x0003f208

00020fb0 <CIPAddress::IsBroadcast() const>:
   20fb0:	e5d03000 	ldrb	r3, [r0]
   20fb4:	e3530000 	cmp	r3, #0
   20fb8:	0a000004 	beq	20fd0 <CIPAddress::IsBroadcast() const+0x20>
   20fbc:	e5900004 	ldr	r0, [r0, #4]
   20fc0:	e3700001 	cmn	r0, #1
   20fc4:	13a00000 	movne	r0, #0
   20fc8:	03a00001 	moveq	r0, #1
   20fcc:	e12fff1e 	bx	lr
   20fd0:	e3a020a8 	mov	r2, #168	; 0xa8
   20fd4:	e92d4010 	push	{r4, lr}
   20fd8:	e59f1004 	ldr	r1, [pc, #4]	; 20fe4 <CIPAddress::IsBroadcast() const+0x34>
   20fdc:	e59f0004 	ldr	r0, [pc, #4]	; 20fe8 <CIPAddress::IsBroadcast() const+0x38>
   20fe0:	eb000da7 	bl	24684 <assertion_failed>
   20fe4:	00043dc0 	.word	0x00043dc0
   20fe8:	0003f208 	.word	0x0003f208

00020fec <CIPAddress::GetSize() const>:
   20fec:	e3a00004 	mov	r0, #4
   20ff0:	e12fff1e 	bx	lr

00020ff4 <CIPAddress::Format(CString*) const>:
   20ff4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   20ff8:	e5d02000 	ldrb	r2, [r0]
   20ffc:	e24dd00c 	sub	sp, sp, #12
   21000:	e3520000 	cmp	r2, #0
   21004:	0a000010 	beq	2104c <CIPAddress::Format(CString*) const+0x58>
   21008:	e3510000 	cmp	r1, #0
   2100c:	e1a03000 	mov	r3, r0
   21010:	e1a00001 	mov	r0, r1
   21014:	0a000010 	beq	2105c <CIPAddress::Format(CString*) const+0x68>
   21018:	e5932004 	ldr	r2, [r3, #4]
   2101c:	e1a01822 	lsr	r1, r2, #16
   21020:	e1a0cc22 	lsr	ip, r2, #24
   21024:	e6ef1071 	uxtb	r1, r1
   21028:	e1a03422 	lsr	r3, r2, #8
   2102c:	e58d1000 	str	r1, [sp]
   21030:	e6ef3073 	uxtb	r3, r3
   21034:	e59f1030 	ldr	r1, [pc, #48]	; 2106c <CIPAddress::Format(CString*) const+0x78>
   21038:	e58dc004 	str	ip, [sp, #4]
   2103c:	e6ef2072 	uxtb	r2, r2
   21040:	eb001fb1 	bl	28f0c <CString::Format(char const*, ...)>
   21044:	e28dd00c 	add	sp, sp, #12
   21048:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2104c:	e3a020b3 	mov	r2, #179	; 0xb3
   21050:	e59f1018 	ldr	r1, [pc, #24]	; 21070 <CIPAddress::Format(CString*) const+0x7c>
   21054:	e59f0018 	ldr	r0, [pc, #24]	; 21074 <CIPAddress::Format(CString*) const+0x80>
   21058:	eb000d89 	bl	24684 <assertion_failed>
   2105c:	e3a020b4 	mov	r2, #180	; 0xb4
   21060:	e59f1008 	ldr	r1, [pc, #8]	; 21070 <CIPAddress::Format(CString*) const+0x7c>
   21064:	e59f000c 	ldr	r0, [pc, #12]	; 21078 <CIPAddress::Format(CString*) const+0x84>
   21068:	eb000d85 	bl	24684 <assertion_failed>
   2106c:	00043e28 	.word	0x00043e28
   21070:	00043dc0 	.word	0x00043dc0
   21074:	0003f208 	.word	0x0003f208
   21078:	00043e18 	.word	0x00043e18

0002107c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>:
   2107c:	e92d4030 	push	{r4, r5, lr}
   21080:	e5d13000 	ldrb	r3, [r1]
   21084:	e24dd00c 	sub	sp, sp, #12
   21088:	e3530000 	cmp	r3, #0
   2108c:	0a000018 	beq	210f4 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x78>
   21090:	e1a04001 	mov	r4, r1
   21094:	e1a01002 	mov	r1, r2
   21098:	e5942004 	ldr	r2, [r4, #4]
   2109c:	e3720001 	cmn	r2, #1
   210a0:	0a000010 	beq	210e8 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x6c>
   210a4:	e3510000 	cmp	r1, #0
   210a8:	0a000015 	beq	21104 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x88>
   210ac:	e3a02004 	mov	r2, #4
   210b0:	e1a05000 	mov	r5, r0
   210b4:	e08d0002 	add	r0, sp, r2
   210b8:	eb002592 	bl	2a708 <memcpy>
   210bc:	e5d53000 	ldrb	r3, [r5]
   210c0:	e3530000 	cmp	r3, #0
   210c4:	0a000012 	beq	21114 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x98>
   210c8:	e59d0004 	ldr	r0, [sp, #4]
   210cc:	e5953004 	ldr	r3, [r5, #4]
   210d0:	e5942004 	ldr	r2, [r4, #4]
   210d4:	e0033000 	and	r3, r3, r0
   210d8:	e0000002 	and	r0, r0, r2
   210dc:	e0433000 	sub	r3, r3, r0
   210e0:	e16f3f13 	clz	r3, r3
   210e4:	e1a032a3 	lsr	r3, r3, #5
   210e8:	e1a00003 	mov	r0, r3
   210ec:	e28dd00c 	add	sp, sp, #12
   210f0:	e8bd8030 	pop	{r4, r5, pc}
   210f4:	e3a020a8 	mov	r2, #168	; 0xa8
   210f8:	e59f1024 	ldr	r1, [pc, #36]	; 21124 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   210fc:	e59f0024 	ldr	r0, [pc, #36]	; 21128 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xac>
   21100:	eb000d5f 	bl	24684 <assertion_failed>
   21104:	e3a020c1 	mov	r2, #193	; 0xc1
   21108:	e59f1014 	ldr	r1, [pc, #20]	; 21124 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   2110c:	e59f0018 	ldr	r0, [pc, #24]	; 2112c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xb0>
   21110:	eb000d5b 	bl	24684 <assertion_failed>
   21114:	e3a020c5 	mov	r2, #197	; 0xc5
   21118:	e59f1004 	ldr	r1, [pc, #4]	; 21124 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   2111c:	e59f0004 	ldr	r0, [pc, #4]	; 21128 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xac>
   21120:	eb000d57 	bl	24684 <assertion_failed>
   21124:	00043dc0 	.word	0x00043dc0
   21128:	0003f208 	.word	0x0003f208
   2112c:	00043e34 	.word	0x00043e34

00021130 <CNetQueue::CNetQueue()>:
   21130:	e3a02000 	mov	r2, #0
   21134:	e5802000 	str	r2, [r0]
   21138:	e5802004 	str	r2, [r0, #4]
   2113c:	e5802008 	str	r2, [r0, #8]
   21140:	e12fff1e 	bx	lr

00021144 <CNetQueue::IsEmpty() const>:
   21144:	e5900000 	ldr	r0, [r0]
   21148:	e16f0f10 	clz	r0, r0
   2114c:	e1a002a0 	lsr	r0, r0, #5
   21150:	e12fff1e 	bx	lr

00021154 <CNetQueue::Flush()>:
   21154:	e92d4070 	push	{r4, r5, r6, lr}
   21158:	e5904000 	ldr	r4, [r0]
   2115c:	e3540000 	cmp	r4, #0
   21160:	08bd8070 	popeq	{r4, r5, r6, pc}
   21164:	e1a05000 	mov	r5, r0
   21168:	e3a06000 	mov	r6, #0
   2116c:	ea00000f 	b	211b0 <CNetQueue::Flush()+0x5c>
   21170:	e3540000 	cmp	r4, #0
   21174:	0a000014 	beq	211cc <CNetQueue::Flush()+0x78>
   21178:	e5943004 	ldr	r3, [r4, #4]
   2117c:	e3530000 	cmp	r3, #0
   21180:	e5853000 	str	r3, [r5]
   21184:	15836000 	strne	r6, [r3]
   21188:	0a000015 	beq	211e4 <CNetQueue::Flush()+0x90>
   2118c:	e5953008 	ldr	r3, [r5, #8]
   21190:	e3530000 	cmp	r3, #0
   21194:	1a000010 	bne	211dc <CNetQueue::Flush()+0x88>
   21198:	e1a00004 	mov	r0, r4
   2119c:	e3a01e65 	mov	r1, #1616	; 0x650
   211a0:	eb00274c 	bl	2aed8 <operator delete(void*, unsigned int)>
   211a4:	e5954000 	ldr	r4, [r5]
   211a8:	e3540000 	cmp	r4, #0
   211ac:	08bd8070 	popeq	{r4, r5, r6, pc}
   211b0:	e5950008 	ldr	r0, [r5, #8]
   211b4:	e3500000 	cmp	r0, #0
   211b8:	0affffec 	beq	21170 <CNetQueue::Flush()+0x1c>
   211bc:	eb002a64 	bl	2bb54 <EnterCritical>
   211c0:	e5954000 	ldr	r4, [r5]
   211c4:	e3540000 	cmp	r4, #0
   211c8:	1affffea 	bne	21178 <CNetQueue::Flush()+0x24>
   211cc:	e3a0203a 	mov	r2, #58	; 0x3a
   211d0:	e59f102c 	ldr	r1, [pc, #44]	; 21204 <CNetQueue::Flush()+0xb0>
   211d4:	e59f002c 	ldr	r0, [pc, #44]	; 21208 <CNetQueue::Flush()+0xb4>
   211d8:	eb000d29 	bl	24684 <assertion_failed>
   211dc:	eb002a86 	bl	2bbfc <LeaveCritical>
   211e0:	eaffffec 	b	21198 <CNetQueue::Flush()+0x44>
   211e4:	e5952004 	ldr	r2, [r5, #4]
   211e8:	e1520004 	cmp	r2, r4
   211ec:	05853004 	streq	r3, [r5, #4]
   211f0:	0affffe5 	beq	2118c <CNetQueue::Flush()+0x38>
   211f4:	e3a02043 	mov	r2, #67	; 0x43
   211f8:	e59f1004 	ldr	r1, [pc, #4]	; 21204 <CNetQueue::Flush()+0xb0>
   211fc:	e59f0008 	ldr	r0, [pc, #8]	; 2120c <CNetQueue::Flush()+0xb8>
   21200:	eb000d1f 	bl	24684 <assertion_failed>
   21204:	00043e44 	.word	0x00043e44
   21208:	00043910 	.word	0x00043910
   2120c:	00043e54 	.word	0x00043e54

00021210 <CNetQueue::~CNetQueue()>:
   21210:	e92d4010 	push	{r4, lr}
   21214:	e1a04000 	mov	r4, r0
   21218:	ebffffcd 	bl	21154 <CNetQueue::Flush()>
   2121c:	e1a00004 	mov	r0, r4
   21220:	e8bd8010 	pop	{r4, pc}

00021224 <CNetQueue::Enqueue(void const*, unsigned int, void*)>:
   21224:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21228:	e1a05002 	mov	r5, r2
   2122c:	e1a08000 	mov	r8, r0
   21230:	e3a00e65 	mov	r0, #1616	; 0x650
   21234:	e1a06001 	mov	r6, r1
   21238:	e1a07003 	mov	r7, r3
   2123c:	eb002717 	bl	2aea0 <operator new(unsigned int)>
   21240:	e3550000 	cmp	r5, #0
   21244:	0a000026 	beq	212e4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xc0>
   21248:	e3550d19 	cmp	r5, #1600	; 0x640
   2124c:	8a000028 	bhi	212f4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xd0>
   21250:	e3560000 	cmp	r6, #0
   21254:	e1a04000 	mov	r4, r0
   21258:	e5805008 	str	r5, [r0, #8]
   2125c:	0a000028 	beq	21304 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xe0>
   21260:	e1a02005 	mov	r2, r5
   21264:	e1a01006 	mov	r1, r6
   21268:	e280000c 	add	r0, r0, #12
   2126c:	eb002525 	bl	2a708 <memcpy>
   21270:	e5980008 	ldr	r0, [r8, #8]
   21274:	e584764c 	str	r7, [r4, #1612]	; 0x64c
   21278:	e3500000 	cmp	r0, #0
   2127c:	1a000012 	bne	212cc <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xa8>
   21280:	e898000a 	ldm	r8, {r1, r3}
   21284:	e3a02000 	mov	r2, #0
   21288:	e1510002 	cmp	r1, r2
   2128c:	e5842004 	str	r2, [r4, #4]
   21290:	e5843000 	str	r3, [r4]
   21294:	05884000 	streq	r4, [r8]
   21298:	0a000005 	beq	212b4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x90>
   2129c:	e3530000 	cmp	r3, #0
   212a0:	0a00000b 	beq	212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xb0>
   212a4:	e5932004 	ldr	r2, [r3, #4]
   212a8:	e3520000 	cmp	r2, #0
   212ac:	05834004 	streq	r4, [r3, #4]
   212b0:	1a000017 	bne	21314 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xf0>
   212b4:	e5983008 	ldr	r3, [r8, #8]
   212b8:	e5884004 	str	r4, [r8, #4]
   212bc:	e3530000 	cmp	r3, #0
   212c0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   212c4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   212c8:	ea002a4b 	b	2bbfc <LeaveCritical>
   212cc:	eb002a20 	bl	2bb54 <EnterCritical>
   212d0:	eaffffea 	b	21280 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x5c>
   212d4:	e3a02066 	mov	r2, #102	; 0x66
   212d8:	e59f1044 	ldr	r1, [pc, #68]	; 21324 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   212dc:	e59f0044 	ldr	r0, [pc, #68]	; 21328 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x104>
   212e0:	eb000ce7 	bl	24684 <assertion_failed>
   212e4:	e3a02052 	mov	r2, #82	; 0x52
   212e8:	e59f1034 	ldr	r1, [pc, #52]	; 21324 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   212ec:	e59f0038 	ldr	r0, [pc, #56]	; 2132c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x108>
   212f0:	eb000ce3 	bl	24684 <assertion_failed>
   212f4:	e3a02053 	mov	r2, #83	; 0x53
   212f8:	e59f1024 	ldr	r1, [pc, #36]	; 21324 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   212fc:	e59f002c 	ldr	r0, [pc, #44]	; 21330 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x10c>
   21300:	eb000cdf 	bl	24684 <assertion_failed>
   21304:	e3a02056 	mov	r2, #86	; 0x56
   21308:	e59f1014 	ldr	r1, [pc, #20]	; 21324 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   2130c:	e59f0020 	ldr	r0, [pc, #32]	; 21334 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x110>
   21310:	eb000cdb 	bl	24684 <assertion_failed>
   21314:	e3a02067 	mov	r2, #103	; 0x67
   21318:	e59f1004 	ldr	r1, [pc, #4]	; 21324 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   2131c:	e59f0014 	ldr	r0, [pc, #20]	; 21338 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x114>
   21320:	eb000cd7 	bl	24684 <assertion_failed>
   21324:	00043e44 	.word	0x00043e44
   21328:	00043e68 	.word	0x00043e68
   2132c:	00043358 	.word	0x00043358
   21330:	00041084 	.word	0x00041084
   21334:	00040460 	.word	0x00040460
   21338:	00043e78 	.word	0x00043e78

0002133c <CNetQueue::Dequeue(void*, void**)>:
   2133c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21340:	e5906000 	ldr	r6, [r0]
   21344:	e3560000 	cmp	r6, #0
   21348:	0a000027 	beq	213ec <CNetQueue::Dequeue(void*, void**)+0xb0>
   2134c:	e1a04000 	mov	r4, r0
   21350:	e5900008 	ldr	r0, [r0, #8]
   21354:	e1a05001 	mov	r5, r1
   21358:	e3500000 	cmp	r0, #0
   2135c:	e1a07002 	mov	r7, r2
   21360:	1a000019 	bne	213cc <CNetQueue::Dequeue(void*, void**)+0x90>
   21364:	e5963004 	ldr	r3, [r6, #4]
   21368:	e3530000 	cmp	r3, #0
   2136c:	e5843000 	str	r3, [r4]
   21370:	0a000022 	beq	21400 <CNetQueue::Dequeue(void*, void**)+0xc4>
   21374:	e3a02000 	mov	r2, #0
   21378:	e5832000 	str	r2, [r3]
   2137c:	e5943008 	ldr	r3, [r4, #8]
   21380:	e3530000 	cmp	r3, #0
   21384:	1a00001b 	bne	213f8 <CNetQueue::Dequeue(void*, void**)+0xbc>
   21388:	e5964008 	ldr	r4, [r6, #8]
   2138c:	e3540000 	cmp	r4, #0
   21390:	0a000022 	beq	21420 <CNetQueue::Dequeue(void*, void**)+0xe4>
   21394:	e3540d19 	cmp	r4, #1600	; 0x640
   21398:	8a000024 	bhi	21430 <CNetQueue::Dequeue(void*, void**)+0xf4>
   2139c:	e1a02004 	mov	r2, r4
   213a0:	e286100c 	add	r1, r6, #12
   213a4:	e1a00005 	mov	r0, r5
   213a8:	eb0024d6 	bl	2a708 <memcpy>
   213ac:	e3570000 	cmp	r7, #0
   213b0:	1596364c 	ldrne	r3, [r6, #1612]	; 0x64c
   213b4:	e1a00006 	mov	r0, r6
   213b8:	e3a01e65 	mov	r1, #1616	; 0x650
   213bc:	15873000 	strne	r3, [r7]
   213c0:	eb0026c4 	bl	2aed8 <operator delete(void*, unsigned int)>
   213c4:	e1a00004 	mov	r0, r4
   213c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   213cc:	eb0029e0 	bl	2bb54 <EnterCritical>
   213d0:	e5946000 	ldr	r6, [r4]
   213d4:	e3560000 	cmp	r6, #0
   213d8:	1affffe1 	bne	21364 <CNetQueue::Dequeue(void*, void**)+0x28>
   213dc:	e3a02078 	mov	r2, #120	; 0x78
   213e0:	e59f1058 	ldr	r1, [pc, #88]	; 21440 <CNetQueue::Dequeue(void*, void**)+0x104>
   213e4:	e59f0058 	ldr	r0, [pc, #88]	; 21444 <CNetQueue::Dequeue(void*, void**)+0x108>
   213e8:	eb000ca5 	bl	24684 <assertion_failed>
   213ec:	e1a04006 	mov	r4, r6
   213f0:	e1a00004 	mov	r0, r4
   213f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   213f8:	eb0029ff 	bl	2bbfc <LeaveCritical>
   213fc:	eaffffe1 	b	21388 <CNetQueue::Dequeue(void*, void**)+0x4c>
   21400:	e5942004 	ldr	r2, [r4, #4]
   21404:	e1520006 	cmp	r2, r6
   21408:	05843004 	streq	r3, [r4, #4]
   2140c:	0affffda 	beq	2137c <CNetQueue::Dequeue(void*, void**)+0x40>
   21410:	e3a02081 	mov	r2, #129	; 0x81
   21414:	e59f1024 	ldr	r1, [pc, #36]	; 21440 <CNetQueue::Dequeue(void*, void**)+0x104>
   21418:	e59f0028 	ldr	r0, [pc, #40]	; 21448 <CNetQueue::Dequeue(void*, void**)+0x10c>
   2141c:	eb000c98 	bl	24684 <assertion_failed>
   21420:	e3a02088 	mov	r2, #136	; 0x88
   21424:	e59f1014 	ldr	r1, [pc, #20]	; 21440 <CNetQueue::Dequeue(void*, void**)+0x104>
   21428:	e59f001c 	ldr	r0, [pc, #28]	; 2144c <CNetQueue::Dequeue(void*, void**)+0x110>
   2142c:	eb000c94 	bl	24684 <assertion_failed>
   21430:	e3a02089 	mov	r2, #137	; 0x89
   21434:	e59f1004 	ldr	r1, [pc, #4]	; 21440 <CNetQueue::Dequeue(void*, void**)+0x104>
   21438:	e59f0010 	ldr	r0, [pc, #16]	; 21450 <CNetQueue::Dequeue(void*, void**)+0x114>
   2143c:	eb000c90 	bl	24684 <assertion_failed>
   21440:	00043e44 	.word	0x00043e44
   21444:	00043910 	.word	0x00043910
   21448:	00043e54 	.word	0x00043e54
   2144c:	00043e8c 	.word	0x00043e8c
   21450:	00043e98 	.word	0x00043e98

00021454 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>:
   21454:	e92d4070 	push	{r4, r5, r6, lr}
   21458:	e1a04000 	mov	r4, r0
   2145c:	e3a06000 	mov	r6, #0
   21460:	e1a05002 	mov	r5, r2
   21464:	e1a00001 	mov	r0, r1
   21468:	e5c4600c 	strb	r6, [r4, #12]
   2146c:	e1a01004 	mov	r1, r4
   21470:	ebfffea9 	bl	20f1c <CIPAddress::CopyTo(unsigned char*) const>
   21474:	e1a00004 	mov	r0, r4
   21478:	e5c46008 	strb	r6, [r4, #8]
   2147c:	e5c45009 	strb	r5, [r4, #9]
   21480:	e8bd8070 	pop	{r4, r5, r6, pc}

00021484 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>:
   21484:	e92d4070 	push	{r4, r5, r6, lr}
   21488:	e3a0c001 	mov	ip, #1
   2148c:	e1a04000 	mov	r4, r0
   21490:	e1a06002 	mov	r6, r2
   21494:	e1a00001 	mov	r0, r1
   21498:	e5c4c00c 	strb	ip, [r4, #12]
   2149c:	e1a01004 	mov	r1, r4
   214a0:	e1a05003 	mov	r5, r3
   214a4:	ebfffe9c 	bl	20f1c <CIPAddress::CopyTo(unsigned char*) const>
   214a8:	e1a00006 	mov	r0, r6
   214ac:	e2841004 	add	r1, r4, #4
   214b0:	ebfffe99 	bl	20f1c <CIPAddress::CopyTo(unsigned char*) const>
   214b4:	e3a03000 	mov	r3, #0
   214b8:	e1a00004 	mov	r0, r4
   214bc:	e5c45009 	strb	r5, [r4, #9]
   214c0:	e5c43008 	strb	r3, [r4, #8]
   214c4:	e8bd8070 	pop	{r4, r5, r6, pc}

000214c8 <CChecksumCalculator::~CChecksumCalculator()>:
   214c8:	e12fff1e 	bx	lr

000214cc <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>:
   214cc:	e1a03001 	mov	r3, r1
   214d0:	e1a01000 	mov	r1, r0
   214d4:	e1a00003 	mov	r0, r3
   214d8:	eafffe8f 	b	20f1c <CIPAddress::CopyTo(unsigned char*) const>

000214dc <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>:
   214dc:	e92d4010 	push	{r4, lr}
   214e0:	e1a04000 	mov	r4, r0
   214e4:	e1a00001 	mov	r0, r1
   214e8:	e2841004 	add	r1, r4, #4
   214ec:	ebfffe8a 	bl	20f1c <CIPAddress::CopyTo(unsigned char*) const>
   214f0:	e3a03001 	mov	r3, #1
   214f4:	e5c4300c 	strb	r3, [r4, #12]
   214f8:	e8bd8010 	pop	{r4, pc}

000214fc <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>:
   214fc:	e2503000 	subs	r3, r0, #0
   21500:	e92d4010 	push	{r4, lr}
   21504:	0a000011 	beq	21550 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x54>
   21508:	e3510000 	cmp	r1, #0
   2150c:	0a000013 	beq	21560 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x64>
   21510:	e3510001 	cmp	r1, #1
   21514:	9a000015 	bls	21570 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x74>
   21518:	e1a00002 	mov	r0, r2
   2151c:	e241c002 	sub	ip, r1, #2
   21520:	e3ccc001 	bic	ip, ip, #1
   21524:	e28cc002 	add	ip, ip, #2
   21528:	e083c00c 	add	ip, r3, ip
   2152c:	e0d320b2 	ldrh	r2, [r3], #2
   21530:	e153000c 	cmp	r3, ip
   21534:	e0800002 	add	r0, r0, r2
   21538:	1afffffb 	bne	2152c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x30>
   2153c:	e3110001 	tst	r1, #1
   21540:	08bd8010 	popeq	{r4, pc}
   21544:	e5dc3000 	ldrb	r3, [ip]
   21548:	e0800003 	add	r0, r0, r3
   2154c:	e8bd8010 	pop	{r4, pc}
   21550:	e3a02054 	mov	r2, #84	; 0x54
   21554:	e59f1020 	ldr	r1, [pc, #32]	; 2157c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x80>
   21558:	e59f0020 	ldr	r0, [pc, #32]	; 21580 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x84>
   2155c:	eb000c48 	bl	24684 <assertion_failed>
   21560:	e3a02055 	mov	r2, #85	; 0x55
   21564:	e59f1010 	ldr	r1, [pc, #16]	; 2157c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x80>
   21568:	e59f0014 	ldr	r0, [pc, #20]	; 21584 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x88>
   2156c:	eb000c44 	bl	24684 <assertion_failed>
   21570:	e1a0c003 	mov	ip, r3
   21574:	e1a00002 	mov	r0, r2
   21578:	eafffff1 	b	21544 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x48>
   2157c:	00043eb8 	.word	0x00043eb8
   21580:	00043ed0 	.word	0x00043ed0
   21584:	00043358 	.word	0x00043358

00021588 <CChecksumCalculator::Calculate(void const*, unsigned int)>:
   21588:	e5d0c00c 	ldrb	ip, [r0, #12]
   2158c:	e92d4070 	push	{r4, r5, r6, lr}
   21590:	e35c0000 	cmp	ip, #0
   21594:	0a00001b 	beq	21608 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x80>
   21598:	e1a05001 	mov	r5, r1
   2159c:	e6bf1fb2 	rev16	r1, r2
   215a0:	e1a04002 	mov	r4, r2
   215a4:	e6ff2071 	uxth	r2, r1
   215a8:	e1a02422 	lsr	r2, r2, #8
   215ac:	e5c0100a 	strb	r1, [r0, #10]
   215b0:	e5c0200b 	strb	r2, [r0, #11]
   215b4:	e3a0100c 	mov	r1, #12
   215b8:	e3a02000 	mov	r2, #0
   215bc:	ebffffce 	bl	214fc <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   215c0:	e3550000 	cmp	r5, #0
   215c4:	e1a02000 	mov	r2, r0
   215c8:	0a000012 	beq	21618 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x90>
   215cc:	e3540000 	cmp	r4, #0
   215d0:	0a000014 	beq	21628 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xa0>
   215d4:	e1a01004 	mov	r1, r4
   215d8:	e1a00005 	mov	r0, r5
   215dc:	ebffffc6 	bl	214fc <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   215e0:	e1b03820 	lsrs	r3, r0, #16
   215e4:	e1a03820 	lsr	r3, r0, #16
   215e8:	0a000003 	beq	215fc <CChecksumCalculator::Calculate(void const*, unsigned int)+0x74>
   215ec:	e6f30070 	uxtah	r0, r3, r0
   215f0:	e1b03820 	lsrs	r3, r0, #16
   215f4:	e3a03001 	mov	r3, #1
   215f8:	1afffffb 	bne	215ec <CChecksumCalculator::Calculate(void const*, unsigned int)+0x64>
   215fc:	e1e00000 	mvn	r0, r0
   21600:	e6ff0070 	uxth	r0, r0
   21604:	e8bd8070 	pop	{r4, r5, r6, pc}
   21608:	e3a0203c 	mov	r2, #60	; 0x3c
   2160c:	e59f1024 	ldr	r1, [pc, #36]	; 21638 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb0>
   21610:	e59f0024 	ldr	r0, [pc, #36]	; 2163c <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb4>
   21614:	eb000c1a 	bl	24684 <assertion_failed>
   21618:	e3a02041 	mov	r2, #65	; 0x41
   2161c:	e59f1014 	ldr	r1, [pc, #20]	; 21638 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb0>
   21620:	e59f0018 	ldr	r0, [pc, #24]	; 21640 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb8>
   21624:	eb000c16 	bl	24684 <assertion_failed>
   21628:	e3a02042 	mov	r2, #66	; 0x42
   2162c:	e59f1004 	ldr	r1, [pc, #4]	; 21638 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb0>
   21630:	e59f000c 	ldr	r0, [pc, #12]	; 21644 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xbc>
   21634:	eb000c12 	bl	24684 <assertion_failed>
   21638:	00043eb8 	.word	0x00043eb8
   2163c:	00043ee0 	.word	0x00043ee0
   21640:	00040460 	.word	0x00040460
   21644:	00043358 	.word	0x00043358

00021648 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>:
   21648:	e3500000 	cmp	r0, #0
   2164c:	e92d4010 	push	{r4, lr}
   21650:	0a00000d 	beq	2168c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x44>
   21654:	e3510000 	cmp	r1, #0
   21658:	0a00000f 	beq	2169c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x54>
   2165c:	e3a02000 	mov	r2, #0
   21660:	ebffffa5 	bl	214fc <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   21664:	e1b03820 	lsrs	r3, r0, #16
   21668:	e1a03820 	lsr	r3, r0, #16
   2166c:	0a000003 	beq	21680 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x38>
   21670:	e6f30070 	uxtah	r0, r3, r0
   21674:	e1b03820 	lsrs	r3, r0, #16
   21678:	e3a03001 	mov	r3, #1
   2167c:	1afffffb 	bne	21670 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x28>
   21680:	e1e00000 	mvn	r0, r0
   21684:	e6ff0070 	uxth	r0, r0
   21688:	e8bd8010 	pop	{r4, pc}
   2168c:	e3a0204a 	mov	r2, #74	; 0x4a
   21690:	e59f1014 	ldr	r1, [pc, #20]	; 216ac <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x64>
   21694:	e59f0014 	ldr	r0, [pc, #20]	; 216b0 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x68>
   21698:	eb000bf9 	bl	24684 <assertion_failed>
   2169c:	e3a0204b 	mov	r2, #75	; 0x4b
   216a0:	e59f1004 	ldr	r1, [pc, #4]	; 216ac <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x64>
   216a4:	e59f0008 	ldr	r0, [pc, #8]	; 216b4 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x6c>
   216a8:	eb000bf5 	bl	24684 <assertion_failed>
   216ac:	00043eb8 	.word	0x00043eb8
   216b0:	00040460 	.word	0x00040460
   216b4:	00043358 	.word	0x00043358

000216b8 <CChecksumCalculator::FoldResult(unsigned int)>:
   216b8:	e1b03820 	lsrs	r3, r0, #16
   216bc:	e1a03820 	lsr	r3, r0, #16
   216c0:	0a000003 	beq	216d4 <CChecksumCalculator::FoldResult(unsigned int)+0x1c>
   216c4:	e6f30070 	uxtah	r0, r3, r0
   216c8:	e1b03820 	lsrs	r3, r0, #16
   216cc:	e3a03001 	mov	r3, #1
   216d0:	1afffffb 	bne	216c4 <CChecksumCalculator::FoldResult(unsigned int)+0xc>
   216d4:	e6ff0070 	uxth	r0, r0
   216d8:	e12fff1e 	bx	lr

000216dc <CDHCPClient::HaltNetwork() [clone .part.0]>:
   216dc:	e92d4010 	push	{r4, lr}
   216e0:	e59f2008 	ldr	r2, [pc, #8]	; 216f0 <CDHCPClient::HaltNetwork() [clone .part.0]+0x14>
   216e4:	e59f1008 	ldr	r1, [pc, #8]	; 216f4 <CDHCPClient::HaltNetwork() [clone .part.0]+0x18>
   216e8:	e59f0008 	ldr	r0, [pc, #8]	; 216f8 <CDHCPClient::HaltNetwork() [clone .part.0]+0x1c>
   216ec:	eb000be4 	bl	24684 <assertion_failed>
   216f0:	000001ae 	.word	0x000001ae
   216f4:	00043ef4 	.word	0x00043ef4
   216f8:	000432d0 	.word	0x000432d0

000216fc <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>:
   216fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21700:	e1a04000 	mov	r4, r0
   21704:	e1a05001 	mov	r5, r1
   21708:	e3a01902 	mov	r1, #32768	; 0x8000
   2170c:	e1a06002 	mov	r6, r2
   21710:	eb00099b 	bl	23d84 <CTask::CTask(unsigned int)>
   21714:	e59f30a0 	ldr	r3, [pc, #160]	; 217bc <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc0>
   21718:	e1a00005 	mov	r0, r5
   2171c:	e5843000 	str	r3, [r4]
   21720:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   21724:	ebffdfac 	bl	195dc <CNetSubSystem::GetConfig()>
   21728:	e28470e4 	add	r7, r4, #228	; 0xe4
   2172c:	e3560000 	cmp	r6, #0
   21730:	e59f1088 	ldr	r1, [pc, #136]	; 217c0 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc4>
   21734:	e58400e0 	str	r0, [r4, #224]	; 0xe0
   21738:	11a01006 	movne	r1, r6
   2173c:	e1a00007 	mov	r0, r7
   21740:	eb0018ad 	bl	279fc <CString::CString(char const*)>
   21744:	e3a02011 	mov	r2, #17
   21748:	e1a01005 	mov	r1, r5
   2174c:	e28400f4 	add	r0, r4, #244	; 0xf4
   21750:	eb00068a 	bl	23180 <CSocket::CSocket(CNetSubSystem*, int)>
   21754:	e3a02000 	mov	r2, #0
   21758:	e59430dc 	ldr	r3, [r4, #220]	; 0xdc
   2175c:	e5c42194 	strb	r2, [r4, #404]	; 0x194
   21760:	e1530002 	cmp	r3, r2
   21764:	0a000008 	beq	2178c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0x90>
   21768:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
   2176c:	e3530000 	cmp	r3, #0
   21770:	0a000009 	beq	2179c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xa0>
   21774:	e1a00007 	mov	r0, r7
   21778:	eb0018e3 	bl	27b0c <CString::GetLength() const>
   2177c:	e350001e 	cmp	r0, #30
   21780:	8a000009 	bhi	217ac <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xb0>
   21784:	e1a00004 	mov	r0, r4
   21788:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2178c:	e3a02073 	mov	r2, #115	; 0x73
   21790:	e59f102c 	ldr	r1, [pc, #44]	; 217c4 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   21794:	e59f002c 	ldr	r0, [pc, #44]	; 217c8 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xcc>
   21798:	eb000bb9 	bl	24684 <assertion_failed>
   2179c:	e3a02074 	mov	r2, #116	; 0x74
   217a0:	e59f101c 	ldr	r1, [pc, #28]	; 217c4 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   217a4:	e59f0020 	ldr	r0, [pc, #32]	; 217cc <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xd0>
   217a8:	eb000bb5 	bl	24684 <assertion_failed>
   217ac:	e3a02076 	mov	r2, #118	; 0x76
   217b0:	e59f100c 	ldr	r1, [pc, #12]	; 217c4 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   217b4:	e59f0014 	ldr	r0, [pc, #20]	; 217d0 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xd4>
   217b8:	eb000bb1 	bl	24684 <assertion_failed>
   217bc:	00044234 	.word	0x00044234
   217c0:	00047150 	.word	0x00047150
   217c4:	00043ef4 	.word	0x00043ef4
   217c8:	00043290 	.word	0x00043290
   217cc:	000432d0 	.word	0x000432d0
   217d0:	00043f04 	.word	0x00043f04

000217d4 <CDHCPClient::IsBound() const>:
   217d4:	e5d00194 	ldrb	r0, [r0, #404]	; 0x194
   217d8:	e12fff1e 	bx	lr

000217dc <CDHCPClient::HaltNetwork()>:
   217dc:	e3a02000 	mov	r2, #0
   217e0:	e59030e0 	ldr	r3, [r0, #224]	; 0xe0
   217e4:	e5c02194 	strb	r2, [r0, #404]	; 0x194
   217e8:	e1530002 	cmp	r3, r2
   217ec:	0a000001 	beq	217f8 <CDHCPClient::HaltNetwork()+0x1c>
   217f0:	e1a00003 	mov	r0, r3
   217f4:	eafffcc1 	b	20b00 <CNetConfig::Reset()>
   217f8:	e92d4010 	push	{r4, lr}
   217fc:	ebffffb6 	bl	216dc <CDHCPClient::HaltNetwork() [clone .part.0]>

00021800 <CDHCPClient::CheckConfig()>:
   21800:	e92d4030 	push	{r4, r5, lr}
   21804:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   21808:	e1a04000 	mov	r4, r0
   2180c:	e3530000 	cmp	r3, #0
   21810:	e24dd014 	sub	sp, sp, #20
   21814:	0a00002a 	beq	218c4 <CDHCPClient::CheckConfig()+0xc4>
   21818:	e59021c0 	ldr	r2, [r0, #448]	; 0x1c0
   2181c:	e3520000 	cmp	r2, #0
   21820:	0a000027 	beq	218c4 <CDHCPClient::CheckConfig()+0xc4>
   21824:	e59011c4 	ldr	r1, [r0, #452]	; 0x1c4
   21828:	e3510000 	cmp	r1, #0
   2182c:	0a000024 	beq	218c4 <CDHCPClient::CheckConfig()+0xc4>
   21830:	e59001c8 	ldr	r0, [r0, #456]	; 0x1c8
   21834:	e3500000 	cmp	r0, #0
   21838:	0a000021 	beq	218c4 <CDHCPClient::CheckConfig()+0xc4>
   2183c:	e0233001 	eor	r3, r3, r1
   21840:	e1130002 	tst	r3, r2
   21844:	1a000033 	bne	21918 <CDHCPClient::CheckConfig()+0x118>
   21848:	e59451cc 	ldr	r5, [r4, #460]	; 0x1cc
   2184c:	e3550000 	cmp	r5, #0
   21850:	0a00003d 	beq	2194c <CDHCPClient::CheckConfig()+0x14c>
   21854:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   21858:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   2185c:	e3520000 	cmp	r2, #0
   21860:	1a000027 	bne	21904 <CDHCPClient::CheckConfig()+0x104>
   21864:	e3530000 	cmp	r3, #0
   21868:	01a020a5 	lsreq	r2, r5, #1
   2186c:	004531a5 	subeq	r3, r5, r5, lsr #3
   21870:	10652083 	rsbne	r2, r5, r3, lsl #1
   21874:	058421d8 	streq	r2, [r4, #472]	; 0x1d8
   21878:	058431dc 	streq	r3, [r4, #476]	; 0x1dc
   2187c:	158421d8 	strne	r2, [r4, #472]	; 0x1d8
   21880:	e1530002 	cmp	r3, r2
   21884:	21550003 	cmpcs	r5, r3
   21888:	23a00001 	movcs	r0, #1
   2188c:	2a00001a 	bcs	218fc <CDHCPClient::CheckConfig()+0xfc>
   21890:	eb001463 	bl	26a24 <CLogger::Get()>
   21894:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   21898:	e59421dc 	ldr	r2, [r4, #476]	; 0x1dc
   2189c:	e59431d8 	ldr	r3, [r4, #472]	; 0x1d8
   218a0:	e58d1008 	str	r1, [sp, #8]
   218a4:	e58d2004 	str	r2, [sp, #4]
   218a8:	e58d3000 	str	r3, [sp]
   218ac:	e3a02002 	mov	r2, #2
   218b0:	e59f30b0 	ldr	r3, [pc, #176]	; 21968 <CDHCPClient::CheckConfig()+0x168>
   218b4:	e59f10b0 	ldr	r1, [pc, #176]	; 2196c <CDHCPClient::CheckConfig()+0x16c>
   218b8:	eb00139b 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   218bc:	e3a00000 	mov	r0, #0
   218c0:	ea00000d 	b	218fc <CDHCPClient::CheckConfig()+0xfc>
   218c4:	eb001456 	bl	26a24 <CLogger::Get()>
   218c8:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   218cc:	e59421c0 	ldr	r2, [r4, #448]	; 0x1c0
   218d0:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   218d4:	e594c1c8 	ldr	ip, [r4, #456]	; 0x1c8
   218d8:	e58d1008 	str	r1, [sp, #8]
   218dc:	e58d2004 	str	r2, [sp, #4]
   218e0:	e58d3000 	str	r3, [sp]
   218e4:	e3a02002 	mov	r2, #2
   218e8:	e59f3080 	ldr	r3, [pc, #128]	; 21970 <CDHCPClient::CheckConfig()+0x170>
   218ec:	e59f1078 	ldr	r1, [pc, #120]	; 2196c <CDHCPClient::CheckConfig()+0x16c>
   218f0:	e58dc00c 	str	ip, [sp, #12]
   218f4:	eb00138c 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   218f8:	e3a00000 	mov	r0, #0
   218fc:	e28dd014 	add	sp, sp, #20
   21900:	e8bd8030 	pop	{r4, r5, pc}
   21904:	e3530000 	cmp	r3, #0
   21908:	00453002 	subeq	r3, r5, r2
   2190c:	008230a3 	addeq	r3, r2, r3, lsr #1
   21910:	058431dc 	streq	r3, [r4, #476]	; 0x1dc
   21914:	eaffffd9 	b	21880 <CDHCPClient::CheckConfig()+0x80>
   21918:	eb001441 	bl	26a24 <CLogger::Get()>
   2191c:	e59411c0 	ldr	r1, [r4, #448]	; 0x1c0
   21920:	e59421c4 	ldr	r2, [r4, #452]	; 0x1c4
   21924:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   21928:	e58d1008 	str	r1, [sp, #8]
   2192c:	e58d2004 	str	r2, [sp, #4]
   21930:	e58d3000 	str	r3, [sp]
   21934:	e3a02002 	mov	r2, #2
   21938:	e59f3034 	ldr	r3, [pc, #52]	; 21974 <CDHCPClient::CheckConfig()+0x174>
   2193c:	e59f1028 	ldr	r1, [pc, #40]	; 2196c <CDHCPClient::CheckConfig()+0x16c>
   21940:	eb001379 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21944:	e3a00000 	mov	r0, #0
   21948:	eaffffeb 	b	218fc <CDHCPClient::CheckConfig()+0xfc>
   2194c:	eb001434 	bl	26a24 <CLogger::Get()>
   21950:	e3a02002 	mov	r2, #2
   21954:	e59f301c 	ldr	r3, [pc, #28]	; 21978 <CDHCPClient::CheckConfig()+0x178>
   21958:	e59f100c 	ldr	r1, [pc, #12]	; 2196c <CDHCPClient::CheckConfig()+0x16c>
   2195c:	eb001372 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21960:	e1a00005 	mov	r0, r5
   21964:	eaffffe4 	b	218fc <CDHCPClient::CheckConfig()+0xfc>
   21968:	00043f98 	.word	0x00043f98
   2196c:	00044240 	.word	0x00044240
   21970:	00043f24 	.word	0x00043f24
   21974:	00043f54 	.word	0x00043f54
   21978:	00043f80 	.word	0x00043f80

0002197c <CDHCPClient::GetUnaligned(void const*)>:
   2197c:	e3500000 	cmp	r0, #0
   21980:	0a000001 	beq	2198c <CDHCPClient::GetUnaligned(void const*)+0x10>
   21984:	e5900000 	ldr	r0, [r0]
   21988:	e12fff1e 	bx	lr
   2198c:	e3a02e36 	mov	r2, #864	; 0x360
   21990:	e92d4010 	push	{r4, lr}
   21994:	e59f1004 	ldr	r1, [pc, #4]	; 219a0 <CDHCPClient::GetUnaligned(void const*)+0x24>
   21998:	e59f0004 	ldr	r0, [pc, #4]	; 219a4 <CDHCPClient::GetUnaligned(void const*)+0x28>
   2199c:	eb000b38 	bl	24684 <assertion_failed>
   219a0:	00043ef4 	.word	0x00043ef4
   219a4:	00043fb8 	.word	0x00043fb8

000219a8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>:
   219a8:	e92d4070 	push	{r4, r5, r6, lr}
   219ac:	e2514000 	subs	r4, r1, #0
   219b0:	0a0000b0 	beq	21c78 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x2d0>
   219b4:	e1a06000 	mov	r6, r0
   219b8:	e0845002 	add	r5, r4, r2
   219bc:	e2840002 	add	r0, r4, #2
   219c0:	e1550000 	cmp	r5, r0
   219c4:	38bd8070 	popcc	{r4, r5, r6, pc}
   219c8:	e5d43000 	ldrb	r3, [r4]
   219cc:	e353003b 	cmp	r3, #59	; 0x3b
   219d0:	8a000050 	bhi	21b18 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x170>
   219d4:	e353003b 	cmp	r3, #59	; 0x3b
   219d8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   219dc:	ea000044 	b	21af4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x14c>
   219e0:	00021c70 	.word	0x00021c70
   219e4:	00021c48 	.word	0x00021c48
   219e8:	00021af4 	.word	0x00021af4
   219ec:	00021c14 	.word	0x00021c14
   219f0:	00021af4 	.word	0x00021af4
   219f4:	00021af4 	.word	0x00021af4
   219f8:	00021bec 	.word	0x00021bec
   219fc:	00021af4 	.word	0x00021af4
   21a00:	00021af4 	.word	0x00021af4
   21a04:	00021af4 	.word	0x00021af4
   21a08:	00021af4 	.word	0x00021af4
   21a0c:	00021af4 	.word	0x00021af4
   21a10:	00021af4 	.word	0x00021af4
   21a14:	00021af4 	.word	0x00021af4
   21a18:	00021af4 	.word	0x00021af4
   21a1c:	00021af4 	.word	0x00021af4
   21a20:	00021af4 	.word	0x00021af4
   21a24:	00021af4 	.word	0x00021af4
   21a28:	00021af4 	.word	0x00021af4
   21a2c:	00021af4 	.word	0x00021af4
   21a30:	00021af4 	.word	0x00021af4
   21a34:	00021af4 	.word	0x00021af4
   21a38:	00021af4 	.word	0x00021af4
   21a3c:	00021af4 	.word	0x00021af4
   21a40:	00021af4 	.word	0x00021af4
   21a44:	00021af4 	.word	0x00021af4
   21a48:	00021af4 	.word	0x00021af4
   21a4c:	00021af4 	.word	0x00021af4
   21a50:	00021af4 	.word	0x00021af4
   21a54:	00021af4 	.word	0x00021af4
   21a58:	00021af4 	.word	0x00021af4
   21a5c:	00021af4 	.word	0x00021af4
   21a60:	00021af4 	.word	0x00021af4
   21a64:	00021af4 	.word	0x00021af4
   21a68:	00021af4 	.word	0x00021af4
   21a6c:	00021af4 	.word	0x00021af4
   21a70:	00021af4 	.word	0x00021af4
   21a74:	00021af4 	.word	0x00021af4
   21a78:	00021af4 	.word	0x00021af4
   21a7c:	00021af4 	.word	0x00021af4
   21a80:	00021af4 	.word	0x00021af4
   21a84:	00021af4 	.word	0x00021af4
   21a88:	00021af4 	.word	0x00021af4
   21a8c:	00021af4 	.word	0x00021af4
   21a90:	00021af4 	.word	0x00021af4
   21a94:	00021af4 	.word	0x00021af4
   21a98:	00021af4 	.word	0x00021af4
   21a9c:	00021af4 	.word	0x00021af4
   21aa0:	00021af4 	.word	0x00021af4
   21aa4:	00021af4 	.word	0x00021af4
   21aa8:	00021af4 	.word	0x00021af4
   21aac:	00021bc0 	.word	0x00021bc0
   21ab0:	00021b9c 	.word	0x00021b9c
   21ab4:	00021b78 	.word	0x00021b78
   21ab8:	00021b50 	.word	0x00021b50
   21abc:	00021af4 	.word	0x00021af4
   21ac0:	00021af4 	.word	0x00021af4
   21ac4:	00021af4 	.word	0x00021af4
   21ac8:	00021b24 	.word	0x00021b24
   21acc:	00021ad0 	.word	0x00021ad0
   21ad0:	e5d43001 	ldrb	r3, [r4, #1]
   21ad4:	e3530004 	cmp	r3, #4
   21ad8:	1a000006 	bne	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21adc:	e2841006 	add	r1, r4, #6
   21ae0:	e1550001 	cmp	r5, r1
   21ae4:	3a000003 	bcc	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21ae8:	ebffffa3 	bl	2197c <CDHCPClient::GetUnaligned(void const*)>
   21aec:	e6bf0f30 	rev	r0, r0
   21af0:	e58601dc 	str	r0, [r6, #476]	; 0x1dc
   21af4:	e5d43001 	ldrb	r3, [r4, #1]
   21af8:	e2833002 	add	r3, r3, #2
   21afc:	e0844003 	add	r4, r4, r3
   21b00:	e2840002 	add	r0, r4, #2
   21b04:	e1550000 	cmp	r5, r0
   21b08:	38bd8070 	popcc	{r4, r5, r6, pc}
   21b0c:	e5d43000 	ldrb	r3, [r4]
   21b10:	e353003b 	cmp	r3, #59	; 0x3b
   21b14:	9affffae 	bls	219d4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x2c>
   21b18:	e35300ff 	cmp	r3, #255	; 0xff
   21b1c:	08bd8070 	popeq	{r4, r5, r6, pc}
   21b20:	eafffff3 	b	21af4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x14c>
   21b24:	e5d43001 	ldrb	r3, [r4, #1]
   21b28:	e3530004 	cmp	r3, #4
   21b2c:	1afffff1 	bne	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21b30:	e2841006 	add	r1, r4, #6
   21b34:	e1550001 	cmp	r5, r1
   21b38:	3affffee 	bcc	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21b3c:	ebffff8e 	bl	2197c <CDHCPClient::GetUnaligned(void const*)>
   21b40:	e6bf0f30 	rev	r0, r0
   21b44:	e58601d8 	str	r0, [r6, #472]	; 0x1d8
   21b48:	e5d43001 	ldrb	r3, [r4, #1]
   21b4c:	eaffffe9 	b	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21b50:	e5d43001 	ldrb	r3, [r4, #1]
   21b54:	e3530004 	cmp	r3, #4
   21b58:	1affffe6 	bne	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21b5c:	e2841006 	add	r1, r4, #6
   21b60:	e1550001 	cmp	r5, r1
   21b64:	3affffe3 	bcc	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21b68:	ebffff83 	bl	2197c <CDHCPClient::GetUnaligned(void const*)>
   21b6c:	e58601d4 	str	r0, [r6, #468]	; 0x1d4
   21b70:	e5d43001 	ldrb	r3, [r4, #1]
   21b74:	eaffffdf 	b	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21b78:	e5d43001 	ldrb	r3, [r4, #1]
   21b7c:	e3530001 	cmp	r3, #1
   21b80:	1affffdc 	bne	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21b84:	e2842003 	add	r2, r4, #3
   21b88:	e1550002 	cmp	r5, r2
   21b8c:	25d43002 	ldrbcs	r3, [r4, #2]
   21b90:	25c631d1 	strbcs	r3, [r6, #465]	; 0x1d1
   21b94:	25d43001 	ldrbcs	r3, [r4, #1]
   21b98:	eaffffd6 	b	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21b9c:	e5d43001 	ldrb	r3, [r4, #1]
   21ba0:	e3530001 	cmp	r3, #1
   21ba4:	1affffd3 	bne	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21ba8:	e2842003 	add	r2, r4, #3
   21bac:	e1550002 	cmp	r5, r2
   21bb0:	25d43002 	ldrbcs	r3, [r4, #2]
   21bb4:	25c631d0 	strbcs	r3, [r6, #464]	; 0x1d0
   21bb8:	25d43001 	ldrbcs	r3, [r4, #1]
   21bbc:	eaffffcd 	b	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21bc0:	e5d43001 	ldrb	r3, [r4, #1]
   21bc4:	e3530004 	cmp	r3, #4
   21bc8:	1affffca 	bne	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21bcc:	e2841006 	add	r1, r4, #6
   21bd0:	e1550001 	cmp	r5, r1
   21bd4:	3affffc7 	bcc	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21bd8:	ebffff67 	bl	2197c <CDHCPClient::GetUnaligned(void const*)>
   21bdc:	e6bf0f30 	rev	r0, r0
   21be0:	e58601cc 	str	r0, [r6, #460]	; 0x1cc
   21be4:	e5d43001 	ldrb	r3, [r4, #1]
   21be8:	eaffffc2 	b	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21bec:	e5d43001 	ldrb	r3, [r4, #1]
   21bf0:	e3530003 	cmp	r3, #3
   21bf4:	9affffbf 	bls	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21bf8:	e2841006 	add	r1, r4, #6
   21bfc:	e1550001 	cmp	r5, r1
   21c00:	3affffbc 	bcc	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c04:	ebffff5c 	bl	2197c <CDHCPClient::GetUnaligned(void const*)>
   21c08:	e58601c8 	str	r0, [r6, #456]	; 0x1c8
   21c0c:	e5d43001 	ldrb	r3, [r4, #1]
   21c10:	eaffffb8 	b	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c14:	e5d43001 	ldrb	r3, [r4, #1]
   21c18:	e3530003 	cmp	r3, #3
   21c1c:	9affffb5 	bls	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c20:	e2841006 	add	r1, r4, #6
   21c24:	e1550001 	cmp	r5, r1
   21c28:	3affffb2 	bcc	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c2c:	e59611c4 	ldr	r1, [r6, #452]	; 0x1c4
   21c30:	e3510000 	cmp	r1, #0
   21c34:	1affffaf 	bne	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c38:	ebffff4f 	bl	2197c <CDHCPClient::GetUnaligned(void const*)>
   21c3c:	e58601c4 	str	r0, [r6, #452]	; 0x1c4
   21c40:	e5d43001 	ldrb	r3, [r4, #1]
   21c44:	eaffffab 	b	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c48:	e5d43001 	ldrb	r3, [r4, #1]
   21c4c:	e3530004 	cmp	r3, #4
   21c50:	1affffa8 	bne	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c54:	e2841006 	add	r1, r4, #6
   21c58:	e1550001 	cmp	r5, r1
   21c5c:	3affffa5 	bcc	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c60:	ebffff45 	bl	2197c <CDHCPClient::GetUnaligned(void const*)>
   21c64:	e58601c0 	str	r0, [r6, #448]	; 0x1c0
   21c68:	e5d43001 	ldrb	r3, [r4, #1]
   21c6c:	eaffffa1 	b	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c70:	e2844001 	add	r4, r4, #1
   21c74:	eaffffa1 	b	21b00 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x158>
   21c78:	e59f2008 	ldr	r2, [pc, #8]	; 21c88 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x2e0>
   21c7c:	e59f1008 	ldr	r1, [pc, #8]	; 21c8c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x2e4>
   21c80:	e59f0008 	ldr	r0, [pc, #8]	; 21c90 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x2e8>
   21c84:	eb000a7e 	bl	24684 <assertion_failed>
   21c88:	000002ad 	.word	0x000002ad
   21c8c:	00043ef4 	.word	0x00043ef4
   21c90:	00043fc4 	.word	0x00043fc4

00021c94 <CDHCPClient::GetXID() const>:
   21c94:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   21c98:	e92d4010 	push	{r4, lr}
   21c9c:	e3500000 	cmp	r0, #0
   21ca0:	0a00000b 	beq	21cd4 <CDHCPClient::GetXID() const+0x40>
   21ca4:	ebffde4e 	bl	195e4 <CNetSubSystem::GetNetDeviceLayer()>
   21ca8:	ebffe7de 	bl	1bc28 <CNetDeviceLayer::GetMACAddress() const>
   21cac:	eb0023d5 	bl	2ac08 <CMACAddress::Get() const>
   21cb0:	e2504000 	subs	r4, r0, #0
   21cb4:	0a00000a 	beq	21ce4 <CDHCPClient::GetXID() const+0x50>
   21cb8:	eb00203d 	bl	29db4 <CTimer::Get()>
   21cbc:	e2840002 	add	r0, r4, #2
   21cc0:	ebffff2d 	bl	2197c <CDHCPClient::GetUnaligned(void const*)>
   21cc4:	e1a04000 	mov	r4, r0
   21cc8:	eb001d80 	bl	292d0 <CTimer::GetClockTicks()>
   21ccc:	e0840000 	add	r0, r4, r0
   21cd0:	e8bd8010 	pop	{r4, pc}
   21cd4:	e59f2018 	ldr	r2, [pc, #24]	; 21cf4 <CDHCPClient::GetXID() const+0x60>
   21cd8:	e59f1018 	ldr	r1, [pc, #24]	; 21cf8 <CDHCPClient::GetXID() const+0x64>
   21cdc:	e59f0018 	ldr	r0, [pc, #24]	; 21cfc <CDHCPClient::GetXID() const+0x68>
   21ce0:	eb000a67 	bl	24684 <assertion_failed>
   21ce4:	e3a02fd6 	mov	r2, #856	; 0x358
   21ce8:	e59f1008 	ldr	r1, [pc, #8]	; 21cf8 <CDHCPClient::GetXID() const+0x64>
   21cec:	e59f000c 	ldr	r0, [pc, #12]	; 21d00 <CDHCPClient::GetXID() const+0x6c>
   21cf0:	eb000a63 	bl	24684 <assertion_failed>
   21cf4:	00000356 	.word	0x00000356
   21cf8:	00043ef4 	.word	0x00043ef4
   21cfc:	00043290 	.word	0x00043290
   21d00:	00043640 	.word	0x00043640

00021d04 <CDHCPClient::SetUnaligned(void*, unsigned int)>:
   21d04:	e3500000 	cmp	r0, #0
   21d08:	0a000007 	beq	21d2c <CDHCPClient::SetUnaligned(void*, unsigned int)+0x28>
   21d0c:	e1a0c421 	lsr	ip, r1, #8
   21d10:	e1a02821 	lsr	r2, r1, #16
   21d14:	e1a03c21 	lsr	r3, r1, #24
   21d18:	e5c01000 	strb	r1, [r0]
   21d1c:	e5c0c001 	strb	ip, [r0, #1]
   21d20:	e5c02002 	strb	r2, [r0, #2]
   21d24:	e5c03003 	strb	r3, [r0, #3]
   21d28:	e12fff1e 	bx	lr
   21d2c:	e92d4010 	push	{r4, lr}
   21d30:	e59f2008 	ldr	r2, [pc, #8]	; 21d40 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x3c>
   21d34:	e59f1008 	ldr	r1, [pc, #8]	; 21d44 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x40>
   21d38:	e59f0008 	ldr	r0, [pc, #8]	; 21d48 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x44>
   21d3c:	eb000a50 	bl	24684 <assertion_failed>
   21d40:	0000036d 	.word	0x0000036d
   21d44:	00043ef4 	.word	0x00043ef4
   21d48:	00043fb8 	.word	0x00043fb8

00021d4c <CDHCPClient::~CDHCPClient()>:
   21d4c:	e3a02000 	mov	r2, #0
   21d50:	e92d4010 	push	{r4, lr}
   21d54:	e1a04000 	mov	r4, r0
   21d58:	e59f3024 	ldr	r3, [pc, #36]	; 21d84 <CDHCPClient::~CDHCPClient()+0x38>
   21d5c:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   21d60:	e5803000 	str	r3, [r0]
   21d64:	e28000f4 	add	r0, r0, #244	; 0xf4
   21d68:	eb0003d9 	bl	22cd4 <CSocket::~CSocket()>
   21d6c:	e28400e4 	add	r0, r4, #228	; 0xe4
   21d70:	eb0016e8 	bl	27918 <CString::~CString()>
   21d74:	e1a00004 	mov	r0, r4
   21d78:	eb0007b0 	bl	23c40 <CTask::~CTask()>
   21d7c:	e1a00004 	mov	r0, r4
   21d80:	e8bd8010 	pop	{r4, pc}
   21d84:	00044234 	.word	0x00044234

00021d88 <CDHCPClient::~CDHCPClient()>:
   21d88:	e92d4010 	push	{r4, lr}
   21d8c:	e1a04000 	mov	r4, r0
   21d90:	ebffffed 	bl	21d4c <CDHCPClient::~CDHCPClient()>
   21d94:	e1a00004 	mov	r0, r4
   21d98:	e3a01e1e 	mov	r1, #480	; 0x1e0
   21d9c:	eb00244d 	bl	2aed8 <operator delete(void*, unsigned int)>
   21da0:	e1a00004 	mov	r0, r4
   21da4:	e8bd8010 	pop	{r4, pc}

00021da8 <CDHCPClient::ReceiveMessage()>:
   21da8:	e92d4070 	push	{r4, r5, r6, lr}
   21dac:	e24dde23 	sub	sp, sp, #560	; 0x230
   21db0:	e1a04000 	mov	r4, r0
   21db4:	e3a03040 	mov	r3, #64	; 0x40
   21db8:	e3a02f89 	mov	r2, #548	; 0x224
   21dbc:	e28000f4 	add	r0, r0, #244	; 0xf4
   21dc0:	e28d100c 	add	r1, sp, #12
   21dc4:	eb000468 	bl	22f6c <CSocket::Receive(void*, unsigned int, int)>
   21dc8:	e35000ef 	cmp	r0, #239	; 0xef
   21dcc:	da000002 	ble	21ddc <CDHCPClient::ReceiveMessage()+0x34>
   21dd0:	e5dd300c 	ldrb	r3, [sp, #12]
   21dd4:	e3530002 	cmp	r3, #2
   21dd8:	0a000003 	beq	21dec <CDHCPClient::ReceiveMessage()+0x44>
   21ddc:	e3a04000 	mov	r4, #0
   21de0:	e1a00004 	mov	r0, r4
   21de4:	e28dde23 	add	sp, sp, #560	; 0x230
   21de8:	e8bd8070 	pop	{r4, r5, r6, pc}
   21dec:	e5dd300d 	ldrb	r3, [sp, #13]
   21df0:	e3530001 	cmp	r3, #1
   21df4:	1afffff8 	bne	21ddc <CDHCPClient::ReceiveMessage()+0x34>
   21df8:	e5dd300e 	ldrb	r3, [sp, #14]
   21dfc:	e3530006 	cmp	r3, #6
   21e00:	1afffff5 	bne	21ddc <CDHCPClient::ReceiveMessage()+0x34>
   21e04:	e59d2010 	ldr	r2, [sp, #16]
   21e08:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
   21e0c:	e1520003 	cmp	r2, r3
   21e10:	1afffff1 	bne	21ddc <CDHCPClient::ReceiveMessage()+0x34>
   21e14:	e59f3114 	ldr	r3, [pc, #276]	; 21f30 <CDHCPClient::ReceiveMessage()+0x188>
   21e18:	e59d20f8 	ldr	r2, [sp, #248]	; 0xf8
   21e1c:	e1520003 	cmp	r2, r3
   21e20:	1affffed 	bne	21ddc <CDHCPClient::ReceiveMessage()+0x34>
   21e24:	e1a05000 	mov	r5, r0
   21e28:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   21e2c:	e3500000 	cmp	r0, #0
   21e30:	0a000030 	beq	21ef8 <CDHCPClient::ReceiveMessage()+0x150>
   21e34:	ebffddea 	bl	195e4 <CNetSubSystem::GetNetDeviceLayer()>
   21e38:	ebffe77a 	bl	1bc28 <CNetDeviceLayer::GetMACAddress() const>
   21e3c:	e2506000 	subs	r6, r0, #0
   21e40:	0a000036 	beq	21f20 <CDHCPClient::ReceiveMessage()+0x178>
   21e44:	e28d1028 	add	r1, sp, #40	; 0x28
   21e48:	e28d0004 	add	r0, sp, #4
   21e4c:	eb00235f 	bl	2abd0 <CMACAddress::CMACAddress(unsigned char const*)>
   21e50:	e1a01006 	mov	r1, r6
   21e54:	e28d0004 	add	r0, sp, #4
   21e58:	eb002347 	bl	2ab7c <CMACAddress::operator!=(CMACAddress const&) const>
   21e5c:	e3500000 	cmp	r0, #0
   21e60:	13a04000 	movne	r4, #0
   21e64:	1a000016 	bne	21ec4 <CDHCPClient::ReceiveMessage()+0x11c>
   21e68:	e59d101c 	ldr	r1, [sp, #28]
   21e6c:	e2843e1d 	add	r3, r4, #464	; 0x1d0
   21e70:	e58401c0 	str	r0, [r4, #448]	; 0x1c0
   21e74:	e58401c4 	str	r0, [r4, #452]	; 0x1c4
   21e78:	e58401c8 	str	r0, [r4, #456]	; 0x1c8
   21e7c:	e58401cc 	str	r0, [r4, #460]	; 0x1cc
   21e80:	e58411bc 	str	r1, [r4, #444]	; 0x1bc
   21e84:	e24520f0 	sub	r2, r5, #240	; 0xf0
   21e88:	e1c300b0 	strh	r0, [r3]
   21e8c:	e28d10fc 	add	r1, sp, #252	; 0xfc
   21e90:	e58401d4 	str	r0, [r4, #468]	; 0x1d4
   21e94:	e58401d8 	str	r0, [r4, #472]	; 0x1d8
   21e98:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
   21e9c:	e1a00004 	mov	r0, r4
   21ea0:	ebfffec0 	bl	219a8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21ea4:	e5d431d0 	ldrb	r3, [r4, #464]	; 0x1d0
   21ea8:	e3530002 	cmp	r3, #2
   21eac:	0a00000b 	beq	21ee0 <CDHCPClient::ReceiveMessage()+0x138>
   21eb0:	e3530003 	cmp	r3, #3
   21eb4:	0a000005 	beq	21ed0 <CDHCPClient::ReceiveMessage()+0x128>
   21eb8:	e3530001 	cmp	r3, #1
   21ebc:	13a04001 	movne	r4, #1
   21ec0:	0a000010 	beq	21f08 <CDHCPClient::ReceiveMessage()+0x160>
   21ec4:	e28d0004 	add	r0, sp, #4
   21ec8:	eb002312 	bl	2ab18 <CMACAddress::~CMACAddress()>
   21ecc:	eaffffc3 	b	21de0 <CDHCPClient::ReceiveMessage()+0x38>
   21ed0:	e3a02080 	mov	r2, #128	; 0x80
   21ed4:	e1a00004 	mov	r0, r4
   21ed8:	e28d1078 	add	r1, sp, #120	; 0x78
   21edc:	ebfffeb1 	bl	219a8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21ee0:	e1a00004 	mov	r0, r4
   21ee4:	e3a02040 	mov	r2, #64	; 0x40
   21ee8:	e28d1038 	add	r1, sp, #56	; 0x38
   21eec:	ebfffead 	bl	219a8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21ef0:	e3a04001 	mov	r4, #1
   21ef4:	eafffff2 	b	21ec4 <CDHCPClient::ReceiveMessage()+0x11c>
   21ef8:	e59f2034 	ldr	r2, [pc, #52]	; 21f34 <CDHCPClient::ReceiveMessage()+0x18c>
   21efc:	e59f1034 	ldr	r1, [pc, #52]	; 21f38 <CDHCPClient::ReceiveMessage()+0x190>
   21f00:	e59f0034 	ldr	r0, [pc, #52]	; 21f3c <CDHCPClient::ReceiveMessage()+0x194>
   21f04:	eb0009de 	bl	24684 <assertion_failed>
   21f08:	e1a00004 	mov	r0, r4
   21f0c:	e3a02080 	mov	r2, #128	; 0x80
   21f10:	e28d1078 	add	r1, sp, #120	; 0x78
   21f14:	e1a04003 	mov	r4, r3
   21f18:	ebfffea2 	bl	219a8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21f1c:	eaffffe8 	b	21ec4 <CDHCPClient::ReceiveMessage()+0x11c>
   21f20:	e59f2018 	ldr	r2, [pc, #24]	; 21f40 <CDHCPClient::ReceiveMessage()+0x198>
   21f24:	e59f100c 	ldr	r1, [pc, #12]	; 21f38 <CDHCPClient::ReceiveMessage()+0x190>
   21f28:	e59f0014 	ldr	r0, [pc, #20]	; 21f44 <CDHCPClient::ReceiveMessage()+0x19c>
   21f2c:	eb0009d4 	bl	24684 <assertion_failed>
   21f30:	63538263 	.word	0x63538263
   21f34:	0000027b 	.word	0x0000027b
   21f38:	00043ef4 	.word	0x00043ef4
   21f3c:	00043290 	.word	0x00043290
   21f40:	0000027d 	.word	0x0000027d
   21f44:	000434bc 	.word	0x000434bc

00021f48 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>:
   21f48:	e92d4070 	push	{r4, r5, r6, lr}
   21f4c:	e1a04000 	mov	r4, r0
   21f50:	e24ddf8a 	sub	sp, sp, #552	; 0x228
   21f54:	e1a05001 	mov	r5, r1
   21f58:	e1a06002 	mov	r6, r2
   21f5c:	e3a01000 	mov	r1, #0
   21f60:	e3a02f89 	mov	r2, #548	; 0x224
   21f64:	e28d0004 	add	r0, sp, #4
   21f68:	eb001f9d 	bl	29de4 <memset>
   21f6c:	e5d431b0 	ldrb	r3, [r4, #432]	; 0x1b0
   21f70:	e3a02006 	mov	r2, #6
   21f74:	e3530000 	cmp	r3, #0
   21f78:	13a01080 	movne	r1, #128	; 0x80
   21f7c:	03a01000 	moveq	r1, #0
   21f80:	e59f30cc 	ldr	r3, [pc, #204]	; 22054 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x10c>
   21f84:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   21f88:	e1cd30b4 	strh	r3, [sp, #4]
   21f8c:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
   21f90:	e1cd10be 	strh	r1, [sp, #14]
   21f94:	e58d3008 	str	r3, [sp, #8]
   21f98:	e59411b8 	ldr	r1, [r4, #440]	; 0x1b8
   21f9c:	e59f30b4 	ldr	r3, [pc, #180]	; 22058 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x110>
   21fa0:	e3500000 	cmp	r0, #0
   21fa4:	e58d1010 	str	r1, [sp, #16]
   21fa8:	e5cd2006 	strb	r2, [sp, #6]
   21fac:	e58d30f0 	str	r3, [sp, #240]	; 0xf0
   21fb0:	0a000017 	beq	22014 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xcc>
   21fb4:	ebffdd8a 	bl	195e4 <CNetSubSystem::GetNetDeviceLayer()>
   21fb8:	ebffe71a 	bl	1bc28 <CNetDeviceLayer::GetMACAddress() const>
   21fbc:	e3500000 	cmp	r0, #0
   21fc0:	0a000017 	beq	22024 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xdc>
   21fc4:	e28d1020 	add	r1, sp, #32
   21fc8:	eb00231a 	bl	2ac38 <CMACAddress::CopyTo(unsigned char*) const>
   21fcc:	e3550000 	cmp	r5, #0
   21fd0:	0a000017 	beq	22034 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xec>
   21fd4:	e3560f4d 	cmp	r6, #308	; 0x134
   21fd8:	8a000019 	bhi	22044 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xfc>
   21fdc:	e1a02006 	mov	r2, r6
   21fe0:	e1a01005 	mov	r1, r5
   21fe4:	e28d00f4 	add	r0, sp, #244	; 0xf4
   21fe8:	eb0021c6 	bl	2a708 <memcpy>
   21fec:	e3a03000 	mov	r3, #0
   21ff0:	e3a02f89 	mov	r2, #548	; 0x224
   21ff4:	e28d1004 	add	r1, sp, #4
   21ff8:	e28400f4 	add	r0, r4, #244	; 0xf4
   21ffc:	eb0003bc 	bl	22ef4 <CSocket::Send(void const*, unsigned int, int)>
   22000:	e2400f89 	sub	r0, r0, #548	; 0x224
   22004:	e16f0f10 	clz	r0, r0
   22008:	e1a002a0 	lsr	r0, r0, #5
   2200c:	e28ddf8a 	add	sp, sp, #552	; 0x228
   22010:	e8bd8070 	pop	{r4, r5, r6, pc}
   22014:	e3a02f96 	mov	r2, #600	; 0x258
   22018:	e59f103c 	ldr	r1, [pc, #60]	; 2205c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   2201c:	e59f003c 	ldr	r0, [pc, #60]	; 22060 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x118>
   22020:	eb000997 	bl	24684 <assertion_failed>
   22024:	e59f2038 	ldr	r2, [pc, #56]	; 22064 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x11c>
   22028:	e59f102c 	ldr	r1, [pc, #44]	; 2205c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   2202c:	e59f0034 	ldr	r0, [pc, #52]	; 22068 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x120>
   22030:	eb000993 	bl	24684 <assertion_failed>
   22034:	e59f2030 	ldr	r2, [pc, #48]	; 2206c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x124>
   22038:	e59f101c 	ldr	r1, [pc, #28]	; 2205c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   2203c:	e59f002c 	ldr	r0, [pc, #44]	; 22070 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x128>
   22040:	eb00098f 	bl	24684 <assertion_failed>
   22044:	e59f2028 	ldr	r2, [pc, #40]	; 22074 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x12c>
   22048:	e59f100c 	ldr	r1, [pc, #12]	; 2205c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   2204c:	e59f0024 	ldr	r0, [pc, #36]	; 22078 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x130>
   22050:	eb00098b 	bl	24684 <assertion_failed>
   22054:	00000101 	.word	0x00000101
   22058:	63538263 	.word	0x63538263
   2205c:	00043ef4 	.word	0x00043ef4
   22060:	00043290 	.word	0x00043290
   22064:	0000025a 	.word	0x0000025a
   22068:	00043640 	.word	0x00043640
   2206c:	0000025d 	.word	0x0000025d
   22070:	00043fc4 	.word	0x00043fc4
   22074:	0000025e 	.word	0x0000025e
   22078:	00043fd4 	.word	0x00043fd4

0002207c <CDHCPClient::SendDiscover()>:
   2207c:	e3a01000 	mov	r1, #0
   22080:	e3a0200c 	mov	r2, #12
   22084:	e58011b8 	str	r1, [r0, #440]	; 0x1b8
   22088:	e59f1000 	ldr	r1, [pc]	; 22090 <CDHCPClient::SendDiscover()+0x14>
   2208c:	eaffffad 	b	21f48 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   22090:	00044248 	.word	0x00044248

00022094 <CDHCPClient::SendRequest(unsigned int)>:
   22094:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22098:	e3510000 	cmp	r1, #0
   2209c:	e1a07000 	mov	r7, r0
   220a0:	e28db01c 	add	fp, sp, #28
   220a4:	e58011b8 	str	r1, [r0, #440]	; 0x1b8
   220a8:	1a000036 	bne	22188 <CDHCPClient::SendRequest(unsigned int)+0xf4>
   220ac:	e59f1108 	ldr	r1, [pc, #264]	; 221bc <CDHCPClient::SendRequest(unsigned int)+0x128>
   220b0:	e3a06018 	mov	r6, #24
   220b4:	e1a05001 	mov	r5, r1
   220b8:	e59021a0 	ldr	r2, [r0, #416]	; 0x1a0
   220bc:	e590319c 	ldr	r3, [r0, #412]	; 0x19c
   220c0:	e1a00422 	lsr	r0, r2, #8
   220c4:	e1a04822 	lsr	r4, r2, #16
   220c8:	e1a0ec22 	lsr	lr, r2, #24
   220cc:	e5c10006 	strb	r0, [r1, #6]
   220d0:	e1a0c423 	lsr	ip, r3, #8
   220d4:	e5c12005 	strb	r2, [r1, #5]
   220d8:	e1a00823 	lsr	r0, r3, #16
   220dc:	e1a02c23 	lsr	r2, r3, #24
   220e0:	e5c14007 	strb	r4, [r1, #7]
   220e4:	e5c1e008 	strb	lr, [r1, #8]
   220e8:	e5c1300b 	strb	r3, [r1, #11]
   220ec:	e5c1c00c 	strb	ip, [r1, #12]
   220f0:	e5c1000d 	strb	r0, [r1, #13]
   220f4:	e5c1200e 	strb	r2, [r1, #14]
   220f8:	e28780e4 	add	r8, r7, #228	; 0xe4
   220fc:	e1a00008 	mov	r0, r8
   22100:	eb001681 	bl	27b0c <CString::GetLength() const>
   22104:	e2504000 	subs	r4, r0, #0
   22108:	0a000021 	beq	22194 <CDHCPClient::SendRequest(unsigned int)+0x100>
   2210c:	e35400ff 	cmp	r4, #255	; 0xff
   22110:	8a000025 	bhi	221ac <CDHCPClient::SendRequest(unsigned int)+0x118>
   22114:	e086c004 	add	ip, r6, r4
   22118:	e28c3009 	add	r3, ip, #9
   2211c:	e3c33007 	bic	r3, r3, #7
   22120:	e04dd003 	sub	sp, sp, r3
   22124:	e1a01005 	mov	r1, r5
   22128:	e1a02006 	mov	r2, r6
   2212c:	e1a0000d 	mov	r0, sp
   22130:	e28c9002 	add	r9, ip, #2
   22134:	eb002173 	bl	2a708 <memcpy>
   22138:	e3a0200c 	mov	r2, #12
   2213c:	e2466001 	sub	r6, r6, #1
   22140:	e08d3006 	add	r3, sp, r6
   22144:	e7cd2006 	strb	r2, [sp, r6]
   22148:	e1a00008 	mov	r0, r8
   2214c:	e5c34001 	strb	r4, [r3, #1]
   22150:	e2835002 	add	r5, r3, #2
   22154:	eb00163a 	bl	27a44 <CString::operator char const*() const>
   22158:	e1a02004 	mov	r2, r4
   2215c:	e1a01000 	mov	r1, r0
   22160:	e1a00005 	mov	r0, r5
   22164:	eb002167 	bl	2a708 <memcpy>
   22168:	e3e03000 	mvn	r3, #0
   2216c:	e1a02009 	mov	r2, r9
   22170:	e1a00007 	mov	r0, r7
   22174:	e1a0100d 	mov	r1, sp
   22178:	e7c53004 	strb	r3, [r5, r4]
   2217c:	ebffff71 	bl	21f48 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   22180:	e24bd01c 	sub	sp, fp, #28
   22184:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22188:	e3a0600c 	mov	r6, #12
   2218c:	e59f502c 	ldr	r5, [pc, #44]	; 221c0 <CDHCPClient::SendRequest(unsigned int)+0x12c>
   22190:	eaffffd8 	b	220f8 <CDHCPClient::SendRequest(unsigned int)+0x64>
   22194:	e1a02006 	mov	r2, r6
   22198:	e1a01005 	mov	r1, r5
   2219c:	e1a00007 	mov	r0, r7
   221a0:	ebffff68 	bl	21f48 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   221a4:	e24bd01c 	sub	sp, fp, #28
   221a8:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   221ac:	e59f2010 	ldr	r2, [pc, #16]	; 221c4 <CDHCPClient::SendRequest(unsigned int)+0x130>
   221b0:	e59f1010 	ldr	r1, [pc, #16]	; 221c8 <CDHCPClient::SendRequest(unsigned int)+0x134>
   221b4:	e59f0010 	ldr	r0, [pc, #16]	; 221cc <CDHCPClient::SendRequest(unsigned int)+0x138>
   221b8:	eb000931 	bl	24684 <assertion_failed>
   221bc:	0004792c 	.word	0x0004792c
   221c0:	00044254 	.word	0x00044254
   221c4:	00000231 	.word	0x00000231
   221c8:	00043ef4 	.word	0x00043ef4
   221cc:	00043ffc 	.word	0x00043ffc

000221d0 <CDHCPClient::SendAndReceive(bool, unsigned int)>:
   221d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221d4:	e1a04000 	mov	r4, r0
   221d8:	e1a07001 	mov	r7, r1
   221dc:	e59f5170 	ldr	r5, [pc, #368]	; 22354 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x184>
   221e0:	e24dd014 	sub	sp, sp, #20
   221e4:	e59fa16c 	ldr	sl, [pc, #364]	; 22358 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x188>
   221e8:	e58d200c 	str	r2, [sp, #12]
   221ec:	e245b018 	sub	fp, r5, #24
   221f0:	e2459020 	sub	r9, r5, #32
   221f4:	e3570000 	cmp	r7, #0
   221f8:	0a000040 	beq	22300 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x130>
   221fc:	e1a00004 	mov	r0, r4
   22200:	e59d100c 	ldr	r1, [sp, #12]
   22204:	ebffffa2 	bl	22094 <CDHCPClient::SendRequest(unsigned int)>
   22208:	e2200001 	eor	r0, r0, #1
   2220c:	e6ef3070 	uxtb	r3, r0
   22210:	e3530000 	cmp	r3, #0
   22214:	1a000041 	bne	22320 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x150>
   22218:	eb001ee5 	bl	29db4 <CTimer::Get()>
   2221c:	eb001c32 	bl	292ec <CTimer::GetTicks() const>
   22220:	e1a06000 	mov	r6, r0
   22224:	ea000004 	b	2223c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x6c>
   22228:	e2422005 	sub	r2, r2, #5
   2222c:	e3520001 	cmp	r2, #1
   22230:	9a000017 	bls	22294 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xc4>
   22234:	eb000866 	bl	243d4 <CScheduler::Get()>
   22238:	eb0007da 	bl	241a8 <CScheduler::Yield()>
   2223c:	eb001edc 	bl	29db4 <CTimer::Get()>
   22240:	eb001c29 	bl	292ec <CTimer::GetTicks() const>
   22244:	e5953000 	ldr	r3, [r5]
   22248:	e0400006 	sub	r0, r0, r6
   2224c:	e1500003 	cmp	r0, r3
   22250:	2a000012 	bcs	222a0 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xd0>
   22254:	e1a00004 	mov	r0, r4
   22258:	ebfffed2 	bl	21da8 <CDHCPClient::ReceiveMessage()>
   2225c:	e2508000 	subs	r8, r0, #0
   22260:	0afffff3 	beq	22234 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22264:	e3570000 	cmp	r7, #0
   22268:	e5d421d1 	ldrb	r2, [r4, #465]	; 0x1d1
   2226c:	1affffed 	bne	22228 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x58>
   22270:	e3520002 	cmp	r2, #2
   22274:	1affffee 	bne	22234 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22278:	e1a00004 	mov	r0, r4
   2227c:	ebfffd5f 	bl	21800 <CDHCPClient::CheckConfig()>
   22280:	e3500000 	cmp	r0, #0
   22284:	0affffea 	beq	22234 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22288:	e59421d4 	ldr	r2, [r4, #468]	; 0x1d4
   2228c:	e3520000 	cmp	r2, #0
   22290:	0affffe7 	beq	22234 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22294:	e1a00008 	mov	r0, r8
   22298:	e28dd014 	add	sp, sp, #20
   2229c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   222a0:	eb0011df 	bl	26a24 <CLogger::Get()>
   222a4:	e1a0300a 	mov	r3, sl
   222a8:	e3a02002 	mov	r2, #2
   222ac:	e1a01009 	mov	r1, r9
   222b0:	eb00111d 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   222b4:	e59f30a0 	ldr	r3, [pc, #160]	; 2235c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x18c>
   222b8:	e2855004 	add	r5, r5, #4
   222bc:	e1530005 	cmp	r3, r5
   222c0:	1affffcb 	bne	221f4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x24>
   222c4:	eb0011d6 	bl	26a24 <CLogger::Get()>
   222c8:	e59f2090 	ldr	r2, [pc, #144]	; 22360 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x190>
   222cc:	e59f1090 	ldr	r1, [pc, #144]	; 22364 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x194>
   222d0:	e3570000 	cmp	r7, #0
   222d4:	11a07002 	movne	r7, r2
   222d8:	01a07001 	moveq	r7, r1
   222dc:	e3a08000 	mov	r8, #0
   222e0:	e3a02002 	mov	r2, #2
   222e4:	e59f307c 	ldr	r3, [pc, #124]	; 22368 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x198>
   222e8:	e59f107c 	ldr	r1, [pc, #124]	; 2236c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x19c>
   222ec:	e58d7000 	str	r7, [sp]
   222f0:	eb00110d 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   222f4:	e1a00008 	mov	r0, r8
   222f8:	e28dd014 	add	sp, sp, #20
   222fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22300:	e3a0200c 	mov	r2, #12
   22304:	e1a0100b 	mov	r1, fp
   22308:	e1a00004 	mov	r0, r4
   2230c:	e58471b8 	str	r7, [r4, #440]	; 0x1b8
   22310:	ebffff0c 	bl	21f48 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   22314:	e2200001 	eor	r0, r0, #1
   22318:	e6ef3070 	uxtb	r3, r0
   2231c:	eaffffbb 	b	22210 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x40>
   22320:	eb0011bf 	bl	26a24 <CLogger::Get()>
   22324:	e59f2044 	ldr	r2, [pc, #68]	; 22370 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a0>
   22328:	e59f1044 	ldr	r1, [pc, #68]	; 22374 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a4>
   2232c:	e3570000 	cmp	r7, #0
   22330:	11a07002 	movne	r7, r2
   22334:	01a07001 	moveq	r7, r1
   22338:	e3a02001 	mov	r2, #1
   2233c:	e59f3034 	ldr	r3, [pc, #52]	; 22378 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a8>
   22340:	e59f1024 	ldr	r1, [pc, #36]	; 2236c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x19c>
   22344:	e58d7000 	str	r7, [sp]
   22348:	eb0010f7 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2234c:	e3a08000 	mov	r8, #0
   22350:	eaffffcf 	b	22294 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xc4>
   22354:	00044260 	.word	0x00044260
   22358:	00044048 	.word	0x00044048
   2235c:	00044270 	.word	0x00044270
   22360:	00044024 	.word	0x00044024
   22364:	00044030 	.word	0x00044030
   22368:	0004406c 	.word	0x0004406c
   2236c:	00044240 	.word	0x00044240
   22370:	00044010 	.word	0x00044010
   22374:	00044018 	.word	0x00044018
   22378:	00044038 	.word	0x00044038

0002237c <CDHCPClient::SelectAndRequest()>:
   2237c:	e92d4070 	push	{r4, r5, r6, lr}
   22380:	e3a06001 	mov	r6, #1
   22384:	e1a04000 	mov	r4, r0
   22388:	e24dd028 	sub	sp, sp, #40	; 0x28
   2238c:	e5c061b0 	strb	r6, [r0, #432]	; 0x1b0
   22390:	e28d0008 	add	r0, sp, #8
   22394:	ebfffa18 	bl	20bfc <CIPAddress::CIPAddress()>
   22398:	e28450f4 	add	r5, r4, #244	; 0xf4
   2239c:	e28d0008 	add	r0, sp, #8
   223a0:	ebfffac0 	bl	20ea8 <CIPAddress::SetBroadcast()>
   223a4:	e1a00005 	mov	r0, r5
   223a8:	e3a02043 	mov	r2, #67	; 0x43
   223ac:	e28d1008 	add	r1, sp, #8
   223b0:	eb0001d5 	bl	22b0c <CSocket::Connect(CIPAddress&, unsigned short)>
   223b4:	e3500000 	cmp	r0, #0
   223b8:	ba000066 	blt	22558 <CDHCPClient::SelectAndRequest()+0x1dc>
   223bc:	e1a00005 	mov	r0, r5
   223c0:	e1a01006 	mov	r1, r6
   223c4:	eb000346 	bl	230e4 <CSocket::SetOptionBroadcast(bool)>
   223c8:	e2505000 	subs	r5, r0, #0
   223cc:	1a000056 	bne	2252c <CDHCPClient::SelectAndRequest()+0x1b0>
   223d0:	e1a00004 	mov	r0, r4
   223d4:	ebfffe2e 	bl	21c94 <CDHCPClient::GetXID() const>
   223d8:	e1a02005 	mov	r2, r5
   223dc:	e58401b4 	str	r0, [r4, #436]	; 0x1b4
   223e0:	e1a01005 	mov	r1, r5
   223e4:	e1a00004 	mov	r0, r4
   223e8:	ebffff78 	bl	221d0 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   223ec:	e3500000 	cmp	r0, #0
   223f0:	0a000061 	beq	2257c <CDHCPClient::SelectAndRequest()+0x200>
   223f4:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   223f8:	e3530000 	cmp	r3, #0
   223fc:	e584319c 	str	r3, [r4, #412]	; 0x19c
   22400:	0a000068 	beq	225a8 <CDHCPClient::SelectAndRequest()+0x22c>
   22404:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   22408:	e3530000 	cmp	r3, #0
   2240c:	e58431a0 	str	r3, [r4, #416]	; 0x1a0
   22410:	0a00006f 	beq	225d4 <CDHCPClient::SelectAndRequest()+0x258>
   22414:	e1a02005 	mov	r2, r5
   22418:	e1a01006 	mov	r1, r6
   2241c:	e1a00004 	mov	r0, r4
   22420:	ebffff6a 	bl	221d0 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   22424:	e3500000 	cmp	r0, #0
   22428:	0a000053 	beq	2257c <CDHCPClient::SelectAndRequest()+0x200>
   2242c:	e5d431d1 	ldrb	r3, [r4, #465]	; 0x1d1
   22430:	e3530006 	cmp	r3, #6
   22434:	0a00006a 	beq	225e4 <CDHCPClient::SelectAndRequest()+0x268>
   22438:	e1a00004 	mov	r0, r4
   2243c:	ebfffcef 	bl	21800 <CDHCPClient::CheckConfig()>
   22440:	e3500000 	cmp	r0, #0
   22444:	0a00004e 	beq	22584 <CDHCPClient::SelectAndRequest()+0x208>
   22448:	e594219c 	ldr	r2, [r4, #412]	; 0x19c
   2244c:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   22450:	e1520003 	cmp	r2, r3
   22454:	1a000057 	bne	225b8 <CDHCPClient::SelectAndRequest()+0x23c>
   22458:	e59421a0 	ldr	r2, [r4, #416]	; 0x1a0
   2245c:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   22460:	e1520003 	cmp	r2, r3
   22464:	1a000048 	bne	2258c <CDHCPClient::SelectAndRequest()+0x210>
   22468:	e28d0010 	add	r0, sp, #16
   2246c:	ebfff9e2 	bl	20bfc <CIPAddress::CIPAddress()>
   22470:	e594119c 	ldr	r1, [r4, #412]	; 0x19c
   22474:	e28d0010 	add	r0, sp, #16
   22478:	ebfffa62 	bl	20e08 <CIPAddress::Set(unsigned int)>
   2247c:	e28d0018 	add	r0, sp, #24
   22480:	eb001557 	bl	279e4 <CString::CString()>
   22484:	e28d1018 	add	r1, sp, #24
   22488:	e28d0010 	add	r0, sp, #16
   2248c:	ebfffad8 	bl	20ff4 <CIPAddress::Format(CString*) const>
   22490:	eb001163 	bl	26a24 <CLogger::Get()>
   22494:	e1a05000 	mov	r5, r0
   22498:	e28d0018 	add	r0, sp, #24
   2249c:	eb001568 	bl	27a44 <CString::operator char const*() const>
   224a0:	e1a02000 	mov	r2, r0
   224a4:	e59f3164 	ldr	r3, [pc, #356]	; 22610 <CDHCPClient::SelectAndRequest()+0x294>
   224a8:	e1a00005 	mov	r0, r5
   224ac:	e58d2000 	str	r2, [sp]
   224b0:	e59f115c 	ldr	r1, [pc, #348]	; 22614 <CDHCPClient::SelectAndRequest()+0x298>
   224b4:	e3a02003 	mov	r2, #3
   224b8:	eb00109b 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   224bc:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   224c0:	e3500000 	cmp	r0, #0
   224c4:	0a00004d 	beq	22600 <CDHCPClient::SelectAndRequest()+0x284>
   224c8:	e594119c 	ldr	r1, [r4, #412]	; 0x19c
   224cc:	ebfff9ae 	bl	20b8c <CNetConfig::SetIPAddress(unsigned int)>
   224d0:	e59411c0 	ldr	r1, [r4, #448]	; 0x1c0
   224d4:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   224d8:	ebfff9b2 	bl	20ba8 <CNetConfig::SetNetMask(unsigned int)>
   224dc:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   224e0:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   224e4:	ebfff961 	bl	20a70 <CNetConfig::SetDefaultGateway(unsigned int)>
   224e8:	e59411c8 	ldr	r1, [r4, #456]	; 0x1c8
   224ec:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   224f0:	ebfff960 	bl	20a78 <CNetConfig::SetDNSServer(unsigned int)>
   224f4:	e3a03001 	mov	r3, #1
   224f8:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   224fc:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   22500:	e5c43194 	strb	r3, [r4, #404]	; 0x194
   22504:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   22508:	e58411a4 	str	r1, [r4, #420]	; 0x1a4
   2250c:	e58421a8 	str	r2, [r4, #424]	; 0x1a8
   22510:	e58431ac 	str	r3, [r4, #428]	; 0x1ac
   22514:	e28d0018 	add	r0, sp, #24
   22518:	eb0014fe 	bl	27918 <CString::~CString()>
   2251c:	e28d0010 	add	r0, sp, #16
   22520:	ebfff9cb 	bl	20c54 <CIPAddress::~CIPAddress()>
   22524:	e3a04000 	mov	r4, #0
   22528:	ea000005 	b	22544 <CDHCPClient::SelectAndRequest()+0x1c8>
   2252c:	eb00113c 	bl	26a24 <CLogger::Get()>
   22530:	e1a02006 	mov	r2, r6
   22534:	e59f30dc 	ldr	r3, [pc, #220]	; 22618 <CDHCPClient::SelectAndRequest()+0x29c>
   22538:	e59f10d4 	ldr	r1, [pc, #212]	; 22614 <CDHCPClient::SelectAndRequest()+0x298>
   2253c:	e1a04006 	mov	r4, r6
   22540:	eb001079 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22544:	e28d0008 	add	r0, sp, #8
   22548:	ebfff9c1 	bl	20c54 <CIPAddress::~CIPAddress()>
   2254c:	e1a00004 	mov	r0, r4
   22550:	e28dd028 	add	sp, sp, #40	; 0x28
   22554:	e8bd8070 	pop	{r4, r5, r6, pc}
   22558:	eb001131 	bl	26a24 <CLogger::Get()>
   2255c:	e3a02043 	mov	r2, #67	; 0x43
   22560:	e59f30b4 	ldr	r3, [pc, #180]	; 2261c <CDHCPClient::SelectAndRequest()+0x2a0>
   22564:	e58d2000 	str	r2, [sp]
   22568:	e59f10a4 	ldr	r1, [pc, #164]	; 22614 <CDHCPClient::SelectAndRequest()+0x298>
   2256c:	e1a02006 	mov	r2, r6
   22570:	e1a04006 	mov	r4, r6
   22574:	eb00106c 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22578:	eafffff1 	b	22544 <CDHCPClient::SelectAndRequest()+0x1c8>
   2257c:	e3a04002 	mov	r4, #2
   22580:	eaffffef 	b	22544 <CDHCPClient::SelectAndRequest()+0x1c8>
   22584:	e3a04004 	mov	r4, #4
   22588:	eaffffed 	b	22544 <CDHCPClient::SelectAndRequest()+0x1c8>
   2258c:	eb001124 	bl	26a24 <CLogger::Get()>
   22590:	e3a02002 	mov	r2, #2
   22594:	e59f3084 	ldr	r3, [pc, #132]	; 22620 <CDHCPClient::SelectAndRequest()+0x2a4>
   22598:	e59f1074 	ldr	r1, [pc, #116]	; 22614 <CDHCPClient::SelectAndRequest()+0x298>
   2259c:	eb001062 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   225a0:	e3a04005 	mov	r4, #5
   225a4:	eaffffe6 	b	22544 <CDHCPClient::SelectAndRequest()+0x1c8>
   225a8:	e3a020f9 	mov	r2, #249	; 0xf9
   225ac:	e59f1070 	ldr	r1, [pc, #112]	; 22624 <CDHCPClient::SelectAndRequest()+0x2a8>
   225b0:	e59f0070 	ldr	r0, [pc, #112]	; 22628 <CDHCPClient::SelectAndRequest()+0x2ac>
   225b4:	eb000832 	bl	24684 <assertion_failed>
   225b8:	eb001119 	bl	26a24 <CLogger::Get()>
   225bc:	e3a02002 	mov	r2, #2
   225c0:	e59f3064 	ldr	r3, [pc, #100]	; 2262c <CDHCPClient::SelectAndRequest()+0x2b0>
   225c4:	e59f1048 	ldr	r1, [pc, #72]	; 22614 <CDHCPClient::SelectAndRequest()+0x298>
   225c8:	eb001057 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   225cc:	e3a04005 	mov	r4, #5
   225d0:	eaffffdb 	b	22544 <CDHCPClient::SelectAndRequest()+0x1c8>
   225d4:	e3a020fc 	mov	r2, #252	; 0xfc
   225d8:	e59f1044 	ldr	r1, [pc, #68]	; 22624 <CDHCPClient::SelectAndRequest()+0x2a8>
   225dc:	e59f004c 	ldr	r0, [pc, #76]	; 22630 <CDHCPClient::SelectAndRequest()+0x2b4>
   225e0:	eb000827 	bl	24684 <assertion_failed>
   225e4:	eb00110e 	bl	26a24 <CLogger::Get()>
   225e8:	e3a02002 	mov	r2, #2
   225ec:	e59f3040 	ldr	r3, [pc, #64]	; 22634 <CDHCPClient::SelectAndRequest()+0x2b8>
   225f0:	e59f101c 	ldr	r1, [pc, #28]	; 22614 <CDHCPClient::SelectAndRequest()+0x298>
   225f4:	eb00104c 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   225f8:	e3a04003 	mov	r4, #3
   225fc:	eaffffd0 	b	22544 <CDHCPClient::SelectAndRequest()+0x1c8>
   22600:	e59f2030 	ldr	r2, [pc, #48]	; 22638 <CDHCPClient::SelectAndRequest()+0x2bc>
   22604:	e59f1018 	ldr	r1, [pc, #24]	; 22624 <CDHCPClient::SelectAndRequest()+0x2a8>
   22608:	e59f002c 	ldr	r0, [pc, #44]	; 2263c <CDHCPClient::SelectAndRequest()+0x2c0>
   2260c:	eb00081c 	bl	24684 <assertion_failed>
   22610:	00044148 	.word	0x00044148
   22614:	00044240 	.word	0x00044240
   22618:	000440a4 	.word	0x000440a4
   2261c:	00044080 	.word	0x00044080
   22620:	00044128 	.word	0x00044128
   22624:	00043ef4 	.word	0x00043ef4
   22628:	000440c0 	.word	0x000440c0
   2262c:	00044110 	.word	0x00044110
   22630:	000440d8 	.word	0x000440d8
   22634:	000440f4 	.word	0x000440f4
   22638:	00000126 	.word	0x00000126
   2263c:	000432d0 	.word	0x000432d0

00022640 <CDHCPClient::RenewOrRebind(bool, unsigned int)>:
   22640:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22644:	e1a04000 	mov	r4, r0
   22648:	e24dd018 	sub	sp, sp, #24
   2264c:	e1a05002 	mov	r5, r2
   22650:	e1a06001 	mov	r6, r1
   22654:	eb001dd6 	bl	29db4 <CTimer::Get()>
   22658:	eb001b25 	bl	292f4 <CTimer::GetUptime() const>
   2265c:	e5943198 	ldr	r3, [r4, #408]	; 0x198
   22660:	e0400003 	sub	r0, r0, r3
   22664:	e1500005 	cmp	r0, r5
   22668:	2a00004f 	bcs	227ac <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x16c>
   2266c:	eb0010ec 	bl	26a24 <CLogger::Get()>
   22670:	e3560000 	cmp	r6, #0
   22674:	1a00003d 	bne	22770 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x130>
   22678:	e59f72cc 	ldr	r7, [pc, #716]	; 2294c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x30c>
   2267c:	e59f32cc 	ldr	r3, [pc, #716]	; 22950 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   22680:	e3a02004 	mov	r2, #4
   22684:	e59f12c8 	ldr	r1, [pc, #712]	; 22954 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   22688:	e28d6010 	add	r6, sp, #16
   2268c:	e58d7000 	str	r7, [sp]
   22690:	eb001025 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22694:	e1a00006 	mov	r0, r6
   22698:	ebfff957 	bl	20bfc <CIPAddress::CIPAddress()>
   2269c:	e3a03001 	mov	r3, #1
   226a0:	e1a00006 	mov	r0, r6
   226a4:	e5c431b0 	strb	r3, [r4, #432]	; 0x1b0
   226a8:	ebfff9fe 	bl	20ea8 <CIPAddress::SetBroadcast()>
   226ac:	e28480f4 	add	r8, r4, #244	; 0xf4
   226b0:	e1a00008 	mov	r0, r8
   226b4:	e3a02043 	mov	r2, #67	; 0x43
   226b8:	e1a01006 	mov	r1, r6
   226bc:	eb000112 	bl	22b0c <CSocket::Connect(CIPAddress&, unsigned short)>
   226c0:	e3500000 	cmp	r0, #0
   226c4:	ba00003c 	blt	227bc <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x17c>
   226c8:	e1a00008 	mov	r0, r8
   226cc:	e5d411b0 	ldrb	r1, [r4, #432]	; 0x1b0
   226d0:	eb000283 	bl	230e4 <CSocket::SetOptionBroadcast(bool)>
   226d4:	e3500000 	cmp	r0, #0
   226d8:	0a000018 	beq	22740 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x100>
   226dc:	ea00007f 	b	228e0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2a0>
   226e0:	e1a00004 	mov	r0, r4
   226e4:	ebfffd6a 	bl	21c94 <CDHCPClient::GetXID() const>
   226e8:	e3a01001 	mov	r1, #1
   226ec:	e58401b4 	str	r0, [r4, #436]	; 0x1b4
   226f0:	e594219c 	ldr	r2, [r4, #412]	; 0x19c
   226f4:	e1a00004 	mov	r0, r4
   226f8:	ebfffeb4 	bl	221d0 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   226fc:	e3500000 	cmp	r0, #0
   22700:	1a00003c 	bne	227f8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x1b8>
   22704:	eb001daa 	bl	29db4 <CTimer::Get()>
   22708:	eb001af9 	bl	292f4 <CTimer::GetUptime() const>
   2270c:	e5943198 	ldr	r3, [r4, #408]	; 0x198
   22710:	e0402003 	sub	r2, r0, r3
   22714:	e1550002 	cmp	r5, r2
   22718:	9a00000e 	bls	22758 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x118>
   2271c:	e0853003 	add	r3, r5, r3
   22720:	e0431000 	sub	r1, r3, r0
   22724:	e3510077 	cmp	r1, #119	; 0x77
   22728:	93a0103c 	movls	r1, #60	; 0x3c
   2272c:	81a010a1 	lsrhi	r1, r1, #1
   22730:	e58d100c 	str	r1, [sp, #12]
   22734:	eb000726 	bl	243d4 <CScheduler::Get()>
   22738:	e59d100c 	ldr	r1, [sp, #12]
   2273c:	eb0006e9 	bl	242e8 <CScheduler::Sleep(unsigned int)>
   22740:	eb001d9b 	bl	29db4 <CTimer::Get()>
   22744:	eb001aea 	bl	292f4 <CTimer::GetUptime() const>
   22748:	e5943198 	ldr	r3, [r4, #408]	; 0x198
   2274c:	e0400003 	sub	r0, r0, r3
   22750:	e1550000 	cmp	r5, r0
   22754:	8affffe1 	bhi	226e0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0xa0>
   22758:	e3a04002 	mov	r4, #2
   2275c:	e1a00006 	mov	r0, r6
   22760:	ebfff93b 	bl	20c54 <CIPAddress::~CIPAddress()>
   22764:	e1a00004 	mov	r0, r4
   22768:	e28dd018 	add	sp, sp, #24
   2276c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22770:	e59f71e0 	ldr	r7, [pc, #480]	; 22958 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x318>
   22774:	e3a02004 	mov	r2, #4
   22778:	e59f31d0 	ldr	r3, [pc, #464]	; 22950 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   2277c:	e59f11d0 	ldr	r1, [pc, #464]	; 22954 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   22780:	e28d6010 	add	r6, sp, #16
   22784:	e58d7000 	str	r7, [sp]
   22788:	eb000fe7 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2278c:	e1a00006 	mov	r0, r6
   22790:	ebfff919 	bl	20bfc <CIPAddress::CIPAddress()>
   22794:	e3a03000 	mov	r3, #0
   22798:	e1a00006 	mov	r0, r6
   2279c:	e59411a0 	ldr	r1, [r4, #416]	; 0x1a0
   227a0:	e5c431b0 	strb	r3, [r4, #432]	; 0x1b0
   227a4:	ebfff997 	bl	20e08 <CIPAddress::Set(unsigned int)>
   227a8:	eaffffbf 	b	226ac <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x6c>
   227ac:	e3a04002 	mov	r4, #2
   227b0:	e1a00004 	mov	r0, r4
   227b4:	e28dd018 	add	sp, sp, #24
   227b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   227bc:	eb001098 	bl	26a24 <CLogger::Get()>
   227c0:	e5d4c1b0 	ldrb	ip, [r4, #432]	; 0x1b0
   227c4:	e59f1190 	ldr	r1, [pc, #400]	; 2295c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x31c>
   227c8:	e35c0000 	cmp	ip, #0
   227cc:	e59f318c 	ldr	r3, [pc, #396]	; 22960 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x320>
   227d0:	e3a02043 	mov	r2, #67	; 0x43
   227d4:	01a03001 	moveq	r3, r1
   227d8:	e58d2004 	str	r2, [sp, #4]
   227dc:	e58d3000 	str	r3, [sp]
   227e0:	e3a02001 	mov	r2, #1
   227e4:	e59f3178 	ldr	r3, [pc, #376]	; 22964 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x324>
   227e8:	e59f1164 	ldr	r1, [pc, #356]	; 22954 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   227ec:	eb000fce 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   227f0:	e3a04001 	mov	r4, #1
   227f4:	eaffffd8 	b	2275c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   227f8:	e5d431d1 	ldrb	r3, [r4, #465]	; 0x1d1
   227fc:	e3530006 	cmp	r3, #6
   22800:	0a00003f 	beq	22904 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2c4>
   22804:	e1a00004 	mov	r0, r4
   22808:	ebfffbfc 	bl	21800 <CDHCPClient::CheckConfig()>
   2280c:	e3500000 	cmp	r0, #0
   22810:	0a000039 	beq	228fc <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2bc>
   22814:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   22818:	e3530000 	cmp	r3, #0
   2281c:	e58431a0 	str	r3, [r4, #416]	; 0x1a0
   22820:	0a00003e 	beq	22920 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2e0>
   22824:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   22828:	e3500000 	cmp	r0, #0
   2282c:	0a000042 	beq	2293c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2fc>
   22830:	ebfff896 	bl	20a90 <CNetConfig::GetIPAddress() const>
   22834:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   22838:	ebfff960 	bl	20dc0 <CIPAddress::operator!=(unsigned int) const>
   2283c:	e3500000 	cmp	r0, #0
   22840:	0a000018 	beq	228a8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x268>
   22844:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   22848:	ebfff894 	bl	20aa0 <CNetConfig::GetNetMask() const>
   2284c:	e59431c0 	ldr	r3, [r4, #448]	; 0x1c0
   22850:	e5902000 	ldr	r2, [r0]
   22854:	e1520003 	cmp	r2, r3
   22858:	0a000012 	beq	228a8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x268>
   2285c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   22860:	ebfff890 	bl	20aa8 <CNetConfig::GetDefaultGateway() const>
   22864:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   22868:	ebfff954 	bl	20dc0 <CIPAddress::operator!=(unsigned int) const>
   2286c:	e3500000 	cmp	r0, #0
   22870:	0a00000c 	beq	228a8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x268>
   22874:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   22878:	ebfff88c 	bl	20ab0 <CNetConfig::GetDNSServer() const>
   2287c:	e59411c8 	ldr	r1, [r4, #456]	; 0x1c8
   22880:	ebfff94e 	bl	20dc0 <CIPAddress::operator!=(unsigned int) const>
   22884:	e3500000 	cmp	r0, #0
   22888:	0a000006 	beq	228a8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x268>
   2288c:	eb001064 	bl	26a24 <CLogger::Get()>
   22890:	e3a02002 	mov	r2, #2
   22894:	e59f30cc 	ldr	r3, [pc, #204]	; 22968 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x328>
   22898:	e59f10b4 	ldr	r1, [pc, #180]	; 22954 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   2289c:	eb000fa2 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   228a0:	e3a04005 	mov	r4, #5
   228a4:	eaffffac 	b	2275c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   228a8:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   228ac:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   228b0:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   228b4:	e58411a4 	str	r1, [r4, #420]	; 0x1a4
   228b8:	e58421a8 	str	r2, [r4, #424]	; 0x1a8
   228bc:	e58431ac 	str	r3, [r4, #428]	; 0x1ac
   228c0:	eb001057 	bl	26a24 <CLogger::Get()>
   228c4:	e3a02004 	mov	r2, #4
   228c8:	e59f309c 	ldr	r3, [pc, #156]	; 2296c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x32c>
   228cc:	e59f1080 	ldr	r1, [pc, #128]	; 22954 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   228d0:	e58d7000 	str	r7, [sp]
   228d4:	eb000f94 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   228d8:	e3a04000 	mov	r4, #0
   228dc:	eaffff9e 	b	2275c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   228e0:	eb00104f 	bl	26a24 <CLogger::Get()>
   228e4:	e3a02001 	mov	r2, #1
   228e8:	e59f3080 	ldr	r3, [pc, #128]	; 22970 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x330>
   228ec:	e59f1060 	ldr	r1, [pc, #96]	; 22954 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   228f0:	eb000f8d 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   228f4:	e3a04001 	mov	r4, #1
   228f8:	eaffff97 	b	2275c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   228fc:	e3a04004 	mov	r4, #4
   22900:	eaffff95 	b	2275c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   22904:	eb001046 	bl	26a24 <CLogger::Get()>
   22908:	e3a02002 	mov	r2, #2
   2290c:	e59f3060 	ldr	r3, [pc, #96]	; 22974 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x334>
   22910:	e59f103c 	ldr	r1, [pc, #60]	; 22954 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   22914:	eb000f84 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22918:	e3a04003 	mov	r4, #3
   2291c:	eaffff8e 	b	2275c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   22920:	eb00103f 	bl	26a24 <CLogger::Get()>
   22924:	e3a02002 	mov	r2, #2
   22928:	e59f3048 	ldr	r3, [pc, #72]	; 22978 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x338>
   2292c:	e59f1020 	ldr	r1, [pc, #32]	; 22954 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   22930:	eb000f7d 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22934:	e3a04004 	mov	r4, #4
   22938:	eaffff87 	b	2275c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   2293c:	e59f2038 	ldr	r2, [pc, #56]	; 2297c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x33c>
   22940:	e59f1038 	ldr	r1, [pc, #56]	; 22980 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x340>
   22944:	e59f0038 	ldr	r0, [pc, #56]	; 22984 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x344>
   22948:	eb00074d 	bl	24684 <assertion_failed>
   2294c:	00044168 	.word	0x00044168
   22950:	000441f8 	.word	0x000441f8
   22954:	00044240 	.word	0x00044240
   22958:	0004415c 	.word	0x0004415c
   2295c:	0004417c 	.word	0x0004417c
   22960:	00044174 	.word	0x00044174
   22964:	00044180 	.word	0x00044180
   22968:	000441c4 	.word	0x000441c4
   2296c:	000441e8 	.word	0x000441e8
   22970:	000440a4 	.word	0x000440a4
   22974:	000440f4 	.word	0x000440f4
   22978:	000441a4 	.word	0x000441a4
   2297c:	00000195 	.word	0x00000195
   22980:	00043ef4 	.word	0x00043ef4
   22984:	000432d0 	.word	0x000432d0

00022988 <CDHCPClient::Run()>:
   22988:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2298c:	e28040f4 	add	r4, r0, #244	; 0xf4
   22990:	e1a05000 	mov	r5, r0
   22994:	e3a01044 	mov	r1, #68	; 0x44
   22998:	e1a00004 	mov	r0, r4
   2299c:	e24ddf8d 	sub	sp, sp, #564	; 0x234
   229a0:	eb000103 	bl	22db4 <CSocket::Bind(unsigned short)>
   229a4:	e3500000 	cmp	r0, #0
   229a8:	ba00004a 	blt	22ad8 <CDHCPClient::Run()+0x150>
   229ac:	e59f714c 	ldr	r7, [pc, #332]	; 22b00 <CDHCPClient::Run()+0x178>
   229b0:	e59f614c 	ldr	r6, [pc, #332]	; 22b04 <CDHCPClient::Run()+0x17c>
   229b4:	ea000006 	b	229d4 <CDHCPClient::Run()+0x4c>
   229b8:	e2400002 	sub	r0, r0, #2
   229bc:	e6ef0070 	uxtb	r0, r0
   229c0:	e3500003 	cmp	r0, #3
   229c4:	8a00000f 	bhi	22a08 <CDHCPClient::Run()+0x80>
   229c8:	eb000681 	bl	243d4 <CScheduler::Get()>
   229cc:	e3a0103c 	mov	r1, #60	; 0x3c
   229d0:	eb000644 	bl	242e8 <CScheduler::Sleep(unsigned int)>
   229d4:	e1a00005 	mov	r0, r5
   229d8:	ebfffe67 	bl	2237c <CDHCPClient::SelectAndRequest()>
   229dc:	e3500001 	cmp	r0, #1
   229e0:	1afffff4 	bne	229b8 <CDHCPClient::Run()+0x30>
   229e4:	e28ddf8d 	add	sp, sp, #564	; 0x234
   229e8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   229ec:	e3a01001 	mov	r1, #1
   229f0:	e1a00005 	mov	r0, r5
   229f4:	e59521ac 	ldr	r2, [r5, #428]	; 0x1ac
   229f8:	ebffff10 	bl	22640 <CDHCPClient::RenewOrRebind(bool, unsigned int)>
   229fc:	e3500001 	cmp	r0, #1
   22a00:	0afffff7 	beq	229e4 <CDHCPClient::Run()+0x5c>
   22a04:	8a000017 	bhi	22a68 <CDHCPClient::Run()+0xe0>
   22a08:	eb001ce9 	bl	29db4 <CTimer::Get()>
   22a0c:	eb001a38 	bl	292f4 <CTimer::GetUptime() const>
   22a10:	e5850198 	str	r0, [r5, #408]	; 0x198
   22a14:	eb001ce6 	bl	29db4 <CTimer::Get()>
   22a18:	eb001a35 	bl	292f4 <CTimer::GetUptime() const>
   22a1c:	e5952198 	ldr	r2, [r5, #408]	; 0x198
   22a20:	e59531a8 	ldr	r3, [r5, #424]	; 0x1a8
   22a24:	e0400002 	sub	r0, r0, r2
   22a28:	e1500003 	cmp	r0, r3
   22a2c:	3a000002 	bcc	22a3c <CDHCPClient::Run()+0xb4>
   22a30:	eaffffed 	b	229ec <CDHCPClient::Run()+0x64>
   22a34:	eb000666 	bl	243d4 <CScheduler::Get()>
   22a38:	eb0005da 	bl	241a8 <CScheduler::Yield()>
   22a3c:	e3a03040 	mov	r3, #64	; 0x40
   22a40:	e3a02f89 	mov	r2, #548	; 0x224
   22a44:	e1a00004 	mov	r0, r4
   22a48:	e28d100c 	add	r1, sp, #12
   22a4c:	eb000146 	bl	22f6c <CSocket::Receive(void*, unsigned int, int)>
   22a50:	e3500000 	cmp	r0, #0
   22a54:	cafffff6 	bgt	22a34 <CDHCPClient::Run()+0xac>
   22a58:	eb00065d 	bl	243d4 <CScheduler::Get()>
   22a5c:	e3a0100a 	mov	r1, #10
   22a60:	eb000620 	bl	242e8 <CScheduler::Sleep(unsigned int)>
   22a64:	eaffffea 	b	22a14 <CDHCPClient::Run()+0x8c>
   22a68:	e2403003 	sub	r3, r0, #3
   22a6c:	e6ef3073 	uxtb	r3, r3
   22a70:	e3530002 	cmp	r3, #2
   22a74:	8a000006 	bhi	22a94 <CDHCPClient::Run()+0x10c>
   22a78:	e3a03000 	mov	r3, #0
   22a7c:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   22a80:	e5c53194 	strb	r3, [r5, #404]	; 0x194
   22a84:	e1500003 	cmp	r0, r3
   22a88:	0a00001b 	beq	22afc <CDHCPClient::Run()+0x174>
   22a8c:	ebfff81b 	bl	20b00 <CNetConfig::Reset()>
   22a90:	eaffffcf 	b	229d4 <CDHCPClient::Run()+0x4c>
   22a94:	e3a01000 	mov	r1, #0
   22a98:	e1a00005 	mov	r0, r5
   22a9c:	e59521a4 	ldr	r2, [r5, #420]	; 0x1a4
   22aa0:	ebfffee6 	bl	22640 <CDHCPClient::RenewOrRebind(bool, unsigned int)>
   22aa4:	e3500001 	cmp	r0, #1
   22aa8:	0affffcd 	beq	229e4 <CDHCPClient::Run()+0x5c>
   22aac:	9affffd5 	bls	22a08 <CDHCPClient::Run()+0x80>
   22ab0:	e2403003 	sub	r3, r0, #3
   22ab4:	e6ef3073 	uxtb	r3, r3
   22ab8:	e3530002 	cmp	r3, #2
   22abc:	9affffed 	bls	22a78 <CDHCPClient::Run()+0xf0>
   22ac0:	eb000fd7 	bl	26a24 <CLogger::Get()>
   22ac4:	e1a03007 	mov	r3, r7
   22ac8:	e3a02001 	mov	r2, #1
   22acc:	e1a01006 	mov	r1, r6
   22ad0:	eb000f15 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22ad4:	eaffffe7 	b	22a78 <CDHCPClient::Run()+0xf0>
   22ad8:	eb000fd1 	bl	26a24 <CLogger::Get()>
   22adc:	e3a02044 	mov	r2, #68	; 0x44
   22ae0:	e59f3020 	ldr	r3, [pc, #32]	; 22b08 <CDHCPClient::Run()+0x180>
   22ae4:	e58d2000 	str	r2, [sp]
   22ae8:	e59f1014 	ldr	r1, [pc, #20]	; 22b04 <CDHCPClient::Run()+0x17c>
   22aec:	e3a02001 	mov	r2, #1
   22af0:	eb000f0d 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22af4:	e28ddf8d 	add	sp, sp, #564	; 0x234
   22af8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   22afc:	ebfffaf6 	bl	216dc <CDHCPClient::HaltNetwork() [clone .part.0]>
   22b00:	0004421c 	.word	0x0004421c
   22b04:	00044240 	.word	0x00044240
   22b08:	00044204 	.word	0x00044204

00022b0c <CSocket::Connect(CIPAddress&, unsigned short)>:
   22b0c:	e92d4070 	push	{r4, r5, r6, lr}
   22b10:	e2526000 	subs	r6, r2, #0
   22b14:	e24dd008 	sub	sp, sp, #8
   22b18:	0a000026 	beq	22bb8 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   22b1c:	e1a04000 	mov	r4, r0
   22b20:	e590000c 	ldr	r0, [r0, #12]
   22b24:	e3500000 	cmp	r0, #0
   22b28:	0a000024 	beq	22bc0 <CSocket::Connect(CIPAddress&, unsigned short)+0xb4>
   22b2c:	e1a05001 	mov	r5, r1
   22b30:	e5941018 	ldr	r1, [r4, #24]
   22b34:	e3510000 	cmp	r1, #0
   22b38:	ba000005 	blt	22b54 <CSocket::Connect(CIPAddress&, unsigned short)+0x48>
   22b3c:	e5943010 	ldr	r3, [r4, #16]
   22b40:	e3530011 	cmp	r3, #17
   22b44:	1a00001b 	bne	22bb8 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   22b48:	ebffdd17 	bl	19fac <CTransportLayer::Disconnect(int)>
   22b4c:	e3e03000 	mvn	r3, #0
   22b50:	e5843018 	str	r3, [r4, #24]
   22b54:	e5940008 	ldr	r0, [r4, #8]
   22b58:	e3500000 	cmp	r0, #0
   22b5c:	0a00001b 	beq	22bd0 <CSocket::Connect(CIPAddress&, unsigned short)+0xc4>
   22b60:	ebfff7ca 	bl	20a90 <CNetConfig::GetIPAddress() const>
   22b64:	ebfff903 	bl	20f78 <CIPAddress::IsNull() const>
   22b68:	e3500000 	cmp	r0, #0
   22b6c:	0a000006 	beq	22b8c <CSocket::Connect(CIPAddress&, unsigned short)+0x80>
   22b70:	e5943010 	ldr	r3, [r4, #16]
   22b74:	e3530011 	cmp	r3, #17
   22b78:	1a00000e 	bne	22bb8 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   22b7c:	e1a00005 	mov	r0, r5
   22b80:	ebfff90a 	bl	20fb0 <CIPAddress::IsBroadcast() const>
   22b84:	e3500000 	cmp	r0, #0
   22b88:	0a00000a 	beq	22bb8 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   22b8c:	e5943010 	ldr	r3, [r4, #16]
   22b90:	e1a02006 	mov	r2, r6
   22b94:	e58d3000 	str	r3, [sp]
   22b98:	e1a01005 	mov	r1, r5
   22b9c:	e1d431b4 	ldrh	r3, [r4, #20]
   22ba0:	e594000c 	ldr	r0, [r4, #12]
   22ba4:	ebffdbc4 	bl	19abc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>
   22ba8:	e5840018 	str	r0, [r4, #24]
   22bac:	e0000fc0 	and	r0, r0, r0, asr #31
   22bb0:	e28dd008 	add	sp, sp, #8
   22bb4:	e8bd8070 	pop	{r4, r5, r6, pc}
   22bb8:	e3e00000 	mvn	r0, #0
   22bbc:	eafffffb 	b	22bb0 <CSocket::Connect(CIPAddress&, unsigned short)+0xa4>
   22bc0:	e3a02070 	mov	r2, #112	; 0x70
   22bc4:	e59f1014 	ldr	r1, [pc, #20]	; 22be0 <CSocket::Connect(CIPAddress&, unsigned short)+0xd4>
   22bc8:	e59f0014 	ldr	r0, [pc, #20]	; 22be4 <CSocket::Connect(CIPAddress&, unsigned short)+0xd8>
   22bcc:	eb0006ac 	bl	24684 <assertion_failed>
   22bd0:	e3a0207d 	mov	r2, #125	; 0x7d
   22bd4:	e59f1004 	ldr	r1, [pc, #4]	; 22be0 <CSocket::Connect(CIPAddress&, unsigned short)+0xd4>
   22bd8:	e59f0008 	ldr	r0, [pc, #8]	; 22be8 <CSocket::Connect(CIPAddress&, unsigned short)+0xdc>
   22bdc:	eb0006a8 	bl	24684 <assertion_failed>
   22be0:	00044270 	.word	0x00044270
   22be4:	0004427c 	.word	0x0004427c
   22be8:	000432d0 	.word	0x000432d0

00022bec <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   22bec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22bf0:	e1a04000 	mov	r4, r0
   22bf4:	e16f0f12 	clz	r0, r2
   22bf8:	e594c018 	ldr	ip, [r4, #24]
   22bfc:	e1a002a0 	lsr	r0, r0, #5
   22c00:	e24dd010 	sub	sp, sp, #16
   22c04:	e1900fac 	orrs	r0, r0, ip, lsr #31
   22c08:	e1dd82bc 	ldrh	r8, [sp, #44]	; 0x2c
   22c0c:	1a000027 	bne	22cb0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xc4>
   22c10:	e5940008 	ldr	r0, [r4, #8]
   22c14:	e3500000 	cmp	r0, #0
   22c18:	0a000018 	beq	22c80 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x94>
   22c1c:	e1a06001 	mov	r6, r1
   22c20:	e1a07003 	mov	r7, r3
   22c24:	e1a05002 	mov	r5, r2
   22c28:	ebfff798 	bl	20a90 <CNetConfig::GetIPAddress() const>
   22c2c:	ebfff8d1 	bl	20f78 <CIPAddress::IsNull() const>
   22c30:	e3580000 	cmp	r8, #0
   22c34:	03800001 	orreq	r0, r0, #1
   22c38:	e31000ff 	tst	r0, #255	; 0xff
   22c3c:	1a00001b 	bne	22cb0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xc4>
   22c40:	e594000c 	ldr	r0, [r4, #12]
   22c44:	e3500000 	cmp	r0, #0
   22c48:	0a000010 	beq	22c90 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xa4>
   22c4c:	e3560000 	cmp	r6, #0
   22c50:	0a000012 	beq	22ca0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xb4>
   22c54:	e5943018 	ldr	r3, [r4, #24]
   22c58:	e1a02005 	mov	r2, r5
   22c5c:	e58d3008 	str	r3, [sp, #8]
   22c60:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   22c64:	e1a01006 	mov	r1, r6
   22c68:	e58d3000 	str	r3, [sp]
   22c6c:	e58d8004 	str	r8, [sp, #4]
   22c70:	e1a03007 	mov	r3, r7
   22c74:	ebffdd56 	bl	1a1d4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>
   22c78:	e28dd010 	add	sp, sp, #16
   22c7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22c80:	e59f2030 	ldr	r2, [pc, #48]	; 22cb8 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xcc>
   22c84:	e59f1030 	ldr	r1, [pc, #48]	; 22cbc <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   22c88:	e59f0030 	ldr	r0, [pc, #48]	; 22cc0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd4>
   22c8c:	eb00067c 	bl	24684 <assertion_failed>
   22c90:	e59f202c 	ldr	r2, [pc, #44]	; 22cc4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd8>
   22c94:	e59f1020 	ldr	r1, [pc, #32]	; 22cbc <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   22c98:	e59f0028 	ldr	r0, [pc, #40]	; 22cc8 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xdc>
   22c9c:	eb000678 	bl	24684 <assertion_failed>
   22ca0:	e59f2024 	ldr	r2, [pc, #36]	; 22ccc <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe0>
   22ca4:	e59f1010 	ldr	r1, [pc, #16]	; 22cbc <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   22ca8:	e59f0020 	ldr	r0, [pc, #32]	; 22cd0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe4>
   22cac:	eb000674 	bl	24684 <assertion_failed>
   22cb0:	e3e00000 	mvn	r0, #0
   22cb4:	eaffffef 	b	22c78 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x8c>
   22cb8:	0000011e 	.word	0x0000011e
   22cbc:	00044270 	.word	0x00044270
   22cc0:	000432d0 	.word	0x000432d0
   22cc4:	00000129 	.word	0x00000129
   22cc8:	0004427c 	.word	0x0004427c
   22ccc:	0000012a 	.word	0x0000012a
   22cd0:	00040460 	.word	0x00040460

00022cd4 <CSocket::~CSocket()>:
   22cd4:	e92d4070 	push	{r4, r5, r6, lr}
   22cd8:	e1a04000 	mov	r4, r0
   22cdc:	e590000c 	ldr	r0, [r0, #12]
   22ce0:	e59f309c 	ldr	r3, [pc, #156]	; 22d84 <CSocket::~CSocket()+0xb0>
   22ce4:	e3500000 	cmp	r0, #0
   22ce8:	e5843000 	str	r3, [r4]
   22cec:	0a000020 	beq	22d74 <CSocket::~CSocket()+0xa0>
   22cf0:	e5941018 	ldr	r1, [r4, #24]
   22cf4:	e594301c 	ldr	r3, [r4, #28]
   22cf8:	e3510000 	cmp	r1, #0
   22cfc:	ba00000b 	blt	22d30 <CSocket::~CSocket()+0x5c>
   22d00:	e3530000 	cmp	r3, #0
   22d04:	1a000016 	bne	22d64 <CSocket::~CSocket()+0x90>
   22d08:	ebffdca7 	bl	19fac <CTransportLayer::Disconnect(int)>
   22d0c:	e3e03000 	mvn	r3, #0
   22d10:	e5843018 	str	r3, [r4, #24]
   22d14:	e3a03000 	mov	r3, #0
   22d18:	e1a00004 	mov	r0, r4
   22d1c:	e584300c 	str	r3, [r4, #12]
   22d20:	e5843008 	str	r3, [r4, #8]
   22d24:	eb000236 	bl	23604 <CNetSocket::~CNetSocket()>
   22d28:	e1a00004 	mov	r0, r4
   22d2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   22d30:	e3530000 	cmp	r3, #0
   22d34:	0afffff6 	beq	22d14 <CSocket::~CSocket()+0x40>
   22d38:	e3a05000 	mov	r5, #0
   22d3c:	e284601c 	add	r6, r4, #28
   22d40:	ea000000 	b	22d48 <CSocket::~CSocket()+0x74>
   22d44:	e594000c 	ldr	r0, [r4, #12]
   22d48:	e5b61004 	ldr	r1, [r6, #4]!
   22d4c:	ebffdc96 	bl	19fac <CTransportLayer::Disconnect(int)>
   22d50:	e594301c 	ldr	r3, [r4, #28]
   22d54:	e2855001 	add	r5, r5, #1
   22d58:	e1530005 	cmp	r3, r5
   22d5c:	8afffff8 	bhi	22d44 <CSocket::~CSocket()+0x70>
   22d60:	eaffffeb 	b	22d14 <CSocket::~CSocket()+0x40>
   22d64:	e3a0203a 	mov	r2, #58	; 0x3a
   22d68:	e59f1018 	ldr	r1, [pc, #24]	; 22d88 <CSocket::~CSocket()+0xb4>
   22d6c:	e59f0018 	ldr	r0, [pc, #24]	; 22d8c <CSocket::~CSocket()+0xb8>
   22d70:	eb000643 	bl	24684 <assertion_failed>
   22d74:	e3a02036 	mov	r2, #54	; 0x36
   22d78:	e59f1008 	ldr	r1, [pc, #8]	; 22d88 <CSocket::~CSocket()+0xb4>
   22d7c:	e59f000c 	ldr	r0, [pc, #12]	; 22d90 <CSocket::~CSocket()+0xbc>
   22d80:	eb00063f 	bl	24684 <assertion_failed>
   22d84:	00044354 	.word	0x00044354
   22d88:	00044270 	.word	0x00044270
   22d8c:	00044294 	.word	0x00044294
   22d90:	0004427c 	.word	0x0004427c

00022d94 <CSocket::~CSocket()>:
   22d94:	e92d4010 	push	{r4, lr}
   22d98:	e1a04000 	mov	r4, r0
   22d9c:	ebffffcc 	bl	22cd4 <CSocket::~CSocket()>
   22da0:	e1a00004 	mov	r0, r4
   22da4:	e3a010a0 	mov	r1, #160	; 0xa0
   22da8:	eb00204a 	bl	2aed8 <operator delete(void*, unsigned int)>
   22dac:	e1a00004 	mov	r0, r4
   22db0:	e8bd8010 	pop	{r4, pc}

00022db4 <CSocket::Bind(unsigned short)>:
   22db4:	e2513000 	subs	r3, r1, #0
   22db8:	0a000012 	beq	22e08 <CSocket::Bind(unsigned short)+0x54>
   22dbc:	e92d4010 	push	{r4, lr}
   22dc0:	e1a04000 	mov	r4, r0
   22dc4:	e1d001b4 	ldrh	r0, [r0, #20]
   22dc8:	e3500000 	cmp	r0, #0
   22dcc:	1a00000b 	bne	22e00 <CSocket::Bind(unsigned short)+0x4c>
   22dd0:	e5942018 	ldr	r2, [r4, #24]
   22dd4:	e3520000 	cmp	r2, #0
   22dd8:	aa000008 	bge	22e00 <CSocket::Bind(unsigned short)+0x4c>
   22ddc:	e5942010 	ldr	r2, [r4, #16]
   22de0:	e1c431b4 	strh	r3, [r4, #20]
   22de4:	e3520011 	cmp	r2, #17
   22de8:	18bd8010 	popne	{r4, pc}
   22dec:	e594000c 	ldr	r0, [r4, #12]
   22df0:	ebffdad7 	bl	19954 <CTransportLayer::Bind(unsigned short, int)>
   22df4:	e5840018 	str	r0, [r4, #24]
   22df8:	e0000fc0 	and	r0, r0, r0, asr #31
   22dfc:	e8bd8010 	pop	{r4, pc}
   22e00:	e3e00000 	mvn	r0, #0
   22e04:	e8bd8010 	pop	{r4, pc}
   22e08:	e3e00000 	mvn	r0, #0
   22e0c:	e12fff1e 	bx	lr

00022e10 <CSocket::Listen(unsigned int)>:
   22e10:	e5902010 	ldr	r2, [r0, #16]
   22e14:	e3520006 	cmp	r2, #6
   22e18:	1a00002f 	bne	22edc <CSocket::Listen(unsigned int)+0xcc>
   22e1c:	e1a03001 	mov	r3, r1
   22e20:	e1d011b4 	ldrh	r1, [r0, #20]
   22e24:	e92d4070 	push	{r4, r5, r6, lr}
   22e28:	e3510000 	cmp	r1, #0
   22e2c:	e1a04000 	mov	r4, r0
   22e30:	0a000027 	beq	22ed4 <CSocket::Listen(unsigned int)+0xc4>
   22e34:	e5900018 	ldr	r0, [r0, #24]
   22e38:	e3500000 	cmp	r0, #0
   22e3c:	aa000024 	bge	22ed4 <CSocket::Listen(unsigned int)+0xc4>
   22e40:	e2430001 	sub	r0, r3, #1
   22e44:	e350001f 	cmp	r0, #31
   22e48:	8a000021 	bhi	22ed4 <CSocket::Listen(unsigned int)+0xc4>
   22e4c:	e594501c 	ldr	r5, [r4, #28]
   22e50:	e3550000 	cmp	r5, #0
   22e54:	1a000016 	bne	22eb4 <CSocket::Listen(unsigned int)+0xa4>
   22e58:	e594000c 	ldr	r0, [r4, #12]
   22e5c:	e584301c 	str	r3, [r4, #28]
   22e60:	e3500000 	cmp	r0, #0
   22e64:	0a000016 	beq	22ec4 <CSocket::Listen(unsigned int)+0xb4>
   22e68:	e284601c 	add	r6, r4, #28
   22e6c:	ea000006 	b	22e8c <CSocket::Listen(unsigned int)+0x7c>
   22e70:	e594301c 	ldr	r3, [r4, #28]
   22e74:	e2855001 	add	r5, r5, #1
   22e78:	e1530005 	cmp	r3, r5
   22e7c:	9a00000a 	bls	22eac <CSocket::Listen(unsigned int)+0x9c>
   22e80:	e594000c 	ldr	r0, [r4, #12]
   22e84:	e1d411b4 	ldrh	r1, [r4, #20]
   22e88:	e5942010 	ldr	r2, [r4, #16]
   22e8c:	ebffdbb2 	bl	19d5c <CTransportLayer::Listen(unsigned short, int)>
   22e90:	e3500000 	cmp	r0, #0
   22e94:	e5a60004 	str	r0, [r6, #4]!
   22e98:	aafffff4 	bge	22e70 <CSocket::Listen(unsigned int)+0x60>
   22e9c:	e3a020a5 	mov	r2, #165	; 0xa5
   22ea0:	e59f103c 	ldr	r1, [pc, #60]	; 22ee4 <CSocket::Listen(unsigned int)+0xd4>
   22ea4:	e59f003c 	ldr	r0, [pc, #60]	; 22ee8 <CSocket::Listen(unsigned int)+0xd8>
   22ea8:	eb0005f5 	bl	24684 <assertion_failed>
   22eac:	e3a00000 	mov	r0, #0
   22eb0:	e8bd8070 	pop	{r4, r5, r6, pc}
   22eb4:	e3a0209d 	mov	r2, #157	; 0x9d
   22eb8:	e59f1024 	ldr	r1, [pc, #36]	; 22ee4 <CSocket::Listen(unsigned int)+0xd4>
   22ebc:	e59f0028 	ldr	r0, [pc, #40]	; 22eec <CSocket::Listen(unsigned int)+0xdc>
   22ec0:	eb0005ef 	bl	24684 <assertion_failed>
   22ec4:	e3a020a0 	mov	r2, #160	; 0xa0
   22ec8:	e59f1014 	ldr	r1, [pc, #20]	; 22ee4 <CSocket::Listen(unsigned int)+0xd4>
   22ecc:	e59f001c 	ldr	r0, [pc, #28]	; 22ef0 <CSocket::Listen(unsigned int)+0xe0>
   22ed0:	eb0005eb 	bl	24684 <assertion_failed>
   22ed4:	e3e00000 	mvn	r0, #0
   22ed8:	e8bd8070 	pop	{r4, r5, r6, pc}
   22edc:	e3e00000 	mvn	r0, #0
   22ee0:	e12fff1e 	bx	lr
   22ee4:	00044270 	.word	0x00044270
   22ee8:	000442a4 	.word	0x000442a4
   22eec:	00044294 	.word	0x00044294
   22ef0:	0004427c 	.word	0x0004427c

00022ef4 <CSocket::Send(void const*, unsigned int, int)>:
   22ef4:	e3520000 	cmp	r2, #0
   22ef8:	03a0c001 	moveq	ip, #1
   22efc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   22f00:	e590e018 	ldr	lr, [r0, #24]
   22f04:	e24dd00c 	sub	sp, sp, #12
   22f08:	11a0cfae 	lsrne	ip, lr, #31
   22f0c:	e35c0000 	cmp	ip, #0
   22f10:	1a000010 	bne	22f58 <CSocket::Send(void const*, unsigned int, int)+0x64>
   22f14:	e590000c 	ldr	r0, [r0, #12]
   22f18:	e3500000 	cmp	r0, #0
   22f1c:	0a000005 	beq	22f38 <CSocket::Send(void const*, unsigned int, int)+0x44>
   22f20:	e3510000 	cmp	r1, #0
   22f24:	0a000007 	beq	22f48 <CSocket::Send(void const*, unsigned int, int)+0x54>
   22f28:	e58de000 	str	lr, [sp]
   22f2c:	ebffdc40 	bl	1a034 <CTransportLayer::Send(void const*, unsigned int, int, int)>
   22f30:	e28dd00c 	add	sp, sp, #12
   22f34:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   22f38:	e3a020ed 	mov	r2, #237	; 0xed
   22f3c:	e59f101c 	ldr	r1, [pc, #28]	; 22f60 <CSocket::Send(void const*, unsigned int, int)+0x6c>
   22f40:	e59f001c 	ldr	r0, [pc, #28]	; 22f64 <CSocket::Send(void const*, unsigned int, int)+0x70>
   22f44:	eb0005ce 	bl	24684 <assertion_failed>
   22f48:	e3a020ee 	mov	r2, #238	; 0xee
   22f4c:	e59f100c 	ldr	r1, [pc, #12]	; 22f60 <CSocket::Send(void const*, unsigned int, int)+0x6c>
   22f50:	e59f0010 	ldr	r0, [pc, #16]	; 22f68 <CSocket::Send(void const*, unsigned int, int)+0x74>
   22f54:	eb0005ca 	bl	24684 <assertion_failed>
   22f58:	e3e00000 	mvn	r0, #0
   22f5c:	eafffff3 	b	22f30 <CSocket::Send(void const*, unsigned int, int)+0x3c>
   22f60:	00044270 	.word	0x00044270
   22f64:	0004427c 	.word	0x0004427c
   22f68:	00040460 	.word	0x00040460

00022f6c <CSocket::Receive(void*, unsigned int, int)>:
   22f6c:	e3520000 	cmp	r2, #0
   22f70:	e92d4070 	push	{r4, r5, r6, lr}
   22f74:	e1a05002 	mov	r5, r2
   22f78:	03a02001 	moveq	r2, #1
   22f7c:	e590e018 	ldr	lr, [r0, #24]
   22f80:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   22f84:	11a02fae 	lsrne	r2, lr, #31
   22f88:	e3520000 	cmp	r2, #0
   22f8c:	1a00001c 	bne	23004 <CSocket::Receive(void*, unsigned int, int)+0x98>
   22f90:	e590000c 	ldr	r0, [r0, #12]
   22f94:	e3500000 	cmp	r0, #0
   22f98:	0a000011 	beq	22fe4 <CSocket::Receive(void*, unsigned int, int)+0x78>
   22f9c:	e1a02003 	mov	r2, r3
   22fa0:	e1a06001 	mov	r6, r1
   22fa4:	e1a0300e 	mov	r3, lr
   22fa8:	e1a0100d 	mov	r1, sp
   22fac:	ebffdc59 	bl	1a118 <CTransportLayer::Receive(void*, int, int)>
   22fb0:	e2504000 	subs	r4, r0, #0
   22fb4:	ba000007 	blt	22fd8 <CSocket::Receive(void*, unsigned int, int)+0x6c>
   22fb8:	e1540005 	cmp	r4, r5
   22fbc:	21a04005 	movcs	r4, r5
   22fc0:	e3560000 	cmp	r6, #0
   22fc4:	0a00000a 	beq	22ff4 <CSocket::Receive(void*, unsigned int, int)+0x88>
   22fc8:	e1a0100d 	mov	r1, sp
   22fcc:	e1a00006 	mov	r0, r6
   22fd0:	e1a02004 	mov	r2, r4
   22fd4:	eb001dcb 	bl	2a708 <memcpy>
   22fd8:	e1a00004 	mov	r0, r4
   22fdc:	e28ddd19 	add	sp, sp, #1600	; 0x640
   22fe0:	e8bd8070 	pop	{r4, r5, r6, pc}
   22fe4:	e3a020fe 	mov	r2, #254	; 0xfe
   22fe8:	e59f101c 	ldr	r1, [pc, #28]	; 2300c <CSocket::Receive(void*, unsigned int, int)+0xa0>
   22fec:	e59f001c 	ldr	r0, [pc, #28]	; 23010 <CSocket::Receive(void*, unsigned int, int)+0xa4>
   22ff0:	eb0005a3 	bl	24684 <assertion_failed>
   22ff4:	e59f2018 	ldr	r2, [pc, #24]	; 23014 <CSocket::Receive(void*, unsigned int, int)+0xa8>
   22ff8:	e59f100c 	ldr	r1, [pc, #12]	; 2300c <CSocket::Receive(void*, unsigned int, int)+0xa0>
   22ffc:	e59f0014 	ldr	r0, [pc, #20]	; 23018 <CSocket::Receive(void*, unsigned int, int)+0xac>
   23000:	eb00059f 	bl	24684 <assertion_failed>
   23004:	e3e04000 	mvn	r4, #0
   23008:	eafffff2 	b	22fd8 <CSocket::Receive(void*, unsigned int, int)+0x6c>
   2300c:	00044270 	.word	0x00044270
   23010:	0004427c 	.word	0x0004427c
   23014:	0000010b 	.word	0x0000010b
   23018:	00040460 	.word	0x00040460

0002301c <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   2301c:	e3520000 	cmp	r2, #0
   23020:	e92d4070 	push	{r4, r5, r6, lr}
   23024:	e1a05002 	mov	r5, r2
   23028:	03a02001 	moveq	r2, #1
   2302c:	e590e018 	ldr	lr, [r0, #24]
   23030:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   23034:	11a02fae 	lsrne	r2, lr, #31
   23038:	e3520000 	cmp	r2, #0
   2303c:	e24dd008 	sub	sp, sp, #8
   23040:	1a000020 	bne	230c8 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xac>
   23044:	e590000c 	ldr	r0, [r0, #12]
   23048:	e3500000 	cmp	r0, #0
   2304c:	0a000015 	beq	230a8 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x8c>
   23050:	e1a02003 	mov	r2, r3
   23054:	e59d365c 	ldr	r3, [sp, #1628]	; 0x65c
   23058:	e1a06001 	mov	r6, r1
   2305c:	e58d3000 	str	r3, [sp]
   23060:	e58de004 	str	lr, [sp, #4]
   23064:	e59d3658 	ldr	r3, [sp, #1624]	; 0x658
   23068:	e28d1008 	add	r1, sp, #8
   2306c:	ebffdc95 	bl	1a2c8 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>
   23070:	e2504000 	subs	r4, r0, #0
   23074:	ba000007 	blt	23098 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x7c>
   23078:	e1540005 	cmp	r4, r5
   2307c:	21a04005 	movcs	r4, r5
   23080:	e3560000 	cmp	r6, #0
   23084:	0a00000b 	beq	230b8 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x9c>
   23088:	e1a00006 	mov	r0, r6
   2308c:	e1a02004 	mov	r2, r4
   23090:	e28d1008 	add	r1, sp, #8
   23094:	eb001d9b 	bl	2a708 <memcpy>
   23098:	e1a00004 	mov	r0, r4
   2309c:	e28ddd19 	add	sp, sp, #1600	; 0x640
   230a0:	e28dd008 	add	sp, sp, #8
   230a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   230a8:	e59f2020 	ldr	r2, [pc, #32]	; 230d0 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb4>
   230ac:	e59f1020 	ldr	r1, [pc, #32]	; 230d4 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb8>
   230b0:	e59f0020 	ldr	r0, [pc, #32]	; 230d8 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xbc>
   230b4:	eb000572 	bl	24684 <assertion_failed>
   230b8:	e59f201c 	ldr	r2, [pc, #28]	; 230dc <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xc0>
   230bc:	e59f1010 	ldr	r1, [pc, #16]	; 230d4 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb8>
   230c0:	e59f0018 	ldr	r0, [pc, #24]	; 230e0 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xc4>
   230c4:	eb00056e 	bl	24684 <assertion_failed>
   230c8:	e3e04000 	mvn	r4, #0
   230cc:	eafffff1 	b	23098 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x7c>
   230d0:	0000013b 	.word	0x0000013b
   230d4:	00044270 	.word	0x00044270
   230d8:	0004427c 	.word	0x0004427c
   230dc:	00000149 	.word	0x00000149
   230e0:	00040460 	.word	0x00040460

000230e4 <CSocket::SetOptionBroadcast(bool)>:
   230e4:	e5902018 	ldr	r2, [r0, #24]
   230e8:	e3520000 	cmp	r2, #0
   230ec:	ba00000d 	blt	23128 <CSocket::SetOptionBroadcast(bool)+0x44>
   230f0:	e5903010 	ldr	r3, [r0, #16]
   230f4:	e3530011 	cmp	r3, #17
   230f8:	1a000003 	bne	2310c <CSocket::SetOptionBroadcast(bool)+0x28>
   230fc:	e590000c 	ldr	r0, [r0, #12]
   23100:	e3500000 	cmp	r0, #0
   23104:	0a000002 	beq	23114 <CSocket::SetOptionBroadcast(bool)+0x30>
   23108:	eaffdca2 	b	1a398 <CTransportLayer::SetOptionBroadcast(bool, int)>
   2310c:	e3a00000 	mov	r0, #0
   23110:	e12fff1e 	bx	lr
   23114:	e92d4010 	push	{r4, lr}
   23118:	e59f2010 	ldr	r2, [pc, #16]	; 23130 <CSocket::SetOptionBroadcast(bool)+0x4c>
   2311c:	e59f1010 	ldr	r1, [pc, #16]	; 23134 <CSocket::SetOptionBroadcast(bool)+0x50>
   23120:	e59f0010 	ldr	r0, [pc, #16]	; 23138 <CSocket::SetOptionBroadcast(bool)+0x54>
   23124:	eb000556 	bl	24684 <assertion_failed>
   23128:	e3e00000 	mvn	r0, #0
   2312c:	e12fff1e 	bx	lr
   23130:	0000015b 	.word	0x0000015b
   23134:	00044270 	.word	0x00044270
   23138:	0004427c 	.word	0x0004427c

0002313c <CSocket::GetForeignIP() const>:
   2313c:	e5901018 	ldr	r1, [r0, #24]
   23140:	e3510000 	cmp	r1, #0
   23144:	ba000003 	blt	23158 <CSocket::GetForeignIP() const+0x1c>
   23148:	e590000c 	ldr	r0, [r0, #12]
   2314c:	e3500000 	cmp	r0, #0
   23150:	0a000002 	beq	23160 <CSocket::GetForeignIP() const+0x24>
   23154:	eaffdcd5 	b	1a4b0 <CTransportLayer::GetForeignIP(int) const>
   23158:	e3a00000 	mov	r0, #0
   2315c:	e12fff1e 	bx	lr
   23160:	e92d4010 	push	{r4, lr}
   23164:	e59f2008 	ldr	r2, [pc, #8]	; 23174 <CSocket::GetForeignIP() const+0x38>
   23168:	e59f1008 	ldr	r1, [pc, #8]	; 23178 <CSocket::GetForeignIP() const+0x3c>
   2316c:	e59f0008 	ldr	r0, [pc, #8]	; 2317c <CSocket::GetForeignIP() const+0x40>
   23170:	eb000543 	bl	24684 <assertion_failed>
   23174:	00000166 	.word	0x00000166
   23178:	00044270 	.word	0x00044270
   2317c:	0004427c 	.word	0x0004427c

00023180 <CSocket::CSocket(CNetSubSystem*, int)>:
   23180:	e92d4070 	push	{r4, r5, r6, lr}
   23184:	e1a04000 	mov	r4, r0
   23188:	e1a05001 	mov	r5, r1
   2318c:	e1a06002 	mov	r6, r2
   23190:	eb00010e 	bl	235d0 <CNetSocket::CNetSocket(CNetSubSystem*)>
   23194:	e59f3070 	ldr	r3, [pc, #112]	; 2320c <CSocket::CSocket(CNetSubSystem*, int)+0x8c>
   23198:	e1a00005 	mov	r0, r5
   2319c:	e5843000 	str	r3, [r4]
   231a0:	ebffd90d 	bl	195dc <CNetSubSystem::GetConfig()>
   231a4:	e1a03000 	mov	r3, r0
   231a8:	e1a00005 	mov	r0, r5
   231ac:	e5843008 	str	r3, [r4, #8]
   231b0:	ebffd90f 	bl	195f4 <CNetSubSystem::GetTransportLayer()>
   231b4:	e3a03000 	mov	r3, #0
   231b8:	e3e02000 	mvn	r2, #0
   231bc:	e5941008 	ldr	r1, [r4, #8]
   231c0:	e5846010 	str	r6, [r4, #16]
   231c4:	e1510003 	cmp	r1, r3
   231c8:	e584000c 	str	r0, [r4, #12]
   231cc:	e5842018 	str	r2, [r4, #24]
   231d0:	e1c431b4 	strh	r3, [r4, #20]
   231d4:	e584301c 	str	r3, [r4, #28]
   231d8:	0a000003 	beq	231ec <CSocket::CSocket(CNetSubSystem*, int)+0x6c>
   231dc:	e3500000 	cmp	r0, #0
   231e0:	0a000005 	beq	231fc <CSocket::CSocket(CNetSubSystem*, int)+0x7c>
   231e4:	e1a00004 	mov	r0, r4
   231e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   231ec:	e3a02023 	mov	r2, #35	; 0x23
   231f0:	e59f1018 	ldr	r1, [pc, #24]	; 23210 <CSocket::CSocket(CNetSubSystem*, int)+0x90>
   231f4:	e59f0018 	ldr	r0, [pc, #24]	; 23214 <CSocket::CSocket(CNetSubSystem*, int)+0x94>
   231f8:	eb000521 	bl	24684 <assertion_failed>
   231fc:	e3a02024 	mov	r2, #36	; 0x24
   23200:	e59f1008 	ldr	r1, [pc, #8]	; 23210 <CSocket::CSocket(CNetSubSystem*, int)+0x90>
   23204:	e59f000c 	ldr	r0, [pc, #12]	; 23218 <CSocket::CSocket(CNetSubSystem*, int)+0x98>
   23208:	eb00051d 	bl	24684 <assertion_failed>
   2320c:	00044354 	.word	0x00044354
   23210:	00044270 	.word	0x00044270
   23214:	000432d0 	.word	0x000432d0
   23218:	0004427c 	.word	0x0004427c

0002321c <CSocket::CSocket(CSocket&, int)>:
   2321c:	e92d4070 	push	{r4, r5, r6, lr}
   23220:	e1a04000 	mov	r4, r0
   23224:	e1a00001 	mov	r0, r1
   23228:	e1a05001 	mov	r5, r1
   2322c:	e1a06002 	mov	r6, r2
   23230:	eb0000fa 	bl	23620 <CNetSocket::GetNetSubSystem()>
   23234:	e1a01000 	mov	r1, r0
   23238:	e1a00004 	mov	r0, r4
   2323c:	eb0000e3 	bl	235d0 <CNetSocket::CNetSocket(CNetSubSystem*)>
   23240:	e3a01000 	mov	r1, #0
   23244:	e59f2060 	ldr	r2, [pc, #96]	; 232ac <CSocket::CSocket(CSocket&, int)+0x90>
   23248:	e5953008 	ldr	r3, [r5, #8]
   2324c:	e595c010 	ldr	ip, [r5, #16]
   23250:	e1d501b4 	ldrh	r0, [r5, #20]
   23254:	e5842000 	str	r2, [r4]
   23258:	e595200c 	ldr	r2, [r5, #12]
   2325c:	e1530001 	cmp	r3, r1
   23260:	e5846018 	str	r6, [r4, #24]
   23264:	e584c010 	str	ip, [r4, #16]
   23268:	e1c401b4 	strh	r0, [r4, #20]
   2326c:	e584101c 	str	r1, [r4, #28]
   23270:	e5843008 	str	r3, [r4, #8]
   23274:	e584200c 	str	r2, [r4, #12]
   23278:	0a000003 	beq	2328c <CSocket::CSocket(CSocket&, int)+0x70>
   2327c:	e3520000 	cmp	r2, #0
   23280:	0a000005 	beq	2329c <CSocket::CSocket(CSocket&, int)+0x80>
   23284:	e1a00004 	mov	r0, r4
   23288:	e8bd8070 	pop	{r4, r5, r6, pc}
   2328c:	e3a02030 	mov	r2, #48	; 0x30
   23290:	e59f1018 	ldr	r1, [pc, #24]	; 232b0 <CSocket::CSocket(CSocket&, int)+0x94>
   23294:	e59f0018 	ldr	r0, [pc, #24]	; 232b4 <CSocket::CSocket(CSocket&, int)+0x98>
   23298:	eb0004f9 	bl	24684 <assertion_failed>
   2329c:	e3a02031 	mov	r2, #49	; 0x31
   232a0:	e59f1008 	ldr	r1, [pc, #8]	; 232b0 <CSocket::CSocket(CSocket&, int)+0x94>
   232a4:	e59f000c 	ldr	r0, [pc, #12]	; 232b8 <CSocket::CSocket(CSocket&, int)+0x9c>
   232a8:	eb0004f5 	bl	24684 <assertion_failed>
   232ac:	00044354 	.word	0x00044354
   232b0:	00044270 	.word	0x00044270
   232b4:	000432d0 	.word	0x000432d0
   232b8:	0004427c 	.word	0x0004427c

000232bc <CSocket::Accept(CIPAddress*, unsigned short*)>:
   232bc:	e590301c 	ldr	r3, [r0, #28]
   232c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   232c4:	e3530000 	cmp	r3, #0
   232c8:	0a000044 	beq	233e0 <CSocket::Accept(CIPAddress*, unsigned short*)+0x124>
   232cc:	e1d041b4 	ldrh	r4, [r0, #20]
   232d0:	e1a05000 	mov	r5, r0
   232d4:	e3540000 	cmp	r4, #0
   232d8:	0a00003a 	beq	233c8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x10c>
   232dc:	e590000c 	ldr	r0, [r0, #12]
   232e0:	e3500000 	cmp	r0, #0
   232e4:	0a000040 	beq	233ec <CSocket::Accept(CIPAddress*, unsigned short*)+0x130>
   232e8:	e3530020 	cmp	r3, #32
   232ec:	8a000042 	bhi	233fc <CSocket::Accept(CIPAddress*, unsigned short*)+0x140>
   232f0:	e1a09001 	mov	r9, r1
   232f4:	e1a0a002 	mov	sl, r2
   232f8:	e3a08020 	mov	r8, #32
   232fc:	e3e06102 	mvn	r6, #-2147483648	; 0x80000000
   23300:	e3a04000 	mov	r4, #0
   23304:	e285701c 	add	r7, r5, #28
   23308:	ea000008 	b	23330 <CSocket::Accept(CIPAddress*, unsigned short*)+0x74>
   2330c:	e5973000 	ldr	r3, [r7]
   23310:	e595201c 	ldr	r2, [r5, #28]
   23314:	e1530006 	cmp	r3, r6
   23318:	b1a08004 	movlt	r8, r4
   2331c:	e2844001 	add	r4, r4, #1
   23320:	b1a06003 	movlt	r6, r3
   23324:	e1520004 	cmp	r2, r4
   23328:	9a000007 	bls	2334c <CSocket::Accept(CIPAddress*, unsigned short*)+0x90>
   2332c:	e595000c 	ldr	r0, [r5, #12]
   23330:	e5b71004 	ldr	r1, [r7, #4]!
   23334:	ebffdc3c 	bl	1a42c <CTransportLayer::IsConnected(int) const>
   23338:	e3500000 	cmp	r0, #0
   2333c:	0afffff2 	beq	2330c <CSocket::Accept(CIPAddress*, unsigned short*)+0x50>
   23340:	e1a08004 	mov	r8, r4
   23344:	e2843008 	add	r3, r4, #8
   23348:	e7956103 	ldr	r6, [r5, r3, lsl #2]
   2334c:	e376010a 	cmn	r6, #-2147483646	; 0x80000002
   23350:	8a00001e 	bhi	233d0 <CSocket::Accept(CIPAddress*, unsigned short*)+0x114>
   23354:	e595301c 	ldr	r3, [r5, #28]
   23358:	e1530008 	cmp	r3, r8
   2335c:	9a00002e 	bls	2341c <CSocket::Accept(CIPAddress*, unsigned short*)+0x160>
   23360:	e3590000 	cmp	r9, #0
   23364:	0a000030 	beq	2342c <CSocket::Accept(CIPAddress*, unsigned short*)+0x170>
   23368:	e35a0000 	cmp	sl, #0
   2336c:	0a000032 	beq	2343c <CSocket::Accept(CIPAddress*, unsigned short*)+0x180>
   23370:	e1a0200a 	mov	r2, sl
   23374:	e1a01009 	mov	r1, r9
   23378:	e1a03006 	mov	r3, r6
   2337c:	e595000c 	ldr	r0, [r5, #12]
   23380:	ebffdad2 	bl	19ed0 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>
   23384:	e3500000 	cmp	r0, #0
   23388:	b3a04000 	movlt	r4, #0
   2338c:	ba000005 	blt	233a8 <CSocket::Accept(CIPAddress*, unsigned short*)+0xec>
   23390:	e3a000a0 	mov	r0, #160	; 0xa0
   23394:	eb001ec1 	bl	2aea0 <operator new(unsigned int)>
   23398:	e1a02006 	mov	r2, r6
   2339c:	e1a01005 	mov	r1, r5
   233a0:	e1a04000 	mov	r4, r0
   233a4:	ebffff9c 	bl	2321c <CSocket::CSocket(CSocket&, int)>
   233a8:	e5952010 	ldr	r2, [r5, #16]
   233ac:	e1d511b4 	ldrh	r1, [r5, #20]
   233b0:	e595000c 	ldr	r0, [r5, #12]
   233b4:	ebffda68 	bl	19d5c <CTransportLayer::Listen(unsigned short, int)>
   233b8:	e2888008 	add	r8, r8, #8
   233bc:	e3500000 	cmp	r0, #0
   233c0:	e7850108 	str	r0, [r5, r8, lsl #2]
   233c4:	ba000010 	blt	2340c <CSocket::Accept(CIPAddress*, unsigned short*)+0x150>
   233c8:	e1a00004 	mov	r0, r4
   233cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   233d0:	e3a020cb 	mov	r2, #203	; 0xcb
   233d4:	e59f1070 	ldr	r1, [pc, #112]	; 2344c <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   233d8:	e59f0070 	ldr	r0, [pc, #112]	; 23450 <CSocket::Accept(CIPAddress*, unsigned short*)+0x194>
   233dc:	eb0004a8 	bl	24684 <assertion_failed>
   233e0:	e1a04003 	mov	r4, r3
   233e4:	e1a00004 	mov	r0, r4
   233e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   233ec:	e3a020b3 	mov	r2, #179	; 0xb3
   233f0:	e59f1054 	ldr	r1, [pc, #84]	; 2344c <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   233f4:	e59f0058 	ldr	r0, [pc, #88]	; 23454 <CSocket::Accept(CIPAddress*, unsigned short*)+0x198>
   233f8:	eb0004a1 	bl	24684 <assertion_failed>
   233fc:	e3a020b4 	mov	r2, #180	; 0xb4
   23400:	e59f1044 	ldr	r1, [pc, #68]	; 2344c <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   23404:	e59f004c 	ldr	r0, [pc, #76]	; 23458 <CSocket::Accept(CIPAddress*, unsigned short*)+0x19c>
   23408:	eb00049d 	bl	24684 <assertion_failed>
   2340c:	e3a020dc 	mov	r2, #220	; 0xdc
   23410:	e59f1034 	ldr	r1, [pc, #52]	; 2344c <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   23414:	e59f0040 	ldr	r0, [pc, #64]	; 2345c <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   23418:	eb000499 	bl	24684 <assertion_failed>
   2341c:	e3a020cc 	mov	r2, #204	; 0xcc
   23420:	e59f1024 	ldr	r1, [pc, #36]	; 2344c <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   23424:	e59f0034 	ldr	r0, [pc, #52]	; 23460 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a4>
   23428:	eb000495 	bl	24684 <assertion_failed>
   2342c:	e3a020d0 	mov	r2, #208	; 0xd0
   23430:	e59f1014 	ldr	r1, [pc, #20]	; 2344c <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   23434:	e59f0028 	ldr	r0, [pc, #40]	; 23464 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a8>
   23438:	eb000491 	bl	24684 <assertion_failed>
   2343c:	e3a020d1 	mov	r2, #209	; 0xd1
   23440:	e59f1004 	ldr	r1, [pc, #4]	; 2344c <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   23444:	e59f001c 	ldr	r0, [pc, #28]	; 23468 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1ac>
   23448:	eb00048d 	bl	24684 <assertion_failed>
   2344c:	00044270 	.word	0x00044270
   23450:	000442e8 	.word	0x000442e8
   23454:	0004427c 	.word	0x0004427c
   23458:	000442c0 	.word	0x000442c0
   2345c:	00044328 	.word	0x00044328
   23460:	00044314 	.word	0x00044314
   23464:	00043328 	.word	0x00043328
   23468:	00043338 	.word	0x00043338

0002346c <CNetSocket::Connect(char const*, char const*)>:
   2346c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   23470:	e2517000 	subs	r7, r1, #0
   23474:	e24dd01c 	sub	sp, sp, #28
   23478:	0a000038 	beq	23560 <CNetSocket::Connect(char const*, char const*)+0xf4>
   2347c:	e3520000 	cmp	r2, #0
   23480:	e1a05002 	mov	r5, r2
   23484:	0a000039 	beq	23570 <CNetSocket::Connect(char const*, char const*)+0x104>
   23488:	e3a03000 	mov	r3, #0
   2348c:	e1a04000 	mov	r4, r0
   23490:	e3a0200a 	mov	r2, #10
   23494:	e1a00005 	mov	r0, r5
   23498:	e28d1008 	add	r1, sp, #8
   2349c:	e58d3008 	str	r3, [sp, #8]
   234a0:	eb001bc5 	bl	2a3bc <strtoul>
   234a4:	e59d3008 	ldr	r3, [sp, #8]
   234a8:	e1a06000 	mov	r6, r0
   234ac:	e3530000 	cmp	r3, #0
   234b0:	0a000002 	beq	234c0 <CNetSocket::Connect(char const*, char const*)+0x54>
   234b4:	e1d330d0 	ldrsb	r3, [r3]
   234b8:	e3530000 	cmp	r3, #0
   234bc:	1a000033 	bne	23590 <CNetSocket::Connect(char const*, char const*)+0x124>
   234c0:	e59f30e8 	ldr	r3, [pc, #232]	; 235b0 <CNetSocket::Connect(char const*, char const*)+0x144>
   234c4:	e2462001 	sub	r2, r6, #1
   234c8:	e1520003 	cmp	r2, r3
   234cc:	8a00002f 	bhi	23590 <CNetSocket::Connect(char const*, char const*)+0x124>
   234d0:	e5943004 	ldr	r3, [r4, #4]
   234d4:	e3530000 	cmp	r3, #0
   234d8:	0a000028 	beq	23580 <CNetSocket::Connect(char const*, char const*)+0x114>
   234dc:	e28d0010 	add	r0, sp, #16
   234e0:	ebfff5c5 	bl	20bfc <CIPAddress::CIPAddress()>
   234e4:	e5941004 	ldr	r1, [r4, #4]
   234e8:	e28d000c 	add	r0, sp, #12
   234ec:	eb000061 	bl	23678 <CDNSClient::CDNSClient(CNetSubSystem*)>
   234f0:	e1a01007 	mov	r1, r7
   234f4:	e28d2010 	add	r2, sp, #16
   234f8:	e28d000c 	add	r0, sp, #12
   234fc:	eb0000af 	bl	237c0 <CDNSClient::Resolve(char const*, CIPAddress*)>
   23500:	e3500000 	cmp	r0, #0
   23504:	0a00000d 	beq	23540 <CNetSocket::Connect(char const*, char const*)+0xd4>
   23508:	e5943000 	ldr	r3, [r4]
   2350c:	e1a00004 	mov	r0, r4
   23510:	e593300c 	ldr	r3, [r3, #12]
   23514:	e6ff2076 	uxth	r2, r6
   23518:	e28d1010 	add	r1, sp, #16
   2351c:	e12fff33 	blx	r3
   23520:	e1a04000 	mov	r4, r0
   23524:	e28d000c 	add	r0, sp, #12
   23528:	eb00005c 	bl	236a0 <CDNSClient::~CDNSClient()>
   2352c:	e28d0010 	add	r0, sp, #16
   23530:	ebfff5c7 	bl	20c54 <CIPAddress::~CIPAddress()>
   23534:	e1a00004 	mov	r0, r4
   23538:	e28dd01c 	add	sp, sp, #28
   2353c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   23540:	eb000d37 	bl	26a24 <CLogger::Get()>
   23544:	e3a02004 	mov	r2, #4
   23548:	e59f3064 	ldr	r3, [pc, #100]	; 235b4 <CNetSocket::Connect(char const*, char const*)+0x148>
   2354c:	e59f1064 	ldr	r1, [pc, #100]	; 235b8 <CNetSocket::Connect(char const*, char const*)+0x14c>
   23550:	e58d7000 	str	r7, [sp]
   23554:	eb000c74 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23558:	e3e04000 	mvn	r4, #0
   2355c:	eafffff0 	b	23524 <CNetSocket::Connect(char const*, char const*)+0xb8>
   23560:	e3a0202a 	mov	r2, #42	; 0x2a
   23564:	e59f1050 	ldr	r1, [pc, #80]	; 235bc <CNetSocket::Connect(char const*, char const*)+0x150>
   23568:	e59f0050 	ldr	r0, [pc, #80]	; 235c0 <CNetSocket::Connect(char const*, char const*)+0x154>
   2356c:	eb000444 	bl	24684 <assertion_failed>
   23570:	e3a0202b 	mov	r2, #43	; 0x2b
   23574:	e59f1040 	ldr	r1, [pc, #64]	; 235bc <CNetSocket::Connect(char const*, char const*)+0x150>
   23578:	e59f0044 	ldr	r0, [pc, #68]	; 235c4 <CNetSocket::Connect(char const*, char const*)+0x158>
   2357c:	eb000440 	bl	24684 <assertion_failed>
   23580:	e3a02037 	mov	r2, #55	; 0x37
   23584:	e59f1030 	ldr	r1, [pc, #48]	; 235bc <CNetSocket::Connect(char const*, char const*)+0x150>
   23588:	e59f0038 	ldr	r0, [pc, #56]	; 235c8 <CNetSocket::Connect(char const*, char const*)+0x15c>
   2358c:	eb00043c 	bl	24684 <assertion_failed>
   23590:	eb000d23 	bl	26a24 <CLogger::Get()>
   23594:	e3a02004 	mov	r2, #4
   23598:	e59f302c 	ldr	r3, [pc, #44]	; 235cc <CNetSocket::Connect(char const*, char const*)+0x160>
   2359c:	e59f1014 	ldr	r1, [pc, #20]	; 235b8 <CNetSocket::Connect(char const*, char const*)+0x14c>
   235a0:	e58d5000 	str	r5, [sp]
   235a4:	eb000c60 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   235a8:	e3e04000 	mvn	r4, #0
   235ac:	eaffffe0 	b	23534 <CNetSocket::Connect(char const*, char const*)+0xc8>
   235b0:	0000fffe 	.word	0x0000fffe
   235b4:	000443bc 	.word	0x000443bc
   235b8:	000443d0 	.word	0x000443d0
   235bc:	00044388 	.word	0x00044388
   235c0:	00040470 	.word	0x00040470
   235c4:	00044398 	.word	0x00044398
   235c8:	00043290 	.word	0x00043290
   235cc:	000443a4 	.word	0x000443a4

000235d0 <CNetSocket::CNetSocket(CNetSubSystem*)>:
   235d0:	e59f2020 	ldr	r2, [pc, #32]	; 235f8 <CNetSocket::CNetSocket(CNetSubSystem*)+0x28>
   235d4:	e3510000 	cmp	r1, #0
   235d8:	e5801004 	str	r1, [r0, #4]
   235dc:	e5802000 	str	r2, [r0]
   235e0:	112fff1e 	bxne	lr
   235e4:	e3a02020 	mov	r2, #32
   235e8:	e92d4010 	push	{r4, lr}
   235ec:	e59f1008 	ldr	r1, [pc, #8]	; 235fc <CNetSocket::CNetSocket(CNetSubSystem*)+0x2c>
   235f0:	e59f0008 	ldr	r0, [pc, #8]	; 23600 <CNetSocket::CNetSocket(CNetSubSystem*)+0x30>
   235f4:	eb000422 	bl	24684 <assertion_failed>
   235f8:	000443e4 	.word	0x000443e4
   235fc:	00044388 	.word	0x00044388
   23600:	00043290 	.word	0x00043290

00023604 <CNetSocket::~CNetSocket()>:
   23604:	e12fff1e 	bx	lr

00023608 <CNetSocket::~CNetSocket()>:
   23608:	e92d4010 	push	{r4, lr}
   2360c:	e1a04000 	mov	r4, r0
   23610:	e3a01008 	mov	r1, #8
   23614:	eb001e2f 	bl	2aed8 <operator delete(void*, unsigned int)>
   23618:	e1a00004 	mov	r0, r4
   2361c:	e8bd8010 	pop	{r4, pc}

00023620 <CNetSocket::GetNetSubSystem()>:
   23620:	e5900004 	ldr	r0, [r0, #4]
   23624:	e3500000 	cmp	r0, #0
   23628:	112fff1e 	bxne	lr
   2362c:	e3a02046 	mov	r2, #70	; 0x46
   23630:	e92d4010 	push	{r4, lr}
   23634:	e59f1004 	ldr	r1, [pc, #4]	; 23640 <CNetSocket::GetNetSubSystem()+0x20>
   23638:	e59f0004 	ldr	r0, [pc, #4]	; 23644 <CNetSocket::GetNetSubSystem()+0x24>
   2363c:	eb000410 	bl	24684 <assertion_failed>
   23640:	00044388 	.word	0x00044388
   23644:	00043290 	.word	0x00043290

00023648 <CNetSocket::Bind(unsigned short)>:
   23648:	e3e00000 	mvn	r0, #0
   2364c:	e12fff1e 	bx	lr

00023650 <CNetSocket::Listen(unsigned int)>:
   23650:	e3e00000 	mvn	r0, #0
   23654:	e12fff1e 	bx	lr

00023658 <CNetSocket::Accept(CIPAddress*, unsigned short*)>:
   23658:	e3a00000 	mov	r0, #0
   2365c:	e12fff1e 	bx	lr

00023660 <CNetSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   23660:	e3e00000 	mvn	r0, #0
   23664:	e12fff1e 	bx	lr

00023668 <CNetSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   23668:	e3e00000 	mvn	r0, #0
   2366c:	e12fff1e 	bx	lr

00023670 <CNetSocket::SetOptionBroadcast(bool)>:
   23670:	e3e00000 	mvn	r0, #0
   23674:	e12fff1e 	bx	lr

00023678 <CDNSClient::CDNSClient(CNetSubSystem*)>:
   23678:	e3510000 	cmp	r1, #0
   2367c:	e5801000 	str	r1, [r0]
   23680:	112fff1e 	bxne	lr
   23684:	e3a02056 	mov	r2, #86	; 0x56
   23688:	e92d4010 	push	{r4, lr}
   2368c:	e59f1004 	ldr	r1, [pc, #4]	; 23698 <CDNSClient::CDNSClient(CNetSubSystem*)+0x20>
   23690:	e59f0004 	ldr	r0, [pc, #4]	; 2369c <CDNSClient::CDNSClient(CNetSubSystem*)+0x24>
   23694:	eb0003fa 	bl	24684 <assertion_failed>
   23698:	00044418 	.word	0x00044418
   2369c:	00043290 	.word	0x00043290

000236a0 <CDNSClient::~CDNSClient()>:
   236a0:	e12fff1e 	bx	lr

000236a4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)>:
   236a4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   236a8:	e3a04000 	mov	r4, #0
   236ac:	e1a00001 	mov	r0, r1
   236b0:	e1a07004 	mov	r7, r4
   236b4:	e24dd00c 	sub	sp, sp, #12
   236b8:	e3500000 	cmp	r0, #0
   236bc:	e1a06002 	mov	r6, r2
   236c0:	e1a0500d 	mov	r5, sp
   236c4:	e58d7004 	str	r7, [sp, #4]
   236c8:	0a000013 	beq	2371c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x78>
   236cc:	e3a0200a 	mov	r2, #10
   236d0:	e28d1004 	add	r1, sp, #4
   236d4:	eb001b38 	bl	2a3bc <strtoul>
   236d8:	e3540003 	cmp	r4, #3
   236dc:	e1a03000 	mov	r3, r0
   236e0:	0a000011 	beq	2372c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   236e4:	e59d1004 	ldr	r1, [sp, #4]
   236e8:	e3510000 	cmp	r1, #0
   236ec:	0a000026 	beq	2378c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   236f0:	e1d120d0 	ldrsb	r2, [r1]
   236f4:	e352002e 	cmp	r2, #46	; 0x2e
   236f8:	1a000023 	bne	2378c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   236fc:	e35000ff 	cmp	r0, #255	; 0xff
   23700:	8a000021 	bhi	2378c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   23704:	e2810001 	add	r0, r1, #1
   23708:	e3500000 	cmp	r0, #0
   2370c:	e4c53001 	strb	r3, [r5], #1
   23710:	e2844001 	add	r4, r4, #1
   23714:	e58d7004 	str	r7, [sp, #4]
   23718:	1affffeb 	bne	236cc <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x28>
   2371c:	e59f2080 	ldr	r2, [pc, #128]	; 237a4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x100>
   23720:	e59f1080 	ldr	r1, [pc, #128]	; 237a8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x104>
   23724:	e59f0080 	ldr	r0, [pc, #128]	; 237ac <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x108>
   23728:	eb0003d5 	bl	24684 <assertion_failed>
   2372c:	e59d2004 	ldr	r2, [sp, #4]
   23730:	e3520000 	cmp	r2, #0
   23734:	0a00000d 	beq	23770 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xcc>
   23738:	e1d220d0 	ldrsb	r2, [r2]
   2373c:	e3520000 	cmp	r2, #0
   23740:	1a000011 	bne	2378c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   23744:	e35000ff 	cmp	r0, #255	; 0xff
   23748:	8a00000f 	bhi	2378c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   2374c:	e3560000 	cmp	r6, #0
   23750:	e5c53000 	strb	r3, [r5]
   23754:	0a00000e 	beq	23794 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xf0>
   23758:	e1a00006 	mov	r0, r6
   2375c:	e1a0100d 	mov	r1, sp
   23760:	ebfff5ac 	bl	20e18 <CIPAddress::Set(unsigned char const*)>
   23764:	e3a00001 	mov	r0, #1
   23768:	e28dd00c 	add	sp, sp, #12
   2376c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   23770:	e35000ff 	cmp	r0, #255	; 0xff
   23774:	8a000004 	bhi	2378c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   23778:	e59f2030 	ldr	r2, [pc, #48]	; 237b0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x10c>
   2377c:	e59f1024 	ldr	r1, [pc, #36]	; 237a8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x104>
   23780:	e59f002c 	ldr	r0, [pc, #44]	; 237b4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x110>
   23784:	e5cd3003 	strb	r3, [sp, #3]
   23788:	eb0003bd 	bl	24684 <assertion_failed>
   2378c:	e3a00000 	mov	r0, #0
   23790:	eafffff4 	b	23768 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xc4>
   23794:	e59f201c 	ldr	r2, [pc, #28]	; 237b8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x114>
   23798:	e59f1008 	ldr	r1, [pc, #8]	; 237a8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x104>
   2379c:	e59f0018 	ldr	r0, [pc, #24]	; 237bc <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x118>
   237a0:	eb0003b7 	bl	24684 <assertion_failed>
   237a4:	0000011a 	.word	0x0000011a
   237a8:	00044418 	.word	0x00044418
   237ac:	00044428 	.word	0x00044428
   237b0:	00000135 	.word	0x00000135
   237b4:	00044448 	.word	0x00044448
   237b8:	00000139 	.word	0x00000139
   237bc:	00044438 	.word	0x00044438

000237c0 <CDNSClient::Resolve(char const*, CIPAddress*)>:
   237c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   237c4:	e2515000 	subs	r5, r1, #0
   237c8:	e24ddd17 	sub	sp, sp, #1472	; 0x5c0
   237cc:	e24dd004 	sub	sp, sp, #4
   237d0:	0a000061 	beq	2395c <CDNSClient::Resolve(char const*, CIPAddress*)+0x19c>
   237d4:	e5d53000 	ldrb	r3, [r5]
   237d8:	e1a04000 	mov	r4, r0
   237dc:	e2433031 	sub	r3, r3, #49	; 0x31
   237e0:	e3530008 	cmp	r3, #8
   237e4:	e1a07002 	mov	r7, r2
   237e8:	9a000020 	bls	23870 <CDNSClient::Resolve(char const*, CIPAddress*)+0xb0>
   237ec:	e5940000 	ldr	r0, [r4]
   237f0:	e3500000 	cmp	r0, #0
   237f4:	0a00005c 	beq	2396c <CDNSClient::Resolve(char const*, CIPAddress*)+0x1ac>
   237f8:	ebffd777 	bl	195dc <CNetSubSystem::GetConfig()>
   237fc:	ebfff4ab 	bl	20ab0 <CNetConfig::GetDNSServer() const>
   23800:	ebfff5b9 	bl	20eec <CIPAddress::Get() const>
   23804:	e1a01000 	mov	r1, r0
   23808:	e28d0008 	add	r0, sp, #8
   2380c:	ebfff591 	bl	20e58 <CIPAddress::CIPAddress(unsigned char const*)>
   23810:	e28d0008 	add	r0, sp, #8
   23814:	ebfff5d7 	bl	20f78 <CIPAddress::IsNull() const>
   23818:	e2506000 	subs	r6, r0, #0
   2381c:	13a06000 	movne	r6, #0
   23820:	0a000005 	beq	2383c <CDNSClient::Resolve(char const*, CIPAddress*)+0x7c>
   23824:	e28d0008 	add	r0, sp, #8
   23828:	ebfff509 	bl	20c54 <CIPAddress::~CIPAddress()>
   2382c:	e1a00006 	mov	r0, r6
   23830:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   23834:	e28dd004 	add	sp, sp, #4
   23838:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2383c:	e3a02011 	mov	r2, #17
   23840:	e5941000 	ldr	r1, [r4]
   23844:	e28d0020 	add	r0, sp, #32
   23848:	ebfffe4c 	bl	23180 <CSocket::CSocket(CNetSubSystem*, int)>
   2384c:	e3a02035 	mov	r2, #53	; 0x35
   23850:	e28d0020 	add	r0, sp, #32
   23854:	e28d1008 	add	r1, sp, #8
   23858:	ebfffcab 	bl	22b0c <CSocket::Connect(CIPAddress&, unsigned short)>
   2385c:	e3500000 	cmp	r0, #0
   23860:	0a000009 	beq	2388c <CDNSClient::Resolve(char const*, CIPAddress*)+0xcc>
   23864:	e28d0020 	add	r0, sp, #32
   23868:	ebfffd19 	bl	22cd4 <CSocket::~CSocket()>
   2386c:	eaffffec 	b	23824 <CDNSClient::Resolve(char const*, CIPAddress*)+0x64>
   23870:	ebffff8b 	bl	236a4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)>
   23874:	e2506000 	subs	r6, r0, #0
   23878:	0affffdb 	beq	237ec <CDNSClient::Resolve(char const*, CIPAddress*)+0x2c>
   2387c:	e1a00006 	mov	r0, r6
   23880:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   23884:	e28dd004 	add	sp, sp, #4
   23888:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2388c:	e28d8d07 	add	r8, sp, #448	; 0x1c0
   23890:	e3a02c02 	mov	r2, #512	; 0x200
   23894:	e1a01006 	mov	r1, r6
   23898:	e1a00008 	mov	r0, r8
   2389c:	eb001950 	bl	29de4 <memset>
   238a0:	e3a02001 	mov	r2, #1
   238a4:	e3a00c01 	mov	r0, #256	; 0x100
   238a8:	e59f32ec 	ldr	r3, [pc, #748]	; 23b9c <CDNSClient::Resolve(char const*, CIPAddress*)+0x3dc>
   238ac:	e1c820b2 	strh	r2, [r8, #2]
   238b0:	e1d3a0b0 	ldrh	sl, [r3]
   238b4:	e1a01005 	mov	r1, r5
   238b8:	e08a2002 	add	r2, sl, r2
   238bc:	e6bfafba 	rev16	sl, sl
   238c0:	e1c320b0 	strh	r2, [r3]
   238c4:	e1c800b4 	strh	r0, [r8, #4]
   238c8:	e3a020ff 	mov	r2, #255	; 0xff
   238cc:	e1c8a0b0 	strh	sl, [r8]
   238d0:	e28d00c0 	add	r0, sp, #192	; 0xc0
   238d4:	eb001a3f 	bl	2a1d8 <strncpy>
   238d8:	e1a0200d 	mov	r2, sp
   238dc:	e59f12bc 	ldr	r1, [pc, #700]	; 23ba0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e0>
   238e0:	e28d00c0 	add	r0, sp, #192	; 0xc0
   238e4:	e5cd61bf 	strb	r6, [sp, #447]	; 0x1bf
   238e8:	eb001a7d 	bl	2a2e4 <strtok_r>
   238ec:	e2504000 	subs	r4, r0, #0
   238f0:	e6ffa07a 	uxth	sl, sl
   238f4:	0a00004a 	beq	23a24 <CDNSClient::Resolve(char const*, CIPAddress*)+0x264>
   238f8:	e59f92a0 	ldr	r9, [pc, #672]	; 23ba0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e0>
   238fc:	e28d5f73 	add	r5, sp, #460	; 0x1cc
   23900:	ea00000f 	b	23944 <CDNSClient::Resolve(char const*, CIPAddress*)+0x184>
   23904:	e0453008 	sub	r3, r5, r8
   23908:	e2633c02 	rsb	r3, r3, #512	; 0x200
   2390c:	e2802002 	add	r2, r0, #2
   23910:	e1520003 	cmp	r2, r3
   23914:	aaffffd2 	bge	23864 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23918:	e4c50001 	strb	r0, [r5], #1
   2391c:	e1a01004 	mov	r1, r4
   23920:	e1a00005 	mov	r0, r5
   23924:	eb001a20 	bl	2a1ac <strcpy>
   23928:	e1a0200d 	mov	r2, sp
   2392c:	e1a01009 	mov	r1, r9
   23930:	e3a00000 	mov	r0, #0
   23934:	eb001a6a 	bl	2a2e4 <strtok_r>
   23938:	e2504000 	subs	r4, r0, #0
   2393c:	e085500b 	add	r5, r5, fp
   23940:	0a00000d 	beq	2397c <CDNSClient::Resolve(char const*, CIPAddress*)+0x1bc>
   23944:	e1a00004 	mov	r0, r4
   23948:	eb001973 	bl	29f1c <strlen>
   2394c:	e35000ff 	cmp	r0, #255	; 0xff
   23950:	e1a0b000 	mov	fp, r0
   23954:	9affffea 	bls	23904 <CDNSClient::Resolve(char const*, CIPAddress*)+0x144>
   23958:	eaffffc1 	b	23864 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2395c:	e3a02060 	mov	r2, #96	; 0x60
   23960:	e59f123c 	ldr	r1, [pc, #572]	; 23ba4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   23964:	e59f023c 	ldr	r0, [pc, #572]	; 23ba8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e8>
   23968:	eb000345 	bl	24684 <assertion_failed>
   2396c:	e3a0206a 	mov	r2, #106	; 0x6a
   23970:	e59f122c 	ldr	r1, [pc, #556]	; 23ba4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   23974:	e59f0230 	ldr	r0, [pc, #560]	; 23bac <CDNSClient::Resolve(char const*, CIPAddress*)+0x3ec>
   23978:	eb000341 	bl	24684 <assertion_failed>
   2397c:	e1a00005 	mov	r0, r5
   23980:	e4c04001 	strb	r4, [r0], #1
   23984:	e0403008 	sub	r3, r0, r8
   23988:	e59f2220 	ldr	r2, [pc, #544]	; 23bb0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f0>
   2398c:	e2633c02 	rsb	r3, r3, #512	; 0x200
   23990:	e3530003 	cmp	r3, #3
   23994:	e58d2004 	str	r2, [sp, #4]
   23998:	daffffb1 	ble	23864 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2399c:	e3a02004 	mov	r2, #4
   239a0:	e2855005 	add	r5, r5, #5
   239a4:	e08d1002 	add	r1, sp, r2
   239a8:	e0455008 	sub	r5, r5, r8
   239ac:	eb001b55 	bl	2a708 <memcpy>
   239b0:	e3550c02 	cmp	r5, #512	; 0x200
   239b4:	ca000024 	bgt	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x28c>
   239b8:	e3a09003 	mov	r9, #3
   239bc:	e28dbd0f 	add	fp, sp, #960	; 0x3c0
   239c0:	e3a03000 	mov	r3, #0
   239c4:	e1a02005 	mov	r2, r5
   239c8:	e1a01008 	mov	r1, r8
   239cc:	e28d0020 	add	r0, sp, #32
   239d0:	ebfffd47 	bl	22ef4 <CSocket::Send(void const*, unsigned int, int)>
   239d4:	e1500005 	cmp	r0, r5
   239d8:	1affffa1 	bne	23864 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   239dc:	eb00027c 	bl	243d4 <CScheduler::Get()>
   239e0:	e3a01ffa 	mov	r1, #1000	; 0x3e8
   239e4:	eb000256 	bl	24344 <CScheduler::MsSleep(unsigned int)>
   239e8:	e3a03040 	mov	r3, #64	; 0x40
   239ec:	e3a02c02 	mov	r2, #512	; 0x200
   239f0:	e1a0100b 	mov	r1, fp
   239f4:	e28d0020 	add	r0, sp, #32
   239f8:	ebfffd5b 	bl	22f6c <CSocket::Receive(void*, unsigned int, int)>
   239fc:	e3500c02 	cmp	r0, #512	; 0x200
   23a00:	e1a04000 	mov	r4, r0
   23a04:	aa00000c 	bge	23a3c <CDNSClient::Resolve(char const*, CIPAddress*)+0x27c>
   23a08:	e3500000 	cmp	r0, #0
   23a0c:	baffff94 	blt	23864 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23a10:	e3500019 	cmp	r0, #25
   23a14:	ca000010 	bgt	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x29c>
   23a18:	e2599001 	subs	r9, r9, #1
   23a1c:	1affffe7 	bne	239c0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x200>
   23a20:	eaffff8f 	b	23864 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23a24:	e59f3184 	ldr	r3, [pc, #388]	; 23bb0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f0>
   23a28:	e5cd61cc 	strb	r6, [sp, #460]	; 0x1cc
   23a2c:	e58d3004 	str	r3, [sp, #4]
   23a30:	e288000d 	add	r0, r8, #13
   23a34:	e28d5f73 	add	r5, sp, #460	; 0x1cc
   23a38:	eaffffd7 	b	2399c <CDNSClient::Resolve(char const*, CIPAddress*)+0x1dc>
   23a3c:	e3a020ba 	mov	r2, #186	; 0xba
   23a40:	e59f115c 	ldr	r1, [pc, #348]	; 23ba4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   23a44:	e59f0168 	ldr	r0, [pc, #360]	; 23bb4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f4>
   23a48:	eb00030d 	bl	24684 <assertion_failed>
   23a4c:	e3a020a9 	mov	r2, #169	; 0xa9
   23a50:	e59f114c 	ldr	r1, [pc, #332]	; 23ba4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   23a54:	e59f015c 	ldr	r0, [pc, #348]	; 23bb8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f8>
   23a58:	eb000309 	bl	24684 <assertion_failed>
   23a5c:	e1db30b0 	ldrh	r3, [fp]
   23a60:	e153000a 	cmp	r3, sl
   23a64:	1affff7e 	bne	23864 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23a68:	e1db20b2 	ldrh	r2, [fp, #2]
   23a6c:	e59f3148 	ldr	r3, [pc, #328]	; 23bbc <CDNSClient::Resolve(char const*, CIPAddress*)+0x3fc>
   23a70:	e0033002 	and	r3, r3, r2
   23a74:	e3530080 	cmp	r3, #128	; 0x80
   23a78:	1affff79 	bne	23864 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23a7c:	e1db30b4 	ldrh	r3, [fp, #4]
   23a80:	e3530c01 	cmp	r3, #256	; 0x100
   23a84:	1affff76 	bne	23864 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23a88:	e1db30b6 	ldrh	r3, [fp, #6]
   23a8c:	e3530000 	cmp	r3, #0
   23a90:	0affff73 	beq	23864 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23a94:	e28d5ff3 	add	r5, sp, #972	; 0x3cc
   23a98:	ea000004 	b	23ab0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2f0>
   23a9c:	e2833001 	add	r3, r3, #1
   23aa0:	e0855003 	add	r5, r5, r3
   23aa4:	e045300b 	sub	r3, r5, fp
   23aa8:	e1530004 	cmp	r3, r4
   23aac:	aaffff6c 	bge	23864 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23ab0:	e5d53000 	ldrb	r3, [r5]
   23ab4:	e3530000 	cmp	r3, #0
   23ab8:	1afffff7 	bne	23a9c <CDNSClient::Resolve(char const*, CIPAddress*)+0x2dc>
   23abc:	e2855005 	add	r5, r5, #5
   23ac0:	e045300b 	sub	r3, r5, fp
   23ac4:	e1530004 	cmp	r3, r4
   23ac8:	aaffff65 	bge	23864 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23acc:	e244800e 	sub	r8, r4, #14
   23ad0:	e5d53000 	ldrb	r3, [r5]
   23ad4:	e20320c0 	and	r2, r3, #192	; 0xc0
   23ad8:	e35200c0 	cmp	r2, #192	; 0xc0
   23adc:	02855002 	addeq	r5, r5, #2
   23ae0:	1a000012 	bne	23b30 <CDNSClient::Resolve(char const*, CIPAddress*)+0x370>
   23ae4:	e045300b 	sub	r3, r5, fp
   23ae8:	e1530008 	cmp	r3, r8
   23aec:	caffff5c 	bgt	23864 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23af0:	e3a0200e 	mov	r2, #14
   23af4:	e1a01005 	mov	r1, r5
   23af8:	e28d0010 	add	r0, sp, #16
   23afc:	eb001b01 	bl	2a708 <memcpy>
   23b00:	e1dd31b0 	ldrh	r3, [sp, #16]
   23b04:	e3530c01 	cmp	r3, #256	; 0x100
   23b08:	0a000012 	beq	23b58 <CDNSClient::Resolve(char const*, CIPAddress*)+0x398>
   23b0c:	e1dd31b8 	ldrh	r3, [sp, #24]
   23b10:	e6bf3fb3 	rev16	r3, r3
   23b14:	e6ff3073 	uxth	r3, r3
   23b18:	e283300a 	add	r3, r3, #10
   23b1c:	e0855003 	add	r5, r5, r3
   23b20:	e045300b 	sub	r3, r5, fp
   23b24:	e1530004 	cmp	r3, r4
   23b28:	baffffe8 	blt	23ad0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x310>
   23b2c:	eaffff4c 	b	23864 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23b30:	e2855001 	add	r5, r5, #1
   23b34:	ea000002 	b	23b44 <CDNSClient::Resolve(char const*, CIPAddress*)+0x384>
   23b38:	e4d53001 	ldrb	r3, [r5], #1
   23b3c:	e3530000 	cmp	r3, #0
   23b40:	0affffe7 	beq	23ae4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x324>
   23b44:	e0855003 	add	r5, r5, r3
   23b48:	e045300b 	sub	r3, r5, fp
   23b4c:	e1530004 	cmp	r3, r4
   23b50:	bafffff8 	blt	23b38 <CDNSClient::Resolve(char const*, CIPAddress*)+0x378>
   23b54:	eaffff42 	b	23864 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23b58:	e1dd31b2 	ldrh	r3, [sp, #18]
   23b5c:	e3530c01 	cmp	r3, #256	; 0x100
   23b60:	1affffe9 	bne	23b0c <CDNSClient::Resolve(char const*, CIPAddress*)+0x34c>
   23b64:	e1dd31b8 	ldrh	r3, [sp, #24]
   23b68:	e3530b01 	cmp	r3, #1024	; 0x400
   23b6c:	1affffe6 	bne	23b0c <CDNSClient::Resolve(char const*, CIPAddress*)+0x34c>
   23b70:	e3570000 	cmp	r7, #0
   23b74:	0a000004 	beq	23b8c <CDNSClient::Resolve(char const*, CIPAddress*)+0x3cc>
   23b78:	e1a00007 	mov	r0, r7
   23b7c:	e28d101a 	add	r1, sp, #26
   23b80:	ebfff4a4 	bl	20e18 <CIPAddress::Set(unsigned char const*)>
   23b84:	e3a06001 	mov	r6, #1
   23b88:	eaffff35 	b	23864 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23b8c:	e59f202c 	ldr	r2, [pc, #44]	; 23bc0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x400>
   23b90:	e59f100c 	ldr	r1, [pc, #12]	; 23ba4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   23b94:	e59f0028 	ldr	r0, [pc, #40]	; 23bc4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x404>
   23b98:	eb0002b9 	bl	24684 <assertion_failed>
   23b9c:	00047944 	.word	0x00047944
   23ba0:	0003e61c 	.word	0x0003e61c
   23ba4:	00044418 	.word	0x00044418
   23ba8:	00044454 	.word	0x00044454
   23bac:	00043290 	.word	0x00043290
   23bb0:	01000100 	.word	0x01000100
   23bb4:	00044484 	.word	0x00044484
   23bb8:	00044464 	.word	0x00044464
   23bbc:	00000ffa 	.word	0x00000ffa
   23bc0:	0000010d 	.word	0x0000010d
   23bc4:	00044438 	.word	0x00044438

00023bc8 <CTask::Run()>:
   23bc8:	e3a0203f 	mov	r2, #63	; 0x3f
   23bcc:	e92d4010 	push	{r4, lr}
   23bd0:	e59f1004 	ldr	r1, [pc, #4]	; 23bdc <CTask::Run()+0x14>
   23bd4:	e59f0004 	ldr	r0, [pc, #4]	; 23be0 <CTask::Run()+0x18>
   23bd8:	eb0002a9 	bl	24684 <assertion_failed>
   23bdc:	000444a8 	.word	0x000444a8
   23be0:	0003f63c 	.word	0x0003f63c

00023be4 <CTask::TaskEntry(void*)>:
   23be4:	e92d4010 	push	{r4, lr}
   23be8:	e2504000 	subs	r4, r0, #0
   23bec:	0a00000c 	beq	23c24 <CTask::TaskEntry(void*)+0x40>
   23bf0:	e5943000 	ldr	r3, [r4]
   23bf4:	e5933008 	ldr	r3, [r3, #8]
   23bf8:	e12fff33 	blx	r3
   23bfc:	e3a03003 	mov	r3, #3
   23c00:	e28400d4 	add	r0, r4, #212	; 0xd4
   23c04:	e5c43004 	strb	r3, [r4, #4]
   23c08:	eb00021a 	bl	24478 <CSynchronizationEvent::Set()>
   23c0c:	eb0001f0 	bl	243d4 <CScheduler::Get()>
   23c10:	eb000164 	bl	241a8 <CScheduler::Yield()>
   23c14:	e3a0208c 	mov	r2, #140	; 0x8c
   23c18:	e59f1014 	ldr	r1, [pc, #20]	; 23c34 <CTask::TaskEntry(void*)+0x50>
   23c1c:	e59f0014 	ldr	r0, [pc, #20]	; 23c38 <CTask::TaskEntry(void*)+0x54>
   23c20:	eb000297 	bl	24684 <assertion_failed>
   23c24:	e3a02084 	mov	r2, #132	; 0x84
   23c28:	e59f1004 	ldr	r1, [pc, #4]	; 23c34 <CTask::TaskEntry(void*)+0x50>
   23c2c:	e59f0008 	ldr	r0, [pc, #8]	; 23c3c <CTask::TaskEntry(void*)+0x58>
   23c30:	eb000293 	bl	24684 <assertion_failed>
   23c34:	000444a8 	.word	0x000444a8
   23c38:	0003f63c 	.word	0x0003f63c
   23c3c:	0003ea38 	.word	0x0003ea38

00023c40 <CTask::~CTask()>:
   23c40:	e5d02004 	ldrb	r2, [r0, #4]
   23c44:	e59f3050 	ldr	r3, [pc, #80]	; 23c9c <CTask::~CTask()+0x5c>
   23c48:	e3520003 	cmp	r2, #3
   23c4c:	e92d4010 	push	{r4, lr}
   23c50:	e5803000 	str	r3, [r0]
   23c54:	1a00000c 	bne	23c8c <CTask::~CTask()+0x4c>
   23c58:	e1a04000 	mov	r4, r0
   23c5c:	e3a03004 	mov	r3, #4
   23c60:	e59000c8 	ldr	r0, [r0, #200]	; 0xc8
   23c64:	e5c43004 	strb	r3, [r4, #4]
   23c68:	e3500000 	cmp	r0, #0
   23c6c:	0a000000 	beq	23c74 <CTask::~CTask()+0x34>
   23c70:	eb001c97 	bl	2aed4 <operator delete[](void*)>
   23c74:	e3a03000 	mov	r3, #0
   23c78:	e28400d4 	add	r0, r4, #212	; 0xd4
   23c7c:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   23c80:	eb0001ed 	bl	2443c <CSynchronizationEvent::~CSynchronizationEvent()>
   23c84:	e1a00004 	mov	r0, r4
   23c88:	e8bd8010 	pop	{r4, pc}
   23c8c:	e3a02036 	mov	r2, #54	; 0x36
   23c90:	e59f1008 	ldr	r1, [pc, #8]	; 23ca0 <CTask::~CTask()+0x60>
   23c94:	e59f0008 	ldr	r0, [pc, #8]	; 23ca4 <CTask::~CTask()+0x64>
   23c98:	eb000279 	bl	24684 <assertion_failed>
   23c9c:	0004451c 	.word	0x0004451c
   23ca0:	000444a8 	.word	0x000444a8
   23ca4:	000444b4 	.word	0x000444b4

00023ca8 <CTask::~CTask()>:
   23ca8:	e92d4010 	push	{r4, lr}
   23cac:	e1a04000 	mov	r4, r0
   23cb0:	ebffffe2 	bl	23c40 <CTask::~CTask()>
   23cb4:	e1a00004 	mov	r0, r4
   23cb8:	e3a010dc 	mov	r1, #220	; 0xdc
   23cbc:	eb001c85 	bl	2aed8 <operator delete(void*, unsigned int)>
   23cc0:	e1a00004 	mov	r0, r4
   23cc4:	e8bd8010 	pop	{r4, pc}

00023cc8 <CTask::Terminate()>:
   23cc8:	e3a03003 	mov	r3, #3
   23ccc:	e92d4010 	push	{r4, lr}
   23cd0:	e28000d4 	add	r0, r0, #212	; 0xd4
   23cd4:	e54030d0 	strb	r3, [r0, #-208]	; 0xffffff30
   23cd8:	eb0001e6 	bl	24478 <CSynchronizationEvent::Set()>
   23cdc:	eb0001bc 	bl	243d4 <CScheduler::Get()>
   23ce0:	eb000130 	bl	241a8 <CScheduler::Yield()>
   23ce4:	e3a02048 	mov	r2, #72	; 0x48
   23ce8:	e59f1004 	ldr	r1, [pc, #4]	; 23cf4 <CTask::Terminate()+0x2c>
   23cec:	e59f0004 	ldr	r0, [pc, #4]	; 23cf8 <CTask::Terminate()+0x30>
   23cf0:	eb000263 	bl	24684 <assertion_failed>
   23cf4:	000444a8 	.word	0x000444a8
   23cf8:	0003f63c 	.word	0x0003f63c

00023cfc <CTask::WaitForTermination()>:
   23cfc:	e28000d4 	add	r0, r0, #212	; 0xd4
   23d00:	ea0001ea 	b	244b0 <CSynchronizationEvent::Wait()>

00023d04 <CTask::SetUserData(void*, unsigned int)>:
   23d04:	e0802102 	add	r2, r0, r2, lsl #2
   23d08:	e58210cc 	str	r1, [r2, #204]	; 0xcc
   23d0c:	e12fff1e 	bx	lr

00023d10 <CTask::GetUserData(unsigned int)>:
   23d10:	e0801101 	add	r1, r0, r1, lsl #2
   23d14:	e59100cc 	ldr	r0, [r1, #204]	; 0xcc
   23d18:	e12fff1e 	bx	lr

00023d1c <CTask::InitializeRegs()>:
   23d1c:	e92d4010 	push	{r4, lr}
   23d20:	e1a04000 	mov	r4, r0
   23d24:	e3a020b8 	mov	r2, #184	; 0xb8
   23d28:	e3a01000 	mov	r1, #0
   23d2c:	e280000c 	add	r0, r0, #12
   23d30:	eb00182b 	bl	29de4 <memset>
   23d34:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   23d38:	e584400c 	str	r4, [r4, #12]
   23d3c:	e3530000 	cmp	r3, #0
   23d40:	0a000008 	beq	23d68 <CTask::InitializeRegs()+0x4c>
   23d44:	e3a00101 	mov	r0, #1073741824	; 0x40000000
   23d48:	e3a01402 	mov	r1, #33554432	; 0x2000000
   23d4c:	e594c0c4 	ldr	ip, [r4, #196]	; 0xc4
   23d50:	e59f2020 	ldr	r2, [pc, #32]	; 23d78 <CTask::InitializeRegs()+0x5c>
   23d54:	e083300c 	add	r3, r3, ip
   23d58:	e1c401f0 	strd	r0, [r4, #16]
   23d5c:	e584303c 	str	r3, [r4, #60]	; 0x3c
   23d60:	e5842040 	str	r2, [r4, #64]	; 0x40
   23d64:	e8bd8010 	pop	{r4, pc}
   23d68:	e3a02062 	mov	r2, #98	; 0x62
   23d6c:	e59f1008 	ldr	r1, [pc, #8]	; 23d7c <CTask::InitializeRegs()+0x60>
   23d70:	e59f0008 	ldr	r0, [pc, #8]	; 23d80 <CTask::InitializeRegs()+0x64>
   23d74:	eb000242 	bl	24684 <assertion_failed>
   23d78:	00023be4 	.word	0x00023be4
   23d7c:	000444a8 	.word	0x000444a8
   23d80:	000444d4 	.word	0x000444d4

00023d84 <CTask::CTask(unsigned int)>:
   23d84:	e92d4070 	push	{r4, r5, r6, lr}
   23d88:	e3a05000 	mov	r5, #0
   23d8c:	e1a04000 	mov	r4, r0
   23d90:	e59f3084 	ldr	r3, [pc, #132]	; 23e1c <CTask::CTask(unsigned int)+0x98>
   23d94:	e58010c4 	str	r1, [r0, #196]	; 0xc4
   23d98:	e5803000 	str	r3, [r0]
   23d9c:	e5c05004 	strb	r5, [r0, #4]
   23da0:	e58050c8 	str	r5, [r0, #200]	; 0xc8
   23da4:	e1a01005 	mov	r1, r5
   23da8:	e28000d4 	add	r0, r0, #212	; 0xd4
   23dac:	eb00019e 	bl	2442c <CSynchronizationEvent::CSynchronizationEvent(bool)>
   23db0:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   23db4:	e58450cc 	str	r5, [r4, #204]	; 0xcc
   23db8:	e1500005 	cmp	r0, r5
   23dbc:	e58450d0 	str	r5, [r4, #208]	; 0xd0
   23dc0:	0a000008 	beq	23de8 <CTask::CTask(unsigned int)+0x64>
   23dc4:	e3500b01 	cmp	r0, #1024	; 0x400
   23dc8:	3a00000b 	bcc	23dfc <CTask::CTask(unsigned int)+0x78>
   23dcc:	e3100003 	tst	r0, #3
   23dd0:	1a00000d 	bne	23e0c <CTask::CTask(unsigned int)+0x88>
   23dd4:	eb001c37 	bl	2aeb8 <operator new[](unsigned int)>
   23dd8:	e1a03000 	mov	r3, r0
   23ddc:	e1a00004 	mov	r0, r4
   23de0:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   23de4:	ebffffcc 	bl	23d1c <CTask::InitializeRegs()>
   23de8:	eb000179 	bl	243d4 <CScheduler::Get()>
   23dec:	e1a01004 	mov	r1, r4
   23df0:	eb000054 	bl	23f48 <CScheduler::AddTask(CTask*)>
   23df4:	e1a00004 	mov	r0, r4
   23df8:	e8bd8070 	pop	{r4, r5, r6, pc}
   23dfc:	e3a02025 	mov	r2, #37	; 0x25
   23e00:	e59f1018 	ldr	r1, [pc, #24]	; 23e20 <CTask::CTask(unsigned int)+0x9c>
   23e04:	e59f0018 	ldr	r0, [pc, #24]	; 23e24 <CTask::CTask(unsigned int)+0xa0>
   23e08:	eb00021d 	bl	24684 <assertion_failed>
   23e0c:	e3a02027 	mov	r2, #39	; 0x27
   23e10:	e59f1008 	ldr	r1, [pc, #8]	; 23e20 <CTask::CTask(unsigned int)+0x9c>
   23e14:	e59f000c 	ldr	r0, [pc, #12]	; 23e28 <CTask::CTask(unsigned int)+0xa4>
   23e18:	eb000219 	bl	24684 <assertion_failed>
   23e1c:	0004451c 	.word	0x0004451c
   23e20:	000444a8 	.word	0x000444a8
   23e24:	000444e4 	.word	0x000444e4
   23e28:	000444fc 	.word	0x000444fc

00023e2c <CScheduler::CScheduler()>:
   23e2c:	e3a03000 	mov	r3, #0
   23e30:	e59f2058 	ldr	r2, [pc, #88]	; 23e90 <CScheduler::CScheduler()+0x64>
   23e34:	e92d4070 	push	{r4, r5, r6, lr}
   23e38:	e5926000 	ldr	r6, [r2]
   23e3c:	e5803050 	str	r3, [r0, #80]	; 0x50
   23e40:	e1560003 	cmp	r6, r3
   23e44:	e5803054 	str	r3, [r0, #84]	; 0x54
   23e48:	e5803058 	str	r3, [r0, #88]	; 0x58
   23e4c:	e580305c 	str	r3, [r0, #92]	; 0x5c
   23e50:	e5803060 	str	r3, [r0, #96]	; 0x60
   23e54:	1a000009 	bne	23e80 <CScheduler::CScheduler()+0x54>
   23e58:	e1a04000 	mov	r4, r0
   23e5c:	e3a000dc 	mov	r0, #220	; 0xdc
   23e60:	e5824000 	str	r4, [r2]
   23e64:	eb001c0d 	bl	2aea0 <operator new(unsigned int)>
   23e68:	e1a05000 	mov	r5, r0
   23e6c:	e1a01006 	mov	r1, r6
   23e70:	ebffffc3 	bl	23d84 <CTask::CTask(unsigned int)>
   23e74:	e1a00004 	mov	r0, r4
   23e78:	e5845054 	str	r5, [r4, #84]	; 0x54
   23e7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23e80:	e3a02024 	mov	r2, #36	; 0x24
   23e84:	e59f1008 	ldr	r1, [pc, #8]	; 23e94 <CScheduler::CScheduler()+0x68>
   23e88:	e59f0008 	ldr	r0, [pc, #8]	; 23e98 <CScheduler::CScheduler()+0x6c>
   23e8c:	eb0001fc 	bl	24684 <assertion_failed>
   23e90:	0004da90 	.word	0x0004da90
   23e94:	00044528 	.word	0x00044528
   23e98:	0004323c 	.word	0x0004323c

00023e9c <CScheduler::~CScheduler()>:
   23e9c:	e3a02000 	mov	r2, #0
   23ea0:	e59f3004 	ldr	r3, [pc, #4]	; 23eac <CScheduler::~CScheduler()+0x10>
   23ea4:	e5832000 	str	r2, [r3]
   23ea8:	e12fff1e 	bx	lr
   23eac:	0004da90 	.word	0x0004da90

00023eb0 <CScheduler::GetCurrentTask()>:
   23eb0:	e5900054 	ldr	r0, [r0, #84]	; 0x54
   23eb4:	e12fff1e 	bx	lr

00023eb8 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))>:
   23eb8:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
   23ebc:	e92d4010 	push	{r4, lr}
   23ec0:	e3530000 	cmp	r3, #0
   23ec4:	1a000006 	bne	23ee4 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x2c>
   23ec8:	e3510000 	cmp	r1, #0
   23ecc:	e580105c 	str	r1, [r0, #92]	; 0x5c
   23ed0:	18bd8010 	popne	{r4, pc}
   23ed4:	e3a02080 	mov	r2, #128	; 0x80
   23ed8:	e59f1014 	ldr	r1, [pc, #20]	; 23ef4 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x3c>
   23edc:	e59f0014 	ldr	r0, [pc, #20]	; 23ef8 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x40>
   23ee0:	eb0001e7 	bl	24684 <assertion_failed>
   23ee4:	e3a0207e 	mov	r2, #126	; 0x7e
   23ee8:	e59f1004 	ldr	r1, [pc, #4]	; 23ef4 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x3c>
   23eec:	e59f0008 	ldr	r0, [pc, #8]	; 23efc <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x44>
   23ef0:	eb0001e3 	bl	24684 <assertion_failed>
   23ef4:	00044528 	.word	0x00044528
   23ef8:	00044554 	.word	0x00044554
   23efc:	00044538 	.word	0x00044538

00023f00 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))>:
   23f00:	e5903060 	ldr	r3, [r0, #96]	; 0x60
   23f04:	e92d4010 	push	{r4, lr}
   23f08:	e3530000 	cmp	r3, #0
   23f0c:	1a000006 	bne	23f2c <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x2c>
   23f10:	e3510000 	cmp	r1, #0
   23f14:	e5801060 	str	r1, [r0, #96]	; 0x60
   23f18:	18bd8010 	popne	{r4, pc}
   23f1c:	e3a02087 	mov	r2, #135	; 0x87
   23f20:	e59f1014 	ldr	r1, [pc, #20]	; 23f3c <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x3c>
   23f24:	e59f0014 	ldr	r0, [pc, #20]	; 23f40 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x40>
   23f28:	eb0001d5 	bl	24684 <assertion_failed>
   23f2c:	e3a02085 	mov	r2, #133	; 0x85
   23f30:	e59f1004 	ldr	r1, [pc, #4]	; 23f3c <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x3c>
   23f34:	e59f0008 	ldr	r0, [pc, #8]	; 23f44 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x44>
   23f38:	eb0001d1 	bl	24684 <assertion_failed>
   23f3c:	00044528 	.word	0x00044528
   23f40:	00044590 	.word	0x00044590
   23f44:	00044570 	.word	0x00044570

00023f48 <CScheduler::AddTask(CTask*)>:
   23f48:	e92d4070 	push	{r4, r5, r6, lr}
   23f4c:	e2515000 	subs	r5, r1, #0
   23f50:	0a00001a 	beq	23fc0 <CScheduler::AddTask(CTask*)+0x78>
   23f54:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   23f58:	e1a04000 	mov	r4, r0
   23f5c:	e35e0000 	cmp	lr, #0
   23f60:	0a000012 	beq	23fb0 <CScheduler::AddTask(CTask*)+0x68>
   23f64:	e3a03000 	mov	r3, #0
   23f68:	e2402004 	sub	r2, r0, #4
   23f6c:	ea000002 	b	23f7c <CScheduler::AddTask(CTask*)+0x34>
   23f70:	e2833001 	add	r3, r3, #1
   23f74:	e15e0003 	cmp	lr, r3
   23f78:	0a000004 	beq	23f90 <CScheduler::AddTask(CTask*)+0x48>
   23f7c:	e5b2c004 	ldr	ip, [r2, #4]!
   23f80:	e35c0000 	cmp	ip, #0
   23f84:	1afffff9 	bne	23f70 <CScheduler::AddTask(CTask*)+0x28>
   23f88:	e7845103 	str	r5, [r4, r3, lsl #2]
   23f8c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23f90:	e35e0014 	cmp	lr, #20
   23f94:	1a000005 	bne	23fb0 <CScheduler::AddTask(CTask*)+0x68>
   23f98:	eb000aa1 	bl	26a24 <CLogger::Get()>
   23f9c:	e3a02000 	mov	r2, #0
   23fa0:	e59f3028 	ldr	r3, [pc, #40]	; 23fd0 <CScheduler::AddTask(CTask*)+0x88>
   23fa4:	e59f1028 	ldr	r1, [pc, #40]	; 23fd4 <CScheduler::AddTask(CTask*)+0x8c>
   23fa8:	eb0009df 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23fac:	e594e050 	ldr	lr, [r4, #80]	; 0x50
   23fb0:	e28e3001 	add	r3, lr, #1
   23fb4:	e5843050 	str	r3, [r4, #80]	; 0x50
   23fb8:	e784510e 	str	r5, [r4, lr, lsl #2]
   23fbc:	e8bd8070 	pop	{r4, r5, r6, pc}
   23fc0:	e3a0208c 	mov	r2, #140	; 0x8c
   23fc4:	e59f100c 	ldr	r1, [pc, #12]	; 23fd8 <CScheduler::AddTask(CTask*)+0x90>
   23fc8:	e59f000c 	ldr	r0, [pc, #12]	; 23fdc <CScheduler::AddTask(CTask*)+0x94>
   23fcc:	eb0001ac 	bl	24684 <assertion_failed>
   23fd0:	000445bc 	.word	0x000445bc
   23fd4:	00044680 	.word	0x00044680
   23fd8:	00044528 	.word	0x00044528
   23fdc:	000445b0 	.word	0x000445b0

00023fe0 <CScheduler::RemoveTask(CTask*)>:
   23fe0:	e92d4010 	push	{r4, lr}
   23fe4:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   23fe8:	e35e0000 	cmp	lr, #0
   23fec:	0a00000e 	beq	2402c <CScheduler::RemoveTask(CTask*)+0x4c>
   23ff0:	e3a03000 	mov	r3, #0
   23ff4:	e2402004 	sub	r2, r0, #4
   23ff8:	ea000002 	b	24008 <CScheduler::RemoveTask(CTask*)+0x28>
   23ffc:	e2833001 	add	r3, r3, #1
   24000:	e15e0003 	cmp	lr, r3
   24004:	0a000008 	beq	2402c <CScheduler::RemoveTask(CTask*)+0x4c>
   24008:	e5b2c004 	ldr	ip, [r2, #4]!
   2400c:	e15c0001 	cmp	ip, r1
   24010:	1afffff9 	bne	23ffc <CScheduler::RemoveTask(CTask*)+0x1c>
   24014:	e3a02000 	mov	r2, #0
   24018:	e24ee001 	sub	lr, lr, #1
   2401c:	e15e0003 	cmp	lr, r3
   24020:	e7802103 	str	r2, [r0, r3, lsl #2]
   24024:	05803050 	streq	r3, [r0, #80]	; 0x50
   24028:	e8bd8010 	pop	{r4, pc}
   2402c:	e3a020b2 	mov	r2, #178	; 0xb2
   24030:	e59f1004 	ldr	r1, [pc, #4]	; 2403c <CScheduler::RemoveTask(CTask*)+0x5c>
   24034:	e59f0004 	ldr	r0, [pc, #4]	; 24040 <CScheduler::RemoveTask(CTask*)+0x60>
   24038:	eb000191 	bl	24684 <assertion_failed>
   2403c:	00044528 	.word	0x00044528
   24040:	0003f63c 	.word	0x0003f63c

00024044 <CScheduler::WakeTask(CTask**)>:
   24044:	e3510000 	cmp	r1, #0
   24048:	e92d4010 	push	{r4, lr}
   2404c:	0a000009 	beq	24078 <CScheduler::WakeTask(CTask**)+0x34>
   24050:	e3a02000 	mov	r2, #0
   24054:	e5913000 	ldr	r3, [r1]
   24058:	e5812000 	str	r2, [r1]
   2405c:	e1530002 	cmp	r3, r2
   24060:	0a000008 	beq	24088 <CScheduler::WakeTask(CTask**)+0x44>
   24064:	e5d31004 	ldrb	r1, [r3, #4]
   24068:	e3510001 	cmp	r1, #1
   2406c:	1a000009 	bne	24098 <CScheduler::WakeTask(CTask**)+0x54>
   24070:	e5c32004 	strb	r2, [r3, #4]
   24074:	e8bd8010 	pop	{r4, pc}
   24078:	e3a020c3 	mov	r2, #195	; 0xc3
   2407c:	e59f1024 	ldr	r1, [pc, #36]	; 240a8 <CScheduler::WakeTask(CTask**)+0x64>
   24080:	e59f0024 	ldr	r0, [pc, #36]	; 240ac <CScheduler::WakeTask(CTask**)+0x68>
   24084:	eb00017e 	bl	24684 <assertion_failed>
   24088:	e3a020cf 	mov	r2, #207	; 0xcf
   2408c:	e59f1014 	ldr	r1, [pc, #20]	; 240a8 <CScheduler::WakeTask(CTask**)+0x64>
   24090:	e59f0018 	ldr	r0, [pc, #24]	; 240b0 <CScheduler::WakeTask(CTask**)+0x6c>
   24094:	eb00017a 	bl	24684 <assertion_failed>
   24098:	e3a020d0 	mov	r2, #208	; 0xd0
   2409c:	e59f1004 	ldr	r1, [pc, #4]	; 240a8 <CScheduler::WakeTask(CTask**)+0x64>
   240a0:	e59f000c 	ldr	r0, [pc, #12]	; 240b4 <CScheduler::WakeTask(CTask**)+0x70>
   240a4:	eb000176 	bl	24684 <assertion_failed>
   240a8:	00044528 	.word	0x00044528
   240ac:	000445dc 	.word	0x000445dc
   240b0:	000445b0 	.word	0x000445b0
   240b4:	000445e8 	.word	0x000445e8

000240b8 <CScheduler::GetNextTask()>:
   240b8:	e92d4070 	push	{r4, r5, r6, lr}
   240bc:	e1a05000 	mov	r5, r0
   240c0:	e5904058 	ldr	r4, [r0, #88]	; 0x58
   240c4:	e3540014 	cmp	r4, #20
   240c8:	23a04000 	movcs	r4, #0
   240cc:	eb001738 	bl	29db4 <CTimer::Get()>
   240d0:	eb00147e 	bl	292d0 <CTimer::GetClockTicks()>
   240d4:	e5953050 	ldr	r3, [r5, #80]	; 0x50
   240d8:	e3530000 	cmp	r3, #0
   240dc:	0a000020 	beq	24164 <CScheduler::GetNextTask()+0xac>
   240e0:	e3a01001 	mov	r1, #1
   240e4:	e2844001 	add	r4, r4, #1
   240e8:	e1540003 	cmp	r4, r3
   240ec:	23a04000 	movcs	r4, #0
   240f0:	e7956104 	ldr	r6, [r5, r4, lsl #2]
   240f4:	e3560000 	cmp	r6, #0
   240f8:	0a000016 	beq	24158 <CScheduler::GetNextTask()+0xa0>
   240fc:	e5d62004 	ldrb	r2, [r6, #4]
   24100:	e3520003 	cmp	r2, #3
   24104:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   24108:	ea00001f 	b	2418c <CScheduler::GetNextTask()+0xd4>
   2410c:	00024150 	.word	0x00024150
   24110:	00024158 	.word	0x00024158
   24114:	0002416c 	.word	0x0002416c
   24118:	0002411c 	.word	0x0002411c
   2411c:	e5953060 	ldr	r3, [r5, #96]	; 0x60
   24120:	e3530000 	cmp	r3, #0
   24124:	0a000001 	beq	24130 <CScheduler::GetNextTask()+0x78>
   24128:	e1a00006 	mov	r0, r6
   2412c:	e12fff33 	blx	r3
   24130:	e1a00005 	mov	r0, r5
   24134:	e1a01006 	mov	r1, r6
   24138:	ebffffa8 	bl	23fe0 <CScheduler::RemoveTask(CTask*)>
   2413c:	e5963000 	ldr	r3, [r6]
   24140:	e1a00006 	mov	r0, r6
   24144:	e5933004 	ldr	r3, [r3, #4]
   24148:	e12fff33 	blx	r3
   2414c:	e3a04014 	mov	r4, #20
   24150:	e1a00004 	mov	r0, r4
   24154:	e8bd8070 	pop	{r4, r5, r6, pc}
   24158:	e2811001 	add	r1, r1, #1
   2415c:	e1510003 	cmp	r1, r3
   24160:	9affffdf 	bls	240e4 <CScheduler::GetNextTask()+0x2c>
   24164:	e3a04014 	mov	r4, #20
   24168:	eafffff8 	b	24150 <CScheduler::GetNextTask()+0x98>
   2416c:	e5962008 	ldr	r2, [r6, #8]
   24170:	e0422000 	sub	r2, r2, r0
   24174:	e3520000 	cmp	r2, #0
   24178:	cafffff6 	bgt	24158 <CScheduler::GetNextTask()+0xa0>
   2417c:	e3a03000 	mov	r3, #0
   24180:	e1a00004 	mov	r0, r4
   24184:	e5c63004 	strb	r3, [r6, #4]
   24188:	e8bd8070 	pop	{r4, r5, r6, pc}
   2418c:	e59f2008 	ldr	r2, [pc, #8]	; 2419c <CScheduler::GetNextTask()+0xe4>
   24190:	e59f1008 	ldr	r1, [pc, #8]	; 241a0 <CScheduler::GetNextTask()+0xe8>
   24194:	e59f0008 	ldr	r0, [pc, #8]	; 241a4 <CScheduler::GetNextTask()+0xec>
   24198:	eb000139 	bl	24684 <assertion_failed>
   2419c:	00000103 	.word	0x00000103
   241a0:	00044528 	.word	0x00044528
   241a4:	0003f63c 	.word	0x0003f63c

000241a8 <CScheduler::Yield()>:
   241a8:	e92d4030 	push	{r4, r5, lr}
   241ac:	e1a04000 	mov	r4, r0
   241b0:	e24dd00c 	sub	sp, sp, #12
   241b4:	e1a00004 	mov	r0, r4
   241b8:	ebffffbe 	bl	240b8 <CScheduler::GetNextTask()>
   241bc:	e3500014 	cmp	r0, #20
   241c0:	e5840058 	str	r0, [r4, #88]	; 0x58
   241c4:	1a000006 	bne	241e4 <CScheduler::Yield()+0x3c>
   241c8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   241cc:	e3530000 	cmp	r3, #0
   241d0:	1afffff7 	bne	241b4 <CScheduler::Yield()+0xc>
   241d4:	e3a02037 	mov	r2, #55	; 0x37
   241d8:	e59f1080 	ldr	r1, [pc, #128]	; 24260 <CScheduler::Yield()+0xb8>
   241dc:	e59f0080 	ldr	r0, [pc, #128]	; 24264 <CScheduler::Yield()+0xbc>
   241e0:	eb000127 	bl	24684 <assertion_failed>
   241e4:	e3500013 	cmp	r0, #19
   241e8:	8a000014 	bhi	24240 <CScheduler::Yield()+0x98>
   241ec:	e7940100 	ldr	r0, [r4, r0, lsl #2]
   241f0:	e3500000 	cmp	r0, #0
   241f4:	0a000015 	beq	24250 <CScheduler::Yield()+0xa8>
   241f8:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   241fc:	e1530000 	cmp	r3, r0
   24200:	0a00000c 	beq	24238 <CScheduler::Yield()+0x90>
   24204:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   24208:	e283500c 	add	r5, r3, #12
   2420c:	e3520000 	cmp	r2, #0
   24210:	e5840054 	str	r0, [r4, #84]	; 0x54
   24214:	e280100c 	add	r1, r0, #12
   24218:	0a000002 	beq	24228 <CScheduler::Yield()+0x80>
   2421c:	e58d1004 	str	r1, [sp, #4]
   24220:	e12fff32 	blx	r2
   24224:	e59d1004 	ldr	r1, [sp, #4]
   24228:	e1a00005 	mov	r0, r5
   2422c:	e28dd00c 	add	sp, sp, #12
   24230:	e8bd4030 	pop	{r4, r5, lr}
   24234:	ea000073 	b	24408 <TaskSwitch>
   24238:	e28dd00c 	add	sp, sp, #12
   2423c:	e8bd8030 	pop	{r4, r5, pc}
   24240:	e3a0203a 	mov	r2, #58	; 0x3a
   24244:	e59f1014 	ldr	r1, [pc, #20]	; 24260 <CScheduler::Yield()+0xb8>
   24248:	e59f0018 	ldr	r0, [pc, #24]	; 24268 <CScheduler::Yield()+0xc0>
   2424c:	eb00010c 	bl	24684 <assertion_failed>
   24250:	e3a0203c 	mov	r2, #60	; 0x3c
   24254:	e59f1004 	ldr	r1, [pc, #4]	; 24260 <CScheduler::Yield()+0xb8>
   24258:	e59f000c 	ldr	r0, [pc, #12]	; 2426c <CScheduler::Yield()+0xc4>
   2425c:	eb000108 	bl	24684 <assertion_failed>
   24260:	00044528 	.word	0x00044528
   24264:	00044610 	.word	0x00044610
   24268:	00044620 	.word	0x00044620
   2426c:	00044638 	.word	0x00044638

00024270 <CScheduler::usSleep(unsigned int)>:
   24270:	e92d4070 	push	{r4, r5, r6, lr}
   24274:	e2514000 	subs	r4, r1, #0
   24278:	08bd8070 	popeq	{r4, r5, r6, pc}
   2427c:	e1a05000 	mov	r5, r0
   24280:	eb0016cb 	bl	29db4 <CTimer::Get()>
   24284:	eb001411 	bl	292d0 <CTimer::GetClockTicks()>
   24288:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   2428c:	e3530000 	cmp	r3, #0
   24290:	0a000009 	beq	242bc <CScheduler::usSleep(unsigned int)+0x4c>
   24294:	e5d32004 	ldrb	r2, [r3, #4]
   24298:	e3520000 	cmp	r2, #0
   2429c:	1a00000a 	bne	242cc <CScheduler::usSleep(unsigned int)+0x5c>
   242a0:	e3a02002 	mov	r2, #2
   242a4:	e0841000 	add	r1, r4, r0
   242a8:	e5831008 	str	r1, [r3, #8]
   242ac:	e1a00005 	mov	r0, r5
   242b0:	e8bd4070 	pop	{r4, r5, r6, lr}
   242b4:	e5c32004 	strb	r2, [r3, #4]
   242b8:	eaffffba 	b	241a8 <CScheduler::Yield()>
   242bc:	e3a0206e 	mov	r2, #110	; 0x6e
   242c0:	e59f1014 	ldr	r1, [pc, #20]	; 242dc <CScheduler::usSleep(unsigned int)+0x6c>
   242c4:	e59f0014 	ldr	r0, [pc, #20]	; 242e0 <CScheduler::usSleep(unsigned int)+0x70>
   242c8:	eb0000ed 	bl	24684 <assertion_failed>
   242cc:	e3a0206f 	mov	r2, #111	; 0x6f
   242d0:	e59f1004 	ldr	r1, [pc, #4]	; 242dc <CScheduler::usSleep(unsigned int)+0x6c>
   242d4:	e59f0008 	ldr	r0, [pc, #8]	; 242e4 <CScheduler::usSleep(unsigned int)+0x74>
   242d8:	eb0000e9 	bl	24684 <assertion_failed>
   242dc:	00044528 	.word	0x00044528
   242e0:	00044644 	.word	0x00044644
   242e4:	00044654 	.word	0x00044654

000242e8 <CScheduler::Sleep(unsigned int)>:
   242e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   242ec:	e59f6048 	ldr	r6, [pc, #72]	; 2433c <CScheduler::Sleep(unsigned int)+0x54>
   242f0:	e1a04001 	mov	r4, r1
   242f4:	e1510006 	cmp	r1, r6
   242f8:	e1a05000 	mov	r5, r0
   242fc:	9a000007 	bls	24320 <CScheduler::Sleep(unsigned int)+0x38>
   24300:	e59f7038 	ldr	r7, [pc, #56]	; 24340 <CScheduler::Sleep(unsigned int)+0x58>
   24304:	e2444c07 	sub	r4, r4, #1792	; 0x700
   24308:	e1a01007 	mov	r1, r7
   2430c:	e1a00005 	mov	r0, r5
   24310:	e2444008 	sub	r4, r4, #8
   24314:	ebffffd5 	bl	24270 <CScheduler::usSleep(unsigned int)>
   24318:	e1540006 	cmp	r4, r6
   2431c:	8afffff8 	bhi	24304 <CScheduler::Sleep(unsigned int)+0x1c>
   24320:	e0641284 	rsb	r1, r4, r4, lsl #5
   24324:	e0611301 	rsb	r1, r1, r1, lsl #6
   24328:	e0841181 	add	r1, r4, r1, lsl #3
   2432c:	e1a00005 	mov	r0, r5
   24330:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   24334:	e1a01301 	lsl	r1, r1, #6
   24338:	eaffffcc 	b	24270 <CScheduler::usSleep(unsigned int)>
   2433c:	00000708 	.word	0x00000708
   24340:	6b49d200 	.word	0x6b49d200

00024344 <CScheduler::MsSleep(unsigned int)>:
   24344:	e3510000 	cmp	r1, #0
   24348:	012fff1e 	bxeq	lr
   2434c:	e0613281 	rsb	r3, r1, r1, lsl #5
   24350:	e0811103 	add	r1, r1, r3, lsl #2
   24354:	e1a01181 	lsl	r1, r1, #3
   24358:	eaffffc4 	b	24270 <CScheduler::usSleep(unsigned int)>

0002435c <CScheduler::BlockTask(CTask**)>:
   2435c:	e3510000 	cmp	r1, #0
   24360:	e92d4010 	push	{r4, lr}
   24364:	0a00000a 	beq	24394 <CScheduler::BlockTask(CTask**)+0x38>
   24368:	e5903054 	ldr	r3, [r0, #84]	; 0x54
   2436c:	e3530000 	cmp	r3, #0
   24370:	e5813000 	str	r3, [r1]
   24374:	0a00000a 	beq	243a4 <CScheduler::BlockTask(CTask**)+0x48>
   24378:	e5d32004 	ldrb	r2, [r3, #4]
   2437c:	e3520000 	cmp	r2, #0
   24380:	1a00000b 	bne	243b4 <CScheduler::BlockTask(CTask**)+0x58>
   24384:	e8bd4010 	pop	{r4, lr}
   24388:	e3a02001 	mov	r2, #1
   2438c:	e5c32004 	strb	r2, [r3, #4]
   24390:	eaffff84 	b	241a8 <CScheduler::Yield()>
   24394:	e3a020b7 	mov	r2, #183	; 0xb7
   24398:	e59f1024 	ldr	r1, [pc, #36]	; 243c4 <CScheduler::BlockTask(CTask**)+0x68>
   2439c:	e59f0024 	ldr	r0, [pc, #36]	; 243c8 <CScheduler::BlockTask(CTask**)+0x6c>
   243a0:	eb0000b7 	bl	24684 <assertion_failed>
   243a4:	e3a020ba 	mov	r2, #186	; 0xba
   243a8:	e59f1014 	ldr	r1, [pc, #20]	; 243c4 <CScheduler::BlockTask(CTask**)+0x68>
   243ac:	e59f0018 	ldr	r0, [pc, #24]	; 243cc <CScheduler::BlockTask(CTask**)+0x70>
   243b0:	eb0000b3 	bl	24684 <assertion_failed>
   243b4:	e3a020bb 	mov	r2, #187	; 0xbb
   243b8:	e59f1004 	ldr	r1, [pc, #4]	; 243c4 <CScheduler::BlockTask(CTask**)+0x68>
   243bc:	e59f000c 	ldr	r0, [pc, #12]	; 243d0 <CScheduler::BlockTask(CTask**)+0x74>
   243c0:	eb0000af 	bl	24684 <assertion_failed>
   243c4:	00044528 	.word	0x00044528
   243c8:	000445dc 	.word	0x000445dc
   243cc:	00044644 	.word	0x00044644
   243d0:	00044654 	.word	0x00044654

000243d4 <CScheduler::Get()>:
   243d4:	e59f301c 	ldr	r3, [pc, #28]	; 243f8 <CScheduler::Get()+0x24>
   243d8:	e5930000 	ldr	r0, [r3]
   243dc:	e3500000 	cmp	r0, #0
   243e0:	112fff1e 	bxne	lr
   243e4:	e92d4010 	push	{r4, lr}
   243e8:	e59f200c 	ldr	r2, [pc, #12]	; 243fc <CScheduler::Get()+0x28>
   243ec:	e59f100c 	ldr	r1, [pc, #12]	; 24400 <CScheduler::Get()+0x2c>
   243f0:	e59f000c 	ldr	r0, [pc, #12]	; 24404 <CScheduler::Get()+0x30>
   243f4:	eb0000a2 	bl	24684 <assertion_failed>
   243f8:	0004da90 	.word	0x0004da90
   243fc:	0000010d 	.word	0x0000010d
   24400:	00044528 	.word	0x00044528
   24404:	00043274 	.word	0x00043274

00024408 <TaskSwitch>:
   24408:	eef82a10 	vmrs	r2, fpexc
   2440c:	eef13a10 	vmrs	r3, fpscr
   24410:	e8a07ffd 	stmia	r0!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   24414:	ec800b20 	vstmia	r0, {d0-d15}
   24418:	e8b17ffd 	ldm	r1!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   2441c:	eee82a10 	vmsr	fpexc, r2
   24420:	eee13a10 	vmsr	fpscr, r3
   24424:	ec910b20 	vldmia	r1, {d0-d15}
   24428:	e12fff1e 	bx	lr

0002442c <CSynchronizationEvent::CSynchronizationEvent(bool)>:
   2442c:	e3a02000 	mov	r2, #0
   24430:	e5c01000 	strb	r1, [r0]
   24434:	e5802004 	str	r2, [r0, #4]
   24438:	e12fff1e 	bx	lr

0002443c <CSynchronizationEvent::~CSynchronizationEvent()>:
   2443c:	e5903004 	ldr	r3, [r0, #4]
   24440:	e3530000 	cmp	r3, #0
   24444:	012fff1e 	bxeq	lr
   24448:	e3a02023 	mov	r2, #35	; 0x23
   2444c:	e92d4010 	push	{r4, lr}
   24450:	e59f1004 	ldr	r1, [pc, #4]	; 2445c <CSynchronizationEvent::~CSynchronizationEvent()+0x20>
   24454:	e59f0004 	ldr	r0, [pc, #4]	; 24460 <CSynchronizationEvent::~CSynchronizationEvent()+0x24>
   24458:	eb000089 	bl	24684 <assertion_failed>
   2445c:	00044688 	.word	0x00044688
   24460:	000446a4 	.word	0x000446a4

00024464 <CSynchronizationEvent::GetState()>:
   24464:	e5d00000 	ldrb	r0, [r0]
   24468:	e12fff1e 	bx	lr

0002446c <CSynchronizationEvent::Clear()>:
   2446c:	e3a03000 	mov	r3, #0
   24470:	e5c03000 	strb	r3, [r0]
   24474:	e12fff1e 	bx	lr

00024478 <CSynchronizationEvent::Set()>:
   24478:	e5d03000 	ldrb	r3, [r0]
   2447c:	e3530000 	cmp	r3, #0
   24480:	112fff1e 	bxne	lr
   24484:	e3a02001 	mov	r2, #1
   24488:	e5903004 	ldr	r3, [r0, #4]
   2448c:	e92d4010 	push	{r4, lr}
   24490:	e3530000 	cmp	r3, #0
   24494:	e1a04000 	mov	r4, r0
   24498:	e5c02000 	strb	r2, [r0]
   2449c:	08bd8010 	popeq	{r4, pc}
   244a0:	ebffffcb 	bl	243d4 <CScheduler::Get()>
   244a4:	e2841004 	add	r1, r4, #4
   244a8:	e8bd4010 	pop	{r4, lr}
   244ac:	eafffee4 	b	24044 <CScheduler::WakeTask(CTask**)>

000244b0 <CSynchronizationEvent::Wait()>:
   244b0:	e5d03000 	ldrb	r3, [r0]
   244b4:	e3530000 	cmp	r3, #0
   244b8:	112fff1e 	bxne	lr
   244bc:	e5903004 	ldr	r3, [r0, #4]
   244c0:	e92d4010 	push	{r4, lr}
   244c4:	e3530000 	cmp	r3, #0
   244c8:	e1a04000 	mov	r4, r0
   244cc:	1a000009 	bne	244f8 <CSynchronizationEvent::Wait()+0x48>
   244d0:	ebffffbf 	bl	243d4 <CScheduler::Get()>
   244d4:	e2841004 	add	r1, r4, #4
   244d8:	ebffff9f 	bl	2435c <CScheduler::BlockTask(CTask**)>
   244dc:	e5d43000 	ldrb	r3, [r4]
   244e0:	e3530000 	cmp	r3, #0
   244e4:	18bd8010 	popne	{r4, pc}
   244e8:	e3a0204c 	mov	r2, #76	; 0x4c
   244ec:	e59f1014 	ldr	r1, [pc, #20]	; 24508 <CSynchronizationEvent::Wait()+0x58>
   244f0:	e59f0014 	ldr	r0, [pc, #20]	; 2450c <CSynchronizationEvent::Wait()+0x5c>
   244f4:	eb000062 	bl	24684 <assertion_failed>
   244f8:	e3a02049 	mov	r2, #73	; 0x49
   244fc:	e59f1004 	ldr	r1, [pc, #4]	; 24508 <CSynchronizationEvent::Wait()+0x58>
   24500:	e59f0008 	ldr	r0, [pc, #8]	; 24510 <CSynchronizationEvent::Wait()+0x60>
   24504:	eb00005e 	bl	24684 <assertion_failed>
   24508:	00044688 	.word	0x00044688
   2450c:	000446b8 	.word	0x000446b8
   24510:	000446a4 	.word	0x000446a4

00024514 <CActLED::CActLED(bool)>:
   24514:	e3a03000 	mov	r3, #0
   24518:	e59f2088 	ldr	r2, [pc, #136]	; 245a8 <CActLED::CActLED(bool)+0x94>
   2451c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24520:	e5803000 	str	r3, [r0]
   24524:	e5803004 	str	r3, [r0, #4]
   24528:	e1a06001 	mov	r6, r1
   2452c:	e5820000 	str	r0, [r2]
   24530:	e1a05000 	mov	r5, r0
   24534:	eb000c3f 	bl	27638 <CMachineInfo::Get()>
   24538:	eb000b6c 	bl	272f0 <CMachineInfo::GetActLEDInfo() const>
   2453c:	e2107080 	ands	r7, r0, #128	; 0x80
   24540:	e1a04000 	mov	r4, r0
   24544:	0a00000e 	beq	24584 <CActLED::CActLED(bool)+0x70>
   24548:	e3a00014 	mov	r0, #20
   2454c:	eb001a53 	bl	2aea0 <operator new(unsigned int)>
   24550:	e1a07000 	mov	r7, r0
   24554:	e1a02006 	mov	r2, r6
   24558:	e204103f 	and	r1, r4, #63	; 0x3f
   2455c:	eb001880 	bl	2a764 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   24560:	e5857004 	str	r7, [r5, #4]
   24564:	e1a04324 	lsr	r4, r4, #6
   24568:	e2244001 	eor	r4, r4, #1
   2456c:	e2044001 	and	r4, r4, #1
   24570:	e1a00005 	mov	r0, r5
   24574:	e5c54008 	strb	r4, [r5, #8]
   24578:	eb00001c 	bl	245f0 <CActLED::Off()>
   2457c:	e1a00005 	mov	r0, r5
   24580:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24584:	e3a00028 	mov	r0, #40	; 0x28
   24588:	eb001a44 	bl	2aea0 <operator new(unsigned int)>
   2458c:	e1a06000 	mov	r6, r0
   24590:	e1a03007 	mov	r3, r7
   24594:	e3a02001 	mov	r2, #1
   24598:	e204103f 	and	r1, r4, #63	; 0x3f
   2459c:	eb0003a4 	bl	25434 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   245a0:	e5856000 	str	r6, [r5]
   245a4:	eaffffee 	b	24564 <CActLED::CActLED(bool)+0x50>
   245a8:	0004da94 	.word	0x0004da94

000245ac <CActLED::~CActLED()>:
   245ac:	e3a02000 	mov	r2, #0
   245b0:	e59f3004 	ldr	r3, [pc, #4]	; 245bc <CActLED::~CActLED()+0x10>
   245b4:	e5832000 	str	r2, [r3]
   245b8:	e12fff1e 	bx	lr
   245bc:	0004da94 	.word	0x0004da94

000245c0 <CActLED::On()>:
   245c0:	e5903000 	ldr	r3, [r0]
   245c4:	e3530000 	cmp	r3, #0
   245c8:	0a000002 	beq	245d8 <CActLED::On()+0x18>
   245cc:	e5d01008 	ldrb	r1, [r0, #8]
   245d0:	e1a00003 	mov	r0, r3
   245d4:	ea00043e 	b	256d4 <CGPIOPin::Write(unsigned int)>
   245d8:	e5903004 	ldr	r3, [r0, #4]
   245dc:	e3530000 	cmp	r3, #0
   245e0:	012fff1e 	bxeq	lr
   245e4:	e5d01008 	ldrb	r1, [r0, #8]
   245e8:	e1a00003 	mov	r0, r3
   245ec:	ea0018b9 	b	2a8d8 <CVirtualGPIOPin::Write(unsigned int)>

000245f0 <CActLED::Off()>:
   245f0:	e5903000 	ldr	r3, [r0]
   245f4:	e3530000 	cmp	r3, #0
   245f8:	0a000003 	beq	2460c <CActLED::Off()+0x1c>
   245fc:	e5d01008 	ldrb	r1, [r0, #8]
   24600:	e1a00003 	mov	r0, r3
   24604:	e2211001 	eor	r1, r1, #1
   24608:	ea000431 	b	256d4 <CGPIOPin::Write(unsigned int)>
   2460c:	e5903004 	ldr	r3, [r0, #4]
   24610:	e3530000 	cmp	r3, #0
   24614:	012fff1e 	bxeq	lr
   24618:	e5d01008 	ldrb	r1, [r0, #8]
   2461c:	e1a00003 	mov	r0, r3
   24620:	e2211001 	eor	r1, r1, #1
   24624:	ea0018ab 	b	2a8d8 <CVirtualGPIOPin::Write(unsigned int)>

00024628 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   24628:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2462c:	e2516000 	subs	r6, r1, #0
   24630:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   24634:	e1a05000 	mov	r5, r0
   24638:	e1a07002 	mov	r7, r2
   2463c:	e1a08003 	mov	r8, r3
   24640:	e3a04001 	mov	r4, #1
   24644:	e1a00005 	mov	r0, r5
   24648:	ebffffdc 	bl	245c0 <CActLED::On()>
   2464c:	e1a00007 	mov	r0, r7
   24650:	eb0015a2 	bl	29ce0 <CTimer::SimpleMsDelay(unsigned int)>
   24654:	e1a00005 	mov	r0, r5
   24658:	ebffffe4 	bl	245f0 <CActLED::Off()>
   2465c:	e2844001 	add	r4, r4, #1
   24660:	e1a00008 	mov	r0, r8
   24664:	eb00159d 	bl	29ce0 <CTimer::SimpleMsDelay(unsigned int)>
   24668:	e1560004 	cmp	r6, r4
   2466c:	2afffff4 	bcs	24644 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
   24670:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00024674 <CActLED::Get()>:
   24674:	e59f3004 	ldr	r3, [pc, #4]	; 24680 <CActLED::Get()+0xc>
   24678:	e5930000 	ldr	r0, [r3]
   2467c:	e12fff1e 	bx	lr
   24680:	0004da94 	.word	0x0004da94

00024684 <assertion_failed>:
   24684:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   24688:	e24dd024 	sub	sp, sp, #36	; 0x24
   2468c:	e1a05000 	mov	r5, r0
   24690:	e1a04001 	mov	r4, r1
   24694:	e58d200c 	str	r2, [sp, #12]
   24698:	e1a0600d 	mov	r6, sp
   2469c:	eb001e89 	bl	2c0c8 <CInterruptSystem::DisableFIQ()>
   246a0:	f1080040 	cpsie	f
   246a4:	e28d0010 	add	r0, sp, #16
   246a8:	eb000ccd 	bl	279e4 <CString::CString()>
   246ac:	e1a02004 	mov	r2, r4
   246b0:	e59d300c 	ldr	r3, [sp, #12]
   246b4:	e59f1044 	ldr	r1, [pc, #68]	; 24700 <assertion_failed+0x7c>
   246b8:	e28d0010 	add	r0, sp, #16
   246bc:	eb001212 	bl	28f0c <CString::Format(char const*, ...)>
   246c0:	e28d0010 	add	r0, sp, #16
   246c4:	eb000cde 	bl	27a44 <CString::operator char const*() const>
   246c8:	e1a01000 	mov	r1, r0
   246cc:	e1a00006 	mov	r0, r6
   246d0:	eb0001a0 	bl	24d58 <debug_stacktrace(unsigned int const*, char const*)>
   246d4:	eb0008d2 	bl	26a24 <CLogger::Get()>
   246d8:	e1a04000 	mov	r4, r0
   246dc:	e28d0010 	add	r0, sp, #16
   246e0:	eb000cd7 	bl	27a44 <CString::operator char const*() const>
   246e4:	e3a02000 	mov	r2, #0
   246e8:	e1a01000 	mov	r1, r0
   246ec:	e59f3010 	ldr	r3, [pc, #16]	; 24704 <assertion_failed+0x80>
   246f0:	e1a00004 	mov	r0, r4
   246f4:	e58d5000 	str	r5, [sp]
   246f8:	eb00080b 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   246fc:	eafffffe 	b	246fc <assertion_failed+0x78>
   24700:	000446c4 	.word	0x000446c4
   24704:	000446cc 	.word	0x000446cc

00024708 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   24708:	e92d4010 	push	{r4, lr}
   2470c:	e1a04000 	mov	r4, r0
   24710:	e1a02001 	mov	r2, r1
   24714:	e3a01008 	mov	r1, #8
   24718:	eb001f07 	bl	2c33c <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   2471c:	e1a00004 	mov	r0, r4
   24720:	e8bd8010 	pop	{r4, pc}

00024724 <CBcmPropertyTags::~CBcmPropertyTags()>:
   24724:	e92d4010 	push	{r4, lr}
   24728:	e1a04000 	mov	r4, r0
   2472c:	eb001f05 	bl	2c348 <CBcmMailBox::~CBcmMailBox()>
   24730:	e1a00004 	mov	r0, r4
   24734:	e8bd8010 	pop	{r4, pc}

00024738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   24738:	e92d4070 	push	{r4, r5, r6, lr}
   2473c:	e2524000 	subs	r4, r2, #0
   24740:	e59de010 	ldr	lr, [sp, #16]
   24744:	0a00002f 	beq	24808 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xd0>
   24748:	e353000f 	cmp	r3, #15
   2474c:	9a000031 	bls	24818 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xe0>
   24750:	e3ce2102 	bic	r2, lr, #-2147483648	; 0x80000000
   24754:	e5c4e008 	strb	lr, [r4, #8]
   24758:	e1a0e422 	lsr	lr, r2, #8
   2475c:	e243c00c 	sub	ip, r3, #12
   24760:	e5c4e009 	strb	lr, [r4, #9]
   24764:	e1a0e822 	lsr	lr, r2, #16
   24768:	e5c4e00a 	strb	lr, [r4, #10]
   2476c:	e1a02c22 	lsr	r2, r2, #24
   24770:	e1a0e42c 	lsr	lr, ip, #8
   24774:	e5c41000 	strb	r1, [r4]
   24778:	e5c4200b 	strb	r2, [r4, #11]
   2477c:	e1a0582c 	lsr	r5, ip, #16
   24780:	e1a02003 	mov	r2, r3
   24784:	e5c4c004 	strb	ip, [r4, #4]
   24788:	e1a03821 	lsr	r3, r1, #16
   2478c:	e1a0cc2c 	lsr	ip, ip, #24
   24790:	e5c4e005 	strb	lr, [r4, #5]
   24794:	e1a0e421 	lsr	lr, r1, #8
   24798:	e1a01c21 	lsr	r1, r1, #24
   2479c:	e5c41003 	strb	r1, [r4, #3]
   247a0:	e5c45006 	strb	r5, [r4, #6]
   247a4:	e1a01004 	mov	r1, r4
   247a8:	e5c4c007 	strb	ip, [r4, #7]
   247ac:	e5c4e001 	strb	lr, [r4, #1]
   247b0:	e5c43002 	strb	r3, [r4, #2]
   247b4:	eb00001c 	bl	2482c <CBcmPropertyTags::GetTags(void*, unsigned int)>
   247b8:	e3500000 	cmp	r0, #0
   247bc:	08bd8070 	popeq	{r4, r5, r6, pc}
   247c0:	e5d42009 	ldrb	r2, [r4, #9]
   247c4:	e5d43008 	ldrb	r3, [r4, #8]
   247c8:	e5d4100a 	ldrb	r1, [r4, #10]
   247cc:	e1833402 	orr	r3, r3, r2, lsl #8
   247d0:	e5d4200b 	ldrb	r2, [r4, #11]
   247d4:	e1833801 	orr	r3, r3, r1, lsl #16
   247d8:	e1833c02 	orr	r3, r3, r2, lsl #24
   247dc:	e3c32102 	bic	r2, r3, #-2147483648	; 0x80000000
   247e0:	e2520000 	subs	r0, r2, #0
   247e4:	e1a0c422 	lsr	ip, r2, #8
   247e8:	e1a01822 	lsr	r1, r2, #16
   247ec:	e1a02c22 	lsr	r2, r2, #24
   247f0:	13a00001 	movne	r0, #1
   247f4:	e5c43008 	strb	r3, [r4, #8]
   247f8:	e5c4c009 	strb	ip, [r4, #9]
   247fc:	e5c4100a 	strb	r1, [r4, #10]
   24800:	e5c4200b 	strb	r2, [r4, #11]
   24804:	e8bd8070 	pop	{r4, r5, r6, pc}
   24808:	e59f1018 	ldr	r1, [pc, #24]	; 24828 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   2480c:	e3a02033 	mov	r2, #51	; 0x33
   24810:	e2810014 	add	r0, r1, #20
   24814:	ebffff9a 	bl	24684 <assertion_failed>
   24818:	e59f1008 	ldr	r1, [pc, #8]	; 24828 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   2481c:	e3a02034 	mov	r2, #52	; 0x34
   24820:	e2810020 	add	r0, r1, #32
   24824:	ebffff96 	bl	24684 <assertion_failed>
   24828:	000446e4 	.word	0x000446e4

0002482c <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   2482c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24830:	e2519000 	subs	r9, r1, #0
   24834:	0a000034 	beq	2490c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
   24838:	e352000f 	cmp	r2, #15
   2483c:	e1a05002 	mov	r5, r2
   24840:	9a000035 	bls	2491c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
   24844:	e2126003 	ands	r6, r2, #3
   24848:	e282800c 	add	r8, r2, #12
   2484c:	1a000036 	bne	2492c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x100>
   24850:	e1a07000 	mov	r7, r0
   24854:	e1a00006 	mov	r0, r6
   24858:	eb001c7e 	bl	2ba58 <CMemorySystem::GetCoherentPage(unsigned int)>
   2485c:	e1a01428 	lsr	r1, r8, #8
   24860:	e1a02828 	lsr	r2, r8, #16
   24864:	e1a03c28 	lsr	r3, r8, #24
   24868:	e280a008 	add	sl, r0, #8
   2486c:	e5c08000 	strb	r8, [r0]
   24870:	e5c06004 	strb	r6, [r0, #4]
   24874:	e5c06005 	strb	r6, [r0, #5]
   24878:	e5c06006 	strb	r6, [r0, #6]
   2487c:	e5c06007 	strb	r6, [r0, #7]
   24880:	e5c01001 	strb	r1, [r0, #1]
   24884:	e5c02002 	strb	r2, [r0, #2]
   24888:	e5c03003 	strb	r3, [r0, #3]
   2488c:	e1a04000 	mov	r4, r0
   24890:	e1a02005 	mov	r2, r5
   24894:	e1a0000a 	mov	r0, sl
   24898:	e1a01009 	mov	r1, r9
   2489c:	eb001799 	bl	2a708 <memcpy>
   248a0:	e78a6005 	str	r6, [sl, r5]
   248a4:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   248a8:	e3c48103 	bic	r8, r4, #-1073741824	; 0xc0000000
   248ac:	e3888101 	orr	r8, r8, #1073741824	; 0x40000000
   248b0:	e1a00007 	mov	r0, r7
   248b4:	e1a01008 	mov	r1, r8
   248b8:	eb001ea3 	bl	2c34c <CBcmMailBox::WriteRead(unsigned int)>
   248bc:	e1500008 	cmp	r0, r8
   248c0:	0a000001 	beq	248cc <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
   248c4:	e3a00000 	mov	r0, #0
   248c8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   248cc:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   248d0:	e5d42005 	ldrb	r2, [r4, #5]
   248d4:	e5d43004 	ldrb	r3, [r4, #4]
   248d8:	e5d41006 	ldrb	r1, [r4, #6]
   248dc:	e1833402 	orr	r3, r3, r2, lsl #8
   248e0:	e5d42007 	ldrb	r2, [r4, #7]
   248e4:	e1833801 	orr	r3, r3, r1, lsl #16
   248e8:	e1833c02 	orr	r3, r3, r2, lsl #24
   248ec:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   248f0:	1afffff3 	bne	248c4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x98>
   248f4:	e1a02005 	mov	r2, r5
   248f8:	e1a0100a 	mov	r1, sl
   248fc:	e1a00009 	mov	r0, r9
   24900:	eb001780 	bl	2a708 <memcpy>
   24904:	e3a00001 	mov	r0, #1
   24908:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2490c:	e59f1028 	ldr	r1, [pc, #40]	; 2493c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   24910:	e3a0204b 	mov	r2, #75	; 0x4b
   24914:	e2810048 	add	r0, r1, #72	; 0x48
   24918:	ebffff59 	bl	24684 <assertion_failed>
   2491c:	e59f1018 	ldr	r1, [pc, #24]	; 2493c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   24920:	e3a0204c 	mov	r2, #76	; 0x4c
   24924:	e2810054 	add	r0, r1, #84	; 0x54
   24928:	ebffff55 	bl	24684 <assertion_failed>
   2492c:	e59f1008 	ldr	r1, [pc, #8]	; 2493c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   24930:	e3a0204e 	mov	r2, #78	; 0x4e
   24934:	e2810080 	add	r0, r1, #128	; 0x80
   24938:	ebffff51 	bl	24684 <assertion_failed>
   2493c:	000446e4 	.word	0x000446e4

00024940 <CClassAllocator::~CClassAllocator()>:
   24940:	e3a03000 	mov	r3, #0
   24944:	e92d4010 	push	{r4, lr}
   24948:	e1a04000 	mov	r4, r0
   2494c:	e590000c 	ldr	r0, [r0, #12]
   24950:	e5843010 	str	r3, [r4, #16]
   24954:	e1500003 	cmp	r0, r3
   24958:	0a000000 	beq	24960 <CClassAllocator::~CClassAllocator()+0x20>
   2495c:	eb001e45 	bl	2c278 <free>
   24960:	e1a00004 	mov	r0, r4
   24964:	e8bd8010 	pop	{r4, pc}

00024968 <CClassAllocator::Init(unsigned int, unsigned int)>:
   24968:	e3510001 	cmp	r1, #1
   2496c:	33a01001 	movcc	r1, #1
   24970:	e281101f 	add	r1, r1, #31
   24974:	e3c1100f 	bic	r1, r1, #15
   24978:	e3520000 	cmp	r2, #0
   2497c:	e92d4010 	push	{r4, lr}
   24980:	e5801000 	str	r1, [r0]
   24984:	0a00001b 	beq	249f8 <CClassAllocator::Init(unsigned int, unsigned int)+0x90>
   24988:	e1a04000 	mov	r4, r0
   2498c:	e5802004 	str	r2, [r0, #4]
   24990:	e0000192 	mul	r0, r2, r1
   24994:	eb001e31 	bl	2c260 <malloc>
   24998:	e3500000 	cmp	r0, #0
   2499c:	e584000c 	str	r0, [r4, #12]
   249a0:	0a000012 	beq	249f0 <CClassAllocator::Init(unsigned int, unsigned int)+0x88>
   249a4:	e210200f 	ands	r2, r0, #15
   249a8:	1a000016 	bne	24a08 <CClassAllocator::Init(unsigned int, unsigned int)+0xa0>
   249ac:	e5943004 	ldr	r3, [r4, #4]
   249b0:	e3530000 	cmp	r3, #0
   249b4:	08bd8010 	popeq	{r4, pc}
   249b8:	e5943010 	ldr	r3, [r4, #16]
   249bc:	e59fe054 	ldr	lr, [pc, #84]	; 24a18 <CClassAllocator::Init(unsigned int, unsigned int)+0xb0>
   249c0:	e1a01003 	mov	r1, r3
   249c4:	e5943000 	ldr	r3, [r4]
   249c8:	e0030293 	mul	r3, r3, r2
   249cc:	e780e003 	str	lr, [r0, r3]
   249d0:	e594c004 	ldr	ip, [r4, #4]
   249d4:	e2822001 	add	r2, r2, #1
   249d8:	e0803003 	add	r3, r0, r3
   249dc:	e15c0002 	cmp	ip, r2
   249e0:	e583100c 	str	r1, [r3, #12]
   249e4:	e5843010 	str	r3, [r4, #16]
   249e8:	8afffff4 	bhi	249c0 <CClassAllocator::Init(unsigned int, unsigned int)+0x58>
   249ec:	e8bd8010 	pop	{r4, pc}
   249f0:	e5840004 	str	r0, [r4, #4]
   249f4:	e8bd8010 	pop	{r4, pc}
   249f8:	e3a02055 	mov	r2, #85	; 0x55
   249fc:	e59f1018 	ldr	r1, [pc, #24]	; 24a1c <CClassAllocator::Init(unsigned int, unsigned int)+0xb4>
   24a00:	e59f0018 	ldr	r0, [pc, #24]	; 24a20 <CClassAllocator::Init(unsigned int, unsigned int)+0xb8>
   24a04:	ebffff1e 	bl	24684 <assertion_failed>
   24a08:	e3a0205f 	mov	r2, #95	; 0x5f
   24a0c:	e59f1008 	ldr	r1, [pc, #8]	; 24a1c <CClassAllocator::Init(unsigned int, unsigned int)+0xb4>
   24a10:	e59f000c 	ldr	r0, [pc, #12]	; 24a24 <CClassAllocator::Init(unsigned int, unsigned int)+0xbc>
   24a14:	ebffff1a 	bl	24684 <assertion_failed>
   24a18:	4f425350 	.word	0x4f425350
   24a1c:	0004477c 	.word	0x0004477c
   24a20:	00044790 	.word	0x00044790
   24a24:	000447a8 	.word	0x000447a8

00024a28 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>:
   24a28:	e92d4010 	push	{r4, lr}
   24a2c:	e3a0c000 	mov	ip, #0
   24a30:	e3a0e001 	mov	lr, #1
   24a34:	e1a04000 	mov	r4, r0
   24a38:	e5803008 	str	r3, [r0, #8]
   24a3c:	e580e018 	str	lr, [r0, #24]
   24a40:	e580c00c 	str	ip, [r0, #12]
   24a44:	e580c010 	str	ip, [r0, #16]
   24a48:	e5c0c014 	strb	ip, [r0, #20]
   24a4c:	ebffffc5 	bl	24968 <CClassAllocator::Init(unsigned int, unsigned int)>
   24a50:	e1a00004 	mov	r0, r4
   24a54:	e8bd8010 	pop	{r4, pc}

00024a58 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>:
   24a58:	e92d4010 	push	{r4, lr}
   24a5c:	e3a0c000 	mov	ip, #0
   24a60:	e3a0e001 	mov	lr, #1
   24a64:	e1a04000 	mov	r4, r0
   24a68:	e5803018 	str	r3, [r0, #24]
   24a6c:	e59d3008 	ldr	r3, [sp, #8]
   24a70:	e5c0e014 	strb	lr, [r0, #20]
   24a74:	e5803008 	str	r3, [r0, #8]
   24a78:	e580c00c 	str	ip, [r0, #12]
   24a7c:	e580c010 	str	ip, [r0, #16]
   24a80:	ebffffb8 	bl	24968 <CClassAllocator::Init(unsigned int, unsigned int)>
   24a84:	e1a00004 	mov	r0, r4
   24a88:	e8bd8010 	pop	{r4, pc}

00024a8c <CClassAllocator::Allocate()>:
   24a8c:	e92d4030 	push	{r4, r5, lr}
   24a90:	e5d03014 	ldrb	r3, [r0, #20]
   24a94:	e1a04000 	mov	r4, r0
   24a98:	e3530000 	cmp	r3, #0
   24a9c:	e24dd00c 	sub	sp, sp, #12
   24aa0:	0a000002 	beq	24ab0 <CClassAllocator::Allocate()+0x24>
   24aa4:	e5900018 	ldr	r0, [r0, #24]
   24aa8:	e3500000 	cmp	r0, #0
   24aac:	1a000015 	bne	24b08 <CClassAllocator::Allocate()+0x7c>
   24ab0:	e5945010 	ldr	r5, [r4, #16]
   24ab4:	e3550000 	cmp	r5, #0
   24ab8:	0a00001d 	beq	24b34 <CClassAllocator::Allocate()+0xa8>
   24abc:	e59f30a4 	ldr	r3, [pc, #164]	; 24b68 <CClassAllocator::Allocate()+0xdc>
   24ac0:	e5952000 	ldr	r2, [r5]
   24ac4:	e1520003 	cmp	r2, r3
   24ac8:	1a000022 	bne	24b58 <CClassAllocator::Allocate()+0xcc>
   24acc:	e3a03000 	mov	r3, #0
   24ad0:	e5d41014 	ldrb	r1, [r4, #20]
   24ad4:	e595200c 	ldr	r2, [r5, #12]
   24ad8:	e1510003 	cmp	r1, r3
   24adc:	e5842010 	str	r2, [r4, #16]
   24ae0:	e585300c 	str	r3, [r5, #12]
   24ae4:	1a000002 	bne	24af4 <CClassAllocator::Allocate()+0x68>
   24ae8:	e2850010 	add	r0, r5, #16
   24aec:	e28dd00c 	add	sp, sp, #12
   24af0:	e8bd8030 	pop	{r4, r5, pc}
   24af4:	e5943018 	ldr	r3, [r4, #24]
   24af8:	e3530000 	cmp	r3, #0
   24afc:	0afffff9 	beq	24ae8 <CClassAllocator::Allocate()+0x5c>
   24b00:	eb001c3d 	bl	2bbfc <LeaveCritical>
   24b04:	eafffff7 	b	24ae8 <CClassAllocator::Allocate()+0x5c>
   24b08:	eb001c11 	bl	2bb54 <EnterCritical>
   24b0c:	e5945010 	ldr	r5, [r4, #16]
   24b10:	e3550000 	cmp	r5, #0
   24b14:	1affffe8 	bne	24abc <CClassAllocator::Allocate()+0x30>
   24b18:	e5d43014 	ldrb	r3, [r4, #20]
   24b1c:	e3530000 	cmp	r3, #0
   24b20:	0a000003 	beq	24b34 <CClassAllocator::Allocate()+0xa8>
   24b24:	e5943018 	ldr	r3, [r4, #24]
   24b28:	e3530000 	cmp	r3, #0
   24b2c:	0a000000 	beq	24b34 <CClassAllocator::Allocate()+0xa8>
   24b30:	eb001c31 	bl	2bbfc <LeaveCritical>
   24b34:	eb0007ba 	bl	26a24 <CLogger::Get()>
   24b38:	e5943004 	ldr	r3, [r4, #4]
   24b3c:	e5941008 	ldr	r1, [r4, #8]
   24b40:	e3a02000 	mov	r2, #0
   24b44:	e58d3000 	str	r3, [sp]
   24b48:	e59f301c 	ldr	r3, [pc, #28]	; 24b6c <CClassAllocator::Allocate()+0xe0>
   24b4c:	eb0006f6 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24b50:	e3a00000 	mov	r0, #0
   24b54:	eaffffe4 	b	24aec <CClassAllocator::Allocate()+0x60>
   24b58:	e3a02082 	mov	r2, #130	; 0x82
   24b5c:	e59f100c 	ldr	r1, [pc, #12]	; 24b70 <CClassAllocator::Allocate()+0xe4>
   24b60:	e59f000c 	ldr	r0, [pc, #12]	; 24b74 <CClassAllocator::Allocate()+0xe8>
   24b64:	ebfffec6 	bl	24684 <assertion_failed>
   24b68:	4f425350 	.word	0x4f425350
   24b6c:	000447e4 	.word	0x000447e4
   24b70:	0004477c 	.word	0x0004477c
   24b74:	00044810 	.word	0x00044810

00024b78 <CClassAllocator::Free(void*)>:
   24b78:	e92d4070 	push	{r4, r5, r6, lr}
   24b7c:	e2514000 	subs	r4, r1, #0
   24b80:	0a00001e 	beq	24c00 <CClassAllocator::Free(void*)+0x88>
   24b84:	e59f30a4 	ldr	r3, [pc, #164]	; 24c30 <CClassAllocator::Free(void*)+0xb8>
   24b88:	e5142010 	ldr	r2, [r4, #-16]
   24b8c:	e2446010 	sub	r6, r4, #16
   24b90:	e1520003 	cmp	r2, r3
   24b94:	1a00001d 	bne	24c10 <CClassAllocator::Free(void*)+0x98>
   24b98:	e5143004 	ldr	r3, [r4, #-4]
   24b9c:	e3530000 	cmp	r3, #0
   24ba0:	1a00001e 	bne	24c20 <CClassAllocator::Free(void*)+0xa8>
   24ba4:	e5d03014 	ldrb	r3, [r0, #20]
   24ba8:	e1a05000 	mov	r5, r0
   24bac:	e3530000 	cmp	r3, #0
   24bb0:	0a000002 	beq	24bc0 <CClassAllocator::Free(void*)+0x48>
   24bb4:	e5900018 	ldr	r0, [r0, #24]
   24bb8:	e3500000 	cmp	r0, #0
   24bbc:	1a000003 	bne	24bd0 <CClassAllocator::Free(void*)+0x58>
   24bc0:	e5953010 	ldr	r3, [r5, #16]
   24bc4:	e5043004 	str	r3, [r4, #-4]
   24bc8:	e5856010 	str	r6, [r5, #16]
   24bcc:	e8bd8070 	pop	{r4, r5, r6, pc}
   24bd0:	eb001bdf 	bl	2bb54 <EnterCritical>
   24bd4:	e5d52014 	ldrb	r2, [r5, #20]
   24bd8:	e5953010 	ldr	r3, [r5, #16]
   24bdc:	e3520000 	cmp	r2, #0
   24be0:	e5043004 	str	r3, [r4, #-4]
   24be4:	e5856010 	str	r6, [r5, #16]
   24be8:	08bd8070 	popeq	{r4, r5, r6, pc}
   24bec:	e5950018 	ldr	r0, [r5, #24]
   24bf0:	e3500000 	cmp	r0, #0
   24bf4:	08bd8070 	popeq	{r4, r5, r6, pc}
   24bf8:	e8bd4070 	pop	{r4, r5, r6, lr}
   24bfc:	ea001bfe 	b	2bbfc <LeaveCritical>
   24c00:	e3a02090 	mov	r2, #144	; 0x90
   24c04:	e59f1028 	ldr	r1, [pc, #40]	; 24c34 <CClassAllocator::Free(void*)+0xbc>
   24c08:	e59f0028 	ldr	r0, [pc, #40]	; 24c38 <CClassAllocator::Free(void*)+0xc0>
   24c0c:	ebfffe9c 	bl	24684 <assertion_failed>
   24c10:	e3a02094 	mov	r2, #148	; 0x94
   24c14:	e59f1018 	ldr	r1, [pc, #24]	; 24c34 <CClassAllocator::Free(void*)+0xbc>
   24c18:	e59f001c 	ldr	r0, [pc, #28]	; 24c3c <CClassAllocator::Free(void*)+0xc4>
   24c1c:	ebfffe98 	bl	24684 <assertion_failed>
   24c20:	e3a02095 	mov	r2, #149	; 0x95
   24c24:	e59f1008 	ldr	r1, [pc, #8]	; 24c34 <CClassAllocator::Free(void*)+0xbc>
   24c28:	e59f0010 	ldr	r0, [pc, #16]	; 24c40 <CClassAllocator::Free(void*)+0xc8>
   24c2c:	ebfffe94 	bl	24684 <assertion_failed>
   24c30:	4f425350 	.word	0x4f425350
   24c34:	0004477c 	.word	0x0004477c
   24c38:	00044830 	.word	0x00044830
   24c3c:	0004483c 	.word	0x0004483c
   24c40:	00044858 	.word	0x00044858

00024c44 <debug_hexdump(void const*, unsigned int, char const*)>:
   24c44:	e3520000 	cmp	r2, #0
   24c48:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   24c4c:	e1a06001 	mov	r6, r1
   24c50:	e1a07000 	mov	r7, r0
   24c54:	e59f80f0 	ldr	r8, [pc, #240]	; 24d4c <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   24c58:	11a08002 	movne	r8, r2
   24c5c:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   24c60:	eb00076f 	bl	26a24 <CLogger::Get()>
   24c64:	e1a01008 	mov	r1, r8
   24c68:	e3a02004 	mov	r2, #4
   24c6c:	e1cd60f0 	strd	r6, [sp]
   24c70:	e59f30d8 	ldr	r3, [pc, #216]	; 24d50 <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   24c74:	eb0006ac 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24c78:	e3560000 	cmp	r6, #0
   24c7c:	0a000030 	beq	24d44 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
   24c80:	e3c6000f 	bic	r0, r6, #15
   24c84:	e1a04007 	mov	r4, r7
   24c88:	e0876006 	add	r6, r7, r6
   24c8c:	e59f90c0 	ldr	r9, [pc, #192]	; 24d54 <debug_hexdump(void const*, unsigned int, char const*)+0x110>
   24c90:	e0877000 	add	r7, r7, r0
   24c94:	ea000001 	b	24ca0 <debug_hexdump(void const*, unsigned int, char const*)+0x5c>
   24c98:	e1540006 	cmp	r4, r6
   24c9c:	0a000028 	beq	24d44 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
   24ca0:	eb00075f 	bl	26a24 <CLogger::Get()>
   24ca4:	e5d4300f 	ldrb	r3, [r4, #15]
   24ca8:	e5d45000 	ldrb	r5, [r4]
   24cac:	e58d3040 	str	r3, [sp, #64]	; 0x40
   24cb0:	e5d4300e 	ldrb	r3, [r4, #14]
   24cb4:	e6ffc074 	uxth	ip, r4
   24cb8:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   24cbc:	e5d4200d 	ldrb	r2, [r4, #13]
   24cc0:	e1a03009 	mov	r3, r9
   24cc4:	e58d2038 	str	r2, [sp, #56]	; 0x38
   24cc8:	e5d4100c 	ldrb	r1, [r4, #12]
   24ccc:	e3a02004 	mov	r2, #4
   24cd0:	e58d1034 	str	r1, [sp, #52]	; 0x34
   24cd4:	e5d4e00b 	ldrb	lr, [r4, #11]
   24cd8:	e1a01008 	mov	r1, r8
   24cdc:	e58de030 	str	lr, [sp, #48]	; 0x30
   24ce0:	e5d4e00a 	ldrb	lr, [r4, #10]
   24ce4:	e58de02c 	str	lr, [sp, #44]	; 0x2c
   24ce8:	e5d4e009 	ldrb	lr, [r4, #9]
   24cec:	e58de028 	str	lr, [sp, #40]	; 0x28
   24cf0:	e5d4e008 	ldrb	lr, [r4, #8]
   24cf4:	e58de024 	str	lr, [sp, #36]	; 0x24
   24cf8:	e5d4e007 	ldrb	lr, [r4, #7]
   24cfc:	e58de020 	str	lr, [sp, #32]
   24d00:	e5d4e006 	ldrb	lr, [r4, #6]
   24d04:	e58de01c 	str	lr, [sp, #28]
   24d08:	e5d4e005 	ldrb	lr, [r4, #5]
   24d0c:	e58de018 	str	lr, [sp, #24]
   24d10:	e5d4e004 	ldrb	lr, [r4, #4]
   24d14:	e58de014 	str	lr, [sp, #20]
   24d18:	e5d4e003 	ldrb	lr, [r4, #3]
   24d1c:	e58de010 	str	lr, [sp, #16]
   24d20:	e5d4e002 	ldrb	lr, [r4, #2]
   24d24:	e58de00c 	str	lr, [sp, #12]
   24d28:	e5d4e001 	ldrb	lr, [r4, #1]
   24d2c:	e98d4020 	stmib	sp, {r5, lr}
   24d30:	e58dc000 	str	ip, [sp]
   24d34:	eb00067c 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24d38:	e1540007 	cmp	r4, r7
   24d3c:	e2844010 	add	r4, r4, #16
   24d40:	1affffd4 	bne	24c98 <debug_hexdump(void const*, unsigned int, char const*)+0x54>
   24d44:	e28dd04c 	add	sp, sp, #76	; 0x4c
   24d48:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   24d4c:	00044900 	.word	0x00044900
   24d50:	0004486c 	.word	0x0004486c
   24d54:	00044894 	.word	0x00044894

00024d58 <debug_stacktrace(unsigned int const*, char const*)>:
   24d58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24d5c:	e3510000 	cmp	r1, #0
   24d60:	e59f7074 	ldr	r7, [pc, #116]	; 24ddc <debug_stacktrace(unsigned int const*, char const*)+0x84>
   24d64:	e3a04000 	mov	r4, #0
   24d68:	11a07001 	movne	r7, r1
   24d6c:	e59f606c 	ldr	r6, [pc, #108]	; 24de0 <debug_stacktrace(unsigned int const*, char const*)+0x88>
   24d70:	e59f806c 	ldr	r8, [pc, #108]	; 24de4 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
   24d74:	e24dd008 	sub	sp, sp, #8
   24d78:	e2405004 	sub	r5, r0, #4
   24d7c:	ea000002 	b	24d8c <debug_stacktrace(unsigned int const*, char const*)+0x34>
   24d80:	e2844001 	add	r4, r4, #1
   24d84:	e3540040 	cmp	r4, #64	; 0x40
   24d88:	0a000011 	beq	24dd4 <debug_stacktrace(unsigned int const*, char const*)+0x7c>
   24d8c:	e5b53004 	ldr	r3, [r5, #4]!
   24d90:	e3530902 	cmp	r3, #32768	; 0x8000
   24d94:	3afffff9 	bcc	24d80 <debug_stacktrace(unsigned int const*, char const*)+0x28>
   24d98:	e1530006 	cmp	r3, r6
   24d9c:	2afffff7 	bcs	24d80 <debug_stacktrace(unsigned int const*, char const*)+0x28>
   24da0:	e3130003 	tst	r3, #3
   24da4:	1afffff5 	bne	24d80 <debug_stacktrace(unsigned int const*, char const*)+0x28>
   24da8:	eb00071d 	bl	26a24 <CLogger::Get()>
   24dac:	e5952000 	ldr	r2, [r5]
   24db0:	e1a03008 	mov	r3, r8
   24db4:	e58d2004 	str	r2, [sp, #4]
   24db8:	e58d4000 	str	r4, [sp]
   24dbc:	e3a02004 	mov	r2, #4
   24dc0:	e1a01007 	mov	r1, r7
   24dc4:	e2844001 	add	r4, r4, #1
   24dc8:	eb000657 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24dcc:	e3540040 	cmp	r4, #64	; 0x40
   24dd0:	1affffed 	bne	24d8c <debug_stacktrace(unsigned int const*, char const*)+0x34>
   24dd4:	e28dd008 	add	sp, sp, #8
   24dd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24ddc:	00044900 	.word	0x00044900
   24de0:	0003e5bc 	.word	0x0003e5bc
   24de4:	000448ec 	.word	0x000448ec

00024de8 <CDevice::~CDevice()>:
   24de8:	e12fff1e 	bx	lr

00024dec <CDevice::Read(void*, unsigned int)>:
   24dec:	e3e00000 	mvn	r0, #0
   24df0:	e12fff1e 	bx	lr

00024df4 <CDevice::Seek(unsigned long long)>:
   24df4:	e3e00000 	mvn	r0, #0
   24df8:	e3e01000 	mvn	r1, #0
   24dfc:	e12fff1e 	bx	lr

00024e00 <CDevice::RemoveDevice()>:
   24e00:	e3a00000 	mov	r0, #0
   24e04:	e12fff1e 	bx	lr

00024e08 <CDevice::~CDevice()>:
   24e08:	e92d4010 	push	{r4, lr}
   24e0c:	e1a04000 	mov	r4, r0
   24e10:	e3a01004 	mov	r1, #4
   24e14:	eb00182f 	bl	2aed8 <operator delete(void*, unsigned int)>
   24e18:	e1a00004 	mov	r0, r4
   24e1c:	e8bd8010 	pop	{r4, pc}

00024e20 <CDevice::CDevice()>:
   24e20:	e59f3004 	ldr	r3, [pc, #4]	; 24e2c <CDevice::CDevice()+0xc>
   24e24:	e5803000 	str	r3, [r0]
   24e28:	e12fff1e 	bx	lr
   24e2c:	00044910 	.word	0x00044910

00024e30 <CDeviceNameService::CDeviceNameService()>:
   24e30:	e3a02000 	mov	r2, #0
   24e34:	e59f102c 	ldr	r1, [pc, #44]	; 24e68 <CDeviceNameService::CDeviceNameService()+0x38>
   24e38:	e5802000 	str	r2, [r0]
   24e3c:	e591c000 	ldr	ip, [r1]
   24e40:	e5802004 	str	r2, [r0, #4]
   24e44:	e15c0002 	cmp	ip, r2
   24e48:	1a000001 	bne	24e54 <CDeviceNameService::CDeviceNameService()+0x24>
   24e4c:	e5810000 	str	r0, [r1]
   24e50:	e12fff1e 	bx	lr
   24e54:	e3a0201f 	mov	r2, #31
   24e58:	e92d4010 	push	{r4, lr}
   24e5c:	e59f1008 	ldr	r1, [pc, #8]	; 24e6c <CDeviceNameService::CDeviceNameService()+0x3c>
   24e60:	e59f0008 	ldr	r0, [pc, #8]	; 24e70 <CDeviceNameService::CDeviceNameService()+0x40>
   24e64:	ebfffe06 	bl	24684 <assertion_failed>
   24e68:	0004da98 	.word	0x0004da98
   24e6c:	00044928 	.word	0x00044928
   24e70:	00044940 	.word	0x00044940

00024e74 <CDeviceNameService::~CDeviceNameService()>:
   24e74:	e92d4070 	push	{r4, r5, r6, lr}
   24e78:	e5904000 	ldr	r4, [r0]
   24e7c:	e1a05000 	mov	r5, r0
   24e80:	e3540000 	cmp	r4, #0
   24e84:	0a00000a 	beq	24eb4 <CDeviceNameService::~CDeviceNameService()+0x40>
   24e88:	e5940004 	ldr	r0, [r4, #4]
   24e8c:	e5944000 	ldr	r4, [r4]
   24e90:	e3500000 	cmp	r0, #0
   24e94:	0a000000 	beq	24e9c <CDeviceNameService::~CDeviceNameService()+0x28>
   24e98:	eb00180d 	bl	2aed4 <operator delete[](void*)>
   24e9c:	e3a01010 	mov	r1, #16
   24ea0:	e5950000 	ldr	r0, [r5]
   24ea4:	eb00180b 	bl	2aed8 <operator delete(void*, unsigned int)>
   24ea8:	e3540000 	cmp	r4, #0
   24eac:	e5854000 	str	r4, [r5]
   24eb0:	1afffff4 	bne	24e88 <CDeviceNameService::~CDeviceNameService()+0x14>
   24eb4:	e3a02000 	mov	r2, #0
   24eb8:	e59f3008 	ldr	r3, [pc, #8]	; 24ec8 <CDeviceNameService::~CDeviceNameService()+0x54>
   24ebc:	e1a00005 	mov	r0, r5
   24ec0:	e5832000 	str	r2, [r3]
   24ec4:	e8bd8070 	pop	{r4, r5, r6, pc}
   24ec8:	0004da98 	.word	0x0004da98

00024ecc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   24ecc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24ed0:	e1a05000 	mov	r5, r0
   24ed4:	e5900004 	ldr	r0, [r0, #4]
   24ed8:	e1a06001 	mov	r6, r1
   24edc:	e3500000 	cmp	r0, #0
   24ee0:	e1a07002 	mov	r7, r2
   24ee4:	e1a08003 	mov	r8, r3
   24ee8:	1a000017 	bne	24f4c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
   24eec:	e3a00010 	mov	r0, #16
   24ef0:	eb0017ea 	bl	2aea0 <operator new(unsigned int)>
   24ef4:	e3560000 	cmp	r6, #0
   24ef8:	e1a04000 	mov	r4, r0
   24efc:	0a000014 	beq	24f54 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
   24f00:	e1a00006 	mov	r0, r6
   24f04:	eb001404 	bl	29f1c <strlen>
   24f08:	e2800001 	add	r0, r0, #1
   24f0c:	eb0017e9 	bl	2aeb8 <operator new[](unsigned int)>
   24f10:	e1a01006 	mov	r1, r6
   24f14:	e5840004 	str	r0, [r4, #4]
   24f18:	eb0014a3 	bl	2a1ac <strcpy>
   24f1c:	e3570000 	cmp	r7, #0
   24f20:	0a00000f 	beq	24f64 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x98>
   24f24:	e5952004 	ldr	r2, [r5, #4]
   24f28:	e5953000 	ldr	r3, [r5]
   24f2c:	e3520000 	cmp	r2, #0
   24f30:	e5847008 	str	r7, [r4, #8]
   24f34:	e5c4800c 	strb	r8, [r4, #12]
   24f38:	e5843000 	str	r3, [r4]
   24f3c:	e5854000 	str	r4, [r5]
   24f40:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   24f44:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   24f48:	ea001b2b 	b	2bbfc <LeaveCritical>
   24f4c:	eb001b00 	bl	2bb54 <EnterCritical>
   24f50:	eaffffe5 	b	24eec <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
   24f54:	e3a0203b 	mov	r2, #59	; 0x3b
   24f58:	e59f1014 	ldr	r1, [pc, #20]	; 24f74 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   24f5c:	e59f0014 	ldr	r0, [pc, #20]	; 24f78 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xac>
   24f60:	ebfffdc7 	bl	24684 <assertion_failed>
   24f64:	e3a02040 	mov	r2, #64	; 0x40
   24f68:	e59f1004 	ldr	r1, [pc, #4]	; 24f74 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   24f6c:	e59f0008 	ldr	r0, [pc, #8]	; 24f7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
   24f70:	ebfffdc3 	bl	24684 <assertion_failed>
   24f74:	00044928 	.word	0x00044928
   24f78:	0003f5fc 	.word	0x0003f5fc
   24f7c:	0004494c 	.word	0x0004494c

00024f80 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   24f80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24f84:	e2515000 	subs	r5, r1, #0
   24f88:	0a000037 	beq	2506c <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
   24f8c:	e1a08000 	mov	r8, r0
   24f90:	e5900004 	ldr	r0, [r0, #4]
   24f94:	e1a07002 	mov	r7, r2
   24f98:	e3500000 	cmp	r0, #0
   24f9c:	1a000017 	bne	25000 <CDeviceNameService::RemoveDevice(char const*, bool)+0x80>
   24fa0:	e5984000 	ldr	r4, [r8]
   24fa4:	e3540000 	cmp	r4, #0
   24fa8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   24fac:	e3a06000 	mov	r6, #0
   24fb0:	ea00000b 	b	24fe4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
   24fb4:	e1a00005 	mov	r0, r5
   24fb8:	eb0013e1 	bl	29f44 <strcmp>
   24fbc:	e3500000 	cmp	r0, #0
   24fc0:	1a000002 	bne	24fd0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x50>
   24fc4:	e5d4300c 	ldrb	r3, [r4, #12]
   24fc8:	e1530007 	cmp	r3, r7
   24fcc:	0a000014 	beq	25024 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa4>
   24fd0:	e5943000 	ldr	r3, [r4]
   24fd4:	e1a06004 	mov	r6, r4
   24fd8:	e3530000 	cmp	r3, #0
   24fdc:	0a00000b 	beq	25010 <CDeviceNameService::RemoveDevice(char const*, bool)+0x90>
   24fe0:	e1a04003 	mov	r4, r3
   24fe4:	e5941004 	ldr	r1, [r4, #4]
   24fe8:	e3510000 	cmp	r1, #0
   24fec:	1afffff0 	bne	24fb4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
   24ff0:	e3a0205e 	mov	r2, #94	; 0x5e
   24ff4:	e59f1088 	ldr	r1, [pc, #136]	; 25084 <CDeviceNameService::RemoveDevice(char const*, bool)+0x104>
   24ff8:	e59f0088 	ldr	r0, [pc, #136]	; 25088 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
   24ffc:	ebfffda0 	bl	24684 <assertion_failed>
   25000:	eb001ad3 	bl	2bb54 <EnterCritical>
   25004:	e5984000 	ldr	r4, [r8]
   25008:	e3540000 	cmp	r4, #0
   2500c:	1affffe6 	bne	24fac <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
   25010:	e5983004 	ldr	r3, [r8, #4]
   25014:	e3530000 	cmp	r3, #0
   25018:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2501c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25020:	ea001af5 	b	2bbfc <LeaveCritical>
   25024:	e3560000 	cmp	r6, #0
   25028:	0a00000c 	beq	25060 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe0>
   2502c:	e5943000 	ldr	r3, [r4]
   25030:	e5863000 	str	r3, [r6]
   25034:	e5983004 	ldr	r3, [r8, #4]
   25038:	e3530000 	cmp	r3, #0
   2503c:	1a00000e 	bne	2507c <CDeviceNameService::RemoveDevice(char const*, bool)+0xfc>
   25040:	e5940004 	ldr	r0, [r4, #4]
   25044:	e3500000 	cmp	r0, #0
   25048:	0a000000 	beq	25050 <CDeviceNameService::RemoveDevice(char const*, bool)+0xd0>
   2504c:	eb0017a0 	bl	2aed4 <operator delete[](void*)>
   25050:	e1a00004 	mov	r0, r4
   25054:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25058:	e3a01010 	mov	r1, #16
   2505c:	ea00179d 	b	2aed8 <operator delete(void*, unsigned int)>
   25060:	e5943000 	ldr	r3, [r4]
   25064:	e5883000 	str	r3, [r8]
   25068:	eafffff1 	b	25034 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb4>
   2506c:	e3a02056 	mov	r2, #86	; 0x56
   25070:	e59f100c 	ldr	r1, [pc, #12]	; 25084 <CDeviceNameService::RemoveDevice(char const*, bool)+0x104>
   25074:	e59f0010 	ldr	r0, [pc, #16]	; 2508c <CDeviceNameService::RemoveDevice(char const*, bool)+0x10c>
   25078:	ebfffd81 	bl	24684 <assertion_failed>
   2507c:	eb001ade 	bl	2bbfc <LeaveCritical>
   25080:	eaffffee 	b	25040 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
   25084:	00044928 	.word	0x00044928
   25088:	0004495c 	.word	0x0004495c
   2508c:	0003f5fc 	.word	0x0003f5fc

00025090 <CDeviceNameService::GetDevice(char const*, bool)>:
   25090:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   25094:	e2515000 	subs	r5, r1, #0
   25098:	e24dd00c 	sub	sp, sp, #12
   2509c:	0a000024 	beq	25134 <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
   250a0:	e1a07000 	mov	r7, r0
   250a4:	e5900004 	ldr	r0, [r0, #4]
   250a8:	e1a06002 	mov	r6, r2
   250ac:	e3500000 	cmp	r0, #0
   250b0:	1a000014 	bne	25108 <CDeviceNameService::GetDevice(char const*, bool)+0x78>
   250b4:	e5974000 	ldr	r4, [r7]
   250b8:	e3540000 	cmp	r4, #0
   250bc:	1a00000a 	bne	250ec <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   250c0:	ea000018 	b	25128 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
   250c4:	e1a00005 	mov	r0, r5
   250c8:	eb00139d 	bl	29f44 <strcmp>
   250cc:	e3500000 	cmp	r0, #0
   250d0:	1a000002 	bne	250e0 <CDeviceNameService::GetDevice(char const*, bool)+0x50>
   250d4:	e5d4300c 	ldrb	r3, [r4, #12]
   250d8:	e1530006 	cmp	r3, r6
   250dc:	0a000018 	beq	25144 <CDeviceNameService::GetDevice(char const*, bool)+0xb4>
   250e0:	e5944000 	ldr	r4, [r4]
   250e4:	e3540000 	cmp	r4, #0
   250e8:	0a00000a 	beq	25118 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   250ec:	e5941004 	ldr	r1, [r4, #4]
   250f0:	e3510000 	cmp	r1, #0
   250f4:	1afffff2 	bne	250c4 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
   250f8:	e3a02092 	mov	r2, #146	; 0x92
   250fc:	e59f1078 	ldr	r1, [pc, #120]	; 2517c <CDeviceNameService::GetDevice(char const*, bool)+0xec>
   25100:	e59f0078 	ldr	r0, [pc, #120]	; 25180 <CDeviceNameService::GetDevice(char const*, bool)+0xf0>
   25104:	ebfffd5e 	bl	24684 <assertion_failed>
   25108:	eb001a91 	bl	2bb54 <EnterCritical>
   2510c:	e5974000 	ldr	r4, [r7]
   25110:	e3540000 	cmp	r4, #0
   25114:	1afffff4 	bne	250ec <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   25118:	e5973004 	ldr	r3, [r7, #4]
   2511c:	e3530000 	cmp	r3, #0
   25120:	0a000000 	beq	25128 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
   25124:	eb001ab4 	bl	2bbfc <LeaveCritical>
   25128:	e3a00000 	mov	r0, #0
   2512c:	e28dd00c 	add	sp, sp, #12
   25130:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   25134:	e3a0208b 	mov	r2, #139	; 0x8b
   25138:	e59f103c 	ldr	r1, [pc, #60]	; 2517c <CDeviceNameService::GetDevice(char const*, bool)+0xec>
   2513c:	e59f0040 	ldr	r0, [pc, #64]	; 25184 <CDeviceNameService::GetDevice(char const*, bool)+0xf4>
   25140:	ebfffd4f 	bl	24684 <assertion_failed>
   25144:	e5973004 	ldr	r3, [r7, #4]
   25148:	e5940008 	ldr	r0, [r4, #8]
   2514c:	e3530000 	cmp	r3, #0
   25150:	1a000005 	bne	2516c <CDeviceNameService::GetDevice(char const*, bool)+0xdc>
   25154:	e3500000 	cmp	r0, #0
   25158:	1afffff3 	bne	2512c <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
   2515c:	e3a0209a 	mov	r2, #154	; 0x9a
   25160:	e59f1014 	ldr	r1, [pc, #20]	; 2517c <CDeviceNameService::GetDevice(char const*, bool)+0xec>
   25164:	e59f001c 	ldr	r0, [pc, #28]	; 25188 <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   25168:	ebfffd45 	bl	24684 <assertion_failed>
   2516c:	e58d0004 	str	r0, [sp, #4]
   25170:	eb001aa1 	bl	2bbfc <LeaveCritical>
   25174:	e59d0004 	ldr	r0, [sp, #4]
   25178:	eafffff5 	b	25154 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
   2517c:	00044928 	.word	0x00044928
   25180:	0004495c 	.word	0x0004495c
   25184:	0003f5fc 	.word	0x0003f5fc
   25188:	00044970 	.word	0x00044970

0002518c <CDeviceNameService::Get()>:
   2518c:	e59f301c 	ldr	r3, [pc, #28]	; 251b0 <CDeviceNameService::Get()+0x24>
   25190:	e5930000 	ldr	r0, [r3]
   25194:	e3500000 	cmp	r0, #0
   25198:	112fff1e 	bxne	lr
   2519c:	e3a020cc 	mov	r2, #204	; 0xcc
   251a0:	e92d4010 	push	{r4, lr}
   251a4:	e59f1008 	ldr	r1, [pc, #8]	; 251b4 <CDeviceNameService::Get()+0x28>
   251a8:	e59f0008 	ldr	r0, [pc, #8]	; 251b8 <CDeviceNameService::Get()+0x2c>
   251ac:	ebfffd34 	bl	24684 <assertion_failed>
   251b0:	0004da98 	.word	0x0004da98
   251b4:	00044928 	.word	0x00044928
   251b8:	00044980 	.word	0x00044980

000251bc <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   251bc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   251c0:	e1a06001 	mov	r6, r1
   251c4:	e24dd01c 	sub	sp, sp, #28
   251c8:	e1a04000 	mov	r4, r0
   251cc:	e28d0008 	add	r0, sp, #8
   251d0:	e1a05003 	mov	r5, r3
   251d4:	e5dd7030 	ldrb	r7, [sp, #48]	; 0x30
   251d8:	e58d2004 	str	r2, [sp, #4]
   251dc:	eb000a00 	bl	279e4 <CString::CString()>
   251e0:	e1a02006 	mov	r2, r6
   251e4:	e59d3004 	ldr	r3, [sp, #4]
   251e8:	e59f1030 	ldr	r1, [pc, #48]	; 25220 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
   251ec:	e28d0008 	add	r0, sp, #8
   251f0:	eb000f45 	bl	28f0c <CString::Format(char const*, ...)>
   251f4:	e28d0008 	add	r0, sp, #8
   251f8:	eb000a11 	bl	27a44 <CString::operator char const*() const>
   251fc:	e1a03007 	mov	r3, r7
   25200:	e1a01000 	mov	r1, r0
   25204:	e1a02005 	mov	r2, r5
   25208:	e1a00004 	mov	r0, r4
   2520c:	ebffff2e 	bl	24ecc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   25210:	e28d0008 	add	r0, sp, #8
   25214:	eb0009bf 	bl	27918 <CString::~CString()>
   25218:	e28dd01c 	add	sp, sp, #28
   2521c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   25220:	0004498c 	.word	0x0004498c

00025224 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   25224:	e92d4070 	push	{r4, r5, r6, lr}
   25228:	e1a06001 	mov	r6, r1
   2522c:	e24dd018 	sub	sp, sp, #24
   25230:	e1a04000 	mov	r4, r0
   25234:	e28d0008 	add	r0, sp, #8
   25238:	e1a05003 	mov	r5, r3
   2523c:	e58d2004 	str	r2, [sp, #4]
   25240:	eb0009e7 	bl	279e4 <CString::CString()>
   25244:	e59d3004 	ldr	r3, [sp, #4]
   25248:	e1a02006 	mov	r2, r6
   2524c:	e59f102c 	ldr	r1, [pc, #44]	; 25280 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
   25250:	e28d0008 	add	r0, sp, #8
   25254:	eb000f2c 	bl	28f0c <CString::Format(char const*, ...)>
   25258:	e28d0008 	add	r0, sp, #8
   2525c:	eb0009f8 	bl	27a44 <CString::operator char const*() const>
   25260:	e1a02005 	mov	r2, r5
   25264:	e1a01000 	mov	r1, r0
   25268:	e1a00004 	mov	r0, r4
   2526c:	ebffff43 	bl	24f80 <CDeviceNameService::RemoveDevice(char const*, bool)>
   25270:	e28d0008 	add	r0, sp, #8
   25274:	eb0009a7 	bl	27918 <CString::~CString()>
   25278:	e28dd018 	add	sp, sp, #24
   2527c:	e8bd8070 	pop	{r4, r5, r6, pc}
   25280:	0004498c 	.word	0x0004498c

00025284 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   25284:	e92d4070 	push	{r4, r5, r6, lr}
   25288:	e1a06001 	mov	r6, r1
   2528c:	e24dd018 	sub	sp, sp, #24
   25290:	e1a04000 	mov	r4, r0
   25294:	e28d0008 	add	r0, sp, #8
   25298:	e1a05003 	mov	r5, r3
   2529c:	e58d2004 	str	r2, [sp, #4]
   252a0:	eb0009cf 	bl	279e4 <CString::CString()>
   252a4:	e59d3004 	ldr	r3, [sp, #4]
   252a8:	e1a02006 	mov	r2, r6
   252ac:	e59f1034 	ldr	r1, [pc, #52]	; 252e8 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
   252b0:	e28d0008 	add	r0, sp, #8
   252b4:	eb000f14 	bl	28f0c <CString::Format(char const*, ...)>
   252b8:	e28d0008 	add	r0, sp, #8
   252bc:	eb0009e0 	bl	27a44 <CString::operator char const*() const>
   252c0:	e1a02005 	mov	r2, r5
   252c4:	e1a01000 	mov	r1, r0
   252c8:	e1a00004 	mov	r0, r4
   252cc:	ebffff6f 	bl	25090 <CDeviceNameService::GetDevice(char const*, bool)>
   252d0:	e1a04000 	mov	r4, r0
   252d4:	e28d0008 	add	r0, sp, #8
   252d8:	eb00098e 	bl	27918 <CString::~CString()>
   252dc:	e1a00004 	mov	r0, r4
   252e0:	e28dd018 	add	sp, sp, #24
   252e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   252e8:	0004498c 	.word	0x0004498c

000252ec <CDeviceNameService::ListDevices(CDevice*)>:
   252ec:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   252f0:	e2516000 	subs	r6, r1, #0
   252f4:	e24dd024 	sub	sp, sp, #36	; 0x24
   252f8:	0a000035 	beq	253d4 <CDeviceNameService::ListDevices(CDevice*)+0xe8>
   252fc:	e5904000 	ldr	r4, [r0]
   25300:	e3540000 	cmp	r4, #0
   25304:	0a000030 	beq	253cc <CDeviceNameService::ListDevices(CDevice*)+0xe0>
   25308:	e3a05000 	mov	r5, #0
   2530c:	e59f70d0 	ldr	r7, [pc, #208]	; 253e4 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
   25310:	ea00001c 	b	25388 <CDeviceNameService::ListDevices(CDevice*)+0x9c>
   25314:	e5d4200c 	ldrb	r2, [r4, #12]
   25318:	e2855001 	add	r5, r5, #1
   2531c:	e3520000 	cmp	r2, #0
   25320:	13a02062 	movne	r2, #98	; 0x62
   25324:	03a02063 	moveq	r2, #99	; 0x63
   25328:	e2158003 	ands	r8, r5, #3
   2532c:	03a0100a 	moveq	r1, #10
   25330:	13a01020 	movne	r1, #32
   25334:	e28d0010 	add	r0, sp, #16
   25338:	e58d1000 	str	r1, [sp]
   2533c:	e1a01007 	mov	r1, r7
   25340:	eb000ef1 	bl	28f0c <CString::Format(char const*, ...)>
   25344:	e5963000 	ldr	r3, [r6]
   25348:	e28d0010 	add	r0, sp, #16
   2534c:	e593900c 	ldr	r9, [r3, #12]
   25350:	eb0009bb 	bl	27a44 <CString::operator char const*() const>
   25354:	e1a01000 	mov	r1, r0
   25358:	e28d0010 	add	r0, sp, #16
   2535c:	e58d100c 	str	r1, [sp, #12]
   25360:	eb0009e9 	bl	27b0c <CString::GetLength() const>
   25364:	e59d100c 	ldr	r1, [sp, #12]
   25368:	e1a02000 	mov	r2, r0
   2536c:	e1a00006 	mov	r0, r6
   25370:	e12fff39 	blx	r9
   25374:	e5944000 	ldr	r4, [r4]
   25378:	e28d0010 	add	r0, sp, #16
   2537c:	eb000965 	bl	27918 <CString::~CString()>
   25380:	e3540000 	cmp	r4, #0
   25384:	0a000008 	beq	253ac <CDeviceNameService::ListDevices(CDevice*)+0xc0>
   25388:	e28d0010 	add	r0, sp, #16
   2538c:	eb000994 	bl	279e4 <CString::CString()>
   25390:	e5943004 	ldr	r3, [r4, #4]
   25394:	e3530000 	cmp	r3, #0
   25398:	1affffdd 	bne	25314 <CDeviceNameService::ListDevices(CDevice*)+0x28>
   2539c:	e3a020b9 	mov	r2, #185	; 0xb9
   253a0:	e59f1040 	ldr	r1, [pc, #64]	; 253e8 <CDeviceNameService::ListDevices(CDevice*)+0xfc>
   253a4:	e59f0040 	ldr	r0, [pc, #64]	; 253ec <CDeviceNameService::ListDevices(CDevice*)+0x100>
   253a8:	ebfffcb5 	bl	24684 <assertion_failed>
   253ac:	e3580000 	cmp	r8, #0
   253b0:	0a000005 	beq	253cc <CDeviceNameService::ListDevices(CDevice*)+0xe0>
   253b4:	e5963000 	ldr	r3, [r6]
   253b8:	e1a00006 	mov	r0, r6
   253bc:	e3a02001 	mov	r2, #1
   253c0:	e593300c 	ldr	r3, [r3, #12]
   253c4:	e59f1024 	ldr	r1, [pc, #36]	; 253f0 <CDeviceNameService::ListDevices(CDevice*)+0x104>
   253c8:	e12fff33 	blx	r3
   253cc:	e28dd024 	add	sp, sp, #36	; 0x24
   253d0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   253d4:	e3a020b0 	mov	r2, #176	; 0xb0
   253d8:	e59f1008 	ldr	r1, [pc, #8]	; 253e8 <CDeviceNameService::ListDevices(CDevice*)+0xfc>
   253dc:	e59f0010 	ldr	r0, [pc, #16]	; 253f4 <CDeviceNameService::ListDevices(CDevice*)+0x108>
   253e0:	ebfffca7 	bl	24684 <assertion_failed>
   253e4:	000449a4 	.word	0x000449a4
   253e8:	00044928 	.word	0x00044928
   253ec:	0004495c 	.word	0x0004495c
   253f0:	00046f54 	.word	0x00046f54
   253f4:	00044994 	.word	0x00044994

000253f8 <CGPIOPin::CGPIOPin()>:
   253f8:	e3a01000 	mov	r1, #0
   253fc:	e3a02006 	mov	r2, #6
   25400:	e92d4010 	push	{r4, lr}
   25404:	e3a0c00a 	mov	ip, #10
   25408:	e3a04036 	mov	r4, #54	; 0x36
   2540c:	e59fe01c 	ldr	lr, [pc, #28]	; 25430 <CGPIOPin::CGPIOPin()+0x38>
   25410:	e5804004 	str	r4, [r0, #4]
   25414:	e580e000 	str	lr, [r0]
   25418:	e5c0c010 	strb	ip, [r0, #16]
   2541c:	e5801018 	str	r1, [r0, #24]
   25420:	e580101c 	str	r1, [r0, #28]
   25424:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   25428:	e5c02026 	strb	r2, [r0, #38]	; 0x26
   2542c:	e8bd8010 	pop	{r4, pc}
   25430:	000449b8 	.word	0x000449b8

00025434 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   25434:	e92d4070 	push	{r4, r5, r6, lr}
   25438:	e3a0c000 	mov	ip, #0
   2543c:	e3a0e00a 	mov	lr, #10
   25440:	e1a05002 	mov	r5, r2
   25444:	e3a06036 	mov	r6, #54	; 0x36
   25448:	e3a02006 	mov	r2, #6
   2544c:	e1a04000 	mov	r4, r0
   25450:	e5803018 	str	r3, [r0, #24]
   25454:	e59f302c 	ldr	r3, [pc, #44]	; 25488 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
   25458:	e5c0e010 	strb	lr, [r0, #16]
   2545c:	e8800048 	stm	r0, {r3, r6}
   25460:	e580c01c 	str	ip, [r0, #28]
   25464:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   25468:	e5c02026 	strb	r2, [r0, #38]	; 0x26
   2546c:	eb00000d 	bl	254a8 <CGPIOPin::AssignPin(unsigned int)>
   25470:	e1a00004 	mov	r0, r4
   25474:	e1a01005 	mov	r1, r5
   25478:	e3a02001 	mov	r2, #1
   2547c:	eb00002a 	bl	2552c <CGPIOPin::SetMode(TGPIOMode, bool)>
   25480:	e1a00004 	mov	r0, r4
   25484:	e8bd8070 	pop	{r4, r5, r6, pc}
   25488:	000449b8 	.word	0x000449b8

0002548c <CGPIOPin::~CGPIOPin()>:
   2548c:	e12fff1e 	bx	lr

00025490 <CGPIOPin::~CGPIOPin()>:
   25490:	e92d4010 	push	{r4, lr}
   25494:	e1a04000 	mov	r4, r0
   25498:	e3a01028 	mov	r1, #40	; 0x28
   2549c:	eb00168d 	bl	2aed8 <operator delete(void*, unsigned int)>
   254a0:	e1a00004 	mov	r0, r4
   254a4:	e8bd8010 	pop	{r4, pc}

000254a8 <CGPIOPin::AssignPin(unsigned int)>:
   254a8:	e5903004 	ldr	r3, [r0, #4]
   254ac:	e92d4070 	push	{r4, r5, r6, lr}
   254b0:	e3530036 	cmp	r3, #54	; 0x36
   254b4:	1a000017 	bne	25518 <CGPIOPin::AssignPin(unsigned int)+0x70>
   254b8:	e3510035 	cmp	r1, #53	; 0x35
   254bc:	e1a05000 	mov	r5, r0
   254c0:	e1a04001 	mov	r4, r1
   254c4:	e5801004 	str	r1, [r0, #4]
   254c8:	8a000007 	bhi	254ec <CGPIOPin::AssignPin(unsigned int)+0x44>
   254cc:	e3a03001 	mov	r3, #1
   254d0:	e204201f 	and	r2, r4, #31
   254d4:	e1a042a4 	lsr	r4, r4, #5
   254d8:	e1a03213 	lsl	r3, r3, r2
   254dc:	e1a04104 	lsl	r4, r4, #2
   254e0:	e585300c 	str	r3, [r5, #12]
   254e4:	e5854008 	str	r4, [r5, #8]
   254e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   254ec:	eb000851 	bl	27638 <CMachineInfo::Get()>
   254f0:	e6ef1074 	uxtb	r1, r4
   254f4:	eb0007b4 	bl	273cc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   254f8:	e3500035 	cmp	r0, #53	; 0x35
   254fc:	e1a04000 	mov	r4, r0
   25500:	e5850004 	str	r0, [r5, #4]
   25504:	9afffff0 	bls	254cc <CGPIOPin::AssignPin(unsigned int)+0x24>
   25508:	e59f1018 	ldr	r1, [pc, #24]	; 25528 <CGPIOPin::AssignPin(unsigned int)+0x80>
   2550c:	e3a02047 	mov	r2, #71	; 0x47
   25510:	e2810020 	add	r0, r1, #32
   25514:	ebfffc5a 	bl	24684 <assertion_failed>
   25518:	e59f1008 	ldr	r1, [pc, #8]	; 25528 <CGPIOPin::AssignPin(unsigned int)+0x80>
   2551c:	e3a02040 	mov	r2, #64	; 0x40
   25520:	e281000c 	add	r0, r1, #12
   25524:	ebfffc56 	bl	24684 <assertion_failed>
   25528:	000449c0 	.word	0x000449c0

0002552c <CGPIOPin::SetMode(TGPIOMode, bool)>:
   2552c:	e3510009 	cmp	r1, #9
   25530:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25534:	8a000058 	bhi	2569c <CGPIOPin::SetMode(TGPIOMode, bool)+0x170>
   25538:	e1a06002 	mov	r6, r2
   2553c:	e1a04000 	mov	r4, r0
   25540:	e3a02000 	mov	r2, #0
   25544:	e5c01010 	strb	r1, [r0, #16]
   25548:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   2554c:	e5d03010 	ldrb	r3, [r0, #16]
   25550:	e2431004 	sub	r1, r3, #4
   25554:	e6efc071 	uxtb	ip, r1
   25558:	e35c0005 	cmp	ip, #5
   2555c:	9a000030 	bls	25624 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf8>
   25560:	e3530001 	cmp	r3, #1
   25564:	13a03000 	movne	r3, #0
   25568:	02063001 	andeq	r3, r6, #1
   2556c:	e3530000 	cmp	r3, #0
   25570:	1a00004d 	bne	256ac <CGPIOPin::SetMode(TGPIOMode, bool)+0x180>
   25574:	e5943004 	ldr	r3, [r4, #4]
   25578:	e3530035 	cmp	r3, #53	; 0x35
   2557c:	8a00004d 	bhi	256b8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x18c>
   25580:	e59f5140 	ldr	r5, [pc, #320]	; 256c8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x19c>
   25584:	e59f7140 	ldr	r7, [pc, #320]	; 256cc <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a0>
   25588:	e0852395 	umull	r2, r5, r5, r3
   2558c:	e5970000 	ldr	r0, [r7]
   25590:	e1a051a5 	lsr	r5, r5, #3
   25594:	e2852302 	add	r2, r5, #134217728	; 0x8000000
   25598:	e0855105 	add	r5, r5, r5, lsl #2
   2559c:	e2822702 	add	r2, r2, #524288	; 0x80000
   255a0:	e0435085 	sub	r5, r3, r5, lsl #1
   255a4:	e3500000 	cmp	r0, #0
   255a8:	e1a08102 	lsl	r8, r2, #2
   255ac:	e0855085 	add	r5, r5, r5, lsl #1
   255b0:	1a000026 	bne	25650 <CGPIOPin::SetMode(TGPIOMode, bool)+0x124>
   255b4:	e5d42010 	ldrb	r2, [r4, #16]
   255b8:	e3a01007 	mov	r1, #7
   255bc:	e2422001 	sub	r2, r2, #1
   255c0:	e16f2f12 	clz	r2, r2
   255c4:	e5983000 	ldr	r3, [r8]
   255c8:	e1a022a2 	lsr	r2, r2, #5
   255cc:	e1c33511 	bic	r3, r3, r1, lsl r5
   255d0:	e1835512 	orr	r5, r3, r2, lsl r5
   255d4:	e5885000 	str	r5, [r8]
   255d8:	e5973000 	ldr	r3, [r7]
   255dc:	e3530000 	cmp	r3, #0
   255e0:	1a000016 	bne	25640 <CGPIOPin::SetMode(TGPIOMode, bool)+0x114>
   255e4:	e3560000 	cmp	r6, #0
   255e8:	0a00000a 	beq	25618 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   255ec:	e5d43010 	ldrb	r3, [r4, #16]
   255f0:	e3530003 	cmp	r3, #3
   255f4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   255f8:	ea000006 	b	25618 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   255fc:	00025678 	.word	0x00025678
   25600:	00025668 	.word	0x00025668
   25604:	00025658 	.word	0x00025658
   25608:	0002560c 	.word	0x0002560c
   2560c:	e1a00004 	mov	r0, r4
   25610:	e3a01001 	mov	r1, #1
   25614:	eb0001e1 	bl	25da0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25618:	e3a03000 	mov	r3, #0
   2561c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25620:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25624:	e1560002 	cmp	r6, r2
   25628:	1a000016 	bne	25688 <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
   2562c:	e1a00004 	mov	r0, r4
   25630:	eb000202 	bl	25e40 <CGPIOPin::SetAlternateFunction(unsigned int)>
   25634:	e3a03000 	mov	r3, #0
   25638:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2563c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25640:	eb00196d 	bl	2bbfc <LeaveCritical>
   25644:	e3560000 	cmp	r6, #0
   25648:	0afffff2 	beq	25618 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   2564c:	eaffffe6 	b	255ec <CGPIOPin::SetMode(TGPIOMode, bool)+0xc0>
   25650:	eb00193f 	bl	2bb54 <EnterCritical>
   25654:	eaffffd6 	b	255b4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x88>
   25658:	e1a00004 	mov	r0, r4
   2565c:	e3a01002 	mov	r1, #2
   25660:	eb0001ce 	bl	25da0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25664:	eaffffeb 	b	25618 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   25668:	e1a00004 	mov	r0, r4
   2566c:	e3a01000 	mov	r1, #0
   25670:	eb000017 	bl	256d4 <CGPIOPin::Write(unsigned int)>
   25674:	eaffffe7 	b	25618 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   25678:	e1a00004 	mov	r0, r4
   2567c:	e3a01000 	mov	r1, #0
   25680:	eb0001c6 	bl	25da0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25684:	eaffffe3 	b	25618 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   25688:	e1a01002 	mov	r1, r2
   2568c:	eb0001c3 	bl	25da0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25690:	e5d43010 	ldrb	r3, [r4, #16]
   25694:	e2431004 	sub	r1, r3, #4
   25698:	eaffffe3 	b	2562c <CGPIOPin::SetMode(TGPIOMode, bool)+0x100>
   2569c:	e59f102c 	ldr	r1, [pc, #44]	; 256d0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
   256a0:	e3a0204f 	mov	r2, #79	; 0x4f
   256a4:	e2810034 	add	r0, r1, #52	; 0x34
   256a8:	ebfffbf5 	bl	24684 <assertion_failed>
   256ac:	e1a01002 	mov	r1, r2
   256b0:	eb0001ba 	bl	25da0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   256b4:	eaffffae 	b	25574 <CGPIOPin::SetMode(TGPIOMode, bool)+0x48>
   256b8:	e59f1010 	ldr	r1, [pc, #16]	; 256d0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
   256bc:	e3a02068 	mov	r2, #104	; 0x68
   256c0:	e2810020 	add	r0, r1, #32
   256c4:	ebfffbee 	bl	24684 <assertion_failed>
   256c8:	cccccccd 	.word	0xcccccccd
   256cc:	0004da9c 	.word	0x0004da9c
   256d0:	000449c0 	.word	0x000449c0

000256d4 <CGPIOPin::Write(unsigned int)>:
   256d4:	e5903004 	ldr	r3, [r0, #4]
   256d8:	e92d4010 	push	{r4, lr}
   256dc:	e3530035 	cmp	r3, #53	; 0x35
   256e0:	8a000011 	bhi	2572c <CGPIOPin::Write(unsigned int)+0x58>
   256e4:	e5d03010 	ldrb	r3, [r0, #16]
   256e8:	e3530003 	cmp	r3, #3
   256ec:	8a000012 	bhi	2573c <CGPIOPin::Write(unsigned int)+0x68>
   256f0:	e3a02000 	mov	r2, #0
   256f4:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   256f8:	e3510001 	cmp	r1, #1
   256fc:	8a000012 	bhi	2574c <CGPIOPin::Write(unsigned int)+0x78>
   25700:	e59f3054 	ldr	r3, [pc, #84]	; 2575c <CGPIOPin::Write(unsigned int)+0x88>
   25704:	e59fc054 	ldr	ip, [pc, #84]	; 25760 <CGPIOPin::Write(unsigned int)+0x8c>
   25708:	e3510000 	cmp	r1, #0
   2570c:	e5801014 	str	r1, [r0, #20]
   25710:	11a01003 	movne	r1, r3
   25714:	01a0100c 	moveq	r1, ip
   25718:	e5903008 	ldr	r3, [r0, #8]
   2571c:	e590c00c 	ldr	ip, [r0, #12]
   25720:	e781c003 	str	ip, [r1, r3]
   25724:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   25728:	e8bd8010 	pop	{r4, pc}
   2572c:	e59f1030 	ldr	r1, [pc, #48]	; 25764 <CGPIOPin::Write(unsigned int)+0x90>
   25730:	e3a02091 	mov	r2, #145	; 0x91
   25734:	e2810020 	add	r0, r1, #32
   25738:	ebfffbd1 	bl	24684 <assertion_failed>
   2573c:	e59f1020 	ldr	r1, [pc, #32]	; 25764 <CGPIOPin::Write(unsigned int)+0x90>
   25740:	e3a02094 	mov	r2, #148	; 0x94
   25744:	e281004c 	add	r0, r1, #76	; 0x4c
   25748:	ebfffbcd 	bl	24684 <assertion_failed>
   2574c:	e59f1010 	ldr	r1, [pc, #16]	; 25764 <CGPIOPin::Write(unsigned int)+0x90>
   25750:	e3a02098 	mov	r2, #152	; 0x98
   25754:	e2810070 	add	r0, r1, #112	; 0x70
   25758:	ebfffbc9 	bl	24684 <assertion_failed>
   2575c:	2020001c 	.word	0x2020001c
   25760:	20200028 	.word	0x20200028
   25764:	000449c0 	.word	0x000449c0

00025768 <CGPIOPin::Read() const>:
   25768:	e5903004 	ldr	r3, [r0, #4]
   2576c:	e92d4010 	push	{r4, lr}
   25770:	e3530035 	cmp	r3, #53	; 0x35
   25774:	8a00000f 	bhi	257b8 <CGPIOPin::Read() const+0x50>
   25778:	e5d03010 	ldrb	r3, [r0, #16]
   2577c:	e2432002 	sub	r2, r3, #2
   25780:	e3530000 	cmp	r3, #0
   25784:	13520001 	cmpne	r2, #1
   25788:	8a00000e 	bhi	257c8 <CGPIOPin::Read() const+0x60>
   2578c:	e3a03000 	mov	r3, #0
   25790:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25794:	e59f103c 	ldr	r1, [pc, #60]	; 257d8 <CGPIOPin::Read() const+0x70>
   25798:	e590c008 	ldr	ip, [r0, #8]
   2579c:	e590200c 	ldr	r2, [r0, #12]
   257a0:	e79c1001 	ldr	r1, [ip, r1]
   257a4:	e1110002 	tst	r1, r2
   257a8:	13a00001 	movne	r0, #1
   257ac:	01a00003 	moveq	r0, r3
   257b0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   257b4:	e8bd8010 	pop	{r4, pc}
   257b8:	e59f101c 	ldr	r1, [pc, #28]	; 257dc <CGPIOPin::Read() const+0x74>
   257bc:	e3a020a4 	mov	r2, #164	; 0xa4
   257c0:	e2810020 	add	r0, r1, #32
   257c4:	ebfffbae 	bl	24684 <assertion_failed>
   257c8:	e59f100c 	ldr	r1, [pc, #12]	; 257dc <CGPIOPin::Read() const+0x74>
   257cc:	e3a020a6 	mov	r2, #166	; 0xa6
   257d0:	e2810090 	add	r0, r1, #144	; 0x90
   257d4:	ebfffbaa 	bl	24684 <assertion_failed>
   257d8:	20200034 	.word	0x20200034
   257dc:	000449c0 	.word	0x000449c0

000257e0 <CGPIOPin::Invert()>:
   257e0:	e5d02010 	ldrb	r2, [r0, #16]
   257e4:	e3520001 	cmp	r2, #1
   257e8:	1a000002 	bne	257f8 <CGPIOPin::Invert()+0x18>
   257ec:	e5901014 	ldr	r1, [r0, #20]
   257f0:	e2211001 	eor	r1, r1, #1
   257f4:	eaffffb6 	b	256d4 <CGPIOPin::Write(unsigned int)>
   257f8:	e59f100c 	ldr	r1, [pc, #12]	; 2580c <CGPIOPin::Invert()+0x2c>
   257fc:	e3a020b5 	mov	r2, #181	; 0xb5
   25800:	e92d4010 	push	{r4, lr}
   25804:	e28100ec 	add	r0, r1, #236	; 0xec
   25808:	ebfffb9d 	bl	24684 <assertion_failed>
   2580c:	000449c0 	.word	0x000449c0

00025810 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   25810:	e5d0c010 	ldrb	ip, [r0, #16]
   25814:	e92d4010 	push	{r4, lr}
   25818:	e24ce002 	sub	lr, ip, #2
   2581c:	e35c0000 	cmp	ip, #0
   25820:	135e0001 	cmpne	lr, #1
   25824:	8a000028 	bhi	258cc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
   25828:	e5d0c025 	ldrb	ip, [r0, #37]	; 0x25
   2582c:	e35c0006 	cmp	ip, #6
   25830:	1a000011 	bne	2587c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
   25834:	e5d0c026 	ldrb	ip, [r0, #38]	; 0x26
   25838:	e35c0006 	cmp	ip, #6
   2583c:	1a000012 	bne	2588c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
   25840:	e3510000 	cmp	r1, #0
   25844:	0a000014 	beq	2589c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   25848:	e590c01c 	ldr	ip, [r0, #28]
   2584c:	e35c0000 	cmp	ip, #0
   25850:	1a000015 	bne	258ac <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
   25854:	e590c018 	ldr	ip, [r0, #24]
   25858:	e580101c 	str	r1, [r0, #28]
   2585c:	e35c0000 	cmp	ip, #0
   25860:	e5802020 	str	r2, [r0, #32]
   25864:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   25868:	0a000013 	beq	258bc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
   2586c:	e8bd4010 	pop	{r4, lr}
   25870:	e1a01000 	mov	r1, r0
   25874:	e1a0000c 	mov	r0, ip
   25878:	ea001b74 	b	2c650 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   2587c:	e59f1058 	ldr	r1, [pc, #88]	; 258dc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25880:	e3a020c0 	mov	r2, #192	; 0xc0
   25884:	e2810f42 	add	r0, r1, #264	; 0x108
   25888:	ebfffb7d 	bl	24684 <assertion_failed>
   2588c:	e59f1048 	ldr	r1, [pc, #72]	; 258dc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25890:	e3a020c1 	mov	r2, #193	; 0xc1
   25894:	e2810f4b 	add	r0, r1, #300	; 0x12c
   25898:	ebfffb79 	bl	24684 <assertion_failed>
   2589c:	e59f1038 	ldr	r1, [pc, #56]	; 258dc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   258a0:	e3a020c3 	mov	r2, #195	; 0xc3
   258a4:	e2810f55 	add	r0, r1, #340	; 0x154
   258a8:	ebfffb75 	bl	24684 <assertion_failed>
   258ac:	e59f1028 	ldr	r1, [pc, #40]	; 258dc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   258b0:	e3a020c4 	mov	r2, #196	; 0xc4
   258b4:	e2810f59 	add	r0, r1, #356	; 0x164
   258b8:	ebfffb71 	bl	24684 <assertion_failed>
   258bc:	e59f1018 	ldr	r1, [pc, #24]	; 258dc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   258c0:	e3a020cb 	mov	r2, #203	; 0xcb
   258c4:	e2810f5d 	add	r0, r1, #372	; 0x174
   258c8:	ebfffb6d 	bl	24684 <assertion_failed>
   258cc:	e59f1008 	ldr	r1, [pc, #8]	; 258dc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   258d0:	e3a020bc 	mov	r2, #188	; 0xbc
   258d4:	e2810090 	add	r0, r1, #144	; 0x90
   258d8:	ebfffb69 	bl	24684 <assertion_failed>
   258dc:	000449c0 	.word	0x000449c0

000258e0 <CGPIOPin::DisconnectInterrupt()>:
   258e0:	e5d03010 	ldrb	r3, [r0, #16]
   258e4:	e92d4010 	push	{r4, lr}
   258e8:	e2432002 	sub	r2, r3, #2
   258ec:	e3530000 	cmp	r3, #0
   258f0:	13520001 	cmpne	r2, #1
   258f4:	8a000020 	bhi	2597c <CGPIOPin::DisconnectInterrupt()+0x9c>
   258f8:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   258fc:	e1a01000 	mov	r1, r0
   25900:	e3530006 	cmp	r3, #6
   25904:	1a00000c 	bne	2593c <CGPIOPin::DisconnectInterrupt()+0x5c>
   25908:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   2590c:	e3530006 	cmp	r3, #6
   25910:	1a00000d 	bne	2594c <CGPIOPin::DisconnectInterrupt()+0x6c>
   25914:	e590301c 	ldr	r3, [r0, #28]
   25918:	e3530000 	cmp	r3, #0
   2591c:	0a00000e 	beq	2595c <CGPIOPin::DisconnectInterrupt()+0x7c>
   25920:	e3a03000 	mov	r3, #0
   25924:	e5900018 	ldr	r0, [r0, #24]
   25928:	e581301c 	str	r3, [r1, #28]
   2592c:	e1500003 	cmp	r0, r3
   25930:	0a00000d 	beq	2596c <CGPIOPin::DisconnectInterrupt()+0x8c>
   25934:	e8bd4010 	pop	{r4, lr}
   25938:	ea001b68 	b	2c6e0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   2593c:	e59f1048 	ldr	r1, [pc, #72]	; 2598c <CGPIOPin::DisconnectInterrupt()+0xac>
   25940:	e3a020d5 	mov	r2, #213	; 0xd5
   25944:	e2810f42 	add	r0, r1, #264	; 0x108
   25948:	ebfffb4d 	bl	24684 <assertion_failed>
   2594c:	e59f1038 	ldr	r1, [pc, #56]	; 2598c <CGPIOPin::DisconnectInterrupt()+0xac>
   25950:	e3a020d6 	mov	r2, #214	; 0xd6
   25954:	e2810f4b 	add	r0, r1, #300	; 0x12c
   25958:	ebfffb49 	bl	24684 <assertion_failed>
   2595c:	e59f1028 	ldr	r1, [pc, #40]	; 2598c <CGPIOPin::DisconnectInterrupt()+0xac>
   25960:	e3a020d8 	mov	r2, #216	; 0xd8
   25964:	e2810f61 	add	r0, r1, #388	; 0x184
   25968:	ebfffb45 	bl	24684 <assertion_failed>
   2596c:	e59f1018 	ldr	r1, [pc, #24]	; 2598c <CGPIOPin::DisconnectInterrupt()+0xac>
   25970:	e3a020db 	mov	r2, #219	; 0xdb
   25974:	e2810f5d 	add	r0, r1, #372	; 0x174
   25978:	ebfffb41 	bl	24684 <assertion_failed>
   2597c:	e59f1008 	ldr	r1, [pc, #8]	; 2598c <CGPIOPin::DisconnectInterrupt()+0xac>
   25980:	e3a020d1 	mov	r2, #209	; 0xd1
   25984:	e2810090 	add	r0, r1, #144	; 0x90
   25988:	ebfffb3d 	bl	24684 <assertion_failed>
   2598c:	000449c0 	.word	0x000449c0

00025990 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   25990:	e5d03010 	ldrb	r3, [r0, #16]
   25994:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25998:	e2432002 	sub	r2, r3, #2
   2599c:	e3530000 	cmp	r3, #0
   259a0:	13520001 	cmpne	r2, #1
   259a4:	8a000030 	bhi	25a6c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
   259a8:	e590301c 	ldr	r3, [r0, #28]
   259ac:	e1a04000 	mov	r4, r0
   259b0:	e3530000 	cmp	r3, #0
   259b4:	0a00001c 	beq	25a2c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
   259b8:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   259bc:	e3530006 	cmp	r3, #6
   259c0:	1a00001d 	bne	25a3c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xac>
   259c4:	e3510005 	cmp	r1, #5
   259c8:	8a00001f 	bhi	25a4c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xbc>
   259cc:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   259d0:	e1530001 	cmp	r3, r1
   259d4:	0a000020 	beq	25a5c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
   259d8:	e59f709c 	ldr	r7, [pc, #156]	; 25a7c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xec>
   259dc:	e5903008 	ldr	r3, [r0, #8]
   259e0:	e5970000 	ldr	r0, [r7]
   259e4:	e59f6094 	ldr	r6, [pc, #148]	; 25a80 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
   259e8:	e0815081 	add	r5, r1, r1, lsl #1
   259ec:	e3500000 	cmp	r0, #0
   259f0:	e5c41025 	strb	r1, [r4, #37]	; 0x25
   259f4:	e1a05105 	lsl	r5, r5, #2
   259f8:	e0836006 	add	r6, r3, r6
   259fc:	1a000008 	bne	25a24 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
   25a00:	e594200c 	ldr	r2, [r4, #12]
   25a04:	e7963005 	ldr	r3, [r6, r5]
   25a08:	e1833002 	orr	r3, r3, r2
   25a0c:	e7863005 	str	r3, [r6, r5]
   25a10:	e5973000 	ldr	r3, [r7]
   25a14:	e3530000 	cmp	r3, #0
   25a18:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25a1c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25a20:	ea001875 	b	2bbfc <LeaveCritical>
   25a24:	eb00184a 	bl	2bb54 <EnterCritical>
   25a28:	eafffff4 	b	25a00 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x70>
   25a2c:	e59f1050 	ldr	r1, [pc, #80]	; 25a84 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25a30:	e3a020e4 	mov	r2, #228	; 0xe4
   25a34:	e2810f61 	add	r0, r1, #388	; 0x184
   25a38:	ebfffb11 	bl	24684 <assertion_failed>
   25a3c:	e59f1040 	ldr	r1, [pc, #64]	; 25a84 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25a40:	e3a020e6 	mov	r2, #230	; 0xe6
   25a44:	e2810f42 	add	r0, r1, #264	; 0x108
   25a48:	ebfffb0d 	bl	24684 <assertion_failed>
   25a4c:	e59f1030 	ldr	r1, [pc, #48]	; 25a84 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25a50:	e3a020e7 	mov	r2, #231	; 0xe7
   25a54:	e2810f65 	add	r0, r1, #404	; 0x194
   25a58:	ebfffb09 	bl	24684 <assertion_failed>
   25a5c:	e59f1020 	ldr	r1, [pc, #32]	; 25a84 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25a60:	e3a020e8 	mov	r2, #232	; 0xe8
   25a64:	e2810f6e 	add	r0, r1, #440	; 0x1b8
   25a68:	ebfffb05 	bl	24684 <assertion_failed>
   25a6c:	e59f1010 	ldr	r1, [pc, #16]	; 25a84 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25a70:	e3a020e1 	mov	r2, #225	; 0xe1
   25a74:	e2810090 	add	r0, r1, #144	; 0x90
   25a78:	ebfffb01 	bl	24684 <assertion_failed>
   25a7c:	0004da9c 	.word	0x0004da9c
   25a80:	2020004c 	.word	0x2020004c
   25a84:	000449c0 	.word	0x000449c0

00025a88 <CGPIOPin::DisableInterrupt()>:
   25a88:	e5d03010 	ldrb	r3, [r0, #16]
   25a8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25a90:	e2432002 	sub	r2, r3, #2
   25a94:	e3530000 	cmp	r3, #0
   25a98:	13520001 	cmpne	r2, #1
   25a9c:	8a00001e 	bhi	25b1c <CGPIOPin::DisableInterrupt()+0x94>
   25aa0:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25aa4:	e1a05000 	mov	r5, r0
   25aa8:	e3530005 	cmp	r3, #5
   25aac:	8a000016 	bhi	25b0c <CGPIOPin::DisableInterrupt()+0x84>
   25ab0:	e59f7074 	ldr	r7, [pc, #116]	; 25b2c <CGPIOPin::DisableInterrupt()+0xa4>
   25ab4:	e5902008 	ldr	r2, [r0, #8]
   25ab8:	e5970000 	ldr	r0, [r7]
   25abc:	e59f606c 	ldr	r6, [pc, #108]	; 25b30 <CGPIOPin::DisableInterrupt()+0xa8>
   25ac0:	e0833083 	add	r3, r3, r3, lsl #1
   25ac4:	e3500000 	cmp	r0, #0
   25ac8:	e1a04103 	lsl	r4, r3, #2
   25acc:	e0826006 	add	r6, r2, r6
   25ad0:	1a000009 	bne	25afc <CGPIOPin::DisableInterrupt()+0x74>
   25ad4:	e7963004 	ldr	r3, [r6, r4]
   25ad8:	e595200c 	ldr	r2, [r5, #12]
   25adc:	e1c33002 	bic	r3, r3, r2
   25ae0:	e7863004 	str	r3, [r6, r4]
   25ae4:	e5973000 	ldr	r3, [r7]
   25ae8:	e3530000 	cmp	r3, #0
   25aec:	1a000004 	bne	25b04 <CGPIOPin::DisableInterrupt()+0x7c>
   25af0:	e3a03006 	mov	r3, #6
   25af4:	e5c53025 	strb	r3, [r5, #37]	; 0x25
   25af8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25afc:	eb001814 	bl	2bb54 <EnterCritical>
   25b00:	eafffff3 	b	25ad4 <CGPIOPin::DisableInterrupt()+0x4c>
   25b04:	eb00183c 	bl	2bbfc <LeaveCritical>
   25b08:	eafffff8 	b	25af0 <CGPIOPin::DisableInterrupt()+0x68>
   25b0c:	e59f1020 	ldr	r1, [pc, #32]	; 25b34 <CGPIOPin::DisableInterrupt()+0xac>
   25b10:	e3a020fb 	mov	r2, #251	; 0xfb
   25b14:	e2810f75 	add	r0, r1, #468	; 0x1d4
   25b18:	ebfffad9 	bl	24684 <assertion_failed>
   25b1c:	e59f1010 	ldr	r1, [pc, #16]	; 25b34 <CGPIOPin::DisableInterrupt()+0xac>
   25b20:	e3a020f7 	mov	r2, #247	; 0xf7
   25b24:	e2810090 	add	r0, r1, #144	; 0x90
   25b28:	ebfffad5 	bl	24684 <assertion_failed>
   25b2c:	0004da9c 	.word	0x0004da9c
   25b30:	2020004c 	.word	0x2020004c
   25b34:	000449c0 	.word	0x000449c0

00025b38 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   25b38:	e5d03010 	ldrb	r3, [r0, #16]
   25b3c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25b40:	e2432002 	sub	r2, r3, #2
   25b44:	e3530000 	cmp	r3, #0
   25b48:	13520001 	cmpne	r2, #1
   25b4c:	8a000030 	bhi	25c14 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
   25b50:	e590301c 	ldr	r3, [r0, #28]
   25b54:	e1a04000 	mov	r4, r0
   25b58:	e3530000 	cmp	r3, #0
   25b5c:	0a00001c 	beq	25bd4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
   25b60:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25b64:	e3530006 	cmp	r3, #6
   25b68:	1a00001d 	bne	25be4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xac>
   25b6c:	e3510005 	cmp	r1, #5
   25b70:	8a00001f 	bhi	25bf4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xbc>
   25b74:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25b78:	e1530001 	cmp	r3, r1
   25b7c:	0a000020 	beq	25c04 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
   25b80:	e59f709c 	ldr	r7, [pc, #156]	; 25c24 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xec>
   25b84:	e5903008 	ldr	r3, [r0, #8]
   25b88:	e5970000 	ldr	r0, [r7]
   25b8c:	e59f6094 	ldr	r6, [pc, #148]	; 25c28 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
   25b90:	e0815081 	add	r5, r1, r1, lsl #1
   25b94:	e3500000 	cmp	r0, #0
   25b98:	e5c41026 	strb	r1, [r4, #38]	; 0x26
   25b9c:	e1a05105 	lsl	r5, r5, #2
   25ba0:	e0836006 	add	r6, r3, r6
   25ba4:	1a000008 	bne	25bcc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
   25ba8:	e594200c 	ldr	r2, [r4, #12]
   25bac:	e7963005 	ldr	r3, [r6, r5]
   25bb0:	e1833002 	orr	r3, r3, r2
   25bb4:	e7863005 	str	r3, [r6, r5]
   25bb8:	e5973000 	ldr	r3, [r7]
   25bbc:	e3530000 	cmp	r3, #0
   25bc0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25bc4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25bc8:	ea00180b 	b	2bbfc <LeaveCritical>
   25bcc:	eb0017e0 	bl	2bb54 <EnterCritical>
   25bd0:	eafffff4 	b	25ba8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x70>
   25bd4:	e59f1050 	ldr	r1, [pc, #80]	; 25c2c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25bd8:	e59f2050 	ldr	r2, [pc, #80]	; 25c30 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
   25bdc:	e2810f61 	add	r0, r1, #388	; 0x184
   25be0:	ebfffaa7 	bl	24684 <assertion_failed>
   25be4:	e59f1040 	ldr	r1, [pc, #64]	; 25c2c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25be8:	e59f2044 	ldr	r2, [pc, #68]	; 25c34 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
   25bec:	e2810f4b 	add	r0, r1, #300	; 0x12c
   25bf0:	ebfffaa3 	bl	24684 <assertion_failed>
   25bf4:	e59f1030 	ldr	r1, [pc, #48]	; 25c2c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25bf8:	e3a02e11 	mov	r2, #272	; 0x110
   25bfc:	e2810f65 	add	r0, r1, #404	; 0x194
   25c00:	ebfffa9f 	bl	24684 <assertion_failed>
   25c04:	e59f1020 	ldr	r1, [pc, #32]	; 25c2c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25c08:	e59f2028 	ldr	r2, [pc, #40]	; 25c38 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x100>
   25c0c:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   25c10:	ebfffa9b 	bl	24684 <assertion_failed>
   25c14:	e59f1010 	ldr	r1, [pc, #16]	; 25c2c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25c18:	e59f201c 	ldr	r2, [pc, #28]	; 25c3c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
   25c1c:	e2810090 	add	r0, r1, #144	; 0x90
   25c20:	ebfffa97 	bl	24684 <assertion_failed>
   25c24:	0004da9c 	.word	0x0004da9c
   25c28:	2020004c 	.word	0x2020004c
   25c2c:	000449c0 	.word	0x000449c0
   25c30:	0000010d 	.word	0x0000010d
   25c34:	0000010f 	.word	0x0000010f
   25c38:	00000111 	.word	0x00000111
   25c3c:	0000010a 	.word	0x0000010a

00025c40 <CGPIOPin::DisableInterrupt2()>:
   25c40:	e5d03010 	ldrb	r3, [r0, #16]
   25c44:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25c48:	e2432002 	sub	r2, r3, #2
   25c4c:	e3530000 	cmp	r3, #0
   25c50:	13520001 	cmpne	r2, #1
   25c54:	8a00001e 	bhi	25cd4 <CGPIOPin::DisableInterrupt2()+0x94>
   25c58:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25c5c:	e1a05000 	mov	r5, r0
   25c60:	e3530005 	cmp	r3, #5
   25c64:	8a000016 	bhi	25cc4 <CGPIOPin::DisableInterrupt2()+0x84>
   25c68:	e59f7074 	ldr	r7, [pc, #116]	; 25ce4 <CGPIOPin::DisableInterrupt2()+0xa4>
   25c6c:	e5902008 	ldr	r2, [r0, #8]
   25c70:	e5970000 	ldr	r0, [r7]
   25c74:	e59f606c 	ldr	r6, [pc, #108]	; 25ce8 <CGPIOPin::DisableInterrupt2()+0xa8>
   25c78:	e0833083 	add	r3, r3, r3, lsl #1
   25c7c:	e3500000 	cmp	r0, #0
   25c80:	e1a04103 	lsl	r4, r3, #2
   25c84:	e0826006 	add	r6, r2, r6
   25c88:	1a000009 	bne	25cb4 <CGPIOPin::DisableInterrupt2()+0x74>
   25c8c:	e7963004 	ldr	r3, [r6, r4]
   25c90:	e595200c 	ldr	r2, [r5, #12]
   25c94:	e1c33002 	bic	r3, r3, r2
   25c98:	e7863004 	str	r3, [r6, r4]
   25c9c:	e5973000 	ldr	r3, [r7]
   25ca0:	e3530000 	cmp	r3, #0
   25ca4:	1a000004 	bne	25cbc <CGPIOPin::DisableInterrupt2()+0x7c>
   25ca8:	e3a03006 	mov	r3, #6
   25cac:	e5c53026 	strb	r3, [r5, #38]	; 0x26
   25cb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25cb4:	eb0017a6 	bl	2bb54 <EnterCritical>
   25cb8:	eafffff3 	b	25c8c <CGPIOPin::DisableInterrupt2()+0x4c>
   25cbc:	eb0017ce 	bl	2bbfc <LeaveCritical>
   25cc0:	eafffff8 	b	25ca8 <CGPIOPin::DisableInterrupt2()+0x68>
   25cc4:	e59f1020 	ldr	r1, [pc, #32]	; 25cec <CGPIOPin::DisableInterrupt2()+0xac>
   25cc8:	e3a02f49 	mov	r2, #292	; 0x124
   25ccc:	e2810f85 	add	r0, r1, #532	; 0x214
   25cd0:	ebfffa6b 	bl	24684 <assertion_failed>
   25cd4:	e59f1010 	ldr	r1, [pc, #16]	; 25cec <CGPIOPin::DisableInterrupt2()+0xac>
   25cd8:	e3a02e12 	mov	r2, #288	; 0x120
   25cdc:	e2810090 	add	r0, r1, #144	; 0x90
   25ce0:	ebfffa67 	bl	24684 <assertion_failed>
   25ce4:	0004da9c 	.word	0x0004da9c
   25ce8:	2020004c 	.word	0x2020004c
   25cec:	000449c0 	.word	0x000449c0

00025cf0 <CGPIOPin::AcknowledgeInterrupt()>:
   25cf0:	e590301c 	ldr	r3, [r0, #28]
   25cf4:	e92d4010 	push	{r4, lr}
   25cf8:	e3530000 	cmp	r3, #0
   25cfc:	0a000009 	beq	25d28 <CGPIOPin::AcknowledgeInterrupt()+0x38>
   25d00:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
   25d04:	e3530000 	cmp	r3, #0
   25d08:	1a00000a 	bne	25d38 <CGPIOPin::AcknowledgeInterrupt()+0x48>
   25d0c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25d10:	e59f2030 	ldr	r2, [pc, #48]	; 25d48 <CGPIOPin::AcknowledgeInterrupt()+0x58>
   25d14:	e590c00c 	ldr	ip, [r0, #12]
   25d18:	e5901008 	ldr	r1, [r0, #8]
   25d1c:	e781c002 	str	ip, [r1, r2]
   25d20:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25d24:	e8bd8010 	pop	{r4, pc}
   25d28:	e59f101c 	ldr	r1, [pc, #28]	; 25d4c <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   25d2c:	e59f201c 	ldr	r2, [pc, #28]	; 25d50 <CGPIOPin::AcknowledgeInterrupt()+0x60>
   25d30:	e2810f61 	add	r0, r1, #388	; 0x184
   25d34:	ebfffa52 	bl	24684 <assertion_failed>
   25d38:	e59f100c 	ldr	r1, [pc, #12]	; 25d4c <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   25d3c:	e3a02f4d 	mov	r2, #308	; 0x134
   25d40:	e2810f8e 	add	r0, r1, #568	; 0x238
   25d44:	ebfffa4e 	bl	24684 <assertion_failed>
   25d48:	20200040 	.word	0x20200040
   25d4c:	000449c0 	.word	0x000449c0
   25d50:	00000133 	.word	0x00000133

00025d54 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   25d54:	e3a03000 	mov	r3, #0
   25d58:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25d5c:	e1d13000 	bics	r3, r1, r0
   25d60:	159f2018 	ldrne	r2, [pc, #24]	; 25d80 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   25d64:	15823028 	strne	r3, [r2, #40]	; 0x28
   25d68:	e0100001 	ands	r0, r0, r1
   25d6c:	159f300c 	ldrne	r3, [pc, #12]	; 25d80 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   25d70:	1583001c 	strne	r0, [r3, #28]
   25d74:	e3a03000 	mov	r3, #0
   25d78:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25d7c:	e12fff1e 	bx	lr
   25d80:	20200000 	.word	0x20200000

00025d84 <CGPIOPin::ReadAll()>:
   25d84:	e3a03000 	mov	r3, #0
   25d88:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25d8c:	e59f2008 	ldr	r2, [pc, #8]	; 25d9c <CGPIOPin::ReadAll()+0x18>
   25d90:	e5920034 	ldr	r0, [r2, #52]	; 0x34
   25d94:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25d98:	e12fff1e 	bx	lr
   25d9c:	20200000 	.word	0x20200000

00025da0 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   25da0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25da4:	e59f7080 	ldr	r7, [pc, #128]	; 25e2c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x8c>
   25da8:	e1a04000 	mov	r4, r0
   25dac:	e5970000 	ldr	r0, [r7]
   25db0:	e1a05001 	mov	r5, r1
   25db4:	e3500000 	cmp	r0, #0
   25db8:	1a000015 	bne	25e14 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x74>
   25dbc:	e3a06000 	mov	r6, #0
   25dc0:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   25dc4:	e3550002 	cmp	r5, #2
   25dc8:	e5949008 	ldr	r9, [r4, #8]
   25dcc:	e59f805c 	ldr	r8, [pc, #92]	; 25e30 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
   25dd0:	8a000011 	bhi	25e1c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x7c>
   25dd4:	e59fa058 	ldr	sl, [pc, #88]	; 25e34 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x94>
   25dd8:	e3a00005 	mov	r0, #5
   25ddc:	e58a5094 	str	r5, [sl, #148]	; 0x94
   25de0:	eb000fc5 	bl	29cfc <CTimer::SimpleusDelay(unsigned int)>
   25de4:	e594300c 	ldr	r3, [r4, #12]
   25de8:	e3a00005 	mov	r0, #5
   25dec:	e7893008 	str	r3, [r9, r8]
   25df0:	eb000fc1 	bl	29cfc <CTimer::SimpleusDelay(unsigned int)>
   25df4:	e58a6094 	str	r6, [sl, #148]	; 0x94
   25df8:	e7896008 	str	r6, [r9, r8]
   25dfc:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   25e00:	e5973000 	ldr	r3, [r7]
   25e04:	e3530000 	cmp	r3, #0
   25e08:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   25e0c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   25e10:	ea001779 	b	2bbfc <LeaveCritical>
   25e14:	eb00174e 	bl	2bb54 <EnterCritical>
   25e18:	eaffffe7 	b	25dbc <CGPIOPin::SetPullMode(TGPIOPullMode)+0x1c>
   25e1c:	e59f1014 	ldr	r1, [pc, #20]	; 25e38 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x98>
   25e20:	e59f2014 	ldr	r2, [pc, #20]	; 25e3c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x9c>
   25e24:	e2810f91 	add	r0, r1, #580	; 0x244
   25e28:	ebfffa15 	bl	24684 <assertion_failed>
   25e2c:	0004da9c 	.word	0x0004da9c
   25e30:	20200098 	.word	0x20200098
   25e34:	20200000 	.word	0x20200000
   25e38:	000449c0 	.word	0x000449c0
   25e3c:	00000165 	.word	0x00000165

00025e40 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   25e40:	e5903004 	ldr	r3, [r0, #4]
   25e44:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25e48:	e3530035 	cmp	r3, #53	; 0x35
   25e4c:	8a00001e 	bhi	25ecc <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
   25e50:	e59f2094 	ldr	r2, [pc, #148]	; 25eec <CGPIOPin::SetAlternateFunction(unsigned int)+0xac>
   25e54:	e1a06001 	mov	r6, r1
   25e58:	e3510005 	cmp	r1, #5
   25e5c:	e0821392 	umull	r1, r2, r2, r3
   25e60:	e1a021a2 	lsr	r2, r2, #3
   25e64:	e2820302 	add	r0, r2, #134217728	; 0x8000000
   25e68:	e0822102 	add	r2, r2, r2, lsl #2
   25e6c:	e2800702 	add	r0, r0, #524288	; 0x80000
   25e70:	e0433082 	sub	r3, r3, r2, lsl #1
   25e74:	e1a05100 	lsl	r5, r0, #2
   25e78:	e0834083 	add	r4, r3, r3, lsl #1
   25e7c:	8a000016 	bhi	25edc <CGPIOPin::SetAlternateFunction(unsigned int)+0x9c>
   25e80:	e59f7068 	ldr	r7, [pc, #104]	; 25ef0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
   25e84:	e5970000 	ldr	r0, [r7]
   25e88:	e3500000 	cmp	r0, #0
   25e8c:	1a00000c 	bne	25ec4 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
   25e90:	e3a00007 	mov	r0, #7
   25e94:	e59f1058 	ldr	r1, [pc, #88]	; 25ef4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb4>
   25e98:	e5953000 	ldr	r3, [r5]
   25e9c:	e0816106 	add	r6, r1, r6, lsl #2
   25ea0:	e5962260 	ldr	r2, [r6, #608]	; 0x260
   25ea4:	e1c33410 	bic	r3, r3, r0, lsl r4
   25ea8:	e1833412 	orr	r3, r3, r2, lsl r4
   25eac:	e5853000 	str	r3, [r5]
   25eb0:	e5973000 	ldr	r3, [r7]
   25eb4:	e3530000 	cmp	r3, #0
   25eb8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25ebc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25ec0:	ea00174d 	b	2bbfc <LeaveCritical>
   25ec4:	eb001722 	bl	2bb54 <EnterCritical>
   25ec8:	eafffff0 	b	25e90 <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
   25ecc:	e59f1024 	ldr	r1, [pc, #36]	; 25ef8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   25ed0:	e59f2024 	ldr	r2, [pc, #36]	; 25efc <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
   25ed4:	e2810020 	add	r0, r1, #32
   25ed8:	ebfff9e9 	bl	24684 <assertion_failed>
   25edc:	e59f1014 	ldr	r1, [pc, #20]	; 25ef8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   25ee0:	e59f2018 	ldr	r2, [pc, #24]	; 25f00 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
   25ee4:	e2810f9a 	add	r0, r1, #616	; 0x268
   25ee8:	ebfff9e5 	bl	24684 <assertion_failed>
   25eec:	cccccccd 	.word	0xcccccccd
   25ef0:	0004da9c 	.word	0x0004da9c
   25ef4:	000449b0 	.word	0x000449b0
   25ef8:	000449c0 	.word	0x000449c0
   25efc:	00000181 	.word	0x00000181
   25f00:	00000185 	.word	0x00000185

00025f04 <CGPIOPin::InterruptHandler()>:
   25f04:	e5d03010 	ldrb	r3, [r0, #16]
   25f08:	e92d4010 	push	{r4, lr}
   25f0c:	e2432002 	sub	r2, r3, #2
   25f10:	e3530000 	cmp	r3, #0
   25f14:	13520001 	cmpne	r2, #1
   25f18:	8a000013 	bhi	25f6c <CGPIOPin::InterruptHandler()+0x68>
   25f1c:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25f20:	e3530005 	cmp	r3, #5
   25f24:	8a000005 	bhi	25f40 <CGPIOPin::InterruptHandler()+0x3c>
   25f28:	e590301c 	ldr	r3, [r0, #28]
   25f2c:	e3530000 	cmp	r3, #0
   25f30:	0a000009 	beq	25f5c <CGPIOPin::InterruptHandler()+0x58>
   25f34:	e8bd4010 	pop	{r4, lr}
   25f38:	e5900020 	ldr	r0, [r0, #32]
   25f3c:	e12fff13 	bx	r3
   25f40:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25f44:	e3530005 	cmp	r3, #5
   25f48:	9afffff6 	bls	25f28 <CGPIOPin::InterruptHandler()+0x24>
   25f4c:	e59f1028 	ldr	r1, [pc, #40]	; 25f7c <CGPIOPin::InterruptHandler()+0x78>
   25f50:	e59f2028 	ldr	r2, [pc, #40]	; 25f80 <CGPIOPin::InterruptHandler()+0x7c>
   25f54:	e2810f9e 	add	r0, r1, #632	; 0x278
   25f58:	ebfff9c9 	bl	24684 <assertion_failed>
   25f5c:	e59f1018 	ldr	r1, [pc, #24]	; 25f7c <CGPIOPin::InterruptHandler()+0x78>
   25f60:	e3a02f66 	mov	r2, #408	; 0x198
   25f64:	e2810f61 	add	r0, r1, #388	; 0x184
   25f68:	ebfff9c5 	bl	24684 <assertion_failed>
   25f6c:	e59f1008 	ldr	r1, [pc, #8]	; 25f7c <CGPIOPin::InterruptHandler()+0x78>
   25f70:	e59f200c 	ldr	r2, [pc, #12]	; 25f84 <CGPIOPin::InterruptHandler()+0x80>
   25f74:	e2810090 	add	r0, r1, #144	; 0x90
   25f78:	ebfff9c1 	bl	24684 <assertion_failed>
   25f7c:	000449c0 	.word	0x000449c0
   25f80:	00000195 	.word	0x00000195
   25f84:	00000192 	.word	0x00000192

00025f88 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   25f88:	e3500035 	cmp	r0, #53	; 0x35
   25f8c:	e92d4070 	push	{r4, r5, r6, lr}
   25f90:	8a000018 	bhi	25ff8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
   25f94:	e3a02001 	mov	r2, #1
   25f98:	e59f6068 	ldr	r6, [pc, #104]	; 26008 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x80>
   25f9c:	e59f4068 	ldr	r4, [pc, #104]	; 2600c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
   25fa0:	e5963000 	ldr	r3, [r6]
   25fa4:	e08442a0 	add	r4, r4, r0, lsr #5
   25fa8:	e200501f 	and	r5, r0, #31
   25fac:	e3530000 	cmp	r3, #0
   25fb0:	e1a04104 	lsl	r4, r4, #2
   25fb4:	e1a05512 	lsl	r5, r2, r5
   25fb8:	1a00000b 	bne	25fec <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>
   25fbc:	e1e02005 	mvn	r2, r5
   25fc0:	e59f1048 	ldr	r1, [pc, #72]	; 26010 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
   25fc4:	e5943000 	ldr	r3, [r4]
   25fc8:	e0033002 	and	r3, r3, r2
   25fcc:	e484300c 	str	r3, [r4], #12
   25fd0:	e1540001 	cmp	r4, r1
   25fd4:	9afffffa 	bls	25fc4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
   25fd8:	e5963000 	ldr	r3, [r6]
   25fdc:	e3530000 	cmp	r3, #0
   25fe0:	08bd8070 	popeq	{r4, r5, r6, pc}
   25fe4:	e8bd4070 	pop	{r4, r5, r6, lr}
   25fe8:	ea001703 	b	2bbfc <LeaveCritical>
   25fec:	e1a00003 	mov	r0, r3
   25ff0:	eb0016d7 	bl	2bb54 <EnterCritical>
   25ff4:	eafffff0 	b	25fbc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x34>
   25ff8:	e59f1014 	ldr	r1, [pc, #20]	; 26014 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
   25ffc:	e59f2014 	ldr	r2, [pc, #20]	; 26018 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x90>
   26000:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   26004:	ebfff99e 	bl	24684 <assertion_failed>
   26008:	0004da9c 	.word	0x0004da9c
   2600c:	08080013 	.word	0x08080013
   26010:	2020008b 	.word	0x2020008b
   26014:	000449c0 	.word	0x000449c0
   26018:	0000019e 	.word	0x0000019e

0002601c <__static_initialization_and_destruction_0(int, int)>:
   2601c:	e59f3014 	ldr	r3, [pc, #20]	; 26038 <__static_initialization_and_destruction_0(int, int)+0x1c>
   26020:	e1510003 	cmp	r1, r3
   26024:	03500001 	cmpeq	r0, #1
   26028:	03a02001 	moveq	r2, #1
   2602c:	059f3008 	ldreq	r3, [pc, #8]	; 2603c <__static_initialization_and_destruction_0(int, int)+0x20>
   26030:	05832000 	streq	r2, [r3]
   26034:	e12fff1e 	bx	lr
   26038:	0000ffff 	.word	0x0000ffff
   2603c:	0004da9c 	.word	0x0004da9c

00026040 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   26040:	e3a02001 	mov	r2, #1
   26044:	e59f3004 	ldr	r3, [pc, #4]	; 26050 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
   26048:	e5832000 	str	r2, [r3]
   2604c:	e12fff1e 	bx	lr
   26050:	0004da9c 	.word	0x0004da9c

00026054 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   26054:	e3a01000 	mov	r1, #0
   26058:	ea00000a 	b	26088 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
   2605c:	e3520009 	cmp	r2, #9
   26060:	8a000011 	bhi	260ac <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   26064:	e3730001 	cmn	r3, #1
   26068:	13a02000 	movne	r2, #0
   2606c:	03a02001 	moveq	r2, #1
   26070:	e1510003 	cmp	r1, r3
   26074:	91a01002 	movls	r1, r2
   26078:	83821001 	orrhi	r1, r2, #1
   2607c:	e3510000 	cmp	r1, #0
   26080:	1a000009 	bne	260ac <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   26084:	e1a01003 	mov	r1, r3
   26088:	e0d0c0d1 	ldrsb	ip, [r0], #1
   2608c:	e0813101 	add	r3, r1, r1, lsl #2
   26090:	e24c2030 	sub	r2, ip, #48	; 0x30
   26094:	e35c0000 	cmp	ip, #0
   26098:	e0823083 	add	r3, r2, r3, lsl #1
   2609c:	e6ef2072 	uxtb	r2, r2
   260a0:	1affffed 	bne	2605c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
   260a4:	e1a00001 	mov	r0, r1
   260a8:	e12fff1e 	bx	lr
   260ac:	e3e01000 	mvn	r1, #0
   260b0:	e1a00001 	mov	r0, r1
   260b4:	e12fff1e 	bx	lr

000260b8 <CKernelOptions::~CKernelOptions()>:
   260b8:	e3a02000 	mov	r2, #0
   260bc:	e59f3004 	ldr	r3, [pc, #4]	; 260c8 <CKernelOptions::~CKernelOptions()+0x10>
   260c0:	e5832000 	str	r2, [r3]
   260c4:	e12fff1e 	bx	lr
   260c8:	0004daa0 	.word	0x0004daa0

000260cc <CKernelOptions::GetWidth() const>:
   260cc:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
   260d0:	e12fff1e 	bx	lr

000260d4 <CKernelOptions::GetHeight() const>:
   260d4:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
   260d8:	e12fff1e 	bx	lr

000260dc <CKernelOptions::GetLogDevice() const>:
   260dc:	e2800e81 	add	r0, r0, #2064	; 0x810
   260e0:	e2800008 	add	r0, r0, #8
   260e4:	e12fff1e 	bx	lr

000260e8 <CKernelOptions::GetLogLevel() const>:
   260e8:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
   260ec:	e12fff1e 	bx	lr

000260f0 <CKernelOptions::GetKeyMap() const>:
   260f0:	e2800e83 	add	r0, r0, #2096	; 0x830
   260f4:	e12fff1e 	bx	lr

000260f8 <CKernelOptions::GetUSBPowerDelay() const>:
   260f8:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
   260fc:	e12fff1e 	bx	lr

00026100 <CKernelOptions::GetUSBFullSpeed() const>:
   26100:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
   26104:	e12fff1e 	bx	lr

00026108 <CKernelOptions::GetSoundDevice() const>:
   26108:	e2800e83 	add	r0, r0, #2096	; 0x830
   2610c:	e2800009 	add	r0, r0, #9
   26110:	e12fff1e 	bx	lr

00026114 <CKernelOptions::GetSoundOption() const>:
   26114:	e5900850 	ldr	r0, [r0, #2128]	; 0x850
   26118:	e12fff1e 	bx	lr

0002611c <CKernelOptions::GetCPUSpeed() const>:
   2611c:	e5d00854 	ldrb	r0, [r0, #2132]	; 0x854
   26120:	e12fff1e 	bx	lr

00026124 <CKernelOptions::GetSoCMaxTemp() const>:
   26124:	e5900858 	ldr	r0, [r0, #2136]	; 0x858
   26128:	e12fff1e 	bx	lr

0002612c <CKernelOptions::Get()>:
   2612c:	e59f3004 	ldr	r3, [pc, #4]	; 26138 <CKernelOptions::Get()+0xc>
   26130:	e5930000 	ldr	r0, [r3]
   26134:	e12fff1e 	bx	lr
   26138:	0004daa0 	.word	0x0004daa0

0002613c <CKernelOptions::GetToken()>:
   2613c:	e1a01000 	mov	r1, r0
   26140:	e590080c 	ldr	r0, [r0, #2060]	; 0x80c
   26144:	e1d030d0 	ldrsb	r3, [r0]
   26148:	e3530000 	cmp	r3, #0
   2614c:	1a000005 	bne	26168 <CKernelOptions::GetToken()+0x2c>
   26150:	ea000017 	b	261b4 <CKernelOptions::GetToken()+0x78>
   26154:	e2800001 	add	r0, r0, #1
   26158:	e581080c 	str	r0, [r1, #2060]	; 0x80c
   2615c:	e1d030d0 	ldrsb	r3, [r0]
   26160:	e3530000 	cmp	r3, #0
   26164:	0a000012 	beq	261b4 <CKernelOptions::GetToken()+0x78>
   26168:	e3530020 	cmp	r3, #32
   2616c:	0afffff8 	beq	26154 <CKernelOptions::GetToken()+0x18>
   26170:	e591380c 	ldr	r3, [r1, #2060]	; 0x80c
   26174:	e1d320d0 	ldrsb	r2, [r3]
   26178:	e3520000 	cmp	r2, #0
   2617c:	1a000005 	bne	26198 <CKernelOptions::GetToken()+0x5c>
   26180:	e12fff1e 	bx	lr
   26184:	e2833001 	add	r3, r3, #1
   26188:	e581380c 	str	r3, [r1, #2060]	; 0x80c
   2618c:	e1d320d0 	ldrsb	r2, [r3]
   26190:	e3520000 	cmp	r2, #0
   26194:	012fff1e 	bxeq	lr
   26198:	e3520020 	cmp	r2, #32
   2619c:	1afffff8 	bne	26184 <CKernelOptions::GetToken()+0x48>
   261a0:	e3a02000 	mov	r2, #0
   261a4:	e283c001 	add	ip, r3, #1
   261a8:	e581c80c 	str	ip, [r1, #2060]	; 0x80c
   261ac:	e5c32000 	strb	r2, [r3]
   261b0:	e12fff1e 	bx	lr
   261b4:	e3a00000 	mov	r0, #0
   261b8:	e12fff1e 	bx	lr

000261bc <CKernelOptions::CKernelOptions()>:
   261bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   261c0:	e3a02004 	mov	r2, #4
   261c4:	e1a05000 	mov	r5, r0
   261c8:	e3a04000 	mov	r4, #0
   261cc:	e3a0303c 	mov	r3, #60	; 0x3c
   261d0:	e2807e81 	add	r7, r0, #2064	; 0x810
   261d4:	e2877008 	add	r7, r7, #8
   261d8:	e580282c 	str	r2, [r0, #2092]	; 0x82c
   261dc:	e5803858 	str	r3, [r0, #2136]	; 0x858
   261e0:	e24dd014 	sub	sp, sp, #20
   261e4:	e59f1378 	ldr	r1, [pc, #888]	; 26564 <CKernelOptions::CKernelOptions()+0x3a8>
   261e8:	e1a00007 	mov	r0, r7
   261ec:	e5854810 	str	r4, [r5, #2064]	; 0x810
   261f0:	e5854814 	str	r4, [r5, #2068]	; 0x814
   261f4:	e5854834 	str	r4, [r5, #2100]	; 0x834
   261f8:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
   261fc:	e5854850 	str	r4, [r5, #2128]	; 0x850
   26200:	e5c54854 	strb	r4, [r5, #2132]	; 0x854
   26204:	e2859e83 	add	r9, r5, #2096	; 0x830
   26208:	eb000fe7 	bl	2a1ac <strcpy>
   2620c:	e59f1354 	ldr	r1, [pc, #852]	; 26568 <CKernelOptions::CKernelOptions()+0x3ac>
   26210:	e1a00009 	mov	r0, r9
   26214:	eb000fe4 	bl	2a1ac <strcpy>
   26218:	e59f334c 	ldr	r3, [pc, #844]	; 2656c <CKernelOptions::CKernelOptions()+0x3b0>
   2621c:	e1a01004 	mov	r1, r4
   26220:	e5c54839 	strb	r4, [r5, #2105]	; 0x839
   26224:	e28d0008 	add	r0, sp, #8
   26228:	e5835000 	str	r5, [r3]
   2622c:	ebfff935 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   26230:	e1a02005 	mov	r2, r5
   26234:	e59f3334 	ldr	r3, [pc, #820]	; 26570 <CKernelOptions::CKernelOptions()+0x3b4>
   26238:	e59f1334 	ldr	r1, [pc, #820]	; 26574 <CKernelOptions::CKernelOptions()+0x3b8>
   2623c:	e58d4000 	str	r4, [sp]
   26240:	e28d0008 	add	r0, sp, #8
   26244:	ebfff93b 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   26248:	e1500004 	cmp	r0, r4
   2624c:	0a00002b 	beq	26300 <CKernelOptions::CKernelOptions()+0x144>
   26250:	e5953008 	ldr	r3, [r5, #8]
   26254:	e3530b02 	cmp	r3, #2048	; 0x800
   26258:	2a000028 	bcs	26300 <CKernelOptions::CKernelOptions()+0x144>
   2625c:	e0853003 	add	r3, r5, r3
   26260:	e285200c 	add	r2, r5, #12
   26264:	e59f830c 	ldr	r8, [pc, #780]	; 26578 <CKernelOptions::CKernelOptions()+0x3bc>
   26268:	e59fa30c 	ldr	sl, [pc, #780]	; 2657c <CKernelOptions::CKernelOptions()+0x3c0>
   2626c:	e5c3400c 	strb	r4, [r3, #12]
   26270:	e585280c 	str	r2, [r5, #2060]	; 0x80c
   26274:	e1a00005 	mov	r0, r5
   26278:	ebffffaf 	bl	2613c <CKernelOptions::GetToken()>
   2627c:	e2506000 	subs	r6, r0, #0
   26280:	0a00001e 	beq	26300 <CKernelOptions::CKernelOptions()+0x144>
   26284:	e1d630d0 	ldrsb	r3, [r6]
   26288:	e3530000 	cmp	r3, #0
   2628c:	0a00002e 	beq	2634c <CKernelOptions::CKernelOptions()+0x190>
   26290:	e1a04006 	mov	r4, r6
   26294:	ea000002 	b	262a4 <CKernelOptions::CKernelOptions()+0xe8>
   26298:	e1f430d1 	ldrsb	r3, [r4, #1]!
   2629c:	e3530000 	cmp	r3, #0
   262a0:	0a000029 	beq	2634c <CKernelOptions::CKernelOptions()+0x190>
   262a4:	e353003d 	cmp	r3, #61	; 0x3d
   262a8:	1afffffa 	bne	26298 <CKernelOptions::CKernelOptions()+0xdc>
   262ac:	e3a03000 	mov	r3, #0
   262b0:	e1a0b004 	mov	fp, r4
   262b4:	e1a01008 	mov	r1, r8
   262b8:	e1a00006 	mov	r0, r6
   262bc:	e4cb3001 	strb	r3, [fp], #1
   262c0:	eb000f1f 	bl	29f44 <strcmp>
   262c4:	e3500000 	cmp	r0, #0
   262c8:	1a000011 	bne	26314 <CKernelOptions::CKernelOptions()+0x158>
   262cc:	e1d430d1 	ldrsb	r3, [r4, #1]
   262d0:	e3530000 	cmp	r3, #0
   262d4:	0affffe6 	beq	26274 <CKernelOptions::CKernelOptions()+0xb8>
   262d8:	e1a0000b 	mov	r0, fp
   262dc:	ebffff5c 	bl	26054 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   262e0:	e59f3298 	ldr	r3, [pc, #664]	; 26580 <CKernelOptions::CKernelOptions()+0x3c4>
   262e4:	e2402d0a 	sub	r2, r0, #640	; 0x280
   262e8:	e1520003 	cmp	r2, r3
   262ec:	95850810 	strls	r0, [r5, #2064]	; 0x810
   262f0:	e1a00005 	mov	r0, r5
   262f4:	ebffff90 	bl	2613c <CKernelOptions::GetToken()>
   262f8:	e2506000 	subs	r6, r0, #0
   262fc:	1affffe0 	bne	26284 <CKernelOptions::CKernelOptions()+0xc8>
   26300:	e28d0008 	add	r0, sp, #8
   26304:	ebfff906 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   26308:	e1a00005 	mov	r0, r5
   2630c:	e28dd014 	add	sp, sp, #20
   26310:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26314:	e1a0100a 	mov	r1, sl
   26318:	e1a00006 	mov	r0, r6
   2631c:	eb000f08 	bl	29f44 <strcmp>
   26320:	e3500000 	cmp	r0, #0
   26324:	1a000013 	bne	26378 <CKernelOptions::CKernelOptions()+0x1bc>
   26328:	e1d430d1 	ldrsb	r3, [r4, #1]
   2632c:	e3530000 	cmp	r3, #0
   26330:	0affffcf 	beq	26274 <CKernelOptions::CKernelOptions()+0xb8>
   26334:	e1a0000b 	mov	r0, fp
   26338:	ebffff45 	bl	26054 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   2633c:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
   26340:	e3530f96 	cmp	r3, #600	; 0x258
   26344:	95850814 	strls	r0, [r5, #2068]	; 0x814
   26348:	eaffffc9 	b	26274 <CKernelOptions::CKernelOptions()+0xb8>
   2634c:	e1a01008 	mov	r1, r8
   26350:	e1a00006 	mov	r0, r6
   26354:	eb000efa 	bl	29f44 <strcmp>
   26358:	e3500000 	cmp	r0, #0
   2635c:	0affffc4 	beq	26274 <CKernelOptions::CKernelOptions()+0xb8>
   26360:	e1a0100a 	mov	r1, sl
   26364:	e1a00006 	mov	r0, r6
   26368:	eb000ef5 	bl	29f44 <strcmp>
   2636c:	e3500000 	cmp	r0, #0
   26370:	13a0b000 	movne	fp, #0
   26374:	0affffbe 	beq	26274 <CKernelOptions::CKernelOptions()+0xb8>
   26378:	e1a00006 	mov	r0, r6
   2637c:	e59f1200 	ldr	r1, [pc, #512]	; 26584 <CKernelOptions::CKernelOptions()+0x3c8>
   26380:	eb000eef 	bl	29f44 <strcmp>
   26384:	e2504000 	subs	r4, r0, #0
   26388:	0a00000e 	beq	263c8 <CKernelOptions::CKernelOptions()+0x20c>
   2638c:	e1a00006 	mov	r0, r6
   26390:	e59f11f0 	ldr	r1, [pc, #496]	; 26588 <CKernelOptions::CKernelOptions()+0x3cc>
   26394:	eb000eea 	bl	29f44 <strcmp>
   26398:	e3500000 	cmp	r0, #0
   2639c:	1a00000f 	bne	263e0 <CKernelOptions::CKernelOptions()+0x224>
   263a0:	e35b0000 	cmp	fp, #0
   263a4:	0affffb2 	beq	26274 <CKernelOptions::CKernelOptions()+0xb8>
   263a8:	e1db30d0 	ldrsb	r3, [fp]
   263ac:	e3530000 	cmp	r3, #0
   263b0:	0affffaf 	beq	26274 <CKernelOptions::CKernelOptions()+0xb8>
   263b4:	e1a0000b 	mov	r0, fp
   263b8:	ebffff25 	bl	26054 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   263bc:	e3500004 	cmp	r0, #4
   263c0:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
   263c4:	eaffffaa 	b	26274 <CKernelOptions::CKernelOptions()+0xb8>
   263c8:	e1a0100b 	mov	r1, fp
   263cc:	e3a02013 	mov	r2, #19
   263d0:	e1a00007 	mov	r0, r7
   263d4:	eb000f7f 	bl	2a1d8 <strncpy>
   263d8:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
   263dc:	eaffffa4 	b	26274 <CKernelOptions::CKernelOptions()+0xb8>
   263e0:	e1a00006 	mov	r0, r6
   263e4:	e59f11a0 	ldr	r1, [pc, #416]	; 2658c <CKernelOptions::CKernelOptions()+0x3d0>
   263e8:	eb000ed5 	bl	29f44 <strcmp>
   263ec:	e2504000 	subs	r4, r0, #0
   263f0:	0a000010 	beq	26438 <CKernelOptions::CKernelOptions()+0x27c>
   263f4:	e1a00006 	mov	r0, r6
   263f8:	e59f1190 	ldr	r1, [pc, #400]	; 26590 <CKernelOptions::CKernelOptions()+0x3d4>
   263fc:	eb000ed0 	bl	29f44 <strcmp>
   26400:	e3500000 	cmp	r0, #0
   26404:	1a000011 	bne	26450 <CKernelOptions::CKernelOptions()+0x294>
   26408:	e35b0000 	cmp	fp, #0
   2640c:	0affff98 	beq	26274 <CKernelOptions::CKernelOptions()+0xb8>
   26410:	e1db30d0 	ldrsb	r3, [fp]
   26414:	e3530000 	cmp	r3, #0
   26418:	0affff95 	beq	26274 <CKernelOptions::CKernelOptions()+0xb8>
   2641c:	e1a0000b 	mov	r0, fp
   26420:	ebffff0b 	bl	26054 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26424:	e59f3168 	ldr	r3, [pc, #360]	; 26594 <CKernelOptions::CKernelOptions()+0x3d8>
   26428:	e24020c8 	sub	r2, r0, #200	; 0xc8
   2642c:	e1520003 	cmp	r2, r3
   26430:	95850834 	strls	r0, [r5, #2100]	; 0x834
   26434:	eaffff8e 	b	26274 <CKernelOptions::CKernelOptions()+0xb8>
   26438:	e1a0100b 	mov	r1, fp
   2643c:	e3a02002 	mov	r2, #2
   26440:	e1a00009 	mov	r0, r9
   26444:	eb000f63 	bl	2a1d8 <strncpy>
   26448:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
   2644c:	eaffff88 	b	26274 <CKernelOptions::CKernelOptions()+0xb8>
   26450:	e1a00006 	mov	r0, r6
   26454:	e59f113c 	ldr	r1, [pc, #316]	; 26598 <CKernelOptions::CKernelOptions()+0x3dc>
   26458:	eb000eb9 	bl	29f44 <strcmp>
   2645c:	e3500000 	cmp	r0, #0
   26460:	1a000006 	bne	26480 <CKernelOptions::CKernelOptions()+0x2c4>
   26464:	e1a0000b 	mov	r0, fp
   26468:	e59f112c 	ldr	r1, [pc, #300]	; 2659c <CKernelOptions::CKernelOptions()+0x3e0>
   2646c:	eb000eb4 	bl	29f44 <strcmp>
   26470:	e3500000 	cmp	r0, #0
   26474:	03a03001 	moveq	r3, #1
   26478:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
   2647c:	eaffff7c 	b	26274 <CKernelOptions::CKernelOptions()+0xb8>
   26480:	e1a00006 	mov	r0, r6
   26484:	e59f1114 	ldr	r1, [pc, #276]	; 265a0 <CKernelOptions::CKernelOptions()+0x3e4>
   26488:	eb000ead 	bl	29f44 <strcmp>
   2648c:	e2504000 	subs	r4, r0, #0
   26490:	1a000005 	bne	264ac <CKernelOptions::CKernelOptions()+0x2f0>
   26494:	e1a0100b 	mov	r1, fp
   26498:	e3a02013 	mov	r2, #19
   2649c:	e2890009 	add	r0, r9, #9
   264a0:	eb000f4c 	bl	2a1d8 <strncpy>
   264a4:	e5c5484c 	strb	r4, [r5, #2124]	; 0x84c
   264a8:	eaffff71 	b	26274 <CKernelOptions::CKernelOptions()+0xb8>
   264ac:	e1a00006 	mov	r0, r6
   264b0:	e59f10ec 	ldr	r1, [pc, #236]	; 265a4 <CKernelOptions::CKernelOptions()+0x3e8>
   264b4:	eb000ea2 	bl	29f44 <strcmp>
   264b8:	e3500000 	cmp	r0, #0
   264bc:	1a000009 	bne	264e8 <CKernelOptions::CKernelOptions()+0x32c>
   264c0:	e35b0000 	cmp	fp, #0
   264c4:	0affff6a 	beq	26274 <CKernelOptions::CKernelOptions()+0xb8>
   264c8:	e1db30d0 	ldrsb	r3, [fp]
   264cc:	e3530000 	cmp	r3, #0
   264d0:	0affff67 	beq	26274 <CKernelOptions::CKernelOptions()+0xb8>
   264d4:	e1a0000b 	mov	r0, fp
   264d8:	ebfffedd 	bl	26054 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   264dc:	e3500002 	cmp	r0, #2
   264e0:	95850850 	strls	r0, [r5, #2128]	; 0x850
   264e4:	eaffff62 	b	26274 <CKernelOptions::CKernelOptions()+0xb8>
   264e8:	e1a00006 	mov	r0, r6
   264ec:	e59f10b4 	ldr	r1, [pc, #180]	; 265a8 <CKernelOptions::CKernelOptions()+0x3ec>
   264f0:	eb000e93 	bl	29f44 <strcmp>
   264f4:	e3500000 	cmp	r0, #0
   264f8:	1a000006 	bne	26518 <CKernelOptions::CKernelOptions()+0x35c>
   264fc:	e1a0000b 	mov	r0, fp
   26500:	e59f10a4 	ldr	r1, [pc, #164]	; 265ac <CKernelOptions::CKernelOptions()+0x3f0>
   26504:	eb000e8e 	bl	29f44 <strcmp>
   26508:	e3500000 	cmp	r0, #0
   2650c:	03a03001 	moveq	r3, #1
   26510:	05c53854 	strbeq	r3, [r5, #2132]	; 0x854
   26514:	eaffff56 	b	26274 <CKernelOptions::CKernelOptions()+0xb8>
   26518:	e1a00006 	mov	r0, r6
   2651c:	e59f108c 	ldr	r1, [pc, #140]	; 265b0 <CKernelOptions::CKernelOptions()+0x3f4>
   26520:	eb000e87 	bl	29f44 <strcmp>
   26524:	e16f3f1b 	clz	r3, fp
   26528:	e3500000 	cmp	r0, #0
   2652c:	e1a032a3 	lsr	r3, r3, #5
   26530:	01a00003 	moveq	r0, r3
   26534:	13a00001 	movne	r0, #1
   26538:	e3500000 	cmp	r0, #0
   2653c:	1affff4c 	bne	26274 <CKernelOptions::CKernelOptions()+0xb8>
   26540:	e1db30d0 	ldrsb	r3, [fp]
   26544:	e3530000 	cmp	r3, #0
   26548:	0affff49 	beq	26274 <CKernelOptions::CKernelOptions()+0xb8>
   2654c:	e1a0000b 	mov	r0, fp
   26550:	ebfffebf 	bl	26054 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26554:	e2403028 	sub	r3, r0, #40	; 0x28
   26558:	e3530026 	cmp	r3, #38	; 0x26
   2655c:	95850858 	strls	r0, [r5, #2136]	; 0x858
   26560:	eaffff43 	b	26274 <CKernelOptions::CKernelOptions()+0xb8>
   26564:	00044c98 	.word	0x00044c98
   26568:	00041398 	.word	0x00041398
   2656c:	0004daa0 	.word	0x0004daa0
   26570:	0000080c 	.word	0x0000080c
   26574:	00050001 	.word	0x00050001
   26578:	00044d1c 	.word	0x00044d1c
   2657c:	00044d14 	.word	0x00044d14
   26580:	0000053c 	.word	0x0000053c
   26584:	00044ca0 	.word	0x00044ca0
   26588:	00044ca8 	.word	0x00044ca8
   2658c:	00044cb4 	.word	0x00044cb4
   26590:	00044cbc 	.word	0x00044cbc
   26594:	00001e78 	.word	0x00001e78
   26598:	00044ccc 	.word	0x00044ccc
   2659c:	00044cd8 	.word	0x00044cd8
   265a0:	00044ce0 	.word	0x00044ce0
   265a4:	00044cec 	.word	0x00044cec
   265a8:	00044cf8 	.word	0x00044cf8
   265ac:	00044d00 	.word	0x00044d00
   265b0:	00044d08 	.word	0x00044d08

000265b4 <CKernelOptions::GetOptionValue(char*)>:
   265b4:	e1d030d0 	ldrsb	r3, [r0]
   265b8:	e3530000 	cmp	r3, #0
   265bc:	1a000003 	bne	265d0 <CKernelOptions::GetOptionValue(char*)+0x1c>
   265c0:	ea000007 	b	265e4 <CKernelOptions::GetOptionValue(char*)+0x30>
   265c4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   265c8:	e3530000 	cmp	r3, #0
   265cc:	0a000004 	beq	265e4 <CKernelOptions::GetOptionValue(char*)+0x30>
   265d0:	e353003d 	cmp	r3, #61	; 0x3d
   265d4:	1afffffa 	bne	265c4 <CKernelOptions::GetOptionValue(char*)+0x10>
   265d8:	e3a03000 	mov	r3, #0
   265dc:	e4c03001 	strb	r3, [r0], #1
   265e0:	e12fff1e 	bx	lr
   265e4:	e1a00003 	mov	r0, r3
   265e8:	e12fff1e 	bx	lr

000265ec <CKernelOptions::GetDecimal(char*)>:
   265ec:	e2503000 	subs	r3, r0, #0
   265f0:	0a000003 	beq	26604 <CKernelOptions::GetDecimal(char*)+0x18>
   265f4:	e1d330d0 	ldrsb	r3, [r3]
   265f8:	e3530000 	cmp	r3, #0
   265fc:	0a000000 	beq	26604 <CKernelOptions::GetDecimal(char*)+0x18>
   26600:	eafffe93 	b	26054 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26604:	e3e00000 	mvn	r0, #0
   26608:	e12fff1e 	bx	lr

0002660c <CLogger::CLogger(unsigned int, CTimer*)>:
   2660c:	e92d4010 	push	{r4, lr}
   26610:	e3a03000 	mov	r3, #0
   26614:	e1a04000 	mov	r4, r0
   26618:	e3a00001 	mov	r0, #1
   2661c:	e884000e 	stm	r4, {r1, r2, r3}
   26620:	e584300c 	str	r3, [r4, #12]
   26624:	e5843010 	str	r3, [r4, #16]
   26628:	e5843014 	str	r3, [r4, #20]
   2662c:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   26630:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   26634:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   26638:	e58430f4 	str	r3, [r4, #244]	; 0xf4
   2663c:	e5840018 	str	r0, [r4, #24]
   26640:	e58400ec 	str	r0, [r4, #236]	; 0xec
   26644:	e3a00901 	mov	r0, #16384	; 0x4000
   26648:	eb00121a 	bl	2aeb8 <operator new[](unsigned int)>
   2664c:	e59f300c 	ldr	r3, [pc, #12]	; 26660 <CLogger::CLogger(unsigned int, CTimer*)+0x54>
   26650:	e584000c 	str	r0, [r4, #12]
   26654:	e5834000 	str	r4, [r3]
   26658:	e1a00004 	mov	r0, r4
   2665c:	e8bd8010 	pop	{r4, pc}
   26660:	0004daa4 	.word	0x0004daa4

00026664 <CLogger::~CLogger()>:
   26664:	e92d4070 	push	{r4, r5, r6, lr}
   26668:	e3a02000 	mov	r2, #0
   2666c:	e1a04000 	mov	r4, r0
   26670:	e59f0064 	ldr	r0, [pc, #100]	; 266dc <CLogger::~CLogger()+0x78>
   26674:	e1a05002 	mov	r5, r2
   26678:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   2667c:	e59410e4 	ldr	r1, [r4, #228]	; 0xe4
   26680:	e5802000 	str	r2, [r0]
   26684:	ea00000b 	b	266b8 <CLogger::~CLogger()+0x54>
   26688:	e592001c 	ldr	r0, [r2, #28]
   2668c:	e3500000 	cmp	r0, #0
   26690:	0a000003 	beq	266a4 <CLogger::~CLogger()+0x40>
   26694:	e3a01f42 	mov	r1, #264	; 0x108
   26698:	eb00120e 	bl	2aed8 <operator delete(void*, unsigned int)>
   2669c:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   266a0:	e59410e4 	ldr	r1, [r4, #228]	; 0xe4
   266a4:	e2833001 	add	r3, r3, #1
   266a8:	e3530032 	cmp	r3, #50	; 0x32
   266ac:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   266b0:	03a03000 	moveq	r3, #0
   266b4:	058450e8 	streq	r5, [r4, #232]	; 0xe8
   266b8:	e1530001 	cmp	r3, r1
   266bc:	e0842103 	add	r2, r4, r3, lsl #2
   266c0:	1afffff0 	bne	26688 <CLogger::~CLogger()+0x24>
   266c4:	e594000c 	ldr	r0, [r4, #12]
   266c8:	e3500000 	cmp	r0, #0
   266cc:	0a000000 	beq	266d4 <CLogger::~CLogger()+0x70>
   266d0:	eb0011ff 	bl	2aed4 <operator delete[](void*)>
   266d4:	e1a00004 	mov	r0, r4
   266d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   266dc:	0004daa4 	.word	0x0004daa4

000266e0 <CLogger::Initialize(CDevice*)>:
   266e0:	e92d4010 	push	{r4, lr}
   266e4:	e5801008 	str	r1, [r0, #8]
   266e8:	e24dd008 	sub	sp, sp, #8
   266ec:	e1a04000 	mov	r4, r0
   266f0:	eb0003d0 	bl	27638 <CMachineInfo::Get()>
   266f4:	eb0002e7 	bl	27298 <CMachineInfo::GetMachineName() const>
   266f8:	e1a02000 	mov	r2, r0
   266fc:	e59f301c 	ldr	r3, [pc, #28]	; 26720 <CLogger::Initialize(CDevice*)+0x40>
   26700:	e1a00004 	mov	r0, r4
   26704:	e58d2000 	str	r2, [sp]
   26708:	e283101c 	add	r1, r3, #28
   2670c:	e3a02003 	mov	r2, #3
   26710:	eb000005 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   26714:	e3a00001 	mov	r0, #1
   26718:	e28dd008 	add	sp, sp, #8
   2671c:	e8bd8010 	pop	{r4, pc}
   26720:	00044d24 	.word	0x00044d24

00026724 <CLogger::SetNewTarget(CDevice*)>:
   26724:	e5801008 	str	r1, [r0, #8]
   26728:	e12fff1e 	bx	lr

0002672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   2672c:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   26730:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   26734:	e24dd010 	sub	sp, sp, #16
   26738:	e28dc018 	add	ip, sp, #24
   2673c:	e59d3014 	ldr	r3, [sp, #20]
   26740:	e58dc000 	str	ip, [sp]
   26744:	e58dc00c 	str	ip, [sp, #12]
   26748:	eb000003 	bl	2675c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   2674c:	e28dd010 	add	sp, sp, #16
   26750:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   26754:	e28dd004 	add	sp, sp, #4
   26758:	e12fff1e 	bx	lr

0002675c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   2675c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   26760:	e1a07003 	mov	r7, r3
   26764:	e24dd024 	sub	sp, sp, #36	; 0x24
   26768:	e1a04000 	mov	r4, r0
   2676c:	e1a0000d 	mov	r0, sp
   26770:	e1a05002 	mov	r5, r2
   26774:	e1a06001 	mov	r6, r1
   26778:	eb000499 	bl	279e4 <CString::CString()>
   2677c:	e1a01007 	mov	r1, r7
   26780:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   26784:	e1a0000d 	mov	r0, sp
   26788:	eb0006b8 	bl	28270 <CString::FormatV(char const*, std::__va_list)>
   2678c:	e1a0000d 	mov	r0, sp
   26790:	eb0004ab 	bl	27a44 <CString::operator char const*() const>
   26794:	e1a02005 	mov	r2, r5
   26798:	e1a03000 	mov	r3, r0
   2679c:	e1a01006 	mov	r1, r6
   267a0:	e1a00004 	mov	r0, r4
   267a4:	eb000108 	bl	26bcc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   267a8:	e5943000 	ldr	r3, [r4]
   267ac:	e1550003 	cmp	r5, r3
   267b0:	8a000029 	bhi	2685c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x100>
   267b4:	e28d0010 	add	r0, sp, #16
   267b8:	eb000489 	bl	279e4 <CString::CString()>
   267bc:	e3550000 	cmp	r5, #0
   267c0:	0a000029 	beq	2686c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x110>
   267c4:	e5940004 	ldr	r0, [r4, #4]
   267c8:	e3500000 	cmp	r0, #0
   267cc:	0a00000d 	beq	26808 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   267d0:	eb000b3c 	bl	294c8 <CTimer::GetTimeString()>
   267d4:	e2505000 	subs	r5, r0, #0
   267d8:	0a00000a 	beq	26808 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   267dc:	eb000498 	bl	27a44 <CString::operator char const*() const>
   267e0:	e1a01000 	mov	r1, r0
   267e4:	e28d0010 	add	r0, sp, #16
   267e8:	eb0004cb 	bl	27b1c <CString::Append(char const*)>
   267ec:	e28d0010 	add	r0, sp, #16
   267f0:	e59f1138 	ldr	r1, [pc, #312]	; 26930 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
   267f4:	eb0004c8 	bl	27b1c <CString::Append(char const*)>
   267f8:	e5953000 	ldr	r3, [r5]
   267fc:	e1a00005 	mov	r0, r5
   26800:	e5933004 	ldr	r3, [r3, #4]
   26804:	e12fff33 	blx	r3
   26808:	e1a01006 	mov	r1, r6
   2680c:	e28d0010 	add	r0, sp, #16
   26810:	eb0004c1 	bl	27b1c <CString::Append(char const*)>
   26814:	e59f1118 	ldr	r1, [pc, #280]	; 26934 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
   26818:	e28d0010 	add	r0, sp, #16
   2681c:	eb0004be 	bl	27b1c <CString::Append(char const*)>
   26820:	e1a0000d 	mov	r0, sp
   26824:	eb000486 	bl	27a44 <CString::operator char const*() const>
   26828:	e1a01000 	mov	r1, r0
   2682c:	e28d0010 	add	r0, sp, #16
   26830:	eb0004b9 	bl	27b1c <CString::Append(char const*)>
   26834:	e59f10fc 	ldr	r1, [pc, #252]	; 26938 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
   26838:	e28d0010 	add	r0, sp, #16
   2683c:	eb0004b6 	bl	27b1c <CString::Append(char const*)>
   26840:	e28d0010 	add	r0, sp, #16
   26844:	eb00047e 	bl	27a44 <CString::operator char const*() const>
   26848:	e1a01000 	mov	r1, r0
   2684c:	e1a00004 	mov	r0, r4
   26850:	eb000077 	bl	26a34 <CLogger::Write(char const*)>
   26854:	e28d0010 	add	r0, sp, #16
   26858:	eb00042e 	bl	27918 <CString::~CString()>
   2685c:	e1a0000d 	mov	r0, sp
   26860:	eb00042c 	bl	27918 <CString::~CString()>
   26864:	e28dd024 	add	sp, sp, #36	; 0x24
   26868:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2686c:	e59f10c8 	ldr	r1, [pc, #200]	; 2693c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
   26870:	e28d0010 	add	r0, sp, #16
   26874:	eb000478 	bl	27a5c <CString::operator=(char const*)>
   26878:	e5940004 	ldr	r0, [r4, #4]
   2687c:	e3500000 	cmp	r0, #0
   26880:	0a00000d 	beq	268bc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
   26884:	eb000b0f 	bl	294c8 <CTimer::GetTimeString()>
   26888:	e2505000 	subs	r5, r0, #0
   2688c:	0a00000a 	beq	268bc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
   26890:	eb00046b 	bl	27a44 <CString::operator char const*() const>
   26894:	e1a01000 	mov	r1, r0
   26898:	e28d0010 	add	r0, sp, #16
   2689c:	eb00049e 	bl	27b1c <CString::Append(char const*)>
   268a0:	e28d0010 	add	r0, sp, #16
   268a4:	e59f1084 	ldr	r1, [pc, #132]	; 26930 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
   268a8:	eb00049b 	bl	27b1c <CString::Append(char const*)>
   268ac:	e5953000 	ldr	r3, [r5]
   268b0:	e1a00005 	mov	r0, r5
   268b4:	e5933004 	ldr	r3, [r3, #4]
   268b8:	e12fff33 	blx	r3
   268bc:	e1a01006 	mov	r1, r6
   268c0:	e28d0010 	add	r0, sp, #16
   268c4:	eb000494 	bl	27b1c <CString::Append(char const*)>
   268c8:	e59f1064 	ldr	r1, [pc, #100]	; 26934 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
   268cc:	e28d0010 	add	r0, sp, #16
   268d0:	eb000491 	bl	27b1c <CString::Append(char const*)>
   268d4:	e1a0000d 	mov	r0, sp
   268d8:	eb000459 	bl	27a44 <CString::operator char const*() const>
   268dc:	e1a01000 	mov	r1, r0
   268e0:	e28d0010 	add	r0, sp, #16
   268e4:	eb00048c 	bl	27b1c <CString::Append(char const*)>
   268e8:	e59f1050 	ldr	r1, [pc, #80]	; 26940 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   268ec:	e28d0010 	add	r0, sp, #16
   268f0:	eb000489 	bl	27b1c <CString::Append(char const*)>
   268f4:	e59f103c 	ldr	r1, [pc, #60]	; 26938 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
   268f8:	e28d0010 	add	r0, sp, #16
   268fc:	eb000486 	bl	27b1c <CString::Append(char const*)>
   26900:	e28d0010 	add	r0, sp, #16
   26904:	eb00044e 	bl	27a44 <CString::operator char const*() const>
   26908:	e1a01000 	mov	r1, r0
   2690c:	e1a00004 	mov	r0, r4
   26910:	eb000047 	bl	26a34 <CLogger::Write(char const*)>
   26914:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   26918:	e3530000 	cmp	r3, #0
   2691c:	0a000000 	beq	26924 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c8>
   26920:	e12fff33 	blx	r3
   26924:	e3a000ff 	mov	r0, #255	; 0xff
   26928:	eb000986 	bl	28f48 <set_qemu_exit_status>
   2692c:	eb000989 	bl	28f58 <halt>
   26930:	00044d60 	.word	0x00044d60
   26934:	00044d5c 	.word	0x00044d5c
   26938:	00044d50 	.word	0x00044d50
   2693c:	00044d48 	.word	0x00044d48
   26940:	00044d54 	.word	0x00044d54

00026944 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   26944:	e92d4070 	push	{r4, r5, r6, lr}
   26948:	e1a04000 	mov	r4, r0
   2694c:	e5900000 	ldr	r0, [r0]
   26950:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
   26954:	e1520000 	cmp	r2, r0
   26958:	8a000012 	bhi	269a8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x64>
   2695c:	e1a05003 	mov	r5, r3
   26960:	e3a03000 	mov	r3, #0
   26964:	e1520003 	cmp	r2, r3
   26968:	e5cd3000 	strb	r3, [sp]
   2696c:	0a00000f 	beq	269b0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
   26970:	e1a0000d 	mov	r0, sp
   26974:	eb000e25 	bl	2a210 <strcat>
   26978:	e59f1094 	ldr	r1, [pc, #148]	; 26a14 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   2697c:	e1a0000d 	mov	r0, sp
   26980:	eb000e22 	bl	2a210 <strcat>
   26984:	e1a01005 	mov	r1, r5
   26988:	e1a0000d 	mov	r0, sp
   2698c:	eb000e1f 	bl	2a210 <strcat>
   26990:	e59f1080 	ldr	r1, [pc, #128]	; 26a18 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   26994:	e1a0000d 	mov	r0, sp
   26998:	eb000e1c 	bl	2a210 <strcat>
   2699c:	e1a0100d 	mov	r1, sp
   269a0:	e1a00004 	mov	r0, r4
   269a4:	eb000022 	bl	26a34 <CLogger::Write(char const*)>
   269a8:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   269ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   269b0:	e1a06001 	mov	r6, r1
   269b4:	e1a0000d 	mov	r0, sp
   269b8:	e59f105c 	ldr	r1, [pc, #92]	; 26a1c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
   269bc:	eb000dfa 	bl	2a1ac <strcpy>
   269c0:	e1a01006 	mov	r1, r6
   269c4:	e1a0000d 	mov	r0, sp
   269c8:	eb000e10 	bl	2a210 <strcat>
   269cc:	e59f1040 	ldr	r1, [pc, #64]	; 26a14 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   269d0:	e1a0000d 	mov	r0, sp
   269d4:	eb000e0d 	bl	2a210 <strcat>
   269d8:	e1a01005 	mov	r1, r5
   269dc:	e1a0000d 	mov	r0, sp
   269e0:	eb000e0a 	bl	2a210 <strcat>
   269e4:	e59f1034 	ldr	r1, [pc, #52]	; 26a20 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
   269e8:	e1a0000d 	mov	r0, sp
   269ec:	eb000e07 	bl	2a210 <strcat>
   269f0:	e59f1020 	ldr	r1, [pc, #32]	; 26a18 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   269f4:	e1a0000d 	mov	r0, sp
   269f8:	eb000e04 	bl	2a210 <strcat>
   269fc:	e1a0100d 	mov	r1, sp
   26a00:	e1a00004 	mov	r0, r4
   26a04:	eb00000a 	bl	26a34 <CLogger::Write(char const*)>
   26a08:	e3a000ff 	mov	r0, #255	; 0xff
   26a0c:	eb00094d 	bl	28f48 <set_qemu_exit_status>
   26a10:	eb000950 	bl	28f58 <halt>
   26a14:	00044d5c 	.word	0x00044d5c
   26a18:	00044d50 	.word	0x00044d50
   26a1c:	00044d48 	.word	0x00044d48
   26a20:	00044d54 	.word	0x00044d54

00026a24 <CLogger::Get()>:
   26a24:	e59f3004 	ldr	r3, [pc, #4]	; 26a30 <CLogger::Get()+0xc>
   26a28:	e5930000 	ldr	r0, [r3]
   26a2c:	e12fff1e 	bx	lr
   26a30:	0004daa4 	.word	0x0004daa4

00026a34 <CLogger::Write(char const*)>:
   26a34:	e92d4070 	push	{r4, r5, r6, lr}
   26a38:	e1a04000 	mov	r4, r0
   26a3c:	e1a00001 	mov	r0, r1
   26a40:	e1a06001 	mov	r6, r1
   26a44:	eb000d34 	bl	29f1c <strlen>
   26a48:	e1a05000 	mov	r5, r0
   26a4c:	e5940008 	ldr	r0, [r4, #8]
   26a50:	e1a02005 	mov	r2, r5
   26a54:	e5903000 	ldr	r3, [r0]
   26a58:	e1a01006 	mov	r1, r6
   26a5c:	e593300c 	ldr	r3, [r3, #12]
   26a60:	e12fff33 	blx	r3
   26a64:	e5940018 	ldr	r0, [r4, #24]
   26a68:	e3500000 	cmp	r0, #0
   26a6c:	1a00001e 	bne	26aec <CLogger::Write(char const*)+0xb8>
   26a70:	e3550000 	cmp	r5, #0
   26a74:	e2450001 	sub	r0, r5, #1
   26a78:	08bd8070 	popeq	{r4, r5, r6, pc}
   26a7c:	e1a0e006 	mov	lr, r6
   26a80:	e59f1078 	ldr	r1, [pc, #120]	; 26b00 <CLogger::Write(char const*)+0xcc>
   26a84:	e0de50d1 	ldrsb	r5, [lr], #1
   26a88:	e26ec001 	rsb	ip, lr, #1
   26a8c:	e355000d 	cmp	r5, #13
   26a90:	e086c00c 	add	ip, r6, ip
   26a94:	0a000009 	beq	26ac0 <CLogger::Write(char const*)+0x8c>
   26a98:	e5942010 	ldr	r2, [r4, #16]
   26a9c:	e594300c 	ldr	r3, [r4, #12]
   26aa0:	e7c35002 	strb	r5, [r3, r2]
   26aa4:	e5943010 	ldr	r3, [r4, #16]
   26aa8:	e5942014 	ldr	r2, [r4, #20]
   26aac:	e2833001 	add	r3, r3, #1
   26ab0:	e0033001 	and	r3, r3, r1
   26ab4:	e1530002 	cmp	r3, r2
   26ab8:	e5843010 	str	r3, [r4, #16]
   26abc:	0a000006 	beq	26adc <CLogger::Write(char const*)+0xa8>
   26ac0:	e17c0000 	cmn	ip, r0
   26ac4:	1affffee 	bne	26a84 <CLogger::Write(char const*)+0x50>
   26ac8:	e5943018 	ldr	r3, [r4, #24]
   26acc:	e3530000 	cmp	r3, #0
   26ad0:	08bd8070 	popeq	{r4, r5, r6, pc}
   26ad4:	e8bd4070 	pop	{r4, r5, r6, lr}
   26ad8:	ea001447 	b	2bbfc <LeaveCritical>
   26adc:	e2433001 	sub	r3, r3, #1
   26ae0:	e0033001 	and	r3, r3, r1
   26ae4:	e5843010 	str	r3, [r4, #16]
   26ae8:	eafffff6 	b	26ac8 <CLogger::Write(char const*)+0x94>
   26aec:	eb001418 	bl	2bb54 <EnterCritical>
   26af0:	e3550000 	cmp	r5, #0
   26af4:	e2450001 	sub	r0, r5, #1
   26af8:	1affffdf 	bne	26a7c <CLogger::Write(char const*)+0x48>
   26afc:	eafffff1 	b	26ac8 <CLogger::Write(char const*)+0x94>
   26b00:	00003fff 	.word	0x00003fff

00026b04 <CLogger::Read(void*, unsigned int)>:
   26b04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26b08:	e1a04000 	mov	r4, r0
   26b0c:	e5900018 	ldr	r0, [r0, #24]
   26b10:	e1a05001 	mov	r5, r1
   26b14:	e3500000 	cmp	r0, #0
   26b18:	e1a06002 	mov	r6, r2
   26b1c:	1a00001f 	bne	26ba0 <CLogger::Read(void*, unsigned int)+0x9c>
   26b20:	e1c421d0 	ldrd	r2, [r4, #16]
   26b24:	e1520003 	cmp	r2, r3
   26b28:	0a000024 	beq	26bc0 <CLogger::Read(void*, unsigned int)+0xbc>
   26b2c:	e1a07006 	mov	r7, r6
   26b30:	e3a0c000 	mov	ip, #0
   26b34:	e59f208c 	ldr	r2, [pc, #140]	; 26bc8 <CLogger::Read(void*, unsigned int)+0xc4>
   26b38:	ea00000a 	b	26b68 <CLogger::Read(void*, unsigned int)+0x64>
   26b3c:	e594100c 	ldr	r1, [r4, #12]
   26b40:	e28cc001 	add	ip, ip, #1
   26b44:	e19130d3 	ldrsb	r3, [r1, r3]
   26b48:	e4c53001 	strb	r3, [r5], #1
   26b4c:	e5943014 	ldr	r3, [r4, #20]
   26b50:	e5941010 	ldr	r1, [r4, #16]
   26b54:	e2833001 	add	r3, r3, #1
   26b58:	e0033002 	and	r3, r3, r2
   26b5c:	e1530001 	cmp	r3, r1
   26b60:	e5843014 	str	r3, [r4, #20]
   26b64:	0a000006 	beq	26b84 <CLogger::Read(void*, unsigned int)+0x80>
   26b68:	e15c0006 	cmp	ip, r6
   26b6c:	1afffff2 	bne	26b3c <CLogger::Read(void*, unsigned int)+0x38>
   26b70:	e5943018 	ldr	r3, [r4, #24]
   26b74:	e3530000 	cmp	r3, #0
   26b78:	1a000005 	bne	26b94 <CLogger::Read(void*, unsigned int)+0x90>
   26b7c:	e1a00007 	mov	r0, r7
   26b80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26b84:	e5943018 	ldr	r3, [r4, #24]
   26b88:	e1a0700c 	mov	r7, ip
   26b8c:	e3530000 	cmp	r3, #0
   26b90:	0afffff9 	beq	26b7c <CLogger::Read(void*, unsigned int)+0x78>
   26b94:	eb001418 	bl	2bbfc <LeaveCritical>
   26b98:	e1a00007 	mov	r0, r7
   26b9c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26ba0:	eb0013eb 	bl	2bb54 <EnterCritical>
   26ba4:	e1c421d0 	ldrd	r2, [r4, #16]
   26ba8:	e1520003 	cmp	r2, r3
   26bac:	1affffde 	bne	26b2c <CLogger::Read(void*, unsigned int)+0x28>
   26bb0:	e5943018 	ldr	r3, [r4, #24]
   26bb4:	e3530000 	cmp	r3, #0
   26bb8:	0a000000 	beq	26bc0 <CLogger::Read(void*, unsigned int)+0xbc>
   26bbc:	eb00140e 	bl	2bbfc <LeaveCritical>
   26bc0:	e3e07000 	mvn	r7, #0
   26bc4:	eaffffec 	b	26b7c <CLogger::Read(void*, unsigned int)+0x78>
   26bc8:	00003fff 	.word	0x00003fff

00026bcc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   26bcc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26bd0:	e1a04000 	mov	r4, r0
   26bd4:	e24dd010 	sub	sp, sp, #16
   26bd8:	e3a00f42 	mov	r0, #264	; 0x108
   26bdc:	e1a06003 	mov	r6, r3
   26be0:	e1a07002 	mov	r7, r2
   26be4:	e58d1004 	str	r1, [sp, #4]
   26be8:	eb0010ac 	bl	2aea0 <operator new(unsigned int)>
   26bec:	e3a08000 	mov	r8, #0
   26bf0:	e1a05000 	mov	r5, r0
   26bf4:	e3a02032 	mov	r2, #50	; 0x32
   26bf8:	e59d1004 	ldr	r1, [sp, #4]
   26bfc:	e4c07001 	strb	r7, [r0], #1
   26c00:	eb000d74 	bl	2a1d8 <strncpy>
   26c04:	e1a01006 	mov	r1, r6
   26c08:	e3a020c8 	mov	r2, #200	; 0xc8
   26c0c:	e2850033 	add	r0, r5, #51	; 0x33
   26c10:	e5c58032 	strb	r8, [r5, #50]	; 0x32
   26c14:	eb000d6f 	bl	2a1d8 <strncpy>
   26c18:	e5940004 	ldr	r0, [r4, #4]
   26c1c:	e5c580fa 	strb	r8, [r5, #250]	; 0xfa
   26c20:	e1500008 	cmp	r0, r8
   26c24:	0a000004 	beq	26c3c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   26c28:	e28d200c 	add	r2, sp, #12
   26c2c:	e28d1008 	add	r1, sp, #8
   26c30:	eb0009b3 	bl	29304 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   26c34:	e1500008 	cmp	r0, r8
   26c38:	1a000038 	bne	26d20 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x154>
   26c3c:	e3a03000 	mov	r3, #0
   26c40:	e58530fc 	str	r3, [r5, #252]	; 0xfc
   26c44:	e5853100 	str	r3, [r5, #256]	; 0x100
   26c48:	e5853104 	str	r3, [r5, #260]	; 0x104
   26c4c:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
   26c50:	e3500000 	cmp	r0, #0
   26c54:	1a00002e 	bne	26d14 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x148>
   26c58:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   26c5c:	e0841103 	add	r1, r4, r3, lsl #2
   26c60:	e3530031 	cmp	r3, #49	; 0x31
   26c64:	e581501c 	str	r5, [r1, #28]
   26c68:	e2831001 	add	r1, r3, #1
   26c6c:	0a00001c 	beq	26ce4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x118>
   26c70:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
   26c74:	e58410e4 	str	r1, [r4, #228]	; 0xe4
   26c78:	e1510002 	cmp	r1, r2
   26c7c:	0a000007 	beq	26ca0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd4>
   26c80:	e3500000 	cmp	r0, #0
   26c84:	1a000014 	bne	26cdc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x110>
   26c88:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   26c8c:	e3530000 	cmp	r3, #0
   26c90:	0a000000 	beq	26c98 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
   26c94:	e12fff33 	blx	r3
   26c98:	e28dd010 	add	sp, sp, #16
   26c9c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26ca0:	e0843103 	add	r3, r4, r3, lsl #2
   26ca4:	e3510031 	cmp	r1, #49	; 0x31
   26ca8:	e5935020 	ldr	r5, [r3, #32]
   26cac:	03a03000 	moveq	r3, #0
   26cb0:	e2811001 	add	r1, r1, #1
   26cb4:	058430e8 	streq	r3, [r4, #232]	; 0xe8
   26cb8:	1a000010 	bne	26d00 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x134>
   26cbc:	e3500000 	cmp	r0, #0
   26cc0:	1a000011 	bne	26d0c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x140>
   26cc4:	e3550000 	cmp	r5, #0
   26cc8:	0affffee 	beq	26c88 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   26ccc:	e1a00005 	mov	r0, r5
   26cd0:	e3a01f42 	mov	r1, #264	; 0x108
   26cd4:	eb00107f 	bl	2aed8 <operator delete(void*, unsigned int)>
   26cd8:	eaffffea 	b	26c88 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   26cdc:	eb0013c6 	bl	2bbfc <LeaveCritical>
   26ce0:	eaffffe8 	b	26c88 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   26ce4:	e3a01000 	mov	r1, #0
   26ce8:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   26cec:	e58410e4 	str	r1, [r4, #228]	; 0xe4
   26cf0:	e1530001 	cmp	r3, r1
   26cf4:	1affffe1 	bne	26c80 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb4>
   26cf8:	e3a01001 	mov	r1, #1
   26cfc:	e594501c 	ldr	r5, [r4, #28]
   26d00:	e3500000 	cmp	r0, #0
   26d04:	e58410e8 	str	r1, [r4, #232]	; 0xe8
   26d08:	0affffed 	beq	26cc4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   26d0c:	eb0013ba 	bl	2bbfc <LeaveCritical>
   26d10:	eaffffeb 	b	26cc4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   26d14:	eb00138e 	bl	2bb54 <EnterCritical>
   26d18:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
   26d1c:	eaffffcd 	b	26c58 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   26d20:	e59d300c 	ldr	r3, [sp, #12]
   26d24:	e59f1020 	ldr	r1, [pc, #32]	; 26d4c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x180>
   26d28:	e59d2008 	ldr	r2, [sp, #8]
   26d2c:	e0831391 	umull	r1, r3, r1, r3
   26d30:	e1a036a3 	lsr	r3, r3, #13
   26d34:	e5940004 	ldr	r0, [r4, #4]
   26d38:	e5853100 	str	r3, [r5, #256]	; 0x100
   26d3c:	e58520fc 	str	r2, [r5, #252]	; 0xfc
   26d40:	eb000941 	bl	2924c <CTimer::GetTimeZone() const>
   26d44:	e5850104 	str	r0, [r5, #260]	; 0x104
   26d48:	eaffffbf 	b	26c4c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>
   26d4c:	d1b71759 	.word	0xd1b71759

00026d50 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   26d50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26d54:	e1a04000 	mov	r4, r0
   26d58:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
   26d5c:	e1a08001 	mov	r8, r1
   26d60:	e3500000 	cmp	r0, #0
   26d64:	e1a06002 	mov	r6, r2
   26d68:	e1a07003 	mov	r7, r3
   26d6c:	1a000022 	bne	26dfc <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
   26d70:	e594c0e8 	ldr	ip, [r4, #232]	; 0xe8
   26d74:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   26d78:	e15c0003 	cmp	ip, r3
   26d7c:	0a000028 	beq	26e24 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   26d80:	e35c0031 	cmp	ip, #49	; 0x31
   26d84:	e084310c 	add	r3, r4, ip, lsl #2
   26d88:	e593501c 	ldr	r5, [r3, #28]
   26d8c:	03a03000 	moveq	r3, #0
   26d90:	e28cc001 	add	ip, ip, #1
   26d94:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
   26d98:	058430e8 	streq	r3, [r4, #232]	; 0xe8
   26d9c:	e3500000 	cmp	r0, #0
   26da0:	1a000021 	bne	26e2c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
   26da4:	e1a01005 	mov	r1, r5
   26da8:	e4d13001 	ldrb	r3, [r1], #1
   26dac:	e1a00006 	mov	r0, r6
   26db0:	e5c83000 	strb	r3, [r8]
   26db4:	eb000cfc 	bl	2a1ac <strcpy>
   26db8:	e2851033 	add	r1, r5, #51	; 0x33
   26dbc:	e1a00007 	mov	r0, r7
   26dc0:	eb000cf9 	bl	2a1ac <strcpy>
   26dc4:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
   26dc8:	e59d1018 	ldr	r1, [sp, #24]
   26dcc:	e5953100 	ldr	r3, [r5, #256]	; 0x100
   26dd0:	e5812000 	str	r2, [r1]
   26dd4:	e59d201c 	ldr	r2, [sp, #28]
   26dd8:	e1a00005 	mov	r0, r5
   26ddc:	e5823000 	str	r3, [r2]
   26de0:	e5953104 	ldr	r3, [r5, #260]	; 0x104
   26de4:	e59d2020 	ldr	r2, [sp, #32]
   26de8:	e3a01f42 	mov	r1, #264	; 0x108
   26dec:	e5823000 	str	r3, [r2]
   26df0:	eb001038 	bl	2aed8 <operator delete(void*, unsigned int)>
   26df4:	e3a00001 	mov	r0, #1
   26df8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26dfc:	eb001354 	bl	2bb54 <EnterCritical>
   26e00:	e594c0e8 	ldr	ip, [r4, #232]	; 0xe8
   26e04:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   26e08:	e153000c 	cmp	r3, ip
   26e0c:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
   26e10:	1affffda 	bne	26d80 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
   26e14:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   26e18:	e3530000 	cmp	r3, #0
   26e1c:	0a000000 	beq	26e24 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   26e20:	eb001375 	bl	2bbfc <LeaveCritical>
   26e24:	e3a00000 	mov	r0, #0
   26e28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26e2c:	eb001372 	bl	2bbfc <LeaveCritical>
   26e30:	eaffffdb 	b	26da4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

00026e34 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   26e34:	e58010f0 	str	r1, [r0, #240]	; 0xf0
   26e38:	e12fff1e 	bx	lr

00026e3c <CLogger::RegisterPanicHandler(void (*)())>:
   26e3c:	e58010f4 	str	r1, [r0, #244]	; 0xf4
   26e40:	e12fff1e 	bx	lr

00026e44 <CMachineInfo::CMachineInfo()>:
   26e44:	e92d4810 	push	{r4, fp, lr}
   26e48:	e28db008 	add	fp, sp, #8
   26e4c:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   26e50:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
   26e54:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26e58:	e3a02000 	mov	r2, #0
   26e5c:	e5832000 	str	r2, [r3]
   26e60:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26e64:	e3a02010 	mov	r2, #16
   26e68:	e5c32004 	strb	r2, [r3, #4]
   26e6c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26e70:	e3a02000 	mov	r2, #0
   26e74:	e5832008 	str	r2, [r3, #8]
   26e78:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26e7c:	e3a02000 	mov	r2, #0
   26e80:	e583200c 	str	r2, [r3, #12]
   26e84:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26e88:	e3a02004 	mov	r2, #4
   26e8c:	e5c32010 	strb	r2, [r3, #16]
   26e90:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26e94:	e3a02000 	mov	r2, #0
   26e98:	e5832014 	str	r2, [r3, #20]
   26e9c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26ea0:	e59f23b4 	ldr	r2, [pc, #948]	; 2725c <CMachineInfo::CMachineInfo()+0x418>
   26ea4:	e1c321b8 	strh	r2, [r3, #24]
   26ea8:	e59f33b0 	ldr	r3, [pc, #944]	; 27260 <CMachineInfo::CMachineInfo()+0x41c>
   26eac:	e5933000 	ldr	r3, [r3]
   26eb0:	e3530000 	cmp	r3, #0
   26eb4:	0a00001e 	beq	26f34 <CMachineInfo::CMachineInfo()+0xf0>
   26eb8:	e59f33a0 	ldr	r3, [pc, #928]	; 27260 <CMachineInfo::CMachineInfo()+0x41c>
   26ebc:	e5933000 	ldr	r3, [r3]
   26ec0:	e5932000 	ldr	r2, [r3]
   26ec4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26ec8:	e5832000 	str	r2, [r3]
   26ecc:	e59f338c 	ldr	r3, [pc, #908]	; 27260 <CMachineInfo::CMachineInfo()+0x41c>
   26ed0:	e5933000 	ldr	r3, [r3]
   26ed4:	e5d32004 	ldrb	r2, [r3, #4]
   26ed8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26edc:	e5c32004 	strb	r2, [r3, #4]
   26ee0:	e59f3378 	ldr	r3, [pc, #888]	; 27260 <CMachineInfo::CMachineInfo()+0x41c>
   26ee4:	e5933000 	ldr	r3, [r3]
   26ee8:	e5932008 	ldr	r2, [r3, #8]
   26eec:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26ef0:	e5832008 	str	r2, [r3, #8]
   26ef4:	e59f3364 	ldr	r3, [pc, #868]	; 27260 <CMachineInfo::CMachineInfo()+0x41c>
   26ef8:	e5933000 	ldr	r3, [r3]
   26efc:	e593200c 	ldr	r2, [r3, #12]
   26f00:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f04:	e583200c 	str	r2, [r3, #12]
   26f08:	e59f3350 	ldr	r3, [pc, #848]	; 27260 <CMachineInfo::CMachineInfo()+0x41c>
   26f0c:	e5933000 	ldr	r3, [r3]
   26f10:	e5d32010 	ldrb	r2, [r3, #16]
   26f14:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f18:	e5c32010 	strb	r2, [r3, #16]
   26f1c:	e59f333c 	ldr	r3, [pc, #828]	; 27260 <CMachineInfo::CMachineInfo()+0x41c>
   26f20:	e5933000 	ldr	r3, [r3]
   26f24:	e5932014 	ldr	r2, [r3, #20]
   26f28:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f2c:	e5832014 	str	r2, [r3, #20]
   26f30:	ea0000c5 	b	2724c <CMachineInfo::CMachineInfo()+0x408>
   26f34:	e59f2324 	ldr	r2, [pc, #804]	; 27260 <CMachineInfo::CMachineInfo()+0x41c>
   26f38:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f3c:	e5823000 	str	r3, [r2]
   26f40:	e24b3020 	sub	r3, fp, #32
   26f44:	e3a01001 	mov	r1, #1
   26f48:	e1a00003 	mov	r0, r3
   26f4c:	ebfff5ed 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   26f50:	e24b2030 	sub	r2, fp, #48	; 0x30
   26f54:	e24b0020 	sub	r0, fp, #32
   26f58:	e3a03000 	mov	r3, #0
   26f5c:	e58d3000 	str	r3, [sp]
   26f60:	e3a03010 	mov	r3, #16
   26f64:	e59f12f8 	ldr	r1, [pc, #760]	; 27264 <CMachineInfo::CMachineInfo()+0x420>
   26f68:	ebfff5f2 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   26f6c:	e1a03000 	mov	r3, r0
   26f70:	e3530000 	cmp	r3, #0
   26f74:	0a000003 	beq	26f88 <CMachineInfo::CMachineInfo()+0x144>
   26f78:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   26f7c:	e6ff2073 	uxth	r2, r3
   26f80:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f84:	e1c321b8 	strh	r2, [r3, #24]
   26f88:	e24b2040 	sub	r2, fp, #64	; 0x40
   26f8c:	e24b0020 	sub	r0, fp, #32
   26f90:	e3a03000 	mov	r3, #0
   26f94:	e58d3000 	str	r3, [sp]
   26f98:	e3a03010 	mov	r3, #16
   26f9c:	e59f12c4 	ldr	r1, [pc, #708]	; 27268 <CMachineInfo::CMachineInfo()+0x424>
   26fa0:	ebfff5e4 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   26fa4:	e1a03000 	mov	r3, r0
   26fa8:	e2233001 	eor	r3, r3, #1
   26fac:	e6ef3073 	uxtb	r3, r3
   26fb0:	e3530000 	cmp	r3, #0
   26fb4:	0a000001 	beq	26fc0 <CMachineInfo::CMachineInfo()+0x17c>
   26fb8:	e3a04000 	mov	r4, #0
   26fbc:	ea00009e 	b	2723c <CMachineInfo::CMachineInfo()+0x3f8>
   26fc0:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   26fc4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fc8:	e5832000 	str	r2, [r3]
   26fcc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fd0:	e5933000 	ldr	r3, [r3]
   26fd4:	e2033502 	and	r3, r3, #8388608	; 0x800000
   26fd8:	e3530000 	cmp	r3, #0
   26fdc:	0a000064 	beq	27174 <CMachineInfo::CMachineInfo()+0x330>
   26fe0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fe4:	e5933000 	ldr	r3, [r3]
   26fe8:	e1a03223 	lsr	r3, r3, #4
   26fec:	e6ef3073 	uxtb	r3, r3
   26ff0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   26ff4:	e3a03000 	mov	r3, #0
   26ff8:	e50b3010 	str	r3, [fp, #-16]
   26ffc:	e51b3010 	ldr	r3, [fp, #-16]
   27000:	e353000d 	cmp	r3, #13
   27004:	8a00000f 	bhi	27048 <CMachineInfo::CMachineInfo()+0x204>
   27008:	e59f125c 	ldr	r1, [pc, #604]	; 2726c <CMachineInfo::CMachineInfo()+0x428>
   2700c:	e51b2010 	ldr	r2, [fp, #-16]
   27010:	e1a03002 	mov	r3, r2
   27014:	e1a03083 	lsl	r3, r3, #1
   27018:	e0833002 	add	r3, r3, r2
   2701c:	e1a03103 	lsl	r3, r3, #2
   27020:	e0813003 	add	r3, r1, r3
   27024:	e5933000 	ldr	r3, [r3]
   27028:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2702c:	e1520003 	cmp	r2, r3
   27030:	0a000003 	beq	27044 <CMachineInfo::CMachineInfo()+0x200>
   27034:	e51b3010 	ldr	r3, [fp, #-16]
   27038:	e2833001 	add	r3, r3, #1
   2703c:	e50b3010 	str	r3, [fp, #-16]
   27040:	eaffffed 	b	26ffc <CMachineInfo::CMachineInfo()+0x1b8>
   27044:	e320f000 	nop	{0}
   27048:	e51b3010 	ldr	r3, [fp, #-16]
   2704c:	e353000d 	cmp	r3, #13
   27050:	9a000001 	bls	2705c <CMachineInfo::CMachineInfo()+0x218>
   27054:	e3a04000 	mov	r4, #0
   27058:	ea000077 	b	2723c <CMachineInfo::CMachineInfo()+0x3f8>
   2705c:	e59f1208 	ldr	r1, [pc, #520]	; 2726c <CMachineInfo::CMachineInfo()+0x428>
   27060:	e51b2010 	ldr	r2, [fp, #-16]
   27064:	e1a03002 	mov	r3, r2
   27068:	e1a03083 	lsl	r3, r3, #1
   2706c:	e0833002 	add	r3, r3, r2
   27070:	e1a03103 	lsl	r3, r3, #2
   27074:	e0813003 	add	r3, r1, r3
   27078:	e2833004 	add	r3, r3, #4
   2707c:	e5d32000 	ldrb	r2, [r3]
   27080:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27084:	e5c32004 	strb	r2, [r3, #4]
   27088:	e59f11dc 	ldr	r1, [pc, #476]	; 2726c <CMachineInfo::CMachineInfo()+0x428>
   2708c:	e51b2010 	ldr	r2, [fp, #-16]
   27090:	e1a03002 	mov	r3, r2
   27094:	e1a03083 	lsl	r3, r3, #1
   27098:	e0833002 	add	r3, r3, r2
   2709c:	e1a03103 	lsl	r3, r3, #2
   270a0:	e0813003 	add	r3, r1, r3
   270a4:	e2833008 	add	r3, r3, #8
   270a8:	e5932000 	ldr	r2, [r3]
   270ac:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   270b0:	e5832008 	str	r2, [r3, #8]
   270b4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   270b8:	e5933000 	ldr	r3, [r3]
   270bc:	e203300f 	and	r3, r3, #15
   270c0:	e2832001 	add	r2, r3, #1
   270c4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   270c8:	e583200c 	str	r2, [r3, #12]
   270cc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   270d0:	e5933000 	ldr	r3, [r3]
   270d4:	e1a03623 	lsr	r3, r3, #12
   270d8:	e6ef3073 	uxtb	r3, r3
   270dc:	e203300f 	and	r3, r3, #15
   270e0:	e6ef2073 	uxtb	r2, r3
   270e4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   270e8:	e5c32010 	strb	r2, [r3, #16]
   270ec:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   270f0:	e5933000 	ldr	r3, [r3]
   270f4:	e1a03a23 	lsr	r3, r3, #20
   270f8:	e2033007 	and	r3, r3, #7
   270fc:	e3a02c01 	mov	r2, #256	; 0x100
   27100:	e1a03312 	lsl	r3, r2, r3
   27104:	e1a02003 	mov	r2, r3
   27108:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2710c:	e5832014 	str	r2, [r3, #20]
   27110:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27114:	e5d33010 	ldrb	r3, [r3, #16]
   27118:	e3530003 	cmp	r3, #3
   2711c:	9a000002 	bls	2712c <CMachineInfo::CMachineInfo()+0x2e8>
   27120:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27124:	e3a02004 	mov	r2, #4
   27128:	e5c32010 	strb	r2, [r3, #16]
   2712c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27130:	e5d33004 	ldrb	r3, [r3, #4]
   27134:	e3530003 	cmp	r3, #3
   27138:	1a00003e 	bne	27238 <CMachineInfo::CMachineInfo()+0x3f4>
   2713c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27140:	e5933014 	ldr	r3, [r3, #20]
   27144:	e3530c01 	cmp	r3, #256	; 0x100
   27148:	1a00003a 	bne	27238 <CMachineInfo::CMachineInfo()+0x3f4>
   2714c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27150:	e593300c 	ldr	r3, [r3, #12]
   27154:	e3530001 	cmp	r3, #1
   27158:	1a000001 	bne	27164 <CMachineInfo::CMachineInfo()+0x320>
   2715c:	e3a02001 	mov	r2, #1
   27160:	ea000000 	b	27168 <CMachineInfo::CMachineInfo()+0x324>
   27164:	e3a02002 	mov	r2, #2
   27168:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2716c:	e5c32004 	strb	r2, [r3, #4]
   27170:	ea000030 	b	27238 <CMachineInfo::CMachineInfo()+0x3f4>
   27174:	e3a03000 	mov	r3, #0
   27178:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2717c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27180:	e3530010 	cmp	r3, #16
   27184:	8a00000b 	bhi	271b8 <CMachineInfo::CMachineInfo()+0x374>
   27188:	e59f20e0 	ldr	r2, [pc, #224]	; 27270 <CMachineInfo::CMachineInfo()+0x42c>
   2718c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27190:	e7922203 	ldr	r2, [r2, r3, lsl #4]
   27194:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27198:	e5933000 	ldr	r3, [r3]
   2719c:	e1520003 	cmp	r2, r3
   271a0:	0a000003 	beq	271b4 <CMachineInfo::CMachineInfo()+0x370>
   271a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   271a8:	e2833001 	add	r3, r3, #1
   271ac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   271b0:	eafffff1 	b	2717c <CMachineInfo::CMachineInfo()+0x338>
   271b4:	e320f000 	nop	{0}
   271b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   271bc:	e3530010 	cmp	r3, #16
   271c0:	9a000001 	bls	271cc <CMachineInfo::CMachineInfo()+0x388>
   271c4:	e3a04000 	mov	r4, #0
   271c8:	ea00001b 	b	2723c <CMachineInfo::CMachineInfo()+0x3f8>
   271cc:	e59f209c 	ldr	r2, [pc, #156]	; 27270 <CMachineInfo::CMachineInfo()+0x42c>
   271d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   271d4:	e1a03203 	lsl	r3, r3, #4
   271d8:	e0823003 	add	r3, r2, r3
   271dc:	e5d32004 	ldrb	r2, [r3, #4]
   271e0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   271e4:	e5c32004 	strb	r2, [r3, #4]
   271e8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   271ec:	e3a02001 	mov	r2, #1
   271f0:	e5832008 	str	r2, [r3, #8]
   271f4:	e59f2074 	ldr	r2, [pc, #116]	; 27270 <CMachineInfo::CMachineInfo()+0x42c>
   271f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   271fc:	e1a03203 	lsl	r3, r3, #4
   27200:	e0823003 	add	r3, r2, r3
   27204:	e5932008 	ldr	r2, [r3, #8]
   27208:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2720c:	e583200c 	str	r2, [r3, #12]
   27210:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27214:	e3a02000 	mov	r2, #0
   27218:	e5c32010 	strb	r2, [r3, #16]
   2721c:	e59f204c 	ldr	r2, [pc, #76]	; 27270 <CMachineInfo::CMachineInfo()+0x42c>
   27220:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27224:	e1a03203 	lsl	r3, r3, #4
   27228:	e0823003 	add	r3, r2, r3
   2722c:	e593200c 	ldr	r2, [r3, #12]
   27230:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27234:	e5832014 	str	r2, [r3, #20]
   27238:	e3a04001 	mov	r4, #1
   2723c:	e24b3020 	sub	r3, fp, #32
   27240:	e1a00003 	mov	r0, r3
   27244:	ebfff536 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   27248:	e3540001 	cmp	r4, #1
   2724c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27250:	e1a00003 	mov	r0, r3
   27254:	e24bd008 	sub	sp, fp, #8
   27258:	e8bd8810 	pop	{r4, fp, pc}
   2725c:	00001f35 	.word	0x00001f35
   27260:	0004daa8 	.word	0x0004daa8
   27264:	00060001 	.word	0x00060001
   27268:	00010002 	.word	0x00010002
   2726c:	00047a58 	.word	0x00047a58
   27270:	00047948 	.word	0x00047948

00027274 <CMachineInfo::~CMachineInfo()>:
   27274:	e59f3010 	ldr	r3, [pc, #16]	; 2728c <CMachineInfo::~CMachineInfo()+0x18>
   27278:	e5932000 	ldr	r2, [r3]
   2727c:	e1520000 	cmp	r2, r0
   27280:	03a02000 	moveq	r2, #0
   27284:	05832000 	streq	r2, [r3]
   27288:	e12fff1e 	bx	lr
   2728c:	0004daa8 	.word	0x0004daa8

00027290 <CMachineInfo::GetMachineModel() const>:
   27290:	e5d00004 	ldrb	r0, [r0, #4]
   27294:	e12fff1e 	bx	lr

00027298 <CMachineInfo::GetMachineName() const>:
   27298:	e5d02004 	ldrb	r2, [r0, #4]
   2729c:	e59f3008 	ldr	r3, [pc, #8]	; 272ac <CMachineInfo::GetMachineName() const+0x14>
   272a0:	e0833102 	add	r3, r3, r2, lsl #2
   272a4:	e59301b8 	ldr	r0, [r3, #440]	; 0x1b8
   272a8:	e12fff1e 	bx	lr
   272ac:	00047948 	.word	0x00047948

000272b0 <CMachineInfo::GetModelMajor() const>:
   272b0:	e5900008 	ldr	r0, [r0, #8]
   272b4:	e12fff1e 	bx	lr

000272b8 <CMachineInfo::GetModelRevision() const>:
   272b8:	e590000c 	ldr	r0, [r0, #12]
   272bc:	e12fff1e 	bx	lr

000272c0 <CMachineInfo::GetSoCType() const>:
   272c0:	e5d00010 	ldrb	r0, [r0, #16]
   272c4:	e12fff1e 	bx	lr

000272c8 <CMachineInfo::GetRAMSize() const>:
   272c8:	e5900014 	ldr	r0, [r0, #20]
   272cc:	e12fff1e 	bx	lr

000272d0 <CMachineInfo::GetSoCName() const>:
   272d0:	e5d02010 	ldrb	r2, [r0, #16]
   272d4:	e59f3008 	ldr	r3, [pc, #8]	; 272e4 <CMachineInfo::GetSoCName() const+0x14>
   272d8:	e0833102 	add	r3, r3, r2, lsl #2
   272dc:	e59301fc 	ldr	r0, [r3, #508]	; 0x1fc
   272e0:	e12fff1e 	bx	lr
   272e4:	00047948 	.word	0x00047948

000272e8 <CMachineInfo::GetRevisionRaw() const>:
   272e8:	e5900000 	ldr	r0, [r0]
   272ec:	e12fff1e 	bx	lr

000272f0 <CMachineInfo::GetActLEDInfo() const>:
   272f0:	e5d02004 	ldrb	r2, [r0, #4]
   272f4:	e59f3008 	ldr	r3, [pc, #8]	; 27304 <CMachineInfo::GetActLEDInfo() const+0x14>
   272f8:	e0833102 	add	r3, r3, r2, lsl #2
   272fc:	e5930210 	ldr	r0, [r3, #528]	; 0x210
   27300:	e12fff1e 	bx	lr
   27304:	00047948 	.word	0x00047948

00027308 <CMachineInfo::GetClockRate(unsigned int) const>:
   27308:	e92d4030 	push	{r4, r5, lr}
   2730c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   27310:	e1a04001 	mov	r4, r1
   27314:	e1a05000 	mov	r5, r0
   27318:	e3a01000 	mov	r1, #0
   2731c:	e28d000c 	add	r0, sp, #12
   27320:	ebfff4f8 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   27324:	e3a03004 	mov	r3, #4
   27328:	e58d3000 	str	r3, [sp]
   2732c:	e3a03014 	mov	r3, #20
   27330:	e59f1078 	ldr	r1, [pc, #120]	; 273b0 <CMachineInfo::GetClockRate(unsigned int) const+0xa8>
   27334:	e28d000c 	add	r0, sp, #12
   27338:	e08d2003 	add	r2, sp, r3
   2733c:	e58d4020 	str	r4, [sp, #32]
   27340:	ebfff4fc 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   27344:	e3500000 	cmp	r0, #0
   27348:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
   2734c:	1a00000a 	bne	2737c <CMachineInfo::GetClockRate(unsigned int) const+0x74>
   27350:	e3540002 	cmp	r4, #2
   27354:	0a000013 	beq	273a8 <CMachineInfo::GetClockRate(unsigned int) const+0xa0>
   27358:	e3540004 	cmp	r4, #4
   2735c:	0a00000b 	beq	27390 <CMachineInfo::GetClockRate(unsigned int) const+0x88>
   27360:	e3540001 	cmp	r4, #1
   27364:	0a000003 	beq	27378 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
   27368:	e59f1044 	ldr	r1, [pc, #68]	; 273b4 <CMachineInfo::GetClockRate(unsigned int) const+0xac>
   2736c:	e59f2044 	ldr	r2, [pc, #68]	; 273b8 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
   27370:	e2810010 	add	r0, r1, #16
   27374:	ebfff4c2 	bl	24684 <assertion_failed>
   27378:	e59f403c 	ldr	r4, [pc, #60]	; 273bc <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
   2737c:	e28d000c 	add	r0, sp, #12
   27380:	ebfff4e7 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   27384:	e1a00004 	mov	r0, r4
   27388:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2738c:	e8bd8030 	pop	{r4, r5, pc}
   27390:	e5952008 	ldr	r2, [r5, #8]
   27394:	e59f3024 	ldr	r3, [pc, #36]	; 273c0 <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
   27398:	e3520002 	cmp	r2, #2
   2739c:	e59f4020 	ldr	r4, [pc, #32]	; 273c4 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
   273a0:	81a04003 	movhi	r4, r3
   273a4:	eafffff4 	b	2737c <CMachineInfo::GetClockRate(unsigned int) const+0x74>
   273a8:	e59f4018 	ldr	r4, [pc, #24]	; 273c8 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
   273ac:	eafffff2 	b	2737c <CMachineInfo::GetClockRate(unsigned int) const+0x74>
   273b0:	00030002 	.word	0x00030002
   273b4:	00044edc 	.word	0x00044edc
   273b8:	00000141 	.word	0x00000141
   273bc:	05f5e100 	.word	0x05f5e100
   273c0:	11e1a300 	.word	0x11e1a300
   273c4:	0ee6b280 	.word	0x0ee6b280
   273c8:	02dc6c00 	.word	0x02dc6c00

000273cc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   273cc:	e3510036 	cmp	r1, #54	; 0x36
   273d0:	0a000006 	beq	273f0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   273d4:	e3510037 	cmp	r1, #55	; 0x37
   273d8:	1a00000e 	bne	27418 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x4c>
   273dc:	e5d03004 	ldrb	r3, [r0, #4]
   273e0:	e3530003 	cmp	r3, #3
   273e4:	83a00028 	movhi	r0, #40	; 0x28
   273e8:	93a0002d 	movls	r0, #45	; 0x2d
   273ec:	e12fff1e 	bx	lr
   273f0:	e5d03004 	ldrb	r3, [r0, #4]
   273f4:	e3530003 	cmp	r3, #3
   273f8:	9a000004 	bls	27410 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x44>
   273fc:	e5903008 	ldr	r3, [r0, #8]
   27400:	e3530003 	cmp	r3, #3
   27404:	33a0002d 	movcc	r0, #45	; 0x2d
   27408:	23a00029 	movcs	r0, #41	; 0x29
   2740c:	e12fff1e 	bx	lr
   27410:	e3a00028 	mov	r0, #40	; 0x28
   27414:	e12fff1e 	bx	lr
   27418:	e59f100c 	ldr	r1, [pc, #12]	; 2742c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
   2741c:	e92d4010 	push	{r4, lr}
   27420:	e59f2008 	ldr	r2, [pc, #8]	; 27430 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x64>
   27424:	e2810010 	add	r0, r1, #16
   27428:	ebfff495 	bl	24684 <assertion_failed>
   2742c:	00044edc 	.word	0x00044edc
   27430:	0000017a 	.word	0x0000017a

00027434 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   27434:	e5903008 	ldr	r3, [r0, #8]
   27438:	e3530003 	cmp	r3, #3
   2743c:	8a000005 	bhi	27458 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x24>
   27440:	e3510001 	cmp	r1, #1
   27444:	0a00000b 	beq	27478 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
   27448:	e3510006 	cmp	r1, #6
   2744c:	e59f002c 	ldr	r0, [pc, #44]	; 27480 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x4c>
   27450:	13a00000 	movne	r0, #0
   27454:	e12fff1e 	bx	lr
   27458:	e3510001 	cmp	r1, #1
   2745c:	0a000003 	beq	27470 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x3c>
   27460:	e3510006 	cmp	r1, #6
   27464:	e59f0018 	ldr	r0, [pc, #24]	; 27484 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
   27468:	13a00000 	movne	r0, #0
   2746c:	e12fff1e 	bx	lr
   27470:	e59f0010 	ldr	r0, [pc, #16]	; 27488 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x54>
   27474:	e12fff1e 	bx	lr
   27478:	e59f000c 	ldr	r0, [pc, #12]	; 2748c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x58>
   2747c:	e12fff1e 	bx	lr
   27480:	1dcd6500 	.word	0x1dcd6500
   27484:	2cb41780 	.word	0x2cb41780
   27488:	0337f980 	.word	0x0337f980
   2748c:	0124f800 	.word	0x0124f800

00027490 <CMachineInfo::GetDevice(TDeviceId) const>:
   27490:	e3510000 	cmp	r1, #0
   27494:	1a000003 	bne	274a8 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   27498:	e5d00004 	ldrb	r0, [r0, #4]
   2749c:	e2500001 	subs	r0, r0, #1
   274a0:	13a00001 	movne	r0, #1
   274a4:	e12fff1e 	bx	lr
   274a8:	e59f100c 	ldr	r1, [pc, #12]	; 274bc <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
   274ac:	e92d4010 	push	{r4, lr}
   274b0:	e59f2008 	ldr	r2, [pc, #8]	; 274c0 <CMachineInfo::GetDevice(TDeviceId) const+0x30>
   274b4:	e2810010 	add	r0, r1, #16
   274b8:	ebfff471 	bl	24684 <assertion_failed>
   274bc:	00044edc 	.word	0x00044edc
   274c0:	000001b5 	.word	0x000001b5

000274c4 <CMachineInfo::ArePWMChannelsSwapped() const>:
   274c4:	e5d03004 	ldrb	r3, [r0, #4]
   274c8:	e2430006 	sub	r0, r3, #6
   274cc:	e3500001 	cmp	r0, #1
   274d0:	83530003 	cmphi	r3, #3
   274d4:	83a00001 	movhi	r0, #1
   274d8:	93a00000 	movls	r0, #0
   274dc:	e12fff1e 	bx	lr

000274e0 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   274e0:	e59f30b0 	ldr	r3, [pc, #176]	; 27598 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xb8>
   274e4:	e92d4010 	push	{r4, lr}
   274e8:	e5933000 	ldr	r3, [r3]
   274ec:	ea000002 	b	274fc <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c>
   274f0:	e1530000 	cmp	r3, r0
   274f4:	0a000006 	beq	27514 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x34>
   274f8:	e1a00003 	mov	r0, r3
   274fc:	e3530000 	cmp	r3, #0
   27500:	1afffffa 	bne	274f0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x10>
   27504:	e59f1090 	ldr	r1, [pc, #144]	; 2759c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
   27508:	e59f2090 	ldr	r2, [pc, #144]	; 275a0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   2750c:	e2810014 	add	r0, r1, #20
   27510:	ebfff45b 	bl	24684 <assertion_failed>
   27514:	e3d1200f 	bics	r2, r1, #15
   27518:	1a00000a 	bne	27548 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x68>
   2751c:	e351000c 	cmp	r1, #12
   27520:	8a000018 	bhi	27588 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa8>
   27524:	e1d321b8 	ldrh	r2, [r3, #24]
   27528:	e1a00152 	asr	r0, r2, r1
   2752c:	e3100001 	tst	r0, #1
   27530:	0a00000d 	beq	2756c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x8c>
   27534:	e3a00001 	mov	r0, #1
   27538:	e1c22110 	bic	r2, r2, r0, lsl r1
   2753c:	e1c321b8 	strh	r2, [r3, #24]
   27540:	e1a00001 	mov	r0, r1
   27544:	e8bd8010 	pop	{r4, pc}
   27548:	e3510081 	cmp	r1, #129	; 0x81
   2754c:	03a03006 	moveq	r3, #6
   27550:	13a0300c 	movne	r3, #12
   27554:	e1d011b8 	ldrh	r1, [r0, #24]
   27558:	e1a02351 	asr	r2, r1, r3
   2755c:	e3120001 	tst	r2, #1
   27560:	1a000003 	bne	27574 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x94>
   27564:	e2533001 	subs	r3, r3, #1
   27568:	2afffffa 	bcs	27558 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x78>
   2756c:	e3a00080 	mov	r0, #128	; 0x80
   27570:	e8bd8010 	pop	{r4, pc}
   27574:	e3a02001 	mov	r2, #1
   27578:	e1c11312 	bic	r1, r1, r2, lsl r3
   2757c:	e1c011b8 	strh	r1, [r0, #24]
   27580:	e1a00003 	mov	r0, r3
   27584:	e8bd8010 	pop	{r4, pc}
   27588:	e59f100c 	ldr	r1, [pc, #12]	; 2759c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
   2758c:	e59f2010 	ldr	r2, [pc, #16]	; 275a4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc4>
   27590:	e2810024 	add	r0, r1, #36	; 0x24
   27594:	ebfff43a 	bl	24684 <assertion_failed>
   27598:	0004daa8 	.word	0x0004daa8
   2759c:	00044edc 	.word	0x00044edc
   275a0:	000001c5 	.word	0x000001c5
   275a4:	000001ce 	.word	0x000001ce

000275a8 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   275a8:	e59f3074 	ldr	r3, [pc, #116]	; 27624 <CMachineInfo::FreeDMAChannel(unsigned int)+0x7c>
   275ac:	e92d4010 	push	{r4, lr}
   275b0:	e5933000 	ldr	r3, [r3]
   275b4:	ea000002 	b	275c4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
   275b8:	e1530000 	cmp	r3, r0
   275bc:	0a000006 	beq	275dc <CMachineInfo::FreeDMAChannel(unsigned int)+0x34>
   275c0:	e1a00003 	mov	r0, r3
   275c4:	e3530000 	cmp	r3, #0
   275c8:	1afffffa 	bne	275b8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x10>
   275cc:	e59f1054 	ldr	r1, [pc, #84]	; 27628 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   275d0:	e59f2054 	ldr	r2, [pc, #84]	; 2762c <CMachineInfo::FreeDMAChannel(unsigned int)+0x84>
   275d4:	e2810014 	add	r0, r1, #20
   275d8:	ebfff429 	bl	24684 <assertion_failed>
   275dc:	e351000c 	cmp	r1, #12
   275e0:	8a000007 	bhi	27604 <CMachineInfo::FreeDMAChannel(unsigned int)+0x5c>
   275e4:	e1d321b8 	ldrh	r2, [r3, #24]
   275e8:	e1e00152 	mvn	r0, r2, asr r1
   275ec:	e3100001 	tst	r0, #1
   275f0:	0a000007 	beq	27614 <CMachineInfo::FreeDMAChannel(unsigned int)+0x6c>
   275f4:	e3a00001 	mov	r0, #1
   275f8:	e1821110 	orr	r1, r2, r0, lsl r1
   275fc:	e1c311b8 	strh	r1, [r3, #24]
   27600:	e8bd8010 	pop	{r4, pc}
   27604:	e59f101c 	ldr	r1, [pc, #28]	; 27628 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   27608:	e59f2020 	ldr	r2, [pc, #32]	; 27630 <CMachineInfo::FreeDMAChannel(unsigned int)+0x88>
   2760c:	e2810024 	add	r0, r1, #36	; 0x24
   27610:	ebfff41b 	bl	24684 <assertion_failed>
   27614:	e59f100c 	ldr	r1, [pc, #12]	; 27628 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   27618:	e59f2014 	ldr	r2, [pc, #20]	; 27634 <CMachineInfo::FreeDMAChannel(unsigned int)+0x8c>
   2761c:	e2810040 	add	r0, r1, #64	; 0x40
   27620:	ebfff417 	bl	24684 <assertion_failed>
   27624:	0004daa8 	.word	0x0004daa8
   27628:	00044edc 	.word	0x00044edc
   2762c:	000001f2 	.word	0x000001f2
   27630:	000001fa 	.word	0x000001fa
   27634:	000001fb 	.word	0x000001fb

00027638 <CMachineInfo::Get()>:
   27638:	e59f301c 	ldr	r3, [pc, #28]	; 2765c <CMachineInfo::Get()+0x24>
   2763c:	e5930000 	ldr	r0, [r3]
   27640:	e3500000 	cmp	r0, #0
   27644:	112fff1e 	bxne	lr
   27648:	e59f1010 	ldr	r1, [pc, #16]	; 27660 <CMachineInfo::Get()+0x28>
   2764c:	e92d4010 	push	{r4, lr}
   27650:	e59f200c 	ldr	r2, [pc, #12]	; 27664 <CMachineInfo::Get()+0x2c>
   27654:	e2810014 	add	r0, r1, #20
   27658:	ebfff409 	bl	24684 <assertion_failed>
   2765c:	0004daa8 	.word	0x0004daa8
   27660:	00044edc 	.word	0x00044edc
   27664:	00000201 	.word	0x00000201

00027668 <CPtrArray::CPtrArray(unsigned int, unsigned int)>:
   27668:	e3a03000 	mov	r3, #0
   2766c:	e1510003 	cmp	r1, r3
   27670:	e92d4010 	push	{r4, lr}
   27674:	e880000e 	stm	r0, {r1, r2, r3}
   27678:	e580300c 	str	r3, [r0, #12]
   2767c:	0a00000a 	beq	276ac <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x44>
   27680:	e3520000 	cmp	r2, #0
   27684:	0a00000c 	beq	276bc <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x54>
   27688:	e371022e 	cmn	r1, #-536870910	; 0xe0000002
   2768c:	e1a04000 	mov	r4, r0
   27690:	83e00000 	mvnhi	r0, #0
   27694:	91a00101 	lslls	r0, r1, #2
   27698:	eb000e06 	bl	2aeb8 <operator new[](unsigned int)>
   2769c:	e1a03000 	mov	r3, r0
   276a0:	e1a00004 	mov	r0, r4
   276a4:	e584300c 	str	r3, [r4, #12]
   276a8:	e8bd8010 	pop	{r4, pc}
   276ac:	e3a0201e 	mov	r2, #30
   276b0:	e59f1014 	ldr	r1, [pc, #20]	; 276cc <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x64>
   276b4:	e59f0014 	ldr	r0, [pc, #20]	; 276d0 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x68>
   276b8:	ebfff3f1 	bl	24684 <assertion_failed>
   276bc:	e3a0201f 	mov	r2, #31
   276c0:	e59f1004 	ldr	r1, [pc, #4]	; 276cc <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x64>
   276c4:	e59f0008 	ldr	r0, [pc, #8]	; 276d4 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x6c>
   276c8:	ebfff3ed 	bl	24684 <assertion_failed>
   276cc:	00044f44 	.word	0x00044f44
   276d0:	00044f54 	.word	0x00044f54
   276d4:	00044f68 	.word	0x00044f68

000276d8 <CPtrArray::~CPtrArray()>:
   276d8:	e3a03000 	mov	r3, #0
   276dc:	e92d4010 	push	{r4, lr}
   276e0:	e1a04000 	mov	r4, r0
   276e4:	e590000c 	ldr	r0, [r0, #12]
   276e8:	e5843000 	str	r3, [r4]
   276ec:	e1500003 	cmp	r0, r3
   276f0:	e5843004 	str	r3, [r4, #4]
   276f4:	0a000000 	beq	276fc <CPtrArray::~CPtrArray()+0x24>
   276f8:	eb000df5 	bl	2aed4 <operator delete[](void*)>
   276fc:	e1a00004 	mov	r0, r4
   27700:	e8bd8010 	pop	{r4, pc}

00027704 <CPtrArray::GetCount() const>:
   27704:	e5900008 	ldr	r0, [r0, #8]
   27708:	e12fff1e 	bx	lr

0002770c <CPtrArray::operator[](unsigned int)>:
   2770c:	e5903008 	ldr	r3, [r0, #8]
   27710:	e92d4010 	push	{r4, lr}
   27714:	e1530001 	cmp	r3, r1
   27718:	9a000007 	bls	2773c <CPtrArray::operator[](unsigned int)+0x30>
   2771c:	e5902000 	ldr	r2, [r0]
   27720:	e1530002 	cmp	r3, r2
   27724:	8a000008 	bhi	2774c <CPtrArray::operator[](unsigned int)+0x40>
   27728:	e590000c 	ldr	r0, [r0, #12]
   2772c:	e3500000 	cmp	r0, #0
   27730:	0a000009 	beq	2775c <CPtrArray::operator[](unsigned int)+0x50>
   27734:	e0800101 	add	r0, r0, r1, lsl #2
   27738:	e8bd8010 	pop	{r4, pc}
   2773c:	e3a02035 	mov	r2, #53	; 0x35
   27740:	e59f1024 	ldr	r1, [pc, #36]	; 2776c <CPtrArray::operator[](unsigned int)+0x60>
   27744:	e59f0024 	ldr	r0, [pc, #36]	; 27770 <CPtrArray::operator[](unsigned int)+0x64>
   27748:	ebfff3cd 	bl	24684 <assertion_failed>
   2774c:	e3a02036 	mov	r2, #54	; 0x36
   27750:	e59f1014 	ldr	r1, [pc, #20]	; 2776c <CPtrArray::operator[](unsigned int)+0x60>
   27754:	e59f0018 	ldr	r0, [pc, #24]	; 27774 <CPtrArray::operator[](unsigned int)+0x68>
   27758:	ebfff3c9 	bl	24684 <assertion_failed>
   2775c:	e3a02037 	mov	r2, #55	; 0x37
   27760:	e59f1004 	ldr	r1, [pc, #4]	; 2776c <CPtrArray::operator[](unsigned int)+0x60>
   27764:	e59f000c 	ldr	r0, [pc, #12]	; 27778 <CPtrArray::operator[](unsigned int)+0x6c>
   27768:	ebfff3c5 	bl	24684 <assertion_failed>
   2776c:	00044f44 	.word	0x00044f44
   27770:	00044f80 	.word	0x00044f80
   27774:	00044f98 	.word	0x00044f98
   27778:	00044fb8 	.word	0x00044fb8

0002777c <CPtrArray::operator[](unsigned int) const>:
   2777c:	e5903008 	ldr	r3, [r0, #8]
   27780:	e92d4010 	push	{r4, lr}
   27784:	e1530001 	cmp	r3, r1
   27788:	9a000007 	bls	277ac <CPtrArray::operator[](unsigned int) const+0x30>
   2778c:	e5902000 	ldr	r2, [r0]
   27790:	e1530002 	cmp	r3, r2
   27794:	8a000008 	bhi	277bc <CPtrArray::operator[](unsigned int) const+0x40>
   27798:	e590300c 	ldr	r3, [r0, #12]
   2779c:	e3530000 	cmp	r3, #0
   277a0:	0a000009 	beq	277cc <CPtrArray::operator[](unsigned int) const+0x50>
   277a4:	e7930101 	ldr	r0, [r3, r1, lsl #2]
   277a8:	e8bd8010 	pop	{r4, pc}
   277ac:	e3a0203e 	mov	r2, #62	; 0x3e
   277b0:	e59f1024 	ldr	r1, [pc, #36]	; 277dc <CPtrArray::operator[](unsigned int) const+0x60>
   277b4:	e59f0024 	ldr	r0, [pc, #36]	; 277e0 <CPtrArray::operator[](unsigned int) const+0x64>
   277b8:	ebfff3b1 	bl	24684 <assertion_failed>
   277bc:	e3a0203f 	mov	r2, #63	; 0x3f
   277c0:	e59f1014 	ldr	r1, [pc, #20]	; 277dc <CPtrArray::operator[](unsigned int) const+0x60>
   277c4:	e59f0018 	ldr	r0, [pc, #24]	; 277e4 <CPtrArray::operator[](unsigned int) const+0x68>
   277c8:	ebfff3ad 	bl	24684 <assertion_failed>
   277cc:	e3a02040 	mov	r2, #64	; 0x40
   277d0:	e59f1004 	ldr	r1, [pc, #4]	; 277dc <CPtrArray::operator[](unsigned int) const+0x60>
   277d4:	e59f000c 	ldr	r0, [pc, #12]	; 277e8 <CPtrArray::operator[](unsigned int) const+0x6c>
   277d8:	ebfff3a9 	bl	24684 <assertion_failed>
   277dc:	00044f44 	.word	0x00044f44
   277e0:	00044f80 	.word	0x00044f80
   277e4:	00044f98 	.word	0x00044f98
   277e8:	00044fb8 	.word	0x00044fb8

000277ec <CPtrArray::Append(void*)>:
   277ec:	e5903000 	ldr	r3, [r0]
   277f0:	e92d4070 	push	{r4, r5, r6, lr}
   277f4:	e3530000 	cmp	r3, #0
   277f8:	0a000024 	beq	27890 <CPtrArray::Append(void*)+0xa4>
   277fc:	e590500c 	ldr	r5, [r0, #12]
   27800:	e1a04000 	mov	r4, r0
   27804:	e3550000 	cmp	r5, #0
   27808:	0a000024 	beq	278a0 <CPtrArray::Append(void*)+0xb4>
   2780c:	e5900008 	ldr	r0, [r0, #8]
   27810:	e1530000 	cmp	r3, r0
   27814:	3a000025 	bcc	278b0 <CPtrArray::Append(void*)+0xc4>
   27818:	e1a06001 	mov	r6, r1
   2781c:	0a000003 	beq	27830 <CPtrArray::Append(void*)+0x44>
   27820:	e2803001 	add	r3, r0, #1
   27824:	e7856100 	str	r6, [r5, r0, lsl #2]
   27828:	e5843008 	str	r3, [r4, #8]
   2782c:	e8bd8070 	pop	{r4, r5, r6, pc}
   27830:	e5940004 	ldr	r0, [r4, #4]
   27834:	e3500000 	cmp	r0, #0
   27838:	0a000020 	beq	278c0 <CPtrArray::Append(void*)+0xd4>
   2783c:	e0830000 	add	r0, r3, r0
   27840:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   27844:	83e00000 	mvnhi	r0, #0
   27848:	91a00100 	lslls	r0, r0, #2
   2784c:	eb000d99 	bl	2aeb8 <operator new[](unsigned int)>
   27850:	e5942000 	ldr	r2, [r4]
   27854:	e594100c 	ldr	r1, [r4, #12]
   27858:	e1a02102 	lsl	r2, r2, #2
   2785c:	e1a05000 	mov	r5, r0
   27860:	eb000ba8 	bl	2a708 <memcpy>
   27864:	e594000c 	ldr	r0, [r4, #12]
   27868:	e3500000 	cmp	r0, #0
   2786c:	0a000000 	beq	27874 <CPtrArray::Append(void*)+0x88>
   27870:	eb000d97 	bl	2aed4 <operator delete[](void*)>
   27874:	e5943000 	ldr	r3, [r4]
   27878:	e5942004 	ldr	r2, [r4, #4]
   2787c:	e5940008 	ldr	r0, [r4, #8]
   27880:	e0833002 	add	r3, r3, r2
   27884:	e584500c 	str	r5, [r4, #12]
   27888:	e5843000 	str	r3, [r4]
   2788c:	eaffffe3 	b	27820 <CPtrArray::Append(void*)+0x34>
   27890:	e3a02047 	mov	r2, #71	; 0x47
   27894:	e59f1034 	ldr	r1, [pc, #52]	; 278d0 <CPtrArray::Append(void*)+0xe4>
   27898:	e59f0034 	ldr	r0, [pc, #52]	; 278d4 <CPtrArray::Append(void*)+0xe8>
   2789c:	ebfff378 	bl	24684 <assertion_failed>
   278a0:	e3a02048 	mov	r2, #72	; 0x48
   278a4:	e59f1024 	ldr	r1, [pc, #36]	; 278d0 <CPtrArray::Append(void*)+0xe4>
   278a8:	e59f0028 	ldr	r0, [pc, #40]	; 278d8 <CPtrArray::Append(void*)+0xec>
   278ac:	ebfff374 	bl	24684 <assertion_failed>
   278b0:	e3a0204a 	mov	r2, #74	; 0x4a
   278b4:	e59f1014 	ldr	r1, [pc, #20]	; 278d0 <CPtrArray::Append(void*)+0xe4>
   278b8:	e59f001c 	ldr	r0, [pc, #28]	; 278dc <CPtrArray::Append(void*)+0xf0>
   278bc:	ebfff370 	bl	24684 <assertion_failed>
   278c0:	e3a0204d 	mov	r2, #77	; 0x4d
   278c4:	e59f1004 	ldr	r1, [pc, #4]	; 278d0 <CPtrArray::Append(void*)+0xe4>
   278c8:	e59f0010 	ldr	r0, [pc, #16]	; 278e0 <CPtrArray::Append(void*)+0xf4>
   278cc:	ebfff36c 	bl	24684 <assertion_failed>
   278d0:	00044f44 	.word	0x00044f44
   278d4:	00044f54 	.word	0x00044f54
   278d8:	00044fb8 	.word	0x00044fb8
   278dc:	00044f98 	.word	0x00044f98
   278e0:	00044f68 	.word	0x00044f68

000278e4 <CPtrArray::RemoveLast()>:
   278e4:	e5903008 	ldr	r3, [r0, #8]
   278e8:	e3530000 	cmp	r3, #0
   278ec:	0a000002 	beq	278fc <CPtrArray::RemoveLast()+0x18>
   278f0:	e2433001 	sub	r3, r3, #1
   278f4:	e5803008 	str	r3, [r0, #8]
   278f8:	e12fff1e 	bx	lr
   278fc:	e3a02060 	mov	r2, #96	; 0x60
   27900:	e92d4010 	push	{r4, lr}
   27904:	e59f1004 	ldr	r1, [pc, #4]	; 27910 <CPtrArray::RemoveLast()+0x2c>
   27908:	e59f0004 	ldr	r0, [pc, #4]	; 27914 <CPtrArray::RemoveLast()+0x30>
   2790c:	ebfff35c 	bl	24684 <assertion_failed>
   27910:	00044f44 	.word	0x00044f44
   27914:	00044fc8 	.word	0x00044fc8

00027918 <CString::~CString()>:
   27918:	e92d4010 	push	{r4, lr}
   2791c:	e1a04000 	mov	r4, r0
   27920:	e5900004 	ldr	r0, [r0, #4]
   27924:	e59f3014 	ldr	r3, [pc, #20]	; 27940 <CString::~CString()+0x28>
   27928:	e3500000 	cmp	r0, #0
   2792c:	e5843000 	str	r3, [r4]
   27930:	0a000000 	beq	27938 <CString::~CString()+0x20>
   27934:	eb000d66 	bl	2aed4 <operator delete[](void*)>
   27938:	e1a00004 	mov	r0, r4
   2793c:	e8bd8010 	pop	{r4, pc}
   27940:	00044ff8 	.word	0x00044ff8

00027944 <CString::~CString()>:
   27944:	e92d4010 	push	{r4, lr}
   27948:	e1a04000 	mov	r4, r0
   2794c:	e5900004 	ldr	r0, [r0, #4]
   27950:	e59f3020 	ldr	r3, [pc, #32]	; 27978 <CString::~CString()+0x34>
   27954:	e3500000 	cmp	r0, #0
   27958:	e5843000 	str	r3, [r4]
   2795c:	0a000000 	beq	27964 <CString::~CString()+0x20>
   27960:	eb000d5b 	bl	2aed4 <operator delete[](void*)>
   27964:	e1a00004 	mov	r0, r4
   27968:	e3a01010 	mov	r1, #16
   2796c:	eb000d59 	bl	2aed8 <operator delete(void*, unsigned int)>
   27970:	e1a00004 	mov	r0, r4
   27974:	e8bd8010 	pop	{r4, pc}
   27978:	00044ff8 	.word	0x00044ff8

0002797c <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   2797c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   27980:	e990004c 	ldmib	r0, {r2, r3, r6}
   27984:	e0466002 	sub	r6, r6, r2
   27988:	e0861001 	add	r1, r6, r1
   2798c:	e2812001 	add	r2, r1, #1
   27990:	e1520003 	cmp	r2, r3
   27994:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   27998:	e1a04000 	mov	r4, r0
   2799c:	e2815041 	add	r5, r1, #65	; 0x41
   279a0:	e1a00005 	mov	r0, r5
   279a4:	eb000d43 	bl	2aeb8 <operator new[](unsigned int)>
   279a8:	e3a02000 	mov	r2, #0
   279ac:	e594300c 	ldr	r3, [r4, #12]
   279b0:	e1a07000 	mov	r7, r0
   279b4:	e5c32000 	strb	r2, [r3]
   279b8:	e5941004 	ldr	r1, [r4, #4]
   279bc:	eb0009fa 	bl	2a1ac <strcpy>
   279c0:	e5940004 	ldr	r0, [r4, #4]
   279c4:	e3500000 	cmp	r0, #0
   279c8:	0a000000 	beq	279d0 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   279cc:	eb000d40 	bl	2aed4 <operator delete[](void*)>
   279d0:	e0876006 	add	r6, r7, r6
   279d4:	e584600c 	str	r6, [r4, #12]
   279d8:	e5847004 	str	r7, [r4, #4]
   279dc:	e5845008 	str	r5, [r4, #8]
   279e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000279e4 <CString::CString()>:
   279e4:	e3a02000 	mov	r2, #0
   279e8:	e59f1008 	ldr	r1, [pc, #8]	; 279f8 <CString::CString()+0x14>
   279ec:	e5802008 	str	r2, [r0, #8]
   279f0:	e8800006 	stm	r0, {r1, r2}
   279f4:	e12fff1e 	bx	lr
   279f8:	00044ff8 	.word	0x00044ff8

000279fc <CString::CString(char const*)>:
   279fc:	e92d4010 	push	{r4, lr}
   27a00:	e1a04000 	mov	r4, r0
   27a04:	e59f3034 	ldr	r3, [pc, #52]	; 27a40 <CString::CString(char const*)+0x44>
   27a08:	e24dd008 	sub	sp, sp, #8
   27a0c:	e5843000 	str	r3, [r4]
   27a10:	e1a00001 	mov	r0, r1
   27a14:	e58d1004 	str	r1, [sp, #4]
   27a18:	eb00093f 	bl	29f1c <strlen>
   27a1c:	e2800001 	add	r0, r0, #1
   27a20:	e5840008 	str	r0, [r4, #8]
   27a24:	eb000d23 	bl	2aeb8 <operator new[](unsigned int)>
   27a28:	e59d1004 	ldr	r1, [sp, #4]
   27a2c:	e5840004 	str	r0, [r4, #4]
   27a30:	eb0009dd 	bl	2a1ac <strcpy>
   27a34:	e1a00004 	mov	r0, r4
   27a38:	e28dd008 	add	sp, sp, #8
   27a3c:	e8bd8010 	pop	{r4, pc}
   27a40:	00044ff8 	.word	0x00044ff8

00027a44 <CString::operator char const*() const>:
   27a44:	e5900004 	ldr	r0, [r0, #4]
   27a48:	e59f3008 	ldr	r3, [pc, #8]	; 27a58 <CString::operator char const*() const+0x14>
   27a4c:	e3500000 	cmp	r0, #0
   27a50:	01a00003 	moveq	r0, r3
   27a54:	e12fff1e 	bx	lr
   27a58:	00047150 	.word	0x00047150

00027a5c <CString::operator=(char const*)>:
   27a5c:	e92d4010 	push	{r4, lr}
   27a60:	e1a04000 	mov	r4, r0
   27a64:	e5900004 	ldr	r0, [r0, #4]
   27a68:	e24dd008 	sub	sp, sp, #8
   27a6c:	e3500000 	cmp	r0, #0
   27a70:	0a000002 	beq	27a80 <CString::operator=(char const*)+0x24>
   27a74:	e58d1004 	str	r1, [sp, #4]
   27a78:	eb000d15 	bl	2aed4 <operator delete[](void*)>
   27a7c:	e59d1004 	ldr	r1, [sp, #4]
   27a80:	e1a00001 	mov	r0, r1
   27a84:	e58d1004 	str	r1, [sp, #4]
   27a88:	eb000923 	bl	29f1c <strlen>
   27a8c:	e2800001 	add	r0, r0, #1
   27a90:	e5840008 	str	r0, [r4, #8]
   27a94:	eb000d07 	bl	2aeb8 <operator new[](unsigned int)>
   27a98:	e59d1004 	ldr	r1, [sp, #4]
   27a9c:	e5840004 	str	r0, [r4, #4]
   27aa0:	eb0009c1 	bl	2a1ac <strcpy>
   27aa4:	e5940004 	ldr	r0, [r4, #4]
   27aa8:	e28dd008 	add	sp, sp, #8
   27aac:	e8bd8010 	pop	{r4, pc}

00027ab0 <CString::operator=(CString const&)>:
   27ab0:	e92d4070 	push	{r4, r5, r6, lr}
   27ab4:	e1a04000 	mov	r4, r0
   27ab8:	e5900004 	ldr	r0, [r0, #4]
   27abc:	e1a05001 	mov	r5, r1
   27ac0:	e3500000 	cmp	r0, #0
   27ac4:	0a000000 	beq	27acc <CString::operator=(CString const&)+0x1c>
   27ac8:	eb000d01 	bl	2aed4 <operator delete[](void*)>
   27acc:	e5950004 	ldr	r0, [r5, #4]
   27ad0:	e59f6030 	ldr	r6, [pc, #48]	; 27b08 <CString::operator=(CString const&)+0x58>
   27ad4:	e3500000 	cmp	r0, #0
   27ad8:	01a00006 	moveq	r0, r6
   27adc:	eb00090e 	bl	29f1c <strlen>
   27ae0:	e2800001 	add	r0, r0, #1
   27ae4:	e5840008 	str	r0, [r4, #8]
   27ae8:	eb000cf2 	bl	2aeb8 <operator new[](unsigned int)>
   27aec:	e5840004 	str	r0, [r4, #4]
   27af0:	e5951004 	ldr	r1, [r5, #4]
   27af4:	e3510000 	cmp	r1, #0
   27af8:	01a01006 	moveq	r1, r6
   27afc:	eb0009aa 	bl	2a1ac <strcpy>
   27b00:	e1a00004 	mov	r0, r4
   27b04:	e8bd8070 	pop	{r4, r5, r6, pc}
   27b08:	00047150 	.word	0x00047150

00027b0c <CString::GetLength() const>:
   27b0c:	e5900004 	ldr	r0, [r0, #4]
   27b10:	e3500000 	cmp	r0, #0
   27b14:	012fff1e 	bxeq	lr
   27b18:	ea0008ff 	b	29f1c <strlen>

00027b1c <CString::Append(char const*)>:
   27b1c:	e92d4070 	push	{r4, r5, r6, lr}
   27b20:	e3a03001 	mov	r3, #1
   27b24:	e1a04000 	mov	r4, r0
   27b28:	e5900004 	ldr	r0, [r0, #4]
   27b2c:	e1a06001 	mov	r6, r1
   27b30:	e3500000 	cmp	r0, #0
   27b34:	e5843008 	str	r3, [r4, #8]
   27b38:	0a000003 	beq	27b4c <CString::Append(char const*)+0x30>
   27b3c:	eb0008f6 	bl	29f1c <strlen>
   27b40:	e5943008 	ldr	r3, [r4, #8]
   27b44:	e0830000 	add	r0, r3, r0
   27b48:	e5840008 	str	r0, [r4, #8]
   27b4c:	e1a00006 	mov	r0, r6
   27b50:	eb0008f1 	bl	29f1c <strlen>
   27b54:	e5943008 	ldr	r3, [r4, #8]
   27b58:	e0800003 	add	r0, r0, r3
   27b5c:	e5840008 	str	r0, [r4, #8]
   27b60:	eb000cd4 	bl	2aeb8 <operator new[](unsigned int)>
   27b64:	e5941004 	ldr	r1, [r4, #4]
   27b68:	e1a05000 	mov	r5, r0
   27b6c:	e3510000 	cmp	r1, #0
   27b70:	05c01000 	strbeq	r1, [r0]
   27b74:	0a000004 	beq	27b8c <CString::Append(char const*)+0x70>
   27b78:	eb00098b 	bl	2a1ac <strcpy>
   27b7c:	e5940004 	ldr	r0, [r4, #4]
   27b80:	e3500000 	cmp	r0, #0
   27b84:	0a000000 	beq	27b8c <CString::Append(char const*)+0x70>
   27b88:	eb000cd1 	bl	2aed4 <operator delete[](void*)>
   27b8c:	e1a01006 	mov	r1, r6
   27b90:	e1a00005 	mov	r0, r5
   27b94:	eb00099d 	bl	2a210 <strcat>
   27b98:	e5845004 	str	r5, [r4, #4]
   27b9c:	e8bd8070 	pop	{r4, r5, r6, pc}

00027ba0 <CString::Compare(char const*) const>:
   27ba0:	e5900004 	ldr	r0, [r0, #4]
   27ba4:	ea0008e6 	b	29f44 <strcmp>

00027ba8 <CString::Find(char) const>:
   27ba8:	e5902004 	ldr	r2, [r0, #4]
   27bac:	e1d230d0 	ldrsb	r3, [r2]
   27bb0:	e3530000 	cmp	r3, #0
   27bb4:	0a000006 	beq	27bd4 <CString::Find(char) const+0x2c>
   27bb8:	e3a00000 	mov	r0, #0
   27bbc:	e1510003 	cmp	r1, r3
   27bc0:	012fff1e 	bxeq	lr
   27bc4:	e1f230d1 	ldrsb	r3, [r2, #1]!
   27bc8:	e2800001 	add	r0, r0, #1
   27bcc:	e3530000 	cmp	r3, #0
   27bd0:	1afffff9 	bne	27bbc <CString::Find(char) const+0x14>
   27bd4:	e3e00000 	mvn	r0, #0
   27bd8:	e12fff1e 	bx	lr

00027bdc <CString::PutChar(char, unsigned int)>:
   27bdc:	e92d4070 	push	{r4, r5, r6, lr}
   27be0:	e2524000 	subs	r4, r2, #0
   27be4:	08bd8070 	popeq	{r4, r5, r6, pc}
   27be8:	e1a06001 	mov	r6, r1
   27bec:	e1a01004 	mov	r1, r4
   27bf0:	e1a05000 	mov	r5, r0
   27bf4:	ebffff60 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27bf8:	e2442001 	sub	r2, r4, #1
   27bfc:	e595300c 	ldr	r3, [r5, #12]
   27c00:	e2422001 	sub	r2, r2, #1
   27c04:	e2830001 	add	r0, r3, #1
   27c08:	e3720001 	cmn	r2, #1
   27c0c:	e585000c 	str	r0, [r5, #12]
   27c10:	e5c36000 	strb	r6, [r3]
   27c14:	1afffff8 	bne	27bfc <CString::PutChar(char, unsigned int)+0x20>
   27c18:	e8bd8070 	pop	{r4, r5, r6, pc}

00027c1c <CString::PutString(char const*)>:
   27c1c:	e92d4070 	push	{r4, r5, r6, lr}
   27c20:	e1a04000 	mov	r4, r0
   27c24:	e1a00001 	mov	r0, r1
   27c28:	e1a06001 	mov	r6, r1
   27c2c:	eb0008ba 	bl	29f1c <strlen>
   27c30:	e2505000 	subs	r5, r0, #0
   27c34:	0a000002 	beq	27c44 <CString::PutString(char const*)+0x28>
   27c38:	e1a01005 	mov	r1, r5
   27c3c:	e1a00004 	mov	r0, r4
   27c40:	ebffff4d 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27c44:	e1a01006 	mov	r1, r6
   27c48:	e594000c 	ldr	r0, [r4, #12]
   27c4c:	eb000956 	bl	2a1ac <strcpy>
   27c50:	e594000c 	ldr	r0, [r4, #12]
   27c54:	e0800005 	add	r0, r0, r5
   27c58:	e584000c 	str	r0, [r4, #12]
   27c5c:	e8bd8070 	pop	{r4, r5, r6, pc}

00027c60 <CString::Replace(char const*, char const*)>:
   27c60:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27c64:	e1d170d0 	ldrsb	r7, [r1]
   27c68:	e24dd010 	sub	sp, sp, #16
   27c6c:	e3570000 	cmp	r7, #0
   27c70:	1a000002 	bne	27c80 <CString::Replace(char const*, char const*)+0x20>
   27c74:	e1a00007 	mov	r0, r7
   27c78:	e28dd010 	add	sp, sp, #16
   27c7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27c80:	e1a05000 	mov	r5, r0
   27c84:	e1a06001 	mov	r6, r1
   27c88:	e5901004 	ldr	r1, [r0, #4]
   27c8c:	e1a0000d 	mov	r0, sp
   27c90:	e1a08002 	mov	r8, r2
   27c94:	ebffff58 	bl	279fc <CString::CString(char const*)>
   27c98:	e5950004 	ldr	r0, [r5, #4]
   27c9c:	e3500000 	cmp	r0, #0
   27ca0:	0a000000 	beq	27ca8 <CString::Replace(char const*, char const*)+0x48>
   27ca4:	eb000c8a 	bl	2aed4 <operator delete[](void*)>
   27ca8:	e3a00040 	mov	r0, #64	; 0x40
   27cac:	e5850008 	str	r0, [r5, #8]
   27cb0:	eb000c80 	bl	2aeb8 <operator new[](unsigned int)>
   27cb4:	e3a07000 	mov	r7, #0
   27cb8:	e59d9004 	ldr	r9, [sp, #4]
   27cbc:	e5850004 	str	r0, [r5, #4]
   27cc0:	e585000c 	str	r0, [r5, #12]
   27cc4:	e1a00009 	mov	r0, r9
   27cc8:	e1d610d0 	ldrsb	r1, [r6]
   27ccc:	eb000960 	bl	2a254 <strchr>
   27cd0:	e2504000 	subs	r4, r0, #0
   27cd4:	0a00002a 	beq	27d84 <CString::Replace(char const*, char const*)+0x124>
   27cd8:	e1590004 	cmp	r9, r4
   27cdc:	3a000016 	bcc	27d3c <CString::Replace(char const*, char const*)+0xdc>
   27ce0:	e1d630d1 	ldrsb	r3, [r6, #1]
   27ce4:	e2842001 	add	r2, r4, #1
   27ce8:	e3530000 	cmp	r3, #0
   27cec:	e286e001 	add	lr, r6, #1
   27cf0:	0a00001d 	beq	27d6c <CString::Replace(char const*, char const*)+0x10c>
   27cf4:	e1a0c002 	mov	ip, r2
   27cf8:	ea000003 	b	27d0c <CString::Replace(char const*, char const*)+0xac>
   27cfc:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   27d00:	e1a0200c 	mov	r2, ip
   27d04:	e3530000 	cmp	r3, #0
   27d08:	0a000017 	beq	27d6c <CString::Replace(char const*, char const*)+0x10c>
   27d0c:	e0dc40d1 	ldrsb	r4, [ip], #1
   27d10:	e1540003 	cmp	r4, r3
   27d14:	0afffff8 	beq	27cfc <CString::Replace(char const*, char const*)+0x9c>
   27d18:	e3a01001 	mov	r1, #1
   27d1c:	e1a00005 	mov	r0, r5
   27d20:	e0d940d1 	ldrsb	r4, [r9], #1
   27d24:	ebffff14 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27d28:	e595300c 	ldr	r3, [r5, #12]
   27d2c:	e2832001 	add	r2, r3, #1
   27d30:	e585200c 	str	r2, [r5, #12]
   27d34:	e5c34000 	strb	r4, [r3]
   27d38:	eaffffe1 	b	27cc4 <CString::Replace(char const*, char const*)+0x64>
   27d3c:	e3a01001 	mov	r1, #1
   27d40:	e1a00005 	mov	r0, r5
   27d44:	e0d9a0d1 	ldrsb	sl, [r9], #1
   27d48:	ebffff0b 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27d4c:	e595300c 	ldr	r3, [r5, #12]
   27d50:	e1540009 	cmp	r4, r9
   27d54:	e2832001 	add	r2, r3, #1
   27d58:	e585200c 	str	r2, [r5, #12]
   27d5c:	e5c3a000 	strb	sl, [r3]
   27d60:	1afffff5 	bne	27d3c <CString::Replace(char const*, char const*)+0xdc>
   27d64:	e1a09004 	mov	r9, r4
   27d68:	eaffffdc 	b	27ce0 <CString::Replace(char const*, char const*)+0x80>
   27d6c:	e1a01008 	mov	r1, r8
   27d70:	e1a00005 	mov	r0, r5
   27d74:	e1a09002 	mov	r9, r2
   27d78:	e2877001 	add	r7, r7, #1
   27d7c:	ebffffa6 	bl	27c1c <CString::PutString(char const*)>
   27d80:	eaffffcf 	b	27cc4 <CString::Replace(char const*, char const*)+0x64>
   27d84:	e1a00005 	mov	r0, r5
   27d88:	e1a01009 	mov	r1, r9
   27d8c:	ebffffa2 	bl	27c1c <CString::PutString(char const*)>
   27d90:	e595200c 	ldr	r2, [r5, #12]
   27d94:	e59f3020 	ldr	r3, [pc, #32]	; 27dbc <CString::Replace(char const*, char const*)+0x15c>
   27d98:	e5c24000 	strb	r4, [r2]
   27d9c:	e59d0004 	ldr	r0, [sp, #4]
   27da0:	e58d3000 	str	r3, [sp]
   27da4:	e3500000 	cmp	r0, #0
   27da8:	0affffb1 	beq	27c74 <CString::Replace(char const*, char const*)+0x14>
   27dac:	eb000c48 	bl	2aed4 <operator delete[](void*)>
   27db0:	e1a00007 	mov	r0, r7
   27db4:	e28dd010 	add	sp, sp, #16
   27db8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27dbc:	00044ff8 	.word	0x00044ff8

00027dc0 <CString::ReserveSpace(unsigned int)>:
   27dc0:	e3510000 	cmp	r1, #0
   27dc4:	012fff1e 	bxeq	lr
   27dc8:	eafffeeb 	b	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>

00027dcc <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   27dcc:	e1510002 	cmp	r1, r2
   27dd0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27dd4:	e1a05001 	mov	r5, r1
   27dd8:	e1a06002 	mov	r6, r2
   27ddc:	e1a08000 	mov	r8, r0
   27de0:	e1a07003 	mov	r7, r3
   27de4:	23a0a001 	movcs	sl, #1
   27de8:	3a000023 	bcc	27e7c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xb0>
   27dec:	e00a0a96 	mul	sl, r6, sl
   27df0:	e1a00005 	mov	r0, r5
   27df4:	e1a0100a 	mov	r1, sl
   27df8:	eb005413 	bl	3ce4c <__udivsi3>
   27dfc:	e1500006 	cmp	r0, r6
   27e00:	e1a04000 	mov	r4, r0
   27e04:	2afffff8 	bcs	27dec <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
   27e08:	e3570000 	cmp	r7, #0
   27e0c:	13a09037 	movne	r9, #55	; 0x37
   27e10:	03a09057 	moveq	r9, #87	; 0x57
   27e14:	e1a07008 	mov	r7, r8
   27e18:	ea000003 	b	27e2c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
   27e1c:	e1a01000 	mov	r1, r0
   27e20:	e1a00005 	mov	r0, r5
   27e24:	eb005408 	bl	3ce4c <__udivsi3>
   27e28:	e1a04000 	mov	r4, r0
   27e2c:	e1a00005 	mov	r0, r5
   27e30:	e1a0100a 	mov	r1, sl
   27e34:	eb00547f 	bl	3d038 <__aeabi_uidivmod>
   27e38:	e3540009 	cmp	r4, #9
   27e3c:	e2840030 	add	r0, r4, #48	; 0x30
   27e40:	80894004 	addhi	r4, r9, r4
   27e44:	96af4070 	sxtbls	r4, r0
   27e48:	86af4074 	sxtbhi	r4, r4
   27e4c:	e1a0000a 	mov	r0, sl
   27e50:	e1a05001 	mov	r5, r1
   27e54:	e4c74001 	strb	r4, [r7], #1
   27e58:	e1a01006 	mov	r1, r6
   27e5c:	eb0053fa 	bl	3ce4c <__udivsi3>
   27e60:	e15a0006 	cmp	sl, r6
   27e64:	e1a0a000 	mov	sl, r0
   27e68:	2affffeb 	bcs	27e1c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
   27e6c:	e3a03000 	mov	r3, #0
   27e70:	e1a00008 	mov	r0, r8
   27e74:	e5c73000 	strb	r3, [r7]
   27e78:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27e7c:	e1a04001 	mov	r4, r1
   27e80:	e3a0a001 	mov	sl, #1
   27e84:	eaffffdf 	b	27e08 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

00027e88 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
   27e88:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27e8c:	e3a0b000 	mov	fp, #0
   27e90:	e1a08002 	mov	r8, r2
   27e94:	e24dd01c 	sub	sp, sp, #28
   27e98:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
   27e9c:	e15b0003 	cmp	fp, r3
   27ea0:	e1a09003 	mov	r9, r3
   27ea4:	e5dd3044 	ldrb	r3, [sp, #68]	; 0x44
   27ea8:	01520008 	cmpeq	r2, r8
   27eac:	e1a0a002 	mov	sl, r2
   27eb0:	93a06001 	movls	r6, #1
   27eb4:	93a07000 	movls	r7, #0
   27eb8:	e58d0014 	str	r0, [sp, #20]
   27ebc:	e58d3004 	str	r3, [sp, #4]
   27ec0:	8a000041 	bhi	27fcc <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x144>
   27ec4:	e0030b96 	mul	r3, r6, fp
   27ec8:	e023379a 	mla	r3, sl, r7, r3
   27ecc:	e0876a96 	umull	r6, r7, r6, sl
   27ed0:	e0837007 	add	r7, r3, r7
   27ed4:	e1a02006 	mov	r2, r6
   27ed8:	e1a03007 	mov	r3, r7
   27edc:	e1a00008 	mov	r0, r8
   27ee0:	e1a01009 	mov	r1, r9
   27ee4:	eb005521 	bl	3d370 <__aeabi_uldivmod>
   27ee8:	e15b0001 	cmp	fp, r1
   27eec:	015a0000 	cmpeq	sl, r0
   27ef0:	e1a04000 	mov	r4, r0
   27ef4:	e1a05001 	mov	r5, r1
   27ef8:	9afffff1 	bls	27ec4 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x3c>
   27efc:	e59d3004 	ldr	r3, [sp, #4]
   27f00:	e3530000 	cmp	r3, #0
   27f04:	13a03037 	movne	r3, #55	; 0x37
   27f08:	03a03057 	moveq	r3, #87	; 0x57
   27f0c:	e58d3010 	str	r3, [sp, #16]
   27f10:	e59d3014 	ldr	r3, [sp, #20]
   27f14:	e58d3004 	str	r3, [sp, #4]
   27f18:	ea00000a 	b	27f48 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0xc0>
   27f1c:	e58d000c 	str	r0, [sp, #12]
   27f20:	e58d1008 	str	r1, [sp, #8]
   27f24:	e1a00008 	mov	r0, r8
   27f28:	e1a01009 	mov	r1, r9
   27f2c:	eb00550f 	bl	3d370 <__aeabi_uldivmod>
   27f30:	e59d200c 	ldr	r2, [sp, #12]
   27f34:	e59d3008 	ldr	r3, [sp, #8]
   27f38:	e1a04000 	mov	r4, r0
   27f3c:	e1a06002 	mov	r6, r2
   27f40:	e1a05001 	mov	r5, r1
   27f44:	e1a07003 	mov	r7, r3
   27f48:	e1a00008 	mov	r0, r8
   27f4c:	e1a01009 	mov	r1, r9
   27f50:	e1a02006 	mov	r2, r6
   27f54:	e1a03007 	mov	r3, r7
   27f58:	eb005504 	bl	3d370 <__aeabi_uldivmod>
   27f5c:	e3550000 	cmp	r5, #0
   27f60:	03540009 	cmpeq	r4, #9
   27f64:	e1a09003 	mov	r9, r3
   27f68:	859d3010 	ldrhi	r3, [sp, #16]
   27f6c:	e1a08002 	mov	r8, r2
   27f70:	e2842030 	add	r2, r4, #48	; 0x30
   27f74:	80834004 	addhi	r4, r3, r4
   27f78:	e59d3004 	ldr	r3, [sp, #4]
   27f7c:	96af4072 	sxtbls	r4, r2
   27f80:	86af4074 	sxtbhi	r4, r4
   27f84:	e4c34001 	strb	r4, [r3], #1
   27f88:	e1a0200a 	mov	r2, sl
   27f8c:	e58d3004 	str	r3, [sp, #4]
   27f90:	e1a00006 	mov	r0, r6
   27f94:	e1a0300b 	mov	r3, fp
   27f98:	e1a01007 	mov	r1, r7
   27f9c:	eb0054f3 	bl	3d370 <__aeabi_uldivmod>
   27fa0:	e15b0007 	cmp	fp, r7
   27fa4:	015a0006 	cmpeq	sl, r6
   27fa8:	e1a02000 	mov	r2, r0
   27fac:	e1a03001 	mov	r3, r1
   27fb0:	9affffd9 	bls	27f1c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x94>
   27fb4:	e3a03000 	mov	r3, #0
   27fb8:	e59d0014 	ldr	r0, [sp, #20]
   27fbc:	e59d2004 	ldr	r2, [sp, #4]
   27fc0:	e5c23000 	strb	r3, [r2]
   27fc4:	e28dd01c 	add	sp, sp, #28
   27fc8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27fcc:	e1a04008 	mov	r4, r8
   27fd0:	e1a05009 	mov	r5, r9
   27fd4:	e3a06001 	mov	r6, #1
   27fd8:	e3a07000 	mov	r7, #0
   27fdc:	eaffffc6 	b	27efc <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x74>

00027fe0 <CString::ftoa(char*, double, unsigned int)>:
   27fe0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27fe4:	ed2d8b02 	vpush	{d8}
   27fe8:	ec432b18 	vmov	d8, r2, r3
   27fec:	eeb58bc0 	vcmpe.f64	d8, #0.0
   27ff0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   27ff4:	ed9f7b97 	vldr	d7, [pc, #604]	; 28258 <CString::ftoa(char*, double, unsigned int)+0x278>
   27ff8:	4eb18b48 	vnegmi.f64	d8, d8
   27ffc:	43a0302d 	movmi	r3, #45	; 0x2d
   28000:	e1a0a000 	mov	sl, r0
   28004:	eeb48bc7 	vcmpe.f64	d8, d7
   28008:	44ca3001 	strbmi	r3, [sl], #1
   2800c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   28010:	e1a09000 	mov	r9, r0
   28014:	e24dd01c 	sub	sp, sp, #28
   28018:	ca00007e 	bgt	28218 <CString::ftoa(char*, double, unsigned int)+0x238>
   2801c:	eefc7bc8 	vcvt.u32.f64	s15, d8
   28020:	ee177a90 	vmov	r7, s15
   28024:	e3570009 	cmp	r7, #9
   28028:	83a04001 	movhi	r4, #1
   2802c:	9a000080 	bls	28234 <CString::ftoa(char*, double, unsigned int)+0x254>
   28030:	e0844104 	add	r4, r4, r4, lsl #2
   28034:	e1a04084 	lsl	r4, r4, #1
   28038:	e1a01004 	mov	r1, r4
   2803c:	e1a00007 	mov	r0, r7
   28040:	eb005381 	bl	3ce4c <__udivsi3>
   28044:	e3500009 	cmp	r0, #9
   28048:	e1a05000 	mov	r5, r0
   2804c:	8afffff7 	bhi	28030 <CString::ftoa(char*, double, unsigned int)+0x50>
   28050:	e1a0600a 	mov	r6, sl
   28054:	e1a0b007 	mov	fp, r7
   28058:	e59f8208 	ldr	r8, [pc, #520]	; 28268 <CString::ftoa(char*, double, unsigned int)+0x288>
   2805c:	ea000003 	b	28070 <CString::ftoa(char*, double, unsigned int)+0x90>
   28060:	e1a01004 	mov	r1, r4
   28064:	e1a0000b 	mov	r0, fp
   28068:	eb005377 	bl	3ce4c <__udivsi3>
   2806c:	e1a05000 	mov	r5, r0
   28070:	e1a0000b 	mov	r0, fp
   28074:	e1a01004 	mov	r1, r4
   28078:	eb0053ee 	bl	3d038 <__aeabi_uidivmod>
   2807c:	e1a0b001 	mov	fp, r1
   28080:	e0813498 	umull	r3, r1, r8, r4
   28084:	e3550009 	cmp	r5, #9
   28088:	e2850030 	add	r0, r5, #48	; 0x30
   2808c:	82855057 	addhi	r5, r5, #87	; 0x57
   28090:	96af5070 	sxtbls	r5, r0
   28094:	86af5075 	sxtbhi	r5, r5
   28098:	e3540009 	cmp	r4, #9
   2809c:	e4c65001 	strb	r5, [r6], #1
   280a0:	e1a041a1 	lsr	r4, r1, #3
   280a4:	8affffed 	bhi	28060 <CString::ftoa(char*, double, unsigned int)+0x80>
   280a8:	e3a03000 	mov	r3, #0
   280ac:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   280b0:	e5c63000 	strb	r3, [r6]
   280b4:	e1520003 	cmp	r2, r3
   280b8:	1a000003 	bne	280cc <CString::ftoa(char*, double, unsigned int)+0xec>
   280bc:	e1a00009 	mov	r0, r9
   280c0:	e28dd01c 	add	sp, sp, #28
   280c4:	ecbd8b02 	vpop	{d8}
   280c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   280cc:	e1a0000a 	mov	r0, sl
   280d0:	eb000791 	bl	29f1c <strlen>
   280d4:	e3a0302e 	mov	r3, #46	; 0x2e
   280d8:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   280dc:	e7ca3000 	strb	r3, [sl, r0]
   280e0:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
   280e4:	e3520009 	cmp	r2, #9
   280e8:	e08a2000 	add	r2, sl, r0
   280ec:	31a0a003 	movcc	sl, r3
   280f0:	23a0a009 	movcs	sl, #9
   280f4:	e3530001 	cmp	r3, #1
   280f8:	e58d2004 	str	r2, [sp, #4]
   280fc:	e282b001 	add	fp, r2, #1
   28100:	9a000051 	bls	2824c <CString::ftoa(char*, double, unsigned int)+0x26c>
   28104:	e3a02002 	mov	r2, #2
   28108:	e3a0300a 	mov	r3, #10
   2810c:	e2822001 	add	r2, r2, #1
   28110:	e0833103 	add	r3, r3, r3, lsl #2
   28114:	e152000a 	cmp	r2, sl
   28118:	e1a03083 	lsl	r3, r3, #1
   2811c:	9afffffa 	bls	2810c <CString::ftoa(char*, double, unsigned int)+0x12c>
   28120:	ee073a90 	vmov	s15, r3
   28124:	eeb87b67 	vcvt.f64.u32	d7, s15
   28128:	ee067a90 	vmov	s13, r7
   2812c:	eeb86b66 	vcvt.f64.u32	d6, s13
   28130:	ee386b46 	vsub.f64	d6, d8, d6
   28134:	ee267b07 	vmul.f64	d7, d6, d7
   28138:	eefc7bc7 	vcvt.u32.f64	s15, d7
   2813c:	ee178a90 	vmov	r8, s15
   28140:	e3580009 	cmp	r8, #9
   28144:	83a04001 	movhi	r4, #1
   28148:	9a00003c 	bls	28240 <CString::ftoa(char*, double, unsigned int)+0x260>
   2814c:	e0844104 	add	r4, r4, r4, lsl #2
   28150:	e1a04084 	lsl	r4, r4, #1
   28154:	e1a01004 	mov	r1, r4
   28158:	e1a00008 	mov	r0, r8
   2815c:	eb00533a 	bl	3ce4c <__udivsi3>
   28160:	e3500009 	cmp	r0, #9
   28164:	e1a05000 	mov	r5, r0
   28168:	8afffff7 	bhi	2814c <CString::ftoa(char*, double, unsigned int)+0x16c>
   2816c:	e59f70f4 	ldr	r7, [pc, #244]	; 28268 <CString::ftoa(char*, double, unsigned int)+0x288>
   28170:	e28d600c 	add	r6, sp, #12
   28174:	ea000003 	b	28188 <CString::ftoa(char*, double, unsigned int)+0x1a8>
   28178:	e1a01004 	mov	r1, r4
   2817c:	e1a00008 	mov	r0, r8
   28180:	eb005331 	bl	3ce4c <__udivsi3>
   28184:	e1a05000 	mov	r5, r0
   28188:	e1a00008 	mov	r0, r8
   2818c:	e1a01004 	mov	r1, r4
   28190:	eb0053a8 	bl	3d038 <__aeabi_uidivmod>
   28194:	e3550009 	cmp	r5, #9
   28198:	e2853030 	add	r3, r5, #48	; 0x30
   2819c:	96af5073 	sxtbls	r5, r3
   281a0:	e1a08001 	mov	r8, r1
   281a4:	e0813497 	umull	r3, r1, r7, r4
   281a8:	82855057 	addhi	r5, r5, #87	; 0x57
   281ac:	86af5075 	sxtbhi	r5, r5
   281b0:	e3540009 	cmp	r4, #9
   281b4:	e4c65001 	strb	r5, [r6], #1
   281b8:	e1a041a1 	lsr	r4, r1, #3
   281bc:	8affffed 	bhi	28178 <CString::ftoa(char*, double, unsigned int)+0x198>
   281c0:	e3a03000 	mov	r3, #0
   281c4:	e28d000c 	add	r0, sp, #12
   281c8:	e5c63000 	strb	r3, [r6]
   281cc:	eb000752 	bl	29f1c <strlen>
   281d0:	e05a0000 	subs	r0, sl, r0
   281d4:	0a000008 	beq	281fc <CString::ftoa(char*, double, unsigned int)+0x21c>
   281d8:	e1a0300b 	mov	r3, fp
   281dc:	e3a02030 	mov	r2, #48	; 0x30
   281e0:	e59dc004 	ldr	ip, [sp, #4]
   281e4:	e2801001 	add	r1, r0, #1
   281e8:	e08c8001 	add	r8, ip, r1
   281ec:	e4c32001 	strb	r2, [r3], #1
   281f0:	e1530008 	cmp	r3, r8
   281f4:	1afffffc 	bne	281ec <CString::ftoa(char*, double, unsigned int)+0x20c>
   281f8:	e08bb000 	add	fp, fp, r0
   281fc:	e1a0000b 	mov	r0, fp
   28200:	e28d100c 	add	r1, sp, #12
   28204:	eb0007e8 	bl	2a1ac <strcpy>
   28208:	e1a00009 	mov	r0, r9
   2820c:	e28dd01c 	add	sp, sp, #28
   28210:	ecbd8b02 	vpop	{d8}
   28214:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28218:	e1a0000a 	mov	r0, sl
   2821c:	e59f1048 	ldr	r1, [pc, #72]	; 2826c <CString::ftoa(char*, double, unsigned int)+0x28c>
   28220:	eb0007e1 	bl	2a1ac <strcpy>
   28224:	e1a00009 	mov	r0, r9
   28228:	e28dd01c 	add	sp, sp, #28
   2822c:	ecbd8b02 	vpop	{d8}
   28230:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28234:	ee175a90 	vmov	r5, s15
   28238:	e3a04001 	mov	r4, #1
   2823c:	eaffff83 	b	28050 <CString::ftoa(char*, double, unsigned int)+0x70>
   28240:	ee175a90 	vmov	r5, s15
   28244:	e3a04001 	mov	r4, #1
   28248:	eaffffc7 	b	2816c <CString::ftoa(char*, double, unsigned int)+0x18c>
   2824c:	ed9f7b03 	vldr	d7, [pc, #12]	; 28260 <CString::ftoa(char*, double, unsigned int)+0x280>
   28250:	eaffffb4 	b	28128 <CString::ftoa(char*, double, unsigned int)+0x148>
   28254:	e320f000 	nop	{0}
   28258:	ffe00000 	.word	0xffe00000
   2825c:	41efffff 	.word	0x41efffff
   28260:	00000000 	.word	0x00000000
   28264:	40240000 	.word	0x40240000
   28268:	cccccccd 	.word	0xcccccccd
   2826c:	00044fdc 	.word	0x00044fdc

00028270 <CString::FormatV(char const*, std::__va_list)>:
   28270:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28274:	ed2d8b02 	vpush	{d8}
   28278:	e24dd06c 	sub	sp, sp, #108	; 0x6c
   2827c:	e58d0030 	str	r0, [sp, #48]	; 0x30
   28280:	e5900004 	ldr	r0, [r0, #4]
   28284:	e1a0b001 	mov	fp, r1
   28288:	e3500000 	cmp	r0, #0
   2828c:	e58d2020 	str	r2, [sp, #32]
   28290:	0a000000 	beq	28298 <CString::FormatV(char const*, std::__va_list)+0x28>
   28294:	eb000b0e 	bl	2aed4 <operator delete[](void*)>
   28298:	e3a00040 	mov	r0, #64	; 0x40
   2829c:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   282a0:	e5850008 	str	r0, [r5, #8]
   282a4:	eb000b03 	bl	2aeb8 <operator new[](unsigned int)>
   282a8:	e5850004 	str	r0, [r5, #4]
   282ac:	e585000c 	str	r0, [r5, #12]
   282b0:	e1db40d0 	ldrsb	r4, [fp]
   282b4:	e3540000 	cmp	r4, #0
   282b8:	0a00006b 	beq	2846c <CString::FormatV(char const*, std::__va_list)+0x1fc>
   282bc:	e3540025 	cmp	r4, #37	; 0x25
   282c0:	1a00005c 	bne	28438 <CString::FormatV(char const*, std::__va_list)+0x1c8>
   282c4:	e1db30d1 	ldrsb	r3, [fp, #1]
   282c8:	e3530025 	cmp	r3, #37	; 0x25
   282cc:	0a00006b 	beq	28480 <CString::FormatV(char const*, std::__va_list)+0x210>
   282d0:	e3530023 	cmp	r3, #35	; 0x23
   282d4:	01db30d2 	ldrsbeq	r3, [fp, #2]
   282d8:	13a01000 	movne	r1, #0
   282dc:	028bb002 	addeq	fp, fp, #2
   282e0:	03a01001 	moveq	r1, #1
   282e4:	128bb001 	addne	fp, fp, #1
   282e8:	e353002d 	cmp	r3, #45	; 0x2d
   282ec:	03a02001 	moveq	r2, #1
   282f0:	13a02000 	movne	r2, #0
   282f4:	01db30d1 	ldrsbeq	r3, [fp, #1]
   282f8:	058d2024 	streq	r2, [sp, #36]	; 0x24
   282fc:	008bb002 	addeq	fp, fp, r2
   28300:	158d2024 	strne	r2, [sp, #36]	; 0x24
   28304:	e3530030 	cmp	r3, #48	; 0x30
   28308:	03a02001 	moveq	r2, #1
   2830c:	13a02000 	movne	r2, #0
   28310:	01db30d1 	ldrsbeq	r3, [fp, #1]
   28314:	058d2028 	streq	r2, [sp, #40]	; 0x28
   28318:	008bb002 	addeq	fp, fp, r2
   2831c:	158d2028 	strne	r2, [sp, #40]	; 0x28
   28320:	e2432030 	sub	r2, r3, #48	; 0x30
   28324:	e6ef2072 	uxtb	r2, r2
   28328:	e3520009 	cmp	r2, #9
   2832c:	e3a04000 	mov	r4, #0
   28330:	8a000007 	bhi	28354 <CString::FormatV(char const*, std::__va_list)+0xe4>
   28334:	e0844104 	add	r4, r4, r4, lsl #2
   28338:	e0834084 	add	r4, r3, r4, lsl #1
   2833c:	e1fb30d1 	ldrsb	r3, [fp, #1]!
   28340:	e2444030 	sub	r4, r4, #48	; 0x30
   28344:	e2432030 	sub	r2, r3, #48	; 0x30
   28348:	e6ef2072 	uxtb	r2, r2
   2834c:	e3520009 	cmp	r2, #9
   28350:	9afffff7 	bls	28334 <CString::FormatV(char const*, std::__va_list)+0xc4>
   28354:	e353002e 	cmp	r3, #46	; 0x2e
   28358:	0a000051 	beq	284a4 <CString::FormatV(char const*, std::__va_list)+0x234>
   2835c:	e3a00006 	mov	r0, #6
   28360:	e1dba0d0 	ldrsb	sl, [fp]
   28364:	e35a006c 	cmp	sl, #108	; 0x6c
   28368:	13a03000 	movne	r3, #0
   2836c:	11a06003 	movne	r6, r3
   28370:	158d300c 	strne	r3, [sp, #12]
   28374:	1a00000a 	bne	283a4 <CString::FormatV(char const*, std::__va_list)+0x134>
   28378:	e1dba0d1 	ldrsb	sl, [fp, #1]
   2837c:	e35a006c 	cmp	sl, #108	; 0x6c
   28380:	03a03001 	moveq	r3, #1
   28384:	13a03000 	movne	r3, #0
   28388:	03a06000 	moveq	r6, #0
   2838c:	13a06001 	movne	r6, #1
   28390:	01dba0d2 	ldrsbeq	sl, [fp, #2]
   28394:	008bb003 	addeq	fp, fp, r3
   28398:	058d300c 	streq	r3, [sp, #12]
   2839c:	158d300c 	strne	r3, [sp, #12]
   283a0:	e28bb001 	add	fp, fp, #1
   283a4:	e24a3058 	sub	r3, sl, #88	; 0x58
   283a8:	e3530020 	cmp	r3, #32
   283ac:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   283b0:	ea00004b 	b	284e4 <CString::FormatV(char const*, std::__va_list)+0x274>
   283b4:	00028514 	.word	0x00028514
   283b8:	000284e4 	.word	0x000284e4
   283bc:	000284e4 	.word	0x000284e4
   283c0:	000284e4 	.word	0x000284e4
   283c4:	000284e4 	.word	0x000284e4
   283c8:	000284e4 	.word	0x000284e4
   283cc:	000284e4 	.word	0x000284e4
   283d0:	000284e4 	.word	0x000284e4
   283d4:	000284e4 	.word	0x000284e4
   283d8:	000284e4 	.word	0x000284e4
   283dc:	000284e4 	.word	0x000284e4
   283e0:	00028a20 	.word	0x00028a20
   283e4:	00028700 	.word	0x00028700
   283e8:	000284e4 	.word	0x000284e4
   283ec:	00028a64 	.word	0x00028a64
   283f0:	000284e4 	.word	0x000284e4
   283f4:	000284e4 	.word	0x000284e4
   283f8:	00028700 	.word	0x00028700
   283fc:	000284e4 	.word	0x000284e4
   28400:	000284e4 	.word	0x000284e4
   28404:	000284e4 	.word	0x000284e4
   28408:	000284e4 	.word	0x000284e4
   2840c:	000284e4 	.word	0x000284e4
   28410:	00028928 	.word	0x00028928
   28414:	00028514 	.word	0x00028514
   28418:	000284e4 	.word	0x000284e4
   2841c:	000284e4 	.word	0x000284e4
   28420:	000288ec 	.word	0x000288ec
   28424:	000284e4 	.word	0x000284e4
   28428:	00028ca8 	.word	0x00028ca8
   2842c:	000284e4 	.word	0x000284e4
   28430:	000284e4 	.word	0x000284e4
   28434:	00028514 	.word	0x00028514
   28438:	e3a01001 	mov	r1, #1
   2843c:	e1a00005 	mov	r0, r5
   28440:	ebfffd4d 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28444:	e595300c 	ldr	r3, [r5, #12]
   28448:	e2832001 	add	r2, r3, #1
   2844c:	e585200c 	str	r2, [r5, #12]
   28450:	e5c34000 	strb	r4, [r3]
   28454:	e28bb001 	add	fp, fp, #1
   28458:	e1db40d0 	ldrsb	r4, [fp]
   2845c:	e3540000 	cmp	r4, #0
   28460:	1affff95 	bne	282bc <CString::FormatV(char const*, std::__va_list)+0x4c>
   28464:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   28468:	e593000c 	ldr	r0, [r3, #12]
   2846c:	e3a03000 	mov	r3, #0
   28470:	e5c03000 	strb	r3, [r0]
   28474:	e28dd06c 	add	sp, sp, #108	; 0x6c
   28478:	ecbd8b02 	vpop	{d8}
   2847c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28480:	e3a01001 	mov	r1, #1
   28484:	e1a00005 	mov	r0, r5
   28488:	ebfffd3b 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2848c:	e595300c 	ldr	r3, [r5, #12]
   28490:	e28bb002 	add	fp, fp, #2
   28494:	e2832001 	add	r2, r3, #1
   28498:	e585200c 	str	r2, [r5, #12]
   2849c:	e5c34000 	strb	r4, [r3]
   284a0:	eaffffec 	b	28458 <CString::FormatV(char const*, std::__va_list)+0x1e8>
   284a4:	e1dba0d1 	ldrsb	sl, [fp, #1]
   284a8:	e3a00000 	mov	r0, #0
   284ac:	e24a3030 	sub	r3, sl, #48	; 0x30
   284b0:	e6ef3073 	uxtb	r3, r3
   284b4:	e3530009 	cmp	r3, #9
   284b8:	e28bb001 	add	fp, fp, #1
   284bc:	8affffa8 	bhi	28364 <CString::FormatV(char const*, std::__va_list)+0xf4>
   284c0:	e0800100 	add	r0, r0, r0, lsl #2
   284c4:	e08a0080 	add	r0, sl, r0, lsl #1
   284c8:	e1fba0d1 	ldrsb	sl, [fp, #1]!
   284cc:	e2400030 	sub	r0, r0, #48	; 0x30
   284d0:	e24a3030 	sub	r3, sl, #48	; 0x30
   284d4:	e6ef3073 	uxtb	r3, r3
   284d8:	e3530009 	cmp	r3, #9
   284dc:	9afffff7 	bls	284c0 <CString::FormatV(char const*, std::__va_list)+0x250>
   284e0:	eaffff9f 	b	28364 <CString::FormatV(char const*, std::__va_list)+0xf4>
   284e4:	e3a01001 	mov	r1, #1
   284e8:	e1a00005 	mov	r0, r5
   284ec:	ebfffd22 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   284f0:	e3a01001 	mov	r1, #1
   284f4:	e3a02025 	mov	r2, #37	; 0x25
   284f8:	e595300c 	ldr	r3, [r5, #12]
   284fc:	e0830001 	add	r0, r3, r1
   28500:	e585000c 	str	r0, [r5, #12]
   28504:	e5c32000 	strb	r2, [r3]
   28508:	e1a00005 	mov	r0, r5
   2850c:	e1db40d0 	ldrsb	r4, [fp]
   28510:	eaffffca 	b	28440 <CString::FormatV(char const*, std::__va_list)+0x1d0>
   28514:	e3510000 	cmp	r1, #0
   28518:	03a08010 	moveq	r8, #16
   2851c:	0a000007 	beq	28540 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   28520:	e3a08010 	mov	r8, #16
   28524:	e59f39d4 	ldr	r3, [pc, #2516]	; 28f00 <CString::FormatV(char const*, std::__va_list)+0xc90>
   28528:	e35a0058 	cmp	sl, #88	; 0x58
   2852c:	e59f19d0 	ldr	r1, [pc, #2512]	; 28f04 <CString::FormatV(char const*, std::__va_list)+0xc94>
   28530:	e1a00005 	mov	r0, r5
   28534:	01a01003 	moveq	r1, r3
   28538:	ebfffdb7 	bl	27c1c <CString::PutString(char const*)>
   2853c:	e1dba0d0 	ldrsb	sl, [fp]
   28540:	e59d300c 	ldr	r3, [sp, #12]
   28544:	e3530000 	cmp	r3, #0
   28548:	0a000106 	beq	28968 <CString::FormatV(char const*, std::__va_list)+0x6f8>
   2854c:	e3a01000 	mov	r1, #0
   28550:	e1a00008 	mov	r0, r8
   28554:	e59d3020 	ldr	r3, [sp, #32]
   28558:	e1cd01f8 	strd	r0, [sp, #24]
   2855c:	e2833007 	add	r3, r3, #7
   28560:	e3c3c007 	bic	ip, r3, #7
   28564:	e0cc20d8 	ldrd	r2, [ip], #8
   28568:	e1530001 	cmp	r3, r1
   2856c:	01520008 	cmpeq	r2, r8
   28570:	e1cd21f0 	strd	r2, [sp, #16]
   28574:	e58dc020 	str	ip, [sp, #32]
   28578:	3a00023b 	bcc	28e6c <CString::FormatV(char const*, std::__va_list)+0xbfc>
   2857c:	e58da00c 	str	sl, [sp, #12]
   28580:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   28584:	e58d5034 	str	r5, [sp, #52]	; 0x34
   28588:	e58db038 	str	fp, [sp, #56]	; 0x38
   2858c:	e3a08001 	mov	r8, #1
   28590:	e3a09000 	mov	r9, #0
   28594:	e1a04000 	mov	r4, r0
   28598:	e1a05001 	mov	r5, r1
   2859c:	e1a0a002 	mov	sl, r2
   285a0:	e1a0b003 	mov	fp, r3
   285a4:	e0030598 	mul	r3, r8, r5
   285a8:	e0233994 	mla	r3, r4, r9, r3
   285ac:	e0898498 	umull	r8, r9, r8, r4
   285b0:	e0839009 	add	r9, r3, r9
   285b4:	e1a02008 	mov	r2, r8
   285b8:	e1a03009 	mov	r3, r9
   285bc:	e1a0000a 	mov	r0, sl
   285c0:	e1a0100b 	mov	r1, fp
   285c4:	eb005369 	bl	3d370 <__aeabi_uldivmod>
   285c8:	e1510005 	cmp	r1, r5
   285cc:	01500004 	cmpeq	r0, r4
   285d0:	e1a06000 	mov	r6, r0
   285d4:	e1a07001 	mov	r7, r1
   285d8:	2afffff1 	bcs	285a4 <CString::FormatV(char const*, std::__va_list)+0x334>
   285dc:	e59da00c 	ldr	sl, [sp, #12]
   285e0:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   285e4:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   285e8:	e59db038 	ldr	fp, [sp, #56]	; 0x38
   285ec:	e35a0058 	cmp	sl, #88	; 0x58
   285f0:	13a03057 	movne	r3, #87	; 0x57
   285f4:	03a03037 	moveq	r3, #55	; 0x37
   285f8:	e28da044 	add	sl, sp, #68	; 0x44
   285fc:	ee08aa10 	vmov	s16, sl
   28600:	e58d4034 	str	r4, [sp, #52]	; 0x34
   28604:	e58da00c 	str	sl, [sp, #12]
   28608:	e58d5038 	str	r5, [sp, #56]	; 0x38
   2860c:	e58db03c 	str	fp, [sp, #60]	; 0x3c
   28610:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   28614:	e1cd41d0 	ldrd	r4, [sp, #16]
   28618:	e1cda1d8 	ldrd	sl, [sp, #24]
   2861c:	ea00000a 	b	2864c <CString::FormatV(char const*, std::__va_list)+0x3dc>
   28620:	e58d0018 	str	r0, [sp, #24]
   28624:	e58d1010 	str	r1, [sp, #16]
   28628:	e1a00004 	mov	r0, r4
   2862c:	e1a01005 	mov	r1, r5
   28630:	eb00534e 	bl	3d370 <__aeabi_uldivmod>
   28634:	e59d2018 	ldr	r2, [sp, #24]
   28638:	e59d3010 	ldr	r3, [sp, #16]
   2863c:	e1a06000 	mov	r6, r0
   28640:	e1a08002 	mov	r8, r2
   28644:	e1a07001 	mov	r7, r1
   28648:	e1a09003 	mov	r9, r3
   2864c:	e1a00004 	mov	r0, r4
   28650:	e1a01005 	mov	r1, r5
   28654:	e1a02008 	mov	r2, r8
   28658:	e1a03009 	mov	r3, r9
   2865c:	eb005343 	bl	3d370 <__aeabi_uldivmod>
   28660:	e3570000 	cmp	r7, #0
   28664:	03560009 	cmpeq	r6, #9
   28668:	e1a05003 	mov	r5, r3
   2866c:	859d302c 	ldrhi	r3, [sp, #44]	; 0x2c
   28670:	e59dc00c 	ldr	ip, [sp, #12]
   28674:	e1a04002 	mov	r4, r2
   28678:	e2862030 	add	r2, r6, #48	; 0x30
   2867c:	80836006 	addhi	r6, r3, r6
   28680:	96af6072 	sxtbls	r6, r2
   28684:	86af6076 	sxtbhi	r6, r6
   28688:	e1a0200a 	mov	r2, sl
   2868c:	e1a0300b 	mov	r3, fp
   28690:	e4cc6001 	strb	r6, [ip], #1
   28694:	e1a00008 	mov	r0, r8
   28698:	e1a01009 	mov	r1, r9
   2869c:	e58dc00c 	str	ip, [sp, #12]
   286a0:	eb005332 	bl	3d370 <__aeabi_uldivmod>
   286a4:	e159000b 	cmp	r9, fp
   286a8:	0158000a 	cmpeq	r8, sl
   286ac:	e1a02000 	mov	r2, r0
   286b0:	e1a03001 	mov	r3, r1
   286b4:	2affffd9 	bcs	28620 <CString::FormatV(char const*, std::__va_list)+0x3b0>
   286b8:	e3a03000 	mov	r3, #0
   286bc:	e59da00c 	ldr	sl, [sp, #12]
   286c0:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
   286c4:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
   286c8:	e59db03c 	ldr	fp, [sp, #60]	; 0x3c
   286cc:	e5ca3000 	strb	r3, [sl]
   286d0:	ee180a10 	vmov	r0, s16
   286d4:	eb000610 	bl	29f1c <strlen>
   286d8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   286dc:	e1a06000 	mov	r6, r0
   286e0:	e3530000 	cmp	r3, #0
   286e4:	1a000100 	bne	28aec <CString::FormatV(char const*, std::__va_list)+0x87c>
   286e8:	e1500004 	cmp	r0, r4
   286ec:	3a000111 	bcc	28b38 <CString::FormatV(char const*, std::__va_list)+0x8c8>
   286f0:	ee181a10 	vmov	r1, s16
   286f4:	e1a00005 	mov	r0, r5
   286f8:	ebfffd47 	bl	27c1c <CString::PutString(char const*)>
   286fc:	eaffff54 	b	28454 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28700:	e59d300c 	ldr	r3, [sp, #12]
   28704:	e3530000 	cmp	r3, #0
   28708:	e59d3020 	ldr	r3, [sp, #32]
   2870c:	0a00013b 	beq	28c00 <CString::FormatV(char const*, std::__va_list)+0x990>
   28710:	e2833007 	add	r3, r3, #7
   28714:	e3c31007 	bic	r1, r3, #7
   28718:	e0c120d8 	ldrd	r2, [r1], #8
   2871c:	e3520000 	cmp	r2, #0
   28720:	e1a07003 	mov	r7, r3
   28724:	e2d33000 	sbcs	r3, r3, #0
   28728:	a3a03000 	movge	r3, #0
   2872c:	e1a06002 	mov	r6, r2
   28730:	e58d1020 	str	r1, [sp, #32]
   28734:	a58d300c 	strge	r3, [sp, #12]
   28738:	aa000003 	bge	2874c <CString::FormatV(char const*, std::__va_list)+0x4dc>
   2873c:	e2762000 	rsbs	r2, r6, #0
   28740:	e2e73000 	rsc	r3, r7, #0
   28744:	e1a06002 	mov	r6, r2
   28748:	e1a07003 	mov	r7, r3
   2874c:	e356000a 	cmp	r6, #10
   28750:	e2d71000 	sbcs	r1, r7, #0
   28754:	e1a02006 	mov	r2, r6
   28758:	e1a03007 	mov	r3, r7
   2875c:	e1a08006 	mov	r8, r6
   28760:	e1a09007 	mov	r9, r7
   28764:	ba0001da 	blt	28ed4 <CString::FormatV(char const*, std::__va_list)+0xc64>
   28768:	e58db010 	str	fp, [sp, #16]
   2876c:	e3a06001 	mov	r6, #1
   28770:	e3a07000 	mov	r7, #0
   28774:	e1a0a002 	mov	sl, r2
   28778:	e1a0b003 	mov	fp, r3
   2877c:	e1a02107 	lsl	r2, r7, #2
   28780:	e1a03106 	lsl	r3, r6, #2
   28784:	e0933006 	adds	r3, r3, r6
   28788:	e1822f26 	orr	r2, r2, r6, lsr #30
   2878c:	e0a22007 	adc	r2, r2, r7
   28790:	e0936003 	adds	r6, r3, r3
   28794:	e0a27002 	adc	r7, r2, r2
   28798:	e1a03007 	mov	r3, r7
   2879c:	e1a02006 	mov	r2, r6
   287a0:	e1a0000a 	mov	r0, sl
   287a4:	e1a0100b 	mov	r1, fp
   287a8:	eb0052f0 	bl	3d370 <__aeabi_uldivmod>
   287ac:	e3510000 	cmp	r1, #0
   287b0:	03500009 	cmpeq	r0, #9
   287b4:	8afffff0 	bhi	2877c <CString::FormatV(char const*, std::__va_list)+0x50c>
   287b8:	e59db010 	ldr	fp, [sp, #16]
   287bc:	e28d3044 	add	r3, sp, #68	; 0x44
   287c0:	e58d4018 	str	r4, [sp, #24]
   287c4:	e58d502c 	str	r5, [sp, #44]	; 0x2c
   287c8:	ee083a10 	vmov	s16, r3
   287cc:	e1a0a003 	mov	sl, r3
   287d0:	e1a04000 	mov	r4, r0
   287d4:	e1a05001 	mov	r5, r1
   287d8:	e58db034 	str	fp, [sp, #52]	; 0x34
   287dc:	ea000009 	b	28808 <CString::FormatV(char const*, std::__va_list)+0x598>
   287e0:	e1a03001 	mov	r3, r1
   287e4:	e58d0010 	str	r0, [sp, #16]
   287e8:	e1a01009 	mov	r1, r9
   287ec:	e1a00008 	mov	r0, r8
   287f0:	eb0052de 	bl	3d370 <__aeabi_uldivmod>
   287f4:	e59d2010 	ldr	r2, [sp, #16]
   287f8:	e1a04000 	mov	r4, r0
   287fc:	e1a06002 	mov	r6, r2
   28800:	e1a05001 	mov	r5, r1
   28804:	e1a0700b 	mov	r7, fp
   28808:	e1a00008 	mov	r0, r8
   2880c:	e1a01009 	mov	r1, r9
   28810:	e1a02006 	mov	r2, r6
   28814:	e1a03007 	mov	r3, r7
   28818:	eb0052d4 	bl	3d370 <__aeabi_uldivmod>
   2881c:	e3550000 	cmp	r5, #0
   28820:	03540009 	cmpeq	r4, #9
   28824:	e2841030 	add	r1, r4, #48	; 0x30
   28828:	82844057 	addhi	r4, r4, #87	; 0x57
   2882c:	96af4071 	sxtbls	r4, r1
   28830:	86af4074 	sxtbhi	r4, r4
   28834:	e1a08002 	mov	r8, r2
   28838:	e1a09003 	mov	r9, r3
   2883c:	e3a0200a 	mov	r2, #10
   28840:	e3a03000 	mov	r3, #0
   28844:	e1a00006 	mov	r0, r6
   28848:	e1a01007 	mov	r1, r7
   2884c:	e4ca4001 	strb	r4, [sl], #1
   28850:	eb0052c6 	bl	3d370 <__aeabi_uldivmod>
   28854:	e3570000 	cmp	r7, #0
   28858:	03560009 	cmpeq	r6, #9
   2885c:	e1a02000 	mov	r2, r0
   28860:	e1a0b001 	mov	fp, r1
   28864:	8affffdd 	bhi	287e0 <CString::FormatV(char const*, std::__va_list)+0x570>
   28868:	e3a03000 	mov	r3, #0
   2886c:	e59d4018 	ldr	r4, [sp, #24]
   28870:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
   28874:	e59db034 	ldr	fp, [sp, #52]	; 0x34
   28878:	e5ca3000 	strb	r3, [sl]
   2887c:	ee180a10 	vmov	r0, s16
   28880:	eb0005a5 	bl	29f1c <strlen>
   28884:	e59d300c 	ldr	r3, [sp, #12]
   28888:	e1a06000 	mov	r6, r0
   2888c:	e3530000 	cmp	r3, #0
   28890:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   28894:	1a0000b8 	bne	28b7c <CString::FormatV(char const*, std::__va_list)+0x90c>
   28898:	e3530000 	cmp	r3, #0
   2889c:	0a00011d 	beq	28d18 <CString::FormatV(char const*, std::__va_list)+0xaa8>
   288a0:	ee181a10 	vmov	r1, s16
   288a4:	e1a00005 	mov	r0, r5
   288a8:	ebfffcdb 	bl	27c1c <CString::PutString(char const*)>
   288ac:	e1540006 	cmp	r4, r6
   288b0:	9afffee7 	bls	28454 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   288b4:	e0444006 	sub	r4, r4, r6
   288b8:	e1a00005 	mov	r0, r5
   288bc:	e1a01004 	mov	r1, r4
   288c0:	ebfffc2d 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   288c4:	e3a00020 	mov	r0, #32
   288c8:	e2443001 	sub	r3, r4, #1
   288cc:	e595200c 	ldr	r2, [r5, #12]
   288d0:	e2433001 	sub	r3, r3, #1
   288d4:	e2821001 	add	r1, r2, #1
   288d8:	e3730001 	cmn	r3, #1
   288dc:	e585100c 	str	r1, [r5, #12]
   288e0:	e5c20000 	strb	r0, [r2]
   288e4:	1afffff8 	bne	288cc <CString::FormatV(char const*, std::__va_list)+0x65c>
   288e8:	eafffed9 	b	28454 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   288ec:	e59d7020 	ldr	r7, [sp, #32]
   288f0:	e4978004 	ldr	r8, [r7], #4
   288f4:	e1a00008 	mov	r0, r8
   288f8:	eb000587 	bl	29f1c <strlen>
   288fc:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   28900:	e1a06000 	mov	r6, r0
   28904:	e3530000 	cmp	r3, #0
   28908:	1a000133 	bne	28ddc <CString::FormatV(char const*, std::__va_list)+0xb6c>
   2890c:	e1500004 	cmp	r0, r4
   28910:	3a000144 	bcc	28e28 <CString::FormatV(char const*, std::__va_list)+0xbb8>
   28914:	e1a01008 	mov	r1, r8
   28918:	e1a00005 	mov	r0, r5
   2891c:	e58d7020 	str	r7, [sp, #32]
   28920:	ebfffcbd 	bl	27c1c <CString::PutString(char const*)>
   28924:	eafffeca 	b	28454 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28928:	e3510000 	cmp	r1, #0
   2892c:	03a08008 	moveq	r8, #8
   28930:	0affff02 	beq	28540 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   28934:	e3a01001 	mov	r1, #1
   28938:	e1a00005 	mov	r0, r5
   2893c:	ebfffc0e 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28940:	e3a02030 	mov	r2, #48	; 0x30
   28944:	e595300c 	ldr	r3, [r5, #12]
   28948:	e3a08008 	mov	r8, #8
   2894c:	e2831001 	add	r1, r3, #1
   28950:	e585100c 	str	r1, [r5, #12]
   28954:	e5c32000 	strb	r2, [r3]
   28958:	e59d300c 	ldr	r3, [sp, #12]
   2895c:	e1dba0d0 	ldrsb	sl, [fp]
   28960:	e3530000 	cmp	r3, #0
   28964:	1afffef8 	bne	2854c <CString::FormatV(char const*, std::__va_list)+0x2dc>
   28968:	e59d2020 	ldr	r2, [sp, #32]
   2896c:	e4929004 	ldr	r9, [r2], #4
   28970:	e1580009 	cmp	r8, r9
   28974:	e58d2020 	str	r2, [sp, #32]
   28978:	8a000138 	bhi	28e60 <CString::FormatV(char const*, std::__va_list)+0xbf0>
   2897c:	e3a07001 	mov	r7, #1
   28980:	e0070798 	mul	r7, r8, r7
   28984:	e1a00009 	mov	r0, r9
   28988:	e1a01007 	mov	r1, r7
   2898c:	eb00512e 	bl	3ce4c <__udivsi3>
   28990:	e1580000 	cmp	r8, r0
   28994:	9afffff9 	bls	28980 <CString::FormatV(char const*, std::__va_list)+0x710>
   28998:	e1a06000 	mov	r6, r0
   2899c:	e35a0058 	cmp	sl, #88	; 0x58
   289a0:	13a03057 	movne	r3, #87	; 0x57
   289a4:	03a03037 	moveq	r3, #55	; 0x37
   289a8:	e28da044 	add	sl, sp, #68	; 0x44
   289ac:	e58d400c 	str	r4, [sp, #12]
   289b0:	ee08aa10 	vmov	s16, sl
   289b4:	e1a04007 	mov	r4, r7
   289b8:	e1a07003 	mov	r7, r3
   289bc:	ea000003 	b	289d0 <CString::FormatV(char const*, std::__va_list)+0x760>
   289c0:	e1a01000 	mov	r1, r0
   289c4:	e1a00009 	mov	r0, r9
   289c8:	eb00511f 	bl	3ce4c <__udivsi3>
   289cc:	e1a06000 	mov	r6, r0
   289d0:	e1a00009 	mov	r0, r9
   289d4:	e1a01004 	mov	r1, r4
   289d8:	eb005196 	bl	3d038 <__aeabi_uidivmod>
   289dc:	e3560009 	cmp	r6, #9
   289e0:	e2862030 	add	r2, r6, #48	; 0x30
   289e4:	80876006 	addhi	r6, r7, r6
   289e8:	96af6072 	sxtbls	r6, r2
   289ec:	86af6076 	sxtbhi	r6, r6
   289f0:	e1a00004 	mov	r0, r4
   289f4:	e1a09001 	mov	r9, r1
   289f8:	e4ca6001 	strb	r6, [sl], #1
   289fc:	e1a01008 	mov	r1, r8
   28a00:	eb005111 	bl	3ce4c <__udivsi3>
   28a04:	e1580004 	cmp	r8, r4
   28a08:	e1a04000 	mov	r4, r0
   28a0c:	9affffeb 	bls	289c0 <CString::FormatV(char const*, std::__va_list)+0x750>
   28a10:	e3a03000 	mov	r3, #0
   28a14:	e59d400c 	ldr	r4, [sp, #12]
   28a18:	e5ca3000 	strb	r3, [sl]
   28a1c:	eaffff2b 	b	286d0 <CString::FormatV(char const*, std::__va_list)+0x460>
   28a20:	e59d7020 	ldr	r7, [sp, #32]
   28a24:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   28a28:	e4976004 	ldr	r6, [r7], #4
   28a2c:	e3530000 	cmp	r3, #0
   28a30:	e6af6076 	sxtb	r6, r6
   28a34:	1a0000ca 	bne	28d64 <CString::FormatV(char const*, std::__va_list)+0xaf4>
   28a38:	e3540001 	cmp	r4, #1
   28a3c:	8a00009b 	bhi	28cb0 <CString::FormatV(char const*, std::__va_list)+0xa40>
   28a40:	e3a01001 	mov	r1, #1
   28a44:	e1a00005 	mov	r0, r5
   28a48:	ebfffbcb 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28a4c:	e595300c 	ldr	r3, [r5, #12]
   28a50:	e58d7020 	str	r7, [sp, #32]
   28a54:	e2832001 	add	r2, r3, #1
   28a58:	e585200c 	str	r2, [r5, #12]
   28a5c:	e5c36000 	strb	r6, [r3]
   28a60:	eafffe7b 	b	28454 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28a64:	e59d3020 	ldr	r3, [sp, #32]
   28a68:	e2833007 	add	r3, r3, #7
   28a6c:	e3c33007 	bic	r3, r3, #7
   28a70:	e1a01003 	mov	r1, r3
   28a74:	e0c120d8 	ldrd	r2, [r1], #8
   28a78:	e58d1020 	str	r1, [sp, #32]
   28a7c:	e28d1044 	add	r1, sp, #68	; 0x44
   28a80:	e1a06001 	mov	r6, r1
   28a84:	e58d0000 	str	r0, [sp]
   28a88:	e1a00001 	mov	r0, r1
   28a8c:	ee081a10 	vmov	s16, r1
   28a90:	ebfffd52 	bl	27fe0 <CString::ftoa(char*, double, unsigned int)>
   28a94:	e1a00006 	mov	r0, r6
   28a98:	eb00051f 	bl	29f1c <strlen>
   28a9c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   28aa0:	e1a06000 	mov	r6, r0
   28aa4:	e3530000 	cmp	r3, #0
   28aa8:	1a0000b8 	bne	28d90 <CString::FormatV(char const*, std::__va_list)+0xb20>
   28aac:	e1500004 	cmp	r0, r4
   28ab0:	2affff0e 	bcs	286f0 <CString::FormatV(char const*, std::__va_list)+0x480>
   28ab4:	e0444000 	sub	r4, r4, r0
   28ab8:	e1a01004 	mov	r1, r4
   28abc:	e1a00005 	mov	r0, r5
   28ac0:	ebfffbad 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28ac4:	e3a00020 	mov	r0, #32
   28ac8:	e2443001 	sub	r3, r4, #1
   28acc:	e595200c 	ldr	r2, [r5, #12]
   28ad0:	e2433001 	sub	r3, r3, #1
   28ad4:	e2821001 	add	r1, r2, #1
   28ad8:	e3730001 	cmn	r3, #1
   28adc:	e585100c 	str	r1, [r5, #12]
   28ae0:	e5c20000 	strb	r0, [r2]
   28ae4:	1afffff8 	bne	28acc <CString::FormatV(char const*, std::__va_list)+0x85c>
   28ae8:	eaffff00 	b	286f0 <CString::FormatV(char const*, std::__va_list)+0x480>
   28aec:	ee181a10 	vmov	r1, s16
   28af0:	e1a00005 	mov	r0, r5
   28af4:	ebfffc48 	bl	27c1c <CString::PutString(char const*)>
   28af8:	e1560004 	cmp	r6, r4
   28afc:	2afffe54 	bcs	28454 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28b00:	e0444006 	sub	r4, r4, r6
   28b04:	e1a00005 	mov	r0, r5
   28b08:	e1a01004 	mov	r1, r4
   28b0c:	ebfffb9a 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28b10:	e3a00020 	mov	r0, #32
   28b14:	e2443001 	sub	r3, r4, #1
   28b18:	e595200c 	ldr	r2, [r5, #12]
   28b1c:	e2433001 	sub	r3, r3, #1
   28b20:	e2821001 	add	r1, r2, #1
   28b24:	e3730001 	cmn	r3, #1
   28b28:	e585100c 	str	r1, [r5, #12]
   28b2c:	e5c20000 	strb	r0, [r2]
   28b30:	1afffff8 	bne	28b18 <CString::FormatV(char const*, std::__va_list)+0x8a8>
   28b34:	eafffe46 	b	28454 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28b38:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   28b3c:	e0444000 	sub	r4, r4, r0
   28b40:	e3530000 	cmp	r3, #0
   28b44:	e1a01004 	mov	r1, r4
   28b48:	e1a00005 	mov	r0, r5
   28b4c:	13a06030 	movne	r6, #48	; 0x30
   28b50:	03a06020 	moveq	r6, #32
   28b54:	ebfffb88 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28b58:	e2443001 	sub	r3, r4, #1
   28b5c:	e595200c 	ldr	r2, [r5, #12]
   28b60:	e2433001 	sub	r3, r3, #1
   28b64:	e2821001 	add	r1, r2, #1
   28b68:	e3730001 	cmn	r3, #1
   28b6c:	e585100c 	str	r1, [r5, #12]
   28b70:	e5c26000 	strb	r6, [r2]
   28b74:	1afffff8 	bne	28b5c <CString::FormatV(char const*, std::__va_list)+0x8ec>
   28b78:	eafffedc 	b	286f0 <CString::FormatV(char const*, std::__va_list)+0x480>
   28b7c:	e3530000 	cmp	r3, #0
   28b80:	e2806001 	add	r6, r0, #1
   28b84:	1a00005a 	bne	28cf4 <CString::FormatV(char const*, std::__va_list)+0xa84>
   28b88:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   28b8c:	e3530000 	cmp	r3, #0
   28b90:	1a0000c6 	bne	28eb0 <CString::FormatV(char const*, std::__va_list)+0xc40>
   28b94:	e1540006 	cmp	r4, r6
   28b98:	9a00000f 	bls	28bdc <CString::FormatV(char const*, std::__va_list)+0x96c>
   28b9c:	e0444006 	sub	r4, r4, r6
   28ba0:	e1a00005 	mov	r0, r5
   28ba4:	e1a01004 	mov	r1, r4
   28ba8:	ebfffb73 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28bac:	e3a00020 	mov	r0, #32
   28bb0:	e2443001 	sub	r3, r4, #1
   28bb4:	e595200c 	ldr	r2, [r5, #12]
   28bb8:	e2433001 	sub	r3, r3, #1
   28bbc:	e2821001 	add	r1, r2, #1
   28bc0:	e3730001 	cmn	r3, #1
   28bc4:	e585100c 	str	r1, [r5, #12]
   28bc8:	e5c20000 	strb	r0, [r2]
   28bcc:	1afffff8 	bne	28bb4 <CString::FormatV(char const*, std::__va_list)+0x944>
   28bd0:	e59d300c 	ldr	r3, [sp, #12]
   28bd4:	e3530000 	cmp	r3, #0
   28bd8:	0afffec4 	beq	286f0 <CString::FormatV(char const*, std::__va_list)+0x480>
   28bdc:	e3a01001 	mov	r1, #1
   28be0:	e1a00005 	mov	r0, r5
   28be4:	ebfffb64 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28be8:	e3a0202d 	mov	r2, #45	; 0x2d
   28bec:	e595300c 	ldr	r3, [r5, #12]
   28bf0:	e2831001 	add	r1, r3, #1
   28bf4:	e585100c 	str	r1, [r5, #12]
   28bf8:	e5c32000 	strb	r2, [r3]
   28bfc:	eafffebb 	b	286f0 <CString::FormatV(char const*, std::__va_list)+0x480>
   28c00:	e4937004 	ldr	r7, [r3], #4
   28c04:	e3570000 	cmp	r7, #0
   28c08:	e58d3020 	str	r3, [sp, #32]
   28c0c:	ba000034 	blt	28ce4 <CString::FormatV(char const*, std::__va_list)+0xa74>
   28c10:	e3570009 	cmp	r7, #9
   28c14:	e1a09007 	mov	r9, r7
   28c18:	da0000b2 	ble	28ee8 <CString::FormatV(char const*, std::__va_list)+0xc78>
   28c1c:	e3a06001 	mov	r6, #1
   28c20:	e0866106 	add	r6, r6, r6, lsl #2
   28c24:	e1a06086 	lsl	r6, r6, #1
   28c28:	e1a01006 	mov	r1, r6
   28c2c:	e1a00007 	mov	r0, r7
   28c30:	eb005085 	bl	3ce4c <__udivsi3>
   28c34:	e3500009 	cmp	r0, #9
   28c38:	8afffff8 	bhi	28c20 <CString::FormatV(char const*, std::__va_list)+0x9b0>
   28c3c:	e1a08000 	mov	r8, r0
   28c40:	e28d3044 	add	r3, sp, #68	; 0x44
   28c44:	ee083a10 	vmov	s16, r3
   28c48:	e1a07003 	mov	r7, r3
   28c4c:	ea000003 	b	28c60 <CString::FormatV(char const*, std::__va_list)+0x9f0>
   28c50:	e1a01006 	mov	r1, r6
   28c54:	e1a00009 	mov	r0, r9
   28c58:	eb00507b 	bl	3ce4c <__udivsi3>
   28c5c:	e1a08000 	mov	r8, r0
   28c60:	e1a00009 	mov	r0, r9
   28c64:	e1a01006 	mov	r1, r6
   28c68:	eb0050f2 	bl	3d038 <__aeabi_uidivmod>
   28c6c:	e3580009 	cmp	r8, #9
   28c70:	e2883030 	add	r3, r8, #48	; 0x30
   28c74:	96af8073 	sxtbls	r8, r3
   28c78:	e59f3288 	ldr	r3, [pc, #648]	; 28f08 <CString::FormatV(char const*, std::__va_list)+0xc98>
   28c7c:	e1a09001 	mov	r9, r1
   28c80:	e0813693 	umull	r3, r1, r3, r6
   28c84:	82888057 	addhi	r8, r8, #87	; 0x57
   28c88:	86af8078 	sxtbhi	r8, r8
   28c8c:	e3560009 	cmp	r6, #9
   28c90:	e4c78001 	strb	r8, [r7], #1
   28c94:	e1a061a1 	lsr	r6, r1, #3
   28c98:	8affffec 	bhi	28c50 <CString::FormatV(char const*, std::__va_list)+0x9e0>
   28c9c:	e3a03000 	mov	r3, #0
   28ca0:	e5c73000 	strb	r3, [r7]
   28ca4:	eafffef4 	b	2887c <CString::FormatV(char const*, std::__va_list)+0x60c>
   28ca8:	e3a0800a 	mov	r8, #10
   28cac:	eafffe23 	b	28540 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   28cb0:	e2441001 	sub	r1, r4, #1
   28cb4:	e1a00005 	mov	r0, r5
   28cb8:	ebfffb2f 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28cbc:	e3a01020 	mov	r1, #32
   28cc0:	e2444002 	sub	r4, r4, #2
   28cc4:	e595300c 	ldr	r3, [r5, #12]
   28cc8:	e2444001 	sub	r4, r4, #1
   28ccc:	e2832001 	add	r2, r3, #1
   28cd0:	e3740001 	cmn	r4, #1
   28cd4:	e585200c 	str	r2, [r5, #12]
   28cd8:	e5c31000 	strb	r1, [r3]
   28cdc:	1afffff8 	bne	28cc4 <CString::FormatV(char const*, std::__va_list)+0xa54>
   28ce0:	eaffff56 	b	28a40 <CString::FormatV(char const*, std::__va_list)+0x7d0>
   28ce4:	e3a03001 	mov	r3, #1
   28ce8:	e2677000 	rsb	r7, r7, #0
   28cec:	e58d300c 	str	r3, [sp, #12]
   28cf0:	eaffffc6 	b	28c10 <CString::FormatV(char const*, std::__va_list)+0x9a0>
   28cf4:	e3a01001 	mov	r1, #1
   28cf8:	e1a00005 	mov	r0, r5
   28cfc:	ebfffb1e 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28d00:	e3a0202d 	mov	r2, #45	; 0x2d
   28d04:	e595300c 	ldr	r3, [r5, #12]
   28d08:	e2831001 	add	r1, r3, #1
   28d0c:	e585100c 	str	r1, [r5, #12]
   28d10:	e5c32000 	strb	r2, [r3]
   28d14:	eafffee1 	b	288a0 <CString::FormatV(char const*, std::__va_list)+0x630>
   28d18:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   28d1c:	e3530000 	cmp	r3, #0
   28d20:	0a000073 	beq	28ef4 <CString::FormatV(char const*, std::__va_list)+0xc84>
   28d24:	e1560004 	cmp	r6, r4
   28d28:	2afffe70 	bcs	286f0 <CString::FormatV(char const*, std::__va_list)+0x480>
   28d2c:	e0444006 	sub	r4, r4, r6
   28d30:	e1a00005 	mov	r0, r5
   28d34:	e1a01004 	mov	r1, r4
   28d38:	ebfffb0f 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28d3c:	e3a00030 	mov	r0, #48	; 0x30
   28d40:	e2443001 	sub	r3, r4, #1
   28d44:	e595200c 	ldr	r2, [r5, #12]
   28d48:	e2433001 	sub	r3, r3, #1
   28d4c:	e2821001 	add	r1, r2, #1
   28d50:	e3730001 	cmn	r3, #1
   28d54:	e585100c 	str	r1, [r5, #12]
   28d58:	e5c20000 	strb	r0, [r2]
   28d5c:	1afffff8 	bne	28d44 <CString::FormatV(char const*, std::__va_list)+0xad4>
   28d60:	eafffe62 	b	286f0 <CString::FormatV(char const*, std::__va_list)+0x480>
   28d64:	e3a01001 	mov	r1, #1
   28d68:	e1a00005 	mov	r0, r5
   28d6c:	ebfffb02 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28d70:	e595300c 	ldr	r3, [r5, #12]
   28d74:	e3540001 	cmp	r4, #1
   28d78:	e2832001 	add	r2, r3, #1
   28d7c:	e585200c 	str	r2, [r5, #12]
   28d80:	e5c36000 	strb	r6, [r3]
   28d84:	8a00003c 	bhi	28e7c <CString::FormatV(char const*, std::__va_list)+0xc0c>
   28d88:	e58d7020 	str	r7, [sp, #32]
   28d8c:	eafffdb0 	b	28454 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28d90:	ee181a10 	vmov	r1, s16
   28d94:	e1a00005 	mov	r0, r5
   28d98:	ebfffb9f 	bl	27c1c <CString::PutString(char const*)>
   28d9c:	e1560004 	cmp	r6, r4
   28da0:	2afffdab 	bcs	28454 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28da4:	e0444006 	sub	r4, r4, r6
   28da8:	e1a00005 	mov	r0, r5
   28dac:	e1a01004 	mov	r1, r4
   28db0:	ebfffaf1 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28db4:	e3a00020 	mov	r0, #32
   28db8:	e2443001 	sub	r3, r4, #1
   28dbc:	e595200c 	ldr	r2, [r5, #12]
   28dc0:	e2433001 	sub	r3, r3, #1
   28dc4:	e2821001 	add	r1, r2, #1
   28dc8:	e3730001 	cmn	r3, #1
   28dcc:	e585100c 	str	r1, [r5, #12]
   28dd0:	e5c20000 	strb	r0, [r2]
   28dd4:	1afffff8 	bne	28dbc <CString::FormatV(char const*, std::__va_list)+0xb4c>
   28dd8:	eafffd9d 	b	28454 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28ddc:	e1a01008 	mov	r1, r8
   28de0:	e1a00005 	mov	r0, r5
   28de4:	ebfffb8c 	bl	27c1c <CString::PutString(char const*)>
   28de8:	e1560004 	cmp	r6, r4
   28dec:	2affffe5 	bcs	28d88 <CString::FormatV(char const*, std::__va_list)+0xb18>
   28df0:	e0444006 	sub	r4, r4, r6
   28df4:	e1a00005 	mov	r0, r5
   28df8:	e1a01004 	mov	r1, r4
   28dfc:	ebfffade 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28e00:	e3a00020 	mov	r0, #32
   28e04:	e2443001 	sub	r3, r4, #1
   28e08:	e595200c 	ldr	r2, [r5, #12]
   28e0c:	e2433001 	sub	r3, r3, #1
   28e10:	e2821001 	add	r1, r2, #1
   28e14:	e3730001 	cmn	r3, #1
   28e18:	e585100c 	str	r1, [r5, #12]
   28e1c:	e5c20000 	strb	r0, [r2]
   28e20:	1afffff8 	bne	28e08 <CString::FormatV(char const*, std::__va_list)+0xb98>
   28e24:	eaffffd7 	b	28d88 <CString::FormatV(char const*, std::__va_list)+0xb18>
   28e28:	e0444000 	sub	r4, r4, r0
   28e2c:	e1a01004 	mov	r1, r4
   28e30:	e1a00005 	mov	r0, r5
   28e34:	ebfffad0 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28e38:	e3a00020 	mov	r0, #32
   28e3c:	e2443001 	sub	r3, r4, #1
   28e40:	e595200c 	ldr	r2, [r5, #12]
   28e44:	e2433001 	sub	r3, r3, #1
   28e48:	e2821001 	add	r1, r2, #1
   28e4c:	e3730001 	cmn	r3, #1
   28e50:	e585100c 	str	r1, [r5, #12]
   28e54:	e5c20000 	strb	r0, [r2]
   28e58:	1afffff8 	bne	28e40 <CString::FormatV(char const*, std::__va_list)+0xbd0>
   28e5c:	eafffeac 	b	28914 <CString::FormatV(char const*, std::__va_list)+0x6a4>
   28e60:	e1a06009 	mov	r6, r9
   28e64:	e3a07001 	mov	r7, #1
   28e68:	eafffecb 	b	2899c <CString::FormatV(char const*, std::__va_list)+0x72c>
   28e6c:	e3a08001 	mov	r8, #1
   28e70:	e1cd61d0 	ldrd	r6, [sp, #16]
   28e74:	e3a09000 	mov	r9, #0
   28e78:	eafffddb 	b	285ec <CString::FormatV(char const*, std::__va_list)+0x37c>
   28e7c:	e2441001 	sub	r1, r4, #1
   28e80:	e1a00005 	mov	r0, r5
   28e84:	ebfffabc 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28e88:	e3a01020 	mov	r1, #32
   28e8c:	e2444002 	sub	r4, r4, #2
   28e90:	e595300c 	ldr	r3, [r5, #12]
   28e94:	e2444001 	sub	r4, r4, #1
   28e98:	e2832001 	add	r2, r3, #1
   28e9c:	e3740001 	cmn	r4, #1
   28ea0:	e585200c 	str	r2, [r5, #12]
   28ea4:	e5c31000 	strb	r1, [r3]
   28ea8:	1afffff8 	bne	28e90 <CString::FormatV(char const*, std::__va_list)+0xc20>
   28eac:	eaffffb5 	b	28d88 <CString::FormatV(char const*, std::__va_list)+0xb18>
   28eb0:	e3a01001 	mov	r1, #1
   28eb4:	e1a00005 	mov	r0, r5
   28eb8:	ebfffaaf 	bl	2797c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28ebc:	e3a0202d 	mov	r2, #45	; 0x2d
   28ec0:	e595300c 	ldr	r3, [r5, #12]
   28ec4:	e2831001 	add	r1, r3, #1
   28ec8:	e585100c 	str	r1, [r5, #12]
   28ecc:	e5c32000 	strb	r2, [r3]
   28ed0:	eaffff93 	b	28d24 <CString::FormatV(char const*, std::__va_list)+0xab4>
   28ed4:	e1a00008 	mov	r0, r8
   28ed8:	e3a06001 	mov	r6, #1
   28edc:	e3a07000 	mov	r7, #0
   28ee0:	e1a01009 	mov	r1, r9
   28ee4:	eafffe34 	b	287bc <CString::FormatV(char const*, std::__va_list)+0x54c>
   28ee8:	e1a08009 	mov	r8, r9
   28eec:	e3a06001 	mov	r6, #1
   28ef0:	eaffff52 	b	28c40 <CString::FormatV(char const*, std::__va_list)+0x9d0>
   28ef4:	e1500004 	cmp	r0, r4
   28ef8:	2afffdfc 	bcs	286f0 <CString::FormatV(char const*, std::__va_list)+0x480>
   28efc:	eaffff26 	b	28b9c <CString::FormatV(char const*, std::__va_list)+0x92c>
   28f00:	00044fec 	.word	0x00044fec
   28f04:	00044fe8 	.word	0x00044fe8
   28f08:	cccccccd 	.word	0xcccccccd

00028f0c <CString::Format(char const*, ...)>:
   28f0c:	e92d000e 	push	{r1, r2, r3}
   28f10:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   28f14:	e24dd008 	sub	sp, sp, #8
   28f18:	e28d2010 	add	r2, sp, #16
   28f1c:	e59d100c 	ldr	r1, [sp, #12]
   28f20:	e58d2004 	str	r2, [sp, #4]
   28f24:	ebfffcd1 	bl	28270 <CString::FormatV(char const*, std::__va_list)>
   28f28:	e28dd008 	add	sp, sp, #8
   28f2c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   28f30:	e28dd00c 	add	sp, sp, #12
   28f34:	e12fff1e 	bx	lr

00028f38 <__aeabi_atexit>:
   28f38:	e12fff1e 	bx	lr

00028f3c <__errno>:
   28f3c:	e59f0000 	ldr	r0, [pc]	; 28f44 <__errno+0x8>
   28f40:	e12fff1e 	bx	lr
   28f44:	0004dab0 	.word	0x0004dab0

00028f48 <set_qemu_exit_status>:
   28f48:	e59f3004 	ldr	r3, [pc, #4]	; 28f54 <set_qemu_exit_status+0xc>
   28f4c:	e5830008 	str	r0, [r3, #8]
   28f50:	e12fff1e 	bx	lr
   28f54:	0004daac 	.word	0x0004daac

00028f58 <halt>:
   28f58:	f10c0080 	cpsid	i
   28f5c:	f10c0040 	cpsid	f
   28f60:	eafffffe 	b	28f60 <halt+0x8>

00028f64 <reboot>:
   28f64:	e3a03000 	mov	r3, #0
   28f68:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   28f6c:	e59f3010 	ldr	r3, [pc, #16]	; 28f84 <reboot+0x20>
   28f70:	e59f1010 	ldr	r1, [pc, #16]	; 28f88 <reboot+0x24>
   28f74:	e59f2010 	ldr	r2, [pc, #16]	; 28f8c <reboot+0x28>
   28f78:	e5831024 	str	r1, [r3, #36]	; 0x24
   28f7c:	e583201c 	str	r2, [r3, #28]
   28f80:	eafffffe 	b	28f80 <reboot+0x1c>
   28f84:	20100000 	.word	0x20100000
   28f88:	5a000001 	.word	0x5a000001
   28f8c:	5a000020 	.word	0x5a000020

00028f90 <vfpinit>:
   28f90:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   28f94:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   28f98:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   28f9c:	e3a03000 	mov	r3, #0
   28fa0:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   28fa4:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   28fa8:	eee83a10 	vmsr	fpexc, r3
   28fac:	e3a03402 	mov	r3, #33554432	; 0x2000000
   28fb0:	eee13a10 	vmsr	fpscr, r3
   28fb4:	e12fff1e 	bx	lr

00028fb8 <sysinit>:
   28fb8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   28fbc:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
   28fc0:	f1080040 	cpsie	f
   28fc4:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   28fc8:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   28fcc:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   28fd0:	e3a01000 	mov	r1, #0
   28fd4:	ee071f95 	mcr	15, 0, r1, cr7, cr5, {4}
   28fd8:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   28fdc:	eee83a10 	vmsr	fpexc, r3
   28fe0:	e3a03402 	mov	r3, #33554432	; 0x2000000
   28fe4:	eee13a10 	vmsr	fpscr, r3
   28fe8:	e59f0088 	ldr	r0, [pc, #136]	; 29078 <sysinit+0xc0>
   28fec:	e59f2088 	ldr	r2, [pc, #136]	; 2907c <sysinit+0xc4>
   28ff0:	e59f5088 	ldr	r5, [pc, #136]	; 29080 <sysinit+0xc8>
   28ff4:	e0422000 	sub	r2, r2, r0
   28ff8:	eb000379 	bl	29de4 <memset>
   28ffc:	e1a0000d 	mov	r0, sp
   29000:	ebfff78f 	bl	26e44 <CMachineInfo::CMachineInfo()>
   29004:	e3a01001 	mov	r1, #1
   29008:	e28d001c 	add	r0, sp, #28
   2900c:	eb0009db 	bl	2b780 <CMemorySystem::CMemorySystem(bool)>
   29010:	e59f306c 	ldr	r3, [pc, #108]	; 29084 <sysinit+0xcc>
   29014:	e1550003 	cmp	r5, r3
   29018:	2a000009 	bcs	29044 <sysinit+0x8c>
   2901c:	e2433001 	sub	r3, r3, #1
   29020:	e0433005 	sub	r3, r3, r5
   29024:	e3c33003 	bic	r3, r3, #3
   29028:	e2833004 	add	r3, r3, #4
   2902c:	e1a04005 	mov	r4, r5
   29030:	e0855003 	add	r5, r5, r3
   29034:	e4943004 	ldr	r3, [r4], #4
   29038:	e12fff33 	blx	r3
   2903c:	e1540005 	cmp	r4, r5
   29040:	1afffffb 	bne	29034 <sysinit+0x7c>
   29044:	ebff7c07 	bl	8068 <main>
   29048:	e3500001 	cmp	r0, #1
   2904c:	0a000000 	beq	29054 <sysinit+0x9c>
   29050:	ebffffc0 	bl	28f58 <halt>
   29054:	eb0006a1 	bl	2aae0 <IsChainBootEnabled>
   29058:	e3500000 	cmp	r0, #0
   2905c:	1a000000 	bne	29064 <sysinit+0xac>
   29060:	ebffffbf 	bl	28f64 <reboot>
   29064:	e28d001c 	add	r0, sp, #28
   29068:	eb000a28 	bl	2b910 <CMemorySystem::Destructor()>
   2906c:	f10c0040 	cpsid	f
   29070:	eb0006a0 	bl	2aaf8 <DoChainBoot>
   29074:	eafffff9 	b	29060 <sysinit+0xa8>
   29078:	0004da60 	.word	0x0004da60
   2907c:	00050968 	.word	0x00050968
   29080:	00047804 	.word	0x00047804
   29084:	00047814 	.word	0x00047814

00029088 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
   29088:	e3a03000 	mov	r3, #0
   2908c:	e2800001 	add	r0, r0, #1
   29090:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   29094:	e59f3020 	ldr	r3, [pc, #32]	; 290bc <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
   29098:	e1a01003 	mov	r1, r3
   2909c:	e5932004 	ldr	r2, [r3, #4]
   290a0:	e5913004 	ldr	r3, [r1, #4]
   290a4:	e0433002 	sub	r3, r3, r2
   290a8:	e1500003 	cmp	r0, r3
   290ac:	8afffffb 	bhi	290a0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
   290b0:	e3a03000 	mov	r3, #0
   290b4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   290b8:	e12fff1e 	bx	lr
   290bc:	20003000 	.word	0x20003000

000290c0 <CTimer::CTimer(CInterruptSystem*)>:
   290c0:	e92d4070 	push	{r4, r5, r6, lr}
   290c4:	e3a05000 	mov	r5, #0
   290c8:	e3a06001 	mov	r6, #1
   290cc:	e1a04000 	mov	r4, r0
   290d0:	e5805004 	str	r5, [r0, #4]
   290d4:	e5801000 	str	r1, [r0]
   290d8:	e5805008 	str	r5, [r0, #8]
   290dc:	e5805014 	str	r5, [r0, #20]
   290e0:	e5806010 	str	r6, [r0, #16]
   290e4:	e580500c 	str	r5, [r0, #12]
   290e8:	e2800018 	add	r0, r0, #24
   290ec:	eb000ddd 	bl	2c868 <CPtrList::CPtrList()>
   290f0:	e3a020c8 	mov	r2, #200	; 0xc8
   290f4:	e59f3038 	ldr	r3, [pc, #56]	; 29134 <CTimer::CTimer(CInterruptSystem*)+0x74>
   290f8:	e59f1038 	ldr	r1, [pc, #56]	; 29138 <CTimer::CTimer(CInterruptSystem*)+0x78>
   290fc:	e5930000 	ldr	r0, [r3]
   29100:	e584601c 	str	r6, [r4, #28]
   29104:	e1500005 	cmp	r0, r5
   29108:	e5845038 	str	r5, [r4, #56]	; 0x38
   2910c:	e5841020 	str	r1, [r4, #32]
   29110:	e5842024 	str	r2, [r4, #36]	; 0x24
   29114:	1a000002 	bne	29124 <CTimer::CTimer(CInterruptSystem*)+0x64>
   29118:	e1a00004 	mov	r0, r4
   2911c:	e5834000 	str	r4, [r3]
   29120:	e8bd8070 	pop	{r4, r5, r6, pc}
   29124:	e3a02041 	mov	r2, #65	; 0x41
   29128:	e59f100c 	ldr	r1, [pc, #12]	; 2913c <CTimer::CTimer(CInterruptSystem*)+0x7c>
   2912c:	e59f000c 	ldr	r0, [pc, #12]	; 29140 <CTimer::CTimer(CInterruptSystem*)+0x80>
   29130:	ebffed53 	bl	24684 <assertion_failed>
   29134:	0004dab8 	.word	0x0004dab8
   29138:	00030d40 	.word	0x00030d40
   2913c:	00045000 	.word	0x00045000
   29140:	0004323c 	.word	0x0004323c

00029144 <CTimer::~CTimer()>:
   29144:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   29148:	e1a06000 	mov	r6, r0
   2914c:	e5900000 	ldr	r0, [r0]
   29150:	e24dd00c 	sub	sp, sp, #12
   29154:	e3500000 	cmp	r0, #0
   29158:	0a000028 	beq	29200 <CTimer::~CTimer()+0xbc>
   2915c:	e3a01003 	mov	r1, #3
   29160:	e2865018 	add	r5, r6, #24
   29164:	eb000bac 	bl	2c01c <CInterruptSystem::DisconnectIRQ(unsigned int)>
   29168:	e1a00005 	mov	r0, r5
   2916c:	eb000dca 	bl	2c89c <CPtrList::GetFirst()>
   29170:	e2501000 	subs	r1, r0, #0
   29174:	e59f7094 	ldr	r7, [pc, #148]	; 29210 <CTimer::~CTimer()+0xcc>
   29178:	0a000011 	beq	291c4 <CTimer::~CTimer()+0x80>
   2917c:	e1a00005 	mov	r0, r5
   29180:	e58d1004 	str	r1, [sp, #4]
   29184:	eb000ddb 	bl	2c8f8 <CPtrList::GetPtr(TPtrListElement*)>
   29188:	e2504000 	subs	r4, r0, #0
   2918c:	e59d1004 	ldr	r1, [sp, #4]
   29190:	0a000012 	beq	291e0 <CTimer::~CTimer()+0x9c>
   29194:	e5943000 	ldr	r3, [r4]
   29198:	e1530007 	cmp	r3, r7
   2919c:	1a000013 	bne	291f0 <CTimer::~CTimer()+0xac>
   291a0:	e1a00005 	mov	r0, r5
   291a4:	eb000e5b 	bl	2cb18 <CPtrList::Remove(TPtrListElement*)>
   291a8:	e3a01014 	mov	r1, #20
   291ac:	e1a00004 	mov	r0, r4
   291b0:	eb000748 	bl	2aed8 <operator delete(void*, unsigned int)>
   291b4:	e1a00005 	mov	r0, r5
   291b8:	eb000db7 	bl	2c89c <CPtrList::GetFirst()>
   291bc:	e2501000 	subs	r1, r0, #0
   291c0:	1affffed 	bne	2917c <CTimer::~CTimer()+0x38>
   291c4:	e59f3048 	ldr	r3, [pc, #72]	; 29214 <CTimer::~CTimer()+0xd0>
   291c8:	e1a00005 	mov	r0, r5
   291cc:	e5831000 	str	r1, [r3]
   291d0:	eb000da7 	bl	2c874 <CPtrList::~CPtrList()>
   291d4:	e1a00006 	mov	r0, r6
   291d8:	e28dd00c 	add	sp, sp, #12
   291dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   291e0:	e3a02058 	mov	r2, #88	; 0x58
   291e4:	e59f102c 	ldr	r1, [pc, #44]	; 29218 <CTimer::~CTimer()+0xd4>
   291e8:	e59f002c 	ldr	r0, [pc, #44]	; 2921c <CTimer::~CTimer()+0xd8>
   291ec:	ebffed24 	bl	24684 <assertion_failed>
   291f0:	e3a02059 	mov	r2, #89	; 0x59
   291f4:	e59f101c 	ldr	r1, [pc, #28]	; 29218 <CTimer::~CTimer()+0xd4>
   291f8:	e59f0020 	ldr	r0, [pc, #32]	; 29220 <CTimer::~CTimer()+0xdc>
   291fc:	ebffed20 	bl	24684 <assertion_failed>
   29200:	e3a02047 	mov	r2, #71	; 0x47
   29204:	e59f100c 	ldr	r1, [pc, #12]	; 29218 <CTimer::~CTimer()+0xd4>
   29208:	e59f0014 	ldr	r0, [pc, #20]	; 29224 <CTimer::~CTimer()+0xe0>
   2920c:	ebffed1c 	bl	24684 <assertion_failed>
   29210:	4b544d43 	.word	0x4b544d43
   29214:	0004dab8 	.word	0x0004dab8
   29218:	00045000 	.word	0x00045000
   2921c:	00040cac 	.word	0x00040cac
   29220:	0004500c 	.word	0x0004500c
   29224:	0003ea70 	.word	0x0003ea70

00029228 <CTimer::SetTimeZone(int)>:
   29228:	e59f2018 	ldr	r2, [pc, #24]	; 29248 <CTimer::SetTimeZone(int)+0x20>
   2922c:	e2813e59 	add	r3, r1, #1424	; 0x590
   29230:	e283300f 	add	r3, r3, #15
   29234:	e1530002 	cmp	r3, r2
   29238:	95801014 	strls	r1, [r0, #20]
   2923c:	93a00001 	movls	r0, #1
   29240:	83a00000 	movhi	r0, #0
   29244:	e12fff1e 	bx	lr
   29248:	00000b3e 	.word	0x00000b3e

0002924c <CTimer::GetTimeZone() const>:
   2924c:	e5900014 	ldr	r0, [r0, #20]
   29250:	e12fff1e 	bx	lr

00029254 <CTimer::SetTime(unsigned int, bool)>:
   29254:	e3520000 	cmp	r2, #0
   29258:	e92d4070 	push	{r4, r5, r6, lr}
   2925c:	e1a04000 	mov	r4, r0
   29260:	e1a05001 	mov	r5, r1
   29264:	1a000004 	bne	2927c <CTimer::SetTime(unsigned int, bool)+0x28>
   29268:	e5903014 	ldr	r3, [r0, #20]
   2926c:	e0633203 	rsb	r3, r3, r3, lsl #4
   29270:	e1b03103 	lsls	r3, r3, #2
   29274:	4a000006 	bmi	29294 <CTimer::SetTime(unsigned int, bool)+0x40>
   29278:	e0855003 	add	r5, r5, r3
   2927c:	e5940010 	ldr	r0, [r4, #16]
   29280:	e3500000 	cmp	r0, #0
   29284:	1a000007 	bne	292a8 <CTimer::SetTime(unsigned int, bool)+0x54>
   29288:	e3a00001 	mov	r0, #1
   2928c:	e584500c 	str	r5, [r4, #12]
   29290:	e8bd8070 	pop	{r4, r5, r6, pc}
   29294:	e2631000 	rsb	r1, r3, #0
   29298:	e1510005 	cmp	r1, r5
   2929c:	dafffff5 	ble	29278 <CTimer::SetTime(unsigned int, bool)+0x24>
   292a0:	e1a00002 	mov	r0, r2
   292a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   292a8:	eb000a29 	bl	2bb54 <EnterCritical>
   292ac:	e5943010 	ldr	r3, [r4, #16]
   292b0:	e584500c 	str	r5, [r4, #12]
   292b4:	e3530000 	cmp	r3, #0
   292b8:	0a000002 	beq	292c8 <CTimer::SetTime(unsigned int, bool)+0x74>
   292bc:	eb000a4e 	bl	2bbfc <LeaveCritical>
   292c0:	e3a00001 	mov	r0, #1
   292c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   292c8:	e3a00001 	mov	r0, #1
   292cc:	e8bd8070 	pop	{r4, r5, r6, pc}

000292d0 <CTimer::GetClockTicks()>:
   292d0:	e3a03000 	mov	r3, #0
   292d4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   292d8:	e59f2008 	ldr	r2, [pc, #8]	; 292e8 <CTimer::GetClockTicks()+0x18>
   292dc:	e5920004 	ldr	r0, [r2, #4]
   292e0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   292e4:	e12fff1e 	bx	lr
   292e8:	20003000 	.word	0x20003000

000292ec <CTimer::GetTicks() const>:
   292ec:	e5900004 	ldr	r0, [r0, #4]
   292f0:	e12fff1e 	bx	lr

000292f4 <CTimer::GetUptime() const>:
   292f4:	e5900008 	ldr	r0, [r0, #8]
   292f8:	e12fff1e 	bx	lr

000292fc <CTimer::GetTime() const>:
   292fc:	e590000c 	ldr	r0, [r0, #12]
   29300:	e12fff1e 	bx	lr

00029304 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   29304:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29308:	e1a04000 	mov	r4, r0
   2930c:	e5900010 	ldr	r0, [r0, #16]
   29310:	e1a06001 	mov	r6, r1
   29314:	e3500000 	cmp	r0, #0
   29318:	e1a05002 	mov	r5, r2
   2931c:	1a000013 	bne	29370 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x6c>
   29320:	e594700c 	ldr	r7, [r4, #12]
   29324:	e5944004 	ldr	r4, [r4, #4]
   29328:	e3560000 	cmp	r6, #0
   2932c:	0a000018 	beq	29394 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x90>
   29330:	e3550000 	cmp	r5, #0
   29334:	e5867000 	str	r7, [r6]
   29338:	0a000019 	beq	293a4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
   2933c:	e59f3070 	ldr	r3, [pc, #112]	; 293b4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   29340:	e3a00001 	mov	r0, #1
   29344:	e0832493 	umull	r2, r3, r3, r4
   29348:	e1a032a3 	lsr	r3, r3, #5
   2934c:	e0833103 	add	r3, r3, r3, lsl #2
   29350:	e0833103 	add	r3, r3, r3, lsl #2
   29354:	e0443103 	sub	r3, r4, r3, lsl #2
   29358:	e0632283 	rsb	r2, r3, r3, lsl #5
   2935c:	e0833102 	add	r3, r3, r2, lsl #2
   29360:	e0833103 	add	r3, r3, r3, lsl #2
   29364:	e1a03203 	lsl	r3, r3, #4
   29368:	e5853000 	str	r3, [r5]
   2936c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29370:	eb0009f7 	bl	2bb54 <EnterCritical>
   29374:	e5943010 	ldr	r3, [r4, #16]
   29378:	e594700c 	ldr	r7, [r4, #12]
   2937c:	e3530000 	cmp	r3, #0
   29380:	e5944004 	ldr	r4, [r4, #4]
   29384:	0affffe7 	beq	29328 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   29388:	eb000a1b 	bl	2bbfc <LeaveCritical>
   2938c:	e3560000 	cmp	r6, #0
   29390:	1affffe6 	bne	29330 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   29394:	e3a02f41 	mov	r2, #260	; 0x104
   29398:	e59f1018 	ldr	r1, [pc, #24]	; 293b8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   2939c:	e59f0018 	ldr	r0, [pc, #24]	; 293bc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   293a0:	ebffecb7 	bl	24684 <assertion_failed>
   293a4:	e59f2014 	ldr	r2, [pc, #20]	; 293c0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   293a8:	e59f1008 	ldr	r1, [pc, #8]	; 293b8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   293ac:	e59f0010 	ldr	r0, [pc, #16]	; 293c4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xc0>
   293b0:	ebffecb3 	bl	24684 <assertion_failed>
   293b4:	51eb851f 	.word	0x51eb851f
   293b8:	00045000 	.word	0x00045000
   293bc:	00045034 	.word	0x00045034
   293c0:	00000107 	.word	0x00000107
   293c4:	00045044 	.word	0x00045044

000293c8 <CTimer::GetUniversalTime() const>:
   293c8:	e5903014 	ldr	r3, [r0, #20]
   293cc:	e590000c 	ldr	r0, [r0, #12]
   293d0:	e0633203 	rsb	r3, r3, r3, lsl #4
   293d4:	e1500103 	cmp	r0, r3, lsl #2
   293d8:	e1a03103 	lsl	r3, r3, #2
   293dc:	a0400003 	subge	r0, r0, r3
   293e0:	b3a00000 	movlt	r0, #0
   293e4:	e12fff1e 	bx	lr

000293e8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   293e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   293ec:	e1a05000 	mov	r5, r0
   293f0:	e5900010 	ldr	r0, [r0, #16]
   293f4:	e1a06001 	mov	r6, r1
   293f8:	e3500000 	cmp	r0, #0
   293fc:	e1a04002 	mov	r4, r2
   29400:	1a00001b 	bne	29474 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x8c>
   29404:	e595800c 	ldr	r8, [r5, #12]
   29408:	e5957004 	ldr	r7, [r5, #4]
   2940c:	e5950014 	ldr	r0, [r5, #20]
   29410:	e0600200 	rsb	r0, r0, r0, lsl #4
   29414:	e1580100 	cmp	r8, r0, lsl #2
   29418:	e1a00100 	lsl	r0, r0, #2
   2941c:	ba000012 	blt	2946c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   29420:	e3560000 	cmp	r6, #0
   29424:	0a00001a 	beq	29494 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xac>
   29428:	e0480000 	sub	r0, r8, r0
   2942c:	e3540000 	cmp	r4, #0
   29430:	e5860000 	str	r0, [r6]
   29434:	0a00001a 	beq	294a4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xbc>
   29438:	e59f3074 	ldr	r3, [pc, #116]	; 294b4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   2943c:	e3a00001 	mov	r0, #1
   29440:	e0832793 	umull	r2, r3, r3, r7
   29444:	e1a032a3 	lsr	r3, r3, #5
   29448:	e0833103 	add	r3, r3, r3, lsl #2
   2944c:	e0833103 	add	r3, r3, r3, lsl #2
   29450:	e0473103 	sub	r3, r7, r3, lsl #2
   29454:	e0632283 	rsb	r2, r3, r3, lsl #5
   29458:	e0833102 	add	r3, r3, r2, lsl #2
   2945c:	e0833103 	add	r3, r3, r3, lsl #2
   29460:	e1a03203 	lsl	r3, r3, #4
   29464:	e5843000 	str	r3, [r4]
   29468:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2946c:	e3a00000 	mov	r0, #0
   29470:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29474:	eb0009b6 	bl	2bb54 <EnterCritical>
   29478:	e5953010 	ldr	r3, [r5, #16]
   2947c:	e595800c 	ldr	r8, [r5, #12]
   29480:	e3530000 	cmp	r3, #0
   29484:	e5957004 	ldr	r7, [r5, #4]
   29488:	0affffdf 	beq	2940c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   2948c:	eb0009da 	bl	2bbfc <LeaveCritical>
   29490:	eaffffdd 	b	2940c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   29494:	e59f201c 	ldr	r2, [pc, #28]	; 294b8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   29498:	e59f101c 	ldr	r1, [pc, #28]	; 294bc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   2949c:	e59f001c 	ldr	r0, [pc, #28]	; 294c0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   294a0:	ebffec77 	bl	24684 <assertion_failed>
   294a4:	e3a02f4b 	mov	r2, #300	; 0x12c
   294a8:	e59f100c 	ldr	r1, [pc, #12]	; 294bc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   294ac:	e59f0010 	ldr	r0, [pc, #16]	; 294c4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
   294b0:	ebffec73 	bl	24684 <assertion_failed>
   294b4:	51eb851f 	.word	0x51eb851f
   294b8:	00000129 	.word	0x00000129
   294bc:	00045000 	.word	0x00045000
   294c0:	00045034 	.word	0x00045034
   294c4:	00045044 	.word	0x00045044

000294c8 <CTimer::GetTimeString()>:
   294c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   294cc:	e1a04000 	mov	r4, r0
   294d0:	e5900010 	ldr	r0, [r0, #16]
   294d4:	e24dd014 	sub	sp, sp, #20
   294d8:	e3500000 	cmp	r0, #0
   294dc:	1a00005e 	bne	2965c <CTimer::GetTimeString()+0x194>
   294e0:	e594b00c 	ldr	fp, [r4, #12]
   294e4:	e594a004 	ldr	sl, [r4, #4]
   294e8:	e19b000a 	orrs	r0, fp, sl
   294ec:	01a0a000 	moveq	sl, r0
   294f0:	0a00004d 	beq	2962c <CTimer::GetTimeString()+0x164>
   294f4:	e59f7180 	ldr	r7, [pc, #384]	; 2967c <CTimer::GetTimeString()+0x1b4>
   294f8:	e59f4180 	ldr	r4, [pc, #384]	; 29680 <CTimer::GetTimeString()+0x1b8>
   294fc:	e0883b97 	umull	r3, r8, r7, fp
   29500:	e1a082a8 	lsr	r8, r8, #5
   29504:	e1a02008 	mov	r2, r8
   29508:	e0873897 	umull	r3, r7, r7, r8
   2950c:	e1a072a7 	lsr	r7, r7, #5
   29510:	e0843794 	umull	r3, r4, r4, r7
   29514:	e1a09007 	mov	r9, r7
   29518:	e0688208 	rsb	r8, r8, r8, lsl #4
   2951c:	e0677207 	rsb	r7, r7, r7, lsl #4
   29520:	e59f615c 	ldr	r6, [pc, #348]	; 29684 <CTimer::GetTimeString()+0x1bc>
   29524:	e59f515c 	ldr	r5, [pc, #348]	; 29688 <CTimer::GetTimeString()+0x1c0>
   29528:	e59fe15c 	ldr	lr, [pc, #348]	; 2968c <CTimer::GetTimeString()+0x1c4>
   2952c:	e59fc15c 	ldr	ip, [pc, #348]	; 29690 <CTimer::GetTimeString()+0x1c8>
   29530:	e04b8108 	sub	r8, fp, r8, lsl #2
   29534:	e0427107 	sub	r7, r2, r7, lsl #2
   29538:	e1a04224 	lsr	r4, r4, #4
   2953c:	ea000008 	b	29564 <CTimer::GetTimeString()+0x9c>
   29540:	e3160003 	tst	r6, #3
   29544:	03a00001 	moveq	r0, #1
   29548:	13a00000 	movne	r0, #0
   2954c:	e2801f5b 	add	r1, r0, #364	; 0x16c
   29550:	e2811001 	add	r1, r1, #1
   29554:	e1540001 	cmp	r4, r1
   29558:	3a00000b 	bcc	2958c <CTimer::GetTimeString()+0xc4>
   2955c:	e0444001 	sub	r4, r4, r1
   29560:	e2866001 	add	r6, r6, #1
   29564:	e0030695 	mul	r3, r5, r6
   29568:	e15e0163 	cmp	lr, r3, ror #2
   2956c:	3afffff3 	bcc	29540 <CTimer::GetTimeString()+0x78>
   29570:	e15c0263 	cmp	ip, r3, ror #4
   29574:	23a00001 	movcs	r0, #1
   29578:	33a00000 	movcc	r0, #0
   2957c:	e2801f5b 	add	r1, r0, #364	; 0x16c
   29580:	e2811001 	add	r1, r1, #1
   29584:	e1540001 	cmp	r4, r1
   29588:	2afffff3 	bcs	2955c <CTimer::GetTimeString()+0x94>
   2958c:	e3a05000 	mov	r5, #0
   29590:	e59f20fc 	ldr	r2, [pc, #252]	; 29694 <CTimer::GetTimeString()+0x1cc>
   29594:	ea000001 	b	295a0 <CTimer::GetTimeString()+0xd8>
   29598:	e0444001 	sub	r4, r4, r1
   2959c:	e2855001 	add	r5, r5, #1
   295a0:	e3550001 	cmp	r5, #1
   295a4:	13a03000 	movne	r3, #0
   295a8:	02003001 	andeq	r3, r0, #1
   295ac:	e3530000 	cmp	r3, #0
   295b0:	13a0101d 	movne	r1, #29
   295b4:	07921105 	ldreq	r1, [r2, r5, lsl #2]
   295b8:	e1540001 	cmp	r4, r1
   295bc:	2afffff5 	bcs	29598 <CTimer::GetTimeString()+0xd0>
   295c0:	e3a00010 	mov	r0, #16
   295c4:	eb000635 	bl	2aea0 <operator new(unsigned int)>
   295c8:	e59fb0c8 	ldr	fp, [pc, #200]	; 29698 <CTimer::GetTimeString()+0x1d0>
   295cc:	e08b3a9b 	umull	r3, fp, fp, sl
   295d0:	e1a0b2ab 	lsr	fp, fp, #5
   295d4:	e08bb10b 	add	fp, fp, fp, lsl #2
   295d8:	e08bb10b 	add	fp, fp, fp, lsl #2
   295dc:	e04ab10b 	sub	fp, sl, fp, lsl #2
   295e0:	e1a0a000 	mov	sl, r0
   295e4:	ebfff8fe 	bl	279e4 <CString::CString()>
   295e8:	e59f30ac 	ldr	r3, [pc, #172]	; 2969c <CTimer::GetTimeString()+0x1d4>
   295ec:	e1560003 	cmp	r6, r3
   295f0:	9a000010 	bls	29638 <CTimer::GetTimeString()+0x170>
   295f4:	e59f3084 	ldr	r3, [pc, #132]	; 29680 <CTimer::GetTimeString()+0x1b8>
   295f8:	e98d0180 	stmib	sp, {r7, r8}
   295fc:	e0832993 	umull	r2, r3, r3, r9
   29600:	e1a03223 	lsr	r3, r3, #4
   29604:	e0833083 	add	r3, r3, r3, lsl #1
   29608:	e0499183 	sub	r9, r9, r3, lsl #3
   2960c:	e59f208c 	ldr	r2, [pc, #140]	; 296a0 <CTimer::GetTimeString()+0x1d8>
   29610:	e58db00c 	str	fp, [sp, #12]
   29614:	e58d9000 	str	r9, [sp]
   29618:	e1a0000a 	mov	r0, sl
   2961c:	e7922105 	ldr	r2, [r2, r5, lsl #2]
   29620:	e59f107c 	ldr	r1, [pc, #124]	; 296a4 <CTimer::GetTimeString()+0x1dc>
   29624:	e2843001 	add	r3, r4, #1
   29628:	ebfffe37 	bl	28f0c <CString::Format(char const*, ...)>
   2962c:	e1a0000a 	mov	r0, sl
   29630:	e28dd014 	add	sp, sp, #20
   29634:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29638:	e1a0000a 	mov	r0, sl
   2963c:	e1a03007 	mov	r3, r7
   29640:	e1a02009 	mov	r2, r9
   29644:	e88d0900 	stm	sp, {r8, fp}
   29648:	e59f1058 	ldr	r1, [pc, #88]	; 296a8 <CTimer::GetTimeString()+0x1e0>
   2964c:	ebfffe2e 	bl	28f0c <CString::Format(char const*, ...)>
   29650:	e1a0000a 	mov	r0, sl
   29654:	e28dd014 	add	sp, sp, #20
   29658:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2965c:	eb00093c 	bl	2bb54 <EnterCritical>
   29660:	e5943010 	ldr	r3, [r4, #16]
   29664:	e594b00c 	ldr	fp, [r4, #12]
   29668:	e3530000 	cmp	r3, #0
   2966c:	e594a004 	ldr	sl, [r4, #4]
   29670:	0affff9c 	beq	294e8 <CTimer::GetTimeString()+0x20>
   29674:	eb000960 	bl	2bbfc <LeaveCritical>
   29678:	eaffff9a 	b	294e8 <CTimer::GetTimeString()+0x20>
   2967c:	88888889 	.word	0x88888889
   29680:	aaaaaaab 	.word	0xaaaaaaab
   29684:	000007b2 	.word	0x000007b2
   29688:	c28f5c29 	.word	0xc28f5c29
   2968c:	028f5c28 	.word	0x028f5c28
   29690:	00a3d70a 	.word	0x00a3d70a
   29694:	0004513c 	.word	0x0004513c
   29698:	51eb851f 	.word	0x51eb851f
   2969c:	000007b7 	.word	0x000007b7
   296a0:	00047b9c 	.word	0x00047b9c
   296a4:	00045058 	.word	0x00045058
   296a8:	00045074 	.word	0x00045074

000296ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   296ac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   296b0:	e1a07000 	mov	r7, r0
   296b4:	e1a04002 	mov	r4, r2
   296b8:	e1a06001 	mov	r6, r1
   296bc:	e3a00014 	mov	r0, #20
   296c0:	e1a08003 	mov	r8, r3
   296c4:	eb0005f5 	bl	2aea0 <operator new(unsigned int)>
   296c8:	e5971004 	ldr	r1, [r7, #4]
   296cc:	e3540000 	cmp	r4, #0
   296d0:	e0816006 	add	r6, r1, r6
   296d4:	0a000034 	beq	297ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x100>
   296d8:	e1a05000 	mov	r5, r0
   296dc:	e597001c 	ldr	r0, [r7, #28]
   296e0:	e59f30f0 	ldr	r3, [pc, #240]	; 297d8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   296e4:	e59d2020 	ldr	r2, [sp, #32]
   296e8:	e3500000 	cmp	r0, #0
   296ec:	e5854004 	str	r4, [r5, #4]
   296f0:	e5856008 	str	r6, [r5, #8]
   296f4:	e585800c 	str	r8, [r5, #12]
   296f8:	e5852010 	str	r2, [r5, #16]
   296fc:	e5853000 	str	r3, [r5]
   29700:	1a000020 	bne	29788 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
   29704:	e2874018 	add	r4, r7, #24
   29708:	e1a00004 	mov	r0, r4
   2970c:	eb000c62 	bl	2c89c <CPtrList::GetFirst()>
   29710:	e2509000 	subs	r9, r0, #0
   29714:	0a00002a 	beq	297c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   29718:	e59f80b8 	ldr	r8, [pc, #184]	; 297d8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   2971c:	e1a01009 	mov	r1, r9
   29720:	e1a00004 	mov	r0, r4
   29724:	eb000c73 	bl	2c8f8 <CPtrList::GetPtr(TPtrListElement*)>
   29728:	e2503000 	subs	r3, r0, #0
   2972c:	0a00000d 	beq	29768 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xbc>
   29730:	e5932000 	ldr	r2, [r3]
   29734:	e1520008 	cmp	r2, r8
   29738:	1a00000e 	bne	29778 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xcc>
   2973c:	e5933008 	ldr	r3, [r3, #8]
   29740:	e1a01009 	mov	r1, r9
   29744:	e0433006 	sub	r3, r3, r6
   29748:	e3530000 	cmp	r3, #0
   2974c:	e1a00004 	mov	r0, r4
   29750:	ca00000e 	bgt	29790 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe4>
   29754:	eb000c52 	bl	2c8a4 <CPtrList::GetNext(TPtrListElement*)>
   29758:	e3500000 	cmp	r0, #0
   2975c:	0a000018 	beq	297c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   29760:	e1a09000 	mov	r9, r0
   29764:	eaffffec 	b	2971c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x70>
   29768:	e59f206c 	ldr	r2, [pc, #108]	; 297dc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
   2976c:	e59f106c 	ldr	r1, [pc, #108]	; 297e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   29770:	e59f006c 	ldr	r0, [pc, #108]	; 297e4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
   29774:	ebffebc2 	bl	24684 <assertion_failed>
   29778:	e3a02f65 	mov	r2, #404	; 0x194
   2977c:	e59f105c 	ldr	r1, [pc, #92]	; 297e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   29780:	e59f0060 	ldr	r0, [pc, #96]	; 297e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
   29784:	ebffebbe 	bl	24684 <assertion_failed>
   29788:	eb0008f1 	bl	2bb54 <EnterCritical>
   2978c:	eaffffdc 	b	29704 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
   29790:	e1a02005 	mov	r2, r5
   29794:	eb000c6c 	bl	2c94c <CPtrList::InsertBefore(TPtrListElement*, void*)>
   29798:	e597301c 	ldr	r3, [r7, #28]
   2979c:	e3530000 	cmp	r3, #0
   297a0:	1a000005 	bne	297bc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x110>
   297a4:	e1a00005 	mov	r0, r5
   297a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   297ac:	e59f2038 	ldr	r2, [pc, #56]	; 297ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
   297b0:	e59f1028 	ldr	r1, [pc, #40]	; 297e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   297b4:	e59f0034 	ldr	r0, [pc, #52]	; 297f0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
   297b8:	ebffebb1 	bl	24684 <assertion_failed>
   297bc:	eb00090e 	bl	2bbfc <LeaveCritical>
   297c0:	eafffff7 	b	297a4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
   297c4:	e1a01009 	mov	r1, r9
   297c8:	e1a00004 	mov	r0, r4
   297cc:	e1a02005 	mov	r2, r5
   297d0:	eb000c97 	bl	2ca34 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   297d4:	eaffffef 	b	29798 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xec>
   297d8:	4b544d43 	.word	0x4b544d43
   297dc:	00000193 	.word	0x00000193
   297e0:	00045000 	.word	0x00045000
   297e4:	00045088 	.word	0x00045088
   297e8:	00045098 	.word	0x00045098
   297ec:	00000183 	.word	0x00000183
   297f0:	0004552c 	.word	0x0004552c

000297f4 <CTimer::CancelKernelTimer(unsigned int)>:
   297f4:	e92d4070 	push	{r4, r5, r6, lr}
   297f8:	e2514000 	subs	r4, r1, #0
   297fc:	0a000019 	beq	29868 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   29800:	e1a05000 	mov	r5, r0
   29804:	e590001c 	ldr	r0, [r0, #28]
   29808:	e3500000 	cmp	r0, #0
   2980c:	1a000013 	bne	29860 <CTimer::CancelKernelTimer(unsigned int)+0x6c>
   29810:	e2856018 	add	r6, r5, #24
   29814:	e1a01004 	mov	r1, r4
   29818:	e1a00006 	mov	r0, r6
   2981c:	eb000d01 	bl	2cc28 <CPtrList::Find(void*)>
   29820:	e2501000 	subs	r1, r0, #0
   29824:	0a000008 	beq	2984c <CTimer::CancelKernelTimer(unsigned int)+0x58>
   29828:	e59f3058 	ldr	r3, [pc, #88]	; 29888 <CTimer::CancelKernelTimer(unsigned int)+0x94>
   2982c:	e5942000 	ldr	r2, [r4]
   29830:	e1520003 	cmp	r2, r3
   29834:	1a00000f 	bne	29878 <CTimer::CancelKernelTimer(unsigned int)+0x84>
   29838:	e1a00006 	mov	r0, r6
   2983c:	eb000cb5 	bl	2cb18 <CPtrList::Remove(TPtrListElement*)>
   29840:	e1a00004 	mov	r0, r4
   29844:	e3a01014 	mov	r1, #20
   29848:	eb0005a2 	bl	2aed8 <operator delete(void*, unsigned int)>
   2984c:	e595301c 	ldr	r3, [r5, #28]
   29850:	e3530000 	cmp	r3, #0
   29854:	08bd8070 	popeq	{r4, r5, r6, pc}
   29858:	e8bd4070 	pop	{r4, r5, r6, lr}
   2985c:	ea0008e6 	b	2bbfc <LeaveCritical>
   29860:	eb0008bb 	bl	2bb54 <EnterCritical>
   29864:	eaffffe9 	b	29810 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   29868:	e3a02e1b 	mov	r2, #432	; 0x1b0
   2986c:	e59f1018 	ldr	r1, [pc, #24]	; 2988c <CTimer::CancelKernelTimer(unsigned int)+0x98>
   29870:	e59f0018 	ldr	r0, [pc, #24]	; 29890 <CTimer::CancelKernelTimer(unsigned int)+0x9c>
   29874:	ebffeb82 	bl	24684 <assertion_failed>
   29878:	e59f2014 	ldr	r2, [pc, #20]	; 29894 <CTimer::CancelKernelTimer(unsigned int)+0xa0>
   2987c:	e59f1008 	ldr	r1, [pc, #8]	; 2988c <CTimer::CancelKernelTimer(unsigned int)+0x98>
   29880:	e59f0010 	ldr	r0, [pc, #16]	; 29898 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   29884:	ebffeb7e 	bl	24684 <assertion_failed>
   29888:	4b544d43 	.word	0x4b544d43
   2988c:	00045000 	.word	0x00045000
   29890:	00040cac 	.word	0x00040cac
   29894:	000001b7 	.word	0x000001b7
   29898:	0004500c 	.word	0x0004500c

0002989c <CTimer::PollKernelTimers()>:
   2989c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   298a0:	e1a05000 	mov	r5, r0
   298a4:	e590001c 	ldr	r0, [r0, #28]
   298a8:	e24dd008 	sub	sp, sp, #8
   298ac:	e3500000 	cmp	r0, #0
   298b0:	1a000038 	bne	29998 <CTimer::PollKernelTimers()+0xfc>
   298b4:	e2857018 	add	r7, r5, #24
   298b8:	e1a00007 	mov	r0, r7
   298bc:	eb000bf6 	bl	2c89c <CPtrList::GetFirst()>
   298c0:	e2501000 	subs	r1, r0, #0
   298c4:	0a00003d 	beq	299c0 <CTimer::PollKernelTimers()+0x124>
   298c8:	e59f8110 	ldr	r8, [pc, #272]	; 299e0 <CTimer::PollKernelTimers()+0x144>
   298cc:	e1a00007 	mov	r0, r7
   298d0:	e58d1004 	str	r1, [sp, #4]
   298d4:	eb000c07 	bl	2c8f8 <CPtrList::GetPtr(TPtrListElement*)>
   298d8:	e2504000 	subs	r4, r0, #0
   298dc:	e59d1004 	ldr	r1, [sp, #4]
   298e0:	0a00002e 	beq	299a0 <CTimer::PollKernelTimers()+0x104>
   298e4:	e5943000 	ldr	r3, [r4]
   298e8:	e1530008 	cmp	r3, r8
   298ec:	1a00002f 	bne	299b0 <CTimer::PollKernelTimers()+0x114>
   298f0:	e5952004 	ldr	r2, [r5, #4]
   298f4:	e5943008 	ldr	r3, [r4, #8]
   298f8:	e0433002 	sub	r3, r3, r2
   298fc:	e3530000 	cmp	r3, #0
   29900:	ca00002e 	bgt	299c0 <CTimer::PollKernelTimers()+0x124>
   29904:	e1a00007 	mov	r0, r7
   29908:	e58d1004 	str	r1, [sp, #4]
   2990c:	eb000be4 	bl	2c8a4 <CPtrList::GetNext(TPtrListElement*)>
   29910:	e59d1004 	ldr	r1, [sp, #4]
   29914:	e1a06000 	mov	r6, r0
   29918:	e1a00007 	mov	r0, r7
   2991c:	eb000c7d 	bl	2cb18 <CPtrList::Remove(TPtrListElement*)>
   29920:	e595301c 	ldr	r3, [r5, #28]
   29924:	e3530000 	cmp	r3, #0
   29928:	1a000010 	bne	29970 <CTimer::PollKernelTimers()+0xd4>
   2992c:	e5943004 	ldr	r3, [r4, #4]
   29930:	e3530000 	cmp	r3, #0
   29934:	0a000011 	beq	29980 <CTimer::PollKernelTimers()+0xe4>
   29938:	e1a00004 	mov	r0, r4
   2993c:	e5942010 	ldr	r2, [r4, #16]
   29940:	e594100c 	ldr	r1, [r4, #12]
   29944:	e12fff33 	blx	r3
   29948:	e1a00004 	mov	r0, r4
   2994c:	e3a01014 	mov	r1, #20
   29950:	eb000560 	bl	2aed8 <operator delete(void*, unsigned int)>
   29954:	e595001c 	ldr	r0, [r5, #28]
   29958:	e3500000 	cmp	r0, #0
   2995c:	1a00000b 	bne	29990 <CTimer::PollKernelTimers()+0xf4>
   29960:	e3560000 	cmp	r6, #0
   29964:	0a000015 	beq	299c0 <CTimer::PollKernelTimers()+0x124>
   29968:	e1a01006 	mov	r1, r6
   2996c:	eaffffd6 	b	298cc <CTimer::PollKernelTimers()+0x30>
   29970:	eb0008a1 	bl	2bbfc <LeaveCritical>
   29974:	e5943004 	ldr	r3, [r4, #4]
   29978:	e3530000 	cmp	r3, #0
   2997c:	1affffed 	bne	29938 <CTimer::PollKernelTimers()+0x9c>
   29980:	e59f205c 	ldr	r2, [pc, #92]	; 299e4 <CTimer::PollKernelTimers()+0x148>
   29984:	e59f105c 	ldr	r1, [pc, #92]	; 299e8 <CTimer::PollKernelTimers()+0x14c>
   29988:	e59f005c 	ldr	r0, [pc, #92]	; 299ec <CTimer::PollKernelTimers()+0x150>
   2998c:	ebffeb3c 	bl	24684 <assertion_failed>
   29990:	eb00086f 	bl	2bb54 <EnterCritical>
   29994:	eafffff1 	b	29960 <CTimer::PollKernelTimers()+0xc4>
   29998:	eb00086d 	bl	2bb54 <EnterCritical>
   2999c:	eaffffc4 	b	298b4 <CTimer::PollKernelTimers()+0x18>
   299a0:	e3a02f73 	mov	r2, #460	; 0x1cc
   299a4:	e59f103c 	ldr	r1, [pc, #60]	; 299e8 <CTimer::PollKernelTimers()+0x14c>
   299a8:	e59f0040 	ldr	r0, [pc, #64]	; 299f0 <CTimer::PollKernelTimers()+0x154>
   299ac:	ebffeb34 	bl	24684 <assertion_failed>
   299b0:	e59f203c 	ldr	r2, [pc, #60]	; 299f4 <CTimer::PollKernelTimers()+0x158>
   299b4:	e59f102c 	ldr	r1, [pc, #44]	; 299e8 <CTimer::PollKernelTimers()+0x14c>
   299b8:	e59f0038 	ldr	r0, [pc, #56]	; 299f8 <CTimer::PollKernelTimers()+0x15c>
   299bc:	ebffeb30 	bl	24684 <assertion_failed>
   299c0:	e595301c 	ldr	r3, [r5, #28]
   299c4:	e3530000 	cmp	r3, #0
   299c8:	1a000001 	bne	299d4 <CTimer::PollKernelTimers()+0x138>
   299cc:	e28dd008 	add	sp, sp, #8
   299d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   299d4:	e28dd008 	add	sp, sp, #8
   299d8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   299dc:	ea000886 	b	2bbfc <LeaveCritical>
   299e0:	4b544d43 	.word	0x4b544d43
   299e4:	000001db 	.word	0x000001db
   299e8:	00045000 	.word	0x00045000
   299ec:	0004552c 	.word	0x0004552c
   299f0:	00040cac 	.word	0x00040cac
   299f4:	000001cd 	.word	0x000001cd
   299f8:	0004500c 	.word	0x0004500c

000299fc <CTimer::InterruptHandler()>:
   299fc:	e92d4070 	push	{r4, r5, r6, lr}
   29a00:	e3a03000 	mov	r3, #0
   29a04:	e1a04000 	mov	r4, r0
   29a08:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   29a0c:	e59f20f4 	ldr	r2, [pc, #244]	; 29b08 <CTimer::InterruptHandler()+0x10c>
   29a10:	e5923018 	ldr	r3, [r2, #24]
   29a14:	e2833c27 	add	r3, r3, #9984	; 0x2700
   29a18:	e2833010 	add	r3, r3, #16
   29a1c:	e5823018 	str	r3, [r2, #24]
   29a20:	e5921004 	ldr	r1, [r2, #4]
   29a24:	e1530001 	cmp	r3, r1
   29a28:	e3a01008 	mov	r1, #8
   29a2c:	35923004 	ldrcc	r3, [r2, #4]
   29a30:	32833c27 	addcc	r3, r3, #9984	; 0x2700
   29a34:	32833010 	addcc	r3, r3, #16
   29a38:	35823018 	strcc	r3, [r2, #24]
   29a3c:	e59f20c4 	ldr	r2, [pc, #196]	; 29b08 <CTimer::InterruptHandler()+0x10c>
   29a40:	e3a03000 	mov	r3, #0
   29a44:	e5821000 	str	r1, [r2]
   29a48:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   29a4c:	e5900010 	ldr	r0, [r0, #16]
   29a50:	e1500003 	cmp	r0, r3
   29a54:	1a000017 	bne	29ab8 <CTimer::InterruptHandler()+0xbc>
   29a58:	e5942004 	ldr	r2, [r4, #4]
   29a5c:	e59f30a8 	ldr	r3, [pc, #168]	; 29b0c <CTimer::InterruptHandler()+0x110>
   29a60:	e2822001 	add	r2, r2, #1
   29a64:	e0831293 	umull	r1, r3, r3, r2
   29a68:	e1a032a3 	lsr	r3, r3, #5
   29a6c:	e0833103 	add	r3, r3, r3, lsl #2
   29a70:	e0833103 	add	r3, r3, r3, lsl #2
   29a74:	e0523103 	subs	r3, r2, r3, lsl #2
   29a78:	e5842004 	str	r2, [r4, #4]
   29a7c:	0a000017 	beq	29ae0 <CTimer::InterruptHandler()+0xe4>
   29a80:	e1a00004 	mov	r0, r4
   29a84:	ebffff84 	bl	2989c <CTimer::PollKernelTimers()>
   29a88:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   29a8c:	e3530000 	cmp	r3, #0
   29a90:	08bd8070 	popeq	{r4, r5, r6, pc}
   29a94:	e3a05000 	mov	r5, #0
   29a98:	e2846028 	add	r6, r4, #40	; 0x28
   29a9c:	e4963004 	ldr	r3, [r6], #4
   29aa0:	e12fff33 	blx	r3
   29aa4:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   29aa8:	e2855001 	add	r5, r5, #1
   29aac:	e1530005 	cmp	r3, r5
   29ab0:	8afffff9 	bhi	29a9c <CTimer::InterruptHandler()+0xa0>
   29ab4:	e8bd8070 	pop	{r4, r5, r6, pc}
   29ab8:	eb000825 	bl	2bb54 <EnterCritical>
   29abc:	e5943004 	ldr	r3, [r4, #4]
   29ac0:	e59f2048 	ldr	r2, [pc, #72]	; 29b10 <CTimer::InterruptHandler()+0x114>
   29ac4:	e2833001 	add	r3, r3, #1
   29ac8:	e0020392 	mul	r2, r2, r3
   29acc:	e59f1040 	ldr	r1, [pc, #64]	; 29b14 <CTimer::InterruptHandler()+0x118>
   29ad0:	e5843004 	str	r3, [r4, #4]
   29ad4:	e1510162 	cmp	r1, r2, ror #2
   29ad8:	e5943010 	ldr	r3, [r4, #16]
   29adc:	3a000005 	bcc	29af8 <CTimer::InterruptHandler()+0xfc>
   29ae0:	e5942008 	ldr	r2, [r4, #8]
   29ae4:	e2822001 	add	r2, r2, #1
   29ae8:	e5842008 	str	r2, [r4, #8]
   29aec:	e594200c 	ldr	r2, [r4, #12]
   29af0:	e2822001 	add	r2, r2, #1
   29af4:	e584200c 	str	r2, [r4, #12]
   29af8:	e3530000 	cmp	r3, #0
   29afc:	0affffdf 	beq	29a80 <CTimer::InterruptHandler()+0x84>
   29b00:	eb00083d 	bl	2bbfc <LeaveCritical>
   29b04:	eaffffdd 	b	29a80 <CTimer::InterruptHandler()+0x84>
   29b08:	20003000 	.word	0x20003000
   29b0c:	51eb851f 	.word	0x51eb851f
   29b10:	c28f5c29 	.word	0xc28f5c29
   29b14:	028f5c28 	.word	0x028f5c28

00029b18 <CTimer::InterruptHandler(void*)>:
   29b18:	e3500000 	cmp	r0, #0
   29b1c:	0a000000 	beq	29b24 <CTimer::InterruptHandler(void*)+0xc>
   29b20:	eaffffb5 	b	299fc <CTimer::InterruptHandler()>
   29b24:	e92d4010 	push	{r4, lr}
   29b28:	e59f2008 	ldr	r2, [pc, #8]	; 29b38 <CTimer::InterruptHandler(void*)+0x20>
   29b2c:	e59f1008 	ldr	r1, [pc, #8]	; 29b3c <CTimer::InterruptHandler(void*)+0x24>
   29b30:	e59f0008 	ldr	r0, [pc, #8]	; 29b40 <CTimer::InterruptHandler(void*)+0x28>
   29b34:	ebffead2 	bl	24684 <assertion_failed>
   29b38:	00000223 	.word	0x00000223
   29b3c:	00045000 	.word	0x00045000
   29b40:	0003ea38 	.word	0x0003ea38

00029b44 <CTimer::TuneMsDelay()>:
   29b44:	e92d4070 	push	{r4, r5, r6, lr}
   29b48:	e1a05000 	mov	r5, r0
   29b4c:	e5900020 	ldr	r0, [r0, #32]
   29b50:	e24dd008 	sub	sp, sp, #8
   29b54:	e0603280 	rsb	r3, r0, r0, lsl #5
   29b58:	e0800103 	add	r0, r0, r3, lsl #2
   29b5c:	e1a00180 	lsl	r0, r0, #3
   29b60:	e5954004 	ldr	r4, [r5, #4]
   29b64:	eb000a6f 	bl	2c528 <DelayLoop>
   29b68:	e5951004 	ldr	r1, [r5, #4]
   29b6c:	e59f0068 	ldr	r0, [pc, #104]	; 29bdc <CTimer::TuneMsDelay()+0x98>
   29b70:	e0411004 	sub	r1, r1, r4
   29b74:	eb004cb4 	bl	3ce4c <__udivsi3>
   29b78:	e1a06000 	mov	r6, r0
   29b7c:	e5953020 	ldr	r3, [r5, #32]
   29b80:	e59f4058 	ldr	r4, [pc, #88]	; 29be0 <CTimer::TuneMsDelay()+0x9c>
   29b84:	e0030093 	mul	r3, r3, r0
   29b88:	e0832394 	umull	r2, r3, r4, r3
   29b8c:	e59f1050 	ldr	r1, [pc, #80]	; 29be4 <CTimer::TuneMsDelay()+0xa0>
   29b90:	e1a032a3 	lsr	r3, r3, #5
   29b94:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   29b98:	e0821291 	umull	r1, r2, r1, r2
   29b9c:	e1a02322 	lsr	r2, r2, #6
   29ba0:	e5852024 	str	r2, [r5, #36]	; 0x24
   29ba4:	e5853020 	str	r3, [r5, #32]
   29ba8:	ebfff39d 	bl	26a24 <CLogger::Get()>
   29bac:	e0832694 	umull	r2, r3, r4, r6
   29bb0:	e1a032a3 	lsr	r3, r3, #5
   29bb4:	e0832103 	add	r2, r3, r3, lsl #2
   29bb8:	e0822102 	add	r2, r2, r2, lsl #2
   29bbc:	e0466102 	sub	r6, r6, r2, lsl #2
   29bc0:	e88d0048 	stm	sp, {r3, r6}
   29bc4:	e3a02003 	mov	r2, #3
   29bc8:	e59f3018 	ldr	r3, [pc, #24]	; 29be8 <CTimer::TuneMsDelay()+0xa4>
   29bcc:	e59f1018 	ldr	r1, [pc, #24]	; 29bec <CTimer::TuneMsDelay()+0xa8>
   29bd0:	ebfff2d5 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29bd4:	e28dd008 	add	sp, sp, #8
   29bd8:	e8bd8070 	pop	{r4, r5, r6, pc}
   29bdc:	00002710 	.word	0x00002710
   29be0:	51eb851f 	.word	0x51eb851f
   29be4:	10624dd3 	.word	0x10624dd3
   29be8:	000450c0 	.word	0x000450c0
   29bec:	0004516c 	.word	0x0004516c

00029bf0 <CTimer::Initialize()>:
   29bf0:	e92d4070 	push	{r4, r5, r6, lr}
   29bf4:	e1a04000 	mov	r4, r0
   29bf8:	e5900000 	ldr	r0, [r0]
   29bfc:	e3500000 	cmp	r0, #0
   29c00:	0a000011 	beq	29c4c <CTimer::Initialize()+0x5c>
   29c04:	e1a03004 	mov	r3, r4
   29c08:	e3a01003 	mov	r1, #3
   29c0c:	e59f2048 	ldr	r2, [pc, #72]	; 29c5c <CTimer::Initialize()+0x6c>
   29c10:	eb0008cd 	bl	2bf4c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   29c14:	e3a05000 	mov	r5, #0
   29c18:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   29c1c:	e59f203c 	ldr	r2, [pc, #60]	; 29c60 <CTimer::Initialize()+0x70>
   29c20:	e59f303c 	ldr	r3, [pc, #60]	; 29c64 <CTimer::Initialize()+0x74>
   29c24:	e1a00004 	mov	r0, r4
   29c28:	e5823004 	str	r3, [r2, #4]
   29c2c:	e5923004 	ldr	r3, [r2, #4]
   29c30:	e2833c27 	add	r3, r3, #9984	; 0x2700
   29c34:	e2833010 	add	r3, r3, #16
   29c38:	e5823018 	str	r3, [r2, #24]
   29c3c:	ebffffc0 	bl	29b44 <CTimer::TuneMsDelay()>
   29c40:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   29c44:	e3a00001 	mov	r0, #1
   29c48:	e8bd8070 	pop	{r4, r5, r6, pc}
   29c4c:	e3a02065 	mov	r2, #101	; 0x65
   29c50:	e59f1010 	ldr	r1, [pc, #16]	; 29c68 <CTimer::Initialize()+0x78>
   29c54:	e59f0010 	ldr	r0, [pc, #16]	; 29c6c <CTimer::Initialize()+0x7c>
   29c58:	ebffea89 	bl	24684 <assertion_failed>
   29c5c:	00029b18 	.word	0x00029b18
   29c60:	20003000 	.word	0x20003000
   29c64:	fe363c80 	.word	0xfe363c80
   29c68:	00045000 	.word	0x00045000
   29c6c:	0003ea70 	.word	0x0003ea70

00029c70 <CTimer::RegisterPeriodicHandler(void (*)())>:
   29c70:	e3510000 	cmp	r1, #0
   29c74:	e92d4010 	push	{r4, lr}
   29c78:	0a00000b 	beq	29cac <CTimer::RegisterPeriodicHandler(void (*)())+0x3c>
   29c7c:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   29c80:	e3530003 	cmp	r3, #3
   29c84:	8a00000c 	bhi	29cbc <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   29c88:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   29c8c:	e3a02000 	mov	r2, #0
   29c90:	e283300a 	add	r3, r3, #10
   29c94:	e7801103 	str	r1, [r0, r3, lsl #2]
   29c98:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   29c9c:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   29ca0:	e2833001 	add	r3, r3, #1
   29ca4:	e5803038 	str	r3, [r0, #56]	; 0x38
   29ca8:	e8bd8010 	pop	{r4, pc}
   29cac:	e59f2018 	ldr	r2, [pc, #24]	; 29ccc <CTimer::RegisterPeriodicHandler(void (*)())+0x5c>
   29cb0:	e59f1018 	ldr	r1, [pc, #24]	; 29cd0 <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   29cb4:	e59f0018 	ldr	r0, [pc, #24]	; 29cd4 <CTimer::RegisterPeriodicHandler(void (*)())+0x64>
   29cb8:	ebffea71 	bl	24684 <assertion_failed>
   29cbc:	e59f2014 	ldr	r2, [pc, #20]	; 29cd8 <CTimer::RegisterPeriodicHandler(void (*)())+0x68>
   29cc0:	e59f1008 	ldr	r1, [pc, #8]	; 29cd0 <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   29cc4:	e59f0010 	ldr	r0, [pc, #16]	; 29cdc <CTimer::RegisterPeriodicHandler(void (*)())+0x6c>
   29cc8:	ebffea6d 	bl	24684 <assertion_failed>
   29ccc:	00000239 	.word	0x00000239
   29cd0:	00045000 	.word	0x00045000
   29cd4:	0004552c 	.word	0x0004552c
   29cd8:	0000023b 	.word	0x0000023b
   29cdc:	000450d8 	.word	0x000450d8

00029ce0 <CTimer::SimpleMsDelay(unsigned int)>:
   29ce0:	e3500000 	cmp	r0, #0
   29ce4:	012fff1e 	bxeq	lr
   29ce8:	e0603280 	rsb	r3, r0, r0, lsl #5
   29cec:	e0800103 	add	r0, r0, r3, lsl #2
   29cf0:	e1b00180 	lsls	r0, r0, #3
   29cf4:	012fff1e 	bxeq	lr
   29cf8:	eafffce2 	b	29088 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

00029cfc <CTimer::SimpleusDelay(unsigned int)>:
   29cfc:	e3500000 	cmp	r0, #0
   29d00:	012fff1e 	bxeq	lr
   29d04:	eafffcdf 	b	29088 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

00029d08 <CTimer::IsLeapYear(unsigned int)>:
   29d08:	e59f3030 	ldr	r3, [pc, #48]	; 29d40 <CTimer::IsLeapYear(unsigned int)+0x38>
   29d0c:	e59f2030 	ldr	r2, [pc, #48]	; 29d44 <CTimer::IsLeapYear(unsigned int)+0x3c>
   29d10:	e0030093 	mul	r3, r3, r0
   29d14:	e1520163 	cmp	r2, r3, ror #2
   29d18:	2a000003 	bcs	29d2c <CTimer::IsLeapYear(unsigned int)+0x24>
   29d1c:	e3100003 	tst	r0, #3
   29d20:	03a00001 	moveq	r0, #1
   29d24:	13a00000 	movne	r0, #0
   29d28:	e12fff1e 	bx	lr
   29d2c:	e59f2014 	ldr	r2, [pc, #20]	; 29d48 <CTimer::IsLeapYear(unsigned int)+0x40>
   29d30:	e1520263 	cmp	r2, r3, ror #4
   29d34:	23a00001 	movcs	r0, #1
   29d38:	33a00000 	movcc	r0, #0
   29d3c:	e12fff1e 	bx	lr
   29d40:	c28f5c29 	.word	0xc28f5c29
   29d44:	028f5c28 	.word	0x028f5c28
   29d48:	00a3d70a 	.word	0x00a3d70a

00029d4c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   29d4c:	e3500001 	cmp	r0, #1
   29d50:	0a000002 	beq	29d60 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   29d54:	e59f3048 	ldr	r3, [pc, #72]	; 29da4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x58>
   29d58:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   29d5c:	e12fff1e 	bx	lr
   29d60:	e59f3040 	ldr	r3, [pc, #64]	; 29da8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x5c>
   29d64:	e59f2040 	ldr	r2, [pc, #64]	; 29dac <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
   29d68:	e0030193 	mul	r3, r3, r1
   29d6c:	e1520163 	cmp	r2, r3, ror #2
   29d70:	2a000006 	bcs	29d90 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x44>
   29d74:	e3110003 	tst	r1, #3
   29d78:	03a03001 	moveq	r3, #1
   29d7c:	13a03000 	movne	r3, #0
   29d80:	e3530000 	cmp	r3, #0
   29d84:	0afffff2 	beq	29d54 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   29d88:	e3a0001d 	mov	r0, #29
   29d8c:	e12fff1e 	bx	lr
   29d90:	e59f2018 	ldr	r2, [pc, #24]	; 29db0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x64>
   29d94:	e1520263 	cmp	r2, r3, ror #4
   29d98:	23a03001 	movcs	r3, #1
   29d9c:	33a03000 	movcc	r3, #0
   29da0:	eafffff6 	b	29d80 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x34>
   29da4:	0004513c 	.word	0x0004513c
   29da8:	c28f5c29 	.word	0xc28f5c29
   29dac:	028f5c28 	.word	0x028f5c28
   29db0:	00a3d70a 	.word	0x00a3d70a

00029db4 <CTimer::Get()>:
   29db4:	e59f301c 	ldr	r3, [pc, #28]	; 29dd8 <CTimer::Get()+0x24>
   29db8:	e5930000 	ldr	r0, [r3]
   29dbc:	e3500000 	cmp	r0, #0
   29dc0:	112fff1e 	bxne	lr
   29dc4:	e3a02f9f 	mov	r2, #636	; 0x27c
   29dc8:	e92d4010 	push	{r4, lr}
   29dcc:	e59f1008 	ldr	r1, [pc, #8]	; 29ddc <CTimer::Get()+0x28>
   29dd0:	e59f0008 	ldr	r0, [pc, #8]	; 29de0 <CTimer::Get()+0x2c>
   29dd4:	ebffea2a 	bl	24684 <assertion_failed>
   29dd8:	0004dab8 	.word	0x0004dab8
   29ddc:	00045000 	.word	0x00045000
   29de0:	00043274 	.word	0x00043274

00029de4 <memset>:
   29de4:	e352000f 	cmp	r2, #15
   29de8:	e200c003 	and	ip, r0, #3
   29dec:	93a03000 	movls	r3, #0
   29df0:	83a03001 	movhi	r3, #1
   29df4:	e35c0000 	cmp	ip, #0
   29df8:	13a03000 	movne	r3, #0
   29dfc:	e3530000 	cmp	r3, #0
   29e00:	1a000008 	bne	29e28 <memset+0x44>
   29e04:	e3520000 	cmp	r2, #0
   29e08:	e1a03000 	mov	r3, r0
   29e0c:	012fff1e 	bxeq	lr
   29e10:	e6af1071 	sxtb	r1, r1
   29e14:	e0802002 	add	r2, r0, r2
   29e18:	e4c31001 	strb	r1, [r3], #1
   29e1c:	e1530002 	cmp	r3, r2
   29e20:	1afffffc 	bne	29e18 <memset+0x34>
   29e24:	e12fff1e 	bx	lr
   29e28:	e2423010 	sub	r3, r2, #16
   29e2c:	e3c3c00f 	bic	ip, r3, #15
   29e30:	e92d4010 	push	{r4, lr}
   29e34:	e2804020 	add	r4, r0, #32
   29e38:	e181e401 	orr	lr, r1, r1, lsl #8
   29e3c:	e084400c 	add	r4, r4, ip
   29e40:	e1a03223 	lsr	r3, r3, #4
   29e44:	e18ee80e 	orr	lr, lr, lr, lsl #16
   29e48:	e280c010 	add	ip, r0, #16
   29e4c:	e50ce010 	str	lr, [ip, #-16]
   29e50:	e50ce00c 	str	lr, [ip, #-12]
   29e54:	e50ce008 	str	lr, [ip, #-8]
   29e58:	e50ce004 	str	lr, [ip, #-4]
   29e5c:	e28cc010 	add	ip, ip, #16
   29e60:	e15c0004 	cmp	ip, r4
   29e64:	1afffff8 	bne	29e4c <memset+0x68>
   29e68:	e202200f 	and	r2, r2, #15
   29e6c:	e2833001 	add	r3, r3, #1
   29e70:	e3520000 	cmp	r2, #0
   29e74:	e0803203 	add	r3, r0, r3, lsl #4
   29e78:	08bd8010 	popeq	{r4, pc}
   29e7c:	e6af1071 	sxtb	r1, r1
   29e80:	e0832002 	add	r2, r3, r2
   29e84:	e4c31001 	strb	r1, [r3], #1
   29e88:	e1530002 	cmp	r3, r2
   29e8c:	1afffffc 	bne	29e84 <memset+0xa0>
   29e90:	e8bd8010 	pop	{r4, pc}

00029e94 <memmove>:
   29e94:	e1500001 	cmp	r0, r1
   29e98:	9a000002 	bls	29ea8 <memmove+0x14>
   29e9c:	e0813002 	add	r3, r1, r2
   29ea0:	e1530000 	cmp	r3, r0
   29ea4:	8a000000 	bhi	29eac <memmove+0x18>
   29ea8:	ea000216 	b	2a708 <memcpy>
   29eac:	e3520000 	cmp	r2, #0
   29eb0:	e0802002 	add	r2, r0, r2
   29eb4:	012fff1e 	bxeq	lr
   29eb8:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   29ebc:	e1510003 	cmp	r1, r3
   29ec0:	e562c001 	strb	ip, [r2, #-1]!
   29ec4:	1afffffb 	bne	29eb8 <memmove+0x24>
   29ec8:	e12fff1e 	bx	lr

00029ecc <memcmp>:
   29ecc:	e3520000 	cmp	r2, #0
   29ed0:	e242c001 	sub	ip, r2, #1
   29ed4:	0a00000c 	beq	29f0c <memcmp+0x40>
   29ed8:	e080c00c 	add	ip, r0, ip
   29edc:	e2411001 	sub	r1, r1, #1
   29ee0:	e2400001 	sub	r0, r0, #1
   29ee4:	ea000002 	b	29ef4 <memcmp+0x28>
   29ee8:	3a000009 	bcc	29f14 <memcmp+0x48>
   29eec:	e150000c 	cmp	r0, ip
   29ef0:	0a000005 	beq	29f0c <memcmp+0x40>
   29ef4:	e5f02001 	ldrb	r2, [r0, #1]!
   29ef8:	e5f13001 	ldrb	r3, [r1, #1]!
   29efc:	e1520003 	cmp	r2, r3
   29f00:	9afffff8 	bls	29ee8 <memcmp+0x1c>
   29f04:	e3a00001 	mov	r0, #1
   29f08:	e12fff1e 	bx	lr
   29f0c:	e3a00000 	mov	r0, #0
   29f10:	e12fff1e 	bx	lr
   29f14:	e3e00000 	mvn	r0, #0
   29f18:	e12fff1e 	bx	lr

00029f1c <strlen>:
   29f1c:	e0d030d1 	ldrsb	r3, [r0], #1
   29f20:	e3530000 	cmp	r3, #0
   29f24:	0a000004 	beq	29f3c <strlen+0x20>
   29f28:	e3a03000 	mov	r3, #0
   29f2c:	e0d020d1 	ldrsb	r2, [r0], #1
   29f30:	e2833001 	add	r3, r3, #1
   29f34:	e3520000 	cmp	r2, #0
   29f38:	1afffffb 	bne	29f2c <strlen+0x10>
   29f3c:	e1a00003 	mov	r0, r3
   29f40:	e12fff1e 	bx	lr

00029f44 <strcmp>:
   29f44:	e1d030d0 	ldrsb	r3, [r0]
   29f48:	e3530000 	cmp	r3, #0
   29f4c:	1a000006 	bne	29f6c <strcmp+0x28>
   29f50:	ea000016 	b	29fb0 <strcmp+0x6c>
   29f54:	e1520003 	cmp	r2, r3
   29f58:	ba00000c 	blt	29f90 <strcmp+0x4c>
   29f5c:	ca00000d 	bgt	29f98 <strcmp+0x54>
   29f60:	e1f030d1 	ldrsb	r3, [r0, #1]!
   29f64:	e3530000 	cmp	r3, #0
   29f68:	0a00000c 	beq	29fa0 <strcmp+0x5c>
   29f6c:	e1a0c001 	mov	ip, r1
   29f70:	e0d120d1 	ldrsb	r2, [r1], #1
   29f74:	e3520000 	cmp	r2, #0
   29f78:	1afffff5 	bne	29f54 <strcmp+0x10>
   29f7c:	e1530002 	cmp	r3, r2
   29f80:	ca000002 	bgt	29f90 <strcmp+0x4c>
   29f84:	b3e00000 	mvnlt	r0, #0
   29f88:	a3a00000 	movge	r0, #0
   29f8c:	e12fff1e 	bx	lr
   29f90:	e3a00001 	mov	r0, #1
   29f94:	e12fff1e 	bx	lr
   29f98:	e3e00000 	mvn	r0, #0
   29f9c:	e12fff1e 	bx	lr
   29fa0:	e1dc20d1 	ldrsb	r2, [ip, #1]
   29fa4:	e1530002 	cmp	r3, r2
   29fa8:	dafffff5 	ble	29f84 <strcmp+0x40>
   29fac:	eafffff7 	b	29f90 <strcmp+0x4c>
   29fb0:	e1d120d0 	ldrsb	r2, [r1]
   29fb4:	eafffff0 	b	29f7c <strcmp+0x38>

00029fb8 <strcasecmp>:
   29fb8:	e2400001 	sub	r0, r0, #1
   29fbc:	ea000009 	b	29fe8 <strcasecmp+0x30>
   29fc0:	e0d130d1 	ldrsb	r3, [r1], #1
   29fc4:	e243c061 	sub	ip, r3, #97	; 0x61
   29fc8:	e35c0019 	cmp	ip, #25
   29fcc:	92433020 	subls	r3, r3, #32
   29fd0:	9a000001 	bls	29fdc <strcasecmp+0x24>
   29fd4:	e3530000 	cmp	r3, #0
   29fd8:	0a000012 	beq	2a028 <strcasecmp+0x70>
   29fdc:	e1520003 	cmp	r2, r3
   29fe0:	ca000012 	bgt	2a030 <strcasecmp+0x78>
   29fe4:	ba000013 	blt	2a038 <strcasecmp+0x80>
   29fe8:	e1f020d1 	ldrsb	r2, [r0, #1]!
   29fec:	e2423061 	sub	r3, r2, #97	; 0x61
   29ff0:	e3530019 	cmp	r3, #25
   29ff4:	92422020 	subls	r2, r2, #32
   29ff8:	9afffff0 	bls	29fc0 <strcasecmp+0x8>
   29ffc:	e3520000 	cmp	r2, #0
   2a000:	1affffee 	bne	29fc0 <strcasecmp+0x8>
   2a004:	e1d130d0 	ldrsb	r3, [r1]
   2a008:	e2431061 	sub	r1, r3, #97	; 0x61
   2a00c:	e3510019 	cmp	r1, #25
   2a010:	92433020 	subls	r3, r3, #32
   2a014:	8a000003 	bhi	2a028 <strcasecmp+0x70>
   2a018:	e1530002 	cmp	r3, r2
   2a01c:	d3a00000 	movle	r0, #0
   2a020:	c3e00000 	mvngt	r0, #0
   2a024:	e12fff1e 	bx	lr
   2a028:	e1530002 	cmp	r3, r2
   2a02c:	aafffff9 	bge	2a018 <strcasecmp+0x60>
   2a030:	e3a00001 	mov	r0, #1
   2a034:	e12fff1e 	bx	lr
   2a038:	e3e00000 	mvn	r0, #0
   2a03c:	e12fff1e 	bx	lr

0002a040 <strncmp>:
   2a040:	e3520000 	cmp	r2, #0
   2a044:	0a000015 	beq	2a0a0 <strncmp+0x60>
   2a048:	e240c001 	sub	ip, r0, #1
   2a04c:	e0810002 	add	r0, r1, r2
   2a050:	ea000007 	b	2a074 <strncmp+0x34>
   2a054:	e0d120d1 	ldrsb	r2, [r1], #1
   2a058:	e3520000 	cmp	r2, #0
   2a05c:	0a000008 	beq	2a084 <strncmp+0x44>
   2a060:	e1530002 	cmp	r3, r2
   2a064:	ca00000b 	bgt	2a098 <strncmp+0x58>
   2a068:	ba00000e 	blt	2a0a8 <strncmp+0x68>
   2a06c:	e1510000 	cmp	r1, r0
   2a070:	0a00000a 	beq	2a0a0 <strncmp+0x60>
   2a074:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2a078:	e3530000 	cmp	r3, #0
   2a07c:	1afffff4 	bne	2a054 <strncmp+0x14>
   2a080:	e1d120d0 	ldrsb	r2, [r1]
   2a084:	e1520003 	cmp	r2, r3
   2a088:	ba000002 	blt	2a098 <strncmp+0x58>
   2a08c:	c3e00000 	mvngt	r0, #0
   2a090:	d3a00000 	movle	r0, #0
   2a094:	e12fff1e 	bx	lr
   2a098:	e3a00001 	mov	r0, #1
   2a09c:	e12fff1e 	bx	lr
   2a0a0:	e3a00000 	mov	r0, #0
   2a0a4:	e12fff1e 	bx	lr
   2a0a8:	e3e00000 	mvn	r0, #0
   2a0ac:	e12fff1e 	bx	lr

0002a0b0 <strncasecmp>:
   2a0b0:	e3520000 	cmp	r2, #0
   2a0b4:	0a00001e 	beq	2a134 <strncasecmp+0x84>
   2a0b8:	e240c001 	sub	ip, r0, #1
   2a0bc:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2a0c0:	e2430061 	sub	r0, r3, #97	; 0x61
   2a0c4:	e3500019 	cmp	r0, #25
   2a0c8:	92433020 	subls	r3, r3, #32
   2a0cc:	8a00000e 	bhi	2a10c <strncasecmp+0x5c>
   2a0d0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2a0d4:	e0d100d1 	ldrsb	r0, [r1], #1
   2a0d8:	e240e061 	sub	lr, r0, #97	; 0x61
   2a0dc:	e35e0019 	cmp	lr, #25
   2a0e0:	92400020 	subls	r0, r0, #32
   2a0e4:	9a000014 	bls	2a13c <strncasecmp+0x8c>
   2a0e8:	e3500000 	cmp	r0, #0
   2a0ec:	1a000012 	bne	2a13c <strncasecmp+0x8c>
   2a0f0:	e1530000 	cmp	r3, r0
   2a0f4:	ca000022 	bgt	2a184 <strncasecmp+0xd4>
   2a0f8:	e1500003 	cmp	r0, r3
   2a0fc:	d3a02000 	movle	r2, #0
   2a100:	c3e02000 	mvngt	r2, #0
   2a104:	e1a00002 	mov	r0, r2
   2a108:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2a10c:	e3530000 	cmp	r3, #0
   2a110:	1affffee 	bne	2a0d0 <strncasecmp+0x20>
   2a114:	e1d100d0 	ldrsb	r0, [r1]
   2a118:	e2402061 	sub	r2, r0, #97	; 0x61
   2a11c:	e3520019 	cmp	r2, #25
   2a120:	92400020 	subls	r0, r0, #32
   2a124:	8a00001c 	bhi	2a19c <strncasecmp+0xec>
   2a128:	e1500003 	cmp	r0, r3
   2a12c:	d3a02000 	movle	r2, #0
   2a130:	c3e02000 	mvngt	r2, #0
   2a134:	e1a00002 	mov	r0, r2
   2a138:	e12fff1e 	bx	lr
   2a13c:	e1530000 	cmp	r3, r0
   2a140:	ca00000f 	bgt	2a184 <strncasecmp+0xd4>
   2a144:	ba000011 	blt	2a190 <strncasecmp+0xe0>
   2a148:	e2522001 	subs	r2, r2, #1
   2a14c:	0affffec 	beq	2a104 <strncasecmp+0x54>
   2a150:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2a154:	e2430061 	sub	r0, r3, #97	; 0x61
   2a158:	e3500019 	cmp	r0, #25
   2a15c:	92433020 	subls	r3, r3, #32
   2a160:	9affffdb 	bls	2a0d4 <strncasecmp+0x24>
   2a164:	e3530000 	cmp	r3, #0
   2a168:	1affffd9 	bne	2a0d4 <strncasecmp+0x24>
   2a16c:	e1d100d0 	ldrsb	r0, [r1]
   2a170:	e2402061 	sub	r2, r0, #97	; 0x61
   2a174:	e3520019 	cmp	r2, #25
   2a178:	92400020 	subls	r0, r0, #32
   2a17c:	9affffdd 	bls	2a0f8 <strncasecmp+0x48>
   2a180:	eaffffda 	b	2a0f0 <strncasecmp+0x40>
   2a184:	e3a02001 	mov	r2, #1
   2a188:	e1a00002 	mov	r0, r2
   2a18c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2a190:	e3e02000 	mvn	r2, #0
   2a194:	e1a00002 	mov	r0, r2
   2a198:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2a19c:	e1530000 	cmp	r3, r0
   2a1a0:	c3a02001 	movgt	r2, #1
   2a1a4:	daffffdf 	ble	2a128 <strncasecmp+0x78>
   2a1a8:	eaffffe1 	b	2a134 <strncasecmp+0x84>

0002a1ac <strcpy>:
   2a1ac:	e1d130d0 	ldrsb	r3, [r1]
   2a1b0:	e1a02000 	mov	r2, r0
   2a1b4:	e3530000 	cmp	r3, #0
   2a1b8:	0a000003 	beq	2a1cc <strcpy+0x20>
   2a1bc:	e4c23001 	strb	r3, [r2], #1
   2a1c0:	e1f130d1 	ldrsb	r3, [r1, #1]!
   2a1c4:	e3530000 	cmp	r3, #0
   2a1c8:	1afffffb 	bne	2a1bc <strcpy+0x10>
   2a1cc:	e3a03000 	mov	r3, #0
   2a1d0:	e5c23000 	strb	r3, [r2]
   2a1d4:	e12fff1e 	bx	lr

0002a1d8 <strncpy>:
   2a1d8:	e3520000 	cmp	r2, #0
   2a1dc:	012fff1e 	bxeq	lr
   2a1e0:	e1a0c000 	mov	ip, r0
   2a1e4:	e2411001 	sub	r1, r1, #1
   2a1e8:	e0802002 	add	r2, r0, r2
   2a1ec:	ea000002 	b	2a1fc <strncpy+0x24>
   2a1f0:	e4cc3001 	strb	r3, [ip], #1
   2a1f4:	e15c0002 	cmp	ip, r2
   2a1f8:	012fff1e 	bxeq	lr
   2a1fc:	e1f130d1 	ldrsb	r3, [r1, #1]!
   2a200:	e3530000 	cmp	r3, #0
   2a204:	1afffff9 	bne	2a1f0 <strncpy+0x18>
   2a208:	e5cc3000 	strb	r3, [ip]
   2a20c:	e12fff1e 	bx	lr

0002a210 <strcat>:
   2a210:	e1d030d0 	ldrsb	r3, [r0]
   2a214:	e3530000 	cmp	r3, #0
   2a218:	e1a03000 	mov	r3, r0
   2a21c:	0a000002 	beq	2a22c <strcat+0x1c>
   2a220:	e1f320d1 	ldrsb	r2, [r3, #1]!
   2a224:	e3520000 	cmp	r2, #0
   2a228:	1afffffc 	bne	2a220 <strcat+0x10>
   2a22c:	e1d120d0 	ldrsb	r2, [r1]
   2a230:	e3520000 	cmp	r2, #0
   2a234:	0a000003 	beq	2a248 <strcat+0x38>
   2a238:	e4c32001 	strb	r2, [r3], #1
   2a23c:	e1f120d1 	ldrsb	r2, [r1, #1]!
   2a240:	e3520000 	cmp	r2, #0
   2a244:	1afffffb 	bne	2a238 <strcat+0x28>
   2a248:	e3a02000 	mov	r2, #0
   2a24c:	e5c32000 	strb	r2, [r3]
   2a250:	e12fff1e 	bx	lr

0002a254 <strchr>:
   2a254:	e1d030d0 	ldrsb	r3, [r0]
   2a258:	e3530000 	cmp	r3, #0
   2a25c:	0a000004 	beq	2a274 <strchr+0x20>
   2a260:	e1530001 	cmp	r3, r1
   2a264:	012fff1e 	bxeq	lr
   2a268:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a26c:	e3530000 	cmp	r3, #0
   2a270:	1afffffa 	bne	2a260 <strchr+0xc>
   2a274:	e1a00003 	mov	r0, r3
   2a278:	e12fff1e 	bx	lr

0002a27c <strstr>:
   2a27c:	e1d030d0 	ldrsb	r3, [r0]
   2a280:	e3530000 	cmp	r3, #0
   2a284:	1a000003 	bne	2a298 <strstr+0x1c>
   2a288:	e1d130d0 	ldrsb	r3, [r1]
   2a28c:	e3530000 	cmp	r3, #0
   2a290:	13a00000 	movne	r0, #0
   2a294:	e12fff1e 	bx	lr
   2a298:	e92d4010 	push	{r4, lr}
   2a29c:	e1d140d0 	ldrsb	r4, [r1]
   2a2a0:	e3540000 	cmp	r4, #0
   2a2a4:	08bd8010 	popeq	{r4, pc}
   2a2a8:	e1a0e001 	mov	lr, r1
   2a2ac:	e1a03004 	mov	r3, r4
   2a2b0:	e2402001 	sub	r2, r0, #1
   2a2b4:	ea000002 	b	2a2c4 <strstr+0x48>
   2a2b8:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   2a2bc:	e3530000 	cmp	r3, #0
   2a2c0:	08bd8010 	popeq	{r4, pc}
   2a2c4:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   2a2c8:	e15c0003 	cmp	ip, r3
   2a2cc:	0afffff9 	beq	2a2b8 <strstr+0x3c>
   2a2d0:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a2d4:	e3530000 	cmp	r3, #0
   2a2d8:	1afffff0 	bne	2a2a0 <strstr+0x24>
   2a2dc:	e1a00003 	mov	r0, r3
   2a2e0:	e8bd8010 	pop	{r4, pc}

0002a2e4 <strtok_r>:
   2a2e4:	e3500000 	cmp	r0, #0
   2a2e8:	0a000027 	beq	2a38c <strtok_r+0xa8>
   2a2ec:	e1d0c0d0 	ldrsb	ip, [r0]
   2a2f0:	e35c0000 	cmp	ip, #0
   2a2f4:	0a00002a 	beq	2a3a4 <strtok_r+0xc0>
   2a2f8:	e92d4030 	push	{r4, r5, lr}
   2a2fc:	e1d140d0 	ldrsb	r4, [r1]
   2a300:	e3540000 	cmp	r4, #0
   2a304:	0a00000a 	beq	2a334 <strtok_r+0x50>
   2a308:	e1a0e001 	mov	lr, r1
   2a30c:	e1a03004 	mov	r3, r4
   2a310:	ea000002 	b	2a320 <strtok_r+0x3c>
   2a314:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   2a318:	e3530000 	cmp	r3, #0
   2a31c:	0a000004 	beq	2a334 <strtok_r+0x50>
   2a320:	e153000c 	cmp	r3, ip
   2a324:	1afffffa 	bne	2a314 <strtok_r+0x30>
   2a328:	e3540000 	cmp	r4, #0
   2a32c:	e1f0c0d1 	ldrsb	ip, [r0, #1]!
   2a330:	1afffff4 	bne	2a308 <strtok_r+0x24>
   2a334:	e35c0000 	cmp	ip, #0
   2a338:	11a05000 	movne	r5, r0
   2a33c:	0a00001b 	beq	2a3b0 <strtok_r+0xcc>
   2a340:	e3540000 	cmp	r4, #0
   2a344:	0a00000b 	beq	2a378 <strtok_r+0x94>
   2a348:	e1a03004 	mov	r3, r4
   2a34c:	e1a0e001 	mov	lr, r1
   2a350:	ea000002 	b	2a360 <strtok_r+0x7c>
   2a354:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   2a358:	e3530000 	cmp	r3, #0
   2a35c:	0a000005 	beq	2a378 <strtok_r+0x94>
   2a360:	e153000c 	cmp	r3, ip
   2a364:	1afffffa 	bne	2a354 <strtok_r+0x70>
   2a368:	e3a03000 	mov	r3, #0
   2a36c:	e4c53001 	strb	r3, [r5], #1
   2a370:	e5825000 	str	r5, [r2]
   2a374:	e8bd8030 	pop	{r4, r5, pc}
   2a378:	e1f5c0d1 	ldrsb	ip, [r5, #1]!
   2a37c:	e35c0000 	cmp	ip, #0
   2a380:	1affffee 	bne	2a340 <strtok_r+0x5c>
   2a384:	e5825000 	str	r5, [r2]
   2a388:	e8bd8030 	pop	{r4, r5, pc}
   2a38c:	e5920000 	ldr	r0, [r2]
   2a390:	e3500000 	cmp	r0, #0
   2a394:	012fff1e 	bxeq	lr
   2a398:	e1d0c0d0 	ldrsb	ip, [r0]
   2a39c:	e35c0000 	cmp	ip, #0
   2a3a0:	1affffd4 	bne	2a2f8 <strtok_r+0x14>
   2a3a4:	e3a00000 	mov	r0, #0
   2a3a8:	e5820000 	str	r0, [r2]
   2a3ac:	e12fff1e 	bx	lr
   2a3b0:	e3a00000 	mov	r0, #0
   2a3b4:	e5820000 	str	r0, [r2]
   2a3b8:	e8bd8030 	pop	{r4, r5, pc}

0002a3bc <strtoul>:
   2a3bc:	e3510000 	cmp	r1, #0
   2a3c0:	e2423002 	sub	r3, r2, #2
   2a3c4:	15810000 	strne	r0, [r1]
   2a3c8:	e3520000 	cmp	r2, #0
   2a3cc:	13530022 	cmpne	r3, #34	; 0x22
   2a3d0:	8a000044 	bhi	2a4e8 <strtoul+0x12c>
   2a3d4:	e92d4070 	push	{r4, r5, r6, lr}
   2a3d8:	e1a0e000 	mov	lr, r0
   2a3dc:	e1de30d0 	ldrsb	r3, [lr]
   2a3e0:	e1a0c00e 	mov	ip, lr
   2a3e4:	e2430009 	sub	r0, r3, #9
   2a3e8:	e3530020 	cmp	r3, #32
   2a3ec:	e28ee001 	add	lr, lr, #1
   2a3f0:	e6ef0070 	uxtb	r0, r0
   2a3f4:	0afffff8 	beq	2a3dc <strtoul+0x20>
   2a3f8:	e3500004 	cmp	r0, #4
   2a3fc:	9afffff6 	bls	2a3dc <strtoul+0x20>
   2a400:	e353002b 	cmp	r3, #43	; 0x2b
   2a404:	0a000027 	beq	2a4a8 <strtoul+0xec>
   2a408:	e353002d 	cmp	r3, #45	; 0x2d
   2a40c:	01dc30d1 	ldrsbeq	r3, [ip, #1]
   2a410:	03a06001 	moveq	r6, #1
   2a414:	01a0c00e 	moveq	ip, lr
   2a418:	13a06000 	movne	r6, #0
   2a41c:	e3530030 	cmp	r3, #48	; 0x30
   2a420:	0a000025 	beq	2a4bc <strtoul+0x100>
   2a424:	e3520000 	cmp	r2, #0
   2a428:	03a0200a 	moveq	r2, #10
   2a42c:	e353002f 	cmp	r3, #47	; 0x2f
   2a430:	e1a0e003 	mov	lr, r3
   2a434:	da00003c 	ble	2a52c <strtoul+0x170>
   2a438:	e3a05001 	mov	r5, #1
   2a43c:	e3a04000 	mov	r4, #0
   2a440:	ea000008 	b	2a468 <strtoul+0xac>
   2a444:	e020e294 	mla	r0, r4, r2, lr
   2a448:	e1500004 	cmp	r0, r4
   2a44c:	3a00002b 	bcc	2a500 <strtoul+0x144>
   2a450:	e1fce0d1 	ldrsb	lr, [ip, #1]!
   2a454:	e3a05000 	mov	r5, #0
   2a458:	e35e002f 	cmp	lr, #47	; 0x2f
   2a45c:	e1a0300e 	mov	r3, lr
   2a460:	da00002b 	ble	2a514 <strtoul+0x158>
   2a464:	e1a04000 	mov	r4, r0
   2a468:	e2433061 	sub	r3, r3, #97	; 0x61
   2a46c:	e3530019 	cmp	r3, #25
   2a470:	924ee020 	subls	lr, lr, #32
   2a474:	e35e0040 	cmp	lr, #64	; 0x40
   2a478:	c24ee007 	subgt	lr, lr, #7
   2a47c:	e24ee030 	sub	lr, lr, #48	; 0x30
   2a480:	e15e0002 	cmp	lr, r2
   2a484:	baffffee 	blt	2a444 <strtoul+0x88>
   2a488:	e1a00004 	mov	r0, r4
   2a48c:	e2255001 	eor	r5, r5, #1
   2a490:	e3510000 	cmp	r1, #0
   2a494:	e0055006 	and	r5, r5, r6
   2a498:	1581c000 	strne	ip, [r1]
   2a49c:	e3550000 	cmp	r5, #0
   2a4a0:	12600000 	rsbne	r0, r0, #0
   2a4a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a4a8:	e1dc30d1 	ldrsb	r3, [ip, #1]
   2a4ac:	e3a06000 	mov	r6, #0
   2a4b0:	e3530030 	cmp	r3, #48	; 0x30
   2a4b4:	e1a0c00e 	mov	ip, lr
   2a4b8:	1affffd9 	bne	2a424 <strtoul+0x68>
   2a4bc:	e1dc30d1 	ldrsb	r3, [ip, #1]
   2a4c0:	e28ce001 	add	lr, ip, #1
   2a4c4:	e3c30020 	bic	r0, r3, #32
   2a4c8:	e3500058 	cmp	r0, #88	; 0x58
   2a4cc:	1a000007 	bne	2a4f0 <strtoul+0x134>
   2a4d0:	e3d23010 	bics	r3, r2, #16
   2a4d4:	1a000012 	bne	2a524 <strtoul+0x168>
   2a4d8:	e1dc30d2 	ldrsb	r3, [ip, #2]
   2a4dc:	e3a02010 	mov	r2, #16
   2a4e0:	e28cc002 	add	ip, ip, #2
   2a4e4:	eaffffd0 	b	2a42c <strtoul+0x70>
   2a4e8:	e3a00000 	mov	r0, #0
   2a4ec:	e12fff1e 	bx	lr
   2a4f0:	e3520000 	cmp	r2, #0
   2a4f4:	e1a0c00e 	mov	ip, lr
   2a4f8:	03a02008 	moveq	r2, #8
   2a4fc:	eaffffca 	b	2a42c <strtoul+0x70>
   2a500:	e3510000 	cmp	r1, #0
   2a504:	0a000004 	beq	2a51c <strtoul+0x160>
   2a508:	e3e00000 	mvn	r0, #0
   2a50c:	e581c000 	str	ip, [r1]
   2a510:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a514:	e3a05001 	mov	r5, #1
   2a518:	eaffffdc 	b	2a490 <strtoul+0xd4>
   2a51c:	e3e00000 	mvn	r0, #0
   2a520:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a524:	e3a00000 	mov	r0, #0
   2a528:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a52c:	e3510000 	cmp	r1, #0
   2a530:	0afffffb 	beq	2a524 <strtoul+0x168>
   2a534:	e3a00000 	mov	r0, #0
   2a538:	e581c000 	str	ip, [r1]
   2a53c:	e8bd8070 	pop	{r4, r5, r6, pc}

0002a540 <strtoull>:
   2a540:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a544:	e2423002 	sub	r3, r2, #2
   2a548:	e251e000 	subs	lr, r1, #0
   2a54c:	158e0000 	strne	r0, [lr]
   2a550:	e3520000 	cmp	r2, #0
   2a554:	13530022 	cmpne	r3, #34	; 0x22
   2a558:	8a00004f 	bhi	2a69c <strtoull+0x15c>
   2a55c:	e1a01000 	mov	r1, r0
   2a560:	e1d130d0 	ldrsb	r3, [r1]
   2a564:	e1a0c001 	mov	ip, r1
   2a568:	e2430009 	sub	r0, r3, #9
   2a56c:	e3530020 	cmp	r3, #32
   2a570:	e2811001 	add	r1, r1, #1
   2a574:	e6ef0070 	uxtb	r0, r0
   2a578:	0afffff8 	beq	2a560 <strtoull+0x20>
   2a57c:	e3500004 	cmp	r0, #4
   2a580:	9afffff6 	bls	2a560 <strtoull+0x20>
   2a584:	e353002b 	cmp	r3, #43	; 0x2b
   2a588:	0a000034 	beq	2a660 <strtoull+0x120>
   2a58c:	e353002d 	cmp	r3, #45	; 0x2d
   2a590:	01dc30d1 	ldrsbeq	r3, [ip, #1]
   2a594:	03a08001 	moveq	r8, #1
   2a598:	01a0c001 	moveq	ip, r1
   2a59c:	13a08000 	movne	r8, #0
   2a5a0:	e3530030 	cmp	r3, #48	; 0x30
   2a5a4:	0a000032 	beq	2a674 <strtoull+0x134>
   2a5a8:	e3520000 	cmp	r2, #0
   2a5ac:	03a0200a 	moveq	r2, #10
   2a5b0:	e353002f 	cmp	r3, #47	; 0x2f
   2a5b4:	e1a09003 	mov	r9, r3
   2a5b8:	da000049 	ble	2a6e4 <strtoull+0x1a4>
   2a5bc:	e3a0a001 	mov	sl, #1
   2a5c0:	e3a04000 	mov	r4, #0
   2a5c4:	e3a05000 	mov	r5, #0
   2a5c8:	e1a06002 	mov	r6, r2
   2a5cc:	e1a07fc2 	asr	r7, r2, #31
   2a5d0:	ea00000f 	b	2a614 <strtoull+0xd4>
   2a5d4:	e0030592 	mul	r3, r2, r5
   2a5d8:	e0810492 	umull	r0, r1, r2, r4
   2a5dc:	e0233794 	mla	r3, r4, r7, r3
   2a5e0:	e0900009 	adds	r0, r0, r9
   2a5e4:	e0831001 	add	r1, r3, r1
   2a5e8:	e0a11fc9 	adc	r1, r1, r9, asr #31
   2a5ec:	e1510005 	cmp	r1, r5
   2a5f0:	01500004 	cmpeq	r0, r4
   2a5f4:	3a00002f 	bcc	2a6b8 <strtoull+0x178>
   2a5f8:	e1fc90d1 	ldrsb	r9, [ip, #1]!
   2a5fc:	e3a0a000 	mov	sl, #0
   2a600:	e359002f 	cmp	r9, #47	; 0x2f
   2a604:	e1a03009 	mov	r3, r9
   2a608:	da000030 	ble	2a6d0 <strtoull+0x190>
   2a60c:	e1a04000 	mov	r4, r0
   2a610:	e1a05001 	mov	r5, r1
   2a614:	e2433061 	sub	r3, r3, #97	; 0x61
   2a618:	e3530019 	cmp	r3, #25
   2a61c:	92499020 	subls	r9, r9, #32
   2a620:	e3590040 	cmp	r9, #64	; 0x40
   2a624:	c2499007 	subgt	r9, r9, #7
   2a628:	e2499030 	sub	r9, r9, #48	; 0x30
   2a62c:	e1590002 	cmp	r9, r2
   2a630:	baffffe7 	blt	2a5d4 <strtoull+0x94>
   2a634:	e1a00004 	mov	r0, r4
   2a638:	e1a01005 	mov	r1, r5
   2a63c:	e22aa001 	eor	sl, sl, #1
   2a640:	e35e0000 	cmp	lr, #0
   2a644:	e008800a 	and	r8, r8, sl
   2a648:	158ec000 	strne	ip, [lr]
   2a64c:	e3580000 	cmp	r8, #0
   2a650:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a654:	e2700000 	rsbs	r0, r0, #0
   2a658:	e2e11000 	rsc	r1, r1, #0
   2a65c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a660:	e1dc30d1 	ldrsb	r3, [ip, #1]
   2a664:	e3a08000 	mov	r8, #0
   2a668:	e3530030 	cmp	r3, #48	; 0x30
   2a66c:	e1a0c001 	mov	ip, r1
   2a670:	1affffcc 	bne	2a5a8 <strtoull+0x68>
   2a674:	e1dc30d1 	ldrsb	r3, [ip, #1]
   2a678:	e28c0001 	add	r0, ip, #1
   2a67c:	e3c31020 	bic	r1, r3, #32
   2a680:	e3510058 	cmp	r1, #88	; 0x58
   2a684:	1a000007 	bne	2a6a8 <strtoull+0x168>
   2a688:	e3d23010 	bics	r3, r2, #16
   2a68c:	01dc30d2 	ldrsbeq	r3, [ip, #2]
   2a690:	03a02010 	moveq	r2, #16
   2a694:	028cc002 	addeq	ip, ip, #2
   2a698:	0affffc4 	beq	2a5b0 <strtoull+0x70>
   2a69c:	e3a00000 	mov	r0, #0
   2a6a0:	e3a01000 	mov	r1, #0
   2a6a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a6a8:	e3520000 	cmp	r2, #0
   2a6ac:	e1a0c000 	mov	ip, r0
   2a6b0:	03a02008 	moveq	r2, #8
   2a6b4:	eaffffbd 	b	2a5b0 <strtoull+0x70>
   2a6b8:	e35e0000 	cmp	lr, #0
   2a6bc:	0a000005 	beq	2a6d8 <strtoull+0x198>
   2a6c0:	e3e00000 	mvn	r0, #0
   2a6c4:	e3a01000 	mov	r1, #0
   2a6c8:	e58ec000 	str	ip, [lr]
   2a6cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a6d0:	e3a0a001 	mov	sl, #1
   2a6d4:	eaffffd9 	b	2a640 <strtoull+0x100>
   2a6d8:	e3e00000 	mvn	r0, #0
   2a6dc:	e3a01000 	mov	r1, #0
   2a6e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a6e4:	e35e0000 	cmp	lr, #0
   2a6e8:	e3a00000 	mov	r0, #0
   2a6ec:	e3a01000 	mov	r1, #0
   2a6f0:	158ec000 	strne	ip, [lr]
   2a6f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002a6f8 <atoi>:
   2a6f8:	e3a0200a 	mov	r2, #10
   2a6fc:	e3a01000 	mov	r1, #0
   2a700:	eaffff2d 	b	2a3bc <strtoul>

0002a704 <char2int>:
   2a704:	e12fff1e 	bx	lr

0002a708 <memcpy>:
   2a708:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   2a70c:	e352007f 	cmp	r2, #127	; 0x7f
   2a710:	9a00000b 	bls	2a744 <memcpy+0x3c>
   2a714:	e3110003 	tst	r1, #3
   2a718:	1a000009 	bne	2a744 <memcpy+0x3c>
   2a71c:	e3100003 	tst	r0, #3
   2a720:	1a000007 	bne	2a744 <memcpy+0x3c>
   2a724:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   2a728:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   2a72c:	e2422020 	sub	r2, r2, #32
   2a730:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   2a734:	f5d1f040 	pld	[r1, #64]	; 0x40
   2a738:	e352001f 	cmp	r2, #31
   2a73c:	8afffff9 	bhi	2a728 <memcpy+0x20>
   2a740:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   2a744:	e3520000 	cmp	r2, #0
   2a748:	0a000003 	beq	2a75c <memcpy+0x54>
   2a74c:	e4d13001 	ldrb	r3, [r1], #1
   2a750:	e2522001 	subs	r2, r2, #1
   2a754:	e4c03001 	strb	r3, [r0], #1
   2a758:	1afffffb 	bne	2a74c <memcpy+0x44>
   2a75c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   2a760:	e12fff1e 	bx	lr

0002a764 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   2a764:	e3a03000 	mov	r3, #0
   2a768:	e3510001 	cmp	r1, #1
   2a76c:	91a0c002 	movls	ip, r2
   2a770:	8382c001 	orrhi	ip, r2, #1
   2a774:	e92d4070 	push	{r4, r5, r6, lr}
   2a778:	e1a04000 	mov	r4, r0
   2a77c:	e59f0128 	ldr	r0, [pc, #296]	; 2a8ac <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x148>
   2a780:	e15c0003 	cmp	ip, r3
   2a784:	e24dd020 	sub	sp, sp, #32
   2a788:	e5c42004 	strb	r2, [r4, #4]
   2a78c:	e5841008 	str	r1, [r4, #8]
   2a790:	e5840000 	str	r0, [r4]
   2a794:	e5843010 	str	r3, [r4, #16]
   2a798:	0a000002 	beq	2a7a8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x44>
   2a79c:	e1a00004 	mov	r0, r4
   2a7a0:	e28dd020 	add	sp, sp, #32
   2a7a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a7a8:	e59f5100 	ldr	r5, [pc, #256]	; 2a8b0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x14c>
   2a7ac:	e5950004 	ldr	r0, [r5, #4]
   2a7b0:	e1500003 	cmp	r0, r3
   2a7b4:	1a00000e 	bne	2a7f4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x90>
   2a7b8:	e5956000 	ldr	r6, [r5]
   2a7bc:	e3560000 	cmp	r6, #0
   2a7c0:	0a00000f 	beq	2a804 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xa0>
   2a7c4:	e3a02000 	mov	r2, #0
   2a7c8:	e5943008 	ldr	r3, [r4, #8]
   2a7cc:	e7862103 	str	r2, [r6, r3, lsl #2]
   2a7d0:	e5953004 	ldr	r3, [r5, #4]
   2a7d4:	e3530000 	cmp	r3, #0
   2a7d8:	1a000025 	bne	2a874 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x110>
   2a7dc:	e1a00004 	mov	r0, r4
   2a7e0:	e3a01000 	mov	r1, #0
   2a7e4:	eb00003b 	bl	2a8d8 <CVirtualGPIOPin::Write(unsigned int)>
   2a7e8:	e1a00004 	mov	r0, r4
   2a7ec:	e28dd020 	add	sp, sp, #32
   2a7f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a7f4:	eb0004d6 	bl	2bb54 <EnterCritical>
   2a7f8:	e5956000 	ldr	r6, [r5]
   2a7fc:	e3560000 	cmp	r6, #0
   2a800:	1affffef 	bne	2a7c4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   2a804:	e3a00001 	mov	r0, #1
   2a808:	eb000492 	bl	2ba58 <CMemorySystem::GetCoherentPage(unsigned int)>
   2a80c:	e1a03000 	mov	r3, r0
   2a810:	e1a01006 	mov	r1, r6
   2a814:	e28d0008 	add	r0, sp, #8
   2a818:	e5853000 	str	r3, [r5]
   2a81c:	ebffe7b9 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2a820:	e3a03004 	mov	r3, #4
   2a824:	e595c000 	ldr	ip, [r5]
   2a828:	e58d3000 	str	r3, [sp]
   2a82c:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   2a830:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   2a834:	e3a03010 	mov	r3, #16
   2a838:	e59f1074 	ldr	r1, [pc, #116]	; 2a8b4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x150>
   2a83c:	e28d0008 	add	r0, sp, #8
   2a840:	e28d2010 	add	r2, sp, #16
   2a844:	e58dc01c 	str	ip, [sp, #28]
   2a848:	ebffe7ba 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2a84c:	e3500000 	cmp	r0, #0
   2a850:	0a000009 	beq	2a87c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x118>
   2a854:	e28d0008 	add	r0, sp, #8
   2a858:	ebffe7b1 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   2a85c:	e5956000 	ldr	r6, [r5]
   2a860:	e3560000 	cmp	r6, #0
   2a864:	1affffd6 	bne	2a7c4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   2a868:	e5953004 	ldr	r3, [r5, #4]
   2a86c:	e3530000 	cmp	r3, #0
   2a870:	0affffd9 	beq	2a7dc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   2a874:	eb0004e0 	bl	2bbfc <LeaveCritical>
   2a878:	eaffffd7 	b	2a7dc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   2a87c:	e3a03010 	mov	r3, #16
   2a880:	e58d0000 	str	r0, [sp]
   2a884:	e59f102c 	ldr	r1, [pc, #44]	; 2a8b8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x154>
   2a888:	e28d2010 	add	r2, sp, #16
   2a88c:	e28d0008 	add	r0, sp, #8
   2a890:	ebffe7a8 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2a894:	e3500000 	cmp	r0, #0
   2a898:	159d301c 	ldrne	r3, [sp, #28]
   2a89c:	05850000 	streq	r0, [r5]
   2a8a0:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   2a8a4:	15853000 	strne	r3, [r5]
   2a8a8:	eaffffe9 	b	2a854 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf0>
   2a8ac:	0004517c 	.word	0x0004517c
   2a8b0:	0004dabc 	.word	0x0004dabc
   2a8b4:	00048020 	.word	0x00048020
   2a8b8:	00040010 	.word	0x00040010

0002a8bc <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   2a8bc:	e12fff1e 	bx	lr

0002a8c0 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   2a8c0:	e92d4010 	push	{r4, lr}
   2a8c4:	e1a04000 	mov	r4, r0
   2a8c8:	e3a01014 	mov	r1, #20
   2a8cc:	eb000181 	bl	2aed8 <operator delete(void*, unsigned int)>
   2a8d0:	e1a00004 	mov	r0, r4
   2a8d4:	e8bd8010 	pop	{r4, pc}

0002a8d8 <CVirtualGPIOPin::Write(unsigned int)>:
   2a8d8:	e92d4070 	push	{r4, r5, r6, lr}
   2a8dc:	e5d03004 	ldrb	r3, [r0, #4]
   2a8e0:	e1a04000 	mov	r4, r0
   2a8e4:	e3530000 	cmp	r3, #0
   2a8e8:	e1a05001 	mov	r5, r1
   2a8ec:	e24dd028 	sub	sp, sp, #40	; 0x28
   2a8f0:	0a000012 	beq	2a940 <CVirtualGPIOPin::Write(unsigned int)+0x68>
   2a8f4:	e5901008 	ldr	r1, [r0, #8]
   2a8f8:	e3510000 	cmp	r1, #0
   2a8fc:	1a000033 	bne	2a9d0 <CVirtualGPIOPin::Write(unsigned int)+0xf8>
   2a900:	e28d000c 	add	r0, sp, #12
   2a904:	ebffe77f 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2a908:	e3a03008 	mov	r3, #8
   2a90c:	e58d3000 	str	r3, [sp]
   2a910:	e3a03014 	mov	r3, #20
   2a914:	e3a0c082 	mov	ip, #130	; 0x82
   2a918:	e59f10e0 	ldr	r1, [pc, #224]	; 2aa00 <CVirtualGPIOPin::Write(unsigned int)+0x128>
   2a91c:	e28d000c 	add	r0, sp, #12
   2a920:	e08d2003 	add	r2, sp, r3
   2a924:	e58d5024 	str	r5, [sp, #36]	; 0x24
   2a928:	e58dc020 	str	ip, [sp, #32]
   2a92c:	ebffe781 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2a930:	e28d000c 	add	r0, sp, #12
   2a934:	ebffe77a 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   2a938:	e28dd028 	add	sp, sp, #40	; 0x28
   2a93c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a940:	e5903008 	ldr	r3, [r0, #8]
   2a944:	e3530001 	cmp	r3, #1
   2a948:	8afffffa 	bhi	2a938 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2a94c:	e59f60b0 	ldr	r6, [pc, #176]	; 2aa04 <CVirtualGPIOPin::Write(unsigned int)+0x12c>
   2a950:	e3510001 	cmp	r1, #1
   2a954:	e5962000 	ldr	r2, [r6]
   2a958:	93a03000 	movls	r3, #0
   2a95c:	83a03001 	movhi	r3, #1
   2a960:	e3520000 	cmp	r2, #0
   2a964:	03a03001 	moveq	r3, #1
   2a968:	e3530000 	cmp	r3, #0
   2a96c:	1afffff1 	bne	2a938 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2a970:	e5960004 	ldr	r0, [r6, #4]
   2a974:	e3500000 	cmp	r0, #0
   2a978:	1a00001e 	bne	2a9f8 <CVirtualGPIOPin::Write(unsigned int)+0x120>
   2a97c:	e1d421b0 	ldrh	r2, [r4, #16]
   2a980:	e1d431b2 	ldrh	r3, [r4, #18]
   2a984:	e584500c 	str	r5, [r4, #12]
   2a988:	e0421003 	sub	r1, r2, r3
   2a98c:	e6bf1071 	sxth	r1, r1
   2a990:	e3510000 	cmp	r1, #0
   2a994:	da000011 	ble	2a9e0 <CVirtualGPIOPin::Write(unsigned int)+0x108>
   2a998:	e3550000 	cmp	r5, #0
   2a99c:	02833001 	addeq	r3, r3, #1
   2a9a0:	06ff3073 	uxtheq	r3, r3
   2a9a4:	01c431b2 	strheq	r3, [r4, #18]
   2a9a8:	1a000003 	bne	2a9bc <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   2a9ac:	e5940008 	ldr	r0, [r4, #8]
   2a9b0:	e5961000 	ldr	r1, [r6]
   2a9b4:	e1833802 	orr	r3, r3, r2, lsl #16
   2a9b8:	e7813100 	str	r3, [r1, r0, lsl #2]
   2a9bc:	e5963004 	ldr	r3, [r6, #4]
   2a9c0:	e3530000 	cmp	r3, #0
   2a9c4:	0affffdb 	beq	2a938 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2a9c8:	eb00048b 	bl	2bbfc <LeaveCritical>
   2a9cc:	eaffffd9 	b	2a938 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2a9d0:	e59f1030 	ldr	r1, [pc, #48]	; 2aa08 <CVirtualGPIOPin::Write(unsigned int)+0x130>
   2a9d4:	e3a0205b 	mov	r2, #91	; 0x5b
   2a9d8:	e2810014 	add	r0, r1, #20
   2a9dc:	ebffe728 	bl	24684 <assertion_failed>
   2a9e0:	e3550000 	cmp	r5, #0
   2a9e4:	0afffff4 	beq	2a9bc <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   2a9e8:	e2822001 	add	r2, r2, #1
   2a9ec:	e6ff2072 	uxth	r2, r2
   2a9f0:	e1c421b0 	strh	r2, [r4, #16]
   2a9f4:	eaffffec 	b	2a9ac <CVirtualGPIOPin::Write(unsigned int)+0xd4>
   2a9f8:	eb000455 	bl	2bb54 <EnterCritical>
   2a9fc:	eaffffde 	b	2a97c <CVirtualGPIOPin::Write(unsigned int)+0xa4>
   2aa00:	00038041 	.word	0x00038041
   2aa04:	0004dabc 	.word	0x0004dabc
   2aa08:	00045184 	.word	0x00045184

0002aa0c <CVirtualGPIOPin::Invert()>:
   2aa0c:	e590100c 	ldr	r1, [r0, #12]
   2aa10:	e2211001 	eor	r1, r1, #1
   2aa14:	eaffffaf 	b	2a8d8 <CVirtualGPIOPin::Write(unsigned int)>

0002aa18 <__static_initialization_and_destruction_0(int, int)>:
   2aa18:	e59f3014 	ldr	r3, [pc, #20]	; 2aa34 <__static_initialization_and_destruction_0(int, int)+0x1c>
   2aa1c:	e1510003 	cmp	r1, r3
   2aa20:	03500001 	cmpeq	r0, #1
   2aa24:	03a02000 	moveq	r2, #0
   2aa28:	059f3008 	ldreq	r3, [pc, #8]	; 2aa38 <__static_initialization_and_destruction_0(int, int)+0x20>
   2aa2c:	05832004 	streq	r2, [r3, #4]
   2aa30:	e12fff1e 	bx	lr
   2aa34:	0000ffff 	.word	0x0000ffff
   2aa38:	0004dabc 	.word	0x0004dabc

0002aa3c <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   2aa3c:	e3a02000 	mov	r2, #0
   2aa40:	e59f3004 	ldr	r3, [pc, #4]	; 2aa4c <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   2aa44:	e5832004 	str	r2, [r3, #4]
   2aa48:	e12fff1e 	bx	lr
   2aa4c:	0004dabc 	.word	0x0004dabc

0002aa50 <ChainBootStub(void const*, unsigned int)>:
   2aa50:	e2811003 	add	r1, r1, #3
   2aa54:	e1b01121 	lsrs	r1, r1, #2
   2aa58:	0a000007 	beq	2aa7c <ChainBootStub(void const*, unsigned int)+0x2c>
   2aa5c:	e1a03000 	mov	r3, r0
   2aa60:	e0800101 	add	r0, r0, r1, lsl #2
   2aa64:	e263c902 	rsb	ip, r3, #32768	; 0x8000
   2aa68:	e083200c 	add	r2, r3, ip
   2aa6c:	e4931004 	ldr	r1, [r3], #4
   2aa70:	e1530000 	cmp	r3, r0
   2aa74:	e5821000 	str	r1, [r2]
   2aa78:	1afffffa 	bne	2aa68 <ChainBootStub(void const*, unsigned int)+0x18>
   2aa7c:	e3a03000 	mov	r3, #0
   2aa80:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2aa84:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2aa88:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2aa8c:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2aa90:	e3a03902 	mov	r3, #32768	; 0x8000
   2aa94:	e12fff13 	bx	r3

0002aa98 <EnableChainBoot>:
   2aa98:	e92d4010 	push	{r4, lr}
   2aa9c:	e1a0c001 	mov	ip, r1
   2aaa0:	e1a0e000 	mov	lr, r0
   2aaa4:	e59f302c 	ldr	r3, [pc, #44]	; 2aad8 <EnableChainBoot+0x40>
   2aaa8:	e3a02b01 	mov	r2, #1024	; 0x400
   2aaac:	e59f1028 	ldr	r1, [pc, #40]	; 2aadc <EnableChainBoot+0x44>
   2aab0:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   2aab4:	e583e000 	str	lr, [r3]
   2aab8:	e583c004 	str	ip, [r3, #4]
   2aabc:	ebffff11 	bl	2a708 <memcpy>
   2aac0:	e3a03000 	mov	r3, #0
   2aac4:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2aac8:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2aacc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2aad0:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2aad4:	e8bd8010 	pop	{r4, pc}
   2aad8:	0004dac4 	.word	0x0004dac4
   2aadc:	0002aa50 	.word	0x0002aa50

0002aae0 <IsChainBootEnabled>:
   2aae0:	e59f300c 	ldr	r3, [pc, #12]	; 2aaf4 <IsChainBootEnabled+0x14>
   2aae4:	e5930000 	ldr	r0, [r3]
   2aae8:	e2500000 	subs	r0, r0, #0
   2aaec:	13a00001 	movne	r0, #1
   2aaf0:	e12fff1e 	bx	lr
   2aaf4:	0004dac4 	.word	0x0004dac4

0002aaf8 <DoChainBoot>:
   2aaf8:	e59f3008 	ldr	r3, [pc, #8]	; 2ab08 <DoChainBoot+0x10>
   2aafc:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   2ab00:	e1c300d0 	ldrd	r0, [r3]
   2ab04:	e12fff12 	bx	r2
   2ab08:	0004dac4 	.word	0x0004dac4

0002ab0c <CMACAddress::CMACAddress()>:
   2ab0c:	e3a02000 	mov	r2, #0
   2ab10:	e5c02000 	strb	r2, [r0]
   2ab14:	e12fff1e 	bx	lr

0002ab18 <CMACAddress::~CMACAddress()>:
   2ab18:	e12fff1e 	bx	lr

0002ab1c <CMACAddress::operator==(CMACAddress const&) const>:
   2ab1c:	e5d03000 	ldrb	r3, [r0]
   2ab20:	e92d4010 	push	{r4, lr}
   2ab24:	e3530000 	cmp	r3, #0
   2ab28:	0a000009 	beq	2ab54 <CMACAddress::operator==(CMACAddress const&) const+0x38>
   2ab2c:	e5d13000 	ldrb	r3, [r1]
   2ab30:	e2800001 	add	r0, r0, #1
   2ab34:	e3530000 	cmp	r3, #0
   2ab38:	0a000009 	beq	2ab64 <CMACAddress::operator==(CMACAddress const&) const+0x48>
   2ab3c:	e3a02006 	mov	r2, #6
   2ab40:	e2811001 	add	r1, r1, #1
   2ab44:	ebfffce0 	bl	29ecc <memcmp>
   2ab48:	e16f0f10 	clz	r0, r0
   2ab4c:	e1a002a0 	lsr	r0, r0, #5
   2ab50:	e8bd8010 	pop	{r4, pc}
   2ab54:	e3a02029 	mov	r2, #41	; 0x29
   2ab58:	e59f1014 	ldr	r1, [pc, #20]	; 2ab74 <CMACAddress::operator==(CMACAddress const&) const+0x58>
   2ab5c:	e59f0014 	ldr	r0, [pc, #20]	; 2ab78 <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   2ab60:	ebffe6c7 	bl	24684 <assertion_failed>
   2ab64:	e3a02041 	mov	r2, #65	; 0x41
   2ab68:	e59f1004 	ldr	r1, [pc, #4]	; 2ab74 <CMACAddress::operator==(CMACAddress const&) const+0x58>
   2ab6c:	e59f0004 	ldr	r0, [pc, #4]	; 2ab78 <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   2ab70:	ebffe6c3 	bl	24684 <assertion_failed>
   2ab74:	000451a4 	.word	0x000451a4
   2ab78:	0003f208 	.word	0x0003f208

0002ab7c <CMACAddress::operator!=(CMACAddress const&) const>:
   2ab7c:	e92d4010 	push	{r4, lr}
   2ab80:	ebffffe5 	bl	2ab1c <CMACAddress::operator==(CMACAddress const&) const>
   2ab84:	e2200001 	eor	r0, r0, #1
   2ab88:	e6ef0070 	uxtb	r0, r0
   2ab8c:	e8bd8010 	pop	{r4, pc}

0002ab90 <CMACAddress::Set(unsigned char const*)>:
   2ab90:	e3510000 	cmp	r1, #0
   2ab94:	e92d4010 	push	{r4, lr}
   2ab98:	0a000006 	beq	2abb8 <CMACAddress::Set(unsigned char const*)+0x28>
   2ab9c:	e1a04000 	mov	r4, r0
   2aba0:	e3a02006 	mov	r2, #6
   2aba4:	e2800001 	add	r0, r0, #1
   2aba8:	ebfffed6 	bl	2a708 <memcpy>
   2abac:	e3a03001 	mov	r3, #1
   2abb0:	e5c43000 	strb	r3, [r4]
   2abb4:	e8bd8010 	pop	{r4, pc}
   2abb8:	e3a02034 	mov	r2, #52	; 0x34
   2abbc:	e59f1004 	ldr	r1, [pc, #4]	; 2abc8 <CMACAddress::Set(unsigned char const*)+0x38>
   2abc0:	e59f0004 	ldr	r0, [pc, #4]	; 2abcc <CMACAddress::Set(unsigned char const*)+0x3c>
   2abc4:	ebffe6ae 	bl	24684 <assertion_failed>
   2abc8:	000451a4 	.word	0x000451a4
   2abcc:	00043e08 	.word	0x00043e08

0002abd0 <CMACAddress::CMACAddress(unsigned char const*)>:
   2abd0:	e92d4010 	push	{r4, lr}
   2abd4:	e1a04000 	mov	r4, r0
   2abd8:	ebffffec 	bl	2ab90 <CMACAddress::Set(unsigned char const*)>
   2abdc:	e1a00004 	mov	r0, r4
   2abe0:	e8bd8010 	pop	{r4, pc}

0002abe4 <CMACAddress::SetBroadcast()>:
   2abe4:	e92d4010 	push	{r4, lr}
   2abe8:	e3a02006 	mov	r2, #6
   2abec:	e1a04000 	mov	r4, r0
   2abf0:	e3a010ff 	mov	r1, #255	; 0xff
   2abf4:	e2800001 	add	r0, r0, #1
   2abf8:	ebfffc79 	bl	29de4 <memset>
   2abfc:	e3a03001 	mov	r3, #1
   2ac00:	e5c43000 	strb	r3, [r4]
   2ac04:	e8bd8010 	pop	{r4, pc}

0002ac08 <CMACAddress::Get() const>:
   2ac08:	e5d03000 	ldrb	r3, [r0]
   2ac0c:	e3530000 	cmp	r3, #0
   2ac10:	0a000001 	beq	2ac1c <CMACAddress::Get() const+0x14>
   2ac14:	e2800001 	add	r0, r0, #1
   2ac18:	e12fff1e 	bx	lr
   2ac1c:	e3a02041 	mov	r2, #65	; 0x41
   2ac20:	e92d4010 	push	{r4, lr}
   2ac24:	e59f1004 	ldr	r1, [pc, #4]	; 2ac30 <CMACAddress::Get() const+0x28>
   2ac28:	e59f0004 	ldr	r0, [pc, #4]	; 2ac34 <CMACAddress::Get() const+0x2c>
   2ac2c:	ebffe694 	bl	24684 <assertion_failed>
   2ac30:	000451a4 	.word	0x000451a4
   2ac34:	0003f208 	.word	0x0003f208

0002ac38 <CMACAddress::CopyTo(unsigned char*) const>:
   2ac38:	e5d02000 	ldrb	r2, [r0]
   2ac3c:	e92d4010 	push	{r4, lr}
   2ac40:	e3520000 	cmp	r2, #0
   2ac44:	0a000007 	beq	2ac68 <CMACAddress::CopyTo(unsigned char*) const+0x30>
   2ac48:	e3510000 	cmp	r1, #0
   2ac4c:	e1a03000 	mov	r3, r0
   2ac50:	e1a00001 	mov	r0, r1
   2ac54:	0a000007 	beq	2ac78 <CMACAddress::CopyTo(unsigned char*) const+0x40>
   2ac58:	e8bd4010 	pop	{r4, lr}
   2ac5c:	e3a02006 	mov	r2, #6
   2ac60:	e2831001 	add	r1, r3, #1
   2ac64:	eafffea7 	b	2a708 <memcpy>
   2ac68:	e3a02047 	mov	r2, #71	; 0x47
   2ac6c:	e59f1014 	ldr	r1, [pc, #20]	; 2ac88 <CMACAddress::CopyTo(unsigned char*) const+0x50>
   2ac70:	e59f0014 	ldr	r0, [pc, #20]	; 2ac8c <CMACAddress::CopyTo(unsigned char*) const+0x54>
   2ac74:	ebffe682 	bl	24684 <assertion_failed>
   2ac78:	e3a02048 	mov	r2, #72	; 0x48
   2ac7c:	e59f1004 	ldr	r1, [pc, #4]	; 2ac88 <CMACAddress::CopyTo(unsigned char*) const+0x50>
   2ac80:	e59f0008 	ldr	r0, [pc, #8]	; 2ac90 <CMACAddress::CopyTo(unsigned char*) const+0x58>
   2ac84:	ebffe67e 	bl	24684 <assertion_failed>
   2ac88:	000451a4 	.word	0x000451a4
   2ac8c:	0003f208 	.word	0x0003f208
   2ac90:	00040460 	.word	0x00040460

0002ac94 <CMACAddress::IsBroadcast() const>:
   2ac94:	e1a02000 	mov	r2, r0
   2ac98:	e5d00000 	ldrb	r0, [r0]
   2ac9c:	e3500000 	cmp	r0, #0
   2aca0:	12823001 	addne	r3, r2, #1
   2aca4:	12822007 	addne	r2, r2, #7
   2aca8:	0a000009 	beq	2acd4 <CMACAddress::IsBroadcast() const+0x40>
   2acac:	e4d31001 	ldrb	r1, [r3], #1
   2acb0:	e35100ff 	cmp	r1, #255	; 0xff
   2acb4:	1a000004 	bne	2accc <CMACAddress::IsBroadcast() const+0x38>
   2acb8:	e1530002 	cmp	r3, r2
   2acbc:	012fff1e 	bxeq	lr
   2acc0:	e4d31001 	ldrb	r1, [r3], #1
   2acc4:	e35100ff 	cmp	r1, #255	; 0xff
   2acc8:	0afffffa 	beq	2acb8 <CMACAddress::IsBroadcast() const+0x24>
   2accc:	e3a00000 	mov	r0, #0
   2acd0:	e12fff1e 	bx	lr
   2acd4:	e3a0204e 	mov	r2, #78	; 0x4e
   2acd8:	e92d4010 	push	{r4, lr}
   2acdc:	e59f1004 	ldr	r1, [pc, #4]	; 2ace8 <CMACAddress::IsBroadcast() const+0x54>
   2ace0:	e59f0004 	ldr	r0, [pc, #4]	; 2acec <CMACAddress::IsBroadcast() const+0x58>
   2ace4:	ebffe666 	bl	24684 <assertion_failed>
   2ace8:	000451a4 	.word	0x000451a4
   2acec:	0003f208 	.word	0x0003f208

0002acf0 <CMACAddress::GetSize() const>:
   2acf0:	e3a00006 	mov	r0, #6
   2acf4:	e12fff1e 	bx	lr

0002acf8 <CMACAddress::Format(CString*) const>:
   2acf8:	e92d4010 	push	{r4, lr}
   2acfc:	e5d03000 	ldrb	r3, [r0]
   2ad00:	e24dd010 	sub	sp, sp, #16
   2ad04:	e3530000 	cmp	r3, #0
   2ad08:	0a00000f 	beq	2ad4c <CMACAddress::Format(CString*) const+0x54>
   2ad0c:	e3510000 	cmp	r1, #0
   2ad10:	e1a02000 	mov	r2, r0
   2ad14:	e1a00001 	mov	r0, r1
   2ad18:	0a00000f 	beq	2ad5c <CMACAddress::Format(CString*) const+0x64>
   2ad1c:	e5d2e005 	ldrb	lr, [r2, #5]
   2ad20:	e5d2c004 	ldrb	ip, [r2, #4]
   2ad24:	e5d23003 	ldrb	r3, [r2, #3]
   2ad28:	e5d24006 	ldrb	r4, [r2, #6]
   2ad2c:	e88d5008 	stm	sp, {r3, ip, lr}
   2ad30:	e58d400c 	str	r4, [sp, #12]
   2ad34:	e5d23002 	ldrb	r3, [r2, #2]
   2ad38:	e59f102c 	ldr	r1, [pc, #44]	; 2ad6c <CMACAddress::Format(CString*) const+0x74>
   2ad3c:	e5d22001 	ldrb	r2, [r2, #1]
   2ad40:	ebfff871 	bl	28f0c <CString::Format(char const*, ...)>
   2ad44:	e28dd010 	add	sp, sp, #16
   2ad48:	e8bd8010 	pop	{r4, pc}
   2ad4c:	e3a02062 	mov	r2, #98	; 0x62
   2ad50:	e59f1018 	ldr	r1, [pc, #24]	; 2ad70 <CMACAddress::Format(CString*) const+0x78>
   2ad54:	e59f0018 	ldr	r0, [pc, #24]	; 2ad74 <CMACAddress::Format(CString*) const+0x7c>
   2ad58:	ebffe649 	bl	24684 <assertion_failed>
   2ad5c:	e3a02063 	mov	r2, #99	; 0x63
   2ad60:	e59f1008 	ldr	r1, [pc, #8]	; 2ad70 <CMACAddress::Format(CString*) const+0x78>
   2ad64:	e59f000c 	ldr	r0, [pc, #12]	; 2ad78 <CMACAddress::Format(CString*) const+0x80>
   2ad68:	ebffe645 	bl	24684 <assertion_failed>
   2ad6c:	000451b4 	.word	0x000451b4
   2ad70:	000451a4 	.word	0x000451a4
   2ad74:	0003f208 	.word	0x0003f208
   2ad78:	00043e18 	.word	0x00043e18

0002ad7c <CNetDevice::AddNetDevice()>:
   2ad7c:	e59f2018 	ldr	r2, [pc, #24]	; 2ad9c <CNetDevice::AddNetDevice()+0x20>
   2ad80:	e5923000 	ldr	r3, [r2]
   2ad84:	e3530004 	cmp	r3, #4
   2ad88:	92831001 	addls	r1, r3, #1
   2ad8c:	90823103 	addls	r3, r2, r3, lsl #2
   2ad90:	95821000 	strls	r1, [r2]
   2ad94:	95830004 	strls	r0, [r3, #4]
   2ad98:	e12fff1e 	bx	lr
   2ad9c:	0004dacc 	.word	0x0004dacc

0002ada0 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   2ada0:	e3500005 	cmp	r0, #5
   2ada4:	959f3008 	ldrls	r3, [pc, #8]	; 2adb4 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x14>
   2ada8:	97930100 	ldrls	r0, [r3, r0, lsl #2]
   2adac:	859f0004 	ldrhi	r0, [pc, #4]	; 2adb8 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x18>
   2adb0:	e12fff1e 	bx	lr
   2adb4:	00047bcc 	.word	0x00047bcc
   2adb8:	000451d4 	.word	0x000451d4

0002adbc <CNetDevice::GetNetDevice(unsigned int)>:
   2adbc:	e59f3014 	ldr	r3, [pc, #20]	; 2add8 <CNetDevice::GetNetDevice(unsigned int)+0x1c>
   2adc0:	e5932000 	ldr	r2, [r3]
   2adc4:	e1520000 	cmp	r2, r0
   2adc8:	80830100 	addhi	r0, r3, r0, lsl #2
   2adcc:	85900004 	ldrhi	r0, [r0, #4]
   2add0:	93a00000 	movls	r0, #0
   2add4:	e12fff1e 	bx	lr
   2add8:	0004dacc 	.word	0x0004dacc

0002addc <CNetDevice::GetNetDevice(TNetDeviceType)>:
   2addc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ade0:	e59f8084 	ldr	r8, [pc, #132]	; 2ae6c <CNetDevice::GetNetDevice(TNetDeviceType)+0x90>
   2ade4:	e5983000 	ldr	r3, [r8]
   2ade8:	e3530000 	cmp	r3, #0
   2adec:	0a00001b 	beq	2ae60 <CNetDevice::GetNetDevice(TNetDeviceType)+0x84>
   2adf0:	e1a06000 	mov	r6, r0
   2adf4:	e3a05000 	mov	r5, #0
   2adf8:	e59f9070 	ldr	r9, [pc, #112]	; 2ae70 <CNetDevice::GetNetDevice(TNetDeviceType)+0x94>
   2adfc:	e2887004 	add	r7, r8, #4
   2ae00:	ea000005 	b	2ae1c <CNetDevice::GetNetDevice(TNetDeviceType)+0x40>
   2ae04:	e1500006 	cmp	r0, r6
   2ae08:	e2855001 	add	r5, r5, #1
   2ae0c:	0a000011 	beq	2ae58 <CNetDevice::GetNetDevice(TNetDeviceType)+0x7c>
   2ae10:	e5983000 	ldr	r3, [r8]
   2ae14:	e1530005 	cmp	r3, r5
   2ae18:	9a000010 	bls	2ae60 <CNetDevice::GetNetDevice(TNetDeviceType)+0x84>
   2ae1c:	e4974004 	ldr	r4, [r7], #4
   2ae20:	e3540000 	cmp	r4, #0
   2ae24:	0a00000d 	beq	2ae60 <CNetDevice::GetNetDevice(TNetDeviceType)+0x84>
   2ae28:	e3560002 	cmp	r6, #2
   2ae2c:	0a000009 	beq	2ae58 <CNetDevice::GetNetDevice(TNetDeviceType)+0x7c>
   2ae30:	e5943000 	ldr	r3, [r4]
   2ae34:	e5933008 	ldr	r3, [r3, #8]
   2ae38:	e1530009 	cmp	r3, r9
   2ae3c:	03a00000 	moveq	r0, #0
   2ae40:	0affffef 	beq	2ae04 <CNetDevice::GetNetDevice(TNetDeviceType)+0x28>
   2ae44:	e1a00004 	mov	r0, r4
   2ae48:	e12fff33 	blx	r3
   2ae4c:	e1500006 	cmp	r0, r6
   2ae50:	e2855001 	add	r5, r5, #1
   2ae54:	1affffed 	bne	2ae10 <CNetDevice::GetNetDevice(TNetDeviceType)+0x34>
   2ae58:	e1a00004 	mov	r0, r4
   2ae5c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ae60:	e3a04000 	mov	r4, #0
   2ae64:	e1a00004 	mov	r0, r4
   2ae68:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ae6c:	0004dacc 	.word	0x0004dacc
   2ae70:	00016014 	.word	0x00016014

0002ae74 <operator new(unsigned int, int)>:
   2ae74:	e3d13002 	bics	r3, r1, #2
   2ae78:	e1a01000 	mov	r1, r0
   2ae7c:	0a000001 	beq	2ae88 <operator new(unsigned int, int)+0x14>
   2ae80:	e3a00000 	mov	r0, #0
   2ae84:	e12fff1e 	bx	lr
   2ae88:	e59f3008 	ldr	r3, [pc, #8]	; 2ae98 <operator new(unsigned int, int)+0x24>
   2ae8c:	e5930000 	ldr	r0, [r3]
   2ae90:	e280000c 	add	r0, r0, #12
   2ae94:	ea000035 	b	2af70 <CHeapAllocator::Allocate(unsigned int)>
   2ae98:	0004dae8 	.word	0x0004dae8

0002ae9c <operator new[](unsigned int, int)>:
   2ae9c:	eafffff4 	b	2ae74 <operator new(unsigned int, int)>

0002aea0 <operator new(unsigned int)>:
   2aea0:	e59f300c 	ldr	r3, [pc, #12]	; 2aeb4 <operator new(unsigned int)+0x14>
   2aea4:	e1a01000 	mov	r1, r0
   2aea8:	e5930000 	ldr	r0, [r3]
   2aeac:	e280000c 	add	r0, r0, #12
   2aeb0:	ea00002e 	b	2af70 <CHeapAllocator::Allocate(unsigned int)>
   2aeb4:	0004dae8 	.word	0x0004dae8

0002aeb8 <operator new[](unsigned int)>:
   2aeb8:	eafffff8 	b	2aea0 <operator new(unsigned int)>

0002aebc <operator delete(void*)>:
   2aebc:	e59f300c 	ldr	r3, [pc, #12]	; 2aed0 <operator delete(void*)+0x14>
   2aec0:	e1a01000 	mov	r1, r0
   2aec4:	e5930000 	ldr	r0, [r3]
   2aec8:	e280000c 	add	r0, r0, #12
   2aecc:	ea0000a4 	b	2b164 <CHeapAllocator::Free(void*)>
   2aed0:	0004dae8 	.word	0x0004dae8

0002aed4 <operator delete[](void*)>:
   2aed4:	eafffff8 	b	2aebc <operator delete(void*)>

0002aed8 <operator delete(void*, unsigned int)>:
   2aed8:	e59f300c 	ldr	r3, [pc, #12]	; 2aeec <operator delete(void*, unsigned int)+0x14>
   2aedc:	e1a01000 	mov	r1, r0
   2aee0:	e5930000 	ldr	r0, [r3]
   2aee4:	e280000c 	add	r0, r0, #12
   2aee8:	ea00009d 	b	2b164 <CHeapAllocator::Free(void*)>
   2aeec:	0004dae8 	.word	0x0004dae8

0002aef0 <operator delete[](void*, unsigned int)>:
   2aef0:	eafffff8 	b	2aed8 <operator delete(void*, unsigned int)>

0002aef4 <CHeapAllocator::CHeapAllocator(char const*)>:
   2aef4:	e3a03000 	mov	r3, #0
   2aef8:	e3a02001 	mov	r2, #1
   2aefc:	e92d4010 	push	{r4, lr}
   2af00:	e1a04000 	mov	r4, r0
   2af04:	e5801000 	str	r1, [r0]
   2af08:	e58020b8 	str	r2, [r0, #184]	; 0xb8
   2af0c:	e5803004 	str	r3, [r0, #4]
   2af10:	e5803008 	str	r3, [r0, #8]
   2af14:	e580300c 	str	r3, [r0, #12]
   2af18:	e1a01003 	mov	r1, r3
   2af1c:	e3a020a8 	mov	r2, #168	; 0xa8
   2af20:	e2800010 	add	r0, r0, #16
   2af24:	ebfffbae 	bl	29de4 <memset>
   2af28:	e1a03004 	mov	r3, r4
   2af2c:	e59f201c 	ldr	r2, [pc, #28]	; 2af50 <CHeapAllocator::CHeapAllocator(char const*)+0x5c>
   2af30:	e2840038 	add	r0, r4, #56	; 0x38
   2af34:	e4921004 	ldr	r1, [r2], #4
   2af38:	e2833008 	add	r3, r3, #8
   2af3c:	e5831008 	str	r1, [r3, #8]
   2af40:	e1530000 	cmp	r3, r0
   2af44:	1afffffa 	bne	2af34 <CHeapAllocator::CHeapAllocator(char const*)+0x40>
   2af48:	e1a00004 	mov	r0, r4
   2af4c:	e8bd8010 	pop	{r4, pc}
   2af50:	00047be4 	.word	0x00047be4

0002af54 <CHeapAllocator::~CHeapAllocator()>:
   2af54:	e12fff1e 	bx	lr

0002af58 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   2af58:	e0812002 	add	r2, r1, r2
   2af5c:	e980000e 	stmib	r0, {r1, r2, r3}
   2af60:	e12fff1e 	bx	lr

0002af64 <CHeapAllocator::GetFreeSpace() const>:
   2af64:	e9900005 	ldmib	r0, {r0, r2}
   2af68:	e0420000 	sub	r0, r2, r0
   2af6c:	e12fff1e 	bx	lr

0002af70 <CHeapAllocator::Allocate(unsigned int)>:
   2af70:	e5903004 	ldr	r3, [r0, #4]
   2af74:	e3530000 	cmp	r3, #0
   2af78:	0a000072 	beq	2b148 <CHeapAllocator::Allocate(unsigned int)+0x1d8>
   2af7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2af80:	e1a05000 	mov	r5, r0
   2af84:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
   2af88:	e1a04001 	mov	r4, r1
   2af8c:	e3500000 	cmp	r0, #0
   2af90:	1a000055 	bne	2b0ec <CHeapAllocator::Allocate(unsigned int)+0x17c>
   2af94:	e5953010 	ldr	r3, [r5, #16]
   2af98:	e3530000 	cmp	r3, #0
   2af9c:	0a00002b 	beq	2b050 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   2afa0:	e2852010 	add	r2, r5, #16
   2afa4:	ea000002 	b	2afb4 <CHeapAllocator::Allocate(unsigned int)+0x44>
   2afa8:	e5b23008 	ldr	r3, [r2, #8]!
   2afac:	e3530000 	cmp	r3, #0
   2afb0:	0a000026 	beq	2b050 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   2afb4:	e1540003 	cmp	r4, r3
   2afb8:	8afffffa 	bhi	2afa8 <CHeapAllocator::Allocate(unsigned int)+0x38>
   2afbc:	e5926004 	ldr	r6, [r2, #4]
   2afc0:	e3560000 	cmp	r6, #0
   2afc4:	01a04003 	moveq	r4, r3
   2afc8:	0a000020 	beq	2b050 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   2afcc:	e5d60001 	ldrb	r0, [r6, #1]
   2afd0:	e5d63000 	ldrb	r3, [r6]
   2afd4:	e5d61002 	ldrb	r1, [r6, #2]
   2afd8:	e1833400 	orr	r3, r3, r0, lsl #8
   2afdc:	e5d60003 	ldrb	r0, [r6, #3]
   2afe0:	e1833801 	orr	r3, r3, r1, lsl #16
   2afe4:	e59f1164 	ldr	r1, [pc, #356]	; 2b150 <CHeapAllocator::Allocate(unsigned int)+0x1e0>
   2afe8:	e1833c00 	orr	r3, r3, r0, lsl #24
   2afec:	e1530001 	cmp	r3, r1
   2aff0:	1a000050 	bne	2b138 <CHeapAllocator::Allocate(unsigned int)+0x1c8>
   2aff4:	e5d61009 	ldrb	r1, [r6, #9]
   2aff8:	e5d63008 	ldrb	r3, [r6, #8]
   2affc:	e5d6000a 	ldrb	r0, [r6, #10]
   2b000:	e1833401 	orr	r3, r3, r1, lsl #8
   2b004:	e5d6100b 	ldrb	r1, [r6, #11]
   2b008:	e1833800 	orr	r3, r3, r0, lsl #16
   2b00c:	e1833c01 	orr	r3, r3, r1, lsl #24
   2b010:	e5823004 	str	r3, [r2, #4]
   2b014:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   2b018:	e3530000 	cmp	r3, #0
   2b01c:	1a000030 	bne	2b0e4 <CHeapAllocator::Allocate(unsigned int)+0x174>
   2b020:	e3a03000 	mov	r3, #0
   2b024:	e316000f 	tst	r6, #15
   2b028:	e5c63008 	strb	r3, [r6, #8]
   2b02c:	e5c63009 	strb	r3, [r6, #9]
   2b030:	e5c6300a 	strb	r3, [r6, #10]
   2b034:	e5c6300b 	strb	r3, [r6, #11]
   2b038:	e2860010 	add	r0, r6, #16
   2b03c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2b040:	e3a0208e 	mov	r2, #142	; 0x8e
   2b044:	e59f1108 	ldr	r1, [pc, #264]	; 2b154 <CHeapAllocator::Allocate(unsigned int)+0x1e4>
   2b048:	e59f0108 	ldr	r0, [pc, #264]	; 2b158 <CHeapAllocator::Allocate(unsigned int)+0x1e8>
   2b04c:	ebffe58c 	bl	24684 <assertion_failed>
   2b050:	e5956004 	ldr	r6, [r5, #4]
   2b054:	e284301f 	add	r3, r4, #31
   2b058:	e3c3300f 	bic	r3, r3, #15
   2b05c:	e0863003 	add	r3, r6, r3
   2b060:	e1560003 	cmp	r6, r3
   2b064:	e595700c 	ldr	r7, [r5, #12]
   2b068:	3a000006 	bcc	2b088 <CHeapAllocator::Allocate(unsigned int)+0x118>
   2b06c:	e3570000 	cmp	r7, #0
   2b070:	1a00001f 	bne	2b0f4 <CHeapAllocator::Allocate(unsigned int)+0x184>
   2b074:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   2b078:	e3530000 	cmp	r3, #0
   2b07c:	1a000028 	bne	2b124 <CHeapAllocator::Allocate(unsigned int)+0x1b4>
   2b080:	e3a00000 	mov	r0, #0
   2b084:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b088:	e5952008 	ldr	r2, [r5, #8]
   2b08c:	e0422007 	sub	r2, r2, r7
   2b090:	e1530002 	cmp	r3, r2
   2b094:	8afffff4 	bhi	2b06c <CHeapAllocator::Allocate(unsigned int)+0xfc>
   2b098:	e3a0204d 	mov	r2, #77	; 0x4d
   2b09c:	e3a0c043 	mov	ip, #67	; 0x43
   2b0a0:	e3a0004c 	mov	r0, #76	; 0x4c
   2b0a4:	e3a01042 	mov	r1, #66	; 0x42
   2b0a8:	e5853004 	str	r3, [r5, #4]
   2b0ac:	e1a03824 	lsr	r3, r4, #16
   2b0b0:	e5c64004 	strb	r4, [r6, #4]
   2b0b4:	e5c62001 	strb	r2, [r6, #1]
   2b0b8:	e1a02424 	lsr	r2, r4, #8
   2b0bc:	e1a04c24 	lsr	r4, r4, #24
   2b0c0:	e5c6c000 	strb	ip, [r6]
   2b0c4:	e5c60002 	strb	r0, [r6, #2]
   2b0c8:	e5c61003 	strb	r1, [r6, #3]
   2b0cc:	e5c62005 	strb	r2, [r6, #5]
   2b0d0:	e5c63006 	strb	r3, [r6, #6]
   2b0d4:	e5c64007 	strb	r4, [r6, #7]
   2b0d8:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   2b0dc:	e3530000 	cmp	r3, #0
   2b0e0:	0affffce 	beq	2b020 <CHeapAllocator::Allocate(unsigned int)+0xb0>
   2b0e4:	eb0002c4 	bl	2bbfc <LeaveCritical>
   2b0e8:	eaffffcc 	b	2b020 <CHeapAllocator::Allocate(unsigned int)+0xb0>
   2b0ec:	eb000298 	bl	2bb54 <EnterCritical>
   2b0f0:	eaffffa7 	b	2af94 <CHeapAllocator::Allocate(unsigned int)+0x24>
   2b0f4:	e3a02000 	mov	r2, #0
   2b0f8:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   2b0fc:	e585200c 	str	r2, [r5, #12]
   2b100:	e1530002 	cmp	r3, r2
   2b104:	1a000009 	bne	2b130 <CHeapAllocator::Allocate(unsigned int)+0x1c0>
   2b108:	ebffee45 	bl	26a24 <CLogger::Get()>
   2b10c:	e3a02000 	mov	r2, #0
   2b110:	e5951000 	ldr	r1, [r5]
   2b114:	e59f3040 	ldr	r3, [pc, #64]	; 2b15c <CHeapAllocator::Allocate(unsigned int)+0x1ec>
   2b118:	ebffed83 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b11c:	e3a00000 	mov	r0, #0
   2b120:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b124:	eb0002b4 	bl	2bbfc <LeaveCritical>
   2b128:	e1a00007 	mov	r0, r7
   2b12c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b130:	eb0002b1 	bl	2bbfc <LeaveCritical>
   2b134:	eafffff3 	b	2b108 <CHeapAllocator::Allocate(unsigned int)+0x198>
   2b138:	e3a0205e 	mov	r2, #94	; 0x5e
   2b13c:	e59f1010 	ldr	r1, [pc, #16]	; 2b154 <CHeapAllocator::Allocate(unsigned int)+0x1e4>
   2b140:	e59f0018 	ldr	r0, [pc, #24]	; 2b160 <CHeapAllocator::Allocate(unsigned int)+0x1f0>
   2b144:	ebffe54e 	bl	24684 <assertion_failed>
   2b148:	e3a00000 	mov	r0, #0
   2b14c:	e12fff1e 	bx	lr
   2b150:	424c4d43 	.word	0x424c4d43
   2b154:	0004526c 	.word	0x0004526c
   2b158:	000452bc 	.word	0x000452bc
   2b15c:	000452ac 	.word	0x000452ac
   2b160:	00045280 	.word	0x00045280

0002b164 <CHeapAllocator::Free(void*)>:
   2b164:	e3510000 	cmp	r1, #0
   2b168:	012fff1e 	bxeq	lr
   2b16c:	e92d4070 	push	{r4, r5, r6, lr}
   2b170:	e1a06000 	mov	r6, r0
   2b174:	e5513010 	ldrb	r3, [r1, #-16]
   2b178:	e551000f 	ldrb	r0, [r1, #-15]
   2b17c:	e551200e 	ldrb	r2, [r1, #-14]
   2b180:	e1833400 	orr	r3, r3, r0, lsl #8
   2b184:	e551000d 	ldrb	r0, [r1, #-13]
   2b188:	e1833802 	orr	r3, r3, r2, lsl #16
   2b18c:	e59f20d0 	ldr	r2, [pc, #208]	; 2b264 <CHeapAllocator::Free(void*)+0x100>
   2b190:	e1833c00 	orr	r3, r3, r0, lsl #24
   2b194:	e1530002 	cmp	r3, r2
   2b198:	e2415010 	sub	r5, r1, #16
   2b19c:	1a00002c 	bne	2b254 <CHeapAllocator::Free(void*)+0xf0>
   2b1a0:	e5963010 	ldr	r3, [r6, #16]
   2b1a4:	e3530000 	cmp	r3, #0
   2b1a8:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b1ac:	e5d51005 	ldrb	r1, [r5, #5]
   2b1b0:	e5d52004 	ldrb	r2, [r5, #4]
   2b1b4:	e5d50006 	ldrb	r0, [r5, #6]
   2b1b8:	e1822401 	orr	r2, r2, r1, lsl #8
   2b1bc:	e5d51007 	ldrb	r1, [r5, #7]
   2b1c0:	e1822800 	orr	r2, r2, r0, lsl #16
   2b1c4:	e1822c01 	orr	r2, r2, r1, lsl #24
   2b1c8:	e2864010 	add	r4, r6, #16
   2b1cc:	ea000002 	b	2b1dc <CHeapAllocator::Free(void*)+0x78>
   2b1d0:	e5b43008 	ldr	r3, [r4, #8]!
   2b1d4:	e3530000 	cmp	r3, #0
   2b1d8:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b1dc:	e1530002 	cmp	r3, r2
   2b1e0:	1afffffa 	bne	2b1d0 <CHeapAllocator::Free(void*)+0x6c>
   2b1e4:	e59600b8 	ldr	r0, [r6, #184]	; 0xb8
   2b1e8:	e3500000 	cmp	r0, #0
   2b1ec:	1a000009 	bne	2b218 <CHeapAllocator::Free(void*)+0xb4>
   2b1f0:	e5943004 	ldr	r3, [r4, #4]
   2b1f4:	e1a00423 	lsr	r0, r3, #8
   2b1f8:	e1a01823 	lsr	r1, r3, #16
   2b1fc:	e1a02c23 	lsr	r2, r3, #24
   2b200:	e5c53008 	strb	r3, [r5, #8]
   2b204:	e5c50009 	strb	r0, [r5, #9]
   2b208:	e5c5100a 	strb	r1, [r5, #10]
   2b20c:	e5c5200b 	strb	r2, [r5, #11]
   2b210:	e5845004 	str	r5, [r4, #4]
   2b214:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b218:	eb00024d 	bl	2bb54 <EnterCritical>
   2b21c:	e5943004 	ldr	r3, [r4, #4]
   2b220:	e59620b8 	ldr	r2, [r6, #184]	; 0xb8
   2b224:	e1a00423 	lsr	r0, r3, #8
   2b228:	e3520000 	cmp	r2, #0
   2b22c:	e1a01823 	lsr	r1, r3, #16
   2b230:	e1a02c23 	lsr	r2, r3, #24
   2b234:	e5c53008 	strb	r3, [r5, #8]
   2b238:	e5c50009 	strb	r0, [r5, #9]
   2b23c:	e5c5100a 	strb	r1, [r5, #10]
   2b240:	e5c5200b 	strb	r2, [r5, #11]
   2b244:	e5845004 	str	r5, [r4, #4]
   2b248:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b24c:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b250:	ea000269 	b	2bbfc <LeaveCritical>
   2b254:	e3a020bf 	mov	r2, #191	; 0xbf
   2b258:	e59f1008 	ldr	r1, [pc, #8]	; 2b268 <CHeapAllocator::Free(void*)+0x104>
   2b25c:	e59f0008 	ldr	r0, [pc, #8]	; 2b26c <CHeapAllocator::Free(void*)+0x108>
   2b260:	ebffe507 	bl	24684 <assertion_failed>
   2b264:	424c4d43 	.word	0x424c4d43
   2b268:	0004526c 	.word	0x0004526c
   2b26c:	00045280 	.word	0x00045280

0002b270 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   2b270:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b274:	e2514000 	subs	r4, r1, #0
   2b278:	e24dd00c 	sub	sp, sp, #12
   2b27c:	0a00002d 	beq	2b338 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xc8>
   2b280:	e3520000 	cmp	r2, #0
   2b284:	0a00002f 	beq	2b348 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xd8>
   2b288:	e554c00f 	ldrb	ip, [r4, #-15]
   2b28c:	e5543010 	ldrb	r3, [r4, #-16]
   2b290:	e554100e 	ldrb	r1, [r4, #-14]
   2b294:	e183340c 	orr	r3, r3, ip, lsl #8
   2b298:	e554c00d 	ldrb	ip, [r4, #-13]
   2b29c:	e1833801 	orr	r3, r3, r1, lsl #16
   2b2a0:	e59f10c4 	ldr	r1, [pc, #196]	; 2b36c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xfc>
   2b2a4:	e1833c0c 	orr	r3, r3, ip, lsl #24
   2b2a8:	e1530001 	cmp	r3, r1
   2b2ac:	e2446010 	sub	r6, r4, #16
   2b2b0:	1a000029 	bne	2b35c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xec>
   2b2b4:	e5d61005 	ldrb	r1, [r6, #5]
   2b2b8:	e5d63004 	ldrb	r3, [r6, #4]
   2b2bc:	e5d6c006 	ldrb	ip, [r6, #6]
   2b2c0:	e1833401 	orr	r3, r3, r1, lsl #8
   2b2c4:	e5d61007 	ldrb	r1, [r6, #7]
   2b2c8:	e183380c 	orr	r3, r3, ip, lsl #16
   2b2cc:	e1833c01 	orr	r3, r3, r1, lsl #24
   2b2d0:	e1530002 	cmp	r3, r2
   2b2d4:	21a07004 	movcs	r7, r4
   2b2d8:	3a000002 	bcc	2b2e8 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x78>
   2b2dc:	e1a00007 	mov	r0, r7
   2b2e0:	e28dd00c 	add	sp, sp, #12
   2b2e4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b2e8:	e1a01002 	mov	r1, r2
   2b2ec:	e1a05000 	mov	r5, r0
   2b2f0:	ebffff1e 	bl	2af70 <CHeapAllocator::Allocate(unsigned int)>
   2b2f4:	e2507000 	subs	r7, r0, #0
   2b2f8:	0afffff7 	beq	2b2dc <CHeapAllocator::ReAllocate(void*, unsigned int)+0x6c>
   2b2fc:	e5d62005 	ldrb	r2, [r6, #5]
   2b300:	e5d63004 	ldrb	r3, [r6, #4]
   2b304:	e5d61006 	ldrb	r1, [r6, #6]
   2b308:	e1833402 	orr	r3, r3, r2, lsl #8
   2b30c:	e5d62007 	ldrb	r2, [r6, #7]
   2b310:	e1833801 	orr	r3, r3, r1, lsl #16
   2b314:	e1832c02 	orr	r2, r3, r2, lsl #24
   2b318:	e1a01004 	mov	r1, r4
   2b31c:	ebfffcf9 	bl	2a708 <memcpy>
   2b320:	e1a00005 	mov	r0, r5
   2b324:	e1a01004 	mov	r1, r4
   2b328:	ebffff8d 	bl	2b164 <CHeapAllocator::Free(void*)>
   2b32c:	e1a00007 	mov	r0, r7
   2b330:	e28dd00c 	add	sp, sp, #12
   2b334:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b338:	e1a01002 	mov	r1, r2
   2b33c:	e28dd00c 	add	sp, sp, #12
   2b340:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   2b344:	eaffff09 	b	2af70 <CHeapAllocator::Allocate(unsigned int)>
   2b348:	e58d2004 	str	r2, [sp, #4]
   2b34c:	ebffff84 	bl	2b164 <CHeapAllocator::Free(void*)>
   2b350:	e59d2004 	ldr	r2, [sp, #4]
   2b354:	e1a07002 	mov	r7, r2
   2b358:	eaffffdf 	b	2b2dc <CHeapAllocator::ReAllocate(void*, unsigned int)+0x6c>
   2b35c:	e3a020a3 	mov	r2, #163	; 0xa3
   2b360:	e59f1008 	ldr	r1, [pc, #8]	; 2b370 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x100>
   2b364:	e59f0008 	ldr	r0, [pc, #8]	; 2b374 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x104>
   2b368:	ebffe4c5 	bl	24684 <assertion_failed>
   2b36c:	424c4d43 	.word	0x424c4d43
   2b370:	0004526c 	.word	0x0004526c
   2b374:	00045280 	.word	0x00045280

0002b378 <CExceptionHandler::Get() [clone .part.0]>:
   2b378:	e3a02087 	mov	r2, #135	; 0x87
   2b37c:	e92d4010 	push	{r4, lr}
   2b380:	e59f1004 	ldr	r1, [pc, #4]	; 2b38c <CExceptionHandler::Get() [clone .part.0]+0x14>
   2b384:	e59f0004 	ldr	r0, [pc, #4]	; 2b390 <CExceptionHandler::Get() [clone .part.0]+0x18>
   2b388:	ebffe4bd 	bl	24684 <assertion_failed>
   2b38c:	000452e8 	.word	0x000452e8
   2b390:	00043274 	.word	0x00043274

0002b394 <CExceptionHandler::CExceptionHandler()>:
   2b394:	e59fc074 	ldr	ip, [pc, #116]	; 2b410 <CExceptionHandler::CExceptionHandler()+0x7c>
   2b398:	e92d4010 	push	{r4, lr}
   2b39c:	e1a04000 	mov	r4, r0
   2b3a0:	e59c0000 	ldr	r0, [ip]
   2b3a4:	e3500000 	cmp	r0, #0
   2b3a8:	1a000014 	bne	2b400 <CExceptionHandler::CExceptionHandler()+0x6c>
   2b3ac:	e59f1060 	ldr	r1, [pc, #96]	; 2b414 <CExceptionHandler::CExceptionHandler()+0x80>
   2b3b0:	e59f2060 	ldr	r2, [pc, #96]	; 2b418 <CExceptionHandler::CExceptionHandler()+0x84>
   2b3b4:	e59f3060 	ldr	r3, [pc, #96]	; 2b41c <CExceptionHandler::CExceptionHandler()+0x88>
   2b3b8:	e2411004 	sub	r1, r1, #4
   2b3bc:	e242200c 	sub	r2, r2, #12
   2b3c0:	e2433010 	sub	r3, r3, #16
   2b3c4:	e1a01141 	asr	r1, r1, #2
   2b3c8:	e1a02142 	asr	r2, r2, #2
   2b3cc:	e1a03143 	asr	r3, r3, #2
   2b3d0:	e2411002 	sub	r1, r1, #2
   2b3d4:	e2422002 	sub	r2, r2, #2
   2b3d8:	e2433002 	sub	r3, r3, #2
   2b3dc:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   2b3e0:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   2b3e4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2b3e8:	e58c4000 	str	r4, [ip]
   2b3ec:	e1c020fc 	strd	r2, [r0, #12]
   2b3f0:	e5801004 	str	r1, [r0, #4]
   2b3f4:	eb000225 	bl	2bc90 <SyncDataAndInstructionCache>
   2b3f8:	e1a00004 	mov	r0, r4
   2b3fc:	e8bd8010 	pop	{r4, pc}
   2b400:	e3a02030 	mov	r2, #48	; 0x30
   2b404:	e59f1014 	ldr	r1, [pc, #20]	; 2b420 <CExceptionHandler::CExceptionHandler()+0x8c>
   2b408:	e59f0014 	ldr	r0, [pc, #20]	; 2b424 <CExceptionHandler::CExceptionHandler()+0x90>
   2b40c:	ebffe49c 	bl	24684 <assertion_failed>
   2b410:	0004dae4 	.word	0x0004dae4
   2b414:	0002b6e8 	.word	0x0002b6e8
   2b418:	0002b648 	.word	0x0002b648
   2b41c:	0002b698 	.word	0x0002b698
   2b420:	000452e8 	.word	0x000452e8
   2b424:	0004323c 	.word	0x0004323c

0002b428 <CExceptionHandler::~CExceptionHandler()>:
   2b428:	e3a02000 	mov	r2, #0
   2b42c:	e59f3004 	ldr	r3, [pc, #4]	; 2b438 <CExceptionHandler::~CExceptionHandler()+0x10>
   2b430:	e5832000 	str	r2, [r3]
   2b434:	e12fff1e 	bx	lr
   2b438:	0004dae4 	.word	0x0004dae4

0002b43c <CExceptionHandler::Throw(unsigned int)>:
   2b43c:	e92d4010 	push	{r4, lr}
   2b440:	e1a04001 	mov	r4, r1
   2b444:	e24dd008 	sub	sp, sp, #8
   2b448:	ebffed75 	bl	26a24 <CLogger::Get()>
   2b44c:	e59f201c 	ldr	r2, [pc, #28]	; 2b470 <CExceptionHandler::Throw(unsigned int)+0x34>
   2b450:	e59f301c 	ldr	r3, [pc, #28]	; 2b474 <CExceptionHandler::Throw(unsigned int)+0x38>
   2b454:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   2b458:	e3a02000 	mov	r2, #0
   2b45c:	e58d1000 	str	r1, [sp]
   2b460:	e59f1010 	ldr	r1, [pc, #16]	; 2b478 <CExceptionHandler::Throw(unsigned int)+0x3c>
   2b464:	ebffecb0 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b468:	e28dd008 	add	sp, sp, #8
   2b46c:	e8bd8010 	pop	{r4, pc}
   2b470:	00047c00 	.word	0x00047c00
   2b474:	00045300 	.word	0x00045300
   2b478:	00045398 	.word	0x00045398

0002b47c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   2b47c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2b480:	e3510002 	cmp	r1, #2
   2b484:	e1a06001 	mov	r6, r1
   2b488:	e1a04002 	mov	r4, r2
   2b48c:	e24dd024 	sub	sp, sp, #36	; 0x24
   2b490:	0a000026 	beq	2b530 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb4>
   2b494:	e3510003 	cmp	r1, #3
   2b498:	13a07000 	movne	r7, #0
   2b49c:	11a09007 	movne	r9, r7
   2b4a0:	1a000001 	bne	2b4ac <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   2b4a4:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   2b4a8:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   2b4ac:	e3540000 	cmp	r4, #0
   2b4b0:	0a000024 	beq	2b548 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xcc>
   2b4b4:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   2b4b8:	e5948048 	ldr	r8, [r4, #72]	; 0x48
   2b4bc:	e203301f 	and	r3, r3, #31
   2b4c0:	e3530011 	cmp	r3, #17
   2b4c4:	e5945044 	ldr	r5, [r4, #68]	; 0x44
   2b4c8:	0a00001b 	beq	2b53c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc0>
   2b4cc:	e3530012 	cmp	r3, #18
   2b4d0:	0a000014 	beq	2b528 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
   2b4d4:	e1a00005 	mov	r0, r5
   2b4d8:	e59f1078 	ldr	r1, [pc, #120]	; 2b558 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2b4dc:	ebffe61d 	bl	24d58 <debug_stacktrace(unsigned int const*, char const*)>
   2b4e0:	ebffed4f 	bl	26a24 <CLogger::Get()>
   2b4e4:	e59f3070 	ldr	r3, [pc, #112]	; 2b55c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   2b4e8:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   2b4ec:	e7931106 	ldr	r1, [r3, r6, lsl #2]
   2b4f0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   2b4f4:	e58d1000 	str	r1, [sp]
   2b4f8:	e58d2018 	str	r2, [sp, #24]
   2b4fc:	e58d3004 	str	r3, [sp, #4]
   2b500:	e3a02000 	mov	r2, #0
   2b504:	e59f3054 	ldr	r3, [pc, #84]	; 2b560 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   2b508:	e59f1048 	ldr	r1, [pc, #72]	; 2b558 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2b50c:	e58d8014 	str	r8, [sp, #20]
   2b510:	e58d5010 	str	r5, [sp, #16]
   2b514:	e58d700c 	str	r7, [sp, #12]
   2b518:	e58d9008 	str	r9, [sp, #8]
   2b51c:	ebffec82 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b520:	e28dd024 	add	sp, sp, #36	; 0x24
   2b524:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2b528:	e8940120 	ldm	r4, {r5, r8}
   2b52c:	eaffffe8 	b	2b4d4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x58>
   2b530:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   2b534:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   2b538:	eaffffdb 	b	2b4ac <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   2b53c:	e594800c 	ldr	r8, [r4, #12]
   2b540:	e5945008 	ldr	r5, [r4, #8]
   2b544:	eaffffe2 	b	2b4d4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x58>
   2b548:	e3a02069 	mov	r2, #105	; 0x69
   2b54c:	e59f1010 	ldr	r1, [pc, #16]	; 2b564 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   2b550:	e59f0010 	ldr	r0, [pc, #16]	; 2b568 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   2b554:	ebffe44a 	bl	24684 <assertion_failed>
   2b558:	00045398 	.word	0x00045398
   2b55c:	00047c00 	.word	0x00047c00
   2b560:	00045310 	.word	0x00045310
   2b564:	000452e8 	.word	0x000452e8
   2b568:	000434f4 	.word	0x000434f4

0002b56c <CExceptionHandler::Get()>:
   2b56c:	e59f3010 	ldr	r3, [pc, #16]	; 2b584 <CExceptionHandler::Get()+0x18>
   2b570:	e5930000 	ldr	r0, [r3]
   2b574:	e3500000 	cmp	r0, #0
   2b578:	112fff1e 	bxne	lr
   2b57c:	e92d4010 	push	{r4, lr}
   2b580:	ebffff7c 	bl	2b378 <CExceptionHandler::Get() [clone .part.0]>
   2b584:	0004dae4 	.word	0x0004dae4

0002b588 <ExceptionHandler>:
   2b588:	e92d4070 	push	{r4, r5, r6, lr}
   2b58c:	e3a03000 	mov	r3, #0
   2b590:	e1a04000 	mov	r4, r0
   2b594:	e1a05001 	mov	r5, r1
   2b598:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b59c:	eb0002c9 	bl	2c0c8 <CInterruptSystem::DisableFIQ()>
   2b5a0:	f1080040 	cpsie	f
   2b5a4:	e59f301c 	ldr	r3, [pc, #28]	; 2b5c8 <ExceptionHandler+0x40>
   2b5a8:	e5930000 	ldr	r0, [r3]
   2b5ac:	e3500000 	cmp	r0, #0
   2b5b0:	0a000003 	beq	2b5c4 <ExceptionHandler+0x3c>
   2b5b4:	e1a02005 	mov	r2, r5
   2b5b8:	e1a01004 	mov	r1, r4
   2b5bc:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b5c0:	eaffffad 	b	2b47c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   2b5c4:	ebffff6b 	bl	2b378 <CExceptionHandler::Get() [clone .part.0]>
   2b5c8:	0004dae4 	.word	0x0004dae4

0002b5cc <raise>:
   2b5cc:	e59f3020 	ldr	r3, [pc, #32]	; 2b5f4 <raise+0x28>
   2b5d0:	e92d4010 	push	{r4, lr}
   2b5d4:	e5930000 	ldr	r0, [r3]
   2b5d8:	e3500000 	cmp	r0, #0
   2b5dc:	0a000003 	beq	2b5f0 <raise+0x24>
   2b5e0:	e3a01004 	mov	r1, #4
   2b5e4:	ebffff94 	bl	2b43c <CExceptionHandler::Throw(unsigned int)>
   2b5e8:	e3a00000 	mov	r0, #0
   2b5ec:	e8bd8010 	pop	{r4, pc}
   2b5f0:	ebffff60 	bl	2b378 <CExceptionHandler::Get() [clone .part.0]>
   2b5f4:	0004dae4 	.word	0x0004dae4

0002b5f8 <UndefinedInstructionInternal>:
   2b5f8:	e24dd004 	sub	sp, sp, #4
   2b5fc:	e24ee004 	sub	lr, lr, #4
   2b600:	e92d4000 	stmfd	sp!, {lr}
   2b604:	e14fe000 	mrs	lr, SPSR
   2b608:	e92d4000 	stmfd	sp!, {lr}
   2b60c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b610:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b614:	e1a0100d 	mov	r1, sp
   2b618:	f1020012 	cps	#18
   2b61c:	e1a0200d 	mov	r2, sp
   2b620:	e1a0300e 	mov	r3, lr
   2b624:	f1020011 	cps	#17
   2b628:	e1a0400d 	mov	r4, sp
   2b62c:	e1a0500e 	mov	r5, lr
   2b630:	f102001f 	cps	#31
   2b634:	e1a0d001 	mov	sp, r1
   2b638:	e92d003c 	push	{r2, r3, r4, r5}
   2b63c:	e1a0100d 	mov	r1, sp
   2b640:	e3a00001 	mov	r0, #1
   2b644:	eaffffcf 	b	2b588 <ExceptionHandler>

0002b648 <PrefetchAbortStub>:
   2b648:	e24dd004 	sub	sp, sp, #4
   2b64c:	e24ee004 	sub	lr, lr, #4
   2b650:	e92d4000 	stmfd	sp!, {lr}
   2b654:	e14fe000 	mrs	lr, SPSR
   2b658:	e92d4000 	stmfd	sp!, {lr}
   2b65c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b660:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b664:	e1a0100d 	mov	r1, sp
   2b668:	f1020012 	cps	#18
   2b66c:	e1a0200d 	mov	r2, sp
   2b670:	e1a0300e 	mov	r3, lr
   2b674:	f1020011 	cps	#17
   2b678:	e1a0400d 	mov	r4, sp
   2b67c:	e1a0500e 	mov	r5, lr
   2b680:	f102001f 	cps	#31
   2b684:	e1a0d001 	mov	sp, r1
   2b688:	e92d003c 	push	{r2, r3, r4, r5}
   2b68c:	e1a0100d 	mov	r1, sp
   2b690:	e3a00002 	mov	r0, #2
   2b694:	eaffffbb 	b	2b588 <ExceptionHandler>

0002b698 <DataAbortStub>:
   2b698:	e24dd004 	sub	sp, sp, #4
   2b69c:	e24ee008 	sub	lr, lr, #8
   2b6a0:	e92d4000 	stmfd	sp!, {lr}
   2b6a4:	e14fe000 	mrs	lr, SPSR
   2b6a8:	e92d4000 	stmfd	sp!, {lr}
   2b6ac:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b6b0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b6b4:	e1a0100d 	mov	r1, sp
   2b6b8:	f1020012 	cps	#18
   2b6bc:	e1a0200d 	mov	r2, sp
   2b6c0:	e1a0300e 	mov	r3, lr
   2b6c4:	f1020011 	cps	#17
   2b6c8:	e1a0400d 	mov	r4, sp
   2b6cc:	e1a0500e 	mov	r5, lr
   2b6d0:	f102001f 	cps	#31
   2b6d4:	e1a0d001 	mov	sp, r1
   2b6d8:	e92d003c 	push	{r2, r3, r4, r5}
   2b6dc:	e1a0100d 	mov	r1, sp
   2b6e0:	e3a00003 	mov	r0, #3
   2b6e4:	eaffffa7 	b	2b588 <ExceptionHandler>

0002b6e8 <UndefinedInstructionStub>:
   2b6e8:	e92d4001 	push	{r0, lr}
   2b6ec:	eef80a10 	vmrs	r0, fpexc
   2b6f0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   2b6f4:	0affffbf 	beq	2b5f8 <UndefinedInstructionInternal>
   2b6f8:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   2b6fc:	eee80a10 	vmsr	fpexc, r0
   2b700:	e8fd8001 	ldm	sp!, {r0, pc}^

0002b704 <IRQStub>:
   2b704:	e24ee004 	sub	lr, lr, #4
   2b708:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2b70c:	e59f0060 	ldr	r0, [pc, #96]	; 2b774 <FIQStub+0x58>
   2b710:	e580e000 	str	lr, [r0]
   2b714:	eb0002c4 	bl	2c22c <InterruptHandler>
   2b718:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

0002b71c <FIQStub>:
   2b71c:	e24ee004 	sub	lr, lr, #4
   2b720:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2b724:	e3a03000 	mov	r3, #0
   2b728:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b72c:	e59f2044 	ldr	r2, [pc, #68]	; 2b778 <FIQStub+0x5c>
   2b730:	e5921000 	ldr	r1, [r2]
   2b734:	e3510000 	cmp	r1, #0
   2b738:	0a000004 	beq	2b750 <FIQStub+0x34>
   2b73c:	e5920004 	ldr	r0, [r2, #4]
   2b740:	e12fff31 	blx	r1
   2b744:	e3a03000 	mov	r3, #0
   2b748:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b74c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2b750:	e3a03000 	mov	r3, #0
   2b754:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b758:	e59f101c 	ldr	r1, [pc, #28]	; 2b77c <FIQStub+0x60>
   2b75c:	e3a00000 	mov	r0, #0
   2b760:	e5810000 	str	r0, [r1]
   2b764:	e3a03000 	mov	r3, #0
   2b768:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b76c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b770:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2b774:	00047c20 	.word	0x00047c20
   2b778:	00047c14 	.word	0x00047c14
   2b77c:	2000b20c 	.word	0x2000b20c

0002b780 <CMemorySystem::CMemorySystem(bool)>:
   2b780:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b784:	e1a04000 	mov	r4, r0
   2b788:	e3a05000 	mov	r5, #0
   2b78c:	e280700c 	add	r7, r0, #12
   2b790:	e5c01000 	strb	r1, [r0]
   2b794:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   2b798:	e59f1110 	ldr	r1, [pc, #272]	; 2b8b0 <CMemorySystem::CMemorySystem(bool)+0x130>
   2b79c:	e5845004 	str	r5, [r4, #4]
   2b7a0:	e5845008 	str	r5, [r4, #8]
   2b7a4:	e1a00007 	mov	r0, r7
   2b7a8:	e28460c8 	add	r6, r4, #200	; 0xc8
   2b7ac:	ebfffdd0 	bl	2aef4 <CHeapAllocator::CHeapAllocator(char const*)>
   2b7b0:	e1a00006 	mov	r0, r6
   2b7b4:	eb000531 	bl	2cc80 <CPageAllocator::CPageAllocator()>
   2b7b8:	e59f30f4 	ldr	r3, [pc, #244]	; 2b8b4 <CMemorySystem::CMemorySystem(bool)+0x134>
   2b7bc:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   2b7c0:	e5935000 	ldr	r5, [r3]
   2b7c4:	e3550000 	cmp	r5, #0
   2b7c8:	0a000002 	beq	2b7d8 <CMemorySystem::CMemorySystem(bool)+0x58>
   2b7cc:	e1a00004 	mov	r0, r4
   2b7d0:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2b7d4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b7d8:	e3a01001 	mov	r1, #1
   2b7dc:	e28d000c 	add	r0, sp, #12
   2b7e0:	e5834000 	str	r4, [r3]
   2b7e4:	ebffe3c7 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2b7e8:	e3a03014 	mov	r3, #20
   2b7ec:	e59f10c4 	ldr	r1, [pc, #196]	; 2b8b8 <CMemorySystem::CMemorySystem(bool)+0x138>
   2b7f0:	e58d5000 	str	r5, [sp]
   2b7f4:	e28d000c 	add	r0, sp, #12
   2b7f8:	e08d2003 	add	r2, sp, r3
   2b7fc:	ebffe3cd 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2b800:	e3500000 	cmp	r0, #0
   2b804:	0a000016 	beq	2b864 <CMemorySystem::CMemorySystem(bool)+0xe4>
   2b808:	e59d3020 	ldr	r3, [sp, #32]
   2b80c:	e3530000 	cmp	r3, #0
   2b810:	1a000022 	bne	2b8a0 <CMemorySystem::CMemorySystem(bool)+0x120>
   2b814:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2b818:	e2435501 	sub	r5, r3, #4194304	; 0x400000
   2b81c:	e2432609 	sub	r2, r3, #9437184	; 0x900000
   2b820:	e1a00007 	mov	r0, r7
   2b824:	e3a01605 	mov	r1, #5242880	; 0x500000
   2b828:	e5843004 	str	r3, [r4, #4]
   2b82c:	e3a03701 	mov	r3, #262144	; 0x40000
   2b830:	ebfffdc8 	bl	2af58 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   2b834:	e1a01005 	mov	r1, r5
   2b838:	e1a00006 	mov	r0, r6
   2b83c:	e3a02501 	mov	r2, #4194304	; 0x400000
   2b840:	eb000516 	bl	2cca0 <CPageAllocator::Setup(unsigned int, unsigned int)>
   2b844:	e5d43000 	ldrb	r3, [r4]
   2b848:	e3530000 	cmp	r3, #0
   2b84c:	1a00000a 	bne	2b87c <CMemorySystem::CMemorySystem(bool)+0xfc>
   2b850:	e28d000c 	add	r0, sp, #12
   2b854:	ebffe3b2 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   2b858:	e1a00004 	mov	r0, r4
   2b85c:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2b860:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b864:	e3a03303 	mov	r3, #201326592	; 0xc000000
   2b868:	e3a026b7 	mov	r2, #191889408	; 0xb700000
   2b86c:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   2b870:	e58d0020 	str	r0, [sp, #32]
   2b874:	e58d3024 	str	r3, [sp, #36]	; 0x24
   2b878:	eaffffe8 	b	2b820 <CMemorySystem::CMemorySystem(bool)+0xa0>
   2b87c:	e3a00004 	mov	r0, #4
   2b880:	ebfffd86 	bl	2aea0 <operator new(unsigned int)>
   2b884:	e1a05000 	mov	r5, r0
   2b888:	e5941004 	ldr	r1, [r4, #4]
   2b88c:	eb00007f 	bl	2ba90 <CPageTable::CPageTable(unsigned int)>
   2b890:	e1a00004 	mov	r0, r4
   2b894:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   2b898:	eb000040 	bl	2b9a0 <CMemorySystem::EnableMMU()>
   2b89c:	eaffffeb 	b	2b850 <CMemorySystem::CMemorySystem(bool)+0xd0>
   2b8a0:	e59f1014 	ldr	r1, [pc, #20]	; 2b8bc <CMemorySystem::CMemorySystem(bool)+0x13c>
   2b8a4:	e3a0204e 	mov	r2, #78	; 0x4e
   2b8a8:	e281000c 	add	r0, r1, #12
   2b8ac:	ebffe374 	bl	24684 <assertion_failed>
   2b8b0:	000453a0 	.word	0x000453a0
   2b8b4:	0004dae8 	.word	0x0004dae8
   2b8b8:	00010005 	.word	0x00010005
   2b8bc:	000453a8 	.word	0x000453a8

0002b8c0 <CMemorySystem::~CMemorySystem()>:
   2b8c0:	e59f3044 	ldr	r3, [pc, #68]	; 2b90c <CMemorySystem::~CMemorySystem()+0x4c>
   2b8c4:	e92d4010 	push	{r4, lr}
   2b8c8:	e5932000 	ldr	r2, [r3]
   2b8cc:	e1a04000 	mov	r4, r0
   2b8d0:	e1500002 	cmp	r0, r2
   2b8d4:	0a000005 	beq	2b8f0 <CMemorySystem::~CMemorySystem()+0x30>
   2b8d8:	e28400c8 	add	r0, r4, #200	; 0xc8
   2b8dc:	eb0004ee 	bl	2cc9c <CPageAllocator::~CPageAllocator()>
   2b8e0:	e284000c 	add	r0, r4, #12
   2b8e4:	ebfffd9a 	bl	2af54 <CHeapAllocator::~CHeapAllocator()>
   2b8e8:	e1a00004 	mov	r0, r4
   2b8ec:	e8bd8010 	pop	{r4, pc}
   2b8f0:	e3a01000 	mov	r1, #0
   2b8f4:	e5d02000 	ldrb	r2, [r0]
   2b8f8:	e5831000 	str	r1, [r3]
   2b8fc:	e1520001 	cmp	r2, r1
   2b900:	0afffff4 	beq	2b8d8 <CMemorySystem::~CMemorySystem()+0x18>
   2b904:	eb000056 	bl	2ba64 <CMemorySystem::Destructor() [clone .part.0]>
   2b908:	eafffff2 	b	2b8d8 <CMemorySystem::~CMemorySystem()+0x18>
   2b90c:	0004dae8 	.word	0x0004dae8

0002b910 <CMemorySystem::Destructor()>:
   2b910:	e59f3020 	ldr	r3, [pc, #32]	; 2b938 <CMemorySystem::Destructor()+0x28>
   2b914:	e5932000 	ldr	r2, [r3]
   2b918:	e1520000 	cmp	r2, r0
   2b91c:	112fff1e 	bxne	lr
   2b920:	e3a01000 	mov	r1, #0
   2b924:	e5d22000 	ldrb	r2, [r2]
   2b928:	e5831000 	str	r1, [r3]
   2b92c:	e1520001 	cmp	r2, r1
   2b930:	012fff1e 	bxeq	lr
   2b934:	ea00004a 	b	2ba64 <CMemorySystem::Destructor() [clone .part.0]>
   2b938:	0004dae8 	.word	0x0004dae8

0002b93c <CMemorySystem::GetMemSize() const>:
   2b93c:	e59f3028 	ldr	r3, [pc, #40]	; 2b96c <CMemorySystem::GetMemSize() const+0x30>
   2b940:	e5933000 	ldr	r3, [r3]
   2b944:	e3530000 	cmp	r3, #0
   2b948:	0a000002 	beq	2b958 <CMemorySystem::GetMemSize() const+0x1c>
   2b94c:	e9930009 	ldmib	r3, {r0, r3}
   2b950:	e0800003 	add	r0, r0, r3
   2b954:	e12fff1e 	bx	lr
   2b958:	e59f1010 	ldr	r1, [pc, #16]	; 2b970 <CMemorySystem::GetMemSize() const+0x34>
   2b95c:	e3a020a0 	mov	r2, #160	; 0xa0
   2b960:	e92d4010 	push	{r4, lr}
   2b964:	e2810028 	add	r0, r1, #40	; 0x28
   2b968:	ebffe345 	bl	24684 <assertion_failed>
   2b96c:	0004dae8 	.word	0x0004dae8
   2b970:	000453a8 	.word	0x000453a8

0002b974 <CMemorySystem::Get()>:
   2b974:	e59f301c 	ldr	r3, [pc, #28]	; 2b998 <CMemorySystem::Get()+0x24>
   2b978:	e5930000 	ldr	r0, [r3]
   2b97c:	e3500000 	cmp	r0, #0
   2b980:	112fff1e 	bxne	lr
   2b984:	e59f1010 	ldr	r1, [pc, #16]	; 2b99c <CMemorySystem::Get()+0x28>
   2b988:	e3a020a6 	mov	r2, #166	; 0xa6
   2b98c:	e92d4010 	push	{r4, lr}
   2b990:	e2810028 	add	r0, r1, #40	; 0x28
   2b994:	ebffe33a 	bl	24684 <assertion_failed>
   2b998:	0004dae8 	.word	0x0004dae8
   2b99c:	000453a8 	.word	0x000453a8

0002b9a0 <CMemorySystem::EnableMMU()>:
   2b9a0:	e5d03000 	ldrb	r3, [r0]
   2b9a4:	e92d4010 	push	{r4, lr}
   2b9a8:	e3530000 	cmp	r3, #0
   2b9ac:	0a00001b 	beq	2ba20 <CMemorySystem::EnableMMU()+0x80>
   2b9b0:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   2b9b4:	e3833040 	orr	r3, r3, #64	; 0x40
   2b9b8:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   2b9bc:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   2b9c0:	e3130001 	tst	r3, #1
   2b9c4:	1a000019 	bne	2ba30 <CMemorySystem::EnableMMU()+0x90>
   2b9c8:	e3a04000 	mov	r4, #0
   2b9cc:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   2b9d0:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   2b9d4:	e1500004 	cmp	r0, r4
   2b9d8:	0a000018 	beq	2ba40 <CMemorySystem::EnableMMU()+0xa0>
   2b9dc:	eb000053 	bl	2bb30 <CPageTable::GetBaseAddress() const>
   2b9e0:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   2b9e4:	e3a03001 	mov	r3, #1
   2b9e8:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   2b9ec:	ee074f16 	mcr	15, 0, r4, cr7, cr6, {0}
   2b9f0:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2b9f4:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   2b9f8:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   2b9fc:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   2ba00:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2ba04:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}
   2ba08:	ee112f10 	mrc	15, 0, r2, cr1, cr0, {0}
   2ba0c:	e59f303c 	ldr	r3, [pc, #60]	; 2ba50 <CMemorySystem::EnableMMU()+0xb0>
   2ba10:	e3c22002 	bic	r2, r2, #2
   2ba14:	e1823003 	orr	r3, r2, r3
   2ba18:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   2ba1c:	e8bd8010 	pop	{r4, pc}
   2ba20:	e59f102c 	ldr	r1, [pc, #44]	; 2ba54 <CMemorySystem::EnableMMU()+0xb4>
   2ba24:	e3a020ac 	mov	r2, #172	; 0xac
   2ba28:	e2810038 	add	r0, r1, #56	; 0x38
   2ba2c:	ebffe314 	bl	24684 <assertion_failed>
   2ba30:	e59f101c 	ldr	r1, [pc, #28]	; 2ba54 <CMemorySystem::EnableMMU()+0xb4>
   2ba34:	e3a020ba 	mov	r2, #186	; 0xba
   2ba38:	e2810048 	add	r0, r1, #72	; 0x48
   2ba3c:	ebffe310 	bl	24684 <assertion_failed>
   2ba40:	e59f100c 	ldr	r1, [pc, #12]	; 2ba54 <CMemorySystem::EnableMMU()+0xb4>
   2ba44:	e3a020c0 	mov	r2, #192	; 0xc0
   2ba48:	e2810074 	add	r0, r1, #116	; 0x74
   2ba4c:	ebffe30c 	bl	24684 <assertion_failed>
   2ba50:	00c01805 	.word	0x00c01805
   2ba54:	000453a8 	.word	0x000453a8

0002ba58 <CMemorySystem::GetCoherentPage(unsigned int)>:
   2ba58:	e1a00600 	lsl	r0, r0, #12
   2ba5c:	e2800501 	add	r0, r0, #4194304	; 0x400000
   2ba60:	e12fff1e 	bx	lr

0002ba64 <CMemorySystem::Destructor() [clone .part.0]>:
   2ba64:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   2ba68:	e3c33005 	bic	r3, r3, #5
   2ba6c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   2ba70:	e3a03000 	mov	r3, #0
   2ba74:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2ba78:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2ba7c:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   2ba80:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2ba84:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   2ba88:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2ba8c:	e12fff1e 	bx	lr

0002ba90 <CPageTable::CPageTable(unsigned int)>:
   2ba90:	e3a0c709 	mov	ip, #2359296	; 0x240000
   2ba94:	e59f207c 	ldr	r2, [pc, #124]	; 2bb18 <CPageTable::CPageTable(unsigned int)+0x88>
   2ba98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2ba9c:	e3a03000 	mov	r3, #0
   2baa0:	e1a04002 	mov	r4, r2
   2baa4:	e3e064df 	mvn	r6, #-553648128	; 0xdf000000
   2baa8:	e59fe06c 	ldr	lr, [pc, #108]	; 2bb1c <CPageTable::CPageTable(unsigned int)+0x8c>
   2baac:	e59f806c 	ldr	r8, [pc, #108]	; 2bb20 <CPageTable::CPageTable(unsigned int)+0x90>
   2bab0:	e59f706c 	ldr	r7, [pc, #108]	; 2bb24 <CPageTable::CPageTable(unsigned int)+0x94>
   2bab4:	e59f506c 	ldr	r5, [pc, #108]	; 2bb28 <CPageTable::CPageTable(unsigned int)+0x98>
   2bab8:	e580c000 	str	ip, [r0]
   2babc:	ea00000c 	b	2baf4 <CPageTable::CPageTable(unsigned int)+0x64>
   2bac0:	e153000e 	cmp	r3, lr
   2bac4:	31a02004 	movcc	r2, r4
   2bac8:	3a000008 	bcc	2baf0 <CPageTable::CPageTable(unsigned int)+0x60>
   2bacc:	e3530501 	cmp	r3, #4194304	; 0x400000
   2bad0:	01a02008 	moveq	r2, r8
   2bad4:	0a000005 	beq	2baf0 <CPageTable::CPageTable(unsigned int)+0x60>
   2bad8:	e1530001 	cmp	r3, r1
   2badc:	31a02007 	movcc	r2, r7
   2bae0:	3a000002 	bcc	2baf0 <CPageTable::CPageTable(unsigned int)+0x60>
   2bae4:	e1530006 	cmp	r3, r6
   2bae8:	31a02005 	movcc	r2, r5
   2baec:	23a02000 	movcs	r2, #0
   2baf0:	e28cc004 	add	ip, ip, #4
   2baf4:	e1822003 	orr	r2, r2, r3
   2baf8:	e3730601 	cmn	r3, #1048576	; 0x100000
   2bafc:	e58c2000 	str	r2, [ip]
   2bb00:	e2833601 	add	r3, r3, #1048576	; 0x100000
   2bb04:	1affffed 	bne	2bac0 <CPageTable::CPageTable(unsigned int)+0x30>
   2bb08:	e3a03000 	mov	r3, #0
   2bb0c:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2bb10:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bb14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2bb18:	0000040e 	.word	0x0000040e
   2bb1c:	0003e5bc 	.word	0x0003e5bc
   2bb20:	00010412 	.word	0x00010412
   2bb24:	0000041e 	.word	0x0000041e
   2bb28:	00010416 	.word	0x00010416

0002bb2c <CPageTable::~CPageTable()>:
   2bb2c:	e12fff1e 	bx	lr

0002bb30 <CPageTable::GetBaseAddress() const>:
   2bb30:	e5900000 	ldr	r0, [r0]
   2bb34:	e3800001 	orr	r0, r0, #1
   2bb38:	e12fff1e 	bx	lr

0002bb3c <CurrentExecutionLevel>:
   2bb3c:	e10f0000 	mrs	r0, CPSR
   2bb40:	e3100040 	tst	r0, #64	; 0x40
   2bb44:	01a003a0 	lsreq	r0, r0, #7
   2bb48:	02000001 	andeq	r0, r0, #1
   2bb4c:	13a00002 	movne	r0, #2
   2bb50:	e12fff1e 	bx	lr

0002bb54 <EnterCritical>:
   2bb54:	e2403001 	sub	r3, r0, #1
   2bb58:	e3530001 	cmp	r3, #1
   2bb5c:	e92d4010 	push	{r4, lr}
   2bb60:	8a000012 	bhi	2bbb0 <EnterCritical+0x5c>
   2bb64:	e10f1000 	mrs	r1, CPSR
   2bb68:	e3500002 	cmp	r0, #2
   2bb6c:	1a000013 	bne	2bbc0 <EnterCritical+0x6c>
   2bb70:	f10c00c0 	cpsid	if
   2bb74:	e59f306c 	ldr	r3, [pc, #108]	; 2bbe8 <EnterCritical+0x94>
   2bb78:	e5932000 	ldr	r2, [r3]
   2bb7c:	e3520013 	cmp	r2, #19
   2bb80:	8a000014 	bhi	2bbd8 <EnterCritical+0x84>
   2bb84:	e5932000 	ldr	r2, [r3]
   2bb88:	e3500001 	cmp	r0, #1
   2bb8c:	e2820001 	add	r0, r2, #1
   2bb90:	e0832102 	add	r2, r3, r2, lsl #2
   2bb94:	e5830000 	str	r0, [r3]
   2bb98:	e5821004 	str	r1, [r2, #4]
   2bb9c:	1a000000 	bne	2bba4 <EnterCritical+0x50>
   2bba0:	f1080040 	cpsie	f
   2bba4:	e3a03000 	mov	r3, #0
   2bba8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bbac:	e8bd8010 	pop	{r4, pc}
   2bbb0:	e3a02064 	mov	r2, #100	; 0x64
   2bbb4:	e59f1030 	ldr	r1, [pc, #48]	; 2bbec <EnterCritical+0x98>
   2bbb8:	e59f0030 	ldr	r0, [pc, #48]	; 2bbf0 <EnterCritical+0x9c>
   2bbbc:	ebffe2b0 	bl	24684 <assertion_failed>
   2bbc0:	e3110040 	tst	r1, #64	; 0x40
   2bbc4:	0affffe9 	beq	2bb70 <EnterCritical+0x1c>
   2bbc8:	e3a0206a 	mov	r2, #106	; 0x6a
   2bbcc:	e59f1018 	ldr	r1, [pc, #24]	; 2bbec <EnterCritical+0x98>
   2bbd0:	e59f001c 	ldr	r0, [pc, #28]	; 2bbf4 <EnterCritical+0xa0>
   2bbd4:	ebffe2aa 	bl	24684 <assertion_failed>
   2bbd8:	e3a0206e 	mov	r2, #110	; 0x6e
   2bbdc:	e59f1008 	ldr	r1, [pc, #8]	; 2bbec <EnterCritical+0x98>
   2bbe0:	e59f0010 	ldr	r0, [pc, #16]	; 2bbf8 <EnterCritical+0xa4>
   2bbe4:	ebffe2a6 	bl	24684 <assertion_failed>
   2bbe8:	0004daec 	.word	0x0004daec
   2bbec:	00045430 	.word	0x00045430
   2bbf0:	00045440 	.word	0x00045440
   2bbf4:	00045478 	.word	0x00045478
   2bbf8:	000454a8 	.word	0x000454a8

0002bbfc <LeaveCritical>:
   2bbfc:	e3a03000 	mov	r3, #0
   2bc00:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bc04:	f10c0040 	cpsid	f
   2bc08:	e59f3038 	ldr	r3, [pc, #56]	; 2bc48 <LeaveCritical+0x4c>
   2bc0c:	e5932000 	ldr	r2, [r3]
   2bc10:	e3520000 	cmp	r2, #0
   2bc14:	0a000006 	beq	2bc34 <LeaveCritical+0x38>
   2bc18:	e5932000 	ldr	r2, [r3]
   2bc1c:	e2422001 	sub	r2, r2, #1
   2bc20:	e5832000 	str	r2, [r3]
   2bc24:	e0833102 	add	r3, r3, r2, lsl #2
   2bc28:	e5933004 	ldr	r3, [r3, #4]
   2bc2c:	e121f003 	msr	CPSR_c, r3
   2bc30:	e12fff1e 	bx	lr
   2bc34:	e3a0207f 	mov	r2, #127	; 0x7f
   2bc38:	e92d4010 	push	{r4, lr}
   2bc3c:	e59f1008 	ldr	r1, [pc, #8]	; 2bc4c <LeaveCritical+0x50>
   2bc40:	e59f0008 	ldr	r0, [pc, #8]	; 2bc50 <LeaveCritical+0x54>
   2bc44:	ebffe28e 	bl	24684 <assertion_failed>
   2bc48:	0004daec 	.word	0x0004daec
   2bc4c:	00045430 	.word	0x00045430
   2bc50:	000454d0 	.word	0x000454d0

0002bc54 <CleanAndInvalidateDataCacheRange>:
   2bc54:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2bc58:	e2813020 	add	r3, r1, #32
   2bc5c:	e353001f 	cmp	r3, #31
   2bc60:	9a000007 	bls	2bc84 <CleanAndInvalidateDataCacheRange+0x30>
   2bc64:	e2800020 	add	r0, r0, #32
   2bc68:	e3c1101f 	bic	r1, r1, #31
   2bc6c:	e0803001 	add	r3, r0, r1
   2bc70:	ea000000 	b	2bc78 <CleanAndInvalidateDataCacheRange+0x24>
   2bc74:	e2800020 	add	r0, r0, #32
   2bc78:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2bc7c:	e1530000 	cmp	r3, r0
   2bc80:	1afffffb 	bne	2bc74 <CleanAndInvalidateDataCacheRange+0x20>
   2bc84:	e3a03000 	mov	r3, #0
   2bc88:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bc8c:	e12fff1e 	bx	lr

0002bc90 <SyncDataAndInstructionCache>:
   2bc90:	e3a03000 	mov	r3, #0
   2bc94:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2bc98:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bc9c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2bca0:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2bca4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bca8:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2bcac:	e12fff1e 	bx	lr

0002bcb0 <CInterruptSystem::CInterruptSystem()>:
   2bcb0:	e3a02000 	mov	r2, #0
   2bcb4:	e2403004 	sub	r3, r0, #4
   2bcb8:	e2801f47 	add	r1, r0, #284	; 0x11c
   2bcbc:	e5a32004 	str	r2, [r3, #4]!
   2bcc0:	e1530001 	cmp	r3, r1
   2bcc4:	e5832120 	str	r2, [r3, #288]	; 0x120
   2bcc8:	1afffffb 	bne	2bcbc <CInterruptSystem::CInterruptSystem()+0xc>
   2bccc:	e59f3004 	ldr	r3, [pc, #4]	; 2bcd8 <CInterruptSystem::CInterruptSystem()+0x28>
   2bcd0:	e5830000 	str	r0, [r3]
   2bcd4:	e12fff1e 	bx	lr
   2bcd8:	0004db40 	.word	0x0004db40

0002bcdc <CInterruptSystem::~CInterruptSystem()>:
   2bcdc:	f10c0080 	cpsid	i
   2bce0:	e3a03000 	mov	r3, #0
   2bce4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bce8:	e3e01000 	mvn	r1, #0
   2bcec:	e59f201c 	ldr	r2, [pc, #28]	; 2bd10 <CInterruptSystem::~CInterruptSystem()+0x34>
   2bcf0:	e582320c 	str	r3, [r2, #524]	; 0x20c
   2bcf4:	e582121c 	str	r1, [r2, #540]	; 0x21c
   2bcf8:	e5821220 	str	r1, [r2, #544]	; 0x220
   2bcfc:	e5821224 	str	r1, [r2, #548]	; 0x224
   2bd00:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bd04:	e59f2008 	ldr	r2, [pc, #8]	; 2bd14 <CInterruptSystem::~CInterruptSystem()+0x38>
   2bd08:	e5823000 	str	r3, [r2]
   2bd0c:	e12fff1e 	bx	lr
   2bd10:	2000b000 	.word	0x2000b000
   2bd14:	0004db40 	.word	0x0004db40

0002bd18 <CInterruptSystem::Initialize()>:
   2bd18:	e92d4010 	push	{r4, lr}
   2bd1c:	e3a04000 	mov	r4, #0
   2bd20:	e59f2054 	ldr	r2, [pc, #84]	; 2bd7c <CInterruptSystem::Initialize()+0x64>
   2bd24:	e59f3054 	ldr	r3, [pc, #84]	; 2bd80 <CInterruptSystem::Initialize()+0x68>
   2bd28:	e2422018 	sub	r2, r2, #24
   2bd2c:	e243301c 	sub	r3, r3, #28
   2bd30:	e1a02142 	asr	r2, r2, #2
   2bd34:	e1a03143 	asr	r3, r3, #2
   2bd38:	e2422002 	sub	r2, r2, #2
   2bd3c:	e2433002 	sub	r3, r3, #2
   2bd40:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   2bd44:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2bd48:	e1c421f8 	strd	r2, [r4, #24]
   2bd4c:	ebffffcf 	bl	2bc90 <SyncDataAndInstructionCache>
   2bd50:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2bd54:	e3e02000 	mvn	r2, #0
   2bd58:	e59f3024 	ldr	r3, [pc, #36]	; 2bd84 <CInterruptSystem::Initialize()+0x6c>
   2bd5c:	e583420c 	str	r4, [r3, #524]	; 0x20c
   2bd60:	e583221c 	str	r2, [r3, #540]	; 0x21c
   2bd64:	e5832220 	str	r2, [r3, #544]	; 0x220
   2bd68:	e5832224 	str	r2, [r3, #548]	; 0x224
   2bd6c:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   2bd70:	f1080080 	cpsie	i
   2bd74:	e3a00001 	mov	r0, #1
   2bd78:	e8bd8010 	pop	{r4, pc}
   2bd7c:	0002b704 	.word	0x0002b704
   2bd80:	0002b71c 	.word	0x0002b71c
   2bd84:	2000b000 	.word	0x2000b000

0002bd88 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   2bd88:	e3510047 	cmp	r1, #71	; 0x47
   2bd8c:	e92d4010 	push	{r4, lr}
   2bd90:	8a00001e 	bhi	2be10 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   2bd94:	e3520000 	cmp	r2, #0
   2bd98:	0a000020 	beq	2be20 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
   2bd9c:	e59f009c 	ldr	r0, [pc, #156]	; 2be40 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
   2bda0:	e5d0e001 	ldrb	lr, [r0, #1]
   2bda4:	e5d0c000 	ldrb	ip, [r0]
   2bda8:	e5d04002 	ldrb	r4, [r0, #2]
   2bdac:	e18cc40e 	orr	ip, ip, lr, lsl #8
   2bdb0:	e5d0e003 	ldrb	lr, [r0, #3]
   2bdb4:	e18cc804 	orr	ip, ip, r4, lsl #16
   2bdb8:	e19ccc0e 	orrs	ip, ip, lr, lsl #24
   2bdbc:	1a00001b 	bne	2be30 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa8>
   2bdc0:	e1a04422 	lsr	r4, r2, #8
   2bdc4:	e1a0e822 	lsr	lr, r2, #16
   2bdc8:	e5c02000 	strb	r2, [r0]
   2bdcc:	e5c03004 	strb	r3, [r0, #4]
   2bdd0:	e1a02c22 	lsr	r2, r2, #24
   2bdd4:	e5c04001 	strb	r4, [r0, #1]
   2bdd8:	e5c0e002 	strb	lr, [r0, #2]
   2bddc:	e1a04423 	lsr	r4, r3, #8
   2bde0:	e1a0e823 	lsr	lr, r3, #16
   2bde4:	e1a03c23 	lsr	r3, r3, #24
   2bde8:	e5c02003 	strb	r2, [r0, #3]
   2bdec:	e5c04005 	strb	r4, [r0, #5]
   2bdf0:	e5c0e006 	strb	lr, [r0, #6]
   2bdf4:	e5c03007 	strb	r3, [r0, #7]
   2bdf8:	ee07cf9a 	mcr	15, 0, ip, cr7, cr10, {4}
   2bdfc:	e59f3040 	ldr	r3, [pc, #64]	; 2be44 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xbc>
   2be00:	e3811080 	orr	r1, r1, #128	; 0x80
   2be04:	e583120c 	str	r1, [r3, #524]	; 0x20c
   2be08:	ee07cfba 	mcr	15, 0, ip, cr7, cr10, {5}
   2be0c:	e8bd8010 	pop	{r4, pc}
   2be10:	e3a0208f 	mov	r2, #143	; 0x8f
   2be14:	e59f102c 	ldr	r1, [pc, #44]	; 2be48 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2be18:	e59f002c 	ldr	r0, [pc, #44]	; 2be4c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   2be1c:	ebffe218 	bl	24684 <assertion_failed>
   2be20:	e3a02090 	mov	r2, #144	; 0x90
   2be24:	e59f101c 	ldr	r1, [pc, #28]	; 2be48 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2be28:	e59f0020 	ldr	r0, [pc, #32]	; 2be50 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   2be2c:	ebffe214 	bl	24684 <assertion_failed>
   2be30:	e3a02091 	mov	r2, #145	; 0x91
   2be34:	e59f100c 	ldr	r1, [pc, #12]	; 2be48 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2be38:	e59f0014 	ldr	r0, [pc, #20]	; 2be54 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
   2be3c:	ebffe210 	bl	24684 <assertion_failed>
   2be40:	00047c14 	.word	0x00047c14
   2be44:	2000b000 	.word	0x2000b000
   2be48:	000454e8 	.word	0x000454e8
   2be4c:	000454f8 	.word	0x000454f8
   2be50:	0004552c 	.word	0x0004552c
   2be54:	0004550c 	.word	0x0004550c

0002be58 <CInterruptSystem::DisconnectFIQ()>:
   2be58:	e59f3068 	ldr	r3, [pc, #104]	; 2bec8 <CInterruptSystem::DisconnectFIQ()+0x70>
   2be5c:	e5d31001 	ldrb	r1, [r3, #1]
   2be60:	e5d32000 	ldrb	r2, [r3]
   2be64:	e5d30002 	ldrb	r0, [r3, #2]
   2be68:	e1822401 	orr	r2, r2, r1, lsl #8
   2be6c:	e5d31003 	ldrb	r1, [r3, #3]
   2be70:	e1822800 	orr	r2, r2, r0, lsl #16
   2be74:	e1922c01 	orrs	r2, r2, r1, lsl #24
   2be78:	0a00000d 	beq	2beb4 <CInterruptSystem::DisconnectFIQ()+0x5c>
   2be7c:	e3a02000 	mov	r2, #0
   2be80:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   2be84:	e59f1040 	ldr	r1, [pc, #64]	; 2becc <CInterruptSystem::DisconnectFIQ()+0x74>
   2be88:	e581220c 	str	r2, [r1, #524]	; 0x20c
   2be8c:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   2be90:	e5c32000 	strb	r2, [r3]
   2be94:	e5c32001 	strb	r2, [r3, #1]
   2be98:	e5c32002 	strb	r2, [r3, #2]
   2be9c:	e5c32003 	strb	r2, [r3, #3]
   2bea0:	e5c32004 	strb	r2, [r3, #4]
   2bea4:	e5c32005 	strb	r2, [r3, #5]
   2bea8:	e5c32006 	strb	r2, [r3, #6]
   2beac:	e5c32007 	strb	r2, [r3, #7]
   2beb0:	e12fff1e 	bx	lr
   2beb4:	e3a0209b 	mov	r2, #155	; 0x9b
   2beb8:	e92d4010 	push	{r4, lr}
   2bebc:	e59f100c 	ldr	r1, [pc, #12]	; 2bed0 <CInterruptSystem::DisconnectFIQ()+0x78>
   2bec0:	e59f000c 	ldr	r0, [pc, #12]	; 2bed4 <CInterruptSystem::DisconnectFIQ()+0x7c>
   2bec4:	ebffe1ee 	bl	24684 <assertion_failed>
   2bec8:	00047c14 	.word	0x00047c14
   2becc:	2000b000 	.word	0x2000b000
   2bed0:	000454e8 	.word	0x000454e8
   2bed4:	00045524 	.word	0x00045524

0002bed8 <CInterruptSystem::EnableIRQ(unsigned int)>:
   2bed8:	e3a03000 	mov	r3, #0
   2bedc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bee0:	e3500047 	cmp	r0, #71	; 0x47
   2bee4:	8a00000e 	bhi	2bf24 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
   2bee8:	e350001f 	cmp	r0, #31
   2beec:	8a000007 	bhi	2bf10 <CInterruptSystem::EnableIRQ(unsigned int)+0x38>
   2bef0:	e59f2040 	ldr	r2, [pc, #64]	; 2bf38 <CInterruptSystem::EnableIRQ(unsigned int)+0x60>
   2bef4:	e3a03001 	mov	r3, #1
   2bef8:	e200001f 	and	r0, r0, #31
   2befc:	e1a00013 	lsl	r0, r3, r0
   2bf00:	e5820000 	str	r0, [r2]
   2bf04:	e3a03000 	mov	r3, #0
   2bf08:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bf0c:	e12fff1e 	bx	lr
   2bf10:	e59f3024 	ldr	r3, [pc, #36]	; 2bf3c <CInterruptSystem::EnableIRQ(unsigned int)+0x64>
   2bf14:	e350003f 	cmp	r0, #63	; 0x3f
   2bf18:	e59f2020 	ldr	r2, [pc, #32]	; 2bf40 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
   2bf1c:	81a02003 	movhi	r2, r3
   2bf20:	eafffff3 	b	2bef4 <CInterruptSystem::EnableIRQ(unsigned int)+0x1c>
   2bf24:	e3a020a7 	mov	r2, #167	; 0xa7
   2bf28:	e92d4010 	push	{r4, lr}
   2bf2c:	e59f1010 	ldr	r1, [pc, #16]	; 2bf44 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   2bf30:	e59f0010 	ldr	r0, [pc, #16]	; 2bf48 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   2bf34:	ebffe1d2 	bl	24684 <assertion_failed>
   2bf38:	2000b210 	.word	0x2000b210
   2bf3c:	2000b218 	.word	0x2000b218
   2bf40:	2000b214 	.word	0x2000b214
   2bf44:	000454e8 	.word	0x000454e8
   2bf48:	0004553c 	.word	0x0004553c

0002bf4c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   2bf4c:	e3510047 	cmp	r1, #71	; 0x47
   2bf50:	e92d4010 	push	{r4, lr}
   2bf54:	8a000008 	bhi	2bf7c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x30>
   2bf58:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   2bf5c:	e080e101 	add	lr, r0, r1, lsl #2
   2bf60:	e35c0000 	cmp	ip, #0
   2bf64:	1a000008 	bne	2bf8c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x40>
   2bf68:	e7802101 	str	r2, [r0, r1, lsl #2]
   2bf6c:	e58e3120 	str	r3, [lr, #288]	; 0x120
   2bf70:	e1a00001 	mov	r0, r1
   2bf74:	e8bd4010 	pop	{r4, lr}
   2bf78:	eaffffd6 	b	2bed8 <CInterruptSystem::EnableIRQ(unsigned int)>
   2bf7c:	e3a02076 	mov	r2, #118	; 0x76
   2bf80:	e59f1014 	ldr	r1, [pc, #20]	; 2bf9c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   2bf84:	e59f0014 	ldr	r0, [pc, #20]	; 2bfa0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x54>
   2bf88:	ebffe1bd 	bl	24684 <assertion_failed>
   2bf8c:	e3a02077 	mov	r2, #119	; 0x77
   2bf90:	e59f1004 	ldr	r1, [pc, #4]	; 2bf9c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   2bf94:	e59f0008 	ldr	r0, [pc, #8]	; 2bfa4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
   2bf98:	ebffe1b9 	bl	24684 <assertion_failed>
   2bf9c:	000454e8 	.word	0x000454e8
   2bfa0:	0004553c 	.word	0x0004553c
   2bfa4:	00045550 	.word	0x00045550

0002bfa8 <CInterruptSystem::DisableIRQ(unsigned int)>:
   2bfa8:	e3a03000 	mov	r3, #0
   2bfac:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bfb0:	e3500047 	cmp	r0, #71	; 0x47
   2bfb4:	8a00000e 	bhi	2bff4 <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
   2bfb8:	e350001f 	cmp	r0, #31
   2bfbc:	8a000007 	bhi	2bfe0 <CInterruptSystem::DisableIRQ(unsigned int)+0x38>
   2bfc0:	e59f2040 	ldr	r2, [pc, #64]	; 2c008 <CInterruptSystem::DisableIRQ(unsigned int)+0x60>
   2bfc4:	e3a03001 	mov	r3, #1
   2bfc8:	e200001f 	and	r0, r0, #31
   2bfcc:	e1a00013 	lsl	r0, r3, r0
   2bfd0:	e5820000 	str	r0, [r2]
   2bfd4:	e3a03000 	mov	r3, #0
   2bfd8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bfdc:	e12fff1e 	bx	lr
   2bfe0:	e59f3024 	ldr	r3, [pc, #36]	; 2c00c <CInterruptSystem::DisableIRQ(unsigned int)+0x64>
   2bfe4:	e350003f 	cmp	r0, #63	; 0x3f
   2bfe8:	e59f2020 	ldr	r2, [pc, #32]	; 2c010 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
   2bfec:	81a02003 	movhi	r2, r3
   2bff0:	eafffff3 	b	2bfc4 <CInterruptSystem::DisableIRQ(unsigned int)+0x1c>
   2bff4:	e3a020bf 	mov	r2, #191	; 0xbf
   2bff8:	e92d4010 	push	{r4, lr}
   2bffc:	e59f1010 	ldr	r1, [pc, #16]	; 2c014 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   2c000:	e59f0010 	ldr	r0, [pc, #16]	; 2c018 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   2c004:	ebffe19e 	bl	24684 <assertion_failed>
   2c008:	2000b21c 	.word	0x2000b21c
   2c00c:	2000b224 	.word	0x2000b224
   2c010:	2000b220 	.word	0x2000b220
   2c014:	000454e8 	.word	0x000454e8
   2c018:	0004553c 	.word	0x0004553c

0002c01c <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   2c01c:	e3510047 	cmp	r1, #71	; 0x47
   2c020:	e92d4070 	push	{r4, r5, r6, lr}
   2c024:	8a00000b 	bhi	2c058 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   2c028:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   2c02c:	e1a04001 	mov	r4, r1
   2c030:	e3530000 	cmp	r3, #0
   2c034:	e1a05000 	mov	r5, r0
   2c038:	e0806101 	add	r6, r0, r1, lsl #2
   2c03c:	0a000009 	beq	2c068 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>
   2c040:	e1a00001 	mov	r0, r1
   2c044:	ebffffd7 	bl	2bfa8 <CInterruptSystem::DisableIRQ(unsigned int)>
   2c048:	e3a03000 	mov	r3, #0
   2c04c:	e7853104 	str	r3, [r5, r4, lsl #2]
   2c050:	e5863120 	str	r3, [r6, #288]	; 0x120
   2c054:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c058:	e3a02081 	mov	r2, #129	; 0x81
   2c05c:	e59f1014 	ldr	r1, [pc, #20]	; 2c078 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   2c060:	e59f0014 	ldr	r0, [pc, #20]	; 2c07c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x60>
   2c064:	ebffe186 	bl	24684 <assertion_failed>
   2c068:	e3a02082 	mov	r2, #130	; 0x82
   2c06c:	e59f1004 	ldr	r1, [pc, #4]	; 2c078 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   2c070:	e59f0008 	ldr	r0, [pc, #8]	; 2c080 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
   2c074:	ebffe182 	bl	24684 <assertion_failed>
   2c078:	000454e8 	.word	0x000454e8
   2c07c:	0004553c 	.word	0x0004553c
   2c080:	0004556c 	.word	0x0004556c

0002c084 <CInterruptSystem::EnableFIQ(unsigned int)>:
   2c084:	e3a03000 	mov	r3, #0
   2c088:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c08c:	e3500047 	cmp	r0, #71	; 0x47
   2c090:	8a000004 	bhi	2c0a8 <CInterruptSystem::EnableFIQ(unsigned int)+0x24>
   2c094:	e59f2020 	ldr	r2, [pc, #32]	; 2c0bc <CInterruptSystem::EnableFIQ(unsigned int)+0x38>
   2c098:	e3800080 	orr	r0, r0, #128	; 0x80
   2c09c:	e582020c 	str	r0, [r2, #524]	; 0x20c
   2c0a0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c0a4:	e12fff1e 	bx	lr
   2c0a8:	e3a020d7 	mov	r2, #215	; 0xd7
   2c0ac:	e92d4010 	push	{r4, lr}
   2c0b0:	e59f1008 	ldr	r1, [pc, #8]	; 2c0c0 <CInterruptSystem::EnableFIQ(unsigned int)+0x3c>
   2c0b4:	e59f0008 	ldr	r0, [pc, #8]	; 2c0c4 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
   2c0b8:	ebffe171 	bl	24684 <assertion_failed>
   2c0bc:	2000b000 	.word	0x2000b000
   2c0c0:	000454e8 	.word	0x000454e8
   2c0c4:	000454f8 	.word	0x000454f8

0002c0c8 <CInterruptSystem::DisableFIQ()>:
   2c0c8:	e3a03000 	mov	r3, #0
   2c0cc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c0d0:	e59f2008 	ldr	r2, [pc, #8]	; 2c0e0 <CInterruptSystem::DisableFIQ()+0x18>
   2c0d4:	e582320c 	str	r3, [r2, #524]	; 0x20c
   2c0d8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c0dc:	e12fff1e 	bx	lr
   2c0e0:	2000b000 	.word	0x2000b000

0002c0e4 <CInterruptSystem::Get()>:
   2c0e4:	e59f301c 	ldr	r3, [pc, #28]	; 2c108 <CInterruptSystem::Get()+0x24>
   2c0e8:	e5930000 	ldr	r0, [r3]
   2c0ec:	e3500000 	cmp	r0, #0
   2c0f0:	112fff1e 	bxne	lr
   2c0f4:	e3a020e9 	mov	r2, #233	; 0xe9
   2c0f8:	e92d4010 	push	{r4, lr}
   2c0fc:	e59f1008 	ldr	r1, [pc, #8]	; 2c10c <CInterruptSystem::Get()+0x28>
   2c100:	e59f0008 	ldr	r0, [pc, #8]	; 2c110 <CInterruptSystem::Get()+0x2c>
   2c104:	ebffe15e 	bl	24684 <assertion_failed>
   2c108:	0004db40 	.word	0x0004db40
   2c10c:	000454e8 	.word	0x000454e8
   2c110:	00043274 	.word	0x00043274

0002c114 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   2c114:	e3510047 	cmp	r1, #71	; 0x47
   2c118:	e92d4010 	push	{r4, lr}
   2c11c:	8a00000b 	bhi	2c150 <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   2c120:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   2c124:	e0803101 	add	r3, r0, r1, lsl #2
   2c128:	e3540000 	cmp	r4, #0
   2c12c:	0a000003 	beq	2c140 <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   2c130:	e5930120 	ldr	r0, [r3, #288]	; 0x120
   2c134:	e12fff34 	blx	r4
   2c138:	e3a00001 	mov	r0, #1
   2c13c:	e8bd8010 	pop	{r4, pc}
   2c140:	e1a00001 	mov	r0, r1
   2c144:	ebffff97 	bl	2bfa8 <CInterruptSystem::DisableIRQ(unsigned int)>
   2c148:	e1a00004 	mov	r0, r4
   2c14c:	e8bd8010 	pop	{r4, pc}
   2c150:	e3a020ef 	mov	r2, #239	; 0xef
   2c154:	e59f1004 	ldr	r1, [pc, #4]	; 2c160 <CInterruptSystem::CallIRQHandler(unsigned int)+0x4c>
   2c158:	e59f0004 	ldr	r0, [pc, #4]	; 2c164 <CInterruptSystem::CallIRQHandler(unsigned int)+0x50>
   2c15c:	ebffe148 	bl	24684 <assertion_failed>
   2c160:	000454e8 	.word	0x000454e8
   2c164:	0004553c 	.word	0x0004553c

0002c168 <CInterruptSystem::InterruptHandler()>:
   2c168:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2c16c:	e59f80a4 	ldr	r8, [pc, #164]	; 2c218 <CInterruptSystem::InterruptHandler()+0xb0>
   2c170:	e24dd010 	sub	sp, sp, #16
   2c174:	e5983000 	ldr	r3, [r8]
   2c178:	e3530000 	cmp	r3, #0
   2c17c:	0a000021 	beq	2c208 <CInterruptSystem::InterruptHandler()+0xa0>
   2c180:	e3a06000 	mov	r6, #0
   2c184:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   2c188:	e59f308c 	ldr	r3, [pc, #140]	; 2c21c <CInterruptSystem::InterruptHandler()+0xb4>
   2c18c:	e5932204 	ldr	r2, [r3, #516]	; 0x204
   2c190:	e58d2004 	str	r2, [sp, #4]
   2c194:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   2c198:	e58d2008 	str	r2, [sp, #8]
   2c19c:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   2c1a0:	e6ef3073 	uxtb	r3, r3
   2c1a4:	e58d300c 	str	r3, [sp, #12]
   2c1a8:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   2c1ac:	e28d7004 	add	r7, sp, #4
   2c1b0:	e4974004 	ldr	r4, [r7], #4
   2c1b4:	e3540000 	cmp	r4, #0
   2c1b8:	1a000004 	bne	2c1d0 <CInterruptSystem::InterruptHandler()+0x68>
   2c1bc:	e2866001 	add	r6, r6, #1
   2c1c0:	e3560003 	cmp	r6, #3
   2c1c4:	1afffff9 	bne	2c1b0 <CInterruptSystem::InterruptHandler()+0x48>
   2c1c8:	e28dd010 	add	sp, sp, #16
   2c1cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c1d0:	e1a05286 	lsl	r5, r6, #5
   2c1d4:	ea000002 	b	2c1e4 <CInterruptSystem::InterruptHandler()+0x7c>
   2c1d8:	e1b040a4 	lsrs	r4, r4, #1
   2c1dc:	e2855001 	add	r5, r5, #1
   2c1e0:	0afffff5 	beq	2c1bc <CInterruptSystem::InterruptHandler()+0x54>
   2c1e4:	e3140001 	tst	r4, #1
   2c1e8:	0afffffa 	beq	2c1d8 <CInterruptSystem::InterruptHandler()+0x70>
   2c1ec:	e1a01005 	mov	r1, r5
   2c1f0:	e5980000 	ldr	r0, [r8]
   2c1f4:	ebffffc6 	bl	2c114 <CInterruptSystem::CallIRQHandler(unsigned int)>
   2c1f8:	e3500000 	cmp	r0, #0
   2c1fc:	0afffff5 	beq	2c1d8 <CInterruptSystem::InterruptHandler()+0x70>
   2c200:	e28dd010 	add	sp, sp, #16
   2c204:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c208:	e59f2010 	ldr	r2, [pc, #16]	; 2c220 <CInterruptSystem::InterruptHandler()+0xb8>
   2c20c:	e59f1010 	ldr	r1, [pc, #16]	; 2c224 <CInterruptSystem::InterruptHandler()+0xbc>
   2c210:	e59f0010 	ldr	r0, [pc, #16]	; 2c228 <CInterruptSystem::InterruptHandler()+0xc0>
   2c214:	ebffe11a 	bl	24684 <assertion_failed>
   2c218:	0004db40 	.word	0x0004db40
   2c21c:	2000b000 	.word	0x2000b000
   2c220:	00000102 	.word	0x00000102
   2c224:	000454e8 	.word	0x000454e8
   2c228:	00043274 	.word	0x00043274

0002c22c <InterruptHandler>:
   2c22c:	e92d4010 	push	{r4, lr}
   2c230:	e3a04000 	mov	r4, #0
   2c234:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   2c238:	ebffffca 	bl	2c168 <CInterruptSystem::InterruptHandler()>
   2c23c:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2c240:	e8bd8010 	pop	{r4, pc}

0002c244 <__cxa_pure_virtual>:
   2c244:	e3a02018 	mov	r2, #24
   2c248:	e92d4010 	push	{r4, lr}
   2c24c:	e59f1004 	ldr	r1, [pc, #4]	; 2c258 <__cxa_pure_virtual+0x14>
   2c250:	e59f0004 	ldr	r0, [pc, #4]	; 2c25c <__cxa_pure_virtual+0x18>
   2c254:	ebffe10a 	bl	24684 <assertion_failed>
   2c258:	00045588 	.word	0x00045588
   2c25c:	0003f63c 	.word	0x0003f63c

0002c260 <malloc>:
   2c260:	e59f300c 	ldr	r3, [pc, #12]	; 2c274 <malloc+0x14>
   2c264:	e1a01000 	mov	r1, r0
   2c268:	e5930000 	ldr	r0, [r3]
   2c26c:	e280000c 	add	r0, r0, #12
   2c270:	eafffb3e 	b	2af70 <CHeapAllocator::Allocate(unsigned int)>
   2c274:	0004dae8 	.word	0x0004dae8

0002c278 <free>:
   2c278:	e59f300c 	ldr	r3, [pc, #12]	; 2c28c <free+0x14>
   2c27c:	e1a01000 	mov	r1, r0
   2c280:	e5930000 	ldr	r0, [r3]
   2c284:	e280000c 	add	r0, r0, #12
   2c288:	eafffbb5 	b	2b164 <CHeapAllocator::Free(void*)>
   2c28c:	0004dae8 	.word	0x0004dae8

0002c290 <calloc>:
   2c290:	e0010190 	mul	r1, r0, r1
   2c294:	e3510001 	cmp	r1, #1
   2c298:	e92d4070 	push	{r4, r5, r6, lr}
   2c29c:	21a04001 	movcs	r4, r1
   2c2a0:	33a04001 	movcc	r4, #1
   2c2a4:	e1500004 	cmp	r0, r4
   2c2a8:	8a00000b 	bhi	2c2dc <calloc+0x4c>
   2c2ac:	e59f3038 	ldr	r3, [pc, #56]	; 2c2ec <calloc+0x5c>
   2c2b0:	e1a01004 	mov	r1, r4
   2c2b4:	e5930000 	ldr	r0, [r3]
   2c2b8:	e280000c 	add	r0, r0, #12
   2c2bc:	ebfffb2b 	bl	2af70 <CHeapAllocator::Allocate(unsigned int)>
   2c2c0:	e2505000 	subs	r5, r0, #0
   2c2c4:	0a000002 	beq	2c2d4 <calloc+0x44>
   2c2c8:	e1a02004 	mov	r2, r4
   2c2cc:	e3a01000 	mov	r1, #0
   2c2d0:	ebfff6c3 	bl	29de4 <memset>
   2c2d4:	e1a00005 	mov	r0, r5
   2c2d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c2dc:	e59f100c 	ldr	r1, [pc, #12]	; 2c2f0 <calloc+0x60>
   2c2e0:	e3a0202b 	mov	r2, #43	; 0x2b
   2c2e4:	e281000c 	add	r0, r1, #12
   2c2e8:	ebffe0e5 	bl	24684 <assertion_failed>
   2c2ec:	0004dae8 	.word	0x0004dae8
   2c2f0:	00045598 	.word	0x00045598

0002c2f4 <realloc>:
   2c2f4:	e59f3010 	ldr	r3, [pc, #16]	; 2c30c <realloc+0x18>
   2c2f8:	e1a02001 	mov	r2, r1
   2c2fc:	e5933000 	ldr	r3, [r3]
   2c300:	e1a01000 	mov	r1, r0
   2c304:	e283000c 	add	r0, r3, #12
   2c308:	eafffbd8 	b	2b270 <CHeapAllocator::ReAllocate(void*, unsigned int)>
   2c30c:	0004dae8 	.word	0x0004dae8

0002c310 <palloc>:
   2c310:	e59f3008 	ldr	r3, [pc, #8]	; 2c320 <palloc+0x10>
   2c314:	e5930000 	ldr	r0, [r3]
   2c318:	e28000c8 	add	r0, r0, #200	; 0xc8
   2c31c:	ea00027c 	b	2cd14 <CPageAllocator::Allocate()>
   2c320:	0004dae8 	.word	0x0004dae8

0002c324 <pfree>:
   2c324:	e59f300c 	ldr	r3, [pc, #12]	; 2c338 <pfree+0x14>
   2c328:	e1a01000 	mov	r1, r0
   2c32c:	e5930000 	ldr	r0, [r3]
   2c330:	e28000c8 	add	r0, r0, #200	; 0xc8
   2c334:	ea0002a8 	b	2cddc <CPageAllocator::Free(void*)>
   2c338:	0004dae8 	.word	0x0004dae8

0002c33c <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   2c33c:	e5801000 	str	r1, [r0]
   2c340:	e5c02004 	strb	r2, [r0, #4]
   2c344:	e12fff1e 	bx	lr

0002c348 <CBcmMailBox::~CBcmMailBox()>:
   2c348:	e12fff1e 	bx	lr

0002c34c <CBcmMailBox::WriteRead(unsigned int)>:
   2c34c:	e92d4070 	push	{r4, r5, r6, lr}
   2c350:	e3a03000 	mov	r3, #0
   2c354:	e1a05000 	mov	r5, r0
   2c358:	e1a06001 	mov	r6, r1
   2c35c:	e24dd008 	sub	sp, sp, #8
   2c360:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c364:	e5d03004 	ldrb	r3, [r0, #4]
   2c368:	e3530000 	cmp	r3, #0
   2c36c:	1a000003 	bne	2c380 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   2c370:	e59f30dc 	ldr	r3, [pc, #220]	; 2c454 <CBcmMailBox::WriteRead(unsigned int)+0x108>
   2c374:	e5930000 	ldr	r0, [r3]
   2c378:	e3500000 	cmp	r0, #0
   2c37c:	1a000027 	bne	2c420 <CBcmMailBox::WriteRead(unsigned int)+0xd4>
   2c380:	e59f40d0 	ldr	r4, [pc, #208]	; 2c458 <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2c384:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c388:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c38c:	1a000005 	bne	2c3a8 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   2c390:	e3a00014 	mov	r0, #20
   2c394:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2c398:	ebfff650 	bl	29ce0 <CTimer::SimpleMsDelay(unsigned int)>
   2c39c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c3a0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c3a4:	0afffff9 	beq	2c390 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   2c3a8:	e59f00a8 	ldr	r0, [pc, #168]	; 2c458 <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2c3ac:	e59038b8 	ldr	r3, [r0, #2232]	; 0x8b8
   2c3b0:	e3530000 	cmp	r3, #0
   2c3b4:	bafffffc 	blt	2c3ac <CBcmMailBox::WriteRead(unsigned int)+0x60>
   2c3b8:	e316000f 	tst	r6, #15
   2c3bc:	1a000020 	bne	2c444 <CBcmMailBox::WriteRead(unsigned int)+0xf8>
   2c3c0:	e5953000 	ldr	r3, [r5]
   2c3c4:	e59f208c 	ldr	r2, [pc, #140]	; 2c458 <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2c3c8:	e1866003 	orr	r6, r6, r3
   2c3cc:	e58068a0 	str	r6, [r0, #2208]	; 0x8a0
   2c3d0:	e5950000 	ldr	r0, [r5]
   2c3d4:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2c3d8:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c3dc:	1afffffc 	bne	2c3d4 <CBcmMailBox::WriteRead(unsigned int)+0x88>
   2c3e0:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   2c3e4:	e203100f 	and	r1, r3, #15
   2c3e8:	e1510000 	cmp	r1, r0
   2c3ec:	1afffff8 	bne	2c3d4 <CBcmMailBox::WriteRead(unsigned int)+0x88>
   2c3f0:	e5d52004 	ldrb	r2, [r5, #4]
   2c3f4:	e3c3000f 	bic	r0, r3, #15
   2c3f8:	e3520000 	cmp	r2, #0
   2c3fc:	1a000003 	bne	2c410 <CBcmMailBox::WriteRead(unsigned int)+0xc4>
   2c400:	e59f304c 	ldr	r3, [pc, #76]	; 2c454 <CBcmMailBox::WriteRead(unsigned int)+0x108>
   2c404:	e5933000 	ldr	r3, [r3]
   2c408:	e3530000 	cmp	r3, #0
   2c40c:	1a000005 	bne	2c428 <CBcmMailBox::WriteRead(unsigned int)+0xdc>
   2c410:	e3a03000 	mov	r3, #0
   2c414:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c418:	e28dd008 	add	sp, sp, #8
   2c41c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c420:	ebfffdcb 	bl	2bb54 <EnterCritical>
   2c424:	eaffffd5 	b	2c380 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   2c428:	e58d0004 	str	r0, [sp, #4]
   2c42c:	ebfffdf2 	bl	2bbfc <LeaveCritical>
   2c430:	e3a03000 	mov	r3, #0
   2c434:	e59d0004 	ldr	r0, [sp, #4]
   2c438:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c43c:	e28dd008 	add	sp, sp, #8
   2c440:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c444:	e3a02062 	mov	r2, #98	; 0x62
   2c448:	e59f100c 	ldr	r1, [pc, #12]	; 2c45c <CBcmMailBox::WriteRead(unsigned int)+0x110>
   2c44c:	e59f000c 	ldr	r0, [pc, #12]	; 2c460 <CBcmMailBox::WriteRead(unsigned int)+0x114>
   2c450:	ebffe08b 	bl	24684 <assertion_failed>
   2c454:	0004db44 	.word	0x0004db44
   2c458:	2000b000 	.word	0x2000b000
   2c45c:	000455b8 	.word	0x000455b8
   2c460:	000455c8 	.word	0x000455c8

0002c464 <CBcmMailBox::Flush()>:
   2c464:	e92d4010 	push	{r4, lr}
   2c468:	e59f4024 	ldr	r4, [pc, #36]	; 2c494 <CBcmMailBox::Flush()+0x30>
   2c46c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c470:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c474:	18bd8010 	popne	{r4, pc}
   2c478:	e3a00014 	mov	r0, #20
   2c47c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2c480:	ebfff616 	bl	29ce0 <CTimer::SimpleMsDelay(unsigned int)>
   2c484:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c488:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c48c:	0afffff9 	beq	2c478 <CBcmMailBox::Flush()+0x14>
   2c490:	e8bd8010 	pop	{r4, pc}
   2c494:	2000b000 	.word	0x2000b000

0002c498 <CBcmMailBox::Read()>:
   2c498:	e59f2024 	ldr	r2, [pc, #36]	; 2c4c4 <CBcmMailBox::Read()+0x2c>
   2c49c:	e5901000 	ldr	r1, [r0]
   2c4a0:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2c4a4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c4a8:	1afffffc 	bne	2c4a0 <CBcmMailBox::Read()+0x8>
   2c4ac:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   2c4b0:	e200300f 	and	r3, r0, #15
   2c4b4:	e1530001 	cmp	r3, r1
   2c4b8:	1afffff8 	bne	2c4a0 <CBcmMailBox::Read()+0x8>
   2c4bc:	e3c0000f 	bic	r0, r0, #15
   2c4c0:	e12fff1e 	bx	lr
   2c4c4:	2000b000 	.word	0x2000b000

0002c4c8 <CBcmMailBox::Write(unsigned int)>:
   2c4c8:	e59f2034 	ldr	r2, [pc, #52]	; 2c504 <CBcmMailBox::Write(unsigned int)+0x3c>
   2c4cc:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   2c4d0:	e3530000 	cmp	r3, #0
   2c4d4:	bafffffc 	blt	2c4cc <CBcmMailBox::Write(unsigned int)+0x4>
   2c4d8:	e311000f 	tst	r1, #15
   2c4dc:	1a000003 	bne	2c4f0 <CBcmMailBox::Write(unsigned int)+0x28>
   2c4e0:	e5903000 	ldr	r3, [r0]
   2c4e4:	e1811003 	orr	r1, r1, r3
   2c4e8:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   2c4ec:	e12fff1e 	bx	lr
   2c4f0:	e3a02062 	mov	r2, #98	; 0x62
   2c4f4:	e92d4010 	push	{r4, lr}
   2c4f8:	e59f1008 	ldr	r1, [pc, #8]	; 2c508 <CBcmMailBox::Write(unsigned int)+0x40>
   2c4fc:	e59f0008 	ldr	r0, [pc, #8]	; 2c50c <CBcmMailBox::Write(unsigned int)+0x44>
   2c500:	ebffe05f 	bl	24684 <assertion_failed>
   2c504:	2000b000 	.word	0x2000b000
   2c508:	000455b8 	.word	0x000455b8
   2c50c:	000455c8 	.word	0x000455c8

0002c510 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   2c510:	e3a02000 	mov	r2, #0
   2c514:	e59f3004 	ldr	r3, [pc, #4]	; 2c520 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   2c518:	e5832000 	str	r2, [r3]
   2c51c:	e12fff1e 	bx	lr
   2c520:	0004db44 	.word	0x0004db44
   2c524:	00000000 	.word	0x00000000

0002c528 <DelayLoop>:
   2c528:	e1a01001 	mov	r1, r1
   2c52c:	e1a02002 	mov	r2, r2
   2c530:	e2500001 	subs	r0, r0, #1
   2c534:	8afffffb 	bhi	2c528 <DelayLoop>
   2c538:	e1a0f00e 	mov	pc, lr

0002c53c <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   2c53c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2c540:	e3a0e000 	mov	lr, #0
   2c544:	e1a03000 	mov	r3, r0
   2c548:	e1a0c00e 	mov	ip, lr
   2c54c:	e5801000 	str	r1, [r0]
   2c550:	e28020dc 	add	r2, r0, #220	; 0xdc
   2c554:	e5e3e004 	strb	lr, [r3, #4]!
   2c558:	e5a3c004 	str	ip, [r3, #4]!
   2c55c:	e1530002 	cmp	r3, r2
   2c560:	1afffffc 	bne	2c558 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   2c564:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002c568 <CGPIOManager::~CGPIOManager()>:
   2c568:	e92d4010 	push	{r4, lr}
   2c56c:	e2803004 	add	r3, r0, #4
   2c570:	e1a04000 	mov	r4, r0
   2c574:	e28010dc 	add	r1, r0, #220	; 0xdc
   2c578:	ea000001 	b	2c584 <CGPIOManager::~CGPIOManager()+0x1c>
   2c57c:	e1530001 	cmp	r3, r1
   2c580:	0a000006 	beq	2c5a0 <CGPIOManager::~CGPIOManager()+0x38>
   2c584:	e5b32004 	ldr	r2, [r3, #4]!
   2c588:	e3520000 	cmp	r2, #0
   2c58c:	0afffffa 	beq	2c57c <CGPIOManager::~CGPIOManager()+0x14>
   2c590:	e3a0202c 	mov	r2, #44	; 0x2c
   2c594:	e59f103c 	ldr	r1, [pc, #60]	; 2c5d8 <CGPIOManager::~CGPIOManager()+0x70>
   2c598:	e59f003c 	ldr	r0, [pc, #60]	; 2c5dc <CGPIOManager::~CGPIOManager()+0x74>
   2c59c:	ebffe038 	bl	24684 <assertion_failed>
   2c5a0:	e5d43004 	ldrb	r3, [r4, #4]
   2c5a4:	e3530000 	cmp	r3, #0
   2c5a8:	0a000004 	beq	2c5c0 <CGPIOManager::~CGPIOManager()+0x58>
   2c5ac:	e5940000 	ldr	r0, [r4]
   2c5b0:	e3500000 	cmp	r0, #0
   2c5b4:	0a000003 	beq	2c5c8 <CGPIOManager::~CGPIOManager()+0x60>
   2c5b8:	e3a01034 	mov	r1, #52	; 0x34
   2c5bc:	ebfffe96 	bl	2c01c <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2c5c0:	e1a00004 	mov	r0, r4
   2c5c4:	e8bd8010 	pop	{r4, pc}
   2c5c8:	e3a02032 	mov	r2, #50	; 0x32
   2c5cc:	e59f1004 	ldr	r1, [pc, #4]	; 2c5d8 <CGPIOManager::~CGPIOManager()+0x70>
   2c5d0:	e59f0008 	ldr	r0, [pc, #8]	; 2c5e0 <CGPIOManager::~CGPIOManager()+0x78>
   2c5d4:	ebffe02a 	bl	24684 <assertion_failed>
   2c5d8:	000455dc 	.word	0x000455dc
   2c5dc:	000455ec 	.word	0x000455ec
   2c5e0:	00045600 	.word	0x00045600

0002c5e4 <CGPIOManager::Initialize()>:
   2c5e4:	e5d03004 	ldrb	r3, [r0, #4]
   2c5e8:	e92d4010 	push	{r4, lr}
   2c5ec:	e3530000 	cmp	r3, #0
   2c5f0:	1a00000a 	bne	2c620 <CGPIOManager::Initialize()+0x3c>
   2c5f4:	e1a04000 	mov	r4, r0
   2c5f8:	e5900000 	ldr	r0, [r0]
   2c5fc:	e3500000 	cmp	r0, #0
   2c600:	0a00000a 	beq	2c630 <CGPIOManager::Initialize()+0x4c>
   2c604:	e1a03004 	mov	r3, r4
   2c608:	e3a01034 	mov	r1, #52	; 0x34
   2c60c:	e59f202c 	ldr	r2, [pc, #44]	; 2c640 <CGPIOManager::Initialize()+0x5c>
   2c610:	ebfffe4d 	bl	2bf4c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2c614:	e3a00001 	mov	r0, #1
   2c618:	e5c40004 	strb	r0, [r4, #4]
   2c61c:	e8bd8010 	pop	{r4, pc}
   2c620:	e3a0203b 	mov	r2, #59	; 0x3b
   2c624:	e59f1018 	ldr	r1, [pc, #24]	; 2c644 <CGPIOManager::Initialize()+0x60>
   2c628:	e59f0018 	ldr	r0, [pc, #24]	; 2c648 <CGPIOManager::Initialize()+0x64>
   2c62c:	ebffe014 	bl	24684 <assertion_failed>
   2c630:	e3a0203c 	mov	r2, #60	; 0x3c
   2c634:	e59f1008 	ldr	r1, [pc, #8]	; 2c644 <CGPIOManager::Initialize()+0x60>
   2c638:	e59f000c 	ldr	r0, [pc, #12]	; 2c64c <CGPIOManager::Initialize()+0x68>
   2c63c:	ebffe010 	bl	24684 <assertion_failed>
   2c640:	0002c840 	.word	0x0002c840
   2c644:	000455dc 	.word	0x000455dc
   2c648:	00045614 	.word	0x00045614
   2c64c:	00045600 	.word	0x00045600

0002c650 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   2c650:	e5d03004 	ldrb	r3, [r0, #4]
   2c654:	e92d4010 	push	{r4, lr}
   2c658:	e3530000 	cmp	r3, #0
   2c65c:	0a00000a 	beq	2c68c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   2c660:	e3510000 	cmp	r1, #0
   2c664:	0a00000c 	beq	2c69c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   2c668:	e5913004 	ldr	r3, [r1, #4]
   2c66c:	e3530035 	cmp	r3, #53	; 0x35
   2c670:	8a00000d 	bhi	2c6ac <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
   2c674:	e0800103 	add	r0, r0, r3, lsl #2
   2c678:	e5903008 	ldr	r3, [r0, #8]
   2c67c:	e3530000 	cmp	r3, #0
   2c680:	1a00000d 	bne	2c6bc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   2c684:	e5801008 	str	r1, [r0, #8]
   2c688:	e8bd8010 	pop	{r4, pc}
   2c68c:	e3a02045 	mov	r2, #69	; 0x45
   2c690:	e59f1034 	ldr	r1, [pc, #52]	; 2c6cc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c694:	e59f0034 	ldr	r0, [pc, #52]	; 2c6d0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x80>
   2c698:	ebffdff9 	bl	24684 <assertion_failed>
   2c69c:	e3a02047 	mov	r2, #71	; 0x47
   2c6a0:	e59f1024 	ldr	r1, [pc, #36]	; 2c6cc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c6a4:	e59f0028 	ldr	r0, [pc, #40]	; 2c6d4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   2c6a8:	ebffdff5 	bl	24684 <assertion_failed>
   2c6ac:	e3a02049 	mov	r2, #73	; 0x49
   2c6b0:	e59f1014 	ldr	r1, [pc, #20]	; 2c6cc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c6b4:	e59f001c 	ldr	r0, [pc, #28]	; 2c6d8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x88>
   2c6b8:	ebffdff1 	bl	24684 <assertion_failed>
   2c6bc:	e3a0204b 	mov	r2, #75	; 0x4b
   2c6c0:	e59f1004 	ldr	r1, [pc, #4]	; 2c6cc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c6c4:	e59f0010 	ldr	r0, [pc, #16]	; 2c6dc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x8c>
   2c6c8:	ebffdfed 	bl	24684 <assertion_failed>
   2c6cc:	000455dc 	.word	0x000455dc
   2c6d0:	00045628 	.word	0x00045628
   2c6d4:	00045638 	.word	0x00045638
   2c6d8:	00045644 	.word	0x00045644
   2c6dc:	000455ec 	.word	0x000455ec

0002c6e0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   2c6e0:	e5d03004 	ldrb	r3, [r0, #4]
   2c6e4:	e92d4010 	push	{r4, lr}
   2c6e8:	e3530000 	cmp	r3, #0
   2c6ec:	0a00000b 	beq	2c720 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   2c6f0:	e3510000 	cmp	r1, #0
   2c6f4:	0a00000d 	beq	2c730 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x50>
   2c6f8:	e5913004 	ldr	r3, [r1, #4]
   2c6fc:	e3530035 	cmp	r3, #53	; 0x35
   2c700:	8a00000e 	bhi	2c740 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x60>
   2c704:	e0800103 	add	r0, r0, r3, lsl #2
   2c708:	e5903008 	ldr	r3, [r0, #8]
   2c70c:	e3530000 	cmp	r3, #0
   2c710:	0a00000e 	beq	2c750 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   2c714:	e3a03000 	mov	r3, #0
   2c718:	e5803008 	str	r3, [r0, #8]
   2c71c:	e8bd8010 	pop	{r4, pc}
   2c720:	e3a02052 	mov	r2, #82	; 0x52
   2c724:	e59f1034 	ldr	r1, [pc, #52]	; 2c760 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c728:	e59f0034 	ldr	r0, [pc, #52]	; 2c764 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x84>
   2c72c:	ebffdfd4 	bl	24684 <assertion_failed>
   2c730:	e3a02054 	mov	r2, #84	; 0x54
   2c734:	e59f1024 	ldr	r1, [pc, #36]	; 2c760 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c738:	e59f0028 	ldr	r0, [pc, #40]	; 2c768 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   2c73c:	ebffdfd0 	bl	24684 <assertion_failed>
   2c740:	e3a02056 	mov	r2, #86	; 0x56
   2c744:	e59f1014 	ldr	r1, [pc, #20]	; 2c760 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c748:	e59f001c 	ldr	r0, [pc, #28]	; 2c76c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
   2c74c:	ebffdfcc 	bl	24684 <assertion_failed>
   2c750:	e3a02058 	mov	r2, #88	; 0x58
   2c754:	e59f1004 	ldr	r1, [pc, #4]	; 2c760 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c758:	e59f0010 	ldr	r0, [pc, #16]	; 2c770 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   2c75c:	ebffdfc8 	bl	24684 <assertion_failed>
   2c760:	000455dc 	.word	0x000455dc
   2c764:	00045628 	.word	0x00045628
   2c768:	00045638 	.word	0x00045638
   2c76c:	00045644 	.word	0x00045644
   2c770:	00045658 	.word	0x00045658

0002c774 <CGPIOManager::InterruptHandler()>:
   2c774:	e5d03004 	ldrb	r3, [r0, #4]
   2c778:	e92d4070 	push	{r4, r5, r6, lr}
   2c77c:	e3530000 	cmp	r3, #0
   2c780:	0a000025 	beq	2c81c <CGPIOManager::InterruptHandler()+0xa8>
   2c784:	e3a04000 	mov	r4, #0
   2c788:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2c78c:	e59f2098 	ldr	r2, [pc, #152]	; 2c82c <CGPIOManager::InterruptHandler()+0xb8>
   2c790:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   2c794:	ea000005 	b	2c7b0 <CGPIOManager::InterruptHandler()+0x3c>
   2c798:	e2844001 	add	r4, r4, #1
   2c79c:	e314001f 	tst	r4, #31
   2c7a0:	11a030a3 	lsrne	r3, r3, #1
   2c7a4:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   2c7a8:	e3540036 	cmp	r4, #54	; 0x36
   2c7ac:	0a00000d 	beq	2c7e8 <CGPIOManager::InterruptHandler()+0x74>
   2c7b0:	e3130001 	tst	r3, #1
   2c7b4:	0afffff7 	beq	2c798 <CGPIOManager::InterruptHandler()+0x24>
   2c7b8:	e2843002 	add	r3, r4, #2
   2c7bc:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   2c7c0:	e3550000 	cmp	r5, #0
   2c7c4:	0a00000a 	beq	2c7f4 <CGPIOManager::InterruptHandler()+0x80>
   2c7c8:	e1a00005 	mov	r0, r5
   2c7cc:	ebffe5cc 	bl	25f04 <CGPIOPin::InterruptHandler()>
   2c7d0:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   2c7d4:	e3530000 	cmp	r3, #0
   2c7d8:	1595100c 	ldrne	r1, [r5, #12]
   2c7dc:	15952008 	ldrne	r2, [r5, #8]
   2c7e0:	159f3048 	ldrne	r3, [pc, #72]	; 2c830 <CGPIOManager::InterruptHandler()+0xbc>
   2c7e4:	17821003 	strne	r1, [r2, r3]
   2c7e8:	e3a03000 	mov	r3, #0
   2c7ec:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c7f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c7f4:	e1a00004 	mov	r0, r4
   2c7f8:	ebffe5e2 	bl	25f88 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   2c7fc:	e3a02001 	mov	r2, #1
   2c800:	e59f302c 	ldr	r3, [pc, #44]	; 2c834 <CGPIOManager::InterruptHandler()+0xc0>
   2c804:	e204101f 	and	r1, r4, #31
   2c808:	e08332a4 	add	r3, r3, r4, lsr #5
   2c80c:	e1a03103 	lsl	r3, r3, #2
   2c810:	e1a02112 	lsl	r2, r2, r1
   2c814:	e5832000 	str	r2, [r3]
   2c818:	eafffff2 	b	2c7e8 <CGPIOManager::InterruptHandler()+0x74>
   2c81c:	e3a0205e 	mov	r2, #94	; 0x5e
   2c820:	e59f1010 	ldr	r1, [pc, #16]	; 2c838 <CGPIOManager::InterruptHandler()+0xc4>
   2c824:	e59f0010 	ldr	r0, [pc, #16]	; 2c83c <CGPIOManager::InterruptHandler()+0xc8>
   2c828:	ebffdf95 	bl	24684 <assertion_failed>
   2c82c:	20200000 	.word	0x20200000
   2c830:	20200040 	.word	0x20200040
   2c834:	08080010 	.word	0x08080010
   2c838:	000455dc 	.word	0x000455dc
   2c83c:	00045628 	.word	0x00045628

0002c840 <CGPIOManager::InterruptStub(void*)>:
   2c840:	e3500000 	cmp	r0, #0
   2c844:	0a000000 	beq	2c84c <CGPIOManager::InterruptStub(void*)+0xc>
   2c848:	eaffffc9 	b	2c774 <CGPIOManager::InterruptHandler()>
   2c84c:	e3a0208e 	mov	r2, #142	; 0x8e
   2c850:	e92d4010 	push	{r4, lr}
   2c854:	e59f1004 	ldr	r1, [pc, #4]	; 2c860 <CGPIOManager::InterruptStub(void*)+0x20>
   2c858:	e59f0004 	ldr	r0, [pc, #4]	; 2c864 <CGPIOManager::InterruptStub(void*)+0x24>
   2c85c:	ebffdf88 	bl	24684 <assertion_failed>
   2c860:	000455dc 	.word	0x000455dc
   2c864:	0003eaf4 	.word	0x0003eaf4

0002c868 <CPtrList::CPtrList()>:
   2c868:	e3a02000 	mov	r2, #0
   2c86c:	e5802000 	str	r2, [r0]
   2c870:	e12fff1e 	bx	lr

0002c874 <CPtrList::~CPtrList()>:
   2c874:	e5903000 	ldr	r3, [r0]
   2c878:	e3530000 	cmp	r3, #0
   2c87c:	012fff1e 	bxeq	lr
   2c880:	e3a0202a 	mov	r2, #42	; 0x2a
   2c884:	e92d4010 	push	{r4, lr}
   2c888:	e59f1004 	ldr	r1, [pc, #4]	; 2c894 <CPtrList::~CPtrList()+0x20>
   2c88c:	e59f0004 	ldr	r0, [pc, #4]	; 2c898 <CPtrList::~CPtrList()+0x24>
   2c890:	ebffdf7b 	bl	24684 <assertion_failed>
   2c894:	0004566c 	.word	0x0004566c
   2c898:	00045678 	.word	0x00045678

0002c89c <CPtrList::GetFirst()>:
   2c89c:	e5900000 	ldr	r0, [r0]
   2c8a0:	e12fff1e 	bx	lr

0002c8a4 <CPtrList::GetNext(TPtrListElement*)>:
   2c8a4:	e3510000 	cmp	r1, #0
   2c8a8:	e92d4010 	push	{r4, lr}
   2c8ac:	0a000005 	beq	2c8c8 <CPtrList::GetNext(TPtrListElement*)+0x24>
   2c8b0:	e59f3030 	ldr	r3, [pc, #48]	; 2c8e8 <CPtrList::GetNext(TPtrListElement*)+0x44>
   2c8b4:	e5912000 	ldr	r2, [r1]
   2c8b8:	e1520003 	cmp	r2, r3
   2c8bc:	1a000005 	bne	2c8d8 <CPtrList::GetNext(TPtrListElement*)+0x34>
   2c8c0:	e5910008 	ldr	r0, [r1, #8]
   2c8c4:	e8bd8010 	pop	{r4, pc}
   2c8c8:	e3a02034 	mov	r2, #52	; 0x34
   2c8cc:	e59f1018 	ldr	r1, [pc, #24]	; 2c8ec <CPtrList::GetNext(TPtrListElement*)+0x48>
   2c8d0:	e59f0018 	ldr	r0, [pc, #24]	; 2c8f0 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   2c8d4:	ebffdf6a 	bl	24684 <assertion_failed>
   2c8d8:	e3a02035 	mov	r2, #53	; 0x35
   2c8dc:	e59f1008 	ldr	r1, [pc, #8]	; 2c8ec <CPtrList::GetNext(TPtrListElement*)+0x48>
   2c8e0:	e59f000c 	ldr	r0, [pc, #12]	; 2c8f4 <CPtrList::GetNext(TPtrListElement*)+0x50>
   2c8e4:	ebffdf66 	bl	24684 <assertion_failed>
   2c8e8:	504c4d43 	.word	0x504c4d43
   2c8ec:	0004566c 	.word	0x0004566c
   2c8f0:	00045688 	.word	0x00045688
   2c8f4:	00045698 	.word	0x00045698

0002c8f8 <CPtrList::GetPtr(TPtrListElement*)>:
   2c8f8:	e3510000 	cmp	r1, #0
   2c8fc:	e92d4010 	push	{r4, lr}
   2c900:	0a000005 	beq	2c91c <CPtrList::GetPtr(TPtrListElement*)+0x24>
   2c904:	e59f3030 	ldr	r3, [pc, #48]	; 2c93c <CPtrList::GetPtr(TPtrListElement*)+0x44>
   2c908:	e5912000 	ldr	r2, [r1]
   2c90c:	e1520003 	cmp	r2, r3
   2c910:	1a000005 	bne	2c92c <CPtrList::GetPtr(TPtrListElement*)+0x34>
   2c914:	e591000c 	ldr	r0, [r1, #12]
   2c918:	e8bd8010 	pop	{r4, pc}
   2c91c:	e3a0203c 	mov	r2, #60	; 0x3c
   2c920:	e59f1018 	ldr	r1, [pc, #24]	; 2c940 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   2c924:	e59f0018 	ldr	r0, [pc, #24]	; 2c944 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   2c928:	ebffdf55 	bl	24684 <assertion_failed>
   2c92c:	e3a0203d 	mov	r2, #61	; 0x3d
   2c930:	e59f1008 	ldr	r1, [pc, #8]	; 2c940 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   2c934:	e59f000c 	ldr	r0, [pc, #12]	; 2c948 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   2c938:	ebffdf51 	bl	24684 <assertion_failed>
   2c93c:	504c4d43 	.word	0x504c4d43
   2c940:	0004566c 	.word	0x0004566c
   2c944:	00045688 	.word	0x00045688
   2c948:	00045698 	.word	0x00045698

0002c94c <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   2c94c:	e92d4070 	push	{r4, r5, r6, lr}
   2c950:	e1a05000 	mov	r5, r0
   2c954:	e3a00010 	mov	r0, #16
   2c958:	e1a06002 	mov	r6, r2
   2c95c:	e1a04001 	mov	r4, r1
   2c960:	ebfff94e 	bl	2aea0 <operator new(unsigned int)>
   2c964:	e5953000 	ldr	r3, [r5]
   2c968:	e59f20ac 	ldr	r2, [pc, #172]	; 2ca1c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2c96c:	e3530000 	cmp	r3, #0
   2c970:	e580600c 	str	r6, [r0, #12]
   2c974:	e5802000 	str	r2, [r0]
   2c978:	0a000017 	beq	2c9dc <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
   2c97c:	e3540000 	cmp	r4, #0
   2c980:	0a000019 	beq	2c9ec <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   2c984:	e5941000 	ldr	r1, [r4]
   2c988:	e1510002 	cmp	r1, r2
   2c98c:	1a00001a 	bne	2c9fc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb0>
   2c990:	e1530004 	cmp	r3, r4
   2c994:	0a00000a 	beq	2c9c4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   2c998:	e5943004 	ldr	r3, [r4, #4]
   2c99c:	e5804008 	str	r4, [r0, #8]
   2c9a0:	e3530000 	cmp	r3, #0
   2c9a4:	e5803004 	str	r3, [r0, #4]
   2c9a8:	0a000003 	beq	2c9bc <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   2c9ac:	e5932000 	ldr	r2, [r3]
   2c9b0:	e1520001 	cmp	r2, r1
   2c9b4:	05830008 	streq	r0, [r3, #8]
   2c9b8:	1a000013 	bne	2ca0c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   2c9bc:	e5840004 	str	r0, [r4, #4]
   2c9c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c9c4:	e3a02000 	mov	r2, #0
   2c9c8:	e5830004 	str	r0, [r3, #4]
   2c9cc:	e5803008 	str	r3, [r0, #8]
   2c9d0:	e5850000 	str	r0, [r5]
   2c9d4:	e5802004 	str	r2, [r0, #4]
   2c9d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c9dc:	e3a0204c 	mov	r2, #76	; 0x4c
   2c9e0:	e59f1038 	ldr	r1, [pc, #56]	; 2ca20 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   2c9e4:	e59f0038 	ldr	r0, [pc, #56]	; 2ca24 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   2c9e8:	ebffdf25 	bl	24684 <assertion_failed>
   2c9ec:	e3a0204d 	mov	r2, #77	; 0x4d
   2c9f0:	e59f1028 	ldr	r1, [pc, #40]	; 2ca20 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   2c9f4:	e59f002c 	ldr	r0, [pc, #44]	; 2ca28 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xdc>
   2c9f8:	ebffdf21 	bl	24684 <assertion_failed>
   2c9fc:	e3a0204e 	mov	r2, #78	; 0x4e
   2ca00:	e59f1018 	ldr	r1, [pc, #24]	; 2ca20 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   2ca04:	e59f0020 	ldr	r0, [pc, #32]	; 2ca2c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   2ca08:	ebffdf1d 	bl	24684 <assertion_failed>
   2ca0c:	e3a02060 	mov	r2, #96	; 0x60
   2ca10:	e59f1008 	ldr	r1, [pc, #8]	; 2ca20 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   2ca14:	e59f0014 	ldr	r0, [pc, #20]	; 2ca30 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe4>
   2ca18:	ebffdf19 	bl	24684 <assertion_failed>
   2ca1c:	504c4d43 	.word	0x504c4d43
   2ca20:	0004566c 	.word	0x0004566c
   2ca24:	000456bc 	.word	0x000456bc
   2ca28:	000456cc 	.word	0x000456cc
   2ca2c:	000456d8 	.word	0x000456d8
   2ca30:	000456fc 	.word	0x000456fc

0002ca34 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   2ca34:	e92d4070 	push	{r4, r5, r6, lr}
   2ca38:	e1a04001 	mov	r4, r1
   2ca3c:	e1a05000 	mov	r5, r0
   2ca40:	e3a00010 	mov	r0, #16
   2ca44:	e1a06002 	mov	r6, r2
   2ca48:	ebfff914 	bl	2aea0 <operator new(unsigned int)>
   2ca4c:	e59f30ac 	ldr	r3, [pc, #172]	; 2cb00 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   2ca50:	e3540000 	cmp	r4, #0
   2ca54:	e580600c 	str	r6, [r0, #12]
   2ca58:	e5803000 	str	r3, [r0]
   2ca5c:	0a000010 	beq	2caa4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x70>
   2ca60:	e5952000 	ldr	r2, [r5]
   2ca64:	e3520000 	cmp	r2, #0
   2ca68:	0a000014 	beq	2cac0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x8c>
   2ca6c:	e5942000 	ldr	r2, [r4]
   2ca70:	e1520003 	cmp	r2, r3
   2ca74:	1a000015 	bne	2cad0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   2ca78:	e5943008 	ldr	r3, [r4, #8]
   2ca7c:	e5804004 	str	r4, [r0, #4]
   2ca80:	e3530000 	cmp	r3, #0
   2ca84:	e5803008 	str	r3, [r0, #8]
   2ca88:	0a000003 	beq	2ca9c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x68>
   2ca8c:	e5931000 	ldr	r1, [r3]
   2ca90:	e1510002 	cmp	r1, r2
   2ca94:	05830004 	streq	r0, [r3, #4]
   2ca98:	1a000010 	bne	2cae0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xac>
   2ca9c:	e5840008 	str	r0, [r4, #8]
   2caa0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2caa4:	e5953000 	ldr	r3, [r5]
   2caa8:	e3530000 	cmp	r3, #0
   2caac:	1a00000f 	bne	2caf0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   2cab0:	e5803004 	str	r3, [r0, #4]
   2cab4:	e5803008 	str	r3, [r0, #8]
   2cab8:	e5850000 	str	r0, [r5]
   2cabc:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cac0:	e3a0207d 	mov	r2, #125	; 0x7d
   2cac4:	e59f1038 	ldr	r1, [pc, #56]	; 2cb04 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2cac8:	e59f0038 	ldr	r0, [pc, #56]	; 2cb08 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd4>
   2cacc:	ebffdeec 	bl	24684 <assertion_failed>
   2cad0:	e3a0207e 	mov	r2, #126	; 0x7e
   2cad4:	e59f1028 	ldr	r1, [pc, #40]	; 2cb04 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2cad8:	e59f002c 	ldr	r0, [pc, #44]	; 2cb0c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   2cadc:	ebffdee8 	bl	24684 <assertion_failed>
   2cae0:	e3a02085 	mov	r2, #133	; 0x85
   2cae4:	e59f1018 	ldr	r1, [pc, #24]	; 2cb04 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2cae8:	e59f0020 	ldr	r0, [pc, #32]	; 2cb10 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   2caec:	ebffdee4 	bl	24684 <assertion_failed>
   2caf0:	e3a02074 	mov	r2, #116	; 0x74
   2caf4:	e59f1008 	ldr	r1, [pc, #8]	; 2cb04 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2caf8:	e59f0014 	ldr	r0, [pc, #20]	; 2cb14 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   2cafc:	ebffdee0 	bl	24684 <assertion_failed>
   2cb00:	504c4d43 	.word	0x504c4d43
   2cb04:	0004566c 	.word	0x0004566c
   2cb08:	000456bc 	.word	0x000456bc
   2cb0c:	00045724 	.word	0x00045724
   2cb10:	00045748 	.word	0x00045748
   2cb14:	00045678 	.word	0x00045678

0002cb18 <CPtrList::Remove(TPtrListElement*)>:
   2cb18:	e3510000 	cmp	r1, #0
   2cb1c:	e92d4010 	push	{r4, lr}
   2cb20:	0a000029 	beq	2cbcc <CPtrList::Remove(TPtrListElement*)+0xb4>
   2cb24:	e59f20e0 	ldr	r2, [pc, #224]	; 2cc0c <CPtrList::Remove(TPtrListElement*)+0xf4>
   2cb28:	e5913000 	ldr	r3, [r1]
   2cb2c:	e1530002 	cmp	r3, r2
   2cb30:	1a000029 	bne	2cbdc <CPtrList::Remove(TPtrListElement*)+0xc4>
   2cb34:	e5902000 	ldr	r2, [r0]
   2cb38:	e1520001 	cmp	r2, r1
   2cb3c:	0a000011 	beq	2cb88 <CPtrList::Remove(TPtrListElement*)+0x70>
   2cb40:	e5912004 	ldr	r2, [r1, #4]
   2cb44:	e3520000 	cmp	r2, #0
   2cb48:	0a000027 	beq	2cbec <CPtrList::Remove(TPtrListElement*)+0xd4>
   2cb4c:	e5920000 	ldr	r0, [r2]
   2cb50:	e1500003 	cmp	r0, r3
   2cb54:	1a000018 	bne	2cbbc <CPtrList::Remove(TPtrListElement*)+0xa4>
   2cb58:	e5913008 	ldr	r3, [r1, #8]
   2cb5c:	e3530000 	cmp	r3, #0
   2cb60:	e5823008 	str	r3, [r2, #8]
   2cb64:	0a000003 	beq	2cb78 <CPtrList::Remove(TPtrListElement*)+0x60>
   2cb68:	e593c000 	ldr	ip, [r3]
   2cb6c:	e15c0000 	cmp	ip, r0
   2cb70:	05832004 	streq	r2, [r3, #4]
   2cb74:	1a000020 	bne	2cbfc <CPtrList::Remove(TPtrListElement*)+0xe4>
   2cb78:	e8bd4010 	pop	{r4, lr}
   2cb7c:	e1a00001 	mov	r0, r1
   2cb80:	e3a01010 	mov	r1, #16
   2cb84:	eafff8d3 	b	2aed8 <operator delete(void*, unsigned int)>
   2cb88:	e5922008 	ldr	r2, [r2, #8]
   2cb8c:	e3520000 	cmp	r2, #0
   2cb90:	e5802000 	str	r2, [r0]
   2cb94:	0afffff7 	beq	2cb78 <CPtrList::Remove(TPtrListElement*)+0x60>
   2cb98:	e5920000 	ldr	r0, [r2]
   2cb9c:	e1500003 	cmp	r0, r3
   2cba0:	03a03000 	moveq	r3, #0
   2cba4:	05823004 	streq	r3, [r2, #4]
   2cba8:	0afffff2 	beq	2cb78 <CPtrList::Remove(TPtrListElement*)+0x60>
   2cbac:	e3a02098 	mov	r2, #152	; 0x98
   2cbb0:	e59f1058 	ldr	r1, [pc, #88]	; 2cc10 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2cbb4:	e59f0058 	ldr	r0, [pc, #88]	; 2cc14 <CPtrList::Remove(TPtrListElement*)+0xfc>
   2cbb8:	ebffdeb1 	bl	24684 <assertion_failed>
   2cbbc:	e3a0209f 	mov	r2, #159	; 0x9f
   2cbc0:	e59f1048 	ldr	r1, [pc, #72]	; 2cc10 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2cbc4:	e59f004c 	ldr	r0, [pc, #76]	; 2cc18 <CPtrList::Remove(TPtrListElement*)+0x100>
   2cbc8:	ebffdead 	bl	24684 <assertion_failed>
   2cbcc:	e3a0208f 	mov	r2, #143	; 0x8f
   2cbd0:	e59f1038 	ldr	r1, [pc, #56]	; 2cc10 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2cbd4:	e59f0040 	ldr	r0, [pc, #64]	; 2cc1c <CPtrList::Remove(TPtrListElement*)+0x104>
   2cbd8:	ebffdea9 	bl	24684 <assertion_failed>
   2cbdc:	e3a02090 	mov	r2, #144	; 0x90
   2cbe0:	e59f1028 	ldr	r1, [pc, #40]	; 2cc10 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2cbe4:	e59f0034 	ldr	r0, [pc, #52]	; 2cc20 <CPtrList::Remove(TPtrListElement*)+0x108>
   2cbe8:	ebffdea5 	bl	24684 <assertion_failed>
   2cbec:	e3a0209e 	mov	r2, #158	; 0x9e
   2cbf0:	e59f1018 	ldr	r1, [pc, #24]	; 2cc10 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2cbf4:	e59f0028 	ldr	r0, [pc, #40]	; 2cc24 <CPtrList::Remove(TPtrListElement*)+0x10c>
   2cbf8:	ebffdea1 	bl	24684 <assertion_failed>
   2cbfc:	e3a020a4 	mov	r2, #164	; 0xa4
   2cc00:	e59f1008 	ldr	r1, [pc, #8]	; 2cc10 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2cc04:	e59f0008 	ldr	r0, [pc, #8]	; 2cc14 <CPtrList::Remove(TPtrListElement*)+0xfc>
   2cc08:	ebffde9d 	bl	24684 <assertion_failed>
   2cc0c:	504c4d43 	.word	0x504c4d43
   2cc10:	0004566c 	.word	0x0004566c
   2cc14:	00045774 	.word	0x00045774
   2cc18:	000457b8 	.word	0x000457b8
   2cc1c:	00045688 	.word	0x00045688
   2cc20:	00045698 	.word	0x00045698
   2cc24:	000457a0 	.word	0x000457a0

0002cc28 <CPtrList::Find(void*)>:
   2cc28:	e5900000 	ldr	r0, [r0]
   2cc2c:	e3500000 	cmp	r0, #0
   2cc30:	012fff1e 	bxeq	lr
   2cc34:	e59f2038 	ldr	r2, [pc, #56]	; 2cc74 <CPtrList::Find(void*)+0x4c>
   2cc38:	ea000005 	b	2cc54 <CPtrList::Find(void*)+0x2c>
   2cc3c:	e590300c 	ldr	r3, [r0, #12]
   2cc40:	e1530001 	cmp	r3, r1
   2cc44:	012fff1e 	bxeq	lr
   2cc48:	e5900008 	ldr	r0, [r0, #8]
   2cc4c:	e3500000 	cmp	r0, #0
   2cc50:	012fff1e 	bxeq	lr
   2cc54:	e5903000 	ldr	r3, [r0]
   2cc58:	e1530002 	cmp	r3, r2
   2cc5c:	0afffff6 	beq	2cc3c <CPtrList::Find(void*)+0x14>
   2cc60:	e3a020b3 	mov	r2, #179	; 0xb3
   2cc64:	e92d4010 	push	{r4, lr}
   2cc68:	e59f1008 	ldr	r1, [pc, #8]	; 2cc78 <CPtrList::Find(void*)+0x50>
   2cc6c:	e59f0008 	ldr	r0, [pc, #8]	; 2cc7c <CPtrList::Find(void*)+0x54>
   2cc70:	ebffde83 	bl	24684 <assertion_failed>
   2cc74:	504c4d43 	.word	0x504c4d43
   2cc78:	0004566c 	.word	0x0004566c
   2cc7c:	00045698 	.word	0x00045698

0002cc80 <CPageAllocator::CPageAllocator()>:
   2cc80:	e3a02000 	mov	r2, #0
   2cc84:	e3a01001 	mov	r1, #1
   2cc88:	e5802000 	str	r2, [r0]
   2cc8c:	e580100c 	str	r1, [r0, #12]
   2cc90:	e5802004 	str	r2, [r0, #4]
   2cc94:	e5802008 	str	r2, [r0, #8]
   2cc98:	e12fff1e 	bx	lr

0002cc9c <CPageAllocator::~CPageAllocator()>:
   2cc9c:	e12fff1e 	bx	lr

0002cca0 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   2cca0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2cca4:	e28db000 	add	fp, sp, #0
   2cca8:	e24dd014 	sub	sp, sp, #20
   2ccac:	e50b0008 	str	r0, [fp, #-8]
   2ccb0:	e50b100c 	str	r1, [fp, #-12]
   2ccb4:	e50b2010 	str	r2, [fp, #-16]
   2ccb8:	e51b300c 	ldr	r3, [fp, #-12]
   2ccbc:	e2833eff 	add	r3, r3, #4080	; 0xff0
   2ccc0:	e283300f 	add	r3, r3, #15
   2ccc4:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2ccc8:	e3c3300f 	bic	r3, r3, #15
   2cccc:	e1a02003 	mov	r2, r3
   2ccd0:	e51b3008 	ldr	r3, [fp, #-8]
   2ccd4:	e5832000 	str	r2, [r3]
   2ccd8:	e51b200c 	ldr	r2, [fp, #-12]
   2ccdc:	e51b3010 	ldr	r3, [fp, #-16]
   2cce0:	e0823003 	add	r3, r2, r3
   2cce4:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2cce8:	e3c3300f 	bic	r3, r3, #15
   2ccec:	e1a02003 	mov	r2, r3
   2ccf0:	e51b3008 	ldr	r3, [fp, #-8]
   2ccf4:	e5832004 	str	r2, [r3, #4]
   2ccf8:	e320f000 	nop	{0}
   2ccfc:	e28bd000 	add	sp, fp, #0
   2cd00:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2cd04:	e12fff1e 	bx	lr

0002cd08 <CPageAllocator::GetFreeSpace() const>:
   2cd08:	e8900005 	ldm	r0, {r0, r2}
   2cd0c:	e0420000 	sub	r0, r2, r0
   2cd10:	e12fff1e 	bx	lr

0002cd14 <CPageAllocator::Allocate()>:
   2cd14:	e5903000 	ldr	r3, [r0]
   2cd18:	e92d4070 	push	{r4, r5, r6, lr}
   2cd1c:	e3530000 	cmp	r3, #0
   2cd20:	0a000023 	beq	2cdb4 <CPageAllocator::Allocate()+0xa0>
   2cd24:	e1a04000 	mov	r4, r0
   2cd28:	e590000c 	ldr	r0, [r0, #12]
   2cd2c:	e3500000 	cmp	r0, #0
   2cd30:	1a00000f 	bne	2cd74 <CPageAllocator::Allocate()+0x60>
   2cd34:	e5945008 	ldr	r5, [r4, #8]
   2cd38:	e3550000 	cmp	r5, #0
   2cd3c:	0a000010 	beq	2cd84 <CPageAllocator::Allocate()+0x70>
   2cd40:	e59f308c 	ldr	r3, [pc, #140]	; 2cdd4 <CPageAllocator::Allocate()+0xc0>
   2cd44:	e5952000 	ldr	r2, [r5]
   2cd48:	e1520003 	cmp	r2, r3
   2cd4c:	1a00001c 	bne	2cdc4 <CPageAllocator::Allocate()+0xb0>
   2cd50:	e3a03000 	mov	r3, #0
   2cd54:	e5952004 	ldr	r2, [r5, #4]
   2cd58:	e5842008 	str	r2, [r4, #8]
   2cd5c:	e5853000 	str	r3, [r5]
   2cd60:	e594300c 	ldr	r3, [r4, #12]
   2cd64:	e3530000 	cmp	r3, #0
   2cd68:	1a00000e 	bne	2cda8 <CPageAllocator::Allocate()+0x94>
   2cd6c:	e1a00005 	mov	r0, r5
   2cd70:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cd74:	ebfffb76 	bl	2bb54 <EnterCritical>
   2cd78:	e5945008 	ldr	r5, [r4, #8]
   2cd7c:	e3550000 	cmp	r5, #0
   2cd80:	1affffee 	bne	2cd40 <CPageAllocator::Allocate()+0x2c>
   2cd84:	e5942000 	ldr	r2, [r4]
   2cd88:	e5941004 	ldr	r1, [r4, #4]
   2cd8c:	e2823a01 	add	r3, r2, #4096	; 0x1000
   2cd90:	e1530001 	cmp	r3, r1
   2cd94:	e5843000 	str	r3, [r4]
   2cd98:	e594300c 	ldr	r3, [r4, #12]
   2cd9c:	91a05002 	movls	r5, r2
   2cda0:	e3530000 	cmp	r3, #0
   2cda4:	0afffff0 	beq	2cd6c <CPageAllocator::Allocate()+0x58>
   2cda8:	ebfffb93 	bl	2bbfc <LeaveCritical>
   2cdac:	e1a00005 	mov	r0, r5
   2cdb0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cdb4:	e59f101c 	ldr	r1, [pc, #28]	; 2cdd8 <CPageAllocator::Allocate()+0xc4>
   2cdb8:	e3a02036 	mov	r2, #54	; 0x36
   2cdbc:	e2810014 	add	r0, r1, #20
   2cdc0:	ebffde2f 	bl	24684 <assertion_failed>
   2cdc4:	e59f100c 	ldr	r1, [pc, #12]	; 2cdd8 <CPageAllocator::Allocate()+0xc4>
   2cdc8:	e3a02044 	mov	r2, #68	; 0x44
   2cdcc:	e2810024 	add	r0, r1, #36	; 0x24
   2cdd0:	ebffde2b 	bl	24684 <assertion_failed>
   2cdd4:	50474d43 	.word	0x50474d43
   2cdd8:	000457e4 	.word	0x000457e4

0002cddc <CPageAllocator::Free(void*)>:
   2cddc:	e92d4070 	push	{r4, r5, r6, lr}
   2cde0:	e2514000 	subs	r4, r1, #0
   2cde4:	08bd8070 	popeq	{r4, r5, r6, pc}
   2cde8:	e1a05000 	mov	r5, r0
   2cdec:	e590000c 	ldr	r0, [r0, #12]
   2cdf0:	e3500000 	cmp	r0, #0
   2cdf4:	1a000009 	bne	2ce20 <CPageAllocator::Free(void*)+0x44>
   2cdf8:	e59f3028 	ldr	r3, [pc, #40]	; 2ce28 <CPageAllocator::Free(void*)+0x4c>
   2cdfc:	e5952008 	ldr	r2, [r5, #8]
   2ce00:	e5843000 	str	r3, [r4]
   2ce04:	e595300c 	ldr	r3, [r5, #12]
   2ce08:	e5842004 	str	r2, [r4, #4]
   2ce0c:	e3530000 	cmp	r3, #0
   2ce10:	e5854008 	str	r4, [r5, #8]
   2ce14:	08bd8070 	popeq	{r4, r5, r6, pc}
   2ce18:	e8bd4070 	pop	{r4, r5, r6, lr}
   2ce1c:	eafffb76 	b	2bbfc <LeaveCritical>
   2ce20:	ebfffb4b 	bl	2bb54 <EnterCritical>
   2ce24:	eafffff3 	b	2cdf8 <CPageAllocator::Free(void*)+0x1c>
   2ce28:	50474d43 	.word	0x50474d43

0002ce2c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   2ce2c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ce30:	e1a04000 	mov	r4, r0
   2ce34:	e3a0b000 	mov	fp, #0
   2ce38:	e1a07001 	mov	r7, r1
   2ce3c:	e1a06002 	mov	r6, r2
   2ce40:	e1a05003 	mov	r5, r3
   2ce44:	e24dd00c 	sub	sp, sp, #12
   2ce48:	e280a018 	add	sl, r0, #24
   2ce4c:	ebffdff3 	bl	24e20 <CDevice::CDevice()>
   2ce50:	e59f31cc 	ldr	r3, [pc, #460]	; 2d024 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1f8>
   2ce54:	e5847004 	str	r7, [r4, #4]
   2ce58:	e5843000 	str	r3, [r4]
   2ce5c:	e1a0000a 	mov	r0, sl
   2ce60:	e2849040 	add	r9, r4, #64	; 0x40
   2ce64:	e5c46008 	strb	r6, [r4, #8]
   2ce68:	e584500c 	str	r5, [r4, #12]
   2ce6c:	e584b010 	str	fp, [r4, #16]
   2ce70:	e5c4b014 	strb	fp, [r4, #20]
   2ce74:	ebffe15f 	bl	253f8 <CGPIOPin::CGPIOPin()>
   2ce78:	e2848068 	add	r8, r4, #104	; 0x68
   2ce7c:	e1a00009 	mov	r0, r9
   2ce80:	ebffe15c 	bl	253f8 <CGPIOPin::CGPIOPin()>
   2ce84:	e2847090 	add	r7, r4, #144	; 0x90
   2ce88:	e1a00008 	mov	r0, r8
   2ce8c:	ebffe159 	bl	253f8 <CGPIOPin::CGPIOPin()>
   2ce90:	e1a00007 	mov	r0, r7
   2ce94:	ebffe157 	bl	253f8 <CGPIOPin::CGPIOPin()>
   2ce98:	e156000b 	cmp	r6, fp
   2ce9c:	13a00002 	movne	r0, #2
   2cea0:	03a00001 	moveq	r0, #1
   2cea4:	e3a02001 	mov	r2, #1
   2cea8:	e2841901 	add	r1, r4, #16384	; 0x4000
   2ceac:	e584b0bc 	str	fp, [r4, #188]	; 0xbc
   2ceb0:	e584b0b8 	str	fp, [r4, #184]	; 0xb8
   2ceb4:	e584b0c0 	str	fp, [r4, #192]	; 0xc0
   2ceb8:	e584b0c4 	str	fp, [r4, #196]	; 0xc4
   2cebc:	e584b0d0 	str	fp, [r4, #208]	; 0xd0
   2cec0:	e1c4bcb8 	strh	fp, [r4, #200]	; 0xc8
   2cec4:	e584b0cc 	str	fp, [r4, #204]	; 0xcc
   2cec8:	e584b0d8 	str	fp, [r4, #216]	; 0xd8
   2cecc:	e584b0d4 	str	fp, [r4, #212]	; 0xd4
   2ced0:	e5c4b0dc 	strb	fp, [r4, #220]	; 0xdc
   2ced4:	e584b0f4 	str	fp, [r4, #244]	; 0xf4
   2ced8:	e584b0e4 	str	fp, [r4, #228]	; 0xe4
   2cedc:	e584b0e8 	str	fp, [r4, #232]	; 0xe8
   2cee0:	e584b0ec 	str	fp, [r4, #236]	; 0xec
   2cee4:	e584b0f0 	str	fp, [r4, #240]	; 0xf0
   2cee8:	e584b0e0 	str	fp, [r4, #224]	; 0xe0
   2ceec:	e5810f28 	str	r0, [r1, #3880]	; 0xf28
   2cef0:	e5812f18 	str	r2, [r1, #3864]	; 0xf18
   2cef4:	e5812f2c 	str	r2, [r1, #3884]	; 0xf2c
   2cef8:	e594000c 	ldr	r0, [r4, #12]
   2cefc:	e581bf1c 	str	fp, [r1, #3868]	; 0xf1c
   2cf00:	e150000b 	cmp	r0, fp
   2cf04:	1a000027 	bne	2cfa8 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x17c>
   2cf08:	e59f6118 	ldr	r6, [pc, #280]	; 2d028 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1fc>
   2cf0c:	e1a03205 	lsl	r3, r5, #4
   2cf10:	e0861205 	add	r1, r6, r5, lsl #4
   2cf14:	e5911004 	ldr	r1, [r1, #4]
   2cf18:	e3510035 	cmp	r1, #53	; 0x35
   2cf1c:	8a000021 	bhi	2cfa8 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x17c>
   2cf20:	e59f0104 	ldr	r0, [pc, #260]	; 2d02c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x200>
   2cf24:	e590c020 	ldr	ip, [r0, #32]
   2cf28:	e15c000b 	cmp	ip, fp
   2cf2c:	1a000032 	bne	2cffc <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1d0>
   2cf30:	e796c105 	ldr	ip, [r6, r5, lsl #2]
   2cf34:	e5804020 	str	r4, [r0, #32]
   2cf38:	e35c0000 	cmp	ip, #0
   2cf3c:	e584c010 	str	ip, [r4, #16]
   2cf40:	0a000032 	beq	2d010 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1e4>
   2cf44:	e3550000 	cmp	r5, #0
   2cf48:	0a000019 	beq	2cfb4 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x188>
   2cf4c:	e0866003 	add	r6, r6, r3
   2cf50:	e1a00008 	mov	r0, r8
   2cf54:	ebffe153 	bl	254a8 <CGPIOPin::AssignPin(unsigned int)>
   2cf58:	e5961008 	ldr	r1, [r6, #8]
   2cf5c:	e3a02001 	mov	r2, #1
   2cf60:	e2811004 	add	r1, r1, #4
   2cf64:	e1a00008 	mov	r0, r8
   2cf68:	e6ef1071 	uxtb	r1, r1
   2cf6c:	ebffe16e 	bl	2552c <CGPIOPin::SetMode(TGPIOMode, bool)>
   2cf70:	e1a00007 	mov	r0, r7
   2cf74:	e596100c 	ldr	r1, [r6, #12]
   2cf78:	ebffe14a 	bl	254a8 <CGPIOPin::AssignPin(unsigned int)>
   2cf7c:	e5961010 	ldr	r1, [r6, #16]
   2cf80:	e3a02001 	mov	r2, #1
   2cf84:	e2811004 	add	r1, r1, #4
   2cf88:	e1a00007 	mov	r0, r7
   2cf8c:	e6ef1071 	uxtb	r1, r1
   2cf90:	ebffe165 	bl	2552c <CGPIOPin::SetMode(TGPIOMode, bool)>
   2cf94:	e1a00007 	mov	r0, r7
   2cf98:	e3a01002 	mov	r1, #2
   2cf9c:	ebffe37f 	bl	25da0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2cfa0:	e3a03001 	mov	r3, #1
   2cfa4:	e5c43014 	strb	r3, [r4, #20]
   2cfa8:	e1a00004 	mov	r0, r4
   2cfac:	e28dd00c 	add	sp, sp, #12
   2cfb0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cfb4:	e3a01020 	mov	r1, #32
   2cfb8:	e1a0000a 	mov	r0, sl
   2cfbc:	e58d3004 	str	r3, [sp, #4]
   2cfc0:	ebffe138 	bl	254a8 <CGPIOPin::AssignPin(unsigned int)>
   2cfc4:	e3a02001 	mov	r2, #1
   2cfc8:	e1a01005 	mov	r1, r5
   2cfcc:	e1a0000a 	mov	r0, sl
   2cfd0:	ebffe155 	bl	2552c <CGPIOPin::SetMode(TGPIOMode, bool)>
   2cfd4:	e3a01021 	mov	r1, #33	; 0x21
   2cfd8:	e1a00009 	mov	r0, r9
   2cfdc:	ebffe131 	bl	254a8 <CGPIOPin::AssignPin(unsigned int)>
   2cfe0:	e1a01005 	mov	r1, r5
   2cfe4:	e3a02001 	mov	r2, #1
   2cfe8:	e1a00009 	mov	r0, r9
   2cfec:	ebffe14e 	bl	2552c <CGPIOPin::SetMode(TGPIOMode, bool)>
   2cff0:	e5961004 	ldr	r1, [r6, #4]
   2cff4:	e59d3004 	ldr	r3, [sp, #4]
   2cff8:	eaffffd3 	b	2cf4c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x120>
   2cffc:	e59f3020 	ldr	r3, [pc, #32]	; 2d024 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1f8>
   2d000:	e3a020bd 	mov	r2, #189	; 0xbd
   2d004:	e2831018 	add	r1, r3, #24
   2d008:	e2830034 	add	r0, r3, #52	; 0x34
   2d00c:	ebffdd9c 	bl	24684 <assertion_failed>
   2d010:	e59f300c 	ldr	r3, [pc, #12]	; 2d024 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1f8>
   2d014:	e3a020c1 	mov	r2, #193	; 0xc1
   2d018:	e2831018 	add	r1, r3, #24
   2d01c:	e283004c 	add	r0, r3, #76	; 0x4c
   2d020:	ebffdd97 	bl	24684 <assertion_failed>
   2d024:	00045840 	.word	0x00045840
   2d028:	00047c24 	.word	0x00047c24
   2d02c:	0004db48 	.word	0x0004db48

0002d030 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>:
   2d030:	e5d03014 	ldrb	r3, [r0, #20]
   2d034:	e59fc168 	ldr	ip, [pc, #360]	; 2d1a4 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x174>
   2d038:	e3530000 	cmp	r3, #0
   2d03c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d040:	e1a04000 	mov	r4, r0
   2d044:	e580c000 	str	ip, [r0]
   2d048:	0a000046 	beq	2d168 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x138>
   2d04c:	e3a00001 	mov	r0, #1
   2d050:	e59f5150 	ldr	r5, [pc, #336]	; 2d1a8 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x178>
   2d054:	e594100c 	ldr	r1, [r4, #12]
   2d058:	e595201c 	ldr	r2, [r5, #28]
   2d05c:	e3a03000 	mov	r3, #0
   2d060:	e1c22110 	bic	r2, r2, r0, lsl r1
   2d064:	e585201c 	str	r2, [r5, #28]
   2d068:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d06c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d070:	e5942010 	ldr	r2, [r4, #16]
   2d074:	e5823038 	str	r3, [r2, #56]	; 0x38
   2d078:	e5942010 	ldr	r2, [r4, #16]
   2d07c:	e5823030 	str	r3, [r2, #48]	; 0x30
   2d080:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2d084:	e5943004 	ldr	r3, [r4, #4]
   2d088:	e3530000 	cmp	r3, #0
   2d08c:	0a00000e 	beq	2d0cc <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x9c>
   2d090:	e5953010 	ldr	r3, [r5, #16]
   2d094:	e2433001 	sub	r3, r3, #1
   2d098:	e3530000 	cmp	r3, #0
   2d09c:	e5853010 	str	r3, [r5, #16]
   2d0a0:	1a000009 	bne	2d0cc <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x9c>
   2d0a4:	e5950014 	ldr	r0, [r5, #20]
   2d0a8:	e3500000 	cmp	r0, #0
   2d0ac:	0a000038 	beq	2d194 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x164>
   2d0b0:	e5d53018 	ldrb	r3, [r5, #24]
   2d0b4:	e3530000 	cmp	r3, #0
   2d0b8:	0a000032 	beq	2d188 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x158>
   2d0bc:	ebfffb65 	bl	2be58 <CInterruptSystem::DisconnectFIQ()>
   2d0c0:	e3a03000 	mov	r3, #0
   2d0c4:	e5853014 	str	r3, [r5, #20]
   2d0c8:	e5c53018 	strb	r3, [r5, #24]
   2d0cc:	e2846068 	add	r6, r4, #104	; 0x68
   2d0d0:	e1a00006 	mov	r0, r6
   2d0d4:	e3a02001 	mov	r2, #1
   2d0d8:	e3a01000 	mov	r1, #0
   2d0dc:	e2847090 	add	r7, r4, #144	; 0x90
   2d0e0:	ebffe111 	bl	2552c <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d0e4:	e1a00007 	mov	r0, r7
   2d0e8:	e3a02001 	mov	r2, #1
   2d0ec:	e3a01000 	mov	r1, #0
   2d0f0:	ebffe10d 	bl	2552c <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d0f4:	e59400b8 	ldr	r0, [r4, #184]	; 0xb8
   2d0f8:	e3500000 	cmp	r0, #0
   2d0fc:	0a000002 	beq	2d10c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xdc>
   2d100:	e5d430c8 	ldrb	r3, [r4, #200]	; 0xc8
   2d104:	e3530000 	cmp	r3, #0
   2d108:	1a00001c 	bne	2d180 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x150>
   2d10c:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   2d110:	e3500000 	cmp	r0, #0
   2d114:	0a000002 	beq	2d124 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xf4>
   2d118:	e5d430dc 	ldrb	r3, [r4, #220]	; 0xdc
   2d11c:	e3530000 	cmp	r3, #0
   2d120:	1a000014 	bne	2d178 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x148>
   2d124:	e3a03000 	mov	r3, #0
   2d128:	e594200c 	ldr	r2, [r4, #12]
   2d12c:	e1a00007 	mov	r0, r7
   2d130:	e0855102 	add	r5, r5, r2, lsl #2
   2d134:	e5c43014 	strb	r3, [r4, #20]
   2d138:	e5853020 	str	r3, [r5, #32]
   2d13c:	ebffe0d2 	bl	2548c <CGPIOPin::~CGPIOPin()>
   2d140:	e1a00006 	mov	r0, r6
   2d144:	ebffe0d0 	bl	2548c <CGPIOPin::~CGPIOPin()>
   2d148:	e2840040 	add	r0, r4, #64	; 0x40
   2d14c:	ebffe0ce 	bl	2548c <CGPIOPin::~CGPIOPin()>
   2d150:	e2840018 	add	r0, r4, #24
   2d154:	ebffe0cc 	bl	2548c <CGPIOPin::~CGPIOPin()>
   2d158:	e1a00004 	mov	r0, r4
   2d15c:	ebffdf21 	bl	24de8 <CDevice::~CDevice()>
   2d160:	e1a00004 	mov	r0, r4
   2d164:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d168:	e2800090 	add	r0, r0, #144	; 0x90
   2d16c:	ebffe0c6 	bl	2548c <CGPIOPin::~CGPIOPin()>
   2d170:	e2840068 	add	r0, r4, #104	; 0x68
   2d174:	eafffff2 	b	2d144 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x114>
   2d178:	ebfff755 	bl	2aed4 <operator delete[](void*)>
   2d17c:	eaffffe8 	b	2d124 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xf4>
   2d180:	ebfff753 	bl	2aed4 <operator delete[](void*)>
   2d184:	eaffffe0 	b	2d10c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xdc>
   2d188:	e3a01039 	mov	r1, #57	; 0x39
   2d18c:	ebfffba2 	bl	2c01c <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2d190:	eaffffca 	b	2d0c0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x90>
   2d194:	e3a020ed 	mov	r2, #237	; 0xed
   2d198:	e28c1018 	add	r1, ip, #24
   2d19c:	e28c0060 	add	r0, ip, #96	; 0x60
   2d1a0:	ebffdd37 	bl	24684 <assertion_failed>
   2d1a4:	00045840 	.word	0x00045840
   2d1a8:	0004db48 	.word	0x0004db48

0002d1ac <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>:
   2d1ac:	e92d4010 	push	{r4, lr}
   2d1b0:	e1a04000 	mov	r4, r0
   2d1b4:	ebffff9d 	bl	2d030 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>
   2d1b8:	e1a00004 	mov	r0, r4
   2d1bc:	e59f1008 	ldr	r1, [pc, #8]	; 2d1cc <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x20>
   2d1c0:	ebfff744 	bl	2aed8 <operator delete(void*, unsigned int)>
   2d1c4:	e1a00004 	mov	r0, r4
   2d1c8:	e8bd8010 	pop	{r4, pc}
   2d1cc:	00004f30 	.word	0x00004f30

0002d1d0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)>:
   2d1d0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d1d4:	e5d08014 	ldrb	r8, [r0, #20]
   2d1d8:	e24dd010 	sub	sp, sp, #16
   2d1dc:	e3580000 	cmp	r8, #0
   2d1e0:	1a000002 	bne	2d1f0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x20>
   2d1e4:	e1a00008 	mov	r0, r8
   2d1e8:	e28dd010 	add	sp, sp, #16
   2d1ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d1f0:	e1a05001 	mov	r5, r1
   2d1f4:	e1a07002 	mov	r7, r2
   2d1f8:	e3a01002 	mov	r1, #2
   2d1fc:	e59f2274 	ldr	r2, [pc, #628]	; 2d478 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2a8>
   2d200:	e1a06003 	mov	r6, r3
   2d204:	e3a03001 	mov	r3, #1
   2d208:	e1a04000 	mov	r4, r0
   2d20c:	eb0000a9 	bl	2d4b8 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)>
   2d210:	ebffe908 	bl	27638 <CMachineInfo::Get()>
   2d214:	e3a01002 	mov	r1, #2
   2d218:	ebffe83a 	bl	27308 <CMachineInfo::GetClockRate(unsigned int) const>
   2d21c:	e3500000 	cmp	r0, #0
   2d220:	0a000084 	beq	2d438 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x268>
   2d224:	e59f3250 	ldr	r3, [pc, #592]	; 2d47c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2ac>
   2d228:	e2452f4b 	sub	r2, r5, #300	; 0x12c
   2d22c:	e1520003 	cmp	r2, r3
   2d230:	8a000084 	bhi	2d448 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x278>
   2d234:	e1a01205 	lsl	r1, r5, #4
   2d238:	eb003f7e 	bl	3d038 <__aeabi_uidivmod>
   2d23c:	e59f323c 	ldr	r3, [pc, #572]	; 2d480 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b0>
   2d240:	e2402001 	sub	r2, r0, #1
   2d244:	e1520003 	cmp	r2, r3
   2d248:	e1a09000 	mov	r9, r0
   2d24c:	e1a00001 	mov	r0, r1
   2d250:	8a000080 	bhi	2d458 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x288>
   2d254:	e1a01005 	mov	r1, r5
   2d258:	e1a00180 	lsl	r0, r0, #3
   2d25c:	eb003efa 	bl	3ce4c <__udivsi3>
   2d260:	e200a001 	and	sl, r0, #1
   2d264:	e08aa0a0 	add	sl, sl, r0, lsr #1
   2d268:	e35a003f 	cmp	sl, #63	; 0x3f
   2d26c:	8a00007d 	bhi	2d468 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x298>
   2d270:	e59f520c 	ldr	r5, [pc, #524]	; 2d484 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b4>
   2d274:	e28410f8 	add	r1, r4, #248	; 0xf8
   2d278:	e28420bc 	add	r2, r4, #188	; 0xbc
   2d27c:	e98d0022 	stmib	sp, {r1, r5}
   2d280:	e1a03007 	mov	r3, r7
   2d284:	e1a00004 	mov	r0, r4
   2d288:	e58d2000 	str	r2, [sp]
   2d28c:	e28410b8 	add	r1, r4, #184	; 0xb8
   2d290:	e28420c8 	add	r2, r4, #200	; 0xc8
   2d294:	eb000260 	bl	2dc1c <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>
   2d298:	e2842b0a 	add	r2, r4, #10240	; 0x2800
   2d29c:	e2822008 	add	r2, r2, #8
   2d2a0:	e28410d0 	add	r1, r4, #208	; 0xd0
   2d2a4:	e88d0006 	stm	sp, {r1, r2}
   2d2a8:	e1a00004 	mov	r0, r4
   2d2ac:	e58d5008 	str	r5, [sp, #8]
   2d2b0:	e1a03006 	mov	r3, r6
   2d2b4:	e28420dc 	add	r2, r4, #220	; 0xdc
   2d2b8:	e28410cc 	add	r1, r4, #204	; 0xcc
   2d2bc:	eb000256 	bl	2dc1c <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>
   2d2c0:	e5940004 	ldr	r0, [r4, #4]
   2d2c4:	e59f51bc 	ldr	r5, [pc, #444]	; 2d488 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b8>
   2d2c8:	e3500000 	cmp	r0, #0
   2d2cc:	0a000013 	beq	2d320 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x150>
   2d2d0:	e5953010 	ldr	r3, [r5, #16]
   2d2d4:	e3530000 	cmp	r3, #0
   2d2d8:	1a00003d 	bne	2d3d4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x204>
   2d2dc:	e5d42008 	ldrb	r2, [r4, #8]
   2d2e0:	e5850014 	str	r0, [r5, #20]
   2d2e4:	e3520000 	cmp	r2, #0
   2d2e8:	e5c52018 	strb	r2, [r5, #24]
   2d2ec:	1a000045 	bne	2d408 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x238>
   2d2f0:	e1a03002 	mov	r3, r2
   2d2f4:	e3a01039 	mov	r1, #57	; 0x39
   2d2f8:	e59f218c 	ldr	r2, [pc, #396]	; 2d48c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2bc>
   2d2fc:	ebfffb12 	bl	2bf4c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2d300:	e5953008 	ldr	r3, [r5, #8]
   2d304:	e2833001 	add	r3, r3, #1
   2d308:	e5853008 	str	r3, [r5, #8]
   2d30c:	e5953010 	ldr	r3, [r5, #16]
   2d310:	e3530000 	cmp	r3, #0
   2d314:	1a000043 	bne	2d428 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x258>
   2d318:	e3a03001 	mov	r3, #1
   2d31c:	e5853010 	str	r3, [r5, #16]
   2d320:	e3a03000 	mov	r3, #0
   2d324:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d328:	e5942010 	ldr	r2, [r4, #16]
   2d32c:	e59f015c 	ldr	r0, [pc, #348]	; 2d490 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c0>
   2d330:	e5823038 	str	r3, [r2, #56]	; 0x38
   2d334:	e5942010 	ldr	r2, [r4, #16]
   2d338:	e5941004 	ldr	r1, [r4, #4]
   2d33c:	e5820044 	str	r0, [r2, #68]	; 0x44
   2d340:	e5942010 	ldr	r2, [r4, #16]
   2d344:	e1510003 	cmp	r1, r3
   2d348:	e5829024 	str	r9, [r2, #36]	; 0x24
   2d34c:	e5942010 	ldr	r2, [r4, #16]
   2d350:	e582a028 	str	sl, [r2, #40]	; 0x28
   2d354:	0a000027 	beq	2d3f8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x228>
   2d358:	e3a0e011 	mov	lr, #17
   2d35c:	e3a0c070 	mov	ip, #112	; 0x70
   2d360:	e3a01e45 	mov	r1, #1104	; 0x450
   2d364:	e3a00001 	mov	r0, #1
   2d368:	e5942010 	ldr	r2, [r4, #16]
   2d36c:	e582e034 	str	lr, [r2, #52]	; 0x34
   2d370:	e5942010 	ldr	r2, [r4, #16]
   2d374:	e582c02c 	str	ip, [r2, #44]	; 0x2c
   2d378:	e5942010 	ldr	r2, [r4, #16]
   2d37c:	e5821038 	str	r1, [r2, #56]	; 0x38
   2d380:	e595201c 	ldr	r2, [r5, #28]
   2d384:	e594100c 	ldr	r1, [r4, #12]
   2d388:	e1822110 	orr	r2, r2, r0, lsl r1
   2d38c:	e585201c 	str	r2, [r5, #28]
   2d390:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d394:	e5942010 	ldr	r2, [r4, #16]
   2d398:	e59f10f4 	ldr	r1, [pc, #244]	; 2d494 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c4>
   2d39c:	e59f30f4 	ldr	r3, [pc, #244]	; 2d498 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c8>
   2d3a0:	e5821030 	str	r1, [r2, #48]	; 0x30
   2d3a4:	e5933214 	ldr	r3, [r3, #532]	; 0x214
   2d3a8:	e3a06000 	mov	r6, #0
   2d3ac:	e585300c 	str	r3, [r5, #12]
   2d3b0:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   2d3b4:	ebffdf74 	bl	2518c <CDeviceNameService::Get()>
   2d3b8:	e1a03006 	mov	r3, r6
   2d3bc:	e1a02004 	mov	r2, r4
   2d3c0:	e59f10d4 	ldr	r1, [pc, #212]	; 2d49c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2cc>
   2d3c4:	ebffdec0 	bl	24ecc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   2d3c8:	e1a00008 	mov	r0, r8
   2d3cc:	e28dd010 	add	sp, sp, #16
   2d3d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d3d4:	e5953014 	ldr	r3, [r5, #20]
   2d3d8:	e1500003 	cmp	r0, r3
   2d3dc:	0a00000d 	beq	2d418 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x248>
   2d3e0:	e3a08000 	mov	r8, #0
   2d3e4:	e594300c 	ldr	r3, [r4, #12]
   2d3e8:	e5c48014 	strb	r8, [r4, #20]
   2d3ec:	e0855103 	add	r5, r5, r3, lsl #2
   2d3f0:	e5858020 	str	r8, [r5, #32]
   2d3f4:	eaffff7a 	b	2d1e4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x14>
   2d3f8:	e3a02060 	mov	r2, #96	; 0x60
   2d3fc:	e5943010 	ldr	r3, [r4, #16]
   2d400:	e583202c 	str	r2, [r3, #44]	; 0x2c
   2d404:	eaffffe2 	b	2d394 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x1c4>
   2d408:	e3a01039 	mov	r1, #57	; 0x39
   2d40c:	e59f2078 	ldr	r2, [pc, #120]	; 2d48c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2bc>
   2d410:	ebfffa5c 	bl	2bd88 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   2d414:	eaffffbc 	b	2d30c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x13c>
   2d418:	e5d42008 	ldrb	r2, [r4, #8]
   2d41c:	e5d53018 	ldrb	r3, [r5, #24]
   2d420:	e1520003 	cmp	r2, r3
   2d424:	1affffed 	bne	2d3e0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x210>
   2d428:	e59f1070 	ldr	r1, [pc, #112]	; 2d4a0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d42c:	e59f2070 	ldr	r2, [pc, #112]	; 2d4a4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d4>
   2d430:	e28100d4 	add	r0, r1, #212	; 0xd4
   2d434:	ebffdc92 	bl	24684 <assertion_failed>
   2d438:	e59f1060 	ldr	r1, [pc, #96]	; 2d4a0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d43c:	e59f2064 	ldr	r2, [pc, #100]	; 2d4a8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d8>
   2d440:	e2810060 	add	r0, r1, #96	; 0x60
   2d444:	ebffdc8e 	bl	24684 <assertion_failed>
   2d448:	e59f1050 	ldr	r1, [pc, #80]	; 2d4a0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d44c:	e59f2058 	ldr	r2, [pc, #88]	; 2d4ac <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d450:	e2810070 	add	r0, r1, #112	; 0x70
   2d454:	ebffdc8a 	bl	24684 <assertion_failed>
   2d458:	e59f1040 	ldr	r1, [pc, #64]	; 2d4a0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d45c:	e59f204c 	ldr	r2, [pc, #76]	; 2d4b0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e0>
   2d460:	e281009c 	add	r0, r1, #156	; 0x9c
   2d464:	ebffdc86 	bl	24684 <assertion_failed>
   2d468:	e59f1030 	ldr	r1, [pc, #48]	; 2d4a0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d46c:	e59f2040 	ldr	r2, [pc, #64]	; 2d4b4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e4>
   2d470:	e28100c0 	add	r0, r1, #192	; 0xc0
   2d474:	ebffdc82 	bl	24684 <assertion_failed>
   2d478:	01e84800 	.word	0x01e84800
   2d47c:	003d07d4 	.word	0x003d07d4
   2d480:	0000fffe 	.word	0x0000fffe
   2d484:	00002710 	.word	0x00002710
   2d488:	0004db48 	.word	0x0004db48
   2d48c:	0002dbcc 	.word	0x0002dbcc
   2d490:	000007ff 	.word	0x000007ff
   2d494:	00000301 	.word	0x00000301
   2d498:	2000b000 	.word	0x2000b000
   2d49c:	00045954 	.word	0x00045954
   2d4a0:	00045858 	.word	0x00045858
   2d4a4:	00000149 	.word	0x00000149
   2d4a8:	00000115 	.word	0x00000115
   2d4ac:	00000117 	.word	0x00000117
   2d4b0:	0000011a 	.word	0x0000011a
   2d4b4:	0000011d 	.word	0x0000011d

0002d4b8 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)>:
   2d4b8:	e92d4070 	push	{r4, r5, r6, lr}
   2d4bc:	e24dd028 	sub	sp, sp, #40	; 0x28
   2d4c0:	e1a06001 	mov	r6, r1
   2d4c4:	e28d0008 	add	r0, sp, #8
   2d4c8:	e3a01000 	mov	r1, #0
   2d4cc:	e1a05002 	mov	r5, r2
   2d4d0:	e1a04003 	mov	r4, r3
   2d4d4:	ebffdc8b 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2d4d8:	e3a0300c 	mov	r3, #12
   2d4dc:	e59f1034 	ldr	r1, [pc, #52]	; 2d518 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)+0x60>
   2d4e0:	e58d3000 	str	r3, [sp]
   2d4e4:	e28d2010 	add	r2, sp, #16
   2d4e8:	e3a03018 	mov	r3, #24
   2d4ec:	e28d0008 	add	r0, sp, #8
   2d4f0:	e58d4024 	str	r4, [sp, #36]	; 0x24
   2d4f4:	e58d601c 	str	r6, [sp, #28]
   2d4f8:	e58d5020 	str	r5, [sp, #32]
   2d4fc:	ebffdc8d 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2d500:	e1a04000 	mov	r4, r0
   2d504:	e28d0008 	add	r0, sp, #8
   2d508:	ebffdc85 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   2d50c:	e1a00004 	mov	r0, r4
   2d510:	e28dd028 	add	sp, sp, #40	; 0x28
   2d514:	e8bd8070 	pop	{r4, r5, r6, pc}
   2d518:	00038002 	.word	0x00038002

0002d51c <CUartMaxiSerialDevice::Clear()>:
   2d51c:	e3a03000 	mov	r3, #0
   2d520:	e58030bc 	str	r3, [r0, #188]	; 0xbc
   2d524:	e58030f4 	str	r3, [r0, #244]	; 0xf4
   2d528:	e58030c0 	str	r3, [r0, #192]	; 0xc0
   2d52c:	e58030e4 	str	r3, [r0, #228]	; 0xe4
   2d530:	e58030e8 	str	r3, [r0, #232]	; 0xe8
   2d534:	e58030ec 	str	r3, [r0, #236]	; 0xec
   2d538:	e58030f0 	str	r3, [r0, #240]	; 0xf0
   2d53c:	e58030e0 	str	r3, [r0, #224]	; 0xe0
   2d540:	e12fff1e 	bx	lr

0002d544 <CUartMaxiSerialDevice::AvailableForWrite()>:
   2d544:	e59030d4 	ldr	r3, [r0, #212]	; 0xd4
   2d548:	e59010d0 	ldr	r1, [r0, #208]	; 0xd0
   2d54c:	e59020d8 	ldr	r2, [r0, #216]	; 0xd8
   2d550:	e59000d0 	ldr	r0, [r0, #208]	; 0xd0
   2d554:	e1530001 	cmp	r3, r1
   2d558:	80800002 	addhi	r0, r0, r2
   2d55c:	e0400003 	sub	r0, r0, r3
   2d560:	e0420000 	sub	r0, r2, r0
   2d564:	e12fff1e 	bx	lr

0002d568 <CUartMaxiSerialDevice::WriteBase(unsigned int)>:
   2d568:	e1a03000 	mov	r3, r0
   2d56c:	e59000cc 	ldr	r0, [r0, #204]	; 0xcc
   2d570:	e3500000 	cmp	r0, #0
   2d574:	012fff1e 	bxeq	lr
   2d578:	e59320d8 	ldr	r2, [r3, #216]	; 0xd8
   2d57c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2d580:	e3520000 	cmp	r2, #0
   2d584:	0a00001d 	beq	2d600 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x98>
   2d588:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d58c:	e593c0d4 	ldr	ip, [r3, #212]	; 0xd4
   2d590:	e15e000c 	cmp	lr, ip
   2d594:	0a000008 	beq	2d5bc <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x54>
   2d598:	e593c0d4 	ldr	ip, [r3, #212]	; 0xd4
   2d59c:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d5a0:	e15c000e 	cmp	ip, lr
   2d5a4:	2a000011 	bcs	2d5f0 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x88>
   2d5a8:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d5ac:	e2422001 	sub	r2, r2, #1
   2d5b0:	e35c0000 	cmp	ip, #0
   2d5b4:	0152000e 	cmpeq	r2, lr
   2d5b8:	0a000010 	beq	2d600 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x98>
   2d5bc:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d5c0:	e7c01002 	strb	r1, [r0, r2]
   2d5c4:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d5c8:	e59310d8 	ldr	r1, [r3, #216]	; 0xd8
   2d5cc:	e2822001 	add	r2, r2, #1
   2d5d0:	e58320d0 	str	r2, [r3, #208]	; 0xd0
   2d5d4:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d5d8:	e1520001 	cmp	r2, r1
   2d5dc:	23a02000 	movcs	r2, #0
   2d5e0:	23a00001 	movcs	r0, #1
   2d5e4:	258320d0 	strcs	r2, [r3, #208]	; 0xd0
   2d5e8:	33a00001 	movcc	r0, #1
   2d5ec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2d5f0:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d5f4:	e04cc002 	sub	ip, ip, r2
   2d5f8:	e35c0001 	cmp	ip, #1
   2d5fc:	8affffee 	bhi	2d5bc <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x54>
   2d600:	e59320f4 	ldr	r2, [r3, #244]	; 0xf4
   2d604:	e3a00000 	mov	r0, #0
   2d608:	e2822001 	add	r2, r2, #1
   2d60c:	e58320f4 	str	r2, [r3, #244]	; 0xf4
   2d610:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002d614 <CUartMaxiSerialDevice::Write(unsigned int)>:
   2d614:	e92d4070 	push	{r4, r5, r6, lr}
   2d618:	e1a05000 	mov	r5, r0
   2d61c:	ebffffd1 	bl	2d568 <CUartMaxiSerialDevice::WriteBase(unsigned int)>
   2d620:	e1a04000 	mov	r4, r0
   2d624:	e1a00005 	mov	r0, r5
   2d628:	eb000021 	bl	2d6b4 <CUartMaxiSerialDevice::TxPumpPrime()>
   2d62c:	e1a00004 	mov	r0, r4
   2d630:	e8bd8070 	pop	{r4, r5, r6, pc}

0002d634 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>:
   2d634:	e3520000 	cmp	r2, #0
   2d638:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d63c:	e1a07000 	mov	r7, r0
   2d640:	0a00000d 	beq	2d67c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x48>
   2d644:	e3a05000 	mov	r5, #0
   2d648:	e0812002 	add	r2, r1, r2
   2d64c:	e2426001 	sub	r6, r2, #1
   2d650:	e2414001 	sub	r4, r1, #1
   2d654:	e5f41001 	ldrb	r1, [r4, #1]!
   2d658:	e1a00007 	mov	r0, r7
   2d65c:	ebffffc1 	bl	2d568 <CUartMaxiSerialDevice::WriteBase(unsigned int)>
   2d660:	e1540006 	cmp	r4, r6
   2d664:	e0855000 	add	r5, r5, r0
   2d668:	1afffff9 	bne	2d654 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x20>
   2d66c:	e1a00007 	mov	r0, r7
   2d670:	eb00000f 	bl	2d6b4 <CUartMaxiSerialDevice::TxPumpPrime()>
   2d674:	e1a00005 	mov	r0, r5
   2d678:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d67c:	e1a05002 	mov	r5, r2
   2d680:	eafffff9 	b	2d66c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x38>

0002d684 <CUartMaxiSerialDevice::WriteStr(char const*)>:
   2d684:	e92d4010 	push	{r4, lr}
   2d688:	e1a04000 	mov	r4, r0
   2d68c:	e24dd008 	sub	sp, sp, #8
   2d690:	e1a00001 	mov	r0, r1
   2d694:	e58d1004 	str	r1, [sp, #4]
   2d698:	ebfff21f 	bl	29f1c <strlen>
   2d69c:	e1a02000 	mov	r2, r0
   2d6a0:	e1a00004 	mov	r0, r4
   2d6a4:	e59d1004 	ldr	r1, [sp, #4]
   2d6a8:	e28dd008 	add	sp, sp, #8
   2d6ac:	e8bd4010 	pop	{r4, lr}
   2d6b0:	eaffffdf 	b	2d634 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>

0002d6b4 <CUartMaxiSerialDevice::TxPumpPrime()>:
   2d6b4:	e92d4010 	push	{r4, lr}
   2d6b8:	e1a04000 	mov	r4, r0
   2d6bc:	e3a00001 	mov	r0, #1
   2d6c0:	ebfff923 	bl	2bb54 <EnterCritical>
   2d6c4:	e59420d0 	ldr	r2, [r4, #208]	; 0xd0
   2d6c8:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
   2d6cc:	e1520003 	cmp	r2, r3
   2d6d0:	0a000019 	beq	2d73c <CUartMaxiSerialDevice::TxPumpPrime()+0x88>
   2d6d4:	e3a00000 	mov	r0, #0
   2d6d8:	e59f1078 	ldr	r1, [pc, #120]	; 2d758 <CUartMaxiSerialDevice::TxPumpPrime()+0xa4>
   2d6dc:	ea000013 	b	2d730 <CUartMaxiSerialDevice::TxPumpPrime()+0x7c>
   2d6e0:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
   2d6e4:	e5913018 	ldr	r3, [r1, #24]
   2d6e8:	e2133020 	ands	r3, r3, #32
   2d6ec:	1a000014 	bne	2d744 <CUartMaxiSerialDevice::TxPumpPrime()+0x90>
   2d6f0:	e594c0d4 	ldr	ip, [r4, #212]	; 0xd4
   2d6f4:	e59420d4 	ldr	r2, [r4, #212]	; 0xd4
   2d6f8:	e594e0cc 	ldr	lr, [r4, #204]	; 0xcc
   2d6fc:	e2822001 	add	r2, r2, #1
   2d700:	e7dec00c 	ldrb	ip, [lr, ip]
   2d704:	e58420d4 	str	r2, [r4, #212]	; 0xd4
   2d708:	e594e0d4 	ldr	lr, [r4, #212]	; 0xd4
   2d70c:	e59420d8 	ldr	r2, [r4, #216]	; 0xd8
   2d710:	e15e0002 	cmp	lr, r2
   2d714:	258430d4 	strcs	r3, [r4, #212]	; 0xd4
   2d718:	e581c000 	str	ip, [r1]
   2d71c:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
   2d720:	e59420d0 	ldr	r2, [r4, #208]	; 0xd0
   2d724:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
   2d728:	e1520003 	cmp	r2, r3
   2d72c:	0a000002 	beq	2d73c <CUartMaxiSerialDevice::TxPumpPrime()+0x88>
   2d730:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   2d734:	e3530000 	cmp	r3, #0
   2d738:	1affffe8 	bne	2d6e0 <CUartMaxiSerialDevice::TxPumpPrime()+0x2c>
   2d73c:	e8bd4010 	pop	{r4, lr}
   2d740:	eafff92d 	b	2bbfc <LeaveCritical>
   2d744:	e5913038 	ldr	r3, [r1, #56]	; 0x38
   2d748:	e8bd4010 	pop	{r4, lr}
   2d74c:	e3833020 	orr	r3, r3, #32
   2d750:	e5813038 	str	r3, [r1, #56]	; 0x38
   2d754:	eafff928 	b	2bbfc <LeaveCritical>
   2d758:	20201000 	.word	0x20201000

0002d75c <CUartMaxiSerialDevice::Read()>:
   2d75c:	e59010b8 	ldr	r1, [r0, #184]	; 0xb8
   2d760:	e1a03000 	mov	r3, r0
   2d764:	e3510000 	cmp	r1, #0
   2d768:	0a00000e 	beq	2d7a8 <CUartMaxiSerialDevice::Read()+0x4c>
   2d76c:	e59000bc 	ldr	r0, [r0, #188]	; 0xbc
   2d770:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
   2d774:	e1500002 	cmp	r0, r2
   2d778:	0a00000a 	beq	2d7a8 <CUartMaxiSerialDevice::Read()+0x4c>
   2d77c:	e59300c0 	ldr	r0, [r3, #192]	; 0xc0
   2d780:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
   2d784:	e7d10000 	ldrb	r0, [r1, r0]
   2d788:	e2822001 	add	r2, r2, #1
   2d78c:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   2d790:	e59310c0 	ldr	r1, [r3, #192]	; 0xc0
   2d794:	e59320c4 	ldr	r2, [r3, #196]	; 0xc4
   2d798:	e1510002 	cmp	r1, r2
   2d79c:	23a02000 	movcs	r2, #0
   2d7a0:	258320c0 	strcs	r2, [r3, #192]	; 0xc0
   2d7a4:	e12fff1e 	bx	lr
   2d7a8:	e3e00000 	mvn	r0, #0
   2d7ac:	e12fff1e 	bx	lr

0002d7b0 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)>:
   2d7b0:	e59f3098 	ldr	r3, [pc, #152]	; 2d850 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0xa0>
   2d7b4:	e92d4010 	push	{r4, lr}
   2d7b8:	e590e0b8 	ldr	lr, [r0, #184]	; 0xb8
   2d7bc:	e593c040 	ldr	ip, [r3, #64]	; 0x40
   2d7c0:	e59f308c 	ldr	r3, [pc, #140]	; 2d854 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0xa4>
   2d7c4:	e35e0000 	cmp	lr, #0
   2d7c8:	e583c004 	str	ip, [r3, #4]
   2d7cc:	01a0300e 	moveq	r3, lr
   2d7d0:	0a00001c 	beq	2d848 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x98>
   2d7d4:	e59030bc 	ldr	r3, [r0, #188]	; 0xbc
   2d7d8:	e590c0c0 	ldr	ip, [r0, #192]	; 0xc0
   2d7dc:	e053300c 	subs	r3, r3, ip
   2d7e0:	13a03001 	movne	r3, #1
   2d7e4:	e3520000 	cmp	r2, #0
   2d7e8:	03a03000 	moveq	r3, #0
   2d7ec:	e3530000 	cmp	r3, #0
   2d7f0:	0a000014 	beq	2d848 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x98>
   2d7f4:	e3a03000 	mov	r3, #0
   2d7f8:	e241c001 	sub	ip, r1, #1
   2d7fc:	e1a04003 	mov	r4, r3
   2d800:	ea000000 	b	2d808 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x58>
   2d804:	e590e0b8 	ldr	lr, [r0, #184]	; 0xb8
   2d808:	e59010c0 	ldr	r1, [r0, #192]	; 0xc0
   2d80c:	e2833001 	add	r3, r3, #1
   2d810:	e7de1001 	ldrb	r1, [lr, r1]
   2d814:	e5ec1001 	strb	r1, [ip, #1]!
   2d818:	e59010c0 	ldr	r1, [r0, #192]	; 0xc0
   2d81c:	e590e0c4 	ldr	lr, [r0, #196]	; 0xc4
   2d820:	e2811001 	add	r1, r1, #1
   2d824:	e58010c0 	str	r1, [r0, #192]	; 0xc0
   2d828:	e59010c0 	ldr	r1, [r0, #192]	; 0xc0
   2d82c:	e151000e 	cmp	r1, lr
   2d830:	258040c0 	strcs	r4, [r0, #192]	; 0xc0
   2d834:	e590e0bc 	ldr	lr, [r0, #188]	; 0xbc
   2d838:	e59010c0 	ldr	r1, [r0, #192]	; 0xc0
   2d83c:	e15e0001 	cmp	lr, r1
   2d840:	11520003 	cmpne	r2, r3
   2d844:	8affffee 	bhi	2d804 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x54>
   2d848:	e1a00003 	mov	r0, r3
   2d84c:	e8bd8010 	pop	{r4, pc}
   2d850:	20201000 	.word	0x20201000
   2d854:	0004db48 	.word	0x0004db48

0002d858 <CUartMaxiSerialDevice::CanGet()>:
   2d858:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2d85c:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
   2d860:	e0520000 	subs	r0, r2, r0
   2d864:	13a00001 	movne	r0, #1
   2d868:	e12fff1e 	bx	lr

0002d86c <CUartMaxiSerialDevice::Peek()>:
   2d86c:	e59030b8 	ldr	r3, [r0, #184]	; 0xb8
   2d870:	e3530000 	cmp	r3, #0
   2d874:	0a000006 	beq	2d894 <CUartMaxiSerialDevice::Peek()+0x28>
   2d878:	e59010bc 	ldr	r1, [r0, #188]	; 0xbc
   2d87c:	e59020c0 	ldr	r2, [r0, #192]	; 0xc0
   2d880:	e1510002 	cmp	r1, r2
   2d884:	0a000002 	beq	2d894 <CUartMaxiSerialDevice::Peek()+0x28>
   2d888:	e59020c0 	ldr	r2, [r0, #192]	; 0xc0
   2d88c:	e7d30002 	ldrb	r0, [r3, r2]
   2d890:	e12fff1e 	bx	lr
   2d894:	e3e00000 	mvn	r0, #0
   2d898:	e12fff1e 	bx	lr

0002d89c <CUartMaxiSerialDevice::AvailableForRead()>:
   2d89c:	e59030c0 	ldr	r3, [r0, #192]	; 0xc0
   2d8a0:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2d8a4:	e1530002 	cmp	r3, r2
   2d8a8:	859020bc 	ldrhi	r2, [r0, #188]	; 0xbc
   2d8ac:	859000c4 	ldrhi	r0, [r0, #196]	; 0xc4
   2d8b0:	959000bc 	ldrls	r0, [r0, #188]	; 0xbc
   2d8b4:	80820000 	addhi	r0, r2, r0
   2d8b8:	e0400003 	sub	r0, r0, r3
   2d8bc:	e12fff1e 	bx	lr

0002d8c0 <CUartMaxiSerialDevice::GetOptions() const>:
   2d8c0:	e2800901 	add	r0, r0, #16384	; 0x4000
   2d8c4:	e5900f18 	ldr	r0, [r0, #3864]	; 0xf18
   2d8c8:	e12fff1e 	bx	lr

0002d8cc <CUartMaxiSerialDevice::SetOptions(unsigned int)>:
   2d8cc:	e2800901 	add	r0, r0, #16384	; 0x4000
   2d8d0:	e5801f18 	str	r1, [r0, #3864]	; 0xf18
   2d8d4:	e12fff1e 	bx	lr

0002d8d8 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   2d8d8:	e5903004 	ldr	r3, [r0, #4]
   2d8dc:	e92d4010 	push	{r4, lr}
   2d8e0:	e3530000 	cmp	r3, #0
   2d8e4:	0a00000e 	beq	2d924 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
   2d8e8:	e2800901 	add	r0, r0, #16384	; 0x4000
   2d8ec:	e5903f1c 	ldr	r3, [r0, #3868]	; 0xf1c
   2d8f0:	e3530000 	cmp	r3, #0
   2d8f4:	1a00000e 	bne	2d934 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x5c>
   2d8f8:	e3510000 	cmp	r1, #0
   2d8fc:	0a000010 	beq	2d944 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x6c>
   2d900:	e1d130d0 	ldrsb	r3, [r1]
   2d904:	e3530000 	cmp	r3, #0
   2d908:	0a000011 	beq	2d954 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x7c>
   2d90c:	e3520000 	cmp	r2, #0
   2d910:	0a000013 	beq	2d964 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
   2d914:	e5802f24 	str	r2, [r0, #3876]	; 0xf24
   2d918:	e5801f20 	str	r1, [r0, #3872]	; 0xf20
   2d91c:	e5801f1c 	str	r1, [r0, #3868]	; 0xf1c
   2d920:	e8bd8010 	pop	{r4, pc}
   2d924:	e59f1048 	ldr	r1, [pc, #72]	; 2d974 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2d928:	e59f2048 	ldr	r2, [pc, #72]	; 2d978 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa0>
   2d92c:	e2810f41 	add	r0, r1, #260	; 0x104
   2d930:	ebffdb53 	bl	24684 <assertion_failed>
   2d934:	e59f1038 	ldr	r1, [pc, #56]	; 2d974 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2d938:	e59f203c 	ldr	r2, [pc, #60]	; 2d97c <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa4>
   2d93c:	e2810f47 	add	r0, r1, #284	; 0x11c
   2d940:	ebffdb4f 	bl	24684 <assertion_failed>
   2d944:	e59f1028 	ldr	r1, [pc, #40]	; 2d974 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2d948:	e3a02f87 	mov	r2, #540	; 0x21c
   2d94c:	e2810f4b 	add	r0, r1, #300	; 0x12c
   2d950:	ebffdb4b 	bl	24684 <assertion_failed>
   2d954:	e59f1018 	ldr	r1, [pc, #24]	; 2d974 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2d958:	e59f2020 	ldr	r2, [pc, #32]	; 2d980 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
   2d95c:	e2810f4e 	add	r0, r1, #312	; 0x138
   2d960:	ebffdb47 	bl	24684 <assertion_failed>
   2d964:	e59f1008 	ldr	r1, [pc, #8]	; 2d974 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2d968:	e59f2014 	ldr	r2, [pc, #20]	; 2d984 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xac>
   2d96c:	e2810f52 	add	r0, r1, #328	; 0x148
   2d970:	ebffdb43 	bl	24684 <assertion_failed>
   2d974:	00045858 	.word	0x00045858
   2d978:	00000219 	.word	0x00000219
   2d97c:	0000021a 	.word	0x0000021a
   2d980:	0000021d 	.word	0x0000021d
   2d984:	0000021e 	.word	0x0000021e

0002d988 <CUartMaxiSerialDevice::InterruptHandler()>:
   2d988:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d98c:	e3a03000 	mov	r3, #0
   2d990:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d994:	e59f222c 	ldr	r2, [pc, #556]	; 2dbc8 <CUartMaxiSerialDevice::InterruptHandler()+0x240>
   2d998:	e5921040 	ldr	r1, [r2, #64]	; 0x40
   2d99c:	e5821044 	str	r1, [r2, #68]	; 0x44
   2d9a0:	e592e018 	ldr	lr, [r2, #24]
   2d9a4:	e21ee010 	ands	lr, lr, #16
   2d9a8:	11a0e003 	movne	lr, r3
   2d9ac:	1a000055 	bne	2db08 <CUartMaxiSerialDevice::InterruptHandler()+0x180>
   2d9b0:	e1a0700e 	mov	r7, lr
   2d9b4:	e3a06003 	mov	r6, #3
   2d9b8:	e3a08002 	mov	r8, #2
   2d9bc:	e3a05001 	mov	r5, #1
   2d9c0:	e3a04004 	mov	r4, #4
   2d9c4:	e59010c4 	ldr	r1, [r0, #196]	; 0xc4
   2d9c8:	e280c901 	add	ip, r0, #16384	; 0x4000
   2d9cc:	ea000037 	b	2dab0 <CUartMaxiSerialDevice::InterruptHandler()+0x128>
   2d9d0:	e59090ec 	ldr	r9, [r0, #236]	; 0xec
   2d9d4:	e5d0a0c9 	ldrb	sl, [r0, #201]	; 0xc9
   2d9d8:	e2899001 	add	r9, r9, #1
   2d9dc:	e35a0000 	cmp	sl, #0
   2d9e0:	e58090ec 	str	r9, [r0, #236]	; 0xec
   2d9e4:	05c050c9 	strbeq	r5, [r0, #201]	; 0xc9
   2d9e8:	e3510000 	cmp	r1, #0
   2d9ec:	0a00003c 	beq	2dae4 <CUartMaxiSerialDevice::InterruptHandler()+0x15c>
   2d9f0:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2d9f4:	e59090c0 	ldr	r9, [r0, #192]	; 0xc0
   2d9f8:	e15a0009 	cmp	sl, r9
   2d9fc:	0a000008 	beq	2da24 <CUartMaxiSerialDevice::InterruptHandler()+0x9c>
   2da00:	e59090c0 	ldr	r9, [r0, #192]	; 0xc0
   2da04:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2da08:	e159000a 	cmp	r9, sl
   2da0c:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2da10:	2a00005a 	bcs	2db80 <CUartMaxiSerialDevice::InterruptHandler()+0x1f8>
   2da14:	e241b001 	sub	fp, r1, #1
   2da18:	e3590000 	cmp	r9, #0
   2da1c:	015b000a 	cmpeq	fp, sl
   2da20:	0a00002f 	beq	2dae4 <CUartMaxiSerialDevice::InterruptHandler()+0x15c>
   2da24:	e59090b8 	ldr	r9, [r0, #184]	; 0xb8
   2da28:	e3590000 	cmp	r9, #0
   2da2c:	0a00002c 	beq	2dae4 <CUartMaxiSerialDevice::InterruptHandler()+0x15c>
   2da30:	e59010bc 	ldr	r1, [r0, #188]	; 0xbc
   2da34:	e7c93001 	strb	r3, [r9, r1]
   2da38:	e59090bc 	ldr	r9, [r0, #188]	; 0xbc
   2da3c:	e59010c4 	ldr	r1, [r0, #196]	; 0xc4
   2da40:	e2899001 	add	r9, r9, #1
   2da44:	e58090bc 	str	r9, [r0, #188]	; 0xbc
   2da48:	e59090bc 	ldr	r9, [r0, #188]	; 0xbc
   2da4c:	e1590001 	cmp	r9, r1
   2da50:	e59c9f1c 	ldr	r9, [ip, #3868]	; 0xf1c
   2da54:	258070bc 	strcs	r7, [r0, #188]	; 0xbc
   2da58:	e3590000 	cmp	r9, #0
   2da5c:	0a000010 	beq	2daa4 <CUartMaxiSerialDevice::InterruptHandler()+0x11c>
   2da60:	e59caf20 	ldr	sl, [ip, #3872]	; 0xf20
   2da64:	e6af3073 	sxtb	r3, r3
   2da68:	e1dab0d0 	ldrsb	fp, [sl]
   2da6c:	e15b0003 	cmp	fp, r3
   2da70:	158c9f20 	strne	r9, [ip, #3872]	; 0xf20
   2da74:	1a000004 	bne	2da8c <CUartMaxiSerialDevice::InterruptHandler()+0x104>
   2da78:	e28a3001 	add	r3, sl, #1
   2da7c:	e58c3f20 	str	r3, [ip, #3872]	; 0xf20
   2da80:	e1da30d1 	ldrsb	r3, [sl, #1]
   2da84:	e3530000 	cmp	r3, #0
   2da88:	03a0e001 	moveq	lr, #1
   2da8c:	e59030e4 	ldr	r3, [r0, #228]	; 0xe4
   2da90:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2da94:	e2833001 	add	r3, r3, #1
   2da98:	e3590000 	cmp	r9, #0
   2da9c:	e58030e4 	str	r3, [r0, #228]	; 0xe4
   2daa0:	05c060c9 	strbeq	r6, [r0, #201]	; 0xc9
   2daa4:	e5923018 	ldr	r3, [r2, #24]
   2daa8:	e3130010 	tst	r3, #16
   2daac:	1a000015 	bne	2db08 <CUartMaxiSerialDevice::InterruptHandler()+0x180>
   2dab0:	e5923000 	ldr	r3, [r2]
   2dab4:	e3130b01 	tst	r3, #1024	; 0x400
   2dab8:	1affffc4 	bne	2d9d0 <CUartMaxiSerialDevice::InterruptHandler()+0x48>
   2dabc:	e3130b02 	tst	r3, #2048	; 0x800
   2dac0:	0a000032 	beq	2db90 <CUartMaxiSerialDevice::InterruptHandler()+0x208>
   2dac4:	e5d0a0c9 	ldrb	sl, [r0, #201]	; 0xc9
   2dac8:	e59090e8 	ldr	r9, [r0, #232]	; 0xe8
   2dacc:	e35a0000 	cmp	sl, #0
   2dad0:	e2899001 	add	r9, r9, #1
   2dad4:	05c080c9 	strbeq	r8, [r0, #201]	; 0xc9
   2dad8:	e3510000 	cmp	r1, #0
   2dadc:	e58090e8 	str	r9, [r0, #232]	; 0xe8
   2dae0:	1affffc2 	bne	2d9f0 <CUartMaxiSerialDevice::InterruptHandler()+0x68>
   2dae4:	e59030f0 	ldr	r3, [r0, #240]	; 0xf0
   2dae8:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2daec:	e2833001 	add	r3, r3, #1
   2daf0:	e58030f0 	str	r3, [r0, #240]	; 0xf0
   2daf4:	e5923018 	ldr	r3, [r2, #24]
   2daf8:	e3590000 	cmp	r9, #0
   2dafc:	05c040c9 	strbeq	r4, [r0, #201]	; 0xc9
   2db00:	e3130010 	tst	r3, #16
   2db04:	0affffe9 	beq	2dab0 <CUartMaxiSerialDevice::InterruptHandler()+0x128>
   2db08:	e59f10b8 	ldr	r1, [pc, #184]	; 2dbc8 <CUartMaxiSerialDevice::InterruptHandler()+0x240>
   2db0c:	ea000010 	b	2db54 <CUartMaxiSerialDevice::InterruptHandler()+0x1cc>
   2db10:	e590c0d0 	ldr	ip, [r0, #208]	; 0xd0
   2db14:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2db18:	e15c0002 	cmp	ip, r2
   2db1c:	0a000024 	beq	2dbb4 <CUartMaxiSerialDevice::InterruptHandler()+0x22c>
   2db20:	e59020cc 	ldr	r2, [r0, #204]	; 0xcc
   2db24:	e3520000 	cmp	r2, #0
   2db28:	0a000021 	beq	2dbb4 <CUartMaxiSerialDevice::InterruptHandler()+0x22c>
   2db2c:	e590c0d4 	ldr	ip, [r0, #212]	; 0xd4
   2db30:	e7d2200c 	ldrb	r2, [r2, ip]
   2db34:	e5812000 	str	r2, [r1]
   2db38:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2db3c:	e590c0d8 	ldr	ip, [r0, #216]	; 0xd8
   2db40:	e2822001 	add	r2, r2, #1
   2db44:	e58020d4 	str	r2, [r0, #212]	; 0xd4
   2db48:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2db4c:	e152000c 	cmp	r2, ip
   2db50:	258030d4 	strcs	r3, [r0, #212]	; 0xd4
   2db54:	e5913018 	ldr	r3, [r1, #24]
   2db58:	e2133020 	ands	r3, r3, #32
   2db5c:	0affffeb 	beq	2db10 <CUartMaxiSerialDevice::InterruptHandler()+0x188>
   2db60:	e35e0000 	cmp	lr, #0
   2db64:	0a000002 	beq	2db74 <CUartMaxiSerialDevice::InterruptHandler()+0x1ec>
   2db68:	e2800901 	add	r0, r0, #16384	; 0x4000
   2db6c:	e5903f24 	ldr	r3, [r0, #3876]	; 0xf24
   2db70:	e12fff33 	blx	r3
   2db74:	e3a03000 	mov	r3, #0
   2db78:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2db7c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2db80:	e049900a 	sub	r9, r9, sl
   2db84:	e3590001 	cmp	r9, #1
   2db88:	9affffd5 	bls	2dae4 <CUartMaxiSerialDevice::InterruptHandler()+0x15c>
   2db8c:	eaffffa4 	b	2da24 <CUartMaxiSerialDevice::InterruptHandler()+0x9c>
   2db90:	e3130c01 	tst	r3, #256	; 0x100
   2db94:	0affff93 	beq	2d9e8 <CUartMaxiSerialDevice::InterruptHandler()+0x60>
   2db98:	e59090e4 	ldr	r9, [r0, #228]	; 0xe4
   2db9c:	e5d0a0c9 	ldrb	sl, [r0, #201]	; 0xc9
   2dba0:	e2899001 	add	r9, r9, #1
   2dba4:	e35a0000 	cmp	sl, #0
   2dba8:	e58090e4 	str	r9, [r0, #228]	; 0xe4
   2dbac:	05c060c9 	strbeq	r6, [r0, #201]	; 0xc9
   2dbb0:	eaffff8c 	b	2d9e8 <CUartMaxiSerialDevice::InterruptHandler()+0x60>
   2dbb4:	e59f200c 	ldr	r2, [pc, #12]	; 2dbc8 <CUartMaxiSerialDevice::InterruptHandler()+0x240>
   2dbb8:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   2dbbc:	e3c33020 	bic	r3, r3, #32
   2dbc0:	e5823038 	str	r3, [r2, #56]	; 0x38
   2dbc4:	eaffffe5 	b	2db60 <CUartMaxiSerialDevice::InterruptHandler()+0x1d8>
   2dbc8:	20201000 	.word	0x20201000

0002dbcc <CUartMaxiSerialDevice::InterruptStub(void*)>:
   2dbcc:	e59f3040 	ldr	r3, [pc, #64]	; 2dc14 <CUartMaxiSerialDevice::InterruptStub(void*)+0x48>
   2dbd0:	e3a01000 	mov	r1, #0
   2dbd4:	e5932000 	ldr	r2, [r3]
   2dbd8:	e2822001 	add	r2, r2, #1
   2dbdc:	e5832000 	str	r2, [r3]
   2dbe0:	ee071fba 	mcr	15, 0, r1, cr7, cr10, {5}
   2dbe4:	e593201c 	ldr	r2, [r3, #28]
   2dbe8:	e3120001 	tst	r2, #1
   2dbec:	012fff1e 	bxeq	lr
   2dbf0:	e5930020 	ldr	r0, [r3, #32]
   2dbf4:	e1500001 	cmp	r0, r1
   2dbf8:	0a000000 	beq	2dc00 <CUartMaxiSerialDevice::InterruptStub(void*)+0x34>
   2dbfc:	eaffff61 	b	2d988 <CUartMaxiSerialDevice::InterruptHandler()>
   2dc00:	e59f1010 	ldr	r1, [pc, #16]	; 2dc18 <CUartMaxiSerialDevice::InterruptStub(void*)+0x4c>
   2dc04:	e3a02fa9 	mov	r2, #676	; 0x2a4
   2dc08:	e92d4010 	push	{r4, lr}
   2dc0c:	e2810f56 	add	r0, r1, #344	; 0x158
   2dc10:	ebffda9b 	bl	24684 <assertion_failed>
   2dc14:	0004db48 	.word	0x0004db48
   2dc18:	00045858 	.word	0x00045858

0002dc1c <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>:
   2dc1c:	e5910000 	ldr	r0, [r1]
   2dc20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2dc24:	e3500000 	cmp	r0, #0
   2dc28:	e1a05001 	mov	r5, r1
   2dc2c:	e1a07002 	mov	r7, r2
   2dc30:	e1a04003 	mov	r4, r3
   2dc34:	e59d6018 	ldr	r6, [sp, #24]
   2dc38:	0a000005 	beq	2dc54 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x38>
   2dc3c:	e5963008 	ldr	r3, [r6, #8]
   2dc40:	e1530004 	cmp	r3, r4
   2dc44:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2dc48:	e5d23000 	ldrb	r3, [r2]
   2dc4c:	e3530000 	cmp	r3, #0
   2dc50:	1a000013 	bne	2dca4 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x88>
   2dc54:	e3540000 	cmp	r4, #0
   2dc58:	1a000007 	bne	2dc7c <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x60>
   2dc5c:	e59d301c 	ldr	r3, [sp, #28]
   2dc60:	e5853000 	str	r3, [r5]
   2dc64:	e59d3020 	ldr	r3, [sp, #32]
   2dc68:	e5c74000 	strb	r4, [r7]
   2dc6c:	e5864000 	str	r4, [r6]
   2dc70:	e5863008 	str	r3, [r6, #8]
   2dc74:	e5864004 	str	r4, [r6, #4]
   2dc78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2dc7c:	e1a00004 	mov	r0, r4
   2dc80:	ebfff48c 	bl	2aeb8 <operator new[](unsigned int)>
   2dc84:	e3a03000 	mov	r3, #0
   2dc88:	e3a02001 	mov	r2, #1
   2dc8c:	e5850000 	str	r0, [r5]
   2dc90:	e5c72000 	strb	r2, [r7]
   2dc94:	e5863000 	str	r3, [r6]
   2dc98:	e5864008 	str	r4, [r6, #8]
   2dc9c:	e5863004 	str	r3, [r6, #4]
   2dca0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2dca4:	ebfff48a 	bl	2aed4 <operator delete[](void*)>
   2dca8:	e3a03000 	mov	r3, #0
   2dcac:	e3540000 	cmp	r4, #0
   2dcb0:	e5853000 	str	r3, [r5]
   2dcb4:	e5c73000 	strb	r3, [r7]
   2dcb8:	e5863000 	str	r3, [r6]
   2dcbc:	e5863008 	str	r3, [r6, #8]
   2dcc0:	e5863004 	str	r3, [r6, #4]
   2dcc4:	0affffe4 	beq	2dc5c <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x40>
   2dcc8:	eaffffeb 	b	2dc7c <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x60>

0002dccc <micros>:
   2dccc:	eaffed7f 	b	292d0 <CTimer::GetClockTicks()>

0002dcd0 <millis>:
   2dcd0:	e92d4010 	push	{r4, lr}
   2dcd4:	ebffed7d 	bl	292d0 <CTimer::GetClockTicks()>
   2dcd8:	e59f3008 	ldr	r3, [pc, #8]	; 2dce8 <millis+0x18>
   2dcdc:	e0803093 	umull	r3, r0, r3, r0
   2dce0:	e1a00320 	lsr	r0, r0, #6
   2dce4:	e8bd8010 	pop	{r4, pc}
   2dce8:	10624dd3 	.word	0x10624dd3

0002dcec <microsDelay>:
   2dcec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2dcf0:	e1a06000 	mov	r6, r0
   2dcf4:	ebffed75 	bl	292d0 <CTimer::GetClockTicks()>
   2dcf8:	e1a04000 	mov	r4, r0
   2dcfc:	e1e05000 	mvn	r5, r0
   2dd00:	e0867000 	add	r7, r6, r0
   2dd04:	ea000004 	b	2dd1c <microsDelay+0x30>
   2dd08:	e1560003 	cmp	r6, r3
   2dd0c:	23a03000 	movcs	r3, #0
   2dd10:	33a03001 	movcc	r3, #1
   2dd14:	e3530000 	cmp	r3, #0
   2dd18:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   2dd1c:	ebffed6b 	bl	292d0 <CTimer::GetClockTicks()>
   2dd20:	e1540000 	cmp	r4, r0
   2dd24:	e0853000 	add	r3, r5, r0
   2dd28:	8afffff6 	bhi	2dd08 <microsDelay+0x1c>
   2dd2c:	e1570000 	cmp	r7, r0
   2dd30:	23a03000 	movcs	r3, #0
   2dd34:	33a03001 	movcc	r3, #1
   2dd38:	e3530000 	cmp	r3, #0
   2dd3c:	0afffff6 	beq	2dd1c <microsDelay+0x30>
   2dd40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002dd44 <isTimeout>:
   2dd44:	e1500001 	cmp	r0, r1
   2dd48:	2a000005 	bcs	2dd64 <isTimeout+0x20>
   2dd4c:	e0401001 	sub	r1, r0, r1
   2dd50:	e2411001 	sub	r1, r1, #1
   2dd54:	e1510002 	cmp	r1, r2
   2dd58:	93a00000 	movls	r0, #0
   2dd5c:	83a00001 	movhi	r0, #1
   2dd60:	e12fff1e 	bx	lr
   2dd64:	e0811002 	add	r1, r1, r2
   2dd68:	e1510000 	cmp	r1, r0
   2dd6c:	23a00000 	movcs	r0, #0
   2dd70:	33a00001 	movcc	r0, #1
   2dd74:	e12fff1e 	bx	lr

0002dd78 <timeToTimeout>:
   2dd78:	e1500001 	cmp	r0, r1
   2dd7c:	3a000004 	bcc	2dd94 <timeToTimeout+0x1c>
   2dd80:	e0811002 	add	r1, r1, r2
   2dd84:	e1510000 	cmp	r1, r0
   2dd88:	2a000007 	bcs	2ddac <timeToTimeout+0x34>
   2dd8c:	e3a00000 	mov	r0, #0
   2dd90:	e12fff1e 	bx	lr
   2dd94:	e0403001 	sub	r3, r0, r1
   2dd98:	e2433001 	sub	r3, r3, #1
   2dd9c:	e1530002 	cmp	r3, r2
   2dda0:	8afffff9 	bhi	2dd8c <timeToTimeout+0x14>
   2dda4:	e2822001 	add	r2, r2, #1
   2dda8:	e0821001 	add	r1, r2, r1
   2ddac:	e0410000 	sub	r0, r1, r0
   2ddb0:	e12fff1e 	bx	lr

0002ddb4 <strlcpy>:
   2ddb4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2ddb8:	e1a06000 	mov	r6, r0
   2ddbc:	e1a00001 	mov	r0, r1
   2ddc0:	e1a04002 	mov	r4, r2
   2ddc4:	e1a07001 	mov	r7, r1
   2ddc8:	ebfff053 	bl	29f1c <strlen>
   2ddcc:	e2802001 	add	r2, r0, #1
   2ddd0:	e1520004 	cmp	r2, r4
   2ddd4:	e1a05000 	mov	r5, r0
   2ddd8:	3a00000c 	bcc	2de10 <strlcpy+0x5c>
   2dddc:	e3540000 	cmp	r4, #0
   2dde0:	1a000001 	bne	2ddec <strlcpy+0x38>
   2dde4:	e1a00005 	mov	r0, r5
   2dde8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2ddec:	e2444001 	sub	r4, r4, #1
   2ddf0:	e1a01007 	mov	r1, r7
   2ddf4:	e1a02004 	mov	r2, r4
   2ddf8:	e1a00006 	mov	r0, r6
   2ddfc:	ebfff241 	bl	2a708 <memcpy>
   2de00:	e3a03000 	mov	r3, #0
   2de04:	e1a00005 	mov	r0, r5
   2de08:	e7c63004 	strb	r3, [r6, r4]
   2de0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2de10:	e1a01007 	mov	r1, r7
   2de14:	e1a00006 	mov	r0, r6
   2de18:	ebfff23a 	bl	2a708 <memcpy>
   2de1c:	e1a00005 	mov	r0, r5
   2de20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002de24 <strlcat>:
   2de24:	e92d4370 	push	{r4, r5, r6, r8, r9, lr}
   2de28:	e1a06002 	mov	r6, r2
   2de2c:	e24dd008 	sub	sp, sp, #8
   2de30:	e1a09000 	mov	r9, r0
   2de34:	e1a00001 	mov	r0, r1
   2de38:	e58d1004 	str	r1, [sp, #4]
   2de3c:	ebfff036 	bl	29f1c <strlen>
   2de40:	e3560000 	cmp	r6, #0
   2de44:	e1a08000 	mov	r8, r0
   2de48:	0a000019 	beq	2deb4 <strlcat+0x90>
   2de4c:	e3a04000 	mov	r4, #0
   2de50:	e59d1004 	ldr	r1, [sp, #4]
   2de54:	e2493001 	sub	r3, r9, #1
   2de58:	ea000002 	b	2de68 <strlcat+0x44>
   2de5c:	e2844001 	add	r4, r4, #1
   2de60:	e1560004 	cmp	r6, r4
   2de64:	0a000012 	beq	2deb4 <strlcat+0x90>
   2de68:	e1f350d1 	ldrsb	r5, [r3, #1]!
   2de6c:	e3550000 	cmp	r5, #0
   2de70:	1afffff9 	bne	2de5c <strlcat+0x38>
   2de74:	e0463004 	sub	r3, r6, r4
   2de78:	e1530008 	cmp	r3, r8
   2de7c:	8a000008 	bhi	2dea4 <strlcat+0x80>
   2de80:	e2466001 	sub	r6, r6, #1
   2de84:	e1a02006 	mov	r2, r6
   2de88:	e0890004 	add	r0, r9, r4
   2de8c:	e0896006 	add	r6, r9, r6
   2de90:	ebfff21c 	bl	2a708 <memcpy>
   2de94:	e7c65004 	strb	r5, [r6, r4]
   2de98:	e0880004 	add	r0, r8, r4
   2de9c:	e28dd008 	add	sp, sp, #8
   2dea0:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
   2dea4:	e0890004 	add	r0, r9, r4
   2dea8:	e2882001 	add	r2, r8, #1
   2deac:	ebfff215 	bl	2a708 <memcpy>
   2deb0:	eafffff8 	b	2de98 <strlcat+0x74>
   2deb4:	e0880006 	add	r0, r8, r6
   2deb8:	e28dd008 	add	sp, sp, #8
   2debc:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}

0002dec0 <strnlen>:
   2dec0:	e3510000 	cmp	r1, #0
   2dec4:	e1a03000 	mov	r3, r0
   2dec8:	0a000008 	beq	2def0 <strnlen+0x30>
   2decc:	e3a00000 	mov	r0, #0
   2ded0:	e2433001 	sub	r3, r3, #1
   2ded4:	e1f320d1 	ldrsb	r2, [r3, #1]!
   2ded8:	e3520000 	cmp	r2, #0
   2dedc:	012fff1e 	bxeq	lr
   2dee0:	e2800001 	add	r0, r0, #1
   2dee4:	e1510000 	cmp	r1, r0
   2dee8:	1afffff9 	bne	2ded4 <strnlen+0x14>
   2deec:	e12fff1e 	bx	lr
   2def0:	e1a00001 	mov	r0, r1
   2def4:	e12fff1e 	bx	lr

0002def8 <sprintf>:
   2def8:	e92d000e 	push	{r1, r2, r3}
   2defc:	e92d4010 	push	{r4, lr}
   2df00:	e24dd01c 	sub	sp, sp, #28
   2df04:	e28d3028 	add	r3, sp, #40	; 0x28
   2df08:	e1a04000 	mov	r4, r0
   2df0c:	e28d0008 	add	r0, sp, #8
   2df10:	e58d3004 	str	r3, [sp, #4]
   2df14:	ebffe6b2 	bl	279e4 <CString::CString()>
   2df18:	e59d2004 	ldr	r2, [sp, #4]
   2df1c:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   2df20:	e28d0008 	add	r0, sp, #8
   2df24:	ebffe8d1 	bl	28270 <CString::FormatV(char const*, std::__va_list)>
   2df28:	e28d0008 	add	r0, sp, #8
   2df2c:	ebffe6c4 	bl	27a44 <CString::operator char const*() const>
   2df30:	e1a01000 	mov	r1, r0
   2df34:	e1a00004 	mov	r0, r4
   2df38:	ebfff09b 	bl	2a1ac <strcpy>
   2df3c:	e28d0008 	add	r0, sp, #8
   2df40:	ebffe6f1 	bl	27b0c <CString::GetLength() const>
   2df44:	e1a04000 	mov	r4, r0
   2df48:	e28d0008 	add	r0, sp, #8
   2df4c:	ebffe671 	bl	27918 <CString::~CString()>
   2df50:	e1a00004 	mov	r0, r4
   2df54:	e28dd01c 	add	sp, sp, #28
   2df58:	e8bd4010 	pop	{r4, lr}
   2df5c:	e28dd00c 	add	sp, sp, #12
   2df60:	e12fff1e 	bx	lr

0002df64 <snprintf>:
   2df64:	e92d000c 	push	{r2, r3}
   2df68:	e92d4030 	push	{r4, r5, lr}
   2df6c:	e24dd01c 	sub	sp, sp, #28
   2df70:	e28d302c 	add	r3, sp, #44	; 0x2c
   2df74:	e1a05000 	mov	r5, r0
   2df78:	e28d0008 	add	r0, sp, #8
   2df7c:	e1a04001 	mov	r4, r1
   2df80:	e58d3004 	str	r3, [sp, #4]
   2df84:	ebffe696 	bl	279e4 <CString::CString()>
   2df88:	e59d2004 	ldr	r2, [sp, #4]
   2df8c:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   2df90:	e28d0008 	add	r0, sp, #8
   2df94:	ebffe8b5 	bl	28270 <CString::FormatV(char const*, std::__va_list)>
   2df98:	e28d0008 	add	r0, sp, #8
   2df9c:	ebffe6da 	bl	27b0c <CString::GetLength() const>
   2dfa0:	e2441001 	sub	r1, r4, #1
   2dfa4:	e1510000 	cmp	r1, r0
   2dfa8:	21a04000 	movcs	r4, r0
   2dfac:	e28d0008 	add	r0, sp, #8
   2dfb0:	31a04001 	movcc	r4, r1
   2dfb4:	ebffe6a2 	bl	27a44 <CString::operator char const*() const>
   2dfb8:	e1a02004 	mov	r2, r4
   2dfbc:	e1a01000 	mov	r1, r0
   2dfc0:	e1a00005 	mov	r0, r5
   2dfc4:	ebfff1cf 	bl	2a708 <memcpy>
   2dfc8:	e3a03000 	mov	r3, #0
   2dfcc:	e28d0008 	add	r0, sp, #8
   2dfd0:	e7c53004 	strb	r3, [r5, r4]
   2dfd4:	ebffe64f 	bl	27918 <CString::~CString()>
   2dfd8:	e1a00004 	mov	r0, r4
   2dfdc:	e28dd01c 	add	sp, sp, #28
   2dfe0:	e8bd4030 	pop	{r4, r5, lr}
   2dfe4:	e28dd008 	add	sp, sp, #8
   2dfe8:	e12fff1e 	bx	lr

0002dfec <vsnprintf>:
   2dfec:	e92d4030 	push	{r4, r5, lr}
   2dff0:	e24dd01c 	sub	sp, sp, #28
   2dff4:	e1a05000 	mov	r5, r0
   2dff8:	e28d0008 	add	r0, sp, #8
   2dffc:	e1a04001 	mov	r4, r1
   2e000:	e58d3000 	str	r3, [sp]
   2e004:	e58d2004 	str	r2, [sp, #4]
   2e008:	ebffe675 	bl	279e4 <CString::CString()>
   2e00c:	e59d2000 	ldr	r2, [sp]
   2e010:	e59d1004 	ldr	r1, [sp, #4]
   2e014:	e28d0008 	add	r0, sp, #8
   2e018:	ebffe894 	bl	28270 <CString::FormatV(char const*, std::__va_list)>
   2e01c:	e28d0008 	add	r0, sp, #8
   2e020:	ebffe6b9 	bl	27b0c <CString::GetLength() const>
   2e024:	e2441001 	sub	r1, r4, #1
   2e028:	e1510000 	cmp	r1, r0
   2e02c:	21a04000 	movcs	r4, r0
   2e030:	e28d0008 	add	r0, sp, #8
   2e034:	31a04001 	movcc	r4, r1
   2e038:	ebffe681 	bl	27a44 <CString::operator char const*() const>
   2e03c:	e1a02004 	mov	r2, r4
   2e040:	e1a01000 	mov	r1, r0
   2e044:	e1a00005 	mov	r0, r5
   2e048:	ebfff1ae 	bl	2a708 <memcpy>
   2e04c:	e3a03000 	mov	r3, #0
   2e050:	e28d0008 	add	r0, sp, #8
   2e054:	e7c53004 	strb	r3, [r5, r4]
   2e058:	ebffe62e 	bl	27918 <CString::~CString()>
   2e05c:	e1a00004 	mov	r0, r4
   2e060:	e28dd01c 	add	sp, sp, #28
   2e064:	e8bd8030 	pop	{r4, r5, pc}

0002e068 <jsonGetValueForKey>:
   2e068:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e06c:	e1a08001 	mov	r8, r1
   2e070:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2e074:	e24dd018 	sub	sp, sp, #24
   2e078:	e1a07000 	mov	r7, r0
   2e07c:	e28d000c 	add	r0, sp, #12
   2e080:	e1a0a002 	mov	sl, r2
   2e084:	e1a09003 	mov	r9, r3
   2e088:	eb000130 	bl	2e550 <JSMNR_init>
   2e08c:	e1a00008 	mov	r0, r8
   2e090:	ebffefa1 	bl	29f1c <strlen>
   2e094:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2e098:	e1a02000 	mov	r2, r0
   2e09c:	e1a01008 	mov	r1, r8
   2e0a0:	e28d000c 	add	r0, sp, #12
   2e0a4:	e28d3018 	add	r3, sp, #24
   2e0a8:	e58dc000 	str	ip, [sp]
   2e0ac:	eb000142 	bl	2e5bc <JSMNR_parse>
   2e0b0:	e2506000 	subs	r6, r0, #0
   2e0b4:	da000020 	ble	2e13c <jsonGetValueForKey+0xd4>
   2e0b8:	e3a05000 	mov	r5, #0
   2e0bc:	e28d4018 	add	r4, sp, #24
   2e0c0:	ea000002 	b	2e0d0 <jsonGetValueForKey+0x68>
   2e0c4:	e1560005 	cmp	r6, r5
   2e0c8:	e2844010 	add	r4, r4, #16
   2e0cc:	0a00001a 	beq	2e13c <jsonGetValueForKey+0xd4>
   2e0d0:	e5d4c000 	ldrb	ip, [r4]
   2e0d4:	e2855001 	add	r5, r5, #1
   2e0d8:	e35c0003 	cmp	ip, #3
   2e0dc:	1afffff8 	bne	2e0c4 <jsonGetValueForKey+0x5c>
   2e0e0:	e1a00007 	mov	r0, r7
   2e0e4:	ebffef8c 	bl	29f1c <strlen>
   2e0e8:	e994000a 	ldmib	r4, {r1, r3}
   2e0ec:	e0433001 	sub	r3, r3, r1
   2e0f0:	e1500003 	cmp	r0, r3
   2e0f4:	1afffff2 	bne	2e0c4 <jsonGetValueForKey+0x5c>
   2e0f8:	e1a02000 	mov	r2, r0
   2e0fc:	e0880001 	add	r0, r8, r1
   2e100:	e1a01007 	mov	r1, r7
   2e104:	ebffefcd 	bl	2a040 <strncmp>
   2e108:	e3500000 	cmp	r0, #0
   2e10c:	1affffec 	bne	2e0c4 <jsonGetValueForKey+0x5c>
   2e110:	e5941014 	ldr	r1, [r4, #20]
   2e114:	e5942018 	ldr	r2, [r4, #24]
   2e118:	e0422001 	sub	r2, r2, r1
   2e11c:	e1520009 	cmp	r2, r9
   2e120:	aa000005 	bge	2e13c <jsonGetValueForKey+0xd4>
   2e124:	e1a0000a 	mov	r0, sl
   2e128:	e2822001 	add	r2, r2, #1
   2e12c:	e0881001 	add	r1, r8, r1
   2e130:	ebffff1f 	bl	2ddb4 <strlcpy>
   2e134:	e3a00001 	mov	r0, #1
   2e138:	ea000000 	b	2e140 <jsonGetValueForKey+0xd8>
   2e13c:	e3a00000 	mov	r0, #0
   2e140:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2e144:	e28dd018 	add	sp, sp, #24
   2e148:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002e14c <jsonGetArrayLen>:
   2e14c:	e92d4010 	push	{r4, lr}
   2e150:	e1a04000 	mov	r4, r0
   2e154:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2e158:	e24dd018 	sub	sp, sp, #24
   2e15c:	e28d000c 	add	r0, sp, #12
   2e160:	eb0000fa 	bl	2e550 <JSMNR_init>
   2e164:	e1a00004 	mov	r0, r4
   2e168:	ebffef6b 	bl	29f1c <strlen>
   2e16c:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2e170:	e1a02000 	mov	r2, r0
   2e174:	e1a01004 	mov	r1, r4
   2e178:	e28d3018 	add	r3, sp, #24
   2e17c:	e28d000c 	add	r0, sp, #12
   2e180:	e58dc000 	str	ip, [sp]
   2e184:	eb00010c 	bl	2e5bc <JSMNR_parse>
   2e188:	e3500000 	cmp	r0, #0
   2e18c:	b3a00000 	movlt	r0, #0
   2e190:	ba000004 	blt	2e1a8 <jsonGetArrayLen+0x5c>
   2e194:	0a000006 	beq	2e1b4 <jsonGetArrayLen+0x68>
   2e198:	e5dd3018 	ldrb	r3, [sp, #24]
   2e19c:	e3530002 	cmp	r3, #2
   2e1a0:	1a000003 	bne	2e1b4 <jsonGetArrayLen+0x68>
   2e1a4:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   2e1a8:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2e1ac:	e28dd018 	add	sp, sp, #24
   2e1b0:	e8bd8010 	pop	{r4, pc}
   2e1b4:	e3e00000 	mvn	r0, #0
   2e1b8:	eafffffa 	b	2e1a8 <jsonGetArrayLen+0x5c>

0002e1bc <jsonGetArrayElem>:
   2e1bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e1c0:	e1a08002 	mov	r8, r2
   2e1c4:	e1a06001 	mov	r6, r1
   2e1c8:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2e1cc:	e24dd018 	sub	sp, sp, #24
   2e1d0:	e1a02003 	mov	r2, r3
   2e1d4:	e59f111c 	ldr	r1, [pc, #284]	; 2e2f8 <jsonGetArrayElem+0x13c>
   2e1d8:	e1a05000 	mov	r5, r0
   2e1dc:	e1a00008 	mov	r0, r8
   2e1e0:	e1a07003 	mov	r7, r3
   2e1e4:	ebfffef2 	bl	2ddb4 <strlcpy>
   2e1e8:	e28d000c 	add	r0, sp, #12
   2e1ec:	eb0000d7 	bl	2e550 <JSMNR_init>
   2e1f0:	e1a00006 	mov	r0, r6
   2e1f4:	ebffef48 	bl	29f1c <strlen>
   2e1f8:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2e1fc:	e1a02000 	mov	r2, r0
   2e200:	e1a01006 	mov	r1, r6
   2e204:	e28d000c 	add	r0, sp, #12
   2e208:	e28d3018 	add	r3, sp, #24
   2e20c:	e58dc000 	str	ip, [sp]
   2e210:	eb0000e9 	bl	2e5bc <JSMNR_parse>
   2e214:	e3500000 	cmp	r0, #0
   2e218:	ca000003 	bgt	2e22c <jsonGetArrayElem+0x70>
   2e21c:	e3a00000 	mov	r0, #0
   2e220:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2e224:	e28dd018 	add	sp, sp, #24
   2e228:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e22c:	e5dd3018 	ldrb	r3, [sp, #24]
   2e230:	e3530002 	cmp	r3, #2
   2e234:	1afffff8 	bne	2e21c <jsonGetArrayElem+0x60>
   2e238:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2e23c:	e1530005 	cmp	r3, r5
   2e240:	dafffff5 	ble	2e21c <jsonGetArrayElem+0x60>
   2e244:	e3550000 	cmp	r5, #0
   2e248:	0a000025 	beq	2e2e4 <jsonGetArrayElem+0x128>
   2e24c:	e3a02000 	mov	r2, #0
   2e250:	e3a0c001 	mov	ip, #1
   2e254:	e3a0e010 	mov	lr, #16
   2e258:	e28d3ef5 	add	r3, sp, #3920	; 0xf50
   2e25c:	e2833008 	add	r3, r3, #8
   2e260:	e083300e 	add	r3, r3, lr
   2e264:	e150000c 	cmp	r0, ip
   2e268:	e5133f38 	ldr	r3, [r3, #-3896]	; 0xfffff0c8
   2e26c:	ca000004 	bgt	2e284 <jsonGetArrayElem+0xc8>
   2e270:	eaffffe9 	b	2e21c <jsonGetArrayElem+0x60>
   2e274:	e28cc001 	add	ip, ip, #1
   2e278:	e150000c 	cmp	r0, ip
   2e27c:	0affffe6 	beq	2e21c <jsonGetArrayElem+0x60>
   2e280:	e1a0e20c 	lsl	lr, ip, #4
   2e284:	e28d1018 	add	r1, sp, #24
   2e288:	e081400e 	add	r4, r1, lr
   2e28c:	e5944004 	ldr	r4, [r4, #4]
   2e290:	e1540003 	cmp	r4, r3
   2e294:	dafffff6 	ble	2e274 <jsonGetArrayElem+0xb8>
   2e298:	e150000c 	cmp	r0, ip
   2e29c:	daffffde 	ble	2e21c <jsonGetArrayElem+0x60>
   2e2a0:	e2822001 	add	r2, r2, #1
   2e2a4:	e1550002 	cmp	r5, r2
   2e2a8:	1affffea 	bne	2e258 <jsonGetArrayElem+0x9c>
   2e2ac:	e28d3ef5 	add	r3, sp, #3920	; 0xf50
   2e2b0:	e2833008 	add	r3, r3, #8
   2e2b4:	e083e00e 	add	lr, r3, lr
   2e2b8:	e51e1f3c 	ldr	r1, [lr, #-3900]	; 0xfffff0c4
   2e2bc:	e51e2f38 	ldr	r2, [lr, #-3896]	; 0xfffff0c8
   2e2c0:	e1a00008 	mov	r0, r8
   2e2c4:	e0422001 	sub	r2, r2, r1
   2e2c8:	e2822001 	add	r2, r2, #1
   2e2cc:	e1520007 	cmp	r2, r7
   2e2d0:	a1a02007 	movge	r2, r7
   2e2d4:	e0861001 	add	r1, r6, r1
   2e2d8:	ebfffeb5 	bl	2ddb4 <strlcpy>
   2e2dc:	e3a00001 	mov	r0, #1
   2e2e0:	eaffffce 	b	2e220 <jsonGetArrayElem+0x64>
   2e2e4:	e3500001 	cmp	r0, #1
   2e2e8:	01a00005 	moveq	r0, r5
   2e2ec:	0affffcb 	beq	2e220 <jsonGetArrayElem+0x64>
   2e2f0:	e3a0e010 	mov	lr, #16
   2e2f4:	eaffffec 	b	2e2ac <jsonGetArrayElem+0xf0>
   2e2f8:	00047150 	.word	0x00047150

0002e2fc <jsonEscape>:
   2e2fc:	e1d030d0 	ldrsb	r3, [r0]
   2e300:	e92d4070 	push	{r4, r5, r6, lr}
   2e304:	e3530000 	cmp	r3, #0
   2e308:	0a00002d 	beq	2e3c4 <jsonEscape+0xc8>
   2e30c:	e3520002 	cmp	r2, #2
   2e310:	e3a0e000 	mov	lr, #0
   2e314:	da00001a 	ble	2e384 <jsonEscape+0x88>
   2e318:	e3a0c002 	mov	ip, #2
   2e31c:	e3a0505c 	mov	r5, #92	; 0x5c
   2e320:	e3a0606e 	mov	r6, #110	; 0x6e
   2e324:	ea000009 	b	2e350 <jsonEscape+0x54>
   2e328:	e353000a 	cmp	r3, #10
   2e32c:	14c13001 	strbne	r3, [r1], #1
   2e330:	128ee001 	addne	lr, lr, #1
   2e334:	0a00001c 	beq	2e3ac <jsonEscape+0xb0>
   2e338:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2e33c:	e28ec002 	add	ip, lr, #2
   2e340:	e3530000 	cmp	r3, #0
   2e344:	0a00000e 	beq	2e384 <jsonEscape+0x88>
   2e348:	e15c0002 	cmp	ip, r2
   2e34c:	aa00000c 	bge	2e384 <jsonEscape+0x88>
   2e350:	e3530022 	cmp	r3, #34	; 0x22
   2e354:	0a00000e 	beq	2e394 <jsonEscape+0x98>
   2e358:	e353005c 	cmp	r3, #92	; 0x5c
   2e35c:	1afffff1 	bne	2e328 <jsonEscape+0x2c>
   2e360:	e1a04001 	mov	r4, r1
   2e364:	e1a0e00c 	mov	lr, ip
   2e368:	e4c43002 	strb	r3, [r4], #2
   2e36c:	e5c13001 	strb	r3, [r1, #1]
   2e370:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2e374:	e1a01004 	mov	r1, r4
   2e378:	e3530000 	cmp	r3, #0
   2e37c:	e28ec002 	add	ip, lr, #2
   2e380:	1afffff0 	bne	2e348 <jsonEscape+0x4c>
   2e384:	e152000e 	cmp	r2, lr
   2e388:	c3a03000 	movgt	r3, #0
   2e38c:	c5c13000 	strbgt	r3, [r1]
   2e390:	e8bd8070 	pop	{r4, r5, r6, pc}
   2e394:	e1a04001 	mov	r4, r1
   2e398:	e4c45002 	strb	r5, [r4], #2
   2e39c:	e1a0e00c 	mov	lr, ip
   2e3a0:	e5c13001 	strb	r3, [r1, #1]
   2e3a4:	e1a01004 	mov	r1, r4
   2e3a8:	eaffffe2 	b	2e338 <jsonEscape+0x3c>
   2e3ac:	e1a03001 	mov	r3, r1
   2e3b0:	e4c35002 	strb	r5, [r3], #2
   2e3b4:	e1a0e00c 	mov	lr, ip
   2e3b8:	e5c16001 	strb	r6, [r1, #1]
   2e3bc:	e1a01003 	mov	r1, r3
   2e3c0:	eaffffdc 	b	2e338 <jsonEscape+0x3c>
   2e3c4:	e1a0e003 	mov	lr, r3
   2e3c8:	eaffffed 	b	2e384 <jsonEscape+0x88>

0002e3cc <rdisspace>:
   2e3cc:	e3500020 	cmp	r0, #32
   2e3d0:	0a000004 	beq	2e3e8 <rdisspace+0x1c>
   2e3d4:	e2400009 	sub	r0, r0, #9
   2e3d8:	e3500004 	cmp	r0, #4
   2e3dc:	83a00000 	movhi	r0, #0
   2e3e0:	93a00001 	movls	r0, #1
   2e3e4:	e12fff1e 	bx	lr
   2e3e8:	e3a00001 	mov	r0, #1
   2e3ec:	e12fff1e 	bx	lr

0002e3f0 <rdisdigit>:
   2e3f0:	e2400030 	sub	r0, r0, #48	; 0x30
   2e3f4:	e3500009 	cmp	r0, #9
   2e3f8:	83a00000 	movhi	r0, #0
   2e3fc:	93a00001 	movls	r0, #1
   2e400:	e12fff1e 	bx	lr

0002e404 <rdisupper>:
   2e404:	e2400041 	sub	r0, r0, #65	; 0x41
   2e408:	e3500019 	cmp	r0, #25
   2e40c:	83a00000 	movhi	r0, #0
   2e410:	93a00001 	movls	r0, #1
   2e414:	e12fff1e 	bx	lr

0002e418 <rdislower>:
   2e418:	e2400061 	sub	r0, r0, #97	; 0x61
   2e41c:	e3500019 	cmp	r0, #25
   2e420:	83a00000 	movhi	r0, #0
   2e424:	93a00001 	movls	r0, #1
   2e428:	e12fff1e 	bx	lr

0002e42c <rdtolower>:
   2e42c:	e6ef3070 	uxtb	r3, r0
   2e430:	e2432041 	sub	r2, r3, #65	; 0x41
   2e434:	e3520019 	cmp	r2, #25
   2e438:	92830020 	addls	r0, r3, #32
   2e43c:	96af0070 	sxtbls	r0, r0
   2e440:	e12fff1e 	bx	lr

0002e444 <rdtoupper>:
   2e444:	e6ef3070 	uxtb	r3, r0
   2e448:	e2432061 	sub	r2, r3, #97	; 0x61
   2e44c:	e3520019 	cmp	r2, #25
   2e450:	92430020 	subls	r0, r3, #32
   2e454:	96af0070 	sxtbls	r0, r0
   2e458:	e12fff1e 	bx	lr

0002e45c <rdisalpha>:
   2e45c:	e3c00020 	bic	r0, r0, #32
   2e460:	e2400041 	sub	r0, r0, #65	; 0x41
   2e464:	e3500019 	cmp	r0, #25
   2e468:	83a00000 	movhi	r0, #0
   2e46c:	93a00001 	movls	r0, #1
   2e470:	e12fff1e 	bx	lr

0002e474 <rdstrrev>:
   2e474:	e92d4070 	push	{r4, r5, r6, lr}
   2e478:	e1a04000 	mov	r4, r0
   2e47c:	ebffeea6 	bl	29f1c <strlen>
   2e480:	e2403001 	sub	r3, r0, #1
   2e484:	e3530000 	cmp	r3, #0
   2e488:	d8bd8070 	pople	{r4, r5, r6, pc}
   2e48c:	e3e06001 	mvn	r6, #1
   2e490:	e2441001 	sub	r1, r4, #1
   2e494:	e084c000 	add	ip, r4, r0
   2e498:	e1a02001 	mov	r2, r1
   2e49c:	e5f1e001 	ldrb	lr, [r1, #1]!
   2e4a0:	e2822002 	add	r2, r2, #2
   2e4a4:	e0463001 	sub	r3, r6, r1
   2e4a8:	e0833004 	add	r3, r3, r4
   2e4ac:	e57c5001 	ldrb	r5, [ip, #-1]!
   2e4b0:	e0422004 	sub	r2, r2, r4
   2e4b4:	e0833000 	add	r3, r3, r0
   2e4b8:	e1520003 	cmp	r2, r3
   2e4bc:	e5c15000 	strb	r5, [r1]
   2e4c0:	e5cce000 	strb	lr, [ip]
   2e4c4:	bafffff3 	blt	2e498 <rdstrrev+0x24>
   2e4c8:	e8bd8070 	pop	{r4, r5, r6, pc}

0002e4cc <rditoa>:
   2e4cc:	e3520000 	cmp	r2, #0
   2e4d0:	0a00001c 	beq	2e548 <rditoa+0x7c>
   2e4d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e4d8:	e1a07001 	mov	r7, r1
   2e4dc:	e1a05003 	mov	r5, r3
   2e4e0:	e1a08001 	mov	r8, r1
   2e4e4:	e2424001 	sub	r4, r2, #1
   2e4e8:	e2616001 	rsb	r6, r1, #1
   2e4ec:	ea000002 	b	2e4fc <rditoa+0x30>
   2e4f0:	e1540003 	cmp	r4, r3
   2e4f4:	e2888001 	add	r8, r8, #1
   2e4f8:	da00000f 	ble	2e53c <rditoa+0x70>
   2e4fc:	e1a01005 	mov	r1, r5
   2e500:	eb003b5c 	bl	3d278 <__aeabi_idivmod>
   2e504:	e3510009 	cmp	r1, #9
   2e508:	e2813030 	add	r3, r1, #48	; 0x30
   2e50c:	c2811037 	addgt	r1, r1, #55	; 0x37
   2e510:	d5c83000 	strble	r3, [r8]
   2e514:	c5c81000 	strbgt	r1, [r8]
   2e518:	e3500000 	cmp	r0, #0
   2e51c:	e0863008 	add	r3, r6, r8
   2e520:	1afffff2 	bne	2e4f0 <rditoa+0x24>
   2e524:	e3a04000 	mov	r4, #0
   2e528:	e1a00007 	mov	r0, r7
   2e52c:	e7c74003 	strb	r4, [r7, r3]
   2e530:	ebffffcf 	bl	2e474 <rdstrrev>
   2e534:	e1a00004 	mov	r0, r4
   2e538:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e53c:	1afffff8 	bne	2e524 <rditoa+0x58>
   2e540:	e3e00000 	mvn	r0, #0
   2e544:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e548:	e3e00000 	mvn	r0, #0
   2e54c:	e12fff1e 	bx	lr

0002e550 <JSMNR_init>:
   2e550:	e3a03000 	mov	r3, #0
   2e554:	e3e02000 	mvn	r2, #0
   2e558:	e5803000 	str	r3, [r0]
   2e55c:	e5802008 	str	r2, [r0, #8]
   2e560:	e5803004 	str	r3, [r0, #4]
   2e564:	e12fff1e 	bx	lr

0002e568 <JSMNR_logLongStr>:
   2e568:	e92d48f0 	push	{r4, r5, r6, r7, fp, lr}
   2e56c:	e3a04000 	mov	r4, #0
   2e570:	e1a05001 	mov	r5, r1
   2e574:	e1a07004 	mov	r7, r4
   2e578:	e28db014 	add	fp, sp, #20
   2e57c:	ea000007 	b	2e5a0 <JSMNR_logLongStr+0x38>
   2e580:	e1a0600d 	mov	r6, sp
   2e584:	e24dd058 	sub	sp, sp, #88	; 0x58
   2e588:	e1a0000d 	mov	r0, sp
   2e58c:	e3a02051 	mov	r2, #81	; 0x51
   2e590:	ebfffe07 	bl	2ddb4 <strlcpy>
   2e594:	e5cd7050 	strb	r7, [sp, #80]	; 0x50
   2e598:	e1a0d006 	mov	sp, r6
   2e59c:	e2844050 	add	r4, r4, #80	; 0x50
   2e5a0:	e1a00005 	mov	r0, r5
   2e5a4:	ebffee5c 	bl	29f1c <strlen>
   2e5a8:	e1500004 	cmp	r0, r4
   2e5ac:	e0851004 	add	r1, r5, r4
   2e5b0:	8afffff2 	bhi	2e580 <JSMNR_logLongStr+0x18>
   2e5b4:	e24bd014 	sub	sp, fp, #20
   2e5b8:	e8bd88f0 	pop	{r4, r5, r6, r7, fp, pc}

0002e5bc <JSMNR_parse>:
   2e5bc:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e5c0:	e590e000 	ldr	lr, [r0]
   2e5c4:	e5905004 	ldr	r5, [r0, #4]
   2e5c8:	e15e0002 	cmp	lr, r2
   2e5cc:	2a000045 	bcs	2e6e8 <JSMNR_parse+0x12c>
   2e5d0:	e2839004 	add	r9, r3, #4
   2e5d4:	e283b008 	add	fp, r3, #8
   2e5d8:	e191c0de 	ldrsb	ip, [r1, lr]
   2e5dc:	e35c0000 	cmp	ip, #0
   2e5e0:	0a000040 	beq	2e6e8 <JSMNR_parse+0x12c>
   2e5e4:	e35c003a 	cmp	ip, #58	; 0x3a
   2e5e8:	ca000131 	bgt	2eab4 <JSMNR_parse+0x4f8>
   2e5ec:	e35c0008 	cmp	ip, #8
   2e5f0:	da00004f 	ble	2e734 <JSMNR_parse+0x178>
   2e5f4:	e24cc009 	sub	ip, ip, #9
   2e5f8:	e35c0031 	cmp	ip, #49	; 0x31
   2e5fc:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
   2e600:	ea00004b 	b	2e734 <JSMNR_parse+0x178>
   2e604:	0002e6d4 	.word	0x0002e6d4
   2e608:	0002e6d4 	.word	0x0002e6d4
   2e60c:	0002e734 	.word	0x0002e734
   2e610:	0002e734 	.word	0x0002e734
   2e614:	0002e6d4 	.word	0x0002e6d4
   2e618:	0002e734 	.word	0x0002e734
   2e61c:	0002e734 	.word	0x0002e734
   2e620:	0002e734 	.word	0x0002e734
   2e624:	0002e734 	.word	0x0002e734
   2e628:	0002e734 	.word	0x0002e734
   2e62c:	0002e734 	.word	0x0002e734
   2e630:	0002e734 	.word	0x0002e734
   2e634:	0002e734 	.word	0x0002e734
   2e638:	0002e734 	.word	0x0002e734
   2e63c:	0002e734 	.word	0x0002e734
   2e640:	0002e734 	.word	0x0002e734
   2e644:	0002e734 	.word	0x0002e734
   2e648:	0002e734 	.word	0x0002e734
   2e64c:	0002e734 	.word	0x0002e734
   2e650:	0002e734 	.word	0x0002e734
   2e654:	0002e734 	.word	0x0002e734
   2e658:	0002e734 	.word	0x0002e734
   2e65c:	0002e734 	.word	0x0002e734
   2e660:	0002e6d4 	.word	0x0002e6d4
   2e664:	0002e734 	.word	0x0002e734
   2e668:	0002e8a0 	.word	0x0002e8a0
   2e66c:	0002e734 	.word	0x0002e734
   2e670:	0002e734 	.word	0x0002e734
   2e674:	0002e734 	.word	0x0002e734
   2e678:	0002e734 	.word	0x0002e734
   2e67c:	0002e734 	.word	0x0002e734
   2e680:	0002e734 	.word	0x0002e734
   2e684:	0002e734 	.word	0x0002e734
   2e688:	0002e734 	.word	0x0002e734
   2e68c:	0002e734 	.word	0x0002e734
   2e690:	0002e820 	.word	0x0002e820
   2e694:	0002e734 	.word	0x0002e734
   2e698:	0002e734 	.word	0x0002e734
   2e69c:	0002e734 	.word	0x0002e734
   2e6a0:	0002e734 	.word	0x0002e734
   2e6a4:	0002e734 	.word	0x0002e734
   2e6a8:	0002e734 	.word	0x0002e734
   2e6ac:	0002e734 	.word	0x0002e734
   2e6b0:	0002e734 	.word	0x0002e734
   2e6b4:	0002e734 	.word	0x0002e734
   2e6b8:	0002e734 	.word	0x0002e734
   2e6bc:	0002e734 	.word	0x0002e734
   2e6c0:	0002e734 	.word	0x0002e734
   2e6c4:	0002e734 	.word	0x0002e734
   2e6c8:	0002e808 	.word	0x0002e808
   2e6cc:	e37c0001 	cmn	ip, #1
   2e6d0:	0a00010d 	beq	2eb0c <JSMNR_parse+0x550>
   2e6d4:	e590e000 	ldr	lr, [r0]
   2e6d8:	e28ee001 	add	lr, lr, #1
   2e6dc:	e152000e 	cmp	r2, lr
   2e6e0:	e580e000 	str	lr, [r0]
   2e6e4:	8affffbb 	bhi	2e5d8 <JSMNR_parse+0x1c>
   2e6e8:	e3530000 	cmp	r3, #0
   2e6ec:	0a0000aa 	beq	2e99c <JSMNR_parse+0x3e0>
   2e6f0:	e5902004 	ldr	r2, [r0, #4]
   2e6f4:	e2522001 	subs	r2, r2, #1
   2e6f8:	4a0000a7 	bmi	2e99c <JSMNR_parse+0x3e0>
   2e6fc:	e2830004 	add	r0, r3, #4
   2e700:	e2833008 	add	r3, r3, #8
   2e704:	ea000001 	b	2e710 <JSMNR_parse+0x154>
   2e708:	e2522001 	subs	r2, r2, #1
   2e70c:	3a0000a2 	bcc	2e99c <JSMNR_parse+0x3e0>
   2e710:	e7901202 	ldr	r1, [r0, r2, lsl #4]
   2e714:	e3710001 	cmn	r1, #1
   2e718:	0afffffa 	beq	2e708 <JSMNR_parse+0x14c>
   2e71c:	e7931202 	ldr	r1, [r3, r2, lsl #4]
   2e720:	e3710001 	cmn	r1, #1
   2e724:	1afffff7 	bne	2e708 <JSMNR_parse+0x14c>
   2e728:	e3e05002 	mvn	r5, #2
   2e72c:	e1a00005 	mov	r0, r5
   2e730:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e734:	e5904000 	ldr	r4, [r0]
   2e738:	e1540002 	cmp	r4, r2
   2e73c:	2a000016 	bcs	2e79c <JSMNR_parse+0x1e0>
   2e740:	e2446001 	sub	r6, r4, #1
   2e744:	e0816006 	add	r6, r1, r6
   2e748:	ea000009 	b	2e774 <JSMNR_parse+0x1b8>
   2e74c:	e35c0008 	cmp	ip, #8
   2e750:	ca0000af 	bgt	2ea14 <JSMNR_parse+0x458>
   2e754:	e24cc020 	sub	ip, ip, #32
   2e758:	e6efc07c 	uxtb	ip, ip
   2e75c:	e35c005e 	cmp	ip, #94	; 0x5e
   2e760:	e2844001 	add	r4, r4, #1
   2e764:	8a00008a 	bhi	2e994 <JSMNR_parse+0x3d8>
   2e768:	e1520004 	cmp	r2, r4
   2e76c:	e5804000 	str	r4, [r0]
   2e770:	0a000009 	beq	2e79c <JSMNR_parse+0x1e0>
   2e774:	e1f6c0d1 	ldrsb	ip, [r6, #1]!
   2e778:	e35c0000 	cmp	ip, #0
   2e77c:	e3cc7020 	bic	r7, ip, #32
   2e780:	0a000005 	beq	2e79c <JSMNR_parse+0x1e0>
   2e784:	e35c002c 	cmp	ip, #44	; 0x2c
   2e788:	daffffef 	ble	2e74c <JSMNR_parse+0x190>
   2e78c:	e357005d 	cmp	r7, #93	; 0x5d
   2e790:	0a000001 	beq	2e79c <JSMNR_parse+0x1e0>
   2e794:	e35c003a 	cmp	ip, #58	; 0x3a
   2e798:	1affffed 	bne	2e754 <JSMNR_parse+0x198>
   2e79c:	e3530000 	cmp	r3, #0
   2e7a0:	01a0e004 	moveq	lr, r4
   2e7a4:	02855001 	addeq	r5, r5, #1
   2e7a8:	0affffcb 	beq	2e6dc <JSMNR_parse+0x120>
   2e7ac:	e590c004 	ldr	ip, [r0, #4]
   2e7b0:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   2e7b4:	e156000c 	cmp	r6, ip
   2e7b8:	9a000129 	bls	2ec64 <JSMNR_parse+0x6a8>
   2e7bc:	e28c7001 	add	r7, ip, #1
   2e7c0:	e5807004 	str	r7, [r0, #4]
   2e7c4:	e3a07000 	mov	r7, #0
   2e7c8:	e083620c 	add	r6, r3, ip, lsl #4
   2e7cc:	e586700c 	str	r7, [r6, #12]
   2e7d0:	e3a07004 	mov	r7, #4
   2e7d4:	e7c3720c 	strb	r7, [r3, ip, lsl #4]
   2e7d8:	e590c008 	ldr	ip, [r0, #8]
   2e7dc:	e586e004 	str	lr, [r6, #4]
   2e7e0:	e37c0001 	cmn	ip, #1
   2e7e4:	1083c20c 	addne	ip, r3, ip, lsl #4
   2e7e8:	e5864008 	str	r4, [r6, #8]
   2e7ec:	159c600c 	ldrne	r6, [ip, #12]
   2e7f0:	11a0e004 	movne	lr, r4
   2e7f4:	12864001 	addne	r4, r6, #1
   2e7f8:	01a0e004 	moveq	lr, r4
   2e7fc:	e2855001 	add	r5, r5, #1
   2e800:	158c400c 	strne	r4, [ip, #12]
   2e804:	eaffffb4 	b	2e6dc <JSMNR_parse+0x120>
   2e808:	e590c004 	ldr	ip, [r0, #4]
   2e80c:	e590e000 	ldr	lr, [r0]
   2e810:	e24cc001 	sub	ip, ip, #1
   2e814:	e580c008 	str	ip, [r0, #8]
   2e818:	e28ee001 	add	lr, lr, #1
   2e81c:	eaffffae 	b	2e6dc <JSMNR_parse+0x120>
   2e820:	e3530000 	cmp	r3, #0
   2e824:	0affffaa 	beq	2e6d4 <JSMNR_parse+0x118>
   2e828:	e590c008 	ldr	ip, [r0, #8]
   2e82c:	e37c0001 	cmn	ip, #1
   2e830:	0affffa7 	beq	2e6d4 <JSMNR_parse+0x118>
   2e834:	e7d3c20c 	ldrb	ip, [r3, ip, lsl #4]
   2e838:	e24cc001 	sub	ip, ip, #1
   2e83c:	e35c0001 	cmp	ip, #1
   2e840:	9affffa3 	bls	2e6d4 <JSMNR_parse+0x118>
   2e844:	e590e004 	ldr	lr, [r0, #4]
   2e848:	e25e4001 	subs	r4, lr, #1
   2e84c:	5083e20e 	addpl	lr, r3, lr, lsl #4
   2e850:	5a000004 	bpl	2e868 <JSMNR_parse+0x2ac>
   2e854:	eaffff9e 	b	2e6d4 <JSMNR_parse+0x118>
   2e858:	e2444001 	sub	r4, r4, #1
   2e85c:	e3740001 	cmn	r4, #1
   2e860:	e24ee010 	sub	lr, lr, #16
   2e864:	0affff9a 	beq	2e6d4 <JSMNR_parse+0x118>
   2e868:	e55ec010 	ldrb	ip, [lr, #-16]
   2e86c:	e24cc001 	sub	ip, ip, #1
   2e870:	e35c0001 	cmp	ip, #1
   2e874:	8afffff7 	bhi	2e858 <JSMNR_parse+0x29c>
   2e878:	e51ec00c 	ldr	ip, [lr, #-12]
   2e87c:	e37c0001 	cmn	ip, #1
   2e880:	0afffff4 	beq	2e858 <JSMNR_parse+0x29c>
   2e884:	e51ec008 	ldr	ip, [lr, #-8]
   2e888:	e37c0001 	cmn	ip, #1
   2e88c:	1afffff1 	bne	2e858 <JSMNR_parse+0x29c>
   2e890:	e590e000 	ldr	lr, [r0]
   2e894:	e5804008 	str	r4, [r0, #8]
   2e898:	e28ee001 	add	lr, lr, #1
   2e89c:	eaffff8e 	b	2e6dc <JSMNR_parse+0x120>
   2e8a0:	e28ea001 	add	sl, lr, #1
   2e8a4:	e152000a 	cmp	r2, sl
   2e8a8:	e1a0c00a 	mov	ip, sl
   2e8ac:	e580a000 	str	sl, [r0]
   2e8b0:	8a000005 	bhi	2e8cc <JSMNR_parse+0x310>
   2e8b4:	ea000050 	b	2e9fc <JSMNR_parse+0x440>
   2e8b8:	e590c000 	ldr	ip, [r0]
   2e8bc:	e28cc001 	add	ip, ip, #1
   2e8c0:	e152000c 	cmp	r2, ip
   2e8c4:	e580c000 	str	ip, [r0]
   2e8c8:	9a00004b 	bls	2e9fc <JSMNR_parse+0x440>
   2e8cc:	e19140dc 	ldrsb	r4, [r1, ip]
   2e8d0:	e3540000 	cmp	r4, #0
   2e8d4:	0a000048 	beq	2e9fc <JSMNR_parse+0x440>
   2e8d8:	e3540022 	cmp	r4, #34	; 0x22
   2e8dc:	0a0000c3 	beq	2ebf0 <JSMNR_parse+0x634>
   2e8e0:	e354005c 	cmp	r4, #92	; 0x5c
   2e8e4:	1afffff3 	bne	2e8b8 <JSMNR_parse+0x2fc>
   2e8e8:	e28c4001 	add	r4, ip, #1
   2e8ec:	e1520004 	cmp	r2, r4
   2e8f0:	9afffff0 	bls	2e8b8 <JSMNR_parse+0x2fc>
   2e8f4:	e5804000 	str	r4, [r0]
   2e8f8:	e19140d4 	ldrsb	r4, [r1, r4]
   2e8fc:	e3540075 	cmp	r4, #117	; 0x75
   2e900:	ca000023 	bgt	2e994 <JSMNR_parse+0x3d8>
   2e904:	e354005b 	cmp	r4, #91	; 0x5b
   2e908:	da00001d 	ble	2e984 <JSMNR_parse+0x3c8>
   2e90c:	e244405c 	sub	r4, r4, #92	; 0x5c
   2e910:	e3540019 	cmp	r4, #25
   2e914:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
   2e918:	ea00001d 	b	2e994 <JSMNR_parse+0x3d8>
   2e91c:	0002ea0c 	.word	0x0002ea0c
   2e920:	0002e994 	.word	0x0002e994
   2e924:	0002e994 	.word	0x0002e994
   2e928:	0002e994 	.word	0x0002e994
   2e92c:	0002e994 	.word	0x0002e994
   2e930:	0002e994 	.word	0x0002e994
   2e934:	0002ea0c 	.word	0x0002ea0c
   2e938:	0002e994 	.word	0x0002e994
   2e93c:	0002e994 	.word	0x0002e994
   2e940:	0002e994 	.word	0x0002e994
   2e944:	0002ea0c 	.word	0x0002ea0c
   2e948:	0002e994 	.word	0x0002e994
   2e94c:	0002e994 	.word	0x0002e994
   2e950:	0002e994 	.word	0x0002e994
   2e954:	0002e994 	.word	0x0002e994
   2e958:	0002e994 	.word	0x0002e994
   2e95c:	0002e994 	.word	0x0002e994
   2e960:	0002e994 	.word	0x0002e994
   2e964:	0002ea0c 	.word	0x0002ea0c
   2e968:	0002e994 	.word	0x0002e994
   2e96c:	0002e994 	.word	0x0002e994
   2e970:	0002e994 	.word	0x0002e994
   2e974:	0002ea0c 	.word	0x0002ea0c
   2e978:	0002e994 	.word	0x0002e994
   2e97c:	0002ea0c 	.word	0x0002ea0c
   2e980:	0002e9a4 	.word	0x0002e9a4
   2e984:	e3540022 	cmp	r4, #34	; 0x22
   2e988:	0a00001f 	beq	2ea0c <JSMNR_parse+0x450>
   2e98c:	e354002f 	cmp	r4, #47	; 0x2f
   2e990:	0a00001d 	beq	2ea0c <JSMNR_parse+0x450>
   2e994:	e3e05001 	mvn	r5, #1
   2e998:	e580e000 	str	lr, [r0]
   2e99c:	e1a00005 	mov	r0, r5
   2e9a0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e9a4:	e28c4002 	add	r4, ip, #2
   2e9a8:	e5804000 	str	r4, [r0]
   2e9ac:	e28cc006 	add	ip, ip, #6
   2e9b0:	e1520004 	cmp	r2, r4
   2e9b4:	0a0000b0 	beq	2ec7c <JSMNR_parse+0x6c0>
   2e9b8:	e19160d4 	ldrsb	r6, [r1, r4]
   2e9bc:	e20680df 	and	r8, r6, #223	; 0xdf
   2e9c0:	e2467030 	sub	r7, r6, #48	; 0x30
   2e9c4:	e3560000 	cmp	r6, #0
   2e9c8:	e2488041 	sub	r8, r8, #65	; 0x41
   2e9cc:	e20770ff 	and	r7, r7, #255	; 0xff
   2e9d0:	0a0000ab 	beq	2ec84 <JSMNR_parse+0x6c8>
   2e9d4:	e3580005 	cmp	r8, #5
   2e9d8:	83570009 	cmphi	r7, #9
   2e9dc:	e2844001 	add	r4, r4, #1
   2e9e0:	8affffeb 	bhi	2e994 <JSMNR_parse+0x3d8>
   2e9e4:	e154000c 	cmp	r4, ip
   2e9e8:	e5804000 	str	r4, [r0]
   2e9ec:	1affffef 	bne	2e9b0 <JSMNR_parse+0x3f4>
   2e9f0:	e152000c 	cmp	r2, ip
   2e9f4:	e580c000 	str	ip, [r0]
   2e9f8:	8affffb3 	bhi	2e8cc <JSMNR_parse+0x310>
   2e9fc:	e3e05002 	mvn	r5, #2
   2ea00:	e580e000 	str	lr, [r0]
   2ea04:	e1a00005 	mov	r0, r5
   2ea08:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ea0c:	e28cc002 	add	ip, ip, #2
   2ea10:	eaffffaa 	b	2e8c0 <JSMNR_parse+0x304>
   2ea14:	e24c7009 	sub	r7, ip, #9
   2ea18:	e3570023 	cmp	r7, #35	; 0x23
   2ea1c:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
   2ea20:	eaffff4b 	b	2e754 <JSMNR_parse+0x198>
   2ea24:	0002e79c 	.word	0x0002e79c
   2ea28:	0002e79c 	.word	0x0002e79c
   2ea2c:	0002e754 	.word	0x0002e754
   2ea30:	0002e754 	.word	0x0002e754
   2ea34:	0002e79c 	.word	0x0002e79c
   2ea38:	0002e754 	.word	0x0002e754
   2ea3c:	0002e754 	.word	0x0002e754
   2ea40:	0002e754 	.word	0x0002e754
   2ea44:	0002e754 	.word	0x0002e754
   2ea48:	0002e754 	.word	0x0002e754
   2ea4c:	0002e754 	.word	0x0002e754
   2ea50:	0002e754 	.word	0x0002e754
   2ea54:	0002e754 	.word	0x0002e754
   2ea58:	0002e754 	.word	0x0002e754
   2ea5c:	0002e754 	.word	0x0002e754
   2ea60:	0002e754 	.word	0x0002e754
   2ea64:	0002e754 	.word	0x0002e754
   2ea68:	0002e754 	.word	0x0002e754
   2ea6c:	0002e754 	.word	0x0002e754
   2ea70:	0002e754 	.word	0x0002e754
   2ea74:	0002e754 	.word	0x0002e754
   2ea78:	0002e754 	.word	0x0002e754
   2ea7c:	0002e754 	.word	0x0002e754
   2ea80:	0002e79c 	.word	0x0002e79c
   2ea84:	0002e754 	.word	0x0002e754
   2ea88:	0002e754 	.word	0x0002e754
   2ea8c:	0002e754 	.word	0x0002e754
   2ea90:	0002e754 	.word	0x0002e754
   2ea94:	0002e754 	.word	0x0002e754
   2ea98:	0002e754 	.word	0x0002e754
   2ea9c:	0002e754 	.word	0x0002e754
   2eaa0:	0002e754 	.word	0x0002e754
   2eaa4:	0002e754 	.word	0x0002e754
   2eaa8:	0002e754 	.word	0x0002e754
   2eaac:	0002e754 	.word	0x0002e754
   2eab0:	0002e79c 	.word	0x0002e79c
   2eab4:	e35c007b 	cmp	ip, #123	; 0x7b
   2eab8:	0a000020 	beq	2eb40 <JSMNR_parse+0x584>
   2eabc:	da000017 	ble	2eb20 <JSMNR_parse+0x564>
   2eac0:	e35c007d 	cmp	ip, #125	; 0x7d
   2eac4:	1affff1a 	bne	2e734 <JSMNR_parse+0x178>
   2eac8:	e3530000 	cmp	r3, #0
   2eacc:	13a07001 	movne	r7, #1
   2ead0:	0afffeff 	beq	2e6d4 <JSMNR_parse+0x118>
   2ead4:	e590c004 	ldr	ip, [r0, #4]
   2ead8:	e25cc001 	subs	ip, ip, #1
   2eadc:	4afffefa 	bmi	2e6cc <JSMNR_parse+0x110>
   2eae0:	e083420c 	add	r4, r3, ip, lsl #4
   2eae4:	e5946004 	ldr	r6, [r4, #4]
   2eae8:	e3760001 	cmn	r6, #1
   2eaec:	0a000002 	beq	2eafc <JSMNR_parse+0x540>
   2eaf0:	e5946008 	ldr	r6, [r4, #8]
   2eaf4:	e3760001 	cmn	r6, #1
   2eaf8:	0a00002d 	beq	2ebb4 <JSMNR_parse+0x5f8>
   2eafc:	e24cc001 	sub	ip, ip, #1
   2eb00:	e37c0001 	cmn	ip, #1
   2eb04:	e2444010 	sub	r4, r4, #16
   2eb08:	1afffff5 	bne	2eae4 <JSMNR_parse+0x528>
   2eb0c:	e3a02001 	mov	r2, #1
   2eb10:	e59f018c 	ldr	r0, [pc, #396]	; 2eca4 <JSMNR_parse+0x6e8>
   2eb14:	ebfffe93 	bl	2e568 <JSMNR_logLongStr>
   2eb18:	e3e05001 	mvn	r5, #1
   2eb1c:	eaffff9e 	b	2e99c <JSMNR_parse+0x3e0>
   2eb20:	e35c005b 	cmp	ip, #91	; 0x5b
   2eb24:	0a000005 	beq	2eb40 <JSMNR_parse+0x584>
   2eb28:	e35c005d 	cmp	ip, #93	; 0x5d
   2eb2c:	1affff00 	bne	2e734 <JSMNR_parse+0x178>
   2eb30:	e3530000 	cmp	r3, #0
   2eb34:	13a07002 	movne	r7, #2
   2eb38:	0afffee5 	beq	2e6d4 <JSMNR_parse+0x118>
   2eb3c:	eaffffe4 	b	2ead4 <JSMNR_parse+0x518>
   2eb40:	e3530000 	cmp	r3, #0
   2eb44:	e2855001 	add	r5, r5, #1
   2eb48:	0afffee1 	beq	2e6d4 <JSMNR_parse+0x118>
   2eb4c:	e5904004 	ldr	r4, [r0, #4]
   2eb50:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   2eb54:	e1560004 	cmp	r6, r4
   2eb58:	9a000045 	bls	2ec74 <JSMNR_parse+0x6b8>
   2eb5c:	e2848001 	add	r8, r4, #1
   2eb60:	e5808004 	str	r8, [r0, #4]
   2eb64:	e3e08000 	mvn	r8, #0
   2eb68:	e0837204 	add	r7, r3, r4, lsl #4
   2eb6c:	e5906008 	ldr	r6, [r0, #8]
   2eb70:	e5878008 	str	r8, [r7, #8]
   2eb74:	e3a08000 	mov	r8, #0
   2eb78:	e3760001 	cmn	r6, #1
   2eb7c:	e587800c 	str	r8, [r7, #12]
   2eb80:	10836206 	addne	r6, r3, r6, lsl #4
   2eb84:	1596800c 	ldrne	r8, [r6, #12]
   2eb88:	12888001 	addne	r8, r8, #1
   2eb8c:	1586800c 	strne	r8, [r6, #12]
   2eb90:	e35c007b 	cmp	ip, #123	; 0x7b
   2eb94:	03a0c001 	moveq	ip, #1
   2eb98:	13a0c002 	movne	ip, #2
   2eb9c:	e7c3c204 	strb	ip, [r3, r4, lsl #4]
   2eba0:	e590c000 	ldr	ip, [r0]
   2eba4:	e587e004 	str	lr, [r7, #4]
   2eba8:	e5804008 	str	r4, [r0, #8]
   2ebac:	e28ce001 	add	lr, ip, #1
   2ebb0:	eafffec9 	b	2e6dc <JSMNR_parse+0x120>
   2ebb4:	e5d48000 	ldrb	r8, [r4]
   2ebb8:	e1580007 	cmp	r8, r7
   2ebbc:	1a000036 	bne	2ec9c <JSMNR_parse+0x6e0>
   2ebc0:	e28ee001 	add	lr, lr, #1
   2ebc4:	e5806008 	str	r6, [r0, #8]
   2ebc8:	e584e008 	str	lr, [r4, #8]
   2ebcc:	e799e20c 	ldr	lr, [r9, ip, lsl #4]
   2ebd0:	e37e0001 	cmn	lr, #1
   2ebd4:	0a000002 	beq	2ebe4 <JSMNR_parse+0x628>
   2ebd8:	e79be20c 	ldr	lr, [fp, ip, lsl #4]
   2ebdc:	e37e0001 	cmn	lr, #1
   2ebe0:	0a00001b 	beq	2ec54 <JSMNR_parse+0x698>
   2ebe4:	e25cc001 	subs	ip, ip, #1
   2ebe8:	2afffff7 	bcs	2ebcc <JSMNR_parse+0x610>
   2ebec:	eafffeb8 	b	2e6d4 <JSMNR_parse+0x118>
   2ebf0:	e3530000 	cmp	r3, #0
   2ebf4:	0a000024 	beq	2ec8c <JSMNR_parse+0x6d0>
   2ebf8:	e5904004 	ldr	r4, [r0, #4]
   2ebfc:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   2ec00:	e1560004 	cmp	r6, r4
   2ec04:	9a000016 	bls	2ec64 <JSMNR_parse+0x6a8>
   2ec08:	e284e001 	add	lr, r4, #1
   2ec0c:	e580e004 	str	lr, [r0, #4]
   2ec10:	e3a0e000 	mov	lr, #0
   2ec14:	e0836204 	add	r6, r3, r4, lsl #4
   2ec18:	e586e00c 	str	lr, [r6, #12]
   2ec1c:	e3a0e003 	mov	lr, #3
   2ec20:	e7c3e204 	strb	lr, [r3, r4, lsl #4]
   2ec24:	e590e008 	ldr	lr, [r0, #8]
   2ec28:	e2855001 	add	r5, r5, #1
   2ec2c:	e37e0001 	cmn	lr, #1
   2ec30:	e9861400 	stmib	r6, {sl, ip}
   2ec34:	0afffea6 	beq	2e6d4 <JSMNR_parse+0x118>
   2ec38:	e083c20e 	add	ip, r3, lr, lsl #4
   2ec3c:	e59c400c 	ldr	r4, [ip, #12]
   2ec40:	e590e000 	ldr	lr, [r0]
   2ec44:	e2844001 	add	r4, r4, #1
   2ec48:	e58c400c 	str	r4, [ip, #12]
   2ec4c:	e28ee001 	add	lr, lr, #1
   2ec50:	eafffea1 	b	2e6dc <JSMNR_parse+0x120>
   2ec54:	e590e000 	ldr	lr, [r0]
   2ec58:	e580c008 	str	ip, [r0, #8]
   2ec5c:	e28ee001 	add	lr, lr, #1
   2ec60:	eafffe9d 	b	2e6dc <JSMNR_parse+0x120>
   2ec64:	e3e05000 	mvn	r5, #0
   2ec68:	e580e000 	str	lr, [r0]
   2ec6c:	e1a00005 	mov	r0, r5
   2ec70:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ec74:	e3e05000 	mvn	r5, #0
   2ec78:	eaffff47 	b	2e99c <JSMNR_parse+0x3e0>
   2ec7c:	e1a0c002 	mov	ip, r2
   2ec80:	eaffff0e 	b	2e8c0 <JSMNR_parse+0x304>
   2ec84:	e1a0c004 	mov	ip, r4
   2ec88:	eaffff0c 	b	2e8c0 <JSMNR_parse+0x304>
   2ec8c:	e590e000 	ldr	lr, [r0]
   2ec90:	e2855001 	add	r5, r5, #1
   2ec94:	e28ee001 	add	lr, lr, #1
   2ec98:	eafffe8f 	b	2e6dc <JSMNR_parse+0x120>
   2ec9c:	e3e05001 	mvn	r5, #1
   2eca0:	eaffff3d 	b	2e99c <JSMNR_parse+0x3e0>
   2eca4:	000459c0 	.word	0x000459c0

0002eca8 <MiniHDLC::~MiniHDLC()>:
   2eca8:	e12fff1e 	bx	lr

0002ecac <MiniHDLC::~MiniHDLC()>:
   2ecac:	e92d4010 	push	{r4, lr}
   2ecb0:	e1a04000 	mov	r4, r0
   2ecb4:	e59f1008 	ldr	r1, [pc, #8]	; 2ecc4 <MiniHDLC::~MiniHDLC()+0x18>
   2ecb8:	ebfff086 	bl	2aed8 <operator delete(void*, unsigned int)>
   2ecbc:	e1a00004 	mov	r0, r4
   2ecc0:	e8bd8010 	pop	{r4, pc}
   2ecc4:	00004e6c 	.word	0x00004e6c

0002ecc8 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]>:
   2ecc8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eccc:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
   2ecd0:	e1a07000 	mov	r7, r0
   2ecd4:	e3580000 	cmp	r8, #0
   2ecd8:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   2ecdc:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
   2ece0:	08bd8ff0 	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ece4:	e280c002 	add	ip, r0, #2
   2ece8:	e152000c 	cmp	r2, ip
   2ecec:	98bd8ff0 	popls	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ecf0:	e1a06009 	mov	r6, r9
   2ecf4:	e59fa068 	ldr	sl, [pc, #104]	; 2ed64 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]+0x9c>
   2ecf8:	ea00000b 	b	2ed2c <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]+0x64>
   2ecfc:	e5d75004 	ldrb	r5, [r7, #4]
   2ed00:	e155000c 	cmp	r5, ip
   2ed04:	11a0e000 	movne	lr, r0
   2ed08:	0a000012 	beq	2ed58 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]+0x90>
   2ed0c:	e0490006 	sub	r0, r9, r6
   2ed10:	e1700008 	cmn	r0, r8
   2ed14:	e7c1c00e 	strb	ip, [r1, lr]
   2ed18:	e28e4003 	add	r4, lr, #3
   2ed1c:	e28e0001 	add	r0, lr, #1
   2ed20:	08bd8ff0 	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ed24:	e1540002 	cmp	r4, r2
   2ed28:	28bd8ff0 	popcs	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ed2c:	e4d6c001 	ldrb	ip, [r6], #1
   2ed30:	e1d3b0b0 	ldrh	fp, [r3]
   2ed34:	e280e001 	add	lr, r0, #1
   2ed38:	e02c542b 	eor	r5, ip, fp, lsr #8
   2ed3c:	e1a05085 	lsl	r5, r5, #1
   2ed40:	e19a40b5 	ldrh	r4, [sl, r5]
   2ed44:	e024440b 	eor	r4, r4, fp, lsl #8
   2ed48:	e1c340b0 	strh	r4, [r3]
   2ed4c:	e5d74005 	ldrb	r4, [r7, #5]
   2ed50:	e15c0004 	cmp	ip, r4
   2ed54:	1affffe8 	bne	2ecfc <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]+0x34>
   2ed58:	e7c14000 	strb	r4, [r1, r0]
   2ed5c:	e22cc020 	eor	ip, ip, #32
   2ed60:	eaffffe9 	b	2ed0c <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]+0x44>
   2ed64:	00045a20 	.word	0x00045a20

0002ed68 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]>:
   2ed68:	e1d330b0 	ldrh	r3, [r3]
   2ed6c:	e5d0c007 	ldrb	ip, [r0, #7]
   2ed70:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2ed74:	e35c0000 	cmp	ip, #0
   2ed78:	e1a05423 	lsr	r5, r3, #8
   2ed7c:	020340ff 	andeq	r4, r3, #255	; 0xff
   2ed80:	11a04005 	movne	r4, r5
   2ed84:	1203c0ff 	andne	ip, r3, #255	; 0xff
   2ed88:	01a0c005 	moveq	ip, r5
   2ed8c:	e59d3014 	ldr	r3, [sp, #20]
   2ed90:	e2836002 	add	r6, r3, #2
   2ed94:	e1560002 	cmp	r6, r2
   2ed98:	2a000021 	bcs	2ee24 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0xbc>
   2ed9c:	e5d02005 	ldrb	r2, [r0, #5]
   2eda0:	e1a0e004 	mov	lr, r4
   2eda4:	e1520004 	cmp	r2, r4
   2eda8:	e1a0500c 	mov	r5, ip
   2edac:	0a00000f 	beq	2edf0 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0x88>
   2edb0:	e5d07004 	ldrb	r7, [r0, #4]
   2edb4:	e1570004 	cmp	r7, r4
   2edb8:	12836001 	addne	r6, r3, #1
   2edbc:	0a00000b 	beq	2edf0 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0x88>
   2edc0:	e7c1e003 	strb	lr, [r1, r3]
   2edc4:	e5d0e005 	ldrb	lr, [r0, #5]
   2edc8:	e15e000c 	cmp	lr, ip
   2edcc:	0a00000f 	beq	2ee10 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0xa8>
   2edd0:	e5d02004 	ldrb	r2, [r0, #4]
   2edd4:	e152000c 	cmp	r2, ip
   2edd8:	0a00000c 	beq	2ee10 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0xa8>
   2eddc:	e7e15006 	strb	r5, [r1, r6]!
   2ede0:	e5d03004 	ldrb	r3, [r0, #4]
   2ede4:	e2860002 	add	r0, r6, #2
   2ede8:	e5c13001 	strb	r3, [r1, #1]
   2edec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2edf0:	e224e020 	eor	lr, r4, #32
   2edf4:	e7c12003 	strb	r2, [r1, r3]
   2edf8:	e6efe07e 	uxtb	lr, lr
   2edfc:	e2833001 	add	r3, r3, #1
   2ee00:	e7c1e003 	strb	lr, [r1, r3]
   2ee04:	e5d0e005 	ldrb	lr, [r0, #5]
   2ee08:	e15e000c 	cmp	lr, ip
   2ee0c:	1affffef 	bne	2edd0 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0x68>
   2ee10:	e22c2020 	eor	r2, ip, #32
   2ee14:	e7c1e006 	strb	lr, [r1, r6]
   2ee18:	e6ef5072 	uxtb	r5, r2
   2ee1c:	e2836002 	add	r6, r3, #2
   2ee20:	eaffffed 	b	2eddc <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0x74>
   2ee24:	e3a00000 	mov	r0, #0
   2ee28:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002ee2c <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)>:
   2ee2c:	e92d4070 	push	{r4, r5, r6, lr}
   2ee30:	e59f5094 	ldr	r5, [pc, #148]	; 2eecc <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xa0>
   2ee34:	e59f6094 	ldr	r6, [pc, #148]	; 2eed0 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xa4>
   2ee38:	e3a0c000 	mov	ip, #0
   2ee3c:	e59f4090 	ldr	r4, [pc, #144]	; 2eed4 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xa8>
   2ee40:	e5853004 	str	r3, [r5, #4]
   2ee44:	e59f308c 	ldr	r3, [pc, #140]	; 2eed8 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xac>
   2ee48:	e5806000 	str	r6, [r0]
   2ee4c:	e280ea02 	add	lr, r0, #8192	; 0x2000
   2ee50:	e2806901 	add	r6, r0, #16384	; 0x4000
   2ee54:	e580401c 	str	r4, [r0, #28]
   2ee58:	e58e4738 	str	r4, [lr, #1848]	; 0x738
   2ee5c:	e58e3730 	str	r3, [lr, #1840]	; 0x730
   2ee60:	e5863e4c 	str	r3, [r6, #3660]	; 0xe4c
   2ee64:	e1a03006 	mov	r3, r6
   2ee68:	e59f406c 	ldr	r4, [pc, #108]	; 2eedc <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xb0>
   2ee6c:	e585c000 	str	ip, [r5]
   2ee70:	e59f5068 	ldr	r5, [pc, #104]	; 2eee0 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xb4>
   2ee74:	e586ce5c 	str	ip, [r6, #3676]	; 0xe5c
   2ee78:	e5865e50 	str	r5, [r6, #3664]	; 0xe50
   2ee7c:	e586ce60 	str	ip, [r6, #3680]	; 0xe60
   2ee80:	e586ce64 	str	ip, [r6, #3684]	; 0xe64
   2ee84:	e586ce68 	str	ip, [r6, #3688]	; 0xe68
   2ee88:	e5dd5014 	ldrb	r5, [sp, #20]
   2ee8c:	e580400c 	str	r4, [r0, #12]
   2ee90:	e580c008 	str	ip, [r0, #8]
   2ee94:	e5c0c010 	strb	ip, [r0, #16]
   2ee98:	e580c014 	str	ip, [r0, #20]
   2ee9c:	e580c018 	str	ip, [r0, #24]
   2eea0:	e5dd6010 	ldrb	r6, [sp, #16]
   2eea4:	e583ce54 	str	ip, [r3, #3668]	; 0xe54
   2eea8:	e583ce58 	str	ip, [r3, #3672]	; 0xe58
   2eeac:	e5dd4018 	ldrb	r4, [sp, #24]
   2eeb0:	e5dd301c 	ldrb	r3, [sp, #28]
   2eeb4:	e5c06004 	strb	r6, [r0, #4]
   2eeb8:	e5c05005 	strb	r5, [r0, #5]
   2eebc:	e5c04007 	strb	r4, [r0, #7]
   2eec0:	e5c03006 	strb	r3, [r0, #6]
   2eec4:	e58e1734 	str	r1, [lr, #1844]	; 0x734
   2eec8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2eecc:	0004db6c 	.word	0x0004db6c
   2eed0:	00045c28 	.word	0x00045c28
   2eed4:	0003e980 	.word	0x0003e980
   2eed8:	00002710 	.word	0x00002710
   2eedc:	0000ffff 	.word	0x0000ffff
   2eee0:	00001388 	.word	0x00001388

0002eee4 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)>:
   2eee4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2eee8:	e59f6094 	ldr	r6, [pc, #148]	; 2ef84 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xa0>
   2eeec:	e59f4094 	ldr	r4, [pc, #148]	; 2ef88 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xa4>
   2eef0:	e59f7094 	ldr	r7, [pc, #148]	; 2ef8c <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xa8>
   2eef4:	e2805a02 	add	r5, r0, #8192	; 0x2000
   2eef8:	e2808901 	add	r8, r0, #16384	; 0x4000
   2eefc:	e5807000 	str	r7, [r0]
   2ef00:	e580601c 	str	r6, [r0, #28]
   2ef04:	e3a0e000 	mov	lr, #0
   2ef08:	e5856738 	str	r6, [r5, #1848]	; 0x738
   2ef0c:	e5854730 	str	r4, [r5, #1840]	; 0x730
   2ef10:	e5884e4c 	str	r4, [r8, #3660]	; 0xe4c
   2ef14:	e1a04008 	mov	r4, r8
   2ef18:	e59f7070 	ldr	r7, [pc, #112]	; 2ef90 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xac>
   2ef1c:	e584ee5c 	str	lr, [r4, #3676]	; 0xe5c
   2ef20:	e584ee60 	str	lr, [r4, #3680]	; 0xe60
   2ef24:	e584ee64 	str	lr, [r4, #3684]	; 0xe64
   2ef28:	e584ee68 	str	lr, [r4, #3688]	; 0xe68
   2ef2c:	e5dd901c 	ldrb	r9, [sp, #28]
   2ef30:	e580e008 	str	lr, [r0, #8]
   2ef34:	e5c0e010 	strb	lr, [r0, #16]
   2ef38:	e580e014 	str	lr, [r0, #20]
   2ef3c:	e580e018 	str	lr, [r0, #24]
   2ef40:	e580700c 	str	r7, [r0, #12]
   2ef44:	e5dd8028 	ldrb	r8, [sp, #40]	; 0x28
   2ef48:	e584ee54 	str	lr, [r4, #3668]	; 0xe54
   2ef4c:	e584ee58 	str	lr, [r4, #3672]	; 0xe58
   2ef50:	e5dd702c 	ldrb	r7, [sp, #44]	; 0x2c
   2ef54:	e5c03004 	strb	r3, [r0, #4]
   2ef58:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   2ef5c:	e59f3030 	ldr	r3, [pc, #48]	; 2ef94 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xb0>
   2ef60:	e59de020 	ldr	lr, [sp, #32]
   2ef64:	e5c09005 	strb	r9, [r0, #5]
   2ef68:	e5c08007 	strb	r8, [r0, #7]
   2ef6c:	e5c07006 	strb	r7, [r0, #6]
   2ef70:	e5831000 	str	r1, [r3]
   2ef74:	e5856734 	str	r6, [r5, #1844]	; 0x734
   2ef78:	e5832004 	str	r2, [r3, #4]
   2ef7c:	e584ee50 	str	lr, [r4, #3664]	; 0xe50
   2ef80:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2ef84:	0003e980 	.word	0x0003e980
   2ef88:	00002710 	.word	0x00002710
   2ef8c:	00045c28 	.word	0x00045c28
   2ef90:	0000ffff 	.word	0x0000ffff
   2ef94:	0004db6c 	.word	0x0004db6c

0002ef98 <MiniHDLC::clear()>:
   2ef98:	e3a03000 	mov	r3, #0
   2ef9c:	e59fc044 	ldr	ip, [pc, #68]	; 2efe8 <MiniHDLC::clear()+0x50>
   2efa0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2efa4:	e59f1040 	ldr	r1, [pc, #64]	; 2efec <MiniHDLC::clear()+0x54>
   2efa8:	e2802a02 	add	r2, r0, #8192	; 0x2000
   2efac:	e59fe03c 	ldr	lr, [pc, #60]	; 2eff0 <MiniHDLC::clear()+0x58>
   2efb0:	e582c734 	str	ip, [r2, #1844]	; 0x734
   2efb4:	e2802901 	add	r2, r0, #16384	; 0x4000
   2efb8:	e582ce50 	str	ip, [r2, #3664]	; 0xe50
   2efbc:	e5813004 	str	r3, [r1, #4]
   2efc0:	e580e00c 	str	lr, [r0, #12]
   2efc4:	e1c030b6 	strh	r3, [r0, #6]
   2efc8:	e5803008 	str	r3, [r0, #8]
   2efcc:	e5c03010 	strb	r3, [r0, #16]
   2efd0:	e5803014 	str	r3, [r0, #20]
   2efd4:	e5803018 	str	r3, [r0, #24]
   2efd8:	e5813000 	str	r3, [r1]
   2efdc:	e5823e54 	str	r3, [r2, #3668]	; 0xe54
   2efe0:	e5823e58 	str	r3, [r2, #3672]	; 0xe58
   2efe4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2efe8:	00001388 	.word	0x00001388
   2efec:	0004db6c 	.word	0x0004db6c
   2eff0:	0000ffff 	.word	0x0000ffff

0002eff4 <MiniHDLC::handleChar(unsigned char)>:
   2eff4:	e92d4030 	push	{r4, r5, lr}
   2eff8:	e5d03004 	ldrb	r3, [r0, #4]
   2effc:	e1a04000 	mov	r4, r0
   2f000:	e1530001 	cmp	r3, r1
   2f004:	e24dd014 	sub	sp, sp, #20
   2f008:	0a000035 	beq	2f0e4 <MiniHDLC::handleChar(unsigned char)+0xf0>
   2f00c:	e5d0300e 	ldrb	r3, [r0, #14]
   2f010:	e3530000 	cmp	r3, #0
   2f014:	1a00001a 	bne	2f084 <MiniHDLC::handleChar(unsigned char)+0x90>
   2f018:	e5d03005 	ldrb	r3, [r0, #5]
   2f01c:	e1530001 	cmp	r3, r1
   2f020:	03a03001 	moveq	r3, #1
   2f024:	05c0300e 	strbeq	r3, [r0, #14]
   2f028:	0a000013 	beq	2f07c <MiniHDLC::handleChar(unsigned char)+0x88>
   2f02c:	e2842a02 	add	r2, r4, #8192	; 0x2000
   2f030:	e5920730 	ldr	r0, [r2, #1840]	; 0x730
   2f034:	e5943008 	ldr	r3, [r4, #8]
   2f038:	e1530000 	cmp	r3, r0
   2f03c:	3a000014 	bcc	2f094 <MiniHDLC::handleChar(unsigned char)+0xa0>
   2f040:	e3a00000 	mov	r0, #0
   2f044:	e3e01000 	mvn	r1, #0
   2f048:	e5922734 	ldr	r2, [r2, #1844]	; 0x734
   2f04c:	e1530002 	cmp	r3, r2
   2f050:	e2842901 	add	r2, r4, #16384	; 0x4000
   2f054:	25923e64 	ldrcs	r3, [r2, #3684]	; 0xe64
   2f058:	35923e68 	ldrcc	r3, [r2, #3688]	; 0xe68
   2f05c:	22833001 	addcs	r3, r3, #1
   2f060:	32833001 	addcc	r3, r3, #1
   2f064:	25840008 	strcs	r0, [r4, #8]
   2f068:	21c410bc 	strhcs	r1, [r4, #12]
   2f06c:	35840008 	strcc	r0, [r4, #8]
   2f070:	31c410bc 	strhcc	r1, [r4, #12]
   2f074:	25823e64 	strcs	r3, [r2, #3684]	; 0xe64
   2f078:	35823e68 	strcc	r3, [r2, #3688]	; 0xe68
   2f07c:	e28dd014 	add	sp, sp, #20
   2f080:	e8bd8030 	pop	{r4, r5, pc}
   2f084:	e3a03000 	mov	r3, #0
   2f088:	e2211020 	eor	r1, r1, #32
   2f08c:	e5c0300e 	strb	r3, [r0, #14]
   2f090:	eaffffe5 	b	2f02c <MiniHDLC::handleChar(unsigned char)+0x38>
   2f094:	e0842003 	add	r2, r4, r3
   2f098:	e3530001 	cmp	r3, #1
   2f09c:	e5c21020 	strb	r1, [r2, #32]
   2f0a0:	9a00000b 	bls	2f0d4 <MiniHDLC::handleChar(unsigned char)+0xe0>
   2f0a4:	e2431002 	sub	r1, r3, #2
   2f0a8:	e1510000 	cmp	r1, r0
   2f0ac:	23a02000 	movcs	r2, #0
   2f0b0:	30841001 	addcc	r1, r4, r1
   2f0b4:	e1d400bc 	ldrh	r0, [r4, #12]
   2f0b8:	35d12020 	ldrbcc	r2, [r1, #32]
   2f0bc:	e59f118c 	ldr	r1, [pc, #396]	; 2f250 <MiniHDLC::handleChar(unsigned char)+0x25c>
   2f0c0:	e0222420 	eor	r2, r2, r0, lsr #8
   2f0c4:	e1a02082 	lsl	r2, r2, #1
   2f0c8:	e19120b2 	ldrh	r2, [r1, r2]
   2f0cc:	e0222400 	eor	r2, r2, r0, lsl #8
   2f0d0:	e1c420bc 	strh	r2, [r4, #12]
   2f0d4:	e2833001 	add	r3, r3, #1
   2f0d8:	e5843008 	str	r3, [r4, #8]
   2f0dc:	e28dd014 	add	sp, sp, #20
   2f0e0:	e8bd8030 	pop	{r4, r5, pc}
   2f0e4:	e5900008 	ldr	r0, [r0, #8]
   2f0e8:	e3500001 	cmp	r0, #1
   2f0ec:	9a000030 	bls	2f1b4 <MiniHDLC::handleChar(unsigned char)+0x1c0>
   2f0f0:	e5d45007 	ldrb	r5, [r4, #7]
   2f0f4:	e2843a02 	add	r3, r4, #8192	; 0x2000
   2f0f8:	e3550000 	cmp	r5, #0
   2f0fc:	e5933730 	ldr	r3, [r3, #1840]	; 0x730
   2f100:	0a000047 	beq	2f224 <MiniHDLC::handleChar(unsigned char)+0x230>
   2f104:	e2402001 	sub	r2, r0, #1
   2f108:	e1520003 	cmp	r2, r3
   2f10c:	30841002 	addcc	r1, r4, r2
   2f110:	35d15020 	ldrbcc	r5, [r1, #32]
   2f114:	e2401002 	sub	r1, r0, #2
   2f118:	23a05000 	movcs	r5, #0
   2f11c:	e1530001 	cmp	r3, r1
   2f120:	8084c001 	addhi	ip, r4, r1
   2f124:	85dcc020 	ldrbhi	ip, [ip, #32]
   2f128:	8185540c 	orrhi	r5, r5, ip, lsl #8
   2f12c:	86bf5075 	sxthhi	r5, r5
   2f130:	e1d4c0bc 	ldrh	ip, [r4, #12]
   2f134:	e6ff5075 	uxth	r5, r5
   2f138:	e15c0005 	cmp	ip, r5
   2f13c:	0a000010 	beq	2f184 <MiniHDLC::handleChar(unsigned char)+0x190>
   2f140:	e3a02000 	mov	r2, #0
   2f144:	e284101f 	add	r1, r4, #31
   2f148:	e1520003 	cmp	r2, r3
   2f14c:	0a000024 	beq	2f1e4 <MiniHDLC::handleChar(unsigned char)+0x1f0>
   2f150:	e5f1c001 	ldrb	ip, [r1, #1]!
   2f154:	e35c0000 	cmp	ip, #0
   2f158:	0a000020 	beq	2f1e0 <MiniHDLC::handleChar(unsigned char)+0x1ec>
   2f15c:	e2822001 	add	r2, r2, #1
   2f160:	e1500002 	cmp	r0, r2
   2f164:	0a000001 	beq	2f170 <MiniHDLC::handleChar(unsigned char)+0x17c>
   2f168:	e35200c8 	cmp	r2, #200	; 0xc8
   2f16c:	1afffff5 	bne	2f148 <MiniHDLC::handleChar(unsigned char)+0x154>
   2f170:	e2842901 	add	r2, r4, #16384	; 0x4000
   2f174:	e5923e60 	ldr	r3, [r2, #3680]	; 0xe60
   2f178:	e2833001 	add	r3, r3, #1
   2f17c:	e5823e60 	str	r3, [r2, #3680]	; 0xe60
   2f180:	ea00000c 	b	2f1b8 <MiniHDLC::handleChar(unsigned char)+0x1c4>
   2f184:	e1520003 	cmp	r2, r3
   2f188:	8a000009 	bhi	2f1b4 <MiniHDLC::handleChar(unsigned char)+0x1c0>
   2f18c:	e1510003 	cmp	r1, r3
   2f190:	33a02000 	movcc	r2, #0
   2f194:	30843001 	addcc	r3, r4, r1
   2f198:	35c32020 	strbcc	r2, [r3, #32]
   2f19c:	e59f30b0 	ldr	r3, [pc, #176]	; 2f254 <MiniHDLC::handleChar(unsigned char)+0x260>
   2f1a0:	e5933004 	ldr	r3, [r3, #4]
   2f1a4:	e3530000 	cmp	r3, #0
   2f1a8:	0a000001 	beq	2f1b4 <MiniHDLC::handleChar(unsigned char)+0x1c0>
   2f1ac:	e2840020 	add	r0, r4, #32
   2f1b0:	e12fff33 	blx	r3
   2f1b4:	e2842901 	add	r2, r4, #16384	; 0x4000
   2f1b8:	e3a01000 	mov	r1, #0
   2f1bc:	e3e00000 	mvn	r0, #0
   2f1c0:	e5923e5c 	ldr	r3, [r2, #3676]	; 0xe5c
   2f1c4:	e5c4100e 	strb	r1, [r4, #14]
   2f1c8:	e2833001 	add	r3, r3, #1
   2f1cc:	e5841008 	str	r1, [r4, #8]
   2f1d0:	e1c400bc 	strh	r0, [r4, #12]
   2f1d4:	e5823e5c 	str	r3, [r2, #3676]	; 0xe5c
   2f1d8:	e28dd014 	add	sp, sp, #20
   2f1dc:	e8bd8030 	pop	{r4, r5, pc}
   2f1e0:	e1a03002 	mov	r3, r2
   2f1e4:	e2433001 	sub	r3, r3, #1
   2f1e8:	e35300c6 	cmp	r3, #198	; 0xc6
   2f1ec:	8affffdf 	bhi	2f170 <MiniHDLC::handleChar(unsigned char)+0x17c>
   2f1f0:	ebffde0b 	bl	26a24 <CLogger::Get()>
   2f1f4:	e1d410bc 	ldrh	r1, [r4, #12]
   2f1f8:	e5942008 	ldr	r2, [r4, #8]
   2f1fc:	e2843020 	add	r3, r4, #32
   2f200:	e58d1008 	str	r1, [sp, #8]
   2f204:	e58d2000 	str	r2, [sp]
   2f208:	e58d300c 	str	r3, [sp, #12]
   2f20c:	e3a02003 	mov	r2, #3
   2f210:	e59f3040 	ldr	r3, [pc, #64]	; 2f258 <MiniHDLC::handleChar(unsigned char)+0x264>
   2f214:	e59f1040 	ldr	r1, [pc, #64]	; 2f25c <MiniHDLC::handleChar(unsigned char)+0x268>
   2f218:	e58d5004 	str	r5, [sp, #4]
   2f21c:	ebffdd42 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2f220:	eaffffd2 	b	2f170 <MiniHDLC::handleChar(unsigned char)+0x17c>
   2f224:	e2401002 	sub	r1, r0, #2
   2f228:	e1510003 	cmp	r1, r3
   2f22c:	30842001 	addcc	r2, r4, r1
   2f230:	35d25020 	ldrbcc	r5, [r2, #32]
   2f234:	e2402001 	sub	r2, r0, #1
   2f238:	e1530002 	cmp	r3, r2
   2f23c:	8084c002 	addhi	ip, r4, r2
   2f240:	85dcc020 	ldrbhi	ip, [ip, #32]
   2f244:	8185540c 	orrhi	r5, r5, ip, lsl #8
   2f248:	86bf5075 	sxthhi	r5, r5
   2f24c:	eaffffb7 	b	2f130 <MiniHDLC::handleChar(unsigned char)+0x13c>
   2f250:	00045a20 	.word	0x00045a20
   2f254:	0004db6c 	.word	0x0004db6c
   2f258:	000459d4 	.word	0x000459d4
   2f25c:	00045a14 	.word	0x00045a14

0002f260 <MiniHDLC::handleBit(unsigned char)>:
   2f260:	e92d4010 	push	{r4, lr}
   2f264:	e5d0300f 	ldrb	r3, [r0, #15]
   2f268:	e3510000 	cmp	r1, #0
   2f26c:	e1a04000 	mov	r4, r0
   2f270:	e5d02004 	ldrb	r2, [r0, #4]
   2f274:	e1a030c3 	asr	r3, r3, #1
   2f278:	1a000015 	bne	2f2d4 <MiniHDLC::handleBit(unsigned char)+0x74>
   2f27c:	e6ef3073 	uxtb	r3, r3
   2f280:	e1530002 	cmp	r3, r2
   2f284:	e5c0300f 	strb	r3, [r0, #15]
   2f288:	0a000016 	beq	2f2e8 <MiniHDLC::handleBit(unsigned char)+0x88>
   2f28c:	e203307c 	and	r3, r3, #124	; 0x7c
   2f290:	e353007c 	cmp	r3, #124	; 0x7c
   2f294:	08bd8010 	popeq	{r4, pc}
   2f298:	e5d42010 	ldrb	r2, [r4, #16]
   2f29c:	e5943014 	ldr	r3, [r4, #20]
   2f2a0:	e18110a2 	orr	r1, r1, r2, lsr #1
   2f2a4:	e2833001 	add	r3, r3, #1
   2f2a8:	e6ef1071 	uxtb	r1, r1
   2f2ac:	e3530008 	cmp	r3, #8
   2f2b0:	e5c41010 	strb	r1, [r4, #16]
   2f2b4:	e5843014 	str	r3, [r4, #20]
   2f2b8:	18bd8010 	popne	{r4, pc}
   2f2bc:	e1a00004 	mov	r0, r4
   2f2c0:	ebffff4b 	bl	2eff4 <MiniHDLC::handleChar(unsigned char)>
   2f2c4:	e3a03000 	mov	r3, #0
   2f2c8:	e5c43010 	strb	r3, [r4, #16]
   2f2cc:	e5843014 	str	r3, [r4, #20]
   2f2d0:	e8bd8010 	pop	{r4, pc}
   2f2d4:	e3833080 	orr	r3, r3, #128	; 0x80
   2f2d8:	e1530002 	cmp	r3, r2
   2f2dc:	e3e0107f 	mvn	r1, #127	; 0x7f
   2f2e0:	e5c0300f 	strb	r3, [r0, #15]
   2f2e4:	1affffeb 	bne	2f298 <MiniHDLC::handleBit(unsigned char)+0x38>
   2f2e8:	e1a01002 	mov	r1, r2
   2f2ec:	eafffff2 	b	2f2bc <MiniHDLC::handleBit(unsigned char)+0x5c>

0002f2f0 <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)>:
   2f2f0:	e3520000 	cmp	r2, #0
   2f2f4:	012fff1e 	bxeq	lr
   2f2f8:	e92d4070 	push	{r4, r5, r6, lr}
   2f2fc:	e1a06000 	mov	r6, r0
   2f300:	e0812002 	add	r2, r1, r2
   2f304:	e2425001 	sub	r5, r2, #1
   2f308:	e2414001 	sub	r4, r1, #1
   2f30c:	e5f41001 	ldrb	r1, [r4, #1]!
   2f310:	e1a00006 	mov	r0, r6
   2f314:	ebffff36 	bl	2eff4 <MiniHDLC::handleChar(unsigned char)>
   2f318:	e1540005 	cmp	r4, r5
   2f31c:	1afffffa 	bne	2f30c <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)+0x1c>
   2f320:	e8bd8070 	pop	{r4, r5, r6, pc}

0002f324 <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)>:
   2f324:	e3e0c000 	mvn	ip, #0
   2f328:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2f32c:	e3520003 	cmp	r2, #3
   2f330:	e24dd01c 	sub	sp, sp, #28
   2f334:	e1cdc1b6 	strh	ip, [sp, #22]
   2f338:	9a000010 	bls	2f380 <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)+0x5c>
   2f33c:	e3a0e001 	mov	lr, #1
   2f340:	e5d0c004 	ldrb	ip, [r0, #4]
   2f344:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   2f348:	e58de000 	str	lr, [sp]
   2f34c:	e98d0088 	stmib	sp, {r3, r7}
   2f350:	e5c1c000 	strb	ip, [r1]
   2f354:	e28d3016 	add	r3, sp, #22
   2f358:	e1a05000 	mov	r5, r0
   2f35c:	ebfffe59 	bl	2ecc8 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]>
   2f360:	e3500000 	cmp	r0, #0
   2f364:	0a000005 	beq	2f380 <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)+0x5c>
   2f368:	e58d0000 	str	r0, [sp]
   2f36c:	e28d3016 	add	r3, sp, #22
   2f370:	e1a00005 	mov	r0, r5
   2f374:	ebfffe7b 	bl	2ed68 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]>
   2f378:	e28dd01c 	add	sp, sp, #28
   2f37c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2f380:	e3a00000 	mov	r0, #0
   2f384:	e28dd01c 	add	sp, sp, #28
   2f388:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002f38c <MiniHDLC::encodeFrameStart(unsigned char*, unsigned long, unsigned short&)>:
   2f38c:	e3e0c000 	mvn	ip, #0
   2f390:	e3520003 	cmp	r2, #3
   2f394:	e1c3c0b0 	strh	ip, [r3]
   2f398:	85d03004 	ldrbhi	r3, [r0, #4]
   2f39c:	83a00001 	movhi	r0, #1
   2f3a0:	85c13000 	strbhi	r3, [r1]
   2f3a4:	93a00000 	movls	r0, #0
   2f3a8:	e12fff1e 	bx	lr

0002f3ac <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long)>:
   2f3ac:	e59dc000 	ldr	ip, [sp]
   2f3b0:	e35c0000 	cmp	ip, #0
   2f3b4:	0a000000 	beq	2f3bc <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long)+0x10>
   2f3b8:	eafffe42 	b	2ecc8 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]>
   2f3bc:	e1a0000c 	mov	r0, ip
   2f3c0:	e12fff1e 	bx	lr

0002f3c4 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long)>:
   2f3c4:	e59dc000 	ldr	ip, [sp]
   2f3c8:	e35c0000 	cmp	ip, #0
   2f3cc:	0a000000 	beq	2f3d4 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long)+0x10>
   2f3d0:	eafffe64 	b	2ed68 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]>
   2f3d4:	e1a0000c 	mov	r0, ip
   2f3d8:	e12fff1e 	bx	lr

0002f3dc <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)>:
   2f3dc:	e3520000 	cmp	r2, #0
   2f3e0:	0a000013 	beq	2f434 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x58>
   2f3e4:	e92d4010 	push	{r4, lr}
   2f3e8:	e1a0e000 	mov	lr, r0
   2f3ec:	e1a00002 	mov	r0, r2
   2f3f0:	e0812002 	add	r2, r1, r2
   2f3f4:	e5de4004 	ldrb	r4, [lr, #4]
   2f3f8:	e2422001 	sub	r2, r2, #1
   2f3fc:	e2411001 	sub	r1, r1, #1
   2f400:	ea000004 	b	2f418 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x3c>
   2f404:	e5dec005 	ldrb	ip, [lr, #5]
   2f408:	e15c0003 	cmp	ip, r3
   2f40c:	0a000004 	beq	2f424 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x48>
   2f410:	e1510002 	cmp	r1, r2
   2f414:	08bd8010 	popeq	{r4, pc}
   2f418:	e5f13001 	ldrb	r3, [r1, #1]!
   2f41c:	e1530004 	cmp	r3, r4
   2f420:	1afffff7 	bne	2f404 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x28>
   2f424:	e1510002 	cmp	r1, r2
   2f428:	e2800001 	add	r0, r0, #1
   2f42c:	1afffff9 	bne	2f418 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x3c>
   2f430:	e8bd8010 	pop	{r4, pc}
   2f434:	e1a00002 	mov	r0, r2
   2f438:	e12fff1e 	bx	lr

0002f43c <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)>:
   2f43c:	e0211420 	eor	r1, r1, r0, lsr #8
   2f440:	e59f3010 	ldr	r3, [pc, #16]	; 2f458 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)+0x1c>
   2f444:	e1a01081 	lsl	r1, r1, #1
   2f448:	e19330b1 	ldrh	r3, [r3, r1]
   2f44c:	e0230400 	eor	r0, r3, r0, lsl #8
   2f450:	e6ff0070 	uxth	r0, r0
   2f454:	e12fff1e 	bx	lr
   2f458:	00045a20 	.word	0x00045a20

0002f45c <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)>:
   2f45c:	e3520000 	cmp	r2, #0
   2f460:	012fff1e 	bxeq	lr
   2f464:	e0812002 	add	r2, r1, r2
   2f468:	e59fc028 	ldr	ip, [pc, #40]	; 2f498 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)+0x3c>
   2f46c:	e2422001 	sub	r2, r2, #1
   2f470:	e2411001 	sub	r1, r1, #1
   2f474:	e5f13001 	ldrb	r3, [r1, #1]!
   2f478:	e0233420 	eor	r3, r3, r0, lsr #8
   2f47c:	e1a03083 	lsl	r3, r3, #1
   2f480:	e19c30b3 	ldrh	r3, [ip, r3]
   2f484:	e1520001 	cmp	r2, r1
   2f488:	e0230400 	eor	r0, r3, r0, lsl #8
   2f48c:	e6ff0070 	uxth	r0, r0
   2f490:	1afffff7 	bne	2f474 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)+0x18>
   2f494:	e12fff1e 	bx	lr
   2f498:	00045a20 	.word	0x00045a20

0002f49c <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)>:
   2f49c:	e5d0c005 	ldrb	ip, [r0, #5]
   2f4a0:	e15c0001 	cmp	ip, r1
   2f4a4:	0a000005 	beq	2f4c0 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x24>
   2f4a8:	e5d00004 	ldrb	r0, [r0, #4]
   2f4ac:	e1500001 	cmp	r0, r1
   2f4b0:	0a000002 	beq	2f4c0 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x24>
   2f4b4:	e7c21003 	strb	r1, [r2, r3]
   2f4b8:	e2830001 	add	r0, r3, #1
   2f4bc:	e12fff1e 	bx	lr
   2f4c0:	e7c2c003 	strb	ip, [r2, r3]
   2f4c4:	e2211020 	eor	r1, r1, #32
   2f4c8:	e2833001 	add	r3, r3, #1
   2f4cc:	eafffff8 	b	2f4b4 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x18>

0002f4d0 <MiniHDLC::setFrameRxMaxLen(unsigned long)>:
   2f4d0:	e2800a02 	add	r0, r0, #8192	; 0x2000
   2f4d4:	e5801734 	str	r1, [r0, #1844]	; 0x734
   2f4d8:	e12fff1e 	bx	lr

0002f4dc <MiniHDLC::putCharToFrame(unsigned char)>:
   2f4dc:	e2803901 	add	r3, r0, #16384	; 0x4000
   2f4e0:	e593ce54 	ldr	ip, [r3, #3668]	; 0xe54
   2f4e4:	e5932e50 	ldr	r2, [r3, #3664]	; 0xe50
   2f4e8:	e15c0002 	cmp	ip, r2
   2f4ec:	2a000017 	bcs	2f550 <MiniHDLC::putCharToFrame(unsigned char)+0x74>
   2f4f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2f4f4:	e5d0e006 	ldrb	lr, [r0, #6]
   2f4f8:	e5932e4c 	ldr	r2, [r3, #3660]	; 0xe4c
   2f4fc:	e35e0000 	cmp	lr, #0
   2f500:	0a00000b 	beq	2f534 <MiniHDLC::putCharToFrame(unsigned char)+0x58>
   2f504:	e593ee58 	ldr	lr, [r3, #3672]	; 0xe58
   2f508:	e35e0000 	cmp	lr, #0
   2f50c:	1a000013 	bne	2f560 <MiniHDLC::putCharToFrame(unsigned char)+0x84>
   2f510:	e3510000 	cmp	r1, #0
   2f514:	13a01080 	movne	r1, #128	; 0x80
   2f518:	e15c0002 	cmp	ip, r2
   2f51c:	32800a02 	addcc	r0, r0, #8192	; 0x2000
   2f520:	3080000c 	addcc	r0, r0, ip
   2f524:	35c0173c 	strbcc	r1, [r0, #1852]	; 0x73c
   2f528:	e3a02001 	mov	r2, #1
   2f52c:	e5832e58 	str	r2, [r3, #3672]	; 0xe58
   2f530:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2f534:	e15c0002 	cmp	ip, r2
   2f538:	32800a02 	addcc	r0, r0, #8192	; 0x2000
   2f53c:	e28c2001 	add	r2, ip, #1
   2f540:	3080000c 	addcc	r0, r0, ip
   2f544:	e5832e54 	str	r2, [r3, #3668]	; 0xe54
   2f548:	35c0173c 	strbcc	r1, [r0, #1852]	; 0x73c
   2f54c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2f550:	e3a02000 	mov	r2, #0
   2f554:	e5832e54 	str	r2, [r3, #3668]	; 0xe54
   2f558:	e5832e58 	str	r2, [r3, #3672]	; 0xe58
   2f55c:	e12fff1e 	bx	lr
   2f560:	e15c0002 	cmp	ip, r2
   2f564:	2a000009 	bcs	2f590 <MiniHDLC::putCharToFrame(unsigned char)+0xb4>
   2f568:	e2800a02 	add	r0, r0, #8192	; 0x2000
   2f56c:	e080200c 	add	r2, r0, ip
   2f570:	e5d2273c 	ldrb	r2, [r2, #1852]	; 0x73c
   2f574:	e3510000 	cmp	r1, #0
   2f578:	e1a010c2 	asr	r1, r2, #1
   2f57c:	e1a020a2 	lsr	r2, r2, #1
   2f580:	13822080 	orrne	r2, r2, #128	; 0x80
   2f584:	06ef2071 	uxtbeq	r2, r1
   2f588:	e080000c 	add	r0, r0, ip
   2f58c:	e5c0273c 	strb	r2, [r0, #1852]	; 0x73c
   2f590:	e35e0007 	cmp	lr, #7
   2f594:	03a02000 	moveq	r2, #0
   2f598:	e28ee001 	add	lr, lr, #1
   2f59c:	028c0001 	addeq	r0, ip, #1
   2f5a0:	1583ee58 	strne	lr, [r3, #3672]	; 0xe58
   2f5a4:	05830e54 	streq	r0, [r3, #3668]	; 0xe54
   2f5a8:	05832e58 	streq	r2, [r3, #3672]	; 0xe58
   2f5ac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002f5b0 <MiniHDLC::sendChar(unsigned char)>:
   2f5b0:	e5d03006 	ldrb	r3, [r0, #6]
   2f5b4:	e3530000 	cmp	r3, #0
   2f5b8:	0a00000a 	beq	2f5e8 <MiniHDLC::sendChar(unsigned char)+0x38>
   2f5bc:	e92d4070 	push	{r4, r5, r6, lr}
   2f5c0:	e1a06000 	mov	r6, r0
   2f5c4:	e1a04001 	mov	r4, r1
   2f5c8:	e3a05008 	mov	r5, #8
   2f5cc:	e2041001 	and	r1, r4, #1
   2f5d0:	e1a00006 	mov	r0, r6
   2f5d4:	ebffffc0 	bl	2f4dc <MiniHDLC::putCharToFrame(unsigned char)>
   2f5d8:	e2555001 	subs	r5, r5, #1
   2f5dc:	e1a040a4 	lsr	r4, r4, #1
   2f5e0:	1afffff9 	bne	2f5cc <MiniHDLC::sendChar(unsigned char)+0x1c>
   2f5e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f5e8:	eaffffbb 	b	2f4dc <MiniHDLC::putCharToFrame(unsigned char)>

0002f5ec <MiniHDLC::sendCharWithStuffing(unsigned char)>:
   2f5ec:	e5d03006 	ldrb	r3, [r0, #6]
   2f5f0:	e3530000 	cmp	r3, #0
   2f5f4:	0a000019 	beq	2f660 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x74>
   2f5f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2f5fc:	e1a06000 	mov	r6, r0
   2f600:	e1a04001 	mov	r4, r1
   2f604:	e3a07008 	mov	r7, #8
   2f608:	e3a08000 	mov	r8, #0
   2f60c:	ea000002 	b	2f61c <MiniHDLC::sendCharWithStuffing(unsigned char)+0x30>
   2f610:	e2577001 	subs	r7, r7, #1
   2f614:	e1a040a4 	lsr	r4, r4, #1
   2f618:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2f61c:	e2045001 	and	r5, r4, #1
   2f620:	e1a01005 	mov	r1, r5
   2f624:	e1a00006 	mov	r0, r6
   2f628:	ebffffab 	bl	2f4dc <MiniHDLC::putCharToFrame(unsigned char)>
   2f62c:	e3550000 	cmp	r5, #0
   2f630:	05865018 	streq	r5, [r6, #24]
   2f634:	0afffff5 	beq	2f610 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x24>
   2f638:	e5963018 	ldr	r3, [r6, #24]
   2f63c:	e2833001 	add	r3, r3, #1
   2f640:	e3530005 	cmp	r3, #5
   2f644:	e5863018 	str	r3, [r6, #24]
   2f648:	1afffff0 	bne	2f610 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x24>
   2f64c:	e3a01000 	mov	r1, #0
   2f650:	e1a00006 	mov	r0, r6
   2f654:	ebffffa0 	bl	2f4dc <MiniHDLC::putCharToFrame(unsigned char)>
   2f658:	e5868018 	str	r8, [r6, #24]
   2f65c:	eaffffeb 	b	2f610 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x24>
   2f660:	eaffffd2 	b	2f5b0 <MiniHDLC::sendChar(unsigned char)>

0002f664 <MiniHDLC::sendEscaped(unsigned char)>:
   2f664:	e92d4070 	push	{r4, r5, r6, lr}
   2f668:	e1a04001 	mov	r4, r1
   2f66c:	e5d01005 	ldrb	r1, [r0, #5]
   2f670:	e1a05000 	mov	r5, r0
   2f674:	e1510004 	cmp	r1, r4
   2f678:	0a000006 	beq	2f698 <MiniHDLC::sendEscaped(unsigned char)+0x34>
   2f67c:	e5d03004 	ldrb	r3, [r0, #4]
   2f680:	e1530004 	cmp	r3, r4
   2f684:	0a000003 	beq	2f698 <MiniHDLC::sendEscaped(unsigned char)+0x34>
   2f688:	e1a01004 	mov	r1, r4
   2f68c:	e1a00005 	mov	r0, r5
   2f690:	e8bd4070 	pop	{r4, r5, r6, lr}
   2f694:	eaffffd4 	b	2f5ec <MiniHDLC::sendCharWithStuffing(unsigned char)>
   2f698:	e1a00005 	mov	r0, r5
   2f69c:	e2244020 	eor	r4, r4, #32
   2f6a0:	ebffffd1 	bl	2f5ec <MiniHDLC::sendCharWithStuffing(unsigned char)>
   2f6a4:	e1a01004 	mov	r1, r4
   2f6a8:	e1a00005 	mov	r0, r5
   2f6ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   2f6b0:	eaffffcd 	b	2f5ec <MiniHDLC::sendCharWithStuffing(unsigned char)>

0002f6b4 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>:
   2f6b4:	e3a03000 	mov	r3, #0
   2f6b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f6bc:	e1a05002 	mov	r5, r2
   2f6c0:	e2806901 	add	r6, r0, #16384	; 0x4000
   2f6c4:	e5863e54 	str	r3, [r6, #3668]	; 0xe54
   2f6c8:	e5863e58 	str	r3, [r6, #3672]	; 0xe58
   2f6cc:	e1a09001 	mov	r9, r1
   2f6d0:	e5d01004 	ldrb	r1, [r0, #4]
   2f6d4:	e1a08000 	mov	r8, r0
   2f6d8:	ebffffb4 	bl	2f5b0 <MiniHDLC::sendChar(unsigned char)>
   2f6dc:	e3550000 	cmp	r5, #0
   2f6e0:	0a00002a 	beq	2f790 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xdc>
   2f6e4:	e59f40b0 	ldr	r4, [pc, #176]	; 2f79c <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xe8>
   2f6e8:	e59f70b0 	ldr	r7, [pc, #176]	; 2f7a0 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xec>
   2f6ec:	e0895005 	add	r5, r9, r5
   2f6f0:	e4d91001 	ldrb	r1, [r9], #1
   2f6f4:	e1a00008 	mov	r0, r8
   2f6f8:	e0212424 	eor	r2, r1, r4, lsr #8
   2f6fc:	e1a02082 	lsl	r2, r2, #1
   2f700:	e19730b2 	ldrh	r3, [r7, r2]
   2f704:	e0233404 	eor	r3, r3, r4, lsl #8
   2f708:	e6bfa073 	sxth	sl, r3
   2f70c:	e6ff4073 	uxth	r4, r3
   2f710:	ebffffd3 	bl	2f664 <MiniHDLC::sendEscaped(unsigned char)>
   2f714:	e1590005 	cmp	r9, r5
   2f718:	1afffff4 	bne	2f6f0 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0x3c>
   2f71c:	e6ef107a 	uxtb	r1, sl
   2f720:	e1a03424 	lsr	r3, r4, #8
   2f724:	e5d82007 	ldrb	r2, [r8, #7]
   2f728:	e1a00008 	mov	r0, r8
   2f72c:	e3520000 	cmp	r2, #0
   2f730:	01a04003 	moveq	r4, r3
   2f734:	11a04001 	movne	r4, r1
   2f738:	11a01003 	movne	r1, r3
   2f73c:	ebffffc8 	bl	2f664 <MiniHDLC::sendEscaped(unsigned char)>
   2f740:	e1a01004 	mov	r1, r4
   2f744:	e1a00008 	mov	r0, r8
   2f748:	ebffffc5 	bl	2f664 <MiniHDLC::sendEscaped(unsigned char)>
   2f74c:	e1a00008 	mov	r0, r8
   2f750:	e5d81004 	ldrb	r1, [r8, #4]
   2f754:	ebffff95 	bl	2f5b0 <MiniHDLC::sendChar(unsigned char)>
   2f758:	e59f3044 	ldr	r3, [pc, #68]	; 2f7a4 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xf0>
   2f75c:	e5933000 	ldr	r3, [r3]
   2f760:	e3530000 	cmp	r3, #0
   2f764:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f768:	e5961e54 	ldr	r1, [r6, #3668]	; 0xe54
   2f76c:	e3510000 	cmp	r1, #0
   2f770:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f774:	e2880c27 	add	r0, r8, #9984	; 0x2700
   2f778:	e280003c 	add	r0, r0, #60	; 0x3c
   2f77c:	e12fff33 	blx	r3
   2f780:	e3a03000 	mov	r3, #0
   2f784:	e5863e54 	str	r3, [r6, #3668]	; 0xe54
   2f788:	e5863e58 	str	r3, [r6, #3672]	; 0xe58
   2f78c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f790:	e3a030ff 	mov	r3, #255	; 0xff
   2f794:	e1a01003 	mov	r1, r3
   2f798:	eaffffe1 	b	2f724 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0x70>
   2f79c:	0000ffff 	.word	0x0000ffff
   2f7a0:	00045a20 	.word	0x00045a20
   2f7a4:	0004db6c 	.word	0x0004db6c

0002f7a8 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)>:
   2f7a8:	e3510000 	cmp	r1, #0
   2f7ac:	e1a02000 	mov	r2, r0
   2f7b0:	0a00000d 	beq	2f7ec <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x44>
   2f7b4:	e0801001 	add	r1, r0, r1
   2f7b8:	e59fc034 	ldr	ip, [pc, #52]	; 2f7f4 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x4c>
   2f7bc:	e59f0034 	ldr	r0, [pc, #52]	; 2f7f8 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x50>
   2f7c0:	e2411001 	sub	r1, r1, #1
   2f7c4:	e2422001 	sub	r2, r2, #1
   2f7c8:	e5f23001 	ldrb	r3, [r2, #1]!
   2f7cc:	e0233420 	eor	r3, r3, r0, lsr #8
   2f7d0:	e1a03083 	lsl	r3, r3, #1
   2f7d4:	e19c30b3 	ldrh	r3, [ip, r3]
   2f7d8:	e1510002 	cmp	r1, r2
   2f7dc:	e0230400 	eor	r0, r3, r0, lsl #8
   2f7e0:	e6ff0070 	uxth	r0, r0
   2f7e4:	1afffff7 	bne	2f7c8 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x20>
   2f7e8:	e12fff1e 	bx	lr
   2f7ec:	e59f0004 	ldr	r0, [pc, #4]	; 2f7f8 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x50>
   2f7f0:	e12fff1e 	bx	lr
   2f7f4:	00045a20 	.word	0x00045a20
   2f7f8:	0000ffff 	.word	0x0000ffff

0002f7fc <CommandHandler::hdlcFrameTxStatic(unsigned char const*, unsigned int)>:
   2f7fc:	e59f3018 	ldr	r3, [pc, #24]	; 2f81c <CommandHandler::hdlcFrameTxStatic(unsigned char const*, unsigned int)+0x20>
   2f800:	e5932000 	ldr	r2, [r3]
   2f804:	e3520000 	cmp	r2, #0
   2f808:	012fff1e 	bxeq	lr
   2f80c:	e5933004 	ldr	r3, [r3, #4]
   2f810:	e3530000 	cmp	r3, #0
   2f814:	012fff1e 	bxeq	lr
   2f818:	e12fff13 	bx	r3
   2f81c:	0004db74 	.word	0x0004db74

0002f820 <CommandHandler::CommandHandler()>:
   2f820:	e92d4070 	push	{r4, r5, r6, lr}
   2f824:	e3a0207d 	mov	r2, #125	; 0x7d
   2f828:	e3a04000 	mov	r4, #0
   2f82c:	e3a06001 	mov	r6, #1
   2f830:	e1a05000 	mov	r5, r0
   2f834:	e59f3090 	ldr	r3, [pc, #144]	; 2f8cc <CommandHandler::CommandHandler()+0xac>
   2f838:	e24dd018 	sub	sp, sp, #24
   2f83c:	e58d2000 	str	r2, [sp]
   2f840:	e58d3008 	str	r3, [sp, #8]
   2f844:	e58d3004 	str	r3, [sp, #4]
   2f848:	e59f2080 	ldr	r2, [pc, #128]	; 2f8d0 <CommandHandler::CommandHandler()+0xb0>
   2f84c:	e3a0307e 	mov	r3, #126	; 0x7e
   2f850:	e59f107c 	ldr	r1, [pc, #124]	; 2f8d4 <CommandHandler::CommandHandler()+0xb4>
   2f854:	e58d4010 	str	r4, [sp, #16]
   2f858:	e58d600c 	str	r6, [sp, #12]
   2f85c:	e2800f65 	add	r0, r0, #404	; 0x194
   2f860:	ebfffd9f 	bl	2eee4 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)>
   2f864:	e59f006c 	ldr	r0, [pc, #108]	; 2f8d8 <CommandHandler::CommandHandler()+0xb8>
   2f868:	e3a01032 	mov	r1, #50	; 0x32
   2f86c:	e5805000 	str	r5, [r0]
   2f870:	e1a00005 	mov	r0, r5
   2f874:	e2853a05 	add	r3, r5, #20480	; 0x5000
   2f878:	e2852a07 	add	r2, r5, #28672	; 0x7000
   2f87c:	e5834870 	str	r4, [r3, #2160]	; 0x870
   2f880:	e5831878 	str	r1, [r3, #2168]	; 0x878
   2f884:	e5834874 	str	r4, [r3, #2164]	; 0x874
   2f888:	e58247fc 	str	r4, [r2, #2044]	; 0x7fc
   2f88c:	e5824800 	str	r4, [r2, #2048]	; 0x800
   2f890:	e5824804 	str	r4, [r2, #2052]	; 0x804
   2f894:	e5824808 	str	r4, [r2, #2056]	; 0x808
   2f898:	e5854190 	str	r4, [r5, #400]	; 0x190
   2f89c:	e5c34000 	strb	r4, [r3]
   2f8a0:	e5c34065 	strb	r4, [r3, #101]	; 0x65
   2f8a4:	e5c3408e 	strb	r4, [r3, #142]	; 0x8e
   2f8a8:	e5834860 	str	r4, [r3, #2144]	; 0x860
   2f8ac:	e5834864 	str	r4, [r3, #2148]	; 0x864
   2f8b0:	e5834868 	str	r4, [r3, #2152]	; 0x868
   2f8b4:	e583486c 	str	r4, [r3, #2156]	; 0x86c
   2f8b8:	e58348b0 	str	r4, [r3, #2224]	; 0x8b0
   2f8bc:	e5c267f8 	strb	r6, [r2, #2040]	; 0x7f8
   2f8c0:	e58247f4 	str	r4, [r2, #2036]	; 0x7f4
   2f8c4:	e28dd018 	add	sp, sp, #24
   2f8c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f8cc:	00002710 	.word	0x00002710
   2f8d0:	000308cc 	.word	0x000308cc
   2f8d4:	0002f7fc 	.word	0x0002f7fc
   2f8d8:	0004db74 	.word	0x0004db74

0002f8dc <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>:
   2f8dc:	e1a0c000 	mov	ip, r0
   2f8e0:	e5900190 	ldr	r0, [r0, #400]	; 0x190
   2f8e4:	e3500013 	cmp	r0, #19
   2f8e8:	8a00000c 	bhi	2f920 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))+0x44>
   2f8ec:	e92d4010 	push	{r4, lr}
   2f8f0:	e0804100 	add	r4, r0, r0, lsl #2
   2f8f4:	e08ce104 	add	lr, ip, r4, lsl #2
   2f8f8:	e78c1104 	str	r1, [ip, r4, lsl #2]
   2f8fc:	e58e3008 	str	r3, [lr, #8]
   2f900:	e59d3008 	ldr	r3, [sp, #8]
   2f904:	e2801001 	add	r1, r0, #1
   2f908:	e58e300c 	str	r3, [lr, #12]
   2f90c:	e59d300c 	ldr	r3, [sp, #12]
   2f910:	e5ce2004 	strb	r2, [lr, #4]
   2f914:	e58e3010 	str	r3, [lr, #16]
   2f918:	e58c1190 	str	r1, [ip, #400]	; 0x190
   2f91c:	e8bd8010 	pop	{r4, pc}
   2f920:	e3e00000 	mvn	r0, #0
   2f924:	e12fff1e 	bx	lr

0002f928 <CommandHandler::commsSocketEnable(unsigned int, bool)>:
   2f928:	e5903190 	ldr	r3, [r0, #400]	; 0x190
   2f92c:	e1530001 	cmp	r3, r1
   2f930:	80811101 	addhi	r1, r1, r1, lsl #2
   2f934:	80801101 	addhi	r1, r0, r1, lsl #2
   2f938:	85c12004 	strbhi	r2, [r1, #4]
   2f93c:	e12fff1e 	bx	lr

0002f940 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)>:
   2f940:	e59f3010 	ldr	r3, [pc, #16]	; 2f958 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)+0x18>
   2f944:	e5930000 	ldr	r0, [r3]
   2f948:	e3500000 	cmp	r0, #0
   2f94c:	012fff1e 	bxeq	lr
   2f950:	e2800f65 	add	r0, r0, #404	; 0x194
   2f954:	eafffe65 	b	2f2f0 <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)>
   2f958:	0004db74 	.word	0x0004db74

0002f95c <CommandHandler::hdlcTxAvailableStatic()>:
   2f95c:	e59f3020 	ldr	r3, [pc, #32]	; 2f984 <CommandHandler::hdlcTxAvailableStatic()+0x28>
   2f960:	e5932000 	ldr	r2, [r3]
   2f964:	e3520000 	cmp	r2, #0
   2f968:	0a000003 	beq	2f97c <CommandHandler::hdlcTxAvailableStatic()+0x20>
   2f96c:	e5933008 	ldr	r3, [r3, #8]
   2f970:	e3530000 	cmp	r3, #0
   2f974:	0a000000 	beq	2f97c <CommandHandler::hdlcTxAvailableStatic()+0x20>
   2f978:	e12fff13 	bx	r3
   2f97c:	e3a00000 	mov	r0, #0
   2f980:	e12fff1e 	bx	lr
   2f984:	0004db74 	.word	0x0004db74

0002f988 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>:
   2f988:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f98c:	e1a07000 	mov	r7, r0
   2f990:	e5900190 	ldr	r0, [r0, #400]	; 0x190
   2f994:	e1a08001 	mov	r8, r1
   2f998:	e3500000 	cmp	r0, #0
   2f99c:	e1a09002 	mov	r9, r2
   2f9a0:	e1a0a003 	mov	sl, r3
   2f9a4:	e24dd00c 	sub	sp, sp, #12
   2f9a8:	0a00002f 	beq	2fa6c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xe4>
   2f9ac:	e1a04007 	mov	r4, r7
   2f9b0:	e3a05000 	mov	r5, #0
   2f9b4:	e59fb0d4 	ldr	fp, [pc, #212]	; 2fa90 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x108>
   2f9b8:	ea00000f 	b	2f9fc <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x74>
   2f9bc:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   2f9c0:	e1a02009 	mov	r2, r9
   2f9c4:	e58d3004 	str	r3, [sp, #4]
   2f9c8:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   2f9cc:	e1a01008 	mov	r1, r8
   2f9d0:	e58d3000 	str	r3, [sp]
   2f9d4:	e5940000 	ldr	r0, [r4]
   2f9d8:	e1a0300a 	mov	r3, sl
   2f9dc:	e12fff36 	blx	r6
   2f9e0:	e3500000 	cmp	r0, #0
   2f9e4:	1a00001e 	bne	2fa64 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xdc>
   2f9e8:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2f9ec:	e2855001 	add	r5, r5, #1
   2f9f0:	e1500005 	cmp	r0, r5
   2f9f4:	e2844014 	add	r4, r4, #20
   2f9f8:	9a000019 	bls	2fa64 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xdc>
   2f9fc:	e5d43004 	ldrb	r3, [r4, #4]
   2fa00:	e3530000 	cmp	r3, #0
   2fa04:	0a00000b 	beq	2fa38 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xb0>
   2fa08:	e5946008 	ldr	r6, [r4, #8]
   2fa0c:	e3560000 	cmp	r6, #0
   2fa10:	1affffe9 	bne	2f9bc <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x34>
   2fa14:	e3550000 	cmp	r5, #0
   2fa18:	0afffff3 	beq	2f9ec <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x64>
   2fa1c:	ebffdc00 	bl	26a24 <CLogger::Get()>
   2fa20:	e3a02004 	mov	r2, #4
   2fa24:	e1a0100b 	mov	r1, fp
   2fa28:	e59f3064 	ldr	r3, [pc, #100]	; 2fa94 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x10c>
   2fa2c:	e58d5000 	str	r5, [sp]
   2fa30:	ebffdb3d 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fa34:	eaffffeb 	b	2f9e8 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x60>
   2fa38:	ebffdbf9 	bl	26a24 <CLogger::Get()>
   2fa3c:	e58d5000 	str	r5, [sp]
   2fa40:	e3a02004 	mov	r2, #4
   2fa44:	e1a0100b 	mov	r1, fp
   2fa48:	e59f3048 	ldr	r3, [pc, #72]	; 2fa98 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x110>
   2fa4c:	ebffdb36 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fa50:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2fa54:	e2855001 	add	r5, r5, #1
   2fa58:	e1500005 	cmp	r0, r5
   2fa5c:	e2844014 	add	r4, r4, #20
   2fa60:	8affffe5 	bhi	2f9fc <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x74>
   2fa64:	e28dd00c 	add	sp, sp, #12
   2fa68:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa6c:	ebffdbec 	bl	26a24 <CLogger::Get()>
   2fa70:	e3a02004 	mov	r2, #4
   2fa74:	e59f3020 	ldr	r3, [pc, #32]	; 2fa9c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x114>
   2fa78:	e59f1010 	ldr	r1, [pc, #16]	; 2fa90 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x108>
   2fa7c:	ebffdb2a 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fa80:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2fa84:	e3500000 	cmp	r0, #0
   2fa88:	1affffc7 	bne	2f9ac <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x24>
   2fa8c:	eafffff4 	b	2fa64 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xdc>
   2fa90:	00045ff4 	.word	0x00045ff4
   2fa94:	00045c70 	.word	0x00045c70
   2fa98:	00045c58 	.word	0x00045c58
   2fa9c:	00045c30 	.word	0x00045c30

0002faa0 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)>:
   2faa0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2faa4:	e1a06000 	mov	r6, r0
   2faa8:	e5900190 	ldr	r0, [r0, #400]	; 0x190
   2faac:	e5dd7028 	ldrb	r7, [sp, #40]	; 0x28
   2fab0:	e3500000 	cmp	r0, #0
   2fab4:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fab8:	e1a09001 	mov	r9, r1
   2fabc:	e1a08002 	mov	r8, r2
   2fac0:	e1a0a003 	mov	sl, r3
   2fac4:	e1a04006 	mov	r4, r6
   2fac8:	e3a05000 	mov	r5, #0
   2facc:	ea00000c 	b	2fb04 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x64>
   2fad0:	e594300c 	ldr	r3, [r4, #12]
   2fad4:	e3530000 	cmp	r3, #0
   2fad8:	0a000005 	beq	2faf4 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2fadc:	e1a0100a 	mov	r1, sl
   2fae0:	e1a00008 	mov	r0, r8
   2fae4:	e12fff33 	blx	r3
   2fae8:	e3500000 	cmp	r0, #0
   2faec:	18bd8ff8 	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2faf0:	e5960190 	ldr	r0, [r6, #400]	; 0x190
   2faf4:	e2855001 	add	r5, r5, #1
   2faf8:	e1500005 	cmp	r0, r5
   2fafc:	e2844014 	add	r4, r4, #20
   2fb00:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fb04:	e5d4c004 	ldrb	ip, [r4, #4]
   2fb08:	e35c0000 	cmp	ip, #0
   2fb0c:	0afffff8 	beq	2faf4 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2fb10:	e3570000 	cmp	r7, #0
   2fb14:	1affffed 	bne	2fad0 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x30>
   2fb18:	e594b010 	ldr	fp, [r4, #16]
   2fb1c:	e35b0000 	cmp	fp, #0
   2fb20:	0afffff3 	beq	2faf4 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2fb24:	e1a0300a 	mov	r3, sl
   2fb28:	e1a02008 	mov	r2, r8
   2fb2c:	e1a01009 	mov	r1, r9
   2fb30:	e5940000 	ldr	r0, [r4]
   2fb34:	e12fff3b 	blx	fp
   2fb38:	e3500000 	cmp	r0, #0
   2fb3c:	0affffeb 	beq	2faf0 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x50>
   2fb40:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002fb44 <CommandHandler::getFileReceiveStatus(unsigned long&, unsigned long&)>:
   2fb44:	e2803a05 	add	r3, r0, #20480	; 0x5000
   2fb48:	e5930864 	ldr	r0, [r3, #2148]	; 0x864
   2fb4c:	e3500000 	cmp	r0, #0
   2fb50:	012fff1e 	bxeq	lr
   2fb54:	e5933868 	ldr	r3, [r3, #2152]	; 0x868
   2fb58:	e1500003 	cmp	r0, r3
   2fb5c:	15810000 	strne	r0, [r1]
   2fb60:	13a00001 	movne	r0, #1
   2fb64:	15823000 	strne	r3, [r2]
   2fb68:	03a00000 	moveq	r0, #0
   2fb6c:	e12fff1e 	bx	lr

0002fb70 <CommandHandler::sendKeyStrToTarget(char const*)>:
   2fb70:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2fb74:	e3a04000 	mov	r4, #0
   2fb78:	e1a06000 	mov	r6, r0
   2fb7c:	e1a09001 	mov	r9, r1
   2fb80:	e1a07004 	mov	r7, r4
   2fb84:	e59f50a0 	ldr	r5, [pc, #160]	; 2fc2c <CommandHandler::sendKeyStrToTarget(char const*)+0xbc>
   2fb88:	e2808a05 	add	r8, r0, #20480	; 0x5000
   2fb8c:	ea00000f 	b	2fbd0 <CommandHandler::sendKeyStrToTarget(char const*)+0x60>
   2fb90:	e3510000 	cmp	r1, #0
   2fb94:	01520003 	cmpeq	r2, r3
   2fb98:	0a00000b 	beq	2fbcc <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2fb9c:	e5983870 	ldr	r3, [r8, #2160]	; 0x870
   2fba0:	e7d92004 	ldrb	r2, [r9, r4]
   2fba4:	e0863003 	add	r3, r6, r3
   2fba8:	e2833b16 	add	r3, r3, #22528	; 0x5800
   2fbac:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
   2fbb0:	e5983870 	ldr	r3, [r8, #2160]	; 0x870
   2fbb4:	e5982878 	ldr	r2, [r8, #2168]	; 0x878
   2fbb8:	e2833001 	add	r3, r3, #1
   2fbbc:	e5883870 	str	r3, [r8, #2160]	; 0x870
   2fbc0:	e5983870 	ldr	r3, [r8, #2160]	; 0x870
   2fbc4:	e1530002 	cmp	r3, r2
   2fbc8:	25887870 	strcs	r7, [r8, #2160]	; 0x870
   2fbcc:	e2844001 	add	r4, r4, #1
   2fbd0:	e1a00009 	mov	r0, r9
   2fbd4:	ebffe8d0 	bl	29f1c <strlen>
   2fbd8:	e1500004 	cmp	r0, r4
   2fbdc:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   2fbe0:	e5953000 	ldr	r3, [r5]
   2fbe4:	e2833a05 	add	r3, r3, #20480	; 0x5000
   2fbe8:	e5932878 	ldr	r2, [r3, #2168]	; 0x878
   2fbec:	e3520000 	cmp	r2, #0
   2fbf0:	0afffff5 	beq	2fbcc <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2fbf4:	e5930870 	ldr	r0, [r3, #2160]	; 0x870
   2fbf8:	e5931874 	ldr	r1, [r3, #2164]	; 0x874
   2fbfc:	e1500001 	cmp	r0, r1
   2fc00:	0affffe5 	beq	2fb9c <CommandHandler::sendKeyStrToTarget(char const*)+0x2c>
   2fc04:	e5931874 	ldr	r1, [r3, #2164]	; 0x874
   2fc08:	e5930870 	ldr	r0, [r3, #2160]	; 0x870
   2fc0c:	e2422001 	sub	r2, r2, #1
   2fc10:	e1510000 	cmp	r1, r0
   2fc14:	e5933870 	ldr	r3, [r3, #2160]	; 0x870
   2fc18:	3affffdc 	bcc	2fb90 <CommandHandler::sendKeyStrToTarget(char const*)+0x20>
   2fc1c:	e0411003 	sub	r1, r1, r3
   2fc20:	e3510001 	cmp	r1, #1
   2fc24:	9affffe8 	bls	2fbcc <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2fc28:	eaffffdb 	b	2fb9c <CommandHandler::sendKeyStrToTarget(char const*)+0x2c>
   2fc2c:	0004db74 	.word	0x0004db74

0002fc30 <CommandHandler::sendKeyStrToTargetStatic(char const*)>:
   2fc30:	e59f300c 	ldr	r3, [pc, #12]	; 2fc44 <CommandHandler::sendKeyStrToTargetStatic(char const*)+0x14>
   2fc34:	e5930000 	ldr	r0, [r3]
   2fc38:	e3500000 	cmp	r0, #0
   2fc3c:	012fff1e 	bxeq	lr
   2fc40:	eaffffca 	b	2fb70 <CommandHandler::sendKeyStrToTarget(char const*)>
   2fc44:	0004db74 	.word	0x0004db74

0002fc48 <CommandHandler::getTxAvailable()>:
   2fc48:	e59f3020 	ldr	r3, [pc, #32]	; 2fc70 <CommandHandler::getTxAvailable()+0x28>
   2fc4c:	e5932000 	ldr	r2, [r3]
   2fc50:	e3520000 	cmp	r2, #0
   2fc54:	0a000003 	beq	2fc68 <CommandHandler::getTxAvailable()+0x20>
   2fc58:	e5933008 	ldr	r3, [r3, #8]
   2fc5c:	e3530000 	cmp	r3, #0
   2fc60:	0a000000 	beq	2fc68 <CommandHandler::getTxAvailable()+0x20>
   2fc64:	e12fff13 	bx	r3
   2fc68:	e3a00000 	mov	r0, #0
   2fc6c:	e12fff1e 	bx	lr
   2fc70:	0004db74 	.word	0x0004db74

0002fc74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>:
   2fc74:	e92d4070 	push	{r4, r5, r6, lr}
   2fc78:	e1a06001 	mov	r6, r1
   2fc7c:	e1a04002 	mov	r4, r2
   2fc80:	e24ddc4e 	sub	sp, sp, #19968	; 0x4e00
   2fc84:	e24dd050 	sub	sp, sp, #80	; 0x50
   2fc88:	e28d2c4e 	add	r2, sp, #19968	; 0x4e00
   2fc8c:	e5925064 	ldr	r5, [r2, #100]	; 0x64
   2fc90:	e28dc030 	add	ip, sp, #48	; 0x30
   2fc94:	e3a01014 	mov	r1, #20
   2fc98:	e2822064 	add	r2, r2, #100	; 0x64
   2fc9c:	e28d0008 	add	r0, sp, #8
   2fca0:	e59f2180 	ldr	r2, [pc, #384]	; 2fe28 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b4>
   2fca4:	e58dc004 	str	ip, [sp, #4]
   2fca8:	ebfff8ad 	bl	2df64 <snprintf>
   2fcac:	e1a03005 	mov	r3, r5
   2fcb0:	e3a01014 	mov	r1, #20
   2fcb4:	e59f216c 	ldr	r2, [pc, #364]	; 2fe28 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b4>
   2fcb8:	e28d001c 	add	r0, sp, #28
   2fcbc:	ebfff8a8 	bl	2df64 <snprintf>
   2fcc0:	e59f2164 	ldr	r2, [pc, #356]	; 2fe2c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2fcc4:	e59f1164 	ldr	r1, [pc, #356]	; 2fe30 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1bc>
   2fcc8:	e59d0004 	ldr	r0, [sp, #4]
   2fccc:	ebfff838 	bl	2ddb4 <strlcpy>
   2fcd0:	e1a01006 	mov	r1, r6
   2fcd4:	e59f2150 	ldr	r2, [pc, #336]	; 2fe2c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2fcd8:	e59d0004 	ldr	r0, [sp, #4]
   2fcdc:	ebfff850 	bl	2de24 <strlcat>
   2fce0:	e59f2144 	ldr	r2, [pc, #324]	; 2fe2c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2fce4:	e59f1148 	ldr	r1, [pc, #328]	; 2fe34 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c0>
   2fce8:	e59d0004 	ldr	r0, [sp, #4]
   2fcec:	ebfff84c 	bl	2de24 <strlcat>
   2fcf0:	e1a00004 	mov	r0, r4
   2fcf4:	ebffe888 	bl	29f1c <strlen>
   2fcf8:	e3500000 	cmp	r0, #0
   2fcfc:	1a000038 	bne	2fde4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x170>
   2fd00:	e59f2124 	ldr	r2, [pc, #292]	; 2fe2c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2fd04:	e59f112c 	ldr	r1, [pc, #300]	; 2fe38 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c4>
   2fd08:	e59d0004 	ldr	r0, [sp, #4]
   2fd0c:	ebfff844 	bl	2de24 <strlcat>
   2fd10:	e59f2114 	ldr	r2, [pc, #276]	; 2fe2c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2fd14:	e28d1008 	add	r1, sp, #8
   2fd18:	e59d0004 	ldr	r0, [sp, #4]
   2fd1c:	ebfff840 	bl	2de24 <strlcat>
   2fd20:	e59f2104 	ldr	r2, [pc, #260]	; 2fe2c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2fd24:	e59f1110 	ldr	r1, [pc, #272]	; 2fe3c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c8>
   2fd28:	e59d0004 	ldr	r0, [sp, #4]
   2fd2c:	ebfff83c 	bl	2de24 <strlcat>
   2fd30:	e59f20f4 	ldr	r2, [pc, #244]	; 2fe2c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2fd34:	e28d101c 	add	r1, sp, #28
   2fd38:	e59d0004 	ldr	r0, [sp, #4]
   2fd3c:	ebfff838 	bl	2de24 <strlcat>
   2fd40:	e59f20e4 	ldr	r2, [pc, #228]	; 2fe2c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2fd44:	e59f10f4 	ldr	r1, [pc, #244]	; 2fe40 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1cc>
   2fd48:	e59d0004 	ldr	r0, [sp, #4]
   2fd4c:	ebfff834 	bl	2de24 <strlcat>
   2fd50:	e59d0004 	ldr	r0, [sp, #4]
   2fd54:	ebffe870 	bl	29f1c <strlen>
   2fd58:	e2800001 	add	r0, r0, #1
   2fd5c:	e59f30e0 	ldr	r3, [pc, #224]	; 2fe44 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d0>
   2fd60:	e0854000 	add	r4, r5, r0
   2fd64:	e2846001 	add	r6, r4, #1
   2fd68:	e1560003 	cmp	r6, r3
   2fd6c:	8a000025 	bhi	2fe08 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x194>
   2fd70:	e3550000 	cmp	r5, #0
   2fd74:	0a00000b 	beq	2fda8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x134>
   2fd78:	e28d3c4e 	add	r3, sp, #19968	; 0x4e00
   2fd7c:	e2833060 	add	r3, r3, #96	; 0x60
   2fd80:	e5933000 	ldr	r3, [r3]
   2fd84:	e3530000 	cmp	r3, #0
   2fd88:	0a000012 	beq	2fdd8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x164>
   2fd8c:	e59d3004 	ldr	r3, [sp, #4]
   2fd90:	e1a02005 	mov	r2, r5
   2fd94:	e0830000 	add	r0, r3, r0
   2fd98:	e28d3c4e 	add	r3, sp, #19968	; 0x4e00
   2fd9c:	e5931060 	ldr	r1, [r3, #96]	; 0x60
   2fda0:	e2833060 	add	r3, r3, #96	; 0x60
   2fda4:	ebffea57 	bl	2a708 <memcpy>
   2fda8:	e3a02000 	mov	r2, #0
   2fdac:	e59f3094 	ldr	r3, [pc, #148]	; 2fe48 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d4>
   2fdb0:	e5930000 	ldr	r0, [r3]
   2fdb4:	e28d3ee5 	add	r3, sp, #3664	; 0xe50
   2fdb8:	e0833004 	add	r3, r3, r4
   2fdbc:	e1500002 	cmp	r0, r2
   2fdc0:	e5432e20 	strb	r2, [r3, #-3616]	; 0xfffff1e0
   2fdc4:	0a000003 	beq	2fdd8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x164>
   2fdc8:	e1a02006 	mov	r2, r6
   2fdcc:	e59d1004 	ldr	r1, [sp, #4]
   2fdd0:	e2800f65 	add	r0, r0, #404	; 0x194
   2fdd4:	ebfffe36 	bl	2f6b4 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>
   2fdd8:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   2fddc:	e28dd050 	add	sp, sp, #80	; 0x50
   2fde0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fde4:	e59f2040 	ldr	r2, [pc, #64]	; 2fe2c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2fde8:	e59f105c 	ldr	r1, [pc, #92]	; 2fe4c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d8>
   2fdec:	e59d0004 	ldr	r0, [sp, #4]
   2fdf0:	ebfff80b 	bl	2de24 <strlcat>
   2fdf4:	e1a01004 	mov	r1, r4
   2fdf8:	e59f202c 	ldr	r2, [pc, #44]	; 2fe2c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2fdfc:	e59d0004 	ldr	r0, [sp, #4]
   2fe00:	ebfff807 	bl	2de24 <strlcat>
   2fe04:	eaffffbd 	b	2fd00 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x8c>
   2fe08:	ebffdb05 	bl	26a24 <CLogger::Get()>
   2fe0c:	e3a02002 	mov	r2, #2
   2fe10:	e59f3038 	ldr	r3, [pc, #56]	; 2fe50 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1dc>
   2fe14:	e59f1038 	ldr	r1, [pc, #56]	; 2fe54 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1e0>
   2fe18:	ebffda43 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fe1c:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   2fe20:	e28dd050 	add	sp, sp, #80	; 0x50
   2fe24:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fe28:	00045c84 	.word	0x00045c84
   2fe2c:	00004e20 	.word	0x00004e20
   2fe30:	00045c88 	.word	0x00045c88
   2fe34:	00046864 	.word	0x00046864
   2fe38:	00045c98 	.word	0x00045c98
   2fe3c:	00045ca4 	.word	0x00045ca4
   2fe40:	00045ccc 	.word	0x00045ccc
   2fe44:	00004e1f 	.word	0x00004e1f
   2fe48:	0004db74 	.word	0x0004db74
   2fe4c:	00041480 	.word	0x00041480
   2fe50:	00045cb0 	.word	0x00045cb0
   2fe54:	00045ff4 	.word	0x00045ff4

0002fe58 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>:
   2fe58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2fe5c:	e1a08002 	mov	r8, r2
   2fe60:	e1a07003 	mov	r7, r3
   2fe64:	e1a05001 	mov	r5, r1
   2fe68:	e24ddc27 	sub	sp, sp, #9984	; 0x2700
   2fe6c:	e24dd028 	sub	sp, sp, #40	; 0x28
   2fe70:	e1a03001 	mov	r3, r1
   2fe74:	e28d4018 	add	r4, sp, #24
   2fe78:	e3a0100a 	mov	r1, #10
   2fe7c:	e59f20c0 	ldr	r2, [pc, #192]	; 2ff44 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xec>
   2fe80:	e1a06000 	mov	r6, r0
   2fe84:	e28d000c 	add	r0, sp, #12
   2fe88:	ebfff835 	bl	2df64 <snprintf>
   2fe8c:	e59f20b4 	ldr	r2, [pc, #180]	; 2ff48 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2fe90:	e59f10b4 	ldr	r1, [pc, #180]	; 2ff4c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf4>
   2fe94:	e1a00004 	mov	r0, r4
   2fe98:	ebfff7c5 	bl	2ddb4 <strlcpy>
   2fe9c:	e1a01008 	mov	r1, r8
   2fea0:	e59f20a0 	ldr	r2, [pc, #160]	; 2ff48 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2fea4:	e1a00004 	mov	r0, r4
   2fea8:	ebfff7dd 	bl	2de24 <strlcat>
   2feac:	e59f2094 	ldr	r2, [pc, #148]	; 2ff48 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2feb0:	e59f1098 	ldr	r1, [pc, #152]	; 2ff50 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf8>
   2feb4:	e1a00004 	mov	r0, r4
   2feb8:	ebfff7d9 	bl	2de24 <strlcat>
   2febc:	e59f2084 	ldr	r2, [pc, #132]	; 2ff48 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2fec0:	e59f108c 	ldr	r1, [pc, #140]	; 2ff54 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xfc>
   2fec4:	e1a00004 	mov	r0, r4
   2fec8:	ebfff7d5 	bl	2de24 <strlcat>
   2fecc:	e1a01007 	mov	r1, r7
   2fed0:	e1a00004 	mov	r0, r4
   2fed4:	e59f206c 	ldr	r2, [pc, #108]	; 2ff48 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2fed8:	ebfff7d1 	bl	2de24 <strlcat>
   2fedc:	e3750001 	cmn	r5, #1
   2fee0:	0a000007 	beq	2ff04 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xac>
   2fee4:	e59f205c 	ldr	r2, [pc, #92]	; 2ff48 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2fee8:	e59f1068 	ldr	r1, [pc, #104]	; 2ff58 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x100>
   2feec:	e1a00004 	mov	r0, r4
   2fef0:	ebfff7cb 	bl	2de24 <strlcat>
   2fef4:	e1a00004 	mov	r0, r4
   2fef8:	e59f2048 	ldr	r2, [pc, #72]	; 2ff48 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2fefc:	e28d100c 	add	r1, sp, #12
   2ff00:	ebfff7c7 	bl	2de24 <strlcat>
   2ff04:	e59f203c 	ldr	r2, [pc, #60]	; 2ff48 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2ff08:	e59f104c 	ldr	r1, [pc, #76]	; 2ff5c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x104>
   2ff0c:	e1a00004 	mov	r0, r4
   2ff10:	ebfff7c3 	bl	2de24 <strlcat>
   2ff14:	e1a00004 	mov	r0, r4
   2ff18:	ebffe7ff 	bl	29f1c <strlen>
   2ff1c:	e1a03005 	mov	r3, r5
   2ff20:	e58d0004 	str	r0, [sp, #4]
   2ff24:	e59f2034 	ldr	r2, [pc, #52]	; 2ff60 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x108>
   2ff28:	e1a00006 	mov	r0, r6
   2ff2c:	e59f1030 	ldr	r1, [pc, #48]	; 2ff64 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x10c>
   2ff30:	e58d4000 	str	r4, [sp]
   2ff34:	ebffff4e 	bl	2fc74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2ff38:	e28ddc27 	add	sp, sp, #9984	; 0x2700
   2ff3c:	e28dd028 	add	sp, sp, #40	; 0x28
   2ff40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2ff44:	00045c84 	.word	0x00045c84
   2ff48:	00002710 	.word	0x00002710
   2ff4c:	00045c88 	.word	0x00045c88
   2ff50:	00046864 	.word	0x00046864
   2ff54:	00041480 	.word	0x00041480
   2ff58:	00045c98 	.word	0x00045c98
   2ff5c:	00045cc0 	.word	0x00045cc0
   2ff60:	00047150 	.word	0x00047150
   2ff64:	00045cd0 	.word	0x00045cd0

0002ff68 <CommandHandler::sendUnnumberedMsg(char const*, char const*)>:
   2ff68:	e1a0c001 	mov	ip, r1
   2ff6c:	e1a03002 	mov	r3, r2
   2ff70:	e3e01000 	mvn	r1, #0
   2ff74:	e1a0200c 	mov	r2, ip
   2ff78:	eaffffb6 	b	2fe58 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>

0002ff7c <CommandHandler::handleFileStart(char const*)>:
   2ff7c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2ff80:	e2806a05 	add	r6, r0, #20480	; 0x5000
   2ff84:	e1a04000 	mov	r4, r0
   2ff88:	e1a02006 	mov	r2, r6
   2ff8c:	e3a03064 	mov	r3, #100	; 0x64
   2ff90:	e59f00ec 	ldr	r0, [pc, #236]	; 30084 <CommandHandler::handleFileStart(char const*)+0x108>
   2ff94:	e24dd024 	sub	sp, sp, #36	; 0x24
   2ff98:	e1a05001 	mov	r5, r1
   2ff9c:	ebfff831 	bl	2e068 <jsonGetValueForKey>
   2ffa0:	e3500000 	cmp	r0, #0
   2ffa4:	1a000001 	bne	2ffb0 <CommandHandler::handleFileStart(char const*)+0x34>
   2ffa8:	e28dd024 	add	sp, sp, #36	; 0x24
   2ffac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2ffb0:	e3a03028 	mov	r3, #40	; 0x28
   2ffb4:	e1a01005 	mov	r1, r5
   2ffb8:	e59f00c8 	ldr	r0, [pc, #200]	; 30088 <CommandHandler::handleFileStart(char const*)+0x10c>
   2ffbc:	e2862065 	add	r2, r6, #101	; 0x65
   2ffc0:	ebfff828 	bl	2e068 <jsonGetValueForKey>
   2ffc4:	e3500000 	cmp	r0, #0
   2ffc8:	0afffff6 	beq	2ffa8 <CommandHandler::handleFileStart(char const*)+0x2c>
   2ffcc:	e3a03014 	mov	r3, #20
   2ffd0:	e1a01005 	mov	r1, r5
   2ffd4:	e59f00b0 	ldr	r0, [pc, #176]	; 3008c <CommandHandler::handleFileStart(char const*)+0x110>
   2ffd8:	e28d2008 	add	r2, sp, #8
   2ffdc:	ebfff821 	bl	2e068 <jsonGetValueForKey>
   2ffe0:	e3500000 	cmp	r0, #0
   2ffe4:	0affffef 	beq	2ffa8 <CommandHandler::handleFileStart(char const*)+0x2c>
   2ffe8:	e3a0200a 	mov	r2, #10
   2ffec:	e3a01000 	mov	r1, #0
   2fff0:	e28d0008 	add	r0, sp, #8
   2fff4:	ebffe8f0 	bl	2a3bc <strtoul>
   2fff8:	e1a01005 	mov	r1, r5
   2fffc:	e1a07000 	mov	r7, r0
   30000:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   30004:	e286008e 	add	r0, r6, #142	; 0x8e
   30008:	ebfff769 	bl	2ddb4 <strlcpy>
   3000c:	e5960860 	ldr	r0, [r6, #2144]	; 0x860
   30010:	e3500000 	cmp	r0, #0
   30014:	0a000000 	beq	3001c <CommandHandler::handleFileStart(char const*)+0xa0>
   30018:	ebffebad 	bl	2aed4 <operator delete[](void*)>
   3001c:	e1a00007 	mov	r0, r7
   30020:	ebffeba4 	bl	2aeb8 <operator new[](unsigned int)>
   30024:	e3a05000 	mov	r5, #0
   30028:	e5860860 	str	r0, [r6, #2144]	; 0x860
   3002c:	e5867864 	str	r7, [r6, #2148]	; 0x864
   30030:	e5865868 	str	r5, [r6, #2152]	; 0x868
   30034:	e586586c 	str	r5, [r6, #2156]	; 0x86c
   30038:	ebfff724 	bl	2dcd0 <millis>
   3003c:	e2842a07 	add	r2, r4, #28672	; 0x7000
   30040:	e282ce7f 	add	ip, r2, #2032	; 0x7f0
   30044:	e2843c4f 	add	r3, r4, #20224	; 0x4f00
   30048:	e58608b0 	str	r0, [r6, #2224]	; 0x8b0
   3004c:	e28cc00c 	add	ip, ip, #12
   30050:	e58257f4 	str	r5, [r2, #2036]	; 0x7f4
   30054:	e28330f0 	add	r3, r3, #240	; 0xf0
   30058:	e58d5004 	str	r5, [sp, #4]
   3005c:	e58d5000 	str	r5, [sp]
   30060:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   30064:	e88c000f 	stm	ip, {r0, r1, r2, r3}
   30068:	e1a03005 	mov	r3, r5
   3006c:	e1a00004 	mov	r0, r4
   30070:	e59f2018 	ldr	r2, [pc, #24]	; 30090 <CommandHandler::handleFileStart(char const*)+0x114>
   30074:	e59f1018 	ldr	r1, [pc, #24]	; 30094 <CommandHandler::handleFileStart(char const*)+0x118>
   30078:	ebfffefd 	bl	2fc74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   3007c:	e28dd024 	add	sp, sp, #36	; 0x24
   30080:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   30084:	00045cd4 	.word	0x00045cd4
   30088:	00045ce0 	.word	0x00045ce0
   3008c:	00045cec 	.word	0x00045cec
   30090:	00047150 	.word	0x00047150
   30094:	00045cf4 	.word	0x00045cf4

00030098 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)>:
   30098:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3009c:	e2807a05 	add	r7, r0, #20480	; 0x5000
   300a0:	e1a04000 	mov	r4, r0
   300a4:	e5970860 	ldr	r0, [r7, #2144]	; 0x860
   300a8:	e24dd088 	sub	sp, sp, #136	; 0x88
   300ac:	e3500000 	cmp	r0, #0
   300b0:	0a000007 	beq	300d4 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x3c>
   300b4:	e1a06002 	mov	r6, r2
   300b8:	e1a05003 	mov	r5, r3
   300bc:	e59f00cc 	ldr	r0, [pc, #204]	; 30190 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0xf8>
   300c0:	e3a03014 	mov	r3, #20
   300c4:	e28d200c 	add	r2, sp, #12
   300c8:	ebfff7e6 	bl	2e068 <jsonGetValueForKey>
   300cc:	e3500000 	cmp	r0, #0
   300d0:	1a000001 	bne	300dc <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x44>
   300d4:	e28dd088 	add	sp, sp, #136	; 0x88
   300d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   300dc:	e3a0200a 	mov	r2, #10
   300e0:	e3a01000 	mov	r1, #0
   300e4:	e28d000c 	add	r0, sp, #12
   300e8:	ebffe8b3 	bl	2a3bc <strtoul>
   300ec:	e5973864 	ldr	r3, [r7, #2148]	; 0x864
   300f0:	e0802005 	add	r2, r0, r5
   300f4:	e1520003 	cmp	r2, r3
   300f8:	e1a08000 	mov	r8, r0
   300fc:	8afffff4 	bhi	300d4 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x3c>
   30100:	e5970860 	ldr	r0, [r7, #2144]	; 0x860
   30104:	e1a01006 	mov	r1, r6
   30108:	e1a02005 	mov	r2, r5
   3010c:	e0800008 	add	r0, r0, r8
   30110:	ebffe97c 	bl	2a708 <memcpy>
   30114:	e5972868 	ldr	r2, [r7, #2152]	; 0x868
   30118:	e597386c 	ldr	r3, [r7, #2156]	; 0x86c
   3011c:	e0822005 	add	r2, r2, r5
   30120:	e2833001 	add	r3, r3, #1
   30124:	e5872868 	str	r2, [r7, #2152]	; 0x868
   30128:	e587386c 	str	r3, [r7, #2156]	; 0x86c
   3012c:	ebfff6e7 	bl	2dcd0 <millis>
   30130:	e284ca07 	add	ip, r4, #28672	; 0x7000
   30134:	e58708b0 	str	r0, [r7, #2224]	; 0x8b0
   30138:	e59c37f4 	ldr	r3, [ip, #2036]	; 0x7f4
   3013c:	e28d0024 	add	r0, sp, #36	; 0x24
   30140:	e0841103 	add	r1, r4, r3, lsl #2
   30144:	e2832001 	add	r2, r3, #1
   30148:	e2813a05 	add	r3, r1, #20480	; 0x5000
   3014c:	e2811a06 	add	r1, r1, #24576	; 0x6000
   30150:	e58388b4 	str	r8, [r3, #2228]	; 0x8b4
   30154:	e5815854 	str	r5, [r1, #2132]	; 0x854
   30158:	e1a03008 	mov	r3, r8
   3015c:	e58c27f4 	str	r2, [ip, #2036]	; 0x7f4
   30160:	e3a01064 	mov	r1, #100	; 0x64
   30164:	e59f2028 	ldr	r2, [pc, #40]	; 30194 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0xfc>
   30168:	ebfff77d 	bl	2df64 <snprintf>
   3016c:	e3a03000 	mov	r3, #0
   30170:	e1a00004 	mov	r0, r4
   30174:	e59f101c 	ldr	r1, [pc, #28]	; 30198 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x100>
   30178:	e28d2024 	add	r2, sp, #36	; 0x24
   3017c:	e58d3004 	str	r3, [sp, #4]
   30180:	e58d3000 	str	r3, [sp]
   30184:	ebfffeba 	bl	2fc74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30188:	e28dd088 	add	sp, sp, #136	; 0x88
   3018c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   30190:	00045d00 	.word	0x00045d00
   30194:	00045d08 	.word	0x00045d08
   30198:	00045d14 	.word	0x00045d14

0003019c <CommandHandler::sendAPIReq(char const*)>:
   3019c:	e92d4010 	push	{r4, lr}
   301a0:	e24dd070 	sub	sp, sp, #112	; 0x70
   301a4:	e3a02064 	mov	r2, #100	; 0x64
   301a8:	e1a04001 	mov	r4, r1
   301ac:	e28d0008 	add	r0, sp, #8
   301b0:	e59f1068 	ldr	r1, [pc, #104]	; 30220 <CommandHandler::sendAPIReq(char const*)+0x84>
   301b4:	ebfff6fe 	bl	2ddb4 <strlcpy>
   301b8:	e28d0008 	add	r0, sp, #8
   301bc:	ebffe756 	bl	29f1c <strlen>
   301c0:	e28d3008 	add	r3, sp, #8
   301c4:	e1a01004 	mov	r1, r4
   301c8:	e3a02064 	mov	r2, #100	; 0x64
   301cc:	e0830000 	add	r0, r3, r0
   301d0:	ebfff6f7 	bl	2ddb4 <strlcpy>
   301d4:	e28d0008 	add	r0, sp, #8
   301d8:	ebffe74f 	bl	29f1c <strlen>
   301dc:	e28d3008 	add	r3, sp, #8
   301e0:	e0830000 	add	r0, r3, r0
   301e4:	e3a02064 	mov	r2, #100	; 0x64
   301e8:	e59f1034 	ldr	r1, [pc, #52]	; 30224 <CommandHandler::sendAPIReq(char const*)+0x88>
   301ec:	ebfff6f0 	bl	2ddb4 <strlcpy>
   301f0:	e59f3030 	ldr	r3, [pc, #48]	; 30228 <CommandHandler::sendAPIReq(char const*)+0x8c>
   301f4:	e5930000 	ldr	r0, [r3]
   301f8:	e3500000 	cmp	r0, #0
   301fc:	0a000005 	beq	30218 <CommandHandler::sendAPIReq(char const*)+0x7c>
   30200:	e3a03000 	mov	r3, #0
   30204:	e59f1020 	ldr	r1, [pc, #32]	; 3022c <CommandHandler::sendAPIReq(char const*)+0x90>
   30208:	e28d2008 	add	r2, sp, #8
   3020c:	e58d3004 	str	r3, [sp, #4]
   30210:	e58d3000 	str	r3, [sp]
   30214:	ebfffe96 	bl	2fc74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30218:	e28dd070 	add	sp, sp, #112	; 0x70
   3021c:	e8bd8010 	pop	{r4, pc}
   30220:	00045d20 	.word	0x00045d20
   30224:	00046864 	.word	0x00046864
   30228:	0004db74 	.word	0x0004db74
   3022c:	00045d28 	.word	0x00045d28

00030230 <CommandHandler::logDebugMessage(char const*)>:
   30230:	e92d4030 	push	{r4, r5, lr}
   30234:	e1a05001 	mov	r5, r1
   30238:	e24ddc4e 	sub	sp, sp, #19968	; 0x4e00
   3023c:	e24dd034 	sub	sp, sp, #52	; 0x34
   30240:	e1a04000 	mov	r4, r0
   30244:	e59f2050 	ldr	r2, [pc, #80]	; 3029c <CommandHandler::logDebugMessage(char const*)+0x6c>
   30248:	e59f1050 	ldr	r1, [pc, #80]	; 302a0 <CommandHandler::logDebugMessage(char const*)+0x70>
   3024c:	e28d000c 	add	r0, sp, #12
   30250:	ebfff6d7 	bl	2ddb4 <strlcpy>
   30254:	e1a01005 	mov	r1, r5
   30258:	e59f203c 	ldr	r2, [pc, #60]	; 3029c <CommandHandler::logDebugMessage(char const*)+0x6c>
   3025c:	e28d000c 	add	r0, sp, #12
   30260:	ebfff6ef 	bl	2de24 <strlcat>
   30264:	e59f2030 	ldr	r2, [pc, #48]	; 3029c <CommandHandler::logDebugMessage(char const*)+0x6c>
   30268:	e59f1034 	ldr	r1, [pc, #52]	; 302a4 <CommandHandler::logDebugMessage(char const*)+0x74>
   3026c:	e28d000c 	add	r0, sp, #12
   30270:	ebfff6eb 	bl	2de24 <strlcat>
   30274:	e3a03000 	mov	r3, #0
   30278:	e1a00004 	mov	r0, r4
   3027c:	e59f1024 	ldr	r1, [pc, #36]	; 302a8 <CommandHandler::logDebugMessage(char const*)+0x78>
   30280:	e28d200c 	add	r2, sp, #12
   30284:	e58d3004 	str	r3, [sp, #4]
   30288:	e58d3000 	str	r3, [sp]
   3028c:	ebfffe78 	bl	2fc74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30290:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   30294:	e28dd034 	add	sp, sp, #52	; 0x34
   30298:	e8bd8030 	pop	{r4, r5, pc}
   3029c:	00004e20 	.word	0x00004e20
   302a0:	00045d30 	.word	0x00045d30
   302a4:	00046864 	.word	0x00046864
   302a8:	00045d38 	.word	0x00045d38

000302ac <CommandHandler::handleFileEnd(char const*) [clone .part.0]>:
   302ac:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   302b0:	e24ddf5f 	sub	sp, sp, #380	; 0x17c
   302b4:	e1a06000 	mov	r6, r0
   302b8:	e3a03014 	mov	r3, #20
   302bc:	e59f0294 	ldr	r0, [pc, #660]	; 30558 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2ac>
   302c0:	e28d201c 	add	r2, sp, #28
   302c4:	e1a04001 	mov	r4, r1
   302c8:	ebfff766 	bl	2e068 <jsonGetValueForKey>
   302cc:	e2505000 	subs	r5, r0, #0
   302d0:	1a000066 	bne	30470 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1c4>
   302d4:	e1a01004 	mov	r1, r4
   302d8:	e3a03014 	mov	r3, #20
   302dc:	e59f0278 	ldr	r0, [pc, #632]	; 3055c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2b0>
   302e0:	e28d2034 	add	r2, sp, #52	; 0x34
   302e4:	ebfff75f 	bl	2e068 <jsonGetValueForKey>
   302e8:	e2507000 	subs	r7, r0, #0
   302ec:	1a000065 	bne	30488 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1dc>
   302f0:	e2864a05 	add	r4, r6, #20480	; 0x5000
   302f4:	e5941868 	ldr	r1, [r4, #2152]	; 0x868
   302f8:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   302fc:	ebfffd29 	bl	2f7a8 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)>
   30300:	e58d7008 	str	r7, [sp, #8]
   30304:	e58d0004 	str	r0, [sp, #4]
   30308:	e58d5000 	str	r5, [sp]
   3030c:	e594386c 	ldr	r3, [r4, #2156]	; 0x86c
   30310:	e1a08000 	mov	r8, r0
   30314:	e3a01064 	mov	r1, #100	; 0x64
   30318:	e59f2240 	ldr	r2, [pc, #576]	; 30560 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2b4>
   3031c:	e28d004c 	add	r0, sp, #76	; 0x4c
   30320:	ebfff70f 	bl	2df64 <snprintf>
   30324:	e594386c 	ldr	r3, [r4, #2156]	; 0x86c
   30328:	e1550003 	cmp	r5, r3
   3032c:	1a000045 	bne	30448 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x19c>
   30330:	e1580007 	cmp	r8, r7
   30334:	0a000059 	beq	304a0 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1f4>
   30338:	ebffd9b9 	bl	26a24 <CLogger::Get()>
   3033c:	e3a02002 	mov	r2, #2
   30340:	e88d0190 	stm	sp, {r4, r7, r8}
   30344:	e59f3218 	ldr	r3, [pc, #536]	; 30564 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2b8>
   30348:	e59f1218 	ldr	r1, [pc, #536]	; 30568 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2bc>
   3034c:	e58d500c 	str	r5, [sp, #12]
   30350:	ebffd8f5 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30354:	e3a03000 	mov	r3, #0
   30358:	e1a00006 	mov	r0, r6
   3035c:	e59f1208 	ldr	r1, [pc, #520]	; 3056c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2c0>
   30360:	e28d204c 	add	r2, sp, #76	; 0x4c
   30364:	e58d3004 	str	r3, [sp, #4]
   30368:	e58d3000 	str	r3, [sp]
   3036c:	ebfffe40 	bl	2fc74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30370:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30374:	e3500000 	cmp	r0, #0
   30378:	0a000000 	beq	30380 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0xd4>
   3037c:	ebffead4 	bl	2aed4 <operator delete[](void*)>
   30380:	e3a01000 	mov	r1, #0
   30384:	e2867a07 	add	r7, r6, #28672	; 0x7000
   30388:	e59737f4 	ldr	r3, [r7, #2036]	; 0x7f4
   3038c:	e5841860 	str	r1, [r4, #2144]	; 0x860
   30390:	e1530001 	cmp	r3, r1
   30394:	e5841864 	str	r1, [r4, #2148]	; 0x864
   30398:	0a000063 	beq	3052c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x280>
   3039c:	e1a05001 	mov	r5, r1
   303a0:	e2864b16 	add	r4, r6, #22528	; 0x5800
   303a4:	e59f91c4 	ldr	r9, [pc, #452]	; 30570 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2c4>
   303a8:	e28440b0 	add	r4, r4, #176	; 0xb0
   303ac:	e28d80b0 	add	r8, sp, #176	; 0xb0
   303b0:	e5b4c004 	ldr	ip, [r4, #4]!
   303b4:	e15c0001 	cmp	ip, r1
   303b8:	0a00000b 	beq	303ec <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x140>
   303bc:	e5942fa0 	ldr	r2, [r4, #4000]	; 0xfa0
   303c0:	e1a03005 	mov	r3, r5
   303c4:	e88d1002 	stm	sp, {r1, ip}
   303c8:	e58d2008 	str	r2, [sp, #8]
   303cc:	e3a010c8 	mov	r1, #200	; 0xc8
   303d0:	e1a02009 	mov	r2, r9
   303d4:	e1a00008 	mov	r0, r8
   303d8:	ebfff6e1 	bl	2df64 <snprintf>
   303dc:	e1a01008 	mov	r1, r8
   303e0:	e1a00006 	mov	r0, r6
   303e4:	ebffff91 	bl	30230 <CommandHandler::logDebugMessage(char const*)>
   303e8:	e5941000 	ldr	r1, [r4]
   303ec:	e59727f4 	ldr	r2, [r7, #2036]	; 0x7f4
   303f0:	e5943fa0 	ldr	r3, [r4, #4000]	; 0xfa0
   303f4:	e2855001 	add	r5, r5, #1
   303f8:	e1520005 	cmp	r2, r5
   303fc:	e0811003 	add	r1, r1, r3
   30400:	8affffea 	bhi	303b0 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x104>
   30404:	e2863901 	add	r3, r6, #16384	; 0x4000
   30408:	e5930ff8 	ldr	r0, [r3, #4088]	; 0xff8
   3040c:	e5971804 	ldr	r1, [r7, #2052]	; 0x804
   30410:	e5972800 	ldr	r2, [r7, #2048]	; 0x800
   30414:	e58d0004 	str	r0, [sp, #4]
   30418:	e5933ff4 	ldr	r3, [r3, #4084]	; 0xff4
   3041c:	e1a00008 	mov	r0, r8
   30420:	e58d1008 	str	r1, [sp, #8]
   30424:	e58d2000 	str	r2, [sp]
   30428:	e3a010c8 	mov	r1, #200	; 0xc8
   3042c:	e59f2140 	ldr	r2, [pc, #320]	; 30574 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2c8>
   30430:	ebfff6cb 	bl	2df64 <snprintf>
   30434:	e1a01008 	mov	r1, r8
   30438:	e1a00006 	mov	r0, r6
   3043c:	ebffff7b 	bl	30230 <CommandHandler::logDebugMessage(char const*)>
   30440:	e28ddf5f 	add	sp, sp, #380	; 0x17c
   30444:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30448:	ebffd975 	bl	26a24 <CLogger::Get()>
   3044c:	e594386c 	ldr	r3, [r4, #2156]	; 0x86c
   30450:	e3a02002 	mov	r2, #2
   30454:	e58d3004 	str	r3, [sp, #4]
   30458:	e59f1108 	ldr	r1, [pc, #264]	; 30568 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2bc>
   3045c:	e59f3114 	ldr	r3, [pc, #276]	; 30578 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2cc>
   30460:	e58d5008 	str	r5, [sp, #8]
   30464:	e58d4000 	str	r4, [sp]
   30468:	ebffd8af 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3046c:	eaffffb8 	b	30354 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0xa8>
   30470:	e3a0200a 	mov	r2, #10
   30474:	e3a01000 	mov	r1, #0
   30478:	e28d001c 	add	r0, sp, #28
   3047c:	ebffe7ce 	bl	2a3bc <strtoul>
   30480:	e1a05000 	mov	r5, r0
   30484:	eaffff92 	b	302d4 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x28>
   30488:	e3a02010 	mov	r2, #16
   3048c:	e3a01000 	mov	r1, #0
   30490:	e28d0034 	add	r0, sp, #52	; 0x34
   30494:	ebffe7c8 	bl	2a3bc <strtoul>
   30498:	e1a07000 	mov	r7, r0
   3049c:	eaffff93 	b	302f0 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x44>
   304a0:	e3a03000 	mov	r3, #0
   304a4:	e1a00006 	mov	r0, r6
   304a8:	e59f10cc 	ldr	r1, [pc, #204]	; 3057c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2d0>
   304ac:	e28d204c 	add	r2, sp, #76	; 0x4c
   304b0:	e58d3004 	str	r3, [sp, #4]
   304b4:	e58d3000 	str	r3, [sp]
   304b8:	ebfffded 	bl	2fc74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   304bc:	e59f10bc 	ldr	r1, [pc, #188]	; 30580 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2d4>
   304c0:	e2840065 	add	r0, r4, #101	; 0x65
   304c4:	ebffe6bb 	bl	29fb8 <strcasecmp>
   304c8:	e3500000 	cmp	r0, #0
   304cc:	03a05001 	moveq	r5, #1
   304d0:	13a05000 	movne	r5, #0
   304d4:	1a000016 	bne	30534 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x288>
   304d8:	ebffd951 	bl	26a24 <CLogger::Get()>
   304dc:	e5942864 	ldr	r2, [r4, #2148]	; 0x864
   304e0:	e5943868 	ldr	r3, [r4, #2152]	; 0x868
   304e4:	e59f107c 	ldr	r1, [pc, #124]	; 30568 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2bc>
   304e8:	e58d2008 	str	r2, [sp, #8]
   304ec:	e58d3004 	str	r3, [sp, #4]
   304f0:	e3a02004 	mov	r2, #4
   304f4:	e59f3088 	ldr	r3, [pc, #136]	; 30584 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2d8>
   304f8:	e58d7010 	str	r7, [sp, #16]
   304fc:	e58d700c 	str	r7, [sp, #12]
   30500:	e58d4000 	str	r4, [sp]
   30504:	ebffd888 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30508:	e59f0078 	ldr	r0, [pc, #120]	; 30588 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2dc>
   3050c:	ebfff5f6 	bl	2dcec <microsDelay>
   30510:	e58d5000 	str	r5, [sp]
   30514:	e1a00006 	mov	r0, r6
   30518:	e5943868 	ldr	r3, [r4, #2152]	; 0x868
   3051c:	e5942860 	ldr	r2, [r4, #2144]	; 0x860
   30520:	e284108e 	add	r1, r4, #142	; 0x8e
   30524:	ebfffd5d 	bl	2faa0 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)>
   30528:	eaffff90 	b	30370 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0xc4>
   3052c:	e28d80b0 	add	r8, sp, #176	; 0xb0
   30530:	eaffffb3 	b	30404 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x158>
   30534:	ebffd93a 	bl	26a24 <CLogger::Get()>
   30538:	e5943868 	ldr	r3, [r4, #2152]	; 0x868
   3053c:	e3a02004 	mov	r2, #4
   30540:	e58d3004 	str	r3, [sp, #4]
   30544:	e59f101c 	ldr	r1, [pc, #28]	; 30568 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2bc>
   30548:	e59f303c 	ldr	r3, [pc, #60]	; 3058c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2e0>
   3054c:	e58d4000 	str	r4, [sp]
   30550:	ebffd875 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30554:	eaffffed 	b	30510 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x264>
   30558:	00045d3c 	.word	0x00045d3c
   3055c:	00045d48 	.word	0x00045d48
   30560:	00045d4c 	.word	0x00045d4c
   30564:	00045dd0 	.word	0x00045dd0
   30568:	00045ff4 	.word	0x00045ff4
   3056c:	00045dc4 	.word	0x00045dc4
   30570:	00045edc 	.word	0x00045edc
   30574:	00045ea0 	.word	0x00045ea0
   30578:	00045d90 	.word	0x00045d90
   3057c:	00045e1c 	.word	0x00045e1c
   30580:	00045e28 	.word	0x00045e28
   30584:	00045e34 	.word	0x00045e34
   30588:	000186a0 	.word	0x000186a0
   3058c:	00045e88 	.word	0x00045e88

00030590 <CommandHandler::handleFileEnd(char const*)>:
   30590:	e2803a05 	add	r3, r0, #20480	; 0x5000
   30594:	e5933860 	ldr	r3, [r3, #2144]	; 0x860
   30598:	e3530000 	cmp	r3, #0
   3059c:	012fff1e 	bxeq	lr
   305a0:	eaffff41 	b	302ac <CommandHandler::handleFileEnd(char const*) [clone .part.0]>

000305a4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)>:
   305a4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   305a8:	e24ddc57 	sub	sp, sp, #22272	; 0x5700
   305ac:	e24dd0b4 	sub	sp, sp, #180	; 0xb4
   305b0:	e1a06000 	mov	r6, r0
   305b4:	e1a08002 	mov	r8, r2
   305b8:	e1a07003 	mov	r7, r3
   305bc:	e59f0280 	ldr	r0, [pc, #640]	; 30844 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a0>
   305c0:	e3a030c8 	mov	r3, #200	; 0xc8
   305c4:	e28d20f0 	add	r2, sp, #240	; 0xf0
   305c8:	e1a05001 	mov	r5, r1
   305cc:	ebfff6a5 	bl	2e068 <jsonGetValueForKey>
   305d0:	e3500000 	cmp	r0, #0
   305d4:	1a000002 	bne	305e4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x40>
   305d8:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   305dc:	e28dd0b4 	add	sp, sp, #180	; 0xb4
   305e0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   305e4:	e3a04000 	mov	r4, #0
   305e8:	e3a03014 	mov	r3, #20
   305ec:	e1a01005 	mov	r1, r5
   305f0:	e28d2014 	add	r2, sp, #20
   305f4:	e59f024c 	ldr	r0, [pc, #588]	; 30848 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a4>
   305f8:	e5cd4014 	strb	r4, [sp, #20]
   305fc:	ebfff699 	bl	2e068 <jsonGetValueForKey>
   30600:	e1a01004 	mov	r1, r4
   30604:	e3a0200a 	mov	r2, #10
   30608:	e28d0014 	add	r0, sp, #20
   3060c:	e5cd41bc 	strb	r4, [sp, #444]	; 0x1bc
   30610:	ebffe769 	bl	2a3bc <strtoul>
   30614:	e59f1230 	ldr	r1, [pc, #560]	; 3084c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a8>
   30618:	e1a09000 	mov	r9, r0
   3061c:	e28d00f0 	add	r0, sp, #240	; 0xf0
   30620:	ebffe664 	bl	29fb8 <strcasecmp>
   30624:	e1500004 	cmp	r0, r4
   30628:	0a00004e 	beq	30768 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x1c4>
   3062c:	e59f121c 	ldr	r1, [pc, #540]	; 30850 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2ac>
   30630:	e28d00f0 	add	r0, sp, #240	; 0xf0
   30634:	ebffe65f 	bl	29fb8 <strcasecmp>
   30638:	e3500000 	cmp	r0, #0
   3063c:	0a00004f 	beq	30780 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x1dc>
   30640:	e59f120c 	ldr	r1, [pc, #524]	; 30854 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b0>
   30644:	e28d00f0 	add	r0, sp, #240	; 0xf0
   30648:	ebffe65a 	bl	29fb8 <strcasecmp>
   3064c:	e3500000 	cmp	r0, #0
   30650:	1a000007 	bne	30674 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0xd0>
   30654:	e2863a05 	add	r3, r6, #20480	; 0x5000
   30658:	e5933860 	ldr	r3, [r3, #2144]	; 0x860
   3065c:	e3530000 	cmp	r3, #0
   30660:	0affffdc 	beq	305d8 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   30664:	e1a01005 	mov	r1, r5
   30668:	e1a00006 	mov	r0, r6
   3066c:	ebffff0e 	bl	302ac <CommandHandler::handleFileEnd(char const*) [clone .part.0]>
   30670:	eaffffd8 	b	305d8 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   30674:	e59f11dc 	ldr	r1, [pc, #476]	; 30858 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b4>
   30678:	e28d00f0 	add	r0, sp, #240	; 0xf0
   3067c:	ebffe64d 	bl	29fb8 <strcasecmp>
   30680:	e3500000 	cmp	r0, #0
   30684:	1a000045 	bne	307a0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x1fc>
   30688:	e1a01008 	mov	r1, r8
   3068c:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   30690:	e28d0f6f 	add	r0, sp, #444	; 0x1bc
   30694:	ebfff5c6 	bl	2ddb4 <strlcpy>
   30698:	e28d0f6f 	add	r0, sp, #444	; 0x1bc
   3069c:	ebffe61e 	bl	29f1c <strlen>
   306a0:	e247c001 	sub	ip, r7, #1
   306a4:	e05c7000 	subs	r7, ip, r0
   306a8:	e3a030c8 	mov	r3, #200	; 0xc8
   306ac:	e0888000 	add	r8, r8, r0
   306b0:	e28d20f0 	add	r2, sp, #240	; 0xf0
   306b4:	e28d1f6f 	add	r1, sp, #444	; 0x1bc
   306b8:	e59f0184 	ldr	r0, [pc, #388]	; 30844 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a0>
   306bc:	12888001 	addne	r8, r8, #1
   306c0:	ebfff668 	bl	2e068 <jsonGetValueForKey>
   306c4:	e3a03014 	mov	r3, #20
   306c8:	e28d1f6f 	add	r1, sp, #444	; 0x1bc
   306cc:	e08d2003 	add	r2, sp, r3
   306d0:	e59f0170 	ldr	r0, [pc, #368]	; 30848 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a4>
   306d4:	ebfff663 	bl	2e068 <jsonGetValueForKey>
   306d8:	e59f117c 	ldr	r1, [pc, #380]	; 3085c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b8>
   306dc:	e28d00f0 	add	r0, sp, #240	; 0xf0
   306e0:	ebffe634 	bl	29fb8 <strcasecmp>
   306e4:	e2501000 	subs	r1, r0, #0
   306e8:	0a00004c 	beq	30820 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x27c>
   306ec:	e3a00000 	mov	r0, #0
   306f0:	e59fc168 	ldr	ip, [pc, #360]	; 30860 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2bc>
   306f4:	e28d4e99 	add	r4, sp, #2448	; 0x990
   306f8:	e28de028 	add	lr, sp, #40	; 0x28
   306fc:	e1a03007 	mov	r3, r7
   30700:	e58dc004 	str	ip, [sp, #4]
   30704:	e1a02008 	mov	r2, r8
   30708:	e28d1f6f 	add	r1, sp, #444	; 0x1bc
   3070c:	e5cd0990 	strb	r0, [sp, #2448]	; 0x990
   30710:	e58d4000 	str	r4, [sp]
   30714:	e1a00006 	mov	r0, r6
   30718:	e58de00c 	str	lr, [sp, #12]
   3071c:	ebfffc99 	bl	2f988 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>
   30720:	e3a020c8 	mov	r2, #200	; 0xc8
   30724:	e28d10f0 	add	r1, sp, #240	; 0xf0
   30728:	e59d000c 	ldr	r0, [sp, #12]
   3072c:	ebfff5a0 	bl	2ddb4 <strlcpy>
   30730:	e3a020c8 	mov	r2, #200	; 0xc8
   30734:	e59f1128 	ldr	r1, [pc, #296]	; 30864 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2c0>
   30738:	e59d000c 	ldr	r0, [sp, #12]
   3073c:	ebfff5b8 	bl	2de24 <strlcat>
   30740:	e1a00004 	mov	r0, r4
   30744:	ebffe5f4 	bl	29f1c <strlen>
   30748:	e3500000 	cmp	r0, #0
   3074c:	0affffa1 	beq	305d8 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   30750:	e1a03004 	mov	r3, r4
   30754:	e1a01009 	mov	r1, r9
   30758:	e1a00006 	mov	r0, r6
   3075c:	e59d200c 	ldr	r2, [sp, #12]
   30760:	ebfffdbc 	bl	2fe58 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>
   30764:	eaffff9b 	b	305d8 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   30768:	e1a01005 	mov	r1, r5
   3076c:	e1a00006 	mov	r0, r6
   30770:	ebfffe01 	bl	2ff7c <CommandHandler::handleFileStart(char const*)>
   30774:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   30778:	e28dd0b4 	add	sp, sp, #180	; 0xb4
   3077c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30780:	e1a03007 	mov	r3, r7
   30784:	e1a02008 	mov	r2, r8
   30788:	e1a01005 	mov	r1, r5
   3078c:	e1a00006 	mov	r0, r6
   30790:	ebfffe40 	bl	30098 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)>
   30794:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   30798:	e28dd0b4 	add	sp, sp, #180	; 0xb4
   3079c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   307a0:	e59f00b8 	ldr	r0, [pc, #184]	; 30860 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2bc>
   307a4:	e28d9e99 	add	r9, sp, #2448	; 0x990
   307a8:	e28dc028 	add	ip, sp, #40	; 0x28
   307ac:	e1a03007 	mov	r3, r7
   307b0:	e1a02008 	mov	r2, r8
   307b4:	e1a01005 	mov	r1, r5
   307b8:	e58d0004 	str	r0, [sp, #4]
   307bc:	e58d9000 	str	r9, [sp]
   307c0:	e1a00006 	mov	r0, r6
   307c4:	e58dc00c 	str	ip, [sp, #12]
   307c8:	e5cd4990 	strb	r4, [sp, #2448]	; 0x990
   307cc:	ebfffc6d 	bl	2f988 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>
   307d0:	e3a020c8 	mov	r2, #200	; 0xc8
   307d4:	e28d10f0 	add	r1, sp, #240	; 0xf0
   307d8:	e59d000c 	ldr	r0, [sp, #12]
   307dc:	ebfff574 	bl	2ddb4 <strlcpy>
   307e0:	e3a020c8 	mov	r2, #200	; 0xc8
   307e4:	e59f1078 	ldr	r1, [pc, #120]	; 30864 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2c0>
   307e8:	e59d000c 	ldr	r0, [sp, #12]
   307ec:	ebfff58c 	bl	2de24 <strlcat>
   307f0:	e1a00009 	mov	r0, r9
   307f4:	ebffe5c8 	bl	29f1c <strlen>
   307f8:	e3500000 	cmp	r0, #0
   307fc:	0affff75 	beq	305d8 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   30800:	e1a03004 	mov	r3, r4
   30804:	e1a02009 	mov	r2, r9
   30808:	e1a00006 	mov	r0, r6
   3080c:	e59d100c 	ldr	r1, [sp, #12]
   30810:	e58d4004 	str	r4, [sp, #4]
   30814:	e58d4000 	str	r4, [sp]
   30818:	ebfffd15 	bl	2fc74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   3081c:	eaffff6d 	b	305d8 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   30820:	e3a0200a 	mov	r2, #10
   30824:	e28d0014 	add	r0, sp, #20
   30828:	ebffe6e3 	bl	2a3bc <strtoul>
   3082c:	e59f3034 	ldr	r3, [pc, #52]	; 30868 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2c4>
   30830:	e1a01000 	mov	r1, r0
   30834:	e59f2030 	ldr	r2, [pc, #48]	; 3086c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2c8>
   30838:	e1a00006 	mov	r0, r6
   3083c:	ebfffd85 	bl	2fe58 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>
   30840:	eaffff64 	b	305d8 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   30844:	0003e8f0 	.word	0x0003e8f0
   30848:	00045f14 	.word	0x00045f14
   3084c:	00045f1c 	.word	0x00045f1c
   30850:	00045f24 	.word	0x00045f24
   30854:	00045f2c 	.word	0x00045f2c
   30858:	00045cd0 	.word	0x00045cd0
   3085c:	00045f34 	.word	0x00045f34
   30860:	00004e20 	.word	0x00004e20
   30864:	00045f54 	.word	0x00045f54
   30868:	00045f3c 	.word	0x00045f3c
   3086c:	00045f48 	.word	0x00045f48

00030870 <CommandHandler::hdlcFrameRx(unsigned char const*, unsigned int)>:
   30870:	e92d4070 	push	{r4, r5, r6, lr}
   30874:	e24dde7d 	sub	sp, sp, #2000	; 0x7d0
   30878:	e24dd008 	sub	sp, sp, #8
   3087c:	e3520e7d 	cmp	r2, #2000	; 0x7d0
   30880:	e1a04002 	mov	r4, r2
   30884:	e1a06000 	mov	r6, r0
   30888:	83a02e7d 	movhi	r2, #2000	; 0x7d0
   3088c:	92822001 	addls	r2, r2, #1
   30890:	e28d0004 	add	r0, sp, #4
   30894:	e1a05001 	mov	r5, r1
   30898:	ebfff545 	bl	2ddb4 <strlcpy>
   3089c:	e28d0004 	add	r0, sp, #4
   308a0:	ebffe59d 	bl	29f1c <strlen>
   308a4:	e2444001 	sub	r4, r4, #1
   308a8:	e2802001 	add	r2, r0, #1
   308ac:	e0443000 	sub	r3, r4, r0
   308b0:	e28d1004 	add	r1, sp, #4
   308b4:	e1a00006 	mov	r0, r6
   308b8:	e0852002 	add	r2, r5, r2
   308bc:	ebffff38 	bl	305a4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)>
   308c0:	e28dde7d 	add	sp, sp, #2000	; 0x7d0
   308c4:	e28dd008 	add	sp, sp, #8
   308c8:	e8bd8070 	pop	{r4, r5, r6, pc}

000308cc <CommandHandler::hdlcFrameRxStatic(unsigned char const*, unsigned int)>:
   308cc:	e59f3018 	ldr	r3, [pc, #24]	; 308ec <CommandHandler::hdlcFrameRxStatic(unsigned char const*, unsigned int)+0x20>
   308d0:	e1a02001 	mov	r2, r1
   308d4:	e5933000 	ldr	r3, [r3]
   308d8:	e3530000 	cmp	r3, #0
   308dc:	012fff1e 	bxeq	lr
   308e0:	e1a01000 	mov	r1, r0
   308e4:	e1a00003 	mov	r0, r3
   308e8:	eaffffe0 	b	30870 <CommandHandler::hdlcFrameRx(unsigned char const*, unsigned int)>
   308ec:	0004db74 	.word	0x0004db74

000308f0 <CommandHandler::logDebugJson(char const*)>:
   308f0:	e3a03000 	mov	r3, #0
   308f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   308f8:	e24dd00c 	sub	sp, sp, #12
   308fc:	e1a02001 	mov	r2, r1
   30900:	e58d3004 	str	r3, [sp, #4]
   30904:	e59f100c 	ldr	r1, [pc, #12]	; 30918 <CommandHandler::logDebugJson(char const*)+0x28>
   30908:	e58d3000 	str	r3, [sp]
   3090c:	ebfffcd8 	bl	2fc74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30910:	e28dd00c 	add	sp, sp, #12
   30914:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   30918:	00045d38 	.word	0x00045d38

0003091c <CommandHandler::logDebug(char const*, char const*, char const*)>:
   3091c:	e92d4030 	push	{r4, r5, lr}
   30920:	e1a05001 	mov	r5, r1
   30924:	e24ddd9e 	sub	sp, sp, #10112	; 0x2780
   30928:	e24dd004 	sub	sp, sp, #4
   3092c:	e1a00003 	mov	r0, r3
   30930:	e1a04002 	mov	r4, r2
   30934:	e28d106c 	add	r1, sp, #108	; 0x6c
   30938:	e59f2108 	ldr	r2, [pc, #264]	; 30a48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x12c>
   3093c:	ebfff66e 	bl	2e2fc <jsonEscape>
   30940:	e28d0d4f 	add	r0, sp, #5056	; 0x13c0
   30944:	e59f20fc 	ldr	r2, [pc, #252]	; 30a48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x12c>
   30948:	e59f10fc 	ldr	r1, [pc, #252]	; 30a4c <CommandHandler::logDebug(char const*, char const*, char const*)+0x130>
   3094c:	e2800034 	add	r0, r0, #52	; 0x34
   30950:	ebfff517 	bl	2ddb4 <strlcpy>
   30954:	e28d0d4f 	add	r0, sp, #5056	; 0x13c0
   30958:	e59f20e8 	ldr	r2, [pc, #232]	; 30a48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x12c>
   3095c:	e28d106c 	add	r1, sp, #108	; 0x6c
   30960:	e2800034 	add	r0, r0, #52	; 0x34
   30964:	ebfff52e 	bl	2de24 <strlcat>
   30968:	e28d0d4f 	add	r0, sp, #5056	; 0x13c0
   3096c:	e59f20d4 	ldr	r2, [pc, #212]	; 30a48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x12c>
   30970:	e59f10d8 	ldr	r1, [pc, #216]	; 30a50 <CommandHandler::logDebug(char const*, char const*, char const*)+0x134>
   30974:	e2800034 	add	r0, r0, #52	; 0x34
   30978:	ebfff529 	bl	2de24 <strlcat>
   3097c:	e28d0d4f 	add	r0, sp, #5056	; 0x13c0
   30980:	e59f20c0 	ldr	r2, [pc, #192]	; 30a48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x12c>
   30984:	e59f10c8 	ldr	r1, [pc, #200]	; 30a54 <CommandHandler::logDebug(char const*, char const*, char const*)+0x138>
   30988:	e2800034 	add	r0, r0, #52	; 0x34
   3098c:	ebfff524 	bl	2de24 <strlcat>
   30990:	e28d0d4f 	add	r0, sp, #5056	; 0x13c0
   30994:	e1a01005 	mov	r1, r5
   30998:	e59f20a8 	ldr	r2, [pc, #168]	; 30a48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x12c>
   3099c:	e2800034 	add	r0, r0, #52	; 0x34
   309a0:	ebfff51f 	bl	2de24 <strlcat>
   309a4:	e28d0d4f 	add	r0, sp, #5056	; 0x13c0
   309a8:	e59f2098 	ldr	r2, [pc, #152]	; 30a48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x12c>
   309ac:	e59f109c 	ldr	r1, [pc, #156]	; 30a50 <CommandHandler::logDebug(char const*, char const*, char const*)+0x134>
   309b0:	e2800034 	add	r0, r0, #52	; 0x34
   309b4:	ebfff51a 	bl	2de24 <strlcat>
   309b8:	e28d0d4f 	add	r0, sp, #5056	; 0x13c0
   309bc:	e59f2084 	ldr	r2, [pc, #132]	; 30a48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x12c>
   309c0:	e59f1090 	ldr	r1, [pc, #144]	; 30a58 <CommandHandler::logDebug(char const*, char const*, char const*)+0x13c>
   309c4:	e2800034 	add	r0, r0, #52	; 0x34
   309c8:	ebfff515 	bl	2de24 <strlcat>
   309cc:	ebfff4be 	bl	2dccc <micros>
   309d0:	e3a01064 	mov	r1, #100	; 0x64
   309d4:	e1a03000 	mov	r3, r0
   309d8:	e59f207c 	ldr	r2, [pc, #124]	; 30a5c <CommandHandler::logDebug(char const*, char const*, char const*)+0x140>
   309dc:	e58d4000 	str	r4, [sp]
   309e0:	e28d0008 	add	r0, sp, #8
   309e4:	ebfff55e 	bl	2df64 <snprintf>
   309e8:	e28d0d4f 	add	r0, sp, #5056	; 0x13c0
   309ec:	e59f2054 	ldr	r2, [pc, #84]	; 30a48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x12c>
   309f0:	e28d1008 	add	r1, sp, #8
   309f4:	e2800034 	add	r0, r0, #52	; 0x34
   309f8:	ebfff509 	bl	2de24 <strlcat>
   309fc:	e28d0d4f 	add	r0, sp, #5056	; 0x13c0
   30a00:	e59f2040 	ldr	r2, [pc, #64]	; 30a48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x12c>
   30a04:	e59f1054 	ldr	r1, [pc, #84]	; 30a60 <CommandHandler::logDebug(char const*, char const*, char const*)+0x144>
   30a08:	e2800034 	add	r0, r0, #52	; 0x34
   30a0c:	ebfff504 	bl	2de24 <strlcat>
   30a10:	e59f304c 	ldr	r3, [pc, #76]	; 30a64 <CommandHandler::logDebug(char const*, char const*, char const*)+0x148>
   30a14:	e5930000 	ldr	r0, [r3]
   30a18:	e3500000 	cmp	r0, #0
   30a1c:	0a000006 	beq	30a3c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30a20:	e3a03000 	mov	r3, #0
   30a24:	e28d2d4f 	add	r2, sp, #5056	; 0x13c0
   30a28:	e59f1038 	ldr	r1, [pc, #56]	; 30a68 <CommandHandler::logDebug(char const*, char const*, char const*)+0x14c>
   30a2c:	e2822034 	add	r2, r2, #52	; 0x34
   30a30:	e58d3004 	str	r3, [sp, #4]
   30a34:	e58d3000 	str	r3, [sp]
   30a38:	ebfffc8d 	bl	2fc74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30a3c:	e28ddd9e 	add	sp, sp, #10112	; 0x2780
   30a40:	e28dd004 	add	sp, sp, #4
   30a44:	e8bd8030 	pop	{r4, r5, pc}
   30a48:	00001388 	.word	0x00001388
   30a4c:	00045d30 	.word	0x00045d30
   30a50:	00045f5c 	.word	0x00045f5c
   30a54:	00045f60 	.word	0x00045f60
   30a58:	00045f68 	.word	0x00045f68
   30a5c:	00045f70 	.word	0x00045f70
   30a60:	00046864 	.word	0x00046864
   30a64:	0004db74 	.word	0x0004db74
   30a68:	00045d38 	.word	0x00045d38

00030a6c <CommandHandler::service()>:
   30a6c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   30a70:	e2804a05 	add	r4, r0, #20480	; 0x5000
   30a74:	e5942870 	ldr	r2, [r4, #2160]	; 0x870
   30a78:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
   30a7c:	e24dd084 	sub	sp, sp, #132	; 0x84
   30a80:	e1520003 	cmp	r2, r3
   30a84:	0a000016 	beq	30ae4 <CommandHandler::service()+0x78>
   30a88:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
   30a8c:	e5942874 	ldr	r2, [r4, #2164]	; 0x874
   30a90:	e0803003 	add	r3, r0, r3
   30a94:	e2822001 	add	r2, r2, #1
   30a98:	e2833b16 	add	r3, r3, #22528	; 0x5800
   30a9c:	e5d3307c 	ldrb	r3, [r3, #124]	; 0x7c
   30aa0:	e5842874 	str	r2, [r4, #2164]	; 0x874
   30aa4:	e5941874 	ldr	r1, [r4, #2164]	; 0x874
   30aa8:	e5942878 	ldr	r2, [r4, #2168]	; 0x878
   30aac:	e1a05000 	mov	r5, r0
   30ab0:	e1510002 	cmp	r1, r2
   30ab4:	23a02000 	movcs	r2, #0
   30ab8:	e3a01064 	mov	r1, #100	; 0x64
   30abc:	25842874 	strcs	r2, [r4, #2164]	; 0x874
   30ac0:	e28d001c 	add	r0, sp, #28
   30ac4:	e59f20ac 	ldr	r2, [pc, #172]	; 30b78 <CommandHandler::service()+0x10c>
   30ac8:	ebfff525 	bl	2df64 <snprintf>
   30acc:	e28d001c 	add	r0, sp, #28
   30ad0:	ebffe511 	bl	29f1c <strlen>
   30ad4:	e28d101c 	add	r1, sp, #28
   30ad8:	e2802001 	add	r2, r0, #1
   30adc:	e2850f65 	add	r0, r5, #404	; 0x194
   30ae0:	ebfffaf3 	bl	2f6b4 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>
   30ae4:	e5943860 	ldr	r3, [r4, #2144]	; 0x860
   30ae8:	e3530000 	cmp	r3, #0
   30aec:	0a000006 	beq	30b0c <CommandHandler::service()+0xa0>
   30af0:	e59f5084 	ldr	r5, [pc, #132]	; 30b7c <CommandHandler::service()+0x110>
   30af4:	ebfff475 	bl	2dcd0 <millis>
   30af8:	e1a02005 	mov	r2, r5
   30afc:	e59418b0 	ldr	r1, [r4, #2224]	; 0x8b0
   30b00:	ebfff48f 	bl	2dd44 <isTimeout>
   30b04:	e3500000 	cmp	r0, #0
   30b08:	1a000001 	bne	30b14 <CommandHandler::service()+0xa8>
   30b0c:	e28dd084 	add	sp, sp, #132	; 0x84
   30b10:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30b14:	ebffd7c2 	bl	26a24 <CLogger::Get()>
   30b18:	e594986c 	ldr	r9, [r4, #2156]	; 0x86c
   30b1c:	e1a06000 	mov	r6, r0
   30b20:	e5947868 	ldr	r7, [r4, #2152]	; 0x868
   30b24:	e59488b0 	ldr	r8, [r4, #2224]	; 0x8b0
   30b28:	ebfff468 	bl	2dcd0 <millis>
   30b2c:	e1a03000 	mov	r3, r0
   30b30:	e3a02004 	mov	r2, #4
   30b34:	e1a00006 	mov	r0, r6
   30b38:	e58d300c 	str	r3, [sp, #12]
   30b3c:	e98d0180 	stmib	sp, {r7, r8}
   30b40:	e59f3038 	ldr	r3, [pc, #56]	; 30b80 <CommandHandler::service()+0x114>
   30b44:	e59f1038 	ldr	r1, [pc, #56]	; 30b84 <CommandHandler::service()+0x118>
   30b48:	e58d9000 	str	r9, [sp]
   30b4c:	e58d5010 	str	r5, [sp, #16]
   30b50:	ebffd6f5 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30b54:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30b58:	e3500000 	cmp	r0, #0
   30b5c:	0a000000 	beq	30b64 <CommandHandler::service()+0xf8>
   30b60:	ebffe8db 	bl	2aed4 <operator delete[](void*)>
   30b64:	e3a03000 	mov	r3, #0
   30b68:	e5843860 	str	r3, [r4, #2144]	; 0x860
   30b6c:	e5843864 	str	r3, [r4, #2148]	; 0x864
   30b70:	e28dd084 	add	sp, sp, #132	; 0x84
   30b74:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30b78:	00045f78 	.word	0x00045f78
   30b7c:	00000bb8 	.word	0x00000bb8
   30b80:	00045f98 	.word	0x00045f98
   30b84:	00045ff4 	.word	0x00045ff4

00030b88 <CommandHandler::fileReceiveCleardown()>:
   30b88:	e92d4010 	push	{r4, lr}
   30b8c:	e2804a05 	add	r4, r0, #20480	; 0x5000
   30b90:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30b94:	e3500000 	cmp	r0, #0
   30b98:	0a000000 	beq	30ba0 <CommandHandler::fileReceiveCleardown()+0x18>
   30b9c:	ebffe8cc 	bl	2aed4 <operator delete[](void*)>
   30ba0:	e3a03000 	mov	r3, #0
   30ba4:	e5843860 	str	r3, [r4, #2144]	; 0x860
   30ba8:	e5843864 	str	r3, [r4, #2148]	; 0x864
   30bac:	e8bd8010 	pop	{r4, pc}

00030bb0 <CommandHandler::~CommandHandler()>:
   30bb0:	e92d4010 	push	{r4, lr}
   30bb4:	e1a04000 	mov	r4, r0
   30bb8:	e2800f65 	add	r0, r0, #404	; 0x194
   30bbc:	ebfff839 	bl	2eca8 <MiniHDLC::~MiniHDLC()>
   30bc0:	e1a00004 	mov	r0, r4
   30bc4:	e8bd8010 	pop	{r4, pc}

00030bc8 <CommsManager::handleRxMsg(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   30bc8:	e3a00000 	mov	r0, #0
   30bcc:	e12fff1e 	bx	lr

00030bd0 <CommsManager::serialTxAvailable()>:
   30bd0:	e59f3014 	ldr	r3, [pc, #20]	; 30bec <CommsManager::serialTxAvailable()+0x1c>
   30bd4:	e5933000 	ldr	r3, [r3]
   30bd8:	e2833a07 	add	r3, r3, #28672	; 0x7000
   30bdc:	e593080c 	ldr	r0, [r3, #2060]	; 0x80c
   30be0:	e3500000 	cmp	r0, #0
   30be4:	012fff1e 	bxeq	lr
   30be8:	eafff255 	b	2d544 <CUartMaxiSerialDevice::AvailableForWrite()>
   30bec:	0004db80 	.word	0x0004db80

00030bf0 <CommsManager::registerPendingOTA(unsigned char const*, unsigned int)>:
   30bf0:	e92d4030 	push	{r4, r5, lr}
   30bf4:	e1a04000 	mov	r4, r0
   30bf8:	e1a05001 	mov	r5, r1
   30bfc:	e24dd014 	sub	sp, sp, #20
   30c00:	ebffd787 	bl	26a24 <CLogger::Get()>
   30c04:	e0843005 	add	r3, r4, r5
   30c08:	e5531001 	ldrb	r1, [r3, #-1]
   30c0c:	e5d42010 	ldrb	r2, [r4, #16]
   30c10:	e5d43000 	ldrb	r3, [r4]
   30c14:	e58d100c 	str	r1, [sp, #12]
   30c18:	e58d2008 	str	r2, [sp, #8]
   30c1c:	e59f1030 	ldr	r1, [pc, #48]	; 30c54 <CommsManager::registerPendingOTA(unsigned char const*, unsigned int)+0x64>
   30c20:	e3a02004 	mov	r2, #4
   30c24:	e58d3004 	str	r3, [sp, #4]
   30c28:	e58d5000 	str	r5, [sp]
   30c2c:	e59f3024 	ldr	r3, [pc, #36]	; 30c58 <CommsManager::registerPendingOTA(unsigned char const*, unsigned int)+0x68>
   30c30:	ebffd6bd 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30c34:	e59f0020 	ldr	r0, [pc, #32]	; 30c5c <CommsManager::registerPendingOTA(unsigned char const*, unsigned int)+0x6c>
   30c38:	ebfff42b 	bl	2dcec <microsDelay>
   30c3c:	e1a00004 	mov	r0, r4
   30c40:	e1a01005 	mov	r1, r5
   30c44:	ebffe793 	bl	2aa98 <EnableChainBoot>
   30c48:	e3a00001 	mov	r0, #1
   30c4c:	e28dd014 	add	sp, sp, #20
   30c50:	e8bd8030 	pop	{r4, r5, pc}
   30c54:	00046040 	.word	0x00046040
   30c58:	00046004 	.word	0x00046004
   30c5c:	000186a0 	.word	0x000186a0

00030c60 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)>:
   30c60:	e92d4070 	push	{r4, r5, r6, lr}
   30c64:	e1a04000 	mov	r4, r0
   30c68:	e24dd008 	sub	sp, sp, #8
   30c6c:	e1a06001 	mov	r6, r1
   30c70:	e1a05002 	mov	r5, r2
   30c74:	ebfffae9 	bl	2f820 <CommandHandler::CommandHandler()>
   30c78:	e3a00000 	mov	r0, #0
   30c7c:	e2843a07 	add	r3, r4, #28672	; 0x7000
   30c80:	e583680c 	str	r6, [r3, #2060]	; 0x80c
   30c84:	e5835810 	str	r5, [r3, #2064]	; 0x810
   30c88:	e5830818 	str	r0, [r3, #2072]	; 0x818
   30c8c:	e5830814 	str	r0, [r3, #2068]	; 0x814
   30c90:	e59f2044 	ldr	r2, [pc, #68]	; 30cdc <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x7c>
   30c94:	e59fc044 	ldr	ip, [pc, #68]	; 30ce0 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x80>
   30c98:	e59f3044 	ldr	r3, [pc, #68]	; 30ce4 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x84>
   30c9c:	e58d0004 	str	r0, [sp, #4]
   30ca0:	e58d2000 	str	r2, [sp]
   30ca4:	e59fe03c 	ldr	lr, [pc, #60]	; 30ce8 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x88>
   30ca8:	e58c3000 	str	r3, [ip]
   30cac:	e59f2038 	ldr	r2, [pc, #56]	; 30cec <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x8c>
   30cb0:	e59fc038 	ldr	ip, [pc, #56]	; 30cf0 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x90>
   30cb4:	e1a01004 	mov	r1, r4
   30cb8:	e582c000 	str	ip, [r2]
   30cbc:	e1a00004 	mov	r0, r4
   30cc0:	e3a02001 	mov	r2, #1
   30cc4:	e59f3028 	ldr	r3, [pc, #40]	; 30cf4 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x94>
   30cc8:	e58e4000 	str	r4, [lr]
   30ccc:	ebfffb02 	bl	2f8dc <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   30cd0:	e1a00004 	mov	r0, r4
   30cd4:	e28dd008 	add	sp, sp, #8
   30cd8:	e8bd8070 	pop	{r4, r5, r6, pc}
   30cdc:	00030bf0 	.word	0x00030bf0
   30ce0:	0004db78 	.word	0x0004db78
   30ce4:	00030dc8 	.word	0x00030dc8
   30ce8:	0004db80 	.word	0x0004db80
   30cec:	0004db7c 	.word	0x0004db7c
   30cf0:	00030bd0 	.word	0x00030bd0
   30cf4:	00030bc8 	.word	0x00030bc8

00030cf8 <CommsManager::~CommsManager()>:
   30cf8:	e92d4010 	push	{r4, lr}
   30cfc:	e1a04000 	mov	r4, r0
   30d00:	ebffffaa 	bl	30bb0 <CommandHandler::~CommandHandler()>
   30d04:	e1a00004 	mov	r0, r4
   30d08:	e8bd8010 	pop	{r4, pc}

00030d0c <CommsManager::setup()>:
   30d0c:	e3a00001 	mov	r0, #1
   30d10:	e12fff1e 	bx	lr

00030d14 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)>:
   30d14:	e92d4010 	push	{r4, lr}
   30d18:	e1a04001 	mov	r4, r1
   30d1c:	e24dd008 	sub	sp, sp, #8
   30d20:	ebffd73f 	bl	26a24 <CLogger::Get()>
   30d24:	e59fc048 	ldr	ip, [pc, #72]	; 30d74 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x60>
   30d28:	e5d4e000 	ldrb	lr, [r4]
   30d2c:	e5d42001 	ldrb	r2, [r4, #1]
   30d30:	e59c3004 	ldr	r3, [ip, #4]
   30d34:	e082240e 	add	r2, r2, lr, lsl #8
   30d38:	e58d2004 	str	r2, [sp, #4]
   30d3c:	e2832001 	add	r2, r3, #1
   30d40:	e58c2004 	str	r2, [ip, #4]
   30d44:	e59f102c 	ldr	r1, [pc, #44]	; 30d78 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x64>
   30d48:	e3a02003 	mov	r2, #3
   30d4c:	e58d3000 	str	r3, [sp]
   30d50:	e59f3024 	ldr	r3, [pc, #36]	; 30d7c <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x68>
   30d54:	ebffd674 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30d58:	ebffd731 	bl	26a24 <CLogger::Get()>
   30d5c:	e3a02003 	mov	r2, #3
   30d60:	e59f1010 	ldr	r1, [pc, #16]	; 30d78 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x64>
   30d64:	e59f3014 	ldr	r3, [pc, #20]	; 30d80 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x6c>
   30d68:	e28dd008 	add	sp, sp, #8
   30d6c:	e8bd4010 	pop	{r4, lr}
   30d70:	eaffd66d 	b	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30d74:	0004db80 	.word	0x0004db80
   30d78:	00046040 	.word	0x00046040
   30d7c:	00046050 	.word	0x00046050
   30d80:	00046064 	.word	0x00046064

00030d84 <CommsManager::hdlcFrameRxCBStatic(unsigned char const*, unsigned int)>:
   30d84:	e59f300c 	ldr	r3, [pc, #12]	; 30d98 <CommsManager::hdlcFrameRxCBStatic(unsigned char const*, unsigned int)+0x14>
   30d88:	e1a02001 	mov	r2, r1
   30d8c:	e1a01000 	mov	r1, r0
   30d90:	e5930000 	ldr	r0, [r3]
   30d94:	eaffffde 	b	30d14 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)>
   30d98:	0004db80 	.word	0x0004db80

00030d9c <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)>:
   30d9c:	e59f3020 	ldr	r3, [pc, #32]	; 30dc4 <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)+0x28>
   30da0:	e1a0c000 	mov	ip, r0
   30da4:	e5933000 	ldr	r3, [r3]
   30da8:	e1a02001 	mov	r2, r1
   30dac:	e2833a07 	add	r3, r3, #28672	; 0x7000
   30db0:	e593080c 	ldr	r0, [r3, #2060]	; 0x80c
   30db4:	e3500000 	cmp	r0, #0
   30db8:	012fff1e 	bxeq	lr
   30dbc:	e1a0100c 	mov	r1, ip
   30dc0:	eafff21b 	b	2d634 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>
   30dc4:	0004db80 	.word	0x0004db80

00030dc8 <CommsManager::serialPutStr(unsigned char const*, unsigned int)>:
   30dc8:	eafffff3 	b	30d9c <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)>

00030dcc <CommsManager::hdlcFrameTxCB(unsigned char const*, unsigned int)>:
   30dcc:	e2800a07 	add	r0, r0, #28672	; 0x7000
   30dd0:	e590080c 	ldr	r0, [r0, #2060]	; 0x80c
   30dd4:	e3500000 	cmp	r0, #0
   30dd8:	012fff1e 	bxeq	lr
   30ddc:	eafff214 	b	2d634 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>

00030de0 <CommsManager::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>:
   30de0:	eafffba3 	b	2fc74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>

00030de4 <CommsManager::serviceGetFromSerial()>:
   30de4:	e92d4010 	push	{r4, lr}
   30de8:	e2803a07 	add	r3, r0, #28672	; 0x7000
   30dec:	e1a04000 	mov	r4, r0
   30df0:	e593080c 	ldr	r0, [r3, #2060]	; 0x80c
   30df4:	e24ddffa 	sub	sp, sp, #1000	; 0x3e8
   30df8:	e3500000 	cmp	r0, #0
   30dfc:	0a000004 	beq	30e14 <CommsManager::serviceGetFromSerial()+0x30>
   30e00:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   30e04:	e1a0100d 	mov	r1, sp
   30e08:	ebfff268 	bl	2d7b0 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)>
   30e0c:	e2502000 	subs	r2, r0, #0
   30e10:	ca000001 	bgt	30e1c <CommsManager::serviceGetFromSerial()+0x38>
   30e14:	e28ddffa 	add	sp, sp, #1000	; 0x3e8
   30e18:	e8bd8010 	pop	{r4, pc}
   30e1c:	e1a0100d 	mov	r1, sp
   30e20:	e1a00004 	mov	r0, r4
   30e24:	ebfffac5 	bl	2f940 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)>
   30e28:	e28ddffa 	add	sp, sp, #1000	; 0x3e8
   30e2c:	e8bd8010 	pop	{r4, pc}

00030e30 <CommsManager::service()>:
   30e30:	e92d4010 	push	{r4, lr}
   30e34:	e1a04000 	mov	r4, r0
   30e38:	ebffff0b 	bl	30a6c <CommandHandler::service()>
   30e3c:	e1a00004 	mov	r0, r4
   30e40:	e8bd4010 	pop	{r4, lr}
   30e44:	eaffffe6 	b	30de4 <CommsManager::serviceGetFromSerial()>

00030e48 <BusAccess::busActionCheck() [clone .part.0]>:
   30e48:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   30e4c:	e35c0000 	cmp	ip, #0
   30e50:	d12fff1e 	bxle	lr
   30e54:	e92d4010 	push	{r4, lr}
   30e58:	e3a03000 	mov	r3, #0
   30e5c:	e1a04000 	mov	r4, r0
   30e60:	e5d01004 	ldrb	r1, [r0, #4]
   30e64:	e0832103 	add	r2, r3, r3, lsl #2
   30e68:	e0832082 	add	r2, r3, r2, lsl #1
   30e6c:	e3510000 	cmp	r1, #0
   30e70:	e0842102 	add	r2, r4, r2, lsl #2
   30e74:	e280002c 	add	r0, r0, #44	; 0x2c
   30e78:	0a00000c 	beq	30eb0 <BusAccess::busActionCheck() [clone .part.0]+0x68>
   30e7c:	e5d2e02c 	ldrb	lr, [r2, #44]	; 0x2c
   30e80:	e1a01103 	lsl	r1, r3, #2
   30e84:	e35e0000 	cmp	lr, #0
   30e88:	1a00000c 	bne	30ec0 <BusAccess::busActionCheck() [clone .part.0]+0x78>
   30e8c:	e5d2e016 	ldrb	lr, [r2, #22]
   30e90:	e35e0000 	cmp	lr, #0
   30e94:	1a000009 	bne	30ec0 <BusAccess::busActionCheck() [clone .part.0]+0x78>
   30e98:	e5d2e01c 	ldrb	lr, [r2, #28]
   30e9c:	e35e0000 	cmp	lr, #0
   30ea0:	1a000006 	bne	30ec0 <BusAccess::busActionCheck() [clone .part.0]+0x78>
   30ea4:	e5d22024 	ldrb	r2, [r2, #36]	; 0x24
   30ea8:	e3520000 	cmp	r2, #0
   30eac:	1a000003 	bne	30ec0 <BusAccess::busActionCheck() [clone .part.0]+0x78>
   30eb0:	e2833001 	add	r3, r3, #1
   30eb4:	e153000c 	cmp	r3, ip
   30eb8:	1affffe8 	bne	30e60 <BusAccess::busActionCheck() [clone .part.0]+0x18>
   30ebc:	e8bd8010 	pop	{r4, pc}
   30ec0:	e0812003 	add	r2, r1, r3
   30ec4:	e0832082 	add	r2, r3, r2, lsl #1
   30ec8:	e0842102 	add	r2, r4, r2, lsl #2
   30ecc:	e58431d4 	str	r3, [r4, #468]	; 0x1d4
   30ed0:	e5d2302c 	ldrb	r3, [r2, #44]	; 0x2c
   30ed4:	e3530000 	cmp	r3, #0
   30ed8:	1a000011 	bne	30f24 <BusAccess::busActionCheck() [clone .part.0]+0xdc>
   30edc:	e5d23016 	ldrb	r3, [r2, #22]
   30ee0:	e3530000 	cmp	r3, #0
   30ee4:	13a03001 	movne	r3, #1
   30ee8:	1a000007 	bne	30f0c <BusAccess::busActionCheck() [clone .part.0]+0xc4>
   30eec:	e5d2301c 	ldrb	r3, [r2, #28]
   30ef0:	e3530000 	cmp	r3, #0
   30ef4:	13a03002 	movne	r3, #2
   30ef8:	1a000003 	bne	30f0c <BusAccess::busActionCheck() [clone .part.0]+0xc4>
   30efc:	e5d23024 	ldrb	r3, [r2, #36]	; 0x24
   30f00:	e3530000 	cmp	r3, #0
   30f04:	03a03000 	moveq	r3, #0
   30f08:	13a03003 	movne	r3, #3
   30f0c:	e3a02001 	mov	r2, #1
   30f10:	e5c431d8 	strb	r3, [r4, #472]	; 0x1d8
   30f14:	e5c421f0 	strb	r2, [r4, #496]	; 0x1f0
   30f18:	ebfff36b 	bl	2dccc <micros>
   30f1c:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
   30f20:	e8bd8010 	pop	{r4, pc}
   30f24:	e3a03004 	mov	r3, #4
   30f28:	eafffff7 	b	30f0c <BusAccess::busActionCheck() [clone .part.0]+0xc4>

00030f2c <BusAccess::busActionHandleStart() [clone .part.0]>:
   30f2c:	e92d4070 	push	{r4, r5, r6, lr}
   30f30:	e3a02001 	mov	r2, #1
   30f34:	e5d011d8 	ldrb	r1, [r0, #472]	; 0x1d8
   30f38:	e1a04000 	mov	r4, r0
   30f3c:	eb0007c6 	bl	32e5c <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   30f40:	ebfff361 	bl	2dccc <micros>
   30f44:	e58401e0 	str	r0, [r4, #480]	; 0x1e0
   30f48:	e59461d4 	ldr	r6, [r4, #468]	; 0x1d4
   30f4c:	e5d451d8 	ldrb	r5, [r4, #472]	; 0x1d8
   30f50:	e1a00004 	mov	r0, r4
   30f54:	e6ef5075 	uxtb	r5, r5
   30f58:	eb0006ff 	bl	32b5c <BusAccess::clockCurFreqHz()>
   30f5c:	e3550004 	cmp	r5, #4
   30f60:	0a00001b 	beq	30fd4 <BusAccess::busActionHandleStart() [clone .part.0]+0xa8>
   30f64:	e3550001 	cmp	r5, #1
   30f68:	0a000009 	beq	30f94 <BusAccess::busActionHandleStart() [clone .part.0]+0x68>
   30f6c:	e3550002 	cmp	r5, #2
   30f70:	0a000026 	beq	31010 <BusAccess::busActionHandleStart() [clone .part.0]+0xe4>
   30f74:	e3550003 	cmp	r5, #3
   30f78:	13a00000 	movne	r0, #0
   30f7c:	0a00001b 	beq	30ff0 <BusAccess::busActionHandleStart() [clone .part.0]+0xc4>
   30f80:	e3a03002 	mov	r3, #2
   30f84:	e58401e4 	str	r0, [r4, #484]	; 0x1e4
   30f88:	e3a00001 	mov	r0, #1
   30f8c:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   30f90:	e8bd8070 	pop	{r4, r5, r6, pc}
   30f94:	e0863106 	add	r3, r6, r6, lsl #2
   30f98:	e0866083 	add	r6, r6, r3, lsl #1
   30f9c:	e0846106 	add	r6, r4, r6, lsl #2
   30fa0:	e5963018 	ldr	r3, [r6, #24]
   30fa4:	e3530000 	cmp	r3, #0
   30fa8:	0a00000e 	beq	30fe8 <BusAccess::busActionHandleStart() [clone .part.0]+0xbc>
   30fac:	e0632283 	rsb	r2, r3, r3, lsl #5
   30fb0:	e0622302 	rsb	r2, r2, r2, lsl #6
   30fb4:	e0833182 	add	r3, r3, r2, lsl #3
   30fb8:	e1a03303 	lsl	r3, r3, #6
   30fbc:	e1500003 	cmp	r0, r3
   30fc0:	8a000006 	bhi	30fe0 <BusAccess::busActionHandleStart() [clone .part.0]+0xb4>
   30fc4:	e1a01000 	mov	r1, r0
   30fc8:	e1a00003 	mov	r0, r3
   30fcc:	eb002f9e 	bl	3ce4c <__udivsi3>
   30fd0:	eaffffea 	b	30f80 <BusAccess::busActionHandleStart() [clone .part.0]+0x54>
   30fd4:	e59f3050 	ldr	r3, [pc, #80]	; 3102c <BusAccess::busActionHandleStart() [clone .part.0]+0x100>
   30fd8:	e1500003 	cmp	r0, r3
   30fdc:	9afffff8 	bls	30fc4 <BusAccess::busActionHandleStart() [clone .part.0]+0x98>
   30fe0:	e3a00001 	mov	r0, #1
   30fe4:	eaffffe5 	b	30f80 <BusAccess::busActionHandleStart() [clone .part.0]+0x54>
   30fe8:	e59f3040 	ldr	r3, [pc, #64]	; 31030 <BusAccess::busActionHandleStart() [clone .part.0]+0x104>
   30fec:	eafffff2 	b	30fbc <BusAccess::busActionHandleStart() [clone .part.0]+0x90>
   30ff0:	e0863106 	add	r3, r6, r6, lsl #2
   30ff4:	e0866083 	add	r6, r6, r3, lsl #1
   30ff8:	e0846106 	add	r6, r4, r6, lsl #2
   30ffc:	e5963028 	ldr	r3, [r6, #40]	; 0x28
   31000:	e3530000 	cmp	r3, #0
   31004:	1affffe8 	bne	30fac <BusAccess::busActionHandleStart() [clone .part.0]+0x80>
   31008:	e59f3024 	ldr	r3, [pc, #36]	; 31034 <BusAccess::busActionHandleStart() [clone .part.0]+0x108>
   3100c:	eaffffea 	b	30fbc <BusAccess::busActionHandleStart() [clone .part.0]+0x90>
   31010:	e0863106 	add	r3, r6, r6, lsl #2
   31014:	e0866083 	add	r6, r6, r3, lsl #1
   31018:	e0846106 	add	r6, r4, r6, lsl #2
   3101c:	e5963020 	ldr	r3, [r6, #32]
   31020:	e3530000 	cmp	r3, #0
   31024:	0afffff7 	beq	31008 <BusAccess::busActionHandleStart() [clone .part.0]+0xdc>
   31028:	eaffffdf 	b	30fac <BusAccess::busActionHandleStart() [clone .part.0]+0x80>
   3102c:	3b9aca00 	.word	0x3b9aca00
   31030:	05f5e100 	.word	0x05f5e100
   31034:	01e84800 	.word	0x01e84800

00031038 <BusAccess::BusAccess()>:
   31038:	e3a0c064 	mov	ip, #100	; 0x64
   3103c:	e3a02000 	mov	r2, #0
   31040:	e92d4010 	push	{r4, lr}
   31044:	e3a01001 	mov	r1, #1
   31048:	e3e04000 	mvn	r4, #0
   3104c:	e3a0e014 	mov	lr, #20
   31050:	e580c1ec 	str	ip, [r0, #492]	; 0x1ec
   31054:	e59fc0ac 	ldr	ip, [pc, #172]	; 31108 <BusAccess::BusAccess()+0xd0>
   31058:	e580422c 	str	r4, [r0, #556]	; 0x22c
   3105c:	e580c224 	str	ip, [r0, #548]	; 0x224
   31060:	e280cd07 	add	ip, r0, #448	; 0x1c0
   31064:	e580e000 	str	lr, [r0]
   31068:	e5c02228 	strb	r2, [r0, #552]	; 0x228
   3106c:	e5802230 	str	r2, [r0, #560]	; 0x230
   31070:	e5802234 	str	r2, [r0, #564]	; 0x234
   31074:	e5802238 	str	r2, [r0, #568]	; 0x238
   31078:	e580223c 	str	r2, [r0, #572]	; 0x23c
   3107c:	e5802240 	str	r2, [r0, #576]	; 0x240
   31080:	e5802244 	str	r2, [r0, #580]	; 0x244
   31084:	e5802248 	str	r2, [r0, #584]	; 0x248
   31088:	e580224c 	str	r2, [r0, #588]	; 0x24c
   3108c:	e5802250 	str	r2, [r0, #592]	; 0x250
   31090:	e5802268 	str	r2, [r0, #616]	; 0x268
   31094:	e580226c 	str	r2, [r0, #620]	; 0x26c
   31098:	e5802270 	str	r2, [r0, #624]	; 0x270
   3109c:	e5802274 	str	r2, [r0, #628]	; 0x274
   310a0:	e5802278 	str	r2, [r0, #632]	; 0x278
   310a4:	e580227c 	str	r2, [r0, #636]	; 0x27c
   310a8:	e5802254 	str	r2, [r0, #596]	; 0x254
   310ac:	e5802258 	str	r2, [r0, #600]	; 0x258
   310b0:	e580225c 	str	r2, [r0, #604]	; 0x25c
   310b4:	e5802260 	str	r2, [r0, #608]	; 0x260
   310b8:	e5802264 	str	r2, [r0, #612]	; 0x264
   310bc:	e58021bc 	str	r2, [r0, #444]	; 0x1bc
   310c0:	e1cc10b0 	strh	r1, [ip]
   310c4:	e5c021c3 	strb	r2, [r0, #451]	; 0x1c3
   310c8:	e5c021c2 	strb	r2, [r0, #450]	; 0x1c2
   310cc:	e58011c8 	str	r1, [r0, #456]	; 0x1c8
   310d0:	e58021cc 	str	r2, [r0, #460]	; 0x1cc
   310d4:	e5c021d0 	strb	r2, [r0, #464]	; 0x1d0
   310d8:	e5c021d1 	strb	r2, [r0, #465]	; 0x1d1
   310dc:	e58021d4 	str	r2, [r0, #468]	; 0x1d4
   310e0:	e5c021d8 	strb	r2, [r0, #472]	; 0x1d8
   310e4:	e58021dc 	str	r2, [r0, #476]	; 0x1dc
   310e8:	e58021e0 	str	r2, [r0, #480]	; 0x1e0
   310ec:	e58021e4 	str	r2, [r0, #484]	; 0x1e4
   310f0:	e5c021f0 	strb	r2, [r0, #496]	; 0x1f0
   310f4:	e5c021e8 	strb	r2, [r0, #488]	; 0x1e8
   310f8:	e5c021c5 	strb	r2, [r0, #453]	; 0x1c5
   310fc:	e5c021c4 	strb	r2, [r0, #452]	; 0x1c4
   31100:	e5c021f1 	strb	r2, [r0, #497]	; 0x1f1
   31104:	e8bd8010 	pop	{r4, pc}
   31108:	000f4240 	.word	0x000f4240

0003110c <BusAccess::init()>:
   3110c:	e92d4070 	push	{r4, r5, r6, lr}
   31110:	e1a04000 	mov	r4, r0
   31114:	e3a05000 	mov	r5, #0
   31118:	eb000519 	bl	32584 <BusAccess::clockSetup()>
   3111c:	e1a00004 	mov	r0, r4
   31120:	e59f10ac 	ldr	r1, [pc, #172]	; 311d4 <BusAccess::init()+0xc8>
   31124:	eb00058f 	bl	32768 <BusAccess::clockSetFreqHz(unsigned long)>
   31128:	e1a00004 	mov	r0, r4
   3112c:	e3a01001 	mov	r1, #1
   31130:	eb000616 	bl	32990 <BusAccess::clockEnable(bool)>
   31134:	e1a00004 	mov	r0, r4
   31138:	e1a02005 	mov	r2, r5
   3113c:	e3a0100b 	mov	r1, #11
   31140:	eb00068c 	bl	32b78 <BusAccess::setPinOut(int, bool)>
   31144:	e1a00004 	mov	r0, r4
   31148:	e1a02005 	mov	r2, r5
   3114c:	e3a01009 	mov	r1, #9
   31150:	eb000688 	bl	32b78 <BusAccess::setPinOut(int, bool)>
   31154:	e1a00004 	mov	r0, r4
   31158:	e1a02005 	mov	r2, r5
   3115c:	e3a0100a 	mov	r1, #10
   31160:	eb000684 	bl	32b78 <BusAccess::setPinOut(int, bool)>
   31164:	e1a00004 	mov	r0, r4
   31168:	e3a02001 	mov	r2, #1
   3116c:	e3a01010 	mov	r1, #16
   31170:	eb000680 	bl	32b78 <BusAccess::setPinOut(int, bool)>
   31174:	e1a00004 	mov	r0, r4
   31178:	e3a02001 	mov	r2, #1
   3117c:	e3a01013 	mov	r1, #19
   31180:	eb00067c 	bl	32b78 <BusAccess::setPinOut(int, bool)>
   31184:	e1a00004 	mov	r0, r4
   31188:	e1a02005 	mov	r2, r5
   3118c:	e3a01007 	mov	r1, #7
   31190:	e5c451f1 	strb	r5, [r4, #497]	; 0x1f1
   31194:	eb000677 	bl	32b78 <BusAccess::setPinOut(int, bool)>
   31198:	e1a00004 	mov	r0, r4
   3119c:	e3a02001 	mov	r2, #1
   311a0:	e3a01006 	mov	r1, #6
   311a4:	eb000673 	bl	32b78 <BusAccess::setPinOut(int, bool)>
   311a8:	e3a02001 	mov	r2, #1
   311ac:	e1a00004 	mov	r0, r4
   311b0:	e3a01008 	mov	r1, #8
   311b4:	eb00066f 	bl	32b78 <BusAccess::setPinOut(int, bool)>
   311b8:	e1a01005 	mov	r1, r5
   311bc:	e1a00004 	mov	r0, r4
   311c0:	eb000789 	bl	32fec <BusAccess::busPagePinSetActive(bool)>
   311c4:	e1a00004 	mov	r0, r4
   311c8:	eb000851 	bl	33314 <BusAccess::waitSystemInit()>
   311cc:	e5c451c3 	strb	r5, [r4, #451]	; 0x1c3
   311d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   311d4:	000f4240 	.word	0x000f4240

000311d8 <BusAccess::busAccessReinit()>:
   311d8:	e92d4070 	push	{r4, r5, r6, lr}
   311dc:	e1a04000 	mov	r4, r0
   311e0:	eb00076c 	bl	32f98 <BusAccess::busAccessCallbackPageIn()>
   311e4:	e5943000 	ldr	r3, [r4]
   311e8:	e3a0c040 	mov	ip, #64	; 0x40
   311ec:	e3530011 	cmp	r3, #17
   311f0:	03a02c0e 	moveq	r2, #3584	; 0xe00
   311f4:	13a01801 	movne	r1, #65536	; 0x10000
   311f8:	13a02c0e 	movne	r2, #3584	; 0xe00
   311fc:	e3a05000 	mov	r5, #0
   31200:	159f3070 	ldrne	r3, [pc, #112]	; 31278 <BusAccess::busAccessReinit()+0xa0>
   31204:	059f306c 	ldreq	r3, [pc, #108]	; 31278 <BusAccess::busAccessReinit()+0xa0>
   31208:	1583101c 	strne	r1, [r3, #28]
   3120c:	e5832028 	str	r2, [r3, #40]	; 0x28
   31210:	e59f3060 	ldr	r3, [pc, #96]	; 31278 <BusAccess::busAccessReinit()+0xa0>
   31214:	e1a01005 	mov	r1, r5
   31218:	e5932008 	ldr	r2, [r3, #8]
   3121c:	e1a00004 	mov	r0, r4
   31220:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   31224:	e5832008 	str	r2, [r3, #8]
   31228:	e583c01c 	str	ip, [r3, #28]
   3122c:	e5c451c4 	strb	r5, [r4, #452]	; 0x1c4
   31230:	e58451c8 	str	r5, [r4, #456]	; 0x1c8
   31234:	eb000329 	bl	31ee0 <BusAccess::waitForBusAck(bool)>
   31238:	e1a00004 	mov	r0, r4
   3123c:	eb0007fb 	bl	33230 <BusAccess::waitGenerationDisable()>
   31240:	ebffd5f7 	bl	26a24 <CLogger::Get()>
   31244:	e59f3030 	ldr	r3, [pc, #48]	; 3127c <BusAccess::busAccessReinit()+0xa4>
   31248:	e3a02004 	mov	r2, #4
   3124c:	e59f102c 	ldr	r1, [pc, #44]	; 31280 <BusAccess::busAccessReinit()+0xa8>
   31250:	ebffd535 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   31254:	e3a01001 	mov	r1, #1
   31258:	e1a00004 	mov	r0, r4
   3125c:	eb0007fa 	bl	3324c <BusAccess::waitResetFlipFlops(bool)>
   31260:	e1a01005 	mov	r1, r5
   31264:	e1a00004 	mov	r0, r4
   31268:	eb0007a5 	bl	33104 <BusAccess::waitEnablementUpdate(bool)>
   3126c:	e3a03001 	mov	r3, #1
   31270:	e5c431c0 	strb	r3, [r4, #448]	; 0x1c0
   31274:	e8bd8070 	pop	{r4, r5, r6, pc}
   31278:	20200000 	.word	0x20200000
   3127c:	0004606c 	.word	0x0004606c
   31280:	00046198 	.word	0x00046198

00031284 <BusAccess::targetReqReset(int, int)>:
   31284:	e3510000 	cmp	r1, #0
   31288:	b12fff1e 	bxlt	lr
   3128c:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   31290:	e1530001 	cmp	r3, r1
   31294:	d12fff1e 	bxle	lr
   31298:	e3a03001 	mov	r3, #1
   3129c:	e3520000 	cmp	r2, #0
   312a0:	d3a02064 	movle	r2, #100	; 0x64
   312a4:	e92d4010 	push	{r4, lr}
   312a8:	e081c101 	add	ip, r1, r1, lsl #2
   312ac:	e081131c 	add	r1, r1, ip, lsl r3
   312b0:	e0801101 	add	r1, r0, r1, lsl #2
   312b4:	e5812018 	str	r2, [r1, #24]
   312b8:	e5c13016 	strb	r3, [r1, #22]
   312bc:	ebffd5d8 	bl	26a24 <CLogger::Get()>
   312c0:	e8bd4010 	pop	{r4, lr}
   312c4:	e3a02004 	mov	r2, #4
   312c8:	e59f3004 	ldr	r3, [pc, #4]	; 312d4 <BusAccess::targetReqReset(int, int)+0x50>
   312cc:	e59f1004 	ldr	r1, [pc, #4]	; 312d8 <BusAccess::targetReqReset(int, int)+0x54>
   312d0:	eaffd515 	b	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   312d4:	0004607c 	.word	0x0004607c
   312d8:	00046198 	.word	0x00046198

000312dc <BusAccess::targetReqNMI(int, int)>:
   312dc:	e3510000 	cmp	r1, #0
   312e0:	b12fff1e 	bxlt	lr
   312e4:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   312e8:	e1530001 	cmp	r3, r1
   312ec:	d12fff1e 	bxle	lr
   312f0:	e3a03001 	mov	r3, #1
   312f4:	e3520000 	cmp	r2, #0
   312f8:	d3a02020 	movle	r2, #32
   312fc:	e081c101 	add	ip, r1, r1, lsl #2
   31300:	e081131c 	add	r1, r1, ip, lsl r3
   31304:	e0801101 	add	r1, r0, r1, lsl #2
   31308:	e5812020 	str	r2, [r1, #32]
   3130c:	e5c1301c 	strb	r3, [r1, #28]
   31310:	e12fff1e 	bx	lr

00031314 <BusAccess::targetReqIRQ(int, int)>:
   31314:	e3510000 	cmp	r1, #0
   31318:	b12fff1e 	bxlt	lr
   3131c:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   31320:	e1530001 	cmp	r3, r1
   31324:	d12fff1e 	bxle	lr
   31328:	e3a03001 	mov	r3, #1
   3132c:	e3520000 	cmp	r2, #0
   31330:	d3a02020 	movle	r2, #32
   31334:	e081c101 	add	ip, r1, r1, lsl #2
   31338:	e081131c 	add	r1, r1, ip, lsl r3
   3133c:	e0801101 	add	r1, r0, r1, lsl #2
   31340:	e5812028 	str	r2, [r1, #40]	; 0x28
   31344:	e5c13024 	strb	r3, [r1, #36]	; 0x24
   31348:	e12fff1e 	bx	lr

0003134c <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>:
   3134c:	e92d4030 	push	{r4, r5, lr}
   31350:	e2514000 	subs	r4, r1, #0
   31354:	e1a05000 	mov	r5, r0
   31358:	e24dd00c 	sub	sp, sp, #12
   3135c:	ba000011 	blt	313a8 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x5c>
   31360:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   31364:	e1530004 	cmp	r3, r4
   31368:	da00000e 	ble	313a8 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x5c>
   3136c:	e3a03001 	mov	r3, #1
   31370:	e0841104 	add	r1, r4, r4, lsl #2
   31374:	e0844311 	add	r4, r4, r1, lsl r3
   31378:	e0804104 	add	r4, r0, r4, lsl #2
   3137c:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   31380:	e5c4202d 	strb	r2, [r4, #45]	; 0x2d
   31384:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   31388:	e3530000 	cmp	r3, #0
   3138c:	1a000000 	bne	31394 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x48>
   31390:	ebfffeac 	bl	30e48 <BusAccess::busActionCheck() [clone .part.0]>
   31394:	e5d531f0 	ldrb	r3, [r5, #496]	; 0x1f0
   31398:	e3530001 	cmp	r3, #1
   3139c:	0a00000b 	beq	313d0 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x84>
   313a0:	e28dd00c 	add	sp, sp, #12
   313a4:	e8bd8030 	pop	{r4, r5, pc}
   313a8:	ebffd59d 	bl	26a24 <CLogger::Get()>
   313ac:	e59531bc 	ldr	r3, [r5, #444]	; 0x1bc
   313b0:	e3a02004 	mov	r2, #4
   313b4:	e58d3004 	str	r3, [sp, #4]
   313b8:	e59f1020 	ldr	r1, [pc, #32]	; 313e0 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x94>
   313bc:	e59f3020 	ldr	r3, [pc, #32]	; 313e4 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x98>
   313c0:	e58d4000 	str	r4, [sp]
   313c4:	ebffd4d8 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   313c8:	e28dd00c 	add	sp, sp, #12
   313cc:	e8bd8030 	pop	{r4, r5, pc}
   313d0:	e1a00005 	mov	r0, r5
   313d4:	e28dd00c 	add	sp, sp, #12
   313d8:	e8bd4030 	pop	{r4, r5, lr}
   313dc:	eafffed2 	b	30f2c <BusAccess::busActionHandleStart() [clone .part.0]>
   313e0:	000460b4 	.word	0x000460b4
   313e4:	0004608c 	.word	0x0004608c

000313e8 <BusAccess::targetPageForInjection(int, bool)>:
   313e8:	e3520000 	cmp	r2, #0
   313ec:	e92d4070 	push	{r4, r5, r6, lr}
   313f0:	e1a06000 	mov	r6, r0
   313f4:	0a000012 	beq	31444 <BusAccess::targetPageForInjection(int, bool)+0x5c>
   313f8:	e59021bc 	ldr	r2, [r0, #444]	; 0x1bc
   313fc:	e3520000 	cmp	r2, #0
   31400:	d8bd8070 	pople	{r4, r5, r6, pc}
   31404:	e1a04000 	mov	r4, r0
   31408:	e3a05000 	mov	r5, #0
   3140c:	e5d43004 	ldrb	r3, [r4, #4]
   31410:	e2855001 	add	r5, r5, #1
   31414:	e3530000 	cmp	r3, #0
   31418:	0a000005 	beq	31434 <BusAccess::targetPageForInjection(int, bool)+0x4c>
   3141c:	e3a02004 	mov	r2, #4
   31420:	e3a01007 	mov	r1, #7
   31424:	e594300c 	ldr	r3, [r4, #12]
   31428:	e5940010 	ldr	r0, [r4, #16]
   3142c:	e12fff33 	blx	r3
   31430:	e59621bc 	ldr	r2, [r6, #444]	; 0x1bc
   31434:	e1520005 	cmp	r2, r5
   31438:	e284402c 	add	r4, r4, #44	; 0x2c
   3143c:	cafffff2 	bgt	3140c <BusAccess::targetPageForInjection(int, bool)+0x24>
   31440:	e8bd8070 	pop	{r4, r5, r6, pc}
   31444:	e3a03001 	mov	r3, #1
   31448:	e5c031c5 	strb	r3, [r0, #453]	; 0x1c5
   3144c:	e8bd8070 	pop	{r4, r5, r6, pc}

00031450 <BusAccess::busActionCheck()>:
   31450:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   31454:	e3530000 	cmp	r3, #0
   31458:	112fff1e 	bxne	lr
   3145c:	eafffe79 	b	30e48 <BusAccess::busActionCheck() [clone .part.0]>

00031460 <BusAccess::busActionHandleStart()>:
   31460:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   31464:	e3530001 	cmp	r3, #1
   31468:	0a000001 	beq	31474 <BusAccess::busActionHandleStart()+0x14>
   3146c:	e3a00000 	mov	r0, #0
   31470:	e12fff1e 	bx	lr
   31474:	eafffeac 	b	30f2c <BusAccess::busActionHandleStart() [clone .part.0]>

00031478 <BusAccess::busActionClearFlags()>:
   31478:	e59011bc 	ldr	r1, [r0, #444]	; 0x1bc
   3147c:	e3510000 	cmp	r1, #0
   31480:	da000019 	ble	314ec <BusAccess::busActionClearFlags()+0x74>
   31484:	e3a03000 	mov	r3, #0
   31488:	e1a0c003 	mov	ip, r3
   3148c:	ea00000b 	b	314c0 <BusAccess::busActionClearFlags()+0x48>
   31490:	e3520001 	cmp	r2, #1
   31494:	0a000017 	beq	314f8 <BusAccess::busActionClearFlags()+0x80>
   31498:	e3520002 	cmp	r2, #2
   3149c:	0a00001a 	beq	3150c <BusAccess::busActionClearFlags()+0x94>
   314a0:	e3520003 	cmp	r2, #3
   314a4:	00832103 	addeq	r2, r3, r3, lsl #2
   314a8:	00832082 	addeq	r2, r3, r2, lsl #1
   314ac:	00802102 	addeq	r2, r0, r2, lsl #2
   314b0:	05c2c024 	strbeq	ip, [r2, #36]	; 0x24
   314b4:	e2833001 	add	r3, r3, #1
   314b8:	e1530001 	cmp	r3, r1
   314bc:	0a00000a 	beq	314ec <BusAccess::busActionClearFlags()+0x74>
   314c0:	e5d021d8 	ldrb	r2, [r0, #472]	; 0x1d8
   314c4:	e3520004 	cmp	r2, #4
   314c8:	e6ef2072 	uxtb	r2, r2
   314cc:	1affffef 	bne	31490 <BusAccess::busActionClearFlags()+0x18>
   314d0:	e0832103 	add	r2, r3, r3, lsl #2
   314d4:	e0832082 	add	r2, r3, r2, lsl #1
   314d8:	e2833001 	add	r3, r3, #1
   314dc:	e0802102 	add	r2, r0, r2, lsl #2
   314e0:	e1530001 	cmp	r3, r1
   314e4:	e5c2c02c 	strb	ip, [r2, #44]	; 0x2c
   314e8:	1afffff4 	bne	314c0 <BusAccess::busActionClearFlags()+0x48>
   314ec:	e3a03000 	mov	r3, #0
   314f0:	e5c031f0 	strb	r3, [r0, #496]	; 0x1f0
   314f4:	e12fff1e 	bx	lr
   314f8:	e0832103 	add	r2, r3, r3, lsl #2
   314fc:	e0832082 	add	r2, r3, r2, lsl #1
   31500:	e0802102 	add	r2, r0, r2, lsl #2
   31504:	e5c2c016 	strb	ip, [r2, #22]
   31508:	eaffffe9 	b	314b4 <BusAccess::busActionClearFlags()+0x3c>
   3150c:	e0832103 	add	r2, r3, r3, lsl #2
   31510:	e0832082 	add	r2, r3, r2, lsl #1
   31514:	e0802102 	add	r2, r0, r2, lsl #2
   31518:	e5c2c01c 	strb	ip, [r2, #28]
   3151c:	eaffffe4 	b	314b4 <BusAccess::busActionClearFlags()+0x3c>

00031520 <BusAccess::busAccessHandleIrqAck()>:
   31520:	e5d031d8 	ldrb	r3, [r0, #472]	; 0x1d8
   31524:	e3530003 	cmp	r3, #3
   31528:	0a000001 	beq	31534 <BusAccess::busAccessHandleIrqAck()+0x14>
   3152c:	e3a00000 	mov	r0, #0
   31530:	e12fff1e 	bx	lr
   31534:	e92d4010 	push	{r4, lr}
   31538:	e1a04000 	mov	r4, r0
   3153c:	eb00030e 	bl	3217c <BusAccess::controlBusRead()>
   31540:	e59f302c 	ldr	r3, [pc, #44]	; 31574 <BusAccess::busAccessHandleIrqAck()+0x54>
   31544:	e0000003 	and	r0, r0, r3
   31548:	e3500018 	cmp	r0, #24
   3154c:	0a000001 	beq	31558 <BusAccess::busAccessHandleIrqAck()+0x38>
   31550:	e3a00000 	mov	r0, #0
   31554:	e8bd8010 	pop	{r4, pc}
   31558:	e1a00004 	mov	r0, r4
   3155c:	e3a02000 	mov	r2, #0
   31560:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   31564:	eb00063c 	bl	32e5c <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   31568:	e1a00004 	mov	r0, r4
   3156c:	ebffffc1 	bl	31478 <BusAccess::busActionClearFlags()>
   31570:	eafffff6 	b	31550 <BusAccess::busAccessHandleIrqAck()+0x30>
   31574:	00000418 	.word	0x00000418

00031578 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   31578:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   3157c:	e3530000 	cmp	r3, #0
   31580:	d12fff1e 	bxle	lr
   31584:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31588:	e1a08000 	mov	r8, r0
   3158c:	e1a09001 	mov	r9, r1
   31590:	e1a0a002 	mov	sl, r2
   31594:	e1a07000 	mov	r7, r0
   31598:	e1a04000 	mov	r4, r0
   3159c:	e3a05000 	mov	r5, #0
   315a0:	e5d4c004 	ldrb	ip, [r4, #4]
   315a4:	e2855001 	add	r5, r5, #1
   315a8:	e35c0000 	cmp	ip, #0
   315ac:	0a000007 	beq	315d0 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x58>
   315b0:	e594600c 	ldr	r6, [r4, #12]
   315b4:	e3560000 	cmp	r6, #0
   315b8:	0a000004 	beq	315d0 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x58>
   315bc:	e1a0200a 	mov	r2, sl
   315c0:	e1a01009 	mov	r1, r9
   315c4:	e5940010 	ldr	r0, [r4, #16]
   315c8:	e12fff36 	blx	r6
   315cc:	e59831bc 	ldr	r3, [r8, #444]	; 0x1bc
   315d0:	e1530005 	cmp	r3, r5
   315d4:	e284402c 	add	r4, r4, #44	; 0x2c
   315d8:	cafffff0 	bgt	315a0 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x28>
   315dc:	e35a0002 	cmp	sl, #2
   315e0:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   315e4:	e3530000 	cmp	r3, #0
   315e8:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   315ec:	e3a04000 	mov	r4, #0
   315f0:	e5d72004 	ldrb	r2, [r7, #4]
   315f4:	e2844001 	add	r4, r4, #1
   315f8:	e3520000 	cmp	r2, #0
   315fc:	0a000007 	beq	31620 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xa8>
   31600:	e597500c 	ldr	r5, [r7, #12]
   31604:	e3550000 	cmp	r5, #0
   31608:	0a000004 	beq	31620 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xa8>
   3160c:	e3a02001 	mov	r2, #1
   31610:	e1a01009 	mov	r1, r9
   31614:	e5970010 	ldr	r0, [r7, #16]
   31618:	e12fff35 	blx	r5
   3161c:	e59831bc 	ldr	r3, [r8, #444]	; 0x1bc
   31620:	e1530004 	cmp	r3, r4
   31624:	e287702c 	add	r7, r7, #44	; 0x2c
   31628:	cafffff0 	bgt	315f0 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x78>
   3162c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00031630 <BusAccess::busActionHandleActive()>:
   31630:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   31634:	e92d4070 	push	{r4, r5, r6, lr}
   31638:	e3530001 	cmp	r3, #1
   3163c:	e1a04000 	mov	r4, r0
   31640:	0a000033 	beq	31714 <BusAccess::busActionHandleActive()+0xe4>
   31644:	e5d431f0 	ldrb	r3, [r4, #496]	; 0x1f0
   31648:	e3530002 	cmp	r3, #2
   3164c:	18bd8070 	popne	{r4, r5, r6, pc}
   31650:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   31654:	e3510004 	cmp	r1, #4
   31658:	e6ef5071 	uxtb	r5, r1
   3165c:	1a000011 	bne	316a8 <BusAccess::busActionHandleActive()+0x78>
   31660:	e59f3134 	ldr	r3, [pc, #308]	; 3179c <BusAccess::busActionHandleActive()+0x16c>
   31664:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   31668:	e3130004 	tst	r3, #4
   3166c:	1a000035 	bne	31748 <BusAccess::busActionHandleActive()+0x118>
   31670:	e1a00004 	mov	r0, r4
   31674:	eb00054e 	bl	32bb4 <BusAccess::controlTake()>
   31678:	e1a00004 	mov	r0, r4
   3167c:	ebffff7d 	bl	31478 <BusAccess::busActionClearFlags()>
   31680:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   31684:	e1a01005 	mov	r1, r5
   31688:	e0832103 	add	r2, r3, r3, lsl #2
   3168c:	e0833082 	add	r3, r3, r2, lsl #1
   31690:	e0843103 	add	r3, r4, r3, lsl #2
   31694:	e5d3202d 	ldrb	r2, [r3, #45]	; 0x2d
   31698:	ebffffb6 	bl	31578 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>
   3169c:	e1a00004 	mov	r0, r4
   316a0:	e8bd4070 	pop	{r4, r5, r6, lr}
   316a4:	ea000248 	b	31fcc <BusAccess::controlRelease()>
   316a8:	e1a00004 	mov	r0, r4
   316ac:	ebffff9b 	bl	31520 <BusAccess::busAccessHandleIrqAck()>
   316b0:	e2505000 	subs	r5, r0, #0
   316b4:	18bd8070 	popne	{r4, r5, r6, pc}
   316b8:	ebfff183 	bl	2dccc <micros>
   316bc:	e59411e0 	ldr	r1, [r4, #480]	; 0x1e0
   316c0:	e59421e4 	ldr	r2, [r4, #484]	; 0x1e4
   316c4:	ebfff19e 	bl	2dd44 <isTimeout>
   316c8:	e3500000 	cmp	r0, #0
   316cc:	08bd8070 	popeq	{r4, r5, r6, pc}
   316d0:	e3a02004 	mov	r2, #4
   316d4:	e1a00004 	mov	r0, r4
   316d8:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   316dc:	ebffffa5 	bl	31578 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>
   316e0:	e1a02005 	mov	r2, r5
   316e4:	e1a00004 	mov	r0, r4
   316e8:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   316ec:	eb0005da 	bl	32e5c <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   316f0:	e1a00004 	mov	r0, r4
   316f4:	ebffff5f 	bl	31478 <BusAccess::busActionClearFlags()>
   316f8:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   316fc:	e3530001 	cmp	r3, #1
   31700:	18bd8070 	popne	{r4, r5, r6, pc}
   31704:	e3a02004 	mov	r2, #4
   31708:	e8bd4070 	pop	{r4, r5, r6, lr}
   3170c:	e3a01009 	mov	r1, #9
   31710:	eaffff98 	b	31578 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>
   31714:	ebfff16c 	bl	2dccc <micros>
   31718:	e59411dc 	ldr	r1, [r4, #476]	; 0x1dc
   3171c:	e59f207c 	ldr	r2, [pc, #124]	; 317a0 <BusAccess::busActionHandleActive()+0x170>
   31720:	ebfff187 	bl	2dd44 <isTimeout>
   31724:	e3500000 	cmp	r0, #0
   31728:	0affffc5 	beq	31644 <BusAccess::busActionHandleActive()+0x14>
   3172c:	e1a00004 	mov	r0, r4
   31730:	e3a02000 	mov	r2, #0
   31734:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   31738:	eb0005c7 	bl	32e5c <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   3173c:	e1a00004 	mov	r0, r4
   31740:	ebffff4c 	bl	31478 <BusAccess::busActionClearFlags()>
   31744:	eaffffbe 	b	31644 <BusAccess::busActionHandleActive()+0x14>
   31748:	ebfff15f 	bl	2dccc <micros>
   3174c:	e59411e0 	ldr	r1, [r4, #480]	; 0x1e0
   31750:	e59421e4 	ldr	r2, [r4, #484]	; 0x1e4
   31754:	ebfff17a 	bl	2dd44 <isTimeout>
   31758:	e3500000 	cmp	r0, #0
   3175c:	08bd8070 	popeq	{r4, r5, r6, pc}
   31760:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   31764:	e1a00004 	mov	r0, r4
   31768:	e0832103 	add	r2, r3, r3, lsl #2
   3176c:	e0833082 	add	r3, r3, r2, lsl #1
   31770:	e0843103 	add	r3, r4, r3, lsl #2
   31774:	e5d3202d 	ldrb	r2, [r3, #45]	; 0x2d
   31778:	e3a01005 	mov	r1, #5
   3177c:	ebffff7d 	bl	31578 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>
   31780:	e1a00004 	mov	r0, r4
   31784:	e1a01005 	mov	r1, r5
   31788:	e3a02000 	mov	r2, #0
   3178c:	eb0005b2 	bl	32e5c <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   31790:	e1a00004 	mov	r0, r4
   31794:	e8bd4070 	pop	{r4, r5, r6, lr}
   31798:	eaffff36 	b	31478 <BusAccess::busActionClearFlags()>
   3179c:	20200000 	.word	0x20200000
   317a0:	000186a0 	.word	0x000186a0

000317a4 <BusAccess::stepTimerISR(void*)>:
   317a4:	e12fff1e 	bx	lr

000317a8 <BusAccess::waitHandleReadRelease()>:
   317a8:	e5d031c4 	ldrb	r3, [r0, #452]	; 0x1c4
   317ac:	e3530000 	cmp	r3, #0
   317b0:	012fff1e 	bxeq	lr
   317b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   317b8:	e1a07000 	mov	r7, r0
   317bc:	ebfff142 	bl	2dccc <micros>
   317c0:	e59f6068 	ldr	r6, [pc, #104]	; 31830 <BusAccess::waitHandleReadRelease()+0x88>
   317c4:	e1a05000 	mov	r5, r0
   317c8:	ea000003 	b	317dc <BusAccess::waitHandleReadRelease()+0x34>
   317cc:	e5963034 	ldr	r3, [r6, #52]	; 0x34
   317d0:	e2033003 	and	r3, r3, #3
   317d4:	e3530003 	cmp	r3, #3
   317d8:	0a000008 	beq	31800 <BusAccess::waitHandleReadRelease()+0x58>
   317dc:	ebfff13a 	bl	2dccc <micros>
   317e0:	e3a02064 	mov	r2, #100	; 0x64
   317e4:	e1a01005 	mov	r1, r5
   317e8:	ebfff155 	bl	2dd44 <isTimeout>
   317ec:	e2504000 	subs	r4, r0, #0
   317f0:	0afffff5 	beq	317cc <BusAccess::waitHandleReadRelease()+0x24>
   317f4:	e3a03000 	mov	r3, #0
   317f8:	e5c731c4 	strb	r3, [r7, #452]	; 0x1c4
   317fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31800:	e3a02040 	mov	r2, #64	; 0x40
   31804:	e5963008 	ldr	r3, [r6, #8]
   31808:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   3180c:	e5863008 	str	r3, [r6, #8]
   31810:	e586201c 	str	r2, [r6, #28]
   31814:	e5d731c5 	ldrb	r3, [r7, #453]	; 0x1c5
   31818:	e3530000 	cmp	r3, #0
   3181c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   31820:	e1a00007 	mov	r0, r7
   31824:	eb0005db 	bl	32f98 <BusAccess::busAccessCallbackPageIn()>
   31828:	e5c741c5 	strb	r4, [r7, #453]	; 0x1c5
   3182c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31830:	20200000 	.word	0x20200000

00031834 <BusAccess::waitHandleNew()>:
   31834:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31838:	e1a06000 	mov	r6, r0
   3183c:	e3a04000 	mov	r4, #0
   31840:	e24dd018 	sub	sp, sp, #24
   31844:	ebfff120 	bl	2dccc <micros>
   31848:	e5d631c5 	ldrb	r3, [r6, #453]	; 0x1c5
   3184c:	e1a08000 	mov	r8, r0
   31850:	e1530004 	cmp	r3, r4
   31854:	e58d400c 	str	r4, [sp, #12]
   31858:	e58d4010 	str	r4, [sp, #16]
   3185c:	1a000071 	bne	31a28 <BusAccess::waitHandleNew()+0x1f4>
   31860:	e1a00006 	mov	r0, r6
   31864:	eb000244 	bl	3217c <BusAccess::controlBusRead()>
   31868:	e5d621d1 	ldrb	r2, [r6, #465]	; 0x1d1
   3186c:	e1a07000 	mov	r7, r0
   31870:	e3520000 	cmp	r2, #0
   31874:	0a00006f 	beq	31a38 <BusAccess::waitHandleNew()+0x204>
   31878:	e3a03000 	mov	r3, #0
   3187c:	e5c631d1 	strb	r3, [r6, #465]	; 0x1d1
   31880:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
   31884:	e59611bc 	ldr	r1, [r6, #444]	; 0x1bc
   31888:	e58d3014 	str	r3, [sp, #20]
   3188c:	e3510000 	cmp	r1, #0
   31890:	c1a04006 	movgt	r4, r6
   31894:	c3a05000 	movgt	r5, #0
   31898:	c28d9014 	addgt	r9, sp, #20
   3189c:	da000010 	ble	318e4 <BusAccess::waitHandleNew()+0xb0>
   318a0:	e5d42004 	ldrb	r2, [r4, #4]
   318a4:	e2855001 	add	r5, r5, #1
   318a8:	e3520000 	cmp	r2, #0
   318ac:	0a000009 	beq	318d8 <BusAccess::waitHandleNew()+0xa4>
   318b0:	e594a008 	ldr	sl, [r4, #8]
   318b4:	e35a0000 	cmp	sl, #0
   318b8:	0a000006 	beq	318d8 <BusAccess::waitHandleNew()+0xa4>
   318bc:	e5940010 	ldr	r0, [r4, #16]
   318c0:	e59d100c 	ldr	r1, [sp, #12]
   318c4:	e1a03007 	mov	r3, r7
   318c8:	e59d2010 	ldr	r2, [sp, #16]
   318cc:	e58d9000 	str	r9, [sp]
   318d0:	e12fff3a 	blx	sl
   318d4:	e59611bc 	ldr	r1, [r6, #444]	; 0x1bc
   318d8:	e1510005 	cmp	r1, r5
   318dc:	e284402c 	add	r4, r4, #44	; 0x2c
   318e0:	caffffee 	bgt	318a0 <BusAccess::waitHandleNew()+0x6c>
   318e4:	e2174001 	ands	r4, r7, #1
   318e8:	0a00003b 	beq	319dc <BusAccess::waitHandleNew()+0x1a8>
   318ec:	e317000c 	tst	r7, #12
   318f0:	0a000039 	beq	319dc <BusAccess::waitHandleNew()+0x1a8>
   318f4:	e59d3014 	ldr	r3, [sp, #20]
   318f8:	e3530000 	cmp	r3, #0
   318fc:	ba000011 	blt	31948 <BusAccess::waitHandleNew()+0x114>
   31900:	e5d621d1 	ldrb	r2, [r6, #465]	; 0x1d1
   31904:	e3520000 	cmp	r2, #0
   31908:	1a000053 	bne	31a5c <BusAccess::waitHandleNew()+0x228>
   3190c:	e3a01040 	mov	r1, #64	; 0x40
   31910:	e3a0c001 	mov	ip, #1
   31914:	e59f21c8 	ldr	r2, [pc, #456]	; 31ae4 <BusAccess::waitHandleNew()+0x2b0>
   31918:	e1a03a03 	lsl	r3, r3, #20
   3191c:	e5821028 	str	r1, [r2, #40]	; 0x28
   31920:	e5920008 	ldr	r0, [r2, #8]
   31924:	e59f11bc 	ldr	r1, [pc, #444]	; 31ae8 <BusAccess::waitHandleNew()+0x2b4>
   31928:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
   3192c:	e20004ff 	and	r0, r0, #-16777216	; 0xff000000
   31930:	e1801001 	orr	r1, r0, r1
   31934:	e22306ff 	eor	r0, r3, #267386880	; 0xff00000
   31938:	e5821008 	str	r1, [r2, #8]
   3193c:	e582301c 	str	r3, [r2, #28]
   31940:	e5820028 	str	r0, [r2, #40]	; 0x28
   31944:	e5c6c1c4 	strb	ip, [r6, #452]	; 0x1c4
   31948:	ebfff0df 	bl	2dccc <micros>
   3194c:	e5963234 	ldr	r3, [r6, #564]	; 0x234
   31950:	e3170004 	tst	r7, #4
   31954:	e2833001 	add	r3, r3, #1
   31958:	e0408008 	sub	r8, r0, r8
   3195c:	e5863234 	str	r3, [r6, #564]	; 0x234
   31960:	0a000021 	beq	319ec <BusAccess::waitHandleNew()+0x1b8>
   31964:	e3540000 	cmp	r4, #0
   31968:	0a000029 	beq	31a14 <BusAccess::waitHandleNew()+0x1e0>
   3196c:	e5963254 	ldr	r3, [r6, #596]	; 0x254
   31970:	e2833001 	add	r3, r3, #1
   31974:	e5863254 	str	r3, [r6, #596]	; 0x254
   31978:	e59f316c 	ldr	r3, [pc, #364]	; 31aec <BusAccess::waitHandleNew()+0x2b8>
   3197c:	e5962238 	ldr	r2, [r6, #568]	; 0x238
   31980:	e1520003 	cmp	r2, r3
   31984:	83a03000 	movhi	r3, #0
   31988:	85863238 	strhi	r3, [r6, #568]	; 0x238
   3198c:	8586323c 	strhi	r3, [r6, #572]	; 0x23c
   31990:	e59f3158 	ldr	r3, [pc, #344]	; 31af0 <BusAccess::waitHandleNew()+0x2bc>
   31994:	e1580003 	cmp	r8, r3
   31998:	2a00000a 	bcs	319c8 <BusAccess::waitHandleNew()+0x194>
   3199c:	e5963238 	ldr	r3, [r6, #568]	; 0x238
   319a0:	e596123c 	ldr	r1, [r6, #572]	; 0x23c
   319a4:	e0883003 	add	r3, r8, r3
   319a8:	e0630283 	rsb	r0, r3, r3, lsl #5
   319ac:	e0830100 	add	r0, r3, r0, lsl #2
   319b0:	e2811001 	add	r1, r1, #1
   319b4:	e5863238 	str	r3, [r6, #568]	; 0x238
   319b8:	e1a00180 	lsl	r0, r0, #3
   319bc:	e586123c 	str	r1, [r6, #572]	; 0x23c
   319c0:	eb002d21 	bl	3ce4c <__udivsi3>
   319c4:	e5860240 	str	r0, [r6, #576]	; 0x240
   319c8:	e5963244 	ldr	r3, [r6, #580]	; 0x244
   319cc:	e1530008 	cmp	r3, r8
   319d0:	35868244 	strcc	r8, [r6, #580]	; 0x244
   319d4:	e28dd018 	add	sp, sp, #24
   319d8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   319dc:	e2073018 	and	r3, r7, #24
   319e0:	e3530018 	cmp	r3, #24
   319e4:	1affffd7 	bne	31948 <BusAccess::waitHandleNew()+0x114>
   319e8:	eaffffc1 	b	318f4 <BusAccess::waitHandleNew()+0xc0>
   319ec:	e3170008 	tst	r7, #8
   319f0:	0affffe0 	beq	31978 <BusAccess::waitHandleNew()+0x144>
   319f4:	e3540000 	cmp	r4, #0
   319f8:	1a000013 	bne	31a4c <BusAccess::waitHandleNew()+0x218>
   319fc:	e3170002 	tst	r7, #2
   31a00:	0a00002c 	beq	31ab8 <BusAccess::waitHandleNew()+0x284>
   31a04:	e5963260 	ldr	r3, [r6, #608]	; 0x260
   31a08:	e2833001 	add	r3, r3, #1
   31a0c:	e5863260 	str	r3, [r6, #608]	; 0x260
   31a10:	eaffffd8 	b	31978 <BusAccess::waitHandleNew()+0x144>
   31a14:	e3170002 	tst	r7, #2
   31a18:	15963258 	ldrne	r3, [r6, #600]	; 0x258
   31a1c:	12833001 	addne	r3, r3, #1
   31a20:	15863258 	strne	r3, [r6, #600]	; 0x258
   31a24:	eaffffd3 	b	31978 <BusAccess::waitHandleNew()+0x144>
   31a28:	e1a00006 	mov	r0, r6
   31a2c:	eb000559 	bl	32f98 <BusAccess::busAccessCallbackPageIn()>
   31a30:	e5c641c5 	strb	r4, [r6, #453]	; 0x1c5
   31a34:	eaffff89 	b	31860 <BusAccess::waitHandleNew()+0x2c>
   31a38:	e1a00006 	mov	r0, r6
   31a3c:	e28d2010 	add	r2, sp, #16
   31a40:	e28d100c 	add	r1, sp, #12
   31a44:	eb000206 	bl	32264 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>
   31a48:	eaffff8c 	b	31880 <BusAccess::waitHandleNew()+0x4c>
   31a4c:	e596325c 	ldr	r3, [r6, #604]	; 0x25c
   31a50:	e2833001 	add	r3, r3, #1
   31a54:	e586325c 	str	r3, [r6, #604]	; 0x25c
   31a58:	eaffffc6 	b	31978 <BusAccess::waitHandleNew()+0x144>
   31a5c:	e5963000 	ldr	r3, [r6]
   31a60:	e3530011 	cmp	r3, #17
   31a64:	0a000018 	beq	31acc <BusAccess::waitHandleNew()+0x298>
   31a68:	e3a00c0e 	mov	r0, #3584	; 0xe00
   31a6c:	e3a01c02 	mov	r1, #512	; 0x200
   31a70:	e3a02801 	mov	r2, #65536	; 0x10000
   31a74:	e59f3068 	ldr	r3, [pc, #104]	; 31ae4 <BusAccess::waitHandleNew()+0x2b0>
   31a78:	e5830028 	str	r0, [r3, #40]	; 0x28
   31a7c:	e583101c 	str	r1, [r3, #28]
   31a80:	e5832028 	str	r2, [r3, #40]	; 0x28
   31a84:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   31a88:	eb003043 	bl	3db9c <lowlev_cycleDelay>
   31a8c:	e5963000 	ldr	r3, [r6]
   31a90:	e3530011 	cmp	r3, #17
   31a94:	03a01c0e 	moveq	r1, #3584	; 0xe00
   31a98:	13a01801 	movne	r1, #65536	; 0x10000
   31a9c:	059f2040 	ldreq	r2, [pc, #64]	; 31ae4 <BusAccess::waitHandleNew()+0x2b0>
   31aa0:	159f203c 	ldrne	r2, [pc, #60]	; 31ae4 <BusAccess::waitHandleNew()+0x2b0>
   31aa4:	059d3014 	ldreq	r3, [sp, #20]
   31aa8:	159d3014 	ldrne	r3, [sp, #20]
   31aac:	05821028 	streq	r1, [r2, #40]	; 0x28
   31ab0:	1582101c 	strne	r1, [r2, #28]
   31ab4:	eaffff94 	b	3190c <BusAccess::waitHandleNew()+0xd8>
   31ab8:	e3170010 	tst	r7, #16
   31abc:	15963264 	ldrne	r3, [r6, #612]	; 0x264
   31ac0:	12833001 	addne	r3, r3, #1
   31ac4:	15863264 	strne	r3, [r6, #612]	; 0x264
   31ac8:	eaffffaa 	b	31978 <BusAccess::waitHandleNew()+0x144>
   31acc:	e3a01c0e 	mov	r1, #3584	; 0xe00
   31ad0:	e3a02c02 	mov	r2, #512	; 0x200
   31ad4:	e59f3008 	ldr	r3, [pc, #8]	; 31ae4 <BusAccess::waitHandleNew()+0x2b0>
   31ad8:	e5831028 	str	r1, [r3, #40]	; 0x28
   31adc:	e583201c 	str	r2, [r3, #28]
   31ae0:	eaffffe7 	b	31a84 <BusAccess::waitHandleNew()+0x250>
   31ae4:	20200000 	.word	0x20200000
   31ae8:	00249249 	.word	0x00249249
   31aec:	3b9aca00 	.word	0x3b9aca00
   31af0:	000f4240 	.word	0x000f4240

00031af4 <BusAccess::serviceWaitActivity()>:
   31af4:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   31af8:	e92d4010 	push	{r4, lr}
   31afc:	e3530000 	cmp	r3, #0
   31b00:	e1a04000 	mov	r4, r0
   31b04:	1a000000 	bne	31b0c <BusAccess::serviceWaitActivity()+0x18>
   31b08:	ebfffcce 	bl	30e48 <BusAccess::busActionCheck() [clone .part.0]>
   31b0c:	e1a00004 	mov	r0, r4
   31b10:	ebfffec6 	bl	31630 <BusAccess::busActionHandleActive()>
   31b14:	e5d431c3 	ldrb	r3, [r4, #451]	; 0x1c3
   31b18:	e3530000 	cmp	r3, #0
   31b1c:	1a00000c 	bne	31b54 <BusAccess::serviceWaitActivity()+0x60>
   31b20:	e59f30c4 	ldr	r3, [pc, #196]	; 31bec <BusAccess::serviceWaitActivity()+0xf8>
   31b24:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   31b28:	e2033024 	and	r3, r3, #36	; 0x24
   31b2c:	e3530004 	cmp	r3, #4
   31b30:	0a00001d 	beq	31bac <BusAccess::serviceWaitActivity()+0xb8>
   31b34:	e5d431c1 	ldrb	r3, [r4, #449]	; 0x1c1
   31b38:	e3530000 	cmp	r3, #0
   31b3c:	1a000004 	bne	31b54 <BusAccess::serviceWaitActivity()+0x60>
   31b40:	e5d431f0 	ldrb	r3, [r4, #496]	; 0x1f0
   31b44:	e3530001 	cmp	r3, #1
   31b48:	1a000001 	bne	31b54 <BusAccess::serviceWaitActivity()+0x60>
   31b4c:	e1a00004 	mov	r0, r4
   31b50:	ebfffcf5 	bl	30f2c <BusAccess::busActionHandleStart() [clone .part.0]>
   31b54:	e5d431c3 	ldrb	r3, [r4, #451]	; 0x1c3
   31b58:	e3530000 	cmp	r3, #0
   31b5c:	08bd8010 	popeq	{r4, pc}
   31b60:	e59f3084 	ldr	r3, [pc, #132]	; 31bec <BusAccess::serviceWaitActivity()+0xf8>
   31b64:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   31b68:	e3130001 	tst	r3, #1
   31b6c:	1a000002 	bne	31b7c <BusAccess::serviceWaitActivity()+0x88>
   31b70:	e5d431d0 	ldrb	r3, [r4, #464]	; 0x1d0
   31b74:	e3530000 	cmp	r3, #0
   31b78:	1a000013 	bne	31bcc <BusAccess::serviceWaitActivity()+0xd8>
   31b7c:	ebfff052 	bl	2dccc <micros>
   31b80:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   31b84:	e59421c8 	ldr	r2, [r4, #456]	; 0x1c8
   31b88:	ebfff06d 	bl	2dd44 <isTimeout>
   31b8c:	e3500000 	cmp	r0, #0
   31b90:	08bd8010 	popeq	{r4, pc}
   31b94:	e5d431f0 	ldrb	r3, [r4, #496]	; 0x1f0
   31b98:	e3530001 	cmp	r3, #1
   31b9c:	0a00000f 	beq	31be0 <BusAccess::serviceWaitActivity()+0xec>
   31ba0:	e1a00004 	mov	r0, r4
   31ba4:	e8bd4010 	pop	{r4, lr}
   31ba8:	ea0005ce 	b	332e8 <BusAccess::waitRelease()>
   31bac:	ebfff046 	bl	2dccc <micros>
   31bb0:	e3a02001 	mov	r2, #1
   31bb4:	e1a03000 	mov	r3, r0
   31bb8:	e1a00004 	mov	r0, r4
   31bbc:	e58431cc 	str	r3, [r4, #460]	; 0x1cc
   31bc0:	e5c421c3 	strb	r2, [r4, #451]	; 0x1c3
   31bc4:	ebffff1a 	bl	31834 <BusAccess::waitHandleNew()>
   31bc8:	eaffffe1 	b	31b54 <BusAccess::serviceWaitActivity()+0x60>
   31bcc:	ebfff03e 	bl	2dccc <micros>
   31bd0:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
   31bd4:	ebfff03c 	bl	2dccc <micros>
   31bd8:	e58401e0 	str	r0, [r4, #480]	; 0x1e0
   31bdc:	e8bd8010 	pop	{r4, pc}
   31be0:	e1a00004 	mov	r0, r4
   31be4:	ebfffcd0 	bl	30f2c <BusAccess::busActionHandleStart() [clone .part.0]>
   31be8:	eaffffec 	b	31ba0 <BusAccess::serviceWaitActivity()+0xac>
   31bec:	20200000 	.word	0x20200000

00031bf0 <BusAccess::service()>:
   31bf0:	e5d031c0 	ldrb	r3, [r0, #448]	; 0x1c0
   31bf4:	e3530000 	cmp	r3, #0
   31bf8:	012fff1e 	bxeq	lr
   31bfc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31c00:	e1a04000 	mov	r4, r0
   31c04:	ebfff030 	bl	2dccc <micros>
   31c08:	e3a0500a 	mov	r5, #10
   31c0c:	e1a06000 	mov	r6, r0
   31c10:	e59f7040 	ldr	r7, [pc, #64]	; 31c58 <BusAccess::service()+0x68>
   31c14:	e1a00004 	mov	r0, r4
   31c18:	ebffffb5 	bl	31af4 <BusAccess::serviceWaitActivity()>
   31c1c:	e5d431f0 	ldrb	r3, [r4, #496]	; 0x1f0
   31c20:	e3530002 	cmp	r3, #2
   31c24:	0a000002 	beq	31c34 <BusAccess::service()+0x44>
   31c28:	e5d431c3 	ldrb	r3, [r4, #451]	; 0x1c3
   31c2c:	e3530000 	cmp	r3, #0
   31c30:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   31c34:	ebfff024 	bl	2dccc <micros>
   31c38:	e1a02007 	mov	r2, r7
   31c3c:	e1a01006 	mov	r1, r6
   31c40:	ebfff03f 	bl	2dd44 <isTimeout>
   31c44:	e3500000 	cmp	r0, #0
   31c48:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   31c4c:	e2555001 	subs	r5, r5, #1
   31c50:	1affffef 	bne	31c14 <BusAccess::service()+0x24>
   31c54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31c58:	00002710 	.word	0x00002710

00031c5c <BusAccessStatusInfo::getJson()>:
   31c5c:	e92d4030 	push	{r4, r5, lr}
   31c60:	e1a04000 	mov	r4, r0
   31c64:	e5903048 	ldr	r3, [r0, #72]	; 0x48
   31c68:	e24ddf9f 	sub	sp, sp, #636	; 0x27c
   31c6c:	e590c044 	ldr	ip, [r0, #68]	; 0x44
   31c70:	e594103c 	ldr	r1, [r4, #60]	; 0x3c
   31c74:	e5942010 	ldr	r2, [r4, #16]
   31c78:	e5900040 	ldr	r0, [r0, #64]	; 0x40
   31c7c:	e58d3014 	str	r3, [sp, #20]
   31c80:	e594300c 	ldr	r3, [r4, #12]
   31c84:	e59f508c 	ldr	r5, [pc, #140]	; 31d18 <BusAccessStatusInfo::getJson()+0xbc>
   31c88:	e58dc010 	str	ip, [sp, #16]
   31c8c:	e58d000c 	str	r0, [sp, #12]
   31c90:	e58d1008 	str	r1, [sp, #8]
   31c94:	e58d2004 	str	r2, [sp, #4]
   31c98:	e58d3000 	str	r3, [sp]
   31c9c:	e5943000 	ldr	r3, [r4]
   31ca0:	e1a00005 	mov	r0, r5
   31ca4:	e3a01f96 	mov	r1, #600	; 0x258
   31ca8:	e59f206c 	ldr	r2, [pc, #108]	; 31d1c <BusAccessStatusInfo::getJson()+0xc0>
   31cac:	ebfff0ac 	bl	2df64 <snprintf>
   31cb0:	e594201c 	ldr	r2, [r4, #28]
   31cb4:	e5943018 	ldr	r3, [r4, #24]
   31cb8:	e594c014 	ldr	ip, [r4, #20]
   31cbc:	e5940030 	ldr	r0, [r4, #48]	; 0x30
   31cc0:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
   31cc4:	e58d2018 	str	r2, [sp, #24]
   31cc8:	e5942028 	ldr	r2, [r4, #40]	; 0x28
   31ccc:	e58d3014 	str	r3, [sp, #20]
   31cd0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   31cd4:	e58dc010 	str	ip, [sp, #16]
   31cd8:	e58d000c 	str	r0, [sp, #12]
   31cdc:	e58d1008 	str	r1, [sp, #8]
   31ce0:	e58d2004 	str	r2, [sp, #4]
   31ce4:	e58d3000 	str	r3, [sp]
   31ce8:	e5943020 	ldr	r3, [r4, #32]
   31cec:	e3a01f96 	mov	r1, #600	; 0x258
   31cf0:	e59f2028 	ldr	r2, [pc, #40]	; 31d20 <BusAccessStatusInfo::getJson()+0xc4>
   31cf4:	e28d0020 	add	r0, sp, #32
   31cf8:	ebfff099 	bl	2df64 <snprintf>
   31cfc:	e1a00005 	mov	r0, r5
   31d00:	e3a02f96 	mov	r2, #600	; 0x258
   31d04:	e28d1020 	add	r1, sp, #32
   31d08:	ebfff045 	bl	2de24 <strlcat>
   31d0c:	e1a00005 	mov	r0, r5
   31d10:	e28ddf9f 	add	sp, sp, #636	; 0x27c
   31d14:	e8bd8030 	pop	{r4, r5, pc}
   31d18:	0004db88 	.word	0x0004db88
   31d1c:	000460b8 	.word	0x000460b8
   31d20:	00046124 	.word	0x00046124

00031d24 <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>:
   31d24:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31d28:	e59041bc 	ldr	r4, [r0, #444]	; 0x1bc
   31d2c:	e24dd00c 	sub	sp, sp, #12
   31d30:	e5ddc054 	ldrb	ip, [sp, #84]	; 0x54
   31d34:	e5dd5058 	ldrb	r5, [sp, #88]	; 0x58
   31d38:	e3540009 	cmp	r4, #9
   31d3c:	e5dd8030 	ldrb	r8, [sp, #48]	; 0x30
   31d40:	e5dd7034 	ldrb	r7, [sp, #52]	; 0x34
   31d44:	e5ddb038 	ldrb	fp, [sp, #56]	; 0x38
   31d48:	e5dda040 	ldrb	sl, [sp, #64]	; 0x40
   31d4c:	e5dd9048 	ldrb	r9, [sp, #72]	; 0x48
   31d50:	e5dd6050 	ldrb	r6, [sp, #80]	; 0x50
   31d54:	e58dc000 	str	ip, [sp]
   31d58:	e58d5004 	str	r5, [sp, #4]
   31d5c:	ca00001e 	bgt	31ddc <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)+0xb8>
   31d60:	e084c104 	add	ip, r4, r4, lsl #2
   31d64:	e084c08c 	add	ip, r4, ip, lsl #1
   31d68:	e080c10c 	add	ip, r0, ip, lsl #2
   31d6c:	e5cc1004 	strb	r1, [ip, #4]
   31d70:	e58c2008 	str	r2, [ip, #8]
   31d74:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
   31d78:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
   31d7c:	e5ccb016 	strb	fp, [ip, #22]
   31d80:	e58c1018 	str	r1, [ip, #24]
   31d84:	e5cca01c 	strb	sl, [ip, #28]
   31d88:	e58c2020 	str	r2, [ip, #32]
   31d8c:	e59d205c 	ldr	r2, [sp, #92]	; 0x5c
   31d90:	e58c300c 	str	r3, [ip, #12]
   31d94:	e58c2010 	str	r2, [ip, #16]
   31d98:	e59d3000 	ldr	r3, [sp]
   31d9c:	e59d204c 	ldr	r2, [sp, #76]	; 0x4c
   31da0:	e5cc9024 	strb	r9, [ip, #36]	; 0x24
   31da4:	e58c2028 	str	r2, [ip, #40]	; 0x28
   31da8:	e5cc602c 	strb	r6, [ip, #44]	; 0x2c
   31dac:	e5cc302d 	strb	r3, [ip, #45]	; 0x2d
   31db0:	e59d3004 	ldr	r3, [sp, #4]
   31db4:	e2845001 	add	r5, r4, #1
   31db8:	e5cc8014 	strb	r8, [ip, #20]
   31dbc:	e5cc7015 	strb	r7, [ip, #21]
   31dc0:	e5cc302e 	strb	r3, [ip, #46]	; 0x2e
   31dc4:	e3a01000 	mov	r1, #0
   31dc8:	e58051bc 	str	r5, [r0, #444]	; 0x1bc
   31dcc:	eb0004cc 	bl	33104 <BusAccess::waitEnablementUpdate(bool)>
   31dd0:	e1a00004 	mov	r0, r4
   31dd4:	e28dd00c 	add	sp, sp, #12
   31dd8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31ddc:	e3e04000 	mvn	r4, #0
   31de0:	eafffffa 	b	31dd0 <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)+0xac>

00031de4 <BusAccess::busSocketEnable(int, bool)>:
   31de4:	e3510000 	cmp	r1, #0
   31de8:	b12fff1e 	bxlt	lr
   31dec:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   31df0:	e15c0001 	cmp	ip, r1
   31df4:	d12fff1e 	bxle	lr
   31df8:	e081c101 	add	ip, r1, r1, lsl #2
   31dfc:	e081108c 	add	r1, r1, ip, lsl #1
   31e00:	e0801101 	add	r1, r0, r1, lsl #2
   31e04:	e5c12004 	strb	r2, [r1, #4]
   31e08:	e3a01000 	mov	r1, #0
   31e0c:	ea0004bc 	b	33104 <BusAccess::waitEnablementUpdate(bool)>

00031e10 <BusAccess::busSocketIsEnabled(int)>:
   31e10:	e3510000 	cmp	r1, #0
   31e14:	ba000007 	blt	31e38 <BusAccess::busSocketIsEnabled(int)+0x28>
   31e18:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   31e1c:	e1530001 	cmp	r3, r1
   31e20:	da000004 	ble	31e38 <BusAccess::busSocketIsEnabled(int)+0x28>
   31e24:	e0813101 	add	r3, r1, r1, lsl #2
   31e28:	e0811083 	add	r1, r1, r3, lsl #1
   31e2c:	e0801101 	add	r1, r0, r1, lsl #2
   31e30:	e5d10004 	ldrb	r0, [r1, #4]
   31e34:	e12fff1e 	bx	lr
   31e38:	e3a00000 	mov	r0, #0
   31e3c:	e12fff1e 	bx	lr

00031e40 <BusAccess::getStatus(BusAccessStatusInfo&)>:
   31e40:	e1a03001 	mov	r3, r1
   31e44:	e3a0204c 	mov	r2, #76	; 0x4c
   31e48:	e2801f8d 	add	r1, r0, #564	; 0x234
   31e4c:	e92d4010 	push	{r4, lr}
   31e50:	e1a00003 	mov	r0, r3
   31e54:	ebffe22b 	bl	2a708 <memcpy>
   31e58:	e8bd8010 	pop	{r4, pc}

00031e5c <BusAccess::clearStatus()>:
   31e5c:	e3a03000 	mov	r3, #0
   31e60:	e5803234 	str	r3, [r0, #564]	; 0x234
   31e64:	e5803238 	str	r3, [r0, #568]	; 0x238
   31e68:	e580323c 	str	r3, [r0, #572]	; 0x23c
   31e6c:	e5803240 	str	r3, [r0, #576]	; 0x240
   31e70:	e5803244 	str	r3, [r0, #580]	; 0x244
   31e74:	e5803248 	str	r3, [r0, #584]	; 0x248
   31e78:	e580324c 	str	r3, [r0, #588]	; 0x24c
   31e7c:	e5803250 	str	r3, [r0, #592]	; 0x250
   31e80:	e5803268 	str	r3, [r0, #616]	; 0x268
   31e84:	e580326c 	str	r3, [r0, #620]	; 0x26c
   31e88:	e5803270 	str	r3, [r0, #624]	; 0x270
   31e8c:	e5803274 	str	r3, [r0, #628]	; 0x274
   31e90:	e5803278 	str	r3, [r0, #632]	; 0x278
   31e94:	e580327c 	str	r3, [r0, #636]	; 0x27c
   31e98:	e5803254 	str	r3, [r0, #596]	; 0x254
   31e9c:	e5803258 	str	r3, [r0, #600]	; 0x258
   31ea0:	e580325c 	str	r3, [r0, #604]	; 0x25c
   31ea4:	e5803260 	str	r3, [r0, #608]	; 0x260
   31ea8:	e5803264 	str	r3, [r0, #612]	; 0x264
   31eac:	e12fff1e 	bx	lr

00031eb0 <BusAccess::isUnderControl()>:
   31eb0:	e5d001f1 	ldrb	r0, [r0, #497]	; 0x1f1
   31eb4:	e12fff1e 	bx	lr

00031eb8 <BusAccess::controlRequest()>:
   31eb8:	e3a0c040 	mov	ip, #64	; 0x40
   31ebc:	e59f3018 	ldr	r3, [pc, #24]	; 31edc <BusAccess::controlRequest()+0x24>
   31ec0:	e3a01000 	mov	r1, #0
   31ec4:	e5932008 	ldr	r2, [r3, #8]
   31ec8:	e3a00013 	mov	r0, #19
   31ecc:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   31ed0:	e5832008 	str	r2, [r3, #8]
   31ed4:	e583c01c 	str	ip, [r3, #28]
   31ed8:	ea002f04 	b	3daf0 <digitalWrite>
   31edc:	20200000 	.word	0x20200000

00031ee0 <BusAccess::waitForBusAck(bool)>:
   31ee0:	e92d4070 	push	{r4, r5, r6, lr}
   31ee4:	e3a00008 	mov	r0, #8
   31ee8:	e1a04001 	mov	r4, r1
   31eec:	e3a01000 	mov	r1, #0
   31ef0:	eb002efe 	bl	3daf0 <digitalWrite>
   31ef4:	e3a00001 	mov	r0, #1
   31ef8:	ebffef7b 	bl	2dcec <microsDelay>
   31efc:	e3a01001 	mov	r1, #1
   31f00:	e3a00008 	mov	r0, #8
   31f04:	eb002ef9 	bl	3daf0 <digitalWrite>
   31f08:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   31f0c:	e59f10b0 	ldr	r1, [pc, #176]	; 31fc4 <BusAccess::waitForBusAck(bool)+0xe4>
   31f10:	ea000001 	b	31f1c <BusAccess::waitForBusAck(bool)+0x3c>
   31f14:	e2522001 	subs	r2, r2, #1
   31f18:	0a000005 	beq	31f34 <BusAccess::waitForBusAck(bool)+0x54>
   31f1c:	e5913034 	ldr	r3, [r1, #52]	; 0x34
   31f20:	e1a03123 	lsr	r3, r3, #2
   31f24:	e2233001 	eor	r3, r3, #1
   31f28:	e2033001 	and	r3, r3, #1
   31f2c:	e1540003 	cmp	r4, r3
   31f30:	1afffff7 	bne	31f14 <BusAccess::waitForBusAck(bool)+0x34>
   31f34:	e59f6088 	ldr	r6, [pc, #136]	; 31fc4 <BusAccess::waitForBusAck(bool)+0xe4>
   31f38:	e5963034 	ldr	r3, [r6, #52]	; 0x34
   31f3c:	e1a03123 	lsr	r3, r3, #2
   31f40:	e2233001 	eor	r3, r3, #1
   31f44:	e2033001 	and	r3, r3, #1
   31f48:	e1540003 	cmp	r4, r3
   31f4c:	0a000013 	beq	31fa0 <BusAccess::waitForBusAck(bool)+0xc0>
   31f50:	e59f5070 	ldr	r5, [pc, #112]	; 31fc8 <BusAccess::waitForBusAck(bool)+0xe8>
   31f54:	ea00000b 	b	31f88 <BusAccess::waitForBusAck(bool)+0xa8>
   31f58:	e3a00001 	mov	r0, #1
   31f5c:	ebffef62 	bl	2dcec <microsDelay>
   31f60:	e3a01000 	mov	r1, #0
   31f64:	e3a00008 	mov	r0, #8
   31f68:	eb002ee0 	bl	3daf0 <digitalWrite>
   31f6c:	e3a00001 	mov	r0, #1
   31f70:	ebffef5d 	bl	2dcec <microsDelay>
   31f74:	e3a01001 	mov	r1, #1
   31f78:	e3a00008 	mov	r0, #8
   31f7c:	eb002edb 	bl	3daf0 <digitalWrite>
   31f80:	e2555001 	subs	r5, r5, #1
   31f84:	0a000005 	beq	31fa0 <BusAccess::waitForBusAck(bool)+0xc0>
   31f88:	e5963034 	ldr	r3, [r6, #52]	; 0x34
   31f8c:	e1a03123 	lsr	r3, r3, #2
   31f90:	e2233001 	eor	r3, r3, #1
   31f94:	e2033001 	and	r3, r3, #1
   31f98:	e1540003 	cmp	r4, r3
   31f9c:	1affffed 	bne	31f58 <BusAccess::waitForBusAck(bool)+0x78>
   31fa0:	e59f301c 	ldr	r3, [pc, #28]	; 31fc4 <BusAccess::waitForBusAck(bool)+0xe4>
   31fa4:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   31fa8:	e1a00120 	lsr	r0, r0, #2
   31fac:	e2200001 	eor	r0, r0, #1
   31fb0:	e2000001 	and	r0, r0, #1
   31fb4:	e0400004 	sub	r0, r0, r4
   31fb8:	e16f0f10 	clz	r0, r0
   31fbc:	e1a002a0 	lsr	r0, r0, #5
   31fc0:	e8bd8070 	pop	{r4, r5, r6, pc}
   31fc4:	20200000 	.word	0x20200000
   31fc8:	0007a120 	.word	0x0007a120

00031fcc <BusAccess::controlRelease()>:
   31fcc:	e5903000 	ldr	r3, [r0]
   31fd0:	e92d4070 	push	{r4, r5, r6, lr}
   31fd4:	e3530011 	cmp	r3, #17
   31fd8:	e1a04000 	mov	r4, r0
   31fdc:	0a000047 	beq	32100 <BusAccess::controlRelease()+0x134>
   31fe0:	e3a06001 	mov	r6, #1
   31fe4:	e59f5178 	ldr	r5, [pc, #376]	; 32164 <BusAccess::controlRelease()+0x198>
   31fe8:	e59f3178 	ldr	r3, [pc, #376]	; 32168 <BusAccess::controlRelease()+0x19c>
   31fec:	e3a00014 	mov	r0, #20
   31ff0:	e585301c 	str	r3, [r5, #28]
   31ff4:	eb002ee8 	bl	3db9c <lowlev_cycleDelay>
   31ff8:	e3a00014 	mov	r0, #20
   31ffc:	e5856028 	str	r6, [r5, #40]	; 0x28
   32000:	eb002ee5 	bl	3db9c <lowlev_cycleDelay>
   32004:	e585601c 	str	r6, [r5, #28]
   32008:	e3a01040 	mov	r1, #64	; 0x40
   3200c:	e59f3150 	ldr	r3, [pc, #336]	; 32164 <BusAccess::controlRelease()+0x198>
   32010:	e5932008 	ldr	r2, [r3, #8]
   32014:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   32018:	e5832008 	str	r2, [r3, #8]
   3201c:	e583101c 	str	r1, [r3, #28]
   32020:	e5942000 	ldr	r2, [r4]
   32024:	e3520011 	cmp	r2, #17
   32028:	03a02c0e 	moveq	r2, #3584	; 0xe00
   3202c:	13a01801 	movne	r1, #65536	; 0x10000
   32030:	13a02c0e 	movne	r2, #3584	; 0xe00
   32034:	1583101c 	strne	r1, [r3, #28]
   32038:	e5832028 	str	r2, [r3, #40]	; 0x28
   3203c:	e5943000 	ldr	r3, [r4]
   32040:	e3530011 	cmp	r3, #17
   32044:	0a000042 	beq	32154 <BusAccess::controlRelease()+0x188>
   32048:	e3a01001 	mov	r1, #1
   3204c:	e1a00004 	mov	r0, r4
   32050:	eb00047d 	bl	3324c <BusAccess::waitResetFlipFlops(bool)>
   32054:	e1a00004 	mov	r0, r4
   32058:	eb0004a7 	bl	332fc <BusAccess::waitClearDetected()>
   3205c:	e3a01000 	mov	r1, #0
   32060:	e1a00004 	mov	r0, r4
   32064:	eb000426 	bl	33104 <BusAccess::waitEnablementUpdate(bool)>
   32068:	e1a00004 	mov	r0, r4
   3206c:	ebfffcf7 	bl	31450 <BusAccess::busActionCheck()>
   32070:	e1a00004 	mov	r0, r4
   32074:	ebfffcf9 	bl	31460 <BusAccess::busActionHandleStart()>
   32078:	e5940000 	ldr	r0, [r4]
   3207c:	e59f10e8 	ldr	r1, [pc, #232]	; 3216c <BusAccess::controlRelease()+0x1a0>
   32080:	e3500011 	cmp	r0, #17
   32084:	e59f30e4 	ldr	r3, [pc, #228]	; 32170 <BusAccess::controlRelease()+0x1a4>
   32088:	11a03001 	movne	r3, r1
   3208c:	e59f20d0 	ldr	r2, [pc, #208]	; 32164 <BusAccess::controlRelease()+0x198>
   32090:	e3a01000 	mov	r1, #0
   32094:	e582301c 	str	r3, [r2, #28]
   32098:	e3a00011 	mov	r0, #17
   3209c:	eb002e52 	bl	3d9ec <pinMode>
   320a0:	e3a01000 	mov	r1, #0
   320a4:	e3a00012 	mov	r0, #18
   320a8:	eb002e4f 	bl	3d9ec <pinMode>
   320ac:	e3a01000 	mov	r1, #0
   320b0:	e1a00001 	mov	r0, r1
   320b4:	eb002e4c 	bl	3d9ec <pinMode>
   320b8:	e3a01000 	mov	r1, #0
   320bc:	e3a00001 	mov	r0, #1
   320c0:	eb002e49 	bl	3d9ec <pinMode>
   320c4:	e3a01000 	mov	r1, #0
   320c8:	e3a00005 	mov	r0, #5
   320cc:	eb002e46 	bl	3d9ec <pinMode>
   320d0:	e5943000 	ldr	r3, [r4]
   320d4:	e3530011 	cmp	r3, #17
   320d8:	0a000002 	beq	320e8 <BusAccess::controlRelease()+0x11c>
   320dc:	e3a01000 	mov	r1, #0
   320e0:	e3a00003 	mov	r0, #3
   320e4:	eb002e40 	bl	3d9ec <pinMode>
   320e8:	e3a01000 	mov	r1, #0
   320ec:	e1a00004 	mov	r0, r4
   320f0:	ebffff7a 	bl	31ee0 <BusAccess::waitForBusAck(bool)>
   320f4:	e3a03000 	mov	r3, #0
   320f8:	e5c431f1 	strb	r3, [r4, #497]	; 0x1f1
   320fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   32100:	e3a02040 	mov	r2, #64	; 0x40
   32104:	e3a06001 	mov	r6, #1
   32108:	e59f5054 	ldr	r5, [pc, #84]	; 32164 <BusAccess::controlRelease()+0x198>
   3210c:	e59f3060 	ldr	r3, [pc, #96]	; 32174 <BusAccess::controlRelease()+0x1a8>
   32110:	e5852028 	str	r2, [r5, #40]	; 0x28
   32114:	e5952008 	ldr	r2, [r5, #8]
   32118:	e59f1058 	ldr	r1, [pc, #88]	; 32178 <BusAccess::controlRelease()+0x1ac>
   3211c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   32120:	e1823003 	orr	r3, r2, r3
   32124:	e5853008 	str	r3, [r5, #8]
   32128:	e3a00064 	mov	r0, #100	; 0x64
   3212c:	e585101c 	str	r1, [r5, #28]
   32130:	eb002e99 	bl	3db9c <lowlev_cycleDelay>
   32134:	e3a00014 	mov	r0, #20
   32138:	e5856028 	str	r6, [r5, #40]	; 0x28
   3213c:	eb002e96 	bl	3db9c <lowlev_cycleDelay>
   32140:	e585601c 	str	r6, [r5, #28]
   32144:	e5953008 	ldr	r3, [r5, #8]
   32148:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   3214c:	e5853008 	str	r3, [r5, #8]
   32150:	eaffffac 	b	32008 <BusAccess::controlRelease()+0x3c>
   32154:	e3a01001 	mov	r1, #1
   32158:	e3a00003 	mov	r0, #3
   3215c:	eb002e63 	bl	3daf0 <digitalWrite>
   32160:	eaffffb8 	b	32048 <BusAccess::controlRelease()+0x7c>
   32164:	20200000 	.word	0x20200000
   32168:	0006000b 	.word	0x0006000b
   3216c:	000e002b 	.word	0x000e002b
   32170:	000e0023 	.word	0x000e0023
   32174:	00249249 	.word	0x00249249
   32178:	00100002 	.word	0x00100002

0003217c <BusAccess::controlBusRead()>:
   3217c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32180:	e1a06000 	mov	r6, r0
   32184:	ebffeed0 	bl	2dccc <micros>
   32188:	e3a09000 	mov	r9, #0
   3218c:	e1a07000 	mov	r7, r0
   32190:	e3a08040 	mov	r8, #64	; 0x40
   32194:	e59f50c4 	ldr	r5, [pc, #196]	; 32260 <BusAccess::controlBusRead()+0xe4>
   32198:	ea000023 	b	3222c <BusAccess::controlBusRead()+0xb0>
   3219c:	e1a03922 	lsr	r3, r2, #18
   321a0:	e2233001 	eor	r3, r3, #1
   321a4:	e2033001 	and	r3, r3, #1
   321a8:	e3120802 	tst	r2, #131072	; 0x20000
   321ac:	03833002 	orreq	r3, r3, #2
   321b0:	e3120001 	tst	r2, #1
   321b4:	03833004 	orreq	r3, r3, #4
   321b8:	e3120002 	tst	r2, #2
   321bc:	03833008 	orreq	r3, r3, #8
   321c0:	e3120020 	tst	r2, #32
   321c4:	03833020 	orreq	r3, r3, #32
   321c8:	e3120008 	tst	r2, #8
   321cc:	03833010 	orreq	r3, r3, #16
   321d0:	e3120004 	tst	r2, #4
   321d4:	03833b01 	orreq	r3, r3, #1024	; 0x400
   321d8:	e3510011 	cmp	r1, #17
   321dc:	e1a04003 	mov	r4, r3
   321e0:	1a000002 	bne	321f0 <BusAccess::controlBusRead()+0x74>
   321e4:	e3120601 	tst	r2, #1048576	; 0x100000
   321e8:	e3c34010 	bic	r4, r3, #16
   321ec:	03844010 	orreq	r4, r4, #16
   321f0:	e314000c 	tst	r4, #12
   321f4:	0a000001 	beq	32200 <BusAccess::controlBusRead()+0x84>
   321f8:	e3140003 	tst	r4, #3
   321fc:	1a000015 	bne	32258 <BusAccess::controlBusRead()+0xdc>
   32200:	e2043018 	and	r3, r4, #24
   32204:	e3530018 	cmp	r3, #24
   32208:	0a000012 	beq	32258 <BusAccess::controlBusRead()+0xdc>
   3220c:	ebffeeae 	bl	2dccc <micros>
   32210:	e3a0200a 	mov	r2, #10
   32214:	e1a01007 	mov	r1, r7
   32218:	ebffeec9 	bl	2dd44 <isTimeout>
   3221c:	e2899001 	add	r9, r9, #1
   32220:	e3500000 	cmp	r0, #0
   32224:	13590064 	cmpne	r9, #100	; 0x64
   32228:	ca00000a 	bgt	32258 <BusAccess::controlBusRead()+0xdc>
   3222c:	e5961000 	ldr	r1, [r6]
   32230:	e5952034 	ldr	r2, [r5, #52]	; 0x34
   32234:	e3510011 	cmp	r1, #17
   32238:	1affffd7 	bne	3219c <BusAccess::controlBusRead()+0x20>
   3223c:	e3a00064 	mov	r0, #100	; 0x64
   32240:	e5858028 	str	r8, [r5, #40]	; 0x28
   32244:	eb002e54 	bl	3db9c <lowlev_cycleDelay>
   32248:	e5952034 	ldr	r2, [r5, #52]	; 0x34
   3224c:	e585801c 	str	r8, [r5, #28]
   32250:	e5961000 	ldr	r1, [r6]
   32254:	eaffffd0 	b	3219c <BusAccess::controlBusRead()+0x20>
   32258:	e1a00004 	mov	r0, r4
   3225c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32260:	20200000 	.word	0x20200000

00032264 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>:
   32264:	e5903000 	ldr	r3, [r0]
   32268:	e92d4070 	push	{r4, r5, r6, lr}
   3226c:	e3530011 	cmp	r3, #17
   32270:	e1a06002 	mov	r6, r2
   32274:	03a02040 	moveq	r2, #64	; 0x40
   32278:	059f3164 	ldreq	r3, [pc, #356]	; 323e4 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x180>
   3227c:	e1a05001 	mov	r5, r1
   32280:	05832028 	streq	r2, [r3, #40]	; 0x28
   32284:	e59f3158 	ldr	r3, [pc, #344]	; 323e4 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x180>
   32288:	e1a04000 	mov	r4, r0
   3228c:	e5932008 	ldr	r2, [r3, #8]
   32290:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   32294:	e5832008 	str	r2, [r3, #8]
   32298:	e5902000 	ldr	r2, [r0]
   3229c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   322a0:	e3520011 	cmp	r2, #17
   322a4:	03a02c0e 	moveq	r2, #3584	; 0xe00
   322a8:	13a02801 	movne	r2, #65536	; 0x10000
   322ac:	13a01c0e 	movne	r1, #3584	; 0xe00
   322b0:	1583201c 	strne	r2, [r3, #28]
   322b4:	05832028 	streq	r2, [r3, #40]	; 0x28
   322b8:	15831028 	strne	r1, [r3, #40]	; 0x28
   322bc:	0583201c 	streq	r2, [r3, #28]
   322c0:	1583101c 	strne	r1, [r3, #28]
   322c4:	15832028 	strne	r2, [r3, #40]	; 0x28
   322c8:	eb002e33 	bl	3db9c <lowlev_cycleDelay>
   322cc:	e59f2110 	ldr	r2, [pc, #272]	; 323e4 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x180>
   322d0:	e5941000 	ldr	r1, [r4]
   322d4:	e5923034 	ldr	r3, [r2, #52]	; 0x34
   322d8:	e3510011 	cmp	r1, #17
   322dc:	e1a03623 	lsr	r3, r3, #12
   322e0:	e2033cff 	and	r3, r3, #65280	; 0xff00
   322e4:	e5853000 	str	r3, [r5]
   322e8:	0a000038 	beq	323d0 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x16c>
   322ec:	e3a03801 	mov	r3, #65536	; 0x10000
   322f0:	e3a00c0e 	mov	r0, #3584	; 0xe00
   322f4:	e3a01c06 	mov	r1, #1536	; 0x600
   322f8:	e582301c 	str	r3, [r2, #28]
   322fc:	e5820028 	str	r0, [r2, #40]	; 0x28
   32300:	e582101c 	str	r1, [r2, #28]
   32304:	e5823028 	str	r3, [r2, #40]	; 0x28
   32308:	e3a00f7d 	mov	r0, #500	; 0x1f4
   3230c:	eb002e22 	bl	3db9c <lowlev_cycleDelay>
   32310:	e59f10cc 	ldr	r1, [pc, #204]	; 323e4 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x180>
   32314:	e5940000 	ldr	r0, [r4]
   32318:	e5912034 	ldr	r2, [r1, #52]	; 0x34
   3231c:	e5953000 	ldr	r3, [r5]
   32320:	e1a02202 	lsl	r2, r2, #4
   32324:	e1833c22 	orr	r3, r3, r2, lsr #24
   32328:	e3500011 	cmp	r0, #17
   3232c:	e5853000 	str	r3, [r5]
   32330:	13a02801 	movne	r2, #65536	; 0x10000
   32334:	03a03c0e 	moveq	r3, #3584	; 0xe00
   32338:	13a03c0e 	movne	r3, #3584	; 0xe00
   3233c:	1581201c 	strne	r2, [r1, #28]
   32340:	e3a00f7d 	mov	r0, #500	; 0x1f4
   32344:	e5813028 	str	r3, [r1, #40]	; 0x28
   32348:	eb002e13 	bl	3db9c <lowlev_cycleDelay>
   3234c:	e3a02040 	mov	r2, #64	; 0x40
   32350:	e59f308c 	ldr	r3, [pc, #140]	; 323e4 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x180>
   32354:	e583201c 	str	r2, [r3, #28]
   32358:	e5942000 	ldr	r2, [r4]
   3235c:	e3520011 	cmp	r2, #17
   32360:	03a02c02 	moveq	r2, #512	; 0x200
   32364:	13a02801 	movne	r2, #65536	; 0x10000
   32368:	03a01c0e 	moveq	r1, #3584	; 0xe00
   3236c:	13a00c0e 	movne	r0, #3584	; 0xe00
   32370:	13a01c02 	movne	r1, #512	; 0x200
   32374:	15830028 	strne	r0, [r3, #40]	; 0x28
   32378:	05831028 	streq	r1, [r3, #40]	; 0x28
   3237c:	1583101c 	strne	r1, [r3, #28]
   32380:	0583201c 	streq	r2, [r3, #28]
   32384:	15832028 	strne	r2, [r3, #40]	; 0x28
   32388:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   3238c:	eb002e02 	bl	3db9c <lowlev_cycleDelay>
   32390:	e5943000 	ldr	r3, [r4]
   32394:	e3a00f7d 	mov	r0, #500	; 0x1f4
   32398:	e3530011 	cmp	r3, #17
   3239c:	03a02c0e 	moveq	r2, #3584	; 0xe00
   323a0:	13a02801 	movne	r2, #65536	; 0x10000
   323a4:	059f3038 	ldreq	r3, [pc, #56]	; 323e4 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x180>
   323a8:	159f3034 	ldrne	r3, [pc, #52]	; 323e4 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x180>
   323ac:	05832028 	streq	r2, [r3, #40]	; 0x28
   323b0:	1583201c 	strne	r2, [r3, #28]
   323b4:	eb002df8 	bl	3db9c <lowlev_cycleDelay>
   323b8:	e59f3024 	ldr	r3, [pc, #36]	; 323e4 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x180>
   323bc:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   323c0:	e1a03a23 	lsr	r3, r3, #20
   323c4:	e6ef3073 	uxtb	r3, r3
   323c8:	e5863000 	str	r3, [r6]
   323cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   323d0:	e3a01c0e 	mov	r1, #3584	; 0xe00
   323d4:	e3a03c06 	mov	r3, #1536	; 0x600
   323d8:	e5821028 	str	r1, [r2, #40]	; 0x28
   323dc:	e582301c 	str	r3, [r2, #28]
   323e0:	eaffffc8 	b	32308 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0xa4>
   323e4:	20200000 	.word	0x20200000

000323e8 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)>:
   323e8:	e92d4070 	push	{r4, r5, r6, lr}
   323ec:	e1a05002 	mov	r5, r2
   323f0:	e59f30b4 	ldr	r3, [pc, #180]	; 324ac <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xc4>
   323f4:	e3550001 	cmp	r5, #1
   323f8:	e59f20b0 	ldr	r2, [pc, #176]	; 324b0 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xc8>
   323fc:	e3a0cc02 	mov	ip, #512	; 0x200
   32400:	11a02003 	movne	r2, r3
   32404:	e1a04000 	mov	r4, r0
   32408:	e1a01a01 	lsl	r1, r1, #20
   3240c:	e59f30a0 	ldr	r3, [pc, #160]	; 324b4 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xcc>
   32410:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
   32414:	e22106ff 	eor	r0, r1, #267386880	; 0xff00000
   32418:	e583101c 	str	r1, [r3, #28]
   3241c:	e5830028 	str	r0, [r3, #40]	; 0x28
   32420:	e5832028 	str	r2, [r3, #40]	; 0x28
   32424:	e583c01c 	str	ip, [r3, #28]
   32428:	e5942000 	ldr	r2, [r4]
   3242c:	e3a000fa 	mov	r0, #250	; 0xfa
   32430:	e3520011 	cmp	r2, #17
   32434:	03a02802 	moveq	r2, #131072	; 0x20000
   32438:	13a02803 	movne	r2, #196608	; 0x30000
   3243c:	e5832028 	str	r2, [r3, #40]	; 0x28
   32440:	eb002dd5 	bl	3db9c <lowlev_cycleDelay>
   32444:	e5943000 	ldr	r3, [r4]
   32448:	e3530011 	cmp	r3, #17
   3244c:	0a000007 	beq	32470 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0x88>
   32450:	e59f2060 	ldr	r2, [pc, #96]	; 324b8 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xd0>
   32454:	e59f1060 	ldr	r1, [pc, #96]	; 324bc <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xd4>
   32458:	e3550001 	cmp	r5, #1
   3245c:	01a05002 	moveq	r5, r2
   32460:	11a05001 	movne	r5, r1
   32464:	e59f3048 	ldr	r3, [pc, #72]	; 324b4 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xcc>
   32468:	e583501c 	str	r5, [r3, #28]
   3246c:	e8bd8070 	pop	{r4, r5, r6, pc}
   32470:	e59f1048 	ldr	r1, [pc, #72]	; 324c0 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xd8>
   32474:	e59f2048 	ldr	r2, [pc, #72]	; 324c4 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xdc>
   32478:	e3550001 	cmp	r5, #1
   3247c:	01a05002 	moveq	r5, r2
   32480:	11a05001 	movne	r5, r1
   32484:	e59f3028 	ldr	r3, [pc, #40]	; 324b4 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xcc>
   32488:	e583501c 	str	r5, [r3, #28]
   3248c:	e5942000 	ldr	r2, [r4]
   32490:	e3520011 	cmp	r2, #17
   32494:	03a02c0e 	moveq	r2, #3584	; 0xe00
   32498:	13a01801 	movne	r1, #65536	; 0x10000
   3249c:	13a02c0e 	movne	r2, #3584	; 0xe00
   324a0:	1583101c 	strne	r1, [r3, #28]
   324a4:	e5832028 	str	r2, [r3, #40]	; 0x28
   324a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   324ac:	00000e41 	.word	0x00000e41
   324b0:	00000e42 	.word	0x00000e42
   324b4:	20200000 	.word	0x20200000
   324b8:	00030042 	.word	0x00030042
   324bc:	00030041 	.word	0x00030041
   324c0:	00020041 	.word	0x00020041
   324c4:	00020042 	.word	0x00020042

000324c8 <BusAccess::byteRead(BusAccess::BlockAccessType)>:
   324c8:	e92d4070 	push	{r4, r5, r6, lr}
   324cc:	e1a04001 	mov	r4, r1
   324d0:	e59f2090 	ldr	r2, [pc, #144]	; 32568 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xa0>
   324d4:	e3540001 	cmp	r4, #1
   324d8:	e59f308c 	ldr	r3, [pc, #140]	; 3256c <BusAccess::byteRead(BusAccess::BlockAccessType)+0xa4>
   324dc:	e3a01d09 	mov	r1, #576	; 0x240
   324e0:	11a03002 	movne	r3, r2
   324e4:	e59f2084 	ldr	r2, [pc, #132]	; 32570 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xa8>
   324e8:	e1a05000 	mov	r5, r0
   324ec:	e5823028 	str	r3, [r2, #40]	; 0x28
   324f0:	e582101c 	str	r1, [r2, #28]
   324f4:	e5903000 	ldr	r3, [r0]
   324f8:	e3a00f7d 	mov	r0, #500	; 0x1f4
   324fc:	e3530011 	cmp	r3, #17
   32500:	13a03801 	movne	r3, #65536	; 0x10000
   32504:	15823028 	strne	r3, [r2, #40]	; 0x28
   32508:	eb002da3 	bl	3db9c <lowlev_cycleDelay>
   3250c:	e59f305c 	ldr	r3, [pc, #92]	; 32570 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xa8>
   32510:	e5952000 	ldr	r2, [r5]
   32514:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   32518:	e3520011 	cmp	r2, #17
   3251c:	e1a00a20 	lsr	r0, r0, #20
   32520:	e6ef0070 	uxtb	r0, r0
   32524:	0a000006 	beq	32544 <BusAccess::byteRead(BusAccess::BlockAccessType)+0x7c>
   32528:	e59f1044 	ldr	r1, [pc, #68]	; 32574 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xac>
   3252c:	e59f2044 	ldr	r2, [pc, #68]	; 32578 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xb0>
   32530:	e3540001 	cmp	r4, #1
   32534:	01a04001 	moveq	r4, r1
   32538:	11a04002 	movne	r4, r2
   3253c:	e583401c 	str	r4, [r3, #28]
   32540:	e8bd8070 	pop	{r4, r5, r6, pc}
   32544:	e59f1030 	ldr	r1, [pc, #48]	; 3257c <BusAccess::byteRead(BusAccess::BlockAccessType)+0xb4>
   32548:	e59fc030 	ldr	ip, [pc, #48]	; 32580 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xb8>
   3254c:	e3540001 	cmp	r4, #1
   32550:	e3a02c0e 	mov	r2, #3584	; 0xe00
   32554:	01a04001 	moveq	r4, r1
   32558:	11a0400c 	movne	r4, ip
   3255c:	e5832028 	str	r2, [r3, #40]	; 0x28
   32560:	e583401c 	str	r4, [r3, #28]
   32564:	e8bd8070 	pop	{r4, r5, r6, pc}
   32568:	00040e01 	.word	0x00040e01
   3256c:	00040e02 	.word	0x00040e02
   32570:	20200000 	.word	0x20200000
   32574:	00050002 	.word	0x00050002
   32578:	00050001 	.word	0x00050001
   3257c:	00040002 	.word	0x00040002
   32580:	00040001 	.word	0x00040001

00032584 <BusAccess::clockSetup()>:
   32584:	e3a03004 	mov	r3, #4
   32588:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3258c:	e5d02228 	ldrb	r2, [r0, #552]	; 0x228
   32590:	e1a04000 	mov	r4, r0
   32594:	e3520000 	cmp	r2, #0
   32598:	e24dd020 	sub	sp, sp, #32
   3259c:	e5803230 	str	r3, [r0, #560]	; 0x230
   325a0:	0580322c 	streq	r3, [r0, #556]	; 0x22c
   325a4:	1a000001 	bne	325b0 <BusAccess::clockSetup()+0x2c>
   325a8:	e28dd020 	add	sp, sp, #32
   325ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   325b0:	e3a07000 	mov	r7, #0
   325b4:	e59f5178 	ldr	r5, [pc, #376]	; 32734 <BusAccess::clockSetup()+0x1b0>
   325b8:	e59f1178 	ldr	r1, [pc, #376]	; 32738 <BusAccess::clockSetup()+0x1b4>
   325bc:	e5952070 	ldr	r2, [r5, #112]	; 0x70
   325c0:	e0022001 	and	r2, r2, r1
   325c4:	e382245a 	orr	r2, r2, #1509949440	; 0x5a000000
   325c8:	e5852070 	str	r2, [r5, #112]	; 0x70
   325cc:	e580322c 	str	r3, [r0, #556]	; 0x22c
   325d0:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   325d4:	e5c07228 	strb	r7, [r0, #552]	; 0x228
   325d8:	e0033001 	and	r3, r3, r1
   325dc:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   325e0:	e5853070 	str	r3, [r5, #112]	; 0x70
   325e4:	e590322c 	ldr	r3, [r0, #556]	; 0x22c
   325e8:	e3730001 	cmn	r3, #1
   325ec:	0a000003 	beq	32600 <BusAccess::clockSetup()+0x7c>
   325f0:	e5903230 	ldr	r3, [r0, #560]	; 0x230
   325f4:	e1530007 	cmp	r3, r7
   325f8:	11a06007 	movne	r6, r7
   325fc:	1a000012 	bne	3264c <BusAccess::clockSetup()+0xc8>
   32600:	e3a03000 	mov	r3, #0
   32604:	e5c43228 	strb	r3, [r4, #552]	; 0x228
   32608:	ebffd105 	bl	26a24 <CLogger::Get()>
   3260c:	e5942230 	ldr	r2, [r4, #560]	; 0x230
   32610:	e594322c 	ldr	r3, [r4, #556]	; 0x22c
   32614:	e59f1120 	ldr	r1, [pc, #288]	; 3273c <BusAccess::clockSetup()+0x1b8>
   32618:	e58d2004 	str	r2, [sp, #4]
   3261c:	e58d3000 	str	r3, [sp]
   32620:	e3a02001 	mov	r2, #1
   32624:	e59f3114 	ldr	r3, [pc, #276]	; 32740 <BusAccess::clockSetup()+0x1bc>
   32628:	ebffd03f 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3262c:	e28dd020 	add	sp, sp, #32
   32630:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32634:	e3a00001 	mov	r0, #1
   32638:	e2866001 	add	r6, r6, #1
   3263c:	ebffedaa 	bl	2dcec <microsDelay>
   32640:	e3560064 	cmp	r6, #100	; 0x64
   32644:	e59570a0 	ldr	r7, [r5, #160]	; 0xa0
   32648:	0a000002 	beq	32658 <BusAccess::clockSetup()+0xd4>
   3264c:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   32650:	e3130080 	tst	r3, #128	; 0x80
   32654:	1afffff6 	bne	32634 <BusAccess::clockSetup()+0xb0>
   32658:	e5d41230 	ldrb	r1, [r4, #560]	; 0x230
   3265c:	e5d4022c 	ldrb	r0, [r4, #556]	; 0x22c
   32660:	eb002ce1 	bl	3d9ec <pinMode>
   32664:	e5940224 	ldr	r0, [r4, #548]	; 0x224
   32668:	e59f20d4 	ldr	r2, [pc, #212]	; 32744 <BusAccess::clockSetup()+0x1c0>
   3266c:	e59f10d4 	ldr	r1, [pc, #212]	; 32748 <BusAccess::clockSetup()+0x1c4>
   32670:	e1500002 	cmp	r0, r2
   32674:	e59f20d0 	ldr	r2, [pc, #208]	; 3274c <BusAccess::clockSetup()+0x1c8>
   32678:	e59f30d0 	ldr	r3, [pc, #208]	; 32750 <BusAccess::clockSetup()+0x1cc>
   3267c:	81a03001 	movhi	r3, r1
   32680:	e59f80cc 	ldr	r8, [pc, #204]	; 32754 <BusAccess::clockSetup()+0x1d0>
   32684:	81a08002 	movhi	r8, r2
   32688:	e59f90a4 	ldr	r9, [pc, #164]	; 32734 <BusAccess::clockSetup()+0x1b0>
   3268c:	e59f20c4 	ldr	r2, [pc, #196]	; 32758 <BusAccess::clockSetup()+0x1d4>
   32690:	e5893070 	str	r3, [r9, #112]	; 0x70
   32694:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32698:	e59fa0bc 	ldr	sl, [pc, #188]	; 3275c <BusAccess::clockSetup()+0x1d8>
   3269c:	81a0a002 	movhi	sl, r2
   326a0:	ebffed91 	bl	2dcec <microsDelay>
   326a4:	e5941224 	ldr	r1, [r4, #548]	; 0x224
   326a8:	e1a00008 	mov	r0, r8
   326ac:	eb0029e6 	bl	3ce4c <__udivsi3>
   326b0:	e1a05000 	mov	r5, r0
   326b4:	e59f10a4 	ldr	r1, [pc, #164]	; 32760 <BusAccess::clockSetup()+0x1dc>
   326b8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   326bc:	e1550001 	cmp	r5, r1
   326c0:	21a05001 	movcs	r5, r1
   326c4:	e1a03605 	lsl	r3, r5, #12
   326c8:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   326cc:	e5893074 	str	r3, [r9, #116]	; 0x74
   326d0:	ebffed85 	bl	2dcec <microsDelay>
   326d4:	e3a03001 	mov	r3, #1
   326d8:	e1a01005 	mov	r1, r5
   326dc:	e589a070 	str	sl, [r9, #112]	; 0x70
   326e0:	e1a00008 	mov	r0, r8
   326e4:	e5c43228 	strb	r3, [r4, #552]	; 0x228
   326e8:	eb0029d7 	bl	3ce4c <__udivsi3>
   326ec:	e1a09000 	mov	r9, r0
   326f0:	ebffd0cb 	bl	26a24 <CLogger::Get()>
   326f4:	e5941230 	ldr	r1, [r4, #560]	; 0x230
   326f8:	e594222c 	ldr	r2, [r4, #556]	; 0x22c
   326fc:	e5943224 	ldr	r3, [r4, #548]	; 0x224
   32700:	e58d1014 	str	r1, [sp, #20]
   32704:	e58d2010 	str	r2, [sp, #16]
   32708:	e58d3004 	str	r3, [sp, #4]
   3270c:	e3a02003 	mov	r2, #3
   32710:	e1cd61f8 	strd	r6, [sp, #24]
   32714:	e59f3048 	ldr	r3, [pc, #72]	; 32764 <BusAccess::clockSetup()+0x1e0>
   32718:	e59f101c 	ldr	r1, [pc, #28]	; 3273c <BusAccess::clockSetup()+0x1b8>
   3271c:	e58d500c 	str	r5, [sp, #12]
   32720:	e58d8008 	str	r8, [sp, #8]
   32724:	e58d9000 	str	r9, [sp]
   32728:	ebffcfff 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3272c:	e28dd020 	add	sp, sp, #32
   32730:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32734:	20101000 	.word	0x20101000
   32738:	00000f0f 	.word	0x00000f0f
   3273c:	000461c4 	.word	0x000461c4
   32740:	000461a4 	.word	0x000461a4
   32744:	0003d08f 	.word	0x0003d08f
   32748:	5a000006 	.word	0x5a000006
   3274c:	1dcd6500 	.word	0x1dcd6500
   32750:	5a000001 	.word	0x5a000001
   32754:	0124f800 	.word	0x0124f800
   32758:	5a000016 	.word	0x5a000016
   3275c:	5a000011 	.word	0x5a000011
   32760:	00000fff 	.word	0x00000fff
   32764:	000461d0 	.word	0x000461d0

00032768 <BusAccess::clockSetFreqHz(unsigned long)>:
   32768:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3276c:	e1a05001 	mov	r5, r1
   32770:	e1a04000 	mov	r4, r0
   32774:	e5d06228 	ldrb	r6, [r0, #552]	; 0x228
   32778:	e24dd020 	sub	sp, sp, #32
   3277c:	ebffd0a8 	bl	26a24 <CLogger::Get()>
   32780:	e59f31d0 	ldr	r3, [pc, #464]	; 32958 <BusAccess::clockSetFreqHz(unsigned long)+0x1f0>
   32784:	e3a02004 	mov	r2, #4
   32788:	e88d0060 	stm	sp, {r5, r6}
   3278c:	e59f11c8 	ldr	r1, [pc, #456]	; 3295c <BusAccess::clockSetFreqHz(unsigned long)+0x1f4>
   32790:	ebffcfe5 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32794:	e5d43228 	ldrb	r3, [r4, #552]	; 0x228
   32798:	e3530000 	cmp	r3, #0
   3279c:	1a000004 	bne	327b4 <BusAccess::clockSetFreqHz(unsigned long)+0x4c>
   327a0:	e3560000 	cmp	r6, #0
   327a4:	e5845224 	str	r5, [r4, #548]	; 0x224
   327a8:	1a00000c 	bne	327e0 <BusAccess::clockSetFreqHz(unsigned long)+0x78>
   327ac:	e28dd020 	add	sp, sp, #32
   327b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   327b4:	e3a01000 	mov	r1, #0
   327b8:	e59f21a0 	ldr	r2, [pc, #416]	; 32960 <BusAccess::clockSetFreqHz(unsigned long)+0x1f8>
   327bc:	e59f31a0 	ldr	r3, [pc, #416]	; 32964 <BusAccess::clockSetFreqHz(unsigned long)+0x1fc>
   327c0:	e5920070 	ldr	r0, [r2, #112]	; 0x70
   327c4:	e3560000 	cmp	r6, #0
   327c8:	e0033000 	and	r3, r3, r0
   327cc:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   327d0:	e5823070 	str	r3, [r2, #112]	; 0x70
   327d4:	e5c41228 	strb	r1, [r4, #552]	; 0x228
   327d8:	e5845224 	str	r5, [r4, #548]	; 0x224
   327dc:	0afffff2 	beq	327ac <BusAccess::clockSetFreqHz(unsigned long)+0x44>
   327e0:	e5d47228 	ldrb	r7, [r4, #552]	; 0x228
   327e4:	e3570000 	cmp	r7, #0
   327e8:	1affffef 	bne	327ac <BusAccess::clockSetFreqHz(unsigned long)+0x44>
   327ec:	e59f616c 	ldr	r6, [pc, #364]	; 32960 <BusAccess::clockSetFreqHz(unsigned long)+0x1f8>
   327f0:	e59f316c 	ldr	r3, [pc, #364]	; 32964 <BusAccess::clockSetFreqHz(unsigned long)+0x1fc>
   327f4:	e5962070 	ldr	r2, [r6, #112]	; 0x70
   327f8:	e0033002 	and	r3, r3, r2
   327fc:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32800:	e5863070 	str	r3, [r6, #112]	; 0x70
   32804:	e594322c 	ldr	r3, [r4, #556]	; 0x22c
   32808:	e3730001 	cmn	r3, #1
   3280c:	0a000003 	beq	32820 <BusAccess::clockSetFreqHz(unsigned long)+0xb8>
   32810:	e5943230 	ldr	r3, [r4, #560]	; 0x230
   32814:	e3530000 	cmp	r3, #0
   32818:	11a05007 	movne	r5, r7
   3281c:	1a000012 	bne	3286c <BusAccess::clockSetFreqHz(unsigned long)+0x104>
   32820:	e3a03000 	mov	r3, #0
   32824:	e5c43228 	strb	r3, [r4, #552]	; 0x228
   32828:	ebffd07d 	bl	26a24 <CLogger::Get()>
   3282c:	e5942230 	ldr	r2, [r4, #560]	; 0x230
   32830:	e594322c 	ldr	r3, [r4, #556]	; 0x22c
   32834:	e59f1120 	ldr	r1, [pc, #288]	; 3295c <BusAccess::clockSetFreqHz(unsigned long)+0x1f4>
   32838:	e58d2004 	str	r2, [sp, #4]
   3283c:	e58d3000 	str	r3, [sp]
   32840:	e3a02001 	mov	r2, #1
   32844:	e59f311c 	ldr	r3, [pc, #284]	; 32968 <BusAccess::clockSetFreqHz(unsigned long)+0x200>
   32848:	ebffcfb7 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3284c:	e28dd020 	add	sp, sp, #32
   32850:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32854:	e3a00001 	mov	r0, #1
   32858:	e2855001 	add	r5, r5, #1
   3285c:	ebffed22 	bl	2dcec <microsDelay>
   32860:	e3550064 	cmp	r5, #100	; 0x64
   32864:	e59670a0 	ldr	r7, [r6, #160]	; 0xa0
   32868:	0a000002 	beq	32878 <BusAccess::clockSetFreqHz(unsigned long)+0x110>
   3286c:	e5963070 	ldr	r3, [r6, #112]	; 0x70
   32870:	e3130080 	tst	r3, #128	; 0x80
   32874:	1afffff6 	bne	32854 <BusAccess::clockSetFreqHz(unsigned long)+0xec>
   32878:	e5d41230 	ldrb	r1, [r4, #560]	; 0x230
   3287c:	e5d4022c 	ldrb	r0, [r4, #556]	; 0x22c
   32880:	eb002c59 	bl	3d9ec <pinMode>
   32884:	e5940224 	ldr	r0, [r4, #548]	; 0x224
   32888:	e59f20dc 	ldr	r2, [pc, #220]	; 3296c <BusAccess::clockSetFreqHz(unsigned long)+0x204>
   3288c:	e59f10dc 	ldr	r1, [pc, #220]	; 32970 <BusAccess::clockSetFreqHz(unsigned long)+0x208>
   32890:	e1500002 	cmp	r0, r2
   32894:	e59f20d8 	ldr	r2, [pc, #216]	; 32974 <BusAccess::clockSetFreqHz(unsigned long)+0x20c>
   32898:	e59f30d8 	ldr	r3, [pc, #216]	; 32978 <BusAccess::clockSetFreqHz(unsigned long)+0x210>
   3289c:	81a03001 	movhi	r3, r1
   328a0:	e59f80d4 	ldr	r8, [pc, #212]	; 3297c <BusAccess::clockSetFreqHz(unsigned long)+0x214>
   328a4:	81a08002 	movhi	r8, r2
   328a8:	e59f90b0 	ldr	r9, [pc, #176]	; 32960 <BusAccess::clockSetFreqHz(unsigned long)+0x1f8>
   328ac:	e59f20cc 	ldr	r2, [pc, #204]	; 32980 <BusAccess::clockSetFreqHz(unsigned long)+0x218>
   328b0:	e5893070 	str	r3, [r9, #112]	; 0x70
   328b4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   328b8:	e59fa0c4 	ldr	sl, [pc, #196]	; 32984 <BusAccess::clockSetFreqHz(unsigned long)+0x21c>
   328bc:	81a0a002 	movhi	sl, r2
   328c0:	ebffed09 	bl	2dcec <microsDelay>
   328c4:	e5941224 	ldr	r1, [r4, #548]	; 0x224
   328c8:	e1a00008 	mov	r0, r8
   328cc:	eb00295e 	bl	3ce4c <__udivsi3>
   328d0:	e1a06000 	mov	r6, r0
   328d4:	e59f10ac 	ldr	r1, [pc, #172]	; 32988 <BusAccess::clockSetFreqHz(unsigned long)+0x220>
   328d8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   328dc:	e1560001 	cmp	r6, r1
   328e0:	21a06001 	movcs	r6, r1
   328e4:	e1a03606 	lsl	r3, r6, #12
   328e8:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   328ec:	e5893074 	str	r3, [r9, #116]	; 0x74
   328f0:	ebffecfd 	bl	2dcec <microsDelay>
   328f4:	e3a03001 	mov	r3, #1
   328f8:	e1a01006 	mov	r1, r6
   328fc:	e589a070 	str	sl, [r9, #112]	; 0x70
   32900:	e1a00008 	mov	r0, r8
   32904:	e5c43228 	strb	r3, [r4, #552]	; 0x228
   32908:	eb00294f 	bl	3ce4c <__udivsi3>
   3290c:	e1a09000 	mov	r9, r0
   32910:	ebffd043 	bl	26a24 <CLogger::Get()>
   32914:	e5941230 	ldr	r1, [r4, #560]	; 0x230
   32918:	e594222c 	ldr	r2, [r4, #556]	; 0x22c
   3291c:	e5943224 	ldr	r3, [r4, #548]	; 0x224
   32920:	e58d1014 	str	r1, [sp, #20]
   32924:	e58d2010 	str	r2, [sp, #16]
   32928:	e58d3004 	str	r3, [sp, #4]
   3292c:	e3a02003 	mov	r2, #3
   32930:	e59f3054 	ldr	r3, [pc, #84]	; 3298c <BusAccess::clockSetFreqHz(unsigned long)+0x224>
   32934:	e59f1020 	ldr	r1, [pc, #32]	; 3295c <BusAccess::clockSetFreqHz(unsigned long)+0x1f4>
   32938:	e58d600c 	str	r6, [sp, #12]
   3293c:	e58d8008 	str	r8, [sp, #8]
   32940:	e58d9000 	str	r9, [sp]
   32944:	e58d701c 	str	r7, [sp, #28]
   32948:	e58d5018 	str	r5, [sp, #24]
   3294c:	ebffcf76 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32950:	e28dd020 	add	sp, sp, #32
   32954:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32958:	00046224 	.word	0x00046224
   3295c:	000461c4 	.word	0x000461c4
   32960:	20101000 	.word	0x20101000
   32964:	00000f0f 	.word	0x00000f0f
   32968:	000461a4 	.word	0x000461a4
   3296c:	0003d08f 	.word	0x0003d08f
   32970:	5a000006 	.word	0x5a000006
   32974:	1dcd6500 	.word	0x1dcd6500
   32978:	5a000001 	.word	0x5a000001
   3297c:	0124f800 	.word	0x0124f800
   32980:	5a000016 	.word	0x5a000016
   32984:	5a000011 	.word	0x5a000011
   32988:	00000fff 	.word	0x00000fff
   3298c:	000461d0 	.word	0x000461d0

00032990 <BusAccess::clockEnable(bool)>:
   32990:	e5d03228 	ldrb	r3, [r0, #552]	; 0x228
   32994:	e1530001 	cmp	r3, r1
   32998:	012fff1e 	bxeq	lr
   3299c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   329a0:	e1a04000 	mov	r4, r0
   329a4:	e59f317c 	ldr	r3, [pc, #380]	; 32b28 <BusAccess::clockEnable(bool)+0x198>
   329a8:	e59f217c 	ldr	r2, [pc, #380]	; 32b2c <BusAccess::clockEnable(bool)+0x19c>
   329ac:	e5930070 	ldr	r0, [r3, #112]	; 0x70
   329b0:	e3510000 	cmp	r1, #0
   329b4:	e0022000 	and	r2, r2, r0
   329b8:	e382245a 	orr	r2, r2, #1509949440	; 0x5a000000
   329bc:	e5832070 	str	r2, [r3, #112]	; 0x70
   329c0:	e24dd020 	sub	sp, sp, #32
   329c4:	05c41228 	strbeq	r1, [r4, #552]	; 0x228
   329c8:	0a000047 	beq	32aec <BusAccess::clockEnable(bool)+0x15c>
   329cc:	e594222c 	ldr	r2, [r4, #556]	; 0x22c
   329d0:	e3720001 	cmn	r2, #1
   329d4:	0a000046 	beq	32af4 <BusAccess::clockEnable(bool)+0x164>
   329d8:	e5942230 	ldr	r2, [r4, #560]	; 0x230
   329dc:	e3520000 	cmp	r2, #0
   329e0:	13a07000 	movne	r7, #0
   329e4:	11a05003 	movne	r5, r3
   329e8:	11a06007 	movne	r6, r7
   329ec:	1a000006 	bne	32a0c <BusAccess::clockEnable(bool)+0x7c>
   329f0:	ea00003f 	b	32af4 <BusAccess::clockEnable(bool)+0x164>
   329f4:	e3a00001 	mov	r0, #1
   329f8:	e2866001 	add	r6, r6, #1
   329fc:	ebffecba 	bl	2dcec <microsDelay>
   32a00:	e3560064 	cmp	r6, #100	; 0x64
   32a04:	e59570a0 	ldr	r7, [r5, #160]	; 0xa0
   32a08:	0a000002 	beq	32a18 <BusAccess::clockEnable(bool)+0x88>
   32a0c:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   32a10:	e3130080 	tst	r3, #128	; 0x80
   32a14:	1afffff6 	bne	329f4 <BusAccess::clockEnable(bool)+0x64>
   32a18:	e5d41230 	ldrb	r1, [r4, #560]	; 0x230
   32a1c:	e5d4022c 	ldrb	r0, [r4, #556]	; 0x22c
   32a20:	eb002bf1 	bl	3d9ec <pinMode>
   32a24:	e5940224 	ldr	r0, [r4, #548]	; 0x224
   32a28:	e59f2100 	ldr	r2, [pc, #256]	; 32b30 <BusAccess::clockEnable(bool)+0x1a0>
   32a2c:	e59f1100 	ldr	r1, [pc, #256]	; 32b34 <BusAccess::clockEnable(bool)+0x1a4>
   32a30:	e1500002 	cmp	r0, r2
   32a34:	e59f20fc 	ldr	r2, [pc, #252]	; 32b38 <BusAccess::clockEnable(bool)+0x1a8>
   32a38:	e59f30fc 	ldr	r3, [pc, #252]	; 32b3c <BusAccess::clockEnable(bool)+0x1ac>
   32a3c:	81a03001 	movhi	r3, r1
   32a40:	e59f80f8 	ldr	r8, [pc, #248]	; 32b40 <BusAccess::clockEnable(bool)+0x1b0>
   32a44:	81a08002 	movhi	r8, r2
   32a48:	e59f90d8 	ldr	r9, [pc, #216]	; 32b28 <BusAccess::clockEnable(bool)+0x198>
   32a4c:	e59f20f0 	ldr	r2, [pc, #240]	; 32b44 <BusAccess::clockEnable(bool)+0x1b4>
   32a50:	e5893070 	str	r3, [r9, #112]	; 0x70
   32a54:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32a58:	e59fa0e8 	ldr	sl, [pc, #232]	; 32b48 <BusAccess::clockEnable(bool)+0x1b8>
   32a5c:	81a0a002 	movhi	sl, r2
   32a60:	ebffeca1 	bl	2dcec <microsDelay>
   32a64:	e5941224 	ldr	r1, [r4, #548]	; 0x224
   32a68:	e1a00008 	mov	r0, r8
   32a6c:	eb0028f6 	bl	3ce4c <__udivsi3>
   32a70:	e1a05000 	mov	r5, r0
   32a74:	e59f10d0 	ldr	r1, [pc, #208]	; 32b4c <BusAccess::clockEnable(bool)+0x1bc>
   32a78:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32a7c:	e1550001 	cmp	r5, r1
   32a80:	21a05001 	movcs	r5, r1
   32a84:	e1a03605 	lsl	r3, r5, #12
   32a88:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32a8c:	e5893074 	str	r3, [r9, #116]	; 0x74
   32a90:	ebffec95 	bl	2dcec <microsDelay>
   32a94:	e3a03001 	mov	r3, #1
   32a98:	e1a01005 	mov	r1, r5
   32a9c:	e589a070 	str	sl, [r9, #112]	; 0x70
   32aa0:	e1a00008 	mov	r0, r8
   32aa4:	e5c43228 	strb	r3, [r4, #552]	; 0x228
   32aa8:	eb0028e7 	bl	3ce4c <__udivsi3>
   32aac:	e1a09000 	mov	r9, r0
   32ab0:	ebffcfdb 	bl	26a24 <CLogger::Get()>
   32ab4:	e5941230 	ldr	r1, [r4, #560]	; 0x230
   32ab8:	e594222c 	ldr	r2, [r4, #556]	; 0x22c
   32abc:	e5943224 	ldr	r3, [r4, #548]	; 0x224
   32ac0:	e58d1014 	str	r1, [sp, #20]
   32ac4:	e58d2010 	str	r2, [sp, #16]
   32ac8:	e58d3004 	str	r3, [sp, #4]
   32acc:	e3a02003 	mov	r2, #3
   32ad0:	e1cd61f8 	strd	r6, [sp, #24]
   32ad4:	e59f3074 	ldr	r3, [pc, #116]	; 32b50 <BusAccess::clockEnable(bool)+0x1c0>
   32ad8:	e59f1074 	ldr	r1, [pc, #116]	; 32b54 <BusAccess::clockEnable(bool)+0x1c4>
   32adc:	e58d500c 	str	r5, [sp, #12]
   32ae0:	e58d8008 	str	r8, [sp, #8]
   32ae4:	e58d9000 	str	r9, [sp]
   32ae8:	ebffcf0f 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32aec:	e28dd020 	add	sp, sp, #32
   32af0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32af4:	e3a03000 	mov	r3, #0
   32af8:	e5c43228 	strb	r3, [r4, #552]	; 0x228
   32afc:	ebffcfc8 	bl	26a24 <CLogger::Get()>
   32b00:	e5942230 	ldr	r2, [r4, #560]	; 0x230
   32b04:	e594322c 	ldr	r3, [r4, #556]	; 0x22c
   32b08:	e59f1044 	ldr	r1, [pc, #68]	; 32b54 <BusAccess::clockEnable(bool)+0x1c4>
   32b0c:	e58d2004 	str	r2, [sp, #4]
   32b10:	e58d3000 	str	r3, [sp]
   32b14:	e3a02001 	mov	r2, #1
   32b18:	e59f3038 	ldr	r3, [pc, #56]	; 32b58 <BusAccess::clockEnable(bool)+0x1c8>
   32b1c:	ebffcf02 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32b20:	e28dd020 	add	sp, sp, #32
   32b24:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32b28:	20101000 	.word	0x20101000
   32b2c:	00000f0f 	.word	0x00000f0f
   32b30:	0003d08f 	.word	0x0003d08f
   32b34:	5a000006 	.word	0x5a000006
   32b38:	1dcd6500 	.word	0x1dcd6500
   32b3c:	5a000001 	.word	0x5a000001
   32b40:	0124f800 	.word	0x0124f800
   32b44:	5a000016 	.word	0x5a000016
   32b48:	5a000011 	.word	0x5a000011
   32b4c:	00000fff 	.word	0x00000fff
   32b50:	000461d0 	.word	0x000461d0
   32b54:	000461c4 	.word	0x000461c4
   32b58:	000461a4 	.word	0x000461a4

00032b5c <BusAccess::clockCurFreqHz()>:
   32b5c:	e5900224 	ldr	r0, [r0, #548]	; 0x224
   32b60:	e12fff1e 	bx	lr

00032b64 <BusAccess::clockGetMinFreqHz()>:
   32b64:	e3a00001 	mov	r0, #1
   32b68:	e12fff1e 	bx	lr

00032b6c <BusAccess::clockGetMaxFreqHz()>:
   32b6c:	e59f0000 	ldr	r0, [pc]	; 32b74 <BusAccess::clockGetMaxFreqHz()+0x8>
   32b70:	e12fff1e 	bx	lr
   32b74:	017d7840 	.word	0x017d7840

00032b78 <BusAccess::setPinOut(int, bool)>:
   32b78:	e92d4010 	push	{r4, lr}
   32b7c:	e1a04002 	mov	r4, r2
   32b80:	e24dd008 	sub	sp, sp, #8
   32b84:	e6ef0071 	uxtb	r0, r1
   32b88:	e1a01002 	mov	r1, r2
   32b8c:	e58d0004 	str	r0, [sp, #4]
   32b90:	eb002bd6 	bl	3daf0 <digitalWrite>
   32b94:	e59d0004 	ldr	r0, [sp, #4]
   32b98:	e3a01001 	mov	r1, #1
   32b9c:	eb002b92 	bl	3d9ec <pinMode>
   32ba0:	e1a01004 	mov	r1, r4
   32ba4:	e59d0004 	ldr	r0, [sp, #4]
   32ba8:	e28dd008 	add	sp, sp, #8
   32bac:	e8bd4010 	pop	{r4, lr}
   32bb0:	ea002bce 	b	3daf0 <digitalWrite>

00032bb4 <BusAccess::controlTake()>:
   32bb4:	e92d4070 	push	{r4, r5, r6, lr}
   32bb8:	e3a05001 	mov	r5, #1
   32bbc:	e5c051f1 	strb	r5, [r0, #497]	; 0x1f1
   32bc0:	e1a04000 	mov	r4, r0
   32bc4:	eb000199 	bl	33230 <BusAccess::waitGenerationDisable()>
   32bc8:	e3a01040 	mov	r1, #64	; 0x40
   32bcc:	e59f3088 	ldr	r3, [pc, #136]	; 32c5c <BusAccess::controlTake()+0xa8>
   32bd0:	e1a00004 	mov	r0, r4
   32bd4:	e5932008 	ldr	r2, [r3, #8]
   32bd8:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   32bdc:	e5832008 	str	r2, [r3, #8]
   32be0:	e583101c 	str	r1, [r3, #28]
   32be4:	e1a02005 	mov	r2, r5
   32be8:	e3a01011 	mov	r1, #17
   32bec:	ebffffe1 	bl	32b78 <BusAccess::setPinOut(int, bool)>
   32bf0:	e1a02005 	mov	r2, r5
   32bf4:	e1a00004 	mov	r0, r4
   32bf8:	e3a01012 	mov	r1, #18
   32bfc:	ebffffdd 	bl	32b78 <BusAccess::setPinOut(int, bool)>
   32c00:	e1a02005 	mov	r2, r5
   32c04:	e1a00004 	mov	r0, r4
   32c08:	e3a01000 	mov	r1, #0
   32c0c:	ebffffd9 	bl	32b78 <BusAccess::setPinOut(int, bool)>
   32c10:	e1a02005 	mov	r2, r5
   32c14:	e1a01005 	mov	r1, r5
   32c18:	e1a00004 	mov	r0, r4
   32c1c:	ebffffd5 	bl	32b78 <BusAccess::setPinOut(int, bool)>
   32c20:	e1a02005 	mov	r2, r5
   32c24:	e1a00004 	mov	r0, r4
   32c28:	e3a01005 	mov	r1, #5
   32c2c:	ebffffd1 	bl	32b78 <BusAccess::setPinOut(int, bool)>
   32c30:	e1a02005 	mov	r2, r5
   32c34:	e1a00004 	mov	r0, r4
   32c38:	e3a01003 	mov	r1, #3
   32c3c:	ebffffcd 	bl	32b78 <BusAccess::setPinOut(int, bool)>
   32c40:	e5943000 	ldr	r3, [r4]
   32c44:	e3530011 	cmp	r3, #17
   32c48:	18bd8070 	popne	{r4, r5, r6, pc}
   32c4c:	e3a01000 	mov	r1, #0
   32c50:	e8bd4070 	pop	{r4, r5, r6, lr}
   32c54:	e3a00003 	mov	r0, #3
   32c58:	ea002ba4 	b	3daf0 <digitalWrite>
   32c5c:	20200000 	.word	0x20200000

00032c60 <BusAccess::controlRequestAndTake()>:
   32c60:	e3a0c040 	mov	ip, #64	; 0x40
   32c64:	e92d4010 	push	{r4, lr}
   32c68:	e1a04000 	mov	r4, r0
   32c6c:	e59f3048 	ldr	r3, [pc, #72]	; 32cbc <BusAccess::controlRequestAndTake()+0x5c>
   32c70:	e3a01000 	mov	r1, #0
   32c74:	e5932008 	ldr	r2, [r3, #8]
   32c78:	e3a00013 	mov	r0, #19
   32c7c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   32c80:	e5832008 	str	r2, [r3, #8]
   32c84:	e583c01c 	str	ip, [r3, #28]
   32c88:	eb002b98 	bl	3daf0 <digitalWrite>
   32c8c:	e1a00004 	mov	r0, r4
   32c90:	e3a01001 	mov	r1, #1
   32c94:	ebfffc91 	bl	31ee0 <BusAccess::waitForBusAck(bool)>
   32c98:	e3500000 	cmp	r0, #0
   32c9c:	e1a00004 	mov	r0, r4
   32ca0:	0a000002 	beq	32cb0 <BusAccess::controlRequestAndTake()+0x50>
   32ca4:	ebffffc2 	bl	32bb4 <BusAccess::controlTake()>
   32ca8:	e3a00000 	mov	r0, #0
   32cac:	e8bd8010 	pop	{r4, pc}
   32cb0:	ebfffcc5 	bl	31fcc <BusAccess::controlRelease()>
   32cb4:	e3a00002 	mov	r0, #2
   32cb8:	e8bd8010 	pop	{r4, pc}
   32cbc:	20200000 	.word	0x20200000

00032cc0 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>:
   32cc0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32cc4:	e5d091f1 	ldrb	r9, [r0, #497]	; 0x1f1
   32cc8:	e1a06000 	mov	r6, r0
   32ccc:	e2399001 	eors	r9, r9, #1
   32cd0:	e1a04002 	mov	r4, r2
   32cd4:	e1a08003 	mov	r8, r3
   32cd8:	e1a07001 	mov	r7, r1
   32cdc:	e5dda020 	ldrb	sl, [sp, #32]
   32ce0:	0a00002b 	beq	32d94 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0xd4>
   32ce4:	ebffffdd 	bl	32c60 <BusAccess::controlRequestAndTake()>
   32ce8:	e3500000 	cmp	r0, #0
   32cec:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   32cf0:	e59f50fc 	ldr	r5, [pc, #252]	; 32df4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x134>
   32cf4:	e1a01007 	mov	r1, r7
   32cf8:	e5953008 	ldr	r3, [r5, #8]
   32cfc:	e1a00006 	mov	r0, r6
   32d00:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   32d04:	e5853008 	str	r3, [r5, #8]
   32d08:	eb000252 	bl	33658 <BusAccess::addrSet(unsigned int)>
   32d0c:	e5952008 	ldr	r2, [r5, #8]
   32d10:	e59f30e0 	ldr	r3, [pc, #224]	; 32df8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x138>
   32d14:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   32d18:	e1823003 	orr	r3, r2, r3
   32d1c:	e3580000 	cmp	r8, #0
   32d20:	e5853008 	str	r3, [r5, #8]
   32d24:	0a00002b 	beq	32dd8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x118>
   32d28:	e3a05000 	mov	r5, #0
   32d2c:	e0477004 	sub	r7, r7, r4
   32d30:	ea000001 	b	32d3c <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x7c>
   32d34:	e1580005 	cmp	r8, r5
   32d38:	9a00000d 	bls	32d74 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0xb4>
   32d3c:	e4d41001 	ldrb	r1, [r4], #1
   32d40:	e1a0200a 	mov	r2, sl
   32d44:	e1a00006 	mov	r0, r6
   32d48:	ebfffda6 	bl	323e8 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)>
   32d4c:	e1a00006 	mov	r0, r6
   32d50:	eb000249 	bl	3367c <BusAccess::addrLowInc()>
   32d54:	e0841007 	add	r1, r4, r7
   32d58:	e31100ff 	tst	r1, #255	; 0xff
   32d5c:	e2855001 	add	r5, r5, #1
   32d60:	1afffff3 	bne	32d34 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x74>
   32d64:	e1a00006 	mov	r0, r6
   32d68:	eb00023a 	bl	33658 <BusAccess::addrSet(unsigned int)>
   32d6c:	e1580005 	cmp	r8, r5
   32d70:	8afffff1 	bhi	32d3c <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x7c>
   32d74:	e59f2078 	ldr	r2, [pc, #120]	; 32df4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x134>
   32d78:	e3590000 	cmp	r9, #0
   32d7c:	e5923008 	ldr	r3, [r2, #8]
   32d80:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   32d84:	e5823008 	str	r3, [r2, #8]
   32d88:	1a000015 	bne	32de4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x124>
   32d8c:	e3a00000 	mov	r0, #0
   32d90:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32d94:	e59f5058 	ldr	r5, [pc, #88]	; 32df4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x134>
   32d98:	e5953008 	ldr	r3, [r5, #8]
   32d9c:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   32da0:	e5853008 	str	r3, [r5, #8]
   32da4:	eb00022b 	bl	33658 <BusAccess::addrSet(unsigned int)>
   32da8:	e5952008 	ldr	r2, [r5, #8]
   32dac:	e59f3044 	ldr	r3, [pc, #68]	; 32df8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x138>
   32db0:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   32db4:	e1823003 	orr	r3, r2, r3
   32db8:	e3580000 	cmp	r8, #0
   32dbc:	e5853008 	str	r3, [r5, #8]
   32dc0:	1affffd8 	bne	32d28 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x68>
   32dc4:	e5953008 	ldr	r3, [r5, #8]
   32dc8:	e1a00008 	mov	r0, r8
   32dcc:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   32dd0:	e5853008 	str	r3, [r5, #8]
   32dd4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32dd8:	e5953008 	ldr	r3, [r5, #8]
   32ddc:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   32de0:	e5853008 	str	r3, [r5, #8]
   32de4:	e1a00006 	mov	r0, r6
   32de8:	ebfffc77 	bl	31fcc <BusAccess::controlRelease()>
   32dec:	e3a00000 	mov	r0, #0
   32df0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32df4:	20200000 	.word	0x20200000
   32df8:	00249249 	.word	0x00249249

00032dfc <BusAccess::isrAssert(int)>:
   32dfc:	e351000b 	cmp	r1, #11
   32e00:	d0800101 	addle	r0, r0, r1, lsl #2
   32e04:	d59031f4 	ldrle	r3, [r0, #500]	; 0x1f4
   32e08:	d2833001 	addle	r3, r3, #1
   32e0c:	d58031f4 	strle	r3, [r0, #500]	; 0x1f4
   32e10:	e12fff1e 	bx	lr

00032e14 <BusAccess::isrAssertGetCount(int)>:
   32e14:	e351000b 	cmp	r1, #11
   32e18:	d281107c 	addle	r1, r1, #124	; 0x7c
   32e1c:	d0801101 	addle	r1, r0, r1, lsl #2
   32e20:	d5910004 	ldrle	r0, [r1, #4]
   32e24:	c3a00000 	movgt	r0, #0
   32e28:	e12fff1e 	bx	lr

00032e2c <BusAccess::isrValue(int, int)>:
   32e2c:	e351000b 	cmp	r1, #11
   32e30:	d281107c 	addle	r1, r1, #124	; 0x7c
   32e34:	d0801101 	addle	r1, r0, r1, lsl #2
   32e38:	d5812004 	strle	r2, [r1, #4]
   32e3c:	e12fff1e 	bx	lr

00032e40 <BusAccess::isrPeak(int, int)>:
   32e40:	e351000b 	cmp	r1, #11
   32e44:	c12fff1e 	bxgt	lr
   32e48:	e0800101 	add	r0, r0, r1, lsl #2
   32e4c:	e59031f4 	ldr	r3, [r0, #500]	; 0x1f4
   32e50:	e1530002 	cmp	r3, r2
   32e54:	b58021f4 	strlt	r2, [r0, #500]	; 0x1f4
   32e58:	e12fff1e 	bx	lr

00032e5c <BusAccess::setSignal(BR_BUS_ACTION, bool)>:
   32e5c:	e2411001 	sub	r1, r1, #1
   32e60:	e3510003 	cmp	r1, #3
   32e64:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   32e68:	ea000003 	b	32e7c <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x20>
   32e6c:	00032f1c 	.word	0x00032f1c
   32e70:	00032ee4 	.word	0x00032ee4
   32e74:	00032eac 	.word	0x00032eac
   32e78:	00032e80 	.word	0x00032e80
   32e7c:	e12fff1e 	bx	lr
   32e80:	e3520000 	cmp	r2, #0
   32e84:	0a00003b 	beq	32f78 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x11c>
   32e88:	e3a0c040 	mov	ip, #64	; 0x40
   32e8c:	e59f3100 	ldr	r3, [pc, #256]	; 32f94 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   32e90:	e3a01000 	mov	r1, #0
   32e94:	e5932008 	ldr	r2, [r3, #8]
   32e98:	e3a00013 	mov	r0, #19
   32e9c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   32ea0:	e5832008 	str	r2, [r3, #8]
   32ea4:	e583c01c 	str	ip, [r3, #28]
   32ea8:	ea002b10 	b	3daf0 <digitalWrite>
   32eac:	e3520000 	cmp	r2, #0
   32eb0:	e5903000 	ldr	r3, [r0]
   32eb4:	0a000026 	beq	32f54 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xf8>
   32eb8:	e3530011 	cmp	r3, #17
   32ebc:	13a02801 	movne	r2, #65536	; 0x10000
   32ec0:	13a00c0e 	movne	r0, #3584	; 0xe00
   32ec4:	13a01b01 	movne	r1, #1024	; 0x400
   32ec8:	1a00001b 	bne	32f3c <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xe0>
   32ecc:	e3a01c0e 	mov	r1, #3584	; 0xe00
   32ed0:	e3a02b01 	mov	r2, #1024	; 0x400
   32ed4:	e59f30b8 	ldr	r3, [pc, #184]	; 32f94 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   32ed8:	e5831028 	str	r1, [r3, #40]	; 0x28
   32edc:	e583201c 	str	r2, [r3, #28]
   32ee0:	e12fff1e 	bx	lr
   32ee4:	e3520000 	cmp	r2, #0
   32ee8:	e5903000 	ldr	r3, [r0]
   32eec:	0a000018 	beq	32f54 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xf8>
   32ef0:	e3530011 	cmp	r3, #17
   32ef4:	13a02801 	movne	r2, #65536	; 0x10000
   32ef8:	13a00c0e 	movne	r0, #3584	; 0xe00
   32efc:	13a01b03 	movne	r1, #3072	; 0xc00
   32f00:	1a00000d 	bne	32f3c <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xe0>
   32f04:	e3a01c0e 	mov	r1, #3584	; 0xe00
   32f08:	e3a02b03 	mov	r2, #3072	; 0xc00
   32f0c:	e59f3080 	ldr	r3, [pc, #128]	; 32f94 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   32f10:	e5831028 	str	r1, [r3, #40]	; 0x28
   32f14:	e583201c 	str	r2, [r3, #28]
   32f18:	e12fff1e 	bx	lr
   32f1c:	e3520000 	cmp	r2, #0
   32f20:	e5903000 	ldr	r3, [r0]
   32f24:	0a00000a 	beq	32f54 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xf8>
   32f28:	e3530011 	cmp	r3, #17
   32f2c:	13a02801 	movne	r2, #65536	; 0x10000
   32f30:	13a00c0e 	movne	r0, #3584	; 0xe00
   32f34:	13a01c0a 	movne	r1, #2560	; 0xa00
   32f38:	0a00000f 	beq	32f7c <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x120>
   32f3c:	e59f3050 	ldr	r3, [pc, #80]	; 32f94 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   32f40:	e583201c 	str	r2, [r3, #28]
   32f44:	e5830028 	str	r0, [r3, #40]	; 0x28
   32f48:	e583101c 	str	r1, [r3, #28]
   32f4c:	e5832028 	str	r2, [r3, #40]	; 0x28
   32f50:	e12fff1e 	bx	lr
   32f54:	e3530011 	cmp	r3, #17
   32f58:	03a02c0e 	moveq	r2, #3584	; 0xe00
   32f5c:	13a01801 	movne	r1, #65536	; 0x10000
   32f60:	13a02c0e 	movne	r2, #3584	; 0xe00
   32f64:	159f3028 	ldrne	r3, [pc, #40]	; 32f94 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   32f68:	059f3024 	ldreq	r3, [pc, #36]	; 32f94 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   32f6c:	1583101c 	strne	r1, [r3, #28]
   32f70:	e5832028 	str	r2, [r3, #40]	; 0x28
   32f74:	e12fff1e 	bx	lr
   32f78:	eafffc13 	b	31fcc <BusAccess::controlRelease()>
   32f7c:	e3a01c0e 	mov	r1, #3584	; 0xe00
   32f80:	e3a02c0a 	mov	r2, #2560	; 0xa00
   32f84:	e59f3008 	ldr	r3, [pc, #8]	; 32f94 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   32f88:	e5831028 	str	r1, [r3, #40]	; 0x28
   32f8c:	e583201c 	str	r2, [r3, #28]
   32f90:	e12fff1e 	bx	lr
   32f94:	20200000 	.word	0x20200000

00032f98 <BusAccess::busAccessCallbackPageIn()>:
   32f98:	e59021bc 	ldr	r2, [r0, #444]	; 0x1bc
   32f9c:	e3520000 	cmp	r2, #0
   32fa0:	d12fff1e 	bxle	lr
   32fa4:	e92d4070 	push	{r4, r5, r6, lr}
   32fa8:	e1a06000 	mov	r6, r0
   32fac:	e1a04000 	mov	r4, r0
   32fb0:	e3a05000 	mov	r5, #0
   32fb4:	e5d43004 	ldrb	r3, [r4, #4]
   32fb8:	e2855001 	add	r5, r5, #1
   32fbc:	e3530000 	cmp	r3, #0
   32fc0:	0a000005 	beq	32fdc <BusAccess::busAccessCallbackPageIn()+0x44>
   32fc4:	e3a02004 	mov	r2, #4
   32fc8:	e3a01008 	mov	r1, #8
   32fcc:	e594300c 	ldr	r3, [r4, #12]
   32fd0:	e5940010 	ldr	r0, [r4, #16]
   32fd4:	e12fff33 	blx	r3
   32fd8:	e59621bc 	ldr	r2, [r6, #444]	; 0x1bc
   32fdc:	e1520005 	cmp	r2, r5
   32fe0:	e284402c 	add	r4, r4, #44	; 0x2c
   32fe4:	cafffff2 	bgt	32fb4 <BusAccess::busAccessCallbackPageIn()+0x1c>
   32fe8:	e8bd8070 	pop	{r4, r5, r6, pc}

00032fec <BusAccess::busPagePinSetActive(bool)>:
   32fec:	e5903000 	ldr	r3, [r0]
   32ff0:	e3a00008 	mov	r0, #8
   32ff4:	e3530011 	cmp	r3, #17
   32ff8:	12211001 	eorne	r1, r1, #1
   32ffc:	ea002abb 	b	3daf0 <digitalWrite>

00033000 <BusAccess::formatCtrlBus(unsigned long, char*, int)>:
   33000:	e3530013 	cmp	r3, #19
   33004:	d12fff1e 	bxle	lr
   33008:	e3110004 	tst	r1, #4
   3300c:	e1a0c003 	mov	ip, r3
   33010:	13a0304d 	movne	r3, #77	; 0x4d
   33014:	03a0302e 	moveq	r3, #46	; 0x2e
   33018:	e3110008 	tst	r1, #8
   3301c:	e92d4030 	push	{r4, r5, lr}
   33020:	13a05049 	movne	r5, #73	; 0x49
   33024:	03a0502e 	moveq	r5, #46	; 0x2e
   33028:	e3110001 	tst	r1, #1
   3302c:	13a04052 	movne	r4, #82	; 0x52
   33030:	03a0402e 	moveq	r4, #46	; 0x2e
   33034:	e3110002 	tst	r1, #2
   33038:	13a0e057 	movne	lr, #87	; 0x57
   3303c:	03a0e02e 	moveq	lr, #46	; 0x2e
   33040:	e3110010 	tst	r1, #16
   33044:	e1a00002 	mov	r0, r2
   33048:	13a02031 	movne	r2, #49	; 0x31
   3304c:	03a0202e 	moveq	r2, #46	; 0x2e
   33050:	e24dd014 	sub	sp, sp, #20
   33054:	e58d200c 	str	r2, [sp, #12]
   33058:	e1a0100c 	mov	r1, ip
   3305c:	e98d4010 	stmib	sp, {r4, lr}
   33060:	e59f200c 	ldr	r2, [pc, #12]	; 33074 <BusAccess::formatCtrlBus(unsigned long, char*, int)+0x74>
   33064:	e58d5000 	str	r5, [sp]
   33068:	ebffebbd 	bl	2df64 <snprintf>
   3306c:	e28dd014 	add	sp, sp, #20
   33070:	e8bd8030 	pop	{r4, r5, pc}
   33074:	00046244 	.word	0x00046244

00033078 <BusAccess::waitSetCycleUs(unsigned long)>:
   33078:	e58011c8 	str	r1, [r0, #456]	; 0x1c8
   3307c:	e12fff1e 	bx	lr

00033080 <BusAccess::waitIsHeld()>:
   33080:	e5d001d0 	ldrb	r0, [r0, #464]	; 0x1d0
   33084:	e12fff1e 	bx	lr

00033088 <BusAccess::waitHold(int, bool)>:
   33088:	e3510000 	cmp	r1, #0
   3308c:	b12fff1e 	bxlt	lr
   33090:	e92d4010 	push	{r4, lr}
   33094:	e590e1bc 	ldr	lr, [r0, #444]	; 0x1bc
   33098:	e15e0001 	cmp	lr, r1
   3309c:	d8bd8010 	pople	{r4, pc}
   330a0:	e1a0c000 	mov	ip, r0
   330a4:	e3a03000 	mov	r3, #0
   330a8:	e0814101 	add	r4, r1, r1, lsl #2
   330ac:	e0811084 	add	r1, r1, r4, lsl #1
   330b0:	e0801101 	add	r1, r0, r1, lsl #2
   330b4:	e5c1202e 	strb	r2, [r1, #46]	; 0x2e
   330b8:	e5dc1004 	ldrb	r1, [ip, #4]
   330bc:	e0832103 	add	r2, r3, r3, lsl #2
   330c0:	e0832082 	add	r2, r3, r2, lsl #1
   330c4:	e3510000 	cmp	r1, #0
   330c8:	e0802102 	add	r2, r0, r2, lsl #2
   330cc:	e2833001 	add	r3, r3, #1
   330d0:	0a000002 	beq	330e0 <BusAccess::waitHold(int, bool)+0x58>
   330d4:	e5d2202e 	ldrb	r2, [r2, #46]	; 0x2e
   330d8:	e3520000 	cmp	r2, #0
   330dc:	1a000005 	bne	330f8 <BusAccess::waitHold(int, bool)+0x70>
   330e0:	e15e0003 	cmp	lr, r3
   330e4:	e28cc02c 	add	ip, ip, #44	; 0x2c
   330e8:	cafffff2 	bgt	330b8 <BusAccess::waitHold(int, bool)+0x30>
   330ec:	e3a03000 	mov	r3, #0
   330f0:	e5c031d0 	strb	r3, [r0, #464]	; 0x1d0
   330f4:	e8bd8010 	pop	{r4, pc}
   330f8:	e3a03001 	mov	r3, #1
   330fc:	e5c031d0 	strb	r3, [r0, #464]	; 0x1d0
   33100:	e8bd8010 	pop	{r4, pc}

00033104 <BusAccess::waitEnablementUpdate(bool)>:
   33104:	e3510000 	cmp	r1, #0
   33108:	1a00001f 	bne	3318c <BusAccess::waitEnablementUpdate(bool)+0x88>
   3310c:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   33110:	e35c0000 	cmp	ip, #0
   33114:	da000026 	ble	331b4 <BusAccess::waitEnablementUpdate(bool)+0xb0>
   33118:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3311c:	e1a03000 	mov	r3, r0
   33120:	e1a0e001 	mov	lr, r1
   33124:	e08c210c 	add	r2, ip, ip, lsl #2
   33128:	e08cc082 	add	ip, ip, r2, lsl #1
   3312c:	e080c10c 	add	ip, r0, ip, lsl #2
   33130:	e5d32004 	ldrb	r2, [r3, #4]
   33134:	e3520000 	cmp	r2, #0
   33138:	0a000003 	beq	3314c <BusAccess::waitEnablementUpdate(bool)+0x48>
   3313c:	e3510000 	cmp	r1, #0
   33140:	05d31014 	ldrbeq	r1, [r3, #20]
   33144:	e35e0000 	cmp	lr, #0
   33148:	05d3e015 	ldrbeq	lr, [r3, #21]
   3314c:	e283302c 	add	r3, r3, #44	; 0x2c
   33150:	e15c0003 	cmp	ip, r3
   33154:	1afffff5 	bne	33130 <BusAccess::waitEnablementUpdate(bool)+0x2c>
   33158:	e59f3070 	ldr	r3, [pc, #112]	; 331d0 <BusAccess::waitEnablementUpdate(bool)+0xcc>
   3315c:	e35e0000 	cmp	lr, #0
   33160:	e5933000 	ldr	r3, [r3]
   33164:	e59f2064 	ldr	r2, [pc, #100]	; 331d0 <BusAccess::waitEnablementUpdate(bool)+0xcc>
   33168:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   3316c:	e3c33008 	bic	r3, r3, #8
   33170:	13833008 	orrne	r3, r3, #8
   33174:	e3510000 	cmp	r1, #0
   33178:	13833b02 	orrne	r3, r3, #2048	; 0x800
   3317c:	e5c011c1 	strb	r1, [r0, #449]	; 0x1c1
   33180:	e5c0e1c2 	strb	lr, [r0, #450]	; 0x1c2
   33184:	e5823000 	str	r3, [r2]
   33188:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   3318c:	e3a02000 	mov	r2, #0
   33190:	e59f3038 	ldr	r3, [pc, #56]	; 331d0 <BusAccess::waitEnablementUpdate(bool)+0xcc>
   33194:	e5c021c1 	strb	r2, [r0, #449]	; 0x1c1
   33198:	e5933000 	ldr	r3, [r3]
   3319c:	e5c021c2 	strb	r2, [r0, #450]	; 0x1c2
   331a0:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   331a4:	e3c33008 	bic	r3, r3, #8
   331a8:	e59f2020 	ldr	r2, [pc, #32]	; 331d0 <BusAccess::waitEnablementUpdate(bool)+0xcc>
   331ac:	e5823000 	str	r3, [r2]
   331b0:	e12fff1e 	bx	lr
   331b4:	e59f3014 	ldr	r3, [pc, #20]	; 331d0 <BusAccess::waitEnablementUpdate(bool)+0xcc>
   331b8:	e5c011c1 	strb	r1, [r0, #449]	; 0x1c1
   331bc:	e5933000 	ldr	r3, [r3]
   331c0:	e5c011c2 	strb	r1, [r0, #450]	; 0x1c2
   331c4:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   331c8:	e3c33008 	bic	r3, r3, #8
   331cc:	eafffff5 	b	331a8 <BusAccess::waitEnablementUpdate(bool)+0xa4>
   331d0:	2020c000 	.word	0x2020c000

000331d4 <BusAccess::waitOnMemory(int, bool)>:
   331d4:	e3510000 	cmp	r1, #0
   331d8:	b12fff1e 	bxlt	lr
   331dc:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   331e0:	e15c0001 	cmp	ip, r1
   331e4:	d12fff1e 	bxle	lr
   331e8:	e081c101 	add	ip, r1, r1, lsl #2
   331ec:	e081108c 	add	r1, r1, ip, lsl #1
   331f0:	e0801101 	add	r1, r0, r1, lsl #2
   331f4:	e5c12014 	strb	r2, [r1, #20]
   331f8:	e3a01000 	mov	r1, #0
   331fc:	eaffffc0 	b	33104 <BusAccess::waitEnablementUpdate(bool)>

00033200 <BusAccess::waitOnIO(int, bool)>:
   33200:	e3510000 	cmp	r1, #0
   33204:	b12fff1e 	bxlt	lr
   33208:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   3320c:	e15c0001 	cmp	ip, r1
   33210:	d12fff1e 	bxle	lr
   33214:	e081c101 	add	ip, r1, r1, lsl #2
   33218:	e081108c 	add	r1, r1, ip, lsl #1
   3321c:	e0801101 	add	r1, r0, r1, lsl #2
   33220:	e5c12015 	strb	r2, [r1, #21]
   33224:	e3a01000 	mov	r1, #0
   33228:	eaffffb5 	b	33104 <BusAccess::waitEnablementUpdate(bool)>

0003322c <BusAccess::waitSystemSuspend(bool)>:
   3322c:	eaffffb4 	b	33104 <BusAccess::waitEnablementUpdate(bool)>

00033230 <BusAccess::waitGenerationDisable()>:
   33230:	e59f2010 	ldr	r2, [pc, #16]	; 33248 <BusAccess::waitGenerationDisable()+0x18>
   33234:	e5923000 	ldr	r3, [r2]
   33238:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   3323c:	e3c33008 	bic	r3, r3, #8
   33240:	e5823000 	str	r3, [r2]
   33244:	e12fff1e 	bx	lr
   33248:	2020c000 	.word	0x2020c000

0003324c <BusAccess::waitResetFlipFlops(bool)>:
   3324c:	e59f208c 	ldr	r2, [pc, #140]	; 332e0 <BusAccess::waitResetFlipFlops(bool)+0x94>
   33250:	e5923004 	ldr	r3, [r2, #4]
   33254:	e2133001 	ands	r3, r3, #1
   33258:	1a00000d 	bne	33294 <BusAccess::waitResetFlipFlops(bool)+0x48>
   3325c:	e59fc080 	ldr	ip, [pc, #128]	; 332e4 <BusAccess::waitResetFlipFlops(bool)+0x98>
   33260:	e3510000 	cmp	r1, #0
   33264:	e59c1034 	ldr	r1, [ip, #52]	; 0x34
   33268:	0a00000c 	beq	332a0 <BusAccess::waitResetFlipFlops(bool)+0x54>
   3326c:	e5d011c2 	ldrb	r1, [r0, #450]	; 0x1c2
   33270:	e3510000 	cmp	r1, #0
   33274:	13e014ff 	mvnne	r1, #-16777216	; 0xff000000
   33278:	15821018 	strne	r1, [r2, #24]
   3327c:	0a000015 	beq	332d8 <BusAccess::waitResetFlipFlops(bool)+0x8c>
   33280:	e5d021c1 	ldrb	r2, [r0, #449]	; 0x1c1
   33284:	e3520000 	cmp	r2, #0
   33288:	13e034ff 	mvnne	r3, #-16777216	; 0xff000000
   3328c:	e59f204c 	ldr	r2, [pc, #76]	; 332e0 <BusAccess::waitResetFlipFlops(bool)+0x94>
   33290:	e5823018 	str	r3, [r2, #24]
   33294:	e3a03000 	mov	r3, #0
   33298:	e5c031c3 	strb	r3, [r0, #451]	; 0x1c3
   3329c:	e12fff1e 	bx	lr
   332a0:	e3110002 	tst	r1, #2
   332a4:	0a000005 	beq	332c0 <BusAccess::waitResetFlipFlops(bool)+0x74>
   332a8:	e3a0c000 	mov	ip, #0
   332ac:	e59f202c 	ldr	r2, [pc, #44]	; 332e0 <BusAccess::waitResetFlipFlops(bool)+0x94>
   332b0:	e582c018 	str	ip, [r2, #24]
   332b4:	e3110001 	tst	r1, #1
   332b8:	1afffff3 	bne	3328c <BusAccess::waitResetFlipFlops(bool)+0x40>
   332bc:	eaffffef 	b	33280 <BusAccess::waitResetFlipFlops(bool)+0x34>
   332c0:	e5d0c1c2 	ldrb	ip, [r0, #450]	; 0x1c2
   332c4:	e35c0000 	cmp	ip, #0
   332c8:	13e0c4ff 	mvnne	ip, #-16777216	; 0xff000000
   332cc:	1582c018 	strne	ip, [r2, #24]
   332d0:	1afffff7 	bne	332b4 <BusAccess::waitResetFlipFlops(bool)+0x68>
   332d4:	eafffff3 	b	332a8 <BusAccess::waitResetFlipFlops(bool)+0x5c>
   332d8:	e5823018 	str	r3, [r2, #24]
   332dc:	eaffffe7 	b	33280 <BusAccess::waitResetFlipFlops(bool)+0x34>
   332e0:	2020c000 	.word	0x2020c000
   332e4:	20200000 	.word	0x20200000

000332e8 <BusAccess::waitRelease()>:
   332e8:	e92d4010 	push	{r4, lr}
   332ec:	e3a01000 	mov	r1, #0
   332f0:	ebffffd5 	bl	3324c <BusAccess::waitResetFlipFlops(bool)>
   332f4:	e8bd4010 	pop	{r4, lr}
   332f8:	eafff92a 	b	317a8 <BusAccess::waitHandleReadRelease()>

000332fc <BusAccess::waitClearDetected()>:
   332fc:	e12fff1e 	bx	lr

00033300 <BusAccess::waitSuspendBusDetailOneCycle()>:
   33300:	e5903000 	ldr	r3, [r0]
   33304:	e3530011 	cmp	r3, #17
   33308:	03a03001 	moveq	r3, #1
   3330c:	05c031d1 	strbeq	r3, [r0, #465]	; 0x1d1
   33310:	e12fff1e 	bx	lr

00033314 <BusAccess::waitSystemInit()>:
   33314:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33318:	e3a07000 	mov	r7, #0
   3331c:	e59f30d4 	ldr	r3, [pc, #212]	; 333f8 <BusAccess::waitSystemInit()+0xe4>
   33320:	e59f20d4 	ldr	r2, [pc, #212]	; 333fc <BusAccess::waitSystemInit()+0xe8>
   33324:	e1a05007 	mov	r5, r7
   33328:	e1a06003 	mov	r6, r3
   3332c:	e59f80cc 	ldr	r8, [pc, #204]	; 33400 <BusAccess::waitSystemInit()+0xec>
   33330:	e24dd010 	sub	sp, sp, #16
   33334:	e58320a0 	str	r2, [r3, #160]	; 0xa0
   33338:	ea000005 	b	33354 <BusAccess::waitSystemInit()+0x40>
   3333c:	e3a00001 	mov	r0, #1
   33340:	e2855001 	add	r5, r5, #1
   33344:	ebffea68 	bl	2dcec <microsDelay>
   33348:	e1550008 	cmp	r5, r8
   3334c:	e59670a0 	ldr	r7, [r6, #160]	; 0xa0
   33350:	0a000022 	beq	333e0 <BusAccess::waitSystemInit()+0xcc>
   33354:	e59630a0 	ldr	r3, [r6, #160]	; 0xa0
   33358:	e2134080 	ands	r4, r3, #128	; 0x80
   3335c:	1afffff6 	bne	3333c <BusAccess::waitSystemInit()+0x28>
   33360:	e3a01004 	mov	r1, #4
   33364:	e3a0000d 	mov	r0, #13
   33368:	eb00299f 	bl	3d9ec <pinMode>
   3336c:	e3a01004 	mov	r1, #4
   33370:	e3a0000c 	mov	r0, #12
   33374:	eb00299c 	bl	3d9ec <pinMode>
   33378:	e3e02000 	mvn	r2, #0
   3337c:	e59f6080 	ldr	r6, [pc, #128]	; 33404 <BusAccess::waitSystemInit()+0xf0>
   33380:	e59f8070 	ldr	r8, [pc, #112]	; 333f8 <BusAccess::waitSystemInit()+0xe4>
   33384:	e59f307c 	ldr	r3, [pc, #124]	; 33408 <BusAccess::waitSystemInit()+0xf4>
   33388:	e5862004 	str	r2, [r6, #4]
   3338c:	e3a00001 	mov	r0, #1
   33390:	e58830a4 	str	r3, [r8, #164]	; 0xa4
   33394:	ebffea54 	bl	2dcec <microsDelay>
   33398:	e59f306c 	ldr	r3, [pc, #108]	; 3340c <BusAccess::waitSystemInit()+0xf8>
   3339c:	e3a00001 	mov	r0, #1
   333a0:	e58830a0 	str	r3, [r8, #160]	; 0xa0
   333a4:	ebffea50 	bl	2dcec <microsDelay>
   333a8:	e59f3060 	ldr	r3, [pc, #96]	; 33410 <BusAccess::waitSystemInit()+0xfc>
   333ac:	e3a00001 	mov	r0, #1
   333b0:	e5863000 	str	r3, [r6]
   333b4:	ebffea4c 	bl	2dcec <microsDelay>
   333b8:	ebffcd99 	bl	26a24 <CLogger::Get()>
   333bc:	e3a03010 	mov	r3, #16
   333c0:	e3a02004 	mov	r2, #4
   333c4:	e88d00a8 	stm	sp, {r3, r5, r7}
   333c8:	e59f1044 	ldr	r1, [pc, #68]	; 33414 <BusAccess::waitSystemInit()+0x100>
   333cc:	e59f3044 	ldr	r3, [pc, #68]	; 33418 <BusAccess::waitSystemInit()+0x104>
   333d0:	e58d400c 	str	r4, [sp, #12]
   333d4:	ebffccd4 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   333d8:	e28dd010 	add	sp, sp, #16
   333dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   333e0:	e59f3034 	ldr	r3, [pc, #52]	; 3341c <BusAccess::waitSystemInit()+0x108>
   333e4:	e3a00001 	mov	r0, #1
   333e8:	e58630a0 	str	r3, [r6, #160]	; 0xa0
   333ec:	ebffea3e 	bl	2dcec <microsDelay>
   333f0:	e59640a0 	ldr	r4, [r6, #160]	; 0xa0
   333f4:	eaffffd9 	b	33360 <BusAccess::waitSystemInit()+0x4c>
   333f8:	20101000 	.word	0x20101000
   333fc:	5a000006 	.word	0x5a000006
   33400:	000186a0 	.word	0x000186a0
   33404:	2020c000 	.word	0x2020c000
   33408:	5a010000 	.word	0x5a010000
   3340c:	5a000016 	.word	0x5a000016
   33410:	00002363 	.word	0x00002363
   33414:	00046288 	.word	0x00046288
   33418:	00046250 	.word	0x00046250
   3341c:	5a000026 	.word	0x5a000026

00033420 <BusAccess::addrLowSet(unsigned long)>:
   33420:	e5903000 	ldr	r3, [r0]
   33424:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33428:	e3530011 	cmp	r3, #17
   3342c:	e1a04000 	mov	r4, r0
   33430:	e1a07001 	mov	r7, r1
   33434:	0a000020 	beq	334bc <BusAccess::addrLowSet(unsigned long)+0x9c>
   33438:	e3a03b02 	mov	r3, #2048	; 0x800
   3343c:	e3a02c0e 	mov	r2, #3584	; 0xe00
   33440:	e3a06801 	mov	r6, #65536	; 0x10000
   33444:	e59f50d8 	ldr	r5, [pc, #216]	; 33524 <BusAccess::addrLowSet(unsigned long)+0x104>
   33448:	e3a00f7d 	mov	r0, #500	; 0x1f4
   3344c:	e5852028 	str	r2, [r5, #40]	; 0x28
   33450:	e585301c 	str	r3, [r5, #28]
   33454:	e5856028 	str	r6, [r5, #40]	; 0x28
   33458:	eb0029cf 	bl	3db9c <lowlev_cycleDelay>
   3345c:	e585601c 	str	r6, [r5, #28]
   33460:	e5943000 	ldr	r3, [r4]
   33464:	e3530011 	cmp	r3, #17
   33468:	0a00001e 	beq	334e8 <BusAccess::addrLowSet(unsigned long)+0xc8>
   3346c:	e3a02000 	mov	r2, #0
   33470:	e3a06801 	mov	r6, #65536	; 0x10000
   33474:	e59f30a8 	ldr	r3, [pc, #168]	; 33524 <BusAccess::addrLowSet(unsigned long)+0x104>
   33478:	e3a01c0e 	mov	r1, #3584	; 0xe00
   3347c:	e1a05003 	mov	r5, r3
   33480:	e1a04002 	mov	r4, r2
   33484:	e1a08006 	mov	r8, r6
   33488:	e5831028 	str	r1, [r3, #40]	; 0x28
   3348c:	e6ef7077 	uxtb	r7, r7
   33490:	e583201c 	str	r2, [r3, #28]
   33494:	e3a00f7d 	mov	r0, #500	; 0x1f4
   33498:	e5858028 	str	r8, [r5, #40]	; 0x28
   3349c:	eb0029be 	bl	3db9c <lowlev_cycleDelay>
   334a0:	e3a00f7d 	mov	r0, #500	; 0x1f4
   334a4:	e585601c 	str	r6, [r5, #28]
   334a8:	eb0029bb 	bl	3db9c <lowlev_cycleDelay>
   334ac:	e1570004 	cmp	r7, r4
   334b0:	e2844001 	add	r4, r4, #1
   334b4:	1afffff6 	bne	33494 <BusAccess::addrLowSet(unsigned long)+0x74>
   334b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   334bc:	e3a03b02 	mov	r3, #2048	; 0x800
   334c0:	e3a06c0e 	mov	r6, #3584	; 0xe00
   334c4:	e59f5058 	ldr	r5, [pc, #88]	; 33524 <BusAccess::addrLowSet(unsigned long)+0x104>
   334c8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   334cc:	e5856028 	str	r6, [r5, #40]	; 0x28
   334d0:	e585301c 	str	r3, [r5, #28]
   334d4:	eb0029b0 	bl	3db9c <lowlev_cycleDelay>
   334d8:	e5856028 	str	r6, [r5, #40]	; 0x28
   334dc:	e5943000 	ldr	r3, [r4]
   334e0:	e3530011 	cmp	r3, #17
   334e4:	1affffe0 	bne	3346c <BusAccess::addrLowSet(unsigned long)+0x4c>
   334e8:	e3a06801 	mov	r6, #65536	; 0x10000
   334ec:	e3a04000 	mov	r4, #0
   334f0:	e1a08006 	mov	r8, r6
   334f4:	e59f5028 	ldr	r5, [pc, #40]	; 33524 <BusAccess::addrLowSet(unsigned long)+0x104>
   334f8:	e6ef7077 	uxtb	r7, r7
   334fc:	e3a00f7d 	mov	r0, #500	; 0x1f4
   33500:	e585801c 	str	r8, [r5, #28]
   33504:	eb0029a4 	bl	3db9c <lowlev_cycleDelay>
   33508:	e3a00f7d 	mov	r0, #500	; 0x1f4
   3350c:	e5856028 	str	r6, [r5, #40]	; 0x28
   33510:	eb0029a1 	bl	3db9c <lowlev_cycleDelay>
   33514:	e1570004 	cmp	r7, r4
   33518:	e2844001 	add	r4, r4, #1
   3351c:	1afffff6 	bne	334fc <BusAccess::addrLowSet(unsigned long)+0xdc>
   33520:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   33524:	20200000 	.word	0x20200000

00033528 <BusAccess::addrHighSet(unsigned long)>:
   33528:	e5903000 	ldr	r3, [r0]
   3352c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33530:	e3530011 	cmp	r3, #17
   33534:	e1a04001 	mov	r4, r1
   33538:	0a000019 	beq	335a4 <BusAccess::addrHighSet(unsigned long)+0x7c>
   3353c:	e3a05801 	mov	r5, #65536	; 0x10000
   33540:	e3a00080 	mov	r0, #128	; 0x80
   33544:	e3a07d3a 	mov	r7, #3712	; 0xe80
   33548:	e3a06b02 	mov	r6, #2048	; 0x800
   3354c:	e1a0e005 	mov	lr, r5
   33550:	e1a01000 	mov	r1, r0
   33554:	e3a03009 	mov	r3, #9
   33558:	e59fc0f0 	ldr	ip, [pc, #240]	; 33650 <BusAccess::addrHighSet(unsigned long)+0x128>
   3355c:	e58c501c 	str	r5, [ip, #28]
   33560:	e1a0200c 	mov	r2, ip
   33564:	e58c7028 	str	r7, [ip, #40]	; 0x28
   33568:	e58c601c 	str	r6, [ip, #28]
   3356c:	e59fc0e0 	ldr	ip, [pc, #224]	; 33654 <BusAccess::addrHighSet(unsigned long)+0x12c>
   33570:	e3140080 	tst	r4, #128	; 0x80
   33574:	1582e01c 	strne	lr, [r2, #28]
   33578:	0582c028 	streq	ip, [r2, #40]	; 0x28
   3357c:	15820028 	strne	r0, [r2, #40]	; 0x28
   33580:	e2533001 	subs	r3, r3, #1
   33584:	e1a04084 	lsl	r4, r4, #1
   33588:	e582101c 	str	r1, [r2, #28]
   3358c:	1afffff7 	bne	33570 <BusAccess::addrHighSet(unsigned long)+0x48>
   33590:	e3a01801 	mov	r1, #65536	; 0x10000
   33594:	e3a03d3a 	mov	r3, #3712	; 0xe80
   33598:	e582101c 	str	r1, [r2, #28]
   3359c:	e5823028 	str	r3, [r2, #40]	; 0x28
   335a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   335a4:	e1a08000 	mov	r8, r0
   335a8:	e3a06009 	mov	r6, #9
   335ac:	e3a09801 	mov	r9, #65536	; 0x10000
   335b0:	e59f5098 	ldr	r5, [pc, #152]	; 33650 <BusAccess::addrHighSet(unsigned long)+0x128>
   335b4:	ea000013 	b	33608 <BusAccess::addrHighSet(unsigned long)+0xe0>
   335b8:	e3530011 	cmp	r3, #17
   335bc:	e3a02c0e 	mov	r2, #3584	; 0xe00
   335c0:	e3a03b02 	mov	r3, #2048	; 0x800
   335c4:	1585901c 	strne	r9, [r5, #28]
   335c8:	05852028 	streq	r2, [r5, #40]	; 0x28
   335cc:	15852028 	strne	r2, [r5, #40]	; 0x28
   335d0:	0585301c 	streq	r3, [r5, #28]
   335d4:	1585301c 	strne	r3, [r5, #28]
   335d8:	15859028 	strne	r9, [r5, #40]	; 0x28
   335dc:	e3a07080 	mov	r7, #128	; 0x80
   335e0:	e3a000c8 	mov	r0, #200	; 0xc8
   335e4:	eb00296c 	bl	3db9c <lowlev_cycleDelay>
   335e8:	e3a000c8 	mov	r0, #200	; 0xc8
   335ec:	e585701c 	str	r7, [r5, #28]
   335f0:	eb002969 	bl	3db9c <lowlev_cycleDelay>
   335f4:	e5857028 	str	r7, [r5, #40]	; 0x28
   335f8:	e2566001 	subs	r6, r6, #1
   335fc:	e5983000 	ldr	r3, [r8]
   33600:	e1a04084 	lsl	r4, r4, #1
   33604:	0a00000a 	beq	33634 <BusAccess::addrHighSet(unsigned long)+0x10c>
   33608:	e2142080 	ands	r2, r4, #128	; 0x80
   3360c:	1affffe9 	bne	335b8 <BusAccess::addrHighSet(unsigned long)+0x90>
   33610:	e3530011 	cmp	r3, #17
   33614:	e3a03c0e 	mov	r3, #3584	; 0xe00
   33618:	1585901c 	strne	r9, [r5, #28]
   3361c:	05853028 	streq	r3, [r5, #40]	; 0x28
   33620:	15853028 	strne	r3, [r5, #40]	; 0x28
   33624:	0585201c 	streq	r2, [r5, #28]
   33628:	1585201c 	strne	r2, [r5, #28]
   3362c:	15859028 	strne	r9, [r5, #40]	; 0x28
   33630:	eaffffe9 	b	335dc <BusAccess::addrHighSet(unsigned long)+0xb4>
   33634:	e3530011 	cmp	r3, #17
   33638:	03a03c0e 	moveq	r3, #3584	; 0xe00
   3363c:	13a02801 	movne	r2, #65536	; 0x10000
   33640:	13a03c0e 	movne	r3, #3584	; 0xe00
   33644:	1585201c 	strne	r2, [r5, #28]
   33648:	e5853028 	str	r3, [r5, #40]	; 0x28
   3364c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33650:	20200000 	.word	0x20200000
   33654:	00010080 	.word	0x00010080

00033658 <BusAccess::addrSet(unsigned int)>:
   33658:	e92d4070 	push	{r4, r5, r6, lr}
   3365c:	e1a04001 	mov	r4, r1
   33660:	e1a05000 	mov	r5, r0
   33664:	e1a01421 	lsr	r1, r1, #8
   33668:	ebffffae 	bl	33528 <BusAccess::addrHighSet(unsigned long)>
   3366c:	e1a00005 	mov	r0, r5
   33670:	e6ef1074 	uxtb	r1, r4
   33674:	e8bd4070 	pop	{r4, r5, r6, lr}
   33678:	eaffff68 	b	33420 <BusAccess::addrLowSet(unsigned long)>

0003367c <BusAccess::addrLowInc()>:
   3367c:	e5903000 	ldr	r3, [r0]
   33680:	e92d4070 	push	{r4, r5, r6, lr}
   33684:	e3530011 	cmp	r3, #17
   33688:	0a000007 	beq	336ac <BusAccess::addrLowInc()+0x30>
   3368c:	e3a03c0e 	mov	r3, #3584	; 0xe00
   33690:	e59f4038 	ldr	r4, [pc, #56]	; 336d0 <BusAccess::addrLowInc()+0x54>
   33694:	e3a00f7d 	mov	r0, #500	; 0x1f4
   33698:	e5843028 	str	r3, [r4, #40]	; 0x28
   3369c:	eb00293e 	bl	3db9c <lowlev_cycleDelay>
   336a0:	e3a03801 	mov	r3, #65536	; 0x10000
   336a4:	e584301c 	str	r3, [r4, #28]
   336a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   336ac:	e3a05801 	mov	r5, #65536	; 0x10000
   336b0:	e59f4018 	ldr	r4, [pc, #24]	; 336d0 <BusAccess::addrLowInc()+0x54>
   336b4:	e3a00f7d 	mov	r0, #500	; 0x1f4
   336b8:	e584501c 	str	r5, [r4, #28]
   336bc:	eb002936 	bl	3db9c <lowlev_cycleDelay>
   336c0:	e5845028 	str	r5, [r4, #40]	; 0x28
   336c4:	e3a00f7d 	mov	r0, #500	; 0x1f4
   336c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   336cc:	ea002932 	b	3db9c <lowlev_cycleDelay>
   336d0:	20200000 	.word	0x20200000

000336d4 <TargetProgrammer::TargetProgrammer()>:
   336d4:	e3a02000 	mov	r2, #0
   336d8:	e2803601 	add	r3, r0, #1048576	; 0x100000
   336dc:	e58320c4 	str	r2, [r3, #196]	; 0xc4
   336e0:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   336e4:	e58320bc 	str	r2, [r3, #188]	; 0xbc
   336e8:	e58320b8 	str	r2, [r3, #184]	; 0xb8
   336ec:	e58320b4 	str	r2, [r3, #180]	; 0xb4
   336f0:	e58320b0 	str	r2, [r3, #176]	; 0xb0
   336f4:	e58320ac 	str	r2, [r3, #172]	; 0xac
   336f8:	e58320a8 	str	r2, [r3, #168]	; 0xa8
   336fc:	e58320d8 	str	r2, [r3, #216]	; 0xd8
   33700:	e58320d4 	str	r2, [r3, #212]	; 0xd4
   33704:	e58320d0 	str	r2, [r3, #208]	; 0xd0
   33708:	e58320cc 	str	r2, [r3, #204]	; 0xcc
   3370c:	e58320c8 	str	r2, [r3, #200]	; 0xc8
   33710:	e58320ec 	str	r2, [r3, #236]	; 0xec
   33714:	e58320e8 	str	r2, [r3, #232]	; 0xe8
   33718:	e58320e4 	str	r2, [r3, #228]	; 0xe4
   3371c:	e58320e0 	str	r2, [r3, #224]	; 0xe0
   33720:	e58320dc 	str	r2, [r3, #220]	; 0xdc
   33724:	e58320a0 	str	r2, [r3, #160]	; 0xa0
   33728:	e5c320a4 	strb	r2, [r3, #164]	; 0xa4
   3372c:	e12fff1e 	bx	lr

00033730 <TargetProgrammer::clear()>:
   33730:	e3a0c000 	mov	ip, #0
   33734:	e1a0300c 	mov	r3, ip
   33738:	e1a0100c 	mov	r1, ip
   3373c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   33740:	e280e601 	add	lr, r0, #1048576	; 0x100000
   33744:	e5cec0a4 	strb	ip, [lr, #164]	; 0xa4
   33748:	e58ec0a0 	str	ip, [lr, #160]	; 0xa0
   3374c:	e28e2004 	add	r2, lr, #4
   33750:	e7821183 	str	r1, [r2, r3, lsl #3]
   33754:	e2833001 	add	r3, r3, #1
   33758:	e3530014 	cmp	r3, #20
   3375c:	1afffffb 	bne	33750 <TargetProgrammer::clear()+0x20>
   33760:	e3a01000 	mov	r1, #0
   33764:	e240237f 	sub	r2, r0, #-67108863	; 0xfc000001
   33768:	e242263f 	sub	r2, r2, #66060288	; 0x3f00000
   3376c:	e2403001 	sub	r3, r0, #1
   33770:	e5e31001 	strb	r1, [r3, #1]!
   33774:	e1530002 	cmp	r3, r2
   33778:	1afffffc 	bne	33770 <TargetProgrammer::clear()+0x40>
   3377c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00033780 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>:
   33780:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33784:	e2807601 	add	r7, r0, #1048576	; 0x100000
   33788:	e59760a0 	ldr	r6, [r7, #160]	; 0xa0
   3378c:	e3560000 	cmp	r6, #0
   33790:	da00001c 	ble	33808 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x88>
   33794:	e3a0c000 	mov	ip, #0
   33798:	e2875004 	add	r5, r7, #4
   3379c:	ea000002 	b	337ac <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x2c>
   337a0:	e28cc001 	add	ip, ip, #1
   337a4:	e15c0006 	cmp	ip, r6
   337a8:	0a000014 	beq	33800 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x80>
   337ac:	e795418c 	ldr	r4, [r5, ip, lsl #3]
   337b0:	e797e18c 	ldr	lr, [r7, ip, lsl #3]
   337b4:	e084e00e 	add	lr, r4, lr
   337b8:	e15e0001 	cmp	lr, r1
   337bc:	1afffff7 	bne	337a0 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x20>
   337c0:	e28cc802 	add	ip, ip, #131072	; 0x20000
   337c4:	e080c18c 	add	ip, r0, ip, lsl #3
   337c8:	e0844003 	add	r4, r4, r3
   337cc:	e3530000 	cmp	r3, #0
   337d0:	e58c4004 	str	r4, [ip, #4]
   337d4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   337d8:	e1a0c001 	mov	ip, r1
   337dc:	e0811003 	add	r1, r1, r3
   337e0:	e042200c 	sub	r2, r2, ip
   337e4:	e35c0601 	cmp	ip, #1048576	; 0x100000
   337e8:	37d2300c 	ldrbcc	r3, [r2, ip]
   337ec:	37c0300c 	strbcc	r3, [r0, ip]
   337f0:	e28cc001 	add	ip, ip, #1
   337f4:	e15c0001 	cmp	ip, r1
   337f8:	1afffff9 	bne	337e4 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x64>
   337fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   33800:	e35c0013 	cmp	ip, #19
   33804:	ca000007 	bgt	33828 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xa8>
   33808:	e080c186 	add	ip, r0, r6, lsl #3
   3380c:	e28cc601 	add	ip, ip, #1048576	; 0x100000
   33810:	e2866001 	add	r6, r6, #1
   33814:	e3530000 	cmp	r3, #0
   33818:	e88c000a 	stm	ip, {r1, r3}
   3381c:	e58760a0 	str	r6, [r7, #160]	; 0xa0
   33820:	1affffec 	bne	337d8 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x58>
   33824:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   33828:	ebffcc7d 	bl	26a24 <CLogger::Get()>
   3382c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   33830:	e3a02004 	mov	r2, #4
   33834:	e59f3004 	ldr	r3, [pc, #4]	; 33840 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xc0>
   33838:	e59f1004 	ldr	r1, [pc, #4]	; 33844 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xc4>
   3383c:	eaffcbba 	b	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33840:	00046294 	.word	0x00046294
   33844:	000462ec 	.word	0x000462ec

00033848 <TargetProgrammer::addMemoryBlockStatic(unsigned long, unsigned char const*, unsigned long, void*)>:
   33848:	e253c000 	subs	ip, r3, #0
   3384c:	e1a03002 	mov	r3, r2
   33850:	012fff1e 	bxeq	lr
   33854:	e1a02001 	mov	r2, r1
   33858:	e1a01000 	mov	r1, r0
   3385c:	e1a0000c 	mov	r0, ip
   33860:	eaffffc6 	b	33780 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>

00033864 <TargetProgrammer::numMemoryBlocks()>:
   33864:	e2800601 	add	r0, r0, #1048576	; 0x100000
   33868:	e59000a0 	ldr	r0, [r0, #160]	; 0xa0
   3386c:	e12fff1e 	bx	lr

00033870 <TargetProgrammer::getMemoryBlock(int)>:
   33870:	e2811802 	add	r1, r1, #131072	; 0x20000
   33874:	e0800181 	add	r0, r0, r1, lsl #3
   33878:	e12fff1e 	bx	lr

0003387c <TargetProgrammer::getMemoryImagePtr()>:
   3387c:	e12fff1e 	bx	lr

00033880 <TargetProgrammer::getMemoryImageSize()>:
   33880:	e3a00601 	mov	r0, #1048576	; 0x100000
   33884:	e12fff1e 	bx	lr

00033888 <TargetProgrammer::setTargetRegisters(Z80Registers const&)>:
   33888:	e92d4030 	push	{r4, r5, lr}
   3388c:	e2805601 	add	r5, r0, #1048576	; 0x100000
   33890:	e24dd00c 	sub	sp, sp, #12
   33894:	e3a02048 	mov	r2, #72	; 0x48
   33898:	e28500a8 	add	r0, r5, #168	; 0xa8
   3389c:	e1a04001 	mov	r4, r1
   338a0:	ebffdb98 	bl	2a708 <memcpy>
   338a4:	e3a03001 	mov	r3, #1
   338a8:	e5c530a4 	strb	r3, [r5, #164]	; 0xa4
   338ac:	ebffcc5c 	bl	26a24 <CLogger::Get()>
   338b0:	e5942004 	ldr	r2, [r4, #4]
   338b4:	e5943000 	ldr	r3, [r4]
   338b8:	e59f1018 	ldr	r1, [pc, #24]	; 338d8 <TargetProgrammer::setTargetRegisters(Z80Registers const&)+0x50>
   338bc:	e58d2004 	str	r2, [sp, #4]
   338c0:	e58d3000 	str	r3, [sp]
   338c4:	e3a02004 	mov	r2, #4
   338c8:	e59f300c 	ldr	r3, [pc, #12]	; 338dc <TargetProgrammer::setTargetRegisters(Z80Registers const&)+0x54>
   338cc:	ebffcb96 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   338d0:	e28dd00c 	add	sp, sp, #12
   338d4:	e8bd8030 	pop	{r4, r5, pc}
   338d8:	000462ec 	.word	0x000462ec
   338dc:	000462b4 	.word	0x000462b4

000338e0 <TargetProgrammer::setTargetRegistersStatic(Z80Registers const&, void*)>:
   338e0:	e2513000 	subs	r3, r1, #0
   338e4:	e1a01000 	mov	r1, r0
   338e8:	012fff1e 	bxeq	lr
   338ec:	e1a00003 	mov	r0, r3
   338f0:	eaffffe4 	b	33888 <TargetProgrammer::setTargetRegisters(Z80Registers const&)>

000338f4 <TargetProgrammer::areRegistersValid()>:
   338f4:	e2800601 	add	r0, r0, #1048576	; 0x100000
   338f8:	e5d000a4 	ldrb	r0, [r0, #164]	; 0xa4
   338fc:	e12fff1e 	bx	lr

00033900 <TargetProgrammer::getTargetRegs(Z80Registers&)>:
   33900:	e92d4010 	push	{r4, lr}
   33904:	e1a04001 	mov	r4, r1
   33908:	e2801601 	add	r1, r0, #1048576	; 0x100000
   3390c:	e24dd008 	sub	sp, sp, #8
   33910:	e3a02048 	mov	r2, #72	; 0x48
   33914:	e28110a8 	add	r1, r1, #168	; 0xa8
   33918:	e1a00004 	mov	r0, r4
   3391c:	ebffdb79 	bl	2a708 <memcpy>
   33920:	ebffcc3f 	bl	26a24 <CLogger::Get()>
   33924:	e5942000 	ldr	r2, [r4]
   33928:	e59f3014 	ldr	r3, [pc, #20]	; 33944 <TargetProgrammer::getTargetRegs(Z80Registers&)+0x44>
   3392c:	e58d2000 	str	r2, [sp]
   33930:	e59f1010 	ldr	r1, [pc, #16]	; 33948 <TargetProgrammer::getTargetRegs(Z80Registers&)+0x48>
   33934:	e3a02004 	mov	r2, #4
   33938:	ebffcb7b 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3393c:	e28dd008 	add	sp, sp, #8
   33940:	e8bd8010 	pop	{r4, pc}
   33944:	000462d4 	.word	0x000462d4
   33948:	000462ec 	.word	0x000462ec

0003394c <HwManager::HwManager(CommandHandler&, BusAccess&)>:
   3394c:	e3e0c000 	mvn	ip, #0
   33950:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   33954:	e3a0e000 	mov	lr, #0
   33958:	e5801000 	str	r1, [r0]
   3395c:	e59f1018 	ldr	r1, [pc, #24]	; 3397c <HwManager::HwManager(CommandHandler&, BusAccess&)+0x30>
   33960:	e5802004 	str	r2, [r0, #4]
   33964:	e5810000 	str	r0, [r1]
   33968:	e580e030 	str	lr, [r0, #48]	; 0x30
   3396c:	e580e03c 	str	lr, [r0, #60]	; 0x3c
   33970:	e580c034 	str	ip, [r0, #52]	; 0x34
   33974:	e580c038 	str	ip, [r0, #56]	; 0x38
   33978:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   3397c:	0004dde0 	.word	0x0004dde0

00033980 <HwManager::init()>:
   33980:	e92d4010 	push	{r4, lr}
   33984:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   33988:	e1a04000 	mov	r4, r0
   3398c:	e3530000 	cmp	r3, #0
   33990:	e24dd030 	sub	sp, sp, #48	; 0x30
   33994:	ba000004 	blt	339ac <HwManager::init()+0x2c>
   33998:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   3399c:	e3530000 	cmp	r3, #0
   339a0:	ba000018 	blt	33a08 <HwManager::init()+0x88>
   339a4:	e28dd030 	add	sp, sp, #48	; 0x30
   339a8:	e8bd8010 	pop	{r4, pc}
   339ac:	e3a03000 	mov	r3, #0
   339b0:	e3a02004 	mov	r2, #4
   339b4:	e58d3028 	str	r3, [sp, #40]	; 0x28
   339b8:	e58d3020 	str	r3, [sp, #32]
   339bc:	e58d301c 	str	r3, [sp, #28]
   339c0:	e58d3018 	str	r3, [sp, #24]
   339c4:	e58d3014 	str	r3, [sp, #20]
   339c8:	e58d3010 	str	r3, [sp, #16]
   339cc:	e58d300c 	str	r3, [sp, #12]
   339d0:	e58d3008 	str	r3, [sp, #8]
   339d4:	e58d3004 	str	r3, [sp, #4]
   339d8:	e58d3000 	str	r3, [sp]
   339dc:	e58d2024 	str	r2, [sp, #36]	; 0x24
   339e0:	e58d002c 	str	r0, [sp, #44]	; 0x2c
   339e4:	e59f3064 	ldr	r3, [pc, #100]	; 33a50 <HwManager::init()+0xd0>
   339e8:	e3a01001 	mov	r1, #1
   339ec:	e59f2060 	ldr	r2, [pc, #96]	; 33a54 <HwManager::init()+0xd4>
   339f0:	e5900004 	ldr	r0, [r0, #4]
   339f4:	ebfff8ca 	bl	31d24 <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>
   339f8:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   339fc:	e5840034 	str	r0, [r4, #52]	; 0x34
   33a00:	e3530000 	cmp	r3, #0
   33a04:	aaffffe6 	bge	339a4 <HwManager::init()+0x24>
   33a08:	e3a02000 	mov	r2, #0
   33a0c:	e58d2004 	str	r2, [sp, #4]
   33a10:	e58d2000 	str	r2, [sp]
   33a14:	e1a01004 	mov	r1, r4
   33a18:	e3a02001 	mov	r2, #1
   33a1c:	e59f3034 	ldr	r3, [pc, #52]	; 33a58 <HwManager::init()+0xd8>
   33a20:	e5940000 	ldr	r0, [r4]
   33a24:	ebffefac 	bl	2f8dc <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   33a28:	e5840038 	str	r0, [r4, #56]	; 0x38
   33a2c:	ebffcbfc 	bl	26a24 <CLogger::Get()>
   33a30:	e5942038 	ldr	r2, [r4, #56]	; 0x38
   33a34:	e59f3020 	ldr	r3, [pc, #32]	; 33a5c <HwManager::init()+0xdc>
   33a38:	e58d2000 	str	r2, [sp]
   33a3c:	e59f101c 	ldr	r1, [pc, #28]	; 33a60 <HwManager::init()+0xe0>
   33a40:	e3a02004 	mov	r2, #4
   33a44:	ebffcb38 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33a48:	e28dd030 	add	sp, sp, #48	; 0x30
   33a4c:	e8bd8010 	pop	{r4, pc}
   33a50:	000342dc 	.word	0x000342dc
   33a54:	0003438c 	.word	0x0003438c
   33a58:	00034794 	.word	0x00034794
   33a5c:	00046300 	.word	0x00046300
   33a60:	000464a0 	.word	0x000464a0

00033a64 <HwManager::service()>:
   33a64:	e12fff1e 	bx	lr

00033a68 <HwManager::addHardwareElementStatic(HwBase*)>:
   33a68:	e59f301c 	ldr	r3, [pc, #28]	; 33a8c <HwManager::addHardwareElementStatic(HwBase*)+0x24>
   33a6c:	e5932000 	ldr	r2, [r3]
   33a70:	e5923030 	ldr	r3, [r2, #48]	; 0x30
   33a74:	e3530009 	cmp	r3, #9
   33a78:	d2831001 	addle	r1, r3, #1
   33a7c:	d2833002 	addle	r3, r3, #2
   33a80:	d5821030 	strle	r1, [r2, #48]	; 0x30
   33a84:	d7820103 	strle	r0, [r2, r3, lsl #2]
   33a88:	e12fff1e 	bx	lr
   33a8c:	0004dde0 	.word	0x0004dde0

00033a90 <HwManager::setMemoryEmulationMode(bool)>:
   33a90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33a94:	e1a07001 	mov	r7, r1
   33a98:	e24dd008 	sub	sp, sp, #8
   33a9c:	e1a06000 	mov	r6, r0
   33aa0:	ebffcbdf 	bl	26a24 <CLogger::Get()>
   33aa4:	e59f2098 	ldr	r2, [pc, #152]	; 33b44 <HwManager::setMemoryEmulationMode(bool)+0xb4>
   33aa8:	e3570000 	cmp	r7, #0
   33aac:	e59f1094 	ldr	r1, [pc, #148]	; 33b48 <HwManager::setMemoryEmulationMode(bool)+0xb8>
   33ab0:	01a01002 	moveq	r1, r2
   33ab4:	e59f3090 	ldr	r3, [pc, #144]	; 33b4c <HwManager::setMemoryEmulationMode(bool)+0xbc>
   33ab8:	e58d1000 	str	r1, [sp]
   33abc:	e3a02004 	mov	r2, #4
   33ac0:	e59f1088 	ldr	r1, [pc, #136]	; 33b50 <HwManager::setMemoryEmulationMode(bool)+0xc0>
   33ac4:	ebffcb18 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33ac8:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   33acc:	e3530000 	cmp	r3, #0
   33ad0:	da000018 	ble	33b38 <HwManager::setMemoryEmulationMode(bool)+0xa8>
   33ad4:	e3a04000 	mov	r4, #0
   33ad8:	e59f8074 	ldr	r8, [pc, #116]	; 33b54 <HwManager::setMemoryEmulationMode(bool)+0xc4>
   33adc:	e2865004 	add	r5, r6, #4
   33ae0:	ea00000b 	b	33b14 <HwManager::setMemoryEmulationMode(bool)+0x84>
   33ae4:	e5d0000c 	ldrb	r0, [r0, #12]
   33ae8:	e3500000 	cmp	r0, #0
   33aec:	0a000004 	beq	33b04 <HwManager::setMemoryEmulationMode(bool)+0x74>
   33af0:	e5950000 	ldr	r0, [r5]
   33af4:	e1a01007 	mov	r1, r7
   33af8:	e5903000 	ldr	r3, [r0]
   33afc:	e5933008 	ldr	r3, [r3, #8]
   33b00:	e12fff33 	blx	r3
   33b04:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   33b08:	e2844001 	add	r4, r4, #1
   33b0c:	e1530004 	cmp	r3, r4
   33b10:	da000008 	ble	33b38 <HwManager::setMemoryEmulationMode(bool)+0xa8>
   33b14:	e5b50004 	ldr	r0, [r5, #4]!
   33b18:	e3500000 	cmp	r0, #0
   33b1c:	0afffff9 	beq	33b08 <HwManager::setMemoryEmulationMode(bool)+0x78>
   33b20:	e5903000 	ldr	r3, [r0]
   33b24:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   33b28:	e1530008 	cmp	r3, r8
   33b2c:	0affffec 	beq	33ae4 <HwManager::setMemoryEmulationMode(bool)+0x54>
   33b30:	e12fff33 	blx	r3
   33b34:	eaffffeb 	b	33ae8 <HwManager::setMemoryEmulationMode(bool)+0x58>
   33b38:	e5c6703c 	strb	r7, [r6, #60]	; 0x3c
   33b3c:	e28dd008 	add	sp, sp, #8
   33b40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   33b44:	0004631c 	.word	0x0004631c
   33b48:	00046318 	.word	0x00046318
   33b4c:	00046320 	.word	0x00046320
   33b50:	000464a0 	.word	0x000464a0
   33b54:	000349f4 	.word	0x000349f4

00033b58 <HwManager::pageOutForInjection(bool)>:
   33b58:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   33b5c:	e3530000 	cmp	r3, #0
   33b60:	d12fff1e 	bxle	lr
   33b64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33b68:	e1a08000 	mov	r8, r0
   33b6c:	e1a07001 	mov	r7, r1
   33b70:	e3a04000 	mov	r4, #0
   33b74:	e59f6058 	ldr	r6, [pc, #88]	; 33bd4 <HwManager::pageOutForInjection(bool)+0x7c>
   33b78:	e2805004 	add	r5, r0, #4
   33b7c:	ea00000b 	b	33bb0 <HwManager::pageOutForInjection(bool)+0x58>
   33b80:	e5d0000c 	ldrb	r0, [r0, #12]
   33b84:	e3500000 	cmp	r0, #0
   33b88:	0a000004 	beq	33ba0 <HwManager::pageOutForInjection(bool)+0x48>
   33b8c:	e5950000 	ldr	r0, [r5]
   33b90:	e1a01007 	mov	r1, r7
   33b94:	e5903000 	ldr	r3, [r0]
   33b98:	e5933010 	ldr	r3, [r3, #16]
   33b9c:	e12fff33 	blx	r3
   33ba0:	e5983030 	ldr	r3, [r8, #48]	; 0x30
   33ba4:	e2844001 	add	r4, r4, #1
   33ba8:	e1530004 	cmp	r3, r4
   33bac:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
   33bb0:	e5b50004 	ldr	r0, [r5, #4]!
   33bb4:	e3500000 	cmp	r0, #0
   33bb8:	0afffff9 	beq	33ba4 <HwManager::pageOutForInjection(bool)+0x4c>
   33bbc:	e5903000 	ldr	r3, [r0]
   33bc0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   33bc4:	e1530006 	cmp	r3, r6
   33bc8:	0affffec 	beq	33b80 <HwManager::pageOutForInjection(bool)+0x28>
   33bcc:	e12fff33 	blx	r3
   33bd0:	eaffffeb 	b	33b84 <HwManager::pageOutForInjection(bool)+0x2c>
   33bd4:	000349f4 	.word	0x000349f4

00033bd8 <HwManager::setMemoryPagingEnable(bool)>:
   33bd8:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   33bdc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33be0:	e3530000 	cmp	r3, #0
   33be4:	e1a08000 	mov	r8, r0
   33be8:	e1a06001 	mov	r6, r1
   33bec:	da000018 	ble	33c54 <HwManager::setMemoryPagingEnable(bool)+0x7c>
   33bf0:	e3a04000 	mov	r4, #0
   33bf4:	e59f7060 	ldr	r7, [pc, #96]	; 33c5c <HwManager::setMemoryPagingEnable(bool)+0x84>
   33bf8:	e2805004 	add	r5, r0, #4
   33bfc:	ea00000b 	b	33c30 <HwManager::setMemoryPagingEnable(bool)+0x58>
   33c00:	e5d0000c 	ldrb	r0, [r0, #12]
   33c04:	e3500000 	cmp	r0, #0
   33c08:	0a000004 	beq	33c20 <HwManager::setMemoryPagingEnable(bool)+0x48>
   33c0c:	e5950000 	ldr	r0, [r5]
   33c10:	e1a01006 	mov	r1, r6
   33c14:	e5903000 	ldr	r3, [r0]
   33c18:	e593300c 	ldr	r3, [r3, #12]
   33c1c:	e12fff33 	blx	r3
   33c20:	e5983030 	ldr	r3, [r8, #48]	; 0x30
   33c24:	e2844001 	add	r4, r4, #1
   33c28:	e1530004 	cmp	r3, r4
   33c2c:	da000008 	ble	33c54 <HwManager::setMemoryPagingEnable(bool)+0x7c>
   33c30:	e5b50004 	ldr	r0, [r5, #4]!
   33c34:	e3500000 	cmp	r0, #0
   33c38:	0afffff9 	beq	33c24 <HwManager::setMemoryPagingEnable(bool)+0x4c>
   33c3c:	e5903000 	ldr	r3, [r0]
   33c40:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   33c44:	e1530007 	cmp	r3, r7
   33c48:	0affffec 	beq	33c00 <HwManager::setMemoryPagingEnable(bool)+0x28>
   33c4c:	e12fff33 	blx	r3
   33c50:	eaffffeb 	b	33c04 <HwManager::setMemoryPagingEnable(bool)+0x2c>
   33c54:	e5c8603e 	strb	r6, [r8, #62]	; 0x3e
   33c58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   33c5c:	000349f4 	.word	0x000349f4

00033c60 <HwManager::setOpcodeInjectEnable(bool)>:
   33c60:	e92d4030 	push	{r4, r5, lr}
   33c64:	e1a04001 	mov	r4, r1
   33c68:	e24dd00c 	sub	sp, sp, #12
   33c6c:	e1a05000 	mov	r5, r0
   33c70:	ebffcb6b 	bl	26a24 <CLogger::Get()>
   33c74:	e59f2028 	ldr	r2, [pc, #40]	; 33ca4 <HwManager::setOpcodeInjectEnable(bool)+0x44>
   33c78:	e3540000 	cmp	r4, #0
   33c7c:	e59f1024 	ldr	r1, [pc, #36]	; 33ca8 <HwManager::setOpcodeInjectEnable(bool)+0x48>
   33c80:	01a01002 	moveq	r1, r2
   33c84:	e59f3020 	ldr	r3, [pc, #32]	; 33cac <HwManager::setOpcodeInjectEnable(bool)+0x4c>
   33c88:	e58d1000 	str	r1, [sp]
   33c8c:	e3a02004 	mov	r2, #4
   33c90:	e59f1018 	ldr	r1, [pc, #24]	; 33cb0 <HwManager::setOpcodeInjectEnable(bool)+0x50>
   33c94:	ebffcaa4 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33c98:	e5c5403f 	strb	r4, [r5, #63]	; 0x3f
   33c9c:	e28dd00c 	add	sp, sp, #12
   33ca0:	e8bd8030 	pop	{r4, r5, pc}
   33ca4:	0004631c 	.word	0x0004631c
   33ca8:	00046318 	.word	0x00046318
   33cac:	0004633c 	.word	0x0004633c
   33cb0:	000464a0 	.word	0x000464a0

00033cb4 <HwManager::setMirrorMode(bool)>:
   33cb4:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   33cb8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33cbc:	e3530000 	cmp	r3, #0
   33cc0:	e1a08000 	mov	r8, r0
   33cc4:	e1a06001 	mov	r6, r1
   33cc8:	da000018 	ble	33d30 <HwManager::setMirrorMode(bool)+0x7c>
   33ccc:	e3a04000 	mov	r4, #0
   33cd0:	e59f7060 	ldr	r7, [pc, #96]	; 33d38 <HwManager::setMirrorMode(bool)+0x84>
   33cd4:	e2805004 	add	r5, r0, #4
   33cd8:	ea00000b 	b	33d0c <HwManager::setMirrorMode(bool)+0x58>
   33cdc:	e5d0000c 	ldrb	r0, [r0, #12]
   33ce0:	e3500000 	cmp	r0, #0
   33ce4:	0a000004 	beq	33cfc <HwManager::setMirrorMode(bool)+0x48>
   33ce8:	e5950000 	ldr	r0, [r5]
   33cec:	e1a01006 	mov	r1, r6
   33cf0:	e5903000 	ldr	r3, [r0]
   33cf4:	e5933014 	ldr	r3, [r3, #20]
   33cf8:	e12fff33 	blx	r3
   33cfc:	e5983030 	ldr	r3, [r8, #48]	; 0x30
   33d00:	e2844001 	add	r4, r4, #1
   33d04:	e1530004 	cmp	r3, r4
   33d08:	da000008 	ble	33d30 <HwManager::setMirrorMode(bool)+0x7c>
   33d0c:	e5b50004 	ldr	r0, [r5, #4]!
   33d10:	e3500000 	cmp	r0, #0
   33d14:	0afffff9 	beq	33d00 <HwManager::setMirrorMode(bool)+0x4c>
   33d18:	e5903000 	ldr	r3, [r0]
   33d1c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   33d20:	e1530007 	cmp	r3, r7
   33d24:	0affffec 	beq	33cdc <HwManager::setMirrorMode(bool)+0x28>
   33d28:	e12fff33 	blx	r3
   33d2c:	eaffffeb 	b	33ce0 <HwManager::setMirrorMode(bool)+0x2c>
   33d30:	e5c8603d 	strb	r6, [r8, #61]	; 0x3d
   33d34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   33d38:	000349f4 	.word	0x000349f4

00033d3c <HwManager::getMaxAddress()>:
   33d3c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   33d40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33d44:	e3530000 	cmp	r3, #0
   33d48:	da00001b 	ble	33dbc <HwManager::getMaxAddress()+0x80>
   33d4c:	e1a07000 	mov	r7, r0
   33d50:	e3a04000 	mov	r4, #0
   33d54:	e59f806c 	ldr	r8, [pc, #108]	; 33dc8 <HwManager::getMaxAddress()+0x8c>
   33d58:	e59f606c 	ldr	r6, [pc, #108]	; 33dcc <HwManager::getMaxAddress()+0x90>
   33d5c:	e2805004 	add	r5, r0, #4
   33d60:	ea00000c 	b	33d98 <HwManager::getMaxAddress()+0x5c>
   33d64:	e5d0000c 	ldrb	r0, [r0, #12]
   33d68:	e3500000 	cmp	r0, #0
   33d6c:	0a000005 	beq	33d88 <HwManager::getMaxAddress()+0x4c>
   33d70:	e5950000 	ldr	r0, [r5]
   33d74:	e5903000 	ldr	r3, [r0]
   33d78:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   33d7c:	e12fff33 	blx	r3
   33d80:	e1580000 	cmp	r8, r0
   33d84:	31a08000 	movcc	r8, r0
   33d88:	e5973030 	ldr	r3, [r7, #48]	; 0x30
   33d8c:	e2844001 	add	r4, r4, #1
   33d90:	e1530004 	cmp	r3, r4
   33d94:	da000009 	ble	33dc0 <HwManager::getMaxAddress()+0x84>
   33d98:	e5b50004 	ldr	r0, [r5, #4]!
   33d9c:	e3500000 	cmp	r0, #0
   33da0:	0afffff9 	beq	33d8c <HwManager::getMaxAddress()+0x50>
   33da4:	e5903000 	ldr	r3, [r0]
   33da8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   33dac:	e1530006 	cmp	r3, r6
   33db0:	0affffeb 	beq	33d64 <HwManager::getMaxAddress()+0x28>
   33db4:	e12fff33 	blx	r3
   33db8:	eaffffea 	b	33d68 <HwManager::getMaxAddress()+0x2c>
   33dbc:	e59f8004 	ldr	r8, [pc, #4]	; 33dc8 <HwManager::getMaxAddress()+0x8c>
   33dc0:	e1a00008 	mov	r0, r8
   33dc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   33dc8:	0000ffff 	.word	0x0000ffff
   33dcc:	000349f4 	.word	0x000349f4

00033dd0 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>:
   33dd0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33dd4:	e24dd024 	sub	sp, sp, #36	; 0x24
   33dd8:	e1a0a002 	mov	sl, r2
   33ddc:	e5dd2048 	ldrb	r2, [sp, #72]	; 0x48
   33de0:	e5ddc050 	ldrb	ip, [sp, #80]	; 0x50
   33de4:	e58d2010 	str	r2, [sp, #16]
   33de8:	e5dd204c 	ldrb	r2, [sp, #76]	; 0x4c
   33dec:	e35c0000 	cmp	ip, #0
   33df0:	e1a06000 	mov	r6, r0
   33df4:	e1a09001 	mov	r9, r1
   33df8:	e58d2014 	str	r2, [sp, #20]
   33dfc:	0a00002e 	beq	33ebc <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xec>
   33e00:	e3a02001 	mov	r2, #1
   33e04:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   33e08:	e58d2018 	str	r2, [sp, #24]
   33e0c:	e35c0000 	cmp	ip, #0
   33e10:	da000034 	ble	33ee8 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x118>
   33e14:	e3a04000 	mov	r4, #0
   33e18:	e1a0b00a 	mov	fp, sl
   33e1c:	e59f70d4 	ldr	r7, [pc, #212]	; 33ef8 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x128>
   33e20:	e1a0a003 	mov	sl, r3
   33e24:	e2865004 	add	r5, r6, #4
   33e28:	e58d401c 	str	r4, [sp, #28]
   33e2c:	ea000015 	b	33e88 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xb8>
   33e30:	e5d0000c 	ldrb	r0, [r0, #12]
   33e34:	e3500000 	cmp	r0, #0
   33e38:	0a00000e 	beq	33e78 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xa8>
   33e3c:	e5950000 	ldr	r0, [r5]
   33e40:	e59d2018 	ldr	r2, [sp, #24]
   33e44:	e590c000 	ldr	ip, [r0]
   33e48:	e58d2008 	str	r2, [sp, #8]
   33e4c:	e59d2014 	ldr	r2, [sp, #20]
   33e50:	e1a0300a 	mov	r3, sl
   33e54:	e58d2004 	str	r2, [sp, #4]
   33e58:	e59d2010 	ldr	r2, [sp, #16]
   33e5c:	e1a01009 	mov	r1, r9
   33e60:	e58d2000 	str	r2, [sp]
   33e64:	e59c801c 	ldr	r8, [ip, #28]
   33e68:	e1a0200b 	mov	r2, fp
   33e6c:	e12fff38 	blx	r8
   33e70:	e31000fb 	tst	r0, #251	; 0xfb
   33e74:	158d001c 	strne	r0, [sp, #28]
   33e78:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   33e7c:	e2844001 	add	r4, r4, #1
   33e80:	e15c0004 	cmp	ip, r4
   33e84:	da000008 	ble	33eac <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xdc>
   33e88:	e5b50004 	ldr	r0, [r5, #4]!
   33e8c:	e3500000 	cmp	r0, #0
   33e90:	0afffff9 	beq	33e7c <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xac>
   33e94:	e590c000 	ldr	ip, [r0]
   33e98:	e59c8030 	ldr	r8, [ip, #48]	; 0x30
   33e9c:	e1580007 	cmp	r8, r7
   33ea0:	0affffe2 	beq	33e30 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x60>
   33ea4:	e12fff38 	blx	r8
   33ea8:	eaffffe1 	b	33e34 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x64>
   33eac:	e59db01c 	ldr	fp, [sp, #28]
   33eb0:	e1a0000b 	mov	r0, fp
   33eb4:	e28dd024 	add	sp, sp, #36	; 0x24
   33eb8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33ebc:	e5900004 	ldr	r0, [r0, #4]
   33ec0:	e58d3018 	str	r3, [sp, #24]
   33ec4:	ebfffc6d 	bl	33080 <BusAccess::waitIsHeld()>
   33ec8:	e3500000 	cmp	r0, #0
   33ecc:	e59d3018 	ldr	r3, [sp, #24]
   33ed0:	1affffca 	bne	33e00 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x30>
   33ed4:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   33ed8:	e5d6203c 	ldrb	r2, [r6, #60]	; 0x3c
   33edc:	e35c0000 	cmp	ip, #0
   33ee0:	e58d2018 	str	r2, [sp, #24]
   33ee4:	caffffca 	bgt	33e14 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x44>
   33ee8:	e3a0b000 	mov	fp, #0
   33eec:	e1a0000b 	mov	r0, fp
   33ef0:	e28dd024 	add	sp, sp, #36	; 0x24
   33ef4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33ef8:	000349f4 	.word	0x000349f4

00033efc <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>:
   33efc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33f00:	e24dd024 	sub	sp, sp, #36	; 0x24
   33f04:	e1a0a002 	mov	sl, r2
   33f08:	e5dd2048 	ldrb	r2, [sp, #72]	; 0x48
   33f0c:	e5ddc050 	ldrb	ip, [sp, #80]	; 0x50
   33f10:	e58d2010 	str	r2, [sp, #16]
   33f14:	e5dd204c 	ldrb	r2, [sp, #76]	; 0x4c
   33f18:	e35c0000 	cmp	ip, #0
   33f1c:	e1a06000 	mov	r6, r0
   33f20:	e1a09001 	mov	r9, r1
   33f24:	e58d2014 	str	r2, [sp, #20]
   33f28:	0a00002e 	beq	33fe8 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xec>
   33f2c:	e3a02001 	mov	r2, #1
   33f30:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   33f34:	e58d2018 	str	r2, [sp, #24]
   33f38:	e35c0000 	cmp	ip, #0
   33f3c:	da000034 	ble	34014 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x118>
   33f40:	e3a04000 	mov	r4, #0
   33f44:	e1a0b00a 	mov	fp, sl
   33f48:	e59f70d4 	ldr	r7, [pc, #212]	; 34024 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x128>
   33f4c:	e1a0a003 	mov	sl, r3
   33f50:	e2865004 	add	r5, r6, #4
   33f54:	e58d401c 	str	r4, [sp, #28]
   33f58:	ea000015 	b	33fb4 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xb8>
   33f5c:	e5d0000c 	ldrb	r0, [r0, #12]
   33f60:	e3500000 	cmp	r0, #0
   33f64:	0a00000e 	beq	33fa4 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xa8>
   33f68:	e5950000 	ldr	r0, [r5]
   33f6c:	e59d2018 	ldr	r2, [sp, #24]
   33f70:	e590c000 	ldr	ip, [r0]
   33f74:	e58d2008 	str	r2, [sp, #8]
   33f78:	e59d2014 	ldr	r2, [sp, #20]
   33f7c:	e1a0300a 	mov	r3, sl
   33f80:	e58d2004 	str	r2, [sp, #4]
   33f84:	e59d2010 	ldr	r2, [sp, #16]
   33f88:	e1a01009 	mov	r1, r9
   33f8c:	e58d2000 	str	r2, [sp]
   33f90:	e59c8020 	ldr	r8, [ip, #32]
   33f94:	e1a0200b 	mov	r2, fp
   33f98:	e12fff38 	blx	r8
   33f9c:	e31000fb 	tst	r0, #251	; 0xfb
   33fa0:	158d001c 	strne	r0, [sp, #28]
   33fa4:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   33fa8:	e2844001 	add	r4, r4, #1
   33fac:	e15c0004 	cmp	ip, r4
   33fb0:	da000008 	ble	33fd8 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xdc>
   33fb4:	e5b50004 	ldr	r0, [r5, #4]!
   33fb8:	e3500000 	cmp	r0, #0
   33fbc:	0afffff9 	beq	33fa8 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xac>
   33fc0:	e590c000 	ldr	ip, [r0]
   33fc4:	e59c8030 	ldr	r8, [ip, #48]	; 0x30
   33fc8:	e1580007 	cmp	r8, r7
   33fcc:	0affffe2 	beq	33f5c <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x60>
   33fd0:	e12fff38 	blx	r8
   33fd4:	eaffffe1 	b	33f60 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x64>
   33fd8:	e59db01c 	ldr	fp, [sp, #28]
   33fdc:	e1a0000b 	mov	r0, fp
   33fe0:	e28dd024 	add	sp, sp, #36	; 0x24
   33fe4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33fe8:	e5900004 	ldr	r0, [r0, #4]
   33fec:	e58d3018 	str	r3, [sp, #24]
   33ff0:	ebfffc22 	bl	33080 <BusAccess::waitIsHeld()>
   33ff4:	e3500000 	cmp	r0, #0
   33ff8:	e59d3018 	ldr	r3, [sp, #24]
   33ffc:	1affffca 	bne	33f2c <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x30>
   34000:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   34004:	e5d6203c 	ldrb	r2, [r6, #60]	; 0x3c
   34008:	e35c0000 	cmp	ip, #0
   3400c:	e58d2018 	str	r2, [sp, #24]
   34010:	caffffca 	bgt	33f40 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x44>
   34014:	e3a0b000 	mov	fp, #0
   34018:	e1a0000b 	mov	r0, fp
   3401c:	e28dd024 	add	sp, sp, #36	; 0x24
   34020:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34024:	000349f4 	.word	0x000349f4

00034028 <HwManager::getMirrorMemForAddr(unsigned long)>:
   34028:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3402c:	e3530000 	cmp	r3, #0
   34030:	da00001f 	ble	340b4 <HwManager::getMirrorMemForAddr(unsigned long)+0x8c>
   34034:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34038:	e1a06000 	mov	r6, r0
   3403c:	e1a08001 	mov	r8, r1
   34040:	e3a04000 	mov	r4, #0
   34044:	e59f7070 	ldr	r7, [pc, #112]	; 340bc <HwManager::getMirrorMemForAddr(unsigned long)+0x94>
   34048:	e2805004 	add	r5, r0, #4
   3404c:	ea00000d 	b	34088 <HwManager::getMirrorMemForAddr(unsigned long)+0x60>
   34050:	e5d0000c 	ldrb	r0, [r0, #12]
   34054:	e3500000 	cmp	r0, #0
   34058:	0a000006 	beq	34078 <HwManager::getMirrorMemForAddr(unsigned long)+0x50>
   3405c:	e5950000 	ldr	r0, [r5]
   34060:	e1a01008 	mov	r1, r8
   34064:	e5903000 	ldr	r3, [r0]
   34068:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   3406c:	e12fff33 	blx	r3
   34070:	e3500000 	cmp	r0, #0
   34074:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   34078:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   3407c:	e2844001 	add	r4, r4, #1
   34080:	e1530004 	cmp	r3, r4
   34084:	da000008 	ble	340ac <HwManager::getMirrorMemForAddr(unsigned long)+0x84>
   34088:	e5b50004 	ldr	r0, [r5, #4]!
   3408c:	e3500000 	cmp	r0, #0
   34090:	0afffff9 	beq	3407c <HwManager::getMirrorMemForAddr(unsigned long)+0x54>
   34094:	e5903000 	ldr	r3, [r0]
   34098:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   3409c:	e1530007 	cmp	r3, r7
   340a0:	0affffea 	beq	34050 <HwManager::getMirrorMemForAddr(unsigned long)+0x28>
   340a4:	e12fff33 	blx	r3
   340a8:	eaffffe9 	b	34054 <HwManager::getMirrorMemForAddr(unsigned long)+0x2c>
   340ac:	e3a00000 	mov	r0, #0
   340b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   340b4:	e3a00000 	mov	r0, #0
   340b8:	e12fff1e 	bx	lr
   340bc:	000349f4 	.word	0x000349f4

000340c0 <HwManager::mirrorClone()>:
   340c0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   340c4:	e3530000 	cmp	r3, #0
   340c8:	d12fff1e 	bxle	lr
   340cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   340d0:	e1a07000 	mov	r7, r0
   340d4:	e3a04000 	mov	r4, #0
   340d8:	e59f6054 	ldr	r6, [pc, #84]	; 34134 <HwManager::mirrorClone()+0x74>
   340dc:	e2805004 	add	r5, r0, #4
   340e0:	ea00000a 	b	34110 <HwManager::mirrorClone()+0x50>
   340e4:	e5d0000c 	ldrb	r0, [r0, #12]
   340e8:	e3500000 	cmp	r0, #0
   340ec:	0a000003 	beq	34100 <HwManager::mirrorClone()+0x40>
   340f0:	e5950000 	ldr	r0, [r5]
   340f4:	e5903000 	ldr	r3, [r0]
   340f8:	e5933018 	ldr	r3, [r3, #24]
   340fc:	e12fff33 	blx	r3
   34100:	e5973030 	ldr	r3, [r7, #48]	; 0x30
   34104:	e2844001 	add	r4, r4, #1
   34108:	e1530004 	cmp	r3, r4
   3410c:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
   34110:	e5b50004 	ldr	r0, [r5, #4]!
   34114:	e3500000 	cmp	r0, #0
   34118:	0afffff9 	beq	34104 <HwManager::mirrorClone()+0x44>
   3411c:	e5903000 	ldr	r3, [r0]
   34120:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34124:	e1530006 	cmp	r3, r6
   34128:	0affffed 	beq	340e4 <HwManager::mirrorClone()+0x24>
   3412c:	e12fff33 	blx	r3
   34130:	eaffffec 	b	340e8 <HwManager::mirrorClone()+0x28>
   34134:	000349f4 	.word	0x000349f4

00034138 <HwManager::tracerClone()>:
   34138:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3413c:	e3530000 	cmp	r3, #0
   34140:	d12fff1e 	bxle	lr
   34144:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34148:	e1a07000 	mov	r7, r0
   3414c:	e3a04000 	mov	r4, #0
   34150:	e59f6054 	ldr	r6, [pc, #84]	; 341ac <HwManager::tracerClone()+0x74>
   34154:	e2805004 	add	r5, r0, #4
   34158:	ea00000a 	b	34188 <HwManager::tracerClone()+0x50>
   3415c:	e5d0000c 	ldrb	r0, [r0, #12]
   34160:	e3500000 	cmp	r0, #0
   34164:	0a000003 	beq	34178 <HwManager::tracerClone()+0x40>
   34168:	e5950000 	ldr	r0, [r5]
   3416c:	e5903000 	ldr	r3, [r0]
   34170:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   34174:	e12fff33 	blx	r3
   34178:	e5973030 	ldr	r3, [r7, #48]	; 0x30
   3417c:	e2844001 	add	r4, r4, #1
   34180:	e1530004 	cmp	r3, r4
   34184:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
   34188:	e5b50004 	ldr	r0, [r5, #4]!
   3418c:	e3500000 	cmp	r0, #0
   34190:	0afffff9 	beq	3417c <HwManager::tracerClone()+0x44>
   34194:	e5903000 	ldr	r3, [r0]
   34198:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   3419c:	e1530006 	cmp	r3, r6
   341a0:	0affffed 	beq	3415c <HwManager::tracerClone()+0x24>
   341a4:	e12fff33 	blx	r3
   341a8:	eaffffec 	b	34160 <HwManager::tracerClone()+0x28>
   341ac:	000349f4 	.word	0x000349f4

000341b0 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   341b0:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   341b4:	e35c0000 	cmp	ip, #0
   341b8:	d12fff1e 	bxle	lr
   341bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   341c0:	e1a06000 	mov	r6, r0
   341c4:	e1a08001 	mov	r8, r1
   341c8:	e1a09002 	mov	r9, r2
   341cc:	e1a0b003 	mov	fp, r3
   341d0:	e3a04000 	mov	r4, #0
   341d4:	e59f7074 	ldr	r7, [pc, #116]	; 34250 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0xa0>
   341d8:	e24dd00c 	sub	sp, sp, #12
   341dc:	e2805004 	add	r5, r0, #4
   341e0:	ea00000f 	b	34224 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x74>
   341e4:	e5d0000c 	ldrb	r0, [r0, #12]
   341e8:	e3500000 	cmp	r0, #0
   341ec:	0a000008 	beq	34214 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x64>
   341f0:	e5950000 	ldr	r0, [r5]
   341f4:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   341f8:	e5902000 	ldr	r2, [r0]
   341fc:	e58d1000 	str	r1, [sp]
   34200:	e592a02c 	ldr	sl, [r2, #44]	; 0x2c
   34204:	e1a0300b 	mov	r3, fp
   34208:	e1a02009 	mov	r2, r9
   3420c:	e1a01008 	mov	r1, r8
   34210:	e12fff3a 	blx	sl
   34214:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   34218:	e2844001 	add	r4, r4, #1
   3421c:	e15c0004 	cmp	ip, r4
   34220:	da000008 	ble	34248 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x98>
   34224:	e5b50004 	ldr	r0, [r5, #4]!
   34228:	e3500000 	cmp	r0, #0
   3422c:	0afffff9 	beq	34218 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x68>
   34230:	e5902000 	ldr	r2, [r0]
   34234:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   34238:	e1520007 	cmp	r2, r7
   3423c:	0affffe8 	beq	341e4 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x34>
   34240:	e12fff32 	blx	r2
   34244:	eaffffe7 	b	341e8 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x38>
   34248:	e28dd00c 	add	sp, sp, #12
   3424c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34250:	000349f4 	.word	0x000349f4

00034254 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   34254:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34258:	e3530000 	cmp	r3, #0
   3425c:	d12fff1e 	bxle	lr
   34260:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   34264:	e1a06000 	mov	r6, r0
   34268:	e1a08001 	mov	r8, r1
   3426c:	e1a09002 	mov	r9, r2
   34270:	e3a04000 	mov	r4, #0
   34274:	e59f705c 	ldr	r7, [pc, #92]	; 342d8 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x84>
   34278:	e2805004 	add	r5, r0, #4
   3427c:	ea00000c 	b	342b4 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x60>
   34280:	e5d0000c 	ldrb	r0, [r0, #12]
   34284:	e3500000 	cmp	r0, #0
   34288:	0a000005 	beq	342a4 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x50>
   3428c:	e5950000 	ldr	r0, [r5]
   34290:	e1a02009 	mov	r2, r9
   34294:	e5903000 	ldr	r3, [r0]
   34298:	e1a01008 	mov	r1, r8
   3429c:	e5933000 	ldr	r3, [r3]
   342a0:	e12fff33 	blx	r3
   342a4:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   342a8:	e2844001 	add	r4, r4, #1
   342ac:	e1530004 	cmp	r3, r4
   342b0:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   342b4:	e5b50004 	ldr	r0, [r5, #4]!
   342b8:	e3500000 	cmp	r0, #0
   342bc:	0afffff9 	beq	342a8 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x54>
   342c0:	e5903000 	ldr	r3, [r0]
   342c4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   342c8:	e1530007 	cmp	r3, r7
   342cc:	0affffeb 	beq	34280 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x2c>
   342d0:	e12fff33 	blx	r3
   342d4:	eaffffea 	b	34284 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x30>
   342d8:	000349f4 	.word	0x000349f4

000342dc <HwManager::busActionCompleteStatic(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   342dc:	e3500000 	cmp	r0, #0
   342e0:	012fff1e 	bxeq	lr
   342e4:	eaffffda 	b	34254 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>

000342e8 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   342e8:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   342ec:	e35c0000 	cmp	ip, #0
   342f0:	d12fff1e 	bxle	lr
   342f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   342f8:	e1a06000 	mov	r6, r0
   342fc:	e1a08001 	mov	r8, r1
   34300:	e1a09002 	mov	r9, r2
   34304:	e1a0b003 	mov	fp, r3
   34308:	e3a04000 	mov	r4, #0
   3430c:	e59f7074 	ldr	r7, [pc, #116]	; 34388 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0xa0>
   34310:	e24dd00c 	sub	sp, sp, #12
   34314:	e2805004 	add	r5, r0, #4
   34318:	ea00000f 	b	3435c <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x74>
   3431c:	e5d0000c 	ldrb	r0, [r0, #12]
   34320:	e3500000 	cmp	r0, #0
   34324:	0a000008 	beq	3434c <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x64>
   34328:	e5950000 	ldr	r0, [r5]
   3432c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   34330:	e5902000 	ldr	r2, [r0]
   34334:	e58d1000 	str	r1, [sp]
   34338:	e592a004 	ldr	sl, [r2, #4]
   3433c:	e1a0300b 	mov	r3, fp
   34340:	e1a02009 	mov	r2, r9
   34344:	e1a01008 	mov	r1, r8
   34348:	e12fff3a 	blx	sl
   3434c:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   34350:	e2844001 	add	r4, r4, #1
   34354:	e15c0004 	cmp	ip, r4
   34358:	da000008 	ble	34380 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x98>
   3435c:	e5b50004 	ldr	r0, [r5, #4]!
   34360:	e3500000 	cmp	r0, #0
   34364:	0afffff9 	beq	34350 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x68>
   34368:	e5902000 	ldr	r2, [r0]
   3436c:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   34370:	e1520007 	cmp	r2, r7
   34374:	0affffe8 	beq	3431c <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x34>
   34378:	e12fff32 	blx	r2
   3437c:	eaffffe7 	b	34320 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x38>
   34380:	e28dd00c 	add	sp, sp, #12
   34384:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34388:	000349f4 	.word	0x000349f4

0003438c <HwManager::handleWaitInterruptStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   3438c:	e3500000 	cmp	r0, #0
   34390:	012fff1e 	bxeq	lr
   34394:	eaffffd3 	b	342e8 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)>

00034398 <HwManager::enableHw(char const*, bool)>:
   34398:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3439c:	e3530000 	cmp	r3, #0
   343a0:	da00002c 	ble	34458 <HwManager::enableHw(char const*, bool)+0xc0>
   343a4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   343a8:	e1a06000 	mov	r6, r0
   343ac:	e1a09001 	mov	r9, r1
   343b0:	e1a07002 	mov	r7, r2
   343b4:	e3a04000 	mov	r4, #0
   343b8:	e59f80a0 	ldr	r8, [pc, #160]	; 34460 <HwManager::enableHw(char const*, bool)+0xc8>
   343bc:	e2805004 	add	r5, r0, #4
   343c0:	ea000008 	b	343e8 <HwManager::enableHw(char const*, bool)+0x50>
   343c4:	e1a01009 	mov	r1, r9
   343c8:	e5900010 	ldr	r0, [r0, #16]
   343cc:	ebffd6f9 	bl	29fb8 <strcasecmp>
   343d0:	e3500000 	cmp	r0, #0
   343d4:	0a00000f 	beq	34418 <HwManager::enableHw(char const*, bool)+0x80>
   343d8:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   343dc:	e2844001 	add	r4, r4, #1
   343e0:	e1530004 	cmp	r3, r4
   343e4:	da000015 	ble	34440 <HwManager::enableHw(char const*, bool)+0xa8>
   343e8:	e5b50004 	ldr	r0, [r5, #4]!
   343ec:	e3500000 	cmp	r0, #0
   343f0:	0afffff9 	beq	343dc <HwManager::enableHw(char const*, bool)+0x44>
   343f4:	e5903000 	ldr	r3, [r0]
   343f8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   343fc:	e1530008 	cmp	r3, r8
   34400:	0affffef 	beq	343c4 <HwManager::enableHw(char const*, bool)+0x2c>
   34404:	e12fff33 	blx	r3
   34408:	e1a01009 	mov	r1, r9
   3440c:	ebffd6e9 	bl	29fb8 <strcasecmp>
   34410:	e3500000 	cmp	r0, #0
   34414:	1affffef 	bne	343d8 <HwManager::enableHw(char const*, bool)+0x40>
   34418:	e2844002 	add	r4, r4, #2
   3441c:	e7960104 	ldr	r0, [r6, r4, lsl #2]
   34420:	e59f203c 	ldr	r2, [pc, #60]	; 34464 <HwManager::enableHw(char const*, bool)+0xcc>
   34424:	e5903000 	ldr	r3, [r0]
   34428:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   3442c:	e1530002 	cmp	r3, r2
   34430:	1a000004 	bne	34448 <HwManager::enableHw(char const*, bool)+0xb0>
   34434:	e5c0700c 	strb	r7, [r0, #12]
   34438:	e3a00001 	mov	r0, #1
   3443c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34440:	e3a00000 	mov	r0, #0
   34444:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34448:	e1a01007 	mov	r1, r7
   3444c:	e12fff33 	blx	r3
   34450:	e3a00001 	mov	r0, #1
   34454:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34458:	e3a00000 	mov	r0, #0
   3445c:	e12fff1e 	bx	lr
   34460:	00034a04 	.word	0x00034a04
   34464:	000349fc 	.word	0x000349fc

00034468 <HwManager::disableAll()>:
   34468:	e5902030 	ldr	r2, [r0, #48]	; 0x30
   3446c:	e3520000 	cmp	r2, #0
   34470:	d12fff1e 	bxle	lr
   34474:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34478:	e3a04000 	mov	r4, #0
   3447c:	e1a07000 	mov	r7, r0
   34480:	e1a08004 	mov	r8, r4
   34484:	e59f6040 	ldr	r6, [pc, #64]	; 344cc <HwManager::disableAll()+0x64>
   34488:	e2805004 	add	r5, r0, #4
   3448c:	ea000002 	b	3449c <HwManager::disableAll()+0x34>
   34490:	e2844001 	add	r4, r4, #1
   34494:	e1520004 	cmp	r2, r4
   34498:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
   3449c:	e5b50004 	ldr	r0, [r5, #4]!
   344a0:	e3500000 	cmp	r0, #0
   344a4:	0afffff9 	beq	34490 <HwManager::disableAll()+0x28>
   344a8:	e5903000 	ldr	r3, [r0]
   344ac:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   344b0:	e1530006 	cmp	r3, r6
   344b4:	05c0800c 	strbeq	r8, [r0, #12]
   344b8:	0afffff4 	beq	34490 <HwManager::disableAll()+0x28>
   344bc:	e3a01000 	mov	r1, #0
   344c0:	e12fff33 	blx	r3
   344c4:	e5972030 	ldr	r2, [r7, #48]	; 0x30
   344c8:	eafffff0 	b	34490 <HwManager::disableAll()+0x28>
   344cc:	000349fc 	.word	0x000349fc

000344d0 <HwManager::configureHw(char const*, char const*)>:
   344d0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   344d4:	e3530000 	cmp	r3, #0
   344d8:	d12fff1e 	bxle	lr
   344dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   344e0:	e1a06000 	mov	r6, r0
   344e4:	e1a09001 	mov	r9, r1
   344e8:	e1a07002 	mov	r7, r2
   344ec:	e3a04000 	mov	r4, #0
   344f0:	e59f8074 	ldr	r8, [pc, #116]	; 3456c <HwManager::configureHw(char const*, char const*)+0x9c>
   344f4:	e2805004 	add	r5, r0, #4
   344f8:	ea000008 	b	34520 <HwManager::configureHw(char const*, char const*)+0x50>
   344fc:	e1a01009 	mov	r1, r9
   34500:	e5900010 	ldr	r0, [r0, #16]
   34504:	ebffd6ab 	bl	29fb8 <strcasecmp>
   34508:	e3500000 	cmp	r0, #0
   3450c:	0a00000f 	beq	34550 <HwManager::configureHw(char const*, char const*)+0x80>
   34510:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34514:	e2844001 	add	r4, r4, #1
   34518:	e1530004 	cmp	r3, r4
   3451c:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   34520:	e5b50004 	ldr	r0, [r5, #4]!
   34524:	e3500000 	cmp	r0, #0
   34528:	0afffff9 	beq	34514 <HwManager::configureHw(char const*, char const*)+0x44>
   3452c:	e5903000 	ldr	r3, [r0]
   34530:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   34534:	e1530008 	cmp	r3, r8
   34538:	0affffef 	beq	344fc <HwManager::configureHw(char const*, char const*)+0x2c>
   3453c:	e12fff33 	blx	r3
   34540:	e1a01009 	mov	r1, r9
   34544:	ebffd69b 	bl	29fb8 <strcasecmp>
   34548:	e3500000 	cmp	r0, #0
   3454c:	1affffef 	bne	34510 <HwManager::configureHw(char const*, char const*)+0x40>
   34550:	e2844002 	add	r4, r4, #2
   34554:	e7960104 	ldr	r0, [r6, r4, lsl #2]
   34558:	e1a01007 	mov	r1, r7
   3455c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   34560:	e5903000 	ldr	r3, [r0]
   34564:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   34568:	e12fff13 	bx	r3
   3456c:	00034a04 	.word	0x00034a04

00034570 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   34570:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34574:	e24dde49 	sub	sp, sp, #1168	; 0x490
   34578:	e24dd00c 	sub	sp, sp, #12
   3457c:	e1a05000 	mov	r5, r0
   34580:	e3a03032 	mov	r3, #50	; 0x32
   34584:	e59f01d0 	ldr	r0, [pc, #464]	; 3475c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1ec>
   34588:	e28d2014 	add	r2, sp, #20
   3458c:	e1a06001 	mov	r6, r1
   34590:	ebffe6b4 	bl	2e068 <jsonGetValueForKey>
   34594:	e2504000 	subs	r4, r0, #0
   34598:	1a000004 	bne	345b0 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x40>
   3459c:	e3a04000 	mov	r4, #0
   345a0:	e1a00004 	mov	r0, r4
   345a4:	e28dde49 	add	sp, sp, #1168	; 0x490
   345a8:	e28dd00c 	add	sp, sp, #12
   345ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   345b0:	e59f11a8 	ldr	r1, [pc, #424]	; 34760 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1f0>
   345b4:	e28d0014 	add	r0, sp, #20
   345b8:	ebffd67e 	bl	29fb8 <strcasecmp>
   345bc:	e2507000 	subs	r7, r0, #0
   345c0:	1a000024 	bne	34658 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe8>
   345c4:	e3a03064 	mov	r3, #100	; 0x64
   345c8:	e1a01006 	mov	r1, r6
   345cc:	e59f0190 	ldr	r0, [pc, #400]	; 34764 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1f4>
   345d0:	e28d2048 	add	r2, sp, #72	; 0x48
   345d4:	ebffe6a3 	bl	2e068 <jsonGetValueForKey>
   345d8:	e3500000 	cmp	r0, #0
   345dc:	0affffee 	beq	3459c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2c>
   345e0:	e3a03064 	mov	r3, #100	; 0x64
   345e4:	e1a01006 	mov	r1, r6
   345e8:	e59f0178 	ldr	r0, [pc, #376]	; 34768 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1f8>
   345ec:	e28d20b0 	add	r2, sp, #176	; 0xb0
   345f0:	ebffe69c 	bl	2e068 <jsonGetValueForKey>
   345f4:	e2504000 	subs	r4, r0, #0
   345f8:	0affffe7 	beq	3459c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2c>
   345fc:	e1a01007 	mov	r1, r7
   34600:	e3a0200a 	mov	r2, #10
   34604:	e28d00b0 	add	r0, sp, #176	; 0xb0
   34608:	ebffd76b 	bl	2a3bc <strtoul>
   3460c:	e2502000 	subs	r2, r0, #0
   34610:	13a02001 	movne	r2, #1
   34614:	e28d1048 	add	r1, sp, #72	; 0x48
   34618:	e1a00005 	mov	r0, r5
   3461c:	ebffff5d 	bl	34398 <HwManager::enableHw(char const*, bool)>
   34620:	e1a07000 	mov	r7, r0
   34624:	e1a02006 	mov	r2, r6
   34628:	e1a00005 	mov	r0, r5
   3462c:	e28d1048 	add	r1, sp, #72	; 0x48
   34630:	ebffffa6 	bl	344d0 <HwManager::configureHw(char const*, char const*)>
   34634:	e59f1130 	ldr	r1, [pc, #304]	; 3476c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1fc>
   34638:	e3570000 	cmp	r7, #0
   3463c:	e59f312c 	ldr	r3, [pc, #300]	; 34770 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x200>
   34640:	e59f212c 	ldr	r2, [pc, #300]	; 34774 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x204>
   34644:	11a03001 	movne	r3, r1
   34648:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   3464c:	e59d14c4 	ldr	r1, [sp, #1220]	; 0x4c4
   34650:	ebffe643 	bl	2df64 <snprintf>
   34654:	eaffffd1 	b	345a0 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   34658:	e59f1118 	ldr	r1, [pc, #280]	; 34778 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x208>
   3465c:	e28d0014 	add	r0, sp, #20
   34660:	ebffd654 	bl	29fb8 <strcasecmp>
   34664:	e2506000 	subs	r6, r0, #0
   34668:	1affffcb 	bne	3459c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2c>
   3466c:	e59d24c4 	ldr	r2, [sp, #1220]	; 0x4c4
   34670:	e59f1104 	ldr	r1, [pc, #260]	; 3477c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x20c>
   34674:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   34678:	ebffe5cd 	bl	2ddb4 <strlcpy>
   3467c:	e5953030 	ldr	r3, [r5, #48]	; 0x30
   34680:	e3530000 	cmp	r3, #0
   34684:	da00002f 	ble	34748 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1d8>
   34688:	e1a08006 	mov	r8, r6
   3468c:	e59fb0ec 	ldr	fp, [pc, #236]	; 34780 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x210>
   34690:	e59fa0ec 	ldr	sl, [pc, #236]	; 34784 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x214>
   34694:	e59f90ec 	ldr	r9, [pc, #236]	; 34788 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x218>
   34698:	e2857004 	add	r7, r5, #4
   3469c:	ea000008 	b	346c4 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x154>
   346a0:	e1a08004 	mov	r8, r4
   346a4:	e59d24c4 	ldr	r2, [sp, #1220]	; 0x4c4
   346a8:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   346ac:	e28d10b0 	add	r1, sp, #176	; 0xb0
   346b0:	ebffe5db 	bl	2de24 <strlcat>
   346b4:	e5953030 	ldr	r3, [r5, #48]	; 0x30
   346b8:	e2866001 	add	r6, r6, #1
   346bc:	e1530006 	cmp	r3, r6
   346c0:	da000020 	ble	34748 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1d8>
   346c4:	e5b70004 	ldr	r0, [r7, #4]!
   346c8:	e3500000 	cmp	r0, #0
   346cc:	0afffff9 	beq	346b8 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x148>
   346d0:	e5902000 	ldr	r2, [r0]
   346d4:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   346d8:	e153000b 	cmp	r3, fp
   346dc:	1a000014 	bne	34734 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1c4>
   346e0:	e5903010 	ldr	r3, [r0, #16]
   346e4:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   346e8:	e152000a 	cmp	r2, sl
   346ec:	1a00000c 	bne	34724 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1b4>
   346f0:	e5d0000c 	ldrb	r0, [r0, #12]
   346f4:	e58d0000 	str	r0, [sp]
   346f8:	e1a02009 	mov	r2, r9
   346fc:	e3a01ffa 	mov	r1, #1000	; 0x3e8
   34700:	e28d00b0 	add	r0, sp, #176	; 0xb0
   34704:	ebffe616 	bl	2df64 <snprintf>
   34708:	e3580000 	cmp	r8, #0
   3470c:	0affffe3 	beq	346a0 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x130>
   34710:	e59d24c4 	ldr	r2, [sp, #1220]	; 0x4c4
   34714:	e59f1070 	ldr	r1, [pc, #112]	; 3478c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   34718:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   3471c:	ebffe5c0 	bl	2de24 <strlcat>
   34720:	eaffffde 	b	346a0 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x130>
   34724:	e58d300c 	str	r3, [sp, #12]
   34728:	e12fff32 	blx	r2
   3472c:	e59d300c 	ldr	r3, [sp, #12]
   34730:	eaffffef 	b	346f4 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x184>
   34734:	e12fff33 	blx	r3
   34738:	e1a03000 	mov	r3, r0
   3473c:	e5970000 	ldr	r0, [r7]
   34740:	e5902000 	ldr	r2, [r0]
   34744:	eaffffe6 	b	346e4 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x174>
   34748:	e59d24c4 	ldr	r2, [sp, #1220]	; 0x4c4
   3474c:	e59f103c 	ldr	r1, [pc, #60]	; 34790 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x220>
   34750:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   34754:	ebffe5b2 	bl	2de24 <strlcat>
   34758:	eaffff90 	b	345a0 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   3475c:	0003e8f0 	.word	0x0003e8f0
   34760:	00046368 	.word	0x00046368
   34764:	00046374 	.word	0x00046374
   34768:	0004637c 	.word	0x0004637c
   3476c:	00046358 	.word	0x00046358
   34770:	0004635c 	.word	0x0004635c
   34774:	00046384 	.word	0x00046384
   34778:	00046390 	.word	0x00046390
   3477c:	00046398 	.word	0x00046398
   34780:	00034a04 	.word	0x00034a04
   34784:	000349f4 	.word	0x000349f4
   34788:	000463b4 	.word	0x000463b4
   3478c:	00041480 	.word	0x00041480
   34790:	000463b0 	.word	0x000463b0

00034794 <HwManager::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   34794:	e3500000 	cmp	r0, #0
   34798:	012fff1e 	bxeq	lr
   3479c:	eaffff73 	b	34570 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

000347a0 <HwManager::setupFromJson(char const*, char const*)>:
   347a0:	e1a03001 	mov	r3, r1
   347a4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   347a8:	e24ddd61 	sub	sp, sp, #6208	; 0x1840
   347ac:	e24dd014 	sub	sp, sp, #20
   347b0:	e1a01002 	mov	r1, r2
   347b4:	e28d2d13 	add	r2, sp, #1216	; 0x4c0
   347b8:	e1a0a000 	mov	sl, r0
   347bc:	e2822008 	add	r2, r2, #8
   347c0:	e1a00003 	mov	r0, r3
   347c4:	e59f31d4 	ldr	r3, [pc, #468]	; 349a0 <HwManager::setupFromJson(char const*, char const*)+0x200>
   347c8:	ebffe626 	bl	2e068 <jsonGetValueForKey>
   347cc:	e3500000 	cmp	r0, #0
   347d0:	1a000064 	bne	34968 <HwManager::setupFromJson(char const*, char const*)+0x1c8>
   347d4:	e59f31c8 	ldr	r3, [pc, #456]	; 349a4 <HwManager::setupFromJson(char const*, char const*)+0x204>
   347d8:	e5938000 	ldr	r8, [r3]
   347dc:	e1a00008 	mov	r0, r8
   347e0:	ebffe659 	bl	2e14c <jsonGetArrayLen>
   347e4:	e1a06000 	mov	r6, r0
   347e8:	ebffc88d 	bl	26a24 <CLogger::Get()>
   347ec:	e3a02004 	mov	r2, #4
   347f0:	e59f31b0 	ldr	r3, [pc, #432]	; 349a8 <HwManager::setupFromJson(char const*, char const*)+0x208>
   347f4:	e59f11b0 	ldr	r1, [pc, #432]	; 349ac <HwManager::setupFromJson(char const*, char const*)+0x20c>
   347f8:	e58d6000 	str	r6, [sp]
   347fc:	ebffc7ca 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34800:	e3560000 	cmp	r6, #0
   34804:	da000048 	ble	3492c <HwManager::setupFromJson(char const*, char const*)+0x18c>
   34808:	e3a05000 	mov	r5, #0
   3480c:	e59f919c 	ldr	r9, [pc, #412]	; 349b0 <HwManager::setupFromJson(char const*, char const*)+0x210>
   34810:	e59f7194 	ldr	r7, [pc, #404]	; 349ac <HwManager::setupFromJson(char const*, char const*)+0x20c>
   34814:	e59fb198 	ldr	fp, [pc, #408]	; 349b4 <HwManager::setupFromJson(char const*, char const*)+0x214>
   34818:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   3481c:	e1a01008 	mov	r1, r8
   34820:	e28d20e0 	add	r2, sp, #224	; 0xe0
   34824:	e1a00005 	mov	r0, r5
   34828:	ebffe663 	bl	2e1bc <jsonGetArrayElem>
   3482c:	e1a04000 	mov	r4, r0
   34830:	ebffc87b 	bl	26a24 <CLogger::Get()>
   34834:	e28d30e0 	add	r3, sp, #224	; 0xe0
   34838:	e58d3004 	str	r3, [sp, #4]
   3483c:	e3a02004 	mov	r2, #4
   34840:	e1a03009 	mov	r3, r9
   34844:	e1a01007 	mov	r1, r7
   34848:	e58d4000 	str	r4, [sp]
   3484c:	ebffc7b6 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34850:	e3540000 	cmp	r4, #0
   34854:	0a000031 	beq	34920 <HwManager::setupFromJson(char const*, char const*)+0x180>
   34858:	e3a03064 	mov	r3, #100	; 0x64
   3485c:	e1a0000b 	mov	r0, fp
   34860:	e28d2018 	add	r2, sp, #24
   34864:	e28d10e0 	add	r1, sp, #224	; 0xe0
   34868:	ebffe5fe 	bl	2e068 <jsonGetValueForKey>
   3486c:	e2504000 	subs	r4, r0, #0
   34870:	0a00002a 	beq	34920 <HwManager::setupFromJson(char const*, char const*)+0x180>
   34874:	ebffc86a 	bl	26a24 <CLogger::Get()>
   34878:	e28d3018 	add	r3, sp, #24
   3487c:	e3a02004 	mov	r2, #4
   34880:	e1a01007 	mov	r1, r7
   34884:	e58d3004 	str	r3, [sp, #4]
   34888:	e58d5000 	str	r5, [sp]
   3488c:	e59f3124 	ldr	r3, [pc, #292]	; 349b8 <HwManager::setupFromJson(char const*, char const*)+0x218>
   34890:	ebffc7a5 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34894:	e59f1120 	ldr	r1, [pc, #288]	; 349bc <HwManager::setupFromJson(char const*, char const*)+0x21c>
   34898:	e28d007c 	add	r0, sp, #124	; 0x7c
   3489c:	ebffd642 	bl	2a1ac <strcpy>
   348a0:	e3a03064 	mov	r3, #100	; 0x64
   348a4:	e59f0114 	ldr	r0, [pc, #276]	; 349c0 <HwManager::setupFromJson(char const*, char const*)+0x220>
   348a8:	e28d207c 	add	r2, sp, #124	; 0x7c
   348ac:	e28d10e0 	add	r1, sp, #224	; 0xe0
   348b0:	ebffe5ec 	bl	2e068 <jsonGetValueForKey>
   348b4:	e3500000 	cmp	r0, #0
   348b8:	0a000026 	beq	34958 <HwManager::setupFromJson(char const*, char const*)+0x1b8>
   348bc:	e59f1100 	ldr	r1, [pc, #256]	; 349c4 <HwManager::setupFromJson(char const*, char const*)+0x224>
   348c0:	e28d007c 	add	r0, sp, #124	; 0x7c
   348c4:	ebffd5bb 	bl	29fb8 <strcasecmp>
   348c8:	e3500000 	cmp	r0, #0
   348cc:	03a03001 	moveq	r3, #1
   348d0:	1a000018 	bne	34938 <HwManager::setupFromJson(char const*, char const*)+0x198>
   348d4:	e1a02004 	mov	r2, r4
   348d8:	e28d1018 	add	r1, sp, #24
   348dc:	e1a0000a 	mov	r0, sl
   348e0:	e58d3014 	str	r3, [sp, #20]
   348e4:	ebfffeab 	bl	34398 <HwManager::enableHw(char const*, bool)>
   348e8:	ebffc84d 	bl	26a24 <CLogger::Get()>
   348ec:	e59d3014 	ldr	r3, [sp, #20]
   348f0:	e3a02004 	mov	r2, #4
   348f4:	e58d3008 	str	r3, [sp, #8]
   348f8:	e28d3018 	add	r3, sp, #24
   348fc:	e1a01007 	mov	r1, r7
   34900:	e58d3004 	str	r3, [sp, #4]
   34904:	e58d5000 	str	r5, [sp]
   34908:	e59f30b8 	ldr	r3, [pc, #184]	; 349c8 <HwManager::setupFromJson(char const*, char const*)+0x228>
   3490c:	ebffc786 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34910:	e1a0000a 	mov	r0, sl
   34914:	e28d20e0 	add	r2, sp, #224	; 0xe0
   34918:	e28d1018 	add	r1, sp, #24
   3491c:	ebfffeeb 	bl	344d0 <HwManager::configureHw(char const*, char const*)>
   34920:	e2855001 	add	r5, r5, #1
   34924:	e1560005 	cmp	r6, r5
   34928:	1affffba 	bne	34818 <HwManager::setupFromJson(char const*, char const*)+0x78>
   3492c:	e28ddd61 	add	sp, sp, #6208	; 0x1840
   34930:	e28dd014 	add	sp, sp, #20
   34934:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34938:	e3a0200a 	mov	r2, #10
   3493c:	e3a01000 	mov	r1, #0
   34940:	e28d007c 	add	r0, sp, #124	; 0x7c
   34944:	ebffd69c 	bl	2a3bc <strtoul>
   34948:	e2504000 	subs	r4, r0, #0
   3494c:	13a04001 	movne	r4, #1
   34950:	e1a03004 	mov	r3, r4
   34954:	eaffffde 	b	348d4 <HwManager::setupFromJson(char const*, char const*)+0x134>
   34958:	e59f105c 	ldr	r1, [pc, #92]	; 349bc <HwManager::setupFromJson(char const*, char const*)+0x21c>
   3495c:	e28d007c 	add	r0, sp, #124	; 0x7c
   34960:	ebffd611 	bl	2a1ac <strcpy>
   34964:	eaffffd4 	b	348bc <HwManager::setupFromJson(char const*, char const*)+0x11c>
   34968:	e28d0d13 	add	r0, sp, #1216	; 0x4c0
   3496c:	e2800008 	add	r0, r0, #8
   34970:	ebffd569 	bl	29f1c <strlen>
   34974:	e3500000 	cmp	r0, #0
   34978:	0affff95 	beq	347d4 <HwManager::setupFromJson(char const*, char const*)+0x34>
   3497c:	e28d0d13 	add	r0, sp, #1216	; 0x4c0
   34980:	e59f1044 	ldr	r1, [pc, #68]	; 349cc <HwManager::setupFromJson(char const*, char const*)+0x22c>
   34984:	e2800008 	add	r0, r0, #8
   34988:	ebffd58a 	bl	29fb8 <strcasecmp>
   3498c:	e3500000 	cmp	r0, #0
   34990:	0affff8f 	beq	347d4 <HwManager::setupFromJson(char const*, char const*)+0x34>
   34994:	e28d8d13 	add	r8, sp, #1216	; 0x4c0
   34998:	e2888008 	add	r8, r8, #8
   3499c:	eaffff8e 	b	347dc <HwManager::setupFromJson(char const*, char const*)+0x3c>
   349a0:	00001388 	.word	0x00001388
   349a4:	00047c38 	.word	0x00047c38
   349a8:	000463d4 	.word	0x000463d4
   349ac:	000464a0 	.word	0x000464a0
   349b0:	000463ec 	.word	0x000463ec
   349b4:	0004640c 	.word	0x0004640c
   349b8:	00046414 	.word	0x00046414
   349bc:	0003fa38 	.word	0x0003fa38
   349c0:	0004637c 	.word	0x0004637c
   349c4:	00044cc8 	.word	0x00044cc8
   349c8:	00046428 	.word	0x00046428
   349cc:	000463d0 	.word	0x000463d0

000349d0 <HwManager::busAccessAvailable()>:
   349d0:	e92d4010 	push	{r4, lr}
   349d4:	e1a04000 	mov	r4, r0
   349d8:	e5900004 	ldr	r0, [r0, #4]
   349dc:	ebfff9a7 	bl	33080 <BusAccess::waitIsHeld()>
   349e0:	e3500000 	cmp	r0, #0
   349e4:	05d4003c 	ldrbeq	r0, [r4, #60]	; 0x3c
   349e8:	02200001 	eoreq	r0, r0, #1
   349ec:	13a00000 	movne	r0, #0
   349f0:	e8bd8010 	pop	{r4, pc}

000349f4 <HwBase::isEnabled()>:
   349f4:	e5d0000c 	ldrb	r0, [r0, #12]
   349f8:	e12fff1e 	bx	lr

000349fc <HwBase::enable(bool)>:
   349fc:	e5c0100c 	strb	r1, [r0, #12]
   34a00:	e12fff1e 	bx	lr

00034a04 <HwBase::name()>:
   34a04:	e5900010 	ldr	r0, [r0, #16]
   34a08:	e12fff1e 	bx	lr

00034a0c <BusControlAPI::handleWaitInterruptStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   34a0c:	e12fff1e 	bx	lr

00034a10 <BusControlAPI::BusControlAPI(CommandHandler&, HwManager&, BusAccess&)>:
   34a10:	e92d4010 	push	{r4, lr}
   34a14:	e3a0e000 	mov	lr, #0
   34a18:	e3e04000 	mvn	r4, #0
   34a1c:	e8800006 	stm	r0, {r1, r2}
   34a20:	e59f1034 	ldr	r1, [pc, #52]	; 34a5c <BusControlAPI::BusControlAPI(CommandHandler&, HwManager&, BusAccess&)+0x4c>
   34a24:	e5803008 	str	r3, [r0, #8]
   34a28:	e2802e41 	add	r2, r0, #1040	; 0x410
   34a2c:	e2803e4f 	add	r3, r0, #1264	; 0x4f0
   34a30:	e580400c 	str	r4, [r0, #12]
   34a34:	e5804010 	str	r4, [r0, #16]
   34a38:	e5810000 	str	r0, [r1]
   34a3c:	e1c2e0b4 	strh	lr, [r2, #4]
   34a40:	e580e418 	str	lr, [r0, #1048]	; 0x418
   34a44:	e580e41c 	str	lr, [r0, #1052]	; 0x41c
   34a48:	e5c0e420 	strb	lr, [r0, #1056]	; 0x420
   34a4c:	e580e424 	str	lr, [r0, #1060]	; 0x424
   34a50:	e1c3e0b0 	strh	lr, [r3]
   34a54:	e5c0e4f2 	strb	lr, [r0, #1266]	; 0x4f2
   34a58:	e8bd8010 	pop	{r4, pc}
   34a5c:	0004dde4 	.word	0x0004dde4

00034a60 <BusControlAPI::init()>:
   34a60:	e92d4010 	push	{r4, lr}
   34a64:	e590300c 	ldr	r3, [r0, #12]
   34a68:	e1a04000 	mov	r4, r0
   34a6c:	e3530000 	cmp	r3, #0
   34a70:	e24dd030 	sub	sp, sp, #48	; 0x30
   34a74:	ba000004 	blt	34a8c <BusControlAPI::init()+0x2c>
   34a78:	e5943010 	ldr	r3, [r4, #16]
   34a7c:	e3530000 	cmp	r3, #0
   34a80:	ba000018 	blt	34ae8 <BusControlAPI::init()+0x88>
   34a84:	e28dd030 	add	sp, sp, #48	; 0x30
   34a88:	e8bd8010 	pop	{r4, pc}
   34a8c:	e3a03000 	mov	r3, #0
   34a90:	e3a02004 	mov	r2, #4
   34a94:	e58d3028 	str	r3, [sp, #40]	; 0x28
   34a98:	e58d3020 	str	r3, [sp, #32]
   34a9c:	e58d301c 	str	r3, [sp, #28]
   34aa0:	e58d3018 	str	r3, [sp, #24]
   34aa4:	e58d3014 	str	r3, [sp, #20]
   34aa8:	e58d3010 	str	r3, [sp, #16]
   34aac:	e58d300c 	str	r3, [sp, #12]
   34ab0:	e58d3008 	str	r3, [sp, #8]
   34ab4:	e58d3004 	str	r3, [sp, #4]
   34ab8:	e58d3000 	str	r3, [sp]
   34abc:	e58d2024 	str	r2, [sp, #36]	; 0x24
   34ac0:	e58d002c 	str	r0, [sp, #44]	; 0x2c
   34ac4:	e59f3048 	ldr	r3, [pc, #72]	; 34b14 <BusControlAPI::init()+0xb4>
   34ac8:	e3a01001 	mov	r1, #1
   34acc:	e59f2044 	ldr	r2, [pc, #68]	; 34b18 <BusControlAPI::init()+0xb8>
   34ad0:	e5900008 	ldr	r0, [r0, #8]
   34ad4:	ebfff492 	bl	31d24 <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>
   34ad8:	e5943010 	ldr	r3, [r4, #16]
   34adc:	e584000c 	str	r0, [r4, #12]
   34ae0:	e3530000 	cmp	r3, #0
   34ae4:	aaffffe6 	bge	34a84 <BusControlAPI::init()+0x24>
   34ae8:	e3a02000 	mov	r2, #0
   34aec:	e58d2004 	str	r2, [sp, #4]
   34af0:	e58d2000 	str	r2, [sp]
   34af4:	e1a01004 	mov	r1, r4
   34af8:	e3a02001 	mov	r2, #1
   34afc:	e59f3018 	ldr	r3, [pc, #24]	; 34b1c <BusControlAPI::init()+0xbc>
   34b00:	e5940000 	ldr	r0, [r4]
   34b04:	ebffeb74 	bl	2f8dc <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   34b08:	e5840010 	str	r0, [r4, #16]
   34b0c:	e28dd030 	add	sp, sp, #48	; 0x30
   34b10:	e8bd8010 	pop	{r4, pc}
   34b14:	0003534c 	.word	0x0003534c
   34b18:	00034a0c 	.word	0x00034a0c
   34b1c:	0003619c 	.word	0x0003619c

00034b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>:
   34b20:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34b24:	e24ddf4f 	sub	sp, sp, #316	; 0x13c
   34b28:	e1a07003 	mov	r7, r3
   34b2c:	e1a08001 	mov	r8, r1
   34b30:	e1a06002 	mov	r6, r2
   34b34:	e1a01003 	mov	r1, r3
   34b38:	e59f01b0 	ldr	r0, [pc, #432]	; 34cf0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1d0>
   34b3c:	e3a030c8 	mov	r3, #200	; 0xc8
   34b40:	e28d206c 	add	r2, sp, #108	; 0x6c
   34b44:	e5dd916c 	ldrb	r9, [sp, #364]	; 0x16c
   34b48:	ebffe546 	bl	2e068 <jsonGetValueForKey>
   34b4c:	e2505000 	subs	r5, r0, #0
   34b50:	0a00000f 	beq	34b94 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x74>
   34b54:	e3760001 	cmn	r6, #1
   34b58:	e28d406c 	add	r4, sp, #108	; 0x6c
   34b5c:	ba000045 	blt	34c78 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x158>
   34b60:	e3a0a000 	mov	sl, #0
   34b64:	e59fb188 	ldr	fp, [pc, #392]	; 34cf4 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1d4>
   34b68:	ea000004 	b	34b80 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x60>
   34b6c:	e156000a 	cmp	r6, sl
   34b70:	e2804001 	add	r4, r0, #1
   34b74:	e28a3001 	add	r3, sl, #1
   34b78:	ba00003e 	blt	34c78 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x158>
   34b7c:	e1a0a003 	mov	sl, r3
   34b80:	e1a00004 	mov	r0, r4
   34b84:	e1a0100b 	mov	r1, fp
   34b88:	ebffd5bb 	bl	2a27c <strstr>
   34b8c:	e3500000 	cmp	r0, #0
   34b90:	1afffff5 	bne	34b6c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x4c>
   34b94:	e3a02032 	mov	r2, #50	; 0x32
   34b98:	e1a01008 	mov	r1, r8
   34b9c:	e28d0038 	add	r0, sp, #56	; 0x38
   34ba0:	ebffe483 	bl	2ddb4 <strlcpy>
   34ba4:	e3a02032 	mov	r2, #50	; 0x32
   34ba8:	e59f1148 	ldr	r1, [pc, #328]	; 34cf8 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1d8>
   34bac:	e28d0038 	add	r0, sp, #56	; 0x38
   34bb0:	ebffe49b 	bl	2de24 <strlcat>
   34bb4:	e1a00008 	mov	r0, r8
   34bb8:	e3a03032 	mov	r3, #50	; 0x32
   34bbc:	e1a01007 	mov	r1, r7
   34bc0:	e28d2004 	add	r2, sp, #4
   34bc4:	ebffe527 	bl	2e068 <jsonGetValueForKey>
   34bc8:	e2505000 	subs	r5, r0, #0
   34bcc:	0a000012 	beq	34c1c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xfc>
   34bd0:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   34bd4:	e3530000 	cmp	r3, #0
   34bd8:	0a000003 	beq	34bec <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xcc>
   34bdc:	e1a00003 	mov	r0, r3
   34be0:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   34be4:	e28d1004 	add	r1, sp, #4
   34be8:	ebffe471 	bl	2ddb4 <strlcpy>
   34bec:	e3590000 	cmp	r9, #0
   34bf0:	0a000035 	beq	34ccc <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1ac>
   34bf4:	e28d0004 	add	r0, sp, #4
   34bf8:	e3a0200a 	mov	r2, #10
   34bfc:	e3a01000 	mov	r1, #0
   34c00:	ebffd5ed 	bl	2a3bc <strtoul>
   34c04:	e1a05009 	mov	r5, r9
   34c08:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   34c0c:	e5830000 	str	r0, [r3]
   34c10:	e1a00005 	mov	r0, r5
   34c14:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   34c18:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34c1c:	e1a01007 	mov	r1, r7
   34c20:	e3a03032 	mov	r3, #50	; 0x32
   34c24:	e28d0038 	add	r0, sp, #56	; 0x38
   34c28:	e28d2004 	add	r2, sp, #4
   34c2c:	ebffe50d 	bl	2e068 <jsonGetValueForKey>
   34c30:	e2505000 	subs	r5, r0, #0
   34c34:	0afffff5 	beq	34c10 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xf0>
   34c38:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   34c3c:	e3530000 	cmp	r3, #0
   34c40:	0a000003 	beq	34c54 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x134>
   34c44:	e1a00003 	mov	r0, r3
   34c48:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   34c4c:	e28d1004 	add	r1, sp, #4
   34c50:	ebffe457 	bl	2ddb4 <strlcpy>
   34c54:	e3a0200a 	mov	r2, #10
   34c58:	e3a01000 	mov	r1, #0
   34c5c:	e28d0004 	add	r0, sp, #4
   34c60:	ebffd5d5 	bl	2a3bc <strtoul>
   34c64:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   34c68:	e5830000 	str	r0, [r3]
   34c6c:	e1a00005 	mov	r0, r5
   34c70:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   34c74:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34c78:	e1a00004 	mov	r0, r4
   34c7c:	ebffd4a6 	bl	29f1c <strlen>
   34c80:	e3500000 	cmp	r0, #0
   34c84:	0affffc2 	beq	34b94 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x74>
   34c88:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   34c8c:	e3530000 	cmp	r3, #0
   34c90:	0a000003 	beq	34ca4 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x184>
   34c94:	e1a00003 	mov	r0, r3
   34c98:	e1a01004 	mov	r1, r4
   34c9c:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   34ca0:	ebffe443 	bl	2ddb4 <strlcpy>
   34ca4:	e3590000 	cmp	r9, #0
   34ca8:	11a00004 	movne	r0, r4
   34cac:	1affffd1 	bne	34bf8 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xd8>
   34cb0:	e1a01009 	mov	r1, r9
   34cb4:	e1a00004 	mov	r0, r4
   34cb8:	e3a02010 	mov	r2, #16
   34cbc:	ebffd5be 	bl	2a3bc <strtoul>
   34cc0:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   34cc4:	e5830000 	str	r0, [r3]
   34cc8:	eaffffd0 	b	34c10 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xf0>
   34ccc:	e1a01009 	mov	r1, r9
   34cd0:	e3a02010 	mov	r2, #16
   34cd4:	e28d0004 	add	r0, sp, #4
   34cd8:	ebffd5b7 	bl	2a3bc <strtoul>
   34cdc:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   34ce0:	e5830000 	str	r0, [r3]
   34ce4:	e1a00005 	mov	r0, r5
   34ce8:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   34cec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34cf0:	000464ac 	.word	0x000464ac
   34cf4:	000469cc 	.word	0x000469cc
   34cf8:	00045138 	.word	0x00045138

00034cfc <BusControlAPI::busLineHandler(char const*)>:
   34cfc:	e92d4070 	push	{r4, r5, r6, lr}
   34d00:	e1a04001 	mov	r4, r1
   34d04:	e3a01032 	mov	r1, #50	; 0x32
   34d08:	e3a06000 	mov	r6, #0
   34d0c:	e24dd050 	sub	sp, sp, #80	; 0x50
   34d10:	e28d2014 	add	r2, sp, #20
   34d14:	e58d1008 	str	r1, [sp, #8]
   34d18:	e28d101c 	add	r1, sp, #28
   34d1c:	e58d1004 	str	r1, [sp, #4]
   34d20:	e58d2000 	str	r2, [sp]
   34d24:	e1a03004 	mov	r3, r4
   34d28:	e3a02001 	mov	r2, #1
   34d2c:	e59f12a8 	ldr	r1, [pc, #680]	; 34fdc <BusControlAPI::busLineHandler(char const*)+0x2e0>
   34d30:	e58d600c 	str	r6, [sp, #12]
   34d34:	e1a05000 	mov	r5, r0
   34d38:	ebffff78 	bl	34b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   34d3c:	e1500006 	cmp	r0, r6
   34d40:	1a000003 	bne	34d54 <BusControlAPI::busLineHandler(char const*)+0x58>
   34d44:	e3a04000 	mov	r4, #0
   34d48:	e1a00004 	mov	r0, r4
   34d4c:	e28dd050 	add	sp, sp, #80	; 0x50
   34d50:	e8bd8070 	pop	{r4, r5, r6, pc}
   34d54:	e59f1284 	ldr	r1, [pc, #644]	; 34fe0 <BusControlAPI::busLineHandler(char const*)+0x2e4>
   34d58:	e28d001c 	add	r0, sp, #28
   34d5c:	ebffd546 	bl	2a27c <strstr>
   34d60:	e3a0c000 	mov	ip, #0
   34d64:	e2503000 	subs	r3, r0, #0
   34d68:	e28d2018 	add	r2, sp, #24
   34d6c:	15c36000 	strbne	r6, [r3]
   34d70:	e1a00005 	mov	r0, r5
   34d74:	e1a03004 	mov	r3, r4
   34d78:	e88d1004 	stm	sp, {r2, ip}
   34d7c:	e59f1260 	ldr	r1, [pc, #608]	; 34fe4 <BusControlAPI::busLineHandler(char const*)+0x2e8>
   34d80:	e3a02002 	mov	r2, #2
   34d84:	e58dc00c 	str	ip, [sp, #12]
   34d88:	e58dc008 	str	ip, [sp, #8]
   34d8c:	e58dc018 	str	ip, [sp, #24]
   34d90:	ebffff62 	bl	34b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   34d94:	e2504000 	subs	r4, r0, #0
   34d98:	0affffe9 	beq	34d44 <BusControlAPI::busLineHandler(char const*)+0x48>
   34d9c:	e5955008 	ldr	r5, [r5, #8]
   34da0:	ebffc71f 	bl	26a24 <CLogger::Get()>
   34da4:	e59d3018 	ldr	r3, [sp, #24]
   34da8:	e28d201c 	add	r2, sp, #28
   34dac:	e1cd20f0 	strd	r2, [sp]
   34db0:	e59f1230 	ldr	r1, [pc, #560]	; 34fe8 <BusControlAPI::busLineHandler(char const*)+0x2ec>
   34db4:	e3a02004 	mov	r2, #4
   34db8:	e59f322c 	ldr	r3, [pc, #556]	; 34fec <BusControlAPI::busLineHandler(char const*)+0x2f0>
   34dbc:	ebffc65a 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34dc0:	e59f1228 	ldr	r1, [pc, #552]	; 34ff0 <BusControlAPI::busLineHandler(char const*)+0x2f4>
   34dc4:	e28d001c 	add	r0, sp, #28
   34dc8:	ebffd47a 	bl	29fb8 <strcasecmp>
   34dcc:	e3500000 	cmp	r0, #0
   34dd0:	0a00000b 	beq	34e04 <BusControlAPI::busLineHandler(char const*)+0x108>
   34dd4:	e59f1218 	ldr	r1, [pc, #536]	; 34ff4 <BusControlAPI::busLineHandler(char const*)+0x2f8>
   34dd8:	e28d001c 	add	r0, sp, #28
   34ddc:	ebffd475 	bl	29fb8 <strcasecmp>
   34de0:	e3500000 	cmp	r0, #0
   34de4:	1a00000f 	bne	34e28 <BusControlAPI::busLineHandler(char const*)+0x12c>
   34de8:	e59d2018 	ldr	r2, [sp, #24]
   34dec:	e1a00005 	mov	r0, r5
   34df0:	e2522000 	subs	r2, r2, #0
   34df4:	13a02001 	movne	r2, #1
   34df8:	e3a01012 	mov	r1, #18
   34dfc:	eb0024ae 	bl	3e0bc <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   34e00:	eaffffd0 	b	34d48 <BusControlAPI::busLineHandler(char const*)+0x4c>
   34e04:	e59d2018 	ldr	r2, [sp, #24]
   34e08:	e1a00005 	mov	r0, r5
   34e0c:	e2522000 	subs	r2, r2, #0
   34e10:	13a02001 	movne	r2, #1
   34e14:	e3a01011 	mov	r1, #17
   34e18:	eb0024a7 	bl	3e0bc <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   34e1c:	e1a00004 	mov	r0, r4
   34e20:	e28dd050 	add	sp, sp, #80	; 0x50
   34e24:	e8bd8070 	pop	{r4, r5, r6, pc}
   34e28:	e59f11c8 	ldr	r1, [pc, #456]	; 34ff8 <BusControlAPI::busLineHandler(char const*)+0x2fc>
   34e2c:	e28d001c 	add	r0, sp, #28
   34e30:	ebffd460 	bl	29fb8 <strcasecmp>
   34e34:	e2501000 	subs	r1, r0, #0
   34e38:	0a000015 	beq	34e94 <BusControlAPI::busLineHandler(char const*)+0x198>
   34e3c:	e59f11b8 	ldr	r1, [pc, #440]	; 34ffc <BusControlAPI::busLineHandler(char const*)+0x300>
   34e40:	e28d001c 	add	r0, sp, #28
   34e44:	ebffd45b 	bl	29fb8 <strcasecmp>
   34e48:	e3500000 	cmp	r0, #0
   34e4c:	0a000016 	beq	34eac <BusControlAPI::busLineHandler(char const*)+0x1b0>
   34e50:	e59f11a8 	ldr	r1, [pc, #424]	; 35000 <BusControlAPI::busLineHandler(char const*)+0x304>
   34e54:	e28d001c 	add	r0, sp, #28
   34e58:	ebffd456 	bl	29fb8 <strcasecmp>
   34e5c:	e3500000 	cmp	r0, #0
   34e60:	0a000011 	beq	34eac <BusControlAPI::busLineHandler(char const*)+0x1b0>
   34e64:	e59f1198 	ldr	r1, [pc, #408]	; 35004 <BusControlAPI::busLineHandler(char const*)+0x308>
   34e68:	e28d001c 	add	r0, sp, #28
   34e6c:	ebffd451 	bl	29fb8 <strcasecmp>
   34e70:	e3500000 	cmp	r0, #0
   34e74:	1a000013 	bne	34ec8 <BusControlAPI::busLineHandler(char const*)+0x1cc>
   34e78:	e59d2018 	ldr	r2, [sp, #24]
   34e7c:	e1a00005 	mov	r0, r5
   34e80:	e2522000 	subs	r2, r2, #0
   34e84:	13a02001 	movne	r2, #1
   34e88:	e3a01006 	mov	r1, #6
   34e8c:	eb00248a 	bl	3e0bc <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   34e90:	eaffffac 	b	34d48 <BusControlAPI::busLineHandler(char const*)+0x4c>
   34e94:	e59d2018 	ldr	r2, [sp, #24]
   34e98:	e1a00005 	mov	r0, r5
   34e9c:	e2522000 	subs	r2, r2, #0
   34ea0:	13a02001 	movne	r2, #1
   34ea4:	eb002484 	bl	3e0bc <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   34ea8:	eaffffa6 	b	34d48 <BusControlAPI::busLineHandler(char const*)+0x4c>
   34eac:	e59d2018 	ldr	r2, [sp, #24]
   34eb0:	e1a00005 	mov	r0, r5
   34eb4:	e2522000 	subs	r2, r2, #0
   34eb8:	13a02001 	movne	r2, #1
   34ebc:	e3a01001 	mov	r1, #1
   34ec0:	eb00247d 	bl	3e0bc <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   34ec4:	eaffff9f 	b	34d48 <BusControlAPI::busLineHandler(char const*)+0x4c>
   34ec8:	e59f1138 	ldr	r1, [pc, #312]	; 35008 <BusControlAPI::busLineHandler(char const*)+0x30c>
   34ecc:	e28d001c 	add	r0, sp, #28
   34ed0:	ebffd438 	bl	29fb8 <strcasecmp>
   34ed4:	e3500000 	cmp	r0, #0
   34ed8:	1a000006 	bne	34ef8 <BusControlAPI::busLineHandler(char const*)+0x1fc>
   34edc:	e59d2018 	ldr	r2, [sp, #24]
   34ee0:	e1a00005 	mov	r0, r5
   34ee4:	e2522000 	subs	r2, r2, #0
   34ee8:	13a02001 	movne	r2, #1
   34eec:	e3a0100c 	mov	r1, #12
   34ef0:	eb002471 	bl	3e0bc <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   34ef4:	eaffff93 	b	34d48 <BusControlAPI::busLineHandler(char const*)+0x4c>
   34ef8:	e59f110c 	ldr	r1, [pc, #268]	; 3500c <BusControlAPI::busLineHandler(char const*)+0x310>
   34efc:	e28d001c 	add	r0, sp, #28
   34f00:	ebffd42c 	bl	29fb8 <strcasecmp>
   34f04:	e3500000 	cmp	r0, #0
   34f08:	1a000006 	bne	34f28 <BusControlAPI::busLineHandler(char const*)+0x22c>
   34f0c:	e59d2018 	ldr	r2, [sp, #24]
   34f10:	e1a00005 	mov	r0, r5
   34f14:	e2522000 	subs	r2, r2, #0
   34f18:	13a02001 	movne	r2, #1
   34f1c:	e3a0100d 	mov	r1, #13
   34f20:	eb002465 	bl	3e0bc <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   34f24:	eaffff87 	b	34d48 <BusControlAPI::busLineHandler(char const*)+0x4c>
   34f28:	e59f10e0 	ldr	r1, [pc, #224]	; 35010 <BusControlAPI::busLineHandler(char const*)+0x314>
   34f2c:	e28d001c 	add	r0, sp, #28
   34f30:	ebffd420 	bl	29fb8 <strcasecmp>
   34f34:	e3500000 	cmp	r0, #0
   34f38:	1a000006 	bne	34f58 <BusControlAPI::busLineHandler(char const*)+0x25c>
   34f3c:	e59d2018 	ldr	r2, [sp, #24]
   34f40:	e1a00005 	mov	r0, r5
   34f44:	e2522000 	subs	r2, r2, #0
   34f48:	13a02001 	movne	r2, #1
   34f4c:	e3a01007 	mov	r1, #7
   34f50:	eb002459 	bl	3e0bc <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   34f54:	eaffff7b 	b	34d48 <BusControlAPI::busLineHandler(char const*)+0x4c>
   34f58:	e59f10b4 	ldr	r1, [pc, #180]	; 35014 <BusControlAPI::busLineHandler(char const*)+0x318>
   34f5c:	e28d001c 	add	r0, sp, #28
   34f60:	ebffd414 	bl	29fb8 <strcasecmp>
   34f64:	e3500000 	cmp	r0, #0
   34f68:	1a000009 	bne	34f94 <BusControlAPI::busLineHandler(char const*)+0x298>
   34f6c:	e5953000 	ldr	r3, [r5]
   34f70:	e3530011 	cmp	r3, #17
   34f74:	1affff73 	bne	34d48 <BusControlAPI::busLineHandler(char const*)+0x4c>
   34f78:	e59d2018 	ldr	r2, [sp, #24]
   34f7c:	e1a00005 	mov	r0, r5
   34f80:	e2522000 	subs	r2, r2, #0
   34f84:	13a02001 	movne	r2, #1
   34f88:	e3a01003 	mov	r1, #3
   34f8c:	eb00244a 	bl	3e0bc <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   34f90:	eaffff6c 	b	34d48 <BusControlAPI::busLineHandler(char const*)+0x4c>
   34f94:	e59f107c 	ldr	r1, [pc, #124]	; 35018 <BusControlAPI::busLineHandler(char const*)+0x31c>
   34f98:	e28d001c 	add	r0, sp, #28
   34f9c:	ebffd405 	bl	29fb8 <strcasecmp>
   34fa0:	e3500000 	cmp	r0, #0
   34fa4:	1a000006 	bne	34fc4 <BusControlAPI::busLineHandler(char const*)+0x2c8>
   34fa8:	e59d2018 	ldr	r2, [sp, #24]
   34fac:	e1a00005 	mov	r0, r5
   34fb0:	e2522000 	subs	r2, r2, #0
   34fb4:	13a02001 	movne	r2, #1
   34fb8:	e3a01004 	mov	r1, #4
   34fbc:	eb00243e 	bl	3e0bc <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   34fc0:	eaffff60 	b	34d48 <BusControlAPI::busLineHandler(char const*)+0x4c>
   34fc4:	e59f1050 	ldr	r1, [pc, #80]	; 3501c <BusControlAPI::busLineHandler(char const*)+0x320>
   34fc8:	e28d001c 	add	r0, sp, #28
   34fcc:	ebffd3f9 	bl	29fb8 <strcasecmp>
   34fd0:	e3500000 	cmp	r0, #0
   34fd4:	1affff5b 	bne	34d48 <BusControlAPI::busLineHandler(char const*)+0x4c>
   34fd8:	eaffffe6 	b	34f78 <BusControlAPI::busLineHandler(char const*)+0x27c>
   34fdc:	000464b4 	.word	0x000464b4
   34fe0:	000469cc 	.word	0x000469cc
   34fe4:	000464bc 	.word	0x000464bc
   34fe8:	0004692c 	.word	0x0004692c
   34fec:	000464c4 	.word	0x000464c4
   34ff0:	000464d8 	.word	0x000464d8
   34ff4:	000464dc 	.word	0x000464dc
   34ff8:	000464e0 	.word	0x000464e0
   34ffc:	000464e8 	.word	0x000464e8
   35000:	000464f0 	.word	0x000464f0
   35004:	000464f8 	.word	0x000464f8
   35008:	00046504 	.word	0x00046504
   3500c:	00046514 	.word	0x00046514
   35010:	00046524 	.word	0x00046524
   35014:	00046530 	.word	0x00046530
   35018:	0004653c 	.word	0x0004653c
   3501c:	00046544 	.word	0x00046544

00035020 <BusControlAPI::muxLineHandler(char const*)>:
   35020:	e92d4070 	push	{r4, r5, r6, lr}
   35024:	e3a0c032 	mov	ip, #50	; 0x32
   35028:	e3a06000 	mov	r6, #0
   3502c:	e24dd048 	sub	sp, sp, #72	; 0x48
   35030:	e1a03001 	mov	r3, r1
   35034:	e28d2010 	add	r2, sp, #16
   35038:	e28d1014 	add	r1, sp, #20
   3503c:	e58d1004 	str	r1, [sp, #4]
   35040:	e58d2000 	str	r2, [sp]
   35044:	e59f1184 	ldr	r1, [pc, #388]	; 351d0 <BusControlAPI::muxLineHandler(char const*)+0x1b0>
   35048:	e3a02001 	mov	r2, #1
   3504c:	e58d600c 	str	r6, [sp, #12]
   35050:	e58dc008 	str	ip, [sp, #8]
   35054:	e1a04000 	mov	r4, r0
   35058:	ebfffeb0 	bl	34b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   3505c:	e2505000 	subs	r5, r0, #0
   35060:	1a000002 	bne	35070 <BusControlAPI::muxLineHandler(char const*)+0x50>
   35064:	e1a00005 	mov	r0, r5
   35068:	e28dd048 	add	sp, sp, #72	; 0x48
   3506c:	e8bd8070 	pop	{r4, r5, r6, pc}
   35070:	e59f115c 	ldr	r1, [pc, #348]	; 351d4 <BusControlAPI::muxLineHandler(char const*)+0x1b4>
   35074:	e28d0014 	add	r0, sp, #20
   35078:	ebffd47f 	bl	2a27c <strstr>
   3507c:	e3500000 	cmp	r0, #0
   35080:	15c06000 	strbne	r6, [r0]
   35084:	ebffc666 	bl	26a24 <CLogger::Get()>
   35088:	e28d3014 	add	r3, sp, #20
   3508c:	e3a02004 	mov	r2, #4
   35090:	e59f1140 	ldr	r1, [pc, #320]	; 351d8 <BusControlAPI::muxLineHandler(char const*)+0x1b8>
   35094:	e58d3000 	str	r3, [sp]
   35098:	e59f313c 	ldr	r3, [pc, #316]	; 351dc <BusControlAPI::muxLineHandler(char const*)+0x1bc>
   3509c:	ebffc5a2 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   350a0:	e59f1138 	ldr	r1, [pc, #312]	; 351e0 <BusControlAPI::muxLineHandler(char const*)+0x1c0>
   350a4:	e28d0014 	add	r0, sp, #20
   350a8:	e5944008 	ldr	r4, [r4, #8]
   350ac:	ebffd3c1 	bl	29fb8 <strcasecmp>
   350b0:	e2501000 	subs	r1, r0, #0
   350b4:	1a000004 	bne	350cc <BusControlAPI::muxLineHandler(char const*)+0xac>
   350b8:	e1a00004 	mov	r0, r4
   350bc:	eb00241e 	bl	3e13c <BusAccess::rawBusControlMuxSet(unsigned long)>
   350c0:	e1a00005 	mov	r0, r5
   350c4:	e28dd048 	add	sp, sp, #72	; 0x48
   350c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   350cc:	e59f1110 	ldr	r1, [pc, #272]	; 351e4 <BusControlAPI::muxLineHandler(char const*)+0x1c4>
   350d0:	e28d0014 	add	r0, sp, #20
   350d4:	ebffd3b7 	bl	29fb8 <strcasecmp>
   350d8:	e3500000 	cmp	r0, #0
   350dc:	0a000008 	beq	35104 <BusControlAPI::muxLineHandler(char const*)+0xe4>
   350e0:	e59f1100 	ldr	r1, [pc, #256]	; 351e8 <BusControlAPI::muxLineHandler(char const*)+0x1c8>
   350e4:	e28d0014 	add	r0, sp, #20
   350e8:	ebffd3b2 	bl	29fb8 <strcasecmp>
   350ec:	e3500000 	cmp	r0, #0
   350f0:	1a000009 	bne	3511c <BusControlAPI::muxLineHandler(char const*)+0xfc>
   350f4:	e1a00004 	mov	r0, r4
   350f8:	e3a01001 	mov	r1, #1
   350fc:	eb00240e 	bl	3e13c <BusAccess::rawBusControlMuxSet(unsigned long)>
   35100:	eaffffd7 	b	35064 <BusControlAPI::muxLineHandler(char const*)+0x44>
   35104:	e1a00004 	mov	r0, r4
   35108:	e3a01004 	mov	r1, #4
   3510c:	eb00240a 	bl	3e13c <BusAccess::rawBusControlMuxSet(unsigned long)>
   35110:	e1a00005 	mov	r0, r5
   35114:	e28dd048 	add	sp, sp, #72	; 0x48
   35118:	e8bd8070 	pop	{r4, r5, r6, pc}
   3511c:	e59f10c8 	ldr	r1, [pc, #200]	; 351ec <BusControlAPI::muxLineHandler(char const*)+0x1cc>
   35120:	e28d0014 	add	r0, sp, #20
   35124:	ebffd3a3 	bl	29fb8 <strcasecmp>
   35128:	e3500000 	cmp	r0, #0
   3512c:	0a000008 	beq	35154 <BusControlAPI::muxLineHandler(char const*)+0x134>
   35130:	e59f10b8 	ldr	r1, [pc, #184]	; 351f0 <BusControlAPI::muxLineHandler(char const*)+0x1d0>
   35134:	e28d0014 	add	r0, sp, #20
   35138:	ebffd39e 	bl	29fb8 <strcasecmp>
   3513c:	e3500000 	cmp	r0, #0
   35140:	1a000007 	bne	35164 <BusControlAPI::muxLineHandler(char const*)+0x144>
   35144:	e1a00004 	mov	r0, r4
   35148:	e3a01002 	mov	r1, #2
   3514c:	eb0023fa 	bl	3e13c <BusAccess::rawBusControlMuxSet(unsigned long)>
   35150:	eaffffc3 	b	35064 <BusControlAPI::muxLineHandler(char const*)+0x44>
   35154:	e1a00004 	mov	r0, r4
   35158:	e3a01005 	mov	r1, #5
   3515c:	eb0023f6 	bl	3e13c <BusAccess::rawBusControlMuxSet(unsigned long)>
   35160:	eaffffbf 	b	35064 <BusControlAPI::muxLineHandler(char const*)+0x44>
   35164:	e59f1088 	ldr	r1, [pc, #136]	; 351f4 <BusControlAPI::muxLineHandler(char const*)+0x1d4>
   35168:	e28d0014 	add	r0, sp, #20
   3516c:	ebffd391 	bl	29fb8 <strcasecmp>
   35170:	e3500000 	cmp	r0, #0
   35174:	1a000003 	bne	35188 <BusControlAPI::muxLineHandler(char const*)+0x168>
   35178:	e1a00004 	mov	r0, r4
   3517c:	e3a01006 	mov	r1, #6
   35180:	eb0023ed 	bl	3e13c <BusAccess::rawBusControlMuxSet(unsigned long)>
   35184:	eaffffb6 	b	35064 <BusControlAPI::muxLineHandler(char const*)+0x44>
   35188:	e59f1068 	ldr	r1, [pc, #104]	; 351f8 <BusControlAPI::muxLineHandler(char const*)+0x1d8>
   3518c:	e28d0014 	add	r0, sp, #20
   35190:	ebffd388 	bl	29fb8 <strcasecmp>
   35194:	e3500000 	cmp	r0, #0
   35198:	1a000003 	bne	351ac <BusControlAPI::muxLineHandler(char const*)+0x18c>
   3519c:	e1a00004 	mov	r0, r4
   351a0:	e3a01003 	mov	r1, #3
   351a4:	eb0023e4 	bl	3e13c <BusAccess::rawBusControlMuxSet(unsigned long)>
   351a8:	eaffffad 	b	35064 <BusControlAPI::muxLineHandler(char const*)+0x44>
   351ac:	e59f1048 	ldr	r1, [pc, #72]	; 351fc <BusControlAPI::muxLineHandler(char const*)+0x1dc>
   351b0:	e28d0014 	add	r0, sp, #20
   351b4:	ebffd37f 	bl	29fb8 <strcasecmp>
   351b8:	e3500000 	cmp	r0, #0
   351bc:	1affffa8 	bne	35064 <BusControlAPI::muxLineHandler(char const*)+0x44>
   351c0:	e1a00004 	mov	r0, r4
   351c4:	e3a01007 	mov	r1, #7
   351c8:	eb0023db 	bl	3e13c <BusAccess::rawBusControlMuxSet(unsigned long)>
   351cc:	eaffffa4 	b	35064 <BusControlAPI::muxLineHandler(char const*)+0x44>
   351d0:	000464b4 	.word	0x000464b4
   351d4:	000469cc 	.word	0x000469cc
   351d8:	0004692c 	.word	0x0004692c
   351dc:	00046548 	.word	0x00046548
   351e0:	00046554 	.word	0x00046554
   351e4:	00046560 	.word	0x00046560
   351e8:	00046570 	.word	0x00046570
   351ec:	0003edbc 	.word	0x0003edbc
   351f0:	0004657c 	.word	0x0004657c
   351f4:	00046580 	.word	0x00046580
   351f8:	00046584 	.word	0x00046584
   351fc:	00046594 	.word	0x00046594

00035200 <BusControlAPI::busLinesRead(char*, int)>:
   35200:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   35204:	e5905008 	ldr	r5, [r0, #8]
   35208:	e24dd020 	sub	sp, sp, #32
   3520c:	e1a00005 	mov	r0, r5
   35210:	e1a07002 	mov	r7, r2
   35214:	e1a06001 	mov	r6, r1
   35218:	eb002394 	bl	3e070 <BusAccess::rawBusControlReadRaw()>
   3521c:	e5953000 	ldr	r3, [r5]
   35220:	e1a04000 	mov	r4, r0
   35224:	e3530011 	cmp	r3, #17
   35228:	11a081a0 	lsrne	r8, r0, #3
   3522c:	01a08a20 	lsreq	r8, r0, #20
   35230:	e1a00005 	mov	r0, r5
   35234:	eb00238d 	bl	3e070 <BusAccess::rawBusControlReadRaw()>
   35238:	e1a03000 	mov	r3, r0
   3523c:	e1a00005 	mov	r0, r5
   35240:	e58d301c 	str	r3, [sp, #28]
   35244:	eb002389 	bl	3e070 <BusAccess::rawBusControlReadRaw()>
   35248:	e3140001 	tst	r4, #1
   3524c:	13a0504d 	movne	r5, #77	; 0x4d
   35250:	03a0502e 	moveq	r5, #46	; 0x2e
   35254:	e3140002 	tst	r4, #2
   35258:	13a0e049 	movne	lr, #73	; 0x49
   3525c:	03a0e02e 	moveq	lr, #46	; 0x2e
   35260:	e3140701 	tst	r4, #262144	; 0x40000
   35264:	e2088001 	and	r8, r8, #1
   35268:	13a02052 	movne	r2, #82	; 0x52
   3526c:	03a0202e 	moveq	r2, #46	; 0x2e
   35270:	e3140802 	tst	r4, #131072	; 0x20000
   35274:	13a04057 	movne	r4, #87	; 0x57
   35278:	03a0402e 	moveq	r4, #46	; 0x2e
   3527c:	e3580000 	cmp	r8, #0
   35280:	13a08031 	movne	r8, #49	; 0x31
   35284:	03a0802e 	moveq	r8, #46	; 0x2e
   35288:	e1a0ca20 	lsr	ip, r0, #20
   3528c:	e6efc07c 	uxtb	ip, ip
   35290:	e58d200c 	str	r2, [sp, #12]
   35294:	e1a01007 	mov	r1, r7
   35298:	e1a00006 	mov	r0, r6
   3529c:	e98d4020 	stmib	sp, {r5, lr}
   352a0:	e59d301c 	ldr	r3, [sp, #28]
   352a4:	e59f2014 	ldr	r2, [pc, #20]	; 352c0 <BusControlAPI::busLinesRead(char*, int)+0xc0>
   352a8:	e58dc000 	str	ip, [sp]
   352ac:	e58d4010 	str	r4, [sp, #16]
   352b0:	e58d8014 	str	r8, [sp, #20]
   352b4:	ebffe32a 	bl	2df64 <snprintf>
   352b8:	e28dd020 	add	sp, sp, #32
   352bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   352c0:	000465a4 	.word	0x000465a4

000352c4 <BusControlAPI::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   352c4:	e3510004 	cmp	r1, #4
   352c8:	112fff1e 	bxne	lr
   352cc:	e92d4010 	push	{r4, lr}
   352d0:	e5d03414 	ldrb	r3, [r0, #1044]	; 0x414
   352d4:	e1a04000 	mov	r4, r0
   352d8:	e3530000 	cmp	r3, #0
   352dc:	e24dd010 	sub	sp, sp, #16
   352e0:	0a00000d 	beq	3531c <BusControlAPI::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x58>
   352e4:	e5d03415 	ldrb	r3, [r0, #1045]	; 0x415
   352e8:	e5900004 	ldr	r0, [r0, #4]
   352ec:	e3530000 	cmp	r3, #0
   352f0:	1a00000b 	bne	35324 <BusControlAPI::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x60>
   352f4:	e5d42420 	ldrb	r2, [r4, #1056]	; 0x420
   352f8:	e58d3008 	str	r3, [sp, #8]
   352fc:	e58d2004 	str	r2, [sp, #4]
   35300:	e58d3000 	str	r3, [sp]
   35304:	e5943418 	ldr	r3, [r4, #1048]	; 0x418
   35308:	e594141c 	ldr	r1, [r4, #1052]	; 0x41c
   3530c:	e2842014 	add	r2, r4, #20
   35310:	ebfffaf9 	bl	33efc <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   35314:	e3a03000 	mov	r3, #0
   35318:	e5c43414 	strb	r3, [r4, #1044]	; 0x414
   3531c:	e28dd010 	add	sp, sp, #16
   35320:	e8bd8010 	pop	{r4, pc}
   35324:	e3a03000 	mov	r3, #0
   35328:	e5d42420 	ldrb	r2, [r4, #1056]	; 0x420
   3532c:	e58d3008 	str	r3, [sp, #8]
   35330:	e58d2004 	str	r2, [sp, #4]
   35334:	e58d3000 	str	r3, [sp]
   35338:	e5943418 	ldr	r3, [r4, #1048]	; 0x418
   3533c:	e594141c 	ldr	r1, [r4, #1052]	; 0x41c
   35340:	e2842014 	add	r2, r4, #20
   35344:	ebfffaa1 	bl	33dd0 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>
   35348:	eafffff1 	b	35314 <BusControlAPI::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x50>

0003534c <BusControlAPI::busActionCompleteStatic(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   3534c:	e3500000 	cmp	r0, #0
   35350:	012fff1e 	bxeq	lr
   35354:	eaffffda 	b	352c4 <BusControlAPI::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>

00035358 <BusControlAPI::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   35358:	e12fff1e 	bx	lr

0003535c <BusControlAPI::service()>:
   3535c:	e12fff1e 	bx	lr

00035360 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)>:
   35360:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   35364:	e1a09003 	mov	r9, r3
   35368:	e3a03001 	mov	r3, #1
   3536c:	e3590b01 	cmp	r9, #1024	; 0x400
   35370:	e1a0a002 	mov	sl, r2
   35374:	83a02b01 	movhi	r2, #1024	; 0x400
   35378:	e5dd8024 	ldrb	r8, [sp, #36]	; 0x24
   3537c:	e5c03414 	strb	r3, [r0, #1044]	; 0x414
   35380:	e5dd3020 	ldrb	r3, [sp, #32]
   35384:	95809418 	strls	r9, [r0, #1048]	; 0x418
   35388:	85802418 	strhi	r2, [r0, #1048]	; 0x418
   3538c:	e3580000 	cmp	r8, #0
   35390:	e1a04000 	mov	r4, r0
   35394:	e5c08415 	strb	r8, [r0, #1045]	; 0x415
   35398:	e580141c 	str	r1, [r0, #1052]	; 0x41c
   3539c:	e5c03420 	strb	r3, [r0, #1056]	; 0x420
   353a0:	1a00001d 	bne	3541c <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xbc>
   353a4:	e5947008 	ldr	r7, [r4, #8]
   353a8:	e3a02004 	mov	r2, #4
   353ac:	e1a00007 	mov	r0, r7
   353b0:	e594100c 	ldr	r1, [r4, #12]
   353b4:	ebffefe4 	bl	3134c <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
   353b8:	ebffe243 	bl	2dccc <micros>
   353bc:	e59f6084 	ldr	r6, [pc, #132]	; 35448 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xe8>
   353c0:	e1a05000 	mov	r5, r0
   353c4:	ea000003 	b	353d8 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0x78>
   353c8:	e3530000 	cmp	r3, #0
   353cc:	0a00000a 	beq	353fc <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0x9c>
   353d0:	e1a00007 	mov	r0, r7
   353d4:	ebfff205 	bl	31bf0 <BusAccess::service()>
   353d8:	ebffe23b 	bl	2dccc <micros>
   353dc:	e1a02006 	mov	r2, r6
   353e0:	e1a01005 	mov	r1, r5
   353e4:	ebffe256 	bl	2dd44 <isTimeout>
   353e8:	e3500000 	cmp	r0, #0
   353ec:	e5d43414 	ldrb	r3, [r4, #1044]	; 0x414
   353f0:	0afffff4 	beq	353c8 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0x68>
   353f4:	e3530000 	cmp	r3, #0
   353f8:	1a000003 	bne	3540c <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xac>
   353fc:	e3580000 	cmp	r8, #0
   35400:	0a00000a 	beq	35430 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xd0>
   35404:	e3a00000 	mov	r0, #0
   35408:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3540c:	e3a03000 	mov	r3, #0
   35410:	e3a00002 	mov	r0, #2
   35414:	e5c43414 	strb	r3, [r4, #1044]	; 0x414
   35418:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3541c:	e1a02009 	mov	r2, r9
   35420:	e1a0100a 	mov	r1, sl
   35424:	e2800014 	add	r0, r0, #20
   35428:	ebffd4b6 	bl	2a708 <memcpy>
   3542c:	eaffffdc 	b	353a4 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0x44>
   35430:	e1a02009 	mov	r2, r9
   35434:	e1a0000a 	mov	r0, sl
   35438:	e2841014 	add	r1, r4, #20
   3543c:	ebffd4b1 	bl	2a708 <memcpy>
   35440:	e1a00008 	mov	r0, r8
   35444:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35448:	0000c350 	.word	0x0000c350

0003544c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   3544c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35450:	e24ddecb 	sub	sp, sp, #3248	; 0xcb0
   35454:	e24dd00c 	sub	sp, sp, #12
   35458:	e1a06000 	mov	r6, r0
   3545c:	e1a09002 	mov	r9, r2
   35460:	e1a08003 	mov	r8, r3
   35464:	e59f0c30 	ldr	r0, [pc, #3120]	; 3609c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc50>
   35468:	e3a03032 	mov	r3, #50	; 0x32
   3546c:	e28d2020 	add	r2, sp, #32
   35470:	e1a07001 	mov	r7, r1
   35474:	ebffe2fb 	bl	2e068 <jsonGetValueForKey>
   35478:	e2505000 	subs	r5, r0, #0
   3547c:	1a000004 	bne	35494 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x48>
   35480:	e3a05000 	mov	r5, #0
   35484:	e1a00005 	mov	r0, r5
   35488:	e28ddecb 	add	sp, sp, #3248	; 0xcb0
   3548c:	e28dd00c 	add	sp, sp, #12
   35490:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35494:	e59f1c04 	ldr	r1, [pc, #3076]	; 360a0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc54>
   35498:	e28d0020 	add	r0, sp, #32
   3549c:	e596a008 	ldr	sl, [r6, #8]
   354a0:	ebffd2c4 	bl	29fb8 <strcasecmp>
   354a4:	e2504000 	subs	r4, r0, #0
   354a8:	1a00005a 	bne	35618 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1cc>
   354ac:	e28d3014 	add	r3, sp, #20
   354b0:	e88d0018 	stm	sp, {r3, r4}
   354b4:	e3a02001 	mov	r2, #1
   354b8:	e1a03007 	mov	r3, r7
   354bc:	e1a00006 	mov	r0, r6
   354c0:	e59f1bdc 	ldr	r1, [pc, #3036]	; 360a4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc58>
   354c4:	e58d400c 	str	r4, [sp, #12]
   354c8:	e58d4008 	str	r4, [sp, #8]
   354cc:	e58d4014 	str	r4, [sp, #20]
   354d0:	e58d4018 	str	r4, [sp, #24]
   354d4:	ebfffd91 	bl	34b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   354d8:	e3500000 	cmp	r0, #0
   354dc:	0a000079 	beq	356c8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x27c>
   354e0:	e28d3018 	add	r3, sp, #24
   354e4:	e58d3000 	str	r3, [sp]
   354e8:	e3a02002 	mov	r2, #2
   354ec:	e1a03007 	mov	r3, r7
   354f0:	e1a00006 	mov	r0, r6
   354f4:	e59f1bac 	ldr	r1, [pc, #2988]	; 360a8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc5c>
   354f8:	e58d400c 	str	r4, [sp, #12]
   354fc:	e58d4008 	str	r4, [sp, #8]
   35500:	e58d4004 	str	r4, [sp, #4]
   35504:	ebfffd85 	bl	34b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35508:	e3500000 	cmp	r0, #0
   3550c:	0a00006d 	beq	356c8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x27c>
   35510:	e28d301c 	add	r3, sp, #28
   35514:	e58d3000 	str	r3, [sp]
   35518:	e3a02003 	mov	r2, #3
   3551c:	e1a03007 	mov	r3, r7
   35520:	e1a00006 	mov	r0, r6
   35524:	e59f1b80 	ldr	r1, [pc, #2944]	; 360ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc60>
   35528:	e58d400c 	str	r4, [sp, #12]
   3552c:	e58d4008 	str	r4, [sp, #8]
   35530:	e58d4004 	str	r4, [sp, #4]
   35534:	e58d401c 	str	r4, [sp, #28]
   35538:	ebfffd78 	bl	34b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   3553c:	e3500000 	cmp	r0, #0
   35540:	0a000060 	beq	356c8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x27c>
   35544:	e59d3018 	ldr	r3, [sp, #24]
   35548:	e2432001 	sub	r2, r3, #1
   3554c:	e3520b01 	cmp	r2, #1024	; 0x400
   35550:	2a0000b0 	bcs	35818 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x3cc>
   35554:	e28d7054 	add	r7, sp, #84	; 0x54
   35558:	e1a00006 	mov	r0, r6
   3555c:	e1a02007 	mov	r2, r7
   35560:	e59d1014 	ldr	r1, [sp, #20]
   35564:	e58d4004 	str	r4, [sp, #4]
   35568:	e58d4000 	str	r4, [sp]
   3556c:	ebffff7b 	bl	35360 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)>
   35570:	e3500000 	cmp	r0, #0
   35574:	1a0000c1 	bne	35880 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x434>
   35578:	e59d3014 	ldr	r3, [sp, #20]
   3557c:	e28d8e45 	add	r8, sp, #1104	; 0x450
   35580:	e2888004 	add	r8, r8, #4
   35584:	e59f2b24 	ldr	r2, [pc, #2852]	; 360b0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc64>
   35588:	e59f1b24 	ldr	r1, [pc, #2852]	; 360b4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc68>
   3558c:	e58d0004 	str	r0, [sp, #4]
   35590:	e58d3000 	str	r3, [sp]
   35594:	e1a00008 	mov	r0, r8
   35598:	e59d3018 	ldr	r3, [sp, #24]
   3559c:	ebffe270 	bl	2df64 <snprintf>
   355a0:	e1a00008 	mov	r0, r8
   355a4:	ebffd25c 	bl	29f1c <strlen>
   355a8:	e59d3018 	ldr	r3, [sp, #24]
   355ac:	e3530000 	cmp	r3, #0
   355b0:	0a00000f 	beq	355f4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1a8>
   355b4:	e59fbafc 	ldr	fp, [pc, #2812]	; 360b8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc6c>
   355b8:	e59faaf4 	ldr	sl, [pc, #2804]	; 360b4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc68>
   355bc:	e28d6053 	add	r6, sp, #83	; 0x53
   355c0:	e0889000 	add	r9, r8, r0
   355c4:	e1a04006 	mov	r4, r6
   355c8:	e1a00009 	mov	r0, r9
   355cc:	e5f63001 	ldrb	r3, [r6, #1]!
   355d0:	e1a0200b 	mov	r2, fp
   355d4:	e1a0100a 	mov	r1, sl
   355d8:	ebffe261 	bl	2df64 <snprintf>
   355dc:	e2844002 	add	r4, r4, #2
   355e0:	e59d3018 	ldr	r3, [sp, #24]
   355e4:	e0444007 	sub	r4, r4, r7
   355e8:	e1530004 	cmp	r3, r4
   355ec:	e2899002 	add	r9, r9, #2
   355f0:	8afffff3 	bhi	355c4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x178>
   355f4:	e1a00008 	mov	r0, r8
   355f8:	e59f2ab4 	ldr	r2, [pc, #2740]	; 360b4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc68>
   355fc:	e59f1ab8 	ldr	r1, [pc, #2744]	; 360bc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc70>
   35600:	ebffe207 	bl	2de24 <strlcat>
   35604:	e1a01008 	mov	r1, r8
   35608:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   3560c:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   35610:	ebffe1e7 	bl	2ddb4 <strlcpy>
   35614:	eaffff9a 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35618:	e59f1aa0 	ldr	r1, [pc, #2720]	; 360c0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc74>
   3561c:	e28d0020 	add	r0, sp, #32
   35620:	ebffd264 	bl	29fb8 <strcasecmp>
   35624:	e2504000 	subs	r4, r0, #0
   35628:	1a00002e 	bne	356e8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x29c>
   3562c:	e28d301c 	add	r3, sp, #28
   35630:	e58d3000 	str	r3, [sp]
   35634:	e3a02001 	mov	r2, #1
   35638:	e1a03007 	mov	r3, r7
   3563c:	e1a00006 	mov	r0, r6
   35640:	e59f1a5c 	ldr	r1, [pc, #2652]	; 360a4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc58>
   35644:	e58d400c 	str	r4, [sp, #12]
   35648:	e58d4008 	str	r4, [sp, #8]
   3564c:	e58d4004 	str	r4, [sp, #4]
   35650:	e58d401c 	str	r4, [sp, #28]
   35654:	e58d4054 	str	r4, [sp, #84]	; 0x54
   35658:	e58d4454 	str	r4, [sp, #1108]	; 0x454
   3565c:	ebfffd2f 	bl	34b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35660:	e3500000 	cmp	r0, #0
   35664:	0a000017 	beq	356c8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x27c>
   35668:	e28d3054 	add	r3, sp, #84	; 0x54
   3566c:	e88d0018 	stm	sp, {r3, r4}
   35670:	e3a02002 	mov	r2, #2
   35674:	e1a03007 	mov	r3, r7
   35678:	e1a00006 	mov	r0, r6
   3567c:	e59f1a24 	ldr	r1, [pc, #2596]	; 360a8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc5c>
   35680:	e58d400c 	str	r4, [sp, #12]
   35684:	e58d4008 	str	r4, [sp, #8]
   35688:	ebfffd24 	bl	34b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   3568c:	e3500000 	cmp	r0, #0
   35690:	0a00000c 	beq	356c8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x27c>
   35694:	e28d2e45 	add	r2, sp, #1104	; 0x450
   35698:	e2822004 	add	r2, r2, #4
   3569c:	e58d2000 	str	r2, [sp]
   356a0:	e1a03007 	mov	r3, r7
   356a4:	e3a02003 	mov	r2, #3
   356a8:	e1a00006 	mov	r0, r6
   356ac:	e59f19f8 	ldr	r1, [pc, #2552]	; 360ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc60>
   356b0:	e58d400c 	str	r4, [sp, #12]
   356b4:	e58d4008 	str	r4, [sp, #8]
   356b8:	e58d4004 	str	r4, [sp, #4]
   356bc:	ebfffd17 	bl	34b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   356c0:	e3500000 	cmp	r0, #0
   356c4:	1a000058 	bne	3582c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x3e0>
   356c8:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   356cc:	e59f19f0 	ldr	r1, [pc, #2544]	; 360c4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc78>
   356d0:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   356d4:	ebffe1b6 	bl	2ddb4 <strlcpy>
   356d8:	e1a00005 	mov	r0, r5
   356dc:	e28ddecb 	add	sp, sp, #3248	; 0xcb0
   356e0:	e28dd00c 	add	sp, sp, #12
   356e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   356e8:	e59f19d8 	ldr	r1, [pc, #2520]	; 360c8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc7c>
   356ec:	e28d0020 	add	r0, sp, #32
   356f0:	ebffd230 	bl	29fb8 <strcasecmp>
   356f4:	e3500000 	cmp	r0, #0
   356f8:	0a0000c6 	beq	35a18 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x5cc>
   356fc:	e59f19c8 	ldr	r1, [pc, #2504]	; 360cc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc80>
   35700:	e28d0020 	add	r0, sp, #32
   35704:	ebffd22b 	bl	29fb8 <strcasecmp>
   35708:	e3500000 	cmp	r0, #0
   3570c:	01a0000a 	moveq	r0, sl
   35710:	03a01001 	moveq	r1, #1
   35714:	0a00005f 	beq	35898 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x44c>
   35718:	e59f19b0 	ldr	r1, [pc, #2480]	; 360d0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc84>
   3571c:	e28d0020 	add	r0, sp, #32
   35720:	ebffd224 	bl	29fb8 <strcasecmp>
   35724:	e2501000 	subs	r1, r0, #0
   35728:	0a000059 	beq	35894 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x448>
   3572c:	e59f19a0 	ldr	r1, [pc, #2464]	; 360d4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc88>
   35730:	e28d0020 	add	r0, sp, #32
   35734:	ebffd21f 	bl	29fb8 <strcasecmp>
   35738:	e3500000 	cmp	r0, #0
   3573c:	0a0000ba 	beq	35a2c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x5e0>
   35740:	e59f1990 	ldr	r1, [pc, #2448]	; 360d8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc8c>
   35744:	e28d0020 	add	r0, sp, #32
   35748:	ebffd21a 	bl	29fb8 <strcasecmp>
   3574c:	e3500000 	cmp	r0, #0
   35750:	0a0000c4 	beq	35a68 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x61c>
   35754:	e59f1980 	ldr	r1, [pc, #2432]	; 360dc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc90>
   35758:	e28d0020 	add	r0, sp, #32
   3575c:	ebffd215 	bl	29fb8 <strcasecmp>
   35760:	e3500000 	cmp	r0, #0
   35764:	01a0000a 	moveq	r0, sl
   35768:	03a01001 	moveq	r1, #1
   3576c:	0a0000b7 	beq	35a50 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x604>
   35770:	e59f1968 	ldr	r1, [pc, #2408]	; 360e0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc94>
   35774:	e28d0020 	add	r0, sp, #32
   35778:	ebffd20e 	bl	29fb8 <strcasecmp>
   3577c:	e3500000 	cmp	r0, #0
   35780:	0a0000b0 	beq	35a48 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x5fc>
   35784:	e59f1958 	ldr	r1, [pc, #2392]	; 360e4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc98>
   35788:	e28d0020 	add	r0, sp, #32
   3578c:	ebffd209 	bl	29fb8 <strcasecmp>
   35790:	e3500000 	cmp	r0, #0
   35794:	0a0000ba 	beq	35a84 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x638>
   35798:	e59f1948 	ldr	r1, [pc, #2376]	; 360e8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc9c>
   3579c:	e28d0020 	add	r0, sp, #32
   357a0:	ebffd204 	bl	29fb8 <strcasecmp>
   357a4:	e3500000 	cmp	r0, #0
   357a8:	0a0000e3 	beq	35b3c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x6f0>
   357ac:	e59f1938 	ldr	r1, [pc, #2360]	; 360ec <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xca0>
   357b0:	e28d0020 	add	r0, sp, #32
   357b4:	ebffd1ff 	bl	29fb8 <strcasecmp>
   357b8:	e250c000 	subs	ip, r0, #0
   357bc:	1a0000b7 	bne	35aa0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x654>
   357c0:	e28d2e45 	add	r2, sp, #1104	; 0x450
   357c4:	e2822004 	add	r2, r2, #4
   357c8:	e58d2000 	str	r2, [sp]
   357cc:	e1a03007 	mov	r3, r7
   357d0:	e3a02001 	mov	r2, #1
   357d4:	e1a00006 	mov	r0, r6
   357d8:	e59f18c4 	ldr	r1, [pc, #2244]	; 360a4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc58>
   357dc:	e58dc00c 	str	ip, [sp, #12]
   357e0:	e58dc008 	str	ip, [sp, #8]
   357e4:	e58dc004 	str	ip, [sp, #4]
   357e8:	e58dc454 	str	ip, [sp, #1108]	; 0x454
   357ec:	ebfffccb 	bl	34b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   357f0:	e3500000 	cmp	r0, #0
   357f4:	0affffb3 	beq	356c8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x27c>
   357f8:	e1a0000a 	mov	r0, sl
   357fc:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   35800:	eb0021f7 	bl	3dfe4 <BusAccess::rawBusControlSetAddress(unsigned long)>
   35804:	e1a00006 	mov	r0, r6
   35808:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   3580c:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   35810:	ebfffe7a 	bl	35200 <BusControlAPI::busLinesRead(char*, int)>
   35814:	eaffff1a 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35818:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   3581c:	e59f18cc 	ldr	r1, [pc, #2252]	; 360f0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xca4>
   35820:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   35824:	ebffe162 	bl	2ddb4 <strlcpy>
   35828:	eaffff15 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   3582c:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
   35830:	e2432001 	sub	r2, r3, #1
   35834:	e1530008 	cmp	r3, r8
   35838:	93520b01 	cmpls	r2, #1024	; 0x400
   3583c:	2afffff5 	bcs	35818 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x3cc>
   35840:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   35844:	e3a0c001 	mov	ip, #1
   35848:	e2511000 	subs	r1, r1, #0
   3584c:	13a01001 	movne	r1, #1
   35850:	e1a02009 	mov	r2, r9
   35854:	e88d1002 	stm	sp, {r1, ip}
   35858:	e1a00006 	mov	r0, r6
   3585c:	e59d101c 	ldr	r1, [sp, #28]
   35860:	ebfffebe 	bl	35360 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)>
   35864:	e3500000 	cmp	r0, #0
   35868:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   3586c:	0a00006a 	beq	35a1c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x5d0>
   35870:	e59f187c 	ldr	r1, [pc, #2172]	; 360f4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xca8>
   35874:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   35878:	ebffe14d 	bl	2ddb4 <strlcpy>
   3587c:	eaffff00 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35880:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35884:	e59f1868 	ldr	r1, [pc, #2152]	; 360f4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xca8>
   35888:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   3588c:	ebffe148 	bl	2ddb4 <strlcpy>
   35890:	eafffefb 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35894:	e1a0000a 	mov	r0, sl
   35898:	eb0021aa 	bl	3df48 <BusAccess::rawBusControlEnable(bool)>
   3589c:	e1a00006 	mov	r0, r6
   358a0:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   358a4:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   358a8:	ebfffe54 	bl	35200 <BusControlAPI::busLinesRead(char*, int)>
   358ac:	eafffef4 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   358b0:	e59f1840 	ldr	r1, [pc, #2112]	; 360f8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcac>
   358b4:	e28d0020 	add	r0, sp, #32
   358b8:	ebffd1be 	bl	29fb8 <strcasecmp>
   358bc:	e3500000 	cmp	r0, #0
   358c0:	01a0000a 	moveq	r0, sl
   358c4:	03a02001 	moveq	r2, #1
   358c8:	0596100c 	ldreq	r1, [r6, #12]
   358cc:	0a000187 	beq	35ef0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xaa4>
   358d0:	e59f1824 	ldr	r1, [pc, #2084]	; 360fc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcb0>
   358d4:	e28d0020 	add	r0, sp, #32
   358d8:	ebffd1b6 	bl	29fb8 <strcasecmp>
   358dc:	e2502000 	subs	r2, r0, #0
   358e0:	0a000180 	beq	35ee8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa9c>
   358e4:	e59f1814 	ldr	r1, [pc, #2068]	; 36100 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcb4>
   358e8:	e28d0020 	add	r0, sp, #32
   358ec:	ebffd1b1 	bl	29fb8 <strcasecmp>
   358f0:	e3500000 	cmp	r0, #0
   358f4:	0a000174 	beq	35ecc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa80>
   358f8:	e59f1804 	ldr	r1, [pc, #2052]	; 36104 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcb8>
   358fc:	e28d0020 	add	r0, sp, #32
   35900:	ebffd1ac 	bl	29fb8 <strcasecmp>
   35904:	e3500000 	cmp	r0, #0
   35908:	01a0000a 	moveq	r0, sl
   3590c:	03a02001 	moveq	r2, #1
   35910:	0596100c 	ldreq	r1, [r6, #12]
   35914:	0a000166 	beq	35eb4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa68>
   35918:	e59f17e8 	ldr	r1, [pc, #2024]	; 36108 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcbc>
   3591c:	e28d0020 	add	r0, sp, #32
   35920:	ebffd1a4 	bl	29fb8 <strcasecmp>
   35924:	e2502000 	subs	r2, r0, #0
   35928:	0a00015f 	beq	35eac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa60>
   3592c:	e59f17d8 	ldr	r1, [pc, #2008]	; 3610c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc0>
   35930:	e28d0020 	add	r0, sp, #32
   35934:	ebffd19f 	bl	29fb8 <strcasecmp>
   35938:	e3500000 	cmp	r0, #0
   3593c:	01a0000a 	moveq	r0, sl
   35940:	03a02001 	moveq	r2, #1
   35944:	0596100c 	ldreq	r1, [r6, #12]
   35948:	0a000151 	beq	35e94 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa48>
   3594c:	e59f17bc 	ldr	r1, [pc, #1980]	; 36110 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc4>
   35950:	e28d0020 	add	r0, sp, #32
   35954:	ebffd197 	bl	29fb8 <strcasecmp>
   35958:	e2502000 	subs	r2, r0, #0
   3595c:	0a00014a 	beq	35e8c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa40>
   35960:	e59f17ac 	ldr	r1, [pc, #1964]	; 36114 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc8>
   35964:	e28d0020 	add	r0, sp, #32
   35968:	ebffd192 	bl	29fb8 <strcasecmp>
   3596c:	e3500000 	cmp	r0, #0
   35970:	0afffec3 	beq	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35974:	e59f179c 	ldr	r1, [pc, #1948]	; 36118 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xccc>
   35978:	e28d0020 	add	r0, sp, #32
   3597c:	ebffd18d 	bl	29fb8 <strcasecmp>
   35980:	e3500000 	cmp	r0, #0
   35984:	0afffebe 	beq	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35988:	e59f178c 	ldr	r1, [pc, #1932]	; 3611c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcd0>
   3598c:	e28d0020 	add	r0, sp, #32
   35990:	ebffd188 	bl	29fb8 <strcasecmp>
   35994:	e3500000 	cmp	r0, #0
   35998:	0afffeb9 	beq	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   3599c:	e59f177c 	ldr	r1, [pc, #1916]	; 36120 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcd4>
   359a0:	e28d0020 	add	r0, sp, #32
   359a4:	ebffd183 	bl	29fb8 <strcasecmp>
   359a8:	e3500000 	cmp	r0, #0
   359ac:	0afffeb4 	beq	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   359b0:	e59f176c 	ldr	r1, [pc, #1900]	; 36124 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcd8>
   359b4:	e28d0020 	add	r0, sp, #32
   359b8:	ebffd17e 	bl	29fb8 <strcasecmp>
   359bc:	e3500000 	cmp	r0, #0
   359c0:	0afffeaf 	beq	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   359c4:	e59f175c 	ldr	r1, [pc, #1884]	; 36128 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcdc>
   359c8:	e28d0020 	add	r0, sp, #32
   359cc:	ebffd179 	bl	29fb8 <strcasecmp>
   359d0:	e2504000 	subs	r4, r0, #0
   359d4:	1afffea9 	bne	35480 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   359d8:	e28d2e45 	add	r2, sp, #1104	; 0x450
   359dc:	e1a01007 	mov	r1, r7
   359e0:	e3a03032 	mov	r3, #50	; 0x32
   359e4:	e59f0740 	ldr	r0, [pc, #1856]	; 3612c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce0>
   359e8:	e2822004 	add	r2, r2, #4
   359ec:	ebffe19d 	bl	2e068 <jsonGetValueForKey>
   359f0:	e2505000 	subs	r5, r0, #0
   359f4:	0afffea2 	beq	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   359f8:	e28d0e45 	add	r0, sp, #1104	; 0x450
   359fc:	e1a01004 	mov	r1, r4
   35a00:	e3a0200a 	mov	r2, #10
   35a04:	e2800004 	add	r0, r0, #4
   35a08:	ebffd26b 	bl	2a3bc <strtoul>
   35a0c:	e1a01000 	mov	r1, r0
   35a10:	e1a0000a 	mov	r0, sl
   35a14:	ebfff597 	bl	33078 <BusAccess::waitSetCycleUs(unsigned long)>
   35a18:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35a1c:	e59f170c 	ldr	r1, [pc, #1804]	; 36130 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   35a20:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   35a24:	ebffe0e2 	bl	2ddb4 <strlcpy>
   35a28:	eafffe95 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35a2c:	e1a0000a 	mov	r0, sl
   35a30:	eb00214b 	bl	3df64 <BusAccess::rawBusControlClearWait()>
   35a34:	e1a00006 	mov	r0, r6
   35a38:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35a3c:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   35a40:	ebfffdee 	bl	35200 <BusControlAPI::busLinesRead(char*, int)>
   35a44:	eafffe8e 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35a48:	e1a0000a 	mov	r0, sl
   35a4c:	e3a01000 	mov	r1, #0
   35a50:	eb00214b 	bl	3df84 <BusAccess::rawBusControlClockEnable(bool)>
   35a54:	e1a00006 	mov	r0, r6
   35a58:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35a5c:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   35a60:	ebfffde6 	bl	35200 <BusControlAPI::busLinesRead(char*, int)>
   35a64:	eafffe86 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35a68:	e1a0000a 	mov	r0, sl
   35a6c:	eb002143 	bl	3df80 <BusAccess::rawBusControlWaitDisable()>
   35a70:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35a74:	e59f16b4 	ldr	r1, [pc, #1716]	; 36130 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   35a78:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   35a7c:	ebffe0cc 	bl	2ddb4 <strlcpy>
   35a80:	eafffe7f 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35a84:	e1a0000a 	mov	r0, sl
   35a88:	eb00214f 	bl	3dfcc <BusAccess::rawBusControlTakeBus()>
   35a8c:	e1a00006 	mov	r0, r6
   35a90:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35a94:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   35a98:	ebfffdd8 	bl	35200 <BusControlAPI::busLinesRead(char*, int)>
   35a9c:	eafffe78 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35aa0:	e59f168c 	ldr	r1, [pc, #1676]	; 36134 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce8>
   35aa4:	e28d0020 	add	r0, sp, #32
   35aa8:	ebffd142 	bl	29fb8 <strcasecmp>
   35aac:	e3500000 	cmp	r0, #0
   35ab0:	0a000043 	beq	35bc4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x778>
   35ab4:	e59f167c 	ldr	r1, [pc, #1660]	; 36138 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcec>
   35ab8:	e28d0020 	add	r0, sp, #32
   35abc:	ebffd13d 	bl	29fb8 <strcasecmp>
   35ac0:	e250c000 	subs	ip, r0, #0
   35ac4:	1a000023 	bne	35b58 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x70c>
   35ac8:	e28d2e45 	add	r2, sp, #1104	; 0x450
   35acc:	e2822004 	add	r2, r2, #4
   35ad0:	e58d2000 	str	r2, [sp]
   35ad4:	e1a03007 	mov	r3, r7
   35ad8:	e3a02001 	mov	r2, #1
   35adc:	e1a00006 	mov	r0, r6
   35ae0:	e59f1654 	ldr	r1, [pc, #1620]	; 3613c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcf0>
   35ae4:	e58dc00c 	str	ip, [sp, #12]
   35ae8:	e58dc008 	str	ip, [sp, #8]
   35aec:	e58dc004 	str	ip, [sp, #4]
   35af0:	e58dc454 	str	ip, [sp, #1108]	; 0x454
   35af4:	ebfffc09 	bl	34b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35af8:	e3500000 	cmp	r0, #0
   35afc:	0afffef1 	beq	356c8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x27c>
   35b00:	ebffc3c7 	bl	26a24 <CLogger::Get()>
   35b04:	e59d2454 	ldr	r2, [sp, #1108]	; 0x454
   35b08:	e59f3630 	ldr	r3, [pc, #1584]	; 36140 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcf4>
   35b0c:	e58d2000 	str	r2, [sp]
   35b10:	e59f162c 	ldr	r1, [pc, #1580]	; 36144 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcf8>
   35b14:	e3a02004 	mov	r2, #4
   35b18:	ebffc303 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   35b1c:	e1a0000a 	mov	r0, sl
   35b20:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   35b24:	eb00212f 	bl	3dfe8 <BusAccess::rawBusControlSetData(unsigned long)>
   35b28:	e1a00006 	mov	r0, r6
   35b2c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35b30:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   35b34:	ebfffdb1 	bl	35200 <BusControlAPI::busLinesRead(char*, int)>
   35b38:	eafffe51 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35b3c:	e1a0000a 	mov	r0, sl
   35b40:	eb002126 	bl	3dfe0 <BusAccess::rawBusControlReleaseBus()>
   35b44:	e1a00006 	mov	r0, r6
   35b48:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35b4c:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   35b50:	ebfffdaa 	bl	35200 <BusControlAPI::busLinesRead(char*, int)>
   35b54:	eafffe4a 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35b58:	e59f15e8 	ldr	r1, [pc, #1512]	; 36148 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcfc>
   35b5c:	e28d0020 	add	r0, sp, #32
   35b60:	ebffd114 	bl	29fb8 <strcasecmp>
   35b64:	e250c000 	subs	ip, r0, #0
   35b68:	1a00001c 	bne	35be0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x794>
   35b6c:	e28d2e45 	add	r2, sp, #1104	; 0x450
   35b70:	e2822004 	add	r2, r2, #4
   35b74:	e58d2000 	str	r2, [sp]
   35b78:	e1a03007 	mov	r3, r7
   35b7c:	e3a02001 	mov	r2, #1
   35b80:	e1a00006 	mov	r0, r6
   35b84:	e59f15b0 	ldr	r1, [pc, #1456]	; 3613c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcf0>
   35b88:	e58dc00c 	str	ip, [sp, #12]
   35b8c:	e58dc008 	str	ip, [sp, #8]
   35b90:	e58dc004 	str	ip, [sp, #4]
   35b94:	e58dc454 	str	ip, [sp, #1108]	; 0x454
   35b98:	ebfffbe0 	bl	34b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35b9c:	e3500000 	cmp	r0, #0
   35ba0:	0afffec8 	beq	356c8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x27c>
   35ba4:	e1a0000a 	mov	r0, sl
   35ba8:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   35bac:	eb002154 	bl	3e104 <BusAccess::rawBusControlWritePIB(unsigned long)>
   35bb0:	e1a00006 	mov	r0, r6
   35bb4:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35bb8:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   35bbc:	ebfffd8f 	bl	35200 <BusControlAPI::busLinesRead(char*, int)>
   35bc0:	eafffe2f 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35bc4:	e1a0000a 	mov	r0, sl
   35bc8:	eb002144 	bl	3e0e0 <BusAccess::rawBusControlReadPIB()>
   35bcc:	e1a00006 	mov	r0, r6
   35bd0:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35bd4:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   35bd8:	ebfffd88 	bl	35200 <BusControlAPI::busLinesRead(char*, int)>
   35bdc:	eafffe28 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35be0:	e59f1564 	ldr	r1, [pc, #1380]	; 3614c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd00>
   35be4:	e28d0020 	add	r0, sp, #32
   35be8:	ebffd0f2 	bl	29fb8 <strcasecmp>
   35bec:	e2504000 	subs	r4, r0, #0
   35bf0:	1a000025 	bne	35c8c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x840>
   35bf4:	e3a02001 	mov	r2, #1
   35bf8:	e28d3054 	add	r3, sp, #84	; 0x54
   35bfc:	e58d3000 	str	r3, [sp]
   35c00:	e1a00006 	mov	r0, r6
   35c04:	e1a03007 	mov	r3, r7
   35c08:	e59f1540 	ldr	r1, [pc, #1344]	; 36150 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd04>
   35c0c:	e58d4008 	str	r4, [sp, #8]
   35c10:	e58d4004 	str	r4, [sp, #4]
   35c14:	e58d200c 	str	r2, [sp, #12]
   35c18:	e58d4054 	str	r4, [sp, #84]	; 0x54
   35c1c:	ebfffbbf 	bl	34b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35c20:	e3500000 	cmp	r0, #0
   35c24:	0afffea7 	beq	356c8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x27c>
   35c28:	e28d2e45 	add	r2, sp, #1104	; 0x450
   35c2c:	e2822004 	add	r2, r2, #4
   35c30:	e58d2000 	str	r2, [sp]
   35c34:	e1a03007 	mov	r3, r7
   35c38:	e3a02002 	mov	r2, #2
   35c3c:	e1a00006 	mov	r0, r6
   35c40:	e59f150c 	ldr	r1, [pc, #1292]	; 36154 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd08>
   35c44:	e58d400c 	str	r4, [sp, #12]
   35c48:	e58d4008 	str	r4, [sp, #8]
   35c4c:	e58d4004 	str	r4, [sp, #4]
   35c50:	e58d4454 	str	r4, [sp, #1108]	; 0x454
   35c54:	ebfffbb1 	bl	34b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35c58:	e3500000 	cmp	r0, #0
   35c5c:	0afffe99 	beq	356c8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x27c>
   35c60:	e59d2454 	ldr	r2, [sp, #1108]	; 0x454
   35c64:	e1a0000a 	mov	r0, sl
   35c68:	e2522000 	subs	r2, r2, #0
   35c6c:	13a02001 	movne	r2, #1
   35c70:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   35c74:	eb002110 	bl	3e0bc <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35c78:	e1a00006 	mov	r0, r6
   35c7c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35c80:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   35c84:	ebfffd5d 	bl	35200 <BusControlAPI::busLinesRead(char*, int)>
   35c88:	eafffdfd 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35c8c:	e59f14c4 	ldr	r1, [pc, #1220]	; 36158 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd0c>
   35c90:	e28d0020 	add	r0, sp, #32
   35c94:	ebffd0c7 	bl	29fb8 <strcasecmp>
   35c98:	e250c000 	subs	ip, r0, #0
   35c9c:	1a000015 	bne	35cf8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8ac>
   35ca0:	e3a02001 	mov	r2, #1
   35ca4:	e28d1e45 	add	r1, sp, #1104	; 0x450
   35ca8:	e2811004 	add	r1, r1, #4
   35cac:	e58d1000 	str	r1, [sp]
   35cb0:	e1a03007 	mov	r3, r7
   35cb4:	e1a00006 	mov	r0, r6
   35cb8:	e59f1490 	ldr	r1, [pc, #1168]	; 36150 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd04>
   35cbc:	e58dc008 	str	ip, [sp, #8]
   35cc0:	e58dc004 	str	ip, [sp, #4]
   35cc4:	e58d200c 	str	r2, [sp, #12]
   35cc8:	e58dc454 	str	ip, [sp, #1108]	; 0x454
   35ccc:	ebfffb93 	bl	34b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35cd0:	e3500000 	cmp	r0, #0
   35cd4:	0afffe7b 	beq	356c8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x27c>
   35cd8:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   35cdc:	e1a0000a 	mov	r0, sl
   35ce0:	eb0020f8 	bl	3e0c8 <BusAccess::rawBusControlGetPin(unsigned long)>
   35ce4:	e1a00006 	mov	r0, r6
   35ce8:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35cec:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   35cf0:	ebfffd42 	bl	35200 <BusControlAPI::busLinesRead(char*, int)>
   35cf4:	eafffde2 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35cf8:	e59f145c 	ldr	r1, [pc, #1116]	; 3615c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd10>
   35cfc:	e28d0020 	add	r0, sp, #32
   35d00:	ebffd0ac 	bl	29fb8 <strcasecmp>
   35d04:	e3500000 	cmp	r0, #0
   35d08:	0a0000d6 	beq	36068 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc1c>
   35d0c:	e59f144c 	ldr	r1, [pc, #1100]	; 36160 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd14>
   35d10:	e28d0020 	add	r0, sp, #32
   35d14:	ebffd0a7 	bl	29fb8 <strcasecmp>
   35d18:	e3500000 	cmp	r0, #0
   35d1c:	0a0000d6 	beq	3607c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc30>
   35d20:	e59f143c 	ldr	r1, [pc, #1084]	; 36164 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd18>
   35d24:	e28d0020 	add	r0, sp, #32
   35d28:	ebffd0a2 	bl	29fb8 <strcasecmp>
   35d2c:	e3500000 	cmp	r0, #0
   35d30:	0a0000c4 	beq	36048 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xbfc>
   35d34:	e59f142c 	ldr	r1, [pc, #1068]	; 36168 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd1c>
   35d38:	e28d0020 	add	r0, sp, #32
   35d3c:	ebffd09d 	bl	29fb8 <strcasecmp>
   35d40:	e3500000 	cmp	r0, #0
   35d44:	0a0000b8 	beq	3602c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xbe0>
   35d48:	e59f141c 	ldr	r1, [pc, #1052]	; 3616c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd20>
   35d4c:	e28d0020 	add	r0, sp, #32
   35d50:	ebffd098 	bl	29fb8 <strcasecmp>
   35d54:	e2503000 	subs	r3, r0, #0
   35d58:	0a000094 	beq	35fb0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb64>
   35d5c:	e59f140c 	ldr	r1, [pc, #1036]	; 36170 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd24>
   35d60:	e28d0020 	add	r0, sp, #32
   35d64:	ebffd093 	bl	29fb8 <strcasecmp>
   35d68:	e3500000 	cmp	r0, #0
   35d6c:	0a000088 	beq	35f94 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb48>
   35d70:	e59f13fc 	ldr	r1, [pc, #1020]	; 36174 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd28>
   35d74:	e28d0020 	add	r0, sp, #32
   35d78:	ebffd08e 	bl	29fb8 <strcasecmp>
   35d7c:	e3500000 	cmp	r0, #0
   35d80:	0a00007c 	beq	35f78 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb2c>
   35d84:	e59f13ec 	ldr	r1, [pc, #1004]	; 36178 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd2c>
   35d88:	e28d0020 	add	r0, sp, #32
   35d8c:	ebffd089 	bl	29fb8 <strcasecmp>
   35d90:	e3500000 	cmp	r0, #0
   35d94:	0a000069 	beq	35f40 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xaf4>
   35d98:	e59f13dc 	ldr	r1, [pc, #988]	; 3617c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd30>
   35d9c:	e28d0020 	add	r0, sp, #32
   35da0:	ebffd084 	bl	29fb8 <strcasecmp>
   35da4:	e3500000 	cmp	r0, #0
   35da8:	0a000056 	beq	35f08 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xabc>
   35dac:	e59f13cc 	ldr	r1, [pc, #972]	; 36180 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd34>
   35db0:	e28d0020 	add	r0, sp, #32
   35db4:	ebffd07f 	bl	29fb8 <strcasecmp>
   35db8:	e3500000 	cmp	r0, #0
   35dbc:	0a000051 	beq	35f08 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xabc>
   35dc0:	e59f13bc 	ldr	r1, [pc, #956]	; 36184 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd38>
   35dc4:	e28d0020 	add	r0, sp, #32
   35dc8:	ebffd07a 	bl	29fb8 <strcasecmp>
   35dcc:	e3500000 	cmp	r0, #0
   35dd0:	0a000025 	beq	35e6c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa20>
   35dd4:	e59f13ac 	ldr	r1, [pc, #940]	; 36188 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd3c>
   35dd8:	e28d0020 	add	r0, sp, #32
   35ddc:	ebffd075 	bl	29fb8 <strcasecmp>
   35de0:	e3500000 	cmp	r0, #0
   35de4:	1afffeb1 	bne	358b0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x464>
   35de8:	e28d8e45 	add	r8, sp, #1104	; 0x450
   35dec:	e2888004 	add	r8, r8, #4
   35df0:	e1a01007 	mov	r1, r7
   35df4:	e1a02008 	mov	r2, r8
   35df8:	e3a03032 	mov	r3, #50	; 0x32
   35dfc:	e59f0388 	ldr	r0, [pc, #904]	; 3618c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd40>
   35e00:	ebffe098 	bl	2e068 <jsonGetValueForKey>
   35e04:	e3500000 	cmp	r0, #0
   35e08:	1a000006 	bne	35e28 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9dc>
   35e0c:	e1a01009 	mov	r1, r9
   35e10:	e3a03032 	mov	r3, #50	; 0x32
   35e14:	e1a02008 	mov	r2, r8
   35e18:	e59f036c 	ldr	r0, [pc, #876]	; 3618c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd40>
   35e1c:	ebffe091 	bl	2e068 <jsonGetValueForKey>
   35e20:	e3500000 	cmp	r0, #0
   35e24:	0a00000e 	beq	35e64 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa18>
   35e28:	e3a0200a 	mov	r2, #10
   35e2c:	e3a01000 	mov	r1, #0
   35e30:	e1a00008 	mov	r0, r8
   35e34:	ebffd160 	bl	2a3bc <strtoul>
   35e38:	e1a01000 	mov	r1, r0
   35e3c:	e1a0000a 	mov	r0, sl
   35e40:	ebfff248 	bl	32768 <BusAccess::clockSetFreqHz(unsigned long)>
   35e44:	e1a0000a 	mov	r0, sl
   35e48:	ebfff343 	bl	32b5c <BusAccess::clockCurFreqHz()>
   35e4c:	e59f233c 	ldr	r2, [pc, #828]	; 36190 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd44>
   35e50:	e1a03000 	mov	r3, r0
   35e54:	e59d1ce4 	ldr	r1, [sp, #3300]	; 0xce4
   35e58:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   35e5c:	ebffe040 	bl	2df64 <snprintf>
   35e60:	e1a00005 	mov	r0, r5
   35e64:	e1a05000 	mov	r5, r0
   35e68:	eafffd85 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35e6c:	e1a0000a 	mov	r0, sl
   35e70:	ebfff339 	bl	32b5c <BusAccess::clockCurFreqHz()>
   35e74:	e59f2314 	ldr	r2, [pc, #788]	; 36190 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd44>
   35e78:	e1a03000 	mov	r3, r0
   35e7c:	e59d1ce4 	ldr	r1, [sp, #3300]	; 0xce4
   35e80:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   35e84:	ebffe036 	bl	2df64 <snprintf>
   35e88:	eafffd7d 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35e8c:	e1a0000a 	mov	r0, sl
   35e90:	e596100c 	ldr	r1, [r6, #12]
   35e94:	ebfff4d9 	bl	33200 <BusAccess::waitOnIO(int, bool)>
   35e98:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35e9c:	e59f128c 	ldr	r1, [pc, #652]	; 36130 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   35ea0:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   35ea4:	ebffdfc2 	bl	2ddb4 <strlcpy>
   35ea8:	eafffd75 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35eac:	e1a0000a 	mov	r0, sl
   35eb0:	e596100c 	ldr	r1, [r6, #12]
   35eb4:	ebfff4c6 	bl	331d4 <BusAccess::waitOnMemory(int, bool)>
   35eb8:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35ebc:	e59f126c 	ldr	r1, [pc, #620]	; 36130 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   35ec0:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   35ec4:	ebffdfba 	bl	2ddb4 <strlcpy>
   35ec8:	eafffd6d 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35ecc:	e1a0000a 	mov	r0, sl
   35ed0:	ebfff504 	bl	332e8 <BusAccess::waitRelease()>
   35ed4:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35ed8:	e59f1250 	ldr	r1, [pc, #592]	; 36130 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   35edc:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   35ee0:	ebffdfb3 	bl	2ddb4 <strlcpy>
   35ee4:	eafffd66 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35ee8:	e1a0000a 	mov	r0, sl
   35eec:	e596100c 	ldr	r1, [r6, #12]
   35ef0:	ebfff464 	bl	33088 <BusAccess::waitHold(int, bool)>
   35ef4:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35ef8:	e59f1230 	ldr	r1, [pc, #560]	; 36130 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   35efc:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   35f00:	ebffdfab 	bl	2ddb4 <strlcpy>
   35f04:	eafffd5e 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35f08:	ebffc2c5 	bl	26a24 <CLogger::Get()>
   35f0c:	e59f3280 	ldr	r3, [pc, #640]	; 36194 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd48>
   35f10:	e3a02004 	mov	r2, #4
   35f14:	e59f1228 	ldr	r1, [pc, #552]	; 36144 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcf8>
   35f18:	ebffc203 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   35f1c:	e1a0000a 	mov	r0, sl
   35f20:	e596100c 	ldr	r1, [r6, #12]
   35f24:	e3a02004 	mov	r2, #4
   35f28:	ebffed07 	bl	3134c <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
   35f2c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35f30:	e59f11f8 	ldr	r1, [pc, #504]	; 36130 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   35f34:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   35f38:	ebffdf9d 	bl	2ddb4 <strlcpy>
   35f3c:	eafffd50 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35f40:	ebffc2b7 	bl	26a24 <CLogger::Get()>
   35f44:	e59f324c 	ldr	r3, [pc, #588]	; 36198 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd4c>
   35f48:	e3a02004 	mov	r2, #4
   35f4c:	e59f11f0 	ldr	r1, [pc, #496]	; 36144 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcf8>
   35f50:	ebffc1f5 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   35f54:	e1a0000a 	mov	r0, sl
   35f58:	e596100c 	ldr	r1, [r6, #12]
   35f5c:	e3e02000 	mvn	r2, #0
   35f60:	ebffecc7 	bl	31284 <BusAccess::targetReqReset(int, int)>
   35f64:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35f68:	e59f11c0 	ldr	r1, [pc, #448]	; 36130 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   35f6c:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   35f70:	ebffdf8f 	bl	2ddb4 <strlcpy>
   35f74:	eafffd42 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35f78:	e1a0000a 	mov	r0, sl
   35f7c:	ebffec95 	bl	311d8 <BusAccess::busAccessReinit()>
   35f80:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35f84:	e59f11a4 	ldr	r1, [pc, #420]	; 36130 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   35f88:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   35f8c:	ebffdf88 	bl	2ddb4 <strlcpy>
   35f90:	eafffd3b 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35f94:	e1a0000a 	mov	r0, sl
   35f98:	ebffefaf 	bl	31e5c <BusAccess::clearStatus()>
   35f9c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   35fa0:	e59f1188 	ldr	r1, [pc, #392]	; 36130 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   35fa4:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   35fa8:	ebffdf81 	bl	2ddb4 <strlcpy>
   35fac:	eafffd34 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35fb0:	e28d1e45 	add	r1, sp, #1104	; 0x450
   35fb4:	e1a0000a 	mov	r0, sl
   35fb8:	e2811004 	add	r1, r1, #4
   35fbc:	e58d3454 	str	r3, [sp, #1108]	; 0x454
   35fc0:	e58d3458 	str	r3, [sp, #1112]	; 0x458
   35fc4:	e58d345c 	str	r3, [sp, #1116]	; 0x45c
   35fc8:	e58d3460 	str	r3, [sp, #1120]	; 0x460
   35fcc:	e58d3464 	str	r3, [sp, #1124]	; 0x464
   35fd0:	e58d3468 	str	r3, [sp, #1128]	; 0x468
   35fd4:	e58d346c 	str	r3, [sp, #1132]	; 0x46c
   35fd8:	e58d3470 	str	r3, [sp, #1136]	; 0x470
   35fdc:	e58d3488 	str	r3, [sp, #1160]	; 0x488
   35fe0:	e58d348c 	str	r3, [sp, #1164]	; 0x48c
   35fe4:	e58d3490 	str	r3, [sp, #1168]	; 0x490
   35fe8:	e58d3494 	str	r3, [sp, #1172]	; 0x494
   35fec:	e58d3498 	str	r3, [sp, #1176]	; 0x498
   35ff0:	e58d349c 	str	r3, [sp, #1180]	; 0x49c
   35ff4:	e58d3474 	str	r3, [sp, #1140]	; 0x474
   35ff8:	e58d3478 	str	r3, [sp, #1144]	; 0x478
   35ffc:	e58d347c 	str	r3, [sp, #1148]	; 0x47c
   36000:	e58d3480 	str	r3, [sp, #1152]	; 0x480
   36004:	e58d3484 	str	r3, [sp, #1156]	; 0x484
   36008:	ebffef8c 	bl	31e40 <BusAccess::getStatus(BusAccessStatusInfo&)>
   3600c:	e28d0e45 	add	r0, sp, #1104	; 0x450
   36010:	e2800004 	add	r0, r0, #4
   36014:	ebffef10 	bl	31c5c <BusAccessStatusInfo::getJson()>
   36018:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   3601c:	e1a01000 	mov	r1, r0
   36020:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36024:	ebffdf62 	bl	2ddb4 <strlcpy>
   36028:	eafffd15 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   3602c:	e1a0000a 	mov	r0, sl
   36030:	eb002054 	bl	3e188 <BusAccess::rawBusControlMuxClear()>
   36034:	e1a00006 	mov	r0, r6
   36038:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   3603c:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36040:	ebfffc6e 	bl	35200 <BusControlAPI::busLinesRead(char*, int)>
   36044:	eafffd0e 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36048:	e1a01007 	mov	r1, r7
   3604c:	e1a00006 	mov	r0, r6
   36050:	ebfffbf2 	bl	35020 <BusControlAPI::muxLineHandler(char const*)>
   36054:	e1a00006 	mov	r0, r6
   36058:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   3605c:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36060:	ebfffc66 	bl	35200 <BusControlAPI::busLinesRead(char*, int)>
   36064:	eafffd06 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36068:	e1a00006 	mov	r0, r6
   3606c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36070:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36074:	ebfffc61 	bl	35200 <BusControlAPI::busLinesRead(char*, int)>
   36078:	eafffd01 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   3607c:	e1a01007 	mov	r1, r7
   36080:	e1a00006 	mov	r0, r6
   36084:	ebfffb1c 	bl	34cfc <BusControlAPI::busLineHandler(char const*)>
   36088:	e1a00006 	mov	r0, r6
   3608c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36090:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36094:	ebfffc59 	bl	35200 <BusControlAPI::busLinesRead(char*, int)>
   36098:	eafffcf9 	b	35484 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   3609c:	0003e8f0 	.word	0x0003e8f0
   360a0:	000465e0 	.word	0x000465e0
   360a4:	000465e4 	.word	0x000465e4
   360a8:	000465fc 	.word	0x000465fc
   360ac:	00046600 	.word	0x00046600
   360b0:	0004662c 	.word	0x0004662c
   360b4:	00000864 	.word	0x00000864
   360b8:	00047318 	.word	0x00047318
   360bc:	00046864 	.word	0x00046864
   360c0:	00046664 	.word	0x00046664
   360c4:	000465ec 	.word	0x000465ec
   360c8:	00046674 	.word	0x00046674
   360cc:	00046680 	.word	0x00046680
   360d0:	00046690 	.word	0x00046690
   360d4:	000466a4 	.word	0x000466a4
   360d8:	000466b4 	.word	0x000466b4
   360dc:	000466c8 	.word	0x000466c8
   360e0:	000466dc 	.word	0x000466dc
   360e4:	000466f0 	.word	0x000466f0
   360e8:	000466fc 	.word	0x000466fc
   360ec:	0004670c 	.word	0x0004670c
   360f0:	00046608 	.word	0x00046608
   360f4:	0004661c 	.word	0x0004661c
   360f8:	0004687c 	.word	0x0004687c
   360fc:	00046888 	.word	0x00046888
   36100:	00046894 	.word	0x00046894
   36104:	000468a0 	.word	0x000468a0
   36108:	000468b0 	.word	0x000468b0
   3610c:	000468c0 	.word	0x000468c0
   36110:	000468cc 	.word	0x000468cc
   36114:	000468d8 	.word	0x000468d8
   36118:	000468e8 	.word	0x000468e8
   3611c:	000468fc 	.word	0x000468fc
   36120:	00046908 	.word	0x00046908
   36124:	00046910 	.word	0x00046910
   36128:	00046918 	.word	0x00046918
   3612c:	00046924 	.word	0x00046924
   36130:	00046668 	.word	0x00046668
   36134:	00046720 	.word	0x00046720
   36138:	00046730 	.word	0x00046730
   3613c:	00046740 	.word	0x00046740
   36140:	00046748 	.word	0x00046748
   36144:	0004692c 	.word	0x0004692c
   36148:	00046758 	.word	0x00046758
   3614c:	00046768 	.word	0x00046768
   36150:	00046778 	.word	0x00046778
   36154:	000464bc 	.word	0x000464bc
   36158:	0004677c 	.word	0x0004677c
   3615c:	0004678c 	.word	0x0004678c
   36160:	0004679c 	.word	0x0004679c
   36164:	000467ac 	.word	0x000467ac
   36168:	000467c0 	.word	0x000467c0
   3616c:	000467d0 	.word	0x000467d0
   36170:	000467dc 	.word	0x000467dc
   36174:	000467ec 	.word	0x000467ec
   36178:	000467f4 	.word	0x000467f4
   3617c:	00046810 	.word	0x00046810
   36180:	00046830 	.word	0x00046830
   36184:	00046840 	.word	0x00046840
   36188:	00046868 	.word	0x00046868
   3618c:	00046874 	.word	0x00046874
   36190:	0004684c 	.word	0x0004684c
   36194:	00046820 	.word	0x00046820
   36198:	00046800 	.word	0x00046800

0003619c <BusControlAPI::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   3619c:	e3500000 	cmp	r0, #0
   361a0:	012fff1e 	bxeq	lr
   361a4:	eafffca8 	b	3544c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

000361a8 <McManager::handleWaitInterruptStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   361a8:	e3500000 	cmp	r0, #0
   361ac:	012fff1e 	bxeq	lr
   361b0:	e2800a02 	add	r0, r0, #8192	; 0x2000
   361b4:	e5900760 	ldr	r0, [r0, #1888]	; 0x760
   361b8:	e3500000 	cmp	r0, #0
   361bc:	012fff1e 	bxeq	lr
   361c0:	e590c000 	ldr	ip, [r0]
   361c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   361c8:	e59ce03c 	ldr	lr, [ip, #60]	; 0x3c
   361cc:	e1a0c00e 	mov	ip, lr
   361d0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   361d4:	e12fff1c 	bx	ip

000361d8 <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)>:
   361d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   361dc:	e1a04000 	mov	r4, r0
   361e0:	e1a07001 	mov	r7, r1
   361e4:	e1a05002 	mov	r5, r2
   361e8:	e1a06003 	mov	r6, r3
   361ec:	ebffc20c 	bl	26a24 <CLogger::Get()>
   361f0:	e3a02004 	mov	r2, #4
   361f4:	e59f3044 	ldr	r3, [pc, #68]	; 36240 <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)+0x68>
   361f8:	e59f1044 	ldr	r1, [pc, #68]	; 36244 <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)+0x6c>
   361fc:	ebffc14a 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   36200:	e3540000 	cmp	r4, #0
   36204:	0a00000b 	beq	36238 <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)+0x60>
   36208:	e2844a02 	add	r4, r4, #8192	; 0x2000
   3620c:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   36210:	e3500000 	cmp	r0, #0
   36214:	0a000007 	beq	36238 <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)+0x60>
   36218:	e590c000 	ldr	ip, [r0]
   3621c:	e1a03006 	mov	r3, r6
   36220:	e59ce038 	ldr	lr, [ip, #56]	; 0x38
   36224:	e1a02005 	mov	r2, r5
   36228:	e1a01007 	mov	r1, r7
   3622c:	e1a0c00e 	mov	ip, lr
   36230:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   36234:	e12fff1c 	bx	ip
   36238:	e3a00000 	mov	r0, #0
   3623c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   36240:	0004693c 	.word	0x0004693c
   36244:	00046b04 	.word	0x00046b04

00036248 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.0]>:
   36248:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3624c:	e2802a02 	add	r2, r0, #8192	; 0x2000
   36250:	e5d23764 	ldrb	r3, [r2, #1892]	; 0x764
   36254:	e24dd01c 	sub	sp, sp, #28
   36258:	e3530000 	cmp	r3, #0
   3625c:	e58d2014 	str	r2, [sp, #20]
   36260:	0a00003c 	beq	36358 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.0]+0x110>
   36264:	e3a03000 	mov	r3, #0
   36268:	e1a05000 	mov	r5, r0
   3626c:	e1a06003 	mov	r6, r3
   36270:	e1a08003 	mov	r8, r3
   36274:	e5c23767 	strb	r3, [r2, #1895]	; 0x767
   36278:	e5950010 	ldr	r0, [r5, #16]
   3627c:	ebfff578 	bl	33864 <TargetProgrammer::numMemoryBlocks()>
   36280:	e1500006 	cmp	r0, r6
   36284:	da00002c 	ble	3633c <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.0]+0xf4>
   36288:	e1a01006 	mov	r1, r6
   3628c:	e5950010 	ldr	r0, [r5, #16]
   36290:	ebfff576 	bl	33870 <TargetProgrammer::getMemoryBlock(int)>
   36294:	e1a04000 	mov	r4, r0
   36298:	e5941000 	ldr	r1, [r4]
   3629c:	e5950010 	ldr	r0, [r5, #16]
   362a0:	e5957008 	ldr	r7, [r5, #8]
   362a4:	e58d1010 	str	r1, [sp, #16]
   362a8:	ebfff573 	bl	3387c <TargetProgrammer::getMemoryImagePtr()>
   362ac:	e1a02000 	mov	r2, r0
   362b0:	e594c000 	ldr	ip, [r4]
   362b4:	e5943004 	ldr	r3, [r4, #4]
   362b8:	e082200c 	add	r2, r2, ip
   362bc:	e59d1010 	ldr	r1, [sp, #16]
   362c0:	e1a00007 	mov	r0, r7
   362c4:	e58d8008 	str	r8, [sp, #8]
   362c8:	e58d8004 	str	r8, [sp, #4]
   362cc:	e58d8000 	str	r8, [sp]
   362d0:	ebfff6be 	bl	33dd0 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>
   362d4:	e1a0b000 	mov	fp, r0
   362d8:	ebffc1d1 	bl	26a24 <CLogger::Get()>
   362dc:	e5949000 	ldr	r9, [r4]
   362e0:	e1a07000 	mov	r7, r0
   362e4:	e594a004 	ldr	sl, [r4, #4]
   362e8:	ebffde77 	bl	2dccc <micros>
   362ec:	e1a0c000 	mov	ip, r0
   362f0:	e59f30b0 	ldr	r3, [pc, #176]	; 363a8 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.0]+0x160>
   362f4:	e1a00007 	mov	r0, r7
   362f8:	e3a02004 	mov	r2, #4
   362fc:	e1cda0f4 	strd	sl, [sp, #4]
   36300:	e59f10a4 	ldr	r1, [pc, #164]	; 363ac <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.0]+0x164>
   36304:	e58d9000 	str	r9, [sp]
   36308:	e58dc00c 	str	ip, [sp, #12]
   3630c:	ebffc106 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   36310:	e5943000 	ldr	r3, [r4]
   36314:	e2866001 	add	r6, r6, #1
   36318:	e3530000 	cmp	r3, #0
   3631c:	1affffd5 	bne	36278 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.0]+0x30>
   36320:	e3a03001 	mov	r3, #1
   36324:	e59d2014 	ldr	r2, [sp, #20]
   36328:	e5950010 	ldr	r0, [r5, #16]
   3632c:	e5c23767 	strb	r3, [r2, #1895]	; 0x767
   36330:	ebfff54b 	bl	33864 <TargetProgrammer::numMemoryBlocks()>
   36334:	e1500006 	cmp	r0, r6
   36338:	caffffd2 	bgt	36288 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.0]+0x40>
   3633c:	e59d3014 	ldr	r3, [sp, #20]
   36340:	e5d33765 	ldrb	r3, [r3, #1893]	; 0x765
   36344:	e3530000 	cmp	r3, #0
   36348:	1a000011 	bne	36394 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.0]+0x14c>
   3634c:	e3a03000 	mov	r3, #0
   36350:	e59d2014 	ldr	r2, [sp, #20]
   36354:	e5c23764 	strb	r3, [r2, #1892]	; 0x764
   36358:	e59d2014 	ldr	r2, [sp, #20]
   3635c:	e5d23766 	ldrb	r3, [r2, #1894]	; 0x766
   36360:	e3530000 	cmp	r3, #0
   36364:	0a000008 	beq	3638c <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.0]+0x144>
   36368:	e5920760 	ldr	r0, [r2, #1888]	; 0x760
   3636c:	e3500000 	cmp	r0, #0
   36370:	0a000002 	beq	36380 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.0]+0x138>
   36374:	e5903000 	ldr	r3, [r0]
   36378:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   3637c:	e12fff33 	blx	r3
   36380:	e3a03000 	mov	r3, #0
   36384:	e59d2014 	ldr	r2, [sp, #20]
   36388:	e5c23766 	strb	r3, [r2, #1894]	; 0x766
   3638c:	e28dd01c 	add	sp, sp, #28
   36390:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36394:	e3e02000 	mvn	r2, #0
   36398:	e5951014 	ldr	r1, [r5, #20]
   3639c:	e595000c 	ldr	r0, [r5, #12]
   363a0:	ebffebb7 	bl	31284 <BusAccess::targetReqReset(int, int)>
   363a4:	eaffffe8 	b	3634c <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.0]+0x104>
   363a8:	00046950 	.word	0x00046950
   363ac:	00046b04 	.word	0x00046b04

000363b0 <McManager::busActionCompleteStatic(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   363b0:	e2411004 	sub	r1, r1, #4
   363b4:	e16f1f11 	clz	r1, r1
   363b8:	e3500000 	cmp	r0, #0
   363bc:	e1a012a1 	lsr	r1, r1, #5
   363c0:	03a01000 	moveq	r1, #0
   363c4:	e3510000 	cmp	r1, #0
   363c8:	012fff1e 	bxeq	lr
   363cc:	eaffff9d 	b	36248 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.0]>

000363d0 <McManager::McManager(DisplayBase*, CommandHandler&, HwManager&, BusAccess&, TargetProgrammer&)>:
   363d0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   363d4:	e3a0e000 	mov	lr, #0
   363d8:	e3e04000 	mvn	r4, #0
   363dc:	e3a07ffa 	mov	r7, #1000	; 0x3e8
   363e0:	e3a06064 	mov	r6, #100	; 0x64
   363e4:	e3a05f7d 	mov	r5, #500	; 0x1f4
   363e8:	e880000e 	stm	r0, {r1, r2, r3}
   363ec:	e59d3014 	ldr	r3, [sp, #20]
   363f0:	e580300c 	str	r3, [r0, #12]
   363f4:	e59d3018 	ldr	r3, [sp, #24]
   363f8:	e5803010 	str	r3, [r0, #16]
   363fc:	e59f3044 	ldr	r3, [pc, #68]	; 36448 <McManager::McManager(DisplayBase*, CommandHandler&, HwManager&, BusAccess&, TargetProgrammer&)+0x78>
   36400:	e5830000 	str	r0, [r3]
   36404:	e2803a02 	add	r3, r0, #8192	; 0x2000
   36408:	e5837768 	str	r7, [r3, #1896]	; 0x768
   3640c:	e583677c 	str	r6, [r3, #1916]	; 0x77c
   36410:	e5835788 	str	r5, [r3, #1928]	; 0x788
   36414:	e5804014 	str	r4, [r0, #20]
   36418:	e5804018 	str	r4, [r0, #24]
   3641c:	e583e75c 	str	lr, [r3, #1884]	; 0x75c
   36420:	e583e760 	str	lr, [r3, #1888]	; 0x760
   36424:	e583e730 	str	lr, [r3, #1840]	; 0x730
   36428:	e583e76c 	str	lr, [r3, #1900]	; 0x76c
   3642c:	e583e774 	str	lr, [r3, #1908]	; 0x774
   36430:	e583e778 	str	lr, [r3, #1912]	; 0x778
   36434:	e583e770 	str	lr, [r3, #1904]	; 0x770
   36438:	e5c3e780 	strb	lr, [r3, #1920]	; 0x780
   3643c:	e583e78c 	str	lr, [r3, #1932]	; 0x78c
   36440:	e583e784 	str	lr, [r3, #1924]	; 0x784
   36444:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   36448:	0004dde8 	.word	0x0004dde8

0003644c <McManager::init()>:
   3644c:	e92d4010 	push	{r4, lr}
   36450:	e5903014 	ldr	r3, [r0, #20]
   36454:	e1a04000 	mov	r4, r0
   36458:	e3530000 	cmp	r3, #0
   3645c:	e24dd030 	sub	sp, sp, #48	; 0x30
   36460:	ba000015 	blt	364bc <McManager::init()+0x70>
   36464:	e5943018 	ldr	r3, [r4, #24]
   36468:	e3530000 	cmp	r3, #0
   3646c:	ba000028 	blt	36514 <McManager::init()+0xc8>
   36470:	e59f00c4 	ldr	r0, [pc, #196]	; 3653c <McManager::init()+0xf0>
   36474:	ebffd289 	bl	2aea0 <operator new(unsigned int)>
   36478:	e1a01004 	mov	r1, r4
   3647c:	e594200c 	ldr	r2, [r4, #12]
   36480:	eb000878 	bl	38668 <McTerminal::McTerminal(McManager&, BusAccess&)>
   36484:	e59f00b4 	ldr	r0, [pc, #180]	; 36540 <McManager::init()+0xf4>
   36488:	ebffd284 	bl	2aea0 <operator new(unsigned int)>
   3648c:	e1a01004 	mov	r1, r4
   36490:	e594200c 	ldr	r2, [r4, #12]
   36494:	eb0004b4 	bl	3776c <McTRS80::McTRS80(McManager&, BusAccess&)>
   36498:	e3a03000 	mov	r3, #0
   3649c:	e3a02001 	mov	r2, #1
   364a0:	e2844a02 	add	r4, r4, #8192	; 0x2000
   364a4:	e5c42780 	strb	r2, [r4, #1920]	; 0x780
   364a8:	e584376c 	str	r3, [r4, #1900]	; 0x76c
   364ac:	e5843774 	str	r3, [r4, #1908]	; 0x774
   364b0:	e5843784 	str	r3, [r4, #1924]	; 0x784
   364b4:	e28dd030 	add	sp, sp, #48	; 0x30
   364b8:	e8bd8010 	pop	{r4, pc}
   364bc:	e3a03000 	mov	r3, #0
   364c0:	e58d002c 	str	r0, [sp, #44]	; 0x2c
   364c4:	e58d3028 	str	r3, [sp, #40]	; 0x28
   364c8:	e58d3024 	str	r3, [sp, #36]	; 0x24
   364cc:	e58d3020 	str	r3, [sp, #32]
   364d0:	e58d301c 	str	r3, [sp, #28]
   364d4:	e58d3018 	str	r3, [sp, #24]
   364d8:	e58d3014 	str	r3, [sp, #20]
   364dc:	e58d3010 	str	r3, [sp, #16]
   364e0:	e58d300c 	str	r3, [sp, #12]
   364e4:	e58d3008 	str	r3, [sp, #8]
   364e8:	e58d3004 	str	r3, [sp, #4]
   364ec:	e58d3000 	str	r3, [sp]
   364f0:	e3a01001 	mov	r1, #1
   364f4:	e59f3048 	ldr	r3, [pc, #72]	; 36544 <McManager::init()+0xf8>
   364f8:	e59f2048 	ldr	r2, [pc, #72]	; 36548 <McManager::init()+0xfc>
   364fc:	e590000c 	ldr	r0, [r0, #12]
   36500:	ebffee07 	bl	31d24 <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>
   36504:	e5943018 	ldr	r3, [r4, #24]
   36508:	e5840014 	str	r0, [r4, #20]
   3650c:	e3530000 	cmp	r3, #0
   36510:	aaffffd6 	bge	36470 <McManager::init()+0x24>
   36514:	e3a02000 	mov	r2, #0
   36518:	e59f302c 	ldr	r3, [pc, #44]	; 3654c <McManager::init()+0x100>
   3651c:	e1a01004 	mov	r1, r4
   36520:	e1cd20f0 	strd	r2, [sp]
   36524:	e3a02001 	mov	r2, #1
   36528:	e59f3020 	ldr	r3, [pc, #32]	; 36550 <McManager::init()+0x104>
   3652c:	e5940004 	ldr	r0, [r4, #4]
   36530:	ebffe4e9 	bl	2f8dc <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   36534:	e5840018 	str	r0, [r4, #24]
   36538:	eaffffcc 	b	36470 <McManager::init()+0x24>
   3653c:	00062f20 	.word	0x00062f20
   36540:	000005e8 	.word	0x000005e8
   36544:	000363b0 	.word	0x000363b0
   36548:	000361a8 	.word	0x000361a8
   3654c:	000361d8 	.word	0x000361d8
   36550:	00037134 	.word	0x00037134

00036554 <McManager::getNumMachines()>:
   36554:	e2800a02 	add	r0, r0, #8192	; 0x2000
   36558:	e590075c 	ldr	r0, [r0, #1884]	; 0x75c
   3655c:	e12fff1e 	bx	lr

00036560 <McManager::getMachine()>:
   36560:	e2800a02 	add	r0, r0, #8192	; 0x2000
   36564:	e5900760 	ldr	r0, [r0, #1888]	; 0x760
   36568:	e12fff1e 	bx	lr

0003656c <McManager::getMachineName()>:
   3656c:	e2800a02 	add	r0, r0, #8192	; 0x2000
   36570:	e5900760 	ldr	r0, [r0, #1888]	; 0x760
   36574:	e3500000 	cmp	r0, #0
   36578:	0a000002 	beq	36588 <McManager::getMachineName()+0x1c>
   3657c:	e5903000 	ldr	r3, [r0]
   36580:	e5933008 	ldr	r3, [r3, #8]
   36584:	e12fff13 	bx	r3
   36588:	e59f0000 	ldr	r0, [pc]	; 36590 <McManager::getMachineName()+0x24>
   3658c:	e12fff1e 	bx	lr
   36590:	000451d4 	.word	0x000451d4

00036594 <McManager::getMachineJSON()>:
   36594:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36598:	e3a02e46 	mov	r2, #1120	; 0x460
   3659c:	e2807a02 	add	r7, r0, #8192	; 0x2000
   365a0:	e1a09000 	mov	r9, r0
   365a4:	e59f1140 	ldr	r1, [pc, #320]	; 366ec <McManager::getMachineJSON()+0x158>
   365a8:	e59f0140 	ldr	r0, [pc, #320]	; 366f0 <McManager::getMachineJSON()+0x15c>
   365ac:	e24ddf4e 	sub	sp, sp, #312	; 0x138
   365b0:	ebffddff 	bl	2ddb4 <strlcpy>
   365b4:	e597375c 	ldr	r3, [r7, #1884]	; 0x75c
   365b8:	e3530000 	cmp	r3, #0
   365bc:	da000048 	ble	366e4 <McManager::getMachineJSON()+0x150>
   365c0:	e5970734 	ldr	r0, [r7, #1844]	; 0x734
   365c4:	e59fa124 	ldr	sl, [pc, #292]	; 366f0 <McManager::getMachineJSON()+0x15c>
   365c8:	e5903000 	ldr	r3, [r0]
   365cc:	e3a02f4b 	mov	r2, #300	; 0x12c
   365d0:	e593300c 	ldr	r3, [r3, #12]
   365d4:	e28d100c 	add	r1, sp, #12
   365d8:	e2895c27 	add	r5, r9, #9984	; 0x2700
   365dc:	e12fff33 	blx	r3
   365e0:	e1a0600a 	mov	r6, sl
   365e4:	e3a04000 	mov	r4, #0
   365e8:	e59f8104 	ldr	r8, [pc, #260]	; 366f4 <McManager::getMachineJSON()+0x160>
   365ec:	e2855034 	add	r5, r5, #52	; 0x34
   365f0:	ea000009 	b	3661c <McManager::getMachineJSON()+0x88>
   365f4:	e5b50004 	ldr	r0, [r5, #4]!
   365f8:	e3a02f4b 	mov	r2, #300	; 0x12c
   365fc:	e5903000 	ldr	r3, [r0]
   36600:	e28d100c 	add	r1, sp, #12
   36604:	e593300c 	ldr	r3, [r3, #12]
   36608:	e12fff33 	blx	r3
   3660c:	e3a02e46 	mov	r2, #1120	; 0x460
   36610:	e1a01008 	mov	r1, r8
   36614:	e1a00006 	mov	r0, r6
   36618:	ebffde01 	bl	2de24 <strlcat>
   3661c:	e3a02e46 	mov	r2, #1120	; 0x460
   36620:	e1a00006 	mov	r0, r6
   36624:	e28d100c 	add	r1, sp, #12
   36628:	ebffddfd 	bl	2de24 <strlcat>
   3662c:	e597375c 	ldr	r3, [r7, #1884]	; 0x75c
   36630:	e2844001 	add	r4, r4, #1
   36634:	e1530004 	cmp	r3, r4
   36638:	caffffed 	bgt	365f4 <McManager::getMachineJSON()+0x60>
   3663c:	e3a02e46 	mov	r2, #1120	; 0x460
   36640:	e59f10b0 	ldr	r1, [pc, #176]	; 366f8 <McManager::getMachineJSON()+0x164>
   36644:	e59f00a4 	ldr	r0, [pc, #164]	; 366f0 <McManager::getMachineJSON()+0x15c>
   36648:	ebffddf5 	bl	2de24 <strlcat>
   3664c:	e3a02e46 	mov	r2, #1120	; 0x460
   36650:	e59f10a4 	ldr	r1, [pc, #164]	; 366fc <McManager::getMachineJSON()+0x168>
   36654:	e59f0094 	ldr	r0, [pc, #148]	; 366f0 <McManager::getMachineJSON()+0x15c>
   36658:	ebffddf1 	bl	2de24 <strlcat>
   3665c:	e3a02e46 	mov	r2, #1120	; 0x460
   36660:	e59f1098 	ldr	r1, [pc, #152]	; 36700 <McManager::getMachineJSON()+0x16c>
   36664:	e59f0084 	ldr	r0, [pc, #132]	; 366f0 <McManager::getMachineJSON()+0x15c>
   36668:	ebffdded 	bl	2de24 <strlcat>
   3666c:	e5970760 	ldr	r0, [r7, #1888]	; 0x760
   36670:	e3500000 	cmp	r0, #0
   36674:	0a000018 	beq	366dc <McManager::getMachineJSON()+0x148>
   36678:	e5903000 	ldr	r3, [r0]
   3667c:	e5933008 	ldr	r3, [r3, #8]
   36680:	e12fff33 	blx	r3
   36684:	e1a01000 	mov	r1, r0
   36688:	e3a02e46 	mov	r2, #1120	; 0x460
   3668c:	e59f005c 	ldr	r0, [pc, #92]	; 366f0 <McManager::getMachineJSON()+0x15c>
   36690:	ebffdde3 	bl	2de24 <strlcat>
   36694:	e3a02e46 	mov	r2, #1120	; 0x460
   36698:	e59f1060 	ldr	r1, [pc, #96]	; 36700 <McManager::getMachineJSON()+0x16c>
   3669c:	e59f004c 	ldr	r0, [pc, #76]	; 366f0 <McManager::getMachineJSON()+0x15c>
   366a0:	ebffdddf 	bl	2de24 <strlcat>
   366a4:	e599000c 	ldr	r0, [r9, #12]
   366a8:	ebfff12b 	bl	32b5c <BusAccess::clockCurFreqHz()>
   366ac:	e1a03000 	mov	r3, r0
   366b0:	e59f0038 	ldr	r0, [pc, #56]	; 366f0 <McManager::getMachineJSON()+0x15c>
   366b4:	e58d3004 	str	r3, [sp, #4]
   366b8:	ebffce17 	bl	29f1c <strlen>
   366bc:	e3a01e46 	mov	r1, #1120	; 0x460
   366c0:	e59d3004 	ldr	r3, [sp, #4]
   366c4:	e59f2038 	ldr	r2, [pc, #56]	; 36704 <McManager::getMachineJSON()+0x170>
   366c8:	e08a0000 	add	r0, sl, r0
   366cc:	ebffde24 	bl	2df64 <snprintf>
   366d0:	e59f0018 	ldr	r0, [pc, #24]	; 366f0 <McManager::getMachineJSON()+0x15c>
   366d4:	e28ddf4e 	add	sp, sp, #312	; 0x138
   366d8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   366dc:	e59f1024 	ldr	r1, [pc, #36]	; 36708 <McManager::getMachineJSON()+0x174>
   366e0:	eaffffe8 	b	36688 <McManager::getMachineJSON()+0xf4>
   366e4:	e59fa004 	ldr	sl, [pc, #4]	; 366f0 <McManager::getMachineJSON()+0x15c>
   366e8:	eaffffd3 	b	3663c <McManager::getMachineJSON()+0xa8>
   366ec:	00046984 	.word	0x00046984
   366f0:	0004ddec 	.word	0x0004ddec
   366f4:	00041480 	.word	0x00041480
   366f8:	000463b0 	.word	0x000463b0
   366fc:	00046994 	.word	0x00046994
   36700:	00046864 	.word	0x00046864
   36704:	000469a4 	.word	0x000469a4
   36708:	000451d4 	.word	0x000451d4

0003670c <McManager::getMachineClock()>:
   3670c:	e590000c 	ldr	r0, [r0, #12]
   36710:	eafff111 	b	32b5c <BusAccess::clockCurFreqHz()>

00036714 <McManager::targetIrq(int)>:
   36714:	e1a02001 	mov	r2, r1
   36718:	e5901014 	ldr	r1, [r0, #20]
   3671c:	e590000c 	ldr	r0, [r0, #12]
   36720:	eaffeafb 	b	31314 <BusAccess::targetReqIRQ(int, int)>

00036724 <McManager::add(McBase*)>:
   36724:	e2802a02 	add	r2, r0, #8192	; 0x2000
   36728:	e592375c 	ldr	r3, [r2, #1884]	; 0x75c
   3672c:	e3530009 	cmp	r3, #9
   36730:	c12fff1e 	bxgt	lr
   36734:	e283cd27 	add	ip, r3, #2496	; 0x9c0
   36738:	e28cc00c 	add	ip, ip, #12
   3673c:	e080010c 	add	r0, r0, ip, lsl #2
   36740:	e2833001 	add	r3, r3, #1
   36744:	e582375c 	str	r3, [r2, #1884]	; 0x75c
   36748:	e5801004 	str	r1, [r0, #4]
   3674c:	e12fff1e 	bx	lr

00036750 <McManager::setupMachine(char const*)>:
   36750:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36754:	e24dde1a 	sub	sp, sp, #416	; 0x1a0
   36758:	e1a07000 	mov	r7, r0
   3675c:	e3a03064 	mov	r3, #100	; 0x64
   36760:	e59f0238 	ldr	r0, [pc, #568]	; 369a0 <McManager::setupMachine(char const*)+0x250>
   36764:	e28d2010 	add	r2, sp, #16
   36768:	e1a08001 	mov	r8, r1
   3676c:	ebffde3d 	bl	2e068 <jsonGetValueForKey>
   36770:	e3500000 	cmp	r0, #0
   36774:	e2879a02 	add	r9, r7, #8192	; 0x2000
   36778:	1a000077 	bne	3695c <McManager::setupMachine(char const*)+0x20c>
   3677c:	e599375c 	ldr	r3, [r9, #1884]	; 0x75c
   36780:	e3530000 	cmp	r3, #0
   36784:	da00001d 	ble	36800 <McManager::setupMachine(char const*)+0xb0>
   36788:	e5990734 	ldr	r0, [r9, #1844]	; 0x734
   3678c:	e5903000 	ldr	r3, [r0]
   36790:	e5933008 	ldr	r3, [r3, #8]
   36794:	e12fff33 	blx	r3
   36798:	e3a02064 	mov	r2, #100	; 0x64
   3679c:	e1a01000 	mov	r1, r0
   367a0:	e28d0010 	add	r0, sp, #16
   367a4:	ebffdd82 	bl	2ddb4 <strlcpy>
   367a8:	e599375c 	ldr	r3, [r9, #1884]	; 0x75c
   367ac:	e3530000 	cmp	r3, #0
   367b0:	da000012 	ble	36800 <McManager::setupMachine(char const*)+0xb0>
   367b4:	e3a04000 	mov	r4, #0
   367b8:	e1a0a004 	mov	sl, r4
   367bc:	e2876c27 	add	r6, r7, #9984	; 0x2700
   367c0:	e2866030 	add	r6, r6, #48	; 0x30
   367c4:	e5b60004 	ldr	r0, [r6, #4]!
   367c8:	e3500000 	cmp	r0, #0
   367cc:	0a000007 	beq	367f0 <McManager::setupMachine(char const*)+0xa0>
   367d0:	e5903000 	ldr	r3, [r0]
   367d4:	e28d20d8 	add	r2, sp, #216	; 0xd8
   367d8:	e5933000 	ldr	r3, [r3]
   367dc:	e58da0d8 	str	sl, [sp, #216]	; 0xd8
   367e0:	e28d1010 	add	r1, sp, #16
   367e4:	e12fff33 	blx	r3
   367e8:	e2505000 	subs	r5, r0, #0
   367ec:	1a000007 	bne	36810 <McManager::setupMachine(char const*)+0xc0>
   367f0:	e599375c 	ldr	r3, [r9, #1884]	; 0x75c
   367f4:	e2844001 	add	r4, r4, #1
   367f8:	e1530004 	cmp	r3, r4
   367fc:	cafffff0 	bgt	367c4 <McManager::setupMachine(char const*)+0x74>
   36800:	e3a05000 	mov	r5, #0
   36804:	e1a00005 	mov	r0, r5
   36808:	e28dde1a 	add	sp, sp, #416	; 0x1a0
   3680c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36810:	e2844d27 	add	r4, r4, #2496	; 0x9c0
   36814:	e284400c 	add	r4, r4, #12
   36818:	e0874104 	add	r4, r7, r4, lsl #2
   3681c:	e5944004 	ldr	r4, [r4, #4]
   36820:	e3540000 	cmp	r4, #0
   36824:	0afffff5 	beq	36800 <McManager::setupMachine(char const*)+0xb0>
   36828:	e3a02000 	mov	r2, #0
   3682c:	e5971014 	ldr	r1, [r7, #20]
   36830:	e597000c 	ldr	r0, [r7, #12]
   36834:	e5894760 	str	r4, [r9, #1888]	; 0x760
   36838:	ebfff270 	bl	33200 <BusAccess::waitOnIO(int, bool)>
   3683c:	e3a02000 	mov	r2, #0
   36840:	e5971014 	ldr	r1, [r7, #20]
   36844:	e597000c 	ldr	r0, [r7, #12]
   36848:	ebfff261 	bl	331d4 <BusAccess::waitOnMemory(int, bool)>
   3684c:	e5943000 	ldr	r3, [r4]
   36850:	e1a02008 	mov	r2, r8
   36854:	e5933010 	ldr	r3, [r3, #16]
   36858:	e28d1010 	add	r1, sp, #16
   3685c:	e1a00004 	mov	r0, r4
   36860:	e12fff33 	blx	r3
   36864:	e5943000 	ldr	r3, [r4]
   36868:	e5971000 	ldr	r1, [r7]
   3686c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   36870:	e1a00004 	mov	r0, r4
   36874:	e12fff33 	blx	r3
   36878:	e5943000 	ldr	r3, [r4]
   3687c:	e59f2120 	ldr	r2, [pc, #288]	; 369a4 <McManager::setupMachine(char const*)+0x254>
   36880:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   36884:	e597600c 	ldr	r6, [r7, #12]
   36888:	e1530002 	cmp	r3, r2
   3688c:	e5971014 	ldr	r1, [r7, #20]
   36890:	1a000036 	bne	36970 <McManager::setupMachine(char const*)+0x220>
   36894:	e5d420a8 	ldrb	r2, [r4, #168]	; 0xa8
   36898:	e1a00006 	mov	r0, r6
   3689c:	ebfff257 	bl	33200 <BusAccess::waitOnIO(int, bool)>
   368a0:	e5943000 	ldr	r3, [r4]
   368a4:	e59f20fc 	ldr	r2, [pc, #252]	; 369a8 <McManager::setupMachine(char const*)+0x258>
   368a8:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   368ac:	e597600c 	ldr	r6, [r7, #12]
   368b0:	e1530002 	cmp	r3, r2
   368b4:	e5971014 	ldr	r1, [r7, #20]
   368b8:	1a000032 	bne	36988 <McManager::setupMachine(char const*)+0x238>
   368bc:	e5d420a9 	ldrb	r2, [r4, #169]	; 0xa9
   368c0:	e1a00006 	mov	r0, r6
   368c4:	ebfff242 	bl	331d4 <BusAccess::waitOnMemory(int, bool)>
   368c8:	e1a01008 	mov	r1, r8
   368cc:	e3a03064 	mov	r3, #100	; 0x64
   368d0:	e59f00d4 	ldr	r0, [pc, #212]	; 369ac <McManager::setupMachine(char const*)+0x25c>
   368d4:	e28d2074 	add	r2, sp, #116	; 0x74
   368d8:	ebffdde2 	bl	2e068 <jsonGetValueForKey>
   368dc:	e2504000 	subs	r4, r0, #0
   368e0:	0a000015 	beq	3693c <McManager::setupMachine(char const*)+0x1ec>
   368e4:	e1a05004 	mov	r5, r4
   368e8:	e3a020c8 	mov	r2, #200	; 0xc8
   368ec:	e59f10bc 	ldr	r1, [pc, #188]	; 369b0 <McManager::setupMachine(char const*)+0x260>
   368f0:	e28d00d8 	add	r0, sp, #216	; 0xd8
   368f4:	ebffdd2e 	bl	2ddb4 <strlcpy>
   368f8:	e3a020c8 	mov	r2, #200	; 0xc8
   368fc:	e28d1074 	add	r1, sp, #116	; 0x74
   36900:	e28d00d8 	add	r0, sp, #216	; 0xd8
   36904:	ebffdd46 	bl	2de24 <strlcat>
   36908:	e28d10d8 	add	r1, sp, #216	; 0xd8
   3690c:	e5970004 	ldr	r0, [r7, #4]
   36910:	ebffe621 	bl	3019c <CommandHandler::sendAPIReq(char const*)>
   36914:	ebffc042 	bl	26a24 <CLogger::Get()>
   36918:	e28d30d8 	add	r3, sp, #216	; 0xd8
   3691c:	e58d3000 	str	r3, [sp]
   36920:	e3a02004 	mov	r2, #4
   36924:	e59f3088 	ldr	r3, [pc, #136]	; 369b4 <McManager::setupMachine(char const*)+0x264>
   36928:	e59f1088 	ldr	r1, [pc, #136]	; 369b8 <McManager::setupMachine(char const*)+0x268>
   3692c:	ebffbf7e 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   36930:	e1a00005 	mov	r0, r5
   36934:	e28dde1a 	add	sp, sp, #416	; 0x1a0
   36938:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3693c:	ebffc038 	bl	26a24 <CLogger::Get()>
   36940:	e3a02004 	mov	r2, #4
   36944:	e59f3070 	ldr	r3, [pc, #112]	; 369bc <McManager::setupMachine(char const*)+0x26c>
   36948:	e59f1068 	ldr	r1, [pc, #104]	; 369b8 <McManager::setupMachine(char const*)+0x268>
   3694c:	ebffbf76 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   36950:	e1a00005 	mov	r0, r5
   36954:	e28dde1a 	add	sp, sp, #416	; 0x1a0
   36958:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3695c:	e28d0010 	add	r0, sp, #16
   36960:	ebffcd6d 	bl	29f1c <strlen>
   36964:	e3500000 	cmp	r0, #0
   36968:	0affff83 	beq	3677c <McManager::setupMachine(char const*)+0x2c>
   3696c:	eaffff8d 	b	367a8 <McManager::setupMachine(char const*)+0x58>
   36970:	e58d100c 	str	r1, [sp, #12]
   36974:	e1a00004 	mov	r0, r4
   36978:	e12fff33 	blx	r3
   3697c:	e59d100c 	ldr	r1, [sp, #12]
   36980:	e1a02000 	mov	r2, r0
   36984:	eaffffc3 	b	36898 <McManager::setupMachine(char const*)+0x148>
   36988:	e58d100c 	str	r1, [sp, #12]
   3698c:	e1a00004 	mov	r0, r4
   36990:	e12fff33 	blx	r3
   36994:	e59d100c 	ldr	r1, [sp, #12]
   36998:	e1a02000 	mov	r2, r0
   3699c:	eaffffc7 	b	368c0 <McManager::setupMachine(char const*)+0x170>
   369a0:	0004640c 	.word	0x0004640c
   369a4:	0003715c 	.word	0x0003715c
   369a8:	00037164 	.word	0x00037164
   369ac:	000469b4 	.word	0x000469b4
   369b0:	000469bc 	.word	0x000469bc
   369b4:	000469d0 	.word	0x000469d0
   369b8:	00046b04 	.word	0x00046b04
   369bc:	000469e4 	.word	0x000469e4

000369c0 <McManager::setMachineByName(char const*)>:
   369c0:	e92d4010 	push	{r4, lr}
   369c4:	e1a04000 	mov	r4, r0
   369c8:	e24ddffa 	sub	sp, sp, #1000	; 0x3e8
   369cc:	e1a03001 	mov	r3, r1
   369d0:	e59f201c 	ldr	r2, [pc, #28]	; 369f4 <McManager::setMachineByName(char const*)+0x34>
   369d4:	e1a0000d 	mov	r0, sp
   369d8:	e3a01ffa 	mov	r1, #1000	; 0x3e8
   369dc:	ebffdd60 	bl	2df64 <snprintf>
   369e0:	e1a0100d 	mov	r1, sp
   369e4:	e1a00004 	mov	r0, r4
   369e8:	ebffff58 	bl	36750 <McManager::setupMachine(char const*)>
   369ec:	e28ddffa 	add	sp, sp, #1000	; 0x3e8
   369f0:	e8bd8010 	pop	{r4, pc}
   369f4:	000469f8 	.word	0x000469f8

000369f8 <McManager::displayRefresh()>:
   369f8:	e92d4070 	push	{r4, r5, r6, lr}
   369fc:	e2804a02 	add	r4, r0, #8192	; 0x2000
   36a00:	e1a05000 	mov	r5, r0
   36a04:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   36a08:	e24dd008 	sub	sp, sp, #8
   36a0c:	e3500000 	cmp	r0, #0
   36a10:	0a00001d 	beq	36a8c <McManager::displayRefresh()+0x94>
   36a14:	e5903000 	ldr	r3, [r0]
   36a18:	e59f2158 	ldr	r2, [pc, #344]	; 36b78 <McManager::displayRefresh()+0x180>
   36a1c:	e5933058 	ldr	r3, [r3, #88]	; 0x58
   36a20:	e1530002 	cmp	r3, r2
   36a24:	1a00004d 	bne	36b60 <McManager::displayRefresh()+0x168>
   36a28:	e5901074 	ldr	r1, [r0, #116]	; 0x74
   36a2c:	e58d1004 	str	r1, [sp, #4]
   36a30:	ebffdca6 	bl	2dcd0 <millis>
   36a34:	e59d1004 	ldr	r1, [sp, #4]
   36a38:	e1a06000 	mov	r6, r0
   36a3c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   36a40:	eb001901 	bl	3ce4c <__udivsi3>
   36a44:	e5941774 	ldr	r1, [r4, #1908]	; 0x774
   36a48:	e1a02000 	mov	r2, r0
   36a4c:	e1a00006 	mov	r0, r6
   36a50:	ebffdcbb 	bl	2dd44 <isTimeout>
   36a54:	e3500000 	cmp	r0, #0
   36a58:	1a00000d 	bne	36a94 <McManager::displayRefresh()+0x9c>
   36a5c:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   36a60:	e5903000 	ldr	r3, [r0]
   36a64:	e59f2110 	ldr	r2, [pc, #272]	; 36b7c <McManager::displayRefresh()+0x184>
   36a68:	e5933020 	ldr	r3, [r3, #32]
   36a6c:	e1530002 	cmp	r3, r2
   36a70:	1a000038 	bne	36b58 <McManager::displayRefresh()+0x160>
   36a74:	ebffdc95 	bl	2dcd0 <millis>
   36a78:	e5942768 	ldr	r2, [r4, #1896]	; 0x768
   36a7c:	e5941778 	ldr	r1, [r4, #1912]	; 0x778
   36a80:	ebffdcaf 	bl	2dd44 <isTimeout>
   36a84:	e3500000 	cmp	r0, #0
   36a88:	1a00001a 	bne	36af8 <McManager::displayRefresh()+0x100>
   36a8c:	e28dd008 	add	sp, sp, #8
   36a90:	e8bd8070 	pop	{r4, r5, r6, pc}
   36a94:	ebffdc8d 	bl	2dcd0 <millis>
   36a98:	e5942760 	ldr	r2, [r4, #1888]	; 0x760
   36a9c:	e59fc0dc 	ldr	ip, [pc, #220]	; 36b80 <McManager::displayRefresh()+0x188>
   36aa0:	e5923000 	ldr	r3, [r2]
   36aa4:	e5840774 	str	r0, [r4, #1908]	; 0x774
   36aa8:	e5931060 	ldr	r1, [r3, #96]	; 0x60
   36aac:	e594376c 	ldr	r3, [r4, #1900]	; 0x76c
   36ab0:	e151000c 	cmp	r1, ip
   36ab4:	e2833001 	add	r3, r3, #1
   36ab8:	e584376c 	str	r3, [r4, #1900]	; 0x76c
   36abc:	1a00002a 	bne	36b6c <McManager::displayRefresh()+0x174>
   36ac0:	e5d2009c 	ldrb	r0, [r2, #156]	; 0x9c
   36ac4:	e3500000 	cmp	r0, #0
   36ac8:	1a000017 	bne	36b2c <McManager::displayRefresh()+0x134>
   36acc:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   36ad0:	e5903000 	ldr	r3, [r0]
   36ad4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   36ad8:	e12fff33 	blx	r3
   36adc:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   36ae0:	e3500000 	cmp	r0, #0
   36ae4:	0affffdd 	beq	36a60 <McManager::displayRefresh()+0x68>
   36ae8:	e5903000 	ldr	r3, [r0]
   36aec:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   36af0:	e12fff33 	blx	r3
   36af4:	eaffffd8 	b	36a5c <McManager::displayRefresh()+0x64>
   36af8:	e594076c 	ldr	r0, [r4, #1900]	; 0x76c
   36afc:	e5941768 	ldr	r1, [r4, #1896]	; 0x768
   36b00:	e0603280 	rsb	r3, r0, r0, lsl #5
   36b04:	e0800103 	add	r0, r0, r3, lsl #2
   36b08:	e1a00180 	lsl	r0, r0, #3
   36b0c:	eb0018ce 	bl	3ce4c <__udivsi3>
   36b10:	e3a03000 	mov	r3, #0
   36b14:	e5840770 	str	r0, [r4, #1904]	; 0x770
   36b18:	e584376c 	str	r3, [r4, #1900]	; 0x76c
   36b1c:	ebffdc6b 	bl	2dcd0 <millis>
   36b20:	e5840778 	str	r0, [r4, #1912]	; 0x778
   36b24:	e28dd008 	add	sp, sp, #8
   36b28:	e8bd8070 	pop	{r4, r5, r6, pc}
   36b2c:	e595000c 	ldr	r0, [r5, #12]
   36b30:	ebfff152 	bl	33080 <BusAccess::waitIsHeld()>
   36b34:	e3500000 	cmp	r0, #0
   36b38:	0affffe3 	beq	36acc <McManager::displayRefresh()+0xd4>
   36b3c:	e3a02000 	mov	r2, #0
   36b40:	e5951014 	ldr	r1, [r5, #20]
   36b44:	e595000c 	ldr	r0, [r5, #12]
   36b48:	ebffe9ff 	bl	3134c <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
   36b4c:	e3a03001 	mov	r3, #1
   36b50:	e5c43766 	strb	r3, [r4, #1894]	; 0x766
   36b54:	eaffffe0 	b	36adc <McManager::displayRefresh()+0xe4>
   36b58:	e12fff33 	blx	r3
   36b5c:	eaffffc4 	b	36a74 <McManager::displayRefresh()+0x7c>
   36b60:	e12fff33 	blx	r3
   36b64:	e1a01000 	mov	r1, r0
   36b68:	eaffffaf 	b	36a2c <McManager::displayRefresh()+0x34>
   36b6c:	e1a00002 	mov	r0, r2
   36b70:	e12fff31 	blx	r1
   36b74:	eaffffd2 	b	36ac4 <McManager::displayRefresh()+0xcc>
   36b78:	0003716c 	.word	0x0003716c
   36b7c:	00037150 	.word	0x00037150
   36b80:	00037174 	.word	0x00037174

00036b84 <McManager::service()>:
   36b84:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   36b88:	e24ddd4e 	sub	sp, sp, #4992	; 0x1380
   36b8c:	e2806a02 	add	r6, r0, #8192	; 0x2000
   36b90:	e24dd014 	sub	sp, sp, #20
   36b94:	e1a04000 	mov	r4, r0
   36b98:	ebffff96 	bl	369f8 <McManager::displayRefresh()>
   36b9c:	e5d65780 	ldrb	r5, [r6, #1920]	; 0x780
   36ba0:	e3550000 	cmp	r5, #0
   36ba4:	0a000018 	beq	36c0c <McManager::service()+0x88>
   36ba8:	e5963760 	ldr	r3, [r6, #1888]	; 0x760
   36bac:	e3530000 	cmp	r3, #0
   36bb0:	0a000015 	beq	36c0c <McManager::service()+0x88>
   36bb4:	ebffdc45 	bl	2dcd0 <millis>
   36bb8:	e596277c 	ldr	r2, [r6, #1916]	; 0x77c
   36bbc:	e5961784 	ldr	r1, [r6, #1924]	; 0x784
   36bc0:	ebffdc5f 	bl	2dd44 <isTimeout>
   36bc4:	e3500000 	cmp	r0, #0
   36bc8:	0a00000f 	beq	36c0c <McManager::service()+0x88>
   36bcc:	e596378c 	ldr	r3, [r6, #1932]	; 0x78c
   36bd0:	e5961788 	ldr	r1, [r6, #1928]	; 0x788
   36bd4:	e2832001 	add	r2, r3, #1
   36bd8:	e1530001 	cmp	r3, r1
   36bdc:	83a03000 	movhi	r3, #0
   36be0:	e5960760 	ldr	r0, [r6, #1888]	; 0x760
   36be4:	e586278c 	str	r2, [r6, #1932]	; 0x78c
   36be8:	e5902000 	ldr	r2, [r0]
   36bec:	8586378c 	strhi	r3, [r6, #1932]	; 0x78c
   36bf0:	e5927044 	ldr	r7, [r2, #68]	; 0x44
   36bf4:	e59f3058 	ldr	r3, [pc, #88]	; 36c54 <McManager::service()+0xd0>
   36bf8:	93a05000 	movls	r5, #0
   36bfc:	e1570003 	cmp	r7, r3
   36c00:	1a000004 	bne	36c18 <McManager::service()+0x94>
   36c04:	ebffdc31 	bl	2dcd0 <millis>
   36c08:	e5860784 	str	r0, [r6, #1924]	; 0x784
   36c0c:	e28ddd4e 	add	sp, sp, #4992	; 0x1380
   36c10:	e28dd014 	add	sp, sp, #20
   36c14:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   36c18:	e1a03005 	mov	r3, r5
   36c1c:	e59f2034 	ldr	r2, [pc, #52]	; 36c58 <McManager::service()+0xd4>
   36c20:	e28d1008 	add	r1, sp, #8
   36c24:	e12fff37 	blx	r7
   36c28:	e3500000 	cmp	r0, #0
   36c2c:	0afffff4 	beq	36c04 <McManager::service()+0x80>
   36c30:	e28d3008 	add	r3, sp, #8
   36c34:	e58d3000 	str	r3, [sp]
   36c38:	e58d0004 	str	r0, [sp, #4]
   36c3c:	e3a03000 	mov	r3, #0
   36c40:	e5940004 	ldr	r0, [r4, #4]
   36c44:	e59f2010 	ldr	r2, [pc, #16]	; 36c5c <McManager::service()+0xd8>
   36c48:	e59f1010 	ldr	r1, [pc, #16]	; 36c60 <McManager::service()+0xdc>
   36c4c:	ebffe408 	bl	2fc74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   36c50:	eaffffeb 	b	36c04 <McManager::service()+0x80>
   36c54:	00037154 	.word	0x00037154
   36c58:	00001388 	.word	0x00001388
   36c5c:	00047150 	.word	0x00047150
   36c60:	00046a04 	.word	0x00046a04

00036c64 <McManager::machineHeartbeat()>:
   36c64:	e2800a02 	add	r0, r0, #8192	; 0x2000
   36c68:	e5900760 	ldr	r0, [r0, #1888]	; 0x760
   36c6c:	e3500000 	cmp	r0, #0
   36c70:	012fff1e 	bxeq	lr
   36c74:	e5903000 	ldr	r3, [r0]
   36c78:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   36c7c:	e12fff13 	bx	r3

00036c80 <McManager::getDisplayRefreshRate()>:
   36c80:	e2800a02 	add	r0, r0, #8192	; 0x2000
   36c84:	e5900770 	ldr	r0, [r0, #1904]	; 0x770
   36c88:	e12fff1e 	bx	lr

00036c8c <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)>:
   36c8c:	e92d4070 	push	{r4, r5, r6, lr}
   36c90:	e1a04002 	mov	r4, r2
   36c94:	e2805a02 	add	r5, r0, #8192	; 0x2000
   36c98:	e5953730 	ldr	r3, [r5, #1840]	; 0x730
   36c9c:	e59f2038 	ldr	r2, [pc, #56]	; 36cdc <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)+0x50>
   36ca0:	e083c004 	add	ip, r3, r4
   36ca4:	e15c0002 	cmp	ip, r2
   36ca8:	9a000003 	bls	36cbc <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)+0x30>
   36cac:	e3a03000 	mov	r3, #0
   36cb0:	e1540002 	cmp	r4, r2
   36cb4:	e5853730 	str	r3, [r5, #1840]	; 0x730
   36cb8:	88bd8070 	pophi	{r4, r5, r6, pc}
   36cbc:	e280001c 	add	r0, r0, #28
   36cc0:	e1a02004 	mov	r2, r4
   36cc4:	e0800003 	add	r0, r0, r3
   36cc8:	ebffce8e 	bl	2a708 <memcpy>
   36ccc:	e5952730 	ldr	r2, [r5, #1840]	; 0x730
   36cd0:	e0822004 	add	r2, r2, r4
   36cd4:	e5852730 	str	r2, [r5, #1840]	; 0x730
   36cd8:	e8bd8070 	pop	{r4, r5, r6, pc}
   36cdc:	0000270f 	.word	0x0000270f

00036ce0 <McManager::hostSerialNumChAvailable()>:
   36ce0:	e2800a02 	add	r0, r0, #8192	; 0x2000
   36ce4:	e5900730 	ldr	r0, [r0, #1840]	; 0x730
   36ce8:	e12fff1e 	bx	lr

00036cec <McManager::hostSerialReadChars(unsigned char*, unsigned long)>:
   36cec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   36cf0:	e2807a02 	add	r7, r0, #8192	; 0x2000
   36cf4:	e5973730 	ldr	r3, [r7, #1840]	; 0x730
   36cf8:	e1520003 	cmp	r2, r3
   36cfc:	31a04002 	movcc	r4, r2
   36d00:	21a04003 	movcs	r4, r3
   36d04:	e16f3f14 	clz	r3, r4
   36d08:	e3510000 	cmp	r1, #0
   36d0c:	e1a032a3 	lsr	r3, r3, #5
   36d10:	11a05003 	movne	r5, r3
   36d14:	03a05001 	moveq	r5, #1
   36d18:	e3550000 	cmp	r5, #0
   36d1c:	13a04000 	movne	r4, #0
   36d20:	0a000001 	beq	36d2c <McManager::hostSerialReadChars(unsigned char*, unsigned long)+0x40>
   36d24:	e1a00004 	mov	r0, r4
   36d28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   36d2c:	e280601c 	add	r6, r0, #28
   36d30:	e1a02004 	mov	r2, r4
   36d34:	e1a00001 	mov	r0, r1
   36d38:	e1a01006 	mov	r1, r6
   36d3c:	ebffce71 	bl	2a708 <memcpy>
   36d40:	e5972730 	ldr	r2, [r7, #1840]	; 0x730
   36d44:	e1520004 	cmp	r2, r4
   36d48:	25875730 	strcs	r5, [r7, #1840]	; 0x730
   36d4c:	2afffff4 	bcs	36d24 <McManager::hostSerialReadChars(unsigned char*, unsigned long)+0x38>
   36d50:	e1a00006 	mov	r0, r6
   36d54:	e0422004 	sub	r2, r2, r4
   36d58:	e0861004 	add	r1, r6, r4
   36d5c:	ebffcc4c 	bl	29e94 <memmove>
   36d60:	e5973730 	ldr	r3, [r7, #1840]	; 0x730
   36d64:	e1a00004 	mov	r0, r4
   36d68:	e0433004 	sub	r3, r3, r4
   36d6c:	e5873730 	str	r3, [r7, #1840]	; 0x730
   36d70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00036d74 <McManager::sendKeyStrToTargetStatic(char const*)>:
   36d74:	e5900004 	ldr	r0, [r0, #4]
   36d78:	eaffe3ac 	b	2fc30 <CommandHandler::sendKeyStrToTargetStatic(char const*)>

00036d7c <McManager::targetReset()>:
   36d7c:	e5901014 	ldr	r1, [r0, #20]
   36d80:	e3e02000 	mvn	r2, #0
   36d84:	e590000c 	ldr	r0, [r0, #12]
   36d88:	eaffe93d 	b	31284 <BusAccess::targetReqReset(int, int)>

00036d8c <McManager::targetProgrammingStart(bool)>:
   36d8c:	e92d4070 	push	{r4, r5, r6, lr}
   36d90:	e1a04000 	mov	r4, r0
   36d94:	e5900010 	ldr	r0, [r0, #16]
   36d98:	e1a05001 	mov	r5, r1
   36d9c:	ebfff2b0 	bl	33864 <TargetProgrammer::numMemoryBlocks()>
   36da0:	e3500000 	cmp	r0, #0
   36da4:	0a000013 	beq	36df8 <McManager::targetProgrammingStart(bool)+0x6c>
   36da8:	e594000c 	ldr	r0, [r4, #12]
   36dac:	ebffeb8f 	bl	31bf0 <BusAccess::service()>
   36db0:	e594000c 	ldr	r0, [r4, #12]
   36db4:	ebffeb8d 	bl	31bf0 <BusAccess::service()>
   36db8:	e594000c 	ldr	r0, [r4, #12]
   36dbc:	ebffeb8b 	bl	31bf0 <BusAccess::service()>
   36dc0:	ebffbf17 	bl	26a24 <CLogger::Get()>
   36dc4:	e59f3044 	ldr	r3, [pc, #68]	; 36e10 <McManager::targetProgrammingStart(bool)+0x84>
   36dc8:	e3a02004 	mov	r2, #4
   36dcc:	e59f1040 	ldr	r1, [pc, #64]	; 36e14 <McManager::targetProgrammingStart(bool)+0x88>
   36dd0:	ebffbe55 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   36dd4:	e5941014 	ldr	r1, [r4, #20]
   36dd8:	e594000c 	ldr	r0, [r4, #12]
   36ddc:	e3a02002 	mov	r2, #2
   36de0:	ebffe959 	bl	3134c <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
   36de4:	e3a03001 	mov	r3, #1
   36de8:	e2844a02 	add	r4, r4, #8192	; 0x2000
   36dec:	e5c45765 	strb	r5, [r4, #1893]	; 0x765
   36df0:	e5c43764 	strb	r3, [r4, #1892]	; 0x764
   36df4:	e8bd8070 	pop	{r4, r5, r6, pc}
   36df8:	ebffbf09 	bl	26a24 <CLogger::Get()>
   36dfc:	e8bd4070 	pop	{r4, r5, r6, lr}
   36e00:	e3a02004 	mov	r2, #4
   36e04:	e59f300c 	ldr	r3, [pc, #12]	; 36e18 <McManager::targetProgrammingStart(bool)+0x8c>
   36e08:	e59f1004 	ldr	r1, [pc, #4]	; 36e14 <McManager::targetProgrammingStart(bool)+0x88>
   36e0c:	eaffbe46 	b	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   36e10:	00046a14 	.word	0x00046a14
   36e14:	00046b04 	.word	0x00046b04
   36e18:	00046a34 	.word	0x00046a34

00036e1c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   36e1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   36e20:	e24dd0e0 	sub	sp, sp, #224	; 0xe0
   36e24:	e1a05000 	mov	r5, r0
   36e28:	e1a08002 	mov	r8, r2
   36e2c:	e1a07003 	mov	r7, r3
   36e30:	e59f02b0 	ldr	r0, [pc, #688]	; 370e8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2cc>
   36e34:	e3a030c8 	mov	r3, #200	; 0xc8
   36e38:	e28d2014 	add	r2, sp, #20
   36e3c:	e1a06001 	mov	r6, r1
   36e40:	ebffdc88 	bl	2e068 <jsonGetValueForKey>
   36e44:	e2504000 	subs	r4, r0, #0
   36e48:	1a000003 	bne	36e5c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x40>
   36e4c:	e3a04000 	mov	r4, #0
   36e50:	e1a00004 	mov	r0, r4
   36e54:	e28dd0e0 	add	sp, sp, #224	; 0xe0
   36e58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   36e5c:	e3a03000 	mov	r3, #0
   36e60:	e59d20f8 	ldr	r2, [sp, #248]	; 0xf8
   36e64:	e59f1280 	ldr	r1, [pc, #640]	; 370ec <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2d0>
   36e68:	e5c23000 	strb	r3, [r2]
   36e6c:	e28d0014 	add	r0, sp, #20
   36e70:	ebffcc50 	bl	29fb8 <strcasecmp>
   36e74:	e3500000 	cmp	r0, #0
   36e78:	0a000055 	beq	36fd4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1b8>
   36e7c:	e59f126c 	ldr	r1, [pc, #620]	; 370f0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2d4>
   36e80:	e28d0014 	add	r0, sp, #20
   36e84:	ebffcc4b 	bl	29fb8 <strcasecmp>
   36e88:	e2501000 	subs	r1, r0, #0
   36e8c:	059f3260 	ldreq	r3, [pc, #608]	; 370f4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2d8>
   36e90:	0a000046 	beq	36fb0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x194>
   36e94:	e59f125c 	ldr	r1, [pc, #604]	; 370f8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2dc>
   36e98:	e28d0014 	add	r0, sp, #20
   36e9c:	ebffcc45 	bl	29fb8 <strcasecmp>
   36ea0:	e3500000 	cmp	r0, #0
   36ea4:	0a00003f 	beq	36fa8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x18c>
   36ea8:	e59f124c 	ldr	r1, [pc, #588]	; 370fc <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e0>
   36eac:	e28d0014 	add	r0, sp, #20
   36eb0:	ebffcc40 	bl	29fb8 <strcasecmp>
   36eb4:	e3500000 	cmp	r0, #0
   36eb8:	0a00003a 	beq	36fa8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x18c>
   36ebc:	e59f123c 	ldr	r1, [pc, #572]	; 37100 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e4>
   36ec0:	e28d0014 	add	r0, sp, #20
   36ec4:	ebffcc3b 	bl	29fb8 <strcasecmp>
   36ec8:	e3500000 	cmp	r0, #0
   36ecc:	0a000049 	beq	36ff8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1dc>
   36ed0:	e59f122c 	ldr	r1, [pc, #556]	; 37104 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e8>
   36ed4:	e28d0014 	add	r0, sp, #20
   36ed8:	ebffcc36 	bl	29fb8 <strcasecmp>
   36edc:	e3500000 	cmp	r0, #0
   36ee0:	0a00004f 	beq	37024 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x208>
   36ee4:	e59f121c 	ldr	r1, [pc, #540]	; 37108 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2ec>
   36ee8:	e28d0014 	add	r0, sp, #20
   36eec:	ebffcc31 	bl	29fb8 <strcasecmp>
   36ef0:	e3500000 	cmp	r0, #0
   36ef4:	0a00004a 	beq	37024 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x208>
   36ef8:	e59f120c 	ldr	r1, [pc, #524]	; 3710c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2f0>
   36efc:	e28d0014 	add	r0, sp, #20
   36f00:	ebffcc2c 	bl	29fb8 <strcasecmp>
   36f04:	e3500000 	cmp	r0, #0
   36f08:	0a000059 	beq	37074 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x258>
   36f0c:	e59f11fc 	ldr	r1, [pc, #508]	; 37110 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2f4>
   36f10:	e28d0014 	add	r0, sp, #20
   36f14:	ebffcc27 	bl	29fb8 <strcasecmp>
   36f18:	e3500000 	cmp	r0, #0
   36f1c:	0a00006c 	beq	370d4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2b8>
   36f20:	e59f11ec 	ldr	r1, [pc, #492]	; 37114 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2f8>
   36f24:	e28d0014 	add	r0, sp, #20
   36f28:	ebffcc22 	bl	29fb8 <strcasecmp>
   36f2c:	e2501000 	subs	r1, r0, #0
   36f30:	1affffc5 	bne	36e4c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36f34:	e3a02006 	mov	r2, #6
   36f38:	e28d000c 	add	r0, sp, #12
   36f3c:	e58d1008 	str	r1, [sp, #8]
   36f40:	ebffcba7 	bl	29de4 <memset>
   36f44:	e3a0200a 	mov	r2, #10
   36f48:	e28d1008 	add	r1, sp, #8
   36f4c:	e1a00008 	mov	r0, r8
   36f50:	ebffcd19 	bl	2a3bc <strtoul>
   36f54:	e3a0200a 	mov	r2, #10
   36f58:	e28d1008 	add	r1, sp, #8
   36f5c:	e59d0008 	ldr	r0, [sp, #8]
   36f60:	ebffcd15 	bl	2a3bc <strtoul>
   36f64:	e1a03000 	mov	r3, r0
   36f68:	e3a0200a 	mov	r2, #10
   36f6c:	e59d0008 	ldr	r0, [sp, #8]
   36f70:	e28d1008 	add	r1, sp, #8
   36f74:	e2855a02 	add	r5, r5, #8192	; 0x2000
   36f78:	e5cd300c 	strb	r3, [sp, #12]
   36f7c:	ebffcd0e 	bl	2a3bc <strtoul>
   36f80:	e5953760 	ldr	r3, [r5, #1888]	; 0x760
   36f84:	e3530000 	cmp	r3, #0
   36f88:	0affffb0 	beq	36e50 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   36f8c:	e593c000 	ldr	ip, [r3]
   36f90:	e6ef1070 	uxtb	r1, r0
   36f94:	e59c5034 	ldr	r5, [ip, #52]	; 0x34
   36f98:	e1a00003 	mov	r0, r3
   36f9c:	e28d200c 	add	r2, sp, #12
   36fa0:	e12fff35 	blx	r5
   36fa4:	eaffffa9 	b	36e50 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   36fa8:	e3a01001 	mov	r1, #1
   36fac:	e59f3140 	ldr	r3, [pc, #320]	; 370f4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2d8>
   36fb0:	e5930000 	ldr	r0, [r3]
   36fb4:	ebffff74 	bl	36d8c <McManager::targetProgrammingStart(bool)>
   36fb8:	e59d20fc 	ldr	r2, [sp, #252]	; 0xfc
   36fbc:	e59f1154 	ldr	r1, [pc, #340]	; 37118 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2fc>
   36fc0:	e59d00f8 	ldr	r0, [sp, #248]	; 0xf8
   36fc4:	ebffdb7a 	bl	2ddb4 <strlcpy>
   36fc8:	e1a00004 	mov	r0, r4
   36fcc:	e28dd0e0 	add	sp, sp, #224	; 0xe0
   36fd0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   36fd4:	e5950010 	ldr	r0, [r5, #16]
   36fd8:	ebfff1d4 	bl	33730 <TargetProgrammer::clear()>
   36fdc:	e59d20fc 	ldr	r2, [sp, #252]	; 0xfc
   36fe0:	e59f1130 	ldr	r1, [pc, #304]	; 37118 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2fc>
   36fe4:	e59d00f8 	ldr	r0, [sp, #248]	; 0xf8
   36fe8:	ebffdb71 	bl	2ddb4 <strlcpy>
   36fec:	e1a00004 	mov	r0, r4
   36ff0:	e28dd0e0 	add	sp, sp, #224	; 0xe0
   36ff4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   36ff8:	e59f30f4 	ldr	r3, [pc, #244]	; 370f4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2d8>
   36ffc:	e3e02000 	mvn	r2, #0
   37000:	e5933000 	ldr	r3, [r3]
   37004:	e5931014 	ldr	r1, [r3, #20]
   37008:	e593000c 	ldr	r0, [r3, #12]
   3700c:	ebffe89c 	bl	31284 <BusAccess::targetReqReset(int, int)>
   37010:	e59d20fc 	ldr	r2, [sp, #252]	; 0xfc
   37014:	e59f10fc 	ldr	r1, [pc, #252]	; 37118 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2fc>
   37018:	e59d00f8 	ldr	r0, [sp, #248]	; 0xf8
   3701c:	ebffdb64 	bl	2ddb4 <strlcpy>
   37020:	eaffff8a 	b	36e50 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   37024:	ebffbe7e 	bl	26a24 <CLogger::Get()>
   37028:	e59f30ec 	ldr	r3, [pc, #236]	; 3711c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x300>
   3702c:	e3a02004 	mov	r2, #4
   37030:	e59f10e8 	ldr	r1, [pc, #232]	; 37120 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x304>
   37034:	e58d6004 	str	r6, [sp, #4]
   37038:	e58d7000 	str	r7, [sp]
   3703c:	ebffbdba 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37040:	e59f30ac 	ldr	r3, [pc, #172]	; 370f4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2d8>
   37044:	e5933000 	ldr	r3, [r3]
   37048:	e2833a02 	add	r3, r3, #8192	; 0x2000
   3704c:	e5930760 	ldr	r0, [r3, #1888]	; 0x760
   37050:	e3500000 	cmp	r0, #0
   37054:	0affffd7 	beq	36fb8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x19c>
   37058:	e590c000 	ldr	ip, [r0]
   3705c:	e1a03007 	mov	r3, r7
   37060:	e1a02008 	mov	r2, r8
   37064:	e1a01006 	mov	r1, r6
   37068:	e59c5038 	ldr	r5, [ip, #56]	; 0x38
   3706c:	e12fff35 	blx	r5
   37070:	eaffffd0 	b	36fb8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x19c>
   37074:	e59f30a8 	ldr	r3, [pc, #168]	; 37124 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x308>
   37078:	e2872001 	add	r2, r7, #1
   3707c:	e59f60a4 	ldr	r6, [pc, #164]	; 37128 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30c>
   37080:	e1520003 	cmp	r2, r3
   37084:	21a02003 	movcs	r2, r3
   37088:	e1a01008 	mov	r1, r8
   3708c:	e1a00006 	mov	r0, r6
   37090:	ebffdb47 	bl	2ddb4 <strlcpy>
   37094:	ebffbe62 	bl	26a24 <CLogger::Get()>
   37098:	e3a02004 	mov	r2, #4
   3709c:	e59f3088 	ldr	r3, [pc, #136]	; 3712c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x310>
   370a0:	e59f1078 	ldr	r1, [pc, #120]	; 37120 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x304>
   370a4:	e58d6000 	str	r6, [sp]
   370a8:	ebffbd9f 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   370ac:	e1a01006 	mov	r1, r6
   370b0:	e1a00005 	mov	r0, r5
   370b4:	ebfffda5 	bl	36750 <McManager::setupMachine(char const*)>
   370b8:	e3500000 	cmp	r0, #0
   370bc:	1affffbd 	bne	36fb8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x19c>
   370c0:	e59d20fc 	ldr	r2, [sp, #252]	; 0xfc
   370c4:	e59f1064 	ldr	r1, [pc, #100]	; 37130 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x314>
   370c8:	e59d00f8 	ldr	r0, [sp, #248]	; 0xf8
   370cc:	ebffdb38 	bl	2ddb4 <strlcpy>
   370d0:	eaffff5e 	b	36e50 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   370d4:	e1a02007 	mov	r2, r7
   370d8:	e1a01008 	mov	r1, r8
   370dc:	e1a00005 	mov	r0, r5
   370e0:	ebfffee9 	bl	36c8c <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)>
   370e4:	eaffff59 	b	36e50 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   370e8:	0003e8f0 	.word	0x0003e8f0
   370ec:	00046a58 	.word	0x00046a58
   370f0:	00046a64 	.word	0x00046a64
   370f4:	0004dde8 	.word	0x0004dde8
   370f8:	00046a74 	.word	0x00046a74
   370fc:	00046a84 	.word	0x00046a84
   37100:	00046a94 	.word	0x00046a94
   37104:	00046aa0 	.word	0x00046aa0
   37108:	00046aac 	.word	0x00046aac
   3710c:	00046ab8 	.word	0x00046ab8
   37110:	00046af4 	.word	0x00046af4
   37114:	00046afc 	.word	0x00046afc
   37118:	00046668 	.word	0x00046668
   3711c:	00046ac4 	.word	0x00046ac4
   37120:	00046b04 	.word	0x00046b04
   37124:	00002710 	.word	0x00002710
   37128:	0004e250 	.word	0x0004e250
   3712c:	00046ae4 	.word	0x00046ae4
   37130:	0004661c 	.word	0x0004661c

00037134 <McManager::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   37134:	e3500000 	cmp	r0, #0
   37138:	012fff1e 	bxeq	lr
   3713c:	eaffff36 	b	36e1c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

00037140 <McManager::targetExec()>:
   37140:	eaffff0d 	b	36d7c <McManager::targetReset()>

00037144 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   37144:	e3510004 	cmp	r1, #4
   37148:	112fff1e 	bxne	lr
   3714c:	eafffc3d 	b	36248 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.0]>

00037150 <McBase::service()>:
   37150:	e12fff1e 	bx	lr

00037154 <McBase::getMirrorChanges(unsigned char*, unsigned long, bool)>:
   37154:	e3a00000 	mov	r0, #0
   37158:	e12fff1e 	bx	lr

0003715c <McBase::isMonitorIORQEnabled()>:
   3715c:	e5d000a8 	ldrb	r0, [r0, #168]	; 0xa8
   37160:	e12fff1e 	bx	lr

00037164 <McBase::isMonitorMREQEnabled()>:
   37164:	e5d000a9 	ldrb	r0, [r0, #169]	; 0xa9
   37168:	e12fff1e 	bx	lr

0003716c <McBase::getDisplayRefreshRatePerSec()>:
   3716c:	e5900074 	ldr	r0, [r0, #116]	; 0x74
   37170:	e12fff1e 	bx	lr

00037174 <McBase::isDisplayMemoryMapped()>:
   37174:	e5d0009c 	ldrb	r0, [r0, #156]	; 0x9c
   37178:	e12fff1e 	bx	lr

0003717c <McTRS80::disableMachine()>:
   3717c:	e12fff1e 	bx	lr

00037180 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION)>:
   37180:	e12fff1e 	bx	lr

00037184 <McTRS80::keyHandler(unsigned char, unsigned char const*)>:
   37184:	e3a03000 	mov	r3, #0
   37188:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3718c:	e24dd00c 	sub	sp, sp, #12
   37190:	e242e001 	sub	lr, r2, #1
   37194:	e1a05003 	mov	r5, r3
   37198:	e1a0c003 	mov	ip, r3
   3719c:	e1a06003 	mov	r6, r3
   371a0:	e1a04003 	mov	r4, r3
   371a4:	e1a07003 	mov	r7, r3
   371a8:	e3a08001 	mov	r8, #1
   371ac:	e3e0907f 	mvn	r9, #127	; 0x7f
   371b0:	e2011002 	and	r1, r1, #2
   371b4:	e2822005 	add	r2, r2, #5
   371b8:	e58d3000 	str	r3, [sp]
   371bc:	e58d3004 	str	r3, [sp, #4]
   371c0:	ea000008 	b	371e8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x64>
   371c4:	e2433003 	sub	r3, r3, #3
   371c8:	e28da008 	add	sl, sp, #8
   371cc:	e08ab1c3 	add	fp, sl, r3, asr #3
   371d0:	e55ba008 	ldrb	sl, [fp, #-8]
   371d4:	e2033007 	and	r3, r3, #7
   371d8:	e18a3318 	orr	r3, sl, r8, lsl r3
   371dc:	e54b3008 	strb	r3, [fp, #-8]
   371e0:	e15e0002 	cmp	lr, r2
   371e4:	0a000016 	beq	37244 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xc0>
   371e8:	e5fe3001 	ldrb	r3, [lr, #1]!
   371ec:	e243a004 	sub	sl, r3, #4
   371f0:	e35a0019 	cmp	sl, #25
   371f4:	9afffff2 	bls	371c4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x40>
   371f8:	e353001f 	cmp	r3, #31
   371fc:	0a000033 	beq	372d0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x14c>
   37200:	e3530023 	cmp	r3, #35	; 0x23
   37204:	0a000038 	beq	372ec <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x168>
   37208:	e3530024 	cmp	r3, #36	; 0x24
   3720c:	0a000041 	beq	37318 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x194>
   37210:	e3530025 	cmp	r3, #37	; 0x25
   37214:	0a000045 	beq	37330 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1ac>
   37218:	e3530026 	cmp	r3, #38	; 0x26
   3721c:	1a000049 	bne	37348 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1c4>
   37220:	e3510000 	cmp	r1, #0
   37224:	0a000033 	beq	372f8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x174>
   37228:	e5dd3005 	ldrb	r3, [sp, #5]
   3722c:	e15e0002 	cmp	lr, r2
   37230:	e3833001 	orr	r3, r3, #1
   37234:	e3a06001 	mov	r6, #1
   37238:	e3844001 	orr	r4, r4, #1
   3723c:	e5cd3005 	strb	r3, [sp, #5]
   37240:	1affffe8 	bne	371e8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x64>
   37244:	e3a0e001 	mov	lr, #1
   37248:	e3560000 	cmp	r6, #0
   3724c:	15cd4007 	strbne	r4, [sp, #7]
   37250:	e3550000 	cmp	r5, #0
   37254:	15cdc006 	strbne	ip, [sp, #6]
   37258:	e3570000 	cmp	r7, #0
   3725c:	15dd3007 	ldrbne	r3, [sp, #7]
   37260:	e59f72c4 	ldr	r7, [pc, #708]	; 3752c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3a8>
   37264:	13c33003 	bicne	r3, r3, #3
   37268:	e2805e4e 	add	r5, r0, #1248	; 0x4e0
   3726c:	e2806e5e 	add	r6, r0, #1504	; 0x5e0
   37270:	15cd3007 	strbne	r3, [sp, #7]
   37274:	e0477000 	sub	r7, r7, r0
   37278:	e2855005 	add	r5, r5, #5
   3727c:	e2866005 	add	r6, r6, #5
   37280:	e3a01000 	mov	r1, #0
   37284:	e1a0200d 	mov	r2, sp
   37288:	e1a03001 	mov	r3, r1
   3728c:	e087c005 	add	ip, r7, r5
   37290:	e01c431e 	ands	r4, ip, lr, lsl r3
   37294:	15d24000 	ldrbne	r4, [r2]
   37298:	e2833001 	add	r3, r3, #1
   3729c:	11811004 	orrne	r1, r1, r4
   372a0:	e3530008 	cmp	r3, #8
   372a4:	e2822001 	add	r2, r2, #1
   372a8:	1afffff8 	bne	37290 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x10c>
   372ac:	e5d53000 	ldrb	r3, [r5]
   372b0:	e2855001 	add	r5, r5, #1
   372b4:	e1530001 	cmp	r3, r1
   372b8:	15451001 	strbne	r1, [r5, #-1]
   372bc:	15c0e5e5 	strbne	lr, [r0, #1509]	; 0x5e5
   372c0:	e1550006 	cmp	r5, r6
   372c4:	1affffed 	bne	37280 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xfc>
   372c8:	e28dd00c 	add	sp, sp, #12
   372cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   372d0:	e3510000 	cmp	r1, #0
   372d4:	0a000007 	beq	372f8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x174>
   372d8:	e3a07001 	mov	r7, #1
   372dc:	e5dd3000 	ldrb	r3, [sp]
   372e0:	e1833007 	orr	r3, r3, r7
   372e4:	e5cd3000 	strb	r3, [sp]
   372e8:	eaffffbc 	b	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   372ec:	e3510000 	cmp	r1, #0
   372f0:	13a07001 	movne	r7, #1
   372f4:	1affffb9 	bne	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   372f8:	e243301d 	sub	r3, r3, #29
   372fc:	e28da008 	add	sl, sp, #8
   37300:	e08ab1c3 	add	fp, sl, r3, asr #3
   37304:	e55ba004 	ldrb	sl, [fp, #-4]
   37308:	e2033007 	and	r3, r3, #7
   3730c:	e18a3318 	orr	r3, sl, r8, lsl r3
   37310:	e54b3004 	strb	r3, [fp, #-4]
   37314:	eaffffb1 	b	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37318:	e3510000 	cmp	r1, #0
   3731c:	0afffff5 	beq	372f8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x174>
   37320:	e5dd3004 	ldrb	r3, [sp, #4]
   37324:	e3833040 	orr	r3, r3, #64	; 0x40
   37328:	e5cd3004 	strb	r3, [sp, #4]
   3732c:	eaffffab 	b	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37330:	e3510000 	cmp	r1, #0
   37334:	0affffef 	beq	372f8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x174>
   37338:	e5dd3005 	ldrb	r3, [sp, #5]
   3733c:	e3833004 	orr	r3, r3, #4
   37340:	e5cd3005 	strb	r3, [sp, #5]
   37344:	eaffffa5 	b	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37348:	e3530027 	cmp	r3, #39	; 0x27
   3734c:	1a000005 	bne	37368 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1e4>
   37350:	e3510000 	cmp	r1, #0
   37354:	1a00003d 	bne	37450 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2cc>
   37358:	e5dd3004 	ldrb	r3, [sp, #4]
   3735c:	e3833001 	orr	r3, r3, #1
   37360:	e5cd3004 	strb	r3, [sp, #4]
   37364:	eaffff9d 	b	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37368:	e243a01e 	sub	sl, r3, #30
   3736c:	e35a0008 	cmp	sl, #8
   37370:	9affffe0 	bls	372f8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x174>
   37374:	e3530033 	cmp	r3, #51	; 0x33
   37378:	0a000042 	beq	37488 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x304>
   3737c:	e3530034 	cmp	r3, #52	; 0x34
   37380:	0a000038 	beq	37468 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2e4>
   37384:	e3530036 	cmp	r3, #54	; 0x36
   37388:	0a000045 	beq	374a4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x320>
   3738c:	e3530037 	cmp	r3, #55	; 0x37
   37390:	0a00004d 	beq	374cc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x348>
   37394:	e353002e 	cmp	r3, #46	; 0x2e
   37398:	0a00004f 	beq	374dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x358>
   3739c:	e353002d 	cmp	r3, #45	; 0x2d
   373a0:	0a000043 	beq	374b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x330>
   373a4:	e3530038 	cmp	r3, #56	; 0x38
   373a8:	0a00005b 	beq	3751c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x398>
   373ac:	e3530028 	cmp	r3, #40	; 0x28
   373b0:	03a05001 	moveq	r5, #1
   373b4:	038cc001 	orreq	ip, ip, #1
   373b8:	0affff88 	beq	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   373bc:	e353002a 	cmp	r3, #42	; 0x2a
   373c0:	0a000052 	beq	37510 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x38c>
   373c4:	e3530029 	cmp	r3, #41	; 0x29
   373c8:	03a05001 	moveq	r5, #1
   373cc:	038cc004 	orreq	ip, ip, #4
   373d0:	0affff82 	beq	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   373d4:	e3530052 	cmp	r3, #82	; 0x52
   373d8:	03a05001 	moveq	r5, #1
   373dc:	038cc008 	orreq	ip, ip, #8
   373e0:	0affff7e 	beq	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   373e4:	e3530051 	cmp	r3, #81	; 0x51
   373e8:	03a05001 	moveq	r5, #1
   373ec:	038cc010 	orreq	ip, ip, #16
   373f0:	0affff7a 	beq	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   373f4:	e3530050 	cmp	r3, #80	; 0x50
   373f8:	0a000044 	beq	37510 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x38c>
   373fc:	e353004f 	cmp	r3, #79	; 0x4f
   37400:	03a05001 	moveq	r5, #1
   37404:	038cc040 	orreq	ip, ip, #64	; 0x40
   37408:	0affff74 	beq	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   3740c:	e353002c 	cmp	r3, #44	; 0x2c
   37410:	03a05001 	moveq	r5, #1
   37414:	038cc080 	orreq	ip, ip, #128	; 0x80
   37418:	0affff70 	beq	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   3741c:	e353003a 	cmp	r3, #58	; 0x3a
   37420:	03a05001 	moveq	r5, #1
   37424:	038cc002 	orreq	ip, ip, #2
   37428:	0affff6c 	beq	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   3742c:	e35300e1 	cmp	r3, #225	; 0xe1
   37430:	03a06001 	moveq	r6, #1
   37434:	03844001 	orreq	r4, r4, #1
   37438:	0affff68 	beq	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   3743c:	e35300e5 	cmp	r3, #229	; 0xe5
   37440:	1a00002d 	bne	374fc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x378>
   37444:	e3a06001 	mov	r6, #1
   37448:	e3844002 	orr	r4, r4, #2
   3744c:	eaffff63 	b	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37450:	e5dd3005 	ldrb	r3, [sp, #5]
   37454:	e3a06001 	mov	r6, #1
   37458:	e3833002 	orr	r3, r3, #2
   3745c:	e3844001 	orr	r4, r4, #1
   37460:	e5cd3005 	strb	r3, [sp, #5]
   37464:	eaffff5d 	b	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37468:	e3510000 	cmp	r1, #0
   3746c:	0affff5b 	beq	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37470:	e5dd3004 	ldrb	r3, [sp, #4]
   37474:	e3a06001 	mov	r6, #1
   37478:	e3833004 	orr	r3, r3, #4
   3747c:	e3844001 	orr	r4, r4, #1
   37480:	e5cd3004 	strb	r3, [sp, #4]
   37484:	eaffff55 	b	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37488:	e5dd3005 	ldrb	r3, [sp, #5]
   3748c:	e3510000 	cmp	r1, #0
   37490:	03833008 	orreq	r3, r3, #8
   37494:	13833004 	orrne	r3, r3, #4
   37498:	e3a07001 	mov	r7, #1
   3749c:	e5cd3005 	strb	r3, [sp, #5]
   374a0:	eaffff4e 	b	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   374a4:	e5dd3005 	ldrb	r3, [sp, #5]
   374a8:	e3833010 	orr	r3, r3, #16
   374ac:	e5cd3005 	strb	r3, [sp, #5]
   374b0:	eaffff4a 	b	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   374b4:	e3510000 	cmp	r1, #0
   374b8:	05dd3005 	ldrbeq	r3, [sp, #5]
   374bc:	03a07001 	moveq	r7, #1
   374c0:	03833020 	orreq	r3, r3, #32
   374c4:	05cd3005 	strbeq	r3, [sp, #5]
   374c8:	eaffff44 	b	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   374cc:	e5dd3005 	ldrb	r3, [sp, #5]
   374d0:	e3833040 	orr	r3, r3, #64	; 0x40
   374d4:	e5cd3005 	strb	r3, [sp, #5]
   374d8:	eaffff40 	b	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   374dc:	e5dd3005 	ldrb	r3, [sp, #5]
   374e0:	e3510000 	cmp	r1, #0
   374e4:	03833020 	orreq	r3, r3, #32
   374e8:	13833008 	orrne	r3, r3, #8
   374ec:	e3a06001 	mov	r6, #1
   374f0:	e3844001 	orr	r4, r4, #1
   374f4:	e5cd3005 	strb	r3, [sp, #5]
   374f8:	eaffff38 	b	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   374fc:	e20330fb 	and	r3, r3, #251	; 0xfb
   37500:	e35300e0 	cmp	r3, #224	; 0xe0
   37504:	03a06001 	moveq	r6, #1
   37508:	03844010 	orreq	r4, r4, #16
   3750c:	eaffff33 	b	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37510:	e3a05001 	mov	r5, #1
   37514:	e38cc020 	orr	ip, ip, #32
   37518:	eaffff30 	b	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   3751c:	e5dd3005 	ldrb	r3, [sp, #5]
   37520:	e1893003 	orr	r3, r9, r3
   37524:	e5cd3005 	strb	r3, [sp, #5]
   37528:	eaffff2c 	b	371e0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   3752c:	fffffb1b 	.word	0xfffffb1b

00037530 <McTRS80::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   37530:	e2033009 	and	r3, r3, #9
   37534:	e3530009 	cmp	r3, #9
   37538:	03510013 	cmpeq	r1, #19
   3753c:	03a030ff 	moveq	r3, #255	; 0xff
   37540:	059d2000 	ldreq	r2, [sp]
   37544:	05823000 	streq	r3, [r2]
   37548:	e12fff1e 	bx	lr

0003754c <McTRS80::enableMachine()>:
   3754c:	e3a03000 	mov	r3, #0
   37550:	e92d4030 	push	{r4, r5, lr}
   37554:	e59f5044 	ldr	r5, [pc, #68]	; 375a0 <McTRS80::enableMachine()+0x54>
   37558:	e24dd014 	sub	sp, sp, #20
   3755c:	e5c034e4 	strb	r3, [r0, #1252]	; 0x4e4
   37560:	e5c035e5 	strb	r3, [r0, #1509]	; 0x5e5
   37564:	e3a00064 	mov	r0, #100	; 0x64
   37568:	e5954404 	ldr	r4, [r5, #1028]	; 0x404
   3756c:	ebffd9de 	bl	2dcec <microsDelay>
   37570:	e5955404 	ldr	r5, [r5, #1028]	; 0x404
   37574:	ebffbd2a 	bl	26a24 <CLogger::Get()>
   37578:	e0453004 	sub	r3, r5, r4
   3757c:	e58d3008 	str	r3, [sp, #8]
   37580:	e3a02004 	mov	r2, #4
   37584:	e59f3018 	ldr	r3, [pc, #24]	; 375a4 <McTRS80::enableMachine()+0x58>
   37588:	e59f1018 	ldr	r1, [pc, #24]	; 375a8 <McTRS80::enableMachine()+0x5c>
   3758c:	e58d5004 	str	r5, [sp, #4]
   37590:	e58d4000 	str	r4, [sp]
   37594:	ebffbc64 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37598:	e28dd014 	add	sp, sp, #20
   3759c:	e8bd8030 	pop	{r4, r5, pc}
   375a0:	2000b000 	.word	0x2000b000
   375a4:	00046b10 	.word	0x00046b10
   375a8:	00046b2c 	.word	0x00046b2c

000375ac <McTRS80::fileHandler(char const*, unsigned char const*, int)>:
   375ac:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   375b0:	e1a05001 	mov	r5, r1
   375b4:	e24dd094 	sub	sp, sp, #148	; 0x94
   375b8:	e1a08002 	mov	r8, r2
   375bc:	e1a07003 	mov	r7, r3
   375c0:	e1a04000 	mov	r4, r0
   375c4:	ebffbd16 	bl	26a24 <CLogger::Get()>
   375c8:	e3a02004 	mov	r2, #4
   375cc:	e59f3168 	ldr	r3, [pc, #360]	; 3773c <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x190>
   375d0:	e59f1168 	ldr	r1, [pc, #360]	; 37740 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x194>
   375d4:	e58d5000 	str	r5, [sp]
   375d8:	ebffbc53 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   375dc:	e1a01005 	mov	r1, r5
   375e0:	e3a03064 	mov	r3, #100	; 0x64
   375e4:	e59f0158 	ldr	r0, [pc, #344]	; 37744 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x198>
   375e8:	e28d2028 	add	r2, sp, #40	; 0x28
   375ec:	ebffda9d 	bl	2e068 <jsonGetValueForKey>
   375f0:	e2506000 	subs	r6, r0, #0
   375f4:	0a000041 	beq	37700 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x154>
   375f8:	e59f1148 	ldr	r1, [pc, #328]	; 37748 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x19c>
   375fc:	e28d0028 	add	r0, sp, #40	; 0x28
   37600:	ebffcb1d 	bl	2a27c <strstr>
   37604:	e59f3140 	ldr	r3, [pc, #320]	; 3774c <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1a0>
   37608:	e3500000 	cmp	r0, #0
   3760c:	01a00003 	moveq	r0, r3
   37610:	e59f1138 	ldr	r1, [pc, #312]	; 37750 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1a4>
   37614:	ebffca67 	bl	29fb8 <strcasecmp>
   37618:	e3500000 	cmp	r0, #0
   3761c:	0a000019 	beq	37688 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0xdc>
   37620:	e1a01005 	mov	r1, r5
   37624:	e3a0301e 	mov	r3, #30
   37628:	e59f0124 	ldr	r0, [pc, #292]	; 37754 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1a8>
   3762c:	e28d2008 	add	r2, sp, #8
   37630:	ebffda8c 	bl	2e068 <jsonGetValueForKey>
   37634:	e2505000 	subs	r5, r0, #0
   37638:	01a09005 	moveq	r9, r5
   3763c:	1a000037 	bne	37720 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x174>
   37640:	ebffbcf7 	bl	26a24 <CLogger::Get()>
   37644:	e3a02004 	mov	r2, #4
   37648:	e59f10f0 	ldr	r1, [pc, #240]	; 37740 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x194>
   3764c:	e59f3104 	ldr	r3, [pc, #260]	; 37758 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1ac>
   37650:	e58d7004 	str	r7, [sp, #4]
   37654:	e58d9000 	str	r9, [sp]
   37658:	ebffbc33 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3765c:	e5943000 	ldr	r3, [r4]
   37660:	e1a00004 	mov	r0, r4
   37664:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   37668:	e12fff33 	blx	r3
   3766c:	e1a03007 	mov	r3, r7
   37670:	e1a02008 	mov	r2, r8
   37674:	e1a01005 	mov	r1, r5
   37678:	ebfff040 	bl	33780 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   3767c:	e1a00006 	mov	r0, r6
   37680:	e28dd094 	add	sp, sp, #148	; 0x94
   37684:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   37688:	e28d0008 	add	r0, sp, #8
   3768c:	eb000eb9 	bl	3b178 <McTRS80CmdFormat::McTRS80CmdFormat()>
   37690:	ebffbce3 	bl	26a24 <CLogger::Get()>
   37694:	e3a02004 	mov	r2, #4
   37698:	e59f10a0 	ldr	r1, [pc, #160]	; 37740 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x194>
   3769c:	e59f30b8 	ldr	r3, [pc, #184]	; 3775c <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1b0>
   376a0:	e58d7000 	str	r7, [sp]
   376a4:	ebffbc20 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   376a8:	e5943000 	ldr	r3, [r4]
   376ac:	e1a00004 	mov	r0, r4
   376b0:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   376b4:	e12fff33 	blx	r3
   376b8:	e5943000 	ldr	r3, [r4]
   376bc:	e1a00004 	mov	r0, r4
   376c0:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   376c4:	e12fff33 	blx	r3
   376c8:	e5943000 	ldr	r3, [r4]
   376cc:	e1a00004 	mov	r0, r4
   376d0:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   376d4:	e12fff33 	blx	r3
   376d8:	e59f2080 	ldr	r2, [pc, #128]	; 37760 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1b4>
   376dc:	e1a03000 	mov	r3, r0
   376e0:	e59f107c 	ldr	r1, [pc, #124]	; 37764 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1b8>
   376e4:	e28d0008 	add	r0, sp, #8
   376e8:	e58d7004 	str	r7, [sp, #4]
   376ec:	e58d8000 	str	r8, [sp]
   376f0:	eb000ea1 	bl	3b17c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>
   376f4:	e1a00006 	mov	r0, r6
   376f8:	e28dd094 	add	sp, sp, #148	; 0x94
   376fc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   37700:	ebffbcc7 	bl	26a24 <CLogger::Get()>
   37704:	e3a02004 	mov	r2, #4
   37708:	e59f3058 	ldr	r3, [pc, #88]	; 37768 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1bc>
   3770c:	e59f102c 	ldr	r1, [pc, #44]	; 37740 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x194>
   37710:	ebffbc05 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37714:	e1a00006 	mov	r0, r6
   37718:	e28dd094 	add	sp, sp, #148	; 0x94
   3771c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   37720:	e3a02010 	mov	r2, #16
   37724:	e3a01000 	mov	r1, #0
   37728:	e28d0008 	add	r0, sp, #8
   3772c:	ebffcb22 	bl	2a3bc <strtoul>
   37730:	e6ff9070 	uxth	r9, r0
   37734:	e1a05009 	mov	r5, r9
   37738:	eaffffc0 	b	37640 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x94>
   3773c:	00046b34 	.word	0x00046b34
   37740:	00046b2c 	.word	0x00046b2c
   37744:	00045cd4 	.word	0x00045cd4
   37748:	0003e61c 	.word	0x0003e61c
   3774c:	00047150 	.word	0x00047150
   37750:	00046b60 	.word	0x00046b60
   37754:	00046b8c 	.word	0x00046b8c
   37758:	00046b98 	.word	0x00046b98
   3775c:	00046b68 	.word	0x00046b68
   37760:	000338e0 	.word	0x000338e0
   37764:	00033848 	.word	0x00033848
   37768:	00046b44 	.word	0x00046b44

0003776c <McTRS80::McTRS80(McManager&, BusAccess&)>:
   3776c:	e3a03001 	mov	r3, #1
   37770:	e92d4010 	push	{r4, lr}
   37774:	e1a04000 	mov	r4, r0
   37778:	e24dd008 	sub	sp, sp, #8
   3777c:	e58d3000 	str	r3, [sp]
   37780:	e59f3040 	ldr	r3, [pc, #64]	; 377c8 <McTRS80::McTRS80(McManager&, BusAccess&)+0x5c>
   37784:	eb00052a 	bl	38c34 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)>
   37788:	e1a03004 	mov	r3, r4
   3778c:	e3a01000 	mov	r1, #0
   37790:	e59f0034 	ldr	r0, [pc, #52]	; 377cc <McTRS80::McTRS80(McManager&, BusAccess&)+0x60>
   37794:	e2842e5e 	add	r2, r4, #1504	; 0x5e0
   37798:	e48304e0 	str	r0, [r3], #1248	; 0x4e0
   3779c:	e2833004 	add	r3, r3, #4
   377a0:	e2822004 	add	r2, r2, #4
   377a4:	e5e31001 	strb	r1, [r3, #1]!
   377a8:	e1530002 	cmp	r3, r2
   377ac:	1afffffc 	bne	377a4 <McTRS80::McTRS80(McManager&, BusAccess&)+0x38>
   377b0:	e3a03001 	mov	r3, #1
   377b4:	e1a00004 	mov	r0, r4
   377b8:	e5c414e4 	strb	r1, [r4, #1252]	; 0x4e4
   377bc:	e5c435e5 	strb	r3, [r4, #1509]	; 0x5e5
   377c0:	e28dd008 	add	sp, sp, #8
   377c4:	e8bd8010 	pop	{r4, pc}
   377c8:	00047c3c 	.word	0x00047c3c
   377cc:	00046bd0 	.word	0x00046bd0

000377d0 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)>:
   377d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   377d4:	e5903000 	ldr	r3, [r0]
   377d8:	e59fc18c 	ldr	ip, [pc, #396]	; 3796c <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x19c>
   377dc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
   377e0:	e24dd01c 	sub	sp, sp, #28
   377e4:	e153000c 	cmp	r3, ip
   377e8:	e1a08000 	mov	r8, r0
   377ec:	e1a0b002 	mov	fp, r2
   377f0:	e58d1010 	str	r1, [sp, #16]
   377f4:	1a000059 	bne	37960 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x190>
   377f8:	e59090e0 	ldr	r9, [r0, #224]	; 0xe0
   377fc:	e35b0b01 	cmp	fp, #1024	; 0x400
   37800:	23a0b000 	movcs	fp, #0
   37804:	33a0b001 	movcc	fp, #1
   37808:	e3590000 	cmp	r9, #0
   3780c:	03a0b001 	moveq	fp, #1
   37810:	e35b0000 	cmp	fp, #0
   37814:	1a00004f 	bne	37958 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x188>
   37818:	e5983000 	ldr	r3, [r8]
   3781c:	e1a00008 	mov	r0, r8
   37820:	e5933014 	ldr	r3, [r3, #20]
   37824:	e12fff33 	blx	r3
   37828:	e1a02000 	mov	r2, r0
   3782c:	e5983000 	ldr	r3, [r8]
   37830:	e1a00008 	mov	r0, r8
   37834:	e5933014 	ldr	r3, [r3, #20]
   37838:	e592406c 	ldr	r4, [r2, #108]	; 0x6c
   3783c:	e12fff33 	blx	r3
   37840:	e1a03000 	mov	r3, r0
   37844:	e1a00004 	mov	r0, r4
   37848:	e5931074 	ldr	r1, [r3, #116]	; 0x74
   3784c:	eb001601 	bl	3d058 <__divsi3>
   37850:	e5983000 	ldr	r3, [r8]
   37854:	e1a07000 	mov	r7, r0
   37858:	e5933014 	ldr	r3, [r3, #20]
   3785c:	e1a00008 	mov	r0, r8
   37860:	e12fff33 	blx	r3
   37864:	e1a02000 	mov	r2, r0
   37868:	e5983000 	ldr	r3, [r8]
   3786c:	e1a00008 	mov	r0, r8
   37870:	e5933014 	ldr	r3, [r3, #20]
   37874:	e5924070 	ldr	r4, [r2, #112]	; 0x70
   37878:	e12fff33 	blx	r3
   3787c:	e1a03000 	mov	r3, r0
   37880:	e1a00004 	mov	r0, r4
   37884:	e5931078 	ldr	r1, [r3, #120]	; 0x78
   37888:	eb0015f2 	bl	3d058 <__divsi3>
   3788c:	e2503000 	subs	r3, r0, #0
   37890:	e58d300c 	str	r3, [sp, #12]
   37894:	da00002d 	ble	37950 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x180>
   37898:	e1a0200b 	mov	r2, fp
   3789c:	e28830e4 	add	r3, r8, #228	; 0xe4
   378a0:	e59fa0c8 	ldr	sl, [pc, #200]	; 37970 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1a0>
   378a4:	e58d3014 	str	r3, [sp, #20]
   378a8:	e58db004 	str	fp, [sp, #4]
   378ac:	e3570000 	cmp	r7, #0
   378b0:	da00001f 	ble	37934 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x164>
   378b4:	e59d1014 	ldr	r1, [sp, #20]
   378b8:	e59d3004 	ldr	r3, [sp, #4]
   378bc:	e3a06000 	mov	r6, #0
   378c0:	e0814003 	add	r4, r1, r3
   378c4:	e59d1010 	ldr	r1, [sp, #16]
   378c8:	e0815003 	add	r5, r1, r3
   378cc:	ea000005 	b	378e8 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x118>
   378d0:	e5c43000 	strb	r3, [r4]
   378d4:	e2866001 	add	r6, r6, #1
   378d8:	e1570006 	cmp	r7, r6
   378dc:	e2844001 	add	r4, r4, #1
   378e0:	e2855001 	add	r5, r5, #1
   378e4:	0a000012 	beq	37934 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x164>
   378e8:	e5d834e4 	ldrb	r3, [r8, #1252]	; 0x4e4
   378ec:	e3530000 	cmp	r3, #0
   378f0:	e5d53000 	ldrb	r3, [r5]
   378f4:	0a000002 	beq	37904 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x134>
   378f8:	e5d41000 	ldrb	r1, [r4]
   378fc:	e1510003 	cmp	r1, r3
   37900:	0afffff3 	beq	378d4 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x104>
   37904:	e5991000 	ldr	r1, [r9]
   37908:	e591b024 	ldr	fp, [r1, #36]	; 0x24
   3790c:	e15b000a 	cmp	fp, sl
   37910:	0affffee 	beq	378d0 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x100>
   37914:	e6af3073 	sxtb	r3, r3
   37918:	e58d2008 	str	r2, [sp, #8]
   3791c:	e1a01006 	mov	r1, r6
   37920:	e1a00009 	mov	r0, r9
   37924:	e12fff3b 	blx	fp
   37928:	e5d53000 	ldrb	r3, [r5]
   3792c:	e59d2008 	ldr	r2, [sp, #8]
   37930:	eaffffe6 	b	378d0 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x100>
   37934:	e59d300c 	ldr	r3, [sp, #12]
   37938:	e2822001 	add	r2, r2, #1
   3793c:	e1530002 	cmp	r3, r2
   37940:	e59d3004 	ldr	r3, [sp, #4]
   37944:	e0833007 	add	r3, r3, r7
   37948:	e58d3004 	str	r3, [sp, #4]
   3794c:	1affffd6 	bne	378ac <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xdc>
   37950:	e3a03001 	mov	r3, #1
   37954:	e5c834e4 	strb	r3, [r8, #1252]	; 0x4e4
   37958:	e28dd01c 	add	sp, sp, #28
   3795c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37960:	e12fff33 	blx	r3
   37964:	e1a09000 	mov	r9, r0
   37968:	eaffffa3 	b	377fc <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x2c>
   3796c:	00037a50 	.word	0x00037a50
   37970:	00037a34 	.word	0x00037a34

00037974 <McTRS80::refreshDisplay()>:
   37974:	e92d4030 	push	{r4, r5, lr}
   37978:	e24ddb01 	sub	sp, sp, #1024	; 0x400
   3797c:	e24dd00c 	sub	sp, sp, #12
   37980:	e28010e4 	add	r1, r0, #228	; 0xe4
   37984:	e1a04000 	mov	r4, r0
   37988:	e3a02b01 	mov	r2, #1024	; 0x400
   3798c:	e28d0008 	add	r0, sp, #8
   37990:	ebffcb5c 	bl	2a708 <memcpy>
   37994:	e3a03000 	mov	r3, #0
   37998:	e5940008 	ldr	r0, [r4, #8]
   3799c:	e3a01b0f 	mov	r1, #15360	; 0x3c00
   379a0:	e58d3000 	str	r3, [sp]
   379a4:	e28d2008 	add	r2, sp, #8
   379a8:	e3a03b01 	mov	r3, #1024	; 0x400
   379ac:	eb0018e3 	bl	3dd40 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   379b0:	e3500000 	cmp	r0, #0
   379b4:	0a00000c 	beq	379ec <McTRS80::refreshDisplay()+0x78>
   379b8:	e5d435e5 	ldrb	r3, [r4, #1509]	; 0x5e5
   379bc:	e3530000 	cmp	r3, #0
   379c0:	0a000006 	beq	379e0 <McTRS80::refreshDisplay()+0x6c>
   379c4:	e5943000 	ldr	r3, [r4]
   379c8:	e1a00004 	mov	r0, r4
   379cc:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   379d0:	e12fff33 	blx	r3
   379d4:	e5d0303c 	ldrb	r3, [r0, #60]	; 0x3c
   379d8:	e3530000 	cmp	r3, #0
   379dc:	1a000007 	bne	37a00 <McTRS80::refreshDisplay()+0x8c>
   379e0:	e28ddb01 	add	sp, sp, #1024	; 0x400
   379e4:	e28dd00c 	add	sp, sp, #12
   379e8:	e8bd8030 	pop	{r4, r5, pc}
   379ec:	e3a02b01 	mov	r2, #1024	; 0x400
   379f0:	e1a00004 	mov	r0, r4
   379f4:	e28d1008 	add	r1, sp, #8
   379f8:	ebffff74 	bl	377d0 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)>
   379fc:	eaffffed 	b	379b8 <McTRS80::refreshDisplay()+0x44>
   37a00:	e3a05000 	mov	r5, #0
   37a04:	e2842e4e 	add	r2, r4, #1248	; 0x4e0
   37a08:	e58d5000 	str	r5, [sp]
   37a0c:	e3a03c01 	mov	r3, #256	; 0x100
   37a10:	e3a01b0e 	mov	r1, #14336	; 0x3800
   37a14:	e5940008 	ldr	r0, [r4, #8]
   37a18:	e2822005 	add	r2, r2, #5
   37a1c:	ebffeca7 	bl	32cc0 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   37a20:	e5c455e5 	strb	r5, [r4, #1509]	; 0x5e5
   37a24:	e28ddb01 	add	sp, sp, #1024	; 0x400
   37a28:	e28dd00c 	add	sp, sp, #12
   37a2c:	e8bd8030 	pop	{r4, r5, pc}

00037a30 <McTRS80::handleWD1771DiskController(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   37a30:	e12fff1e 	bx	lr

00037a34 <DisplayBase::write(int, int, int)>:
   37a34:	e12fff1e 	bx	lr

00037a38 <McBase::setMonitorIORQEnabled(bool)>:
   37a38:	e5c010a8 	strb	r1, [r0, #168]	; 0xa8
   37a3c:	e12fff1e 	bx	lr

00037a40 <McBase::setMonitorMREQEnabled(bool)>:
   37a40:	e5c010a9 	strb	r1, [r0, #169]	; 0xa9
   37a44:	e12fff1e 	bx	lr

00037a48 <McBase::getSetRegistersCodeAddr()>:
   37a48:	e59000ac 	ldr	r0, [r0, #172]	; 0xac
   37a4c:	e12fff1e 	bx	lr

00037a50 <McBase::getDisplay()>:
   37a50:	e59000e0 	ldr	r0, [r0, #224]	; 0xe0
   37a54:	e12fff1e 	bx	lr

00037a58 <McTerminal::enableMachine()>:
   37a58:	e12fff1e 	bx	lr

00037a5c <McTerminal::busActionCompleteCallback(BR_BUS_ACTION)>:
   37a5c:	e3510001 	cmp	r1, #1
   37a60:	03a03000 	moveq	r3, #0
   37a64:	02800a61 	addeq	r0, r0, #397312	; 0x61000
   37a68:	05c01b85 	strbeq	r1, [r0, #2949]	; 0xb85
   37a6c:	05c03b86 	strbeq	r3, [r0, #2950]	; 0xb86
   37a70:	e12fff1e 	bx	lr

00037a74 <McTerminal::fileHandler(char const*, unsigned char const*, int)>:
   37a74:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   37a78:	e24dd094 	sub	sp, sp, #148	; 0x94
   37a7c:	e1a05000 	mov	r5, r0
   37a80:	e1a07002 	mov	r7, r2
   37a84:	e1a04003 	mov	r4, r3
   37a88:	e59f00b0 	ldr	r0, [pc, #176]	; 37b40 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xcc>
   37a8c:	e3a03064 	mov	r3, #100	; 0x64
   37a90:	e28d2028 	add	r2, sp, #40	; 0x28
   37a94:	e1a06001 	mov	r6, r1
   37a98:	ebffd972 	bl	2e068 <jsonGetValueForKey>
   37a9c:	e2508000 	subs	r8, r0, #0
   37aa0:	1a000002 	bne	37ab0 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0x3c>
   37aa4:	e1a00008 	mov	r0, r8
   37aa8:	e28dd094 	add	sp, sp, #148	; 0x94
   37aac:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   37ab0:	e59f108c 	ldr	r1, [pc, #140]	; 37b44 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xd0>
   37ab4:	e28d0028 	add	r0, sp, #40	; 0x28
   37ab8:	ebffc9ef 	bl	2a27c <strstr>
   37abc:	e1a01006 	mov	r1, r6
   37ac0:	e3a0301e 	mov	r3, #30
   37ac4:	e59f007c 	ldr	r0, [pc, #124]	; 37b48 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xd4>
   37ac8:	e28d2008 	add	r2, sp, #8
   37acc:	ebffd965 	bl	2e068 <jsonGetValueForKey>
   37ad0:	e2506000 	subs	r6, r0, #0
   37ad4:	01a09006 	moveq	r9, r6
   37ad8:	1a000011 	bne	37b24 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xb0>
   37adc:	ebffbbd0 	bl	26a24 <CLogger::Get()>
   37ae0:	e3a02004 	mov	r2, #4
   37ae4:	e59f1060 	ldr	r1, [pc, #96]	; 37b4c <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xd8>
   37ae8:	e59f3060 	ldr	r3, [pc, #96]	; 37b50 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xdc>
   37aec:	e58d4004 	str	r4, [sp, #4]
   37af0:	e58d9000 	str	r9, [sp]
   37af4:	ebffbb0c 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37af8:	e5953000 	ldr	r3, [r5]
   37afc:	e1a00005 	mov	r0, r5
   37b00:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   37b04:	e12fff33 	blx	r3
   37b08:	e1a03004 	mov	r3, r4
   37b0c:	e1a02007 	mov	r2, r7
   37b10:	e1a01006 	mov	r1, r6
   37b14:	ebffef19 	bl	33780 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   37b18:	e1a00008 	mov	r0, r8
   37b1c:	e28dd094 	add	sp, sp, #148	; 0x94
   37b20:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   37b24:	e3a02010 	mov	r2, #16
   37b28:	e3a01000 	mov	r1, #0
   37b2c:	e28d0008 	add	r0, sp, #8
   37b30:	ebffca21 	bl	2a3bc <strtoul>
   37b34:	e6ff9070 	uxth	r9, r0
   37b38:	e1a06009 	mov	r6, r9
   37b3c:	eaffffe6 	b	37adc <McTerminal::fileHandler(char const*, unsigned char const*, int)+0x68>
   37b40:	00045cd4 	.word	0x00045cd4
   37b44:	0003e61c 	.word	0x0003e61c
   37b48:	00046b8c 	.word	0x00046b8c
   37b4c:	00046c40 	.word	0x00046c40
   37b50:	00046b98 	.word	0x00046b98

00037b54 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   37b54:	e92d4010 	push	{r4, lr}
   37b58:	e2804a61 	add	r4, r0, #397312	; 0x61000
   37b5c:	e5d4cb84 	ldrb	ip, [r4, #2948]	; 0xb84
   37b60:	e35c0000 	cmp	ip, #0
   37b64:	e59dc008 	ldr	ip, [sp, #8]
   37b68:	08bd8010 	popeq	{r4, pc}
   37b6c:	e203e018 	and	lr, r3, #24
   37b70:	e35e0008 	cmp	lr, #8
   37b74:	18bd8010 	popne	{r4, pc}
   37b78:	e201e0c0 	and	lr, r1, #192	; 0xc0
   37b7c:	e35e0080 	cmp	lr, #128	; 0x80
   37b80:	18bd8010 	popne	{r4, pc}
   37b84:	e3130001 	tst	r3, #1
   37b88:	1a00000d 	bne	37bc4 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x70>
   37b8c:	e3130002 	tst	r3, #2
   37b90:	08bd8010 	popeq	{r4, pc}
   37b94:	e2113001 	ands	r3, r1, #1
   37b98:	1a00003a 	bne	37c88 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x134>
   37b9c:	e1a013a2 	lsr	r1, r2, #7
   37ba0:	e2022003 	and	r2, r2, #3
   37ba4:	e2011001 	and	r1, r1, #1
   37ba8:	e3520003 	cmp	r2, #3
   37bac:	e5c41b87 	strb	r1, [r4, #2951]	; 0xb87
   37bb0:	0a00003c 	beq	37ca8 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x154>
   37bb4:	e5d42b86 	ldrb	r2, [r4, #2950]	; 0xb86
   37bb8:	e3520000 	cmp	r2, #0
   37bbc:	15c43b86 	strbne	r3, [r4, #2950]	; 0xb86
   37bc0:	e8bd8010 	pop	{r4, pc}
   37bc4:	e3110001 	tst	r1, #1
   37bc8:	1a00000b 	bne	37bfc <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0xa8>
   37bcc:	e5943b8c 	ldr	r3, [r4, #2956]	; 0xb8c
   37bd0:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   37bd4:	e1530002 	cmp	r3, r2
   37bd8:	13a03003 	movne	r3, #3
   37bdc:	03a03002 	moveq	r3, #2
   37be0:	e58c3000 	str	r3, [ip]
   37be4:	e5d42b85 	ldrb	r2, [r4, #2949]	; 0xb85
   37be8:	e3520000 	cmp	r2, #0
   37bec:	0a000021 	beq	37c78 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x124>
   37bf0:	e3833030 	orr	r3, r3, #48	; 0x30
   37bf4:	e58c3000 	str	r3, [ip]
   37bf8:	e8bd8010 	pop	{r4, pc}
   37bfc:	e3a01000 	mov	r1, #0
   37c00:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   37c04:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   37c08:	e58c1000 	str	r1, [ip]
   37c0c:	e1520003 	cmp	r2, r3
   37c10:	0a000015 	beq	37c6c <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x118>
   37c14:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   37c18:	e59fe098 	ldr	lr, [pc, #152]	; 37cb8 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x164>
   37c1c:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   37c20:	e0802002 	add	r2, r0, r2
   37c24:	e7d2200e 	ldrb	r2, [r2, lr]
   37c28:	e2833001 	add	r3, r3, #1
   37c2c:	e58c2000 	str	r2, [ip]
   37c30:	e5843b90 	str	r3, [r4, #2960]	; 0xb90
   37c34:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   37c38:	e5943b94 	ldr	r3, [r4, #2964]	; 0xb94
   37c3c:	e1520003 	cmp	r2, r3
   37c40:	e5d43b87 	ldrb	r3, [r4, #2951]	; 0xb87
   37c44:	25841b90 	strcs	r1, [r4, #2960]	; 0xb90
   37c48:	e3530000 	cmp	r3, #0
   37c4c:	0a000006 	beq	37c6c <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x118>
   37c50:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   37c54:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   37c58:	e1520003 	cmp	r2, r3
   37c5c:	0a000002 	beq	37c6c <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x118>
   37c60:	e3e01000 	mvn	r1, #0
   37c64:	e5900004 	ldr	r0, [r0, #4]
   37c68:	ebfffaa9 	bl	36714 <McManager::targetIrq(int)>
   37c6c:	e3a03000 	mov	r3, #0
   37c70:	e5c43b85 	strb	r3, [r4, #2949]	; 0xb85
   37c74:	e8bd8010 	pop	{r4, pc}
   37c78:	e5d43b86 	ldrb	r3, [r4, #2950]	; 0xb86
   37c7c:	e3530000 	cmp	r3, #0
   37c80:	158c2000 	strne	r2, [ip]
   37c84:	e8bd8010 	pop	{r4, pc}
   37c88:	e5940b88 	ldr	r0, [r4, #2952]	; 0xb88
   37c8c:	e3500000 	cmp	r0, #0
   37c90:	08bd8010 	popeq	{r4, pc}
   37c94:	e5903000 	ldr	r3, [r0]
   37c98:	e1a01002 	mov	r1, r2
   37c9c:	e8bd4010 	pop	{r4, lr}
   37ca0:	e593300c 	ldr	r3, [r3, #12]
   37ca4:	e12fff13 	bx	r3
   37ca8:	e3a02001 	mov	r2, #1
   37cac:	e5c43b85 	strb	r3, [r4, #2949]	; 0xb85
   37cb0:	e5c42b86 	strb	r2, [r4, #2950]	; 0xb86
   37cb4:	e8bd8010 	pop	{r4, pc}
   37cb8:	00061b98 	.word	0x00061b98

00037cbc <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)>:
   37cbc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37cc0:	e3530000 	cmp	r3, #0
   37cc4:	e24dd014 	sub	sp, sp, #20
   37cc8:	e1a09000 	mov	r9, r0
   37ccc:	e1a06001 	mov	r6, r1
   37cd0:	e58d2004 	str	r2, [sp, #4]
   37cd4:	0a000010 	beq	37d1c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x60>
   37cd8:	e1a03000 	mov	r3, r0
   37cdc:	e3e01000 	mvn	r1, #0
   37ce0:	e2802bc3 	add	r2, r0, #199680	; 0x30c00
   37ce4:	e2822d05 	add	r2, r2, #320	; 0x140
   37ce8:	e5c310e7 	strb	r1, [r3, #231]	; 0xe7
   37cec:	e2833004 	add	r3, r3, #4
   37cf0:	e1520003 	cmp	r2, r3
   37cf4:	1afffffb 	bne	37ce8 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x2c>
   37cf8:	e3a03000 	mov	r3, #0
   37cfc:	e3e00000 	mvn	r0, #0
   37d00:	e59f2144 	ldr	r2, [pc, #324]	; 37e4c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x190>
   37d04:	e59f1144 	ldr	r1, [pc, #324]	; 37e50 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x194>
   37d08:	e0892002 	add	r2, r9, r2
   37d0c:	e7c20103 	strb	r0, [r2, r3, lsl #2]
   37d10:	e2833001 	add	r3, r3, #1
   37d14:	e1530001 	cmp	r3, r1
   37d18:	1afffffb 	bne	37d0c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x50>
   37d1c:	e59d3004 	ldr	r3, [sp, #4]
   37d20:	e3530009 	cmp	r3, #9
   37d24:	83a05000 	movhi	r5, #0
   37d28:	93a05001 	movls	r5, #1
   37d2c:	e3560000 	cmp	r6, #0
   37d30:	03a05001 	moveq	r5, #1
   37d34:	e3550000 	cmp	r5, #0
   37d38:	1a00003f 	bne	37e3c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x180>
   37d3c:	e2897a61 	add	r7, r9, #397312	; 0x61000
   37d40:	e5973b88 	ldr	r3, [r7, #2952]	; 0xb88
   37d44:	e593300c 	ldr	r3, [r3, #12]
   37d48:	e5c63000 	strb	r3, [r6]
   37d4c:	e5973b88 	ldr	r3, [r7, #2952]	; 0xb88
   37d50:	e5933010 	ldr	r3, [r3, #16]
   37d54:	e5c63001 	strb	r3, [r6, #1]
   37d58:	e5973b88 	ldr	r3, [r7, #2952]	; 0xb88
   37d5c:	e5932010 	ldr	r2, [r3, #16]
   37d60:	e3520000 	cmp	r2, #0
   37d64:	13a02002 	movne	r2, #2
   37d68:	0a000033 	beq	37e3c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x180>
   37d6c:	e593c00c 	ldr	ip, [r3, #12]
   37d70:	e35c0000 	cmp	ip, #0
   37d74:	0a000027 	beq	37e18 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x15c>
   37d78:	e3a04000 	mov	r4, #0
   37d7c:	e02c4c95 	mla	ip, r5, ip, r4
   37d80:	e5931008 	ldr	r1, [r3, #8]
   37d84:	e28cacc3 	add	sl, ip, #49920	; 0xc300
   37d88:	e15c0001 	cmp	ip, r1
   37d8c:	35933004 	ldrcc	r3, [r3, #4]
   37d90:	2283b028 	addcs	fp, r3, #40	; 0x28
   37d94:	3083b10c 	addcc	fp, r3, ip, lsl #2
   37d98:	e28a3089 	add	r3, sl, #137	; 0x89
   37d9c:	e7990103 	ldr	r0, [r9, r3, lsl #2]
   37da0:	e59b1000 	ldr	r1, [fp]
   37da4:	e2828006 	add	r8, r2, #6
   37da8:	e1500001 	cmp	r0, r1
   37dac:	e0860002 	add	r0, r6, r2
   37db0:	0a000013 	beq	37e04 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x148>
   37db4:	e59d3004 	ldr	r3, [sp, #4]
   37db8:	e1530008 	cmp	r3, r8
   37dbc:	3a000019 	bcc	37e28 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x16c>
   37dc0:	e5cd5009 	strb	r5, [sp, #9]
   37dc4:	e5cd4008 	strb	r4, [sp, #8]
   37dc8:	e5db1000 	ldrb	r1, [fp]
   37dcc:	e3a02006 	mov	r2, #6
   37dd0:	e5cd100a 	strb	r1, [sp, #10]
   37dd4:	e5dbc001 	ldrb	ip, [fp, #1]
   37dd8:	e28d1008 	add	r1, sp, #8
   37ddc:	e5cdc00b 	strb	ip, [sp, #11]
   37de0:	e5dbc002 	ldrb	ip, [fp, #2]
   37de4:	e5cdc00c 	strb	ip, [sp, #12]
   37de8:	e5dbc003 	ldrb	ip, [fp, #3]
   37dec:	e5cdc00d 	strb	ip, [sp, #13]
   37df0:	ebffca44 	bl	2a708 <memcpy>
   37df4:	e1a02008 	mov	r2, r8
   37df8:	e59b3000 	ldr	r3, [fp]
   37dfc:	e089c10a 	add	ip, r9, sl, lsl #2
   37e00:	e58c3224 	str	r3, [ip, #548]	; 0x224
   37e04:	e5973b88 	ldr	r3, [r7, #2952]	; 0xb88
   37e08:	e2844001 	add	r4, r4, #1
   37e0c:	e593c00c 	ldr	ip, [r3, #12]
   37e10:	e15c0004 	cmp	ip, r4
   37e14:	8affffd8 	bhi	37d7c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0xc0>
   37e18:	e5931010 	ldr	r1, [r3, #16]
   37e1c:	e2855001 	add	r5, r5, #1
   37e20:	e1510005 	cmp	r1, r5
   37e24:	8affffd0 	bhi	37d6c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0xb0>
   37e28:	e3520002 	cmp	r2, #2
   37e2c:	0a000002 	beq	37e3c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x180>
   37e30:	e1a00002 	mov	r0, r2
   37e34:	e28dd014 	add	sp, sp, #20
   37e38:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37e3c:	e3a02000 	mov	r2, #0
   37e40:	e1a00002 	mov	r0, r2
   37e44:	e28dd014 	add	sp, sp, #20
   37e48:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37e4c:	00030e27 	.word	0x00030e27
   37e50:	0000c350 	.word	0x0000c350

00037e54 <McTerminal::refreshDisplay()>:
   37e54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37e58:	e5903000 	ldr	r3, [r0]
   37e5c:	e59f244c 	ldr	r2, [pc, #1100]	; 382b0 <McTerminal::refreshDisplay()+0x45c>
   37e60:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
   37e64:	e1a07000 	mov	r7, r0
   37e68:	e1530002 	cmp	r3, r2
   37e6c:	e24ddffb 	sub	sp, sp, #1004	; 0x3ec
   37e70:	1a0000ba 	bne	38160 <McTerminal::refreshDisplay()+0x30c>
   37e74:	e59080e0 	ldr	r8, [r0, #224]	; 0xe0
   37e78:	e3580000 	cmp	r8, #0
   37e7c:	0a000068 	beq	38024 <McTerminal::refreshDisplay()+0x1d0>
   37e80:	e5970004 	ldr	r0, [r7, #4]
   37e84:	ebfffb95 	bl	36ce0 <McManager::hostSerialNumChAvailable()>
   37e88:	e3500000 	cmp	r0, #0
   37e8c:	1a000066 	bne	3802c <McTerminal::refreshDisplay()+0x1d8>
   37e90:	e287aa61 	add	sl, r7, #397312	; 0x61000
   37e94:	e59a0b88 	ldr	r0, [sl, #2952]	; 0xb88
   37e98:	e3500000 	cmp	r0, #0
   37e9c:	0a000060 	beq	38024 <McTerminal::refreshDisplay()+0x1d0>
   37ea0:	e5903000 	ldr	r3, [r0]
   37ea4:	e59f2408 	ldr	r2, [pc, #1032]	; 382b4 <McTerminal::refreshDisplay()+0x460>
   37ea8:	e5933014 	ldr	r3, [r3, #20]
   37eac:	e1530002 	cmp	r3, r2
   37eb0:	1a0000c9 	bne	381dc <McTerminal::refreshDisplay()+0x388>
   37eb4:	e5d0001c 	ldrb	r0, [r0, #28]
   37eb8:	e3500000 	cmp	r0, #0
   37ebc:	0a000095 	beq	38118 <McTerminal::refreshDisplay()+0x2c4>
   37ec0:	e5da3b6c 	ldrb	r3, [sl, #2924]	; 0xb6c
   37ec4:	e3530000 	cmp	r3, #0
   37ec8:	1a0000a7 	bne	3816c <McTerminal::refreshDisplay()+0x318>
   37ecc:	e59a4b88 	ldr	r4, [sl, #2952]	; 0xb88
   37ed0:	e5943010 	ldr	r3, [r4, #16]
   37ed4:	e3530000 	cmp	r3, #0
   37ed8:	0a00008f 	beq	3811c <McTerminal::refreshDisplay()+0x2c8>
   37edc:	e3a0b000 	mov	fp, #0
   37ee0:	e594300c 	ldr	r3, [r4, #12]
   37ee4:	e3530000 	cmp	r3, #0
   37ee8:	0a00006a 	beq	38098 <McTerminal::refreshDisplay()+0x244>
   37eec:	e3a05000 	mov	r5, #0
   37ef0:	ea000011 	b	37f3c <McTerminal::refreshDisplay()+0xe8>
   37ef4:	e1520001 	cmp	r2, r1
   37ef8:	1a0000a5 	bne	38194 <McTerminal::refreshDisplay()+0x340>
   37efc:	e593201c 	ldr	r2, [r3, #28]
   37f00:	e59f13b0 	ldr	r1, [pc, #944]	; 382b8 <McTerminal::refreshDisplay()+0x464>
   37f04:	e1520001 	cmp	r2, r1
   37f08:	1a0000a9 	bne	381b4 <McTerminal::refreshDisplay()+0x360>
   37f0c:	e5939024 	ldr	r9, [r3, #36]	; 0x24
   37f10:	e59f33a4 	ldr	r3, [pc, #932]	; 382bc <McTerminal::refreshDisplay()+0x468>
   37f14:	e1590003 	cmp	r9, r3
   37f18:	1a000026 	bne	37fb8 <McTerminal::refreshDisplay()+0x164>
   37f1c:	e5942000 	ldr	r2, [r4]
   37f20:	e0873106 	add	r3, r7, r6, lsl #2
   37f24:	e58320e4 	str	r2, [r3, #228]	; 0xe4
   37f28:	e59a4b88 	ldr	r4, [sl, #2952]	; 0xb88
   37f2c:	e2855001 	add	r5, r5, #1
   37f30:	e594300c 	ldr	r3, [r4, #12]
   37f34:	e1530005 	cmp	r3, r5
   37f38:	9a000056 	bls	38098 <McTerminal::refreshDisplay()+0x244>
   37f3c:	e026539b 	mla	r6, fp, r3, r5
   37f40:	e5943008 	ldr	r3, [r4, #8]
   37f44:	e1560003 	cmp	r6, r3
   37f48:	35944004 	ldrcc	r4, [r4, #4]
   37f4c:	22844028 	addcs	r4, r4, #40	; 0x28
   37f50:	30844106 	addcc	r4, r4, r6, lsl #2
   37f54:	e2863039 	add	r3, r6, #57	; 0x39
   37f58:	e7972103 	ldr	r2, [r7, r3, lsl #2]
   37f5c:	e5943000 	ldr	r3, [r4]
   37f60:	e1520003 	cmp	r2, r3
   37f64:	0affffef 	beq	37f28 <McTerminal::refreshDisplay()+0xd4>
   37f68:	e5d43003 	ldrb	r3, [r4, #3]
   37f6c:	e59f134c 	ldr	r1, [pc, #844]	; 382c0 <McTerminal::refreshDisplay()+0x46c>
   37f70:	e3130010 	tst	r3, #16
   37f74:	e5983000 	ldr	r3, [r8]
   37f78:	e5932018 	ldr	r2, [r3, #24]
   37f7c:	1affffdc 	bne	37ef4 <McTerminal::refreshDisplay()+0xa0>
   37f80:	e1520001 	cmp	r2, r1
   37f84:	1a00008f 	bne	381c8 <McTerminal::refreshDisplay()+0x374>
   37f88:	e593201c 	ldr	r2, [r3, #28]
   37f8c:	e59f1324 	ldr	r1, [pc, #804]	; 382b8 <McTerminal::refreshDisplay()+0x464>
   37f90:	e1520001 	cmp	r2, r1
   37f94:	0affffdc 	beq	37f0c <McTerminal::refreshDisplay()+0xb8>
   37f98:	e1a00008 	mov	r0, r8
   37f9c:	e1d410d2 	ldrsb	r1, [r4, #2]
   37fa0:	e12fff32 	blx	r2
   37fa4:	e5983000 	ldr	r3, [r8]
   37fa8:	e5939024 	ldr	r9, [r3, #36]	; 0x24
   37fac:	e59f3308 	ldr	r3, [pc, #776]	; 382bc <McTerminal::refreshDisplay()+0x468>
   37fb0:	e1590003 	cmp	r9, r3
   37fb4:	0affffd8 	beq	37f1c <McTerminal::refreshDisplay()+0xc8>
   37fb8:	e1a0200b 	mov	r2, fp
   37fbc:	e1a01005 	mov	r1, r5
   37fc0:	e1a00008 	mov	r0, r8
   37fc4:	e5d43000 	ldrb	r3, [r4]
   37fc8:	e12fff39 	blx	r9
   37fcc:	eaffffd2 	b	37f1c <McTerminal::refreshDisplay()+0xc8>
   37fd0:	ebffd73d 	bl	2dccc <micros>
   37fd4:	e59a3b68 	ldr	r3, [sl, #2920]	; 0xb68
   37fd8:	e59a1b64 	ldr	r1, [sl, #2916]	; 0xb64
   37fdc:	e0632283 	rsb	r2, r3, r3, lsl #5
   37fe0:	e0832102 	add	r2, r3, r2, lsl #2
   37fe4:	e1a02182 	lsl	r2, r2, #3
   37fe8:	ebffd755 	bl	2dd44 <isTimeout>
   37fec:	e3500000 	cmp	r0, #0
   37ff0:	0a00000b 	beq	38024 <McTerminal::refreshDisplay()+0x1d0>
   37ff4:	e5dacb6c 	ldrb	ip, [sl, #2924]	; 0xb6c
   37ff8:	e35c0000 	cmp	ip, #0
   37ffc:	0a000078 	beq	381e4 <McTerminal::refreshDisplay()+0x390>
   38000:	e5982000 	ldr	r2, [r8]
   38004:	e59f32b0 	ldr	r3, [pc, #688]	; 382bc <McTerminal::refreshDisplay()+0x468>
   38008:	e5924024 	ldr	r4, [r2, #36]	; 0x24
   3800c:	e1540003 	cmp	r4, r3
   38010:	1a00009f 	bne	38294 <McTerminal::refreshDisplay()+0x440>
   38014:	e22cc001 	eor	ip, ip, #1
   38018:	e5cacb6c 	strb	ip, [sl, #2924]	; 0xb6c
   3801c:	ebffd72a 	bl	2dccc <micros>
   38020:	e58a0b64 	str	r0, [sl, #2916]	; 0xb64
   38024:	e28ddffb 	add	sp, sp, #1004	; 0x3ec
   38028:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3802c:	e3500ffa 	cmp	r0, #1000	; 0x3e8
   38030:	b1a02000 	movlt	r2, r0
   38034:	a3a02ffa 	movge	r2, #1000	; 0x3e8
   38038:	e1a0100d 	mov	r1, sp
   3803c:	e5970004 	ldr	r0, [r7, #4]
   38040:	ebfffb29 	bl	36cec <McManager::hostSerialReadChars(unsigned char*, unsigned long)>
   38044:	e2505000 	subs	r5, r0, #0
   38048:	0affff90 	beq	37e90 <McTerminal::refreshDisplay()+0x3c>
   3804c:	e1a0400d 	mov	r4, sp
   38050:	e287aa61 	add	sl, r7, #397312	; 0x61000
   38054:	e59a0b88 	ldr	r0, [sl, #2952]	; 0xb88
   38058:	e0845005 	add	r5, r4, r5
   3805c:	ea000007 	b	38080 <McTerminal::refreshDisplay()+0x22c>
   38060:	e5903000 	ldr	r3, [r0]
   38064:	e5d41000 	ldrb	r1, [r4]
   38068:	e593300c 	ldr	r3, [r3, #12]
   3806c:	e12fff33 	blx	r3
   38070:	e59a0b88 	ldr	r0, [sl, #2952]	; 0xb88
   38074:	e2844001 	add	r4, r4, #1
   38078:	e1550004 	cmp	r5, r4
   3807c:	0affff85 	beq	37e98 <McTerminal::refreshDisplay()+0x44>
   38080:	e3500000 	cmp	r0, #0
   38084:	1afffff5 	bne	38060 <McTerminal::refreshDisplay()+0x20c>
   38088:	e2844001 	add	r4, r4, #1
   3808c:	e1540005 	cmp	r4, r5
   38090:	1afffff7 	bne	38074 <McTerminal::refreshDisplay()+0x220>
   38094:	eaffffe2 	b	38024 <McTerminal::refreshDisplay()+0x1d0>
   38098:	e5943010 	ldr	r3, [r4, #16]
   3809c:	e28bb001 	add	fp, fp, #1
   380a0:	e153000b 	cmp	r3, fp
   380a4:	8affff8d 	bhi	37ee0 <McTerminal::refreshDisplay()+0x8c>
   380a8:	e5da3b6c 	ldrb	r3, [sl, #2924]	; 0xb6c
   380ac:	e3530000 	cmp	r3, #0
   380b0:	0a000018 	beq	38118 <McTerminal::refreshDisplay()+0x2c4>
   380b4:	e5983000 	ldr	r3, [r8]
   380b8:	e59f61fc 	ldr	r6, [pc, #508]	; 382bc <McTerminal::refreshDisplay()+0x468>
   380bc:	e5935024 	ldr	r5, [r3, #36]	; 0x24
   380c0:	e284e014 	add	lr, r4, #20
   380c4:	e28aceb7 	add	ip, sl, #2928	; 0xb70
   380c8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   380cc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   380d0:	e59e3000 	ldr	r3, [lr]
   380d4:	e58c3000 	str	r3, [ip]
   380d8:	e594300c 	ldr	r3, [r4, #12]
   380dc:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   380e0:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   380e4:	e5940008 	ldr	r0, [r4, #8]
   380e8:	e0231293 	mla	r3, r3, r2, r1
   380ec:	e1530000 	cmp	r3, r0
   380f0:	35944004 	ldrcc	r4, [r4, #4]
   380f4:	22844028 	addcs	r4, r4, #40	; 0x28
   380f8:	30844103 	addcc	r4, r4, r3, lsl #2
   380fc:	e5d43000 	ldrb	r3, [r4]
   38100:	e1550006 	cmp	r5, r6
   38104:	e58a3b80 	str	r3, [sl, #2944]	; 0xb80
   38108:	0a000002 	beq	38118 <McTerminal::refreshDisplay()+0x2c4>
   3810c:	e1a00008 	mov	r0, r8
   38110:	e59a3b7c 	ldr	r3, [sl, #2940]	; 0xb7c
   38114:	e12fff35 	blx	r5
   38118:	e59a4b88 	ldr	r4, [sl, #2952]	; 0xb88
   3811c:	e3a02000 	mov	r2, #0
   38120:	e5d4301d 	ldrb	r3, [r4, #29]
   38124:	e5c4201c 	strb	r2, [r4, #28]
   38128:	e1530002 	cmp	r3, r2
   3812c:	0affffa7 	beq	37fd0 <McTerminal::refreshDisplay()+0x17c>
   38130:	e5da3b6c 	ldrb	r3, [sl, #2924]	; 0xb6c
   38134:	e3530000 	cmp	r3, #0
   38138:	0a000004 	beq	38150 <McTerminal::refreshDisplay()+0x2fc>
   3813c:	e5982000 	ldr	r2, [r8]
   38140:	e59f3174 	ldr	r3, [pc, #372]	; 382bc <McTerminal::refreshDisplay()+0x468>
   38144:	e5924024 	ldr	r4, [r2, #36]	; 0x24
   38148:	e1540003 	cmp	r4, r3
   3814c:	1a000040 	bne	38254 <McTerminal::refreshDisplay()+0x400>
   38150:	e3a03000 	mov	r3, #0
   38154:	e5ca3b6c 	strb	r3, [sl, #2924]	; 0xb6c
   38158:	e28ddffb 	add	sp, sp, #1004	; 0x3ec
   3815c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38160:	e12fff33 	blx	r3
   38164:	e1a08000 	mov	r8, r0
   38168:	eaffff42 	b	37e78 <McTerminal::refreshDisplay()+0x24>
   3816c:	e5983000 	ldr	r3, [r8]
   38170:	e59f6144 	ldr	r6, [pc, #324]	; 382bc <McTerminal::refreshDisplay()+0x468>
   38174:	e5935024 	ldr	r5, [r3, #36]	; 0x24
   38178:	e1550006 	cmp	r5, r6
   3817c:	1a00003a 	bne	3826c <McTerminal::refreshDisplay()+0x418>
   38180:	e59a4b88 	ldr	r4, [sl, #2952]	; 0xb88
   38184:	e5943010 	ldr	r3, [r4, #16]
   38188:	e3530000 	cmp	r3, #0
   3818c:	1affff52 	bne	37edc <McTerminal::refreshDisplay()+0x88>
   38190:	eaffffca 	b	380c0 <McTerminal::refreshDisplay()+0x26c>
   38194:	e1d410d2 	ldrsb	r1, [r4, #2]
   38198:	e1a00008 	mov	r0, r8
   3819c:	e12fff32 	blx	r2
   381a0:	e5983000 	ldr	r3, [r8]
   381a4:	e59f110c 	ldr	r1, [pc, #268]	; 382b8 <McTerminal::refreshDisplay()+0x464>
   381a8:	e593201c 	ldr	r2, [r3, #28]
   381ac:	e1520001 	cmp	r2, r1
   381b0:	0affff55 	beq	37f0c <McTerminal::refreshDisplay()+0xb8>
   381b4:	e1a00008 	mov	r0, r8
   381b8:	e1d410d1 	ldrsb	r1, [r4, #1]
   381bc:	e12fff32 	blx	r2
   381c0:	e5983000 	ldr	r3, [r8]
   381c4:	eaffff50 	b	37f0c <McTerminal::refreshDisplay()+0xb8>
   381c8:	e1a00008 	mov	r0, r8
   381cc:	e1d410d1 	ldrsb	r1, [r4, #1]
   381d0:	e12fff32 	blx	r2
   381d4:	e5983000 	ldr	r3, [r8]
   381d8:	eaffff6a 	b	37f88 <McTerminal::refreshDisplay()+0x134>
   381dc:	e12fff33 	blx	r3
   381e0:	eaffff34 	b	37eb8 <McTerminal::refreshDisplay()+0x64>
   381e4:	e59aeb88 	ldr	lr, [sl, #2952]	; 0xb88
   381e8:	e28a4eb7 	add	r4, sl, #2928	; 0xb70
   381ec:	e28e5014 	add	r5, lr, #20
   381f0:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
   381f4:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
   381f8:	e5953000 	ldr	r3, [r5]
   381fc:	e5843000 	str	r3, [r4]
   38200:	e59e300c 	ldr	r3, [lr, #12]
   38204:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   38208:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   3820c:	e59e0008 	ldr	r0, [lr, #8]
   38210:	e0231293 	mla	r3, r3, r2, r1
   38214:	e1530000 	cmp	r3, r0
   38218:	359ee004 	ldrcc	lr, [lr, #4]
   3821c:	228ee028 	addcs	lr, lr, #40	; 0x28
   38220:	308ee103 	addcc	lr, lr, r3, lsl #2
   38224:	e5983000 	ldr	r3, [r8]
   38228:	e59f008c 	ldr	r0, [pc, #140]	; 382bc <McTerminal::refreshDisplay()+0x468>
   3822c:	e5934024 	ldr	r4, [r3, #36]	; 0x24
   38230:	e5de3000 	ldrb	r3, [lr]
   38234:	e1540000 	cmp	r4, r0
   38238:	e58a3b80 	str	r3, [sl, #2944]	; 0xb80
   3823c:	0affff74 	beq	38014 <McTerminal::refreshDisplay()+0x1c0>
   38240:	e1a00008 	mov	r0, r8
   38244:	e59a3b7c 	ldr	r3, [sl, #2940]	; 0xb7c
   38248:	e12fff34 	blx	r4
   3824c:	e5dacb6c 	ldrb	ip, [sl, #2924]	; 0xb6c
   38250:	eaffff6f 	b	38014 <McTerminal::refreshDisplay()+0x1c0>
   38254:	e1a00008 	mov	r0, r8
   38258:	e59a3b80 	ldr	r3, [sl, #2944]	; 0xb80
   3825c:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   38260:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   38264:	e12fff34 	blx	r4
   38268:	eaffffb8 	b	38150 <McTerminal::refreshDisplay()+0x2fc>
   3826c:	e59a3b80 	ldr	r3, [sl, #2944]	; 0xb80
   38270:	e1a00008 	mov	r0, r8
   38274:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   38278:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   3827c:	e12fff35 	blx	r5
   38280:	e59a4b88 	ldr	r4, [sl, #2952]	; 0xb88
   38284:	e5943010 	ldr	r3, [r4, #16]
   38288:	e3530000 	cmp	r3, #0
   3828c:	1affff12 	bne	37edc <McTerminal::refreshDisplay()+0x88>
   38290:	eaffff84 	b	380a8 <McTerminal::refreshDisplay()+0x254>
   38294:	e1a00008 	mov	r0, r8
   38298:	e59a3b80 	ldr	r3, [sl, #2944]	; 0xb80
   3829c:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   382a0:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   382a4:	e12fff34 	blx	r4
   382a8:	e5dacb6c 	ldrb	ip, [sl, #2924]	; 0xb6c
   382ac:	eaffff58 	b	38014 <McTerminal::refreshDisplay()+0x1c0>
   382b0:	00037a50 	.word	0x00037a50
   382b4:	000387bc 	.word	0x000387bc
   382b8:	000387b8 	.word	0x000387b8
   382bc:	00037a34 	.word	0x00037a34
   382c0:	000387b4 	.word	0x000387b4

000382c4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>:
   382c4:	e92d4070 	push	{r4, r5, r6, lr}
   382c8:	e1a04001 	mov	r4, r1
   382cc:	e1a05000 	mov	r5, r0
   382d0:	e59f109c 	ldr	r1, [pc, #156]	; 38374 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb0>
   382d4:	e59f009c 	ldr	r0, [pc, #156]	; 38378 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb4>
   382d8:	ebffc7b3 	bl	2a1ac <strcpy>
   382dc:	e5d43000 	ldrb	r3, [r4]
   382e0:	e353007f 	cmp	r3, #127	; 0x7f
   382e4:	da000009 	ble	38310 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x4c>
   382e8:	e5d43001 	ldrb	r3, [r4, #1]
   382ec:	e3530000 	cmp	r3, #0
   382f0:	1a000006 	bne	38310 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x4c>
   382f4:	e3e03000 	mvn	r3, #0
   382f8:	e59f1078 	ldr	r1, [pc, #120]	; 38378 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb4>
   382fc:	e3150011 	tst	r5, #17
   38300:	1203301f 	andne	r3, r3, #31
   38304:	e59f006c 	ldr	r0, [pc, #108]	; 38378 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb4>
   38308:	e5c13000 	strb	r3, [r1]
   3830c:	e8bd8070 	pop	{r4, r5, r6, pc}
   38310:	e3530001 	cmp	r3, #1
   38314:	da000014 	ble	3836c <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xa8>
   38318:	e3130080 	tst	r3, #128	; 0x80
   3831c:	1afffff4 	bne	382f4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x30>
   38320:	e3150022 	tst	r5, #34	; 0x22
   38324:	13a02001 	movne	r2, #1
   38328:	03a02000 	moveq	r2, #0
   3832c:	e59f1044 	ldr	r1, [pc, #68]	; 38378 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb4>
   38330:	e3150044 	tst	r5, #68	; 0x44
   38334:	e591c004 	ldr	ip, [r1, #4]
   38338:	12822002 	addne	r2, r2, #2
   3833c:	e083338c 	add	r3, r3, ip, lsl #7
   38340:	e0823103 	add	r3, r2, r3, lsl #2
   38344:	e59f0030 	ldr	r0, [pc, #48]	; 3837c <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb8>
   38348:	e1a03083 	lsl	r3, r3, #1
   3834c:	e19030b3 	ldrh	r3, [r0, r3]
   38350:	e2432c01 	sub	r2, r3, #256	; 0x100
   38354:	e3520032 	cmp	r2, #50	; 0x32
   38358:	86af3073 	sxtbhi	r3, r3
   3835c:	8affffe6 	bhi	382fc <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x38>
   38360:	e59f3018 	ldr	r3, [pc, #24]	; 38380 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xbc>
   38364:	e7930102 	ldr	r0, [r3, r2, lsl #2]
   38368:	e8bd8070 	pop	{r4, r5, r6, pc}
   3836c:	e59f0010 	ldr	r0, [pc, #16]	; 38384 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xc0>
   38370:	e8bd8070 	pop	{r4, r5, r6, pc}
   38374:	0003e6f4 	.word	0x0003e6f4
   38378:	00050960 	.word	0x00050960
   3837c:	0004c178 	.word	0x0004c178
   38380:	0004d978 	.word	0x0004d978
   38384:	00047150 	.word	0x00047150

00038388 <McTerminal::keyHandler(unsigned char, unsigned char const*)>:
   38388:	e1a03001 	mov	r3, r1
   3838c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   38390:	e1a01002 	mov	r1, r2
   38394:	e1a07000 	mov	r7, r0
   38398:	e1a00003 	mov	r0, r3
   3839c:	ebffffc8 	bl	382c4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>
   383a0:	e1a06000 	mov	r6, r0
   383a4:	ebffc6dc 	bl	29f1c <strlen>
   383a8:	e3500000 	cmp	r0, #0
   383ac:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   383b0:	e2874a61 	add	r4, r7, #397312	; 0x61000
   383b4:	e5d43b84 	ldrb	r3, [r4, #2948]	; 0xb84
   383b8:	e3530000 	cmp	r3, #0
   383bc:	0a000029 	beq	38468 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0xe0>
   383c0:	e3a05000 	mov	r5, #0
   383c4:	e59f80bc 	ldr	r8, [pc, #188]	; 38488 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x100>
   383c8:	e1a09005 	mov	r9, r5
   383cc:	ea000011 	b	38418 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   383d0:	e2430001 	sub	r0, r3, #1
   383d4:	e3520000 	cmp	r2, #0
   383d8:	01500001 	cmpeq	r0, r1
   383dc:	0a00000c 	beq	38414 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x8c>
   383e0:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   383e4:	e7d61005 	ldrb	r1, [r6, r5]
   383e8:	e0872002 	add	r2, r7, r2
   383ec:	e7c21008 	strb	r1, [r2, r8]
   383f0:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   383f4:	e2822001 	add	r2, r2, #1
   383f8:	e5842b8c 	str	r2, [r4, #2956]	; 0xb8c
   383fc:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   38400:	e1520003 	cmp	r2, r3
   38404:	e5d43b87 	ldrb	r3, [r4, #2951]	; 0xb87
   38408:	25849b8c 	strcs	r9, [r4, #2956]	; 0xb8c
   3840c:	e3530000 	cmp	r3, #0
   38410:	1a000018 	bne	38478 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0xf0>
   38414:	e2855001 	add	r5, r5, #1
   38418:	e1a00006 	mov	r0, r6
   3841c:	ebffc6be 	bl	29f1c <strlen>
   38420:	e1500005 	cmp	r0, r5
   38424:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   38428:	e5943b94 	ldr	r3, [r4, #2964]	; 0xb94
   3842c:	e3530000 	cmp	r3, #0
   38430:	0afffff7 	beq	38414 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x8c>
   38434:	e5941b8c 	ldr	r1, [r4, #2956]	; 0xb8c
   38438:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   3843c:	e1510002 	cmp	r1, r2
   38440:	0affffe6 	beq	383e0 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x58>
   38444:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   38448:	e5941b8c 	ldr	r1, [r4, #2956]	; 0xb8c
   3844c:	e1520001 	cmp	r2, r1
   38450:	e5941b8c 	ldr	r1, [r4, #2956]	; 0xb8c
   38454:	3affffdd 	bcc	383d0 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x48>
   38458:	e0422001 	sub	r2, r2, r1
   3845c:	e3520001 	cmp	r2, #1
   38460:	9affffeb 	bls	38414 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x8c>
   38464:	eaffffdd 	b	383e0 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x58>
   38468:	e1a01006 	mov	r1, r6
   3846c:	e5970004 	ldr	r0, [r7, #4]
   38470:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   38474:	eafffa3e 	b	36d74 <McManager::sendKeyStrToTargetStatic(char const*)>
   38478:	e3e01000 	mvn	r1, #0
   3847c:	e5970004 	ldr	r0, [r7, #4]
   38480:	ebfff8a3 	bl	36714 <McManager::targetIrq(int)>
   38484:	eaffffe2 	b	38414 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x8c>
   38488:	00061b98 	.word	0x00061b98

0003848c <McTerminal::invalidateScreenCaches(bool)>:
   3848c:	e3510000 	cmp	r1, #0
   38490:	0a000007 	beq	384b4 <McTerminal::invalidateScreenCaches(bool)+0x28>
   38494:	e1a03000 	mov	r3, r0
   38498:	e3e01000 	mvn	r1, #0
   3849c:	e2802bc3 	add	r2, r0, #199680	; 0x30c00
   384a0:	e2822d05 	add	r2, r2, #320	; 0x140
   384a4:	e5c310e7 	strb	r1, [r3, #231]	; 0xe7
   384a8:	e2833004 	add	r3, r3, #4
   384ac:	e1520003 	cmp	r2, r3
   384b0:	1afffffb 	bne	384a4 <McTerminal::invalidateScreenCaches(bool)+0x18>
   384b4:	e3a03000 	mov	r3, #0
   384b8:	e3e0c000 	mvn	ip, #0
   384bc:	e59f2018 	ldr	r2, [pc, #24]	; 384dc <McTerminal::invalidateScreenCaches(bool)+0x50>
   384c0:	e59f1018 	ldr	r1, [pc, #24]	; 384e0 <McTerminal::invalidateScreenCaches(bool)+0x54>
   384c4:	e0802002 	add	r2, r0, r2
   384c8:	e7c2c103 	strb	ip, [r2, r3, lsl #2]
   384cc:	e2833001 	add	r3, r3, #1
   384d0:	e1530001 	cmp	r3, r1
   384d4:	1afffffb 	bne	384c8 <McTerminal::invalidateScreenCaches(bool)+0x3c>
   384d8:	e12fff1e 	bx	lr
   384dc:	00030e27 	.word	0x00030e27
   384e0:	0000c350 	.word	0x0000c350

000384e4 <McTerminal::setupMachine(char const*, char const*)>:
   384e4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   384e8:	e1a04000 	mov	r4, r0
   384ec:	e24dd0d4 	sub	sp, sp, #212	; 0xd4
   384f0:	e1a05002 	mov	r5, r2
   384f4:	eb00012f 	bl	389b8 <McBase::setupMachine(char const*, char const*)>
   384f8:	e3a01001 	mov	r1, #1
   384fc:	e3a02000 	mov	r2, #0
   38500:	e5943000 	ldr	r3, [r4]
   38504:	e59f8134 	ldr	r8, [pc, #308]	; 38640 <McTerminal::setupMachine(char const*, char const*)+0x15c>
   38508:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   3850c:	e2846a61 	add	r6, r4, #397312	; 0x61000
   38510:	e1530008 	cmp	r3, r8
   38514:	e5c62b87 	strb	r2, [r6, #2951]	; 0xb87
   38518:	e5c61b84 	strb	r1, [r6, #2948]	; 0xb84
   3851c:	e1a07000 	mov	r7, r0
   38520:	05c410a8 	strbeq	r1, [r4, #168]	; 0xa8
   38524:	1a000042 	bne	38634 <McTerminal::setupMachine(char const*, char const*)+0x150>
   38528:	e3a03064 	mov	r3, #100	; 0x64
   3852c:	e1a01005 	mov	r1, r5
   38530:	e59f010c 	ldr	r0, [pc, #268]	; 38644 <McTerminal::setupMachine(char const*, char const*)+0x160>
   38534:	e28d2008 	add	r2, sp, #8
   38538:	ebffd6ca 	bl	2e068 <jsonGetValueForKey>
   3853c:	e3500000 	cmp	r0, #0
   38540:	1a000019 	bne	385ac <McTerminal::setupMachine(char const*, char const*)+0xc8>
   38544:	e1a01005 	mov	r1, r5
   38548:	e3a03064 	mov	r3, #100	; 0x64
   3854c:	e59f00f4 	ldr	r0, [pc, #244]	; 38648 <McTerminal::setupMachine(char const*, char const*)+0x164>
   38550:	e28d206c 	add	r2, sp, #108	; 0x6c
   38554:	ebffd6c3 	bl	2e068 <jsonGetValueForKey>
   38558:	e3500000 	cmp	r0, #0
   3855c:	1a000023 	bne	385f0 <McTerminal::setupMachine(char const*, char const*)+0x10c>
   38560:	e59f50e4 	ldr	r5, [pc, #228]	; 3864c <McTerminal::setupMachine(char const*, char const*)+0x168>
   38564:	ebffb92e 	bl	26a24 <CLogger::Get()>
   38568:	e5d6cb84 	ldrb	ip, [r6, #2948]	; 0xb84
   3856c:	e59f20dc 	ldr	r2, [pc, #220]	; 38650 <McTerminal::setupMachine(char const*, char const*)+0x16c>
   38570:	e35c0000 	cmp	ip, #0
   38574:	e59f30d8 	ldr	r3, [pc, #216]	; 38654 <McTerminal::setupMachine(char const*, char const*)+0x170>
   38578:	01a03002 	moveq	r3, r2
   3857c:	e5951004 	ldr	r1, [r5, #4]
   38580:	e59f20d0 	ldr	r2, [pc, #208]	; 38658 <McTerminal::setupMachine(char const*, char const*)+0x174>
   38584:	e58d3000 	str	r3, [sp]
   38588:	e7922101 	ldr	r2, [r2, r1, lsl #2]
   3858c:	e59f30c8 	ldr	r3, [pc, #200]	; 3865c <McTerminal::setupMachine(char const*, char const*)+0x178>
   38590:	e58d2004 	str	r2, [sp, #4]
   38594:	e59f10c4 	ldr	r1, [pc, #196]	; 38660 <McTerminal::setupMachine(char const*, char const*)+0x17c>
   38598:	e3a02004 	mov	r2, #4
   3859c:	ebffb862 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   385a0:	e1a00007 	mov	r0, r7
   385a4:	e28dd0d4 	add	sp, sp, #212	; 0xd4
   385a8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   385ac:	e3a01000 	mov	r1, #0
   385b0:	e3a0200a 	mov	r2, #10
   385b4:	e28d0008 	add	r0, sp, #8
   385b8:	ebffc77f 	bl	2a3bc <strtoul>
   385bc:	e2501000 	subs	r1, r0, #0
   385c0:	13a03001 	movne	r3, #1
   385c4:	03a03000 	moveq	r3, #0
   385c8:	e5c63b84 	strb	r3, [r6, #2948]	; 0xb84
   385cc:	1affffdc 	bne	38544 <McTerminal::setupMachine(char const*, char const*)+0x60>
   385d0:	e5943000 	ldr	r3, [r4]
   385d4:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   385d8:	e1530008 	cmp	r3, r8
   385dc:	05c410a8 	strbeq	r1, [r4, #168]	; 0xa8
   385e0:	0affffd7 	beq	38544 <McTerminal::setupMachine(char const*, char const*)+0x60>
   385e4:	e1a00004 	mov	r0, r4
   385e8:	e12fff33 	blx	r3
   385ec:	eaffffd4 	b	38544 <McTerminal::setupMachine(char const*, char const*)+0x60>
   385f0:	e59f5054 	ldr	r5, [pc, #84]	; 3864c <McTerminal::setupMachine(char const*, char const*)+0x168>
   385f4:	e3a04000 	mov	r4, #0
   385f8:	e59f8064 	ldr	r8, [pc, #100]	; 38664 <McTerminal::setupMachine(char const*, char const*)+0x180>
   385fc:	e2859004 	add	r9, r5, #4
   38600:	ea000000 	b	38608 <McTerminal::setupMachine(char const*, char const*)+0x124>
   38604:	e2844001 	add	r4, r4, #1
   38608:	e1a00009 	mov	r0, r9
   3860c:	eb0015c9 	bl	3dd38 <KeyConversion::getNumTypes()>
   38610:	e1500004 	cmp	r0, r4
   38614:	9affffd2 	bls	38564 <McTerminal::setupMachine(char const*, char const*)+0x80>
   38618:	e5b81004 	ldr	r1, [r8, #4]!
   3861c:	e28d006c 	add	r0, sp, #108	; 0x6c
   38620:	ebffc664 	bl	29fb8 <strcasecmp>
   38624:	e3500000 	cmp	r0, #0
   38628:	1afffff5 	bne	38604 <McTerminal::setupMachine(char const*, char const*)+0x120>
   3862c:	e5854004 	str	r4, [r5, #4]
   38630:	eaffffcb 	b	38564 <McTerminal::setupMachine(char const*, char const*)+0x80>
   38634:	e1a00004 	mov	r0, r4
   38638:	e12fff33 	blx	r3
   3863c:	eaffffb9 	b	38528 <McTerminal::setupMachine(char const*, char const*)+0x44>
   38640:	00037a38 	.word	0x00037a38
   38644:	00046c48 	.word	0x00046c48
   38648:	00046c54 	.word	0x00046c54
   3864c:	00050960 	.word	0x00050960
   38650:	0004631c 	.word	0x0004631c
   38654:	00046318 	.word	0x00046318
   38658:	0004da44 	.word	0x0004da44
   3865c:	00046c64 	.word	0x00046c64
   38660:	00046c40 	.word	0x00046c40
   38664:	0004da40 	.word	0x0004da40

00038668 <McTerminal::McTerminal(McManager&, BusAccess&)>:
   38668:	e3a03002 	mov	r3, #2
   3866c:	e92d4070 	push	{r4, r5, r6, lr}
   38670:	e1a04000 	mov	r4, r0
   38674:	e24dd008 	sub	sp, sp, #8
   38678:	e58d3000 	str	r3, [sp]
   3867c:	e59f3110 	ldr	r3, [pc, #272]	; 38794 <McTerminal::McTerminal(McManager&, BusAccess&)+0x12c>
   38680:	eb00016b 	bl	38c34 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)>
   38684:	e1a03004 	mov	r3, r4
   38688:	e3a0c020 	mov	ip, #32
   3868c:	e3a0000f 	mov	r0, #15
   38690:	e3a02000 	mov	r2, #0
   38694:	e59fe0fc 	ldr	lr, [pc, #252]	; 38798 <McTerminal::McTerminal(McManager&, BusAccess&)+0x130>
   38698:	e2841bc3 	add	r1, r4, #199680	; 0x30c00
   3869c:	e483e0e4 	str	lr, [r3], #228	; 0xe4
   386a0:	e2811f89 	add	r1, r1, #548	; 0x224
   386a4:	e5c3c000 	strb	ip, [r3]
   386a8:	e5c30001 	strb	r0, [r3, #1]
   386ac:	e5c32002 	strb	r2, [r3, #2]
   386b0:	e5c32003 	strb	r2, [r3, #3]
   386b4:	e2833004 	add	r3, r3, #4
   386b8:	e1530001 	cmp	r3, r1
   386bc:	1afffff8 	bne	386a4 <McTerminal::McTerminal(McManager&, BusAccess&)+0x3c>
   386c0:	e3a00020 	mov	r0, #32
   386c4:	e3a0c00f 	mov	ip, #15
   386c8:	e3a02000 	mov	r2, #0
   386cc:	e59f10c8 	ldr	r1, [pc, #200]	; 3879c <McTerminal::McTerminal(McManager&, BusAccess&)+0x134>
   386d0:	e0841001 	add	r1, r4, r1
   386d4:	e5c30000 	strb	r0, [r3]
   386d8:	e5c3c001 	strb	ip, [r3, #1]
   386dc:	e5c32002 	strb	r2, [r3, #2]
   386e0:	e5c32003 	strb	r2, [r3, #3]
   386e4:	e2833004 	add	r3, r3, #4
   386e8:	e1510003 	cmp	r1, r3
   386ec:	1afffff8 	bne	386d4 <McTerminal::McTerminal(McManager&, BusAccess&)+0x6c>
   386f0:	e3a0105f 	mov	r1, #95	; 0x5f
   386f4:	e2845a61 	add	r5, r4, #397312	; 0x61000
   386f8:	e59f30a0 	ldr	r3, [pc, #160]	; 387a0 <McTerminal::McTerminal(McManager&, BusAccess&)+0x138>
   386fc:	e285ceb7 	add	ip, r5, #2928	; 0xb70
   38700:	e5852b70 	str	r2, [r5, #2928]	; 0xb70
   38704:	e5852b74 	str	r2, [r5, #2932]	; 0xb74
   38708:	e1cc20b8 	strh	r2, [ip, #8]
   3870c:	e5852b8c 	str	r2, [r5, #2956]	; 0xb8c
   38710:	e5853b94 	str	r3, [r5, #2964]	; 0xb94
   38714:	e5c52b7a 	strb	r2, [r5, #2938]	; 0xb7a
   38718:	e5852b90 	str	r2, [r5, #2960]	; 0xb90
   3871c:	e5851b7c 	str	r1, [r5, #2940]	; 0xb7c
   38720:	e5850b80 	str	r0, [r5, #2944]	; 0xb80
   38724:	e59f0078 	ldr	r0, [pc, #120]	; 387a4 <McTerminal::McTerminal(McManager&, BusAccess&)+0x13c>
   38728:	ebffc9dc 	bl	2aea0 <operator new(unsigned int)>
   3872c:	e1a06000 	mov	r6, r0
   38730:	eb0002bb 	bl	39224 <TermAnsi::TermAnsi()>
   38734:	e1a00006 	mov	r0, r6
   38738:	e3a02019 	mov	r2, #25
   3873c:	e3a01050 	mov	r1, #80	; 0x50
   38740:	e5856b88 	str	r6, [r5, #2952]	; 0xb88
   38744:	eb000a01 	bl	3af50 <TermAnsi::init(unsigned long, unsigned long)>
   38748:	e3a03000 	mov	r3, #0
   3874c:	e3e00000 	mvn	r0, #0
   38750:	e59f2050 	ldr	r2, [pc, #80]	; 387a8 <McTerminal::McTerminal(McManager&, BusAccess&)+0x140>
   38754:	e59f1050 	ldr	r1, [pc, #80]	; 387ac <McTerminal::McTerminal(McManager&, BusAccess&)+0x144>
   38758:	e0842002 	add	r2, r4, r2
   3875c:	e7c20103 	strb	r0, [r2, r3, lsl #2]
   38760:	e2833001 	add	r3, r3, #1
   38764:	e1530001 	cmp	r3, r1
   38768:	1afffffb 	bne	3875c <McTerminal::McTerminal(McManager&, BusAccess&)+0xf4>
   3876c:	e3a03000 	mov	r3, #0
   38770:	e3a01f7d 	mov	r1, #500	; 0x1f4
   38774:	e1a00004 	mov	r0, r4
   38778:	e59f2030 	ldr	r2, [pc, #48]	; 387b0 <McTerminal::McTerminal(McManager&, BusAccess&)+0x148>
   3877c:	e5853b64 	str	r3, [r5, #2916]	; 0xb64
   38780:	e5c53b6c 	strb	r3, [r5, #2924]	; 0xb6c
   38784:	e5851b68 	str	r1, [r5, #2920]	; 0xb68
   38788:	e5852b84 	str	r2, [r5, #2948]	; 0xb84
   3878c:	e28dd008 	add	sp, sp, #8
   38790:	e8bd8070 	pop	{r4, r5, r6, pc}
   38794:	00047ce0 	.word	0x00047ce0
   38798:	00046c98 	.word	0x00046c98
   3879c:	00061b64 	.word	0x00061b64
   387a0:	00001388 	.word	0x00001388
   387a4:	000008ac 	.word	0x000008ac
   387a8:	00030e27 	.word	0x00030e27
   387ac:	0000c350 	.word	0x0000c350
   387b0:	00000101 	.word	0x00000101

000387b4 <DisplayBase::foreground(DISPLAY_FX_COLOUR)>:
   387b4:	e12fff1e 	bx	lr

000387b8 <DisplayBase::background(DISPLAY_FX_COLOUR)>:
   387b8:	e12fff1e 	bx	lr

000387bc <TermEmu::hasChanged()>:
   387bc:	e5d0001c 	ldrb	r0, [r0, #28]
   387c0:	e12fff1e 	bx	lr

000387c4 <_GLOBAL__sub_I__ZN10McTerminal14_keyConversionE>:
   387c4:	e3a02000 	mov	r2, #0
   387c8:	e59f3004 	ldr	r3, [pc, #4]	; 387d4 <_GLOBAL__sub_I__ZN10McTerminal14_keyConversionE+0x10>
   387cc:	e5832004 	str	r2, [r3, #4]
   387d0:	e12fff1e 	bx	lr
   387d4:	00050960 	.word	0x00050960

000387d8 <McBase::getDescriptorTable()>:
   387d8:	e280000c 	add	r0, r0, #12
   387dc:	e12fff1e 	bx	lr

000387e0 <McBase::getMachineName()>:
   387e0:	e280000c 	add	r0, r0, #12
   387e4:	e12fff1e 	bx	lr

000387e8 <McBase::machineHeartbeat()>:
   387e8:	e12fff1e 	bx	lr

000387ec <McBase::reset(bool, bool)>:
   387ec:	e3a00000 	mov	r0, #0
   387f0:	e12fff1e 	bx	lr

000387f4 <McBase::canProcFileType(char const*)>:
   387f4:	e3a00000 	mov	r0, #0
   387f8:	e12fff1e 	bx	lr

000387fc <McBase::getHwManager()>:
   387fc:	e5903004 	ldr	r3, [r0, #4]
   38800:	e5930008 	ldr	r0, [r3, #8]
   38804:	e12fff1e 	bx	lr

00038808 <McBase::getTargetProgrammer()>:
   38808:	e5903004 	ldr	r3, [r0, #4]
   3880c:	e5930010 	ldr	r0, [r3, #16]
   38810:	e12fff1e 	bx	lr

00038814 <McBase::isCalled(char const*, unsigned long&)>:
   38814:	e59030d8 	ldr	r3, [r0, #216]	; 0xd8
   38818:	e3530000 	cmp	r3, #0
   3881c:	0a000014 	beq	38874 <McBase::isCalled(char const*, unsigned long&)+0x60>
   38820:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   38824:	e1a06000 	mov	r6, r0
   38828:	e1a07001 	mov	r7, r1
   3882c:	e1a08002 	mov	r8, r2
   38830:	e3a04000 	mov	r4, #0
   38834:	e28050ac 	add	r5, r0, #172	; 0xac
   38838:	ea000003 	b	3884c <McBase::isCalled(char const*, unsigned long&)+0x38>
   3883c:	e59630d8 	ldr	r3, [r6, #216]	; 0xd8
   38840:	e2844001 	add	r4, r4, #1
   38844:	e1530004 	cmp	r3, r4
   38848:	9a000007 	bls	3886c <McBase::isCalled(char const*, unsigned long&)+0x58>
   3884c:	e1a01007 	mov	r1, r7
   38850:	e5b50004 	ldr	r0, [r5, #4]!
   38854:	ebffc5d7 	bl	29fb8 <strcasecmp>
   38858:	e3500000 	cmp	r0, #0
   3885c:	1afffff6 	bne	3883c <McBase::isCalled(char const*, unsigned long&)+0x28>
   38860:	e3a00001 	mov	r0, #1
   38864:	e5884000 	str	r4, [r8]
   38868:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3886c:	e3a00000 	mov	r0, #0
   38870:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   38874:	e3a00000 	mov	r0, #0
   38878:	e12fff1e 	bx	lr

0003887c <McBase::getMachineNames(char*, unsigned long)>:
   3887c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   38880:	e3a06000 	mov	r6, #0
   38884:	e5c16000 	strb	r6, [r1]
   38888:	e59030d8 	ldr	r3, [r0, #216]	; 0xd8
   3888c:	e1530006 	cmp	r3, r6
   38890:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   38894:	e1a04001 	mov	r4, r1
   38898:	e1a09000 	mov	r9, r0
   3889c:	e1a05002 	mov	r5, r2
   388a0:	e59f7058 	ldr	r7, [pc, #88]	; 38900 <McBase::getMachineNames(char*, unsigned long)+0x84>
   388a4:	e59fa058 	ldr	sl, [pc, #88]	; 38904 <McBase::getMachineNames(char*, unsigned long)+0x88>
   388a8:	e28080ac 	add	r8, r0, #172	; 0xac
   388ac:	e1a02005 	mov	r2, r5
   388b0:	e1a01007 	mov	r1, r7
   388b4:	e1a00004 	mov	r0, r4
   388b8:	ebffd559 	bl	2de24 <strlcat>
   388bc:	e1a02005 	mov	r2, r5
   388c0:	e5b81004 	ldr	r1, [r8, #4]!
   388c4:	e1a00004 	mov	r0, r4
   388c8:	ebffd555 	bl	2de24 <strlcat>
   388cc:	e1a02005 	mov	r2, r5
   388d0:	e1a01007 	mov	r1, r7
   388d4:	e1a00004 	mov	r0, r4
   388d8:	ebffd551 	bl	2de24 <strlcat>
   388dc:	e59930d8 	ldr	r3, [r9, #216]	; 0xd8
   388e0:	e2866001 	add	r6, r6, #1
   388e4:	e1560003 	cmp	r6, r3
   388e8:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
   388ec:	e1a02005 	mov	r2, r5
   388f0:	e1a0100a 	mov	r1, sl
   388f4:	e1a00004 	mov	r0, r4
   388f8:	ebffd549 	bl	2de24 <strlcat>
   388fc:	eaffffea 	b	388ac <McBase::getMachineNames(char*, unsigned long)+0x30>
   38900:	00046864 	.word	0x00046864
   38904:	00041480 	.word	0x00041480

00038908 <McBase::setupDisplay(DisplayBase*)>:
   38908:	e92d4070 	push	{r4, r5, r6, lr}
   3890c:	e1a04000 	mov	r4, r0
   38910:	e1a05001 	mov	r5, r1
   38914:	e24dd018 	sub	sp, sp, #24
   38918:	e58010e0 	str	r1, [r0, #224]	; 0xe0
   3891c:	ebffb840 	bl	26a24 <CLogger::Get()>
   38920:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
   38924:	e5943078 	ldr	r3, [r4, #120]	; 0x78
   38928:	e59f107c 	ldr	r1, [pc, #124]	; 389ac <McBase::setupDisplay(DisplayBase*)+0xa4>
   3892c:	e58d2004 	str	r2, [sp, #4]
   38930:	e58d3000 	str	r3, [sp]
   38934:	e3a02004 	mov	r2, #4
   38938:	e59f3070 	ldr	r3, [pc, #112]	; 389b0 <McBase::setupDisplay(DisplayBase*)+0xa8>
   3893c:	ebffb77a 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   38940:	e3550000 	cmp	r5, #0
   38944:	0a000004 	beq	3895c <McBase::setupDisplay(DisplayBase*)+0x54>
   38948:	e5952000 	ldr	r2, [r5]
   3894c:	e59f3060 	ldr	r3, [pc, #96]	; 389b4 <McBase::setupDisplay(DisplayBase*)+0xac>
   38950:	e5926030 	ldr	r6, [r2, #48]	; 0x30
   38954:	e1560003 	cmp	r6, r3
   38958:	1a000001 	bne	38964 <McBase::setupDisplay(DisplayBase*)+0x5c>
   3895c:	e28dd018 	add	sp, sp, #24
   38960:	e8bd8070 	pop	{r4, r5, r6, pc}
   38964:	e5941098 	ldr	r1, [r4, #152]	; 0x98
   38968:	e5942094 	ldr	r2, [r4, #148]	; 0x94
   3896c:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   38970:	e58d1014 	str	r1, [sp, #20]
   38974:	e594108c 	ldr	r1, [r4, #140]	; 0x8c
   38978:	e58d2010 	str	r2, [sp, #16]
   3897c:	e5942088 	ldr	r2, [r4, #136]	; 0x88
   38980:	e58d300c 	str	r3, [sp, #12]
   38984:	e5943084 	ldr	r3, [r4, #132]	; 0x84
   38988:	e58d1008 	str	r1, [sp, #8]
   3898c:	e58d2004 	str	r2, [sp, #4]
   38990:	e58d3000 	str	r3, [sp]
   38994:	e1a00005 	mov	r0, r5
   38998:	e1c427dc 	ldrd	r2, [r4, #124]	; 0x7c
   3899c:	e5941078 	ldr	r1, [r4, #120]	; 0x78
   389a0:	e12fff36 	blx	r6
   389a4:	e28dd018 	add	sp, sp, #24
   389a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   389ac:	00046d6c 	.word	0x00046d6c
   389b0:	00046d08 	.word	0x00046d08
   389b4:	00038cec 	.word	0x00038cec

000389b8 <McBase::setupMachine(char const*, char const*)>:
   389b8:	e3a0c000 	mov	ip, #0
   389bc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   389c0:	e5903000 	ldr	r3, [r0]
   389c4:	e24dd070 	sub	sp, sp, #112	; 0x70
   389c8:	e1a05002 	mov	r5, r2
   389cc:	e5933000 	ldr	r3, [r3]
   389d0:	e58dc008 	str	ip, [sp, #8]
   389d4:	e28d2008 	add	r2, sp, #8
   389d8:	e1a04000 	mov	r4, r0
   389dc:	e1a06001 	mov	r6, r1
   389e0:	e12fff33 	blx	r3
   389e4:	e2507000 	subs	r7, r0, #0
   389e8:	0a00006a 	beq	38b98 <McBase::setupMachine(char const*, char const*)+0x1e0>
   389ec:	e59d3008 	ldr	r3, [sp, #8]
   389f0:	e284600c 	add	r6, r4, #12
   389f4:	e283202c 	add	r2, r3, #44	; 0x2c
   389f8:	e7941102 	ldr	r1, [r4, r2, lsl #2]
   389fc:	e58430dc 	str	r3, [r4, #220]	; 0xdc
   38a00:	e3a020a4 	mov	r2, #164	; 0xa4
   38a04:	e1a00006 	mov	r0, r6
   38a08:	ebffc73e 	bl	2a708 <memcpy>
   38a0c:	ebffb804 	bl	26a24 <CLogger::Get()>
   38a10:	e5943000 	ldr	r3, [r4]
   38a14:	e59f81f0 	ldr	r8, [pc, #496]	; 38c0c <McBase::setupMachine(char const*, char const*)+0x254>
   38a18:	e5933008 	ldr	r3, [r3, #8]
   38a1c:	e1a09000 	mov	r9, r0
   38a20:	e1530008 	cmp	r3, r8
   38a24:	01a00006 	moveq	r0, r6
   38a28:	1a000067 	bne	38bcc <McBase::setupMachine(char const*, char const*)+0x214>
   38a2c:	e3a02004 	mov	r2, #4
   38a30:	e59f31d8 	ldr	r3, [pc, #472]	; 38c10 <McBase::setupMachine(char const*, char const*)+0x258>
   38a34:	e59f11d8 	ldr	r1, [pc, #472]	; 38c14 <McBase::setupMachine(char const*, char const*)+0x25c>
   38a38:	e58d0000 	str	r0, [sp]
   38a3c:	e1a00009 	mov	r0, r9
   38a40:	ebffb739 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   38a44:	e5943000 	ldr	r3, [r4]
   38a48:	e59f11c8 	ldr	r1, [pc, #456]	; 38c18 <McBase::setupMachine(char const*, char const*)+0x260>
   38a4c:	e593201c 	ldr	r2, [r3, #28]
   38a50:	e1520001 	cmp	r2, r1
   38a54:	1a000068 	bne	38bfc <McBase::setupMachine(char const*, char const*)+0x244>
   38a58:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   38a5c:	e59f91b8 	ldr	r9, [pc, #440]	; 38c1c <McBase::setupMachine(char const*, char const*)+0x264>
   38a60:	e1530009 	cmp	r3, r9
   38a64:	1a00005e 	bne	38be4 <McBase::setupMachine(char const*, char const*)+0x22c>
   38a68:	e5943004 	ldr	r3, [r4, #4]
   38a6c:	e5930008 	ldr	r0, [r3, #8]
   38a70:	ebffee7c 	bl	34468 <HwManager::disableAll()>
   38a74:	e5943000 	ldr	r3, [r4]
   38a78:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   38a7c:	e1530009 	cmp	r3, r9
   38a80:	1a00005a 	bne	38bf0 <McBase::setupMachine(char const*, char const*)+0x238>
   38a84:	e5943004 	ldr	r3, [r4, #4]
   38a88:	e5930008 	ldr	r0, [r3, #8]
   38a8c:	e1a02005 	mov	r2, r5
   38a90:	e59f1188 	ldr	r1, [pc, #392]	; 38c20 <McBase::setupMachine(char const*, char const*)+0x268>
   38a94:	ebffef41 	bl	347a0 <HwManager::setupFromJson(char const*, char const*)>
   38a98:	e594c004 	ldr	ip, [r4, #4]
   38a9c:	e1a01005 	mov	r1, r5
   38aa0:	e3a03064 	mov	r3, #100	; 0x64
   38aa4:	e59f0178 	ldr	r0, [pc, #376]	; 38c24 <McBase::setupMachine(char const*, char const*)+0x26c>
   38aa8:	e28d200c 	add	r2, sp, #12
   38aac:	e59c500c 	ldr	r5, [ip, #12]
   38ab0:	e59490a0 	ldr	r9, [r4, #160]	; 0xa0
   38ab4:	ebffd56b 	bl	2e068 <jsonGetValueForKey>
   38ab8:	e3500000 	cmp	r0, #0
   38abc:	1a000027 	bne	38b60 <McBase::setupMachine(char const*, char const*)+0x1a8>
   38ac0:	e1a00005 	mov	r0, r5
   38ac4:	ebffe826 	bl	32b64 <BusAccess::clockGetMinFreqHz()>
   38ac8:	e1500009 	cmp	r0, r9
   38acc:	9a000016 	bls	38b2c <McBase::setupMachine(char const*, char const*)+0x174>
   38ad0:	e1a00005 	mov	r0, r5
   38ad4:	e3a01000 	mov	r1, #0
   38ad8:	ebffe7ac 	bl	32990 <BusAccess::clockEnable(bool)>
   38adc:	e5943000 	ldr	r3, [r4]
   38ae0:	e59f2140 	ldr	r2, [pc, #320]	; 38c28 <McBase::setupMachine(char const*, char const*)+0x270>
   38ae4:	e5933018 	ldr	r3, [r3, #24]
   38ae8:	e1530002 	cmp	r3, r2
   38aec:	1a000039 	bne	38bd8 <McBase::setupMachine(char const*, char const*)+0x220>
   38af0:	ebffb7cb 	bl	26a24 <CLogger::Get()>
   38af4:	e5943000 	ldr	r3, [r4]
   38af8:	e1a05000 	mov	r5, r0
   38afc:	e5933008 	ldr	r3, [r3, #8]
   38b00:	e1530008 	cmp	r3, r8
   38b04:	1a00002c 	bne	38bbc <McBase::setupMachine(char const*, char const*)+0x204>
   38b08:	e1a00005 	mov	r0, r5
   38b0c:	e3a02004 	mov	r2, #4
   38b10:	e59f3114 	ldr	r3, [pc, #276]	; 38c2c <McBase::setupMachine(char const*, char const*)+0x274>
   38b14:	e59f10f8 	ldr	r1, [pc, #248]	; 38c14 <McBase::setupMachine(char const*, char const*)+0x25c>
   38b18:	e58d6000 	str	r6, [sp]
   38b1c:	ebffb702 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   38b20:	e1a00007 	mov	r0, r7
   38b24:	e28dd070 	add	sp, sp, #112	; 0x70
   38b28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   38b2c:	e1a00005 	mov	r0, r5
   38b30:	ebffe80d 	bl	32b6c <BusAccess::clockGetMaxFreqHz()>
   38b34:	e1500009 	cmp	r0, r9
   38b38:	3affffe4 	bcc	38ad0 <McBase::setupMachine(char const*, char const*)+0x118>
   38b3c:	e1a00005 	mov	r0, r5
   38b40:	ebffe68f 	bl	32584 <BusAccess::clockSetup()>
   38b44:	e1a01009 	mov	r1, r9
   38b48:	e1a00005 	mov	r0, r5
   38b4c:	ebffe705 	bl	32768 <BusAccess::clockSetFreqHz(unsigned long)>
   38b50:	e1a00005 	mov	r0, r5
   38b54:	e3a01001 	mov	r1, #1
   38b58:	ebffe78c 	bl	32990 <BusAccess::clockEnable(bool)>
   38b5c:	eaffffde 	b	38adc <McBase::setupMachine(char const*, char const*)+0x124>
   38b60:	e3a0200a 	mov	r2, #10
   38b64:	e3a01000 	mov	r1, #0
   38b68:	e28d000c 	add	r0, sp, #12
   38b6c:	ebffc612 	bl	2a3bc <strtoul>
   38b70:	e1a0a000 	mov	sl, r0
   38b74:	e1a00005 	mov	r0, r5
   38b78:	ebffe7f9 	bl	32b64 <BusAccess::clockGetMinFreqHz()>
   38b7c:	e150000a 	cmp	r0, sl
   38b80:	8affffce 	bhi	38ac0 <McBase::setupMachine(char const*, char const*)+0x108>
   38b84:	e1a00005 	mov	r0, r5
   38b88:	ebffe7f7 	bl	32b6c <BusAccess::clockGetMaxFreqHz()>
   38b8c:	e150000a 	cmp	r0, sl
   38b90:	21a0900a 	movcs	r9, sl
   38b94:	eaffffc9 	b	38ac0 <McBase::setupMachine(char const*, char const*)+0x108>
   38b98:	ebffb7a1 	bl	26a24 <CLogger::Get()>
   38b9c:	e3a02002 	mov	r2, #2
   38ba0:	e59f3088 	ldr	r3, [pc, #136]	; 38c30 <McBase::setupMachine(char const*, char const*)+0x278>
   38ba4:	e59f1068 	ldr	r1, [pc, #104]	; 38c14 <McBase::setupMachine(char const*, char const*)+0x25c>
   38ba8:	e58d6000 	str	r6, [sp]
   38bac:	ebffb6de 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   38bb0:	e1a00007 	mov	r0, r7
   38bb4:	e28dd070 	add	sp, sp, #112	; 0x70
   38bb8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   38bbc:	e1a00004 	mov	r0, r4
   38bc0:	e12fff33 	blx	r3
   38bc4:	e1a06000 	mov	r6, r0
   38bc8:	eaffffce 	b	38b08 <McBase::setupMachine(char const*, char const*)+0x150>
   38bcc:	e1a00004 	mov	r0, r4
   38bd0:	e12fff33 	blx	r3
   38bd4:	eaffff94 	b	38a2c <McBase::setupMachine(char const*, char const*)+0x74>
   38bd8:	e1a00004 	mov	r0, r4
   38bdc:	e12fff33 	blx	r3
   38be0:	eaffffc2 	b	38af0 <McBase::setupMachine(char const*, char const*)+0x138>
   38be4:	e1a00004 	mov	r0, r4
   38be8:	e12fff33 	blx	r3
   38bec:	eaffff9f 	b	38a70 <McBase::setupMachine(char const*, char const*)+0xb8>
   38bf0:	e1a00004 	mov	r0, r4
   38bf4:	e12fff33 	blx	r3
   38bf8:	eaffffa3 	b	38a8c <McBase::setupMachine(char const*, char const*)+0xd4>
   38bfc:	e1a00004 	mov	r0, r4
   38c00:	e12fff32 	blx	r2
   38c04:	e5943000 	ldr	r3, [r4]
   38c08:	eaffff92 	b	38a58 <McBase::setupMachine(char const*, char const*)+0xa0>
   38c0c:	000387e0 	.word	0x000387e0
   38c10:	00046d4c 	.word	0x00046d4c
   38c14:	00046d6c 	.word	0x00046d6c
   38c18:	00038cf4 	.word	0x00038cf4
   38c1c:	000387fc 	.word	0x000387fc
   38c20:	00046d5c 	.word	0x00046d5c
   38c24:	00046874 	.word	0x00046874
   38c28:	00038cf0 	.word	0x00038cf0
   38c2c:	00046d60 	.word	0x00046d60
   38c30:	00046d28 	.word	0x00046d28

00038c34 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)>:
   38c34:	e92d4070 	push	{r4, r5, r6, lr}
   38c38:	e1a05000 	mov	r5, r0
   38c3c:	e1a06001 	mov	r6, r1
   38c40:	e59d0010 	ldr	r0, [sp, #16]
   38c44:	e59f1098 	ldr	r1, [pc, #152]	; 38ce4 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)+0xb0>
   38c48:	e3500000 	cmp	r0, #0
   38c4c:	e5856004 	str	r6, [r5, #4]
   38c50:	e5852008 	str	r2, [r5, #8]
   38c54:	e5851000 	str	r1, [r5]
   38c58:	0a000019 	beq	38cc4 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)+0x90>
   38c5c:	e1a0e003 	mov	lr, r3
   38c60:	e3a02000 	mov	r2, #0
   38c64:	e28540ac 	add	r4, r5, #172	; 0xac
   38c68:	e2822001 	add	r2, r2, #1
   38c6c:	e3520009 	cmp	r2, #9
   38c70:	93a0c000 	movls	ip, #0
   38c74:	83a0c001 	movhi	ip, #1
   38c78:	e1500002 	cmp	r0, r2
   38c7c:	938cc001 	orrls	ip, ip, #1
   38c80:	e35c0000 	cmp	ip, #0
   38c84:	e5a4e004 	str	lr, [r4, #4]!
   38c88:	e28ee0a4 	add	lr, lr, #164	; 0xa4
   38c8c:	0afffff5 	beq	38c68 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)+0x34>
   38c90:	e3a02000 	mov	r2, #0
   38c94:	e58500d8 	str	r0, [r5, #216]	; 0xd8
   38c98:	e58520e0 	str	r2, [r5, #224]	; 0xe0
   38c9c:	e58520dc 	str	r2, [r5, #220]	; 0xdc
   38ca0:	e1a01003 	mov	r1, r3
   38ca4:	e3a020a4 	mov	r2, #164	; 0xa4
   38ca8:	e285000c 	add	r0, r5, #12
   38cac:	ebffc695 	bl	2a708 <memcpy>
   38cb0:	e1a00006 	mov	r0, r6
   38cb4:	e1a01005 	mov	r1, r5
   38cb8:	ebfff699 	bl	36724 <McManager::add(McBase*)>
   38cbc:	e1a00005 	mov	r0, r5
   38cc0:	e8bd8070 	pop	{r4, r5, r6, pc}
   38cc4:	e58500d8 	str	r0, [r5, #216]	; 0xd8
   38cc8:	e58500e0 	str	r0, [r5, #224]	; 0xe0
   38ccc:	e58500dc 	str	r0, [r5, #220]	; 0xdc
   38cd0:	e3a020a4 	mov	r2, #164	; 0xa4
   38cd4:	e59f100c 	ldr	r1, [pc, #12]	; 38ce8 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)+0xb4>
   38cd8:	e285000c 	add	r0, r5, #12
   38cdc:	ebffc689 	bl	2a708 <memcpy>
   38ce0:	eafffff2 	b	38cb0 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)+0x7c>
   38ce4:	00046d7c 	.word	0x00046d7c
   38ce8:	00047e28 	.word	0x00047e28

00038cec <DisplayBase::targetLayout(int, int, int, int, int, int, WgfxFont*, int, int)>:
   38cec:	e12fff1e 	bx	lr

00038cf0 <McBase::enableMachine()>:
   38cf0:	e12fff1e 	bx	lr

00038cf4 <McBase::disableMachine()>:
   38cf4:	e12fff1e 	bx	lr

00038cf8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)>:
   38cf8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38cfc:	e1a04001 	mov	r4, r1
   38d00:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
   38d04:	e1a05000 	mov	r5, r0
   38d08:	e1a00001 	mov	r0, r1
   38d0c:	e3a0100c 	mov	r1, #12
   38d10:	e1a07002 	mov	r7, r2
   38d14:	eb000b1c 	bl	3b98c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   38d18:	e1a00004 	mov	r0, r4
   38d1c:	e59f1450 	ldr	r1, [pc, #1104]	; 39174 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x47c>
   38d20:	eb000b0a 	bl	3b950 <Display::consolePut(char const*)>
   38d24:	e1a00004 	mov	r0, r4
   38d28:	e3a0100f 	mov	r1, #15
   38d2c:	eb000b16 	bl	3b98c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   38d30:	e59f8440 	ldr	r8, [pc, #1088]	; 39178 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x480>
   38d34:	e1a00004 	mov	r0, r4
   38d38:	e59f143c 	ldr	r1, [pc, #1084]	; 3917c <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x484>
   38d3c:	eb000b03 	bl	3b950 <Display::consolePut(char const*)>
   38d40:	e1a00004 	mov	r0, r4
   38d44:	e59f1434 	ldr	r1, [pc, #1076]	; 39180 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x488>
   38d48:	eb000b00 	bl	3b950 <Display::consolePut(char const*)>
   38d4c:	e1a0e008 	mov	lr, r8
   38d50:	e28dc010 	add	ip, sp, #16
   38d54:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   38d58:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   38d5c:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
   38d60:	e88c000f 	stm	ip, {r0, r1, r2, r3}
   38d64:	ebffd3d9 	bl	2dcd0 <millis>
   38d68:	e1a00005 	mov	r0, r5
   38d6c:	ebff423f 	bl	9670 <BusRaiderApp::selfTestHelperService()>
   38d70:	e1a00004 	mov	r0, r4
   38d74:	e59f1408 	ldr	r1, [pc, #1032]	; 39184 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x48c>
   38d78:	eb000af4 	bl	3b950 <Display::consolePut(char const*)>
   38d7c:	e1a00005 	mov	r0, r5
   38d80:	ebff423a 	bl	9670 <BusRaiderApp::selfTestHelperService()>
   38d84:	e1a00005 	mov	r0, r5
   38d88:	ebff4239 	bl	9674 <BusRaiderApp::selfTestKeyboardGet()>
   38d8c:	e6af6070 	sxtb	r6, r0
   38d90:	e1a00006 	mov	r0, r6
   38d94:	ebffd5a4 	bl	2e42c <rdtolower>
   38d98:	e3500079 	cmp	r0, #121	; 0x79
   38d9c:	0a000006 	beq	38dbc <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0xc4>
   38da0:	e1a00006 	mov	r0, r6
   38da4:	ebffd5a0 	bl	2e42c <rdtolower>
   38da8:	e350006e 	cmp	r0, #110	; 0x6e
   38dac:	0a0000d1 	beq	390f8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x400>
   38db0:	e1a00005 	mov	r0, r5
   38db4:	ebff422d 	bl	9670 <BusRaiderApp::selfTestHelperService()>
   38db8:	eafffff1 	b	38d84 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x8c>
   38dbc:	e59f13c4 	ldr	r1, [pc, #964]	; 39188 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x490>
   38dc0:	e1a00004 	mov	r0, r4
   38dc4:	eb000ae1 	bl	3b950 <Display::consolePut(char const*)>
   38dc8:	ebffd3c0 	bl	2dcd0 <millis>
   38dcc:	e1a00005 	mov	r0, r5
   38dd0:	ebff4226 	bl	9670 <BusRaiderApp::selfTestHelperService()>
   38dd4:	e1a00007 	mov	r0, r7
   38dd8:	e3a01064 	mov	r1, #100	; 0x64
   38ddc:	eb0014f4 	bl	3e1b4 <BusAccess::rawBusControlTargetReset(unsigned long)>
   38de0:	e1a00005 	mov	r0, r5
   38de4:	ebff4221 	bl	9670 <BusRaiderApp::selfTestHelperService()>
   38de8:	e3a01001 	mov	r1, #1
   38dec:	e1a00007 	mov	r0, r7
   38df0:	ebffe90d 	bl	3322c <BusAccess::waitSystemSuspend(bool)>
   38df4:	e1a00007 	mov	r0, r7
   38df8:	ebffe798 	bl	32c60 <BusAccess::controlRequestAndTake()>
   38dfc:	e2506000 	subs	r6, r0, #0
   38e00:	1a000082 	bne	39010 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x318>
   38e04:	e1a00005 	mov	r0, r5
   38e08:	e1a0a006 	mov	sl, r6
   38e0c:	ebff4217 	bl	9670 <BusRaiderApp::selfTestHelperService()>
   38e10:	e28d8010 	add	r8, sp, #16
   38e14:	e28d9030 	add	r9, sp, #48	; 0x30
   38e18:	e5981004 	ldr	r1, [r8, #4]
   38e1c:	e5983000 	ldr	r3, [r8]
   38e20:	e1a00009 	mov	r0, r9
   38e24:	e0832001 	add	r2, r3, r1
   38e28:	e2422001 	sub	r2, r2, #1
   38e2c:	e58d1004 	str	r1, [sp, #4]
   38e30:	e58d2000 	str	r2, [sp]
   38e34:	e3a010c8 	mov	r1, #200	; 0xc8
   38e38:	e59f234c 	ldr	r2, [pc, #844]	; 3918c <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x494>
   38e3c:	ebffd448 	bl	2df64 <snprintf>
   38e40:	e1a01009 	mov	r1, r9
   38e44:	e1a00004 	mov	r0, r4
   38e48:	eb000ac0 	bl	3b950 <Display::consolePut(char const*)>
   38e4c:	e1a00005 	mov	r0, r5
   38e50:	ebff4206 	bl	9670 <BusRaiderApp::selfTestHelperService()>
   38e54:	e1a00005 	mov	r0, r5
   38e58:	ebff4205 	bl	9674 <BusRaiderApp::selfTestKeyboardGet()>
   38e5c:	e6afb070 	sxtb	fp, r0
   38e60:	e1a0000b 	mov	r0, fp
   38e64:	ebffd570 	bl	2e42c <rdtolower>
   38e68:	e3500079 	cmp	r0, #121	; 0x79
   38e6c:	0a000021 	beq	38ef8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x200>
   38e70:	e1a0000b 	mov	r0, fp
   38e74:	ebffd56c 	bl	2e42c <rdtolower>
   38e78:	e350006e 	cmp	r0, #110	; 0x6e
   38e7c:	1afffff2 	bne	38e4c <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x154>
   38e80:	e59f1308 	ldr	r1, [pc, #776]	; 39190 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x498>
   38e84:	e1a00004 	mov	r0, r4
   38e88:	eb000ab0 	bl	3b950 <Display::consolePut(char const*)>
   38e8c:	e2866001 	add	r6, r6, #1
   38e90:	ebffd38e 	bl	2dcd0 <millis>
   38e94:	e1a00005 	mov	r0, r5
   38e98:	ebff41f4 	bl	9670 <BusRaiderApp::selfTestHelperService()>
   38e9c:	e3560004 	cmp	r6, #4
   38ea0:	e2888008 	add	r8, r8, #8
   38ea4:	1a00003a 	bne	38f94 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x29c>
   38ea8:	e1a00005 	mov	r0, r5
   38eac:	ebff41ef 	bl	9670 <BusRaiderApp::selfTestHelperService()>
   38eb0:	e1a00007 	mov	r0, r7
   38eb4:	ebffe444 	bl	31fcc <BusAccess::controlRelease()>
   38eb8:	e1a00007 	mov	r0, r7
   38ebc:	e3a01000 	mov	r1, #0
   38ec0:	ebffe8d9 	bl	3322c <BusAccess::waitSystemSuspend(bool)>
   38ec4:	e35a0000 	cmp	sl, #0
   38ec8:	1a000083 	bne	390dc <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x3e4>
   38ecc:	e3a0100a 	mov	r1, #10
   38ed0:	e1a00004 	mov	r0, r4
   38ed4:	eb000aac 	bl	3b98c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   38ed8:	e59f12b4 	ldr	r1, [pc, #692]	; 39194 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x49c>
   38edc:	e1a00004 	mov	r0, r4
   38ee0:	eb000a9a 	bl	3b950 <Display::consolePut(char const*)>
   38ee4:	e1a00004 	mov	r0, r4
   38ee8:	e3a0100f 	mov	r1, #15
   38eec:	eb000aa6 	bl	3b98c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   38ef0:	e28dd0fc 	add	sp, sp, #252	; 0xfc
   38ef4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38ef8:	e59f1298 	ldr	r1, [pc, #664]	; 39198 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4a0>
   38efc:	e1a00004 	mov	r0, r4
   38f00:	eb000a92 	bl	3b950 <Display::consolePut(char const*)>
   38f04:	ebffd371 	bl	2dcd0 <millis>
   38f08:	e1a00005 	mov	r0, r5
   38f0c:	ebff41d7 	bl	9670 <BusRaiderApp::selfTestHelperService()>
   38f10:	e28d30f8 	add	r3, sp, #248	; 0xf8
   38f14:	e0833186 	add	r3, r3, r6, lsl #3
   38f18:	e513b0e8 	ldr	fp, [r3, #-232]	; 0xffffff18
   38f1c:	e51320e4 	ldr	r2, [r3, #-228]	; 0xffffff1c
   38f20:	e1a0100b 	mov	r1, fp
   38f24:	e1a00007 	mov	r0, r7
   38f28:	e58d200c 	str	r2, [sp, #12]
   38f2c:	eb00154c 	bl	3e464 <memTestDevice(BusAccess&, unsigned long, unsigned long)>
   38f30:	e2503000 	subs	r3, r0, #0
   38f34:	e59d200c 	ldr	r2, [sp, #12]
   38f38:	0a000018 	beq	38fa0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x2a8>
   38f3c:	e3a01009 	mov	r1, #9
   38f40:	e1a00004 	mov	r0, r4
   38f44:	e58d300c 	str	r3, [sp, #12]
   38f48:	eb000a8f 	bl	3b98c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   38f4c:	e59d300c 	ldr	r3, [sp, #12]
   38f50:	e59f2244 	ldr	r2, [pc, #580]	; 3919c <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4a4>
   38f54:	e3a01064 	mov	r1, #100	; 0x64
   38f58:	e1a00009 	mov	r0, r9
   38f5c:	ebffd400 	bl	2df64 <snprintf>
   38f60:	e1a01009 	mov	r1, r9
   38f64:	e1a00004 	mov	r0, r4
   38f68:	eb000a78 	bl	3b950 <Display::consolePut(char const*)>
   38f6c:	e1a00004 	mov	r0, r4
   38f70:	e3a0100f 	mov	r1, #15
   38f74:	eb000a84 	bl	3b98c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   38f78:	e1a00005 	mov	r0, r5
   38f7c:	e28aa001 	add	sl, sl, #1
   38f80:	ebff41ba 	bl	9670 <BusRaiderApp::selfTestHelperService()>
   38f84:	e2866001 	add	r6, r6, #1
   38f88:	e3560004 	cmp	r6, #4
   38f8c:	e2888008 	add	r8, r8, #8
   38f90:	0affffc4 	beq	38ea8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x1b0>
   38f94:	e1a00005 	mov	r0, r5
   38f98:	ebff41b4 	bl	9670 <BusRaiderApp::selfTestHelperService()>
   38f9c:	eaffff9d 	b	38e18 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x120>
   38fa0:	e1a0100b 	mov	r1, fp
   38fa4:	e1a00007 	mov	r0, r7
   38fa8:	eb0014c1 	bl	3e2b4 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)>
   38fac:	e2503000 	subs	r3, r0, #0
   38fb0:	1a000057 	bne	39114 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x41c>
   38fb4:	e1a0100b 	mov	r1, fp
   38fb8:	e1a00007 	mov	r0, r7
   38fbc:	eb00149d 	bl	3e238 <memTestDataBus(BusAccess&, unsigned long)>
   38fc0:	e250b000 	subs	fp, r0, #0
   38fc4:	0a000005 	beq	38fe0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x2e8>
   38fc8:	e3a01009 	mov	r1, #9
   38fcc:	e1a00004 	mov	r0, r4
   38fd0:	eb000a6d 	bl	3b98c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   38fd4:	e1a0300b 	mov	r3, fp
   38fd8:	e59f21c0 	ldr	r2, [pc, #448]	; 391a0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4a8>
   38fdc:	eaffffdc 	b	38f54 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x25c>
   38fe0:	e1a00004 	mov	r0, r4
   38fe4:	e3a0100a 	mov	r1, #10
   38fe8:	eb000a67 	bl	3b98c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   38fec:	e1a00004 	mov	r0, r4
   38ff0:	e59f11ac 	ldr	r1, [pc, #428]	; 391a4 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4ac>
   38ff4:	eb000a55 	bl	3b950 <Display::consolePut(char const*)>
   38ff8:	e1a00004 	mov	r0, r4
   38ffc:	e3a0100f 	mov	r1, #15
   39000:	eb000a61 	bl	3b98c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39004:	e1a00005 	mov	r0, r5
   39008:	ebff4198 	bl	9670 <BusRaiderApp::selfTestHelperService()>
   3900c:	eaffffdc 	b	38f84 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x28c>
   39010:	e3a01009 	mov	r1, #9
   39014:	e1a00004 	mov	r0, r4
   39018:	eb000a5b 	bl	3b98c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   3901c:	e59f1184 	ldr	r1, [pc, #388]	; 391a8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4b0>
   39020:	e1a00004 	mov	r0, r4
   39024:	eb000a49 	bl	3b950 <Display::consolePut(char const*)>
   39028:	e3560003 	cmp	r6, #3
   3902c:	90886106 	addls	r6, r8, r6, lsl #2
   39030:	95961020 	ldrls	r1, [r6, #32]
   39034:	859f1170 	ldrhi	r1, [pc, #368]	; 391ac <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4b4>
   39038:	e1a00004 	mov	r0, r4
   3903c:	eb000a43 	bl	3b950 <Display::consolePut(char const*)>
   39040:	e1a00004 	mov	r0, r4
   39044:	e59f1164 	ldr	r1, [pc, #356]	; 391b0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4b8>
   39048:	eb000a40 	bl	3b950 <Display::consolePut(char const*)>
   3904c:	e1a00004 	mov	r0, r4
   39050:	e59f115c 	ldr	r1, [pc, #348]	; 391b4 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4bc>
   39054:	eb000a3d 	bl	3b950 <Display::consolePut(char const*)>
   39058:	e1a00004 	mov	r0, r4
   3905c:	e59f1154 	ldr	r1, [pc, #340]	; 391b8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4c0>
   39060:	eb000a3a 	bl	3b950 <Display::consolePut(char const*)>
   39064:	e1a00004 	mov	r0, r4
   39068:	e59f114c 	ldr	r1, [pc, #332]	; 391bc <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4c4>
   3906c:	eb000a37 	bl	3b950 <Display::consolePut(char const*)>
   39070:	e1a00004 	mov	r0, r4
   39074:	e59f1144 	ldr	r1, [pc, #324]	; 391c0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4c8>
   39078:	eb000a34 	bl	3b950 <Display::consolePut(char const*)>
   3907c:	e3a0100f 	mov	r1, #15
   39080:	e1a00004 	mov	r0, r4
   39084:	eb000a40 	bl	3b98c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39088:	e1a00005 	mov	r0, r5
   3908c:	ebff4177 	bl	9670 <BusRaiderApp::selfTestHelperService()>
   39090:	e1a00007 	mov	r0, r7
   39094:	ebffe3cc 	bl	31fcc <BusAccess::controlRelease()>
   39098:	e1a00007 	mov	r0, r7
   3909c:	e3a01000 	mov	r1, #0
   390a0:	ebffe861 	bl	3322c <BusAccess::waitSystemSuspend(bool)>
   390a4:	e3a01009 	mov	r1, #9
   390a8:	e1a00004 	mov	r0, r4
   390ac:	eb000a36 	bl	3b98c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   390b0:	e28d9030 	add	r9, sp, #48	; 0x30
   390b4:	e3a0a001 	mov	sl, #1
   390b8:	e59f3104 	ldr	r3, [pc, #260]	; 391c4 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4cc>
   390bc:	e3a01064 	mov	r1, #100	; 0x64
   390c0:	e58d3000 	str	r3, [sp]
   390c4:	e1a00009 	mov	r0, r9
   390c8:	e1a0300a 	mov	r3, sl
   390cc:	e59f20f4 	ldr	r2, [pc, #244]	; 391c8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4d0>
   390d0:	ebffd3a3 	bl	2df64 <snprintf>
   390d4:	e1a01009 	mov	r1, r9
   390d8:	eaffff7f 	b	38edc <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x1e4>
   390dc:	e3a01009 	mov	r1, #9
   390e0:	e1a00004 	mov	r0, r4
   390e4:	eb000a28 	bl	3b98c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   390e8:	e35a0001 	cmp	sl, #1
   390ec:	159f30d8 	ldrne	r3, [pc, #216]	; 391cc <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4d4>
   390f0:	1afffff1 	bne	390bc <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x3c4>
   390f4:	eaffffee 	b	390b4 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x3bc>
   390f8:	e1a00004 	mov	r0, r4
   390fc:	e59f1084 	ldr	r1, [pc, #132]	; 39188 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x490>
   39100:	eb000a12 	bl	3b950 <Display::consolePut(char const*)>
   39104:	ebffd2f1 	bl	2dcd0 <millis>
   39108:	e1a00005 	mov	r0, r5
   3910c:	ebff4157 	bl	9670 <BusRaiderApp::selfTestHelperService()>
   39110:	eaffff34 	b	38de8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0xf0>
   39114:	e3a01009 	mov	r1, #9
   39118:	e1a00004 	mov	r0, r4
   3911c:	e58d300c 	str	r3, [sp, #12]
   39120:	eb000a19 	bl	3b98c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39124:	e59d300c 	ldr	r3, [sp, #12]
   39128:	e59f20a0 	ldr	r2, [pc, #160]	; 391d0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4d8>
   3912c:	e3a01064 	mov	r1, #100	; 0x64
   39130:	e1a00009 	mov	r0, r9
   39134:	ebffd38a 	bl	2df64 <snprintf>
   39138:	e1a01009 	mov	r1, r9
   3913c:	e1a00004 	mov	r0, r4
   39140:	eb000a02 	bl	3b950 <Display::consolePut(char const*)>
   39144:	e3a0100f 	mov	r1, #15
   39148:	e1a00004 	mov	r0, r4
   3914c:	eb000a0e 	bl	3b98c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39150:	e1a0100b 	mov	r1, fp
   39154:	e1a00007 	mov	r0, r7
   39158:	eb001436 	bl	3e238 <memTestDataBus(BusAccess&, unsigned long)>
   3915c:	e250b000 	subs	fp, r0, #0
   39160:	e28aa001 	add	sl, sl, #1
   39164:	1affff97 	bne	38fc8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x2d0>
   39168:	e1a00005 	mov	r0, r5
   3916c:	ebff413f 	bl	9670 <BusRaiderApp::selfTestHelperService()>
   39170:	eaffff83 	b	38f84 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x28c>
   39174:	00046dfc 	.word	0x00046dfc
   39178:	00047188 	.word	0x00047188
   3917c:	00046e0c 	.word	0x00046e0c
   39180:	00046e40 	.word	0x00046e40
   39184:	00046e68 	.word	0x00046e68
   39188:	00046f54 	.word	0x00046f54
   3918c:	00046fd4 	.word	0x00046fd4
   39190:	00047044 	.word	0x00047044
   39194:	00047104 	.word	0x00047104
   39198:	0004702c 	.word	0x0004702c
   3919c:	00047058 	.word	0x00047058
   391a0:	000470cc 	.word	0x000470cc
   391a4:	00047144 	.word	0x00047144
   391a8:	00046ea4 	.word	0x00046ea4
   391ac:	00046dec 	.word	0x00046dec
   391b0:	00046ec0 	.word	0x00046ec0
   391b4:	00046f00 	.word	0x00046f00
   391b8:	00046f28 	.word	0x00046f28
   391bc:	00046f58 	.word	0x00046f58
   391c0:	00046f90 	.word	0x00046f90
   391c4:	00047150 	.word	0x00047150
   391c8:	00047124 	.word	0x00047124
   391cc:	000438d4 	.word	0x000438d4
   391d0:	00047090 	.word	0x00047090

000391d4 <TermAnsi::~TermAnsi()>:
   391d4:	e92d4010 	push	{r4, lr}
   391d8:	e1a04000 	mov	r4, r0
   391dc:	e59f300c 	ldr	r3, [pc, #12]	; 391f0 <TermAnsi::~TermAnsi()+0x1c>
   391e0:	e5803000 	str	r3, [r0]
   391e4:	eb00078c 	bl	3b01c <TermEmu::~TermEmu()>
   391e8:	e1a00004 	mov	r0, r4
   391ec:	e8bd8010 	pop	{r4, pc}
   391f0:	00047238 	.word	0x00047238

000391f4 <TermAnsi::~TermAnsi()>:
   391f4:	e92d4010 	push	{r4, lr}
   391f8:	e1a04000 	mov	r4, r0
   391fc:	e59f3018 	ldr	r3, [pc, #24]	; 3921c <TermAnsi::~TermAnsi()+0x28>
   39200:	e5803000 	str	r3, [r0]
   39204:	eb000784 	bl	3b01c <TermEmu::~TermEmu()>
   39208:	e1a00004 	mov	r0, r4
   3920c:	e59f100c 	ldr	r1, [pc, #12]	; 39220 <TermAnsi::~TermAnsi()+0x2c>
   39210:	ebffc730 	bl	2aed8 <operator delete(void*, unsigned int)>
   39214:	e1a00004 	mov	r0, r4
   39218:	e8bd8010 	pop	{r4, pc}
   3921c:	00047238 	.word	0x00047238
   39220:	000008ac 	.word	0x000008ac

00039224 <TermAnsi::TermAnsi()>:
   39224:	e92d4010 	push	{r4, lr}
   39228:	e1a04000 	mov	r4, r0
   3922c:	eb0007bb 	bl	3b120 <TermEmu::TermEmu()>
   39230:	e1a03004 	mov	r3, r4
   39234:	e3a0c020 	mov	ip, #32
   39238:	e3a0e00f 	mov	lr, #15
   3923c:	e3a02000 	mov	r2, #0
   39240:	e59f0058 	ldr	r0, [pc, #88]	; 392a0 <TermAnsi::TermAnsi()+0x7c>
   39244:	e2841e82 	add	r1, r4, #2080	; 0x820
   39248:	e483005c 	str	r0, [r3], #92	; 0x5c
   3924c:	e281100c 	add	r1, r1, #12
   39250:	e5c3c000 	strb	ip, [r3]
   39254:	e5c3e001 	strb	lr, [r3, #1]
   39258:	e5c32002 	strb	r2, [r3, #2]
   3925c:	e5c32003 	strb	r2, [r3, #3]
   39260:	e2833004 	add	r3, r3, #4
   39264:	e1530001 	cmp	r3, r1
   39268:	1afffff8 	bne	39250 <TermAnsi::TermAnsi()+0x2c>
   3926c:	e3a03ef2 	mov	r3, #3872	; 0xf20
   39270:	e3a0105f 	mov	r1, #95	; 0x5f
   39274:	e2840e8a 	add	r0, r4, #2208	; 0x8a0
   39278:	e5842898 	str	r2, [r4, #2200]	; 0x898
   3927c:	e584289c 	str	r2, [r4, #2204]	; 0x89c
   39280:	e5843890 	str	r3, [r4, #2192]	; 0x890
   39284:	e5843894 	str	r3, [r4, #2196]	; 0x894
   39288:	e1c020b0 	strh	r2, [r0]
   3928c:	e1a00004 	mov	r0, r4
   39290:	e5c428a2 	strb	r2, [r4, #2210]	; 0x8a2
   39294:	e584c8a8 	str	ip, [r4, #2216]	; 0x8a8
   39298:	e58418a4 	str	r1, [r4, #2212]	; 0x8a4
   3929c:	e8bd8010 	pop	{r4, pc}
   392a0:	00047238 	.word	0x00047238

000392a4 <TermAnsi::fixcursor()>:
   392a4:	e590c010 	ldr	ip, [r0, #16]
   392a8:	e5902018 	ldr	r2, [r0, #24]
   392ac:	e590100c 	ldr	r1, [r0, #12]
   392b0:	e5903014 	ldr	r3, [r0, #20]
   392b4:	e24cc001 	sub	ip, ip, #1
   392b8:	e152000c 	cmp	r2, ip
   392bc:	e2411001 	sub	r1, r1, #1
   392c0:	21a0200c 	movcs	r2, ip
   392c4:	e1530001 	cmp	r3, r1
   392c8:	21a03001 	movcs	r3, r1
   392cc:	e5802018 	str	r2, [r0, #24]
   392d0:	e5803014 	str	r3, [r0, #20]
   392d4:	e12fff1e 	bx	lr

000392d8 <TermAnsi::consumearg()>:
   392d8:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   392dc:	e3530007 	cmp	r3, #7
   392e0:	95902054 	ldrls	r2, [r0, #84]	; 0x54
   392e4:	92831001 	addls	r1, r3, #1
   392e8:	9283300c 	addls	r3, r3, #12
   392ec:	95801050 	strls	r1, [r0, #80]	; 0x50
   392f0:	97802103 	strls	r2, [r0, r3, lsl #2]
   392f4:	e3a03000 	mov	r3, #0
   392f8:	e5803054 	str	r3, [r0, #84]	; 0x54
   392fc:	e12fff1e 	bx	lr

00039300 <TermAnsi::resetparser()>:
   39300:	e92d4010 	push	{r4, lr}
   39304:	e3a02020 	mov	r2, #32
   39308:	e1a04000 	mov	r4, r0
   3930c:	e3a01000 	mov	r1, #0
   39310:	e2800030 	add	r0, r0, #48	; 0x30
   39314:	ebffc2b2 	bl	29de4 <memset>
   39318:	e3a03000 	mov	r3, #0
   3931c:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   39320:	e5843050 	str	r3, [r4, #80]	; 0x50
   39324:	e5843054 	str	r3, [r4, #84]	; 0x54
   39328:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   3932c:	e8bd8010 	pop	{r4, pc}

00039330 <TermAnsi::dirtylines(unsigned int, unsigned int)>:
   39330:	e3a0c001 	mov	ip, #1
   39334:	e1510002 	cmp	r1, r2
   39338:	e5c0c01c 	strb	ip, [r0, #28]
   3933c:	212fff1e 	bxcs	lr
   39340:	e2813e82 	add	r3, r1, #2080	; 0x820
   39344:	e2822e82 	add	r2, r2, #2080	; 0x820
   39348:	e283300c 	add	r3, r3, #12
   3934c:	e282200c 	add	r2, r2, #12
   39350:	e0803003 	add	r3, r0, r3
   39354:	e0800002 	add	r0, r0, r2
   39358:	e4c3c001 	strb	ip, [r3], #1
   3935c:	e1530000 	cmp	r3, r0
   39360:	1afffffc 	bne	39358 <TermAnsi::dirtylines(unsigned int, unsigned int)+0x28>
   39364:	e12fff1e 	bx	lr

00039368 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>:
   39368:	e92d4030 	push	{r4, r5, lr}
   3936c:	e3a0e001 	mov	lr, #1
   39370:	e5c0e01c 	strb	lr, [r0, #28]
   39374:	e3a0e001 	mov	lr, #1
   39378:	e590c010 	ldr	ip, [r0, #16]
   3937c:	e15c0001 	cmp	ip, r1
   39380:	924c1001 	subls	r1, ip, #1
   39384:	e080c001 	add	ip, r0, r1
   39388:	e1520003 	cmp	r2, r3
   3938c:	e5cce82c 	strb	lr, [ip, #2092]	; 0x82c
   39390:	28bd8030 	popcs	{r4, r5, pc}
   39394:	e3a04ef2 	mov	r4, #3872	; 0xf20
   39398:	e2805028 	add	r5, r0, #40	; 0x28
   3939c:	e590c00c 	ldr	ip, [r0, #12]
   393a0:	e15c0002 	cmp	ip, r2
   393a4:	98bd8030 	popls	{r4, r5, pc}
   393a8:	e02c2c91 	mla	ip, r1, ip, r2
   393ac:	e590e008 	ldr	lr, [r0, #8]
   393b0:	e2822001 	add	r2, r2, #1
   393b4:	e15c000e 	cmp	ip, lr
   393b8:	21a0c005 	movcs	ip, r5
   393bc:	3590e004 	ldrcc	lr, [r0, #4]
   393c0:	308ec10c 	addcc	ip, lr, ip, lsl #2
   393c4:	e1530002 	cmp	r3, r2
   393c8:	e58c4000 	str	r4, [ip]
   393cc:	1afffff2 	bne	3939c <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)+0x34>
   393d0:	e8bd8030 	pop	{r4, r5, pc}

000393d4 <TermAnsi::clearlines(unsigned int, unsigned int)>:
   393d4:	e92d4070 	push	{r4, r5, r6, lr}
   393d8:	e0815002 	add	r5, r1, r2
   393dc:	e1510005 	cmp	r1, r5
   393e0:	28bd8070 	popcs	{r4, r5, r6, pc}
   393e4:	e1a04001 	mov	r4, r1
   393e8:	e5903010 	ldr	r3, [r0, #16]
   393ec:	e1530004 	cmp	r3, r4
   393f0:	98bd8070 	popls	{r4, r5, r6, pc}
   393f4:	e1a01004 	mov	r1, r4
   393f8:	e3a02000 	mov	r2, #0
   393fc:	e590300c 	ldr	r3, [r0, #12]
   39400:	e2844001 	add	r4, r4, #1
   39404:	ebffffd7 	bl	39368 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   39408:	e1540005 	cmp	r4, r5
   3940c:	1afffff5 	bne	393e8 <TermAnsi::clearlines(unsigned int, unsigned int)+0x14>
   39410:	e8bd8070 	pop	{r4, r5, r6, pc}

00039414 <TermAnsi::scrollUp(unsigned int, unsigned int)>:
   39414:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39418:	e1e06001 	mvn	r6, r1
   3941c:	e1a07001 	mov	r7, r1
   39420:	e5901010 	ldr	r1, [r0, #16]
   39424:	e5903004 	ldr	r3, [r0, #4]
   39428:	e0866001 	add	r6, r6, r1
   3942c:	e1560002 	cmp	r6, r2
   39430:	21a06002 	movcs	r6, r2
   39434:	e3530000 	cmp	r3, #0
   39438:	13560000 	cmpne	r6, #0
   3943c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   39440:	e590c00c 	ldr	ip, [r0, #12]
   39444:	e1a04000 	mov	r4, r0
   39448:	e005069c 	mul	r5, ip, r6
   3944c:	e375022e 	cmn	r5, #-536870910	; 0xe0000002
   39450:	91a00105 	lslls	r0, r5, #2
   39454:	83e00000 	mvnhi	r0, #0
   39458:	ebffc696 	bl	2aeb8 <operator new[](unsigned int)>
   3945c:	e255c001 	subs	ip, r5, #1
   39460:	51a03000 	movpl	r3, r0
   39464:	e1a05000 	mov	r5, r0
   39468:	53a0e020 	movpl	lr, #32
   3946c:	53a0100f 	movpl	r1, #15
   39470:	53a02000 	movpl	r2, #0
   39474:	4a000007 	bmi	39498 <TermAnsi::scrollUp(unsigned int, unsigned int)+0x84>
   39478:	e24cc001 	sub	ip, ip, #1
   3947c:	e37c0001 	cmn	ip, #1
   39480:	e5c3e000 	strb	lr, [r3]
   39484:	e5c31001 	strb	r1, [r3, #1]
   39488:	e5c32002 	strb	r2, [r3, #2]
   3948c:	e5c32003 	strb	r2, [r3, #3]
   39490:	e2833004 	add	r3, r3, #4
   39494:	1afffff7 	bne	39478 <TermAnsi::scrollUp(unsigned int, unsigned int)+0x64>
   39498:	e594300c 	ldr	r3, [r4, #12]
   3949c:	e5941004 	ldr	r1, [r4, #4]
   394a0:	e0080396 	mul	r8, r6, r3
   394a4:	e1a09107 	lsl	r9, r7, #2
   394a8:	e1a08108 	lsl	r8, r8, #2
   394ac:	e0211399 	mla	r1, r9, r3, r1
   394b0:	e1a02008 	mov	r2, r8
   394b4:	e1a00005 	mov	r0, r5
   394b8:	ebffc492 	bl	2a708 <memcpy>
   394bc:	e5942010 	ldr	r2, [r4, #16]
   394c0:	e594000c 	ldr	r0, [r4, #12]
   394c4:	e5943004 	ldr	r3, [r4, #4]
   394c8:	e0422007 	sub	r2, r2, r7
   394cc:	e087c006 	add	ip, r7, r6
   394d0:	e1a01100 	lsl	r1, r0, #2
   394d4:	e0422006 	sub	r2, r2, r6
   394d8:	e0020291 	mul	r2, r1, r2
   394dc:	e0203099 	mla	r0, r9, r0, r3
   394e0:	e0213c91 	mla	r1, r1, ip, r3
   394e4:	ebffc26a 	bl	29e94 <memmove>
   394e8:	e5940010 	ldr	r0, [r4, #16]
   394ec:	e594300c 	ldr	r3, [r4, #12]
   394f0:	e0400006 	sub	r0, r0, r6
   394f4:	e0030093 	mul	r3, r3, r0
   394f8:	e5940004 	ldr	r0, [r4, #4]
   394fc:	e1a02008 	mov	r2, r8
   39500:	e0800103 	add	r0, r0, r3, lsl #2
   39504:	e1a01005 	mov	r1, r5
   39508:	ebffc47e 	bl	2a708 <memcpy>
   3950c:	e1a00005 	mov	r0, r5
   39510:	ebffc66f 	bl	2aed4 <operator delete[](void*)>
   39514:	e5941010 	ldr	r1, [r4, #16]
   39518:	e1a02006 	mov	r2, r6
   3951c:	e1a00004 	mov	r0, r4
   39520:	e0411006 	sub	r1, r1, r6
   39524:	ebffffaa 	bl	393d4 <TermAnsi::clearlines(unsigned int, unsigned int)>
   39528:	e3a02001 	mov	r2, #1
   3952c:	e5943010 	ldr	r3, [r4, #16]
   39530:	e5c4201c 	strb	r2, [r4, #28]
   39534:	e1530007 	cmp	r3, r7
   39538:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   3953c:	e2870e82 	add	r0, r7, #2080	; 0x820
   39540:	e0843003 	add	r3, r4, r3
   39544:	e280000c 	add	r0, r0, #12
   39548:	e2833e82 	add	r3, r3, #2080	; 0x820
   3954c:	e0840000 	add	r0, r4, r0
   39550:	e283300c 	add	r3, r3, #12
   39554:	e4c02001 	strb	r2, [r0], #1
   39558:	e1530000 	cmp	r3, r0
   3955c:	1afffffc 	bne	39554 <TermAnsi::scrollUp(unsigned int, unsigned int)+0x140>
   39560:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00039564 <TermAnsi::writeCharAtCurs(int)>:
   39564:	e92d4010 	push	{r4, lr}
   39568:	e1a04000 	mov	r4, r0
   3956c:	e5903018 	ldr	r3, [r0, #24]
   39570:	e5942014 	ldr	r2, [r4, #20]
   39574:	e590000c 	ldr	r0, [r0, #12]
   39578:	e5d4e892 	ldrb	lr, [r4, #2194]	; 0x892
   3957c:	e0222390 	mla	r2, r0, r3, r2
   39580:	e5943008 	ldr	r3, [r4, #8]
   39584:	e5d4c891 	ldrb	ip, [r4, #2193]	; 0x891
   39588:	e1520003 	cmp	r2, r3
   3958c:	35943004 	ldrcc	r3, [r4, #4]
   39590:	22843028 	addcs	r3, r4, #40	; 0x28
   39594:	30833102 	addcc	r3, r3, r2, lsl #2
   39598:	e5d42893 	ldrb	r2, [r4, #2195]	; 0x893
   3959c:	e5c31000 	strb	r1, [r3]
   395a0:	e5c3e002 	strb	lr, [r3, #2]
   395a4:	e5c3c001 	strb	ip, [r3, #1]
   395a8:	e5c32003 	strb	r2, [r3, #3]
   395ac:	e594300c 	ldr	r3, [r4, #12]
   395b0:	e5942014 	ldr	r2, [r4, #20]
   395b4:	e2433001 	sub	r3, r3, #1
   395b8:	e1520003 	cmp	r2, r3
   395bc:	e3a00001 	mov	r0, #1
   395c0:	23a02000 	movcs	r2, #0
   395c4:	e5943018 	ldr	r3, [r4, #24]
   395c8:	30822000 	addcc	r2, r2, r0
   395cc:	22833001 	addcs	r3, r3, #1
   395d0:	21c421f4 	strdcs	r2, [r4, #20]
   395d4:	35842014 	strcc	r2, [r4, #20]
   395d8:	e5942010 	ldr	r2, [r4, #16]
   395dc:	e5c4001c 	strb	r0, [r4, #28]
   395e0:	e1520003 	cmp	r2, r3
   395e4:	9a000002 	bls	395f4 <TermAnsi::writeCharAtCurs(int)+0x90>
   395e8:	e3a03001 	mov	r3, #1
   395ec:	e5c4301c 	strb	r3, [r4, #28]
   395f0:	e8bd8010 	pop	{r4, pc}
   395f4:	e2422001 	sub	r2, r2, #1
   395f8:	e5842018 	str	r2, [r4, #24]
   395fc:	e3a01000 	mov	r1, #0
   39600:	e3a02001 	mov	r2, #1
   39604:	e1a00004 	mov	r0, r4
   39608:	ebffff81 	bl	39414 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3960c:	eafffff5 	b	395e8 <TermAnsi::writeCharAtCurs(int)+0x84>

00039610 <TermAnsi::scrollDown(unsigned int, unsigned int)>:
   39610:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39614:	e1e06001 	mvn	r6, r1
   39618:	e1a07001 	mov	r7, r1
   3961c:	e5901010 	ldr	r1, [r0, #16]
   39620:	e5903004 	ldr	r3, [r0, #4]
   39624:	e0866001 	add	r6, r6, r1
   39628:	e1560002 	cmp	r6, r2
   3962c:	21a06002 	movcs	r6, r2
   39630:	e3530000 	cmp	r3, #0
   39634:	13560000 	cmpne	r6, #0
   39638:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3963c:	e590c00c 	ldr	ip, [r0, #12]
   39640:	e1a04000 	mov	r4, r0
   39644:	e005069c 	mul	r5, ip, r6
   39648:	e375022e 	cmn	r5, #-536870910	; 0xe0000002
   3964c:	91a00105 	lslls	r0, r5, #2
   39650:	83e00000 	mvnhi	r0, #0
   39654:	ebffc617 	bl	2aeb8 <operator new[](unsigned int)>
   39658:	e255c001 	subs	ip, r5, #1
   3965c:	51a03000 	movpl	r3, r0
   39660:	e1a05000 	mov	r5, r0
   39664:	53a0e020 	movpl	lr, #32
   39668:	53a0100f 	movpl	r1, #15
   3966c:	53a02000 	movpl	r2, #0
   39670:	4a000007 	bmi	39694 <TermAnsi::scrollDown(unsigned int, unsigned int)+0x84>
   39674:	e24cc001 	sub	ip, ip, #1
   39678:	e37c0001 	cmn	ip, #1
   3967c:	e5c3e000 	strb	lr, [r3]
   39680:	e5c31001 	strb	r1, [r3, #1]
   39684:	e5c32002 	strb	r2, [r3, #2]
   39688:	e5c32003 	strb	r2, [r3, #3]
   3968c:	e2833004 	add	r3, r3, #4
   39690:	1afffff7 	bne	39674 <TermAnsi::scrollDown(unsigned int, unsigned int)+0x64>
   39694:	e594300c 	ldr	r3, [r4, #12]
   39698:	e5942010 	ldr	r2, [r4, #16]
   3969c:	e1a03103 	lsl	r3, r3, #2
   396a0:	e0090693 	mul	r9, r3, r6
   396a4:	e5941004 	ldr	r1, [r4, #4]
   396a8:	e0422006 	sub	r2, r2, r6
   396ac:	e0211293 	mla	r1, r3, r2, r1
   396b0:	e1a00005 	mov	r0, r5
   396b4:	e1a02009 	mov	r2, r9
   396b8:	ebffc412 	bl	2a708 <memcpy>
   396bc:	e5942010 	ldr	r2, [r4, #16]
   396c0:	e594100c 	ldr	r1, [r4, #12]
   396c4:	e5943004 	ldr	r3, [r4, #4]
   396c8:	e0422007 	sub	r2, r2, r7
   396cc:	e087c006 	add	ip, r7, r6
   396d0:	e1a00101 	lsl	r0, r1, #2
   396d4:	e1a08107 	lsl	r8, r7, #2
   396d8:	e0422006 	sub	r2, r2, r6
   396dc:	e0020290 	mul	r2, r0, r2
   396e0:	e0213198 	mla	r1, r8, r1, r3
   396e4:	e0203c90 	mla	r0, r0, ip, r3
   396e8:	ebffc1e9 	bl	29e94 <memmove>
   396ec:	e5943004 	ldr	r3, [r4, #4]
   396f0:	e594000c 	ldr	r0, [r4, #12]
   396f4:	e1a02009 	mov	r2, r9
   396f8:	e0203890 	mla	r0, r0, r8, r3
   396fc:	e1a01005 	mov	r1, r5
   39700:	ebffc400 	bl	2a708 <memcpy>
   39704:	e1a00005 	mov	r0, r5
   39708:	ebffc5f1 	bl	2aed4 <operator delete[](void*)>
   3970c:	e1a02006 	mov	r2, r6
   39710:	e1a01007 	mov	r1, r7
   39714:	e1a00004 	mov	r0, r4
   39718:	ebffff2d 	bl	393d4 <TermAnsi::clearlines(unsigned int, unsigned int)>
   3971c:	e3a02001 	mov	r2, #1
   39720:	e5943010 	ldr	r3, [r4, #16]
   39724:	e5c4201c 	strb	r2, [r4, #28]
   39728:	e1530007 	cmp	r3, r7
   3972c:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   39730:	e2870e82 	add	r0, r7, #2080	; 0x820
   39734:	e0843003 	add	r3, r4, r3
   39738:	e280000c 	add	r0, r0, #12
   3973c:	e2833e82 	add	r3, r3, #2080	; 0x820
   39740:	e0840000 	add	r0, r4, r0
   39744:	e283300c 	add	r3, r3, #12
   39748:	e4c02001 	strb	r2, [r0], #1
   3974c:	e1530000 	cmp	r3, r0
   39750:	1afffffc 	bne	39748 <TermAnsi::scrollDown(unsigned int, unsigned int)+0x138>
   39754:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00039758 <TermAnsi::ed()>:
   39758:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3975c:	e92d4070 	push	{r4, r5, r6, lr}
   39760:	e3530001 	cmp	r3, #1
   39764:	e1a04000 	mov	r4, r0
   39768:	e5905010 	ldr	r5, [r0, #16]
   3976c:	0a000010 	beq	397b4 <TermAnsi::ed()+0x5c>
   39770:	e3530002 	cmp	r3, #2
   39774:	0a00000c 	beq	397ac <TermAnsi::ed()+0x54>
   39778:	e3530000 	cmp	r3, #0
   3977c:	18bd8070 	popne	{r4, r5, r6, pc}
   39780:	e5901018 	ldr	r1, [r0, #24]
   39784:	e590300c 	ldr	r3, [r0, #12]
   39788:	e2816001 	add	r6, r1, #1
   3978c:	e5902014 	ldr	r2, [r0, #20]
   39790:	e0455006 	sub	r5, r5, r6
   39794:	ebfffef3 	bl	39368 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   39798:	e1a02005 	mov	r2, r5
   3979c:	e1a01006 	mov	r1, r6
   397a0:	e1a00004 	mov	r0, r4
   397a4:	e8bd4070 	pop	{r4, r5, r6, lr}
   397a8:	eaffff09 	b	393d4 <TermAnsi::clearlines(unsigned int, unsigned int)>
   397ac:	e3a06000 	mov	r6, #0
   397b0:	eafffff8 	b	39798 <TermAnsi::ed()+0x40>
   397b4:	e5901018 	ldr	r1, [r0, #24]
   397b8:	e3a02000 	mov	r2, #0
   397bc:	e5903014 	ldr	r3, [r0, #20]
   397c0:	e2415001 	sub	r5, r1, #1
   397c4:	e3a06000 	mov	r6, #0
   397c8:	ebfffee6 	bl	39368 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   397cc:	eafffff1 	b	39798 <TermAnsi::ed()+0x40>

000397d0 <TermAnsi::el()>:
   397d0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   397d4:	e3530001 	cmp	r3, #1
   397d8:	0a00000b 	beq	3980c <TermAnsi::el()+0x3c>
   397dc:	e3530002 	cmp	r3, #2
   397e0:	0a000005 	beq	397fc <TermAnsi::el()+0x2c>
   397e4:	e3530000 	cmp	r3, #0
   397e8:	112fff1e 	bxne	lr
   397ec:	e590300c 	ldr	r3, [r0, #12]
   397f0:	e5902014 	ldr	r2, [r0, #20]
   397f4:	e5901018 	ldr	r1, [r0, #24]
   397f8:	eafffeda 	b	39368 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   397fc:	e3a02000 	mov	r2, #0
   39800:	e590300c 	ldr	r3, [r0, #12]
   39804:	e5901018 	ldr	r1, [r0, #24]
   39808:	eafffed6 	b	39368 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3980c:	e590200c 	ldr	r2, [r0, #12]
   39810:	e5903014 	ldr	r3, [r0, #20]
   39814:	e2422001 	sub	r2, r2, #1
   39818:	e2833001 	add	r3, r3, #1
   3981c:	e1520003 	cmp	r2, r3
   39820:	31a03002 	movcc	r3, r2
   39824:	e5901018 	ldr	r1, [r0, #24]
   39828:	e3a02000 	mov	r2, #0
   3982c:	eafffecd 	b	39368 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

00039830 <TermAnsi::dch()>:
   39830:	e590c004 	ldr	ip, [r0, #4]
   39834:	e35c0000 	cmp	ip, #0
   39838:	012fff1e 	bxeq	lr
   3983c:	e92d4070 	push	{r4, r5, r6, lr}
   39840:	e5905030 	ldr	r5, [r0, #48]	; 0x30
   39844:	e590200c 	ldr	r2, [r0, #12]
   39848:	e3550001 	cmp	r5, #1
   3984c:	33a05001 	movcc	r5, #1
   39850:	e1a04000 	mov	r4, r0
   39854:	e1c001d4 	ldrd	r0, [r0, #20]
   39858:	e0423000 	sub	r3, r2, r0
   3985c:	e1550003 	cmp	r5, r3
   39860:	21a05003 	movcs	r5, r3
   39864:	e0200291 	mla	r0, r1, r2, r0
   39868:	e0433005 	sub	r3, r3, r5
   3986c:	e0020392 	mul	r2, r2, r3
   39870:	e0801005 	add	r1, r0, r5
   39874:	e1a02102 	lsl	r2, r2, #2
   39878:	e08c1101 	add	r1, ip, r1, lsl #2
   3987c:	e08c0100 	add	r0, ip, r0, lsl #2
   39880:	ebffc183 	bl	29e94 <memmove>
   39884:	e594300c 	ldr	r3, [r4, #12]
   39888:	e5942014 	ldr	r2, [r4, #20]
   3988c:	e1a00004 	mov	r0, r4
   39890:	e0432002 	sub	r2, r3, r2
   39894:	e5941018 	ldr	r1, [r4, #24]
   39898:	e0422005 	sub	r2, r2, r5
   3989c:	e8bd4070 	pop	{r4, r5, r6, lr}
   398a0:	eafffeb0 	b	39368 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

000398a4 <TermAnsi::ich()>:
   398a4:	e590c004 	ldr	ip, [r0, #4]
   398a8:	e35c0000 	cmp	ip, #0
   398ac:	012fff1e 	bxeq	lr
   398b0:	e92d4070 	push	{r4, r5, r6, lr}
   398b4:	e5905030 	ldr	r5, [r0, #48]	; 0x30
   398b8:	e1a04000 	mov	r4, r0
   398bc:	e3550001 	cmp	r5, #1
   398c0:	33a05001 	movcc	r5, #1
   398c4:	e590000c 	ldr	r0, [r0, #12]
   398c8:	e5941014 	ldr	r1, [r4, #20]
   398cc:	e2402001 	sub	r2, r0, #1
   398d0:	e0422001 	sub	r2, r2, r1
   398d4:	e1550002 	cmp	r5, r2
   398d8:	21a05002 	movcs	r5, r2
   398dc:	e0423005 	sub	r3, r2, r5
   398e0:	e1530002 	cmp	r3, r2
   398e4:	31a02003 	movcc	r2, r3
   398e8:	e5943018 	ldr	r3, [r4, #24]
   398ec:	e0020290 	mul	r2, r0, r2
   398f0:	e0211093 	mla	r1, r3, r0, r1
   398f4:	e0810005 	add	r0, r1, r5
   398f8:	e1a02102 	lsl	r2, r2, #2
   398fc:	e08c1101 	add	r1, ip, r1, lsl #2
   39900:	e08c0100 	add	r0, ip, r0, lsl #2
   39904:	ebffc162 	bl	29e94 <memmove>
   39908:	e1a03005 	mov	r3, r5
   3990c:	e1a00004 	mov	r0, r4
   39910:	e5942014 	ldr	r2, [r4, #20]
   39914:	e5941018 	ldr	r1, [r4, #24]
   39918:	e8bd4070 	pop	{r4, r5, r6, lr}
   3991c:	eafffe91 	b	39368 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

00039920 <TermAnsi::rep()>:
   39920:	e5902014 	ldr	r2, [r0, #20]
   39924:	e3520000 	cmp	r2, #0
   39928:	012fff1e 	bxeq	lr
   3992c:	e92d4070 	push	{r4, r5, r6, lr}
   39930:	e1a05000 	mov	r5, r0
   39934:	e3a04000 	mov	r4, #0
   39938:	e5903018 	ldr	r3, [r0, #24]
   3993c:	e590000c 	ldr	r0, [r0, #12]
   39940:	e5951004 	ldr	r1, [r5, #4]
   39944:	e0232390 	mla	r3, r0, r3, r2
   39948:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   3994c:	e7d16103 	ldrb	r6, [r1, r3, lsl #2]
   39950:	e1a01006 	mov	r1, r6
   39954:	e1a00005 	mov	r0, r5
   39958:	ebffff01 	bl	39564 <TermAnsi::writeCharAtCurs(int)>
   3995c:	e5953030 	ldr	r3, [r5, #48]	; 0x30
   39960:	e2844001 	add	r4, r4, #1
   39964:	e3530001 	cmp	r3, #1
   39968:	33a03001 	movcc	r3, #1
   3996c:	e1530004 	cmp	r3, r4
   39970:	8afffff6 	bhi	39950 <TermAnsi::rep()+0x30>
   39974:	e8bd8070 	pop	{r4, r5, r6, pc}

00039978 <TermAnsi::sgr()>:
   39978:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   3997c:	e3530000 	cmp	r3, #0
   39980:	1a000002 	bne	39990 <TermAnsi::sgr()+0x18>
   39984:	e5d01893 	ldrb	r1, [r0, #2195]	; 0x893
   39988:	e5c01893 	strb	r1, [r0, #2195]	; 0x893
   3998c:	e12fff1e 	bx	lr
   39990:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39994:	e590e030 	ldr	lr, [r0, #48]	; 0x30
   39998:	e24e201e 	sub	r2, lr, #30
   3999c:	e3520012 	cmp	r2, #18
   399a0:	9a000048 	bls	39ac8 <TermAnsi::sgr()+0x150>
   399a4:	e35e0013 	cmp	lr, #19
   399a8:	e280c030 	add	ip, r0, #48	; 0x30
   399ac:	e08cc103 	add	ip, ip, r3, lsl #2
   399b0:	93a08020 	movls	r8, #32
   399b4:	83a08000 	movhi	r8, #0
   399b8:	93a07010 	movls	r7, #16
   399bc:	83a07000 	movhi	r7, #0
   399c0:	93a06008 	movls	r6, #8
   399c4:	83a06000 	movhi	r6, #0
   399c8:	93a05004 	movls	r5, #4
   399cc:	83a05000 	movhi	r5, #0
   399d0:	93a04002 	movls	r4, #2
   399d4:	83a04000 	movhi	r4, #0
   399d8:	e1a0300e 	mov	r3, lr
   399dc:	e3a0a00f 	mov	sl, #15
   399e0:	e3a09000 	mov	r9, #0
   399e4:	e5d01893 	ldrb	r1, [r0, #2195]	; 0x893
   399e8:	e2802034 	add	r2, r0, #52	; 0x34
   399ec:	e353001c 	cmp	r3, #28
   399f0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   399f4:	ea00001d 	b	39a70 <TermAnsi::sgr()+0xf8>
   399f8:	00039ab8 	.word	0x00039ab8
   399fc:	00039aac 	.word	0x00039aac
   39a00:	00039aa4 	.word	0x00039aa4
   39a04:	00039a70 	.word	0x00039a70
   39a08:	00039a9c 	.word	0x00039a9c
   39a0c:	00039a94 	.word	0x00039a94
   39a10:	00039a70 	.word	0x00039a70
   39a14:	00039a80 	.word	0x00039a80
   39a18:	00039a6c 	.word	0x00039a6c
   39a1c:	00039a70 	.word	0x00039a70
   39a20:	00039a70 	.word	0x00039a70
   39a24:	00039a70 	.word	0x00039a70
   39a28:	00039a70 	.word	0x00039a70
   39a2c:	00039a70 	.word	0x00039a70
   39a30:	00039a70 	.word	0x00039a70
   39a34:	00039a70 	.word	0x00039a70
   39a38:	00039a70 	.word	0x00039a70
   39a3c:	00039a70 	.word	0x00039a70
   39a40:	00039a70 	.word	0x00039a70
   39a44:	00039a70 	.word	0x00039a70
   39a48:	00039a70 	.word	0x00039a70
   39a4c:	00039a70 	.word	0x00039a70
   39a50:	00039aac 	.word	0x00039aac
   39a54:	00039aa4 	.word	0x00039aa4
   39a58:	00039a9c 	.word	0x00039a9c
   39a5c:	00039a94 	.word	0x00039a94
   39a60:	00039a70 	.word	0x00039a70
   39a64:	00039a80 	.word	0x00039a80
   39a68:	00039a6c 	.word	0x00039a6c
   39a6c:	e1881001 	orr	r1, r8, r1
   39a70:	e15c0002 	cmp	ip, r2
   39a74:	0a000004 	beq	39a8c <TermAnsi::sgr()+0x114>
   39a78:	e4923004 	ldr	r3, [r2], #4
   39a7c:	eaffffda 	b	399ec <TermAnsi::sgr()+0x74>
   39a80:	e15c0002 	cmp	ip, r2
   39a84:	e1871001 	orr	r1, r7, r1
   39a88:	1afffffa 	bne	39a78 <TermAnsi::sgr()+0x100>
   39a8c:	e5c01893 	strb	r1, [r0, #2195]	; 0x893
   39a90:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39a94:	e1861001 	orr	r1, r6, r1
   39a98:	eafffff4 	b	39a70 <TermAnsi::sgr()+0xf8>
   39a9c:	e1851001 	orr	r1, r5, r1
   39aa0:	eafffff2 	b	39a70 <TermAnsi::sgr()+0xf8>
   39aa4:	e1841001 	orr	r1, r4, r1
   39aa8:	eafffff0 	b	39a70 <TermAnsi::sgr()+0xf8>
   39aac:	e35e0013 	cmp	lr, #19
   39ab0:	93811001 	orrls	r1, r1, #1
   39ab4:	eaffffed 	b	39a70 <TermAnsi::sgr()+0xf8>
   39ab8:	e3a01000 	mov	r1, #0
   39abc:	e5c0a891 	strb	sl, [r0, #2193]	; 0x891
   39ac0:	e5c09892 	strb	r9, [r0, #2194]	; 0x892
   39ac4:	eaffffe9 	b	39a70 <TermAnsi::sgr()+0xf8>
   39ac8:	e3530001 	cmp	r3, #1
   39acc:	0a00000d 	beq	39b08 <TermAnsi::sgr()+0x190>
   39ad0:	e3530002 	cmp	r3, #2
   39ad4:	0a000015 	beq	39b30 <TermAnsi::sgr()+0x1b8>
   39ad8:	e3530003 	cmp	r3, #3
   39adc:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   39ae0:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   39ae4:	e3530005 	cmp	r3, #5
   39ae8:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   39aec:	e35e0027 	cmp	lr, #39	; 0x27
   39af0:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   39af4:	e2800e89 	add	r0, r0, #2192	; 0x890
   39af8:	8a00000a 	bhi	39b28 <TermAnsi::sgr()+0x1b0>
   39afc:	e2800001 	add	r0, r0, #1
   39b00:	e5c03000 	strb	r3, [r0]
   39b04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39b08:	e59f305c 	ldr	r3, [pc, #92]	; 39b6c <TermAnsi::sgr()+0x1f4>
   39b0c:	e35e0027 	cmp	lr, #39	; 0x27
   39b10:	e0831293 	umull	r1, r3, r3, r2
   39b14:	e1a031a3 	lsr	r3, r3, #3
   39b18:	e0833103 	add	r3, r3, r3, lsl #2
   39b1c:	e2800e89 	add	r0, r0, #2192	; 0x890
   39b20:	e0423083 	sub	r3, r2, r3, lsl #1
   39b24:	9afffff4 	bls	39afc <TermAnsi::sgr()+0x184>
   39b28:	e2800002 	add	r0, r0, #2
   39b2c:	eafffff3 	b	39b00 <TermAnsi::sgr()+0x188>
   39b30:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   39b34:	e3530001 	cmp	r3, #1
   39b38:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   39b3c:	e59f3028 	ldr	r3, [pc, #40]	; 39b6c <TermAnsi::sgr()+0x1f4>
   39b40:	e2800e89 	add	r0, r0, #2192	; 0x890
   39b44:	e0831293 	umull	r1, r3, r3, r2
   39b48:	e1a031a3 	lsr	r3, r3, #3
   39b4c:	e0833103 	add	r3, r3, r3, lsl #2
   39b50:	e0423083 	sub	r3, r2, r3, lsl #1
   39b54:	e35e0027 	cmp	lr, #39	; 0x27
   39b58:	e6ef3073 	uxtb	r3, r3
   39b5c:	92800001 	addls	r0, r0, #1
   39b60:	82800002 	addhi	r0, r0, #2
   39b64:	e2833008 	add	r3, r3, #8
   39b68:	eaffffe4 	b	39b00 <TermAnsi::sgr()+0x188>
   39b6c:	cccccccd 	.word	0xcccccccd

00039b70 <TermAnsi::handleAnsiChar(unsigned char)>:
   39b70:	e3a03000 	mov	r3, #0
   39b74:	e92d4070 	push	{r4, r5, r6, lr}
   39b78:	e5d0502c 	ldrb	r5, [r0, #44]	; 0x2c
   39b7c:	e24dd008 	sub	sp, sp, #8
   39b80:	e1550003 	cmp	r5, r3
   39b84:	e1a04000 	mov	r4, r0
   39b88:	e1a06001 	mov	r6, r1
   39b8c:	e5cd1004 	strb	r1, [sp, #4]
   39b90:	e5cd3005 	strb	r3, [sp, #5]
   39b94:	0a00000e 	beq	39bd4 <TermAnsi::handleAnsiChar(unsigned char)+0x64>
   39b98:	e3550001 	cmp	r5, #1
   39b9c:	0a0000a7 	beq	39e40 <TermAnsi::handleAnsiChar(unsigned char)+0x2d0>
   39ba0:	e3550002 	cmp	r5, #2
   39ba4:	0a000173 	beq	3a178 <TermAnsi::handleAnsiChar(unsigned char)+0x608>
   39ba8:	e3a02020 	mov	r2, #32
   39bac:	e3a01000 	mov	r1, #0
   39bb0:	e2840030 	add	r0, r4, #48	; 0x30
   39bb4:	ebffc08a 	bl	29de4 <memset>
   39bb8:	e3a03000 	mov	r3, #0
   39bbc:	e1a00003 	mov	r0, r3
   39bc0:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   39bc4:	e5843050 	str	r3, [r4, #80]	; 0x50
   39bc8:	e5843054 	str	r3, [r4, #84]	; 0x54
   39bcc:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   39bd0:	ea000021 	b	39c5c <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   39bd4:	e59f0fdc 	ldr	r0, [pc, #4060]	; 3abb8 <TermAnsi::handleAnsiChar(unsigned char)+0x1048>
   39bd8:	ebffc19d 	bl	2a254 <strchr>
   39bdc:	e3500000 	cmp	r0, #0
   39be0:	0a00001f 	beq	39c64 <TermAnsi::handleAnsiChar(unsigned char)+0xf4>
   39be4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   39be8:	e5940010 	ldr	r0, [r4, #16]
   39bec:	e3530007 	cmp	r3, #7
   39bf0:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39bf4:	92831001 	addls	r1, r3, #1
   39bf8:	9283300c 	addls	r3, r3, #12
   39bfc:	95841050 	strls	r1, [r4, #80]	; 0x50
   39c00:	97842103 	strls	r2, [r4, r3, lsl #2]
   39c04:	e594100c 	ldr	r1, [r4, #12]
   39c08:	e5942018 	ldr	r2, [r4, #24]
   39c0c:	e5943014 	ldr	r3, [r4, #20]
   39c10:	e2400001 	sub	r0, r0, #1
   39c14:	e1520000 	cmp	r2, r0
   39c18:	e2411001 	sub	r1, r1, #1
   39c1c:	21a02000 	movcs	r2, r0
   39c20:	e1530001 	cmp	r3, r1
   39c24:	e3a05000 	mov	r5, #0
   39c28:	21a03001 	movcs	r3, r1
   39c2c:	e5842018 	str	r2, [r4, #24]
   39c30:	e1a01005 	mov	r1, r5
   39c34:	e3a02020 	mov	r2, #32
   39c38:	e5843014 	str	r3, [r4, #20]
   39c3c:	e5845054 	str	r5, [r4, #84]	; 0x54
   39c40:	e2840030 	add	r0, r4, #48	; 0x30
   39c44:	ebffc066 	bl	29de4 <memset>
   39c48:	e3a00001 	mov	r0, #1
   39c4c:	e5c4502c 	strb	r5, [r4, #44]	; 0x2c
   39c50:	e5845050 	str	r5, [r4, #80]	; 0x50
   39c54:	e5845054 	str	r5, [r4, #84]	; 0x54
   39c58:	e5c45058 	strb	r5, [r4, #88]	; 0x58
   39c5c:	e28dd008 	add	sp, sp, #8
   39c60:	e8bd8070 	pop	{r4, r5, r6, pc}
   39c64:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   39c68:	e3550000 	cmp	r5, #0
   39c6c:	1affffc9 	bne	39b98 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   39c70:	e1a01006 	mov	r1, r6
   39c74:	e59f0f40 	ldr	r0, [pc, #3904]	; 3abbc <TermAnsi::handleAnsiChar(unsigned char)+0x104c>
   39c78:	ebffc175 	bl	2a254 <strchr>
   39c7c:	e3500000 	cmp	r0, #0
   39c80:	0a000025 	beq	39d1c <TermAnsi::handleAnsiChar(unsigned char)+0x1ac>
   39c84:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   39c88:	e5940014 	ldr	r0, [r4, #20]
   39c8c:	e3530007 	cmp	r3, #7
   39c90:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39c94:	92831001 	addls	r1, r3, #1
   39c98:	9283300c 	addls	r3, r3, #12
   39c9c:	95841050 	strls	r1, [r4, #80]	; 0x50
   39ca0:	97842103 	strls	r2, [r4, r3, lsl #2]
   39ca4:	e3a02000 	mov	r2, #0
   39ca8:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   39cac:	e5842054 	str	r2, [r4, #84]	; 0x54
   39cb0:	e1530002 	cmp	r3, r2
   39cb4:	1a000001 	bne	39cc0 <TermAnsi::handleAnsiChar(unsigned char)+0x150>
   39cb8:	e3500000 	cmp	r0, #0
   39cbc:	12400001 	subne	r0, r0, #1
   39cc0:	e5941010 	ldr	r1, [r4, #16]
   39cc4:	e5942018 	ldr	r2, [r4, #24]
   39cc8:	e594300c 	ldr	r3, [r4, #12]
   39ccc:	e2411001 	sub	r1, r1, #1
   39cd0:	e1520001 	cmp	r2, r1
   39cd4:	e2433001 	sub	r3, r3, #1
   39cd8:	21a02001 	movcs	r2, r1
   39cdc:	e1530000 	cmp	r3, r0
   39ce0:	21a03000 	movcs	r3, r0
   39ce4:	e5842018 	str	r2, [r4, #24]
   39ce8:	e5843014 	str	r3, [r4, #20]
   39cec:	e3a02020 	mov	r2, #32
   39cf0:	e3a01000 	mov	r1, #0
   39cf4:	e2840030 	add	r0, r4, #48	; 0x30
   39cf8:	ebffc039 	bl	29de4 <memset>
   39cfc:	e3a03000 	mov	r3, #0
   39d00:	e3a00001 	mov	r0, #1
   39d04:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   39d08:	e5843050 	str	r3, [r4, #80]	; 0x50
   39d0c:	e5843054 	str	r3, [r4, #84]	; 0x54
   39d10:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   39d14:	e28dd008 	add	sp, sp, #8
   39d18:	e8bd8070 	pop	{r4, r5, r6, pc}
   39d1c:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   39d20:	e3550000 	cmp	r5, #0
   39d24:	1affff9b 	bne	39b98 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   39d28:	e1a01006 	mov	r1, r6
   39d2c:	e59f0e8c 	ldr	r0, [pc, #3724]	; 3abc0 <TermAnsi::handleAnsiChar(unsigned char)+0x1050>
   39d30:	ebffc147 	bl	2a254 <strchr>
   39d34:	e3500000 	cmp	r0, #0
   39d38:	0a000020 	beq	39dc0 <TermAnsi::handleAnsiChar(unsigned char)+0x250>
   39d3c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   39d40:	e3530007 	cmp	r3, #7
   39d44:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39d48:	92831001 	addls	r1, r3, #1
   39d4c:	9283300c 	addls	r3, r3, #12
   39d50:	95841050 	strls	r1, [r4, #80]	; 0x50
   39d54:	97842103 	strls	r2, [r4, r3, lsl #2]
   39d58:	e3a02000 	mov	r2, #0
   39d5c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   39d60:	e594100c 	ldr	r1, [r4, #12]
   39d64:	e1530002 	cmp	r3, r2
   39d68:	e5842054 	str	r2, [r4, #84]	; 0x54
   39d6c:	e5943014 	ldr	r3, [r4, #20]
   39d70:	e2411001 	sub	r1, r1, #1
   39d74:	1a000009 	bne	39da0 <TermAnsi::handleAnsiChar(unsigned char)+0x230>
   39d78:	e2833001 	add	r3, r3, #1
   39d7c:	e284c058 	add	ip, r4, #88	; 0x58
   39d80:	ea000003 	b	39d94 <TermAnsi::handleAnsiChar(unsigned char)+0x224>
   39d84:	e7dc0102 	ldrb	r0, [ip, r2, lsl #2]
   39d88:	e350002a 	cmp	r0, #42	; 0x2a
   39d8c:	0a000003 	beq	39da0 <TermAnsi::handleAnsiChar(unsigned char)+0x230>
   39d90:	e1a03002 	mov	r3, r2
   39d94:	e1510003 	cmp	r1, r3
   39d98:	e2832001 	add	r2, r3, #1
   39d9c:	8afffff8 	bhi	39d84 <TermAnsi::handleAnsiChar(unsigned char)+0x214>
   39da0:	e5940010 	ldr	r0, [r4, #16]
   39da4:	e5942018 	ldr	r2, [r4, #24]
   39da8:	e2400001 	sub	r0, r0, #1
   39dac:	e1520000 	cmp	r2, r0
   39db0:	21a02000 	movcs	r2, r0
   39db4:	e1510003 	cmp	r1, r3
   39db8:	31a03001 	movcc	r3, r1
   39dbc:	eaffffc8 	b	39ce4 <TermAnsi::handleAnsiChar(unsigned char)+0x174>
   39dc0:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   39dc4:	e3550000 	cmp	r5, #0
   39dc8:	1affff72 	bne	39b98 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   39dcc:	e1a01006 	mov	r1, r6
   39dd0:	e59f0dec 	ldr	r0, [pc, #3564]	; 3abc4 <TermAnsi::handleAnsiChar(unsigned char)+0x1054>
   39dd4:	ebffc11e 	bl	2a254 <strchr>
   39dd8:	e3500000 	cmp	r0, #0
   39ddc:	0a000039 	beq	39ec8 <TermAnsi::handleAnsiChar(unsigned char)+0x358>
   39de0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   39de4:	e3530007 	cmp	r3, #7
   39de8:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39dec:	92831001 	addls	r1, r3, #1
   39df0:	9283300c 	addls	r3, r3, #12
   39df4:	95841050 	strls	r1, [r4, #80]	; 0x50
   39df8:	97842103 	strls	r2, [r4, r3, lsl #2]
   39dfc:	e3a03000 	mov	r3, #0
   39e00:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   39e04:	e5843054 	str	r3, [r4, #84]	; 0x54
   39e08:	e1510003 	cmp	r1, r3
   39e0c:	0a000057 	beq	39f70 <TermAnsi::handleAnsiChar(unsigned char)+0x400>
   39e10:	e5942010 	ldr	r2, [r4, #16]
   39e14:	e5940018 	ldr	r0, [r4, #24]
   39e18:	e2423001 	sub	r3, r2, #1
   39e1c:	e1530000 	cmp	r3, r0
   39e20:	21a03000 	movcs	r3, r0
   39e24:	e594100c 	ldr	r1, [r4, #12]
   39e28:	e5942014 	ldr	r2, [r4, #20]
   39e2c:	e2411001 	sub	r1, r1, #1
   39e30:	e1520001 	cmp	r2, r1
   39e34:	21a02001 	movcs	r2, r1
   39e38:	e1c421f4 	strd	r2, [r4, #20]
   39e3c:	eaffffaa 	b	39cec <TermAnsi::handleAnsiChar(unsigned char)+0x17c>
   39e40:	e1a01006 	mov	r1, r6
   39e44:	e59f0d7c 	ldr	r0, [pc, #3452]	; 3abc8 <TermAnsi::handleAnsiChar(unsigned char)+0x1058>
   39e48:	ebffc101 	bl	2a254 <strchr>
   39e4c:	e3500000 	cmp	r0, #0
   39e50:	0a000003 	beq	39e64 <TermAnsi::handleAnsiChar(unsigned char)+0x2f4>
   39e54:	e3a00001 	mov	r0, #1
   39e58:	e5c4002c 	strb	r0, [r4, #44]	; 0x2c
   39e5c:	e28dd008 	add	sp, sp, #8
   39e60:	e8bd8070 	pop	{r4, r5, r6, pc}
   39e64:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   39e68:	e3550001 	cmp	r5, #1
   39e6c:	1affff4b 	bne	39ba0 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   39e70:	e1a01006 	mov	r1, r6
   39e74:	e59f0d50 	ldr	r0, [pc, #3408]	; 3abcc <TermAnsi::handleAnsiChar(unsigned char)+0x105c>
   39e78:	ebffc0f5 	bl	2a254 <strchr>
   39e7c:	e3500000 	cmp	r0, #0
   39e80:	0a000044 	beq	39f98 <TermAnsi::handleAnsiChar(unsigned char)+0x428>
   39e84:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   39e88:	e3530007 	cmp	r3, #7
   39e8c:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39e90:	92831001 	addls	r1, r3, #1
   39e94:	9283300c 	addls	r3, r3, #12
   39e98:	95841050 	strls	r1, [r4, #80]	; 0x50
   39e9c:	97842103 	strls	r2, [r4, r3, lsl #2]
   39ea0:	e3a02000 	mov	r2, #0
   39ea4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   39ea8:	e5842054 	str	r2, [r4, #84]	; 0x54
   39eac:	e1530002 	cmp	r3, r2
   39eb0:	03a0202a 	moveq	r2, #42	; 0x2a
   39eb4:	05940014 	ldreq	r0, [r4, #20]
   39eb8:	15940014 	ldrne	r0, [r4, #20]
   39ebc:	00843100 	addeq	r3, r4, r0, lsl #2
   39ec0:	05c3205c 	strbeq	r2, [r3, #92]	; 0x5c
   39ec4:	eaffff7d 	b	39cc0 <TermAnsi::handleAnsiChar(unsigned char)+0x150>
   39ec8:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   39ecc:	e3550000 	cmp	r5, #0
   39ed0:	1affff30 	bne	39b98 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   39ed4:	e1a01006 	mov	r1, r6
   39ed8:	e59f0cf0 	ldr	r0, [pc, #3312]	; 3abd0 <TermAnsi::handleAnsiChar(unsigned char)+0x1060>
   39edc:	ebffc0dc 	bl	2a254 <strchr>
   39ee0:	e3500000 	cmp	r0, #0
   39ee4:	0a000017 	beq	39f48 <TermAnsi::handleAnsiChar(unsigned char)+0x3d8>
   39ee8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   39eec:	e5940010 	ldr	r0, [r4, #16]
   39ef0:	e3530007 	cmp	r3, #7
   39ef4:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39ef8:	92831001 	addls	r1, r3, #1
   39efc:	9283300c 	addls	r3, r3, #12
   39f00:	95841050 	strls	r1, [r4, #80]	; 0x50
   39f04:	97842103 	strls	r2, [r4, r3, lsl #2]
   39f08:	e3a02000 	mov	r2, #0
   39f0c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   39f10:	e5941018 	ldr	r1, [r4, #24]
   39f14:	e1530002 	cmp	r3, r2
   39f18:	e2400001 	sub	r0, r0, #1
   39f1c:	e5842054 	str	r2, [r4, #84]	; 0x54
   39f20:	01a02003 	moveq	r2, r3
   39f24:	15942014 	ldrne	r2, [r4, #20]
   39f28:	e1510000 	cmp	r1, r0
   39f2c:	21a01000 	movcs	r1, r0
   39f30:	e594300c 	ldr	r3, [r4, #12]
   39f34:	e5841018 	str	r1, [r4, #24]
   39f38:	e2433001 	sub	r3, r3, #1
   39f3c:	e1530002 	cmp	r3, r2
   39f40:	21a03002 	movcs	r3, r2
   39f44:	eaffff67 	b	39ce8 <TermAnsi::handleAnsiChar(unsigned char)+0x178>
   39f48:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   39f4c:	e3550000 	cmp	r5, #0
   39f50:	1affff10 	bne	39b98 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   39f54:	e1a01006 	mov	r1, r6
   39f58:	e59f0c68 	ldr	r0, [pc, #3176]	; 3abc8 <TermAnsi::handleAnsiChar(unsigned char)+0x1058>
   39f5c:	ebffc0bc 	bl	2a254 <strchr>
   39f60:	e3500000 	cmp	r0, #0
   39f64:	1affffba 	bne	39e54 <TermAnsi::handleAnsiChar(unsigned char)+0x2e4>
   39f68:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   39f6c:	eaffff09 	b	39b98 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   39f70:	e5943010 	ldr	r3, [r4, #16]
   39f74:	e5940018 	ldr	r0, [r4, #24]
   39f78:	e2433001 	sub	r3, r3, #1
   39f7c:	e1500003 	cmp	r0, r3
   39f80:	32800001 	addcc	r0, r0, #1
   39f84:	3affffa4 	bcc	39e1c <TermAnsi::handleAnsiChar(unsigned char)+0x2ac>
   39f88:	e3a02001 	mov	r2, #1
   39f8c:	e1a00004 	mov	r0, r4
   39f90:	ebfffd1f 	bl	39414 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   39f94:	eaffff9d 	b	39e10 <TermAnsi::handleAnsiChar(unsigned char)+0x2a0>
   39f98:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   39f9c:	e3550001 	cmp	r5, #1
   39fa0:	1afffefe 	bne	39ba0 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   39fa4:	e1a01006 	mov	r1, r6
   39fa8:	e59f0c24 	ldr	r0, [pc, #3108]	; 3abd4 <TermAnsi::handleAnsiChar(unsigned char)+0x1064>
   39fac:	ebffc0a8 	bl	2a254 <strchr>
   39fb0:	e3500000 	cmp	r0, #0
   39fb4:	0a00001f 	beq	3a038 <TermAnsi::handleAnsiChar(unsigned char)+0x4c8>
   39fb8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   39fbc:	e3530007 	cmp	r3, #7
   39fc0:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39fc4:	92831001 	addls	r1, r3, #1
   39fc8:	9283300c 	addls	r3, r3, #12
   39fcc:	95841050 	strls	r1, [r4, #80]	; 0x50
   39fd0:	97842103 	strls	r2, [r4, r3, lsl #2]
   39fd4:	e3a02000 	mov	r2, #0
   39fd8:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   39fdc:	e5842054 	str	r2, [r4, #84]	; 0x54
   39fe0:	e1530002 	cmp	r3, r2
   39fe4:	1a000008 	bne	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   39fe8:	e5943890 	ldr	r3, [r4, #2192]	; 0x890
   39fec:	e284ce89 	add	ip, r4, #2192	; 0x890
   39ff0:	e28cc008 	add	ip, ip, #8
   39ff4:	e284e014 	add	lr, r4, #20
   39ff8:	e5843894 	str	r3, [r4, #2196]	; 0x894
   39ffc:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3a000:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3a004:	e59e3000 	ldr	r3, [lr]
   3a008:	e58c3000 	str	r3, [ip]
   3a00c:	e5940010 	ldr	r0, [r4, #16]
   3a010:	e5942018 	ldr	r2, [r4, #24]
   3a014:	e594100c 	ldr	r1, [r4, #12]
   3a018:	e2400001 	sub	r0, r0, #1
   3a01c:	e5943014 	ldr	r3, [r4, #20]
   3a020:	e1520000 	cmp	r2, r0
   3a024:	e2411001 	sub	r1, r1, #1
   3a028:	21a02000 	movcs	r2, r0
   3a02c:	e1530001 	cmp	r3, r1
   3a030:	21a03001 	movcs	r3, r1
   3a034:	eaffff2a 	b	39ce4 <TermAnsi::handleAnsiChar(unsigned char)+0x174>
   3a038:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3a03c:	e3550001 	cmp	r5, #1
   3a040:	1afffed6 	bne	39ba0 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3a044:	e1a01006 	mov	r1, r6
   3a048:	e59f0b88 	ldr	r0, [pc, #2952]	; 3abd8 <TermAnsi::handleAnsiChar(unsigned char)+0x1068>
   3a04c:	ebffc080 	bl	2a254 <strchr>
   3a050:	e3500000 	cmp	r0, #0
   3a054:	0a000015 	beq	3a0b0 <TermAnsi::handleAnsiChar(unsigned char)+0x540>
   3a058:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a05c:	e3530007 	cmp	r3, #7
   3a060:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a064:	92831001 	addls	r1, r3, #1
   3a068:	9283300c 	addls	r3, r3, #12
   3a06c:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a070:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a074:	e3a02000 	mov	r2, #0
   3a078:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a07c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a080:	e1530002 	cmp	r3, r2
   3a084:	1affffe0 	bne	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3a088:	e5945894 	ldr	r5, [r4, #2196]	; 0x894
   3a08c:	e284ce89 	add	ip, r4, #2192	; 0x890
   3a090:	e28cc008 	add	ip, ip, #8
   3a094:	e284e014 	add	lr, r4, #20
   3a098:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
   3a09c:	e5845890 	str	r5, [r4, #2192]	; 0x890
   3a0a0:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   3a0a4:	e59c3000 	ldr	r3, [ip]
   3a0a8:	e58e3000 	str	r3, [lr]
   3a0ac:	eaffffd6 	b	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3a0b0:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3a0b4:	e3550001 	cmp	r5, #1
   3a0b8:	1afffeb8 	bne	39ba0 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3a0bc:	e1a01006 	mov	r1, r6
   3a0c0:	e59f0b14 	ldr	r0, [pc, #2836]	; 3abdc <TermAnsi::handleAnsiChar(unsigned char)+0x106c>
   3a0c4:	ebffc062 	bl	2a254 <strchr>
   3a0c8:	e3500000 	cmp	r0, #0
   3a0cc:	0a000004 	beq	3a0e4 <TermAnsi::handleAnsiChar(unsigned char)+0x574>
   3a0d0:	e3a00001 	mov	r0, #1
   3a0d4:	e3a03002 	mov	r3, #2
   3a0d8:	e5c40058 	strb	r0, [r4, #88]	; 0x58
   3a0dc:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3a0e0:	eafffedd 	b	39c5c <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   3a0e4:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3a0e8:	e3550001 	cmp	r5, #1
   3a0ec:	1afffeab 	bne	39ba0 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3a0f0:	e1a01006 	mov	r1, r6
   3a0f4:	e59f0b44 	ldr	r0, [pc, #2884]	; 3ac40 <TermAnsi::handleAnsiChar(unsigned char)+0x10d0>
   3a0f8:	ebffc055 	bl	2a254 <strchr>
   3a0fc:	e3500000 	cmp	r0, #0
   3a100:	0a000010 	beq	3a148 <TermAnsi::handleAnsiChar(unsigned char)+0x5d8>
   3a104:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a108:	e3530007 	cmp	r3, #7
   3a10c:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a110:	92831001 	addls	r1, r3, #1
   3a114:	9283300c 	addls	r3, r3, #12
   3a118:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a11c:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a120:	e3a02000 	mov	r2, #0
   3a124:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a128:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a12c:	e1530002 	cmp	r3, r2
   3a130:	1affffb5 	bne	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3a134:	e5943000 	ldr	r3, [r4]
   3a138:	e1a00004 	mov	r0, r4
   3a13c:	e5933010 	ldr	r3, [r3, #16]
   3a140:	e12fff33 	blx	r3
   3a144:	eaffffb0 	b	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3a148:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3a14c:	e3550001 	cmp	r5, #1
   3a150:	1afffe92 	bne	39ba0 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3a154:	e1a01006 	mov	r1, r6
   3a158:	e59f0a80 	ldr	r0, [pc, #2688]	; 3abe0 <TermAnsi::handleAnsiChar(unsigned char)+0x1070>
   3a15c:	ebffc03c 	bl	2a254 <strchr>
   3a160:	e3500000 	cmp	r0, #0
   3a164:	0a000082 	beq	3a374 <TermAnsi::handleAnsiChar(unsigned char)+0x804>
   3a168:	e3a03002 	mov	r3, #2
   3a16c:	e1a00005 	mov	r0, r5
   3a170:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3a174:	eafffeb8 	b	39c5c <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   3a178:	e1a01006 	mov	r1, r6
   3a17c:	e59f0a44 	ldr	r0, [pc, #2628]	; 3abc8 <TermAnsi::handleAnsiChar(unsigned char)+0x1058>
   3a180:	ebffc033 	bl	2a254 <strchr>
   3a184:	e3500000 	cmp	r0, #0
   3a188:	1affff31 	bne	39e54 <TermAnsi::handleAnsiChar(unsigned char)+0x2e4>
   3a18c:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a190:	e3530002 	cmp	r3, #2
   3a194:	1afffe83 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a198:	e1a01006 	mov	r1, r6
   3a19c:	e59f0a40 	ldr	r0, [pc, #2624]	; 3abe4 <TermAnsi::handleAnsiChar(unsigned char)+0x1074>
   3a1a0:	ebffc02b 	bl	2a254 <strchr>
   3a1a4:	e3500000 	cmp	r0, #0
   3a1a8:	0a00000a 	beq	3a1d8 <TermAnsi::handleAnsiChar(unsigned char)+0x668>
   3a1ac:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a1b0:	e3a00001 	mov	r0, #1
   3a1b4:	e3530007 	cmp	r3, #7
   3a1b8:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a1bc:	92831001 	addls	r1, r3, #1
   3a1c0:	9283300c 	addls	r3, r3, #12
   3a1c4:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a1c8:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a1cc:	e3a03000 	mov	r3, #0
   3a1d0:	e5843054 	str	r3, [r4, #84]	; 0x54
   3a1d4:	eafffea0 	b	39c5c <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   3a1d8:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a1dc:	e3530002 	cmp	r3, #2
   3a1e0:	1afffe70 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a1e4:	e1a01006 	mov	r1, r6
   3a1e8:	e59f09f8 	ldr	r0, [pc, #2552]	; 3abe8 <TermAnsi::handleAnsiChar(unsigned char)+0x1078>
   3a1ec:	ebffc018 	bl	2a254 <strchr>
   3a1f0:	e3500000 	cmp	r0, #0
   3a1f4:	13a00001 	movne	r0, #1
   3a1f8:	1afffe97 	bne	39c5c <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   3a1fc:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a200:	e3530002 	cmp	r3, #2
   3a204:	1afffe67 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a208:	e1a01006 	mov	r1, r6
   3a20c:	e59f09d8 	ldr	r0, [pc, #2520]	; 3abec <TermAnsi::handleAnsiChar(unsigned char)+0x107c>
   3a210:	ebffc00f 	bl	2a254 <strchr>
   3a214:	e3500000 	cmp	r0, #0
   3a218:	1a0000e9 	bne	3a5c4 <TermAnsi::handleAnsiChar(unsigned char)+0xa54>
   3a21c:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a220:	e3530002 	cmp	r3, #2
   3a224:	1afffe5f 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a228:	e1a01006 	mov	r1, r6
   3a22c:	e59f09bc 	ldr	r0, [pc, #2492]	; 3abf0 <TermAnsi::handleAnsiChar(unsigned char)+0x1080>
   3a230:	ebffc007 	bl	2a254 <strchr>
   3a234:	e3500000 	cmp	r0, #0
   3a238:	0a000018 	beq	3a2a0 <TermAnsi::handleAnsiChar(unsigned char)+0x730>
   3a23c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a240:	e3530007 	cmp	r3, #7
   3a244:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a248:	92831001 	addls	r1, r3, #1
   3a24c:	9283300c 	addls	r3, r3, #12
   3a250:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a254:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a258:	e3a02000 	mov	r2, #0
   3a25c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a260:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a264:	e1530002 	cmp	r3, r2
   3a268:	0a000151 	beq	3a7b4 <TermAnsi::handleAnsiChar(unsigned char)+0xc44>
   3a26c:	e5942018 	ldr	r2, [r4, #24]
   3a270:	e5943010 	ldr	r3, [r4, #16]
   3a274:	e594000c 	ldr	r0, [r4, #12]
   3a278:	e2433001 	sub	r3, r3, #1
   3a27c:	e5941014 	ldr	r1, [r4, #20]
   3a280:	e1530002 	cmp	r3, r2
   3a284:	e2400001 	sub	r0, r0, #1
   3a288:	21a03002 	movcs	r3, r2
   3a28c:	e1510000 	cmp	r1, r0
   3a290:	21a01000 	movcs	r1, r0
   3a294:	e5843018 	str	r3, [r4, #24]
   3a298:	e5841014 	str	r1, [r4, #20]
   3a29c:	eafffe92 	b	39cec <TermAnsi::handleAnsiChar(unsigned char)+0x17c>
   3a2a0:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a2a4:	e3530002 	cmp	r3, #2
   3a2a8:	1afffe3e 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a2ac:	e1a01006 	mov	r1, r6
   3a2b0:	e59f093c 	ldr	r0, [pc, #2364]	; 3abf4 <TermAnsi::handleAnsiChar(unsigned char)+0x1084>
   3a2b4:	ebffbfe6 	bl	2a254 <strchr>
   3a2b8:	e3500000 	cmp	r0, #0
   3a2bc:	0a000010 	beq	3a304 <TermAnsi::handleAnsiChar(unsigned char)+0x794>
   3a2c0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a2c4:	e3530007 	cmp	r3, #7
   3a2c8:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a2cc:	92831001 	addls	r1, r3, #1
   3a2d0:	9283300c 	addls	r3, r3, #12
   3a2d4:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a2d8:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a2dc:	e3a02000 	mov	r2, #0
   3a2e0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a2e4:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a2e8:	e1530002 	cmp	r3, r2
   3a2ec:	0a000138 	beq	3a7d4 <TermAnsi::handleAnsiChar(unsigned char)+0xc64>
   3a2f0:	e5943010 	ldr	r3, [r4, #16]
   3a2f4:	e5942018 	ldr	r2, [r4, #24]
   3a2f8:	e2433001 	sub	r3, r3, #1
   3a2fc:	e594000c 	ldr	r0, [r4, #12]
   3a300:	eaffffdd 	b	3a27c <TermAnsi::handleAnsiChar(unsigned char)+0x70c>
   3a304:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a308:	e3530002 	cmp	r3, #2
   3a30c:	1afffe25 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a310:	e1a01006 	mov	r1, r6
   3a314:	e59f08dc 	ldr	r0, [pc, #2268]	; 3abf8 <TermAnsi::handleAnsiChar(unsigned char)+0x1088>
   3a318:	ebffbfcd 	bl	2a254 <strchr>
   3a31c:	e3500000 	cmp	r0, #0
   3a320:	0a000015 	beq	3a37c <TermAnsi::handleAnsiChar(unsigned char)+0x80c>
   3a324:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a328:	e3530007 	cmp	r3, #7
   3a32c:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a330:	92831001 	addls	r1, r3, #1
   3a334:	9283300c 	addls	r3, r3, #12
   3a338:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a33c:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a340:	e3a02000 	mov	r2, #0
   3a344:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a348:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a34c:	e1530002 	cmp	r3, r2
   3a350:	0a000144 	beq	3a868 <TermAnsi::handleAnsiChar(unsigned char)+0xcf8>
   3a354:	e594300c 	ldr	r3, [r4, #12]
   3a358:	e5941014 	ldr	r1, [r4, #20]
   3a35c:	e2433001 	sub	r3, r3, #1
   3a360:	e5940010 	ldr	r0, [r4, #16]
   3a364:	e5942018 	ldr	r2, [r4, #24]
   3a368:	e2400001 	sub	r0, r0, #1
   3a36c:	e1520000 	cmp	r2, r0
   3a370:	eaffff2c 	b	3a028 <TermAnsi::handleAnsiChar(unsigned char)+0x4b8>
   3a374:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3a378:	eafffe08 	b	39ba0 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3a37c:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a380:	e3530002 	cmp	r3, #2
   3a384:	1afffe07 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a388:	e1a01006 	mov	r1, r6
   3a38c:	e59f0868 	ldr	r0, [pc, #2152]	; 3abfc <TermAnsi::handleAnsiChar(unsigned char)+0x108c>
   3a390:	ebffbfaf 	bl	2a254 <strchr>
   3a394:	e3500000 	cmp	r0, #0
   3a398:	0a000013 	beq	3a3ec <TermAnsi::handleAnsiChar(unsigned char)+0x87c>
   3a39c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a3a0:	e3530007 	cmp	r3, #7
   3a3a4:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a3a8:	92831001 	addls	r1, r3, #1
   3a3ac:	9283300c 	addls	r3, r3, #12
   3a3b0:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a3b4:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a3b8:	e3a02000 	mov	r2, #0
   3a3bc:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a3c0:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a3c4:	e1530002 	cmp	r3, r2
   3a3c8:	0a00014b 	beq	3a8fc <TermAnsi::handleAnsiChar(unsigned char)+0xd8c>
   3a3cc:	e5941014 	ldr	r1, [r4, #20]
   3a3d0:	e5940010 	ldr	r0, [r4, #16]
   3a3d4:	e5942018 	ldr	r2, [r4, #24]
   3a3d8:	e594300c 	ldr	r3, [r4, #12]
   3a3dc:	e2400001 	sub	r0, r0, #1
   3a3e0:	e1520000 	cmp	r2, r0
   3a3e4:	e2433001 	sub	r3, r3, #1
   3a3e8:	eaffff0e 	b	3a028 <TermAnsi::handleAnsiChar(unsigned char)+0x4b8>
   3a3ec:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a3f0:	e3530002 	cmp	r3, #2
   3a3f4:	1afffdeb 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a3f8:	e1a01006 	mov	r1, r6
   3a3fc:	e59f07fc 	ldr	r0, [pc, #2044]	; 3ac00 <TermAnsi::handleAnsiChar(unsigned char)+0x1090>
   3a400:	ebffbf93 	bl	2a254 <strchr>
   3a404:	e3500000 	cmp	r0, #0
   3a408:	0a000014 	beq	3a460 <TermAnsi::handleAnsiChar(unsigned char)+0x8f0>
   3a40c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a410:	e3530007 	cmp	r3, #7
   3a414:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a418:	92831001 	addls	r1, r3, #1
   3a41c:	9283300c 	addls	r3, r3, #12
   3a420:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a424:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a428:	e3a03000 	mov	r3, #0
   3a42c:	e5d42058 	ldrb	r2, [r4, #88]	; 0x58
   3a430:	e5843054 	str	r3, [r4, #84]	; 0x54
   3a434:	e1520003 	cmp	r2, r3
   3a438:	0a000151 	beq	3a984 <TermAnsi::handleAnsiChar(unsigned char)+0xe14>
   3a43c:	e5943010 	ldr	r3, [r4, #16]
   3a440:	e5940018 	ldr	r0, [r4, #24]
   3a444:	e5941014 	ldr	r1, [r4, #20]
   3a448:	e2433001 	sub	r3, r3, #1
   3a44c:	e594200c 	ldr	r2, [r4, #12]
   3a450:	e1530000 	cmp	r3, r0
   3a454:	21a03000 	movcs	r3, r0
   3a458:	e2422001 	sub	r2, r2, #1
   3a45c:	eafffe73 	b	39e30 <TermAnsi::handleAnsiChar(unsigned char)+0x2c0>
   3a460:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a464:	e3530002 	cmp	r3, #2
   3a468:	1afffdce 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a46c:	e1a01006 	mov	r1, r6
   3a470:	e59f078c 	ldr	r0, [pc, #1932]	; 3ac04 <TermAnsi::handleAnsiChar(unsigned char)+0x1094>
   3a474:	ebffbf76 	bl	2a254 <strchr>
   3a478:	e3500000 	cmp	r0, #0
   3a47c:	0a000012 	beq	3a4cc <TermAnsi::handleAnsiChar(unsigned char)+0x95c>
   3a480:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a484:	e3530007 	cmp	r3, #7
   3a488:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a48c:	92831001 	addls	r1, r3, #1
   3a490:	9283300c 	addls	r3, r3, #12
   3a494:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a498:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a49c:	e3a03000 	mov	r3, #0
   3a4a0:	e5d42058 	ldrb	r2, [r4, #88]	; 0x58
   3a4a4:	e5843054 	str	r3, [r4, #84]	; 0x54
   3a4a8:	e1520003 	cmp	r2, r3
   3a4ac:	0a000155 	beq	3aa08 <TermAnsi::handleAnsiChar(unsigned char)+0xe98>
   3a4b0:	e1c401d4 	ldrd	r0, [r4, #20]
   3a4b4:	e5942010 	ldr	r2, [r4, #16]
   3a4b8:	e594300c 	ldr	r3, [r4, #12]
   3a4bc:	e2422001 	sub	r2, r2, #1
   3a4c0:	e1520001 	cmp	r2, r1
   3a4c4:	e2433001 	sub	r3, r3, #1
   3a4c8:	eafffe02 	b	39cd8 <TermAnsi::handleAnsiChar(unsigned char)+0x168>
   3a4cc:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a4d0:	e3530002 	cmp	r3, #2
   3a4d4:	1afffdb3 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a4d8:	e1a01006 	mov	r1, r6
   3a4dc:	e59f0724 	ldr	r0, [pc, #1828]	; 3ac08 <TermAnsi::handleAnsiChar(unsigned char)+0x1098>
   3a4e0:	ebffbf5b 	bl	2a254 <strchr>
   3a4e4:	e3500000 	cmp	r0, #0
   3a4e8:	0a000018 	beq	3a550 <TermAnsi::handleAnsiChar(unsigned char)+0x9e0>
   3a4ec:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a4f0:	e3530007 	cmp	r3, #7
   3a4f4:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a4f8:	92831001 	addls	r1, r3, #1
   3a4fc:	9283300c 	addls	r3, r3, #12
   3a500:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a504:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a508:	e3a02000 	mov	r2, #0
   3a50c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a510:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a514:	e1530002 	cmp	r3, r2
   3a518:	0a000159 	beq	3aa84 <TermAnsi::handleAnsiChar(unsigned char)+0xf14>
   3a51c:	e594300c 	ldr	r3, [r4, #12]
   3a520:	e5942014 	ldr	r2, [r4, #20]
   3a524:	e2433001 	sub	r3, r3, #1
   3a528:	e1530002 	cmp	r3, r2
   3a52c:	21a03002 	movcs	r3, r2
   3a530:	e5941010 	ldr	r1, [r4, #16]
   3a534:	e5942018 	ldr	r2, [r4, #24]
   3a538:	e2411001 	sub	r1, r1, #1
   3a53c:	e1520001 	cmp	r2, r1
   3a540:	21a02001 	movcs	r2, r1
   3a544:	e5843014 	str	r3, [r4, #20]
   3a548:	e5842018 	str	r2, [r4, #24]
   3a54c:	eafffde6 	b	39cec <TermAnsi::handleAnsiChar(unsigned char)+0x17c>
   3a550:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a554:	e3530002 	cmp	r3, #2
   3a558:	1afffd92 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a55c:	e1a01006 	mov	r1, r6
   3a560:	e59f06a4 	ldr	r0, [pc, #1700]	; 3ac0c <TermAnsi::handleAnsiChar(unsigned char)+0x109c>
   3a564:	ebffbf3a 	bl	2a254 <strchr>
   3a568:	e3500000 	cmp	r0, #0
   3a56c:	0a00001d 	beq	3a5e8 <TermAnsi::handleAnsiChar(unsigned char)+0xa78>
   3a570:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a574:	e3530007 	cmp	r3, #7
   3a578:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a57c:	92831001 	addls	r1, r3, #1
   3a580:	9283300c 	addls	r3, r3, #12
   3a584:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a588:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a58c:	e3a02000 	mov	r2, #0
   3a590:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a594:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a598:	e1530002 	cmp	r3, r2
   3a59c:	0a00015d 	beq	3ab18 <TermAnsi::handleAnsiChar(unsigned char)+0xfa8>
   3a5a0:	e5943010 	ldr	r3, [r4, #16]
   3a5a4:	e5942018 	ldr	r2, [r4, #24]
   3a5a8:	e2433001 	sub	r3, r3, #1
   3a5ac:	e1530002 	cmp	r3, r2
   3a5b0:	21a03002 	movcs	r3, r2
   3a5b4:	e594100c 	ldr	r1, [r4, #12]
   3a5b8:	e5942014 	ldr	r2, [r4, #20]
   3a5bc:	e2411001 	sub	r1, r1, #1
   3a5c0:	eafffe1a 	b	39e30 <TermAnsi::handleAnsiChar(unsigned char)+0x2c0>
   3a5c4:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   3a5c8:	e28d0004 	add	r0, sp, #4
   3a5cc:	e0833103 	add	r3, r3, r3, lsl #2
   3a5d0:	e1a05083 	lsl	r5, r3, #1
   3a5d4:	ebffc047 	bl	2a6f8 <atoi>
   3a5d8:	e0800005 	add	r0, r0, r5
   3a5dc:	e5840054 	str	r0, [r4, #84]	; 0x54
   3a5e0:	e3a00001 	mov	r0, #1
   3a5e4:	eafffd9c 	b	39c5c <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   3a5e8:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a5ec:	e3530002 	cmp	r3, #2
   3a5f0:	1afffd6c 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a5f4:	e1a01006 	mov	r1, r6
   3a5f8:	e59f0610 	ldr	r0, [pc, #1552]	; 3ac10 <TermAnsi::handleAnsiChar(unsigned char)+0x10a0>
   3a5fc:	ebffbf14 	bl	2a254 <strchr>
   3a600:	e3500000 	cmp	r0, #0
   3a604:	0a000013 	beq	3a658 <TermAnsi::handleAnsiChar(unsigned char)+0xae8>
   3a608:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a60c:	e3530007 	cmp	r3, #7
   3a610:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a614:	92831001 	addls	r1, r3, #1
   3a618:	9283300c 	addls	r3, r3, #12
   3a61c:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a620:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a624:	e3a02000 	mov	r2, #0
   3a628:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a62c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a630:	e1530002 	cmp	r3, r2
   3a634:	0a00018b 	beq	3ac68 <TermAnsi::handleAnsiChar(unsigned char)+0x10f8>
   3a638:	e5940018 	ldr	r0, [r4, #24]
   3a63c:	e5941014 	ldr	r1, [r4, #20]
   3a640:	e5942010 	ldr	r2, [r4, #16]
   3a644:	e594300c 	ldr	r3, [r4, #12]
   3a648:	e2422001 	sub	r2, r2, #1
   3a64c:	e1520000 	cmp	r2, r0
   3a650:	e2433001 	sub	r3, r3, #1
   3a654:	eafffe73 	b	3a028 <TermAnsi::handleAnsiChar(unsigned char)+0x4b8>
   3a658:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a65c:	e3530002 	cmp	r3, #2
   3a660:	1afffd50 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a664:	e1a01006 	mov	r1, r6
   3a668:	e59f05a4 	ldr	r0, [pc, #1444]	; 3ac14 <TermAnsi::handleAnsiChar(unsigned char)+0x10a4>
   3a66c:	ebffbef8 	bl	2a254 <strchr>
   3a670:	e3500000 	cmp	r0, #0
   3a674:	0a000020 	beq	3a6fc <TermAnsi::handleAnsiChar(unsigned char)+0xb8c>
   3a678:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a67c:	e594000c 	ldr	r0, [r4, #12]
   3a680:	e3530007 	cmp	r3, #7
   3a684:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a688:	92831001 	addls	r1, r3, #1
   3a68c:	9283300c 	addls	r3, r3, #12
   3a690:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a694:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a698:	e3a02000 	mov	r2, #0
   3a69c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a6a0:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a6a4:	e1530002 	cmp	r3, r2
   3a6a8:	1a00000c 	bne	3a6e0 <TermAnsi::handleAnsiChar(unsigned char)+0xb70>
   3a6ac:	e5943014 	ldr	r3, [r4, #20]
   3a6b0:	e240c001 	sub	ip, r0, #1
   3a6b4:	e2833001 	add	r3, r3, #1
   3a6b8:	e284e058 	add	lr, r4, #88	; 0x58
   3a6bc:	ea000003 	b	3a6d0 <TermAnsi::handleAnsiChar(unsigned char)+0xb60>
   3a6c0:	e7de1102 	ldrb	r1, [lr, r2, lsl #2]
   3a6c4:	e351002a 	cmp	r1, #42	; 0x2a
   3a6c8:	0a000003 	beq	3a6dc <TermAnsi::handleAnsiChar(unsigned char)+0xb6c>
   3a6cc:	e1a03002 	mov	r3, r2
   3a6d0:	e15c0003 	cmp	ip, r3
   3a6d4:	e2832001 	add	r2, r3, #1
   3a6d8:	8afffff8 	bhi	3a6c0 <TermAnsi::handleAnsiChar(unsigned char)+0xb50>
   3a6dc:	e5843014 	str	r3, [r4, #20]
   3a6e0:	e5941010 	ldr	r1, [r4, #16]
   3a6e4:	e5942018 	ldr	r2, [r4, #24]
   3a6e8:	e2411001 	sub	r1, r1, #1
   3a6ec:	e5943014 	ldr	r3, [r4, #20]
   3a6f0:	e2400001 	sub	r0, r0, #1
   3a6f4:	e1520001 	cmp	r2, r1
   3a6f8:	eafffd76 	b	39cd8 <TermAnsi::handleAnsiChar(unsigned char)+0x168>
   3a6fc:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a700:	e3530002 	cmp	r3, #2
   3a704:	1afffd27 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a708:	e1a01006 	mov	r1, r6
   3a70c:	e59f0504 	ldr	r0, [pc, #1284]	; 3ac18 <TermAnsi::handleAnsiChar(unsigned char)+0x10a8>
   3a710:	ebffbecf 	bl	2a254 <strchr>
   3a714:	e3500000 	cmp	r0, #0
   3a718:	0a00000e 	beq	3a758 <TermAnsi::handleAnsiChar(unsigned char)+0xbe8>
   3a71c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a720:	e3530007 	cmp	r3, #7
   3a724:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a728:	92831001 	addls	r1, r3, #1
   3a72c:	9283300c 	addls	r3, r3, #12
   3a730:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a734:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a738:	e3a02000 	mov	r2, #0
   3a73c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a740:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a744:	e1530002 	cmp	r3, r2
   3a748:	1afffe2f 	bne	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3a74c:	e1a00004 	mov	r0, r4
   3a750:	ebfffc00 	bl	39758 <TermAnsi::ed()>
   3a754:	eafffe2c 	b	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3a758:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a75c:	e3530002 	cmp	r3, #2
   3a760:	1afffd10 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a764:	e1a01006 	mov	r1, r6
   3a768:	e59f04ac 	ldr	r0, [pc, #1196]	; 3ac1c <TermAnsi::handleAnsiChar(unsigned char)+0x10ac>
   3a76c:	ebffbeb8 	bl	2a254 <strchr>
   3a770:	e3500000 	cmp	r0, #0
   3a774:	0a000020 	beq	3a7fc <TermAnsi::handleAnsiChar(unsigned char)+0xc8c>
   3a778:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a77c:	e3530007 	cmp	r3, #7
   3a780:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a784:	92831001 	addls	r1, r3, #1
   3a788:	9283300c 	addls	r3, r3, #12
   3a78c:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a790:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a794:	e3a02000 	mov	r2, #0
   3a798:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a79c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a7a0:	e1530002 	cmp	r3, r2
   3a7a4:	1afffe18 	bne	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3a7a8:	e1a00004 	mov	r0, r4
   3a7ac:	ebfffc07 	bl	397d0 <TermAnsi::el()>
   3a7b0:	eafffe15 	b	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3a7b4:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3a7b8:	e5941018 	ldr	r1, [r4, #24]
   3a7bc:	e3520001 	cmp	r2, #1
   3a7c0:	33a02001 	movcc	r2, #1
   3a7c4:	e1510002 	cmp	r1, r2
   3a7c8:	31a02003 	movcc	r2, r3
   3a7cc:	20412002 	subcs	r2, r1, r2
   3a7d0:	eafffea6 	b	3a270 <TermAnsi::handleAnsiChar(unsigned char)+0x700>
   3a7d4:	e5941030 	ldr	r1, [r4, #48]	; 0x30
   3a7d8:	e5942018 	ldr	r2, [r4, #24]
   3a7dc:	e5943010 	ldr	r3, [r4, #16]
   3a7e0:	e3510001 	cmp	r1, #1
   3a7e4:	20822001 	addcs	r2, r2, r1
   3a7e8:	32822001 	addcc	r2, r2, #1
   3a7ec:	e2433001 	sub	r3, r3, #1
   3a7f0:	e1520003 	cmp	r2, r3
   3a7f4:	21a02003 	movcs	r2, r3
   3a7f8:	eafffebf 	b	3a2fc <TermAnsi::handleAnsiChar(unsigned char)+0x78c>
   3a7fc:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a800:	e3530002 	cmp	r3, #2
   3a804:	1afffce7 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a808:	e1a01006 	mov	r1, r6
   3a80c:	e59f040c 	ldr	r0, [pc, #1036]	; 3ac20 <TermAnsi::handleAnsiChar(unsigned char)+0x10b0>
   3a810:	ebffbe8f 	bl	2a254 <strchr>
   3a814:	e3500000 	cmp	r0, #0
   3a818:	0a00001c 	beq	3a890 <TermAnsi::handleAnsiChar(unsigned char)+0xd20>
   3a81c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a820:	e3530007 	cmp	r3, #7
   3a824:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a828:	92831001 	addls	r1, r3, #1
   3a82c:	9283300c 	addls	r3, r3, #12
   3a830:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a834:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a838:	e3a02000 	mov	r2, #0
   3a83c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a840:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a844:	e1530002 	cmp	r3, r2
   3a848:	05942030 	ldreq	r2, [r4, #48]	; 0x30
   3a84c:	05941018 	ldreq	r1, [r4, #24]
   3a850:	1afffded 	bne	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3a854:	e3520001 	cmp	r2, #1
   3a858:	33a02001 	movcc	r2, #1
   3a85c:	e1a00004 	mov	r0, r4
   3a860:	ebfffb6a 	bl	39610 <TermAnsi::scrollDown(unsigned int, unsigned int)>
   3a864:	eafffde8 	b	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3a868:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3a86c:	e5941014 	ldr	r1, [r4, #20]
   3a870:	e594300c 	ldr	r3, [r4, #12]
   3a874:	e3520001 	cmp	r2, #1
   3a878:	20811002 	addcs	r1, r1, r2
   3a87c:	32811001 	addcc	r1, r1, #1
   3a880:	e2433001 	sub	r3, r3, #1
   3a884:	e1510003 	cmp	r1, r3
   3a888:	21a01003 	movcs	r1, r3
   3a88c:	eafffeb3 	b	3a360 <TermAnsi::handleAnsiChar(unsigned char)+0x7f0>
   3a890:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a894:	e3530002 	cmp	r3, #2
   3a898:	1afffcc2 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a89c:	e1a01006 	mov	r1, r6
   3a8a0:	e59f037c 	ldr	r0, [pc, #892]	; 3ac24 <TermAnsi::handleAnsiChar(unsigned char)+0x10b4>
   3a8a4:	ebffbe6a 	bl	2a254 <strchr>
   3a8a8:	e3500000 	cmp	r0, #0
   3a8ac:	0a00001d 	beq	3a928 <TermAnsi::handleAnsiChar(unsigned char)+0xdb8>
   3a8b0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a8b4:	e3530007 	cmp	r3, #7
   3a8b8:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a8bc:	92831001 	addls	r1, r3, #1
   3a8c0:	9283300c 	addls	r3, r3, #12
   3a8c4:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a8c8:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a8cc:	e3a02000 	mov	r2, #0
   3a8d0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a8d4:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a8d8:	e1530002 	cmp	r3, r2
   3a8dc:	05942030 	ldreq	r2, [r4, #48]	; 0x30
   3a8e0:	05941018 	ldreq	r1, [r4, #24]
   3a8e4:	1afffdc8 	bne	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3a8e8:	e3520001 	cmp	r2, #1
   3a8ec:	33a02001 	movcc	r2, #1
   3a8f0:	e1a00004 	mov	r0, r4
   3a8f4:	ebfffac6 	bl	39414 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3a8f8:	eafffdc3 	b	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3a8fc:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3a900:	e5941014 	ldr	r1, [r4, #20]
   3a904:	e3520001 	cmp	r2, #1
   3a908:	33a02001 	movcc	r2, #1
   3a90c:	e1520001 	cmp	r2, r1
   3a910:	81a01003 	movhi	r1, r3
   3a914:	8afffead 	bhi	3a3d0 <TermAnsi::handleAnsiChar(unsigned char)+0x860>
   3a918:	e0412002 	sub	r2, r1, r2
   3a91c:	e1520001 	cmp	r2, r1
   3a920:	31a01002 	movcc	r1, r2
   3a924:	eafffea9 	b	3a3d0 <TermAnsi::handleAnsiChar(unsigned char)+0x860>
   3a928:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a92c:	e3530002 	cmp	r3, #2
   3a930:	1afffc9c 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a934:	e1a01006 	mov	r1, r6
   3a938:	e59f02e8 	ldr	r0, [pc, #744]	; 3ac28 <TermAnsi::handleAnsiChar(unsigned char)+0x10b8>
   3a93c:	ebffbe44 	bl	2a254 <strchr>
   3a940:	e3500000 	cmp	r0, #0
   3a944:	0a000019 	beq	3a9b0 <TermAnsi::handleAnsiChar(unsigned char)+0xe40>
   3a948:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a94c:	e3530007 	cmp	r3, #7
   3a950:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a954:	92831001 	addls	r1, r3, #1
   3a958:	9283300c 	addls	r3, r3, #12
   3a95c:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a960:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a964:	e3a02000 	mov	r2, #0
   3a968:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a96c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a970:	e1530002 	cmp	r3, r2
   3a974:	1afffda4 	bne	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3a978:	e1a00004 	mov	r0, r4
   3a97c:	ebfffbab 	bl	39830 <TermAnsi::dch()>
   3a980:	eafffda1 	b	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3a984:	e5941030 	ldr	r1, [r4, #48]	; 0x30
   3a988:	e5940018 	ldr	r0, [r4, #24]
   3a98c:	e5943010 	ldr	r3, [r4, #16]
   3a990:	e3510001 	cmp	r1, #1
   3a994:	20800001 	addcs	r0, r0, r1
   3a998:	32800001 	addcc	r0, r0, #1
   3a99c:	e2433001 	sub	r3, r3, #1
   3a9a0:	e1500003 	cmp	r0, r3
   3a9a4:	e1a01002 	mov	r1, r2
   3a9a8:	21a00003 	movcs	r0, r3
   3a9ac:	eafffea6 	b	3a44c <TermAnsi::handleAnsiChar(unsigned char)+0x8dc>
   3a9b0:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3a9b4:	e3530002 	cmp	r3, #2
   3a9b8:	1afffc7a 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3a9bc:	e1a01006 	mov	r1, r6
   3a9c0:	e59f0264 	ldr	r0, [pc, #612]	; 3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x10bc>
   3a9c4:	ebffbe22 	bl	2a254 <strchr>
   3a9c8:	e3500000 	cmp	r0, #0
   3a9cc:	0a000016 	beq	3aa2c <TermAnsi::handleAnsiChar(unsigned char)+0xebc>
   3a9d0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a9d4:	e3530007 	cmp	r3, #7
   3a9d8:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a9dc:	92831001 	addls	r1, r3, #1
   3a9e0:	9283300c 	addls	r3, r3, #12
   3a9e4:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a9e8:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a9ec:	e3a03000 	mov	r3, #0
   3a9f0:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3a9f4:	e5843054 	str	r3, [r4, #84]	; 0x54
   3a9f8:	e1510003 	cmp	r1, r3
   3a9fc:	1afffd82 	bne	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3aa00:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3aa04:	eaffffb7 	b	3a8e8 <TermAnsi::handleAnsiChar(unsigned char)+0xd78>
   3aa08:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3aa0c:	e5941018 	ldr	r1, [r4, #24]
   3aa10:	e3530001 	cmp	r3, #1
   3aa14:	33a03001 	movcc	r3, #1
   3aa18:	e1510003 	cmp	r1, r3
   3aa1c:	01a01002 	moveq	r1, r2
   3aa20:	e3a00000 	mov	r0, #0
   3aa24:	10411003 	subne	r1, r1, r3
   3aa28:	eafffea1 	b	3a4b4 <TermAnsi::handleAnsiChar(unsigned char)+0x944>
   3aa2c:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3aa30:	e3530002 	cmp	r3, #2
   3aa34:	1afffc5b 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3aa38:	e1a01006 	mov	r1, r6
   3aa3c:	e59f01ec 	ldr	r0, [pc, #492]	; 3ac30 <TermAnsi::handleAnsiChar(unsigned char)+0x10c0>
   3aa40:	ebffbe03 	bl	2a254 <strchr>
   3aa44:	e3500000 	cmp	r0, #0
   3aa48:	0a000016 	beq	3aaa8 <TermAnsi::handleAnsiChar(unsigned char)+0xf38>
   3aa4c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3aa50:	e3530007 	cmp	r3, #7
   3aa54:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3aa58:	92831001 	addls	r1, r3, #1
   3aa5c:	9283300c 	addls	r3, r3, #12
   3aa60:	95841050 	strls	r1, [r4, #80]	; 0x50
   3aa64:	97842103 	strls	r2, [r4, r3, lsl #2]
   3aa68:	e3a03000 	mov	r3, #0
   3aa6c:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3aa70:	e5843054 	str	r3, [r4, #84]	; 0x54
   3aa74:	e1510003 	cmp	r1, r3
   3aa78:	1afffd63 	bne	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3aa7c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3aa80:	eaffff73 	b	3a854 <TermAnsi::handleAnsiChar(unsigned char)+0xce4>
   3aa84:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3aa88:	e594200c 	ldr	r2, [r4, #12]
   3aa8c:	e3530000 	cmp	r3, #0
   3aa90:	0afffea6 	beq	3a530 <TermAnsi::handleAnsiChar(unsigned char)+0x9c0>
   3aa94:	e2422001 	sub	r2, r2, #1
   3aa98:	e2433001 	sub	r3, r3, #1
   3aa9c:	e1530002 	cmp	r3, r2
   3aaa0:	21a03002 	movcs	r3, r2
   3aaa4:	eafffea1 	b	3a530 <TermAnsi::handleAnsiChar(unsigned char)+0x9c0>
   3aaa8:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3aaac:	e3530002 	cmp	r3, #2
   3aab0:	1afffc3c 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3aab4:	e1a01006 	mov	r1, r6
   3aab8:	e59f0174 	ldr	r0, [pc, #372]	; 3ac34 <TermAnsi::handleAnsiChar(unsigned char)+0x10c4>
   3aabc:	ebffbde4 	bl	2a254 <strchr>
   3aac0:	e3500000 	cmp	r0, #0
   3aac4:	0a00001c 	beq	3ab3c <TermAnsi::handleAnsiChar(unsigned char)+0xfcc>
   3aac8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3aacc:	e3530007 	cmp	r3, #7
   3aad0:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3aad4:	92831001 	addls	r1, r3, #1
   3aad8:	9283300c 	addls	r3, r3, #12
   3aadc:	95841050 	strls	r1, [r4, #80]	; 0x50
   3aae0:	97842103 	strls	r2, [r4, r3, lsl #2]
   3aae4:	e3a02000 	mov	r2, #0
   3aae8:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3aaec:	e5842054 	str	r2, [r4, #84]	; 0x54
   3aaf0:	e1530002 	cmp	r3, r2
   3aaf4:	1afffd44 	bne	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3aaf8:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3aafc:	e1a00004 	mov	r0, r4
   3ab00:	e3530001 	cmp	r3, #1
   3ab04:	33a03001 	movcc	r3, #1
   3ab08:	e5942014 	ldr	r2, [r4, #20]
   3ab0c:	e5941018 	ldr	r1, [r4, #24]
   3ab10:	ebfffa14 	bl	39368 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3ab14:	eafffd3c 	b	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3ab18:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3ab1c:	e5942010 	ldr	r2, [r4, #16]
   3ab20:	e3530000 	cmp	r3, #0
   3ab24:	0afffea2 	beq	3a5b4 <TermAnsi::handleAnsiChar(unsigned char)+0xa44>
   3ab28:	e2422001 	sub	r2, r2, #1
   3ab2c:	e2433001 	sub	r3, r3, #1
   3ab30:	e1530002 	cmp	r3, r2
   3ab34:	21a03002 	movcs	r3, r2
   3ab38:	eafffe9d 	b	3a5b4 <TermAnsi::handleAnsiChar(unsigned char)+0xa44>
   3ab3c:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ab40:	e3530002 	cmp	r3, #2
   3ab44:	1afffc17 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ab48:	e1a01006 	mov	r1, r6
   3ab4c:	e59f00e4 	ldr	r0, [pc, #228]	; 3ac38 <TermAnsi::handleAnsiChar(unsigned char)+0x10c8>
   3ab50:	ebffbdbf 	bl	2a254 <strchr>
   3ab54:	e3500000 	cmp	r0, #0
   3ab58:	0a000049 	beq	3ac84 <TermAnsi::handleAnsiChar(unsigned char)+0x1114>
   3ab5c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ab60:	e3530007 	cmp	r3, #7
   3ab64:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3ab68:	92831001 	addls	r1, r3, #1
   3ab6c:	9283300c 	addls	r3, r3, #12
   3ab70:	95841050 	strls	r1, [r4, #80]	; 0x50
   3ab74:	97842103 	strls	r2, [r4, r3, lsl #2]
   3ab78:	e3a02000 	mov	r2, #0
   3ab7c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3ab80:	e5842054 	str	r2, [r4, #84]	; 0x54
   3ab84:	e1530002 	cmp	r3, r2
   3ab88:	1afffd1f 	bne	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3ab8c:	e5943014 	ldr	r3, [r4, #20]
   3ab90:	e284105c 	add	r1, r4, #92	; 0x5c
   3ab94:	ea000003 	b	3aba8 <TermAnsi::handleAnsiChar(unsigned char)+0x1038>
   3ab98:	e5843014 	str	r3, [r4, #20]
   3ab9c:	e7d12103 	ldrb	r2, [r1, r3, lsl #2]
   3aba0:	e352002a 	cmp	r2, #42	; 0x2a
   3aba4:	0afffd18 	beq	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3aba8:	e3530000 	cmp	r3, #0
   3abac:	e2433001 	sub	r3, r3, #1
   3abb0:	1afffff8 	bne	3ab98 <TermAnsi::handleAnsiChar(unsigned char)+0x1028>
   3abb4:	eafffd14 	b	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3abb8:	000471d0 	.word	0x000471d0
   3abbc:	000471d4 	.word	0x000471d4
   3abc0:	000413c8 	.word	0x000413c8
   3abc4:	00046f54 	.word	0x00046f54
   3abc8:	000413c0 	.word	0x000413c0
   3abcc:	00040ec0 	.word	0x00040ec0
   3abd0:	000471d8 	.word	0x000471d8
   3abd4:	00041470 	.word	0x00041470
   3abd8:	00041474 	.word	0x00041474
   3abdc:	000471dc 	.word	0x000471dc
   3abe0:	000463ac 	.word	0x000463ac
   3abe4:	000471e8 	.word	0x000471e8
   3abe8:	000471ec 	.word	0x000471ec
   3abec:	000471f0 	.word	0x000471f0
   3abf0:	000471fc 	.word	0x000471fc
   3abf4:	00047200 	.word	0x00047200
   3abf8:	0004482c 	.word	0x0004482c
   3abfc:	00047204 	.word	0x00047204
   3ac00:	00044480 	.word	0x00044480
   3ac04:	00047208 	.word	0x00047208
   3ac08:	0004720c 	.word	0x0004720c
   3ac0c:	00046314 	.word	0x00046314
   3ac10:	00047210 	.word	0x00047210
   3ac14:	00047214 	.word	0x00047214
   3ac18:	00047218 	.word	0x00047218
   3ac1c:	0004410c 	.word	0x0004410c
   3ac20:	000454cc 	.word	0x000454cc
   3ac24:	0004721c 	.word	0x0004721c
   3ac28:	00040e88 	.word	0x00040e88
   3ac2c:	0003ed9c 	.word	0x0003ed9c
   3ac30:	0003ee44 	.word	0x0003ee44
   3ac34:	00040ca8 	.word	0x00040ca8
   3ac38:	00047220 	.word	0x00047220
   3ac3c:	00047224 	.word	0x00047224
   3ac40:	000471e4 	.word	0x000471e4
   3ac44:	00044170 	.word	0x00044170
   3ac48:	00047228 	.word	0x00047228
   3ac4c:	0003f3a0 	.word	0x0003f3a0
   3ac50:	00044d20 	.word	0x00044d20
   3ac54:	0003f250 	.word	0x0003f250
   3ac58:	0003fb30 	.word	0x0003fb30
   3ac5c:	000438d4 	.word	0x000438d4
   3ac60:	00043b4c 	.word	0x00043b4c
   3ac64:	0004722c 	.word	0x0004722c
   3ac68:	e5940030 	ldr	r0, [r4, #48]	; 0x30
   3ac6c:	e5941034 	ldr	r1, [r4, #52]	; 0x34
   3ac70:	e3500000 	cmp	r0, #0
   3ac74:	12400001 	subne	r0, r0, #1
   3ac78:	e3510000 	cmp	r1, #0
   3ac7c:	12411001 	subne	r1, r1, #1
   3ac80:	eafffe6e 	b	3a640 <TermAnsi::handleAnsiChar(unsigned char)+0xad0>
   3ac84:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ac88:	e3530002 	cmp	r3, #2
   3ac8c:	1afffbc5 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ac90:	e1a01006 	mov	r1, r6
   3ac94:	e51f0060 	ldr	r0, [pc, #-96]	; 3ac3c <TermAnsi::handleAnsiChar(unsigned char)+0x10cc>
   3ac98:	ebffbd6d 	bl	2a254 <strchr>
   3ac9c:	e3500000 	cmp	r0, #0
   3aca0:	0a00000e 	beq	3ace0 <TermAnsi::handleAnsiChar(unsigned char)+0x1170>
   3aca4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3aca8:	e3530007 	cmp	r3, #7
   3acac:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3acb0:	92831001 	addls	r1, r3, #1
   3acb4:	9283300c 	addls	r3, r3, #12
   3acb8:	95841050 	strls	r1, [r4, #80]	; 0x50
   3acbc:	97842103 	strls	r2, [r4, r3, lsl #2]
   3acc0:	e3a02000 	mov	r2, #0
   3acc4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3acc8:	e5842054 	str	r2, [r4, #84]	; 0x54
   3accc:	e1530002 	cmp	r3, r2
   3acd0:	1afffccd 	bne	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3acd4:	e1a00004 	mov	r0, r4
   3acd8:	ebfffb10 	bl	39920 <TermAnsi::rep()>
   3acdc:	eafffcca 	b	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3ace0:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ace4:	e3530002 	cmp	r3, #2
   3ace8:	1afffbae 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3acec:	e1a01006 	mov	r1, r6
   3acf0:	e51f00b8 	ldr	r0, [pc, #-184]	; 3ac40 <TermAnsi::handleAnsiChar(unsigned char)+0x10d0>
   3acf4:	ebffbd56 	bl	2a254 <strchr>
   3acf8:	e3500000 	cmp	r0, #0
   3acfc:	1afffbb8 	bne	39be4 <TermAnsi::handleAnsiChar(unsigned char)+0x74>
   3ad00:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ad04:	e3530002 	cmp	r3, #2
   3ad08:	1afffba6 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ad0c:	e1a01006 	mov	r1, r6
   3ad10:	e51f00d4 	ldr	r0, [pc, #-212]	; 3ac44 <TermAnsi::handleAnsiChar(unsigned char)+0x10d4>
   3ad14:	ebffbd4e 	bl	2a254 <strchr>
   3ad18:	e3500000 	cmp	r0, #0
   3ad1c:	0a000010 	beq	3ad64 <TermAnsi::handleAnsiChar(unsigned char)+0x11f4>
   3ad20:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ad24:	e3530007 	cmp	r3, #7
   3ad28:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3ad2c:	92831001 	addls	r1, r3, #1
   3ad30:	9283300c 	addls	r3, r3, #12
   3ad34:	95841050 	strls	r1, [r4, #80]	; 0x50
   3ad38:	97842103 	strls	r2, [r4, r3, lsl #2]
   3ad3c:	e3a03000 	mov	r3, #0
   3ad40:	e5d42058 	ldrb	r2, [r4, #88]	; 0x58
   3ad44:	e5843054 	str	r3, [r4, #84]	; 0x54
   3ad48:	e1520003 	cmp	r2, r3
   3ad4c:	1a000002 	bne	3ad5c <TermAnsi::handleAnsiChar(unsigned char)+0x11ec>
   3ad50:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3ad54:	e3530003 	cmp	r3, #3
   3ad58:	0a00005f 	beq	3aedc <TermAnsi::handleAnsiChar(unsigned char)+0x136c>
   3ad5c:	e594000c 	ldr	r0, [r4, #12]
   3ad60:	eafffe5e 	b	3a6e0 <TermAnsi::handleAnsiChar(unsigned char)+0xb70>
   3ad64:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ad68:	e3530002 	cmp	r3, #2
   3ad6c:	1afffb8d 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ad70:	e1a01006 	mov	r1, r6
   3ad74:	e51f0134 	ldr	r0, [pc, #-308]	; 3ac48 <TermAnsi::handleAnsiChar(unsigned char)+0x10d8>
   3ad78:	ebffbd35 	bl	2a254 <strchr>
   3ad7c:	e3500000 	cmp	r0, #0
   3ad80:	0a00000e 	beq	3adc0 <TermAnsi::handleAnsiChar(unsigned char)+0x1250>
   3ad84:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ad88:	e3530007 	cmp	r3, #7
   3ad8c:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3ad90:	92831001 	addls	r1, r3, #1
   3ad94:	9283300c 	addls	r3, r3, #12
   3ad98:	95841050 	strls	r1, [r4, #80]	; 0x50
   3ad9c:	97842103 	strls	r2, [r4, r3, lsl #2]
   3ada0:	e3a02000 	mov	r2, #0
   3ada4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3ada8:	e5842054 	str	r2, [r4, #84]	; 0x54
   3adac:	e1530002 	cmp	r3, r2
   3adb0:	1afffc95 	bne	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3adb4:	e1a00004 	mov	r0, r4
   3adb8:	ebfffaee 	bl	39978 <TermAnsi::sgr()>
   3adbc:	eafffc92 	b	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3adc0:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3adc4:	e3530002 	cmp	r3, #2
   3adc8:	1afffb76 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3adcc:	e1a01006 	mov	r1, r6
   3add0:	e51f018c 	ldr	r0, [pc, #-396]	; 3ac4c <TermAnsi::handleAnsiChar(unsigned char)+0x10dc>
   3add4:	ebffbd1e 	bl	2a254 <strchr>
   3add8:	e3500000 	cmp	r0, #0
   3addc:	1afffb80 	bne	39be4 <TermAnsi::handleAnsiChar(unsigned char)+0x74>
   3ade0:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ade4:	e3530002 	cmp	r3, #2
   3ade8:	1afffb6e 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3adec:	e1a01006 	mov	r1, r6
   3adf0:	e51f01a8 	ldr	r0, [pc, #-424]	; 3ac50 <TermAnsi::handleAnsiChar(unsigned char)+0x10e0>
   3adf4:	ebffbd16 	bl	2a254 <strchr>
   3adf8:	e3500000 	cmp	r0, #0
   3adfc:	1afffb78 	bne	39be4 <TermAnsi::handleAnsiChar(unsigned char)+0x74>
   3ae00:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ae04:	e3530002 	cmp	r3, #2
   3ae08:	1afffb66 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ae0c:	e1a01006 	mov	r1, r6
   3ae10:	e51f01c4 	ldr	r0, [pc, #-452]	; 3ac54 <TermAnsi::handleAnsiChar(unsigned char)+0x10e4>
   3ae14:	ebffbd0e 	bl	2a254 <strchr>
   3ae18:	e3500000 	cmp	r0, #0
   3ae1c:	1afffb70 	bne	39be4 <TermAnsi::handleAnsiChar(unsigned char)+0x74>
   3ae20:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ae24:	e3530002 	cmp	r3, #2
   3ae28:	1afffb5e 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ae2c:	e1a01006 	mov	r1, r6
   3ae30:	e51f01e0 	ldr	r0, [pc, #-480]	; 3ac58 <TermAnsi::handleAnsiChar(unsigned char)+0x10e8>
   3ae34:	ebffbd06 	bl	2a254 <strchr>
   3ae38:	e3500000 	cmp	r0, #0
   3ae3c:	1afffb68 	bne	39be4 <TermAnsi::handleAnsiChar(unsigned char)+0x74>
   3ae40:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ae44:	e3530002 	cmp	r3, #2
   3ae48:	1afffb56 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ae4c:	e1a01006 	mov	r1, r6
   3ae50:	e51f01fc 	ldr	r0, [pc, #-508]	; 3ac5c <TermAnsi::handleAnsiChar(unsigned char)+0x10ec>
   3ae54:	ebffbcfe 	bl	2a254 <strchr>
   3ae58:	e3500000 	cmp	r0, #0
   3ae5c:	1afffc55 	bne	39fb8 <TermAnsi::handleAnsiChar(unsigned char)+0x448>
   3ae60:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ae64:	e3530002 	cmp	r3, #2
   3ae68:	1afffb4e 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ae6c:	e1a01006 	mov	r1, r6
   3ae70:	e51f0218 	ldr	r0, [pc, #-536]	; 3ac60 <TermAnsi::handleAnsiChar(unsigned char)+0x10f0>
   3ae74:	ebffbcf6 	bl	2a254 <strchr>
   3ae78:	e3500000 	cmp	r0, #0
   3ae7c:	1afffc75 	bne	3a058 <TermAnsi::handleAnsiChar(unsigned char)+0x4e8>
   3ae80:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ae84:	e3530002 	cmp	r3, #2
   3ae88:	1afffb46 	bne	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ae8c:	e1a01006 	mov	r1, r6
   3ae90:	e51f0234 	ldr	r0, [pc, #-564]	; 3ac64 <TermAnsi::handleAnsiChar(unsigned char)+0x10f4>
   3ae94:	ebffbcee 	bl	2a254 <strchr>
   3ae98:	e3500000 	cmp	r0, #0
   3ae9c:	0afffb41 	beq	39ba8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3aea0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3aea4:	e3530007 	cmp	r3, #7
   3aea8:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3aeac:	92831001 	addls	r1, r3, #1
   3aeb0:	9283300c 	addls	r3, r3, #12
   3aeb4:	95841050 	strls	r1, [r4, #80]	; 0x50
   3aeb8:	97842103 	strls	r2, [r4, r3, lsl #2]
   3aebc:	e3a02000 	mov	r2, #0
   3aec0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3aec4:	e5842054 	str	r2, [r4, #84]	; 0x54
   3aec8:	e1530002 	cmp	r3, r2
   3aecc:	1afffc4e 	bne	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3aed0:	e1a00004 	mov	r0, r4
   3aed4:	ebfffa72 	bl	398a4 <TermAnsi::ich()>
   3aed8:	eafffc4b 	b	3a00c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3aedc:	e594000c 	ldr	r0, [r4, #12]
   3aee0:	e3500000 	cmp	r0, #0
   3aee4:	0afffdfd 	beq	3a6e0 <TermAnsi::handleAnsiChar(unsigned char)+0xb70>
   3aee8:	e1a03004 	mov	r3, r4
   3aeec:	e3a0c020 	mov	ip, #32
   3aef0:	e3a0100f 	mov	r1, #15
   3aef4:	e0840100 	add	r0, r4, r0, lsl #2
   3aef8:	e5c3c05c 	strb	ip, [r3, #92]	; 0x5c
   3aefc:	e5c3105d 	strb	r1, [r3, #93]	; 0x5d
   3af00:	e5c3205e 	strb	r2, [r3, #94]	; 0x5e
   3af04:	e5c3205f 	strb	r2, [r3, #95]	; 0x5f
   3af08:	e2833004 	add	r3, r3, #4
   3af0c:	e1500003 	cmp	r0, r3
   3af10:	1afffff8 	bne	3aef8 <TermAnsi::handleAnsiChar(unsigned char)+0x1388>
   3af14:	eaffff90 	b	3ad5c <TermAnsi::handleAnsiChar(unsigned char)+0x11ec>

0003af18 <TermAnsi::putChar(unsigned long)>:
   3af18:	e92d4070 	push	{r4, r5, r6, lr}
   3af1c:	e1a04001 	mov	r4, r1
   3af20:	e6ef1071 	uxtb	r1, r1
   3af24:	e1a05000 	mov	r5, r0
   3af28:	ebfffb10 	bl	39b70 <TermAnsi::handleAnsiChar(unsigned char)>
   3af2c:	e3500000 	cmp	r0, #0
   3af30:	18bd8070 	popne	{r4, r5, r6, pc}
   3af34:	e1a01004 	mov	r1, r4
   3af38:	e1a00005 	mov	r0, r5
   3af3c:	ebfff988 	bl	39564 <TermAnsi::writeCharAtCurs(int)>
   3af40:	e3a03001 	mov	r3, #1
   3af44:	e5c5301c 	strb	r3, [r5, #28]
   3af48:	e8bd8070 	pop	{r4, r5, r6, pc}

0003af4c <TermAnsi::dsr()>:
   3af4c:	e12fff1e 	bx	lr

0003af50 <TermAnsi::init(unsigned long, unsigned long)>:
   3af50:	e92d4010 	push	{r4, lr}
   3af54:	e1a04000 	mov	r4, r0
   3af58:	eb000048 	bl	3b080 <TermEmu::init(unsigned long, unsigned long)>
   3af5c:	e5943000 	ldr	r3, [r4]
   3af60:	e1a00004 	mov	r0, r4
   3af64:	e8bd4010 	pop	{r4, lr}
   3af68:	e5933010 	ldr	r3, [r3, #16]
   3af6c:	e12fff13 	bx	r3

0003af70 <TermAnsi::reset()>:
   3af70:	e92d4010 	push	{r4, lr}
   3af74:	e1a04000 	mov	r4, r0
   3af78:	eb000026 	bl	3b018 <TermEmu::reset()>
   3af7c:	e3a00000 	mov	r0, #0
   3af80:	e3a01001 	mov	r1, #1
   3af84:	e2843e82 	add	r3, r4, #2080	; 0x820
   3af88:	e2842d22 	add	r2, r4, #2176	; 0x880
   3af8c:	e283300b 	add	r3, r3, #11
   3af90:	e282200f 	add	r2, r2, #15
   3af94:	e5c4001d 	strb	r0, [r4, #29]
   3af98:	e5840050 	str	r0, [r4, #80]	; 0x50
   3af9c:	e5840054 	str	r0, [r4, #84]	; 0x54
   3afa0:	e5c40058 	strb	r0, [r4, #88]	; 0x58
   3afa4:	e5e31001 	strb	r1, [r3, #1]!
   3afa8:	e1530002 	cmp	r3, r2
   3afac:	1afffffc 	bne	3afa4 <TermAnsi::reset()+0x34>
   3afb0:	e3a03ef2 	mov	r3, #3872	; 0xf20
   3afb4:	e3a02020 	mov	r2, #32
   3afb8:	e5843890 	str	r3, [r4, #2192]	; 0x890
   3afbc:	e3a01000 	mov	r1, #0
   3afc0:	e2840030 	add	r0, r4, #48	; 0x30
   3afc4:	ebffbb86 	bl	29de4 <memset>
   3afc8:	e3a03000 	mov	r3, #0
   3afcc:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3afd0:	e5843050 	str	r3, [r4, #80]	; 0x50
   3afd4:	e5843054 	str	r3, [r4, #84]	; 0x54
   3afd8:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   3afdc:	e8bd8010 	pop	{r4, pc}

0003afe0 <TermEmu::sendData(int)>:
   3afe0:	e92d4010 	push	{r4, lr}
   3afe4:	e1a04001 	mov	r4, r1
   3afe8:	e24dd008 	sub	sp, sp, #8
   3afec:	ebffae8c 	bl	26a24 <CLogger::Get()>
   3aff0:	e3a02004 	mov	r2, #4
   3aff4:	e59f3010 	ldr	r3, [pc, #16]	; 3b00c <TermEmu::sendData(int)+0x2c>
   3aff8:	e59f1010 	ldr	r1, [pc, #16]	; 3b010 <TermEmu::sendData(int)+0x30>
   3affc:	e58d4000 	str	r4, [sp]
   3b000:	ebffadc9 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3b004:	e28dd008 	add	sp, sp, #8
   3b008:	e8bd8010 	pop	{r4, pc}
   3b00c:	000471b8 	.word	0x000471b8
   3b010:	000471c8 	.word	0x000471c8

0003b014 <TermEmu::putChar(unsigned long)>:
   3b014:	e12fff1e 	bx	lr

0003b018 <TermEmu::reset()>:
   3b018:	e12fff1e 	bx	lr

0003b01c <TermEmu::~TermEmu()>:
   3b01c:	e92d4010 	push	{r4, lr}
   3b020:	e1a04000 	mov	r4, r0
   3b024:	e5900004 	ldr	r0, [r0, #4]
   3b028:	e59f3014 	ldr	r3, [pc, #20]	; 3b044 <TermEmu::~TermEmu()+0x28>
   3b02c:	e3500000 	cmp	r0, #0
   3b030:	e5843000 	str	r3, [r4]
   3b034:	0a000000 	beq	3b03c <TermEmu::~TermEmu()+0x20>
   3b038:	ebffbfa5 	bl	2aed4 <operator delete[](void*)>
   3b03c:	e1a00004 	mov	r0, r4
   3b040:	e8bd8010 	pop	{r4, pc}
   3b044:	0004725c 	.word	0x0004725c

0003b048 <TermEmu::~TermEmu()>:
   3b048:	e92d4010 	push	{r4, lr}
   3b04c:	e1a04000 	mov	r4, r0
   3b050:	e5900004 	ldr	r0, [r0, #4]
   3b054:	e59f3020 	ldr	r3, [pc, #32]	; 3b07c <TermEmu::~TermEmu()+0x34>
   3b058:	e3500000 	cmp	r0, #0
   3b05c:	e5843000 	str	r3, [r4]
   3b060:	0a000000 	beq	3b068 <TermEmu::~TermEmu()+0x20>
   3b064:	ebffbf9a 	bl	2aed4 <operator delete[](void*)>
   3b068:	e1a00004 	mov	r0, r4
   3b06c:	e3a0102c 	mov	r1, #44	; 0x2c
   3b070:	ebffbf98 	bl	2aed8 <operator delete(void*, unsigned int)>
   3b074:	e1a00004 	mov	r0, r4
   3b078:	e8bd8010 	pop	{r4, pc}
   3b07c:	0004725c 	.word	0x0004725c

0003b080 <TermEmu::init(unsigned long, unsigned long)>:
   3b080:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3b084:	e1a04000 	mov	r4, r0
   3b088:	e5900004 	ldr	r0, [r0, #4]
   3b08c:	e1a08001 	mov	r8, r1
   3b090:	e3500000 	cmp	r0, #0
   3b094:	e1a07002 	mov	r7, r2
   3b098:	0a000000 	beq	3b0a0 <TermEmu::init(unsigned long, unsigned long)+0x20>
   3b09c:	ebffbf8c 	bl	2aed4 <operator delete[](void*)>
   3b0a0:	e0090897 	mul	r9, r7, r8
   3b0a4:	e379022e 	cmn	r9, #-536870910	; 0xe0000002
   3b0a8:	83e00000 	mvnhi	r0, #0
   3b0ac:	91a00109 	lslls	r0, r9, #2
   3b0b0:	ebffbf80 	bl	2aeb8 <operator new[](unsigned int)>
   3b0b4:	e259c001 	subs	ip, r9, #1
   3b0b8:	4a00000b 	bmi	3b0ec <TermEmu::init(unsigned long, unsigned long)+0x6c>
   3b0bc:	e1a03000 	mov	r3, r0
   3b0c0:	e3a06020 	mov	r6, #32
   3b0c4:	e3a0500f 	mov	r5, #15
   3b0c8:	e3a0e000 	mov	lr, #0
   3b0cc:	e24cc001 	sub	ip, ip, #1
   3b0d0:	e37c0001 	cmn	ip, #1
   3b0d4:	e5c36000 	strb	r6, [r3]
   3b0d8:	e5c35001 	strb	r5, [r3, #1]
   3b0dc:	e5c3e002 	strb	lr, [r3, #2]
   3b0e0:	e5c3e003 	strb	lr, [r3, #3]
   3b0e4:	e2833004 	add	r3, r3, #4
   3b0e8:	1afffff7 	bne	3b0cc <TermEmu::init(unsigned long, unsigned long)+0x4c>
   3b0ec:	e3a03000 	mov	r3, #0
   3b0f0:	e3a0105f 	mov	r1, #95	; 0x5f
   3b0f4:	e3a02020 	mov	r2, #32
   3b0f8:	e9840201 	stmib	r4, {r0, r9}
   3b0fc:	e584800c 	str	r8, [r4, #12]
   3b100:	e5847010 	str	r7, [r4, #16]
   3b104:	e5843014 	str	r3, [r4, #20]
   3b108:	e5843018 	str	r3, [r4, #24]
   3b10c:	e1c431bc 	strh	r3, [r4, #28]
   3b110:	e5c4301e 	strb	r3, [r4, #30]
   3b114:	e5841020 	str	r1, [r4, #32]
   3b118:	e5842024 	str	r2, [r4, #36]	; 0x24
   3b11c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003b120 <TermEmu::TermEmu()>:
   3b120:	e3a02000 	mov	r2, #0
   3b124:	e92d4070 	push	{r4, r5, r6, lr}
   3b128:	e3a0c050 	mov	ip, #80	; 0x50
   3b12c:	e3a0605f 	mov	r6, #95	; 0x5f
   3b130:	e3a04020 	mov	r4, #32
   3b134:	e3a0eef2 	mov	lr, #3872	; 0xf20
   3b138:	e3a01019 	mov	r1, #25
   3b13c:	e59f5030 	ldr	r5, [pc, #48]	; 3b174 <TermEmu::TermEmu()+0x54>
   3b140:	e5806020 	str	r6, [r0, #32]
   3b144:	e5805000 	str	r5, [r0]
   3b148:	e5804024 	str	r4, [r0, #36]	; 0x24
   3b14c:	e580e028 	str	lr, [r0, #40]	; 0x28
   3b150:	e580c00c 	str	ip, [r0, #12]
   3b154:	e5801010 	str	r1, [r0, #16]
   3b158:	e5802004 	str	r2, [r0, #4]
   3b15c:	e5802008 	str	r2, [r0, #8]
   3b160:	e5802014 	str	r2, [r0, #20]
   3b164:	e5802018 	str	r2, [r0, #24]
   3b168:	e1c021bc 	strh	r2, [r0, #28]
   3b16c:	e5c0201e 	strb	r2, [r0, #30]
   3b170:	e8bd8070 	pop	{r4, r5, r6, pc}
   3b174:	0004725c 	.word	0x0004725c

0003b178 <McTRS80CmdFormat::McTRS80CmdFormat()>:
   3b178:	e12fff1e 	bx	lr

0003b17c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>:
   3b17c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b180:	e24dd05c 	sub	sp, sp, #92	; 0x5c
   3b184:	e59d5084 	ldr	r5, [sp, #132]	; 0x84
   3b188:	e59d7080 	ldr	r7, [sp, #128]	; 0x80
   3b18c:	e2458002 	sub	r8, r5, #2
   3b190:	e3580000 	cmp	r8, #0
   3b194:	e58d1008 	str	r1, [sp, #8]
   3b198:	e58d200c 	str	r2, [sp, #12]
   3b19c:	da00002a 	ble	3b24c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xd0>
   3b1a0:	e1a09003 	mov	r9, r3
   3b1a4:	e3a0c000 	mov	ip, #0
   3b1a8:	e59fb28c 	ldr	fp, [pc, #652]	; 3b43c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2c0>
   3b1ac:	e2455001 	sub	r5, r5, #1
   3b1b0:	e1a03007 	mov	r3, r7
   3b1b4:	e7f3a00c 	ldrb	sl, [r3, ip]!
   3b1b8:	e28c6002 	add	r6, ip, #2
   3b1bc:	e5d34001 	ldrb	r4, [r3, #1]
   3b1c0:	e24a2001 	sub	r2, sl, #1
   3b1c4:	e1540005 	cmp	r4, r5
   3b1c8:	a1a04005 	movge	r4, r5
   3b1cc:	e3540000 	cmp	r4, #0
   3b1d0:	0a00001f 	beq	3b254 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xd8>
   3b1d4:	e3520004 	cmp	r2, #4
   3b1d8:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   3b1dc:	ea00008f 	b	3b420 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   3b1e0:	0003b318 	.word	0x0003b318
   3b1e4:	0003b290 	.word	0x0003b290
   3b1e8:	0003b238 	.word	0x0003b238
   3b1ec:	0003b220 	.word	0x0003b220
   3b1f0:	0003b1f8 	.word	0x0003b1f8
   3b1f4:	e3a04c01 	mov	r4, #256	; 0x100
   3b1f8:	ebffae09 	bl	26a24 <CLogger::Get()>
   3b1fc:	e1a0300b 	mov	r3, fp
   3b200:	e3a02004 	mov	r2, #4
   3b204:	e59f1234 	ldr	r1, [pc, #564]	; 3b440 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2c4>
   3b208:	ebffad47 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3b20c:	e086c004 	add	ip, r6, r4
   3b210:	e158000c 	cmp	r8, ip
   3b214:	caffffe5 	bgt	3b1b0 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x34>
   3b218:	ea00000b 	b	3b24c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xd0>
   3b21c:	e3a04c01 	mov	r4, #256	; 0x100
   3b220:	ebffadff 	bl	26a24 <CLogger::Get()>
   3b224:	e3a02004 	mov	r2, #4
   3b228:	e59f3214 	ldr	r3, [pc, #532]	; 3b444 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2c8>
   3b22c:	e59f120c 	ldr	r1, [pc, #524]	; 3b440 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2c4>
   3b230:	ebffad3d 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3b234:	eafffff4 	b	3b20c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   3b238:	ebffadf9 	bl	26a24 <CLogger::Get()>
   3b23c:	e3a02004 	mov	r2, #4
   3b240:	e59f3200 	ldr	r3, [pc, #512]	; 3b448 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2cc>
   3b244:	e59f11f4 	ldr	r1, [pc, #500]	; 3b440 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2c4>
   3b248:	ebffad37 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3b24c:	e28dd05c 	add	sp, sp, #92	; 0x5c
   3b250:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b254:	e3520004 	cmp	r2, #4
   3b258:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   3b25c:	ea00006e 	b	3b41c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a0>
   3b260:	0003b36c 	.word	0x0003b36c
   3b264:	0003b274 	.word	0x0003b274
   3b268:	0003b238 	.word	0x0003b238
   3b26c:	0003b21c 	.word	0x0003b21c
   3b270:	0003b1f4 	.word	0x0003b1f4
   3b274:	e3a04c01 	mov	r4, #256	; 0x100
   3b278:	ebffade9 	bl	26a24 <CLogger::Get()>
   3b27c:	e3a02004 	mov	r2, #4
   3b280:	e59f31c4 	ldr	r3, [pc, #452]	; 3b44c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2d0>
   3b284:	e59f11b4 	ldr	r1, [pc, #436]	; 3b440 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2c4>
   3b288:	ebffad27 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3b28c:	eaffffde 	b	3b20c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   3b290:	e3540001 	cmp	r4, #1
   3b294:	1a00003b 	bne	3b388 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x20c>
   3b298:	e3a03000 	mov	r3, #0
   3b29c:	e7d72006 	ldrb	r2, [r7, r6]
   3b2a0:	e1a01009 	mov	r1, r9
   3b2a4:	e28d0010 	add	r0, sp, #16
   3b2a8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   3b2ac:	e58d3028 	str	r3, [sp, #40]	; 0x28
   3b2b0:	e58d3024 	str	r3, [sp, #36]	; 0x24
   3b2b4:	e58d3020 	str	r3, [sp, #32]
   3b2b8:	e58d301c 	str	r3, [sp, #28]
   3b2bc:	e58d3018 	str	r3, [sp, #24]
   3b2c0:	e58d3014 	str	r3, [sp, #20]
   3b2c4:	e58d3040 	str	r3, [sp, #64]	; 0x40
   3b2c8:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   3b2cc:	e58d3038 	str	r3, [sp, #56]	; 0x38
   3b2d0:	e58d3034 	str	r3, [sp, #52]	; 0x34
   3b2d4:	e58d3030 	str	r3, [sp, #48]	; 0x30
   3b2d8:	e58d3054 	str	r3, [sp, #84]	; 0x54
   3b2dc:	e58d3050 	str	r3, [sp, #80]	; 0x50
   3b2e0:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   3b2e4:	e58d3048 	str	r3, [sp, #72]	; 0x48
   3b2e8:	e58d3044 	str	r3, [sp, #68]	; 0x44
   3b2ec:	e59d300c 	ldr	r3, [sp, #12]
   3b2f0:	e58d2010 	str	r2, [sp, #16]
   3b2f4:	e12fff33 	blx	r3
   3b2f8:	ebffadc9 	bl	26a24 <CLogger::Get()>
   3b2fc:	e59d2010 	ldr	r2, [sp, #16]
   3b300:	e59f3148 	ldr	r3, [pc, #328]	; 3b450 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2d4>
   3b304:	e58d2000 	str	r2, [sp]
   3b308:	e59f1130 	ldr	r1, [pc, #304]	; 3b440 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2c4>
   3b30c:	e3a02004 	mov	r2, #4
   3b310:	ebffad05 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3b314:	eaffffbc 	b	3b20c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   3b318:	e3540002 	cmp	r4, #2
   3b31c:	d28440fe 	addle	r4, r4, #254	; 0xfe
   3b320:	c2444002 	subgt	r4, r4, #2
   3b324:	e1a02004 	mov	r2, r4
   3b328:	e7d7a006 	ldrb	sl, [r7, r6]
   3b32c:	e5d33003 	ldrb	r3, [r3, #3]
   3b330:	e28c6004 	add	r6, ip, #4
   3b334:	e08aa403 	add	sl, sl, r3, lsl #8
   3b338:	e1a03009 	mov	r3, r9
   3b33c:	e0871006 	add	r1, r7, r6
   3b340:	e1a0000a 	mov	r0, sl
   3b344:	e59dc008 	ldr	ip, [sp, #8]
   3b348:	e12fff3c 	blx	ip
   3b34c:	ebffadb4 	bl	26a24 <CLogger::Get()>
   3b350:	e3a02004 	mov	r2, #4
   3b354:	e59f30f8 	ldr	r3, [pc, #248]	; 3b454 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2d8>
   3b358:	e59f10e0 	ldr	r1, [pc, #224]	; 3b440 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2c4>
   3b35c:	e58d4004 	str	r4, [sp, #4]
   3b360:	e58da000 	str	sl, [sp]
   3b364:	ebffacf0 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3b368:	eaffffa7 	b	3b20c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   3b36c:	e3a020fe 	mov	r2, #254	; 0xfe
   3b370:	e7d7a006 	ldrb	sl, [r7, r6]
   3b374:	e5d33003 	ldrb	r3, [r3, #3]
   3b378:	e1a04002 	mov	r4, r2
   3b37c:	e28c6004 	add	r6, ip, #4
   3b380:	e08aa403 	add	sl, sl, r3, lsl #8
   3b384:	eaffffeb 	b	3b338 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1bc>
   3b388:	e3540002 	cmp	r4, #2
   3b38c:	1affffb9 	bne	3b278 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xfc>
   3b390:	e3a02000 	mov	r2, #0
   3b394:	e5d30003 	ldrb	r0, [r3, #3]
   3b398:	e7d73006 	ldrb	r3, [r7, r6]
   3b39c:	e1a01009 	mov	r1, r9
   3b3a0:	e0833400 	add	r3, r3, r0, lsl #8
   3b3a4:	e58d3010 	str	r3, [sp, #16]
   3b3a8:	e28d0010 	add	r0, sp, #16
   3b3ac:	e59d300c 	ldr	r3, [sp, #12]
   3b3b0:	e58d202c 	str	r2, [sp, #44]	; 0x2c
   3b3b4:	e58d2028 	str	r2, [sp, #40]	; 0x28
   3b3b8:	e58d2024 	str	r2, [sp, #36]	; 0x24
   3b3bc:	e58d2020 	str	r2, [sp, #32]
   3b3c0:	e58d201c 	str	r2, [sp, #28]
   3b3c4:	e58d2018 	str	r2, [sp, #24]
   3b3c8:	e58d2014 	str	r2, [sp, #20]
   3b3cc:	e58d2040 	str	r2, [sp, #64]	; 0x40
   3b3d0:	e58d203c 	str	r2, [sp, #60]	; 0x3c
   3b3d4:	e58d2038 	str	r2, [sp, #56]	; 0x38
   3b3d8:	e58d2034 	str	r2, [sp, #52]	; 0x34
   3b3dc:	e58d2030 	str	r2, [sp, #48]	; 0x30
   3b3e0:	e58d2054 	str	r2, [sp, #84]	; 0x54
   3b3e4:	e58d2050 	str	r2, [sp, #80]	; 0x50
   3b3e8:	e58d204c 	str	r2, [sp, #76]	; 0x4c
   3b3ec:	e58d2048 	str	r2, [sp, #72]	; 0x48
   3b3f0:	e58d2044 	str	r2, [sp, #68]	; 0x44
   3b3f4:	e28c6004 	add	r6, ip, #4
   3b3f8:	e12fff33 	blx	r3
   3b3fc:	ebffad88 	bl	26a24 <CLogger::Get()>
   3b400:	e59d2010 	ldr	r2, [sp, #16]
   3b404:	e59f304c 	ldr	r3, [pc, #76]	; 3b458 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2dc>
   3b408:	e58d2000 	str	r2, [sp]
   3b40c:	e59f102c 	ldr	r1, [pc, #44]	; 3b440 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2c4>
   3b410:	e3a02004 	mov	r2, #4
   3b414:	ebffacc4 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3b418:	eaffff7b 	b	3b20c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   3b41c:	e3a04c01 	mov	r4, #256	; 0x100
   3b420:	ebffad7f 	bl	26a24 <CLogger::Get()>
   3b424:	e3a02004 	mov	r2, #4
   3b428:	e59f302c 	ldr	r3, [pc, #44]	; 3b45c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2e0>
   3b42c:	e59f100c 	ldr	r1, [pc, #12]	; 3b440 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2c4>
   3b430:	e58da000 	str	sl, [sp]
   3b434:	ebffacbc 	bl	2672c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3b438:	eaffff73 	b	3b20c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   3b43c:	00047300 	.word	0x00047300
   3b440:	00047298 	.word	0x00047298
   3b444:	000472e8 	.word	0x000472e8
   3b448:	000472d8 	.word	0x000472d8
   3b44c:	000472c4 	.word	0x000472c4
   3b450:	000472a4 	.word	0x000472a4
   3b454:	00047278 	.word	0x00047278
   3b458:	000472b4 	.word	0x000472b4
   3b45c:	00047308 	.word	0x00047308

0003b460 <Display::~Display()>:
   3b460:	e92d4010 	push	{r4, lr}
   3b464:	e1a04000 	mov	r4, r0
   3b468:	e59f301c 	ldr	r3, [pc, #28]	; 3b48c <Display::~Display()+0x2c>
   3b46c:	e4803004 	str	r3, [r0], #4
   3b470:	eb0002c2 	bl	3bf80 <DisplayFX::~DisplayFX()>
   3b474:	e59f3014 	ldr	r3, [pc, #20]	; 3b490 <Display::~Display()+0x30>
   3b478:	e1a00004 	mov	r0, r4
   3b47c:	e5843000 	str	r3, [r4]
   3b480:	ebffa658 	bl	24de8 <CDevice::~CDevice()>
   3b484:	e1a00004 	mov	r0, r4
   3b488:	e8bd8010 	pop	{r4, pc}
   3b48c:	0004736c 	.word	0x0004736c
   3b490:	00047330 	.word	0x00047330

0003b494 <Display::~Display()>:
   3b494:	e92d4010 	push	{r4, lr}
   3b498:	e1a04000 	mov	r4, r0
   3b49c:	e59f3028 	ldr	r3, [pc, #40]	; 3b4cc <Display::~Display()+0x38>
   3b4a0:	e4803004 	str	r3, [r0], #4
   3b4a4:	eb0002b5 	bl	3bf80 <DisplayFX::~DisplayFX()>
   3b4a8:	e59f3020 	ldr	r3, [pc, #32]	; 3b4d0 <Display::~Display()+0x3c>
   3b4ac:	e1a00004 	mov	r0, r4
   3b4b0:	e5843000 	str	r3, [r4]
   3b4b4:	ebffa64b 	bl	24de8 <CDevice::~CDevice()>
   3b4b8:	e1a00004 	mov	r0, r4
   3b4bc:	e3a01efa 	mov	r1, #4000	; 0xfa0
   3b4c0:	ebffbe84 	bl	2aed8 <operator delete(void*, unsigned int)>
   3b4c4:	e1a00004 	mov	r0, r4
   3b4c8:	e8bd8010 	pop	{r4, pc}
   3b4cc:	0004736c 	.word	0x0004736c
   3b4d0:	00047330 	.word	0x00047330

0003b4d4 <Display::foreground(DISPLAY_FX_COLOUR)>:
   3b4d4:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3b4d8:	e3530000 	cmp	r3, #0
   3b4dc:	012fff1e 	bxeq	lr
   3b4e0:	e1a02001 	mov	r2, r1
   3b4e4:	e2800004 	add	r0, r0, #4
   3b4e8:	e3a01000 	mov	r1, #0
   3b4ec:	ea0003d5 	b	3c448 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>

0003b4f0 <Display::background(DISPLAY_FX_COLOUR)>:
   3b4f0:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3b4f4:	e3530000 	cmp	r3, #0
   3b4f8:	012fff1e 	bxeq	lr
   3b4fc:	e1a02001 	mov	r2, r1
   3b500:	e2800004 	add	r0, r0, #4
   3b504:	e3a01000 	mov	r1, #0
   3b508:	ea0003d4 	b	3c460 <DisplayFX::windowBackground(int, DISPLAY_FX_COLOUR)>

0003b50c <Display::write(int, int, char const*)>:
   3b50c:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3b510:	e35c0000 	cmp	ip, #0
   3b514:	012fff1e 	bxeq	lr
   3b518:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3b51c:	e24dd00c 	sub	sp, sp, #12
   3b520:	e58d3000 	str	r3, [sp]
   3b524:	e2800004 	add	r0, r0, #4
   3b528:	e1a03002 	mov	r3, r2
   3b52c:	e1a02001 	mov	r2, r1
   3b530:	e3a01000 	mov	r1, #0
   3b534:	eb00039f 	bl	3c3b8 <DisplayFX::windowPut(int, int, int, char const*)>
   3b538:	e28dd00c 	add	sp, sp, #12
   3b53c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003b540 <Display::write(int, int, int)>:
   3b540:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3b544:	e35c0000 	cmp	ip, #0
   3b548:	012fff1e 	bxeq	lr
   3b54c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3b550:	e24dd00c 	sub	sp, sp, #12
   3b554:	e58d3000 	str	r3, [sp]
   3b558:	e2800004 	add	r0, r0, #4
   3b55c:	e1a03002 	mov	r3, r2
   3b560:	e1a02001 	mov	r2, r1
   3b564:	e3a01000 	mov	r1, #0
   3b568:	eb000317 	bl	3c1cc <DisplayFX::windowPut(int, int, int, int)>
   3b56c:	e28dd00c 	add	sp, sp, #12
   3b570:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003b574 <Display::setPixel(int, int, int, DISPLAY_FX_COLOUR)>:
   3b574:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3b578:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3b57c:	e24dd00c 	sub	sp, sp, #12
   3b580:	e35c0000 	cmp	ip, #0
   3b584:	e1ddc1d0 	ldrsb	ip, [sp, #16]
   3b588:	0a000005 	beq	3b5a4 <Display::setPixel(int, int, int, DISPLAY_FX_COLOUR)+0x30>
   3b58c:	e88d1008 	stm	sp, {r3, ip}
   3b590:	e2800004 	add	r0, r0, #4
   3b594:	e1a03002 	mov	r3, r2
   3b598:	e1a02001 	mov	r2, r1
   3b59c:	e3a01000 	mov	r1, #0
   3b5a0:	eb0003b4 	bl	3c478 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>
   3b5a4:	e28dd00c 	add	sp, sp, #12
   3b5a8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003b5ac <Display::getFrameBufferInfo(FrameBufferInfo&)>:
   3b5ac:	e1a02001 	mov	r2, r1
   3b5b0:	e2800004 	add	r0, r0, #4
   3b5b4:	e3a01000 	mov	r1, #0
   3b5b8:	ea0003fe 	b	3c5b8 <DisplayFX::getFramebuffer(int, FrameBufferInfo&)>

0003b5bc <Display::Write(void const*, unsigned int)>:
   3b5bc:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3b5c0:	e92d4010 	push	{r4, lr}
   3b5c4:	e3530000 	cmp	r3, #0
   3b5c8:	e1a04002 	mov	r4, r2
   3b5cc:	0a000001 	beq	3b5d8 <Display::Write(void const*, unsigned int)+0x1c>
   3b5d0:	e2800004 	add	r0, r0, #4
   3b5d4:	eb00050f 	bl	3ca18 <DisplayFX::consolePut(char const*, unsigned int)>
   3b5d8:	e1a00004 	mov	r0, r4
   3b5dc:	e8bd8010 	pop	{r4, pc}

0003b5e0 <Display::targetLayout(int, int, int, int, int, int, WgfxFont*, int, int)>:
   3b5e0:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3b5e4:	e35c0000 	cmp	ip, #0
   3b5e8:	012fff1e 	bxeq	lr
   3b5ec:	e92d4070 	push	{r4, r5, r6, lr}
   3b5f0:	e1a04002 	mov	r4, r2
   3b5f4:	e1a05003 	mov	r5, r3
   3b5f8:	e3a02000 	mov	r2, #0
   3b5fc:	e3a03fe1 	mov	r3, #900	; 0x384
   3b600:	e24dd038 	sub	sp, sp, #56	; 0x38
   3b604:	e1a06001 	mov	r6, r1
   3b608:	e2800004 	add	r0, r0, #4
   3b60c:	e1a01002 	mov	r1, r2
   3b610:	e58d3000 	str	r3, [sp]
   3b614:	e3a03e41 	mov	r3, #1040	; 0x410
   3b618:	e58d0034 	str	r0, [sp, #52]	; 0x34
   3b61c:	eb0002d1 	bl	3c168 <DisplayFX::screenRectClear(int, int, int, int)>
   3b620:	e3a03000 	mov	r3, #0
   3b624:	e3a02008 	mov	r2, #8
   3b628:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
   3b62c:	e58d2028 	str	r2, [sp, #40]	; 0x28
   3b630:	e58d1020 	str	r1, [sp, #32]
   3b634:	e59d1058 	ldr	r1, [sp, #88]	; 0x58
   3b638:	e58d2024 	str	r2, [sp, #36]	; 0x24
   3b63c:	e58d101c 	str	r1, [sp, #28]
   3b640:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   3b644:	e1a02003 	mov	r2, r3
   3b648:	e58d1018 	str	r1, [sp, #24]
   3b64c:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
   3b650:	e1cd40f4 	strd	r4, [sp, #4]
   3b654:	e58d1014 	str	r1, [sp, #20]
   3b658:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   3b65c:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
   3b660:	e58d1010 	str	r1, [sp, #16]
   3b664:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
   3b668:	e58d6000 	str	r6, [sp]
   3b66c:	e58d100c 	str	r1, [sp, #12]
   3b670:	e1a01003 	mov	r1, r3
   3b674:	eb0003e7 	bl	3c618 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3b678:	e28dd038 	add	sp, sp, #56	; 0x38
   3b67c:	e8bd8070 	pop	{r4, r5, r6, pc}

0003b680 <Display::Display()>:
   3b680:	e92d4010 	push	{r4, lr}
   3b684:	e1a04000 	mov	r4, r0
   3b688:	ebffa5e4 	bl	24e20 <CDevice::CDevice()>
   3b68c:	e1a00004 	mov	r0, r4
   3b690:	e59f3014 	ldr	r3, [pc, #20]	; 3b6ac <Display::Display()+0x2c>
   3b694:	e4803004 	str	r3, [r0], #4
   3b698:	eb000214 	bl	3bef0 <DisplayFX::DisplayFX()>
   3b69c:	e3a03000 	mov	r3, #0
   3b6a0:	e1a00004 	mov	r0, r4
   3b6a4:	e5c43b50 	strb	r3, [r4, #2896]	; 0xb50
   3b6a8:	e8bd8010 	pop	{r4, pc}
   3b6ac:	0004736c 	.word	0x0004736c

0003b6b0 <Display::init()>:
   3b6b0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3b6b4:	e2809004 	add	r9, r0, #4
   3b6b8:	e24dd034 	sub	sp, sp, #52	; 0x34
   3b6bc:	e1a07000 	mov	r7, r0
   3b6c0:	e3a02fe1 	mov	r2, #900	; 0x384
   3b6c4:	e3a01d19 	mov	r1, #1600	; 0x640
   3b6c8:	e1a00009 	mov	r0, r9
   3b6cc:	eb000237 	bl	3bfb0 <DisplayFX::init(int, int)>
   3b6d0:	e3e05000 	mvn	r5, #0
   3b6d4:	e3a04000 	mov	r4, #0
   3b6d8:	e3a06001 	mov	r6, #1
   3b6dc:	e3a08008 	mov	r8, #8
   3b6e0:	e3a0cb01 	mov	ip, #1024	; 0x400
   3b6e4:	e3a0efdd 	mov	lr, #884	; 0x374
   3b6e8:	e1a00009 	mov	r0, r9
   3b6ec:	e88d5000 	stm	sp, {ip, lr}
   3b6f0:	e1a03004 	mov	r3, r4
   3b6f4:	e1a02004 	mov	r2, r4
   3b6f8:	e1a01004 	mov	r1, r4
   3b6fc:	e1cd41f8 	strd	r4, [sp, #24]
   3b700:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3b704:	e58d8024 	str	r8, [sp, #36]	; 0x24
   3b708:	e58d800c 	str	r8, [sp, #12]
   3b70c:	e58d8008 	str	r8, [sp, #8]
   3b710:	e58d5020 	str	r5, [sp, #32]
   3b714:	e58d6014 	str	r6, [sp, #20]
   3b718:	e58d6010 	str	r6, [sp, #16]
   3b71c:	eb0003bd 	bl	3c618 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3b720:	e1a00009 	mov	r0, r9
   3b724:	e1a03004 	mov	r3, r4
   3b728:	e1a01006 	mov	r1, r6
   3b72c:	e59f20a8 	ldr	r2, [pc, #168]	; 3b7dc <Display::init()+0x12c>
   3b730:	e1cd41f8 	strd	r4, [sp, #24]
   3b734:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3b738:	e58d4024 	str	r4, [sp, #36]	; 0x24
   3b73c:	e58d5020 	str	r5, [sp, #32]
   3b740:	e58d6014 	str	r6, [sp, #20]
   3b744:	e58d6010 	str	r6, [sp, #16]
   3b748:	e58d500c 	str	r5, [sp, #12]
   3b74c:	e58d5008 	str	r5, [sp, #8]
   3b750:	e58d5004 	str	r5, [sp, #4]
   3b754:	e58d5000 	str	r5, [sp]
   3b758:	eb0003ae 	bl	3c618 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3b75c:	e59f307c 	ldr	r3, [pc, #124]	; 3b7e0 <Display::init()+0x130>
   3b760:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3b764:	e5933004 	ldr	r3, [r3, #4]
   3b768:	e59f206c 	ldr	r2, [pc, #108]	; 3b7dc <Display::init()+0x12c>
   3b76c:	e1a03183 	lsl	r3, r3, #3
   3b770:	e1a00009 	mov	r0, r9
   3b774:	e3a01002 	mov	r1, #2
   3b778:	e1cd41f8 	strd	r4, [sp, #24]
   3b77c:	e58d4024 	str	r4, [sp, #36]	; 0x24
   3b780:	e58d5020 	str	r5, [sp, #32]
   3b784:	e58d6014 	str	r6, [sp, #20]
   3b788:	e58d6010 	str	r6, [sp, #16]
   3b78c:	e58d500c 	str	r5, [sp, #12]
   3b790:	e58d5008 	str	r5, [sp, #8]
   3b794:	e58d5004 	str	r5, [sp, #4]
   3b798:	e58d5000 	str	r5, [sp]
   3b79c:	eb00039d 	bl	3c618 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3b7a0:	e1a00009 	mov	r0, r9
   3b7a4:	e3a01002 	mov	r1, #2
   3b7a8:	eb0003f8 	bl	3c790 <DisplayFX::consoleSetWindow(int)>
   3b7ac:	e1a03004 	mov	r3, r4
   3b7b0:	e1a0c007 	mov	ip, r7
   3b7b4:	e2872d11 	add	r2, r7, #1088	; 0x440
   3b7b8:	e282200c 	add	r2, r2, #12
   3b7bc:	e5cc3b51 	strb	r3, [ip, #2897]	; 0xb51
   3b7c0:	e28cc064 	add	ip, ip, #100	; 0x64
   3b7c4:	e15c0002 	cmp	ip, r2
   3b7c8:	1afffffb 	bne	3b7bc <Display::init()+0x10c>
   3b7cc:	e3a00001 	mov	r0, #1
   3b7d0:	e5c70b50 	strb	r0, [r7, #2896]	; 0xb50
   3b7d4:	e28dd034 	add	sp, sp, #52	; 0x34
   3b7d8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3b7dc:	0000041a 	.word	0x0000041a
   3b7e0:	0004b0f4 	.word	0x0004b0f4

0003b7e4 <Display::statusPut(int, int, char const*)>:
   3b7e4:	e351000a 	cmp	r1, #10
   3b7e8:	c12fff1e 	bxgt	lr
   3b7ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3b7f0:	e0814101 	add	r4, r1, r1, lsl #2
   3b7f4:	e0844104 	add	r4, r4, r4, lsl #2
   3b7f8:	e0804104 	add	r4, r0, r4, lsl #2
   3b7fc:	e2844eb5 	add	r4, r4, #2896	; 0xb50
   3b800:	e2844001 	add	r4, r4, #1
   3b804:	e1a05001 	mov	r5, r1
   3b808:	e1a06000 	mov	r6, r0
   3b80c:	e1a01003 	mov	r1, r3
   3b810:	e1a00004 	mov	r0, r4
   3b814:	e24dd010 	sub	sp, sp, #16
   3b818:	e1a07002 	mov	r7, r2
   3b81c:	e1a08003 	mov	r8, r3
   3b820:	ebffb9c7 	bl	29f44 <strcmp>
   3b824:	e3500000 	cmp	r0, #0
   3b828:	0a00000c 	beq	3b860 <Display::statusPut(int, int, char const*)+0x7c>
   3b82c:	e3a02063 	mov	r2, #99	; 0x63
   3b830:	e1a00004 	mov	r0, r4
   3b834:	e1a01008 	mov	r1, r8
   3b838:	ebffba66 	bl	2a1d8 <strncpy>
   3b83c:	e3570001 	cmp	r7, #1
   3b840:	03a02009 	moveq	r2, #9
   3b844:	0a000002 	beq	3b854 <Display::statusPut(int, int, char const*)+0x70>
   3b848:	e3570000 	cmp	r7, #0
   3b84c:	03a0200b 	moveq	r2, #11
   3b850:	13a0200a 	movne	r2, #10
   3b854:	e5d63b50 	ldrb	r3, [r6, #2896]	; 0xb50
   3b858:	e3530000 	cmp	r3, #0
   3b85c:	1a000001 	bne	3b868 <Display::statusPut(int, int, char const*)+0x84>
   3b860:	e28dd010 	add	sp, sp, #16
   3b864:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3b868:	e59f1068 	ldr	r1, [pc, #104]	; 3b8d8 <Display::statusPut(int, int, char const*)+0xf4>
   3b86c:	e2860004 	add	r0, r6, #4
   3b870:	e0815185 	add	r5, r1, r5, lsl #3
   3b874:	e5953040 	ldr	r3, [r5, #64]	; 0x40
   3b878:	e3a01001 	mov	r1, #1
   3b87c:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
   3b880:	e58d000c 	str	r0, [sp, #12]
   3b884:	e58d3008 	str	r3, [sp, #8]
   3b888:	eb0002ee 	bl	3c448 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>
   3b88c:	e5d62b50 	ldrb	r2, [r6, #2896]	; 0xb50
   3b890:	e3520000 	cmp	r2, #0
   3b894:	0afffff1 	beq	3b860 <Display::statusPut(int, int, char const*)+0x7c>
   3b898:	e59d000c 	ldr	r0, [sp, #12]
   3b89c:	e59d3008 	ldr	r3, [sp, #8]
   3b8a0:	e1a02004 	mov	r2, r4
   3b8a4:	e3a01001 	mov	r1, #1
   3b8a8:	e58d8000 	str	r8, [sp]
   3b8ac:	e58d0008 	str	r0, [sp, #8]
   3b8b0:	eb0002c0 	bl	3c3b8 <DisplayFX::windowPut(int, int, int, char const*)>
   3b8b4:	e5d63b50 	ldrb	r3, [r6, #2896]	; 0xb50
   3b8b8:	e3530000 	cmp	r3, #0
   3b8bc:	0affffe7 	beq	3b860 <Display::statusPut(int, int, char const*)+0x7c>
   3b8c0:	e3a0200f 	mov	r2, #15
   3b8c4:	e3a01001 	mov	r1, #1
   3b8c8:	e59d0008 	ldr	r0, [sp, #8]
   3b8cc:	e28dd010 	add	sp, sp, #16
   3b8d0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3b8d4:	ea0002db 	b	3c448 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>
   3b8d8:	00047364 	.word	0x00047364

0003b8dc <Display::windowForeground(int, DISPLAY_FX_COLOUR)>:
   3b8dc:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3b8e0:	e3530000 	cmp	r3, #0
   3b8e4:	012fff1e 	bxeq	lr
   3b8e8:	e2800004 	add	r0, r0, #4
   3b8ec:	ea0002d5 	b	3c448 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>

0003b8f0 <Display::windowBackground(int, DISPLAY_FX_COLOUR)>:
   3b8f0:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3b8f4:	e3530000 	cmp	r3, #0
   3b8f8:	012fff1e 	bxeq	lr
   3b8fc:	e2800004 	add	r0, r0, #4
   3b900:	ea0002d6 	b	3c460 <DisplayFX::windowBackground(int, DISPLAY_FX_COLOUR)>

0003b904 <Display::windowWrite(int, int, int, char const*)>:
   3b904:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3b908:	e35c0000 	cmp	ip, #0
   3b90c:	012fff1e 	bxeq	lr
   3b910:	e2800004 	add	r0, r0, #4
   3b914:	ea0002a7 	b	3c3b8 <DisplayFX::windowPut(int, int, int, char const*)>

0003b918 <Display::windowWrite(int, int, int, int)>:
   3b918:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3b91c:	e35c0000 	cmp	ip, #0
   3b920:	012fff1e 	bxeq	lr
   3b924:	e2800004 	add	r0, r0, #4
   3b928:	ea000227 	b	3c1cc <DisplayFX::windowPut(int, int, int, int)>

0003b92c <Display::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>:
   3b92c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3b930:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3b934:	e1dde0d8 	ldrsb	lr, [sp, #8]
   3b938:	e35c0000 	cmp	ip, #0
   3b93c:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   3b940:	e58de008 	str	lr, [sp, #8]
   3b944:	e2800004 	add	r0, r0, #4
   3b948:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3b94c:	ea0002c9 	b	3c478 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>

0003b950 <Display::consolePut(char const*)>:
   3b950:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3b954:	e3530000 	cmp	r3, #0
   3b958:	012fff1e 	bxeq	lr
   3b95c:	e2800004 	add	r0, r0, #4
   3b960:	ea000420 	b	3c9e8 <DisplayFX::consolePut(char const*)>

0003b964 <Display::consolePut(int)>:
   3b964:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3b968:	e3530000 	cmp	r3, #0
   3b96c:	012fff1e 	bxeq	lr
   3b970:	e2800004 	add	r0, r0, #4
   3b974:	ea0003b8 	b	3c85c <DisplayFX::consolePut(int)>

0003b978 <Display::consolePut(char const*, unsigned int)>:
   3b978:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3b97c:	e3530000 	cmp	r3, #0
   3b980:	012fff1e 	bxeq	lr
   3b984:	e2800004 	add	r0, r0, #4
   3b988:	ea000422 	b	3ca18 <DisplayFX::consolePut(char const*, unsigned int)>

0003b98c <Display::consoleForeground(DISPLAY_FX_COLOUR)>:
   3b98c:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3b990:	e3530000 	cmp	r3, #0
   3b994:	012fff1e 	bxeq	lr
   3b998:	e2800004 	add	r0, r0, #4
   3b99c:	ea000368 	b	3c744 <DisplayFX::consoleForeground(DISPLAY_FX_COLOUR)>

0003b9a0 <Display::consoleGetWidth()>:
   3b9a0:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3b9a4:	e3530000 	cmp	r3, #0
   3b9a8:	1a000001 	bne	3b9b4 <Display::consoleGetWidth()+0x14>
   3b9ac:	e1a00003 	mov	r0, r3
   3b9b0:	e12fff1e 	bx	lr
   3b9b4:	e2800004 	add	r0, r0, #4
   3b9b8:	ea000367 	b	3c75c <DisplayFX::consoleGetWidth()>

0003b9bc <Display::logDebug(char const*, char const*, char const*)>:
   3b9bc:	e92d4070 	push	{r4, r5, r6, lr}
   3b9c0:	e1a04000 	mov	r4, r0
   3b9c4:	e5d00b50 	ldrb	r0, [r0, #2896]	; 0xb50
   3b9c8:	e24dd008 	sub	sp, sp, #8
   3b9cc:	e3500000 	cmp	r0, #0
   3b9d0:	1a000001 	bne	3b9dc <Display::logDebug(char const*, char const*, char const*)+0x20>
   3b9d4:	e28dd008 	add	sp, sp, #8
   3b9d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   3b9dc:	e2840004 	add	r0, r4, #4
   3b9e0:	e1a05003 	mov	r5, r3
   3b9e4:	e1a06002 	mov	r6, r2
   3b9e8:	e58d0004 	str	r0, [sp, #4]
   3b9ec:	eb0003fd 	bl	3c9e8 <DisplayFX::consolePut(char const*)>
   3b9f0:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3b9f4:	e3530000 	cmp	r3, #0
   3b9f8:	0afffff5 	beq	3b9d4 <Display::logDebug(char const*, char const*, char const*)+0x18>
   3b9fc:	e59f106c 	ldr	r1, [pc, #108]	; 3ba70 <Display::logDebug(char const*, char const*, char const*)+0xb4>
   3ba00:	e59d0004 	ldr	r0, [sp, #4]
   3ba04:	eb0003f7 	bl	3c9e8 <DisplayFX::consolePut(char const*)>
   3ba08:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3ba0c:	e3530000 	cmp	r3, #0
   3ba10:	0affffef 	beq	3b9d4 <Display::logDebug(char const*, char const*, char const*)+0x18>
   3ba14:	e1a01006 	mov	r1, r6
   3ba18:	e59d0004 	ldr	r0, [sp, #4]
   3ba1c:	eb0003f1 	bl	3c9e8 <DisplayFX::consolePut(char const*)>
   3ba20:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3ba24:	e3530000 	cmp	r3, #0
   3ba28:	0affffe9 	beq	3b9d4 <Display::logDebug(char const*, char const*, char const*)+0x18>
   3ba2c:	e59f1040 	ldr	r1, [pc, #64]	; 3ba74 <Display::logDebug(char const*, char const*, char const*)+0xb8>
   3ba30:	e59d0004 	ldr	r0, [sp, #4]
   3ba34:	eb0003eb 	bl	3c9e8 <DisplayFX::consolePut(char const*)>
   3ba38:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3ba3c:	e3530000 	cmp	r3, #0
   3ba40:	0affffe3 	beq	3b9d4 <Display::logDebug(char const*, char const*, char const*)+0x18>
   3ba44:	e1a01005 	mov	r1, r5
   3ba48:	e59d0004 	ldr	r0, [sp, #4]
   3ba4c:	eb0003e5 	bl	3c9e8 <DisplayFX::consolePut(char const*)>
   3ba50:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3ba54:	e3530000 	cmp	r3, #0
   3ba58:	0affffdd 	beq	3b9d4 <Display::logDebug(char const*, char const*, char const*)+0x18>
   3ba5c:	e59d0004 	ldr	r0, [sp, #4]
   3ba60:	e59f1010 	ldr	r1, [pc, #16]	; 3ba78 <Display::logDebug(char const*, char const*, char const*)+0xbc>
   3ba64:	e28dd008 	add	sp, sp, #8
   3ba68:	e8bd4070 	pop	{r4, r5, r6, lr}
   3ba6c:	ea0003dd 	b	3c9e8 <DisplayFX::consolePut(char const*)>
   3ba70:	00047320 	.word	0x00047320
   3ba74:	00047324 	.word	0x00047324
   3ba78:	00046f54 	.word	0x00046f54

0003ba7c <DisplayBase::write(int, int, char const*)>:
   3ba7c:	e12fff1e 	bx	lr

0003ba80 <DisplayBase::setPixel(int, int, int, DISPLAY_FX_COLOUR)>:
   3ba80:	e12fff1e 	bx	lr

0003ba84 <DisplayBase::getFrameBufferInfo(FrameBufferInfo&)>:
   3ba84:	e12fff1e 	bx	lr

0003ba88 <DisplayBase::~DisplayBase()>:
   3ba88:	e92d4010 	push	{r4, lr}
   3ba8c:	e1a04000 	mov	r4, r0
   3ba90:	e59f300c 	ldr	r3, [pc, #12]	; 3baa4 <DisplayBase::~DisplayBase()+0x1c>
   3ba94:	e5803000 	str	r3, [r0]
   3ba98:	ebffa4d2 	bl	24de8 <CDevice::~CDevice()>
   3ba9c:	e1a00004 	mov	r0, r4
   3baa0:	e8bd8010 	pop	{r4, pc}
   3baa4:	00047330 	.word	0x00047330

0003baa8 <DisplayBase::~DisplayBase()>:
   3baa8:	e92d4010 	push	{r4, lr}
   3baac:	e1a04000 	mov	r4, r0
   3bab0:	e59f3018 	ldr	r3, [pc, #24]	; 3bad0 <DisplayBase::~DisplayBase()+0x28>
   3bab4:	e5803000 	str	r3, [r0]
   3bab8:	ebffa4ca 	bl	24de8 <CDevice::~CDevice()>
   3babc:	e1a00004 	mov	r0, r4
   3bac0:	e3a01004 	mov	r1, #4
   3bac4:	ebffbd03 	bl	2aed8 <operator delete(void*, unsigned int)>
   3bac8:	e1a00004 	mov	r0, r4
   3bacc:	e8bd8010 	pop	{r4, pc}
   3bad0:	00047330 	.word	0x00047330

0003bad4 <DisplayFX::windowScroll(int, int) [clone .part.0]>:
   3bad4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bad8:	e3520000 	cmp	r2, #0
   3badc:	e0224fc2 	eor	r4, r2, r2, asr #31
   3bae0:	e1a06000 	mov	r6, r0
   3bae4:	e1a05001 	mov	r5, r1
   3bae8:	e0444fc2 	sub	r4, r4, r2, asr #31
   3baec:	da00002d 	ble	3bba8 <DisplayFX::windowScroll(int, int) [clone .part.0]+0xd4>
   3baf0:	e0811181 	add	r1, r1, r1, lsl #3
   3baf4:	e0655201 	rsb	r5, r5, r1, lsl #4
   3baf8:	e0805105 	add	r5, r0, r5, lsl #2
   3bafc:	e5959018 	ldr	r9, [r5, #24]
   3bb00:	e595800c 	ldr	r8, [r5, #12]
   3bb04:	e0040499 	mul	r4, r9, r4
   3bb08:	e5957020 	ldr	r7, [r5, #32]
   3bb0c:	e5953004 	ldr	r3, [r5, #4]
   3bb10:	e0248497 	mla	r4, r7, r4, r8
   3bb14:	e5902b38 	ldr	r2, [r0, #2872]	; 0xb38
   3bb18:	e595b014 	ldr	fp, [r5, #20]
   3bb1c:	e0243492 	mla	r4, r2, r4, r3
   3bb20:	e0283892 	mla	r8, r2, r8, r3
   3bb24:	e5903b40 	ldr	r3, [r0, #2880]	; 0xb40
   3bb28:	e35b0000 	cmp	fp, #0
   3bb2c:	e595a01c 	ldr	sl, [r5, #28]
   3bb30:	e5950008 	ldr	r0, [r5, #8]
   3bb34:	d3a0a000 	movle	sl, #0
   3bb38:	e0834004 	add	r4, r3, r4
   3bb3c:	e0838008 	add	r8, r3, r8
   3bb40:	da000003 	ble	3bb54 <DisplayFX::windowScroll(int, int) [clone .part.0]+0x80>
   3bb44:	e1a0100b 	mov	r1, fp
   3bb48:	eb000542 	bl	3d058 <__divsi3>
   3bb4c:	e000009b 	mul	r0, fp, r0
   3bb50:	e00a009a 	mul	sl, sl, r0
   3bb54:	e5951018 	ldr	r1, [r5, #24]
   3bb58:	e5950010 	ldr	r0, [r5, #16]
   3bb5c:	e3510000 	cmp	r1, #0
   3bb60:	d8bd8ff8 	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bb64:	eb00053b 	bl	3d058 <__divsi3>
   3bb68:	e0000099 	mul	r0, r9, r0
   3bb6c:	e0070097 	mul	r7, r7, r0
   3bb70:	e3570000 	cmp	r7, #0
   3bb74:	d8bd8ff8 	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bb78:	e3a05000 	mov	r5, #0
   3bb7c:	e1a01004 	mov	r1, r4
   3bb80:	e1a00008 	mov	r0, r8
   3bb84:	e1a0200a 	mov	r2, sl
   3bb88:	ebffbade 	bl	2a708 <memcpy>
   3bb8c:	e2855001 	add	r5, r5, #1
   3bb90:	e5963b38 	ldr	r3, [r6, #2872]	; 0xb38
   3bb94:	e1570005 	cmp	r7, r5
   3bb98:	e0888003 	add	r8, r8, r3
   3bb9c:	e0844003 	add	r4, r4, r3
   3bba0:	1afffff5 	bne	3bb7c <DisplayFX::windowScroll(int, int) [clone .part.0]+0xa8>
   3bba4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bba8:	e0813181 	add	r3, r1, r1, lsl #3
   3bbac:	e0613203 	rsb	r3, r1, r3, lsl #4
   3bbb0:	e0803103 	add	r3, r0, r3, lsl #2
   3bbb4:	e5931018 	ldr	r1, [r3, #24]
   3bbb8:	e5930010 	ldr	r0, [r3, #16]
   3bbbc:	e3510000 	cmp	r1, #0
   3bbc0:	d3a00000 	movle	r0, #0
   3bbc4:	e1a07185 	lsl	r7, r5, #3
   3bbc8:	da000000 	ble	3bbd0 <DisplayFX::windowScroll(int, int) [clone .part.0]+0xfc>
   3bbcc:	eb000521 	bl	3d058 <__divsi3>
   3bbd0:	e0877005 	add	r7, r7, r5
   3bbd4:	e0655207 	rsb	r5, r5, r7, lsl #4
   3bbd8:	e0865105 	add	r5, r6, r5, lsl #2
   3bbdc:	e5951018 	ldr	r1, [r5, #24]
   3bbe0:	e0403004 	sub	r3, r0, r4
   3bbe4:	e0030391 	mul	r3, r1, r3
   3bbe8:	e595e00c 	ldr	lr, [r5, #12]
   3bbec:	e5957020 	ldr	r7, [r5, #32]
   3bbf0:	e5952004 	ldr	r2, [r5, #4]
   3bbf4:	e023e397 	mla	r3, r7, r3, lr
   3bbf8:	e596cb38 	ldr	ip, [r6, #2872]	; 0xb38
   3bbfc:	e0010190 	mul	r1, r0, r1
   3bc00:	e2424001 	sub	r4, r2, #1
   3bc04:	e0202e9c 	mla	r0, ip, lr, r2
   3bc08:	e023439c 	mla	r3, ip, r3, r4
   3bc0c:	e5962b40 	ldr	r2, [r6, #2880]	; 0xb40
   3bc10:	e021e197 	mla	r1, r7, r1, lr
   3bc14:	e0823003 	add	r3, r2, r3
   3bc18:	e0820000 	add	r0, r2, r0
   3bc1c:	e1530000 	cmp	r3, r0
   3bc20:	e021419c 	mla	r1, ip, r1, r4
   3bc24:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bc28:	e2811001 	add	r1, r1, #1
   3bc2c:	e0822001 	add	r2, r2, r1
   3bc30:	e4531001 	ldrb	r1, [r3], #-1
   3bc34:	e1500003 	cmp	r0, r3
   3bc38:	e5621001 	strb	r1, [r2, #-1]!
   3bc3c:	1afffffb 	bne	3bc30 <DisplayFX::windowScroll(int, int) [clone .part.0]+0x15c>
   3bc40:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003bc44 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]>:
   3bc44:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bc48:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   3bc4c:	e292c001 	adds	ip, r2, #1
   3bc50:	13a0c001 	movne	ip, #1
   3bc54:	e3740001 	cmn	r4, #1
   3bc58:	13a0c000 	movne	ip, #0
   3bc5c:	e59d603c 	ldr	r6, [sp, #60]	; 0x3c
   3bc60:	e59fe284 	ldr	lr, [pc, #644]	; 3beec <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x2a8>
   3bc64:	e3560000 	cmp	r6, #0
   3bc68:	01a0600e 	moveq	r6, lr
   3bc6c:	e35c0000 	cmp	ip, #0
   3bc70:	e59db028 	ldr	fp, [sp, #40]	; 0x28
   3bc74:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
   3bc78:	e59d8030 	ldr	r8, [sp, #48]	; 0x30
   3bc7c:	e59da034 	ldr	sl, [sp, #52]	; 0x34
   3bc80:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
   3bc84:	e59de048 	ldr	lr, [sp, #72]	; 0x48
   3bc88:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   3bc8c:	0a000089 	beq	3beb8 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x274>
   3bc90:	e5905b30 	ldr	r5, [r0, #2864]	; 0xb30
   3bc94:	e0814181 	add	r4, r1, r1, lsl #3
   3bc98:	e0455002 	sub	r5, r5, r2
   3bc9c:	e0614204 	rsb	r4, r1, r4, lsl #4
   3bca0:	e045508e 	sub	r5, r5, lr, lsl #1
   3bca4:	e0804104 	add	r4, r0, r4, lsl #2
   3bca8:	e5845008 	str	r5, [r4, #8]
   3bcac:	e1a05181 	lsl	r5, r1, #3
   3bcb0:	e37b0001 	cmn	fp, #1
   3bcb4:	0590bb34 	ldreq	fp, [r0, #2868]	; 0xb34
   3bcb8:	100b0b97 	mulne	fp, r7, fp
   3bcbc:	e0854001 	add	r4, r5, r1
   3bcc0:	004bb003 	subeq	fp, fp, r3
   3bcc4:	e0614204 	rsb	r4, r1, r4, lsl #4
   3bcc8:	e0804104 	add	r4, r0, r4, lsl #2
   3bccc:	004bb08e 	subeq	fp, fp, lr, lsl #1
   3bcd0:	e584b010 	str	fp, [r4, #16]
   3bcd4:	e3720001 	cmn	r2, #1
   3bcd8:	05902b30 	ldreq	r2, [r0, #2864]	; 0xb30
   3bcdc:	05944008 	ldreq	r4, [r4, #8]
   3bce0:	1022e29a 	mlane	r2, sl, r2, lr
   3bce4:	e02be397 	mla	fp, r7, r3, lr
   3bce8:	00422004 	subeq	r2, r2, r4
   3bcec:	e0854001 	add	r4, r5, r1
   3bcf0:	00822fa2 	addeq	r2, r2, r2, lsr #31
   3bcf4:	e0614204 	rsb	r4, r1, r4, lsl #4
   3bcf8:	01a020c2 	asreq	r2, r2, #1
   3bcfc:	e0803104 	add	r3, r0, r4, lsl #2
   3bd00:	e5832004 	str	r2, [r3, #4]
   3bd04:	e583b00c 	str	fp, [r3, #12]
   3bd08:	e0852001 	add	r2, r5, r1
   3bd0c:	e3790001 	cmn	r9, #1
   3bd10:	05969000 	ldreq	r9, [r6]
   3bd14:	e0612202 	rsb	r2, r1, r2, lsl #4
   3bd18:	e0802102 	add	r2, r0, r2, lsl #2
   3bd1c:	e5829014 	str	r9, [r2, #20]
   3bd20:	e3780001 	cmn	r8, #1
   3bd24:	05968004 	ldreq	r8, [r6, #4]
   3bd28:	e37c0001 	cmn	ip, #1
   3bd2c:	135e0000 	cmpne	lr, #0
   3bd30:	e0855001 	add	r5, r5, r1
   3bd34:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
   3bd38:	e0611205 	rsb	r1, r1, r5, lsl #4
   3bd3c:	e0801101 	add	r1, r0, r1, lsl #2
   3bd40:	e5812028 	str	r2, [r1, #40]	; 0x28
   3bd44:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
   3bd48:	e1a04104 	lsl	r4, r4, #2
   3bd4c:	e5818018 	str	r8, [r1, #24]
   3bd50:	e581a01c 	str	sl, [r1, #28]
   3bd54:	e5817020 	str	r7, [r1, #32]
   3bd58:	e581602c 	str	r6, [r1, #44]	; 0x2c
   3bd5c:	e5812024 	str	r2, [r1, #36]	; 0x24
   3bd60:	da000051 	ble	3beac <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x268>
   3bd64:	e3a08000 	mov	r8, #0
   3bd68:	e5902b38 	ldr	r2, [r0, #2872]	; 0xb38
   3bd6c:	e6efc07c 	uxtb	ip, ip
   3bd70:	e1a0908e 	lsl	r9, lr, #1
   3bd74:	e591500c 	ldr	r5, [r1, #12]
   3bd78:	e593b004 	ldr	fp, [r3, #4]
   3bd7c:	e045500e 	sub	r5, r5, lr
   3bd80:	e0857008 	add	r7, r5, r8
   3bd84:	e04bb00e 	sub	fp, fp, lr
   3bd88:	e027b792 	mla	r7, r2, r7, fp
   3bd8c:	e591a008 	ldr	sl, [r1, #8]
   3bd90:	e5906b40 	ldr	r6, [r0, #2880]	; 0xb40
   3bd94:	e089a00a 	add	sl, r9, sl
   3bd98:	e35a0000 	cmp	sl, #0
   3bd9c:	e0867007 	add	r7, r6, r7
   3bda0:	da00001c 	ble	3be18 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x1d4>
   3bda4:	e087200a 	add	r2, r7, sl
   3bda8:	e4c7c001 	strb	ip, [r7], #1
   3bdac:	e1570002 	cmp	r7, r2
   3bdb0:	1afffffc 	bne	3bda8 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x164>
   3bdb4:	e591a00c 	ldr	sl, [r1, #12]
   3bdb8:	e5915010 	ldr	r5, [r1, #16]
   3bdbc:	e593b004 	ldr	fp, [r3, #4]
   3bdc0:	e5902b38 	ldr	r2, [r0, #2872]	; 0xb38
   3bdc4:	e08a5005 	add	r5, sl, r5
   3bdc8:	e0855008 	add	r5, r5, r8
   3bdcc:	e04bb00e 	sub	fp, fp, lr
   3bdd0:	e025b592 	mla	r5, r2, r5, fp
   3bdd4:	e5917008 	ldr	r7, [r1, #8]
   3bdd8:	e5906b40 	ldr	r6, [r0, #2880]	; 0xb40
   3bddc:	e0897007 	add	r7, r9, r7
   3bde0:	e3570000 	cmp	r7, #0
   3bde4:	e0865005 	add	r5, r6, r5
   3bde8:	d04a500e 	suble	r5, sl, lr
   3bdec:	da000009 	ble	3be18 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x1d4>
   3bdf0:	e0852007 	add	r2, r5, r7
   3bdf4:	e4c5c001 	strb	ip, [r5], #1
   3bdf8:	e1550002 	cmp	r5, r2
   3bdfc:	1afffffc 	bne	3bdf4 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x1b0>
   3be00:	e593b004 	ldr	fp, [r3, #4]
   3be04:	e591500c 	ldr	r5, [r1, #12]
   3be08:	e5906b40 	ldr	r6, [r0, #2880]	; 0xb40
   3be0c:	e5902b38 	ldr	r2, [r0, #2872]	; 0xb38
   3be10:	e04bb00e 	sub	fp, fp, lr
   3be14:	e045500e 	sub	r5, r5, lr
   3be18:	e088b00b 	add	fp, r8, fp
   3be1c:	e025b592 	mla	r5, r2, r5, fp
   3be20:	e5917010 	ldr	r7, [r1, #16]
   3be24:	e0865005 	add	r5, r6, r5
   3be28:	e0897007 	add	r7, r9, r7
   3be2c:	e3570000 	cmp	r7, #0
   3be30:	c3a06000 	movgt	r6, #0
   3be34:	da000019 	ble	3bea0 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x25c>
   3be38:	e5c5c000 	strb	ip, [r5]
   3be3c:	e5902b38 	ldr	r2, [r0, #2872]	; 0xb38
   3be40:	e2866001 	add	r6, r6, #1
   3be44:	e1570006 	cmp	r7, r6
   3be48:	e0855002 	add	r5, r5, r2
   3be4c:	1afffff9 	bne	3be38 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x1f4>
   3be50:	e5917008 	ldr	r7, [r1, #8]
   3be54:	e5936004 	ldr	r6, [r3, #4]
   3be58:	e591500c 	ldr	r5, [r1, #12]
   3be5c:	e0866007 	add	r6, r6, r7
   3be60:	e045500e 	sub	r5, r5, lr
   3be64:	e0866008 	add	r6, r6, r8
   3be68:	e0266592 	mla	r6, r2, r5, r6
   3be6c:	e5917010 	ldr	r7, [r1, #16]
   3be70:	e5905b40 	ldr	r5, [r0, #2880]	; 0xb40
   3be74:	e0897007 	add	r7, r9, r7
   3be78:	e3570000 	cmp	r7, #0
   3be7c:	e0855006 	add	r5, r5, r6
   3be80:	da000006 	ble	3bea0 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x25c>
   3be84:	e3a06000 	mov	r6, #0
   3be88:	e5c5c000 	strb	ip, [r5]
   3be8c:	e5902b38 	ldr	r2, [r0, #2872]	; 0xb38
   3be90:	e2866001 	add	r6, r6, #1
   3be94:	e1570006 	cmp	r7, r6
   3be98:	e0855002 	add	r5, r5, r2
   3be9c:	1afffff9 	bne	3be88 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x244>
   3bea0:	e2888001 	add	r8, r8, #1
   3bea4:	e15e0008 	cmp	lr, r8
   3bea8:	caffffb1 	bgt	3bd74 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x130>
   3beac:	e3a03001 	mov	r3, #1
   3beb0:	e7c03004 	strb	r3, [r0, r4]
   3beb4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3beb8:	e3740001 	cmn	r4, #1
   3bebc:	1004049a 	mulne	r4, sl, r4
   3bec0:	10815181 	addne	r5, r1, r1, lsl #3
   3bec4:	00814181 	addeq	r4, r1, r1, lsl #3
   3bec8:	10615205 	rsbne	r5, r1, r5, lsl #4
   3becc:	05905b30 	ldreq	r5, [r0, #2864]	; 0xb30
   3bed0:	00614204 	rsbeq	r4, r1, r4, lsl #4
   3bed4:	10805105 	addne	r5, r0, r5, lsl #2
   3bed8:	00804104 	addeq	r4, r0, r4, lsl #2
   3bedc:	05845008 	streq	r5, [r4, #8]
   3bee0:	15854008 	strne	r4, [r5, #8]
   3bee4:	e1a05181 	lsl	r5, r1, #3
   3bee8:	eaffff70 	b	3bcb0 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x6c>
   3beec:	0004b0f4 	.word	0x0004b0f4

0003bef0 <DisplayFX::DisplayFX()>:
   3bef0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3bef4:	e3a02000 	mov	r2, #0
   3bef8:	e1a03000 	mov	r3, r0
   3befc:	e3a01001 	mov	r1, #1
   3bf00:	e3a0e00f 	mov	lr, #15
   3bf04:	e280ceb2 	add	ip, r0, #2848	; 0xb20
   3bf08:	e28cc00c 	add	ip, ip, #12
   3bf0c:	e5c32000 	strb	r2, [r3]
   3bf10:	e583200c 	str	r2, [r3, #12]
   3bf14:	e5832004 	str	r2, [r3, #4]
   3bf18:	e5832010 	str	r2, [r3, #16]
   3bf1c:	e5832008 	str	r2, [r3, #8]
   3bf20:	e5832018 	str	r2, [r3, #24]
   3bf24:	e5832014 	str	r2, [r3, #20]
   3bf28:	e5831020 	str	r1, [r3, #32]
   3bf2c:	e583101c 	str	r1, [r3, #28]
   3bf30:	e5832024 	str	r2, [r3, #36]	; 0x24
   3bf34:	e583e028 	str	lr, [r3, #40]	; 0x28
   3bf38:	e583202c 	str	r2, [r3, #44]	; 0x2c
   3bf3c:	e5832030 	str	r2, [r3, #48]	; 0x30
   3bf40:	e5832034 	str	r2, [r3, #52]	; 0x34
   3bf44:	e5c32038 	strb	r2, [r3, #56]	; 0x38
   3bf48:	e2833f8f 	add	r3, r3, #572	; 0x23c
   3bf4c:	e153000c 	cmp	r3, ip
   3bf50:	1affffed 	bne	3bf0c <DisplayFX::DisplayFX()+0x1c>
   3bf54:	e1a03000 	mov	r3, r0
   3bf58:	e3a01c0f 	mov	r1, #3840	; 0xf00
   3bf5c:	e5802b48 	str	r2, [r0, #2888]	; 0xb48
   3bf60:	e5802b2c 	str	r2, [r0, #2860]	; 0xb2c
   3bf64:	e5802b30 	str	r2, [r0, #2864]	; 0xb30
   3bf68:	e5802b34 	str	r2, [r0, #2868]	; 0xb34
   3bf6c:	e5802b38 	str	r2, [r0, #2872]	; 0xb38
   3bf70:	e5802b3c 	str	r2, [r0, #2876]	; 0xb3c
   3bf74:	e5a32b40 	str	r2, [r3, #2880]!	; 0xb40
   3bf78:	e1c310b4 	strh	r1, [r3, #4]
   3bf7c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003bf80 <DisplayFX::~DisplayFX()>:
   3bf80:	e92d4070 	push	{r4, r5, r6, lr}
   3bf84:	e5905b2c 	ldr	r5, [r0, #2860]	; 0xb2c
   3bf88:	e1a04000 	mov	r4, r0
   3bf8c:	e3550000 	cmp	r5, #0
   3bf90:	0a000004 	beq	3bfa8 <DisplayFX::~DisplayFX()+0x28>
   3bf94:	e1a00005 	mov	r0, r5
   3bf98:	eb0005d0 	bl	3d6e0 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   3bf9c:	e1a00005 	mov	r0, r5
   3bfa0:	e3a01094 	mov	r1, #148	; 0x94
   3bfa4:	ebffbbcb 	bl	2aed8 <operator delete(void*, unsigned int)>
   3bfa8:	e1a00004 	mov	r0, r4
   3bfac:	e8bd8070 	pop	{r4, r5, r6, pc}

0003bfb0 <DisplayFX::init(int, int)>:
   3bfb0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3bfb4:	e1a06000 	mov	r6, r0
   3bfb8:	e24dd034 	sub	sp, sp, #52	; 0x34
   3bfbc:	e3a00094 	mov	r0, #148	; 0x94
   3bfc0:	e1a07001 	mov	r7, r1
   3bfc4:	e1a08002 	mov	r8, r2
   3bfc8:	ebffbbb4 	bl	2aea0 <operator new(unsigned int)>
   3bfcc:	e3a04000 	mov	r4, #0
   3bfd0:	e1a05000 	mov	r5, r0
   3bfd4:	e3a03008 	mov	r3, #8
   3bfd8:	e58d4004 	str	r4, [sp, #4]
   3bfdc:	e58d4000 	str	r4, [sp]
   3bfe0:	e1a02008 	mov	r2, r8
   3bfe4:	e1a01007 	mov	r1, r7
   3bfe8:	eb00056a 	bl	3d598 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   3bfec:	e1a09004 	mov	r9, r4
   3bff0:	e1a03004 	mov	r3, r4
   3bff4:	e5865b2c 	str	r5, [r6, #2860]	; 0xb2c
   3bff8:	e59f413c 	ldr	r4, [pc, #316]	; 3c13c <DisplayFX::init(int, int)+0x18c>
   3bffc:	ea000001 	b	3c008 <DisplayFX::init(int, int)+0x58>
   3c000:	e5965b2c 	ldr	r5, [r6, #2860]	; 0xb2c
   3c004:	e5b43004 	ldr	r3, [r4, #4]!
   3c008:	e1a02803 	lsl	r2, r3, #16
   3c00c:	e1a01403 	lsl	r1, r3, #8
   3c010:	e20228ff 	and	r2, r2, #16711680	; 0xff0000
   3c014:	e1822c21 	orr	r2, r2, r1, lsr #24
   3c018:	e2033cff 	and	r3, r3, #65280	; 0xff00
   3c01c:	e6ef1079 	uxtb	r1, r9
   3c020:	e1a00005 	mov	r0, r5
   3c024:	e1822003 	orr	r2, r2, r3
   3c028:	e2899001 	add	r9, r9, #1
   3c02c:	eb0005ca 	bl	3d75c <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>
   3c030:	e3590c01 	cmp	r9, #256	; 0x100
   3c034:	1afffff1 	bne	3c000 <DisplayFX::init(int, int)+0x50>
   3c038:	e5960b2c 	ldr	r0, [r6, #2860]	; 0xb2c
   3c03c:	e3500000 	cmp	r0, #0
   3c040:	0a000002 	beq	3c050 <DisplayFX::init(int, int)+0xa0>
   3c044:	eb0005d2 	bl	3d794 <CBcmFrameBuffer::Initialize()>
   3c048:	e2504000 	subs	r4, r0, #0
   3c04c:	1a000003 	bne	3c060 <DisplayFX::init(int, int)+0xb0>
   3c050:	e3a04000 	mov	r4, #0
   3c054:	e1a00004 	mov	r0, r4
   3c058:	e28dd034 	add	sp, sp, #52	; 0x34
   3c05c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3c060:	e5960b2c 	ldr	r0, [r6, #2860]	; 0xb2c
   3c064:	eb000605 	bl	3d880 <CBcmFrameBuffer::GetDepth() const>
   3c068:	e3500008 	cmp	r0, #8
   3c06c:	1afffff7 	bne	3c050 <DisplayFX::init(int, int)+0xa0>
   3c070:	e5960b2c 	ldr	r0, [r6, #2860]	; 0xb2c
   3c074:	eb000603 	bl	3d888 <CBcmFrameBuffer::GetBuffer() const>
   3c078:	e5860b40 	str	r0, [r6, #2880]	; 0xb40
   3c07c:	e5960b2c 	ldr	r0, [r6, #2860]	; 0xb2c
   3c080:	eb000602 	bl	3d890 <CBcmFrameBuffer::GetSize() const>
   3c084:	e5860b3c 	str	r0, [r6, #2876]	; 0xb3c
   3c088:	e5960b2c 	ldr	r0, [r6, #2860]	; 0xb2c
   3c08c:	eb0005f9 	bl	3d878 <CBcmFrameBuffer::GetPitch() const>
   3c090:	e5860b38 	str	r0, [r6, #2872]	; 0xb38
   3c094:	e5960b2c 	ldr	r0, [r6, #2860]	; 0xb2c
   3c098:	eb0005ee 	bl	3d858 <CBcmFrameBuffer::GetWidth() const>
   3c09c:	e5860b30 	str	r0, [r6, #2864]	; 0xb30
   3c0a0:	e5960b2c 	ldr	r0, [r6, #2860]	; 0xb2c
   3c0a4:	eb0005ed 	bl	3d860 <CBcmFrameBuffer::GetHeight() const>
   3c0a8:	e5963b38 	ldr	r3, [r6, #2872]	; 0xb38
   3c0ac:	e5860b34 	str	r0, [r6, #2868]	; 0xb34
   3c0b0:	e3130003 	tst	r3, #3
   3c0b4:	1affffe5 	bne	3c050 <DisplayFX::init(int, int)+0xa0>
   3c0b8:	e5963b40 	ldr	r3, [r6, #2880]	; 0xb40
   3c0bc:	e5961b3c 	ldr	r1, [r6, #2876]	; 0xb3c
   3c0c0:	e0831001 	add	r1, r3, r1
   3c0c4:	e1530001 	cmp	r3, r1
   3c0c8:	2a000003 	bcs	3c0dc <DisplayFX::init(int, int)+0x12c>
   3c0cc:	e5d62b44 	ldrb	r2, [r6, #2884]	; 0xb44
   3c0d0:	e4c32001 	strb	r2, [r3], #1
   3c0d4:	e1510003 	cmp	r1, r3
   3c0d8:	1afffffb 	bne	3c0cc <DisplayFX::init(int, int)+0x11c>
   3c0dc:	e3a05000 	mov	r5, #0
   3c0e0:	e3e00000 	mvn	r0, #0
   3c0e4:	e3a0c002 	mov	ip, #2
   3c0e8:	e58d0020 	str	r0, [sp, #32]
   3c0ec:	e58d001c 	str	r0, [sp, #28]
   3c0f0:	e58d000c 	str	r0, [sp, #12]
   3c0f4:	e58d0008 	str	r0, [sp, #8]
   3c0f8:	e1a03005 	mov	r3, r5
   3c0fc:	e1a02005 	mov	r2, r5
   3c100:	e1a01005 	mov	r1, r5
   3c104:	e1a00006 	mov	r0, r6
   3c108:	e88d0180 	stm	sp, {r7, r8}
   3c10c:	e58d5028 	str	r5, [sp, #40]	; 0x28
   3c110:	e58d5024 	str	r5, [sp, #36]	; 0x24
   3c114:	e58d5018 	str	r5, [sp, #24]
   3c118:	e58dc014 	str	ip, [sp, #20]
   3c11c:	e58dc010 	str	ip, [sp, #16]
   3c120:	ebfffec7 	bl	3bc44 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]>
   3c124:	e5c65000 	strb	r5, [r6]
   3c128:	e5c6523c 	strb	r5, [r6, #572]	; 0x23c
   3c12c:	e5c65478 	strb	r5, [r6, #1144]	; 0x478
   3c130:	e5c656b4 	strb	r5, [r6, #1716]	; 0x6b4
   3c134:	e5c658f0 	strb	r5, [r6, #2288]	; 0x8f0
   3c138:	eaffffc5 	b	3c054 <DisplayFX::init(int, int)+0xa4>
   3c13c:	000473f8 	.word	0x000473f8

0003c140 <DisplayFX::screenClear()>:
   3c140:	e5903b40 	ldr	r3, [r0, #2880]	; 0xb40
   3c144:	e5901b3c 	ldr	r1, [r0, #2876]	; 0xb3c
   3c148:	e0831001 	add	r1, r3, r1
   3c14c:	e1530001 	cmp	r3, r1
   3c150:	212fff1e 	bxcs	lr
   3c154:	e5d02b44 	ldrb	r2, [r0, #2884]	; 0xb44
   3c158:	e4c32001 	strb	r2, [r3], #1
   3c15c:	e1510003 	cmp	r1, r3
   3c160:	1afffffb 	bne	3c154 <DisplayFX::screenClear()+0x14>
   3c164:	e12fff1e 	bx	lr

0003c168 <DisplayFX::screenRectClear(int, int, int, int)>:
   3c168:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3c16c:	e5904b38 	ldr	r4, [r0, #2872]	; 0xb38
   3c170:	e59d9020 	ldr	r9, [sp, #32]
   3c174:	e0211294 	mla	r1, r4, r2, r1
   3c178:	e5904b40 	ldr	r4, [r0, #2880]	; 0xb40
   3c17c:	e3590000 	cmp	r9, #0
   3c180:	e0844001 	add	r4, r4, r1
   3c184:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3c188:	e1a06000 	mov	r6, r0
   3c18c:	e1a07003 	mov	r7, r3
   3c190:	e3a05000 	mov	r5, #0
   3c194:	e2808d2d 	add	r8, r0, #2880	; 0xb40
   3c198:	e2888004 	add	r8, r8, #4
   3c19c:	e1a00004 	mov	r0, r4
   3c1a0:	e1d810d0 	ldrsb	r1, [r8]
   3c1a4:	e1a02007 	mov	r2, r7
   3c1a8:	ebffb70d 	bl	29de4 <memset>
   3c1ac:	e2855001 	add	r5, r5, #1
   3c1b0:	e5961b38 	ldr	r1, [r6, #2872]	; 0xb38
   3c1b4:	e1590005 	cmp	r9, r5
   3c1b8:	e0844001 	add	r4, r4, r1
   3c1bc:	1afffff6 	bne	3c19c <DisplayFX::screenRectClear(int, int, int, int)+0x34>
   3c1c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003c1c4 <DisplayFX::screenBackground(DISPLAY_FX_COLOUR)>:
   3c1c4:	e5c01b44 	strb	r1, [r0, #2884]	; 0xb44
   3c1c8:	e12fff1e 	bx	lr

0003c1cc <DisplayFX::windowPut(int, int, int, int)>:
   3c1cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c1d0:	e3510004 	cmp	r1, #4
   3c1d4:	e24dd01c 	sub	sp, sp, #28
   3c1d8:	e59d4040 	ldr	r4, [sp, #64]	; 0x40
   3c1dc:	8a000073 	bhi	3c3b0 <DisplayFX::windowPut(int, int, int, int)+0x1e4>
   3c1e0:	e081a181 	add	sl, r1, r1, lsl #3
   3c1e4:	e061a20a 	rsb	sl, r1, sl, lsl #4
   3c1e8:	e1a09003 	mov	r9, r3
   3c1ec:	e7d0310a 	ldrb	r3, [r0, sl, lsl #2]
   3c1f0:	e1a05001 	mov	r5, r1
   3c1f4:	e3530000 	cmp	r3, #0
   3c1f8:	e1a08000 	mov	r8, r0
   3c1fc:	e080a10a 	add	sl, r0, sl, lsl #2
   3c200:	e1a06181 	lsl	r6, r1, #3
   3c204:	0a000069 	beq	3c3b0 <DisplayFX::windowPut(int, int, int, int)+0x1e4>
   3c208:	e59a1014 	ldr	r1, [sl, #20]
   3c20c:	e59a0008 	ldr	r0, [sl, #8]
   3c210:	e3510000 	cmp	r1, #0
   3c214:	e1a07002 	mov	r7, r2
   3c218:	d3a00000 	movle	r0, #0
   3c21c:	da000000 	ble	3c224 <DisplayFX::windowPut(int, int, int, int)+0x58>
   3c220:	eb00038c 	bl	3d058 <__divsi3>
   3c224:	e1570000 	cmp	r7, r0
   3c228:	aa000060 	bge	3c3b0 <DisplayFX::windowPut(int, int, int, int)+0x1e4>
   3c22c:	e59a1018 	ldr	r1, [sl, #24]
   3c230:	e59a0010 	ldr	r0, [sl, #16]
   3c234:	e3510000 	cmp	r1, #0
   3c238:	d3a00000 	movle	r0, #0
   3c23c:	da000000 	ble	3c244 <DisplayFX::windowPut(int, int, int, int)+0x78>
   3c240:	eb000384 	bl	3d058 <__divsi3>
   3c244:	e1590000 	cmp	r9, r0
   3c248:	aa000058 	bge	3c3b0 <DisplayFX::windowPut(int, int, int, int)+0x1e4>
   3c24c:	e086c005 	add	ip, r6, r5
   3c250:	e065c20c 	rsb	ip, r5, ip, lsl #4
   3c254:	e088c10c 	add	ip, r8, ip, lsl #2
   3c258:	e59c3018 	ldr	r3, [ip, #24]
   3c25c:	e59c0014 	ldr	r0, [ip, #20]
   3c260:	e0090993 	mul	r9, r3, r9
   3c264:	e0020790 	mul	r2, r0, r7
   3c268:	e59a1004 	ldr	r1, [sl, #4]
   3c26c:	e59c701c 	ldr	r7, [ip, #28]
   3c270:	e59cb020 	ldr	fp, [ip, #32]
   3c274:	e58d3008 	str	r3, [sp, #8]
   3c278:	e59c300c 	ldr	r3, [ip, #12]
   3c27c:	e0221297 	mla	r2, r7, r2, r1
   3c280:	e029399b 	mla	r9, fp, r9, r3
   3c284:	e5983b38 	ldr	r3, [r8, #2872]	; 0xb38
   3c288:	e59c102c 	ldr	r1, [ip, #44]	; 0x2c
   3c28c:	e0222993 	mla	r2, r3, r9, r2
   3c290:	e59ce028 	ldr	lr, [ip, #40]	; 0x28
   3c294:	e5989b40 	ldr	r9, [r8, #2880]	; 0xb40
   3c298:	e591c00c 	ldr	ip, [r1, #12]
   3c29c:	e5911010 	ldr	r1, [r1, #16]
   3c2a0:	e0899002 	add	r9, r9, r2
   3c2a4:	e022149c 	mla	r2, ip, r4, r1
   3c2a8:	e37e0001 	cmn	lr, #1
   3c2ac:	e58d2004 	str	r2, [sp, #4]
   3c2b0:	02882d2d 	addeq	r2, r8, #2880	; 0xb40
   3c2b4:	01d220d5 	ldrsbeq	r2, [r2, #5]
   3c2b8:	e58de00c 	str	lr, [sp, #12]
   3c2bc:	058d200c 	streq	r2, [sp, #12]
   3c2c0:	e0862005 	add	r2, r6, r5
   3c2c4:	e0652202 	rsb	r2, r5, r2, lsl #4
   3c2c8:	e0882102 	add	r2, r8, r2, lsl #2
   3c2cc:	e5924024 	ldr	r4, [r2, #36]	; 0x24
   3c2d0:	e3740001 	cmn	r4, #1
   3c2d4:	02882d2d 	addeq	r2, r8, #2880	; 0xb40
   3c2d8:	01d240d4 	ldrsbeq	r4, [r2, #4]
   3c2dc:	e59d2008 	ldr	r2, [sp, #8]
   3c2e0:	e3520000 	cmp	r2, #0
   3c2e4:	da000031 	ble	3c3b0 <DisplayFX::windowPut(int, int, int, int)+0x1e4>
   3c2e8:	e3a02000 	mov	r2, #0
   3c2ec:	e0866005 	add	r6, r6, r5
   3c2f0:	e0655206 	rsb	r5, r5, r6, lsl #4
   3c2f4:	e58d2010 	str	r2, [sp, #16]
   3c2f8:	e0882105 	add	r2, r8, r5, lsl #2
   3c2fc:	e58d2014 	str	r2, [sp, #20]
   3c300:	e6ef4074 	uxtb	r4, r4
   3c304:	e35b0000 	cmp	fp, #0
   3c308:	da00001c 	ble	3c380 <DisplayFX::windowPut(int, int, int, int)+0x1b4>
   3c30c:	e3a0a000 	mov	sl, #0
   3c310:	e5dd500c 	ldrb	r5, [sp, #12]
   3c314:	e3500000 	cmp	r0, #0
   3c318:	da000014 	ble	3c370 <DisplayFX::windowPut(int, int, int, int)+0x1a4>
   3c31c:	e1a03009 	mov	r3, r9
   3c320:	e3a01080 	mov	r1, #128	; 0x80
   3c324:	e3a06000 	mov	r6, #0
   3c328:	e59dc004 	ldr	ip, [sp, #4]
   3c32c:	e3570000 	cmp	r7, #0
   3c330:	da000007 	ble	3c354 <DisplayFX::windowPut(int, int, int, int)+0x188>
   3c334:	e083e007 	add	lr, r3, r7
   3c338:	e5dc2000 	ldrb	r2, [ip]
   3c33c:	e1120001 	tst	r2, r1
   3c340:	11a02005 	movne	r2, r5
   3c344:	01a02004 	moveq	r2, r4
   3c348:	e4c32001 	strb	r2, [r3], #1
   3c34c:	e153000e 	cmp	r3, lr
   3c350:	1afffff8 	bne	3c338 <DisplayFX::windowPut(int, int, int, int)+0x16c>
   3c354:	e1b010c1 	asrs	r1, r1, #1
   3c358:	e2866001 	add	r6, r6, #1
   3c35c:	03a01080 	moveq	r1, #128	; 0x80
   3c360:	028cc001 	addeq	ip, ip, #1
   3c364:	e1500006 	cmp	r0, r6
   3c368:	1affffef 	bne	3c32c <DisplayFX::windowPut(int, int, int, int)+0x160>
   3c36c:	e5983b38 	ldr	r3, [r8, #2872]	; 0xb38
   3c370:	e28aa001 	add	sl, sl, #1
   3c374:	e15b000a 	cmp	fp, sl
   3c378:	e0899003 	add	r9, r9, r3
   3c37c:	1affffe4 	bne	3c314 <DisplayFX::windowPut(int, int, int, int)+0x148>
   3c380:	e59d2014 	ldr	r2, [sp, #20]
   3c384:	e59d1010 	ldr	r1, [sp, #16]
   3c388:	e592202c 	ldr	r2, [r2, #44]	; 0x2c
   3c38c:	e59dc008 	ldr	ip, [sp, #8]
   3c390:	e2811001 	add	r1, r1, #1
   3c394:	e5922008 	ldr	r2, [r2, #8]
   3c398:	e58d1010 	str	r1, [sp, #16]
   3c39c:	e15c0001 	cmp	ip, r1
   3c3a0:	e59d1004 	ldr	r1, [sp, #4]
   3c3a4:	e0812002 	add	r2, r1, r2
   3c3a8:	e58d2004 	str	r2, [sp, #4]
   3c3ac:	1affffd4 	bne	3c304 <DisplayFX::windowPut(int, int, int, int)+0x138>
   3c3b0:	e28dd01c 	add	sp, sp, #28
   3c3b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003c3b8 <DisplayFX::windowPut(int, int, int, char const*)>:
   3c3b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3c3bc:	e3510004 	cmp	r1, #4
   3c3c0:	e24dd008 	sub	sp, sp, #8
   3c3c4:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   3c3c8:	8a00001c 	bhi	3c440 <DisplayFX::windowPut(int, int, int, char const*)+0x88>
   3c3cc:	e1d6a0d0 	ldrsb	sl, [r6]
   3c3d0:	e35a0000 	cmp	sl, #0
   3c3d4:	0a000019 	beq	3c440 <DisplayFX::windowPut(int, int, int, char const*)+0x88>
   3c3d8:	e0815181 	add	r5, r1, r1, lsl #3
   3c3dc:	e0615205 	rsb	r5, r1, r5, lsl #4
   3c3e0:	e1a07001 	mov	r7, r1
   3c3e4:	e1a08000 	mov	r8, r0
   3c3e8:	e1a04002 	mov	r4, r2
   3c3ec:	e1a09003 	mov	r9, r3
   3c3f0:	e0805105 	add	r5, r0, r5, lsl #2
   3c3f4:	ea000009 	b	3c420 <DisplayFX::windowPut(int, int, int, char const*)+0x68>
   3c3f8:	e1a02004 	mov	r2, r4
   3c3fc:	e58da000 	str	sl, [sp]
   3c400:	e1a03009 	mov	r3, r9
   3c404:	e1a01007 	mov	r1, r7
   3c408:	e1a00008 	mov	r0, r8
   3c40c:	ebffff6e 	bl	3c1cc <DisplayFX::windowPut(int, int, int, int)>
   3c410:	e1f6a0d1 	ldrsb	sl, [r6, #1]!
   3c414:	e2844001 	add	r4, r4, #1
   3c418:	e35a0000 	cmp	sl, #0
   3c41c:	0a000007 	beq	3c440 <DisplayFX::windowPut(int, int, int, char const*)+0x88>
   3c420:	e5951014 	ldr	r1, [r5, #20]
   3c424:	e5950008 	ldr	r0, [r5, #8]
   3c428:	e3510000 	cmp	r1, #0
   3c42c:	d3a00000 	movle	r0, #0
   3c430:	da000000 	ble	3c438 <DisplayFX::windowPut(int, int, int, char const*)+0x80>
   3c434:	eb000307 	bl	3d058 <__divsi3>
   3c438:	e1500004 	cmp	r0, r4
   3c43c:	caffffed 	bgt	3c3f8 <DisplayFX::windowPut(int, int, int, char const*)+0x40>
   3c440:	e28dd008 	add	sp, sp, #8
   3c444:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003c448 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>:
   3c448:	e3510004 	cmp	r1, #4
   3c44c:	90813181 	addls	r3, r1, r1, lsl #3
   3c450:	90611203 	rsbls	r1, r1, r3, lsl #4
   3c454:	90801101 	addls	r1, r0, r1, lsl #2
   3c458:	95812028 	strls	r2, [r1, #40]	; 0x28
   3c45c:	e12fff1e 	bx	lr

0003c460 <DisplayFX::windowBackground(int, DISPLAY_FX_COLOUR)>:
   3c460:	e3510004 	cmp	r1, #4
   3c464:	90813181 	addls	r3, r1, r1, lsl #3
   3c468:	90611203 	rsbls	r1, r1, r3, lsl #4
   3c46c:	90801101 	addls	r1, r0, r1, lsl #2
   3c470:	95812024 	strls	r2, [r1, #36]	; 0x24
   3c474:	e12fff1e 	bx	lr

0003c478 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>:
   3c478:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3c47c:	e081e181 	add	lr, r1, r1, lsl #3
   3c480:	e061e20e 	rsb	lr, r1, lr, lsl #4
   3c484:	e080e10e 	add	lr, r0, lr, lsl #2
   3c488:	e59e600c 	ldr	r6, [lr, #12]
   3c48c:	e59e501c 	ldr	r5, [lr, #28]
   3c490:	e59ec020 	ldr	ip, [lr, #32]
   3c494:	e59e4004 	ldr	r4, [lr, #4]
   3c498:	e023639c 	mla	r3, ip, r3, r6
   3c49c:	e0244295 	mla	r4, r5, r2, r4
   3c4a0:	e5902b38 	ldr	r2, [r0, #2872]	; 0xb38
   3c4a4:	e59ee028 	ldr	lr, [lr, #40]	; 0x28
   3c4a8:	e0234392 	mla	r3, r2, r3, r4
   3c4ac:	e5904b40 	ldr	r4, [r0, #2880]	; 0xb40
   3c4b0:	e37e0001 	cmn	lr, #1
   3c4b4:	e1dd61dc 	ldrsb	r6, [sp, #28]
   3c4b8:	e0844003 	add	r4, r4, r3
   3c4bc:	02803d2d 	addeq	r3, r0, #2880	; 0xb40
   3c4c0:	01d3e0d5 	ldrsbeq	lr, [r3, #5]
   3c4c4:	e3760001 	cmn	r6, #1
   3c4c8:	11a0e006 	movne	lr, r6
   3c4cc:	e1a07181 	lsl	r7, r1, #3
   3c4d0:	e0873001 	add	r3, r7, r1
   3c4d4:	e0613203 	rsb	r3, r1, r3, lsl #4
   3c4d8:	e0803103 	add	r3, r0, r3, lsl #2
   3c4dc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   3c4e0:	e59d8018 	ldr	r8, [sp, #24]
   3c4e4:	e3730001 	cmn	r3, #1
   3c4e8:	02803d2d 	addeq	r3, r0, #2880	; 0xb40
   3c4ec:	01d330d4 	ldrsbeq	r3, [r3, #4]
   3c4f0:	e3580000 	cmp	r8, #0
   3c4f4:	16efe07e 	uxtbne	lr, lr
   3c4f8:	06efe073 	uxtbeq	lr, r3
   3c4fc:	e2156003 	ands	r6, r5, #3
   3c500:	1a000016 	bne	3c560 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xe8>
   3c504:	e1a0380e 	lsl	r3, lr, #16
   3c508:	e0833c0e 	add	r3, r3, lr, lsl #24
   3c50c:	e083340e 	add	r3, r3, lr, lsl #8
   3c510:	e35c0000 	cmp	ip, #0
   3c514:	e083e00e 	add	lr, r3, lr
   3c518:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
   3c51c:	e3550000 	cmp	r5, #0
   3c520:	e2850003 	add	r0, r5, #3
   3c524:	a1a00005 	movge	r0, r5
   3c528:	e1a00140 	asr	r0, r0, #2
   3c52c:	e3550003 	cmp	r5, #3
   3c530:	e1a01004 	mov	r1, r4
   3c534:	c3a03000 	movgt	r3, #0
   3c538:	da000003 	ble	3c54c <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xd4>
   3c53c:	e2833001 	add	r3, r3, #1
   3c540:	e1530000 	cmp	r3, r0
   3c544:	e481e004 	str	lr, [r1], #4
   3c548:	bafffffb 	blt	3c53c <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xc4>
   3c54c:	e2866001 	add	r6, r6, #1
   3c550:	e156000c 	cmp	r6, ip
   3c554:	e0844002 	add	r4, r4, r2
   3c558:	1afffff3 	bne	3c52c <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xb4>
   3c55c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3c560:	e35c0000 	cmp	ip, #0
   3c564:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
   3c568:	e3a06000 	mov	r6, #0
   3c56c:	e087c001 	add	ip, r7, r1
   3c570:	e061120c 	rsb	r1, r1, ip, lsl #4
   3c574:	e080c101 	add	ip, r0, r1, lsl #2
   3c578:	e3550000 	cmp	r5, #0
   3c57c:	c3a03000 	movgt	r3, #0
   3c580:	e0224296 	mla	r2, r6, r2, r4
   3c584:	da000004 	ble	3c59c <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x124>
   3c588:	e4c2e001 	strb	lr, [r2], #1
   3c58c:	e59c101c 	ldr	r1, [ip, #28]
   3c590:	e2833001 	add	r3, r3, #1
   3c594:	e1510003 	cmp	r1, r3
   3c598:	cafffffa 	bgt	3c588 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x110>
   3c59c:	e59c3020 	ldr	r3, [ip, #32]
   3c5a0:	e2866001 	add	r6, r6, #1
   3c5a4:	e1530006 	cmp	r3, r6
   3c5a8:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
   3c5ac:	e5902b38 	ldr	r2, [r0, #2872]	; 0xb38
   3c5b0:	e59c501c 	ldr	r5, [ip, #28]
   3c5b4:	eaffffef 	b	3c578 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x100>

0003c5b8 <DisplayFX::getFramebuffer(int, FrameBufferInfo&)>:
   3c5b8:	e92d4010 	push	{r4, lr}
   3c5bc:	e3a0e001 	mov	lr, #1
   3c5c0:	e590cb30 	ldr	ip, [r0, #2864]	; 0xb30
   3c5c4:	e5903b40 	ldr	r3, [r0, #2880]	; 0xb40
   3c5c8:	e582c004 	str	ip, [r2, #4]
   3c5cc:	e590cb30 	ldr	ip, [r0, #2864]	; 0xb30
   3c5d0:	e0814181 	add	r4, r1, r1, lsl #3
   3c5d4:	e582c008 	str	ip, [r2, #8]
   3c5d8:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3c5dc:	e0611204 	rsb	r1, r1, r4, lsl #4
   3c5e0:	e582c00c 	str	ip, [r2, #12]
   3c5e4:	e0800101 	add	r0, r0, r1, lsl #2
   3c5e8:	e5901004 	ldr	r1, [r0, #4]
   3c5ec:	e590400c 	ldr	r4, [r0, #12]
   3c5f0:	e5823000 	str	r3, [r2]
   3c5f4:	e02c1c94 	mla	ip, r4, ip, r1
   3c5f8:	e5901008 	ldr	r1, [r0, #8]
   3c5fc:	e083300c 	add	r3, r3, ip
   3c600:	e5821014 	str	r1, [r2, #20]
   3c604:	e5901010 	ldr	r1, [r0, #16]
   3c608:	e5823010 	str	r3, [r2, #16]
   3c60c:	e5821018 	str	r1, [r2, #24]
   3c610:	e582e01c 	str	lr, [r2, #28]
   3c614:	e8bd8010 	pop	{r4, pc}

0003c618 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>:
   3c618:	e3510004 	cmp	r1, #4
   3c61c:	812fff1e 	bxhi	lr
   3c620:	eafffd87 	b	3bc44 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]>

0003c624 <DisplayFX::windowClear(int)>:
   3c624:	e3510004 	cmp	r1, #4
   3c628:	812fff1e 	bxhi	lr
   3c62c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3c630:	e0813181 	add	r3, r1, r1, lsl #3
   3c634:	e0611203 	rsb	r1, r1, r3, lsl #4
   3c638:	e7d03101 	ldrb	r3, [r0, r1, lsl #2]
   3c63c:	e1a06000 	mov	r6, r0
   3c640:	e3530000 	cmp	r3, #0
   3c644:	e0801101 	add	r1, r0, r1, lsl #2
   3c648:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3c64c:	e591400c 	ldr	r4, [r1, #12]
   3c650:	e5902b38 	ldr	r2, [r0, #2872]	; 0xb38
   3c654:	e5913004 	ldr	r3, [r1, #4]
   3c658:	e5918010 	ldr	r8, [r1, #16]
   3c65c:	e0233492 	mla	r3, r2, r4, r3
   3c660:	e5904b40 	ldr	r4, [r0, #2880]	; 0xb40
   3c664:	e3580000 	cmp	r8, #0
   3c668:	e5919008 	ldr	r9, [r1, #8]
   3c66c:	e0844003 	add	r4, r4, r3
   3c670:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3c674:	e3a05000 	mov	r5, #0
   3c678:	e2807d2d 	add	r7, r0, #2880	; 0xb40
   3c67c:	e2877004 	add	r7, r7, #4
   3c680:	e1a00004 	mov	r0, r4
   3c684:	e1a02009 	mov	r2, r9
   3c688:	e1d710d0 	ldrsb	r1, [r7]
   3c68c:	ebffb5d4 	bl	29de4 <memset>
   3c690:	e2855001 	add	r5, r5, #1
   3c694:	e5963b38 	ldr	r3, [r6, #2872]	; 0xb38
   3c698:	e1580005 	cmp	r8, r5
   3c69c:	e0844003 	add	r4, r4, r3
   3c6a0:	1afffff6 	bne	3c680 <DisplayFX::windowClear(int)+0x5c>
   3c6a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003c6a8 <DisplayFX::windowGetPFB(int, int, int)>:
   3c6a8:	e081c181 	add	ip, r1, r1, lsl #3
   3c6ac:	e061120c 	rsb	r1, r1, ip, lsl #4
   3c6b0:	e0801101 	add	r1, r0, r1, lsl #2
   3c6b4:	e92d4030 	push	{r4, r5, lr}
   3c6b8:	e591c018 	ldr	ip, [r1, #24]
   3c6bc:	e591e014 	ldr	lr, [r1, #20]
   3c6c0:	e003039c 	mul	r3, ip, r3
   3c6c4:	e002029e 	mul	r2, lr, r2
   3c6c8:	e5915020 	ldr	r5, [r1, #32]
   3c6cc:	e591c00c 	ldr	ip, [r1, #12]
   3c6d0:	e591401c 	ldr	r4, [r1, #28]
   3c6d4:	e591e004 	ldr	lr, [r1, #4]
   3c6d8:	e02cc395 	mla	ip, r5, r3, ip
   3c6dc:	e022e294 	mla	r2, r4, r2, lr
   3c6e0:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3c6e4:	e5900b40 	ldr	r0, [r0, #2880]	; 0xb40
   3c6e8:	e02c2c93 	mla	ip, r3, ip, r2
   3c6ec:	e080000c 	add	r0, r0, ip
   3c6f0:	e8bd8030 	pop	{r4, r5, pc}

0003c6f4 <DisplayFX::screenGetPFBXY(int, int)>:
   3c6f4:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3c6f8:	e5900b40 	ldr	r0, [r0, #2880]	; 0xb40
   3c6fc:	e0211293 	mla	r1, r3, r2, r1
   3c700:	e0800001 	add	r0, r0, r1
   3c704:	e12fff1e 	bx	lr

0003c708 <DisplayFX::windowGetPFBXY(int, int, int)>:
   3c708:	e081c181 	add	ip, r1, r1, lsl #3
   3c70c:	e061120c 	rsb	r1, r1, ip, lsl #4
   3c710:	e0801101 	add	r1, r0, r1, lsl #2
   3c714:	e92d4010 	push	{r4, lr}
   3c718:	e591c01c 	ldr	ip, [r1, #28]
   3c71c:	e5914020 	ldr	r4, [r1, #32]
   3c720:	e591e00c 	ldr	lr, [r1, #12]
   3c724:	e5911004 	ldr	r1, [r1, #4]
   3c728:	e023e394 	mla	r3, r4, r3, lr
   3c72c:	e022129c 	mla	r2, ip, r2, r1
   3c730:	e5901b38 	ldr	r1, [r0, #2872]	; 0xb38
   3c734:	e5900b40 	ldr	r0, [r0, #2880]	; 0xb40
   3c738:	e0232391 	mla	r3, r1, r3, r2
   3c73c:	e0800003 	add	r0, r0, r3
   3c740:	e8bd8010 	pop	{r4, pc}

0003c744 <DisplayFX::consoleForeground(DISPLAY_FX_COLOUR)>:
   3c744:	e5903b48 	ldr	r3, [r0, #2888]	; 0xb48
   3c748:	e0832183 	add	r2, r3, r3, lsl #3
   3c74c:	e0633202 	rsb	r3, r3, r2, lsl #4
   3c750:	e0800103 	add	r0, r0, r3, lsl #2
   3c754:	e5801028 	str	r1, [r0, #40]	; 0x28
   3c758:	e12fff1e 	bx	lr

0003c75c <DisplayFX::consoleGetWidth()>:
   3c75c:	e5903b48 	ldr	r3, [r0, #2888]	; 0xb48
   3c760:	e0832183 	add	r2, r3, r3, lsl #3
   3c764:	e0633202 	rsb	r3, r3, r2, lsl #4
   3c768:	e0800103 	add	r0, r0, r3, lsl #2
   3c76c:	e5901014 	ldr	r1, [r0, #20]
   3c770:	e5900008 	ldr	r0, [r0, #8]
   3c774:	e3510000 	cmp	r1, #0
   3c778:	da000002 	ble	3c788 <DisplayFX::consoleGetWidth()+0x2c>
   3c77c:	e92d4010 	push	{r4, lr}
   3c780:	eb000234 	bl	3d058 <__divsi3>
   3c784:	e8bd8010 	pop	{r4, pc}
   3c788:	e3a00000 	mov	r0, #0
   3c78c:	e12fff1e 	bx	lr

0003c790 <DisplayFX::consoleSetWindow(int)>:
   3c790:	e3510004 	cmp	r1, #4
   3c794:	95801b48 	strls	r1, [r0, #2888]	; 0xb48
   3c798:	e12fff1e 	bx	lr

0003c79c <DisplayFX::cursorCheck()>:
   3c79c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3c7a0:	e5905b48 	ldr	r5, [r0, #2888]	; 0xb48
   3c7a4:	e1a06000 	mov	r6, r0
   3c7a8:	e0854185 	add	r4, r5, r5, lsl #3
   3c7ac:	e0654204 	rsb	r4, r5, r4, lsl #4
   3c7b0:	e0804104 	add	r4, r0, r4, lsl #2
   3c7b4:	e5941014 	ldr	r1, [r4, #20]
   3c7b8:	e5940008 	ldr	r0, [r4, #8]
   3c7bc:	e3510000 	cmp	r1, #0
   3c7c0:	d3a00000 	movle	r0, #0
   3c7c4:	e5948034 	ldr	r8, [r4, #52]	; 0x34
   3c7c8:	e1a07185 	lsl	r7, r5, #3
   3c7cc:	da000000 	ble	3c7d4 <DisplayFX::cursorCheck()+0x38>
   3c7d0:	eb000220 	bl	3d058 <__divsi3>
   3c7d4:	e1580000 	cmp	r8, r0
   3c7d8:	ba000007 	blt	3c7fc <DisplayFX::cursorCheck()+0x60>
   3c7dc:	e3a01000 	mov	r1, #0
   3c7e0:	e0873005 	add	r3, r7, r5
   3c7e4:	e0653203 	rsb	r3, r5, r3, lsl #4
   3c7e8:	e0863103 	add	r3, r6, r3, lsl #2
   3c7ec:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   3c7f0:	e5831034 	str	r1, [r3, #52]	; 0x34
   3c7f4:	e2822001 	add	r2, r2, #1
   3c7f8:	e5832030 	str	r2, [r3, #48]	; 0x30
   3c7fc:	e5941018 	ldr	r1, [r4, #24]
   3c800:	e0873005 	add	r3, r7, r5
   3c804:	e0653203 	rsb	r3, r5, r3, lsl #4
   3c808:	e0863103 	add	r3, r6, r3, lsl #2
   3c80c:	e3510000 	cmp	r1, #0
   3c810:	e5940010 	ldr	r0, [r4, #16]
   3c814:	e5938030 	ldr	r8, [r3, #48]	; 0x30
   3c818:	d3a00000 	movle	r0, #0
   3c81c:	da000000 	ble	3c824 <DisplayFX::cursorCheck()+0x88>
   3c820:	eb00020c 	bl	3d058 <__divsi3>
   3c824:	e1580000 	cmp	r8, r0
   3c828:	b8bd81f0 	poplt	{r4, r5, r6, r7, r8, pc}
   3c82c:	e0877005 	add	r7, r7, r5
   3c830:	e0657207 	rsb	r7, r5, r7, lsl #4
   3c834:	e0867107 	add	r7, r6, r7, lsl #2
   3c838:	e2488001 	sub	r8, r8, #1
   3c83c:	e3550004 	cmp	r5, #4
   3c840:	e5878030 	str	r8, [r7, #48]	; 0x30
   3c844:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   3c848:	e1a01005 	mov	r1, r5
   3c84c:	e1a00006 	mov	r0, r6
   3c850:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3c854:	e3a02001 	mov	r2, #1
   3c858:	eafffc9d 	b	3bad4 <DisplayFX::windowScroll(int, int) [clone .part.0]>

0003c85c <DisplayFX::consolePut(int)>:
   3c85c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3c860:	e2413008 	sub	r3, r1, #8
   3c864:	e1a04000 	mov	r4, r0
   3c868:	e24dd00c 	sub	sp, sp, #12
   3c86c:	e3530005 	cmp	r3, #5
   3c870:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   3c874:	ea00000d 	b	3c8b0 <DisplayFX::consolePut(int)+0x54>
   3c878:	0003c900 	.word	0x0003c900
   3c87c:	0003c93c 	.word	0x0003c93c
   3c880:	0003c9b8 	.word	0x0003c9b8
   3c884:	0003c8b0 	.word	0x0003c8b0
   3c888:	0003c8b0 	.word	0x0003c8b0
   3c88c:	0003c890 	.word	0x0003c890
   3c890:	e3a02000 	mov	r2, #0
   3c894:	e5903b48 	ldr	r3, [r0, #2888]	; 0xb48
   3c898:	e0831183 	add	r1, r3, r3, lsl #3
   3c89c:	e0633201 	rsb	r3, r3, r1, lsl #4
   3c8a0:	e0804103 	add	r4, r0, r3, lsl #2
   3c8a4:	e5842034 	str	r2, [r4, #52]	; 0x34
   3c8a8:	e28dd00c 	add	sp, sp, #12
   3c8ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3c8b0:	e1a0c001 	mov	ip, r1
   3c8b4:	e5901b48 	ldr	r1, [r0, #2888]	; 0xb48
   3c8b8:	e0812181 	add	r2, r1, r1, lsl #3
   3c8bc:	e0612202 	rsb	r2, r1, r2, lsl #4
   3c8c0:	e0802102 	add	r2, r0, r2, lsl #2
   3c8c4:	e5923030 	ldr	r3, [r2, #48]	; 0x30
   3c8c8:	e5922034 	ldr	r2, [r2, #52]	; 0x34
   3c8cc:	e58dc000 	str	ip, [sp]
   3c8d0:	ebfffe3d 	bl	3c1cc <DisplayFX::windowPut(int, int, int, int)>
   3c8d4:	e1a00004 	mov	r0, r4
   3c8d8:	e5943b48 	ldr	r3, [r4, #2888]	; 0xb48
   3c8dc:	e0832183 	add	r2, r3, r3, lsl #3
   3c8e0:	e0633202 	rsb	r3, r3, r2, lsl #4
   3c8e4:	e0844103 	add	r4, r4, r3, lsl #2
   3c8e8:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   3c8ec:	e2833001 	add	r3, r3, #1
   3c8f0:	e5843034 	str	r3, [r4, #52]	; 0x34
   3c8f4:	e28dd00c 	add	sp, sp, #12
   3c8f8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   3c8fc:	eaffffa6 	b	3c79c <DisplayFX::cursorCheck()>
   3c900:	e5901b48 	ldr	r1, [r0, #2888]	; 0xb48
   3c904:	e0810181 	add	r0, r1, r1, lsl #3
   3c908:	e0610200 	rsb	r0, r1, r0, lsl #4
   3c90c:	e0840100 	add	r0, r4, r0, lsl #2
   3c910:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   3c914:	e3520000 	cmp	r2, #0
   3c918:	daffffe2 	ble	3c8a8 <DisplayFX::consolePut(int)+0x4c>
   3c91c:	e3a0c020 	mov	ip, #32
   3c920:	e2422001 	sub	r2, r2, #1
   3c924:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3c928:	e5802034 	str	r2, [r0, #52]	; 0x34
   3c92c:	e1a00004 	mov	r0, r4
   3c930:	e58dc000 	str	ip, [sp]
   3c934:	ebfffe24 	bl	3c1cc <DisplayFX::windowPut(int, int, int, int)>
   3c938:	eaffffda 	b	3c8a8 <DisplayFX::consolePut(int)+0x4c>
   3c93c:	e5905b48 	ldr	r5, [r0, #2888]	; 0xb48
   3c940:	e0853185 	add	r3, r5, r5, lsl #3
   3c944:	e0653203 	rsb	r3, r5, r3, lsl #4
   3c948:	e0803103 	add	r3, r0, r3, lsl #2
   3c94c:	e5936034 	ldr	r6, [r3, #52]	; 0x34
   3c950:	e5931014 	ldr	r1, [r3, #20]
   3c954:	e2862001 	add	r2, r6, #1
   3c958:	e272c000 	rsbs	ip, r2, #0
   3c95c:	e20cc007 	and	ip, ip, #7
   3c960:	e2020007 	and	r0, r2, #7
   3c964:	e2866009 	add	r6, r6, #9
   3c968:	526c0000 	rsbpl	r0, ip, #0
   3c96c:	e3510000 	cmp	r1, #0
   3c970:	e0466000 	sub	r6, r6, r0
   3c974:	e5832034 	str	r2, [r3, #52]	; 0x34
   3c978:	e5930008 	ldr	r0, [r3, #8]
   3c97c:	e1a07185 	lsl	r7, r5, #3
   3c980:	d3e00000 	mvnle	r0, #0
   3c984:	da000001 	ble	3c990 <DisplayFX::consolePut(int)+0x134>
   3c988:	eb0001b2 	bl	3d058 <__divsi3>
   3c98c:	e2400001 	sub	r0, r0, #1
   3c990:	e1560000 	cmp	r6, r0
   3c994:	a1a06000 	movge	r6, r0
   3c998:	e1a00004 	mov	r0, r4
   3c99c:	e0877005 	add	r7, r7, r5
   3c9a0:	e0655207 	rsb	r5, r5, r7, lsl #4
   3c9a4:	e0845105 	add	r5, r4, r5, lsl #2
   3c9a8:	e5856034 	str	r6, [r5, #52]	; 0x34
   3c9ac:	e28dd00c 	add	sp, sp, #12
   3c9b0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   3c9b4:	eaffff78 	b	3c79c <DisplayFX::cursorCheck()>
   3c9b8:	e3a02000 	mov	r2, #0
   3c9bc:	e5903b48 	ldr	r3, [r0, #2888]	; 0xb48
   3c9c0:	e0831183 	add	r1, r3, r3, lsl #3
   3c9c4:	e0633201 	rsb	r3, r3, r1, lsl #4
   3c9c8:	e0804103 	add	r4, r0, r3, lsl #2
   3c9cc:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3c9d0:	e5842034 	str	r2, [r4, #52]	; 0x34
   3c9d4:	e2833001 	add	r3, r3, #1
   3c9d8:	e5843030 	str	r3, [r4, #48]	; 0x30
   3c9dc:	e28dd00c 	add	sp, sp, #12
   3c9e0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   3c9e4:	eaffff6c 	b	3c79c <DisplayFX::cursorCheck()>

0003c9e8 <DisplayFX::consolePut(char const*)>:
   3c9e8:	e92d4070 	push	{r4, r5, r6, lr}
   3c9ec:	e1a04001 	mov	r4, r1
   3c9f0:	e1d110d0 	ldrsb	r1, [r1]
   3c9f4:	e3510000 	cmp	r1, #0
   3c9f8:	08bd8070 	popeq	{r4, r5, r6, pc}
   3c9fc:	e1a05000 	mov	r5, r0
   3ca00:	e1a00005 	mov	r0, r5
   3ca04:	ebffff94 	bl	3c85c <DisplayFX::consolePut(int)>
   3ca08:	e1f410d1 	ldrsb	r1, [r4, #1]!
   3ca0c:	e3510000 	cmp	r1, #0
   3ca10:	1afffffa 	bne	3ca00 <DisplayFX::consolePut(char const*)+0x18>
   3ca14:	e8bd8070 	pop	{r4, r5, r6, pc}

0003ca18 <DisplayFX::consolePut(char const*, unsigned int)>:
   3ca18:	e3520000 	cmp	r2, #0
   3ca1c:	012fff1e 	bxeq	lr
   3ca20:	e92d4070 	push	{r4, r5, r6, lr}
   3ca24:	e1a06000 	mov	r6, r0
   3ca28:	e0812002 	add	r2, r1, r2
   3ca2c:	e2425001 	sub	r5, r2, #1
   3ca30:	e2414001 	sub	r4, r1, #1
   3ca34:	e1f410d1 	ldrsb	r1, [r4, #1]!
   3ca38:	e1a00006 	mov	r0, r6
   3ca3c:	ebffff86 	bl	3c85c <DisplayFX::consolePut(int)>
   3ca40:	e1540005 	cmp	r4, r5
   3ca44:	1afffffa 	bne	3ca34 <DisplayFX::consolePut(char const*, unsigned int)+0x1c>
   3ca48:	e8bd8070 	pop	{r4, r5, r6, pc}

0003ca4c <DisplayFX::windowScroll(int, int)>:
   3ca4c:	e16f3f12 	clz	r3, r2
   3ca50:	e1a032a3 	lsr	r3, r3, #5
   3ca54:	e3510004 	cmp	r1, #4
   3ca58:	83833001 	orrhi	r3, r3, #1
   3ca5c:	e3530000 	cmp	r3, #0
   3ca60:	112fff1e 	bxne	lr
   3ca64:	eafffc1a 	b	3bad4 <DisplayFX::windowScroll(int, int) [clone .part.0]>

0003ca68 <DisplayFX::drawHorizontal(int, int, int, int)>:
   3ca68:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3ca6c:	e5900b40 	ldr	r0, [r0, #2880]	; 0xb40
   3ca70:	e022129c 	mla	r2, ip, r2, r1
   3ca74:	e3530000 	cmp	r3, #0
   3ca78:	e0802002 	add	r2, r0, r2
   3ca7c:	d12fff1e 	bxle	lr
   3ca80:	e59d1000 	ldr	r1, [sp]
   3ca84:	e0823003 	add	r3, r2, r3
   3ca88:	e6ef1071 	uxtb	r1, r1
   3ca8c:	e4c21001 	strb	r1, [r2], #1
   3ca90:	e1530002 	cmp	r3, r2
   3ca94:	1afffffc 	bne	3ca8c <DisplayFX::drawHorizontal(int, int, int, int)+0x24>
   3ca98:	e12fff1e 	bx	lr

0003ca9c <DisplayFX::drawVertical(int, int, int, int)>:
   3ca9c:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3caa0:	e3530000 	cmp	r3, #0
   3caa4:	e022129c 	mla	r2, ip, r2, r1
   3caa8:	e590cb40 	ldr	ip, [r0, #2880]	; 0xb40
   3caac:	e08c2002 	add	r2, ip, r2
   3cab0:	d12fff1e 	bxle	lr
   3cab4:	e3a01000 	mov	r1, #0
   3cab8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3cabc:	e59dc004 	ldr	ip, [sp, #4]
   3cac0:	e6efe07c 	uxtb	lr, ip
   3cac4:	e5c2e000 	strb	lr, [r2]
   3cac8:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3cacc:	e2811001 	add	r1, r1, #1
   3cad0:	e1530001 	cmp	r3, r1
   3cad4:	e082200c 	add	r2, r2, ip
   3cad8:	1afffff9 	bne	3cac4 <DisplayFX::drawVertical(int, int, int, int)+0x28>
   3cadc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003cae0 <DisplayFX::screenReadCell(int, int, int, unsigned char*)>:
   3cae0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cae4:	e3510004 	cmp	r1, #4
   3cae8:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   3caec:	88bd8ff8 	pophi	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3caf0:	e1a06001 	mov	r6, r1
   3caf4:	e0818181 	add	r8, r1, r1, lsl #3
   3caf8:	e0618208 	rsb	r8, r1, r8, lsl #4
   3cafc:	e080a108 	add	sl, r0, r8, lsl #2
   3cb00:	e59a1014 	ldr	r1, [sl, #20]
   3cb04:	e1a05000 	mov	r5, r0
   3cb08:	e3510000 	cmp	r1, #0
   3cb0c:	e59a0008 	ldr	r0, [sl, #8]
   3cb10:	e1a09002 	mov	r9, r2
   3cb14:	e1a07003 	mov	r7, r3
   3cb18:	d3a00000 	movle	r0, #0
   3cb1c:	e1a08108 	lsl	r8, r8, #2
   3cb20:	e1a0b186 	lsl	fp, r6, #3
   3cb24:	da000000 	ble	3cb2c <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x4c>
   3cb28:	eb00014a 	bl	3d058 <__divsi3>
   3cb2c:	e1590000 	cmp	r9, r0
   3cb30:	a8bd8ff8 	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cb34:	e59a1018 	ldr	r1, [sl, #24]
   3cb38:	e59a0010 	ldr	r0, [sl, #16]
   3cb3c:	e3510000 	cmp	r1, #0
   3cb40:	d3a00000 	movle	r0, #0
   3cb44:	da000000 	ble	3cb4c <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x6c>
   3cb48:	eb000142 	bl	3d058 <__divsi3>
   3cb4c:	e1570000 	cmp	r7, r0
   3cb50:	a8bd8ff8 	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cb54:	e7d53008 	ldrb	r3, [r5, r8]
   3cb58:	e3530000 	cmp	r3, #0
   3cb5c:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cb60:	e08bc006 	add	ip, fp, r6
   3cb64:	e066c20c 	rsb	ip, r6, ip, lsl #4
   3cb68:	e085c10c 	add	ip, r5, ip, lsl #2
   3cb6c:	e59c1014 	ldr	r1, [ip, #20]
   3cb70:	e59c3018 	ldr	r3, [ip, #24]
   3cb74:	e0010991 	mul	r1, r1, r9
   3cb78:	e0020793 	mul	r2, r3, r7
   3cb7c:	e59a0004 	ldr	r0, [sl, #4]
   3cb80:	e59c601c 	ldr	r6, [ip, #28]
   3cb84:	e59ce020 	ldr	lr, [ip, #32]
   3cb88:	e0210196 	mla	r1, r6, r1, r0
   3cb8c:	e59c000c 	ldr	r0, [ip, #12]
   3cb90:	e3530000 	cmp	r3, #0
   3cb94:	e022029e 	mla	r2, lr, r2, r0
   3cb98:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3cb9c:	e5950b40 	ldr	r0, [r5, #2880]	; 0xb40
   3cba0:	e0221293 	mla	r2, r3, r2, r1
   3cba4:	e0800002 	add	r0, r0, r2
   3cba8:	d8bd8ff8 	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cbac:	e3a07000 	mov	r7, #0
   3cbb0:	e35e0000 	cmp	lr, #0
   3cbb4:	da000019 	ble	3cc20 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x140>
   3cbb8:	e3a06000 	mov	r6, #0
   3cbbc:	e59c2014 	ldr	r2, [ip, #20]
   3cbc0:	e3520000 	cmp	r2, #0
   3cbc4:	da000010 	ble	3cc0c <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x12c>
   3cbc8:	e1a02000 	mov	r2, r0
   3cbcc:	e3a0e000 	mov	lr, #0
   3cbd0:	e59c301c 	ldr	r3, [ip, #28]
   3cbd4:	e3530000 	cmp	r3, #0
   3cbd8:	da000006 	ble	3cbf8 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x118>
   3cbdc:	e3a03000 	mov	r3, #0
   3cbe0:	e4d21001 	ldrb	r1, [r2], #1
   3cbe4:	e2833001 	add	r3, r3, #1
   3cbe8:	e4c41001 	strb	r1, [r4], #1
   3cbec:	e59c101c 	ldr	r1, [ip, #28]
   3cbf0:	e1510003 	cmp	r1, r3
   3cbf4:	cafffff9 	bgt	3cbe0 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x100>
   3cbf8:	e59c3014 	ldr	r3, [ip, #20]
   3cbfc:	e28ee001 	add	lr, lr, #1
   3cc00:	e153000e 	cmp	r3, lr
   3cc04:	cafffff1 	bgt	3cbd0 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xf0>
   3cc08:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3cc0c:	e59c2020 	ldr	r2, [ip, #32]
   3cc10:	e2866001 	add	r6, r6, #1
   3cc14:	e1520006 	cmp	r2, r6
   3cc18:	e0800003 	add	r0, r0, r3
   3cc1c:	caffffe6 	bgt	3cbbc <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xdc>
   3cc20:	e59c2018 	ldr	r2, [ip, #24]
   3cc24:	e2877001 	add	r7, r7, #1
   3cc28:	e1520007 	cmp	r2, r7
   3cc2c:	d8bd8ff8 	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cc30:	e59ce020 	ldr	lr, [ip, #32]
   3cc34:	eaffffdd 	b	3cbb0 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xd0>

0003cc38 <DisplayFX::cursorRestore()>:
   3cc38:	e5901b48 	ldr	r1, [r0, #2888]	; 0xb48
   3cc3c:	e0813181 	add	r3, r1, r1, lsl #3
   3cc40:	e0613203 	rsb	r3, r1, r3, lsl #4
   3cc44:	e7d02103 	ldrb	r2, [r0, r3, lsl #2]
   3cc48:	e3520000 	cmp	r2, #0
   3cc4c:	e0802103 	add	r2, r0, r3, lsl #2
   3cc50:	012fff1e 	bxeq	lr
   3cc54:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3cc58:	e1a0e103 	lsl	lr, r3, #2
   3cc5c:	e28ee039 	add	lr, lr, #57	; 0x39
   3cc60:	e24dd00c 	sub	sp, sp, #12
   3cc64:	e080c00e 	add	ip, r0, lr
   3cc68:	e58dc000 	str	ip, [sp]
   3cc6c:	e5923030 	ldr	r3, [r2, #48]	; 0x30
   3cc70:	e5922034 	ldr	r2, [r2, #52]	; 0x34
   3cc74:	ebffff99 	bl	3cae0 <DisplayFX::screenReadCell(int, int, int, unsigned char*)>
   3cc78:	e28dd00c 	add	sp, sp, #12
   3cc7c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003cc80 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)>:
   3cc80:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cc84:	e3510004 	cmp	r1, #4
   3cc88:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   3cc8c:	88bd8ff8 	pophi	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cc90:	e1a06001 	mov	r6, r1
   3cc94:	e0818181 	add	r8, r1, r1, lsl #3
   3cc98:	e0618208 	rsb	r8, r1, r8, lsl #4
   3cc9c:	e080a108 	add	sl, r0, r8, lsl #2
   3cca0:	e59a1014 	ldr	r1, [sl, #20]
   3cca4:	e1a05000 	mov	r5, r0
   3cca8:	e3510000 	cmp	r1, #0
   3ccac:	e59a0008 	ldr	r0, [sl, #8]
   3ccb0:	e1a09002 	mov	r9, r2
   3ccb4:	e1a07003 	mov	r7, r3
   3ccb8:	d3a00000 	movle	r0, #0
   3ccbc:	e1a08108 	lsl	r8, r8, #2
   3ccc0:	e1a0b186 	lsl	fp, r6, #3
   3ccc4:	da000000 	ble	3cccc <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x4c>
   3ccc8:	eb0000e2 	bl	3d058 <__divsi3>
   3cccc:	e1590000 	cmp	r9, r0
   3ccd0:	a8bd8ff8 	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ccd4:	e59a1018 	ldr	r1, [sl, #24]
   3ccd8:	e59a0010 	ldr	r0, [sl, #16]
   3ccdc:	e3510000 	cmp	r1, #0
   3cce0:	d3a00000 	movle	r0, #0
   3cce4:	da000000 	ble	3ccec <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x6c>
   3cce8:	eb0000da 	bl	3d058 <__divsi3>
   3ccec:	e1570000 	cmp	r7, r0
   3ccf0:	a8bd8ff8 	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ccf4:	e7d53008 	ldrb	r3, [r5, r8]
   3ccf8:	e3530000 	cmp	r3, #0
   3ccfc:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cd00:	e08bc006 	add	ip, fp, r6
   3cd04:	e066c20c 	rsb	ip, r6, ip, lsl #4
   3cd08:	e085c10c 	add	ip, r5, ip, lsl #2
   3cd0c:	e59c1014 	ldr	r1, [ip, #20]
   3cd10:	e59c3018 	ldr	r3, [ip, #24]
   3cd14:	e0010991 	mul	r1, r1, r9
   3cd18:	e0020793 	mul	r2, r3, r7
   3cd1c:	e59a0004 	ldr	r0, [sl, #4]
   3cd20:	e59c601c 	ldr	r6, [ip, #28]
   3cd24:	e59ce020 	ldr	lr, [ip, #32]
   3cd28:	e0210196 	mla	r1, r6, r1, r0
   3cd2c:	e59c000c 	ldr	r0, [ip, #12]
   3cd30:	e3530000 	cmp	r3, #0
   3cd34:	e022029e 	mla	r2, lr, r2, r0
   3cd38:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3cd3c:	e5950b40 	ldr	r0, [r5, #2880]	; 0xb40
   3cd40:	e0221293 	mla	r2, r3, r2, r1
   3cd44:	e0800002 	add	r0, r0, r2
   3cd48:	d8bd8ff8 	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cd4c:	e3a07000 	mov	r7, #0
   3cd50:	e35e0000 	cmp	lr, #0
   3cd54:	da000019 	ble	3cdc0 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x140>
   3cd58:	e3a06000 	mov	r6, #0
   3cd5c:	e59c2014 	ldr	r2, [ip, #20]
   3cd60:	e3520000 	cmp	r2, #0
   3cd64:	da000010 	ble	3cdac <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x12c>
   3cd68:	e1a02000 	mov	r2, r0
   3cd6c:	e3a0e000 	mov	lr, #0
   3cd70:	e59c301c 	ldr	r3, [ip, #28]
   3cd74:	e3530000 	cmp	r3, #0
   3cd78:	da000006 	ble	3cd98 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x118>
   3cd7c:	e3a03000 	mov	r3, #0
   3cd80:	e4d41001 	ldrb	r1, [r4], #1
   3cd84:	e2833001 	add	r3, r3, #1
   3cd88:	e4c21001 	strb	r1, [r2], #1
   3cd8c:	e59c101c 	ldr	r1, [ip, #28]
   3cd90:	e1510003 	cmp	r1, r3
   3cd94:	cafffff9 	bgt	3cd80 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x100>
   3cd98:	e59c3014 	ldr	r3, [ip, #20]
   3cd9c:	e28ee001 	add	lr, lr, #1
   3cda0:	e153000e 	cmp	r3, lr
   3cda4:	cafffff1 	bgt	3cd70 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xf0>
   3cda8:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3cdac:	e59c2020 	ldr	r2, [ip, #32]
   3cdb0:	e2866001 	add	r6, r6, #1
   3cdb4:	e1520006 	cmp	r2, r6
   3cdb8:	e0800003 	add	r0, r0, r3
   3cdbc:	caffffe6 	bgt	3cd5c <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xdc>
   3cdc0:	e59c2018 	ldr	r2, [ip, #24]
   3cdc4:	e2877001 	add	r7, r7, #1
   3cdc8:	e1520007 	cmp	r2, r7
   3cdcc:	d8bd8ff8 	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cdd0:	e59ce020 	ldr	lr, [ip, #32]
   3cdd4:	eaffffdd 	b	3cd50 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xd0>

0003cdd8 <DisplayFX::cursorRender()>:
   3cdd8:	e5901b48 	ldr	r1, [r0, #2888]	; 0xb48
   3cddc:	e0813181 	add	r3, r1, r1, lsl #3
   3cde0:	e0613203 	rsb	r3, r1, r3, lsl #4
   3cde4:	e7d02103 	ldrb	r2, [r0, r3, lsl #2]
   3cde8:	e3520000 	cmp	r2, #0
   3cdec:	e0802103 	add	r2, r0, r3, lsl #2
   3cdf0:	012fff1e 	bxeq	lr
   3cdf4:	e92d4010 	push	{r4, lr}
   3cdf8:	e1a0c103 	lsl	ip, r3, #2
   3cdfc:	e1a04000 	mov	r4, r0
   3ce00:	e28cc039 	add	ip, ip, #57	; 0x39
   3ce04:	e24dd008 	sub	sp, sp, #8
   3ce08:	e080c00c 	add	ip, r0, ip
   3ce0c:	e58dc000 	str	ip, [sp]
   3ce10:	e5923030 	ldr	r3, [r2, #48]	; 0x30
   3ce14:	e5922034 	ldr	r2, [r2, #52]	; 0x34
   3ce18:	ebffff98 	bl	3cc80 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)>
   3ce1c:	e3a0c05f 	mov	ip, #95	; 0x5f
   3ce20:	e5941b48 	ldr	r1, [r4, #2888]	; 0xb48
   3ce24:	e1a00004 	mov	r0, r4
   3ce28:	e0813181 	add	r3, r1, r1, lsl #3
   3ce2c:	e0613203 	rsb	r3, r1, r3, lsl #4
   3ce30:	e0844103 	add	r4, r4, r3, lsl #2
   3ce34:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3ce38:	e5942034 	ldr	r2, [r4, #52]	; 0x34
   3ce3c:	e58dc000 	str	ip, [sp]
   3ce40:	ebfffce1 	bl	3c1cc <DisplayFX::windowPut(int, int, int, int)>
   3ce44:	e28dd008 	add	sp, sp, #8
   3ce48:	e8bd8010 	pop	{r4, pc}

0003ce4c <__udivsi3>:
   3ce4c:	e2512001 	subs	r2, r1, #1
   3ce50:	012fff1e 	bxeq	lr
   3ce54:	3a000074 	bcc	3d02c <__udivsi3+0x1e0>
   3ce58:	e1500001 	cmp	r0, r1
   3ce5c:	9a00006b 	bls	3d010 <__udivsi3+0x1c4>
   3ce60:	e1110002 	tst	r1, r2
   3ce64:	0a00006c 	beq	3d01c <__udivsi3+0x1d0>
   3ce68:	e16f3f10 	clz	r3, r0
   3ce6c:	e16f2f11 	clz	r2, r1
   3ce70:	e0423003 	sub	r3, r2, r3
   3ce74:	e273301f 	rsbs	r3, r3, #31
   3ce78:	10833083 	addne	r3, r3, r3, lsl #1
   3ce7c:	e3a02000 	mov	r2, #0
   3ce80:	108ff103 	addne	pc, pc, r3, lsl #2
   3ce84:	e1a00000 	nop			; (mov r0, r0)
   3ce88:	e1500f81 	cmp	r0, r1, lsl #31
   3ce8c:	e0a22002 	adc	r2, r2, r2
   3ce90:	20400f81 	subcs	r0, r0, r1, lsl #31
   3ce94:	e1500f01 	cmp	r0, r1, lsl #30
   3ce98:	e0a22002 	adc	r2, r2, r2
   3ce9c:	20400f01 	subcs	r0, r0, r1, lsl #30
   3cea0:	e1500e81 	cmp	r0, r1, lsl #29
   3cea4:	e0a22002 	adc	r2, r2, r2
   3cea8:	20400e81 	subcs	r0, r0, r1, lsl #29
   3ceac:	e1500e01 	cmp	r0, r1, lsl #28
   3ceb0:	e0a22002 	adc	r2, r2, r2
   3ceb4:	20400e01 	subcs	r0, r0, r1, lsl #28
   3ceb8:	e1500d81 	cmp	r0, r1, lsl #27
   3cebc:	e0a22002 	adc	r2, r2, r2
   3cec0:	20400d81 	subcs	r0, r0, r1, lsl #27
   3cec4:	e1500d01 	cmp	r0, r1, lsl #26
   3cec8:	e0a22002 	adc	r2, r2, r2
   3cecc:	20400d01 	subcs	r0, r0, r1, lsl #26
   3ced0:	e1500c81 	cmp	r0, r1, lsl #25
   3ced4:	e0a22002 	adc	r2, r2, r2
   3ced8:	20400c81 	subcs	r0, r0, r1, lsl #25
   3cedc:	e1500c01 	cmp	r0, r1, lsl #24
   3cee0:	e0a22002 	adc	r2, r2, r2
   3cee4:	20400c01 	subcs	r0, r0, r1, lsl #24
   3cee8:	e1500b81 	cmp	r0, r1, lsl #23
   3ceec:	e0a22002 	adc	r2, r2, r2
   3cef0:	20400b81 	subcs	r0, r0, r1, lsl #23
   3cef4:	e1500b01 	cmp	r0, r1, lsl #22
   3cef8:	e0a22002 	adc	r2, r2, r2
   3cefc:	20400b01 	subcs	r0, r0, r1, lsl #22
   3cf00:	e1500a81 	cmp	r0, r1, lsl #21
   3cf04:	e0a22002 	adc	r2, r2, r2
   3cf08:	20400a81 	subcs	r0, r0, r1, lsl #21
   3cf0c:	e1500a01 	cmp	r0, r1, lsl #20
   3cf10:	e0a22002 	adc	r2, r2, r2
   3cf14:	20400a01 	subcs	r0, r0, r1, lsl #20
   3cf18:	e1500981 	cmp	r0, r1, lsl #19
   3cf1c:	e0a22002 	adc	r2, r2, r2
   3cf20:	20400981 	subcs	r0, r0, r1, lsl #19
   3cf24:	e1500901 	cmp	r0, r1, lsl #18
   3cf28:	e0a22002 	adc	r2, r2, r2
   3cf2c:	20400901 	subcs	r0, r0, r1, lsl #18
   3cf30:	e1500881 	cmp	r0, r1, lsl #17
   3cf34:	e0a22002 	adc	r2, r2, r2
   3cf38:	20400881 	subcs	r0, r0, r1, lsl #17
   3cf3c:	e1500801 	cmp	r0, r1, lsl #16
   3cf40:	e0a22002 	adc	r2, r2, r2
   3cf44:	20400801 	subcs	r0, r0, r1, lsl #16
   3cf48:	e1500781 	cmp	r0, r1, lsl #15
   3cf4c:	e0a22002 	adc	r2, r2, r2
   3cf50:	20400781 	subcs	r0, r0, r1, lsl #15
   3cf54:	e1500701 	cmp	r0, r1, lsl #14
   3cf58:	e0a22002 	adc	r2, r2, r2
   3cf5c:	20400701 	subcs	r0, r0, r1, lsl #14
   3cf60:	e1500681 	cmp	r0, r1, lsl #13
   3cf64:	e0a22002 	adc	r2, r2, r2
   3cf68:	20400681 	subcs	r0, r0, r1, lsl #13
   3cf6c:	e1500601 	cmp	r0, r1, lsl #12
   3cf70:	e0a22002 	adc	r2, r2, r2
   3cf74:	20400601 	subcs	r0, r0, r1, lsl #12
   3cf78:	e1500581 	cmp	r0, r1, lsl #11
   3cf7c:	e0a22002 	adc	r2, r2, r2
   3cf80:	20400581 	subcs	r0, r0, r1, lsl #11
   3cf84:	e1500501 	cmp	r0, r1, lsl #10
   3cf88:	e0a22002 	adc	r2, r2, r2
   3cf8c:	20400501 	subcs	r0, r0, r1, lsl #10
   3cf90:	e1500481 	cmp	r0, r1, lsl #9
   3cf94:	e0a22002 	adc	r2, r2, r2
   3cf98:	20400481 	subcs	r0, r0, r1, lsl #9
   3cf9c:	e1500401 	cmp	r0, r1, lsl #8
   3cfa0:	e0a22002 	adc	r2, r2, r2
   3cfa4:	20400401 	subcs	r0, r0, r1, lsl #8
   3cfa8:	e1500381 	cmp	r0, r1, lsl #7
   3cfac:	e0a22002 	adc	r2, r2, r2
   3cfb0:	20400381 	subcs	r0, r0, r1, lsl #7
   3cfb4:	e1500301 	cmp	r0, r1, lsl #6
   3cfb8:	e0a22002 	adc	r2, r2, r2
   3cfbc:	20400301 	subcs	r0, r0, r1, lsl #6
   3cfc0:	e1500281 	cmp	r0, r1, lsl #5
   3cfc4:	e0a22002 	adc	r2, r2, r2
   3cfc8:	20400281 	subcs	r0, r0, r1, lsl #5
   3cfcc:	e1500201 	cmp	r0, r1, lsl #4
   3cfd0:	e0a22002 	adc	r2, r2, r2
   3cfd4:	20400201 	subcs	r0, r0, r1, lsl #4
   3cfd8:	e1500181 	cmp	r0, r1, lsl #3
   3cfdc:	e0a22002 	adc	r2, r2, r2
   3cfe0:	20400181 	subcs	r0, r0, r1, lsl #3
   3cfe4:	e1500101 	cmp	r0, r1, lsl #2
   3cfe8:	e0a22002 	adc	r2, r2, r2
   3cfec:	20400101 	subcs	r0, r0, r1, lsl #2
   3cff0:	e1500081 	cmp	r0, r1, lsl #1
   3cff4:	e0a22002 	adc	r2, r2, r2
   3cff8:	20400081 	subcs	r0, r0, r1, lsl #1
   3cffc:	e1500001 	cmp	r0, r1
   3d000:	e0a22002 	adc	r2, r2, r2
   3d004:	20400001 	subcs	r0, r0, r1
   3d008:	e1a00002 	mov	r0, r2
   3d00c:	e12fff1e 	bx	lr
   3d010:	03a00001 	moveq	r0, #1
   3d014:	13a00000 	movne	r0, #0
   3d018:	e12fff1e 	bx	lr
   3d01c:	e16f2f11 	clz	r2, r1
   3d020:	e262201f 	rsb	r2, r2, #31
   3d024:	e1a00230 	lsr	r0, r0, r2
   3d028:	e12fff1e 	bx	lr
   3d02c:	e3500000 	cmp	r0, #0
   3d030:	13e00000 	mvnne	r0, #0
   3d034:	ea000097 	b	3d298 <__aeabi_idiv0>

0003d038 <__aeabi_uidivmod>:
   3d038:	e3510000 	cmp	r1, #0
   3d03c:	0afffffa 	beq	3d02c <__udivsi3+0x1e0>
   3d040:	e92d4003 	push	{r0, r1, lr}
   3d044:	ebffff80 	bl	3ce4c <__udivsi3>
   3d048:	e8bd4006 	pop	{r1, r2, lr}
   3d04c:	e0030092 	mul	r3, r2, r0
   3d050:	e0411003 	sub	r1, r1, r3
   3d054:	e12fff1e 	bx	lr

0003d058 <__divsi3>:
   3d058:	e3510000 	cmp	r1, #0
   3d05c:	0a000081 	beq	3d268 <.divsi3_skip_div0_test+0x208>

0003d060 <.divsi3_skip_div0_test>:
   3d060:	e020c001 	eor	ip, r0, r1
   3d064:	42611000 	rsbmi	r1, r1, #0
   3d068:	e2512001 	subs	r2, r1, #1
   3d06c:	0a000070 	beq	3d234 <.divsi3_skip_div0_test+0x1d4>
   3d070:	e1b03000 	movs	r3, r0
   3d074:	42603000 	rsbmi	r3, r0, #0
   3d078:	e1530001 	cmp	r3, r1
   3d07c:	9a00006f 	bls	3d240 <.divsi3_skip_div0_test+0x1e0>
   3d080:	e1110002 	tst	r1, r2
   3d084:	0a000071 	beq	3d250 <.divsi3_skip_div0_test+0x1f0>
   3d088:	e16f2f13 	clz	r2, r3
   3d08c:	e16f0f11 	clz	r0, r1
   3d090:	e0402002 	sub	r2, r0, r2
   3d094:	e272201f 	rsbs	r2, r2, #31
   3d098:	10822082 	addne	r2, r2, r2, lsl #1
   3d09c:	e3a00000 	mov	r0, #0
   3d0a0:	108ff102 	addne	pc, pc, r2, lsl #2
   3d0a4:	e1a00000 	nop			; (mov r0, r0)
   3d0a8:	e1530f81 	cmp	r3, r1, lsl #31
   3d0ac:	e0a00000 	adc	r0, r0, r0
   3d0b0:	20433f81 	subcs	r3, r3, r1, lsl #31
   3d0b4:	e1530f01 	cmp	r3, r1, lsl #30
   3d0b8:	e0a00000 	adc	r0, r0, r0
   3d0bc:	20433f01 	subcs	r3, r3, r1, lsl #30
   3d0c0:	e1530e81 	cmp	r3, r1, lsl #29
   3d0c4:	e0a00000 	adc	r0, r0, r0
   3d0c8:	20433e81 	subcs	r3, r3, r1, lsl #29
   3d0cc:	e1530e01 	cmp	r3, r1, lsl #28
   3d0d0:	e0a00000 	adc	r0, r0, r0
   3d0d4:	20433e01 	subcs	r3, r3, r1, lsl #28
   3d0d8:	e1530d81 	cmp	r3, r1, lsl #27
   3d0dc:	e0a00000 	adc	r0, r0, r0
   3d0e0:	20433d81 	subcs	r3, r3, r1, lsl #27
   3d0e4:	e1530d01 	cmp	r3, r1, lsl #26
   3d0e8:	e0a00000 	adc	r0, r0, r0
   3d0ec:	20433d01 	subcs	r3, r3, r1, lsl #26
   3d0f0:	e1530c81 	cmp	r3, r1, lsl #25
   3d0f4:	e0a00000 	adc	r0, r0, r0
   3d0f8:	20433c81 	subcs	r3, r3, r1, lsl #25
   3d0fc:	e1530c01 	cmp	r3, r1, lsl #24
   3d100:	e0a00000 	adc	r0, r0, r0
   3d104:	20433c01 	subcs	r3, r3, r1, lsl #24
   3d108:	e1530b81 	cmp	r3, r1, lsl #23
   3d10c:	e0a00000 	adc	r0, r0, r0
   3d110:	20433b81 	subcs	r3, r3, r1, lsl #23
   3d114:	e1530b01 	cmp	r3, r1, lsl #22
   3d118:	e0a00000 	adc	r0, r0, r0
   3d11c:	20433b01 	subcs	r3, r3, r1, lsl #22
   3d120:	e1530a81 	cmp	r3, r1, lsl #21
   3d124:	e0a00000 	adc	r0, r0, r0
   3d128:	20433a81 	subcs	r3, r3, r1, lsl #21
   3d12c:	e1530a01 	cmp	r3, r1, lsl #20
   3d130:	e0a00000 	adc	r0, r0, r0
   3d134:	20433a01 	subcs	r3, r3, r1, lsl #20
   3d138:	e1530981 	cmp	r3, r1, lsl #19
   3d13c:	e0a00000 	adc	r0, r0, r0
   3d140:	20433981 	subcs	r3, r3, r1, lsl #19
   3d144:	e1530901 	cmp	r3, r1, lsl #18
   3d148:	e0a00000 	adc	r0, r0, r0
   3d14c:	20433901 	subcs	r3, r3, r1, lsl #18
   3d150:	e1530881 	cmp	r3, r1, lsl #17
   3d154:	e0a00000 	adc	r0, r0, r0
   3d158:	20433881 	subcs	r3, r3, r1, lsl #17
   3d15c:	e1530801 	cmp	r3, r1, lsl #16
   3d160:	e0a00000 	adc	r0, r0, r0
   3d164:	20433801 	subcs	r3, r3, r1, lsl #16
   3d168:	e1530781 	cmp	r3, r1, lsl #15
   3d16c:	e0a00000 	adc	r0, r0, r0
   3d170:	20433781 	subcs	r3, r3, r1, lsl #15
   3d174:	e1530701 	cmp	r3, r1, lsl #14
   3d178:	e0a00000 	adc	r0, r0, r0
   3d17c:	20433701 	subcs	r3, r3, r1, lsl #14
   3d180:	e1530681 	cmp	r3, r1, lsl #13
   3d184:	e0a00000 	adc	r0, r0, r0
   3d188:	20433681 	subcs	r3, r3, r1, lsl #13
   3d18c:	e1530601 	cmp	r3, r1, lsl #12
   3d190:	e0a00000 	adc	r0, r0, r0
   3d194:	20433601 	subcs	r3, r3, r1, lsl #12
   3d198:	e1530581 	cmp	r3, r1, lsl #11
   3d19c:	e0a00000 	adc	r0, r0, r0
   3d1a0:	20433581 	subcs	r3, r3, r1, lsl #11
   3d1a4:	e1530501 	cmp	r3, r1, lsl #10
   3d1a8:	e0a00000 	adc	r0, r0, r0
   3d1ac:	20433501 	subcs	r3, r3, r1, lsl #10
   3d1b0:	e1530481 	cmp	r3, r1, lsl #9
   3d1b4:	e0a00000 	adc	r0, r0, r0
   3d1b8:	20433481 	subcs	r3, r3, r1, lsl #9
   3d1bc:	e1530401 	cmp	r3, r1, lsl #8
   3d1c0:	e0a00000 	adc	r0, r0, r0
   3d1c4:	20433401 	subcs	r3, r3, r1, lsl #8
   3d1c8:	e1530381 	cmp	r3, r1, lsl #7
   3d1cc:	e0a00000 	adc	r0, r0, r0
   3d1d0:	20433381 	subcs	r3, r3, r1, lsl #7
   3d1d4:	e1530301 	cmp	r3, r1, lsl #6
   3d1d8:	e0a00000 	adc	r0, r0, r0
   3d1dc:	20433301 	subcs	r3, r3, r1, lsl #6
   3d1e0:	e1530281 	cmp	r3, r1, lsl #5
   3d1e4:	e0a00000 	adc	r0, r0, r0
   3d1e8:	20433281 	subcs	r3, r3, r1, lsl #5
   3d1ec:	e1530201 	cmp	r3, r1, lsl #4
   3d1f0:	e0a00000 	adc	r0, r0, r0
   3d1f4:	20433201 	subcs	r3, r3, r1, lsl #4
   3d1f8:	e1530181 	cmp	r3, r1, lsl #3
   3d1fc:	e0a00000 	adc	r0, r0, r0
   3d200:	20433181 	subcs	r3, r3, r1, lsl #3
   3d204:	e1530101 	cmp	r3, r1, lsl #2
   3d208:	e0a00000 	adc	r0, r0, r0
   3d20c:	20433101 	subcs	r3, r3, r1, lsl #2
   3d210:	e1530081 	cmp	r3, r1, lsl #1
   3d214:	e0a00000 	adc	r0, r0, r0
   3d218:	20433081 	subcs	r3, r3, r1, lsl #1
   3d21c:	e1530001 	cmp	r3, r1
   3d220:	e0a00000 	adc	r0, r0, r0
   3d224:	20433001 	subcs	r3, r3, r1
   3d228:	e35c0000 	cmp	ip, #0
   3d22c:	42600000 	rsbmi	r0, r0, #0
   3d230:	e12fff1e 	bx	lr
   3d234:	e13c0000 	teq	ip, r0
   3d238:	42600000 	rsbmi	r0, r0, #0
   3d23c:	e12fff1e 	bx	lr
   3d240:	33a00000 	movcc	r0, #0
   3d244:	01a00fcc 	asreq	r0, ip, #31
   3d248:	03800001 	orreq	r0, r0, #1
   3d24c:	e12fff1e 	bx	lr
   3d250:	e16f2f11 	clz	r2, r1
   3d254:	e262201f 	rsb	r2, r2, #31
   3d258:	e35c0000 	cmp	ip, #0
   3d25c:	e1a00233 	lsr	r0, r3, r2
   3d260:	42600000 	rsbmi	r0, r0, #0
   3d264:	e12fff1e 	bx	lr
   3d268:	e3500000 	cmp	r0, #0
   3d26c:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
   3d270:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
   3d274:	ea000007 	b	3d298 <__aeabi_idiv0>

0003d278 <__aeabi_idivmod>:
   3d278:	e3510000 	cmp	r1, #0
   3d27c:	0afffff9 	beq	3d268 <.divsi3_skip_div0_test+0x208>
   3d280:	e92d4003 	push	{r0, r1, lr}
   3d284:	ebffff75 	bl	3d060 <.divsi3_skip_div0_test>
   3d288:	e8bd4006 	pop	{r1, r2, lr}
   3d28c:	e0030092 	mul	r3, r2, r0
   3d290:	e0411003 	sub	r1, r1, r3
   3d294:	e12fff1e 	bx	lr

0003d298 <__aeabi_idiv0>:
   3d298:	e12fff1e 	bx	lr

0003d29c <__aeabi_ldivmod>:
   3d29c:	e3530000 	cmp	r3, #0
   3d2a0:	03520000 	cmpeq	r2, #0
   3d2a4:	1a000007 	bne	3d2c8 <__aeabi_ldivmod+0x2c>
   3d2a8:	e3510000 	cmp	r1, #0
   3d2ac:	b3a01102 	movlt	r1, #-2147483648	; 0x80000000
   3d2b0:	b3a00000 	movlt	r0, #0
   3d2b4:	ba000002 	blt	3d2c4 <__aeabi_ldivmod+0x28>
   3d2b8:	03500000 	cmpeq	r0, #0
   3d2bc:	13e01102 	mvnne	r1, #-2147483648	; 0x80000000
   3d2c0:	13e00000 	mvnne	r0, #0
   3d2c4:	eafffff3 	b	3d298 <__aeabi_idiv0>
   3d2c8:	e24dd008 	sub	sp, sp, #8
   3d2cc:	e92d6000 	push	{sp, lr}
   3d2d0:	e3510000 	cmp	r1, #0
   3d2d4:	ba000006 	blt	3d2f4 <__aeabi_ldivmod+0x58>
   3d2d8:	e3530000 	cmp	r3, #0
   3d2dc:	ba000011 	blt	3d328 <__aeabi_ldivmod+0x8c>
   3d2e0:	eb000031 	bl	3d3ac <__udivmoddi4>
   3d2e4:	e59de004 	ldr	lr, [sp, #4]
   3d2e8:	e28dd008 	add	sp, sp, #8
   3d2ec:	e8bd000c 	pop	{r2, r3}
   3d2f0:	e12fff1e 	bx	lr
   3d2f4:	e2700000 	rsbs	r0, r0, #0
   3d2f8:	e0c11081 	sbc	r1, r1, r1, lsl #1
   3d2fc:	e3530000 	cmp	r3, #0
   3d300:	ba000011 	blt	3d34c <__aeabi_ldivmod+0xb0>
   3d304:	eb000028 	bl	3d3ac <__udivmoddi4>
   3d308:	e59de004 	ldr	lr, [sp, #4]
   3d30c:	e28dd008 	add	sp, sp, #8
   3d310:	e8bd000c 	pop	{r2, r3}
   3d314:	e2700000 	rsbs	r0, r0, #0
   3d318:	e0c11081 	sbc	r1, r1, r1, lsl #1
   3d31c:	e2722000 	rsbs	r2, r2, #0
   3d320:	e0c33083 	sbc	r3, r3, r3, lsl #1
   3d324:	e12fff1e 	bx	lr
   3d328:	e2722000 	rsbs	r2, r2, #0
   3d32c:	e0c33083 	sbc	r3, r3, r3, lsl #1
   3d330:	eb00001d 	bl	3d3ac <__udivmoddi4>
   3d334:	e59de004 	ldr	lr, [sp, #4]
   3d338:	e28dd008 	add	sp, sp, #8
   3d33c:	e8bd000c 	pop	{r2, r3}
   3d340:	e2700000 	rsbs	r0, r0, #0
   3d344:	e0c11081 	sbc	r1, r1, r1, lsl #1
   3d348:	e12fff1e 	bx	lr
   3d34c:	e2722000 	rsbs	r2, r2, #0
   3d350:	e0c33083 	sbc	r3, r3, r3, lsl #1
   3d354:	eb000014 	bl	3d3ac <__udivmoddi4>
   3d358:	e59de004 	ldr	lr, [sp, #4]
   3d35c:	e28dd008 	add	sp, sp, #8
   3d360:	e8bd000c 	pop	{r2, r3}
   3d364:	e2722000 	rsbs	r2, r2, #0
   3d368:	e0c33083 	sbc	r3, r3, r3, lsl #1
   3d36c:	e12fff1e 	bx	lr

0003d370 <__aeabi_uldivmod>:
   3d370:	e3530000 	cmp	r3, #0
   3d374:	03520000 	cmpeq	r2, #0
   3d378:	1a000004 	bne	3d390 <__aeabi_uldivmod+0x20>
   3d37c:	e3510000 	cmp	r1, #0
   3d380:	03500000 	cmpeq	r0, #0
   3d384:	13e01000 	mvnne	r1, #0
   3d388:	13e00000 	mvnne	r0, #0
   3d38c:	eaffffc1 	b	3d298 <__aeabi_idiv0>
   3d390:	e24dd008 	sub	sp, sp, #8
   3d394:	e92d6000 	push	{sp, lr}
   3d398:	eb000003 	bl	3d3ac <__udivmoddi4>
   3d39c:	e59de004 	ldr	lr, [sp, #4]
   3d3a0:	e28dd008 	add	sp, sp, #8
   3d3a4:	e8bd000c 	pop	{r2, r3}
   3d3a8:	e12fff1e 	bx	lr

0003d3ac <__udivmoddi4>:
   3d3ac:	e1510003 	cmp	r1, r3
   3d3b0:	01500002 	cmpeq	r0, r2
   3d3b4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d3b8:	e1a04000 	mov	r4, r0
   3d3bc:	33a00000 	movcc	r0, #0
   3d3c0:	e1a05001 	mov	r5, r1
   3d3c4:	e59dc020 	ldr	ip, [sp, #32]
   3d3c8:	31a01000 	movcc	r1, r0
   3d3cc:	3a00003f 	bcc	3d4d0 <__udivmoddi4+0x124>
   3d3d0:	e1a06002 	mov	r6, r2
   3d3d4:	e3530000 	cmp	r3, #0
   3d3d8:	116f2f13 	clzne	r2, r3
   3d3dc:	016f2f16 	clzeq	r2, r6
   3d3e0:	02822020 	addeq	r2, r2, #32
   3d3e4:	e3550000 	cmp	r5, #0
   3d3e8:	e1a07003 	mov	r7, r3
   3d3ec:	016f3f14 	clzeq	r3, r4
   3d3f0:	02833020 	addeq	r3, r3, #32
   3d3f4:	116f3f15 	clzne	r3, r5
   3d3f8:	e0422003 	sub	r2, r2, r3
   3d3fc:	e1a09217 	lsl	r9, r7, r2
   3d400:	e242a020 	sub	sl, r2, #32
   3d404:	e1899a16 	orr	r9, r9, r6, lsl sl
   3d408:	e262e020 	rsb	lr, r2, #32
   3d40c:	e1899e36 	orr	r9, r9, r6, lsr lr
   3d410:	e1a08216 	lsl	r8, r6, r2
   3d414:	e1550009 	cmp	r5, r9
   3d418:	01540008 	cmpeq	r4, r8
   3d41c:	33a00000 	movcc	r0, #0
   3d420:	31a01000 	movcc	r1, r0
   3d424:	3a000005 	bcc	3d440 <__udivmoddi4+0x94>
   3d428:	e3a00001 	mov	r0, #1
   3d42c:	e1a01a10 	lsl	r1, r0, sl
   3d430:	e0544008 	subs	r4, r4, r8
   3d434:	e1811e30 	orr	r1, r1, r0, lsr lr
   3d438:	e1a00210 	lsl	r0, r0, r2
   3d43c:	e0c55009 	sbc	r5, r5, r9
   3d440:	e3520000 	cmp	r2, #0
   3d444:	0a000021 	beq	3d4d0 <__udivmoddi4+0x124>
   3d448:	e1a060a8 	lsr	r6, r8, #1
   3d44c:	e1866f89 	orr	r6, r6, r9, lsl #31
   3d450:	e1a070a9 	lsr	r7, r9, #1
   3d454:	e1a08002 	mov	r8, r2
   3d458:	ea000007 	b	3d47c <__udivmoddi4+0xd0>
   3d45c:	e0543006 	subs	r3, r4, r6
   3d460:	e0c59007 	sbc	r9, r5, r7
   3d464:	e0933003 	adds	r3, r3, r3
   3d468:	e0a99009 	adc	r9, r9, r9
   3d46c:	e2934001 	adds	r4, r3, #1
   3d470:	e2a95000 	adc	r5, r9, #0
   3d474:	e2588001 	subs	r8, r8, #1
   3d478:	0a000006 	beq	3d498 <__udivmoddi4+0xec>
   3d47c:	e1550007 	cmp	r5, r7
   3d480:	01540006 	cmpeq	r4, r6
   3d484:	2afffff4 	bcs	3d45c <__udivmoddi4+0xb0>
   3d488:	e0944004 	adds	r4, r4, r4
   3d48c:	e0a55005 	adc	r5, r5, r5
   3d490:	e2588001 	subs	r8, r8, #1
   3d494:	1afffff8 	bne	3d47c <__udivmoddi4+0xd0>
   3d498:	e1a03234 	lsr	r3, r4, r2
   3d49c:	e1833e15 	orr	r3, r3, r5, lsl lr
   3d4a0:	e1a06235 	lsr	r6, r5, r2
   3d4a4:	e1833a35 	orr	r3, r3, r5, lsr sl
   3d4a8:	e0900004 	adds	r0, r0, r4
   3d4ac:	e1a04003 	mov	r4, r3
   3d4b0:	e1a03216 	lsl	r3, r6, r2
   3d4b4:	e1833a14 	orr	r3, r3, r4, lsl sl
   3d4b8:	e1a02214 	lsl	r2, r4, r2
   3d4bc:	e1833e34 	orr	r3, r3, r4, lsr lr
   3d4c0:	e0a11005 	adc	r1, r1, r5
   3d4c4:	e0500002 	subs	r0, r0, r2
   3d4c8:	e1a05006 	mov	r5, r6
   3d4cc:	e0c11003 	sbc	r1, r1, r3
   3d4d0:	e35c0000 	cmp	ip, #0
   3d4d4:	11cc40f0 	strdne	r4, [ip]
   3d4d8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003d4dc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   3d4dc:	e3a01000 	mov	r1, #0
   3d4e0:	e3a02001 	mov	r2, #1
   3d4e4:	e92d4030 	push	{r4, r5, lr}
   3d4e8:	e1a05000 	mov	r5, r0
   3d4ec:	e5903020 	ldr	r3, [r0, #32]
   3d4f0:	e24dd014 	sub	sp, sp, #20
   3d4f4:	e5c32011 	strb	r2, [r3, #17]
   3d4f8:	e5c3100c 	strb	r1, [r3, #12]
   3d4fc:	e5c3100d 	strb	r1, [r3, #13]
   3d500:	e5c3100e 	strb	r1, [r3, #14]
   3d504:	e5c3100f 	strb	r1, [r3, #15]
   3d508:	e5c31010 	strb	r1, [r3, #16]
   3d50c:	e5c31012 	strb	r1, [r3, #18]
   3d510:	e5c31013 	strb	r1, [r3, #19]
   3d514:	e28d0008 	add	r0, sp, #8
   3d518:	ebff9c7a 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3d51c:	e59f306c 	ldr	r3, [pc, #108]	; 3d590 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   3d520:	e5952020 	ldr	r2, [r5, #32]
   3d524:	e59f1068 	ldr	r1, [pc, #104]	; 3d594 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   3d528:	e58d3000 	str	r3, [sp]
   3d52c:	e28d0008 	add	r0, sp, #8
   3d530:	e283300c 	add	r3, r3, #12
   3d534:	ebff9c7f 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3d538:	e2504000 	subs	r4, r0, #0
   3d53c:	0a000008 	beq	3d564 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   3d540:	e5952020 	ldr	r2, [r5, #32]
   3d544:	e5d2300c 	ldrb	r3, [r2, #12]
   3d548:	e5d2000d 	ldrb	r0, [r2, #13]
   3d54c:	e5d2100e 	ldrb	r1, [r2, #14]
   3d550:	e1833400 	orr	r3, r3, r0, lsl #8
   3d554:	e5d2200f 	ldrb	r2, [r2, #15]
   3d558:	e1833801 	orr	r3, r3, r1, lsl #16
   3d55c:	e1933c02 	orrs	r3, r3, r2, lsl #24
   3d560:	0a000005 	beq	3d57c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   3d564:	e3a04000 	mov	r4, #0
   3d568:	e28d0008 	add	r0, sp, #8
   3d56c:	ebff9c6c 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   3d570:	e1a00004 	mov	r0, r4
   3d574:	e28dd014 	add	sp, sp, #20
   3d578:	e8bd8030 	pop	{r4, r5, pc}
   3d57c:	e28d0008 	add	r0, sp, #8
   3d580:	ebff9c67 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   3d584:	e1a00004 	mov	r0, r4
   3d588:	e28dd014 	add	sp, sp, #20
   3d58c:	e8bd8030 	pop	{r4, r5, pc}
   3d590:	00000408 	.word	0x00000408
   3d594:	0004800b 	.word	0x0004800b

0003d598 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   3d598:	e92d4030 	push	{r4, r5, lr}
   3d59c:	e1a04000 	mov	r4, r0
   3d5a0:	e3a05000 	mov	r5, #0
   3d5a4:	e3520000 	cmp	r2, #0
   3d5a8:	13510000 	cmpne	r1, #0
   3d5ac:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   3d5b0:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
   3d5b4:	e5841000 	str	r1, [r4]
   3d5b8:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   3d5bc:	e5842004 	str	r2, [r4, #4]
   3d5c0:	e5843010 	str	r3, [r4, #16]
   3d5c4:	e584000c 	str	r0, [r4, #12]
   3d5c8:	e5841008 	str	r1, [r4, #8]
   3d5cc:	e5845014 	str	r5, [r4, #20]
   3d5d0:	e5845018 	str	r5, [r4, #24]
   3d5d4:	e584501c 	str	r5, [r4, #28]
   3d5d8:	e5845020 	str	r5, [r4, #32]
   3d5dc:	1a000011 	bne	3d628 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x90>
   3d5e0:	e1a01005 	mov	r1, r5
   3d5e4:	e28d000c 	add	r0, sp, #12
   3d5e8:	ebff9c46 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3d5ec:	e3a03014 	mov	r3, #20
   3d5f0:	e59f10dc 	ldr	r1, [pc, #220]	; 3d6d4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x13c>
   3d5f4:	e58d5000 	str	r5, [sp]
   3d5f8:	e28d000c 	add	r0, sp, #12
   3d5fc:	e08d2003 	add	r2, sp, r3
   3d600:	ebff9c4c 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3d604:	e1500005 	cmp	r0, r5
   3d608:	1a000029 	bne	3d6b4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x11c>
   3d60c:	e3a02d0a 	mov	r2, #640	; 0x280
   3d610:	e3a03e1e 	mov	r3, #480	; 0x1e0
   3d614:	e1c420f0 	strd	r2, [r4]
   3d618:	e28d000c 	add	r0, sp, #12
   3d61c:	ebff9c40 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   3d620:	e5941008 	ldr	r1, [r4, #8]
   3d624:	e5943010 	ldr	r3, [r4, #16]
   3d628:	e3510000 	cmp	r1, #0
   3d62c:	0a000013 	beq	3d680 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xe8>
   3d630:	e594200c 	ldr	r2, [r4, #12]
   3d634:	e3520000 	cmp	r2, #0
   3d638:	0a000010 	beq	3d680 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xe8>
   3d63c:	e3530008 	cmp	r3, #8
   3d640:	9a000013 	bls	3d694 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
   3d644:	e3a02070 	mov	r2, #112	; 0x70
   3d648:	e59f1088 	ldr	r1, [pc, #136]	; 3d6d8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x140>
   3d64c:	e2840024 	add	r0, r4, #36	; 0x24
   3d650:	ebffb42c 	bl	2a708 <memcpy>
   3d654:	e1c400d4 	ldrd	r0, [r4, #4]
   3d658:	e1c420dc 	ldrd	r2, [r4, #12]
   3d65c:	e5840034 	str	r0, [r4, #52]	; 0x34
   3d660:	e1a00004 	mov	r0, r4
   3d664:	e594c000 	ldr	ip, [r4]
   3d668:	e5841044 	str	r1, [r4, #68]	; 0x44
   3d66c:	e584c030 	str	ip, [r4, #48]	; 0x30
   3d670:	e5842048 	str	r2, [r4, #72]	; 0x48
   3d674:	e5843058 	str	r3, [r4, #88]	; 0x58
   3d678:	e28dd02c 	add	sp, sp, #44	; 0x2c
   3d67c:	e8bd8030 	pop	{r4, r5, pc}
   3d680:	e3530008 	cmp	r3, #8
   3d684:	e8940006 	ldm	r4, {r1, r2}
   3d688:	e5841008 	str	r1, [r4, #8]
   3d68c:	e584200c 	str	r2, [r4, #12]
   3d690:	8affffeb 	bhi	3d644 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   3d694:	e59f0040 	ldr	r0, [pc, #64]	; 3d6dc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x144>
   3d698:	ebffb606 	bl	2aeb8 <operator new[](unsigned int)>
   3d69c:	e3a02b01 	mov	r2, #1024	; 0x400
   3d6a0:	e5840020 	str	r0, [r4, #32]
   3d6a4:	e3a01000 	mov	r1, #0
   3d6a8:	e2800014 	add	r0, r0, #20
   3d6ac:	ebffb1cc 	bl	29de4 <memset>
   3d6b0:	eaffffe3 	b	3d644 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   3d6b4:	e1cd22d0 	ldrd	r2, [sp, #32]
   3d6b8:	e2420d0a 	sub	r0, r2, #640	; 0x280
   3d6bc:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   3d6c0:	e3510f96 	cmp	r1, #600	; 0x258
   3d6c4:	93500c05 	cmpls	r0, #1280	; 0x500
   3d6c8:	e1c420f0 	strd	r2, [r4]
   3d6cc:	8affffce 	bhi	3d60c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   3d6d0:	eaffffd0 	b	3d618 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x80>
   3d6d4:	00040003 	.word	0x00040003
   3d6d8:	0004c108 	.word	0x0004c108
   3d6dc:	00000414 	.word	0x00000414

0003d6e0 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   3d6e0:	e92d4010 	push	{r4, lr}
   3d6e4:	e1a04000 	mov	r4, r0
   3d6e8:	e5900020 	ldr	r0, [r0, #32]
   3d6ec:	e3500000 	cmp	r0, #0
   3d6f0:	0a000001 	beq	3d6fc <CBcmFrameBuffer::~CBcmFrameBuffer()+0x1c>
   3d6f4:	e3a01014 	mov	r1, #20
   3d6f8:	ebffb5f6 	bl	2aed8 <operator delete(void*, unsigned int)>
   3d6fc:	e1a00004 	mov	r0, r4
   3d700:	e8bd8010 	pop	{r4, pc}

0003d704 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   3d704:	e5903010 	ldr	r3, [r0, #16]
   3d708:	e3530008 	cmp	r3, #8
   3d70c:	812fff1e 	bxhi	lr
   3d710:	e1a0c982 	lsl	ip, r2, #19
   3d714:	e1a035a2 	lsr	r3, r2, #11
   3d718:	e20cc73e 	and	ip, ip, #16252928	; 0xf80000
   3d71c:	e1a02282 	lsl	r2, r2, #5
   3d720:	e18cc183 	orr	ip, ip, r3, lsl #3
   3d724:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   3d728:	e5903020 	ldr	r3, [r0, #32]
   3d72c:	e182200c 	orr	r2, r2, ip
   3d730:	e38204ff 	orr	r0, r2, #-16777216	; 0xff000000
   3d734:	e2811004 	add	r1, r1, #4
   3d738:	e0831101 	add	r1, r3, r1, lsl #2
   3d73c:	e1a0c420 	lsr	ip, r0, #8
   3d740:	e1a03820 	lsr	r3, r0, #16
   3d744:	e1a00c20 	lsr	r0, r0, #24
   3d748:	e5c12004 	strb	r2, [r1, #4]
   3d74c:	e5c1c005 	strb	ip, [r1, #5]
   3d750:	e5c13006 	strb	r3, [r1, #6]
   3d754:	e5c10007 	strb	r0, [r1, #7]
   3d758:	e12fff1e 	bx	lr

0003d75c <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   3d75c:	e5903010 	ldr	r3, [r0, #16]
   3d760:	e3530008 	cmp	r3, #8
   3d764:	812fff1e 	bxhi	lr
   3d768:	e5903020 	ldr	r3, [r0, #32]
   3d76c:	e2811004 	add	r1, r1, #4
   3d770:	e0831101 	add	r1, r3, r1, lsl #2
   3d774:	e1a0c422 	lsr	ip, r2, #8
   3d778:	e1a00822 	lsr	r0, r2, #16
   3d77c:	e1a03c22 	lsr	r3, r2, #24
   3d780:	e5c12004 	strb	r2, [r1, #4]
   3d784:	e5c1c005 	strb	ip, [r1, #5]
   3d788:	e5c10006 	strb	r0, [r1, #6]
   3d78c:	e5c13007 	strb	r3, [r1, #7]
   3d790:	e12fff1e 	bx	lr

0003d794 <CBcmFrameBuffer::Initialize()>:
   3d794:	e92d4030 	push	{r4, r5, lr}
   3d798:	e1a04000 	mov	r4, r0
   3d79c:	e24dd00c 	sub	sp, sp, #12
   3d7a0:	e3a01000 	mov	r1, #0
   3d7a4:	e1a0000d 	mov	r0, sp
   3d7a8:	ebff9bd6 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3d7ac:	e1a0000d 	mov	r0, sp
   3d7b0:	e3a02070 	mov	r2, #112	; 0x70
   3d7b4:	e2841024 	add	r1, r4, #36	; 0x24
   3d7b8:	ebff9c1b 	bl	2482c <CBcmPropertyTags::GetTags(void*, unsigned int)>
   3d7bc:	e2505000 	subs	r5, r0, #0
   3d7c0:	0a00001f 	beq	3d844 <CBcmFrameBuffer::Initialize()+0xb0>
   3d7c4:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3d7c8:	e3530000 	cmp	r3, #0
   3d7cc:	0a00001b 	beq	3d840 <CBcmFrameBuffer::Initialize()+0xac>
   3d7d0:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   3d7d4:	e3530000 	cmp	r3, #0
   3d7d8:	0a000018 	beq	3d840 <CBcmFrameBuffer::Initialize()+0xac>
   3d7dc:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   3d7e0:	e3530000 	cmp	r3, #0
   3d7e4:	0a000015 	beq	3d840 <CBcmFrameBuffer::Initialize()+0xac>
   3d7e8:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   3d7ec:	e3530000 	cmp	r3, #0
   3d7f0:	0a000012 	beq	3d840 <CBcmFrameBuffer::Initialize()+0xac>
   3d7f4:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   3d7f8:	e3530000 	cmp	r3, #0
   3d7fc:	0a00000f 	beq	3d840 <CBcmFrameBuffer::Initialize()+0xac>
   3d800:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   3d804:	e3530000 	cmp	r3, #0
   3d808:	0a00000c 	beq	3d840 <CBcmFrameBuffer::Initialize()+0xac>
   3d80c:	e5942010 	ldr	r2, [r4, #16]
   3d810:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   3d814:	e3520008 	cmp	r2, #8
   3d818:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   3d81c:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   3d820:	e5843014 	str	r3, [r4, #20]
   3d824:	e5841018 	str	r1, [r4, #24]
   3d828:	e584201c 	str	r2, [r4, #28]
   3d82c:	8a000004 	bhi	3d844 <CBcmFrameBuffer::Initialize()+0xb0>
   3d830:	e1a00004 	mov	r0, r4
   3d834:	ebffff28 	bl	3d4dc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   3d838:	e1a05000 	mov	r5, r0
   3d83c:	ea000000 	b	3d844 <CBcmFrameBuffer::Initialize()+0xb0>
   3d840:	e1a05003 	mov	r5, r3
   3d844:	e1a0000d 	mov	r0, sp
   3d848:	ebff9bb5 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   3d84c:	e1a00005 	mov	r0, r5
   3d850:	e28dd00c 	add	sp, sp, #12
   3d854:	e8bd8030 	pop	{r4, r5, pc}

0003d858 <CBcmFrameBuffer::GetWidth() const>:
   3d858:	e5900000 	ldr	r0, [r0]
   3d85c:	e12fff1e 	bx	lr

0003d860 <CBcmFrameBuffer::GetHeight() const>:
   3d860:	e5900004 	ldr	r0, [r0, #4]
   3d864:	e12fff1e 	bx	lr

0003d868 <CBcmFrameBuffer::GetVirtWidth() const>:
   3d868:	e5900008 	ldr	r0, [r0, #8]
   3d86c:	e12fff1e 	bx	lr

0003d870 <CBcmFrameBuffer::GetVirtHeight() const>:
   3d870:	e590000c 	ldr	r0, [r0, #12]
   3d874:	e12fff1e 	bx	lr

0003d878 <CBcmFrameBuffer::GetPitch() const>:
   3d878:	e590001c 	ldr	r0, [r0, #28]
   3d87c:	e12fff1e 	bx	lr

0003d880 <CBcmFrameBuffer::GetDepth() const>:
   3d880:	e5900010 	ldr	r0, [r0, #16]
   3d884:	e12fff1e 	bx	lr

0003d888 <CBcmFrameBuffer::GetBuffer() const>:
   3d888:	e5900014 	ldr	r0, [r0, #20]
   3d88c:	e12fff1e 	bx	lr

0003d890 <CBcmFrameBuffer::GetSize() const>:
   3d890:	e5900018 	ldr	r0, [r0, #24]
   3d894:	e12fff1e 	bx	lr

0003d898 <CBcmFrameBuffer::UpdatePalette()>:
   3d898:	e5903010 	ldr	r3, [r0, #16]
   3d89c:	e3530008 	cmp	r3, #8
   3d8a0:	9a000001 	bls	3d8ac <CBcmFrameBuffer::UpdatePalette()+0x14>
   3d8a4:	e3a00001 	mov	r0, #1
   3d8a8:	e12fff1e 	bx	lr
   3d8ac:	eaffff0a 	b	3d4dc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

0003d8b0 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   3d8b0:	e92d4070 	push	{r4, r5, r6, lr}
   3d8b4:	e24dd028 	sub	sp, sp, #40	; 0x28
   3d8b8:	e1a05001 	mov	r5, r1
   3d8bc:	e28d000c 	add	r0, sp, #12
   3d8c0:	e3a01000 	mov	r1, #0
   3d8c4:	e1a06002 	mov	r6, r2
   3d8c8:	ebff9b8e 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3d8cc:	e3a03008 	mov	r3, #8
   3d8d0:	e58d3000 	str	r3, [sp]
   3d8d4:	e3a03014 	mov	r3, #20
   3d8d8:	e59f1048 	ldr	r1, [pc, #72]	; 3d928 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x78>
   3d8dc:	e28d000c 	add	r0, sp, #12
   3d8e0:	e08d2003 	add	r2, sp, r3
   3d8e4:	e58d5020 	str	r5, [sp, #32]
   3d8e8:	e58d6024 	str	r6, [sp, #36]	; 0x24
   3d8ec:	ebff9b91 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3d8f0:	e2504000 	subs	r4, r0, #0
   3d8f4:	0a000006 	beq	3d914 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   3d8f8:	e59d3020 	ldr	r3, [sp, #32]
   3d8fc:	e1530005 	cmp	r3, r5
   3d900:	059d0024 	ldreq	r0, [sp, #36]	; 0x24
   3d904:	13a04000 	movne	r4, #0
   3d908:	00404006 	subeq	r4, r0, r6
   3d90c:	016f4f14 	clzeq	r4, r4
   3d910:	01a042a4 	lsreq	r4, r4, #5
   3d914:	e28d000c 	add	r0, sp, #12
   3d918:	ebff9b81 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   3d91c:	e1a00004 	mov	r0, r4
   3d920:	e28dd028 	add	sp, sp, #40	; 0x28
   3d924:	e8bd8070 	pop	{r4, r5, r6, pc}
   3d928:	00048009 	.word	0x00048009

0003d92c <CBcmFrameBuffer::WaitForVerticalSync()>:
   3d92c:	e92d4010 	push	{r4, lr}
   3d930:	e24dd020 	sub	sp, sp, #32
   3d934:	e3a01000 	mov	r1, #0
   3d938:	e28d0008 	add	r0, sp, #8
   3d93c:	ebff9b71 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3d940:	e3a03000 	mov	r3, #0
   3d944:	e58d3000 	str	r3, [sp]
   3d948:	e3a03010 	mov	r3, #16
   3d94c:	e59f1020 	ldr	r1, [pc, #32]	; 3d974 <CBcmFrameBuffer::WaitForVerticalSync()+0x48>
   3d950:	e08d2003 	add	r2, sp, r3
   3d954:	e28d0008 	add	r0, sp, #8
   3d958:	ebff9b76 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3d95c:	e1a04000 	mov	r4, r0
   3d960:	e28d0008 	add	r0, sp, #8
   3d964:	ebff9b6e 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   3d968:	e1a00004 	mov	r0, r4
   3d96c:	e28dd020 	add	sp, sp, #32
   3d970:	e8bd8010 	pop	{r4, pc}
   3d974:	0004800e 	.word	0x0004800e

0003d978 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   3d978:	e92d4010 	push	{r4, lr}
   3d97c:	e24dd020 	sub	sp, sp, #32
   3d980:	e1a04001 	mov	r4, r1
   3d984:	e28d0008 	add	r0, sp, #8
   3d988:	e3a01000 	mov	r1, #0
   3d98c:	ebff9b5d 	bl	24708 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3d990:	e3a03004 	mov	r3, #4
   3d994:	e58d3000 	str	r3, [sp]
   3d998:	e3a03010 	mov	r3, #16
   3d99c:	e59f1024 	ldr	r1, [pc, #36]	; 3d9c8 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)+0x50>
   3d9a0:	e08d2003 	add	r2, sp, r3
   3d9a4:	e28d0008 	add	r0, sp, #8
   3d9a8:	e58d401c 	str	r4, [sp, #28]
   3d9ac:	ebff9b61 	bl	24738 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3d9b0:	e1a04000 	mov	r4, r0
   3d9b4:	e28d0008 	add	r0, sp, #8
   3d9b8:	ebff9b59 	bl	24724 <CBcmPropertyTags::~CBcmPropertyTags()>
   3d9bc:	e1a00004 	mov	r0, r4
   3d9c0:	e28dd020 	add	sp, sp, #32
   3d9c4:	e8bd8010 	pop	{r4, pc}
   3d9c8:	0004800f 	.word	0x0004800f

0003d9cc <convModeToVal>:
   3d9cc:	e2400001 	sub	r0, r0, #1
   3d9d0:	e6ef0070 	uxtb	r0, r0
   3d9d4:	e3500008 	cmp	r0, #8
   3d9d8:	959f3008 	ldrls	r3, [pc, #8]	; 3d9e8 <convModeToVal+0x1c>
   3d9dc:	97d30000 	ldrbls	r0, [r3, r0]
   3d9e0:	83a00000 	movhi	r0, #0
   3d9e4:	e12fff1e 	bx	lr
   3d9e8:	000477f8 	.word	0x000477f8

0003d9ec <pinMode>:
   3d9ec:	e92d4070 	push	{r4, r5, r6, lr}
   3d9f0:	e1a04000 	mov	r4, r0
   3d9f4:	e3a0c007 	mov	ip, #7
   3d9f8:	e59f20e0 	ldr	r2, [pc, #224]	; 3dae0 <pinMode+0xf4>
   3d9fc:	e59f00e0 	ldr	r0, [pc, #224]	; 3dae4 <pinMode+0xf8>
   3da00:	e0823492 	umull	r3, r2, r2, r4
   3da04:	e1a021a2 	lsr	r2, r2, #3
   3da08:	e0623e82 	rsb	r3, r2, r2, lsl #29
   3da0c:	e0623103 	rsb	r3, r2, r3, lsl #2
   3da10:	e0843083 	add	r3, r4, r3, lsl #1
   3da14:	e0ce0390 	smull	r0, lr, r0, r3
   3da18:	e1a00fc3 	asr	r0, r3, #31
   3da1c:	e2822302 	add	r2, r2, #134217728	; 0x8000000
   3da20:	e060014e 	rsb	r0, r0, lr, asr #2
   3da24:	e0800100 	add	r0, r0, r0, lsl #2
   3da28:	e2822702 	add	r2, r2, #524288	; 0x80000
   3da2c:	e0433080 	sub	r3, r3, r0, lsl #1
   3da30:	e2411001 	sub	r1, r1, #1
   3da34:	e1a02102 	lsl	r2, r2, #2
   3da38:	e5920000 	ldr	r0, [r2]
   3da3c:	e6ef1071 	uxtb	r1, r1
   3da40:	e0833083 	add	r3, r3, r3, lsl #1
   3da44:	e6ef3073 	uxtb	r3, r3
   3da48:	e3510008 	cmp	r1, #8
   3da4c:	e1c0c31c 	bic	ip, r0, ip, lsl r3
   3da50:	8a000016 	bhi	3dab0 <pinMode+0xc4>
   3da54:	e59f008c 	ldr	r0, [pc, #140]	; 3dae8 <pinMode+0xfc>
   3da58:	e7d01001 	ldrb	r1, [r0, r1]
   3da5c:	e201000f 	and	r0, r1, #15
   3da60:	e18cc310 	orr	ip, ip, r0, lsl r3
   3da64:	e31100f0 	tst	r1, #240	; 0xf0
   3da68:	e582c000 	str	ip, [r2]
   3da6c:	08bd8070 	popeq	{r4, r5, r6, pc}
   3da70:	e59f5074 	ldr	r5, [pc, #116]	; 3daec <pinMode+0x100>
   3da74:	e1a01241 	asr	r1, r1, #4
   3da78:	e3a00096 	mov	r0, #150	; 0x96
   3da7c:	e5851094 	str	r1, [r5, #148]	; 0x94
   3da80:	ebffbaa8 	bl	2c528 <DelayLoop>
   3da84:	e354001f 	cmp	r4, #31
   3da88:	8a00000a 	bhi	3dab8 <pinMode+0xcc>
   3da8c:	e3a00001 	mov	r0, #1
   3da90:	e1a04410 	lsl	r4, r0, r4
   3da94:	e5854098 	str	r4, [r5, #152]	; 0x98
   3da98:	e3a00096 	mov	r0, #150	; 0x96
   3da9c:	ebffbaa1 	bl	2c528 <DelayLoop>
   3daa0:	e3a03000 	mov	r3, #0
   3daa4:	e5853094 	str	r3, [r5, #148]	; 0x94
   3daa8:	e5853098 	str	r3, [r5, #152]	; 0x98
   3daac:	e8bd8070 	pop	{r4, r5, r6, pc}
   3dab0:	e582c000 	str	ip, [r2]
   3dab4:	e8bd8070 	pop	{r4, r5, r6, pc}
   3dab8:	e3a03001 	mov	r3, #1
   3dabc:	e2444020 	sub	r4, r4, #32
   3dac0:	e1a04413 	lsl	r4, r3, r4
   3dac4:	e3a00096 	mov	r0, #150	; 0x96
   3dac8:	e585409c 	str	r4, [r5, #156]	; 0x9c
   3dacc:	ebffba95 	bl	2c528 <DelayLoop>
   3dad0:	e3a03000 	mov	r3, #0
   3dad4:	e5853094 	str	r3, [r5, #148]	; 0x94
   3dad8:	e585309c 	str	r3, [r5, #156]	; 0x9c
   3dadc:	e8bd8070 	pop	{r4, r5, r6, pc}
   3dae0:	cccccccd 	.word	0xcccccccd
   3dae4:	66666667 	.word	0x66666667
   3dae8:	000477f8 	.word	0x000477f8
   3daec:	20200000 	.word	0x20200000

0003daf0 <digitalWrite>:
   3daf0:	e3510000 	cmp	r1, #0
   3daf4:	e3a03001 	mov	r3, #1
   3daf8:	0a000008 	beq	3db20 <digitalWrite+0x30>
   3dafc:	e350001f 	cmp	r0, #31
   3db00:	82400020 	subhi	r0, r0, #32
   3db04:	959f2038 	ldrls	r2, [pc, #56]	; 3db44 <digitalWrite+0x54>
   3db08:	859f2034 	ldrhi	r2, [pc, #52]	; 3db44 <digitalWrite+0x54>
   3db0c:	91a00013 	lslls	r0, r3, r0
   3db10:	81a00013 	lslhi	r0, r3, r0
   3db14:	9582001c 	strls	r0, [r2, #28]
   3db18:	85820020 	strhi	r0, [r2, #32]
   3db1c:	e12fff1e 	bx	lr
   3db20:	e350001f 	cmp	r0, #31
   3db24:	82400020 	subhi	r0, r0, #32
   3db28:	959f2014 	ldrls	r2, [pc, #20]	; 3db44 <digitalWrite+0x54>
   3db2c:	859f2010 	ldrhi	r2, [pc, #16]	; 3db44 <digitalWrite+0x54>
   3db30:	91a00013 	lslls	r0, r3, r0
   3db34:	81a00013 	lslhi	r0, r3, r0
   3db38:	95820028 	strls	r0, [r2, #40]	; 0x28
   3db3c:	8582002c 	strhi	r0, [r2, #44]	; 0x2c
   3db40:	e12fff1e 	bx	lr
   3db44:	20200000 	.word	0x20200000

0003db48 <digitalRead>:
   3db48:	e59f3018 	ldr	r3, [pc, #24]	; 3db68 <digitalRead+0x20>
   3db4c:	e350001f 	cmp	r0, #31
   3db50:	95933034 	ldrls	r3, [r3, #52]	; 0x34
   3db54:	85933038 	ldrhi	r3, [r3, #56]	; 0x38
   3db58:	82400020 	subhi	r0, r0, #32
   3db5c:	e1a00033 	lsr	r0, r3, r0
   3db60:	e2000001 	and	r0, r0, #1
   3db64:	e12fff1e 	bx	lr
   3db68:	20200000 	.word	0x20200000

0003db6c <lowlev_enable_irq>:
   3db6c:	e10f0000 	mrs	r0, CPSR
   3db70:	e3c00080 	bic	r0, r0, #128	; 0x80
   3db74:	e121f000 	msr	CPSR_c, r0
   3db78:	e12fff1e 	bx	lr

0003db7c <lowlev_disable_irq>:
   3db7c:	f10c0080 	cpsid	i
   3db80:	e1a0f00e 	mov	pc, lr

0003db84 <lowlev_enable_fiq>:
   3db84:	e10f0000 	mrs	r0, CPSR
   3db88:	e3c00040 	bic	r0, r0, #64	; 0x40
   3db8c:	e121f000 	msr	CPSR_c, r0
   3db90:	e12fff1e 	bx	lr

0003db94 <lowlev_disable_fiq>:
   3db94:	f10c0040 	cpsid	f
   3db98:	e1a0f00e 	mov	pc, lr

0003db9c <lowlev_cycleDelay>:
   3db9c:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
   3dba0:	e1a000c0 	asr	r0, r0, #1

0003dba4 <bloop>:
   3dba4:	e2500001 	subs	r0, r0, #1
   3dba8:	1afffffd 	bne	3dba4 <bloop>
   3dbac:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
   3dbb0:	e12fff1e 	bx	lr

0003dbb4 <membarrier>:
   3dbb4:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   3dbb8:	e3a03000 	mov	r3, #0
   3dbbc:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   3dbc0:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   3dbc4:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
   3dbc8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   3dbcc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3dbd0:	e12fff1e 	bx	lr

0003dbd4 <disable_mmu_and_cache>:
   3dbd4:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
   3dbd8:	e3c00a01 	bic	r0, r0, #4096	; 0x1000
   3dbdc:	e3c00004 	bic	r0, r0, #4
   3dbe0:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
   3dbe4:	e92d040f 	push	{r0, r1, r2, r3, sl}
   3dbe8:	e3a03000 	mov	r3, #0
   3dbec:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   3dbf0:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   3dbf4:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
   3dbf8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   3dbfc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3dc00:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   3dc04:	e3a00005 	mov	r0, #5
   3dc08:	e1c33000 	bic	r3, r3, r0
   3dc0c:	e3a00003 	mov	r0, #3
   3dc10:	e1c33580 	bic	r3, r3, r0, lsl #11
   3dc14:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   3dc18:	e8bd040f 	pop	{r0, r1, r2, r3, sl}
   3dc1c:	e12fff1e 	bx	lr

0003dc20 <blinkCE0>:
   3dc20:	e92d040f 	push	{r0, r1, r2, r3, sl}
   3dc24:	e59f0108 	ldr	r0, [pc, #264]	; 3dd34 <memcopyfast+0x5c>
   3dc28:	e3a01401 	mov	r1, #16777216	; 0x1000000
   3dc2c:	e5801000 	str	r1, [r0]
   3dc30:	e3a01c01 	mov	r1, #256	; 0x100
   3dc34:	e3a02c01 	mov	r2, #256	; 0x100
   3dc38:	e580101c 	str	r1, [r0, #28]
   3dc3c:	e3a0a000 	mov	sl, #0

0003dc40 <delay>:
   3dc40:	e28aa001 	add	sl, sl, #1
   3dc44:	e15a0002 	cmp	sl, r2
   3dc48:	1afffffc 	bne	3dc40 <delay>
   3dc4c:	e5801028 	str	r1, [r0, #40]	; 0x28
   3dc50:	e3a0a000 	mov	sl, #0

0003dc54 <delay2>:
   3dc54:	e28aa001 	add	sl, sl, #1
   3dc58:	e15a0002 	cmp	sl, r2
   3dc5c:	1afffffc 	bne	3dc54 <delay2>
   3dc60:	e8bd040f 	pop	{r0, r1, r2, r3, sl}
   3dc64:	e12fff1e 	bx	lr

0003dc68 <blinkLEDForever>:
   3dc68:	e59f00c4 	ldr	r0, [pc, #196]	; 3dd34 <memcopyfast+0x5c>
   3dc6c:	e3a0260f 	mov	r2, #15728640	; 0xf00000
   3dc70:	e3a01602 	mov	r1, #2097152	; 0x200000
   3dc74:	e5801010 	str	r1, [r0, #16]
   3dc78:	e3a01902 	mov	r1, #32768	; 0x8000
   3dc7c:	e5801020 	str	r1, [r0, #32]

0003dc80 <loopBlink>:
   3dc80:	e5801020 	str	r1, [r0, #32]
   3dc84:	e3a0a000 	mov	sl, #0

0003dc88 <delay1a>:
   3dc88:	e28aa001 	add	sl, sl, #1
   3dc8c:	e15a0002 	cmp	sl, r2
   3dc90:	1afffffc 	bne	3dc88 <delay1a>
   3dc94:	e580102c 	str	r1, [r0, #44]	; 0x2c
   3dc98:	e3a0a000 	mov	sl, #0

0003dc9c <delay2a>:
   3dc9c:	e28aa001 	add	sl, sl, #1
   3dca0:	e15a0002 	cmp	sl, r2
   3dca4:	1afffffc 	bne	3dc9c <delay2a>
   3dca8:	eafffff4 	b	3dc80 <loopBlink>

0003dcac <lowlev_blockCopyExecRelocatable>:
   3dcac:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

0003dcb0 <blockCopyExecRelocatableLoop>:
   3dcb0:	e4d13001 	ldrb	r3, [r1], #1
   3dcb4:	e4c03001 	strb	r3, [r0], #1
   3dcb8:	e2522001 	subs	r2, r2, #1
   3dcbc:	aafffffb 	bge	3dcb0 <blockCopyExecRelocatableLoop>
   3dcc0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   3dcc4:	e12fff10 	bx	r0

0003dcc8 <lowlev_blockCopyExecRelocatableLen>:
   3dcc8:	0000001c 	.word	0x0000001c

0003dccc <lowlev_goto>:
   3dccc:	e12fff10 	bx	r0

0003dcd0 <lowlev_store_abs8>:
   3dcd0:	e5c01000 	strb	r1, [r0]
   3dcd4:	e12fff1e 	bx	lr

0003dcd8 <memcopyfast>:
   3dcd8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   3dcdc:	e352007f 	cmp	r2, #127	; 0x7f
   3dce0:	9a00000b 	bls	3dd14 <memcopyfast+0x3c>
   3dce4:	e3110003 	tst	r1, #3
   3dce8:	1a000009 	bne	3dd14 <memcopyfast+0x3c>
   3dcec:	e3100003 	tst	r0, #3
   3dcf0:	1a000007 	bne	3dd14 <memcopyfast+0x3c>
   3dcf4:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   3dcf8:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   3dcfc:	e2422020 	sub	r2, r2, #32
   3dd00:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   3dd04:	f5d1f040 	pld	[r1, #64]	; 0x40
   3dd08:	e352001f 	cmp	r2, #31
   3dd0c:	8afffff9 	bhi	3dcf8 <memcopyfast+0x20>
   3dd10:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   3dd14:	e3520000 	cmp	r2, #0
   3dd18:	0a000003 	beq	3dd2c <memcopyfast+0x54>
   3dd1c:	e4d13001 	ldrb	r3, [r1], #1
   3dd20:	e2522001 	subs	r2, r2, #1
   3dd24:	e4c03001 	strb	r3, [r0], #1
   3dd28:	1afffffb 	bne	3dd1c <memcopyfast+0x44>
   3dd2c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   3dd30:	e12fff1e 	bx	lr
   3dd34:	20200000 	.word	0x20200000

0003dd38 <KeyConversion::getNumTypes()>:
   3dd38:	e3a00006 	mov	r0, #6
   3dd3c:	e12fff1e 	bx	lr

0003dd40 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>:
   3dd40:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dd44:	e5d0c1f1 	ldrb	ip, [r0, #497]	; 0x1f1
   3dd48:	e24dd00c 	sub	sp, sp, #12
   3dd4c:	e1a0b001 	mov	fp, r1
   3dd50:	e23c1001 	eors	r1, ip, #1
   3dd54:	e1a07000 	mov	r7, r0
   3dd58:	e1a09002 	mov	r9, r2
   3dd5c:	e1a08003 	mov	r8, r3
   3dd60:	e5dd6030 	ldrb	r6, [sp, #48]	; 0x30
   3dd64:	e58d1004 	str	r1, [sp, #4]
   3dd68:	0a000002 	beq	3dd78 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x38>
   3dd6c:	ebffd3bb 	bl	32c60 <BusAccess::controlRequestAndTake()>
   3dd70:	e3500000 	cmp	r0, #0
   3dd74:	1a00003d 	bne	3de70 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x130>
   3dd78:	e3a02040 	mov	r2, #64	; 0x40
   3dd7c:	e59f41b0 	ldr	r4, [pc, #432]	; 3df34 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x1f4>
   3dd80:	e1a0100b 	mov	r1, fp
   3dd84:	e5943008 	ldr	r3, [r4, #8]
   3dd88:	e1a00007 	mov	r0, r7
   3dd8c:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   3dd90:	e5843008 	str	r3, [r4, #8]
   3dd94:	e584201c 	str	r2, [r4, #28]
   3dd98:	ebffd62e 	bl	33658 <BusAccess::addrSet(unsigned int)>
   3dd9c:	e3a03801 	mov	r3, #65536	; 0x10000
   3dda0:	e3a00001 	mov	r0, #1
   3dda4:	e584301c 	str	r3, [r4, #28]
   3dda8:	ebffbfcf 	bl	2dcec <microsDelay>
   3ddac:	e59f3184 	ldr	r3, [pc, #388]	; 3df38 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x1f8>
   3ddb0:	e5972000 	ldr	r2, [r7]
   3ddb4:	e3560001 	cmp	r6, #1
   3ddb8:	e59f517c 	ldr	r5, [pc, #380]	; 3df3c <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x1fc>
   3ddbc:	11a05003 	movne	r5, r3
   3ddc0:	e3520011 	cmp	r2, #17
   3ddc4:	0a000030 	beq	3de8c <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x14c>
   3ddc8:	e3580000 	cmp	r8, #0
   3ddcc:	e3852c0e 	orr	r2, r5, #3584	; 0xe00
   3ddd0:	e385a801 	orr	sl, r5, #65536	; 0x10000
   3ddd4:	0a000021 	beq	3de60 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x120>
   3ddd8:	e1a03009 	mov	r3, r9
   3dddc:	e1a06009 	mov	r6, r9
   3dde0:	e59f5158 	ldr	r5, [pc, #344]	; 3df40 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x200>
   3dde4:	e59f9158 	ldr	r9, [pc, #344]	; 3df44 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x204>
   3dde8:	e0838008 	add	r8, r3, r8
   3ddec:	e04bb003 	sub	fp, fp, r3
   3ddf0:	ea000001 	b	3ddfc <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0xbc>
   3ddf4:	e1580006 	cmp	r8, r6
   3ddf8:	0a000018 	beq	3de60 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x120>
   3ddfc:	e3a01801 	mov	r1, #65536	; 0x10000
   3de00:	e5842028 	str	r2, [r4, #40]	; 0x28
   3de04:	e584901c 	str	r9, [r4, #28]
   3de08:	e5841028 	str	r1, [r4, #40]	; 0x28
   3de0c:	e5845028 	str	r5, [r4, #40]	; 0x28
   3de10:	e5845028 	str	r5, [r4, #40]	; 0x28
   3de14:	e5845028 	str	r5, [r4, #40]	; 0x28
   3de18:	e5845028 	str	r5, [r4, #40]	; 0x28
   3de1c:	e5845028 	str	r5, [r4, #40]	; 0x28
   3de20:	e5845028 	str	r5, [r4, #40]	; 0x28
   3de24:	e5845028 	str	r5, [r4, #40]	; 0x28
   3de28:	e5845028 	str	r5, [r4, #40]	; 0x28
   3de2c:	e5941034 	ldr	r1, [r4, #52]	; 0x34
   3de30:	e1a01a21 	lsr	r1, r1, #20
   3de34:	e4c61001 	strb	r1, [r6], #1
   3de38:	e086100b 	add	r1, r6, fp
   3de3c:	e31100ff 	tst	r1, #255	; 0xff
   3de40:	e584a01c 	str	sl, [r4, #28]
   3de44:	1affffea 	bne	3ddf4 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0xb4>
   3de48:	e1a00007 	mov	r0, r7
   3de4c:	e58d2000 	str	r2, [sp]
   3de50:	ebffd600 	bl	33658 <BusAccess::addrSet(unsigned int)>
   3de54:	e1580006 	cmp	r8, r6
   3de58:	e59d2000 	ldr	r2, [sp]
   3de5c:	1affffe6 	bne	3ddfc <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0xbc>
   3de60:	e59d3004 	ldr	r3, [sp, #4]
   3de64:	e3530000 	cmp	r3, #0
   3de68:	059d0004 	ldreq	r0, [sp, #4]
   3de6c:	1a000001 	bne	3de78 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x138>
   3de70:	e28dd00c 	add	sp, sp, #12
   3de74:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3de78:	e1a00007 	mov	r0, r7
   3de7c:	ebffd052 	bl	31fcc <BusAccess::controlRelease()>
   3de80:	e3a00000 	mov	r0, #0
   3de84:	e28dd00c 	add	sp, sp, #12
   3de88:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3de8c:	e3580000 	cmp	r8, #0
   3de90:	0afffff2 	beq	3de60 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x120>
   3de94:	e1a03009 	mov	r3, r9
   3de98:	e1a06009 	mov	r6, r9
   3de9c:	e3a0ac0e 	mov	sl, #3584	; 0xe00
   3dea0:	e1a09004 	mov	r9, r4
   3dea4:	e0838008 	add	r8, r3, r8
   3dea8:	e3a04c02 	mov	r4, #512	; 0x200
   3deac:	e04bb003 	sub	fp, fp, r3
   3deb0:	ea000002 	b	3dec0 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x180>
   3deb4:	e1580006 	cmp	r8, r6
   3deb8:	0affffe8 	beq	3de60 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x120>
   3debc:	e5972000 	ldr	r2, [r7]
   3dec0:	e3520011 	cmp	r2, #17
   3dec4:	13a02801 	movne	r2, #65536	; 0x10000
   3dec8:	1589a028 	strne	sl, [r9, #40]	; 0x28
   3decc:	0589a028 	streq	sl, [r9, #40]	; 0x28
   3ded0:	1589401c 	strne	r4, [r9, #28]
   3ded4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   3ded8:	15892028 	strne	r2, [r9, #40]	; 0x28
   3dedc:	0589401c 	streq	r4, [r9, #28]
   3dee0:	ebffff2d 	bl	3db9c <lowlev_cycleDelay>
   3dee4:	e5972000 	ldr	r2, [r7]
   3dee8:	e3a00f7d 	mov	r0, #500	; 0x1f4
   3deec:	e3520011 	cmp	r2, #17
   3def0:	13a02801 	movne	r2, #65536	; 0x10000
   3def4:	0589a028 	streq	sl, [r9, #40]	; 0x28
   3def8:	1589201c 	strne	r2, [r9, #28]
   3defc:	e5895028 	str	r5, [r9, #40]	; 0x28
   3df00:	ebffff25 	bl	3db9c <lowlev_cycleDelay>
   3df04:	e5992034 	ldr	r2, [r9, #52]	; 0x34
   3df08:	e1a00007 	mov	r0, r7
   3df0c:	e1a02a22 	lsr	r2, r2, #20
   3df10:	e4c62001 	strb	r2, [r6], #1
   3df14:	e589501c 	str	r5, [r9, #28]
   3df18:	ebffd5d7 	bl	3367c <BusAccess::addrLowInc()>
   3df1c:	e086100b 	add	r1, r6, fp
   3df20:	e31100ff 	tst	r1, #255	; 0xff
   3df24:	1affffe2 	bne	3deb4 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x174>
   3df28:	e1a00007 	mov	r0, r7
   3df2c:	ebffd5c9 	bl	33658 <BusAccess::addrSet(unsigned int)>
   3df30:	eaffffdf 	b	3deb4 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x174>
   3df34:	20200000 	.word	0x20200000
   3df38:	00040001 	.word	0x00040001
   3df3c:	00040002 	.word	0x00040002
   3df40:	00010e00 	.word	0x00010e00
   3df44:	00010200 	.word	0x00010200

0003df48 <BusAccess::rawBusControlEnable(bool)>:
   3df48:	e92d4070 	push	{r4, r5, r6, lr}
   3df4c:	e1a04001 	mov	r4, r1
   3df50:	e1a05000 	mov	r5, r0
   3df54:	e2244001 	eor	r4, r4, #1
   3df58:	ebffcc9e 	bl	311d8 <BusAccess::busAccessReinit()>
   3df5c:	e5c541c0 	strb	r4, [r5, #448]	; 0x1c0
   3df60:	e8bd8070 	pop	{r4, r5, r6, pc}

0003df64 <BusAccess::rawBusControlClearWait()>:
   3df64:	e92d4010 	push	{r4, lr}
   3df68:	e1a04000 	mov	r4, r0
   3df6c:	e3a01000 	mov	r1, #0
   3df70:	ebffd4b5 	bl	3324c <BusAccess::waitResetFlipFlops(bool)>
   3df74:	e1a00004 	mov	r0, r4
   3df78:	e8bd4010 	pop	{r4, lr}
   3df7c:	eaffce09 	b	317a8 <BusAccess::waitHandleReadRelease()>

0003df80 <BusAccess::rawBusControlWaitDisable()>:
   3df80:	eaffd4aa 	b	33230 <BusAccess::waitGenerationDisable()>

0003df84 <BusAccess::rawBusControlClockEnable(bool)>:
   3df84:	e3510000 	cmp	r1, #0
   3df88:	e92d4010 	push	{r4, lr}
   3df8c:	1a000004 	bne	3dfa4 <BusAccess::rawBusControlClockEnable(bool)+0x20>
   3df90:	ebffd27e 	bl	32990 <BusAccess::clockEnable(bool)>
   3df94:	e8bd4010 	pop	{r4, lr}
   3df98:	e3a01001 	mov	r1, #1
   3df9c:	e3a00004 	mov	r0, #4
   3dfa0:	eafffe91 	b	3d9ec <pinMode>
   3dfa4:	e1a04000 	mov	r4, r0
   3dfa8:	ebffd175 	bl	32584 <BusAccess::clockSetup()>
   3dfac:	e1a00004 	mov	r0, r4
   3dfb0:	e59f1010 	ldr	r1, [pc, #16]	; 3dfc8 <BusAccess::rawBusControlClockEnable(bool)+0x44>
   3dfb4:	ebffd1eb 	bl	32768 <BusAccess::clockSetFreqHz(unsigned long)>
   3dfb8:	e1a00004 	mov	r0, r4
   3dfbc:	e8bd4010 	pop	{r4, lr}
   3dfc0:	e3a01001 	mov	r1, #1
   3dfc4:	eaffd271 	b	32990 <BusAccess::clockEnable(bool)>
   3dfc8:	000f4240 	.word	0x000f4240

0003dfcc <BusAccess::rawBusControlTakeBus()>:
   3dfcc:	e92d4010 	push	{r4, lr}
   3dfd0:	ebffd322 	bl	32c60 <BusAccess::controlRequestAndTake()>
   3dfd4:	e16f0f10 	clz	r0, r0
   3dfd8:	e1a002a0 	lsr	r0, r0, #5
   3dfdc:	e8bd8010 	pop	{r4, pc}

0003dfe0 <BusAccess::rawBusControlReleaseBus()>:
   3dfe0:	eaffcff9 	b	31fcc <BusAccess::controlRelease()>

0003dfe4 <BusAccess::rawBusControlSetAddress(unsigned long)>:
   3dfe4:	eaffd59b 	b	33658 <BusAccess::addrSet(unsigned int)>

0003dfe8 <BusAccess::rawBusControlSetData(unsigned long)>:
   3dfe8:	e92d4070 	push	{r4, r5, r6, lr}
   3dfec:	e3a0cc02 	mov	ip, #512	; 0x200
   3dff0:	e3a0ed39 	mov	lr, #3648	; 0xe40
   3dff4:	e59f406c 	ldr	r4, [pc, #108]	; 3e068 <BusAccess::rawBusControlSetData(unsigned long)+0x80>
   3dff8:	e59f306c 	ldr	r3, [pc, #108]	; 3e06c <BusAccess::rawBusControlSetData(unsigned long)+0x84>
   3dffc:	e5942008 	ldr	r2, [r4, #8]
   3e000:	e1a01a01 	lsl	r1, r1, #20
   3e004:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   3e008:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
   3e00c:	e1823003 	orr	r3, r2, r3
   3e010:	e5843008 	str	r3, [r4, #8]
   3e014:	e22136ff 	eor	r3, r1, #267386880	; 0xff00000
   3e018:	e584101c 	str	r1, [r4, #28]
   3e01c:	e5843028 	str	r3, [r4, #40]	; 0x28
   3e020:	e584e028 	str	lr, [r4, #40]	; 0x28
   3e024:	e584c01c 	str	ip, [r4, #28]
   3e028:	e5903000 	ldr	r3, [r0]
   3e02c:	e3530011 	cmp	r3, #17
   3e030:	0a000007 	beq	3e054 <BusAccess::rawBusControlSetData(unsigned long)+0x6c>
   3e034:	e3a05801 	mov	r5, #65536	; 0x10000
   3e038:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   3e03c:	e5845028 	str	r5, [r4, #40]	; 0x28
   3e040:	ebfffed5 	bl	3db9c <lowlev_cycleDelay>
   3e044:	e3a03c0e 	mov	r3, #3584	; 0xe00
   3e048:	e584501c 	str	r5, [r4, #28]
   3e04c:	e5843028 	str	r3, [r4, #40]	; 0x28
   3e050:	e8bd8070 	pop	{r4, r5, r6, pc}
   3e054:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   3e058:	ebfffecf 	bl	3db9c <lowlev_cycleDelay>
   3e05c:	e3a03c0e 	mov	r3, #3584	; 0xe00
   3e060:	e5843028 	str	r3, [r4, #40]	; 0x28
   3e064:	e8bd8070 	pop	{r4, r5, r6, pc}
   3e068:	20200000 	.word	0x20200000
   3e06c:	00249249 	.word	0x00249249

0003e070 <BusAccess::rawBusControlReadRaw()>:
   3e070:	e59f3004 	ldr	r3, [pc, #4]	; 3e07c <BusAccess::rawBusControlReadRaw()+0xc>
   3e074:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   3e078:	e12fff1e 	bx	lr
   3e07c:	20200000 	.word	0x20200000

0003e080 <BusAccess::rawBusControlReadCtrl()>:
   3e080:	eaffd03d 	b	3217c <BusAccess::controlBusRead()>

0003e084 <BusAccess::rawBusControlReadAll(unsigned long&, unsigned long&, unsigned long&)>:
   3e084:	e92d4030 	push	{r4, r5, lr}
   3e088:	e24dd00c 	sub	sp, sp, #12
   3e08c:	e1a05001 	mov	r5, r1
   3e090:	e1a04000 	mov	r4, r0
   3e094:	e58d2004 	str	r2, [sp, #4]
   3e098:	e58d3000 	str	r3, [sp]
   3e09c:	ebffd036 	bl	3217c <BusAccess::controlBusRead()>
   3e0a0:	e5850000 	str	r0, [r5]
   3e0a4:	e1a00004 	mov	r0, r4
   3e0a8:	e59d2000 	ldr	r2, [sp]
   3e0ac:	e59d1004 	ldr	r1, [sp, #4]
   3e0b0:	e28dd00c 	add	sp, sp, #12
   3e0b4:	e8bd4030 	pop	{r4, r5, lr}
   3e0b8:	eaffd069 	b	32264 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>

0003e0bc <BusAccess::rawBusControlSetPin(unsigned long, bool)>:
   3e0bc:	e6ef0071 	uxtb	r0, r1
   3e0c0:	e1a01002 	mov	r1, r2
   3e0c4:	eafffe89 	b	3daf0 <digitalWrite>

0003e0c8 <BusAccess::rawBusControlGetPin(unsigned long)>:
   3e0c8:	e92d4010 	push	{r4, lr}
   3e0cc:	e6ef0071 	uxtb	r0, r1
   3e0d0:	ebfffe9c 	bl	3db48 <digitalRead>
   3e0d4:	e2500000 	subs	r0, r0, #0
   3e0d8:	13a00001 	movne	r0, #1
   3e0dc:	e8bd8010 	pop	{r4, pc}

0003e0e0 <BusAccess::rawBusControlReadPIB()>:
   3e0e0:	e59f3018 	ldr	r3, [pc, #24]	; 3e100 <BusAccess::rawBusControlReadPIB()+0x20>
   3e0e4:	e5932008 	ldr	r2, [r3, #8]
   3e0e8:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   3e0ec:	e5832008 	str	r2, [r3, #8]
   3e0f0:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   3e0f4:	e1a00a20 	lsr	r0, r0, #20
   3e0f8:	e6ef0070 	uxtb	r0, r0
   3e0fc:	e12fff1e 	bx	lr
   3e100:	20200000 	.word	0x20200000

0003e104 <BusAccess::rawBusControlWritePIB(unsigned long)>:
   3e104:	e59f3028 	ldr	r3, [pc, #40]	; 3e134 <BusAccess::rawBusControlWritePIB(unsigned long)+0x30>
   3e108:	e59f2028 	ldr	r2, [pc, #40]	; 3e138 <BusAccess::rawBusControlWritePIB(unsigned long)+0x34>
   3e10c:	e5930008 	ldr	r0, [r3, #8]
   3e110:	e1a01a01 	lsl	r1, r1, #20
   3e114:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
   3e118:	e20004ff 	and	r0, r0, #-16777216	; 0xff000000
   3e11c:	e1802002 	orr	r2, r0, r2
   3e120:	e22106ff 	eor	r0, r1, #267386880	; 0xff00000
   3e124:	e5832008 	str	r2, [r3, #8]
   3e128:	e583101c 	str	r1, [r3, #28]
   3e12c:	e5830028 	str	r0, [r3, #40]	; 0x28
   3e130:	e12fff1e 	bx	lr
   3e134:	20200000 	.word	0x20200000
   3e138:	00249249 	.word	0x00249249

0003e13c <BusAccess::rawBusControlMuxSet(unsigned long)>:
   3e13c:	e5903000 	ldr	r3, [r0]
   3e140:	e3530011 	cmp	r3, #17
   3e144:	0a000008 	beq	3e16c <BusAccess::rawBusControlMuxSet(unsigned long)+0x30>
   3e148:	e3a02801 	mov	r2, #65536	; 0x10000
   3e14c:	e3a00c0e 	mov	r0, #3584	; 0xe00
   3e150:	e59f302c 	ldr	r3, [pc, #44]	; 3e184 <BusAccess::rawBusControlMuxSet(unsigned long)+0x48>
   3e154:	e1a01481 	lsl	r1, r1, #9
   3e158:	e583201c 	str	r2, [r3, #28]
   3e15c:	e5830028 	str	r0, [r3, #40]	; 0x28
   3e160:	e583101c 	str	r1, [r3, #28]
   3e164:	e5832028 	str	r2, [r3, #40]	; 0x28
   3e168:	e12fff1e 	bx	lr
   3e16c:	e3a02c0e 	mov	r2, #3584	; 0xe00
   3e170:	e59f300c 	ldr	r3, [pc, #12]	; 3e184 <BusAccess::rawBusControlMuxSet(unsigned long)+0x48>
   3e174:	e1a01481 	lsl	r1, r1, #9
   3e178:	e5832028 	str	r2, [r3, #40]	; 0x28
   3e17c:	e583101c 	str	r1, [r3, #28]
   3e180:	e12fff1e 	bx	lr
   3e184:	20200000 	.word	0x20200000

0003e188 <BusAccess::rawBusControlMuxClear()>:
   3e188:	e5903000 	ldr	r3, [r0]
   3e18c:	e3530011 	cmp	r3, #17
   3e190:	03a02c0e 	moveq	r2, #3584	; 0xe00
   3e194:	13a01801 	movne	r1, #65536	; 0x10000
   3e198:	13a02c0e 	movne	r2, #3584	; 0xe00
   3e19c:	159f300c 	ldrne	r3, [pc, #12]	; 3e1b0 <BusAccess::rawBusControlMuxClear()+0x28>
   3e1a0:	059f3008 	ldreq	r3, [pc, #8]	; 3e1b0 <BusAccess::rawBusControlMuxClear()+0x28>
   3e1a4:	1583101c 	strne	r1, [r3, #28]
   3e1a8:	e5832028 	str	r2, [r3, #40]	; 0x28
   3e1ac:	e12fff1e 	bx	lr
   3e1b0:	20200000 	.word	0x20200000

0003e1b4 <BusAccess::rawBusControlTargetReset(unsigned long)>:
   3e1b4:	e5903000 	ldr	r3, [r0]
   3e1b8:	e92d4010 	push	{r4, lr}
   3e1bc:	e3530011 	cmp	r3, #17
   3e1c0:	e1a04000 	mov	r4, r0
   3e1c4:	0a000013 	beq	3e218 <BusAccess::rawBusControlTargetReset(unsigned long)+0x64>
   3e1c8:	e3a02801 	mov	r2, #65536	; 0x10000
   3e1cc:	e3a00c0e 	mov	r0, #3584	; 0xe00
   3e1d0:	e3a01c0a 	mov	r1, #2560	; 0xa00
   3e1d4:	e59f3054 	ldr	r3, [pc, #84]	; 3e230 <BusAccess::rawBusControlTargetReset(unsigned long)+0x7c>
   3e1d8:	e583201c 	str	r2, [r3, #28]
   3e1dc:	e5830028 	str	r0, [r3, #40]	; 0x28
   3e1e0:	e583101c 	str	r1, [r3, #28]
   3e1e4:	e5832028 	str	r2, [r3, #40]	; 0x28
   3e1e8:	e59f0044 	ldr	r0, [pc, #68]	; 3e234 <BusAccess::rawBusControlTargetReset(unsigned long)+0x80>
   3e1ec:	ebffbebe 	bl	2dcec <microsDelay>
   3e1f0:	e5943000 	ldr	r3, [r4]
   3e1f4:	e3530011 	cmp	r3, #17
   3e1f8:	03a02c0e 	moveq	r2, #3584	; 0xe00
   3e1fc:	13a01801 	movne	r1, #65536	; 0x10000
   3e200:	13a02c0e 	movne	r2, #3584	; 0xe00
   3e204:	159f3024 	ldrne	r3, [pc, #36]	; 3e230 <BusAccess::rawBusControlTargetReset(unsigned long)+0x7c>
   3e208:	059f3020 	ldreq	r3, [pc, #32]	; 3e230 <BusAccess::rawBusControlTargetReset(unsigned long)+0x7c>
   3e20c:	1583101c 	strne	r1, [r3, #28]
   3e210:	e5832028 	str	r2, [r3, #40]	; 0x28
   3e214:	e8bd8010 	pop	{r4, pc}
   3e218:	e3a01c0e 	mov	r1, #3584	; 0xe00
   3e21c:	e3a02c0a 	mov	r2, #2560	; 0xa00
   3e220:	e59f3008 	ldr	r3, [pc, #8]	; 3e230 <BusAccess::rawBusControlTargetReset(unsigned long)+0x7c>
   3e224:	e5831028 	str	r1, [r3, #40]	; 0x28
   3e228:	e583201c 	str	r2, [r3, #28]
   3e22c:	eaffffed 	b	3e1e8 <BusAccess::rawBusControlTargetReset(unsigned long)+0x34>
   3e230:	20200000 	.word	0x20200000
   3e234:	000186a0 	.word	0x000186a0

0003e238 <memTestDataBus(BusAccess&, unsigned long)>:
   3e238:	e3a03001 	mov	r3, #1
   3e23c:	e92d4070 	push	{r4, r5, r6, lr}
   3e240:	e24dd010 	sub	sp, sp, #16
   3e244:	e1a05000 	mov	r5, r0
   3e248:	e1a04001 	mov	r4, r1
   3e24c:	e3a06000 	mov	r6, #0
   3e250:	e5cd300e 	strb	r3, [sp, #14]
   3e254:	ea000003 	b	3e268 <memTestDataBus(BusAccess&, unsigned long)+0x30>
   3e258:	e6ef0072 	uxtb	r0, r2
   3e25c:	e3500000 	cmp	r0, #0
   3e260:	e5cd000e 	strb	r0, [sp, #14]
   3e264:	0a000010 	beq	3e2ac <memTestDataBus(BusAccess&, unsigned long)+0x74>
   3e268:	e3a03001 	mov	r3, #1
   3e26c:	e1a01004 	mov	r1, r4
   3e270:	e28d200e 	add	r2, sp, #14
   3e274:	e1a00005 	mov	r0, r5
   3e278:	e58d6000 	str	r6, [sp]
   3e27c:	ebffd28f 	bl	32cc0 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3e280:	e3a03001 	mov	r3, #1
   3e284:	e28d200f 	add	r2, sp, #15
   3e288:	e1a01004 	mov	r1, r4
   3e28c:	e1a00005 	mov	r0, r5
   3e290:	e58d6000 	str	r6, [sp]
   3e294:	ebfffea9 	bl	3dd40 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3e298:	e5dd000e 	ldrb	r0, [sp, #14]
   3e29c:	e5dd300f 	ldrb	r3, [sp, #15]
   3e2a0:	e1a02080 	lsl	r2, r0, #1
   3e2a4:	e1530000 	cmp	r3, r0
   3e2a8:	0affffea 	beq	3e258 <memTestDataBus(BusAccess&, unsigned long)+0x20>
   3e2ac:	e28dd010 	add	sp, sp, #16
   3e2b0:	e8bd8070 	pop	{r4, r5, r6, pc}

0003e2b4 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)>:
   3e2b4:	e3e0c055 	mvn	ip, #85	; 0x55
   3e2b8:	e3a03055 	mov	r3, #85	; 0x55
   3e2bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e2c0:	e2425001 	sub	r5, r2, #1
   3e2c4:	e24dd014 	sub	sp, sp, #20
   3e2c8:	e2159001 	ands	r9, r5, #1
   3e2cc:	e1a06000 	mov	r6, r0
   3e2d0:	e1a07001 	mov	r7, r1
   3e2d4:	e5cdc00c 	strb	ip, [sp, #12]
   3e2d8:	e5cd300d 	strb	r3, [sp, #13]
   3e2dc:	0a000054 	beq	3e434 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x180>
   3e2e0:	e1a04009 	mov	r4, r9
   3e2e4:	e3a08000 	mov	r8, #0
   3e2e8:	e3a03001 	mov	r3, #1
   3e2ec:	e0871004 	add	r1, r7, r4
   3e2f0:	e1a00006 	mov	r0, r6
   3e2f4:	e1a04314 	lsl	r4, r4, r3
   3e2f8:	e58d8000 	str	r8, [sp]
   3e2fc:	e28d200c 	add	r2, sp, #12
   3e300:	ebffd26e 	bl	32cc0 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3e304:	e015b004 	ands	fp, r5, r4
   3e308:	1afffff6 	bne	3e2e8 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x34>
   3e30c:	e3a03001 	mov	r3, #1
   3e310:	e1a01007 	mov	r1, r7
   3e314:	e1a00006 	mov	r0, r6
   3e318:	e58db000 	str	fp, [sp]
   3e31c:	e28d200d 	add	r2, sp, #13
   3e320:	ebffd266 	bl	32cc0 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3e324:	e1a04009 	mov	r4, r9
   3e328:	ea000001 	b	3e334 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x80>
   3e32c:	e0158004 	ands	r8, r5, r4
   3e330:	0a00000e 	beq	3e370 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0xbc>
   3e334:	e087a004 	add	sl, r7, r4
   3e338:	e3a03001 	mov	r3, #1
   3e33c:	e28d200f 	add	r2, sp, #15
   3e340:	e1a0100a 	mov	r1, sl
   3e344:	e1a00006 	mov	r0, r6
   3e348:	e58db000 	str	fp, [sp]
   3e34c:	ebfffe7b 	bl	3dd40 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3e350:	e5dd200f 	ldrb	r2, [sp, #15]
   3e354:	e5dd300c 	ldrb	r3, [sp, #12]
   3e358:	e1a04084 	lsl	r4, r4, #1
   3e35c:	e1520003 	cmp	r2, r3
   3e360:	0afffff1 	beq	3e32c <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x78>
   3e364:	e1a0000a 	mov	r0, sl
   3e368:	e28dd014 	add	sp, sp, #20
   3e36c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e370:	e3a03001 	mov	r3, #1
   3e374:	e1a01007 	mov	r1, r7
   3e378:	e1a00006 	mov	r0, r6
   3e37c:	e58d8000 	str	r8, [sp]
   3e380:	e28d200c 	add	r2, sp, #12
   3e384:	ebffd24d 	bl	32cc0 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3e388:	e1a0b009 	mov	fp, r9
   3e38c:	e087a00b 	add	sl, r7, fp
   3e390:	e1a0100a 	mov	r1, sl
   3e394:	e3a03001 	mov	r3, #1
   3e398:	e28d200d 	add	r2, sp, #13
   3e39c:	e1a00006 	mov	r0, r6
   3e3a0:	e58d8000 	str	r8, [sp]
   3e3a4:	ebffd245 	bl	32cc0 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3e3a8:	e3a03001 	mov	r3, #1
   3e3ac:	e28d200e 	add	r2, sp, #14
   3e3b0:	e1a01007 	mov	r1, r7
   3e3b4:	e1a00006 	mov	r0, r6
   3e3b8:	e58d8000 	str	r8, [sp]
   3e3bc:	ebfffe5f 	bl	3dd40 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3e3c0:	e5dd200e 	ldrb	r2, [sp, #14]
   3e3c4:	e5dd300c 	ldrb	r3, [sp, #12]
   3e3c8:	e1520003 	cmp	r2, r3
   3e3cc:	1affffe4 	bne	3e364 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0xb0>
   3e3d0:	e1a04009 	mov	r4, r9
   3e3d4:	e3a03001 	mov	r3, #1
   3e3d8:	e28d200f 	add	r2, sp, #15
   3e3dc:	e0871004 	add	r1, r7, r4
   3e3e0:	e1a00006 	mov	r0, r6
   3e3e4:	e58d8000 	str	r8, [sp]
   3e3e8:	ebfffe54 	bl	3dd40 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3e3ec:	e5dd200f 	ldrb	r2, [sp, #15]
   3e3f0:	e5dd300c 	ldrb	r3, [sp, #12]
   3e3f4:	e1520003 	cmp	r2, r3
   3e3f8:	1154000b 	cmpne	r4, fp
   3e3fc:	e1a04084 	lsl	r4, r4, #1
   3e400:	1affffd7 	bne	3e364 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0xb0>
   3e404:	e0153004 	ands	r3, r5, r4
   3e408:	1afffff1 	bne	3e3d4 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x120>
   3e40c:	e1a0100a 	mov	r1, sl
   3e410:	e58d3000 	str	r3, [sp]
   3e414:	e1a00006 	mov	r0, r6
   3e418:	e3a03001 	mov	r3, #1
   3e41c:	e1a0b08b 	lsl	fp, fp, #1
   3e420:	e28d200c 	add	r2, sp, #12
   3e424:	ebffd225 	bl	32cc0 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3e428:	e015a00b 	ands	sl, r5, fp
   3e42c:	1affffd6 	bne	3e38c <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0xd8>
   3e430:	eaffffcb 	b	3e364 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0xb0>
   3e434:	e28d200d 	add	r2, sp, #13
   3e438:	e3a03001 	mov	r3, #1
   3e43c:	e58d9000 	str	r9, [sp]
   3e440:	ebffd21e 	bl	32cc0 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3e444:	e1a01007 	mov	r1, r7
   3e448:	e1a00006 	mov	r0, r6
   3e44c:	e3a03001 	mov	r3, #1
   3e450:	e58d9000 	str	r9, [sp]
   3e454:	e28d200c 	add	r2, sp, #12
   3e458:	e1a0a009 	mov	sl, r9
   3e45c:	ebffd217 	bl	32cc0 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3e460:	eaffffbf 	b	3e364 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0xb0>

0003e464 <memTestDevice(BusAccess&, unsigned long, unsigned long)>:
   3e464:	e3a03001 	mov	r3, #1
   3e468:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3e46c:	e3520000 	cmp	r2, #0
   3e470:	e24dd010 	sub	sp, sp, #16
   3e474:	e5cd300d 	strb	r3, [sp, #13]
   3e478:	0a00004b 	beq	3e5ac <memTestDevice(BusAccess&, unsigned long, unsigned long)+0x148>
   3e47c:	e1a05000 	mov	r5, r0
   3e480:	e1a07001 	mov	r7, r1
   3e484:	e1a04001 	mov	r4, r1
   3e488:	e3a08000 	mov	r8, #0
   3e48c:	e0826001 	add	r6, r2, r1
   3e490:	e3a03001 	mov	r3, #1
   3e494:	e1a01004 	mov	r1, r4
   3e498:	e1a00005 	mov	r0, r5
   3e49c:	e58d8000 	str	r8, [sp]
   3e4a0:	e28d200d 	add	r2, sp, #13
   3e4a4:	ebffd205 	bl	32cc0 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3e4a8:	e5dd300d 	ldrb	r3, [sp, #13]
   3e4ac:	e2844001 	add	r4, r4, #1
   3e4b0:	e2833001 	add	r3, r3, #1
   3e4b4:	e1560004 	cmp	r6, r4
   3e4b8:	e5cd300d 	strb	r3, [sp, #13]
   3e4bc:	1afffff3 	bne	3e490 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0x2c>
   3e4c0:	e3a03001 	mov	r3, #1
   3e4c4:	e1a04007 	mov	r4, r7
   3e4c8:	e3a08000 	mov	r8, #0
   3e4cc:	e5cd300d 	strb	r3, [sp, #13]
   3e4d0:	ea00000d 	b	3e50c <memTestDevice(BusAccess&, unsigned long, unsigned long)+0xa8>
   3e4d4:	e1e0c003 	mvn	ip, r3
   3e4d8:	e1a01004 	mov	r1, r4
   3e4dc:	e3a03001 	mov	r3, #1
   3e4e0:	e1a00005 	mov	r0, r5
   3e4e4:	e58d8000 	str	r8, [sp]
   3e4e8:	e28d200e 	add	r2, sp, #14
   3e4ec:	e5cdc00e 	strb	ip, [sp, #14]
   3e4f0:	ebffd1f2 	bl	32cc0 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3e4f4:	e5dd300d 	ldrb	r3, [sp, #13]
   3e4f8:	e2844001 	add	r4, r4, #1
   3e4fc:	e2833001 	add	r3, r3, #1
   3e500:	e1540006 	cmp	r4, r6
   3e504:	e5cd300d 	strb	r3, [sp, #13]
   3e508:	0a00000c 	beq	3e540 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0xdc>
   3e50c:	e3a03001 	mov	r3, #1
   3e510:	e28d200f 	add	r2, sp, #15
   3e514:	e1a01004 	mov	r1, r4
   3e518:	e1a00005 	mov	r0, r5
   3e51c:	e58d8000 	str	r8, [sp]
   3e520:	ebfffe06 	bl	3dd40 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3e524:	e5dd200d 	ldrb	r2, [sp, #13]
   3e528:	e5dd300f 	ldrb	r3, [sp, #15]
   3e52c:	e1530002 	cmp	r3, r2
   3e530:	0affffe7 	beq	3e4d4 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0x70>
   3e534:	e1a00004 	mov	r0, r4
   3e538:	e28dd010 	add	sp, sp, #16
   3e53c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3e540:	e3a03001 	mov	r3, #1
   3e544:	e3a04000 	mov	r4, #0
   3e548:	e5cd300d 	strb	r3, [sp, #13]
   3e54c:	ea000006 	b	3e56c <memTestDevice(BusAccess&, unsigned long, unsigned long)+0x108>
   3e550:	e5dd300d 	ldrb	r3, [sp, #13]
   3e554:	e2877001 	add	r7, r7, #1
   3e558:	e2833001 	add	r3, r3, #1
   3e55c:	e6ef3073 	uxtb	r3, r3
   3e560:	e1570006 	cmp	r7, r6
   3e564:	e5cd300d 	strb	r3, [sp, #13]
   3e568:	0a00000f 	beq	3e5ac <memTestDevice(BusAccess&, unsigned long, unsigned long)+0x148>
   3e56c:	e1e0c003 	mvn	ip, r3
   3e570:	e28d200f 	add	r2, sp, #15
   3e574:	e3a03001 	mov	r3, #1
   3e578:	e1a01007 	mov	r1, r7
   3e57c:	e1a00005 	mov	r0, r5
   3e580:	e58d4000 	str	r4, [sp]
   3e584:	e5cdc00e 	strb	ip, [sp, #14]
   3e588:	ebfffdec 	bl	3dd40 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3e58c:	e5dd200f 	ldrb	r2, [sp, #15]
   3e590:	e5dd300e 	ldrb	r3, [sp, #14]
   3e594:	e1520003 	cmp	r2, r3
   3e598:	0affffec 	beq	3e550 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0xec>
   3e59c:	e1a04007 	mov	r4, r7
   3e5a0:	e1a00004 	mov	r0, r4
   3e5a4:	e28dd010 	add	sp, sp, #16
   3e5a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3e5ac:	e3a04000 	mov	r4, #0
   3e5b0:	e1a00004 	mov	r0, r4
   3e5b4:	e28dd010 	add	sp, sp, #16
   3e5b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
