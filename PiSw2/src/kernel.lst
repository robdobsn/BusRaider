
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea00841e 	b	290e0 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e92d4010 	push	{r4, lr}
    806c:	e24dd949 	sub	sp, sp, #1196032	; 0x124000
    8070:	e24ddea1 	sub	sp, sp, #2576	; 0xa10
    8074:	e24dd008 	sub	sp, sp, #8
    8078:	e1a0000d 	mov	r0, sp
    807c:	eb00000f 	bl	80c0 <CKernel::CKernel()>
    8080:	e1a0000d 	mov	r0, sp
    8084:	eb00007f 	bl	8288 <CKernel::Initialize()>
    8088:	e2504000 	subs	r4, r0, #0
    808c:	0a000004 	beq	80a4 <main+0x3c>
    8090:	e1a0000d 	mov	r0, sp
    8094:	eb0000af 	bl	8358 <CKernel::Run()>
    8098:	e2404002 	sub	r4, r0, #2
    809c:	e16f4f14 	clz	r4, r4
    80a0:	e1a042a4 	lsr	r4, r4, #5
    80a4:	e1a0000d 	mov	r0, sp
    80a8:	eb00004e 	bl	81e8 <CKernel::~CKernel()>
    80ac:	e1a00004 	mov	r0, r4
    80b0:	e28dd949 	add	sp, sp, #1196032	; 0x124000
    80b4:	e28ddea1 	add	sp, sp, #2576	; 0xa10
    80b8:	e28dd008 	add	sp, sp, #8
    80bc:	e8bd8010 	pop	{r4, pc}

000080c0 <CKernel::CKernel()>:
    80c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80c4:	e1a04000 	mov	r4, r0
    80c8:	e24dd018 	sub	sp, sp, #24
    80cc:	eb00d32a 	bl	3cd7c <Display::Display()>
    80d0:	e2840a01 	add	r0, r4, #4096	; 0x1000
    80d4:	e2845c11 	add	r5, r4, #4352	; 0x1100
    80d8:	e3a01001 	mov	r1, #1
    80dc:	e2800030 	add	r0, r0, #48	; 0x30
    80e0:	eb008df0 	bl	2b8a8 <CMemorySystem::CMemorySystem(bool)>
    80e4:	e2858018 	add	r8, r5, #24
    80e8:	e3a01000 	mov	r1, #0
    80ec:	e285000c 	add	r0, r5, #12
    80f0:	eb007150 	bl	24638 <CActLED::CActLED(bool)>
    80f4:	e2845d65 	add	r5, r4, #6464	; 0x1940
    80f8:	e1a00008 	mov	r0, r8
    80fc:	eb007877 	bl	262e0 <CKernelOptions::CKernelOptions()>
    8100:	e2850034 	add	r0, r5, #52	; 0x34
    8104:	eb007392 	bl	24f54 <CDeviceNameService::CDeviceNameService()>
    8108:	e2846d66 	add	r6, r4, #6528	; 0x1980
    810c:	e285003c 	add	r0, r5, #60	; 0x3c
    8110:	eb008ce9 	bl	2b4bc <CExceptionHandler::CExceptionHandler()>
    8114:	e1a00006 	mov	r0, r6
    8118:	eb008f2e 	bl	2bdd8 <CInterruptSystem::CInterruptSystem()>
    811c:	e3a03000 	mov	r3, #0
    8120:	e2847d6f 	add	r7, r4, #7104	; 0x1bc0
    8124:	e1a02003 	mov	r2, r3
    8128:	e1a01006 	mov	r1, r6
    812c:	e1a00007 	mov	r0, r7
    8130:	e1a05003 	mov	r5, r3
    8134:	eb009386 	bl	2cf54 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)>
    8138:	e2842c6a 	add	r2, r4, #27136	; 0x6a00
    813c:	e28220f0 	add	r2, r2, #240	; 0xf0
    8140:	e1a01006 	mov	r1, r6
    8144:	e1a00002 	mov	r0, r2
    8148:	e58d2014 	str	r2, [sp, #20]
    814c:	eb008425 	bl	291e8 <CTimer::CTimer(CInterruptSystem*)>
    8150:	e1a00008 	mov	r0, r8
    8154:	eb00782c 	bl	2620c <CKernelOptions::GetLogLevel() const>
    8158:	e1a01000 	mov	r1, r0
    815c:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    8160:	e59d2014 	ldr	r2, [sp, #20]
    8164:	e2848b1b 	add	r8, r4, #27648	; 0x6c00
    8168:	e280002c 	add	r0, r0, #44	; 0x2c
    816c:	eb00796f 	bl	26730 <CLogger::CLogger(unsigned int, CTimer*)>
    8170:	e1a01006 	mov	r1, r6
    8174:	e59d2014 	ldr	r2, [sp, #20]
    8178:	e2880024 	add	r0, r8, #36	; 0x24
    817c:	eb0006ca 	bl	9cac <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>
    8180:	e28800a8 	add	r0, r8, #168	; 0xa8
    8184:	eb006f71 	bl	23f50 <CScheduler::CScheduler()>
    8188:	e59fc050 	ldr	ip, [pc, #80]	; 81e0 <CKernel::CKernel()+0x120>
    818c:	e2840c6d 	add	r0, r4, #27904	; 0x6d00
    8190:	e1a03005 	mov	r3, r5
    8194:	e1a02005 	mov	r2, r5
    8198:	e1a01005 	mov	r1, r5
    819c:	e58dc004 	str	ip, [sp, #4]
    81a0:	e58d5008 	str	r5, [sp, #8]
    81a4:	e58d5000 	str	r5, [sp]
    81a8:	e280000c 	add	r0, r0, #12
    81ac:	eb0044f5 	bl	19588 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>
    81b0:	e2840c6e 	add	r0, r4, #28160	; 0x6e00
    81b4:	e1a02007 	mov	r2, r7
    81b8:	e1a01004 	mov	r1, r4
    81bc:	e2800038 	add	r0, r0, #56	; 0x38
    81c0:	eb0000a8 	bl	8468 <BusRaiderApp::BusRaiderApp(Display&, CUartMaxiSerialDevice&)>
    81c4:	e1a00004 	mov	r0, r4
    81c8:	e59f2014 	ldr	r2, [pc, #20]	; 81e4 <CKernel::CKernel()+0x124>
    81cc:	e2843949 	add	r3, r4, #1196032	; 0x124000
    81d0:	e5824000 	str	r4, [r2]
    81d4:	e5c35a14 	strb	r5, [r3, #2580]	; 0xa14
    81d8:	e28dd018 	add	sp, sp, #24
    81dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    81e0:	0004064c 	.word	0x0004064c
    81e4:	0005cdf0 	.word	0x0005cdf0

000081e8 <CKernel::~CKernel()>:
    81e8:	e92d4070 	push	{r4, r5, r6, lr}
    81ec:	e1a04000 	mov	r4, r0
    81f0:	e2800c6e 	add	r0, r0, #28160	; 0x6e00
    81f4:	e28000b4 	add	r0, r0, #180	; 0xb4
    81f8:	eb00a32f 	bl	30ebc <CommsManager::~CommsManager()>
    81fc:	e2840c6d 	add	r0, r4, #27904	; 0x6d00
    8200:	e2845b1b 	add	r5, r4, #27648	; 0x6c00
    8204:	e280000c 	add	r0, r0, #12
    8208:	eb0045ab 	bl	198bc <CNetSubSystem::~CNetSubSystem()>
    820c:	e28500a8 	add	r0, r5, #168	; 0xa8
    8210:	eb006f6a 	bl	23fc0 <CScheduler::~CScheduler()>
    8214:	e2850024 	add	r0, r5, #36	; 0x24
    8218:	eb000f50 	bl	bf60 <CDWHCIDevice::~CDWHCIDevice()>
    821c:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    8220:	e280002c 	add	r0, r0, #44	; 0x2c
    8224:	eb007957 	bl	26788 <CLogger::~CLogger()>
    8228:	e2840c6a 	add	r0, r4, #27136	; 0x6a00
    822c:	e28000f0 	add	r0, r0, #240	; 0xf0
    8230:	eb00840d 	bl	2926c <CTimer::~CTimer()>
    8234:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    8238:	eb0093c6 	bl	2d158 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>
    823c:	e2846d65 	add	r6, r4, #6464	; 0x1940
    8240:	e2840d66 	add	r0, r4, #6528	; 0x1980
    8244:	eb008eee 	bl	2be04 <CInterruptSystem::~CInterruptSystem()>
    8248:	e286003c 	add	r0, r6, #60	; 0x3c
    824c:	eb008cbf 	bl	2b550 <CExceptionHandler::~CExceptionHandler()>
    8250:	e2845c11 	add	r5, r4, #4352	; 0x1100
    8254:	e2860034 	add	r0, r6, #52	; 0x34
    8258:	eb00734e 	bl	24f98 <CDeviceNameService::~CDeviceNameService()>
    825c:	e2850018 	add	r0, r5, #24
    8260:	eb0077dd 	bl	261dc <CKernelOptions::~CKernelOptions()>
    8264:	e285000c 	add	r0, r5, #12
    8268:	eb007118 	bl	246d0 <CActLED::~CActLED()>
    826c:	e2840a01 	add	r0, r4, #4096	; 0x1000
    8270:	e2800030 	add	r0, r0, #48	; 0x30
    8274:	eb008ddb 	bl	2b9e8 <CMemorySystem::~CMemorySystem()>
    8278:	e1a00004 	mov	r0, r4
    827c:	eb00d235 	bl	3cb58 <Display::~Display()>
    8280:	e1a00004 	mov	r0, r4
    8284:	e8bd8070 	pop	{r4, r5, r6, pc}

00008288 <CKernel::Initialize()>:
    8288:	e92d4070 	push	{r4, r5, r6, lr}
    828c:	e1a04000 	mov	r4, r0
    8290:	e2800d66 	add	r0, r0, #6528	; 0x1980
    8294:	eb008ee9 	bl	2be40 <CInterruptSystem::Initialize()>
    8298:	e3500000 	cmp	r0, #0
    829c:	1a000002 	bne	82ac <CKernel::Initialize()+0x24>
    82a0:	e3a05000 	mov	r5, #0
    82a4:	e1a00005 	mov	r0, r5
    82a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    82ac:	e1a00004 	mov	r0, r4
    82b0:	eb00d2bd 	bl	3cdac <Display::init()>
    82b4:	e3500000 	cmp	r0, #0
    82b8:	0afffff8 	beq	82a0 <CKernel::Initialize()+0x18>
    82bc:	e2840c11 	add	r0, r4, #4352	; 0x1100
    82c0:	e2800018 	add	r0, r0, #24
    82c4:	eb0077cd 	bl	26200 <CKernelOptions::GetLogDevice() const>
    82c8:	e1a01000 	mov	r1, r0
    82cc:	e2840d65 	add	r0, r4, #6464	; 0x1940
    82d0:	e3a02000 	mov	r2, #0
    82d4:	e2800034 	add	r0, r0, #52	; 0x34
    82d8:	eb0073b5 	bl	251b4 <CDeviceNameService::GetDevice(char const*, bool)>
    82dc:	e1a01000 	mov	r1, r0
    82e0:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    82e4:	e3510000 	cmp	r1, #0
    82e8:	01a01004 	moveq	r1, r4
    82ec:	e280002c 	add	r0, r0, #44	; 0x2c
    82f0:	eb007943 	bl	26804 <CLogger::Initialize(CDevice*)>
    82f4:	e3500000 	cmp	r0, #0
    82f8:	0affffe8 	beq	82a0 <CKernel::Initialize()+0x18>
    82fc:	e59f3050 	ldr	r3, [pc, #80]	; 8354 <CKernel::Initialize()+0xcc>
    8300:	e3a01ae1 	mov	r1, #921600	; 0xe1000
    8304:	e1a02003 	mov	r2, r3
    8308:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    830c:	eb0093f9 	bl	2d2f8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)>
    8310:	e3500000 	cmp	r0, #0
    8314:	0affffe1 	beq	82a0 <CKernel::Initialize()+0x18>
    8318:	e2840c6a 	add	r0, r4, #27136	; 0x6a00
    831c:	e28000f0 	add	r0, r0, #240	; 0xf0
    8320:	eb00867c 	bl	29d18 <CTimer::Initialize()>
    8324:	e3500000 	cmp	r0, #0
    8328:	0affffdc 	beq	82a0 <CKernel::Initialize()+0x18>
    832c:	e2840b1b 	add	r0, r4, #27648	; 0x6c00
    8330:	e2800024 	add	r0, r0, #36	; 0x24
    8334:	eb000f6e 	bl	c0f4 <CDWHCIDevice::Initialize()>
    8338:	e2505000 	subs	r5, r0, #0
    833c:	0affffd7 	beq	82a0 <CKernel::Initialize()+0x18>
    8340:	e2840c6e 	add	r0, r4, #28160	; 0x6e00
    8344:	e2800038 	add	r0, r0, #56	; 0x38
    8348:	eb000085 	bl	8564 <BusRaiderApp::init()>
    834c:	e1a00005 	mov	r0, r5
    8350:	e8bd8070 	pop	{r4, r5, r6, pc}
    8354:	000f4240 	.word	0x000f4240

00008358 <CKernel::Run()>:
    8358:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    835c:	e1a06000 	mov	r6, r0
    8360:	e2800d65 	add	r0, r0, #6464	; 0x1940
    8364:	e3a02000 	mov	r2, #0
    8368:	e59f10c4 	ldr	r1, [pc, #196]	; 8434 <CKernel::Run()+0xdc>
    836c:	e2800034 	add	r0, r0, #52	; 0x34
    8370:	eb00738f 	bl	251b4 <CDeviceNameService::GetDevice(char const*, bool)>
    8374:	e2505000 	subs	r5, r0, #0
    8378:	0a00001f 	beq	83fc <CKernel::Run()+0xa4>
    837c:	e3a02001 	mov	r2, #1
    8380:	e2864c6e 	add	r4, r6, #28160	; 0x6e00
    8384:	e2844038 	add	r4, r4, #56	; 0x38
    8388:	e1a00004 	mov	r0, r4
    838c:	e1a01002 	mov	r1, r2
    8390:	eb0000c0 	bl	8698 <BusRaiderApp::peripheralStatus(bool, bool)>
    8394:	e2867c6b 	add	r7, r6, #27392	; 0x6b00
    8398:	e287702c 	add	r7, r7, #44	; 0x2c
    839c:	e1a00005 	mov	r0, r5
    83a0:	e59f1090 	ldr	r1, [pc, #144]	; 8438 <CKernel::Run()+0xe0>
    83a4:	eb0005a3 	bl	9a38 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>
    83a8:	e2865949 	add	r5, r6, #1196032	; 0x124000
    83ac:	ea000004 	b	83c4 <CKernel::Run()+0x6c>
    83b0:	e5d53a14 	ldrb	r3, [r5, #2580]	; 0xa14
    83b4:	e3530000 	cmp	r3, #0
    83b8:	1a000004 	bne	83d0 <CKernel::Run()+0x78>
    83bc:	e1a00004 	mov	r0, r4
    83c0:	eb0003a4 	bl	9258 <BusRaiderApp::service()>
    83c4:	eb008a0f 	bl	2ac08 <IsChainBootEnabled>
    83c8:	e3500000 	cmp	r0, #0
    83cc:	0afffff7 	beq	83b0 <CKernel::Run()+0x58>
    83d0:	e1a00007 	mov	r0, r7
    83d4:	e3a02003 	mov	r2, #3
    83d8:	e59f305c 	ldr	r3, [pc, #92]	; 843c <CKernel::Run()+0xe4>
    83dc:	e59f105c 	ldr	r1, [pc, #92]	; 8440 <CKernel::Run()+0xe8>
    83e0:	eb00791a 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    83e4:	e2860b1b 	add	r0, r6, #27648	; 0x6c00
    83e8:	e3a01001 	mov	r1, #1
    83ec:	e28000a8 	add	r0, r0, #168	; 0xa8
    83f0:	eb007005 	bl	2440c <CScheduler::Sleep(unsigned int)>
    83f4:	e3a00002 	mov	r0, #2
    83f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    83fc:	e2867c6b 	add	r7, r6, #27392	; 0x6b00
    8400:	e287702c 	add	r7, r7, #44	; 0x2c
    8404:	e2864c6e 	add	r4, r6, #28160	; 0x6e00
    8408:	e1a00007 	mov	r0, r7
    840c:	e3a02001 	mov	r2, #1
    8410:	e59f302c 	ldr	r3, [pc, #44]	; 8444 <CKernel::Run()+0xec>
    8414:	e59f1024 	ldr	r1, [pc, #36]	; 8440 <CKernel::Run()+0xe8>
    8418:	e2844038 	add	r4, r4, #56	; 0x38
    841c:	eb00790b 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8420:	e1a00004 	mov	r0, r4
    8424:	e1a02005 	mov	r2, r5
    8428:	e3a01001 	mov	r1, #1
    842c:	eb000099 	bl	8698 <BusRaiderApp::peripheralStatus(bool, bool)>
    8430:	eaffffd9 	b	839c <CKernel::Run()+0x44>
    8434:	00040658 	.word	0x00040658
    8438:	00008448 	.word	0x00008448
    843c:	00040674 	.word	0x00040674
    8440:	000406e0 	.word	0x000406e0
    8444:	00040660 	.word	0x00040660

00008448 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)>:
    8448:	e59f3014 	ldr	r3, [pc, #20]	; 8464 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x1c>
    844c:	e1a02001 	mov	r2, r1
    8450:	e5933000 	ldr	r3, [r3]
    8454:	e1a01000 	mov	r1, r0
    8458:	e2830c6e 	add	r0, r3, #28160	; 0x6e00
    845c:	e2800038 	add	r0, r0, #56	; 0x38
    8460:	ea000219 	b	8ccc <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)>
    8464:	0005cdf0 	.word	0x0005cdf0

00008468 <BusRaiderApp::BusRaiderApp(Display&, CUartMaxiSerialDevice&)>:
    8468:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    846c:	e3a04000 	mov	r4, #0
    8470:	e1a05000 	mov	r5, r0
    8474:	e280807c 	add	r8, r0, #124	; 0x7c
    8478:	e2806b1e 	add	r6, r0, #30720	; 0x7800
    847c:	e5801078 	str	r1, [r0, #120]	; 0x78
    8480:	e2866098 	add	r6, r6, #152	; 0x98
    8484:	e1a01002 	mov	r1, r2
    8488:	e1a00008 	mov	r0, r8
    848c:	e1a02004 	mov	r2, r4
    8490:	e5c54008 	strb	r4, [r5, #8]
    8494:	e5854070 	str	r4, [r5, #112]	; 0x70
    8498:	eb00a261 	bl	30e24 <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)>
    849c:	e59f70b4 	ldr	r7, [pc, #180]	; 8558 <BusRaiderApp::BusRaiderApp(Display&, CUartMaxiSerialDevice&)+0xf0>
    84a0:	e1a00006 	mov	r0, r6
    84a4:	eb00a2d8 	bl	3100c <BusControl::BusControl()>
    84a8:	e59f00ac 	ldr	r0, [pc, #172]	; 855c <BusRaiderApp::BusRaiderApp(Display&, CUartMaxiSerialDevice&)+0xf4>
    84ac:	e0857007 	add	r7, r5, r7
    84b0:	e1a02006 	mov	r2, r6
    84b4:	e1a01008 	mov	r1, r8
    84b8:	e1a03007 	mov	r3, r7
    84bc:	e0850000 	add	r0, r5, r0
    84c0:	eb00b200 	bl	34cc8 <ControlAPI::ControlAPI(CommandHandler&, BusControl&, McManager&)>
    84c4:	e1a03006 	mov	r3, r6
    84c8:	e1a02008 	mov	r2, r8
    84cc:	e5951078 	ldr	r1, [r5, #120]	; 0x78
    84d0:	e1a00007 	mov	r0, r7
    84d4:	eb00b870 	bl	3669c <McManager::McManager(DisplayBase*, CommandHandler&, BusControl&)>
    84d8:	e3a06064 	mov	r6, #100	; 0x64
    84dc:	e3e01000 	mvn	r1, #0
    84e0:	e2852947 	add	r2, r5, #1163264	; 0x11c000
    84e4:	e2822a01 	add	r2, r2, #4096	; 0x1000
    84e8:	e2853946 	add	r3, r5, #1146880	; 0x118000
    84ec:	e59f006c 	ldr	r0, [pc, #108]	; 8560 <BusRaiderApp::BusRaiderApp(Display&, CUartMaxiSerialDevice&)+0xf8>
    84f0:	e283ea03 	add	lr, r3, #12288	; 0x3000
    84f4:	e282cebd 	add	ip, r2, #3024	; 0xbd0
    84f8:	e2833a02 	add	r3, r3, #8192	; 0x2000
    84fc:	e5824bc8 	str	r4, [r2, #3016]	; 0xbc8
    8500:	e5826bd0 	str	r6, [r2, #3024]	; 0xbd0
    8504:	e5824bcc 	str	r4, [r2, #3020]	; 0xbcc
    8508:	e5805000 	str	r5, [r0]
    850c:	e5854004 	str	r4, [r5, #4]
    8510:	e5c54008 	strb	r4, [r5, #8]
    8514:	e5854070 	str	r4, [r5, #112]	; 0x70
    8518:	e5854074 	str	r4, [r5, #116]	; 0x74
    851c:	e1a00005 	mov	r0, r5
    8520:	e5c34724 	strb	r4, [r3, #1828]	; 0x724
    8524:	e5c54000 	strb	r4, [r5]
    8528:	e5c34ef4 	strb	r4, [r3, #3828]	; 0xef4
    852c:	e5c34f12 	strb	r4, [r3, #3858]	; 0xf12
    8530:	e5c34f30 	strb	r4, [r3, #3888]	; 0xf30
    8534:	e5c34f94 	strb	r4, [r3, #3988]	; 0xf94
    8538:	e5c34ff8 	strb	r4, [r3, #4088]	; 0xff8
    853c:	e5834ffc 	str	r4, [r3, #4092]	; 0xffc
    8540:	e5ce4000 	strb	r4, [lr]
    8544:	e5824710 	str	r4, [r2, #1808]	; 0x710
    8548:	e5824714 	str	r4, [r2, #1812]	; 0x714
    854c:	e1cc40b4 	strh	r4, [ip, #4]
    8550:	e5821bd8 	str	r1, [r2, #3032]	; 0xbd8
    8554:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8558:	00117f9c 	.word	0x00117f9c
    855c:	00117f88 	.word	0x00117f88
    8560:	0005cdf4 	.word	0x0005cdf4

00008564 <BusRaiderApp::init()>:
    8564:	e92d4070 	push	{r4, r5, r6, lr}
    8568:	e1a05000 	mov	r5, r0
    856c:	e3a04000 	mov	r4, #0
    8570:	e3e00000 	mvn	r0, #0
    8574:	e2851946 	add	r1, r5, #1146880	; 0x118000
    8578:	e2852947 	add	r2, r5, #1163264	; 0x11c000
    857c:	e2813a02 	add	r3, r1, #8192	; 0x2000
    8580:	e2822a01 	add	r2, r2, #4096	; 0x1000
    8584:	e2811a03 	add	r1, r1, #12288	; 0x3000
    8588:	e285607c 	add	r6, r5, #124	; 0x7c
    858c:	e5854004 	str	r4, [r5, #4]
    8590:	e5c54008 	strb	r4, [r5, #8]
    8594:	e5854070 	str	r4, [r5, #112]	; 0x70
    8598:	e5854074 	str	r4, [r5, #116]	; 0x74
    859c:	e24dd008 	sub	sp, sp, #8
    85a0:	e5c34724 	strb	r4, [r3, #1828]	; 0x724
    85a4:	e5c54000 	strb	r4, [r5]
    85a8:	e5c34ef4 	strb	r4, [r3, #3828]	; 0xef4
    85ac:	e5c34f12 	strb	r4, [r3, #3858]	; 0xf12
    85b0:	e5c34f30 	strb	r4, [r3, #3888]	; 0xf30
    85b4:	e5c34f94 	strb	r4, [r3, #3988]	; 0xf94
    85b8:	e5c34ff8 	strb	r4, [r3, #4088]	; 0xff8
    85bc:	e5834ffc 	str	r4, [r3, #4092]	; 0xffc
    85c0:	e5c14000 	strb	r4, [r1]
    85c4:	e5824710 	str	r4, [r2, #1808]	; 0x710
    85c8:	e5824714 	str	r4, [r2, #1812]	; 0x714
    85cc:	e5c24bd5 	strb	r4, [r2, #3029]	; 0xbd5
    85d0:	e5820bd8 	str	r0, [r2, #3032]	; 0xbd8
    85d4:	e1a00006 	mov	r0, r6
    85d8:	eb00a23c 	bl	30ed0 <CommsManager::setup()>
    85dc:	e2850b1e 	add	r0, r5, #30720	; 0x7800
    85e0:	e2800098 	add	r0, r0, #152	; 0x98
    85e4:	eb00a2b1 	bl	310b0 <BusControl::init()>
    85e8:	e59f0034 	ldr	r0, [pc, #52]	; 8624 <BusRaiderApp::init()+0xc0>
    85ec:	e0850000 	add	r0, r5, r0
    85f0:	eb00b1be 	bl	34cf0 <ControlAPI::init()>
    85f4:	e59f002c 	ldr	r0, [pc, #44]	; 8628 <BusRaiderApp::init()+0xc4>
    85f8:	e0850000 	add	r0, r5, r0
    85fc:	eb00b842 	bl	3670c <McManager::init()>
    8600:	e1a00006 	mov	r0, r6
    8604:	e1a01005 	mov	r1, r5
    8608:	e3a02001 	mov	r2, #1
    860c:	e59f3018 	ldr	r3, [pc, #24]	; 862c <BusRaiderApp::init()+0xc8>
    8610:	e58d4004 	str	r4, [sp, #4]
    8614:	e58d4000 	str	r4, [sp]
    8618:	eb009d40 	bl	2fb20 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
    861c:	e28dd008 	add	sp, sp, #8
    8620:	e8bd8070 	pop	{r4, r5, r6, pc}
    8624:	00117f88 	.word	0x00117f88
    8628:	00117f9c 	.word	0x00117f9c
    862c:	00009784 	.word	0x00009784

00008630 <BusRaiderApp::clear()>:
    8630:	e3a03000 	mov	r3, #0
    8634:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8638:	e3e0e000 	mvn	lr, #0
    863c:	e280c946 	add	ip, r0, #1146880	; 0x118000
    8640:	e2801947 	add	r1, r0, #1163264	; 0x11c000
    8644:	e28c2a02 	add	r2, ip, #8192	; 0x2000
    8648:	e2811a01 	add	r1, r1, #4096	; 0x1000
    864c:	e28cca03 	add	ip, ip, #12288	; 0x3000
    8650:	e5803004 	str	r3, [r0, #4]
    8654:	e5c03008 	strb	r3, [r0, #8]
    8658:	e5803070 	str	r3, [r0, #112]	; 0x70
    865c:	e5803074 	str	r3, [r0, #116]	; 0x74
    8660:	e5c23724 	strb	r3, [r2, #1828]	; 0x724
    8664:	e5c03000 	strb	r3, [r0]
    8668:	e5c23ef4 	strb	r3, [r2, #3828]	; 0xef4
    866c:	e5c23f12 	strb	r3, [r2, #3858]	; 0xf12
    8670:	e5c23f30 	strb	r3, [r2, #3888]	; 0xf30
    8674:	e5c23f94 	strb	r3, [r2, #3988]	; 0xf94
    8678:	e5c23ff8 	strb	r3, [r2, #4088]	; 0xff8
    867c:	e5823ffc 	str	r3, [r2, #4092]	; 0xffc
    8680:	e5cc3000 	strb	r3, [ip]
    8684:	e5813710 	str	r3, [r1, #1808]	; 0x710
    8688:	e5813714 	str	r3, [r1, #1812]	; 0x714
    868c:	e5c13bd5 	strb	r3, [r1, #3029]	; 0xbd5
    8690:	e581ebd8 	str	lr, [r1, #3032]	; 0xbd8
    8694:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008698 <BusRaiderApp::peripheralStatus(bool, bool)>:
    8698:	e3510000 	cmp	r1, #0
    869c:	0a00000a 	beq	86cc <BusRaiderApp::peripheralStatus(bool, bool)+0x34>
    86a0:	e3520000 	cmp	r2, #0
    86a4:	e5900078 	ldr	r0, [r0, #120]	; 0x78
    86a8:	0a000003 	beq	86bc <BusRaiderApp::peripheralStatus(bool, bool)+0x24>
    86ac:	e3a02002 	mov	r2, #2
    86b0:	e3a01008 	mov	r1, #8
    86b4:	e59f3024 	ldr	r3, [pc, #36]	; 86e0 <BusRaiderApp::peripheralStatus(bool, bool)+0x48>
    86b8:	ea00d208 	b	3cee0 <Display::statusPut(int, int, char const*)>
    86bc:	e3a02001 	mov	r2, #1
    86c0:	e3a01008 	mov	r1, #8
    86c4:	e59f3018 	ldr	r3, [pc, #24]	; 86e4 <BusRaiderApp::peripheralStatus(bool, bool)+0x4c>
    86c8:	ea00d204 	b	3cee0 <Display::statusPut(int, int, char const*)>
    86cc:	e1a02001 	mov	r2, r1
    86d0:	e5900078 	ldr	r0, [r0, #120]	; 0x78
    86d4:	e3a01008 	mov	r1, #8
    86d8:	e59f3008 	ldr	r3, [pc, #8]	; 86e8 <BusRaiderApp::peripheralStatus(bool, bool)+0x50>
    86dc:	ea00d1ff 	b	3cee0 <Display::statusPut(int, int, char const*)>
    86e0:	000406e8 	.word	0x000406e8
    86e4:	00040708 	.word	0x00040708
    86e8:	0004071c 	.word	0x0004071c

000086ec <BusRaiderApp::statusDisplayUpdate()>:
    86ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    86f0:	e1a05000 	mov	r5, r0
    86f4:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    86f8:	eb0095bd 	bl	2ddf4 <micros>
    86fc:	e5951004 	ldr	r1, [r5, #4]
    8700:	e59f2530 	ldr	r2, [pc, #1328]	; 8c38 <BusRaiderApp::statusDisplayUpdate()+0x54c>
    8704:	eb0095d8 	bl	2de6c <isTimeout>
    8708:	e3500000 	cmp	r0, #0
    870c:	1a000001 	bne	8718 <BusRaiderApp::statusDisplayUpdate()+0x2c>
    8710:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    8714:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8718:	eb0095b5 	bl	2ddf4 <micros>
    871c:	e3a02000 	mov	r2, #0
    8720:	e59f4514 	ldr	r4, [pc, #1300]	; 8c3c <BusRaiderApp::statusDisplayUpdate()+0x550>
    8724:	e1a01002 	mov	r1, r2
    8728:	e5943000 	ldr	r3, [r4]
    872c:	e5850004 	str	r0, [r5, #4]
    8730:	e59f6508 	ldr	r6, [pc, #1288]	; 8c40 <BusRaiderApp::statusDisplayUpdate()+0x554>
    8734:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8738:	eb00d1e8 	bl	3cee0 <Display::statusPut(int, int, char const*)>
    873c:	e5943004 	ldr	r3, [r4, #4]
    8740:	e3a02000 	mov	r2, #0
    8744:	e3a01001 	mov	r1, #1
    8748:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    874c:	eb00d1e3 	bl	3cee0 <Display::statusPut(int, int, char const*)>
    8750:	e0856006 	add	r6, r5, r6
    8754:	e3a02032 	mov	r2, #50	; 0x32
    8758:	e59f14e4 	ldr	r1, [pc, #1252]	; 8c44 <BusRaiderApp::statusDisplayUpdate()+0x558>
    875c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8760:	eb0095dd 	bl	2dedc <strlcpy>
    8764:	e1a00006 	mov	r0, r6
    8768:	eb008635 	bl	2a044 <strlen>
    876c:	e3500000 	cmp	r0, #0
    8770:	0a0000e7 	beq	8b14 <BusRaiderApp::statusDisplayUpdate()+0x428>
    8774:	e2854945 	add	r4, r5, #1130496	; 0x114000
    8778:	e1a01006 	mov	r1, r6
    877c:	e3a02032 	mov	r2, #50	; 0x32
    8780:	e28d005c 	add	r0, sp, #92	; 0x5c
    8784:	e2844a03 	add	r4, r4, #12288	; 0x3000
    8788:	eb0095ef 	bl	2df4c <strlcat>
    878c:	e5942f68 	ldr	r2, [r4, #3944]	; 0xf68
    8790:	e59f14b0 	ldr	r1, [pc, #1200]	; 8c48 <BusRaiderApp::statusDisplayUpdate()+0x55c>
    8794:	e1a03fc2 	asr	r3, r2, #31
    8798:	e0c10291 	smull	r0, r1, r1, r2
    879c:	e0633141 	rsb	r3, r3, r1, asr #2
    87a0:	e0831103 	add	r1, r3, r3, lsl #2
    87a4:	e0422081 	sub	r2, r2, r1, lsl #1
    87a8:	e58d2000 	str	r2, [sp]
    87ac:	e3a0101e 	mov	r1, #30
    87b0:	e59f2494 	ldr	r2, [pc, #1172]	; 8c4c <BusRaiderApp::statusDisplayUpdate()+0x560>
    87b4:	e28d0090 	add	r0, sp, #144	; 0x90
    87b8:	eb009633 	bl	2e08c <snprintf>
    87bc:	e3a02032 	mov	r2, #50	; 0x32
    87c0:	e28d1090 	add	r1, sp, #144	; 0x90
    87c4:	e28d005c 	add	r0, sp, #92	; 0x5c
    87c8:	eb0095df 	bl	2df4c <strlcat>
    87cc:	e3a02032 	mov	r2, #50	; 0x32
    87d0:	e59f1478 	ldr	r1, [pc, #1144]	; 8c50 <BusRaiderApp::statusDisplayUpdate()+0x564>
    87d4:	e28d005c 	add	r0, sp, #92	; 0x5c
    87d8:	eb0095db 	bl	2df4c <strlcat>
    87dc:	e3a02000 	mov	r2, #0
    87e0:	e3a01002 	mov	r1, #2
    87e4:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    87e8:	e28d305c 	add	r3, sp, #92	; 0x5c
    87ec:	eb00d1bb 	bl	3cee0 <Display::statusPut(int, int, char const*)>
    87f0:	e3a02000 	mov	r2, #0
    87f4:	e2856946 	add	r6, r5, #1146880	; 0x118000
    87f8:	e2866a02 	add	r6, r6, #8192	; 0x2000
    87fc:	e5d63f12 	ldrb	r3, [r6, #3858]	; 0xf12
    8800:	e5cd205c 	strb	r2, [sp, #92]	; 0x5c
    8804:	e3530043 	cmp	r3, #67	; 0x43
    8808:	e3a02032 	mov	r2, #50	; 0x32
    880c:	0a0000cf 	beq	8b50 <BusRaiderApp::statusDisplayUpdate()+0x464>
    8810:	e59f143c 	ldr	r1, [pc, #1084]	; 8c54 <BusRaiderApp::statusDisplayUpdate()+0x568>
    8814:	e28d005c 	add	r0, sp, #92	; 0x5c
    8818:	eb0095af 	bl	2dedc <strlcpy>
    881c:	e3a02001 	mov	r2, #1
    8820:	e3a01003 	mov	r1, #3
    8824:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8828:	e28d305c 	add	r3, sp, #92	; 0x5c
    882c:	eb00d1ab 	bl	3cee0 <Display::statusPut(int, int, char const*)>
    8830:	e59f6420 	ldr	r6, [pc, #1056]	; 8c58 <BusRaiderApp::statusDisplayUpdate()+0x56c>
    8834:	e3a02032 	mov	r2, #50	; 0x32
    8838:	e59f141c 	ldr	r1, [pc, #1052]	; 8c5c <BusRaiderApp::statusDisplayUpdate()+0x570>
    883c:	e0856006 	add	r6, r5, r6
    8840:	e28d005c 	add	r0, sp, #92	; 0x5c
    8844:	eb0095a4 	bl	2dedc <strlcpy>
    8848:	e1a00006 	mov	r0, r6
    884c:	eb00b7ff 	bl	36850 <McManager::getMachineName()>
    8850:	e3a02032 	mov	r2, #50	; 0x32
    8854:	e1a01000 	mov	r1, r0
    8858:	e28d005c 	add	r0, sp, #92	; 0x5c
    885c:	eb0095ba 	bl	2df4c <strlcat>
    8860:	e3a02028 	mov	r2, #40	; 0x28
    8864:	e59f13f4 	ldr	r1, [pc, #1012]	; 8c60 <BusRaiderApp::statusDisplayUpdate()+0x574>
    8868:	e28d005c 	add	r0, sp, #92	; 0x5c
    886c:	eb0095b6 	bl	2df4c <strlcat>
    8870:	e3a02000 	mov	r2, #0
    8874:	e3a01004 	mov	r1, #4
    8878:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    887c:	e28d305c 	add	r3, sp, #92	; 0x5c
    8880:	eb00d196 	bl	3cee0 <Display::statusPut(int, int, char const*)>
    8884:	e5942fa4 	ldr	r2, [r4, #4004]	; 0xfa4
    8888:	e59f33d4 	ldr	r3, [pc, #980]	; 8c64 <BusRaiderApp::statusDisplayUpdate()+0x578>
    888c:	e5921004 	ldr	r1, [r2, #4]
    8890:	e59f03d0 	ldr	r0, [pc, #976]	; 8c68 <BusRaiderApp::statusDisplayUpdate()+0x57c>
    8894:	e0832193 	umull	r2, r3, r3, r1
    8898:	e1a03923 	lsr	r3, r3, #18
    889c:	e0632283 	rsb	r2, r3, r3, lsl #5
    88a0:	e0622302 	rsb	r2, r2, r2, lsl #6
    88a4:	e0832182 	add	r2, r3, r2, lsl #3
    88a8:	e0412302 	sub	r2, r1, r2, lsl #6
    88ac:	e0810290 	umull	r0, r1, r0, r2
    88b0:	e59f03b4 	ldr	r0, [pc, #948]	; 8c6c <BusRaiderApp::statusDisplayUpdate()+0x580>
    88b4:	e1a01321 	lsr	r1, r1, #6
    88b8:	e1520000 	cmp	r2, r0
    88bc:	2a0000a0 	bcs	8b44 <BusRaiderApp::statusDisplayUpdate()+0x458>
    88c0:	e59f03a8 	ldr	r0, [pc, #936]	; 8c70 <BusRaiderApp::statusDisplayUpdate()+0x584>
    88c4:	e1520000 	cmp	r2, r0
    88c8:	859f03a4 	ldrhi	r0, [pc, #932]	; 8c74 <BusRaiderApp::statusDisplayUpdate()+0x588>
    88cc:	e59f23a4 	ldr	r2, [pc, #932]	; 8c78 <BusRaiderApp::statusDisplayUpdate()+0x58c>
    88d0:	91a00002 	movls	r0, r2
    88d4:	e1cd00f4 	strd	r0, [sp, #4]
    88d8:	e58d2000 	str	r2, [sp]
    88dc:	e3a01032 	mov	r1, #50	; 0x32
    88e0:	e59f2394 	ldr	r2, [pc, #916]	; 8c7c <BusRaiderApp::statusDisplayUpdate()+0x590>
    88e4:	e28d005c 	add	r0, sp, #92	; 0x5c
    88e8:	eb0095e7 	bl	2e08c <snprintf>
    88ec:	e3a02032 	mov	r2, #50	; 0x32
    88f0:	e59f1388 	ldr	r1, [pc, #904]	; 8c80 <BusRaiderApp::statusDisplayUpdate()+0x594>
    88f4:	e28d005c 	add	r0, sp, #92	; 0x5c
    88f8:	eb009593 	bl	2df4c <strlcat>
    88fc:	e3a02000 	mov	r2, #0
    8900:	e3a01005 	mov	r1, #5
    8904:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8908:	e28d305c 	add	r3, sp, #92	; 0x5c
    890c:	eb00d173 	bl	3cee0 <Display::statusPut(int, int, char const*)>
    8910:	e3a03000 	mov	r3, #0
    8914:	e3a02032 	mov	r2, #50	; 0x32
    8918:	e59f1364 	ldr	r1, [pc, #868]	; 8c84 <BusRaiderApp::statusDisplayUpdate()+0x598>
    891c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8920:	e5cd305c 	strb	r3, [sp, #92]	; 0x5c
    8924:	eb00956c 	bl	2dedc <strlcpy>
    8928:	e2853a07 	add	r3, r5, #28672	; 0x7000
    892c:	e2832601 	add	r2, r3, #1048576	; 0x100000
    8930:	e5d21d50 	ldrb	r1, [r2, #3408]	; 0xd50
    8934:	e3510000 	cmp	r1, #0
    8938:	0a000002 	beq	8948 <BusRaiderApp::statusDisplayUpdate()+0x25c>
    893c:	e5d22c45 	ldrb	r2, [r2, #3141]	; 0xc45
    8940:	e3520000 	cmp	r2, #0
    8944:	1a0000b0 	bne	8c0c <BusRaiderApp::statusDisplayUpdate()+0x520>
    8948:	e2833601 	add	r3, r3, #1048576	; 0x100000
    894c:	e5d33d50 	ldrb	r3, [r3, #3408]	; 0xd50
    8950:	e3a02032 	mov	r2, #50	; 0x32
    8954:	e3530000 	cmp	r3, #0
    8958:	159f1328 	ldrne	r1, [pc, #808]	; 8c88 <BusRaiderApp::statusDisplayUpdate()+0x59c>
    895c:	059f1328 	ldreq	r1, [pc, #808]	; 8c8c <BusRaiderApp::statusDisplayUpdate()+0x5a0>
    8960:	e28d005c 	add	r0, sp, #92	; 0x5c
    8964:	eb009578 	bl	2df4c <strlcat>
    8968:	e5d43f64 	ldrb	r3, [r4, #3940]	; 0xf64
    896c:	e3a02032 	mov	r2, #50	; 0x32
    8970:	e3530000 	cmp	r3, #0
    8974:	159f1314 	ldrne	r1, [pc, #788]	; 8c90 <BusRaiderApp::statusDisplayUpdate()+0x5a4>
    8978:	059f1314 	ldreq	r1, [pc, #788]	; 8c94 <BusRaiderApp::statusDisplayUpdate()+0x5a8>
    897c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8980:	eb009571 	bl	2df4c <strlcat>
    8984:	e3a02000 	mov	r2, #0
    8988:	e3a01006 	mov	r1, #6
    898c:	e28d305c 	add	r3, sp, #92	; 0x5c
    8990:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8994:	eb00d151 	bl	3cee0 <Display::statusPut(int, int, char const*)>
    8998:	e1a00006 	mov	r0, r6
    899c:	eb00b968 	bl	36f44 <McManager::getDisplayRefreshRate()>
    89a0:	e1a04000 	mov	r4, r0
    89a4:	e5d51000 	ldrb	r1, [r5]
    89a8:	e59f32e8 	ldr	r3, [pc, #744]	; 8c98 <BusRaiderApp::statusDisplayUpdate()+0x5ac>
    89ac:	e59f22e8 	ldr	r2, [pc, #744]	; 8c9c <BusRaiderApp::statusDisplayUpdate()+0x5b0>
    89b0:	e3510000 	cmp	r1, #0
    89b4:	11a01002 	movne	r1, r2
    89b8:	01a01003 	moveq	r1, r3
    89bc:	e3a02028 	mov	r2, #40	; 0x28
    89c0:	e28d0030 	add	r0, sp, #48	; 0x30
    89c4:	eb009544 	bl	2dedc <strlcpy>
    89c8:	e5d53000 	ldrb	r3, [r5]
    89cc:	e3a02028 	mov	r2, #40	; 0x28
    89d0:	e2233001 	eor	r3, r3, #1
    89d4:	e59f12c4 	ldr	r1, [pc, #708]	; 8ca0 <BusRaiderApp::statusDisplayUpdate()+0x5b4>
    89d8:	e5c53000 	strb	r3, [r5]
    89dc:	e28d0030 	add	r0, sp, #48	; 0x30
    89e0:	eb009559 	bl	2df4c <strlcat>
    89e4:	e3a0300a 	mov	r3, #10
    89e8:	e1a00004 	mov	r0, r4
    89ec:	e3a02028 	mov	r2, #40	; 0x28
    89f0:	e28d101c 	add	r1, sp, #28
    89f4:	eb0096fe 	bl	2e5f4 <rditoa>
    89f8:	e3a02028 	mov	r2, #40	; 0x28
    89fc:	e28d101c 	add	r1, sp, #28
    8a00:	e28d0030 	add	r0, sp, #48	; 0x30
    8a04:	eb009550 	bl	2df4c <strlcat>
    8a08:	e3a02028 	mov	r2, #40	; 0x28
    8a0c:	e59f1290 	ldr	r1, [pc, #656]	; 8ca4 <BusRaiderApp::statusDisplayUpdate()+0x5b8>
    8a10:	e28d0030 	add	r0, sp, #48	; 0x30
    8a14:	eb00954c 	bl	2df4c <strlcat>
    8a18:	e28d3030 	add	r3, sp, #48	; 0x30
    8a1c:	e3a02000 	mov	r2, #0
    8a20:	e3a01007 	mov	r1, #7
    8a24:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8a28:	eb00d12c 	bl	3cee0 <Display::statusPut(int, int, char const*)>
    8a2c:	e3a03000 	mov	r3, #0
    8a30:	e1a04003 	mov	r4, r3
    8a34:	e59f626c 	ldr	r6, [pc, #620]	; 8ca8 <BusRaiderApp::statusDisplayUpdate()+0x5bc>
    8a38:	e59f826c 	ldr	r8, [pc, #620]	; 8cac <BusRaiderApp::statusDisplayUpdate()+0x5c0>
    8a3c:	e5cd305c 	strb	r3, [sp, #92]	; 0x5c
    8a40:	e246703b 	sub	r7, r6, #59	; 0x3b
    8a44:	e5f63001 	ldrb	r3, [r6, #1]!
    8a48:	e3530000 	cmp	r3, #0
    8a4c:	0a00000a 	beq	8a7c <BusRaiderApp::statusDisplayUpdate()+0x390>
    8a50:	e7972104 	ldr	r2, [r7, r4, lsl #2]
    8a54:	e3a01029 	mov	r1, #41	; 0x29
    8a58:	e58d2000 	str	r2, [sp]
    8a5c:	e1a03004 	mov	r3, r4
    8a60:	e1a02008 	mov	r2, r8
    8a64:	e28d0030 	add	r0, sp, #48	; 0x30
    8a68:	eb009587 	bl	2e08c <snprintf>
    8a6c:	e3a02032 	mov	r2, #50	; 0x32
    8a70:	e28d1030 	add	r1, sp, #48	; 0x30
    8a74:	e28d005c 	add	r0, sp, #92	; 0x5c
    8a78:	eb009533 	bl	2df4c <strlcat>
    8a7c:	e2844001 	add	r4, r4, #1
    8a80:	e354000f 	cmp	r4, #15
    8a84:	1affffee 	bne	8a44 <BusRaiderApp::statusDisplayUpdate()+0x358>
    8a88:	e3a04000 	mov	r4, #0
    8a8c:	e3a02032 	mov	r2, #50	; 0x32
    8a90:	e59f1218 	ldr	r1, [pc, #536]	; 8cb0 <BusRaiderApp::statusDisplayUpdate()+0x5c4>
    8a94:	e28d005c 	add	r0, sp, #92	; 0x5c
    8a98:	eb00952b 	bl	2df4c <strlcat>
    8a9c:	e1a02004 	mov	r2, r4
    8aa0:	e3a01009 	mov	r1, #9
    8aa4:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8aa8:	e28d305c 	add	r3, sp, #92	; 0x5c
    8aac:	eb00d10b 	bl	3cee0 <Display::statusPut(int, int, char const*)>
    8ab0:	e28d2018 	add	r2, sp, #24
    8ab4:	e28d1014 	add	r1, sp, #20
    8ab8:	e285007c 	add	r0, r5, #124	; 0x7c
    8abc:	e58d4014 	str	r4, [sp, #20]
    8ac0:	e58d4018 	str	r4, [sp, #24]
    8ac4:	eb009caf 	bl	2fd88 <CommandHandler::getFileReceiveStatus(unsigned long&, unsigned long&)>
    8ac8:	e3500000 	cmp	r0, #0
    8acc:	058d0014 	streq	r0, [sp, #20]
    8ad0:	0a000008 	beq	8af8 <BusRaiderApp::statusDisplayUpdate()+0x40c>
    8ad4:	e59d1014 	ldr	r1, [sp, #20]
    8ad8:	e3510000 	cmp	r1, #0
    8adc:	0a000005 	beq	8af8 <BusRaiderApp::statusDisplayUpdate()+0x40c>
    8ae0:	e59d0018 	ldr	r0, [sp, #24]
    8ae4:	e0800100 	add	r0, r0, r0, lsl #2
    8ae8:	e1a00180 	lsl	r0, r0, #3
    8aec:	eb00d79b 	bl	3e960 <__udivsi3>
    8af0:	e2506000 	subs	r6, r0, #0
    8af4:	ca000025 	bgt	8b90 <BusRaiderApp::statusDisplayUpdate()+0x4a4>
    8af8:	e3a02001 	mov	r2, #1
    8afc:	e3a0100a 	mov	r1, #10
    8b00:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8b04:	e59f31a8 	ldr	r3, [pc, #424]	; 8cb4 <BusRaiderApp::statusDisplayUpdate()+0x5c8>
    8b08:	eb00d0f4 	bl	3cee0 <Display::statusPut(int, int, char const*)>
    8b0c:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    8b10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8b14:	e3a02032 	mov	r2, #50	; 0x32
    8b18:	e59f1198 	ldr	r1, [pc, #408]	; 8cb8 <BusRaiderApp::statusDisplayUpdate()+0x5cc>
    8b1c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8b20:	eb009509 	bl	2df4c <strlcat>
    8b24:	e2854945 	add	r4, r5, #1130496	; 0x114000
    8b28:	e3a02001 	mov	r2, #1
    8b2c:	e3a01002 	mov	r1, #2
    8b30:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8b34:	e28d305c 	add	r3, sp, #92	; 0x5c
    8b38:	eb00d0e8 	bl	3cee0 <Display::statusPut(int, int, char const*)>
    8b3c:	e2844a03 	add	r4, r4, #12288	; 0x3000
    8b40:	eaffff2a 	b	87f0 <BusRaiderApp::statusDisplayUpdate()+0x104>
    8b44:	e59f2128 	ldr	r2, [pc, #296]	; 8c74 <BusRaiderApp::statusDisplayUpdate()+0x588>
    8b48:	e1a00002 	mov	r0, r2
    8b4c:	eaffff60 	b	88d4 <BusRaiderApp::statusDisplayUpdate()+0x1e8>
    8b50:	e59f1164 	ldr	r1, [pc, #356]	; 8cbc <BusRaiderApp::statusDisplayUpdate()+0x5d0>
    8b54:	e28d005c 	add	r0, sp, #92	; 0x5c
    8b58:	eb0094df 	bl	2dedc <strlcpy>
    8b5c:	e5d63ff8 	ldrb	r3, [r6, #4088]	; 0xff8
    8b60:	e3530000 	cmp	r3, #0
    8b64:	1a00002d 	bne	8c20 <BusRaiderApp::statusDisplayUpdate()+0x534>
    8b68:	e3a02032 	mov	r2, #50	; 0x32
    8b6c:	e59f10dc 	ldr	r1, [pc, #220]	; 8c50 <BusRaiderApp::statusDisplayUpdate()+0x564>
    8b70:	e28d005c 	add	r0, sp, #92	; 0x5c
    8b74:	eb0094f4 	bl	2df4c <strlcat>
    8b78:	e3a02000 	mov	r2, #0
    8b7c:	e3a01003 	mov	r1, #3
    8b80:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8b84:	e28d305c 	add	r3, sp, #92	; 0x5c
    8b88:	eb00d0d4 	bl	3cee0 <Display::statusPut(int, int, char const*)>
    8b8c:	eaffff27 	b	8830 <BusRaiderApp::statusDisplayUpdate()+0x144>
    8b90:	e3a0203c 	mov	r2, #60	; 0x3c
    8b94:	e59f1124 	ldr	r1, [pc, #292]	; 8cc0 <BusRaiderApp::statusDisplayUpdate()+0x5d4>
    8b98:	e28d0090 	add	r0, sp, #144	; 0x90
    8b9c:	eb0094ce 	bl	2dedc <strlcpy>
    8ba0:	e28d0090 	add	r0, sp, #144	; 0x90
    8ba4:	eb008526 	bl	2a044 <strlen>
    8ba8:	e28d1090 	add	r1, sp, #144	; 0x90
    8bac:	e2402001 	sub	r2, r0, #1
    8bb0:	e0812002 	add	r2, r1, r2
    8bb4:	e1a03004 	mov	r3, r4
    8bb8:	e3a01023 	mov	r1, #35	; 0x23
    8bbc:	ea000002 	b	8bcc <BusRaiderApp::statusDisplayUpdate()+0x4e0>
    8bc0:	e1560003 	cmp	r6, r3
    8bc4:	c3a01023 	movgt	r1, #35	; 0x23
    8bc8:	d3a01020 	movle	r1, #32
    8bcc:	e2833001 	add	r3, r3, #1
    8bd0:	e3530028 	cmp	r3, #40	; 0x28
    8bd4:	e5e21001 	strb	r1, [r2, #1]!
    8bd8:	1afffff8 	bne	8bc0 <BusRaiderApp::statusDisplayUpdate()+0x4d4>
    8bdc:	e3a0105d 	mov	r1, #93	; 0x5d
    8be0:	e3a0e000 	mov	lr, #0
    8be4:	e28d30d0 	add	r3, sp, #208	; 0xd0
    8be8:	e083c000 	add	ip, r3, r0
    8bec:	e54c1018 	strb	r1, [ip, #-24]	; 0xffffffe8
    8bf0:	e3a02001 	mov	r2, #1
    8bf4:	e3a0100a 	mov	r1, #10
    8bf8:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    8bfc:	e28d3090 	add	r3, sp, #144	; 0x90
    8c00:	e54ce017 	strb	lr, [ip, #-23]	; 0xffffffe9
    8c04:	eb00d0b5 	bl	3cee0 <Display::statusPut(int, int, char const*)>
    8c08:	eafffec0 	b	8710 <BusRaiderApp::statusDisplayUpdate()+0x24>
    8c0c:	e3a02032 	mov	r2, #50	; 0x32
    8c10:	e59f10ac 	ldr	r1, [pc, #172]	; 8cc4 <BusRaiderApp::statusDisplayUpdate()+0x5d8>
    8c14:	e28d005c 	add	r0, sp, #92	; 0x5c
    8c18:	eb0094cb 	bl	2df4c <strlcat>
    8c1c:	eaffff51 	b	8968 <BusRaiderApp::statusDisplayUpdate()+0x27c>
    8c20:	e59f10a0 	ldr	r1, [pc, #160]	; 8cc8 <BusRaiderApp::statusDisplayUpdate()+0x5dc>
    8c24:	e3a02032 	mov	r2, #50	; 0x32
    8c28:	e0851001 	add	r1, r5, r1
    8c2c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8c30:	eb0094c5 	bl	2df4c <strlcat>
    8c34:	eaffffcb 	b	8b68 <BusRaiderApp::statusDisplayUpdate()+0x47c>
    8c38:	000f4240 	.word	0x000f4240
    8c3c:	00049f94 	.word	0x00049f94
    8c40:	0011af94 	.word	0x0011af94
    8c44:	00040740 	.word	0x00040740
    8c48:	66666667 	.word	0x66666667
    8c4c:	00040768 	.word	0x00040768
    8c50:	00040854 	.word	0x00040854
    8c54:	00040784 	.word	0x00040784
    8c58:	00117f9c 	.word	0x00117f9c
    8c5c:	0004079c 	.word	0x0004079c
    8c60:	000407a4 	.word	0x000407a4
    8c64:	431bde83 	.word	0x431bde83
    8c68:	10624dd3 	.word	0x10624dd3
    8c6c:	000186a0 	.word	0x000186a0
    8c70:	0000270f 	.word	0x0000270f
    8c74:	000493c8 	.word	0x000493c8
    8c78:	00041748 	.word	0x00041748
    8c7c:	000407bc 	.word	0x000407bc
    8c80:	00040858 	.word	0x00040858
    8c84:	000407d0 	.word	0x000407d0
    8c88:	000407e8 	.word	0x000407e8
    8c8c:	000407f8 	.word	0x000407f8
    8c90:	00040808 	.word	0x00040808
    8c94:	000407ac 	.word	0x000407ac
    8c98:	0004073c 	.word	0x0004073c
    8c9c:	00040738 	.word	0x00040738
    8ca0:	00040818 	.word	0x00040818
    8ca4:	00040824 	.word	0x00040824
    8ca8:	0005cf3b 	.word	0x0005cf3b
    8cac:	00040830 	.word	0x00040830
    8cb0:	00040838 	.word	0x00040838
    8cb4:	0004086c 	.word	0x0004086c
    8cb8:	00040750 	.word	0x00040750
    8cbc:	00040778 	.word	0x00040778
    8cc0:	00040860 	.word	0x00040860
    8cc4:	000407d8 	.word	0x000407d8
    8cc8:	0011aef4 	.word	0x0011aef4

00008ccc <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)>:
    8ccc:	e59f30c0 	ldr	r3, [pc, #192]	; 8d94 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0xc8>
    8cd0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8cd4:	e5936000 	ldr	r6, [r3]
    8cd8:	e2864947 	add	r4, r6, #1163264	; 0x11c000
    8cdc:	e2843a01 	add	r3, r4, #4096	; 0x1000
    8ce0:	e5935bd0 	ldr	r5, [r3, #3024]	; 0xbd0
    8ce4:	e3550000 	cmp	r5, #0
    8ce8:	08bd80f0 	popeq	{r4, r5, r6, r7, pc}
    8cec:	e593cbc8 	ldr	ip, [r3, #3016]	; 0xbc8
    8cf0:	e5930bcc 	ldr	r0, [r3, #3020]	; 0xbcc
    8cf4:	e15c0000 	cmp	ip, r0
    8cf8:	0a000008 	beq	8d20 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0x54>
    8cfc:	e5930bcc 	ldr	r0, [r3, #3020]	; 0xbcc
    8d00:	e593cbc8 	ldr	ip, [r3, #3016]	; 0xbc8
    8d04:	e150000c 	cmp	r0, ip
    8d08:	e593cbc8 	ldr	ip, [r3, #3016]	; 0xbc8
    8d0c:	2a00001c 	bcs	8d84 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0xb8>
    8d10:	e245e001 	sub	lr, r5, #1
    8d14:	e3500000 	cmp	r0, #0
    8d18:	015e000c 	cmpeq	lr, ip
    8d1c:	08bd80f0 	popeq	{r4, r5, r6, r7, pc}
    8d20:	e593ebc8 	ldr	lr, [r3, #3016]	; 0xbc8
    8d24:	e59f006c 	ldr	r0, [pc, #108]	; 8d98 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0xcc>
    8d28:	e08e308e 	add	r3, lr, lr, lsl #1
    8d2c:	e0863103 	add	r3, r6, r3, lsl #2
    8d30:	e0830000 	add	r0, r3, r0
    8d34:	e1a0708e 	lsl	r7, lr, #1
    8d38:	e2423001 	sub	r3, r2, #1
    8d3c:	e282c005 	add	ip, r2, #5
    8d40:	e5f32001 	ldrb	r2, [r3, #1]!
    8d44:	e153000c 	cmp	r3, ip
    8d48:	e4c02001 	strb	r2, [r0], #1
    8d4c:	1afffffb 	bne	8d40 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0x74>
    8d50:	e59f0044 	ldr	r0, [pc, #68]	; 8d9c <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0xd0>
    8d54:	e087200e 	add	r2, r7, lr
    8d58:	e0862102 	add	r2, r6, r2, lsl #2
    8d5c:	e2843a01 	add	r3, r4, #4096	; 0x1000
    8d60:	e7821000 	str	r1, [r2, r0]
    8d64:	e5932bc8 	ldr	r2, [r3, #3016]	; 0xbc8
    8d68:	e2822001 	add	r2, r2, #1
    8d6c:	e5832bc8 	str	r2, [r3, #3016]	; 0xbc8
    8d70:	e5932bc8 	ldr	r2, [r3, #3016]	; 0xbc8
    8d74:	e1520005 	cmp	r2, r5
    8d78:	23a02000 	movcs	r2, #0
    8d7c:	25832bc8 	strcs	r2, [r3, #3016]	; 0xbc8
    8d80:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8d84:	e040000c 	sub	r0, r0, ip
    8d88:	e3500001 	cmp	r0, #1
    8d8c:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
    8d90:	eaffffe2 	b	8d20 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0x54>
    8d94:	0005cdf4 	.word	0x0005cdf4
    8d98:	0011d718 	.word	0x0011d718
    8d9c:	0011d720 	.word	0x0011d720

00008da0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)>:
    8da0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    8da4:	e1a04000 	mov	r4, r0
    8da8:	e24ddb1e 	sub	sp, sp, #30720	; 0x7800
    8dac:	e24dd014 	sub	sp, sp, #20
    8db0:	e1a06001 	mov	r6, r1
    8db4:	e1a05002 	mov	r5, r2
    8db8:	e280107c 	add	r1, r0, #124	; 0x7c
    8dbc:	e3a02e19 	mov	r2, #400	; 0x190
    8dc0:	e28d0004 	add	r0, sp, #4
    8dc4:	eb008699 	bl	2a830 <memcpy>
    8dc8:	e594c20c 	ldr	ip, [r4, #524]	; 0x20c
    8dcc:	e59f3450 	ldr	r3, [pc, #1104]	; 9224 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x484>
    8dd0:	e2840f85 	add	r0, r4, #532	; 0x214
    8dd4:	e8900007 	ldm	r0, {r0, r1, r2}
    8dd8:	e59f8448 	ldr	r8, [pc, #1096]	; 9228 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x488>
    8ddc:	e5d4e220 	ldrb	lr, [r4, #544]	; 0x220
    8de0:	e58dc194 	str	ip, [sp, #404]	; 0x194
    8de4:	e58d3198 	str	r3, [sp, #408]	; 0x198
    8de8:	e594c224 	ldr	ip, [r4, #548]	; 0x224
    8dec:	e5943228 	ldr	r3, [r4, #552]	; 0x228
    8df0:	e58d019c 	str	r0, [sp, #412]	; 0x19c
    8df4:	e28d0d07 	add	r0, sp, #448	; 0x1c0
    8df8:	e58d11a0 	str	r1, [sp, #416]	; 0x1a0
    8dfc:	e58d21a4 	str	r2, [sp, #420]	; 0x1a4
    8e00:	e2841e23 	add	r1, r4, #560	; 0x230
    8e04:	e59f2420 	ldr	r2, [pc, #1056]	; 922c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x48c>
    8e08:	e2400008 	sub	r0, r0, #8
    8e0c:	e5cde1a8 	strb	lr, [sp, #424]	; 0x1a8
    8e10:	e58dc1ac 	str	ip, [sp, #428]	; 0x1ac
    8e14:	e58d31b0 	str	r3, [sp, #432]	; 0x1b0
    8e18:	e58d81b4 	str	r8, [sp, #436]	; 0x1b4
    8e1c:	eb008683 	bl	2a830 <memcpy>
    8e20:	e2842a02 	add	r2, r4, #8192	; 0x2000
    8e24:	e592e940 	ldr	lr, [r2, #2368]	; 0x940
    8e28:	e592c944 	ldr	ip, [r2, #2372]	; 0x944
    8e2c:	e28d3b0a 	add	r3, sp, #10240	; 0x2800
    8e30:	e2833010 	add	r3, r3, #16
    8e34:	e28d7b12 	add	r7, sp, #18432	; 0x4800
    8e38:	e2841da5 	add	r1, r4, #10560	; 0x2940
    8e3c:	e2877010 	add	r7, r7, #16
    8e40:	e58380c0 	str	r8, [r3, #192]	; 0xc0
    8e44:	e583e0b8 	str	lr, [r3, #184]	; 0xb8
    8e48:	e583c0bc 	str	ip, [r3, #188]	; 0xbc
    8e4c:	e59f23d8 	ldr	r2, [pc, #984]	; 922c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x48c>
    8e50:	e28300c4 	add	r0, r3, #196	; 0xc4
    8e54:	e281100c 	add	r1, r1, #12
    8e58:	eb008674 	bl	2a830 <memcpy>
    8e5c:	e1a0c007 	mov	ip, r7
    8e60:	e2848a05 	add	r8, r4, #20480	; 0x5000
    8e64:	e5982068 	ldr	r2, [r8, #104]	; 0x68
    8e68:	e288306c 	add	r3, r8, #108	; 0x6c
    8e6c:	e5ac27e0 	str	r2, [ip, #2016]!	; 0x7e0
    8e70:	e598e060 	ldr	lr, [r8, #96]	; 0x60
    8e74:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    8e78:	e98c000f 	stmib	ip, {r0, r1, r2, r3}
    8e7c:	e598205c 	ldr	r2, [r8, #92]	; 0x5c
    8e80:	e5d8307c 	ldrb	r3, [r8, #124]	; 0x7c
    8e84:	e598c064 	ldr	ip, [r8, #100]	; 0x64
    8e88:	e2870e7f 	add	r0, r7, #2032	; 0x7f0
    8e8c:	e288107d 	add	r1, r8, #125	; 0x7d
    8e90:	e58727d4 	str	r2, [r7, #2004]	; 0x7d4
    8e94:	e5c737f4 	strb	r3, [r7, #2036]	; 0x7f4
    8e98:	e3a02065 	mov	r2, #101	; 0x65
    8e9c:	e2800005 	add	r0, r0, #5
    8ea0:	e587e7d8 	str	lr, [r7, #2008]	; 0x7d8
    8ea4:	e587c7dc 	str	ip, [r7, #2012]	; 0x7dc
    8ea8:	eb008660 	bl	2a830 <memcpy>
    8eac:	e2873e85 	add	r3, r7, #2128	; 0x850
    8eb0:	e28820e2 	add	r2, r8, #226	; 0xe2
    8eb4:	e283300a 	add	r3, r3, #10
    8eb8:	e2821020 	add	r1, r2, #32
    8ebc:	e5927000 	ldr	r7, [r2]
    8ec0:	e592e004 	ldr	lr, [r2, #4]
    8ec4:	e592c008 	ldr	ip, [r2, #8]
    8ec8:	e592000c 	ldr	r0, [r2, #12]
    8ecc:	e2822010 	add	r2, r2, #16
    8ed0:	e1520001 	cmp	r2, r1
    8ed4:	e5837000 	str	r7, [r3]
    8ed8:	e583e004 	str	lr, [r3, #4]
    8edc:	e583c008 	str	ip, [r3, #8]
    8ee0:	e583000c 	str	r0, [r3, #12]
    8ee4:	e2833010 	add	r3, r3, #16
    8ee8:	1afffff3 	bne	8ebc <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x11c>
    8eec:	e5920000 	ldr	r0, [r2]
    8ef0:	e5921004 	ldr	r1, [r2, #4]
    8ef4:	e5830000 	str	r0, [r3]
    8ef8:	e5831004 	str	r1, [r3, #4]
    8efc:	e5d2c008 	ldrb	ip, [r2, #8]
    8f00:	e2881f42 	add	r1, r8, #264	; 0x108
    8f04:	e28d0a05 	add	r0, sp, #20480	; 0x5000
    8f08:	e5c3c008 	strb	ip, [r3, #8]
    8f0c:	e59f231c 	ldr	r2, [pc, #796]	; 9230 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x490>
    8f10:	e2811003 	add	r1, r1, #3
    8f14:	e28d7b16 	add	r7, sp, #22528	; 0x5800
    8f18:	e2800093 	add	r0, r0, #147	; 0x93
    8f1c:	eb008643 	bl	2a830 <memcpy>
    8f20:	e2877010 	add	r7, r7, #16
    8f24:	e2883e8e 	add	r3, r8, #2272	; 0x8e0
    8f28:	e288ce8f 	add	ip, r8, #2288	; 0x8f0
    8f2c:	e283300c 	add	r3, r3, #12
    8f30:	e2879064 	add	r9, r7, #100	; 0x64
    8f34:	e287e070 	add	lr, r7, #112	; 0x70
    8f38:	e28cc008 	add	ip, ip, #8
    8f3c:	e8930007 	ldm	r3, {r0, r1, r2}
    8f40:	e8890007 	stm	r9, {r0, r1, r2}
    8f44:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    8f48:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    8f4c:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    8f50:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    8f54:	e59808dc 	ldr	r0, [r8, #2268]	; 0x8dc
    8f58:	e2881e8e 	add	r1, r8, #2272	; 0x8e0
    8f5c:	e891000e 	ldm	r1, {r1, r2, r3}
    8f60:	e1c705f4 	strd	r0, [r7, #84]	; 0x54
    8f64:	e1c725fc 	strd	r2, [r7, #92]	; 0x5c
    8f68:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    8f6c:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    8f70:	e59cc000 	ldr	ip, [ip]
    8f74:	e598392c 	ldr	r3, [r8, #2348]	; 0x92c
    8f78:	e1cec0b0 	strh	ip, [lr]
    8f7c:	e58730a4 	str	r3, [r7, #164]	; 0xa4
    8f80:	e3a02efa 	mov	r2, #4000	; 0xfa0
    8f84:	e28700a8 	add	r0, r7, #168	; 0xa8
    8f88:	e2881e93 	add	r1, r8, #2352	; 0x930
    8f8c:	e28d7b1a 	add	r7, sp, #26624	; 0x6800
    8f90:	eb008626 	bl	2a830 <memcpy>
    8f94:	e2877010 	add	r7, r7, #16
    8f98:	e2841b1a 	add	r1, r4, #26624	; 0x6800
    8f9c:	e3a02efa 	mov	r2, #4000	; 0xfa0
    8fa0:	e28110d0 	add	r1, r1, #208	; 0xd0
    8fa4:	e2870048 	add	r0, r7, #72	; 0x48
    8fa8:	eb008620 	bl	2a830 <memcpy>
    8fac:	e2843a07 	add	r3, r4, #28672	; 0x7000
    8fb0:	e5d50000 	ldrb	r0, [r5]
    8fb4:	e5931870 	ldr	r1, [r3, #2160]	; 0x870
    8fb8:	e5d32874 	ldrb	r2, [r3, #2164]	; 0x874
    8fbc:	e28dcb1e 	add	ip, sp, #30720	; 0x7800
    8fc0:	e2833e87 	add	r3, r3, #2160	; 0x870
    8fc4:	e2833008 	add	r3, r3, #8
    8fc8:	e350003b 	cmp	r0, #59	; 0x3b
    8fcc:	e28cc010 	add	ip, ip, #16
    8fd0:	e5871fe8 	str	r1, [r7, #4072]	; 0xfe8
    8fd4:	e5c72fec 	strb	r2, [r7, #4076]	; 0xfec
    8fd8:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    8fdc:	e90c000f 	stmdb	ip, {r0, r1, r2, r3}
    8fe0:	e5d43008 	ldrb	r3, [r4, #8]
    8fe4:	0a00002e 	beq	90a4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x304>
    8fe8:	e3530000 	cmp	r3, #0
    8fec:	0a000022 	beq	907c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2dc>
    8ff0:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    8ff4:	e3530063 	cmp	r3, #99	; 0x63
    8ff8:	da000005 	ble	9014 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x274>
    8ffc:	e28d5004 	add	r5, sp, #4
    9000:	e1a00005 	mov	r0, r5
    9004:	eb009f5a 	bl	30d74 <CommandHandler::~CommandHandler()>
    9008:	e28ddb1e 	add	sp, sp, #30720	; 0x7800
    900c:	e28dd014 	add	sp, sp, #20
    9010:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    9014:	e1a01005 	mov	r1, r5
    9018:	e1a00006 	mov	r0, r6
    901c:	eb00bc74 	bl	381f4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>
    9020:	e1a06000 	mov	r6, r0
    9024:	eb008406 	bl	2a044 <strlen>
    9028:	e3500000 	cmp	r0, #0
    902c:	0afffff2 	beq	8ffc <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x25c>
    9030:	e1d630d0 	ldrsb	r3, [r6]
    9034:	e3530008 	cmp	r3, #8
    9038:	0a00002f 	beq	90fc <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x35c>
    903c:	e353000d 	cmp	r3, #13
    9040:	0a000038 	beq	9128 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x388>
    9044:	e2433020 	sub	r3, r3, #32
    9048:	e6ef3073 	uxtb	r3, r3
    904c:	e353005e 	cmp	r3, #94	; 0x5e
    9050:	8affffe9 	bhi	8ffc <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x25c>
    9054:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    9058:	e28d5004 	add	r5, sp, #4
    905c:	e2832001 	add	r2, r3, #1
    9060:	e5842070 	str	r2, [r4, #112]	; 0x70
    9064:	e1d610d0 	ldrsb	r1, [r6]
    9068:	e0843003 	add	r3, r4, r3
    906c:	e5c31009 	strb	r1, [r3, #9]
    9070:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    9074:	eb00cff9 	bl	3d060 <Display::consolePut(unsigned long)>
    9078:	eaffffe0 	b	9000 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x260>
    907c:	e59f01b0 	ldr	r0, [pc, #432]	; 9234 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x494>
    9080:	e1a02005 	mov	r2, r5
    9084:	e1a01006 	mov	r1, r6
    9088:	e0840000 	add	r0, r4, r0
    908c:	eb00b7eb 	bl	37040 <McManager::keyHandler(unsigned char, unsigned char const*)>
    9090:	e28d0004 	add	r0, sp, #4
    9094:	eb009f36 	bl	30d74 <CommandHandler::~CommandHandler()>
    9098:	e28ddb1e 	add	sp, sp, #30720	; 0x7800
    909c:	e28dd014 	add	sp, sp, #20
    90a0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    90a4:	e3530000 	cmp	r3, #0
    90a8:	0a000003 	beq	90bc <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x31c>
    90ac:	e3a03001 	mov	r3, #1
    90b0:	e28d5004 	add	r5, sp, #4
    90b4:	e5c43008 	strb	r3, [r4, #8]
    90b8:	eaffffd0 	b	9000 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x260>
    90bc:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    90c0:	e59f1170 	ldr	r1, [pc, #368]	; 9238 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x498>
    90c4:	eb00cfe0 	bl	3d04c <Display::consolePut(char const*)>
    90c8:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    90cc:	e59f1168 	ldr	r1, [pc, #360]	; 923c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x49c>
    90d0:	eb00cfdd 	bl	3d04c <Display::consolePut(char const*)>
    90d4:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    90d8:	e59f1160 	ldr	r1, [pc, #352]	; 9240 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4a0>
    90dc:	eb00cfda 	bl	3d04c <Display::consolePut(char const*)>
    90e0:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    90e4:	e59f1158 	ldr	r1, [pc, #344]	; 9244 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4a4>
    90e8:	eb00cfd7 	bl	3d04c <Display::consolePut(char const*)>
    90ec:	e59f1154 	ldr	r1, [pc, #340]	; 9248 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4a8>
    90f0:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    90f4:	eb00cfd4 	bl	3d04c <Display::consolePut(char const*)>
    90f8:	eaffffeb 	b	90ac <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x30c>
    90fc:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    9100:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    9104:	e3530000 	cmp	r3, #0
    9108:	c2433001 	subgt	r3, r3, #1
    910c:	e3a01008 	mov	r1, #8
    9110:	c5843070 	strgt	r3, [r4, #112]	; 0x70
    9114:	eb00cfd1 	bl	3d060 <Display::consolePut(unsigned long)>
    9118:	e3a01020 	mov	r1, #32
    911c:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    9120:	eb00cfce 	bl	3d060 <Display::consolePut(unsigned long)>
    9124:	eaffffb4 	b	8ffc <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x25c>
    9128:	e3a02000 	mov	r2, #0
    912c:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    9130:	e5c42008 	strb	r2, [r4, #8]
    9134:	e1530002 	cmp	r3, r2
    9138:	e0843003 	add	r3, r4, r3
    913c:	e5c32009 	strb	r2, [r3, #9]
    9140:	ca000007 	bgt	9164 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3c4>
    9144:	e28d5004 	add	r5, sp, #4
    9148:	e3a06000 	mov	r6, #0
    914c:	e59f10f8 	ldr	r1, [pc, #248]	; 924c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4ac>
    9150:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    9154:	e5846070 	str	r6, [r4, #112]	; 0x70
    9158:	eb00cfbb 	bl	3d04c <Display::consolePut(char const*)>
    915c:	e5c46008 	strb	r6, [r4, #8]
    9160:	eaffffa6 	b	9000 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x260>
    9164:	e1d400d9 	ldrsb	r0, [r4, #9]
    9168:	eb0094f9 	bl	2e554 <rdtolower>
    916c:	e3500074 	cmp	r0, #116	; 0x74
    9170:	0afffff3 	beq	9144 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3a4>
    9174:	e1d400d9 	ldrsb	r0, [r4, #9]
    9178:	eb0094f5 	bl	2e554 <rdtolower>
    917c:	e350006d 	cmp	r0, #109	; 0x6d
    9180:	0a00001a 	beq	91f0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x450>
    9184:	e1d400d9 	ldrsb	r0, [r4, #9]
    9188:	eb0094f1 	bl	2e554 <rdtolower>
    918c:	e3500062 	cmp	r0, #98	; 0x62
    9190:	0affffeb 	beq	9144 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3a4>
    9194:	e1d400d9 	ldrsb	r0, [r4, #9]
    9198:	eb0094ed 	bl	2e554 <rdtolower>
    919c:	e3500072 	cmp	r0, #114	; 0x72
    91a0:	0affffe7 	beq	9144 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3a4>
    91a4:	e1d400d9 	ldrsb	r0, [r4, #9]
    91a8:	eb0094e9 	bl	2e554 <rdtolower>
    91ac:	e3500073 	cmp	r0, #115	; 0x73
    91b0:	0affffe3 	beq	9144 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3a4>
    91b4:	e2846009 	add	r6, r4, #9
    91b8:	e28d5004 	add	r5, sp, #4
    91bc:	e1a00005 	mov	r0, r5
    91c0:	e1a01006 	mov	r1, r6
    91c4:	eb009e59 	bl	30b30 <CommandHandler::sendAPIReq(char const*)>
    91c8:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    91cc:	e59f107c 	ldr	r1, [pc, #124]	; 9250 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4b0>
    91d0:	eb00cf9d 	bl	3d04c <Display::consolePut(char const*)>
    91d4:	e1a01006 	mov	r1, r6
    91d8:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    91dc:	eb00cf9a 	bl	3d04c <Display::consolePut(char const*)>
    91e0:	e59f106c 	ldr	r1, [pc, #108]	; 9254 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4b4>
    91e4:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    91e8:	eb00cf97 	bl	3d04c <Display::consolePut(char const*)>
    91ec:	eaffffd5 	b	9148 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3a8>
    91f0:	e3a03001 	mov	r3, #1
    91f4:	e2846947 	add	r6, r4, #1163264	; 0x11c000
    91f8:	e2866a01 	add	r6, r6, #4096	; 0x1000
    91fc:	e2842b1e 	add	r2, r4, #30720	; 0x7800
    9200:	e5c63bd5 	strb	r3, [r6, #3029]	; 0xbd5
    9204:	e1a00004 	mov	r0, r4
    9208:	e5941078 	ldr	r1, [r4, #120]	; 0x78
    920c:	e2822098 	add	r2, r2, #152	; 0x98
    9210:	eb00c1bb 	bl	39904 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)>
    9214:	e3a03000 	mov	r3, #0
    9218:	e28d5004 	add	r5, sp, #4
    921c:	e5c63bd5 	strb	r3, [r6, #3029]	; 0xbd5
    9220:	eaffffc8 	b	9148 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3a8>
    9224:	00047d50 	.word	0x00047d50
    9228:	00040a8c 	.word	0x00040a8c
    922c:	00002710 	.word	0x00002710
    9230:	000007d1 	.word	0x000007d1
    9234:	00117f9c 	.word	0x00117f9c
    9238:	000408a0 	.word	0x000408a0
    923c:	000408b0 	.word	0x000408b0
    9240:	000408f0 	.word	0x000408f0
    9244:	00040918 	.word	0x00040918
    9248:	00040940 	.word	0x00040940
    924c:	00040980 	.word	0x00040980
    9250:	00040968 	.word	0x00040968
    9254:	000491cc 	.word	0x000491cc

00009258 <BusRaiderApp::service()>:
    9258:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    925c:	e1a04000 	mov	r4, r0
    9260:	e24dde7d 	sub	sp, sp, #2000	; 0x7d0
    9264:	e2800b1e 	add	r0, r0, #30720	; 0x7800
    9268:	e24dd00c 	sub	sp, sp, #12
    926c:	e2800098 	add	r0, r0, #152	; 0x98
    9270:	eb009fab 	bl	31124 <BusControl::service()>
    9274:	e59f5228 	ldr	r5, [pc, #552]	; 94a4 <BusRaiderApp::service()+0x24c>
    9278:	e59f0228 	ldr	r0, [pc, #552]	; 94a8 <BusRaiderApp::service()+0x250>
    927c:	e0845005 	add	r5, r4, r5
    9280:	e0840000 	add	r0, r4, r0
    9284:	eb00af4b 	bl	34fb8 <ControlAPI::service()>
    9288:	e284607c 	add	r6, r4, #124	; 0x7c
    928c:	e1a00005 	mov	r0, r5
    9290:	eb00b6ed 	bl	36e4c <McManager::service()>
    9294:	e1a00006 	mov	r0, r6
    9298:	eb009f55 	bl	30ff4 <CommsManager::service()>
    929c:	eb0092d4 	bl	2ddf4 <micros>
    92a0:	e5941074 	ldr	r1, [r4, #116]	; 0x74
    92a4:	e59f2200 	ldr	r2, [pc, #512]	; 94ac <BusRaiderApp::service()+0x254>
    92a8:	eb0092ef 	bl	2de6c <isTimeout>
    92ac:	e3500000 	cmp	r0, #0
    92b0:	0a000005 	beq	92cc <BusRaiderApp::service()+0x74>
    92b4:	e59f31f4 	ldr	r3, [pc, #500]	; 94b0 <BusRaiderApp::service()+0x258>
    92b8:	e5933000 	ldr	r3, [r3]
    92bc:	e2833a05 	add	r3, r3, #20480	; 0x5000
    92c0:	e5937860 	ldr	r7, [r3, #2144]	; 0x860
    92c4:	e3570000 	cmp	r7, #0
    92c8:	0a000055 	beq	9424 <BusRaiderApp::service()+0x1cc>
    92cc:	e2845946 	add	r5, r4, #1146880	; 0x118000
    92d0:	e2855a02 	add	r5, r5, #8192	; 0x2000
    92d4:	eb0092c7 	bl	2ddf8 <millis>
    92d8:	e5951ffc 	ldr	r1, [r5, #4092]	; 0xffc
    92dc:	e59f21d0 	ldr	r2, [pc, #464]	; 94b4 <BusRaiderApp::service()+0x25c>
    92e0:	eb0092e1 	bl	2de6c <isTimeout>
    92e4:	e3500000 	cmp	r0, #0
    92e8:	0a000007 	beq	930c <BusRaiderApp::service()+0xb4>
    92ec:	e59f31bc 	ldr	r3, [pc, #444]	; 94b0 <BusRaiderApp::service()+0x258>
    92f0:	e5933000 	ldr	r3, [r3]
    92f4:	e2833a05 	add	r3, r3, #20480	; 0x5000
    92f8:	e5933860 	ldr	r3, [r3, #2144]	; 0x860
    92fc:	e3530000 	cmp	r3, #0
    9300:	0a000057 	beq	9464 <BusRaiderApp::service()+0x20c>
    9304:	eb0092bb 	bl	2ddf8 <millis>
    9308:	e5850ffc 	str	r0, [r5, #4092]	; 0xffc
    930c:	e2847947 	add	r7, r4, #1163264	; 0x11c000
    9310:	e2875a01 	add	r5, r7, #4096	; 0x1000
    9314:	e5953710 	ldr	r3, [r5, #1808]	; 0x710
    9318:	e3530000 	cmp	r3, #0
    931c:	0a000024 	beq	93b4 <BusRaiderApp::service()+0x15c>
    9320:	e1a00004 	mov	r0, r4
    9324:	ebfffcf0 	bl	86ec <BusRaiderApp::statusDisplayUpdate()>
    9328:	e5d56bd4 	ldrb	r6, [r5, #3028]	; 0xbd4
    932c:	e3560000 	cmp	r6, #0
    9330:	0a000002 	beq	9340 <BusRaiderApp::service()+0xe8>
    9334:	e5d53bd5 	ldrb	r3, [r5, #3029]	; 0xbd5
    9338:	e3530000 	cmp	r3, #0
    933c:	0a000019 	beq	93a8 <BusRaiderApp::service()+0x150>
    9340:	e5952bc8 	ldr	r2, [r5, #3016]	; 0xbc8
    9344:	e5953bcc 	ldr	r3, [r5, #3020]	; 0xbcc
    9348:	e1520003 	cmp	r2, r3
    934c:	0a000015 	beq	93a8 <BusRaiderApp::service()+0x150>
    9350:	e5950bcc 	ldr	r0, [r5, #3020]	; 0xbcc
    9354:	e5953bcc 	ldr	r3, [r5, #3020]	; 0xbcc
    9358:	e5952bd0 	ldr	r2, [r5, #3024]	; 0xbd0
    935c:	e2833001 	add	r3, r3, #1
    9360:	e5853bcc 	str	r3, [r5, #3020]	; 0xbcc
    9364:	e5953bcc 	ldr	r3, [r5, #3020]	; 0xbcc
    9368:	e1530002 	cmp	r3, r2
    936c:	23a03000 	movcs	r3, #0
    9370:	25853bcc 	strcs	r3, [r5, #3020]	; 0xbcc
    9374:	e3560000 	cmp	r6, #0
    9378:	1a000019 	bne	93e4 <BusRaiderApp::service()+0x18c>
    937c:	e3a01001 	mov	r1, #1
    9380:	e59f2130 	ldr	r2, [pc, #304]	; 94b8 <BusRaiderApp::service()+0x260>
    9384:	e0800110 	add	r0, r0, r0, lsl r1
    9388:	e5c51bd4 	strb	r1, [r5, #3028]	; 0xbd4
    938c:	e59f1128 	ldr	r1, [pc, #296]	; 94bc <BusRaiderApp::service()+0x264>
    9390:	e084c100 	add	ip, r4, r0, lsl #2
    9394:	e7dc1001 	ldrb	r1, [ip, r1]
    9398:	e1a00004 	mov	r0, r4
    939c:	e08c2002 	add	r2, ip, r2
    93a0:	ebfffe7e 	bl	8da0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)>
    93a4:	e5c56bd4 	strb	r6, [r5, #3028]	; 0xbd4
    93a8:	e28dde7d 	add	sp, sp, #2000	; 0x7d0
    93ac:	e28dd00c 	add	sp, sp, #12
    93b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    93b4:	eb00928e 	bl	2ddf4 <micros>
    93b8:	e59f2100 	ldr	r2, [pc, #256]	; 94c0 <BusRaiderApp::service()+0x268>
    93bc:	e5951714 	ldr	r1, [r5, #1812]	; 0x714
    93c0:	eb0092a9 	bl	2de6c <isTimeout>
    93c4:	e3500000 	cmp	r0, #0
    93c8:	0affffd4 	beq	9320 <BusRaiderApp::service()+0xc8>
    93cc:	e1a00006 	mov	r0, r6
    93d0:	e59f10ec 	ldr	r1, [pc, #236]	; 94c4 <BusRaiderApp::service()+0x26c>
    93d4:	eb009dd5 	bl	30b30 <CommandHandler::sendAPIReq(char const*)>
    93d8:	eb009285 	bl	2ddf4 <micros>
    93dc:	e5850714 	str	r0, [r5, #1812]	; 0x714
    93e0:	eaffffce 	b	9320 <BusRaiderApp::service()+0xc8>
    93e4:	e59f30d0 	ldr	r3, [pc, #208]	; 94bc <BusRaiderApp::service()+0x264>
    93e8:	e0800080 	add	r0, r0, r0, lsl #1
    93ec:	e59f10c4 	ldr	r1, [pc, #196]	; 94b8 <BusRaiderApp::service()+0x260>
    93f0:	e0842100 	add	r2, r4, r0, lsl #2
    93f4:	e7d20003 	ldrb	r0, [r2, r3]
    93f8:	e0821001 	add	r1, r2, r1
    93fc:	eb00bb7c 	bl	381f4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>
    9400:	e1a04000 	mov	r4, r0
    9404:	eb00830e 	bl	2a044 <strlen>
    9408:	e3500000 	cmp	r0, #0
    940c:	11d430d0 	ldrsbne	r3, [r4]
    9410:	12877a01 	addne	r7, r7, #4096	; 0x1000
    9414:	15873bd8 	strne	r3, [r7, #3032]	; 0xbd8
    9418:	e28dde7d 	add	sp, sp, #2000	; 0x7d0
    941c:	e28dd00c 	add	sp, sp, #12
    9420:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9424:	e1a00005 	mov	r0, r5
    9428:	eb00b512 	bl	36878 <McManager::getMachineJSON()>
    942c:	e59f5094 	ldr	r5, [pc, #148]	; 94c8 <BusRaiderApp::service()+0x270>
    9430:	e1a01000 	mov	r1, r0
    9434:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    9438:	e28d0008 	add	r0, sp, #8
    943c:	e0845005 	add	r5, r4, r5
    9440:	eb0092a5 	bl	2dedc <strlcpy>
    9444:	e1a01005 	mov	r1, r5
    9448:	e28d0008 	add	r0, sp, #8
    944c:	eb008306 	bl	2a06c <strcmp>
    9450:	e3500000 	cmp	r0, #0
    9454:	1a000006 	bne	9474 <BusRaiderApp::service()+0x21c>
    9458:	eb009265 	bl	2ddf4 <micros>
    945c:	e5840074 	str	r0, [r4, #116]	; 0x74
    9460:	eaffff99 	b	92cc <BusRaiderApp::service()+0x74>
    9464:	e1a00006 	mov	r0, r6
    9468:	e59f105c 	ldr	r1, [pc, #92]	; 94cc <BusRaiderApp::service()+0x274>
    946c:	eb009daf 	bl	30b30 <CommandHandler::sendAPIReq(char const*)>
    9470:	eaffffa3 	b	9304 <BusRaiderApp::service()+0xac>
    9474:	e28d1008 	add	r1, sp, #8
    9478:	e1a00005 	mov	r0, r5
    947c:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    9480:	eb009295 	bl	2dedc <strlcpy>
    9484:	e1a03007 	mov	r3, r7
    9488:	e1a00006 	mov	r0, r6
    948c:	e59f103c 	ldr	r1, [pc, #60]	; 94d0 <BusRaiderApp::service()+0x278>
    9490:	e58d7004 	str	r7, [sp, #4]
    9494:	e58d7000 	str	r7, [sp]
    9498:	e28d2008 	add	r2, sp, #8
    949c:	eb009a85 	bl	2feb8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
    94a0:	eaffffec 	b	9458 <BusRaiderApp::service()+0x200>
    94a4:	00117f9c 	.word	0x00117f9c
    94a8:	00117f88 	.word	0x00117f88
    94ac:	000f4240 	.word	0x000f4240
    94b0:	0005cf54 	.word	0x0005cf54
    94b4:	00001388 	.word	0x00001388
    94b8:	0011d718 	.word	0x0011d718
    94bc:	0011d720 	.word	0x0011d720
    94c0:	004c4b40 	.word	0x004c4b40
    94c4:	000409b0 	.word	0x000409b0
    94c8:	0011a724 	.word	0x0011a724
    94cc:	000409a0 	.word	0x000409a0
    94d0:	00040990 	.word	0x00040990

000094d4 <BusRaiderApp::getPiStatus(char*, int)>:
    94d4:	e1a03000 	mov	r3, r0
    94d8:	e92d4070 	push	{r4, r5, r6, lr}
    94dc:	e1a04001 	mov	r4, r1
    94e0:	e59f0024 	ldr	r0, [pc, #36]	; 950c <BusRaiderApp::getPiStatus(char*, int)+0x38>
    94e4:	e1a05002 	mov	r5, r2
    94e8:	e0830000 	add	r0, r3, r0
    94ec:	eb00b4e1 	bl	36878 <McManager::getMachineJSON()>
    94f0:	e3540000 	cmp	r4, #0
    94f4:	08bd8070 	popeq	{r4, r5, r6, pc}
    94f8:	e1a01000 	mov	r1, r0
    94fc:	e1a02005 	mov	r2, r5
    9500:	e1a00004 	mov	r0, r4
    9504:	e8bd4070 	pop	{r4, r5, r6, lr}
    9508:	ea009273 	b	2dedc <strlcpy>
    950c:	00117f9c 	.word	0x00117f9c

00009510 <BusRaiderApp::storeESP32StatusInfo(char const*)>:
    9510:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9514:	e59f514c 	ldr	r5, [pc, #332]	; 9668 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x158>
    9518:	e24dde45 	sub	sp, sp, #1104	; 0x450
    951c:	e0805005 	add	r5, r0, r5
    9520:	e24dd008 	sub	sp, sp, #8
    9524:	e1a04000 	mov	r4, r0
    9528:	e1a00005 	mov	r0, r5
    952c:	e58d1004 	str	r1, [sp, #4]
    9530:	eb0082c3 	bl	2a044 <strlen>
    9534:	e1a08000 	mov	r8, r0
    9538:	eb00922e 	bl	2ddf8 <millis>
    953c:	e2846946 	add	r6, r4, #1146880	; 0x118000
    9540:	e2866a02 	add	r6, r6, #8192	; 0x2000
    9544:	e59f7120 	ldr	r7, [pc, #288]	; 966c <BusRaiderApp::storeESP32StatusInfo(char const*)+0x15c>
    9548:	e5860ffc 	str	r0, [r6, #4092]	; 0xffc
    954c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    9550:	eb00922f 	bl	2de14 <microsDelay>
    9554:	e0847007 	add	r7, r4, r7
    9558:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    955c:	e59d1004 	ldr	r1, [sp, #4]
    9560:	e28d2070 	add	r2, sp, #112	; 0x70
    9564:	e59f0104 	ldr	r0, [pc, #260]	; 9670 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x160>
    9568:	eb009308 	bl	2e190 <jsonGetValueForKey>
    956c:	e1a02007 	mov	r2, r7
    9570:	e3a0301e 	mov	r3, #30
    9574:	e28d1070 	add	r1, sp, #112	; 0x70
    9578:	e59f00f4 	ldr	r0, [pc, #244]	; 9674 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x164>
    957c:	eb009303 	bl	2e190 <jsonGetValueForKey>
    9580:	e59f10f0 	ldr	r1, [pc, #240]	; 9678 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x168>
    9584:	e1a00007 	mov	r0, r7
    9588:	eb0082b7 	bl	2a06c <strcmp>
    958c:	e2500000 	subs	r0, r0, #0
    9590:	13a00001 	movne	r0, #1
    9594:	e59f20e0 	ldr	r2, [pc, #224]	; 967c <BusRaiderApp::storeESP32StatusInfo(char const*)+0x16c>
    9598:	e3a0301e 	mov	r3, #30
    959c:	e5c60ff8 	strb	r0, [r6, #4088]	; 0xff8
    95a0:	e0842002 	add	r2, r4, r2
    95a4:	e28d1070 	add	r1, sp, #112	; 0x70
    95a8:	e59f00d0 	ldr	r0, [pc, #208]	; 9680 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x170>
    95ac:	eb0092f7 	bl	2e190 <jsonGetValueForKey>
    95b0:	e59f20cc 	ldr	r2, [pc, #204]	; 9684 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x174>
    95b4:	e3a03064 	mov	r3, #100	; 0x64
    95b8:	e28d1070 	add	r1, sp, #112	; 0x70
    95bc:	e0842002 	add	r2, r4, r2
    95c0:	e59f00c0 	ldr	r0, [pc, #192]	; 9688 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x178>
    95c4:	eb0092f1 	bl	2e190 <jsonGetValueForKey>
    95c8:	e1a02005 	mov	r2, r5
    95cc:	e3a03064 	mov	r3, #100	; 0x64
    95d0:	e28d1070 	add	r1, sp, #112	; 0x70
    95d4:	e59f00b0 	ldr	r0, [pc, #176]	; 968c <BusRaiderApp::storeESP32StatusInfo(char const*)+0x17c>
    95d8:	eb0092ec 	bl	2e190 <jsonGetValueForKey>
    95dc:	e3a0c000 	mov	ip, #0
    95e0:	e3a03064 	mov	r3, #100	; 0x64
    95e4:	e28d1070 	add	r1, sp, #112	; 0x70
    95e8:	e28d200c 	add	r2, sp, #12
    95ec:	e59f009c 	ldr	r0, [pc, #156]	; 9690 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x180>
    95f0:	e5cdc00c 	strb	ip, [sp, #12]
    95f4:	eb0092e5 	bl	2e190 <jsonGetValueForKey>
    95f8:	e28d000c 	add	r0, sp, #12
    95fc:	eb008290 	bl	2a044 <strlen>
    9600:	e3500000 	cmp	r0, #0
    9604:	03a00014 	moveq	r0, #20
    9608:	1a00000e 	bne	9648 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x138>
    960c:	e2844945 	add	r4, r4, #1130496	; 0x114000
    9610:	e2844a03 	add	r4, r4, #12288	; 0x3000
    9614:	e5840f68 	str	r0, [r4, #3944]	; 0xf68
    9618:	e1a00005 	mov	r0, r5
    961c:	eb008288 	bl	2a044 <strlen>
    9620:	e2503000 	subs	r3, r0, #0
    9624:	13a03001 	movne	r3, #1
    9628:	e3580000 	cmp	r8, #0
    962c:	01a00003 	moveq	r0, r3
    9630:	13a00000 	movne	r0, #0
    9634:	e3500000 	cmp	r0, #0
    9638:	1a000005 	bne	9654 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x144>
    963c:	e28dde45 	add	sp, sp, #1104	; 0x450
    9640:	e28dd008 	add	sp, sp, #8
    9644:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9648:	e28d000c 	add	r0, sp, #12
    964c:	eb008473 	bl	2a820 <atoi>
    9650:	eaffffed 	b	960c <BusRaiderApp::storeESP32StatusInfo(char const*)+0xfc>
    9654:	e59f0038 	ldr	r0, [pc, #56]	; 9694 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x184>
    9658:	eb0095dc 	bl	2edd0 <LogSetOutFn>
    965c:	e28dde45 	add	sp, sp, #1104	; 0x450
    9660:	e28dd008 	add	sp, sp, #8
    9664:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9668:	0011af94 	.word	0x0011af94
    966c:	0011aef4 	.word	0x0011aef4
    9670:	000409bc 	.word	0x000409bc
    9674:	000409c8 	.word	0x000409c8
    9678:	000409d0 	.word	0x000409d0
    967c:	0011af12 	.word	0x0011af12
    9680:	000409d8 	.word	0x000409d8
    9684:	0011af30 	.word	0x0011af30
    9688:	000409e4 	.word	0x000409e4
    968c:	000409ec 	.word	0x000409ec
    9690:	000409f4 	.word	0x000409f4
    9694:	00030c18 	.word	0x00030c18

00009698 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
    9698:	e92d4070 	push	{r4, r5, r6, lr}
    969c:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    96a0:	e1a06000 	mov	r6, r0
    96a4:	e3a030c8 	mov	r3, #200	; 0xc8
    96a8:	e59f00c0 	ldr	r0, [pc, #192]	; 9770 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd8>
    96ac:	e28d2004 	add	r2, sp, #4
    96b0:	e1a05001 	mov	r5, r1
    96b4:	eb0092b5 	bl	2e190 <jsonGetValueForKey>
    96b8:	e2504000 	subs	r4, r0, #0
    96bc:	1a000003 	bne	96d0 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
    96c0:	e3a04000 	mov	r4, #0
    96c4:	e1a00004 	mov	r0, r4
    96c8:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    96cc:	e8bd8070 	pop	{r4, r5, r6, pc}
    96d0:	e3a03000 	mov	r3, #0
    96d4:	e59d20e0 	ldr	r2, [sp, #224]	; 0xe0
    96d8:	e59f1094 	ldr	r1, [pc, #148]	; 9774 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdc>
    96dc:	e5c23000 	strb	r3, [r2]
    96e0:	e28d0004 	add	r0, sp, #4
    96e4:	eb00827d 	bl	2a0e0 <strcasecmp>
    96e8:	e3500000 	cmp	r0, #0
    96ec:	0a000012 	beq	973c <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa4>
    96f0:	e59f1080 	ldr	r1, [pc, #128]	; 9778 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe0>
    96f4:	e28d0004 	add	r0, sp, #4
    96f8:	eb008278 	bl	2a0e0 <strcasecmp>
    96fc:	e3500000 	cmp	r0, #0
    9700:	0a000014 	beq	9758 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc0>
    9704:	e59f1070 	ldr	r1, [pc, #112]	; 977c <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe4>
    9708:	e28d0004 	add	r0, sp, #4
    970c:	eb008273 	bl	2a0e0 <strcasecmp>
    9710:	e3500000 	cmp	r0, #0
    9714:	1affffe9 	bne	96c0 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x28>
    9718:	e59f0060 	ldr	r0, [pc, #96]	; 9780 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe8>
    971c:	e1a01005 	mov	r1, r5
    9720:	e0860000 	add	r0, r6, r0
    9724:	eb00b4bb 	bl	36a18 <McManager::setupMachine(char const*)>
    9728:	e3a03001 	mov	r3, #1
    972c:	e286c947 	add	ip, r6, #1163264	; 0x11c000
    9730:	e28cca01 	add	ip, ip, #4096	; 0x1000
    9734:	e58c3710 	str	r3, [ip, #1808]	; 0x710
    9738:	eaffffe1 	b	96c4 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2c>
    973c:	e1a00006 	mov	r0, r6
    9740:	e59d20e4 	ldr	r2, [sp, #228]	; 0xe4
    9744:	e59d10e0 	ldr	r1, [sp, #224]	; 0xe0
    9748:	ebffff61 	bl	94d4 <BusRaiderApp::getPiStatus(char*, int)>
    974c:	e1a00004 	mov	r0, r4
    9750:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    9754:	e8bd8070 	pop	{r4, r5, r6, pc}
    9758:	e1a00006 	mov	r0, r6
    975c:	e1a01005 	mov	r1, r5
    9760:	ebffff6a 	bl	9510 <BusRaiderApp::storeESP32StatusInfo(char const*)>
    9764:	e1a00004 	mov	r0, r4
    9768:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    976c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9770:	000409fc 	.word	0x000409fc
    9774:	00040a04 	.word	0x00040a04
    9778:	00040a10 	.word	0x00040a10
    977c:	00040a24 	.word	0x00040a24
    9780:	00117f9c 	.word	0x00117f9c

00009784 <BusRaiderApp::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
    9784:	e3500000 	cmp	r0, #0
    9788:	012fff1e 	bxeq	lr
    978c:	eaffffc1 	b	9698 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

00009790 <BusRaiderApp::selfTestHelperService()>:
    9790:	eafffeb0 	b	9258 <BusRaiderApp::service()>

00009794 <BusRaiderApp::selfTestKeyboardGet()>:
    9794:	e3e02000 	mvn	r2, #0
    9798:	e2803947 	add	r3, r0, #1163264	; 0x11c000
    979c:	e2833a01 	add	r3, r3, #4096	; 0x1000
    97a0:	e5930bd8 	ldr	r0, [r3, #3032]	; 0xbd8
    97a4:	e5832bd8 	str	r2, [r3, #3032]	; 0xbd8
    97a8:	e12fff1e 	bx	lr

000097ac <SimpleBuffer::~SimpleBuffer()>:
    97ac:	e12fff1e 	bx	lr

000097b0 <SimpleBuffer::~SimpleBuffer()>:
    97b0:	e92d4010 	push	{r4, lr}
    97b4:	e1a04000 	mov	r4, r0
    97b8:	e59f1008 	ldr	r1, [pc, #8]	; 97c8 <SimpleBuffer::~SimpleBuffer()+0x18>
    97bc:	eb00860f 	bl	2b000 <operator delete(void*, unsigned int)>
    97c0:	e1a00004 	mov	r0, r4
    97c4:	e8bd8010 	pop	{r4, pc}
    97c8:	00002718 	.word	0x00002718

000097cc <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
    97cc:	e92d4070 	push	{r4, r5, r6, lr}
    97d0:	e3a06000 	mov	r6, #0
    97d4:	e1a04000 	mov	r4, r0
    97d8:	e59f5034 	ldr	r5, [pc, #52]	; 9814 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x48>
    97dc:	e580643c 	str	r6, [r0, #1084]	; 0x43c
    97e0:	e2853008 	add	r3, r5, #8
    97e4:	e5803000 	str	r3, [r0]
    97e8:	eb006eb0 	bl	252b0 <CDeviceNameService::Get()>
    97ec:	e1a03006 	mov	r3, r6
    97f0:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
    97f4:	e2851030 	add	r1, r5, #48	; 0x30
    97f8:	eb006ed2 	bl	25348 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
    97fc:	e2840024 	add	r0, r4, #36	; 0x24
    9800:	eb003ac3 	bl	18314 <CKeyboardBehaviour::~CKeyboardBehaviour()>
    9804:	e1a00004 	mov	r0, r4
    9808:	eb002236 	bl	120e8 <CUSBHIDDevice::~CUSBHIDDevice()>
    980c:	e1a00004 	mov	r0, r4
    9810:	e8bd8070 	pop	{r4, r5, r6, pc}
    9814:	00040af4 	.word	0x00040af4

00009818 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
    9818:	e92d4010 	push	{r4, lr}
    981c:	e1a04000 	mov	r4, r0
    9820:	ebffffe9 	bl	97cc <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
    9824:	e1a00004 	mov	r0, r4
    9828:	e3a01e45 	mov	r1, #1104	; 0x450
    982c:	eb0085f3 	bl	2b000 <operator delete(void*, unsigned int)>
    9830:	e1a00004 	mov	r0, r4
    9834:	e8bd8010 	pop	{r4, pc}

00009838 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
    9838:	e2522008 	subs	r2, r2, #8
    983c:	13a02001 	movne	r2, #1
    9840:	e3510000 	cmp	r1, #0
    9844:	03a02001 	moveq	r2, #1
    9848:	e3520000 	cmp	r2, #0
    984c:	112fff1e 	bxne	lr
    9850:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9854:	e590343c 	ldr	r3, [r0, #1084]	; 0x43c
    9858:	e1a05001 	mov	r5, r1
    985c:	e3530000 	cmp	r3, #0
    9860:	e1a06000 	mov	r6, r0
    9864:	e24dd00c 	sub	sp, sp, #12
    9868:	0a000003 	beq	987c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
    986c:	e4d10002 	ldrb	r0, [r1], #2
    9870:	e28dd00c 	add	sp, sp, #12
    9874:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9878:	e12fff13 	bx	r3
    987c:	e1a04003 	mov	r4, r3
    9880:	e3a07001 	mov	r7, #1
    9884:	e2808024 	add	r8, r0, #36	; 0x24
    9888:	ea000004 	b	98a0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>
    988c:	e1120003 	tst	r2, r3
    9890:	1a000041 	bne	999c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x164>
    9894:	e2844001 	add	r4, r4, #1
    9898:	e3540008 	cmp	r4, #8
    989c:	0a00000d 	beq	98d8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xa0>
    98a0:	e5d52000 	ldrb	r2, [r5]
    98a4:	e1a03417 	lsl	r3, r7, r4
    98a8:	e1120003 	tst	r2, r3
    98ac:	e5d62440 	ldrb	r2, [r6, #1088]	; 0x440
    98b0:	0afffff5 	beq	988c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x54>
    98b4:	e1120003 	tst	r2, r3
    98b8:	1afffff5 	bne	9894 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x5c>
    98bc:	e2441080 	sub	r1, r4, #128	; 0x80
    98c0:	e1a00008 	mov	r0, r8
    98c4:	e6ef1071 	uxtb	r1, r1
    98c8:	e2844001 	add	r4, r4, #1
    98cc:	eb003af2 	bl	1849c <CKeyboardBehaviour::KeyPressed(unsigned char)>
    98d0:	e3540008 	cmp	r4, #8
    98d4:	1afffff1 	bne	98a0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>
    98d8:	e2867d11 	add	r7, r6, #1088	; 0x440
    98dc:	e2878002 	add	r8, r7, #2
    98e0:	e1a09008 	mov	r9, r8
    98e4:	e2874008 	add	r4, r7, #8
    98e8:	e285b002 	add	fp, r5, #2
    98ec:	e285a008 	add	sl, r5, #8
    98f0:	e2860024 	add	r0, r6, #36	; 0x24
    98f4:	ea000001 	b	9900 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc8>
    98f8:	e1540009 	cmp	r4, r9
    98fc:	0a00000d 	beq	9938 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x100>
    9900:	e4d91001 	ldrb	r1, [r9], #1
    9904:	e3510000 	cmp	r1, #0
    9908:	11a0300b 	movne	r3, fp
    990c:	0afffff9 	beq	98f8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc0>
    9910:	e4d32001 	ldrb	r2, [r3], #1
    9914:	e1520001 	cmp	r2, r1
    9918:	0afffff6 	beq	98f8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc0>
    991c:	e15a0003 	cmp	sl, r3
    9920:	1afffffa 	bne	9910 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd8>
    9924:	e58d0004 	str	r0, [sp, #4]
    9928:	eb003ae9 	bl	184d4 <CKeyboardBehaviour::KeyReleased(unsigned char)>
    992c:	e1540009 	cmp	r4, r9
    9930:	e59d0004 	ldr	r0, [sp, #4]
    9934:	1afffff1 	bne	9900 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc8>
    9938:	e2866024 	add	r6, r6, #36	; 0x24
    993c:	e2859001 	add	r9, r5, #1
    9940:	e285a007 	add	sl, r5, #7
    9944:	ea000001 	b	9950 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x118>
    9948:	e15a0009 	cmp	sl, r9
    994c:	0a00000c 	beq	9984 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x14c>
    9950:	e5f91001 	ldrb	r1, [r9, #1]!
    9954:	e3510000 	cmp	r1, #0
    9958:	11a03008 	movne	r3, r8
    995c:	0afffff9 	beq	9948 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
    9960:	e4d32001 	ldrb	r2, [r3], #1
    9964:	e1520001 	cmp	r2, r1
    9968:	0afffff6 	beq	9948 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
    996c:	e1540003 	cmp	r4, r3
    9970:	1afffffa 	bne	9960 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x128>
    9974:	e1a00006 	mov	r0, r6
    9978:	eb003ac7 	bl	1849c <CKeyboardBehaviour::KeyPressed(unsigned char)>
    997c:	e15a0009 	cmp	sl, r9
    9980:	1afffff2 	bne	9950 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x118>
    9984:	e1a01005 	mov	r1, r5
    9988:	e1a00007 	mov	r0, r7
    998c:	e3a02008 	mov	r2, #8
    9990:	e28dd00c 	add	sp, sp, #12
    9994:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9998:	ea0083a4 	b	2a830 <memcpy>
    999c:	e2441080 	sub	r1, r4, #128	; 0x80
    99a0:	e1a00008 	mov	r0, r8
    99a4:	e6ef1071 	uxtb	r1, r1
    99a8:	eb003ac9 	bl	184d4 <CKeyboardBehaviour::KeyReleased(unsigned char)>
    99ac:	eaffffb8 	b	9894 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x5c>

000099b0 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
    99b0:	e92d4010 	push	{r4, lr}
    99b4:	e1a04000 	mov	r4, r0
    99b8:	e3a02008 	mov	r2, #8
    99bc:	eb0021b3 	bl	12090 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
    99c0:	e1a00004 	mov	r0, r4
    99c4:	e59f3028 	ldr	r3, [pc, #40]	; 99f4 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x44>
    99c8:	e4803024 	str	r3, [r0], #36	; 0x24
    99cc:	eb003a44 	bl	182e4 <CKeyboardBehaviour::CKeyboardBehaviour()>
    99d0:	e3a01000 	mov	r1, #0
    99d4:	e3a02008 	mov	r2, #8
    99d8:	e2840d11 	add	r0, r4, #1088	; 0x440
    99dc:	e584143c 	str	r1, [r4, #1084]	; 0x43c
    99e0:	e5c41448 	strb	r1, [r4, #1096]	; 0x448
    99e4:	e584144c 	str	r1, [r4, #1100]	; 0x44c
    99e8:	eb008147 	bl	29f0c <memset>
    99ec:	e1a00004 	mov	r0, r4
    99f0:	e8bd8010 	pop	{r4, pc}
    99f4:	00040afc 	.word	0x00040afc

000099f8 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
    99f8:	e2800024 	add	r0, r0, #36	; 0x24
    99fc:	ea003a4e 	b	1833c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

00009a00 <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
    9a00:	e2800024 	add	r0, r0, #36	; 0x24
    9a04:	ea003a57 	b	18368 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

00009a08 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
    9a08:	e2800024 	add	r0, r0, #36	; 0x24
    9a0c:	ea003a60 	b	18394 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

00009a10 <CUSBKeyboardDevice::GetLEDStatus() const>:
    9a10:	e92d4010 	push	{r4, lr}
    9a14:	e2800024 	add	r0, r0, #36	; 0x24
    9a18:	eb003a68 	bl	183c0 <CKeyboardBehaviour::GetLEDStatus() const>
    9a1c:	e2003001 	and	r3, r0, #1
    9a20:	e3100002 	tst	r0, #2
    9a24:	13833002 	orrne	r3, r3, #2
    9a28:	e3100004 	tst	r0, #4
    9a2c:	13833004 	orrne	r3, r3, #4
    9a30:	e1a00003 	mov	r0, r3
    9a34:	e8bd8010 	pop	{r4, pc}

00009a38 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>:
    9a38:	e3510000 	cmp	r1, #0
    9a3c:	0a000001 	beq	9a48 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x10>
    9a40:	e580143c 	str	r1, [r0, #1084]	; 0x43c
    9a44:	e12fff1e 	bx	lr
    9a48:	e3a0207d 	mov	r2, #125	; 0x7d
    9a4c:	e92d4010 	push	{r4, lr}
    9a50:	e59f1004 	ldr	r1, [pc, #4]	; 9a5c <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x24>
    9a54:	e59f0004 	ldr	r0, [pc, #4]	; 9a60 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x28>
    9a58:	eb006b52 	bl	247a8 <assertion_failed>
    9a5c:	00040a94 	.word	0x00040a94
    9a60:	00040aa4 	.word	0x00040aa4

00009a64 <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
    9a64:	e92d4030 	push	{r4, r5, lr}
    9a68:	e24dd024 	sub	sp, sp, #36	; 0x24
    9a6c:	e1a04000 	mov	r4, r0
    9a70:	e5cd101c 	strb	r1, [sp, #28]
    9a74:	eb0017cf 	bl	f9b8 <CUSBFunction::GetHost() const>
    9a78:	e1a05000 	mov	r5, r0
    9a7c:	e1a00004 	mov	r0, r4
    9a80:	eb0017c1 	bl	f98c <CUSBFunction::GetEndpoint0() const>
    9a84:	e1a01000 	mov	r1, r0
    9a88:	e1a00004 	mov	r0, r4
    9a8c:	e58d1014 	str	r1, [sp, #20]
    9a90:	eb001824 	bl	fb28 <CUSBFunction::GetInterfaceNumber() const>
    9a94:	e3a0e001 	mov	lr, #1
    9a98:	e3a0cc02 	mov	ip, #512	; 0x200
    9a9c:	e6ff3070 	uxth	r3, r0
    9aa0:	e28d201c 	add	r2, sp, #28
    9aa4:	e58d3004 	str	r3, [sp, #4]
    9aa8:	e58d2008 	str	r2, [sp, #8]
    9aac:	e1a00005 	mov	r0, r5
    9ab0:	e3a03009 	mov	r3, #9
    9ab4:	e3a02021 	mov	r2, #33	; 0x21
    9ab8:	e59d1014 	ldr	r1, [sp, #20]
    9abc:	e58de00c 	str	lr, [sp, #12]
    9ac0:	e58dc000 	str	ip, [sp]
    9ac4:	eb002367 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    9ac8:	e1e00000 	mvn	r0, r0
    9acc:	e1a00fa0 	lsr	r0, r0, #31
    9ad0:	e28dd024 	add	sp, sp, #36	; 0x24
    9ad4:	e8bd8030 	pop	{r4, r5, pc}

00009ad8 <CUSBKeyboardDevice::Configure()>:
    9ad8:	e92d4030 	push	{r4, r5, lr}
    9adc:	e3a01000 	mov	r1, #0
    9ae0:	e24dd00c 	sub	sp, sp, #12
    9ae4:	e1a04000 	mov	r4, r0
    9ae8:	eb0021a9 	bl	12194 <CUSBHIDDevice::Configure(unsigned int)>
    9aec:	e2505000 	subs	r5, r0, #0
    9af0:	0a000012 	beq	9b40 <CUSBKeyboardDevice::Configure()+0x68>
    9af4:	e5d41448 	ldrb	r1, [r4, #1096]	; 0x448
    9af8:	e1a00004 	mov	r0, r4
    9afc:	ebffffd8 	bl	9a64 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
    9b00:	e59f2058 	ldr	r2, [pc, #88]	; 9b60 <CUSBKeyboardDevice::Configure()+0x88>
    9b04:	e5923000 	ldr	r3, [r2]
    9b08:	e584344c 	str	r3, [r4, #1100]	; 0x44c
    9b0c:	e2833001 	add	r3, r3, #1
    9b10:	e5823000 	str	r3, [r2]
    9b14:	eb006de5 	bl	252b0 <CDeviceNameService::Get()>
    9b18:	e3a02000 	mov	r2, #0
    9b1c:	e58d2000 	str	r2, [sp]
    9b20:	e1a03004 	mov	r3, r4
    9b24:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
    9b28:	e59f1034 	ldr	r1, [pc, #52]	; 9b64 <CUSBKeyboardDevice::Configure()+0x8c>
    9b2c:	eb006deb 	bl	252e0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    9b30:	e1a00004 	mov	r0, r4
    9b34:	e28dd00c 	add	sp, sp, #12
    9b38:	e8bd4030 	pop	{r4, r5, lr}
    9b3c:	ea0022b7 	b	12620 <CUSBHIDDevice::StartRequest()>
    9b40:	eb007400 	bl	26b48 <CLogger::Get()>
    9b44:	e3a02001 	mov	r2, #1
    9b48:	e59f3018 	ldr	r3, [pc, #24]	; 9b68 <CUSBKeyboardDevice::Configure()+0x90>
    9b4c:	e59f1018 	ldr	r1, [pc, #24]	; 9b6c <CUSBKeyboardDevice::Configure()+0x94>
    9b50:	eb00733e 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9b54:	e1a00005 	mov	r0, r5
    9b58:	e28dd00c 	add	sp, sp, #12
    9b5c:	e8bd8030 	pop	{r4, r5, pc}
    9b60:	00049f9c 	.word	0x00049f9c
    9b64:	00040b24 	.word	0x00040b24
    9b68:	00040ac0 	.word	0x00040ac0
    9b6c:	00040b2c 	.word	0x00040b2c

00009b70 <CUSBKeyboardDevice::UpdateLEDs()>:
    9b70:	e590343c 	ldr	r3, [r0, #1084]	; 0x43c
    9b74:	e3530000 	cmp	r3, #0
    9b78:	112fff1e 	bxne	lr
    9b7c:	e92d4010 	push	{r4, lr}
    9b80:	e1a04000 	mov	r4, r0
    9b84:	ebffffa1 	bl	9a10 <CUSBKeyboardDevice::GetLEDStatus() const>
    9b88:	e5d43448 	ldrb	r3, [r4, #1096]	; 0x448
    9b8c:	e1530000 	cmp	r3, r0
    9b90:	08bd8010 	popeq	{r4, pc}
    9b94:	e1a01000 	mov	r1, r0
    9b98:	e5c40448 	strb	r0, [r4, #1096]	; 0x448
    9b9c:	e1a00004 	mov	r0, r4
    9ba0:	ebffffaf 	bl	9a64 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
    9ba4:	e3500000 	cmp	r0, #0
    9ba8:	18bd8010 	popne	{r4, pc}
    9bac:	eb0073e5 	bl	26b48 <CLogger::Get()>
    9bb0:	e8bd4010 	pop	{r4, lr}
    9bb4:	e3a02001 	mov	r2, #1
    9bb8:	e59f3004 	ldr	r3, [pc, #4]	; 9bc4 <CUSBKeyboardDevice::UpdateLEDs()+0x54>
    9bbc:	e59f1004 	ldr	r1, [pc, #4]	; 9bc8 <CUSBKeyboardDevice::UpdateLEDs()+0x58>
    9bc0:	ea007322 	b	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9bc4:	00040adc 	.word	0x00040adc
    9bc8:	00040b2c 	.word	0x00040b2c

00009bcc <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
    9bcc:	e0802002 	add	r2, r0, r2
    9bd0:	ea000002 	b	9be0 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
    9bd4:	e4d03001 	ldrb	r3, [r0], #1
    9bd8:	e1530001 	cmp	r3, r1
    9bdc:	0a000003 	beq	9bf0 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
    9be0:	e1500002 	cmp	r0, r2
    9be4:	1afffffa 	bne	9bd4 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
    9be8:	e3a00000 	mov	r0, #0
    9bec:	e12fff1e 	bx	lr
    9bf0:	e3a00001 	mov	r0, #1
    9bf4:	e12fff1e 	bx	lr

00009bf8 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    9bf8:	e3520000 	cmp	r2, #0
    9bfc:	e92d4010 	push	{r4, lr}
    9c00:	0a000005 	beq	9c1c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x24>
    9c04:	e351000f 	cmp	r1, #15
    9c08:	8a000007 	bhi	9c2c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x34>
    9c0c:	e3a03000 	mov	r3, #0
    9c10:	e0821001 	add	r1, r2, r1
    9c14:	e5c1305c 	strb	r3, [r1, #92]	; 0x5c
    9c18:	e8bd8010 	pop	{r4, pc}
    9c1c:	e59f2018 	ldr	r2, [pc, #24]	; 9c3c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x44>
    9c20:	e59f1018 	ldr	r1, [pc, #24]	; 9c40 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x48>
    9c24:	e59f0018 	ldr	r0, [pc, #24]	; 9c44 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x4c>
    9c28:	eb006ade 	bl	247a8 <assertion_failed>
    9c2c:	e59f2014 	ldr	r2, [pc, #20]	; 9c48 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x50>
    9c30:	e59f1008 	ldr	r1, [pc, #8]	; 9c40 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x48>
    9c34:	e59f0010 	ldr	r0, [pc, #16]	; 9c4c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x54>
    9c38:	eb006ada 	bl	247a8 <assertion_failed>
    9c3c:	000002ab 	.word	0x000002ab
    9c40:	00040b34 	.word	0x00040b34
    9c44:	00040b44 	.word	0x00040b44
    9c48:	000002ae 	.word	0x000002ae
    9c4c:	00040b50 	.word	0x00040b50

00009c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>:
    9c50:	e92d4030 	push	{r4, r5, lr}
    9c54:	e24dd01c 	sub	sp, sp, #28
    9c58:	e1a05000 	mov	r5, r0
    9c5c:	e28d000c 	add	r0, sp, #12
    9c60:	eb000c34 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9c64:	e3a03000 	mov	r3, #0
    9c68:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9c6c:	eb0073b5 	bl	26b48 <CLogger::Get()>
    9c70:	e1a04000 	mov	r4, r0
    9c74:	e28d000c 	add	r0, sp, #12
    9c78:	eb000c37 	bl	cd5c <CDWHCIRegister::Read()>
    9c7c:	e3a02004 	mov	r2, #4
    9c80:	e88d0021 	stm	sp, {r0, r5}
    9c84:	e59f3018 	ldr	r3, [pc, #24]	; 9ca4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]+0x54>
    9c88:	e1a00004 	mov	r0, r4
    9c8c:	e59f1014 	ldr	r1, [pc, #20]	; 9ca8 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]+0x58>
    9c90:	eb0072ee 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9c94:	e28d000c 	add	r0, sp, #12
    9c98:	eb000c2e 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    9c9c:	e28dd01c 	add	sp, sp, #28
    9ca0:	e8bd8030 	pop	{r4, r5, pc}
    9ca4:	00040b70 	.word	0x00040b70
    9ca8:	000410b0 	.word	0x000410b0

00009cac <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>:
    9cac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9cb0:	e1a04000 	mov	r4, r0
    9cb4:	e3a05000 	mov	r5, #0
    9cb8:	e1a07001 	mov	r7, r1
    9cbc:	e1a06002 	mov	r6, r2
    9cc0:	eb0022dd 	bl	1283c <CUSBHostController::CUSBHostController()>
    9cc4:	e3a03001 	mov	r3, #1
    9cc8:	e59f20a8 	ldr	r2, [pc, #168]	; 9d78 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xcc>
    9ccc:	e5845010 	str	r5, [r4, #16]
    9cd0:	e5843014 	str	r3, [r4, #20]
    9cd4:	e5843058 	str	r3, [r4, #88]	; 0x58
    9cd8:	e1a01004 	mov	r1, r4
    9cdc:	e5847004 	str	r7, [r4, #4]
    9ce0:	e5846008 	str	r6, [r4, #8]
    9ce4:	e5842000 	str	r2, [r4]
    9ce8:	e584500c 	str	r5, [r4, #12]
    9cec:	e584506c 	str	r5, [r4, #108]	; 0x6c
    9cf0:	e5845070 	str	r5, [r4, #112]	; 0x70
    9cf4:	e2840074 	add	r0, r4, #116	; 0x74
    9cf8:	eb000d02 	bl	d108 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    9cfc:	e5943004 	ldr	r3, [r4, #4]
    9d00:	e5c45080 	strb	r5, [r4, #128]	; 0x80
    9d04:	e1530005 	cmp	r3, r5
    9d08:	e5c45081 	strb	r5, [r4, #129]	; 0x81
    9d0c:	0a000011 	beq	9d58 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xac>
    9d10:	e5943008 	ldr	r3, [r4, #8]
    9d14:	e3530000 	cmp	r3, #0
    9d18:	11a02005 	movne	r2, r5
    9d1c:	12843014 	addne	r3, r4, #20
    9d20:	12841054 	addne	r1, r4, #84	; 0x54
    9d24:	0a00000f 	beq	9d68 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xbc>
    9d28:	e5a32004 	str	r2, [r3, #4]!
    9d2c:	e1530001 	cmp	r3, r1
    9d30:	1afffffc 	bne	9d28 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x7c>
    9d34:	e3a03000 	mov	r3, #0
    9d38:	e1a01003 	mov	r1, r3
    9d3c:	e0842003 	add	r2, r4, r3
    9d40:	e2833001 	add	r3, r3, #1
    9d44:	e3530010 	cmp	r3, #16
    9d48:	e5c2105c 	strb	r1, [r2, #92]	; 0x5c
    9d4c:	1afffffa 	bne	9d3c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x90>
    9d50:	e1a00004 	mov	r0, r4
    9d54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9d58:	e3a0204b 	mov	r2, #75	; 0x4b
    9d5c:	e59f1018 	ldr	r1, [pc, #24]	; 9d7c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    9d60:	e59f0018 	ldr	r0, [pc, #24]	; 9d80 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd4>
    9d64:	eb006a8f 	bl	247a8 <assertion_failed>
    9d68:	e3a0204c 	mov	r2, #76	; 0x4c
    9d6c:	e59f1008 	ldr	r1, [pc, #8]	; 9d7c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    9d70:	e59f000c 	ldr	r0, [pc, #12]	; 9d84 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd8>
    9d74:	eb006a8b 	bl	247a8 <assertion_failed>
    9d78:	000410c0 	.word	0x000410c0
    9d7c:	00040b34 	.word	0x00040b34
    9d80:	00040b7c 	.word	0x00040b7c
    9d84:	00040b94 	.word	0x00040b94

00009d88 <CDWHCIDevice::GetPortSpeed()>:
    9d88:	e92d4010 	push	{r4, lr}
    9d8c:	e24dd010 	sub	sp, sp, #16
    9d90:	e59f1038 	ldr	r1, [pc, #56]	; 9dd0 <CDWHCIDevice::GetPortSpeed()+0x48>
    9d94:	e28d0004 	add	r0, sp, #4
    9d98:	eb000be6 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9d9c:	e28d0004 	add	r0, sp, #4
    9da0:	eb000bed 	bl	cd5c <CDWHCIRegister::Read()>
    9da4:	e1a008a0 	lsr	r0, r0, #17
    9da8:	e2000003 	and	r0, r0, #3
    9dac:	e3500003 	cmp	r0, #3
    9db0:	03a04004 	moveq	r4, #4
    9db4:	12600002 	rsbne	r0, r0, #2
    9db8:	16ef4070 	uxtbne	r4, r0
    9dbc:	e28d0004 	add	r0, sp, #4
    9dc0:	eb000be4 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    9dc4:	e1a00004 	mov	r0, r4
    9dc8:	e28dd010 	add	sp, sp, #16
    9dcc:	e8bd8010 	pop	{r4, pc}
    9dd0:	20980440 	.word	0x20980440

00009dd4 <CDWHCIDevice::OvercurrentDetected()>:
    9dd4:	e92d4010 	push	{r4, lr}
    9dd8:	e24dd010 	sub	sp, sp, #16
    9ddc:	e59f1028 	ldr	r1, [pc, #40]	; 9e0c <CDWHCIDevice::OvercurrentDetected()+0x38>
    9de0:	e28d0004 	add	r0, sp, #4
    9de4:	eb000bd3 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9de8:	e28d0004 	add	r0, sp, #4
    9dec:	eb000bda 	bl	cd5c <CDWHCIRegister::Read()>
    9df0:	e1a04000 	mov	r4, r0
    9df4:	e28d0004 	add	r0, sp, #4
    9df8:	eb000bd6 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    9dfc:	e1a00224 	lsr	r0, r4, #4
    9e00:	e2000001 	and	r0, r0, #1
    9e04:	e28dd010 	add	sp, sp, #16
    9e08:	e8bd8010 	pop	{r4, pc}
    9e0c:	20980440 	.word	0x20980440

00009e10 <CDWHCIDevice::DisableRootPort(bool)>:
    9e10:	e3a03000 	mov	r3, #0
    9e14:	e92d4010 	push	{r4, lr}
    9e18:	e1a04001 	mov	r4, r1
    9e1c:	e24dd010 	sub	sp, sp, #16
    9e20:	e5c03080 	strb	r3, [r0, #128]	; 0x80
    9e24:	e59f1048 	ldr	r1, [pc, #72]	; 9e74 <CDWHCIDevice::DisableRootPort(bool)+0x64>
    9e28:	e28d0004 	add	r0, sp, #4
    9e2c:	eb000bc1 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9e30:	e28d0004 	add	r0, sp, #4
    9e34:	eb000bc8 	bl	cd5c <CDWHCIRegister::Read()>
    9e38:	e3e01004 	mvn	r1, #4
    9e3c:	e28d0004 	add	r0, sp, #4
    9e40:	eb000bf9 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    9e44:	e3540000 	cmp	r4, #0
    9e48:	1a000005 	bne	9e64 <CDWHCIDevice::DisableRootPort(bool)+0x54>
    9e4c:	e28d0004 	add	r0, sp, #4
    9e50:	eb000bc8 	bl	cd78 <CDWHCIRegister::Write()>
    9e54:	e28d0004 	add	r0, sp, #4
    9e58:	eb000bbe 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    9e5c:	e28dd010 	add	sp, sp, #16
    9e60:	e8bd8010 	pop	{r4, pc}
    9e64:	e3e01a01 	mvn	r1, #4096	; 0x1000
    9e68:	e28d0004 	add	r0, sp, #4
    9e6c:	eb000bee 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    9e70:	eafffff5 	b	9e4c <CDWHCIDevice::DisableRootPort(bool)+0x3c>
    9e74:	20980440 	.word	0x20980440

00009e78 <CDWHCIDevice::PowerOn()>:
    9e78:	e3a01000 	mov	r1, #0
    9e7c:	e92d4030 	push	{r4, r5, lr}
    9e80:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    9e84:	e28d000c 	add	r0, sp, #12
    9e88:	e1a05001 	mov	r5, r1
    9e8c:	eb006a66 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
    9e90:	e3a03014 	mov	r3, #20
    9e94:	e3a0c003 	mov	ip, #3
    9e98:	e59f1040 	ldr	r1, [pc, #64]	; 9ee0 <CDWHCIDevice::PowerOn()+0x68>
    9e9c:	e28d000c 	add	r0, sp, #12
    9ea0:	e58d5000 	str	r5, [sp]
    9ea4:	e08d2003 	add	r2, sp, r3
    9ea8:	e58dc020 	str	ip, [sp, #32]
    9eac:	e58dc024 	str	ip, [sp, #36]	; 0x24
    9eb0:	eb006a69 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9eb4:	e2504000 	subs	r4, r0, #0
    9eb8:	0a000003 	beq	9ecc <CDWHCIDevice::PowerOn()+0x54>
    9ebc:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
    9ec0:	e3100002 	tst	r0, #2
    9ec4:	11a04005 	movne	r4, r5
    9ec8:	02004001 	andeq	r4, r0, #1
    9ecc:	e28d000c 	add	r0, sp, #12
    9ed0:	eb006a5c 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
    9ed4:	e1a00004 	mov	r0, r4
    9ed8:	e28dd02c 	add	sp, sp, #44	; 0x2c
    9edc:	e8bd8030 	pop	{r4, r5, pc}
    9ee0:	00028001 	.word	0x00028001

00009ee4 <CDWHCIDevice::EnableGlobalInterrupts()>:
    9ee4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9ee8:	e24dd014 	sub	sp, sp, #20
    9eec:	e59f1030 	ldr	r1, [pc, #48]	; 9f24 <CDWHCIDevice::EnableGlobalInterrupts()+0x40>
    9ef0:	e28d0004 	add	r0, sp, #4
    9ef4:	eb000b8f 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9ef8:	e28d0004 	add	r0, sp, #4
    9efc:	eb000b96 	bl	cd5c <CDWHCIRegister::Read()>
    9f00:	e3a01001 	mov	r1, #1
    9f04:	e28d0004 	add	r0, sp, #4
    9f08:	eb000bd5 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    9f0c:	e28d0004 	add	r0, sp, #4
    9f10:	eb000b98 	bl	cd78 <CDWHCIRegister::Write()>
    9f14:	e28d0004 	add	r0, sp, #4
    9f18:	eb000b8e 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    9f1c:	e28dd014 	add	sp, sp, #20
    9f20:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9f24:	20980008 	.word	0x20980008

00009f28 <CDWHCIDevice::EnableCommonInterrupts()>:
    9f28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9f2c:	e24dd014 	sub	sp, sp, #20
    9f30:	e59f1024 	ldr	r1, [pc, #36]	; 9f5c <CDWHCIDevice::EnableCommonInterrupts()+0x34>
    9f34:	e28d0004 	add	r0, sp, #4
    9f38:	eb000b7e 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9f3c:	e28d0004 	add	r0, sp, #4
    9f40:	eb000c06 	bl	cf60 <CDWHCIRegister::SetAll()>
    9f44:	e28d0004 	add	r0, sp, #4
    9f48:	eb000b8a 	bl	cd78 <CDWHCIRegister::Write()>
    9f4c:	e28d0004 	add	r0, sp, #4
    9f50:	eb000b80 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    9f54:	e28dd014 	add	sp, sp, #20
    9f58:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9f5c:	20980014 	.word	0x20980014

00009f60 <CDWHCIDevice::EnableHostInterrupts()>:
    9f60:	e92d4010 	push	{r4, lr}
    9f64:	e1a04000 	mov	r4, r0
    9f68:	e24dd010 	sub	sp, sp, #16
    9f6c:	e3a02000 	mov	r2, #0
    9f70:	e59f1040 	ldr	r1, [pc, #64]	; 9fb8 <CDWHCIDevice::EnableHostInterrupts()+0x58>
    9f74:	e28d0004 	add	r0, sp, #4
    9f78:	eb000b72 	bl	cd48 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9f7c:	e28d0004 	add	r0, sp, #4
    9f80:	eb000b7c 	bl	cd78 <CDWHCIRegister::Write()>
    9f84:	e1a00004 	mov	r0, r4
    9f88:	ebffffe6 	bl	9f28 <CDWHCIDevice::EnableCommonInterrupts()>
    9f8c:	e28d0004 	add	r0, sp, #4
    9f90:	eb000b71 	bl	cd5c <CDWHCIRegister::Read()>
    9f94:	e3a01402 	mov	r1, #33554432	; 0x2000000
    9f98:	e28d0004 	add	r0, sp, #4
    9f9c:	eb000bb0 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    9fa0:	e28d0004 	add	r0, sp, #4
    9fa4:	eb000b73 	bl	cd78 <CDWHCIRegister::Write()>
    9fa8:	e28d0004 	add	r0, sp, #4
    9fac:	eb000b69 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    9fb0:	e28dd010 	add	sp, sp, #16
    9fb4:	e8bd8010 	pop	{r4, pc}
    9fb8:	20980018 	.word	0x20980018

00009fbc <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    9fbc:	e92d4030 	push	{r4, r5, lr}
    9fc0:	e1a04000 	mov	r4, r0
    9fc4:	e24dd014 	sub	sp, sp, #20
    9fc8:	e1a05001 	mov	r5, r1
    9fcc:	e28d0004 	add	r0, sp, #4
    9fd0:	e59f1064 	ldr	r1, [pc, #100]	; a03c <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x80>
    9fd4:	eb000b57 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9fd8:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    9fdc:	e3500000 	cmp	r0, #0
    9fe0:	1a00000e 	bne	a020 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x64>
    9fe4:	e28d0004 	add	r0, sp, #4
    9fe8:	eb000b5b 	bl	cd5c <CDWHCIRegister::Read()>
    9fec:	e3a01001 	mov	r1, #1
    9ff0:	e28d0004 	add	r0, sp, #4
    9ff4:	e1a01511 	lsl	r1, r1, r5
    9ff8:	eb000b99 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    9ffc:	e28d0004 	add	r0, sp, #4
    a000:	eb000b5c 	bl	cd78 <CDWHCIRegister::Write()>
    a004:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a008:	e3530000 	cmp	r3, #0
    a00c:	1a000005 	bne	a028 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x6c>
    a010:	e28d0004 	add	r0, sp, #4
    a014:	eb000b4f 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    a018:	e28dd014 	add	sp, sp, #20
    a01c:	e8bd8030 	pop	{r4, r5, pc}
    a020:	eb008715 	bl	2bc7c <EnterCritical>
    a024:	eaffffee 	b	9fe4 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x28>
    a028:	eb00873d 	bl	2bd24 <LeaveCritical>
    a02c:	e28d0004 	add	r0, sp, #4
    a030:	eb000b48 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    a034:	e28dd014 	add	sp, sp, #20
    a038:	e8bd8030 	pop	{r4, r5, pc}
    a03c:	20980418 	.word	0x20980418

0000a040 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    a040:	e92d4030 	push	{r4, r5, lr}
    a044:	e1a04000 	mov	r4, r0
    a048:	e24dd014 	sub	sp, sp, #20
    a04c:	e1a05001 	mov	r5, r1
    a050:	e28d0004 	add	r0, sp, #4
    a054:	e59f1064 	ldr	r1, [pc, #100]	; a0c0 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x80>
    a058:	eb000b36 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a05c:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    a060:	e3500000 	cmp	r0, #0
    a064:	1a00000e 	bne	a0a4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x64>
    a068:	e28d0004 	add	r0, sp, #4
    a06c:	eb000b3a 	bl	cd5c <CDWHCIRegister::Read()>
    a070:	e3a01001 	mov	r1, #1
    a074:	e28d0004 	add	r0, sp, #4
    a078:	e1e01511 	mvn	r1, r1, lsl r5
    a07c:	eb000b6a 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    a080:	e28d0004 	add	r0, sp, #4
    a084:	eb000b3b 	bl	cd78 <CDWHCIRegister::Write()>
    a088:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a08c:	e3530000 	cmp	r3, #0
    a090:	1a000005 	bne	a0ac <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x6c>
    a094:	e28d0004 	add	r0, sp, #4
    a098:	eb000b2e 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    a09c:	e28dd014 	add	sp, sp, #20
    a0a0:	e8bd8030 	pop	{r4, r5, pc}
    a0a4:	eb0086f4 	bl	2bc7c <EnterCritical>
    a0a8:	eaffffee 	b	a068 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x28>
    a0ac:	eb00871c 	bl	2bd24 <LeaveCritical>
    a0b0:	e28d0004 	add	r0, sp, #4
    a0b4:	eb000b27 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    a0b8:	e28dd014 	add	sp, sp, #20
    a0bc:	e8bd8030 	pop	{r4, r5, pc}
    a0c0:	20980418 	.word	0x20980418

0000a0c4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    a0c4:	e92d4070 	push	{r4, r5, r6, lr}
    a0c8:	e2514000 	subs	r4, r1, #0
    a0cc:	e24dd048 	sub	sp, sp, #72	; 0x48
    a0d0:	0a0000e4 	beq	a468 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3a4>
    a0d4:	e1a06000 	mov	r6, r0
    a0d8:	e1a00004 	mov	r0, r4
    a0dc:	eb000d08 	bl	d504 <CDWHCITransferStageData::GetChannelNumber() const>
    a0e0:	e596300c 	ldr	r3, [r6, #12]
    a0e4:	e1a05000 	mov	r5, r0
    a0e8:	e1530000 	cmp	r3, r0
    a0ec:	9a0000e1 	bls	a478 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b4>
    a0f0:	e3a01001 	mov	r1, #1
    a0f4:	e1a00004 	mov	r0, r4
    a0f8:	eb000cfb 	bl	d4ec <CDWHCITransferStageData::SetSubState(unsigned int)>
    a0fc:	e59f1384 	ldr	r1, [pc, #900]	; a488 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c4>
    a100:	e1a0000d 	mov	r0, sp
    a104:	e0811285 	add	r1, r1, r5, lsl #5
    a108:	eb000b0a 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a10c:	e1a0000d 	mov	r0, sp
    a110:	eb000b92 	bl	cf60 <CDWHCIRegister::SetAll()>
    a114:	e1a0000d 	mov	r0, sp
    a118:	eb000b16 	bl	cd78 <CDWHCIRegister::Write()>
    a11c:	e59f1368 	ldr	r1, [pc, #872]	; a48c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c8>
    a120:	e1a05285 	lsl	r5, r5, #5
    a124:	e3a02000 	mov	r2, #0
    a128:	e0851001 	add	r1, r5, r1
    a12c:	e28d000c 	add	r0, sp, #12
    a130:	eb000b04 	bl	cd48 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a134:	e1a00004 	mov	r0, r4
    a138:	eb000e2a 	bl	d9e8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a13c:	e3c014ff 	bic	r1, r0, #-16777216	; 0xff000000
    a140:	e3c1173e 	bic	r1, r1, #16252928	; 0xf80000
    a144:	e28d000c 	add	r0, sp, #12
    a148:	eb000b45 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a14c:	e1a00004 	mov	r0, r4
    a150:	eb000e26 	bl	d9f0 <CDWHCITransferStageData::GetPacketsToTransfer() const>
    a154:	e1a01000 	mov	r1, r0
    a158:	e59f3330 	ldr	r3, [pc, #816]	; a490 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3cc>
    a15c:	e28d000c 	add	r0, sp, #12
    a160:	e0031981 	and	r1, r3, r1, lsl #19
    a164:	eb000b3e 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a168:	e1a00004 	mov	r0, r4
    a16c:	eb000df3 	bl	d940 <CDWHCITransferStageData::GetPID() const>
    a170:	e1a01000 	mov	r1, r0
    a174:	e28d000c 	add	r0, sp, #12
    a178:	e1a01e81 	lsl	r1, r1, #29
    a17c:	eb000b38 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a180:	e28d000c 	add	r0, sp, #12
    a184:	eb000afb 	bl	cd78 <CDWHCIRegister::Write()>
    a188:	e1a00004 	mov	r0, r4
    a18c:	eb000e0a 	bl	d9bc <CDWHCITransferStageData::GetDMAAddress() const>
    a190:	e59f12fc 	ldr	r1, [pc, #764]	; a494 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d0>
    a194:	e3c00103 	bic	r0, r0, #-1073741824	; 0xc0000000
    a198:	e3802101 	orr	r2, r0, #1073741824	; 0x40000000
    a19c:	e0851001 	add	r1, r5, r1
    a1a0:	e28d0018 	add	r0, sp, #24
    a1a4:	eb000ae7 	bl	cd48 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a1a8:	e28d0018 	add	r0, sp, #24
    a1ac:	eb000af1 	bl	cd78 <CDWHCIRegister::Write()>
    a1b0:	e1a00004 	mov	r0, r4
    a1b4:	eb000e00 	bl	d9bc <CDWHCITransferStageData::GetDMAAddress() const>
    a1b8:	e1a06000 	mov	r6, r0
    a1bc:	e1a00004 	mov	r0, r4
    a1c0:	eb000e08 	bl	d9e8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a1c4:	e1a01000 	mov	r1, r0
    a1c8:	e1a00006 	mov	r0, r6
    a1cc:	eb0086ea 	bl	2bd7c <CleanAndInvalidateDataCacheRange>
    a1d0:	e59f12c0 	ldr	r1, [pc, #704]	; a498 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d4>
    a1d4:	e3a02000 	mov	r2, #0
    a1d8:	e0851001 	add	r1, r5, r1
    a1dc:	e28d0024 	add	r0, sp, #36	; 0x24
    a1e0:	eb000ad8 	bl	cd48 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a1e4:	e1a00004 	mov	r0, r4
    a1e8:	eb000e02 	bl	d9f8 <CDWHCITransferStageData::IsSplit() const>
    a1ec:	e3500000 	cmp	r0, #0
    a1f0:	1a00007f 	bne	a3f4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x330>
    a1f4:	e28d0024 	add	r0, sp, #36	; 0x24
    a1f8:	eb000ade 	bl	cd78 <CDWHCIRegister::Write()>
    a1fc:	e59f1298 	ldr	r1, [pc, #664]	; a49c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d8>
    a200:	e28d0030 	add	r0, sp, #48	; 0x30
    a204:	e0851001 	add	r1, r5, r1
    a208:	eb000aca 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a20c:	e28d0030 	add	r0, sp, #48	; 0x30
    a210:	eb000ad1 	bl	cd5c <CDWHCIRegister::Read()>
    a214:	e59f1284 	ldr	r1, [pc, #644]	; a4a0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3dc>
    a218:	e28d0030 	add	r0, sp, #48	; 0x30
    a21c:	eb000b02 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    a220:	e1a00004 	mov	r0, r4
    a224:	eb000dc1 	bl	d930 <CDWHCITransferStageData::GetMaxPacketSize() const>
    a228:	e1a01a80 	lsl	r1, r0, #21
    a22c:	e1a01aa1 	lsr	r1, r1, #21
    a230:	e28d0030 	add	r0, sp, #48	; 0x30
    a234:	eb000b0a 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a238:	e3e01603 	mvn	r1, #3145728	; 0x300000
    a23c:	e28d0030 	add	r0, sp, #48	; 0x30
    a240:	eb000af9 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    a244:	e3a01601 	mov	r1, #1048576	; 0x100000
    a248:	e28d0030 	add	r0, sp, #48	; 0x30
    a24c:	eb000b04 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a250:	e1a00004 	mov	r0, r4
    a254:	eb000dd4 	bl	d9ac <CDWHCITransferStageData::IsDirectionIn() const>
    a258:	e3500000 	cmp	r0, #0
    a25c:	1a000055 	bne	a3b8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2f4>
    a260:	e3e01902 	mvn	r1, #32768	; 0x8000
    a264:	e28d0030 	add	r0, sp, #48	; 0x30
    a268:	eb000aef 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    a26c:	e1a00004 	mov	r0, r4
    a270:	eb000db0 	bl	d938 <CDWHCITransferStageData::GetSpeed() const>
    a274:	e3500000 	cmp	r0, #0
    a278:	1a000055 	bne	a3d4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x310>
    a27c:	e3a01802 	mov	r1, #131072	; 0x20000
    a280:	e28d0030 	add	r0, sp, #48	; 0x30
    a284:	eb000af6 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a288:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
    a28c:	e28d0030 	add	r0, sp, #48	; 0x30
    a290:	eb000ae5 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    a294:	e1a00004 	mov	r0, r4
    a298:	eb000d74 	bl	d870 <CDWHCITransferStageData::GetDeviceAddress() const>
    a29c:	e1a01000 	mov	r1, r0
    a2a0:	e28d0030 	add	r0, sp, #48	; 0x30
    a2a4:	e1a01b01 	lsl	r1, r1, #22
    a2a8:	eb000aed 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a2ac:	e3e01703 	mvn	r1, #786432	; 0xc0000
    a2b0:	e28d0030 	add	r0, sp, #48	; 0x30
    a2b4:	eb000adc 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    a2b8:	e1a00004 	mov	r0, r4
    a2bc:	eb000d77 	bl	d8a0 <CDWHCITransferStageData::GetEndpointType() const>
    a2c0:	e1a01000 	mov	r1, r0
    a2c4:	e28d0030 	add	r0, sp, #48	; 0x30
    a2c8:	e1a01901 	lsl	r1, r1, #18
    a2cc:	eb000ae4 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a2d0:	e3e01b1e 	mvn	r1, #30720	; 0x7800
    a2d4:	e28d0030 	add	r0, sp, #48	; 0x30
    a2d8:	eb000ad3 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    a2dc:	e1a00004 	mov	r0, r4
    a2e0:	eb000d86 	bl	d900 <CDWHCITransferStageData::GetEndpointNumber() const>
    a2e4:	e1a01000 	mov	r1, r0
    a2e8:	e28d0030 	add	r0, sp, #48	; 0x30
    a2ec:	e1a01581 	lsl	r1, r1, #11
    a2f0:	eb000adb 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a2f4:	e1a00004 	mov	r0, r4
    a2f8:	eb000e34 	bl	dbd0 <CDWHCITransferStageData::GetFrameScheduler() const>
    a2fc:	e2506000 	subs	r6, r0, #0
    a300:	0a00000b 	beq	a334 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x270>
    a304:	e5963000 	ldr	r3, [r6]
    a308:	e5933014 	ldr	r3, [r3, #20]
    a30c:	e12fff33 	blx	r3
    a310:	e5963000 	ldr	r3, [r6]
    a314:	e1a00006 	mov	r0, r6
    a318:	e5933018 	ldr	r3, [r3, #24]
    a31c:	e12fff33 	blx	r3
    a320:	e3500000 	cmp	r0, #0
    a324:	0a00002e 	beq	a3e4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x320>
    a328:	e3a01202 	mov	r1, #536870912	; 0x20000000
    a32c:	e28d0030 	add	r0, sp, #48	; 0x30
    a330:	eb000acb 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a334:	e59f1168 	ldr	r1, [pc, #360]	; a4a4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3e0>
    a338:	e28d003c 	add	r0, sp, #60	; 0x3c
    a33c:	e0851001 	add	r1, r5, r1
    a340:	eb000a7c 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a344:	e1a00004 	mov	r0, r4
    a348:	eb000de5 	bl	dae4 <CDWHCITransferStageData::GetStatusMask() const>
    a34c:	e1a01000 	mov	r1, r0
    a350:	e28d003c 	add	r0, sp, #60	; 0x3c
    a354:	eb000aa1 	bl	cde0 <CDWHCIRegister::Set(unsigned int)>
    a358:	e28d003c 	add	r0, sp, #60	; 0x3c
    a35c:	eb000a85 	bl	cd78 <CDWHCIRegister::Write()>
    a360:	e28d0030 	add	r0, sp, #48	; 0x30
    a364:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a368:	eb000abd 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a36c:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
    a370:	e28d0030 	add	r0, sp, #48	; 0x30
    a374:	eb000aac 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    a378:	e28d0030 	add	r0, sp, #48	; 0x30
    a37c:	eb000a7d 	bl	cd78 <CDWHCIRegister::Write()>
    a380:	e28d003c 	add	r0, sp, #60	; 0x3c
    a384:	eb000a73 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    a388:	e28d0030 	add	r0, sp, #48	; 0x30
    a38c:	eb000a71 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    a390:	e28d0024 	add	r0, sp, #36	; 0x24
    a394:	eb000a6f 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    a398:	e28d0018 	add	r0, sp, #24
    a39c:	eb000a6d 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    a3a0:	e28d000c 	add	r0, sp, #12
    a3a4:	eb000a6b 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    a3a8:	e1a0000d 	mov	r0, sp
    a3ac:	eb000a69 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    a3b0:	e28dd048 	add	sp, sp, #72	; 0x48
    a3b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    a3b8:	e3a01902 	mov	r1, #32768	; 0x8000
    a3bc:	e28d0030 	add	r0, sp, #48	; 0x30
    a3c0:	eb000aa7 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a3c4:	e1a00004 	mov	r0, r4
    a3c8:	eb000d5a 	bl	d938 <CDWHCITransferStageData::GetSpeed() const>
    a3cc:	e3500000 	cmp	r0, #0
    a3d0:	0affffa9 	beq	a27c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1b8>
    a3d4:	e3e01802 	mvn	r1, #131072	; 0x20000
    a3d8:	e28d0030 	add	r0, sp, #48	; 0x30
    a3dc:	eb000a92 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    a3e0:	eaffffa8 	b	a288 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1c4>
    a3e4:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    a3e8:	e28d0030 	add	r0, sp, #48	; 0x30
    a3ec:	eb000a8e 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    a3f0:	eaffffcf 	b	a334 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x270>
    a3f4:	e1a00004 	mov	r0, r4
    a3f8:	eb000da2 	bl	da88 <CDWHCITransferStageData::GetHubPortAddress() const>
    a3fc:	e1a01000 	mov	r1, r0
    a400:	e28d0024 	add	r0, sp, #36	; 0x24
    a404:	eb000a96 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a408:	e1a00004 	mov	r0, r4
    a40c:	eb000d88 	bl	da34 <CDWHCITransferStageData::GetHubAddress() const>
    a410:	e1a01000 	mov	r1, r0
    a414:	e28d0024 	add	r0, sp, #36	; 0x24
    a418:	e1a01381 	lsl	r1, r1, #7
    a41c:	eb000a90 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a420:	e1a00004 	mov	r0, r4
    a424:	eb000dac 	bl	dadc <CDWHCITransferStageData::GetSplitPosition() const>
    a428:	e1a01000 	mov	r1, r0
    a42c:	e28d0024 	add	r0, sp, #36	; 0x24
    a430:	e1a01701 	lsl	r1, r1, #14
    a434:	eb000a8a 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a438:	e1a00004 	mov	r0, r4
    a43c:	eb000d6f 	bl	da00 <CDWHCITransferStageData::IsSplitComplete() const>
    a440:	e3500000 	cmp	r0, #0
    a444:	1a000003 	bne	a458 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x394>
    a448:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a44c:	e28d0024 	add	r0, sp, #36	; 0x24
    a450:	eb000a83 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a454:	eaffff66 	b	a1f4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x130>
    a458:	e3a01801 	mov	r1, #65536	; 0x10000
    a45c:	e28d0024 	add	r0, sp, #36	; 0x24
    a460:	eb000a7f 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a464:	eafffff7 	b	a448 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x384>
    a468:	e59f2038 	ldr	r2, [pc, #56]	; a4a8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3e4>
    a46c:	e59f1038 	ldr	r1, [pc, #56]	; a4ac <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3e8>
    a470:	e59f0038 	ldr	r0, [pc, #56]	; a4b0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3ec>
    a474:	eb0068cb 	bl	247a8 <assertion_failed>
    a478:	e3a02e35 	mov	r2, #848	; 0x350
    a47c:	e59f1028 	ldr	r1, [pc, #40]	; a4ac <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3e8>
    a480:	e59f002c 	ldr	r0, [pc, #44]	; a4b4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3f0>
    a484:	eb0068c7 	bl	247a8 <assertion_failed>
    a488:	20980508 	.word	0x20980508
    a48c:	20980510 	.word	0x20980510
    a490:	1ff80000 	.word	0x1ff80000
    a494:	20980514 	.word	0x20980514
    a498:	20980504 	.word	0x20980504
    a49c:	20980500 	.word	0x20980500
    a4a0:	fffff800 	.word	0xfffff800
    a4a4:	2098050c 	.word	0x2098050c
    a4a8:	0000034e 	.word	0x0000034e
    a4ac:	00040b34 	.word	0x00040b34
    a4b0:	00040ba4 	.word	0x00040ba4
    a4b4:	00040bb4 	.word	0x00040bb4

0000a4b8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    a4b8:	e92d4070 	push	{r4, r5, r6, lr}
    a4bc:	e2514000 	subs	r4, r1, #0
    a4c0:	e24dd018 	sub	sp, sp, #24
    a4c4:	0a000032 	beq	a594 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xdc>
    a4c8:	e1a06000 	mov	r6, r0
    a4cc:	e1a00004 	mov	r0, r4
    a4d0:	eb000c0b 	bl	d504 <CDWHCITransferStageData::GetChannelNumber() const>
    a4d4:	e596300c 	ldr	r3, [r6, #12]
    a4d8:	e1530000 	cmp	r3, r0
    a4dc:	9a000030 	bls	a5a4 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xec>
    a4e0:	e59f10cc 	ldr	r1, [pc, #204]	; a5b4 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xfc>
    a4e4:	e0801001 	add	r1, r0, r1
    a4e8:	e1a05281 	lsl	r5, r1, #5
    a4ec:	e1a01005 	mov	r1, r5
    a4f0:	e1a0000d 	mov	r0, sp
    a4f4:	eb000a0f 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a4f8:	e1a0000d 	mov	r0, sp
    a4fc:	eb000a16 	bl	cd5c <CDWHCIRegister::Read()>
    a500:	e1a0000d 	mov	r0, sp
    a504:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a508:	eb000a38 	bl	cdf0 <CDWHCIRegister::IsSet(unsigned int) const>
    a50c:	e3500000 	cmp	r0, #0
    a510:	1a000006 	bne	a530 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x78>
    a514:	e1a01004 	mov	r1, r4
    a518:	e1a00006 	mov	r0, r6
    a51c:	ebfffee8 	bl	a0c4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    a520:	e1a0000d 	mov	r0, sp
    a524:	eb000a0b 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    a528:	e28dd018 	add	sp, sp, #24
    a52c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a530:	e1a00004 	mov	r0, r4
    a534:	e3a01000 	mov	r1, #0
    a538:	eb000beb 	bl	d4ec <CDWHCITransferStageData::SetSubState(unsigned int)>
    a53c:	e1a0000d 	mov	r0, sp
    a540:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
    a544:	eb000a38 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    a548:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    a54c:	e1a0000d 	mov	r0, sp
    a550:	eb000a43 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    a554:	e1a0000d 	mov	r0, sp
    a558:	eb000a06 	bl	cd78 <CDWHCIRegister::Write()>
    a55c:	e285100c 	add	r1, r5, #12
    a560:	e28d000c 	add	r0, sp, #12
    a564:	eb0009f3 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a568:	e3a01002 	mov	r1, #2
    a56c:	e28d000c 	add	r0, sp, #12
    a570:	eb000a1a 	bl	cde0 <CDWHCIRegister::Set(unsigned int)>
    a574:	e28d000c 	add	r0, sp, #12
    a578:	eb0009fe 	bl	cd78 <CDWHCIRegister::Write()>
    a57c:	e28d000c 	add	r0, sp, #12
    a580:	eb0009f4 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    a584:	e1a0000d 	mov	r0, sp
    a588:	eb0009f2 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    a58c:	e28dd018 	add	sp, sp, #24
    a590:	e8bd8070 	pop	{r4, r5, r6, pc}
    a594:	e59f201c 	ldr	r2, [pc, #28]	; a5b8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x100>
    a598:	e59f101c 	ldr	r1, [pc, #28]	; a5bc <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x104>
    a59c:	e59f001c 	ldr	r0, [pc, #28]	; a5c0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x108>
    a5a0:	eb006880 	bl	247a8 <assertion_failed>
    a5a4:	e59f2018 	ldr	r2, [pc, #24]	; a5c4 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x10c>
    a5a8:	e59f100c 	ldr	r1, [pc, #12]	; a5bc <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x104>
    a5ac:	e59f0014 	ldr	r0, [pc, #20]	; a5c8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x110>
    a5b0:	eb00687c 	bl	247a8 <assertion_failed>
    a5b4:	0104c028 	.word	0x0104c028
    a5b8:	00000333 	.word	0x00000333
    a5bc:	00040b34 	.word	0x00040b34
    a5c0:	00040ba4 	.word	0x00040ba4
    a5c4:	00000335 	.word	0x00000335
    a5c8:	00040bb4 	.word	0x00040bb4

0000a5cc <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>:
    a5cc:	e92d4070 	push	{r4, r5, r6, lr}
    a5d0:	e3a05000 	mov	r5, #0
    a5d4:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    a5d8:	e1510005 	cmp	r1, r5
    a5dc:	0a00001d 	beq	a658 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x8c>
    a5e0:	e1a06000 	mov	r6, r0
    a5e4:	e1a00001 	mov	r0, r1
    a5e8:	e1a04001 	mov	r4, r1
    a5ec:	eb000bbc 	bl	d4e4 <CDWHCITransferStageData::GetState() const>
    a5f0:	e3500003 	cmp	r0, #3
    a5f4:	1a00001b 	bne	a668 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x9c>
    a5f8:	e1a00004 	mov	r0, r4
    a5fc:	eb000cfd 	bl	d9f8 <CDWHCITransferStageData::IsSplit() const>
    a600:	e2501000 	subs	r1, r0, #0
    a604:	1a000007 	bne	a628 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x5c>
    a608:	e1a00004 	mov	r0, r4
    a60c:	eb000bb2 	bl	d4dc <CDWHCITransferStageData::SetState(unsigned int)>
    a610:	e1a01004 	mov	r1, r4
    a614:	e1a00006 	mov	r0, r6
    a618:	ebffffa6 	bl	a4b8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a61c:	e3a03000 	mov	r3, #0
    a620:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a624:	e8bd8070 	pop	{r4, r5, r6, pc}
    a628:	e1a00004 	mov	r0, r4
    a62c:	e3a01001 	mov	r1, #1
    a630:	eb000ba9 	bl	d4dc <CDWHCITransferStageData::SetState(unsigned int)>
    a634:	e1a01005 	mov	r1, r5
    a638:	e1a00004 	mov	r0, r4
    a63c:	eb000b9a 	bl	d4ac <CDWHCITransferStageData::SetSplitComplete(bool)>
    a640:	e1a00004 	mov	r0, r4
    a644:	eb000d61 	bl	dbd0 <CDWHCITransferStageData::GetFrameScheduler() const>
    a648:	e5903000 	ldr	r3, [r0]
    a64c:	e5933008 	ldr	r3, [r3, #8]
    a650:	e12fff33 	blx	r3
    a654:	eaffffed 	b	a610 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x44>
    a658:	e59f2018 	ldr	r2, [pc, #24]	; a678 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xac>
    a65c:	e59f1018 	ldr	r1, [pc, #24]	; a67c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    a660:	e59f0018 	ldr	r0, [pc, #24]	; a680 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb4>
    a664:	eb00684f 	bl	247a8 <assertion_failed>
    a668:	e59f2014 	ldr	r2, [pc, #20]	; a684 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb8>
    a66c:	e59f1008 	ldr	r1, [pc, #8]	; a67c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    a670:	e59f0010 	ldr	r0, [pc, #16]	; a688 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xbc>
    a674:	eb00684b 	bl	247a8 <assertion_failed>
    a678:	0000053d 	.word	0x0000053d
    a67c:	00040b34 	.word	0x00040b34
    a680:	00040ba4 	.word	0x00040ba4
    a684:	0000053e 	.word	0x0000053e
    a688:	00040bcc 	.word	0x00040bcc

0000a68c <CDWHCIDevice::TimerStub(unsigned int, void*, void*)>:
    a68c:	e2520000 	subs	r0, r2, #0
    a690:	e92d4010 	push	{r4, lr}
    a694:	0a000003 	beq	a6a8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x1c>
    a698:	e3510000 	cmp	r1, #0
    a69c:	0a000005 	beq	a6b8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x2c>
    a6a0:	e8bd4010 	pop	{r4, lr}
    a6a4:	eaffffc8 	b	a5cc <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    a6a8:	e59f2018 	ldr	r2, [pc, #24]	; a6c8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x3c>
    a6ac:	e59f1018 	ldr	r1, [pc, #24]	; a6cc <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x40>
    a6b0:	e59f0018 	ldr	r0, [pc, #24]	; a6d0 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x44>
    a6b4:	eb00683b 	bl	247a8 <assertion_failed>
    a6b8:	e59f2014 	ldr	r2, [pc, #20]	; a6d4 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x48>
    a6bc:	e59f1008 	ldr	r1, [pc, #8]	; a6cc <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x40>
    a6c0:	e59f0010 	ldr	r0, [pc, #16]	; a6d8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
    a6c4:	eb006837 	bl	247a8 <assertion_failed>
    a6c8:	00000554 	.word	0x00000554
    a6cc:	00040b34 	.word	0x00040b34
    a6d0:	00040b44 	.word	0x00040b44
    a6d4:	00000557 	.word	0x00000557
    a6d8:	00040c00 	.word	0x00040c00

0000a6dc <CDWHCIDevice::AllocateChannel()>:
    a6dc:	e92d4070 	push	{r4, r5, r6, lr}
    a6e0:	e1a05000 	mov	r5, r0
    a6e4:	e5900014 	ldr	r0, [r0, #20]
    a6e8:	e3500000 	cmp	r0, #0
    a6ec:	1a000014 	bne	a744 <CDWHCIDevice::AllocateChannel()+0x68>
    a6f0:	e595100c 	ldr	r1, [r5, #12]
    a6f4:	e3510000 	cmp	r1, #0
    a6f8:	0a00000e 	beq	a738 <CDWHCIDevice::AllocateChannel()+0x5c>
    a6fc:	e5954010 	ldr	r4, [r5, #16]
    a700:	e2144001 	ands	r4, r4, #1
    a704:	0a000022 	beq	a794 <CDWHCIDevice::AllocateChannel()+0xb8>
    a708:	e3a04000 	mov	r4, #0
    a70c:	e3a03001 	mov	r3, #1
    a710:	ea000002 	b	a720 <CDWHCIDevice::AllocateChannel()+0x44>
    a714:	e5952010 	ldr	r2, [r5, #16]
    a718:	e1120003 	tst	r2, r3
    a71c:	0a000012 	beq	a76c <CDWHCIDevice::AllocateChannel()+0x90>
    a720:	e2844001 	add	r4, r4, #1
    a724:	e1540001 	cmp	r4, r1
    a728:	e1a03083 	lsl	r3, r3, #1
    a72c:	3afffff8 	bcc	a714 <CDWHCIDevice::AllocateChannel()+0x38>
    a730:	e3500000 	cmp	r0, #0
    a734:	1a000014 	bne	a78c <CDWHCIDevice::AllocateChannel()+0xb0>
    a738:	e3a04010 	mov	r4, #16
    a73c:	e1a00004 	mov	r0, r4
    a740:	e8bd8070 	pop	{r4, r5, r6, pc}
    a744:	eb00854c 	bl	2bc7c <EnterCritical>
    a748:	e595100c 	ldr	r1, [r5, #12]
    a74c:	e3510000 	cmp	r1, #0
    a750:	05950014 	ldreq	r0, [r5, #20]
    a754:	0afffff5 	beq	a730 <CDWHCIDevice::AllocateChannel()+0x54>
    a758:	e5954010 	ldr	r4, [r5, #16]
    a75c:	e5950014 	ldr	r0, [r5, #20]
    a760:	e2144001 	ands	r4, r4, #1
    a764:	1affffe7 	bne	a708 <CDWHCIDevice::AllocateChannel()+0x2c>
    a768:	e3a03001 	mov	r3, #1
    a76c:	e5952010 	ldr	r2, [r5, #16]
    a770:	e3500000 	cmp	r0, #0
    a774:	e1823003 	orr	r3, r2, r3
    a778:	e5853010 	str	r3, [r5, #16]
    a77c:	0affffee 	beq	a73c <CDWHCIDevice::AllocateChannel()+0x60>
    a780:	eb008567 	bl	2bd24 <LeaveCritical>
    a784:	e1a00004 	mov	r0, r4
    a788:	e8bd8070 	pop	{r4, r5, r6, pc}
    a78c:	eb008564 	bl	2bd24 <LeaveCritical>
    a790:	eaffffe8 	b	a738 <CDWHCIDevice::AllocateChannel()+0x5c>
    a794:	e5953010 	ldr	r3, [r5, #16]
    a798:	e3833001 	orr	r3, r3, #1
    a79c:	e5853010 	str	r3, [r5, #16]
    a7a0:	eaffffe5 	b	a73c <CDWHCIDevice::AllocateChannel()+0x60>

0000a7a4 <CDWHCIDevice::FreeChannel(unsigned int)>:
    a7a4:	e590300c 	ldr	r3, [r0, #12]
    a7a8:	e92d4070 	push	{r4, r5, r6, lr}
    a7ac:	e1530001 	cmp	r3, r1
    a7b0:	9a000012 	bls	a800 <CDWHCIDevice::FreeChannel(unsigned int)+0x5c>
    a7b4:	e3a05001 	mov	r5, #1
    a7b8:	e1a04000 	mov	r4, r0
    a7bc:	e5900014 	ldr	r0, [r0, #20]
    a7c0:	e1a05115 	lsl	r5, r5, r1
    a7c4:	e3500000 	cmp	r0, #0
    a7c8:	1a00000a 	bne	a7f8 <CDWHCIDevice::FreeChannel(unsigned int)+0x54>
    a7cc:	e5943010 	ldr	r3, [r4, #16]
    a7d0:	e1130005 	tst	r3, r5
    a7d4:	0a00000d 	beq	a810 <CDWHCIDevice::FreeChannel(unsigned int)+0x6c>
    a7d8:	e5941010 	ldr	r1, [r4, #16]
    a7dc:	e5943014 	ldr	r3, [r4, #20]
    a7e0:	e1c11005 	bic	r1, r1, r5
    a7e4:	e3530000 	cmp	r3, #0
    a7e8:	e5841010 	str	r1, [r4, #16]
    a7ec:	08bd8070 	popeq	{r4, r5, r6, pc}
    a7f0:	e8bd4070 	pop	{r4, r5, r6, lr}
    a7f4:	ea00854a 	b	2bd24 <LeaveCritical>
    a7f8:	eb00851f 	bl	2bc7c <EnterCritical>
    a7fc:	eafffff2 	b	a7cc <CDWHCIDevice::FreeChannel(unsigned int)+0x28>
    a800:	e59f2018 	ldr	r2, [pc, #24]	; a820 <CDWHCIDevice::FreeChannel(unsigned int)+0x7c>
    a804:	e59f1018 	ldr	r1, [pc, #24]	; a824 <CDWHCIDevice::FreeChannel(unsigned int)+0x80>
    a808:	e59f0018 	ldr	r0, [pc, #24]	; a828 <CDWHCIDevice::FreeChannel(unsigned int)+0x84>
    a80c:	eb0067e5 	bl	247a8 <assertion_failed>
    a810:	e59f2014 	ldr	r2, [pc, #20]	; a82c <CDWHCIDevice::FreeChannel(unsigned int)+0x88>
    a814:	e59f1008 	ldr	r1, [pc, #8]	; a824 <CDWHCIDevice::FreeChannel(unsigned int)+0x80>
    a818:	e59f0010 	ldr	r0, [pc, #16]	; a830 <CDWHCIDevice::FreeChannel(unsigned int)+0x8c>
    a81c:	eb0067e1 	bl	247a8 <assertion_failed>
    a820:	00000578 	.word	0x00000578
    a824:	00040b34 	.word	0x00040b34
    a828:	00040bb4 	.word	0x00040bb4
    a82c:	0000057d 	.word	0x0000057d
    a830:	00040c0c 	.word	0x00040c0c

0000a834 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>:
    a834:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a838:	e2515000 	subs	r5, r1, #0
    a83c:	e24dd00c 	sub	sp, sp, #12
    a840:	0a000039 	beq	a92c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xf8>
    a844:	e1a04000 	mov	r4, r0
    a848:	e1a07003 	mov	r7, r3
    a84c:	e1a08002 	mov	r8, r2
    a850:	ebffffa1 	bl	a6dc <CDWHCIDevice::AllocateChannel()>
    a854:	e594300c 	ldr	r3, [r4, #12]
    a858:	e1a06000 	mov	r6, r0
    a85c:	e1530000 	cmp	r3, r0
    a860:	93a05000 	movls	r5, #0
    a864:	8a000002 	bhi	a874 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x40>
    a868:	e1a00005 	mov	r0, r5
    a86c:	e28dd00c 	add	sp, sp, #12
    a870:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a874:	e3a00054 	mov	r0, #84	; 0x54
    a878:	eb000cd6 	bl	dbd8 <CDWHCITransferStageData::operator new(unsigned int)>
    a87c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    a880:	e58d7000 	str	r7, [sp]
    a884:	e58d3004 	str	r3, [sp, #4]
    a888:	e1a02005 	mov	r2, r5
    a88c:	e1a03008 	mov	r3, r8
    a890:	e1a01006 	mov	r1, r6
    a894:	e0848106 	add	r8, r4, r6, lsl #2
    a898:	e1a07000 	mov	r7, r0
    a89c:	eb000b2b 	bl	d550 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>
    a8a0:	e5989018 	ldr	r9, [r8, #24]
    a8a4:	e3590000 	cmp	r9, #0
    a8a8:	1a000030 	bne	a970 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x13c>
    a8ac:	e1a01006 	mov	r1, r6
    a8b0:	e1a00004 	mov	r0, r4
    a8b4:	e5887018 	str	r7, [r8, #24]
    a8b8:	ebfffdbf 	bl	9fbc <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    a8bc:	e1a00007 	mov	r0, r7
    a8c0:	eb000c4c 	bl	d9f8 <CDWHCITransferStageData::IsSplit() const>
    a8c4:	e2501000 	subs	r1, r0, #0
    a8c8:	e1a00007 	mov	r0, r7
    a8cc:	0a000014 	beq	a924 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xf0>
    a8d0:	eb000b09 	bl	d4fc <CDWHCITransferStageData::BeginSplitCycle()>
    a8d4:	e2505000 	subs	r5, r0, #0
    a8d8:	0a000017 	beq	a93c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x108>
    a8dc:	e3a01001 	mov	r1, #1
    a8e0:	e1a00007 	mov	r0, r7
    a8e4:	eb000afc 	bl	d4dc <CDWHCITransferStageData::SetState(unsigned int)>
    a8e8:	e1a01009 	mov	r1, r9
    a8ec:	e1a00007 	mov	r0, r7
    a8f0:	eb000aed 	bl	d4ac <CDWHCITransferStageData::SetSplitComplete(bool)>
    a8f4:	e1a00007 	mov	r0, r7
    a8f8:	eb000cb4 	bl	dbd0 <CDWHCITransferStageData::GetFrameScheduler() const>
    a8fc:	e5903000 	ldr	r3, [r0]
    a900:	e5933008 	ldr	r3, [r3, #8]
    a904:	e12fff33 	blx	r3
    a908:	e3a05001 	mov	r5, #1
    a90c:	e1a00004 	mov	r0, r4
    a910:	e1a01007 	mov	r1, r7
    a914:	ebfffee7 	bl	a4b8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a918:	e1a00005 	mov	r0, r5
    a91c:	e28dd00c 	add	sp, sp, #12
    a920:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a924:	eb000aec 	bl	d4dc <CDWHCITransferStageData::SetState(unsigned int)>
    a928:	eafffff6 	b	a908 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xd4>
    a92c:	e59f204c 	ldr	r2, [pc, #76]	; a980 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x14c>
    a930:	e59f104c 	ldr	r1, [pc, #76]	; a984 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x150>
    a934:	e59f004c 	ldr	r0, [pc, #76]	; a988 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x154>
    a938:	eb00679a 	bl	247a8 <assertion_failed>
    a93c:	e1a01006 	mov	r1, r6
    a940:	e1a00004 	mov	r0, r4
    a944:	ebfffdbd 	bl	a040 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a948:	e1a00007 	mov	r0, r7
    a94c:	eb000a5b 	bl	d2c0 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    a950:	e1a00007 	mov	r0, r7
    a954:	e3a01054 	mov	r1, #84	; 0x54
    a958:	eb000cb4 	bl	dc30 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    a95c:	e1a01006 	mov	r1, r6
    a960:	e1a00004 	mov	r0, r4
    a964:	e5885018 	str	r5, [r8, #24]
    a968:	ebffff8d 	bl	a7a4 <CDWHCIDevice::FreeChannel(unsigned int)>
    a96c:	eaffffbd 	b	a868 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x34>
    a970:	e59f2014 	ldr	r2, [pc, #20]	; a98c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x158>
    a974:	e59f1008 	ldr	r1, [pc, #8]	; a984 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x150>
    a978:	e59f0010 	ldr	r0, [pc, #16]	; a990 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x15c>
    a97c:	eb006789 	bl	247a8 <assertion_failed>
    a980:	000002b6 	.word	0x000002b6
    a984:	00040b34 	.word	0x00040b34
    a988:	00040c30 	.word	0x00040c30
    a98c:	000002c7 	.word	0x000002c7
    a990:	00040c3c 	.word	0x00040c3c

0000a994 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
    a994:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    a998:	e21330ff 	ands	r3, r3, #255	; 0xff
    a99c:	1a000020 	bne	aa24 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x90>
    a9a0:	e92d4070 	push	{r4, r5, r6, lr}
    a9a4:	e1a04001 	mov	r4, r1
    a9a8:	e24dd008 	sub	sp, sp, #8
    a9ac:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a9b0:	e3510000 	cmp	r1, #0
    a9b4:	0a00001c 	beq	aa2c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x98>
    a9b8:	e1a06000 	mov	r6, r0
    a9bc:	e1a00001 	mov	r0, r1
    a9c0:	e1a05002 	mov	r5, r2
    a9c4:	eb0026b2 	bl	14494 <CUSBRequest::GetEndpoint() const>
    a9c8:	eb001294 	bl	f420 <CUSBEndpoint::GetType() const>
    a9cc:	e3500001 	cmp	r0, #1
    a9d0:	1a000019 	bne	aa3c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xa8>
    a9d4:	e1a00004 	mov	r0, r4
    a9d8:	eb0026ec 	bl	14590 <CUSBRequest::GetBufLen() const>
    a9dc:	e3500000 	cmp	r0, #0
    a9e0:	0a00001e 	beq	aa60 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xcc>
    a9e4:	e3a01000 	mov	r1, #0
    a9e8:	e1a00004 	mov	r0, r4
    a9ec:	eb0026b2 	bl	144bc <CUSBRequest::SetStatus(int)>
    a9f0:	e1a00004 	mov	r0, r4
    a9f4:	eb0026a6 	bl	14494 <CUSBRequest::GetEndpoint() const>
    a9f8:	eb00128a 	bl	f428 <CUSBEndpoint::IsDirectionIn() const>
    a9fc:	e1a01004 	mov	r1, r4
    aa00:	e1a02000 	mov	r2, r0
    aa04:	e3a03000 	mov	r3, #0
    aa08:	e1a00006 	mov	r0, r6
    aa0c:	e58d5000 	str	r5, [sp]
    aa10:	ebffff87 	bl	a834 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    aa14:	e3a03000 	mov	r3, #0
    aa18:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    aa1c:	e28dd008 	add	sp, sp, #8
    aa20:	e8bd8070 	pop	{r4, r5, r6, pc}
    aa24:	e3a00000 	mov	r0, #0
    aa28:	e12fff1e 	bx	lr
    aa2c:	e3a02f45 	mov	r2, #276	; 0x114
    aa30:	e59f1038 	ldr	r1, [pc, #56]	; aa70 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    aa34:	e59f0038 	ldr	r0, [pc, #56]	; aa74 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    aa38:	eb00675a 	bl	247a8 <assertion_failed>
    aa3c:	e1a00004 	mov	r0, r4
    aa40:	eb002693 	bl	14494 <CUSBRequest::GetEndpoint() const>
    aa44:	eb001275 	bl	f420 <CUSBEndpoint::GetType() const>
    aa48:	e3500002 	cmp	r0, #2
    aa4c:	0affffe0 	beq	a9d4 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x40>
    aa50:	e59f2020 	ldr	r2, [pc, #32]	; aa78 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe4>
    aa54:	e59f1014 	ldr	r1, [pc, #20]	; aa70 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    aa58:	e59f001c 	ldr	r0, [pc, #28]	; aa7c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe8>
    aa5c:	eb006751 	bl	247a8 <assertion_failed>
    aa60:	e59f2018 	ldr	r2, [pc, #24]	; aa80 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xec>
    aa64:	e59f1004 	ldr	r1, [pc, #4]	; aa70 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    aa68:	e59f0014 	ldr	r0, [pc, #20]	; aa84 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xf0>
    aa6c:	eb00674d 	bl	247a8 <assertion_failed>
    aa70:	00040b34 	.word	0x00040b34
    aa74:	00040c30 	.word	0x00040c30
    aa78:	00000115 	.word	0x00000115
    aa7c:	00040c70 	.word	0x00040c70
    aa80:	00000117 	.word	0x00000117
    aa84:	00040c58 	.word	0x00040c58

0000aa88 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>:
    aa88:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa8c:	e0808101 	add	r8, r0, r1, lsl #2
    aa90:	e5984018 	ldr	r4, [r8, #24]
    aa94:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    aa98:	e3540000 	cmp	r4, #0
    aa9c:	0a0000ac 	beq	ad54 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2cc>
    aaa0:	e1a06000 	mov	r6, r0
    aaa4:	e1a00004 	mov	r0, r4
    aaa8:	e1a05001 	mov	r5, r1
    aaac:	eb000c3d 	bl	dba8 <CDWHCITransferStageData::GetURB() const>
    aab0:	e2507000 	subs	r7, r0, #0
    aab4:	0a0000aa 	beq	ad64 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2dc>
    aab8:	e1a00004 	mov	r0, r4
    aabc:	eb000a8c 	bl	d4f4 <CDWHCITransferStageData::GetSubState() const>
    aac0:	e2503000 	subs	r3, r0, #0
    aac4:	0a00003d 	beq	abc0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x138>
    aac8:	e3530001 	cmp	r3, #1
    aacc:	1a000123 	bne	af60 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4d8>
    aad0:	e1a00004 	mov	r0, r4
    aad4:	eb000bb8 	bl	d9bc <CDWHCITransferStageData::GetDMAAddress() const>
    aad8:	e1a09000 	mov	r9, r0
    aadc:	e1a00004 	mov	r0, r4
    aae0:	eb000bc0 	bl	d9e8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    aae4:	e1a01000 	mov	r1, r0
    aae8:	e1a00009 	mov	r0, r9
    aaec:	eb0084a2 	bl	2bd7c <CleanAndInvalidateDataCacheRange>
    aaf0:	e59f1478 	ldr	r1, [pc, #1144]	; af70 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4e8>
    aaf4:	e28d0010 	add	r0, sp, #16
    aaf8:	e0811285 	add	r1, r1, r5, lsl #5
    aafc:	eb00088d 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ab00:	e28d0010 	add	r0, sp, #16
    ab04:	eb000894 	bl	cd5c <CDWHCIRegister::Read()>
    ab08:	e59f1464 	ldr	r1, [pc, #1124]	; af74 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4ec>
    ab0c:	e1a03285 	lsl	r3, r5, #5
    ab10:	e0831001 	add	r1, r3, r1
    ab14:	e28d001c 	add	r0, sp, #28
    ab18:	eb000886 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ab1c:	e28d001c 	add	r0, sp, #28
    ab20:	eb00088d 	bl	cd5c <CDWHCIRegister::Read()>
    ab24:	e3500002 	cmp	r0, #2
    ab28:	0a00006d 	beq	ace4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x25c>
    ab2c:	e1a00004 	mov	r0, r4
    ab30:	eb000a75 	bl	d50c <CDWHCITransferStageData::IsPeriodic() const>
    ab34:	e3500000 	cmp	r0, #0
    ab38:	1a0000e8 	bne	aee0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x458>
    ab3c:	e28d001c 	add	r0, sp, #28
    ab40:	eb000885 	bl	cd5c <CDWHCIRegister::Read()>
    ab44:	e1a01000 	mov	r1, r0
    ab48:	e28d0010 	add	r0, sp, #16
    ab4c:	e58d100c 	str	r1, [sp, #12]
    ab50:	eb000896 	bl	cdb0 <CDWHCIRegister::Get() const>
    ab54:	e1a09000 	mov	r9, r0
    ab58:	e28d0010 	add	r0, sp, #16
    ab5c:	eb000893 	bl	cdb0 <CDWHCIRegister::Get() const>
    ab60:	e59f2410 	ldr	r2, [pc, #1040]	; af78 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f0>
    ab64:	e3c034ff 	bic	r3, r0, #-16777216	; 0xff000000
    ab68:	e00229a9 	and	r2, r2, r9, lsr #19
    ab6c:	e59d100c 	ldr	r1, [sp, #12]
    ab70:	e3c3373e 	bic	r3, r3, #16252928	; 0xf80000
    ab74:	e1a00004 	mov	r0, r4
    ab78:	eb0009e3 	bl	d30c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    ab7c:	e28d001c 	add	r0, sp, #28
    ab80:	eb000874 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    ab84:	e28d0010 	add	r0, sp, #16
    ab88:	eb000872 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    ab8c:	e1a00004 	mov	r0, r4
    ab90:	eb000a53 	bl	d4e4 <CDWHCITransferStageData::GetState() const>
    ab94:	e3500001 	cmp	r0, #1
    ab98:	e1a09000 	mov	r9, r0
    ab9c:	0a000060 	beq	ad24 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x29c>
    aba0:	e3500002 	cmp	r0, #2
    aba4:	0a00002d 	beq	ac60 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1d8>
    aba8:	e3500000 	cmp	r0, #0
    abac:	0a000008 	beq	abd4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x14c>
    abb0:	e59f23c4 	ldr	r2, [pc, #964]	; af7c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f4>
    abb4:	e59f13c4 	ldr	r1, [pc, #964]	; af80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f8>
    abb8:	e59f03c4 	ldr	r0, [pc, #964]	; af84 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4fc>
    abbc:	eb0066f9 	bl	247a8 <assertion_failed>
    abc0:	e1a01004 	mov	r1, r4
    abc4:	e1a00006 	mov	r0, r6
    abc8:	ebfffd3d 	bl	a0c4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    abcc:	e28dd02c 	add	sp, sp, #44	; 0x2c
    abd0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abd4:	e1a00004 	mov	r0, r4
    abd8:	eb000bce 	bl	db18 <CDWHCITransferStageData::GetTransactionStatus() const>
    abdc:	e59fb3a4 	ldr	fp, [pc, #932]	; af88 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x500>
    abe0:	e1a0a000 	mov	sl, r0
    abe4:	e00bb000 	and	fp, fp, r0
    abe8:	e35b0000 	cmp	fp, #0
    abec:	1a0000b8 	bne	aed4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x44c>
    abf0:	e3100050 	tst	r0, #80	; 0x50
    abf4:	0a000042 	beq	ad04 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x27c>
    abf8:	e1a00004 	mov	r0, r4
    abfc:	eb000a42 	bl	d50c <CDWHCITransferStageData::IsPeriodic() const>
    ac00:	e3500000 	cmp	r0, #0
    ac04:	0a00003e 	beq	ad04 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x27c>
    ac08:	e1a00004 	mov	r0, r4
    ac0c:	eb000bd5 	bl	db68 <CDWHCITransferStageData::IsTimeout() const>
    ac10:	e3500000 	cmp	r0, #0
    ac14:	1a00001e 	bne	ac94 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x20c>
    ac18:	e3a01003 	mov	r1, #3
    ac1c:	e1a00004 	mov	r0, r4
    ac20:	eb000a2d 	bl	d4dc <CDWHCITransferStageData::SetState(unsigned int)>
    ac24:	e1a00007 	mov	r0, r7
    ac28:	eb002619 	bl	14494 <CUSBRequest::GetEndpoint() const>
    ac2c:	eb001205 	bl	f448 <CUSBEndpoint::GetInterval() const>
    ac30:	e0800100 	add	r0, r0, r0, lsl #2
    ac34:	e59f3350 	ldr	r3, [pc, #848]	; af8c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x504>
    ac38:	e0800100 	add	r0, r0, r0, lsl #2
    ac3c:	e1a01100 	lsl	r1, r0, #2
    ac40:	e0813193 	umull	r3, r1, r3, r1
    ac44:	e58d6000 	str	r6, [sp]
    ac48:	e1a03004 	mov	r3, r4
    ac4c:	e5960008 	ldr	r0, [r6, #8]
    ac50:	e59f2338 	ldr	r2, [pc, #824]	; af90 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x508>
    ac54:	e1a01321 	lsr	r1, r1, #6
    ac58:	eb007add 	bl	297d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    ac5c:	eaffffda 	b	abcc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>
    ac60:	e1a00004 	mov	r0, r4
    ac64:	eb000bab 	bl	db18 <CDWHCITransferStageData::GetTransactionStatus() const>
    ac68:	e59f3318 	ldr	r3, [pc, #792]	; af88 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x500>
    ac6c:	e1a09000 	mov	r9, r0
    ac70:	e0033000 	and	r3, r3, r0
    ac74:	e3530000 	cmp	r3, #0
    ac78:	0a00003d 	beq	ad74 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2ec>
    ac7c:	eb006fb1 	bl	26b48 <CLogger::Get()>
    ac80:	e58d9000 	str	r9, [sp]
    ac84:	e3a02001 	mov	r2, #1
    ac88:	e59f3304 	ldr	r3, [pc, #772]	; af94 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x50c>
    ac8c:	e59f1304 	ldr	r1, [pc, #772]	; af98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x510>
    ac90:	eb006eee 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ac94:	e3a01000 	mov	r1, #0
    ac98:	e1a00007 	mov	r0, r7
    ac9c:	eb002606 	bl	144bc <CUSBRequest::SetStatus(int)>
    aca0:	e1a01005 	mov	r1, r5
    aca4:	e1a00006 	mov	r0, r6
    aca8:	ebfffce4 	bl	a040 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    acac:	e1a00004 	mov	r0, r4
    acb0:	eb000982 	bl	d2c0 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    acb4:	e1a00004 	mov	r0, r4
    acb8:	e3a01054 	mov	r1, #84	; 0x54
    acbc:	eb000bdb 	bl	dc30 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    acc0:	e3a03000 	mov	r3, #0
    acc4:	e1a01005 	mov	r1, r5
    acc8:	e1a00006 	mov	r0, r6
    accc:	e5883018 	str	r3, [r8, #24]
    acd0:	ebfffeb3 	bl	a7a4 <CDWHCIDevice::FreeChannel(unsigned int)>
    acd4:	e1a00007 	mov	r0, r7
    acd8:	eb002639 	bl	145c4 <CUSBRequest::CallCompletionRoutine()>
    acdc:	e28dd02c 	add	sp, sp, #44	; 0x2c
    ace0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ace4:	e1a01004 	mov	r1, r4
    ace8:	e1a00006 	mov	r0, r6
    acec:	ebfffdf1 	bl	a4b8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    acf0:	e28d001c 	add	r0, sp, #28
    acf4:	eb000817 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    acf8:	e28d0010 	add	r0, sp, #16
    acfc:	eb000815 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    ad00:	eaffffb1 	b	abcc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>
    ad04:	e1a00004 	mov	r0, r4
    ad08:	eb000b29 	bl	d9b4 <CDWHCITransferStageData::IsStatusStage() const>
    ad0c:	e3500000 	cmp	r0, #0
    ad10:	0a000069 	beq	aebc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x434>
    ad14:	e3a01001 	mov	r1, #1
    ad18:	e1a00007 	mov	r0, r7
    ad1c:	eb0025e6 	bl	144bc <CUSBRequest::SetStatus(int)>
    ad20:	eaffffde 	b	aca0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x218>
    ad24:	e1a00004 	mov	r0, r4
    ad28:	eb000b7a 	bl	db18 <CDWHCITransferStageData::GetTransactionStatus() const>
    ad2c:	e59f3268 	ldr	r3, [pc, #616]	; af9c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x514>
    ad30:	e1a0a000 	mov	sl, r0
    ad34:	e0033000 	and	r3, r3, r0
    ad38:	e3530000 	cmp	r3, #0
    ad3c:	0a000033 	beq	ae10 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x388>
    ad40:	eb006f80 	bl	26b48 <CLogger::Get()>
    ad44:	e1a02009 	mov	r2, r9
    ad48:	e59f3244 	ldr	r3, [pc, #580]	; af94 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x50c>
    ad4c:	e58da000 	str	sl, [sp]
    ad50:	eaffffcd 	b	ac8c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x204>
    ad54:	e59f2244 	ldr	r2, [pc, #580]	; afa0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x518>
    ad58:	e59f1220 	ldr	r1, [pc, #544]	; af80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f8>
    ad5c:	e59f0240 	ldr	r0, [pc, #576]	; afa4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x51c>
    ad60:	eb006690 	bl	247a8 <assertion_failed>
    ad64:	e59f223c 	ldr	r2, [pc, #572]	; afa8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x520>
    ad68:	e59f1210 	ldr	r1, [pc, #528]	; af80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f8>
    ad6c:	e59f0238 	ldr	r0, [pc, #568]	; afac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x524>
    ad70:	eb00668c 	bl	247a8 <assertion_failed>
    ad74:	e1a00004 	mov	r0, r4
    ad78:	eb000b94 	bl	dbd0 <CDWHCITransferStageData::GetFrameScheduler() const>
    ad7c:	e5903000 	ldr	r3, [r0]
    ad80:	e1a01009 	mov	r1, r9
    ad84:	e5933010 	ldr	r3, [r3, #16]
    ad88:	e12fff33 	blx	r3
    ad8c:	e1a00004 	mov	r0, r4
    ad90:	eb000b8e 	bl	dbd0 <CDWHCITransferStageData::GetFrameScheduler() const>
    ad94:	e5903000 	ldr	r3, [r0]
    ad98:	e593300c 	ldr	r3, [r3, #12]
    ad9c:	e12fff33 	blx	r3
    ada0:	e3500000 	cmp	r0, #0
    ada4:	1a000035 	bne	ae80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3f8>
    ada8:	e1a00004 	mov	r0, r4
    adac:	eb000b64 	bl	db44 <CDWHCITransferStageData::IsStageComplete() const>
    adb0:	e2509000 	subs	r9, r0, #0
    adb4:	1a000035 	bne	ae90 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x408>
    adb8:	e1a00004 	mov	r0, r4
    adbc:	eb0009ce 	bl	d4fc <CDWHCITransferStageData::BeginSplitCycle()>
    adc0:	e250a000 	subs	sl, r0, #0
    adc4:	1a00001e 	bne	ae44 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3bc>
    adc8:	e1a0100a 	mov	r1, sl
    adcc:	e1a00007 	mov	r0, r7
    add0:	eb0025b9 	bl	144bc <CUSBRequest::SetStatus(int)>
    add4:	e1a01005 	mov	r1, r5
    add8:	e1a00006 	mov	r0, r6
    addc:	ebfffc97 	bl	a040 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    ade0:	e1a00004 	mov	r0, r4
    ade4:	eb000935 	bl	d2c0 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    ade8:	e1a00004 	mov	r0, r4
    adec:	e3a01054 	mov	r1, #84	; 0x54
    adf0:	eb000b8e 	bl	dc30 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    adf4:	e588a018 	str	sl, [r8, #24]
    adf8:	e1a00006 	mov	r0, r6
    adfc:	e1a01005 	mov	r1, r5
    ae00:	ebfffe67 	bl	a7a4 <CDWHCIDevice::FreeChannel(unsigned int)>
    ae04:	e1a00007 	mov	r0, r7
    ae08:	eb0025ed 	bl	145c4 <CUSBRequest::CallCompletionRoutine()>
    ae0c:	eaffff6e 	b	abcc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>
    ae10:	e1a00004 	mov	r0, r4
    ae14:	eb000b6d 	bl	dbd0 <CDWHCITransferStageData::GetFrameScheduler() const>
    ae18:	e5903000 	ldr	r3, [r0]
    ae1c:	e1a0100a 	mov	r1, sl
    ae20:	e5933010 	ldr	r3, [r3, #16]
    ae24:	e12fff33 	blx	r3
    ae28:	e1a00004 	mov	r0, r4
    ae2c:	e3a01002 	mov	r1, #2
    ae30:	eb0009a9 	bl	d4dc <CDWHCITransferStageData::SetState(unsigned int)>
    ae34:	e1a01009 	mov	r1, r9
    ae38:	e1a00004 	mov	r0, r4
    ae3c:	eb00099a 	bl	d4ac <CDWHCITransferStageData::SetSplitComplete(bool)>
    ae40:	eaffffd1 	b	ad8c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x304>
    ae44:	e1a00004 	mov	r0, r4
    ae48:	eb0009af 	bl	d50c <CDWHCITransferStageData::IsPeriodic() const>
    ae4c:	e250a000 	subs	sl, r0, #0
    ae50:	1a000031 	bne	af1c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x494>
    ae54:	e3a01001 	mov	r1, #1
    ae58:	e1a00004 	mov	r0, r4
    ae5c:	eb00099e 	bl	d4dc <CDWHCITransferStageData::SetState(unsigned int)>
    ae60:	e1a0100a 	mov	r1, sl
    ae64:	e1a00004 	mov	r0, r4
    ae68:	eb00098f 	bl	d4ac <CDWHCITransferStageData::SetSplitComplete(bool)>
    ae6c:	e1a00004 	mov	r0, r4
    ae70:	eb000b56 	bl	dbd0 <CDWHCITransferStageData::GetFrameScheduler() const>
    ae74:	e5903000 	ldr	r3, [r0]
    ae78:	e5933008 	ldr	r3, [r3, #8]
    ae7c:	e12fff33 	blx	r3
    ae80:	e1a01004 	mov	r1, r4
    ae84:	e1a00006 	mov	r0, r6
    ae88:	ebfffd8a 	bl	a4b8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    ae8c:	eaffff4e 	b	abcc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>
    ae90:	e1a01005 	mov	r1, r5
    ae94:	e1a00006 	mov	r0, r6
    ae98:	ebfffc68 	bl	a040 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    ae9c:	e1a00004 	mov	r0, r4
    aea0:	eb000ac3 	bl	d9b4 <CDWHCITransferStageData::IsStatusStage() const>
    aea4:	e3500000 	cmp	r0, #0
    aea8:	0a000015 	beq	af04 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x47c>
    aeac:	e3a01001 	mov	r1, #1
    aeb0:	e1a00007 	mov	r0, r7
    aeb4:	eb002580 	bl	144bc <CUSBRequest::SetStatus(int)>
    aeb8:	eaffff7b 	b	acac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x224>
    aebc:	e1a00004 	mov	r0, r4
    aec0:	eb000b23 	bl	db54 <CDWHCITransferStageData::GetResultLen() const>
    aec4:	e1a01000 	mov	r1, r0
    aec8:	e1a00007 	mov	r0, r7
    aecc:	eb00257c 	bl	144c4 <CUSBRequest::SetResultLen(unsigned int)>
    aed0:	eaffff8f 	b	ad14 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x28c>
    aed4:	eb006f1b 	bl	26b48 <CLogger::Get()>
    aed8:	e58da000 	str	sl, [sp]
    aedc:	eaffff68 	b	ac84 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1fc>
    aee0:	e28d0010 	add	r0, sp, #16
    aee4:	eb0007b1 	bl	cdb0 <CDWHCIRegister::Get() const>
    aee8:	e2200206 	eor	r0, r0, #1610612736	; 0x60000000
    aeec:	e3100206 	tst	r0, #1610612736	; 0x60000000
    aef0:	1affff11 	bne	ab3c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0xb4>
    aef4:	e59f20b4 	ldr	r2, [pc, #180]	; afb0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x528>
    aef8:	e59f1080 	ldr	r1, [pc, #128]	; af80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f8>
    aefc:	e59f00b0 	ldr	r0, [pc, #176]	; afb4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x52c>
    af00:	eb006628 	bl	247a8 <assertion_failed>
    af04:	e1a00004 	mov	r0, r4
    af08:	eb000b11 	bl	db54 <CDWHCITransferStageData::GetResultLen() const>
    af0c:	e1a01000 	mov	r1, r0
    af10:	e1a00007 	mov	r0, r7
    af14:	eb00256a 	bl	144c4 <CUSBRequest::SetResultLen(unsigned int)>
    af18:	eaffffe3 	b	aeac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x424>
    af1c:	e1a00004 	mov	r0, r4
    af20:	eb000b10 	bl	db68 <CDWHCITransferStageData::IsTimeout() const>
    af24:	e3500000 	cmp	r0, #0
    af28:	0affff3a 	beq	ac18 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x190>
    af2c:	e1a01005 	mov	r1, r5
    af30:	e1a00006 	mov	r0, r6
    af34:	ebfffc41 	bl	a040 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    af38:	e1a01009 	mov	r1, r9
    af3c:	e1a00007 	mov	r0, r7
    af40:	eb00255d 	bl	144bc <CUSBRequest::SetStatus(int)>
    af44:	e1a00004 	mov	r0, r4
    af48:	eb0008dc 	bl	d2c0 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    af4c:	e1a00004 	mov	r0, r4
    af50:	e3a01054 	mov	r1, #84	; 0x54
    af54:	eb000b35 	bl	dc30 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    af58:	e5889018 	str	r9, [r8, #24]
    af5c:	eaffffa5 	b	adf8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x370>
    af60:	e59f2050 	ldr	r2, [pc, #80]	; afb8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x530>
    af64:	e59f1014 	ldr	r1, [pc, #20]	; af80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f8>
    af68:	e59f0014 	ldr	r0, [pc, #20]	; af84 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4fc>
    af6c:	eb00660d 	bl	247a8 <assertion_failed>
    af70:	20980510 	.word	0x20980510
    af74:	20980508 	.word	0x20980508
    af78:	000003ff 	.word	0x000003ff
    af7c:	000004cc 	.word	0x000004cc
    af80:	00040b34 	.word	0x00040b34
    af84:	00041748 	.word	0x00041748
    af88:	0000078c 	.word	0x0000078c
    af8c:	10624dd3 	.word	0x10624dd3
    af90:	0000a68c 	.word	0x0000a68c
    af94:	00040d5c 	.word	0x00040d5c
    af98:	000410b0 	.word	0x000410b0
    af9c:	000007dc 	.word	0x000007dc
    afa0:	000003c1 	.word	0x000003c1
    afa4:	00040ba4 	.word	0x00040ba4
    afa8:	000003c3 	.word	0x000003c3
    afac:	00040c30 	.word	0x00040c30
    afb0:	000003e1 	.word	0x000003e1
    afb4:	00040ce4 	.word	0x00040ce4
    afb8:	000003eb 	.word	0x000003eb

0000afbc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    afbc:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    afc0:	e3530000 	cmp	r3, #0
    afc4:	112fff1e 	bxne	lr
    afc8:	eafffeae 	b	aa88 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>

0000afcc <CDWHCIDevice::InterruptHandler()>:
    afcc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    afd0:	e3a04000 	mov	r4, #0
    afd4:	e1a06000 	mov	r6, r0
    afd8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    afdc:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    afe0:	e59f10dc 	ldr	r1, [pc, #220]	; b0c4 <CDWHCIDevice::InterruptHandler()+0xf8>
    afe4:	e28d0004 	add	r0, sp, #4
    afe8:	eb000752 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    afec:	e28d0004 	add	r0, sp, #4
    aff0:	eb000759 	bl	cd5c <CDWHCIRegister::Read()>
    aff4:	e28d0004 	add	r0, sp, #4
    aff8:	eb00076c 	bl	cdb0 <CDWHCIRegister::Get() const>
    affc:	e3100402 	tst	r0, #33554432	; 0x2000000
    b000:	1a000007 	bne	b024 <CDWHCIDevice::InterruptHandler()+0x58>
    b004:	e28d0004 	add	r0, sp, #4
    b008:	eb00075a 	bl	cd78 <CDWHCIRegister::Write()>
    b00c:	e3a03000 	mov	r3, #0
    b010:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b014:	e28d0004 	add	r0, sp, #4
    b018:	eb00074e 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    b01c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    b020:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b024:	e59f109c 	ldr	r1, [pc, #156]	; b0c8 <CDWHCIDevice::InterruptHandler()+0xfc>
    b028:	e28d0010 	add	r0, sp, #16
    b02c:	eb000741 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b030:	e28d0010 	add	r0, sp, #16
    b034:	eb000748 	bl	cd5c <CDWHCIRegister::Read()>
    b038:	e28d0010 	add	r0, sp, #16
    b03c:	eb00074d 	bl	cd78 <CDWHCIRegister::Write()>
    b040:	e596300c 	ldr	r3, [r6, #12]
    b044:	e1530004 	cmp	r3, r4
    b048:	0a00001a 	beq	b0b8 <CDWHCIDevice::InterruptHandler()+0xec>
    b04c:	e3a05001 	mov	r5, #1
    b050:	e59f7074 	ldr	r7, [pc, #116]	; b0cc <CDWHCIDevice::InterruptHandler()+0x100>
    b054:	ea000004 	b	b06c <CDWHCIDevice::InterruptHandler()+0xa0>
    b058:	e596300c 	ldr	r3, [r6, #12]
    b05c:	e2844001 	add	r4, r4, #1
    b060:	e1530004 	cmp	r3, r4
    b064:	e1a05085 	lsl	r5, r5, #1
    b068:	9a000012 	bls	b0b8 <CDWHCIDevice::InterruptHandler()+0xec>
    b06c:	e28d0010 	add	r0, sp, #16
    b070:	eb00074e 	bl	cdb0 <CDWHCIRegister::Get() const>
    b074:	e1100005 	tst	r0, r5
    b078:	0afffff6 	beq	b058 <CDWHCIDevice::InterruptHandler()+0x8c>
    b07c:	e3a02000 	mov	r2, #0
    b080:	e0871284 	add	r1, r7, r4, lsl #5
    b084:	e28d001c 	add	r0, sp, #28
    b088:	eb00072e 	bl	cd48 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b08c:	e28d001c 	add	r0, sp, #28
    b090:	eb000738 	bl	cd78 <CDWHCIRegister::Write()>
    b094:	e5d63081 	ldrb	r3, [r6, #129]	; 0x81
    b098:	e3530000 	cmp	r3, #0
    b09c:	1a000002 	bne	b0ac <CDWHCIDevice::InterruptHandler()+0xe0>
    b0a0:	e1a01004 	mov	r1, r4
    b0a4:	e1a00006 	mov	r0, r6
    b0a8:	ebfffe76 	bl	aa88 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>
    b0ac:	e28d001c 	add	r0, sp, #28
    b0b0:	eb000728 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    b0b4:	eaffffe7 	b	b058 <CDWHCIDevice::InterruptHandler()+0x8c>
    b0b8:	e28d0010 	add	r0, sp, #16
    b0bc:	eb000725 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    b0c0:	eaffffcf 	b	b004 <CDWHCIDevice::InterruptHandler()+0x38>
    b0c4:	20980014 	.word	0x20980014
    b0c8:	20980414 	.word	0x20980414
    b0cc:	2098050c 	.word	0x2098050c

0000b0d0 <CDWHCIDevice::InterruptStub(void*)>:
    b0d0:	e3500000 	cmp	r0, #0
    b0d4:	0a000000 	beq	b0dc <CDWHCIDevice::InterruptStub(void*)+0xc>
    b0d8:	eaffffbb 	b	afcc <CDWHCIDevice::InterruptHandler()>
    b0dc:	e92d4010 	push	{r4, lr}
    b0e0:	e59f2008 	ldr	r2, [pc, #8]	; b0f0 <CDWHCIDevice::InterruptStub(void*)+0x20>
    b0e4:	e59f1008 	ldr	r1, [pc, #8]	; b0f4 <CDWHCIDevice::InterruptStub(void*)+0x24>
    b0e8:	e59f0008 	ldr	r0, [pc, #8]	; b0f8 <CDWHCIDevice::InterruptStub(void*)+0x28>
    b0ec:	eb0065ad 	bl	247a8 <assertion_failed>
    b0f0:	00000532 	.word	0x00000532
    b0f4:	00040b34 	.word	0x00040b34
    b0f8:	00040b44 	.word	0x00040b44

0000b0fc <CDWHCIDevice::AllocateWaitBlock()>:
    b0fc:	e92d4070 	push	{r4, r5, r6, lr}
    b100:	e1a05000 	mov	r5, r0
    b104:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    b108:	e3500000 	cmp	r0, #0
    b10c:	1a000014 	bne	b164 <CDWHCIDevice::AllocateWaitBlock()+0x68>
    b110:	e3a04000 	mov	r4, #0
    b114:	e3a03001 	mov	r3, #1
    b118:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    b11c:	e1120003 	tst	r2, r3
    b120:	0a000007 	beq	b144 <CDWHCIDevice::AllocateWaitBlock()+0x48>
    b124:	e2844001 	add	r4, r4, #1
    b128:	e3540010 	cmp	r4, #16
    b12c:	e1a03083 	lsl	r3, r3, #1
    b130:	1afffff8 	bne	b118 <CDWHCIDevice::AllocateWaitBlock()+0x1c>
    b134:	e3500000 	cmp	r0, #0
    b138:	1a000006 	bne	b158 <CDWHCIDevice::AllocateWaitBlock()+0x5c>
    b13c:	e1a00004 	mov	r0, r4
    b140:	e8bd8070 	pop	{r4, r5, r6, pc}
    b144:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    b148:	e3500000 	cmp	r0, #0
    b14c:	e1823003 	orr	r3, r2, r3
    b150:	e585306c 	str	r3, [r5, #108]	; 0x6c
    b154:	0afffff8 	beq	b13c <CDWHCIDevice::AllocateWaitBlock()+0x40>
    b158:	eb0082f1 	bl	2bd24 <LeaveCritical>
    b15c:	e1a00004 	mov	r0, r4
    b160:	e8bd8070 	pop	{r4, r5, r6, pc}
    b164:	eb0082c4 	bl	2bc7c <EnterCritical>
    b168:	e5950070 	ldr	r0, [r5, #112]	; 0x70
    b16c:	eaffffe7 	b	b110 <CDWHCIDevice::AllocateWaitBlock()+0x14>

0000b170 <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    b170:	e351000f 	cmp	r1, #15
    b174:	e92d4070 	push	{r4, r5, r6, lr}
    b178:	8a000012 	bhi	b1c8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x58>
    b17c:	e3a05001 	mov	r5, #1
    b180:	e1a04000 	mov	r4, r0
    b184:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    b188:	e1a05115 	lsl	r5, r5, r1
    b18c:	e3500000 	cmp	r0, #0
    b190:	1a00000a 	bne	b1c0 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x50>
    b194:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    b198:	e1130005 	tst	r3, r5
    b19c:	0a00000d 	beq	b1d8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x68>
    b1a0:	e594106c 	ldr	r1, [r4, #108]	; 0x6c
    b1a4:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    b1a8:	e1c11005 	bic	r1, r1, r5
    b1ac:	e3530000 	cmp	r3, #0
    b1b0:	e584106c 	str	r1, [r4, #108]	; 0x6c
    b1b4:	08bd8070 	popeq	{r4, r5, r6, pc}
    b1b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    b1bc:	ea0082d8 	b	2bd24 <LeaveCritical>
    b1c0:	eb0082ad 	bl	2bc7c <EnterCritical>
    b1c4:	eafffff2 	b	b194 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x24>
    b1c8:	e59f2018 	ldr	r2, [pc, #24]	; b1e8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x78>
    b1cc:	e59f1018 	ldr	r1, [pc, #24]	; b1ec <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x7c>
    b1d0:	e59f0018 	ldr	r0, [pc, #24]	; b1f0 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x80>
    b1d4:	eb006573 	bl	247a8 <assertion_failed>
    b1d8:	e59f2014 	ldr	r2, [pc, #20]	; b1f4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x84>
    b1dc:	e59f1008 	ldr	r1, [pc, #8]	; b1ec <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x7c>
    b1e0:	e59f0010 	ldr	r0, [pc, #16]	; b1f8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x88>
    b1e4:	eb00656f 	bl	247a8 <assertion_failed>
    b1e8:	0000059d 	.word	0x0000059d
    b1ec:	00040b34 	.word	0x00040b34
    b1f0:	00040b50 	.word	0x00040b50
    b1f4:	000005a2 	.word	0x000005a2
    b1f8:	00040d80 	.word	0x00040d80

0000b1fc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>:
    b1fc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    b200:	e24dd00c 	sub	sp, sp, #12
    b204:	e1a08001 	mov	r8, r1
    b208:	e1a05002 	mov	r5, r2
    b20c:	e1a09003 	mov	r9, r3
    b210:	e1a07000 	mov	r7, r0
    b214:	ebffffb8 	bl	b0fc <CDWHCIDevice::AllocateWaitBlock()>
    b218:	e350000f 	cmp	r0, #15
    b21c:	8a000023 	bhi	b2b0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xb4>
    b220:	e3580000 	cmp	r8, #0
    b224:	0a00002c 	beq	b2dc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xe0>
    b228:	e1a04000 	mov	r4, r0
    b22c:	e1a03007 	mov	r3, r7
    b230:	e1a02000 	mov	r2, r0
    b234:	e59f10c0 	ldr	r1, [pc, #192]	; b2fc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x100>
    b238:	e1a00008 	mov	r0, r8
    b23c:	e0876004 	add	r6, r7, r4
    b240:	eb0024d4 	bl	14598 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    b244:	e5d6305c 	ldrb	r3, [r6, #92]	; 0x5c
    b248:	e3530000 	cmp	r3, #0
    b24c:	1a000026 	bne	b2ec <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xf0>
    b250:	e3a01001 	mov	r1, #1
    b254:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    b258:	e1a02005 	mov	r2, r5
    b25c:	e58d3000 	str	r3, [sp]
    b260:	e1a00007 	mov	r0, r7
    b264:	e5c6105c 	strb	r1, [r6, #92]	; 0x5c
    b268:	e1a03009 	mov	r3, r9
    b26c:	e1a01008 	mov	r1, r8
    b270:	ebfffd6f 	bl	a834 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    b274:	e2505000 	subs	r5, r0, #0
    b278:	0a000010 	beq	b2c0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xc4>
    b27c:	e5d6305c 	ldrb	r3, [r6, #92]	; 0x5c
    b280:	e3530000 	cmp	r3, #0
    b284:	1afffffc 	bne	b27c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x80>
    b288:	e1a01004 	mov	r1, r4
    b28c:	e1a00007 	mov	r0, r7
    b290:	ebffffb6 	bl	b170 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b294:	e1a00008 	mov	r0, r8
    b298:	eb00248b 	bl	144cc <CUSBRequest::GetStatus() const>
    b29c:	e2505000 	subs	r5, r0, #0
    b2a0:	13a05001 	movne	r5, #1
    b2a4:	e1a00005 	mov	r0, r5
    b2a8:	e28dd00c 	add	sp, sp, #12
    b2ac:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b2b0:	e3a05000 	mov	r5, #0
    b2b4:	e1a00005 	mov	r0, r5
    b2b8:	e28dd00c 	add	sp, sp, #12
    b2bc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b2c0:	e1a00007 	mov	r0, r7
    b2c4:	e1a01004 	mov	r1, r4
    b2c8:	e5c6505c 	strb	r5, [r6, #92]	; 0x5c
    b2cc:	ebffffa7 	bl	b170 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b2d0:	e1a00005 	mov	r0, r5
    b2d4:	e28dd00c 	add	sp, sp, #12
    b2d8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b2dc:	e3a02e29 	mov	r2, #656	; 0x290
    b2e0:	e59f1018 	ldr	r1, [pc, #24]	; b300 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    b2e4:	e59f0018 	ldr	r0, [pc, #24]	; b304 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x108>
    b2e8:	eb00652e 	bl	247a8 <assertion_failed>
    b2ec:	e59f2014 	ldr	r2, [pc, #20]	; b308 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x10c>
    b2f0:	e59f1008 	ldr	r1, [pc, #8]	; b300 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    b2f4:	e59f0010 	ldr	r0, [pc, #16]	; b30c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x110>
    b2f8:	eb00652a 	bl	247a8 <assertion_failed>
    b2fc:	00009bf8 	.word	0x00009bf8
    b300:	00040b34 	.word	0x00040b34
    b304:	00040c30 	.word	0x00040c30
    b308:	00000293 	.word	0x00000293
    b30c:	00040da8 	.word	0x00040da8

0000b310 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
    b310:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b314:	e5d0c081 	ldrb	ip, [r0, #129]	; 0x81
    b318:	e1a04001 	mov	r4, r1
    b31c:	e21c10ff 	ands	r1, ip, #255	; 0xff
    b320:	e24dd00c 	sub	sp, sp, #12
    b324:	1a000022 	bne	b3b4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b328:	ee071f9a 	mcr	15, 0, r1, cr7, cr10, {4}
    b32c:	e3540000 	cmp	r4, #0
    b330:	0a000070 	beq	b4f8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1e8>
    b334:	e1a06000 	mov	r6, r0
    b338:	e1a00004 	mov	r0, r4
    b33c:	e1a05002 	mov	r5, r2
    b340:	eb00245d 	bl	144bc <CUSBRequest::SetStatus(int)>
    b344:	e1a00004 	mov	r0, r4
    b348:	eb002451 	bl	14494 <CUSBRequest::GetEndpoint() const>
    b34c:	eb001033 	bl	f420 <CUSBEndpoint::GetType() const>
    b350:	e3500000 	cmp	r0, #0
    b354:	1a000019 	bne	b3c0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xb0>
    b358:	e3550000 	cmp	r5, #0
    b35c:	1a000069 	bne	b508 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1f8>
    b360:	e1a00004 	mov	r0, r4
    b364:	eb002466 	bl	14504 <CUSBRequest::GetSetupData()>
    b368:	e3500000 	cmp	r0, #0
    b36c:	0a000069 	beq	b518 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x208>
    b370:	e1d030d0 	ldrsb	r3, [r0]
    b374:	e1a00004 	mov	r0, r4
    b378:	e3530000 	cmp	r3, #0
    b37c:	ba000028 	blt	b424 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x114>
    b380:	eb002482 	bl	14590 <CUSBRequest::GetBufLen() const>
    b384:	e2507000 	subs	r7, r0, #0
    b388:	1a000041 	bne	b494 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x184>
    b38c:	e1a03007 	mov	r3, r7
    b390:	e1a02007 	mov	r2, r7
    b394:	e1a01004 	mov	r1, r4
    b398:	e1a00006 	mov	r0, r6
    b39c:	e58d7000 	str	r7, [sp]
    b3a0:	ebffff95 	bl	b1fc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b3a4:	e3500000 	cmp	r0, #0
    b3a8:	13a03001 	movne	r3, #1
    b3ac:	158d7000 	strne	r7, [sp]
    b3b0:	1a000049 	bne	b4dc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1cc>
    b3b4:	e3a00000 	mov	r0, #0
    b3b8:	e28dd00c 	add	sp, sp, #12
    b3bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b3c0:	e1a00004 	mov	r0, r4
    b3c4:	eb002432 	bl	14494 <CUSBRequest::GetEndpoint() const>
    b3c8:	eb001014 	bl	f420 <CUSBEndpoint::GetType() const>
    b3cc:	e3500001 	cmp	r0, #1
    b3d0:	1a000054 	bne	b528 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x218>
    b3d4:	e1a00004 	mov	r0, r4
    b3d8:	eb00246c 	bl	14590 <CUSBRequest::GetBufLen() const>
    b3dc:	e3500000 	cmp	r0, #0
    b3e0:	0a000059 	beq	b54c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x23c>
    b3e4:	e1a00004 	mov	r0, r4
    b3e8:	eb002429 	bl	14494 <CUSBRequest::GetEndpoint() const>
    b3ec:	eb00100d 	bl	f428 <CUSBEndpoint::IsDirectionIn() const>
    b3f0:	e1a01004 	mov	r1, r4
    b3f4:	e1a02000 	mov	r2, r0
    b3f8:	e3a03000 	mov	r3, #0
    b3fc:	e1a00006 	mov	r0, r6
    b400:	e58d5000 	str	r5, [sp]
    b404:	ebffff7c 	bl	b1fc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b408:	e3500000 	cmp	r0, #0
    b40c:	0affffe8 	beq	b3b4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b410:	e3a03000 	mov	r3, #0
    b414:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b418:	e3a00001 	mov	r0, #1
    b41c:	e28dd00c 	add	sp, sp, #12
    b420:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b424:	eb002459 	bl	14590 <CUSBRequest::GetBufLen() const>
    b428:	e3500000 	cmp	r0, #0
    b42c:	0a00004a 	beq	b55c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x24c>
    b430:	e1a03005 	mov	r3, r5
    b434:	e1a02005 	mov	r2, r5
    b438:	e1a01004 	mov	r1, r4
    b43c:	e1a00006 	mov	r0, r6
    b440:	e58d5000 	str	r5, [sp]
    b444:	ebffff6c 	bl	b1fc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b448:	e3500000 	cmp	r0, #0
    b44c:	0affffd8 	beq	b3b4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b450:	e1a03005 	mov	r3, r5
    b454:	e3a02001 	mov	r2, #1
    b458:	e1a01004 	mov	r1, r4
    b45c:	e1a00006 	mov	r0, r6
    b460:	e58d5000 	str	r5, [sp]
    b464:	ebffff64 	bl	b1fc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b468:	e3500000 	cmp	r0, #0
    b46c:	0affffd0 	beq	b3b4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b470:	e1a02005 	mov	r2, r5
    b474:	e1a01004 	mov	r1, r4
    b478:	e1a00006 	mov	r0, r6
    b47c:	e3a03001 	mov	r3, #1
    b480:	e58d5000 	str	r5, [sp]
    b484:	ebffff5c 	bl	b1fc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b488:	e3500000 	cmp	r0, #0
    b48c:	1affffdf 	bne	b410 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x100>
    b490:	eaffffc7 	b	b3b4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b494:	e1a03005 	mov	r3, r5
    b498:	e1a02005 	mov	r2, r5
    b49c:	e1a01004 	mov	r1, r4
    b4a0:	e1a00006 	mov	r0, r6
    b4a4:	e58d5000 	str	r5, [sp]
    b4a8:	ebffff53 	bl	b1fc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b4ac:	e3500000 	cmp	r0, #0
    b4b0:	0affffbf 	beq	b3b4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b4b4:	e1a03005 	mov	r3, r5
    b4b8:	e1a02005 	mov	r2, r5
    b4bc:	e1a01004 	mov	r1, r4
    b4c0:	e1a00006 	mov	r0, r6
    b4c4:	e58d5000 	str	r5, [sp]
    b4c8:	ebffff4b 	bl	b1fc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b4cc:	e3500000 	cmp	r0, #0
    b4d0:	0affffb7 	beq	b3b4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b4d4:	e3a03001 	mov	r3, #1
    b4d8:	e58d5000 	str	r5, [sp]
    b4dc:	e1a01004 	mov	r1, r4
    b4e0:	e1a00006 	mov	r0, r6
    b4e4:	e1a02003 	mov	r2, r3
    b4e8:	ebffff43 	bl	b1fc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b4ec:	e3500000 	cmp	r0, #0
    b4f0:	1affffc6 	bne	b410 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x100>
    b4f4:	eaffffae 	b	b3b4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b4f8:	e3a020cf 	mov	r2, #207	; 0xcf
    b4fc:	e59f1068 	ldr	r1, [pc, #104]	; b56c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b500:	e59f0068 	ldr	r0, [pc, #104]	; b570 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x260>
    b504:	eb0064a7 	bl	247a8 <assertion_failed>
    b508:	e3a020d5 	mov	r2, #213	; 0xd5
    b50c:	e59f1058 	ldr	r1, [pc, #88]	; b56c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b510:	e59f005c 	ldr	r0, [pc, #92]	; b574 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x264>
    b514:	eb0064a3 	bl	247a8 <assertion_failed>
    b518:	e3a020d8 	mov	r2, #216	; 0xd8
    b51c:	e59f1048 	ldr	r1, [pc, #72]	; b56c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b520:	e59f0050 	ldr	r0, [pc, #80]	; b578 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x268>
    b524:	eb00649f 	bl	247a8 <assertion_failed>
    b528:	e1a00004 	mov	r0, r4
    b52c:	eb0023d8 	bl	14494 <CUSBRequest::GetEndpoint() const>
    b530:	eb000fba 	bl	f420 <CUSBEndpoint::GetType() const>
    b534:	e3500002 	cmp	r0, #2
    b538:	0affffa5 	beq	b3d4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xc4>
    b53c:	e3a020fc 	mov	r2, #252	; 0xfc
    b540:	e59f1024 	ldr	r1, [pc, #36]	; b56c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b544:	e59f0030 	ldr	r0, [pc, #48]	; b57c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    b548:	eb006496 	bl	247a8 <assertion_failed>
    b54c:	e3a020fe 	mov	r2, #254	; 0xfe
    b550:	e59f1014 	ldr	r1, [pc, #20]	; b56c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b554:	e59f0024 	ldr	r0, [pc, #36]	; b580 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x270>
    b558:	eb006492 	bl	247a8 <assertion_failed>
    b55c:	e3a020dc 	mov	r2, #220	; 0xdc
    b560:	e59f1004 	ldr	r1, [pc, #4]	; b56c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b564:	e59f0014 	ldr	r0, [pc, #20]	; b580 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x270>
    b568:	eb00648e 	bl	247a8 <assertion_failed>
    b56c:	00040b34 	.word	0x00040b34
    b570:	00040c30 	.word	0x00040c30
    b574:	00040dc0 	.word	0x00040dc0
    b578:	00040de0 	.word	0x00040de0
    b57c:	00040c70 	.word	0x00040c70
    b580:	00040c58 	.word	0x00040c58

0000b584 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>:
    b584:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b588:	e2515000 	subs	r5, r1, #0
    b58c:	e59d4020 	ldr	r4, [sp, #32]
    b590:	0a00001e 	beq	b610 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x8c>
    b594:	e3520000 	cmp	r2, #0
    b598:	e1a06002 	mov	r6, r2
    b59c:	0a00001f 	beq	b620 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x9c>
    b5a0:	e3540000 	cmp	r4, #0
    b5a4:	0a000021 	beq	b630 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xac>
    b5a8:	e1a07000 	mov	r7, r0
    b5ac:	e1a08003 	mov	r8, r3
    b5b0:	e2239001 	eor	r9, r3, #1
    b5b4:	ea000003 	b	b5c8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x44>
    b5b8:	e3a00001 	mov	r0, #1
    b5bc:	eb007a11 	bl	29e08 <CTimer::SimpleMsDelay(unsigned int)>
    b5c0:	e2544001 	subs	r4, r4, #1
    b5c4:	0a00000f 	beq	b608 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x84>
    b5c8:	e1a00005 	mov	r0, r5
    b5cc:	eb0005e2 	bl	cd5c <CDWHCIRegister::Read()>
    b5d0:	e1160000 	tst	r6, r0
    b5d4:	11a0c009 	movne	ip, r9
    b5d8:	01a0c008 	moveq	ip, r8
    b5dc:	e35c0000 	cmp	ip, #0
    b5e0:	0a000006 	beq	b600 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x7c>
    b5e4:	e5973008 	ldr	r3, [r7, #8]
    b5e8:	e3530000 	cmp	r3, #0
    b5ec:	1afffff1 	bne	b5b8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x34>
    b5f0:	e59f2048 	ldr	r2, [pc, #72]	; b640 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xbc>
    b5f4:	e59f1048 	ldr	r1, [pc, #72]	; b644 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    b5f8:	e59f0048 	ldr	r0, [pc, #72]	; b648 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    b5fc:	eb006469 	bl	247a8 <assertion_failed>
    b600:	e3a00001 	mov	r0, #1
    b604:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b608:	e1a00004 	mov	r0, r4
    b60c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b610:	e59f2034 	ldr	r2, [pc, #52]	; b64c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc8>
    b614:	e59f1028 	ldr	r1, [pc, #40]	; b644 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    b618:	e59f0030 	ldr	r0, [pc, #48]	; b650 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xcc>
    b61c:	eb006461 	bl	247a8 <assertion_failed>
    b620:	e59f202c 	ldr	r2, [pc, #44]	; b654 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd0>
    b624:	e59f1018 	ldr	r1, [pc, #24]	; b644 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    b628:	e59f0028 	ldr	r0, [pc, #40]	; b658 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd4>
    b62c:	eb00645d 	bl	247a8 <assertion_failed>
    b630:	e59f2024 	ldr	r2, [pc, #36]	; b65c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd8>
    b634:	e59f1008 	ldr	r1, [pc, #8]	; b644 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    b638:	e59f0020 	ldr	r0, [pc, #32]	; b660 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xdc>
    b63c:	eb006459 	bl	247a8 <assertion_failed>
    b640:	000005b3 	.word	0x000005b3
    b644:	00040b34 	.word	0x00040b34
    b648:	00040b94 	.word	0x00040b94
    b64c:	000005ad 	.word	0x000005ad
    b650:	00040dec 	.word	0x00040dec
    b654:	000005ae 	.word	0x000005ae
    b658:	00040dfc 	.word	0x00040dfc
    b65c:	000005af 	.word	0x000005af
    b660:	00040e08 	.word	0x00040e08

0000b664 <CDWHCIDevice::EnableRootPort()>:
    b664:	e92d4030 	push	{r4, r5, lr}
    b668:	e24dd01c 	sub	sp, sp, #28
    b66c:	e1a04000 	mov	r4, r0
    b670:	eb006af6 	bl	26250 <CKernelOptions::Get()>
    b674:	e3500000 	cmp	r0, #0
    b678:	0a00002c 	beq	b730 <CDWHCIDevice::EnableRootPort()+0xcc>
    b67c:	eb006ae6 	bl	2621c <CKernelOptions::GetUSBPowerDelay() const>
    b680:	e2505000 	subs	r5, r0, #0
    b684:	0a000029 	beq	b730 <CDWHCIDevice::EnableRootPort()+0xcc>
    b688:	e59f10a8 	ldr	r1, [pc, #168]	; b738 <CDWHCIDevice::EnableRootPort()+0xd4>
    b68c:	e28d000c 	add	r0, sp, #12
    b690:	eb0005a8 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b694:	e3a03001 	mov	r3, #1
    b698:	e1a00004 	mov	r0, r4
    b69c:	e1a02003 	mov	r2, r3
    b6a0:	e58d5000 	str	r5, [sp]
    b6a4:	e28d100c 	add	r1, sp, #12
    b6a8:	ebffffb5 	bl	b584 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b6ac:	e2504000 	subs	r4, r0, #0
    b6b0:	0a000019 	beq	b71c <CDWHCIDevice::EnableRootPort()+0xb8>
    b6b4:	e3a00064 	mov	r0, #100	; 0x64
    b6b8:	eb0079d2 	bl	29e08 <CTimer::SimpleMsDelay(unsigned int)>
    b6bc:	e28d000c 	add	r0, sp, #12
    b6c0:	eb0005a5 	bl	cd5c <CDWHCIRegister::Read()>
    b6c4:	e3e0102e 	mvn	r1, #46	; 0x2e
    b6c8:	e28d000c 	add	r0, sp, #12
    b6cc:	eb0005d6 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    b6d0:	e3a01c01 	mov	r1, #256	; 0x100
    b6d4:	e28d000c 	add	r0, sp, #12
    b6d8:	eb0005e1 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    b6dc:	e28d000c 	add	r0, sp, #12
    b6e0:	eb0005a4 	bl	cd78 <CDWHCIRegister::Write()>
    b6e4:	e3a00032 	mov	r0, #50	; 0x32
    b6e8:	eb0079c6 	bl	29e08 <CTimer::SimpleMsDelay(unsigned int)>
    b6ec:	e28d000c 	add	r0, sp, #12
    b6f0:	eb000599 	bl	cd5c <CDWHCIRegister::Read()>
    b6f4:	e3e0102e 	mvn	r1, #46	; 0x2e
    b6f8:	e28d000c 	add	r0, sp, #12
    b6fc:	eb0005ca 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    b700:	e3e01c01 	mvn	r1, #256	; 0x100
    b704:	e28d000c 	add	r0, sp, #12
    b708:	eb0005c7 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    b70c:	e28d000c 	add	r0, sp, #12
    b710:	eb000598 	bl	cd78 <CDWHCIRegister::Write()>
    b714:	e3a00014 	mov	r0, #20
    b718:	eb0079ba 	bl	29e08 <CTimer::SimpleMsDelay(unsigned int)>
    b71c:	e28d000c 	add	r0, sp, #12
    b720:	eb00058c 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    b724:	e1a00004 	mov	r0, r4
    b728:	e28dd01c 	add	sp, sp, #28
    b72c:	e8bd8030 	pop	{r4, r5, pc}
    b730:	e59f5004 	ldr	r5, [pc, #4]	; b73c <CDWHCIDevice::EnableRootPort()+0xd8>
    b734:	eaffffd3 	b	b688 <CDWHCIDevice::EnableRootPort()+0x24>
    b738:	20980440 	.word	0x20980440
    b73c:	000001fe 	.word	0x000001fe

0000b740 <CDWHCIDevice::Reset()>:
    b740:	e92d4030 	push	{r4, r5, lr}
    b744:	e1a04000 	mov	r4, r0
    b748:	e3a05064 	mov	r5, #100	; 0x64
    b74c:	e24dd01c 	sub	sp, sp, #28
    b750:	e3a02000 	mov	r2, #0
    b754:	e59f1080 	ldr	r1, [pc, #128]	; b7dc <CDWHCIDevice::Reset()+0x9c>
    b758:	e28d000c 	add	r0, sp, #12
    b75c:	eb000579 	bl	cd48 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b760:	e1a00004 	mov	r0, r4
    b764:	e3a03001 	mov	r3, #1
    b768:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    b76c:	e28d100c 	add	r1, sp, #12
    b770:	e58d5000 	str	r5, [sp]
    b774:	ebffff82 	bl	b584 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b778:	e3500000 	cmp	r0, #0
    b77c:	1a000005 	bne	b798 <CDWHCIDevice::Reset()+0x58>
    b780:	e3a04000 	mov	r4, #0
    b784:	e28d000c 	add	r0, sp, #12
    b788:	eb000572 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    b78c:	e1a00004 	mov	r0, r4
    b790:	e28dd01c 	add	sp, sp, #28
    b794:	e8bd8030 	pop	{r4, r5, pc}
    b798:	e3a01001 	mov	r1, #1
    b79c:	e28d000c 	add	r0, sp, #12
    b7a0:	eb0005af 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    b7a4:	e28d000c 	add	r0, sp, #12
    b7a8:	eb000572 	bl	cd78 <CDWHCIRegister::Write()>
    b7ac:	e3a0300a 	mov	r3, #10
    b7b0:	e1a00004 	mov	r0, r4
    b7b4:	e58d3000 	str	r3, [sp]
    b7b8:	e3a02001 	mov	r2, #1
    b7bc:	e3a03000 	mov	r3, #0
    b7c0:	e28d100c 	add	r1, sp, #12
    b7c4:	ebffff6e 	bl	b584 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b7c8:	e2504000 	subs	r4, r0, #0
    b7cc:	0affffeb 	beq	b780 <CDWHCIDevice::Reset()+0x40>
    b7d0:	e1a00005 	mov	r0, r5
    b7d4:	eb00798b 	bl	29e08 <CTimer::SimpleMsDelay(unsigned int)>
    b7d8:	eaffffe9 	b	b784 <CDWHCIDevice::Reset()+0x44>
    b7dc:	20980010 	.word	0x20980010

0000b7e0 <CDWHCIDevice::InitCore()>:
    b7e0:	e92d4030 	push	{r4, r5, lr}
    b7e4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    b7e8:	e59f1234 	ldr	r1, [pc, #564]	; ba24 <CDWHCIDevice::InitCore()+0x244>
    b7ec:	e1a04000 	mov	r4, r0
    b7f0:	e28d0004 	add	r0, sp, #4
    b7f4:	eb00054f 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b7f8:	e28d0004 	add	r0, sp, #4
    b7fc:	eb000556 	bl	cd5c <CDWHCIRegister::Read()>
    b800:	eb006a92 	bl	26250 <CKernelOptions::Get()>
    b804:	eb006a86 	bl	26224 <CKernelOptions::GetUSBFullSpeed() const>
    b808:	e3500000 	cmp	r0, #0
    b80c:	1a000074 	bne	b9e4 <CDWHCIDevice::InitCore()+0x204>
    b810:	e3e01601 	mvn	r1, #1048576	; 0x100000
    b814:	e28d0004 	add	r0, sp, #4
    b818:	eb000583 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    b81c:	e3e01501 	mvn	r1, #4194304	; 0x400000
    b820:	e28d0004 	add	r0, sp, #4
    b824:	eb000580 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    b828:	e28d0004 	add	r0, sp, #4
    b82c:	eb000551 	bl	cd78 <CDWHCIRegister::Write()>
    b830:	e1a00004 	mov	r0, r4
    b834:	ebffffc1 	bl	b740 <CDWHCIDevice::Reset()>
    b838:	e2505000 	subs	r5, r0, #0
    b83c:	0a000062 	beq	b9cc <CDWHCIDevice::InitCore()+0x1ec>
    b840:	e28d0004 	add	r0, sp, #4
    b844:	eb000544 	bl	cd5c <CDWHCIRegister::Read()>
    b848:	e3e01010 	mvn	r1, #16
    b84c:	e28d0004 	add	r0, sp, #4
    b850:	eb000575 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    b854:	e3e01008 	mvn	r1, #8
    b858:	e28d0004 	add	r0, sp, #4
    b85c:	eb000572 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    b860:	e28d0004 	add	r0, sp, #4
    b864:	eb000543 	bl	cd78 <CDWHCIRegister::Write()>
    b868:	e59f11b8 	ldr	r1, [pc, #440]	; ba28 <CDWHCIDevice::InitCore()+0x248>
    b86c:	e28d0010 	add	r0, sp, #16
    b870:	eb000530 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b874:	e28d0010 	add	r0, sp, #16
    b878:	eb000537 	bl	cd5c <CDWHCIRegister::Read()>
    b87c:	e28d0010 	add	r0, sp, #16
    b880:	eb00054a 	bl	cdb0 <CDWHCIRegister::Get() const>
    b884:	e1a001a0 	lsr	r0, r0, #3
    b888:	e2000003 	and	r0, r0, #3
    b88c:	e3500002 	cmp	r0, #2
    b890:	1a00005b 	bne	ba04 <CDWHCIDevice::InitCore()+0x224>
    b894:	e28d0004 	add	r0, sp, #4
    b898:	eb00052f 	bl	cd5c <CDWHCIRegister::Read()>
    b89c:	e28d0010 	add	r0, sp, #16
    b8a0:	eb000542 	bl	cdb0 <CDWHCIRegister::Get() const>
    b8a4:	e1a00320 	lsr	r0, r0, #6
    b8a8:	e2000003 	and	r0, r0, #3
    b8ac:	e3500002 	cmp	r0, #2
    b8b0:	0a000038 	beq	b998 <CDWHCIDevice::InitCore()+0x1b8>
    b8b4:	e3e01802 	mvn	r1, #131072	; 0x20000
    b8b8:	e28d0004 	add	r0, sp, #4
    b8bc:	eb00055a 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    b8c0:	e3e01702 	mvn	r1, #524288	; 0x80000
    b8c4:	e28d0004 	add	r0, sp, #4
    b8c8:	eb000557 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    b8cc:	e28d0004 	add	r0, sp, #4
    b8d0:	eb000528 	bl	cd78 <CDWHCIRegister::Write()>
    b8d4:	e594300c 	ldr	r3, [r4, #12]
    b8d8:	e3530000 	cmp	r3, #0
    b8dc:	1a00004c 	bne	ba14 <CDWHCIDevice::InitCore()+0x234>
    b8e0:	e28d0010 	add	r0, sp, #16
    b8e4:	eb000531 	bl	cdb0 <CDWHCIRegister::Get() const>
    b8e8:	e1a00720 	lsr	r0, r0, #14
    b8ec:	e200000f 	and	r0, r0, #15
    b8f0:	e2403003 	sub	r3, r0, #3
    b8f4:	e353000c 	cmp	r3, #12
    b8f8:	e2800001 	add	r0, r0, #1
    b8fc:	e584000c 	str	r0, [r4, #12]
    b900:	8a00003b 	bhi	b9f4 <CDWHCIDevice::InitCore()+0x214>
    b904:	e59f1120 	ldr	r1, [pc, #288]	; ba2c <CDWHCIDevice::InitCore()+0x24c>
    b908:	e28d001c 	add	r0, sp, #28
    b90c:	eb000509 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b910:	e28d001c 	add	r0, sp, #28
    b914:	eb000510 	bl	cd5c <CDWHCIRegister::Read()>
    b918:	e3a01020 	mov	r1, #32
    b91c:	e28d001c 	add	r0, sp, #28
    b920:	eb00054f 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    b924:	e3a01010 	mov	r1, #16
    b928:	e28d001c 	add	r0, sp, #28
    b92c:	eb00054c 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    b930:	e3e01006 	mvn	r1, #6
    b934:	e28d001c 	add	r0, sp, #28
    b938:	eb00053b 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    b93c:	e28d001c 	add	r0, sp, #28
    b940:	eb00050c 	bl	cd78 <CDWHCIRegister::Write()>
    b944:	e28d0004 	add	r0, sp, #4
    b948:	eb000503 	bl	cd5c <CDWHCIRegister::Read()>
    b94c:	e3e01c02 	mvn	r1, #512	; 0x200
    b950:	e28d0004 	add	r0, sp, #4
    b954:	eb000534 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    b958:	e3e01c01 	mvn	r1, #256	; 0x100
    b95c:	e28d0004 	add	r0, sp, #4
    b960:	eb000531 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    b964:	e28d0004 	add	r0, sp, #4
    b968:	eb000502 	bl	cd78 <CDWHCIRegister::Write()>
    b96c:	e1a00004 	mov	r0, r4
    b970:	ebfff96c 	bl	9f28 <CDWHCIDevice::EnableCommonInterrupts()>
    b974:	e28d001c 	add	r0, sp, #28
    b978:	eb0004f6 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    b97c:	e28d0010 	add	r0, sp, #16
    b980:	eb0004f4 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    b984:	e28d0004 	add	r0, sp, #4
    b988:	eb0004f2 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    b98c:	e1a00005 	mov	r0, r5
    b990:	e28dd02c 	add	sp, sp, #44	; 0x2c
    b994:	e8bd8030 	pop	{r4, r5, pc}
    b998:	e28d0010 	add	r0, sp, #16
    b99c:	eb000503 	bl	cdb0 <CDWHCIRegister::Get() const>
    b9a0:	e1a00420 	lsr	r0, r0, #8
    b9a4:	e2000003 	and	r0, r0, #3
    b9a8:	e3500001 	cmp	r0, #1
    b9ac:	1affffc0 	bne	b8b4 <CDWHCIDevice::InitCore()+0xd4>
    b9b0:	e28d0004 	add	r0, sp, #4
    b9b4:	e3a01802 	mov	r1, #131072	; 0x20000
    b9b8:	eb000529 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    b9bc:	e3a01702 	mov	r1, #524288	; 0x80000
    b9c0:	e28d0004 	add	r0, sp, #4
    b9c4:	eb000526 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    b9c8:	eaffffbf 	b	b8cc <CDWHCIDevice::InitCore()+0xec>
    b9cc:	eb006c5d 	bl	26b48 <CLogger::Get()>
    b9d0:	e3a02001 	mov	r2, #1
    b9d4:	e59f3054 	ldr	r3, [pc, #84]	; ba30 <CDWHCIDevice::InitCore()+0x250>
    b9d8:	e59f1054 	ldr	r1, [pc, #84]	; ba34 <CDWHCIDevice::InitCore()+0x254>
    b9dc:	eb006b9b 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b9e0:	eaffffe7 	b	b984 <CDWHCIDevice::InitCore()+0x1a4>
    b9e4:	e3a01040 	mov	r1, #64	; 0x40
    b9e8:	e28d0004 	add	r0, sp, #4
    b9ec:	eb00051c 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    b9f0:	eaffff86 	b	b810 <CDWHCIDevice::InitCore()+0x30>
    b9f4:	e59f203c 	ldr	r2, [pc, #60]	; ba38 <CDWHCIDevice::InitCore()+0x258>
    b9f8:	e59f103c 	ldr	r1, [pc, #60]	; ba3c <CDWHCIDevice::InitCore()+0x25c>
    b9fc:	e59f003c 	ldr	r0, [pc, #60]	; ba40 <CDWHCIDevice::InitCore()+0x260>
    ba00:	eb006368 	bl	247a8 <assertion_failed>
    ba04:	e59f2038 	ldr	r2, [pc, #56]	; ba44 <CDWHCIDevice::InitCore()+0x264>
    ba08:	e59f102c 	ldr	r1, [pc, #44]	; ba3c <CDWHCIDevice::InitCore()+0x25c>
    ba0c:	e59f0034 	ldr	r0, [pc, #52]	; ba48 <CDWHCIDevice::InitCore()+0x268>
    ba10:	eb006364 	bl	247a8 <assertion_failed>
    ba14:	e59f2030 	ldr	r2, [pc, #48]	; ba4c <CDWHCIDevice::InitCore()+0x26c>
    ba18:	e59f101c 	ldr	r1, [pc, #28]	; ba3c <CDWHCIDevice::InitCore()+0x25c>
    ba1c:	e59f002c 	ldr	r0, [pc, #44]	; ba50 <CDWHCIDevice::InitCore()+0x270>
    ba20:	eb006360 	bl	247a8 <assertion_failed>
    ba24:	2098000c 	.word	0x2098000c
    ba28:	20980048 	.word	0x20980048
    ba2c:	20980008 	.word	0x20980008
    ba30:	00040e18 	.word	0x00040e18
    ba34:	000410b0 	.word	0x000410b0
    ba38:	00000187 	.word	0x00000187
    ba3c:	00040b34 	.word	0x00040b34
    ba40:	00040e74 	.word	0x00040e74
    ba44:	00000175 	.word	0x00000175
    ba48:	00040e28 	.word	0x00040e28
    ba4c:	00000185 	.word	0x00000185
    ba50:	00040e60 	.word	0x00040e60

0000ba54 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    ba54:	e92d4030 	push	{r4, r5, lr}
    ba58:	e1a05001 	mov	r5, r1
    ba5c:	e24dd01c 	sub	sp, sp, #28
    ba60:	e3a02000 	mov	r2, #0
    ba64:	e1a04000 	mov	r4, r0
    ba68:	e59f106c 	ldr	r1, [pc, #108]	; badc <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x88>
    ba6c:	e28d000c 	add	r0, sp, #12
    ba70:	eb0004b4 	bl	cd48 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    ba74:	e3a01020 	mov	r1, #32
    ba78:	e28d000c 	add	r0, sp, #12
    ba7c:	eb0004f8 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    ba80:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
    ba84:	e28d000c 	add	r0, sp, #12
    ba88:	eb0004e7 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    ba8c:	e1a01305 	lsl	r1, r5, #6
    ba90:	e28d000c 	add	r0, sp, #12
    ba94:	eb0004f2 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    ba98:	e28d000c 	add	r0, sp, #12
    ba9c:	eb0004b5 	bl	cd78 <CDWHCIRegister::Write()>
    baa0:	e3a0300a 	mov	r3, #10
    baa4:	e1a00004 	mov	r0, r4
    baa8:	e58d3000 	str	r3, [sp]
    baac:	e3a02020 	mov	r2, #32
    bab0:	e3a03000 	mov	r3, #0
    bab4:	e28d100c 	add	r1, sp, #12
    bab8:	ebfffeb1 	bl	b584 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    babc:	e3500000 	cmp	r0, #0
    bac0:	0a000001 	beq	bacc <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x78>
    bac4:	e3a00001 	mov	r0, #1
    bac8:	eb0078d5 	bl	29e24 <CTimer::SimpleusDelay(unsigned int)>
    bacc:	e28d000c 	add	r0, sp, #12
    bad0:	eb0004a0 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    bad4:	e28dd01c 	add	sp, sp, #28
    bad8:	e8bd8030 	pop	{r4, r5, pc}
    badc:	20980010 	.word	0x20980010

0000bae0 <CDWHCIDevice::FlushRxFIFO()>:
    bae0:	e92d4010 	push	{r4, lr}
    bae4:	e24dd018 	sub	sp, sp, #24
    bae8:	e3a02000 	mov	r2, #0
    baec:	e1a04000 	mov	r4, r0
    baf0:	e59f1054 	ldr	r1, [pc, #84]	; bb4c <CDWHCIDevice::FlushRxFIFO()+0x6c>
    baf4:	e28d000c 	add	r0, sp, #12
    baf8:	eb000492 	bl	cd48 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bafc:	e3a01010 	mov	r1, #16
    bb00:	e28d000c 	add	r0, sp, #12
    bb04:	eb0004d6 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    bb08:	e28d000c 	add	r0, sp, #12
    bb0c:	eb000499 	bl	cd78 <CDWHCIRegister::Write()>
    bb10:	e3a0300a 	mov	r3, #10
    bb14:	e1a00004 	mov	r0, r4
    bb18:	e58d3000 	str	r3, [sp]
    bb1c:	e3a02010 	mov	r2, #16
    bb20:	e3a03000 	mov	r3, #0
    bb24:	e28d100c 	add	r1, sp, #12
    bb28:	ebfffe95 	bl	b584 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    bb2c:	e3500000 	cmp	r0, #0
    bb30:	0a000001 	beq	bb3c <CDWHCIDevice::FlushRxFIFO()+0x5c>
    bb34:	e3a00001 	mov	r0, #1
    bb38:	eb0078b9 	bl	29e24 <CTimer::SimpleusDelay(unsigned int)>
    bb3c:	e28d000c 	add	r0, sp, #12
    bb40:	eb000484 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    bb44:	e28dd018 	add	sp, sp, #24
    bb48:	e8bd8010 	pop	{r4, pc}
    bb4c:	20980010 	.word	0x20980010

0000bb50 <CDWHCIDevice::InitHost()>:
    bb50:	e92d4030 	push	{r4, r5, lr}
    bb54:	e24dd064 	sub	sp, sp, #100	; 0x64
    bb58:	e3a02000 	mov	r2, #0
    bb5c:	e59f11d4 	ldr	r1, [pc, #468]	; bd38 <CDWHCIDevice::InitHost()+0x1e8>
    bb60:	e1a04000 	mov	r4, r0
    bb64:	e1a0000d 	mov	r0, sp
    bb68:	eb000476 	bl	cd48 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bb6c:	e1a0000d 	mov	r0, sp
    bb70:	eb000480 	bl	cd78 <CDWHCIRegister::Write()>
    bb74:	e59f11c0 	ldr	r1, [pc, #448]	; bd3c <CDWHCIDevice::InitHost()+0x1ec>
    bb78:	e28d000c 	add	r0, sp, #12
    bb7c:	eb00046d 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bb80:	e28d000c 	add	r0, sp, #12
    bb84:	eb000474 	bl	cd5c <CDWHCIRegister::Read()>
    bb88:	e3e01003 	mvn	r1, #3
    bb8c:	e28d000c 	add	r0, sp, #12
    bb90:	eb0004a5 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    bb94:	e59f11a4 	ldr	r1, [pc, #420]	; bd40 <CDWHCIDevice::InitHost()+0x1f0>
    bb98:	e28d0018 	add	r0, sp, #24
    bb9c:	eb000465 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bba0:	e59f119c 	ldr	r1, [pc, #412]	; bd44 <CDWHCIDevice::InitHost()+0x1f4>
    bba4:	e28d0024 	add	r0, sp, #36	; 0x24
    bba8:	eb000462 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bbac:	e28d0018 	add	r0, sp, #24
    bbb0:	eb000469 	bl	cd5c <CDWHCIRegister::Read()>
    bbb4:	e1a00320 	lsr	r0, r0, #6
    bbb8:	e2000003 	and	r0, r0, #3
    bbbc:	e3500002 	cmp	r0, #2
    bbc0:	0a000048 	beq	bce8 <CDWHCIDevice::InitHost()+0x198>
    bbc4:	e3a01000 	mov	r1, #0
    bbc8:	e28d000c 	add	r0, sp, #12
    bbcc:	eb0004a4 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    bbd0:	e28d000c 	add	r0, sp, #12
    bbd4:	eb000467 	bl	cd78 <CDWHCIRegister::Write()>
    bbd8:	e3a02b01 	mov	r2, #1024	; 0x400
    bbdc:	e59f1164 	ldr	r1, [pc, #356]	; bd48 <CDWHCIDevice::InitHost()+0x1f8>
    bbe0:	e28d0030 	add	r0, sp, #48	; 0x30
    bbe4:	eb000457 	bl	cd48 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bbe8:	e28d0030 	add	r0, sp, #48	; 0x30
    bbec:	eb000461 	bl	cd78 <CDWHCIRegister::Write()>
    bbf0:	e3a02000 	mov	r2, #0
    bbf4:	e59f1150 	ldr	r1, [pc, #336]	; bd4c <CDWHCIDevice::InitHost()+0x1fc>
    bbf8:	e28d003c 	add	r0, sp, #60	; 0x3c
    bbfc:	eb000451 	bl	cd48 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bc00:	e3a01b01 	mov	r1, #1024	; 0x400
    bc04:	e28d003c 	add	r0, sp, #60	; 0x3c
    bc08:	eb000495 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    bc0c:	e3a01301 	mov	r1, #67108864	; 0x4000000
    bc10:	e28d003c 	add	r0, sp, #60	; 0x3c
    bc14:	eb000492 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    bc18:	e28d003c 	add	r0, sp, #60	; 0x3c
    bc1c:	eb000455 	bl	cd78 <CDWHCIRegister::Write()>
    bc20:	e3a02000 	mov	r2, #0
    bc24:	e59f1124 	ldr	r1, [pc, #292]	; bd50 <CDWHCIDevice::InitHost()+0x200>
    bc28:	e28d0048 	add	r0, sp, #72	; 0x48
    bc2c:	eb000445 	bl	cd48 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bc30:	e3a01b02 	mov	r1, #2048	; 0x800
    bc34:	e28d0048 	add	r0, sp, #72	; 0x48
    bc38:	eb000489 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    bc3c:	e3a01301 	mov	r1, #67108864	; 0x4000000
    bc40:	e28d0048 	add	r0, sp, #72	; 0x48
    bc44:	eb000486 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    bc48:	e28d0048 	add	r0, sp, #72	; 0x48
    bc4c:	eb000449 	bl	cd78 <CDWHCIRegister::Write()>
    bc50:	e3a01010 	mov	r1, #16
    bc54:	e1a00004 	mov	r0, r4
    bc58:	ebffff7d 	bl	ba54 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    bc5c:	e1a00004 	mov	r0, r4
    bc60:	ebffff9e 	bl	bae0 <CDWHCIDevice::FlushRxFIFO()>
    bc64:	e59f10e8 	ldr	r1, [pc, #232]	; bd54 <CDWHCIDevice::InitHost()+0x204>
    bc68:	e28d0054 	add	r0, sp, #84	; 0x54
    bc6c:	eb000431 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bc70:	e28d0054 	add	r0, sp, #84	; 0x54
    bc74:	eb000438 	bl	cd5c <CDWHCIRegister::Read()>
    bc78:	e3e0102e 	mvn	r1, #46	; 0x2e
    bc7c:	e28d0054 	add	r0, sp, #84	; 0x54
    bc80:	eb000469 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    bc84:	e28d0054 	add	r0, sp, #84	; 0x54
    bc88:	eb000448 	bl	cdb0 <CDWHCIRegister::Get() const>
    bc8c:	e3100a01 	tst	r0, #4096	; 0x1000
    bc90:	0a000022 	beq	bd20 <CDWHCIDevice::InitHost()+0x1d0>
    bc94:	e1a00004 	mov	r0, r4
    bc98:	ebfff8b0 	bl	9f60 <CDWHCIDevice::EnableHostInterrupts()>
    bc9c:	e28d0054 	add	r0, sp, #84	; 0x54
    bca0:	eb00042c 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    bca4:	e28d0048 	add	r0, sp, #72	; 0x48
    bca8:	eb00042a 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    bcac:	e28d003c 	add	r0, sp, #60	; 0x3c
    bcb0:	eb000428 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    bcb4:	e28d0030 	add	r0, sp, #48	; 0x30
    bcb8:	eb000426 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    bcbc:	e28d0024 	add	r0, sp, #36	; 0x24
    bcc0:	eb000424 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    bcc4:	e28d0018 	add	r0, sp, #24
    bcc8:	eb000422 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    bccc:	e28d000c 	add	r0, sp, #12
    bcd0:	eb000420 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    bcd4:	e1a0000d 	mov	r0, sp
    bcd8:	eb00041e 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    bcdc:	e3a00001 	mov	r0, #1
    bce0:	e28dd064 	add	sp, sp, #100	; 0x64
    bce4:	e8bd8030 	pop	{r4, r5, pc}
    bce8:	e28d0018 	add	r0, sp, #24
    bcec:	eb00042f 	bl	cdb0 <CDWHCIRegister::Get() const>
    bcf0:	e1a00420 	lsr	r0, r0, #8
    bcf4:	e2005003 	and	r5, r0, #3
    bcf8:	e3550001 	cmp	r5, #1
    bcfc:	1affffb0 	bne	bbc4 <CDWHCIDevice::InitHost()+0x74>
    bd00:	e28d0024 	add	r0, sp, #36	; 0x24
    bd04:	eb000414 	bl	cd5c <CDWHCIRegister::Read()>
    bd08:	e3100802 	tst	r0, #131072	; 0x20000
    bd0c:	0affffac 	beq	bbc4 <CDWHCIDevice::InitHost()+0x74>
    bd10:	e1a01005 	mov	r1, r5
    bd14:	e28d000c 	add	r0, sp, #12
    bd18:	eb000451 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    bd1c:	eaffffab 	b	bbd0 <CDWHCIDevice::InitHost()+0x80>
    bd20:	e28d0054 	add	r0, sp, #84	; 0x54
    bd24:	e3a01a01 	mov	r1, #4096	; 0x1000
    bd28:	eb00044d 	bl	ce64 <CDWHCIRegister::Or(unsigned int)>
    bd2c:	e28d0054 	add	r0, sp, #84	; 0x54
    bd30:	eb000410 	bl	cd78 <CDWHCIRegister::Write()>
    bd34:	eaffffd6 	b	bc94 <CDWHCIDevice::InitHost()+0x144>
    bd38:	20980e00 	.word	0x20980e00
    bd3c:	20980400 	.word	0x20980400
    bd40:	20980048 	.word	0x20980048
    bd44:	2098000c 	.word	0x2098000c
    bd48:	20980024 	.word	0x20980024
    bd4c:	20980028 	.word	0x20980028
    bd50:	20980100 	.word	0x20980100
    bd54:	20980440 	.word	0x20980440

0000bd58 <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    bd58:	e92d4030 	push	{r4, r5, lr}
    bd5c:	e24dd01c 	sub	sp, sp, #28
    bd60:	e1a05001 	mov	r5, r1
    bd64:	e28d000c 	add	r0, sp, #12
    bd68:	e1a01002 	mov	r1, r2
    bd6c:	eb0003f1 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bd70:	e3a03000 	mov	r3, #0
    bd74:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bd78:	eb006b72 	bl	26b48 <CLogger::Get()>
    bd7c:	e1a04000 	mov	r4, r0
    bd80:	e28d000c 	add	r0, sp, #12
    bd84:	eb0003f4 	bl	cd5c <CDWHCIRegister::Read()>
    bd88:	e3a02004 	mov	r2, #4
    bd8c:	e88d0021 	stm	sp, {r0, r5}
    bd90:	e59f3018 	ldr	r3, [pc, #24]	; bdb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x58>
    bd94:	e1a00004 	mov	r0, r4
    bd98:	e59f1014 	ldr	r1, [pc, #20]	; bdb4 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x5c>
    bd9c:	eb006aab 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bda0:	e28d000c 	add	r0, sp, #12
    bda4:	eb0003eb 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    bda8:	e28dd01c 	add	sp, sp, #28
    bdac:	e8bd8030 	pop	{r4, r5, pc}
    bdb0:	00040b70 	.word	0x00040b70
    bdb4:	000410b0 	.word	0x000410b0

0000bdb8 <CDWHCIDevice::DumpStatus(unsigned int)>:
    bdb8:	e92d4070 	push	{r4, r5, r6, lr}
    bdbc:	e1a05001 	mov	r5, r1
    bdc0:	e59f0104 	ldr	r0, [pc, #260]	; becc <CDWHCIDevice::DumpStatus(unsigned int)+0x114>
    bdc4:	e59f1104 	ldr	r1, [pc, #260]	; bed0 <CDWHCIDevice::DumpStatus(unsigned int)+0x118>
    bdc8:	ebfff7a0 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bdcc:	e59f1100 	ldr	r1, [pc, #256]	; bed4 <CDWHCIDevice::DumpStatus(unsigned int)+0x11c>
    bdd0:	e59f0100 	ldr	r0, [pc, #256]	; bed8 <CDWHCIDevice::DumpStatus(unsigned int)+0x120>
    bdd4:	ebfff79d 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bdd8:	e59f10fc 	ldr	r1, [pc, #252]	; bedc <CDWHCIDevice::DumpStatus(unsigned int)+0x124>
    bddc:	e59f00fc 	ldr	r0, [pc, #252]	; bee0 <CDWHCIDevice::DumpStatus(unsigned int)+0x128>
    bde0:	ebfff79a 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bde4:	e59f10f8 	ldr	r1, [pc, #248]	; bee4 <CDWHCIDevice::DumpStatus(unsigned int)+0x12c>
    bde8:	e59f00f8 	ldr	r0, [pc, #248]	; bee8 <CDWHCIDevice::DumpStatus(unsigned int)+0x130>
    bdec:	ebfff797 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bdf0:	e59f10f4 	ldr	r1, [pc, #244]	; beec <CDWHCIDevice::DumpStatus(unsigned int)+0x134>
    bdf4:	e59f00f4 	ldr	r0, [pc, #244]	; bef0 <CDWHCIDevice::DumpStatus(unsigned int)+0x138>
    bdf8:	ebfff794 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bdfc:	e59f10f0 	ldr	r1, [pc, #240]	; bef4 <CDWHCIDevice::DumpStatus(unsigned int)+0x13c>
    be00:	e59f00f0 	ldr	r0, [pc, #240]	; bef8 <CDWHCIDevice::DumpStatus(unsigned int)+0x140>
    be04:	ebfff791 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be08:	e59f10ec 	ldr	r1, [pc, #236]	; befc <CDWHCIDevice::DumpStatus(unsigned int)+0x144>
    be0c:	e59f00ec 	ldr	r0, [pc, #236]	; bf00 <CDWHCIDevice::DumpStatus(unsigned int)+0x148>
    be10:	ebfff78e 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be14:	e59f10e8 	ldr	r1, [pc, #232]	; bf04 <CDWHCIDevice::DumpStatus(unsigned int)+0x14c>
    be18:	e59f00e8 	ldr	r0, [pc, #232]	; bf08 <CDWHCIDevice::DumpStatus(unsigned int)+0x150>
    be1c:	ebfff78b 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be20:	e59f10e4 	ldr	r1, [pc, #228]	; bf0c <CDWHCIDevice::DumpStatus(unsigned int)+0x154>
    be24:	e59f00e4 	ldr	r0, [pc, #228]	; bf10 <CDWHCIDevice::DumpStatus(unsigned int)+0x158>
    be28:	ebfff788 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be2c:	e59f10e0 	ldr	r1, [pc, #224]	; bf14 <CDWHCIDevice::DumpStatus(unsigned int)+0x15c>
    be30:	e59f00e0 	ldr	r0, [pc, #224]	; bf18 <CDWHCIDevice::DumpStatus(unsigned int)+0x160>
    be34:	ebfff785 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be38:	e59f10dc 	ldr	r1, [pc, #220]	; bf1c <CDWHCIDevice::DumpStatus(unsigned int)+0x164>
    be3c:	e59f00dc 	ldr	r0, [pc, #220]	; bf20 <CDWHCIDevice::DumpStatus(unsigned int)+0x168>
    be40:	ebfff782 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be44:	e59f40d8 	ldr	r4, [pc, #216]	; bf24 <CDWHCIDevice::DumpStatus(unsigned int)+0x16c>
    be48:	e59f10d8 	ldr	r1, [pc, #216]	; bf28 <CDWHCIDevice::DumpStatus(unsigned int)+0x170>
    be4c:	e59f00d8 	ldr	r0, [pc, #216]	; bf2c <CDWHCIDevice::DumpStatus(unsigned int)+0x174>
    be50:	ebfff77e 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be54:	e59f10d4 	ldr	r1, [pc, #212]	; bf30 <CDWHCIDevice::DumpStatus(unsigned int)+0x178>
    be58:	e59f00d4 	ldr	r0, [pc, #212]	; bf34 <CDWHCIDevice::DumpStatus(unsigned int)+0x17c>
    be5c:	ebfff77b 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be60:	e0854004 	add	r4, r5, r4
    be64:	e59f10cc 	ldr	r1, [pc, #204]	; bf38 <CDWHCIDevice::DumpStatus(unsigned int)+0x180>
    be68:	e59f00cc 	ldr	r0, [pc, #204]	; bf3c <CDWHCIDevice::DumpStatus(unsigned int)+0x184>
    be6c:	e1a04284 	lsl	r4, r4, #5
    be70:	ebfff776 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be74:	e59f10c4 	ldr	r1, [pc, #196]	; bf40 <CDWHCIDevice::DumpStatus(unsigned int)+0x188>
    be78:	e59f00c4 	ldr	r0, [pc, #196]	; bf44 <CDWHCIDevice::DumpStatus(unsigned int)+0x18c>
    be7c:	ebfff773 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be80:	e1a01004 	mov	r1, r4
    be84:	e59f00bc 	ldr	r0, [pc, #188]	; bf48 <CDWHCIDevice::DumpStatus(unsigned int)+0x190>
    be88:	ebfff770 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be8c:	e2841004 	add	r1, r4, #4
    be90:	e59f00b4 	ldr	r0, [pc, #180]	; bf4c <CDWHCIDevice::DumpStatus(unsigned int)+0x194>
    be94:	ebfff76d 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be98:	e2841008 	add	r1, r4, #8
    be9c:	e59f00ac 	ldr	r0, [pc, #172]	; bf50 <CDWHCIDevice::DumpStatus(unsigned int)+0x198>
    bea0:	ebfff76a 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bea4:	e284100c 	add	r1, r4, #12
    bea8:	e59f00a4 	ldr	r0, [pc, #164]	; bf54 <CDWHCIDevice::DumpStatus(unsigned int)+0x19c>
    beac:	ebfff767 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    beb0:	e2841010 	add	r1, r4, #16
    beb4:	e59f009c 	ldr	r0, [pc, #156]	; bf58 <CDWHCIDevice::DumpStatus(unsigned int)+0x1a0>
    beb8:	ebfff764 	bl	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bebc:	e2841014 	add	r1, r4, #20
    bec0:	e59f0094 	ldr	r0, [pc, #148]	; bf5c <CDWHCIDevice::DumpStatus(unsigned int)+0x1a4>
    bec4:	e8bd4070 	pop	{r4, r5, r6, lr}
    bec8:	eafff760 	b	9c50 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    becc:	00040eac 	.word	0x00040eac
    bed0:	20980000 	.word	0x20980000
    bed4:	20980008 	.word	0x20980008
    bed8:	00040eb8 	.word	0x00040eb8
    bedc:	2098000c 	.word	0x2098000c
    bee0:	00040ec0 	.word	0x00040ec0
    bee4:	20980010 	.word	0x20980010
    bee8:	00040ec8 	.word	0x00040ec8
    beec:	20980014 	.word	0x20980014
    bef0:	00040ed0 	.word	0x00040ed0
    bef4:	20980018 	.word	0x20980018
    bef8:	00040edc 	.word	0x00040edc
    befc:	20980024 	.word	0x20980024
    bf00:	00040ee8 	.word	0x00040ee8
    bf04:	20980028 	.word	0x20980028
    bf08:	00040ef4 	.word	0x00040ef4
    bf0c:	2098002c 	.word	0x2098002c
    bf10:	00040f08 	.word	0x00040f08
    bf14:	20980100 	.word	0x20980100
    bf18:	00040f18 	.word	0x00040f18
    bf1c:	20980400 	.word	0x20980400
    bf20:	00040f30 	.word	0x00040f30
    bf24:	0104c028 	.word	0x0104c028
    bf28:	20980410 	.word	0x20980410
    bf2c:	00040f3c 	.word	0x00040f3c
    bf30:	20980414 	.word	0x20980414
    bf34:	00040f54 	.word	0x00040f54
    bf38:	20980418 	.word	0x20980418
    bf3c:	00040f68 	.word	0x00040f68
    bf40:	20980440 	.word	0x20980440
    bf44:	00040f80 	.word	0x00040f80
    bf48:	00040f8c 	.word	0x00040f8c
    bf4c:	00040fa4 	.word	0x00040fa4
    bf50:	00040fbc 	.word	0x00040fbc
    bf54:	00040fd0 	.word	0x00040fd0
    bf58:	00040fe8 	.word	0x00040fe8
    bf5c:	00041000 	.word	0x00041000

0000bf60 <CDWHCIDevice::~CDWHCIDevice()>:
    bf60:	e3a03001 	mov	r3, #1
    bf64:	e92d4030 	push	{r4, r5, lr}
    bf68:	e5901008 	ldr	r1, [r0, #8]
    bf6c:	e59f20bc 	ldr	r2, [pc, #188]	; c030 <CDWHCIDevice::~CDWHCIDevice()+0xd0>
    bf70:	e3510000 	cmp	r1, #0
    bf74:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    bf78:	e5802000 	str	r2, [r0]
    bf7c:	e5c03081 	strb	r3, [r0, #129]	; 0x81
    bf80:	0a000022 	beq	c010 <CDWHCIDevice::~CDWHCIDevice()+0xb0>
    bf84:	e1a04000 	mov	r4, r0
    bf88:	e3a000c8 	mov	r0, #200	; 0xc8
    bf8c:	eb00779d 	bl	29e08 <CTimer::SimpleMsDelay(unsigned int)>
    bf90:	e5940004 	ldr	r0, [r4, #4]
    bf94:	e3500000 	cmp	r0, #0
    bf98:	0a000020 	beq	c020 <CDWHCIDevice::~CDWHCIDevice()+0xc0>
    bf9c:	e3a05000 	mov	r5, #0
    bfa0:	e3a01009 	mov	r1, #9
    bfa4:	eb008066 	bl	2c144 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    bfa8:	e1a00004 	mov	r0, r4
    bfac:	ebfffde3 	bl	b740 <CDWHCIDevice::Reset()>
    bfb0:	e1a01005 	mov	r1, r5
    bfb4:	e28d000c 	add	r0, sp, #12
    bfb8:	eb00621b 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
    bfbc:	e3a03014 	mov	r3, #20
    bfc0:	e3a01003 	mov	r1, #3
    bfc4:	e3a0c002 	mov	ip, #2
    bfc8:	e08d2003 	add	r2, sp, r3
    bfcc:	e58d1020 	str	r1, [sp, #32]
    bfd0:	e28d000c 	add	r0, sp, #12
    bfd4:	e59f1058 	ldr	r1, [pc, #88]	; c034 <CDWHCIDevice::~CDWHCIDevice()+0xd4>
    bfd8:	e58d5000 	str	r5, [sp]
    bfdc:	e58dc024 	str	ip, [sp, #36]	; 0x24
    bfe0:	eb00621d 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    bfe4:	e5845004 	str	r5, [r4, #4]
    bfe8:	e5845008 	str	r5, [r4, #8]
    bfec:	e28d000c 	add	r0, sp, #12
    bff0:	eb006214 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
    bff4:	e2840074 	add	r0, r4, #116	; 0x74
    bff8:	eb0003fe 	bl	cff8 <CDWHCIRootPort::~CDWHCIRootPort()>
    bffc:	e1a00004 	mov	r0, r4
    c000:	eb001a11 	bl	1284c <CUSBHostController::~CUSBHostController()>
    c004:	e1a00004 	mov	r0, r4
    c008:	e28dd02c 	add	sp, sp, #44	; 0x2c
    c00c:	e8bd8030 	pop	{r4, r5, pc}
    c010:	e3a0205d 	mov	r2, #93	; 0x5d
    c014:	e59f101c 	ldr	r1, [pc, #28]	; c038 <CDWHCIDevice::~CDWHCIDevice()+0xd8>
    c018:	e59f001c 	ldr	r0, [pc, #28]	; c03c <CDWHCIDevice::~CDWHCIDevice()+0xdc>
    c01c:	eb0061e1 	bl	247a8 <assertion_failed>
    c020:	e3a02060 	mov	r2, #96	; 0x60
    c024:	e59f100c 	ldr	r1, [pc, #12]	; c038 <CDWHCIDevice::~CDWHCIDevice()+0xd8>
    c028:	e59f0010 	ldr	r0, [pc, #16]	; c040 <CDWHCIDevice::~CDWHCIDevice()+0xe0>
    c02c:	eb0061dd 	bl	247a8 <assertion_failed>
    c030:	000410c0 	.word	0x000410c0
    c034:	00028001 	.word	0x00028001
    c038:	00040b34 	.word	0x00040b34
    c03c:	00040b94 	.word	0x00040b94
    c040:	00040b7c 	.word	0x00040b7c

0000c044 <CDWHCIDevice::~CDWHCIDevice()>:
    c044:	e92d4010 	push	{r4, lr}
    c048:	e1a04000 	mov	r4, r0
    c04c:	ebffffc3 	bl	bf60 <CDWHCIDevice::~CDWHCIDevice()>
    c050:	e1a00004 	mov	r0, r4
    c054:	e3a01084 	mov	r1, #132	; 0x84
    c058:	eb007be8 	bl	2b000 <operator delete(void*, unsigned int)>
    c05c:	e1a00004 	mov	r0, r4
    c060:	e8bd8010 	pop	{r4, pc}

0000c064 <CDWHCIDevice::ReScanDevices()>:
    c064:	e92d4010 	push	{r4, lr}
    c068:	e3a03000 	mov	r3, #0
    c06c:	e1a04000 	mov	r4, r0
    c070:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c074:	e5d03080 	ldrb	r3, [r0, #128]	; 0x80
    c078:	e3530000 	cmp	r3, #0
    c07c:	1a000016 	bne	c0dc <CDWHCIDevice::ReScanDevices()+0x78>
    c080:	ebfffd77 	bl	b664 <CDWHCIDevice::EnableRootPort()>
    c084:	e3500000 	cmp	r0, #0
    c088:	1a000007 	bne	c0ac <CDWHCIDevice::ReScanDevices()+0x48>
    c08c:	eb006aad 	bl	26b48 <CLogger::Get()>
    c090:	e3a02002 	mov	r2, #2
    c094:	e59f304c 	ldr	r3, [pc, #76]	; c0e8 <CDWHCIDevice::ReScanDevices()+0x84>
    c098:	e59f104c 	ldr	r1, [pc, #76]	; c0ec <CDWHCIDevice::ReScanDevices()+0x88>
    c09c:	eb0069eb 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c0a0:	e3a03000 	mov	r3, #0
    c0a4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c0a8:	e8bd8010 	pop	{r4, pc}
    c0ac:	e3a03001 	mov	r3, #1
    c0b0:	e2840074 	add	r0, r4, #116	; 0x74
    c0b4:	e5c43080 	strb	r3, [r4, #128]	; 0x80
    c0b8:	eb000421 	bl	d144 <CDWHCIRootPort::Initialize()>
    c0bc:	e3500000 	cmp	r0, #0
    c0c0:	1afffff6 	bne	c0a0 <CDWHCIDevice::ReScanDevices()+0x3c>
    c0c4:	eb006a9f 	bl	26b48 <CLogger::Get()>
    c0c8:	e3a02002 	mov	r2, #2
    c0cc:	e59f301c 	ldr	r3, [pc, #28]	; c0f0 <CDWHCIDevice::ReScanDevices()+0x8c>
    c0d0:	e59f1014 	ldr	r1, [pc, #20]	; c0ec <CDWHCIDevice::ReScanDevices()+0x88>
    c0d4:	eb0069dd 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c0d8:	eafffff0 	b	c0a0 <CDWHCIDevice::ReScanDevices()+0x3c>
    c0dc:	e2800074 	add	r0, r0, #116	; 0x74
    c0e0:	eb0003f8 	bl	d0c8 <CDWHCIRootPort::ReScanDevices()>
    c0e4:	eaffffed 	b	c0a0 <CDWHCIDevice::ReScanDevices()+0x3c>
    c0e8:	00041034 	.word	0x00041034
    c0ec:	000410b0 	.word	0x000410b0
    c0f0:	00041018 	.word	0x00041018

0000c0f4 <CDWHCIDevice::Initialize()>:
    c0f4:	e92d4070 	push	{r4, r5, r6, lr}
    c0f8:	e3a01001 	mov	r1, #1
    c0fc:	e24dd020 	sub	sp, sp, #32
    c100:	e1a04000 	mov	r4, r0
    c104:	e3a00020 	mov	r0, #32
    c108:	eb002183 	bl	1471c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
    c10c:	e3a01001 	mov	r1, #1
    c110:	e3a00010 	mov	r0, #16
    c114:	eb0006f4 	bl	dcec <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>
    c118:	e3a01001 	mov	r1, #1
    c11c:	e3a00010 	mov	r0, #16
    c120:	eb000138 	bl	c608 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    c124:	e3a01001 	mov	r1, #1
    c128:	e3a00010 	mov	r0, #16
    c12c:	eb0002e5 	bl	ccc8 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    c130:	e3a01001 	mov	r1, #1
    c134:	e3a00010 	mov	r0, #16
    c138:	eb0001d2 	bl	c888 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>
    c13c:	e3a06000 	mov	r6, #0
    c140:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    c144:	e5943004 	ldr	r3, [r4, #4]
    c148:	e1530006 	cmp	r3, r6
    c14c:	0a00004c 	beq	c284 <CDWHCIDevice::Initialize()+0x190>
    c150:	e5943008 	ldr	r3, [r4, #8]
    c154:	e3530000 	cmp	r3, #0
    c158:	0a00004d 	beq	c294 <CDWHCIDevice::Initialize()+0x1a0>
    c15c:	e59f1168 	ldr	r1, [pc, #360]	; c2cc <CDWHCIDevice::Initialize()+0x1d8>
    c160:	e28d0008 	add	r0, sp, #8
    c164:	eb0002f3 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c168:	e28d0008 	add	r0, sp, #8
    c16c:	eb0002fa 	bl	cd5c <CDWHCIRegister::Read()>
    c170:	e59f3158 	ldr	r3, [pc, #344]	; c2d0 <CDWHCIDevice::Initialize()+0x1dc>
    c174:	e1500003 	cmp	r0, r3
    c178:	1a000024 	bne	c210 <CDWHCIDevice::Initialize()+0x11c>
    c17c:	e1a00004 	mov	r0, r4
    c180:	ebfff73c 	bl	9e78 <CDWHCIDevice::PowerOn()>
    c184:	e2505000 	subs	r5, r0, #0
    c188:	0a000037 	beq	c26c <CDWHCIDevice::Initialize()+0x178>
    c18c:	e59f1140 	ldr	r1, [pc, #320]	; c2d4 <CDWHCIDevice::Initialize()+0x1e0>
    c190:	e28d0014 	add	r0, sp, #20
    c194:	eb0002e7 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c198:	e28d0014 	add	r0, sp, #20
    c19c:	eb0002ee 	bl	cd5c <CDWHCIRegister::Read()>
    c1a0:	e3e01001 	mvn	r1, #1
    c1a4:	e28d0014 	add	r0, sp, #20
    c1a8:	eb00031f 	bl	ce2c <CDWHCIRegister::And(unsigned int)>
    c1ac:	e28d0014 	add	r0, sp, #20
    c1b0:	eb0002f0 	bl	cd78 <CDWHCIRegister::Write()>
    c1b4:	e5940004 	ldr	r0, [r4, #4]
    c1b8:	e3500000 	cmp	r0, #0
    c1bc:	0a00003e 	beq	c2bc <CDWHCIDevice::Initialize()+0x1c8>
    c1c0:	e1a03004 	mov	r3, r4
    c1c4:	e3a01009 	mov	r1, #9
    c1c8:	e59f2108 	ldr	r2, [pc, #264]	; c2d8 <CDWHCIDevice::Initialize()+0x1e4>
    c1cc:	eb007fa8 	bl	2c074 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    c1d0:	e1a00004 	mov	r0, r4
    c1d4:	ebfffd81 	bl	b7e0 <CDWHCIDevice::InitCore()>
    c1d8:	e2505000 	subs	r5, r0, #0
    c1dc:	0a00001c 	beq	c254 <CDWHCIDevice::Initialize()+0x160>
    c1e0:	e1a00004 	mov	r0, r4
    c1e4:	ebfff73e 	bl	9ee4 <CDWHCIDevice::EnableGlobalInterrupts()>
    c1e8:	e1a00004 	mov	r0, r4
    c1ec:	ebfffe57 	bl	bb50 <CDWHCIDevice::InitHost()>
    c1f0:	e2505000 	subs	r5, r0, #0
    c1f4:	0a00002a 	beq	c2a4 <CDWHCIDevice::Initialize()+0x1b0>
    c1f8:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
    c1fc:	e1a00004 	mov	r0, r4
    c200:	ebffff97 	bl	c064 <CDWHCIDevice::ReScanDevices()>
    c204:	e28d0014 	add	r0, sp, #20
    c208:	eb0002d2 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    c20c:	ea00000b 	b	c240 <CDWHCIDevice::Initialize()+0x14c>
    c210:	eb006a4c 	bl	26b48 <CLogger::Get()>
    c214:	e1a04000 	mov	r4, r0
    c218:	e28d0008 	add	r0, sp, #8
    c21c:	eb0002e3 	bl	cdb0 <CDWHCIRegister::Get() const>
    c220:	e1a02000 	mov	r2, r0
    c224:	e59f30b0 	ldr	r3, [pc, #176]	; c2dc <CDWHCIDevice::Initialize()+0x1e8>
    c228:	e58d2000 	str	r2, [sp]
    c22c:	e1a00004 	mov	r0, r4
    c230:	e3a02001 	mov	r2, #1
    c234:	e59f10a4 	ldr	r1, [pc, #164]	; c2e0 <CDWHCIDevice::Initialize()+0x1ec>
    c238:	e1a05006 	mov	r5, r6
    c23c:	eb006983 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c240:	e28d0008 	add	r0, sp, #8
    c244:	eb0002c3 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    c248:	e1a00005 	mov	r0, r5
    c24c:	e28dd020 	add	sp, sp, #32
    c250:	e8bd8070 	pop	{r4, r5, r6, pc}
    c254:	eb006a3b 	bl	26b48 <CLogger::Get()>
    c258:	e3a02001 	mov	r2, #1
    c25c:	e59f3080 	ldr	r3, [pc, #128]	; c2e4 <CDWHCIDevice::Initialize()+0x1f0>
    c260:	e59f1078 	ldr	r1, [pc, #120]	; c2e0 <CDWHCIDevice::Initialize()+0x1ec>
    c264:	eb006979 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c268:	eaffffe5 	b	c204 <CDWHCIDevice::Initialize()+0x110>
    c26c:	eb006a35 	bl	26b48 <CLogger::Get()>
    c270:	e3a02001 	mov	r2, #1
    c274:	e59f306c 	ldr	r3, [pc, #108]	; c2e8 <CDWHCIDevice::Initialize()+0x1f4>
    c278:	e59f1060 	ldr	r1, [pc, #96]	; c2e0 <CDWHCIDevice::Initialize()+0x1ec>
    c27c:	eb006973 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c280:	eaffffee 	b	c240 <CDWHCIDevice::Initialize()+0x14c>
    c284:	e3a0207a 	mov	r2, #122	; 0x7a
    c288:	e59f105c 	ldr	r1, [pc, #92]	; c2ec <CDWHCIDevice::Initialize()+0x1f8>
    c28c:	e59f005c 	ldr	r0, [pc, #92]	; c2f0 <CDWHCIDevice::Initialize()+0x1fc>
    c290:	eb006144 	bl	247a8 <assertion_failed>
    c294:	e3a0207b 	mov	r2, #123	; 0x7b
    c298:	e59f104c 	ldr	r1, [pc, #76]	; c2ec <CDWHCIDevice::Initialize()+0x1f8>
    c29c:	e59f0050 	ldr	r0, [pc, #80]	; c2f4 <CDWHCIDevice::Initialize()+0x200>
    c2a0:	eb006140 	bl	247a8 <assertion_failed>
    c2a4:	eb006a27 	bl	26b48 <CLogger::Get()>
    c2a8:	e3a02001 	mov	r2, #1
    c2ac:	e59f3044 	ldr	r3, [pc, #68]	; c2f8 <CDWHCIDevice::Initialize()+0x204>
    c2b0:	e59f1028 	ldr	r1, [pc, #40]	; c2e0 <CDWHCIDevice::Initialize()+0x1ec>
    c2b4:	eb006965 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c2b8:	eaffffd1 	b	c204 <CDWHCIDevice::Initialize()+0x110>
    c2bc:	e3a02090 	mov	r2, #144	; 0x90
    c2c0:	e59f1024 	ldr	r1, [pc, #36]	; c2ec <CDWHCIDevice::Initialize()+0x1f8>
    c2c4:	e59f0024 	ldr	r0, [pc, #36]	; c2f0 <CDWHCIDevice::Initialize()+0x1fc>
    c2c8:	eb006136 	bl	247a8 <assertion_failed>
    c2cc:	20980040 	.word	0x20980040
    c2d0:	4f54280a 	.word	0x4f54280a
    c2d4:	20980008 	.word	0x20980008
    c2d8:	0000b0d0 	.word	0x0000b0d0
    c2dc:	00041058 	.word	0x00041058
    c2e0:	000410b0 	.word	0x000410b0
    c2e4:	00041080 	.word	0x00041080
    c2e8:	00041070 	.word	0x00041070
    c2ec:	00040b34 	.word	0x00040b34
    c2f0:	00040b7c 	.word	0x00040b7c
    c2f4:	00040b94 	.word	0x00040b94
    c2f8:	00041098 	.word	0x00041098

0000c2fc <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    c2fc:	e12fff1e 	bx	lr

0000c300 <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
    c300:	e3a03000 	mov	r3, #0
    c304:	e5803008 	str	r3, [r0, #8]
    c308:	e12fff1e 	bx	lr

0000c30c <CDWHCIFrameSchedulerNonPeriodic::WaitForFrame()>:
    c30c:	e12fff1e 	bx	lr

0000c310 <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
    c310:	e3a00000 	mov	r0, #0
    c314:	e12fff1e 	bx	lr

0000c318 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
    c318:	e5903008 	ldr	r3, [r0, #8]
    c31c:	e92d4010 	push	{r4, lr}
    c320:	e3530003 	cmp	r3, #3
    c324:	8a000008 	bhi	c34c <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x34>
    c328:	e3530001 	cmp	r3, #1
    c32c:	8a00000c 	bhi	c364 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x4c>
    c330:	03a01002 	moveq	r1, #2
    c334:	03a02003 	moveq	r2, #3
    c338:	05801008 	streq	r1, [r0, #8]
    c33c:	0580200c 	streq	r2, [r0, #12]
    c340:	1a00000b 	bne	c374 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x5c>
    c344:	e1a00003 	mov	r0, r3
    c348:	e8bd8010 	pop	{r4, pc}
    c34c:	e2433004 	sub	r3, r3, #4
    c350:	e3530001 	cmp	r3, #1
    c354:	8a000006 	bhi	c374 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x5c>
    c358:	e3a03000 	mov	r3, #0
    c35c:	e1a00003 	mov	r0, r3
    c360:	e8bd8010 	pop	{r4, pc}
    c364:	e59f0018 	ldr	r0, [pc, #24]	; c384 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x6c>
    c368:	eb0076ad 	bl	29e24 <CTimer::SimpleusDelay(unsigned int)>
    c36c:	e3a03001 	mov	r3, #1
    c370:	eafffff3 	b	c344 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x2c>
    c374:	e3a0205f 	mov	r2, #95	; 0x5f
    c378:	e59f1008 	ldr	r1, [pc, #8]	; c388 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x70>
    c37c:	e59f0008 	ldr	r0, [pc, #8]	; c38c <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x74>
    c380:	eb006108 	bl	247a8 <assertion_failed>
    c384:	00000271 	.word	0x00000271
    c388:	000410d0 	.word	0x000410d0
    c38c:	00041748 	.word	0x00041748

0000c390 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
    c390:	e92d4010 	push	{r4, lr}
    c394:	e5903008 	ldr	r3, [r0, #8]
    c398:	e1a04000 	mov	r4, r0
    c39c:	e3530000 	cmp	r3, #0
    c3a0:	e24dd010 	sub	sp, sp, #16
    c3a4:	0a000013 	beq	c3f8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x68>
    c3a8:	e2433002 	sub	r3, r3, #2
    c3ac:	e3530001 	cmp	r3, #1
    c3b0:	8a000024 	bhi	c448 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xb8>
    c3b4:	e3110001 	tst	r1, #1
    c3b8:	13a03004 	movne	r3, #4
    c3bc:	15803008 	strne	r3, [r0, #8]
    c3c0:	1a00000a 	bne	c3f0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    c3c4:	e3110060 	tst	r1, #96	; 0x60
    c3c8:	1a000012 	bne	c418 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x88>
    c3cc:	e3110010 	tst	r1, #16
    c3d0:	0a000020 	beq	c458 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xc8>
    c3d4:	e590300c 	ldr	r3, [r0, #12]
    c3d8:	e3530000 	cmp	r3, #0
    c3dc:	e2433001 	sub	r3, r3, #1
    c3e0:	e580300c 	str	r3, [r0, #12]
    c3e4:	0a000014 	beq	c43c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xac>
    c3e8:	e3a03003 	mov	r3, #3
    c3ec:	e5843008 	str	r3, [r4, #8]
    c3f0:	e28dd010 	add	sp, sp, #16
    c3f4:	e8bd8010 	pop	{r4, pc}
    c3f8:	e3110020 	tst	r1, #32
    c3fc:	13a03001 	movne	r3, #1
    c400:	15803008 	strne	r3, [r0, #8]
    c404:	1afffff9 	bne	c3f0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    c408:	e3a0206b 	mov	r2, #107	; 0x6b
    c40c:	e59f1074 	ldr	r1, [pc, #116]	; c488 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    c410:	e59f0074 	ldr	r0, [pc, #116]	; c48c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xfc>
    c414:	eb0060e3 	bl	247a8 <assertion_failed>
    c418:	e590300c 	ldr	r3, [r0, #12]
    c41c:	e3530000 	cmp	r3, #0
    c420:	e2433001 	sub	r3, r3, #1
    c424:	e580300c 	str	r3, [r0, #12]
    c428:	1affffee 	bne	c3e8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x58>
    c42c:	e3a03005 	mov	r3, #5
    c430:	e5843008 	str	r3, [r4, #8]
    c434:	e28dd010 	add	sp, sp, #16
    c438:	e8bd8010 	pop	{r4, pc}
    c43c:	e59f004c 	ldr	r0, [pc, #76]	; c490 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x100>
    c440:	eb007677 	bl	29e24 <CTimer::SimpleusDelay(unsigned int)>
    c444:	eafffff8 	b	c42c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x9c>
    c448:	e3a0209b 	mov	r2, #155	; 0x9b
    c44c:	e59f1034 	ldr	r1, [pc, #52]	; c488 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    c450:	e59f003c 	ldr	r0, [pc, #60]	; c494 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x104>
    c454:	eb0060d3 	bl	247a8 <assertion_failed>
    c458:	e58d100c 	str	r1, [sp, #12]
    c45c:	eb0069b9 	bl	26b48 <CLogger::Get()>
    c460:	e59d100c 	ldr	r1, [sp, #12]
    c464:	e3a02001 	mov	r2, #1
    c468:	e58d1000 	str	r1, [sp]
    c46c:	e59f3024 	ldr	r3, [pc, #36]	; c498 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x108>
    c470:	e59f1024 	ldr	r1, [pc, #36]	; c49c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x10c>
    c474:	eb0068f5 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c478:	e3a02096 	mov	r2, #150	; 0x96
    c47c:	e59f1004 	ldr	r1, [pc, #4]	; c488 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    c480:	e59f000c 	ldr	r0, [pc, #12]	; c494 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x104>
    c484:	eb0060c7 	bl	247a8 <assertion_failed>
    c488:	000410d0 	.word	0x000410d0
    c48c:	000410e8 	.word	0x000410e8
    c490:	00000271 	.word	0x00000271
    c494:	00041748 	.word	0x00041748
    c498:	0004110c 	.word	0x0004110c
    c49c:	00041120 	.word	0x00041120

0000c4a0 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
    c4a0:	e59f3034 	ldr	r3, [pc, #52]	; c4dc <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x3c>
    c4a4:	e92d4010 	push	{r4, lr}
    c4a8:	e5803000 	str	r3, [r0]
    c4ac:	e1a04000 	mov	r4, r0
    c4b0:	eb007689 	bl	29edc <CTimer::Get()>
    c4b4:	e3a03006 	mov	r3, #6
    c4b8:	e3500000 	cmp	r0, #0
    c4bc:	e9840009 	stmib	r4, {r0, r3}
    c4c0:	0a000001 	beq	c4cc <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x2c>
    c4c4:	e1a00004 	mov	r0, r4
    c4c8:	e8bd8010 	pop	{r4, pc}
    c4cc:	e3a0202e 	mov	r2, #46	; 0x2e
    c4d0:	e59f1008 	ldr	r1, [pc, #8]	; c4e0 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x40>
    c4d4:	e59f0008 	ldr	r0, [pc, #8]	; c4e4 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x44>
    c4d8:	eb0060b2 	bl	247a8 <assertion_failed>
    c4dc:	000411ac 	.word	0x000411ac
    c4e0:	000410d0 	.word	0x000410d0
    c4e4:	00040b94 	.word	0x00040b94

0000c4e8 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>:
    c4e8:	e3500010 	cmp	r0, #16
    c4ec:	e92d4010 	push	{r4, lr}
    c4f0:	1a000005 	bne	c50c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x24>
    c4f4:	e59f3030 	ldr	r3, [pc, #48]	; c52c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x44>
    c4f8:	e5930000 	ldr	r0, [r3]
    c4fc:	e3500000 	cmp	r0, #0
    c500:	0a000005 	beq	c51c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x34>
    c504:	e8bd4010 	pop	{r4, lr}
    c508:	ea0061a8 	b	24bb0 <CClassAllocator::Allocate()>
    c50c:	e3a020bd 	mov	r2, #189	; 0xbd
    c510:	e59f1018 	ldr	r1, [pc, #24]	; c530 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x48>
    c514:	e59f0018 	ldr	r0, [pc, #24]	; c534 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x4c>
    c518:	eb0060a2 	bl	247a8 <assertion_failed>
    c51c:	e3a020bd 	mov	r2, #189	; 0xbd
    c520:	e59f1008 	ldr	r1, [pc, #8]	; c530 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x48>
    c524:	e59f000c 	ldr	r0, [pc, #12]	; c538 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x50>
    c528:	eb00609e 	bl	247a8 <assertion_failed>
    c52c:	0005cdf8 	.word	0x0005cdf8
    c530:	000410d0 	.word	0x000410d0
    c534:	00041128 	.word	0x00041128
    c538:	0004115c 	.word	0x0004115c

0000c53c <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>:
    c53c:	e3510010 	cmp	r1, #16
    c540:	e92d4010 	push	{r4, lr}
    c544:	1a000006 	bne	c564 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x28>
    c548:	e59f3034 	ldr	r3, [pc, #52]	; c584 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x48>
    c54c:	e1a01000 	mov	r1, r0
    c550:	e5930000 	ldr	r0, [r3]
    c554:	e3500000 	cmp	r0, #0
    c558:	0a000005 	beq	c574 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x38>
    c55c:	e8bd4010 	pop	{r4, lr}
    c560:	ea0061cd 	b	24c9c <CClassAllocator::Free(void*)>
    c564:	e3a020bd 	mov	r2, #189	; 0xbd
    c568:	e59f1018 	ldr	r1, [pc, #24]	; c588 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x4c>
    c56c:	e59f0018 	ldr	r0, [pc, #24]	; c58c <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x50>
    c570:	eb00608c 	bl	247a8 <assertion_failed>
    c574:	e3a020bd 	mov	r2, #189	; 0xbd
    c578:	e59f1008 	ldr	r1, [pc, #8]	; c588 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x4c>
    c57c:	e59f000c 	ldr	r0, [pc, #12]	; c590 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x54>
    c580:	eb006088 	bl	247a8 <assertion_failed>
    c584:	0005cdf8 	.word	0x0005cdf8
    c588:	000410d0 	.word	0x000410d0
    c58c:	00041128 	.word	0x00041128
    c590:	0004115c 	.word	0x0004115c

0000c594 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    c594:	e92d4010 	push	{r4, lr}
    c598:	e1a04000 	mov	r4, r0
    c59c:	e3a01010 	mov	r1, #16
    c5a0:	ebffffe5 	bl	c53c <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>
    c5a4:	e1a00004 	mov	r0, r4
    c5a8:	e8bd8010 	pop	{r4, pc}

0000c5ac <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)>:
    c5ac:	e92d4070 	push	{r4, r5, r6, lr}
    c5b0:	e59f6040 	ldr	r6, [pc, #64]	; c5f8 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x4c>
    c5b4:	e5963000 	ldr	r3, [r6]
    c5b8:	e3530000 	cmp	r3, #0
    c5bc:	1a000009 	bne	c5e8 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x3c>
    c5c0:	e1a04000 	mov	r4, r0
    c5c4:	e3a0001c 	mov	r0, #28
    c5c8:	eb007a7e 	bl	2afc8 <operator new(unsigned int)>
    c5cc:	e1a05000 	mov	r5, r0
    c5d0:	e1a02004 	mov	r2, r4
    c5d4:	e3a01010 	mov	r1, #16
    c5d8:	e59f301c 	ldr	r3, [pc, #28]	; c5fc <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x50>
    c5dc:	eb00615a 	bl	24b4c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    c5e0:	e5865000 	str	r5, [r6]
    c5e4:	e8bd8070 	pop	{r4, r5, r6, pc}
    c5e8:	e3a020bd 	mov	r2, #189	; 0xbd
    c5ec:	e59f100c 	ldr	r1, [pc, #12]	; c600 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x54>
    c5f0:	e59f000c 	ldr	r0, [pc, #12]	; c604 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x58>
    c5f4:	eb00606b 	bl	247a8 <assertion_failed>
    c5f8:	0005cdf8 	.word	0x0005cdf8
    c5fc:	00041184 	.word	0x00041184
    c600:	000410d0 	.word	0x000410d0
    c604:	00041170 	.word	0x00041170

0000c608 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    c608:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c60c:	e59f7054 	ldr	r7, [pc, #84]	; c668 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    c610:	e24dd00c 	sub	sp, sp, #12
    c614:	e5973000 	ldr	r3, [r7]
    c618:	e3530000 	cmp	r3, #0
    c61c:	1a00000d 	bne	c658 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    c620:	e1a05001 	mov	r5, r1
    c624:	e1a04000 	mov	r4, r0
    c628:	e3a0001c 	mov	r0, #28
    c62c:	eb007a65 	bl	2afc8 <operator new(unsigned int)>
    c630:	e59f1034 	ldr	r1, [pc, #52]	; c66c <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    c634:	e1a03005 	mov	r3, r5
    c638:	e58d1000 	str	r1, [sp]
    c63c:	e1a02004 	mov	r2, r4
    c640:	e3a01010 	mov	r1, #16
    c644:	e1a06000 	mov	r6, r0
    c648:	eb00614b 	bl	24b7c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c64c:	e5876000 	str	r6, [r7]
    c650:	e28dd00c 	add	sp, sp, #12
    c654:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c658:	e3a020bd 	mov	r2, #189	; 0xbd
    c65c:	e59f100c 	ldr	r1, [pc, #12]	; c670 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    c660:	e59f000c 	ldr	r0, [pc, #12]	; c674 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    c664:	eb00604f 	bl	247a8 <assertion_failed>
    c668:	0005cdf8 	.word	0x0005cdf8
    c66c:	00041184 	.word	0x00041184
    c670:	000410d0 	.word	0x000410d0
    c674:	00041170 	.word	0x00041170

0000c678 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    c678:	e12fff1e 	bx	lr

0000c67c <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
    c67c:	e1d000b6 	ldrh	r0, [r0, #6]
    c680:	e2000001 	and	r0, r0, #1
    c684:	e12fff1e 	bx	lr

0000c688 <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
    c688:	e3a02026 	mov	r2, #38	; 0x26
    c68c:	e92d4010 	push	{r4, lr}
    c690:	e59f1004 	ldr	r1, [pc, #4]	; c69c <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x14>
    c694:	e59f0004 	ldr	r0, [pc, #4]	; c6a0 <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x18>
    c698:	eb006042 	bl	247a8 <assertion_failed>
    c69c:	000411c8 	.word	0x000411c8
    c6a0:	00041748 	.word	0x00041748

0000c6a4 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
    c6a4:	e3a0202b 	mov	r2, #43	; 0x2b
    c6a8:	e92d4010 	push	{r4, lr}
    c6ac:	e59f1004 	ldr	r1, [pc, #4]	; c6b8 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x14>
    c6b0:	e59f0004 	ldr	r0, [pc, #4]	; c6bc <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x18>
    c6b4:	eb00603b 	bl	247a8 <assertion_failed>
    c6b8:	000411c8 	.word	0x000411c8
    c6bc:	00041748 	.word	0x00041748

0000c6c0 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
    c6c0:	e3a02031 	mov	r2, #49	; 0x31
    c6c4:	e92d4010 	push	{r4, lr}
    c6c8:	e59f1004 	ldr	r1, [pc, #4]	; c6d4 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x14>
    c6cc:	e59f0004 	ldr	r0, [pc, #4]	; c6d8 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x18>
    c6d0:	eb006034 	bl	247a8 <assertion_failed>
    c6d4:	000411c8 	.word	0x000411c8
    c6d8:	00041748 	.word	0x00041748

0000c6dc <CDWHCIFrameSchedulerNoSplit::WaitForFrame()>:
    c6dc:	e92d4030 	push	{r4, r5, lr}
    c6e0:	e24dd014 	sub	sp, sp, #20
    c6e4:	e1a04000 	mov	r4, r0
    c6e8:	e59f1054 	ldr	r1, [pc, #84]	; c744 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x68>
    c6ec:	e28d0004 	add	r0, sp, #4
    c6f0:	eb000190 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c6f4:	e28d0004 	add	r0, sp, #4
    c6f8:	eb000197 	bl	cd5c <CDWHCIRegister::Read()>
    c6fc:	e59f5044 	ldr	r5, [pc, #68]	; c748 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x6c>
    c700:	e5d43004 	ldrb	r3, [r4, #4]
    c704:	e2800001 	add	r0, r0, #1
    c708:	e0000005 	and	r0, r0, r5
    c70c:	e3530000 	cmp	r3, #0
    c710:	e1c400b6 	strh	r0, [r4, #6]
    c714:	0a000003 	beq	c728 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x4c>
    c718:	e28d0004 	add	r0, sp, #4
    c71c:	eb00018d 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    c720:	e28dd014 	add	sp, sp, #20
    c724:	e8bd8030 	pop	{r4, r5, pc}
    c728:	e28d0004 	add	r0, sp, #4
    c72c:	eb00018a 	bl	cd5c <CDWHCIRegister::Read()>
    c730:	e1d420b6 	ldrh	r2, [r4, #6]
    c734:	e0003005 	and	r3, r0, r5
    c738:	e1530002 	cmp	r3, r2
    c73c:	1afffff9 	bne	c728 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x4c>
    c740:	eafffff4 	b	c718 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x3c>
    c744:	20980408 	.word	0x20980408
    c748:	00003fff 	.word	0x00003fff

0000c74c <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>:
    c74c:	e3a02901 	mov	r2, #16384	; 0x4000
    c750:	e59fc00c 	ldr	ip, [pc, #12]	; c764 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)+0x18>
    c754:	e5c01004 	strb	r1, [r0, #4]
    c758:	e580c000 	str	ip, [r0]
    c75c:	e1c020b6 	strh	r2, [r0, #6]
    c760:	e12fff1e 	bx	lr
    c764:	00041238 	.word	0x00041238

0000c768 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>:
    c768:	e3500008 	cmp	r0, #8
    c76c:	e92d4010 	push	{r4, lr}
    c770:	1a000005 	bne	c78c <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x24>
    c774:	e59f3030 	ldr	r3, [pc, #48]	; c7ac <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x44>
    c778:	e5930000 	ldr	r0, [r3]
    c77c:	e3500000 	cmp	r0, #0
    c780:	0a000005 	beq	c79c <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x34>
    c784:	e8bd4010 	pop	{r4, lr}
    c788:	ea006108 	b	24bb0 <CClassAllocator::Allocate()>
    c78c:	e3a0205a 	mov	r2, #90	; 0x5a
    c790:	e59f1018 	ldr	r1, [pc, #24]	; c7b0 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x48>
    c794:	e59f0018 	ldr	r0, [pc, #24]	; c7b4 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x4c>
    c798:	eb006002 	bl	247a8 <assertion_failed>
    c79c:	e3a0205a 	mov	r2, #90	; 0x5a
    c7a0:	e59f1008 	ldr	r1, [pc, #8]	; c7b0 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x48>
    c7a4:	e59f000c 	ldr	r0, [pc, #12]	; c7b8 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x50>
    c7a8:	eb005ffe 	bl	247a8 <assertion_failed>
    c7ac:	0005cdfc 	.word	0x0005cdfc
    c7b0:	000411c8 	.word	0x000411c8
    c7b4:	000411e4 	.word	0x000411e4
    c7b8:	0004115c 	.word	0x0004115c

0000c7bc <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>:
    c7bc:	e3510008 	cmp	r1, #8
    c7c0:	e92d4010 	push	{r4, lr}
    c7c4:	1a000006 	bne	c7e4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x28>
    c7c8:	e59f3034 	ldr	r3, [pc, #52]	; c804 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x48>
    c7cc:	e1a01000 	mov	r1, r0
    c7d0:	e5930000 	ldr	r0, [r3]
    c7d4:	e3500000 	cmp	r0, #0
    c7d8:	0a000005 	beq	c7f4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x38>
    c7dc:	e8bd4010 	pop	{r4, lr}
    c7e0:	ea00612d 	b	24c9c <CClassAllocator::Free(void*)>
    c7e4:	e3a0205a 	mov	r2, #90	; 0x5a
    c7e8:	e59f1018 	ldr	r1, [pc, #24]	; c808 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x4c>
    c7ec:	e59f0018 	ldr	r0, [pc, #24]	; c80c <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x50>
    c7f0:	eb005fec 	bl	247a8 <assertion_failed>
    c7f4:	e3a0205a 	mov	r2, #90	; 0x5a
    c7f8:	e59f1008 	ldr	r1, [pc, #8]	; c808 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x4c>
    c7fc:	e59f000c 	ldr	r0, [pc, #12]	; c810 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x54>
    c800:	eb005fe8 	bl	247a8 <assertion_failed>
    c804:	0005cdfc 	.word	0x0005cdfc
    c808:	000411c8 	.word	0x000411c8
    c80c:	000411e4 	.word	0x000411e4
    c810:	0004115c 	.word	0x0004115c

0000c814 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    c814:	e92d4010 	push	{r4, lr}
    c818:	e1a04000 	mov	r4, r0
    c81c:	e3a01008 	mov	r1, #8
    c820:	ebffffe5 	bl	c7bc <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>
    c824:	e1a00004 	mov	r0, r4
    c828:	e8bd8010 	pop	{r4, pc}

0000c82c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)>:
    c82c:	e92d4070 	push	{r4, r5, r6, lr}
    c830:	e59f6040 	ldr	r6, [pc, #64]	; c878 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x4c>
    c834:	e5963000 	ldr	r3, [r6]
    c838:	e3530000 	cmp	r3, #0
    c83c:	1a000009 	bne	c868 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x3c>
    c840:	e1a04000 	mov	r4, r0
    c844:	e3a0001c 	mov	r0, #28
    c848:	eb0079de 	bl	2afc8 <operator new(unsigned int)>
    c84c:	e1a05000 	mov	r5, r0
    c850:	e1a02004 	mov	r2, r4
    c854:	e3a01008 	mov	r1, #8
    c858:	e59f301c 	ldr	r3, [pc, #28]	; c87c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x50>
    c85c:	eb0060ba 	bl	24b4c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    c860:	e5865000 	str	r5, [r6]
    c864:	e8bd8070 	pop	{r4, r5, r6, pc}
    c868:	e3a0205a 	mov	r2, #90	; 0x5a
    c86c:	e59f100c 	ldr	r1, [pc, #12]	; c880 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x54>
    c870:	e59f000c 	ldr	r0, [pc, #12]	; c884 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x58>
    c874:	eb005fcb 	bl	247a8 <assertion_failed>
    c878:	0005cdfc 	.word	0x0005cdfc
    c87c:	00041214 	.word	0x00041214
    c880:	000411c8 	.word	0x000411c8
    c884:	00041170 	.word	0x00041170

0000c888 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>:
    c888:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c88c:	e59f7054 	ldr	r7, [pc, #84]	; c8e8 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    c890:	e24dd00c 	sub	sp, sp, #12
    c894:	e5973000 	ldr	r3, [r7]
    c898:	e3530000 	cmp	r3, #0
    c89c:	1a00000d 	bne	c8d8 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    c8a0:	e1a05001 	mov	r5, r1
    c8a4:	e1a04000 	mov	r4, r0
    c8a8:	e3a0001c 	mov	r0, #28
    c8ac:	eb0079c5 	bl	2afc8 <operator new(unsigned int)>
    c8b0:	e59f1034 	ldr	r1, [pc, #52]	; c8ec <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    c8b4:	e1a03005 	mov	r3, r5
    c8b8:	e58d1000 	str	r1, [sp]
    c8bc:	e1a02004 	mov	r2, r4
    c8c0:	e3a01008 	mov	r1, #8
    c8c4:	e1a06000 	mov	r6, r0
    c8c8:	eb0060ab 	bl	24b7c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c8cc:	e5876000 	str	r6, [r7]
    c8d0:	e28dd00c 	add	sp, sp, #12
    c8d4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c8d8:	e3a0205a 	mov	r2, #90	; 0x5a
    c8dc:	e59f100c 	ldr	r1, [pc, #12]	; c8f0 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    c8e0:	e59f000c 	ldr	r0, [pc, #12]	; c8f4 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    c8e4:	eb005faf 	bl	247a8 <assertion_failed>
    c8e8:	0005cdfc 	.word	0x0005cdfc
    c8ec:	00041214 	.word	0x00041214
    c8f0:	000411c8 	.word	0x000411c8
    c8f4:	00041170 	.word	0x00041170

0000c8f8 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    c8f8:	e12fff1e 	bx	lr

0000c8fc <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
    c8fc:	e3a02901 	mov	r2, #16384	; 0x4000
    c900:	e3a03000 	mov	r3, #0
    c904:	e1c021b0 	strh	r2, [r0, #16]
    c908:	e5803008 	str	r3, [r0, #8]
    c90c:	e12fff1e 	bx	lr

0000c910 <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
    c910:	e1d001b0 	ldrh	r0, [r0, #16]
    c914:	e2000001 	and	r0, r0, #1
    c918:	e12fff1e 	bx	lr

0000c91c <CDWHCIFrameSchedulerPeriodic::WaitForFrame()>:
    c91c:	e92d4010 	push	{r4, lr}
    c920:	e1a04000 	mov	r4, r0
    c924:	e24dd010 	sub	sp, sp, #16
    c928:	e59f1058 	ldr	r1, [pc, #88]	; c988 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x6c>
    c92c:	e28d0004 	add	r0, sp, #4
    c930:	eb000100 	bl	cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c934:	e1d431b0 	ldrh	r3, [r4, #16]
    c938:	e3530901 	cmp	r3, #16384	; 0x4000
    c93c:	0a000009 	beq	c968 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x4c>
    c940:	e28d0004 	add	r0, sp, #4
    c944:	eb000104 	bl	cd5c <CDWHCIRegister::Read()>
    c948:	e1d431b0 	ldrh	r3, [r4, #16]
    c94c:	e2000007 	and	r0, r0, #7
    c950:	e1500003 	cmp	r0, r3
    c954:	1afffff9 	bne	c940 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
    c958:	e28d0004 	add	r0, sp, #4
    c95c:	eb0000fd 	bl	cd58 <CDWHCIRegister::~CDWHCIRegister()>
    c960:	e28dd010 	add	sp, sp, #16
    c964:	e8bd8010 	pop	{r4, pc}
    c968:	e28d0004 	add	r0, sp, #4
    c96c:	eb0000fa 	bl	cd5c <CDWHCIRegister::Read()>
    c970:	e2800001 	add	r0, r0, #1
    c974:	e2003007 	and	r3, r0, #7
    c978:	e3530006 	cmp	r3, #6
    c97c:	03a03007 	moveq	r3, #7
    c980:	e1c431b0 	strh	r3, [r4, #16]
    c984:	eaffffed 	b	c940 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
    c988:	20980408 	.word	0x20980408

0000c98c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
    c98c:	e5903008 	ldr	r3, [r0, #8]
    c990:	e92d4010 	push	{r4, lr}
    c994:	e3530003 	cmp	r3, #3
    c998:	0a000016 	beq	c9f8 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x6c>
    c99c:	8a00000f 	bhi	c9e0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x54>
    c9a0:	e3530001 	cmp	r3, #1
    c9a4:	1a000022 	bne	ca34 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xa8>
    c9a8:	e3a01002 	mov	r1, #2
    c9ac:	e1d021b0 	ldrh	r2, [r0, #16]
    c9b0:	e5801008 	str	r1, [r0, #8]
    c9b4:	e3520901 	cmp	r2, #16384	; 0x4000
    c9b8:	0a000019 	beq	ca24 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x98>
    c9bc:	e3520005 	cmp	r2, #5
    c9c0:	13a01003 	movne	r1, #3
    c9c4:	03a01002 	moveq	r1, #2
    c9c8:	e2822002 	add	r2, r2, #2
    c9cc:	e2022007 	and	r2, r2, #7
    c9d0:	e1c021b0 	strh	r2, [r0, #16]
    c9d4:	e580100c 	str	r1, [r0, #12]
    c9d8:	e1a00003 	mov	r0, r3
    c9dc:	e8bd8010 	pop	{r4, pc}
    c9e0:	e2433004 	sub	r3, r3, #4
    c9e4:	e3530001 	cmp	r3, #1
    c9e8:	8a000011 	bhi	ca34 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xa8>
    c9ec:	e3a03000 	mov	r3, #0
    c9f0:	e1a00003 	mov	r0, r3
    c9f4:	e8bd8010 	pop	{r4, pc}
    c9f8:	e1d031b0 	ldrh	r3, [r0, #16]
    c9fc:	e3530901 	cmp	r3, #16384	; 0x4000
    ca00:	12833001 	addne	r3, r3, #1
    ca04:	12033007 	andne	r3, r3, #7
    ca08:	11c031b0 	strhne	r3, [r0, #16]
    ca0c:	13a03001 	movne	r3, #1
    ca10:	1afffff6 	bne	c9f0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x64>
    ca14:	e3a02062 	mov	r2, #98	; 0x62
    ca18:	e59f1024 	ldr	r1, [pc, #36]	; ca44 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xb8>
    ca1c:	e59f0024 	ldr	r0, [pc, #36]	; ca48 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    ca20:	eb005f60 	bl	247a8 <assertion_failed>
    ca24:	e3a02054 	mov	r2, #84	; 0x54
    ca28:	e59f1014 	ldr	r1, [pc, #20]	; ca44 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xb8>
    ca2c:	e59f0014 	ldr	r0, [pc, #20]	; ca48 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    ca30:	eb005f5c 	bl	247a8 <assertion_failed>
    ca34:	e3a0206e 	mov	r2, #110	; 0x6e
    ca38:	e59f1004 	ldr	r1, [pc, #4]	; ca44 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xb8>
    ca3c:	e59f0008 	ldr	r0, [pc, #8]	; ca4c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc0>
    ca40:	eb005f58 	bl	247a8 <assertion_failed>
    ca44:	00041254 	.word	0x00041254
    ca48:	0004126c 	.word	0x0004126c
    ca4c:	00041748 	.word	0x00041748

0000ca50 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
    ca50:	e92d4010 	push	{r4, lr}
    ca54:	e5903008 	ldr	r3, [r0, #8]
    ca58:	e1a04000 	mov	r4, r0
    ca5c:	e3530000 	cmp	r3, #0
    ca60:	e24dd010 	sub	sp, sp, #16
    ca64:	0a000010 	beq	caac <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x5c>
    ca68:	e2433002 	sub	r3, r3, #2
    ca6c:	e3530001 	cmp	r3, #1
    ca70:	8a000022 	bhi	cb00 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xb0>
    ca74:	e3110001 	tst	r1, #1
    ca78:	13a03004 	movne	r3, #4
    ca7c:	15803008 	strne	r3, [r0, #8]
    ca80:	1a000007 	bne	caa4 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    ca84:	e3110060 	tst	r1, #96	; 0x60
    ca88:	1a00000f 	bne	cacc <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x7c>
    ca8c:	e3110010 	tst	r1, #16
    ca90:	0a00001e 	beq	cb10 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xc0>
    ca94:	e59f00a4 	ldr	r0, [pc, #164]	; cb40 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf0>
    ca98:	eb0074e1 	bl	29e24 <CTimer::SimpleusDelay(unsigned int)>
    ca9c:	e3a03005 	mov	r3, #5
    caa0:	e5843008 	str	r3, [r4, #8]
    caa4:	e28dd010 	add	sp, sp, #16
    caa8:	e8bd8010 	pop	{r4, pc}
    caac:	e3110020 	tst	r1, #32
    cab0:	13a03001 	movne	r3, #1
    cab4:	15803008 	strne	r3, [r0, #8]
    cab8:	1afffff9 	bne	caa4 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    cabc:	e3a0207a 	mov	r2, #122	; 0x7a
    cac0:	e59f107c 	ldr	r1, [pc, #124]	; cb44 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    cac4:	e59f007c 	ldr	r0, [pc, #124]	; cb48 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
    cac8:	eb005f36 	bl	247a8 <assertion_failed>
    cacc:	e590300c 	ldr	r3, [r0, #12]
    cad0:	e3530000 	cmp	r3, #0
    cad4:	e2433001 	sub	r3, r3, #1
    cad8:	e580300c 	str	r3, [r0, #12]
    cadc:	13a03003 	movne	r3, #3
    cae0:	15803008 	strne	r3, [r0, #8]
    cae4:	1affffee 	bne	caa4 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    cae8:	e3a03005 	mov	r3, #5
    caec:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    caf0:	e5843008 	str	r3, [r4, #8]
    caf4:	e28dd010 	add	sp, sp, #16
    caf8:	e8bd4010 	pop	{r4, lr}
    cafc:	ea0074c8 	b	29e24 <CTimer::SimpleusDelay(unsigned int)>
    cb00:	e3a020a6 	mov	r2, #166	; 0xa6
    cb04:	e59f1038 	ldr	r1, [pc, #56]	; cb44 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    cb08:	e59f003c 	ldr	r0, [pc, #60]	; cb4c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xfc>
    cb0c:	eb005f25 	bl	247a8 <assertion_failed>
    cb10:	e58d100c 	str	r1, [sp, #12]
    cb14:	eb00680b 	bl	26b48 <CLogger::Get()>
    cb18:	e59d100c 	ldr	r1, [sp, #12]
    cb1c:	e3a02001 	mov	r2, #1
    cb20:	e58d1000 	str	r1, [sp]
    cb24:	e59f3024 	ldr	r3, [pc, #36]	; cb50 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x100>
    cb28:	e59f1024 	ldr	r1, [pc, #36]	; cb54 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x104>
    cb2c:	eb006747 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cb30:	e3a020a1 	mov	r2, #161	; 0xa1
    cb34:	e59f1008 	ldr	r1, [pc, #8]	; cb44 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    cb38:	e59f000c 	ldr	r0, [pc, #12]	; cb4c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xfc>
    cb3c:	eb005f19 	bl	247a8 <assertion_failed>
    cb40:	00000271 	.word	0x00000271
    cb44:	00041254 	.word	0x00041254
    cb48:	000410e8 	.word	0x000410e8
    cb4c:	00041748 	.word	0x00041748
    cb50:	0004110c 	.word	0x0004110c
    cb54:	00041120 	.word	0x00041120

0000cb58 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
    cb58:	e59f303c 	ldr	r3, [pc, #60]	; cb9c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x44>
    cb5c:	e92d4010 	push	{r4, lr}
    cb60:	e5803000 	str	r3, [r0]
    cb64:	e1a04000 	mov	r4, r0
    cb68:	eb0074db 	bl	29edc <CTimer::Get()>
    cb6c:	e3a02006 	mov	r2, #6
    cb70:	e3a03901 	mov	r3, #16384	; 0x4000
    cb74:	e3500000 	cmp	r0, #0
    cb78:	e9840005 	stmib	r4, {r0, r2}
    cb7c:	e1c431b0 	strh	r3, [r4, #16]
    cb80:	0a000001 	beq	cb8c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x34>
    cb84:	e1a00004 	mov	r0, r4
    cb88:	e8bd8010 	pop	{r4, pc}
    cb8c:	e3a02034 	mov	r2, #52	; 0x34
    cb90:	e59f1008 	ldr	r1, [pc, #8]	; cba0 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x48>
    cb94:	e59f0008 	ldr	r0, [pc, #8]	; cba4 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x4c>
    cb98:	eb005f02 	bl	247a8 <assertion_failed>
    cb9c:	000412e4 	.word	0x000412e4
    cba0:	00041254 	.word	0x00041254
    cba4:	00040b94 	.word	0x00040b94

0000cba8 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>:
    cba8:	e3500014 	cmp	r0, #20
    cbac:	e92d4010 	push	{r4, lr}
    cbb0:	1a000005 	bne	cbcc <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x24>
    cbb4:	e59f3030 	ldr	r3, [pc, #48]	; cbec <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x44>
    cbb8:	e5930000 	ldr	r0, [r3]
    cbbc:	e3500000 	cmp	r0, #0
    cbc0:	0a000005 	beq	cbdc <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x34>
    cbc4:	e8bd4010 	pop	{r4, lr}
    cbc8:	ea005ff8 	b	24bb0 <CClassAllocator::Allocate()>
    cbcc:	e3a020e2 	mov	r2, #226	; 0xe2
    cbd0:	e59f1018 	ldr	r1, [pc, #24]	; cbf0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x48>
    cbd4:	e59f0018 	ldr	r0, [pc, #24]	; cbf4 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x4c>
    cbd8:	eb005ef2 	bl	247a8 <assertion_failed>
    cbdc:	e3a020e2 	mov	r2, #226	; 0xe2
    cbe0:	e59f1008 	ldr	r1, [pc, #8]	; cbf0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x48>
    cbe4:	e59f000c 	ldr	r0, [pc, #12]	; cbf8 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x50>
    cbe8:	eb005eee 	bl	247a8 <assertion_failed>
    cbec:	0005ce00 	.word	0x0005ce00
    cbf0:	00041254 	.word	0x00041254
    cbf4:	0004128c 	.word	0x0004128c
    cbf8:	0004115c 	.word	0x0004115c

0000cbfc <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>:
    cbfc:	e3510014 	cmp	r1, #20
    cc00:	e92d4010 	push	{r4, lr}
    cc04:	1a000006 	bne	cc24 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x28>
    cc08:	e59f3034 	ldr	r3, [pc, #52]	; cc44 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x48>
    cc0c:	e1a01000 	mov	r1, r0
    cc10:	e5930000 	ldr	r0, [r3]
    cc14:	e3500000 	cmp	r0, #0
    cc18:	0a000005 	beq	cc34 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x38>
    cc1c:	e8bd4010 	pop	{r4, lr}
    cc20:	ea00601d 	b	24c9c <CClassAllocator::Free(void*)>
    cc24:	e3a020e2 	mov	r2, #226	; 0xe2
    cc28:	e59f1018 	ldr	r1, [pc, #24]	; cc48 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x4c>
    cc2c:	e59f0018 	ldr	r0, [pc, #24]	; cc4c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x50>
    cc30:	eb005edc 	bl	247a8 <assertion_failed>
    cc34:	e3a020e2 	mov	r2, #226	; 0xe2
    cc38:	e59f1008 	ldr	r1, [pc, #8]	; cc48 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x4c>
    cc3c:	e59f000c 	ldr	r0, [pc, #12]	; cc50 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x54>
    cc40:	eb005ed8 	bl	247a8 <assertion_failed>
    cc44:	0005ce00 	.word	0x0005ce00
    cc48:	00041254 	.word	0x00041254
    cc4c:	0004128c 	.word	0x0004128c
    cc50:	0004115c 	.word	0x0004115c

0000cc54 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    cc54:	e92d4010 	push	{r4, lr}
    cc58:	e1a04000 	mov	r4, r0
    cc5c:	e3a01014 	mov	r1, #20
    cc60:	ebffffe5 	bl	cbfc <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>
    cc64:	e1a00004 	mov	r0, r4
    cc68:	e8bd8010 	pop	{r4, pc}

0000cc6c <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)>:
    cc6c:	e92d4070 	push	{r4, r5, r6, lr}
    cc70:	e59f6040 	ldr	r6, [pc, #64]	; ccb8 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x4c>
    cc74:	e5963000 	ldr	r3, [r6]
    cc78:	e3530000 	cmp	r3, #0
    cc7c:	1a000009 	bne	cca8 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x3c>
    cc80:	e1a04000 	mov	r4, r0
    cc84:	e3a0001c 	mov	r0, #28
    cc88:	eb0078ce 	bl	2afc8 <operator new(unsigned int)>
    cc8c:	e1a05000 	mov	r5, r0
    cc90:	e1a02004 	mov	r2, r4
    cc94:	e3a01014 	mov	r1, #20
    cc98:	e59f301c 	ldr	r3, [pc, #28]	; ccbc <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x50>
    cc9c:	eb005faa 	bl	24b4c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    cca0:	e5865000 	str	r5, [r6]
    cca4:	e8bd8070 	pop	{r4, r5, r6, pc}
    cca8:	e3a020e2 	mov	r2, #226	; 0xe2
    ccac:	e59f100c 	ldr	r1, [pc, #12]	; ccc0 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x54>
    ccb0:	e59f000c 	ldr	r0, [pc, #12]	; ccc4 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x58>
    ccb4:	eb005ebb 	bl	247a8 <assertion_failed>
    ccb8:	0005ce00 	.word	0x0005ce00
    ccbc:	000412bc 	.word	0x000412bc
    ccc0:	00041254 	.word	0x00041254
    ccc4:	00041170 	.word	0x00041170

0000ccc8 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    ccc8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    cccc:	e59f7054 	ldr	r7, [pc, #84]	; cd28 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    ccd0:	e24dd00c 	sub	sp, sp, #12
    ccd4:	e5973000 	ldr	r3, [r7]
    ccd8:	e3530000 	cmp	r3, #0
    ccdc:	1a00000d 	bne	cd18 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    cce0:	e1a05001 	mov	r5, r1
    cce4:	e1a04000 	mov	r4, r0
    cce8:	e3a0001c 	mov	r0, #28
    ccec:	eb0078b5 	bl	2afc8 <operator new(unsigned int)>
    ccf0:	e59f1034 	ldr	r1, [pc, #52]	; cd2c <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    ccf4:	e1a03005 	mov	r3, r5
    ccf8:	e58d1000 	str	r1, [sp]
    ccfc:	e1a02004 	mov	r2, r4
    cd00:	e3a01014 	mov	r1, #20
    cd04:	e1a06000 	mov	r6, r0
    cd08:	eb005f9b 	bl	24b7c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    cd0c:	e5876000 	str	r6, [r7]
    cd10:	e28dd00c 	add	sp, sp, #12
    cd14:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    cd18:	e3a020e2 	mov	r2, #226	; 0xe2
    cd1c:	e59f100c 	ldr	r1, [pc, #12]	; cd30 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    cd20:	e59f000c 	ldr	r0, [pc, #12]	; cd34 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    cd24:	eb005e9f 	bl	247a8 <assertion_failed>
    cd28:	0005ce00 	.word	0x0005ce00
    cd2c:	000412bc 	.word	0x000412bc
    cd30:	00041254 	.word	0x00041254
    cd34:	00041170 	.word	0x00041170

0000cd38 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
    cd38:	e3a02000 	mov	r2, #0
    cd3c:	e5801004 	str	r1, [r0, #4]
    cd40:	e5c02000 	strb	r2, [r0]
    cd44:	e12fff1e 	bx	lr

0000cd48 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
    cd48:	e3a0c001 	mov	ip, #1
    cd4c:	e9800006 	stmib	r0, {r1, r2}
    cd50:	e5c0c000 	strb	ip, [r0]
    cd54:	e12fff1e 	bx	lr

0000cd58 <CDWHCIRegister::~CDWHCIRegister()>:
    cd58:	e12fff1e 	bx	lr

0000cd5c <CDWHCIRegister::Read()>:
    cd5c:	e3a02001 	mov	r2, #1
    cd60:	e5903004 	ldr	r3, [r0, #4]
    cd64:	e5933000 	ldr	r3, [r3]
    cd68:	e5c02000 	strb	r2, [r0]
    cd6c:	e5803008 	str	r3, [r0, #8]
    cd70:	e1a00003 	mov	r0, r3
    cd74:	e12fff1e 	bx	lr

0000cd78 <CDWHCIRegister::Write()>:
    cd78:	e5d03000 	ldrb	r3, [r0]
    cd7c:	e3530000 	cmp	r3, #0
    cd80:	0a000003 	beq	cd94 <CDWHCIRegister::Write()+0x1c>
    cd84:	e5902008 	ldr	r2, [r0, #8]
    cd88:	e5903004 	ldr	r3, [r0, #4]
    cd8c:	e5832000 	str	r2, [r3]
    cd90:	e12fff1e 	bx	lr
    cd94:	e3a02035 	mov	r2, #53	; 0x35
    cd98:	e92d4010 	push	{r4, lr}
    cd9c:	e59f1004 	ldr	r1, [pc, #4]	; cda8 <CDWHCIRegister::Write()+0x30>
    cda0:	e59f0004 	ldr	r0, [pc, #4]	; cdac <CDWHCIRegister::Write()+0x34>
    cda4:	eb005e7f 	bl	247a8 <assertion_failed>
    cda8:	00041300 	.word	0x00041300
    cdac:	00041314 	.word	0x00041314

0000cdb0 <CDWHCIRegister::Get() const>:
    cdb0:	e5d03000 	ldrb	r3, [r0]
    cdb4:	e3530000 	cmp	r3, #0
    cdb8:	0a000001 	beq	cdc4 <CDWHCIRegister::Get() const+0x14>
    cdbc:	e5900008 	ldr	r0, [r0, #8]
    cdc0:	e12fff1e 	bx	lr
    cdc4:	e3a0203b 	mov	r2, #59	; 0x3b
    cdc8:	e92d4010 	push	{r4, lr}
    cdcc:	e59f1004 	ldr	r1, [pc, #4]	; cdd8 <CDWHCIRegister::Get() const+0x28>
    cdd0:	e59f0004 	ldr	r0, [pc, #4]	; cddc <CDWHCIRegister::Get() const+0x2c>
    cdd4:	eb005e73 	bl	247a8 <assertion_failed>
    cdd8:	00041300 	.word	0x00041300
    cddc:	00041314 	.word	0x00041314

0000cde0 <CDWHCIRegister::Set(unsigned int)>:
    cde0:	e3a03001 	mov	r3, #1
    cde4:	e5801008 	str	r1, [r0, #8]
    cde8:	e5c03000 	strb	r3, [r0]
    cdec:	e12fff1e 	bx	lr

0000cdf0 <CDWHCIRegister::IsSet(unsigned int) const>:
    cdf0:	e5d03000 	ldrb	r3, [r0]
    cdf4:	e3530000 	cmp	r3, #0
    cdf8:	0a000004 	beq	ce10 <CDWHCIRegister::IsSet(unsigned int) const+0x20>
    cdfc:	e5903008 	ldr	r3, [r0, #8]
    ce00:	e1110003 	tst	r1, r3
    ce04:	13a00001 	movne	r0, #1
    ce08:	03a00000 	moveq	r0, #0
    ce0c:	e12fff1e 	bx	lr
    ce10:	e3a02047 	mov	r2, #71	; 0x47
    ce14:	e92d4010 	push	{r4, lr}
    ce18:	e59f1004 	ldr	r1, [pc, #4]	; ce24 <CDWHCIRegister::IsSet(unsigned int) const+0x34>
    ce1c:	e59f0004 	ldr	r0, [pc, #4]	; ce28 <CDWHCIRegister::IsSet(unsigned int) const+0x38>
    ce20:	eb005e60 	bl	247a8 <assertion_failed>
    ce24:	00041300 	.word	0x00041300
    ce28:	00041314 	.word	0x00041314

0000ce2c <CDWHCIRegister::And(unsigned int)>:
    ce2c:	e5d03000 	ldrb	r3, [r0]
    ce30:	e3530000 	cmp	r3, #0
    ce34:	0a000003 	beq	ce48 <CDWHCIRegister::And(unsigned int)+0x1c>
    ce38:	e5903008 	ldr	r3, [r0, #8]
    ce3c:	e0011003 	and	r1, r1, r3
    ce40:	e5801008 	str	r1, [r0, #8]
    ce44:	e12fff1e 	bx	lr
    ce48:	e3a0204d 	mov	r2, #77	; 0x4d
    ce4c:	e92d4010 	push	{r4, lr}
    ce50:	e59f1004 	ldr	r1, [pc, #4]	; ce5c <CDWHCIRegister::And(unsigned int)+0x30>
    ce54:	e59f0004 	ldr	r0, [pc, #4]	; ce60 <CDWHCIRegister::And(unsigned int)+0x34>
    ce58:	eb005e52 	bl	247a8 <assertion_failed>
    ce5c:	00041300 	.word	0x00041300
    ce60:	00041314 	.word	0x00041314

0000ce64 <CDWHCIRegister::Or(unsigned int)>:
    ce64:	e5d03000 	ldrb	r3, [r0]
    ce68:	e3530000 	cmp	r3, #0
    ce6c:	0a000003 	beq	ce80 <CDWHCIRegister::Or(unsigned int)+0x1c>
    ce70:	e5903008 	ldr	r3, [r0, #8]
    ce74:	e1831001 	orr	r1, r3, r1
    ce78:	e5801008 	str	r1, [r0, #8]
    ce7c:	e12fff1e 	bx	lr
    ce80:	e3a02053 	mov	r2, #83	; 0x53
    ce84:	e92d4010 	push	{r4, lr}
    ce88:	e59f1004 	ldr	r1, [pc, #4]	; ce94 <CDWHCIRegister::Or(unsigned int)+0x30>
    ce8c:	e59f0004 	ldr	r0, [pc, #4]	; ce98 <CDWHCIRegister::Or(unsigned int)+0x34>
    ce90:	eb005e44 	bl	247a8 <assertion_failed>
    ce94:	00041300 	.word	0x00041300
    ce98:	00041314 	.word	0x00041314

0000ce9c <CDWHCIRegister::ClearBit(unsigned int)>:
    ce9c:	e5d03000 	ldrb	r3, [r0]
    cea0:	e92d4010 	push	{r4, lr}
    cea4:	e3530000 	cmp	r3, #0
    cea8:	0a000006 	beq	cec8 <CDWHCIRegister::ClearBit(unsigned int)+0x2c>
    ceac:	e351001f 	cmp	r1, #31
    ceb0:	8a000008 	bhi	ced8 <CDWHCIRegister::ClearBit(unsigned int)+0x3c>
    ceb4:	e3a02001 	mov	r2, #1
    ceb8:	e5903008 	ldr	r3, [r0, #8]
    cebc:	e1c31112 	bic	r1, r3, r2, lsl r1
    cec0:	e5801008 	str	r1, [r0, #8]
    cec4:	e8bd8010 	pop	{r4, pc}
    cec8:	e3a02059 	mov	r2, #89	; 0x59
    cecc:	e59f1014 	ldr	r1, [pc, #20]	; cee8 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    ced0:	e59f0014 	ldr	r0, [pc, #20]	; ceec <CDWHCIRegister::ClearBit(unsigned int)+0x50>
    ced4:	eb005e33 	bl	247a8 <assertion_failed>
    ced8:	e3a0205a 	mov	r2, #90	; 0x5a
    cedc:	e59f1004 	ldr	r1, [pc, #4]	; cee8 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    cee0:	e59f0008 	ldr	r0, [pc, #8]	; cef0 <CDWHCIRegister::ClearBit(unsigned int)+0x54>
    cee4:	eb005e2f 	bl	247a8 <assertion_failed>
    cee8:	00041300 	.word	0x00041300
    ceec:	00041314 	.word	0x00041314
    cef0:	00041320 	.word	0x00041320

0000cef4 <CDWHCIRegister::SetBit(unsigned int)>:
    cef4:	e5d03000 	ldrb	r3, [r0]
    cef8:	e92d4010 	push	{r4, lr}
    cefc:	e3530000 	cmp	r3, #0
    cf00:	0a000006 	beq	cf20 <CDWHCIRegister::SetBit(unsigned int)+0x2c>
    cf04:	e351001f 	cmp	r1, #31
    cf08:	8a000008 	bhi	cf30 <CDWHCIRegister::SetBit(unsigned int)+0x3c>
    cf0c:	e3a02001 	mov	r2, #1
    cf10:	e5903008 	ldr	r3, [r0, #8]
    cf14:	e1831112 	orr	r1, r3, r2, lsl r1
    cf18:	e5801008 	str	r1, [r0, #8]
    cf1c:	e8bd8010 	pop	{r4, pc}
    cf20:	e3a02060 	mov	r2, #96	; 0x60
    cf24:	e59f1014 	ldr	r1, [pc, #20]	; cf40 <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    cf28:	e59f0014 	ldr	r0, [pc, #20]	; cf44 <CDWHCIRegister::SetBit(unsigned int)+0x50>
    cf2c:	eb005e1d 	bl	247a8 <assertion_failed>
    cf30:	e3a02061 	mov	r2, #97	; 0x61
    cf34:	e59f1004 	ldr	r1, [pc, #4]	; cf40 <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    cf38:	e59f0008 	ldr	r0, [pc, #8]	; cf48 <CDWHCIRegister::SetBit(unsigned int)+0x54>
    cf3c:	eb005e19 	bl	247a8 <assertion_failed>
    cf40:	00041300 	.word	0x00041300
    cf44:	00041314 	.word	0x00041314
    cf48:	00041320 	.word	0x00041320

0000cf4c <CDWHCIRegister::ClearAll()>:
    cf4c:	e3a02000 	mov	r2, #0
    cf50:	e3a03001 	mov	r3, #1
    cf54:	e5802008 	str	r2, [r0, #8]
    cf58:	e5c03000 	strb	r3, [r0]
    cf5c:	e12fff1e 	bx	lr

0000cf60 <CDWHCIRegister::SetAll()>:
    cf60:	e3e02000 	mvn	r2, #0
    cf64:	e3a03001 	mov	r3, #1
    cf68:	e5802008 	str	r2, [r0, #8]
    cf6c:	e5c03000 	strb	r3, [r0]
    cf70:	e12fff1e 	bx	lr

0000cf74 <CDWHCIRegister::Dump() const>:
    cf74:	e92d4010 	push	{r4, lr}
    cf78:	e5d03000 	ldrb	r3, [r0]
    cf7c:	e1a04000 	mov	r4, r0
    cf80:	e3530000 	cmp	r3, #0
    cf84:	e24dd008 	sub	sp, sp, #8
    cf88:	0a00000c 	beq	cfc0 <CDWHCIRegister::Dump() const+0x4c>
    cf8c:	eb0066ed 	bl	26b48 <CLogger::Get()>
    cf90:	e5943004 	ldr	r3, [r4, #4]
    cf94:	e5942008 	ldr	r2, [r4, #8]
    cf98:	e1a03a03 	lsl	r3, r3, #20
    cf9c:	e1a03a23 	lsr	r3, r3, #20
    cfa0:	e58d3000 	str	r3, [sp]
    cfa4:	e58d2004 	str	r2, [sp, #4]
    cfa8:	e59f303c 	ldr	r3, [pc, #60]	; cfec <CDWHCIRegister::Dump() const+0x78>
    cfac:	e3a02004 	mov	r2, #4
    cfb0:	e59f1038 	ldr	r1, [pc, #56]	; cff0 <CDWHCIRegister::Dump() const+0x7c>
    cfb4:	eb006625 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cfb8:	e28dd008 	add	sp, sp, #8
    cfbc:	e8bd8010 	pop	{r4, pc}
    cfc0:	eb0066e0 	bl	26b48 <CLogger::Get()>
    cfc4:	e5942004 	ldr	r2, [r4, #4]
    cfc8:	e59f3024 	ldr	r3, [pc, #36]	; cff4 <CDWHCIRegister::Dump() const+0x80>
    cfcc:	e1a02a02 	lsl	r2, r2, #20
    cfd0:	e1a02a22 	lsr	r2, r2, #20
    cfd4:	e58d2000 	str	r2, [sp]
    cfd8:	e59f1010 	ldr	r1, [pc, #16]	; cff0 <CDWHCIRegister::Dump() const+0x7c>
    cfdc:	e3a02004 	mov	r2, #4
    cfe0:	eb00661a 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cfe4:	e28dd008 	add	sp, sp, #8
    cfe8:	e8bd8010 	pop	{r4, pc}
    cfec:	0004133c 	.word	0x0004133c
    cff0:	00041358 	.word	0x00041358
    cff4:	00041360 	.word	0x00041360

0000cff8 <CDWHCIRootPort::~CDWHCIRootPort()>:
    cff8:	e92d4010 	push	{r4, lr}
    cffc:	e1a04000 	mov	r4, r0
    d000:	e5900008 	ldr	r0, [r0, #8]
    d004:	e59f301c 	ldr	r3, [pc, #28]	; d028 <CDWHCIRootPort::~CDWHCIRootPort()+0x30>
    d008:	e3500000 	cmp	r0, #0
    d00c:	e5843000 	str	r3, [r4]
    d010:	0a000002 	beq	d020 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    d014:	e5903000 	ldr	r3, [r0]
    d018:	e5933004 	ldr	r3, [r3, #4]
    d01c:	e12fff33 	blx	r3
    d020:	e1a00004 	mov	r0, r4
    d024:	e8bd8010 	pop	{r4, pc}
    d028:	0004144c 	.word	0x0004144c

0000d02c <CDWHCIRootPort::~CDWHCIRootPort()>:
    d02c:	e92d4010 	push	{r4, lr}
    d030:	e1a04000 	mov	r4, r0
    d034:	e5900008 	ldr	r0, [r0, #8]
    d038:	e59f3028 	ldr	r3, [pc, #40]	; d068 <CDWHCIRootPort::~CDWHCIRootPort()+0x3c>
    d03c:	e3500000 	cmp	r0, #0
    d040:	e5843000 	str	r3, [r4]
    d044:	0a000002 	beq	d054 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    d048:	e5903000 	ldr	r3, [r0]
    d04c:	e5933004 	ldr	r3, [r3, #4]
    d050:	e12fff33 	blx	r3
    d054:	e1a00004 	mov	r0, r4
    d058:	e3a0100c 	mov	r1, #12
    d05c:	eb0077e7 	bl	2b000 <operator delete(void*, unsigned int)>
    d060:	e1a00004 	mov	r0, r4
    d064:	e8bd8010 	pop	{r4, pc}
    d068:	0004144c 	.word	0x0004144c

0000d06c <CDWHCIRootPort::RemoveDevice()>:
    d06c:	e92d4010 	push	{r4, lr}
    d070:	e1a04000 	mov	r4, r0
    d074:	e5900004 	ldr	r0, [r0, #4]
    d078:	e3500000 	cmp	r0, #0
    d07c:	0a00000b 	beq	d0b0 <CDWHCIRootPort::RemoveDevice()+0x44>
    d080:	e3a01000 	mov	r1, #0
    d084:	ebfff361 	bl	9e10 <CDWHCIDevice::DisableRootPort(bool)>
    d088:	e5940008 	ldr	r0, [r4, #8]
    d08c:	e3500000 	cmp	r0, #0
    d090:	0a000002 	beq	d0a0 <CDWHCIRootPort::RemoveDevice()+0x34>
    d094:	e5903000 	ldr	r3, [r0]
    d098:	e5933004 	ldr	r3, [r3, #4]
    d09c:	e12fff33 	blx	r3
    d0a0:	e3a03000 	mov	r3, #0
    d0a4:	e3a00001 	mov	r0, #1
    d0a8:	e5843008 	str	r3, [r4, #8]
    d0ac:	e8bd8010 	pop	{r4, pc}
    d0b0:	e3a0206d 	mov	r2, #109	; 0x6d
    d0b4:	e59f1004 	ldr	r1, [pc, #4]	; d0c0 <CDWHCIRootPort::RemoveDevice()+0x54>
    d0b8:	e59f0004 	ldr	r0, [pc, #4]	; d0c4 <CDWHCIRootPort::RemoveDevice()+0x58>
    d0bc:	eb005db9 	bl	247a8 <assertion_failed>
    d0c0:	00041380 	.word	0x00041380
    d0c4:	00041394 	.word	0x00041394

0000d0c8 <CDWHCIRootPort::ReScanDevices()>:
    d0c8:	e92d4010 	push	{r4, lr}
    d0cc:	e5904008 	ldr	r4, [r0, #8]
    d0d0:	e3540000 	cmp	r4, #0
    d0d4:	0a000002 	beq	d0e4 <CDWHCIRootPort::ReScanDevices()+0x1c>
    d0d8:	e1a00004 	mov	r0, r4
    d0dc:	e8bd4010 	pop	{r4, lr}
    d0e0:	ea0003fb 	b	e0d4 <CUSBDevice::ReScanDevices()>
    d0e4:	eb006697 	bl	26b48 <CLogger::Get()>
    d0e8:	e3a02002 	mov	r2, #2
    d0ec:	e59f300c 	ldr	r3, [pc, #12]	; d100 <CDWHCIRootPort::ReScanDevices()+0x38>
    d0f0:	e59f100c 	ldr	r1, [pc, #12]	; d104 <CDWHCIRootPort::ReScanDevices()+0x3c>
    d0f4:	eb0065d5 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d0f8:	e1a00004 	mov	r0, r4
    d0fc:	e8bd8010 	pop	{r4, pc}
    d100:	000413a4 	.word	0x000413a4
    d104:	0004145c 	.word	0x0004145c

0000d108 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
    d108:	e3a02000 	mov	r2, #0
    d10c:	e59fc024 	ldr	ip, [pc, #36]	; d138 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x30>
    d110:	e1510002 	cmp	r1, r2
    d114:	e5801004 	str	r1, [r0, #4]
    d118:	e580c000 	str	ip, [r0]
    d11c:	e5802008 	str	r2, [r0, #8]
    d120:	112fff1e 	bxne	lr
    d124:	e3a0201f 	mov	r2, #31
    d128:	e92d4010 	push	{r4, lr}
    d12c:	e59f1008 	ldr	r1, [pc, #8]	; d13c <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x34>
    d130:	e59f0008 	ldr	r0, [pc, #8]	; d140 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x38>
    d134:	eb005d9b 	bl	247a8 <assertion_failed>
    d138:	0004144c 	.word	0x0004144c
    d13c:	00041380 	.word	0x00041380
    d140:	00041394 	.word	0x00041394

0000d144 <CDWHCIRootPort::Initialize()>:
    d144:	e92d4070 	push	{r4, r5, r6, lr}
    d148:	e1a04000 	mov	r4, r0
    d14c:	e5900004 	ldr	r0, [r0, #4]
    d150:	e3500000 	cmp	r0, #0
    d154:	0a00003d 	beq	d250 <CDWHCIRootPort::Initialize()+0x10c>
    d158:	ebfff30a 	bl	9d88 <CDWHCIDevice::GetPortSpeed()>
    d15c:	e3500004 	cmp	r0, #4
    d160:	e1a05000 	mov	r5, r0
    d164:	0a000031 	beq	d230 <CDWHCIRootPort::Initialize()+0xec>
    d168:	e5943008 	ldr	r3, [r4, #8]
    d16c:	e3530000 	cmp	r3, #0
    d170:	1a00003a 	bne	d260 <CDWHCIRootPort::Initialize()+0x11c>
    d174:	e3a00058 	mov	r0, #88	; 0x58
    d178:	eb007792 	bl	2afc8 <operator new(unsigned int)>
    d17c:	e1a06000 	mov	r6, r0
    d180:	e1a02005 	mov	r2, r5
    d184:	e1a03004 	mov	r3, r4
    d188:	e5941004 	ldr	r1, [r4, #4]
    d18c:	eb000349 	bl	deb8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>
    d190:	e1a00006 	mov	r0, r6
    d194:	e5846008 	str	r6, [r4, #8]
    d198:	eb0004f7 	bl	e57c <CUSBDevice::Initialize()>
    d19c:	e3500000 	cmp	r0, #0
    d1a0:	e5940008 	ldr	r0, [r4, #8]
    d1a4:	0a00000f 	beq	d1e8 <CDWHCIRootPort::Initialize()+0xa4>
    d1a8:	e5903000 	ldr	r3, [r0]
    d1ac:	e593300c 	ldr	r3, [r3, #12]
    d1b0:	e12fff33 	blx	r3
    d1b4:	e2505000 	subs	r5, r0, #0
    d1b8:	0a000013 	beq	d20c <CDWHCIRootPort::Initialize()+0xc8>
    d1bc:	eb006661 	bl	26b48 <CLogger::Get()>
    d1c0:	e3a02004 	mov	r2, #4
    d1c4:	e59f30d4 	ldr	r3, [pc, #212]	; d2a0 <CDWHCIRootPort::Initialize()+0x15c>
    d1c8:	e59f10d4 	ldr	r1, [pc, #212]	; d2a4 <CDWHCIRootPort::Initialize()+0x160>
    d1cc:	eb00659f 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d1d0:	e5940004 	ldr	r0, [r4, #4]
    d1d4:	ebfff2fe 	bl	9dd4 <CDWHCIDevice::OvercurrentDetected()>
    d1d8:	e3500000 	cmp	r0, #0
    d1dc:	1a000023 	bne	d270 <CDWHCIRootPort::Initialize()+0x12c>
    d1e0:	e1a00005 	mov	r0, r5
    d1e4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d1e8:	e3500000 	cmp	r0, #0
    d1ec:	0a000002 	beq	d1fc <CDWHCIRootPort::Initialize()+0xb8>
    d1f0:	e5903000 	ldr	r3, [r0]
    d1f4:	e5933004 	ldr	r3, [r3, #4]
    d1f8:	e12fff33 	blx	r3
    d1fc:	e3a05000 	mov	r5, #0
    d200:	e1a00005 	mov	r0, r5
    d204:	e5845008 	str	r5, [r4, #8]
    d208:	e8bd8070 	pop	{r4, r5, r6, pc}
    d20c:	eb00664d 	bl	26b48 <CLogger::Get()>
    d210:	e3a02002 	mov	r2, #2
    d214:	e59f308c 	ldr	r3, [pc, #140]	; d2a8 <CDWHCIRootPort::Initialize()+0x164>
    d218:	e59f1084 	ldr	r1, [pc, #132]	; d2a4 <CDWHCIRootPort::Initialize()+0x160>
    d21c:	eb00658b 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d220:	e5940008 	ldr	r0, [r4, #8]
    d224:	e3500000 	cmp	r0, #0
    d228:	1afffff0 	bne	d1f0 <CDWHCIRootPort::Initialize()+0xac>
    d22c:	eafffff2 	b	d1fc <CDWHCIRootPort::Initialize()+0xb8>
    d230:	e3a05000 	mov	r5, #0
    d234:	eb006643 	bl	26b48 <CLogger::Get()>
    d238:	e3a02001 	mov	r2, #1
    d23c:	e59f3068 	ldr	r3, [pc, #104]	; d2ac <CDWHCIRootPort::Initialize()+0x168>
    d240:	e59f105c 	ldr	r1, [pc, #92]	; d2a4 <CDWHCIRootPort::Initialize()+0x160>
    d244:	eb006581 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d248:	e1a00005 	mov	r0, r5
    d24c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d250:	e3a0202c 	mov	r2, #44	; 0x2c
    d254:	e59f1054 	ldr	r1, [pc, #84]	; d2b0 <CDWHCIRootPort::Initialize()+0x16c>
    d258:	e59f0054 	ldr	r0, [pc, #84]	; d2b4 <CDWHCIRootPort::Initialize()+0x170>
    d25c:	eb005d51 	bl	247a8 <assertion_failed>
    d260:	e3a02036 	mov	r2, #54	; 0x36
    d264:	e59f1044 	ldr	r1, [pc, #68]	; d2b0 <CDWHCIRootPort::Initialize()+0x16c>
    d268:	e59f0048 	ldr	r0, [pc, #72]	; d2b8 <CDWHCIRootPort::Initialize()+0x174>
    d26c:	eb005d4d 	bl	247a8 <assertion_failed>
    d270:	eb006634 	bl	26b48 <CLogger::Get()>
    d274:	e3a02001 	mov	r2, #1
    d278:	e59f303c 	ldr	r3, [pc, #60]	; d2bc <CDWHCIRootPort::Initialize()+0x178>
    d27c:	e59f1020 	ldr	r1, [pc, #32]	; d2a4 <CDWHCIRootPort::Initialize()+0x160>
    d280:	eb006572 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d284:	e5940004 	ldr	r0, [r4, #4]
    d288:	e3a01001 	mov	r1, #1
    d28c:	ebfff2df 	bl	9e10 <CDWHCIDevice::DisableRootPort(bool)>
    d290:	e5940008 	ldr	r0, [r4, #8]
    d294:	e3500000 	cmp	r0, #0
    d298:	1affffd4 	bne	d1f0 <CDWHCIRootPort::Initialize()+0xac>
    d29c:	eaffffd6 	b	d1fc <CDWHCIRootPort::Initialize()+0xb8>
    d2a0:	00041418 	.word	0x00041418
    d2a4:	0004145c 	.word	0x0004145c
    d2a8:	00041400 	.word	0x00041400
    d2ac:	000413d4 	.word	0x000413d4
    d2b0:	00041380 	.word	0x00041380
    d2b4:	00041394 	.word	0x00041394
    d2b8:	000413f0 	.word	0x000413f0
    d2bc:	0004142c 	.word	0x0004142c

0000d2c0 <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    d2c0:	e92d4010 	push	{r4, lr}
    d2c4:	e1a04000 	mov	r4, r0
    d2c8:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    d2cc:	e3500000 	cmp	r0, #0
    d2d0:	0a000002 	beq	d2e0 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    d2d4:	e5903000 	ldr	r3, [r0]
    d2d8:	e5933004 	ldr	r3, [r3, #4]
    d2dc:	e12fff33 	blx	r3
    d2e0:	e3a03000 	mov	r3, #0
    d2e4:	e5940044 	ldr	r0, [r4, #68]	; 0x44
    d2e8:	e5843050 	str	r3, [r4, #80]	; 0x50
    d2ec:	e1500003 	cmp	r0, r3
    d2f0:	e5843048 	str	r3, [r4, #72]	; 0x48
    d2f4:	0a000000 	beq	d2fc <CDWHCITransferStageData::~CDWHCITransferStageData()+0x3c>
    d2f8:	eb00773f 	bl	2affc <operator delete[](void*)>
    d2fc:	e1a00004 	mov	r0, r4
    d300:	e8bd8010 	pop	{r4, pc}

0000d304 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>:
    d304:	e5801000 	str	r1, [r0]
    d308:	e12fff1e 	bx	lr

0000d30c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    d30c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d310:	e1a04000 	mov	r4, r0
    d314:	e59f0178 	ldr	r0, [pc, #376]	; d494 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    d318:	e5841040 	str	r1, [r4, #64]	; 0x40
    d31c:	e0000001 	and	r0, r0, r1
    d320:	e3500000 	cmp	r0, #0
    d324:	0a00000f 	beq	d368 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x5c>
    d328:	e3110010 	tst	r1, #16
    d32c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    d330:	e5940004 	ldr	r0, [r4, #4]
    d334:	eb001cb4 	bl	1460c <CUSBRequest::IsCompleteOnNAK() const>
    d338:	e3500000 	cmp	r0, #0
    d33c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    d340:	e5940018 	ldr	r0, [r4, #24]
    d344:	eb000835 	bl	f420 <CUSBEndpoint::GetType() const>
    d348:	e3500001 	cmp	r0, #1
    d34c:	1a000048 	bne	d474 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x168>
    d350:	e5d43008 	ldrb	r3, [r4, #8]
    d354:	e3530000 	cmp	r3, #0
    d358:	0a000049 	beq	d484 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x178>
    d35c:	e3a03000 	mov	r3, #0
    d360:	e5843028 	str	r3, [r4, #40]	; 0x28
    d364:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d368:	e1a05002 	mov	r5, r2
    d36c:	e5d41010 	ldrb	r1, [r4, #16]
    d370:	e5946030 	ldr	r6, [r4, #48]	; 0x30
    d374:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    d378:	e3510000 	cmp	r1, #0
    d37c:	e0467005 	sub	r7, r6, r5
    d380:	e0423003 	sub	r3, r2, r3
    d384:	0a00001d 	beq	d400 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xf4>
    d388:	e5d40011 	ldrb	r0, [r4, #17]
    d38c:	e3530000 	cmp	r3, #0
    d390:	13a01000 	movne	r1, #0
    d394:	02001001 	andeq	r1, r0, #1
    d398:	e3510000 	cmp	r1, #0
    d39c:	1a000022 	bne	d42c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x120>
    d3a0:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    d3a4:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    d3a8:	e0811003 	add	r1, r1, r3
    d3ac:	e3500000 	cmp	r0, #0
    d3b0:	e0823003 	add	r3, r2, r3
    d3b4:	e5841034 	str	r1, [r4, #52]	; 0x34
    d3b8:	e5843048 	str	r3, [r4, #72]	; 0x48
    d3bc:	1a000015 	bne	d418 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x10c>
    d3c0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d3c4:	e1530007 	cmp	r3, r7
    d3c8:	3a000021 	bcc	d454 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x148>
    d3cc:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    d3d0:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    d3d4:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    d3d8:	e0833005 	add	r3, r3, r5
    d3dc:	e0410002 	sub	r0, r1, r2
    d3e0:	e0433006 	sub	r3, r3, r6
    d3e4:	e150000c 	cmp	r0, ip
    d3e8:	e5843028 	str	r3, [r4, #40]	; 0x28
    d3ec:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    d3f0:	e1510002 	cmp	r1, r2
    d3f4:	3a00001a 	bcc	d464 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x158>
    d3f8:	e584002c 	str	r0, [r4, #44]	; 0x2c
    d3fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d400:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    d404:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    d408:	e0811003 	add	r1, r1, r3
    d40c:	e0823003 	add	r3, r2, r3
    d410:	e5841034 	str	r1, [r4, #52]	; 0x34
    d414:	e5843048 	str	r3, [r4, #72]	; 0x48
    d418:	e1a01007 	mov	r1, r7
    d41c:	e5d42009 	ldrb	r2, [r4, #9]
    d420:	e5940018 	ldr	r0, [r4, #24]
    d424:	eb000823 	bl	f4b8 <CUSBEndpoint::SkipPID(unsigned int, bool)>
    d428:	eaffffe4 	b	d3c0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb4>
    d42c:	e3520000 	cmp	r2, #0
    d430:	15942020 	ldrne	r2, [r4, #32]
    d434:	10020792 	mulne	r2, r2, r7
    d438:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    d43c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    d440:	e0811002 	add	r1, r1, r2
    d444:	e0832002 	add	r2, r3, r2
    d448:	e5841034 	str	r1, [r4, #52]	; 0x34
    d44c:	e5842048 	str	r2, [r4, #72]	; 0x48
    d450:	eafffff0 	b	d418 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x10c>
    d454:	e3a020d6 	mov	r2, #214	; 0xd6
    d458:	e59f1038 	ldr	r1, [pc, #56]	; d498 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    d45c:	e59f0038 	ldr	r0, [pc, #56]	; d49c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x190>
    d460:	eb005cd0 	bl	247a8 <assertion_failed>
    d464:	e3a020dc 	mov	r2, #220	; 0xdc
    d468:	e59f1028 	ldr	r1, [pc, #40]	; d498 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    d46c:	e59f002c 	ldr	r0, [pc, #44]	; d4a0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x194>
    d470:	eb005ccc 	bl	247a8 <assertion_failed>
    d474:	e3a020b9 	mov	r2, #185	; 0xb9
    d478:	e59f1018 	ldr	r1, [pc, #24]	; d498 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    d47c:	e59f0020 	ldr	r0, [pc, #32]	; d4a4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x198>
    d480:	eb005cc8 	bl	247a8 <assertion_failed>
    d484:	e3a020ba 	mov	r2, #186	; 0xba
    d488:	e59f1008 	ldr	r1, [pc, #8]	; d498 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    d48c:	e59f0014 	ldr	r0, [pc, #20]	; d4a8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x19c>
    d490:	eb005cc4 	bl	247a8 <assertion_failed>
    d494:	000007dc 	.word	0x000007dc
    d498:	00041464 	.word	0x00041464
    d49c:	000414b0 	.word	0x000414b0
    d4a0:	000414d4 	.word	0x000414d4
    d4a4:	0004147c 	.word	0x0004147c
    d4a8:	000414a8 	.word	0x000414a8

0000d4ac <CDWHCITransferStageData::SetSplitComplete(bool)>:
    d4ac:	e5d03010 	ldrb	r3, [r0, #16]
    d4b0:	e3530000 	cmp	r3, #0
    d4b4:	0a000001 	beq	d4c0 <CDWHCITransferStageData::SetSplitComplete(bool)+0x14>
    d4b8:	e5c01011 	strb	r1, [r0, #17]
    d4bc:	e12fff1e 	bx	lr
    d4c0:	e3a020e3 	mov	r2, #227	; 0xe3
    d4c4:	e92d4010 	push	{r4, lr}
    d4c8:	e59f1004 	ldr	r1, [pc, #4]	; d4d4 <CDWHCITransferStageData::SetSplitComplete(bool)+0x28>
    d4cc:	e59f0004 	ldr	r0, [pc, #4]	; d4d8 <CDWHCITransferStageData::SetSplitComplete(bool)+0x2c>
    d4d0:	eb005cb4 	bl	247a8 <assertion_failed>
    d4d4:	00041464 	.word	0x00041464
    d4d8:	00041500 	.word	0x00041500

0000d4dc <CDWHCITransferStageData::SetState(unsigned int)>:
    d4dc:	e5801038 	str	r1, [r0, #56]	; 0x38
    d4e0:	e12fff1e 	bx	lr

0000d4e4 <CDWHCITransferStageData::GetState() const>:
    d4e4:	e5900038 	ldr	r0, [r0, #56]	; 0x38
    d4e8:	e12fff1e 	bx	lr

0000d4ec <CDWHCITransferStageData::SetSubState(unsigned int)>:
    d4ec:	e580103c 	str	r1, [r0, #60]	; 0x3c
    d4f0:	e12fff1e 	bx	lr

0000d4f4 <CDWHCITransferStageData::GetSubState() const>:
    d4f4:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    d4f8:	e12fff1e 	bx	lr

0000d4fc <CDWHCITransferStageData::BeginSplitCycle()>:
    d4fc:	e3a00001 	mov	r0, #1
    d500:	e12fff1e 	bx	lr

0000d504 <CDWHCITransferStageData::GetChannelNumber() const>:
    d504:	e5900000 	ldr	r0, [r0]
    d508:	e12fff1e 	bx	lr

0000d50c <CDWHCITransferStageData::IsPeriodic() const>:
    d50c:	e5900018 	ldr	r0, [r0, #24]
    d510:	e92d4010 	push	{r4, lr}
    d514:	e3500000 	cmp	r0, #0
    d518:	0a000006 	beq	d538 <CDWHCITransferStageData::IsPeriodic() const+0x2c>
    d51c:	eb0007bf 	bl	f420 <CUSBEndpoint::GetType() const>
    d520:	e2400002 	sub	r0, r0, #2
    d524:	e6ef0070 	uxtb	r0, r0
    d528:	e3500001 	cmp	r0, #1
    d52c:	83a00000 	movhi	r0, #0
    d530:	93a00001 	movls	r0, #1
    d534:	e8bd8010 	pop	{r4, pc}
    d538:	e3a02f42 	mov	r2, #264	; 0x108
    d53c:	e59f1004 	ldr	r1, [pc, #4]	; d548 <CDWHCITransferStageData::IsPeriodic() const+0x3c>
    d540:	e59f0004 	ldr	r0, [pc, #4]	; d54c <CDWHCITransferStageData::IsPeriodic() const+0x40>
    d544:	eb005c97 	bl	247a8 <assertion_failed>
    d548:	00041464 	.word	0x00041464
    d54c:	00041514 	.word	0x00041514

0000d550 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>:
    d550:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d554:	e1a04000 	mov	r4, r0
    d558:	e3a00000 	mov	r0, #0
    d55c:	e24dd00c 	sub	sp, sp, #12
    d560:	e5dd6020 	ldrb	r6, [sp, #32]
    d564:	e1520000 	cmp	r2, r0
    d568:	e8840006 	stm	r4, {r1, r2}
    d56c:	e5c43008 	strb	r3, [r4, #8]
    d570:	e5c46009 	strb	r6, [r4, #9]
    d574:	e584000c 	str	r0, [r4, #12]
    d578:	e5c40011 	strb	r0, [r4, #17]
    d57c:	e5840034 	str	r0, [r4, #52]	; 0x34
    d580:	e5840038 	str	r0, [r4, #56]	; 0x38
    d584:	e584003c 	str	r0, [r4, #60]	; 0x3c
    d588:	e5840040 	str	r0, [r4, #64]	; 0x40
    d58c:	e5840044 	str	r0, [r4, #68]	; 0x44
    d590:	e584004c 	str	r0, [r4, #76]	; 0x4c
    d594:	e5840050 	str	r0, [r4, #80]	; 0x50
    d598:	0a00008e 	beq	d7d8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x288>
    d59c:	e1a00002 	mov	r0, r2
    d5a0:	e1a05002 	mov	r5, r2
    d5a4:	eb001bba 	bl	14494 <CUSBRequest::GetEndpoint() const>
    d5a8:	e3500000 	cmp	r0, #0
    d5ac:	e5840018 	str	r0, [r4, #24]
    d5b0:	0a00008c 	beq	d7e8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x298>
    d5b4:	eb00078d 	bl	f3f0 <CUSBEndpoint::GetDevice() const>
    d5b8:	e3500000 	cmp	r0, #0
    d5bc:	e5840014 	str	r0, [r4, #20]
    d5c0:	0a00008c 	beq	d7f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2a8>
    d5c4:	eb000375 	bl	e3a0 <CUSBDevice::GetSpeed() const>
    d5c8:	e1a03000 	mov	r3, r0
    d5cc:	e5940018 	ldr	r0, [r4, #24]
    d5d0:	e5c4301c 	strb	r3, [r4, #28]
    d5d4:	eb000799 	bl	f440 <CUSBEndpoint::GetMaxPacketSize() const>
    d5d8:	e1a03000 	mov	r3, r0
    d5dc:	e5940014 	ldr	r0, [r4, #20]
    d5e0:	e5843020 	str	r3, [r4, #32]
    d5e4:	eb00036f 	bl	e3a8 <CUSBDevice::IsSplit() const>
    d5e8:	e3560000 	cmp	r6, #0
    d5ec:	e5c40010 	strb	r0, [r4, #16]
    d5f0:	0a000020 	beq	d678 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x128>
    d5f4:	e5946044 	ldr	r6, [r4, #68]	; 0x44
    d5f8:	e3560000 	cmp	r6, #0
    d5fc:	1a000085 	bne	d818 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2c8>
    d600:	e3a00004 	mov	r0, #4
    d604:	eb007675 	bl	2afe0 <operator new[](unsigned int)>
    d608:	e3a03001 	mov	r3, #1
    d60c:	e1a05000 	mov	r5, r0
    d610:	e5846024 	str	r6, [r4, #36]	; 0x24
    d614:	e5840044 	str	r0, [r4, #68]	; 0x44
    d618:	e5840048 	str	r0, [r4, #72]	; 0x48
    d61c:	e584602c 	str	r6, [r4, #44]	; 0x2c
    d620:	e5843028 	str	r3, [r4, #40]	; 0x28
    d624:	e5843030 	str	r3, [r4, #48]	; 0x30
    d628:	e3150003 	tst	r5, #3
    d62c:	1a000075 	bne	d808 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2b8>
    d630:	e5d43010 	ldrb	r3, [r4, #16]
    d634:	e3530000 	cmp	r3, #0
    d638:	0a000032 	beq	d708 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1b8>
    d63c:	e1a00004 	mov	r0, r4
    d640:	ebffffb1 	bl	d50c <CDWHCITransferStageData::IsPeriodic() const>
    d644:	e3500000 	cmp	r0, #0
    d648:	0a000040 	beq	d750 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x200>
    d64c:	e3a00014 	mov	r0, #20
    d650:	ebfffd54 	bl	cba8 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>
    d654:	e1a05000 	mov	r5, r0
    d658:	ebfffd3e 	bl	cb58 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    d65c:	e5845050 	str	r5, [r4, #80]	; 0x50
    d660:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    d664:	e3530000 	cmp	r3, #0
    d668:	1a000040 	bne	d770 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x220>
    d66c:	e1a00004 	mov	r0, r4
    d670:	e28dd00c 	add	sp, sp, #12
    d674:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d678:	e1a01006 	mov	r1, r6
    d67c:	e5940018 	ldr	r0, [r4, #24]
    d680:	eb00077c 	bl	f478 <CUSBEndpoint::GetNextPID(bool)>
    d684:	e3500000 	cmp	r0, #0
    d688:	e1a00005 	mov	r0, r5
    d68c:	0a00004b 	beq	d7c0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x270>
    d690:	eb001baf 	bl	14554 <CUSBRequest::GetBuffer()>
    d694:	e1a03000 	mov	r3, r0
    d698:	e1a00005 	mov	r0, r5
    d69c:	e5843048 	str	r3, [r4, #72]	; 0x48
    d6a0:	eb001bba 	bl	14590 <CUSBRequest::GetBufLen() const>
    d6a4:	e1a06000 	mov	r6, r0
    d6a8:	e5945048 	ldr	r5, [r4, #72]	; 0x48
    d6ac:	e5840024 	str	r0, [r4, #36]	; 0x24
    d6b0:	e5947020 	ldr	r7, [r4, #32]
    d6b4:	e2470001 	sub	r0, r7, #1
    d6b8:	e1a01007 	mov	r1, r7
    d6bc:	e0800006 	add	r0, r0, r6
    d6c0:	eb00c4a6 	bl	3e960 <__udivsi3>
    d6c4:	e5d43010 	ldrb	r3, [r4, #16]
    d6c8:	e5840028 	str	r0, [r4, #40]	; 0x28
    d6cc:	e3530000 	cmp	r3, #0
    d6d0:	0584602c 	streq	r6, [r4, #44]	; 0x2c
    d6d4:	05840030 	streq	r0, [r4, #48]	; 0x30
    d6d8:	0a000004 	beq	d6f0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1a0>
    d6dc:	e1570006 	cmp	r7, r6
    d6e0:	31a06007 	movcc	r6, r7
    d6e4:	e3a03001 	mov	r3, #1
    d6e8:	e584602c 	str	r6, [r4, #44]	; 0x2c
    d6ec:	e5843030 	str	r3, [r4, #48]	; 0x30
    d6f0:	e3550000 	cmp	r5, #0
    d6f4:	1affffcb 	bne	d628 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xd8>
    d6f8:	e3a0206c 	mov	r2, #108	; 0x6c
    d6fc:	e59f1144 	ldr	r1, [pc, #324]	; d848 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d700:	e59f0144 	ldr	r0, [pc, #324]	; d84c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2fc>
    d704:	eb005c27 	bl	247a8 <assertion_failed>
    d708:	e5940014 	ldr	r0, [r4, #20]
    d70c:	eb000327 	bl	e3b0 <CUSBDevice::GetHubAddress() const>
    d710:	e3500000 	cmp	r0, #0
    d714:	1affffd1 	bne	d660 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x110>
    d718:	e5d4301c 	ldrb	r3, [r4, #28]
    d71c:	e3530002 	cmp	r3, #2
    d720:	0affffce 	beq	d660 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x110>
    d724:	e1a00004 	mov	r0, r4
    d728:	ebffff77 	bl	d50c <CDWHCITransferStageData::IsPeriodic() const>
    d72c:	e1a01000 	mov	r1, r0
    d730:	e3a00008 	mov	r0, #8
    d734:	e58d1004 	str	r1, [sp, #4]
    d738:	ebfffc0a 	bl	c768 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>
    d73c:	e1a05000 	mov	r5, r0
    d740:	e59d1004 	ldr	r1, [sp, #4]
    d744:	ebfffc00 	bl	c74c <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>
    d748:	e5845050 	str	r5, [r4, #80]	; 0x50
    d74c:	eaffffc3 	b	d660 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x110>
    d750:	e3a00010 	mov	r0, #16
    d754:	ebfffb63 	bl	c4e8 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>
    d758:	e1a05000 	mov	r5, r0
    d75c:	ebfffb4f 	bl	c4a0 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
    d760:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    d764:	e5845050 	str	r5, [r4, #80]	; 0x50
    d768:	e3530000 	cmp	r3, #0
    d76c:	0affffbe 	beq	d66c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x11c>
    d770:	e5940018 	ldr	r0, [r4, #24]
    d774:	eb000729 	bl	f420 <CUSBEndpoint::GetType() const>
    d778:	e3500002 	cmp	r0, #2
    d77c:	1a000029 	bne	d828 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d780:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    d784:	e59f20c4 	ldr	r2, [pc, #196]	; d850 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x300>
    d788:	e0833103 	add	r3, r3, r3, lsl #2
    d78c:	e0833103 	add	r3, r3, r3, lsl #2
    d790:	e1a03103 	lsl	r3, r3, #2
    d794:	e0821392 	umull	r1, r2, r2, r3
    d798:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    d79c:	e1a03322 	lsr	r3, r2, #6
    d7a0:	e584300c 	str	r3, [r4, #12]
    d7a4:	3a000023 	bcc	d838 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e8>
    d7a8:	eb0071cb 	bl	29edc <CTimer::Get()>
    d7ac:	eb006f18 	bl	29414 <CTimer::GetTicks() const>
    d7b0:	e584004c 	str	r0, [r4, #76]	; 0x4c
    d7b4:	e1a00004 	mov	r0, r4
    d7b8:	e28dd00c 	add	sp, sp, #12
    d7bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d7c0:	eb001b4f 	bl	14504 <CUSBRequest::GetSetupData()>
    d7c4:	e3a06008 	mov	r6, #8
    d7c8:	e1a05000 	mov	r5, r0
    d7cc:	e5846024 	str	r6, [r4, #36]	; 0x24
    d7d0:	e5840048 	str	r0, [r4, #72]	; 0x48
    d7d4:	eaffffb5 	b	d6b0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x160>
    d7d8:	e3a02031 	mov	r2, #49	; 0x31
    d7dc:	e59f1064 	ldr	r1, [pc, #100]	; d848 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d7e0:	e59f006c 	ldr	r0, [pc, #108]	; d854 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x304>
    d7e4:	eb005bef 	bl	247a8 <assertion_failed>
    d7e8:	e3a02034 	mov	r2, #52	; 0x34
    d7ec:	e59f1054 	ldr	r1, [pc, #84]	; d848 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d7f0:	e59f0060 	ldr	r0, [pc, #96]	; d858 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x308>
    d7f4:	eb005beb 	bl	247a8 <assertion_failed>
    d7f8:	e3a02036 	mov	r2, #54	; 0x36
    d7fc:	e59f1044 	ldr	r1, [pc, #68]	; d848 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d800:	e59f0054 	ldr	r0, [pc, #84]	; d85c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x30c>
    d804:	eb005be7 	bl	247a8 <assertion_failed>
    d808:	e3a0206d 	mov	r2, #109	; 0x6d
    d80c:	e59f1034 	ldr	r1, [pc, #52]	; d848 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d810:	e59f0048 	ldr	r0, [pc, #72]	; d860 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x310>
    d814:	eb005be3 	bl	247a8 <assertion_failed>
    d818:	e3a02061 	mov	r2, #97	; 0x61
    d81c:	e59f1024 	ldr	r1, [pc, #36]	; d848 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d820:	e59f003c 	ldr	r0, [pc, #60]	; d864 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x314>
    d824:	eb005bdf 	bl	247a8 <assertion_failed>
    d828:	e3a02088 	mov	r2, #136	; 0x88
    d82c:	e59f1014 	ldr	r1, [pc, #20]	; d848 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d830:	e59f0030 	ldr	r0, [pc, #48]	; d868 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x318>
    d834:	eb005bdb 	bl	247a8 <assertion_failed>
    d838:	e3a0208b 	mov	r2, #139	; 0x8b
    d83c:	e59f1004 	ldr	r1, [pc, #4]	; d848 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d840:	e59f0024 	ldr	r0, [pc, #36]	; d86c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x31c>
    d844:	eb005bd7 	bl	247a8 <assertion_failed>
    d848:	00041464 	.word	0x00041464
    d84c:	00041558 	.word	0x00041558
    d850:	10624dd3 	.word	0x10624dd3
    d854:	00041528 	.word	0x00041528
    d858:	00041514 	.word	0x00041514
    d85c:	00041534 	.word	0x00041534
    d860:	00041570 	.word	0x00041570
    d864:	00041544 	.word	0x00041544
    d868:	00041598 	.word	0x00041598
    d86c:	000415cc 	.word	0x000415cc

0000d870 <CDWHCITransferStageData::GetDeviceAddress() const>:
    d870:	e5900014 	ldr	r0, [r0, #20]
    d874:	e3500000 	cmp	r0, #0
    d878:	0a000000 	beq	d880 <CDWHCITransferStageData::GetDeviceAddress() const+0x10>
    d87c:	ea0002c5 	b	e398 <CUSBDevice::GetAddress() const>
    d880:	e92d4010 	push	{r4, lr}
    d884:	e59f2008 	ldr	r2, [pc, #8]	; d894 <CDWHCITransferStageData::GetDeviceAddress() const+0x24>
    d888:	e59f1008 	ldr	r1, [pc, #8]	; d898 <CDWHCITransferStageData::GetDeviceAddress() const+0x28>
    d88c:	e59f0008 	ldr	r0, [pc, #8]	; d89c <CDWHCITransferStageData::GetDeviceAddress() const+0x2c>
    d890:	eb005bc4 	bl	247a8 <assertion_failed>
    d894:	00000111 	.word	0x00000111
    d898:	00041464 	.word	0x00041464
    d89c:	00041534 	.word	0x00041534

0000d8a0 <CDWHCITransferStageData::GetEndpointType() const>:
    d8a0:	e5900018 	ldr	r0, [r0, #24]
    d8a4:	e92d4010 	push	{r4, lr}
    d8a8:	e3500000 	cmp	r0, #0
    d8ac:	0a000005 	beq	d8c8 <CDWHCITransferStageData::GetEndpointType() const+0x28>
    d8b0:	eb0006da 	bl	f420 <CUSBEndpoint::GetType() const>
    d8b4:	e3500002 	cmp	r0, #2
    d8b8:	8a000006 	bhi	d8d8 <CDWHCITransferStageData::GetEndpointType() const+0x38>
    d8bc:	e59f3024 	ldr	r3, [pc, #36]	; d8e8 <CDWHCITransferStageData::GetEndpointType() const+0x48>
    d8c0:	e7d30100 	ldrb	r0, [r3, r0, lsl #2]
    d8c4:	e8bd8010 	pop	{r4, pc}
    d8c8:	e59f201c 	ldr	r2, [pc, #28]	; d8ec <CDWHCITransferStageData::GetEndpointType() const+0x4c>
    d8cc:	e59f101c 	ldr	r1, [pc, #28]	; d8f0 <CDWHCITransferStageData::GetEndpointType() const+0x50>
    d8d0:	e59f001c 	ldr	r0, [pc, #28]	; d8f4 <CDWHCITransferStageData::GetEndpointType() const+0x54>
    d8d4:	eb005bb3 	bl	247a8 <assertion_failed>
    d8d8:	e59f2018 	ldr	r2, [pc, #24]	; d8f8 <CDWHCITransferStageData::GetEndpointType() const+0x58>
    d8dc:	e59f100c 	ldr	r1, [pc, #12]	; d8f0 <CDWHCITransferStageData::GetEndpointType() const+0x50>
    d8e0:	e59f0014 	ldr	r0, [pc, #20]	; d8fc <CDWHCITransferStageData::GetEndpointType() const+0x5c>
    d8e4:	eb005baf 	bl	247a8 <assertion_failed>
    d8e8:	00041640 	.word	0x00041640
    d8ec:	00000117 	.word	0x00000117
    d8f0:	00041464 	.word	0x00041464
    d8f4:	00041514 	.word	0x00041514
    d8f8:	0000012a 	.word	0x0000012a
    d8fc:	00041748 	.word	0x00041748

0000d900 <CDWHCITransferStageData::GetEndpointNumber() const>:
    d900:	e5900018 	ldr	r0, [r0, #24]
    d904:	e3500000 	cmp	r0, #0
    d908:	0a000000 	beq	d910 <CDWHCITransferStageData::GetEndpointNumber() const+0x10>
    d90c:	ea0006c1 	b	f418 <CUSBEndpoint::GetNumber() const>
    d910:	e92d4010 	push	{r4, lr}
    d914:	e59f2008 	ldr	r2, [pc, #8]	; d924 <CDWHCITransferStageData::GetEndpointNumber() const+0x24>
    d918:	e59f1008 	ldr	r1, [pc, #8]	; d928 <CDWHCITransferStageData::GetEndpointNumber() const+0x28>
    d91c:	e59f0008 	ldr	r0, [pc, #8]	; d92c <CDWHCITransferStageData::GetEndpointNumber() const+0x2c>
    d920:	eb005ba0 	bl	247a8 <assertion_failed>
    d924:	00000133 	.word	0x00000133
    d928:	00041464 	.word	0x00041464
    d92c:	00041514 	.word	0x00041514

0000d930 <CDWHCITransferStageData::GetMaxPacketSize() const>:
    d930:	e5900020 	ldr	r0, [r0, #32]
    d934:	e12fff1e 	bx	lr

0000d938 <CDWHCITransferStageData::GetSpeed() const>:
    d938:	e5d0001c 	ldrb	r0, [r0, #28]
    d93c:	e12fff1e 	bx	lr

0000d940 <CDWHCITransferStageData::GetPID() const>:
    d940:	e5903018 	ldr	r3, [r0, #24]
    d944:	e92d4010 	push	{r4, lr}
    d948:	e3530000 	cmp	r3, #0
    d94c:	0a000008 	beq	d974 <CDWHCITransferStageData::GetPID() const+0x34>
    d950:	e5d01009 	ldrb	r1, [r0, #9]
    d954:	e1a00003 	mov	r0, r3
    d958:	eb0006c6 	bl	f478 <CUSBEndpoint::GetNextPID(bool)>
    d95c:	e3500002 	cmp	r0, #2
    d960:	8a000007 	bhi	d984 <CDWHCITransferStageData::GetPID() const+0x44>
    d964:	e59f3028 	ldr	r3, [pc, #40]	; d994 <CDWHCITransferStageData::GetPID() const+0x54>
    d968:	e0830000 	add	r0, r3, r0
    d96c:	e5d0000c 	ldrb	r0, [r0, #12]
    d970:	e8bd8010 	pop	{r4, pc}
    d974:	e59f201c 	ldr	r2, [pc, #28]	; d998 <CDWHCITransferStageData::GetPID() const+0x58>
    d978:	e59f101c 	ldr	r1, [pc, #28]	; d99c <CDWHCITransferStageData::GetPID() const+0x5c>
    d97c:	e59f001c 	ldr	r0, [pc, #28]	; d9a0 <CDWHCITransferStageData::GetPID() const+0x60>
    d980:	eb005b88 	bl	247a8 <assertion_failed>
    d984:	e59f2018 	ldr	r2, [pc, #24]	; d9a4 <CDWHCITransferStageData::GetPID() const+0x64>
    d988:	e59f100c 	ldr	r1, [pc, #12]	; d99c <CDWHCITransferStageData::GetPID() const+0x5c>
    d98c:	e59f0014 	ldr	r0, [pc, #20]	; d9a8 <CDWHCITransferStageData::GetPID() const+0x68>
    d990:	eb005b84 	bl	247a8 <assertion_failed>
    d994:	00041640 	.word	0x00041640
    d998:	00000143 	.word	0x00000143
    d99c:	00041464 	.word	0x00041464
    d9a0:	00041514 	.word	0x00041514
    d9a4:	00000156 	.word	0x00000156
    d9a8:	00041748 	.word	0x00041748

0000d9ac <CDWHCITransferStageData::IsDirectionIn() const>:
    d9ac:	e5d00008 	ldrb	r0, [r0, #8]
    d9b0:	e12fff1e 	bx	lr

0000d9b4 <CDWHCITransferStageData::IsStatusStage() const>:
    d9b4:	e5d00009 	ldrb	r0, [r0, #9]
    d9b8:	e12fff1e 	bx	lr

0000d9bc <CDWHCITransferStageData::GetDMAAddress() const>:
    d9bc:	e5900048 	ldr	r0, [r0, #72]	; 0x48
    d9c0:	e3500000 	cmp	r0, #0
    d9c4:	112fff1e 	bxne	lr
    d9c8:	e92d4010 	push	{r4, lr}
    d9cc:	e59f2008 	ldr	r2, [pc, #8]	; d9dc <CDWHCITransferStageData::GetDMAAddress() const+0x20>
    d9d0:	e59f1008 	ldr	r1, [pc, #8]	; d9e0 <CDWHCITransferStageData::GetDMAAddress() const+0x24>
    d9d4:	e59f0008 	ldr	r0, [pc, #8]	; d9e4 <CDWHCITransferStageData::GetDMAAddress() const+0x28>
    d9d8:	eb005b72 	bl	247a8 <assertion_failed>
    d9dc:	00000169 	.word	0x00000169
    d9e0:	00041464 	.word	0x00041464
    d9e4:	00041558 	.word	0x00041558

0000d9e8 <CDWHCITransferStageData::GetBytesToTransfer() const>:
    d9e8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d9ec:	e12fff1e 	bx	lr

0000d9f0 <CDWHCITransferStageData::GetPacketsToTransfer() const>:
    d9f0:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    d9f4:	e12fff1e 	bx	lr

0000d9f8 <CDWHCITransferStageData::IsSplit() const>:
    d9f8:	e5d00010 	ldrb	r0, [r0, #16]
    d9fc:	e12fff1e 	bx	lr

0000da00 <CDWHCITransferStageData::IsSplitComplete() const>:
    da00:	e5d03010 	ldrb	r3, [r0, #16]
    da04:	e3530000 	cmp	r3, #0
    da08:	0a000001 	beq	da14 <CDWHCITransferStageData::IsSplitComplete() const+0x14>
    da0c:	e5d00011 	ldrb	r0, [r0, #17]
    da10:	e12fff1e 	bx	lr
    da14:	e92d4010 	push	{r4, lr}
    da18:	e59f2008 	ldr	r2, [pc, #8]	; da28 <CDWHCITransferStageData::IsSplitComplete() const+0x28>
    da1c:	e59f1008 	ldr	r1, [pc, #8]	; da2c <CDWHCITransferStageData::IsSplitComplete() const+0x2c>
    da20:	e59f0008 	ldr	r0, [pc, #8]	; da30 <CDWHCITransferStageData::IsSplitComplete() const+0x30>
    da24:	eb005b5f 	bl	247a8 <assertion_failed>
    da28:	0000017f 	.word	0x0000017f
    da2c:	00041464 	.word	0x00041464
    da30:	00041500 	.word	0x00041500

0000da34 <CDWHCITransferStageData::GetHubAddress() const>:
    da34:	e5d03010 	ldrb	r3, [r0, #16]
    da38:	e92d4010 	push	{r4, lr}
    da3c:	e3530000 	cmp	r3, #0
    da40:	0a000004 	beq	da58 <CDWHCITransferStageData::GetHubAddress() const+0x24>
    da44:	e5900014 	ldr	r0, [r0, #20]
    da48:	e3500000 	cmp	r0, #0
    da4c:	0a000005 	beq	da68 <CDWHCITransferStageData::GetHubAddress() const+0x34>
    da50:	e8bd4010 	pop	{r4, lr}
    da54:	ea000255 	b	e3b0 <CUSBDevice::GetHubAddress() const>
    da58:	e59f2018 	ldr	r2, [pc, #24]	; da78 <CDWHCITransferStageData::GetHubAddress() const+0x44>
    da5c:	e59f1018 	ldr	r1, [pc, #24]	; da7c <CDWHCITransferStageData::GetHubAddress() const+0x48>
    da60:	e59f0018 	ldr	r0, [pc, #24]	; da80 <CDWHCITransferStageData::GetHubAddress() const+0x4c>
    da64:	eb005b4f 	bl	247a8 <assertion_failed>
    da68:	e3a02f62 	mov	r2, #392	; 0x188
    da6c:	e59f1008 	ldr	r1, [pc, #8]	; da7c <CDWHCITransferStageData::GetHubAddress() const+0x48>
    da70:	e59f000c 	ldr	r0, [pc, #12]	; da84 <CDWHCITransferStageData::GetHubAddress() const+0x50>
    da74:	eb005b4b 	bl	247a8 <assertion_failed>
    da78:	00000186 	.word	0x00000186
    da7c:	00041464 	.word	0x00041464
    da80:	00041500 	.word	0x00041500
    da84:	00041534 	.word	0x00041534

0000da88 <CDWHCITransferStageData::GetHubPortAddress() const>:
    da88:	e5d03010 	ldrb	r3, [r0, #16]
    da8c:	e92d4010 	push	{r4, lr}
    da90:	e3530000 	cmp	r3, #0
    da94:	0a000004 	beq	daac <CDWHCITransferStageData::GetHubPortAddress() const+0x24>
    da98:	e5900014 	ldr	r0, [r0, #20]
    da9c:	e3500000 	cmp	r0, #0
    daa0:	0a000005 	beq	dabc <CDWHCITransferStageData::GetHubPortAddress() const+0x34>
    daa4:	e8bd4010 	pop	{r4, lr}
    daa8:	ea000242 	b	e3b8 <CUSBDevice::GetHubPortNumber() const>
    daac:	e59f2018 	ldr	r2, [pc, #24]	; dacc <CDWHCITransferStageData::GetHubPortAddress() const+0x44>
    dab0:	e59f1018 	ldr	r1, [pc, #24]	; dad0 <CDWHCITransferStageData::GetHubPortAddress() const+0x48>
    dab4:	e59f0018 	ldr	r0, [pc, #24]	; dad4 <CDWHCITransferStageData::GetHubPortAddress() const+0x4c>
    dab8:	eb005b3a 	bl	247a8 <assertion_failed>
    dabc:	e3a02e19 	mov	r2, #400	; 0x190
    dac0:	e59f1008 	ldr	r1, [pc, #8]	; dad0 <CDWHCITransferStageData::GetHubPortAddress() const+0x48>
    dac4:	e59f000c 	ldr	r0, [pc, #12]	; dad8 <CDWHCITransferStageData::GetHubPortAddress() const+0x50>
    dac8:	eb005b36 	bl	247a8 <assertion_failed>
    dacc:	0000018e 	.word	0x0000018e
    dad0:	00041464 	.word	0x00041464
    dad4:	00041500 	.word	0x00041500
    dad8:	00041534 	.word	0x00041534

0000dadc <CDWHCITransferStageData::GetSplitPosition() const>:
    dadc:	e3a00003 	mov	r0, #3
    dae0:	e12fff1e 	bx	lr

0000dae4 <CDWHCITransferStageData::GetStatusMask() const>:
    dae4:	e5d03010 	ldrb	r3, [r0, #16]
    dae8:	e3530000 	cmp	r3, #0
    daec:	0a000001 	beq	daf8 <CDWHCITransferStageData::GetStatusMask() const+0x14>
    daf0:	e59f0018 	ldr	r0, [pc, #24]	; db10 <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    daf4:	e12fff1e 	bx	lr
    daf8:	e92d4010 	push	{r4, lr}
    dafc:	ebfffe82 	bl	d50c <CDWHCITransferStageData::IsPeriodic() const>
    db00:	e3500000 	cmp	r0, #0
    db04:	159f0004 	ldrne	r0, [pc, #4]	; db10 <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    db08:	059f0004 	ldreq	r0, [pc, #4]	; db14 <CDWHCITransferStageData::GetStatusMask() const+0x30>
    db0c:	e8bd8010 	pop	{r4, pc}
    db10:	000007ff 	.word	0x000007ff
    db14:	0000078f 	.word	0x0000078f

0000db18 <CDWHCITransferStageData::GetTransactionStatus() const>:
    db18:	e5900040 	ldr	r0, [r0, #64]	; 0x40
    db1c:	e3500000 	cmp	r0, #0
    db20:	112fff1e 	bxne	lr
    db24:	e92d4010 	push	{r4, lr}
    db28:	e59f2008 	ldr	r2, [pc, #8]	; db38 <CDWHCITransferStageData::GetTransactionStatus() const+0x20>
    db2c:	e59f1008 	ldr	r1, [pc, #8]	; db3c <CDWHCITransferStageData::GetTransactionStatus() const+0x24>
    db30:	e59f0008 	ldr	r0, [pc, #8]	; db40 <CDWHCITransferStageData::GetTransactionStatus() const+0x28>
    db34:	eb005b1b 	bl	247a8 <assertion_failed>
    db38:	000001ad 	.word	0x000001ad
    db3c:	00041464 	.word	0x00041464
    db40:	000415e0 	.word	0x000415e0

0000db44 <CDWHCITransferStageData::IsStageComplete() const>:
    db44:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    db48:	e16f0f10 	clz	r0, r0
    db4c:	e1a002a0 	lsr	r0, r0, #5
    db50:	e12fff1e 	bx	lr

0000db54 <CDWHCITransferStageData::GetResultLen() const>:
    db54:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    db58:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    db5c:	e1520000 	cmp	r2, r0
    db60:	31a00002 	movcc	r0, r2
    db64:	e12fff1e 	bx	lr

0000db68 <CDWHCITransferStageData::IsTimeout() const>:
    db68:	e590300c 	ldr	r3, [r0, #12]
    db6c:	e3530000 	cmp	r3, #0
    db70:	1a000001 	bne	db7c <CDWHCITransferStageData::IsTimeout() const+0x14>
    db74:	e1a00003 	mov	r0, r3
    db78:	e12fff1e 	bx	lr
    db7c:	e92d4010 	push	{r4, lr}
    db80:	e1a04000 	mov	r4, r0
    db84:	eb0070d4 	bl	29edc <CTimer::Get()>
    db88:	eb006e21 	bl	29414 <CTimer::GetTicks() const>
    db8c:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    db90:	e594300c 	ldr	r3, [r4, #12]
    db94:	e0400002 	sub	r0, r0, r2
    db98:	e1500003 	cmp	r0, r3
    db9c:	33a00000 	movcc	r0, #0
    dba0:	23a00001 	movcs	r0, #1
    dba4:	e8bd8010 	pop	{r4, pc}

0000dba8 <CDWHCITransferStageData::GetURB() const>:
    dba8:	e5900004 	ldr	r0, [r0, #4]
    dbac:	e3500000 	cmp	r0, #0
    dbb0:	112fff1e 	bxne	lr
    dbb4:	e3a02f73 	mov	r2, #460	; 0x1cc
    dbb8:	e92d4010 	push	{r4, lr}
    dbbc:	e59f1004 	ldr	r1, [pc, #4]	; dbc8 <CDWHCITransferStageData::GetURB() const+0x20>
    dbc0:	e59f0004 	ldr	r0, [pc, #4]	; dbcc <CDWHCITransferStageData::GetURB() const+0x24>
    dbc4:	eb005af7 	bl	247a8 <assertion_failed>
    dbc8:	00041464 	.word	0x00041464
    dbcc:	00041528 	.word	0x00041528

0000dbd0 <CDWHCITransferStageData::GetFrameScheduler() const>:
    dbd0:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    dbd4:	e12fff1e 	bx	lr

0000dbd8 <CDWHCITransferStageData::operator new(unsigned int)>:
    dbd8:	e3500054 	cmp	r0, #84	; 0x54
    dbdc:	e92d4010 	push	{r4, lr}
    dbe0:	1a000005 	bne	dbfc <CDWHCITransferStageData::operator new(unsigned int)+0x24>
    dbe4:	e59f3030 	ldr	r3, [pc, #48]	; dc1c <CDWHCITransferStageData::operator new(unsigned int)+0x44>
    dbe8:	e5930000 	ldr	r0, [r3]
    dbec:	e3500000 	cmp	r0, #0
    dbf0:	0a000005 	beq	dc0c <CDWHCITransferStageData::operator new(unsigned int)+0x34>
    dbf4:	e8bd4010 	pop	{r4, lr}
    dbf8:	ea005bec 	b	24bb0 <CClassAllocator::Allocate()>
    dbfc:	e59f201c 	ldr	r2, [pc, #28]	; dc20 <CDWHCITransferStageData::operator new(unsigned int)+0x48>
    dc00:	e59f101c 	ldr	r1, [pc, #28]	; dc24 <CDWHCITransferStageData::operator new(unsigned int)+0x4c>
    dc04:	e59f001c 	ldr	r0, [pc, #28]	; dc28 <CDWHCITransferStageData::operator new(unsigned int)+0x50>
    dc08:	eb005ae6 	bl	247a8 <assertion_failed>
    dc0c:	e59f200c 	ldr	r2, [pc, #12]	; dc20 <CDWHCITransferStageData::operator new(unsigned int)+0x48>
    dc10:	e59f100c 	ldr	r1, [pc, #12]	; dc24 <CDWHCITransferStageData::operator new(unsigned int)+0x4c>
    dc14:	e59f0010 	ldr	r0, [pc, #16]	; dc2c <CDWHCITransferStageData::operator new(unsigned int)+0x54>
    dc18:	eb005ae2 	bl	247a8 <assertion_failed>
    dc1c:	0005ce04 	.word	0x0005ce04
    dc20:	000001d5 	.word	0x000001d5
    dc24:	00041464 	.word	0x00041464
    dc28:	000415fc 	.word	0x000415fc
    dc2c:	0004115c 	.word	0x0004115c

0000dc30 <CDWHCITransferStageData::operator delete(void*, unsigned int)>:
    dc30:	e3510054 	cmp	r1, #84	; 0x54
    dc34:	e92d4010 	push	{r4, lr}
    dc38:	1a000006 	bne	dc58 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x28>
    dc3c:	e59f3034 	ldr	r3, [pc, #52]	; dc78 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x48>
    dc40:	e1a01000 	mov	r1, r0
    dc44:	e5930000 	ldr	r0, [r3]
    dc48:	e3500000 	cmp	r0, #0
    dc4c:	0a000005 	beq	dc68 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x38>
    dc50:	e8bd4010 	pop	{r4, lr}
    dc54:	ea005c10 	b	24c9c <CClassAllocator::Free(void*)>
    dc58:	e59f201c 	ldr	r2, [pc, #28]	; dc7c <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x4c>
    dc5c:	e59f101c 	ldr	r1, [pc, #28]	; dc80 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x50>
    dc60:	e59f001c 	ldr	r0, [pc, #28]	; dc84 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x54>
    dc64:	eb005acf 	bl	247a8 <assertion_failed>
    dc68:	e59f200c 	ldr	r2, [pc, #12]	; dc7c <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x4c>
    dc6c:	e59f100c 	ldr	r1, [pc, #12]	; dc80 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x50>
    dc70:	e59f0010 	ldr	r0, [pc, #16]	; dc88 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x58>
    dc74:	eb005acb 	bl	247a8 <assertion_failed>
    dc78:	0005ce04 	.word	0x0005ce04
    dc7c:	000001d5 	.word	0x000001d5
    dc80:	00041464 	.word	0x00041464
    dc84:	000415fc 	.word	0x000415fc
    dc88:	0004115c 	.word	0x0004115c

0000dc8c <CDWHCITransferStageData::InitAllocator(unsigned int)>:
    dc8c:	e92d4070 	push	{r4, r5, r6, lr}
    dc90:	e59f6040 	ldr	r6, [pc, #64]	; dcd8 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x4c>
    dc94:	e5963000 	ldr	r3, [r6]
    dc98:	e3530000 	cmp	r3, #0
    dc9c:	1a000009 	bne	dcc8 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x3c>
    dca0:	e1a04000 	mov	r4, r0
    dca4:	e3a0001c 	mov	r0, #28
    dca8:	eb0074c6 	bl	2afc8 <operator new(unsigned int)>
    dcac:	e1a05000 	mov	r5, r0
    dcb0:	e1a02004 	mov	r2, r4
    dcb4:	e3a01054 	mov	r1, #84	; 0x54
    dcb8:	e59f301c 	ldr	r3, [pc, #28]	; dcdc <CDWHCITransferStageData::InitAllocator(unsigned int)+0x50>
    dcbc:	eb005ba2 	bl	24b4c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    dcc0:	e5865000 	str	r5, [r6]
    dcc4:	e8bd8070 	pop	{r4, r5, r6, pc}
    dcc8:	e59f2010 	ldr	r2, [pc, #16]	; dce0 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x54>
    dccc:	e59f1010 	ldr	r1, [pc, #16]	; dce4 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x58>
    dcd0:	e59f0010 	ldr	r0, [pc, #16]	; dce8 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x5c>
    dcd4:	eb005ab3 	bl	247a8 <assertion_failed>
    dcd8:	0005ce04 	.word	0x0005ce04
    dcdc:	00041628 	.word	0x00041628
    dce0:	000001d5 	.word	0x000001d5
    dce4:	00041464 	.word	0x00041464
    dce8:	00041170 	.word	0x00041170

0000dcec <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>:
    dcec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    dcf0:	e59f7054 	ldr	r7, [pc, #84]	; dd4c <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    dcf4:	e24dd00c 	sub	sp, sp, #12
    dcf8:	e5973000 	ldr	r3, [r7]
    dcfc:	e3530000 	cmp	r3, #0
    dd00:	1a00000d 	bne	dd3c <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    dd04:	e1a05001 	mov	r5, r1
    dd08:	e1a04000 	mov	r4, r0
    dd0c:	e3a0001c 	mov	r0, #28
    dd10:	eb0074ac 	bl	2afc8 <operator new(unsigned int)>
    dd14:	e59f1034 	ldr	r1, [pc, #52]	; dd50 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    dd18:	e1a03005 	mov	r3, r5
    dd1c:	e58d1000 	str	r1, [sp]
    dd20:	e1a02004 	mov	r2, r4
    dd24:	e3a01054 	mov	r1, #84	; 0x54
    dd28:	e1a06000 	mov	r6, r0
    dd2c:	eb005b92 	bl	24b7c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    dd30:	e5876000 	str	r6, [r7]
    dd34:	e28dd00c 	add	sp, sp, #12
    dd38:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    dd3c:	e59f2010 	ldr	r2, [pc, #16]	; dd54 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    dd40:	e59f1010 	ldr	r1, [pc, #16]	; dd58 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    dd44:	e59f0010 	ldr	r0, [pc, #16]	; dd5c <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x70>
    dd48:	eb005a96 	bl	247a8 <assertion_failed>
    dd4c:	0005ce04 	.word	0x0005ce04
    dd50:	00041628 	.word	0x00041628
    dd54:	000001d5 	.word	0x000001d5
    dd58:	00041464 	.word	0x00041464
    dd5c:	00041170 	.word	0x00041170

0000dd60 <CUSBDevice::~CUSBDevice()>:
    dd60:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dd64:	e1a04000 	mov	r4, r0
    dd68:	e1a05000 	mov	r5, r0
    dd6c:	e3a07000 	mov	r7, #0
    dd70:	e59f3110 	ldr	r3, [pc, #272]	; de88 <CUSBDevice::~CUSBDevice()+0x128>
    dd74:	e2806054 	add	r6, r0, #84	; 0x54
    dd78:	e484302c 	str	r3, [r4], #44	; 0x2c
    dd7c:	e5b40004 	ldr	r0, [r4, #4]!
    dd80:	e3500000 	cmp	r0, #0
    dd84:	0a000002 	beq	dd94 <CUSBDevice::~CUSBDevice()+0x34>
    dd88:	e5903000 	ldr	r3, [r0]
    dd8c:	e5933004 	ldr	r3, [r3, #4]
    dd90:	e12fff33 	blx	r3
    dd94:	e1560004 	cmp	r6, r4
    dd98:	e5847000 	str	r7, [r4]
    dd9c:	1afffff6 	bne	dd7c <CUSBDevice::~CUSBDevice()+0x1c>
    dda0:	e5d53014 	ldrb	r3, [r5, #20]
    dda4:	e3530000 	cmp	r3, #0
    dda8:	0a000010 	beq	ddf0 <CUSBDevice::~CUSBDevice()+0x90>
    ddac:	e59fc0d8 	ldr	ip, [pc, #216]	; de8c <CUSBDevice::~CUSBDevice()+0x12c>
    ddb0:	e2634020 	rsb	r4, r3, #32
    ddb4:	e59ce000 	ldr	lr, [ip]
    ddb8:	e59c0004 	ldr	r0, [ip, #4]
    ddbc:	e1a0133e 	lsr	r1, lr, r3
    ddc0:	e1811410 	orr	r1, r1, r0, lsl r4
    ddc4:	e2432020 	sub	r2, r3, #32
    ddc8:	e1811230 	orr	r1, r1, r0, lsr r2
    ddcc:	e3110001 	tst	r1, #1
    ddd0:	0a000028 	beq	de78 <CUSBDevice::~CUSBDevice()+0x118>
    ddd4:	e3a01001 	mov	r1, #1
    ddd8:	e1a02211 	lsl	r2, r1, r2
    dddc:	e1822431 	orr	r2, r2, r1, lsr r4
    dde0:	e1c02002 	bic	r2, r0, r2
    dde4:	e1ce3311 	bic	r3, lr, r1, lsl r3
    dde8:	e58c2004 	str	r2, [ip, #4]
    ddec:	e58c3000 	str	r3, [ip]
    ddf0:	e595402c 	ldr	r4, [r5, #44]	; 0x2c
    ddf4:	e3540000 	cmp	r4, #0
    ddf8:	0a000004 	beq	de10 <CUSBDevice::~CUSBDevice()+0xb0>
    ddfc:	e1a00004 	mov	r0, r4
    de00:	eb00270f 	bl	17a44 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    de04:	e1a00004 	mov	r0, r4
    de08:	e3a0101c 	mov	r1, #28
    de0c:	eb00747b 	bl	2b000 <operator delete(void*, unsigned int)>
    de10:	e3a03000 	mov	r3, #0
    de14:	e5950028 	ldr	r0, [r5, #40]	; 0x28
    de18:	e585302c 	str	r3, [r5, #44]	; 0x2c
    de1c:	e1500003 	cmp	r0, r3
    de20:	0a000001 	beq	de2c <CUSBDevice::~CUSBDevice()+0xcc>
    de24:	e3a01009 	mov	r1, #9
    de28:	eb007474 	bl	2b000 <operator delete(void*, unsigned int)>
    de2c:	e3a03000 	mov	r3, #0
    de30:	e5950024 	ldr	r0, [r5, #36]	; 0x24
    de34:	e5853028 	str	r3, [r5, #40]	; 0x28
    de38:	e1500003 	cmp	r0, r3
    de3c:	0a000001 	beq	de48 <CUSBDevice::~CUSBDevice()+0xe8>
    de40:	e3a01012 	mov	r1, #18
    de44:	eb00746d 	bl	2b000 <operator delete(void*, unsigned int)>
    de48:	e3a03000 	mov	r3, #0
    de4c:	e5954018 	ldr	r4, [r5, #24]
    de50:	e5853024 	str	r3, [r5, #36]	; 0x24
    de54:	e1540003 	cmp	r4, r3
    de58:	0a000004 	beq	de70 <CUSBDevice::~CUSBDevice()+0x110>
    de5c:	e1a00004 	mov	r0, r4
    de60:	eb000561 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
    de64:	e1a00004 	mov	r0, r4
    de68:	e3a01014 	mov	r1, #20
    de6c:	eb007463 	bl	2b000 <operator delete(void*, unsigned int)>
    de70:	e1a00005 	mov	r0, r5
    de74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    de78:	e3a02088 	mov	r2, #136	; 0x88
    de7c:	e59f100c 	ldr	r1, [pc, #12]	; de90 <CUSBDevice::~CUSBDevice()+0x130>
    de80:	e59f000c 	ldr	r0, [pc, #12]	; de94 <CUSBDevice::~CUSBDevice()+0x134>
    de84:	eb005a47 	bl	247a8 <assertion_failed>
    de88:	00041a0c 	.word	0x00041a0c
    de8c:	0005ce08 	.word	0x0005ce08
    de90:	00041650 	.word	0x00041650
    de94:	00041660 	.word	0x00041660

0000de98 <CUSBDevice::~CUSBDevice()>:
    de98:	e92d4010 	push	{r4, lr}
    de9c:	e1a04000 	mov	r4, r0
    dea0:	ebffffae 	bl	dd60 <CUSBDevice::~CUSBDevice()>
    dea4:	e1a00004 	mov	r0, r4
    dea8:	e3a01058 	mov	r1, #88	; 0x58
    deac:	eb007453 	bl	2b000 <operator delete(void*, unsigned int)>
    deb0:	e1a00004 	mov	r0, r4
    deb4:	e8bd8010 	pop	{r4, pc}

0000deb8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>:
    deb8:	e92d4070 	push	{r4, r5, r6, lr}
    debc:	e1a04000 	mov	r4, r0
    dec0:	e3a05000 	mov	r5, #0
    dec4:	e3a00001 	mov	r0, #1
    dec8:	e1510005 	cmp	r1, r5
    decc:	e5841004 	str	r1, [r4, #4]
    ded0:	e59f108c 	ldr	r1, [pc, #140]	; df64 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xac>
    ded4:	e5843008 	str	r3, [r4, #8]
    ded8:	e5c42015 	strb	r2, [r4, #21]
    dedc:	e5841000 	str	r1, [r4]
    dee0:	e5c4001e 	strb	r0, [r4, #30]
    dee4:	e584500c 	str	r5, [r4, #12]
    dee8:	e5c45014 	strb	r5, [r4, #20]
    deec:	e5845018 	str	r5, [r4, #24]
    def0:	e1c451bc 	strh	r5, [r4, #28]
    def4:	e5845020 	str	r5, [r4, #32]
    def8:	e5845024 	str	r5, [r4, #36]	; 0x24
    defc:	e5845028 	str	r5, [r4, #40]	; 0x28
    df00:	e584502c 	str	r5, [r4, #44]	; 0x2c
    df04:	0a00000e 	beq	df44 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x8c>
    df08:	e3530000 	cmp	r3, #0
    df0c:	0a000010 	beq	df54 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x9c>
    df10:	e3a00014 	mov	r0, #20
    df14:	eb00742b 	bl	2afc8 <operator new(unsigned int)>
    df18:	e1a06000 	mov	r6, r0
    df1c:	e1a01004 	mov	r1, r4
    df20:	eb0004bb 	bl	f214 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    df24:	e5846018 	str	r6, [r4, #24]
    df28:	e284302c 	add	r3, r4, #44	; 0x2c
    df2c:	e2842054 	add	r2, r4, #84	; 0x54
    df30:	e5a35004 	str	r5, [r3, #4]!
    df34:	e1530002 	cmp	r3, r2
    df38:	1afffffc 	bne	df30 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x78>
    df3c:	e1a00004 	mov	r0, r4
    df40:	e8bd8070 	pop	{r4, r5, r6, pc}
    df44:	e3a02038 	mov	r2, #56	; 0x38
    df48:	e59f1018 	ldr	r1, [pc, #24]	; df68 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb0>
    df4c:	e59f0018 	ldr	r0, [pc, #24]	; df6c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb4>
    df50:	eb005a14 	bl	247a8 <assertion_failed>
    df54:	e3a02039 	mov	r2, #57	; 0x39
    df58:	e59f1008 	ldr	r1, [pc, #8]	; df68 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb0>
    df5c:	e59f000c 	ldr	r0, [pc, #12]	; df70 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb8>
    df60:	eb005a10 	bl	247a8 <assertion_failed>
    df64:	00041a0c 	.word	0x00041a0c
    df68:	00041650 	.word	0x00041650
    df6c:	00041394 	.word	0x00041394
    df70:	00041690 	.word	0x00041690

0000df74 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>:
    df74:	e92d4070 	push	{r4, r5, r6, lr}
    df78:	e3a0c000 	mov	ip, #0
    df7c:	e1a04000 	mov	r4, r0
    df80:	e151000c 	cmp	r1, ip
    df84:	e59f0130 	ldr	r0, [pc, #304]	; e0bc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x148>
    df88:	e5841004 	str	r1, [r4, #4]
    df8c:	e59d1010 	ldr	r1, [sp, #16]
    df90:	e584300c 	str	r3, [r4, #12]
    df94:	e5c42015 	strb	r2, [r4, #21]
    df98:	e5840000 	str	r0, [r4]
    df9c:	e5841010 	str	r1, [r4, #16]
    dfa0:	e584c008 	str	ip, [r4, #8]
    dfa4:	e5c4c014 	strb	ip, [r4, #20]
    dfa8:	e584c018 	str	ip, [r4, #24]
    dfac:	e584c024 	str	ip, [r4, #36]	; 0x24
    dfb0:	e584c028 	str	ip, [r4, #40]	; 0x28
    dfb4:	e584c02c 	str	ip, [r4, #44]	; 0x2c
    dfb8:	0a00002f 	beq	e07c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x108>
    dfbc:	e3530000 	cmp	r3, #0
    dfc0:	0a000031 	beq	e08c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x118>
    dfc4:	e1a00003 	mov	r0, r3
    dfc8:	eb000665 	bl	f964 <CUSBFunction::GetDevice() const>
    dfcc:	e3500000 	cmp	r0, #0
    dfd0:	0a000031 	beq	e09c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x128>
    dfd4:	e5d0301c 	ldrb	r3, [r0, #28]
    dfd8:	e5c4301c 	strb	r3, [r4, #28]
    dfdc:	e5d0201d 	ldrb	r2, [r0, #29]
    dfe0:	e3530000 	cmp	r3, #0
    dfe4:	e5c4201d 	strb	r2, [r4, #29]
    dfe8:	e5d0301e 	ldrb	r3, [r0, #30]
    dfec:	e5c4301e 	strb	r3, [r4, #30]
    dff0:	e5903020 	ldr	r3, [r0, #32]
    dff4:	e5843020 	str	r3, [r4, #32]
    dff8:	0a000010 	beq	e040 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xcc>
    dffc:	e5945018 	ldr	r5, [r4, #24]
    e000:	e3550000 	cmp	r5, #0
    e004:	1a000028 	bne	e0ac <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x138>
    e008:	e3a00014 	mov	r0, #20
    e00c:	eb0073ed 	bl	2afc8 <operator new(unsigned int)>
    e010:	e1a01004 	mov	r1, r4
    e014:	e1a06000 	mov	r6, r0
    e018:	eb00047d 	bl	f214 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    e01c:	e1a02005 	mov	r2, r5
    e020:	e5846018 	str	r6, [r4, #24]
    e024:	e284302c 	add	r3, r4, #44	; 0x2c
    e028:	e2841054 	add	r1, r4, #84	; 0x54
    e02c:	e5a32004 	str	r2, [r3, #4]!
    e030:	e1530001 	cmp	r3, r1
    e034:	1afffffc 	bne	e02c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xb8>
    e038:	e1a00004 	mov	r0, r4
    e03c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e040:	e5d03015 	ldrb	r3, [r0, #21]
    e044:	e3530002 	cmp	r3, #2
    e048:	1affffeb 	bne	dffc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    e04c:	e5d43015 	ldrb	r3, [r4, #21]
    e050:	e3530001 	cmp	r3, #1
    e054:	8affffe8 	bhi	dffc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    e058:	e3a02001 	mov	r2, #1
    e05c:	e5943010 	ldr	r3, [r4, #16]
    e060:	e5c4201c 	strb	r2, [r4, #28]
    e064:	e5d02014 	ldrb	r2, [r0, #20]
    e068:	e2833001 	add	r3, r3, #1
    e06c:	e5c4201d 	strb	r2, [r4, #29]
    e070:	e5840020 	str	r0, [r4, #32]
    e074:	e5c4301e 	strb	r3, [r4, #30]
    e078:	eaffffdf 	b	dffc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    e07c:	e3a02057 	mov	r2, #87	; 0x57
    e080:	e59f1038 	ldr	r1, [pc, #56]	; e0c0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    e084:	e59f0038 	ldr	r0, [pc, #56]	; e0c4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x150>
    e088:	eb0059c6 	bl	247a8 <assertion_failed>
    e08c:	e3a02058 	mov	r2, #88	; 0x58
    e090:	e59f1028 	ldr	r1, [pc, #40]	; e0c0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    e094:	e59f002c 	ldr	r0, [pc, #44]	; e0c8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x154>
    e098:	eb0059c2 	bl	247a8 <assertion_failed>
    e09c:	e3a0205b 	mov	r2, #91	; 0x5b
    e0a0:	e59f1018 	ldr	r1, [pc, #24]	; e0c0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    e0a4:	e59f0020 	ldr	r0, [pc, #32]	; e0cc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x158>
    e0a8:	eb0059be 	bl	247a8 <assertion_failed>
    e0ac:	e3a02073 	mov	r2, #115	; 0x73
    e0b0:	e59f1008 	ldr	r1, [pc, #8]	; e0c0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    e0b4:	e59f0014 	ldr	r0, [pc, #20]	; e0d0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x15c>
    e0b8:	eb0059ba 	bl	247a8 <assertion_failed>
    e0bc:	00041a0c 	.word	0x00041a0c
    e0c0:	00041650 	.word	0x00041650
    e0c4:	00041394 	.word	0x00041394
    e0c8:	000416a4 	.word	0x000416a4
    e0cc:	000416b0 	.word	0x000416b0
    e0d0:	000416c0 	.word	0x000416c0

0000e0d4 <CUSBDevice::ReScanDevices()>:
    e0d4:	e92d4070 	push	{r4, r5, r6, lr}
    e0d8:	e3a05000 	mov	r5, #0
    e0dc:	e280402c 	add	r4, r0, #44	; 0x2c
    e0e0:	e2806054 	add	r6, r0, #84	; 0x54
    e0e4:	e5b40004 	ldr	r0, [r4, #4]!
    e0e8:	e3500000 	cmp	r0, #0
    e0ec:	0a000004 	beq	e104 <CUSBDevice::ReScanDevices()+0x30>
    e0f0:	e5903000 	ldr	r3, [r0]
    e0f4:	e5933020 	ldr	r3, [r3, #32]
    e0f8:	e12fff33 	blx	r3
    e0fc:	e3500000 	cmp	r0, #0
    e100:	11a05000 	movne	r5, r0
    e104:	e1540006 	cmp	r4, r6
    e108:	1afffff5 	bne	e0e4 <CUSBDevice::ReScanDevices()+0x10>
    e10c:	e1a00005 	mov	r0, r5
    e110:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e114 <CUSBDevice::RemoveDevice()>:
    e114:	e5903008 	ldr	r3, [r0, #8]
    e118:	e3530000 	cmp	r3, #0
    e11c:	0a000003 	beq	e130 <CUSBDevice::RemoveDevice()+0x1c>
    e120:	e5932000 	ldr	r2, [r3]
    e124:	e1a00003 	mov	r0, r3
    e128:	e592300c 	ldr	r3, [r2, #12]
    e12c:	e12fff13 	bx	r3
    e130:	e590300c 	ldr	r3, [r0, #12]
    e134:	e3530000 	cmp	r3, #0
    e138:	0a000002 	beq	e148 <CUSBDevice::RemoveDevice()+0x34>
    e13c:	e5901010 	ldr	r1, [r0, #16]
    e140:	e1a00003 	mov	r0, r3
    e144:	ea001a12 	b	14994 <CUSBStandardHub::RemoveDevice(unsigned int)>
    e148:	e3a02f7e 	mov	r2, #504	; 0x1f8
    e14c:	e92d4010 	push	{r4, lr}
    e150:	e59f1004 	ldr	r1, [pc, #4]	; e15c <CUSBDevice::RemoveDevice()+0x48>
    e154:	e59f0004 	ldr	r0, [pc, #4]	; e160 <CUSBDevice::RemoveDevice()+0x4c>
    e158:	eb005992 	bl	247a8 <assertion_failed>
    e15c:	00041650 	.word	0x00041650
    e160:	000416a4 	.word	0x000416a4

0000e164 <CUSBDevice::GetName(TDeviceNameSelector) const>:
    e164:	e92d4070 	push	{r4, r5, r6, lr}
    e168:	e1a06000 	mov	r6, r0
    e16c:	e24dd008 	sub	sp, sp, #8
    e170:	e3a00010 	mov	r0, #16
    e174:	e1a04001 	mov	r4, r1
    e178:	eb007392 	bl	2afc8 <operator new(unsigned int)>
    e17c:	e1a05000 	mov	r5, r0
    e180:	eb006661 	bl	27b0c <CString::CString()>
    e184:	e3540000 	cmp	r4, #0
    e188:	0a000012 	beq	e1d8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x74>
    e18c:	e3540001 	cmp	r4, #1
    e190:	1a00002d 	bne	e24c <CUSBDevice::GetName(TDeviceNameSelector) const+0xe8>
    e194:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    e198:	e3510000 	cmp	r1, #0
    e19c:	0a000022 	beq	e22c <CUSBDevice::GetName(TDeviceNameSelector) const+0xc8>
    e1a0:	e5d12004 	ldrb	r2, [r1, #4]
    e1a4:	e2423001 	sub	r3, r2, #1
    e1a8:	e6ef3073 	uxtb	r3, r3
    e1ac:	e35300fd 	cmp	r3, #253	; 0xfd
    e1b0:	8a000017 	bhi	e214 <CUSBDevice::GetName(TDeviceNameSelector) const+0xb0>
    e1b4:	e5d13005 	ldrb	r3, [r1, #5]
    e1b8:	e5d11006 	ldrb	r1, [r1, #6]
    e1bc:	e1a00005 	mov	r0, r5
    e1c0:	e58d1000 	str	r1, [sp]
    e1c4:	e59f1090 	ldr	r1, [pc, #144]	; e25c <CUSBDevice::GetName(TDeviceNameSelector) const+0xf8>
    e1c8:	eb006b99 	bl	29034 <CString::Format(char const*, ...)>
    e1cc:	e1a00005 	mov	r0, r5
    e1d0:	e28dd008 	add	sp, sp, #8
    e1d4:	e8bd8070 	pop	{r4, r5, r6, pc}
    e1d8:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    e1dc:	e3510000 	cmp	r1, #0
    e1e0:	0a000015 	beq	e23c <CUSBDevice::GetName(TDeviceNameSelector) const+0xd8>
    e1e4:	e5d1000b 	ldrb	r0, [r1, #11]
    e1e8:	e5d1300a 	ldrb	r3, [r1, #10]
    e1ec:	e5d12008 	ldrb	r2, [r1, #8]
    e1f0:	e5d11009 	ldrb	r1, [r1, #9]
    e1f4:	e1833400 	orr	r3, r3, r0, lsl #8
    e1f8:	e1822401 	orr	r2, r2, r1, lsl #8
    e1fc:	e1a00005 	mov	r0, r5
    e200:	e59f1058 	ldr	r1, [pc, #88]	; e260 <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
    e204:	eb006b8a 	bl	29034 <CString::Format(char const*, ...)>
    e208:	e1a00005 	mov	r0, r5
    e20c:	e28dd008 	add	sp, sp, #8
    e210:	e8bd8070 	pop	{r4, r5, r6, pc}
    e214:	e1a00005 	mov	r0, r5
    e218:	e59f1044 	ldr	r1, [pc, #68]	; e264 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
    e21c:	eb006658 	bl	27b84 <CString::operator=(char const*)>
    e220:	e1a00005 	mov	r0, r5
    e224:	e28dd008 	add	sp, sp, #8
    e228:	e8bd8070 	pop	{r4, r5, r6, pc}
    e22c:	e59f2034 	ldr	r2, [pc, #52]	; e268 <CUSBDevice::GetName(TDeviceNameSelector) const+0x104>
    e230:	e59f1034 	ldr	r1, [pc, #52]	; e26c <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
    e234:	e59f0034 	ldr	r0, [pc, #52]	; e270 <CUSBDevice::GetName(TDeviceNameSelector) const+0x10c>
    e238:	eb00595a 	bl	247a8 <assertion_failed>
    e23c:	e3a02f81 	mov	r2, #516	; 0x204
    e240:	e59f1024 	ldr	r1, [pc, #36]	; e26c <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
    e244:	e59f0024 	ldr	r0, [pc, #36]	; e270 <CUSBDevice::GetName(TDeviceNameSelector) const+0x10c>
    e248:	eb005956 	bl	247a8 <assertion_failed>
    e24c:	e3a02f86 	mov	r2, #536	; 0x218
    e250:	e59f1014 	ldr	r1, [pc, #20]	; e26c <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
    e254:	e59f0018 	ldr	r0, [pc, #24]	; e274 <CUSBDevice::GetName(TDeviceNameSelector) const+0x110>
    e258:	eb005952 	bl	247a8 <assertion_failed>
    e25c:	000416fc 	.word	0x000416fc
    e260:	000416e8 	.word	0x000416e8
    e264:	000416f4 	.word	0x000416f4
    e268:	0000020b 	.word	0x0000020b
    e26c:	00041650 	.word	0x00041650
    e270:	000416d4 	.word	0x000416d4
    e274:	00041748 	.word	0x00041748

0000e278 <CUSBDevice::GetNames() const>:
    e278:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e27c:	e1a07000 	mov	r7, r0
    e280:	e3a00010 	mov	r0, #16
    e284:	eb00734f 	bl	2afc8 <operator new(unsigned int)>
    e288:	e3a06000 	mov	r6, #0
    e28c:	e1a05000 	mov	r5, r0
    e290:	eb00661d 	bl	27b0c <CString::CString()>
    e294:	e59f80b8 	ldr	r8, [pc, #184]	; e354 <CUSBDevice::GetNames() const+0xdc>
    e298:	e59f90b8 	ldr	r9, [pc, #184]	; e358 <CUSBDevice::GetNames() const+0xe0>
    e29c:	e1a01006 	mov	r1, r6
    e2a0:	e1a00007 	mov	r0, r7
    e2a4:	ebffffae 	bl	e164 <CUSBDevice::GetName(TDeviceNameSelector) const>
    e2a8:	e2504000 	subs	r4, r0, #0
    e2ac:	0a000020 	beq	e334 <CUSBDevice::GetNames() const+0xbc>
    e2b0:	e1a01008 	mov	r1, r8
    e2b4:	eb006683 	bl	27cc8 <CString::Compare(char const*) const>
    e2b8:	e3500000 	cmp	r0, #0
    e2bc:	1a00000d 	bne	e2f8 <CUSBDevice::GetNames() const+0x80>
    e2c0:	e5943000 	ldr	r3, [r4]
    e2c4:	e1a00004 	mov	r0, r4
    e2c8:	e5933004 	ldr	r3, [r3, #4]
    e2cc:	e12fff33 	blx	r3
    e2d0:	e3560001 	cmp	r6, #1
    e2d4:	1a000005 	bne	e2f0 <CUSBDevice::GetNames() const+0x78>
    e2d8:	e1a00005 	mov	r0, r5
    e2dc:	eb006654 	bl	27c34 <CString::GetLength() const>
    e2e0:	e3500000 	cmp	r0, #0
    e2e4:	0a00000d 	beq	e320 <CUSBDevice::GetNames() const+0xa8>
    e2e8:	e1a00005 	mov	r0, r5
    e2ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e2f0:	e3a06001 	mov	r6, #1
    e2f4:	eaffffe8 	b	e29c <CUSBDevice::GetNames() const+0x24>
    e2f8:	e1a00005 	mov	r0, r5
    e2fc:	eb00664c 	bl	27c34 <CString::GetLength() const>
    e300:	e3500000 	cmp	r0, #0
    e304:	1a00000e 	bne	e344 <CUSBDevice::GetNames() const+0xcc>
    e308:	e1a00004 	mov	r0, r4
    e30c:	eb006616 	bl	27b6c <CString::operator char const*() const>
    e310:	e1a01000 	mov	r1, r0
    e314:	e1a00005 	mov	r0, r5
    e318:	eb006649 	bl	27c44 <CString::Append(char const*)>
    e31c:	eaffffe7 	b	e2c0 <CUSBDevice::GetNames() const+0x48>
    e320:	e1a00005 	mov	r0, r5
    e324:	e59f1028 	ldr	r1, [pc, #40]	; e354 <CUSBDevice::GetNames() const+0xdc>
    e328:	eb006615 	bl	27b84 <CString::operator=(char const*)>
    e32c:	e1a00005 	mov	r0, r5
    e330:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e334:	e59f2020 	ldr	r2, [pc, #32]	; e35c <CUSBDevice::GetNames() const+0xe4>
    e338:	e59f1020 	ldr	r1, [pc, #32]	; e360 <CUSBDevice::GetNames() const+0xe8>
    e33c:	e59f0020 	ldr	r0, [pc, #32]	; e364 <CUSBDevice::GetNames() const+0xec>
    e340:	eb005918 	bl	247a8 <assertion_failed>
    e344:	e1a01009 	mov	r1, r9
    e348:	e1a00005 	mov	r0, r5
    e34c:	eb00663c 	bl	27c44 <CString::Append(char const*)>
    e350:	eaffffec 	b	e308 <CUSBDevice::GetNames() const+0x90>
    e354:	000416f4 	.word	0x000416f4
    e358:	00041714 	.word	0x00041714
    e35c:	00000229 	.word	0x00000229
    e360:	00041650 	.word	0x00041650
    e364:	00041708 	.word	0x00041708

0000e368 <CUSBDevice::SetAddress(unsigned char)>:
    e368:	e351003f 	cmp	r1, #63	; 0x3f
    e36c:	8a000001 	bhi	e378 <CUSBDevice::SetAddress(unsigned char)+0x10>
    e370:	e5c01014 	strb	r1, [r0, #20]
    e374:	e12fff1e 	bx	lr
    e378:	e92d4010 	push	{r4, lr}
    e37c:	e59f2008 	ldr	r2, [pc, #8]	; e38c <CUSBDevice::SetAddress(unsigned char)+0x24>
    e380:	e59f1008 	ldr	r1, [pc, #8]	; e390 <CUSBDevice::SetAddress(unsigned char)+0x28>
    e384:	e59f0008 	ldr	r0, [pc, #8]	; e394 <CUSBDevice::SetAddress(unsigned char)+0x2c>
    e388:	eb005906 	bl	247a8 <assertion_failed>
    e38c:	00000243 	.word	0x00000243
    e390:	00041650 	.word	0x00041650
    e394:	00041718 	.word	0x00041718

0000e398 <CUSBDevice::GetAddress() const>:
    e398:	e5d00014 	ldrb	r0, [r0, #20]
    e39c:	e12fff1e 	bx	lr

0000e3a0 <CUSBDevice::GetSpeed() const>:
    e3a0:	e5d00015 	ldrb	r0, [r0, #21]
    e3a4:	e12fff1e 	bx	lr

0000e3a8 <CUSBDevice::IsSplit() const>:
    e3a8:	e5d0001c 	ldrb	r0, [r0, #28]
    e3ac:	e12fff1e 	bx	lr

0000e3b0 <CUSBDevice::GetHubAddress() const>:
    e3b0:	e5d0001d 	ldrb	r0, [r0, #29]
    e3b4:	e12fff1e 	bx	lr

0000e3b8 <CUSBDevice::GetHubPortNumber() const>:
    e3b8:	e5d0001e 	ldrb	r0, [r0, #30]
    e3bc:	e12fff1e 	bx	lr

0000e3c0 <CUSBDevice::GetTTHubDevice() const>:
    e3c0:	e5900020 	ldr	r0, [r0, #32]
    e3c4:	e12fff1e 	bx	lr

0000e3c8 <CUSBDevice::GetEndpoint0() const>:
    e3c8:	e5900018 	ldr	r0, [r0, #24]
    e3cc:	e3500000 	cmp	r0, #0
    e3d0:	112fff1e 	bxne	lr
    e3d4:	e3a02f9b 	mov	r2, #620	; 0x26c
    e3d8:	e92d4010 	push	{r4, lr}
    e3dc:	e59f1004 	ldr	r1, [pc, #4]	; e3e8 <CUSBDevice::GetEndpoint0() const+0x20>
    e3e0:	e59f0004 	ldr	r0, [pc, #4]	; e3ec <CUSBDevice::GetEndpoint0() const+0x24>
    e3e4:	eb0058ef 	bl	247a8 <assertion_failed>
    e3e8:	00041650 	.word	0x00041650
    e3ec:	00041738 	.word	0x00041738

0000e3f0 <CUSBDevice::GetHost() const>:
    e3f0:	e5900004 	ldr	r0, [r0, #4]
    e3f4:	e3500000 	cmp	r0, #0
    e3f8:	112fff1e 	bxne	lr
    e3fc:	e92d4010 	push	{r4, lr}
    e400:	e59f2008 	ldr	r2, [pc, #8]	; e410 <CUSBDevice::GetHost() const+0x20>
    e404:	e59f1008 	ldr	r1, [pc, #8]	; e414 <CUSBDevice::GetHost() const+0x24>
    e408:	e59f0008 	ldr	r0, [pc, #8]	; e418 <CUSBDevice::GetHost() const+0x28>
    e40c:	eb0058e5 	bl	247a8 <assertion_failed>
    e410:	00000272 	.word	0x00000272
    e414:	00041650 	.word	0x00041650
    e418:	00041394 	.word	0x00041394

0000e41c <CUSBDevice::GetDeviceDescriptor() const>:
    e41c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    e420:	e3500000 	cmp	r0, #0
    e424:	112fff1e 	bxne	lr
    e428:	e3a02f9e 	mov	r2, #632	; 0x278
    e42c:	e92d4010 	push	{r4, lr}
    e430:	e59f1004 	ldr	r1, [pc, #4]	; e43c <CUSBDevice::GetDeviceDescriptor() const+0x20>
    e434:	e59f0004 	ldr	r0, [pc, #4]	; e440 <CUSBDevice::GetDeviceDescriptor() const+0x24>
    e438:	eb0058da 	bl	247a8 <assertion_failed>
    e43c:	00041650 	.word	0x00041650
    e440:	000416d4 	.word	0x000416d4

0000e444 <CUSBDevice::GetConfigurationDescriptor() const>:
    e444:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    e448:	e3500000 	cmp	r0, #0
    e44c:	112fff1e 	bxne	lr
    e450:	e92d4010 	push	{r4, lr}
    e454:	e59f2008 	ldr	r2, [pc, #8]	; e464 <CUSBDevice::GetConfigurationDescriptor() const+0x20>
    e458:	e59f1008 	ldr	r1, [pc, #8]	; e468 <CUSBDevice::GetConfigurationDescriptor() const+0x24>
    e45c:	e59f0008 	ldr	r0, [pc, #8]	; e46c <CUSBDevice::GetConfigurationDescriptor() const+0x28>
    e460:	eb0058d0 	bl	247a8 <assertion_failed>
    e464:	0000027e 	.word	0x0000027e
    e468:	00041650 	.word	0x00041650
    e46c:	0004174c 	.word	0x0004174c

0000e470 <CUSBDevice::GetDescriptor(unsigned char)>:
    e470:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e474:	e3500000 	cmp	r0, #0
    e478:	0a000000 	beq	e480 <CUSBDevice::GetDescriptor(unsigned char)+0x10>
    e47c:	ea002573 	b	17a50 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e480:	e3a02fa1 	mov	r2, #644	; 0x284
    e484:	e92d4010 	push	{r4, lr}
    e488:	e59f1004 	ldr	r1, [pc, #4]	; e494 <CUSBDevice::GetDescriptor(unsigned char)+0x24>
    e48c:	e59f0004 	ldr	r0, [pc, #4]	; e498 <CUSBDevice::GetDescriptor(unsigned char)+0x28>
    e490:	eb0058c4 	bl	247a8 <assertion_failed>
    e494:	00041650 	.word	0x00041650
    e498:	00041760 	.word	0x00041760

0000e49c <CUSBDevice::ConfigurationError(char const*) const>:
    e49c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e4a0:	e3500000 	cmp	r0, #0
    e4a4:	0a000000 	beq	e4ac <CUSBDevice::ConfigurationError(char const*) const+0x10>
    e4a8:	ea0025a3 	b	17b3c <CUSBConfigurationParser::Error(char const*) const>
    e4ac:	e92d4010 	push	{r4, lr}
    e4b0:	e59f2008 	ldr	r2, [pc, #8]	; e4c0 <CUSBDevice::ConfigurationError(char const*) const+0x24>
    e4b4:	e59f1008 	ldr	r1, [pc, #8]	; e4c4 <CUSBDevice::ConfigurationError(char const*) const+0x28>
    e4b8:	e59f0008 	ldr	r0, [pc, #8]	; e4c8 <CUSBDevice::ConfigurationError(char const*) const+0x2c>
    e4bc:	eb0058b9 	bl	247a8 <assertion_failed>
    e4c0:	0000028a 	.word	0x0000028a
    e4c4:	00041650 	.word	0x00041650
    e4c8:	00041760 	.word	0x00041760

0000e4cc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
    e4cc:	e92d000c 	push	{r2, r3}
    e4d0:	e92d4070 	push	{r4, r5, r6, lr}
    e4d4:	e24dd020 	sub	sp, sp, #32
    e4d8:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
    e4dc:	e3560000 	cmp	r6, #0
    e4e0:	0a00001d 	beq	e55c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x90>
    e4e4:	e1a04000 	mov	r4, r0
    e4e8:	e28d0010 	add	r0, sp, #16
    e4ec:	e1a05001 	mov	r5, r1
    e4f0:	eb006585 	bl	27b0c <CString::CString()>
    e4f4:	e5d4301e 	ldrb	r3, [r4, #30]
    e4f8:	e59f206c 	ldr	r2, [pc, #108]	; e56c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa0>
    e4fc:	e58d3000 	str	r3, [sp]
    e500:	e59f1068 	ldr	r1, [pc, #104]	; e570 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa4>
    e504:	e5d4301d 	ldrb	r3, [r4, #29]
    e508:	e28d0010 	add	r0, sp, #16
    e50c:	eb006ac8 	bl	29034 <CString::Format(char const*, ...)>
    e510:	e28d3034 	add	r3, sp, #52	; 0x34
    e514:	e58d300c 	str	r3, [sp, #12]
    e518:	eb00618a 	bl	26b48 <CLogger::Get()>
    e51c:	e1a04000 	mov	r4, r0
    e520:	e28d0010 	add	r0, sp, #16
    e524:	eb006590 	bl	27b6c <CString::operator char const*() const>
    e528:	e59dc00c 	ldr	ip, [sp, #12]
    e52c:	e1a01000 	mov	r1, r0
    e530:	e1a03006 	mov	r3, r6
    e534:	e1a00004 	mov	r0, r4
    e538:	e1a02005 	mov	r2, r5
    e53c:	e58dc000 	str	ip, [sp]
    e540:	eb0060ce 	bl	26880 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    e544:	e28d0010 	add	r0, sp, #16
    e548:	eb00653c 	bl	27a40 <CString::~CString()>
    e54c:	e28dd020 	add	sp, sp, #32
    e550:	e8bd4070 	pop	{r4, r5, r6, lr}
    e554:	e28dd008 	add	sp, sp, #8
    e558:	e12fff1e 	bx	lr
    e55c:	e3a02e29 	mov	r2, #656	; 0x290
    e560:	e59f100c 	ldr	r1, [pc, #12]	; e574 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa8>
    e564:	e59f000c 	ldr	r0, [pc, #12]	; e578 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xac>
    e568:	eb00588e 	bl	247a8 <assertion_failed>
    e56c:	00041a1c 	.word	0x00041a1c
    e570:	00041788 	.word	0x00041788
    e574:	00041650 	.word	0x00041650
    e578:	00041778 	.word	0x00041778

0000e57c <CUSBDevice::Initialize()>:
    e57c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e580:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    e584:	e24dd01c 	sub	sp, sp, #28
    e588:	e3550000 	cmp	r5, #0
    e58c:	1a0000aa 	bne	e83c <CUSBDevice::Initialize()+0x2c0>
    e590:	e1a04000 	mov	r4, r0
    e594:	e3a00012 	mov	r0, #18
    e598:	eb00728a 	bl	2afc8 <operator new(unsigned int)>
    e59c:	e5943004 	ldr	r3, [r4, #4]
    e5a0:	e5840024 	str	r0, [r4, #36]	; 0x24
    e5a4:	e3530000 	cmp	r3, #0
    e5a8:	0a0000a7 	beq	e84c <CUSBDevice::Initialize()+0x2d0>
    e5ac:	e5941018 	ldr	r1, [r4, #24]
    e5b0:	e3510000 	cmp	r1, #0
    e5b4:	0a0000a8 	beq	e85c <CUSBDevice::Initialize()+0x2e0>
    e5b8:	e3a02008 	mov	r2, #8
    e5bc:	e3a07080 	mov	r7, #128	; 0x80
    e5c0:	e58d0000 	str	r0, [sp]
    e5c4:	e98d0084 	stmib	sp, {r2, r7}
    e5c8:	e1a00003 	mov	r0, r3
    e5cc:	e3a02001 	mov	r2, #1
    e5d0:	e1a03005 	mov	r3, r5
    e5d4:	e58d500c 	str	r5, [sp, #12]
    e5d8:	eb0010d4 	bl	12930 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e5dc:	e3500008 	cmp	r0, #8
    e5e0:	1a000014 	bne	e638 <CUSBDevice::Initialize()+0xbc>
    e5e4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e5e8:	e5d3a000 	ldrb	sl, [r3]
    e5ec:	e35a0012 	cmp	sl, #18
    e5f0:	1a000002 	bne	e600 <CUSBDevice::Initialize()+0x84>
    e5f4:	e5d36001 	ldrb	r6, [r3, #1]
    e5f8:	e3560001 	cmp	r6, #1
    e5fc:	0a00000f 	beq	e640 <CUSBDevice::Initialize()+0xc4>
    e600:	e59f2624 	ldr	r2, [pc, #1572]	; ec2c <CUSBDevice::Initialize()+0x6b0>
    e604:	e3a01001 	mov	r1, #1
    e608:	e1a00004 	mov	r0, r4
    e60c:	ebffffae 	bl	e4cc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e610:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    e614:	e3500000 	cmp	r0, #0
    e618:	0a000001 	beq	e624 <CUSBDevice::Initialize()+0xa8>
    e61c:	e3a01012 	mov	r1, #18
    e620:	eb007276 	bl	2b000 <operator delete(void*, unsigned int)>
    e624:	e3a05000 	mov	r5, #0
    e628:	e5845024 	str	r5, [r4, #36]	; 0x24
    e62c:	e1a00005 	mov	r0, r5
    e630:	e28dd01c 	add	sp, sp, #28
    e634:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e638:	e59f25f0 	ldr	r2, [pc, #1520]	; ec30 <CUSBDevice::Initialize()+0x6b4>
    e63c:	eafffff0 	b	e604 <CUSBDevice::Initialize()+0x88>
    e640:	e5d31007 	ldrb	r1, [r3, #7]
    e644:	e5940018 	ldr	r0, [r4, #24]
    e648:	eb000378 	bl	f430 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
    e64c:	e3500000 	cmp	r0, #0
    e650:	0a000088 	beq	e878 <CUSBDevice::Initialize()+0x2fc>
    e654:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e658:	e58d500c 	str	r5, [sp, #12]
    e65c:	e88d0408 	stm	sp, {r3, sl}
    e660:	e58d7008 	str	r7, [sp, #8]
    e664:	e1a03005 	mov	r3, r5
    e668:	e1a02006 	mov	r2, r6
    e66c:	e5941018 	ldr	r1, [r4, #24]
    e670:	e5940004 	ldr	r0, [r4, #4]
    e674:	eb0010ad 	bl	12930 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e678:	e3500012 	cmp	r0, #18
    e67c:	1a00007a 	bne	e86c <CUSBDevice::Initialize()+0x2f0>
    e680:	e59fc5ac 	ldr	ip, [pc, #1452]	; ec34 <CUSBDevice::Initialize()+0x6b8>
    e684:	e1a0e006 	mov	lr, r6
    e688:	e89c0005 	ldm	ip, {r0, r2}
    e68c:	ea000002 	b	e69c <CUSBDevice::Initialize()+0x120>
    e690:	e2866001 	add	r6, r6, #1
    e694:	e3560040 	cmp	r6, #64	; 0x40
    e698:	0a000085 	beq	e8b4 <CUSBDevice::Initialize()+0x338>
    e69c:	e1a09005 	mov	r9, r5
    e6a0:	e266a020 	rsb	sl, r6, #32
    e6a4:	e1a03630 	lsr	r3, r0, r6
    e6a8:	e1833a12 	orr	r3, r3, r2, lsl sl
    e6ac:	e2461020 	sub	r1, r6, #32
    e6b0:	e1833132 	orr	r3, r3, r2, lsr r1
    e6b4:	e2038001 	and	r8, r3, #1
    e6b8:	e1983009 	orrs	r3, r8, r9
    e6bc:	e6ef7076 	uxtb	r7, r6
    e6c0:	1afffff2 	bne	e690 <CUSBDevice::Initialize()+0x114>
    e6c4:	e1a0111e 	lsl	r1, lr, r1
    e6c8:	e1811a3e 	orr	r1, r1, lr, lsr sl
    e6cc:	e1813002 	orr	r3, r1, r2
    e6d0:	e180e61e 	orr	lr, r0, lr, lsl r6
    e6d4:	e1a02007 	mov	r2, r7
    e6d8:	e5940004 	ldr	r0, [r4, #4]
    e6dc:	e5941018 	ldr	r1, [r4, #24]
    e6e0:	e58c3004 	str	r3, [ip, #4]
    e6e4:	e58ce000 	str	lr, [ip]
    e6e8:	eb00109e 	bl	12968 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
    e6ec:	e2505000 	subs	r5, r0, #0
    e6f0:	0a00007f 	beq	e8f4 <CUSBDevice::Initialize()+0x378>
    e6f4:	e5945028 	ldr	r5, [r4, #40]	; 0x28
    e6f8:	e5c47014 	strb	r7, [r4, #20]
    e6fc:	e3550000 	cmp	r5, #0
    e700:	1a000081 	bne	e90c <CUSBDevice::Initialize()+0x390>
    e704:	e3a00009 	mov	r0, #9
    e708:	eb00722e 	bl	2afc8 <operator new(unsigned int)>
    e70c:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    e710:	e5840028 	str	r0, [r4, #40]	; 0x28
    e714:	e5d12008 	ldrb	r2, [r1, #8]
    e718:	e5d1c009 	ldrb	ip, [r1, #9]
    e71c:	e59f3514 	ldr	r3, [pc, #1300]	; ec38 <CUSBDevice::Initialize()+0x6bc>
    e720:	e182240c 	orr	r2, r2, ip, lsl #8
    e724:	e1520003 	cmp	r2, r3
    e728:	1a000006 	bne	e748 <CUSBDevice::Initialize()+0x1cc>
    e72c:	e5d1500a 	ldrb	r5, [r1, #10]
    e730:	e5d1200b 	ldrb	r2, [r1, #11]
    e734:	e59f3500 	ldr	r3, [pc, #1280]	; ec3c <CUSBDevice::Initialize()+0x6c0>
    e738:	e1855402 	orr	r5, r5, r2, lsl #8
    e73c:	e0455003 	sub	r5, r5, r3
    e740:	e16f5f15 	clz	r5, r5
    e744:	e1a052a5 	lsr	r5, r5, #5
    e748:	e3a06009 	mov	r6, #9
    e74c:	e3a08000 	mov	r8, #0
    e750:	e3a07080 	mov	r7, #128	; 0x80
    e754:	e88d01c1 	stm	sp, {r0, r6, r7, r8}
    e758:	e1a03005 	mov	r3, r5
    e75c:	e3a02002 	mov	r2, #2
    e760:	e5941018 	ldr	r1, [r4, #24]
    e764:	e5940004 	ldr	r0, [r4, #4]
    e768:	eb001070 	bl	12930 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e76c:	e1500006 	cmp	r0, r6
    e770:	1a000055 	bne	e8cc <CUSBDevice::Initialize()+0x350>
    e774:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    e778:	e5d06000 	ldrb	r6, [r0]
    e77c:	e3560009 	cmp	r6, #9
    e780:	1a00003f 	bne	e884 <CUSBDevice::Initialize()+0x308>
    e784:	e5d0a001 	ldrb	sl, [r0, #1]
    e788:	e35a0002 	cmp	sl, #2
    e78c:	1a00003c 	bne	e884 <CUSBDevice::Initialize()+0x308>
    e790:	e5d09002 	ldrb	r9, [r0, #2]
    e794:	e5d03003 	ldrb	r3, [r0, #3]
    e798:	e1899403 	orr	r9, r9, r3, lsl #8
    e79c:	e3590c02 	cmp	r9, #512	; 0x200
    e7a0:	8a000037 	bhi	e884 <CUSBDevice::Initialize()+0x308>
    e7a4:	e1a01006 	mov	r1, r6
    e7a8:	eb007214 	bl	2b000 <operator delete(void*, unsigned int)>
    e7ac:	e1a00009 	mov	r0, r9
    e7b0:	eb00720a 	bl	2afe0 <operator new[](unsigned int)>
    e7b4:	e58d800c 	str	r8, [sp, #12]
    e7b8:	e5840028 	str	r0, [r4, #40]	; 0x28
    e7bc:	e58d0000 	str	r0, [sp]
    e7c0:	e58d7008 	str	r7, [sp, #8]
    e7c4:	e58d9004 	str	r9, [sp, #4]
    e7c8:	e1a03005 	mov	r3, r5
    e7cc:	e1a0200a 	mov	r2, sl
    e7d0:	e5941018 	ldr	r1, [r4, #24]
    e7d4:	e5940004 	ldr	r0, [r4, #4]
    e7d8:	eb001054 	bl	12930 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e7dc:	e1500009 	cmp	r0, r9
    e7e0:	e1a05000 	mov	r5, r0
    e7e4:	159f2454 	ldrne	r2, [pc, #1108]	; ec40 <CUSBDevice::Initialize()+0x6c4>
    e7e8:	1a000026 	bne	e888 <CUSBDevice::Initialize()+0x30c>
    e7ec:	e594902c 	ldr	r9, [r4, #44]	; 0x2c
    e7f0:	e3590000 	cmp	r9, #0
    e7f4:	1a0000d5 	bne	eb50 <CUSBDevice::Initialize()+0x5d4>
    e7f8:	e3a0001c 	mov	r0, #28
    e7fc:	eb0071f1 	bl	2afc8 <operator new(unsigned int)>
    e800:	e1a06000 	mov	r6, r0
    e804:	e1a02005 	mov	r2, r5
    e808:	e5941028 	ldr	r1, [r4, #40]	; 0x28
    e80c:	eb002421 	bl	17898 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
    e810:	e1a00006 	mov	r0, r6
    e814:	e584602c 	str	r6, [r4, #44]	; 0x2c
    e818:	eb00248a 	bl	17a48 <CUSBConfigurationParser::IsValid() const>
    e81c:	e2505000 	subs	r5, r0, #0
    e820:	1a00003d 	bne	e91c <CUSBDevice::Initialize()+0x3a0>
    e824:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e828:	e3500000 	cmp	r0, #0
    e82c:	0a0000e1 	beq	ebb8 <CUSBDevice::Initialize()+0x63c>
    e830:	e59f140c 	ldr	r1, [pc, #1036]	; ec44 <CUSBDevice::Initialize()+0x6c8>
    e834:	eb0024c0 	bl	17b3c <CUSBConfigurationParser::Error(char const*) const>
    e838:	eaffff7b 	b	e62c <CUSBDevice::Initialize()+0xb0>
    e83c:	e3a020a7 	mov	r2, #167	; 0xa7
    e840:	e59f1400 	ldr	r1, [pc, #1024]	; ec48 <CUSBDevice::Initialize()+0x6cc>
    e844:	e59f0400 	ldr	r0, [pc, #1024]	; ec4c <CUSBDevice::Initialize()+0x6d0>
    e848:	eb0057d6 	bl	247a8 <assertion_failed>
    e84c:	e3a020ab 	mov	r2, #171	; 0xab
    e850:	e59f13f0 	ldr	r1, [pc, #1008]	; ec48 <CUSBDevice::Initialize()+0x6cc>
    e854:	e59f03f4 	ldr	r0, [pc, #1012]	; ec50 <CUSBDevice::Initialize()+0x6d4>
    e858:	eb0057d2 	bl	247a8 <assertion_failed>
    e85c:	e3a020ac 	mov	r2, #172	; 0xac
    e860:	e59f13e0 	ldr	r1, [pc, #992]	; ec48 <CUSBDevice::Initialize()+0x6cc>
    e864:	e59f03e8 	ldr	r0, [pc, #1000]	; ec54 <CUSBDevice::Initialize()+0x6d8>
    e868:	eb0057ce 	bl	247a8 <assertion_failed>
    e86c:	e1a01006 	mov	r1, r6
    e870:	e59f23e0 	ldr	r2, [pc, #992]	; ec58 <CUSBDevice::Initialize()+0x6dc>
    e874:	eaffff63 	b	e608 <CUSBDevice::Initialize()+0x8c>
    e878:	e1a01006 	mov	r1, r6
    e87c:	e59f23d8 	ldr	r2, [pc, #984]	; ec5c <CUSBDevice::Initialize()+0x6e0>
    e880:	eaffff60 	b	e608 <CUSBDevice::Initialize()+0x8c>
    e884:	e59f23d4 	ldr	r2, [pc, #980]	; ec60 <CUSBDevice::Initialize()+0x6e4>
    e888:	e1a00004 	mov	r0, r4
    e88c:	e3a01001 	mov	r1, #1
    e890:	ebffff0d 	bl	e4cc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e894:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    e898:	e3500000 	cmp	r0, #0
    e89c:	0a000001 	beq	e8a8 <CUSBDevice::Initialize()+0x32c>
    e8a0:	e3a01009 	mov	r1, #9
    e8a4:	eb0071d5 	bl	2b000 <operator delete(void*, unsigned int)>
    e8a8:	e3a05000 	mov	r5, #0
    e8ac:	e5845028 	str	r5, [r4, #40]	; 0x28
    e8b0:	eaffff5d 	b	e62c <CUSBDevice::Initialize()+0xb0>
    e8b4:	e1a00004 	mov	r0, r4
    e8b8:	e3a01001 	mov	r1, #1
    e8bc:	e59f23a0 	ldr	r2, [pc, #928]	; ec64 <CUSBDevice::Initialize()+0x6e8>
    e8c0:	ebffff01 	bl	e4cc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e8c4:	e3a05000 	mov	r5, #0
    e8c8:	eaffff57 	b	e62c <CUSBDevice::Initialize()+0xb0>
    e8cc:	e1a00004 	mov	r0, r4
    e8d0:	e3a01001 	mov	r1, #1
    e8d4:	e59f238c 	ldr	r2, [pc, #908]	; ec68 <CUSBDevice::Initialize()+0x6ec>
    e8d8:	ebfffefb 	bl	e4cc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e8dc:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    e8e0:	e1500008 	cmp	r0, r8
    e8e4:	0affffef 	beq	e8a8 <CUSBDevice::Initialize()+0x32c>
    e8e8:	e1a01006 	mov	r1, r6
    e8ec:	eb0071c3 	bl	2b000 <operator delete(void*, unsigned int)>
    e8f0:	eaffffec 	b	e8a8 <CUSBDevice::Initialize()+0x32c>
    e8f4:	e1a03006 	mov	r3, r6
    e8f8:	e1a00004 	mov	r0, r4
    e8fc:	e3a01001 	mov	r1, #1
    e900:	e59f2364 	ldr	r2, [pc, #868]	; ec6c <CUSBDevice::Initialize()+0x6f0>
    e904:	ebfffef0 	bl	e4cc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e908:	eaffff47 	b	e62c <CUSBDevice::Initialize()+0xb0>
    e90c:	e3a02c01 	mov	r2, #256	; 0x100
    e910:	e59f1330 	ldr	r1, [pc, #816]	; ec48 <CUSBDevice::Initialize()+0x6cc>
    e914:	e59f0354 	ldr	r0, [pc, #852]	; ec70 <CUSBDevice::Initialize()+0x6f4>
    e918:	eb0057a2 	bl	247a8 <assertion_failed>
    e91c:	e1a00004 	mov	r0, r4
    e920:	ebfffe54 	bl	e278 <CUSBDevice::GetNames() const>
    e924:	e2506000 	subs	r6, r0, #0
    e928:	0a0000b3 	beq	ebfc <CUSBDevice::Initialize()+0x680>
    e92c:	eb00648e 	bl	27b6c <CString::operator char const*() const>
    e930:	e3a01003 	mov	r1, #3
    e934:	e1a03000 	mov	r3, r0
    e938:	e59f2334 	ldr	r2, [pc, #820]	; ec74 <CUSBDevice::Initialize()+0x6f8>
    e93c:	e1a00004 	mov	r0, r4
    e940:	ebfffee1 	bl	e4cc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e944:	e5963000 	ldr	r3, [r6]
    e948:	e1a00006 	mov	r0, r6
    e94c:	e5933004 	ldr	r3, [r3, #4]
    e950:	e1a08009 	mov	r8, r9
    e954:	e1a07009 	mov	r7, r9
    e958:	e12fff33 	blx	r3
    e95c:	e1a09005 	mov	r9, r5
    e960:	e59fb310 	ldr	fp, [pc, #784]	; ec78 <CUSBDevice::Initialize()+0x6fc>
    e964:	e59fa310 	ldr	sl, [pc, #784]	; ec7c <CUSBDevice::Initialize()+0x700>
    e968:	e3a01004 	mov	r1, #4
    e96c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e970:	eb002436 	bl	17a50 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e974:	e3500000 	cmp	r0, #0
    e978:	0a000092 	beq	ebc8 <CUSBDevice::Initialize()+0x64c>
    e97c:	e5d03002 	ldrb	r3, [r0, #2]
    e980:	e1530007 	cmp	r3, r7
    e984:	21a05003 	movcs	r5, r3
    e988:	31a05007 	movcc	r5, r7
    e98c:	3a000051 	bcc	ead8 <CUSBDevice::Initialize()+0x55c>
    e990:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    e994:	e3530000 	cmp	r3, #0
    e998:	0a000068 	beq	eb40 <CUSBDevice::Initialize()+0x5c4>
    e99c:	e0846108 	add	r6, r4, r8, lsl #2
    e9a0:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    e9a4:	e3530000 	cmp	r3, #0
    e9a8:	1a000060 	bne	eb30 <CUSBDevice::Initialize()+0x5b4>
    e9ac:	e3a00010 	mov	r0, #16
    e9b0:	eb007184 	bl	2afc8 <operator new(unsigned int)>
    e9b4:	e1a07000 	mov	r7, r0
    e9b8:	e1a01004 	mov	r1, r4
    e9bc:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    e9c0:	eb00035c 	bl	f738 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    e9c4:	e3580000 	cmp	r8, #0
    e9c8:	e5867030 	str	r7, [r6, #48]	; 0x30
    e9cc:	1a000026 	bne	ea6c <CUSBDevice::Initialize()+0x4f0>
    e9d0:	e1a01008 	mov	r1, r8
    e9d4:	e1a00004 	mov	r0, r4
    e9d8:	ebfffde1 	bl	e164 <CUSBDevice::GetName(TDeviceNameSelector) const>
    e9dc:	e1a01000 	mov	r1, r0
    e9e0:	e1a00007 	mov	r0, r7
    e9e4:	eb0000f1 	bl	edb0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    e9e8:	e2507000 	subs	r7, r0, #0
    e9ec:	0a000015 	beq	ea48 <CUSBDevice::Initialize()+0x4cc>
    e9f0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    e9f4:	e3530000 	cmp	r3, #0
    e9f8:	0a000058 	beq	eb60 <CUSBDevice::Initialize()+0x5e4>
    e9fc:	e5932000 	ldr	r2, [r3]
    ea00:	e1a00003 	mov	r0, r3
    ea04:	e5923004 	ldr	r3, [r2, #4]
    ea08:	e12fff33 	blx	r3
    ea0c:	e3570000 	cmp	r7, #0
    ea10:	0a00007d 	beq	ec0c <CUSBDevice::Initialize()+0x690>
    ea14:	e5973000 	ldr	r3, [r7]
    ea18:	e1a00007 	mov	r0, r7
    ea1c:	e5933018 	ldr	r3, [r3, #24]
    ea20:	e5867030 	str	r7, [r6, #48]	; 0x30
    ea24:	e12fff33 	blx	r3
    ea28:	e2503000 	subs	r3, r0, #0
    ea2c:	0a000053 	beq	eb80 <CUSBDevice::Initialize()+0x604>
    ea30:	e2888001 	add	r8, r8, #1
    ea34:	e358000a 	cmp	r8, #10
    ea38:	0a000075 	beq	ec14 <CUSBDevice::Initialize()+0x698>
    ea3c:	e2855001 	add	r5, r5, #1
    ea40:	e6ef7075 	uxtb	r7, r5
    ea44:	eaffffc7 	b	e968 <CUSBDevice::Initialize()+0x3ec>
    ea48:	e3a01001 	mov	r1, #1
    ea4c:	e1a00004 	mov	r0, r4
    ea50:	e5947030 	ldr	r7, [r4, #48]	; 0x30
    ea54:	ebfffdc2 	bl	e164 <CUSBDevice::GetName(TDeviceNameSelector) const>
    ea58:	e1a01000 	mov	r1, r0
    ea5c:	e1a00007 	mov	r0, r7
    ea60:	eb0000d2 	bl	edb0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    ea64:	e2507000 	subs	r7, r0, #0
    ea68:	1affffe0 	bne	e9f0 <CUSBDevice::Initialize()+0x474>
    ea6c:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    ea70:	eb000391 	bl	f8bc <CUSBFunction::GetInterfaceName() const>
    ea74:	e2507000 	subs	r7, r0, #0
    ea78:	0a00005b 	beq	ebec <CUSBDevice::Initialize()+0x670>
    ea7c:	e1a0100a 	mov	r1, sl
    ea80:	eb006490 	bl	27cc8 <CString::Compare(char const*) const>
    ea84:	e2503000 	subs	r3, r0, #0
    ea88:	e58d3014 	str	r3, [sp, #20]
    ea8c:	1a000018 	bne	eaf4 <CUSBDevice::Initialize()+0x578>
    ea90:	e5973000 	ldr	r3, [r7]
    ea94:	e1a00007 	mov	r0, r7
    ea98:	e5933004 	ldr	r3, [r3, #4]
    ea9c:	e12fff33 	blx	r3
    eaa0:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    eaa4:	e3500000 	cmp	r0, #0
    eaa8:	0a000004 	beq	eac0 <CUSBDevice::Initialize()+0x544>
    eaac:	e5903000 	ldr	r3, [r0]
    eab0:	e5933004 	ldr	r3, [r3, #4]
    eab4:	e12fff33 	blx	r3
    eab8:	e59d3014 	ldr	r3, [sp, #20]
    eabc:	e5863030 	str	r3, [r6, #48]	; 0x30
    eac0:	e3a01002 	mov	r1, #2
    eac4:	e1a00004 	mov	r0, r4
    eac8:	e59f21b0 	ldr	r2, [pc, #432]	; ec80 <CUSBDevice::Initialize()+0x704>
    eacc:	e1a07005 	mov	r7, r5
    ead0:	ebfffe7d 	bl	e4cc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ead4:	eaffffa3 	b	e968 <CUSBDevice::Initialize()+0x3ec>
    ead8:	e5d03003 	ldrb	r3, [r0, #3]
    eadc:	e3a01004 	mov	r1, #4
    eae0:	e1a00004 	mov	r0, r4
    eae4:	e59f2198 	ldr	r2, [pc, #408]	; ec84 <CUSBDevice::Initialize()+0x708>
    eae8:	e1a07005 	mov	r7, r5
    eaec:	ebfffe76 	bl	e4cc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    eaf0:	eaffff9c 	b	e968 <CUSBDevice::Initialize()+0x3ec>
    eaf4:	e1a00007 	mov	r0, r7
    eaf8:	eb00641b 	bl	27b6c <CString::operator char const*() const>
    eafc:	e3a01003 	mov	r1, #3
    eb00:	e1a03000 	mov	r3, r0
    eb04:	e59f217c 	ldr	r2, [pc, #380]	; ec88 <CUSBDevice::Initialize()+0x70c>
    eb08:	e1a00004 	mov	r0, r4
    eb0c:	ebfffe6e 	bl	e4cc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    eb10:	e1a01007 	mov	r1, r7
    eb14:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    eb18:	eb0000a4 	bl	edb0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    eb1c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    eb20:	e1a07000 	mov	r7, r0
    eb24:	e3530000 	cmp	r3, #0
    eb28:	1affffb3 	bne	e9fc <CUSBDevice::Initialize()+0x480>
    eb2c:	eaffffb6 	b	ea0c <CUSBDevice::Initialize()+0x490>
    eb30:	e59f2154 	ldr	r2, [pc, #340]	; ec8c <CUSBDevice::Initialize()+0x710>
    eb34:	e59f110c 	ldr	r1, [pc, #268]	; ec48 <CUSBDevice::Initialize()+0x6cc>
    eb38:	e59f0150 	ldr	r0, [pc, #336]	; ec90 <CUSBDevice::Initialize()+0x714>
    eb3c:	eb005719 	bl	247a8 <assertion_failed>
    eb40:	e59f214c 	ldr	r2, [pc, #332]	; ec94 <CUSBDevice::Initialize()+0x718>
    eb44:	e59f10fc 	ldr	r1, [pc, #252]	; ec48 <CUSBDevice::Initialize()+0x6cc>
    eb48:	e59f0148 	ldr	r0, [pc, #328]	; ec98 <CUSBDevice::Initialize()+0x71c>
    eb4c:	eb005715 	bl	247a8 <assertion_failed>
    eb50:	e59f2144 	ldr	r2, [pc, #324]	; ec9c <CUSBDevice::Initialize()+0x720>
    eb54:	e59f10ec 	ldr	r1, [pc, #236]	; ec48 <CUSBDevice::Initialize()+0x6cc>
    eb58:	e59f0140 	ldr	r0, [pc, #320]	; eca0 <CUSBDevice::Initialize()+0x724>
    eb5c:	eb005711 	bl	247a8 <assertion_failed>
    eb60:	e5973000 	ldr	r3, [r7]
    eb64:	e1a00007 	mov	r0, r7
    eb68:	e5933018 	ldr	r3, [r3, #24]
    eb6c:	e5847030 	str	r7, [r4, #48]	; 0x30
    eb70:	e12fff33 	blx	r3
    eb74:	e3500000 	cmp	r0, #0
    eb78:	13a08001 	movne	r8, #1
    eb7c:	1affffae 	bne	ea3c <CUSBDevice::Initialize()+0x4c0>
    eb80:	e1a00004 	mov	r0, r4
    eb84:	e1a0200b 	mov	r2, fp
    eb88:	e3a01001 	mov	r1, #1
    eb8c:	ebfffe4e 	bl	e4cc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    eb90:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    eb94:	e3500000 	cmp	r0, #0
    eb98:	0a000002 	beq	eba8 <CUSBDevice::Initialize()+0x62c>
    eb9c:	e5903000 	ldr	r3, [r0]
    eba0:	e5933004 	ldr	r3, [r3, #4]
    eba4:	e12fff33 	blx	r3
    eba8:	e3a03000 	mov	r3, #0
    ebac:	e1a07005 	mov	r7, r5
    ebb0:	e5863030 	str	r3, [r6, #48]	; 0x30
    ebb4:	eaffff6b 	b	e968 <CUSBDevice::Initialize()+0x3ec>
    ebb8:	e59f20e4 	ldr	r2, [pc, #228]	; eca4 <CUSBDevice::Initialize()+0x728>
    ebbc:	e59f1084 	ldr	r1, [pc, #132]	; ec48 <CUSBDevice::Initialize()+0x6cc>
    ebc0:	e59f00d0 	ldr	r0, [pc, #208]	; ec98 <CUSBDevice::Initialize()+0x71c>
    ebc4:	eb0056f7 	bl	247a8 <assertion_failed>
    ebc8:	e3580000 	cmp	r8, #0
    ebcc:	e1a05009 	mov	r5, r9
    ebd0:	1afffe95 	bne	e62c <CUSBDevice::Initialize()+0xb0>
    ebd4:	e1a00004 	mov	r0, r4
    ebd8:	e3a01002 	mov	r1, #2
    ebdc:	e59f20c4 	ldr	r2, [pc, #196]	; eca8 <CUSBDevice::Initialize()+0x72c>
    ebe0:	e1a05008 	mov	r5, r8
    ebe4:	ebfffe38 	bl	e4cc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ebe8:	eafffe8f 	b	e62c <CUSBDevice::Initialize()+0xb0>
    ebec:	e3a02d06 	mov	r2, #384	; 0x180
    ebf0:	e59f1050 	ldr	r1, [pc, #80]	; ec48 <CUSBDevice::Initialize()+0x6cc>
    ebf4:	e59f00b0 	ldr	r0, [pc, #176]	; ecac <CUSBDevice::Initialize()+0x730>
    ebf8:	eb0056ea 	bl	247a8 <assertion_failed>
    ebfc:	e59f20ac 	ldr	r2, [pc, #172]	; ecb0 <CUSBDevice::Initialize()+0x734>
    ec00:	e59f1040 	ldr	r1, [pc, #64]	; ec48 <CUSBDevice::Initialize()+0x6cc>
    ec04:	e59f00a8 	ldr	r0, [pc, #168]	; ecb4 <CUSBDevice::Initialize()+0x738>
    ec08:	eb0056e6 	bl	247a8 <assertion_failed>
    ec0c:	e5867030 	str	r7, [r6, #48]	; 0x30
    ec10:	eaffffaa 	b	eac0 <CUSBDevice::Initialize()+0x544>
    ec14:	e1a00004 	mov	r0, r4
    ec18:	e3a01002 	mov	r1, #2
    ec1c:	e59f2094 	ldr	r2, [pc, #148]	; ecb8 <CUSBDevice::Initialize()+0x73c>
    ec20:	e1a05003 	mov	r5, r3
    ec24:	ebfffe28 	bl	e4cc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ec28:	eafffe7f 	b	e62c <CUSBDevice::Initialize()+0xb0>
    ec2c:	000417cc 	.word	0x000417cc
    ec30:	000417a4 	.word	0x000417a4
    ec34:	0005ce08 	.word	0x0005ce08
    ec38:	00000525 	.word	0x00000525
    ec3c:	0000a4a2 	.word	0x0000a4a2
    ec40:	000418ac 	.word	0x000418ac
    ec44:	00041a1c 	.word	0x00041a1c
    ec48:	00041650 	.word	0x00041650
    ec4c:	00041790 	.word	0x00041790
    ec50:	00041394 	.word	0x00041394
    ec54:	00041738 	.word	0x00041738
    ec58:	00041810 	.word	0x00041810
    ec5c:	000417e8 	.word	0x000417e8
    ec60:	00041888 	.word	0x00041888
    ec64:	000419d0 	.word	0x000419d0
    ec68:	0004185c 	.word	0x0004185c
    ec6c:	00041830 	.word	0x00041830
    ec70:	00041848 	.word	0x00041848
    ec74:	000418f4 	.word	0x000418f4
    ec78:	00041970 	.word	0x00041970
    ec7c:	000416f4 	.word	0x000416f4
    ec80:	00041954 	.word	0x00041954
    ec84:	00041904 	.word	0x00041904
    ec88:	00041940 	.word	0x00041940
    ec8c:	0000016e 	.word	0x0000016e
    ec90:	00041924 	.word	0x00041924
    ec94:	0000016d 	.word	0x0000016d
    ec98:	00041760 	.word	0x00041760
    ec9c:	0000013e 	.word	0x0000013e
    eca0:	000418d0 	.word	0x000418d0
    eca4:	0000028a 	.word	0x0000028a
    eca8:	000419ac 	.word	0x000419ac
    ecac:	00041708 	.word	0x00041708
    ecb0:	0000014a 	.word	0x0000014a
    ecb4:	000418e8 	.word	0x000418e8
    ecb8:	0004198c 	.word	0x0004198c

0000ecbc <CUSBDevice::Configure()>:
    ecbc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ecc0:	e1a05000 	mov	r5, r0
    ecc4:	e5900004 	ldr	r0, [r0, #4]
    ecc8:	e3500000 	cmp	r0, #0
    eccc:	0a000029 	beq	ed78 <CUSBDevice::Configure()+0xbc>
    ecd0:	e5951018 	ldr	r1, [r5, #24]
    ecd4:	e3510000 	cmp	r1, #0
    ecd8:	0a00002a 	beq	ed88 <CUSBDevice::Configure()+0xcc>
    ecdc:	e5956028 	ldr	r6, [r5, #40]	; 0x28
    ece0:	e3560000 	cmp	r6, #0
    ece4:	0a000019 	beq	ed50 <CUSBDevice::Configure()+0x94>
    ece8:	e5d62005 	ldrb	r2, [r6, #5]
    ecec:	eb000f30 	bl	129b4 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    ecf0:	e2506000 	subs	r6, r0, #0
    ecf4:	0a000017 	beq	ed58 <CUSBDevice::Configure()+0x9c>
    ecf8:	e3a06000 	mov	r6, #0
    ecfc:	e1a07006 	mov	r7, r6
    ed00:	e285402c 	add	r4, r5, #44	; 0x2c
    ed04:	e2855054 	add	r5, r5, #84	; 0x54
    ed08:	e5b40004 	ldr	r0, [r4, #4]!
    ed0c:	e3500000 	cmp	r0, #0
    ed10:	0a00000c 	beq	ed48 <CUSBDevice::Configure()+0x8c>
    ed14:	e5903000 	ldr	r3, [r0]
    ed18:	e593301c 	ldr	r3, [r3, #28]
    ed1c:	e12fff33 	blx	r3
    ed20:	e3500000 	cmp	r0, #0
    ed24:	11a06000 	movne	r6, r0
    ed28:	1a000006 	bne	ed48 <CUSBDevice::Configure()+0x8c>
    ed2c:	e5940000 	ldr	r0, [r4]
    ed30:	e3500000 	cmp	r0, #0
    ed34:	0a000002 	beq	ed44 <CUSBDevice::Configure()+0x88>
    ed38:	e5903000 	ldr	r3, [r0]
    ed3c:	e5933004 	ldr	r3, [r3, #4]
    ed40:	e12fff33 	blx	r3
    ed44:	e5847000 	str	r7, [r4]
    ed48:	e1540005 	cmp	r4, r5
    ed4c:	1affffed 	bne	ed08 <CUSBDevice::Configure()+0x4c>
    ed50:	e1a00006 	mov	r0, r6
    ed54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ed58:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    ed5c:	e1a00005 	mov	r0, r5
    ed60:	e3a01001 	mov	r1, #1
    ed64:	e5d33005 	ldrb	r3, [r3, #5]
    ed68:	e59f2028 	ldr	r2, [pc, #40]	; ed98 <CUSBDevice::Configure()+0xdc>
    ed6c:	ebfffdd6 	bl	e4cc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ed70:	e1a00006 	mov	r0, r6
    ed74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ed78:	e59f201c 	ldr	r2, [pc, #28]	; ed9c <CUSBDevice::Configure()+0xe0>
    ed7c:	e59f101c 	ldr	r1, [pc, #28]	; eda0 <CUSBDevice::Configure()+0xe4>
    ed80:	e59f001c 	ldr	r0, [pc, #28]	; eda4 <CUSBDevice::Configure()+0xe8>
    ed84:	eb005687 	bl	247a8 <assertion_failed>
    ed88:	e59f2018 	ldr	r2, [pc, #24]	; eda8 <CUSBDevice::Configure()+0xec>
    ed8c:	e59f100c 	ldr	r1, [pc, #12]	; eda0 <CUSBDevice::Configure()+0xe4>
    ed90:	e59f0014 	ldr	r0, [pc, #20]	; edac <CUSBDevice::Configure()+0xf0>
    ed94:	eb005683 	bl	247a8 <assertion_failed>
    ed98:	000419e4 	.word	0x000419e4
    ed9c:	000001b9 	.word	0x000001b9
    eda0:	00041650 	.word	0x00041650
    eda4:	00041394 	.word	0x00041394
    eda8:	000001ba 	.word	0x000001ba
    edac:	00041738 	.word	0x00041738

0000edb0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
    edb0:	e92d4070 	push	{r4, r5, r6, lr}
    edb4:	e2505000 	subs	r5, r0, #0
    edb8:	0a00002c 	beq	ee70 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xc0>
    edbc:	e3510000 	cmp	r1, #0
    edc0:	e1a04001 	mov	r4, r1
    edc4:	0a00002d 	beq	ee80 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xd0>
    edc8:	e1a00004 	mov	r0, r4
    edcc:	e59f13cc 	ldr	r1, [pc, #972]	; f1a0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f0>
    edd0:	eb0063bc 	bl	27cc8 <CString::Compare(char const*) const>
    edd4:	e3500000 	cmp	r0, #0
    edd8:	1a000014 	bne	ee30 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x80>
    eddc:	e3a00068 	mov	r0, #104	; 0x68
    ede0:	eb007078 	bl	2afc8 <operator new(unsigned int)>
    ede4:	e1a01005 	mov	r1, r5
    ede8:	e1a05000 	mov	r5, r0
    edec:	eb0016a2 	bl	1487c <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
    edf0:	e1a00005 	mov	r0, r5
    edf4:	eb0002da 	bl	f964 <CUSBFunction::GetDevice() const>
    edf8:	e1a06000 	mov	r6, r0
    edfc:	e1a00004 	mov	r0, r4
    ee00:	eb006359 	bl	27b6c <CString::operator char const*() const>
    ee04:	e3a01003 	mov	r1, #3
    ee08:	e1a03000 	mov	r3, r0
    ee0c:	e59f2390 	ldr	r2, [pc, #912]	; f1a4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f4>
    ee10:	e1a00006 	mov	r0, r6
    ee14:	ebfffdac 	bl	e4cc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ee18:	e5943000 	ldr	r3, [r4]
    ee1c:	e1a00004 	mov	r0, r4
    ee20:	e5933004 	ldr	r3, [r3, #4]
    ee24:	e12fff33 	blx	r3
    ee28:	e1a00005 	mov	r0, r5
    ee2c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ee30:	e1a00004 	mov	r0, r4
    ee34:	e59f136c 	ldr	r1, [pc, #876]	; f1a8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f8>
    ee38:	eb0063a2 	bl	27cc8 <CString::Compare(char const*) const>
    ee3c:	e3500000 	cmp	r0, #0
    ee40:	0affffe5 	beq	eddc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2c>
    ee44:	e1a00004 	mov	r0, r4
    ee48:	e59f135c 	ldr	r1, [pc, #860]	; f1ac <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3fc>
    ee4c:	eb00639d 	bl	27cc8 <CString::Compare(char const*) const>
    ee50:	e3500000 	cmp	r0, #0
    ee54:	1a00000d 	bne	ee90 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xe0>
    ee58:	e3a00030 	mov	r0, #48	; 0x30
    ee5c:	eb007059 	bl	2afc8 <operator new(unsigned int)>
    ee60:	e1a01005 	mov	r1, r5
    ee64:	e1a05000 	mov	r5, r0
    ee68:	eb000f4b 	bl	12b9c <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
    ee6c:	eaffffdf 	b	edf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ee70:	e3a0202b 	mov	r2, #43	; 0x2b
    ee74:	e59f1334 	ldr	r1, [pc, #820]	; f1b0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x400>
    ee78:	e59f0334 	ldr	r0, [pc, #820]	; f1b4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x404>
    ee7c:	eb005649 	bl	247a8 <assertion_failed>
    ee80:	e3a0202c 	mov	r2, #44	; 0x2c
    ee84:	e59f1324 	ldr	r1, [pc, #804]	; f1b0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x400>
    ee88:	e59f0328 	ldr	r0, [pc, #808]	; f1b8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x408>
    ee8c:	eb005645 	bl	247a8 <assertion_failed>
    ee90:	e1a00004 	mov	r0, r4
    ee94:	e59f1320 	ldr	r1, [pc, #800]	; f1bc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40c>
    ee98:	eb00638a 	bl	27cc8 <CString::Compare(char const*) const>
    ee9c:	e3500000 	cmp	r0, #0
    eea0:	0a00000a 	beq	eed0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x120>
    eea4:	e1a00004 	mov	r0, r4
    eea8:	e59f1310 	ldr	r1, [pc, #784]	; f1c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x410>
    eeac:	eb006385 	bl	27cc8 <CString::Compare(char const*) const>
    eeb0:	e3500000 	cmp	r0, #0
    eeb4:	1a00000b 	bne	eee8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x138>
    eeb8:	e3a00030 	mov	r0, #48	; 0x30
    eebc:	eb007041 	bl	2afc8 <operator new(unsigned int)>
    eec0:	e1a01005 	mov	r1, r5
    eec4:	e1a05000 	mov	r5, r0
    eec8:	eb001465 	bl	14064 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
    eecc:	eaffffc7 	b	edf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eed0:	e3a00e45 	mov	r0, #1104	; 0x450
    eed4:	eb00703b 	bl	2afc8 <operator new(unsigned int)>
    eed8:	e1a01005 	mov	r1, r5
    eedc:	e1a05000 	mov	r5, r0
    eee0:	ebffeab2 	bl	99b0 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
    eee4:	eaffffc1 	b	edf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eee8:	e1a00004 	mov	r0, r4
    eeec:	e59f12d0 	ldr	r1, [pc, #720]	; f1c4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x414>
    eef0:	eb006374 	bl	27cc8 <CString::Compare(char const*) const>
    eef4:	e3500000 	cmp	r0, #0
    eef8:	1a000006 	bne	ef18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x168>
    eefc:	e3a00f4f 	mov	r0, #316	; 0x13c
    ef00:	eb007030 	bl	2afc8 <operator new(unsigned int)>
    ef04:	e1a01005 	mov	r1, r5
    ef08:	e3a02001 	mov	r2, #1
    ef0c:	e1a05000 	mov	r5, r0
    ef10:	eb00069a 	bl	10980 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    ef14:	eaffffb5 	b	edf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ef18:	e1a00004 	mov	r0, r4
    ef1c:	e59f12a4 	ldr	r1, [pc, #676]	; f1c8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x418>
    ef20:	eb006368 	bl	27cc8 <CString::Compare(char const*) const>
    ef24:	e3500000 	cmp	r0, #0
    ef28:	1a000005 	bne	ef44 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x194>
    ef2c:	e3a00f5b 	mov	r0, #364	; 0x16c
    ef30:	eb007024 	bl	2afc8 <operator new(unsigned int)>
    ef34:	e1a01005 	mov	r1, r5
    ef38:	e1a05000 	mov	r5, r0
    ef3c:	eb0003a1 	bl	fdc8 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
    ef40:	eaffffaa 	b	edf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ef44:	e1a00004 	mov	r0, r4
    ef48:	e59f127c 	ldr	r1, [pc, #636]	; f1cc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x41c>
    ef4c:	eb00635d 	bl	27cc8 <CString::Compare(char const*) const>
    ef50:	e3500000 	cmp	r0, #0
    ef54:	0a000004 	beq	ef6c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1bc>
    ef58:	e1a00004 	mov	r0, r4
    ef5c:	e59f126c 	ldr	r1, [pc, #620]	; f1d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x420>
    ef60:	eb006358 	bl	27cc8 <CString::Compare(char const*) const>
    ef64:	e3500000 	cmp	r0, #0
    ef68:	1a000005 	bne	ef84 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1d4>
    ef6c:	e3a00f53 	mov	r0, #332	; 0x14c
    ef70:	eb007014 	bl	2afc8 <operator new(unsigned int)>
    ef74:	e1a01005 	mov	r1, r5
    ef78:	e1a05000 	mov	r5, r0
    ef7c:	eb0004f7 	bl	10360 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
    ef80:	eaffff9a 	b	edf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ef84:	e1a00004 	mov	r0, r4
    ef88:	e59f1244 	ldr	r1, [pc, #580]	; f1d4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x424>
    ef8c:	eb00634d 	bl	27cc8 <CString::Compare(char const*) const>
    ef90:	e3500000 	cmp	r0, #0
    ef94:	0a000004 	beq	efac <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1fc>
    ef98:	e1a00004 	mov	r0, r4
    ef9c:	e59f1234 	ldr	r1, [pc, #564]	; f1d8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x428>
    efa0:	eb006348 	bl	27cc8 <CString::Compare(char const*) const>
    efa4:	e3500000 	cmp	r0, #0
    efa8:	1a000005 	bne	efc4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x214>
    efac:	e3a00e13 	mov	r0, #304	; 0x130
    efb0:	eb007004 	bl	2afc8 <operator new(unsigned int)>
    efb4:	e1a01005 	mov	r1, r5
    efb8:	e1a05000 	mov	r5, r0
    efbc:	eb000aaa 	bl	11a6c <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
    efc0:	eaffff8a 	b	edf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    efc4:	e1a00004 	mov	r0, r4
    efc8:	e59f120c 	ldr	r1, [pc, #524]	; f1dc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x42c>
    efcc:	eb00633d 	bl	27cc8 <CString::Compare(char const*) const>
    efd0:	e3500000 	cmp	r0, #0
    efd4:	0a000004 	beq	efec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x23c>
    efd8:	e1a00004 	mov	r0, r4
    efdc:	e59f11fc 	ldr	r1, [pc, #508]	; f1e0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x430>
    efe0:	eb006338 	bl	27cc8 <CString::Compare(char const*) const>
    efe4:	e3500000 	cmp	r0, #0
    efe8:	1a000005 	bne	f004 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x254>
    efec:	e3a00f4d 	mov	r0, #308	; 0x134
    eff0:	eb006ff4 	bl	2afc8 <operator new(unsigned int)>
    eff4:	e1a01005 	mov	r1, r5
    eff8:	e1a05000 	mov	r5, r0
    effc:	eb000bb3 	bl	11ed0 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
    f000:	eaffff7a 	b	edf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f004:	e1a00004 	mov	r0, r4
    f008:	e59f11d4 	ldr	r1, [pc, #468]	; f1e4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x434>
    f00c:	eb00632d 	bl	27cc8 <CString::Compare(char const*) const>
    f010:	e3500000 	cmp	r0, #0
    f014:	0afffff4 	beq	efec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x23c>
    f018:	e1a00004 	mov	r0, r4
    f01c:	e59f11c4 	ldr	r1, [pc, #452]	; f1e8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x438>
    f020:	eb006328 	bl	27cc8 <CString::Compare(char const*) const>
    f024:	e3500000 	cmp	r0, #0
    f028:	0affffef 	beq	efec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x23c>
    f02c:	e1a00004 	mov	r0, r4
    f030:	e59f11b4 	ldr	r1, [pc, #436]	; f1ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x43c>
    f034:	eb006323 	bl	27cc8 <CString::Compare(char const*) const>
    f038:	e3500000 	cmp	r0, #0
    f03c:	1a000005 	bne	f058 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2a8>
    f040:	e3a00f4d 	mov	r0, #308	; 0x134
    f044:	eb006fdf 	bl	2afc8 <operator new(unsigned int)>
    f048:	e1a01005 	mov	r1, r5
    f04c:	e1a05000 	mov	r5, r0
    f050:	eb000906 	bl	11470 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
    f054:	eaffff65 	b	edf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f058:	e1a00004 	mov	r0, r4
    f05c:	e59f118c 	ldr	r1, [pc, #396]	; f1f0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x440>
    f060:	eb006318 	bl	27cc8 <CString::Compare(char const*) const>
    f064:	e3500000 	cmp	r0, #0
    f068:	0a000004 	beq	f080 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2d0>
    f06c:	e1a00004 	mov	r0, r4
    f070:	e59f117c 	ldr	r1, [pc, #380]	; f1f4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x444>
    f074:	eb006313 	bl	27cc8 <CString::Compare(char const*) const>
    f078:	e3500000 	cmp	r0, #0
    f07c:	1a000005 	bne	f098 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2e8>
    f080:	e3a0001c 	mov	r0, #28
    f084:	eb006fcf 	bl	2afc8 <operator new(unsigned int)>
    f088:	e1a01005 	mov	r1, r5
    f08c:	e1a05000 	mov	r5, r0
    f090:	eb00144a 	bl	141c0 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
    f094:	eaffff55 	b	edf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f098:	e1a00004 	mov	r0, r4
    f09c:	e59f1154 	ldr	r1, [pc, #340]	; f1f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x448>
    f0a0:	eb006308 	bl	27cc8 <CString::Compare(char const*) const>
    f0a4:	e3500000 	cmp	r0, #0
    f0a8:	1a000005 	bne	f0c4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x314>
    f0ac:	e3a00024 	mov	r0, #36	; 0x24
    f0b0:	eb006fc4 	bl	2afc8 <operator new(unsigned int)>
    f0b4:	e1a01005 	mov	r1, r5
    f0b8:	e1a05000 	mov	r5, r0
    f0bc:	eb001ce8 	bl	16464 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
    f0c0:	eaffff4a 	b	edf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f0c4:	e1a00004 	mov	r0, r4
    f0c8:	e59f112c 	ldr	r1, [pc, #300]	; f1fc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44c>
    f0cc:	eb0062fd 	bl	27cc8 <CString::Compare(char const*) const>
    f0d0:	e3500000 	cmp	r0, #0
    f0d4:	1a000005 	bne	f0f0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x340>
    f0d8:	e3a00024 	mov	r0, #36	; 0x24
    f0dc:	eb006fb9 	bl	2afc8 <operator new(unsigned int)>
    f0e0:	e1a01005 	mov	r1, r5
    f0e4:	e1a05000 	mov	r5, r0
    f0e8:	eb001957 	bl	1564c <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
    f0ec:	eaffff3f 	b	edf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f0f0:	e1a00004 	mov	r0, r4
    f0f4:	e59f1104 	ldr	r1, [pc, #260]	; f200 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x450>
    f0f8:	eb0062f2 	bl	27cc8 <CString::Compare(char const*) const>
    f0fc:	e3500000 	cmp	r0, #0
    f100:	0a000004 	beq	f118 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x368>
    f104:	e1a00004 	mov	r0, r4
    f108:	e59f10f4 	ldr	r1, [pc, #244]	; f204 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x454>
    f10c:	eb0062ed 	bl	27cc8 <CString::Compare(char const*) const>
    f110:	e3500000 	cmp	r0, #0
    f114:	1a000005 	bne	f130 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x380>
    f118:	e3a00028 	mov	r0, #40	; 0x28
    f11c:	eb006fa9 	bl	2afc8 <operator new(unsigned int)>
    f120:	e1a01005 	mov	r1, r5
    f124:	e1a05000 	mov	r5, r0
    f128:	eb001f1b 	bl	16d9c <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
    f12c:	eaffff2f 	b	edf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f130:	e1a00004 	mov	r0, r4
    f134:	e59f10cc 	ldr	r1, [pc, #204]	; f208 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x458>
    f138:	eb0062e2 	bl	27cc8 <CString::Compare(char const*) const>
    f13c:	e3500000 	cmp	r0, #0
    f140:	0a000004 	beq	f158 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3a8>
    f144:	e1a00004 	mov	r0, r4
    f148:	e59f10bc 	ldr	r1, [pc, #188]	; f20c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x45c>
    f14c:	eb0062dd 	bl	27cc8 <CString::Compare(char const*) const>
    f150:	e3500000 	cmp	r0, #0
    f154:	1a000005 	bne	f170 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3c0>
    f158:	e3a00028 	mov	r0, #40	; 0x28
    f15c:	eb006f99 	bl	2afc8 <operator new(unsigned int)>
    f160:	e1a01005 	mov	r1, r5
    f164:	e1a05000 	mov	r5, r0
    f168:	eb0011a4 	bl	13800 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>
    f16c:	eaffff1f 	b	edf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f170:	e1a00004 	mov	r0, r4
    f174:	e59f1094 	ldr	r1, [pc, #148]	; f210 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x460>
    f178:	eb0062d2 	bl	27cc8 <CString::Compare(char const*) const>
    f17c:	e3500000 	cmp	r0, #0
    f180:	13a05000 	movne	r5, #0
    f184:	1affff23 	bne	ee18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
    f188:	e3a00024 	mov	r0, #36	; 0x24
    f18c:	eb006f8d 	bl	2afc8 <operator new(unsigned int)>
    f190:	e1a01005 	mov	r1, r5
    f194:	e1a05000 	mov	r5, r0
    f198:	eb0020dc 	bl	17510 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
    f19c:	eaffff13 	b	edf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f1a0:	00041a4c 	.word	0x00041a4c
    f1a4:	00041b78 	.word	0x00041b78
    f1a8:	00041a58 	.word	0x00041a58
    f1ac:	00041a64 	.word	0x00041a64
    f1b0:	00041a24 	.word	0x00041a24
    f1b4:	00041a3c 	.word	0x00041a3c
    f1b8:	00041708 	.word	0x00041708
    f1bc:	00041a70 	.word	0x00041a70
    f1c0:	00041a7c 	.word	0x00041a7c
    f1c4:	00041a88 	.word	0x00041a88
    f1c8:	00041a94 	.word	0x00041a94
    f1cc:	00041aa0 	.word	0x00041aa0
    f1d0:	00041aac 	.word	0x00041aac
    f1d4:	00041ab8 	.word	0x00041ab8
    f1d8:	00041ac4 	.word	0x00041ac4
    f1dc:	00041ad0 	.word	0x00041ad0
    f1e0:	00041adc 	.word	0x00041adc
    f1e4:	00041ae8 	.word	0x00041ae8
    f1e8:	00041af4 	.word	0x00041af4
    f1ec:	00041b00 	.word	0x00041b00
    f1f0:	00041b0c 	.word	0x00041b0c
    f1f4:	00041b18 	.word	0x00041b18
    f1f8:	00041b24 	.word	0x00041b24
    f1fc:	00041b30 	.word	0x00041b30
    f200:	00041b3c 	.word	0x00041b3c
    f204:	00041b48 	.word	0x00041b48
    f208:	00041b54 	.word	0x00041b54
    f20c:	00041b60 	.word	0x00041b60
    f210:	00041b6c 	.word	0x00041b6c

0000f214 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
    f214:	e3a02000 	mov	r2, #0
    f218:	e92d4010 	push	{r4, lr}
    f21c:	e3a0c001 	mov	ip, #1
    f220:	e3a0e008 	mov	lr, #8
    f224:	e1510002 	cmp	r1, r2
    f228:	e5801000 	str	r1, [r0]
    f22c:	e580e008 	str	lr, [r0, #8]
    f230:	e580c00c 	str	ip, [r0, #12]
    f234:	e1c020b4 	strh	r2, [r0, #4]
    f238:	e5c02006 	strb	r2, [r0, #6]
    f23c:	e5c02010 	strb	r2, [r0, #16]
    f240:	18bd8010 	popne	{r4, pc}
    f244:	e3a02023 	mov	r2, #35	; 0x23
    f248:	e59f1004 	ldr	r1, [pc, #4]	; f254 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x40>
    f24c:	e59f0004 	ldr	r0, [pc, #4]	; f258 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x44>
    f250:	eb005554 	bl	247a8 <assertion_failed>
    f254:	00041b94 	.word	0x00041b94
    f258:	00041534 	.word	0x00041534

0000f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
    f25c:	e92d4070 	push	{r4, r5, r6, lr}
    f260:	e3a05001 	mov	r5, #1
    f264:	e3510000 	cmp	r1, #0
    f268:	e5801000 	str	r1, [r0]
    f26c:	e580500c 	str	r5, [r0, #12]
    f270:	e5c05010 	strb	r5, [r0, #16]
    f274:	0a000040 	beq	f37c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x120>
    f278:	e3520000 	cmp	r2, #0
    f27c:	0a000042 	beq	f38c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x130>
    f280:	e5d23000 	ldrb	r3, [r2]
    f284:	e3530006 	cmp	r3, #6
    f288:	9a000043 	bls	f39c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x140>
    f28c:	e5d23001 	ldrb	r3, [r2, #1]
    f290:	e3530005 	cmp	r3, #5
    f294:	1a000044 	bne	f3ac <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x150>
    f298:	e5d23003 	ldrb	r3, [r2, #3]
    f29c:	e1a04000 	mov	r4, r0
    f2a0:	e2033003 	and	r3, r3, #3
    f2a4:	e3530002 	cmp	r3, #2
    f2a8:	0a000020 	beq	f330 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd4>
    f2ac:	e3530003 	cmp	r3, #3
    f2b0:	1a000043 	bne	f3c4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x168>
    f2b4:	e3a00002 	mov	r0, #2
    f2b8:	e5d23002 	ldrb	r3, [r2, #2]
    f2bc:	e5c40005 	strb	r0, [r4, #5]
    f2c0:	e203000f 	and	r0, r3, #15
    f2c4:	e1a033a3 	lsr	r3, r3, #7
    f2c8:	e5c40004 	strb	r0, [r4, #4]
    f2cc:	e5c43006 	strb	r3, [r4, #6]
    f2d0:	e5d20005 	ldrb	r0, [r2, #5]
    f2d4:	e5d23004 	ldrb	r3, [r2, #4]
    f2d8:	e5d22006 	ldrb	r2, [r2, #6]
    f2dc:	e1833400 	orr	r3, r3, r0, lsl #8
    f2e0:	e1a03a83 	lsl	r3, r3, #21
    f2e4:	e1a03aa3 	lsr	r3, r3, #21
    f2e8:	e3520001 	cmp	r2, #1
    f2ec:	e1a00001 	mov	r0, r1
    f2f0:	e5843008 	str	r3, [r4, #8]
    f2f4:	21a06002 	movcs	r6, r2
    f2f8:	33a06001 	movcc	r6, #1
    f2fc:	ebfffc27 	bl	e3a0 <CUSBDevice::GetSpeed() const>
    f300:	e3500001 	cmp	r0, #1
    f304:	9a000017 	bls	f368 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x10c>
    f308:	e3560010 	cmp	r6, #16
    f30c:	31a02006 	movcc	r2, r6
    f310:	23a02010 	movcs	r2, #16
    f314:	e2422001 	sub	r2, r2, #1
    f318:	e1a05215 	lsl	r5, r5, r2
    f31c:	e1b021a5 	lsrs	r2, r5, #3
    f320:	1a000025 	bne	f3bc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x160>
    f324:	e3a03014 	mov	r3, #20
    f328:	e584300c 	str	r3, [r4, #12]
    f32c:	ea00000b 	b	f360 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x104>
    f330:	e5d23002 	ldrb	r3, [r2, #2]
    f334:	e5c05005 	strb	r5, [r0, #5]
    f338:	e203100f 	and	r1, r3, #15
    f33c:	e1a033a3 	lsr	r3, r3, #7
    f340:	e5c01004 	strb	r1, [r0, #4]
    f344:	e5c03006 	strb	r3, [r0, #6]
    f348:	e5d23004 	ldrb	r3, [r2, #4]
    f34c:	e5d22005 	ldrb	r2, [r2, #5]
    f350:	e1833402 	orr	r3, r3, r2, lsl #8
    f354:	e1a03a83 	lsl	r3, r3, #21
    f358:	e1a03aa3 	lsr	r3, r3, #21
    f35c:	e5803008 	str	r3, [r0, #8]
    f360:	e1a00004 	mov	r0, r4
    f364:	e8bd8070 	pop	{r4, r5, r6, pc}
    f368:	e1a02006 	mov	r2, r6
    f36c:	e584600c 	str	r6, [r4, #12]
    f370:	e3520013 	cmp	r2, #19
    f374:	8afffff9 	bhi	f360 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x104>
    f378:	eaffffe9 	b	f324 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc8>
    f37c:	e3a02032 	mov	r2, #50	; 0x32
    f380:	e59f104c 	ldr	r1, [pc, #76]	; f3d4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    f384:	e59f004c 	ldr	r0, [pc, #76]	; f3d8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x17c>
    f388:	eb005506 	bl	247a8 <assertion_failed>
    f38c:	e3a02034 	mov	r2, #52	; 0x34
    f390:	e59f103c 	ldr	r1, [pc, #60]	; f3d4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    f394:	e59f0040 	ldr	r0, [pc, #64]	; f3dc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x180>
    f398:	eb005502 	bl	247a8 <assertion_failed>
    f39c:	e3a02035 	mov	r2, #53	; 0x35
    f3a0:	e59f102c 	ldr	r1, [pc, #44]	; f3d4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    f3a4:	e59f0034 	ldr	r0, [pc, #52]	; f3e0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x184>
    f3a8:	eb0054fe 	bl	247a8 <assertion_failed>
    f3ac:	e3a02036 	mov	r2, #54	; 0x36
    f3b0:	e59f101c 	ldr	r1, [pc, #28]	; f3d4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    f3b4:	e59f0028 	ldr	r0, [pc, #40]	; f3e4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x188>
    f3b8:	eb0054fa 	bl	247a8 <assertion_failed>
    f3bc:	e584200c 	str	r2, [r4, #12]
    f3c0:	eaffffea 	b	f370 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x114>
    f3c4:	e3a02043 	mov	r2, #67	; 0x43
    f3c8:	e59f1004 	ldr	r1, [pc, #4]	; f3d4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    f3cc:	e59f0014 	ldr	r0, [pc, #20]	; f3e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x18c>
    f3d0:	eb0054f4 	bl	247a8 <assertion_failed>
    f3d4:	00041b94 	.word	0x00041b94
    f3d8:	00041534 	.word	0x00041534
    f3dc:	00041ba4 	.word	0x00041ba4
    f3e0:	00041bb0 	.word	0x00041bb0
    f3e4:	00041bd0 	.word	0x00041bd0
    f3e8:	00041748 	.word	0x00041748

0000f3ec <CUSBEndpoint::~CUSBEndpoint()>:
    f3ec:	e12fff1e 	bx	lr

0000f3f0 <CUSBEndpoint::GetDevice() const>:
    f3f0:	e5900000 	ldr	r0, [r0]
    f3f4:	e3500000 	cmp	r0, #0
    f3f8:	112fff1e 	bxne	lr
    f3fc:	e3a02086 	mov	r2, #134	; 0x86
    f400:	e92d4010 	push	{r4, lr}
    f404:	e59f1004 	ldr	r1, [pc, #4]	; f410 <CUSBEndpoint::GetDevice() const+0x20>
    f408:	e59f0004 	ldr	r0, [pc, #4]	; f414 <CUSBEndpoint::GetDevice() const+0x24>
    f40c:	eb0054e5 	bl	247a8 <assertion_failed>
    f410:	00041b94 	.word	0x00041b94
    f414:	00041534 	.word	0x00041534

0000f418 <CUSBEndpoint::GetNumber() const>:
    f418:	e5d00004 	ldrb	r0, [r0, #4]
    f41c:	e12fff1e 	bx	lr

0000f420 <CUSBEndpoint::GetType() const>:
    f420:	e5d00005 	ldrb	r0, [r0, #5]
    f424:	e12fff1e 	bx	lr

0000f428 <CUSBEndpoint::IsDirectionIn() const>:
    f428:	e5d00006 	ldrb	r0, [r0, #6]
    f42c:	e12fff1e 	bx	lr

0000f430 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
    f430:	e1a03000 	mov	r3, r0
    f434:	e3a00001 	mov	r0, #1
    f438:	e5831008 	str	r1, [r3, #8]
    f43c:	e12fff1e 	bx	lr

0000f440 <CUSBEndpoint::GetMaxPacketSize() const>:
    f440:	e5900008 	ldr	r0, [r0, #8]
    f444:	e12fff1e 	bx	lr

0000f448 <CUSBEndpoint::GetInterval() const>:
    f448:	e5d03005 	ldrb	r3, [r0, #5]
    f44c:	e3530002 	cmp	r3, #2
    f450:	1a000001 	bne	f45c <CUSBEndpoint::GetInterval() const+0x14>
    f454:	e590000c 	ldr	r0, [r0, #12]
    f458:	e12fff1e 	bx	lr
    f45c:	e3a020ae 	mov	r2, #174	; 0xae
    f460:	e92d4010 	push	{r4, lr}
    f464:	e59f1004 	ldr	r1, [pc, #4]	; f470 <CUSBEndpoint::GetInterval() const+0x28>
    f468:	e59f0004 	ldr	r0, [pc, #4]	; f474 <CUSBEndpoint::GetInterval() const+0x2c>
    f46c:	eb0054cd 	bl	247a8 <assertion_failed>
    f470:	00041b94 	.word	0x00041b94
    f474:	00041c00 	.word	0x00041c00

0000f478 <CUSBEndpoint::GetNextPID(bool)>:
    f478:	e3510000 	cmp	r1, #0
    f47c:	0a000004 	beq	f494 <CUSBEndpoint::GetNextPID(bool)+0x1c>
    f480:	e5d03005 	ldrb	r3, [r0, #5]
    f484:	e3530000 	cmp	r3, #0
    f488:	1a000003 	bne	f49c <CUSBEndpoint::GetNextPID(bool)+0x24>
    f48c:	e3a00002 	mov	r0, #2
    f490:	e12fff1e 	bx	lr
    f494:	e5d00010 	ldrb	r0, [r0, #16]
    f498:	e12fff1e 	bx	lr
    f49c:	e3a020b7 	mov	r2, #183	; 0xb7
    f4a0:	e92d4010 	push	{r4, lr}
    f4a4:	e59f1004 	ldr	r1, [pc, #4]	; f4b0 <CUSBEndpoint::GetNextPID(bool)+0x38>
    f4a8:	e59f0004 	ldr	r0, [pc, #4]	; f4b4 <CUSBEndpoint::GetNextPID(bool)+0x3c>
    f4ac:	eb0054bd 	bl	247a8 <assertion_failed>
    f4b0:	00041b94 	.word	0x00041b94
    f4b4:	00041c20 	.word	0x00041c20

0000f4b8 <CUSBEndpoint::SkipPID(unsigned int, bool)>:
    f4b8:	e5d03005 	ldrb	r3, [r0, #5]
    f4bc:	e92d4010 	push	{r4, lr}
    f4c0:	e3530002 	cmp	r3, #2
    f4c4:	8a000019 	bhi	f530 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x78>
    f4c8:	e3520000 	cmp	r2, #0
    f4cc:	1a000008 	bne	f4f4 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x3c>
    f4d0:	e5d03010 	ldrb	r3, [r0, #16]
    f4d4:	e3530001 	cmp	r3, #1
    f4d8:	0a00000f 	beq	f51c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x64>
    f4dc:	e3530002 	cmp	r3, #2
    f4e0:	1a000007 	bne	f504 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x4c>
    f4e4:	e3110001 	tst	r1, #1
    f4e8:	13a03001 	movne	r3, #1
    f4ec:	15c03010 	strbne	r3, [r0, #16]
    f4f0:	e8bd8010 	pop	{r4, pc}
    f4f4:	e3530000 	cmp	r3, #0
    f4f8:	1a000010 	bne	f540 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x88>
    f4fc:	e5c03010 	strb	r3, [r0, #16]
    f500:	e8bd8010 	pop	{r4, pc}
    f504:	e3530000 	cmp	r3, #0
    f508:	0a000005 	beq	f524 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x6c>
    f50c:	e3a020dc 	mov	r2, #220	; 0xdc
    f510:	e59f1038 	ldr	r1, [pc, #56]	; f550 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x98>
    f514:	e59f0038 	ldr	r0, [pc, #56]	; f554 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x9c>
    f518:	eb0054a2 	bl	247a8 <assertion_failed>
    f51c:	e3110001 	tst	r1, #1
    f520:	08bd8010 	popeq	{r4, pc}
    f524:	e3a03002 	mov	r3, #2
    f528:	e5c03010 	strb	r3, [r0, #16]
    f52c:	e8bd8010 	pop	{r4, pc}
    f530:	e3a020c1 	mov	r2, #193	; 0xc1
    f534:	e59f1014 	ldr	r1, [pc, #20]	; f550 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x98>
    f538:	e59f0018 	ldr	r0, [pc, #24]	; f558 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa0>
    f53c:	eb005499 	bl	247a8 <assertion_failed>
    f540:	e3a020e2 	mov	r2, #226	; 0xe2
    f544:	e59f1004 	ldr	r1, [pc, #4]	; f550 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x98>
    f548:	e59f000c 	ldr	r0, [pc, #12]	; f55c <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa4>
    f54c:	eb005495 	bl	247a8 <assertion_failed>
    f550:	00041b94 	.word	0x00041b94
    f554:	00041748 	.word	0x00041748
    f558:	00041c40 	.word	0x00041c40
    f55c:	00041c20 	.word	0x00041c20

0000f560 <CUSBEndpoint::ResetPID()>:
    f560:	e5d03005 	ldrb	r3, [r0, #5]
    f564:	e3530001 	cmp	r3, #1
    f568:	1a000001 	bne	f574 <CUSBEndpoint::ResetPID()+0x14>
    f56c:	e5c03010 	strb	r3, [r0, #16]
    f570:	e12fff1e 	bx	lr
    f574:	e3a020ed 	mov	r2, #237	; 0xed
    f578:	e92d4010 	push	{r4, lr}
    f57c:	e59f1004 	ldr	r1, [pc, #4]	; f588 <CUSBEndpoint::ResetPID()+0x28>
    f580:	e59f0004 	ldr	r0, [pc, #4]	; f58c <CUSBEndpoint::ResetPID()+0x2c>
    f584:	eb005487 	bl	247a8 <assertion_failed>
    f588:	00041b94 	.word	0x00041b94
    f58c:	00041ca0 	.word	0x00041ca0

0000f590 <CUSBFunction::Initialize()>:
    f590:	e3a00001 	mov	r0, #1
    f594:	e12fff1e 	bx	lr

0000f598 <CUSBFunction::ReScanDevices()>:
    f598:	e3a00000 	mov	r0, #0
    f59c:	e12fff1e 	bx	lr

0000f5a0 <CUSBFunction::~CUSBFunction()>:
    f5a0:	e3a03000 	mov	r3, #0
    f5a4:	e92d4070 	push	{r4, r5, r6, lr}
    f5a8:	e5905008 	ldr	r5, [r0, #8]
    f5ac:	e59f2040 	ldr	r2, [pc, #64]	; f5f4 <CUSBFunction::~CUSBFunction()+0x54>
    f5b0:	e1550003 	cmp	r5, r3
    f5b4:	e1a04000 	mov	r4, r0
    f5b8:	e5802000 	str	r2, [r0]
    f5bc:	e580300c 	str	r3, [r0, #12]
    f5c0:	0a000004 	beq	f5d8 <CUSBFunction::~CUSBFunction()+0x38>
    f5c4:	e1a00005 	mov	r0, r5
    f5c8:	eb00211d 	bl	17a44 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    f5cc:	e1a00005 	mov	r0, r5
    f5d0:	e3a0101c 	mov	r1, #28
    f5d4:	eb006e89 	bl	2b000 <operator delete(void*, unsigned int)>
    f5d8:	e3a03000 	mov	r3, #0
    f5dc:	e1a00004 	mov	r0, r4
    f5e0:	e5843008 	str	r3, [r4, #8]
    f5e4:	e5843004 	str	r3, [r4, #4]
    f5e8:	eb005647 	bl	24f0c <CDevice::~CDevice()>
    f5ec:	e1a00004 	mov	r0, r4
    f5f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    f5f4:	00041d64 	.word	0x00041d64

0000f5f8 <CUSBFunction::~CUSBFunction()>:
    f5f8:	e92d4010 	push	{r4, lr}
    f5fc:	e1a04000 	mov	r4, r0
    f600:	ebffffe6 	bl	f5a0 <CUSBFunction::~CUSBFunction()>
    f604:	e1a00004 	mov	r0, r4
    f608:	e3a01010 	mov	r1, #16
    f60c:	eb006e7b 	bl	2b000 <operator delete(void*, unsigned int)>
    f610:	e1a00004 	mov	r0, r4
    f614:	e8bd8010 	pop	{r4, pc}

0000f618 <CUSBFunction::RemoveDevice()>:
    f618:	e5900004 	ldr	r0, [r0, #4]
    f61c:	e3500000 	cmp	r0, #0
    f620:	0a000000 	beq	f628 <CUSBFunction::RemoveDevice()+0x10>
    f624:	eafffaba 	b	e114 <CUSBDevice::RemoveDevice()>
    f628:	e3a02066 	mov	r2, #102	; 0x66
    f62c:	e92d4010 	push	{r4, lr}
    f630:	e59f1004 	ldr	r1, [pc, #4]	; f63c <CUSBFunction::RemoveDevice()+0x24>
    f634:	e59f0004 	ldr	r0, [pc, #4]	; f640 <CUSBFunction::RemoveDevice()+0x28>
    f638:	eb00545a 	bl	247a8 <assertion_failed>
    f63c:	00041cbc 	.word	0x00041cbc
    f640:	00041534 	.word	0x00041534

0000f644 <CUSBFunction::Configure()>:
    f644:	e92d4070 	push	{r4, r5, r6, lr}
    f648:	e590300c 	ldr	r3, [r0, #12]
    f64c:	e24dd010 	sub	sp, sp, #16
    f650:	e3530000 	cmp	r3, #0
    f654:	0a000026 	beq	f6f4 <CUSBFunction::Configure()+0xb0>
    f658:	e5d33003 	ldrb	r3, [r3, #3]
    f65c:	e3530000 	cmp	r3, #0
    f660:	0a000019 	beq	f6cc <CUSBFunction::Configure()+0x88>
    f664:	e1a04000 	mov	r4, r0
    f668:	e5900004 	ldr	r0, [r0, #4]
    f66c:	e3500000 	cmp	r0, #0
    f670:	0a000023 	beq	f704 <CUSBFunction::Configure()+0xc0>
    f674:	ebfffb5d 	bl	e3f0 <CUSBDevice::GetHost() const>
    f678:	e5943004 	ldr	r3, [r4, #4]
    f67c:	e1a06000 	mov	r6, r0
    f680:	e3530000 	cmp	r3, #0
    f684:	0a000022 	beq	f714 <CUSBFunction::Configure()+0xd0>
    f688:	e3a05000 	mov	r5, #0
    f68c:	e1a00003 	mov	r0, r3
    f690:	ebfffb4c 	bl	e3c8 <CUSBDevice::GetEndpoint0() const>
    f694:	e594300c 	ldr	r3, [r4, #12]
    f698:	e58d500c 	str	r5, [sp, #12]
    f69c:	e58d5008 	str	r5, [sp, #8]
    f6a0:	e5d32002 	ldrb	r2, [r3, #2]
    f6a4:	e1a01000 	mov	r1, r0
    f6a8:	e58d2004 	str	r2, [sp, #4]
    f6ac:	e5d33003 	ldrb	r3, [r3, #3]
    f6b0:	e1a00006 	mov	r0, r6
    f6b4:	e58d3000 	str	r3, [sp]
    f6b8:	e3a02001 	mov	r2, #1
    f6bc:	e3a0300b 	mov	r3, #11
    f6c0:	eb000c68 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f6c4:	e1500005 	cmp	r0, r5
    f6c8:	ba000002 	blt	f6d8 <CUSBFunction::Configure()+0x94>
    f6cc:	e3a00001 	mov	r0, #1
    f6d0:	e28dd010 	add	sp, sp, #16
    f6d4:	e8bd8070 	pop	{r4, r5, r6, pc}
    f6d8:	eb005d1a 	bl	26b48 <CLogger::Get()>
    f6dc:	e3a02001 	mov	r2, #1
    f6e0:	e59f303c 	ldr	r3, [pc, #60]	; f724 <CUSBFunction::Configure()+0xe0>
    f6e4:	e59f103c 	ldr	r1, [pc, #60]	; f728 <CUSBFunction::Configure()+0xe4>
    f6e8:	eb005c58 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f6ec:	e1a00005 	mov	r0, r5
    f6f0:	eafffff6 	b	f6d0 <CUSBFunction::Configure()+0x8c>
    f6f4:	e3a0204e 	mov	r2, #78	; 0x4e
    f6f8:	e59f102c 	ldr	r1, [pc, #44]	; f72c <CUSBFunction::Configure()+0xe8>
    f6fc:	e59f002c 	ldr	r0, [pc, #44]	; f730 <CUSBFunction::Configure()+0xec>
    f700:	eb005428 	bl	247a8 <assertion_failed>
    f704:	e3a02090 	mov	r2, #144	; 0x90
    f708:	e59f101c 	ldr	r1, [pc, #28]	; f72c <CUSBFunction::Configure()+0xe8>
    f70c:	e59f0020 	ldr	r0, [pc, #32]	; f734 <CUSBFunction::Configure()+0xf0>
    f710:	eb005424 	bl	247a8 <assertion_failed>
    f714:	e3a0208a 	mov	r2, #138	; 0x8a
    f718:	e59f100c 	ldr	r1, [pc, #12]	; f72c <CUSBFunction::Configure()+0xe8>
    f71c:	e59f0010 	ldr	r0, [pc, #16]	; f734 <CUSBFunction::Configure()+0xf0>
    f720:	eb005420 	bl	247a8 <assertion_failed>
    f724:	00041ce4 	.word	0x00041ce4
    f728:	00041d88 	.word	0x00041d88
    f72c:	00041cbc 	.word	0x00041cbc
    f730:	00041ccc 	.word	0x00041ccc
    f734:	00041534 	.word	0x00041534

0000f738 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
    f738:	e92d4070 	push	{r4, r5, r6, lr}
    f73c:	e1a04000 	mov	r4, r0
    f740:	e1a05001 	mov	r5, r1
    f744:	e1a06002 	mov	r6, r2
    f748:	eb0055fd 	bl	24f44 <CDevice::CDevice()>
    f74c:	e3a03000 	mov	r3, #0
    f750:	e59f207c 	ldr	r2, [pc, #124]	; f7d4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x9c>
    f754:	e1550003 	cmp	r5, r3
    f758:	e8840024 	stm	r4, {r2, r5}
    f75c:	e5843008 	str	r3, [r4, #8]
    f760:	e584300c 	str	r3, [r4, #12]
    f764:	0a00000e 	beq	f7a4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x6c>
    f768:	e3560000 	cmp	r6, #0
    f76c:	0a000010 	beq	f7b4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x7c>
    f770:	e3a0001c 	mov	r0, #28
    f774:	eb006e13 	bl	2afc8 <operator new(unsigned int)>
    f778:	e1a05000 	mov	r5, r0
    f77c:	e1a01006 	mov	r1, r6
    f780:	eb002097 	bl	179e4 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
    f784:	e1a00005 	mov	r0, r5
    f788:	e5845008 	str	r5, [r4, #8]
    f78c:	eb0020d8 	bl	17af4 <CUSBConfigurationParser::GetCurrentDescriptor()>
    f790:	e3500000 	cmp	r0, #0
    f794:	e584000c 	str	r0, [r4, #12]
    f798:	0a000009 	beq	f7c4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x8c>
    f79c:	e1a00004 	mov	r0, r4
    f7a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    f7a4:	e3a02022 	mov	r2, #34	; 0x22
    f7a8:	e59f1028 	ldr	r1, [pc, #40]	; f7d8 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    f7ac:	e59f0028 	ldr	r0, [pc, #40]	; f7dc <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa4>
    f7b0:	eb0053fc 	bl	247a8 <assertion_failed>
    f7b4:	e3a02024 	mov	r2, #36	; 0x24
    f7b8:	e59f1018 	ldr	r1, [pc, #24]	; f7d8 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    f7bc:	e59f001c 	ldr	r0, [pc, #28]	; f7e0 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa8>
    f7c0:	eb0053f8 	bl	247a8 <assertion_failed>
    f7c4:	e3a02029 	mov	r2, #41	; 0x29
    f7c8:	e59f1008 	ldr	r1, [pc, #8]	; f7d8 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    f7cc:	e59f0010 	ldr	r0, [pc, #16]	; f7e4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xac>
    f7d0:	eb0053f4 	bl	247a8 <assertion_failed>
    f7d4:	00041d64 	.word	0x00041d64
    f7d8:	00041cbc 	.word	0x00041cbc
    f7dc:	00041534 	.word	0x00041534
    f7e0:	00041cfc 	.word	0x00041cfc
    f7e4:	00041ccc 	.word	0x00041ccc

0000f7e8 <CUSBFunction::CUSBFunction(CUSBFunction*)>:
    f7e8:	e92d4070 	push	{r4, r5, r6, lr}
    f7ec:	e1a04000 	mov	r4, r0
    f7f0:	e1a05001 	mov	r5, r1
    f7f4:	eb0055d2 	bl	24f44 <CDevice::CDevice()>
    f7f8:	e3a03000 	mov	r3, #0
    f7fc:	e59f20a0 	ldr	r2, [pc, #160]	; f8a4 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xbc>
    f800:	e1550003 	cmp	r5, r3
    f804:	e1c420f0 	strd	r2, [r4]
    f808:	e5843008 	str	r3, [r4, #8]
    f80c:	e584300c 	str	r3, [r4, #12]
    f810:	0a000013 	beq	f864 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x7c>
    f814:	e5953004 	ldr	r3, [r5, #4]
    f818:	e3530000 	cmp	r3, #0
    f81c:	e5843004 	str	r3, [r4, #4]
    f820:	0a000013 	beq	f874 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x8c>
    f824:	e5953008 	ldr	r3, [r5, #8]
    f828:	e3530000 	cmp	r3, #0
    f82c:	0a000014 	beq	f884 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x9c>
    f830:	e3a0001c 	mov	r0, #28
    f834:	eb006de3 	bl	2afc8 <operator new(unsigned int)>
    f838:	e1a06000 	mov	r6, r0
    f83c:	e5951008 	ldr	r1, [r5, #8]
    f840:	eb002067 	bl	179e4 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
    f844:	e1a00006 	mov	r0, r6
    f848:	e5846008 	str	r6, [r4, #8]
    f84c:	eb0020a8 	bl	17af4 <CUSBConfigurationParser::GetCurrentDescriptor()>
    f850:	e3500000 	cmp	r0, #0
    f854:	e584000c 	str	r0, [r4, #12]
    f858:	0a00000d 	beq	f894 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xac>
    f85c:	e1a00004 	mov	r0, r4
    f860:	e8bd8070 	pop	{r4, r5, r6, pc}
    f864:	e3a02031 	mov	r2, #49	; 0x31
    f868:	e59f1038 	ldr	r1, [pc, #56]	; f8a8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f86c:	e59f0038 	ldr	r0, [pc, #56]	; f8ac <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc4>
    f870:	eb0053cc 	bl	247a8 <assertion_failed>
    f874:	e3a02033 	mov	r2, #51	; 0x33
    f878:	e59f1028 	ldr	r1, [pc, #40]	; f8a8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f87c:	e59f002c 	ldr	r0, [pc, #44]	; f8b0 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc8>
    f880:	eb0053c8 	bl	247a8 <assertion_failed>
    f884:	e3a02035 	mov	r2, #53	; 0x35
    f888:	e59f1018 	ldr	r1, [pc, #24]	; f8a8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f88c:	e59f0020 	ldr	r0, [pc, #32]	; f8b4 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xcc>
    f890:	eb0053c4 	bl	247a8 <assertion_failed>
    f894:	e3a0203a 	mov	r2, #58	; 0x3a
    f898:	e59f1008 	ldr	r1, [pc, #8]	; f8a8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f89c:	e59f0014 	ldr	r0, [pc, #20]	; f8b8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xd0>
    f8a0:	eb0053c0 	bl	247a8 <assertion_failed>
    f8a4:	00041d64 	.word	0x00041d64
    f8a8:	00041cbc 	.word	0x00041cbc
    f8ac:	00041d10 	.word	0x00041d10
    f8b0:	00041534 	.word	0x00041534
    f8b4:	00041d20 	.word	0x00041d20
    f8b8:	00041ccc 	.word	0x00041ccc

0000f8bc <CUSBFunction::GetInterfaceName() const>:
    f8bc:	e92d4030 	push	{r4, r5, lr}
    f8c0:	e1a05000 	mov	r5, r0
    f8c4:	e24dd00c 	sub	sp, sp, #12
    f8c8:	e3a00010 	mov	r0, #16
    f8cc:	eb006dbd 	bl	2afc8 <operator new(unsigned int)>
    f8d0:	e59f1054 	ldr	r1, [pc, #84]	; f92c <CUSBFunction::GetInterfaceName() const+0x70>
    f8d4:	e1a04000 	mov	r4, r0
    f8d8:	eb006091 	bl	27b24 <CString::CString(char const*)>
    f8dc:	e595100c 	ldr	r1, [r5, #12]
    f8e0:	e3510000 	cmp	r1, #0
    f8e4:	0a000004 	beq	f8fc <CUSBFunction::GetInterfaceName() const+0x40>
    f8e8:	e5d12005 	ldrb	r2, [r1, #5]
    f8ec:	e2423001 	sub	r3, r2, #1
    f8f0:	e6ef3073 	uxtb	r3, r3
    f8f4:	e35300fd 	cmp	r3, #253	; 0xfd
    f8f8:	9a000002 	bls	f908 <CUSBFunction::GetInterfaceName() const+0x4c>
    f8fc:	e1a00004 	mov	r0, r4
    f900:	e28dd00c 	add	sp, sp, #12
    f904:	e8bd8030 	pop	{r4, r5, pc}
    f908:	e5d13006 	ldrb	r3, [r1, #6]
    f90c:	e5d11007 	ldrb	r1, [r1, #7]
    f910:	e1a00004 	mov	r0, r4
    f914:	e58d1000 	str	r1, [sp]
    f918:	e59f1010 	ldr	r1, [pc, #16]	; f930 <CUSBFunction::GetInterfaceName() const+0x74>
    f91c:	eb0065c4 	bl	29034 <CString::Format(char const*, ...)>
    f920:	e1a00004 	mov	r0, r4
    f924:	e28dd00c 	add	sp, sp, #12
    f928:	e8bd8030 	pop	{r4, r5, pc}
    f92c:	000416f4 	.word	0x000416f4
    f930:	00041d40 	.word	0x00041d40

0000f934 <CUSBFunction::GetNumEndpoints() const>:
    f934:	e590300c 	ldr	r3, [r0, #12]
    f938:	e3530000 	cmp	r3, #0
    f93c:	0a000001 	beq	f948 <CUSBFunction::GetNumEndpoints() const+0x14>
    f940:	e5d30004 	ldrb	r0, [r3, #4]
    f944:	e12fff1e 	bx	lr
    f948:	e3a0207e 	mov	r2, #126	; 0x7e
    f94c:	e92d4010 	push	{r4, lr}
    f950:	e59f1004 	ldr	r1, [pc, #4]	; f95c <CUSBFunction::GetNumEndpoints() const+0x28>
    f954:	e59f0004 	ldr	r0, [pc, #4]	; f960 <CUSBFunction::GetNumEndpoints() const+0x2c>
    f958:	eb005392 	bl	247a8 <assertion_failed>
    f95c:	00041cbc 	.word	0x00041cbc
    f960:	00041ccc 	.word	0x00041ccc

0000f964 <CUSBFunction::GetDevice() const>:
    f964:	e5900004 	ldr	r0, [r0, #4]
    f968:	e3500000 	cmp	r0, #0
    f96c:	112fff1e 	bxne	lr
    f970:	e3a02084 	mov	r2, #132	; 0x84
    f974:	e92d4010 	push	{r4, lr}
    f978:	e59f1004 	ldr	r1, [pc, #4]	; f984 <CUSBFunction::GetDevice() const+0x20>
    f97c:	e59f0004 	ldr	r0, [pc, #4]	; f988 <CUSBFunction::GetDevice() const+0x24>
    f980:	eb005388 	bl	247a8 <assertion_failed>
    f984:	00041cbc 	.word	0x00041cbc
    f988:	00041534 	.word	0x00041534

0000f98c <CUSBFunction::GetEndpoint0() const>:
    f98c:	e5900004 	ldr	r0, [r0, #4]
    f990:	e3500000 	cmp	r0, #0
    f994:	0a000000 	beq	f99c <CUSBFunction::GetEndpoint0() const+0x10>
    f998:	eafffa8a 	b	e3c8 <CUSBDevice::GetEndpoint0() const>
    f99c:	e3a0208a 	mov	r2, #138	; 0x8a
    f9a0:	e92d4010 	push	{r4, lr}
    f9a4:	e59f1004 	ldr	r1, [pc, #4]	; f9b0 <CUSBFunction::GetEndpoint0() const+0x24>
    f9a8:	e59f0004 	ldr	r0, [pc, #4]	; f9b4 <CUSBFunction::GetEndpoint0() const+0x28>
    f9ac:	eb00537d 	bl	247a8 <assertion_failed>
    f9b0:	00041cbc 	.word	0x00041cbc
    f9b4:	00041534 	.word	0x00041534

0000f9b8 <CUSBFunction::GetHost() const>:
    f9b8:	e5900004 	ldr	r0, [r0, #4]
    f9bc:	e3500000 	cmp	r0, #0
    f9c0:	0a000000 	beq	f9c8 <CUSBFunction::GetHost() const+0x10>
    f9c4:	eafffa89 	b	e3f0 <CUSBDevice::GetHost() const>
    f9c8:	e3a02090 	mov	r2, #144	; 0x90
    f9cc:	e92d4010 	push	{r4, lr}
    f9d0:	e59f1004 	ldr	r1, [pc, #4]	; f9dc <CUSBFunction::GetHost() const+0x24>
    f9d4:	e59f0004 	ldr	r0, [pc, #4]	; f9e0 <CUSBFunction::GetHost() const+0x28>
    f9d8:	eb005372 	bl	247a8 <assertion_failed>
    f9dc:	00041cbc 	.word	0x00041cbc
    f9e0:	00041534 	.word	0x00041534

0000f9e4 <CUSBFunction::GetDescriptor(unsigned char)>:
    f9e4:	e5900008 	ldr	r0, [r0, #8]
    f9e8:	e3500000 	cmp	r0, #0
    f9ec:	0a000000 	beq	f9f4 <CUSBFunction::GetDescriptor(unsigned char)+0x10>
    f9f0:	ea002016 	b	17a50 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    f9f4:	e3a02096 	mov	r2, #150	; 0x96
    f9f8:	e92d4010 	push	{r4, lr}
    f9fc:	e59f1004 	ldr	r1, [pc, #4]	; fa08 <CUSBFunction::GetDescriptor(unsigned char)+0x24>
    fa00:	e59f0004 	ldr	r0, [pc, #4]	; fa0c <CUSBFunction::GetDescriptor(unsigned char)+0x28>
    fa04:	eb005367 	bl	247a8 <assertion_failed>
    fa08:	00041cbc 	.word	0x00041cbc
    fa0c:	00041760 	.word	0x00041760

0000fa10 <CUSBFunction::ConfigurationError(char const*) const>:
    fa10:	e5900008 	ldr	r0, [r0, #8]
    fa14:	e92d4010 	push	{r4, lr}
    fa18:	e3500000 	cmp	r0, #0
    fa1c:	0a000003 	beq	fa30 <CUSBFunction::ConfigurationError(char const*) const+0x20>
    fa20:	e3510000 	cmp	r1, #0
    fa24:	0a000005 	beq	fa40 <CUSBFunction::ConfigurationError(char const*) const+0x30>
    fa28:	e8bd4010 	pop	{r4, lr}
    fa2c:	ea002042 	b	17b3c <CUSBConfigurationParser::Error(char const*) const>
    fa30:	e3a0209c 	mov	r2, #156	; 0x9c
    fa34:	e59f1014 	ldr	r1, [pc, #20]	; fa50 <CUSBFunction::ConfigurationError(char const*) const+0x40>
    fa38:	e59f0014 	ldr	r0, [pc, #20]	; fa54 <CUSBFunction::ConfigurationError(char const*) const+0x44>
    fa3c:	eb005359 	bl	247a8 <assertion_failed>
    fa40:	e3a0209d 	mov	r2, #157	; 0x9d
    fa44:	e59f1004 	ldr	r1, [pc, #4]	; fa50 <CUSBFunction::ConfigurationError(char const*) const+0x40>
    fa48:	e59f0008 	ldr	r0, [pc, #8]	; fa58 <CUSBFunction::ConfigurationError(char const*) const+0x48>
    fa4c:	eb005355 	bl	247a8 <assertion_failed>
    fa50:	00041cbc 	.word	0x00041cbc
    fa54:	00041760 	.word	0x00041760
    fa58:	00041d4c 	.word	0x00041d4c

0000fa5c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
    fa5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fa60:	e1a04000 	mov	r4, r0
    fa64:	e590000c 	ldr	r0, [r0, #12]
    fa68:	e3500000 	cmp	r0, #0
    fa6c:	0a00001d 	beq	fae8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x8c>
    fa70:	e1a07003 	mov	r7, r3
    fa74:	e5943008 	ldr	r3, [r4, #8]
    fa78:	e3530000 	cmp	r3, #0
    fa7c:	0a00001d 	beq	faf8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x9c>
    fa80:	e5943004 	ldr	r3, [r4, #4]
    fa84:	e1a05001 	mov	r5, r1
    fa88:	e3530000 	cmp	r3, #0
    fa8c:	e1a06002 	mov	r6, r2
    fa90:	1a000009 	bne	fabc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x60>
    fa94:	ea00001b 	b	fb08 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xac>
    fa98:	e3a01004 	mov	r1, #4
    fa9c:	e5940004 	ldr	r0, [r4, #4]
    faa0:	ebfffa72 	bl	e470 <CUSBDevice::GetDescriptor(unsigned char)>
    faa4:	e3a01004 	mov	r1, #4
    faa8:	e5940008 	ldr	r0, [r4, #8]
    faac:	eb001fe7 	bl	17a50 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    fab0:	e3500000 	cmp	r0, #0
    fab4:	e584000c 	str	r0, [r4, #12]
    fab8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    fabc:	e5d0c005 	ldrb	ip, [r0, #5]
    fac0:	e15c0005 	cmp	ip, r5
    fac4:	1afffff3 	bne	fa98 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
    fac8:	e5d01006 	ldrb	r1, [r0, #6]
    facc:	e1510006 	cmp	r1, r6
    fad0:	1afffff0 	bne	fa98 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
    fad4:	e5d03007 	ldrb	r3, [r0, #7]
    fad8:	e1530007 	cmp	r3, r7
    fadc:	1affffed 	bne	fa98 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
    fae0:	e3a00001 	mov	r0, #1
    fae4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fae8:	e3a020a3 	mov	r2, #163	; 0xa3
    faec:	e59f1024 	ldr	r1, [pc, #36]	; fb18 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xbc>
    faf0:	e59f0024 	ldr	r0, [pc, #36]	; fb1c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc0>
    faf4:	eb00532b 	bl	247a8 <assertion_failed>
    faf8:	e3a020a4 	mov	r2, #164	; 0xa4
    fafc:	e59f1014 	ldr	r1, [pc, #20]	; fb18 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xbc>
    fb00:	e59f0018 	ldr	r0, [pc, #24]	; fb20 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
    fb04:	eb005327 	bl	247a8 <assertion_failed>
    fb08:	e3a020a5 	mov	r2, #165	; 0xa5
    fb0c:	e59f1004 	ldr	r1, [pc, #4]	; fb18 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xbc>
    fb10:	e59f000c 	ldr	r0, [pc, #12]	; fb24 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc8>
    fb14:	eb005323 	bl	247a8 <assertion_failed>
    fb18:	00041cbc 	.word	0x00041cbc
    fb1c:	00041ccc 	.word	0x00041ccc
    fb20:	00041760 	.word	0x00041760
    fb24:	00041534 	.word	0x00041534

0000fb28 <CUSBFunction::GetInterfaceNumber() const>:
    fb28:	e590300c 	ldr	r3, [r0, #12]
    fb2c:	e3530000 	cmp	r3, #0
    fb30:	0a000001 	beq	fb3c <CUSBFunction::GetInterfaceNumber() const+0x14>
    fb34:	e5d30002 	ldrb	r0, [r3, #2]
    fb38:	e12fff1e 	bx	lr
    fb3c:	e3a020bb 	mov	r2, #187	; 0xbb
    fb40:	e92d4010 	push	{r4, lr}
    fb44:	e59f1004 	ldr	r1, [pc, #4]	; fb50 <CUSBFunction::GetInterfaceNumber() const+0x28>
    fb48:	e59f0004 	ldr	r0, [pc, #4]	; fb54 <CUSBFunction::GetInterfaceNumber() const+0x2c>
    fb4c:	eb005315 	bl	247a8 <assertion_failed>
    fb50:	00041cbc 	.word	0x00041cbc
    fb54:	00041ccc 	.word	0x00041ccc

0000fb58 <CUSBFunction::GetInterfaceClass() const>:
    fb58:	e590300c 	ldr	r3, [r0, #12]
    fb5c:	e3530000 	cmp	r3, #0
    fb60:	0a000001 	beq	fb6c <CUSBFunction::GetInterfaceClass() const+0x14>
    fb64:	e5d30005 	ldrb	r0, [r3, #5]
    fb68:	e12fff1e 	bx	lr
    fb6c:	e3a020c1 	mov	r2, #193	; 0xc1
    fb70:	e92d4010 	push	{r4, lr}
    fb74:	e59f1004 	ldr	r1, [pc, #4]	; fb80 <CUSBFunction::GetInterfaceClass() const+0x28>
    fb78:	e59f0004 	ldr	r0, [pc, #4]	; fb84 <CUSBFunction::GetInterfaceClass() const+0x2c>
    fb7c:	eb005309 	bl	247a8 <assertion_failed>
    fb80:	00041cbc 	.word	0x00041cbc
    fb84:	00041ccc 	.word	0x00041ccc

0000fb88 <CUSBFunction::GetInterfaceSubClass() const>:
    fb88:	e590300c 	ldr	r3, [r0, #12]
    fb8c:	e3530000 	cmp	r3, #0
    fb90:	0a000001 	beq	fb9c <CUSBFunction::GetInterfaceSubClass() const+0x14>
    fb94:	e5d30006 	ldrb	r0, [r3, #6]
    fb98:	e12fff1e 	bx	lr
    fb9c:	e3a020c7 	mov	r2, #199	; 0xc7
    fba0:	e92d4010 	push	{r4, lr}
    fba4:	e59f1004 	ldr	r1, [pc, #4]	; fbb0 <CUSBFunction::GetInterfaceSubClass() const+0x28>
    fba8:	e59f0004 	ldr	r0, [pc, #4]	; fbb4 <CUSBFunction::GetInterfaceSubClass() const+0x2c>
    fbac:	eb0052fd 	bl	247a8 <assertion_failed>
    fbb0:	00041cbc 	.word	0x00041cbc
    fbb4:	00041ccc 	.word	0x00041ccc

0000fbb8 <CUSBFunction::GetInterfaceProtocol() const>:
    fbb8:	e590300c 	ldr	r3, [r0, #12]
    fbbc:	e3530000 	cmp	r3, #0
    fbc0:	0a000001 	beq	fbcc <CUSBFunction::GetInterfaceProtocol() const+0x14>
    fbc4:	e5d30007 	ldrb	r0, [r3, #7]
    fbc8:	e12fff1e 	bx	lr
    fbcc:	e3a020cd 	mov	r2, #205	; 0xcd
    fbd0:	e92d4010 	push	{r4, lr}
    fbd4:	e59f1004 	ldr	r1, [pc, #4]	; fbe0 <CUSBFunction::GetInterfaceProtocol() const+0x28>
    fbd8:	e59f0004 	ldr	r0, [pc, #4]	; fbe4 <CUSBFunction::GetInterfaceProtocol() const+0x2c>
    fbdc:	eb0052f1 	bl	247a8 <assertion_failed>
    fbe0:	00041cbc 	.word	0x00041cbc
    fbe4:	00041ccc 	.word	0x00041ccc

0000fbe8 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
    fbe8:	e92d4010 	push	{r4, lr}
    fbec:	e1a04000 	mov	r4, r0
    fbf0:	e59f300c 	ldr	r3, [pc, #12]	; fc04 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x1c>
    fbf4:	e5803000 	str	r3, [r0]
    fbf8:	eb000349 	bl	10924 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    fbfc:	e1a00004 	mov	r0, r4
    fc00:	e8bd8010 	pop	{r4, pc}
    fc04:	00041e18 	.word	0x00041e18

0000fc08 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
    fc08:	e92d4010 	push	{r4, lr}
    fc0c:	e1a04000 	mov	r4, r0
    fc10:	e59f3018 	ldr	r3, [pc, #24]	; fc30 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x28>
    fc14:	e5803000 	str	r3, [r0]
    fc18:	eb000341 	bl	10924 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    fc1c:	e1a00004 	mov	r0, r4
    fc20:	e3a01f5b 	mov	r1, #364	; 0x16c
    fc24:	eb006cf5 	bl	2b000 <operator delete(void*, unsigned int)>
    fc28:	e1a00004 	mov	r0, r4
    fc2c:	e8bd8010 	pop	{r4, pc}
    fc30:	00041e18 	.word	0x00041e18

0000fc34 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
    fc34:	e92d4030 	push	{r4, r5, lr}
    fc38:	e1a04001 	mov	r4, r1
    fc3c:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    fc40:	e2801f4f 	add	r1, r0, #316	; 0x13c
    fc44:	e1a05000 	mov	r5, r0
    fc48:	e3a02030 	mov	r2, #48	; 0x30
    fc4c:	e28d0018 	add	r0, sp, #24
    fc50:	eb006af6 	bl	2a830 <memcpy>
    fc54:	e3540001 	cmp	r4, #1
    fc58:	0a000007 	beq	fc7c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x48>
    fc5c:	e3540002 	cmp	r4, #2
    fc60:	0a000029 	beq	fd0c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xd8>
    fc64:	e3540000 	cmp	r4, #0
    fc68:	0a000023 	beq	fcfc <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xc8>
    fc6c:	e59f20b4 	ldr	r2, [pc, #180]	; fd28 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xf4>
    fc70:	e59f10b4 	ldr	r1, [pc, #180]	; fd2c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xf8>
    fc74:	e59f00b4 	ldr	r0, [pc, #180]	; fd30 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xfc>
    fc78:	eb0052ca 	bl	247a8 <assertion_failed>
    fc7c:	e3e01001 	mvn	r1, #1
    fc80:	e3e02c01 	mvn	r2, #256	; 0x100
    fc84:	e3a03000 	mov	r3, #0
    fc88:	e5cd1019 	strb	r1, [sp, #25]
    fc8c:	e1cd21ba 	strh	r2, [sp, #26]
    fc90:	e5cd301c 	strb	r3, [sp, #28]
    fc94:	e1a00005 	mov	r0, r5
    fc98:	ebffff46 	bl	f9b8 <CUSBFunction::GetHost() const>
    fc9c:	e1a04000 	mov	r4, r0
    fca0:	e1a00005 	mov	r0, r5
    fca4:	ebffff38 	bl	f98c <CUSBFunction::GetEndpoint0() const>
    fca8:	e1a01000 	mov	r1, r0
    fcac:	e1a00005 	mov	r0, r5
    fcb0:	e58d1014 	str	r1, [sp, #20]
    fcb4:	ebffff9b 	bl	fb28 <CUSBFunction::GetInterfaceNumber() const>
    fcb8:	e3a0c030 	mov	ip, #48	; 0x30
    fcbc:	e6ff3070 	uxth	r3, r0
    fcc0:	e59f206c 	ldr	r2, [pc, #108]	; fd34 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x100>
    fcc4:	e58d3004 	str	r3, [sp, #4]
    fcc8:	e28d3018 	add	r3, sp, #24
    fccc:	e58d3008 	str	r3, [sp, #8]
    fcd0:	e58d2000 	str	r2, [sp]
    fcd4:	e1a00004 	mov	r0, r4
    fcd8:	e3a03009 	mov	r3, #9
    fcdc:	e3a02021 	mov	r2, #33	; 0x21
    fce0:	e59d1014 	ldr	r1, [sp, #20]
    fce4:	e58dc00c 	str	ip, [sp, #12]
    fce8:	eb000ade 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fcec:	e1e00000 	mvn	r0, r0
    fcf0:	e1a00fa0 	lsr	r0, r0, #31
    fcf4:	e28dd04c 	add	sp, sp, #76	; 0x4c
    fcf8:	e8bd8030 	pop	{r4, r5, pc}
    fcfc:	e5cd4019 	strb	r4, [sp, #25]
    fd00:	e1cd41ba 	strh	r4, [sp, #26]
    fd04:	e5cd401c 	strb	r4, [sp, #28]
    fd08:	eaffffe1 	b	fc94 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
    fd0c:	e3e01001 	mvn	r1, #1
    fd10:	e3a02cfe 	mov	r2, #65024	; 0xfe00
    fd14:	e3e03000 	mvn	r3, #0
    fd18:	e5cd1019 	strb	r1, [sp, #25]
    fd1c:	e1cd21ba 	strh	r2, [sp, #26]
    fd20:	e5cd301c 	strb	r3, [sp, #28]
    fd24:	eaffffda 	b	fc94 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
    fd28:	0000010e 	.word	0x0000010e
    fd2c:	00041d90 	.word	0x00041d90
    fd30:	00041748 	.word	0x00041748
    fd34:	00000201 	.word	0x00000201

0000fd38 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
    fd38:	e351000a 	cmp	r1, #10
    fd3c:	9a000001 	bls	fd48 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x10>
    fd40:	e3a00000 	mov	r0, #0
    fd44:	e12fff1e 	bx	lr
    fd48:	e59f3070 	ldr	r3, [pc, #112]	; fdc0 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x88>
    fd4c:	e92d4030 	push	{r4, r5, lr}
    fd50:	e0831001 	add	r1, r3, r1
    fd54:	e5d1304c 	ldrb	r3, [r1, #76]	; 0x4c
    fd58:	e24dd01c 	sub	sp, sp, #28
    fd5c:	e1a03083 	lsl	r3, r3, #1
    fd60:	e5c03145 	strb	r3, [r0, #325]	; 0x145
    fd64:	e1a04000 	mov	r4, r0
    fd68:	ebffff12 	bl	f9b8 <CUSBFunction::GetHost() const>
    fd6c:	e1a05000 	mov	r5, r0
    fd70:	e1a00004 	mov	r0, r4
    fd74:	ebffff04 	bl	f98c <CUSBFunction::GetEndpoint0() const>
    fd78:	e1a01000 	mov	r1, r0
    fd7c:	e1a00004 	mov	r0, r4
    fd80:	e58d1014 	str	r1, [sp, #20]
    fd84:	ebffff67 	bl	fb28 <CUSBFunction::GetInterfaceNumber() const>
    fd88:	e3a0c030 	mov	ip, #48	; 0x30
    fd8c:	e59f2030 	ldr	r2, [pc, #48]	; fdc4 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x8c>
    fd90:	e6ff3070 	uxth	r3, r0
    fd94:	e2844f4f 	add	r4, r4, #316	; 0x13c
    fd98:	e88d101c 	stm	sp, {r2, r3, r4, ip}
    fd9c:	e1a00005 	mov	r0, r5
    fda0:	e3a03009 	mov	r3, #9
    fda4:	e3a02021 	mov	r2, #33	; 0x21
    fda8:	e59d1014 	ldr	r1, [sp, #20]
    fdac:	eb000aad 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fdb0:	e1e00000 	mvn	r0, r0
    fdb4:	e1a00fa0 	lsr	r0, r0, #31
    fdb8:	e28dd01c 	add	sp, sp, #28
    fdbc:	e8bd8030 	pop	{r4, r5, pc}
    fdc0:	00041e10 	.word	0x00041e10
    fdc4:	00000201 	.word	0x00000201

0000fdc8 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
    fdc8:	e92d4070 	push	{r4, r5, r6, lr}
    fdcc:	e3a02000 	mov	r2, #0
    fdd0:	e1a04000 	mov	r4, r0
    fdd4:	eb0002e9 	bl	10980 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    fdd8:	e3a03000 	mov	r3, #0
    fddc:	e59f5030 	ldr	r5, [pc, #48]	; fe14 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)+0x4c>
    fde0:	e1a00004 	mov	r0, r4
    fde4:	e2852008 	add	r2, r5, #8
    fde8:	e5842000 	str	r2, [r4]
    fdec:	e3a01003 	mov	r1, #3
    fdf0:	e1a02003 	mov	r2, r3
    fdf4:	ebffff18 	bl	fa5c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
    fdf8:	e3a02030 	mov	r2, #48	; 0x30
    fdfc:	e5c4013a 	strb	r0, [r4, #314]	; 0x13a
    fe00:	e2851058 	add	r1, r5, #88	; 0x58
    fe04:	e2840f4f 	add	r0, r4, #316	; 0x13c
    fe08:	eb006a88 	bl	2a830 <memcpy>
    fe0c:	e1a00004 	mov	r0, r4
    fe10:	e8bd8070 	pop	{r4, r5, r6, pc}
    fe14:	00041e10 	.word	0x00041e10

0000fe18 <CUSBGamePadPS3Device::PS3Enable()>:
    fe18:	e92d4030 	push	{r4, r5, lr}
    fe1c:	e59f3084 	ldr	r3, [pc, #132]	; fea8 <CUSBGamePadPS3Device::PS3Enable()+0x90>
    fe20:	e24dd024 	sub	sp, sp, #36	; 0x24
    fe24:	e58d301c 	str	r3, [sp, #28]
    fe28:	e1a04000 	mov	r4, r0
    fe2c:	ebfffee1 	bl	f9b8 <CUSBFunction::GetHost() const>
    fe30:	e1a05000 	mov	r5, r0
    fe34:	e1a00004 	mov	r0, r4
    fe38:	ebfffed3 	bl	f98c <CUSBFunction::GetEndpoint0() const>
    fe3c:	e1a01000 	mov	r1, r0
    fe40:	e1a00004 	mov	r0, r4
    fe44:	e58d1014 	str	r1, [sp, #20]
    fe48:	ebffff36 	bl	fb28 <CUSBFunction::GetInterfaceNumber() const>
    fe4c:	e3a0c004 	mov	ip, #4
    fe50:	e3a02ffd 	mov	r2, #1012	; 0x3f4
    fe54:	e6ff3070 	uxth	r3, r0
    fe58:	e58d3004 	str	r3, [sp, #4]
    fe5c:	e28d301c 	add	r3, sp, #28
    fe60:	e58d2000 	str	r2, [sp]
    fe64:	e58d3008 	str	r3, [sp, #8]
    fe68:	e1a00005 	mov	r0, r5
    fe6c:	e3a03009 	mov	r3, #9
    fe70:	e3a02021 	mov	r2, #33	; 0x21
    fe74:	e59d1014 	ldr	r1, [sp, #20]
    fe78:	e58dc00c 	str	ip, [sp, #12]
    fe7c:	eb000a79 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fe80:	e3500000 	cmp	r0, #0
    fe84:	b3a00000 	movlt	r0, #0
    fe88:	ba000004 	blt	fea0 <CUSBGamePadPS3Device::PS3Enable()+0x88>
    fe8c:	e5943000 	ldr	r3, [r4]
    fe90:	e1a00004 	mov	r0, r4
    fe94:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
    fe98:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    fe9c:	e12fff33 	blx	r3
    fea0:	e28dd024 	add	sp, sp, #36	; 0x24
    fea4:	e8bd8030 	pop	{r4, r5, pc}
    fea8:	00000c42 	.word	0x00000c42

0000feac <CUSBGamePadPS3Device::Configure()>:
    feac:	e92d4030 	push	{r4, r5, lr}
    feb0:	e5d0313a 	ldrb	r3, [r0, #314]	; 0x13a
    feb4:	e24dd00c 	sub	sp, sp, #12
    feb8:	e3530000 	cmp	r3, #0
    febc:	0a00001e 	beq	ff3c <CUSBGamePadPS3Device::Configure()+0x90>
    fec0:	e1a04000 	mov	r4, r0
    fec4:	eb00040e 	bl	10f04 <CUSBGamePadStandardDevice::Configure()>
    fec8:	e3500000 	cmp	r0, #0
    fecc:	0a000029 	beq	ff78 <CUSBGamePadPS3Device::Configure()+0xcc>
    fed0:	e2845f4a 	add	r5, r4, #296	; 0x128
    fed4:	e1d530b0 	ldrh	r3, [r5]
    fed8:	e2433031 	sub	r3, r3, #49	; 0x31
    fedc:	e3530001 	cmp	r3, #1
    fee0:	8a00001a 	bhi	ff50 <CUSBGamePadPS3Device::Configure()+0xa4>
    fee4:	e3a01010 	mov	r1, #16
    fee8:	e3a0c013 	mov	ip, #19
    feec:	e1a03004 	mov	r3, r4
    fef0:	e3a02000 	mov	r2, #0
    fef4:	e3a000ff 	mov	r0, #255	; 0xff
    fef8:	e5841024 	str	r1, [r4, #36]	; 0x24
    fefc:	e584c104 	str	ip, [r4, #260]	; 0x104
    ff00:	e28410c0 	add	r1, r4, #192	; 0xc0
    ff04:	e583202c 	str	r2, [r3, #44]	; 0x2c
    ff08:	e5830030 	str	r0, [r3, #48]	; 0x30
    ff0c:	e283300c 	add	r3, r3, #12
    ff10:	e1530001 	cmp	r3, r1
    ff14:	1afffffa 	bne	ff04 <CUSBGamePadPS3Device::Configure()+0x58>
    ff18:	e1a00004 	mov	r0, r4
    ff1c:	e58420e8 	str	r2, [r4, #232]	; 0xe8
    ff20:	ebffffbc 	bl	fe18 <CUSBGamePadPS3Device::PS3Enable()>
    ff24:	e3500000 	cmp	r0, #0
    ff28:	0a00001a 	beq	ff98 <CUSBGamePadPS3Device::Configure()+0xec>
    ff2c:	e1a00004 	mov	r0, r4
    ff30:	e28dd00c 	add	sp, sp, #12
    ff34:	e8bd4030 	pop	{r4, r5, lr}
    ff38:	ea0009b8 	b	12620 <CUSBHIDDevice::StartRequest()>
    ff3c:	e59f1074 	ldr	r1, [pc, #116]	; ffb8 <CUSBGamePadPS3Device::Configure()+0x10c>
    ff40:	ebfffeb2 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
    ff44:	e3a00000 	mov	r0, #0
    ff48:	e28dd00c 	add	sp, sp, #12
    ff4c:	e8bd8030 	pop	{r4, r5, pc}
    ff50:	eb005afc 	bl	26b48 <CLogger::Get()>
    ff54:	e1d520b0 	ldrh	r2, [r5]
    ff58:	e59f305c 	ldr	r3, [pc, #92]	; ffbc <CUSBGamePadPS3Device::Configure()+0x110>
    ff5c:	e58d2000 	str	r2, [sp]
    ff60:	e59f1050 	ldr	r1, [pc, #80]	; ffb8 <CUSBGamePadPS3Device::Configure()+0x10c>
    ff64:	e3a02001 	mov	r2, #1
    ff68:	eb005a38 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff6c:	e3a00000 	mov	r0, #0
    ff70:	e28dd00c 	add	sp, sp, #12
    ff74:	e8bd8030 	pop	{r4, r5, pc}
    ff78:	eb005af2 	bl	26b48 <CLogger::Get()>
    ff7c:	e3a02001 	mov	r2, #1
    ff80:	e59f3038 	ldr	r3, [pc, #56]	; ffc0 <CUSBGamePadPS3Device::Configure()+0x114>
    ff84:	e59f102c 	ldr	r1, [pc, #44]	; ffb8 <CUSBGamePadPS3Device::Configure()+0x10c>
    ff88:	eb005a30 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff8c:	e3a00000 	mov	r0, #0
    ff90:	e28dd00c 	add	sp, sp, #12
    ff94:	e8bd8030 	pop	{r4, r5, pc}
    ff98:	eb005aea 	bl	26b48 <CLogger::Get()>
    ff9c:	e3a02001 	mov	r2, #1
    ffa0:	e59f301c 	ldr	r3, [pc, #28]	; ffc4 <CUSBGamePadPS3Device::Configure()+0x118>
    ffa4:	e59f100c 	ldr	r1, [pc, #12]	; ffb8 <CUSBGamePadPS3Device::Configure()+0x10c>
    ffa8:	eb005a28 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ffac:	e3a00000 	mov	r0, #0
    ffb0:	e28dd00c 	add	sp, sp, #12
    ffb4:	e8bd8030 	pop	{r4, r5, pc}
    ffb8:	00041e98 	.word	0x00041e98
    ffbc:	00041dc4 	.word	0x00041dc4
    ffc0:	00041da4 	.word	0x00041da4
    ffc4:	00041de0 	.word	0x00041de0

0000ffc8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
    ffc8:	e2803f4a 	add	r3, r0, #296	; 0x128
    ffcc:	e1d330b0 	ldrh	r3, [r3]
    ffd0:	e92d4010 	push	{r4, lr}
    ffd4:	e3530031 	cmp	r3, #49	; 0x31
    ffd8:	e1a0c000 	mov	ip, r0
    ffdc:	e1a04001 	mov	r4, r1
    ffe0:	0a000007 	beq	10004 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x3c>
    ffe4:	e3530032 	cmp	r3, #50	; 0x32
    ffe8:	0a000044 	beq	10100 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x138>
    ffec:	e3530000 	cmp	r3, #0
    fff0:	0a000040 	beq	100f8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x130>
    fff4:	e3a02092 	mov	r2, #146	; 0x92
    fff8:	e59f1118 	ldr	r1, [pc, #280]	; 10118 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
    fffc:	e59f0118 	ldr	r0, [pc, #280]	; 1011c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x154>
   10000:	eb0051e8 	bl	247a8 <assertion_failed>
   10004:	e3510000 	cmp	r1, #0
   10008:	0a00003e 	beq	10108 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x140>
   1000c:	e5d40003 	ldrb	r0, [r4, #3]
   10010:	e5d42002 	ldrb	r2, [r4, #2]
   10014:	e5d41004 	ldrb	r1, [r4, #4]
   10018:	e1822400 	orr	r2, r2, r0, lsl #8
   1001c:	e5d40005 	ldrb	r0, [r4, #5]
   10020:	e1822801 	orr	r2, r2, r1, lsl #16
   10024:	e59f10f4 	ldr	r1, [pc, #244]	; 10120 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x158>
   10028:	e1820c00 	orr	r0, r2, r0, lsl #24
   1002c:	e59fe0f0 	ldr	lr, [pc, #240]	; 10124 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x15c>
   10030:	e00112a0 	and	r1, r1, r0, lsr #5
   10034:	e1a02682 	lsl	r2, r2, #13
   10038:	e00e0580 	and	r0, lr, r0, lsl #11
   1003c:	e1812ea2 	orr	r2, r1, r2, lsr #29
   10040:	e1822000 	orr	r2, r2, r0
   10044:	e58c2108 	str	r2, [ip, #264]	; 0x108
   10048:	e5d42006 	ldrb	r2, [r4, #6]
   1004c:	e3a03006 	mov	r3, #6
   10050:	e58c2028 	str	r2, [ip, #40]	; 0x28
   10054:	e5d41007 	ldrb	r1, [r4, #7]
   10058:	e59fe0c8 	ldr	lr, [pc, #200]	; 10128 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x160>
   1005c:	e58c1034 	str	r1, [ip, #52]	; 0x34
   10060:	e5d40008 	ldrb	r0, [r4, #8]
   10064:	e284200d 	add	r2, r4, #13
   10068:	e58c0040 	str	r0, [ip, #64]	; 0x40
   1006c:	e5d40009 	ldrb	r0, [r4, #9]
   10070:	e2841019 	add	r1, r4, #25
   10074:	e58c004c 	str	r0, [ip, #76]	; 0x4c
   10078:	ea000000 	b	10080 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb8>
   1007c:	e5be3004 	ldr	r3, [lr, #4]!
   10080:	e5f20001 	ldrb	r0, [r2, #1]!
   10084:	e0833083 	add	r3, r3, r3, lsl #1
   10088:	e08c3103 	add	r3, ip, r3, lsl #2
   1008c:	e1520001 	cmp	r2, r1
   10090:	e5830028 	str	r0, [r3, #40]	; 0x28
   10094:	1afffff8 	bne	1007c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb4>
   10098:	e1d432b9 	ldrh	r3, [r4, #41]	; 0x29
   1009c:	e59f2088 	ldr	r2, [pc, #136]	; 1012c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x164>
   100a0:	e6bf3fb3 	rev16	r3, r3
   100a4:	e6ff3073 	uxth	r3, r3
   100a8:	e0423003 	sub	r3, r2, r3
   100ac:	e58c310c 	str	r3, [ip, #268]	; 0x10c
   100b0:	e1d432bb 	ldrh	r3, [r4, #43]	; 0x2b
   100b4:	e6bf3fb3 	rev16	r3, r3
   100b8:	e6ff3073 	uxth	r3, r3
   100bc:	e0423003 	sub	r3, r2, r3
   100c0:	e58c3110 	str	r3, [ip, #272]	; 0x110
   100c4:	e1d432bd 	ldrh	r3, [r4, #45]	; 0x2d
   100c8:	e6bf3fb3 	rev16	r3, r3
   100cc:	e6ff3073 	uxth	r3, r3
   100d0:	e0422003 	sub	r2, r2, r3
   100d4:	e58c2114 	str	r2, [ip, #276]	; 0x114
   100d8:	e5d4302f 	ldrb	r3, [r4, #47]	; 0x2f
   100dc:	e5d42030 	ldrb	r2, [r4, #48]	; 0x30
   100e0:	e1833402 	orr	r3, r3, r2, lsl #8
   100e4:	e6bf3fb3 	rev16	r3, r3
   100e8:	e6ff3073 	uxth	r3, r3
   100ec:	e2433006 	sub	r3, r3, #6
   100f0:	e58c3120 	str	r3, [ip, #288]	; 0x120
   100f4:	e8bd8010 	pop	{r4, pc}
   100f8:	e8bd4010 	pop	{r4, lr}
   100fc:	ea000277 	b	10ae0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
   10100:	e2814001 	add	r4, r1, #1
   10104:	eaffffc0 	b	1000c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x44>
   10108:	e3a02097 	mov	r2, #151	; 0x97
   1010c:	e59f1004 	ldr	r1, [pc, #4]	; 10118 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
   10110:	e59f0018 	ldr	r0, [pc, #24]	; 10130 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x168>
   10114:	eb0051a3 	bl	247a8 <assertion_failed>
   10118:	00041d90 	.word	0x00041d90
   1011c:	00041748 	.word	0x00041748
   10120:	000007f8 	.word	0x000007f8
   10124:	0007f800 	.word	0x0007f800
   10128:	00041ea4 	.word	0x00041ea4
   1012c:	000001ff 	.word	0x000001ff
   10130:	00041e00 	.word	0x00041e00

00010134 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   10134:	e3a00000 	mov	r0, #0
   10138:	e12fff1e 	bx	lr

0001013c <CUSBGamePadPS3Device::GetProperties()>:
   1013c:	e3a0001b 	mov	r0, #27
   10140:	e12fff1e 	bx	lr

00010144 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
   10144:	e5d13001 	ldrb	r3, [r1, #1]
   10148:	e59f21a0 	ldr	r2, [pc, #416]	; 102f0 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x1ac>
   1014c:	e5803028 	str	r3, [r0, #40]	; 0x28
   10150:	e5d13002 	ldrb	r3, [r1, #2]
   10154:	e5803034 	str	r3, [r0, #52]	; 0x34
   10158:	e5d13003 	ldrb	r3, [r1, #3]
   1015c:	e5803040 	str	r3, [r0, #64]	; 0x40
   10160:	e5d13004 	ldrb	r3, [r1, #4]
   10164:	e580304c 	str	r3, [r0, #76]	; 0x4c
   10168:	e5d13008 	ldrb	r3, [r1, #8]
   1016c:	e5803058 	str	r3, [r0, #88]	; 0x58
   10170:	e5d13009 	ldrb	r3, [r1, #9]
   10174:	e5803064 	str	r3, [r0, #100]	; 0x64
   10178:	e5d13005 	ldrb	r3, [r1, #5]
   1017c:	e203300f 	and	r3, r3, #15
   10180:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   10184:	e58030ec 	str	r3, [r0, #236]	; 0xec
   10188:	e5802108 	str	r2, [r0, #264]	; 0x108
   1018c:	e5d13005 	ldrb	r3, [r1, #5]
   10190:	e3130080 	tst	r3, #128	; 0x80
   10194:	13822080 	orrne	r2, r2, #128	; 0x80
   10198:	15802108 	strne	r2, [r0, #264]	; 0x108
   1019c:	e3130040 	tst	r3, #64	; 0x40
   101a0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   101a4:	13822c01 	orrne	r2, r2, #256	; 0x100
   101a8:	15802108 	strne	r2, [r0, #264]	; 0x108
   101ac:	e3130020 	tst	r3, #32
   101b0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   101b4:	13822c02 	orrne	r2, r2, #512	; 0x200
   101b8:	15802108 	strne	r2, [r0, #264]	; 0x108
   101bc:	e3130010 	tst	r3, #16
   101c0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   101c4:	13833b01 	orrne	r3, r3, #1024	; 0x400
   101c8:	15803108 	strne	r3, [r0, #264]	; 0x108
   101cc:	e5d13006 	ldrb	r3, [r1, #6]
   101d0:	e3130080 	tst	r3, #128	; 0x80
   101d4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   101d8:	13822a02 	orrne	r2, r2, #8192	; 0x2000
   101dc:	15802108 	strne	r2, [r0, #264]	; 0x108
   101e0:	e3130040 	tst	r3, #64	; 0x40
   101e4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   101e8:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   101ec:	15802108 	strne	r2, [r0, #264]	; 0x108
   101f0:	e3130020 	tst	r3, #32
   101f4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   101f8:	13822901 	orrne	r2, r2, #16384	; 0x4000
   101fc:	15802108 	strne	r2, [r0, #264]	; 0x108
   10200:	e3130010 	tst	r3, #16
   10204:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10208:	13822b02 	orrne	r2, r2, #2048	; 0x800
   1020c:	15802108 	strne	r2, [r0, #264]	; 0x108
   10210:	e3130008 	tst	r3, #8
   10214:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10218:	13822010 	orrne	r2, r2, #16
   1021c:	15802108 	strne	r2, [r0, #264]	; 0x108
   10220:	e3130004 	tst	r3, #4
   10224:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10228:	13822008 	orrne	r2, r2, #8
   1022c:	15802108 	strne	r2, [r0, #264]	; 0x108
   10230:	e3130002 	tst	r3, #2
   10234:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10238:	13822040 	orrne	r2, r2, #64	; 0x40
   1023c:	15802108 	strne	r2, [r0, #264]	; 0x108
   10240:	e3130001 	tst	r3, #1
   10244:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10248:	13833020 	orrne	r3, r3, #32
   1024c:	15803108 	strne	r3, [r0, #264]	; 0x108
   10250:	e5d13007 	ldrb	r3, [r1, #7]
   10254:	e3130002 	tst	r3, #2
   10258:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1025c:	13822602 	orrne	r2, r2, #2097152	; 0x200000
   10260:	15802108 	strne	r2, [r0, #264]	; 0x108
   10264:	e3130001 	tst	r3, #1
   10268:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1026c:	13833001 	orrne	r3, r3, #1
   10270:	15803108 	strne	r3, [r0, #264]	; 0x108
   10274:	e5d12014 	ldrb	r2, [r1, #20]
   10278:	e5d13013 	ldrb	r3, [r1, #19]
   1027c:	e1833402 	orr	r3, r3, r2, lsl #8
   10280:	e6bf3073 	sxth	r3, r3
   10284:	e580310c 	str	r3, [r0, #268]	; 0x10c
   10288:	e5d12018 	ldrb	r2, [r1, #24]
   1028c:	e5d13017 	ldrb	r3, [r1, #23]
   10290:	e1833402 	orr	r3, r3, r2, lsl #8
   10294:	e6bf3073 	sxth	r3, r3
   10298:	e5803110 	str	r3, [r0, #272]	; 0x110
   1029c:	e5d12016 	ldrb	r2, [r1, #22]
   102a0:	e5d13015 	ldrb	r3, [r1, #21]
   102a4:	e1833402 	orr	r3, r3, r2, lsl #8
   102a8:	e6bf3073 	sxth	r3, r3
   102ac:	e5803114 	str	r3, [r0, #276]	; 0x114
   102b0:	e5d12012 	ldrb	r2, [r1, #18]
   102b4:	e5d13011 	ldrb	r3, [r1, #17]
   102b8:	e1833402 	orr	r3, r3, r2, lsl #8
   102bc:	e6bf3073 	sxth	r3, r3
   102c0:	e5803118 	str	r3, [r0, #280]	; 0x118
   102c4:	e5d1200e 	ldrb	r2, [r1, #14]
   102c8:	e5d1300d 	ldrb	r3, [r1, #13]
   102cc:	e1833402 	orr	r3, r3, r2, lsl #8
   102d0:	e6bf3073 	sxth	r3, r3
   102d4:	e580311c 	str	r3, [r0, #284]	; 0x11c
   102d8:	e5d1300f 	ldrb	r3, [r1, #15]
   102dc:	e5d12010 	ldrb	r2, [r1, #16]
   102e0:	e1833402 	orr	r3, r3, r2, lsl #8
   102e4:	e6bf3073 	sxth	r3, r3
   102e8:	e5803120 	str	r3, [r0, #288]	; 0x120
   102ec:	e12fff1e 	bx	lr
   102f0:	00041f1c 	.word	0x00041f1c

000102f4 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   102f4:	e92d4010 	push	{r4, lr}
   102f8:	e1a04000 	mov	r4, r0
   102fc:	e5900140 	ldr	r0, [r0, #320]	; 0x140
   10300:	e59f3034 	ldr	r3, [pc, #52]	; 1033c <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x48>
   10304:	e3500000 	cmp	r0, #0
   10308:	e5843000 	str	r3, [r4]
   1030c:	0a000002 	beq	1031c <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
   10310:	e5903000 	ldr	r3, [r0]
   10314:	e5933004 	ldr	r3, [r3, #4]
   10318:	e12fff33 	blx	r3
   1031c:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   10320:	e3500000 	cmp	r0, #0
   10324:	0a000000 	beq	1032c <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
   10328:	eb006b33 	bl	2affc <operator delete[](void*)>
   1032c:	e1a00004 	mov	r0, r4
   10330:	eb001e80 	bl	17d38 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10334:	e1a00004 	mov	r0, r4
   10338:	e8bd8010 	pop	{r4, pc}
   1033c:	00041f48 	.word	0x00041f48

00010340 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   10340:	e92d4010 	push	{r4, lr}
   10344:	e1a04000 	mov	r4, r0
   10348:	ebffffe9 	bl	102f4 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>
   1034c:	e1a00004 	mov	r0, r4
   10350:	e3a01f53 	mov	r1, #332	; 0x14c
   10354:	eb006b29 	bl	2b000 <operator delete(void*, unsigned int)>
   10358:	e1a00004 	mov	r0, r4
   1035c:	e8bd8010 	pop	{r4, pc}

00010360 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
   10360:	e92d4010 	push	{r4, lr}
   10364:	e1a04000 	mov	r4, r0
   10368:	eb001e61 	bl	17cf4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   1036c:	e3a03000 	mov	r3, #0
   10370:	e59f2030 	ldr	r2, [pc, #48]	; 103a8 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)+0x48>
   10374:	e1a00004 	mov	r0, r4
   10378:	e5842000 	str	r2, [r4]
   1037c:	e3a01003 	mov	r1, #3
   10380:	e1a02003 	mov	r2, r3
   10384:	ebfffdb4 	bl	fa5c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   10388:	e3a03000 	mov	r3, #0
   1038c:	e2842f51 	add	r2, r4, #324	; 0x144
   10390:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   10394:	e584313c 	str	r3, [r4, #316]	; 0x13c
   10398:	e5843140 	str	r3, [r4, #320]	; 0x140
   1039c:	e1a00004 	mov	r0, r4
   103a0:	e1c230b0 	strh	r3, [r2]
   103a4:	e8bd8010 	pop	{r4, pc}
   103a8:	00041f48 	.word	0x00041f48

000103ac <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
   103ac:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   103b0:	e5d13007 	ldrb	r3, [r1, #7]
   103b4:	e1a06001 	mov	r6, r1
   103b8:	e3130002 	tst	r3, #2
   103bc:	e1a05000 	mov	r5, r0
   103c0:	1a00004f 	bne	10504 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x158>
   103c4:	e5d00144 	ldrb	r0, [r0, #324]	; 0x144
   103c8:	e3500000 	cmp	r0, #0
   103cc:	1a000050 	bne	10514 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x168>
   103d0:	e3a04000 	mov	r4, #0
   103d4:	e5d67021 	ldrb	r7, [r6, #33]	; 0x21
   103d8:	e1a09004 	mov	r9, r4
   103dc:	e2473001 	sub	r3, r7, #1
   103e0:	e3530003 	cmp	r3, #3
   103e4:	23a07001 	movcs	r7, #1
   103e8:	e2858f51 	add	r8, r5, #324	; 0x144
   103ec:	ea00001a 	b	1045c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb0>
   103f0:	e5d53145 	ldrb	r3, [r5, #325]	; 0x145
   103f4:	e3530000 	cmp	r3, #0
   103f8:	1a000029 	bne	104a4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xf8>
   103fc:	e5d12006 	ldrb	r2, [r1, #6]
   10400:	e5d1e005 	ldrb	lr, [r1, #5]
   10404:	e5d1c004 	ldrb	ip, [r1, #4]
   10408:	e1a01202 	lsl	r1, r2, #4
   1040c:	e1a02003 	mov	r2, r3
   10410:	e20ea00f 	and	sl, lr, #15
   10414:	e18cc40a 	orr	ip, ip, sl, lsl #8
   10418:	e181122e 	orr	r1, r1, lr, lsr #4
   1041c:	e285af52 	add	sl, r5, #328	; 0x148
   10420:	e3500000 	cmp	r0, #0
   10424:	e3a00001 	mov	r0, #1
   10428:	e5c50145 	strb	r0, [r5, #325]	; 0x145
   1042c:	e1c8c0b2 	strh	ip, [r8, #2]
   10430:	e1ca10b0 	strh	r1, [sl]
   10434:	0a000004 	beq	1044c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xa0>
   10438:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   1043c:	e3500000 	cmp	r0, #0
   10440:	0a000013 	beq	10494 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xe8>
   10444:	e5d51144 	ldrb	r1, [r5, #324]	; 0x144
   10448:	eb0021a5 	bl	18ae4 <CMouseDevice::ReportHandler(unsigned int, int, int)>
   1044c:	e2844001 	add	r4, r4, #1
   10450:	e1570004 	cmp	r7, r4
   10454:	e3a00000 	mov	r0, #0
   10458:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1045c:	e0843184 	add	r3, r4, r4, lsl #3
   10460:	e0863003 	add	r3, r6, r3
   10464:	e5d32023 	ldrb	r2, [r3, #35]	; 0x23
   10468:	e2831020 	add	r1, r3, #32
   1046c:	e1b033a2 	lsrs	r3, r2, #7
   10470:	0affffde 	beq	103f0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x44>
   10474:	e3500000 	cmp	r0, #0
   10478:	e5c59145 	strb	r9, [r5, #325]	; 0x145
   1047c:	0afffff2 	beq	1044c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xa0>
   10480:	e3a03000 	mov	r3, #0
   10484:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   10488:	e1a02003 	mov	r2, r3
   1048c:	e3500000 	cmp	r0, #0
   10490:	1affffeb 	bne	10444 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x98>
   10494:	e59f208c 	ldr	r2, [pc, #140]	; 10528 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x17c>
   10498:	e59f108c 	ldr	r1, [pc, #140]	; 1052c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x180>
   1049c:	e59f008c 	ldr	r0, [pc, #140]	; 10530 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x184>
   104a0:	eb0050c0 	bl	247a8 <assertion_failed>
   104a4:	e5d1b005 	ldrb	fp, [r1, #5]
   104a8:	e5d1c004 	ldrb	ip, [r1, #4]
   104ac:	e20b300f 	and	r3, fp, #15
   104b0:	e1d820b2 	ldrh	r2, [r8, #2]
   104b4:	e18cc403 	orr	ip, ip, r3, lsl #8
   104b8:	e04c2002 	sub	r2, ip, r2
   104bc:	e352007f 	cmp	r2, #127	; 0x7f
   104c0:	e3e0e07e 	mvn	lr, #126	; 0x7e
   104c4:	a3a0207f 	movge	r2, #127	; 0x7f
   104c8:	e5d11006 	ldrb	r1, [r1, #6]
   104cc:	e285af52 	add	sl, r5, #328	; 0x148
   104d0:	e1da30b0 	ldrh	r3, [sl]
   104d4:	e1a01201 	lsl	r1, r1, #4
   104d8:	e181122b 	orr	r1, r1, fp, lsr #4
   104dc:	e0413003 	sub	r3, r1, r3
   104e0:	e152000e 	cmp	r2, lr
   104e4:	b1a0200e 	movlt	r2, lr
   104e8:	e353007f 	cmp	r3, #127	; 0x7f
   104ec:	a3a0307f 	movge	r3, #127	; 0x7f
   104f0:	e153000e 	cmp	r3, lr
   104f4:	b1a0300e 	movlt	r3, lr
   104f8:	e192e003 	orrs	lr, r2, r3
   104fc:	13800001 	orrne	r0, r0, #1
   10500:	eaffffc6 	b	10420 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x74>
   10504:	e5d02144 	ldrb	r2, [r0, #324]	; 0x144
   10508:	e3520000 	cmp	r2, #0
   1050c:	13a00000 	movne	r0, #0
   10510:	1affffae 	bne	103d0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x24>
   10514:	e1a030a3 	lsr	r3, r3, #1
   10518:	e2033001 	and	r3, r3, #1
   1051c:	e3a00001 	mov	r0, #1
   10520:	e5c53144 	strb	r3, [r5, #324]	; 0x144
   10524:	eaffffa9 	b	103d0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x24>
   10528:	0000015a 	.word	0x0000015a
   1052c:	00041ed4 	.word	0x00041ed4
   10530:	00041ee8 	.word	0x00041ee8

00010534 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
   10534:	e2422040 	sub	r2, r2, #64	; 0x40
   10538:	e16f2f12 	clz	r2, r2
   1053c:	e3510000 	cmp	r1, #0
   10540:	e1a022a2 	lsr	r2, r2, #5
   10544:	03a02000 	moveq	r2, #0
   10548:	e3520000 	cmp	r2, #0
   1054c:	012fff1e 	bxeq	lr
   10550:	e92d4070 	push	{r4, r5, r6, lr}
   10554:	e1a04000 	mov	r4, r0
   10558:	e5903000 	ldr	r3, [r0]
   1055c:	e1a05001 	mov	r5, r1
   10560:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   10564:	e12fff33 	blx	r3
   10568:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   1056c:	e3530000 	cmp	r3, #0
   10570:	0a000003 	beq	10584 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x50>
   10574:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   10578:	e2841024 	add	r1, r4, #36	; 0x24
   1057c:	e2400001 	sub	r0, r0, #1
   10580:	e12fff33 	blx	r3
   10584:	e5943140 	ldr	r3, [r4, #320]	; 0x140
   10588:	e3530000 	cmp	r3, #0
   1058c:	08bd8070 	popeq	{r4, r5, r6, pc}
   10590:	e1a01005 	mov	r1, r5
   10594:	e1a00004 	mov	r0, r4
   10598:	e8bd4070 	pop	{r4, r5, r6, lr}
   1059c:	eaffff82 	b	103ac <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>

000105a0 <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
   105a0:	e92d4010 	push	{r4, lr}
   105a4:	e590213c 	ldr	r2, [r0, #316]	; 0x13c
   105a8:	e5d0c131 	ldrb	ip, [r0, #305]	; 0x131
   105ac:	e3a03000 	mov	r3, #0
   105b0:	e5c2c003 	strb	ip, [r2, #3]
   105b4:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   105b8:	e5d0e133 	ldrb	lr, [r0, #307]	; 0x133
   105bc:	e3a02020 	mov	r2, #32
   105c0:	e5cce004 	strb	lr, [ip, #4]
   105c4:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   105c8:	e5d0e132 	ldrb	lr, [r0, #306]	; 0x132
   105cc:	e5cce005 	strb	lr, [ip, #5]
   105d0:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   105d4:	e5d0e134 	ldrb	lr, [r0, #308]	; 0x134
   105d8:	e5cce006 	strb	lr, [ip, #6]
   105dc:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   105e0:	e5d0e135 	ldrb	lr, [r0, #309]	; 0x135
   105e4:	e5cce007 	strb	lr, [ip, #7]
   105e8:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   105ec:	e5d0e136 	ldrb	lr, [r0, #310]	; 0x136
   105f0:	e5cce008 	strb	lr, [ip, #8]
   105f4:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   105f8:	e5d0e137 	ldrb	lr, [r0, #311]	; 0x137
   105fc:	e5cce009 	strb	lr, [ip, #9]
   10600:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10604:	e5d0e138 	ldrb	lr, [r0, #312]	; 0x138
   10608:	e5cce00a 	strb	lr, [ip, #10]
   1060c:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   10610:	eb000779 	bl	123fc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   10614:	e2504000 	subs	r4, r0, #0
   10618:	0a000001 	beq	10624 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x84>
   1061c:	e1a00004 	mov	r0, r4
   10620:	e8bd8010 	pop	{r4, pc}
   10624:	eb005947 	bl	26b48 <CLogger::Get()>
   10628:	e3a02001 	mov	r2, #1
   1062c:	e59f300c 	ldr	r3, [pc, #12]	; 10640 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0xa0>
   10630:	e59f100c 	ldr	r1, [pc, #12]	; 10644 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0xa4>
   10634:	eb005885 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10638:	e1a00004 	mov	r0, r4
   1063c:	e8bd8010 	pop	{r4, pc}
   10640:	00041efc 	.word	0x00041efc
   10644:	00041f8c 	.word	0x00041f8c

00010648 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
   10648:	e2411001 	sub	r1, r1, #1
   1064c:	e3510006 	cmp	r1, #6
   10650:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   10654:	ea000029 	b	10700 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xb8>
   10658:	00010688 	.word	0x00010688
   1065c:	0001069c 	.word	0x0001069c
   10660:	000106b0 	.word	0x000106b0
   10664:	000106c4 	.word	0x000106c4
   10668:	000106d8 	.word	0x000106d8
   1066c:	000106ec 	.word	0x000106ec
   10670:	00010674 	.word	0x00010674
   10674:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
   10678:	e3e03000 	mvn	r3, #0
   1067c:	e5802134 	str	r2, [r0, #308]	; 0x134
   10680:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   10684:	eaffffc5 	b	105a0 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10688:	e3e02000 	mvn	r2, #0
   1068c:	e59f307c 	ldr	r3, [pc, #124]	; 10710 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xc8>
   10690:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   10694:	e5803134 	str	r3, [r0, #308]	; 0x134
   10698:	eaffffc0 	b	105a0 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1069c:	e3e02000 	mvn	r2, #0
   106a0:	e59f306c 	ldr	r3, [pc, #108]	; 10714 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xcc>
   106a4:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   106a8:	e5803134 	str	r3, [r0, #308]	; 0x134
   106ac:	eaffffbb 	b	105a0 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   106b0:	e3e02000 	mvn	r2, #0
   106b4:	e59f305c 	ldr	r3, [pc, #92]	; 10718 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xd0>
   106b8:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   106bc:	e5803134 	str	r3, [r0, #308]	; 0x134
   106c0:	eaffffb6 	b	105a0 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   106c4:	e3e02000 	mvn	r2, #0
   106c8:	e59f304c 	ldr	r3, [pc, #76]	; 1071c <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xd4>
   106cc:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   106d0:	e5803134 	str	r3, [r0, #308]	; 0x134
   106d4:	eaffffb1 	b	105a0 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   106d8:	e3e02000 	mvn	r2, #0
   106dc:	e59f303c 	ldr	r3, [pc, #60]	; 10720 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xd8>
   106e0:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   106e4:	e5803134 	str	r3, [r0, #308]	; 0x134
   106e8:	eaffffac 	b	105a0 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   106ec:	e3e02000 	mvn	r2, #0
   106f0:	e59f302c 	ldr	r3, [pc, #44]	; 10724 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xdc>
   106f4:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   106f8:	e5803134 	str	r3, [r0, #308]	; 0x134
   106fc:	eaffffa7 	b	105a0 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10700:	e3a03000 	mov	r3, #0
   10704:	e5803134 	str	r3, [r0, #308]	; 0x134
   10708:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   1070c:	eaffffdc 	b	10684 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x3c>
   10710:	7fff0000 	.word	0x7fff0000
   10714:	7f0000ff 	.word	0x7f0000ff
   10718:	7fff00ff 	.word	0x7fff00ff
   1071c:	7f00ff00 	.word	0x7f00ff00
   10720:	7fffff00 	.word	0x7fffff00
   10724:	7f00ffff 	.word	0x7f00ffff

00010728 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   10728:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1072c:	e1a0e821 	lsr	lr, r1, #16
   10730:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   10734:	e1a02421 	lsr	r2, r1, #8
   10738:	e5c01136 	strb	r1, [r0, #310]	; 0x136
   1073c:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   10740:	e5c0e134 	strb	lr, [r0, #308]	; 0x134
   10744:	e5c02135 	strb	r2, [r0, #309]	; 0x135
   10748:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1074c:	eaffff93 	b	105a0 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

00010750 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
   10750:	e3510001 	cmp	r1, #1
   10754:	0a000005 	beq	10770 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x20>
   10758:	e3510002 	cmp	r1, #2
   1075c:	0a00000e 	beq	1079c <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x4c>
   10760:	e3510000 	cmp	r1, #0
   10764:	0a000007 	beq	10788 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x38>
   10768:	e3a00001 	mov	r0, #1
   1076c:	e12fff1e 	bx	lr
   10770:	e3e0100c 	mvn	r1, #12
   10774:	e3a02cff 	mov	r2, #65280	; 0xff00
   10778:	e2803e13 	add	r3, r0, #304	; 0x130
   1077c:	e5c01131 	strb	r1, [r0, #305]	; 0x131
   10780:	e1c320b2 	strh	r2, [r3, #2]
   10784:	eaffff85 	b	105a0 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10788:	e3e0200f 	mvn	r2, #15
   1078c:	e2803e13 	add	r3, r0, #304	; 0x130
   10790:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   10794:	e1c310b2 	strh	r1, [r3, #2]
   10798:	eaffff80 	b	105a0 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1079c:	e3e0100c 	mvn	r1, #12
   107a0:	e3a020ff 	mov	r2, #255	; 0xff
   107a4:	e2803e13 	add	r3, r0, #304	; 0x130
   107a8:	e5c01131 	strb	r1, [r0, #305]	; 0x131
   107ac:	e1c320b2 	strh	r2, [r3, #2]
   107b0:	eaffff7a 	b	105a0 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

000107b4 <CUSBGamePadPS4Device::DisableTouchpad()>:
   107b4:	e3a02000 	mov	r2, #0
   107b8:	e59f3004 	ldr	r3, [pc, #4]	; 107c4 <CUSBGamePadPS4Device::DisableTouchpad()+0x10>
   107bc:	e5c32000 	strb	r2, [r3]
   107c0:	e12fff1e 	bx	lr
   107c4:	00049fa0 	.word	0x00049fa0

000107c8 <CUSBGamePadPS4Device::Configure()>:
   107c8:	e5d03130 	ldrb	r3, [r0, #304]	; 0x130
   107cc:	e92d4070 	push	{r4, r5, r6, lr}
   107d0:	e3530000 	cmp	r3, #0
   107d4:	0a00003c 	beq	108cc <CUSBGamePadPS4Device::Configure()+0x104>
   107d8:	e3a02040 	mov	r2, #64	; 0x40
   107dc:	e2803f4a 	add	r3, r0, #296	; 0x128
   107e0:	e1c320b0 	strh	r2, [r3]
   107e4:	e1a04000 	mov	r4, r0
   107e8:	eb001d16 	bl	17c48 <CUSBGamePadDevice::Configure()>
   107ec:	e3500000 	cmp	r0, #0
   107f0:	0a00003f 	beq	108f4 <CUSBGamePadPS4Device::Configure()+0x12c>
   107f4:	e59f3114 	ldr	r3, [pc, #276]	; 10910 <CUSBGamePadPS4Device::Configure()+0x148>
   107f8:	e5d33000 	ldrb	r3, [r3]
   107fc:	e3530000 	cmp	r3, #0
   10800:	1a000035 	bne	108dc <CUSBGamePadPS4Device::Configure()+0x114>
   10804:	e3a02006 	mov	r2, #6
   10808:	e3a0c00e 	mov	ip, #14
   1080c:	e3a00001 	mov	r0, #1
   10810:	e1a03004 	mov	r3, r4
   10814:	e3a05000 	mov	r5, #0
   10818:	e3a010ff 	mov	r1, #255	; 0xff
   1081c:	e5842024 	str	r2, [r4, #36]	; 0x24
   10820:	e584c104 	str	ip, [r4, #260]	; 0x104
   10824:	e58400e8 	str	r0, [r4, #232]	; 0xe8
   10828:	e2842048 	add	r2, r4, #72	; 0x48
   1082c:	e583502c 	str	r5, [r3, #44]	; 0x2c
   10830:	e5831030 	str	r1, [r3, #48]	; 0x30
   10834:	e283300c 	add	r3, r3, #12
   10838:	e1530002 	cmp	r3, r2
   1083c:	1afffffa 	bne	1082c <CUSBGamePadPS4Device::Configure()+0x64>
   10840:	e3a00020 	mov	r0, #32
   10844:	eb0069e5 	bl	2afe0 <operator new[](unsigned int)>
   10848:	e3a06005 	mov	r6, #5
   1084c:	e3a02020 	mov	r2, #32
   10850:	e3a01000 	mov	r1, #0
   10854:	e584013c 	str	r0, [r4, #316]	; 0x13c
   10858:	eb0065ab 	bl	29f0c <memset>
   1085c:	e3a0e007 	mov	lr, #7
   10860:	e3a0c004 	mov	ip, #4
   10864:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
   10868:	e3e03000 	mvn	r3, #0
   1086c:	e3e0000f 	mvn	r0, #15
   10870:	e594113c 	ldr	r1, [r4, #316]	; 0x13c
   10874:	e5c16000 	strb	r6, [r1]
   10878:	e594113c 	ldr	r1, [r4, #316]	; 0x13c
   1087c:	e5c1e001 	strb	lr, [r1, #1]
   10880:	e594113c 	ldr	r1, [r4, #316]	; 0x13c
   10884:	e5c1c002 	strb	ip, [r1, #2]
   10888:	e2841e13 	add	r1, r4, #304	; 0x130
   1088c:	e5c40131 	strb	r0, [r4, #305]	; 0x131
   10890:	e1c150b2 	strh	r5, [r1, #2]
   10894:	e1a00004 	mov	r0, r4
   10898:	e5842134 	str	r2, [r4, #308]	; 0x134
   1089c:	e5c43138 	strb	r3, [r4, #312]	; 0x138
   108a0:	ebffff3e 	bl	105a0 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   108a4:	e2843f4d 	add	r3, r4, #308	; 0x134
   108a8:	e1c350b0 	strh	r5, [r3]
   108ac:	e3a000fa 	mov	r0, #250	; 0xfa
   108b0:	e5c45136 	strb	r5, [r4, #310]	; 0x136
   108b4:	eb006553 	bl	29e08 <CTimer::SimpleMsDelay(unsigned int)>
   108b8:	e1a00004 	mov	r0, r4
   108bc:	ebffff37 	bl	105a0 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   108c0:	e1a00004 	mov	r0, r4
   108c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   108c8:	ea000754 	b	12620 <CUSBHIDDevice::StartRequest()>
   108cc:	e59f1040 	ldr	r1, [pc, #64]	; 10914 <CUSBGamePadPS4Device::Configure()+0x14c>
   108d0:	ebfffc4e 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   108d4:	e3a00000 	mov	r0, #0
   108d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   108dc:	e3a00028 	mov	r0, #40	; 0x28
   108e0:	eb0069b8 	bl	2afc8 <operator new(unsigned int)>
   108e4:	e1a05000 	mov	r5, r0
   108e8:	eb002043 	bl	189fc <CMouseDevice::CMouseDevice()>
   108ec:	e5845140 	str	r5, [r4, #320]	; 0x140
   108f0:	eaffffc3 	b	10804 <CUSBGamePadPS4Device::Configure()+0x3c>
   108f4:	eb005893 	bl	26b48 <CLogger::Get()>
   108f8:	e3a02001 	mov	r2, #1
   108fc:	e59f3014 	ldr	r3, [pc, #20]	; 10918 <CUSBGamePadPS4Device::Configure()+0x150>
   10900:	e59f100c 	ldr	r1, [pc, #12]	; 10914 <CUSBGamePadPS4Device::Configure()+0x14c>
   10904:	eb0057d1 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10908:	e3a00000 	mov	r0, #0
   1090c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10910:	00049fa0 	.word	0x00049fa0
   10914:	00041f8c 	.word	0x00041f8c
   10918:	00041da4 	.word	0x00041da4

0001091c <CUSBGamePadPS4Device::GetProperties()>:
   1091c:	e3a0003f 	mov	r0, #63	; 0x3f
   10920:	e12fff1e 	bx	lr

00010924 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   10924:	e92d4010 	push	{r4, lr}
   10928:	e1a04000 	mov	r4, r0
   1092c:	e5900134 	ldr	r0, [r0, #308]	; 0x134
   10930:	e59f3024 	ldr	r3, [pc, #36]	; 1095c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x38>
   10934:	e3500000 	cmp	r0, #0
   10938:	e5843000 	str	r3, [r4]
   1093c:	0a000000 	beq	10944 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
   10940:	eb0069ad 	bl	2affc <operator delete[](void*)>
   10944:	e3a03000 	mov	r3, #0
   10948:	e1a00004 	mov	r0, r4
   1094c:	e5843134 	str	r3, [r4, #308]	; 0x134
   10950:	eb001cf8 	bl	17d38 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10954:	e1a00004 	mov	r0, r4
   10958:	e8bd8010 	pop	{r4, pc}
   1095c:	0004200c 	.word	0x0004200c

00010960 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   10960:	e92d4010 	push	{r4, lr}
   10964:	e1a04000 	mov	r4, r0
   10968:	ebffffed 	bl	10924 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   1096c:	e1a00004 	mov	r0, r4
   10970:	e3a01f4f 	mov	r1, #316	; 0x13c
   10974:	eb0069a1 	bl	2b000 <operator delete(void*, unsigned int)>
   10978:	e1a00004 	mov	r0, r4
   1097c:	e8bd8010 	pop	{r4, pc}

00010980 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
   10980:	e92d4070 	push	{r4, r5, r6, lr}
   10984:	e1a04000 	mov	r4, r0
   10988:	e1a05002 	mov	r5, r2
   1098c:	eb001cd8 	bl	17cf4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   10990:	e3a03000 	mov	r3, #0
   10994:	e59f1018 	ldr	r1, [pc, #24]	; 109b4 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)+0x34>
   10998:	e2842f4e 	add	r2, r4, #312	; 0x138
   1099c:	e5c45130 	strb	r5, [r4, #304]	; 0x130
   109a0:	e5841000 	str	r1, [r4]
   109a4:	e5843134 	str	r3, [r4, #308]	; 0x134
   109a8:	e1a00004 	mov	r0, r4
   109ac:	e1c230b0 	strh	r3, [r2]
   109b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   109b4:	0004200c 	.word	0x0004200c

000109b8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   109b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109bc:	e0819002 	add	r9, r1, r2
   109c0:	e2895007 	add	r5, r9, #7
   109c4:	e1a051a5 	lsr	r5, r5, #3
   109c8:	e15501a1 	cmp	r5, r1, lsr #3
   109cc:	e24dd00c 	sub	sp, sp, #12
   109d0:	9a000035 	bls	10aac <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xf4>
   109d4:	e3a07001 	mov	r7, #1
   109d8:	e3a04000 	mov	r4, #0
   109dc:	e201e007 	and	lr, r1, #7
   109e0:	e08e6002 	add	r6, lr, r2
   109e4:	e1a06617 	lsl	r6, r7, r6
   109e8:	e6ef6076 	uxtb	r6, r6
   109ec:	e1a07e17 	lsl	r7, r7, lr
   109f0:	e6ef7077 	uxtb	r7, r7
   109f4:	e246a001 	sub	sl, r6, #1
   109f8:	e1a0c1a1 	lsr	ip, r1, #3
   109fc:	e0466007 	sub	r6, r6, r7
   10a00:	e2491001 	sub	r1, r9, #1
   10a04:	e2677000 	rsb	r7, r7, #0
   10a08:	e6ef907a 	uxtb	r9, sl
   10a0c:	e1a08000 	mov	r8, r0
   10a10:	e1a0300c 	mov	r3, ip
   10a14:	e1a00004 	mov	r0, r4
   10a18:	e1a011a1 	lsr	r1, r1, #3
   10a1c:	e58d9004 	str	r9, [sp, #4]
   10a20:	e6ef6076 	uxtb	r6, r6
   10a24:	e6ef7077 	uxtb	r7, r7
   10a28:	e26eb008 	rsb	fp, lr, #8
   10a2c:	ea00000d 	b	10a68 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb0>
   10a30:	e15c0003 	cmp	ip, r3
   10a34:	0a000015 	beq	10a90 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>
   10a38:	e1510003 	cmp	r1, r3
   10a3c:	07d89001 	ldrbeq	r9, [r8, r1]
   10a40:	059da004 	ldreq	sl, [sp, #4]
   10a44:	17d8a003 	ldrbne	sl, [r8, r3]
   10a48:	12844008 	addne	r4, r4, #8
   10a4c:	0009900a 	andeq	r9, r9, sl
   10a50:	10429004 	subne	r9, r2, r4
   10a54:	01800009 	orreq	r0, r0, r9
   10a58:	1180091a 	orrne	r0, r0, sl, lsl r9
   10a5c:	e2833001 	add	r3, r3, #1
   10a60:	e1530005 	cmp	r3, r5
   10a64:	0a000007 	beq	10a88 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd0>
   10a68:	e151000c 	cmp	r1, ip
   10a6c:	1affffef 	bne	10a30 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x78>
   10a70:	e7d80003 	ldrb	r0, [r8, r3]
   10a74:	e2833001 	add	r3, r3, #1
   10a78:	e0000006 	and	r0, r0, r6
   10a7c:	e1530005 	cmp	r3, r5
   10a80:	e1a00e50 	asr	r0, r0, lr
   10a84:	1afffff7 	bne	10a68 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb0>
   10a88:	e28dd00c 	add	sp, sp, #12
   10a8c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a90:	e7d8000c 	ldrb	r0, [r8, ip]
   10a94:	e084400b 	add	r4, r4, fp
   10a98:	e0000007 	and	r0, r0, r7
   10a9c:	e1a00e50 	asr	r0, r0, lr
   10aa0:	e0429004 	sub	r9, r2, r4
   10aa4:	e1a00910 	lsl	r0, r0, r9
   10aa8:	eaffffeb 	b	10a5c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa4>
   10aac:	e3a00000 	mov	r0, #0
   10ab0:	e28dd00c 	add	sp, sp, #12
   10ab4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010ab8 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   10ab8:	e92d4010 	push	{r4, lr}
   10abc:	e1a04002 	mov	r4, r2
   10ac0:	ebffffbc 	bl	109b8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10ac4:	e3a03001 	mov	r3, #1
   10ac8:	e2422001 	sub	r2, r2, #1
   10acc:	e0102213 	ands	r2, r0, r3, lsl r2
   10ad0:	11a03413 	lslne	r3, r3, r4
   10ad4:	12633000 	rsbne	r3, r3, #0
   10ad8:	11800003 	orrne	r0, r0, r3
   10adc:	e8bd8010 	pop	{r4, pc}

00010ae0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
   10ae0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ae4:	e5905134 	ldr	r5, [r0, #308]	; 0x134
   10ae8:	e24dd034 	sub	sp, sp, #52	; 0x34
   10aec:	e3550000 	cmp	r5, #0
   10af0:	e58d0010 	str	r0, [sp, #16]
   10af4:	0a000099 	beq	10d60 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x280>
   10af8:	e59d3010 	ldr	r3, [sp, #16]
   10afc:	e2833f4e 	add	r3, r3, #312	; 0x138
   10b00:	e1d340b0 	ldrh	r4, [r3]
   10b04:	e3540000 	cmp	r4, #0
   10b08:	0a0000f4 	beq	10ee0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x400>
   10b0c:	e3a09000 	mov	r9, #0
   10b10:	e59fb3e0 	ldr	fp, [pc, #992]	; 10ef8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x418>
   10b14:	ee071a90 	vmov	s15, r1
   10b18:	e1a0a009 	mov	sl, r9
   10b1c:	e1a07009 	mov	r7, r9
   10b20:	e1a06009 	mov	r6, r9
   10b24:	e58db008 	str	fp, [sp, #8]
   10b28:	e58d901c 	str	r9, [sp, #28]
   10b2c:	e58d9018 	str	r9, [sp, #24]
   10b30:	e58d9004 	str	r9, [sp, #4]
   10b34:	e58db014 	str	fp, [sp, #20]
   10b38:	e58db00c 	str	fp, [sp, #12]
   10b3c:	ea000007 	b	10b60 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x80>
   10b40:	e3530014 	cmp	r3, #20
   10b44:	058d800c 	streq	r8, [sp, #12]
   10b48:	0a000002 	beq	10b58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10b4c:	da000033 	ble	10c20 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x140>
   10b50:	e3530024 	cmp	r3, #36	; 0x24
   10b54:	01a0b008 	moveq	fp, r8
   10b58:	e3540000 	cmp	r4, #0
   10b5c:	0a000022 	beq	10bec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x10c>
   10b60:	e1d530d0 	ldrsb	r3, [r5]
   10b64:	e2038003 	and	r8, r3, #3
   10b68:	e3580001 	cmp	r8, #1
   10b6c:	0a000055 	beq	10cc8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e8>
   10b70:	e3580002 	cmp	r8, #2
   10b74:	0a00004c 	beq	10cac <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1cc>
   10b78:	e3580000 	cmp	r8, #0
   10b7c:	02444001 	subeq	r4, r4, #1
   10b80:	06ff4074 	uxtheq	r4, r4
   10b84:	02855001 	addeq	r5, r5, #1
   10b88:	0a00000a 	beq	10bb8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xd8>
   10b8c:	e1d580d3 	ldrsb	r8, [r5, #3]
   10b90:	e1d520d2 	ldrsb	r2, [r5, #2]
   10b94:	e1d510d1 	ldrsb	r1, [r5, #1]
   10b98:	e1a08808 	lsl	r8, r8, #16
   10b9c:	e1888402 	orr	r8, r8, r2, lsl #8
   10ba0:	e1d520d4 	ldrsb	r2, [r5, #4]
   10ba4:	e2444005 	sub	r4, r4, #5
   10ba8:	e1888001 	orr	r8, r8, r1
   10bac:	e6ff4074 	uxth	r4, r4
   10bb0:	e1888c02 	orr	r8, r8, r2, lsl #24
   10bb4:	e2855005 	add	r5, r5, #5
   10bb8:	e20330fc 	and	r3, r3, #252	; 0xfc
   10bbc:	e3530084 	cmp	r3, #132	; 0x84
   10bc0:	0a00002c 	beq	10c78 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x198>
   10bc4:	e3530034 	cmp	r3, #52	; 0x34
   10bc8:	0a000043 	beq	10cdc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1fc>
   10bcc:	daffffdb 	ble	10b40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10bd0:	e3530080 	cmp	r3, #128	; 0x80
   10bd4:	0a000042 	beq	10ce4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10bd8:	da000016 	ble	10c38 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x158>
   10bdc:	e3530094 	cmp	r3, #148	; 0x94
   10be0:	01a07008 	moveq	r7, r8
   10be4:	e3540000 	cmp	r4, #0
   10be8:	1affffdc 	bne	10b60 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x80>
   10bec:	e59d3004 	ldr	r3, [sp, #4]
   10bf0:	e2834007 	add	r4, r3, #7
   10bf4:	e1a041a4 	lsr	r4, r4, #3
   10bf8:	e6ff4074 	uxth	r4, r4
   10bfc:	e59d2010 	ldr	r2, [sp, #16]
   10c00:	e59d1018 	ldr	r1, [sp, #24]
   10c04:	e2823f4a 	add	r3, r2, #296	; 0x128
   10c08:	e5821024 	str	r1, [r2, #36]	; 0x24
   10c0c:	e59d101c 	ldr	r1, [sp, #28]
   10c10:	e58210e8 	str	r1, [r2, #232]	; 0xe8
   10c14:	e1c340b0 	strh	r4, [r3]
   10c18:	e28dd034 	add	sp, sp, #52	; 0x34
   10c1c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c20:	e3530004 	cmp	r3, #4
   10c24:	1a000009 	bne	10c50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x170>
   10c28:	e3590001 	cmp	r9, #1
   10c2c:	03580009 	cmpeq	r8, #9
   10c30:	03a09002 	moveq	r9, #2
   10c34:	eaffffc7 	b	10b58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10c38:	e3530044 	cmp	r3, #68	; 0x44
   10c3c:	058d8008 	streq	r8, [sp, #8]
   10c40:	0affffc4 	beq	10b58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10c44:	e3530074 	cmp	r3, #116	; 0x74
   10c48:	01a06008 	moveq	r6, r8
   10c4c:	eaffffc1 	b	10b58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10c50:	e3530008 	cmp	r3, #8
   10c54:	1affffbf 	bne	10b58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10c58:	e3580036 	cmp	r8, #54	; 0x36
   10c5c:	ca000028 	bgt	10d04 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x224>
   10c60:	e358002f 	cmp	r8, #47	; 0x2f
   10c64:	ca00003a 	bgt	10d54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x274>
   10c68:	e2488004 	sub	r8, r8, #4
   10c6c:	e3580001 	cmp	r8, #1
   10c70:	93a09001 	movls	r9, #1
   10c74:	eaffffb7 	b	10b58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10c78:	e35a0000 	cmp	sl, #0
   10c7c:	1affffda 	bne	10bec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x10c>
   10c80:	e1a0100a 	mov	r1, sl
   10c84:	e3a02008 	mov	r2, #8
   10c88:	ee170a90 	vmov	r0, s15
   10c8c:	ebffff49 	bl	109b8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10c90:	e3500000 	cmp	r0, #0
   10c94:	11500008 	cmpne	r0, r8
   10c98:	1affffde 	bne	10c18 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x138>
   10c9c:	e3a03008 	mov	r3, #8
   10ca0:	e1a0a008 	mov	sl, r8
   10ca4:	e58d3004 	str	r3, [sp, #4]
   10ca8:	eaffffaa 	b	10b58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10cac:	e5d58001 	ldrb	r8, [r5, #1]
   10cb0:	e1d520d2 	ldrsb	r2, [r5, #2]
   10cb4:	e2444003 	sub	r4, r4, #3
   10cb8:	e6ff4074 	uxth	r4, r4
   10cbc:	e1888402 	orr	r8, r8, r2, lsl #8
   10cc0:	e2855003 	add	r5, r5, #3
   10cc4:	eaffffbb 	b	10bb8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xd8>
   10cc8:	e2444002 	sub	r4, r4, #2
   10ccc:	e1d580d1 	ldrsb	r8, [r5, #1]
   10cd0:	e6ff4074 	uxth	r4, r4
   10cd4:	e2855002 	add	r5, r5, #2
   10cd8:	eaffffb6 	b	10bb8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xd8>
   10cdc:	e58d8014 	str	r8, [sp, #20]
   10ce0:	eaffff9c 	b	10b58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10ce4:	e2088003 	and	r8, r8, #3
   10ce8:	e3580002 	cmp	r8, #2
   10cec:	0a000009 	beq	10d18 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x238>
   10cf0:	e0020796 	mul	r2, r6, r7
   10cf4:	e59d3004 	ldr	r3, [sp, #4]
   10cf8:	e0833002 	add	r3, r3, r2
   10cfc:	e58d3004 	str	r3, [sp, #4]
   10d00:	eaffff94 	b	10b58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10d04:	e3580039 	cmp	r8, #57	; 0x39
   10d08:	1affff92 	bne	10b58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10d0c:	e3590001 	cmp	r9, #1
   10d10:	03a09004 	moveq	r9, #4
   10d14:	eaffff8f 	b	10b58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10d18:	e3590003 	cmp	r9, #3
   10d1c:	0a000013 	beq	10d70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x290>
   10d20:	e3590004 	cmp	r9, #4
   10d24:	0a00004a 	beq	10e54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x374>
   10d28:	e3590002 	cmp	r9, #2
   10d2c:	e0020796 	mul	r2, r6, r7
   10d30:	1affffef 	bne	10cf4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   10d34:	e59d8010 	ldr	r8, [sp, #16]
   10d38:	ee170a90 	vmov	r0, s15
   10d3c:	e59d1004 	ldr	r1, [sp, #4]
   10d40:	e5887104 	str	r7, [r8, #260]	; 0x104
   10d44:	ebffff1b 	bl	109b8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10d48:	e3a09001 	mov	r9, #1
   10d4c:	e5880108 	str	r0, [r8, #264]	; 0x108
   10d50:	eaffffe7 	b	10cf4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   10d54:	e3590001 	cmp	r9, #1
   10d58:	03a09003 	moveq	r9, #3
   10d5c:	eaffff7d 	b	10b58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10d60:	e3a020a2 	mov	r2, #162	; 0xa2
   10d64:	e59f1190 	ldr	r1, [pc, #400]	; 10efc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x41c>
   10d68:	e59f0190 	ldr	r0, [pc, #400]	; 10f00 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x420>
   10d6c:	eb004e8d 	bl	247a8 <assertion_failed>
   10d70:	e3570000 	cmp	r7, #0
   10d74:	0a00005c 	beq	10eec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x40c>
   10d78:	e59d200c 	ldr	r2, [sp, #12]
   10d7c:	e59f1174 	ldr	r1, [pc, #372]	; 10ef8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x418>
   10d80:	e59d0014 	ldr	r0, [sp, #20]
   10d84:	e1520001 	cmp	r2, r1
   10d88:	e1a03002 	mov	r3, r2
   10d8c:	01a03000 	moveq	r3, r0
   10d90:	e15b0001 	cmp	fp, r1
   10d94:	e59d2008 	ldr	r2, [sp, #8]
   10d98:	11a0200b 	movne	r2, fp
   10d9c:	e59d0018 	ldr	r0, [sp, #24]
   10da0:	e59d1004 	ldr	r1, [sp, #4]
   10da4:	e59dc010 	ldr	ip, [sp, #16]
   10da8:	e0808080 	add	r8, r0, r0, lsl #1
   10dac:	e2800001 	add	r0, r0, #1
   10db0:	e58da020 	str	sl, [sp, #32]
   10db4:	e58d5024 	str	r5, [sp, #36]	; 0x24
   10db8:	e58d4028 	str	r4, [sp, #40]	; 0x28
   10dbc:	e58db02c 	str	fp, [sp, #44]	; 0x2c
   10dc0:	e1a04006 	mov	r4, r6
   10dc4:	e3a09000 	mov	r9, #0
   10dc8:	e1a05002 	mov	r5, r2
   10dcc:	e1a0b003 	mov	fp, r3
   10dd0:	e1a06001 	mov	r6, r1
   10dd4:	ee17aa90 	vmov	sl, s15
   10dd8:	e08c8108 	add	r8, ip, r8, lsl #2
   10ddc:	e58d0018 	str	r0, [sp, #24]
   10de0:	ea000009 	b	10e0c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x32c>
   10de4:	ebfffef3 	bl	109b8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10de8:	e59d3018 	ldr	r3, [sp, #24]
   10dec:	e5880028 	str	r0, [r8, #40]	; 0x28
   10df0:	e083c009 	add	ip, r3, r9
   10df4:	e2899001 	add	r9, r9, #1
   10df8:	e359000f 	cmp	r9, #15
   10dfc:	91590007 	cmpls	r9, r7
   10e00:	e0866004 	add	r6, r6, r4
   10e04:	e288800c 	add	r8, r8, #12
   10e08:	2a000008 	bcs	10e30 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x350>
   10e0c:	e35b0000 	cmp	fp, #0
   10e10:	e1a02004 	mov	r2, r4
   10e14:	e1a01006 	mov	r1, r6
   10e18:	e1a0000a 	mov	r0, sl
   10e1c:	e588b02c 	str	fp, [r8, #44]	; 0x2c
   10e20:	e5885030 	str	r5, [r8, #48]	; 0x30
   10e24:	aaffffee 	bge	10de4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x304>
   10e28:	ebffff22 	bl	10ab8 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   10e2c:	eaffffed 	b	10de8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x308>
   10e30:	e1a06004 	mov	r6, r4
   10e34:	e3a09001 	mov	r9, #1
   10e38:	e0020796 	mul	r2, r6, r7
   10e3c:	e59da020 	ldr	sl, [sp, #32]
   10e40:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   10e44:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
   10e48:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   10e4c:	e58dc018 	str	ip, [sp, #24]
   10e50:	eaffffa7 	b	10cf4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   10e54:	e3570000 	cmp	r7, #0
   10e58:	0a000023 	beq	10eec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x40c>
   10e5c:	e59d201c 	ldr	r2, [sp, #28]
   10e60:	e59d0010 	ldr	r0, [sp, #16]
   10e64:	e282303b 	add	r3, r2, #59	; 0x3b
   10e68:	e59d1004 	ldr	r1, [sp, #4]
   10e6c:	e0809103 	add	r9, r0, r3, lsl #2
   10e70:	e2823001 	add	r3, r2, #1
   10e74:	e58da01c 	str	sl, [sp, #28]
   10e78:	e1a02006 	mov	r2, r6
   10e7c:	e58d5020 	str	r5, [sp, #32]
   10e80:	e3a08000 	mov	r8, #0
   10e84:	e1a05009 	mov	r5, r9
   10e88:	e1a06001 	mov	r6, r1
   10e8c:	ee17aa90 	vmov	sl, s15
   10e90:	e1a09003 	mov	r9, r3
   10e94:	e58d4024 	str	r4, [sp, #36]	; 0x24
   10e98:	e1a01006 	mov	r1, r6
   10e9c:	e1a0000a 	mov	r0, sl
   10ea0:	e0894008 	add	r4, r9, r8
   10ea4:	e2888001 	add	r8, r8, #1
   10ea8:	ebfffec2 	bl	109b8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10eac:	e3580005 	cmp	r8, #5
   10eb0:	91580007 	cmpls	r8, r7
   10eb4:	e0866002 	add	r6, r6, r2
   10eb8:	e4850004 	str	r0, [r5], #4
   10ebc:	3afffff5 	bcc	10e98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3b8>
   10ec0:	e1a06002 	mov	r6, r2
   10ec4:	e59da01c 	ldr	sl, [sp, #28]
   10ec8:	e3a09001 	mov	r9, #1
   10ecc:	e58d401c 	str	r4, [sp, #28]
   10ed0:	e0020792 	mul	r2, r2, r7
   10ed4:	e59d5020 	ldr	r5, [sp, #32]
   10ed8:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   10edc:	eaffff84 	b	10cf4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   10ee0:	e58d401c 	str	r4, [sp, #28]
   10ee4:	e58d4018 	str	r4, [sp, #24]
   10ee8:	eaffff43 	b	10bfc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x11c>
   10eec:	e1a02007 	mov	r2, r7
   10ef0:	e3a09001 	mov	r9, #1
   10ef4:	eaffff7e 	b	10cf4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   10ef8:	f8a432eb 	.word	0xf8a432eb
   10efc:	00041f98 	.word	0x00041f98
   10f00:	00041fb0 	.word	0x00041fb0

00010f04 <CUSBGamePadStandardDevice::Configure()>:
   10f04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10f08:	e3a01021 	mov	r1, #33	; 0x21
   10f0c:	e24dd080 	sub	sp, sp, #128	; 0x80
   10f10:	e1a04000 	mov	r4, r0
   10f14:	ebfffab2 	bl	f9e4 <CUSBFunction::GetDescriptor(unsigned char)>
   10f18:	e2505000 	subs	r5, r0, #0
   10f1c:	0a000003 	beq	10f30 <CUSBGamePadStandardDevice::Configure()+0x2c>
   10f20:	e5d50007 	ldrb	r0, [r5, #7]
   10f24:	e5d53008 	ldrb	r3, [r5, #8]
   10f28:	e1900403 	orrs	r0, r0, r3, lsl #8
   10f2c:	1a000006 	bne	10f4c <CUSBGamePadStandardDevice::Configure()+0x48>
   10f30:	e1a00004 	mov	r0, r4
   10f34:	e59f1164 	ldr	r1, [pc, #356]	; 110a0 <CUSBGamePadStandardDevice::Configure()+0x19c>
   10f38:	ebfffab4 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   10f3c:	e3a05000 	mov	r5, #0
   10f40:	e1a00005 	mov	r0, r5
   10f44:	e28dd080 	add	sp, sp, #128	; 0x80
   10f48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10f4c:	e2846f4e 	add	r6, r4, #312	; 0x138
   10f50:	e1c600b0 	strh	r0, [r6]
   10f54:	eb006821 	bl	2afe0 <operator new[](unsigned int)>
   10f58:	e1a03000 	mov	r3, r0
   10f5c:	e1a00004 	mov	r0, r4
   10f60:	e5843134 	str	r3, [r4, #308]	; 0x134
   10f64:	ebfffa93 	bl	f9b8 <CUSBFunction::GetHost() const>
   10f68:	e1a07000 	mov	r7, r0
   10f6c:	e1a00004 	mov	r0, r4
   10f70:	ebfffa85 	bl	f98c <CUSBFunction::GetEndpoint0() const>
   10f74:	e1a01000 	mov	r1, r0
   10f78:	e5d52006 	ldrb	r2, [r5, #6]
   10f7c:	e1a00004 	mov	r0, r4
   10f80:	e1d680b0 	ldrh	r8, [r6]
   10f84:	e5945134 	ldr	r5, [r4, #308]	; 0x134
   10f88:	e58d1014 	str	r1, [sp, #20]
   10f8c:	e58d2010 	str	r2, [sp, #16]
   10f90:	ebfffae4 	bl	fb28 <CUSBFunction::GetInterfaceNumber() const>
   10f94:	e3a0c081 	mov	ip, #129	; 0x81
   10f98:	e6ff3070 	uxth	r3, r0
   10f9c:	e58d300c 	str	r3, [sp, #12]
   10fa0:	e1a00007 	mov	r0, r7
   10fa4:	e3a03000 	mov	r3, #0
   10fa8:	e59d1014 	ldr	r1, [sp, #20]
   10fac:	e59d2010 	ldr	r2, [sp, #16]
   10fb0:	e58d8004 	str	r8, [sp, #4]
   10fb4:	e58d5000 	str	r5, [sp]
   10fb8:	e58dc008 	str	ip, [sp, #8]
   10fbc:	eb00065b 	bl	12930 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   10fc0:	e1d630b0 	ldrh	r3, [r6]
   10fc4:	e1500003 	cmp	r0, r3
   10fc8:	1a000021 	bne	11054 <CUSBGamePadStandardDevice::Configure()+0x150>
   10fcc:	e3a01000 	mov	r1, #0
   10fd0:	e3a02060 	mov	r2, #96	; 0x60
   10fd4:	e28d0020 	add	r0, sp, #32
   10fd8:	e58d101c 	str	r1, [sp, #28]
   10fdc:	eb0063ca 	bl	29f0c <memset>
   10fe0:	e5943000 	ldr	r3, [r4]
   10fe4:	e1a00004 	mov	r0, r4
   10fe8:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   10fec:	e28d101c 	add	r1, sp, #28
   10ff0:	e12fff33 	blx	r3
   10ff4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10ff8:	e3530000 	cmp	r3, #0
   10ffc:	1a000005 	bne	11018 <CUSBGamePadStandardDevice::Configure()+0x114>
   11000:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   11004:	e3530000 	cmp	r3, #0
   11008:	1a000002 	bne	11018 <CUSBGamePadStandardDevice::Configure()+0x114>
   1100c:	e5945104 	ldr	r5, [r4, #260]	; 0x104
   11010:	e3550000 	cmp	r5, #0
   11014:	0affffc9 	beq	10f40 <CUSBGamePadStandardDevice::Configure()+0x3c>
   11018:	e2843f4a 	add	r3, r4, #296	; 0x128
   1101c:	e1d330b0 	ldrh	r3, [r3]
   11020:	e3530000 	cmp	r3, #0
   11024:	0a000019 	beq	11090 <CUSBGamePadStandardDevice::Configure()+0x18c>
   11028:	e1a00004 	mov	r0, r4
   1102c:	eb001b05 	bl	17c48 <CUSBGamePadDevice::Configure()>
   11030:	e2505000 	subs	r5, r0, #0
   11034:	0a00000f 	beq	11078 <CUSBGamePadStandardDevice::Configure()+0x174>
   11038:	e5d43130 	ldrb	r3, [r4, #304]	; 0x130
   1103c:	e3530000 	cmp	r3, #0
   11040:	0affffbe 	beq	10f40 <CUSBGamePadStandardDevice::Configure()+0x3c>
   11044:	e1a00004 	mov	r0, r4
   11048:	eb000574 	bl	12620 <CUSBHIDDevice::StartRequest()>
   1104c:	e1a05000 	mov	r5, r0
   11050:	eaffffba 	b	10f40 <CUSBGamePadStandardDevice::Configure()+0x3c>
   11054:	e3a05000 	mov	r5, #0
   11058:	eb0056ba 	bl	26b48 <CLogger::Get()>
   1105c:	e3a02001 	mov	r2, #1
   11060:	e59f303c 	ldr	r3, [pc, #60]	; 110a4 <CUSBGamePadStandardDevice::Configure()+0x1a0>
   11064:	e59f1034 	ldr	r1, [pc, #52]	; 110a0 <CUSBGamePadStandardDevice::Configure()+0x19c>
   11068:	eb0055f8 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1106c:	e1a00005 	mov	r0, r5
   11070:	e28dd080 	add	sp, sp, #128	; 0x80
   11074:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11078:	eb0056b2 	bl	26b48 <CLogger::Get()>
   1107c:	e3a02001 	mov	r2, #1
   11080:	e59f3020 	ldr	r3, [pc, #32]	; 110a8 <CUSBGamePadStandardDevice::Configure()+0x1a4>
   11084:	e59f1014 	ldr	r1, [pc, #20]	; 110a0 <CUSBGamePadStandardDevice::Configure()+0x19c>
   11088:	eb0055f0 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1108c:	eaffffab 	b	10f40 <CUSBGamePadStandardDevice::Configure()+0x3c>
   11090:	e3a02085 	mov	r2, #133	; 0x85
   11094:	e59f1010 	ldr	r1, [pc, #16]	; 110ac <CUSBGamePadStandardDevice::Configure()+0x1a8>
   11098:	e59f0010 	ldr	r0, [pc, #16]	; 110b0 <CUSBGamePadStandardDevice::Configure()+0x1ac>
   1109c:	eb004dc1 	bl	247a8 <assertion_failed>
   110a0:	00042050 	.word	0x00042050
   110a4:	00041fcc 	.word	0x00041fcc
   110a8:	00041da4 	.word	0x00041da4
   110ac:	00041f98 	.word	0x00041f98
   110b0:	00041ff0 	.word	0x00041ff0

000110b4 <CUSBGamePadDevice::GetProperties()>:
   110b4:	e3a00000 	mov	r0, #0
   110b8:	e12fff1e 	bx	lr

000110bc <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
   110bc:	e3a00000 	mov	r0, #0
   110c0:	e12fff1e 	bx	lr

000110c4 <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
   110c4:	e3a00000 	mov	r0, #0
   110c8:	e12fff1e 	bx	lr

000110cc <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   110cc:	e92d4010 	push	{r4, lr}
   110d0:	e1a04000 	mov	r4, r0
   110d4:	e59f300c 	ldr	r3, [pc, #12]	; 110e8 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x1c>
   110d8:	e5803000 	str	r3, [r0]
   110dc:	eb001b15 	bl	17d38 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   110e0:	e1a00004 	mov	r0, r4
   110e4:	e8bd8010 	pop	{r4, pc}
   110e8:	00042160 	.word	0x00042160

000110ec <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   110ec:	e92d4010 	push	{r4, lr}
   110f0:	e1a04000 	mov	r4, r0
   110f4:	e59f3018 	ldr	r3, [pc, #24]	; 11114 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x28>
   110f8:	e5803000 	str	r3, [r0]
   110fc:	eb001b0d 	bl	17d38 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11100:	e1a00004 	mov	r0, r4
   11104:	e3a01f4d 	mov	r1, #308	; 0x134
   11108:	eb0067bc 	bl	2b000 <operator delete(void*, unsigned int)>
   1110c:	e1a00004 	mov	r0, r4
   11110:	e8bd8010 	pop	{r4, pc}
   11114:	00042160 	.word	0x00042160

00011118 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   11118:	e92d4010 	push	{r4, lr}
   1111c:	e5d13000 	ldrb	r3, [r1]
   11120:	e1a04001 	mov	r4, r1
   11124:	e3530030 	cmp	r3, #48	; 0x30
   11128:	e24dd008 	sub	sp, sp, #8
   1112c:	1a00006e 	bne	112ec <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1d4>
   11130:	e3a03000 	mov	r3, #0
   11134:	e5803108 	str	r3, [r0, #264]	; 0x108
   11138:	e5d13003 	ldrb	r3, [r1, #3]
   1113c:	e3130001 	tst	r3, #1
   11140:	13a03080 	movne	r3, #128	; 0x80
   11144:	15803108 	strne	r3, [r0, #264]	; 0x108
   11148:	15d13003 	ldrbne	r3, [r1, #3]
   1114c:	e3130002 	tst	r3, #2
   11150:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11154:	13833b01 	orrne	r3, r3, #1024	; 0x400
   11158:	15803108 	strne	r3, [r0, #264]	; 0x108
   1115c:	15d13003 	ldrbne	r3, [r1, #3]
   11160:	e3130004 	tst	r3, #4
   11164:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11168:	13833c01 	orrne	r3, r3, #256	; 0x100
   1116c:	15803108 	strne	r3, [r0, #264]	; 0x108
   11170:	15d13003 	ldrbne	r3, [r1, #3]
   11174:	e3130008 	tst	r3, #8
   11178:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1117c:	13833c02 	orrne	r3, r3, #512	; 0x200
   11180:	15803108 	strne	r3, [r0, #264]	; 0x108
   11184:	15d13003 	ldrbne	r3, [r1, #3]
   11188:	e3130040 	tst	r3, #64	; 0x40
   1118c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11190:	13833040 	orrne	r3, r3, #64	; 0x40
   11194:	15803108 	strne	r3, [r0, #264]	; 0x108
   11198:	15d13003 	ldrbne	r3, [r1, #3]
   1119c:	e3130080 	tst	r3, #128	; 0x80
   111a0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   111a4:	13833010 	orrne	r3, r3, #16
   111a8:	15803108 	strne	r3, [r0, #264]	; 0x108
   111ac:	e5d13004 	ldrb	r3, [r1, #4]
   111b0:	e3130001 	tst	r3, #1
   111b4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   111b8:	13833702 	orrne	r3, r3, #524288	; 0x80000
   111bc:	15803108 	strne	r3, [r0, #264]	; 0x108
   111c0:	15d13004 	ldrbne	r3, [r1, #4]
   111c4:	e3130002 	tst	r3, #2
   111c8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   111cc:	13833601 	orrne	r3, r3, #1048576	; 0x100000
   111d0:	15803108 	strne	r3, [r0, #264]	; 0x108
   111d4:	15d13004 	ldrbne	r3, [r1, #4]
   111d8:	e3130004 	tst	r3, #4
   111dc:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   111e0:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   111e4:	15803108 	strne	r3, [r0, #264]	; 0x108
   111e8:	15d13004 	ldrbne	r3, [r1, #4]
   111ec:	e3130008 	tst	r3, #8
   111f0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   111f4:	13833a01 	orrne	r3, r3, #4096	; 0x1000
   111f8:	15803108 	strne	r3, [r0, #264]	; 0x108
   111fc:	15d13004 	ldrbne	r3, [r1, #4]
   11200:	e3130010 	tst	r3, #16
   11204:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11208:	13833001 	orrne	r3, r3, #1
   1120c:	15803108 	strne	r3, [r0, #264]	; 0x108
   11210:	15d13004 	ldrbne	r3, [r1, #4]
   11214:	e3130020 	tst	r3, #32
   11218:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1121c:	13833b02 	orrne	r3, r3, #2048	; 0x800
   11220:	15803108 	strne	r3, [r0, #264]	; 0x108
   11224:	e5d13005 	ldrb	r3, [r1, #5]
   11228:	e3130001 	tst	r3, #1
   1122c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11230:	13833802 	orrne	r3, r3, #131072	; 0x20000
   11234:	15803108 	strne	r3, [r0, #264]	; 0x108
   11238:	15d13005 	ldrbne	r3, [r1, #5]
   1123c:	e3130002 	tst	r3, #2
   11240:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11244:	13833902 	orrne	r3, r3, #32768	; 0x8000
   11248:	15803108 	strne	r3, [r0, #264]	; 0x108
   1124c:	15d13005 	ldrbne	r3, [r1, #5]
   11250:	e3130004 	tst	r3, #4
   11254:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11258:	13833801 	orrne	r3, r3, #65536	; 0x10000
   1125c:	15803108 	strne	r3, [r0, #264]	; 0x108
   11260:	15d13005 	ldrbne	r3, [r1, #5]
   11264:	e3130008 	tst	r3, #8
   11268:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1126c:	13833701 	orrne	r3, r3, #262144	; 0x40000
   11270:	15803108 	strne	r3, [r0, #264]	; 0x108
   11274:	15d13005 	ldrbne	r3, [r1, #5]
   11278:	e3130040 	tst	r3, #64	; 0x40
   1127c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11280:	13833020 	orrne	r3, r3, #32
   11284:	15803108 	strne	r3, [r0, #264]	; 0x108
   11288:	15d13005 	ldrbne	r3, [r1, #5]
   1128c:	e3130080 	tst	r3, #128	; 0x80
   11290:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11294:	13833008 	orrne	r3, r3, #8
   11298:	15803108 	strne	r3, [r0, #264]	; 0x108
   1129c:	e5d12007 	ldrb	r2, [r1, #7]
   112a0:	e5d13006 	ldrb	r3, [r1, #6]
   112a4:	e1833402 	orr	r3, r3, r2, lsl #8
   112a8:	e1a03243 	asr	r3, r3, #4
   112ac:	e6ef3073 	uxtb	r3, r3
   112b0:	e5803028 	str	r3, [r0, #40]	; 0x28
   112b4:	e5d13008 	ldrb	r3, [r1, #8]
   112b8:	e26330ff 	rsb	r3, r3, #255	; 0xff
   112bc:	e5803034 	str	r3, [r0, #52]	; 0x34
   112c0:	e5d13009 	ldrb	r3, [r1, #9]
   112c4:	e5d1200a 	ldrb	r2, [r1, #10]
   112c8:	e1833402 	orr	r3, r3, r2, lsl #8
   112cc:	e1a03243 	asr	r3, r3, #4
   112d0:	e6ef3073 	uxtb	r3, r3
   112d4:	e5803040 	str	r3, [r0, #64]	; 0x40
   112d8:	e5d1300b 	ldrb	r3, [r1, #11]
   112dc:	e26330ff 	rsb	r3, r3, #255	; 0xff
   112e0:	e580304c 	str	r3, [r0, #76]	; 0x4c
   112e4:	e28dd008 	add	sp, sp, #8
   112e8:	e8bd8010 	pop	{r4, pc}
   112ec:	eb005615 	bl	26b48 <CLogger::Get()>
   112f0:	e5d42000 	ldrb	r2, [r4]
   112f4:	e59f3014 	ldr	r3, [pc, #20]	; 11310 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1f8>
   112f8:	e58d2000 	str	r2, [sp]
   112fc:	e59f1010 	ldr	r1, [pc, #16]	; 11314 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1fc>
   11300:	e3a02003 	mov	r2, #3
   11304:	eb005551 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11308:	e28dd008 	add	sp, sp, #8
   1130c:	e8bd8010 	pop	{r4, pc}
   11310:	0004205c 	.word	0x0004205c
   11314:	000421a4 	.word	0x000421a4

00011318 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   11318:	e1a0c000 	mov	ip, r0
   1131c:	e92d4070 	push	{r4, r5, r6, lr}
   11320:	e1a06001 	mov	r6, r1
   11324:	e5d03131 	ldrb	r3, [r0, #305]	; 0x131
   11328:	e24dd010 	sub	sp, sp, #16
   1132c:	e59f5064 	ldr	r5, [pc, #100]	; 11398 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x80>
   11330:	e2832001 	add	r2, r3, #1
   11334:	e28d4004 	add	r4, sp, #4
   11338:	e203e00f 	and	lr, r3, #15
   1133c:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   11340:	e3a03000 	mov	r3, #0
   11344:	e8950007 	ldm	r5, {r0, r1, r2}
   11348:	e8840007 	stm	r4, {r0, r1, r2}
   1134c:	e1a01004 	mov	r1, r4
   11350:	e1a0000c 	mov	r0, ip
   11354:	e3a0200c 	mov	r2, #12
   11358:	e5cde005 	strb	lr, [sp, #5]
   1135c:	e5cd600f 	strb	r6, [sp, #15]
   11360:	eb000425 	bl	123fc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11364:	e2504000 	subs	r4, r0, #0
   11368:	0a000002 	beq	11378 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x60>
   1136c:	e1a00004 	mov	r0, r4
   11370:	e28dd010 	add	sp, sp, #16
   11374:	e8bd8070 	pop	{r4, r5, r6, pc}
   11378:	eb0055f2 	bl	26b48 <CLogger::Get()>
   1137c:	e3a02001 	mov	r2, #1
   11380:	e59f3014 	ldr	r3, [pc, #20]	; 1139c <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x84>
   11384:	e2451010 	sub	r1, r5, #16
   11388:	eb005530 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1138c:	e1a00004 	mov	r0, r4
   11390:	e28dd010 	add	sp, sp, #16
   11394:	e8bd8070 	pop	{r4, r5, r6, pc}
   11398:	000421b4 	.word	0x000421b4
   1139c:	00042078 	.word	0x00042078

000113a0 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   113a0:	e92d4010 	push	{r4, lr}
   113a4:	e1a0e000 	mov	lr, r0
   113a8:	e59f20b0 	ldr	r2, [pc, #176]	; 11460 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xc0>
   113ac:	e24dd010 	sub	sp, sp, #16
   113b0:	e28dc004 	add	ip, sp, #4
   113b4:	e1a03001 	mov	r3, r1
   113b8:	e3510001 	cmp	r1, #1
   113bc:	e8920007 	ldm	r2, {r0, r1, r2}
   113c0:	e8ac0003 	stmia	ip!, {r0, r1}
   113c4:	e1a0000e 	mov	r0, lr
   113c8:	e1cc20b0 	strh	r2, [ip]
   113cc:	0a00001e 	beq	1144c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xac>
   113d0:	e3530002 	cmp	r3, #2
   113d4:	0a000005 	beq	113f0 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   113d8:	e3530000 	cmp	r3, #0
   113dc:	13a04001 	movne	r4, #1
   113e0:	0a000006 	beq	11400 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x60>
   113e4:	e1a00004 	mov	r0, r4
   113e8:	e28dd010 	add	sp, sp, #16
   113ec:	e8bd8010 	pop	{r4, pc}
   113f0:	e3a02d82 	mov	r2, #8320	; 0x2080
   113f4:	e3e0309d 	mvn	r3, #157	; 0x9d
   113f8:	e1cd20b6 	strh	r2, [sp, #6]
   113fc:	e1cd30b8 	strh	r3, [sp, #8]
   11400:	e5d03131 	ldrb	r3, [r0, #305]	; 0x131
   11404:	e28d1004 	add	r1, sp, #4
   11408:	e2832001 	add	r2, r3, #1
   1140c:	e203c00f 	and	ip, r3, #15
   11410:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   11414:	e3a03000 	mov	r3, #0
   11418:	e3a0200a 	mov	r2, #10
   1141c:	e5cdc005 	strb	ip, [sp, #5]
   11420:	eb0003f5 	bl	123fc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11424:	e2504000 	subs	r4, r0, #0
   11428:	1affffed 	bne	113e4 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x44>
   1142c:	eb0055c5 	bl	26b48 <CLogger::Get()>
   11430:	e3a02001 	mov	r2, #1
   11434:	e59f3028 	ldr	r3, [pc, #40]	; 11464 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xc4>
   11438:	e59f1028 	ldr	r1, [pc, #40]	; 11468 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xc8>
   1143c:	eb005503 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11440:	e1a00004 	mov	r0, r4
   11444:	e28dd010 	add	sp, sp, #16
   11448:	e8bd8010 	pop	{r4, pc}
   1144c:	e3e0209d 	mvn	r2, #157	; 0x9d
   11450:	e59f3014 	ldr	r3, [pc, #20]	; 1146c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xcc>
   11454:	e1cd20bc 	strh	r2, [sp, #12]
   11458:	e1cd30ba 	strh	r3, [sp, #10]
   1145c:	eaffffe7 	b	11400 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x60>
   11460:	000421c0 	.word	0x000421c0
   11464:	0004208c 	.word	0x0004208c
   11468:	000421a4 	.word	0x000421a4
   1146c:	00002098 	.word	0x00002098

00011470 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   11470:	e92d4010 	push	{r4, lr}
   11474:	e1a04000 	mov	r4, r0
   11478:	eb001a1d 	bl	17cf4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   1147c:	e3a03000 	mov	r3, #0
   11480:	e59f2024 	ldr	r2, [pc, #36]	; 114ac <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)+0x3c>
   11484:	e1a00004 	mov	r0, r4
   11488:	e5842000 	str	r2, [r4]
   1148c:	e3a01003 	mov	r1, #3
   11490:	e1a02003 	mov	r2, r3
   11494:	ebfff970 	bl	fa5c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   11498:	e3a03000 	mov	r3, #0
   1149c:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   114a0:	e5c43131 	strb	r3, [r4, #305]	; 0x131
   114a4:	e1a00004 	mov	r0, r4
   114a8:	e8bd8010 	pop	{r4, pc}
   114ac:	00042160 	.word	0x00042160

000114b0 <CUSBGamePadSwitchProDevice::Configure()>:
   114b0:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   114b4:	e28db018 	add	fp, sp, #24
   114b8:	e24dd014 	sub	sp, sp, #20
   114bc:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
   114c0:	e3550000 	cmp	r5, #0
   114c4:	0a00005c 	beq	1163c <CUSBGamePadSwitchProDevice::Configure()+0x18c>
   114c8:	e3a03040 	mov	r3, #64	; 0x40
   114cc:	e2806f4a 	add	r6, r0, #296	; 0x128
   114d0:	e1c630b0 	strh	r3, [r6]
   114d4:	e1a04000 	mov	r4, r0
   114d8:	eb0019da 	bl	17c48 <CUSBGamePadDevice::Configure()>
   114dc:	e2505000 	subs	r5, r0, #0
   114e0:	0a000062 	beq	11670 <CUSBGamePadSwitchProDevice::Configure()+0x1c0>
   114e4:	e3a03012 	mov	r3, #18
   114e8:	e1a0100d 	mov	r1, sp
   114ec:	e1d620b0 	ldrh	r2, [r6]
   114f0:	e5843104 	str	r3, [r4, #260]	; 0x104
   114f4:	e2823007 	add	r3, r2, #7
   114f8:	e1a031a3 	lsr	r3, r3, #3
   114fc:	e0413183 	sub	r3, r1, r3, lsl #3
   11500:	e3a07000 	mov	r7, #0
   11504:	e3a000ff 	mov	r0, #255	; 0xff
   11508:	e1a0d003 	mov	sp, r3
   1150c:	e3a0c004 	mov	ip, #4
   11510:	e1a0100d 	mov	r1, sp
   11514:	e1a03007 	mov	r3, r7
   11518:	e584c024 	str	ip, [r4, #36]	; 0x24
   1151c:	e5840030 	str	r0, [r4, #48]	; 0x30
   11520:	e584003c 	str	r0, [r4, #60]	; 0x3c
   11524:	e5840048 	str	r0, [r4, #72]	; 0x48
   11528:	e5840054 	str	r0, [r4, #84]	; 0x54
   1152c:	e58470e8 	str	r7, [r4, #232]	; 0xe8
   11530:	e1a00004 	mov	r0, r4
   11534:	e584702c 	str	r7, [r4, #44]	; 0x2c
   11538:	e5847038 	str	r7, [r4, #56]	; 0x38
   1153c:	e5847044 	str	r7, [r4, #68]	; 0x44
   11540:	e5847050 	str	r7, [r4, #80]	; 0x50
   11544:	eb000408 	bl	1256c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   11548:	e3a0cd0e 	mov	ip, #896	; 0x380
   1154c:	e1a03007 	mov	r3, r7
   11550:	e3a02002 	mov	r2, #2
   11554:	e1a00004 	mov	r0, r4
   11558:	e24b1028 	sub	r1, fp, #40	; 0x28
   1155c:	e14bc2b8 	strh	ip, [fp, #-40]	; 0xffffffd8
   11560:	eb0003a5 	bl	123fc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11564:	e2505000 	subs	r5, r0, #0
   11568:	e1a0800d 	mov	r8, sp
   1156c:	0a000037 	beq	11650 <CUSBGamePadSwitchProDevice::Configure()+0x1a0>
   11570:	e1a03007 	mov	r3, r7
   11574:	e1a0100d 	mov	r1, sp
   11578:	e1a00004 	mov	r0, r4
   1157c:	e1d620b0 	ldrh	r2, [r6]
   11580:	eb0003f9 	bl	1256c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   11584:	e3500000 	cmp	r0, #0
   11588:	da000040 	ble	11690 <CUSBGamePadSwitchProDevice::Configure()+0x1e0>
   1158c:	e5dd3000 	ldrb	r3, [sp]
   11590:	e3530081 	cmp	r3, #129	; 0x81
   11594:	1a00001f 	bne	11618 <CUSBGamePadSwitchProDevice::Configure()+0x168>
   11598:	e5dd3001 	ldrb	r3, [sp, #1]
   1159c:	e3530003 	cmp	r3, #3
   115a0:	1a00001c 	bne	11618 <CUSBGamePadSwitchProDevice::Configure()+0x168>
   115a4:	e3a0cd0a 	mov	ip, #640	; 0x280
   115a8:	e1a03007 	mov	r3, r7
   115ac:	e3a02002 	mov	r2, #2
   115b0:	e1a00004 	mov	r0, r4
   115b4:	e24b1024 	sub	r1, fp, #36	; 0x24
   115b8:	e14bc2b4 	strh	ip, [fp, #-36]	; 0xffffffdc
   115bc:	eb00038e 	bl	123fc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   115c0:	e2505000 	subs	r5, r0, #0
   115c4:	0a000038 	beq	116ac <CUSBGamePadSwitchProDevice::Configure()+0x1fc>
   115c8:	e1a03007 	mov	r3, r7
   115cc:	e1a0100d 	mov	r1, sp
   115d0:	e1a00004 	mov	r0, r4
   115d4:	e1d620b0 	ldrh	r2, [r6]
   115d8:	eb0003e3 	bl	1256c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   115dc:	e3500000 	cmp	r0, #0
   115e0:	da000050 	ble	11728 <CUSBGamePadSwitchProDevice::Configure()+0x278>
   115e4:	e5dd3000 	ldrb	r3, [sp]
   115e8:	e3530081 	cmp	r3, #129	; 0x81
   115ec:	1a000002 	bne	115fc <CUSBGamePadSwitchProDevice::Configure()+0x14c>
   115f0:	e5dd3001 	ldrb	r3, [sp, #1]
   115f4:	e3530002 	cmp	r3, #2
   115f8:	0a000031 	beq	116c4 <CUSBGamePadSwitchProDevice::Configure()+0x214>
   115fc:	eb005551 	bl	26b48 <CLogger::Get()>
   11600:	e3a02001 	mov	r2, #1
   11604:	e59f3168 	ldr	r3, [pc, #360]	; 11774 <CUSBGamePadSwitchProDevice::Configure()+0x2c4>
   11608:	e59f1168 	ldr	r1, [pc, #360]	; 11778 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   1160c:	eb00548f 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11610:	e3a05000 	mov	r5, #0
   11614:	ea000005 	b	11630 <CUSBGamePadSwitchProDevice::Configure()+0x180>
   11618:	eb00554a 	bl	26b48 <CLogger::Get()>
   1161c:	e3a02001 	mov	r2, #1
   11620:	e59f3154 	ldr	r3, [pc, #340]	; 1177c <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   11624:	e59f114c 	ldr	r1, [pc, #332]	; 11778 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   11628:	eb005488 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1162c:	e3a05000 	mov	r5, #0
   11630:	e1a00005 	mov	r0, r5
   11634:	e24bd018 	sub	sp, fp, #24
   11638:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1163c:	e59f1134 	ldr	r1, [pc, #308]	; 11778 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   11640:	ebfff8f2 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   11644:	e1a00005 	mov	r0, r5
   11648:	e24bd018 	sub	sp, fp, #24
   1164c:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   11650:	eb00553c 	bl	26b48 <CLogger::Get()>
   11654:	e3a02001 	mov	r2, #1
   11658:	e59f311c 	ldr	r3, [pc, #284]	; 1177c <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   1165c:	e59f1114 	ldr	r1, [pc, #276]	; 11778 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   11660:	eb00547a 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11664:	e1a00005 	mov	r0, r5
   11668:	e24bd018 	sub	sp, fp, #24
   1166c:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   11670:	eb005534 	bl	26b48 <CLogger::Get()>
   11674:	e3a02001 	mov	r2, #1
   11678:	e59f3100 	ldr	r3, [pc, #256]	; 11780 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   1167c:	e59f10f4 	ldr	r1, [pc, #244]	; 11778 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   11680:	eb005472 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11684:	e1a00005 	mov	r0, r5
   11688:	e24bd018 	sub	sp, fp, #24
   1168c:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   11690:	eb00552c 	bl	26b48 <CLogger::Get()>
   11694:	e3a02001 	mov	r2, #1
   11698:	e59f30e4 	ldr	r3, [pc, #228]	; 11784 <CUSBGamePadSwitchProDevice::Configure()+0x2d4>
   1169c:	e59f10d4 	ldr	r1, [pc, #212]	; 11778 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   116a0:	e1a05007 	mov	r5, r7
   116a4:	eb005469 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   116a8:	eaffffe0 	b	11630 <CUSBGamePadSwitchProDevice::Configure()+0x180>
   116ac:	eb005525 	bl	26b48 <CLogger::Get()>
   116b0:	e3a02001 	mov	r2, #1
   116b4:	e59f30b8 	ldr	r3, [pc, #184]	; 11774 <CUSBGamePadSwitchProDevice::Configure()+0x2c4>
   116b8:	e59f10b8 	ldr	r1, [pc, #184]	; 11778 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   116bc:	eb005463 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   116c0:	eaffffda 	b	11630 <CUSBGamePadSwitchProDevice::Configure()+0x180>
   116c4:	e3a0cd12 	mov	ip, #1152	; 0x480
   116c8:	e3a03000 	mov	r3, #0
   116cc:	e3a02002 	mov	r2, #2
   116d0:	e1a00004 	mov	r0, r4
   116d4:	e24b1020 	sub	r1, fp, #32
   116d8:	e14bc2b0 	strh	ip, [fp, #-32]	; 0xffffffe0
   116dc:	eb000346 	bl	123fc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   116e0:	e2505000 	subs	r5, r0, #0
   116e4:	0a00001c 	beq	1175c <CUSBGamePadSwitchProDevice::Configure()+0x2ac>
   116e8:	e5943000 	ldr	r3, [r4]
   116ec:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   116f0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   116f4:	e1a00004 	mov	r0, r4
   116f8:	e12fff33 	blx	r3
   116fc:	e1a01008 	mov	r1, r8
   11700:	e3a03000 	mov	r3, #0
   11704:	e1a00004 	mov	r0, r4
   11708:	e1d620b0 	ldrh	r2, [r6]
   1170c:	eb000396 	bl	1256c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   11710:	e3500000 	cmp	r0, #0
   11714:	da00000a 	ble	11744 <CUSBGamePadSwitchProDevice::Configure()+0x294>
   11718:	e1a00004 	mov	r0, r4
   1171c:	eb0003bf 	bl	12620 <CUSBHIDDevice::StartRequest()>
   11720:	e1a05000 	mov	r5, r0
   11724:	eaffffc1 	b	11630 <CUSBGamePadSwitchProDevice::Configure()+0x180>
   11728:	eb005506 	bl	26b48 <CLogger::Get()>
   1172c:	e3a02001 	mov	r2, #1
   11730:	e59f3050 	ldr	r3, [pc, #80]	; 11788 <CUSBGamePadSwitchProDevice::Configure()+0x2d8>
   11734:	e59f103c 	ldr	r1, [pc, #60]	; 11778 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   11738:	e1a05007 	mov	r5, r7
   1173c:	eb005443 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11740:	eaffffba 	b	11630 <CUSBGamePadSwitchProDevice::Configure()+0x180>
   11744:	eb0054ff 	bl	26b48 <CLogger::Get()>
   11748:	e3a02001 	mov	r2, #1
   1174c:	e59f3038 	ldr	r3, [pc, #56]	; 1178c <CUSBGamePadSwitchProDevice::Configure()+0x2dc>
   11750:	e59f1020 	ldr	r1, [pc, #32]	; 11778 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   11754:	eb00543d 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11758:	eaffffee 	b	11718 <CUSBGamePadSwitchProDevice::Configure()+0x268>
   1175c:	eb0054f9 	bl	26b48 <CLogger::Get()>
   11760:	e3a02001 	mov	r2, #1
   11764:	e59f3024 	ldr	r3, [pc, #36]	; 11790 <CUSBGamePadSwitchProDevice::Configure()+0x2e0>
   11768:	e59f1008 	ldr	r1, [pc, #8]	; 11778 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   1176c:	eb005437 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11770:	eaffffae 	b	11630 <CUSBGamePadSwitchProDevice::Configure()+0x180>
   11774:	000420e4 	.word	0x000420e4
   11778:	000421a4 	.word	0x000421a4
   1177c:	000420a4 	.word	0x000420a4
   11780:	00041da4 	.word	0x00041da4
   11784:	000420c4 	.word	0x000420c4
   11788:	00042100 	.word	0x00042100
   1178c:	0004213c 	.word	0x0004213c
   11790:	0004211c 	.word	0x0004211c

00011794 <CUSBGamePadSwitchProDevice::GetProperties()>:
   11794:	e3a0004b 	mov	r0, #75	; 0x4b
   11798:	e12fff1e 	bx	lr

0001179c <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   1179c:	e92d4010 	push	{r4, lr}
   117a0:	e1a04000 	mov	r4, r0
   117a4:	e59f300c 	ldr	r3, [pc, #12]	; 117b8 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x1c>
   117a8:	e5803000 	str	r3, [r0]
   117ac:	eb001961 	bl	17d38 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   117b0:	e1a00004 	mov	r0, r4
   117b4:	e8bd8010 	pop	{r4, pc}
   117b8:	00042210 	.word	0x00042210

000117bc <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   117bc:	e92d4010 	push	{r4, lr}
   117c0:	e1a04000 	mov	r4, r0
   117c4:	e59f3018 	ldr	r3, [pc, #24]	; 117e4 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x28>
   117c8:	e5803000 	str	r3, [r0]
   117cc:	eb001959 	bl	17d38 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   117d0:	e1a00004 	mov	r0, r4
   117d4:	e3a01e13 	mov	r1, #304	; 0x130
   117d8:	eb006608 	bl	2b000 <operator delete(void*, unsigned int)>
   117dc:	e1a00004 	mov	r0, r4
   117e0:	e8bd8010 	pop	{r4, pc}
   117e4:	00042210 	.word	0x00042210

000117e8 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   117e8:	e242200e 	sub	r2, r2, #14
   117ec:	e16f2f12 	clz	r2, r2
   117f0:	e3510000 	cmp	r1, #0
   117f4:	e1a022a2 	lsr	r2, r2, #5
   117f8:	03a02000 	moveq	r2, #0
   117fc:	e3520000 	cmp	r2, #0
   11800:	012fff1e 	bxeq	lr
   11804:	e5d12000 	ldrb	r2, [r1]
   11808:	e3520000 	cmp	r2, #0
   1180c:	112fff1e 	bxne	lr
   11810:	e5d13001 	ldrb	r3, [r1, #1]
   11814:	e3530014 	cmp	r3, #20
   11818:	112fff1e 	bxne	lr
   1181c:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   11820:	e92d4070 	push	{r4, r5, r6, lr}
   11824:	e3530000 	cmp	r3, #0
   11828:	e1a04000 	mov	r4, r0
   1182c:	08bd8070 	popeq	{r4, r5, r6, pc}
   11830:	e1a05000 	mov	r5, r0
   11834:	e4953024 	ldr	r3, [r5], #36	; 0x24
   11838:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1183c:	e12fff33 	blx	r3
   11840:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   11844:	e1a01005 	mov	r1, r5
   11848:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   1184c:	e2400001 	sub	r0, r0, #1
   11850:	e8bd4070 	pop	{r4, r5, r6, lr}
   11854:	e12fff13 	bx	r3

00011858 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   11858:	e3510000 	cmp	r1, #0
   1185c:	e92d4010 	push	{r4, lr}
   11860:	0a00003e 	beq	11960 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x108>
   11864:	e5d13000 	ldrb	r3, [r1]
   11868:	e5d12001 	ldrb	r2, [r1, #1]
   1186c:	e1833402 	orr	r3, r3, r2, lsl #8
   11870:	e3530b05 	cmp	r3, #5120	; 0x1400
   11874:	1a00003d 	bne	11970 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x118>
   11878:	e3a0e000 	mov	lr, #0
   1187c:	e5d12002 	ldrb	r2, [r1, #2]
   11880:	e5d1c003 	ldrb	ip, [r1, #3]
   11884:	e59f30f4 	ldr	r3, [pc, #244]	; 11980 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x128>
   11888:	e580e108 	str	lr, [r0, #264]	; 0x108
   1188c:	e182240c 	orr	r2, r2, ip, lsl #8
   11890:	e283e040 	add	lr, r3, #64	; 0x40
   11894:	e3120001 	tst	r2, #1
   11898:	15934000 	ldrne	r4, [r3]
   1189c:	1590c108 	ldrne	ip, [r0, #264]	; 0x108
   118a0:	e2833004 	add	r3, r3, #4
   118a4:	118cc004 	orrne	ip, ip, r4
   118a8:	1580c108 	strne	ip, [r0, #264]	; 0x108
   118ac:	e15e0003 	cmp	lr, r3
   118b0:	e1a020a2 	lsr	r2, r2, #1
   118b4:	1afffff6 	bne	11894 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x3c>
   118b8:	e3a0c000 	mov	ip, #0
   118bc:	e1a0200c 	mov	r2, ip
   118c0:	e5d1e007 	ldrb	lr, [r1, #7]
   118c4:	e5d13006 	ldrb	r3, [r1, #6]
   118c8:	e183340e 	orr	r3, r3, lr, lsl #8
   118cc:	e6bf3073 	sxth	r3, r3
   118d0:	e2833902 	add	r3, r3, #32768	; 0x8000
   118d4:	e59fe0a8 	ldr	lr, [pc, #168]	; 11984 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x12c>
   118d8:	e1a03423 	lsr	r3, r3, #8
   118dc:	e0822082 	add	r2, r2, r2, lsl #1
   118e0:	e28cc001 	add	ip, ip, #1
   118e4:	e0802102 	add	r2, r0, r2, lsl #2
   118e8:	e35c0004 	cmp	ip, #4
   118ec:	e5823028 	str	r3, [r2, #40]	; 0x28
   118f0:	0a00000b 	beq	11924 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xcc>
   118f4:	e081208c 	add	r2, r1, ip, lsl #1
   118f8:	e5d24007 	ldrb	r4, [r2, #7]
   118fc:	e5d23006 	ldrb	r3, [r2, #6]
   11900:	e49e2004 	ldr	r2, [lr], #4
   11904:	e1833404 	orr	r3, r3, r4, lsl #8
   11908:	e6bf3073 	sxth	r3, r3
   1190c:	e3c24002 	bic	r4, r2, #2
   11910:	e2833902 	add	r3, r3, #32768	; 0x8000
   11914:	e3540001 	cmp	r4, #1
   11918:	e1a03423 	lsr	r3, r3, #8
   1191c:	026330ff 	rsbeq	r3, r3, #255	; 0xff
   11920:	eaffffed 	b	118dc <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x84>
   11924:	e5d13004 	ldrb	r3, [r1, #4]
   11928:	e5803058 	str	r3, [r0, #88]	; 0x58
   1192c:	e1d130d4 	ldrsb	r3, [r1, #4]
   11930:	e3530000 	cmp	r3, #0
   11934:	b5903108 	ldrlt	r3, [r0, #264]	; 0x108
   11938:	b3833008 	orrlt	r3, r3, #8
   1193c:	b5803108 	strlt	r3, [r0, #264]	; 0x108
   11940:	e5d13005 	ldrb	r3, [r1, #5]
   11944:	e5803064 	str	r3, [r0, #100]	; 0x64
   11948:	e1d130d5 	ldrsb	r3, [r1, #5]
   1194c:	e3530000 	cmp	r3, #0
   11950:	b5903108 	ldrlt	r3, [r0, #264]	; 0x108
   11954:	b3833010 	orrlt	r3, r3, #16
   11958:	b5803108 	strlt	r3, [r0, #264]	; 0x108
   1195c:	e8bd8010 	pop	{r4, pc}
   11960:	e3a02077 	mov	r2, #119	; 0x77
   11964:	e59f101c 	ldr	r1, [pc, #28]	; 11988 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x130>
   11968:	e59f001c 	ldr	r0, [pc, #28]	; 1198c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x134>
   1196c:	eb004b8d 	bl	247a8 <assertion_failed>
   11970:	e3a02078 	mov	r2, #120	; 0x78
   11974:	e59f100c 	ldr	r1, [pc, #12]	; 11988 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x130>
   11978:	e59f0010 	ldr	r0, [pc, #16]	; 11990 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x138>
   1197c:	eb004b89 	bl	247a8 <assertion_failed>
   11980:	00042254 	.word	0x00042254
   11984:	00042298 	.word	0x00042298
   11988:	000421cc 	.word	0x000421cc
   1198c:	00041e00 	.word	0x00041e00
   11990:	000421e4 	.word	0x000421e4

00011994 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   11994:	e3510004 	cmp	r1, #4
   11998:	9a000001 	bls	119a4 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x10>
   1199c:	e3a00000 	mov	r0, #0
   119a0:	e12fff1e 	bx	lr
   119a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   119a8:	e59f302c 	ldr	r3, [pc, #44]	; 119dc <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x48>
   119ac:	e24dd00c 	sub	sp, sp, #12
   119b0:	e0831001 	add	r1, r3, r1
   119b4:	e5d1e0a4 	ldrb	lr, [r1, #164]	; 0xa4
   119b8:	e59fc020 	ldr	ip, [pc, #32]	; 119e0 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x4c>
   119bc:	e3a03000 	mov	r3, #0
   119c0:	e3a02003 	mov	r2, #3
   119c4:	e28d1004 	add	r1, sp, #4
   119c8:	e5cde006 	strb	lr, [sp, #6]
   119cc:	e1cdc0b4 	strh	ip, [sp, #4]
   119d0:	eb000289 	bl	123fc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   119d4:	e28dd00c 	add	sp, sp, #12
   119d8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   119dc:	00042208 	.word	0x00042208
   119e0:	00000301 	.word	0x00000301

000119e4 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   119e4:	e92d4030 	push	{r4, r5, lr}
   119e8:	e24dd00c 	sub	sp, sp, #12
   119ec:	e1a04001 	mov	r4, r1
   119f0:	e1a05000 	mov	r5, r0
   119f4:	e3a02008 	mov	r2, #8
   119f8:	e1a0000d 	mov	r0, sp
   119fc:	e3a01000 	mov	r1, #0
   11a00:	eb006141 	bl	29f0c <memset>
   11a04:	e3a03008 	mov	r3, #8
   11a08:	e3540001 	cmp	r4, #1
   11a0c:	e5cd3001 	strb	r3, [sp, #1]
   11a10:	0a000007 	beq	11a34 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   11a14:	e3540002 	cmp	r4, #2
   11a18:	0a00000e 	beq	11a58 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x74>
   11a1c:	e3540000 	cmp	r4, #0
   11a20:	0a000005 	beq	11a3c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x58>
   11a24:	e3a020e5 	mov	r2, #229	; 0xe5
   11a28:	e59f1034 	ldr	r1, [pc, #52]	; 11a64 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x80>
   11a2c:	e59f0034 	ldr	r0, [pc, #52]	; 11a68 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x84>
   11a30:	eb004b5c 	bl	247a8 <assertion_failed>
   11a34:	e3e03000 	mvn	r3, #0
   11a38:	e5cd3004 	strb	r3, [sp, #4]
   11a3c:	e1a0100d 	mov	r1, sp
   11a40:	e1a00005 	mov	r0, r5
   11a44:	e3a03000 	mov	r3, #0
   11a48:	e3a02008 	mov	r2, #8
   11a4c:	eb00026a 	bl	123fc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11a50:	e28dd00c 	add	sp, sp, #12
   11a54:	e8bd8030 	pop	{r4, r5, pc}
   11a58:	e3e03000 	mvn	r3, #0
   11a5c:	e5cd3003 	strb	r3, [sp, #3]
   11a60:	eafffff5 	b	11a3c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x58>
   11a64:	000421cc 	.word	0x000421cc
   11a68:	00041748 	.word	0x00041748

00011a6c <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   11a6c:	e92d4010 	push	{r4, lr}
   11a70:	e1a04000 	mov	r4, r0
   11a74:	eb00189e 	bl	17cf4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11a78:	e59f3008 	ldr	r3, [pc, #8]	; 11a88 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)+0x1c>
   11a7c:	e1a00004 	mov	r0, r4
   11a80:	e5843000 	str	r3, [r4]
   11a84:	e8bd8010 	pop	{r4, pc}
   11a88:	00042210 	.word	0x00042210

00011a8c <CUSBGamePadXbox360Device::Configure()>:
   11a8c:	e3a0200e 	mov	r2, #14
   11a90:	e2803f4a 	add	r3, r0, #296	; 0x128
   11a94:	e92d4010 	push	{r4, lr}
   11a98:	e1c320b0 	strh	r2, [r3]
   11a9c:	e1a04000 	mov	r4, r0
   11aa0:	eb001868 	bl	17c48 <CUSBGamePadDevice::Configure()>
   11aa4:	e3500000 	cmp	r0, #0
   11aa8:	0a00001e 	beq	11b28 <CUSBGamePadXbox360Device::Configure()+0x9c>
   11aac:	e3a03000 	mov	r3, #0
   11ab0:	e3a020ff 	mov	r2, #255	; 0xff
   11ab4:	e3a0c012 	mov	ip, #18
   11ab8:	e3a00006 	mov	r0, #6
   11abc:	e5941000 	ldr	r1, [r4]
   11ac0:	e5840024 	str	r0, [r4, #36]	; 0x24
   11ac4:	e584302c 	str	r3, [r4, #44]	; 0x2c
   11ac8:	e5843038 	str	r3, [r4, #56]	; 0x38
   11acc:	e5843044 	str	r3, [r4, #68]	; 0x44
   11ad0:	e5843050 	str	r3, [r4, #80]	; 0x50
   11ad4:	e584305c 	str	r3, [r4, #92]	; 0x5c
   11ad8:	e5843068 	str	r3, [r4, #104]	; 0x68
   11adc:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   11ae0:	e1a00004 	mov	r0, r4
   11ae4:	e5913034 	ldr	r3, [r1, #52]	; 0x34
   11ae8:	e584c104 	str	ip, [r4, #260]	; 0x104
   11aec:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   11af0:	e5842030 	str	r2, [r4, #48]	; 0x30
   11af4:	e584203c 	str	r2, [r4, #60]	; 0x3c
   11af8:	e5842048 	str	r2, [r4, #72]	; 0x48
   11afc:	e5842054 	str	r2, [r4, #84]	; 0x54
   11b00:	e5842060 	str	r2, [r4, #96]	; 0x60
   11b04:	e584206c 	str	r2, [r4, #108]	; 0x6c
   11b08:	e12fff33 	blx	r3
   11b0c:	e3500000 	cmp	r0, #0
   11b10:	1a000001 	bne	11b1c <CUSBGamePadXbox360Device::Configure()+0x90>
   11b14:	e3a00000 	mov	r0, #0
   11b18:	e8bd8010 	pop	{r4, pc}
   11b1c:	e1a00004 	mov	r0, r4
   11b20:	e8bd4010 	pop	{r4, lr}
   11b24:	ea0002bd 	b	12620 <CUSBHIDDevice::StartRequest()>
   11b28:	eb005406 	bl	26b48 <CLogger::Get()>
   11b2c:	e3a02001 	mov	r2, #1
   11b30:	e59f300c 	ldr	r3, [pc, #12]	; 11b44 <CUSBGamePadXbox360Device::Configure()+0xb8>
   11b34:	e59f100c 	ldr	r1, [pc, #12]	; 11b48 <CUSBGamePadXbox360Device::Configure()+0xbc>
   11b38:	eb005344 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11b3c:	e3a00000 	mov	r0, #0
   11b40:	e8bd8010 	pop	{r4, pc}
   11b44:	00041da4 	.word	0x00041da4
   11b48:	000422b4 	.word	0x000422b4

00011b4c <CUSBGamePadXbox360Device::GetProperties()>:
   11b4c:	e3a0000b 	mov	r0, #11
   11b50:	e12fff1e 	bx	lr

00011b54 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   11b54:	e3a02000 	mov	r2, #0
   11b58:	e5d13004 	ldrb	r3, [r1, #4]
   11b5c:	e5802108 	str	r2, [r0, #264]	; 0x108
   11b60:	e3130004 	tst	r3, #4
   11b64:	13a02901 	movne	r2, #16384	; 0x4000
   11b68:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b6c:	e3130008 	tst	r3, #8
   11b70:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b74:	13822b02 	orrne	r2, r2, #2048	; 0x800
   11b78:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b7c:	e3130010 	tst	r3, #16
   11b80:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b84:	13822c02 	orrne	r2, r2, #512	; 0x200
   11b88:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b8c:	e3130020 	tst	r3, #32
   11b90:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b94:	13822c01 	orrne	r2, r2, #256	; 0x100
   11b98:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b9c:	e3130040 	tst	r3, #64	; 0x40
   11ba0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11ba4:	13822b01 	orrne	r2, r2, #1024	; 0x400
   11ba8:	15802108 	strne	r2, [r0, #264]	; 0x108
   11bac:	e1b033a3 	lsrs	r3, r3, #7
   11bb0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11bb4:	13833080 	orrne	r3, r3, #128	; 0x80
   11bb8:	15803108 	strne	r3, [r0, #264]	; 0x108
   11bbc:	e5d13005 	ldrb	r3, [r1, #5]
   11bc0:	e3130001 	tst	r3, #1
   11bc4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11bc8:	13822902 	orrne	r2, r2, #32768	; 0x8000
   11bcc:	15802108 	strne	r2, [r0, #264]	; 0x108
   11bd0:	e3130002 	tst	r3, #2
   11bd4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11bd8:	13822802 	orrne	r2, r2, #131072	; 0x20000
   11bdc:	15802108 	strne	r2, [r0, #264]	; 0x108
   11be0:	e3130004 	tst	r3, #4
   11be4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11be8:	13822701 	orrne	r2, r2, #262144	; 0x40000
   11bec:	15802108 	strne	r2, [r0, #264]	; 0x108
   11bf0:	e3130008 	tst	r3, #8
   11bf4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11bf8:	13822801 	orrne	r2, r2, #65536	; 0x10000
   11bfc:	15802108 	strne	r2, [r0, #264]	; 0x108
   11c00:	e3130010 	tst	r3, #16
   11c04:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11c08:	13822020 	orrne	r2, r2, #32
   11c0c:	15802108 	strne	r2, [r0, #264]	; 0x108
   11c10:	e3130020 	tst	r3, #32
   11c14:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11c18:	13822040 	orrne	r2, r2, #64	; 0x40
   11c1c:	15802108 	strne	r2, [r0, #264]	; 0x108
   11c20:	e3130040 	tst	r3, #64	; 0x40
   11c24:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11c28:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   11c2c:	15802108 	strne	r2, [r0, #264]	; 0x108
   11c30:	e1b033a3 	lsrs	r3, r3, #7
   11c34:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11c38:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   11c3c:	15803108 	strne	r3, [r0, #264]	; 0x108
   11c40:	e5d12007 	ldrb	r2, [r1, #7]
   11c44:	e5d13006 	ldrb	r3, [r1, #6]
   11c48:	e1833402 	orr	r3, r3, r2, lsl #8
   11c4c:	e1a03143 	asr	r3, r3, #2
   11c50:	e353007f 	cmp	r3, #127	; 0x7f
   11c54:	e5803058 	str	r3, [r0, #88]	; 0x58
   11c58:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   11c5c:	c3833008 	orrgt	r3, r3, #8
   11c60:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   11c64:	e5d12009 	ldrb	r2, [r1, #9]
   11c68:	e5d13008 	ldrb	r3, [r1, #8]
   11c6c:	e1833402 	orr	r3, r3, r2, lsl #8
   11c70:	e1a03143 	asr	r3, r3, #2
   11c74:	e353007f 	cmp	r3, #127	; 0x7f
   11c78:	e5803064 	str	r3, [r0, #100]	; 0x64
   11c7c:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   11c80:	c3833010 	orrgt	r3, r3, #16
   11c84:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   11c88:	e5d1200b 	ldrb	r2, [r1, #11]
   11c8c:	e5d1300a 	ldrb	r3, [r1, #10]
   11c90:	e1833402 	orr	r3, r3, r2, lsl #8
   11c94:	e6bf3073 	sxth	r3, r3
   11c98:	e2833902 	add	r3, r3, #32768	; 0x8000
   11c9c:	e1a03423 	lsr	r3, r3, #8
   11ca0:	e5803028 	str	r3, [r0, #40]	; 0x28
   11ca4:	e5d1200d 	ldrb	r2, [r1, #13]
   11ca8:	e5d1300c 	ldrb	r3, [r1, #12]
   11cac:	e1833402 	orr	r3, r3, r2, lsl #8
   11cb0:	e6bf3073 	sxth	r3, r3
   11cb4:	e2833902 	add	r3, r3, #32768	; 0x8000
   11cb8:	e1a03423 	lsr	r3, r3, #8
   11cbc:	e22330ff 	eor	r3, r3, #255	; 0xff
   11cc0:	e5803034 	str	r3, [r0, #52]	; 0x34
   11cc4:	e5d1200f 	ldrb	r2, [r1, #15]
   11cc8:	e5d1300e 	ldrb	r3, [r1, #14]
   11ccc:	e1833402 	orr	r3, r3, r2, lsl #8
   11cd0:	e6bf3073 	sxth	r3, r3
   11cd4:	e2833902 	add	r3, r3, #32768	; 0x8000
   11cd8:	e1a03423 	lsr	r3, r3, #8
   11cdc:	e5803040 	str	r3, [r0, #64]	; 0x40
   11ce0:	e5d13010 	ldrb	r3, [r1, #16]
   11ce4:	e5d12011 	ldrb	r2, [r1, #17]
   11ce8:	e1833402 	orr	r3, r3, r2, lsl #8
   11cec:	e6bf3073 	sxth	r3, r3
   11cf0:	e2833902 	add	r3, r3, #32768	; 0x8000
   11cf4:	e1a03423 	lsr	r3, r3, #8
   11cf8:	e22330ff 	eor	r3, r3, #255	; 0xff
   11cfc:	e580304c 	str	r3, [r0, #76]	; 0x4c
   11d00:	e12fff1e 	bx	lr

00011d04 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   11d04:	e92d4010 	push	{r4, lr}
   11d08:	e1a04000 	mov	r4, r0
   11d0c:	e59f300c 	ldr	r3, [pc, #12]	; 11d20 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x1c>
   11d10:	e5803000 	str	r3, [r0]
   11d14:	eb001807 	bl	17d38 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11d18:	e1a00004 	mov	r0, r4
   11d1c:	e8bd8010 	pop	{r4, pc}
   11d20:	00042310 	.word	0x00042310

00011d24 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   11d24:	e92d4010 	push	{r4, lr}
   11d28:	e1a04000 	mov	r4, r0
   11d2c:	e59f3018 	ldr	r3, [pc, #24]	; 11d4c <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x28>
   11d30:	e5803000 	str	r3, [r0]
   11d34:	eb0017ff 	bl	17d38 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11d38:	e1a00004 	mov	r0, r4
   11d3c:	e3a01f4d 	mov	r1, #308	; 0x134
   11d40:	eb0064ae 	bl	2b000 <operator delete(void*, unsigned int)>
   11d44:	e1a00004 	mov	r0, r4
   11d48:	e8bd8010 	pop	{r4, pc}
   11d4c:	00042310 	.word	0x00042310

00011d50 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   11d50:	e251c000 	subs	ip, r1, #0
   11d54:	012fff1e 	bxeq	lr
   11d58:	e92d4030 	push	{r4, r5, lr}
   11d5c:	e3520006 	cmp	r2, #6
   11d60:	e1a04000 	mov	r4, r0
   11d64:	e24dd014 	sub	sp, sp, #20
   11d68:	0a000009 	beq	11d94 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
   11d6c:	e2422012 	sub	r2, r2, #18
   11d70:	e16f2f12 	clz	r2, r2
   11d74:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   11d78:	e1a022a2 	lsr	r2, r2, #5
   11d7c:	e3530000 	cmp	r3, #0
   11d80:	03a02000 	moveq	r2, #0
   11d84:	e3520000 	cmp	r2, #0
   11d88:	1a00001b 	bne	11dfc <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xac>
   11d8c:	e28dd014 	add	sp, sp, #20
   11d90:	e8bd8030 	pop	{r4, r5, pc}
   11d94:	e5dc3000 	ldrb	r3, [ip]
   11d98:	e3530007 	cmp	r3, #7
   11d9c:	1afffffa 	bne	11d8c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11da0:	e5dc3001 	ldrb	r3, [ip, #1]
   11da4:	e3530030 	cmp	r3, #48	; 0x30
   11da8:	1afffff7 	bne	11d8c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11dac:	e1a0e00d 	mov	lr, sp
   11db0:	e59f5078 	ldr	r5, [pc, #120]	; 11e30 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe0>
   11db4:	e5dcc002 	ldrb	ip, [ip, #2]
   11db8:	e895000f 	ldm	r5, {r0, r1, r2, r3}
   11dbc:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   11dc0:	e1a00004 	mov	r0, r4
   11dc4:	e5ce3000 	strb	r3, [lr]
   11dc8:	e3a0200d 	mov	r2, #13
   11dcc:	e3a03000 	mov	r3, #0
   11dd0:	e1a0100d 	mov	r1, sp
   11dd4:	e5cdc002 	strb	ip, [sp, #2]
   11dd8:	eb0001ab 	bl	1248c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   11ddc:	e3500000 	cmp	r0, #0
   11de0:	1affffe9 	bne	11d8c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11de4:	eb005357 	bl	26b48 <CLogger::Get()>
   11de8:	e3a02001 	mov	r2, #1
   11dec:	e59f3040 	ldr	r3, [pc, #64]	; 11e34 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
   11df0:	e2851010 	add	r1, r5, #16
   11df4:	eb005295 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11df8:	eaffffe3 	b	11d8c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11dfc:	e5dc3000 	ldrb	r3, [ip]
   11e00:	e3530020 	cmp	r3, #32
   11e04:	1affffe0 	bne	11d8c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11e08:	e1a05000 	mov	r5, r0
   11e0c:	e4953024 	ldr	r3, [r5], #36	; 0x24
   11e10:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11e14:	e12fff33 	blx	r3
   11e18:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   11e1c:	e1a01005 	mov	r1, r5
   11e20:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   11e24:	e2400001 	sub	r0, r0, #1
   11e28:	e12fff33 	blx	r3
   11e2c:	eaffffd6 	b	11d8c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11e30:	00042354 	.word	0x00042354
   11e34:	000422c4 	.word	0x000422c4

00011e38 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   11e38:	e92d4010 	push	{r4, lr}
   11e3c:	e24dd010 	sub	sp, sp, #16
   11e40:	e1a0c00d 	mov	ip, sp
   11e44:	e1a04000 	mov	r4, r0
   11e48:	e59f3074 	ldr	r3, [pc, #116]	; 11ec4 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   11e4c:	e1a0e001 	mov	lr, r1
   11e50:	e3510001 	cmp	r1, #1
   11e54:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   11e58:	e8ac0007 	stmia	ip!, {r0, r1, r2}
   11e5c:	e1a00004 	mov	r0, r4
   11e60:	e5cc3000 	strb	r3, [ip]
   11e64:	0a000007 	beq	11e88 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   11e68:	e35e0002 	cmp	lr, #2
   11e6c:	0a000011 	beq	11eb8 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x80>
   11e70:	e35e0000 	cmp	lr, #0
   11e74:	0a000005 	beq	11e90 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x58>
   11e78:	e3a020ee 	mov	r2, #238	; 0xee
   11e7c:	e59f1044 	ldr	r1, [pc, #68]	; 11ec8 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x90>
   11e80:	e59f0044 	ldr	r0, [pc, #68]	; 11ecc <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x94>
   11e84:	eb004a47 	bl	247a8 <assertion_failed>
   11e88:	e3e03000 	mvn	r3, #0
   11e8c:	e5cd3009 	strb	r3, [sp, #9]
   11e90:	e5d0c130 	ldrb	ip, [r0, #304]	; 0x130
   11e94:	e1a0100d 	mov	r1, sp
   11e98:	e28c3001 	add	r3, ip, #1
   11e9c:	e3a0200d 	mov	r2, #13
   11ea0:	e5c03130 	strb	r3, [r0, #304]	; 0x130
   11ea4:	e3a03000 	mov	r3, #0
   11ea8:	e5cdc002 	strb	ip, [sp, #2]
   11eac:	eb000152 	bl	123fc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11eb0:	e28dd010 	add	sp, sp, #16
   11eb4:	e8bd8010 	pop	{r4, pc}
   11eb8:	e3e03000 	mvn	r3, #0
   11ebc:	e5cd3008 	strb	r3, [sp, #8]
   11ec0:	eafffff2 	b	11e90 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x58>
   11ec4:	00042374 	.word	0x00042374
   11ec8:	000422d8 	.word	0x000422d8
   11ecc:	00041748 	.word	0x00041748

00011ed0 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   11ed0:	e92d4010 	push	{r4, lr}
   11ed4:	e1a04000 	mov	r4, r0
   11ed8:	eb001785 	bl	17cf4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11edc:	e3a02000 	mov	r2, #0
   11ee0:	e59f300c 	ldr	r3, [pc, #12]	; 11ef4 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)+0x24>
   11ee4:	e1a00004 	mov	r0, r4
   11ee8:	e5c42130 	strb	r2, [r4, #304]	; 0x130
   11eec:	e5843000 	str	r3, [r4]
   11ef0:	e8bd8010 	pop	{r4, pc}
   11ef4:	00042310 	.word	0x00042310

00011ef8 <CUSBGamePadXboxOneDevice::Configure()>:
   11ef8:	e3a02040 	mov	r2, #64	; 0x40
   11efc:	e92d4070 	push	{r4, r5, r6, lr}
   11f00:	e2803f4a 	add	r3, r0, #296	; 0x128
   11f04:	e24dd008 	sub	sp, sp, #8
   11f08:	e1c320b0 	strh	r2, [r3]
   11f0c:	e1a04000 	mov	r4, r0
   11f10:	eb00174c 	bl	17c48 <CUSBGamePadDevice::Configure()>
   11f14:	e2505000 	subs	r5, r0, #0
   11f18:	0a00002a 	beq	11fc8 <CUSBGamePadXboxOneDevice::Configure()+0xd0>
   11f1c:	e3a03000 	mov	r3, #0
   11f20:	e3a020ff 	mov	r2, #255	; 0xff
   11f24:	e3a01010 	mov	r1, #16
   11f28:	e3a0c006 	mov	ip, #6
   11f2c:	e59f60b4 	ldr	r6, [pc, #180]	; 11fe8 <CUSBGamePadXboxOneDevice::Configure()+0xf0>
   11f30:	e5841104 	str	r1, [r4, #260]	; 0x104
   11f34:	e5842030 	str	r2, [r4, #48]	; 0x30
   11f38:	e8960003 	ldm	r6, {r0, r1}
   11f3c:	e584203c 	str	r2, [r4, #60]	; 0x3c
   11f40:	e58d0000 	str	r0, [sp]
   11f44:	e5cd1004 	strb	r1, [sp, #4]
   11f48:	e5842048 	str	r2, [r4, #72]	; 0x48
   11f4c:	e5842054 	str	r2, [r4, #84]	; 0x54
   11f50:	e5842060 	str	r2, [r4, #96]	; 0x60
   11f54:	e584206c 	str	r2, [r4, #108]	; 0x6c
   11f58:	e1a0100d 	mov	r1, sp
   11f5c:	e3a02005 	mov	r2, #5
   11f60:	e1a00004 	mov	r0, r4
   11f64:	e584c024 	str	ip, [r4, #36]	; 0x24
   11f68:	e584302c 	str	r3, [r4, #44]	; 0x2c
   11f6c:	e5843038 	str	r3, [r4, #56]	; 0x38
   11f70:	e5843044 	str	r3, [r4, #68]	; 0x44
   11f74:	e5843050 	str	r3, [r4, #80]	; 0x50
   11f78:	e584305c 	str	r3, [r4, #92]	; 0x5c
   11f7c:	e5843068 	str	r3, [r4, #104]	; 0x68
   11f80:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   11f84:	eb00011c 	bl	123fc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11f88:	e2505000 	subs	r5, r0, #0
   11f8c:	0a000005 	beq	11fa8 <CUSBGamePadXboxOneDevice::Configure()+0xb0>
   11f90:	e1a00004 	mov	r0, r4
   11f94:	eb0001a1 	bl	12620 <CUSBHIDDevice::StartRequest()>
   11f98:	e1a05000 	mov	r5, r0
   11f9c:	e1a00005 	mov	r0, r5
   11fa0:	e28dd008 	add	sp, sp, #8
   11fa4:	e8bd8070 	pop	{r4, r5, r6, pc}
   11fa8:	eb0052e6 	bl	26b48 <CLogger::Get()>
   11fac:	e3a02001 	mov	r2, #1
   11fb0:	e59f3034 	ldr	r3, [pc, #52]	; 11fec <CUSBGamePadXboxOneDevice::Configure()+0xf4>
   11fb4:	e2461020 	sub	r1, r6, #32
   11fb8:	eb005224 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11fbc:	e1a00005 	mov	r0, r5
   11fc0:	e28dd008 	add	sp, sp, #8
   11fc4:	e8bd8070 	pop	{r4, r5, r6, pc}
   11fc8:	eb0052de 	bl	26b48 <CLogger::Get()>
   11fcc:	e3a02001 	mov	r2, #1
   11fd0:	e59f3018 	ldr	r3, [pc, #24]	; 11ff0 <CUSBGamePadXboxOneDevice::Configure()+0xf8>
   11fd4:	e59f1018 	ldr	r1, [pc, #24]	; 11ff4 <CUSBGamePadXboxOneDevice::Configure()+0xfc>
   11fd8:	eb00521c 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11fdc:	e1a00005 	mov	r0, r5
   11fe0:	e28dd008 	add	sp, sp, #8
   11fe4:	e8bd8070 	pop	{r4, r5, r6, pc}
   11fe8:	00042384 	.word	0x00042384
   11fec:	000422f0 	.word	0x000422f0
   11ff0:	00041da4 	.word	0x00041da4
   11ff4:	00042364 	.word	0x00042364

00011ff8 <CUSBGamePadXboxOneDevice::GetProperties()>:
   11ff8:	e3a00009 	mov	r0, #9
   11ffc:	e12fff1e 	bx	lr

00012000 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   12000:	e92d4070 	push	{r4, r5, r6, lr}
   12004:	e2504000 	subs	r4, r0, #0
   12008:	0a000017 	beq	1206c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x6c>
   1200c:	e1a05001 	mov	r5, r1
   12010:	eb00092d 	bl	144cc <CUSBRequest::GetStatus() const>
   12014:	e3500000 	cmp	r0, #0
   12018:	0a00000d 	beq	12054 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x54>
   1201c:	e1a00004 	mov	r0, r4
   12020:	eb00091a 	bl	14490 <CUSBRequest::~CUSBRequest()>
   12024:	e1a00004 	mov	r0, r4
   12028:	e3a01028 	mov	r1, #40	; 0x28
   1202c:	eb00098d 	bl	14668 <CUSBRequest::operator delete(void*, unsigned int)>
   12030:	e3550000 	cmp	r5, #0
   12034:	1a000003 	bne	12048 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x48>
   12038:	e3a020b8 	mov	r2, #184	; 0xb8
   1203c:	e59f1038 	ldr	r1, [pc, #56]	; 1207c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x7c>
   12040:	e59f0038 	ldr	r0, [pc, #56]	; 12080 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x80>
   12044:	eb0049d7 	bl	247a8 <assertion_failed>
   12048:	e1a00005 	mov	r0, r5
   1204c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12050:	ea0063e9 	b	2affc <operator delete[](void*)>
   12054:	eb0052bb 	bl	26b48 <CLogger::Get()>
   12058:	e3a02002 	mov	r2, #2
   1205c:	e59f3020 	ldr	r3, [pc, #32]	; 12084 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x84>
   12060:	e59f1020 	ldr	r1, [pc, #32]	; 12088 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x88>
   12064:	eb0051f9 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12068:	eaffffeb 	b	1201c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x1c>
   1206c:	e3a020af 	mov	r2, #175	; 0xaf
   12070:	e59f1004 	ldr	r1, [pc, #4]	; 1207c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x7c>
   12074:	e59f0010 	ldr	r0, [pc, #16]	; 1208c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x8c>
   12078:	eb0049ca 	bl	247a8 <assertion_failed>
   1207c:	0004238c 	.word	0x0004238c
   12080:	000423bc 	.word	0x000423bc
   12084:	000423a0 	.word	0x000423a0
   12088:	00042490 	.word	0x00042490
   1208c:	00040c30 	.word	0x00040c30

00012090 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   12090:	e92d4070 	push	{r4, r5, r6, lr}
   12094:	e1a04000 	mov	r4, r0
   12098:	e1a05002 	mov	r5, r2
   1209c:	ebfff5d1 	bl	f7e8 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   120a0:	e3a03000 	mov	r3, #0
   120a4:	e59f2038 	ldr	r2, [pc, #56]	; 120e4 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x54>
   120a8:	e1550003 	cmp	r5, r3
   120ac:	e5845010 	str	r5, [r4, #16]
   120b0:	e5842000 	str	r2, [r4]
   120b4:	e5843014 	str	r3, [r4, #20]
   120b8:	e5843018 	str	r3, [r4, #24]
   120bc:	e584301c 	str	r3, [r4, #28]
   120c0:	e5843020 	str	r3, [r4, #32]
   120c4:	1a000001 	bne	120d0 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x40>
   120c8:	e1a00004 	mov	r0, r4
   120cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   120d0:	e1a00005 	mov	r0, r5
   120d4:	eb0063c1 	bl	2afe0 <operator new[](unsigned int)>
   120d8:	e5840020 	str	r0, [r4, #32]
   120dc:	e1a00004 	mov	r0, r4
   120e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   120e4:	000424a0 	.word	0x000424a0

000120e8 <CUSBHIDDevice::~CUSBHIDDevice()>:
   120e8:	e92d4070 	push	{r4, r5, r6, lr}
   120ec:	e1a04000 	mov	r4, r0
   120f0:	e5900020 	ldr	r0, [r0, #32]
   120f4:	e59f3074 	ldr	r3, [pc, #116]	; 12170 <CUSBHIDDevice::~CUSBHIDDevice()+0x88>
   120f8:	e3500000 	cmp	r0, #0
   120fc:	e5843000 	str	r3, [r4]
   12100:	0a000000 	beq	12108 <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
   12104:	eb0063bc 	bl	2affc <operator delete[](void*)>
   12108:	e3a03000 	mov	r3, #0
   1210c:	e5945018 	ldr	r5, [r4, #24]
   12110:	e5843020 	str	r3, [r4, #32]
   12114:	e1550003 	cmp	r5, r3
   12118:	0a000004 	beq	12130 <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   1211c:	e1a00005 	mov	r0, r5
   12120:	ebfff4b1 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   12124:	e1a00005 	mov	r0, r5
   12128:	e3a01014 	mov	r1, #20
   1212c:	eb0063b3 	bl	2b000 <operator delete(void*, unsigned int)>
   12130:	e3a03000 	mov	r3, #0
   12134:	e5945014 	ldr	r5, [r4, #20]
   12138:	e5843018 	str	r3, [r4, #24]
   1213c:	e1550003 	cmp	r5, r3
   12140:	0a000004 	beq	12158 <CUSBHIDDevice::~CUSBHIDDevice()+0x70>
   12144:	e1a00005 	mov	r0, r5
   12148:	ebfff4a7 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   1214c:	e1a00005 	mov	r0, r5
   12150:	e3a01014 	mov	r1, #20
   12154:	eb0063a9 	bl	2b000 <operator delete(void*, unsigned int)>
   12158:	e3a03000 	mov	r3, #0
   1215c:	e1a00004 	mov	r0, r4
   12160:	e5843014 	str	r3, [r4, #20]
   12164:	ebfff50d 	bl	f5a0 <CUSBFunction::~CUSBFunction()>
   12168:	e1a00004 	mov	r0, r4
   1216c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12170:	000424a0 	.word	0x000424a0

00012174 <CUSBHIDDevice::~CUSBHIDDevice()>:
   12174:	e92d4010 	push	{r4, lr}
   12178:	e1a04000 	mov	r4, r0
   1217c:	ebffffd9 	bl	120e8 <CUSBHIDDevice::~CUSBHIDDevice()>
   12180:	e1a00004 	mov	r0, r4
   12184:	e3a01024 	mov	r1, #36	; 0x24
   12188:	eb00639c 	bl	2b000 <operator delete(void*, unsigned int)>
   1218c:	e1a00004 	mov	r0, r4
   12190:	e8bd8010 	pop	{r4, pc}

00012194 <CUSBHIDDevice::Configure(unsigned int)>:
   12194:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12198:	e24dd01c 	sub	sp, sp, #28
   1219c:	e1a07001 	mov	r7, r1
   121a0:	e1a05000 	mov	r5, r0
   121a4:	ebfff5e2 	bl	f934 <CUSBFunction::GetNumEndpoints() const>
   121a8:	e2506000 	subs	r6, r0, #0
   121ac:	1a000004 	bne	121c4 <CUSBHIDDevice::Configure(unsigned int)+0x30>
   121b0:	ea000052 	b	12300 <CUSBHIDDevice::Configure(unsigned int)+0x16c>
   121b4:	e5d43003 	ldrb	r3, [r4, #3]
   121b8:	e203303f 	and	r3, r3, #63	; 0x3f
   121bc:	e3530003 	cmp	r3, #3
   121c0:	0a00001e 	beq	12240 <CUSBHIDDevice::Configure(unsigned int)+0xac>
   121c4:	e3a01005 	mov	r1, #5
   121c8:	e1a00005 	mov	r0, r5
   121cc:	ebfff604 	bl	f9e4 <CUSBFunction::GetDescriptor(unsigned char)>
   121d0:	e2504000 	subs	r4, r0, #0
   121d4:	1afffff6 	bne	121b4 <CUSBHIDDevice::Configure(unsigned int)+0x20>
   121d8:	e5956014 	ldr	r6, [r5, #20]
   121dc:	e1a00005 	mov	r0, r5
   121e0:	e3560000 	cmp	r6, #0
   121e4:	0a00004b 	beq	12318 <CUSBHIDDevice::Configure(unsigned int)+0x184>
   121e8:	ebfff515 	bl	f644 <CUSBFunction::Configure()>
   121ec:	e2506000 	subs	r6, r0, #0
   121f0:	0a000033 	beq	122c4 <CUSBHIDDevice::Configure(unsigned int)+0x130>
   121f4:	e1a00005 	mov	r0, r5
   121f8:	ebfff656 	bl	fb58 <CUSBFunction::GetInterfaceClass() const>
   121fc:	e3500003 	cmp	r0, #3
   12200:	0a000049 	beq	1232c <CUSBHIDDevice::Configure(unsigned int)+0x198>
   12204:	e5953010 	ldr	r3, [r5, #16]
   12208:	e3530000 	cmp	r3, #0
   1220c:	1a000034 	bne	122e4 <CUSBHIDDevice::Configure(unsigned int)+0x150>
   12210:	e3570000 	cmp	r7, #0
   12214:	e5857010 	str	r7, [r5, #16]
   12218:	0a000064 	beq	123b0 <CUSBHIDDevice::Configure(unsigned int)+0x21c>
   1221c:	e5953020 	ldr	r3, [r5, #32]
   12220:	e3530000 	cmp	r3, #0
   12224:	1a000069 	bne	123d0 <CUSBHIDDevice::Configure(unsigned int)+0x23c>
   12228:	e1a00007 	mov	r0, r7
   1222c:	eb00636b 	bl	2afe0 <operator new[](unsigned int)>
   12230:	e5850020 	str	r0, [r5, #32]
   12234:	e1a00006 	mov	r0, r6
   12238:	e28dd01c 	add	sp, sp, #28
   1223c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12240:	e1d430d2 	ldrsb	r3, [r4, #2]
   12244:	e3530000 	cmp	r3, #0
   12248:	ba00000e 	blt	12288 <CUSBHIDDevice::Configure(unsigned int)+0xf4>
   1224c:	e5953018 	ldr	r3, [r5, #24]
   12250:	e1a00005 	mov	r0, r5
   12254:	e3530000 	cmp	r3, #0
   12258:	1a000058 	bne	123c0 <CUSBHIDDevice::Configure(unsigned int)+0x22c>
   1225c:	ebfff5c0 	bl	f964 <CUSBFunction::GetDevice() const>
   12260:	e1a01000 	mov	r1, r0
   12264:	e3a00014 	mov	r0, #20
   12268:	e58d1014 	str	r1, [sp, #20]
   1226c:	eb006355 	bl	2afc8 <operator new(unsigned int)>
   12270:	e1a06000 	mov	r6, r0
   12274:	e1a02004 	mov	r2, r4
   12278:	e59d1014 	ldr	r1, [sp, #20]
   1227c:	ebfff3f6 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12280:	e5856018 	str	r6, [r5, #24]
   12284:	eaffffce 	b	121c4 <CUSBHIDDevice::Configure(unsigned int)+0x30>
   12288:	e5953014 	ldr	r3, [r5, #20]
   1228c:	e1a00005 	mov	r0, r5
   12290:	e3530000 	cmp	r3, #0
   12294:	1a000049 	bne	123c0 <CUSBHIDDevice::Configure(unsigned int)+0x22c>
   12298:	ebfff5b1 	bl	f964 <CUSBFunction::GetDevice() const>
   1229c:	e1a01000 	mov	r1, r0
   122a0:	e3a00014 	mov	r0, #20
   122a4:	e58d1014 	str	r1, [sp, #20]
   122a8:	eb006346 	bl	2afc8 <operator new(unsigned int)>
   122ac:	e1a06000 	mov	r6, r0
   122b0:	e1a02004 	mov	r2, r4
   122b4:	e59d1014 	ldr	r1, [sp, #20]
   122b8:	ebfff3e7 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   122bc:	e5856014 	str	r6, [r5, #20]
   122c0:	eaffffbf 	b	121c4 <CUSBHIDDevice::Configure(unsigned int)+0x30>
   122c4:	eb00521f 	bl	26b48 <CLogger::Get()>
   122c8:	e3a02001 	mov	r2, #1
   122cc:	e59f310c 	ldr	r3, [pc, #268]	; 123e0 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   122d0:	e59f110c 	ldr	r1, [pc, #268]	; 123e4 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   122d4:	eb00515d 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   122d8:	e1a00006 	mov	r0, r6
   122dc:	e28dd01c 	add	sp, sp, #28
   122e0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   122e4:	e5953020 	ldr	r3, [r5, #32]
   122e8:	e3530000 	cmp	r3, #0
   122ec:	1afffff9 	bne	122d8 <CUSBHIDDevice::Configure(unsigned int)+0x144>
   122f0:	e3a02082 	mov	r2, #130	; 0x82
   122f4:	e59f10ec 	ldr	r1, [pc, #236]	; 123e8 <CUSBHIDDevice::Configure(unsigned int)+0x254>
   122f8:	e59f00ec 	ldr	r0, [pc, #236]	; 123ec <CUSBHIDDevice::Configure(unsigned int)+0x258>
   122fc:	eb004929 	bl	247a8 <assertion_failed>
   12300:	e1a00005 	mov	r0, r5
   12304:	e59f10d8 	ldr	r1, [pc, #216]	; 123e4 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   12308:	ebfff5c0 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   1230c:	e1a00006 	mov	r0, r6
   12310:	e28dd01c 	add	sp, sp, #28
   12314:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12318:	e59f10c4 	ldr	r1, [pc, #196]	; 123e4 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   1231c:	ebfff5bb 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   12320:	e1a00006 	mov	r0, r6
   12324:	e28dd01c 	add	sp, sp, #28
   12328:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1232c:	e1a00005 	mov	r0, r5
   12330:	ebfff614 	bl	fb88 <CUSBFunction::GetInterfaceSubClass() const>
   12334:	e3500001 	cmp	r0, #1
   12338:	e1a08000 	mov	r8, r0
   1233c:	1affffb0 	bne	12204 <CUSBHIDDevice::Configure(unsigned int)+0x70>
   12340:	e1a00005 	mov	r0, r5
   12344:	ebfff59b 	bl	f9b8 <CUSBFunction::GetHost() const>
   12348:	e1a09000 	mov	r9, r0
   1234c:	e1a00005 	mov	r0, r5
   12350:	ebfff58d 	bl	f98c <CUSBFunction::GetEndpoint0() const>
   12354:	e1a01000 	mov	r1, r0
   12358:	e1a00005 	mov	r0, r5
   1235c:	e58d1014 	str	r1, [sp, #20]
   12360:	ebfff5f0 	bl	fb28 <CUSBFunction::GetInterfaceNumber() const>
   12364:	e6ff3070 	uxth	r3, r0
   12368:	e58d3004 	str	r3, [sp, #4]
   1236c:	e1a00009 	mov	r0, r9
   12370:	e3a0300b 	mov	r3, #11
   12374:	e3a02021 	mov	r2, #33	; 0x21
   12378:	e59d1014 	ldr	r1, [sp, #20]
   1237c:	e58d400c 	str	r4, [sp, #12]
   12380:	e58d4008 	str	r4, [sp, #8]
   12384:	e58d4000 	str	r4, [sp]
   12388:	eb000136 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1238c:	e3500000 	cmp	r0, #0
   12390:	aaffff9b 	bge	12204 <CUSBHIDDevice::Configure(unsigned int)+0x70>
   12394:	eb0051eb 	bl	26b48 <CLogger::Get()>
   12398:	e1a02008 	mov	r2, r8
   1239c:	e59f304c 	ldr	r3, [pc, #76]	; 123f0 <CUSBHIDDevice::Configure(unsigned int)+0x25c>
   123a0:	e59f103c 	ldr	r1, [pc, #60]	; 123e4 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   123a4:	e1a06004 	mov	r6, r4
   123a8:	eb005128 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   123ac:	eaffffc9 	b	122d8 <CUSBHIDDevice::Configure(unsigned int)+0x144>
   123b0:	e3a0207d 	mov	r2, #125	; 0x7d
   123b4:	e59f102c 	ldr	r1, [pc, #44]	; 123e8 <CUSBHIDDevice::Configure(unsigned int)+0x254>
   123b8:	e59f0034 	ldr	r0, [pc, #52]	; 123f4 <CUSBHIDDevice::Configure(unsigned int)+0x260>
   123bc:	eb0048f9 	bl	247a8 <assertion_failed>
   123c0:	e59f101c 	ldr	r1, [pc, #28]	; 123e4 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   123c4:	ebfff591 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   123c8:	e3a06000 	mov	r6, #0
   123cc:	eaffffc1 	b	122d8 <CUSBHIDDevice::Configure(unsigned int)+0x144>
   123d0:	e3a0207f 	mov	r2, #127	; 0x7f
   123d4:	e59f100c 	ldr	r1, [pc, #12]	; 123e8 <CUSBHIDDevice::Configure(unsigned int)+0x254>
   123d8:	e59f0018 	ldr	r0, [pc, #24]	; 123f8 <CUSBHIDDevice::Configure(unsigned int)+0x264>
   123dc:	eb0048f1 	bl	247a8 <assertion_failed>
   123e0:	00041ce4 	.word	0x00041ce4
   123e4:	00042490 	.word	0x00042490
   123e8:	0004238c 	.word	0x0004238c
   123ec:	0004241c 	.word	0x0004241c
   123f0:	000423d0 	.word	0x000423d0
   123f4:	000423ec 	.word	0x000423ec
   123f8:	00042404 	.word	0x00042404

000123fc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   123fc:	e590c018 	ldr	ip, [r0, #24]
   12400:	e35c0000 	cmp	ip, #0
   12404:	0a000013 	beq	12458 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x5c>
   12408:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1240c:	e3510000 	cmp	r1, #0
   12410:	e1a05001 	mov	r5, r1
   12414:	e24dd00c 	sub	sp, sp, #12
   12418:	0a000010 	beq	12460 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x64>
   1241c:	e3520000 	cmp	r2, #0
   12420:	e1a06002 	mov	r6, r2
   12424:	0a000011 	beq	12470 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x74>
   12428:	e1a07003 	mov	r7, r3
   1242c:	e1a04000 	mov	r4, r0
   12430:	ebfff560 	bl	f9b8 <CUSBFunction::GetHost() const>
   12434:	e58d7000 	str	r7, [sp]
   12438:	e1a03006 	mov	r3, r6
   1243c:	e1a02005 	mov	r2, r5
   12440:	e5941018 	ldr	r1, [r4, #24]
   12444:	eb00016d 	bl	12a00 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12448:	e1e00000 	mvn	r0, r0
   1244c:	e1a00fa0 	lsr	r0, r0, #31
   12450:	e28dd00c 	add	sp, sp, #12
   12454:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12458:	e1a0000c 	mov	r0, ip
   1245c:	e12fff1e 	bx	lr
   12460:	e3a0208e 	mov	r2, #142	; 0x8e
   12464:	e59f1014 	ldr	r1, [pc, #20]	; 12480 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x84>
   12468:	e59f0014 	ldr	r0, [pc, #20]	; 12484 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x88>
   1246c:	eb0048cd 	bl	247a8 <assertion_failed>
   12470:	e3a0208f 	mov	r2, #143	; 0x8f
   12474:	e59f1004 	ldr	r1, [pc, #4]	; 12480 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x84>
   12478:	e59f0008 	ldr	r0, [pc, #8]	; 12488 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x8c>
   1247c:	eb0048c9 	bl	247a8 <assertion_failed>
   12480:	0004238c 	.word	0x0004238c
   12484:	0004256c 	.word	0x0004256c
   12488:	00042434 	.word	0x00042434

0001248c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   1248c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12490:	e1a04000 	mov	r4, r0
   12494:	e5900018 	ldr	r0, [r0, #24]
   12498:	e24dd008 	sub	sp, sp, #8
   1249c:	e3500000 	cmp	r0, #0
   124a0:	0a000023 	beq	12534 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xa8>
   124a4:	e3510000 	cmp	r1, #0
   124a8:	e1a06001 	mov	r6, r1
   124ac:	0a000022 	beq	1253c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xb0>
   124b0:	e3520000 	cmp	r2, #0
   124b4:	e1a05002 	mov	r5, r2
   124b8:	0a000023 	beq	1254c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xc0>
   124bc:	e1a00002 	mov	r0, r2
   124c0:	e1a07003 	mov	r7, r3
   124c4:	eb0062c5 	bl	2afe0 <operator new[](unsigned int)>
   124c8:	e1a01006 	mov	r1, r6
   124cc:	e1a02005 	mov	r2, r5
   124d0:	e1a08000 	mov	r8, r0
   124d4:	eb0060d5 	bl	2a830 <memcpy>
   124d8:	e3a00028 	mov	r0, #40	; 0x28
   124dc:	eb00084c 	bl	14614 <CUSBRequest::operator new(unsigned int)>
   124e0:	e3a01000 	mov	r1, #0
   124e4:	e1a06000 	mov	r6, r0
   124e8:	e58d1000 	str	r1, [sp]
   124ec:	e1a03005 	mov	r3, r5
   124f0:	e1a02008 	mov	r2, r8
   124f4:	e5941018 	ldr	r1, [r4, #24]
   124f8:	eb0007c4 	bl	14410 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   124fc:	e1a03004 	mov	r3, r4
   12500:	e1a02008 	mov	r2, r8
   12504:	e1a00006 	mov	r0, r6
   12508:	e59f104c 	ldr	r1, [pc, #76]	; 1255c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd0>
   1250c:	eb000821 	bl	14598 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   12510:	e1a00004 	mov	r0, r4
   12514:	ebfff527 	bl	f9b8 <CUSBFunction::GetHost() const>
   12518:	e1a01006 	mov	r1, r6
   1251c:	e1a02007 	mov	r2, r7
   12520:	e5903000 	ldr	r3, [r0]
   12524:	e593300c 	ldr	r3, [r3, #12]
   12528:	e28dd008 	add	sp, sp, #8
   1252c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   12530:	e12fff13 	bx	r3
   12534:	e28dd008 	add	sp, sp, #8
   12538:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1253c:	e3a020a0 	mov	r2, #160	; 0xa0
   12540:	e59f1018 	ldr	r1, [pc, #24]	; 12560 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd4>
   12544:	e59f0018 	ldr	r0, [pc, #24]	; 12564 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd8>
   12548:	eb004896 	bl	247a8 <assertion_failed>
   1254c:	e3a020a1 	mov	r2, #161	; 0xa1
   12550:	e59f1008 	ldr	r1, [pc, #8]	; 12560 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd4>
   12554:	e59f000c 	ldr	r0, [pc, #12]	; 12568 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xdc>
   12558:	eb004892 	bl	247a8 <assertion_failed>
   1255c:	00012000 	.word	0x00012000
   12560:	0004238c 	.word	0x0004238c
   12564:	0004256c 	.word	0x0004256c
   12568:	00042434 	.word	0x00042434

0001256c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   1256c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12570:	e590c01c 	ldr	ip, [r0, #28]
   12574:	e24dd00c 	sub	sp, sp, #12
   12578:	e35c0000 	cmp	ip, #0
   1257c:	1a000012 	bne	125cc <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x60>
   12580:	e1a07003 	mov	r7, r3
   12584:	e5903014 	ldr	r3, [r0, #20]
   12588:	e1a04000 	mov	r4, r0
   1258c:	e3530000 	cmp	r3, #0
   12590:	0a000011 	beq	125dc <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x70>
   12594:	e3510000 	cmp	r1, #0
   12598:	e1a05001 	mov	r5, r1
   1259c:	0a000012 	beq	125ec <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x80>
   125a0:	e3520000 	cmp	r2, #0
   125a4:	e1a06002 	mov	r6, r2
   125a8:	0a000013 	beq	125fc <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x90>
   125ac:	ebfff501 	bl	f9b8 <CUSBFunction::GetHost() const>
   125b0:	e58d7000 	str	r7, [sp]
   125b4:	e1a03006 	mov	r3, r6
   125b8:	e1a02005 	mov	r2, r5
   125bc:	e5941014 	ldr	r1, [r4, #20]
   125c0:	eb00010e 	bl	12a00 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   125c4:	e28dd00c 	add	sp, sp, #12
   125c8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   125cc:	e3a020be 	mov	r2, #190	; 0xbe
   125d0:	e59f1034 	ldr	r1, [pc, #52]	; 1260c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   125d4:	e59f0034 	ldr	r0, [pc, #52]	; 12610 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa4>
   125d8:	eb004872 	bl	247a8 <assertion_failed>
   125dc:	e3a020c0 	mov	r2, #192	; 0xc0
   125e0:	e59f1024 	ldr	r1, [pc, #36]	; 1260c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   125e4:	e59f0028 	ldr	r0, [pc, #40]	; 12614 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa8>
   125e8:	eb00486e 	bl	247a8 <assertion_failed>
   125ec:	e3a020c1 	mov	r2, #193	; 0xc1
   125f0:	e59f1014 	ldr	r1, [pc, #20]	; 1260c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   125f4:	e59f001c 	ldr	r0, [pc, #28]	; 12618 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   125f8:	eb00486a 	bl	247a8 <assertion_failed>
   125fc:	e3a020c2 	mov	r2, #194	; 0xc2
   12600:	e59f1004 	ldr	r1, [pc, #4]	; 1260c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   12604:	e59f0010 	ldr	r0, [pc, #16]	; 1261c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb0>
   12608:	eb004866 	bl	247a8 <assertion_failed>
   1260c:	0004238c 	.word	0x0004238c
   12610:	00042444 	.word	0x00042444
   12614:	00042450 	.word	0x00042450
   12618:	0004256c 	.word	0x0004256c
   1261c:	00042434 	.word	0x00042434

00012620 <CUSBHIDDevice::StartRequest()>:
   12620:	e92d4070 	push	{r4, r5, r6, lr}
   12624:	e5903014 	ldr	r3, [r0, #20]
   12628:	e24dd008 	sub	sp, sp, #8
   1262c:	e3530000 	cmp	r3, #0
   12630:	0a000020 	beq	126b8 <CUSBHIDDevice::StartRequest()+0x98>
   12634:	e5903020 	ldr	r3, [r0, #32]
   12638:	e1a04000 	mov	r4, r0
   1263c:	e3530000 	cmp	r3, #0
   12640:	0a000020 	beq	126c8 <CUSBHIDDevice::StartRequest()+0xa8>
   12644:	e590501c 	ldr	r5, [r0, #28]
   12648:	e3550000 	cmp	r5, #0
   1264c:	1a000021 	bne	126d8 <CUSBHIDDevice::StartRequest()+0xb8>
   12650:	e5903010 	ldr	r3, [r0, #16]
   12654:	e3530000 	cmp	r3, #0
   12658:	0a000022 	beq	126e8 <CUSBHIDDevice::StartRequest()+0xc8>
   1265c:	e3a00028 	mov	r0, #40	; 0x28
   12660:	eb0007eb 	bl	14614 <CUSBRequest::operator new(unsigned int)>
   12664:	e1a06000 	mov	r6, r0
   12668:	e58d5000 	str	r5, [sp]
   1266c:	e5943010 	ldr	r3, [r4, #16]
   12670:	e5942020 	ldr	r2, [r4, #32]
   12674:	e5941014 	ldr	r1, [r4, #20]
   12678:	eb000764 	bl	14410 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1267c:	e1a03004 	mov	r3, r4
   12680:	e1a02005 	mov	r2, r5
   12684:	e1a00006 	mov	r0, r6
   12688:	e59f1068 	ldr	r1, [pc, #104]	; 126f8 <CUSBHIDDevice::StartRequest()+0xd8>
   1268c:	e584601c 	str	r6, [r4, #28]
   12690:	eb0007c0 	bl	14598 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   12694:	e1a00004 	mov	r0, r4
   12698:	ebfff4c6 	bl	f9b8 <CUSBFunction::GetHost() const>
   1269c:	e1a02005 	mov	r2, r5
   126a0:	e5903000 	ldr	r3, [r0]
   126a4:	e594101c 	ldr	r1, [r4, #28]
   126a8:	e593300c 	ldr	r3, [r3, #12]
   126ac:	e28dd008 	add	sp, sp, #8
   126b0:	e8bd4070 	pop	{r4, r5, r6, lr}
   126b4:	e12fff13 	bx	r3
   126b8:	e3a020c8 	mov	r2, #200	; 0xc8
   126bc:	e59f1038 	ldr	r1, [pc, #56]	; 126fc <CUSBHIDDevice::StartRequest()+0xdc>
   126c0:	e59f0038 	ldr	r0, [pc, #56]	; 12700 <CUSBHIDDevice::StartRequest()+0xe0>
   126c4:	eb004837 	bl	247a8 <assertion_failed>
   126c8:	e3a020c9 	mov	r2, #201	; 0xc9
   126cc:	e59f1028 	ldr	r1, [pc, #40]	; 126fc <CUSBHIDDevice::StartRequest()+0xdc>
   126d0:	e59f002c 	ldr	r0, [pc, #44]	; 12704 <CUSBHIDDevice::StartRequest()+0xe4>
   126d4:	eb004833 	bl	247a8 <assertion_failed>
   126d8:	e3a020cb 	mov	r2, #203	; 0xcb
   126dc:	e59f1018 	ldr	r1, [pc, #24]	; 126fc <CUSBHIDDevice::StartRequest()+0xdc>
   126e0:	e59f0020 	ldr	r0, [pc, #32]	; 12708 <CUSBHIDDevice::StartRequest()+0xe8>
   126e4:	eb00482f 	bl	247a8 <assertion_failed>
   126e8:	e3a020cc 	mov	r2, #204	; 0xcc
   126ec:	e59f1008 	ldr	r1, [pc, #8]	; 126fc <CUSBHIDDevice::StartRequest()+0xdc>
   126f0:	e59f0014 	ldr	r0, [pc, #20]	; 1270c <CUSBHIDDevice::StartRequest()+0xec>
   126f4:	eb00482b 	bl	247a8 <assertion_failed>
   126f8:	0001280c 	.word	0x0001280c
   126fc:	0004238c 	.word	0x0004238c
   12700:	00042450 	.word	0x00042450
   12704:	0004241c 	.word	0x0004241c
   12708:	00042444 	.word	0x00042444
   1270c:	000423ec 	.word	0x000423ec

00012710 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   12710:	e92d4030 	push	{r4, r5, lr}
   12714:	e3510000 	cmp	r1, #0
   12718:	e24dd00c 	sub	sp, sp, #12
   1271c:	0a00002d 	beq	127d8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xc8>
   12720:	e590501c 	ldr	r5, [r0, #28]
   12724:	e1a04000 	mov	r4, r0
   12728:	e1550001 	cmp	r5, r1
   1272c:	1a00002d 	bne	127e8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   12730:	e1a00005 	mov	r0, r5
   12734:	eb000764 	bl	144cc <CUSBRequest::GetStatus() const>
   12738:	e2502000 	subs	r2, r0, #0
   1273c:	e5943000 	ldr	r3, [r4]
   12740:	1a000013 	bne	12794 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x84>
   12744:	e1a01002 	mov	r1, r2
   12748:	e1a00004 	mov	r0, r4
   1274c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   12750:	e12fff33 	blx	r3
   12754:	e594501c 	ldr	r5, [r4, #28]
   12758:	e3550000 	cmp	r5, #0
   1275c:	0a000004 	beq	12774 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x64>
   12760:	e1a00005 	mov	r0, r5
   12764:	eb000749 	bl	14490 <CUSBRequest::~CUSBRequest()>
   12768:	e1a00005 	mov	r0, r5
   1276c:	e3a01028 	mov	r1, #40	; 0x28
   12770:	eb0007bc 	bl	14668 <CUSBRequest::operator delete(void*, unsigned int)>
   12774:	e3a03000 	mov	r3, #0
   12778:	e1a00004 	mov	r0, r4
   1277c:	e584301c 	str	r3, [r4, #28]
   12780:	ebffffa6 	bl	12620 <CUSBHIDDevice::StartRequest()>
   12784:	e3500000 	cmp	r0, #0
   12788:	0a00000b 	beq	127bc <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xac>
   1278c:	e28dd00c 	add	sp, sp, #12
   12790:	e8bd8030 	pop	{r4, r5, pc}
   12794:	e5941020 	ldr	r1, [r4, #32]
   12798:	e1a00005 	mov	r0, r5
   1279c:	e58d1004 	str	r1, [sp, #4]
   127a0:	e5935024 	ldr	r5, [r3, #36]	; 0x24
   127a4:	eb00074a 	bl	144d4 <CUSBRequest::GetResultLength() const>
   127a8:	e59d1004 	ldr	r1, [sp, #4]
   127ac:	e1a02000 	mov	r2, r0
   127b0:	e1a00004 	mov	r0, r4
   127b4:	e12fff35 	blx	r5
   127b8:	eaffffe5 	b	12754 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x44>
   127bc:	eb0050e1 	bl	26b48 <CLogger::Get()>
   127c0:	e3a02001 	mov	r2, #1
   127c4:	e59f302c 	ldr	r3, [pc, #44]	; 127f8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe8>
   127c8:	e59f102c 	ldr	r1, [pc, #44]	; 127fc <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xec>
   127cc:	e28dd00c 	add	sp, sp, #12
   127d0:	e8bd4030 	pop	{r4, r5, lr}
   127d4:	ea00501d 	b	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   127d8:	e3a020d6 	mov	r2, #214	; 0xd6
   127dc:	e59f101c 	ldr	r1, [pc, #28]	; 12800 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xf0>
   127e0:	e59f001c 	ldr	r0, [pc, #28]	; 12804 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xf4>
   127e4:	eb0047ef 	bl	247a8 <assertion_failed>
   127e8:	e3a020d7 	mov	r2, #215	; 0xd7
   127ec:	e59f100c 	ldr	r1, [pc, #12]	; 12800 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xf0>
   127f0:	e59f0010 	ldr	r0, [pc, #16]	; 12808 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xf8>
   127f4:	eb0047eb 	bl	247a8 <assertion_failed>
   127f8:	00042478 	.word	0x00042478
   127fc:	00042490 	.word	0x00042490
   12800:	0004238c 	.word	0x0004238c
   12804:	00040c30 	.word	0x00040c30
   12808:	00042468 	.word	0x00042468

0001280c <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   1280c:	e3520000 	cmp	r2, #0
   12810:	0a000002 	beq	12820 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   12814:	e1a01000 	mov	r1, r0
   12818:	e1a00002 	mov	r0, r2
   1281c:	eaffffbb 	b	12710 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   12820:	e3a020ee 	mov	r2, #238	; 0xee
   12824:	e92d4010 	push	{r4, lr}
   12828:	e59f1004 	ldr	r1, [pc, #4]	; 12834 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   1282c:	e59f0004 	ldr	r0, [pc, #4]	; 12838 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   12830:	eb0047dc 	bl	247a8 <assertion_failed>
   12834:	0004238c 	.word	0x0004238c
   12838:	00040b44 	.word	0x00040b44

0001283c <CUSBHostController::CUSBHostController()>:
   1283c:	e59f3004 	ldr	r3, [pc, #4]	; 12848 <CUSBHostController::CUSBHostController()+0xc>
   12840:	e5803000 	str	r3, [r0]
   12844:	e12fff1e 	bx	lr
   12848:	000424d0 	.word	0x000424d0

0001284c <CUSBHostController::~CUSBHostController()>:
   1284c:	e12fff1e 	bx	lr

00012850 <CUSBHostController::~CUSBHostController()>:
   12850:	e92d4010 	push	{r4, lr}
   12854:	e1a04000 	mov	r4, r0
   12858:	e3a01004 	mov	r1, #4
   1285c:	eb0061e7 	bl	2b000 <operator delete(void*, unsigned int)>
   12860:	e1a00004 	mov	r0, r4
   12864:	e8bd8010 	pop	{r4, pc}

00012868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
   12868:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1286c:	e1a05000 	mov	r5, r0
   12870:	e24dd038 	sub	sp, sp, #56	; 0x38
   12874:	e3a00008 	mov	r0, #8
   12878:	e1dd66b4 	ldrh	r6, [sp, #100]	; 0x64
   1287c:	e1a08002 	mov	r8, r2
   12880:	e1a07003 	mov	r7, r3
   12884:	e1dda5b8 	ldrh	sl, [sp, #88]	; 0x58
   12888:	e1dd95bc 	ldrh	r9, [sp, #92]	; 0x5c
   1288c:	e58d100c 	str	r1, [sp, #12]
   12890:	eb0061cc 	bl	2afc8 <operator new(unsigned int)>
   12894:	e1a04000 	mov	r4, r0
   12898:	e58d0000 	str	r0, [sp]
   1289c:	e5c08000 	strb	r8, [r0]
   128a0:	e1a0042a 	lsr	r0, sl, #8
   128a4:	e1a0e429 	lsr	lr, r9, #8
   128a8:	e1a0c426 	lsr	ip, r6, #8
   128ac:	e1a03006 	mov	r3, r6
   128b0:	e59d100c 	ldr	r1, [sp, #12]
   128b4:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
   128b8:	e5c40003 	strb	r0, [r4, #3]
   128bc:	e28d0010 	add	r0, sp, #16
   128c0:	e5c4e005 	strb	lr, [r4, #5]
   128c4:	e5c4c007 	strb	ip, [r4, #7]
   128c8:	e5c47001 	strb	r7, [r4, #1]
   128cc:	e5c4a002 	strb	sl, [r4, #2]
   128d0:	e5c49004 	strb	r9, [r4, #4]
   128d4:	e5c46006 	strb	r6, [r4, #6]
   128d8:	eb0006cc 	bl	14410 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   128dc:	e5953000 	ldr	r3, [r5]
   128e0:	e1a00005 	mov	r0, r5
   128e4:	e3a02000 	mov	r2, #0
   128e8:	e5933008 	ldr	r3, [r3, #8]
   128ec:	e28d1010 	add	r1, sp, #16
   128f0:	e12fff33 	blx	r3
   128f4:	e3500000 	cmp	r0, #0
   128f8:	0a00000a 	beq	12928 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xc0>
   128fc:	e28d0010 	add	r0, sp, #16
   12900:	eb0006f3 	bl	144d4 <CUSBRequest::GetResultLength() const>
   12904:	e1a05000 	mov	r5, r0
   12908:	e1a00004 	mov	r0, r4
   1290c:	e3a01008 	mov	r1, #8
   12910:	eb0061ba 	bl	2b000 <operator delete(void*, unsigned int)>
   12914:	e28d0010 	add	r0, sp, #16
   12918:	eb0006dc 	bl	14490 <CUSBRequest::~CUSBRequest()>
   1291c:	e1a00005 	mov	r0, r5
   12920:	e28dd038 	add	sp, sp, #56	; 0x38
   12924:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12928:	e3e05000 	mvn	r5, #0
   1292c:	eafffff5 	b	12908 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xa0>

00012930 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
   12930:	e92d4010 	push	{r4, lr}
   12934:	e1833402 	orr	r3, r3, r2, lsl #8
   12938:	e59d4008 	ldr	r4, [sp, #8]
   1293c:	e5dde010 	ldrb	lr, [sp, #16]
   12940:	e1ddc1b4 	ldrh	ip, [sp, #20]
   12944:	e58d3008 	str	r3, [sp, #8]
   12948:	e1dd30bc 	ldrh	r3, [sp, #12]
   1294c:	e1a0200e 	mov	r2, lr
   12950:	e58d3014 	str	r3, [sp, #20]
   12954:	e58d4010 	str	r4, [sp, #16]
   12958:	e58dc00c 	str	ip, [sp, #12]
   1295c:	e3a03006 	mov	r3, #6
   12960:	e8bd4010 	pop	{r4, lr}
   12964:	eaffffbf 	b	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

00012968 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
   12968:	e92d4010 	push	{r4, lr}
   1296c:	e3a04000 	mov	r4, #0
   12970:	e24dd010 	sub	sp, sp, #16
   12974:	e58d2000 	str	r2, [sp]
   12978:	e3a03005 	mov	r3, #5
   1297c:	e1a02004 	mov	r2, r4
   12980:	e58d400c 	str	r4, [sp, #12]
   12984:	e58d4008 	str	r4, [sp, #8]
   12988:	e58d4004 	str	r4, [sp, #4]
   1298c:	ebffffb5 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12990:	e1500004 	cmp	r0, r4
   12994:	b1a00004 	movlt	r0, r4
   12998:	ba000003 	blt	129ac <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x44>
   1299c:	eb005d4e 	bl	29edc <CTimer::Get()>
   129a0:	e3a00032 	mov	r0, #50	; 0x32
   129a4:	eb005d17 	bl	29e08 <CTimer::SimpleMsDelay(unsigned int)>
   129a8:	e3a00001 	mov	r0, #1
   129ac:	e28dd010 	add	sp, sp, #16
   129b0:	e8bd8010 	pop	{r4, pc}

000129b4 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
   129b4:	e92d4010 	push	{r4, lr}
   129b8:	e3a04000 	mov	r4, #0
   129bc:	e24dd010 	sub	sp, sp, #16
   129c0:	e58d2000 	str	r2, [sp]
   129c4:	e3a03009 	mov	r3, #9
   129c8:	e1a02004 	mov	r2, r4
   129cc:	e58d400c 	str	r4, [sp, #12]
   129d0:	e58d4008 	str	r4, [sp, #8]
   129d4:	e58d4004 	str	r4, [sp, #4]
   129d8:	ebffffa2 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   129dc:	e1500004 	cmp	r0, r4
   129e0:	b1a00004 	movlt	r0, r4
   129e4:	ba000003 	blt	129f8 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x44>
   129e8:	eb005d3b 	bl	29edc <CTimer::Get()>
   129ec:	e3a00032 	mov	r0, #50	; 0x32
   129f0:	eb005d04 	bl	29e08 <CTimer::SimpleMsDelay(unsigned int)>
   129f4:	e3a00001 	mov	r0, #1
   129f8:	e28dd010 	add	sp, sp, #16
   129fc:	e8bd8010 	pop	{r4, pc}

00012a00 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
   12a00:	e3a0c000 	mov	ip, #0
   12a04:	e92d4010 	push	{r4, lr}
   12a08:	e1a04000 	mov	r4, r0
   12a0c:	e24dd030 	sub	sp, sp, #48	; 0x30
   12a10:	e58dc000 	str	ip, [sp]
   12a14:	e28d0008 	add	r0, sp, #8
   12a18:	eb00067c 	bl	14410 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   12a1c:	e5943000 	ldr	r3, [r4]
   12a20:	e1a00004 	mov	r0, r4
   12a24:	e5933008 	ldr	r3, [r3, #8]
   12a28:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   12a2c:	e28d1008 	add	r1, sp, #8
   12a30:	e12fff33 	blx	r3
   12a34:	e3500000 	cmp	r0, #0
   12a38:	0a000007 	beq	12a5c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x5c>
   12a3c:	e28d0008 	add	r0, sp, #8
   12a40:	eb0006a3 	bl	144d4 <CUSBRequest::GetResultLength() const>
   12a44:	e1a04000 	mov	r4, r0
   12a48:	e28d0008 	add	r0, sp, #8
   12a4c:	eb00068f 	bl	14490 <CUSBRequest::~CUSBRequest()>
   12a50:	e1a00004 	mov	r0, r4
   12a54:	e28dd030 	add	sp, sp, #48	; 0x30
   12a58:	e8bd8010 	pop	{r4, pc}
   12a5c:	e3e04000 	mvn	r4, #0
   12a60:	eafffff8 	b	12a48 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x48>

00012a64 <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
   12a64:	e1c022f0 	strd	r2, [r0, #32]
   12a68:	e1a01003 	mov	r1, r3
   12a6c:	e1a00002 	mov	r0, r2
   12a70:	e12fff1e 	bx	lr

00012a74 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   12a74:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
   12a78:	e59f30e8 	ldr	r3, [pc, #232]	; 12b68 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xf4>
   12a7c:	e3520000 	cmp	r2, #0
   12a80:	e92d4070 	push	{r4, r5, r6, lr}
   12a84:	e1a04000 	mov	r4, r0
   12a88:	e5803000 	str	r3, [r0]
   12a8c:	1a000021 	bne	12b18 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xa4>
   12a90:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   12a94:	e3550000 	cmp	r5, #0
   12a98:	0a000004 	beq	12ab0 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x3c>
   12a9c:	e1a00005 	mov	r0, r5
   12aa0:	eb00194f 	bl	18fe4 <CPartitionManager::~CPartitionManager()>
   12aa4:	e1a00005 	mov	r0, r5
   12aa8:	e3a01024 	mov	r1, #36	; 0x24
   12aac:	eb006153 	bl	2b000 <operator delete(void*, unsigned int)>
   12ab0:	e3a03000 	mov	r3, #0
   12ab4:	e5945014 	ldr	r5, [r4, #20]
   12ab8:	e5843028 	str	r3, [r4, #40]	; 0x28
   12abc:	e1550003 	cmp	r5, r3
   12ac0:	0a000004 	beq	12ad8 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x64>
   12ac4:	e1a00005 	mov	r0, r5
   12ac8:	ebfff247 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   12acc:	e1a00005 	mov	r0, r5
   12ad0:	e3a01014 	mov	r1, #20
   12ad4:	eb006149 	bl	2b000 <operator delete(void*, unsigned int)>
   12ad8:	e3a03000 	mov	r3, #0
   12adc:	e5945010 	ldr	r5, [r4, #16]
   12ae0:	e5843014 	str	r3, [r4, #20]
   12ae4:	e1550003 	cmp	r5, r3
   12ae8:	0a000004 	beq	12b00 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x8c>
   12aec:	e1a00005 	mov	r0, r5
   12af0:	ebfff23d 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   12af4:	e1a00005 	mov	r0, r5
   12af8:	e3a01014 	mov	r1, #20
   12afc:	eb00613f 	bl	2b000 <operator delete(void*, unsigned int)>
   12b00:	e3a03000 	mov	r3, #0
   12b04:	e1a00004 	mov	r0, r4
   12b08:	e5843010 	str	r3, [r4, #16]
   12b0c:	ebfff2a3 	bl	f5a0 <CUSBFunction::~CUSBFunction()>
   12b10:	e1a00004 	mov	r0, r4
   12b14:	e8bd8070 	pop	{r4, r5, r6, pc}
   12b18:	eb0049e4 	bl	252b0 <CDeviceNameService::Get()>
   12b1c:	e3a03001 	mov	r3, #1
   12b20:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   12b24:	e59f1040 	ldr	r1, [pc, #64]	; 12b6c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xf8>
   12b28:	eb004a06 	bl	25348 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   12b2c:	e3a03001 	mov	r3, #1
   12b30:	e59f1038 	ldr	r1, [pc, #56]	; 12b70 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xfc>
   12b34:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12b38:	e5912000 	ldr	r2, [r1]
   12b3c:	e1a03013 	lsl	r3, r3, r0
   12b40:	e1130002 	tst	r3, r2
   12b44:	13a00000 	movne	r0, #0
   12b48:	11c23003 	bicne	r3, r2, r3
   12b4c:	15813000 	strne	r3, [r1]
   12b50:	1584002c 	strne	r0, [r4, #44]	; 0x2c
   12b54:	1affffcd 	bne	12a90 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x1c>
   12b58:	e3a020d4 	mov	r2, #212	; 0xd4
   12b5c:	e59f1010 	ldr	r1, [pc, #16]	; 12b74 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x100>
   12b60:	e59f0010 	ldr	r0, [pc, #16]	; 12b78 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x104>
   12b64:	eb00470f 	bl	247a8 <assertion_failed>
   12b68:	00042790 	.word	0x00042790
   12b6c:	000424e0 	.word	0x000424e0
   12b70:	0005ce10 	.word	0x0005ce10
   12b74:	000424e8 	.word	0x000424e8
   12b78:	000424fc 	.word	0x000424fc

00012b7c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   12b7c:	e92d4010 	push	{r4, lr}
   12b80:	e1a04000 	mov	r4, r0
   12b84:	ebffffba 	bl	12a74 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
   12b88:	e1a00004 	mov	r0, r4
   12b8c:	e3a01030 	mov	r1, #48	; 0x30
   12b90:	eb00611a 	bl	2b000 <operator delete(void*, unsigned int)>
   12b94:	e1a00004 	mov	r0, r4
   12b98:	e8bd8010 	pop	{r4, pc}

00012b9c <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
   12b9c:	e92d4010 	push	{r4, lr}
   12ba0:	e1a04000 	mov	r4, r0
   12ba4:	ebfff30f 	bl	f7e8 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   12ba8:	e3a03000 	mov	r3, #0
   12bac:	e3a00000 	mov	r0, #0
   12bb0:	e3a01000 	mov	r1, #0
   12bb4:	e59f2024 	ldr	r2, [pc, #36]	; 12be0 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x44>
   12bb8:	e1c402f0 	strd	r0, [r4, #32]
   12bbc:	e5842000 	str	r2, [r4]
   12bc0:	e1a00004 	mov	r0, r4
   12bc4:	e5843010 	str	r3, [r4, #16]
   12bc8:	e5843014 	str	r3, [r4, #20]
   12bcc:	e5843018 	str	r3, [r4, #24]
   12bd0:	e584301c 	str	r3, [r4, #28]
   12bd4:	e5843028 	str	r3, [r4, #40]	; 0x28
   12bd8:	e584302c 	str	r3, [r4, #44]	; 0x2c
   12bdc:	e8bd8010 	pop	{r4, pc}
   12be0:	00042790 	.word	0x00042790

00012be4 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
   12be4:	e590001c 	ldr	r0, [r0, #28]
   12be8:	e12fff1e 	bx	lr

00012bec <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>:
   12bec:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12bf0:	e2519000 	subs	r9, r1, #0
   12bf4:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   12bf8:	e59d5058 	ldr	r5, [sp, #88]	; 0x58
   12bfc:	e5dd805c 	ldrb	r8, [sp, #92]	; 0x5c
   12c00:	0a000058 	beq	12d68 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x17c>
   12c04:	e1a07003 	mov	r7, r3
   12c08:	e2423006 	sub	r3, r2, #6
   12c0c:	e353000a 	cmp	r3, #10
   12c10:	e1a06002 	mov	r6, r2
   12c14:	8a000057 	bhi	12d78 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x18c>
   12c18:	e2572000 	subs	r2, r7, #0
   12c1c:	13a02001 	movne	r2, #1
   12c20:	e3550000 	cmp	r5, #0
   12c24:	03a02001 	moveq	r2, #1
   12c28:	e3520000 	cmp	r2, #0
   12c2c:	0a000055 	beq	12d88 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x19c>
   12c30:	e1a04000 	mov	r4, r0
   12c34:	e3a0201f 	mov	r2, #31
   12c38:	e3a01000 	mov	r1, #0
   12c3c:	e28d0018 	add	r0, sp, #24
   12c40:	eb005cb1 	bl	29f0c <memset>
   12c44:	e3580000 	cmp	r8, #0
   12c48:	13a0e080 	movne	lr, #128	; 0x80
   12c4c:	03a0e000 	moveq	lr, #0
   12c50:	e5dd0026 	ldrb	r0, [sp, #38]	; 0x26
   12c54:	e594c018 	ldr	ip, [r4, #24]
   12c58:	e3c0301f 	bic	r3, r0, #31
   12c5c:	e206001f 	and	r0, r6, #31
   12c60:	e1800003 	orr	r0, r0, r3
   12c64:	e5dd3025 	ldrb	r3, [sp, #37]	; 0x25
   12c68:	e28cc001 	add	ip, ip, #1
   12c6c:	e1a02006 	mov	r2, r6
   12c70:	e59f61e0 	ldr	r6, [pc, #480]	; 12e58 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x26c>
   12c74:	e584c018 	str	ip, [r4, #24]
   12c78:	e3c3300f 	bic	r3, r3, #15
   12c7c:	e1a01009 	mov	r1, r9
   12c80:	e5cd0026 	strb	r0, [sp, #38]	; 0x26
   12c84:	e28d0027 	add	r0, sp, #39	; 0x27
   12c88:	e5cde024 	strb	lr, [sp, #36]	; 0x24
   12c8c:	e58dc01c 	str	ip, [sp, #28]
   12c90:	e5cd3025 	strb	r3, [sp, #37]	; 0x25
   12c94:	e58d6018 	str	r6, [sp, #24]
   12c98:	e58d5020 	str	r5, [sp, #32]
   12c9c:	eb005ee3 	bl	2a830 <memcpy>
   12ca0:	e1a00004 	mov	r0, r4
   12ca4:	ebfff343 	bl	f9b8 <CUSBFunction::GetHost() const>
   12ca8:	e2506000 	subs	r6, r0, #0
   12cac:	0a000039 	beq	12d98 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1ac>
   12cb0:	e3a09000 	mov	r9, #0
   12cb4:	e58d9000 	str	r9, [sp]
   12cb8:	e3a0301f 	mov	r3, #31
   12cbc:	e5941014 	ldr	r1, [r4, #20]
   12cc0:	e28d2018 	add	r2, sp, #24
   12cc4:	ebffff4d 	bl	12a00 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12cc8:	e1500009 	cmp	r0, r9
   12ccc:	ba00005a 	blt	12e3c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x250>
   12cd0:	e3550000 	cmp	r5, #0
   12cd4:	0a000009 	beq	12d00 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x114>
   12cd8:	e1c401d0 	ldrd	r0, [r4, #16]
   12cdc:	e3580000 	cmp	r8, #0
   12ce0:	11a01000 	movne	r1, r0
   12ce4:	e1a03005 	mov	r3, r5
   12ce8:	e1a02007 	mov	r2, r7
   12cec:	e1a00006 	mov	r0, r6
   12cf0:	e58d9000 	str	r9, [sp]
   12cf4:	ebffff41 	bl	12a00 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12cf8:	e2505000 	subs	r5, r0, #0
   12cfc:	ba000029 	blt	12da8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1bc>
   12d00:	e3a03000 	mov	r3, #0
   12d04:	e58d3000 	str	r3, [sp]
   12d08:	e1a00006 	mov	r0, r6
   12d0c:	e3a0300d 	mov	r3, #13
   12d10:	e5941010 	ldr	r1, [r4, #16]
   12d14:	e28d2008 	add	r2, sp, #8
   12d18:	ebffff38 	bl	12a00 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12d1c:	e350000d 	cmp	r0, #13
   12d20:	1a000030 	bne	12de8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1fc>
   12d24:	e59f3130 	ldr	r3, [pc, #304]	; 12e5c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x270>
   12d28:	e59d2008 	ldr	r2, [sp, #8]
   12d2c:	e1520003 	cmp	r2, r3
   12d30:	1a000025 	bne	12dcc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1e0>
   12d34:	e5943018 	ldr	r3, [r4, #24]
   12d38:	e59d200c 	ldr	r2, [sp, #12]
   12d3c:	e1520003 	cmp	r2, r3
   12d40:	1a00002f 	bne	12e04 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x218>
   12d44:	e5dd3014 	ldrb	r3, [sp, #20]
   12d48:	e3530000 	cmp	r3, #0
   12d4c:	1a00001c 	bne	12dc4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1d8>
   12d50:	e59d3010 	ldr	r3, [sp, #16]
   12d54:	e3530000 	cmp	r3, #0
   12d58:	1a000030 	bne	12e20 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x234>
   12d5c:	e1a00005 	mov	r0, r5
   12d60:	e28dd03c 	add	sp, sp, #60	; 0x3c
   12d64:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12d68:	e3a02f8e 	mov	r2, #568	; 0x238
   12d6c:	e59f10ec 	ldr	r1, [pc, #236]	; 12e60 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
   12d70:	e59f00ec 	ldr	r0, [pc, #236]	; 12e64 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   12d74:	eb00468b 	bl	247a8 <assertion_failed>
   12d78:	e59f20e8 	ldr	r2, [pc, #232]	; 12e68 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x27c>
   12d7c:	e59f10dc 	ldr	r1, [pc, #220]	; 12e60 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
   12d80:	e59f00e4 	ldr	r0, [pc, #228]	; 12e6c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x280>
   12d84:	eb004687 	bl	247a8 <assertion_failed>
   12d88:	e59f20e0 	ldr	r2, [pc, #224]	; 12e70 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x284>
   12d8c:	e59f10cc 	ldr	r1, [pc, #204]	; 12e60 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
   12d90:	e59f00dc 	ldr	r0, [pc, #220]	; 12e74 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x288>
   12d94:	eb004683 	bl	247a8 <assertion_failed>
   12d98:	e59f20d8 	ldr	r2, [pc, #216]	; 12e78 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x28c>
   12d9c:	e59f10bc 	ldr	r1, [pc, #188]	; 12e60 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
   12da0:	e59f00d4 	ldr	r0, [pc, #212]	; 12e7c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
   12da4:	eb00467f 	bl	247a8 <assertion_failed>
   12da8:	eb004f66 	bl	26b48 <CLogger::Get()>
   12dac:	e3a02001 	mov	r2, #1
   12db0:	e59f30c8 	ldr	r3, [pc, #200]	; 12e80 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x294>
   12db4:	e59f10c8 	ldr	r1, [pc, #200]	; 12e84 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12db8:	eb004ea4 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12dbc:	e3e05000 	mvn	r5, #0
   12dc0:	eaffffe5 	b	12d5c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12dc4:	e3e05000 	mvn	r5, #0
   12dc8:	eaffffe3 	b	12d5c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12dcc:	eb004f5d 	bl	26b48 <CLogger::Get()>
   12dd0:	e3a02001 	mov	r2, #1
   12dd4:	e59f30ac 	ldr	r3, [pc, #172]	; 12e88 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12dd8:	e59f10a4 	ldr	r1, [pc, #164]	; 12e84 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12ddc:	eb004e9b 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12de0:	e3e05000 	mvn	r5, #0
   12de4:	eaffffdc 	b	12d5c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12de8:	eb004f56 	bl	26b48 <CLogger::Get()>
   12dec:	e3a02001 	mov	r2, #1
   12df0:	e59f3094 	ldr	r3, [pc, #148]	; 12e8c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a0>
   12df4:	e59f1088 	ldr	r1, [pc, #136]	; 12e84 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12df8:	eb004e94 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12dfc:	e3e05000 	mvn	r5, #0
   12e00:	eaffffd5 	b	12d5c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12e04:	eb004f4f 	bl	26b48 <CLogger::Get()>
   12e08:	e3a02001 	mov	r2, #1
   12e0c:	e59f307c 	ldr	r3, [pc, #124]	; 12e90 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a4>
   12e10:	e59f106c 	ldr	r1, [pc, #108]	; 12e84 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12e14:	eb004e8d 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12e18:	e3e05000 	mvn	r5, #0
   12e1c:	eaffffce 	b	12d5c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12e20:	eb004f48 	bl	26b48 <CLogger::Get()>
   12e24:	e3a02001 	mov	r2, #1
   12e28:	e59f3064 	ldr	r3, [pc, #100]	; 12e94 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
   12e2c:	e59f1050 	ldr	r1, [pc, #80]	; 12e84 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12e30:	eb004e86 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12e34:	e3e05000 	mvn	r5, #0
   12e38:	eaffffc7 	b	12d5c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12e3c:	eb004f41 	bl	26b48 <CLogger::Get()>
   12e40:	e3a02001 	mov	r2, #1
   12e44:	e59f304c 	ldr	r3, [pc, #76]	; 12e98 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2ac>
   12e48:	e59f1034 	ldr	r1, [pc, #52]	; 12e84 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12e4c:	eb004e7f 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12e50:	e3e05000 	mvn	r5, #0
   12e54:	eaffffc0 	b	12d5c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12e58:	43425355 	.word	0x43425355
   12e5c:	53425355 	.word	0x53425355
   12e60:	000424e8 	.word	0x000424e8
   12e64:	00042528 	.word	0x00042528
   12e68:	00000239 	.word	0x00000239
   12e6c:	00042538 	.word	0x00042538
   12e70:	0000023a 	.word	0x0000023a
   12e74:	0004255c 	.word	0x0004255c
   12e78:	00000249 	.word	0x00000249
   12e7c:	0004257c 	.word	0x0004257c
   12e80:	0004259c 	.word	0x0004259c
   12e84:	000427b4 	.word	0x000427b4
   12e88:	000425c8 	.word	0x000425c8
   12e8c:	000425b4 	.word	0x000425b4
   12e90:	000425e0 	.word	0x000425e0
   12e94:	000425f4 	.word	0x000425f4
   12e98:	00042588 	.word	0x00042588

00012e9c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
   12e9c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12ea0:	e2513000 	subs	r3, r1, #0
   12ea4:	e24dd01c 	sub	sp, sp, #28
   12ea8:	0a000027 	beq	12f4c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xb0>
   12eac:	e1c062d0 	ldrd	r6, [r0, #32]
   12eb0:	e1a04002 	mov	r4, r2
   12eb4:	e59f20c4 	ldr	r2, [pc, #196]	; 12f80 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xe4>
   12eb8:	e1a01000 	mov	r1, r0
   12ebc:	e1120006 	tst	r2, r6
   12ec0:	13a01001 	movne	r1, #1
   12ec4:	03a01000 	moveq	r1, #0
   12ec8:	e3570c02 	cmp	r7, #512	; 0x200
   12ecc:	03560000 	cmpeq	r6, #0
   12ed0:	23811001 	orrcs	r1, r1, #1
   12ed4:	e3510000 	cmp	r1, #0
   12ed8:	1a00001f 	bne	12f5c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc0>
   12edc:	e014c002 	ands	ip, r4, r2
   12ee0:	e1a024a6 	lsr	r2, r6, #9
   12ee4:	e1822b87 	orr	r2, r2, r7, lsl #23
   12ee8:	1a00001b 	bne	12f5c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc0>
   12eec:	e3a05001 	mov	r5, #1
   12ef0:	e3a0e028 	mov	lr, #40	; 0x28
   12ef4:	e1a014a4 	lsr	r1, r4, #9
   12ef8:	e6bf1fb1 	rev16	r1, r1
   12efc:	e6bf2f32 	rev	r2, r2
   12f00:	e1cd20be 	strh	r2, [sp, #14]
   12f04:	e5cdc012 	strb	ip, [sp, #18]
   12f08:	e1a02822 	lsr	r2, r2, #16
   12f0c:	e5cdc015 	strb	ip, [sp, #21]
   12f10:	e6ffc071 	uxth	ip, r1
   12f14:	e1cd21b0 	strh	r2, [sp, #16]
   12f18:	e1a0c42c 	lsr	ip, ip, #8
   12f1c:	e5cd1013 	strb	r1, [sp, #19]
   12f20:	e3a0200a 	mov	r2, #10
   12f24:	e1cd40f0 	strd	r4, [sp]
   12f28:	e28d100c 	add	r1, sp, #12
   12f2c:	e5cdc014 	strb	ip, [sp, #20]
   12f30:	e1cde0bc 	strh	lr, [sp, #12]
   12f34:	ebffff2c 	bl	12bec <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12f38:	e1500004 	cmp	r0, r4
   12f3c:	1a000008 	bne	12f64 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc8>
   12f40:	e1a00004 	mov	r0, r4
   12f44:	e28dd01c 	add	sp, sp, #28
   12f48:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12f4c:	e59f2030 	ldr	r2, [pc, #48]	; 12f84 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xe8>
   12f50:	e59f1030 	ldr	r1, [pc, #48]	; 12f88 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xec>
   12f54:	e59f0030 	ldr	r0, [pc, #48]	; 12f8c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf0>
   12f58:	eb004612 	bl	247a8 <assertion_failed>
   12f5c:	e3e04000 	mvn	r4, #0
   12f60:	eafffff6 	b	12f40 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xa4>
   12f64:	eb004ef7 	bl	26b48 <CLogger::Get()>
   12f68:	e1a02005 	mov	r2, r5
   12f6c:	e59f301c 	ldr	r3, [pc, #28]	; 12f90 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf4>
   12f70:	e59f101c 	ldr	r1, [pc, #28]	; 12f94 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf8>
   12f74:	eb004e35 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12f78:	e3e04000 	mvn	r4, #0
   12f7c:	eaffffef 	b	12f40 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xa4>
   12f80:	000001ff 	.word	0x000001ff
   12f84:	000001ed 	.word	0x000001ed
   12f88:	000424e8 	.word	0x000424e8
   12f8c:	0004256c 	.word	0x0004256c
   12f90:	0004260c 	.word	0x0004260c
   12f94:	000427b4 	.word	0x000427b4

00012f98 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
   12f98:	e92d40d0 	push	{r4, r6, r7, lr}
   12f9c:	e2513000 	subs	r3, r1, #0
   12fa0:	e24dd018 	sub	sp, sp, #24
   12fa4:	0a000026 	beq	13044 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xac>
   12fa8:	e1c062d0 	ldrd	r6, [r0, #32]
   12fac:	e1a04002 	mov	r4, r2
   12fb0:	e59f20c0 	ldr	r2, [pc, #192]	; 13078 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xe0>
   12fb4:	e1a01000 	mov	r1, r0
   12fb8:	e1120006 	tst	r2, r6
   12fbc:	13a01001 	movne	r1, #1
   12fc0:	03a01000 	moveq	r1, #0
   12fc4:	e3570c02 	cmp	r7, #512	; 0x200
   12fc8:	03560000 	cmpeq	r6, #0
   12fcc:	23811001 	orrcs	r1, r1, #1
   12fd0:	e3510000 	cmp	r1, #0
   12fd4:	1a00001e 	bne	13054 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xbc>
   12fd8:	e014c002 	ands	ip, r4, r2
   12fdc:	e1a024a6 	lsr	r2, r6, #9
   12fe0:	e1822b87 	orr	r2, r2, r7, lsl #23
   12fe4:	1a00001a 	bne	13054 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xbc>
   12fe8:	e1a014a4 	lsr	r1, r4, #9
   12fec:	e6bf1fb1 	rev16	r1, r1
   12ff0:	e6bf2f32 	rev	r2, r2
   12ff4:	e88d1010 	stm	sp, {r4, ip}
   12ff8:	e6ffe071 	uxth	lr, r1
   12ffc:	e1cd20be 	strh	r2, [sp, #14]
   13000:	e5cdc012 	strb	ip, [sp, #18]
   13004:	e1a02822 	lsr	r2, r2, #16
   13008:	e5cdc015 	strb	ip, [sp, #21]
   1300c:	e59fc068 	ldr	ip, [pc, #104]	; 1307c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xe4>
   13010:	e1a0e42e 	lsr	lr, lr, #8
   13014:	e1cd21b0 	strh	r2, [sp, #16]
   13018:	e5cd1013 	strb	r1, [sp, #19]
   1301c:	e3a0200a 	mov	r2, #10
   13020:	e28d100c 	add	r1, sp, #12
   13024:	e5cde014 	strb	lr, [sp, #20]
   13028:	e1cdc0bc 	strh	ip, [sp, #12]
   1302c:	ebfffeee 	bl	12bec <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   13030:	e3500000 	cmp	r0, #0
   13034:	a1a00004 	movge	r0, r4
   13038:	ba000007 	blt	1305c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc4>
   1303c:	e28dd018 	add	sp, sp, #24
   13040:	e8bd80d0 	pop	{r4, r6, r7, pc}
   13044:	e59f2034 	ldr	r2, [pc, #52]	; 13080 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xe8>
   13048:	e59f1034 	ldr	r1, [pc, #52]	; 13084 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xec>
   1304c:	e59f0034 	ldr	r0, [pc, #52]	; 13088 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xf0>
   13050:	eb0045d4 	bl	247a8 <assertion_failed>
   13054:	e3e00000 	mvn	r0, #0
   13058:	eafffff7 	b	1303c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xa4>
   1305c:	eb004eb9 	bl	26b48 <CLogger::Get()>
   13060:	e3a02001 	mov	r2, #1
   13064:	e59f3020 	ldr	r3, [pc, #32]	; 1308c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xf4>
   13068:	e59f1020 	ldr	r1, [pc, #32]	; 13090 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xf8>
   1306c:	eb004df7 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13070:	e3e00000 	mvn	r0, #0
   13074:	eafffff0 	b	1303c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xa4>
   13078:	000001ff 	.word	0x000001ff
   1307c:	0000082a 	.word	0x0000082a
   13080:	00000212 	.word	0x00000212
   13084:	000424e8 	.word	0x000424e8
   13088:	0004256c 	.word	0x0004256c
   1308c:	0004261c 	.word	0x0004261c
   13090:	000427b4 	.word	0x000427b4

00013094 <CUSBBulkOnlyMassStorageDevice::Reset()>:
   13094:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13098:	e24dd014 	sub	sp, sp, #20
   1309c:	e1a05000 	mov	r5, r0
   130a0:	ebfff244 	bl	f9b8 <CUSBFunction::GetHost() const>
   130a4:	e2506000 	subs	r6, r0, #0
   130a8:	0a00002e 	beq	13168 <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
   130ac:	e1a00005 	mov	r0, r5
   130b0:	ebfff235 	bl	f98c <CUSBFunction::GetEndpoint0() const>
   130b4:	e3a04000 	mov	r4, #0
   130b8:	e1a01000 	mov	r1, r0
   130bc:	e3a030ff 	mov	r3, #255	; 0xff
   130c0:	e3a02021 	mov	r2, #33	; 0x21
   130c4:	e1a00006 	mov	r0, r6
   130c8:	e58d400c 	str	r4, [sp, #12]
   130cc:	e58d4008 	str	r4, [sp, #8]
   130d0:	e58d4004 	str	r4, [sp, #4]
   130d4:	e58d4000 	str	r4, [sp]
   130d8:	ebfffde2 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   130dc:	e1500004 	cmp	r0, r4
   130e0:	ba000024 	blt	13178 <CUSBBulkOnlyMassStorageDevice::Reset()+0xe4>
   130e4:	e1a00005 	mov	r0, r5
   130e8:	ebfff227 	bl	f98c <CUSBFunction::GetEndpoint0() const>
   130ec:	e3a07001 	mov	r7, #1
   130f0:	e1a01000 	mov	r1, r0
   130f4:	e1a03007 	mov	r3, r7
   130f8:	e3a02002 	mov	r2, #2
   130fc:	e1a00006 	mov	r0, r6
   13100:	e88d0090 	stm	sp, {r4, r7}
   13104:	e58d400c 	str	r4, [sp, #12]
   13108:	e58d4008 	str	r4, [sp, #8]
   1310c:	ebfffdd5 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13110:	e3500000 	cmp	r0, #0
   13114:	ba000025 	blt	131b0 <CUSBBulkOnlyMassStorageDevice::Reset()+0x11c>
   13118:	e1a00005 	mov	r0, r5
   1311c:	ebfff21a 	bl	f98c <CUSBFunction::GetEndpoint0() const>
   13120:	e3a02002 	mov	r2, #2
   13124:	e1a01000 	mov	r1, r0
   13128:	e1a03007 	mov	r3, r7
   1312c:	e1a00006 	mov	r0, r6
   13130:	e58d400c 	str	r4, [sp, #12]
   13134:	e58d4008 	str	r4, [sp, #8]
   13138:	e58d4000 	str	r4, [sp]
   1313c:	e58d2004 	str	r2, [sp, #4]
   13140:	ebfffdc8 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13144:	e3500000 	cmp	r0, #0
   13148:	ba000011 	blt	13194 <CUSBBulkOnlyMassStorageDevice::Reset()+0x100>
   1314c:	e5950010 	ldr	r0, [r5, #16]
   13150:	ebfff102 	bl	f560 <CUSBEndpoint::ResetPID()>
   13154:	e5950014 	ldr	r0, [r5, #20]
   13158:	ebfff100 	bl	f560 <CUSBEndpoint::ResetPID()>
   1315c:	e1a00004 	mov	r0, r4
   13160:	e28dd014 	add	sp, sp, #20
   13164:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13168:	e3a02fa2 	mov	r2, #648	; 0x288
   1316c:	e59f1058 	ldr	r1, [pc, #88]	; 131cc <CUSBBulkOnlyMassStorageDevice::Reset()+0x138>
   13170:	e59f0058 	ldr	r0, [pc, #88]	; 131d0 <CUSBBulkOnlyMassStorageDevice::Reset()+0x13c>
   13174:	eb00458b 	bl	247a8 <assertion_failed>
   13178:	eb004e72 	bl	26b48 <CLogger::Get()>
   1317c:	e3a02004 	mov	r2, #4
   13180:	e59f304c 	ldr	r3, [pc, #76]	; 131d4 <CUSBBulkOnlyMassStorageDevice::Reset()+0x140>
   13184:	e59f104c 	ldr	r1, [pc, #76]	; 131d8 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   13188:	eb004db0 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1318c:	e3e00000 	mvn	r0, #0
   13190:	eafffff2 	b	13160 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   13194:	eb004e6b 	bl	26b48 <CLogger::Get()>
   13198:	e3a02004 	mov	r2, #4
   1319c:	e59f3038 	ldr	r3, [pc, #56]	; 131dc <CUSBBulkOnlyMassStorageDevice::Reset()+0x148>
   131a0:	e59f1030 	ldr	r1, [pc, #48]	; 131d8 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   131a4:	eb004da9 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   131a8:	e3e00000 	mvn	r0, #0
   131ac:	eaffffeb 	b	13160 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   131b0:	eb004e64 	bl	26b48 <CLogger::Get()>
   131b4:	e3a02004 	mov	r2, #4
   131b8:	e59f3020 	ldr	r3, [pc, #32]	; 131e0 <CUSBBulkOnlyMassStorageDevice::Reset()+0x14c>
   131bc:	e59f1014 	ldr	r1, [pc, #20]	; 131d8 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   131c0:	eb004da2 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   131c4:	e3e00000 	mvn	r0, #0
   131c8:	eaffffe4 	b	13160 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   131cc:	000424e8 	.word	0x000424e8
   131d0:	0004257c 	.word	0x0004257c
   131d4:	0004262c 	.word	0x0004262c
   131d8:	000427b4 	.word	0x000427b4
   131dc:	00042660 	.word	0x00042660
   131e0:	00042640 	.word	0x00042640

000131e4 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
   131e4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   131e8:	e1a05002 	mov	r5, r2
   131ec:	e1a07000 	mov	r7, r0
   131f0:	e1a09001 	mov	r9, r1
   131f4:	e1a08002 	mov	r8, r2
   131f8:	e3a06004 	mov	r6, #4
   131fc:	e1a02005 	mov	r2, r5
   13200:	e1a01009 	mov	r1, r9
   13204:	e1a00007 	mov	r0, r7
   13208:	ebffff23 	bl	12e9c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
   1320c:	e1500005 	cmp	r0, r5
   13210:	e1a04000 	mov	r4, r0
   13214:	1a000001 	bne	13220 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x3c>
   13218:	e1a00008 	mov	r0, r8
   1321c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13220:	e1a00007 	mov	r0, r7
   13224:	ebffff9a 	bl	13094 <CUSBBulkOnlyMassStorageDevice::Reset()>
   13228:	e3500000 	cmp	r0, #0
   1322c:	1a000004 	bne	13244 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x60>
   13230:	e2566001 	subs	r6, r6, #1
   13234:	1afffff0 	bne	131fc <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x18>
   13238:	e1a08004 	mov	r8, r4
   1323c:	e1a00008 	mov	r0, r8
   13240:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13244:	e1a08000 	mov	r8, r0
   13248:	eafffff2 	b	13218 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x34>

0001324c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
   1324c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13250:	e1a05002 	mov	r5, r2
   13254:	e1a07000 	mov	r7, r0
   13258:	e1a09001 	mov	r9, r1
   1325c:	e1a08002 	mov	r8, r2
   13260:	e3a06004 	mov	r6, #4
   13264:	e1a02005 	mov	r2, r5
   13268:	e1a01009 	mov	r1, r9
   1326c:	e1a00007 	mov	r0, r7
   13270:	ebffff48 	bl	12f98 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
   13274:	e1500005 	cmp	r0, r5
   13278:	e1a04000 	mov	r4, r0
   1327c:	1a000001 	bne	13288 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x3c>
   13280:	e1a00008 	mov	r0, r8
   13284:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13288:	e1a00007 	mov	r0, r7
   1328c:	ebffff80 	bl	13094 <CUSBBulkOnlyMassStorageDevice::Reset()>
   13290:	e3500000 	cmp	r0, #0
   13294:	1a000004 	bne	132ac <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x60>
   13298:	e2566001 	subs	r6, r6, #1
   1329c:	1afffff0 	bne	13264 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x18>
   132a0:	e1a08004 	mov	r8, r4
   132a4:	e1a00008 	mov	r0, r8
   132a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   132ac:	e1a08000 	mov	r8, r0
   132b0:	eafffff2 	b	13280 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x34>

000132b4 <CUSBBulkOnlyMassStorageDevice::Configure()>:
   132b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   132b8:	e24dd068 	sub	sp, sp, #104	; 0x68
   132bc:	e1a05000 	mov	r5, r0
   132c0:	ebfff19b 	bl	f934 <CUSBFunction::GetNumEndpoints() const>
   132c4:	e3500001 	cmp	r0, #1
   132c8:	8a000004 	bhi	132e0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   132cc:	ea0000cb 	b	13600 <CUSBBulkOnlyMassStorageDevice::Configure()+0x34c>
   132d0:	e5d43003 	ldrb	r3, [r4, #3]
   132d4:	e203303f 	and	r3, r3, #63	; 0x3f
   132d8:	e3530002 	cmp	r3, #2
   132dc:	0a000029 	beq	13388 <CUSBBulkOnlyMassStorageDevice::Configure()+0xd4>
   132e0:	e3a01005 	mov	r1, #5
   132e4:	e1a00005 	mov	r0, r5
   132e8:	ebfff1bd 	bl	f9e4 <CUSBFunction::GetDescriptor(unsigned char)>
   132ec:	e2504000 	subs	r4, r0, #0
   132f0:	1afffff6 	bne	132d0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x1c>
   132f4:	e5953010 	ldr	r3, [r5, #16]
   132f8:	e1a00005 	mov	r0, r5
   132fc:	e3530000 	cmp	r3, #0
   13300:	0a0000b0 	beq	135c8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   13304:	e5953014 	ldr	r3, [r5, #20]
   13308:	e3530000 	cmp	r3, #0
   1330c:	0a0000ad 	beq	135c8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   13310:	ebfff0cb 	bl	f644 <CUSBFunction::Configure()>
   13314:	e2506000 	subs	r6, r0, #0
   13318:	0a0000b0 	beq	135e0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
   1331c:	e3a00024 	mov	r0, #36	; 0x24
   13320:	e3a06001 	mov	r6, #1
   13324:	e3a0c012 	mov	ip, #18
   13328:	e88d0041 	stm	sp, {r0, r6}
   1332c:	e1cd01b8 	strh	r0, [sp, #24]
   13330:	e3a02006 	mov	r2, #6
   13334:	e1a00005 	mov	r0, r5
   13338:	e28d3044 	add	r3, sp, #68	; 0x44
   1333c:	e28d1014 	add	r1, sp, #20
   13340:	e58dc014 	str	ip, [sp, #20]
   13344:	ebfffe28 	bl	12bec <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   13348:	e3500024 	cmp	r0, #36	; 0x24
   1334c:	1a0000b2 	bne	1361c <CUSBBulkOnlyMassStorageDevice::Configure()+0x368>
   13350:	e5dd3044 	ldrb	r3, [sp, #68]	; 0x44
   13354:	e213701f 	ands	r7, r3, #31
   13358:	03a04063 	moveq	r4, #99	; 0x63
   1335c:	0a00002a 	beq	1340c <CUSBBulkOnlyMassStorageDevice::Configure()+0x158>
   13360:	eb004df8 	bl	26b48 <CLogger::Get()>
   13364:	e5dd3044 	ldrb	r3, [sp, #68]	; 0x44
   13368:	e1a02006 	mov	r2, r6
   1336c:	e203301f 	and	r3, r3, #31
   13370:	e58d3000 	str	r3, [sp]
   13374:	e59f13b8 	ldr	r1, [pc, #952]	; 13734 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   13378:	e59f33b8 	ldr	r3, [pc, #952]	; 13738 <CUSBBulkOnlyMassStorageDevice::Configure()+0x484>
   1337c:	e1a06004 	mov	r6, r4
   13380:	eb004d32 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13384:	ea000092 	b	135d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   13388:	e1d430d2 	ldrsb	r3, [r4, #2]
   1338c:	e3530000 	cmp	r3, #0
   13390:	ba00007d 	blt	1358c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d8>
   13394:	e5953014 	ldr	r3, [r5, #20]
   13398:	e1a00005 	mov	r0, r5
   1339c:	e3530000 	cmp	r3, #0
   133a0:	1a000088 	bne	135c8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   133a4:	ebfff16e 	bl	f964 <CUSBFunction::GetDevice() const>
   133a8:	e1a01000 	mov	r1, r0
   133ac:	e3a00014 	mov	r0, #20
   133b0:	e58d100c 	str	r1, [sp, #12]
   133b4:	eb005f03 	bl	2afc8 <operator new(unsigned int)>
   133b8:	e1a06000 	mov	r6, r0
   133bc:	e1a02004 	mov	r2, r4
   133c0:	e59d100c 	ldr	r1, [sp, #12]
   133c4:	ebffefa4 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   133c8:	e5856014 	str	r6, [r5, #20]
   133cc:	eaffffc3 	b	132e0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   133d0:	e3a00012 	mov	r0, #18
   133d4:	e3a06001 	mov	r6, #1
   133d8:	e3a0c003 	mov	ip, #3
   133dc:	e88d0041 	stm	sp, {r0, r6}
   133e0:	e1cd02b8 	strh	r0, [sp, #40]	; 0x28
   133e4:	e3a02006 	mov	r2, #6
   133e8:	e1a00005 	mov	r0, r5
   133ec:	e28d3030 	add	r3, sp, #48	; 0x30
   133f0:	e28d1024 	add	r1, sp, #36	; 0x24
   133f4:	e58dc024 	str	ip, [sp, #36]	; 0x24
   133f8:	ebfffdfb 	bl	12bec <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   133fc:	e3500000 	cmp	r0, #0
   13400:	ba00008e 	blt	13640 <CUSBBulkOnlyMassStorageDevice::Configure()+0x38c>
   13404:	e2544001 	subs	r4, r4, #1
   13408:	0a00009b 	beq	1367c <CUSBBulkOnlyMassStorageDevice::Configure()+0x3c8>
   1340c:	eb005ab2 	bl	29edc <CTimer::Get()>
   13410:	e3a00064 	mov	r0, #100	; 0x64
   13414:	eb005a7b 	bl	29e08 <CTimer::SimpleMsDelay(unsigned int)>
   13418:	e3a03000 	mov	r3, #0
   1341c:	e3a02006 	mov	r2, #6
   13420:	e1a00005 	mov	r0, r5
   13424:	e58d7004 	str	r7, [sp, #4]
   13428:	e58d7000 	str	r7, [sp]
   1342c:	e28d101c 	add	r1, sp, #28
   13430:	e58d701c 	str	r7, [sp, #28]
   13434:	e1cd72b0 	strh	r7, [sp, #32]
   13438:	ebfffdeb 	bl	12bec <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   1343c:	e3500000 	cmp	r0, #0
   13440:	baffffe2 	blt	133d0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x11c>
   13444:	e3a02008 	mov	r2, #8
   13448:	e3a04001 	mov	r4, #1
   1344c:	e3a0c025 	mov	ip, #37	; 0x25
   13450:	e88d0014 	stm	sp, {r2, r4}
   13454:	e1a00005 	mov	r0, r5
   13458:	e3a0200a 	mov	r2, #10
   1345c:	e28d301c 	add	r3, sp, #28
   13460:	e28d1024 	add	r1, sp, #36	; 0x24
   13464:	e58d7028 	str	r7, [sp, #40]	; 0x28
   13468:	e1cd72bc 	strh	r7, [sp, #44]	; 0x2c
   1346c:	e58dc024 	str	ip, [sp, #36]	; 0x24
   13470:	ebfffddd 	bl	12bec <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   13474:	e3500008 	cmp	r0, #8
   13478:	1a000086 	bne	13698 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3e4>
   1347c:	e59d3020 	ldr	r3, [sp, #32]
   13480:	e3530802 	cmp	r3, #131072	; 0x20000
   13484:	e6bf6f33 	rev	r6, r3
   13488:	1a000073 	bne	1365c <CUSBBulkOnlyMassStorageDevice::Configure()+0x3a8>
   1348c:	e59d301c 	ldr	r3, [sp, #28]
   13490:	e6bf3f33 	rev	r3, r3
   13494:	e3730001 	cmn	r3, #1
   13498:	e585301c 	str	r3, [r5, #28]
   1349c:	0a00008e 	beq	136dc <CUSBBulkOnlyMassStorageDevice::Configure()+0x428>
   134a0:	e2833001 	add	r3, r3, #1
   134a4:	e585301c 	str	r3, [r5, #28]
   134a8:	eb004da6 	bl	26b48 <CLogger::Get()>
   134ac:	e595201c 	ldr	r2, [r5, #28]
   134b0:	e59f8284 	ldr	r8, [pc, #644]	; 1373c <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
   134b4:	e1a025a2 	lsr	r2, r2, #11
   134b8:	e59f3280 	ldr	r3, [pc, #640]	; 13740 <CUSBBulkOnlyMassStorageDevice::Configure()+0x48c>
   134bc:	e59f1270 	ldr	r1, [pc, #624]	; 13734 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   134c0:	e58d2000 	str	r2, [sp]
   134c4:	e3a02004 	mov	r2, #4
   134c8:	eb004ce0 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   134cc:	e1a07004 	mov	r7, r4
   134d0:	e1a03004 	mov	r3, r4
   134d4:	e5981000 	ldr	r1, [r8]
   134d8:	ea000002 	b	134e8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x234>
   134dc:	e2833001 	add	r3, r3, #1
   134e0:	e3530020 	cmp	r3, #32
   134e4:	0a000083 	beq	136f8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x444>
   134e8:	e1a02317 	lsl	r2, r7, r3
   134ec:	e1120001 	tst	r2, r1
   134f0:	1afffff9 	bne	134dc <CUSBBulkOnlyMassStorageDevice::Configure()+0x228>
   134f4:	e595002c 	ldr	r0, [r5, #44]	; 0x2c
   134f8:	e1822001 	orr	r2, r2, r1
   134fc:	e3500000 	cmp	r0, #0
   13500:	e5882000 	str	r2, [r8]
   13504:	1a000086 	bne	13724 <CUSBBulkOnlyMassStorageDevice::Configure()+0x470>
   13508:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1350c:	e28d0030 	add	r0, sp, #48	; 0x30
   13510:	eb00517d 	bl	27b0c <CString::CString()>
   13514:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   13518:	e59f1224 	ldr	r1, [pc, #548]	; 13744 <CUSBBulkOnlyMassStorageDevice::Configure()+0x490>
   1351c:	e28d0030 	add	r0, sp, #48	; 0x30
   13520:	eb0056c3 	bl	29034 <CString::Format(char const*, ...)>
   13524:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   13528:	e3530000 	cmp	r3, #0
   1352c:	1a000078 	bne	13714 <CUSBBulkOnlyMassStorageDevice::Configure()+0x460>
   13530:	e28d0030 	add	r0, sp, #48	; 0x30
   13534:	eb00518c 	bl	27b6c <CString::operator char const*() const>
   13538:	e1a02000 	mov	r2, r0
   1353c:	e3a00024 	mov	r0, #36	; 0x24
   13540:	e58d200c 	str	r2, [sp, #12]
   13544:	eb005e9f 	bl	2afc8 <operator new(unsigned int)>
   13548:	e1a04000 	mov	r4, r0
   1354c:	e1a01005 	mov	r1, r5
   13550:	e59d200c 	ldr	r2, [sp, #12]
   13554:	eb001696 	bl	18fb4 <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   13558:	e1a00004 	mov	r0, r4
   1355c:	e5854028 	str	r4, [r5, #40]	; 0x28
   13560:	eb0016d0 	bl	190a8 <CPartitionManager::Initialize()>
   13564:	e2506000 	subs	r6, r0, #0
   13568:	1a000051 	bne	136b4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x400>
   1356c:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   13570:	e5983000 	ldr	r3, [r8]
   13574:	e585602c 	str	r6, [r5, #44]	; 0x2c
   13578:	e1c37217 	bic	r7, r3, r7, lsl r2
   1357c:	e5887000 	str	r7, [r8]
   13580:	e28d0030 	add	r0, sp, #48	; 0x30
   13584:	eb00512d 	bl	27a40 <CString::~CString()>
   13588:	ea000011 	b	135d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   1358c:	e5953010 	ldr	r3, [r5, #16]
   13590:	e1a00005 	mov	r0, r5
   13594:	e3530000 	cmp	r3, #0
   13598:	1a00000a 	bne	135c8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   1359c:	ebfff0f0 	bl	f964 <CUSBFunction::GetDevice() const>
   135a0:	e1a01000 	mov	r1, r0
   135a4:	e3a00014 	mov	r0, #20
   135a8:	e58d100c 	str	r1, [sp, #12]
   135ac:	eb005e85 	bl	2afc8 <operator new(unsigned int)>
   135b0:	e1a06000 	mov	r6, r0
   135b4:	e1a02004 	mov	r2, r4
   135b8:	e59d100c 	ldr	r1, [sp, #12]
   135bc:	ebffef26 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   135c0:	e5856010 	str	r6, [r5, #16]
   135c4:	eaffff45 	b	132e0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   135c8:	e59f1164 	ldr	r1, [pc, #356]	; 13734 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   135cc:	ebfff10f 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   135d0:	e3a06000 	mov	r6, #0
   135d4:	e1a00006 	mov	r0, r6
   135d8:	e28dd068 	add	sp, sp, #104	; 0x68
   135dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   135e0:	eb004d58 	bl	26b48 <CLogger::Get()>
   135e4:	e3a02001 	mov	r2, #1
   135e8:	e59f3158 	ldr	r3, [pc, #344]	; 13748 <CUSBBulkOnlyMassStorageDevice::Configure()+0x494>
   135ec:	e59f1140 	ldr	r1, [pc, #320]	; 13734 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   135f0:	eb004c96 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   135f4:	e1a00006 	mov	r0, r6
   135f8:	e28dd068 	add	sp, sp, #104	; 0x68
   135fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13600:	e3a06000 	mov	r6, #0
   13604:	e1a00005 	mov	r0, r5
   13608:	e59f1124 	ldr	r1, [pc, #292]	; 13734 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   1360c:	ebfff0ff 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   13610:	e1a00006 	mov	r0, r6
   13614:	e28dd068 	add	sp, sp, #104	; 0x68
   13618:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1361c:	eb004d49 	bl	26b48 <CLogger::Get()>
   13620:	e1a02006 	mov	r2, r6
   13624:	e1a06004 	mov	r6, r4
   13628:	e59f311c 	ldr	r3, [pc, #284]	; 1374c <CUSBBulkOnlyMassStorageDevice::Configure()+0x498>
   1362c:	e59f1100 	ldr	r1, [pc, #256]	; 13734 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   13630:	eb004c86 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13634:	e1a00006 	mov	r0, r6
   13638:	e28dd068 	add	sp, sp, #104	; 0x68
   1363c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13640:	eb004d40 	bl	26b48 <CLogger::Get()>
   13644:	e1a02006 	mov	r2, r6
   13648:	e59f3100 	ldr	r3, [pc, #256]	; 13750 <CUSBBulkOnlyMassStorageDevice::Configure()+0x49c>
   1364c:	e59f10e0 	ldr	r1, [pc, #224]	; 13734 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   13650:	eb004c7e 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13654:	e3a06000 	mov	r6, #0
   13658:	eaffffdd 	b	135d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   1365c:	eb004d39 	bl	26b48 <CLogger::Get()>
   13660:	e58d6000 	str	r6, [sp]
   13664:	e1a02004 	mov	r2, r4
   13668:	e59f30e4 	ldr	r3, [pc, #228]	; 13754 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4a0>
   1366c:	e59f10c0 	ldr	r1, [pc, #192]	; 13734 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   13670:	eb004c76 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13674:	e3a06000 	mov	r6, #0
   13678:	eaffffd5 	b	135d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   1367c:	eb004d31 	bl	26b48 <CLogger::Get()>
   13680:	e1a02006 	mov	r2, r6
   13684:	e59f30cc 	ldr	r3, [pc, #204]	; 13758 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4a4>
   13688:	e59f10a4 	ldr	r1, [pc, #164]	; 13734 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   1368c:	e1a06004 	mov	r6, r4
   13690:	eb004c6e 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13694:	eaffffce 	b	135d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   13698:	eb004d2a 	bl	26b48 <CLogger::Get()>
   1369c:	e1a02004 	mov	r2, r4
   136a0:	e59f30b4 	ldr	r3, [pc, #180]	; 1375c <CUSBBulkOnlyMassStorageDevice::Configure()+0x4a8>
   136a4:	e59f1088 	ldr	r1, [pc, #136]	; 13734 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   136a8:	eb004c68 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   136ac:	e3a06000 	mov	r6, #0
   136b0:	eaffffc7 	b	135d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   136b4:	eb0046fd 	bl	252b0 <CDeviceNameService::Get()>
   136b8:	e1a04000 	mov	r4, r0
   136bc:	e28d0030 	add	r0, sp, #48	; 0x30
   136c0:	eb005129 	bl	27b6c <CString::operator char const*() const>
   136c4:	e1a02005 	mov	r2, r5
   136c8:	e1a01000 	mov	r1, r0
   136cc:	e3a03001 	mov	r3, #1
   136d0:	e1a00004 	mov	r0, r4
   136d4:	eb004645 	bl	24ff0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   136d8:	eaffffa8 	b	13580 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2cc>
   136dc:	eb004d19 	bl	26b48 <CLogger::Get()>
   136e0:	e1a02004 	mov	r2, r4
   136e4:	e59f3074 	ldr	r3, [pc, #116]	; 13760 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4ac>
   136e8:	e59f1044 	ldr	r1, [pc, #68]	; 13734 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   136ec:	eb004c57 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   136f0:	e3a06000 	mov	r6, #0
   136f4:	eaffffb6 	b	135d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   136f8:	eb004d12 	bl	26b48 <CLogger::Get()>
   136fc:	e3a02001 	mov	r2, #1
   13700:	e59f305c 	ldr	r3, [pc, #92]	; 13764 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4b0>
   13704:	e59f1028 	ldr	r1, [pc, #40]	; 13734 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   13708:	eb004c50 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1370c:	e3a06000 	mov	r6, #0
   13710:	eaffffaf 	b	135d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   13714:	e59f204c 	ldr	r2, [pc, #76]	; 13768 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4b4>
   13718:	e59f104c 	ldr	r1, [pc, #76]	; 1376c <CUSBBulkOnlyMassStorageDevice::Configure()+0x4b8>
   1371c:	e59f004c 	ldr	r0, [pc, #76]	; 13770 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4bc>
   13720:	eb004420 	bl	247a8 <assertion_failed>
   13724:	e59f2048 	ldr	r2, [pc, #72]	; 13774 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4c0>
   13728:	e59f103c 	ldr	r1, [pc, #60]	; 1376c <CUSBBulkOnlyMassStorageDevice::Configure()+0x4b8>
   1372c:	e59f0044 	ldr	r0, [pc, #68]	; 13778 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4c4>
   13730:	eb00441c 	bl	247a8 <assertion_failed>
   13734:	000427b4 	.word	0x000427b4
   13738:	00042698 	.word	0x00042698
   1373c:	0005ce10 	.word	0x0005ce10
   13740:	00042720 	.word	0x00042720
   13744:	00042750 	.word	0x00042750
   13748:	00041ce4 	.word	0x00041ce4
   1374c:	00042680 	.word	0x00042680
   13750:	000426b8 	.word	0x000426b8
   13754:	000426e8 	.word	0x000426e8
   13758:	00042774 	.word	0x00042774
   1375c:	000426d0 	.word	0x000426d0
   13760:	00042704 	.word	0x00042704
   13764:	000419d0 	.word	0x000419d0
   13768:	0000019d 	.word	0x0000019d
   1376c:	000424e8 	.word	0x000424e8
   13770:	00042758 	.word	0x00042758
   13774:	00000197 	.word	0x00000197
   13778:	00042738 	.word	0x00042738

0001377c <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   1377c:	e92d4070 	push	{r4, r5, r6, lr}
   13780:	e1a04000 	mov	r4, r0
   13784:	e5900020 	ldr	r0, [r0, #32]
   13788:	e59f304c 	ldr	r3, [pc, #76]	; 137dc <CUSBMIDIDevice::~CUSBMIDIDevice()+0x60>
   1378c:	e3500000 	cmp	r0, #0
   13790:	e5843000 	str	r3, [r4]
   13794:	0a000002 	beq	137a4 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x28>
   13798:	eb005e17 	bl	2affc <operator delete[](void*)>
   1379c:	e3a03000 	mov	r3, #0
   137a0:	e5843020 	str	r3, [r4, #32]
   137a4:	e5945010 	ldr	r5, [r4, #16]
   137a8:	e3550000 	cmp	r5, #0
   137ac:	0a000006 	beq	137cc <CUSBMIDIDevice::~CUSBMIDIDevice()+0x50>
   137b0:	e1a00005 	mov	r0, r5
   137b4:	ebffef0c 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   137b8:	e1a00005 	mov	r0, r5
   137bc:	e3a01014 	mov	r1, #20
   137c0:	eb005e0e 	bl	2b000 <operator delete(void*, unsigned int)>
   137c4:	e3a03000 	mov	r3, #0
   137c8:	e5843010 	str	r3, [r4, #16]
   137cc:	e1a00004 	mov	r0, r4
   137d0:	ebffef72 	bl	f5a0 <CUSBFunction::~CUSBFunction()>
   137d4:	e1a00004 	mov	r0, r4
   137d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   137dc:	000428a8 	.word	0x000428a8

000137e0 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   137e0:	e92d4010 	push	{r4, lr}
   137e4:	e1a04000 	mov	r4, r0
   137e8:	ebffffe3 	bl	1377c <CUSBMIDIDevice::~CUSBMIDIDevice()>
   137ec:	e1a00004 	mov	r0, r4
   137f0:	e3a01028 	mov	r1, #40	; 0x28
   137f4:	eb005e01 	bl	2b000 <operator delete(void*, unsigned int)>
   137f8:	e1a00004 	mov	r0, r4
   137fc:	e8bd8010 	pop	{r4, pc}

00013800 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>:
   13800:	e92d4010 	push	{r4, lr}
   13804:	e1a04000 	mov	r4, r0
   13808:	ebffeff6 	bl	f7e8 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1380c:	e3a03000 	mov	r3, #0
   13810:	e59f201c 	ldr	r2, [pc, #28]	; 13834 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)+0x34>
   13814:	e1a00004 	mov	r0, r4
   13818:	e5843010 	str	r3, [r4, #16]
   1381c:	e5842000 	str	r2, [r4]
   13820:	e5843014 	str	r3, [r4, #20]
   13824:	e5843018 	str	r3, [r4, #24]
   13828:	e5843020 	str	r3, [r4, #32]
   1382c:	e5843024 	str	r3, [r4, #36]	; 0x24
   13830:	e8bd8010 	pop	{r4, pc}
   13834:	000428a8 	.word	0x000428a8

00013838 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   13838:	e5903014 	ldr	r3, [r0, #20]
   1383c:	e92d4010 	push	{r4, lr}
   13840:	e3530000 	cmp	r3, #0
   13844:	1a000006 	bne	13864 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x2c>
   13848:	e3510000 	cmp	r1, #0
   1384c:	e5801014 	str	r1, [r0, #20]
   13850:	18bd8010 	popne	{r4, pc}
   13854:	e3a0209b 	mov	r2, #155	; 0x9b
   13858:	e59f1014 	ldr	r1, [pc, #20]	; 13874 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x3c>
   1385c:	e59f0014 	ldr	r0, [pc, #20]	; 13878 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x40>
   13860:	eb0043d0 	bl	247a8 <assertion_failed>
   13864:	e3a02099 	mov	r2, #153	; 0x99
   13868:	e59f1004 	ldr	r1, [pc, #4]	; 13874 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x3c>
   1386c:	e59f0008 	ldr	r0, [pc, #8]	; 1387c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x44>
   13870:	eb0043cc 	bl	247a8 <assertion_failed>
   13874:	000427bc 	.word	0x000427bc
   13878:	000427e0 	.word	0x000427e0
   1387c:	000427c8 	.word	0x000427c8

00013880 <CUSBMIDIDevice::StartRequest()>:
   13880:	e92d4070 	push	{r4, r5, r6, lr}
   13884:	e5903010 	ldr	r3, [r0, #16]
   13888:	e24dd008 	sub	sp, sp, #8
   1388c:	e3530000 	cmp	r3, #0
   13890:	0a000022 	beq	13920 <CUSBMIDIDevice::StartRequest()+0xa0>
   13894:	e5903020 	ldr	r3, [r0, #32]
   13898:	e1a04000 	mov	r4, r0
   1389c:	e3530000 	cmp	r3, #0
   138a0:	0a000022 	beq	13930 <CUSBMIDIDevice::StartRequest()+0xb0>
   138a4:	e5905018 	ldr	r5, [r0, #24]
   138a8:	e3550000 	cmp	r5, #0
   138ac:	1a000023 	bne	13940 <CUSBMIDIDevice::StartRequest()+0xc0>
   138b0:	e1d031bc 	ldrh	r3, [r0, #28]
   138b4:	e3530000 	cmp	r3, #0
   138b8:	0a000024 	beq	13950 <CUSBMIDIDevice::StartRequest()+0xd0>
   138bc:	e3a00028 	mov	r0, #40	; 0x28
   138c0:	eb000353 	bl	14614 <CUSBRequest::operator new(unsigned int)>
   138c4:	e1a06000 	mov	r6, r0
   138c8:	e58d5000 	str	r5, [sp]
   138cc:	e1d431bc 	ldrh	r3, [r4, #28]
   138d0:	e5942020 	ldr	r2, [r4, #32]
   138d4:	e5941010 	ldr	r1, [r4, #16]
   138d8:	eb0002cc 	bl	14410 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   138dc:	e1a03004 	mov	r3, r4
   138e0:	e1a02005 	mov	r2, r5
   138e4:	e59f1074 	ldr	r1, [pc, #116]	; 13960 <CUSBMIDIDevice::StartRequest()+0xe0>
   138e8:	e1a00006 	mov	r0, r6
   138ec:	e5846018 	str	r6, [r4, #24]
   138f0:	eb000328 	bl	14598 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   138f4:	e5940018 	ldr	r0, [r4, #24]
   138f8:	eb000340 	bl	14600 <CUSBRequest::SetCompleteOnNAK()>
   138fc:	e1a00004 	mov	r0, r4
   13900:	ebfff02c 	bl	f9b8 <CUSBFunction::GetHost() const>
   13904:	e1a02005 	mov	r2, r5
   13908:	e5903000 	ldr	r3, [r0]
   1390c:	e5941018 	ldr	r1, [r4, #24]
   13910:	e593300c 	ldr	r3, [r3, #12]
   13914:	e28dd008 	add	sp, sp, #8
   13918:	e8bd4070 	pop	{r4, r5, r6, lr}
   1391c:	e12fff13 	bx	r3
   13920:	e3a020a0 	mov	r2, #160	; 0xa0
   13924:	e59f1038 	ldr	r1, [pc, #56]	; 13964 <CUSBMIDIDevice::StartRequest()+0xe4>
   13928:	e59f0038 	ldr	r0, [pc, #56]	; 13968 <CUSBMIDIDevice::StartRequest()+0xe8>
   1392c:	eb00439d 	bl	247a8 <assertion_failed>
   13930:	e3a020a1 	mov	r2, #161	; 0xa1
   13934:	e59f1028 	ldr	r1, [pc, #40]	; 13964 <CUSBMIDIDevice::StartRequest()+0xe4>
   13938:	e59f002c 	ldr	r0, [pc, #44]	; 1396c <CUSBMIDIDevice::StartRequest()+0xec>
   1393c:	eb004399 	bl	247a8 <assertion_failed>
   13940:	e3a020a3 	mov	r2, #163	; 0xa3
   13944:	e59f1018 	ldr	r1, [pc, #24]	; 13964 <CUSBMIDIDevice::StartRequest()+0xe4>
   13948:	e59f0020 	ldr	r0, [pc, #32]	; 13970 <CUSBMIDIDevice::StartRequest()+0xf0>
   1394c:	eb004395 	bl	247a8 <assertion_failed>
   13950:	e3a020a4 	mov	r2, #164	; 0xa4
   13954:	e59f1008 	ldr	r1, [pc, #8]	; 13964 <CUSBMIDIDevice::StartRequest()+0xe4>
   13958:	e59f0014 	ldr	r0, [pc, #20]	; 13974 <CUSBMIDIDevice::StartRequest()+0xf4>
   1395c:	eb004391 	bl	247a8 <assertion_failed>
   13960:	00013bcc 	.word	0x00013bcc
   13964:	000427bc 	.word	0x000427bc
   13968:	000427f8 	.word	0x000427f8
   1396c:	0004280c 	.word	0x0004280c
   13970:	00042444 	.word	0x00042444
   13974:	00042824 	.word	0x00042824

00013978 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)>:
   13978:	e3520000 	cmp	r2, #0
   1397c:	e92d4010 	push	{r4, lr}
   13980:	0a000007 	beq	139a4 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x2c>
   13984:	e5923024 	ldr	r3, [r2, #36]	; 0x24
   13988:	e1500003 	cmp	r0, r3
   1398c:	1a000008 	bne	139b4 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x3c>
   13990:	e8bd4010 	pop	{r4, lr}
   13994:	e3a03000 	mov	r3, #0
   13998:	e1a00002 	mov	r0, r2
   1399c:	e5823024 	str	r3, [r2, #36]	; 0x24
   139a0:	eaffffb6 	b	13880 <CUSBMIDIDevice::StartRequest()>
   139a4:	e3a020f0 	mov	r2, #240	; 0xf0
   139a8:	e59f1014 	ldr	r1, [pc, #20]	; 139c4 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
   139ac:	e59f0014 	ldr	r0, [pc, #20]	; 139c8 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x50>
   139b0:	eb00437c 	bl	247a8 <assertion_failed>
   139b4:	e3a020e7 	mov	r2, #231	; 0xe7
   139b8:	e59f1004 	ldr	r1, [pc, #4]	; 139c4 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
   139bc:	e59f0008 	ldr	r0, [pc, #8]	; 139cc <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x54>
   139c0:	eb004378 	bl	247a8 <assertion_failed>
   139c4:	000427bc 	.word	0x000427bc
   139c8:	00040b44 	.word	0x00040b44
   139cc:	00042838 	.word	0x00042838

000139d0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>:
   139d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   139d4:	e3510000 	cmp	r1, #0
   139d8:	e24dd008 	sub	sp, sp, #8
   139dc:	0a000058 	beq	13b44 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x174>
   139e0:	e5905018 	ldr	r5, [r0, #24]
   139e4:	e1a04000 	mov	r4, r0
   139e8:	e1550001 	cmp	r5, r1
   139ec:	1a000058 	bne	13b54 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x184>
   139f0:	e1a00005 	mov	r0, r5
   139f4:	eb0002b4 	bl	144cc <CUSBRequest::GetStatus() const>
   139f8:	e3500000 	cmp	r0, #0
   139fc:	1a000017 	bne	13a60 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x90>
   13a00:	e5945018 	ldr	r5, [r4, #24]
   13a04:	e3550000 	cmp	r5, #0
   13a08:	0a000006 	beq	13a28 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   13a0c:	e1a00005 	mov	r0, r5
   13a10:	eb00029e 	bl	14490 <CUSBRequest::~CUSBRequest()>
   13a14:	e1a00005 	mov	r0, r5
   13a18:	e3a01028 	mov	r1, #40	; 0x28
   13a1c:	eb000311 	bl	14668 <CUSBRequest::operator delete(void*, unsigned int)>
   13a20:	e3a03000 	mov	r3, #0
   13a24:	e5843018 	str	r3, [r4, #24]
   13a28:	e5945024 	ldr	r5, [r4, #36]	; 0x24
   13a2c:	e3550000 	cmp	r5, #0
   13a30:	1a00003f 	bne	13b34 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x164>
   13a34:	eb005928 	bl	29edc <CTimer::Get()>
   13a38:	e1a03005 	mov	r3, r5
   13a3c:	e3a01001 	mov	r1, #1
   13a40:	e59f2164 	ldr	r2, [pc, #356]	; 13bac <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1dc>
   13a44:	e58d4000 	str	r4, [sp]
   13a48:	eb005761 	bl	297d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   13a4c:	e3500000 	cmp	r0, #0
   13a50:	e5840024 	str	r0, [r4, #36]	; 0x24
   13a54:	0a000042 	beq	13b64 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x194>
   13a58:	e28dd008 	add	sp, sp, #8
   13a5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13a60:	e1a00005 	mov	r0, r5
   13a64:	eb00029a 	bl	144d4 <CUSBRequest::GetResultLength() const>
   13a68:	e2108003 	ands	r8, r0, #3
   13a6c:	1affffe3 	bne	13a00 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x30>
   13a70:	e5946020 	ldr	r6, [r4, #32]
   13a74:	e3560000 	cmp	r6, #0
   13a78:	0a00003d 	beq	13b74 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a4>
   13a7c:	e1a00005 	mov	r0, r5
   13a80:	eb000293 	bl	144d4 <CUSBRequest::GetResultLength() const>
   13a84:	e5945020 	ldr	r5, [r4, #32]
   13a88:	e0860000 	add	r0, r6, r0
   13a8c:	e1500005 	cmp	r0, r5
   13a90:	9a00003b 	bls	13b84 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b4>
   13a94:	e1e06005 	mvn	r6, r5
   13a98:	e0806006 	add	r6, r0, r6
   13a9c:	e2853005 	add	r3, r5, #5
   13aa0:	e3c66003 	bic	r6, r6, #3
   13aa4:	e59f7104 	ldr	r7, [pc, #260]	; 13bb0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e0>
   13aa8:	e0866003 	add	r6, r6, r3
   13aac:	e2855001 	add	r5, r5, #1
   13ab0:	e5550001 	ldrb	r0, [r5, #-1]
   13ab4:	e3500000 	cmp	r0, #0
   13ab8:	0a00000a 	beq	13ae8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x118>
   13abc:	e5948014 	ldr	r8, [r4, #20]
   13ac0:	e3580000 	cmp	r8, #0
   13ac4:	03a08001 	moveq	r8, #1
   13ac8:	0a000006 	beq	13ae8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x118>
   13acc:	e200300f 	and	r3, r0, #15
   13ad0:	e0873103 	add	r3, r7, r3, lsl #2
   13ad4:	e1a01005 	mov	r1, r5
   13ad8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   13adc:	e1a00220 	lsr	r0, r0, #4
   13ae0:	e12fff38 	blx	r8
   13ae4:	e3a08001 	mov	r8, #1
   13ae8:	e2855004 	add	r5, r5, #4
   13aec:	e1560005 	cmp	r6, r5
   13af0:	1affffee 	bne	13ab0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xe0>
   13af4:	e5945018 	ldr	r5, [r4, #24]
   13af8:	e3550000 	cmp	r5, #0
   13afc:	0a000004 	beq	13b14 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x144>
   13b00:	e1a00005 	mov	r0, r5
   13b04:	eb000261 	bl	14490 <CUSBRequest::~CUSBRequest()>
   13b08:	e1a00005 	mov	r0, r5
   13b0c:	e3a01028 	mov	r1, #40	; 0x28
   13b10:	eb0002d4 	bl	14668 <CUSBRequest::operator delete(void*, unsigned int)>
   13b14:	e3a03000 	mov	r3, #0
   13b18:	e1580003 	cmp	r8, r3
   13b1c:	e5843018 	str	r3, [r4, #24]
   13b20:	0affffc0 	beq	13a28 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   13b24:	e1a00004 	mov	r0, r4
   13b28:	e28dd008 	add	sp, sp, #8
   13b2c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   13b30:	eaffff52 	b	13880 <CUSBMIDIDevice::StartRequest()>
   13b34:	e3a020d7 	mov	r2, #215	; 0xd7
   13b38:	e59f1074 	ldr	r1, [pc, #116]	; 13bb4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e4>
   13b3c:	e59f0074 	ldr	r0, [pc, #116]	; 13bb8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e8>
   13b40:	eb004318 	bl	247a8 <assertion_failed>
   13b44:	e3a020b0 	mov	r2, #176	; 0xb0
   13b48:	e59f1064 	ldr	r1, [pc, #100]	; 13bb4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e4>
   13b4c:	e59f0068 	ldr	r0, [pc, #104]	; 13bbc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1ec>
   13b50:	eb004314 	bl	247a8 <assertion_failed>
   13b54:	e3a020b1 	mov	r2, #177	; 0xb1
   13b58:	e59f1054 	ldr	r1, [pc, #84]	; 13bb4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e4>
   13b5c:	e59f005c 	ldr	r0, [pc, #92]	; 13bc0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1f0>
   13b60:	eb004310 	bl	247a8 <assertion_failed>
   13b64:	e3a020d9 	mov	r2, #217	; 0xd9
   13b68:	e59f1044 	ldr	r1, [pc, #68]	; 13bb4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e4>
   13b6c:	e59f0050 	ldr	r0, [pc, #80]	; 13bc4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1f4>
   13b70:	eb00430c 	bl	247a8 <assertion_failed>
   13b74:	e3a020b8 	mov	r2, #184	; 0xb8
   13b78:	e59f1034 	ldr	r1, [pc, #52]	; 13bb4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e4>
   13b7c:	e59f0044 	ldr	r0, [pc, #68]	; 13bc8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1f8>
   13b80:	eb004308 	bl	247a8 <assertion_failed>
   13b84:	e5945018 	ldr	r5, [r4, #24]
   13b88:	e3550000 	cmp	r5, #0
   13b8c:	0affffa5 	beq	13a28 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   13b90:	e1a00005 	mov	r0, r5
   13b94:	eb00023d 	bl	14490 <CUSBRequest::~CUSBRequest()>
   13b98:	e1a00005 	mov	r0, r5
   13b9c:	e3a01028 	mov	r1, #40	; 0x28
   13ba0:	eb0002b0 	bl	14668 <CUSBRequest::operator delete(void*, unsigned int)>
   13ba4:	e5848018 	str	r8, [r4, #24]
   13ba8:	eaffff9e 	b	13a28 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   13bac:	00013978 	.word	0x00013978
   13bb0:	000428a0 	.word	0x000428a0
   13bb4:	000427bc 	.word	0x000427bc
   13bb8:	0004284c 	.word	0x0004284c
   13bbc:	00040c30 	.word	0x00040c30
   13bc0:	00042468 	.word	0x00042468
   13bc4:	0004285c 	.word	0x0004285c
   13bc8:	0004280c 	.word	0x0004280c

00013bcc <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   13bcc:	e3520000 	cmp	r2, #0
   13bd0:	0a000002 	beq	13be0 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   13bd4:	e1a01000 	mov	r1, r0
   13bd8:	e1a00002 	mov	r0, r2
   13bdc:	eaffff7b 	b	139d0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   13be0:	e3a020e0 	mov	r2, #224	; 0xe0
   13be4:	e92d4010 	push	{r4, lr}
   13be8:	e59f1004 	ldr	r1, [pc, #4]	; 13bf4 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   13bec:	e59f0004 	ldr	r0, [pc, #4]	; 13bf8 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   13bf0:	eb0042ec 	bl	247a8 <assertion_failed>
   13bf4:	000427bc 	.word	0x000427bc
   13bf8:	00040b44 	.word	0x00040b44

00013bfc <CUSBMIDIDevice::TimerHandler(unsigned int)>:
   13bfc:	e5902024 	ldr	r2, [r0, #36]	; 0x24
   13c00:	e1520001 	cmp	r2, r1
   13c04:	1a000002 	bne	13c14 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x18>
   13c08:	e3a02000 	mov	r2, #0
   13c0c:	e5802024 	str	r2, [r0, #36]	; 0x24
   13c10:	eaffff1a 	b	13880 <CUSBMIDIDevice::StartRequest()>
   13c14:	e3a020e7 	mov	r2, #231	; 0xe7
   13c18:	e92d4010 	push	{r4, lr}
   13c1c:	e59f1004 	ldr	r1, [pc, #4]	; 13c28 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x2c>
   13c20:	e59f0004 	ldr	r0, [pc, #4]	; 13c2c <CUSBMIDIDevice::TimerHandler(unsigned int)+0x30>
   13c24:	eb0042df 	bl	247a8 <assertion_failed>
   13c28:	000427bc 	.word	0x000427bc
   13c2c:	00042838 	.word	0x00042838

00013c30 <CUSBMIDIDevice::Configure()>:
   13c30:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13c34:	e24dd01c 	sub	sp, sp, #28
   13c38:	e1a05000 	mov	r5, r0
   13c3c:	ebffef3c 	bl	f934 <CUSBFunction::GetNumEndpoints() const>
   13c40:	e2506000 	subs	r6, r0, #0
   13c44:	e1a00005 	mov	r0, r5
   13c48:	0a000042 	beq	13d58 <CUSBMIDIDevice::Configure()+0x128>
   13c4c:	ebffef44 	bl	f964 <CUSBFunction::GetDevice() const>
   13c50:	ebffe9f1 	bl	e41c <CUSBDevice::GetDeviceDescriptor() const>
   13c54:	e3500000 	cmp	r0, #0
   13c58:	0a000073 	beq	13e2c <CUSBMIDIDevice::Configure()+0x1fc>
   13c5c:	e5d03008 	ldrb	r3, [r0, #8]
   13c60:	e5d01009 	ldrb	r1, [r0, #9]
   13c64:	e59f21d0 	ldr	r2, [pc, #464]	; 13e3c <CUSBMIDIDevice::Configure()+0x20c>
   13c68:	e1833401 	orr	r3, r3, r1, lsl #8
   13c6c:	e1530002 	cmp	r3, r2
   13c70:	05d0600a 	ldrbeq	r6, [r0, #10]
   13c74:	05d0200b 	ldrbeq	r2, [r0, #11]
   13c78:	059f31c0 	ldreq	r3, [pc, #448]	; 13e40 <CUSBMIDIDevice::Configure()+0x210>
   13c7c:	01866402 	orreq	r6, r6, r2, lsl #8
   13c80:	00466003 	subeq	r6, r6, r3
   13c84:	016f6f16 	clzeq	r6, r6
   13c88:	13a06000 	movne	r6, #0
   13c8c:	01a062a6 	lsreq	r6, r6, #5
   13c90:	e3a01005 	mov	r1, #5
   13c94:	e1a00005 	mov	r0, r5
   13c98:	ebffef51 	bl	f9e4 <CUSBFunction::GetDescriptor(unsigned char)>
   13c9c:	e2504000 	subs	r4, r0, #0
   13ca0:	0a000031 	beq	13d6c <CUSBMIDIDevice::Configure()+0x13c>
   13ca4:	e1d430d2 	ldrsb	r3, [r4, #2]
   13ca8:	e3530000 	cmp	r3, #0
   13cac:	aafffff7 	bge	13c90 <CUSBMIDIDevice::Configure()+0x60>
   13cb0:	e5d43003 	ldrb	r3, [r4, #3]
   13cb4:	e203303f 	and	r3, r3, #63	; 0x3f
   13cb8:	e3530002 	cmp	r3, #2
   13cbc:	1afffff3 	bne	13c90 <CUSBMIDIDevice::Configure()+0x60>
   13cc0:	e3560000 	cmp	r6, #0
   13cc4:	0a000019 	beq	13d30 <CUSBMIDIDevice::Configure()+0x100>
   13cc8:	e5953010 	ldr	r3, [r5, #16]
   13ccc:	e3530000 	cmp	r3, #0
   13cd0:	1a000050 	bne	13e18 <CUSBMIDIDevice::Configure()+0x1e8>
   13cd4:	e1a00005 	mov	r0, r5
   13cd8:	ebffef21 	bl	f964 <CUSBFunction::GetDevice() const>
   13cdc:	e1a01000 	mov	r1, r0
   13ce0:	e3a00014 	mov	r0, #20
   13ce4:	e58d1004 	str	r1, [sp, #4]
   13ce8:	eb005cb6 	bl	2afc8 <operator new(unsigned int)>
   13cec:	e1a07000 	mov	r7, r0
   13cf0:	e1a02004 	mov	r2, r4
   13cf4:	e59d1004 	ldr	r1, [sp, #4]
   13cf8:	ebffed57 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13cfc:	e5857010 	str	r7, [r5, #16]
   13d00:	e5d40004 	ldrb	r0, [r4, #4]
   13d04:	e5d42005 	ldrb	r2, [r4, #5]
   13d08:	e5953020 	ldr	r3, [r5, #32]
   13d0c:	e1800402 	orr	r0, r0, r2, lsl #8
   13d10:	e3c00003 	bic	r0, r0, #3
   13d14:	e6ff0070 	uxth	r0, r0
   13d18:	e3530000 	cmp	r3, #0
   13d1c:	e1c501bc 	strh	r0, [r5, #28]
   13d20:	1a000038 	bne	13e08 <CUSBMIDIDevice::Configure()+0x1d8>
   13d24:	eb005cad 	bl	2afe0 <operator new[](unsigned int)>
   13d28:	e5850020 	str	r0, [r5, #32]
   13d2c:	eaffffd7 	b	13c90 <CUSBMIDIDevice::Configure()+0x60>
   13d30:	e3a01025 	mov	r1, #37	; 0x25
   13d34:	e1a00005 	mov	r0, r5
   13d38:	ebffef29 	bl	f9e4 <CUSBFunction::GetDescriptor(unsigned char)>
   13d3c:	e3500000 	cmp	r0, #0
   13d40:	0affffd2 	beq	13c90 <CUSBMIDIDevice::Configure()+0x60>
   13d44:	e5d43000 	ldrb	r3, [r4]
   13d48:	e0843003 	add	r3, r4, r3
   13d4c:	e1500003 	cmp	r0, r3
   13d50:	1affffce 	bne	13c90 <CUSBMIDIDevice::Configure()+0x60>
   13d54:	eaffffdb 	b	13cc8 <CUSBMIDIDevice::Configure()+0x98>
   13d58:	e59f10e4 	ldr	r1, [pc, #228]	; 13e44 <CUSBMIDIDevice::Configure()+0x214>
   13d5c:	ebffef2b 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   13d60:	e1a00006 	mov	r0, r6
   13d64:	e28dd01c 	add	sp, sp, #28
   13d68:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13d6c:	e5956010 	ldr	r6, [r5, #16]
   13d70:	e1a00005 	mov	r0, r5
   13d74:	e3560000 	cmp	r6, #0
   13d78:	0afffff6 	beq	13d58 <CUSBMIDIDevice::Configure()+0x128>
   13d7c:	ebffee30 	bl	f644 <CUSBFunction::Configure()>
   13d80:	e2506000 	subs	r6, r0, #0
   13d84:	0a000019 	beq	13df0 <CUSBMIDIDevice::Configure()+0x1c0>
   13d88:	e28d0008 	add	r0, sp, #8
   13d8c:	eb004f5e 	bl	27b0c <CString::CString()>
   13d90:	e59f30b0 	ldr	r3, [pc, #176]	; 13e48 <CUSBMIDIDevice::Configure()+0x218>
   13d94:	e59f10b0 	ldr	r1, [pc, #176]	; 13e4c <CUSBMIDIDevice::Configure()+0x21c>
   13d98:	e5932000 	ldr	r2, [r3]
   13d9c:	e28d0008 	add	r0, sp, #8
   13da0:	e282c001 	add	ip, r2, #1
   13da4:	e583c000 	str	ip, [r3]
   13da8:	eb0054a1 	bl	29034 <CString::Format(char const*, ...)>
   13dac:	eb00453f 	bl	252b0 <CDeviceNameService::Get()>
   13db0:	e1a06000 	mov	r6, r0
   13db4:	e28d0008 	add	r0, sp, #8
   13db8:	eb004f6b 	bl	27b6c <CString::operator char const*() const>
   13dbc:	e1a03004 	mov	r3, r4
   13dc0:	e1a01000 	mov	r1, r0
   13dc4:	e1a02005 	mov	r2, r5
   13dc8:	e1a00006 	mov	r0, r6
   13dcc:	eb004487 	bl	24ff0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   13dd0:	e1a00005 	mov	r0, r5
   13dd4:	ebfffea9 	bl	13880 <CUSBMIDIDevice::StartRequest()>
   13dd8:	e1a06000 	mov	r6, r0
   13ddc:	e28d0008 	add	r0, sp, #8
   13de0:	eb004f16 	bl	27a40 <CString::~CString()>
   13de4:	e1a00006 	mov	r0, r6
   13de8:	e28dd01c 	add	sp, sp, #28
   13dec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13df0:	eb004b54 	bl	26b48 <CLogger::Get()>
   13df4:	e3a02001 	mov	r2, #1
   13df8:	e59f3050 	ldr	r3, [pc, #80]	; 13e50 <CUSBMIDIDevice::Configure()+0x220>
   13dfc:	e59f1040 	ldr	r1, [pc, #64]	; 13e44 <CUSBMIDIDevice::Configure()+0x214>
   13e00:	eb004a92 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13e04:	eaffffd5 	b	13d60 <CUSBMIDIDevice::Configure()+0x130>
   13e08:	e3a0207d 	mov	r2, #125	; 0x7d
   13e0c:	e59f1040 	ldr	r1, [pc, #64]	; 13e54 <CUSBMIDIDevice::Configure()+0x224>
   13e10:	e59f0040 	ldr	r0, [pc, #64]	; 13e58 <CUSBMIDIDevice::Configure()+0x228>
   13e14:	eb004263 	bl	247a8 <assertion_failed>
   13e18:	e1a00005 	mov	r0, r5
   13e1c:	e59f1020 	ldr	r1, [pc, #32]	; 13e44 <CUSBMIDIDevice::Configure()+0x214>
   13e20:	ebffeefa 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   13e24:	e3a06000 	mov	r6, #0
   13e28:	eaffffcc 	b	13d60 <CUSBMIDIDevice::Configure()+0x130>
   13e2c:	e3a02051 	mov	r2, #81	; 0x51
   13e30:	e59f101c 	ldr	r1, [pc, #28]	; 13e54 <CUSBMIDIDevice::Configure()+0x224>
   13e34:	e59f0020 	ldr	r0, [pc, #32]	; 13e5c <CUSBMIDIDevice::Configure()+0x22c>
   13e38:	eb00425a 	bl	247a8 <assertion_failed>
   13e3c:	00000582 	.word	0x00000582
   13e40:	0000012a 	.word	0x0000012a
   13e44:	0004290c 	.word	0x0004290c
   13e48:	00049fa4 	.word	0x00049fa4
   13e4c:	00042898 	.word	0x00042898
   13e50:	00041ce4 	.word	0x00041ce4
   13e54:	000427bc 	.word	0x000427bc
   13e58:	00042880 	.word	0x00042880
   13e5c:	0004286c 	.word	0x0004286c

00013e60 <CUSBMouseDevice::~CUSBMouseDevice()>:
   13e60:	e92d4010 	push	{r4, lr}
   13e64:	e1a04000 	mov	r4, r0
   13e68:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   13e6c:	e59f3044 	ldr	r3, [pc, #68]	; 13eb8 <CUSBMouseDevice::~CUSBMouseDevice()+0x58>
   13e70:	e3500000 	cmp	r0, #0
   13e74:	e5843000 	str	r3, [r4]
   13e78:	0a000002 	beq	13e88 <CUSBMouseDevice::~CUSBMouseDevice()+0x28>
   13e7c:	e5903000 	ldr	r3, [r0]
   13e80:	e5933004 	ldr	r3, [r3, #4]
   13e84:	e12fff33 	blx	r3
   13e88:	e3a03000 	mov	r3, #0
   13e8c:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   13e90:	e5843024 	str	r3, [r4, #36]	; 0x24
   13e94:	e1500003 	cmp	r0, r3
   13e98:	0a000000 	beq	13ea0 <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   13e9c:	eb005c56 	bl	2affc <operator delete[](void*)>
   13ea0:	e3a03000 	mov	r3, #0
   13ea4:	e1a00004 	mov	r0, r4
   13ea8:	e5843028 	str	r3, [r4, #40]	; 0x28
   13eac:	ebfff88d 	bl	120e8 <CUSBHIDDevice::~CUSBHIDDevice()>
   13eb0:	e1a00004 	mov	r0, r4
   13eb4:	e8bd8010 	pop	{r4, pc}
   13eb8:	0004291c 	.word	0x0004291c

00013ebc <CUSBMouseDevice::~CUSBMouseDevice()>:
   13ebc:	e92d4010 	push	{r4, lr}
   13ec0:	e1a04000 	mov	r4, r0
   13ec4:	ebffffe5 	bl	13e60 <CUSBMouseDevice::~CUSBMouseDevice()>
   13ec8:	e1a00004 	mov	r0, r4
   13ecc:	e3a01030 	mov	r1, #48	; 0x30
   13ed0:	eb005c4a 	bl	2b000 <operator delete(void*, unsigned int)>
   13ed4:	e1a00004 	mov	r0, r4
   13ed8:	e8bd8010 	pop	{r4, pc}

00013edc <CUSBMouseDevice::Configure()>:
   13edc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13ee0:	e3a01021 	mov	r1, #33	; 0x21
   13ee4:	e24dd01c 	sub	sp, sp, #28
   13ee8:	e1a04000 	mov	r4, r0
   13eec:	ebffeebc 	bl	f9e4 <CUSBFunction::GetDescriptor(unsigned char)>
   13ef0:	e2505000 	subs	r5, r0, #0
   13ef4:	0a000003 	beq	13f08 <CUSBMouseDevice::Configure()+0x2c>
   13ef8:	e5d50007 	ldrb	r0, [r5, #7]
   13efc:	e5d53008 	ldrb	r3, [r5, #8]
   13f00:	e1900403 	orrs	r0, r0, r3, lsl #8
   13f04:	1a000005 	bne	13f20 <CUSBMouseDevice::Configure()+0x44>
   13f08:	e1a00004 	mov	r0, r4
   13f0c:	e59f10f4 	ldr	r1, [pc, #244]	; 14008 <CUSBMouseDevice::Configure()+0x12c>
   13f10:	ebffeebe 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   13f14:	e3a00000 	mov	r0, #0
   13f18:	e28dd01c 	add	sp, sp, #28
   13f1c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13f20:	e1c402bc 	strh	r0, [r4, #44]	; 0x2c
   13f24:	eb005c2d 	bl	2afe0 <operator new[](unsigned int)>
   13f28:	e1a03000 	mov	r3, r0
   13f2c:	e1a00004 	mov	r0, r4
   13f30:	e5843028 	str	r3, [r4, #40]	; 0x28
   13f34:	ebffee9f 	bl	f9b8 <CUSBFunction::GetHost() const>
   13f38:	e1a06000 	mov	r6, r0
   13f3c:	e1a00004 	mov	r0, r4
   13f40:	ebffee91 	bl	f98c <CUSBFunction::GetEndpoint0() const>
   13f44:	e1a01000 	mov	r1, r0
   13f48:	e5d52006 	ldrb	r2, [r5, #6]
   13f4c:	e1a00004 	mov	r0, r4
   13f50:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   13f54:	e1d472bc 	ldrh	r7, [r4, #44]	; 0x2c
   13f58:	e58d1014 	str	r1, [sp, #20]
   13f5c:	e58d2010 	str	r2, [sp, #16]
   13f60:	ebffeef0 	bl	fb28 <CUSBFunction::GetInterfaceNumber() const>
   13f64:	e3a0c081 	mov	ip, #129	; 0x81
   13f68:	e6ff3070 	uxth	r3, r0
   13f6c:	e58d300c 	str	r3, [sp, #12]
   13f70:	e1a00006 	mov	r0, r6
   13f74:	e3a03000 	mov	r3, #0
   13f78:	e88d00a0 	stm	sp, {r5, r7}
   13f7c:	e59d1014 	ldr	r1, [sp, #20]
   13f80:	e59d2010 	ldr	r2, [sp, #16]
   13f84:	e58dc008 	str	ip, [sp, #8]
   13f88:	ebfffa68 	bl	12930 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   13f8c:	e1d432bc 	ldrh	r3, [r4, #44]	; 0x2c
   13f90:	e1500003 	cmp	r0, r3
   13f94:	0a000007 	beq	13fb8 <CUSBMouseDevice::Configure()+0xdc>
   13f98:	eb004aea 	bl	26b48 <CLogger::Get()>
   13f9c:	e3a02001 	mov	r2, #1
   13fa0:	e59f3064 	ldr	r3, [pc, #100]	; 1400c <CUSBMouseDevice::Configure()+0x130>
   13fa4:	e59f105c 	ldr	r1, [pc, #92]	; 14008 <CUSBMouseDevice::Configure()+0x12c>
   13fa8:	eb004a28 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13fac:	e3a00000 	mov	r0, #0
   13fb0:	e28dd01c 	add	sp, sp, #28
   13fb4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13fb8:	e3a01000 	mov	r1, #0
   13fbc:	e1a00004 	mov	r0, r4
   13fc0:	ebfff873 	bl	12194 <CUSBHIDDevice::Configure(unsigned int)>
   13fc4:	e3500000 	cmp	r0, #0
   13fc8:	0a000008 	beq	13ff0 <CUSBMouseDevice::Configure()+0x114>
   13fcc:	e3a00028 	mov	r0, #40	; 0x28
   13fd0:	eb005bfc 	bl	2afc8 <operator new(unsigned int)>
   13fd4:	e1a05000 	mov	r5, r0
   13fd8:	eb001287 	bl	189fc <CMouseDevice::CMouseDevice()>
   13fdc:	e1a00004 	mov	r0, r4
   13fe0:	e5845024 	str	r5, [r4, #36]	; 0x24
   13fe4:	e28dd01c 	add	sp, sp, #28
   13fe8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   13fec:	eafff98b 	b	12620 <CUSBHIDDevice::StartRequest()>
   13ff0:	eb004ad4 	bl	26b48 <CLogger::Get()>
   13ff4:	e3a02001 	mov	r2, #1
   13ff8:	e59f3010 	ldr	r3, [pc, #16]	; 14010 <CUSBMouseDevice::Configure()+0x134>
   13ffc:	e59f1004 	ldr	r1, [pc, #4]	; 14008 <CUSBMouseDevice::Configure()+0x12c>
   14000:	eb004a12 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14004:	eaffffc2 	b	13f14 <CUSBMouseDevice::Configure()+0x38>
   14008:	00042944 	.word	0x00042944
   1400c:	00041fcc 	.word	0x00041fcc
   14010:	00040ac0 	.word	0x00040ac0

00014014 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   14014:	e2422003 	sub	r2, r2, #3
   14018:	e16f2f12 	clz	r2, r2
   1401c:	e3510000 	cmp	r1, #0
   14020:	e1a022a2 	lsr	r2, r2, #5
   14024:	03a02000 	moveq	r2, #0
   14028:	e3520000 	cmp	r2, #0
   1402c:	e1a02001 	mov	r2, r1
   14030:	012fff1e 	bxeq	lr
   14034:	e5d13000 	ldrb	r3, [r1]
   14038:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1403c:	e3130002 	tst	r3, #2
   14040:	e2031001 	and	r1, r3, #1
   14044:	13811002 	orrne	r1, r1, #2
   14048:	e3130004 	tst	r3, #4
   1404c:	13811004 	orrne	r1, r1, #4
   14050:	e3500000 	cmp	r0, #0
   14054:	012fff1e 	bxeq	lr
   14058:	e1d230d2 	ldrsb	r3, [r2, #2]
   1405c:	e1d220d1 	ldrsb	r2, [r2, #1]
   14060:	ea00129f 	b	18ae4 <CMouseDevice::ReportHandler(unsigned int, int, int)>

00014064 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   14064:	e92d4010 	push	{r4, lr}
   14068:	e3a02003 	mov	r2, #3
   1406c:	e1a04000 	mov	r4, r0
   14070:	ebfff806 	bl	12090 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   14074:	e3a03000 	mov	r3, #0
   14078:	e59f2010 	ldr	r2, [pc, #16]	; 14090 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x2c>
   1407c:	e1a00004 	mov	r0, r4
   14080:	e5843024 	str	r3, [r4, #36]	; 0x24
   14084:	e5842000 	str	r2, [r4]
   14088:	e5843028 	str	r3, [r4, #40]	; 0x28
   1408c:	e8bd8010 	pop	{r4, pc}
   14090:	0004291c 	.word	0x0004291c

00014094 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   14094:	e92d4070 	push	{r4, r5, r6, lr}
   14098:	e5905018 	ldr	r5, [r0, #24]
   1409c:	e59f3060 	ldr	r3, [pc, #96]	; 14104 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x70>
   140a0:	e3550000 	cmp	r5, #0
   140a4:	e1a04000 	mov	r4, r0
   140a8:	e5803000 	str	r3, [r0]
   140ac:	0a000004 	beq	140c4 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x30>
   140b0:	e1a00005 	mov	r0, r5
   140b4:	ebffeccc 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   140b8:	e1a00005 	mov	r0, r5
   140bc:	e3a01014 	mov	r1, #20
   140c0:	eb005bce 	bl	2b000 <operator delete(void*, unsigned int)>
   140c4:	e3a03000 	mov	r3, #0
   140c8:	e5945014 	ldr	r5, [r4, #20]
   140cc:	e5843018 	str	r3, [r4, #24]
   140d0:	e1550003 	cmp	r5, r3
   140d4:	0a000004 	beq	140ec <CUSBPrinterDevice::~CUSBPrinterDevice()+0x58>
   140d8:	e1a00005 	mov	r0, r5
   140dc:	ebffecc2 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   140e0:	e1a00005 	mov	r0, r5
   140e4:	e3a01014 	mov	r1, #20
   140e8:	eb005bc4 	bl	2b000 <operator delete(void*, unsigned int)>
   140ec:	e3a03000 	mov	r3, #0
   140f0:	e1a00004 	mov	r0, r4
   140f4:	e5843014 	str	r3, [r4, #20]
   140f8:	ebffed28 	bl	f5a0 <CUSBFunction::~CUSBFunction()>
   140fc:	e1a00004 	mov	r0, r4
   14100:	e8bd8070 	pop	{r4, r5, r6, pc}
   14104:	00042998 	.word	0x00042998

00014108 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   14108:	e92d4010 	push	{r4, lr}
   1410c:	e1a04000 	mov	r4, r0
   14110:	ebffffdf 	bl	14094 <CUSBPrinterDevice::~CUSBPrinterDevice()>
   14114:	e1a00004 	mov	r0, r4
   14118:	e3a0101c 	mov	r1, #28
   1411c:	eb005bb7 	bl	2b000 <operator delete(void*, unsigned int)>
   14120:	e1a00004 	mov	r0, r4
   14124:	e8bd8010 	pop	{r4, pc}

00014128 <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   14128:	e92d4070 	push	{r4, r5, r6, lr}
   1412c:	e2515000 	subs	r5, r1, #0
   14130:	e24dd008 	sub	sp, sp, #8
   14134:	0a000011 	beq	14180 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x58>
   14138:	e3520000 	cmp	r2, #0
   1413c:	e1a04002 	mov	r4, r2
   14140:	0a000012 	beq	14190 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x68>
   14144:	e1a06000 	mov	r6, r0
   14148:	ebffee1a 	bl	f9b8 <CUSBFunction::GetHost() const>
   1414c:	e3500000 	cmp	r0, #0
   14150:	0a000012 	beq	141a0 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x78>
   14154:	e3a03000 	mov	r3, #0
   14158:	e5961018 	ldr	r1, [r6, #24]
   1415c:	e1a02005 	mov	r2, r5
   14160:	e58d3000 	str	r3, [sp]
   14164:	e1a03004 	mov	r3, r4
   14168:	ebfffa24 	bl	12a00 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1416c:	e3500000 	cmp	r0, #0
   14170:	a1a00004 	movge	r0, r4
   14174:	b3e00000 	mvnlt	r0, #0
   14178:	e28dd008 	add	sp, sp, #8
   1417c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14180:	e3a0207e 	mov	r2, #126	; 0x7e
   14184:	e59f1024 	ldr	r1, [pc, #36]	; 141b0 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   14188:	e59f0024 	ldr	r0, [pc, #36]	; 141b4 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x8c>
   1418c:	eb004185 	bl	247a8 <assertion_failed>
   14190:	e3a0207f 	mov	r2, #127	; 0x7f
   14194:	e59f1014 	ldr	r1, [pc, #20]	; 141b0 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   14198:	e59f0018 	ldr	r0, [pc, #24]	; 141b8 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x90>
   1419c:	eb004181 	bl	247a8 <assertion_failed>
   141a0:	e3a02082 	mov	r2, #130	; 0x82
   141a4:	e59f1004 	ldr	r1, [pc, #4]	; 141b0 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   141a8:	e59f000c 	ldr	r0, [pc, #12]	; 141bc <CUSBPrinterDevice::Write(void const*, unsigned int)+0x94>
   141ac:	eb00417d 	bl	247a8 <assertion_failed>
   141b0:	0004294c 	.word	0x0004294c
   141b4:	0004256c 	.word	0x0004256c
   141b8:	0004295c 	.word	0x0004295c
   141bc:	0004257c 	.word	0x0004257c

000141c0 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   141c0:	e92d4010 	push	{r4, lr}
   141c4:	e1a04000 	mov	r4, r0
   141c8:	ebffed86 	bl	f7e8 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   141cc:	e3a03000 	mov	r3, #0
   141d0:	e59f2014 	ldr	r2, [pc, #20]	; 141ec <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x2c>
   141d4:	e1a00004 	mov	r0, r4
   141d8:	e5c43010 	strb	r3, [r4, #16]
   141dc:	e5842000 	str	r2, [r4]
   141e0:	e5843014 	str	r3, [r4, #20]
   141e4:	e5843018 	str	r3, [r4, #24]
   141e8:	e8bd8010 	pop	{r4, pc}
   141ec:	00042998 	.word	0x00042998

000141f0 <CUSBPrinterDevice::Configure()>:
   141f0:	e92d4070 	push	{r4, r5, r6, lr}
   141f4:	e24dd020 	sub	sp, sp, #32
   141f8:	e1a05000 	mov	r5, r0
   141fc:	ebffee6d 	bl	fbb8 <CUSBFunction::GetInterfaceProtocol() const>
   14200:	e2403001 	sub	r3, r0, #1
   14204:	e3530001 	cmp	r3, #1
   14208:	e5c50010 	strb	r0, [r5, #16]
   1420c:	8a00003b 	bhi	14300 <CUSBPrinterDevice::Configure()+0x110>
   14210:	e1a00005 	mov	r0, r5
   14214:	ebffedc6 	bl	f934 <CUSBFunction::GetNumEndpoints() const>
   14218:	e5d53010 	ldrb	r3, [r5, #16]
   1421c:	e3530001 	cmp	r3, #1
   14220:	03a03001 	moveq	r3, #1
   14224:	13a03002 	movne	r3, #2
   14228:	e1500003 	cmp	r0, r3
   1422c:	aa00000a 	bge	1425c <CUSBPrinterDevice::Configure()+0x6c>
   14230:	e3a04000 	mov	r4, #0
   14234:	e1a00005 	mov	r0, r5
   14238:	e59f11bc 	ldr	r1, [pc, #444]	; 143fc <CUSBPrinterDevice::Configure()+0x20c>
   1423c:	ebffedf3 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   14240:	e1a00004 	mov	r0, r4
   14244:	e28dd020 	add	sp, sp, #32
   14248:	e8bd8070 	pop	{r4, r5, r6, pc}
   1424c:	e5d43003 	ldrb	r3, [r4, #3]
   14250:	e203303f 	and	r3, r3, #63	; 0x3f
   14254:	e3530002 	cmp	r3, #2
   14258:	0a000033 	beq	1432c <CUSBPrinterDevice::Configure()+0x13c>
   1425c:	e3a01005 	mov	r1, #5
   14260:	e1a00005 	mov	r0, r5
   14264:	ebffedde 	bl	f9e4 <CUSBFunction::GetDescriptor(unsigned char)>
   14268:	e2504000 	subs	r4, r0, #0
   1426c:	1afffff6 	bne	1424c <CUSBPrinterDevice::Configure()+0x5c>
   14270:	e5954018 	ldr	r4, [r5, #24]
   14274:	e3540000 	cmp	r4, #0
   14278:	0a000054 	beq	143d0 <CUSBPrinterDevice::Configure()+0x1e0>
   1427c:	e5d53010 	ldrb	r3, [r5, #16]
   14280:	e1a00005 	mov	r0, r5
   14284:	e3530001 	cmp	r3, #1
   14288:	0a000002 	beq	14298 <CUSBPrinterDevice::Configure()+0xa8>
   1428c:	e5954014 	ldr	r4, [r5, #20]
   14290:	e3540000 	cmp	r4, #0
   14294:	0a000051 	beq	143e0 <CUSBPrinterDevice::Configure()+0x1f0>
   14298:	ebffece9 	bl	f644 <CUSBFunction::Configure()>
   1429c:	e2504000 	subs	r4, r0, #0
   142a0:	0a000042 	beq	143b0 <CUSBPrinterDevice::Configure()+0x1c0>
   142a4:	e28d0010 	add	r0, sp, #16
   142a8:	eb004e17 	bl	27b0c <CString::CString()>
   142ac:	e59f314c 	ldr	r3, [pc, #332]	; 14400 <CUSBPrinterDevice::Configure()+0x210>
   142b0:	e59f114c 	ldr	r1, [pc, #332]	; 14404 <CUSBPrinterDevice::Configure()+0x214>
   142b4:	e5932000 	ldr	r2, [r3]
   142b8:	e28d0010 	add	r0, sp, #16
   142bc:	e282c001 	add	ip, r2, #1
   142c0:	e583c000 	str	ip, [r3]
   142c4:	eb00535a 	bl	29034 <CString::Format(char const*, ...)>
   142c8:	eb0043f8 	bl	252b0 <CDeviceNameService::Get()>
   142cc:	e1a06000 	mov	r6, r0
   142d0:	e28d0010 	add	r0, sp, #16
   142d4:	eb004e24 	bl	27b6c <CString::operator char const*() const>
   142d8:	e1a02005 	mov	r2, r5
   142dc:	e1a01000 	mov	r1, r0
   142e0:	e3a03000 	mov	r3, #0
   142e4:	e1a00006 	mov	r0, r6
   142e8:	eb004340 	bl	24ff0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   142ec:	e28d0010 	add	r0, sp, #16
   142f0:	eb004dd2 	bl	27a40 <CString::~CString()>
   142f4:	e1a00004 	mov	r0, r4
   142f8:	e28dd020 	add	sp, sp, #32
   142fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   14300:	e3a04000 	mov	r4, #0
   14304:	eb004a0f 	bl	26b48 <CLogger::Get()>
   14308:	e5d52010 	ldrb	r2, [r5, #16]
   1430c:	e59f30f4 	ldr	r3, [pc, #244]	; 14408 <CUSBPrinterDevice::Configure()+0x218>
   14310:	e58d2000 	str	r2, [sp]
   14314:	e59f10e0 	ldr	r1, [pc, #224]	; 143fc <CUSBPrinterDevice::Configure()+0x20c>
   14318:	e3a02001 	mov	r2, #1
   1431c:	eb00494b 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14320:	e1a00004 	mov	r0, r4
   14324:	e28dd020 	add	sp, sp, #32
   14328:	e8bd8070 	pop	{r4, r5, r6, pc}
   1432c:	e1d430d2 	ldrsb	r3, [r4, #2]
   14330:	e3530000 	cmp	r3, #0
   14334:	ba00000e 	blt	14374 <CUSBPrinterDevice::Configure()+0x184>
   14338:	e5953018 	ldr	r3, [r5, #24]
   1433c:	e1a00005 	mov	r0, r5
   14340:	e3530000 	cmp	r3, #0
   14344:	1a000028 	bne	143ec <CUSBPrinterDevice::Configure()+0x1fc>
   14348:	ebffed85 	bl	f964 <CUSBFunction::GetDevice() const>
   1434c:	e1a01000 	mov	r1, r0
   14350:	e3a00014 	mov	r0, #20
   14354:	e58d100c 	str	r1, [sp, #12]
   14358:	eb005b1a 	bl	2afc8 <operator new(unsigned int)>
   1435c:	e1a06000 	mov	r6, r0
   14360:	e1a02004 	mov	r2, r4
   14364:	e59d100c 	ldr	r1, [sp, #12]
   14368:	ebffebbb 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1436c:	e5856018 	str	r6, [r5, #24]
   14370:	eaffffb9 	b	1425c <CUSBPrinterDevice::Configure()+0x6c>
   14374:	e5953014 	ldr	r3, [r5, #20]
   14378:	e1a00005 	mov	r0, r5
   1437c:	e3530000 	cmp	r3, #0
   14380:	1a000019 	bne	143ec <CUSBPrinterDevice::Configure()+0x1fc>
   14384:	ebffed76 	bl	f964 <CUSBFunction::GetDevice() const>
   14388:	e1a01000 	mov	r1, r0
   1438c:	e3a00014 	mov	r0, #20
   14390:	e58d100c 	str	r1, [sp, #12]
   14394:	eb005b0b 	bl	2afc8 <operator new(unsigned int)>
   14398:	e1a06000 	mov	r6, r0
   1439c:	e1a02004 	mov	r2, r4
   143a0:	e59d100c 	ldr	r1, [sp, #12]
   143a4:	ebffebac 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   143a8:	e5856014 	str	r6, [r5, #20]
   143ac:	eaffffaa 	b	1425c <CUSBPrinterDevice::Configure()+0x6c>
   143b0:	eb0049e4 	bl	26b48 <CLogger::Get()>
   143b4:	e3a02001 	mov	r2, #1
   143b8:	e59f304c 	ldr	r3, [pc, #76]	; 1440c <CUSBPrinterDevice::Configure()+0x21c>
   143bc:	e59f1038 	ldr	r1, [pc, #56]	; 143fc <CUSBPrinterDevice::Configure()+0x20c>
   143c0:	eb004922 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   143c4:	e1a00004 	mov	r0, r4
   143c8:	e28dd020 	add	sp, sp, #32
   143cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   143d0:	e1a00005 	mov	r0, r5
   143d4:	e59f1020 	ldr	r1, [pc, #32]	; 143fc <CUSBPrinterDevice::Configure()+0x20c>
   143d8:	ebffed8c 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   143dc:	eaffffc4 	b	142f4 <CUSBPrinterDevice::Configure()+0x104>
   143e0:	e59f1014 	ldr	r1, [pc, #20]	; 143fc <CUSBPrinterDevice::Configure()+0x20c>
   143e4:	ebffed89 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   143e8:	eaffffc1 	b	142f4 <CUSBPrinterDevice::Configure()+0x104>
   143ec:	e59f1008 	ldr	r1, [pc, #8]	; 143fc <CUSBPrinterDevice::Configure()+0x20c>
   143f0:	ebffed86 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   143f4:	e3a04000 	mov	r4, #0
   143f8:	eaffffbd 	b	142f4 <CUSBPrinterDevice::Configure()+0x104>
   143fc:	000429bc 	.word	0x000429bc
   14400:	00049fa8 	.word	0x00049fa8
   14404:	00042988 	.word	0x00042988
   14408:	00042968 	.word	0x00042968
   1440c:	00041ce4 	.word	0x00041ce4

00014410 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
   14410:	e92d4010 	push	{r4, lr}
   14414:	e3a0e000 	mov	lr, #0
   14418:	e5801000 	str	r1, [r0]
   1441c:	e151000e 	cmp	r1, lr
   14420:	e59d1008 	ldr	r1, [sp, #8]
   14424:	e1c020f8 	strd	r2, [r0, #8]
   14428:	e5801004 	str	r1, [r0, #4]
   1442c:	e580e010 	str	lr, [r0, #16]
   14430:	e580e014 	str	lr, [r0, #20]
   14434:	e580e018 	str	lr, [r0, #24]
   14438:	e580e01c 	str	lr, [r0, #28]
   1443c:	e580e020 	str	lr, [r0, #32]
   14440:	e5c0e024 	strb	lr, [r0, #36]	; 0x24
   14444:	0a00000a 	beq	14474 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x64>
   14448:	e2522000 	subs	r2, r2, #0
   1444c:	13a02001 	movne	r2, #1
   14450:	e3530000 	cmp	r3, #0
   14454:	11a03002 	movne	r3, r2
   14458:	03a03001 	moveq	r3, #1
   1445c:	e3530000 	cmp	r3, #0
   14460:	18bd8010 	popne	{r4, pc}
   14464:	e3a02024 	mov	r2, #36	; 0x24
   14468:	e59f1014 	ldr	r1, [pc, #20]	; 14484 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x74>
   1446c:	e59f0014 	ldr	r0, [pc, #20]	; 14488 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x78>
   14470:	eb0040cc 	bl	247a8 <assertion_failed>
   14474:	e3a02023 	mov	r2, #35	; 0x23
   14478:	e59f1004 	ldr	r1, [pc, #4]	; 14484 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x74>
   1447c:	e59f0008 	ldr	r0, [pc, #8]	; 1448c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x7c>
   14480:	eb0040c8 	bl	247a8 <assertion_failed>
   14484:	000429c4 	.word	0x000429c4
   14488:	000429d4 	.word	0x000429d4
   1448c:	00041514 	.word	0x00041514

00014490 <CUSBRequest::~CUSBRequest()>:
   14490:	e12fff1e 	bx	lr

00014494 <CUSBRequest::GetEndpoint() const>:
   14494:	e5900000 	ldr	r0, [r0]
   14498:	e3500000 	cmp	r0, #0
   1449c:	112fff1e 	bxne	lr
   144a0:	e3a02031 	mov	r2, #49	; 0x31
   144a4:	e92d4010 	push	{r4, lr}
   144a8:	e59f1004 	ldr	r1, [pc, #4]	; 144b4 <CUSBRequest::GetEndpoint() const+0x20>
   144ac:	e59f0004 	ldr	r0, [pc, #4]	; 144b8 <CUSBRequest::GetEndpoint() const+0x24>
   144b0:	eb0040bc 	bl	247a8 <assertion_failed>
   144b4:	000429c4 	.word	0x000429c4
   144b8:	00041514 	.word	0x00041514

000144bc <CUSBRequest::SetStatus(int)>:
   144bc:	e5801010 	str	r1, [r0, #16]
   144c0:	e12fff1e 	bx	lr

000144c4 <CUSBRequest::SetResultLen(unsigned int)>:
   144c4:	e5801014 	str	r1, [r0, #20]
   144c8:	e12fff1e 	bx	lr

000144cc <CUSBRequest::GetStatus() const>:
   144cc:	e5900010 	ldr	r0, [r0, #16]
   144d0:	e12fff1e 	bx	lr

000144d4 <CUSBRequest::GetResultLength() const>:
   144d4:	e5903010 	ldr	r3, [r0, #16]
   144d8:	e3530000 	cmp	r3, #0
   144dc:	0a000001 	beq	144e8 <CUSBRequest::GetResultLength() const+0x14>
   144e0:	e5900014 	ldr	r0, [r0, #20]
   144e4:	e12fff1e 	bx	lr
   144e8:	e3a02046 	mov	r2, #70	; 0x46
   144ec:	e92d4010 	push	{r4, lr}
   144f0:	e59f1004 	ldr	r1, [pc, #4]	; 144fc <CUSBRequest::GetResultLength() const+0x28>
   144f4:	e59f0004 	ldr	r0, [pc, #4]	; 14500 <CUSBRequest::GetResultLength() const+0x2c>
   144f8:	eb0040aa 	bl	247a8 <assertion_failed>
   144fc:	000429c4 	.word	0x000429c4
   14500:	000429f8 	.word	0x000429f8

00014504 <CUSBRequest::GetSetupData()>:
   14504:	e92d4010 	push	{r4, lr}
   14508:	e1a04000 	mov	r4, r0
   1450c:	e5900000 	ldr	r0, [r0]
   14510:	ebffebc2 	bl	f420 <CUSBEndpoint::GetType() const>
   14514:	e3500000 	cmp	r0, #0
   14518:	1a000006 	bne	14538 <CUSBRequest::GetSetupData()+0x34>
   1451c:	e5940004 	ldr	r0, [r4, #4]
   14520:	e3500000 	cmp	r0, #0
   14524:	18bd8010 	popne	{r4, pc}
   14528:	e3a0204e 	mov	r2, #78	; 0x4e
   1452c:	e59f1014 	ldr	r1, [pc, #20]	; 14548 <CUSBRequest::GetSetupData()+0x44>
   14530:	e59f0014 	ldr	r0, [pc, #20]	; 1454c <CUSBRequest::GetSetupData()+0x48>
   14534:	eb00409b 	bl	247a8 <assertion_failed>
   14538:	e3a0204d 	mov	r2, #77	; 0x4d
   1453c:	e59f1004 	ldr	r1, [pc, #4]	; 14548 <CUSBRequest::GetSetupData()+0x44>
   14540:	e59f0008 	ldr	r0, [pc, #8]	; 14550 <CUSBRequest::GetSetupData()+0x4c>
   14544:	eb004097 	bl	247a8 <assertion_failed>
   14548:	000429c4 	.word	0x000429c4
   1454c:	00042a34 	.word	0x00042a34
   14550:	00042a04 	.word	0x00042a04

00014554 <CUSBRequest::GetBuffer()>:
   14554:	e5903008 	ldr	r3, [r0, #8]
   14558:	e3530000 	cmp	r3, #0
   1455c:	0a000001 	beq	14568 <CUSBRequest::GetBuffer()+0x14>
   14560:	e1a00003 	mov	r0, r3
   14564:	e12fff1e 	bx	lr
   14568:	e590200c 	ldr	r2, [r0, #12]
   1456c:	e3520000 	cmp	r2, #0
   14570:	0afffffa 	beq	14560 <CUSBRequest::GetBuffer()+0xc>
   14574:	e3a02055 	mov	r2, #85	; 0x55
   14578:	e92d4010 	push	{r4, lr}
   1457c:	e59f1004 	ldr	r1, [pc, #4]	; 14588 <CUSBRequest::GetBuffer()+0x34>
   14580:	e59f0004 	ldr	r0, [pc, #4]	; 1458c <CUSBRequest::GetBuffer()+0x38>
   14584:	eb004087 	bl	247a8 <assertion_failed>
   14588:	000429c4 	.word	0x000429c4
   1458c:	000429d4 	.word	0x000429d4

00014590 <CUSBRequest::GetBufLen() const>:
   14590:	e590000c 	ldr	r0, [r0, #12]
   14594:	e12fff1e 	bx	lr

00014598 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
   14598:	e3510000 	cmp	r1, #0
   1459c:	e1c021fc 	strd	r2, [r0, #28]
   145a0:	e5801018 	str	r1, [r0, #24]
   145a4:	112fff1e 	bxne	lr
   145a8:	e3a02066 	mov	r2, #102	; 0x66
   145ac:	e92d4010 	push	{r4, lr}
   145b0:	e59f1004 	ldr	r1, [pc, #4]	; 145bc <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x24>
   145b4:	e59f0004 	ldr	r0, [pc, #4]	; 145c0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x28>
   145b8:	eb00407a 	bl	247a8 <assertion_failed>
   145bc:	000429c4 	.word	0x000429c4
   145c0:	00042a48 	.word	0x00042a48

000145c4 <CUSBRequest::CallCompletionRoutine()>:
   145c4:	e92d4010 	push	{r4, lr}
   145c8:	e590e018 	ldr	lr, [r0, #24]
   145cc:	e35e0000 	cmp	lr, #0
   145d0:	0a000004 	beq	145e8 <CUSBRequest::CallCompletionRoutine()+0x24>
   145d4:	e1a0300e 	mov	r3, lr
   145d8:	e8bd4010 	pop	{r4, lr}
   145dc:	e5902020 	ldr	r2, [r0, #32]
   145e0:	e590101c 	ldr	r1, [r0, #28]
   145e4:	e12fff13 	bx	r3
   145e8:	e3a0206b 	mov	r2, #107	; 0x6b
   145ec:	e59f1004 	ldr	r1, [pc, #4]	; 145f8 <CUSBRequest::CallCompletionRoutine()+0x34>
   145f0:	e59f0004 	ldr	r0, [pc, #4]	; 145fc <CUSBRequest::CallCompletionRoutine()+0x38>
   145f4:	eb00406b 	bl	247a8 <assertion_failed>
   145f8:	000429c4 	.word	0x000429c4
   145fc:	00042a48 	.word	0x00042a48

00014600 <CUSBRequest::SetCompleteOnNAK()>:
   14600:	e3a03001 	mov	r3, #1
   14604:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   14608:	e12fff1e 	bx	lr

0001460c <CUSBRequest::IsCompleteOnNAK() const>:
   1460c:	e5d00024 	ldrb	r0, [r0, #36]	; 0x24
   14610:	e12fff1e 	bx	lr

00014614 <CUSBRequest::operator new(unsigned int)>:
   14614:	e3500028 	cmp	r0, #40	; 0x28
   14618:	e92d4010 	push	{r4, lr}
   1461c:	1a000005 	bne	14638 <CUSBRequest::operator new(unsigned int)+0x24>
   14620:	e59f3030 	ldr	r3, [pc, #48]	; 14658 <CUSBRequest::operator new(unsigned int)+0x44>
   14624:	e5930000 	ldr	r0, [r3]
   14628:	e3500000 	cmp	r0, #0
   1462c:	0a000005 	beq	14648 <CUSBRequest::operator new(unsigned int)+0x34>
   14630:	e8bd4010 	pop	{r4, lr}
   14634:	ea00415d 	b	24bb0 <CClassAllocator::Allocate()>
   14638:	e3a0207a 	mov	r2, #122	; 0x7a
   1463c:	e59f1018 	ldr	r1, [pc, #24]	; 1465c <CUSBRequest::operator new(unsigned int)+0x48>
   14640:	e59f0018 	ldr	r0, [pc, #24]	; 14660 <CUSBRequest::operator new(unsigned int)+0x4c>
   14644:	eb004057 	bl	247a8 <assertion_failed>
   14648:	e3a0207a 	mov	r2, #122	; 0x7a
   1464c:	e59f1008 	ldr	r1, [pc, #8]	; 1465c <CUSBRequest::operator new(unsigned int)+0x48>
   14650:	e59f000c 	ldr	r0, [pc, #12]	; 14664 <CUSBRequest::operator new(unsigned int)+0x50>
   14654:	eb004053 	bl	247a8 <assertion_failed>
   14658:	0005ce14 	.word	0x0005ce14
   1465c:	000429c4 	.word	0x000429c4
   14660:	00042a64 	.word	0x00042a64
   14664:	0004115c 	.word	0x0004115c

00014668 <CUSBRequest::operator delete(void*, unsigned int)>:
   14668:	e3510028 	cmp	r1, #40	; 0x28
   1466c:	e92d4010 	push	{r4, lr}
   14670:	1a000006 	bne	14690 <CUSBRequest::operator delete(void*, unsigned int)+0x28>
   14674:	e59f3034 	ldr	r3, [pc, #52]	; 146b0 <CUSBRequest::operator delete(void*, unsigned int)+0x48>
   14678:	e1a01000 	mov	r1, r0
   1467c:	e5930000 	ldr	r0, [r3]
   14680:	e3500000 	cmp	r0, #0
   14684:	0a000005 	beq	146a0 <CUSBRequest::operator delete(void*, unsigned int)+0x38>
   14688:	e8bd4010 	pop	{r4, lr}
   1468c:	ea004182 	b	24c9c <CClassAllocator::Free(void*)>
   14690:	e3a0207a 	mov	r2, #122	; 0x7a
   14694:	e59f1018 	ldr	r1, [pc, #24]	; 146b4 <CUSBRequest::operator delete(void*, unsigned int)+0x4c>
   14698:	e59f0018 	ldr	r0, [pc, #24]	; 146b8 <CUSBRequest::operator delete(void*, unsigned int)+0x50>
   1469c:	eb004041 	bl	247a8 <assertion_failed>
   146a0:	e3a0207a 	mov	r2, #122	; 0x7a
   146a4:	e59f1008 	ldr	r1, [pc, #8]	; 146b4 <CUSBRequest::operator delete(void*, unsigned int)+0x4c>
   146a8:	e59f000c 	ldr	r0, [pc, #12]	; 146bc <CUSBRequest::operator delete(void*, unsigned int)+0x54>
   146ac:	eb00403d 	bl	247a8 <assertion_failed>
   146b0:	0005ce14 	.word	0x0005ce14
   146b4:	000429c4 	.word	0x000429c4
   146b8:	00042a64 	.word	0x00042a64
   146bc:	0004115c 	.word	0x0004115c

000146c0 <CUSBRequest::InitAllocator(unsigned int)>:
   146c0:	e92d4070 	push	{r4, r5, r6, lr}
   146c4:	e59f6040 	ldr	r6, [pc, #64]	; 1470c <CUSBRequest::InitAllocator(unsigned int)+0x4c>
   146c8:	e5963000 	ldr	r3, [r6]
   146cc:	e3530000 	cmp	r3, #0
   146d0:	1a000009 	bne	146fc <CUSBRequest::InitAllocator(unsigned int)+0x3c>
   146d4:	e1a04000 	mov	r4, r0
   146d8:	e3a0001c 	mov	r0, #28
   146dc:	eb005a39 	bl	2afc8 <operator new(unsigned int)>
   146e0:	e1a05000 	mov	r5, r0
   146e4:	e1a02004 	mov	r2, r4
   146e8:	e3a01028 	mov	r1, #40	; 0x28
   146ec:	e59f301c 	ldr	r3, [pc, #28]	; 14710 <CUSBRequest::InitAllocator(unsigned int)+0x50>
   146f0:	eb004115 	bl	24b4c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   146f4:	e5865000 	str	r5, [r6]
   146f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   146fc:	e3a0207a 	mov	r2, #122	; 0x7a
   14700:	e59f100c 	ldr	r1, [pc, #12]	; 14714 <CUSBRequest::InitAllocator(unsigned int)+0x54>
   14704:	e59f000c 	ldr	r0, [pc, #12]	; 14718 <CUSBRequest::InitAllocator(unsigned int)+0x58>
   14708:	eb004026 	bl	247a8 <assertion_failed>
   1470c:	0005ce14 	.word	0x0005ce14
   14710:	00042a84 	.word	0x00042a84
   14714:	000429c4 	.word	0x000429c4
   14718:	00041170 	.word	0x00041170

0001471c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
   1471c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14720:	e59f7054 	ldr	r7, [pc, #84]	; 1477c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   14724:	e24dd00c 	sub	sp, sp, #12
   14728:	e5973000 	ldr	r3, [r7]
   1472c:	e3530000 	cmp	r3, #0
   14730:	1a00000d 	bne	1476c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
   14734:	e1a05001 	mov	r5, r1
   14738:	e1a04000 	mov	r4, r0
   1473c:	e3a0001c 	mov	r0, #28
   14740:	eb005a20 	bl	2afc8 <operator new(unsigned int)>
   14744:	e59f1034 	ldr	r1, [pc, #52]	; 14780 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   14748:	e1a03005 	mov	r3, r5
   1474c:	e58d1000 	str	r1, [sp]
   14750:	e1a02004 	mov	r2, r4
   14754:	e3a01028 	mov	r1, #40	; 0x28
   14758:	e1a06000 	mov	r6, r0
   1475c:	eb004106 	bl	24b7c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   14760:	e5876000 	str	r6, [r7]
   14764:	e28dd00c 	add	sp, sp, #12
   14768:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1476c:	e3a0207a 	mov	r2, #122	; 0x7a
   14770:	e59f100c 	ldr	r1, [pc, #12]	; 14784 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   14774:	e59f000c 	ldr	r0, [pc, #12]	; 14788 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   14778:	eb00400a 	bl	247a8 <assertion_failed>
   1477c:	0005ce14 	.word	0x0005ce14
   14780:	00042a84 	.word	0x00042a84
   14784:	000429c4 	.word	0x000429c4
   14788:	00041170 	.word	0x00041170

0001478c <CUSBStandardHub::~CUSBStandardHub()>:
   1478c:	e5902018 	ldr	r2, [r0, #24]
   14790:	e59f30c0 	ldr	r3, [pc, #192]	; 14858 <CUSBStandardHub::~CUSBStandardHub()+0xcc>
   14794:	e3520000 	cmp	r2, #0
   14798:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1479c:	e1a07000 	mov	r7, r0
   147a0:	e5803000 	str	r3, [r0]
   147a4:	0a000014 	beq	147fc <CUSBStandardHub::~CUSBStandardHub()+0x70>
   147a8:	e3a04000 	mov	r4, #0
   147ac:	e1a08004 	mov	r8, r4
   147b0:	e2806020 	add	r6, r0, #32
   147b4:	e2805040 	add	r5, r0, #64	; 0x40
   147b8:	e4950004 	ldr	r0, [r5], #4
   147bc:	e2844001 	add	r4, r4, #1
   147c0:	e3500000 	cmp	r0, #0
   147c4:	0a000001 	beq	147d0 <CUSBStandardHub::~CUSBStandardHub()+0x44>
   147c8:	e3a01004 	mov	r1, #4
   147cc:	eb005a0b 	bl	2b000 <operator delete(void*, unsigned int)>
   147d0:	e5960000 	ldr	r0, [r6]
   147d4:	e5058004 	str	r8, [r5, #-4]
   147d8:	e3500000 	cmp	r0, #0
   147dc:	0a000002 	beq	147ec <CUSBStandardHub::~CUSBStandardHub()+0x60>
   147e0:	e5903000 	ldr	r3, [r0]
   147e4:	e5933004 	ldr	r3, [r3, #4]
   147e8:	e12fff33 	blx	r3
   147ec:	e5973018 	ldr	r3, [r7, #24]
   147f0:	e4868004 	str	r8, [r6], #4
   147f4:	e1530004 	cmp	r3, r4
   147f8:	8affffee 	bhi	147b8 <CUSBStandardHub::~CUSBStandardHub()+0x2c>
   147fc:	e3a03000 	mov	r3, #0
   14800:	e5974014 	ldr	r4, [r7, #20]
   14804:	e5873018 	str	r3, [r7, #24]
   14808:	e1540003 	cmp	r4, r3
   1480c:	0a000004 	beq	14824 <CUSBStandardHub::~CUSBStandardHub()+0x98>
   14810:	e1a00004 	mov	r0, r4
   14814:	ebffeaf4 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   14818:	e1a00004 	mov	r0, r4
   1481c:	e3a01014 	mov	r1, #20
   14820:	eb0059f6 	bl	2b000 <operator delete(void*, unsigned int)>
   14824:	e3a03000 	mov	r3, #0
   14828:	e5970010 	ldr	r0, [r7, #16]
   1482c:	e5873014 	str	r3, [r7, #20]
   14830:	e1500003 	cmp	r0, r3
   14834:	0a000001 	beq	14840 <CUSBStandardHub::~CUSBStandardHub()+0xb4>
   14838:	e3a01009 	mov	r1, #9
   1483c:	eb0059ef 	bl	2b000 <operator delete(void*, unsigned int)>
   14840:	e3a03000 	mov	r3, #0
   14844:	e1a00007 	mov	r0, r7
   14848:	e5873010 	str	r3, [r7, #16]
   1484c:	ebffeb53 	bl	f5a0 <CUSBFunction::~CUSBFunction()>
   14850:	e1a00007 	mov	r0, r7
   14854:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14858:	00042ca8 	.word	0x00042ca8

0001485c <CUSBStandardHub::~CUSBStandardHub()>:
   1485c:	e92d4010 	push	{r4, lr}
   14860:	e1a04000 	mov	r4, r0
   14864:	ebffffc8 	bl	1478c <CUSBStandardHub::~CUSBStandardHub()>
   14868:	e1a00004 	mov	r0, r4
   1486c:	e3a01068 	mov	r1, #104	; 0x68
   14870:	eb0059e2 	bl	2b000 <operator delete(void*, unsigned int)>
   14874:	e1a00004 	mov	r0, r4
   14878:	e8bd8010 	pop	{r4, pc}

0001487c <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
   1487c:	e92d4010 	push	{r4, lr}
   14880:	e1a04000 	mov	r4, r0
   14884:	ebffebd7 	bl	f7e8 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   14888:	e3a03000 	mov	r3, #0
   1488c:	e59f103c 	ldr	r1, [pc, #60]	; 148d0 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x54>
   14890:	e1a02003 	mov	r2, r3
   14894:	e5843010 	str	r3, [r4, #16]
   14898:	e5841000 	str	r1, [r4]
   1489c:	e5843014 	str	r3, [r4, #20]
   148a0:	e5843018 	str	r3, [r4, #24]
   148a4:	e5c4301c 	strb	r3, [r4, #28]
   148a8:	e2841060 	add	r1, r4, #96	; 0x60
   148ac:	e2843020 	add	r3, r4, #32
   148b0:	e2840040 	add	r0, r4, #64	; 0x40
   148b4:	e4832004 	str	r2, [r3], #4
   148b8:	e1530000 	cmp	r3, r0
   148bc:	e583201c 	str	r2, [r3, #28]
   148c0:	e4c12001 	strb	r2, [r1], #1
   148c4:	1afffffa 	bne	148b4 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x38>
   148c8:	e1a00004 	mov	r0, r4
   148cc:	e8bd8010 	pop	{r4, pc}
   148d0:	00042ca8 	.word	0x00042ca8

000148d4 <CUSBStandardHub::DisablePort(unsigned int)>:
   148d4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   148d8:	e5903018 	ldr	r3, [r0, #24]
   148dc:	e24dd014 	sub	sp, sp, #20
   148e0:	e1530001 	cmp	r3, r1
   148e4:	9a000022 	bls	14974 <CUSBStandardHub::DisablePort(unsigned int)+0xa0>
   148e8:	e1a05001 	mov	r5, r1
   148ec:	e1a04000 	mov	r4, r0
   148f0:	ebffec30 	bl	f9b8 <CUSBFunction::GetHost() const>
   148f4:	e3a06001 	mov	r6, #1
   148f8:	e1a07000 	mov	r7, r0
   148fc:	e1a00004 	mov	r0, r4
   14900:	ebffec21 	bl	f98c <CUSBFunction::GetEndpoint0() const>
   14904:	e3a08000 	mov	r8, #0
   14908:	e0859006 	add	r9, r5, r6
   1490c:	e6ff3079 	uxth	r3, r9
   14910:	e1a01000 	mov	r1, r0
   14914:	e58d3004 	str	r3, [sp, #4]
   14918:	e1a00007 	mov	r0, r7
   1491c:	e1a03006 	mov	r3, r6
   14920:	e3a02023 	mov	r2, #35	; 0x23
   14924:	e58d800c 	str	r8, [sp, #12]
   14928:	e58d8008 	str	r8, [sp, #8]
   1492c:	e58d6000 	str	r6, [sp]
   14930:	ebfff7cc 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14934:	e1500008 	cmp	r0, r8
   14938:	a0844005 	addge	r4, r4, r5
   1493c:	a1a00006 	movge	r0, r6
   14940:	a5c48060 	strbge	r8, [r4, #96]	; 0x60
   14944:	ba000001 	blt	14950 <CUSBStandardHub::DisablePort(unsigned int)+0x7c>
   14948:	e28dd014 	add	sp, sp, #20
   1494c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14950:	eb00487c 	bl	26b48 <CLogger::Get()>
   14954:	e1a02006 	mov	r2, r6
   14958:	e59f3024 	ldr	r3, [pc, #36]	; 14984 <CUSBStandardHub::DisablePort(unsigned int)+0xb0>
   1495c:	e59f1024 	ldr	r1, [pc, #36]	; 14988 <CUSBStandardHub::DisablePort(unsigned int)+0xb4>
   14960:	e58d9000 	str	r9, [sp]
   14964:	eb0047b9 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14968:	e1a00008 	mov	r0, r8
   1496c:	e28dd014 	add	sp, sp, #20
   14970:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14974:	e3a020c7 	mov	r2, #199	; 0xc7
   14978:	e59f100c 	ldr	r1, [pc, #12]	; 1498c <CUSBStandardHub::DisablePort(unsigned int)+0xb8>
   1497c:	e59f000c 	ldr	r0, [pc, #12]	; 14990 <CUSBStandardHub::DisablePort(unsigned int)+0xbc>
   14980:	eb003f88 	bl	247a8 <assertion_failed>
   14984:	00042abc 	.word	0x00042abc
   14988:	00042ccc 	.word	0x00042ccc
   1498c:	00042a90 	.word	0x00042a90
   14990:	00042aa4 	.word	0x00042aa4

00014994 <CUSBStandardHub::RemoveDevice(unsigned int)>:
   14994:	e92d4070 	push	{r4, r5, r6, lr}
   14998:	e1a05000 	mov	r5, r0
   1499c:	e1a04001 	mov	r4, r1
   149a0:	ebffffcb 	bl	148d4 <CUSBStandardHub::DisablePort(unsigned int)>
   149a4:	e2506000 	subs	r6, r0, #0
   149a8:	0a000008 	beq	149d0 <CUSBStandardHub::RemoveDevice(unsigned int)+0x3c>
   149ac:	e0854104 	add	r4, r5, r4, lsl #2
   149b0:	e5940020 	ldr	r0, [r4, #32]
   149b4:	e3500000 	cmp	r0, #0
   149b8:	0a000002 	beq	149c8 <CUSBStandardHub::RemoveDevice(unsigned int)+0x34>
   149bc:	e5903000 	ldr	r3, [r0]
   149c0:	e5933004 	ldr	r3, [r3, #4]
   149c4:	e12fff33 	blx	r3
   149c8:	e3a03000 	mov	r3, #0
   149cc:	e5843020 	str	r3, [r4, #32]
   149d0:	e1a00006 	mov	r0, r6
   149d4:	e8bd8070 	pop	{r4, r5, r6, pc}

000149d8 <CUSBStandardHub::Initialize()>:
   149d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   149dc:	e24dd010 	sub	sp, sp, #16
   149e0:	e1a04000 	mov	r4, r0
   149e4:	ebffeae9 	bl	f590 <CUSBFunction::Initialize()>
   149e8:	e2505000 	subs	r5, r0, #0
   149ec:	0a00001d 	beq	14a68 <CUSBStandardHub::Initialize()+0x90>
   149f0:	e5946010 	ldr	r6, [r4, #16]
   149f4:	e3560000 	cmp	r6, #0
   149f8:	1a00003a 	bne	14ae8 <CUSBStandardHub::Initialize()+0x110>
   149fc:	e3a00009 	mov	r0, #9
   14a00:	eb005970 	bl	2afc8 <operator new(unsigned int)>
   14a04:	e1a03000 	mov	r3, r0
   14a08:	e1a00004 	mov	r0, r4
   14a0c:	e5843010 	str	r3, [r4, #16]
   14a10:	ebffebe8 	bl	f9b8 <CUSBFunction::GetHost() const>
   14a14:	e1a07000 	mov	r7, r0
   14a18:	e1a00004 	mov	r0, r4
   14a1c:	ebffebda 	bl	f98c <CUSBFunction::GetEndpoint0() const>
   14a20:	e3a08009 	mov	r8, #9
   14a24:	e3a0c0a0 	mov	ip, #160	; 0xa0
   14a28:	e5942010 	ldr	r2, [r4, #16]
   14a2c:	e1a01000 	mov	r1, r0
   14a30:	e1a03006 	mov	r3, r6
   14a34:	e88d1104 	stm	sp, {r2, r8, ip}
   14a38:	e58d600c 	str	r6, [sp, #12]
   14a3c:	e1a00007 	mov	r0, r7
   14a40:	e3a02029 	mov	r2, #41	; 0x29
   14a44:	ebfff7b9 	bl	12930 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   14a48:	e1500008 	cmp	r0, r8
   14a4c:	e1a06000 	mov	r6, r0
   14a50:	1a000007 	bne	14a74 <CUSBStandardHub::Initialize()+0x9c>
   14a54:	e5943010 	ldr	r3, [r4, #16]
   14a58:	e5d33002 	ldrb	r3, [r3, #2]
   14a5c:	e3530008 	cmp	r3, #8
   14a60:	e5843018 	str	r3, [r4, #24]
   14a64:	8a000012 	bhi	14ab4 <CUSBStandardHub::Initialize()+0xdc>
   14a68:	e1a00005 	mov	r0, r5
   14a6c:	e28dd010 	add	sp, sp, #16
   14a70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14a74:	eb004833 	bl	26b48 <CLogger::Get()>
   14a78:	e3a02001 	mov	r2, #1
   14a7c:	e59f3074 	ldr	r3, [pc, #116]	; 14af8 <CUSBStandardHub::Initialize()+0x120>
   14a80:	e59f1074 	ldr	r1, [pc, #116]	; 14afc <CUSBStandardHub::Initialize()+0x124>
   14a84:	eb004771 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14a88:	e5940010 	ldr	r0, [r4, #16]
   14a8c:	e3500000 	cmp	r0, #0
   14a90:	0a000001 	beq	14a9c <CUSBStandardHub::Initialize()+0xc4>
   14a94:	e1a01008 	mov	r1, r8
   14a98:	eb005958 	bl	2b000 <operator delete(void*, unsigned int)>
   14a9c:	e3a00000 	mov	r0, #0
   14aa0:	e1a05000 	mov	r5, r0
   14aa4:	e5840010 	str	r0, [r4, #16]
   14aa8:	e1a00005 	mov	r0, r5
   14aac:	e28dd010 	add	sp, sp, #16
   14ab0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14ab4:	eb004823 	bl	26b48 <CLogger::Get()>
   14ab8:	e5942018 	ldr	r2, [r4, #24]
   14abc:	e59f303c 	ldr	r3, [pc, #60]	; 14b00 <CUSBStandardHub::Initialize()+0x128>
   14ac0:	e58d2000 	str	r2, [sp]
   14ac4:	e59f1030 	ldr	r1, [pc, #48]	; 14afc <CUSBStandardHub::Initialize()+0x124>
   14ac8:	e3a02001 	mov	r2, #1
   14acc:	eb00475f 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ad0:	e5940010 	ldr	r0, [r4, #16]
   14ad4:	e3500000 	cmp	r0, #0
   14ad8:	0affffef 	beq	14a9c <CUSBStandardHub::Initialize()+0xc4>
   14adc:	e1a01006 	mov	r1, r6
   14ae0:	eb005946 	bl	2b000 <operator delete(void*, unsigned int)>
   14ae4:	eaffffec 	b	14a9c <CUSBStandardHub::Initialize()+0xc4>
   14ae8:	e3a02055 	mov	r2, #85	; 0x55
   14aec:	e59f1010 	ldr	r1, [pc, #16]	; 14b04 <CUSBStandardHub::Initialize()+0x12c>
   14af0:	e59f0010 	ldr	r0, [pc, #16]	; 14b08 <CUSBStandardHub::Initialize()+0x130>
   14af4:	eb003f2b 	bl	247a8 <assertion_failed>
   14af8:	00042ae4 	.word	0x00042ae4
   14afc:	00042ccc 	.word	0x00042ccc
   14b00:	00042b00 	.word	0x00042b00
   14b04:	00042a90 	.word	0x00042a90
   14b08:	00042ad4 	.word	0x00042ad4

00014b0c <CUSBStandardHub::EnumeratePorts()>:
   14b0c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b10:	ed2d8b02 	vpush	{d8}
   14b14:	e24dd01c 	sub	sp, sp, #28
   14b18:	e1a0b000 	mov	fp, r0
   14b1c:	ebffeba5 	bl	f9b8 <CUSBFunction::GetHost() const>
   14b20:	e2504000 	subs	r4, r0, #0
   14b24:	0a00013c 	beq	1501c <CUSBStandardHub::EnumeratePorts()+0x510>
   14b28:	e1a0000b 	mov	r0, fp
   14b2c:	ebffeb96 	bl	f98c <CUSBFunction::GetEndpoint0() const>
   14b30:	e2505000 	subs	r5, r0, #0
   14b34:	0a00013c 	beq	1502c <CUSBStandardHub::EnumeratePorts()+0x520>
   14b38:	e59b3018 	ldr	r3, [fp, #24]
   14b3c:	e3530000 	cmp	r3, #0
   14b40:	0a00013d 	beq	1503c <CUSBStandardHub::EnumeratePorts()+0x530>
   14b44:	e5db601c 	ldrb	r6, [fp, #28]
   14b48:	e3560000 	cmp	r6, #0
   14b4c:	0a0000cd 	beq	14e88 <CUSBStandardHub::EnumeratePorts()+0x37c>
   14b50:	e28b3020 	add	r3, fp, #32
   14b54:	e3a07000 	mov	r7, #0
   14b58:	e1a06003 	mov	r6, r3
   14b5c:	e58d3014 	str	r3, [sp, #20]
   14b60:	e4960004 	ldr	r0, [r6], #4
   14b64:	e3500000 	cmp	r0, #0
   14b68:	1a0000ac 	bne	14e20 <CUSBStandardHub::EnumeratePorts()+0x314>
   14b6c:	e596001c 	ldr	r0, [r6, #28]
   14b70:	e3500000 	cmp	r0, #0
   14b74:	0a0000bb 	beq	14e68 <CUSBStandardHub::EnumeratePorts()+0x35c>
   14b78:	e3a03004 	mov	r3, #4
   14b7c:	e58d300c 	str	r3, [sp, #12]
   14b80:	e3a03000 	mov	r3, #0
   14b84:	e2879001 	add	r9, r7, #1
   14b88:	e6ffa079 	uxth	sl, r9
   14b8c:	e58d0008 	str	r0, [sp, #8]
   14b90:	e3a020a3 	mov	r2, #163	; 0xa3
   14b94:	e1a01005 	mov	r1, r5
   14b98:	e1a00004 	mov	r0, r4
   14b9c:	e88d0408 	stm	sp, {r3, sl}
   14ba0:	ebfff730 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14ba4:	e3500004 	cmp	r0, #4
   14ba8:	e1a08000 	mov	r8, r0
   14bac:	1a0000a2 	bne	14e3c <CUSBStandardHub::EnumeratePorts()+0x330>
   14bb0:	e596301c 	ldr	r3, [r6, #28]
   14bb4:	e5d32001 	ldrb	r2, [r3, #1]
   14bb8:	e5d33000 	ldrb	r3, [r3]
   14bbc:	e3120001 	tst	r2, #1
   14bc0:	e1833402 	orr	r3, r3, r2, lsl #8
   14bc4:	0a0000e5 	beq	14f60 <CUSBStandardHub::EnumeratePorts()+0x454>
   14bc8:	e3130001 	tst	r3, #1
   14bcc:	0a000034 	beq	14ca4 <CUSBStandardHub::EnumeratePorts()+0x198>
   14bd0:	e3a03000 	mov	r3, #0
   14bd4:	e3a02023 	mov	r2, #35	; 0x23
   14bd8:	e58d300c 	str	r3, [sp, #12]
   14bdc:	e58d3008 	str	r3, [sp, #8]
   14be0:	e1a01005 	mov	r1, r5
   14be4:	e3a03003 	mov	r3, #3
   14be8:	e1a00004 	mov	r0, r4
   14bec:	e88d0500 	stm	sp, {r8, sl}
   14bf0:	ebfff71c 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14bf4:	e3500000 	cmp	r0, #0
   14bf8:	ba0000cd 	blt	14f34 <CUSBStandardHub::EnumeratePorts()+0x428>
   14bfc:	eb0054b6 	bl	29edc <CTimer::Get()>
   14c00:	e3a00064 	mov	r0, #100	; 0x64
   14c04:	eb00547f 	bl	29e08 <CTimer::SimpleMsDelay(unsigned int)>
   14c08:	e3a03000 	mov	r3, #0
   14c0c:	e58d800c 	str	r8, [sp, #12]
   14c10:	e596201c 	ldr	r2, [r6, #28]
   14c14:	e1a01005 	mov	r1, r5
   14c18:	e58d2008 	str	r2, [sp, #8]
   14c1c:	e1a00004 	mov	r0, r4
   14c20:	e3a020a3 	mov	r2, #163	; 0xa3
   14c24:	e58da004 	str	sl, [sp, #4]
   14c28:	e58d3000 	str	r3, [sp]
   14c2c:	ebfff70d 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14c30:	e3500004 	cmp	r0, #4
   14c34:	1a000145 	bne	15150 <CUSBStandardHub::EnumeratePorts()+0x644>
   14c38:	e596201c 	ldr	r2, [r6, #28]
   14c3c:	e5d23000 	ldrb	r3, [r2]
   14c40:	e5d22001 	ldrb	r2, [r2, #1]
   14c44:	e3130002 	tst	r3, #2
   14c48:	e1833402 	orr	r3, r3, r2, lsl #8
   14c4c:	0a0000e7 	beq	14ff0 <CUSBStandardHub::EnumeratePorts()+0x4e4>
   14c50:	e2132008 	ands	r2, r3, #8
   14c54:	1a00013f 	bne	15158 <CUSBStandardHub::EnumeratePorts()+0x64c>
   14c58:	e3130c02 	tst	r3, #512	; 0x200
   14c5c:	11a0a002 	movne	sl, r2
   14c60:	0a000084 	beq	14e78 <CUSBStandardHub::EnumeratePorts()+0x36c>
   14c64:	e5163004 	ldr	r3, [r6, #-4]
   14c68:	e3530000 	cmp	r3, #0
   14c6c:	1a0000f6 	bne	1504c <CUSBStandardHub::EnumeratePorts()+0x540>
   14c70:	e3a00058 	mov	r0, #88	; 0x58
   14c74:	eb0058d3 	bl	2afc8 <operator new(unsigned int)>
   14c78:	e1a08000 	mov	r8, r0
   14c7c:	e1a0200a 	mov	r2, sl
   14c80:	e1a0300b 	mov	r3, fp
   14c84:	e1a01004 	mov	r1, r4
   14c88:	e58d7000 	str	r7, [sp]
   14c8c:	ebffe4b8 	bl	df74 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>
   14c90:	e1a00008 	mov	r0, r8
   14c94:	e5068004 	str	r8, [r6, #-4]
   14c98:	ebffe637 	bl	e57c <CUSBDevice::Initialize()>
   14c9c:	e3500000 	cmp	r0, #0
   14ca0:	0a000096 	beq	14f00 <CUSBStandardHub::EnumeratePorts()+0x3f4>
   14ca4:	e59b3018 	ldr	r3, [fp, #24]
   14ca8:	e1a07009 	mov	r7, r9
   14cac:	e1530009 	cmp	r3, r9
   14cb0:	8affffaa 	bhi	14b60 <CUSBStandardHub::EnumeratePorts()+0x54>
   14cb4:	e3530000 	cmp	r3, #0
   14cb8:	0a000027 	beq	14d5c <CUSBStandardHub::EnumeratePorts()+0x250>
   14cbc:	e3e0805e 	mvn	r8, #94	; 0x5e
   14cc0:	e048800b 	sub	r8, r8, fp
   14cc4:	ee084a10 	vmov	s16, r4
   14cc8:	e28b6060 	add	r6, fp, #96	; 0x60
   14ccc:	e1a0400b 	mov	r4, fp
   14cd0:	e59fa4d4 	ldr	sl, [pc, #1236]	; 151ac <CUSBStandardHub::EnumeratePorts()+0x6a0>
   14cd4:	e1a0b008 	mov	fp, r8
   14cd8:	e59f94d0 	ldr	r9, [pc, #1232]	; 151b0 <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14cdc:	e59d8014 	ldr	r8, [sp, #20]
   14ce0:	ea000011 	b	14d2c <CUSBStandardHub::EnumeratePorts()+0x220>
   14ce4:	e3a02001 	mov	r2, #1
   14ce8:	e5903000 	ldr	r3, [r0]
   14cec:	e5c62000 	strb	r2, [r6]
   14cf0:	e593300c 	ldr	r3, [r3, #12]
   14cf4:	e12fff33 	blx	r3
   14cf8:	e3500000 	cmp	r0, #0
   14cfc:	e08b7006 	add	r7, fp, r6
   14d00:	0a00009a 	beq	14f70 <CUSBStandardHub::EnumeratePorts()+0x464>
   14d04:	eb00478f 	bl	26b48 <CLogger::Get()>
   14d08:	e1a0300a 	mov	r3, sl
   14d0c:	e3a02004 	mov	r2, #4
   14d10:	e1a01009 	mov	r1, r9
   14d14:	e58d7000 	str	r7, [sp]
   14d18:	eb0046cc 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14d1c:	e5943018 	ldr	r3, [r4, #24]
   14d20:	e1570003 	cmp	r7, r3
   14d24:	e2866001 	add	r6, r6, #1
   14d28:	2a000009 	bcs	14d54 <CUSBStandardHub::EnumeratePorts()+0x248>
   14d2c:	e4980004 	ldr	r0, [r8], #4
   14d30:	e3500000 	cmp	r0, #0
   14d34:	0a000002 	beq	14d44 <CUSBStandardHub::EnumeratePorts()+0x238>
   14d38:	e5d62000 	ldrb	r2, [r6]
   14d3c:	e3520000 	cmp	r2, #0
   14d40:	0affffe7 	beq	14ce4 <CUSBStandardHub::EnumeratePorts()+0x1d8>
   14d44:	e08b7006 	add	r7, fp, r6
   14d48:	e1570003 	cmp	r7, r3
   14d4c:	e2866001 	add	r6, r6, #1
   14d50:	3afffff5 	bcc	14d2c <CUSBStandardHub::EnumeratePorts()+0x220>
   14d54:	e1a0b004 	mov	fp, r4
   14d58:	ee184a10 	vmov	r4, s16
   14d5c:	e3a00004 	mov	r0, #4
   14d60:	eb005898 	bl	2afc8 <operator new(unsigned int)>
   14d64:	e3a06000 	mov	r6, #0
   14d68:	e3a07004 	mov	r7, #4
   14d6c:	e58d0008 	str	r0, [sp, #8]
   14d70:	e1a08000 	mov	r8, r0
   14d74:	e1a03006 	mov	r3, r6
   14d78:	e3a020a0 	mov	r2, #160	; 0xa0
   14d7c:	e1a01005 	mov	r1, r5
   14d80:	e1a00004 	mov	r0, r4
   14d84:	e58d700c 	str	r7, [sp, #12]
   14d88:	e58d6004 	str	r6, [sp, #4]
   14d8c:	e58d6000 	str	r6, [sp]
   14d90:	ebfff6b4 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14d94:	e1500007 	cmp	r0, r7
   14d98:	e1a09000 	mov	r9, r0
   14d9c:	1a0000ae 	bne	1505c <CUSBStandardHub::EnumeratePorts()+0x550>
   14da0:	e5d83000 	ldrb	r3, [r8]
   14da4:	e3130002 	tst	r3, #2
   14da8:	0a0000b4 	beq	15080 <CUSBStandardHub::EnumeratePorts()+0x574>
   14dac:	e59b3018 	ldr	r3, [fp, #24]
   14db0:	e3530000 	cmp	r3, #0
   14db4:	13a07001 	movne	r7, #1
   14db8:	13a09008 	movne	r9, #8
   14dbc:	0a00000d 	beq	14df8 <CUSBStandardHub::EnumeratePorts()+0x2ec>
   14dc0:	e6ff3077 	uxth	r3, r7
   14dc4:	e3a02023 	mov	r2, #35	; 0x23
   14dc8:	e58d3004 	str	r3, [sp, #4]
   14dcc:	e1a01005 	mov	r1, r5
   14dd0:	e3a03001 	mov	r3, #1
   14dd4:	e1a00004 	mov	r0, r4
   14dd8:	e58d600c 	str	r6, [sp, #12]
   14ddc:	e58d6008 	str	r6, [sp, #8]
   14de0:	e58d9000 	str	r9, [sp]
   14de4:	ebfff69f 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14de8:	e59b2018 	ldr	r2, [fp, #24]
   14dec:	e1570002 	cmp	r7, r2
   14df0:	e2877001 	add	r7, r7, #1
   14df4:	3afffff1 	bcc	14dc0 <CUSBStandardHub::EnumeratePorts()+0x2b4>
   14df8:	eb004752 	bl	26b48 <CLogger::Get()>
   14dfc:	e3a02001 	mov	r2, #1
   14e00:	e59f33ac 	ldr	r3, [pc, #940]	; 151b4 <CUSBStandardHub::EnumeratePorts()+0x6a8>
   14e04:	e59f13a4 	ldr	r1, [pc, #932]	; 151b0 <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14e08:	eb004690 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14e0c:	e1a00008 	mov	r0, r8
   14e10:	e3a01004 	mov	r1, #4
   14e14:	eb005879 	bl	2b000 <operator delete(void*, unsigned int)>
   14e18:	e3a06000 	mov	r6, #0
   14e1c:	ea000033 	b	14ef0 <CUSBStandardHub::EnumeratePorts()+0x3e4>
   14e20:	ebffe4ab 	bl	e0d4 <CUSBDevice::ReScanDevices()>
   14e24:	e59b3018 	ldr	r3, [fp, #24]
   14e28:	e2879001 	add	r9, r7, #1
   14e2c:	e1530009 	cmp	r3, r9
   14e30:	e1a07009 	mov	r7, r9
   14e34:	8affff49 	bhi	14b60 <CUSBStandardHub::EnumeratePorts()+0x54>
   14e38:	eaffff9d 	b	14cb4 <CUSBStandardHub::EnumeratePorts()+0x1a8>
   14e3c:	eb004741 	bl	26b48 <CLogger::Get()>
   14e40:	e59f3370 	ldr	r3, [pc, #880]	; 151b8 <CUSBStandardHub::EnumeratePorts()+0x6ac>
   14e44:	e3a02001 	mov	r2, #1
   14e48:	e59f1360 	ldr	r1, [pc, #864]	; 151b0 <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14e4c:	e58d9000 	str	r9, [sp]
   14e50:	eb00467e 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14e54:	e59b3018 	ldr	r3, [fp, #24]
   14e58:	e1a07009 	mov	r7, r9
   14e5c:	e1530009 	cmp	r3, r9
   14e60:	8affff3e 	bhi	14b60 <CUSBStandardHub::EnumeratePorts()+0x54>
   14e64:	eaffff92 	b	14cb4 <CUSBStandardHub::EnumeratePorts()+0x1a8>
   14e68:	e3a00004 	mov	r0, #4
   14e6c:	eb005855 	bl	2afc8 <operator new(unsigned int)>
   14e70:	e586001c 	str	r0, [r6, #28]
   14e74:	eaffff3f 	b	14b78 <CUSBStandardHub::EnumeratePorts()+0x6c>
   14e78:	e3130b01 	tst	r3, #1024	; 0x400
   14e7c:	13a0a002 	movne	sl, #2
   14e80:	03a0a001 	moveq	sl, #1
   14e84:	eaffff76 	b	14c64 <CUSBStandardHub::EnumeratePorts()+0x158>
   14e88:	e1a08006 	mov	r8, r6
   14e8c:	e3a09008 	mov	r9, #8
   14e90:	e1a07006 	mov	r7, r6
   14e94:	ea000002 	b	14ea4 <CUSBStandardHub::EnumeratePorts()+0x398>
   14e98:	e59b3018 	ldr	r3, [fp, #24]
   14e9c:	e1530007 	cmp	r3, r7
   14ea0:	9a000042 	bls	14fb0 <CUSBStandardHub::EnumeratePorts()+0x4a4>
   14ea4:	e2877001 	add	r7, r7, #1
   14ea8:	e6ff3077 	uxth	r3, r7
   14eac:	e58d3004 	str	r3, [sp, #4]
   14eb0:	e3a02023 	mov	r2, #35	; 0x23
   14eb4:	e3a03003 	mov	r3, #3
   14eb8:	e1a01005 	mov	r1, r5
   14ebc:	e1a00004 	mov	r0, r4
   14ec0:	e58d800c 	str	r8, [sp, #12]
   14ec4:	e58d8008 	str	r8, [sp, #8]
   14ec8:	e58d9000 	str	r9, [sp]
   14ecc:	ebfff665 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14ed0:	e3500000 	cmp	r0, #0
   14ed4:	aaffffef 	bge	14e98 <CUSBStandardHub::EnumeratePorts()+0x38c>
   14ed8:	eb00471a 	bl	26b48 <CLogger::Get()>
   14edc:	e3a02001 	mov	r2, #1
   14ee0:	e59f32d4 	ldr	r3, [pc, #724]	; 151bc <CUSBStandardHub::EnumeratePorts()+0x6b0>
   14ee4:	e59f12c4 	ldr	r1, [pc, #708]	; 151b0 <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14ee8:	e58d7000 	str	r7, [sp]
   14eec:	eb004657 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ef0:	e1a00006 	mov	r0, r6
   14ef4:	e28dd01c 	add	sp, sp, #28
   14ef8:	ecbd8b02 	vpop	{d8}
   14efc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f00:	e5160004 	ldr	r0, [r6, #-4]
   14f04:	e3500000 	cmp	r0, #0
   14f08:	0a000002 	beq	14f18 <CUSBStandardHub::EnumeratePorts()+0x40c>
   14f0c:	e5903000 	ldr	r3, [r0]
   14f10:	e5933004 	ldr	r3, [r3, #4]
   14f14:	e12fff33 	blx	r3
   14f18:	e3a03000 	mov	r3, #0
   14f1c:	e5063004 	str	r3, [r6, #-4]
   14f20:	e59b3018 	ldr	r3, [fp, #24]
   14f24:	e1a07009 	mov	r7, r9
   14f28:	e1530009 	cmp	r3, r9
   14f2c:	8affff0b 	bhi	14b60 <CUSBStandardHub::EnumeratePorts()+0x54>
   14f30:	eaffff5f 	b	14cb4 <CUSBStandardHub::EnumeratePorts()+0x1a8>
   14f34:	eb004703 	bl	26b48 <CLogger::Get()>
   14f38:	e59f3280 	ldr	r3, [pc, #640]	; 151c0 <CUSBStandardHub::EnumeratePorts()+0x6b4>
   14f3c:	e3a02001 	mov	r2, #1
   14f40:	e59f1268 	ldr	r1, [pc, #616]	; 151b0 <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14f44:	e58d9000 	str	r9, [sp]
   14f48:	eb004640 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14f4c:	e59b3018 	ldr	r3, [fp, #24]
   14f50:	e1a07009 	mov	r7, r9
   14f54:	e1530009 	cmp	r3, r9
   14f58:	8affff00 	bhi	14b60 <CUSBStandardHub::EnumeratePorts()+0x54>
   14f5c:	eaffff54 	b	14cb4 <CUSBStandardHub::EnumeratePorts()+0x1a8>
   14f60:	e59f225c 	ldr	r2, [pc, #604]	; 151c4 <CUSBStandardHub::EnumeratePorts()+0x6b8>
   14f64:	e59f125c 	ldr	r1, [pc, #604]	; 151c8 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   14f68:	e59f025c 	ldr	r0, [pc, #604]	; 151cc <CUSBStandardHub::EnumeratePorts()+0x6c0>
   14f6c:	eb003e0d 	bl	247a8 <assertion_failed>
   14f70:	eb0046f4 	bl	26b48 <CLogger::Get()>
   14f74:	e3a02002 	mov	r2, #2
   14f78:	e1a01009 	mov	r1, r9
   14f7c:	e59f324c 	ldr	r3, [pc, #588]	; 151d0 <CUSBStandardHub::EnumeratePorts()+0x6c4>
   14f80:	e58d7000 	str	r7, [sp]
   14f84:	eb004631 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14f88:	e5180004 	ldr	r0, [r8, #-4]
   14f8c:	e3500000 	cmp	r0, #0
   14f90:	0a000002 	beq	14fa0 <CUSBStandardHub::EnumeratePorts()+0x494>
   14f94:	e5903000 	ldr	r3, [r0]
   14f98:	e5933004 	ldr	r3, [r3, #4]
   14f9c:	e12fff33 	blx	r3
   14fa0:	e3a03000 	mov	r3, #0
   14fa4:	e5083004 	str	r3, [r8, #-4]
   14fa8:	e5943018 	ldr	r3, [r4, #24]
   14fac:	eaffff5b 	b	14d20 <CUSBStandardHub::EnumeratePorts()+0x214>
   14fb0:	e3a03001 	mov	r3, #1
   14fb4:	e5cb301c 	strb	r3, [fp, #28]
   14fb8:	eb0044a4 	bl	26250 <CKernelOptions::Get()>
   14fbc:	e3500000 	cmp	r0, #0
   14fc0:	0a000002 	beq	14fd0 <CUSBStandardHub::EnumeratePorts()+0x4c4>
   14fc4:	eb004494 	bl	2621c <CKernelOptions::GetUSBPowerDelay() const>
   14fc8:	e2506000 	subs	r6, r0, #0
   14fcc:	1a000000 	bne	14fd4 <CUSBStandardHub::EnumeratePorts()+0x4c8>
   14fd0:	e59f61fc 	ldr	r6, [pc, #508]	; 151d4 <CUSBStandardHub::EnumeratePorts()+0x6c8>
   14fd4:	eb0053c0 	bl	29edc <CTimer::Get()>
   14fd8:	e1a00006 	mov	r0, r6
   14fdc:	eb005389 	bl	29e08 <CTimer::SimpleMsDelay(unsigned int)>
   14fe0:	e59b3018 	ldr	r3, [fp, #24]
   14fe4:	e3530000 	cmp	r3, #0
   14fe8:	1afffed8 	bne	14b50 <CUSBStandardHub::EnumeratePorts()+0x44>
   14fec:	eaffff5a 	b	14d5c <CUSBStandardHub::EnumeratePorts()+0x250>
   14ff0:	eb0046d4 	bl	26b48 <CLogger::Get()>
   14ff4:	e59f31dc 	ldr	r3, [pc, #476]	; 151d8 <CUSBStandardHub::EnumeratePorts()+0x6cc>
   14ff8:	e3a02001 	mov	r2, #1
   14ffc:	e59f11ac 	ldr	r1, [pc, #428]	; 151b0 <CUSBStandardHub::EnumeratePorts()+0x6a4>
   15000:	e58d9000 	str	r9, [sp]
   15004:	eb004611 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15008:	e59b3018 	ldr	r3, [fp, #24]
   1500c:	e1a07009 	mov	r7, r9
   15010:	e1530009 	cmp	r3, r9
   15014:	8afffed1 	bhi	14b60 <CUSBStandardHub::EnumeratePorts()+0x54>
   15018:	eaffff25 	b	14cb4 <CUSBStandardHub::EnumeratePorts()+0x1a8>
   1501c:	e3a020e3 	mov	r2, #227	; 0xe3
   15020:	e59f11a0 	ldr	r1, [pc, #416]	; 151c8 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   15024:	e59f01b0 	ldr	r0, [pc, #432]	; 151dc <CUSBStandardHub::EnumeratePorts()+0x6d0>
   15028:	eb003dde 	bl	247a8 <assertion_failed>
   1502c:	e3a020e6 	mov	r2, #230	; 0xe6
   15030:	e59f1190 	ldr	r1, [pc, #400]	; 151c8 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   15034:	e59f01a4 	ldr	r0, [pc, #420]	; 151e0 <CUSBStandardHub::EnumeratePorts()+0x6d4>
   15038:	eb003dda 	bl	247a8 <assertion_failed>
   1503c:	e3a020e8 	mov	r2, #232	; 0xe8
   15040:	e59f1180 	ldr	r1, [pc, #384]	; 151c8 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   15044:	e59f0198 	ldr	r0, [pc, #408]	; 151e4 <CUSBStandardHub::EnumeratePorts()+0x6d8>
   15048:	eb003dd6 	bl	247a8 <assertion_failed>
   1504c:	e59f2194 	ldr	r2, [pc, #404]	; 151e8 <CUSBStandardHub::EnumeratePorts()+0x6dc>
   15050:	e59f1170 	ldr	r1, [pc, #368]	; 151c8 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   15054:	e59f0190 	ldr	r0, [pc, #400]	; 151ec <CUSBStandardHub::EnumeratePorts()+0x6e0>
   15058:	eb003dd2 	bl	247a8 <assertion_failed>
   1505c:	eb0046b9 	bl	26b48 <CLogger::Get()>
   15060:	e3a02001 	mov	r2, #1
   15064:	e59f3184 	ldr	r3, [pc, #388]	; 151f0 <CUSBStandardHub::EnumeratePorts()+0x6e4>
   15068:	e59f1140 	ldr	r1, [pc, #320]	; 151b0 <CUSBStandardHub::EnumeratePorts()+0x6a4>
   1506c:	eb0045f7 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15070:	e1a01007 	mov	r1, r7
   15074:	e1a00008 	mov	r0, r8
   15078:	eb0057e0 	bl	2b000 <operator delete(void*, unsigned int)>
   1507c:	eaffff9b 	b	14ef0 <CUSBStandardHub::EnumeratePorts()+0x3e4>
   15080:	e1a00008 	mov	r0, r8
   15084:	e1a01009 	mov	r1, r9
   15088:	eb0057dc 	bl	2b000 <operator delete(void*, unsigned int)>
   1508c:	e59b3018 	ldr	r3, [fp, #24]
   15090:	e3530000 	cmp	r3, #0
   15094:	0a000042 	beq	151a4 <CUSBStandardHub::EnumeratePorts()+0x698>
   15098:	e3a07001 	mov	r7, #1
   1509c:	e58d9014 	str	r9, [sp, #20]
   150a0:	e1a06007 	mov	r6, r7
   150a4:	e28b9040 	add	r9, fp, #64	; 0x40
   150a8:	ea000004 	b	150c0 <CUSBStandardHub::EnumeratePorts()+0x5b4>
   150ac:	e59b3018 	ldr	r3, [fp, #24]
   150b0:	e2872001 	add	r2, r7, #1
   150b4:	e1530007 	cmp	r3, r7
   150b8:	9affff8c 	bls	14ef0 <CUSBStandardHub::EnumeratePorts()+0x3e4>
   150bc:	e1a07002 	mov	r7, r2
   150c0:	e3a08000 	mov	r8, #0
   150c4:	e4992004 	ldr	r2, [r9], #4
   150c8:	e59d3014 	ldr	r3, [sp, #20]
   150cc:	e6ffa077 	uxth	sl, r7
   150d0:	e58d300c 	str	r3, [sp, #12]
   150d4:	e58d2008 	str	r2, [sp, #8]
   150d8:	e1a03008 	mov	r3, r8
   150dc:	e3a020a3 	mov	r2, #163	; 0xa3
   150e0:	e1a01005 	mov	r1, r5
   150e4:	e1a00004 	mov	r0, r4
   150e8:	e58d8000 	str	r8, [sp]
   150ec:	e58da004 	str	sl, [sp, #4]
   150f0:	ebfff5dc 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   150f4:	e3500004 	cmp	r0, #4
   150f8:	1affffeb 	bne	150ac <CUSBStandardHub::EnumeratePorts()+0x5a0>
   150fc:	e5193004 	ldr	r3, [r9, #-4]
   15100:	e5d33000 	ldrb	r3, [r3]
   15104:	e3130008 	tst	r3, #8
   15108:	0affffe7 	beq	150ac <CUSBStandardHub::EnumeratePorts()+0x5a0>
   1510c:	e3a03008 	mov	r3, #8
   15110:	e1a01005 	mov	r1, r5
   15114:	e3a02023 	mov	r2, #35	; 0x23
   15118:	e88d0408 	stm	sp, {r3, sl}
   1511c:	e1a00004 	mov	r0, r4
   15120:	e3a03001 	mov	r3, #1
   15124:	e58d800c 	str	r8, [sp, #12]
   15128:	e58d8008 	str	r8, [sp, #8]
   1512c:	ebfff5cd 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15130:	eb004684 	bl	26b48 <CLogger::Get()>
   15134:	e3a02001 	mov	r2, #1
   15138:	e59f30b4 	ldr	r3, [pc, #180]	; 151f4 <CUSBStandardHub::EnumeratePorts()+0x6e8>
   1513c:	e59f106c 	ldr	r1, [pc, #108]	; 151b0 <CUSBStandardHub::EnumeratePorts()+0x6a4>
   15140:	e58d7000 	str	r7, [sp]
   15144:	e1a06008 	mov	r6, r8
   15148:	eb0045c0 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1514c:	eaffffd6 	b	150ac <CUSBStandardHub::EnumeratePorts()+0x5a0>
   15150:	e3a06000 	mov	r6, #0
   15154:	eaffff65 	b	14ef0 <CUSBStandardHub::EnumeratePorts()+0x3e4>
   15158:	e3a02000 	mov	r2, #0
   1515c:	e3a03008 	mov	r3, #8
   15160:	e1a01005 	mov	r1, r5
   15164:	e58d200c 	str	r2, [sp, #12]
   15168:	e58d2008 	str	r2, [sp, #8]
   1516c:	e58d3000 	str	r3, [sp]
   15170:	e3a02023 	mov	r2, #35	; 0x23
   15174:	e3a03001 	mov	r3, #1
   15178:	e1a00004 	mov	r0, r4
   1517c:	e58da004 	str	sl, [sp, #4]
   15180:	ebfff5b8 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15184:	eb00466f 	bl	26b48 <CLogger::Get()>
   15188:	e3a02001 	mov	r2, #1
   1518c:	e59f3060 	ldr	r3, [pc, #96]	; 151f4 <CUSBStandardHub::EnumeratePorts()+0x6e8>
   15190:	e59f1018 	ldr	r1, [pc, #24]	; 151b0 <CUSBStandardHub::EnumeratePorts()+0x6a4>
   15194:	e58d9000 	str	r9, [sp]
   15198:	eb0045ac 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1519c:	e3a06000 	mov	r6, #0
   151a0:	eaffff52 	b	14ef0 <CUSBStandardHub::EnumeratePorts()+0x3e4>
   151a4:	e3a06001 	mov	r6, #1
   151a8:	eaffff50 	b	14ef0 <CUSBStandardHub::EnumeratePorts()+0x3e4>
   151ac:	00042c30 	.word	0x00042c30
   151b0:	00042ccc 	.word	0x00042ccc
   151b4:	00042c64 	.word	0x00042c64
   151b8:	00042b4c 	.word	0x00042b4c
   151bc:	00042b34 	.word	0x00042b34
   151c0:	00042ba0 	.word	0x00042ba0
   151c4:	00000125 	.word	0x00000125
   151c8:	00042a90 	.word	0x00042a90
   151cc:	00042b6c 	.word	0x00042b6c
   151d0:	00042c0c 	.word	0x00042c0c
   151d4:	000001fe 	.word	0x000001fe
   151d8:	00042bb8 	.word	0x00042bb8
   151dc:	0004257c 	.word	0x0004257c
   151e0:	00042b14 	.word	0x00042b14
   151e4:	00042b24 	.word	0x00042b24
   151e8:	00000162 	.word	0x00000162
   151ec:	00042bf4 	.word	0x00042bf4
   151f0:	00042c4c 	.word	0x00042c4c
   151f4:	00042bd0 	.word	0x00042bd0

000151f8 <CUSBStandardHub::ReScanDevices()>:
   151f8:	eafffe43 	b	14b0c <CUSBStandardHub::EnumeratePorts()>

000151fc <CUSBStandardHub::Configure()>:
   151fc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15200:	e24dd01c 	sub	sp, sp, #28
   15204:	e1a04000 	mov	r4, r0
   15208:	ebffe9c9 	bl	f934 <CUSBFunction::GetNumEndpoints() const>
   1520c:	e3500001 	cmp	r0, #1
   15210:	1a00000c 	bne	15248 <CUSBStandardHub::Configure()+0x4c>
   15214:	e1a05000 	mov	r5, r0
   15218:	e3a01005 	mov	r1, #5
   1521c:	e1a00004 	mov	r0, r4
   15220:	ebffe9ef 	bl	f9e4 <CUSBFunction::GetDescriptor(unsigned char)>
   15224:	e2506000 	subs	r6, r0, #0
   15228:	0a000006 	beq	15248 <CUSBStandardHub::Configure()+0x4c>
   1522c:	e1d630d2 	ldrsb	r3, [r6, #2]
   15230:	e3530000 	cmp	r3, #0
   15234:	aa000003 	bge	15248 <CUSBStandardHub::Configure()+0x4c>
   15238:	e5d63003 	ldrb	r3, [r6, #3]
   1523c:	e203303f 	and	r3, r3, #63	; 0x3f
   15240:	e3530003 	cmp	r3, #3
   15244:	0a000006 	beq	15264 <CUSBStandardHub::Configure()+0x68>
   15248:	e1a00004 	mov	r0, r4
   1524c:	e59f10e0 	ldr	r1, [pc, #224]	; 15334 <CUSBStandardHub::Configure()+0x138>
   15250:	ebffe9ee 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   15254:	e3a06000 	mov	r6, #0
   15258:	e1a00006 	mov	r0, r6
   1525c:	e28dd01c 	add	sp, sp, #28
   15260:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15264:	e1a00004 	mov	r0, r4
   15268:	ebffe9bd 	bl	f964 <CUSBFunction::GetDevice() const>
   1526c:	e1a01000 	mov	r1, r0
   15270:	e3a00014 	mov	r0, #20
   15274:	e58d1004 	str	r1, [sp, #4]
   15278:	eb005752 	bl	2afc8 <operator new(unsigned int)>
   1527c:	e1a07000 	mov	r7, r0
   15280:	e1a02006 	mov	r2, r6
   15284:	e59d1004 	ldr	r1, [sp, #4]
   15288:	ebffe7f3 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1528c:	e1a00004 	mov	r0, r4
   15290:	e5847014 	str	r7, [r4, #20]
   15294:	ebffe8ea 	bl	f644 <CUSBFunction::Configure()>
   15298:	e2506000 	subs	r6, r0, #0
   1529c:	0a00001e 	beq	1531c <CUSBStandardHub::Configure()+0x120>
   152a0:	e28d0008 	add	r0, sp, #8
   152a4:	eb004a18 	bl	27b0c <CString::CString()>
   152a8:	e59f3088 	ldr	r3, [pc, #136]	; 15338 <CUSBStandardHub::Configure()+0x13c>
   152ac:	e59f1088 	ldr	r1, [pc, #136]	; 1533c <CUSBStandardHub::Configure()+0x140>
   152b0:	e5932000 	ldr	r2, [r3]
   152b4:	e28d0008 	add	r0, sp, #8
   152b8:	e282c001 	add	ip, r2, #1
   152bc:	e583c000 	str	ip, [r3]
   152c0:	eb004f5b 	bl	29034 <CString::Format(char const*, ...)>
   152c4:	eb003ff9 	bl	252b0 <CDeviceNameService::Get()>
   152c8:	e1a06000 	mov	r6, r0
   152cc:	e28d0008 	add	r0, sp, #8
   152d0:	eb004a25 	bl	27b6c <CString::operator char const*() const>
   152d4:	e3a03000 	mov	r3, #0
   152d8:	e1a01000 	mov	r1, r0
   152dc:	e1a02004 	mov	r2, r4
   152e0:	e1a00006 	mov	r0, r6
   152e4:	eb003f41 	bl	24ff0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   152e8:	e1a00004 	mov	r0, r4
   152ec:	ebfffe06 	bl	14b0c <CUSBStandardHub::EnumeratePorts()>
   152f0:	e2506000 	subs	r6, r0, #0
   152f4:	0a000002 	beq	15304 <CUSBStandardHub::Configure()+0x108>
   152f8:	e28d0008 	add	r0, sp, #8
   152fc:	eb0049cf 	bl	27a40 <CString::~CString()>
   15300:	eaffffd4 	b	15258 <CUSBStandardHub::Configure()+0x5c>
   15304:	eb00460f 	bl	26b48 <CLogger::Get()>
   15308:	e1a02005 	mov	r2, r5
   1530c:	e59f302c 	ldr	r3, [pc, #44]	; 15340 <CUSBStandardHub::Configure()+0x144>
   15310:	e59f101c 	ldr	r1, [pc, #28]	; 15334 <CUSBStandardHub::Configure()+0x138>
   15314:	eb00454d 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15318:	eafffff6 	b	152f8 <CUSBStandardHub::Configure()+0xfc>
   1531c:	eb004609 	bl	26b48 <CLogger::Get()>
   15320:	e1a02005 	mov	r2, r5
   15324:	e59f3018 	ldr	r3, [pc, #24]	; 15344 <CUSBStandardHub::Configure()+0x148>
   15328:	e59f1004 	ldr	r1, [pc, #4]	; 15334 <CUSBStandardHub::Configure()+0x138>
   1532c:	eb004547 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15330:	eaffffc8 	b	15258 <CUSBStandardHub::Configure()+0x5c>
   15334:	00042ccc 	.word	0x00042ccc
   15338:	00049fac 	.word	0x00049fac
   1533c:	00042c80 	.word	0x00042c80
   15340:	00042c88 	.word	0x00042c88
   15344:	00041ce4 	.word	0x00041ce4

00015348 <CLAN7800Device::GetMACAddress() const>:
   15348:	e280001c 	add	r0, r0, #28
   1534c:	e12fff1e 	bx	lr

00015350 <CLAN7800Device::~CLAN7800Device()>:
   15350:	e92d4070 	push	{r4, r5, r6, lr}
   15354:	e59f3074 	ldr	r3, [pc, #116]	; 153d0 <CLAN7800Device::~CLAN7800Device()+0x80>
   15358:	e5905018 	ldr	r5, [r0, #24]
   1535c:	e2832040 	add	r2, r3, #64	; 0x40
   15360:	e3550000 	cmp	r5, #0
   15364:	e1a04000 	mov	r4, r0
   15368:	e5803000 	str	r3, [r0]
   1536c:	e5802010 	str	r2, [r0, #16]
   15370:	0a000004 	beq	15388 <CLAN7800Device::~CLAN7800Device()+0x38>
   15374:	e1a00005 	mov	r0, r5
   15378:	ebffe81b 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   1537c:	e1a00005 	mov	r0, r5
   15380:	e3a01014 	mov	r1, #20
   15384:	eb00571d 	bl	2b000 <operator delete(void*, unsigned int)>
   15388:	e3a03000 	mov	r3, #0
   1538c:	e5945014 	ldr	r5, [r4, #20]
   15390:	e5843018 	str	r3, [r4, #24]
   15394:	e1550003 	cmp	r5, r3
   15398:	0a000004 	beq	153b0 <CLAN7800Device::~CLAN7800Device()+0x60>
   1539c:	e1a00005 	mov	r0, r5
   153a0:	ebffe811 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   153a4:	e1a00005 	mov	r0, r5
   153a8:	e3a01014 	mov	r1, #20
   153ac:	eb005713 	bl	2b000 <operator delete(void*, unsigned int)>
   153b0:	e3a03000 	mov	r3, #0
   153b4:	e284001c 	add	r0, r4, #28
   153b8:	e5843014 	str	r3, [r4, #20]
   153bc:	eb00561f 	bl	2ac40 <CMACAddress::~CMACAddress()>
   153c0:	e1a00004 	mov	r0, r4
   153c4:	ebffe875 	bl	f5a0 <CUSBFunction::~CUSBFunction()>
   153c8:	e1a00004 	mov	r0, r4
   153cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   153d0:	00042e88 	.word	0x00042e88

000153d4 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   153d4:	e2400010 	sub	r0, r0, #16
   153d8:	eaffffdc 	b	15350 <CLAN7800Device::~CLAN7800Device()>

000153dc <CLAN7800Device::~CLAN7800Device()>:
   153dc:	e92d4010 	push	{r4, lr}
   153e0:	e1a04000 	mov	r4, r0
   153e4:	ebffffd9 	bl	15350 <CLAN7800Device::~CLAN7800Device()>
   153e8:	e1a00004 	mov	r0, r4
   153ec:	e3a01024 	mov	r1, #36	; 0x24
   153f0:	eb005702 	bl	2b000 <operator delete(void*, unsigned int)>
   153f4:	e1a00004 	mov	r0, r4
   153f8:	e8bd8010 	pop	{r4, pc}

000153fc <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   153fc:	e2400010 	sub	r0, r0, #16
   15400:	eafffff5 	b	153dc <CLAN7800Device::~CLAN7800Device()>

00015404 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   15404:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15408:	e5903014 	ldr	r3, [r0, #20]
   1540c:	e24dd030 	sub	sp, sp, #48	; 0x30
   15410:	e3530000 	cmp	r3, #0
   15414:	0a000034 	beq	154ec <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xe8>
   15418:	e3510000 	cmp	r1, #0
   1541c:	e1a04001 	mov	r4, r1
   15420:	0a000035 	beq	154fc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xf8>
   15424:	e3a07000 	mov	r7, #0
   15428:	e1a05000 	mov	r5, r0
   1542c:	e1a01003 	mov	r1, r3
   15430:	e1a06002 	mov	r6, r2
   15434:	e3a03d19 	mov	r3, #1600	; 0x640
   15438:	e1a02004 	mov	r2, r4
   1543c:	e58d7000 	str	r7, [sp]
   15440:	e28d0008 	add	r0, sp, #8
   15444:	ebfffbf1 	bl	14410 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15448:	e1a00005 	mov	r0, r5
   1544c:	ebffe959 	bl	f9b8 <CUSBFunction::GetHost() const>
   15450:	e5903000 	ldr	r3, [r0]
   15454:	e1a02007 	mov	r2, r7
   15458:	e5933008 	ldr	r3, [r3, #8]
   1545c:	e28d1008 	add	r1, sp, #8
   15460:	e12fff33 	blx	r3
   15464:	e2505000 	subs	r5, r0, #0
   15468:	1a000005 	bne	15484 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x80>
   1546c:	e3a05000 	mov	r5, #0
   15470:	e28d0008 	add	r0, sp, #8
   15474:	ebfffc05 	bl	14490 <CUSBRequest::~CUSBRequest()>
   15478:	e1a00005 	mov	r0, r5
   1547c:	e28dd030 	add	sp, sp, #48	; 0x30
   15480:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15484:	e28d0008 	add	r0, sp, #8
   15488:	ebfffc11 	bl	144d4 <CUSBRequest::GetResultLength() const>
   1548c:	e3500009 	cmp	r0, #9
   15490:	9afffff5 	bls	1546c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x68>
   15494:	e5948000 	ldr	r8, [r4]
   15498:	e3180501 	tst	r8, #4194304	; 0x400000
   1549c:	1a00001a 	bne	1550c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x108>
   154a0:	e1a03908 	lsl	r3, r8, #18
   154a4:	e1a03923 	lsr	r3, r3, #18
   154a8:	e240200a 	sub	r2, r0, #10
   154ac:	e1520003 	cmp	r2, r3
   154b0:	1a00001d 	bne	1552c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x128>
   154b4:	e3520004 	cmp	r2, #4
   154b8:	9a00001f 	bls	1553c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x138>
   154bc:	e240700e 	sub	r7, r0, #14
   154c0:	e1a02007 	mov	r2, r7
   154c4:	e1a00004 	mov	r0, r4
   154c8:	e284100a 	add	r1, r4, #10
   154cc:	eb0054d7 	bl	2a830 <memcpy>
   154d0:	e3560000 	cmp	r6, #0
   154d4:	15867000 	strne	r7, [r6]
   154d8:	1affffe4 	bne	15470 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   154dc:	e59f2068 	ldr	r2, [pc, #104]	; 1554c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x148>
   154e0:	e59f1068 	ldr	r1, [pc, #104]	; 15550 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   154e4:	e59f0068 	ldr	r0, [pc, #104]	; 15554 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x150>
   154e8:	eb003cae 	bl	247a8 <assertion_failed>
   154ec:	e59f2064 	ldr	r2, [pc, #100]	; 15558 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x154>
   154f0:	e59f1058 	ldr	r1, [pc, #88]	; 15550 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   154f4:	e59f0060 	ldr	r0, [pc, #96]	; 1555c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x158>
   154f8:	eb003caa 	bl	247a8 <assertion_failed>
   154fc:	e3a02d07 	mov	r2, #448	; 0x1c0
   15500:	e59f1048 	ldr	r1, [pc, #72]	; 15550 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   15504:	e59f0054 	ldr	r0, [pc, #84]	; 15560 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x15c>
   15508:	eb003ca6 	bl	247a8 <assertion_failed>
   1550c:	eb00458d 	bl	26b48 <CLogger::Get()>
   15510:	e3a02002 	mov	r2, #2
   15514:	e59f3048 	ldr	r3, [pc, #72]	; 15564 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   15518:	e59f1048 	ldr	r1, [pc, #72]	; 15568 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x164>
   1551c:	e58d8000 	str	r8, [sp]
   15520:	e1a05007 	mov	r5, r7
   15524:	eb0044c9 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15528:	eaffffd0 	b	15470 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   1552c:	e59f2038 	ldr	r2, [pc, #56]	; 1556c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x168>
   15530:	e59f1018 	ldr	r1, [pc, #24]	; 15550 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   15534:	e59f0034 	ldr	r0, [pc, #52]	; 15570 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x16c>
   15538:	eb003c9a 	bl	247a8 <assertion_failed>
   1553c:	e3a02f76 	mov	r2, #472	; 0x1d8
   15540:	e59f1008 	ldr	r1, [pc, #8]	; 15550 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   15544:	e59f0028 	ldr	r0, [pc, #40]	; 15574 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x170>
   15548:	eb003c96 	bl	247a8 <assertion_failed>
   1554c:	000001e3 	.word	0x000001e3
   15550:	00042cd4 	.word	0x00042cd4
   15554:	00042d54 	.word	0x00042d54
   15558:	000001bf 	.word	0x000001bf
   1555c:	00042ce0 	.word	0x00042ce0
   15560:	0004256c 	.word	0x0004256c
   15564:	00042cf8 	.word	0x00042cf8
   15568:	00042ef0 	.word	0x00042ef0
   1556c:	000001d7 	.word	0x000001d7
   15570:	00042d10 	.word	0x00042d10
   15574:	00042d40 	.word	0x00042d40

00015578 <non-virtual thunk to CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   15578:	e2400010 	sub	r0, r0, #16
   1557c:	eaffffa0 	b	15404 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>

00015580 <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   15580:	e3520d19 	cmp	r2, #1600	; 0x640
   15584:	8a00001d 	bhi	15600 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x80>
   15588:	e92d4070 	push	{r4, r5, r6, lr}
   1558c:	e3510000 	cmp	r1, #0
   15590:	e24dde65 	sub	sp, sp, #1616	; 0x650
   15594:	e24dd008 	sub	sp, sp, #8
   15598:	0a00001a 	beq	15608 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x88>
   1559c:	e1a05000 	mov	r5, r0
   155a0:	e1a04002 	mov	r4, r2
   155a4:	e3a06000 	mov	r6, #0
   155a8:	e28d0018 	add	r0, sp, #24
   155ac:	e2403008 	sub	r3, r0, #8
   155b0:	e58d300c 	str	r3, [sp, #12]
   155b4:	eb00549d 	bl	2a830 <memcpy>
   155b8:	e5952018 	ldr	r2, [r5, #24]
   155bc:	e3843501 	orr	r3, r4, #4194304	; 0x400000
   155c0:	e1520006 	cmp	r2, r6
   155c4:	e58d6014 	str	r6, [sp, #20]
   155c8:	e58d3010 	str	r3, [sp, #16]
   155cc:	0a000011 	beq	15618 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x98>
   155d0:	e1a00005 	mov	r0, r5
   155d4:	ebffe8f7 	bl	f9b8 <CUSBFunction::GetHost() const>
   155d8:	e58d6000 	str	r6, [sp]
   155dc:	e59d200c 	ldr	r2, [sp, #12]
   155e0:	e5951018 	ldr	r1, [r5, #24]
   155e4:	e2843008 	add	r3, r4, #8
   155e8:	ebfff504 	bl	12a00 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   155ec:	e1e00000 	mvn	r0, r0
   155f0:	e1a00fa0 	lsr	r0, r0, #31
   155f4:	e28dde65 	add	sp, sp, #1616	; 0x650
   155f8:	e28dd008 	add	sp, sp, #8
   155fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   15600:	e3a00000 	mov	r0, #0
   15604:	e12fff1e 	bx	lr
   15608:	e59f2018 	ldr	r2, [pc, #24]	; 15628 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xa8>
   1560c:	e59f1018 	ldr	r1, [pc, #24]	; 1562c <CLAN7800Device::SendFrame(void const*, unsigned int)+0xac>
   15610:	e59f0018 	ldr	r0, [pc, #24]	; 15630 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb0>
   15614:	eb003c63 	bl	247a8 <assertion_failed>
   15618:	e59f2014 	ldr	r2, [pc, #20]	; 15634 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb4>
   1561c:	e59f1008 	ldr	r1, [pc, #8]	; 1562c <CLAN7800Device::SendFrame(void const*, unsigned int)+0xac>
   15620:	e59f0010 	ldr	r0, [pc, #16]	; 15638 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb8>
   15624:	eb003c5f 	bl	247a8 <assertion_failed>
   15628:	000001b2 	.word	0x000001b2
   1562c:	00042cd4 	.word	0x00042cd4
   15630:	0004256c 	.word	0x0004256c
   15634:	000001b9 	.word	0x000001b9
   15638:	00042d68 	.word	0x00042d68

0001563c <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)>:
   1563c:	e2400010 	sub	r0, r0, #16
   15640:	eaffffce 	b	15580 <CLAN7800Device::SendFrame(void const*, unsigned int)>

00015644 <non-virtual thunk to CLAN7800Device::GetMACAddress() const>:
   15644:	e280000c 	add	r0, r0, #12
   15648:	e12fff1e 	bx	lr

0001564c <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   1564c:	e92d4010 	push	{r4, lr}
   15650:	e1a04000 	mov	r4, r0
   15654:	ebffe863 	bl	f7e8 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15658:	e3a02000 	mov	r2, #0
   1565c:	e59f3024 	ldr	r3, [pc, #36]	; 15688 <CLAN7800Device::CLAN7800Device(CUSBFunction*)+0x3c>
   15660:	e5842014 	str	r2, [r4, #20]
   15664:	e2831008 	add	r1, r3, #8
   15668:	e2833048 	add	r3, r3, #72	; 0x48
   1566c:	e5841000 	str	r1, [r4]
   15670:	e5843010 	str	r3, [r4, #16]
   15674:	e5842018 	str	r2, [r4, #24]
   15678:	e284001c 	add	r0, r4, #28
   1567c:	eb00556c 	bl	2ac34 <CMACAddress::CMACAddress()>
   15680:	e1a00004 	mov	r0, r4
   15684:	e8bd8010 	pop	{r4, pc}
   15688:	00042e80 	.word	0x00042e80

0001568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   1568c:	e92d4070 	push	{r4, r5, r6, lr}
   15690:	e24dd018 	sub	sp, sp, #24
   15694:	e1a04001 	mov	r4, r1
   15698:	e1a05000 	mov	r5, r0
   1569c:	e58d2014 	str	r2, [sp, #20]
   156a0:	ebffe8c4 	bl	f9b8 <CUSBFunction::GetHost() const>
   156a4:	e1a06000 	mov	r6, r0
   156a8:	e1a00005 	mov	r0, r5
   156ac:	ebffe8b6 	bl	f98c <CUSBFunction::GetEndpoint0() const>
   156b0:	e3a05000 	mov	r5, #0
   156b4:	e3a02004 	mov	r2, #4
   156b8:	e6ffc074 	uxth	ip, r4
   156bc:	e28d3014 	add	r3, sp, #20
   156c0:	e1a01000 	mov	r1, r0
   156c4:	e58d200c 	str	r2, [sp, #12]
   156c8:	e58d3008 	str	r3, [sp, #8]
   156cc:	e1a00006 	mov	r0, r6
   156d0:	e3a030a0 	mov	r3, #160	; 0xa0
   156d4:	e3a02040 	mov	r2, #64	; 0x40
   156d8:	e58dc004 	str	ip, [sp, #4]
   156dc:	e58d5000 	str	r5, [sp]
   156e0:	ebfff460 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   156e4:	e1500005 	cmp	r0, r5
   156e8:	a3a00001 	movge	r0, #1
   156ec:	ba000001 	blt	156f8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x6c>
   156f0:	e28dd018 	add	sp, sp, #24
   156f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   156f8:	eb004512 	bl	26b48 <CLogger::Get()>
   156fc:	e3a02002 	mov	r2, #2
   15700:	e59f3014 	ldr	r3, [pc, #20]	; 1571c <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x90>
   15704:	e59f1014 	ldr	r1, [pc, #20]	; 15720 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x94>
   15708:	e58d4000 	str	r4, [sp]
   1570c:	eb00444f 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15710:	e1a00005 	mov	r0, r5
   15714:	e28dd018 	add	sp, sp, #24
   15718:	e8bd8070 	pop	{r4, r5, r6, pc}
   1571c:	00042d80 	.word	0x00042d80
   15720:	00042ef0 	.word	0x00042ef0

00015724 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   15724:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15728:	e24dd014 	sub	sp, sp, #20
   1572c:	e1a05001 	mov	r5, r1
   15730:	e1a07002 	mov	r7, r2
   15734:	e1a04000 	mov	r4, r0
   15738:	ebffe89e 	bl	f9b8 <CUSBFunction::GetHost() const>
   1573c:	e1a06000 	mov	r6, r0
   15740:	e1a00004 	mov	r0, r4
   15744:	ebffe890 	bl	f98c <CUSBFunction::GetEndpoint0() const>
   15748:	e3a04000 	mov	r4, #0
   1574c:	e3a03004 	mov	r3, #4
   15750:	e6ff2075 	uxth	r2, r5
   15754:	e1a01000 	mov	r1, r0
   15758:	e58d2004 	str	r2, [sp, #4]
   1575c:	e58d300c 	str	r3, [sp, #12]
   15760:	e1a00006 	mov	r0, r6
   15764:	e3a030a1 	mov	r3, #161	; 0xa1
   15768:	e3a020c0 	mov	r2, #192	; 0xc0
   1576c:	e58d7008 	str	r7, [sp, #8]
   15770:	e58d4000 	str	r4, [sp]
   15774:	ebfff43b 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15778:	e3500004 	cmp	r0, #4
   1577c:	03a00001 	moveq	r0, #1
   15780:	1a000001 	bne	1578c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x68>
   15784:	e28dd014 	add	sp, sp, #20
   15788:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1578c:	eb0044ed 	bl	26b48 <CLogger::Get()>
   15790:	e3a02002 	mov	r2, #2
   15794:	e59f3014 	ldr	r3, [pc, #20]	; 157b0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x8c>
   15798:	e59f1014 	ldr	r1, [pc, #20]	; 157b4 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x90>
   1579c:	e58d5000 	str	r5, [sp]
   157a0:	eb00442a 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   157a4:	e1a00004 	mov	r0, r4
   157a8:	e28dd014 	add	sp, sp, #20
   157ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   157b0:	00042d9c 	.word	0x00042d9c
   157b4:	00042ef0 	.word	0x00042ef0

000157b8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   157b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157bc:	e24dd00c 	sub	sp, sp, #12
   157c0:	e1a07000 	mov	r7, r0
   157c4:	e1a08001 	mov	r8, r1
   157c8:	e1a09002 	mov	r9, r2
   157cc:	e1a0a003 	mov	sl, r3
   157d0:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   157d4:	e59db034 	ldr	fp, [sp, #52]	; 0x34
   157d8:	eb0051bf 	bl	29edc <CTimer::Get()>
   157dc:	e2504000 	subs	r4, r0, #0
   157e0:	0a000019 	beq	1584c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x94>
   157e4:	eb004f0a 	bl	29414 <CTimer::GetTicks() const>
   157e8:	e1a06000 	mov	r6, r0
   157ec:	ea00000e 	b	1582c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   157f0:	e1a00004 	mov	r0, r4
   157f4:	eb004f06 	bl	29414 <CTimer::GetTicks() const>
   157f8:	e0400006 	sub	r0, r0, r6
   157fc:	e150000b 	cmp	r0, fp
   15800:	2a00000e 	bcs	15840 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   15804:	e1a01008 	mov	r1, r8
   15808:	e1a00007 	mov	r0, r7
   1580c:	e28d2004 	add	r2, sp, #4
   15810:	ebffffc3 	bl	15724 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   15814:	e3500000 	cmp	r0, #0
   15818:	0a000008 	beq	15840 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   1581c:	e59d3004 	ldr	r3, [sp, #4]
   15820:	e0033009 	and	r3, r3, r9
   15824:	e153000a 	cmp	r3, sl
   15828:	0a000005 	beq	15844 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   1582c:	e3550000 	cmp	r5, #0
   15830:	0affffee 	beq	157f0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   15834:	e1a00005 	mov	r0, r5
   15838:	eb005179 	bl	29e24 <CTimer::SimpleusDelay(unsigned int)>
   1583c:	eaffffeb 	b	157f0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   15840:	e3a00000 	mov	r0, #0
   15844:	e28dd00c 	add	sp, sp, #12
   15848:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1584c:	e59f2008 	ldr	r2, [pc, #8]	; 1585c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa4>
   15850:	e59f1008 	ldr	r1, [pc, #8]	; 15860 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa8>
   15854:	e59f0008 	ldr	r0, [pc, #8]	; 15864 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   15858:	eb003bd2 	bl	247a8 <assertion_failed>
   1585c:	0000028e 	.word	0x0000028e
   15860:	00042cd4 	.word	0x00042cd4
   15864:	00042db8 	.word	0x00042db8

00015868 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   15868:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1586c:	e351001f 	cmp	r1, #31
   15870:	e24dd008 	sub	sp, sp, #8
   15874:	8a000023 	bhi	15908 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xa0>
   15878:	e3a06000 	mov	r6, #0
   1587c:	e3a08064 	mov	r8, #100	; 0x64
   15880:	e1a04001 	mov	r4, r1
   15884:	e1a05002 	mov	r5, r2
   15888:	e1a03006 	mov	r3, r6
   1588c:	e3a02001 	mov	r2, #1
   15890:	e3a01e12 	mov	r1, #288	; 0x120
   15894:	e88d0140 	stm	sp, {r6, r8}
   15898:	e1a07000 	mov	r7, r0
   1589c:	ebffffc5 	bl	157b8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   158a0:	e1500006 	cmp	r0, r6
   158a4:	1a000002 	bne	158b4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x4c>
   158a8:	e3a00000 	mov	r0, #0
   158ac:	e28dd008 	add	sp, sp, #8
   158b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   158b4:	e1a02005 	mov	r2, r5
   158b8:	e3a01f49 	mov	r1, #292	; 0x124
   158bc:	e1a00007 	mov	r0, r7
   158c0:	ebffff71 	bl	1568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   158c4:	e3500000 	cmp	r0, #0
   158c8:	0afffff6 	beq	158a8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   158cc:	e59f2044 	ldr	r2, [pc, #68]	; 15918 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb0>
   158d0:	e3a01e12 	mov	r1, #288	; 0x120
   158d4:	e1a00007 	mov	r0, r7
   158d8:	e1822304 	orr	r2, r2, r4, lsl #6
   158dc:	ebffff6a 	bl	1568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   158e0:	e3500000 	cmp	r0, #0
   158e4:	0affffef 	beq	158a8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   158e8:	e1a03006 	mov	r3, r6
   158ec:	e1a00007 	mov	r0, r7
   158f0:	e3a02001 	mov	r2, #1
   158f4:	e3a01e12 	mov	r1, #288	; 0x120
   158f8:	e88d0140 	stm	sp, {r6, r8}
   158fc:	ebffffad 	bl	157b8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15900:	e28dd008 	add	sp, sp, #8
   15904:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15908:	e59f200c 	ldr	r2, [pc, #12]	; 1591c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb4>
   1590c:	e59f100c 	ldr	r1, [pc, #12]	; 15920 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb8>
   15910:	e59f000c 	ldr	r0, [pc, #12]	; 15924 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xbc>
   15914:	eb003ba3 	bl	247a8 <assertion_failed>
   15918:	00000803 	.word	0x00000803
   1591c:	00000259 	.word	0x00000259
   15920:	00042cd4 	.word	0x00042cd4
   15924:	00042dc4 	.word	0x00042dc4

00015928 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   15928:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1592c:	e351001f 	cmp	r1, #31
   15930:	e24dd010 	sub	sp, sp, #16
   15934:	8a00002d 	bhi	159f0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xc8>
   15938:	e3a05000 	mov	r5, #0
   1593c:	e3a08064 	mov	r8, #100	; 0x64
   15940:	e1a04001 	mov	r4, r1
   15944:	e1a07002 	mov	r7, r2
   15948:	e1a03005 	mov	r3, r5
   1594c:	e3a02001 	mov	r2, #1
   15950:	e3a01e12 	mov	r1, #288	; 0x120
   15954:	e88d0120 	stm	sp, {r5, r8}
   15958:	e1a06000 	mov	r6, r0
   1595c:	ebffff95 	bl	157b8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15960:	e3500000 	cmp	r0, #0
   15964:	1a000001 	bne	15970 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x48>
   15968:	e28dd010 	add	sp, sp, #16
   1596c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15970:	e59f2088 	ldr	r2, [pc, #136]	; 15a00 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xd8>
   15974:	e3a01e12 	mov	r1, #288	; 0x120
   15978:	e1a00006 	mov	r0, r6
   1597c:	e1822304 	orr	r2, r2, r4, lsl #6
   15980:	ebffff41 	bl	1568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15984:	e1500005 	cmp	r0, r5
   15988:	0a000007 	beq	159ac <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x84>
   1598c:	e1a03005 	mov	r3, r5
   15990:	e3a02001 	mov	r2, #1
   15994:	e3a01e12 	mov	r1, #288	; 0x120
   15998:	e1a00006 	mov	r0, r6
   1599c:	e88d0120 	stm	sp, {r5, r8}
   159a0:	ebffff84 	bl	157b8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   159a4:	e3500000 	cmp	r0, #0
   159a8:	1a000002 	bne	159b8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x90>
   159ac:	e3a00000 	mov	r0, #0
   159b0:	e28dd010 	add	sp, sp, #16
   159b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   159b8:	e1a00006 	mov	r0, r6
   159bc:	e3a01f49 	mov	r1, #292	; 0x124
   159c0:	e28d200c 	add	r2, sp, #12
   159c4:	ebffff56 	bl	15724 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   159c8:	e3500000 	cmp	r0, #0
   159cc:	0afffff6 	beq	159ac <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x84>
   159d0:	e3570000 	cmp	r7, #0
   159d4:	159d300c 	ldrne	r3, [sp, #12]
   159d8:	11c730b0 	strhne	r3, [r7]
   159dc:	1affffe1 	bne	15968 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x40>
   159e0:	e3a02fa1 	mov	r2, #644	; 0x284
   159e4:	e59f1018 	ldr	r1, [pc, #24]	; 15a04 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xdc>
   159e8:	e59f0018 	ldr	r0, [pc, #24]	; 15a08 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe0>
   159ec:	eb003b6d 	bl	247a8 <assertion_failed>
   159f0:	e3a02e27 	mov	r2, #624	; 0x270
   159f4:	e59f1008 	ldr	r1, [pc, #8]	; 15a04 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xdc>
   159f8:	e59f000c 	ldr	r0, [pc, #12]	; 15a0c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe4>
   159fc:	eb003b69 	bl	247a8 <assertion_failed>
   15a00:	00000801 	.word	0x00000801
   15a04:	00042cd4 	.word	0x00042cd4
   15a08:	00042dd4 	.word	0x00042dd4
   15a0c:	00042dc4 	.word	0x00042dc4

00015a10 <CLAN7800Device::IsLinkUp()>:
   15a10:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15a14:	e24dd00c 	sub	sp, sp, #12
   15a18:	e3a01001 	mov	r1, #1
   15a1c:	e28d2006 	add	r2, sp, #6
   15a20:	ebffffc0 	bl	15928 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   15a24:	e3500000 	cmp	r0, #0
   15a28:	11dd00b6 	ldrhne	r0, [sp, #6]
   15a2c:	11a00140 	asrne	r0, r0, #2
   15a30:	12000001 	andne	r0, r0, #1
   15a34:	e28dd00c 	add	sp, sp, #12
   15a38:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00015a3c <non-virtual thunk to CLAN7800Device::IsLinkUp()>:
   15a3c:	e2400010 	sub	r0, r0, #16
   15a40:	eafffff2 	b	15a10 <CLAN7800Device::IsLinkUp()>

00015a44 <CLAN7800Device::GetLinkSpeed()>:
   15a44:	e92d4010 	push	{r4, lr}
   15a48:	e3a02000 	mov	r2, #0
   15a4c:	e3a0101f 	mov	r1, #31
   15a50:	e24dd008 	sub	sp, sp, #8
   15a54:	e1a04000 	mov	r4, r0
   15a58:	ebffff82 	bl	15868 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   15a5c:	e3500000 	cmp	r0, #0
   15a60:	0a00000e 	beq	15aa0 <CLAN7800Device::GetLinkSpeed()+0x5c>
   15a64:	e1a00004 	mov	r0, r4
   15a68:	e3a0101c 	mov	r1, #28
   15a6c:	e28d2006 	add	r2, sp, #6
   15a70:	ebffffac 	bl	15928 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   15a74:	e3500000 	cmp	r0, #0
   15a78:	0a000008 	beq	15aa0 <CLAN7800Device::GetLinkSpeed()+0x5c>
   15a7c:	e1dd30b6 	ldrh	r3, [sp, #6]
   15a80:	e3130901 	tst	r3, #16384	; 0x4000
   15a84:	1a00000d 	bne	15ac0 <CLAN7800Device::GetLinkSpeed()+0x7c>
   15a88:	e3130902 	tst	r3, #32768	; 0x8000
   15a8c:	0a000003 	beq	15aa0 <CLAN7800Device::GetLinkSpeed()+0x5c>
   15a90:	e1a031c3 	asr	r3, r3, #3
   15a94:	e2033007 	and	r3, r3, #7
   15a98:	e3530007 	cmp	r3, #7
   15a9c:	1a000002 	bne	15aac <CLAN7800Device::GetLinkSpeed()+0x68>
   15aa0:	e3a00006 	mov	r0, #6
   15aa4:	e28dd008 	add	sp, sp, #8
   15aa8:	e8bd8010 	pop	{r4, pc}
   15aac:	e59f201c 	ldr	r2, [pc, #28]	; 15ad0 <CLAN7800Device::GetLinkSpeed()+0x8c>
   15ab0:	e0823003 	add	r3, r2, r3
   15ab4:	e5d30078 	ldrb	r0, [r3, #120]	; 0x78
   15ab8:	e28dd008 	add	sp, sp, #8
   15abc:	e8bd8010 	pop	{r4, pc}
   15ac0:	e59f200c 	ldr	r2, [pc, #12]	; 15ad4 <CLAN7800Device::GetLinkSpeed()+0x90>
   15ac4:	e59f100c 	ldr	r1, [pc, #12]	; 15ad8 <CLAN7800Device::GetLinkSpeed()+0x94>
   15ac8:	e59f000c 	ldr	r0, [pc, #12]	; 15adc <CLAN7800Device::GetLinkSpeed()+0x98>
   15acc:	eb003b35 	bl	247a8 <assertion_failed>
   15ad0:	00042e80 	.word	0x00042e80
   15ad4:	00000203 	.word	0x00000203
   15ad8:	00042cd4 	.word	0x00042cd4
   15adc:	00042de0 	.word	0x00042de0

00015ae0 <non-virtual thunk to CLAN7800Device::GetLinkSpeed()>:
   15ae0:	e2400010 	sub	r0, r0, #16
   15ae4:	eaffffd6 	b	15a44 <CLAN7800Device::GetLinkSpeed()>

00015ae8 <CLAN7800Device::InitPHY()>:
   15ae8:	e92d4010 	push	{r4, lr}
   15aec:	e3a02000 	mov	r2, #0
   15af0:	e3a0101f 	mov	r1, #31
   15af4:	e24dd008 	sub	sp, sp, #8
   15af8:	e1a04000 	mov	r4, r0
   15afc:	ebffff59 	bl	15868 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   15b00:	e3500000 	cmp	r0, #0
   15b04:	1a000001 	bne	15b10 <CLAN7800Device::InitPHY()+0x28>
   15b08:	e28dd008 	add	sp, sp, #8
   15b0c:	e8bd8010 	pop	{r4, pc}
   15b10:	e3a0101d 	mov	r1, #29
   15b14:	e1a00004 	mov	r0, r4
   15b18:	e28d2006 	add	r2, sp, #6
   15b1c:	ebffff81 	bl	15928 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   15b20:	e3500000 	cmp	r0, #0
   15b24:	0afffff7 	beq	15b08 <CLAN7800Device::InitPHY()+0x20>
   15b28:	e1dd20b6 	ldrh	r2, [sp, #6]
   15b2c:	e1a00004 	mov	r0, r4
   15b30:	e3c220ff 	bic	r2, r2, #255	; 0xff
   15b34:	e3822061 	orr	r2, r2, #97	; 0x61
   15b38:	e3a0101d 	mov	r1, #29
   15b3c:	e1cd20b6 	strh	r2, [sp, #6]
   15b40:	ebffff48 	bl	15868 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   15b44:	e28dd008 	add	sp, sp, #8
   15b48:	e8bd8010 	pop	{r4, pc}

00015b4c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   15b4c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15b50:	e24dd00c 	sub	sp, sp, #12
   15b54:	e1a05002 	mov	r5, r2
   15b58:	e28d2004 	add	r2, sp, #4
   15b5c:	e1a07003 	mov	r7, r3
   15b60:	e1a06000 	mov	r6, r0
   15b64:	e1a04001 	mov	r4, r1
   15b68:	ebfffeed 	bl	15724 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   15b6c:	e3500000 	cmp	r0, #0
   15b70:	0a000006 	beq	15b90 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x44>
   15b74:	e59d2004 	ldr	r2, [sp, #4]
   15b78:	e1a01004 	mov	r1, r4
   15b7c:	e0073002 	and	r3, r7, r2
   15b80:	e1832005 	orr	r2, r3, r5
   15b84:	e1a00006 	mov	r0, r6
   15b88:	e58d2004 	str	r2, [sp, #4]
   15b8c:	ebfffebe 	bl	1568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15b90:	e28dd00c 	add	sp, sp, #12
   15b94:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00015b98 <CLAN7800Device::InitMACAddress()>:
   15b98:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15b9c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   15ba0:	e3a01000 	mov	r1, #0
   15ba4:	e1a04000 	mov	r4, r0
   15ba8:	e28d000c 	add	r0, sp, #12
   15bac:	eb003b1e 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   15bb0:	e3a03000 	mov	r3, #0
   15bb4:	e59f10f4 	ldr	r1, [pc, #244]	; 15cb0 <CLAN7800Device::InitMACAddress()+0x118>
   15bb8:	e58d3000 	str	r3, [sp]
   15bbc:	e28d000c 	add	r0, sp, #12
   15bc0:	e3a03014 	mov	r3, #20
   15bc4:	e28d2024 	add	r2, sp, #36	; 0x24
   15bc8:	eb003b23 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   15bcc:	e3500000 	cmp	r0, #0
   15bd0:	1a000005 	bne	15bec <CLAN7800Device::InitMACAddress()+0x54>
   15bd4:	e3a04000 	mov	r4, #0
   15bd8:	e28d000c 	add	r0, sp, #12
   15bdc:	eb003b19 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   15be0:	e1a00004 	mov	r0, r4
   15be4:	e28dd03c 	add	sp, sp, #60	; 0x3c
   15be8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15bec:	e284601c 	add	r6, r4, #28
   15bf0:	e1a00006 	mov	r0, r6
   15bf4:	e28d1030 	add	r1, sp, #48	; 0x30
   15bf8:	eb00542e 	bl	2acb8 <CMACAddress::Set(unsigned char const*)>
   15bfc:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   15c00:	e3a01f47 	mov	r1, #284	; 0x11c
   15c04:	e1a02005 	mov	r2, r5
   15c08:	e1a00004 	mov	r0, r4
   15c0c:	e1dd73b4 	ldrh	r7, [sp, #52]	; 0x34
   15c10:	ebfffe9d 	bl	1568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15c14:	e3500000 	cmp	r0, #0
   15c18:	0affffed 	beq	15bd4 <CLAN7800Device::InitMACAddress()+0x3c>
   15c1c:	e1a02007 	mov	r2, r7
   15c20:	e3a01f46 	mov	r1, #280	; 0x118
   15c24:	e1a00004 	mov	r0, r4
   15c28:	ebfffe97 	bl	1568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15c2c:	e3500000 	cmp	r0, #0
   15c30:	0affffe7 	beq	15bd4 <CLAN7800Device::InitMACAddress()+0x3c>
   15c34:	e1a02005 	mov	r2, r5
   15c38:	e1a00004 	mov	r0, r4
   15c3c:	e59f1070 	ldr	r1, [pc, #112]	; 15cb4 <CLAN7800Device::InitMACAddress()+0x11c>
   15c40:	ebfffe91 	bl	1568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15c44:	e3500000 	cmp	r0, #0
   15c48:	0affffe1 	beq	15bd4 <CLAN7800Device::InitMACAddress()+0x3c>
   15c4c:	e1a00004 	mov	r0, r4
   15c50:	e3a01b01 	mov	r1, #1024	; 0x400
   15c54:	e3872102 	orr	r2, r7, #-2147483648	; 0x80000000
   15c58:	ebfffe8b 	bl	1568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15c5c:	e2504000 	subs	r4, r0, #0
   15c60:	0affffdb 	beq	15bd4 <CLAN7800Device::InitMACAddress()+0x3c>
   15c64:	e28d0014 	add	r0, sp, #20
   15c68:	eb0047a7 	bl	27b0c <CString::CString()>
   15c6c:	e28d1014 	add	r1, sp, #20
   15c70:	e1a00006 	mov	r0, r6
   15c74:	eb005469 	bl	2ae20 <CMACAddress::Format(CString*) const>
   15c78:	eb0043b2 	bl	26b48 <CLogger::Get()>
   15c7c:	e1a05000 	mov	r5, r0
   15c80:	e28d0014 	add	r0, sp, #20
   15c84:	eb0047b8 	bl	27b6c <CString::operator char const*() const>
   15c88:	e1a02000 	mov	r2, r0
   15c8c:	e59f3024 	ldr	r3, [pc, #36]	; 15cb8 <CLAN7800Device::InitMACAddress()+0x120>
   15c90:	e1a00005 	mov	r0, r5
   15c94:	e58d2000 	str	r2, [sp]
   15c98:	e59f101c 	ldr	r1, [pc, #28]	; 15cbc <CLAN7800Device::InitMACAddress()+0x124>
   15c9c:	e3a02004 	mov	r2, #4
   15ca0:	eb0042ea 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15ca4:	e28d0014 	add	r0, sp, #20
   15ca8:	eb004764 	bl	27a40 <CString::~CString()>
   15cac:	eaffffc9 	b	15bd8 <CLAN7800Device::InitMACAddress()+0x40>
   15cb0:	00010003 	.word	0x00010003
   15cb4:	00000404 	.word	0x00000404
   15cb8:	00042e08 	.word	0x00042e08
   15cbc:	00042ef0 	.word	0x00042ef0

00015cc0 <CLAN7800Device::Configure()>:
   15cc0:	e92d4070 	push	{r4, r5, r6, lr}
   15cc4:	e24dd018 	sub	sp, sp, #24
   15cc8:	e1a05000 	mov	r5, r0
   15ccc:	ebffe718 	bl	f934 <CUSBFunction::GetNumEndpoints() const>
   15cd0:	e3500003 	cmp	r0, #3
   15cd4:	0a000004 	beq	15cec <CLAN7800Device::Configure()+0x2c>
   15cd8:	ea00004d 	b	15e14 <CLAN7800Device::Configure()+0x154>
   15cdc:	e5d43003 	ldrb	r3, [r4, #3]
   15ce0:	e203303f 	and	r3, r3, #63	; 0x3f
   15ce4:	e3530002 	cmp	r3, #2
   15ce8:	0a000022 	beq	15d78 <CLAN7800Device::Configure()+0xb8>
   15cec:	e3a01005 	mov	r1, #5
   15cf0:	e1a00005 	mov	r0, r5
   15cf4:	ebffe73a 	bl	f9e4 <CUSBFunction::GetDescriptor(unsigned char)>
   15cf8:	e2504000 	subs	r4, r0, #0
   15cfc:	1afffff6 	bne	15cdc <CLAN7800Device::Configure()+0x1c>
   15d00:	e5953014 	ldr	r3, [r5, #20]
   15d04:	e1a00005 	mov	r0, r5
   15d08:	e3530000 	cmp	r3, #0
   15d0c:	0a00003a 	beq	15dfc <CLAN7800Device::Configure()+0x13c>
   15d10:	e5953018 	ldr	r3, [r5, #24]
   15d14:	e3530000 	cmp	r3, #0
   15d18:	0a000037 	beq	15dfc <CLAN7800Device::Configure()+0x13c>
   15d1c:	ebffe648 	bl	f644 <CUSBFunction::Configure()>
   15d20:	e2506000 	subs	r6, r0, #0
   15d24:	0a0000d7 	beq	16088 <CLAN7800Device::Configure()+0x3c8>
   15d28:	e1a01004 	mov	r1, r4
   15d2c:	e1a00005 	mov	r0, r5
   15d30:	e28d2014 	add	r2, sp, #20
   15d34:	ebfffe7a 	bl	15724 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   15d38:	e3500000 	cmp	r0, #0
   15d3c:	0a000002 	beq	15d4c <CLAN7800Device::Configure()+0x8c>
   15d40:	e1dd31b6 	ldrh	r3, [sp, #22]
   15d44:	e3530b1e 	cmp	r3, #30720	; 0x7800
   15d48:	0a000038 	beq	15e30 <CLAN7800Device::Configure()+0x170>
   15d4c:	e3a06000 	mov	r6, #0
   15d50:	eb00437c 	bl	26b48 <CLogger::Get()>
   15d54:	e1dd21b6 	ldrh	r2, [sp, #22]
   15d58:	e59f33b0 	ldr	r3, [pc, #944]	; 16110 <CLAN7800Device::Configure()+0x450>
   15d5c:	e58d2000 	str	r2, [sp]
   15d60:	e59f13ac 	ldr	r1, [pc, #940]	; 16114 <CLAN7800Device::Configure()+0x454>
   15d64:	e3a02001 	mov	r2, #1
   15d68:	eb0042b8 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15d6c:	e1a00006 	mov	r0, r6
   15d70:	e28dd018 	add	sp, sp, #24
   15d74:	e8bd8070 	pop	{r4, r5, r6, pc}
   15d78:	e1d430d2 	ldrsb	r3, [r4, #2]
   15d7c:	e3530000 	cmp	r3, #0
   15d80:	ba00000e 	blt	15dc0 <CLAN7800Device::Configure()+0x100>
   15d84:	e5953018 	ldr	r3, [r5, #24]
   15d88:	e1a00005 	mov	r0, r5
   15d8c:	e3530000 	cmp	r3, #0
   15d90:	1a000019 	bne	15dfc <CLAN7800Device::Configure()+0x13c>
   15d94:	ebffe6f2 	bl	f964 <CUSBFunction::GetDevice() const>
   15d98:	e1a01000 	mov	r1, r0
   15d9c:	e3a00014 	mov	r0, #20
   15da0:	e58d100c 	str	r1, [sp, #12]
   15da4:	eb005487 	bl	2afc8 <operator new(unsigned int)>
   15da8:	e1a06000 	mov	r6, r0
   15dac:	e1a02004 	mov	r2, r4
   15db0:	e59d100c 	ldr	r1, [sp, #12]
   15db4:	ebffe528 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15db8:	e5856018 	str	r6, [r5, #24]
   15dbc:	eaffffca 	b	15cec <CLAN7800Device::Configure()+0x2c>
   15dc0:	e5953014 	ldr	r3, [r5, #20]
   15dc4:	e1a00005 	mov	r0, r5
   15dc8:	e3530000 	cmp	r3, #0
   15dcc:	1a00000a 	bne	15dfc <CLAN7800Device::Configure()+0x13c>
   15dd0:	ebffe6e3 	bl	f964 <CUSBFunction::GetDevice() const>
   15dd4:	e1a01000 	mov	r1, r0
   15dd8:	e3a00014 	mov	r0, #20
   15ddc:	e58d100c 	str	r1, [sp, #12]
   15de0:	eb005478 	bl	2afc8 <operator new(unsigned int)>
   15de4:	e1a06000 	mov	r6, r0
   15de8:	e1a02004 	mov	r2, r4
   15dec:	e59d100c 	ldr	r1, [sp, #12]
   15df0:	ebffe519 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15df4:	e5856014 	str	r6, [r5, #20]
   15df8:	eaffffbb 	b	15cec <CLAN7800Device::Configure()+0x2c>
   15dfc:	e59f1310 	ldr	r1, [pc, #784]	; 16114 <CLAN7800Device::Configure()+0x454>
   15e00:	ebffe702 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   15e04:	e3a06000 	mov	r6, #0
   15e08:	e1a00006 	mov	r0, r6
   15e0c:	e28dd018 	add	sp, sp, #24
   15e10:	e8bd8070 	pop	{r4, r5, r6, pc}
   15e14:	e3a06000 	mov	r6, #0
   15e18:	e1a00005 	mov	r0, r5
   15e1c:	e59f12f0 	ldr	r1, [pc, #752]	; 16114 <CLAN7800Device::Configure()+0x454>
   15e20:	ebffe6fa 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   15e24:	e1a00006 	mov	r0, r6
   15e28:	e28dd018 	add	sp, sp, #24
   15e2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   15e30:	e3e03000 	mvn	r3, #0
   15e34:	e3a02002 	mov	r2, #2
   15e38:	e3a01010 	mov	r1, #16
   15e3c:	e1a00005 	mov	r0, r5
   15e40:	ebffff41 	bl	15b4c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15e44:	e3500000 	cmp	r0, #0
   15e48:	0a000096 	beq	160a8 <CLAN7800Device::Configure()+0x3e8>
   15e4c:	e3a01064 	mov	r1, #100	; 0x64
   15e50:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   15e54:	e58d1004 	str	r1, [sp, #4]
   15e58:	e58d2000 	str	r2, [sp]
   15e5c:	e1a03004 	mov	r3, r4
   15e60:	e3a02002 	mov	r2, #2
   15e64:	e3a01010 	mov	r1, #16
   15e68:	e1a00005 	mov	r0, r5
   15e6c:	ebfffe51 	bl	157b8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15e70:	e3500000 	cmp	r0, #0
   15e74:	0a00008b 	beq	160a8 <CLAN7800Device::Configure()+0x3e8>
   15e78:	e1a00005 	mov	r0, r5
   15e7c:	ebffff45 	bl	15b98 <CLAN7800Device::InitMACAddress()>
   15e80:	e2506000 	subs	r6, r0, #0
   15e84:	0a000095 	beq	160e0 <CLAN7800Device::Configure()+0x420>
   15e88:	e3a02018 	mov	r2, #24
   15e8c:	e3a01090 	mov	r1, #144	; 0x90
   15e90:	e1a00005 	mov	r0, r5
   15e94:	ebfffdfc 	bl	1568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15e98:	e3500000 	cmp	r0, #0
   15e9c:	0a00008d 	beq	160d8 <CLAN7800Device::Configure()+0x418>
   15ea0:	e3a02b02 	mov	r2, #2048	; 0x800
   15ea4:	e3a01094 	mov	r1, #148	; 0x94
   15ea8:	e1a00005 	mov	r0, r5
   15eac:	ebfffdf6 	bl	1568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15eb0:	e3500000 	cmp	r0, #0
   15eb4:	0a000087 	beq	160d8 <CLAN7800Device::Configure()+0x418>
   15eb8:	e3e03010 	mvn	r3, #16
   15ebc:	e3a02603 	mov	r2, #3145728	; 0x300000
   15ec0:	e3a01010 	mov	r1, #16
   15ec4:	e1a00005 	mov	r0, r5
   15ec8:	ebffff1f 	bl	15b4c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15ecc:	e3500000 	cmp	r0, #0
   15ed0:	0a000080 	beq	160d8 <CLAN7800Device::Configure()+0x418>
   15ed4:	e3e03040 	mvn	r3, #64	; 0x40
   15ed8:	e3a02020 	mov	r2, #32
   15edc:	e3a01080 	mov	r1, #128	; 0x80
   15ee0:	e1a00005 	mov	r0, r5
   15ee4:	ebffff18 	bl	15b4c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15ee8:	e3500000 	cmp	r0, #0
   15eec:	0a000079 	beq	160d8 <CLAN7800Device::Configure()+0x418>
   15ef0:	e3a02017 	mov	r2, #23
   15ef4:	e3a010c8 	mov	r1, #200	; 0xc8
   15ef8:	e1a00005 	mov	r0, r5
   15efc:	ebfffde2 	bl	1568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15f00:	e3500000 	cmp	r0, #0
   15f04:	0a000073 	beq	160d8 <CLAN7800Device::Configure()+0x418>
   15f08:	e3a02017 	mov	r2, #23
   15f0c:	e3a010cc 	mov	r1, #204	; 0xcc
   15f10:	e1a00005 	mov	r0, r5
   15f14:	ebfffddc 	bl	1568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15f18:	e3500000 	cmp	r0, #0
   15f1c:	0a00006d 	beq	160d8 <CLAN7800Device::Configure()+0x418>
   15f20:	e3a02000 	mov	r2, #0
   15f24:	e3a01098 	mov	r1, #152	; 0x98
   15f28:	e1a00005 	mov	r0, r5
   15f2c:	ebfffdd6 	bl	1568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15f30:	e3500000 	cmp	r0, #0
   15f34:	0a000067 	beq	160d8 <CLAN7800Device::Configure()+0x418>
   15f38:	e3e02000 	mvn	r2, #0
   15f3c:	e3a0100c 	mov	r1, #12
   15f40:	e1a00005 	mov	r0, r5
   15f44:	ebfffdd0 	bl	1568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15f48:	e3500000 	cmp	r0, #0
   15f4c:	0a000061 	beq	160d8 <CLAN7800Device::Configure()+0x418>
   15f50:	e3a02000 	mov	r2, #0
   15f54:	e3a01f43 	mov	r1, #268	; 0x10c
   15f58:	e1a00005 	mov	r0, r5
   15f5c:	ebfffdca 	bl	1568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15f60:	e3500000 	cmp	r0, #0
   15f64:	0a00005b 	beq	160d8 <CLAN7800Device::Configure()+0x418>
   15f68:	e3a02000 	mov	r2, #0
   15f6c:	e3a010d0 	mov	r1, #208	; 0xd0
   15f70:	e1a00005 	mov	r0, r5
   15f74:	ebfffdc4 	bl	1568c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15f78:	e3500000 	cmp	r0, #0
   15f7c:	0a000055 	beq	160d8 <CLAN7800Device::Configure()+0x418>
   15f80:	e3e03000 	mvn	r3, #0
   15f84:	e3a010b0 	mov	r1, #176	; 0xb0
   15f88:	e1a00005 	mov	r0, r5
   15f8c:	e59f2184 	ldr	r2, [pc, #388]	; 16118 <CLAN7800Device::Configure()+0x458>
   15f90:	ebfffeed 	bl	15b4c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15f94:	e3500000 	cmp	r0, #0
   15f98:	0a00004e 	beq	160d8 <CLAN7800Device::Configure()+0x418>
   15f9c:	e3e03000 	mvn	r3, #0
   15fa0:	e3a02010 	mov	r2, #16
   15fa4:	e3a01014 	mov	r1, #20
   15fa8:	e1a00005 	mov	r0, r5
   15fac:	ebfffee6 	bl	15b4c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15fb0:	e3500000 	cmp	r0, #0
   15fb4:	0a000042 	beq	160c4 <CLAN7800Device::Configure()+0x404>
   15fb8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   15fbc:	e3a03064 	mov	r3, #100	; 0x64
   15fc0:	e3a01014 	mov	r1, #20
   15fc4:	e1cd20f0 	strd	r2, [sp]
   15fc8:	e1a00005 	mov	r0, r5
   15fcc:	e3a03080 	mov	r3, #128	; 0x80
   15fd0:	e3a02090 	mov	r2, #144	; 0x90
   15fd4:	ebfffdf7 	bl	157b8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15fd8:	e3500000 	cmp	r0, #0
   15fdc:	0a000038 	beq	160c4 <CLAN7800Device::Configure()+0x404>
   15fe0:	e3e03000 	mvn	r3, #0
   15fe4:	e3a02b06 	mov	r2, #6144	; 0x1800
   15fe8:	e3a01c01 	mov	r1, #256	; 0x100
   15fec:	e1a00005 	mov	r0, r5
   15ff0:	ebfffed5 	bl	15b4c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15ff4:	e3500000 	cmp	r0, #0
   15ff8:	0a000036 	beq	160d8 <CLAN7800Device::Configure()+0x418>
   15ffc:	e3e03000 	mvn	r3, #0
   16000:	e3a02001 	mov	r2, #1
   16004:	e3a01f42 	mov	r1, #264	; 0x108
   16008:	e1a00005 	mov	r0, r5
   1600c:	ebfffece 	bl	15b4c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16010:	e3500000 	cmp	r0, #0
   16014:	0a00002f 	beq	160d8 <CLAN7800Device::Configure()+0x418>
   16018:	e3e03000 	mvn	r3, #0
   1601c:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   16020:	e3a010c4 	mov	r1, #196	; 0xc4
   16024:	e1a00005 	mov	r0, r5
   16028:	ebfffec7 	bl	15b4c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1602c:	e3500000 	cmp	r0, #0
   16030:	0a000028 	beq	160d8 <CLAN7800Device::Configure()+0x418>
   16034:	e3a01f41 	mov	r1, #260	; 0x104
   16038:	e1a00005 	mov	r0, r5
   1603c:	e59f30d8 	ldr	r3, [pc, #216]	; 1611c <CLAN7800Device::Configure()+0x45c>
   16040:	e59f20d8 	ldr	r2, [pc, #216]	; 16120 <CLAN7800Device::Configure()+0x460>
   16044:	ebfffec0 	bl	15b4c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16048:	e3500000 	cmp	r0, #0
   1604c:	0a000021 	beq	160d8 <CLAN7800Device::Configure()+0x418>
   16050:	e3e03000 	mvn	r3, #0
   16054:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   16058:	e3a010c0 	mov	r1, #192	; 0xc0
   1605c:	e1a00005 	mov	r0, r5
   16060:	ebfffeb9 	bl	15b4c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16064:	e3500000 	cmp	r0, #0
   16068:	0a00001a 	beq	160d8 <CLAN7800Device::Configure()+0x418>
   1606c:	e1a00005 	mov	r0, r5
   16070:	ebfffe9c 	bl	15ae8 <CLAN7800Device::InitPHY()>
   16074:	e2506000 	subs	r6, r0, #0
   16078:	0a00001e 	beq	160f8 <CLAN7800Device::Configure()+0x438>
   1607c:	e2850010 	add	r0, r5, #16
   16080:	eb005387 	bl	2aea4 <CNetDevice::AddNetDevice()>
   16084:	eaffff5f 	b	15e08 <CLAN7800Device::Configure()+0x148>
   16088:	eb0042ae 	bl	26b48 <CLogger::Get()>
   1608c:	e3a02001 	mov	r2, #1
   16090:	e59f308c 	ldr	r3, [pc, #140]	; 16124 <CLAN7800Device::Configure()+0x464>
   16094:	e59f1078 	ldr	r1, [pc, #120]	; 16114 <CLAN7800Device::Configure()+0x454>
   16098:	eb0041ec 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1609c:	e1a00006 	mov	r0, r6
   160a0:	e28dd018 	add	sp, sp, #24
   160a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   160a8:	eb0042a6 	bl	26b48 <CLogger::Get()>
   160ac:	e3a02001 	mov	r2, #1
   160b0:	e59f3070 	ldr	r3, [pc, #112]	; 16128 <CLAN7800Device::Configure()+0x468>
   160b4:	e59f1058 	ldr	r1, [pc, #88]	; 16114 <CLAN7800Device::Configure()+0x454>
   160b8:	eb0041e4 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   160bc:	e3a06000 	mov	r6, #0
   160c0:	eaffff50 	b	15e08 <CLAN7800Device::Configure()+0x148>
   160c4:	eb00429f 	bl	26b48 <CLogger::Get()>
   160c8:	e3a02001 	mov	r2, #1
   160cc:	e59f3058 	ldr	r3, [pc, #88]	; 1612c <CLAN7800Device::Configure()+0x46c>
   160d0:	e59f103c 	ldr	r1, [pc, #60]	; 16114 <CLAN7800Device::Configure()+0x454>
   160d4:	eb0041dd 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   160d8:	e3a06000 	mov	r6, #0
   160dc:	eaffff49 	b	15e08 <CLAN7800Device::Configure()+0x148>
   160e0:	eb004298 	bl	26b48 <CLogger::Get()>
   160e4:	e3a02001 	mov	r2, #1
   160e8:	e59f3040 	ldr	r3, [pc, #64]	; 16130 <CLAN7800Device::Configure()+0x470>
   160ec:	e59f1020 	ldr	r1, [pc, #32]	; 16114 <CLAN7800Device::Configure()+0x454>
   160f0:	eb0041d6 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   160f4:	eaffff43 	b	15e08 <CLAN7800Device::Configure()+0x148>
   160f8:	eb004292 	bl	26b48 <CLogger::Get()>
   160fc:	e3a02001 	mov	r2, #1
   16100:	e59f302c 	ldr	r3, [pc, #44]	; 16134 <CLAN7800Device::Configure()+0x474>
   16104:	e59f1008 	ldr	r1, [pc, #8]	; 16114 <CLAN7800Device::Configure()+0x454>
   16108:	eb0041d0 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1610c:	eaffff3d 	b	15e08 <CLAN7800Device::Configure()+0x148>
   16110:	00042e1c 	.word	0x00042e1c
   16114:	00042ef0 	.word	0x00042ef0
   16118:	00000402 	.word	0x00000402
   1611c:	c000ffff 	.word	0xc000ffff
   16120:	05ee0001 	.word	0x05ee0001
   16124:	00041ce4 	.word	0x00041ce4
   16128:	00042e34 	.word	0x00042e34
   1612c:	00042e5c 	.word	0x00042e5c
   16130:	00042e44 	.word	0x00042e44
   16134:	00042e70 	.word	0x00042e70

00016138 <CNetDevice::GetType()>:
   16138:	e3a00000 	mov	r0, #0
   1613c:	e12fff1e 	bx	lr

00016140 <CNetDevice::IsSendFrameAdvisable()>:
   16140:	e3a00001 	mov	r0, #1
   16144:	e12fff1e 	bx	lr

00016148 <CNetDevice::UpdatePHY()>:
   16148:	e3a00000 	mov	r0, #0
   1614c:	e12fff1e 	bx	lr

00016150 <CSMSC951xDevice::GetMACAddress() const>:
   16150:	e280001c 	add	r0, r0, #28
   16154:	e12fff1e 	bx	lr

00016158 <CSMSC951xDevice::~CSMSC951xDevice()>:
   16158:	e92d4070 	push	{r4, r5, r6, lr}
   1615c:	e59f3074 	ldr	r3, [pc, #116]	; 161d8 <CSMSC951xDevice::~CSMSC951xDevice()+0x80>
   16160:	e5905018 	ldr	r5, [r0, #24]
   16164:	e2832040 	add	r2, r3, #64	; 0x40
   16168:	e3550000 	cmp	r5, #0
   1616c:	e1a04000 	mov	r4, r0
   16170:	e5803000 	str	r3, [r0]
   16174:	e5802010 	str	r2, [r0, #16]
   16178:	0a000004 	beq	16190 <CSMSC951xDevice::~CSMSC951xDevice()+0x38>
   1617c:	e1a00005 	mov	r0, r5
   16180:	ebffe499 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   16184:	e1a00005 	mov	r0, r5
   16188:	e3a01014 	mov	r1, #20
   1618c:	eb00539b 	bl	2b000 <operator delete(void*, unsigned int)>
   16190:	e3a03000 	mov	r3, #0
   16194:	e5945014 	ldr	r5, [r4, #20]
   16198:	e5843018 	str	r3, [r4, #24]
   1619c:	e1550003 	cmp	r5, r3
   161a0:	0a000004 	beq	161b8 <CSMSC951xDevice::~CSMSC951xDevice()+0x60>
   161a4:	e1a00005 	mov	r0, r5
   161a8:	ebffe48f 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   161ac:	e1a00005 	mov	r0, r5
   161b0:	e3a01014 	mov	r1, #20
   161b4:	eb005391 	bl	2b000 <operator delete(void*, unsigned int)>
   161b8:	e3a03000 	mov	r3, #0
   161bc:	e284001c 	add	r0, r4, #28
   161c0:	e5843014 	str	r3, [r4, #20]
   161c4:	eb00529d 	bl	2ac40 <CMACAddress::~CMACAddress()>
   161c8:	e1a00004 	mov	r0, r4
   161cc:	ebffe4f3 	bl	f5a0 <CUSBFunction::~CUSBFunction()>
   161d0:	e1a00004 	mov	r0, r4
   161d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   161d8:	00043034 	.word	0x00043034

000161dc <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   161dc:	e2400010 	sub	r0, r0, #16
   161e0:	eaffffdc 	b	16158 <CSMSC951xDevice::~CSMSC951xDevice()>

000161e4 <CSMSC951xDevice::~CSMSC951xDevice()>:
   161e4:	e92d4010 	push	{r4, lr}
   161e8:	e1a04000 	mov	r4, r0
   161ec:	ebffffd9 	bl	16158 <CSMSC951xDevice::~CSMSC951xDevice()>
   161f0:	e1a00004 	mov	r0, r4
   161f4:	e3a01024 	mov	r1, #36	; 0x24
   161f8:	eb005380 	bl	2b000 <operator delete(void*, unsigned int)>
   161fc:	e1a00004 	mov	r0, r4
   16200:	e8bd8010 	pop	{r4, pc}

00016204 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   16204:	e2400010 	sub	r0, r0, #16
   16208:	eafffff5 	b	161e4 <CSMSC951xDevice::~CSMSC951xDevice()>

0001620c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   1620c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16210:	e5903014 	ldr	r3, [r0, #20]
   16214:	e24dd030 	sub	sp, sp, #48	; 0x30
   16218:	e3530000 	cmp	r3, #0
   1621c:	0a000036 	beq	162fc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf0>
   16220:	e3510000 	cmp	r1, #0
   16224:	e1a04001 	mov	r4, r1
   16228:	0a000037 	beq	1630c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x100>
   1622c:	e3a07000 	mov	r7, #0
   16230:	e1a05000 	mov	r5, r0
   16234:	e1a01003 	mov	r1, r3
   16238:	e1a06002 	mov	r6, r2
   1623c:	e3a03d19 	mov	r3, #1600	; 0x640
   16240:	e1a02004 	mov	r2, r4
   16244:	e58d7000 	str	r7, [sp]
   16248:	e28d0008 	add	r0, sp, #8
   1624c:	ebfff86f 	bl	14410 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   16250:	e1a00005 	mov	r0, r5
   16254:	ebffe5d7 	bl	f9b8 <CUSBFunction::GetHost() const>
   16258:	e5903000 	ldr	r3, [r0]
   1625c:	e1a02007 	mov	r2, r7
   16260:	e5933008 	ldr	r3, [r3, #8]
   16264:	e28d1008 	add	r1, sp, #8
   16268:	e12fff33 	blx	r3
   1626c:	e2508000 	subs	r8, r0, #0
   16270:	1a000005 	bne	1628c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x80>
   16274:	e3a08000 	mov	r8, #0
   16278:	e28d0008 	add	r0, sp, #8
   1627c:	ebfff883 	bl	14490 <CUSBRequest::~CUSBRequest()>
   16280:	e1a00008 	mov	r0, r8
   16284:	e28dd030 	add	sp, sp, #48	; 0x30
   16288:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1628c:	e28d0008 	add	r0, sp, #8
   16290:	ebfff88f 	bl	144d4 <CUSBRequest::GetResultLength() const>
   16294:	e3500003 	cmp	r0, #3
   16298:	9afffff5 	bls	16274 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   1629c:	e5945000 	ldr	r5, [r4]
   162a0:	e59f30b4 	ldr	r3, [pc, #180]	; 1635c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x150>
   162a4:	e0033005 	and	r3, r3, r5
   162a8:	e3530000 	cmp	r3, #0
   162ac:	1a00001a 	bne	1631c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x110>
   162b0:	e59f30a8 	ldr	r3, [pc, #168]	; 16360 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x154>
   162b4:	e2402004 	sub	r2, r0, #4
   162b8:	e0033825 	and	r3, r3, r5, lsr #16
   162bc:	e1520003 	cmp	r2, r3
   162c0:	1a00001d 	bne	1633c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x130>
   162c4:	e3520004 	cmp	r2, #4
   162c8:	9a00001f 	bls	1634c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x140>
   162cc:	e2425004 	sub	r5, r2, #4
   162d0:	e1a02005 	mov	r2, r5
   162d4:	e1a00004 	mov	r0, r4
   162d8:	e2841004 	add	r1, r4, #4
   162dc:	eb005153 	bl	2a830 <memcpy>
   162e0:	e3560000 	cmp	r6, #0
   162e4:	15865000 	strne	r5, [r6]
   162e8:	1affffe2 	bne	16278 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   162ec:	e59f2070 	ldr	r2, [pc, #112]	; 16364 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x158>
   162f0:	e59f1070 	ldr	r1, [pc, #112]	; 16368 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   162f4:	e59f0070 	ldr	r0, [pc, #112]	; 1636c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x160>
   162f8:	eb00392a 	bl	247a8 <assertion_failed>
   162fc:	e59f206c 	ldr	r2, [pc, #108]	; 16370 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x164>
   16300:	e59f1060 	ldr	r1, [pc, #96]	; 16368 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   16304:	e59f0068 	ldr	r0, [pc, #104]	; 16374 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x168>
   16308:	eb003926 	bl	247a8 <assertion_failed>
   1630c:	e3a02f45 	mov	r2, #276	; 0x114
   16310:	e59f1050 	ldr	r1, [pc, #80]	; 16368 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   16314:	e59f005c 	ldr	r0, [pc, #92]	; 16378 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x16c>
   16318:	eb003922 	bl	247a8 <assertion_failed>
   1631c:	eb004209 	bl	26b48 <CLogger::Get()>
   16320:	e3a02002 	mov	r2, #2
   16324:	e59f3050 	ldr	r3, [pc, #80]	; 1637c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   16328:	e59f1050 	ldr	r1, [pc, #80]	; 16380 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x174>
   1632c:	e58d5000 	str	r5, [sp]
   16330:	e1a08007 	mov	r8, r7
   16334:	eb004145 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16338:	eaffffce 	b	16278 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   1633c:	e59f2040 	ldr	r2, [pc, #64]	; 16384 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x178>
   16340:	e59f1020 	ldr	r1, [pc, #32]	; 16368 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   16344:	e59f003c 	ldr	r0, [pc, #60]	; 16388 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x17c>
   16348:	eb003916 	bl	247a8 <assertion_failed>
   1634c:	e3a02f4b 	mov	r2, #300	; 0x12c
   16350:	e59f1010 	ldr	r1, [pc, #16]	; 16368 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   16354:	e59f0030 	ldr	r0, [pc, #48]	; 1638c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x180>
   16358:	eb003912 	bl	247a8 <assertion_failed>
   1635c:	400090de 	.word	0x400090de
   16360:	00003fff 	.word	0x00003fff
   16364:	00000137 	.word	0x00000137
   16368:	00042f00 	.word	0x00042f00
   1636c:	00042d54 	.word	0x00042d54
   16370:	00000113 	.word	0x00000113
   16374:	00042ce0 	.word	0x00042ce0
   16378:	0004256c 	.word	0x0004256c
   1637c:	00042cf8 	.word	0x00042cf8
   16380:	0004309c 	.word	0x0004309c
   16384:	0000012b 	.word	0x0000012b
   16388:	00042f10 	.word	0x00042f10
   1638c:	00042d40 	.word	0x00042d40

00016390 <non-virtual thunk to CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   16390:	e2400010 	sub	r0, r0, #16
   16394:	eaffff9c 	b	1620c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>

00016398 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   16398:	e3520d19 	cmp	r2, #1600	; 0x640
   1639c:	8a00001d 	bhi	16418 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x80>
   163a0:	e92d4030 	push	{r4, r5, lr}
   163a4:	e3510000 	cmp	r1, #0
   163a8:	e24dde65 	sub	sp, sp, #1616	; 0x650
   163ac:	e24dd00c 	sub	sp, sp, #12
   163b0:	0a00001a 	beq	16420 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x88>
   163b4:	e1a05000 	mov	r5, r0
   163b8:	e1a04002 	mov	r4, r2
   163bc:	e28d0018 	add	r0, sp, #24
   163c0:	e2403008 	sub	r3, r0, #8
   163c4:	e58d300c 	str	r3, [sp, #12]
   163c8:	eb005118 	bl	2a830 <memcpy>
   163cc:	e5952018 	ldr	r2, [r5, #24]
   163d0:	e3843a03 	orr	r3, r4, #12288	; 0x3000
   163d4:	e3520000 	cmp	r2, #0
   163d8:	e58d4014 	str	r4, [sp, #20]
   163dc:	e58d3010 	str	r3, [sp, #16]
   163e0:	0a000012 	beq	16430 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x98>
   163e4:	e1a00005 	mov	r0, r5
   163e8:	ebffe572 	bl	f9b8 <CUSBFunction::GetHost() const>
   163ec:	e3a0c000 	mov	ip, #0
   163f0:	e5951018 	ldr	r1, [r5, #24]
   163f4:	e59d200c 	ldr	r2, [sp, #12]
   163f8:	e2843008 	add	r3, r4, #8
   163fc:	e58dc000 	str	ip, [sp]
   16400:	ebfff17e 	bl	12a00 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   16404:	e1e00000 	mvn	r0, r0
   16408:	e1a00fa0 	lsr	r0, r0, #31
   1640c:	e28dde65 	add	sp, sp, #1616	; 0x650
   16410:	e28dd00c 	add	sp, sp, #12
   16414:	e8bd8030 	pop	{r4, r5, pc}
   16418:	e3a00000 	mov	r0, #0
   1641c:	e12fff1e 	bx	lr
   16420:	e59f2018 	ldr	r2, [pc, #24]	; 16440 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xa8>
   16424:	e59f1018 	ldr	r1, [pc, #24]	; 16444 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xac>
   16428:	e59f0018 	ldr	r0, [pc, #24]	; 16448 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb0>
   1642c:	eb0038dd 	bl	247a8 <assertion_failed>
   16430:	e59f2014 	ldr	r2, [pc, #20]	; 1644c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb4>
   16434:	e59f1008 	ldr	r1, [pc, #8]	; 16444 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xac>
   16438:	e59f0010 	ldr	r0, [pc, #16]	; 16450 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb8>
   1643c:	eb0038d9 	bl	247a8 <assertion_failed>
   16440:	00000106 	.word	0x00000106
   16444:	00042f00 	.word	0x00042f00
   16448:	0004256c 	.word	0x0004256c
   1644c:	0000010d 	.word	0x0000010d
   16450:	00042d68 	.word	0x00042d68

00016454 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   16454:	e2400010 	sub	r0, r0, #16
   16458:	eaffffce 	b	16398 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>

0001645c <non-virtual thunk to CSMSC951xDevice::GetMACAddress() const>:
   1645c:	e280000c 	add	r0, r0, #12
   16460:	e12fff1e 	bx	lr

00016464 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   16464:	e92d4010 	push	{r4, lr}
   16468:	e1a04000 	mov	r4, r0
   1646c:	ebffe4dd 	bl	f7e8 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   16470:	e3a02000 	mov	r2, #0
   16474:	e59f3024 	ldr	r3, [pc, #36]	; 164a0 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)+0x3c>
   16478:	e5842014 	str	r2, [r4, #20]
   1647c:	e2831008 	add	r1, r3, #8
   16480:	e2833048 	add	r3, r3, #72	; 0x48
   16484:	e5841000 	str	r1, [r4]
   16488:	e5843010 	str	r3, [r4, #16]
   1648c:	e5842018 	str	r2, [r4, #24]
   16490:	e284001c 	add	r0, r4, #28
   16494:	eb0051e6 	bl	2ac34 <CMACAddress::CMACAddress()>
   16498:	e1a00004 	mov	r0, r4
   1649c:	e8bd8010 	pop	{r4, pc}
   164a0:	0004302c 	.word	0x0004302c

000164a4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   164a4:	e92d4070 	push	{r4, r5, r6, lr}
   164a8:	e24dd018 	sub	sp, sp, #24
   164ac:	e1a04001 	mov	r4, r1
   164b0:	e58d2014 	str	r2, [sp, #20]
   164b4:	e1a06000 	mov	r6, r0
   164b8:	ebffe53e 	bl	f9b8 <CUSBFunction::GetHost() const>
   164bc:	e1a05000 	mov	r5, r0
   164c0:	e1a00006 	mov	r0, r6
   164c4:	ebffe530 	bl	f98c <CUSBFunction::GetEndpoint0() const>
   164c8:	e3a0c004 	mov	ip, #4
   164cc:	e3a02000 	mov	r2, #0
   164d0:	e28d3014 	add	r3, sp, #20
   164d4:	e6ff4074 	uxth	r4, r4
   164d8:	e1a01000 	mov	r1, r0
   164dc:	e58d2000 	str	r2, [sp]
   164e0:	e58d3008 	str	r3, [sp, #8]
   164e4:	e1a00005 	mov	r0, r5
   164e8:	e3a030a0 	mov	r3, #160	; 0xa0
   164ec:	e3a02040 	mov	r2, #64	; 0x40
   164f0:	e58d4004 	str	r4, [sp, #4]
   164f4:	e58dc00c 	str	ip, [sp, #12]
   164f8:	ebfff0da 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   164fc:	e1e00000 	mvn	r0, r0
   16500:	e1a00fa0 	lsr	r0, r0, #31
   16504:	e28dd018 	add	sp, sp, #24
   16508:	e8bd8070 	pop	{r4, r5, r6, pc}

0001650c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   1650c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16510:	e24dd014 	sub	sp, sp, #20
   16514:	e1a06002 	mov	r6, r2
   16518:	e1a04001 	mov	r4, r1
   1651c:	e1a07000 	mov	r7, r0
   16520:	ebffe524 	bl	f9b8 <CUSBFunction::GetHost() const>
   16524:	e1a05000 	mov	r5, r0
   16528:	e1a00007 	mov	r0, r7
   1652c:	ebffe516 	bl	f98c <CUSBFunction::GetEndpoint0() const>
   16530:	e3a02004 	mov	r2, #4
   16534:	e3a03000 	mov	r3, #0
   16538:	e6ff4074 	uxth	r4, r4
   1653c:	e1a01000 	mov	r1, r0
   16540:	e58d200c 	str	r2, [sp, #12]
   16544:	e58d3000 	str	r3, [sp]
   16548:	e1a00005 	mov	r0, r5
   1654c:	e3a030a1 	mov	r3, #161	; 0xa1
   16550:	e3a020c0 	mov	r2, #192	; 0xc0
   16554:	e98d0050 	stmib	sp, {r4, r6}
   16558:	ebfff0c2 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1655c:	e2400004 	sub	r0, r0, #4
   16560:	e16f0f10 	clz	r0, r0
   16564:	e1a002a0 	lsr	r0, r0, #5
   16568:	e28dd014 	add	sp, sp, #20
   1656c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00016570 <CSMSC951xDevice::PHYWaitNotBusy()>:
   16570:	e92d4070 	push	{r4, r5, r6, lr}
   16574:	e24dd008 	sub	sp, sp, #8
   16578:	e1a06000 	mov	r6, r0
   1657c:	eb004e56 	bl	29edc <CTimer::Get()>
   16580:	e2504000 	subs	r4, r0, #0
   16584:	0a000013 	beq	165d8 <CSMSC951xDevice::PHYWaitNotBusy()+0x68>
   16588:	eb004ba1 	bl	29414 <CTimer::GetTicks() const>
   1658c:	e1a05000 	mov	r5, r0
   16590:	ea000008 	b	165b8 <CSMSC951xDevice::PHYWaitNotBusy()+0x48>
   16594:	e3a01f45 	mov	r1, #276	; 0x114
   16598:	e1a00006 	mov	r0, r6
   1659c:	e28d2004 	add	r2, sp, #4
   165a0:	ebffffd9 	bl	1650c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   165a4:	e3500000 	cmp	r0, #0
   165a8:	0a000007 	beq	165cc <CSMSC951xDevice::PHYWaitNotBusy()+0x5c>
   165ac:	e59d2004 	ldr	r2, [sp, #4]
   165b0:	e3120001 	tst	r2, #1
   165b4:	0a000005 	beq	165d0 <CSMSC951xDevice::PHYWaitNotBusy()+0x60>
   165b8:	e1a00004 	mov	r0, r4
   165bc:	eb004b94 	bl	29414 <CTimer::GetTicks() const>
   165c0:	e0403005 	sub	r3, r0, r5
   165c4:	e3530063 	cmp	r3, #99	; 0x63
   165c8:	9afffff1 	bls	16594 <CSMSC951xDevice::PHYWaitNotBusy()+0x24>
   165cc:	e3a00000 	mov	r0, #0
   165d0:	e28dd008 	add	sp, sp, #8
   165d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   165d8:	e59f2008 	ldr	r2, [pc, #8]	; 165e8 <CSMSC951xDevice::PHYWaitNotBusy()+0x78>
   165dc:	e59f1008 	ldr	r1, [pc, #8]	; 165ec <CSMSC951xDevice::PHYWaitNotBusy()+0x7c>
   165e0:	e59f0008 	ldr	r0, [pc, #8]	; 165f0 <CSMSC951xDevice::PHYWaitNotBusy()+0x80>
   165e4:	eb00386f 	bl	247a8 <assertion_failed>
   165e8:	0000018e 	.word	0x0000018e
   165ec:	00042f00 	.word	0x00042f00
   165f0:	00042db8 	.word	0x00042db8

000165f4 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   165f4:	e351001f 	cmp	r1, #31
   165f8:	e92d4070 	push	{r4, r5, r6, lr}
   165fc:	8a000017 	bhi	16660 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x6c>
   16600:	e1a04001 	mov	r4, r1
   16604:	e1a06002 	mov	r6, r2
   16608:	e1a05000 	mov	r5, r0
   1660c:	ebffffd7 	bl	16570 <CSMSC951xDevice::PHYWaitNotBusy()>
   16610:	e3500000 	cmp	r0, #0
   16614:	1a000001 	bne	16620 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x2c>
   16618:	e3a00000 	mov	r0, #0
   1661c:	e8bd8070 	pop	{r4, r5, r6, pc}
   16620:	e1a02006 	mov	r2, r6
   16624:	e3a01f46 	mov	r1, #280	; 0x118
   16628:	e1a00005 	mov	r0, r5
   1662c:	ebffff9c 	bl	164a4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16630:	e3500000 	cmp	r0, #0
   16634:	0afffff7 	beq	16618 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   16638:	e59f2030 	ldr	r2, [pc, #48]	; 16670 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x7c>
   1663c:	e3a01f45 	mov	r1, #276	; 0x114
   16640:	e1a00005 	mov	r0, r5
   16644:	e1822304 	orr	r2, r2, r4, lsl #6
   16648:	ebffff95 	bl	164a4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   1664c:	e3500000 	cmp	r0, #0
   16650:	0afffff0 	beq	16618 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   16654:	e1a00005 	mov	r0, r5
   16658:	e8bd4070 	pop	{r4, r5, r6, lr}
   1665c:	eaffffc3 	b	16570 <CSMSC951xDevice::PHYWaitNotBusy()>
   16660:	e59f200c 	ldr	r2, [pc, #12]	; 16674 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x80>
   16664:	e59f100c 	ldr	r1, [pc, #12]	; 16678 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x84>
   16668:	e59f000c 	ldr	r0, [pc, #12]	; 1667c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x88>
   1666c:	eb00384d 	bl	247a8 <assertion_failed>
   16670:	00000803 	.word	0x00000803
   16674:	00000162 	.word	0x00000162
   16678:	00042f00 	.word	0x00042f00
   1667c:	00042dc4 	.word	0x00042dc4

00016680 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   16680:	e92d4070 	push	{r4, r5, r6, lr}
   16684:	e351001f 	cmp	r1, #31
   16688:	e24dd008 	sub	sp, sp, #8
   1668c:	8a000023 	bhi	16720 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xa0>
   16690:	e1a04001 	mov	r4, r1
   16694:	e1a06002 	mov	r6, r2
   16698:	e1a05000 	mov	r5, r0
   1669c:	ebffffb3 	bl	16570 <CSMSC951xDevice::PHYWaitNotBusy()>
   166a0:	e3500000 	cmp	r0, #0
   166a4:	1a000001 	bne	166b0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x30>
   166a8:	e28dd008 	add	sp, sp, #8
   166ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   166b0:	e59f2078 	ldr	r2, [pc, #120]	; 16730 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb0>
   166b4:	e3a01f45 	mov	r1, #276	; 0x114
   166b8:	e1a00005 	mov	r0, r5
   166bc:	e1822304 	orr	r2, r2, r4, lsl #6
   166c0:	ebffff77 	bl	164a4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   166c4:	e3500000 	cmp	r0, #0
   166c8:	0a000003 	beq	166dc <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x5c>
   166cc:	e1a00005 	mov	r0, r5
   166d0:	ebffffa6 	bl	16570 <CSMSC951xDevice::PHYWaitNotBusy()>
   166d4:	e3500000 	cmp	r0, #0
   166d8:	1a000002 	bne	166e8 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x68>
   166dc:	e3a00000 	mov	r0, #0
   166e0:	e28dd008 	add	sp, sp, #8
   166e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   166e8:	e1a00005 	mov	r0, r5
   166ec:	e3a01f46 	mov	r1, #280	; 0x118
   166f0:	e28d2004 	add	r2, sp, #4
   166f4:	ebffff84 	bl	1650c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   166f8:	e3500000 	cmp	r0, #0
   166fc:	0afffff6 	beq	166dc <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x5c>
   16700:	e3560000 	cmp	r6, #0
   16704:	159d3004 	ldrne	r3, [sp, #4]
   16708:	11c630b0 	strhne	r3, [r6]
   1670c:	1affffe5 	bne	166a8 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x28>
   16710:	e59f201c 	ldr	r2, [pc, #28]	; 16734 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb4>
   16714:	e59f101c 	ldr	r1, [pc, #28]	; 16738 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb8>
   16718:	e59f001c 	ldr	r0, [pc, #28]	; 1673c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xbc>
   1671c:	eb003821 	bl	247a8 <assertion_failed>
   16720:	e59f2018 	ldr	r2, [pc, #24]	; 16740 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc0>
   16724:	e59f100c 	ldr	r1, [pc, #12]	; 16738 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb8>
   16728:	e59f0014 	ldr	r0, [pc, #20]	; 16744 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc4>
   1672c:	eb00381d 	bl	247a8 <assertion_failed>
   16730:	00000801 	.word	0x00000801
   16734:	00000185 	.word	0x00000185
   16738:	00042f00 	.word	0x00042f00
   1673c:	00042dd4 	.word	0x00042dd4
   16740:	00000175 	.word	0x00000175
   16744:	00042dc4 	.word	0x00042dc4

00016748 <CSMSC951xDevice::IsLinkUp()>:
   16748:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1674c:	e24dd00c 	sub	sp, sp, #12
   16750:	e3a01001 	mov	r1, #1
   16754:	e28d2006 	add	r2, sp, #6
   16758:	ebffffc8 	bl	16680 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   1675c:	e3500000 	cmp	r0, #0
   16760:	11dd00b6 	ldrhne	r0, [sp, #6]
   16764:	11a00140 	asrne	r0, r0, #2
   16768:	12000001 	andne	r0, r0, #1
   1676c:	e28dd00c 	add	sp, sp, #12
   16770:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00016774 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()>:
   16774:	e2400010 	sub	r0, r0, #16
   16778:	eafffff2 	b	16748 <CSMSC951xDevice::IsLinkUp()>

0001677c <CSMSC951xDevice::GetLinkSpeed()>:
   1677c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   16780:	e24dd00c 	sub	sp, sp, #12
   16784:	e3a0101f 	mov	r1, #31
   16788:	e28d2006 	add	r2, sp, #6
   1678c:	ebffffbb 	bl	16680 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   16790:	e3500000 	cmp	r0, #0
   16794:	0a000007 	beq	167b8 <CSMSC951xDevice::GetLinkSpeed()+0x3c>
   16798:	e1dd30b6 	ldrh	r3, [sp, #6]
   1679c:	e3130a01 	tst	r3, #4096	; 0x1000
   167a0:	0a000004 	beq	167b8 <CSMSC951xDevice::GetLinkSpeed()+0x3c>
   167a4:	e1a03143 	asr	r3, r3, #2
   167a8:	e2033007 	and	r3, r3, #7
   167ac:	e2433001 	sub	r3, r3, #1
   167b0:	e3530005 	cmp	r3, #5
   167b4:	9a000002 	bls	167c4 <CSMSC951xDevice::GetLinkSpeed()+0x48>
   167b8:	e3a00006 	mov	r0, #6
   167bc:	e28dd00c 	add	sp, sp, #12
   167c0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   167c4:	e59f200c 	ldr	r2, [pc, #12]	; 167d8 <CSMSC951xDevice::GetLinkSpeed()+0x5c>
   167c8:	e0823003 	add	r3, r2, r3
   167cc:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
   167d0:	e28dd00c 	add	sp, sp, #12
   167d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   167d8:	0004302c 	.word	0x0004302c

000167dc <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()>:
   167dc:	e2400010 	sub	r0, r0, #16
   167e0:	eaffffe5 	b	1677c <CSMSC951xDevice::GetLinkSpeed()>

000167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   167e4:	e92d4030 	push	{r4, r5, lr}
   167e8:	e1a04002 	mov	r4, r2
   167ec:	e24dd014 	sub	sp, sp, #20
   167f0:	e1a05001 	mov	r5, r1
   167f4:	e28d200c 	add	r2, sp, #12
   167f8:	e1a01004 	mov	r1, r4
   167fc:	ebffff42 	bl	1650c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   16800:	e3500000 	cmp	r0, #0
   16804:	0a000008 	beq	1682c <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x48>
   16808:	eb0040ce 	bl	26b48 <CLogger::Get()>
   1680c:	e59d300c 	ldr	r3, [sp, #12]
   16810:	e3a02004 	mov	r2, #4
   16814:	e88d0028 	stm	sp, {r3, r5}
   16818:	e59f102c 	ldr	r1, [pc, #44]	; 1684c <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   1681c:	e59f302c 	ldr	r3, [pc, #44]	; 16850 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x6c>
   16820:	eb00400a 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16824:	e28dd014 	add	sp, sp, #20
   16828:	e8bd8030 	pop	{r4, r5, pc}
   1682c:	eb0040c5 	bl	26b48 <CLogger::Get()>
   16830:	e3a02001 	mov	r2, #1
   16834:	e59f3018 	ldr	r3, [pc, #24]	; 16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x70>
   16838:	e59f100c 	ldr	r1, [pc, #12]	; 1684c <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   1683c:	e58d4000 	str	r4, [sp]
   16840:	eb004002 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16844:	e28dd014 	add	sp, sp, #20
   16848:	e8bd8030 	pop	{r4, r5, pc}
   1684c:	0004309c 	.word	0x0004309c
   16850:	00042f30 	.word	0x00042f30
   16854:	00042d9c 	.word	0x00042d9c

00016858 <CSMSC951xDevice::DumpRegs()>:
   16858:	e92d4010 	push	{r4, lr}
   1685c:	e1a04000 	mov	r4, r0
   16860:	e3a02000 	mov	r2, #0
   16864:	e59f1134 	ldr	r1, [pc, #308]	; 169a0 <CSMSC951xDevice::DumpRegs()+0x148>
   16868:	ebffffdd 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1686c:	e1a00004 	mov	r0, r4
   16870:	e3a02008 	mov	r2, #8
   16874:	e59f1128 	ldr	r1, [pc, #296]	; 169a4 <CSMSC951xDevice::DumpRegs()+0x14c>
   16878:	ebffffd9 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1687c:	e1a00004 	mov	r0, r4
   16880:	e3a0200c 	mov	r2, #12
   16884:	e59f111c 	ldr	r1, [pc, #284]	; 169a8 <CSMSC951xDevice::DumpRegs()+0x150>
   16888:	ebffffd5 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1688c:	e1a00004 	mov	r0, r4
   16890:	e3a02010 	mov	r2, #16
   16894:	e59f1110 	ldr	r1, [pc, #272]	; 169ac <CSMSC951xDevice::DumpRegs()+0x154>
   16898:	ebffffd1 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1689c:	e1a00004 	mov	r0, r4
   168a0:	e3a02014 	mov	r2, #20
   168a4:	e59f1104 	ldr	r1, [pc, #260]	; 169b0 <CSMSC951xDevice::DumpRegs()+0x158>
   168a8:	ebffffcd 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168ac:	e1a00004 	mov	r0, r4
   168b0:	e3a02018 	mov	r2, #24
   168b4:	e59f10f8 	ldr	r1, [pc, #248]	; 169b4 <CSMSC951xDevice::DumpRegs()+0x15c>
   168b8:	ebffffc9 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168bc:	e1a00004 	mov	r0, r4
   168c0:	e3a02020 	mov	r2, #32
   168c4:	e59f10ec 	ldr	r1, [pc, #236]	; 169b8 <CSMSC951xDevice::DumpRegs()+0x160>
   168c8:	ebffffc5 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168cc:	e1a00004 	mov	r0, r4
   168d0:	e3a02024 	mov	r2, #36	; 0x24
   168d4:	e59f10e0 	ldr	r1, [pc, #224]	; 169bc <CSMSC951xDevice::DumpRegs()+0x164>
   168d8:	ebffffc1 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168dc:	e1a00004 	mov	r0, r4
   168e0:	e3a02028 	mov	r2, #40	; 0x28
   168e4:	e59f10d4 	ldr	r1, [pc, #212]	; 169c0 <CSMSC951xDevice::DumpRegs()+0x168>
   168e8:	ebffffbd 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168ec:	e1a00004 	mov	r0, r4
   168f0:	e3a0202c 	mov	r2, #44	; 0x2c
   168f4:	e59f10c8 	ldr	r1, [pc, #200]	; 169c4 <CSMSC951xDevice::DumpRegs()+0x16c>
   168f8:	ebffffb9 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168fc:	e1a00004 	mov	r0, r4
   16900:	e3a02038 	mov	r2, #56	; 0x38
   16904:	e59f10bc 	ldr	r1, [pc, #188]	; 169c8 <CSMSC951xDevice::DumpRegs()+0x170>
   16908:	ebffffb5 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1690c:	e1a00004 	mov	r0, r4
   16910:	e3a02068 	mov	r2, #104	; 0x68
   16914:	e59f10b0 	ldr	r1, [pc, #176]	; 169cc <CSMSC951xDevice::DumpRegs()+0x174>
   16918:	ebffffb1 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1691c:	e1a00004 	mov	r0, r4
   16920:	e3a0206c 	mov	r2, #108	; 0x6c
   16924:	e59f10a4 	ldr	r1, [pc, #164]	; 169d0 <CSMSC951xDevice::DumpRegs()+0x178>
   16928:	ebffffad 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1692c:	e1a00004 	mov	r0, r4
   16930:	e3a02c01 	mov	r2, #256	; 0x100
   16934:	e59f1098 	ldr	r1, [pc, #152]	; 169d4 <CSMSC951xDevice::DumpRegs()+0x17c>
   16938:	ebffffa9 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1693c:	e1a00004 	mov	r0, r4
   16940:	e3a02f41 	mov	r2, #260	; 0x104
   16944:	e59f108c 	ldr	r1, [pc, #140]	; 169d8 <CSMSC951xDevice::DumpRegs()+0x180>
   16948:	ebffffa5 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1694c:	e1a00004 	mov	r0, r4
   16950:	e3a02f42 	mov	r2, #264	; 0x108
   16954:	e59f1080 	ldr	r1, [pc, #128]	; 169dc <CSMSC951xDevice::DumpRegs()+0x184>
   16958:	ebffffa1 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1695c:	e1a00004 	mov	r0, r4
   16960:	e3a02f43 	mov	r2, #268	; 0x10c
   16964:	e59f1074 	ldr	r1, [pc, #116]	; 169e0 <CSMSC951xDevice::DumpRegs()+0x188>
   16968:	ebffff9d 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1696c:	e1a00004 	mov	r0, r4
   16970:	e3a02e11 	mov	r2, #272	; 0x110
   16974:	e59f1068 	ldr	r1, [pc, #104]	; 169e4 <CSMSC951xDevice::DumpRegs()+0x18c>
   16978:	ebffff99 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1697c:	e1a00004 	mov	r0, r4
   16980:	e3a02f47 	mov	r2, #284	; 0x11c
   16984:	e59f105c 	ldr	r1, [pc, #92]	; 169e8 <CSMSC951xDevice::DumpRegs()+0x190>
   16988:	ebffff95 	bl	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1698c:	e1a00004 	mov	r0, r4
   16990:	e8bd4010 	pop	{r4, lr}
   16994:	e3a02f4b 	mov	r2, #300	; 0x12c
   16998:	e59f104c 	ldr	r1, [pc, #76]	; 169ec <CSMSC951xDevice::DumpRegs()+0x194>
   1699c:	eaffff90 	b	167e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   169a0:	00042f38 	.word	0x00042f38
   169a4:	00042f40 	.word	0x00042f40
   169a8:	00042f48 	.word	0x00042f48
   169ac:	00042f50 	.word	0x00042f50
   169b0:	00042f58 	.word	0x00042f58
   169b4:	00042f60 	.word	0x00042f60
   169b8:	00042f6c 	.word	0x00042f6c
   169bc:	00042f74 	.word	0x00042f74
   169c0:	00042f78 	.word	0x00042f78
   169c4:	00042f84 	.word	0x00042f84
   169c8:	00042f8c 	.word	0x00042f8c
   169cc:	00042f98 	.word	0x00042f98
   169d0:	00042fa4 	.word	0x00042fa4
   169d4:	00042fb0 	.word	0x00042fb0
   169d8:	00042fb8 	.word	0x00042fb8
   169dc:	00042fc0 	.word	0x00042fc0
   169e0:	00042fc8 	.word	0x00042fc8
   169e4:	00042fd0 	.word	0x00042fd0
   169e8:	00042fd8 	.word	0x00042fd8
   169ec:	00042fe0 	.word	0x00042fe0

000169f0 <CSMSC951xDevice::Configure()>:
   169f0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   169f4:	e3a07000 	mov	r7, #0
   169f8:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   169fc:	e1a01007 	mov	r1, r7
   16a00:	e1a05000 	mov	r5, r0
   16a04:	e28d001c 	add	r0, sp, #28
   16a08:	eb003787 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   16a0c:	e3a03014 	mov	r3, #20
   16a10:	e59f1284 	ldr	r1, [pc, #644]	; 16c9c <CSMSC951xDevice::Configure()+0x2ac>
   16a14:	e28d001c 	add	r0, sp, #28
   16a18:	e58d7000 	str	r7, [sp]
   16a1c:	e28d2034 	add	r2, sp, #52	; 0x34
   16a20:	eb00378d 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   16a24:	e2504000 	subs	r4, r0, #0
   16a28:	0a00006e 	beq	16be8 <CSMSC951xDevice::Configure()+0x1f8>
   16a2c:	e285601c 	add	r6, r5, #28
   16a30:	e28d1040 	add	r1, sp, #64	; 0x40
   16a34:	e1a00006 	mov	r0, r6
   16a38:	eb00509e 	bl	2acb8 <CMACAddress::Set(unsigned char const*)>
   16a3c:	e28d0024 	add	r0, sp, #36	; 0x24
   16a40:	eb004431 	bl	27b0c <CString::CString()>
   16a44:	e28d1024 	add	r1, sp, #36	; 0x24
   16a48:	e1a00006 	mov	r0, r6
   16a4c:	eb0050f3 	bl	2ae20 <CMACAddress::Format(CString*) const>
   16a50:	eb00403c 	bl	26b48 <CLogger::Get()>
   16a54:	e1a04000 	mov	r4, r0
   16a58:	e28d0024 	add	r0, sp, #36	; 0x24
   16a5c:	eb004442 	bl	27b6c <CString::operator char const*() const>
   16a60:	e1a02000 	mov	r2, r0
   16a64:	e59f3234 	ldr	r3, [pc, #564]	; 16ca0 <CSMSC951xDevice::Configure()+0x2b0>
   16a68:	e1a00004 	mov	r0, r4
   16a6c:	e59f1230 	ldr	r1, [pc, #560]	; 16ca4 <CSMSC951xDevice::Configure()+0x2b4>
   16a70:	e58d2000 	str	r2, [sp]
   16a74:	e3a02004 	mov	r2, #4
   16a78:	eb003f74 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16a7c:	e1a00005 	mov	r0, r5
   16a80:	ebffe3ab 	bl	f934 <CUSBFunction::GetNumEndpoints() const>
   16a84:	e3500003 	cmp	r0, #3
   16a88:	0a00000e 	beq	16ac8 <CSMSC951xDevice::Configure()+0xd8>
   16a8c:	e1a00005 	mov	r0, r5
   16a90:	e59f120c 	ldr	r1, [pc, #524]	; 16ca4 <CSMSC951xDevice::Configure()+0x2b4>
   16a94:	e1a04007 	mov	r4, r7
   16a98:	ebffe3dc 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   16a9c:	e28d0024 	add	r0, sp, #36	; 0x24
   16aa0:	eb0043e6 	bl	27a40 <CString::~CString()>
   16aa4:	e28d001c 	add	r0, sp, #28
   16aa8:	eb003766 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   16aac:	e1a00004 	mov	r0, r4
   16ab0:	e28dd04c 	add	sp, sp, #76	; 0x4c
   16ab4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16ab8:	e5d43003 	ldrb	r3, [r4, #3]
   16abc:	e203303f 	and	r3, r3, #63	; 0x3f
   16ac0:	e3530002 	cmp	r3, #2
   16ac4:	0a000035 	beq	16ba0 <CSMSC951xDevice::Configure()+0x1b0>
   16ac8:	e3a01005 	mov	r1, #5
   16acc:	e1a00005 	mov	r0, r5
   16ad0:	ebffe3c3 	bl	f9e4 <CUSBFunction::GetDescriptor(unsigned char)>
   16ad4:	e2504000 	subs	r4, r0, #0
   16ad8:	1afffff6 	bne	16ab8 <CSMSC951xDevice::Configure()+0xc8>
   16adc:	e5953014 	ldr	r3, [r5, #20]
   16ae0:	e1a00005 	mov	r0, r5
   16ae4:	e3530000 	cmp	r3, #0
   16ae8:	0a00004a 	beq	16c18 <CSMSC951xDevice::Configure()+0x228>
   16aec:	e5953018 	ldr	r3, [r5, #24]
   16af0:	e3530000 	cmp	r3, #0
   16af4:	0a000047 	beq	16c18 <CSMSC951xDevice::Configure()+0x228>
   16af8:	ebffe2d1 	bl	f644 <CUSBFunction::Configure()>
   16afc:	e2504000 	subs	r4, r0, #0
   16b00:	0a00003e 	beq	16c00 <CSMSC951xDevice::Configure()+0x210>
   16b04:	e1a00006 	mov	r0, r6
   16b08:	e28d1014 	add	r1, sp, #20
   16b0c:	eb005093 	bl	2ad60 <CMACAddress::CopyTo(unsigned char*) const>
   16b10:	e5dd2019 	ldrb	r2, [sp, #25]
   16b14:	e5dd3018 	ldrb	r3, [sp, #24]
   16b18:	e3a01f41 	mov	r1, #260	; 0x104
   16b1c:	e1a00005 	mov	r0, r5
   16b20:	e1832402 	orr	r2, r3, r2, lsl #8
   16b24:	e59d4014 	ldr	r4, [sp, #20]
   16b28:	ebfffe5d 	bl	164a4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16b2c:	e3500000 	cmp	r0, #0
   16b30:	0a00004b 	beq	16c64 <CSMSC951xDevice::Configure()+0x274>
   16b34:	e1a02004 	mov	r2, r4
   16b38:	e3a01f42 	mov	r1, #264	; 0x108
   16b3c:	e1a00005 	mov	r0, r5
   16b40:	ebfffe57 	bl	164a4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16b44:	e3500000 	cmp	r0, #0
   16b48:	0a000045 	beq	16c64 <CSMSC951xDevice::Configure()+0x274>
   16b4c:	e3a01024 	mov	r1, #36	; 0x24
   16b50:	e1a00005 	mov	r0, r5
   16b54:	e59f214c 	ldr	r2, [pc, #332]	; 16ca8 <CSMSC951xDevice::Configure()+0x2b8>
   16b58:	ebfffe51 	bl	164a4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16b5c:	e3500000 	cmp	r0, #0
   16b60:	0a000046 	beq	16c80 <CSMSC951xDevice::Configure()+0x290>
   16b64:	e3a01c01 	mov	r1, #256	; 0x100
   16b68:	e1a00005 	mov	r0, r5
   16b6c:	e59f2138 	ldr	r2, [pc, #312]	; 16cac <CSMSC951xDevice::Configure()+0x2bc>
   16b70:	ebfffe4b 	bl	164a4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16b74:	e3500000 	cmp	r0, #0
   16b78:	0a000040 	beq	16c80 <CSMSC951xDevice::Configure()+0x290>
   16b7c:	e3a02004 	mov	r2, #4
   16b80:	e3a01010 	mov	r1, #16
   16b84:	e1a00005 	mov	r0, r5
   16b88:	ebfffe45 	bl	164a4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16b8c:	e2504000 	subs	r4, r0, #0
   16b90:	0a00003a 	beq	16c80 <CSMSC951xDevice::Configure()+0x290>
   16b94:	e2850010 	add	r0, r5, #16
   16b98:	eb0050c1 	bl	2aea4 <CNetDevice::AddNetDevice()>
   16b9c:	eaffffbe 	b	16a9c <CSMSC951xDevice::Configure()+0xac>
   16ba0:	e1d430d2 	ldrsb	r3, [r4, #2]
   16ba4:	e3530000 	cmp	r3, #0
   16ba8:	ba00001e 	blt	16c28 <CSMSC951xDevice::Configure()+0x238>
   16bac:	e5953018 	ldr	r3, [r5, #24]
   16bb0:	e1a00005 	mov	r0, r5
   16bb4:	e3530000 	cmp	r3, #0
   16bb8:	1a000016 	bne	16c18 <CSMSC951xDevice::Configure()+0x228>
   16bbc:	ebffe368 	bl	f964 <CUSBFunction::GetDevice() const>
   16bc0:	e1a01000 	mov	r1, r0
   16bc4:	e3a00014 	mov	r0, #20
   16bc8:	e58d100c 	str	r1, [sp, #12]
   16bcc:	eb0050fd 	bl	2afc8 <operator new(unsigned int)>
   16bd0:	e1a07000 	mov	r7, r0
   16bd4:	e1a02004 	mov	r2, r4
   16bd8:	e59d100c 	ldr	r1, [sp, #12]
   16bdc:	ebffe19e 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16be0:	e5857018 	str	r7, [r5, #24]
   16be4:	eaffffb7 	b	16ac8 <CSMSC951xDevice::Configure()+0xd8>
   16be8:	eb003fd6 	bl	26b48 <CLogger::Get()>
   16bec:	e3a02001 	mov	r2, #1
   16bf0:	e59f30b8 	ldr	r3, [pc, #184]	; 16cb0 <CSMSC951xDevice::Configure()+0x2c0>
   16bf4:	e59f10a8 	ldr	r1, [pc, #168]	; 16ca4 <CSMSC951xDevice::Configure()+0x2b4>
   16bf8:	eb003f14 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16bfc:	eaffffa8 	b	16aa4 <CSMSC951xDevice::Configure()+0xb4>
   16c00:	eb003fd0 	bl	26b48 <CLogger::Get()>
   16c04:	e3a02001 	mov	r2, #1
   16c08:	e59f30a4 	ldr	r3, [pc, #164]	; 16cb4 <CSMSC951xDevice::Configure()+0x2c4>
   16c0c:	e59f1090 	ldr	r1, [pc, #144]	; 16ca4 <CSMSC951xDevice::Configure()+0x2b4>
   16c10:	eb003f0e 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16c14:	eaffffa0 	b	16a9c <CSMSC951xDevice::Configure()+0xac>
   16c18:	e59f1084 	ldr	r1, [pc, #132]	; 16ca4 <CSMSC951xDevice::Configure()+0x2b4>
   16c1c:	ebffe37b 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   16c20:	e3a04000 	mov	r4, #0
   16c24:	eaffff9c 	b	16a9c <CSMSC951xDevice::Configure()+0xac>
   16c28:	e5953014 	ldr	r3, [r5, #20]
   16c2c:	e1a00005 	mov	r0, r5
   16c30:	e3530000 	cmp	r3, #0
   16c34:	1afffff7 	bne	16c18 <CSMSC951xDevice::Configure()+0x228>
   16c38:	ebffe349 	bl	f964 <CUSBFunction::GetDevice() const>
   16c3c:	e1a01000 	mov	r1, r0
   16c40:	e3a00014 	mov	r0, #20
   16c44:	e58d100c 	str	r1, [sp, #12]
   16c48:	eb0050de 	bl	2afc8 <operator new(unsigned int)>
   16c4c:	e1a07000 	mov	r7, r0
   16c50:	e1a02004 	mov	r2, r4
   16c54:	e59d100c 	ldr	r1, [sp, #12]
   16c58:	ebffe17f 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16c5c:	e5857014 	str	r7, [r5, #20]
   16c60:	eaffff98 	b	16ac8 <CSMSC951xDevice::Configure()+0xd8>
   16c64:	eb003fb7 	bl	26b48 <CLogger::Get()>
   16c68:	e3a02001 	mov	r2, #1
   16c6c:	e59f3044 	ldr	r3, [pc, #68]	; 16cb8 <CSMSC951xDevice::Configure()+0x2c8>
   16c70:	e59f102c 	ldr	r1, [pc, #44]	; 16ca4 <CSMSC951xDevice::Configure()+0x2b4>
   16c74:	eb003ef5 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16c78:	e3a04000 	mov	r4, #0
   16c7c:	eaffff86 	b	16a9c <CSMSC951xDevice::Configure()+0xac>
   16c80:	eb003fb0 	bl	26b48 <CLogger::Get()>
   16c84:	e3a02001 	mov	r2, #1
   16c88:	e59f302c 	ldr	r3, [pc, #44]	; 16cbc <CSMSC951xDevice::Configure()+0x2cc>
   16c8c:	e59f1010 	ldr	r1, [pc, #16]	; 16ca4 <CSMSC951xDevice::Configure()+0x2b4>
   16c90:	eb003eee 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16c94:	e3a04000 	mov	r4, #0
   16c98:	eaffff7f 	b	16a9c <CSMSC951xDevice::Configure()+0xac>
   16c9c:	00010003 	.word	0x00010003
   16ca0:	00042e08 	.word	0x00042e08
   16ca4:	0004309c 	.word	0x0004309c
   16ca8:	01110000 	.word	0x01110000
   16cac:	0080000c 	.word	0x0080000c
   16cb0:	00042fe8 	.word	0x00042fe8
   16cb4:	00041ce4 	.word	0x00041ce4
   16cb8:	00043000 	.word	0x00043000
   16cbc:	00043018 	.word	0x00043018

00016cc0 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   16cc0:	e3a03000 	mov	r3, #0
   16cc4:	e92d4070 	push	{r4, r5, r6, lr}
   16cc8:	e1a04000 	mov	r4, r0
   16ccc:	e5900020 	ldr	r0, [r0, #32]
   16cd0:	e59f20a0 	ldr	r2, [pc, #160]	; 16d78 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xb8>
   16cd4:	e1500003 	cmp	r0, r3
   16cd8:	e5842000 	str	r2, [r4]
   16cdc:	e5843024 	str	r3, [r4, #36]	; 0x24
   16ce0:	0a000000 	beq	16ce8 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x28>
   16ce4:	eb0050c4 	bl	2affc <operator delete[](void*)>
   16ce8:	e3a03000 	mov	r3, #0
   16cec:	e5945018 	ldr	r5, [r4, #24]
   16cf0:	e5843020 	str	r3, [r4, #32]
   16cf4:	e1550003 	cmp	r5, r3
   16cf8:	0a000004 	beq	16d10 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x50>
   16cfc:	e1a00005 	mov	r0, r5
   16d00:	ebffe1b9 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   16d04:	e1a00005 	mov	r0, r5
   16d08:	e3a01014 	mov	r1, #20
   16d0c:	eb0050bb 	bl	2b000 <operator delete(void*, unsigned int)>
   16d10:	e3a03000 	mov	r3, #0
   16d14:	e5945014 	ldr	r5, [r4, #20]
   16d18:	e5843018 	str	r3, [r4, #24]
   16d1c:	e1550003 	cmp	r5, r3
   16d20:	0a000004 	beq	16d38 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x78>
   16d24:	e1a00005 	mov	r0, r5
   16d28:	ebffe1af 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   16d2c:	e1a00005 	mov	r0, r5
   16d30:	e3a01014 	mov	r1, #20
   16d34:	eb0050b1 	bl	2b000 <operator delete(void*, unsigned int)>
   16d38:	e3a03000 	mov	r3, #0
   16d3c:	e5945010 	ldr	r5, [r4, #16]
   16d40:	e5843014 	str	r3, [r4, #20]
   16d44:	e1550003 	cmp	r5, r3
   16d48:	0a000004 	beq	16d60 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xa0>
   16d4c:	e1a00005 	mov	r0, r5
   16d50:	ebffe1a5 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   16d54:	e1a00005 	mov	r0, r5
   16d58:	e3a01014 	mov	r1, #20
   16d5c:	eb0050a7 	bl	2b000 <operator delete(void*, unsigned int)>
   16d60:	e3a03000 	mov	r3, #0
   16d64:	e1a00004 	mov	r0, r4
   16d68:	e5843010 	str	r3, [r4, #16]
   16d6c:	ebffe20b 	bl	f5a0 <CUSBFunction::~CUSBFunction()>
   16d70:	e1a00004 	mov	r0, r4
   16d74:	e8bd8070 	pop	{r4, r5, r6, pc}
   16d78:	00043150 	.word	0x00043150

00016d7c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   16d7c:	e92d4010 	push	{r4, lr}
   16d80:	e1a04000 	mov	r4, r0
   16d84:	ebffffcd 	bl	16cc0 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   16d88:	e1a00004 	mov	r0, r4
   16d8c:	e3a01028 	mov	r1, #40	; 0x28
   16d90:	eb00509a 	bl	2b000 <operator delete(void*, unsigned int)>
   16d94:	e1a00004 	mov	r0, r4
   16d98:	e8bd8010 	pop	{r4, pc}

00016d9c <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   16d9c:	e92d4010 	push	{r4, lr}
   16da0:	e1a04000 	mov	r4, r0
   16da4:	ebffe28f 	bl	f7e8 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   16da8:	e3a03000 	mov	r3, #0
   16dac:	e59f2020 	ldr	r2, [pc, #32]	; 16dd4 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x38>
   16db0:	e1a00004 	mov	r0, r4
   16db4:	e5843010 	str	r3, [r4, #16]
   16db8:	e5842000 	str	r2, [r4]
   16dbc:	e5843014 	str	r3, [r4, #20]
   16dc0:	e5843018 	str	r3, [r4, #24]
   16dc4:	e584301c 	str	r3, [r4, #28]
   16dc8:	e5843020 	str	r3, [r4, #32]
   16dcc:	e5843024 	str	r3, [r4, #36]	; 0x24
   16dd0:	e8bd8010 	pop	{r4, pc}
   16dd4:	00043150 	.word	0x00043150

00016dd8 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   16dd8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16ddc:	e24dd014 	sub	sp, sp, #20
   16de0:	e1a06001 	mov	r6, r1
   16de4:	e1a04002 	mov	r4, r2
   16de8:	e1a07000 	mov	r7, r0
   16dec:	ebffe2f1 	bl	f9b8 <CUSBFunction::GetHost() const>
   16df0:	e1a05000 	mov	r5, r0
   16df4:	e1a00007 	mov	r0, r7
   16df8:	ebffe2e3 	bl	f98c <CUSBFunction::GetEndpoint0() const>
   16dfc:	e3a03000 	mov	r3, #0
   16e00:	e6ff4074 	uxth	r4, r4
   16e04:	e1a01000 	mov	r1, r0
   16e08:	e3a02020 	mov	r2, #32
   16e0c:	e1a00005 	mov	r0, r5
   16e10:	e58d6008 	str	r6, [sp, #8]
   16e14:	e58d400c 	str	r4, [sp, #12]
   16e18:	e58d3004 	str	r3, [sp, #4]
   16e1c:	e58d3000 	str	r3, [sp]
   16e20:	ebffee90 	bl	12868 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16e24:	e1e00000 	mvn	r0, r0
   16e28:	e1a00fa0 	lsr	r0, r0, #31
   16e2c:	e28dd014 	add	sp, sp, #20
   16e30:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00016e34 <CUSBBluetoothDevice::StartRequest()>:
   16e34:	e92d4070 	push	{r4, r5, r6, lr}
   16e38:	e1a04000 	mov	r4, r0
   16e3c:	e5900010 	ldr	r0, [r0, #16]
   16e40:	e24dd010 	sub	sp, sp, #16
   16e44:	e3500000 	cmp	r0, #0
   16e48:	0a00001f 	beq	16ecc <CUSBBluetoothDevice::StartRequest()+0x98>
   16e4c:	e5943020 	ldr	r3, [r4, #32]
   16e50:	e3530000 	cmp	r3, #0
   16e54:	0a000020 	beq	16edc <CUSBBluetoothDevice::StartRequest()+0xa8>
   16e58:	e594501c 	ldr	r5, [r4, #28]
   16e5c:	e3550000 	cmp	r5, #0
   16e60:	1a000021 	bne	16eec <CUSBBluetoothDevice::StartRequest()+0xb8>
   16e64:	ebffe175 	bl	f440 <CUSBEndpoint::GetMaxPacketSize() const>
   16e68:	e1a03000 	mov	r3, r0
   16e6c:	e3a00028 	mov	r0, #40	; 0x28
   16e70:	e58d300c 	str	r3, [sp, #12]
   16e74:	ebfff5e6 	bl	14614 <CUSBRequest::operator new(unsigned int)>
   16e78:	e1a06000 	mov	r6, r0
   16e7c:	e58d5000 	str	r5, [sp]
   16e80:	e59d300c 	ldr	r3, [sp, #12]
   16e84:	e5942020 	ldr	r2, [r4, #32]
   16e88:	e5941010 	ldr	r1, [r4, #16]
   16e8c:	ebfff55f 	bl	14410 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   16e90:	e1a03004 	mov	r3, r4
   16e94:	e1a02005 	mov	r2, r5
   16e98:	e1a00006 	mov	r0, r6
   16e9c:	e59f1058 	ldr	r1, [pc, #88]	; 16efc <CUSBBluetoothDevice::StartRequest()+0xc8>
   16ea0:	e584601c 	str	r6, [r4, #28]
   16ea4:	ebfff5bb 	bl	14598 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   16ea8:	e1a00004 	mov	r0, r4
   16eac:	ebffe2c1 	bl	f9b8 <CUSBFunction::GetHost() const>
   16eb0:	e1a02005 	mov	r2, r5
   16eb4:	e5903000 	ldr	r3, [r0]
   16eb8:	e594101c 	ldr	r1, [r4, #28]
   16ebc:	e593300c 	ldr	r3, [r3, #12]
   16ec0:	e28dd010 	add	sp, sp, #16
   16ec4:	e8bd4070 	pop	{r4, r5, r6, lr}
   16ec8:	e12fff13 	bx	r3
   16ecc:	e3a020a3 	mov	r2, #163	; 0xa3
   16ed0:	e59f1028 	ldr	r1, [pc, #40]	; 16f00 <CUSBBluetoothDevice::StartRequest()+0xcc>
   16ed4:	e59f0028 	ldr	r0, [pc, #40]	; 16f04 <CUSBBluetoothDevice::StartRequest()+0xd0>
   16ed8:	eb003632 	bl	247a8 <assertion_failed>
   16edc:	e3a020a4 	mov	r2, #164	; 0xa4
   16ee0:	e59f1018 	ldr	r1, [pc, #24]	; 16f00 <CUSBBluetoothDevice::StartRequest()+0xcc>
   16ee4:	e59f001c 	ldr	r0, [pc, #28]	; 16f08 <CUSBBluetoothDevice::StartRequest()+0xd4>
   16ee8:	eb00362e 	bl	247a8 <assertion_failed>
   16eec:	e3a020a6 	mov	r2, #166	; 0xa6
   16ef0:	e59f1008 	ldr	r1, [pc, #8]	; 16f00 <CUSBBluetoothDevice::StartRequest()+0xcc>
   16ef4:	e59f0010 	ldr	r0, [pc, #16]	; 16f0c <CUSBBluetoothDevice::StartRequest()+0xd8>
   16ef8:	eb00362a 	bl	247a8 <assertion_failed>
   16efc:	00017060 	.word	0x00017060
   16f00:	000430b0 	.word	0x000430b0
   16f04:	000430c4 	.word	0x000430c4
   16f08:	000430e0 	.word	0x000430e0
   16f0c:	00042444 	.word	0x00042444

00016f10 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   16f10:	e3510000 	cmp	r1, #0
   16f14:	e5801024 	str	r1, [r0, #36]	; 0x24
   16f18:	0a000000 	beq	16f20 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x10>
   16f1c:	eaffffc4 	b	16e34 <CUSBBluetoothDevice::StartRequest()>
   16f20:	e3a0209c 	mov	r2, #156	; 0x9c
   16f24:	e92d4010 	push	{r4, lr}
   16f28:	e59f1004 	ldr	r1, [pc, #4]	; 16f34 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x24>
   16f2c:	e59f0004 	ldr	r0, [pc, #4]	; 16f38 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x28>
   16f30:	eb00361c 	bl	247a8 <assertion_failed>
   16f34:	000430b0 	.word	0x000430b0
   16f38:	000430f4 	.word	0x000430f4

00016f3c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   16f3c:	e3510000 	cmp	r1, #0
   16f40:	e92d4070 	push	{r4, r5, r6, lr}
   16f44:	0a00002d 	beq	17000 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   16f48:	e590501c 	ldr	r5, [r0, #28]
   16f4c:	e1a04000 	mov	r4, r0
   16f50:	e1550001 	cmp	r5, r1
   16f54:	1a00002d 	bne	17010 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   16f58:	e5903020 	ldr	r3, [r0, #32]
   16f5c:	e3530000 	cmp	r3, #0
   16f60:	0a00002e 	beq	17020 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   16f64:	e1a00005 	mov	r0, r5
   16f68:	ebfff557 	bl	144cc <CUSBRequest::GetStatus() const>
   16f6c:	e3500000 	cmp	r0, #0
   16f70:	0a00001c 	beq	16fe8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xac>
   16f74:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   16f78:	e3560000 	cmp	r6, #0
   16f7c:	0a00002b 	beq	17030 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xf4>
   16f80:	e1a00005 	mov	r0, r5
   16f84:	e5945020 	ldr	r5, [r4, #32]
   16f88:	ebfff551 	bl	144d4 <CUSBRequest::GetResultLength() const>
   16f8c:	e1a01000 	mov	r1, r0
   16f90:	e1a00005 	mov	r0, r5
   16f94:	e12fff36 	blx	r6
   16f98:	e594501c 	ldr	r5, [r4, #28]
   16f9c:	e3550000 	cmp	r5, #0
   16fa0:	0a000004 	beq	16fb8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x7c>
   16fa4:	e1a00005 	mov	r0, r5
   16fa8:	ebfff538 	bl	14490 <CUSBRequest::~CUSBRequest()>
   16fac:	e1a00005 	mov	r0, r5
   16fb0:	e3a01028 	mov	r1, #40	; 0x28
   16fb4:	ebfff5ab 	bl	14668 <CUSBRequest::operator delete(void*, unsigned int)>
   16fb8:	e3a03000 	mov	r3, #0
   16fbc:	e1a00004 	mov	r0, r4
   16fc0:	e584301c 	str	r3, [r4, #28]
   16fc4:	ebffff9a 	bl	16e34 <CUSBBluetoothDevice::StartRequest()>
   16fc8:	e3500000 	cmp	r0, #0
   16fcc:	18bd8070 	popne	{r4, r5, r6, pc}
   16fd0:	eb003edc 	bl	26b48 <CLogger::Get()>
   16fd4:	e8bd4070 	pop	{r4, r5, r6, lr}
   16fd8:	e3a02001 	mov	r2, #1
   16fdc:	e59f305c 	ldr	r3, [pc, #92]	; 17040 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x104>
   16fe0:	e59f105c 	ldr	r1, [pc, #92]	; 17044 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x108>
   16fe4:	ea003e19 	b	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16fe8:	eb003ed6 	bl	26b48 <CLogger::Get()>
   16fec:	e3a02002 	mov	r2, #2
   16ff0:	e59f3050 	ldr	r3, [pc, #80]	; 17048 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x10c>
   16ff4:	e59f1048 	ldr	r1, [pc, #72]	; 17044 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x108>
   16ff8:	eb003e14 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16ffc:	eaffffe5 	b	16f98 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x5c>
   17000:	e3a020b2 	mov	r2, #178	; 0xb2
   17004:	e59f1040 	ldr	r1, [pc, #64]	; 1704c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   17008:	e59f0040 	ldr	r0, [pc, #64]	; 17050 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   1700c:	eb0035e5 	bl	247a8 <assertion_failed>
   17010:	e3a020b3 	mov	r2, #179	; 0xb3
   17014:	e59f1030 	ldr	r1, [pc, #48]	; 1704c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   17018:	e59f0034 	ldr	r0, [pc, #52]	; 17054 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x118>
   1701c:	eb0035e1 	bl	247a8 <assertion_failed>
   17020:	e3a020b4 	mov	r2, #180	; 0xb4
   17024:	e59f1020 	ldr	r1, [pc, #32]	; 1704c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   17028:	e59f0028 	ldr	r0, [pc, #40]	; 17058 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   1702c:	eb0035dd 	bl	247a8 <assertion_failed>
   17030:	e3a020b8 	mov	r2, #184	; 0xb8
   17034:	e59f1010 	ldr	r1, [pc, #16]	; 1704c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   17038:	e59f001c 	ldr	r0, [pc, #28]	; 1705c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x120>
   1703c:	eb0035d9 	bl	247a8 <assertion_failed>
   17040:	00042478 	.word	0x00042478
   17044:	00043174 	.word	0x00043174
   17048:	0004310c 	.word	0x0004310c
   1704c:	000430b0 	.word	0x000430b0
   17050:	00040c30 	.word	0x00040c30
   17054:	00042468 	.word	0x00042468
   17058:	000430e0 	.word	0x000430e0
   1705c:	000430f4 	.word	0x000430f4

00017060 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   17060:	e3520000 	cmp	r2, #0
   17064:	0a000002 	beq	17074 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   17068:	e1a01000 	mov	r1, r0
   1706c:	e1a00002 	mov	r0, r2
   17070:	eaffffb1 	b	16f3c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   17074:	e3a020cc 	mov	r2, #204	; 0xcc
   17078:	e92d4010 	push	{r4, lr}
   1707c:	e59f1004 	ldr	r1, [pc, #4]	; 17088 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   17080:	e59f0004 	ldr	r0, [pc, #4]	; 1708c <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   17084:	eb0035c7 	bl	247a8 <assertion_failed>
   17088:	000430b0 	.word	0x000430b0
   1708c:	00040b44 	.word	0x00040b44

00017090 <CUSBBluetoothDevice::Configure()>:
   17090:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   17094:	e24dd01c 	sub	sp, sp, #28
   17098:	e1a05000 	mov	r5, r0
   1709c:	ebffe2a1 	bl	fb28 <CUSBFunction::GetInterfaceNumber() const>
   170a0:	e2506000 	subs	r6, r0, #0
   170a4:	1a000044 	bne	171bc <CUSBBluetoothDevice::Configure()+0x12c>
   170a8:	e1a00005 	mov	r0, r5
   170ac:	ebffe220 	bl	f934 <CUSBFunction::GetNumEndpoints() const>
   170b0:	e3500003 	cmp	r0, #3
   170b4:	1a00003a 	bne	171a4 <CUSBBluetoothDevice::Configure()+0x114>
   170b8:	e3a01005 	mov	r1, #5
   170bc:	e1a00005 	mov	r0, r5
   170c0:	ebffe247 	bl	f9e4 <CUSBFunction::GetDescriptor(unsigned char)>
   170c4:	e2504000 	subs	r4, r0, #0
   170c8:	0a000044 	beq	171e0 <CUSBBluetoothDevice::Configure()+0x150>
   170cc:	e5d42003 	ldrb	r2, [r4, #3]
   170d0:	e202203f 	and	r2, r2, #63	; 0x3f
   170d4:	e3520002 	cmp	r2, #2
   170d8:	0a000010 	beq	17120 <CUSBBluetoothDevice::Configure()+0x90>
   170dc:	e3520003 	cmp	r2, #3
   170e0:	1afffff4 	bne	170b8 <CUSBBluetoothDevice::Configure()+0x28>
   170e4:	e5953010 	ldr	r3, [r5, #16]
   170e8:	e1a00005 	mov	r0, r5
   170ec:	e3530000 	cmp	r3, #0
   170f0:	1a000044 	bne	17208 <CUSBBluetoothDevice::Configure()+0x178>
   170f4:	ebffe21a 	bl	f964 <CUSBFunction::GetDevice() const>
   170f8:	e1a01000 	mov	r1, r0
   170fc:	e3a00014 	mov	r0, #20
   17100:	e58d1004 	str	r1, [sp, #4]
   17104:	eb004faf 	bl	2afc8 <operator new(unsigned int)>
   17108:	e1a06000 	mov	r6, r0
   1710c:	e1a02004 	mov	r2, r4
   17110:	e59d1004 	ldr	r1, [sp, #4]
   17114:	ebffe050 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17118:	e5856010 	str	r6, [r5, #16]
   1711c:	eaffffe5 	b	170b8 <CUSBBluetoothDevice::Configure()+0x28>
   17120:	e1d430d2 	ldrsb	r3, [r4, #2]
   17124:	e3530000 	cmp	r3, #0
   17128:	ba00000e 	blt	17168 <CUSBBluetoothDevice::Configure()+0xd8>
   1712c:	e5953018 	ldr	r3, [r5, #24]
   17130:	e1a00005 	mov	r0, r5
   17134:	e3530000 	cmp	r3, #0
   17138:	1a000032 	bne	17208 <CUSBBluetoothDevice::Configure()+0x178>
   1713c:	ebffe208 	bl	f964 <CUSBFunction::GetDevice() const>
   17140:	e1a01000 	mov	r1, r0
   17144:	e3a00014 	mov	r0, #20
   17148:	e58d1004 	str	r1, [sp, #4]
   1714c:	eb004f9d 	bl	2afc8 <operator new(unsigned int)>
   17150:	e1a06000 	mov	r6, r0
   17154:	e1a02004 	mov	r2, r4
   17158:	e59d1004 	ldr	r1, [sp, #4]
   1715c:	ebffe03e 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17160:	e5856018 	str	r6, [r5, #24]
   17164:	eaffffd3 	b	170b8 <CUSBBluetoothDevice::Configure()+0x28>
   17168:	e5953014 	ldr	r3, [r5, #20]
   1716c:	e1a00005 	mov	r0, r5
   17170:	e3530000 	cmp	r3, #0
   17174:	1a000023 	bne	17208 <CUSBBluetoothDevice::Configure()+0x178>
   17178:	ebffe1f9 	bl	f964 <CUSBFunction::GetDevice() const>
   1717c:	e1a01000 	mov	r1, r0
   17180:	e3a00014 	mov	r0, #20
   17184:	e58d1004 	str	r1, [sp, #4]
   17188:	eb004f8e 	bl	2afc8 <operator new(unsigned int)>
   1718c:	e1a06000 	mov	r6, r0
   17190:	e1a02004 	mov	r2, r4
   17194:	e59d1004 	ldr	r1, [sp, #4]
   17198:	ebffe02f 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1719c:	e5856014 	str	r6, [r5, #20]
   171a0:	eaffffc4 	b	170b8 <CUSBBluetoothDevice::Configure()+0x28>
   171a4:	e1a00005 	mov	r0, r5
   171a8:	e59f10fc 	ldr	r1, [pc, #252]	; 172ac <CUSBBluetoothDevice::Configure()+0x21c>
   171ac:	ebffe217 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   171b0:	e1a00006 	mov	r0, r6
   171b4:	e28dd01c 	add	sp, sp, #28
   171b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   171bc:	e3a06000 	mov	r6, #0
   171c0:	eb003e60 	bl	26b48 <CLogger::Get()>
   171c4:	e3a02002 	mov	r2, #2
   171c8:	e59f30e0 	ldr	r3, [pc, #224]	; 172b0 <CUSBBluetoothDevice::Configure()+0x220>
   171cc:	e59f10d8 	ldr	r1, [pc, #216]	; 172ac <CUSBBluetoothDevice::Configure()+0x21c>
   171d0:	eb003d9e 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   171d4:	e1a00006 	mov	r0, r6
   171d8:	e28dd01c 	add	sp, sp, #28
   171dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   171e0:	e5953014 	ldr	r3, [r5, #20]
   171e4:	e3530000 	cmp	r3, #0
   171e8:	0a000005 	beq	17204 <CUSBBluetoothDevice::Configure()+0x174>
   171ec:	e5953018 	ldr	r3, [r5, #24]
   171f0:	e3530000 	cmp	r3, #0
   171f4:	0a000002 	beq	17204 <CUSBBluetoothDevice::Configure()+0x174>
   171f8:	e5953010 	ldr	r3, [r5, #16]
   171fc:	e3530000 	cmp	r3, #0
   17200:	1a000006 	bne	17220 <CUSBBluetoothDevice::Configure()+0x190>
   17204:	e1a00005 	mov	r0, r5
   17208:	e3a06000 	mov	r6, #0
   1720c:	e59f1098 	ldr	r1, [pc, #152]	; 172ac <CUSBBluetoothDevice::Configure()+0x21c>
   17210:	ebffe1fe 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   17214:	e1a00006 	mov	r0, r6
   17218:	e28dd01c 	add	sp, sp, #28
   1721c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17220:	e1a00005 	mov	r0, r5
   17224:	ebffe106 	bl	f644 <CUSBFunction::Configure()>
   17228:	e2506000 	subs	r6, r0, #0
   1722c:	0a000018 	beq	17294 <CUSBBluetoothDevice::Configure()+0x204>
   17230:	e5950010 	ldr	r0, [r5, #16]
   17234:	ebffe081 	bl	f440 <CUSBEndpoint::GetMaxPacketSize() const>
   17238:	eb004f68 	bl	2afe0 <operator new[](unsigned int)>
   1723c:	e5850020 	str	r0, [r5, #32]
   17240:	e28d0008 	add	r0, sp, #8
   17244:	eb004230 	bl	27b0c <CString::CString()>
   17248:	e59f3064 	ldr	r3, [pc, #100]	; 172b4 <CUSBBluetoothDevice::Configure()+0x224>
   1724c:	e59f1064 	ldr	r1, [pc, #100]	; 172b8 <CUSBBluetoothDevice::Configure()+0x228>
   17250:	e5932000 	ldr	r2, [r3]
   17254:	e28d0008 	add	r0, sp, #8
   17258:	e282c001 	add	ip, r2, #1
   1725c:	e583c000 	str	ip, [r3]
   17260:	eb004773 	bl	29034 <CString::Format(char const*, ...)>
   17264:	eb003811 	bl	252b0 <CDeviceNameService::Get()>
   17268:	e1a07000 	mov	r7, r0
   1726c:	e28d0008 	add	r0, sp, #8
   17270:	eb00423d 	bl	27b6c <CString::operator char const*() const>
   17274:	e1a03004 	mov	r3, r4
   17278:	e1a01000 	mov	r1, r0
   1727c:	e1a02005 	mov	r2, r5
   17280:	e1a00007 	mov	r0, r7
   17284:	eb003759 	bl	24ff0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   17288:	e28d0008 	add	r0, sp, #8
   1728c:	eb0041eb 	bl	27a40 <CString::~CString()>
   17290:	eaffffc6 	b	171b0 <CUSBBluetoothDevice::Configure()+0x120>
   17294:	eb003e2b 	bl	26b48 <CLogger::Get()>
   17298:	e3a02001 	mov	r2, #1
   1729c:	e59f3018 	ldr	r3, [pc, #24]	; 172bc <CUSBBluetoothDevice::Configure()+0x22c>
   172a0:	e59f1004 	ldr	r1, [pc, #4]	; 172ac <CUSBBluetoothDevice::Configure()+0x21c>
   172a4:	eb003d69 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   172a8:	eaffffc0 	b	171b0 <CUSBBluetoothDevice::Configure()+0x120>
   172ac:	00043174 	.word	0x00043174
   172b0:	0004311c 	.word	0x0004311c
   172b4:	00049fb0 	.word	0x00049fb0
   172b8:	00043140 	.word	0x00043140
   172bc:	00041ce4 	.word	0x00041ce4

000172c0 <CUSBCDCEthernetDevice::GetMACAddress() const>:
   172c0:	e280001c 	add	r0, r0, #28
   172c4:	e12fff1e 	bx	lr

000172c8 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   172c8:	e92d4070 	push	{r4, r5, r6, lr}
   172cc:	e59f3074 	ldr	r3, [pc, #116]	; 17348 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x80>
   172d0:	e5905018 	ldr	r5, [r0, #24]
   172d4:	e2832038 	add	r2, r3, #56	; 0x38
   172d8:	e3550000 	cmp	r5, #0
   172dc:	e1a04000 	mov	r4, r0
   172e0:	e5803000 	str	r3, [r0]
   172e4:	e5802010 	str	r2, [r0, #16]
   172e8:	0a000004 	beq	17300 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x38>
   172ec:	e1a00005 	mov	r0, r5
   172f0:	ebffe03d 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   172f4:	e1a00005 	mov	r0, r5
   172f8:	e3a01014 	mov	r1, #20
   172fc:	eb004f3f 	bl	2b000 <operator delete(void*, unsigned int)>
   17300:	e3a03000 	mov	r3, #0
   17304:	e5945014 	ldr	r5, [r4, #20]
   17308:	e5843018 	str	r3, [r4, #24]
   1730c:	e1550003 	cmp	r5, r3
   17310:	0a000004 	beq	17328 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x60>
   17314:	e1a00005 	mov	r0, r5
   17318:	ebffe033 	bl	f3ec <CUSBEndpoint::~CUSBEndpoint()>
   1731c:	e1a00005 	mov	r0, r5
   17320:	e3a01014 	mov	r1, #20
   17324:	eb004f35 	bl	2b000 <operator delete(void*, unsigned int)>
   17328:	e3a03000 	mov	r3, #0
   1732c:	e284001c 	add	r0, r4, #28
   17330:	e5843014 	str	r3, [r4, #20]
   17334:	eb004e41 	bl	2ac40 <CMACAddress::~CMACAddress()>
   17338:	e1a00004 	mov	r0, r4
   1733c:	ebffe097 	bl	f5a0 <CUSBFunction::~CUSBFunction()>
   17340:	e1a00004 	mov	r0, r4
   17344:	e8bd8070 	pop	{r4, r5, r6, pc}
   17348:	000431c8 	.word	0x000431c8

0001734c <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1734c:	e2400010 	sub	r0, r0, #16
   17350:	eaffffdc 	b	172c8 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

00017354 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   17354:	e92d4010 	push	{r4, lr}
   17358:	e1a04000 	mov	r4, r0
   1735c:	ebffffd9 	bl	172c8 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   17360:	e1a00004 	mov	r0, r4
   17364:	e3a01024 	mov	r1, #36	; 0x24
   17368:	eb004f24 	bl	2b000 <operator delete(void*, unsigned int)>
   1736c:	e1a00004 	mov	r0, r4
   17370:	e8bd8010 	pop	{r4, pc}

00017374 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   17374:	e2400010 	sub	r0, r0, #16
   17378:	eafffff5 	b	17354 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

0001737c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   1737c:	e92d4070 	push	{r4, r5, r6, lr}
   17380:	e5903014 	ldr	r3, [r0, #20]
   17384:	e24dd030 	sub	sp, sp, #48	; 0x30
   17388:	e3530000 	cmp	r3, #0
   1738c:	0a000026 	beq	1742c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xb0>
   17390:	e3510000 	cmp	r1, #0
   17394:	0a000028 	beq	1743c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xc0>
   17398:	e3a05000 	mov	r5, #0
   1739c:	e1a04000 	mov	r4, r0
   173a0:	e1a06002 	mov	r6, r2
   173a4:	e58d5000 	str	r5, [sp]
   173a8:	e1a02001 	mov	r2, r1
   173ac:	e28d0008 	add	r0, sp, #8
   173b0:	e1a01003 	mov	r1, r3
   173b4:	e3a03d19 	mov	r3, #1600	; 0x640
   173b8:	ebfff414 	bl	14410 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   173bc:	e28d0008 	add	r0, sp, #8
   173c0:	ebfff48e 	bl	14600 <CUSBRequest::SetCompleteOnNAK()>
   173c4:	e1a00004 	mov	r0, r4
   173c8:	ebffe17a 	bl	f9b8 <CUSBFunction::GetHost() const>
   173cc:	e5903000 	ldr	r3, [r0]
   173d0:	e1a02005 	mov	r2, r5
   173d4:	e5933008 	ldr	r3, [r3, #8]
   173d8:	e28d1008 	add	r1, sp, #8
   173dc:	e12fff33 	blx	r3
   173e0:	e2504000 	subs	r4, r0, #0
   173e4:	1a000005 	bne	17400 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x84>
   173e8:	e3a04000 	mov	r4, #0
   173ec:	e28d0008 	add	r0, sp, #8
   173f0:	ebfff426 	bl	14490 <CUSBRequest::~CUSBRequest()>
   173f4:	e1a00004 	mov	r0, r4
   173f8:	e28dd030 	add	sp, sp, #48	; 0x30
   173fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   17400:	e28d0008 	add	r0, sp, #8
   17404:	ebfff432 	bl	144d4 <CUSBRequest::GetResultLength() const>
   17408:	e3500000 	cmp	r0, #0
   1740c:	0afffff5 	beq	173e8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   17410:	e3560000 	cmp	r6, #0
   17414:	15860000 	strne	r0, [r6]
   17418:	1afffff3 	bne	173ec <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x70>
   1741c:	e3a020c3 	mov	r2, #195	; 0xc3
   17420:	e59f1024 	ldr	r1, [pc, #36]	; 1744c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   17424:	e59f0024 	ldr	r0, [pc, #36]	; 17450 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd4>
   17428:	eb0034de 	bl	247a8 <assertion_failed>
   1742c:	e3a020b2 	mov	r2, #178	; 0xb2
   17430:	e59f1014 	ldr	r1, [pc, #20]	; 1744c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   17434:	e59f0018 	ldr	r0, [pc, #24]	; 17454 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd8>
   17438:	eb0034da 	bl	247a8 <assertion_failed>
   1743c:	e3a020b3 	mov	r2, #179	; 0xb3
   17440:	e59f1004 	ldr	r1, [pc, #4]	; 1744c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   17444:	e59f000c 	ldr	r0, [pc, #12]	; 17458 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   17448:	eb0034d6 	bl	247a8 <assertion_failed>
   1744c:	0004317c 	.word	0x0004317c
   17450:	00042d54 	.word	0x00042d54
   17454:	00042ce0 	.word	0x00042ce0
   17458:	0004256c 	.word	0x0004256c

0001745c <non-virtual thunk to CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   1745c:	e2400010 	sub	r0, r0, #16
   17460:	eaffffc5 	b	1737c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>

00017464 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   17464:	e92d4070 	push	{r4, r5, r6, lr}
   17468:	e5903018 	ldr	r3, [r0, #24]
   1746c:	e24dd008 	sub	sp, sp, #8
   17470:	e3530000 	cmp	r3, #0
   17474:	0a000011 	beq	174c0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x5c>
   17478:	e3510000 	cmp	r1, #0
   1747c:	e1a05001 	mov	r5, r1
   17480:	0a000012 	beq	174d0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x6c>
   17484:	e3520d19 	cmp	r2, #1600	; 0x640
   17488:	e1a06002 	mov	r6, r2
   1748c:	8a000013 	bhi	174e0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x7c>
   17490:	e1a04000 	mov	r4, r0
   17494:	ebffe147 	bl	f9b8 <CUSBFunction::GetHost() const>
   17498:	e3a0c000 	mov	ip, #0
   1749c:	e5941018 	ldr	r1, [r4, #24]
   174a0:	e1a03006 	mov	r3, r6
   174a4:	e1a02005 	mov	r2, r5
   174a8:	e58dc000 	str	ip, [sp]
   174ac:	ebffed53 	bl	12a00 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   174b0:	e1e00000 	mvn	r0, r0
   174b4:	e1a00fa0 	lsr	r0, r0, #31
   174b8:	e28dd008 	add	sp, sp, #8
   174bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   174c0:	e3a020aa 	mov	r2, #170	; 0xaa
   174c4:	e59f1024 	ldr	r1, [pc, #36]	; 174f0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   174c8:	e59f0024 	ldr	r0, [pc, #36]	; 174f4 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x90>
   174cc:	eb0034b5 	bl	247a8 <assertion_failed>
   174d0:	e3a020ab 	mov	r2, #171	; 0xab
   174d4:	e59f1014 	ldr	r1, [pc, #20]	; 174f0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   174d8:	e59f0018 	ldr	r0, [pc, #24]	; 174f8 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x94>
   174dc:	eb0034b1 	bl	247a8 <assertion_failed>
   174e0:	e3a020ac 	mov	r2, #172	; 0xac
   174e4:	e59f1004 	ldr	r1, [pc, #4]	; 174f0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   174e8:	e59f000c 	ldr	r0, [pc, #12]	; 174fc <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   174ec:	eb0034ad 	bl	247a8 <assertion_failed>
   174f0:	0004317c 	.word	0x0004317c
   174f4:	00042d68 	.word	0x00042d68
   174f8:	0004256c 	.word	0x0004256c
   174fc:	00043190 	.word	0x00043190

00017500 <non-virtual thunk to CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   17500:	e2400010 	sub	r0, r0, #16
   17504:	eaffffd6 	b	17464 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>

00017508 <non-virtual thunk to CUSBCDCEthernetDevice::GetMACAddress() const>:
   17508:	e280000c 	add	r0, r0, #12
   1750c:	e12fff1e 	bx	lr

00017510 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   17510:	e92d4010 	push	{r4, lr}
   17514:	e1a04000 	mov	r4, r0
   17518:	ebffe0b2 	bl	f7e8 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1751c:	e3a02000 	mov	r2, #0
   17520:	e59f3024 	ldr	r3, [pc, #36]	; 1754c <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x3c>
   17524:	e5842014 	str	r2, [r4, #20]
   17528:	e2831008 	add	r1, r3, #8
   1752c:	e2833040 	add	r3, r3, #64	; 0x40
   17530:	e5841000 	str	r1, [r4]
   17534:	e5843010 	str	r3, [r4, #16]
   17538:	e5842018 	str	r2, [r4, #24]
   1753c:	e284001c 	add	r0, r4, #28
   17540:	eb004dbb 	bl	2ac34 <CMACAddress::CMACAddress()>
   17544:	e1a00004 	mov	r0, r4
   17548:	e8bd8010 	pop	{r4, pc}
   1754c:	000431c0 	.word	0x000431c0

00017550 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   17550:	e92d4030 	push	{r4, r5, lr}
   17554:	e24dd01c 	sub	sp, sp, #28
   17558:	e1a05001 	mov	r5, r1
   1755c:	e1a04000 	mov	r4, r0
   17560:	ebffe0ff 	bl	f964 <CUSBFunction::GetDevice() const>
   17564:	e1a01000 	mov	r1, r0
   17568:	e28d000c 	add	r0, sp, #12
   1756c:	eb00020a 	bl	17d9c <CUSBString::CUSBString(CUSBDevice*)>
   17570:	e3550000 	cmp	r5, #0
   17574:	1a000005 	bne	17590 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x40>
   17578:	e3a05000 	mov	r5, #0
   1757c:	e28d000c 	add	r0, sp, #12
   17580:	eb000248 	bl	17ea8 <CUSBString::~CUSBString()>
   17584:	e1a00005 	mov	r0, r5
   17588:	e28dd01c 	add	sp, sp, #28
   1758c:	e8bd8030 	pop	{r4, r5, pc}
   17590:	e28d000c 	add	r0, sp, #12
   17594:	eb0002e7 	bl	18138 <CUSBString::GetLanguageID()>
   17598:	e1a01005 	mov	r1, r5
   1759c:	e1a02000 	mov	r2, r0
   175a0:	e28d000c 	add	r0, sp, #12
   175a4:	eb00024f 	bl	17ee8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   175a8:	e2505000 	subs	r5, r0, #0
   175ac:	0afffff1 	beq	17578 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   175b0:	e28d000c 	add	r0, sp, #12
   175b4:	eb0002dd 	bl	18130 <CUSBString::Get() const>
   175b8:	e3500000 	cmp	r0, #0
   175bc:	12801002 	addne	r1, r0, #2
   175c0:	128dc003 	addne	ip, sp, #3
   175c4:	1280000e 	addne	r0, r0, #14
   175c8:	0a000018 	beq	17630 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe0>
   175cc:	e15130d2 	ldrsb	r3, [r1, #-2]
   175d0:	e3530039 	cmp	r3, #57	; 0x39
   175d4:	c2433007 	subgt	r3, r3, #7
   175d8:	e6ef3073 	uxtb	r3, r3
   175dc:	e2433030 	sub	r3, r3, #48	; 0x30
   175e0:	e6ef2073 	uxtb	r2, r3
   175e4:	e352000f 	cmp	r2, #15
   175e8:	8affffe2 	bhi	17578 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   175ec:	e15130d1 	ldrsb	r3, [r1, #-1]
   175f0:	e3530039 	cmp	r3, #57	; 0x39
   175f4:	c2433007 	subgt	r3, r3, #7
   175f8:	e6ef3073 	uxtb	r3, r3
   175fc:	e2433030 	sub	r3, r3, #48	; 0x30
   17600:	e6ef3073 	uxtb	r3, r3
   17604:	e353000f 	cmp	r3, #15
   17608:	8affffda 	bhi	17578 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1760c:	e2811002 	add	r1, r1, #2
   17610:	e1833202 	orr	r3, r3, r2, lsl #4
   17614:	e1500001 	cmp	r0, r1
   17618:	e5ec3001 	strb	r3, [ip, #1]!
   1761c:	1affffea 	bne	175cc <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   17620:	e284001c 	add	r0, r4, #28
   17624:	e28d1004 	add	r1, sp, #4
   17628:	eb004da2 	bl	2acb8 <CMACAddress::Set(unsigned char const*)>
   1762c:	eaffffd2 	b	1757c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x2c>
   17630:	e3a020d3 	mov	r2, #211	; 0xd3
   17634:	e59f1004 	ldr	r1, [pc, #4]	; 17640 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf0>
   17638:	e59f0004 	ldr	r0, [pc, #4]	; 17644 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf4>
   1763c:	eb003459 	bl	247a8 <assertion_failed>
   17640:	0004317c 	.word	0x0004317c
   17644:	000431b0 	.word	0x000431b0

00017648 <CUSBCDCEthernetDevice::Configure()>:
   17648:	e92d4070 	push	{r4, r5, r6, lr}
   1764c:	e1a05000 	mov	r5, r0
   17650:	e24dd020 	sub	sp, sp, #32
   17654:	ea000002 	b	17664 <CUSBCDCEthernetDevice::Configure()+0x1c>
   17658:	e5d43002 	ldrb	r3, [r4, #2]
   1765c:	e353000f 	cmp	r3, #15
   17660:	0a000011 	beq	176ac <CUSBCDCEthernetDevice::Configure()+0x64>
   17664:	e3a01024 	mov	r1, #36	; 0x24
   17668:	e1a00005 	mov	r0, r5
   1766c:	ebffe0dc 	bl	f9e4 <CUSBFunction::GetDescriptor(unsigned char)>
   17670:	e2504000 	subs	r4, r0, #0
   17674:	1afffff7 	bne	17658 <CUSBCDCEthernetDevice::Configure()+0x10>
   17678:	e1a00005 	mov	r0, r5
   1767c:	e59f11f4 	ldr	r1, [pc, #500]	; 17878 <CUSBCDCEthernetDevice::Configure()+0x230>
   17680:	ebffe0e2 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   17684:	ea000046 	b	177a4 <CUSBCDCEthernetDevice::Configure()+0x15c>
   17688:	e5d32006 	ldrb	r2, [r3, #6]
   1768c:	e3520000 	cmp	r2, #0
   17690:	1a000005 	bne	176ac <CUSBCDCEthernetDevice::Configure()+0x64>
   17694:	e5d32007 	ldrb	r2, [r3, #7]
   17698:	e3520000 	cmp	r2, #0
   1769c:	1a000002 	bne	176ac <CUSBCDCEthernetDevice::Configure()+0x64>
   176a0:	e5d33004 	ldrb	r3, [r3, #4]
   176a4:	e3530001 	cmp	r3, #1
   176a8:	8a000008 	bhi	176d0 <CUSBCDCEthernetDevice::Configure()+0x88>
   176ac:	e3a01004 	mov	r1, #4
   176b0:	e1a00005 	mov	r0, r5
   176b4:	ebffe0ca 	bl	f9e4 <CUSBFunction::GetDescriptor(unsigned char)>
   176b8:	e2503000 	subs	r3, r0, #0
   176bc:	0a000066 	beq	1785c <CUSBCDCEthernetDevice::Configure()+0x214>
   176c0:	e5d32005 	ldrb	r2, [r3, #5]
   176c4:	e352000a 	cmp	r2, #10
   176c8:	1afffff7 	bne	176ac <CUSBCDCEthernetDevice::Configure()+0x64>
   176cc:	eaffffed 	b	17688 <CUSBCDCEthernetDevice::Configure()+0x40>
   176d0:	e5d41003 	ldrb	r1, [r4, #3]
   176d4:	e1a00005 	mov	r0, r5
   176d8:	ebffff9c 	bl	17550 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   176dc:	e2504000 	subs	r4, r0, #0
   176e0:	0a00002a 	beq	17790 <CUSBCDCEthernetDevice::Configure()+0x148>
   176e4:	e28d0010 	add	r0, sp, #16
   176e8:	eb004107 	bl	27b0c <CString::CString()>
   176ec:	e28d1010 	add	r1, sp, #16
   176f0:	e285001c 	add	r0, r5, #28
   176f4:	eb004dc9 	bl	2ae20 <CMACAddress::Format(CString*) const>
   176f8:	eb003d12 	bl	26b48 <CLogger::Get()>
   176fc:	e1a04000 	mov	r4, r0
   17700:	e28d0010 	add	r0, sp, #16
   17704:	eb004118 	bl	27b6c <CString::operator char const*() const>
   17708:	e1a02000 	mov	r2, r0
   1770c:	e59f3168 	ldr	r3, [pc, #360]	; 1787c <CUSBCDCEthernetDevice::Configure()+0x234>
   17710:	e58d2000 	str	r2, [sp]
   17714:	e1a00004 	mov	r0, r4
   17718:	e3a02004 	mov	r2, #4
   1771c:	e59f1154 	ldr	r1, [pc, #340]	; 17878 <CUSBCDCEthernetDevice::Configure()+0x230>
   17720:	eb003c4a 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17724:	ea000003 	b	17738 <CUSBCDCEthernetDevice::Configure()+0xf0>
   17728:	e5d43003 	ldrb	r3, [r4, #3]
   1772c:	e203303f 	and	r3, r3, #63	; 0x3f
   17730:	e3530002 	cmp	r3, #2
   17734:	0a00001d 	beq	177b0 <CUSBCDCEthernetDevice::Configure()+0x168>
   17738:	e3a01005 	mov	r1, #5
   1773c:	e1a00005 	mov	r0, r5
   17740:	ebffe0a7 	bl	f9e4 <CUSBFunction::GetDescriptor(unsigned char)>
   17744:	e2504000 	subs	r4, r0, #0
   17748:	1afffff6 	bne	17728 <CUSBCDCEthernetDevice::Configure()+0xe0>
   1774c:	e5953014 	ldr	r3, [r5, #20]
   17750:	e1a00005 	mov	r0, r5
   17754:	e3530000 	cmp	r3, #0
   17758:	0a00002c 	beq	17810 <CUSBCDCEthernetDevice::Configure()+0x1c8>
   1775c:	e5953018 	ldr	r3, [r5, #24]
   17760:	e3530000 	cmp	r3, #0
   17764:	0a000029 	beq	17810 <CUSBCDCEthernetDevice::Configure()+0x1c8>
   17768:	ebffdfb5 	bl	f644 <CUSBFunction::Configure()>
   1776c:	e2504000 	subs	r4, r0, #0
   17770:	0a000020 	beq	177f8 <CUSBCDCEthernetDevice::Configure()+0x1b0>
   17774:	e2850010 	add	r0, r5, #16
   17778:	eb004dc9 	bl	2aea4 <CNetDevice::AddNetDevice()>
   1777c:	e28d0010 	add	r0, sp, #16
   17780:	eb0040ae 	bl	27a40 <CString::~CString()>
   17784:	e1a00004 	mov	r0, r4
   17788:	e28dd020 	add	sp, sp, #32
   1778c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17790:	eb003cec 	bl	26b48 <CLogger::Get()>
   17794:	e3a02001 	mov	r2, #1
   17798:	e59f30e0 	ldr	r3, [pc, #224]	; 17880 <CUSBCDCEthernetDevice::Configure()+0x238>
   1779c:	e59f10d4 	ldr	r1, [pc, #212]	; 17878 <CUSBCDCEthernetDevice::Configure()+0x230>
   177a0:	eb003c2a 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   177a4:	e1a00004 	mov	r0, r4
   177a8:	e28dd020 	add	sp, sp, #32
   177ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   177b0:	e1d430d2 	ldrsb	r3, [r4, #2]
   177b4:	e3530000 	cmp	r3, #0
   177b8:	ba000018 	blt	17820 <CUSBCDCEthernetDevice::Configure()+0x1d8>
   177bc:	e5953018 	ldr	r3, [r5, #24]
   177c0:	e1a00005 	mov	r0, r5
   177c4:	e3530000 	cmp	r3, #0
   177c8:	1a000010 	bne	17810 <CUSBCDCEthernetDevice::Configure()+0x1c8>
   177cc:	ebffe064 	bl	f964 <CUSBFunction::GetDevice() const>
   177d0:	e1a01000 	mov	r1, r0
   177d4:	e3a00014 	mov	r0, #20
   177d8:	e58d100c 	str	r1, [sp, #12]
   177dc:	eb004df9 	bl	2afc8 <operator new(unsigned int)>
   177e0:	e1a06000 	mov	r6, r0
   177e4:	e1a02004 	mov	r2, r4
   177e8:	e59d100c 	ldr	r1, [sp, #12]
   177ec:	ebffde9a 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   177f0:	e5856018 	str	r6, [r5, #24]
   177f4:	eaffffcf 	b	17738 <CUSBCDCEthernetDevice::Configure()+0xf0>
   177f8:	eb003cd2 	bl	26b48 <CLogger::Get()>
   177fc:	e3a02001 	mov	r2, #1
   17800:	e59f307c 	ldr	r3, [pc, #124]	; 17884 <CUSBCDCEthernetDevice::Configure()+0x23c>
   17804:	e59f106c 	ldr	r1, [pc, #108]	; 17878 <CUSBCDCEthernetDevice::Configure()+0x230>
   17808:	eb003c10 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1780c:	eaffffda 	b	1777c <CUSBCDCEthernetDevice::Configure()+0x134>
   17810:	e59f1060 	ldr	r1, [pc, #96]	; 17878 <CUSBCDCEthernetDevice::Configure()+0x230>
   17814:	ebffe07d 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   17818:	e3a04000 	mov	r4, #0
   1781c:	eaffffd6 	b	1777c <CUSBCDCEthernetDevice::Configure()+0x134>
   17820:	e5953014 	ldr	r3, [r5, #20]
   17824:	e1a00005 	mov	r0, r5
   17828:	e3530000 	cmp	r3, #0
   1782c:	1afffff7 	bne	17810 <CUSBCDCEthernetDevice::Configure()+0x1c8>
   17830:	ebffe04b 	bl	f964 <CUSBFunction::GetDevice() const>
   17834:	e1a01000 	mov	r1, r0
   17838:	e3a00014 	mov	r0, #20
   1783c:	e58d100c 	str	r1, [sp, #12]
   17840:	eb004de0 	bl	2afc8 <operator new(unsigned int)>
   17844:	e1a06000 	mov	r6, r0
   17848:	e1a02004 	mov	r2, r4
   1784c:	e59d100c 	ldr	r1, [sp, #12]
   17850:	ebffde81 	bl	f25c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17854:	e5856014 	str	r6, [r5, #20]
   17858:	eaffffb6 	b	17738 <CUSBCDCEthernetDevice::Configure()+0xf0>
   1785c:	e1a04003 	mov	r4, r3
   17860:	e1a00005 	mov	r0, r5
   17864:	e59f100c 	ldr	r1, [pc, #12]	; 17878 <CUSBCDCEthernetDevice::Configure()+0x230>
   17868:	ebffe068 	bl	fa10 <CUSBFunction::ConfigurationError(char const*) const>
   1786c:	e1a00004 	mov	r0, r4
   17870:	e28dd020 	add	sp, sp, #32
   17874:	e8bd8070 	pop	{r4, r5, r6, pc}
   17878:	00043228 	.word	0x00043228
   1787c:	00042e08 	.word	0x00042e08
   17880:	00042fe8 	.word	0x00042fe8
   17884:	00041ce4 	.word	0x00041ce4

00017888 <CNetDevice::IsLinkUp()>:
   17888:	e3a00001 	mov	r0, #1
   1788c:	e12fff1e 	bx	lr

00017890 <CNetDevice::GetLinkSpeed()>:
   17890:	e3a00006 	mov	r0, #6
   17894:	e12fff1e 	bx	lr

00017898 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   17898:	e3a03000 	mov	r3, #0
   1789c:	e92d4070 	push	{r4, r5, r6, lr}
   178a0:	e1510003 	cmp	r1, r3
   178a4:	e0814002 	add	r4, r1, r2
   178a8:	e8800006 	stm	r0, {r1, r2}
   178ac:	e5801010 	str	r1, [r0, #16]
   178b0:	e5801018 	str	r1, [r0, #24]
   178b4:	e580400c 	str	r4, [r0, #12]
   178b8:	e5c03008 	strb	r3, [r0, #8]
   178bc:	e5803014 	str	r3, [r0, #20]
   178c0:	0a00003b 	beq	179b4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x11c>
   178c4:	e2423004 	sub	r3, r2, #4
   178c8:	e3530f7f 	cmp	r3, #508	; 0x1fc
   178cc:	88bd8070 	pophi	{r4, r5, r6, pc}
   178d0:	e5d13000 	ldrb	r3, [r1]
   178d4:	e3530009 	cmp	r3, #9
   178d8:	18bd8070 	popne	{r4, r5, r6, pc}
   178dc:	e5d1c001 	ldrb	ip, [r1, #1]
   178e0:	e35c0002 	cmp	ip, #2
   178e4:	18bd8070 	popne	{r4, r5, r6, pc}
   178e8:	e5d13002 	ldrb	r3, [r1, #2]
   178ec:	e5d1e003 	ldrb	lr, [r1, #3]
   178f0:	e183340e 	orr	r3, r3, lr, lsl #8
   178f4:	e1530002 	cmp	r3, r2
   178f8:	88bd8070 	pophi	{r4, r5, r6, pc}
   178fc:	30814003 	addcc	r4, r1, r3
   17900:	e2813002 	add	r3, r1, #2
   17904:	3580400c 	strcc	r4, [r0, #12]
   17908:	e1540003 	cmp	r4, r3
   1790c:	9a00002c 	bls	179c4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x12c>
   17910:	e3a05000 	mov	r5, #0
   17914:	e3a02009 	mov	r2, #9
   17918:	e1a0e005 	mov	lr, r5
   1791c:	ea000008 	b	17944 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xac>
   17920:	e35c0002 	cmp	ip, #2
   17924:	0a00001e 	beq	179a4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x10c>
   17928:	e2832002 	add	r2, r3, #2
   1792c:	e1540002 	cmp	r4, r2
   17930:	9a000024 	bls	179c8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x130>
   17934:	e1a01003 	mov	r1, r3
   17938:	e1a0e00c 	mov	lr, ip
   1793c:	e5d32000 	ldrb	r2, [r3]
   17940:	e5d3c001 	ldrb	ip, [r3, #1]
   17944:	e0813002 	add	r3, r1, r2
   17948:	e1530004 	cmp	r3, r4
   1794c:	8a00000a 	bhi	1797c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   17950:	e35c0004 	cmp	ip, #4
   17954:	0a00000a 	beq	17984 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xec>
   17958:	e35c0005 	cmp	ip, #5
   1795c:	1affffef 	bne	17920 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x88>
   17960:	e31e00fd 	tst	lr, #253	; 0xfd
   17964:	0a000004 	beq	1797c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   17968:	e3550000 	cmp	r5, #0
   1796c:	13a0e009 	movne	lr, #9
   17970:	03a0e007 	moveq	lr, #7
   17974:	e152000e 	cmp	r2, lr
   17978:	0affffea 	beq	17928 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x90>
   1797c:	e5801018 	str	r1, [r0, #24]
   17980:	e8bd8070 	pop	{r4, r5, r6, pc}
   17984:	e35e0000 	cmp	lr, #0
   17988:	0afffffb 	beq	1797c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   1798c:	e5d15005 	ldrb	r5, [r1, #5]
   17990:	e3a0e009 	mov	lr, #9
   17994:	e2455001 	sub	r5, r5, #1
   17998:	e16f5f15 	clz	r5, r5
   1799c:	e1a052a5 	lsr	r5, r5, #5
   179a0:	eafffff3 	b	17974 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xdc>
   179a4:	e35e0000 	cmp	lr, #0
   179a8:	1afffff3 	bne	1797c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   179ac:	e3a0e009 	mov	lr, #9
   179b0:	eaffffef 	b	17974 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xdc>
   179b4:	e3a02024 	mov	r2, #36	; 0x24
   179b8:	e59f101c 	ldr	r1, [pc, #28]	; 179dc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x144>
   179bc:	e59f001c 	ldr	r0, [pc, #28]	; 179e0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x148>
   179c0:	eb003378 	bl	247a8 <assertion_failed>
   179c4:	e1a03001 	mov	r3, r1
   179c8:	e1530004 	cmp	r3, r4
   179cc:	03a03001 	moveq	r3, #1
   179d0:	15803018 	strne	r3, [r0, #24]
   179d4:	05c03008 	strbeq	r3, [r0, #8]
   179d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   179dc:	00043230 	.word	0x00043230
   179e0:	00043244 	.word	0x00043244

000179e4 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   179e4:	e3510000 	cmp	r1, #0
   179e8:	e92d4010 	push	{r4, lr}
   179ec:	0a00000e 	beq	17a2c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x48>
   179f0:	e591e000 	ldr	lr, [r1]
   179f4:	e591c004 	ldr	ip, [r1, #4]
   179f8:	e5d12008 	ldrb	r2, [r1, #8]
   179fc:	e591400c 	ldr	r4, [r1, #12]
   17a00:	e580e000 	str	lr, [r0]
   17a04:	e580c004 	str	ip, [r0, #4]
   17a08:	e591e010 	ldr	lr, [r1, #16]
   17a0c:	e591c014 	ldr	ip, [r1, #20]
   17a10:	e5c02008 	strb	r2, [r0, #8]
   17a14:	e5912018 	ldr	r2, [r1, #24]
   17a18:	e580400c 	str	r4, [r0, #12]
   17a1c:	e580e010 	str	lr, [r0, #16]
   17a20:	e580c014 	str	ip, [r0, #20]
   17a24:	e5802018 	str	r2, [r0, #24]
   17a28:	e8bd8010 	pop	{r4, pc}
   17a2c:	e3a02082 	mov	r2, #130	; 0x82
   17a30:	e59f1004 	ldr	r1, [pc, #4]	; 17a3c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x58>
   17a34:	e59f0004 	ldr	r0, [pc, #4]	; 17a40 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x5c>
   17a38:	eb00335a 	bl	247a8 <assertion_failed>
   17a3c:	00043230 	.word	0x00043230
   17a40:	00043254 	.word	0x00043254

00017a44 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   17a44:	e12fff1e 	bx	lr

00017a48 <CUSBConfigurationParser::IsValid() const>:
   17a48:	e5d00008 	ldrb	r0, [r0, #8]
   17a4c:	e12fff1e 	bx	lr

00017a50 <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   17a50:	e5d03008 	ldrb	r3, [r0, #8]
   17a54:	e92d4010 	push	{r4, lr}
   17a58:	e3530000 	cmp	r3, #0
   17a5c:	0a00001d 	beq	17ad8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x88>
   17a60:	e5903010 	ldr	r3, [r0, #16]
   17a64:	e590c00c 	ldr	ip, [r0, #12]
   17a68:	e153000c 	cmp	r3, ip
   17a6c:	3a000008 	bcc	17a94 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x44>
   17a70:	ea000016 	b	17ad0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x80>
   17a74:	e3510005 	cmp	r1, #5
   17a78:	03520004 	cmpeq	r2, #4
   17a7c:	0a000013 	beq	17ad0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x80>
   17a80:	e1520001 	cmp	r2, r1
   17a84:	0a00000c 	beq	17abc <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x6c>
   17a88:	e153000c 	cmp	r3, ip
   17a8c:	e5803010 	str	r3, [r0, #16]
   17a90:	0a00000e 	beq	17ad0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x80>
   17a94:	e5d3e000 	ldrb	lr, [r3]
   17a98:	e1a04003 	mov	r4, r3
   17a9c:	e5d32001 	ldrb	r2, [r3, #1]
   17aa0:	e083300e 	add	r3, r3, lr
   17aa4:	e153000c 	cmp	r3, ip
   17aa8:	9afffff1 	bls	17a74 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x24>
   17aac:	e3a020a9 	mov	r2, #169	; 0xa9
   17ab0:	e59f1030 	ldr	r1, [pc, #48]	; 17ae8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x98>
   17ab4:	e59f0030 	ldr	r0, [pc, #48]	; 17aec <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   17ab8:	eb00333a 	bl	247a8 <assertion_failed>
   17abc:	e5803010 	str	r3, [r0, #16]
   17ac0:	e5804018 	str	r4, [r0, #24]
   17ac4:	e5804014 	str	r4, [r0, #20]
   17ac8:	e1a00004 	mov	r0, r4
   17acc:	e8bd8010 	pop	{r4, pc}
   17ad0:	e3a04000 	mov	r4, #0
   17ad4:	eafffffa 	b	17ac4 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x74>
   17ad8:	e3a0209f 	mov	r2, #159	; 0x9f
   17adc:	e59f1004 	ldr	r1, [pc, #4]	; 17ae8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x98>
   17ae0:	e59f0008 	ldr	r0, [pc, #8]	; 17af0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa0>
   17ae4:	eb00332f 	bl	247a8 <assertion_failed>
   17ae8:	00043230 	.word	0x00043230
   17aec:	00043264 	.word	0x00043264
   17af0:	00041314 	.word	0x00041314

00017af4 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   17af4:	e5d03008 	ldrb	r3, [r0, #8]
   17af8:	e92d4010 	push	{r4, lr}
   17afc:	e3530000 	cmp	r3, #0
   17b00:	0a000006 	beq	17b20 <CUSBConfigurationParser::GetCurrentDescriptor()+0x2c>
   17b04:	e5900014 	ldr	r0, [r0, #20]
   17b08:	e3500000 	cmp	r0, #0
   17b0c:	18bd8010 	popne	{r4, pc}
   17b10:	e3a020c8 	mov	r2, #200	; 0xc8
   17b14:	e59f1014 	ldr	r1, [pc, #20]	; 17b30 <CUSBConfigurationParser::GetCurrentDescriptor()+0x3c>
   17b18:	e59f0014 	ldr	r0, [pc, #20]	; 17b34 <CUSBConfigurationParser::GetCurrentDescriptor()+0x40>
   17b1c:	eb003321 	bl	247a8 <assertion_failed>
   17b20:	e3a020c7 	mov	r2, #199	; 0xc7
   17b24:	e59f1004 	ldr	r1, [pc, #4]	; 17b30 <CUSBConfigurationParser::GetCurrentDescriptor()+0x3c>
   17b28:	e59f0008 	ldr	r0, [pc, #8]	; 17b38 <CUSBConfigurationParser::GetCurrentDescriptor()+0x44>
   17b2c:	eb00331d 	bl	247a8 <assertion_failed>
   17b30:	00043230 	.word	0x00043230
   17b34:	00043280 	.word	0x00043280
   17b38:	00041314 	.word	0x00041314

00017b3c <CUSBConfigurationParser::Error(char const*) const>:
   17b3c:	e92d4030 	push	{r4, r5, lr}
   17b40:	e2515000 	subs	r5, r1, #0
   17b44:	e24dd00c 	sub	sp, sp, #12
   17b48:	0a00000e 	beq	17b88 <CUSBConfigurationParser::Error(char const*) const+0x4c>
   17b4c:	e1a04000 	mov	r4, r0
   17b50:	eb003bfc 	bl	26b48 <CLogger::Get()>
   17b54:	e5941000 	ldr	r1, [r4]
   17b58:	e5942018 	ldr	r2, [r4, #24]
   17b5c:	e59f3034 	ldr	r3, [pc, #52]	; 17b98 <CUSBConfigurationParser::Error(char const*) const+0x5c>
   17b60:	e0422001 	sub	r2, r2, r1
   17b64:	e58d2000 	str	r2, [sp]
   17b68:	e1a01005 	mov	r1, r5
   17b6c:	e3a02001 	mov	r2, #1
   17b70:	eb003b36 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17b74:	e1c400d0 	ldrd	r0, [r4]
   17b78:	e1a02005 	mov	r2, r5
   17b7c:	e28dd00c 	add	sp, sp, #12
   17b80:	e8bd4030 	pop	{r4, r5, lr}
   17b84:	ea003477 	b	24d68 <debug_hexdump(void const*, unsigned int, char const*)>
   17b88:	e3a020cf 	mov	r2, #207	; 0xcf
   17b8c:	e59f1008 	ldr	r1, [pc, #8]	; 17b9c <CUSBConfigurationParser::Error(char const*) const+0x60>
   17b90:	e59f0008 	ldr	r0, [pc, #8]	; 17ba0 <CUSBConfigurationParser::Error(char const*) const+0x64>
   17b94:	eb003303 	bl	247a8 <assertion_failed>
   17b98:	0004329c 	.word	0x0004329c
   17b9c:	00043230 	.word	0x00043230
   17ba0:	00041d4c 	.word	0x00041d4c

00017ba4 <CUSBGamePadDevice::GetInitialState()>:
   17ba4:	e2800024 	add	r0, r0, #36	; 0x24
   17ba8:	e12fff1e 	bx	lr

00017bac <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   17bac:	e3510000 	cmp	r1, #0
   17bb0:	012fff1e 	bxeq	lr
   17bb4:	e2803f4a 	add	r3, r0, #296	; 0x128
   17bb8:	e1d330b0 	ldrh	r3, [r3]
   17bbc:	e92d4070 	push	{r4, r5, r6, lr}
   17bc0:	e1530002 	cmp	r3, r2
   17bc4:	e1a04000 	mov	r4, r0
   17bc8:	18bd8070 	popne	{r4, r5, r6, pc}
   17bcc:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   17bd0:	e3530000 	cmp	r3, #0
   17bd4:	08bd8070 	popeq	{r4, r5, r6, pc}
   17bd8:	e1a05000 	mov	r5, r0
   17bdc:	e4953024 	ldr	r3, [r5], #36	; 0x24
   17be0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   17be4:	e12fff33 	blx	r3
   17be8:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   17bec:	e1a01005 	mov	r1, r5
   17bf0:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   17bf4:	e2400001 	sub	r0, r0, #1
   17bf8:	e8bd4070 	pop	{r4, r5, r6, lr}
   17bfc:	e12fff13 	bx	r3

00017c00 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   17c00:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   17c04:	e92d4010 	push	{r4, lr}
   17c08:	e3530000 	cmp	r3, #0
   17c0c:	1a000006 	bne	17c2c <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x2c>
   17c10:	e3510000 	cmp	r1, #0
   17c14:	e5801124 	str	r1, [r0, #292]	; 0x124
   17c18:	18bd8010 	popne	{r4, pc}
   17c1c:	e3a0204d 	mov	r2, #77	; 0x4d
   17c20:	e59f1014 	ldr	r1, [pc, #20]	; 17c3c <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x3c>
   17c24:	e59f0014 	ldr	r0, [pc, #20]	; 17c40 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x40>
   17c28:	eb0032de 	bl	247a8 <assertion_failed>
   17c2c:	e3a0204b 	mov	r2, #75	; 0x4b
   17c30:	e59f1004 	ldr	r1, [pc, #4]	; 17c3c <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x3c>
   17c34:	e59f0008 	ldr	r0, [pc, #8]	; 17c44 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x44>
   17c38:	eb0032da 	bl	247a8 <assertion_failed>
   17c3c:	000432cc 	.word	0x000432cc
   17c40:	000432f4 	.word	0x000432f4
   17c44:	000432dc 	.word	0x000432dc

00017c48 <CUSBGamePadDevice::Configure()>:
   17c48:	e92d4030 	push	{r4, r5, lr}
   17c4c:	e2803f4a 	add	r3, r0, #296	; 0x128
   17c50:	e1d310b0 	ldrh	r1, [r3]
   17c54:	e24dd00c 	sub	sp, sp, #12
   17c58:	e3510000 	cmp	r1, #0
   17c5c:	0a00001a 	beq	17ccc <CUSBGamePadDevice::Configure()+0x84>
   17c60:	e1a04000 	mov	r4, r0
   17c64:	ebffe94a 	bl	12194 <CUSBHIDDevice::Configure(unsigned int)>
   17c68:	e2505000 	subs	r5, r0, #0
   17c6c:	0a00000e 	beq	17cac <CUSBGamePadDevice::Configure()+0x64>
   17c70:	e59f2064 	ldr	r2, [pc, #100]	; 17cdc <CUSBGamePadDevice::Configure()+0x94>
   17c74:	e5923000 	ldr	r3, [r2]
   17c78:	e584312c 	str	r3, [r4, #300]	; 0x12c
   17c7c:	e2833001 	add	r3, r3, #1
   17c80:	e5823000 	str	r3, [r2]
   17c84:	eb003589 	bl	252b0 <CDeviceNameService::Get()>
   17c88:	e3a02000 	mov	r2, #0
   17c8c:	e58d2000 	str	r2, [sp]
   17c90:	e1a03004 	mov	r3, r4
   17c94:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   17c98:	e59f1040 	ldr	r1, [pc, #64]	; 17ce0 <CUSBGamePadDevice::Configure()+0x98>
   17c9c:	eb00358f 	bl	252e0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   17ca0:	e1a00005 	mov	r0, r5
   17ca4:	e28dd00c 	add	sp, sp, #12
   17ca8:	e8bd8030 	pop	{r4, r5, pc}
   17cac:	eb003ba5 	bl	26b48 <CLogger::Get()>
   17cb0:	e3a02001 	mov	r2, #1
   17cb4:	e59f3028 	ldr	r3, [pc, #40]	; 17ce4 <CUSBGamePadDevice::Configure()+0x9c>
   17cb8:	e59f1028 	ldr	r1, [pc, #40]	; 17ce8 <CUSBGamePadDevice::Configure()+0xa0>
   17cbc:	eb003ae3 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17cc0:	e1a00005 	mov	r0, r5
   17cc4:	e28dd00c 	add	sp, sp, #12
   17cc8:	e8bd8030 	pop	{r4, r5, pc}
   17ccc:	e3a02035 	mov	r2, #53	; 0x35
   17cd0:	e59f1014 	ldr	r1, [pc, #20]	; 17cec <CUSBGamePadDevice::Configure()+0xa4>
   17cd4:	e59f0014 	ldr	r0, [pc, #20]	; 17cf0 <CUSBGamePadDevice::Configure()+0xa8>
   17cd8:	eb0032b2 	bl	247a8 <assertion_failed>
   17cdc:	00049fb4 	.word	0x00049fb4
   17ce0:	00043314 	.word	0x00043314
   17ce4:	00040ac0 	.word	0x00040ac0
   17ce8:	0004330c 	.word	0x0004330c
   17cec:	000432cc 	.word	0x000432cc
   17cf0:	00041ff0 	.word	0x00041ff0

00017cf4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   17cf4:	e92d4010 	push	{r4, lr}
   17cf8:	e3a02000 	mov	r2, #0
   17cfc:	e1a04000 	mov	r4, r0
   17d00:	ebffe8e2 	bl	12090 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   17d04:	e3a01000 	mov	r1, #0
   17d08:	e59f2024 	ldr	r2, [pc, #36]	; 17d34 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x40>
   17d0c:	e2843f4a 	add	r3, r4, #296	; 0x128
   17d10:	e5842000 	str	r2, [r4]
   17d14:	e5841124 	str	r1, [r4, #292]	; 0x124
   17d18:	e3a02c01 	mov	r2, #256	; 0x100
   17d1c:	e1c310b0 	strh	r1, [r3]
   17d20:	e2840024 	add	r0, r4, #36	; 0x24
   17d24:	e584112c 	str	r1, [r4, #300]	; 0x12c
   17d28:	eb004877 	bl	29f0c <memset>
   17d2c:	e1a00004 	mov	r0, r4
   17d30:	e8bd8010 	pop	{r4, pc}
   17d34:	00043324 	.word	0x00043324

00017d38 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   17d38:	e92d4070 	push	{r4, r5, r6, lr}
   17d3c:	e3a06000 	mov	r6, #0
   17d40:	e1a04000 	mov	r4, r0
   17d44:	e59f502c 	ldr	r5, [pc, #44]	; 17d78 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x40>
   17d48:	e5806124 	str	r6, [r0, #292]	; 0x124
   17d4c:	e2853018 	add	r3, r5, #24
   17d50:	e5803000 	str	r3, [r0]
   17d54:	eb003555 	bl	252b0 <CDeviceNameService::Get()>
   17d58:	e1a03006 	mov	r3, r6
   17d5c:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   17d60:	e2851008 	add	r1, r5, #8
   17d64:	eb003577 	bl	25348 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   17d68:	e1a00004 	mov	r0, r4
   17d6c:	ebffe8dd 	bl	120e8 <CUSBHIDDevice::~CUSBHIDDevice()>
   17d70:	e1a00004 	mov	r0, r4
   17d74:	e8bd8070 	pop	{r4, r5, r6, pc}
   17d78:	0004330c 	.word	0x0004330c

00017d7c <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   17d7c:	e92d4010 	push	{r4, lr}
   17d80:	e1a04000 	mov	r4, r0
   17d84:	ebffffeb 	bl	17d38 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   17d88:	e1a00004 	mov	r0, r4
   17d8c:	e3a01e13 	mov	r1, #304	; 0x130
   17d90:	eb004c9a 	bl	2b000 <operator delete(void*, unsigned int)>
   17d94:	e1a00004 	mov	r0, r4
   17d98:	e8bd8010 	pop	{r4, pc}

00017d9c <CUSBString::CUSBString(CUSBDevice*)>:
   17d9c:	e3a03000 	mov	r3, #0
   17da0:	e92d4070 	push	{r4, r5, r6, lr}
   17da4:	e880000a 	stm	r0, {r1, r3}
   17da8:	e1a04000 	mov	r4, r0
   17dac:	e3a00010 	mov	r0, #16
   17db0:	eb004c84 	bl	2afc8 <operator new(unsigned int)>
   17db4:	e1a05000 	mov	r5, r0
   17db8:	eb003f53 	bl	27b0c <CString::CString()>
   17dbc:	e5943000 	ldr	r3, [r4]
   17dc0:	e5845008 	str	r5, [r4, #8]
   17dc4:	e3530000 	cmp	r3, #0
   17dc8:	0a000001 	beq	17dd4 <CUSBString::CUSBString(CUSBDevice*)+0x38>
   17dcc:	e1a00004 	mov	r0, r4
   17dd0:	e8bd8070 	pop	{r4, r5, r6, pc}
   17dd4:	e3a02023 	mov	r2, #35	; 0x23
   17dd8:	e59f1004 	ldr	r1, [pc, #4]	; 17de4 <CUSBString::CUSBString(CUSBDevice*)+0x48>
   17ddc:	e59f0004 	ldr	r0, [pc, #4]	; 17de8 <CUSBString::CUSBString(CUSBDevice*)+0x4c>
   17de0:	eb003270 	bl	247a8 <assertion_failed>
   17de4:	00043368 	.word	0x00043368
   17de8:	00041534 	.word	0x00041534

00017dec <CUSBString::CUSBString(CUSBString*)>:
   17dec:	e3a03000 	mov	r3, #0
   17df0:	e92d4070 	push	{r4, r5, r6, lr}
   17df4:	e5803004 	str	r3, [r0, #4]
   17df8:	e1a04000 	mov	r4, r0
   17dfc:	e3a00010 	mov	r0, #16
   17e00:	e1a05001 	mov	r5, r1
   17e04:	eb004c6f 	bl	2afc8 <operator new(unsigned int)>
   17e08:	e1a06000 	mov	r6, r0
   17e0c:	eb003f3e 	bl	27b0c <CString::CString()>
   17e10:	e3550000 	cmp	r5, #0
   17e14:	e5846008 	str	r6, [r4, #8]
   17e18:	0a000016 	beq	17e78 <CUSBString::CUSBString(CUSBString*)+0x8c>
   17e1c:	e1c520d0 	ldrd	r2, [r5]
   17e20:	e3530000 	cmp	r3, #0
   17e24:	e5842000 	str	r2, [r4]
   17e28:	0a000008 	beq	17e50 <CUSBString::CUSBString(CUSBString*)+0x64>
   17e2c:	e5d30000 	ldrb	r0, [r3]
   17e30:	eb004c6a 	bl	2afe0 <operator new[](unsigned int)>
   17e34:	e5951004 	ldr	r1, [r5, #4]
   17e38:	e5840004 	str	r0, [r4, #4]
   17e3c:	e5d12000 	ldrb	r2, [r1]
   17e40:	eb004a7a 	bl	2a830 <memcpy>
   17e44:	e5943008 	ldr	r3, [r4, #8]
   17e48:	e3530000 	cmp	r3, #0
   17e4c:	0a000005 	beq	17e68 <CUSBString::CUSBString(CUSBString*)+0x7c>
   17e50:	e5953008 	ldr	r3, [r5, #8]
   17e54:	e3530000 	cmp	r3, #0
   17e58:	0a00000a 	beq	17e88 <CUSBString::CUSBString(CUSBString*)+0x9c>
   17e5c:	e1a00004 	mov	r0, r4
   17e60:	e5843008 	str	r3, [r4, #8]
   17e64:	e8bd8070 	pop	{r4, r5, r6, pc}
   17e68:	e3a02035 	mov	r2, #53	; 0x35
   17e6c:	e59f1024 	ldr	r1, [pc, #36]	; 17e98 <CUSBString::CUSBString(CUSBString*)+0xac>
   17e70:	e59f0024 	ldr	r0, [pc, #36]	; 17e9c <CUSBString::CUSBString(CUSBString*)+0xb0>
   17e74:	eb00324b 	bl	247a8 <assertion_failed>
   17e78:	e3a0202b 	mov	r2, #43	; 0x2b
   17e7c:	e59f1014 	ldr	r1, [pc, #20]	; 17e98 <CUSBString::CUSBString(CUSBString*)+0xac>
   17e80:	e59f0018 	ldr	r0, [pc, #24]	; 17ea0 <CUSBString::CUSBString(CUSBString*)+0xb4>
   17e84:	eb003247 	bl	247a8 <assertion_failed>
   17e88:	e3a02036 	mov	r2, #54	; 0x36
   17e8c:	e59f1004 	ldr	r1, [pc, #4]	; 17e98 <CUSBString::CUSBString(CUSBString*)+0xac>
   17e90:	e59f000c 	ldr	r0, [pc, #12]	; 17ea4 <CUSBString::CUSBString(CUSBString*)+0xb8>
   17e94:	eb003243 	bl	247a8 <assertion_failed>
   17e98:	00043368 	.word	0x00043368
   17e9c:	00043378 	.word	0x00043378
   17ea0:	00041a3c 	.word	0x00041a3c
   17ea4:	00043388 	.word	0x00043388

00017ea8 <CUSBString::~CUSBString()>:
   17ea8:	e92d4010 	push	{r4, lr}
   17eac:	e1a04000 	mov	r4, r0
   17eb0:	e5900008 	ldr	r0, [r0, #8]
   17eb4:	e3500000 	cmp	r0, #0
   17eb8:	0a000002 	beq	17ec8 <CUSBString::~CUSBString()+0x20>
   17ebc:	e5903000 	ldr	r3, [r0]
   17ec0:	e5933004 	ldr	r3, [r3, #4]
   17ec4:	e12fff33 	blx	r3
   17ec8:	e3a03000 	mov	r3, #0
   17ecc:	e5940004 	ldr	r0, [r4, #4]
   17ed0:	e5843008 	str	r3, [r4, #8]
   17ed4:	e1500003 	cmp	r0, r3
   17ed8:	0a000000 	beq	17ee0 <CUSBString::~CUSBString()+0x38>
   17edc:	eb004c46 	bl	2affc <operator delete[](void*)>
   17ee0:	e1a00004 	mov	r0, r4
   17ee4:	e8bd8010 	pop	{r4, pc}

00017ee8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   17ee8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17eec:	e2517000 	subs	r7, r1, #0
   17ef0:	e28db020 	add	fp, sp, #32
   17ef4:	e24dd014 	sub	sp, sp, #20
   17ef8:	0a000051 	beq	18044 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x15c>
   17efc:	e1a04000 	mov	r4, r0
   17f00:	e5900004 	ldr	r0, [r0, #4]
   17f04:	e1a05002 	mov	r5, r2
   17f08:	e3500000 	cmp	r0, #0
   17f0c:	0a000000 	beq	17f14 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   17f10:	eb004c39 	bl	2affc <operator delete[](void*)>
   17f14:	e3a00004 	mov	r0, #4
   17f18:	eb004c30 	bl	2afe0 <operator new[](unsigned int)>
   17f1c:	e5943000 	ldr	r3, [r4]
   17f20:	e5840004 	str	r0, [r4, #4]
   17f24:	e3530000 	cmp	r3, #0
   17f28:	0a000049 	beq	18054 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x16c>
   17f2c:	e1a00003 	mov	r0, r3
   17f30:	ebffd92e 	bl	e3f0 <CUSBDevice::GetHost() const>
   17f34:	e1a06000 	mov	r6, r0
   17f38:	e5940000 	ldr	r0, [r4]
   17f3c:	ebffd921 	bl	e3c8 <CUSBDevice::GetEndpoint0() const>
   17f40:	e3a08080 	mov	r8, #128	; 0x80
   17f44:	e3a02004 	mov	r2, #4
   17f48:	e5943004 	ldr	r3, [r4, #4]
   17f4c:	e1a01000 	mov	r1, r0
   17f50:	e98d0104 	stmib	sp, {r2, r8}
   17f54:	e58d3000 	str	r3, [sp]
   17f58:	e1a00006 	mov	r0, r6
   17f5c:	e1a03007 	mov	r3, r7
   17f60:	e3a02003 	mov	r2, #3
   17f64:	e58d500c 	str	r5, [sp, #12]
   17f68:	ebffea70 	bl	12930 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17f6c:	e3500000 	cmp	r0, #0
   17f70:	ba000030 	blt	18038 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17f74:	e5940004 	ldr	r0, [r4, #4]
   17f78:	e5d06000 	ldrb	r6, [r0]
   17f7c:	e3560001 	cmp	r6, #1
   17f80:	9a00002c 	bls	18038 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17f84:	e3160001 	tst	r6, #1
   17f88:	1a00002a 	bne	18038 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17f8c:	e5d09001 	ldrb	r9, [r0, #1]
   17f90:	e3590003 	cmp	r9, #3
   17f94:	1a000027 	bne	18038 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17f98:	e3560004 	cmp	r6, #4
   17f9c:	8a000030 	bhi	18064 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x17c>
   17fa0:	e3560002 	cmp	r6, #2
   17fa4:	0a000054 	beq	180fc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x214>
   17fa8:	e3560004 	cmp	r6, #4
   17fac:	024dd008 	subeq	sp, sp, #8
   17fb0:	03a0e001 	moveq	lr, #1
   17fb4:	028d5010 	addeq	r5, sp, #16
   17fb8:	1a000053 	bne	1810c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x224>
   17fbc:	e24e1001 	sub	r1, lr, #1
   17fc0:	e0811005 	add	r1, r1, r5
   17fc4:	e245c001 	sub	ip, r5, #1
   17fc8:	e2656001 	rsb	r6, r5, #1
   17fcc:	e086200c 	add	r2, r6, ip
   17fd0:	e0802082 	add	r2, r0, r2, lsl #1
   17fd4:	e5d23002 	ldrb	r3, [r2, #2]
   17fd8:	e5d22003 	ldrb	r2, [r2, #3]
   17fdc:	e1833402 	orr	r3, r3, r2, lsl #8
   17fe0:	e2432020 	sub	r2, r3, #32
   17fe4:	e352005e 	cmp	r2, #94	; 0x5e
   17fe8:	83a0305f 	movhi	r3, #95	; 0x5f
   17fec:	e5ec3001 	strb	r3, [ip, #1]!
   17ff0:	e15c0001 	cmp	ip, r1
   17ff4:	1afffff4 	bne	17fcc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xe4>
   17ff8:	e3a03000 	mov	r3, #0
   17ffc:	e5940008 	ldr	r0, [r4, #8]
   18000:	e7c5300e 	strb	r3, [r5, lr]
   18004:	e1500003 	cmp	r0, r3
   18008:	0a000002 	beq	18018 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x130>
   1800c:	e5903000 	ldr	r3, [r0]
   18010:	e5933004 	ldr	r3, [r3, #4]
   18014:	e12fff33 	blx	r3
   18018:	e3a00010 	mov	r0, #16
   1801c:	eb004be9 	bl	2afc8 <operator new(unsigned int)>
   18020:	e1a06000 	mov	r6, r0
   18024:	e1a01005 	mov	r1, r5
   18028:	eb003ebd 	bl	27b24 <CString::CString(char const*)>
   1802c:	e3a00001 	mov	r0, #1
   18030:	e5846008 	str	r6, [r4, #8]
   18034:	ea000000 	b	1803c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x154>
   18038:	e3a00000 	mov	r0, #0
   1803c:	e24bd020 	sub	sp, fp, #32
   18040:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18044:	e3a02047 	mov	r2, #71	; 0x47
   18048:	e59f10cc 	ldr	r1, [pc, #204]	; 1811c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x234>
   1804c:	e59f00cc 	ldr	r0, [pc, #204]	; 18120 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x238>
   18050:	eb0031d4 	bl	247a8 <assertion_failed>
   18054:	e3a0204d 	mov	r2, #77	; 0x4d
   18058:	e59f10bc 	ldr	r1, [pc, #188]	; 1811c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x234>
   1805c:	e59f00c0 	ldr	r0, [pc, #192]	; 18124 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x23c>
   18060:	eb0031d0 	bl	247a8 <assertion_failed>
   18064:	e3a01002 	mov	r1, #2
   18068:	eb004be4 	bl	2b000 <operator delete(void*, unsigned int)>
   1806c:	e1a00006 	mov	r0, r6
   18070:	eb004bda 	bl	2afe0 <operator new[](unsigned int)>
   18074:	e1a03000 	mov	r3, r0
   18078:	e5940000 	ldr	r0, [r4]
   1807c:	e5843004 	str	r3, [r4, #4]
   18080:	ebffd8da 	bl	e3f0 <CUSBDevice::GetHost() const>
   18084:	e1a0a000 	mov	sl, r0
   18088:	e5940000 	ldr	r0, [r4]
   1808c:	ebffd8cd 	bl	e3c8 <CUSBDevice::GetEndpoint0() const>
   18090:	e594c004 	ldr	ip, [r4, #4]
   18094:	e1a01000 	mov	r1, r0
   18098:	e1a03007 	mov	r3, r7
   1809c:	e1a0000a 	mov	r0, sl
   180a0:	e1a02009 	mov	r2, r9
   180a4:	e98d0140 	stmib	sp, {r6, r8}
   180a8:	e58d500c 	str	r5, [sp, #12]
   180ac:	e58dc000 	str	ip, [sp]
   180b0:	ebffea1e 	bl	12930 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   180b4:	e1560000 	cmp	r6, r0
   180b8:	1affffde 	bne	18038 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   180bc:	e5940004 	ldr	r0, [r4, #4]
   180c0:	e5d03000 	ldrb	r3, [r0]
   180c4:	e1530006 	cmp	r3, r6
   180c8:	1affffda 	bne	18038 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   180cc:	e5d02001 	ldrb	r2, [r0, #1]
   180d0:	e3520003 	cmp	r2, #3
   180d4:	1affffd7 	bne	18038 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   180d8:	e3130001 	tst	r3, #1
   180dc:	1a00000a 	bne	1810c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x224>
   180e0:	e2433002 	sub	r3, r3, #2
   180e4:	e1a0e0c3 	asr	lr, r3, #1
   180e8:	e28e3008 	add	r3, lr, #8
   180ec:	e3c33007 	bic	r3, r3, #7
   180f0:	e04dd003 	sub	sp, sp, r3
   180f4:	e28d5010 	add	r5, sp, #16
   180f8:	eaffffaf 	b	17fbc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xd4>
   180fc:	e3a02075 	mov	r2, #117	; 0x75
   18100:	e59f1014 	ldr	r1, [pc, #20]	; 1811c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x234>
   18104:	e59f001c 	ldr	r0, [pc, #28]	; 18128 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x240>
   18108:	eb0031a6 	bl	247a8 <assertion_failed>
   1810c:	e3a02076 	mov	r2, #118	; 0x76
   18110:	e59f1004 	ldr	r1, [pc, #4]	; 1811c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x234>
   18114:	e59f0010 	ldr	r0, [pc, #16]	; 1812c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x244>
   18118:	eb0031a2 	bl	247a8 <assertion_failed>
   1811c:	00043368 	.word	0x00043368
   18120:	000433a0 	.word	0x000433a0
   18124:	00041534 	.word	0x00041534
   18128:	000433ac 	.word	0x000433ac
   1812c:	000433c8 	.word	0x000433c8

00018130 <CUSBString::Get() const>:
   18130:	e5900008 	ldr	r0, [r0, #8]
   18134:	ea003e8c 	b	27b6c <CString::operator char const*() const>

00018138 <CUSBString::GetLanguageID()>:
   18138:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1813c:	e1a06000 	mov	r6, r0
   18140:	e24dd014 	sub	sp, sp, #20
   18144:	e3a00004 	mov	r0, #4
   18148:	eb004ba4 	bl	2afe0 <operator new[](unsigned int)>
   1814c:	e5963000 	ldr	r3, [r6]
   18150:	e3530000 	cmp	r3, #0
   18154:	0a000057 	beq	182b8 <CUSBString::GetLanguageID()+0x180>
   18158:	e1a04000 	mov	r4, r0
   1815c:	e1a00003 	mov	r0, r3
   18160:	ebffd8a2 	bl	e3f0 <CUSBDevice::GetHost() const>
   18164:	e1a05000 	mov	r5, r0
   18168:	e5960000 	ldr	r0, [r6]
   1816c:	ebffd895 	bl	e3c8 <CUSBDevice::GetEndpoint0() const>
   18170:	e3a07080 	mov	r7, #128	; 0x80
   18174:	e3a03000 	mov	r3, #0
   18178:	e3a02004 	mov	r2, #4
   1817c:	e1a01000 	mov	r1, r0
   18180:	e98d0084 	stmib	sp, {r2, r7}
   18184:	e1a00005 	mov	r0, r5
   18188:	e3a02003 	mov	r2, #3
   1818c:	e58d4000 	str	r4, [sp]
   18190:	e58d300c 	str	r3, [sp, #12]
   18194:	ebffe9e5 	bl	12930 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   18198:	e3500000 	cmp	r0, #0
   1819c:	ba00001e 	blt	1821c <CUSBString::GetLanguageID()+0xe4>
   181a0:	e5d45000 	ldrb	r5, [r4]
   181a4:	e3550003 	cmp	r5, #3
   181a8:	9a00001b 	bls	1821c <CUSBString::GetLanguageID()+0xe4>
   181ac:	e2159001 	ands	r9, r5, #1
   181b0:	1a000019 	bne	1821c <CUSBString::GetLanguageID()+0xe4>
   181b4:	e5d48001 	ldrb	r8, [r4, #1]
   181b8:	e3580003 	cmp	r8, #3
   181bc:	1a000016 	bne	1821c <CUSBString::GetLanguageID()+0xe4>
   181c0:	e3550004 	cmp	r5, #4
   181c4:	1a00001a 	bne	18234 <CUSBString::GetLanguageID()+0xfc>
   181c8:	e3a02000 	mov	r2, #0
   181cc:	e2455002 	sub	r5, r5, #2
   181d0:	e59f00fc 	ldr	r0, [pc, #252]	; 182d4 <CUSBString::GetLanguageID()+0x19c>
   181d4:	e1a030c5 	asr	r3, r5, #1
   181d8:	e0841082 	add	r1, r4, r2, lsl #1
   181dc:	e5d15002 	ldrb	r5, [r1, #2]
   181e0:	e5d11003 	ldrb	r1, [r1, #3]
   181e4:	e1855401 	orr	r5, r5, r1, lsl #8
   181e8:	e1550000 	cmp	r5, r0
   181ec:	0a000035 	beq	182c8 <CUSBString::GetLanguageID()+0x190>
   181f0:	e2822001 	add	r2, r2, #1
   181f4:	e1530002 	cmp	r3, r2
   181f8:	1afffff6 	bne	181d8 <CUSBString::GetLanguageID()+0xa0>
   181fc:	e5d45002 	ldrb	r5, [r4, #2]
   18200:	e5d43003 	ldrb	r3, [r4, #3]
   18204:	e1a00004 	mov	r0, r4
   18208:	e1855403 	orr	r5, r5, r3, lsl #8
   1820c:	eb004b7a 	bl	2affc <operator delete[](void*)>
   18210:	e1a00005 	mov	r0, r5
   18214:	e28dd014 	add	sp, sp, #20
   18218:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1821c:	e1a00004 	mov	r0, r4
   18220:	eb004b75 	bl	2affc <operator delete[](void*)>
   18224:	e59f50a8 	ldr	r5, [pc, #168]	; 182d4 <CUSBString::GetLanguageID()+0x19c>
   18228:	e1a00005 	mov	r0, r5
   1822c:	e28dd014 	add	sp, sp, #20
   18230:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18234:	e1a00004 	mov	r0, r4
   18238:	eb004b6f 	bl	2affc <operator delete[](void*)>
   1823c:	e1a00005 	mov	r0, r5
   18240:	eb004b66 	bl	2afe0 <operator new[](unsigned int)>
   18244:	e1a04000 	mov	r4, r0
   18248:	e5960000 	ldr	r0, [r6]
   1824c:	ebffd867 	bl	e3f0 <CUSBDevice::GetHost() const>
   18250:	e1a03000 	mov	r3, r0
   18254:	e5960000 	ldr	r0, [r6]
   18258:	e1a06003 	mov	r6, r3
   1825c:	ebffd859 	bl	e3c8 <CUSBDevice::GetEndpoint0() const>
   18260:	e1a03009 	mov	r3, r9
   18264:	e1a01000 	mov	r1, r0
   18268:	e1a02008 	mov	r2, r8
   1826c:	e1a00006 	mov	r0, r6
   18270:	e98d02a0 	stmib	sp, {r5, r7, r9}
   18274:	e58d4000 	str	r4, [sp]
   18278:	ebffe9ac 	bl	12930 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   1827c:	e1550000 	cmp	r5, r0
   18280:	1affffe5 	bne	1821c <CUSBString::GetLanguageID()+0xe4>
   18284:	e5d43000 	ldrb	r3, [r4]
   18288:	e1530005 	cmp	r3, r5
   1828c:	1affffe2 	bne	1821c <CUSBString::GetLanguageID()+0xe4>
   18290:	e5d42001 	ldrb	r2, [r4, #1]
   18294:	e3520003 	cmp	r2, #3
   18298:	1affffdf 	bne	1821c <CUSBString::GetLanguageID()+0xe4>
   1829c:	e3130001 	tst	r3, #1
   182a0:	e1a05003 	mov	r5, r3
   182a4:	0affffc7 	beq	181c8 <CUSBString::GetLanguageID()+0x90>
   182a8:	e3a020c8 	mov	r2, #200	; 0xc8
   182ac:	e59f1024 	ldr	r1, [pc, #36]	; 182d8 <CUSBString::GetLanguageID()+0x1a0>
   182b0:	e59f0024 	ldr	r0, [pc, #36]	; 182dc <CUSBString::GetLanguageID()+0x1a4>
   182b4:	eb00313b 	bl	247a8 <assertion_failed>
   182b8:	e3a0209a 	mov	r2, #154	; 0x9a
   182bc:	e59f1014 	ldr	r1, [pc, #20]	; 182d8 <CUSBString::GetLanguageID()+0x1a0>
   182c0:	e59f0018 	ldr	r0, [pc, #24]	; 182e0 <CUSBString::GetLanguageID()+0x1a8>
   182c4:	eb003137 	bl	247a8 <assertion_failed>
   182c8:	e1a00004 	mov	r0, r4
   182cc:	eb004b4a 	bl	2affc <operator delete[](void*)>
   182d0:	eaffffd4 	b	18228 <CUSBString::GetLanguageID()+0xf0>
   182d4:	00000409 	.word	0x00000409
   182d8:	00043368 	.word	0x00043368
   182dc:	000433ec 	.word	0x000433ec
   182e0:	00041534 	.word	0x00041534

000182e4 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   182e4:	e3a03000 	mov	r3, #0
   182e8:	e92d4010 	push	{r4, lr}
   182ec:	e1a04000 	mov	r4, r0
   182f0:	e5803000 	str	r3, [r0]
   182f4:	e5803004 	str	r3, [r0, #4]
   182f8:	e5803008 	str	r3, [r0, #8]
   182fc:	e1c030bc 	strh	r3, [r0, #12]
   18300:	e5803010 	str	r3, [r0, #16]
   18304:	e2800014 	add	r0, r0, #20
   18308:	eb00017d 	bl	18904 <CKeyMap::CKeyMap()>
   1830c:	e1a00004 	mov	r0, r4
   18310:	e8bd8010 	pop	{r4, pc}

00018314 <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   18314:	e3a03000 	mov	r3, #0
   18318:	e92d4010 	push	{r4, lr}
   1831c:	e1a04000 	mov	r4, r0
   18320:	e5803000 	str	r3, [r0]
   18324:	e5803004 	str	r3, [r0, #4]
   18328:	e5803008 	str	r3, [r0, #8]
   1832c:	e2800014 	add	r0, r0, #20
   18330:	eb0000ae 	bl	185f0 <CKeyMap::~CKeyMap()>
   18334:	e1a00004 	mov	r0, r4
   18338:	e8bd8010 	pop	{r4, pc}

0001833c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   1833c:	e3510000 	cmp	r1, #0
   18340:	0a000001 	beq	1834c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x10>
   18344:	e5801000 	str	r1, [r0]
   18348:	e12fff1e 	bx	lr
   1834c:	e3a0202f 	mov	r2, #47	; 0x2f
   18350:	e92d4010 	push	{r4, lr}
   18354:	e59f1004 	ldr	r1, [pc, #4]	; 18360 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x24>
   18358:	e59f0004 	ldr	r0, [pc, #4]	; 18364 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x28>
   1835c:	eb003111 	bl	247a8 <assertion_failed>
   18360:	00043410 	.word	0x00043410
   18364:	00043428 	.word	0x00043428

00018368 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   18368:	e3510000 	cmp	r1, #0
   1836c:	0a000001 	beq	18378 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x10>
   18370:	e5801004 	str	r1, [r0, #4]
   18374:	e12fff1e 	bx	lr
   18378:	e3a02035 	mov	r2, #53	; 0x35
   1837c:	e92d4010 	push	{r4, lr}
   18380:	e59f1004 	ldr	r1, [pc, #4]	; 1838c <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x24>
   18384:	e59f0004 	ldr	r0, [pc, #4]	; 18390 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x28>
   18388:	eb003106 	bl	247a8 <assertion_failed>
   1838c:	00043410 	.word	0x00043410
   18390:	00043440 	.word	0x00043440

00018394 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   18394:	e3510000 	cmp	r1, #0
   18398:	0a000001 	beq	183a4 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x10>
   1839c:	e5801008 	str	r1, [r0, #8]
   183a0:	e12fff1e 	bx	lr
   183a4:	e3a0203b 	mov	r2, #59	; 0x3b
   183a8:	e92d4010 	push	{r4, lr}
   183ac:	e59f1004 	ldr	r1, [pc, #4]	; 183b8 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x24>
   183b0:	e59f0004 	ldr	r0, [pc, #4]	; 183bc <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x28>
   183b4:	eb0030fb 	bl	247a8 <assertion_failed>
   183b8:	00043410 	.word	0x00043410
   183bc:	0004345c 	.word	0x0004345c

000183c0 <CKeyboardBehaviour::GetLEDStatus() const>:
   183c0:	e2800014 	add	r0, r0, #20
   183c4:	ea000121 	b	18850 <CKeyMap::GetLEDStatus() const>

000183c8 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   183c8:	e92d4030 	push	{r4, r5, lr}
   183cc:	e2805014 	add	r5, r0, #20
   183d0:	e5d0200c 	ldrb	r2, [r0, #12]
   183d4:	e24dd014 	sub	sp, sp, #20
   183d8:	e1a04000 	mov	r4, r0
   183dc:	e1a00005 	mov	r0, r5
   183e0:	e58d2004 	str	r2, [sp, #4]
   183e4:	eb0000a4 	bl	1867c <CKeyMap::Translate(unsigned char, unsigned char)>
   183e8:	e59f30a4 	ldr	r3, [pc, #164]	; 18494 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xcc>
   183ec:	e59d2004 	ldr	r2, [sp, #4]
   183f0:	e1500003 	cmp	r0, r3
   183f4:	8a000009 	bhi	18420 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x58>
   183f8:	e243300c 	sub	r3, r3, #12
   183fc:	e1500003 	cmp	r0, r3
   18400:	8a00001b 	bhi	18474 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xac>
   18404:	e2403e13 	sub	r3, r0, #304	; 0x130
   18408:	e2433003 	sub	r3, r3, #3
   1840c:	e6ff3073 	uxth	r3, r3
   18410:	e3530002 	cmp	r3, #2
   18414:	8a00000a 	bhi	18444 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x7c>
   18418:	e28dd014 	add	sp, sp, #20
   1841c:	e8bd8030 	pop	{r4, r5, pc}
   18420:	e59f3070 	ldr	r3, [pc, #112]	; 18498 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xd0>
   18424:	e1500003 	cmp	r0, r3
   18428:	1a000005 	bne	18444 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x7c>
   1842c:	e5943008 	ldr	r3, [r4, #8]
   18430:	e3530000 	cmp	r3, #0
   18434:	0afffff7 	beq	18418 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x50>
   18438:	e12fff33 	blx	r3
   1843c:	e28dd014 	add	sp, sp, #20
   18440:	e8bd8030 	pop	{r4, r5, pc}
   18444:	e1a01000 	mov	r1, r0
   18448:	e28d300c 	add	r3, sp, #12
   1844c:	e1a00005 	mov	r0, r5
   18450:	eb0000cd 	bl	1878c <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   18454:	e3500000 	cmp	r0, #0
   18458:	0affffee 	beq	18418 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x50>
   1845c:	e5943000 	ldr	r3, [r4]
   18460:	e3530000 	cmp	r3, #0
   18464:	0affffeb 	beq	18418 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x50>
   18468:	e12fff33 	blx	r3
   1846c:	e28dd014 	add	sp, sp, #20
   18470:	e8bd8030 	pop	{r4, r5, pc}
   18474:	e5943004 	ldr	r3, [r4, #4]
   18478:	e3530000 	cmp	r3, #0
   1847c:	0affffe5 	beq	18418 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x50>
   18480:	e2400f4d 	sub	r0, r0, #308	; 0x134
   18484:	e2400002 	sub	r0, r0, #2
   18488:	e12fff33 	blx	r3
   1848c:	e28dd014 	add	sp, sp, #20
   18490:	e8bd8030 	pop	{r4, r5, pc}
   18494:	00000141 	.word	0x00000141
   18498:	00000142 	.word	0x00000142

0001849c <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   1849c:	e2212080 	eor	r2, r1, #128	; 0x80
   184a0:	e3520007 	cmp	r2, #7
   184a4:	e241c080 	sub	ip, r1, #128	; 0x80
   184a8:	8a000004 	bhi	184c0 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x24>
   184ac:	e3a01001 	mov	r1, #1
   184b0:	e5d0300c 	ldrb	r3, [r0, #12]
   184b4:	e1833c11 	orr	r3, r3, r1, lsl ip
   184b8:	e5c0300c 	strb	r3, [r0, #12]
   184bc:	e12fff1e 	bx	lr
   184c0:	e5d0c00d 	ldrb	ip, [r0, #13]
   184c4:	e15c0001 	cmp	ip, r1
   184c8:	012fff1e 	bxeq	lr
   184cc:	e5c0100d 	strb	r1, [r0, #13]
   184d0:	eaffffbc 	b	183c8 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

000184d4 <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   184d4:	e2213080 	eor	r3, r1, #128	; 0x80
   184d8:	e3530007 	cmp	r3, #7
   184dc:	e92d4010 	push	{r4, lr}
   184e0:	e1a04000 	mov	r4, r0
   184e4:	8a000005 	bhi	18500 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x2c>
   184e8:	e2412080 	sub	r2, r1, #128	; 0x80
   184ec:	e3a01001 	mov	r1, #1
   184f0:	e5d0300c 	ldrb	r3, [r0, #12]
   184f4:	e1c33211 	bic	r3, r3, r1, lsl r2
   184f8:	e5c0300c 	strb	r3, [r0, #12]
   184fc:	e8bd8010 	pop	{r4, pc}
   18500:	e5d0300d 	ldrb	r3, [r0, #13]
   18504:	e1530001 	cmp	r3, r1
   18508:	18bd8010 	popne	{r4, pc}
   1850c:	e5903010 	ldr	r3, [r0, #16]
   18510:	e3530000 	cmp	r3, #0
   18514:	1a000002 	bne	18524 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   18518:	e3a03000 	mov	r3, #0
   1851c:	e5c4300d 	strb	r3, [r4, #13]
   18520:	e8bd8010 	pop	{r4, pc}
   18524:	eb00466c 	bl	29edc <CTimer::Get()>
   18528:	e5941010 	ldr	r1, [r4, #16]
   1852c:	eb0044fa 	bl	2991c <CTimer::CancelKernelTimer(unsigned int)>
   18530:	e3a03000 	mov	r3, #0
   18534:	e5843010 	str	r3, [r4, #16]
   18538:	eafffff6 	b	18518 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

0001853c <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   1853c:	e92d4010 	push	{r4, lr}
   18540:	e5903010 	ldr	r3, [r0, #16]
   18544:	e24dd008 	sub	sp, sp, #8
   18548:	e1530001 	cmp	r3, r1
   1854c:	1a000013 	bne	185a0 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x64>
   18550:	e5d0100d 	ldrb	r1, [r0, #13]
   18554:	e1a04000 	mov	r4, r0
   18558:	e3510000 	cmp	r1, #0
   1855c:	1a000001 	bne	18568 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x2c>
   18560:	e28dd008 	add	sp, sp, #8
   18564:	e8bd8010 	pop	{r4, pc}
   18568:	ebffff96 	bl	183c8 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   1856c:	eb00465a 	bl	29edc <CTimer::Get()>
   18570:	e3a03000 	mov	r3, #0
   18574:	e3a01008 	mov	r1, #8
   18578:	e59f2030 	ldr	r2, [pc, #48]	; 185b0 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x74>
   1857c:	e58d4000 	str	r4, [sp]
   18580:	eb004493 	bl	297d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   18584:	e3500000 	cmp	r0, #0
   18588:	e5840010 	str	r0, [r4, #16]
   1858c:	1afffff3 	bne	18560 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x24>
   18590:	e3a020b7 	mov	r2, #183	; 0xb7
   18594:	e59f1018 	ldr	r1, [pc, #24]	; 185b4 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x78>
   18598:	e59f0018 	ldr	r0, [pc, #24]	; 185b8 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x7c>
   1859c:	eb003081 	bl	247a8 <assertion_failed>
   185a0:	e3a020b0 	mov	r2, #176	; 0xb0
   185a4:	e59f1008 	ldr	r1, [pc, #8]	; 185b4 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x78>
   185a8:	e59f000c 	ldr	r0, [pc, #12]	; 185bc <CKeyboardBehaviour::TimerHandler(unsigned int)+0x80>
   185ac:	eb00307d 	bl	247a8 <assertion_failed>
   185b0:	000185c0 	.word	0x000185c0
   185b4:	00043410 	.word	0x00043410
   185b8:	0004285c 	.word	0x0004285c
   185bc:	00043474 	.word	0x00043474

000185c0 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   185c0:	e3520000 	cmp	r2, #0
   185c4:	0a000002 	beq	185d4 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x14>
   185c8:	e1a01000 	mov	r1, r0
   185cc:	e1a00002 	mov	r0, r2
   185d0:	eaffffd9 	b	1853c <CKeyboardBehaviour::TimerHandler(unsigned int)>
   185d4:	e3a020be 	mov	r2, #190	; 0xbe
   185d8:	e92d4010 	push	{r4, lr}
   185dc:	e59f1004 	ldr	r1, [pc, #4]	; 185e8 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x28>
   185e0:	e59f0004 	ldr	r0, [pc, #4]	; 185ec <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x2c>
   185e4:	eb00306f 	bl	247a8 <assertion_failed>
   185e8:	00043410 	.word	0x00043410
   185ec:	00040b44 	.word	0x00040b44

000185f0 <CKeyMap::~CKeyMap()>:
   185f0:	e12fff1e 	bx	lr

000185f4 <CKeyMap::ClearTable(unsigned char)>:
   185f4:	e3510003 	cmp	r1, #3
   185f8:	8a000008 	bhi	18620 <CKeyMap::ClearTable(unsigned char)+0x2c>
   185fc:	e3a0c000 	mov	ip, #0
   18600:	e2802b01 	add	r2, r0, #1024	; 0x400
   18604:	e0822081 	add	r2, r2, r1, lsl #1
   18608:	e0803081 	add	r3, r0, r1, lsl #1
   1860c:	e0c3c0b8 	strh	ip, [r3], #8
   18610:	e1530002 	cmp	r3, r2
   18614:	1afffffc 	bne	1860c <CKeyMap::ClearTable(unsigned char)+0x18>
   18618:	e3a00001 	mov	r0, #1
   1861c:	e12fff1e 	bx	lr
   18620:	e3a00000 	mov	r0, #0
   18624:	e12fff1e 	bx	lr

00018628 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   18628:	e6afc072 	sxtb	ip, r2
   1862c:	e35c0000 	cmp	ip, #0
   18630:	c3a0c000 	movgt	ip, #0
   18634:	d3a0c001 	movle	ip, #1
   18638:	e3510003 	cmp	r1, #3
   1863c:	838cc001 	orrhi	ip, ip, #1
   18640:	e35c0000 	cmp	ip, #0
   18644:	1a000008 	bne	1866c <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x44>
   18648:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1864c:	e59fe024 	ldr	lr, [pc, #36]	; 18678 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x50>
   18650:	e153000e 	cmp	r3, lr
   18654:	93a0c001 	movls	ip, #1
   18658:	90811102 	addls	r1, r1, r2, lsl #2
   1865c:	91a01081 	lslls	r1, r1, #1
   18660:	918030b1 	strhls	r3, [r0, r1]
   18664:	e1a0000c 	mov	r0, ip
   18668:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1866c:	e3a0c000 	mov	ip, #0
   18670:	e1a0000c 	mov	r0, ip
   18674:	e12fff1e 	bx	lr
   18678:	00000132 	.word	0x00000132

0001867c <CKeyMap::Translate(unsigned char, unsigned char)>:
   1867c:	e6af3071 	sxtb	r3, r1
   18680:	e3530000 	cmp	r3, #0
   18684:	e1a0c000 	mov	ip, r0
   18688:	da000027 	ble	1872c <CKeyMap::Translate(unsigned char, unsigned char)+0xb0>
   1868c:	e1a03181 	lsl	r3, r1, #3
   18690:	e19030b3 	ldrh	r3, [r0, r3]
   18694:	e3530f42 	cmp	r3, #264	; 0x108
   18698:	0a00001d 	beq	18714 <CKeyMap::Translate(unsigned char, unsigned char)+0x98>
   1869c:	e2430f43 	sub	r0, r3, #268	; 0x10c
   186a0:	e2400003 	sub	r0, r0, #3
   186a4:	e350000b 	cmp	r0, #11
   186a8:	8a000001 	bhi	186b4 <CKeyMap::Translate(unsigned char, unsigned char)+0x38>
   186ac:	e3120004 	tst	r2, #4
   186b0:	1a000021 	bne	1873c <CKeyMap::Translate(unsigned char, unsigned char)+0xc0>
   186b4:	e312008c 	tst	r2, #140	; 0x8c
   186b8:	1a00001b 	bne	1872c <CKeyMap::Translate(unsigned char, unsigned char)+0xb0>
   186bc:	e2413053 	sub	r3, r1, #83	; 0x53
   186c0:	e3530010 	cmp	r3, #16
   186c4:	9a00001a 	bls	18734 <CKeyMap::Translate(unsigned char, unsigned char)+0xb8>
   186c8:	e3120040 	tst	r2, #64	; 0x40
   186cc:	0a000027 	beq	18770 <CKeyMap::Translate(unsigned char, unsigned char)+0xf4>
   186d0:	e3120022 	tst	r2, #34	; 0x22
   186d4:	13a03003 	movne	r3, #3
   186d8:	03a03002 	moveq	r3, #2
   186dc:	e0831101 	add	r1, r3, r1, lsl #2
   186e0:	e1a01081 	lsl	r1, r1, #1
   186e4:	e19c00b1 	ldrh	r0, [ip, r1]
   186e8:	e59f3090 	ldr	r3, [pc, #144]	; 18780 <CKeyMap::Translate(unsigned char, unsigned char)+0x104>
   186ec:	e1500003 	cmp	r0, r3
   186f0:	0a000019 	beq	1875c <CKeyMap::Translate(unsigned char, unsigned char)+0xe0>
   186f4:	e3500e12 	cmp	r0, #288	; 0x120
   186f8:	0a000012 	beq	18748 <CKeyMap::Translate(unsigned char, unsigned char)+0xcc>
   186fc:	e3500f47 	cmp	r0, #284	; 0x11c
   18700:	05dc3400 	ldrbeq	r3, [ip, #1024]	; 0x400
   18704:	02800017 	addeq	r0, r0, #23
   18708:	02233001 	eoreq	r3, r3, #1
   1870c:	05cc3400 	strbeq	r3, [ip, #1024]	; 0x400
   18710:	e12fff1e 	bx	lr
   18714:	e3120011 	tst	r2, #17
   18718:	0affffe5 	beq	186b4 <CKeyMap::Translate(unsigned char, unsigned char)+0x38>
   1871c:	e3120004 	tst	r2, #4
   18720:	0affffe3 	beq	186b4 <CKeyMap::Translate(unsigned char, unsigned char)+0x38>
   18724:	e59f0058 	ldr	r0, [pc, #88]	; 18784 <CKeyMap::Translate(unsigned char, unsigned char)+0x108>
   18728:	e12fff1e 	bx	lr
   1872c:	e3a00000 	mov	r0, #0
   18730:	e12fff1e 	bx	lr
   18734:	e5dc3401 	ldrb	r3, [ip, #1025]	; 0x401
   18738:	eaffffe7 	b	186dc <CKeyMap::Translate(unsigned char, unsigned char)+0x60>
   1873c:	e2830027 	add	r0, r3, #39	; 0x27
   18740:	e6ff0070 	uxth	r0, r0
   18744:	e12fff1e 	bx	lr
   18748:	e5dc3401 	ldrb	r3, [ip, #1025]	; 0x401
   1874c:	e3a00f4d 	mov	r0, #308	; 0x134
   18750:	e2233001 	eor	r3, r3, #1
   18754:	e5cc3401 	strb	r3, [ip, #1025]	; 0x401
   18758:	e12fff1e 	bx	lr
   1875c:	e5dc3402 	ldrb	r3, [ip, #1026]	; 0x402
   18760:	e59f0020 	ldr	r0, [pc, #32]	; 18788 <CKeyMap::Translate(unsigned char, unsigned char)+0x10c>
   18764:	e2233001 	eor	r3, r3, #1
   18768:	e5cc3402 	strb	r3, [ip, #1026]	; 0x402
   1876c:	e12fff1e 	bx	lr
   18770:	e3120022 	tst	r2, #34	; 0x22
   18774:	13a03001 	movne	r3, #1
   18778:	03a03000 	moveq	r3, #0
   1877c:	eaffffd6 	b	186dc <CKeyMap::Translate(unsigned char, unsigned char)+0x60>
   18780:	0000011e 	.word	0x0000011e
   18784:	00000142 	.word	0x00000142
   18788:	00000135 	.word	0x00000135

0001878c <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   1878c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   18790:	e241c021 	sub	ip, r1, #33	; 0x21
   18794:	e59fe0ac 	ldr	lr, [pc, #172]	; 18848 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xbc>
   18798:	e6ffc07c 	uxth	ip, ip
   1879c:	e15c000e 	cmp	ip, lr
   187a0:	8a000023 	bhi	18834 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa8>
   187a4:	e1a0c000 	mov	ip, r0
   187a8:	e2410c01 	sub	r0, r1, #256	; 0x100
   187ac:	e6ffe070 	uxth	lr, r0
   187b0:	e35e0032 	cmp	lr, #50	; 0x32
   187b4:	9a000020 	bls	1883c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   187b8:	e3120011 	tst	r2, #17
   187bc:	e6af2071 	sxtb	r2, r1
   187c0:	0a000009 	beq	187ec <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x60>
   187c4:	e6ef1071 	uxtb	r1, r1
   187c8:	e2412061 	sub	r2, r1, #97	; 0x61
   187cc:	e3520019 	cmp	r2, #25
   187d0:	8a000017 	bhi	18834 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa8>
   187d4:	e3a02000 	mov	r2, #0
   187d8:	e2411060 	sub	r1, r1, #96	; 0x60
   187dc:	e1a00003 	mov	r0, r3
   187e0:	e5c31000 	strb	r1, [r3]
   187e4:	e5c32001 	strb	r2, [r3, #1]
   187e8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   187ec:	e5dc0400 	ldrb	r0, [ip, #1024]	; 0x400
   187f0:	e3500000 	cmp	r0, #0
   187f4:	0a000009 	beq	18820 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x94>
   187f8:	e6ef1071 	uxtb	r1, r1
   187fc:	e2410041 	sub	r0, r1, #65	; 0x41
   18800:	e3500019 	cmp	r0, #25
   18804:	92811020 	addls	r1, r1, #32
   18808:	96af2071 	sxtbls	r2, r1
   1880c:	9a000003 	bls	18820 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x94>
   18810:	e2410061 	sub	r0, r1, #97	; 0x61
   18814:	e3500019 	cmp	r0, #25
   18818:	92411020 	subls	r1, r1, #32
   1881c:	96af2071 	sxtbls	r2, r1
   18820:	e3a01000 	mov	r1, #0
   18824:	e1a00003 	mov	r0, r3
   18828:	e5c32000 	strb	r2, [r3]
   1882c:	e5c31001 	strb	r1, [r3, #1]
   18830:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18834:	e3a00000 	mov	r0, #0
   18838:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1883c:	e59f3008 	ldr	r3, [pc, #8]	; 1884c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xc0>
   18840:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   18844:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18848:	00000111 	.word	0x00000111
   1884c:	00049fb8 	.word	0x00049fb8

00018850 <CKeyMap::GetLEDStatus() const>:
   18850:	e5d03400 	ldrb	r3, [r0, #1024]	; 0x400
   18854:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   18858:	e3530000 	cmp	r3, #0
   1885c:	13a03002 	movne	r3, #2
   18860:	03a03000 	moveq	r3, #0
   18864:	e3520000 	cmp	r2, #0
   18868:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   1886c:	13833001 	orrne	r3, r3, #1
   18870:	e3520000 	cmp	r2, #0
   18874:	13833004 	orrne	r3, r3, #4
   18878:	e1a00003 	mov	r0, r3
   1887c:	e12fff1e 	bx	lr

00018880 <CKeyMap::LookupDefaultMap(char const*)>:
   18880:	e92d4070 	push	{r4, r5, r6, lr}
   18884:	e59f4064 	ldr	r4, [pc, #100]	; 188f0 <CKeyMap::LookupDefaultMap(char const*)+0x70>
   18888:	e1a06000 	mov	r6, r0
   1888c:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   18890:	e3500000 	cmp	r0, #0
   18894:	0a000013 	beq	188e8 <CKeyMap::LookupDefaultMap(char const*)+0x68>
   18898:	e3560000 	cmp	r6, #0
   1889c:	13a05000 	movne	r5, #0
   188a0:	128440d0 	addne	r4, r4, #208	; 0xd0
   188a4:	1a000004 	bne	188bc <CKeyMap::LookupDefaultMap(char const*)+0x3c>
   188a8:	ea00000a 	b	188d8 <CKeyMap::LookupDefaultMap(char const*)+0x58>
   188ac:	e4940004 	ldr	r0, [r4], #4
   188b0:	e2855001 	add	r5, r5, #1
   188b4:	e3500000 	cmp	r0, #0
   188b8:	0a00000a 	beq	188e8 <CKeyMap::LookupDefaultMap(char const*)+0x68>
   188bc:	e1a01006 	mov	r1, r6
   188c0:	eb0045e9 	bl	2a06c <strcmp>
   188c4:	e3500000 	cmp	r0, #0
   188c8:	1afffff7 	bne	188ac <CKeyMap::LookupDefaultMap(char const*)+0x2c>
   188cc:	e59f0020 	ldr	r0, [pc, #32]	; 188f4 <CKeyMap::LookupDefaultMap(char const*)+0x74>
   188d0:	e0800505 	add	r0, r0, r5, lsl #10
   188d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   188d8:	e59f2018 	ldr	r2, [pc, #24]	; 188f8 <CKeyMap::LookupDefaultMap(char const*)+0x78>
   188dc:	e59f1018 	ldr	r1, [pc, #24]	; 188fc <CKeyMap::LookupDefaultMap(char const*)+0x7c>
   188e0:	e59f0018 	ldr	r0, [pc, #24]	; 18900 <CKeyMap::LookupDefaultMap(char const*)+0x80>
   188e4:	eb002faf 	bl	247a8 <assertion_failed>
   188e8:	e3a00000 	mov	r0, #0
   188ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   188f0:	00049fb8 	.word	0x00049fb8
   188f4:	00043590 	.word	0x00043590
   188f8:	0000013f 	.word	0x0000013f
   188fc:	00043488 	.word	0x00043488
   18900:	00043494 	.word	0x00043494

00018904 <CKeyMap::CKeyMap()>:
   18904:	e3a01c01 	mov	r1, #256	; 0x100
   18908:	e3a03000 	mov	r3, #0
   1890c:	e2802b01 	add	r2, r0, #1024	; 0x400
   18910:	e92d4010 	push	{r4, lr}
   18914:	e1c210b0 	strh	r1, [r2]
   18918:	e5c03402 	strb	r3, [r0, #1026]	; 0x402
   1891c:	e1a04000 	mov	r4, r0
   18920:	eb00364a 	bl	26250 <CKernelOptions::Get()>
   18924:	eb00363a 	bl	26214 <CKernelOptions::GetKeyMap() const>
   18928:	e3500000 	cmp	r0, #0
   1892c:	0a00000f 	beq	18970 <CKeyMap::CKeyMap()+0x6c>
   18930:	ebffffd2 	bl	18880 <CKeyMap::LookupDefaultMap(char const*)>
   18934:	e2501000 	subs	r1, r0, #0
   18938:	0a000004 	beq	18950 <CKeyMap::CKeyMap()+0x4c>
   1893c:	e3a02b01 	mov	r2, #1024	; 0x400
   18940:	e1a00004 	mov	r0, r4
   18944:	eb0047b9 	bl	2a830 <memcpy>
   18948:	e1a00004 	mov	r0, r4
   1894c:	e8bd8010 	pop	{r4, pc}
   18950:	e59f0028 	ldr	r0, [pc, #40]	; 18980 <CKeyMap::CKeyMap()+0x7c>
   18954:	ebffffc9 	bl	18880 <CKeyMap::LookupDefaultMap(char const*)>
   18958:	e2501000 	subs	r1, r0, #0
   1895c:	1afffff6 	bne	1893c <CKeyMap::CKeyMap()+0x38>
   18960:	e3a02080 	mov	r2, #128	; 0x80
   18964:	e59f1018 	ldr	r1, [pc, #24]	; 18984 <CKeyMap::CKeyMap()+0x80>
   18968:	e59f0018 	ldr	r0, [pc, #24]	; 18988 <CKeyMap::CKeyMap()+0x84>
   1896c:	eb002f8d 	bl	247a8 <assertion_failed>
   18970:	e3a0207a 	mov	r2, #122	; 0x7a
   18974:	e59f1008 	ldr	r1, [pc, #8]	; 18984 <CKeyMap::CKeyMap()+0x80>
   18978:	e59f000c 	ldr	r0, [pc, #12]	; 1898c <CKeyMap::CKeyMap()+0x88>
   1897c:	eb002f89 	bl	247a8 <assertion_failed>
   18980:	000434a4 	.word	0x000434a4
   18984:	00043488 	.word	0x00043488
   18988:	000434a8 	.word	0x000434a8
   1898c:	00043494 	.word	0x00043494

00018990 <CMouseDevice::~CMouseDevice()>:
   18990:	e92d4070 	push	{r4, r5, r6, lr}
   18994:	e3a06000 	mov	r6, #0
   18998:	e1a04000 	mov	r4, r0
   1899c:	e59f5034 	ldr	r5, [pc, #52]	; 189d8 <CMouseDevice::~CMouseDevice()+0x48>
   189a0:	e5806020 	str	r6, [r0, #32]
   189a4:	e2853008 	add	r3, r5, #8
   189a8:	e5803000 	str	r3, [r0]
   189ac:	eb00323f 	bl	252b0 <CDeviceNameService::Get()>
   189b0:	e1a03006 	mov	r3, r6
   189b4:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   189b8:	e2851020 	add	r1, r5, #32
   189bc:	eb003261 	bl	25348 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   189c0:	e2840004 	add	r0, r4, #4
   189c4:	eb00005e 	bl	18b44 <CMouseBehaviour::~CMouseBehaviour()>
   189c8:	e1a00004 	mov	r0, r4
   189cc:	eb00314e 	bl	24f0c <CDevice::~CDevice()>
   189d0:	e1a00004 	mov	r0, r4
   189d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   189d8:	00044d9c 	.word	0x00044d9c

000189dc <CMouseDevice::~CMouseDevice()>:
   189dc:	e92d4010 	push	{r4, lr}
   189e0:	e1a04000 	mov	r4, r0
   189e4:	ebffffe9 	bl	18990 <CMouseDevice::~CMouseDevice()>
   189e8:	e1a00004 	mov	r0, r4
   189ec:	e3a01028 	mov	r1, #40	; 0x28
   189f0:	eb004982 	bl	2b000 <operator delete(void*, unsigned int)>
   189f4:	e1a00004 	mov	r0, r4
   189f8:	e8bd8010 	pop	{r4, pc}

000189fc <CMouseDevice::CMouseDevice()>:
   189fc:	e92d4070 	push	{r4, r5, r6, lr}
   18a00:	e1a04000 	mov	r4, r0
   18a04:	e24dd008 	sub	sp, sp, #8
   18a08:	eb00314d 	bl	24f44 <CDevice::CDevice()>
   18a0c:	e1a00004 	mov	r0, r4
   18a10:	e3a06000 	mov	r6, #0
   18a14:	e59f5044 	ldr	r5, [pc, #68]	; 18a60 <CMouseDevice::CMouseDevice()+0x64>
   18a18:	e2853008 	add	r3, r5, #8
   18a1c:	e4803004 	str	r3, [r0], #4
   18a20:	eb00003e 	bl	18b20 <CMouseBehaviour::CMouseBehaviour()>
   18a24:	e59f2038 	ldr	r2, [pc, #56]	; 18a64 <CMouseDevice::CMouseDevice()+0x68>
   18a28:	e5846020 	str	r6, [r4, #32]
   18a2c:	e5923000 	ldr	r3, [r2]
   18a30:	e5843024 	str	r3, [r4, #36]	; 0x24
   18a34:	e2833001 	add	r3, r3, #1
   18a38:	e5823000 	str	r3, [r2]
   18a3c:	eb00321b 	bl	252b0 <CDeviceNameService::Get()>
   18a40:	e58d6000 	str	r6, [sp]
   18a44:	e1a03004 	mov	r3, r4
   18a48:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   18a4c:	e2851020 	add	r1, r5, #32
   18a50:	eb003222 	bl	252e0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   18a54:	e1a00004 	mov	r0, r4
   18a58:	e28dd008 	add	sp, sp, #8
   18a5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   18a60:	00044d9c 	.word	0x00044d9c
   18a64:	0004a0a0 	.word	0x0004a0a0

00018a68 <CMouseDevice::Setup(unsigned int, unsigned int)>:
   18a68:	e2800004 	add	r0, r0, #4
   18a6c:	ea000035 	b	18b48 <CMouseBehaviour::Setup(unsigned int, unsigned int)>

00018a70 <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   18a70:	e2800004 	add	r0, r0, #4
   18a74:	ea00007b 	b	18c68 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>

00018a78 <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   18a78:	e2800004 	add	r0, r0, #4
   18a7c:	ea000102 	b	18e8c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

00018a80 <CMouseDevice::ShowCursor(bool)>:
   18a80:	e2800004 	add	r0, r0, #4
   18a84:	ea000124 	b	18f1c <CMouseBehaviour::ShowCursor(bool)>

00018a88 <CMouseDevice::UpdateCursor()>:
   18a88:	e5903020 	ldr	r3, [r0, #32]
   18a8c:	e3530000 	cmp	r3, #0
   18a90:	112fff1e 	bxne	lr
   18a94:	e2800004 	add	r0, r0, #4
   18a98:	ea00013a 	b	18f88 <CMouseBehaviour::UpdateCursor()>

00018a9c <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))>:
   18a9c:	e5903020 	ldr	r3, [r0, #32]
   18aa0:	e92d4010 	push	{r4, lr}
   18aa4:	e3530000 	cmp	r3, #0
   18aa8:	1a000006 	bne	18ac8 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x2c>
   18aac:	e3510000 	cmp	r1, #0
   18ab0:	e5801020 	str	r1, [r0, #32]
   18ab4:	18bd8010 	popne	{r4, pc}
   18ab8:	e3a0204a 	mov	r2, #74	; 0x4a
   18abc:	e59f1014 	ldr	r1, [pc, #20]	; 18ad8 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x3c>
   18ac0:	e59f0014 	ldr	r0, [pc, #20]	; 18adc <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x40>
   18ac4:	eb002f37 	bl	247a8 <assertion_failed>
   18ac8:	e3a02048 	mov	r2, #72	; 0x48
   18acc:	e59f1004 	ldr	r1, [pc, #4]	; 18ad8 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x3c>
   18ad0:	e59f0008 	ldr	r0, [pc, #8]	; 18ae0 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x44>
   18ad4:	eb002f33 	bl	247a8 <assertion_failed>
   18ad8:	00044d90 	.word	0x00044d90
   18adc:	000432f4 	.word	0x000432f4
   18ae0:	000432dc 	.word	0x000432dc

00018ae4 <CMouseDevice::ReportHandler(unsigned int, int, int)>:
   18ae4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18ae8:	e1a04000 	mov	r4, r0
   18aec:	e2800004 	add	r0, r0, #4
   18af0:	e1a07003 	mov	r7, r3
   18af4:	e1a05001 	mov	r5, r1
   18af8:	e1a06002 	mov	r6, r2
   18afc:	eb00006b 	bl	18cb0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>
   18b00:	e5943020 	ldr	r3, [r4, #32]
   18b04:	e3530000 	cmp	r3, #0
   18b08:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   18b0c:	e1a02007 	mov	r2, r7
   18b10:	e1a01006 	mov	r1, r6
   18b14:	e1a00005 	mov	r0, r5
   18b18:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   18b1c:	e12fff13 	bx	r3

00018b20 <CMouseBehaviour::CMouseBehaviour()>:
   18b20:	e3a02000 	mov	r2, #0
   18b24:	e5802000 	str	r2, [r0]
   18b28:	e5802004 	str	r2, [r0, #4]
   18b2c:	e5802008 	str	r2, [r0, #8]
   18b30:	e580200c 	str	r2, [r0, #12]
   18b34:	e1c021b0 	strh	r2, [r0, #16]
   18b38:	e5802014 	str	r2, [r0, #20]
   18b3c:	e5802018 	str	r2, [r0, #24]
   18b40:	e12fff1e 	bx	lr

00018b44 <CMouseBehaviour::~CMouseBehaviour()>:
   18b44:	e12fff1e 	bx	lr

00018b48 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   18b48:	e92d4010 	push	{r4, lr}
   18b4c:	e5903000 	ldr	r3, [r0]
   18b50:	e24dd038 	sub	sp, sp, #56	; 0x38
   18b54:	e3530000 	cmp	r3, #0
   18b58:	1a00002b 	bne	18c0c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xc4>
   18b5c:	e3510000 	cmp	r1, #0
   18b60:	e5801000 	str	r1, [r0]
   18b64:	0a00002c 	beq	18c1c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xd4>
   18b68:	e5904004 	ldr	r4, [r0, #4]
   18b6c:	e3540000 	cmp	r4, #0
   18b70:	1a00002d 	bne	18c2c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xe4>
   18b74:	e3520000 	cmp	r2, #0
   18b78:	e5802004 	str	r2, [r0, #4]
   18b7c:	0a00002e 	beq	18c3c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xf4>
   18b80:	e2813001 	add	r3, r1, #1
   18b84:	e2822001 	add	r2, r2, #1
   18b88:	e1a030a3 	lsr	r3, r3, #1
   18b8c:	e1a020a2 	lsr	r2, r2, #1
   18b90:	e1a01004 	mov	r1, r4
   18b94:	e5803008 	str	r3, [r0, #8]
   18b98:	e580200c 	str	r2, [r0, #12]
   18b9c:	e28d000c 	add	r0, sp, #12
   18ba0:	eb002f21 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   18ba4:	e3a03018 	mov	r3, #24
   18ba8:	e3a0c010 	mov	ip, #16
   18bac:	e59f1098 	ldr	r1, [pc, #152]	; 18c4c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x104>
   18bb0:	e58d3000 	str	r3, [sp]
   18bb4:	e3c11103 	bic	r1, r1, #-1073741824	; 0xc0000000
   18bb8:	e3811101 	orr	r1, r1, #1073741824	; 0x40000000
   18bbc:	e3a03024 	mov	r3, #36	; 0x24
   18bc0:	e28d2014 	add	r2, sp, #20
   18bc4:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   18bc8:	e28d000c 	add	r0, sp, #12
   18bcc:	e59f107c 	ldr	r1, [pc, #124]	; 18c50 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x108>
   18bd0:	e58d4028 	str	r4, [sp, #40]	; 0x28
   18bd4:	e58d4030 	str	r4, [sp, #48]	; 0x30
   18bd8:	e58d4034 	str	r4, [sp, #52]	; 0x34
   18bdc:	e58dc020 	str	ip, [sp, #32]
   18be0:	e58dc024 	str	ip, [sp, #36]	; 0x24
   18be4:	eb002f1c 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   18be8:	e2504000 	subs	r4, r0, #0
   18bec:	159d4020 	ldrne	r4, [sp, #32]
   18bf0:	e28d000c 	add	r0, sp, #12
   18bf4:	116f4f14 	clzne	r4, r4
   18bf8:	11a042a4 	lsrne	r4, r4, #5
   18bfc:	eb002f11 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   18c00:	e1a00004 	mov	r0, r4
   18c04:	e28dd038 	add	sp, sp, #56	; 0x38
   18c08:	e8bd8010 	pop	{r4, pc}
   18c0c:	e3a0204c 	mov	r2, #76	; 0x4c
   18c10:	e59f103c 	ldr	r1, [pc, #60]	; 18c54 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18c14:	e59f003c 	ldr	r0, [pc, #60]	; 18c58 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x110>
   18c18:	eb002ee2 	bl	247a8 <assertion_failed>
   18c1c:	e3a0204e 	mov	r2, #78	; 0x4e
   18c20:	e59f102c 	ldr	r1, [pc, #44]	; 18c54 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18c24:	e59f0030 	ldr	r0, [pc, #48]	; 18c5c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x114>
   18c28:	eb002ede 	bl	247a8 <assertion_failed>
   18c2c:	e3a02050 	mov	r2, #80	; 0x50
   18c30:	e59f101c 	ldr	r1, [pc, #28]	; 18c54 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18c34:	e59f0024 	ldr	r0, [pc, #36]	; 18c60 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x118>
   18c38:	eb002eda 	bl	247a8 <assertion_failed>
   18c3c:	e3a02052 	mov	r2, #82	; 0x52
   18c40:	e59f100c 	ldr	r1, [pc, #12]	; 18c54 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18c44:	e59f0018 	ldr	r0, [pc, #24]	; 18c64 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x11c>
   18c48:	eb002ed6 	bl	247a8 <assertion_failed>
   18c4c:	00044e7c 	.word	0x00044e7c
   18c50:	00008010 	.word	0x00008010
   18c54:	00044dc4 	.word	0x00044dc4
   18c58:	00044dd8 	.word	0x00044dd8
   18c5c:	00044dec 	.word	0x00044dec
   18c60:	00044e00 	.word	0x00044e00
   18c64:	00044e18 	.word	0x00044e18

00018c68 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   18c68:	e5903018 	ldr	r3, [r0, #24]
   18c6c:	e92d4010 	push	{r4, lr}
   18c70:	e3530000 	cmp	r3, #0
   18c74:	1a000006 	bne	18c94 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x2c>
   18c78:	e3510000 	cmp	r1, #0
   18c7c:	e5801018 	str	r1, [r0, #24]
   18c80:	18bd8010 	popne	{r4, pc}
   18c84:	e3a02070 	mov	r2, #112	; 0x70
   18c88:	e59f1014 	ldr	r1, [pc, #20]	; 18ca4 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x3c>
   18c8c:	e59f0014 	ldr	r0, [pc, #20]	; 18ca8 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x40>
   18c90:	eb002ec4 	bl	247a8 <assertion_failed>
   18c94:	e3a0206e 	mov	r2, #110	; 0x6e
   18c98:	e59f1004 	ldr	r1, [pc, #4]	; 18ca4 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x3c>
   18c9c:	e59f0008 	ldr	r0, [pc, #8]	; 18cac <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x44>
   18ca0:	eb002ec0 	bl	247a8 <assertion_failed>
   18ca4:	00044dc4 	.word	0x00044dc4
   18ca8:	000430f4 	.word	0x000430f4
   18cac:	00044e2c 	.word	0x00044e2c

00018cb0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>:
   18cb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18cb4:	e1a04000 	mov	r4, r0
   18cb8:	e5900000 	ldr	r0, [r0]
   18cbc:	e3500000 	cmp	r0, #0
   18cc0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   18cc4:	e1a05001 	mov	r5, r1
   18cc8:	e5941004 	ldr	r1, [r4, #4]
   18ccc:	e3510000 	cmp	r1, #0
   18cd0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   18cd4:	e59fc134 	ldr	ip, [pc, #308]	; 18e10 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x160>
   18cd8:	e0822182 	add	r2, r2, r2, lsl #3
   18cdc:	e1a02082 	lsl	r2, r2, #1
   18ce0:	e0c6e29c 	smull	lr, r6, ip, r2
   18ce4:	e0833183 	add	r3, r3, r3, lsl #3
   18ce8:	e1a03083 	lsl	r3, r3, #1
   18cec:	e0cce39c 	smull	lr, ip, ip, r3
   18cf0:	e1a02fc2 	asr	r2, r2, #31
   18cf4:	e594e008 	ldr	lr, [r4, #8]
   18cf8:	e0622146 	rsb	r2, r2, r6, asr #2
   18cfc:	e082200e 	add	r2, r2, lr
   18d00:	e1a03fc3 	asr	r3, r3, #31
   18d04:	e1500002 	cmp	r0, r2
   18d08:	e594000c 	ldr	r0, [r4, #12]
   18d0c:	e063314c 	rsb	r3, r3, ip, asr #2
   18d10:	e0803003 	add	r3, r0, r3
   18d14:	9a000031 	bls	18de0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x130>
   18d18:	e1510003 	cmp	r1, r3
   18d1c:	e1c420f8 	strd	r2, [r4, #8]
   18d20:	8a000035 	bhi	18dfc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x14c>
   18d24:	e152000e 	cmp	r2, lr
   18d28:	e584000c 	str	r0, [r4, #12]
   18d2c:	0a000008 	beq	18d54 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa4>
   18d30:	e3a03001 	mov	r3, #1
   18d34:	e5946018 	ldr	r6, [r4, #24]
   18d38:	e5c43010 	strb	r3, [r4, #16]
   18d3c:	e3560000 	cmp	r6, #0
   18d40:	0a000024 	beq	18dd8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   18d44:	e1a01005 	mov	r1, r5
   18d48:	e3a00000 	mov	r0, #0
   18d4c:	e594300c 	ldr	r3, [r4, #12]
   18d50:	e12fff36 	blx	r6
   18d54:	e5943014 	ldr	r3, [r4, #20]
   18d58:	e1530005 	cmp	r3, r5
   18d5c:	0a00001d 	beq	18dd8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   18d60:	e5942018 	ldr	r2, [r4, #24]
   18d64:	e3520000 	cmp	r2, #0
   18d68:	0a00001a 	beq	18dd8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   18d6c:	e3a06000 	mov	r6, #0
   18d70:	e3a07001 	mov	r7, #1
   18d74:	e1a01617 	lsl	r1, r7, r6
   18d78:	e1110003 	tst	r1, r3
   18d7c:	0a00000c 	beq	18db4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x104>
   18d80:	e1150001 	tst	r5, r1
   18d84:	1a000003 	bne	18d98 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe8>
   18d88:	e1c420d8 	ldrd	r2, [r4, #8]
   18d8c:	e3a00002 	mov	r0, #2
   18d90:	e5948018 	ldr	r8, [r4, #24]
   18d94:	e12fff38 	blx	r8
   18d98:	e2866001 	add	r6, r6, #1
   18d9c:	e3560003 	cmp	r6, #3
   18da0:	0a00000c 	beq	18dd8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   18da4:	e5943014 	ldr	r3, [r4, #20]
   18da8:	e1a01617 	lsl	r1, r7, r6
   18dac:	e1110003 	tst	r1, r3
   18db0:	1afffff2 	bne	18d80 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xd0>
   18db4:	e1150001 	tst	r5, r1
   18db8:	0afffff6 	beq	18d98 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe8>
   18dbc:	e1c420d8 	ldrd	r2, [r4, #8]
   18dc0:	e3a00001 	mov	r0, #1
   18dc4:	e5948018 	ldr	r8, [r4, #24]
   18dc8:	e2866001 	add	r6, r6, #1
   18dcc:	e12fff38 	blx	r8
   18dd0:	e3560003 	cmp	r6, #3
   18dd4:	1afffff2 	bne	18da4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xf4>
   18dd8:	e5845014 	str	r5, [r4, #20]
   18ddc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18de0:	e1510003 	cmp	r1, r3
   18de4:	e584300c 	str	r3, [r4, #12]
   18de8:	9a000006 	bls	18e08 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x158>
   18dec:	e1500003 	cmp	r0, r3
   18df0:	11a0200e 	movne	r2, lr
   18df4:	1affffcd 	bne	18d30 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x80>
   18df8:	eaffffd5 	b	18d54 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa4>
   18dfc:	e152000e 	cmp	r2, lr
   18e00:	1affffca 	bne	18d30 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x80>
   18e04:	eafffff8 	b	18dec <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x13c>
   18e08:	e584000c 	str	r0, [r4, #12]
   18e0c:	eaffffd0 	b	18d54 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa4>
   18e10:	66666667 	.word	0x66666667

00018e14 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   18e14:	e92d4070 	push	{r4, r5, r6, lr}
   18e18:	e24dd030 	sub	sp, sp, #48	; 0x30
   18e1c:	e1a05000 	mov	r5, r0
   18e20:	e1a04001 	mov	r4, r1
   18e24:	e28d000c 	add	r0, sp, #12
   18e28:	e3a01000 	mov	r1, #0
   18e2c:	e1a06002 	mov	r6, r2
   18e30:	eb002e7d 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   18e34:	e3a03010 	mov	r3, #16
   18e38:	e3a0c001 	mov	ip, #1
   18e3c:	e59f1044 	ldr	r1, [pc, #68]	; 18e88 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)+0x74>
   18e40:	e58d3000 	str	r3, [sp]
   18e44:	e28d2014 	add	r2, sp, #20
   18e48:	e3a0301c 	mov	r3, #28
   18e4c:	e28d000c 	add	r0, sp, #12
   18e50:	e58d4028 	str	r4, [sp, #40]	; 0x28
   18e54:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   18e58:	e58d6020 	str	r6, [sp, #32]
   18e5c:	e58d5024 	str	r5, [sp, #36]	; 0x24
   18e60:	eb002e7d 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   18e64:	e2504000 	subs	r4, r0, #0
   18e68:	159d4020 	ldrne	r4, [sp, #32]
   18e6c:	e28d000c 	add	r0, sp, #12
   18e70:	116f4f14 	clzne	r4, r4
   18e74:	11a042a4 	lsrne	r4, r4, #5
   18e78:	eb002e72 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   18e7c:	e1a00004 	mov	r0, r4
   18e80:	e28dd030 	add	sp, sp, #48	; 0x30
   18e84:	e8bd8070 	pop	{r4, r5, r6, pc}
   18e88:	00008011 	.word	0x00008011

00018e8c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   18e8c:	e590c000 	ldr	ip, [r0]
   18e90:	e92d4010 	push	{r4, lr}
   18e94:	e35c0000 	cmp	ip, #0
   18e98:	0a000014 	beq	18ef0 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x64>
   18e9c:	e1a03001 	mov	r3, r1
   18ea0:	e5901004 	ldr	r1, [r0, #4]
   18ea4:	e3510000 	cmp	r1, #0
   18ea8:	0a000014 	beq	18f00 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x74>
   18eac:	e15c0003 	cmp	ip, r3
   18eb0:	81510002 	cmphi	r1, r2
   18eb4:	8a000001 	bhi	18ec0 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x34>
   18eb8:	e3a00000 	mov	r0, #0
   18ebc:	e8bd8010 	pop	{r4, pc}
   18ec0:	e5d01011 	ldrb	r1, [r0, #17]
   18ec4:	e5803008 	str	r3, [r0, #8]
   18ec8:	e3510000 	cmp	r1, #0
   18ecc:	e580200c 	str	r2, [r0, #12]
   18ed0:	1a000001 	bne	18edc <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x50>
   18ed4:	e3a00001 	mov	r0, #1
   18ed8:	e8bd8010 	pop	{r4, pc}
   18edc:	e1a01002 	mov	r1, r2
   18ee0:	e8bd4010 	pop	{r4, lr}
   18ee4:	e1a00003 	mov	r0, r3
   18ee8:	e3a02001 	mov	r2, #1
   18eec:	eaffffc8 	b	18e14 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   18ef0:	e3a02075 	mov	r2, #117	; 0x75
   18ef4:	e59f1014 	ldr	r1, [pc, #20]	; 18f10 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x84>
   18ef8:	e59f0014 	ldr	r0, [pc, #20]	; 18f14 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x88>
   18efc:	eb002e29 	bl	247a8 <assertion_failed>
   18f00:	e3a02076 	mov	r2, #118	; 0x76
   18f04:	e59f1004 	ldr	r1, [pc, #4]	; 18f10 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x84>
   18f08:	e59f0008 	ldr	r0, [pc, #8]	; 18f18 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x8c>
   18f0c:	eb002e25 	bl	247a8 <assertion_failed>
   18f10:	00044dc4 	.word	0x00044dc4
   18f14:	00044dec 	.word	0x00044dec
   18f18:	00044e18 	.word	0x00044e18

00018f1c <CMouseBehaviour::ShowCursor(bool)>:
   18f1c:	e1a02001 	mov	r2, r1
   18f20:	e5903008 	ldr	r3, [r0, #8]
   18f24:	e5901000 	ldr	r1, [r0]
   18f28:	e92d4010 	push	{r4, lr}
   18f2c:	e1530001 	cmp	r3, r1
   18f30:	e5d04011 	ldrb	r4, [r0, #17]
   18f34:	e5c02011 	strb	r2, [r0, #17]
   18f38:	2a000007 	bcs	18f5c <CMouseBehaviour::ShowCursor(bool)+0x40>
   18f3c:	e590100c 	ldr	r1, [r0, #12]
   18f40:	e5900004 	ldr	r0, [r0, #4]
   18f44:	e1510000 	cmp	r1, r0
   18f48:	2a000007 	bcs	18f6c <CMouseBehaviour::ShowCursor(bool)+0x50>
   18f4c:	e1a00003 	mov	r0, r3
   18f50:	ebffffaf 	bl	18e14 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   18f54:	e1a00004 	mov	r0, r4
   18f58:	e8bd8010 	pop	{r4, pc}
   18f5c:	e3a0208d 	mov	r2, #141	; 0x8d
   18f60:	e59f1014 	ldr	r1, [pc, #20]	; 18f7c <CMouseBehaviour::ShowCursor(bool)+0x60>
   18f64:	e59f0014 	ldr	r0, [pc, #20]	; 18f80 <CMouseBehaviour::ShowCursor(bool)+0x64>
   18f68:	eb002e0e 	bl	247a8 <assertion_failed>
   18f6c:	e3a0208e 	mov	r2, #142	; 0x8e
   18f70:	e59f1004 	ldr	r1, [pc, #4]	; 18f7c <CMouseBehaviour::ShowCursor(bool)+0x60>
   18f74:	e59f0008 	ldr	r0, [pc, #8]	; 18f84 <CMouseBehaviour::ShowCursor(bool)+0x68>
   18f78:	eb002e0a 	bl	247a8 <assertion_failed>
   18f7c:	00044dc4 	.word	0x00044dc4
   18f80:	00044e44 	.word	0x00044e44
   18f84:	00044e60 	.word	0x00044e60

00018f88 <CMouseBehaviour::UpdateCursor()>:
   18f88:	e5d03011 	ldrb	r3, [r0, #17]
   18f8c:	e3530000 	cmp	r3, #0
   18f90:	012fff1e 	bxeq	lr
   18f94:	e5d03010 	ldrb	r3, [r0, #16]
   18f98:	e3530000 	cmp	r3, #0
   18f9c:	012fff1e 	bxeq	lr
   18fa0:	e3a03000 	mov	r3, #0
   18fa4:	e3a02001 	mov	r2, #1
   18fa8:	e5c03010 	strb	r3, [r0, #16]
   18fac:	e1c000d8 	ldrd	r0, [r0, #8]
   18fb0:	eaffff97 	b	18e14 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

00018fb4 <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   18fb4:	e92d4010 	push	{r4, lr}
   18fb8:	e1a04000 	mov	r4, r0
   18fbc:	e4801004 	str	r1, [r0], #4
   18fc0:	e1a01002 	mov	r1, r2
   18fc4:	eb003ad6 	bl	27b24 <CString::CString(char const*)>
   18fc8:	e3a03000 	mov	r3, #0
   18fcc:	e1a00004 	mov	r0, r4
   18fd0:	e5843014 	str	r3, [r4, #20]
   18fd4:	e5843018 	str	r3, [r4, #24]
   18fd8:	e584301c 	str	r3, [r4, #28]
   18fdc:	e5843020 	str	r3, [r4, #32]
   18fe0:	e8bd8010 	pop	{r4, pc}

00018fe4 <CPartitionManager::~CPartitionManager()>:
   18fe4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18fe8:	e1a06000 	mov	r6, r0
   18fec:	e3a07000 	mov	r7, #0
   18ff0:	e59fa0ac 	ldr	sl, [pc, #172]	; 190a4 <CPartitionManager::~CPartitionManager()+0xc0>
   18ff4:	e24dd010 	sub	sp, sp, #16
   18ff8:	e2809004 	add	r9, r0, #4
   18ffc:	e2804014 	add	r4, r0, #20
   19000:	e2808024 	add	r8, r0, #36	; 0x24
   19004:	e4943004 	ldr	r3, [r4], #4
   19008:	e3530000 	cmp	r3, #0
   1900c:	0a00001b 	beq	19080 <CPartitionManager::~CPartitionManager()+0x9c>
   19010:	e1a0000d 	mov	r0, sp
   19014:	eb003abc 	bl	27b0c <CString::CString()>
   19018:	e1a00009 	mov	r0, r9
   1901c:	eb003ad2 	bl	27b6c <CString::operator char const*() const>
   19020:	e2877001 	add	r7, r7, #1
   19024:	e1a02000 	mov	r2, r0
   19028:	e1a03007 	mov	r3, r7
   1902c:	e1a0100a 	mov	r1, sl
   19030:	e1a0000d 	mov	r0, sp
   19034:	eb003ffe 	bl	29034 <CString::Format(char const*, ...)>
   19038:	eb00309c 	bl	252b0 <CDeviceNameService::Get()>
   1903c:	e1a05000 	mov	r5, r0
   19040:	e1a0000d 	mov	r0, sp
   19044:	eb003ac8 	bl	27b6c <CString::operator char const*() const>
   19048:	e3a02001 	mov	r2, #1
   1904c:	e1a01000 	mov	r1, r0
   19050:	e1a00005 	mov	r0, r5
   19054:	eb003012 	bl	250a4 <CDeviceNameService::RemoveDevice(char const*, bool)>
   19058:	e5140004 	ldr	r0, [r4, #-4]
   1905c:	e3500000 	cmp	r0, #0
   19060:	0a000002 	beq	19070 <CPartitionManager::~CPartitionManager()+0x8c>
   19064:	e5903000 	ldr	r3, [r0]
   19068:	e5933004 	ldr	r3, [r3, #4]
   1906c:	e12fff33 	blx	r3
   19070:	e3a03000 	mov	r3, #0
   19074:	e1a0000d 	mov	r0, sp
   19078:	e5043004 	str	r3, [r4, #-4]
   1907c:	eb003a6f 	bl	27a40 <CString::~CString()>
   19080:	e1540008 	cmp	r4, r8
   19084:	1affffde 	bne	19004 <CPartitionManager::~CPartitionManager()+0x20>
   19088:	e3a03000 	mov	r3, #0
   1908c:	e1a00009 	mov	r0, r9
   19090:	e5863000 	str	r3, [r6]
   19094:	eb003a69 	bl	27a40 <CString::~CString()>
   19098:	e1a00006 	mov	r0, r6
   1909c:	e28dd010 	add	sp, sp, #16
   190a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   190a4:	0004527c 	.word	0x0004527c

000190a8 <CPartitionManager::Initialize()>:
   190a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190ac:	e1a05000 	mov	r5, r0
   190b0:	e5900000 	ldr	r0, [r0]
   190b4:	e3a03000 	mov	r3, #0
   190b8:	e5901000 	ldr	r1, [r0]
   190bc:	e3a02000 	mov	r2, #0
   190c0:	e5911010 	ldr	r1, [r1, #16]
   190c4:	e24ddf87 	sub	sp, sp, #540	; 0x21c
   190c8:	e12fff31 	blx	r1
   190cc:	e1903001 	orrs	r3, r0, r1
   190d0:	1a00002c 	bne	19188 <CPartitionManager::Initialize()+0xe0>
   190d4:	e5950000 	ldr	r0, [r5]
   190d8:	e3a02c02 	mov	r2, #512	; 0x200
   190dc:	e5903000 	ldr	r3, [r0]
   190e0:	e28d1018 	add	r1, sp, #24
   190e4:	e5933008 	ldr	r3, [r3, #8]
   190e8:	e12fff33 	blx	r3
   190ec:	e3500c02 	cmp	r0, #512	; 0x200
   190f0:	1a000024 	bne	19188 <CPartitionManager::Initialize()+0xe0>
   190f4:	e28d3f85 	add	r3, sp, #532	; 0x214
   190f8:	e2833002 	add	r3, r3, #2
   190fc:	e1d320b0 	ldrh	r2, [r3]
   19100:	e59f31a4 	ldr	r3, [pc, #420]	; 192ac <CPartitionManager::Initialize()+0x204>
   19104:	e1520003 	cmp	r2, r3
   19108:	1a00005b 	bne	1927c <CPartitionManager::Initialize()+0x1d4>
   1910c:	e3a04000 	mov	r4, #0
   19110:	e1a06004 	mov	r6, r4
   19114:	e59f8194 	ldr	r8, [pc, #404]	; 192b0 <CPartitionManager::Initialize()+0x208>
   19118:	e2857014 	add	r7, r5, #20
   1911c:	e28d3018 	add	r3, sp, #24
   19120:	e0833204 	add	r3, r3, r4, lsl #4
   19124:	e5d321c2 	ldrb	r2, [r3, #450]	; 0x1c2
   19128:	e2423005 	sub	r3, r2, #5
   1912c:	e16f3f13 	clz	r3, r3
   19130:	e3520000 	cmp	r2, #0
   19134:	e1a032a3 	lsr	r3, r3, #5
   19138:	03a03001 	moveq	r3, #1
   1913c:	e352000f 	cmp	r2, #15
   19140:	03833001 	orreq	r3, r3, #1
   19144:	e35200ef 	cmp	r2, #239	; 0xef
   19148:	03833001 	orreq	r3, r3, #1
   1914c:	e3530000 	cmp	r3, #0
   19150:	0a000014 	beq	191a8 <CPartitionManager::Initialize()+0x100>
   19154:	e2844001 	add	r4, r4, #1
   19158:	e3540004 	cmp	r4, #4
   1915c:	1affffee 	bne	1911c <CPartitionManager::Initialize()+0x74>
   19160:	e3560000 	cmp	r6, #0
   19164:	13a00001 	movne	r0, #1
   19168:	1a00000c 	bne	191a0 <CPartitionManager::Initialize()+0xf8>
   1916c:	eb003675 	bl	26b48 <CLogger::Get()>
   19170:	e3a02002 	mov	r2, #2
   19174:	e59f3138 	ldr	r3, [pc, #312]	; 192b4 <CPartitionManager::Initialize()+0x20c>
   19178:	e59f1138 	ldr	r1, [pc, #312]	; 192b8 <CPartitionManager::Initialize()+0x210>
   1917c:	eb0035b3 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19180:	e3a00001 	mov	r0, #1
   19184:	ea000005 	b	191a0 <CPartitionManager::Initialize()+0xf8>
   19188:	eb00366e 	bl	26b48 <CLogger::Get()>
   1918c:	e3a02001 	mov	r2, #1
   19190:	e59f3124 	ldr	r3, [pc, #292]	; 192bc <CPartitionManager::Initialize()+0x214>
   19194:	e59f111c 	ldr	r1, [pc, #284]	; 192b8 <CPartitionManager::Initialize()+0x210>
   19198:	eb0035ac 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1919c:	e3a00000 	mov	r0, #0
   191a0:	e28ddf87 	add	sp, sp, #540	; 0x21c
   191a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191a8:	e28d3f86 	add	r3, sp, #536	; 0x218
   191ac:	e284901c 	add	r9, r4, #28
   191b0:	e0839209 	add	r9, r3, r9, lsl #4
   191b4:	e2491f7e 	sub	r1, r9, #504	; 0x1f8
   191b8:	e15130b2 	ldrh	r3, [r1, #-2]
   191bc:	e1d120b0 	ldrh	r2, [r1]
   191c0:	e1933802 	orrs	r3, r3, r2, lsl #16
   191c4:	0affffe2 	beq	19154 <CPartitionManager::Initialize()+0xac>
   191c8:	e2499f7d 	sub	r9, r9, #500	; 0x1f4
   191cc:	e15930b2 	ldrh	r3, [r9, #-2]
   191d0:	e1d920b0 	ldrh	r2, [r9]
   191d4:	e1933802 	orrs	r3, r3, r2, lsl #16
   191d8:	0affffdd 	beq	19154 <CPartitionManager::Initialize()+0xac>
   191dc:	e7973104 	ldr	r3, [r7, r4, lsl #2]
   191e0:	e3530000 	cmp	r3, #0
   191e4:	1a00002c 	bne	1929c <CPartitionManager::Initialize()+0x1f4>
   191e8:	e3a00020 	mov	r0, #32
   191ec:	e58d1004 	str	r1, [sp, #4]
   191f0:	eb004774 	bl	2afc8 <operator new(unsigned int)>
   191f4:	e1a0a005 	mov	sl, r5
   191f8:	e1a0b000 	mov	fp, r0
   191fc:	e59d1004 	ldr	r1, [sp, #4]
   19200:	e1d9e0b0 	ldrh	lr, [r9]
   19204:	e1d1c0b0 	ldrh	ip, [r1]
   19208:	e15930b2 	ldrh	r3, [r9, #-2]
   1920c:	e15120b2 	ldrh	r2, [r1, #-2]
   19210:	e183380e 	orr	r3, r3, lr, lsl #16
   19214:	e182280c 	orr	r2, r2, ip, lsl #16
   19218:	e49a1004 	ldr	r1, [sl], #4
   1921c:	eb0000bf 	bl	19520 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   19220:	e787b104 	str	fp, [r7, r4, lsl #2]
   19224:	e28d0008 	add	r0, sp, #8
   19228:	eb003a37 	bl	27b0c <CString::CString()>
   1922c:	e1a0000a 	mov	r0, sl
   19230:	eb003a4d 	bl	27b6c <CString::operator char const*() const>
   19234:	e2866001 	add	r6, r6, #1
   19238:	e1a02000 	mov	r2, r0
   1923c:	e1a03006 	mov	r3, r6
   19240:	e1a01008 	mov	r1, r8
   19244:	e28d0008 	add	r0, sp, #8
   19248:	eb003f79 	bl	29034 <CString::Format(char const*, ...)>
   1924c:	eb003017 	bl	252b0 <CDeviceNameService::Get()>
   19250:	e1a09000 	mov	r9, r0
   19254:	e28d0008 	add	r0, sp, #8
   19258:	eb003a43 	bl	27b6c <CString::operator char const*() const>
   1925c:	e3a03001 	mov	r3, #1
   19260:	e1a01000 	mov	r1, r0
   19264:	e7972104 	ldr	r2, [r7, r4, lsl #2]
   19268:	e1a00009 	mov	r0, r9
   1926c:	eb002f5f 	bl	24ff0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   19270:	e28d0008 	add	r0, sp, #8
   19274:	eb0039f1 	bl	27a40 <CString::~CString()>
   19278:	eaffffb5 	b	19154 <CPartitionManager::Initialize()+0xac>
   1927c:	eb003631 	bl	26b48 <CLogger::Get()>
   19280:	e3a02002 	mov	r2, #2
   19284:	e59f3034 	ldr	r3, [pc, #52]	; 192c0 <CPartitionManager::Initialize()+0x218>
   19288:	e59f1028 	ldr	r1, [pc, #40]	; 192b8 <CPartitionManager::Initialize()+0x210>
   1928c:	eb00356f 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19290:	e3a00001 	mov	r0, #1
   19294:	e28ddf87 	add	sp, sp, #540	; 0x21c
   19298:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1929c:	e3a02078 	mov	r2, #120	; 0x78
   192a0:	e59f101c 	ldr	r1, [pc, #28]	; 192c4 <CPartitionManager::Initialize()+0x21c>
   192a4:	e59f001c 	ldr	r0, [pc, #28]	; 192c8 <CPartitionManager::Initialize()+0x220>
   192a8:	eb002d3e 	bl	247a8 <assertion_failed>
   192ac:	0000aa55 	.word	0x0000aa55
   192b0:	0004527c 	.word	0x0004527c
   192b4:	000452d8 	.word	0x000452d8
   192b8:	000452fc 	.word	0x000452fc
   192bc:	00045284 	.word	0x00045284
   192c0:	00045294 	.word	0x00045294
   192c4:	000452a8 	.word	0x000452a8
   192c8:	000452c0 	.word	0x000452c0

000192cc <CPartition::~CPartition()>:
   192cc:	e3a02000 	mov	r2, #0
   192d0:	e92d4010 	push	{r4, lr}
   192d4:	e1a04000 	mov	r4, r0
   192d8:	e59f3010 	ldr	r3, [pc, #16]	; 192f0 <CPartition::~CPartition()+0x24>
   192dc:	e5802004 	str	r2, [r0, #4]
   192e0:	e5803000 	str	r3, [r0]
   192e4:	eb002f08 	bl	24f0c <CDevice::~CDevice()>
   192e8:	e1a00004 	mov	r0, r4
   192ec:	e8bd8010 	pop	{r4, pc}
   192f0:	0004531c 	.word	0x0004531c

000192f4 <CPartition::~CPartition()>:
   192f4:	e3a02000 	mov	r2, #0
   192f8:	e92d4010 	push	{r4, lr}
   192fc:	e1a04000 	mov	r4, r0
   19300:	e59f301c 	ldr	r3, [pc, #28]	; 19324 <CPartition::~CPartition()+0x30>
   19304:	e5802004 	str	r2, [r0, #4]
   19308:	e5803000 	str	r3, [r0]
   1930c:	eb002efe 	bl	24f0c <CDevice::~CDevice()>
   19310:	e1a00004 	mov	r0, r4
   19314:	e3a01020 	mov	r1, #32
   19318:	eb004738 	bl	2b000 <operator delete(void*, unsigned int)>
   1931c:	e1a00004 	mov	r0, r4
   19320:	e8bd8010 	pop	{r4, pc}
   19324:	0004531c 	.word	0x0004531c

00019328 <CPartition::Read(void*, unsigned int)>:
   19328:	e5d0c018 	ldrb	ip, [r0, #24]
   1932c:	e35c0000 	cmp	ip, #0
   19330:	1a00001d 	bne	193ac <CPartition::Read(void*, unsigned int)+0x84>
   19334:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19338:	e3a05000 	mov	r5, #0
   1933c:	e3a09000 	mov	r9, #0
   19340:	e59f406c 	ldr	r4, [pc, #108]	; 193b4 <CPartition::Read(void*, unsigned int)+0x8c>
   19344:	e590c010 	ldr	ip, [r0, #16]
   19348:	e0944002 	adds	r4, r4, r2
   1934c:	e5903014 	ldr	r3, [r0, #20]
   19350:	e2a55000 	adc	r5, r5, #0
   19354:	e094c00c 	adds	ip, r4, ip
   19358:	e0a53003 	adc	r3, r5, r3
   1935c:	e590800c 	ldr	r8, [r0, #12]
   19360:	e1a064ac 	lsr	r6, ip, #9
   19364:	e1a074a3 	lsr	r7, r3, #9
   19368:	e1866b83 	orr	r6, r6, r3, lsl #23
   1936c:	e1590007 	cmp	r9, r7
   19370:	01580006 	cmpeq	r8, r6
   19374:	3a00000a 	bcc	193a4 <CPartition::Read(void*, unsigned int)+0x7c>
   19378:	e5900004 	ldr	r0, [r0, #4]
   1937c:	e3500000 	cmp	r0, #0
   19380:	0a000003 	beq	19394 <CPartition::Read(void*, unsigned int)+0x6c>
   19384:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19388:	e5903000 	ldr	r3, [r0]
   1938c:	e5933008 	ldr	r3, [r3, #8]
   19390:	e12fff13 	bx	r3
   19394:	e3a02035 	mov	r2, #53	; 0x35
   19398:	e59f1018 	ldr	r1, [pc, #24]	; 193b8 <CPartition::Read(void*, unsigned int)+0x90>
   1939c:	e59f0018 	ldr	r0, [pc, #24]	; 193bc <CPartition::Read(void*, unsigned int)+0x94>
   193a0:	eb002d00 	bl	247a8 <assertion_failed>
   193a4:	e3e00000 	mvn	r0, #0
   193a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   193ac:	e3e00000 	mvn	r0, #0
   193b0:	e12fff1e 	bx	lr
   193b4:	000001ff 	.word	0x000001ff
   193b8:	00045304 	.word	0x00045304
   193bc:	00041534 	.word	0x00041534

000193c0 <CPartition::Write(void const*, unsigned int)>:
   193c0:	e5d0c018 	ldrb	ip, [r0, #24]
   193c4:	e35c0000 	cmp	ip, #0
   193c8:	1a00001d 	bne	19444 <CPartition::Write(void const*, unsigned int)+0x84>
   193cc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   193d0:	e3a05000 	mov	r5, #0
   193d4:	e3a09000 	mov	r9, #0
   193d8:	e59f406c 	ldr	r4, [pc, #108]	; 1944c <CPartition::Write(void const*, unsigned int)+0x8c>
   193dc:	e590c010 	ldr	ip, [r0, #16]
   193e0:	e0944002 	adds	r4, r4, r2
   193e4:	e5903014 	ldr	r3, [r0, #20]
   193e8:	e2a55000 	adc	r5, r5, #0
   193ec:	e094c00c 	adds	ip, r4, ip
   193f0:	e0a53003 	adc	r3, r5, r3
   193f4:	e590800c 	ldr	r8, [r0, #12]
   193f8:	e1a064ac 	lsr	r6, ip, #9
   193fc:	e1a074a3 	lsr	r7, r3, #9
   19400:	e1866b83 	orr	r6, r6, r3, lsl #23
   19404:	e1590007 	cmp	r9, r7
   19408:	01580006 	cmpeq	r8, r6
   1940c:	3a00000a 	bcc	1943c <CPartition::Write(void const*, unsigned int)+0x7c>
   19410:	e5900004 	ldr	r0, [r0, #4]
   19414:	e3500000 	cmp	r0, #0
   19418:	0a000003 	beq	1942c <CPartition::Write(void const*, unsigned int)+0x6c>
   1941c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19420:	e5903000 	ldr	r3, [r0]
   19424:	e593300c 	ldr	r3, [r3, #12]
   19428:	e12fff13 	bx	r3
   1942c:	e3a02047 	mov	r2, #71	; 0x47
   19430:	e59f1018 	ldr	r1, [pc, #24]	; 19450 <CPartition::Write(void const*, unsigned int)+0x90>
   19434:	e59f0018 	ldr	r0, [pc, #24]	; 19454 <CPartition::Write(void const*, unsigned int)+0x94>
   19438:	eb002cda 	bl	247a8 <assertion_failed>
   1943c:	e3e00000 	mvn	r0, #0
   19440:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19444:	e3e00000 	mvn	r0, #0
   19448:	e12fff1e 	bx	lr
   1944c:	000001ff 	.word	0x000001ff
   19450:	00045304 	.word	0x00045304
   19454:	00041534 	.word	0x00041534

00019458 <CPartition::Seek(unsigned long long)>:
   19458:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1945c:	e3a0b000 	mov	fp, #0
   19460:	e1a0500b 	mov	r5, fp
   19464:	e1a04b82 	lsl	r4, r2, #23
   19468:	e1a06002 	mov	r6, r2
   1946c:	e3a02001 	mov	r2, #1
   19470:	e1a04ba4 	lsr	r4, r4, #23
   19474:	e1941005 	orrs	r1, r4, r5
   19478:	e5c02018 	strb	r2, [r0, #24]
   1947c:	1a00001e 	bne	194fc <CPartition::Seek(unsigned long long)+0xa4>
   19480:	e1a0a003 	mov	sl, r3
   19484:	e3a03000 	mov	r3, #0
   19488:	e590200c 	ldr	r2, [r0, #12]
   1948c:	e1a044a6 	lsr	r4, r6, #9
   19490:	e1a054aa 	lsr	r5, sl, #9
   19494:	e1844b8a 	orr	r4, r4, sl, lsl #23
   19498:	e1550003 	cmp	r5, r3
   1949c:	01540002 	cmpeq	r4, r2
   194a0:	e1a07000 	mov	r7, r0
   194a4:	2a000014 	bcs	194fc <CPartition::Seek(unsigned long long)+0xa4>
   194a8:	e9900009 	ldmib	r0, {r0, r3}
   194ac:	e1a02483 	lsl	r2, r3, #9
   194b0:	e0968002 	adds	r8, r6, r2
   194b4:	e1a03ba3 	lsr	r3, r3, #23
   194b8:	e0aa9003 	adc	r9, sl, r3
   194bc:	e3500000 	cmp	r0, #0
   194c0:	0a000010 	beq	19508 <CPartition::Seek(unsigned long long)+0xb0>
   194c4:	e5903000 	ldr	r3, [r0]
   194c8:	e1a02008 	mov	r2, r8
   194cc:	e5931010 	ldr	r1, [r3, #16]
   194d0:	e1a03009 	mov	r3, r9
   194d4:	e12fff31 	blx	r1
   194d8:	e1510009 	cmp	r1, r9
   194dc:	01500008 	cmpeq	r0, r8
   194e0:	1a000005 	bne	194fc <CPartition::Seek(unsigned long long)+0xa4>
   194e4:	e1a00006 	mov	r0, r6
   194e8:	e1a0100a 	mov	r1, sl
   194ec:	e5876010 	str	r6, [r7, #16]
   194f0:	e587a014 	str	sl, [r7, #20]
   194f4:	e5c7b018 	strb	fp, [r7, #24]
   194f8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194fc:	e3e00000 	mvn	r0, #0
   19500:	e1a01000 	mov	r1, r0
   19504:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19508:	e3a02059 	mov	r2, #89	; 0x59
   1950c:	e59f1004 	ldr	r1, [pc, #4]	; 19518 <CPartition::Seek(unsigned long long)+0xc0>
   19510:	e59f0004 	ldr	r0, [pc, #4]	; 1951c <CPartition::Seek(unsigned long long)+0xc4>
   19514:	eb002ca3 	bl	247a8 <assertion_failed>
   19518:	00045304 	.word	0x00045304
   1951c:	00041534 	.word	0x00041534

00019520 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   19520:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19524:	e1a05001 	mov	r5, r1
   19528:	e1a04000 	mov	r4, r0
   1952c:	e1a07002 	mov	r7, r2
   19530:	e1a06003 	mov	r6, r3
   19534:	eb002e82 	bl	24f44 <CDevice::CDevice()>
   19538:	e3a03001 	mov	r3, #1
   1953c:	e3a00000 	mov	r0, #0
   19540:	e3a01000 	mov	r1, #0
   19544:	e59f2030 	ldr	r2, [pc, #48]	; 1957c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x5c>
   19548:	e3550000 	cmp	r5, #0
   1954c:	e98400a0 	stmib	r4, {r5, r7}
   19550:	e1c401f0 	strd	r0, [r4, #16]
   19554:	e584600c 	str	r6, [r4, #12]
   19558:	e5842000 	str	r2, [r4]
   1955c:	e5c43018 	strb	r3, [r4, #24]
   19560:	0a000001 	beq	1956c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   19564:	e1a00004 	mov	r0, r4
   19568:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1956c:	e3a0201f 	mov	r2, #31
   19570:	e59f1008 	ldr	r1, [pc, #8]	; 19580 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x60>
   19574:	e59f0008 	ldr	r0, [pc, #8]	; 19584 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x64>
   19578:	eb002c8a 	bl	247a8 <assertion_failed>
   1957c:	0004531c 	.word	0x0004531c
   19580:	00045304 	.word	0x00045304
   19584:	00041534 	.word	0x00041534

00019588 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>:
   19588:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1958c:	e1a04000 	mov	r4, r0
   19590:	e1a06001 	mov	r6, r1
   19594:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   19598:	e59fc110 	ldr	ip, [pc, #272]	; 196b0 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x128>
   1959c:	e3510000 	cmp	r1, #0
   195a0:	01a0100c 	moveq	r1, ip
   195a4:	e2805010 	add	r5, r0, #16
   195a8:	e5dda028 	ldrb	sl, [sp, #40]	; 0x28
   195ac:	e1a07003 	mov	r7, r3
   195b0:	e280903c 	add	r9, r0, #60	; 0x3c
   195b4:	e1a08002 	mov	r8, r2
   195b8:	eb003959 	bl	27b24 <CString::CString(char const*)>
   195bc:	e1a00005 	mov	r0, r5
   195c0:	eb001da9 	bl	20c6c <CNetConfig::CNetConfig()>
   195c4:	e1a0200a 	mov	r2, sl
   195c8:	e1a01005 	mov	r1, r5
   195cc:	e1a00009 	mov	r0, r9
   195d0:	e284a060 	add	sl, r4, #96	; 0x60
   195d4:	eb000921 	bl	1ba60 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>
   195d8:	e1a02009 	mov	r2, r9
   195dc:	e1a01005 	mov	r1, r5
   195e0:	e2849098 	add	r9, r4, #152	; 0x98
   195e4:	e1a0000a 	mov	r0, sl
   195e8:	eb000748 	bl	1b310 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>
   195ec:	e1a0200a 	mov	r2, sl
   195f0:	e1a01005 	mov	r1, r5
   195f4:	e1a00009 	mov	r0, r9
   195f8:	eb000507 	bl	1aa1c <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>
   195fc:	e1a02009 	mov	r2, r9
   19600:	e1a01005 	mov	r1, r5
   19604:	e28400d8 	add	r0, r4, #216	; 0xd8
   19608:	eb0000f2 	bl	199d8 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>
   1960c:	e3a01000 	mov	r1, #0
   19610:	e16f0f16 	clz	r0, r6
   19614:	e59f3098 	ldr	r3, [pc, #152]	; 196b4 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x12c>
   19618:	e1a002a0 	lsr	r0, r0, #5
   1961c:	e5932000 	ldr	r2, [r3]
   19620:	e5841128 	str	r1, [r4, #296]	; 0x128
   19624:	e1520001 	cmp	r2, r1
   19628:	e5c40124 	strb	r0, [r4, #292]	; 0x124
   1962c:	1a00001b 	bne	196a0 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x118>
   19630:	e1a01000 	mov	r1, r0
   19634:	e1a00005 	mov	r0, r5
   19638:	e5834000 	str	r4, [r3]
   1963c:	eb001d52 	bl	20b8c <CNetConfig::SetDHCP(bool)>
   19640:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   19644:	e3530000 	cmp	r3, #0
   19648:	0a000001 	beq	19654 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xcc>
   1964c:	e1a00004 	mov	r0, r4
   19650:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19654:	e1a01006 	mov	r1, r6
   19658:	e1a00005 	mov	r0, r5
   1965c:	eb001da1 	bl	20ce8 <CNetConfig::SetIPAddress(unsigned char const*)>
   19660:	e1a01008 	mov	r1, r8
   19664:	e1a00005 	mov	r0, r5
   19668:	eb001da5 	bl	20d04 <CNetConfig::SetNetMask(unsigned char const*)>
   1966c:	e3570000 	cmp	r7, #0
   19670:	0a000002 	beq	19680 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xf8>
   19674:	e1a01007 	mov	r1, r7
   19678:	e1a00005 	mov	r0, r5
   1967c:	eb001d48 	bl	20ba4 <CNetConfig::SetDefaultGateway(unsigned char const*)>
   19680:	e59d3020 	ldr	r3, [sp, #32]
   19684:	e3530000 	cmp	r3, #0
   19688:	0affffef 	beq	1964c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xc4>
   1968c:	e1a00005 	mov	r0, r5
   19690:	e1a01003 	mov	r1, r3
   19694:	eb001d44 	bl	20bac <CNetConfig::SetDNSServer(unsigned char const*)>
   19698:	e1a00004 	mov	r0, r4
   1969c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   196a0:	e3a02026 	mov	r2, #38	; 0x26
   196a4:	e59f100c 	ldr	r1, [pc, #12]	; 196b8 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x130>
   196a8:	e59f000c 	ldr	r0, [pc, #12]	; 196bc <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x134>
   196ac:	eb002c3d 	bl	247a8 <assertion_failed>
   196b0:	000493c8 	.word	0x000493c8
   196b4:	0005ce18 	.word	0x0005ce18
   196b8:	00045334 	.word	0x00045334
   196bc:	00045348 	.word	0x00045348

000196c0 <CNetSubSystem::Process()>:
   196c0:	e59f3034 	ldr	r3, [pc, #52]	; 196fc <CNetSubSystem::Process()+0x3c>
   196c4:	e5933000 	ldr	r3, [r3]
   196c8:	e3530000 	cmp	r3, #0
   196cc:	012fff1e 	bxeq	lr
   196d0:	e92d4010 	push	{r4, lr}
   196d4:	e1a04000 	mov	r4, r0
   196d8:	e280003c 	add	r0, r0, #60	; 0x3c
   196dc:	eb000951 	bl	1bc28 <CNetDeviceLayer::Process()>
   196e0:	e2840060 	add	r0, r4, #96	; 0x60
   196e4:	eb00076a 	bl	1b494 <CLinkLayer::Process()>
   196e8:	e2840098 	add	r0, r4, #152	; 0x98
   196ec:	eb00051a 	bl	1ab5c <CNetworkLayer::Process()>
   196f0:	e28400d8 	add	r0, r4, #216	; 0xd8
   196f4:	e8bd4010 	pop	{r4, lr}
   196f8:	ea0003da 	b	1a668 <CTransportLayer::Process()>
   196fc:	0005ce18 	.word	0x0005ce18

00019700 <CNetSubSystem::GetConfig()>:
   19700:	e2800010 	add	r0, r0, #16
   19704:	e12fff1e 	bx	lr

00019708 <CNetSubSystem::GetNetDeviceLayer()>:
   19708:	e280003c 	add	r0, r0, #60	; 0x3c
   1970c:	e12fff1e 	bx	lr

00019710 <CNetSubSystem::GetLinkLayer()>:
   19710:	e2800060 	add	r0, r0, #96	; 0x60
   19714:	e12fff1e 	bx	lr

00019718 <CNetSubSystem::GetTransportLayer()>:
   19718:	e28000d8 	add	r0, r0, #216	; 0xd8
   1971c:	e12fff1e 	bx	lr

00019720 <CNetSubSystem::IsRunning() const>:
   19720:	e5d03124 	ldrb	r3, [r0, #292]	; 0x124
   19724:	e3530000 	cmp	r3, #0
   19728:	0a000003 	beq	1973c <CNetSubSystem::IsRunning() const+0x1c>
   1972c:	e5900128 	ldr	r0, [r0, #296]	; 0x128
   19730:	e3500000 	cmp	r0, #0
   19734:	0a000002 	beq	19744 <CNetSubSystem::IsRunning() const+0x24>
   19738:	ea00206e 	b	218f8 <CDHCPClient::IsBound() const>
   1973c:	e3a00001 	mov	r0, #1
   19740:	e12fff1e 	bx	lr
   19744:	e3a0209d 	mov	r2, #157	; 0x9d
   19748:	e92d4010 	push	{r4, lr}
   1974c:	e59f1004 	ldr	r1, [pc, #4]	; 19758 <CNetSubSystem::IsRunning() const+0x38>
   19750:	e59f0004 	ldr	r0, [pc, #4]	; 1975c <CNetSubSystem::IsRunning() const+0x3c>
   19754:	eb002c13 	bl	247a8 <assertion_failed>
   19758:	00045334 	.word	0x00045334
   1975c:	00045358 	.word	0x00045358

00019760 <CNetSubSystem::Initialize(bool)>:
   19760:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   19764:	e2806010 	add	r6, r0, #16
   19768:	e24dd00c 	sub	sp, sp, #12
   1976c:	e1a04000 	mov	r4, r0
   19770:	e1a00006 	mov	r0, r6
   19774:	e1a05001 	mov	r5, r1
   19778:	eb001d0d 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   1977c:	eb001e46 	bl	2109c <CIPAddress::IsNull() const>
   19780:	e1a01000 	mov	r1, r0
   19784:	e1a00006 	mov	r0, r6
   19788:	e5c41124 	strb	r1, [r4, #292]	; 0x124
   1978c:	eb001cfe 	bl	20b8c <CNetConfig::SetDHCP(bool)>
   19790:	e1a01005 	mov	r1, r5
   19794:	e284003c 	add	r0, r4, #60	; 0x3c
   19798:	eb0008c7 	bl	1babc <CNetDeviceLayer::Initialize(bool)>
   1979c:	e3500000 	cmp	r0, #0
   197a0:	1a000003 	bne	197b4 <CNetSubSystem::Initialize(bool)+0x54>
   197a4:	e3a06000 	mov	r6, #0
   197a8:	e1a00006 	mov	r0, r6
   197ac:	e28dd00c 	add	sp, sp, #12
   197b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   197b4:	e2846060 	add	r6, r4, #96	; 0x60
   197b8:	e1a00006 	mov	r0, r6
   197bc:	eb000709 	bl	1b3e8 <CLinkLayer::Initialize()>
   197c0:	e3500000 	cmp	r0, #0
   197c4:	0afffff6 	beq	197a4 <CNetSubSystem::Initialize(bool)+0x44>
   197c8:	e2847098 	add	r7, r4, #152	; 0x98
   197cc:	e1a00007 	mov	r0, r7
   197d0:	eb0004c8 	bl	1aaf8 <CNetworkLayer::Initialize()>
   197d4:	e3500000 	cmp	r0, #0
   197d8:	0afffff1 	beq	197a4 <CNetSubSystem::Initialize(bool)+0x44>
   197dc:	e1a00006 	mov	r0, r6
   197e0:	e1a01007 	mov	r1, r7
   197e4:	eb000718 	bl	1b44c <CLinkLayer::AttachLayer(CNetworkLayer*)>
   197e8:	e28400d8 	add	r0, r4, #216	; 0xd8
   197ec:	eb00009f 	bl	19a70 <CTransportLayer::Initialize()>
   197f0:	e2506000 	subs	r6, r0, #0
   197f4:	0affffea 	beq	197a4 <CNetSubSystem::Initialize(bool)+0x44>
   197f8:	e3a000e0 	mov	r0, #224	; 0xe0
   197fc:	eb0045f1 	bl	2afc8 <operator new(unsigned int)>
   19800:	e1a01004 	mov	r1, r4
   19804:	eb000068 	bl	199ac <CNetTask::CNetTask(CNetSubSystem*)>
   19808:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   1980c:	e3530000 	cmp	r3, #0
   19810:	0a00000d 	beq	1984c <CNetSubSystem::Initialize(bool)+0xec>
   19814:	e5943128 	ldr	r3, [r4, #296]	; 0x128
   19818:	e3530000 	cmp	r3, #0
   1981c:	1a000014 	bne	19874 <CNetSubSystem::Initialize(bool)+0x114>
   19820:	e1a00004 	mov	r0, r4
   19824:	eb0038d0 	bl	27b6c <CString::operator char const*() const>
   19828:	e1a02000 	mov	r2, r0
   1982c:	e3a00e1e 	mov	r0, #480	; 0x1e0
   19830:	e58d2004 	str	r2, [sp, #4]
   19834:	eb0045e3 	bl	2afc8 <operator new(unsigned int)>
   19838:	e1a07000 	mov	r7, r0
   1983c:	e1a01004 	mov	r1, r4
   19840:	e59d2004 	ldr	r2, [sp, #4]
   19844:	eb001ff5 	bl	21820 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>
   19848:	e5847128 	str	r7, [r4, #296]	; 0x128
   1984c:	e3550000 	cmp	r5, #0
   19850:	1a000002 	bne	19860 <CNetSubSystem::Initialize(bool)+0x100>
   19854:	eaffffd3 	b	197a8 <CNetSubSystem::Initialize(bool)+0x48>
   19858:	eb002b26 	bl	244f8 <CScheduler::Get()>
   1985c:	eb002a9a 	bl	242cc <CScheduler::Yield()>
   19860:	e1a00004 	mov	r0, r4
   19864:	ebffffad 	bl	19720 <CNetSubSystem::IsRunning() const>
   19868:	e3500000 	cmp	r0, #0
   1986c:	0afffff9 	beq	19858 <CNetSubSystem::Initialize(bool)+0xf8>
   19870:	eaffffcc 	b	197a8 <CNetSubSystem::Initialize(bool)+0x48>
   19874:	e3a02060 	mov	r2, #96	; 0x60
   19878:	e59f1004 	ldr	r1, [pc, #4]	; 19884 <CNetSubSystem::Initialize(bool)+0x124>
   1987c:	e59f0004 	ldr	r0, [pc, #4]	; 19888 <CNetSubSystem::Initialize(bool)+0x128>
   19880:	eb002bc8 	bl	247a8 <assertion_failed>
   19884:	00045334 	.word	0x00045334
   19888:	0004536c 	.word	0x0004536c

0001988c <CNetSubSystem::Get()>:
   1988c:	e59f301c 	ldr	r3, [pc, #28]	; 198b0 <CNetSubSystem::Get()+0x24>
   19890:	e5930000 	ldr	r0, [r3]
   19894:	e3500000 	cmp	r0, #0
   19898:	112fff1e 	bxne	lr
   1989c:	e3a020a3 	mov	r2, #163	; 0xa3
   198a0:	e92d4010 	push	{r4, lr}
   198a4:	e59f1008 	ldr	r1, [pc, #8]	; 198b4 <CNetSubSystem::Get()+0x28>
   198a8:	e59f0008 	ldr	r0, [pc, #8]	; 198b8 <CNetSubSystem::Get()+0x2c>
   198ac:	eb002bbd 	bl	247a8 <assertion_failed>
   198b0:	0005ce18 	.word	0x0005ce18
   198b4:	00045334 	.word	0x00045334
   198b8:	00045380 	.word	0x00045380

000198bc <CNetSubSystem::~CNetSubSystem()>:
   198bc:	e92d4010 	push	{r4, lr}
   198c0:	e3a02000 	mov	r2, #0
   198c4:	e1a04000 	mov	r4, r0
   198c8:	e59f3038 	ldr	r3, [pc, #56]	; 19908 <CNetSubSystem::~CNetSubSystem()+0x4c>
   198cc:	e28000d8 	add	r0, r0, #216	; 0xd8
   198d0:	e5832000 	str	r2, [r3]
   198d4:	eb000359 	bl	1a640 <CTransportLayer::~CTransportLayer()>
   198d8:	e2840098 	add	r0, r4, #152	; 0x98
   198dc:	eb00046d 	bl	1aa98 <CNetworkLayer::~CNetworkLayer()>
   198e0:	e2840060 	add	r0, r4, #96	; 0x60
   198e4:	eb0006a8 	bl	1b38c <CLinkLayer::~CLinkLayer()>
   198e8:	e284003c 	add	r0, r4, #60	; 0x3c
   198ec:	eb000867 	bl	1ba90 <CNetDeviceLayer::~CNetDeviceLayer()>
   198f0:	e2840010 	add	r0, r4, #16
   198f4:	eb001c96 	bl	20b54 <CNetConfig::~CNetConfig()>
   198f8:	e1a00004 	mov	r0, r4
   198fc:	eb00384f 	bl	27a40 <CString::~CString()>
   19900:	e1a00004 	mov	r0, r4
   19904:	e8bd8010 	pop	{r4, pc}
   19908:	0005ce18 	.word	0x0005ce18

0001990c <CNetTask::~CNetTask()>:
   1990c:	e3a02000 	mov	r2, #0
   19910:	e92d4010 	push	{r4, lr}
   19914:	e1a04000 	mov	r4, r0
   19918:	e59f3010 	ldr	r3, [pc, #16]	; 19930 <CNetTask::~CNetTask()+0x24>
   1991c:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   19920:	e5803000 	str	r3, [r0]
   19924:	eb00290e 	bl	23d64 <CTask::~CTask()>
   19928:	e1a00004 	mov	r0, r4
   1992c:	e8bd8010 	pop	{r4, pc}
   19930:	000453bc 	.word	0x000453bc

00019934 <CNetTask::~CNetTask()>:
   19934:	e3a02000 	mov	r2, #0
   19938:	e92d4010 	push	{r4, lr}
   1993c:	e1a04000 	mov	r4, r0
   19940:	e59f301c 	ldr	r3, [pc, #28]	; 19964 <CNetTask::~CNetTask()+0x30>
   19944:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   19948:	e5803000 	str	r3, [r0]
   1994c:	eb002904 	bl	23d64 <CTask::~CTask()>
   19950:	e1a00004 	mov	r0, r4
   19954:	e3a010e0 	mov	r1, #224	; 0xe0
   19958:	eb0045a8 	bl	2b000 <operator delete(void*, unsigned int)>
   1995c:	e1a00004 	mov	r0, r4
   19960:	e8bd8010 	pop	{r4, pc}
   19964:	000453bc 	.word	0x000453bc

00019968 <CNetTask::Run()>:
   19968:	e92d4010 	push	{r4, lr}
   1996c:	e1a04000 	mov	r4, r0
   19970:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   19974:	e3500000 	cmp	r0, #0
   19978:	0a000005 	beq	19994 <CNetTask::Run()+0x2c>
   1997c:	ebffff4f 	bl	196c0 <CNetSubSystem::Process()>
   19980:	eb002adc 	bl	244f8 <CScheduler::Get()>
   19984:	eb002a50 	bl	242cc <CScheduler::Yield()>
   19988:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   1998c:	e3500000 	cmp	r0, #0
   19990:	1afffff9 	bne	1997c <CNetTask::Run()+0x14>
   19994:	e3a02026 	mov	r2, #38	; 0x26
   19998:	e59f1004 	ldr	r1, [pc, #4]	; 199a4 <CNetTask::Run()+0x3c>
   1999c:	e59f0004 	ldr	r0, [pc, #4]	; 199a8 <CNetTask::Run()+0x40>
   199a0:	eb002b80 	bl	247a8 <assertion_failed>
   199a4:	00045390 	.word	0x00045390
   199a8:	0004539c 	.word	0x0004539c

000199ac <CNetTask::CNetTask(CNetSubSystem*)>:
   199ac:	e92d4070 	push	{r4, r5, r6, lr}
   199b0:	e1a04000 	mov	r4, r0
   199b4:	e1a05001 	mov	r5, r1
   199b8:	e3a01902 	mov	r1, #32768	; 0x8000
   199bc:	eb002939 	bl	23ea8 <CTask::CTask(unsigned int)>
   199c0:	e59f300c 	ldr	r3, [pc, #12]	; 199d4 <CNetTask::CNetTask(CNetSubSystem*)+0x28>
   199c4:	e1a00004 	mov	r0, r4
   199c8:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   199cc:	e5843000 	str	r3, [r4]
   199d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   199d4:	000453bc 	.word	0x000453bc

000199d8 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>:
   199d8:	e92d4070 	push	{r4, r5, r6, lr}
   199dc:	e1a06002 	mov	r6, r2
   199e0:	e3a02064 	mov	r2, #100	; 0x64
   199e4:	e1a04000 	mov	r4, r0
   199e8:	e5801000 	str	r1, [r0]
   199ec:	e1a05001 	mov	r5, r1
   199f0:	e5806004 	str	r6, [r0, #4]
   199f4:	e1a01002 	mov	r1, r2
   199f8:	e2800008 	add	r0, r0, #8
   199fc:	eb003762 	bl	2778c <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   19a00:	e3a03000 	mov	r3, #0
   19a04:	e59f0054 	ldr	r0, [pc, #84]	; 19a60 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x88>
   19a08:	e584301c 	str	r3, [r4, #28]
   19a0c:	e1c401b8 	strh	r0, [r4, #24]
   19a10:	e1a02006 	mov	r2, r6
   19a14:	e1a01005 	mov	r1, r5
   19a18:	e2840020 	add	r0, r4, #32
   19a1c:	eb001ba2 	bl	208ac <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>
   19a20:	e5943000 	ldr	r3, [r4]
   19a24:	e3530000 	cmp	r3, #0
   19a28:	0a000004 	beq	19a40 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x68>
   19a2c:	e5943004 	ldr	r3, [r4, #4]
   19a30:	e3530000 	cmp	r3, #0
   19a34:	0a000005 	beq	19a50 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x78>
   19a38:	e1a00004 	mov	r0, r4
   19a3c:	e8bd8070 	pop	{r4, r5, r6, pc}
   19a40:	e3a02025 	mov	r2, #37	; 0x25
   19a44:	e59f1018 	ldr	r1, [pc, #24]	; 19a64 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x8c>
   19a48:	e59f0018 	ldr	r0, [pc, #24]	; 19a68 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x90>
   19a4c:	eb002b55 	bl	247a8 <assertion_failed>
   19a50:	e3a02026 	mov	r2, #38	; 0x26
   19a54:	e59f1008 	ldr	r1, [pc, #8]	; 19a64 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x8c>
   19a58:	e59f000c 	ldr	r0, [pc, #12]	; 19a6c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x94>
   19a5c:	eb002b51 	bl	247a8 <assertion_failed>
   19a60:	ffffea60 	.word	0xffffea60
   19a64:	000453c8 	.word	0x000453c8
   19a68:	000453dc 	.word	0x000453dc
   19a6c:	000453f0 	.word	0x000453f0

00019a70 <CTransportLayer::Initialize()>:
   19a70:	e3a00001 	mov	r0, #1
   19a74:	e12fff1e 	bx	lr

00019a78 <CTransportLayer::Bind(unsigned short, int)>:
   19a78:	e3520011 	cmp	r2, #17
   19a7c:	1a000051 	bne	19bc8 <CTransportLayer::Bind(unsigned short, int)+0x150>
   19a80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19a84:	e1a06000 	mov	r6, r0
   19a88:	e590001c 	ldr	r0, [r0, #28]
   19a8c:	e1a07001 	mov	r7, r1
   19a90:	e3500000 	cmp	r0, #0
   19a94:	1a000036 	bne	19b74 <CTransportLayer::Bind(unsigned short, int)+0xfc>
   19a98:	e3a04000 	mov	r4, #0
   19a9c:	e2865008 	add	r5, r6, #8
   19aa0:	ea000006 	b	19ac0 <CTransportLayer::Bind(unsigned short, int)+0x48>
   19aa4:	e1a01004 	mov	r1, r4
   19aa8:	e1a00005 	mov	r0, r5
   19aac:	eb00375f 	bl	27830 <CPtrArray::operator[](unsigned int)>
   19ab0:	e5903000 	ldr	r3, [r0]
   19ab4:	e3530000 	cmp	r3, #0
   19ab8:	0a000004 	beq	19ad0 <CTransportLayer::Bind(unsigned short, int)+0x58>
   19abc:	e2844001 	add	r4, r4, #1
   19ac0:	e1a00005 	mov	r0, r5
   19ac4:	eb003757 	bl	27828 <CPtrArray::GetCount() const>
   19ac8:	e1500004 	cmp	r0, r4
   19acc:	8afffff4 	bhi	19aa4 <CTransportLayer::Bind(unsigned short, int)+0x2c>
   19ad0:	e1a00005 	mov	r0, r5
   19ad4:	eb003753 	bl	27828 <CPtrArray::GetCount() const>
   19ad8:	e1500004 	cmp	r0, r4
   19adc:	9a00001f 	bls	19b60 <CTransportLayer::Bind(unsigned short, int)+0xe8>
   19ae0:	e3570000 	cmp	r7, #0
   19ae4:	0a000030 	beq	19bac <CTransportLayer::Bind(unsigned short, int)+0x134>
   19ae8:	e5963000 	ldr	r3, [r6]
   19aec:	e3530000 	cmp	r3, #0
   19af0:	0a000021 	beq	19b7c <CTransportLayer::Bind(unsigned short, int)+0x104>
   19af4:	e5963004 	ldr	r3, [r6, #4]
   19af8:	e3530000 	cmp	r3, #0
   19afc:	0a000022 	beq	19b8c <CTransportLayer::Bind(unsigned short, int)+0x114>
   19b00:	e3a00048 	mov	r0, #72	; 0x48
   19b04:	eb00452f 	bl	2afc8 <operator new(unsigned int)>
   19b08:	e8960006 	ldm	r6, {r1, r2}
   19b0c:	e1a03007 	mov	r3, r7
   19b10:	e1a07000 	mov	r7, r0
   19b14:	eb001129 	bl	1dfc0 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   19b18:	e1a01004 	mov	r1, r4
   19b1c:	e1a00005 	mov	r0, r5
   19b20:	eb003742 	bl	27830 <CPtrArray::operator[](unsigned int)>
   19b24:	e1a01004 	mov	r1, r4
   19b28:	e5807000 	str	r7, [r0]
   19b2c:	e1a00005 	mov	r0, r5
   19b30:	eb00373e 	bl	27830 <CPtrArray::operator[](unsigned int)>
   19b34:	e5903000 	ldr	r3, [r0]
   19b38:	e3530000 	cmp	r3, #0
   19b3c:	0a000016 	beq	19b9c <CTransportLayer::Bind(unsigned short, int)+0x124>
   19b40:	e596301c 	ldr	r3, [r6, #28]
   19b44:	e3530000 	cmp	r3, #0
   19b48:	1a000001 	bne	19b54 <CTransportLayer::Bind(unsigned short, int)+0xdc>
   19b4c:	e1a00004 	mov	r0, r4
   19b50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19b54:	eb004872 	bl	2bd24 <LeaveCritical>
   19b58:	e1a00004 	mov	r0, r4
   19b5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19b60:	e3a01000 	mov	r1, #0
   19b64:	e1a00005 	mov	r0, r5
   19b68:	eb003768 	bl	27910 <CPtrArray::Append(void*)>
   19b6c:	e1a04000 	mov	r4, r0
   19b70:	eaffffda 	b	19ae0 <CTransportLayer::Bind(unsigned short, int)+0x68>
   19b74:	eb004840 	bl	2bc7c <EnterCritical>
   19b78:	eaffffc6 	b	19a98 <CTransportLayer::Bind(unsigned short, int)+0x20>
   19b7c:	e3a020ad 	mov	r2, #173	; 0xad
   19b80:	e59f1048 	ldr	r1, [pc, #72]	; 19bd0 <CTransportLayer::Bind(unsigned short, int)+0x158>
   19b84:	e59f0048 	ldr	r0, [pc, #72]	; 19bd4 <CTransportLayer::Bind(unsigned short, int)+0x15c>
   19b88:	eb002b06 	bl	247a8 <assertion_failed>
   19b8c:	e3a020ae 	mov	r2, #174	; 0xae
   19b90:	e59f1038 	ldr	r1, [pc, #56]	; 19bd0 <CTransportLayer::Bind(unsigned short, int)+0x158>
   19b94:	e59f003c 	ldr	r0, [pc, #60]	; 19bd8 <CTransportLayer::Bind(unsigned short, int)+0x160>
   19b98:	eb002b02 	bl	247a8 <assertion_failed>
   19b9c:	e3a020b0 	mov	r2, #176	; 0xb0
   19ba0:	e59f1028 	ldr	r1, [pc, #40]	; 19bd0 <CTransportLayer::Bind(unsigned short, int)+0x158>
   19ba4:	e59f0030 	ldr	r0, [pc, #48]	; 19bdc <CTransportLayer::Bind(unsigned short, int)+0x164>
   19ba8:	eb002afe 	bl	247a8 <assertion_failed>
   19bac:	e596301c 	ldr	r3, [r6, #28]
   19bb0:	e3530000 	cmp	r3, #0
   19bb4:	1a000001 	bne	19bc0 <CTransportLayer::Bind(unsigned short, int)+0x148>
   19bb8:	e3e00000 	mvn	r0, #0
   19bbc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19bc0:	eb004857 	bl	2bd24 <LeaveCritical>
   19bc4:	eafffffb 	b	19bb8 <CTransportLayer::Bind(unsigned short, int)+0x140>
   19bc8:	e3e00000 	mvn	r0, #0
   19bcc:	e12fff1e 	bx	lr
   19bd0:	000453c8 	.word	0x000453c8
   19bd4:	000453dc 	.word	0x000453dc
   19bd8:	000453f0 	.word	0x000453f0
   19bdc:	00045408 	.word	0x00045408

00019be0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>:
   19be0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19be4:	e1a07000 	mov	r7, r0
   19be8:	e590001c 	ldr	r0, [r0, #28]
   19bec:	e24dd014 	sub	sp, sp, #20
   19bf0:	e3500000 	cmp	r0, #0
   19bf4:	e1a05003 	mov	r5, r3
   19bf8:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
   19bfc:	e58d1008 	str	r1, [sp, #8]
   19c00:	e58d200c 	str	r2, [sp, #12]
   19c04:	1a000070 	bne	19dcc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1ec>
   19c08:	e3a06000 	mov	r6, #0
   19c0c:	e2874008 	add	r4, r7, #8
   19c10:	ea000006 	b	19c30 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x50>
   19c14:	e1a01006 	mov	r1, r6
   19c18:	e1a00004 	mov	r0, r4
   19c1c:	eb003703 	bl	27830 <CPtrArray::operator[](unsigned int)>
   19c20:	e5903000 	ldr	r3, [r0]
   19c24:	e3530000 	cmp	r3, #0
   19c28:	0a000004 	beq	19c40 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x60>
   19c2c:	e2866001 	add	r6, r6, #1
   19c30:	e1a00004 	mov	r0, r4
   19c34:	eb0036fb 	bl	27828 <CPtrArray::GetCount() const>
   19c38:	e1500006 	cmp	r0, r6
   19c3c:	8afffff4 	bhi	19c14 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x34>
   19c40:	e1a00004 	mov	r0, r4
   19c44:	eb0036f7 	bl	27828 <CPtrArray::GetCount() const>
   19c48:	e1500006 	cmp	r0, r6
   19c4c:	9a000059 	bls	19db8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1d8>
   19c50:	e3550000 	cmp	r5, #0
   19c54:	1a000026 	bne	19cf4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x114>
   19c58:	e59f9204 	ldr	r9, [pc, #516]	; 19e64 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x284>
   19c5c:	e59fb204 	ldr	fp, [pc, #516]	; 19e68 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   19c60:	e1d751b8 	ldrh	r5, [r7, #24]
   19c64:	e3a0a000 	mov	sl, #0
   19c68:	e2853001 	add	r3, r5, #1
   19c6c:	e6ff3073 	uxth	r3, r3
   19c70:	e1530009 	cmp	r3, r9
   19c74:	91c731b8 	strhls	r3, [r7, #24]
   19c78:	81c7b1b8 	strhhi	fp, [r7, #24]
   19c7c:	ea000000 	b	19c84 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   19c80:	e28aa001 	add	sl, sl, #1
   19c84:	e1a00004 	mov	r0, r4
   19c88:	eb0036e6 	bl	27828 <CPtrArray::GetCount() const>
   19c8c:	e150000a 	cmp	r0, sl
   19c90:	9a000013 	bls	19ce4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x104>
   19c94:	e1a0100a 	mov	r1, sl
   19c98:	e1a00004 	mov	r0, r4
   19c9c:	eb0036e3 	bl	27830 <CPtrArray::operator[](unsigned int)>
   19ca0:	e5903000 	ldr	r3, [r0]
   19ca4:	e3530000 	cmp	r3, #0
   19ca8:	0afffff4 	beq	19c80 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19cac:	e1a0100a 	mov	r1, sl
   19cb0:	e1a00004 	mov	r0, r4
   19cb4:	eb0036dd 	bl	27830 <CPtrArray::operator[](unsigned int)>
   19cb8:	e5900000 	ldr	r0, [r0]
   19cbc:	eb000e46 	bl	1d5dc <CNetConnection::GetOwnPort() const>
   19cc0:	e1500005 	cmp	r0, r5
   19cc4:	1affffed 	bne	19c80 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19cc8:	e1a0100a 	mov	r1, sl
   19ccc:	e1a00004 	mov	r0, r4
   19cd0:	eb0036d6 	bl	27830 <CPtrArray::operator[](unsigned int)>
   19cd4:	e5900000 	ldr	r0, [r0]
   19cd8:	eb000e49 	bl	1d604 <CNetConnection::GetProtocol() const>
   19cdc:	e1500008 	cmp	r0, r8
   19ce0:	1affffe6 	bne	19c80 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19ce4:	e1a00004 	mov	r0, r4
   19ce8:	eb0036ce 	bl	27828 <CPtrArray::GetCount() const>
   19cec:	e150000a 	cmp	r0, sl
   19cf0:	8affffda 	bhi	19c60 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x80>
   19cf4:	e5973000 	ldr	r3, [r7]
   19cf8:	e3530000 	cmp	r3, #0
   19cfc:	0a00004c 	beq	19e34 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x254>
   19d00:	e5973004 	ldr	r3, [r7, #4]
   19d04:	e3530000 	cmp	r3, #0
   19d08:	0a00004d 	beq	19e44 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x264>
   19d0c:	e3580006 	cmp	r8, #6
   19d10:	0a00002f 	beq	19dd4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1f4>
   19d14:	e3580011 	cmp	r8, #17
   19d18:	1a000021 	bne	19da4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1c4>
   19d1c:	e3a00048 	mov	r0, #72	; 0x48
   19d20:	eb0044a8 	bl	2afc8 <operator new(unsigned int)>
   19d24:	e59d300c 	ldr	r3, [sp, #12]
   19d28:	e58d5004 	str	r5, [sp, #4]
   19d2c:	e58d3000 	str	r3, [sp]
   19d30:	e8970006 	ldm	r7, {r1, r2}
   19d34:	e59d3008 	ldr	r3, [sp, #8]
   19d38:	e1a05000 	mov	r5, r0
   19d3c:	eb001084 	bl	1df54 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   19d40:	e1a01006 	mov	r1, r6
   19d44:	e1a00004 	mov	r0, r4
   19d48:	eb0036b8 	bl	27830 <CPtrArray::operator[](unsigned int)>
   19d4c:	e597301c 	ldr	r3, [r7, #28]
   19d50:	e5805000 	str	r5, [r0]
   19d54:	e3530000 	cmp	r3, #0
   19d58:	1a00002d 	bne	19e14 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x234>
   19d5c:	e1a01006 	mov	r1, r6
   19d60:	e1a00004 	mov	r0, r4
   19d64:	eb0036b1 	bl	27830 <CPtrArray::operator[](unsigned int)>
   19d68:	e5903000 	ldr	r3, [r0]
   19d6c:	e3530000 	cmp	r3, #0
   19d70:	0a000037 	beq	19e54 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x274>
   19d74:	e1a00004 	mov	r0, r4
   19d78:	e1a01006 	mov	r1, r6
   19d7c:	eb0036ab 	bl	27830 <CPtrArray::operator[](unsigned int)>
   19d80:	e5900000 	ldr	r0, [r0]
   19d84:	e59f20e0 	ldr	r2, [pc, #224]	; 19e6c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28c>
   19d88:	e5903000 	ldr	r3, [r0]
   19d8c:	e5933008 	ldr	r3, [r3, #8]
   19d90:	e1530002 	cmp	r3, r2
   19d94:	1a000020 	bne	19e1c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x23c>
   19d98:	e3e00000 	mvn	r0, #0
   19d9c:	e28dd014 	add	sp, sp, #20
   19da0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19da4:	e597301c 	ldr	r3, [r7, #28]
   19da8:	e3530000 	cmp	r3, #0
   19dac:	0afffff9 	beq	19d98 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1b8>
   19db0:	eb0047db 	bl	2bd24 <LeaveCritical>
   19db4:	eafffff7 	b	19d98 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1b8>
   19db8:	e3a01000 	mov	r1, #0
   19dbc:	e1a00004 	mov	r0, r4
   19dc0:	eb0036d2 	bl	27910 <CPtrArray::Append(void*)>
   19dc4:	e1a06000 	mov	r6, r0
   19dc8:	eaffffa0 	b	19c50 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x70>
   19dcc:	eb0047aa 	bl	2bc7c <EnterCritical>
   19dd0:	eaffff8c 	b	19c08 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28>
   19dd4:	e3a000e0 	mov	r0, #224	; 0xe0
   19dd8:	eb00447a 	bl	2afc8 <operator new(unsigned int)>
   19ddc:	e59d300c 	ldr	r3, [sp, #12]
   19de0:	e58d5004 	str	r5, [sp, #4]
   19de4:	e58d3000 	str	r3, [sp]
   19de8:	e8970006 	ldm	r7, {r1, r2}
   19dec:	e59d3008 	ldr	r3, [sp, #8]
   19df0:	e1a05000 	mov	r5, r0
   19df4:	eb0012de 	bl	1e974 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   19df8:	e1a01006 	mov	r1, r6
   19dfc:	e1a00004 	mov	r0, r4
   19e00:	eb00368a 	bl	27830 <CPtrArray::operator[](unsigned int)>
   19e04:	e597301c 	ldr	r3, [r7, #28]
   19e08:	e5805000 	str	r5, [r0]
   19e0c:	e3530000 	cmp	r3, #0
   19e10:	0affffd1 	beq	19d5c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x17c>
   19e14:	eb0047c2 	bl	2bd24 <LeaveCritical>
   19e18:	eaffffcf 	b	19d5c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x17c>
   19e1c:	e12fff33 	blx	r3
   19e20:	e3500000 	cmp	r0, #0
   19e24:	baffffdb 	blt	19d98 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1b8>
   19e28:	e1a00006 	mov	r0, r6
   19e2c:	e28dd014 	add	sp, sp, #20
   19e30:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e34:	e3a020e1 	mov	r2, #225	; 0xe1
   19e38:	e59f1030 	ldr	r1, [pc, #48]	; 19e70 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x290>
   19e3c:	e59f0030 	ldr	r0, [pc, #48]	; 19e74 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x294>
   19e40:	eb002a58 	bl	247a8 <assertion_failed>
   19e44:	e3a020e2 	mov	r2, #226	; 0xe2
   19e48:	e59f1020 	ldr	r1, [pc, #32]	; 19e70 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x290>
   19e4c:	e59f0024 	ldr	r0, [pc, #36]	; 19e78 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x298>
   19e50:	eb002a54 	bl	247a8 <assertion_failed>
   19e54:	e3a020f4 	mov	r2, #244	; 0xf4
   19e58:	e59f1010 	ldr	r1, [pc, #16]	; 19e70 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x290>
   19e5c:	e59f0018 	ldr	r0, [pc, #24]	; 19e7c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x29c>
   19e60:	eb002a50 	bl	247a8 <assertion_failed>
   19e64:	0000ee47 	.word	0x0000ee47
   19e68:	ffffea60 	.word	0xffffea60
   19e6c:	0001a9a0 	.word	0x0001a9a0
   19e70:	000453c8 	.word	0x000453c8
   19e74:	000453dc 	.word	0x000453dc
   19e78:	000453f0 	.word	0x000453f0
   19e7c:	00045408 	.word	0x00045408

00019e80 <CTransportLayer::Listen(unsigned short, int)>:
   19e80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19e84:	e1a06000 	mov	r6, r0
   19e88:	e590001c 	ldr	r0, [r0, #28]
   19e8c:	e1a07001 	mov	r7, r1
   19e90:	e3500000 	cmp	r0, #0
   19e94:	e1a08002 	mov	r8, r2
   19e98:	1a000038 	bne	19f80 <CTransportLayer::Listen(unsigned short, int)+0x100>
   19e9c:	e3a04000 	mov	r4, #0
   19ea0:	e2865008 	add	r5, r6, #8
   19ea4:	ea000006 	b	19ec4 <CTransportLayer::Listen(unsigned short, int)+0x44>
   19ea8:	e1a01004 	mov	r1, r4
   19eac:	e1a00005 	mov	r0, r5
   19eb0:	eb00365e 	bl	27830 <CPtrArray::operator[](unsigned int)>
   19eb4:	e5903000 	ldr	r3, [r0]
   19eb8:	e3530000 	cmp	r3, #0
   19ebc:	0a000004 	beq	19ed4 <CTransportLayer::Listen(unsigned short, int)+0x54>
   19ec0:	e2844001 	add	r4, r4, #1
   19ec4:	e1a00005 	mov	r0, r5
   19ec8:	eb003656 	bl	27828 <CPtrArray::GetCount() const>
   19ecc:	e1500004 	cmp	r0, r4
   19ed0:	8afffff4 	bhi	19ea8 <CTransportLayer::Listen(unsigned short, int)+0x28>
   19ed4:	e1a00005 	mov	r0, r5
   19ed8:	eb003652 	bl	27828 <CPtrArray::GetCount() const>
   19edc:	e1500004 	cmp	r0, r4
   19ee0:	9a000021 	bls	19f6c <CTransportLayer::Listen(unsigned short, int)+0xec>
   19ee4:	e3570000 	cmp	r7, #0
   19ee8:	0a000032 	beq	19fb8 <CTransportLayer::Listen(unsigned short, int)+0x138>
   19eec:	e3580006 	cmp	r8, #6
   19ef0:	1a000030 	bne	19fb8 <CTransportLayer::Listen(unsigned short, int)+0x138>
   19ef4:	e5963000 	ldr	r3, [r6]
   19ef8:	e3530000 	cmp	r3, #0
   19efc:	0a000021 	beq	19f88 <CTransportLayer::Listen(unsigned short, int)+0x108>
   19f00:	e5963004 	ldr	r3, [r6, #4]
   19f04:	e3530000 	cmp	r3, #0
   19f08:	0a000022 	beq	19f98 <CTransportLayer::Listen(unsigned short, int)+0x118>
   19f0c:	e3a000e0 	mov	r0, #224	; 0xe0
   19f10:	eb00442c 	bl	2afc8 <operator new(unsigned int)>
   19f14:	e8960006 	ldm	r6, {r1, r2}
   19f18:	e1a03007 	mov	r3, r7
   19f1c:	e1a07000 	mov	r7, r0
   19f20:	eb0010dc 	bl	1e298 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   19f24:	e1a01004 	mov	r1, r4
   19f28:	e1a00005 	mov	r0, r5
   19f2c:	eb00363f 	bl	27830 <CPtrArray::operator[](unsigned int)>
   19f30:	e1a01004 	mov	r1, r4
   19f34:	e5807000 	str	r7, [r0]
   19f38:	e1a00005 	mov	r0, r5
   19f3c:	eb00363b 	bl	27830 <CPtrArray::operator[](unsigned int)>
   19f40:	e5903000 	ldr	r3, [r0]
   19f44:	e3530000 	cmp	r3, #0
   19f48:	0a000016 	beq	19fa8 <CTransportLayer::Listen(unsigned short, int)+0x128>
   19f4c:	e596301c 	ldr	r3, [r6, #28]
   19f50:	e3530000 	cmp	r3, #0
   19f54:	1a000001 	bne	19f60 <CTransportLayer::Listen(unsigned short, int)+0xe0>
   19f58:	e1a00004 	mov	r0, r4
   19f5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19f60:	eb00476f 	bl	2bd24 <LeaveCritical>
   19f64:	e1a00004 	mov	r0, r4
   19f68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19f6c:	e3a01000 	mov	r1, #0
   19f70:	e1a00005 	mov	r0, r5
   19f74:	eb003665 	bl	27910 <CPtrArray::Append(void*)>
   19f78:	e1a04000 	mov	r4, r0
   19f7c:	eaffffd8 	b	19ee4 <CTransportLayer::Listen(unsigned short, int)+0x64>
   19f80:	eb00473d 	bl	2bc7c <EnterCritical>
   19f84:	eaffffc4 	b	19e9c <CTransportLayer::Listen(unsigned short, int)+0x1c>
   19f88:	e59f2048 	ldr	r2, [pc, #72]	; 19fd8 <CTransportLayer::Listen(unsigned short, int)+0x158>
   19f8c:	e59f1048 	ldr	r1, [pc, #72]	; 19fdc <CTransportLayer::Listen(unsigned short, int)+0x15c>
   19f90:	e59f0048 	ldr	r0, [pc, #72]	; 19fe0 <CTransportLayer::Listen(unsigned short, int)+0x160>
   19f94:	eb002a03 	bl	247a8 <assertion_failed>
   19f98:	e59f2044 	ldr	r2, [pc, #68]	; 19fe4 <CTransportLayer::Listen(unsigned short, int)+0x164>
   19f9c:	e59f1038 	ldr	r1, [pc, #56]	; 19fdc <CTransportLayer::Listen(unsigned short, int)+0x15c>
   19fa0:	e59f0040 	ldr	r0, [pc, #64]	; 19fe8 <CTransportLayer::Listen(unsigned short, int)+0x168>
   19fa4:	eb0029ff 	bl	247a8 <assertion_failed>
   19fa8:	e59f203c 	ldr	r2, [pc, #60]	; 19fec <CTransportLayer::Listen(unsigned short, int)+0x16c>
   19fac:	e59f1028 	ldr	r1, [pc, #40]	; 19fdc <CTransportLayer::Listen(unsigned short, int)+0x15c>
   19fb0:	e59f0038 	ldr	r0, [pc, #56]	; 19ff0 <CTransportLayer::Listen(unsigned short, int)+0x170>
   19fb4:	eb0029fb 	bl	247a8 <assertion_failed>
   19fb8:	e596301c 	ldr	r3, [r6, #28]
   19fbc:	e3530000 	cmp	r3, #0
   19fc0:	1a000001 	bne	19fcc <CTransportLayer::Listen(unsigned short, int)+0x14c>
   19fc4:	e3e00000 	mvn	r0, #0
   19fc8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19fcc:	eb004754 	bl	2bd24 <LeaveCritical>
   19fd0:	e3e00000 	mvn	r0, #0
   19fd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19fd8:	0000011e 	.word	0x0000011e
   19fdc:	000453c8 	.word	0x000453c8
   19fe0:	000453dc 	.word	0x000453dc
   19fe4:	0000011f 	.word	0x0000011f
   19fe8:	000453f0 	.word	0x000453f0
   19fec:	00000121 	.word	0x00000121
   19ff0:	00045408 	.word	0x00045408

00019ff4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>:
   19ff4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19ff8:	e2535000 	subs	r5, r3, #0
   19ffc:	ba00001f 	blt	1a080 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x8c>
   1a000:	e2804008 	add	r4, r0, #8
   1a004:	e1a00004 	mov	r0, r4
   1a008:	e1a06001 	mov	r6, r1
   1a00c:	e1a07002 	mov	r7, r2
   1a010:	eb003604 	bl	27828 <CPtrArray::GetCount() const>
   1a014:	e1500005 	cmp	r0, r5
   1a018:	da000012 	ble	1a068 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x74>
   1a01c:	e1a01005 	mov	r1, r5
   1a020:	e1a00004 	mov	r0, r4
   1a024:	eb003601 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a028:	e5903000 	ldr	r3, [r0]
   1a02c:	e3530000 	cmp	r3, #0
   1a030:	0a00000c 	beq	1a068 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x74>
   1a034:	e3560000 	cmp	r6, #0
   1a038:	0a000014 	beq	1a090 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x9c>
   1a03c:	e3570000 	cmp	r7, #0
   1a040:	0a000016 	beq	1a0a0 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xac>
   1a044:	e1a01005 	mov	r1, r5
   1a048:	e1a00004 	mov	r0, r4
   1a04c:	eb0035f7 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a050:	e5900000 	ldr	r0, [r0]
   1a054:	e59f2054 	ldr	r2, [pc, #84]	; 1a0b0 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xbc>
   1a058:	e5903000 	ldr	r3, [r0]
   1a05c:	e593300c 	ldr	r3, [r3, #12]
   1a060:	e1530002 	cmp	r3, r2
   1a064:	1a000001 	bne	1a070 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x7c>
   1a068:	e3e00000 	mvn	r0, #0
   1a06c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a070:	e1a02007 	mov	r2, r7
   1a074:	e1a01006 	mov	r1, r6
   1a078:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a07c:	e12fff13 	bx	r3
   1a080:	e59f202c 	ldr	r2, [pc, #44]	; 1a0b4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc0>
   1a084:	e59f102c 	ldr	r1, [pc, #44]	; 1a0b8 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   1a088:	e59f002c 	ldr	r0, [pc, #44]	; 1a0bc <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc8>
   1a08c:	eb0029c5 	bl	247a8 <assertion_failed>
   1a090:	e59f2028 	ldr	r2, [pc, #40]	; 1a0c0 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xcc>
   1a094:	e59f101c 	ldr	r1, [pc, #28]	; 1a0b8 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   1a098:	e59f0024 	ldr	r0, [pc, #36]	; 1a0c4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xd0>
   1a09c:	eb0029c1 	bl	247a8 <assertion_failed>
   1a0a0:	e59f2020 	ldr	r2, [pc, #32]	; 1a0c8 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xd4>
   1a0a4:	e59f100c 	ldr	r1, [pc, #12]	; 1a0b8 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   1a0a8:	e59f001c 	ldr	r0, [pc, #28]	; 1a0cc <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xd8>
   1a0ac:	eb0029bd 	bl	247a8 <assertion_failed>
   1a0b0:	0001a9a8 	.word	0x0001a9a8
   1a0b4:	0000012a 	.word	0x0000012a
   1a0b8:	000453c8 	.word	0x000453c8
   1a0bc:	00045420 	.word	0x00045420
   1a0c0:	00000131 	.word	0x00000131
   1a0c4:	00045434 	.word	0x00045434
   1a0c8:	00000132 	.word	0x00000132
   1a0cc:	00045444 	.word	0x00045444

0001a0d0 <CTransportLayer::Disconnect(int)>:
   1a0d0:	e92d4070 	push	{r4, r5, r6, lr}
   1a0d4:	e2515000 	subs	r5, r1, #0
   1a0d8:	ba000017 	blt	1a13c <CTransportLayer::Disconnect(int)+0x6c>
   1a0dc:	e2804008 	add	r4, r0, #8
   1a0e0:	e1a00004 	mov	r0, r4
   1a0e4:	eb0035cf 	bl	27828 <CPtrArray::GetCount() const>
   1a0e8:	e1500005 	cmp	r0, r5
   1a0ec:	da00000e 	ble	1a12c <CTransportLayer::Disconnect(int)+0x5c>
   1a0f0:	e1a01005 	mov	r1, r5
   1a0f4:	e1a00004 	mov	r0, r4
   1a0f8:	eb0035cc 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a0fc:	e5903000 	ldr	r3, [r0]
   1a100:	e3530000 	cmp	r3, #0
   1a104:	0a000008 	beq	1a12c <CTransportLayer::Disconnect(int)+0x5c>
   1a108:	e1a01005 	mov	r1, r5
   1a10c:	e1a00004 	mov	r0, r4
   1a110:	eb0035c6 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a114:	e5900000 	ldr	r0, [r0]
   1a118:	e59f202c 	ldr	r2, [pc, #44]	; 1a14c <CTransportLayer::Disconnect(int)+0x7c>
   1a11c:	e5903000 	ldr	r3, [r0]
   1a120:	e5933010 	ldr	r3, [r3, #16]
   1a124:	e1530002 	cmp	r3, r2
   1a128:	1a000001 	bne	1a134 <CTransportLayer::Disconnect(int)+0x64>
   1a12c:	e3e00000 	mvn	r0, #0
   1a130:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a134:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a138:	e12fff13 	bx	r3
   1a13c:	e3a02f4e 	mov	r2, #312	; 0x138
   1a140:	e59f1008 	ldr	r1, [pc, #8]	; 1a150 <CTransportLayer::Disconnect(int)+0x80>
   1a144:	e59f0008 	ldr	r0, [pc, #8]	; 1a154 <CTransportLayer::Disconnect(int)+0x84>
   1a148:	eb002996 	bl	247a8 <assertion_failed>
   1a14c:	0001a9b0 	.word	0x0001a9b0
   1a150:	000453c8 	.word	0x000453c8
   1a154:	00045420 	.word	0x00045420

0001a158 <CTransportLayer::Send(void const*, unsigned int, int, int)>:
   1a158:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a15c:	e59d5018 	ldr	r5, [sp, #24]
   1a160:	e3550000 	cmp	r5, #0
   1a164:	ba000022 	blt	1a1f4 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x9c>
   1a168:	e2804008 	add	r4, r0, #8
   1a16c:	e1a00004 	mov	r0, r4
   1a170:	e1a06001 	mov	r6, r1
   1a174:	e1a08002 	mov	r8, r2
   1a178:	e1a07003 	mov	r7, r3
   1a17c:	eb0035a9 	bl	27828 <CPtrArray::GetCount() const>
   1a180:	e1500005 	cmp	r0, r5
   1a184:	da000012 	ble	1a1d4 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x7c>
   1a188:	e1a01005 	mov	r1, r5
   1a18c:	e1a00004 	mov	r0, r4
   1a190:	eb0035a6 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a194:	e5903000 	ldr	r3, [r0]
   1a198:	e3530000 	cmp	r3, #0
   1a19c:	0a00000c 	beq	1a1d4 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x7c>
   1a1a0:	e3560000 	cmp	r6, #0
   1a1a4:	0a000016 	beq	1a204 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xac>
   1a1a8:	e3580000 	cmp	r8, #0
   1a1ac:	0a000018 	beq	1a214 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xbc>
   1a1b0:	e1a01005 	mov	r1, r5
   1a1b4:	e1a00004 	mov	r0, r4
   1a1b8:	eb00359c 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a1bc:	e5900000 	ldr	r0, [r0]
   1a1c0:	e59f305c 	ldr	r3, [pc, #92]	; 1a224 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xcc>
   1a1c4:	e5902000 	ldr	r2, [r0]
   1a1c8:	e592e014 	ldr	lr, [r2, #20]
   1a1cc:	e15e0003 	cmp	lr, r3
   1a1d0:	1a000001 	bne	1a1dc <CTransportLayer::Send(void const*, unsigned int, int, int)+0x84>
   1a1d4:	e3e00000 	mvn	r0, #0
   1a1d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a1dc:	e1a03007 	mov	r3, r7
   1a1e0:	e1a02008 	mov	r2, r8
   1a1e4:	e1a01006 	mov	r1, r6
   1a1e8:	e1a0c00e 	mov	ip, lr
   1a1ec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a1f0:	e12fff1c 	bx	ip
   1a1f4:	e3a02f51 	mov	r2, #324	; 0x144
   1a1f8:	e59f1028 	ldr	r1, [pc, #40]	; 1a228 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd0>
   1a1fc:	e59f0028 	ldr	r0, [pc, #40]	; 1a22c <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd4>
   1a200:	eb002968 	bl	247a8 <assertion_failed>
   1a204:	e59f2024 	ldr	r2, [pc, #36]	; 1a230 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd8>
   1a208:	e59f1018 	ldr	r1, [pc, #24]	; 1a228 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd0>
   1a20c:	e59f0020 	ldr	r0, [pc, #32]	; 1a234 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xdc>
   1a210:	eb002964 	bl	247a8 <assertion_failed>
   1a214:	e3a02f53 	mov	r2, #332	; 0x14c
   1a218:	e59f1008 	ldr	r1, [pc, #8]	; 1a228 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd0>
   1a21c:	e59f0014 	ldr	r0, [pc, #20]	; 1a238 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xe0>
   1a220:	eb002960 	bl	247a8 <assertion_failed>
   1a224:	0001a9b8 	.word	0x0001a9b8
   1a228:	000453c8 	.word	0x000453c8
   1a22c:	00045420 	.word	0x00045420
   1a230:	0000014b 	.word	0x0000014b
   1a234:	00045458 	.word	0x00045458
   1a238:	00045464 	.word	0x00045464

0001a23c <CTransportLayer::Receive(void*, int, int)>:
   1a23c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a240:	e2535000 	subs	r5, r3, #0
   1a244:	ba00001d 	blt	1a2c0 <CTransportLayer::Receive(void*, int, int)+0x84>
   1a248:	e2804008 	add	r4, r0, #8
   1a24c:	e1a00004 	mov	r0, r4
   1a250:	e1a06001 	mov	r6, r1
   1a254:	e1a07002 	mov	r7, r2
   1a258:	eb003572 	bl	27828 <CPtrArray::GetCount() const>
   1a25c:	e1500005 	cmp	r0, r5
   1a260:	da000010 	ble	1a2a8 <CTransportLayer::Receive(void*, int, int)+0x6c>
   1a264:	e1a01005 	mov	r1, r5
   1a268:	e1a00004 	mov	r0, r4
   1a26c:	eb00356f 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a270:	e5903000 	ldr	r3, [r0]
   1a274:	e3530000 	cmp	r3, #0
   1a278:	0a00000a 	beq	1a2a8 <CTransportLayer::Receive(void*, int, int)+0x6c>
   1a27c:	e3560000 	cmp	r6, #0
   1a280:	0a000012 	beq	1a2d0 <CTransportLayer::Receive(void*, int, int)+0x94>
   1a284:	e1a01005 	mov	r1, r5
   1a288:	e1a00004 	mov	r0, r4
   1a28c:	eb003567 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a290:	e5900000 	ldr	r0, [r0]
   1a294:	e59f2044 	ldr	r2, [pc, #68]	; 1a2e0 <CTransportLayer::Receive(void*, int, int)+0xa4>
   1a298:	e5903000 	ldr	r3, [r0]
   1a29c:	e5933018 	ldr	r3, [r3, #24]
   1a2a0:	e1530002 	cmp	r3, r2
   1a2a4:	1a000001 	bne	1a2b0 <CTransportLayer::Receive(void*, int, int)+0x74>
   1a2a8:	e3e00000 	mvn	r0, #0
   1a2ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a2b0:	e1a02007 	mov	r2, r7
   1a2b4:	e1a01006 	mov	r1, r6
   1a2b8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a2bc:	e12fff13 	bx	r3
   1a2c0:	e59f201c 	ldr	r2, [pc, #28]	; 1a2e4 <CTransportLayer::Receive(void*, int, int)+0xa8>
   1a2c4:	e59f101c 	ldr	r1, [pc, #28]	; 1a2e8 <CTransportLayer::Receive(void*, int, int)+0xac>
   1a2c8:	e59f001c 	ldr	r0, [pc, #28]	; 1a2ec <CTransportLayer::Receive(void*, int, int)+0xb0>
   1a2cc:	eb002935 	bl	247a8 <assertion_failed>
   1a2d0:	e59f2018 	ldr	r2, [pc, #24]	; 1a2f0 <CTransportLayer::Receive(void*, int, int)+0xb4>
   1a2d4:	e59f100c 	ldr	r1, [pc, #12]	; 1a2e8 <CTransportLayer::Receive(void*, int, int)+0xac>
   1a2d8:	e59f0014 	ldr	r0, [pc, #20]	; 1a2f4 <CTransportLayer::Receive(void*, int, int)+0xb8>
   1a2dc:	eb002931 	bl	247a8 <assertion_failed>
   1a2e0:	0001a9c0 	.word	0x0001a9c0
   1a2e4:	00000152 	.word	0x00000152
   1a2e8:	000453c8 	.word	0x000453c8
   1a2ec:	00045420 	.word	0x00045420
   1a2f0:	00000159 	.word	0x00000159
   1a2f4:	0004256c 	.word	0x0004256c

0001a2f8 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>:
   1a2f8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a2fc:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   1a300:	e59d9020 	ldr	r9, [sp, #32]
   1a304:	e3550000 	cmp	r5, #0
   1a308:	e1dda2b4 	ldrh	sl, [sp, #36]	; 0x24
   1a30c:	ba000024 	blt	1a3a4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xac>
   1a310:	e2804008 	add	r4, r0, #8
   1a314:	e1a00004 	mov	r0, r4
   1a318:	e1a06001 	mov	r6, r1
   1a31c:	e1a08002 	mov	r8, r2
   1a320:	e1a07003 	mov	r7, r3
   1a324:	eb00353f 	bl	27828 <CPtrArray::GetCount() const>
   1a328:	e1500005 	cmp	r0, r5
   1a32c:	da000012 	ble	1a37c <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x84>
   1a330:	e1a01005 	mov	r1, r5
   1a334:	e1a00004 	mov	r0, r4
   1a338:	eb00353c 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a33c:	e5903000 	ldr	r3, [r0]
   1a340:	e3530000 	cmp	r3, #0
   1a344:	0a00000c 	beq	1a37c <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x84>
   1a348:	e3560000 	cmp	r6, #0
   1a34c:	0a000018 	beq	1a3b4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xbc>
   1a350:	e3580000 	cmp	r8, #0
   1a354:	0a00001a 	beq	1a3c4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xcc>
   1a358:	e1a01005 	mov	r1, r5
   1a35c:	e1a00004 	mov	r0, r4
   1a360:	eb003532 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a364:	e5900000 	ldr	r0, [r0]
   1a368:	e59f3064 	ldr	r3, [pc, #100]	; 1a3d4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xdc>
   1a36c:	e5902000 	ldr	r2, [r0]
   1a370:	e592e01c 	ldr	lr, [r2, #28]
   1a374:	e15e0003 	cmp	lr, r3
   1a378:	1a000001 	bne	1a384 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x8c>
   1a37c:	e3e00000 	mvn	r0, #0
   1a380:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a384:	e1a03007 	mov	r3, r7
   1a388:	e1a02008 	mov	r2, r8
   1a38c:	e1a01006 	mov	r1, r6
   1a390:	e1a0c00e 	mov	ip, lr
   1a394:	e58da024 	str	sl, [sp, #36]	; 0x24
   1a398:	e58d9020 	str	r9, [sp, #32]
   1a39c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a3a0:	e12fff1c 	bx	ip
   1a3a4:	e3a02e16 	mov	r2, #352	; 0x160
   1a3a8:	e59f1028 	ldr	r1, [pc, #40]	; 1a3d8 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   1a3ac:	e59f0028 	ldr	r0, [pc, #40]	; 1a3dc <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe4>
   1a3b0:	eb0028fc 	bl	247a8 <assertion_failed>
   1a3b4:	e59f2024 	ldr	r2, [pc, #36]	; 1a3e0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe8>
   1a3b8:	e59f1018 	ldr	r1, [pc, #24]	; 1a3d8 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   1a3bc:	e59f0020 	ldr	r0, [pc, #32]	; 1a3e4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xec>
   1a3c0:	eb0028f8 	bl	247a8 <assertion_failed>
   1a3c4:	e3a02f5a 	mov	r2, #360	; 0x168
   1a3c8:	e59f1008 	ldr	r1, [pc, #8]	; 1a3d8 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   1a3cc:	e59f0014 	ldr	r0, [pc, #20]	; 1a3e8 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xf0>
   1a3d0:	eb0028f4 	bl	247a8 <assertion_failed>
   1a3d4:	0001a9c8 	.word	0x0001a9c8
   1a3d8:	000453c8 	.word	0x000453c8
   1a3dc:	00045420 	.word	0x00045420
   1a3e0:	00000167 	.word	0x00000167
   1a3e4:	00045458 	.word	0x00045458
   1a3e8:	00045464 	.word	0x00045464

0001a3ec <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>:
   1a3ec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a3f0:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1a3f4:	e59d9020 	ldr	r9, [sp, #32]
   1a3f8:	e3550000 	cmp	r5, #0
   1a3fc:	ba000021 	blt	1a488 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x9c>
   1a400:	e2804008 	add	r4, r0, #8
   1a404:	e1a00004 	mov	r0, r4
   1a408:	e1a06001 	mov	r6, r1
   1a40c:	e1a08002 	mov	r8, r2
   1a410:	e1a07003 	mov	r7, r3
   1a414:	eb003503 	bl	27828 <CPtrArray::GetCount() const>
   1a418:	e1500005 	cmp	r0, r5
   1a41c:	da000010 	ble	1a464 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x78>
   1a420:	e1a01005 	mov	r1, r5
   1a424:	e1a00004 	mov	r0, r4
   1a428:	eb003500 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a42c:	e5903000 	ldr	r3, [r0]
   1a430:	e3530000 	cmp	r3, #0
   1a434:	0a00000a 	beq	1a464 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x78>
   1a438:	e3560000 	cmp	r6, #0
   1a43c:	0a000015 	beq	1a498 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xac>
   1a440:	e1a01005 	mov	r1, r5
   1a444:	e1a00004 	mov	r0, r4
   1a448:	eb0034f8 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a44c:	e5900000 	ldr	r0, [r0]
   1a450:	e59f3050 	ldr	r3, [pc, #80]	; 1a4a8 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xbc>
   1a454:	e5902000 	ldr	r2, [r0]
   1a458:	e592e020 	ldr	lr, [r2, #32]
   1a45c:	e15e0003 	cmp	lr, r3
   1a460:	1a000001 	bne	1a46c <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x80>
   1a464:	e3e00000 	mvn	r0, #0
   1a468:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a46c:	e1a03007 	mov	r3, r7
   1a470:	e1a02008 	mov	r2, r8
   1a474:	e1a01006 	mov	r1, r6
   1a478:	e1a0c00e 	mov	ip, lr
   1a47c:	e58d9020 	str	r9, [sp, #32]
   1a480:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a484:	e12fff1c 	bx	ip
   1a488:	e3a02e17 	mov	r2, #368	; 0x170
   1a48c:	e59f1018 	ldr	r1, [pc, #24]	; 1a4ac <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xc0>
   1a490:	e59f0018 	ldr	r0, [pc, #24]	; 1a4b0 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xc4>
   1a494:	eb0028c3 	bl	247a8 <assertion_failed>
   1a498:	e59f2014 	ldr	r2, [pc, #20]	; 1a4b4 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xc8>
   1a49c:	e59f1008 	ldr	r1, [pc, #8]	; 1a4ac <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xc0>
   1a4a0:	e59f0010 	ldr	r0, [pc, #16]	; 1a4b8 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xcc>
   1a4a4:	eb0028bf 	bl	247a8 <assertion_failed>
   1a4a8:	0001a9d0 	.word	0x0001a9d0
   1a4ac:	000453c8 	.word	0x000453c8
   1a4b0:	00045420 	.word	0x00045420
   1a4b4:	00000177 	.word	0x00000177
   1a4b8:	0004256c 	.word	0x0004256c

0001a4bc <CTransportLayer::SetOptionBroadcast(bool, int)>:
   1a4bc:	e92d4070 	push	{r4, r5, r6, lr}
   1a4c0:	e2525000 	subs	r5, r2, #0
   1a4c4:	ba000019 	blt	1a530 <CTransportLayer::SetOptionBroadcast(bool, int)+0x74>
   1a4c8:	e2804008 	add	r4, r0, #8
   1a4cc:	e1a00004 	mov	r0, r4
   1a4d0:	e1a06001 	mov	r6, r1
   1a4d4:	eb0034d3 	bl	27828 <CPtrArray::GetCount() const>
   1a4d8:	e1500005 	cmp	r0, r5
   1a4dc:	da00000e 	ble	1a51c <CTransportLayer::SetOptionBroadcast(bool, int)+0x60>
   1a4e0:	e1a01005 	mov	r1, r5
   1a4e4:	e1a00004 	mov	r0, r4
   1a4e8:	eb0034d0 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a4ec:	e5903000 	ldr	r3, [r0]
   1a4f0:	e3530000 	cmp	r3, #0
   1a4f4:	0a000008 	beq	1a51c <CTransportLayer::SetOptionBroadcast(bool, int)+0x60>
   1a4f8:	e1a01005 	mov	r1, r5
   1a4fc:	e1a00004 	mov	r0, r4
   1a500:	eb0034ca 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a504:	e5900000 	ldr	r0, [r0]
   1a508:	e59f2030 	ldr	r2, [pc, #48]	; 1a540 <CTransportLayer::SetOptionBroadcast(bool, int)+0x84>
   1a50c:	e5903000 	ldr	r3, [r0]
   1a510:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1a514:	e1530002 	cmp	r3, r2
   1a518:	1a000001 	bne	1a524 <CTransportLayer::SetOptionBroadcast(bool, int)+0x68>
   1a51c:	e3e00000 	mvn	r0, #0
   1a520:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a524:	e1a01006 	mov	r1, r6
   1a528:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a52c:	e12fff13 	bx	r3
   1a530:	e59f200c 	ldr	r2, [pc, #12]	; 1a544 <CTransportLayer::SetOptionBroadcast(bool, int)+0x88>
   1a534:	e59f100c 	ldr	r1, [pc, #12]	; 1a548 <CTransportLayer::SetOptionBroadcast(bool, int)+0x8c>
   1a538:	e59f000c 	ldr	r0, [pc, #12]	; 1a54c <CTransportLayer::SetOptionBroadcast(bool, int)+0x90>
   1a53c:	eb002899 	bl	247a8 <assertion_failed>
   1a540:	0001a9d8 	.word	0x0001a9d8
   1a544:	0000017e 	.word	0x0000017e
   1a548:	000453c8 	.word	0x000453c8
   1a54c:	00045420 	.word	0x00045420

0001a550 <CTransportLayer::IsConnected(int) const>:
   1a550:	e92d4070 	push	{r4, r5, r6, lr}
   1a554:	e2515000 	subs	r5, r1, #0
   1a558:	ba000015 	blt	1a5b4 <CTransportLayer::IsConnected(int) const+0x64>
   1a55c:	e2804008 	add	r4, r0, #8
   1a560:	e1a00004 	mov	r0, r4
   1a564:	eb0034af 	bl	27828 <CPtrArray::GetCount() const>
   1a568:	e1500005 	cmp	r0, r5
   1a56c:	ca000001 	bgt	1a578 <CTransportLayer::IsConnected(int) const+0x28>
   1a570:	e3a00000 	mov	r0, #0
   1a574:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a578:	e1a01005 	mov	r1, r5
   1a57c:	e1a00004 	mov	r0, r4
   1a580:	eb0034c6 	bl	278a0 <CPtrArray::operator[](unsigned int) const>
   1a584:	e3500000 	cmp	r0, #0
   1a588:	0afffff8 	beq	1a570 <CTransportLayer::IsConnected(int) const+0x20>
   1a58c:	e1a01005 	mov	r1, r5
   1a590:	e1a00004 	mov	r0, r4
   1a594:	eb0034c1 	bl	278a0 <CPtrArray::operator[](unsigned int) const>
   1a598:	e5903000 	ldr	r3, [r0]
   1a59c:	e59f2020 	ldr	r2, [pc, #32]	; 1a5c4 <CTransportLayer::IsConnected(int) const+0x74>
   1a5a0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   1a5a4:	e1530002 	cmp	r3, r2
   1a5a8:	0afffff0 	beq	1a570 <CTransportLayer::IsConnected(int) const+0x20>
   1a5ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a5b0:	e12fff13 	bx	r3
   1a5b4:	e59f200c 	ldr	r2, [pc, #12]	; 1a5c8 <CTransportLayer::IsConnected(int) const+0x78>
   1a5b8:	e59f100c 	ldr	r1, [pc, #12]	; 1a5cc <CTransportLayer::IsConnected(int) const+0x7c>
   1a5bc:	e59f000c 	ldr	r0, [pc, #12]	; 1a5d0 <CTransportLayer::IsConnected(int) const+0x80>
   1a5c0:	eb002878 	bl	247a8 <assertion_failed>
   1a5c4:	0001a9e0 	.word	0x0001a9e0
   1a5c8:	0000018a 	.word	0x0000018a
   1a5cc:	000453c8 	.word	0x000453c8
   1a5d0:	00045420 	.word	0x00045420

0001a5d4 <CTransportLayer::GetForeignIP(int) const>:
   1a5d4:	e92d4070 	push	{r4, r5, r6, lr}
   1a5d8:	e2515000 	subs	r5, r1, #0
   1a5dc:	ba000010 	blt	1a624 <CTransportLayer::GetForeignIP(int) const+0x50>
   1a5e0:	e2804008 	add	r4, r0, #8
   1a5e4:	e1a00004 	mov	r0, r4
   1a5e8:	eb00348e 	bl	27828 <CPtrArray::GetCount() const>
   1a5ec:	e1500005 	cmp	r0, r5
   1a5f0:	da000009 	ble	1a61c <CTransportLayer::GetForeignIP(int) const+0x48>
   1a5f4:	e1a01005 	mov	r1, r5
   1a5f8:	e1a00004 	mov	r0, r4
   1a5fc:	eb0034a7 	bl	278a0 <CPtrArray::operator[](unsigned int) const>
   1a600:	e3500000 	cmp	r0, #0
   1a604:	0a000004 	beq	1a61c <CTransportLayer::GetForeignIP(int) const+0x48>
   1a608:	e1a01005 	mov	r1, r5
   1a60c:	e1a00004 	mov	r0, r4
   1a610:	eb0034a2 	bl	278a0 <CPtrArray::operator[](unsigned int) const>
   1a614:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a618:	ea000bed 	b	1d5d4 <CNetConnection::GetForeignIP() const>
   1a61c:	e3a00000 	mov	r0, #0
   1a620:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a624:	e59f2008 	ldr	r2, [pc, #8]	; 1a634 <CTransportLayer::GetForeignIP(int) const+0x60>
   1a628:	e59f1008 	ldr	r1, [pc, #8]	; 1a638 <CTransportLayer::GetForeignIP(int) const+0x64>
   1a62c:	e59f0008 	ldr	r0, [pc, #8]	; 1a63c <CTransportLayer::GetForeignIP(int) const+0x68>
   1a630:	eb00285c 	bl	247a8 <assertion_failed>
   1a634:	00000196 	.word	0x00000196
   1a638:	000453c8 	.word	0x000453c8
   1a63c:	00045420 	.word	0x00045420

0001a640 <CTransportLayer::~CTransportLayer()>:
   1a640:	e3a03000 	mov	r3, #0
   1a644:	e92d4010 	push	{r4, lr}
   1a648:	e1a04000 	mov	r4, r0
   1a64c:	e5803004 	str	r3, [r0, #4]
   1a650:	e4803020 	str	r3, [r0], #32
   1a654:	eb001881 	bl	20860 <CTCPRejector::~CTCPRejector()>
   1a658:	e2840008 	add	r0, r4, #8
   1a65c:	eb003466 	bl	277fc <CPtrArray::~CPtrArray()>
   1a660:	e1a00004 	mov	r0, r4
   1a664:	e8bd8010 	pop	{r4, pc}

0001a668 <CTransportLayer::Process()>:
   1a668:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a66c:	e1a09000 	mov	r9, r0
   1a670:	e24dde67 	sub	sp, sp, #1648	; 0x670
   1a674:	e24dd004 	sub	sp, sp, #4
   1a678:	e28d0020 	add	r0, sp, #32
   1a67c:	e28d7028 	add	r7, sp, #40	; 0x28
   1a680:	eb0019a6 	bl	20d20 <CIPAddress::CIPAddress()>
   1a684:	e1a00007 	mov	r0, r7
   1a688:	eb0019a4 	bl	20d20 <CIPAddress::CIPAddress()>
   1a68c:	e5990004 	ldr	r0, [r9, #4]
   1a690:	e3500000 	cmp	r0, #0
   1a694:	0a0000b8 	beq	1a97c <CTransportLayer::Process()+0x314>
   1a698:	e2894008 	add	r4, r9, #8
   1a69c:	e28da01c 	add	sl, sp, #28
   1a6a0:	e2896020 	add	r6, r9, #32
   1a6a4:	e88d0480 	stm	sp, {r7, sl}
   1a6a8:	e28d3020 	add	r3, sp, #32
   1a6ac:	e28d2018 	add	r2, sp, #24
   1a6b0:	e28d1030 	add	r1, sp, #48	; 0x30
   1a6b4:	eb000255 	bl	1b010 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>
   1a6b8:	e3500000 	cmp	r0, #0
   1a6bc:	0a000021 	beq	1a748 <CTransportLayer::Process()+0xe0>
   1a6c0:	e3a05000 	mov	r5, #0
   1a6c4:	ea000015 	b	1a720 <CTransportLayer::Process()+0xb8>
   1a6c8:	e1a01005 	mov	r1, r5
   1a6cc:	e1a00004 	mov	r0, r4
   1a6d0:	eb003456 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a6d4:	e5903000 	ldr	r3, [r0]
   1a6d8:	e3530000 	cmp	r3, #0
   1a6dc:	0a00000e 	beq	1a71c <CTransportLayer::Process()+0xb4>
   1a6e0:	e1a01005 	mov	r1, r5
   1a6e4:	e1a00004 	mov	r0, r4
   1a6e8:	eb003450 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a6ec:	e5900000 	ldr	r0, [r0]
   1a6f0:	e59d201c 	ldr	r2, [sp, #28]
   1a6f4:	e5903000 	ldr	r3, [r0]
   1a6f8:	e58d2004 	str	r2, [sp, #4]
   1a6fc:	e58d7000 	str	r7, [sp]
   1a700:	e5938034 	ldr	r8, [r3, #52]	; 0x34
   1a704:	e59d2018 	ldr	r2, [sp, #24]
   1a708:	e28d3020 	add	r3, sp, #32
   1a70c:	e28d1030 	add	r1, sp, #48	; 0x30
   1a710:	e12fff38 	blx	r8
   1a714:	e3500000 	cmp	r0, #0
   1a718:	1a000004 	bne	1a730 <CTransportLayer::Process()+0xc8>
   1a71c:	e2855001 	add	r5, r5, #1
   1a720:	e1a00004 	mov	r0, r4
   1a724:	eb00343f 	bl	27828 <CPtrArray::GetCount() const>
   1a728:	e1500005 	cmp	r0, r5
   1a72c:	8affffe5 	bhi	1a6c8 <CTransportLayer::Process()+0x60>
   1a730:	e1a00004 	mov	r0, r4
   1a734:	eb00343b 	bl	27828 <CPtrArray::GetCount() const>
   1a738:	e1500005 	cmp	r0, r5
   1a73c:	9a00006e 	bls	1a8fc <CTransportLayer::Process()+0x294>
   1a740:	e5990004 	ldr	r0, [r9, #4]
   1a744:	eaffffd6 	b	1a6a4 <CTransportLayer::Process()+0x3c>
   1a748:	e59f823c 	ldr	r8, [pc, #572]	; 1a98c <CTransportLayer::Process()+0x324>
   1a74c:	e28db016 	add	fp, sp, #22
   1a750:	e28d3014 	add	r3, sp, #20
   1a754:	e58d3000 	str	r3, [sp]
   1a758:	e58da008 	str	sl, [sp, #8]
   1a75c:	e58db004 	str	fp, [sp, #4]
   1a760:	e1a03007 	mov	r3, r7
   1a764:	e5990004 	ldr	r0, [r9, #4]
   1a768:	e28d2020 	add	r2, sp, #32
   1a76c:	e28d1013 	add	r1, sp, #19
   1a770:	eb00026d 	bl	1b12c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>
   1a774:	e3500000 	cmp	r0, #0
   1a778:	0a000021 	beq	1a804 <CTransportLayer::Process()+0x19c>
   1a77c:	e3a05000 	mov	r5, #0
   1a780:	ea000000 	b	1a788 <CTransportLayer::Process()+0x120>
   1a784:	e2855001 	add	r5, r5, #1
   1a788:	e1a00004 	mov	r0, r4
   1a78c:	eb003425 	bl	27828 <CPtrArray::GetCount() const>
   1a790:	e1500005 	cmp	r0, r5
   1a794:	9affffed 	bls	1a750 <CTransportLayer::Process()+0xe8>
   1a798:	e1a01005 	mov	r1, r5
   1a79c:	e1a00004 	mov	r0, r4
   1a7a0:	eb003422 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a7a4:	e5903000 	ldr	r3, [r0]
   1a7a8:	e3530000 	cmp	r3, #0
   1a7ac:	0afffff4 	beq	1a784 <CTransportLayer::Process()+0x11c>
   1a7b0:	e1a01005 	mov	r1, r5
   1a7b4:	e1a00004 	mov	r0, r4
   1a7b8:	eb00341c 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a7bc:	e5900000 	ldr	r0, [r0]
   1a7c0:	e5903000 	ldr	r3, [r0]
   1a7c4:	e5936038 	ldr	r6, [r3, #56]	; 0x38
   1a7c8:	e1560008 	cmp	r6, r8
   1a7cc:	0affffec 	beq	1a784 <CTransportLayer::Process()+0x11c>
   1a7d0:	e59d101c 	ldr	r1, [sp, #28]
   1a7d4:	e1dd21b6 	ldrh	r2, [sp, #22]
   1a7d8:	e1dd31b4 	ldrh	r3, [sp, #20]
   1a7dc:	e58d1008 	str	r1, [sp, #8]
   1a7e0:	e58d2004 	str	r2, [sp, #4]
   1a7e4:	e58d3000 	str	r3, [sp]
   1a7e8:	e5dd1013 	ldrb	r1, [sp, #19]
   1a7ec:	e1a03007 	mov	r3, r7
   1a7f0:	e28d2020 	add	r2, sp, #32
   1a7f4:	e12fff36 	blx	r6
   1a7f8:	e3500000 	cmp	r0, #0
   1a7fc:	0affffe0 	beq	1a784 <CTransportLayer::Process()+0x11c>
   1a800:	eaffffd2 	b	1a750 <CTransportLayer::Process()+0xe8>
   1a804:	e1a05000 	mov	r5, r0
   1a808:	e1a0a000 	mov	sl, r0
   1a80c:	e59f617c 	ldr	r6, [pc, #380]	; 1a990 <CTransportLayer::Process()+0x328>
   1a810:	e59f817c 	ldr	r8, [pc, #380]	; 1a994 <CTransportLayer::Process()+0x32c>
   1a814:	ea000016 	b	1a874 <CTransportLayer::Process()+0x20c>
   1a818:	e1a01005 	mov	r1, r5
   1a81c:	e1a00004 	mov	r0, r4
   1a820:	eb003402 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a824:	e5903000 	ldr	r3, [r0]
   1a828:	e3530000 	cmp	r3, #0
   1a82c:	0a00000f 	beq	1a870 <CTransportLayer::Process()+0x208>
   1a830:	e1a01005 	mov	r1, r5
   1a834:	e1a00004 	mov	r0, r4
   1a838:	eb0033fc 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a83c:	e5900000 	ldr	r0, [r0]
   1a840:	e5903000 	ldr	r3, [r0]
   1a844:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1a848:	e1530006 	cmp	r3, r6
   1a84c:	1a000033 	bne	1a920 <CTransportLayer::Process()+0x2b8>
   1a850:	e1a01005 	mov	r1, r5
   1a854:	e1a00004 	mov	r0, r4
   1a858:	eb0033f4 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a85c:	e5900000 	ldr	r0, [r0]
   1a860:	e5903000 	ldr	r3, [r0]
   1a864:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   1a868:	e1530008 	cmp	r3, r8
   1a86c:	1a00003c 	bne	1a964 <CTransportLayer::Process()+0x2fc>
   1a870:	e2855001 	add	r5, r5, #1
   1a874:	e1a00004 	mov	r0, r4
   1a878:	eb0033ea 	bl	27828 <CPtrArray::GetCount() const>
   1a87c:	e1500005 	cmp	r0, r5
   1a880:	8affffe4 	bhi	1a818 <CTransportLayer::Process()+0x1b0>
   1a884:	e599001c 	ldr	r0, [r9, #28]
   1a888:	e3500000 	cmp	r0, #0
   1a88c:	1a000038 	bne	1a974 <CTransportLayer::Process()+0x30c>
   1a890:	e1a00004 	mov	r0, r4
   1a894:	eb0033e3 	bl	27828 <CPtrArray::GetCount() const>
   1a898:	e3500000 	cmp	r0, #0
   1a89c:	e2405001 	sub	r5, r0, #1
   1a8a0:	1a000005 	bne	1a8bc <CTransportLayer::Process()+0x254>
   1a8a4:	ea00000a 	b	1a8d4 <CTransportLayer::Process()+0x26c>
   1a8a8:	e1a00004 	mov	r0, r4
   1a8ac:	e2455001 	sub	r5, r5, #1
   1a8b0:	eb003454 	bl	27a08 <CPtrArray::RemoveLast()>
   1a8b4:	e3750001 	cmn	r5, #1
   1a8b8:	0a000005 	beq	1a8d4 <CTransportLayer::Process()+0x26c>
   1a8bc:	e1a01005 	mov	r1, r5
   1a8c0:	e1a00004 	mov	r0, r4
   1a8c4:	eb0033d9 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a8c8:	e5903000 	ldr	r3, [r0]
   1a8cc:	e3530000 	cmp	r3, #0
   1a8d0:	0afffff4 	beq	1a8a8 <CTransportLayer::Process()+0x240>
   1a8d4:	e599301c 	ldr	r3, [r9, #28]
   1a8d8:	e3530000 	cmp	r3, #0
   1a8dc:	1a000022 	bne	1a96c <CTransportLayer::Process()+0x304>
   1a8e0:	e1a00007 	mov	r0, r7
   1a8e4:	eb001923 	bl	20d78 <CIPAddress::~CIPAddress()>
   1a8e8:	e28d0020 	add	r0, sp, #32
   1a8ec:	eb001921 	bl	20d78 <CIPAddress::~CIPAddress()>
   1a8f0:	e28dde67 	add	sp, sp, #1648	; 0x670
   1a8f4:	e28dd004 	add	sp, sp, #4
   1a8f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8fc:	e59d301c 	ldr	r3, [sp, #28]
   1a900:	e1a00006 	mov	r0, r6
   1a904:	e58d3004 	str	r3, [sp, #4]
   1a908:	e59d2018 	ldr	r2, [sp, #24]
   1a90c:	e58d7000 	str	r7, [sp]
   1a910:	e28d3020 	add	r3, sp, #32
   1a914:	e28d1030 	add	r1, sp, #48	; 0x30
   1a918:	eb001823 	bl	209ac <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>
   1a91c:	eaffff87 	b	1a740 <CTransportLayer::Process()+0xd8>
   1a920:	e12fff33 	blx	r3
   1a924:	e3500000 	cmp	r0, #0
   1a928:	0affffc8 	beq	1a850 <CTransportLayer::Process()+0x1e8>
   1a92c:	e1a01005 	mov	r1, r5
   1a930:	e1a00004 	mov	r0, r4
   1a934:	eb0033bd 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a938:	e5900000 	ldr	r0, [r0]
   1a93c:	e3500000 	cmp	r0, #0
   1a940:	0a000002 	beq	1a950 <CTransportLayer::Process()+0x2e8>
   1a944:	e5903000 	ldr	r3, [r0]
   1a948:	e5933004 	ldr	r3, [r3, #4]
   1a94c:	e12fff33 	blx	r3
   1a950:	e1a01005 	mov	r1, r5
   1a954:	e1a00004 	mov	r0, r4
   1a958:	eb0033b4 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1a95c:	e580a000 	str	sl, [r0]
   1a960:	eaffffc2 	b	1a870 <CTransportLayer::Process()+0x208>
   1a964:	e12fff33 	blx	r3
   1a968:	eaffffc0 	b	1a870 <CTransportLayer::Process()+0x208>
   1a96c:	eb0044ec 	bl	2bd24 <LeaveCritical>
   1a970:	eaffffda 	b	1a8e0 <CTransportLayer::Process()+0x278>
   1a974:	eb0044c0 	bl	2bc7c <EnterCritical>
   1a978:	eaffffc4 	b	1a890 <CTransportLayer::Process()+0x228>
   1a97c:	e3a0203a 	mov	r2, #58	; 0x3a
   1a980:	e59f1010 	ldr	r1, [pc, #16]	; 1a998 <CTransportLayer::Process()+0x330>
   1a984:	e59f0010 	ldr	r0, [pc, #16]	; 1a99c <CTransportLayer::Process()+0x334>
   1a988:	eb002786 	bl	247a8 <assertion_failed>
   1a98c:	0001a9f4 	.word	0x0001a9f4
   1a990:	0001a9e8 	.word	0x0001a9e8
   1a994:	0001a9f0 	.word	0x0001a9f0
   1a998:	000453c8 	.word	0x000453c8
   1a99c:	000453f0 	.word	0x000453f0

0001a9a0 <CTCPRejector::Connect()>:
   1a9a0:	e3e00000 	mvn	r0, #0
   1a9a4:	e12fff1e 	bx	lr

0001a9a8 <CTCPRejector::Accept(CIPAddress*, unsigned short*)>:
   1a9a8:	e3e00000 	mvn	r0, #0
   1a9ac:	e12fff1e 	bx	lr

0001a9b0 <CTCPRejector::Close()>:
   1a9b0:	e3e00000 	mvn	r0, #0
   1a9b4:	e12fff1e 	bx	lr

0001a9b8 <CTCPRejector::Send(void const*, unsigned int, int)>:
   1a9b8:	e3e00000 	mvn	r0, #0
   1a9bc:	e12fff1e 	bx	lr

0001a9c0 <CTCPRejector::Receive(void*, int)>:
   1a9c0:	e3e00000 	mvn	r0, #0
   1a9c4:	e12fff1e 	bx	lr

0001a9c8 <CTCPRejector::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1a9c8:	e3e00000 	mvn	r0, #0
   1a9cc:	e12fff1e 	bx	lr

0001a9d0 <CTCPRejector::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1a9d0:	e3e00000 	mvn	r0, #0
   1a9d4:	e12fff1e 	bx	lr

0001a9d8 <CTCPRejector::SetOptionBroadcast(bool)>:
   1a9d8:	e3e00000 	mvn	r0, #0
   1a9dc:	e12fff1e 	bx	lr

0001a9e0 <CTCPRejector::IsConnected() const>:
   1a9e0:	e3a00000 	mov	r0, #0
   1a9e4:	e12fff1e 	bx	lr

0001a9e8 <CTCPRejector::IsTerminated() const>:
   1a9e8:	e3a00000 	mov	r0, #0
   1a9ec:	e12fff1e 	bx	lr

0001a9f0 <CTCPRejector::Process()>:
   1a9f0:	e12fff1e 	bx	lr

0001a9f4 <CTCPRejector::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1a9f4:	e3a00000 	mov	r0, #0
   1a9f8:	e12fff1e 	bx	lr

0001a9fc <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]>:
   1a9fc:	e92d4010 	push	{r4, lr}
   1aa00:	e59f2008 	ldr	r2, [pc, #8]	; 1aa10 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]+0x14>
   1aa04:	e59f1008 	ldr	r1, [pc, #8]	; 1aa14 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]+0x18>
   1aa08:	e59f0008 	ldr	r0, [pc, #8]	; 1aa18 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]+0x1c>
   1aa0c:	eb002765 	bl	247a8 <assertion_failed>
   1aa10:	0000012b 	.word	0x0000012b
   1aa14:	00045470 	.word	0x00045470
   1aa18:	00045484 	.word	0x00045484

0001aa1c <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>:
   1aa1c:	e3a03000 	mov	r3, #0
   1aa20:	e92d4010 	push	{r4, lr}
   1aa24:	e1a04000 	mov	r4, r0
   1aa28:	e880000e 	stm	r0, {r1, r2, r3}
   1aa2c:	e280000c 	add	r0, r0, #12
   1aa30:	eb001a07 	bl	21254 <CNetQueue::CNetQueue()>
   1aa34:	e2840018 	add	r0, r4, #24
   1aa38:	eb001a05 	bl	21254 <CNetQueue::CNetQueue()>
   1aa3c:	e2840024 	add	r0, r4, #36	; 0x24
   1aa40:	eb001a03 	bl	21254 <CNetQueue::CNetQueue()>
   1aa44:	e2840030 	add	r0, r4, #48	; 0x30
   1aa48:	eb0009f1 	bl	1d214 <CRouteCache::CRouteCache()>
   1aa4c:	e5943000 	ldr	r3, [r4]
   1aa50:	e3530000 	cmp	r3, #0
   1aa54:	0a000004 	beq	1aa6c <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x50>
   1aa58:	e5943004 	ldr	r3, [r4, #4]
   1aa5c:	e3530000 	cmp	r3, #0
   1aa60:	0a000005 	beq	1aa7c <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x60>
   1aa64:	e1a00004 	mov	r0, r4
   1aa68:	e8bd8010 	pop	{r4, pc}
   1aa6c:	e3a0201f 	mov	r2, #31
   1aa70:	e59f1014 	ldr	r1, [pc, #20]	; 1aa8c <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x70>
   1aa74:	e59f0014 	ldr	r0, [pc, #20]	; 1aa90 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x74>
   1aa78:	eb00274a 	bl	247a8 <assertion_failed>
   1aa7c:	e3a02020 	mov	r2, #32
   1aa80:	e59f1004 	ldr	r1, [pc, #4]	; 1aa8c <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x70>
   1aa84:	e59f0008 	ldr	r0, [pc, #8]	; 1aa94 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x78>
   1aa88:	eb002746 	bl	247a8 <assertion_failed>
   1aa8c:	00045470 	.word	0x00045470
   1aa90:	000453dc 	.word	0x000453dc
   1aa94:	00045498 	.word	0x00045498

0001aa98 <CNetworkLayer::~CNetworkLayer()>:
   1aa98:	e92d4070 	push	{r4, r5, r6, lr}
   1aa9c:	e5905008 	ldr	r5, [r0, #8]
   1aaa0:	e1a04000 	mov	r4, r0
   1aaa4:	e3550000 	cmp	r5, #0
   1aaa8:	0a000004 	beq	1aac0 <CNetworkLayer::~CNetworkLayer()+0x28>
   1aaac:	e1a00005 	mov	r0, r5
   1aab0:	eb00083a 	bl	1cba0 <CICMPHandler::~CICMPHandler()>
   1aab4:	e1a00005 	mov	r0, r5
   1aab8:	e3a01010 	mov	r1, #16
   1aabc:	eb00414f 	bl	2b000 <operator delete(void*, unsigned int)>
   1aac0:	e3a03000 	mov	r3, #0
   1aac4:	e1a00004 	mov	r0, r4
   1aac8:	e5843008 	str	r3, [r4, #8]
   1aacc:	e5843004 	str	r3, [r4, #4]
   1aad0:	e4803030 	str	r3, [r0], #48	; 0x30
   1aad4:	eb0009e9 	bl	1d280 <CRouteCache::~CRouteCache()>
   1aad8:	e2840024 	add	r0, r4, #36	; 0x24
   1aadc:	eb001a14 	bl	21334 <CNetQueue::~CNetQueue()>
   1aae0:	e2840018 	add	r0, r4, #24
   1aae4:	eb001a12 	bl	21334 <CNetQueue::~CNetQueue()>
   1aae8:	e284000c 	add	r0, r4, #12
   1aaec:	eb001a10 	bl	21334 <CNetQueue::~CNetQueue()>
   1aaf0:	e1a00004 	mov	r0, r4
   1aaf4:	e8bd8070 	pop	{r4, r5, r6, pc}

0001aaf8 <CNetworkLayer::Initialize()>:
   1aaf8:	e92d4030 	push	{r4, r5, lr}
   1aafc:	e5903008 	ldr	r3, [r0, #8]
   1ab00:	e24dd00c 	sub	sp, sp, #12
   1ab04:	e3530000 	cmp	r3, #0
   1ab08:	1a00000d 	bne	1ab44 <CNetworkLayer::Initialize()+0x4c>
   1ab0c:	e1a04000 	mov	r4, r0
   1ab10:	e3a00010 	mov	r0, #16
   1ab14:	eb00412b 	bl	2afc8 <operator new(unsigned int)>
   1ab18:	e1a02004 	mov	r2, r4
   1ab1c:	e4921024 	ldr	r1, [r2], #36	; 0x24
   1ab20:	e2843018 	add	r3, r4, #24
   1ab24:	e58d2000 	str	r2, [sp]
   1ab28:	e1a02004 	mov	r2, r4
   1ab2c:	e1a05000 	mov	r5, r0
   1ab30:	eb0007fa 	bl	1cb20 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>
   1ab34:	e3a00001 	mov	r0, #1
   1ab38:	e5845008 	str	r5, [r4, #8]
   1ab3c:	e28dd00c 	add	sp, sp, #12
   1ab40:	e8bd8030 	pop	{r4, r5, pc}
   1ab44:	e3a0202e 	mov	r2, #46	; 0x2e
   1ab48:	e59f1004 	ldr	r1, [pc, #4]	; 1ab54 <CNetworkLayer::Initialize()+0x5c>
   1ab4c:	e59f0004 	ldr	r0, [pc, #4]	; 1ab58 <CNetworkLayer::Initialize()+0x60>
   1ab50:	eb002714 	bl	247a8 <assertion_failed>
   1ab54:	00045470 	.word	0x00045470
   1ab58:	000454ac 	.word	0x000454ac

0001ab5c <CNetworkLayer::Process()>:
   1ab5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ab60:	e1a05000 	mov	r5, r0
   1ab64:	e5900000 	ldr	r0, [r0]
   1ab68:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1ab6c:	e3500000 	cmp	r0, #0
   1ab70:	0a000052 	beq	1acc0 <CNetworkLayer::Process()+0x164>
   1ab74:	eb00180e 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   1ab78:	e2506000 	subs	r6, r0, #0
   1ab7c:	0a000053 	beq	1acd0 <CNetworkLayer::Process()+0x174>
   1ab80:	e5950004 	ldr	r0, [r5, #4]
   1ab84:	e3500000 	cmp	r0, #0
   1ab88:	0a000054 	beq	1ace0 <CNetworkLayer::Process()+0x184>
   1ab8c:	e28d7008 	add	r7, sp, #8
   1ab90:	ea000014 	b	1abe8 <CNetworkLayer::Process()+0x8c>
   1ab94:	e59d3004 	ldr	r3, [sp, #4]
   1ab98:	e3530014 	cmp	r3, #20
   1ab9c:	9a000010 	bls	1abe4 <CNetworkLayer::Process()+0x88>
   1aba0:	e5dd1010 	ldrb	r1, [sp, #16]
   1aba4:	e201100f 	and	r1, r1, #15
   1aba8:	e2412005 	sub	r2, r1, #5
   1abac:	e3520001 	cmp	r2, #1
   1abb0:	8a00000b 	bhi	1abe4 <CNetworkLayer::Process()+0x88>
   1abb4:	e1530101 	cmp	r3, r1, lsl #2
   1abb8:	e1a04101 	lsl	r4, r1, #2
   1abbc:	9a000008 	bls	1abe4 <CNetworkLayer::Process()+0x88>
   1abc0:	e1a01004 	mov	r1, r4
   1abc4:	e28d0010 	add	r0, sp, #16
   1abc8:	eb001ae7 	bl	2176c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1abcc:	e3500000 	cmp	r0, #0
   1abd0:	1a000003 	bne	1abe4 <CNetworkLayer::Process()+0x88>
   1abd4:	e5dd3010 	ldrb	r3, [sp, #16]
   1abd8:	e1a03243 	asr	r3, r3, #4
   1abdc:	e3530004 	cmp	r3, #4
   1abe0:	0a00000b 	beq	1ac14 <CNetworkLayer::Process()+0xb8>
   1abe4:	e5950004 	ldr	r0, [r5, #4]
   1abe8:	e28d2004 	add	r2, sp, #4
   1abec:	e28d1010 	add	r1, sp, #16
   1abf0:	eb000307 	bl	1b814 <CLinkLayer::Receive(void*, unsigned int*)>
   1abf4:	e3500000 	cmp	r0, #0
   1abf8:	1affffe5 	bne	1ab94 <CNetworkLayer::Process()+0x38>
   1abfc:	e5950008 	ldr	r0, [r5, #8]
   1ac00:	e3500000 	cmp	r0, #0
   1ac04:	0a000039 	beq	1acf0 <CNetworkLayer::Process()+0x194>
   1ac08:	eb000823 	bl	1cc9c <CICMPHandler::Process()>
   1ac0c:	e28dde65 	add	sp, sp, #1616	; 0x650
   1ac10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ac14:	e28d1020 	add	r1, sp, #32
   1ac18:	e1a00007 	mov	r0, r7
   1ac1c:	eb0018d6 	bl	20f7c <CIPAddress::CIPAddress(unsigned char const*)>
   1ac20:	e1a00006 	mov	r0, r6
   1ac24:	eb00191c 	bl	2109c <CIPAddress::IsNull() const>
   1ac28:	e3500000 	cmp	r0, #0
   1ac2c:	0a000013 	beq	1ac80 <CNetworkLayer::Process()+0x124>
   1ac30:	e1a00007 	mov	r0, r7
   1ac34:	eb001926 	bl	210d4 <CIPAddress::IsBroadcast() const>
   1ac38:	e3500000 	cmp	r0, #0
   1ac3c:	0a00000c 	beq	1ac74 <CNetworkLayer::Process()+0x118>
   1ac40:	e1dd31b6 	ldrh	r3, [sp, #22]
   1ac44:	e3130020 	tst	r3, #32
   1ac48:	1a000009 	bne	1ac74 <CNetworkLayer::Process()+0x118>
   1ac4c:	e6bf3fb3 	rev16	r3, r3
   1ac50:	e2033c1f 	and	r3, r3, #7936	; 0x1f00
   1ac54:	e3530000 	cmp	r3, #0
   1ac58:	1a000005 	bne	1ac74 <CNetworkLayer::Process()+0x118>
   1ac5c:	e1dd31b2 	ldrh	r3, [sp, #18]
   1ac60:	e59d2004 	ldr	r2, [sp, #4]
   1ac64:	e6bf3fb3 	rev16	r3, r3
   1ac68:	e6ff3073 	uxth	r3, r3
   1ac6c:	e1520003 	cmp	r2, r3
   1ac70:	2a000022 	bcs	1ad00 <CNetworkLayer::Process()+0x1a4>
   1ac74:	e1a00007 	mov	r0, r7
   1ac78:	eb00183e 	bl	20d78 <CIPAddress::~CIPAddress()>
   1ac7c:	eaffffd8 	b	1abe4 <CNetworkLayer::Process()+0x88>
   1ac80:	e1a01007 	mov	r1, r7
   1ac84:	e1a00006 	mov	r0, r6
   1ac88:	eb001853 	bl	20ddc <CIPAddress::operator!=(CIPAddress const&) const>
   1ac8c:	e3500000 	cmp	r0, #0
   1ac90:	0affffea 	beq	1ac40 <CNetworkLayer::Process()+0xe4>
   1ac94:	e1a00007 	mov	r0, r7
   1ac98:	eb00190d 	bl	210d4 <CIPAddress::IsBroadcast() const>
   1ac9c:	e3500000 	cmp	r0, #0
   1aca0:	1affffe6 	bne	1ac40 <CNetworkLayer::Process()+0xe4>
   1aca4:	e5950000 	ldr	r0, [r5]
   1aca8:	eb0017cb 	bl	20bdc <CNetConfig::GetBroadcastAddress() const>
   1acac:	e1a01007 	mov	r1, r7
   1acb0:	eb001849 	bl	20ddc <CIPAddress::operator!=(CIPAddress const&) const>
   1acb4:	e3500000 	cmp	r0, #0
   1acb8:	0affffe0 	beq	1ac40 <CNetworkLayer::Process()+0xe4>
   1acbc:	eaffffec 	b	1ac74 <CNetworkLayer::Process()+0x118>
   1acc0:	e3a02037 	mov	r2, #55	; 0x37
   1acc4:	e59f1098 	ldr	r1, [pc, #152]	; 1ad64 <CNetworkLayer::Process()+0x208>
   1acc8:	e59f0098 	ldr	r0, [pc, #152]	; 1ad68 <CNetworkLayer::Process()+0x20c>
   1accc:	eb0026b5 	bl	247a8 <assertion_failed>
   1acd0:	e3a02039 	mov	r2, #57	; 0x39
   1acd4:	e59f1088 	ldr	r1, [pc, #136]	; 1ad64 <CNetworkLayer::Process()+0x208>
   1acd8:	e59f008c 	ldr	r0, [pc, #140]	; 1ad6c <CNetworkLayer::Process()+0x210>
   1acdc:	eb0026b1 	bl	247a8 <assertion_failed>
   1ace0:	e3a0203d 	mov	r2, #61	; 0x3d
   1ace4:	e59f1078 	ldr	r1, [pc, #120]	; 1ad64 <CNetworkLayer::Process()+0x208>
   1ace8:	e59f0080 	ldr	r0, [pc, #128]	; 1ad70 <CNetworkLayer::Process()+0x214>
   1acec:	eb0026ad 	bl	247a8 <assertion_failed>
   1acf0:	e3a0208a 	mov	r2, #138	; 0x8a
   1acf4:	e59f1068 	ldr	r1, [pc, #104]	; 1ad64 <CNetworkLayer::Process()+0x208>
   1acf8:	e59f0074 	ldr	r0, [pc, #116]	; 1ad74 <CNetworkLayer::Process()+0x218>
   1acfc:	eb0026a9 	bl	247a8 <assertion_failed>
   1ad00:	e3a00009 	mov	r0, #9
   1ad04:	e58d3004 	str	r3, [sp, #4]
   1ad08:	eb0040ae 	bl	2afc8 <operator new(unsigned int)>
   1ad0c:	e1a08000 	mov	r8, r0
   1ad10:	e5dd3019 	ldrb	r3, [sp, #25]
   1ad14:	e28d101c 	add	r1, sp, #28
   1ad18:	e4c03001 	strb	r3, [r0], #1
   1ad1c:	e3a02004 	mov	r2, #4
   1ad20:	eb003ec2 	bl	2a830 <memcpy>
   1ad24:	e28d1020 	add	r1, sp, #32
   1ad28:	e3a02004 	mov	r2, #4
   1ad2c:	e2880005 	add	r0, r8, #5
   1ad30:	eb003ebe 	bl	2a830 <memcpy>
   1ad34:	e5dd3019 	ldrb	r3, [sp, #25]
   1ad38:	e59d2004 	ldr	r2, [sp, #4]
   1ad3c:	e3530001 	cmp	r3, #1
   1ad40:	e28d1010 	add	r1, sp, #16
   1ad44:	e0422004 	sub	r2, r2, r4
   1ad48:	e1a03008 	mov	r3, r8
   1ad4c:	e0811004 	add	r1, r1, r4
   1ad50:	02850018 	addeq	r0, r5, #24
   1ad54:	1285000c 	addne	r0, r5, #12
   1ad58:	e58d2004 	str	r2, [sp, #4]
   1ad5c:	eb001979 	bl	21348 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1ad60:	eaffffc3 	b	1ac74 <CNetworkLayer::Process()+0x118>
   1ad64:	00045470 	.word	0x00045470
   1ad68:	000453dc 	.word	0x000453dc
   1ad6c:	000454c0 	.word	0x000454c0
   1ad70:	00045498 	.word	0x00045498
   1ad74:	00045484 	.word	0x00045484

0001ad78 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>:
   1ad78:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad7c:	e1a04003 	mov	r4, r3
   1ad80:	ed2d8b02 	vpush	{d8}
   1ad84:	e59f3268 	ldr	r3, [pc, #616]	; 1aff4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x27c>
   1ad88:	e244c001 	sub	ip, r4, #1
   1ad8c:	e28db028 	add	fp, sp, #40	; 0x28
   1ad90:	e15c0003 	cmp	ip, r3
   1ad94:	e24dd00c 	sub	sp, sp, #12
   1ad98:	8a000052 	bhi	1aee8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x170>
   1ad9c:	e1a09002 	mov	r9, r2
   1ada0:	e284201b 	add	r2, r4, #27
   1ada4:	e59b3004 	ldr	r3, [fp, #4]
   1ada8:	e3c22007 	bic	r2, r2, #7
   1adac:	e04dd002 	sub	sp, sp, r2
   1adb0:	e3a0a000 	mov	sl, #0
   1adb4:	e3a0c040 	mov	ip, #64	; 0x40
   1adb8:	e3a07045 	mov	r7, #69	; 0x45
   1adbc:	e5cd3009 	strb	r3, [sp, #9]
   1adc0:	e1a0300d 	mov	r3, sp
   1adc4:	e2848014 	add	r8, r4, #20
   1adc8:	e6bfefb8 	rev16	lr, r8
   1adcc:	e1a06000 	mov	r6, r0
   1add0:	e5900000 	ldr	r0, [r0]
   1add4:	e1a05001 	mov	r5, r1
   1add8:	e6ff107e 	uxth	r1, lr
   1addc:	e1a01421 	lsr	r1, r1, #8
   1ade0:	e150000a 	cmp	r0, sl
   1ade4:	ee083a10 	vmov	s16, r3
   1ade8:	e5cd1003 	strb	r1, [sp, #3]
   1adec:	e5cde002 	strb	lr, [sp, #2]
   1adf0:	e5cd7000 	strb	r7, [sp]
   1adf4:	e5cda001 	strb	sl, [sp, #1]
   1adf8:	e5cda004 	strb	sl, [sp, #4]
   1adfc:	e5cda005 	strb	sl, [sp, #5]
   1ae00:	e5cda007 	strb	sl, [sp, #7]
   1ae04:	e5cdc006 	strb	ip, [sp, #6]
   1ae08:	e5cdc008 	strb	ip, [sp, #8]
   1ae0c:	0a000054 	beq	1af64 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1ec>
   1ae10:	eb001767 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   1ae14:	e2507000 	subs	r7, r0, #0
   1ae18:	0a000055 	beq	1af74 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1fc>
   1ae1c:	e28d100c 	add	r1, sp, #12
   1ae20:	eb001886 	bl	21040 <CIPAddress::CopyTo(unsigned char*) const>
   1ae24:	e1a00005 	mov	r0, r5
   1ae28:	e28d1010 	add	r1, sp, #16
   1ae2c:	eb001883 	bl	21040 <CIPAddress::CopyTo(unsigned char*) const>
   1ae30:	e3a01014 	mov	r1, #20
   1ae34:	e1a0000d 	mov	r0, sp
   1ae38:	e5cda00a 	strb	sl, [sp, #10]
   1ae3c:	e5cda00b 	strb	sl, [sp, #11]
   1ae40:	eb001a49 	bl	2176c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1ae44:	e3590000 	cmp	r9, #0
   1ae48:	e1a02420 	lsr	r2, r0, #8
   1ae4c:	e5cd000a 	strb	r0, [sp, #10]
   1ae50:	e5cd200b 	strb	r2, [sp, #11]
   1ae54:	0a000033 	beq	1af28 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1b0>
   1ae58:	e1a02004 	mov	r2, r4
   1ae5c:	e1a01009 	mov	r1, r9
   1ae60:	e28d0014 	add	r0, sp, #20
   1ae64:	eb003e71 	bl	2a830 <memcpy>
   1ae68:	e1a00007 	mov	r0, r7
   1ae6c:	eb00188a 	bl	2109c <CIPAddress::IsNull() const>
   1ae70:	e3500000 	cmp	r0, #0
   1ae74:	0a000003 	beq	1ae88 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x110>
   1ae78:	e1a00005 	mov	r0, r5
   1ae7c:	eb001894 	bl	210d4 <CIPAddress::IsBroadcast() const>
   1ae80:	e2504000 	subs	r4, r0, #0
   1ae84:	0a00001c 	beq	1aefc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x184>
   1ae88:	e24b0034 	sub	r0, fp, #52	; 0x34
   1ae8c:	eb0017a3 	bl	20d20 <CIPAddress::CIPAddress()>
   1ae90:	e5960000 	ldr	r0, [r6]
   1ae94:	eb00174a 	bl	20bc4 <CNetConfig::GetNetMask() const>
   1ae98:	e1a01005 	mov	r1, r5
   1ae9c:	e1a02000 	mov	r2, r0
   1aea0:	e1a00007 	mov	r0, r7
   1aea4:	eb0018bd 	bl	211a0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   1aea8:	e2504000 	subs	r4, r0, #0
   1aeac:	0a000021 	beq	1af38 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1c0>
   1aeb0:	e5960004 	ldr	r0, [r6, #4]
   1aeb4:	e3500000 	cmp	r0, #0
   1aeb8:	0a000031 	beq	1af84 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x20c>
   1aebc:	e1a03008 	mov	r3, r8
   1aec0:	ee182a10 	vmov	r2, s16
   1aec4:	e1a01005 	mov	r1, r5
   1aec8:	eb0001e7 	bl	1b66c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>
   1aecc:	e1a04000 	mov	r4, r0
   1aed0:	e24b0034 	sub	r0, fp, #52	; 0x34
   1aed4:	eb0017a7 	bl	20d78 <CIPAddress::~CIPAddress()>
   1aed8:	e1a00004 	mov	r0, r4
   1aedc:	e24bd028 	sub	sp, fp, #40	; 0x28
   1aee0:	ecbd8b02 	vpop	{d8}
   1aee4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aee8:	e3a04000 	mov	r4, #0
   1aeec:	e1a00004 	mov	r0, r4
   1aef0:	e24bd028 	sub	sp, fp, #40	; 0x28
   1aef4:	ecbd8b02 	vpop	{d8}
   1aef8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aefc:	e5960008 	ldr	r0, [r6, #8]
   1af00:	e3500000 	cmp	r0, #0
   1af04:	0a000039 	beq	1aff0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x278>
   1af08:	e1a03008 	mov	r3, r8
   1af0c:	e1a0200d 	mov	r2, sp
   1af10:	e1a01004 	mov	r1, r4
   1af14:	eb000856 	bl	1d074 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1af18:	e1a00004 	mov	r0, r4
   1af1c:	e24bd028 	sub	sp, fp, #40	; 0x28
   1af20:	ecbd8b02 	vpop	{d8}
   1af24:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af28:	e3a020ad 	mov	r2, #173	; 0xad
   1af2c:	e59f10c4 	ldr	r1, [pc, #196]	; 1aff8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x280>
   1af30:	e59f00c4 	ldr	r0, [pc, #196]	; 1affc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x284>
   1af34:	eb00261b 	bl	247a8 <assertion_failed>
   1af38:	e1a00005 	mov	r0, r5
   1af3c:	eb001833 	bl	21010 <CIPAddress::Get() const>
   1af40:	e1a01000 	mov	r1, r0
   1af44:	e2860030 	add	r0, r6, #48	; 0x30
   1af48:	eb00090c 	bl	1d380 <CRouteCache::GetRoute(unsigned char const*) const>
   1af4c:	e2501000 	subs	r1, r0, #0
   1af50:	0a00000f 	beq	1af94 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x21c>
   1af54:	e24b0034 	sub	r0, fp, #52	; 0x34
   1af58:	eb0017f7 	bl	20f3c <CIPAddress::Set(unsigned char const*)>
   1af5c:	e24b5034 	sub	r5, fp, #52	; 0x34
   1af60:	eaffffd2 	b	1aeb0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x138>
   1af64:	e3a020a2 	mov	r2, #162	; 0xa2
   1af68:	e59f1088 	ldr	r1, [pc, #136]	; 1aff8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x280>
   1af6c:	e59f008c 	ldr	r0, [pc, #140]	; 1b000 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x288>
   1af70:	eb00260c 	bl	247a8 <assertion_failed>
   1af74:	e3a020a4 	mov	r2, #164	; 0xa4
   1af78:	e59f1078 	ldr	r1, [pc, #120]	; 1aff8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x280>
   1af7c:	e59f0080 	ldr	r0, [pc, #128]	; 1b004 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x28c>
   1af80:	eb002608 	bl	247a8 <assertion_failed>
   1af84:	e3a020d0 	mov	r2, #208	; 0xd0
   1af88:	e59f1068 	ldr	r1, [pc, #104]	; 1aff8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x280>
   1af8c:	e59f0074 	ldr	r0, [pc, #116]	; 1b008 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x290>
   1af90:	eb002604 	bl	247a8 <assertion_failed>
   1af94:	e5960000 	ldr	r0, [r6]
   1af98:	eb00170b 	bl	20bcc <CNetConfig::GetDefaultGateway() const>
   1af9c:	e1a05000 	mov	r5, r0
   1afa0:	eb00183d 	bl	2109c <CIPAddress::IsNull() const>
   1afa4:	e3500000 	cmp	r0, #0
   1afa8:	0a000007 	beq	1afcc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x254>
   1afac:	e5960008 	ldr	r0, [r6, #8]
   1afb0:	e3500000 	cmp	r0, #0
   1afb4:	0a00000d 	beq	1aff0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x278>
   1afb8:	e1a03008 	mov	r3, r8
   1afbc:	ee182a10 	vmov	r2, s16
   1afc0:	e1a01004 	mov	r1, r4
   1afc4:	eb00082a 	bl	1d074 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1afc8:	eaffffc0 	b	1aed0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x158>
   1afcc:	e5960004 	ldr	r0, [r6, #4]
   1afd0:	e3500000 	cmp	r0, #0
   1afd4:	0affffea 	beq	1af84 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x20c>
   1afd8:	e3550000 	cmp	r5, #0
   1afdc:	1affffb6 	bne	1aebc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x144>
   1afe0:	e3a020d1 	mov	r2, #209	; 0xd1
   1afe4:	e59f100c 	ldr	r1, [pc, #12]	; 1aff8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x280>
   1afe8:	e59f001c 	ldr	r0, [pc, #28]	; 1b00c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x294>
   1afec:	eb0025ed 	bl	247a8 <assertion_failed>
   1aff0:	ebfffe81 	bl	1a9fc <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]>
   1aff4:	0000062b 	.word	0x0000062b
   1aff8:	00045470 	.word	0x00045470
   1affc:	000454d4 	.word	0x000454d4
   1b000:	000453dc 	.word	0x000453dc
   1b004:	000454c0 	.word	0x000454c0
   1b008:	00045498 	.word	0x00045498
   1b00c:	000454e4 	.word	0x000454e4

0001b010 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>:
   1b010:	e92d4030 	push	{r4, r5, lr}
   1b014:	e3510000 	cmp	r1, #0
   1b018:	e24dd00c 	sub	sp, sp, #12
   1b01c:	0a000027 	beq	1b0c0 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xb0>
   1b020:	e3520000 	cmp	r2, #0
   1b024:	e1a04002 	mov	r4, r2
   1b028:	0a000028 	beq	1b0d0 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xc0>
   1b02c:	e280000c 	add	r0, r0, #12
   1b030:	e28d2004 	add	r2, sp, #4
   1b034:	e1a05003 	mov	r5, r3
   1b038:	eb001908 	bl	21460 <CNetQueue::Dequeue(void*, void**)>
   1b03c:	e3500000 	cmp	r0, #0
   1b040:	e5840000 	str	r0, [r4]
   1b044:	0a000017 	beq	1b0a8 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x98>
   1b048:	e59d4004 	ldr	r4, [sp, #4]
   1b04c:	e3540000 	cmp	r4, #0
   1b050:	0a000016 	beq	1b0b0 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xa0>
   1b054:	e59d301c 	ldr	r3, [sp, #28]
   1b058:	e3530000 	cmp	r3, #0
   1b05c:	0a00001f 	beq	1b0e0 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xd0>
   1b060:	e5d43000 	ldrb	r3, [r4]
   1b064:	e59d201c 	ldr	r2, [sp, #28]
   1b068:	e3550000 	cmp	r5, #0
   1b06c:	e5823000 	str	r3, [r2]
   1b070:	0a00001e 	beq	1b0f0 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xe0>
   1b074:	e1a00005 	mov	r0, r5
   1b078:	e2841001 	add	r1, r4, #1
   1b07c:	eb0017ae 	bl	20f3c <CIPAddress::Set(unsigned char const*)>
   1b080:	e59d3018 	ldr	r3, [sp, #24]
   1b084:	e3530000 	cmp	r3, #0
   1b088:	0a00001c 	beq	1b100 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xf0>
   1b08c:	e59d0018 	ldr	r0, [sp, #24]
   1b090:	e2841005 	add	r1, r4, #5
   1b094:	eb0017a8 	bl	20f3c <CIPAddress::Set(unsigned char const*)>
   1b098:	e1a00004 	mov	r0, r4
   1b09c:	e3a01009 	mov	r1, #9
   1b0a0:	eb003fd6 	bl	2b000 <operator delete(void*, unsigned int)>
   1b0a4:	e3a00001 	mov	r0, #1
   1b0a8:	e28dd00c 	add	sp, sp, #12
   1b0ac:	e8bd8030 	pop	{r4, r5, pc}
   1b0b0:	e3a020e2 	mov	r2, #226	; 0xe2
   1b0b4:	e59f1054 	ldr	r1, [pc, #84]	; 1b110 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b0b8:	e59f0054 	ldr	r0, [pc, #84]	; 1b114 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x104>
   1b0bc:	eb0025b9 	bl	247a8 <assertion_failed>
   1b0c0:	e3a020d9 	mov	r2, #217	; 0xd9
   1b0c4:	e59f1044 	ldr	r1, [pc, #68]	; 1b110 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b0c8:	e59f0048 	ldr	r0, [pc, #72]	; 1b118 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x108>
   1b0cc:	eb0025b5 	bl	247a8 <assertion_failed>
   1b0d0:	e3a020da 	mov	r2, #218	; 0xda
   1b0d4:	e59f1034 	ldr	r1, [pc, #52]	; 1b110 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b0d8:	e59f003c 	ldr	r0, [pc, #60]	; 1b11c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x10c>
   1b0dc:	eb0025b1 	bl	247a8 <assertion_failed>
   1b0e0:	e3a020e4 	mov	r2, #228	; 0xe4
   1b0e4:	e59f1024 	ldr	r1, [pc, #36]	; 1b110 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b0e8:	e59f0030 	ldr	r0, [pc, #48]	; 1b120 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x110>
   1b0ec:	eb0025ad 	bl	247a8 <assertion_failed>
   1b0f0:	e3a020e7 	mov	r2, #231	; 0xe7
   1b0f4:	e59f1014 	ldr	r1, [pc, #20]	; 1b110 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b0f8:	e59f0024 	ldr	r0, [pc, #36]	; 1b124 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x114>
   1b0fc:	eb0025a9 	bl	247a8 <assertion_failed>
   1b100:	e3a020ea 	mov	r2, #234	; 0xea
   1b104:	e59f1004 	ldr	r1, [pc, #4]	; 1b110 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b108:	e59f0018 	ldr	r0, [pc, #24]	; 1b128 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x118>
   1b10c:	eb0025a5 	bl	247a8 <assertion_failed>
   1b110:	00045470 	.word	0x00045470
   1b114:	00045458 	.word	0x00045458
   1b118:	0004256c 	.word	0x0004256c
   1b11c:	00042d54 	.word	0x00042d54
   1b120:	000454f4 	.word	0x000454f4
   1b124:	00045504 	.word	0x00045504
   1b128:	00045514 	.word	0x00045514

0001b12c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>:
   1b12c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b130:	e24dd014 	sub	sp, sp, #20
   1b134:	e1a04001 	mov	r4, r1
   1b138:	e1a05002 	mov	r5, r2
   1b13c:	e1a0100d 	mov	r1, sp
   1b140:	e3a02000 	mov	r2, #0
   1b144:	e2800024 	add	r0, r0, #36	; 0x24
   1b148:	e1a06003 	mov	r6, r3
   1b14c:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   1b150:	eb0018c2 	bl	21460 <CNetQueue::Dequeue(void*, void**)>
   1b154:	e3500000 	cmp	r0, #0
   1b158:	0a000020 	beq	1b1e0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xb4>
   1b15c:	e350000e 	cmp	r0, #14
   1b160:	1a000024 	bne	1b1f8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xcc>
   1b164:	e3540000 	cmp	r4, #0
   1b168:	0a000026 	beq	1b208 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xdc>
   1b16c:	e5dd3000 	ldrb	r3, [sp]
   1b170:	e3570000 	cmp	r7, #0
   1b174:	e5c43000 	strb	r3, [r4]
   1b178:	0a00001a 	beq	1b1e8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xbc>
   1b17c:	e5dd3001 	ldrb	r3, [sp, #1]
   1b180:	e3550000 	cmp	r5, #0
   1b184:	e5873000 	str	r3, [r7]
   1b188:	0a000022 	beq	1b218 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xec>
   1b18c:	e1a00005 	mov	r0, r5
   1b190:	e28d1002 	add	r1, sp, #2
   1b194:	eb001768 	bl	20f3c <CIPAddress::Set(unsigned char const*)>
   1b198:	e3560000 	cmp	r6, #0
   1b19c:	0a000021 	beq	1b228 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xfc>
   1b1a0:	e1a00006 	mov	r0, r6
   1b1a4:	e28d1006 	add	r1, sp, #6
   1b1a8:	eb001763 	bl	20f3c <CIPAddress::Set(unsigned char const*)>
   1b1ac:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1b1b0:	e3530000 	cmp	r3, #0
   1b1b4:	0a00001f 	beq	1b238 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x10c>
   1b1b8:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
   1b1bc:	e1dd30ba 	ldrh	r3, [sp, #10]
   1b1c0:	e3520000 	cmp	r2, #0
   1b1c4:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1b1c8:	e1c230b0 	strh	r3, [r2]
   1b1cc:	0a00001d 	beq	1b248 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x11c>
   1b1d0:	e3a00001 	mov	r0, #1
   1b1d4:	e1dd30bc 	ldrh	r3, [sp, #12]
   1b1d8:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
   1b1dc:	e1c230b0 	strh	r3, [r2]
   1b1e0:	e28dd014 	add	sp, sp, #20
   1b1e4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1b1e8:	e59f2068 	ldr	r2, [pc, #104]	; 1b258 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x12c>
   1b1ec:	e59f1068 	ldr	r1, [pc, #104]	; 1b25c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b1f0:	e59f0068 	ldr	r0, [pc, #104]	; 1b260 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x134>
   1b1f4:	eb00256b 	bl	247a8 <assertion_failed>
   1b1f8:	e3a020fe 	mov	r2, #254	; 0xfe
   1b1fc:	e59f1058 	ldr	r1, [pc, #88]	; 1b25c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b200:	e59f005c 	ldr	r0, [pc, #92]	; 1b264 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x138>
   1b204:	eb002567 	bl	247a8 <assertion_failed>
   1b208:	e3a02c01 	mov	r2, #256	; 0x100
   1b20c:	e59f1048 	ldr	r1, [pc, #72]	; 1b25c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b210:	e59f0050 	ldr	r0, [pc, #80]	; 1b268 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x13c>
   1b214:	eb002563 	bl	247a8 <assertion_failed>
   1b218:	e59f204c 	ldr	r2, [pc, #76]	; 1b26c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x140>
   1b21c:	e59f1038 	ldr	r1, [pc, #56]	; 1b25c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b220:	e59f0048 	ldr	r0, [pc, #72]	; 1b270 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x144>
   1b224:	eb00255f 	bl	247a8 <assertion_failed>
   1b228:	e59f2044 	ldr	r2, [pc, #68]	; 1b274 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x148>
   1b22c:	e59f1028 	ldr	r1, [pc, #40]	; 1b25c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b230:	e59f0040 	ldr	r0, [pc, #64]	; 1b278 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x14c>
   1b234:	eb00255b 	bl	247a8 <assertion_failed>
   1b238:	e3a02f43 	mov	r2, #268	; 0x10c
   1b23c:	e59f1018 	ldr	r1, [pc, #24]	; 1b25c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b240:	e59f0034 	ldr	r0, [pc, #52]	; 1b27c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x150>
   1b244:	eb002557 	bl	247a8 <assertion_failed>
   1b248:	e59f2030 	ldr	r2, [pc, #48]	; 1b280 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x154>
   1b24c:	e59f1008 	ldr	r1, [pc, #8]	; 1b25c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b250:	e59f002c 	ldr	r0, [pc, #44]	; 1b284 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x158>
   1b254:	eb002553 	bl	247a8 <assertion_failed>
   1b258:	00000103 	.word	0x00000103
   1b25c:	00045470 	.word	0x00045470
   1b260:	000454f4 	.word	0x000454f4
   1b264:	00045524 	.word	0x00045524
   1b268:	00045544 	.word	0x00045544
   1b26c:	00000106 	.word	0x00000106
   1b270:	00045504 	.word	0x00045504
   1b274:	00000109 	.word	0x00000109
   1b278:	00045514 	.word	0x00045514
   1b27c:	00045550 	.word	0x00045550
   1b280:	0000010f 	.word	0x0000010f
   1b284:	00045560 	.word	0x00045560

0001b288 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>:
   1b288:	e2800030 	add	r0, r0, #48	; 0x30
   1b28c:	ea000802 	b	1d29c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>

0001b290 <CNetworkLayer::GetGateway(unsigned char const*) const>:
   1b290:	e92d4010 	push	{r4, lr}
   1b294:	e1a04000 	mov	r4, r0
   1b298:	e2800030 	add	r0, r0, #48	; 0x30
   1b29c:	eb000837 	bl	1d380 <CRouteCache::GetRoute(unsigned char const*) const>
   1b2a0:	e3500000 	cmp	r0, #0
   1b2a4:	18bd8010 	popne	{r4, pc}
   1b2a8:	e5940000 	ldr	r0, [r4]
   1b2ac:	e3500000 	cmp	r0, #0
   1b2b0:	0a000004 	beq	1b2c8 <CNetworkLayer::GetGateway(unsigned char const*) const+0x38>
   1b2b4:	eb001644 	bl	20bcc <CNetConfig::GetDefaultGateway() const>
   1b2b8:	e3500000 	cmp	r0, #0
   1b2bc:	0a000005 	beq	1b2d8 <CNetworkLayer::GetGateway(unsigned char const*) const+0x48>
   1b2c0:	e8bd4010 	pop	{r4, lr}
   1b2c4:	ea001751 	b	21010 <CIPAddress::Get() const>
   1b2c8:	e59f2018 	ldr	r2, [pc, #24]	; 1b2e8 <CNetworkLayer::GetGateway(unsigned char const*) const+0x58>
   1b2cc:	e59f1018 	ldr	r1, [pc, #24]	; 1b2ec <CNetworkLayer::GetGateway(unsigned char const*) const+0x5c>
   1b2d0:	e59f0018 	ldr	r0, [pc, #24]	; 1b2f0 <CNetworkLayer::GetGateway(unsigned char const*) const+0x60>
   1b2d4:	eb002533 	bl	247a8 <assertion_failed>
   1b2d8:	e3a02f49 	mov	r2, #292	; 0x124
   1b2dc:	e59f1008 	ldr	r1, [pc, #8]	; 1b2ec <CNetworkLayer::GetGateway(unsigned char const*) const+0x5c>
   1b2e0:	e59f000c 	ldr	r0, [pc, #12]	; 1b2f4 <CNetworkLayer::GetGateway(unsigned char const*) const+0x64>
   1b2e4:	eb00252f 	bl	247a8 <assertion_failed>
   1b2e8:	00000122 	.word	0x00000122
   1b2ec:	00045470 	.word	0x00045470
   1b2f0:	000453dc 	.word	0x000453dc
   1b2f4:	00045574 	.word	0x00045574

0001b2f8 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>:
   1b2f8:	e5900008 	ldr	r0, [r0, #8]
   1b2fc:	e3500000 	cmp	r0, #0
   1b300:	0a000000 	beq	1b308 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)+0x10>
   1b304:	ea00075a 	b	1d074 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1b308:	e92d4010 	push	{r4, lr}
   1b30c:	ebfffdba 	bl	1a9fc <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]>

0001b310 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>:
   1b310:	e92d4070 	push	{r4, r5, r6, lr}
   1b314:	e3a05000 	mov	r5, #0
   1b318:	e1a04000 	mov	r4, r0
   1b31c:	e8800026 	stm	r0, {r1, r2, r5}
   1b320:	e580500c 	str	r5, [r0, #12]
   1b324:	e2800010 	add	r0, r0, #16
   1b328:	eb0017c9 	bl	21254 <CNetQueue::CNetQueue()>
   1b32c:	e284001c 	add	r0, r4, #28
   1b330:	eb0017c7 	bl	21254 <CNetQueue::CNetQueue()>
   1b334:	e2840028 	add	r0, r4, #40	; 0x28
   1b338:	eb0017c5 	bl	21254 <CNetQueue::CNetQueue()>
   1b33c:	e5943000 	ldr	r3, [r4]
   1b340:	e1c453b4 	strh	r5, [r4, #52]	; 0x34
   1b344:	e1530005 	cmp	r3, r5
   1b348:	0a000004 	beq	1b360 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x50>
   1b34c:	e5943004 	ldr	r3, [r4, #4]
   1b350:	e3530000 	cmp	r3, #0
   1b354:	0a000005 	beq	1b370 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x60>
   1b358:	e1a00004 	mov	r0, r4
   1b35c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b360:	e3a02025 	mov	r2, #37	; 0x25
   1b364:	e59f1014 	ldr	r1, [pc, #20]	; 1b380 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x70>
   1b368:	e59f0014 	ldr	r0, [pc, #20]	; 1b384 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x74>
   1b36c:	eb00250d 	bl	247a8 <assertion_failed>
   1b370:	e3a02026 	mov	r2, #38	; 0x26
   1b374:	e59f1004 	ldr	r1, [pc, #4]	; 1b380 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x70>
   1b378:	e59f0008 	ldr	r0, [pc, #8]	; 1b388 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x78>
   1b37c:	eb002509 	bl	247a8 <assertion_failed>
   1b380:	0004558c 	.word	0x0004558c
   1b384:	000453dc 	.word	0x000453dc
   1b388:	0004559c 	.word	0x0004559c

0001b38c <CLinkLayer::~CLinkLayer()>:
   1b38c:	e92d4070 	push	{r4, r5, r6, lr}
   1b390:	e590500c 	ldr	r5, [r0, #12]
   1b394:	e1a04000 	mov	r4, r0
   1b398:	e3550000 	cmp	r5, #0
   1b39c:	0a000004 	beq	1b3b4 <CLinkLayer::~CLinkLayer()+0x28>
   1b3a0:	e1a00005 	mov	r0, r5
   1b3a4:	eb000317 	bl	1c008 <CARPHandler::~CARPHandler()>
   1b3a8:	e1a00005 	mov	r0, r5
   1b3ac:	e3a01f93 	mov	r1, #588	; 0x24c
   1b3b0:	eb003f12 	bl	2b000 <operator delete(void*, unsigned int)>
   1b3b4:	e3a03000 	mov	r3, #0
   1b3b8:	e1a00004 	mov	r0, r4
   1b3bc:	e584300c 	str	r3, [r4, #12]
   1b3c0:	e5843008 	str	r3, [r4, #8]
   1b3c4:	e5843004 	str	r3, [r4, #4]
   1b3c8:	e4803028 	str	r3, [r0], #40	; 0x28
   1b3cc:	eb0017d8 	bl	21334 <CNetQueue::~CNetQueue()>
   1b3d0:	e284001c 	add	r0, r4, #28
   1b3d4:	eb0017d6 	bl	21334 <CNetQueue::~CNetQueue()>
   1b3d8:	e2840010 	add	r0, r4, #16
   1b3dc:	eb0017d4 	bl	21334 <CNetQueue::~CNetQueue()>
   1b3e0:	e1a00004 	mov	r0, r4
   1b3e4:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b3e8 <CLinkLayer::Initialize()>:
   1b3e8:	e92d4030 	push	{r4, r5, lr}
   1b3ec:	e5903000 	ldr	r3, [r0]
   1b3f0:	e24dd00c 	sub	sp, sp, #12
   1b3f4:	e3530000 	cmp	r3, #0
   1b3f8:	0a00000d 	beq	1b434 <CLinkLayer::Initialize()+0x4c>
   1b3fc:	e1a04000 	mov	r4, r0
   1b400:	e3a00f93 	mov	r0, #588	; 0x24c
   1b404:	eb003eef 	bl	2afc8 <operator new(unsigned int)>
   1b408:	e1a02004 	mov	r2, r4
   1b40c:	e4921010 	ldr	r1, [r2], #16
   1b410:	e1a03004 	mov	r3, r4
   1b414:	e58d2000 	str	r2, [sp]
   1b418:	e5942004 	ldr	r2, [r4, #4]
   1b41c:	e1a05000 	mov	r5, r0
   1b420:	eb0002d1 	bl	1bf6c <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>
   1b424:	e3a00001 	mov	r0, #1
   1b428:	e584500c 	str	r5, [r4, #12]
   1b42c:	e28dd00c 	add	sp, sp, #12
   1b430:	e8bd8030 	pop	{r4, r5, pc}
   1b434:	e3a02035 	mov	r2, #53	; 0x35
   1b438:	e59f1004 	ldr	r1, [pc, #4]	; 1b444 <CLinkLayer::Initialize()+0x5c>
   1b43c:	e59f0004 	ldr	r0, [pc, #4]	; 1b448 <CLinkLayer::Initialize()+0x60>
   1b440:	eb0024d8 	bl	247a8 <assertion_failed>
   1b444:	0004558c 	.word	0x0004558c
   1b448:	000453dc 	.word	0x000453dc

0001b44c <CLinkLayer::AttachLayer(CNetworkLayer*)>:
   1b44c:	e5903008 	ldr	r3, [r0, #8]
   1b450:	e92d4010 	push	{r4, lr}
   1b454:	e3530000 	cmp	r3, #0
   1b458:	1a000006 	bne	1b478 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x2c>
   1b45c:	e3510000 	cmp	r1, #0
   1b460:	e5801008 	str	r1, [r0, #8]
   1b464:	18bd8010 	popne	{r4, pc}
   1b468:	e3a02040 	mov	r2, #64	; 0x40
   1b46c:	e59f1014 	ldr	r1, [pc, #20]	; 1b488 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x3c>
   1b470:	e59f0014 	ldr	r0, [pc, #20]	; 1b48c <CLinkLayer::AttachLayer(CNetworkLayer*)+0x40>
   1b474:	eb0024cb 	bl	247a8 <assertion_failed>
   1b478:	e3a0203e 	mov	r2, #62	; 0x3e
   1b47c:	e59f1004 	ldr	r1, [pc, #4]	; 1b488 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x3c>
   1b480:	e59f0008 	ldr	r0, [pc, #8]	; 1b490 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x44>
   1b484:	eb0024c7 	bl	247a8 <assertion_failed>
   1b488:	0004558c 	.word	0x0004558c
   1b48c:	000453f0 	.word	0x000453f0
   1b490:	000455b0 	.word	0x000455b0

0001b494 <CLinkLayer::Process()>:
   1b494:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b498:	e1a04000 	mov	r4, r0
   1b49c:	e5900004 	ldr	r0, [r0, #4]
   1b4a0:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1b4a4:	e3500000 	cmp	r0, #0
   1b4a8:	e24dd008 	sub	sp, sp, #8
   1b4ac:	0a000057 	beq	1b610 <CLinkLayer::Process()+0x17c>
   1b4b0:	eb000225 	bl	1bd4c <CNetDeviceLayer::GetMACAddress() const>
   1b4b4:	e2506000 	subs	r6, r0, #0
   1b4b8:	0a000058 	beq	1b620 <CLinkLayer::Process()+0x18c>
   1b4bc:	e5940004 	ldr	r0, [r4, #4]
   1b4c0:	e3500000 	cmp	r0, #0
   1b4c4:	0a000059 	beq	1b630 <CLinkLayer::Process()+0x19c>
   1b4c8:	e28d3018 	add	r3, sp, #24
   1b4cc:	e59f717c 	ldr	r7, [pc, #380]	; 1b650 <CLinkLayer::Process()+0x1bc>
   1b4d0:	e28d5010 	add	r5, sp, #16
   1b4d4:	e283800e 	add	r8, r3, #14
   1b4d8:	e28d200c 	add	r2, sp, #12
   1b4dc:	e28d1018 	add	r1, sp, #24
   1b4e0:	eb000229 	bl	1bd8c <CNetDeviceLayer::Receive(void*, unsigned int*)>
   1b4e4:	e3500000 	cmp	r0, #0
   1b4e8:	0a000041 	beq	1b5f4 <CLinkLayer::Process()+0x160>
   1b4ec:	e59d300c 	ldr	r3, [sp, #12]
   1b4f0:	e3530d19 	cmp	r3, #1600	; 0x640
   1b4f4:	8a000029 	bhi	1b5a0 <CLinkLayer::Process()+0x10c>
   1b4f8:	e353000e 	cmp	r3, #14
   1b4fc:	9a000016 	bls	1b55c <CLinkLayer::Process()+0xc8>
   1b500:	e28d1018 	add	r1, sp, #24
   1b504:	e1a00005 	mov	r0, r5
   1b508:	eb003dfa 	bl	2acf8 <CMACAddress::CMACAddress(unsigned char const*)>
   1b50c:	e1a01006 	mov	r1, r6
   1b510:	e1a00005 	mov	r0, r5
   1b514:	eb003de2 	bl	2aca4 <CMACAddress::operator!=(CMACAddress const&) const>
   1b518:	e3500000 	cmp	r0, #0
   1b51c:	1a000010 	bne	1b564 <CLinkLayer::Process()+0xd0>
   1b520:	e59d200c 	ldr	r2, [sp, #12]
   1b524:	e242200e 	sub	r2, r2, #14
   1b528:	e3520000 	cmp	r2, #0
   1b52c:	e58d200c 	str	r2, [sp, #12]
   1b530:	0a00002b 	beq	1b5e4 <CLinkLayer::Process()+0x150>
   1b534:	e1dd32b4 	ldrh	r3, [sp, #36]	; 0x24
   1b538:	e3530008 	cmp	r3, #8
   1b53c:	0a000012 	beq	1b58c <CLinkLayer::Process()+0xf8>
   1b540:	e1530007 	cmp	r3, r7
   1b544:	0a00000b 	beq	1b578 <CLinkLayer::Process()+0xe4>
   1b548:	e1d423b4 	ldrh	r2, [r4, #52]	; 0x34
   1b54c:	e1520003 	cmp	r2, r3
   1b550:	0a000016 	beq	1b5b0 <CLinkLayer::Process()+0x11c>
   1b554:	e1a00005 	mov	r0, r5
   1b558:	eb003db8 	bl	2ac40 <CMACAddress::~CMACAddress()>
   1b55c:	e5940004 	ldr	r0, [r4, #4]
   1b560:	eaffffdc 	b	1b4d8 <CLinkLayer::Process()+0x44>
   1b564:	e1a00005 	mov	r0, r5
   1b568:	eb003e13 	bl	2adbc <CMACAddress::IsBroadcast() const>
   1b56c:	e3500000 	cmp	r0, #0
   1b570:	1affffea 	bne	1b520 <CLinkLayer::Process()+0x8c>
   1b574:	eafffff6 	b	1b554 <CLinkLayer::Process()+0xc0>
   1b578:	e3a03000 	mov	r3, #0
   1b57c:	e1a01008 	mov	r1, r8
   1b580:	e2840010 	add	r0, r4, #16
   1b584:	eb00176f 	bl	21348 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b588:	eafffff1 	b	1b554 <CLinkLayer::Process()+0xc0>
   1b58c:	e3a03000 	mov	r3, #0
   1b590:	e1a01008 	mov	r1, r8
   1b594:	e284001c 	add	r0, r4, #28
   1b598:	eb00176a 	bl	21348 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b59c:	eaffffec 	b	1b554 <CLinkLayer::Process()+0xc0>
   1b5a0:	e3a0204e 	mov	r2, #78	; 0x4e
   1b5a4:	e59f10a8 	ldr	r1, [pc, #168]	; 1b654 <CLinkLayer::Process()+0x1c0>
   1b5a8:	e59f00a8 	ldr	r0, [pc, #168]	; 1b658 <CLinkLayer::Process()+0x1c4>
   1b5ac:	eb00247d 	bl	247a8 <assertion_failed>
   1b5b0:	e3a00006 	mov	r0, #6
   1b5b4:	eb003e83 	bl	2afc8 <operator new(unsigned int)>
   1b5b8:	e3a02006 	mov	r2, #6
   1b5bc:	e28d3018 	add	r3, sp, #24
   1b5c0:	e0831002 	add	r1, r3, r2
   1b5c4:	e58d0004 	str	r0, [sp, #4]
   1b5c8:	eb003c98 	bl	2a830 <memcpy>
   1b5cc:	e1a01008 	mov	r1, r8
   1b5d0:	e59d3004 	ldr	r3, [sp, #4]
   1b5d4:	e59d200c 	ldr	r2, [sp, #12]
   1b5d8:	e2840028 	add	r0, r4, #40	; 0x28
   1b5dc:	eb001759 	bl	21348 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b5e0:	eaffffdb 	b	1b554 <CLinkLayer::Process()+0xc0>
   1b5e4:	e3a0205d 	mov	r2, #93	; 0x5d
   1b5e8:	e59f1064 	ldr	r1, [pc, #100]	; 1b654 <CLinkLayer::Process()+0x1c0>
   1b5ec:	e59f0068 	ldr	r0, [pc, #104]	; 1b65c <CLinkLayer::Process()+0x1c8>
   1b5f0:	eb00246c 	bl	247a8 <assertion_failed>
   1b5f4:	e594000c 	ldr	r0, [r4, #12]
   1b5f8:	e3500000 	cmp	r0, #0
   1b5fc:	0a00000f 	beq	1b640 <CLinkLayer::Process()+0x1ac>
   1b600:	eb000375 	bl	1c3dc <CARPHandler::Process()>
   1b604:	e28dde65 	add	sp, sp, #1616	; 0x650
   1b608:	e28dd008 	add	sp, sp, #8
   1b60c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1b610:	e3a02045 	mov	r2, #69	; 0x45
   1b614:	e59f1038 	ldr	r1, [pc, #56]	; 1b654 <CLinkLayer::Process()+0x1c0>
   1b618:	e59f0040 	ldr	r0, [pc, #64]	; 1b660 <CLinkLayer::Process()+0x1cc>
   1b61c:	eb002461 	bl	247a8 <assertion_failed>
   1b620:	e3a02047 	mov	r2, #71	; 0x47
   1b624:	e59f1028 	ldr	r1, [pc, #40]	; 1b654 <CLinkLayer::Process()+0x1c0>
   1b628:	e59f0034 	ldr	r0, [pc, #52]	; 1b664 <CLinkLayer::Process()+0x1d0>
   1b62c:	eb00245d 	bl	247a8 <assertion_failed>
   1b630:	e3a02049 	mov	r2, #73	; 0x49
   1b634:	e59f1018 	ldr	r1, [pc, #24]	; 1b654 <CLinkLayer::Process()+0x1c0>
   1b638:	e59f0020 	ldr	r0, [pc, #32]	; 1b660 <CLinkLayer::Process()+0x1cc>
   1b63c:	eb002459 	bl	247a8 <assertion_failed>
   1b640:	e3a02077 	mov	r2, #119	; 0x77
   1b644:	e59f1008 	ldr	r1, [pc, #8]	; 1b654 <CLinkLayer::Process()+0x1c0>
   1b648:	e59f0018 	ldr	r0, [pc, #24]	; 1b668 <CLinkLayer::Process()+0x1d4>
   1b64c:	eb002455 	bl	247a8 <assertion_failed>
   1b650:	00000608 	.word	0x00000608
   1b654:	0004558c 	.word	0x0004558c
   1b658:	00043190 	.word	0x00043190
   1b65c:	00045464 	.word	0x00045464
   1b660:	0004559c 	.word	0x0004559c
   1b664:	000455c8 	.word	0x000455c8
   1b668:	000455dc 	.word	0x000455dc

0001b66c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>:
   1b66c:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b670:	e1a04003 	mov	r4, r3
   1b674:	e59f317c 	ldr	r3, [pc, #380]	; 1b7f8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x18c>
   1b678:	e244c001 	sub	ip, r4, #1
   1b67c:	e28db01c 	add	fp, sp, #28
   1b680:	e15c0003 	cmp	ip, r3
   1b684:	e24dd010 	sub	sp, sp, #16
   1b688:	8a000033 	bhi	1b75c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xf0>
   1b68c:	e1a05000 	mov	r5, r0
   1b690:	e2843015 	add	r3, r4, #21
   1b694:	e5900004 	ldr	r0, [r0, #4]
   1b698:	e3c33007 	bic	r3, r3, #7
   1b69c:	e04dd003 	sub	sp, sp, r3
   1b6a0:	e3500000 	cmp	r0, #0
   1b6a4:	e28d8008 	add	r8, sp, #8
   1b6a8:	e284900e 	add	r9, r4, #14
   1b6ac:	0a000041 	beq	1b7b8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x14c>
   1b6b0:	e1a07001 	mov	r7, r1
   1b6b4:	e1a06002 	mov	r6, r2
   1b6b8:	eb0001a3 	bl	1bd4c <CNetDeviceLayer::GetMACAddress() const>
   1b6bc:	e3500000 	cmp	r0, #0
   1b6c0:	0a000040 	beq	1b7c8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x15c>
   1b6c4:	e28d100e 	add	r1, sp, #14
   1b6c8:	eb003da4 	bl	2ad60 <CMACAddress::CopyTo(unsigned char*) const>
   1b6cc:	e3a02000 	mov	r2, #0
   1b6d0:	e3a03008 	mov	r3, #8
   1b6d4:	e1560002 	cmp	r6, r2
   1b6d8:	e5c8200d 	strb	r2, [r8, #13]
   1b6dc:	e5c8300c 	strb	r3, [r8, #12]
   1b6e0:	0a000030 	beq	1b7a8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x13c>
   1b6e4:	e1a02004 	mov	r2, r4
   1b6e8:	e1a01006 	mov	r1, r6
   1b6ec:	e28d0016 	add	r0, sp, #22
   1b6f0:	eb003c4e 	bl	2a830 <memcpy>
   1b6f4:	e5953000 	ldr	r3, [r5]
   1b6f8:	e3530000 	cmp	r3, #0
   1b6fc:	0a000035 	beq	1b7d8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x16c>
   1b700:	e595300c 	ldr	r3, [r5, #12]
   1b704:	e3530000 	cmp	r3, #0
   1b708:	0a000036 	beq	1b7e8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x17c>
   1b70c:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b710:	eb003d47 	bl	2ac34 <CMACAddress::CMACAddress()>
   1b714:	e1a00007 	mov	r0, r7
   1b718:	eb00166d 	bl	210d4 <CIPAddress::IsBroadcast() const>
   1b71c:	e3500000 	cmp	r0, #0
   1b720:	0a000010 	beq	1b768 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xfc>
   1b724:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b728:	eb003d77 	bl	2ad0c <CMACAddress::SetBroadcast()>
   1b72c:	e1a01008 	mov	r1, r8
   1b730:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b734:	eb003d89 	bl	2ad60 <CMACAddress::CopyTo(unsigned char*) const>
   1b738:	e1a02009 	mov	r2, r9
   1b73c:	e1a01008 	mov	r1, r8
   1b740:	e5950004 	ldr	r0, [r5, #4]
   1b744:	eb00018d 	bl	1bd80 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1b748:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b74c:	eb003d3b 	bl	2ac40 <CMACAddress::~CMACAddress()>
   1b750:	e3a00001 	mov	r0, #1
   1b754:	e24bd01c 	sub	sp, fp, #28
   1b758:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b75c:	e3a00000 	mov	r0, #0
   1b760:	e24bd01c 	sub	sp, fp, #28
   1b764:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b768:	e5950000 	ldr	r0, [r5]
   1b76c:	eb00151a 	bl	20bdc <CNetConfig::GetBroadcastAddress() const>
   1b770:	e1a01000 	mov	r1, r0
   1b774:	e1a00007 	mov	r0, r7
   1b778:	eb00157f 	bl	20d7c <CIPAddress::operator==(CIPAddress const&) const>
   1b77c:	e3500000 	cmp	r0, #0
   1b780:	1affffe7 	bne	1b724 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xb8>
   1b784:	e58d9000 	str	r9, [sp]
   1b788:	e1a01007 	mov	r1, r7
   1b78c:	e1a03008 	mov	r3, r8
   1b790:	e595000c 	ldr	r0, [r5, #12]
   1b794:	e24b2024 	sub	r2, fp, #36	; 0x24
   1b798:	eb00040f 	bl	1c7dc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>
   1b79c:	e3500000 	cmp	r0, #0
   1b7a0:	1affffe1 	bne	1b72c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xc0>
   1b7a4:	eaffffe7 	b	1b748 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xdc>
   1b7a8:	e3a0208e 	mov	r2, #142	; 0x8e
   1b7ac:	e59f1048 	ldr	r1, [pc, #72]	; 1b7fc <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b7b0:	e59f0048 	ldr	r0, [pc, #72]	; 1b800 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x194>
   1b7b4:	eb0023fb 	bl	247a8 <assertion_failed>
   1b7b8:	e3a02087 	mov	r2, #135	; 0x87
   1b7bc:	e59f1038 	ldr	r1, [pc, #56]	; 1b7fc <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b7c0:	e59f003c 	ldr	r0, [pc, #60]	; 1b804 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x198>
   1b7c4:	eb0023f7 	bl	247a8 <assertion_failed>
   1b7c8:	e3a02089 	mov	r2, #137	; 0x89
   1b7cc:	e59f1028 	ldr	r1, [pc, #40]	; 1b7fc <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b7d0:	e59f0030 	ldr	r0, [pc, #48]	; 1b808 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x19c>
   1b7d4:	eb0023f3 	bl	247a8 <assertion_failed>
   1b7d8:	e3a02092 	mov	r2, #146	; 0x92
   1b7dc:	e59f1018 	ldr	r1, [pc, #24]	; 1b7fc <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b7e0:	e59f0024 	ldr	r0, [pc, #36]	; 1b80c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x1a0>
   1b7e4:	eb0023ef 	bl	247a8 <assertion_failed>
   1b7e8:	e3a02093 	mov	r2, #147	; 0x93
   1b7ec:	e59f1008 	ldr	r1, [pc, #8]	; 1b7fc <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b7f0:	e59f0018 	ldr	r0, [pc, #24]	; 1b810 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x1a4>
   1b7f4:	eb0023eb 	bl	247a8 <assertion_failed>
   1b7f8:	00000631 	.word	0x00000631
   1b7fc:	0004558c 	.word	0x0004558c
   1b800:	000455f0 	.word	0x000455f0
   1b804:	0004559c 	.word	0x0004559c
   1b808:	000455c8 	.word	0x000455c8
   1b80c:	000453dc 	.word	0x000453dc
   1b810:	000455dc 	.word	0x000455dc

0001b814 <CLinkLayer::Receive(void*, unsigned int*)>:
   1b814:	e3510000 	cmp	r1, #0
   1b818:	e92d4010 	push	{r4, lr}
   1b81c:	0a000009 	beq	1b848 <CLinkLayer::Receive(void*, unsigned int*)+0x34>
   1b820:	e3520000 	cmp	r2, #0
   1b824:	e1a04002 	mov	r4, r2
   1b828:	0a00000a 	beq	1b858 <CLinkLayer::Receive(void*, unsigned int*)+0x44>
   1b82c:	e3a02000 	mov	r2, #0
   1b830:	e280001c 	add	r0, r0, #28
   1b834:	eb001709 	bl	21460 <CNetQueue::Dequeue(void*, void**)>
   1b838:	e5840000 	str	r0, [r4]
   1b83c:	e2500000 	subs	r0, r0, #0
   1b840:	13a00001 	movne	r0, #1
   1b844:	e8bd8010 	pop	{r4, pc}
   1b848:	e3a020a9 	mov	r2, #169	; 0xa9
   1b84c:	e59f1014 	ldr	r1, [pc, #20]	; 1b868 <CLinkLayer::Receive(void*, unsigned int*)+0x54>
   1b850:	e59f0014 	ldr	r0, [pc, #20]	; 1b86c <CLinkLayer::Receive(void*, unsigned int*)+0x58>
   1b854:	eb0023d3 	bl	247a8 <assertion_failed>
   1b858:	e3a020aa 	mov	r2, #170	; 0xaa
   1b85c:	e59f1004 	ldr	r1, [pc, #4]	; 1b868 <CLinkLayer::Receive(void*, unsigned int*)+0x54>
   1b860:	e59f0008 	ldr	r0, [pc, #8]	; 1b870 <CLinkLayer::Receive(void*, unsigned int*)+0x5c>
   1b864:	eb0023cf 	bl	247a8 <assertion_failed>
   1b868:	0004558c 	.word	0x0004558c
   1b86c:	0004256c 	.word	0x0004256c
   1b870:	00042d54 	.word	0x00042d54

0001b874 <CLinkLayer::SendRaw(void const*, unsigned int)>:
   1b874:	e3510000 	cmp	r1, #0
   1b878:	e92d4010 	push	{r4, lr}
   1b87c:	0a000007 	beq	1b8a0 <CLinkLayer::SendRaw(void const*, unsigned int)+0x2c>
   1b880:	e3520000 	cmp	r2, #0
   1b884:	0a000009 	beq	1b8b0 <CLinkLayer::SendRaw(void const*, unsigned int)+0x3c>
   1b888:	e5900004 	ldr	r0, [r0, #4]
   1b88c:	e3500000 	cmp	r0, #0
   1b890:	0a00000a 	beq	1b8c0 <CLinkLayer::SendRaw(void const*, unsigned int)+0x4c>
   1b894:	eb000139 	bl	1bd80 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1b898:	e3a00001 	mov	r0, #1
   1b89c:	e8bd8010 	pop	{r4, pc}
   1b8a0:	e3a020b2 	mov	r2, #178	; 0xb2
   1b8a4:	e59f1024 	ldr	r1, [pc, #36]	; 1b8d0 <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b8a8:	e59f0024 	ldr	r0, [pc, #36]	; 1b8d4 <CLinkLayer::SendRaw(void const*, unsigned int)+0x60>
   1b8ac:	eb0023bd 	bl	247a8 <assertion_failed>
   1b8b0:	e3a020b3 	mov	r2, #179	; 0xb3
   1b8b4:	e59f1014 	ldr	r1, [pc, #20]	; 1b8d0 <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b8b8:	e59f0018 	ldr	r0, [pc, #24]	; 1b8d8 <CLinkLayer::SendRaw(void const*, unsigned int)+0x64>
   1b8bc:	eb0023b9 	bl	247a8 <assertion_failed>
   1b8c0:	e3a020b4 	mov	r2, #180	; 0xb4
   1b8c4:	e59f1004 	ldr	r1, [pc, #4]	; 1b8d0 <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b8c8:	e59f000c 	ldr	r0, [pc, #12]	; 1b8dc <CLinkLayer::SendRaw(void const*, unsigned int)+0x68>
   1b8cc:	eb0023b5 	bl	247a8 <assertion_failed>
   1b8d0:	0004558c 	.word	0x0004558c
   1b8d4:	00045600 	.word	0x00045600
   1b8d8:	00045464 	.word	0x00045464
   1b8dc:	0004559c 	.word	0x0004559c

0001b8e0 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)>:
   1b8e0:	e92d4030 	push	{r4, r5, lr}
   1b8e4:	e3510000 	cmp	r1, #0
   1b8e8:	e24dd00c 	sub	sp, sp, #12
   1b8ec:	0a00001c 	beq	1b964 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x84>
   1b8f0:	e3520000 	cmp	r2, #0
   1b8f4:	e1a04002 	mov	r4, r2
   1b8f8:	0a00001d 	beq	1b974 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x94>
   1b8fc:	e2800028 	add	r0, r0, #40	; 0x28
   1b900:	e28d2004 	add	r2, sp, #4
   1b904:	e1a05003 	mov	r5, r3
   1b908:	eb0016d4 	bl	21460 <CNetQueue::Dequeue(void*, void**)>
   1b90c:	e3500000 	cmp	r0, #0
   1b910:	e5840000 	str	r0, [r4]
   1b914:	0a00000b 	beq	1b948 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x68>
   1b918:	e3550000 	cmp	r5, #0
   1b91c:	e59d4004 	ldr	r4, [sp, #4]
   1b920:	0a00000a 	beq	1b950 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x70>
   1b924:	e3540000 	cmp	r4, #0
   1b928:	0a000015 	beq	1b984 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa4>
   1b92c:	e1a00005 	mov	r0, r5
   1b930:	e1a01004 	mov	r1, r4
   1b934:	eb003cdf 	bl	2acb8 <CMACAddress::Set(unsigned char const*)>
   1b938:	e1a00004 	mov	r0, r4
   1b93c:	e3a01006 	mov	r1, #6
   1b940:	eb003dae 	bl	2b000 <operator delete(void*, unsigned int)>
   1b944:	e3a00001 	mov	r0, #1
   1b948:	e28dd00c 	add	sp, sp, #12
   1b94c:	e8bd8030 	pop	{r4, r5, pc}
   1b950:	e3540000 	cmp	r4, #0
   1b954:	03a00001 	moveq	r0, #1
   1b958:	1afffff6 	bne	1b938 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x58>
   1b95c:	e28dd00c 	add	sp, sp, #12
   1b960:	e8bd8030 	pop	{r4, r5, pc}
   1b964:	e3a020bd 	mov	r2, #189	; 0xbd
   1b968:	e59f1024 	ldr	r1, [pc, #36]	; 1b994 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xb4>
   1b96c:	e59f0024 	ldr	r0, [pc, #36]	; 1b998 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xb8>
   1b970:	eb00238c 	bl	247a8 <assertion_failed>
   1b974:	e3a020be 	mov	r2, #190	; 0xbe
   1b978:	e59f1014 	ldr	r1, [pc, #20]	; 1b994 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xb4>
   1b97c:	e59f0018 	ldr	r0, [pc, #24]	; 1b99c <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xbc>
   1b980:	eb002388 	bl	247a8 <assertion_failed>
   1b984:	e3a020c9 	mov	r2, #201	; 0xc9
   1b988:	e59f1004 	ldr	r1, [pc, #4]	; 1b994 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xb4>
   1b98c:	e59f000c 	ldr	r0, [pc, #12]	; 1b9a0 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xc0>
   1b990:	eb002384 	bl	247a8 <assertion_failed>
   1b994:	0004558c 	.word	0x0004558c
   1b998:	0004256c 	.word	0x0004256c
   1b99c:	00042d54 	.word	0x00042d54
   1b9a0:	00045458 	.word	0x00045458

0001b9a4 <CLinkLayer::EnableReceiveRaw(unsigned short)>:
   1b9a4:	e1d033b4 	ldrh	r3, [r0, #52]	; 0x34
   1b9a8:	e3530000 	cmp	r3, #0
   1b9ac:	1a000005 	bne	1b9c8 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x24>
   1b9b0:	e3510000 	cmp	r1, #0
   1b9b4:	0a000005 	beq	1b9d0 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x2c>
   1b9b8:	e6bf1fb1 	rev16	r1, r1
   1b9bc:	e1c013b4 	strh	r1, [r0, #52]	; 0x34
   1b9c0:	e3a00001 	mov	r0, #1
   1b9c4:	e12fff1e 	bx	lr
   1b9c8:	e3a00000 	mov	r0, #0
   1b9cc:	e12fff1e 	bx	lr
   1b9d0:	e3a020d9 	mov	r2, #217	; 0xd9
   1b9d4:	e92d4010 	push	{r4, lr}
   1b9d8:	e59f1004 	ldr	r1, [pc, #4]	; 1b9e4 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x40>
   1b9dc:	e59f0004 	ldr	r0, [pc, #4]	; 1b9e8 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x44>
   1b9e0:	eb002370 	bl	247a8 <assertion_failed>
   1b9e4:	0004558c 	.word	0x0004558c
   1b9e8:	0004560c 	.word	0x0004560c

0001b9ec <CLinkLayer::ResolveFailed(void const*, unsigned int)>:
   1b9ec:	e3510000 	cmp	r1, #0
   1b9f0:	e92d4010 	push	{r4, lr}
   1b9f4:	0a000009 	beq	1ba20 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x34>
   1b9f8:	e352000e 	cmp	r2, #14
   1b9fc:	9a00000b 	bls	1ba30 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x44>
   1ba00:	e5900008 	ldr	r0, [r0, #8]
   1ba04:	e3500000 	cmp	r0, #0
   1ba08:	0a00000c 	beq	1ba40 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x54>
   1ba0c:	e8bd4010 	pop	{r4, lr}
   1ba10:	e242300e 	sub	r3, r2, #14
   1ba14:	e281200e 	add	r2, r1, #14
   1ba18:	e3a01001 	mov	r1, #1
   1ba1c:	eafffe35 	b	1b2f8 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>
   1ba20:	e3a020e1 	mov	r2, #225	; 0xe1
   1ba24:	e59f1024 	ldr	r1, [pc, #36]	; 1ba50 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1ba28:	e59f0024 	ldr	r0, [pc, #36]	; 1ba54 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x68>
   1ba2c:	eb00235d 	bl	247a8 <assertion_failed>
   1ba30:	e3a020e2 	mov	r2, #226	; 0xe2
   1ba34:	e59f1014 	ldr	r1, [pc, #20]	; 1ba50 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1ba38:	e59f0018 	ldr	r0, [pc, #24]	; 1ba58 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x6c>
   1ba3c:	eb002359 	bl	247a8 <assertion_failed>
   1ba40:	e3a020e3 	mov	r2, #227	; 0xe3
   1ba44:	e59f1004 	ldr	r1, [pc, #4]	; 1ba50 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1ba48:	e59f000c 	ldr	r0, [pc, #12]	; 1ba5c <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x70>
   1ba4c:	eb002355 	bl	247a8 <assertion_failed>
   1ba50:	0004558c 	.word	0x0004558c
   1ba54:	00045620 	.word	0x00045620
   1ba58:	00045634 	.word	0x00045634
   1ba5c:	000453f0 	.word	0x000453f0

0001ba60 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>:
   1ba60:	e3a03000 	mov	r3, #0
   1ba64:	e92d4010 	push	{r4, lr}
   1ba68:	e1a04000 	mov	r4, r0
   1ba6c:	e5801004 	str	r1, [r0, #4]
   1ba70:	e5c02000 	strb	r2, [r0]
   1ba74:	e5803008 	str	r3, [r0, #8]
   1ba78:	e280000c 	add	r0, r0, #12
   1ba7c:	eb0015f4 	bl	21254 <CNetQueue::CNetQueue()>
   1ba80:	e2840018 	add	r0, r4, #24
   1ba84:	eb0015f2 	bl	21254 <CNetQueue::CNetQueue()>
   1ba88:	e1a00004 	mov	r0, r4
   1ba8c:	e8bd8010 	pop	{r4, pc}

0001ba90 <CNetDeviceLayer::~CNetDeviceLayer()>:
   1ba90:	e3a03000 	mov	r3, #0
   1ba94:	e92d4010 	push	{r4, lr}
   1ba98:	e1a04000 	mov	r4, r0
   1ba9c:	e5803008 	str	r3, [r0, #8]
   1baa0:	e5803004 	str	r3, [r0, #4]
   1baa4:	e2800018 	add	r0, r0, #24
   1baa8:	eb001621 	bl	21334 <CNetQueue::~CNetQueue()>
   1baac:	e284000c 	add	r0, r4, #12
   1bab0:	eb00161f 	bl	21334 <CNetQueue::~CNetQueue()>
   1bab4:	e1a00004 	mov	r0, r4
   1bab8:	e8bd8010 	pop	{r4, pc}

0001babc <CNetDeviceLayer::Initialize(bool)>:
   1babc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1bac0:	e5903008 	ldr	r3, [r0, #8]
   1bac4:	e24dd00c 	sub	sp, sp, #12
   1bac8:	e3530000 	cmp	r3, #0
   1bacc:	1a000049 	bne	1bbf8 <CNetDeviceLayer::Initialize(bool)+0x13c>
   1bad0:	e1a04000 	mov	r4, r0
   1bad4:	e5d00000 	ldrb	r0, [r0]
   1bad8:	e1a05001 	mov	r5, r1
   1badc:	eb003d08 	bl	2af04 <CNetDevice::GetNetDevice(TNetDeviceType)>
   1bae0:	e3500000 	cmp	r0, #0
   1bae4:	e1a06000 	mov	r6, r0
   1bae8:	e5840008 	str	r0, [r4, #8]
   1baec:	0a000039 	beq	1bbd8 <CNetDeviceLayer::Initialize(bool)+0x11c>
   1baf0:	e3a000e0 	mov	r0, #224	; 0xe0
   1baf4:	eb003d33 	bl	2afc8 <operator new(unsigned int)>
   1baf8:	e5941008 	ldr	r1, [r4, #8]
   1bafc:	eb0000e5 	bl	1be98 <CPHYTask::CPHYTask(CNetDevice*)>
   1bb00:	e3550000 	cmp	r5, #0
   1bb04:	1a000002 	bne	1bb14 <CNetDeviceLayer::Initialize(bool)+0x58>
   1bb08:	e3a00001 	mov	r0, #1
   1bb0c:	e28dd00c 	add	sp, sp, #12
   1bb10:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1bb14:	eb0038f0 	bl	29edc <CTimer::Get()>
   1bb18:	eb00363d 	bl	29414 <CTimer::GetTicks() const>
   1bb1c:	e1a06000 	mov	r6, r0
   1bb20:	e59f70e0 	ldr	r7, [pc, #224]	; 1bc08 <CNetDeviceLayer::Initialize(bool)+0x14c>
   1bb24:	eb0038ec 	bl	29edc <CTimer::Get()>
   1bb28:	eb003639 	bl	29414 <CTimer::GetTicks() const>
   1bb2c:	e0403006 	sub	r3, r0, r6
   1bb30:	e3530e19 	cmp	r3, #400	; 0x190
   1bb34:	2a00001f 	bcs	1bbb8 <CNetDeviceLayer::Initialize(bool)+0xfc>
   1bb38:	e5940008 	ldr	r0, [r4, #8]
   1bb3c:	e5902000 	ldr	r2, [r0]
   1bb40:	e592301c 	ldr	r3, [r2, #28]
   1bb44:	e1530007 	cmp	r3, r7
   1bb48:	1a000014 	bne	1bba0 <CNetDeviceLayer::Initialize(bool)+0xe4>
   1bb4c:	e5923020 	ldr	r3, [r2, #32]
   1bb50:	e59f20b4 	ldr	r2, [pc, #180]	; 1bc0c <CNetDeviceLayer::Initialize(bool)+0x150>
   1bb54:	e1530002 	cmp	r3, r2
   1bb58:	0affffea 	beq	1bb08 <CNetDeviceLayer::Initialize(bool)+0x4c>
   1bb5c:	e12fff33 	blx	r3
   1bb60:	e3500006 	cmp	r0, #6
   1bb64:	e1a06000 	mov	r6, r0
   1bb68:	0affffe6 	beq	1bb08 <CNetDeviceLayer::Initialize(bool)+0x4c>
   1bb6c:	eb002bf5 	bl	26b48 <CLogger::Get()>
   1bb70:	e1a04000 	mov	r4, r0
   1bb74:	e1a00006 	mov	r0, r6
   1bb78:	eb003cd2 	bl	2aec8 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>
   1bb7c:	e1a02000 	mov	r2, r0
   1bb80:	e59f3088 	ldr	r3, [pc, #136]	; 1bc10 <CNetDeviceLayer::Initialize(bool)+0x154>
   1bb84:	e1a00004 	mov	r0, r4
   1bb88:	e58d2000 	str	r2, [sp]
   1bb8c:	e59f1080 	ldr	r1, [pc, #128]	; 1bc14 <CNetDeviceLayer::Initialize(bool)+0x158>
   1bb90:	e3a02003 	mov	r2, #3
   1bb94:	eb002b2d 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bb98:	e1a00005 	mov	r0, r5
   1bb9c:	eaffffda 	b	1bb0c <CNetDeviceLayer::Initialize(bool)+0x50>
   1bba0:	e12fff33 	blx	r3
   1bba4:	e3500000 	cmp	r0, #0
   1bba8:	0affffdd 	beq	1bb24 <CNetDeviceLayer::Initialize(bool)+0x68>
   1bbac:	e5940008 	ldr	r0, [r4, #8]
   1bbb0:	e5902000 	ldr	r2, [r0]
   1bbb4:	eaffffe4 	b	1bb4c <CNetDeviceLayer::Initialize(bool)+0x90>
   1bbb8:	eb002be2 	bl	26b48 <CLogger::Get()>
   1bbbc:	e3a02002 	mov	r2, #2
   1bbc0:	e59f3050 	ldr	r3, [pc, #80]	; 1bc18 <CNetDeviceLayer::Initialize(bool)+0x15c>
   1bbc4:	e59f1048 	ldr	r1, [pc, #72]	; 1bc14 <CNetDeviceLayer::Initialize(bool)+0x158>
   1bbc8:	eb002b20 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bbcc:	e1a00005 	mov	r0, r5
   1bbd0:	e28dd00c 	add	sp, sp, #12
   1bbd4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1bbd8:	eb002bda 	bl	26b48 <CLogger::Get()>
   1bbdc:	e3a02001 	mov	r2, #1
   1bbe0:	e59f3034 	ldr	r3, [pc, #52]	; 1bc1c <CNetDeviceLayer::Initialize(bool)+0x160>
   1bbe4:	e59f1028 	ldr	r1, [pc, #40]	; 1bc14 <CNetDeviceLayer::Initialize(bool)+0x158>
   1bbe8:	eb002b18 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bbec:	e1a00006 	mov	r0, r6
   1bbf0:	e28dd00c 	add	sp, sp, #12
   1bbf4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1bbf8:	e3a02033 	mov	r2, #51	; 0x33
   1bbfc:	e59f101c 	ldr	r1, [pc, #28]	; 1bc20 <CNetDeviceLayer::Initialize(bool)+0x164>
   1bc00:	e59f001c 	ldr	r0, [pc, #28]	; 1bc24 <CNetDeviceLayer::Initialize(bool)+0x168>
   1bc04:	eb0022e7 	bl	247a8 <assertion_failed>
   1bc08:	00017888 	.word	0x00017888
   1bc0c:	00017890 	.word	0x00017890
   1bc10:	00045694 	.word	0x00045694
   1bc14:	000456b0 	.word	0x000456b0
   1bc18:	00045684 	.word	0x00045684
   1bc1c:	00045668 	.word	0x00045668
   1bc20:	00045658 	.word	0x00045658
   1bc24:	000413f0 	.word	0x000413f0

0001bc28 <CNetDeviceLayer::Process()>:
   1bc28:	e92d4070 	push	{r4, r5, r6, lr}
   1bc2c:	e1a04000 	mov	r4, r0
   1bc30:	e5900008 	ldr	r0, [r0, #8]
   1bc34:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1bc38:	e3500000 	cmp	r0, #0
   1bc3c:	e24dd008 	sub	sp, sp, #8
   1bc40:	0a000037 	beq	1bd24 <CNetDeviceLayer::Process()+0xfc>
   1bc44:	e59f50e8 	ldr	r5, [pc, #232]	; 1bd34 <CNetDeviceLayer::Process()+0x10c>
   1bc48:	e284600c 	add	r6, r4, #12
   1bc4c:	ea00000f 	b	1bc90 <CNetDeviceLayer::Process()+0x68>
   1bc50:	e3a02000 	mov	r2, #0
   1bc54:	e1a00006 	mov	r0, r6
   1bc58:	e28d1008 	add	r1, sp, #8
   1bc5c:	eb0015ff 	bl	21460 <CNetQueue::Dequeue(void*, void**)>
   1bc60:	e3500000 	cmp	r0, #0
   1bc64:	e1a02000 	mov	r2, r0
   1bc68:	e58d0004 	str	r0, [sp, #4]
   1bc6c:	0a00000e 	beq	1bcac <CNetDeviceLayer::Process()+0x84>
   1bc70:	e5940008 	ldr	r0, [r4, #8]
   1bc74:	e28d1008 	add	r1, sp, #8
   1bc78:	e5903000 	ldr	r3, [r0]
   1bc7c:	e5933014 	ldr	r3, [r3, #20]
   1bc80:	e12fff33 	blx	r3
   1bc84:	e3500000 	cmp	r0, #0
   1bc88:	0a00001f 	beq	1bd0c <CNetDeviceLayer::Process()+0xe4>
   1bc8c:	e5940008 	ldr	r0, [r4, #8]
   1bc90:	e5903000 	ldr	r3, [r0]
   1bc94:	e5933010 	ldr	r3, [r3, #16]
   1bc98:	e1530005 	cmp	r3, r5
   1bc9c:	0affffeb 	beq	1bc50 <CNetDeviceLayer::Process()+0x28>
   1bca0:	e12fff33 	blx	r3
   1bca4:	e3500000 	cmp	r0, #0
   1bca8:	1affffe8 	bne	1bc50 <CNetDeviceLayer::Process()+0x28>
   1bcac:	e2845018 	add	r5, r4, #24
   1bcb0:	ea000003 	b	1bcc4 <CNetDeviceLayer::Process()+0x9c>
   1bcb4:	e3a03000 	mov	r3, #0
   1bcb8:	e1a00005 	mov	r0, r5
   1bcbc:	e28d1008 	add	r1, sp, #8
   1bcc0:	eb0015a0 	bl	21348 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1bcc4:	e5940008 	ldr	r0, [r4, #8]
   1bcc8:	e28d2004 	add	r2, sp, #4
   1bccc:	e5903000 	ldr	r3, [r0]
   1bcd0:	e28d1008 	add	r1, sp, #8
   1bcd4:	e5933018 	ldr	r3, [r3, #24]
   1bcd8:	e12fff33 	blx	r3
   1bcdc:	e3500000 	cmp	r0, #0
   1bce0:	0a000006 	beq	1bd00 <CNetDeviceLayer::Process()+0xd8>
   1bce4:	e59d2004 	ldr	r2, [sp, #4]
   1bce8:	e3520000 	cmp	r2, #0
   1bcec:	1afffff0 	bne	1bcb4 <CNetDeviceLayer::Process()+0x8c>
   1bcf0:	e3a0206d 	mov	r2, #109	; 0x6d
   1bcf4:	e59f103c 	ldr	r1, [pc, #60]	; 1bd38 <CNetDeviceLayer::Process()+0x110>
   1bcf8:	e59f003c 	ldr	r0, [pc, #60]	; 1bd3c <CNetDeviceLayer::Process()+0x114>
   1bcfc:	eb0022a9 	bl	247a8 <assertion_failed>
   1bd00:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1bd04:	e28dd008 	add	sp, sp, #8
   1bd08:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bd0c:	eb002b8d 	bl	26b48 <CLogger::Get()>
   1bd10:	e3a02002 	mov	r2, #2
   1bd14:	e59f3024 	ldr	r3, [pc, #36]	; 1bd40 <CNetDeviceLayer::Process()+0x118>
   1bd18:	e59f1024 	ldr	r1, [pc, #36]	; 1bd44 <CNetDeviceLayer::Process()+0x11c>
   1bd1c:	eb002acb 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bd20:	eaffffe1 	b	1bcac <CNetDeviceLayer::Process()+0x84>
   1bd24:	e3a0205c 	mov	r2, #92	; 0x5c
   1bd28:	e59f1008 	ldr	r1, [pc, #8]	; 1bd38 <CNetDeviceLayer::Process()+0x110>
   1bd2c:	e59f0014 	ldr	r0, [pc, #20]	; 1bd48 <CNetDeviceLayer::Process()+0x120>
   1bd30:	eb00229c 	bl	247a8 <assertion_failed>
   1bd34:	00016140 	.word	0x00016140
   1bd38:	00045658 	.word	0x00045658
   1bd3c:	00045464 	.word	0x00045464
   1bd40:	000456a0 	.word	0x000456a0
   1bd44:	000456b0 	.word	0x000456b0
   1bd48:	00041534 	.word	0x00041534

0001bd4c <CNetDeviceLayer::GetMACAddress() const>:
   1bd4c:	e5900008 	ldr	r0, [r0, #8]
   1bd50:	e3500000 	cmp	r0, #0
   1bd54:	0a000002 	beq	1bd64 <CNetDeviceLayer::GetMACAddress() const+0x18>
   1bd58:	e5903000 	ldr	r3, [r0]
   1bd5c:	e593300c 	ldr	r3, [r3, #12]
   1bd60:	e12fff13 	bx	r3
   1bd64:	e3a02074 	mov	r2, #116	; 0x74
   1bd68:	e92d4010 	push	{r4, lr}
   1bd6c:	e59f1004 	ldr	r1, [pc, #4]	; 1bd78 <CNetDeviceLayer::GetMACAddress() const+0x2c>
   1bd70:	e59f0004 	ldr	r0, [pc, #4]	; 1bd7c <CNetDeviceLayer::GetMACAddress() const+0x30>
   1bd74:	eb00228b 	bl	247a8 <assertion_failed>
   1bd78:	00045658 	.word	0x00045658
   1bd7c:	00041534 	.word	0x00041534

0001bd80 <CNetDeviceLayer::Send(void const*, unsigned int)>:
   1bd80:	e3a03000 	mov	r3, #0
   1bd84:	e280000c 	add	r0, r0, #12
   1bd88:	ea00156e 	b	21348 <CNetQueue::Enqueue(void const*, unsigned int, void*)>

0001bd8c <CNetDeviceLayer::Receive(void*, unsigned int*)>:
   1bd8c:	e92d4010 	push	{r4, lr}
   1bd90:	e2800018 	add	r0, r0, #24
   1bd94:	e1a04002 	mov	r4, r2
   1bd98:	e3a02000 	mov	r2, #0
   1bd9c:	eb0015af 	bl	21460 <CNetQueue::Dequeue(void*, void**)>
   1bda0:	e3500000 	cmp	r0, #0
   1bda4:	08bd8010 	popeq	{r4, pc}
   1bda8:	e3540000 	cmp	r4, #0
   1bdac:	0a000002 	beq	1bdbc <CNetDeviceLayer::Receive(void*, unsigned int*)+0x30>
   1bdb0:	e5840000 	str	r0, [r4]
   1bdb4:	e3a00001 	mov	r0, #1
   1bdb8:	e8bd8010 	pop	{r4, pc}
   1bdbc:	e3a02085 	mov	r2, #133	; 0x85
   1bdc0:	e59f1004 	ldr	r1, [pc, #4]	; 1bdcc <CNetDeviceLayer::Receive(void*, unsigned int*)+0x40>
   1bdc4:	e59f0004 	ldr	r0, [pc, #4]	; 1bdd0 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x44>
   1bdc8:	eb002276 	bl	247a8 <assertion_failed>
   1bdcc:	00045658 	.word	0x00045658
   1bdd0:	00042d54 	.word	0x00042d54

0001bdd4 <CPHYTask::~CPHYTask()>:
   1bdd4:	e3a02000 	mov	r2, #0
   1bdd8:	e92d4010 	push	{r4, lr}
   1bddc:	e1a04000 	mov	r4, r0
   1bde0:	e59f3010 	ldr	r3, [pc, #16]	; 1bdf8 <CPHYTask::~CPHYTask()+0x24>
   1bde4:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   1bde8:	e5803000 	str	r3, [r0]
   1bdec:	eb001fdc 	bl	23d64 <CTask::~CTask()>
   1bdf0:	e1a00004 	mov	r0, r4
   1bdf4:	e8bd8010 	pop	{r4, pc}
   1bdf8:	000456cc 	.word	0x000456cc

0001bdfc <CPHYTask::~CPHYTask()>:
   1bdfc:	e3a02000 	mov	r2, #0
   1be00:	e92d4010 	push	{r4, lr}
   1be04:	e1a04000 	mov	r4, r0
   1be08:	e59f301c 	ldr	r3, [pc, #28]	; 1be2c <CPHYTask::~CPHYTask()+0x30>
   1be0c:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   1be10:	e5803000 	str	r3, [r0]
   1be14:	eb001fd2 	bl	23d64 <CTask::~CTask()>
   1be18:	e1a00004 	mov	r0, r4
   1be1c:	e3a010e0 	mov	r1, #224	; 0xe0
   1be20:	eb003c76 	bl	2b000 <operator delete(void*, unsigned int)>
   1be24:	e1a00004 	mov	r0, r4
   1be28:	e8bd8010 	pop	{r4, pc}
   1be2c:	000456cc 	.word	0x000456cc

0001be30 <CPHYTask::Run()>:
   1be30:	e92d4070 	push	{r4, r5, r6, lr}
   1be34:	e1a04000 	mov	r4, r0
   1be38:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   1be3c:	e3500000 	cmp	r0, #0
   1be40:	0a00000d 	beq	1be7c <CPHYTask::Run()+0x4c>
   1be44:	e59f5040 	ldr	r5, [pc, #64]	; 1be8c <CPHYTask::Run()+0x5c>
   1be48:	e5903000 	ldr	r3, [r0]
   1be4c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1be50:	e1530005 	cmp	r3, r5
   1be54:	08bd8070 	popeq	{r4, r5, r6, pc}
   1be58:	e12fff33 	blx	r3
   1be5c:	e3500000 	cmp	r0, #0
   1be60:	08bd8070 	popeq	{r4, r5, r6, pc}
   1be64:	eb0021a3 	bl	244f8 <CScheduler::Get()>
   1be68:	e3a01e7d 	mov	r1, #2000	; 0x7d0
   1be6c:	eb00217d 	bl	24468 <CScheduler::MsSleep(unsigned int)>
   1be70:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   1be74:	e3500000 	cmp	r0, #0
   1be78:	1afffff2 	bne	1be48 <CPHYTask::Run()+0x18>
   1be7c:	e3a02026 	mov	r2, #38	; 0x26
   1be80:	e59f1008 	ldr	r1, [pc, #8]	; 1be90 <CPHYTask::Run()+0x60>
   1be84:	e59f0008 	ldr	r0, [pc, #8]	; 1be94 <CPHYTask::Run()+0x64>
   1be88:	eb002246 	bl	247a8 <assertion_failed>
   1be8c:	00016148 	.word	0x00016148
   1be90:	000456b8 	.word	0x000456b8
   1be94:	00041534 	.word	0x00041534

0001be98 <CPHYTask::CPHYTask(CNetDevice*)>:
   1be98:	e92d4070 	push	{r4, r5, r6, lr}
   1be9c:	e1a04000 	mov	r4, r0
   1bea0:	e1a05001 	mov	r5, r1
   1bea4:	e3a01902 	mov	r1, #32768	; 0x8000
   1bea8:	eb001ffe 	bl	23ea8 <CTask::CTask(unsigned int)>
   1beac:	e59f300c 	ldr	r3, [pc, #12]	; 1bec0 <CPHYTask::CPHYTask(CNetDevice*)+0x28>
   1beb0:	e1a00004 	mov	r0, r4
   1beb4:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   1beb8:	e5843000 	str	r3, [r4]
   1bebc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bec0:	000456cc 	.word	0x000456cc

0001bec4 <CARPHandler::TimerHandler(unsigned int, void*, void*)>:
   1bec4:	e92d4070 	push	{r4, r5, r6, lr}
   1bec8:	e2524000 	subs	r4, r2, #0
   1becc:	0a00001a 	beq	1bf3c <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x78>
   1bed0:	e5943010 	ldr	r3, [r4, #16]
   1bed4:	e1a05001 	mov	r5, r1
   1bed8:	e1530001 	cmp	r3, r1
   1bedc:	9a00001a 	bls	1bf4c <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x88>
   1bee0:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1bee4:	e3500000 	cmp	r0, #0
   1bee8:	1a000006 	bne	1bf08 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x44>
   1beec:	e0615181 	rsb	r5, r1, r1, lsl #3
   1bef0:	e0844105 	add	r4, r4, r5, lsl #2
   1bef4:	e5d43014 	ldrb	r3, [r4, #20]
   1bef8:	e3530001 	cmp	r3, #1
   1befc:	03a03002 	moveq	r3, #2
   1bf00:	05c43014 	strbeq	r3, [r4, #20]
   1bf04:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bf08:	e0655185 	rsb	r5, r5, r5, lsl #3
   1bf0c:	e0845105 	add	r5, r4, r5, lsl #2
   1bf10:	eb003f59 	bl	2bc7c <EnterCritical>
   1bf14:	e5d53014 	ldrb	r3, [r5, #20]
   1bf18:	e3530001 	cmp	r3, #1
   1bf1c:	03a02002 	moveq	r2, #2
   1bf20:	05943244 	ldreq	r3, [r4, #580]	; 0x244
   1bf24:	15943244 	ldrne	r3, [r4, #580]	; 0x244
   1bf28:	05c52014 	strbeq	r2, [r5, #20]
   1bf2c:	e3530000 	cmp	r3, #0
   1bf30:	08bd8070 	popeq	{r4, r5, r6, pc}
   1bf34:	e8bd4070 	pop	{r4, r5, r6, lr}
   1bf38:	ea003f79 	b	2bd24 <LeaveCritical>
   1bf3c:	e59f2018 	ldr	r2, [pc, #24]	; 1bf5c <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x98>
   1bf40:	e59f1018 	ldr	r1, [pc, #24]	; 1bf60 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x9c>
   1bf44:	e59f0018 	ldr	r0, [pc, #24]	; 1bf64 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa0>
   1bf48:	eb002216 	bl	247a8 <assertion_failed>
   1bf4c:	e3a02f6b 	mov	r2, #428	; 0x1ac
   1bf50:	e59f1008 	ldr	r1, [pc, #8]	; 1bf60 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x9c>
   1bf54:	e59f000c 	ldr	r0, [pc, #12]	; 1bf68 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa4>
   1bf58:	eb002212 	bl	247a8 <assertion_failed>
   1bf5c:	000001a9 	.word	0x000001a9
   1bf60:	000456d8 	.word	0x000456d8
   1bf64:	00040b44 	.word	0x00040b44
   1bf68:	000456e8 	.word	0x000456e8

0001bf6c <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>:
   1bf6c:	e92d4010 	push	{r4, lr}
   1bf70:	e3a0e000 	mov	lr, #0
   1bf74:	e3a04001 	mov	r4, #1
   1bf78:	e151000e 	cmp	r1, lr
   1bf7c:	e5801000 	str	r1, [r0]
   1bf80:	e59d1008 	ldr	r1, [sp, #8]
   1bf84:	e1c020f4 	strd	r2, [r0, #4]
   1bf88:	e5804244 	str	r4, [r0, #580]	; 0x244
   1bf8c:	e580100c 	str	r1, [r0, #12]
   1bf90:	e580e010 	str	lr, [r0, #16]
   1bf94:	e580e248 	str	lr, [r0, #584]	; 0x248
   1bf98:	0a000009 	beq	1bfc4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x58>
   1bf9c:	e3520000 	cmp	r2, #0
   1bfa0:	0a00000b 	beq	1bfd4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x68>
   1bfa4:	e3530000 	cmp	r3, #0
   1bfa8:	0a00000d 	beq	1bfe4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x78>
   1bfac:	e3510000 	cmp	r1, #0
   1bfb0:	18bd8010 	popne	{r4, pc}
   1bfb4:	e3a02045 	mov	r2, #69	; 0x45
   1bfb8:	e59f1034 	ldr	r1, [pc, #52]	; 1bff4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x88>
   1bfbc:	e59f0034 	ldr	r0, [pc, #52]	; 1bff8 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x8c>
   1bfc0:	eb0021f8 	bl	247a8 <assertion_failed>
   1bfc4:	e3a02042 	mov	r2, #66	; 0x42
   1bfc8:	e59f1024 	ldr	r1, [pc, #36]	; 1bff4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x88>
   1bfcc:	e59f0028 	ldr	r0, [pc, #40]	; 1bffc <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x90>
   1bfd0:	eb0021f4 	bl	247a8 <assertion_failed>
   1bfd4:	e3a02043 	mov	r2, #67	; 0x43
   1bfd8:	e59f1014 	ldr	r1, [pc, #20]	; 1bff4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x88>
   1bfdc:	e59f001c 	ldr	r0, [pc, #28]	; 1c000 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x94>
   1bfe0:	eb0021f0 	bl	247a8 <assertion_failed>
   1bfe4:	e3a02044 	mov	r2, #68	; 0x44
   1bfe8:	e59f1004 	ldr	r1, [pc, #4]	; 1bff4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x88>
   1bfec:	e59f0010 	ldr	r0, [pc, #16]	; 1c004 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x98>
   1bff0:	eb0021ec 	bl	247a8 <assertion_failed>
   1bff4:	000456d8 	.word	0x000456d8
   1bff8:	00045704 	.word	0x00045704
   1bffc:	000453dc 	.word	0x000453dc
   1c000:	0004559c 	.word	0x0004559c
   1c004:	00045498 	.word	0x00045498

0001c008 <CARPHandler::~CARPHandler()>:
   1c008:	e5903010 	ldr	r3, [r0, #16]
   1c00c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c010:	e3530000 	cmp	r3, #0
   1c014:	e1a07000 	mov	r7, r0
   1c018:	0a000010 	beq	1c060 <CARPHandler::~CARPHandler()+0x58>
   1c01c:	e3a05000 	mov	r5, #0
   1c020:	e1a04000 	mov	r4, r0
   1c024:	e1a08005 	mov	r8, r5
   1c028:	e594602c 	ldr	r6, [r4, #44]	; 0x2c
   1c02c:	e2855001 	add	r5, r5, #1
   1c030:	e3560000 	cmp	r6, #0
   1c034:	0a000005 	beq	1c050 <CARPHandler::~CARPHandler()+0x48>
   1c038:	e1a00006 	mov	r0, r6
   1c03c:	eb0014bc 	bl	21334 <CNetQueue::~CNetQueue()>
   1c040:	e1a00006 	mov	r0, r6
   1c044:	e3a0100c 	mov	r1, #12
   1c048:	eb003bec 	bl	2b000 <operator delete(void*, unsigned int)>
   1c04c:	e5973010 	ldr	r3, [r7, #16]
   1c050:	e1530005 	cmp	r3, r5
   1c054:	e584802c 	str	r8, [r4, #44]	; 0x2c
   1c058:	e284401c 	add	r4, r4, #28
   1c05c:	8afffff1 	bhi	1c028 <CARPHandler::~CARPHandler()+0x20>
   1c060:	e1a00007 	mov	r0, r7
   1c064:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001c068 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>:
   1c068:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c06c:	e1a06000 	mov	r6, r0
   1c070:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1c074:	e1a07001 	mov	r7, r1
   1c078:	e3500000 	cmp	r0, #0
   1c07c:	e1a08002 	mov	r8, r2
   1c080:	1a000029 	bne	1c12c <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xc4>
   1c084:	e5962010 	ldr	r2, [r6, #16]
   1c088:	e3520000 	cmp	r2, #0
   1c08c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c090:	e3a04000 	mov	r4, #0
   1c094:	e2865015 	add	r5, r6, #21
   1c098:	e0643184 	rsb	r3, r4, r4, lsl #3
   1c09c:	e0863103 	add	r3, r6, r3, lsl #2
   1c0a0:	e5d30014 	ldrb	r0, [r3, #20]
   1c0a4:	e1a09184 	lsl	r9, r4, #3
   1c0a8:	e3500001 	cmp	r0, #1
   1c0ac:	0a000002 	beq	1c0bc <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x54>
   1c0b0:	e5d33014 	ldrb	r3, [r3, #20]
   1c0b4:	e3530002 	cmp	r3, #2
   1c0b8:	1a000005 	bne	1c0d4 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x6c>
   1c0bc:	e1a01005 	mov	r1, r5
   1c0c0:	e1a00007 	mov	r0, r7
   1c0c4:	eb00135b 	bl	20e38 <CIPAddress::operator==(unsigned char const*) const>
   1c0c8:	e3500000 	cmp	r0, #0
   1c0cc:	1a000009 	bne	1c0f8 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x90>
   1c0d0:	e5962010 	ldr	r2, [r6, #16]
   1c0d4:	e2844001 	add	r4, r4, #1
   1c0d8:	e1520004 	cmp	r2, r4
   1c0dc:	e285501c 	add	r5, r5, #28
   1c0e0:	8affffec 	bhi	1c098 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x30>
   1c0e4:	e5963244 	ldr	r3, [r6, #580]	; 0x244
   1c0e8:	e3530000 	cmp	r3, #0
   1c0ec:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c0f0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c0f4:	ea003f0a 	b	2bd24 <LeaveCritical>
   1c0f8:	e0494004 	sub	r4, r9, r4
   1c0fc:	e0865104 	add	r5, r6, r4, lsl #2
   1c100:	e1a04104 	lsl	r4, r4, #2
   1c104:	eb003774 	bl	29edc <CTimer::Get()>
   1c108:	e2844019 	add	r4, r4, #25
   1c10c:	e5951020 	ldr	r1, [r5, #32]
   1c110:	eb003601 	bl	2991c <CTimer::CancelKernelTimer(unsigned int)>
   1c114:	e1a00008 	mov	r0, r8
   1c118:	e0861004 	add	r1, r6, r4
   1c11c:	eb003b0f 	bl	2ad60 <CMACAddress::CopyTo(unsigned char*) const>
   1c120:	e3a03003 	mov	r3, #3
   1c124:	e5c53014 	strb	r3, [r5, #20]
   1c128:	eaffffed 	b	1c0e4 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x7c>
   1c12c:	eb003ed2 	bl	2bc7c <EnterCritical>
   1c130:	e5962010 	ldr	r2, [r6, #16]
   1c134:	e3520000 	cmp	r2, #0
   1c138:	1affffd4 	bne	1c090 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x28>
   1c13c:	eaffffe8 	b	1c0e4 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x7c>

0001c140 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>:
   1c140:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c144:	e1a09000 	mov	r9, r0
   1c148:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1c14c:	e1a06001 	mov	r6, r1
   1c150:	e3500000 	cmp	r0, #0
   1c154:	e1a08002 	mov	r8, r2
   1c158:	e24dd00c 	sub	sp, sp, #12
   1c15c:	1a000049 	bne	1c288 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x148>
   1c160:	e599e010 	ldr	lr, [r9, #16]
   1c164:	e35e0000 	cmp	lr, #0
   1c168:	0a000032 	beq	1c238 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xf8>
   1c16c:	e3a04000 	mov	r4, #0
   1c170:	e3a05014 	mov	r5, #20
   1c174:	e2897015 	add	r7, r9, #21
   1c178:	ea000004 	b	1c190 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x50>
   1c17c:	e3550014 	cmp	r5, #20
   1c180:	01a05004 	moveq	r5, r4
   1c184:	e2844001 	add	r4, r4, #1
   1c188:	e15e0004 	cmp	lr, r4
   1c18c:	9a00000e 	bls	1c1cc <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x8c>
   1c190:	e0643184 	rsb	r3, r4, r4, lsl #3
   1c194:	e0892103 	add	r2, r9, r3, lsl #2
   1c198:	e5d2c014 	ldrb	ip, [r2, #20]
   1c19c:	e1a03103 	lsl	r3, r3, #2
   1c1a0:	e35c0000 	cmp	ip, #0
   1c1a4:	0afffff4 	beq	1c17c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x3c>
   1c1a8:	e1a00006 	mov	r0, r6
   1c1ac:	e0871003 	add	r1, r7, r3
   1c1b0:	eb001320 	bl	20e38 <CIPAddress::operator==(unsigned char const*) const>
   1c1b4:	e3500000 	cmp	r0, #0
   1c1b8:	1a000017 	bne	1c21c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xdc>
   1c1bc:	e599e010 	ldr	lr, [r9, #16]
   1c1c0:	e2844001 	add	r4, r4, #1
   1c1c4:	e15e0004 	cmp	lr, r4
   1c1c8:	8afffff0 	bhi	1c190 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x50>
   1c1cc:	e3550014 	cmp	r5, #20
   1c1d0:	0a000016 	beq	1c230 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xf0>
   1c1d4:	e0657185 	rsb	r7, r5, r5, lsl #3
   1c1d8:	e1a07107 	lsl	r7, r7, #2
   1c1dc:	e287a019 	add	sl, r7, #25
   1c1e0:	e1a04185 	lsl	r4, r5, #3
   1c1e4:	e2877015 	add	r7, r7, #21
   1c1e8:	e1a00006 	mov	r0, r6
   1c1ec:	e0891007 	add	r1, r9, r7
   1c1f0:	eb001392 	bl	21040 <CIPAddress::CopyTo(unsigned char*) const>
   1c1f4:	e089100a 	add	r1, r9, sl
   1c1f8:	e1a00008 	mov	r0, r8
   1c1fc:	eb003ad7 	bl	2ad60 <CMACAddress::CopyTo(unsigned char*) const>
   1c200:	eb003735 	bl	29edc <CTimer::Get()>
   1c204:	eb003482 	bl	29414 <CTimer::GetTicks() const>
   1c208:	e3a03004 	mov	r3, #4
   1c20c:	e0445005 	sub	r5, r4, r5
   1c210:	e0895105 	add	r5, r9, r5, lsl #2
   1c214:	e5850028 	str	r0, [r5, #40]	; 0x28
   1c218:	e5c53014 	strb	r3, [r5, #20]
   1c21c:	e5993244 	ldr	r3, [r9, #580]	; 0x244
   1c220:	e3530000 	cmp	r3, #0
   1c224:	1a00001f 	bne	1c2a8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x168>
   1c228:	e28dd00c 	add	sp, sp, #12
   1c22c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c230:	e35e0014 	cmp	lr, #20
   1c234:	0afffff8 	beq	1c21c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xdc>
   1c238:	e1a0500e 	mov	r5, lr
   1c23c:	e06ea18e 	rsb	sl, lr, lr, lsl #3
   1c240:	e1a0a10a 	lsl	sl, sl, #2
   1c244:	e28a7015 	add	r7, sl, #21
   1c248:	e28aa019 	add	sl, sl, #25
   1c24c:	e3a03000 	mov	r3, #0
   1c250:	e06eb18e 	rsb	fp, lr, lr, lsl #3
   1c254:	e089b10b 	add	fp, r9, fp, lsl #2
   1c258:	e5cb3014 	strb	r3, [fp, #20]
   1c25c:	e3a0000c 	mov	r0, #12
   1c260:	e1a0418e 	lsl	r4, lr, #3
   1c264:	eb003b57 	bl	2afc8 <operator new(unsigned int)>
   1c268:	e58d0004 	str	r0, [sp, #4]
   1c26c:	eb0013f8 	bl	21254 <CNetQueue::CNetQueue()>
   1c270:	e5993010 	ldr	r3, [r9, #16]
   1c274:	e59d2004 	ldr	r2, [sp, #4]
   1c278:	e2833001 	add	r3, r3, #1
   1c27c:	e58b202c 	str	r2, [fp, #44]	; 0x2c
   1c280:	e5893010 	str	r3, [r9, #16]
   1c284:	eaffffd7 	b	1c1e8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xa8>
   1c288:	eb003e7b 	bl	2bc7c <EnterCritical>
   1c28c:	e599e010 	ldr	lr, [r9, #16]
   1c290:	e35e0000 	cmp	lr, #0
   1c294:	e1a0500e 	mov	r5, lr
   1c298:	1affffb3 	bne	1c16c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x2c>
   1c29c:	e3a0a019 	mov	sl, #25
   1c2a0:	e3a07015 	mov	r7, #21
   1c2a4:	eaffffe8 	b	1c24c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x10c>
   1c2a8:	e28dd00c 	add	sp, sp, #12
   1c2ac:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2b0:	ea003e9b 	b	2bd24 <LeaveCritical>

0001c2b4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>:
   1c2b4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1c2b8:	e1a04000 	mov	r4, r0
   1c2bc:	e5900000 	ldr	r0, [r0]
   1c2c0:	e24dd034 	sub	sp, sp, #52	; 0x34
   1c2c4:	e3500000 	cmp	r0, #0
   1c2c8:	0a00002a 	beq	1c378 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xc4>
   1c2cc:	e1a08001 	mov	r8, r1
   1c2d0:	e1a07002 	mov	r7, r2
   1c2d4:	e1a05003 	mov	r5, r3
   1c2d8:	eb001235 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   1c2dc:	e2509000 	subs	r9, r0, #0
   1c2e0:	0a000028 	beq	1c388 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xd4>
   1c2e4:	e5940004 	ldr	r0, [r4, #4]
   1c2e8:	e3500000 	cmp	r0, #0
   1c2ec:	0a000029 	beq	1c398 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xe4>
   1c2f0:	ebfffe95 	bl	1bd4c <CNetDeviceLayer::GetMACAddress() const>
   1c2f4:	e2506000 	subs	r6, r0, #0
   1c2f8:	0a00002a 	beq	1c3a8 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xf4>
   1c2fc:	e1a00005 	mov	r0, r5
   1c300:	e28d1004 	add	r1, sp, #4
   1c304:	eb003a95 	bl	2ad60 <CMACAddress::CopyTo(unsigned char*) const>
   1c308:	e1a00006 	mov	r0, r6
   1c30c:	e28d100a 	add	r1, sp, #10
   1c310:	eb003a92 	bl	2ad60 <CMACAddress::CopyTo(unsigned char*) const>
   1c314:	e3580000 	cmp	r8, #0
   1c318:	13a0cc01 	movne	ip, #256	; 0x100
   1c31c:	03a0cc02 	moveq	ip, #512	; 0x200
   1c320:	e59f3090 	ldr	r3, [pc, #144]	; 1c3b8 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x104>
   1c324:	e59f2090 	ldr	r2, [pc, #144]	; 1c3bc <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x108>
   1c328:	e1a00006 	mov	r0, r6
   1c32c:	e28d101a 	add	r1, sp, #26
   1c330:	e1cd21f0 	strd	r2, [sp, #16]
   1c334:	e1cdc1b8 	strh	ip, [sp, #24]
   1c338:	eb003a88 	bl	2ad60 <CMACAddress::CopyTo(unsigned char*) const>
   1c33c:	e1a00009 	mov	r0, r9
   1c340:	e28d1020 	add	r1, sp, #32
   1c344:	eb00133d 	bl	21040 <CIPAddress::CopyTo(unsigned char*) const>
   1c348:	e1a00005 	mov	r0, r5
   1c34c:	e28d1024 	add	r1, sp, #36	; 0x24
   1c350:	eb003a82 	bl	2ad60 <CMACAddress::CopyTo(unsigned char*) const>
   1c354:	e1a00007 	mov	r0, r7
   1c358:	e28d102a 	add	r1, sp, #42	; 0x2a
   1c35c:	eb001337 	bl	21040 <CIPAddress::CopyTo(unsigned char*) const>
   1c360:	e3a0202a 	mov	r2, #42	; 0x2a
   1c364:	e5940004 	ldr	r0, [r4, #4]
   1c368:	e28d1004 	add	r1, sp, #4
   1c36c:	ebfffe83 	bl	1bd80 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1c370:	e28dd034 	add	sp, sp, #52	; 0x34
   1c374:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c378:	e59f2040 	ldr	r2, [pc, #64]	; 1c3c0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x10c>
   1c37c:	e59f1040 	ldr	r1, [pc, #64]	; 1c3c4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x110>
   1c380:	e59f0040 	ldr	r0, [pc, #64]	; 1c3c8 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x114>
   1c384:	eb002107 	bl	247a8 <assertion_failed>
   1c388:	e3a02f63 	mov	r2, #396	; 0x18c
   1c38c:	e59f1030 	ldr	r1, [pc, #48]	; 1c3c4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x110>
   1c390:	e59f0034 	ldr	r0, [pc, #52]	; 1c3cc <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x118>
   1c394:	eb002103 	bl	247a8 <assertion_failed>
   1c398:	e59f2030 	ldr	r2, [pc, #48]	; 1c3d0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x11c>
   1c39c:	e59f1020 	ldr	r1, [pc, #32]	; 1c3c4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x110>
   1c3a0:	e59f002c 	ldr	r0, [pc, #44]	; 1c3d4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x120>
   1c3a4:	eb0020ff 	bl	247a8 <assertion_failed>
   1c3a8:	e3a02e19 	mov	r2, #400	; 0x190
   1c3ac:	e59f1010 	ldr	r1, [pc, #16]	; 1c3c4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x110>
   1c3b0:	e59f0020 	ldr	r0, [pc, #32]	; 1c3d8 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x124>
   1c3b4:	eb0020fb 	bl	247a8 <assertion_failed>
   1c3b8:	04060008 	.word	0x04060008
   1c3bc:	01000608 	.word	0x01000608
   1c3c0:	0000018a 	.word	0x0000018a
   1c3c4:	000456d8 	.word	0x000456d8
   1c3c8:	000453dc 	.word	0x000453dc
   1c3cc:	000454c0 	.word	0x000454c0
   1c3d0:	0000018e 	.word	0x0000018e
   1c3d4:	0004559c 	.word	0x0004559c
   1c3d8:	000455c8 	.word	0x000455c8

0001c3dc <CARPHandler::Process()>:
   1c3dc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3e0:	e1a05000 	mov	r5, r0
   1c3e4:	e5900000 	ldr	r0, [r0]
   1c3e8:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1c3ec:	e3500000 	cmp	r0, #0
   1c3f0:	e24dd00c 	sub	sp, sp, #12
   1c3f4:	0a0000c5 	beq	1c710 <CARPHandler::Process()+0x334>
   1c3f8:	eb0011ed 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   1c3fc:	e2504000 	subs	r4, r0, #0
   1c400:	0a0000ca 	beq	1c730 <CARPHandler::Process()+0x354>
   1c404:	e595000c 	ldr	r0, [r5, #12]
   1c408:	e3500000 	cmp	r0, #0
   1c40c:	0a0000cb 	beq	1c740 <CARPHandler::Process()+0x364>
   1c410:	e28d3018 	add	r3, sp, #24
   1c414:	e28d6030 	add	r6, sp, #48	; 0x30
   1c418:	e2838008 	add	r8, r3, #8
   1c41c:	e3a02000 	mov	r2, #0
   1c420:	e28d1018 	add	r1, sp, #24
   1c424:	eb00140d 	bl	21460 <CNetQueue::Dequeue(void*, void**)>
   1c428:	e2507000 	subs	r7, r0, #0
   1c42c:	0a00000f 	beq	1c470 <CARPHandler::Process()+0x94>
   1c430:	e357001b 	cmp	r7, #27
   1c434:	9a00000b 	bls	1c468 <CARPHandler::Process()+0x8c>
   1c438:	e1dd31b8 	ldrh	r3, [sp, #24]
   1c43c:	e3530c01 	cmp	r3, #256	; 0x100
   1c440:	1a000008 	bne	1c468 <CARPHandler::Process()+0x8c>
   1c444:	e1dd31ba 	ldrh	r3, [sp, #26]
   1c448:	e3530008 	cmp	r3, #8
   1c44c:	1a000005 	bne	1c468 <CARPHandler::Process()+0x8c>
   1c450:	e5dd301c 	ldrb	r3, [sp, #28]
   1c454:	e3530006 	cmp	r3, #6
   1c458:	1a000002 	bne	1c468 <CARPHandler::Process()+0x8c>
   1c45c:	e5dd301d 	ldrb	r3, [sp, #29]
   1c460:	e3530004 	cmp	r3, #4
   1c464:	0a00008c 	beq	1c69c <CARPHandler::Process()+0x2c0>
   1c468:	e595000c 	ldr	r0, [r5, #12]
   1c46c:	eaffffea 	b	1c41c <CARPHandler::Process()+0x40>
   1c470:	e5953008 	ldr	r3, [r5, #8]
   1c474:	e3530000 	cmp	r3, #0
   1c478:	0a0000b4 	beq	1c750 <CARPHandler::Process()+0x374>
   1c47c:	e5953004 	ldr	r3, [r5, #4]
   1c480:	e3530000 	cmp	r3, #0
   1c484:	0a0000b5 	beq	1c760 <CARPHandler::Process()+0x384>
   1c488:	e5952010 	ldr	r2, [r5, #16]
   1c48c:	e3520000 	cmp	r2, #0
   1c490:	0a000027 	beq	1c534 <CARPHandler::Process()+0x158>
   1c494:	e1a06007 	mov	r6, r7
   1c498:	e59fa318 	ldr	sl, [pc, #792]	; 1c7b8 <CARPHandler::Process()+0x3dc>
   1c49c:	e2854019 	add	r4, r5, #25
   1c4a0:	e28d9010 	add	r9, sp, #16
   1c4a4:	e066b186 	rsb	fp, r6, r6, lsl #3
   1c4a8:	e085b10b 	add	fp, r5, fp, lsl #2
   1c4ac:	e5db3014 	ldrb	r3, [fp, #20]
   1c4b0:	e1a08186 	lsl	r8, r6, #3
   1c4b4:	e3530002 	cmp	r3, #2
   1c4b8:	e6ef3073 	uxtb	r3, r3
   1c4bc:	0a00003f 	beq	1c5c0 <CARPHandler::Process()+0x1e4>
   1c4c0:	e3530003 	cmp	r3, #3
   1c4c4:	1a000016 	bne	1c524 <CARPHandler::Process()+0x148>
   1c4c8:	e5940013 	ldr	r0, [r4, #19]
   1c4cc:	e3500000 	cmp	r0, #0
   1c4d0:	1a000009 	bne	1c4fc <CARPHandler::Process()+0x120>
   1c4d4:	ea00006c 	b	1c68c <CARPHandler::Process()+0x2b0>
   1c4d8:	e3a02006 	mov	r2, #6
   1c4dc:	e1a01004 	mov	r1, r4
   1c4e0:	e28d0018 	add	r0, sp, #24
   1c4e4:	eb0038d1 	bl	2a830 <memcpy>
   1c4e8:	e5950004 	ldr	r0, [r5, #4]
   1c4ec:	e1a0200b 	mov	r2, fp
   1c4f0:	e28d1018 	add	r1, sp, #24
   1c4f4:	ebfffe21 	bl	1bd80 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1c4f8:	e5940013 	ldr	r0, [r4, #19]
   1c4fc:	e3a02000 	mov	r2, #0
   1c500:	e28d1018 	add	r1, sp, #24
   1c504:	eb0013d5 	bl	21460 <CNetQueue::Dequeue(void*, void**)>
   1c508:	e250b000 	subs	fp, r0, #0
   1c50c:	1afffff1 	bne	1c4d8 <CARPHandler::Process()+0xfc>
   1c510:	e3a03004 	mov	r3, #4
   1c514:	e0488006 	sub	r8, r8, r6
   1c518:	e0858108 	add	r8, r5, r8, lsl #2
   1c51c:	e5c83014 	strb	r3, [r8, #20]
   1c520:	e5952010 	ldr	r2, [r5, #16]
   1c524:	e2866001 	add	r6, r6, #1
   1c528:	e1520006 	cmp	r2, r6
   1c52c:	e284401c 	add	r4, r4, #28
   1c530:	8affffdb 	bhi	1c4a4 <CARPHandler::Process()+0xc8>
   1c534:	eb003668 	bl	29edc <CTimer::Get()>
   1c538:	eb0033b5 	bl	29414 <CTimer::GetTicks() const>
   1c53c:	e5953248 	ldr	r3, [r5, #584]	; 0x248
   1c540:	e59f2274 	ldr	r2, [pc, #628]	; 1c7bc <CARPHandler::Process()+0x3e0>
   1c544:	e0403003 	sub	r3, r0, r3
   1c548:	e1530002 	cmp	r3, r2
   1c54c:	e1a04000 	mov	r4, r0
   1c550:	9a000017 	bls	1c5b4 <CARPHandler::Process()+0x1d8>
   1c554:	e5950244 	ldr	r0, [r5, #580]	; 0x244
   1c558:	e5854248 	str	r4, [r5, #584]	; 0x248
   1c55c:	e3500000 	cmp	r0, #0
   1c560:	1a000084 	bne	1c778 <CARPHandler::Process()+0x39c>
   1c564:	e595c010 	ldr	ip, [r5, #16]
   1c568:	e35c0000 	cmp	ip, #0
   1c56c:	0a000010 	beq	1c5b4 <CARPHandler::Process()+0x1d8>
   1c570:	e3a06000 	mov	r6, #0
   1c574:	e285e028 	add	lr, r5, #40	; 0x28
   1c578:	e0673187 	rsb	r3, r7, r7, lsl #3
   1c57c:	e0852103 	add	r2, r5, r3, lsl #2
   1c580:	e5d21014 	ldrb	r1, [r2, #20]
   1c584:	e3510004 	cmp	r1, #4
   1c588:	1a000004 	bne	1c5a0 <CARPHandler::Process()+0x1c4>
   1c58c:	e79e3103 	ldr	r3, [lr, r3, lsl #2]
   1c590:	e2833cea 	add	r3, r3, #59904	; 0xea00
   1c594:	e2833060 	add	r3, r3, #96	; 0x60
   1c598:	e1530004 	cmp	r3, r4
   1c59c:	35c26014 	strbcc	r6, [r2, #20]
   1c5a0:	e2877001 	add	r7, r7, #1
   1c5a4:	e15c0007 	cmp	ip, r7
   1c5a8:	8afffff2 	bhi	1c578 <CARPHandler::Process()+0x19c>
   1c5ac:	e3500000 	cmp	r0, #0
   1c5b0:	1a00006e 	bne	1c770 <CARPHandler::Process()+0x394>
   1c5b4:	e28dde65 	add	sp, sp, #1616	; 0x650
   1c5b8:	e28dd00c 	add	sp, sp, #12
   1c5bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5c0:	e594300b 	ldr	r3, [r4, #11]
   1c5c4:	e3530002 	cmp	r3, #2
   1c5c8:	e2833001 	add	r3, r3, #1
   1c5cc:	e584300b 	str	r3, [r4, #11]
   1c5d0:	8a00001b 	bhi	1c644 <CARPHandler::Process()+0x268>
   1c5d4:	e2441004 	sub	r1, r4, #4
   1c5d8:	e1a00009 	mov	r0, r9
   1c5dc:	eb001266 	bl	20f7c <CIPAddress::CIPAddress(unsigned char const*)>
   1c5e0:	e28d0008 	add	r0, sp, #8
   1c5e4:	eb003992 	bl	2ac34 <CMACAddress::CMACAddress()>
   1c5e8:	e28d0008 	add	r0, sp, #8
   1c5ec:	eb0039c6 	bl	2ad0c <CMACAddress::SetBroadcast()>
   1c5f0:	e1a02009 	mov	r2, r9
   1c5f4:	e3a01001 	mov	r1, #1
   1c5f8:	e1a00005 	mov	r0, r5
   1c5fc:	e28d3008 	add	r3, sp, #8
   1c600:	ebffff2b 	bl	1c2b4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1c604:	e3a03001 	mov	r3, #1
   1c608:	e5cb3014 	strb	r3, [fp, #20]
   1c60c:	eb003632 	bl	29edc <CTimer::Get()>
   1c610:	e1a0200a 	mov	r2, sl
   1c614:	e3a01050 	mov	r1, #80	; 0x50
   1c618:	e1a03006 	mov	r3, r6
   1c61c:	e58d5000 	str	r5, [sp]
   1c620:	eb00346b 	bl	297d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1c624:	e1a03000 	mov	r3, r0
   1c628:	e28d0008 	add	r0, sp, #8
   1c62c:	e5843007 	str	r3, [r4, #7]
   1c630:	eb003982 	bl	2ac40 <CMACAddress::~CMACAddress()>
   1c634:	e1a00009 	mov	r0, r9
   1c638:	eb0011ce 	bl	20d78 <CIPAddress::~CIPAddress()>
   1c63c:	e5952010 	ldr	r2, [r5, #16]
   1c640:	eaffffb7 	b	1c524 <CARPHandler::Process()+0x148>
   1c644:	e5940013 	ldr	r0, [r4, #19]
   1c648:	e3500000 	cmp	r0, #0
   1c64c:	1a000004 	bne	1c664 <CARPHandler::Process()+0x288>
   1c650:	ea000032 	b	1c720 <CARPHandler::Process()+0x344>
   1c654:	e5950008 	ldr	r0, [r5, #8]
   1c658:	e28d1018 	add	r1, sp, #24
   1c65c:	ebfffce2 	bl	1b9ec <CLinkLayer::ResolveFailed(void const*, unsigned int)>
   1c660:	e5940013 	ldr	r0, [r4, #19]
   1c664:	e3a02000 	mov	r2, #0
   1c668:	e28d1018 	add	r1, sp, #24
   1c66c:	eb00137b 	bl	21460 <CNetQueue::Dequeue(void*, void**)>
   1c670:	e2502000 	subs	r2, r0, #0
   1c674:	1afffff6 	bne	1c654 <CARPHandler::Process()+0x278>
   1c678:	e0488006 	sub	r8, r8, r6
   1c67c:	e0858108 	add	r8, r5, r8, lsl #2
   1c680:	e5c82014 	strb	r2, [r8, #20]
   1c684:	e5952010 	ldr	r2, [r5, #16]
   1c688:	eaffffa5 	b	1c524 <CARPHandler::Process()+0x148>
   1c68c:	e3a020aa 	mov	r2, #170	; 0xaa
   1c690:	e59f1128 	ldr	r1, [pc, #296]	; 1c7c0 <CARPHandler::Process()+0x3e4>
   1c694:	e59f0128 	ldr	r0, [pc, #296]	; 1c7c4 <CARPHandler::Process()+0x3e8>
   1c698:	eb002042 	bl	247a8 <assertion_failed>
   1c69c:	e1a00004 	mov	r0, r4
   1c6a0:	eb00127d 	bl	2109c <CIPAddress::IsNull() const>
   1c6a4:	e3500000 	cmp	r0, #0
   1c6a8:	1affff6e 	bne	1c468 <CARPHandler::Process()+0x8c>
   1c6ac:	e1a01006 	mov	r1, r6
   1c6b0:	e1a00004 	mov	r0, r4
   1c6b4:	eb0011f6 	bl	20e94 <CIPAddress::operator!=(unsigned char const*) const>
   1c6b8:	e2507000 	subs	r7, r0, #0
   1c6bc:	1affff69 	bne	1c468 <CARPHandler::Process()+0x8c>
   1c6c0:	e1a01008 	mov	r1, r8
   1c6c4:	e28d0008 	add	r0, sp, #8
   1c6c8:	eb00398a 	bl	2acf8 <CMACAddress::CMACAddress(unsigned char const*)>
   1c6cc:	e28d0010 	add	r0, sp, #16
   1c6d0:	e28d1026 	add	r1, sp, #38	; 0x26
   1c6d4:	eb001228 	bl	20f7c <CIPAddress::CIPAddress(unsigned char const*)>
   1c6d8:	e1dd31be 	ldrh	r3, [sp, #30]
   1c6dc:	e3530c01 	cmp	r3, #256	; 0x100
   1c6e0:	0a00002a 	beq	1c790 <CARPHandler::Process()+0x3b4>
   1c6e4:	e3530c02 	cmp	r3, #512	; 0x200
   1c6e8:	1a000003 	bne	1c6fc <CARPHandler::Process()+0x320>
   1c6ec:	e1a00005 	mov	r0, r5
   1c6f0:	e28d2008 	add	r2, sp, #8
   1c6f4:	e28d1010 	add	r1, sp, #16
   1c6f8:	ebfffe5a 	bl	1c068 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>
   1c6fc:	e28d0010 	add	r0, sp, #16
   1c700:	eb00119c 	bl	20d78 <CIPAddress::~CIPAddress()>
   1c704:	e28d0008 	add	r0, sp, #8
   1c708:	eb00394c 	bl	2ac40 <CMACAddress::~CMACAddress()>
   1c70c:	eaffff55 	b	1c468 <CARPHandler::Process()+0x8c>
   1c710:	e3a02057 	mov	r2, #87	; 0x57
   1c714:	e59f10a4 	ldr	r1, [pc, #164]	; 1c7c0 <CARPHandler::Process()+0x3e4>
   1c718:	e59f00a8 	ldr	r0, [pc, #168]	; 1c7c8 <CARPHandler::Process()+0x3ec>
   1c71c:	eb002021 	bl	247a8 <assertion_failed>
   1c720:	e3a0209f 	mov	r2, #159	; 0x9f
   1c724:	e59f1094 	ldr	r1, [pc, #148]	; 1c7c0 <CARPHandler::Process()+0x3e4>
   1c728:	e59f0094 	ldr	r0, [pc, #148]	; 1c7c4 <CARPHandler::Process()+0x3e8>
   1c72c:	eb00201d 	bl	247a8 <assertion_failed>
   1c730:	e3a02059 	mov	r2, #89	; 0x59
   1c734:	e59f1084 	ldr	r1, [pc, #132]	; 1c7c0 <CARPHandler::Process()+0x3e4>
   1c738:	e59f008c 	ldr	r0, [pc, #140]	; 1c7cc <CARPHandler::Process()+0x3f0>
   1c73c:	eb002019 	bl	247a8 <assertion_failed>
   1c740:	e3a0205f 	mov	r2, #95	; 0x5f
   1c744:	e59f1074 	ldr	r1, [pc, #116]	; 1c7c0 <CARPHandler::Process()+0x3e4>
   1c748:	e59f0080 	ldr	r0, [pc, #128]	; 1c7d0 <CARPHandler::Process()+0x3f4>
   1c74c:	eb002015 	bl	247a8 <assertion_failed>
   1c750:	e3a02088 	mov	r2, #136	; 0x88
   1c754:	e59f1064 	ldr	r1, [pc, #100]	; 1c7c0 <CARPHandler::Process()+0x3e4>
   1c758:	e59f0074 	ldr	r0, [pc, #116]	; 1c7d4 <CARPHandler::Process()+0x3f8>
   1c75c:	eb002011 	bl	247a8 <assertion_failed>
   1c760:	e3a02089 	mov	r2, #137	; 0x89
   1c764:	e59f1054 	ldr	r1, [pc, #84]	; 1c7c0 <CARPHandler::Process()+0x3e4>
   1c768:	e59f0068 	ldr	r0, [pc, #104]	; 1c7d8 <CARPHandler::Process()+0x3fc>
   1c76c:	eb00200d 	bl	247a8 <assertion_failed>
   1c770:	eb003d6b 	bl	2bd24 <LeaveCritical>
   1c774:	eaffff8e 	b	1c5b4 <CARPHandler::Process()+0x1d8>
   1c778:	eb003d3f 	bl	2bc7c <EnterCritical>
   1c77c:	e595c010 	ldr	ip, [r5, #16]
   1c780:	e5950244 	ldr	r0, [r5, #580]	; 0x244
   1c784:	e35c0000 	cmp	ip, #0
   1c788:	1affff78 	bne	1c570 <CARPHandler::Process()+0x194>
   1c78c:	eaffff86 	b	1c5ac <CARPHandler::Process()+0x1d0>
   1c790:	e1a01007 	mov	r1, r7
   1c794:	e1a00005 	mov	r0, r5
   1c798:	e28d2010 	add	r2, sp, #16
   1c79c:	e28d3008 	add	r3, sp, #8
   1c7a0:	ebfffec3 	bl	1c2b4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1c7a4:	e1a00005 	mov	r0, r5
   1c7a8:	e28d2008 	add	r2, sp, #8
   1c7ac:	e28d1010 	add	r1, sp, #16
   1c7b0:	ebfffe62 	bl	1c140 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>
   1c7b4:	eaffffd0 	b	1c6fc <CARPHandler::Process()+0x320>
   1c7b8:	0001bec4 	.word	0x0001bec4
   1c7bc:	0000176f 	.word	0x0000176f
   1c7c0:	000456d8 	.word	0x000456d8
   1c7c4:	00045714 	.word	0x00045714
   1c7c8:	000453dc 	.word	0x000453dc
   1c7cc:	000454c0 	.word	0x000454c0
   1c7d0:	00045704 	.word	0x00045704
   1c7d4:	00045498 	.word	0x00045498
   1c7d8:	0004559c 	.word	0x0004559c

0001c7dc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>:
   1c7dc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7e0:	e1a05000 	mov	r5, r0
   1c7e4:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1c7e8:	e24dd024 	sub	sp, sp, #36	; 0x24
   1c7ec:	e3500000 	cmp	r0, #0
   1c7f0:	e1a09001 	mov	r9, r1
   1c7f4:	e58d2014 	str	r2, [sp, #20]
   1c7f8:	e58d3010 	str	r3, [sp, #16]
   1c7fc:	1a00007f 	bne	1ca00 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x224>
   1c800:	e595c010 	ldr	ip, [r5, #16]
   1c804:	e35c0000 	cmp	ip, #0
   1c808:	e1a0700c 	mov	r7, ip
   1c80c:	0a0000a7 	beq	1cab0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2d4>
   1c810:	e3e08000 	mvn	r8, #0
   1c814:	e285a015 	add	sl, r5, #21
   1c818:	e3a04000 	mov	r4, #0
   1c81c:	e3a07014 	mov	r7, #20
   1c820:	e1a0600a 	mov	r6, sl
   1c824:	e58d800c 	str	r8, [sp, #12]
   1c828:	ea000007 	b	1c84c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x70>
   1c82c:	e3530000 	cmp	r3, #0
   1c830:	1a00004f 	bne	1c974 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x198>
   1c834:	e3570014 	cmp	r7, #20
   1c838:	01a07004 	moveq	r7, r4
   1c83c:	e2844001 	add	r4, r4, #1
   1c840:	e15c0004 	cmp	ip, r4
   1c844:	e286601c 	add	r6, r6, #28
   1c848:	9a000018 	bls	1c8b0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xd4>
   1c84c:	e064b184 	rsb	fp, r4, r4, lsl #3
   1c850:	e085a10b 	add	sl, r5, fp, lsl #2
   1c854:	e5da3014 	ldrb	r3, [sl, #20]
   1c858:	e1a0b10b 	lsl	fp, fp, #2
   1c85c:	e3530003 	cmp	r3, #3
   1c860:	e6ef3073 	uxtb	r3, r3
   1c864:	9afffff0 	bls	1c82c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x50>
   1c868:	e3530004 	cmp	r3, #4
   1c86c:	1a00009d 	bne	1cae8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x30c>
   1c870:	e5963013 	ldr	r3, [r6, #19]
   1c874:	e1a01006 	mov	r1, r6
   1c878:	e1530008 	cmp	r3, r8
   1c87c:	31a08003 	movcc	r8, r3
   1c880:	e59d300c 	ldr	r3, [sp, #12]
   1c884:	31a03004 	movcc	r3, r4
   1c888:	e1a00009 	mov	r0, r9
   1c88c:	e58d300c 	str	r3, [sp, #12]
   1c890:	eb001168 	bl	20e38 <CIPAddress::operator==(unsigned char const*) const>
   1c894:	e3500000 	cmp	r0, #0
   1c898:	1a00006c 	bne	1ca50 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x274>
   1c89c:	e595c010 	ldr	ip, [r5, #16]
   1c8a0:	e2844001 	add	r4, r4, #1
   1c8a4:	e15c0004 	cmp	ip, r4
   1c8a8:	e286601c 	add	r6, r6, #28
   1c8ac:	8affffe6 	bhi	1c84c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x70>
   1c8b0:	e3570014 	cmp	r7, #20
   1c8b4:	0a000043 	beq	1c9c8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x1ec>
   1c8b8:	e0676187 	rsb	r6, r7, r7, lsl #3
   1c8bc:	e1a06106 	lsl	r6, r6, #2
   1c8c0:	e2866015 	add	r6, r6, #21
   1c8c4:	e1a04187 	lsl	r4, r7, #3
   1c8c8:	e3a08001 	mov	r8, #1
   1c8cc:	e0444007 	sub	r4, r4, r7
   1c8d0:	e0854104 	add	r4, r5, r4, lsl #2
   1c8d4:	e1a00009 	mov	r0, r9
   1c8d8:	e0851006 	add	r1, r5, r6
   1c8dc:	e5c48014 	strb	r8, [r4, #20]
   1c8e0:	eb0011d6 	bl	21040 <CIPAddress::CopyTo(unsigned char*) const>
   1c8e4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c8e8:	e3500000 	cmp	r0, #0
   1c8ec:	0a00006b 	beq	1caa0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2c4>
   1c8f0:	e3a03000 	mov	r3, #0
   1c8f4:	e59d1010 	ldr	r1, [sp, #16]
   1c8f8:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1c8fc:	eb001291 	bl	21348 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c900:	eb003575 	bl	29edc <CTimer::Get()>
   1c904:	eb0032c2 	bl	29414 <CTimer::GetTicks() const>
   1c908:	e5848024 	str	r8, [r4, #36]	; 0x24
   1c90c:	e5840028 	str	r0, [r4, #40]	; 0x28
   1c910:	eb003571 	bl	29edc <CTimer::Get()>
   1c914:	e1a03007 	mov	r3, r7
   1c918:	e3a01050 	mov	r1, #80	; 0x50
   1c91c:	e59f21d4 	ldr	r2, [pc, #468]	; 1caf8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x31c>
   1c920:	e58d5000 	str	r5, [sp]
   1c924:	eb0033aa 	bl	297d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1c928:	e5840020 	str	r0, [r4, #32]
   1c92c:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   1c930:	e3530000 	cmp	r3, #0
   1c934:	1a000057 	bne	1ca98 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2bc>
   1c938:	e28d0018 	add	r0, sp, #24
   1c93c:	eb0038bc 	bl	2ac34 <CMACAddress::CMACAddress()>
   1c940:	e28d0018 	add	r0, sp, #24
   1c944:	eb0038f0 	bl	2ad0c <CMACAddress::SetBroadcast()>
   1c948:	e1a02009 	mov	r2, r9
   1c94c:	e1a00005 	mov	r0, r5
   1c950:	e3a01001 	mov	r1, #1
   1c954:	e28d3018 	add	r3, sp, #24
   1c958:	ebfffe55 	bl	1c2b4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1c95c:	e28d0018 	add	r0, sp, #24
   1c960:	eb0038b6 	bl	2ac40 <CMACAddress::~CMACAddress()>
   1c964:	e3a02000 	mov	r2, #0
   1c968:	e1a00002 	mov	r0, r2
   1c96c:	e28dd024 	add	sp, sp, #36	; 0x24
   1c970:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c974:	e1a01006 	mov	r1, r6
   1c978:	e1a00009 	mov	r0, r9
   1c97c:	eb00112d 	bl	20e38 <CIPAddress::operator==(unsigned char const*) const>
   1c980:	e3500000 	cmp	r0, #0
   1c984:	0affffc4 	beq	1c89c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xc0>
   1c988:	e59a002c 	ldr	r0, [sl, #44]	; 0x2c
   1c98c:	e3500000 	cmp	r0, #0
   1c990:	0a00004c 	beq	1cac8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2ec>
   1c994:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1c998:	e3a03000 	mov	r3, #0
   1c99c:	e59d1010 	ldr	r1, [sp, #16]
   1c9a0:	eb001268 	bl	21348 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c9a4:	eb00354c 	bl	29edc <CTimer::Get()>
   1c9a8:	eb003299 	bl	29414 <CTimer::GetTicks() const>
   1c9ac:	e58a0028 	str	r0, [sl, #40]	; 0x28
   1c9b0:	e5952244 	ldr	r2, [r5, #580]	; 0x244
   1c9b4:	e3520000 	cmp	r2, #0
   1c9b8:	0affffea 	beq	1c968 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x18c>
   1c9bc:	eb003cd8 	bl	2bd24 <LeaveCritical>
   1c9c0:	e3a02000 	mov	r2, #0
   1c9c4:	eaffffe7 	b	1c968 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x18c>
   1c9c8:	e35c0014 	cmp	ip, #20
   1c9cc:	1a00000d 	bne	1ca08 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x22c>
   1c9d0:	e59d300c 	ldr	r3, [sp, #12]
   1c9d4:	e3530013 	cmp	r3, #19
   1c9d8:	8a00003e 	bhi	1cad8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2fc>
   1c9dc:	e3a02000 	mov	r2, #0
   1c9e0:	e59d700c 	ldr	r7, [sp, #12]
   1c9e4:	e0673187 	rsb	r3, r7, r7, lsl #3
   1c9e8:	e1a06103 	lsl	r6, r3, #2
   1c9ec:	e0853103 	add	r3, r5, r3, lsl #2
   1c9f0:	e2866015 	add	r6, r6, #21
   1c9f4:	e5c32014 	strb	r2, [r3, #20]
   1c9f8:	e1a04187 	lsl	r4, r7, #3
   1c9fc:	eaffffb1 	b	1c8c8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xec>
   1ca00:	eb003c9d 	bl	2bc7c <EnterCritical>
   1ca04:	eaffff7d 	b	1c800 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x24>
   1ca08:	e1a0700c 	mov	r7, ip
   1ca0c:	e06c618c 	rsb	r6, ip, ip, lsl #3
   1ca10:	e1a06106 	lsl	r6, r6, #2
   1ca14:	e2866015 	add	r6, r6, #21
   1ca18:	e3a03000 	mov	r3, #0
   1ca1c:	e06c818c 	rsb	r8, ip, ip, lsl #3
   1ca20:	e0858108 	add	r8, r5, r8, lsl #2
   1ca24:	e5c83014 	strb	r3, [r8, #20]
   1ca28:	e3a0000c 	mov	r0, #12
   1ca2c:	e1a0418c 	lsl	r4, ip, #3
   1ca30:	eb003964 	bl	2afc8 <operator new(unsigned int)>
   1ca34:	e1a0a000 	mov	sl, r0
   1ca38:	eb001205 	bl	21254 <CNetQueue::CNetQueue()>
   1ca3c:	e5953010 	ldr	r3, [r5, #16]
   1ca40:	e588a02c 	str	sl, [r8, #44]	; 0x2c
   1ca44:	e2833001 	add	r3, r3, #1
   1ca48:	e5853010 	str	r3, [r5, #16]
   1ca4c:	eaffff9d 	b	1c8c8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xec>
   1ca50:	e59d3014 	ldr	r3, [sp, #20]
   1ca54:	e3530000 	cmp	r3, #0
   1ca58:	0a000016 	beq	1cab8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2dc>
   1ca5c:	e28b3019 	add	r3, fp, #25
   1ca60:	e0851003 	add	r1, r5, r3
   1ca64:	e58d000c 	str	r0, [sp, #12]
   1ca68:	e59d0014 	ldr	r0, [sp, #20]
   1ca6c:	eb003891 	bl	2acb8 <CMACAddress::Set(unsigned char const*)>
   1ca70:	eb003519 	bl	29edc <CTimer::Get()>
   1ca74:	eb003266 	bl	29414 <CTimer::GetTicks() const>
   1ca78:	e58a0028 	str	r0, [sl, #40]	; 0x28
   1ca7c:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   1ca80:	e59d200c 	ldr	r2, [sp, #12]
   1ca84:	e3530000 	cmp	r3, #0
   1ca88:	0affffb6 	beq	1c968 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x18c>
   1ca8c:	eb003ca4 	bl	2bd24 <LeaveCritical>
   1ca90:	e59d200c 	ldr	r2, [sp, #12]
   1ca94:	eaffffb3 	b	1c968 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x18c>
   1ca98:	eb003ca1 	bl	2bd24 <LeaveCritical>
   1ca9c:	eaffffa5 	b	1c938 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x15c>
   1caa0:	e59f2054 	ldr	r2, [pc, #84]	; 1cafc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x320>
   1caa4:	e59f1054 	ldr	r1, [pc, #84]	; 1cb00 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   1caa8:	e59f0054 	ldr	r0, [pc, #84]	; 1cb04 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x328>
   1caac:	eb001f3d 	bl	247a8 <assertion_failed>
   1cab0:	e3a06015 	mov	r6, #21
   1cab4:	eaffffd7 	b	1ca18 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x23c>
   1cab8:	e3a020ff 	mov	r2, #255	; 0xff
   1cabc:	e59f103c 	ldr	r1, [pc, #60]	; 1cb00 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   1cac0:	e59f0040 	ldr	r0, [pc, #64]	; 1cb08 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x32c>
   1cac4:	eb001f37 	bl	247a8 <assertion_failed>
   1cac8:	e3a020eb 	mov	r2, #235	; 0xeb
   1cacc:	e59f102c 	ldr	r1, [pc, #44]	; 1cb00 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   1cad0:	e59f0034 	ldr	r0, [pc, #52]	; 1cb0c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x330>
   1cad4:	eb001f33 	bl	247a8 <assertion_failed>
   1cad8:	e59f2030 	ldr	r2, [pc, #48]	; 1cb10 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x334>
   1cadc:	e59f101c 	ldr	r1, [pc, #28]	; 1cb00 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   1cae0:	e59f002c 	ldr	r0, [pc, #44]	; 1cb14 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1cae4:	eb001f2f 	bl	247a8 <assertion_failed>
   1cae8:	e59f2028 	ldr	r2, [pc, #40]	; 1cb18 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x33c>
   1caec:	e59f100c 	ldr	r1, [pc, #12]	; 1cb00 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   1caf0:	e59f0024 	ldr	r0, [pc, #36]	; 1cb1c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x340>
   1caf4:	eb001f2b 	bl	247a8 <assertion_failed>
   1caf8:	0001bec4 	.word	0x0001bec4
   1cafc:	00000129 	.word	0x00000129
   1cb00:	000456d8 	.word	0x000456d8
   1cb04:	00045714 	.word	0x00045714
   1cb08:	0004574c 	.word	0x0004574c
   1cb0c:	0004572c 	.word	0x0004572c
   1cb10:	0000011d 	.word	0x0000011d
   1cb14:	00045760 	.word	0x00045760
   1cb18:	0000010a 	.word	0x0000010a
   1cb1c:	00041748 	.word	0x00041748

0001cb20 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>:
   1cb20:	e92d4010 	push	{r4, lr}
   1cb24:	e59de008 	ldr	lr, [sp, #8]
   1cb28:	e3510000 	cmp	r1, #0
   1cb2c:	e880400e 	stm	r0, {r1, r2, r3, lr}
   1cb30:	0a000009 	beq	1cb5c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x3c>
   1cb34:	e3520000 	cmp	r2, #0
   1cb38:	0a00000b 	beq	1cb6c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x4c>
   1cb3c:	e3530000 	cmp	r3, #0
   1cb40:	0a00000d 	beq	1cb7c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x5c>
   1cb44:	e35e0000 	cmp	lr, #0
   1cb48:	18bd8010 	popne	{r4, pc}
   1cb4c:	e3a0203e 	mov	r2, #62	; 0x3e
   1cb50:	e59f1034 	ldr	r1, [pc, #52]	; 1cb8c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1cb54:	e59f0034 	ldr	r0, [pc, #52]	; 1cb90 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x70>
   1cb58:	eb001f12 	bl	247a8 <assertion_failed>
   1cb5c:	e3a0203b 	mov	r2, #59	; 0x3b
   1cb60:	e59f1024 	ldr	r1, [pc, #36]	; 1cb8c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1cb64:	e59f0028 	ldr	r0, [pc, #40]	; 1cb94 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x74>
   1cb68:	eb001f0e 	bl	247a8 <assertion_failed>
   1cb6c:	e3a0203c 	mov	r2, #60	; 0x3c
   1cb70:	e59f1014 	ldr	r1, [pc, #20]	; 1cb8c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1cb74:	e59f001c 	ldr	r0, [pc, #28]	; 1cb98 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x78>
   1cb78:	eb001f0a 	bl	247a8 <assertion_failed>
   1cb7c:	e3a0203d 	mov	r2, #61	; 0x3d
   1cb80:	e59f1004 	ldr	r1, [pc, #4]	; 1cb8c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1cb84:	e59f0010 	ldr	r0, [pc, #16]	; 1cb9c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x7c>
   1cb88:	eb001f06 	bl	247a8 <assertion_failed>
   1cb8c:	0004577c 	.word	0x0004577c
   1cb90:	0004578c 	.word	0x0004578c
   1cb94:	000453dc 	.word	0x000453dc
   1cb98:	000453f0 	.word	0x000453f0
   1cb9c:	00045704 	.word	0x00045704

0001cba0 <CICMPHandler::~CICMPHandler()>:
   1cba0:	e12fff1e 	bx	lr

0001cba4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>:
   1cba4:	e92d4070 	push	{r4, r5, r6, lr}
   1cba8:	e3510002 	cmp	r1, #2
   1cbac:	e24dd010 	sub	sp, sp, #16
   1cbb0:	8a000024 	bhi	1cc48 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xa4>
   1cbb4:	e3520000 	cmp	r2, #0
   1cbb8:	e1a05002 	mov	r5, r2
   1cbbc:	e5cd1000 	strb	r1, [sp]
   1cbc0:	0a000024 	beq	1cc58 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xb4>
   1cbc4:	e1a04003 	mov	r4, r3
   1cbc8:	e5d23009 	ldrb	r3, [r2, #9]
   1cbcc:	e2851010 	add	r1, r5, #16
   1cbd0:	e3a02004 	mov	r2, #4
   1cbd4:	e1a06000 	mov	r6, r0
   1cbd8:	e28d0002 	add	r0, sp, #2
   1cbdc:	e5cd3001 	strb	r3, [sp, #1]
   1cbe0:	eb003712 	bl	2a830 <memcpy>
   1cbe4:	e3a02004 	mov	r2, #4
   1cbe8:	e285100c 	add	r1, r5, #12
   1cbec:	e28d0006 	add	r0, sp, #6
   1cbf0:	eb00370e 	bl	2a830 <memcpy>
   1cbf4:	e3540000 	cmp	r4, #0
   1cbf8:	0a00001a 	beq	1cc68 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xc4>
   1cbfc:	e5d42002 	ldrb	r2, [r4, #2]
   1cc00:	e5d4c003 	ldrb	ip, [r4, #3]
   1cc04:	e5d43000 	ldrb	r3, [r4]
   1cc08:	e5d41001 	ldrb	r1, [r4, #1]
   1cc0c:	e596000c 	ldr	r0, [r6, #12]
   1cc10:	e182240c 	orr	r2, r2, ip, lsl #8
   1cc14:	e1833401 	orr	r3, r3, r1, lsl #8
   1cc18:	e6bf2fb2 	rev16	r2, r2
   1cc1c:	e6bf3fb3 	rev16	r3, r3
   1cc20:	e3500000 	cmp	r0, #0
   1cc24:	e1cd20ba 	strh	r2, [sp, #10]
   1cc28:	e1cd30bc 	strh	r3, [sp, #12]
   1cc2c:	0a000011 	beq	1cc78 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xd4>
   1cc30:	e1a0100d 	mov	r1, sp
   1cc34:	e3a03000 	mov	r3, #0
   1cc38:	e3a0200e 	mov	r2, #14
   1cc3c:	eb0011c1 	bl	21348 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1cc40:	e28dd010 	add	sp, sp, #16
   1cc44:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cc48:	e3a020ee 	mov	r2, #238	; 0xee
   1cc4c:	e59f1034 	ldr	r1, [pc, #52]	; 1cc88 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cc50:	e59f0034 	ldr	r0, [pc, #52]	; 1cc8c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe8>
   1cc54:	eb001ed3 	bl	247a8 <assertion_failed>
   1cc58:	e3a020f3 	mov	r2, #243	; 0xf3
   1cc5c:	e59f1024 	ldr	r1, [pc, #36]	; 1cc88 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cc60:	e59f0028 	ldr	r0, [pc, #40]	; 1cc90 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xec>
   1cc64:	eb001ecf 	bl	247a8 <assertion_failed>
   1cc68:	e3a020f8 	mov	r2, #248	; 0xf8
   1cc6c:	e59f1014 	ldr	r1, [pc, #20]	; 1cc88 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cc70:	e59f001c 	ldr	r0, [pc, #28]	; 1cc94 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xf0>
   1cc74:	eb001ecb 	bl	247a8 <assertion_failed>
   1cc78:	e3a020fc 	mov	r2, #252	; 0xfc
   1cc7c:	e59f1004 	ldr	r1, [pc, #4]	; 1cc88 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cc80:	e59f0010 	ldr	r0, [pc, #16]	; 1cc98 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xf4>
   1cc84:	eb001ec7 	bl	247a8 <assertion_failed>
   1cc88:	0004577c 	.word	0x0004577c
   1cc8c:	000457a8 	.word	0x000457a8
   1cc90:	000457c8 	.word	0x000457c8
   1cc94:	000457d8 	.word	0x000457d8
   1cc98:	0004578c 	.word	0x0004578c

0001cc9c <CICMPHandler::Process()>:
   1cc9c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cca0:	e1a05000 	mov	r5, r0
   1cca4:	e5900008 	ldr	r0, [r0, #8]
   1cca8:	e24dde67 	sub	sp, sp, #1648	; 0x670
   1ccac:	e3500000 	cmp	r0, #0
   1ccb0:	e24dd004 	sub	sp, sp, #4
   1ccb4:	0a00007c 	beq	1ceac <CICMPHandler::Process()+0x210>
   1ccb8:	e59fb388 	ldr	fp, [pc, #904]	; 1d048 <CICMPHandler::Process()+0x3ac>
   1ccbc:	e59f7388 	ldr	r7, [pc, #904]	; 1d04c <CICMPHandler::Process()+0x3b0>
   1ccc0:	e59fa388 	ldr	sl, [pc, #904]	; 1d050 <CICMPHandler::Process()+0x3b4>
   1ccc4:	e59f9388 	ldr	r9, [pc, #904]	; 1d054 <CICMPHandler::Process()+0x3b8>
   1ccc8:	e28d6018 	add	r6, sp, #24
   1cccc:	e28d2014 	add	r2, sp, #20
   1ccd0:	e28d1030 	add	r1, sp, #48	; 0x30
   1ccd4:	eb0011e1 	bl	21460 <CNetQueue::Dequeue(void*, void**)>
   1ccd8:	e2504000 	subs	r4, r0, #0
   1ccdc:	0a000076 	beq	1cebc <CICMPHandler::Process()+0x220>
   1cce0:	e59d8014 	ldr	r8, [sp, #20]
   1cce4:	e3580000 	cmp	r8, #0
   1cce8:	0a000050 	beq	1ce30 <CICMPHandler::Process()+0x194>
   1ccec:	e5d82000 	ldrb	r2, [r8]
   1ccf0:	e3520001 	cmp	r2, #1
   1ccf4:	1a000051 	bne	1ce40 <CICMPHandler::Process()+0x1a4>
   1ccf8:	e2881001 	add	r1, r8, #1
   1ccfc:	e1a00006 	mov	r0, r6
   1cd00:	eb00109d 	bl	20f7c <CIPAddress::CIPAddress(unsigned char const*)>
   1cd04:	e2881005 	add	r1, r8, #5
   1cd08:	e28d0020 	add	r0, sp, #32
   1cd0c:	eb00109a 	bl	20f7c <CIPAddress::CIPAddress(unsigned char const*)>
   1cd10:	e1a00008 	mov	r0, r8
   1cd14:	e3a01009 	mov	r1, #9
   1cd18:	eb0038b8 	bl	2b000 <operator delete(void*, unsigned int)>
   1cd1c:	e5953000 	ldr	r3, [r5]
   1cd20:	e3530000 	cmp	r3, #0
   1cd24:	0a000049 	beq	1ce50 <CICMPHandler::Process()+0x1b4>
   1cd28:	e28d0020 	add	r0, sp, #32
   1cd2c:	eb0010e8 	bl	210d4 <CIPAddress::IsBroadcast() const>
   1cd30:	e3500000 	cmp	r0, #0
   1cd34:	1a000008 	bne	1cd5c <CICMPHandler::Process()+0xc0>
   1cd38:	e5950000 	ldr	r0, [r5]
   1cd3c:	eb000fa6 	bl	20bdc <CNetConfig::GetBroadcastAddress() const>
   1cd40:	e1a01000 	mov	r1, r0
   1cd44:	e28d0020 	add	r0, sp, #32
   1cd48:	eb00100b 	bl	20d7c <CIPAddress::operator==(CIPAddress const&) const>
   1cd4c:	e3540007 	cmp	r4, #7
   1cd50:	93800001 	orrls	r0, r0, #1
   1cd54:	e31000ff 	tst	r0, #255	; 0xff
   1cd58:	0a000005 	beq	1cd74 <CICMPHandler::Process()+0xd8>
   1cd5c:	e28d0020 	add	r0, sp, #32
   1cd60:	eb001004 	bl	20d78 <CIPAddress::~CIPAddress()>
   1cd64:	e1a00006 	mov	r0, r6
   1cd68:	eb001002 	bl	20d78 <CIPAddress::~CIPAddress()>
   1cd6c:	e5950008 	ldr	r0, [r5, #8]
   1cd70:	eaffffd5 	b	1cccc <CICMPHandler::Process()+0x30>
   1cd74:	e1a01004 	mov	r1, r4
   1cd78:	e28d0030 	add	r0, sp, #48	; 0x30
   1cd7c:	eb00127a 	bl	2176c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1cd80:	e3500000 	cmp	r0, #0
   1cd84:	1afffff4 	bne	1cd5c <CICMPHandler::Process()+0xc0>
   1cd88:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   1cd8c:	e3530008 	cmp	r3, #8
   1cd90:	0a000032 	beq	1ce60 <CICMPHandler::Process()+0x1c4>
   1cd94:	e354001c 	cmp	r4, #28
   1cd98:	9affffef 	bls	1cd5c <CICMPHandler::Process()+0xc0>
   1cd9c:	e5dd3038 	ldrb	r3, [sp, #56]	; 0x38
   1cda0:	e203200f 	and	r2, r3, #15
   1cda4:	e2421005 	sub	r1, r2, #5
   1cda8:	e3510001 	cmp	r1, #1
   1cdac:	8affffea 	bhi	1cd5c <CICMPHandler::Process()+0xc0>
   1cdb0:	e1a03243 	asr	r3, r3, #4
   1cdb4:	e3530004 	cmp	r3, #4
   1cdb8:	1affffe7 	bne	1cd5c <CICMPHandler::Process()+0xc0>
   1cdbc:	e5950000 	ldr	r0, [r5]
   1cdc0:	e58d200c 	str	r2, [sp, #12]
   1cdc4:	eb000f7a 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   1cdc8:	e28d1044 	add	r1, sp, #68	; 0x44
   1cdcc:	eb001030 	bl	20e94 <CIPAddress::operator!=(unsigned char const*) const>
   1cdd0:	e3500000 	cmp	r0, #0
   1cdd4:	1affffe0 	bne	1cd5c <CICMPHandler::Process()+0xc0>
   1cdd8:	e59d200c 	ldr	r2, [sp, #12]
   1cddc:	e1a02102 	lsl	r2, r2, #2
   1cde0:	e2823010 	add	r3, r2, #16
   1cde4:	e1530004 	cmp	r3, r4
   1cde8:	8affffdb 	bhi	1cd5c <CICMPHandler::Process()+0xc0>
   1cdec:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   1cdf0:	e28d4038 	add	r4, sp, #56	; 0x38
   1cdf4:	e2433003 	sub	r3, r3, #3
   1cdf8:	e0844002 	add	r4, r4, r2
   1cdfc:	e3530009 	cmp	r3, #9
   1ce00:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1ce04:	eaffffd4 	b	1cd5c <CICMPHandler::Process()+0xc0>
   1ce08:	0001cfa8 	.word	0x0001cfa8
   1ce0c:	0001cd5c 	.word	0x0001cd5c
   1ce10:	0001cf30 	.word	0x0001cf30
   1ce14:	0001cd5c 	.word	0x0001cd5c
   1ce18:	0001cd5c 	.word	0x0001cd5c
   1ce1c:	0001cd5c 	.word	0x0001cd5c
   1ce20:	0001cd5c 	.word	0x0001cd5c
   1ce24:	0001cd5c 	.word	0x0001cd5c
   1ce28:	0001cefc 	.word	0x0001cefc
   1ce2c:	0001cec8 	.word	0x0001cec8
   1ce30:	e3a02052 	mov	r2, #82	; 0x52
   1ce34:	e59f121c 	ldr	r1, [pc, #540]	; 1d058 <CICMPHandler::Process()+0x3bc>
   1ce38:	e59f021c 	ldr	r0, [pc, #540]	; 1d05c <CICMPHandler::Process()+0x3c0>
   1ce3c:	eb001e59 	bl	247a8 <assertion_failed>
   1ce40:	e3a02053 	mov	r2, #83	; 0x53
   1ce44:	e59f120c 	ldr	r1, [pc, #524]	; 1d058 <CICMPHandler::Process()+0x3bc>
   1ce48:	e59f0210 	ldr	r0, [pc, #528]	; 1d060 <CICMPHandler::Process()+0x3c4>
   1ce4c:	eb001e55 	bl	247a8 <assertion_failed>
   1ce50:	e3a0205b 	mov	r2, #91	; 0x5b
   1ce54:	e59f11fc 	ldr	r1, [pc, #508]	; 1d058 <CICMPHandler::Process()+0x3bc>
   1ce58:	e59f0204 	ldr	r0, [pc, #516]	; 1d064 <CICMPHandler::Process()+0x3c8>
   1ce5c:	eb001e51 	bl	247a8 <assertion_failed>
   1ce60:	e5dd3031 	ldrb	r3, [sp, #49]	; 0x31
   1ce64:	e3530000 	cmp	r3, #0
   1ce68:	1affffbb 	bne	1cd5c <CICMPHandler::Process()+0xc0>
   1ce6c:	e1a01004 	mov	r1, r4
   1ce70:	e28d0030 	add	r0, sp, #48	; 0x30
   1ce74:	e58d3030 	str	r3, [sp, #48]	; 0x30
   1ce78:	eb00123b 	bl	2176c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1ce7c:	e5952004 	ldr	r2, [r5, #4]
   1ce80:	e1cd03b2 	strh	r0, [sp, #50]	; 0x32
   1ce84:	e3520000 	cmp	r2, #0
   1ce88:	0a000053 	beq	1cfdc <CICMPHandler::Process()+0x340>
   1ce8c:	e3a01001 	mov	r1, #1
   1ce90:	e1a03004 	mov	r3, r4
   1ce94:	e58d1000 	str	r1, [sp]
   1ce98:	e1a00002 	mov	r0, r2
   1ce9c:	e1a01006 	mov	r1, r6
   1cea0:	e28d2030 	add	r2, sp, #48	; 0x30
   1cea4:	ebfff7b3 	bl	1ad78 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1cea8:	eaffffab 	b	1cd5c <CICMPHandler::Process()+0xc0>
   1ceac:	e3a0204e 	mov	r2, #78	; 0x4e
   1ceb0:	e59f11a0 	ldr	r1, [pc, #416]	; 1d058 <CICMPHandler::Process()+0x3bc>
   1ceb4:	e59f01ac 	ldr	r0, [pc, #428]	; 1d068 <CICMPHandler::Process()+0x3cc>
   1ceb8:	eb001e3a 	bl	247a8 <assertion_failed>
   1cebc:	e28dde67 	add	sp, sp, #1648	; 0x670
   1cec0:	e28dd004 	add	sp, sp, #4
   1cec4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cec8:	eb00271e 	bl	26b48 <CLogger::Get()>
   1cecc:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1ced0:	e1a0300b 	mov	r3, fp
   1ced4:	e1a01007 	mov	r1, r7
   1ced8:	e58d2000 	str	r2, [sp]
   1cedc:	e3a02002 	mov	r2, #2
   1cee0:	eb00265a 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cee4:	e1a03004 	mov	r3, r4
   1cee8:	e3a01002 	mov	r1, #2
   1ceec:	e1a00005 	mov	r0, r5
   1cef0:	e28d2038 	add	r2, sp, #56	; 0x38
   1cef4:	ebffff2a 	bl	1cba4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1cef8:	eaffff97 	b	1cd5c <CICMPHandler::Process()+0xc0>
   1cefc:	eb002711 	bl	26b48 <CLogger::Get()>
   1cf00:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1cf04:	e1a0300a 	mov	r3, sl
   1cf08:	e1a01007 	mov	r1, r7
   1cf0c:	e58d2000 	str	r2, [sp]
   1cf10:	e3a02002 	mov	r2, #2
   1cf14:	eb00264d 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cf18:	e1a03004 	mov	r3, r4
   1cf1c:	e3a01001 	mov	r1, #1
   1cf20:	e1a00005 	mov	r0, r5
   1cf24:	e28d2038 	add	r2, sp, #56	; 0x38
   1cf28:	ebffff1d 	bl	1cba4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1cf2c:	eaffff8a 	b	1cd5c <CICMPHandler::Process()+0xc0>
   1cf30:	e28d0028 	add	r0, sp, #40	; 0x28
   1cf34:	e28d1034 	add	r1, sp, #52	; 0x34
   1cf38:	eb00100f 	bl	20f7c <CIPAddress::CIPAddress(unsigned char const*)>
   1cf3c:	e5953004 	ldr	r3, [r5, #4]
   1cf40:	e3530000 	cmp	r3, #0
   1cf44:	0a000028 	beq	1cfec <CICMPHandler::Process()+0x350>
   1cf48:	e5950000 	ldr	r0, [r5]
   1cf4c:	eb000f18 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   1cf50:	e1a01000 	mov	r1, r0
   1cf54:	e5950000 	ldr	r0, [r5]
   1cf58:	e58d100c 	str	r1, [sp, #12]
   1cf5c:	eb000f18 	bl	20bc4 <CNetConfig::GetNetMask() const>
   1cf60:	e59d100c 	ldr	r1, [sp, #12]
   1cf64:	e1a02000 	mov	r2, r0
   1cf68:	e28d0028 	add	r0, sp, #40	; 0x28
   1cf6c:	eb00108b 	bl	211a0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   1cf70:	e3500000 	cmp	r0, #0
   1cf74:	0a000008 	beq	1cf9c <CICMPHandler::Process()+0x300>
   1cf78:	e28d4048 	add	r4, sp, #72	; 0x48
   1cf7c:	e1a01004 	mov	r1, r4
   1cf80:	e5950004 	ldr	r0, [r5, #4]
   1cf84:	ebfff8c1 	bl	1b290 <CNetworkLayer::GetGateway(unsigned char const*) const>
   1cf88:	e1a01000 	mov	r1, r0
   1cf8c:	e1a00006 	mov	r0, r6
   1cf90:	eb000fbf 	bl	20e94 <CIPAddress::operator!=(unsigned char const*) const>
   1cf94:	e3500000 	cmp	r0, #0
   1cf98:	0a000017 	beq	1cffc <CICMPHandler::Process()+0x360>
   1cf9c:	e28d0028 	add	r0, sp, #40	; 0x28
   1cfa0:	eb000f74 	bl	20d78 <CIPAddress::~CIPAddress()>
   1cfa4:	eaffff6c 	b	1cd5c <CICMPHandler::Process()+0xc0>
   1cfa8:	eb0026e6 	bl	26b48 <CLogger::Get()>
   1cfac:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1cfb0:	e1a01007 	mov	r1, r7
   1cfb4:	e58d2000 	str	r2, [sp]
   1cfb8:	e59f30ac 	ldr	r3, [pc, #172]	; 1d06c <CICMPHandler::Process()+0x3d0>
   1cfbc:	e3a02004 	mov	r2, #4
   1cfc0:	eb002622 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cfc4:	e1a03004 	mov	r3, r4
   1cfc8:	e3a01000 	mov	r1, #0
   1cfcc:	e1a00005 	mov	r0, r5
   1cfd0:	e28d2038 	add	r2, sp, #56	; 0x38
   1cfd4:	ebfffef2 	bl	1cba4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1cfd8:	eaffff5f 	b	1cd5c <CICMPHandler::Process()+0xc0>
   1cfdc:	e3a02078 	mov	r2, #120	; 0x78
   1cfe0:	e59f1070 	ldr	r1, [pc, #112]	; 1d058 <CICMPHandler::Process()+0x3bc>
   1cfe4:	e59f0084 	ldr	r0, [pc, #132]	; 1d070 <CICMPHandler::Process()+0x3d4>
   1cfe8:	eb001dee 	bl	247a8 <assertion_failed>
   1cfec:	e3a020a7 	mov	r2, #167	; 0xa7
   1cff0:	e59f1060 	ldr	r1, [pc, #96]	; 1d058 <CICMPHandler::Process()+0x3bc>
   1cff4:	e59f0074 	ldr	r0, [pc, #116]	; 1d070 <CICMPHandler::Process()+0x3d4>
   1cff8:	eb001dea 	bl	247a8 <assertion_failed>
   1cffc:	eb0026d1 	bl	26b48 <CLogger::Get()>
   1d000:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1d004:	e1a01007 	mov	r1, r7
   1d008:	e1a03009 	mov	r3, r9
   1d00c:	e58d2000 	str	r2, [sp]
   1d010:	e3a02004 	mov	r2, #4
   1d014:	eb00260d 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d018:	e5953004 	ldr	r3, [r5, #4]
   1d01c:	e28d0028 	add	r0, sp, #40	; 0x28
   1d020:	e58d300c 	str	r3, [sp, #12]
   1d024:	eb000ff9 	bl	21010 <CIPAddress::Get() const>
   1d028:	e59d300c 	ldr	r3, [sp, #12]
   1d02c:	e1a02000 	mov	r2, r0
   1d030:	e1a01004 	mov	r1, r4
   1d034:	e1a00003 	mov	r0, r3
   1d038:	ebfff892 	bl	1b288 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>
   1d03c:	e28d0028 	add	r0, sp, #40	; 0x28
   1d040:	eb000f4c 	bl	20d78 <CIPAddress::~CIPAddress()>
   1d044:	eaffff44 	b	1cd5c <CICMPHandler::Process()+0xc0>
   1d048:	00045858 	.word	0x00045858
   1d04c:	000459e4 	.word	0x000459e4
   1d050:	00045844 	.word	0x00045844
   1d054:	00045834 	.word	0x00045834
   1d058:	0004577c 	.word	0x0004577c
   1d05c:	00045458 	.word	0x00045458
   1d060:	000457f0 	.word	0x000457f0
   1d064:	000453dc 	.word	0x000453dc
   1d068:	00045704 	.word	0x00045704
   1d06c:	00045814 	.word	0x00045814
   1d070:	000453f0 	.word	0x000453f0

0001d074 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>:
   1d074:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d078:	e2524000 	subs	r4, r2, #0
   1d07c:	e24dd020 	sub	sp, sp, #32
   1d080:	0a00003f 	beq	1d184 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x110>
   1d084:	e3530014 	cmp	r3, #20
   1d088:	e1a06003 	mov	r6, r3
   1d08c:	9a000040 	bls	1d194 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x120>
   1d090:	e5d43000 	ldrb	r3, [r4]
   1d094:	e1a08001 	mov	r8, r1
   1d098:	e203200f 	and	r2, r3, #15
   1d09c:	e2421005 	sub	r1, r2, #5
   1d0a0:	e3510001 	cmp	r1, #1
   1d0a4:	8a00003e 	bhi	1d1a4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x130>
   1d0a8:	e1a03243 	asr	r3, r3, #4
   1d0ac:	e3530004 	cmp	r3, #4
   1d0b0:	e1a05102 	lsl	r5, r2, #2
   1d0b4:	1a00003e 	bne	1d1b4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x140>
   1d0b8:	e1a07000 	mov	r7, r0
   1d0bc:	e5900000 	ldr	r0, [r0]
   1d0c0:	eb000ebb 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   1d0c4:	e284100c 	add	r1, r4, #12
   1d0c8:	eb000f5a 	bl	20e38 <CIPAddress::operator==(unsigned char const*) const>
   1d0cc:	e3500000 	cmp	r0, #0
   1d0d0:	0a00003b 	beq	1d1c4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x150>
   1d0d4:	e2853008 	add	r3, r5, #8
   1d0d8:	e1530006 	cmp	r3, r6
   1d0dc:	8a00003c 	bhi	1d1d4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x160>
   1d0e0:	e3580000 	cmp	r8, #0
   1d0e4:	e0845005 	add	r5, r4, r5
   1d0e8:	0a000023 	beq	1d17c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x108>
   1d0ec:	e59f10f0 	ldr	r1, [pc, #240]	; 1d1e4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x170>
   1d0f0:	e59f30f0 	ldr	r3, [pc, #240]	; 1d1e8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x174>
   1d0f4:	e3580001 	cmp	r8, #1
   1d0f8:	11a08001 	movne	r8, r1
   1d0fc:	01a08003 	moveq	r8, r3
   1d100:	e28d0010 	add	r0, sp, #16
   1d104:	eb002a80 	bl	27b0c <CString::CString()>
   1d108:	e2841010 	add	r1, r4, #16
   1d10c:	e28d0008 	add	r0, sp, #8
   1d110:	eb000f99 	bl	20f7c <CIPAddress::CIPAddress(unsigned char const*)>
   1d114:	e28d1010 	add	r1, sp, #16
   1d118:	e28d0008 	add	r0, sp, #8
   1d11c:	eb000ffd 	bl	21118 <CIPAddress::Format(CString*) const>
   1d120:	eb002688 	bl	26b48 <CLogger::Get()>
   1d124:	e1a06000 	mov	r6, r0
   1d128:	e28d0010 	add	r0, sp, #16
   1d12c:	eb002a8e 	bl	27b6c <CString::operator char const*() const>
   1d130:	e1a03000 	mov	r3, r0
   1d134:	e3a02004 	mov	r2, #4
   1d138:	e1a00006 	mov	r0, r6
   1d13c:	e58d3004 	str	r3, [sp, #4]
   1d140:	e59f10a4 	ldr	r1, [pc, #164]	; 1d1ec <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x178>
   1d144:	e59f30a4 	ldr	r3, [pc, #164]	; 1d1f0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x17c>
   1d148:	e58d8000 	str	r8, [sp]
   1d14c:	eb0025bf 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d150:	e1a03005 	mov	r3, r5
   1d154:	e1a02004 	mov	r2, r4
   1d158:	e3a01000 	mov	r1, #0
   1d15c:	e1a00007 	mov	r0, r7
   1d160:	ebfffe8f 	bl	1cba4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1d164:	e28d0008 	add	r0, sp, #8
   1d168:	eb000f02 	bl	20d78 <CIPAddress::~CIPAddress()>
   1d16c:	e28d0010 	add	r0, sp, #16
   1d170:	eb002a32 	bl	27a40 <CString::~CString()>
   1d174:	e28dd020 	add	sp, sp, #32
   1d178:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d17c:	e59f8070 	ldr	r8, [pc, #112]	; 1d1f4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1d180:	eaffffde 	b	1d100 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x8c>
   1d184:	e3a020c9 	mov	r2, #201	; 0xc9
   1d188:	e59f1068 	ldr	r1, [pc, #104]	; 1d1f8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d18c:	e59f0068 	ldr	r0, [pc, #104]	; 1d1fc <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x188>
   1d190:	eb001d84 	bl	247a8 <assertion_failed>
   1d194:	e3a020ca 	mov	r2, #202	; 0xca
   1d198:	e59f1058 	ldr	r1, [pc, #88]	; 1d1f8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d19c:	e59f005c 	ldr	r0, [pc, #92]	; 1d200 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x18c>
   1d1a0:	eb001d80 	bl	247a8 <assertion_failed>
   1d1a4:	e3a020ce 	mov	r2, #206	; 0xce
   1d1a8:	e59f1048 	ldr	r1, [pc, #72]	; 1d1f8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d1ac:	e59f0050 	ldr	r0, [pc, #80]	; 1d204 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x190>
   1d1b0:	eb001d7c 	bl	247a8 <assertion_failed>
   1d1b4:	e3a020d2 	mov	r2, #210	; 0xd2
   1d1b8:	e59f1038 	ldr	r1, [pc, #56]	; 1d1f8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d1bc:	e59f0044 	ldr	r0, [pc, #68]	; 1d208 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x194>
   1d1c0:	eb001d78 	bl	247a8 <assertion_failed>
   1d1c4:	e3a020d3 	mov	r2, #211	; 0xd3
   1d1c8:	e59f1028 	ldr	r1, [pc, #40]	; 1d1f8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d1cc:	e59f0038 	ldr	r0, [pc, #56]	; 1d20c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x198>
   1d1d0:	eb001d74 	bl	247a8 <assertion_failed>
   1d1d4:	e3a020d4 	mov	r2, #212	; 0xd4
   1d1d8:	e59f1018 	ldr	r1, [pc, #24]	; 1d1f8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d1dc:	e59f002c 	ldr	r0, [pc, #44]	; 1d210 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x19c>
   1d1e0:	eb001d70 	bl	247a8 <assertion_failed>
   1d1e4:	000493c8 	.word	0x000493c8
   1d1e8:	0004587c 	.word	0x0004587c
   1d1ec:	000459e4 	.word	0x000459e4
   1d1f0:	000459c4 	.word	0x000459c4
   1d1f4:	00045870 	.word	0x00045870
   1d1f8:	0004577c 	.word	0x0004577c
   1d1fc:	00045884 	.word	0x00045884
   1d200:	0004589c 	.word	0x0004589c
   1d204:	000458bc 	.word	0x000458bc
   1d208:	0004591c 	.word	0x0004591c
   1d20c:	00045948 	.word	0x00045948
   1d210:	00045984 	.word	0x00045984

0001d214 <CRouteCache::CRouteCache()>:
   1d214:	e3a02064 	mov	r2, #100	; 0x64
   1d218:	e92d4010 	push	{r4, lr}
   1d21c:	e1a04000 	mov	r4, r0
   1d220:	e1a01002 	mov	r1, r2
   1d224:	eb002958 	bl	2778c <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   1d228:	e1a00004 	mov	r0, r4
   1d22c:	e8bd8010 	pop	{r4, pc}

0001d230 <CRouteCache::Flush()>:
   1d230:	e92d4070 	push	{r4, r5, r6, lr}
   1d234:	e1a05000 	mov	r5, r0
   1d238:	eb00297a 	bl	27828 <CPtrArray::GetCount() const>
   1d23c:	e3500000 	cmp	r0, #0
   1d240:	08bd8070 	popeq	{r4, r5, r6, pc}
   1d244:	e2404001 	sub	r4, r0, #1
   1d248:	e1a01004 	mov	r1, r4
   1d24c:	e1a00005 	mov	r0, r5
   1d250:	eb002976 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1d254:	e5900000 	ldr	r0, [r0]
   1d258:	e2444001 	sub	r4, r4, #1
   1d25c:	e3500000 	cmp	r0, #0
   1d260:	0a000001 	beq	1d26c <CRouteCache::Flush()+0x3c>
   1d264:	e3a01008 	mov	r1, #8
   1d268:	eb003764 	bl	2b000 <operator delete(void*, unsigned int)>
   1d26c:	e1a00005 	mov	r0, r5
   1d270:	eb0029e4 	bl	27a08 <CPtrArray::RemoveLast()>
   1d274:	e3740001 	cmn	r4, #1
   1d278:	1afffff2 	bne	1d248 <CRouteCache::Flush()+0x18>
   1d27c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d280 <CRouteCache::~CRouteCache()>:
   1d280:	e92d4010 	push	{r4, lr}
   1d284:	e1a04000 	mov	r4, r0
   1d288:	ebffffe8 	bl	1d230 <CRouteCache::Flush()>
   1d28c:	e1a00004 	mov	r0, r4
   1d290:	eb002959 	bl	277fc <CPtrArray::~CPtrArray()>
   1d294:	e1a00004 	mov	r0, r4
   1d298:	e8bd8010 	pop	{r4, pc}

0001d29c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>:
   1d29c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d2a0:	e2516000 	subs	r6, r1, #0
   1d2a4:	0a000029 	beq	1d350 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xb4>
   1d2a8:	e3520000 	cmp	r2, #0
   1d2ac:	e1a08002 	mov	r8, r2
   1d2b0:	0a00002a 	beq	1d360 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xc4>
   1d2b4:	e1a07000 	mov	r7, r0
   1d2b8:	eb00295a 	bl	27828 <CPtrArray::GetCount() const>
   1d2bc:	e2509000 	subs	r9, r0, #0
   1d2c0:	0a000014 	beq	1d318 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x7c>
   1d2c4:	e3a04000 	mov	r4, #0
   1d2c8:	ea000008 	b	1d2f0 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x54>
   1d2cc:	e3a02004 	mov	r2, #4
   1d2d0:	e1a01006 	mov	r1, r6
   1d2d4:	e1a00005 	mov	r0, r5
   1d2d8:	eb003345 	bl	29ff4 <memcmp>
   1d2dc:	e3500000 	cmp	r0, #0
   1d2e0:	0a000015 	beq	1d33c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xa0>
   1d2e4:	e2844001 	add	r4, r4, #1
   1d2e8:	e1590004 	cmp	r9, r4
   1d2ec:	0a000009 	beq	1d318 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x7c>
   1d2f0:	e1a01004 	mov	r1, r4
   1d2f4:	e1a00007 	mov	r0, r7
   1d2f8:	eb00294c 	bl	27830 <CPtrArray::operator[](unsigned int)>
   1d2fc:	e5905000 	ldr	r5, [r0]
   1d300:	e3550000 	cmp	r5, #0
   1d304:	1afffff0 	bne	1d2cc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x30>
   1d308:	e3a0203e 	mov	r2, #62	; 0x3e
   1d30c:	e59f105c 	ldr	r1, [pc, #92]	; 1d370 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd4>
   1d310:	e59f005c 	ldr	r0, [pc, #92]	; 1d374 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd8>
   1d314:	eb001d23 	bl	247a8 <assertion_failed>
   1d318:	e3a00008 	mov	r0, #8
   1d31c:	eb003729 	bl	2afc8 <operator new(unsigned int)>
   1d320:	e1a05000 	mov	r5, r0
   1d324:	e1a01006 	mov	r1, r6
   1d328:	e3a02004 	mov	r2, #4
   1d32c:	eb00353f 	bl	2a830 <memcpy>
   1d330:	e1a01005 	mov	r1, r5
   1d334:	e1a00007 	mov	r0, r7
   1d338:	eb002974 	bl	27910 <CPtrArray::Append(void*)>
   1d33c:	e1a01008 	mov	r1, r8
   1d340:	e2850004 	add	r0, r5, #4
   1d344:	e3a02004 	mov	r2, #4
   1d348:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d34c:	ea003537 	b	2a830 <memcpy>
   1d350:	e3a02035 	mov	r2, #53	; 0x35
   1d354:	e59f1014 	ldr	r1, [pc, #20]	; 1d370 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd4>
   1d358:	e59f0018 	ldr	r0, [pc, #24]	; 1d378 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xdc>
   1d35c:	eb001d11 	bl	247a8 <assertion_failed>
   1d360:	e3a02036 	mov	r2, #54	; 0x36
   1d364:	e59f1004 	ldr	r1, [pc, #4]	; 1d370 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd4>
   1d368:	e59f000c 	ldr	r0, [pc, #12]	; 1d37c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xe0>
   1d36c:	eb001d0d 	bl	247a8 <assertion_failed>
   1d370:	000459ec 	.word	0x000459ec
   1d374:	00045a1c 	.word	0x00045a1c
   1d378:	000459fc 	.word	0x000459fc
   1d37c:	00045a0c 	.word	0x00045a0c

0001d380 <CRouteCache::GetRoute(unsigned char const*) const>:
   1d380:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d384:	e2516000 	subs	r6, r1, #0
   1d388:	0a00001a 	beq	1d3f8 <CRouteCache::GetRoute(unsigned char const*) const+0x78>
   1d38c:	e1a07000 	mov	r7, r0
   1d390:	eb002924 	bl	27828 <CPtrArray::GetCount() const>
   1d394:	e2508000 	subs	r8, r0, #0
   1d398:	0a000012 	beq	1d3e8 <CRouteCache::GetRoute(unsigned char const*) const+0x68>
   1d39c:	e3a05000 	mov	r5, #0
   1d3a0:	ea000007 	b	1d3c4 <CRouteCache::GetRoute(unsigned char const*) const+0x44>
   1d3a4:	e3a02004 	mov	r2, #4
   1d3a8:	e1a01006 	mov	r1, r6
   1d3ac:	eb003310 	bl	29ff4 <memcmp>
   1d3b0:	e3500000 	cmp	r0, #0
   1d3b4:	0a00000d 	beq	1d3f0 <CRouteCache::GetRoute(unsigned char const*) const+0x70>
   1d3b8:	e2855001 	add	r5, r5, #1
   1d3bc:	e1580005 	cmp	r8, r5
   1d3c0:	0a000008 	beq	1d3e8 <CRouteCache::GetRoute(unsigned char const*) const+0x68>
   1d3c4:	e1a01005 	mov	r1, r5
   1d3c8:	e1a00007 	mov	r0, r7
   1d3cc:	eb002933 	bl	278a0 <CPtrArray::operator[](unsigned int) const>
   1d3d0:	e2504000 	subs	r4, r0, #0
   1d3d4:	1afffff2 	bne	1d3a4 <CRouteCache::GetRoute(unsigned char const*) const+0x24>
   1d3d8:	e3a0205d 	mov	r2, #93	; 0x5d
   1d3dc:	e59f1024 	ldr	r1, [pc, #36]	; 1d408 <CRouteCache::GetRoute(unsigned char const*) const+0x88>
   1d3e0:	e59f0024 	ldr	r0, [pc, #36]	; 1d40c <CRouteCache::GetRoute(unsigned char const*) const+0x8c>
   1d3e4:	eb001cef 	bl	247a8 <assertion_failed>
   1d3e8:	e3a00000 	mov	r0, #0
   1d3ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d3f0:	e2840004 	add	r0, r4, #4
   1d3f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d3f8:	e3a02057 	mov	r2, #87	; 0x57
   1d3fc:	e59f1004 	ldr	r1, [pc, #4]	; 1d408 <CRouteCache::GetRoute(unsigned char const*) const+0x88>
   1d400:	e59f0008 	ldr	r0, [pc, #8]	; 1d410 <CRouteCache::GetRoute(unsigned char const*) const+0x90>
   1d404:	eb001ce7 	bl	247a8 <assertion_failed>
   1d408:	000459ec 	.word	0x000459ec
   1d40c:	00045a1c 	.word	0x00045a1c
   1d410:	000459fc 	.word	0x000459fc

0001d414 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>:
   1d414:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d418:	e1a05003 	mov	r5, r3
   1d41c:	e1a04000 	mov	r4, r0
   1d420:	e1a06001 	mov	r6, r1
   1d424:	e59f3088 	ldr	r3, [pc, #136]	; 1d4b4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1d428:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
   1d42c:	e1dd92b0 	ldrh	r9, [sp, #32]
   1d430:	e1dd82b4 	ldrh	r8, [sp, #36]	; 0x24
   1d434:	e5802008 	str	r2, [r0, #8]
   1d438:	e5803000 	str	r3, [r0]
   1d43c:	e5801004 	str	r1, [r0, #4]
   1d440:	e1a01005 	mov	r1, r5
   1d444:	e280000c 	add	r0, r0, #12
   1d448:	eb000e3b 	bl	20d3c <CIPAddress::CIPAddress(CIPAddress const&)>
   1d44c:	e1a00006 	mov	r0, r6
   1d450:	e1c491b4 	strh	r9, [r4, #20]
   1d454:	e1c481b6 	strh	r8, [r4, #22]
   1d458:	e5847018 	str	r7, [r4, #24]
   1d45c:	eb000dd4 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   1d460:	e1a03007 	mov	r3, r7
   1d464:	e1a01000 	mov	r1, r0
   1d468:	e1a02005 	mov	r2, r5
   1d46c:	e284001c 	add	r0, r4, #28
   1d470:	eb00104c 	bl	215a8 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>
   1d474:	e5943004 	ldr	r3, [r4, #4]
   1d478:	e3530000 	cmp	r3, #0
   1d47c:	0a000004 	beq	1d494 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x80>
   1d480:	e5943008 	ldr	r3, [r4, #8]
   1d484:	e3530000 	cmp	r3, #0
   1d488:	0a000005 	beq	1d4a4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x90>
   1d48c:	e1a00004 	mov	r0, r4
   1d490:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d494:	e3a02025 	mov	r2, #37	; 0x25
   1d498:	e59f1018 	ldr	r1, [pc, #24]	; 1d4b8 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   1d49c:	e59f0018 	ldr	r0, [pc, #24]	; 1d4bc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa8>
   1d4a0:	eb001cc0 	bl	247a8 <assertion_failed>
   1d4a4:	e3a02026 	mov	r2, #38	; 0x26
   1d4a8:	e59f1008 	ldr	r1, [pc, #8]	; 1d4b8 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   1d4ac:	e59f000c 	ldr	r0, [pc, #12]	; 1d4c0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xac>
   1d4b0:	eb001cbc 	bl	247a8 <assertion_failed>
   1d4b4:	00045a54 	.word	0x00045a54
   1d4b8:	00045a28 	.word	0x00045a28
   1d4bc:	000453dc 	.word	0x000453dc
   1d4c0:	000453f0 	.word	0x000453f0

0001d4c4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>:
   1d4c4:	e92d4070 	push	{r4, r5, r6, lr}
   1d4c8:	e1a05001 	mov	r5, r1
   1d4cc:	e59f107c 	ldr	r1, [pc, #124]	; 1d550 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x8c>
   1d4d0:	e1a04000 	mov	r4, r0
   1d4d4:	e5802008 	str	r2, [r0, #8]
   1d4d8:	e5801000 	str	r1, [r0]
   1d4dc:	e5805004 	str	r5, [r0, #4]
   1d4e0:	e280000c 	add	r0, r0, #12
   1d4e4:	e1a06003 	mov	r6, r3
   1d4e8:	eb000e0c 	bl	20d20 <CIPAddress::CIPAddress()>
   1d4ec:	e3a03000 	mov	r3, #0
   1d4f0:	e1a00005 	mov	r0, r5
   1d4f4:	e1c431b4 	strh	r3, [r4, #20]
   1d4f8:	e1c461b6 	strh	r6, [r4, #22]
   1d4fc:	eb000dac 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   1d500:	e59d2010 	ldr	r2, [sp, #16]
   1d504:	e1a01000 	mov	r1, r0
   1d508:	e284001c 	add	r0, r4, #28
   1d50c:	eb001019 	bl	21578 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>
   1d510:	e5943004 	ldr	r3, [r4, #4]
   1d514:	e3530000 	cmp	r3, #0
   1d518:	0a000004 	beq	1d530 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x6c>
   1d51c:	e5943008 	ldr	r3, [r4, #8]
   1d520:	e3530000 	cmp	r3, #0
   1d524:	0a000005 	beq	1d540 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x7c>
   1d528:	e1a00004 	mov	r0, r4
   1d52c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d530:	e3a02033 	mov	r2, #51	; 0x33
   1d534:	e59f1018 	ldr	r1, [pc, #24]	; 1d554 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x90>
   1d538:	e59f0018 	ldr	r0, [pc, #24]	; 1d558 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x94>
   1d53c:	eb001c99 	bl	247a8 <assertion_failed>
   1d540:	e3a02034 	mov	r2, #52	; 0x34
   1d544:	e59f1008 	ldr	r1, [pc, #8]	; 1d554 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x90>
   1d548:	e59f000c 	ldr	r0, [pc, #12]	; 1d55c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x98>
   1d54c:	eb001c95 	bl	247a8 <assertion_failed>
   1d550:	00045a54 	.word	0x00045a54
   1d554:	00045a28 	.word	0x00045a28
   1d558:	000453dc 	.word	0x000453dc
   1d55c:	000453f0 	.word	0x000453f0

0001d560 <CNetConnection::~CNetConnection()>:
   1d560:	e3a03000 	mov	r3, #0
   1d564:	e92d4010 	push	{r4, lr}
   1d568:	e1a04000 	mov	r4, r0
   1d56c:	e59f201c 	ldr	r2, [pc, #28]	; 1d590 <CNetConnection::~CNetConnection()+0x30>
   1d570:	e5803008 	str	r3, [r0, #8]
   1d574:	e1c020f0 	strd	r2, [r0]
   1d578:	e280001c 	add	r0, r0, #28
   1d57c:	eb00101a 	bl	215ec <CChecksumCalculator::~CChecksumCalculator()>
   1d580:	e284000c 	add	r0, r4, #12
   1d584:	eb000dfb 	bl	20d78 <CIPAddress::~CIPAddress()>
   1d588:	e1a00004 	mov	r0, r4
   1d58c:	e8bd8010 	pop	{r4, pc}
   1d590:	00045a54 	.word	0x00045a54

0001d594 <CNetConnection::~CNetConnection()>:
   1d594:	e3a03000 	mov	r3, #0
   1d598:	e92d4010 	push	{r4, lr}
   1d59c:	e1a04000 	mov	r4, r0
   1d5a0:	e59f2028 	ldr	r2, [pc, #40]	; 1d5d0 <CNetConnection::~CNetConnection()+0x3c>
   1d5a4:	e5803008 	str	r3, [r0, #8]
   1d5a8:	e1c020f0 	strd	r2, [r0]
   1d5ac:	e280001c 	add	r0, r0, #28
   1d5b0:	eb00100d 	bl	215ec <CChecksumCalculator::~CChecksumCalculator()>
   1d5b4:	e284000c 	add	r0, r4, #12
   1d5b8:	eb000dee 	bl	20d78 <CIPAddress::~CIPAddress()>
   1d5bc:	e1a00004 	mov	r0, r4
   1d5c0:	e3a0102c 	mov	r1, #44	; 0x2c
   1d5c4:	eb00368d 	bl	2b000 <operator delete(void*, unsigned int)>
   1d5c8:	e1a00004 	mov	r0, r4
   1d5cc:	e8bd8010 	pop	{r4, pc}
   1d5d0:	00045a54 	.word	0x00045a54

0001d5d4 <CNetConnection::GetForeignIP() const>:
   1d5d4:	e280000c 	add	r0, r0, #12
   1d5d8:	ea000e8c 	b	21010 <CIPAddress::Get() const>

0001d5dc <CNetConnection::GetOwnPort() const>:
   1d5dc:	e1d001b6 	ldrh	r0, [r0, #22]
   1d5e0:	e3500000 	cmp	r0, #0
   1d5e4:	112fff1e 	bxne	lr
   1d5e8:	e3a02044 	mov	r2, #68	; 0x44
   1d5ec:	e92d4010 	push	{r4, lr}
   1d5f0:	e59f1004 	ldr	r1, [pc, #4]	; 1d5fc <CNetConnection::GetOwnPort() const+0x20>
   1d5f4:	e59f0004 	ldr	r0, [pc, #4]	; 1d600 <CNetConnection::GetOwnPort() const+0x24>
   1d5f8:	eb001c6a 	bl	247a8 <assertion_failed>
   1d5fc:	00045a28 	.word	0x00045a28
   1d600:	00045a3c 	.word	0x00045a3c

0001d604 <CNetConnection::GetProtocol() const>:
   1d604:	e5900018 	ldr	r0, [r0, #24]
   1d608:	e12fff1e 	bx	lr

0001d60c <CUDPConnection::Accept(CIPAddress*, unsigned short*)>:
   1d60c:	e3e00000 	mvn	r0, #0
   1d610:	e12fff1e 	bx	lr

0001d614 <CUDPConnection::Close()>:
   1d614:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1d618:	e3530000 	cmp	r3, #0
   1d61c:	13a03000 	movne	r3, #0
   1d620:	15c03029 	strbne	r3, [r0, #41]	; 0x29
   1d624:	11a00003 	movne	r0, r3
   1d628:	03e00000 	mvneq	r0, #0
   1d62c:	e12fff1e 	bx	lr

0001d630 <CUDPConnection::SetOptionBroadcast(bool)>:
   1d630:	e1a03000 	mov	r3, r0
   1d634:	e3a00000 	mov	r0, #0
   1d638:	e5c31040 	strb	r1, [r3, #64]	; 0x40
   1d63c:	e12fff1e 	bx	lr

0001d640 <CUDPConnection::IsConnected() const>:
   1d640:	e3a00000 	mov	r0, #0
   1d644:	e12fff1e 	bx	lr

0001d648 <CUDPConnection::IsTerminated() const>:
   1d648:	e5d00029 	ldrb	r0, [r0, #41]	; 0x29
   1d64c:	e2200001 	eor	r0, r0, #1
   1d650:	e12fff1e 	bx	lr

0001d654 <CUDPConnection::Process()>:
   1d654:	e12fff1e 	bx	lr

0001d658 <CUDPConnection::Send(void const*, unsigned int, int)>:
   1d658:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d65c:	e28db01c 	add	fp, sp, #28
   1d660:	e24dd008 	sub	sp, sp, #8
   1d664:	e1a04000 	mov	r4, r0
   1d668:	e5900044 	ldr	r0, [r0, #68]	; 0x44
   1d66c:	e3500000 	cmp	r0, #0
   1d670:	b3a03000 	movlt	r3, #0
   1d674:	b5843044 	strlt	r3, [r4, #68]	; 0x44
   1d678:	ba00004d 	blt	1d7b4 <CUDPConnection::Send(void const*, unsigned int, int)+0x15c>
   1d67c:	e1a06002 	mov	r6, r2
   1d680:	e5d4202a 	ldrb	r2, [r4, #42]	; 0x2a
   1d684:	e3520000 	cmp	r2, #0
   1d688:	0a000057 	beq	1d7ec <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d68c:	e3d33040 	bics	r3, r3, #64	; 0x40
   1d690:	1a000055 	bne	1d7ec <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d694:	e59f3188 	ldr	r3, [pc, #392]	; 1d824 <CUDPConnection::Send(void const*, unsigned int, int)+0x1cc>
   1d698:	e2462001 	sub	r2, r6, #1
   1d69c:	e1520003 	cmp	r2, r3
   1d6a0:	e2868008 	add	r8, r6, #8
   1d6a4:	8a000050 	bhi	1d7ec <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d6a8:	e5943004 	ldr	r3, [r4, #4]
   1d6ac:	e3530000 	cmp	r3, #0
   1d6b0:	0a00004f 	beq	1d7f4 <CUDPConnection::Send(void const*, unsigned int, int)+0x19c>
   1d6b4:	e5d43040 	ldrb	r3, [r4, #64]	; 0x40
   1d6b8:	e1a07001 	mov	r7, r1
   1d6bc:	e3530000 	cmp	r3, #0
   1d6c0:	0a00003d 	beq	1d7bc <CUDPConnection::Send(void const*, unsigned int, int)+0x164>
   1d6c4:	e3a0c000 	mov	ip, #0
   1d6c8:	e1d401b6 	ldrh	r0, [r4, #22]
   1d6cc:	e2882007 	add	r2, r8, #7
   1d6d0:	e6bf0fb0 	rev16	r0, r0
   1d6d4:	e3c22007 	bic	r2, r2, #7
   1d6d8:	e1d411b4 	ldrh	r1, [r4, #20]
   1d6dc:	e04dd002 	sub	sp, sp, r2
   1d6e0:	e6ffe070 	uxth	lr, r0
   1d6e4:	e28d5008 	add	r5, sp, #8
   1d6e8:	e6bf1fb1 	rev16	r1, r1
   1d6ec:	e1a0242e 	lsr	r2, lr, #8
   1d6f0:	e5cd0008 	strb	r0, [sp, #8]
   1d6f4:	e5c52001 	strb	r2, [r5, #1]
   1d6f8:	e6ff2071 	uxth	r2, r1
   1d6fc:	e6bf3fb8 	rev16	r3, r8
   1d700:	e1a02422 	lsr	r2, r2, #8
   1d704:	e5c52003 	strb	r2, [r5, #3]
   1d708:	e6ff2073 	uxth	r2, r3
   1d70c:	e1a02422 	lsr	r2, r2, #8
   1d710:	e157000c 	cmp	r7, ip
   1d714:	e5c51002 	strb	r1, [r5, #2]
   1d718:	e5c53004 	strb	r3, [r5, #4]
   1d71c:	e5c52005 	strb	r2, [r5, #5]
   1d720:	e5c5c006 	strb	ip, [r5, #6]
   1d724:	e5c5c007 	strb	ip, [r5, #7]
   1d728:	0a000035 	beq	1d804 <CUDPConnection::Send(void const*, unsigned int, int)+0x1ac>
   1d72c:	e1a02006 	mov	r2, r6
   1d730:	e1a01007 	mov	r1, r7
   1d734:	e2850008 	add	r0, r5, #8
   1d738:	eb00343c 	bl	2a830 <memcpy>
   1d73c:	e5940004 	ldr	r0, [r4, #4]
   1d740:	eb000d1b 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   1d744:	e284901c 	add	r9, r4, #28
   1d748:	e1a01000 	mov	r1, r0
   1d74c:	e284700c 	add	r7, r4, #12
   1d750:	e1a00009 	mov	r0, r9
   1d754:	eb000fa5 	bl	215f0 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1d758:	e1a00009 	mov	r0, r9
   1d75c:	e1a01007 	mov	r1, r7
   1d760:	eb000fa6 	bl	21600 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1d764:	e1a02008 	mov	r2, r8
   1d768:	e1a01005 	mov	r1, r5
   1d76c:	e1a00009 	mov	r0, r9
   1d770:	eb000fcd 	bl	216ac <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d774:	e594c008 	ldr	ip, [r4, #8]
   1d778:	e1a03420 	lsr	r3, r0, #8
   1d77c:	e35c0000 	cmp	ip, #0
   1d780:	e5c50006 	strb	r0, [r5, #6]
   1d784:	e5c53007 	strb	r3, [r5, #7]
   1d788:	0a000021 	beq	1d814 <CUDPConnection::Send(void const*, unsigned int, int)+0x1bc>
   1d78c:	e3a0e011 	mov	lr, #17
   1d790:	e1a03008 	mov	r3, r8
   1d794:	e1a02005 	mov	r2, r5
   1d798:	e1a01007 	mov	r1, r7
   1d79c:	e1a0000c 	mov	r0, ip
   1d7a0:	e58de000 	str	lr, [sp]
   1d7a4:	ebfff573 	bl	1ad78 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1d7a8:	e3500000 	cmp	r0, #0
   1d7ac:	0a00000e 	beq	1d7ec <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d7b0:	e1a00006 	mov	r0, r6
   1d7b4:	e24bd01c 	sub	sp, fp, #28
   1d7b8:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d7bc:	e284500c 	add	r5, r4, #12
   1d7c0:	e1a00005 	mov	r0, r5
   1d7c4:	eb000e42 	bl	210d4 <CIPAddress::IsBroadcast() const>
   1d7c8:	e3500000 	cmp	r0, #0
   1d7cc:	1a000006 	bne	1d7ec <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d7d0:	e5940004 	ldr	r0, [r4, #4]
   1d7d4:	eb000d00 	bl	20bdc <CNetConfig::GetBroadcastAddress() const>
   1d7d8:	e1a01000 	mov	r1, r0
   1d7dc:	e1a00005 	mov	r0, r5
   1d7e0:	eb000d65 	bl	20d7c <CIPAddress::operator==(CIPAddress const&) const>
   1d7e4:	e3500000 	cmp	r0, #0
   1d7e8:	0affffb5 	beq	1d6c4 <CUDPConnection::Send(void const*, unsigned int, int)+0x6c>
   1d7ec:	e3e00000 	mvn	r0, #0
   1d7f0:	eaffffef 	b	1d7b4 <CUDPConnection::Send(void const*, unsigned int, int)+0x15c>
   1d7f4:	e3a0207b 	mov	r2, #123	; 0x7b
   1d7f8:	e59f1028 	ldr	r1, [pc, #40]	; 1d828 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d0>
   1d7fc:	e59f0028 	ldr	r0, [pc, #40]	; 1d82c <CUDPConnection::Send(void const*, unsigned int, int)+0x1d4>
   1d800:	eb001be8 	bl	247a8 <assertion_failed>
   1d804:	e3a0208b 	mov	r2, #139	; 0x8b
   1d808:	e59f1018 	ldr	r1, [pc, #24]	; 1d828 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d0>
   1d80c:	e59f001c 	ldr	r0, [pc, #28]	; 1d830 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d8>
   1d810:	eb001be4 	bl	247a8 <assertion_failed>
   1d814:	e3a02093 	mov	r2, #147	; 0x93
   1d818:	e59f1008 	ldr	r1, [pc, #8]	; 1d828 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d0>
   1d81c:	e59f0010 	ldr	r0, [pc, #16]	; 1d834 <CUDPConnection::Send(void const*, unsigned int, int)+0x1dc>
   1d820:	eb001be0 	bl	247a8 <assertion_failed>
   1d824:	00000637 	.word	0x00000637
   1d828:	00045a90 	.word	0x00045a90
   1d82c:	000453dc 	.word	0x000453dc
   1d830:	00045458 	.word	0x00045458
   1d834:	000453f0 	.word	0x000453f0

0001d838 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1d838:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   1d83c:	e28db018 	add	fp, sp, #24
   1d840:	e24dd014 	sub	sp, sp, #20
   1d844:	e590c044 	ldr	ip, [r0, #68]	; 0x44
   1d848:	e1a04000 	mov	r4, r0
   1d84c:	e35c0000 	cmp	ip, #0
   1d850:	b3a03000 	movlt	r3, #0
   1d854:	e1db60b8 	ldrh	r6, [fp, #8]
   1d858:	b5803044 	strlt	r3, [r0, #68]	; 0x44
   1d85c:	ba00004d 	blt	1d998 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x160>
   1d860:	e5d0c02a 	ldrb	ip, [r0, #42]	; 0x2a
   1d864:	e35c0000 	cmp	ip, #0
   1d868:	1a00004d 	bne	1d9a4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x16c>
   1d86c:	e1a0e003 	mov	lr, r3
   1d870:	e3de3040 	bics	r3, lr, #64	; 0x40
   1d874:	1a00005c 	bne	1d9ec <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1b4>
   1d878:	e1a05002 	mov	r5, r2
   1d87c:	e59f31a0 	ldr	r3, [pc, #416]	; 1da24 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1ec>
   1d880:	e2422001 	sub	r2, r2, #1
   1d884:	e1520003 	cmp	r2, r3
   1d888:	e2858008 	add	r8, r5, #8
   1d88c:	8a000056 	bhi	1d9ec <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1b4>
   1d890:	e5903004 	ldr	r3, [r0, #4]
   1d894:	e3530000 	cmp	r3, #0
   1d898:	0a000055 	beq	1d9f4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1bc>
   1d89c:	e5d03040 	ldrb	r3, [r0, #64]	; 0x40
   1d8a0:	e1a07001 	mov	r7, r1
   1d8a4:	e3530000 	cmp	r3, #0
   1d8a8:	0a000044 	beq	1d9c0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x188>
   1d8ac:	e3a00000 	mov	r0, #0
   1d8b0:	e1d411b6 	ldrh	r1, [r4, #22]
   1d8b4:	e2882007 	add	r2, r8, #7
   1d8b8:	e6bf1fb1 	rev16	r1, r1
   1d8bc:	e3c22007 	bic	r2, r2, #7
   1d8c0:	e04dd002 	sub	sp, sp, r2
   1d8c4:	e6ffe071 	uxth	lr, r1
   1d8c8:	e6bfcfb6 	rev16	ip, r6
   1d8cc:	e6bf3fb8 	rev16	r3, r8
   1d8d0:	e28d6008 	add	r6, sp, #8
   1d8d4:	e1a0242e 	lsr	r2, lr, #8
   1d8d8:	e5cd1008 	strb	r1, [sp, #8]
   1d8dc:	e5c62001 	strb	r2, [r6, #1]
   1d8e0:	e6ff107c 	uxth	r1, ip
   1d8e4:	e6ff2073 	uxth	r2, r3
   1d8e8:	e1a01421 	lsr	r1, r1, #8
   1d8ec:	e1a02422 	lsr	r2, r2, #8
   1d8f0:	e1570000 	cmp	r7, r0
   1d8f4:	e5c6c002 	strb	ip, [r6, #2]
   1d8f8:	e5c61003 	strb	r1, [r6, #3]
   1d8fc:	e5c63004 	strb	r3, [r6, #4]
   1d900:	e5c62005 	strb	r2, [r6, #5]
   1d904:	e5c60006 	strb	r0, [r6, #6]
   1d908:	e5c60007 	strb	r0, [r6, #7]
   1d90c:	0a00003c 	beq	1da04 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1cc>
   1d910:	e1a02005 	mov	r2, r5
   1d914:	e1a01007 	mov	r1, r7
   1d918:	e2860008 	add	r0, r6, #8
   1d91c:	eb0033c3 	bl	2a830 <memcpy>
   1d920:	e5940004 	ldr	r0, [r4, #4]
   1d924:	eb000ca2 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   1d928:	e284701c 	add	r7, r4, #28
   1d92c:	e1a01000 	mov	r1, r0
   1d930:	e1a00007 	mov	r0, r7
   1d934:	eb000f2d 	bl	215f0 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1d938:	e1a00007 	mov	r0, r7
   1d93c:	e59b1004 	ldr	r1, [fp, #4]
   1d940:	eb000f2e 	bl	21600 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1d944:	e1a02008 	mov	r2, r8
   1d948:	e1a01006 	mov	r1, r6
   1d94c:	e1a00007 	mov	r0, r7
   1d950:	eb000f55 	bl	216ac <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d954:	e1a03000 	mov	r3, r0
   1d958:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   1d95c:	e5940008 	ldr	r0, [r4, #8]
   1d960:	e1a02423 	lsr	r2, r3, #8
   1d964:	e3500000 	cmp	r0, #0
   1d968:	e5c63006 	strb	r3, [r6, #6]
   1d96c:	e5c62007 	strb	r2, [r6, #7]
   1d970:	0a000027 	beq	1da14 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1dc>
   1d974:	e3a01011 	mov	r1, #17
   1d978:	e1a03008 	mov	r3, r8
   1d97c:	e58d1000 	str	r1, [sp]
   1d980:	e1a02006 	mov	r2, r6
   1d984:	e59b1004 	ldr	r1, [fp, #4]
   1d988:	ebfff4fa 	bl	1ad78 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1d98c:	e3500000 	cmp	r0, #0
   1d990:	0a000015 	beq	1d9ec <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1b4>
   1d994:	e1a0c005 	mov	ip, r5
   1d998:	e1a0000c 	mov	r0, ip
   1d99c:	e24bd018 	sub	sp, fp, #24
   1d9a0:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1d9a4:	e590c000 	ldr	ip, [r0]
   1d9a8:	e59c4014 	ldr	r4, [ip, #20]
   1d9ac:	e12fff34 	blx	r4
   1d9b0:	e1a0c000 	mov	ip, r0
   1d9b4:	e1a0000c 	mov	r0, ip
   1d9b8:	e24bd018 	sub	sp, fp, #24
   1d9bc:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1d9c0:	e59b0004 	ldr	r0, [fp, #4]
   1d9c4:	eb000dc2 	bl	210d4 <CIPAddress::IsBroadcast() const>
   1d9c8:	e3500000 	cmp	r0, #0
   1d9cc:	1a000006 	bne	1d9ec <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1b4>
   1d9d0:	e5940004 	ldr	r0, [r4, #4]
   1d9d4:	eb000c80 	bl	20bdc <CNetConfig::GetBroadcastAddress() const>
   1d9d8:	e1a01000 	mov	r1, r0
   1d9dc:	e59b0004 	ldr	r0, [fp, #4]
   1d9e0:	eb000ce5 	bl	20d7c <CIPAddress::operator==(CIPAddress const&) const>
   1d9e4:	e3500000 	cmp	r0, #0
   1d9e8:	0affffaf 	beq	1d8ac <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x74>
   1d9ec:	e3e0c000 	mvn	ip, #0
   1d9f0:	eaffffe8 	b	1d998 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x160>
   1d9f4:	e3a020e4 	mov	r2, #228	; 0xe4
   1d9f8:	e59f1028 	ldr	r1, [pc, #40]	; 1da28 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f0>
   1d9fc:	e59f0028 	ldr	r0, [pc, #40]	; 1da2c <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f4>
   1da00:	eb001b68 	bl	247a8 <assertion_failed>
   1da04:	e3a020f4 	mov	r2, #244	; 0xf4
   1da08:	e59f1018 	ldr	r1, [pc, #24]	; 1da28 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f0>
   1da0c:	e59f001c 	ldr	r0, [pc, #28]	; 1da30 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f8>
   1da10:	eb001b64 	bl	247a8 <assertion_failed>
   1da14:	e3a020fc 	mov	r2, #252	; 0xfc
   1da18:	e59f1008 	ldr	r1, [pc, #8]	; 1da28 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f0>
   1da1c:	e59f0010 	ldr	r0, [pc, #16]	; 1da34 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1fc>
   1da20:	eb001b60 	bl	247a8 <assertion_failed>
   1da24:	00000637 	.word	0x00000637
   1da28:	00045a90 	.word	0x00045a90
   1da2c:	000453dc 	.word	0x000453dc
   1da30:	00045458 	.word	0x00045458
   1da34:	000453f0 	.word	0x000453f0

0001da38 <CUDPConnection::Receive(void*, int)>:
   1da38:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1da3c:	e1a06000 	mov	r6, r0
   1da40:	e5900044 	ldr	r0, [r0, #68]	; 0x44
   1da44:	e24dd00c 	sub	sp, sp, #12
   1da48:	e3500000 	cmp	r0, #0
   1da4c:	ba000022 	blt	1dadc <CUDPConnection::Receive(void*, int)+0xa4>
   1da50:	e1a05001 	mov	r5, r1
   1da54:	e1a09002 	mov	r9, r2
   1da58:	e286702c 	add	r7, r6, #44	; 0x2c
   1da5c:	e2868038 	add	r8, r6, #56	; 0x38
   1da60:	e3550000 	cmp	r5, #0
   1da64:	0a000018 	beq	1dacc <CUDPConnection::Receive(void*, int)+0x94>
   1da68:	e1a01005 	mov	r1, r5
   1da6c:	e1a00007 	mov	r0, r7
   1da70:	e28d2004 	add	r2, sp, #4
   1da74:	eb000e79 	bl	21460 <CNetQueue::Dequeue(void*, void**)>
   1da78:	e2504000 	subs	r4, r0, #0
   1da7c:	0a000007 	beq	1daa0 <CUDPConnection::Receive(void*, int)+0x68>
   1da80:	e59d0004 	ldr	r0, [sp, #4]
   1da84:	e3500000 	cmp	r0, #0
   1da88:	0a000019 	beq	1daf4 <CUDPConnection::Receive(void*, int)+0xbc>
   1da8c:	e3a01006 	mov	r1, #6
   1da90:	eb00355a 	bl	2b000 <operator delete(void*, unsigned int)>
   1da94:	e1a00004 	mov	r0, r4
   1da98:	e28dd00c 	add	sp, sp, #12
   1da9c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1daa0:	e3590040 	cmp	r9, #64	; 0x40
   1daa4:	0a000010 	beq	1daec <CUDPConnection::Receive(void*, int)+0xb4>
   1daa8:	e1a00008 	mov	r0, r8
   1daac:	eb001ab7 	bl	24590 <CSynchronizationEvent::Clear()>
   1dab0:	e1a00008 	mov	r0, r8
   1dab4:	eb001ac6 	bl	245d4 <CSynchronizationEvent::Wait()>
   1dab8:	e5960044 	ldr	r0, [r6, #68]	; 0x44
   1dabc:	e3500000 	cmp	r0, #0
   1dac0:	aaffffe6 	bge	1da60 <CUDPConnection::Receive(void*, int)+0x28>
   1dac4:	e5864044 	str	r4, [r6, #68]	; 0x44
   1dac8:	eafffff2 	b	1da98 <CUDPConnection::Receive(void*, int)+0x60>
   1dacc:	e3a020a7 	mov	r2, #167	; 0xa7
   1dad0:	e59f102c 	ldr	r1, [pc, #44]	; 1db04 <CUDPConnection::Receive(void*, int)+0xcc>
   1dad4:	e59f002c 	ldr	r0, [pc, #44]	; 1db08 <CUDPConnection::Receive(void*, int)+0xd0>
   1dad8:	eb001b32 	bl	247a8 <assertion_failed>
   1dadc:	e3a03000 	mov	r3, #0
   1dae0:	e5863044 	str	r3, [r6, #68]	; 0x44
   1dae4:	e28dd00c 	add	sp, sp, #12
   1dae8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1daec:	e1a00004 	mov	r0, r4
   1daf0:	eaffffe8 	b	1da98 <CUDPConnection::Receive(void*, int)+0x60>
   1daf4:	e3a020bf 	mov	r2, #191	; 0xbf
   1daf8:	e59f1004 	ldr	r1, [pc, #4]	; 1db04 <CUDPConnection::Receive(void*, int)+0xcc>
   1dafc:	e59f0008 	ldr	r0, [pc, #8]	; 1db0c <CUDPConnection::Receive(void*, int)+0xd4>
   1db00:	eb001b28 	bl	247a8 <assertion_failed>
   1db04:	00045a90 	.word	0x00045a90
   1db08:	0004256c 	.word	0x0004256c
   1db0c:	00045458 	.word	0x00045458

0001db10 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1db10:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1db14:	e1a06000 	mov	r6, r0
   1db18:	e5900044 	ldr	r0, [r0, #68]	; 0x44
   1db1c:	e24dd008 	sub	sp, sp, #8
   1db20:	e3500000 	cmp	r0, #0
   1db24:	ba000028 	blt	1dbcc <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xbc>
   1db28:	e1a05001 	mov	r5, r1
   1db2c:	e1a09002 	mov	r9, r2
   1db30:	e1a0a003 	mov	sl, r3
   1db34:	e286702c 	add	r7, r6, #44	; 0x2c
   1db38:	e2868038 	add	r8, r6, #56	; 0x38
   1db3c:	e3550000 	cmp	r5, #0
   1db40:	0a00001d 	beq	1dbbc <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xac>
   1db44:	e1a01005 	mov	r1, r5
   1db48:	e1a00007 	mov	r0, r7
   1db4c:	e28d2004 	add	r2, sp, #4
   1db50:	eb000e42 	bl	21460 <CNetQueue::Dequeue(void*, void**)>
   1db54:	e2504000 	subs	r4, r0, #0
   1db58:	0a00000c 	beq	1db90 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x80>
   1db5c:	e59d5004 	ldr	r5, [sp, #4]
   1db60:	e3550000 	cmp	r5, #0
   1db64:	0a00001c 	beq	1dbdc <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xcc>
   1db68:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1db6c:	e35a0000 	cmp	sl, #0
   1db70:	13530000 	cmpne	r3, #0
   1db74:	1a00001c 	bne	1dbec <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xdc>
   1db78:	e1a00005 	mov	r0, r5
   1db7c:	e3a01006 	mov	r1, #6
   1db80:	eb00351e 	bl	2b000 <operator delete(void*, unsigned int)>
   1db84:	e1a00004 	mov	r0, r4
   1db88:	e28dd008 	add	sp, sp, #8
   1db8c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1db90:	e3590040 	cmp	r9, #64	; 0x40
   1db94:	0afffffa 	beq	1db84 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x74>
   1db98:	e1a00008 	mov	r0, r8
   1db9c:	eb001a7b 	bl	24590 <CSynchronizationEvent::Clear()>
   1dba0:	e1a00008 	mov	r0, r8
   1dba4:	eb001a8a 	bl	245d4 <CSynchronizationEvent::Wait()>
   1dba8:	e5960044 	ldr	r0, [r6, #68]	; 0x44
   1dbac:	e3500000 	cmp	r0, #0
   1dbb0:	aaffffe1 	bge	1db3c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x2c>
   1dbb4:	e5864044 	str	r4, [r6, #68]	; 0x44
   1dbb8:	eafffff2 	b	1db88 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x78>
   1dbbc:	e3a02e11 	mov	r2, #272	; 0x110
   1dbc0:	e59f1040 	ldr	r1, [pc, #64]	; 1dc08 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xf8>
   1dbc4:	e59f0040 	ldr	r0, [pc, #64]	; 1dc0c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xfc>
   1dbc8:	eb001af6 	bl	247a8 <assertion_failed>
   1dbcc:	e3a03000 	mov	r3, #0
   1dbd0:	e5863044 	str	r3, [r6, #68]	; 0x44
   1dbd4:	e28dd008 	add	sp, sp, #8
   1dbd8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dbdc:	e3a02f4a 	mov	r2, #296	; 0x128
   1dbe0:	e59f1020 	ldr	r1, [pc, #32]	; 1dc08 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xf8>
   1dbe4:	e59f0024 	ldr	r0, [pc, #36]	; 1dc10 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x100>
   1dbe8:	eb001aee 	bl	247a8 <assertion_failed>
   1dbec:	e1a0000a 	mov	r0, sl
   1dbf0:	e1a01005 	mov	r1, r5
   1dbf4:	eb000cd0 	bl	20f3c <CIPAddress::Set(unsigned char const*)>
   1dbf8:	e1d530b4 	ldrh	r3, [r5, #4]
   1dbfc:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1dc00:	e1c230b0 	strh	r3, [r2]
   1dc04:	eaffffdb 	b	1db78 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x68>
   1dc08:	00045a90 	.word	0x00045a90
   1dc0c:	0004256c 	.word	0x0004256c
   1dc10:	00045458 	.word	0x00045458

0001dc14 <CUDPConnection::Connect()>:
   1dc14:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1dc18:	e3530000 	cmp	r3, #0
   1dc1c:	0a000001 	beq	1dc28 <CUDPConnection::Connect()+0x14>
   1dc20:	e3a00000 	mov	r0, #0
   1dc24:	e12fff1e 	bx	lr
   1dc28:	e3a02049 	mov	r2, #73	; 0x49
   1dc2c:	e92d4010 	push	{r4, lr}
   1dc30:	e59f1004 	ldr	r1, [pc, #4]	; 1dc3c <CUDPConnection::Connect()+0x28>
   1dc34:	e59f0004 	ldr	r0, [pc, #4]	; 1dc40 <CUDPConnection::Connect()+0x2c>
   1dc38:	eb001ada 	bl	247a8 <assertion_failed>
   1dc3c:	00045a90 	.word	0x00045a90
   1dc40:	00045aa4 	.word	0x00045aa4

0001dc44 <CUDPConnection::~CUDPConnection()>:
   1dc44:	e5d02029 	ldrb	r2, [r0, #41]	; 0x29
   1dc48:	e59f3040 	ldr	r3, [pc, #64]	; 1dc90 <CUDPConnection::~CUDPConnection()+0x4c>
   1dc4c:	e3520000 	cmp	r2, #0
   1dc50:	e92d4010 	push	{r4, lr}
   1dc54:	e5803000 	str	r3, [r0]
   1dc58:	1a000008 	bne	1dc80 <CUDPConnection::~CUDPConnection()+0x3c>
   1dc5c:	e1a04000 	mov	r4, r0
   1dc60:	e2800038 	add	r0, r0, #56	; 0x38
   1dc64:	eb001a3d 	bl	24560 <CSynchronizationEvent::~CSynchronizationEvent()>
   1dc68:	e284002c 	add	r0, r4, #44	; 0x2c
   1dc6c:	eb000db0 	bl	21334 <CNetQueue::~CNetQueue()>
   1dc70:	e1a00004 	mov	r0, r4
   1dc74:	ebfffe39 	bl	1d560 <CNetConnection::~CNetConnection()>
   1dc78:	e1a00004 	mov	r0, r4
   1dc7c:	e8bd8010 	pop	{r4, pc}
   1dc80:	e3a02044 	mov	r2, #68	; 0x44
   1dc84:	e59f1008 	ldr	r1, [pc, #8]	; 1dc94 <CUDPConnection::~CUDPConnection()+0x50>
   1dc88:	e59f0008 	ldr	r0, [pc, #8]	; 1dc98 <CUDPConnection::~CUDPConnection()+0x54>
   1dc8c:	eb001ac5 	bl	247a8 <assertion_failed>
   1dc90:	00045ac0 	.word	0x00045ac0
   1dc94:	00045a90 	.word	0x00045a90
   1dc98:	00045aac 	.word	0x00045aac

0001dc9c <CUDPConnection::~CUDPConnection()>:
   1dc9c:	e92d4010 	push	{r4, lr}
   1dca0:	e1a04000 	mov	r4, r0
   1dca4:	ebffffe6 	bl	1dc44 <CUDPConnection::~CUDPConnection()>
   1dca8:	e1a00004 	mov	r0, r4
   1dcac:	e3a01048 	mov	r1, #72	; 0x48
   1dcb0:	eb0034d2 	bl	2b000 <operator delete(void*, unsigned int)>
   1dcb4:	e1a00004 	mov	r0, r4
   1dcb8:	e8bd8010 	pop	{r4, pc}

0001dcbc <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1dcbc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1dcc0:	e24dd00c 	sub	sp, sp, #12
   1dcc4:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
   1dcc8:	e35c0011 	cmp	ip, #17
   1dccc:	1a00001b 	bne	1dd40 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x84>
   1dcd0:	e3520008 	cmp	r2, #8
   1dcd4:	e1a07002 	mov	r7, r2
   1dcd8:	9a000044 	bls	1ddf0 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x134>
   1dcdc:	e1a04001 	mov	r4, r1
   1dce0:	e5d11002 	ldrb	r1, [r1, #2]
   1dce4:	e5d42003 	ldrb	r2, [r4, #3]
   1dce8:	e1a06003 	mov	r6, r3
   1dcec:	e1811402 	orr	r1, r1, r2, lsl #8
   1dcf0:	e1d031b6 	ldrh	r3, [r0, #22]
   1dcf4:	e6bf1fb1 	rev16	r1, r1
   1dcf8:	e6ff1071 	uxth	r1, r1
   1dcfc:	e1530001 	cmp	r3, r1
   1dd00:	e1a05000 	mov	r5, r0
   1dd04:	1a00000d 	bne	1dd40 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x84>
   1dd08:	e5903004 	ldr	r3, [r0, #4]
   1dd0c:	e3530000 	cmp	r3, #0
   1dd10:	0a000059 	beq	1de7c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c0>
   1dd14:	e5d48000 	ldrb	r8, [r4]
   1dd18:	e5d42001 	ldrb	r2, [r4, #1]
   1dd1c:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1dd20:	e1888402 	orr	r8, r8, r2, lsl #8
   1dd24:	e6bf8fb8 	rev16	r8, r8
   1dd28:	e3530000 	cmp	r3, #0
   1dd2c:	e6ff3078 	uxth	r3, r8
   1dd30:	0a000016 	beq	1dd90 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd4>
   1dd34:	e1d021b4 	ldrh	r2, [r0, #20]
   1dd38:	e1520003 	cmp	r2, r3
   1dd3c:	0a000002 	beq	1dd4c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x90>
   1dd40:	e3a00000 	mov	r0, #0
   1dd44:	e28dd00c 	add	sp, sp, #12
   1dd48:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1dd4c:	e280900c 	add	r9, r0, #12
   1dd50:	e1a00009 	mov	r0, r9
   1dd54:	e1a01006 	mov	r1, r6
   1dd58:	eb000c1f 	bl	20ddc <CIPAddress::operator!=(CIPAddress const&) const>
   1dd5c:	e3500000 	cmp	r0, #0
   1dd60:	0a00000a 	beq	1dd90 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd4>
   1dd64:	e1a00009 	mov	r0, r9
   1dd68:	eb000cd9 	bl	210d4 <CIPAddress::IsBroadcast() const>
   1dd6c:	e3500000 	cmp	r0, #0
   1dd70:	1a000006 	bne	1dd90 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd4>
   1dd74:	e5950004 	ldr	r0, [r5, #4]
   1dd78:	eb000b97 	bl	20bdc <CNetConfig::GetBroadcastAddress() const>
   1dd7c:	e1a01000 	mov	r1, r0
   1dd80:	e1a00009 	mov	r0, r9
   1dd84:	eb000c14 	bl	20ddc <CIPAddress::operator!=(CIPAddress const&) const>
   1dd88:	e3500000 	cmp	r0, #0
   1dd8c:	1affffeb 	bne	1dd40 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x84>
   1dd90:	e5d43004 	ldrb	r3, [r4, #4]
   1dd94:	e5d42005 	ldrb	r2, [r4, #5]
   1dd98:	e1833402 	orr	r3, r3, r2, lsl #8
   1dd9c:	e6bf3fb3 	rev16	r3, r3
   1dda0:	e6ff3073 	uxth	r3, r3
   1dda4:	e1570003 	cmp	r7, r3
   1dda8:	3a000010 	bcc	1ddf0 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x134>
   1ddac:	e5d43006 	ldrb	r3, [r4, #6]
   1ddb0:	e5d42007 	ldrb	r2, [r4, #7]
   1ddb4:	e1933402 	orrs	r3, r3, r2, lsl #8
   1ddb8:	0a00000f 	beq	1ddfc <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x140>
   1ddbc:	e285001c 	add	r0, r5, #28
   1ddc0:	e1a01006 	mov	r1, r6
   1ddc4:	e58d0004 	str	r0, [sp, #4]
   1ddc8:	eb000e08 	bl	215f0 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1ddcc:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   1ddd0:	e59d0004 	ldr	r0, [sp, #4]
   1ddd4:	eb000e09 	bl	21600 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1ddd8:	e1a02007 	mov	r2, r7
   1dddc:	e1a01004 	mov	r1, r4
   1dde0:	e59d0004 	ldr	r0, [sp, #4]
   1dde4:	eb000e30 	bl	216ac <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1dde8:	e3500000 	cmp	r0, #0
   1ddec:	0a000002 	beq	1ddfc <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x140>
   1ddf0:	e3e00000 	mvn	r0, #0
   1ddf4:	e28dd00c 	add	sp, sp, #12
   1ddf8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ddfc:	e5d53040 	ldrb	r3, [r5, #64]	; 0x40
   1de00:	e3530000 	cmp	r3, #0
   1de04:	1a00000c 	bne	1de3c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x180>
   1de08:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
   1de0c:	eb000cb0 	bl	210d4 <CIPAddress::IsBroadcast() const>
   1de10:	e3500000 	cmp	r0, #0
   1de14:	1a000006 	bne	1de34 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x178>
   1de18:	e5950004 	ldr	r0, [r5, #4]
   1de1c:	eb000b6e 	bl	20bdc <CNetConfig::GetBroadcastAddress() const>
   1de20:	e1a01000 	mov	r1, r0
   1de24:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
   1de28:	eb000bd3 	bl	20d7c <CIPAddress::operator==(CIPAddress const&) const>
   1de2c:	e3500000 	cmp	r0, #0
   1de30:	0a000001 	beq	1de3c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x180>
   1de34:	e3a00001 	mov	r0, #1
   1de38:	eaffffc1 	b	1dd44 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x88>
   1de3c:	e3a00006 	mov	r0, #6
   1de40:	eb003460 	bl	2afc8 <operator new(unsigned int)>
   1de44:	e1a09000 	mov	r9, r0
   1de48:	e1a00006 	mov	r0, r6
   1de4c:	e1a01009 	mov	r1, r9
   1de50:	eb000c7a 	bl	21040 <CIPAddress::CopyTo(unsigned char*) const>
   1de54:	e1a03009 	mov	r3, r9
   1de58:	e2472008 	sub	r2, r7, #8
   1de5c:	e2841008 	add	r1, r4, #8
   1de60:	e285002c 	add	r0, r5, #44	; 0x2c
   1de64:	e1c980b4 	strh	r8, [r9, #4]
   1de68:	eb000d36 	bl	21348 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1de6c:	e2850038 	add	r0, r5, #56	; 0x38
   1de70:	eb0019c9 	bl	2459c <CSynchronizationEvent::Set()>
   1de74:	e3a00001 	mov	r0, #1
   1de78:	eaffffb1 	b	1dd44 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x88>
   1de7c:	e59f2008 	ldr	r2, [pc, #8]	; 1de8c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d0>
   1de80:	e59f1008 	ldr	r1, [pc, #8]	; 1de90 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d4>
   1de84:	e59f0008 	ldr	r0, [pc, #8]	; 1de94 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   1de88:	eb001a46 	bl	247a8 <assertion_failed>
   1de8c:	0000015e 	.word	0x0000015e
   1de90:	00045a90 	.word	0x00045a90
   1de94:	000453dc 	.word	0x000453dc

0001de98 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1de98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1de9c:	e59d1020 	ldr	r1, [sp, #32]
   1dea0:	e1a05003 	mov	r5, r3
   1dea4:	e3510011 	cmp	r1, #17
   1dea8:	e1dd71b8 	ldrh	r7, [sp, #24]
   1deac:	e1dd31bc 	ldrh	r3, [sp, #28]
   1deb0:	1a000013 	bne	1df04 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   1deb4:	e1a06002 	mov	r6, r2
   1deb8:	e1d021b6 	ldrh	r2, [r0, #22]
   1debc:	e1a04000 	mov	r4, r0
   1dec0:	e1520003 	cmp	r2, r3
   1dec4:	1a00000e 	bne	1df04 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   1dec8:	e5900004 	ldr	r0, [r0, #4]
   1decc:	e3500000 	cmp	r0, #0
   1ded0:	0a000018 	beq	1df38 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1ded4:	eb000b36 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   1ded8:	e1a01000 	mov	r1, r0
   1dedc:	e1a00005 	mov	r0, r5
   1dee0:	eb000bbd 	bl	20ddc <CIPAddress::operator!=(CIPAddress const&) const>
   1dee4:	e3500000 	cmp	r0, #0
   1dee8:	1a000005 	bne	1df04 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   1deec:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1def0:	e3530000 	cmp	r3, #0
   1def4:	0a000009 	beq	1df20 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x88>
   1def8:	e1d431b4 	ldrh	r3, [r4, #20]
   1defc:	e1530007 	cmp	r3, r7
   1df00:	0a000001 	beq	1df0c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x74>
   1df04:	e3a00000 	mov	r0, #0
   1df08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1df0c:	e1a01006 	mov	r1, r6
   1df10:	e284000c 	add	r0, r4, #12
   1df14:	eb000bb0 	bl	20ddc <CIPAddress::operator!=(CIPAddress const&) const>
   1df18:	e3500000 	cmp	r0, #0
   1df1c:	1afffff8 	bne	1df04 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   1df20:	e3e03000 	mvn	r3, #0
   1df24:	e2840038 	add	r0, r4, #56	; 0x38
   1df28:	e5843044 	str	r3, [r4, #68]	; 0x44
   1df2c:	eb00199a 	bl	2459c <CSynchronizationEvent::Set()>
   1df30:	e3a00001 	mov	r0, #1
   1df34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1df38:	e59f2008 	ldr	r2, [pc, #8]	; 1df48 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb0>
   1df3c:	e59f1008 	ldr	r1, [pc, #8]	; 1df4c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb4>
   1df40:	e59f0008 	ldr	r0, [pc, #8]	; 1df50 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb8>
   1df44:	eb001a17 	bl	247a8 <assertion_failed>
   1df48:	000001a7 	.word	0x000001a7
   1df4c:	00045a90 	.word	0x00045a90
   1df50:	000453dc 	.word	0x000453dc

0001df54 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1df54:	e3a0c011 	mov	ip, #17
   1df58:	e92d4010 	push	{r4, lr}
   1df5c:	e24dd010 	sub	sp, sp, #16
   1df60:	e1dde1b8 	ldrh	lr, [sp, #24]
   1df64:	e58dc008 	str	ip, [sp, #8]
   1df68:	e1ddc1bc 	ldrh	ip, [sp, #28]
   1df6c:	e58de000 	str	lr, [sp]
   1df70:	e58dc004 	str	ip, [sp, #4]
   1df74:	e1a04000 	mov	r4, r0
   1df78:	ebfffd25 	bl	1d414 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1df7c:	e3a03001 	mov	r3, #1
   1df80:	e59f2034 	ldr	r2, [pc, #52]	; 1dfbc <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x68>
   1df84:	e5c43029 	strb	r3, [r4, #41]	; 0x29
   1df88:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1df8c:	e5842000 	str	r2, [r4]
   1df90:	e284002c 	add	r0, r4, #44	; 0x2c
   1df94:	eb000cae 	bl	21254 <CNetQueue::CNetQueue()>
   1df98:	e3a01000 	mov	r1, #0
   1df9c:	e2840038 	add	r0, r4, #56	; 0x38
   1dfa0:	eb00196a 	bl	24550 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1dfa4:	e3a03000 	mov	r3, #0
   1dfa8:	e1a00004 	mov	r0, r4
   1dfac:	e5c43040 	strb	r3, [r4, #64]	; 0x40
   1dfb0:	e5843044 	str	r3, [r4, #68]	; 0x44
   1dfb4:	e28dd010 	add	sp, sp, #16
   1dfb8:	e8bd8010 	pop	{r4, pc}
   1dfbc:	00045ac0 	.word	0x00045ac0

0001dfc0 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1dfc0:	e3a0c011 	mov	ip, #17
   1dfc4:	e92d4030 	push	{r4, r5, lr}
   1dfc8:	e24dd00c 	sub	sp, sp, #12
   1dfcc:	e58dc000 	str	ip, [sp]
   1dfd0:	e1a04000 	mov	r4, r0
   1dfd4:	e3a05000 	mov	r5, #0
   1dfd8:	ebfffd39 	bl	1d4c4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1dfdc:	e3a02001 	mov	r2, #1
   1dfe0:	e59f3030 	ldr	r3, [pc, #48]	; 1e018 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0x58>
   1dfe4:	e5c42029 	strb	r2, [r4, #41]	; 0x29
   1dfe8:	e5843000 	str	r3, [r4]
   1dfec:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   1dff0:	e284002c 	add	r0, r4, #44	; 0x2c
   1dff4:	eb000c96 	bl	21254 <CNetQueue::CNetQueue()>
   1dff8:	e1a01005 	mov	r1, r5
   1dffc:	e2840038 	add	r0, r4, #56	; 0x38
   1e000:	eb001952 	bl	24550 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e004:	e1a00004 	mov	r0, r4
   1e008:	e5c45040 	strb	r5, [r4, #64]	; 0x40
   1e00c:	e5845044 	str	r5, [r4, #68]	; 0x44
   1e010:	e28dd00c 	add	sp, sp, #12
   1e014:	e8bd8030 	pop	{r4, r5, pc}
   1e018:	00045ac0 	.word	0x00045ac0

0001e01c <CTCPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1e01c:	e590c000 	ldr	ip, [r0]
   1e020:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1e024:	e59ce014 	ldr	lr, [ip, #20]
   1e028:	e1a0c00e 	mov	ip, lr
   1e02c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1e030:	e12fff1c 	bx	ip

0001e034 <CTCPConnection::SetOptionBroadcast(bool)>:
   1e034:	e3a00000 	mov	r0, #0
   1e038:	e12fff1e 	bx	lr

0001e03c <CTCPConnection::IsConnected() const>:
   1e03c:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1e040:	e3530002 	cmp	r3, #2
   1e044:	9a000003 	bls	1e058 <CTCPConnection::IsConnected() const+0x1c>
   1e048:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   1e04c:	e250000a 	subs	r0, r0, #10
   1e050:	13a00001 	movne	r0, #1
   1e054:	e12fff1e 	bx	lr
   1e058:	e3a00000 	mov	r0, #0
   1e05c:	e12fff1e 	bx	lr

0001e060 <CTCPConnection::IsTerminated() const>:
   1e060:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   1e064:	e16f0f10 	clz	r0, r0
   1e068:	e1a002a0 	lsr	r0, r0, #5
   1e06c:	e12fff1e 	bx	lr

0001e070 <CTCPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1e070:	e590c000 	ldr	ip, [r0]
   1e074:	e92d4070 	push	{r4, r5, r6, lr}
   1e078:	e1a05003 	mov	r5, r3
   1e07c:	e59c3018 	ldr	r3, [ip, #24]
   1e080:	e1a04000 	mov	r4, r0
   1e084:	e12fff33 	blx	r3
   1e088:	e3500000 	cmp	r0, #0
   1e08c:	d8bd8070 	pople	{r4, r5, r6, pc}
   1e090:	e59d3010 	ldr	r3, [sp, #16]
   1e094:	e2532000 	subs	r2, r3, #0
   1e098:	13a02001 	movne	r2, #1
   1e09c:	e3550000 	cmp	r5, #0
   1e0a0:	11a00002 	movne	r0, r2
   1e0a4:	03a00000 	moveq	r0, #0
   1e0a8:	e3500000 	cmp	r0, #0
   1e0ac:	08bd8070 	popeq	{r4, r5, r6, pc}
   1e0b0:	e1a00005 	mov	r0, r5
   1e0b4:	e284100c 	add	r1, r4, #12
   1e0b8:	eb000bb4 	bl	20f90 <CIPAddress::Set(CIPAddress const&)>
   1e0bc:	e1d431b4 	ldrh	r3, [r4, #20]
   1e0c0:	e59d2010 	ldr	r2, [sp, #16]
   1e0c4:	e3a00000 	mov	r0, #0
   1e0c8:	e1c230b0 	strh	r3, [r2]
   1e0cc:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e0d0 <CTCPConnection::Send(void const*, unsigned int, int)>:
   1e0d0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1e0d4:	e1a08003 	mov	r8, r3
   1e0d8:	e3d83040 	bics	r3, r8, #64	; 0x40
   1e0dc:	e24dd00c 	sub	sp, sp, #12
   1e0e0:	1a00000d 	bne	1e11c <CTCPConnection::Send(void const*, unsigned int, int)+0x4c>
   1e0e4:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1e0e8:	e1a07000 	mov	r7, r0
   1e0ec:	e3530000 	cmp	r3, #0
   1e0f0:	ba00002a 	blt	1e1a0 <CTCPConnection::Send(void const*, unsigned int, int)+0xd0>
   1e0f4:	e1a06002 	mov	r6, r2
   1e0f8:	e5d0202a 	ldrb	r2, [r0, #42]	; 0x2a
   1e0fc:	e1a04001 	mov	r4, r1
   1e100:	e352000a 	cmp	r2, #10
   1e104:	e6ef2072 	uxtb	r2, r2
   1e108:	8a000006 	bhi	1e128 <CTCPConnection::Send(void const*, unsigned int, int)+0x58>
   1e10c:	e3a0c001 	mov	ip, #1
   1e110:	e59f10cc 	ldr	r1, [pc, #204]	; 1e1e4 <CTCPConnection::Send(void const*, unsigned int, int)+0x114>
   1e114:	e011321c 	ands	r3, r1, ip, lsl r2
   1e118:	0a000002 	beq	1e128 <CTCPConnection::Send(void const*, unsigned int, int)+0x58>
   1e11c:	e3e00000 	mvn	r0, #0
   1e120:	e28dd00c 	add	sp, sp, #12
   1e124:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e128:	e3540000 	cmp	r4, #0
   1e12c:	0a000025 	beq	1e1c8 <CTCPConnection::Send(void const*, unsigned int, int)+0xf8>
   1e130:	e3560d19 	cmp	r6, #1600	; 0x640
   1e134:	9a00001c 	bls	1e1ac <CTCPConnection::Send(void const*, unsigned int, int)+0xdc>
   1e138:	e1a05006 	mov	r5, r6
   1e13c:	e2879030 	add	r9, r7, #48	; 0x30
   1e140:	e1a01004 	mov	r1, r4
   1e144:	e3a03000 	mov	r3, #0
   1e148:	e3a02d19 	mov	r2, #1600	; 0x640
   1e14c:	e1a00009 	mov	r0, r9
   1e150:	e2455d19 	sub	r5, r5, #1600	; 0x640
   1e154:	eb000c7b 	bl	21348 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1e158:	e3550d19 	cmp	r5, #1600	; 0x640
   1e15c:	e2844d19 	add	r4, r4, #1600	; 0x640
   1e160:	8afffff6 	bhi	1e140 <CTCPConnection::Send(void const*, unsigned int, int)+0x70>
   1e164:	e1a02005 	mov	r2, r5
   1e168:	e1a01004 	mov	r1, r4
   1e16c:	e1a00009 	mov	r0, r9
   1e170:	e3a03000 	mov	r3, #0
   1e174:	eb000c73 	bl	21348 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1e178:	e3180040 	tst	r8, #64	; 0x40
   1e17c:	1a00000e 	bne	1e1bc <CTCPConnection::Send(void const*, unsigned int, int)+0xec>
   1e180:	e2870070 	add	r0, r7, #112	; 0x70
   1e184:	e58d0004 	str	r0, [sp, #4]
   1e188:	eb001900 	bl	24590 <CSynchronizationEvent::Clear()>
   1e18c:	e59d0004 	ldr	r0, [sp, #4]
   1e190:	eb00190f 	bl	245d4 <CSynchronizationEvent::Wait()>
   1e194:	e597302c 	ldr	r3, [r7, #44]	; 0x2c
   1e198:	e3530000 	cmp	r3, #0
   1e19c:	aa000006 	bge	1e1bc <CTCPConnection::Send(void const*, unsigned int, int)+0xec>
   1e1a0:	e597002c 	ldr	r0, [r7, #44]	; 0x2c
   1e1a4:	e28dd00c 	add	sp, sp, #12
   1e1a8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e1ac:	e3560000 	cmp	r6, #0
   1e1b0:	1a000008 	bne	1e1d8 <CTCPConnection::Send(void const*, unsigned int, int)+0x108>
   1e1b4:	e3180040 	tst	r8, #64	; 0x40
   1e1b8:	0afffff0 	beq	1e180 <CTCPConnection::Send(void const*, unsigned int, int)+0xb0>
   1e1bc:	e1a00006 	mov	r0, r6
   1e1c0:	e28dd00c 	add	sp, sp, #12
   1e1c4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e1c8:	e3a02d06 	mov	r2, #384	; 0x180
   1e1cc:	e59f1014 	ldr	r1, [pc, #20]	; 1e1e8 <CTCPConnection::Send(void const*, unsigned int, int)+0x118>
   1e1d0:	e59f0014 	ldr	r0, [pc, #20]	; 1e1ec <CTCPConnection::Send(void const*, unsigned int, int)+0x11c>
   1e1d4:	eb001973 	bl	247a8 <assertion_failed>
   1e1d8:	e1a05006 	mov	r5, r6
   1e1dc:	e2879030 	add	r9, r7, #48	; 0x30
   1e1e0:	eaffffdf 	b	1e164 <CTCPConnection::Send(void const*, unsigned int, int)+0x94>
   1e1e4:	00000763 	.word	0x00000763
   1e1e8:	00045afc 	.word	0x00045afc
   1e1ec:	00045458 	.word	0x00045458

0001e1f0 <CTCPConnection::Receive(void*, int)>:
   1e1f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e1f4:	e3d29040 	bics	r9, r2, #64	; 0x40
   1e1f8:	1a000012 	bne	1e248 <CTCPConnection::Receive(void*, int)+0x58>
   1e1fc:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1e200:	e1a04000 	mov	r4, r0
   1e204:	e3530000 	cmp	r3, #0
   1e208:	ba00001c 	blt	1e280 <CTCPConnection::Receive(void*, int)+0x90>
   1e20c:	e1a07001 	mov	r7, r1
   1e210:	e2025040 	and	r5, r2, #64	; 0x40
   1e214:	e280803c 	add	r8, r0, #60	; 0x3c
   1e218:	e2806068 	add	r6, r0, #104	; 0x68
   1e21c:	e3a02000 	mov	r2, #0
   1e220:	e1a01007 	mov	r1, r7
   1e224:	e1a00008 	mov	r0, r8
   1e228:	eb000c8c 	bl	21460 <CNetQueue::Dequeue(void*, void**)>
   1e22c:	e3500000 	cmp	r0, #0
   1e230:	1a000015 	bne	1e28c <CTCPConnection::Receive(void*, int)+0x9c>
   1e234:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1e238:	e3530001 	cmp	r3, #1
   1e23c:	e6ef3073 	uxtb	r3, r3
   1e240:	e2433005 	sub	r3, r3, #5
   1e244:	8a000002 	bhi	1e254 <CTCPConnection::Receive(void*, int)+0x64>
   1e248:	e3e09000 	mvn	r9, #0
   1e24c:	e1a00009 	mov	r0, r9
   1e250:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e254:	e3530005 	cmp	r3, #5
   1e258:	9afffffa 	bls	1e248 <CTCPConnection::Receive(void*, int)+0x58>
   1e25c:	e3550000 	cmp	r5, #0
   1e260:	1afffff9 	bne	1e24c <CTCPConnection::Receive(void*, int)+0x5c>
   1e264:	e1a00006 	mov	r0, r6
   1e268:	eb0018c8 	bl	24590 <CSynchronizationEvent::Clear()>
   1e26c:	e1a00006 	mov	r0, r6
   1e270:	eb0018d7 	bl	245d4 <CSynchronizationEvent::Wait()>
   1e274:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e278:	e3530000 	cmp	r3, #0
   1e27c:	aaffffe6 	bge	1e21c <CTCPConnection::Receive(void*, int)+0x2c>
   1e280:	e594902c 	ldr	r9, [r4, #44]	; 0x2c
   1e284:	e1a00009 	mov	r0, r9
   1e288:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e28c:	e1a09000 	mov	r9, r0
   1e290:	e1a00009 	mov	r0, r9
   1e294:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0001e298 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1e298:	e3a0c006 	mov	ip, #6
   1e29c:	e92d4070 	push	{r4, r5, r6, lr}
   1e2a0:	e1a04000 	mov	r4, r0
   1e2a4:	e3a05000 	mov	r5, #0
   1e2a8:	e3a06001 	mov	r6, #1
   1e2ac:	e24dd008 	sub	sp, sp, #8
   1e2b0:	e58dc000 	str	ip, [sp]
   1e2b4:	ebfffc82 	bl	1d4c4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1e2b8:	e59f30b0 	ldr	r3, [pc, #176]	; 1e370 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xd8>
   1e2bc:	e5c4602a 	strb	r6, [r4, #42]	; 0x2a
   1e2c0:	e5843000 	str	r3, [r4]
   1e2c4:	e5c45029 	strb	r5, [r4, #41]	; 0x29
   1e2c8:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1e2cc:	e2840030 	add	r0, r4, #48	; 0x30
   1e2d0:	eb000bdf 	bl	21254 <CNetQueue::CNetQueue()>
   1e2d4:	e284003c 	add	r0, r4, #60	; 0x3c
   1e2d8:	eb000bdd 	bl	21254 <CNetQueue::CNetQueue()>
   1e2dc:	e3a01801 	mov	r1, #65536	; 0x10000
   1e2e0:	e2840048 	add	r0, r4, #72	; 0x48
   1e2e4:	eb0007b3 	bl	201b8 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1e2e8:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   1e2ec:	e1a01005 	mov	r1, r5
   1e2f0:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   1e2f4:	e2840068 	add	r0, r4, #104	; 0x68
   1e2f8:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1e2fc:	e5845060 	str	r5, [r4, #96]	; 0x60
   1e300:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1e304:	eb001891 	bl	24550 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e308:	e1a01005 	mov	r1, r5
   1e30c:	e2840070 	add	r0, r4, #112	; 0x70
   1e310:	eb00188e 	bl	24550 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e314:	eb002ef0 	bl	29edc <CTimer::Get()>
   1e318:	e3a02f86 	mov	r2, #536	; 0x218
   1e31c:	e59f3050 	ldr	r3, [pc, #80]	; 1e374 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xdc>
   1e320:	e5840078 	str	r0, [r4, #120]	; 0x78
   1e324:	e1c42bb4 	strh	r2, [r4, #180]	; 0xb4
   1e328:	e5843094 	str	r3, [r4, #148]	; 0x94
   1e32c:	e58430ac 	str	r3, [r4, #172]	; 0xac
   1e330:	e5846088 	str	r6, [r4, #136]	; 0x88
   1e334:	e1c459b8 	strh	r5, [r4, #152]	; 0x98
   1e338:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   1e33c:	e58450b0 	str	r5, [r4, #176]	; 0xb0
   1e340:	e28400b8 	add	r0, r4, #184	; 0xb8
   1e344:	eb000887 	bl	20568 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1e348:	e1a00004 	mov	r0, r4
   1e34c:	e59f2024 	ldr	r2, [pc, #36]	; 1e378 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xe0>
   1e350:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1e354:	e5923000 	ldr	r3, [r2]
   1e358:	e5845080 	str	r5, [r4, #128]	; 0x80
   1e35c:	e0833006 	add	r3, r3, r6
   1e360:	e5845084 	str	r5, [r4, #132]	; 0x84
   1e364:	e5823000 	str	r3, [r2]
   1e368:	e28dd008 	add	sp, sp, #8
   1e36c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e370:	00045d2c 	.word	0x00045d2c
   1e374:	00003908 	.word	0x00003908
   1e378:	0005ce1c 	.word	0x0005ce1c

0001e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>:
   1e37c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e380:	e2017c02 	and	r7, r1, #512	; 0x200
   1e384:	e3570000 	cmp	r7, #0
   1e388:	03a05014 	moveq	r5, #20
   1e38c:	13a05018 	movne	r5, #24
   1e390:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1e394:	e24dd00c 	sub	sp, sp, #12
   1e398:	e59de674 	ldr	lr, [sp, #1652]	; 0x674
   1e39c:	03a0b005 	moveq	fp, #5
   1e3a0:	13a0b006 	movne	fp, #6
   1e3a4:	e095600e 	adds	r6, r5, lr
   1e3a8:	e59da670 	ldr	sl, [sp, #1648]	; 0x670
   1e3ac:	2a00003d 	bcs	1e4a8 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x12c>
   1e3b0:	e1d091b6 	ldrh	r9, [r0, #22]
   1e3b4:	e1d081b4 	ldrh	r8, [r0, #20]
   1e3b8:	e6bfcf32 	rev	ip, r2
   1e3bc:	e6bf9fb9 	rev16	r9, r9
   1e3c0:	e6bf2fb8 	rev16	r2, r8
   1e3c4:	e58dc00c 	str	ip, [sp, #12]
   1e3c8:	e211ca01 	ands	ip, r1, #4096	; 0x1000
   1e3cc:	e1a04000 	mov	r4, r0
   1e3d0:	e1cd90b8 	strh	r9, [sp, #8]
   1e3d4:	e1cd20ba 	strh	r2, [sp, #10]
   1e3d8:	1a000028 	bne	1e480 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x104>
   1e3dc:	e1d439b8 	ldrh	r3, [r4, #152]	; 0x98
   1e3e0:	e3570000 	cmp	r7, #0
   1e3e4:	e6bf3fb3 	rev16	r3, r3
   1e3e8:	e59420ac 	ldr	r2, [r4, #172]	; 0xac
   1e3ec:	e1cd31ba 	strh	r3, [sp, #26]
   1e3f0:	159f30c0 	ldrne	r3, [pc, #192]	; 1e4b8 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x13c>
   1e3f4:	e181020b 	orr	r0, r1, fp, lsl #4
   1e3f8:	e6bf2fb2 	rev16	r2, r2
   1e3fc:	158d301c 	strne	r3, [sp, #28]
   1e400:	e35e0000 	cmp	lr, #0
   1e404:	e1cd01b4 	strh	r0, [sp, #20]
   1e408:	e58dc010 	str	ip, [sp, #16]
   1e40c:	e1cd21b6 	strh	r2, [sp, #22]
   1e410:	0a000006 	beq	1e430 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0xb4>
   1e414:	e35a0000 	cmp	sl, #0
   1e418:	0a00001e 	beq	1e498 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x11c>
   1e41c:	e28d3008 	add	r3, sp, #8
   1e420:	e1a0200e 	mov	r2, lr
   1e424:	e1a0100a 	mov	r1, sl
   1e428:	e0830005 	add	r0, r3, r5
   1e42c:	eb0030ff 	bl	2a830 <memcpy>
   1e430:	e3a03000 	mov	r3, #0
   1e434:	e1a02006 	mov	r2, r6
   1e438:	e28d1008 	add	r1, sp, #8
   1e43c:	e284001c 	add	r0, r4, #28
   1e440:	e1cd31b8 	strh	r3, [sp, #24]
   1e444:	eb000c98 	bl	216ac <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1e448:	e594c008 	ldr	ip, [r4, #8]
   1e44c:	e1cd01b8 	strh	r0, [sp, #24]
   1e450:	e35c0000 	cmp	ip, #0
   1e454:	0a00000b 	beq	1e488 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x10c>
   1e458:	e3a0e006 	mov	lr, #6
   1e45c:	e1a03006 	mov	r3, r6
   1e460:	e1a0000c 	mov	r0, ip
   1e464:	e28d2008 	add	r2, sp, #8
   1e468:	e284100c 	add	r1, r4, #12
   1e46c:	e58de000 	str	lr, [sp]
   1e470:	ebfff240 	bl	1ad78 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1e474:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1e478:	e28dd00c 	add	sp, sp, #12
   1e47c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e480:	e6bfcf33 	rev	ip, r3
   1e484:	eaffffd4 	b	1e3dc <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x60>
   1e488:	e59f202c 	ldr	r2, [pc, #44]	; 1e4bc <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x140>
   1e48c:	e59f102c 	ldr	r1, [pc, #44]	; 1e4c0 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x144>
   1e490:	e59f002c 	ldr	r0, [pc, #44]	; 1e4c4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x148>
   1e494:	eb0018c3 	bl	247a8 <assertion_failed>
   1e498:	e59f2028 	ldr	r2, [pc, #40]	; 1e4c8 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x14c>
   1e49c:	e59f101c 	ldr	r1, [pc, #28]	; 1e4c0 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x144>
   1e4a0:	e59f0024 	ldr	r0, [pc, #36]	; 1e4cc <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x150>
   1e4a4:	eb0018bf 	bl	247a8 <assertion_failed>
   1e4a8:	e59f2020 	ldr	r2, [pc, #32]	; 1e4d0 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x154>
   1e4ac:	e59f100c 	ldr	r1, [pc, #12]	; 1e4c0 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x144>
   1e4b0:	e59f001c 	ldr	r0, [pc, #28]	; 1e4d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x158>
   1e4b4:	eb0018bb 	bl	247a8 <assertion_failed>
   1e4b8:	b4050402 	.word	0xb4050402
   1e4bc:	00000587 	.word	0x00000587
   1e4c0:	00045afc 	.word	0x00045afc
   1e4c4:	000453f0 	.word	0x000453f0
   1e4c8:	00000571 	.word	0x00000571
   1e4cc:	00045458 	.word	0x00045458
   1e4d0:	00000557 	.word	0x00000557
   1e4d4:	00045b10 	.word	0x00045b10

0001e4d8 <CTCPConnection::ScanOptions(TTCPHeader*)>:
   1e4d8:	e3510000 	cmp	r1, #0
   1e4dc:	e92d4010 	push	{r4, lr}
   1e4e0:	0a000029 	beq	1e58c <CTCPConnection::ScanOptions(TTCPHeader*)+0xb4>
   1e4e4:	e5d1200c 	ldrb	r2, [r1, #12]
   1e4e8:	e2813016 	add	r3, r1, #22
   1e4ec:	e1a02222 	lsr	r2, r2, #4
   1e4f0:	e0812102 	add	r2, r1, r2, lsl #2
   1e4f4:	e1520003 	cmp	r2, r3
   1e4f8:	e2811014 	add	r1, r1, #20
   1e4fc:	38bd8010 	popcc	{r4, pc}
   1e500:	e5d13000 	ldrb	r3, [r1]
   1e504:	e59fe090 	ldr	lr, [pc, #144]	; 1e59c <CTCPConnection::ScanOptions(TTCPHeader*)+0xc4>
   1e508:	e3530001 	cmp	r3, #1
   1e50c:	0a00000b 	beq	1e540 <CTCPConnection::ScanOptions(TTCPHeader*)+0x68>
   1e510:	e3530002 	cmp	r3, #2
   1e514:	0a00000b 	beq	1e548 <CTCPConnection::ScanOptions(TTCPHeader*)+0x70>
   1e518:	e3530000 	cmp	r3, #0
   1e51c:	08bd8010 	popeq	{r4, pc}
   1e520:	e5d13001 	ldrb	r3, [r1, #1]
   1e524:	e0811003 	add	r1, r1, r3
   1e528:	e2813002 	add	r3, r1, #2
   1e52c:	e1520003 	cmp	r2, r3
   1e530:	38bd8010 	popcc	{r4, pc}
   1e534:	e5d13000 	ldrb	r3, [r1]
   1e538:	e3530001 	cmp	r3, #1
   1e53c:	1afffff3 	bne	1e510 <CTCPConnection::ScanOptions(TTCPHeader*)+0x38>
   1e540:	e2811001 	add	r1, r1, #1
   1e544:	eafffff7 	b	1e528 <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1e548:	e5d13001 	ldrb	r3, [r1, #1]
   1e54c:	e3530004 	cmp	r3, #4
   1e550:	1afffff3 	bne	1e524 <CTCPConnection::ScanOptions(TTCPHeader*)+0x4c>
   1e554:	e281c004 	add	ip, r1, #4
   1e558:	e152000c 	cmp	r2, ip
   1e55c:	3afffff0 	bcc	1e524 <CTCPConnection::ScanOptions(TTCPHeader*)+0x4c>
   1e560:	e1d1c0b2 	ldrh	ip, [r1, #2]
   1e564:	e6bfcfbc 	rev16	ip, ip
   1e568:	e6ffc07c 	uxth	ip, ip
   1e56c:	e28cc014 	add	ip, ip, #20
   1e570:	e15c000e 	cmp	ip, lr
   1e574:	21a0c00e 	movcs	ip, lr
   1e578:	e24cc014 	sub	ip, ip, #20
   1e57c:	e35c0009 	cmp	ip, #9
   1e580:	9affffe7 	bls	1e524 <CTCPConnection::ScanOptions(TTCPHeader*)+0x4c>
   1e584:	e1c0cbb4 	strh	ip, [r0, #180]	; 0xb4
   1e588:	eaffffe4 	b	1e520 <CTCPConnection::ScanOptions(TTCPHeader*)+0x48>
   1e58c:	e59f200c 	ldr	r2, [pc, #12]	; 1e5a0 <CTCPConnection::ScanOptions(TTCPHeader*)+0xc8>
   1e590:	e59f100c 	ldr	r1, [pc, #12]	; 1e5a4 <CTCPConnection::ScanOptions(TTCPHeader*)+0xcc>
   1e594:	e59f000c 	ldr	r0, [pc, #12]	; 1e5a8 <CTCPConnection::ScanOptions(TTCPHeader*)+0xd0>
   1e598:	eb001882 	bl	247a8 <assertion_failed>
   1e59c:	000005c8 	.word	0x000005c8
   1e5a0:	0000058d 	.word	0x0000058d
   1e5a4:	00045afc 	.word	0x00045afc
   1e5a8:	00045b30 	.word	0x00045b30

0001e5ac <CTCPConnection::CalculateISN()>:
   1e5ac:	e92d4070 	push	{r4, r5, r6, lr}
   1e5b0:	e1a05000 	mov	r5, r0
   1e5b4:	e5900078 	ldr	r0, [r0, #120]	; 0x78
   1e5b8:	e3500000 	cmp	r0, #0
   1e5bc:	0a00000f 	beq	1e600 <CTCPConnection::CalculateISN()+0x54>
   1e5c0:	eb002b97 	bl	29424 <CTimer::GetTime() const>
   1e5c4:	e1a04000 	mov	r4, r0
   1e5c8:	e5950078 	ldr	r0, [r5, #120]	; 0x78
   1e5cc:	eb002b90 	bl	29414 <CTimer::GetTicks() const>
   1e5d0:	e59f3038 	ldr	r3, [pc, #56]	; 1e610 <CTCPConnection::CalculateISN()+0x64>
   1e5d4:	e0844104 	add	r4, r4, r4, lsl #2
   1e5d8:	e0832093 	umull	r2, r3, r3, r0
   1e5dc:	e1a032a3 	lsr	r3, r3, #5
   1e5e0:	e0833103 	add	r3, r3, r3, lsl #2
   1e5e4:	e0833103 	add	r3, r3, r3, lsl #2
   1e5e8:	e0844104 	add	r4, r4, r4, lsl #2
   1e5ec:	e0400103 	sub	r0, r0, r3, lsl #2
   1e5f0:	e0800104 	add	r0, r0, r4, lsl #2
   1e5f4:	e0800080 	add	r0, r0, r0, lsl #1
   1e5f8:	e0600180 	rsb	r0, r0, r0, lsl #3
   1e5fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e600:	e59f200c 	ldr	r2, [pc, #12]	; 1e614 <CTCPConnection::CalculateISN()+0x68>
   1e604:	e59f100c 	ldr	r1, [pc, #12]	; 1e618 <CTCPConnection::CalculateISN()+0x6c>
   1e608:	e59f000c 	ldr	r0, [pc, #12]	; 1e61c <CTCPConnection::CalculateISN()+0x70>
   1e60c:	eb001865 	bl	247a8 <assertion_failed>
   1e610:	51eb851f 	.word	0x51eb851f
   1e614:	000005b6 	.word	0x000005b6
   1e618:	00045afc 	.word	0x00045afc
   1e61c:	00040b94 	.word	0x00040b94

0001e620 <CTCPConnection::StopTimer(unsigned int)>:
   1e620:	e3510002 	cmp	r1, #2
   1e624:	e92d4070 	push	{r4, r5, r6, lr}
   1e628:	8a00001c 	bhi	1e6a0 <CTCPConnection::StopTimer(unsigned int)+0x80>
   1e62c:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   1e630:	e1a05000 	mov	r5, r0
   1e634:	e3530000 	cmp	r3, #0
   1e638:	0a00001c 	beq	1e6b0 <CTCPConnection::StopTimer(unsigned int)+0x90>
   1e63c:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   1e640:	e281401e 	add	r4, r1, #30
   1e644:	e3500000 	cmp	r0, #0
   1e648:	1a00000d 	bne	1e684 <CTCPConnection::StopTimer(unsigned int)+0x64>
   1e64c:	e0852104 	add	r2, r5, r4, lsl #2
   1e650:	e5921004 	ldr	r1, [r2, #4]
   1e654:	e3510000 	cmp	r1, #0
   1e658:	08bd8070 	popeq	{r4, r5, r6, pc}
   1e65c:	e1a00003 	mov	r0, r3
   1e660:	eb002cad 	bl	2991c <CTimer::CancelKernelTimer(unsigned int)>
   1e664:	e3a03000 	mov	r3, #0
   1e668:	e0851104 	add	r1, r5, r4, lsl #2
   1e66c:	e5813004 	str	r3, [r1, #4]
   1e670:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   1e674:	e3530000 	cmp	r3, #0
   1e678:	08bd8070 	popeq	{r4, r5, r6, pc}
   1e67c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e680:	ea0035a7 	b	2bd24 <LeaveCritical>
   1e684:	eb00357c 	bl	2bc7c <EnterCritical>
   1e688:	e0853104 	add	r3, r5, r4, lsl #2
   1e68c:	e5931004 	ldr	r1, [r3, #4]
   1e690:	e3510000 	cmp	r1, #0
   1e694:	0afffff5 	beq	1e670 <CTCPConnection::StopTimer(unsigned int)+0x50>
   1e698:	e5953078 	ldr	r3, [r5, #120]	; 0x78
   1e69c:	eaffffee 	b	1e65c <CTCPConnection::StopTimer(unsigned int)+0x3c>
   1e6a0:	e59f2018 	ldr	r2, [pc, #24]	; 1e6c0 <CTCPConnection::StopTimer(unsigned int)+0xa0>
   1e6a4:	e59f1018 	ldr	r1, [pc, #24]	; 1e6c4 <CTCPConnection::StopTimer(unsigned int)+0xa4>
   1e6a8:	e59f0018 	ldr	r0, [pc, #24]	; 1e6c8 <CTCPConnection::StopTimer(unsigned int)+0xa8>
   1e6ac:	eb00183d 	bl	247a8 <assertion_failed>
   1e6b0:	e59f2014 	ldr	r2, [pc, #20]	; 1e6cc <CTCPConnection::StopTimer(unsigned int)+0xac>
   1e6b4:	e59f1008 	ldr	r1, [pc, #8]	; 1e6c4 <CTCPConnection::StopTimer(unsigned int)+0xa4>
   1e6b8:	e59f0010 	ldr	r0, [pc, #16]	; 1e6d0 <CTCPConnection::StopTimer(unsigned int)+0xb0>
   1e6bc:	eb001839 	bl	247a8 <assertion_failed>
   1e6c0:	000005c9 	.word	0x000005c9
   1e6c4:	00045afc 	.word	0x00045afc
   1e6c8:	00045b40 	.word	0x00045b40
   1e6cc:	000005ca 	.word	0x000005ca
   1e6d0:	00040b94 	.word	0x00040b94

0001e6d4 <CTCPConnection::~CTCPConnection()>:
   1e6d4:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1e6d8:	e59f30bc 	ldr	r3, [pc, #188]	; 1e79c <CTCPConnection::~CTCPConnection()+0xc8>
   1e6dc:	e21110ff 	ands	r1, r1, #255	; 0xff
   1e6e0:	e92d4070 	push	{r4, r5, r6, lr}
   1e6e4:	e5803000 	str	r3, [r0]
   1e6e8:	1a000023 	bne	1e77c <CTCPConnection::~CTCPConnection()+0xa8>
   1e6ec:	e1a04000 	mov	r4, r0
   1e6f0:	ebffffca 	bl	1e620 <CTCPConnection::StopTimer(unsigned int)>
   1e6f4:	e3a01001 	mov	r1, #1
   1e6f8:	e1a00004 	mov	r0, r4
   1e6fc:	ebffffc7 	bl	1e620 <CTCPConnection::StopTimer(unsigned int)>
   1e700:	e2845068 	add	r5, r4, #104	; 0x68
   1e704:	e3a01002 	mov	r1, #2
   1e708:	e1a00004 	mov	r0, r4
   1e70c:	ebffffc3 	bl	1e620 <CTCPConnection::StopTimer(unsigned int)>
   1e710:	e2846070 	add	r6, r4, #112	; 0x70
   1e714:	e1a00005 	mov	r0, r5
   1e718:	eb00179f 	bl	2459c <CSynchronizationEvent::Set()>
   1e71c:	e1a00006 	mov	r0, r6
   1e720:	eb00179d 	bl	2459c <CSynchronizationEvent::Set()>
   1e724:	e59f2074 	ldr	r2, [pc, #116]	; 1e7a0 <CTCPConnection::~CTCPConnection()+0xcc>
   1e728:	e5923000 	ldr	r3, [r2]
   1e72c:	e3530000 	cmp	r3, #0
   1e730:	0a000015 	beq	1e78c <CTCPConnection::~CTCPConnection()+0xb8>
   1e734:	e2433001 	sub	r3, r3, #1
   1e738:	e28400b8 	add	r0, r4, #184	; 0xb8
   1e73c:	e5823000 	str	r3, [r2]
   1e740:	eb00079f 	bl	205c4 <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>
   1e744:	e1a00006 	mov	r0, r6
   1e748:	eb001784 	bl	24560 <CSynchronizationEvent::~CSynchronizationEvent()>
   1e74c:	e1a00005 	mov	r0, r5
   1e750:	eb001782 	bl	24560 <CSynchronizationEvent::~CSynchronizationEvent()>
   1e754:	e2840048 	add	r0, r4, #72	; 0x48
   1e758:	eb0006ab 	bl	2020c <CRetransmissionQueue::~CRetransmissionQueue()>
   1e75c:	e284003c 	add	r0, r4, #60	; 0x3c
   1e760:	eb000af3 	bl	21334 <CNetQueue::~CNetQueue()>
   1e764:	e2840030 	add	r0, r4, #48	; 0x30
   1e768:	eb000af1 	bl	21334 <CNetQueue::~CNetQueue()>
   1e76c:	e1a00004 	mov	r0, r4
   1e770:	ebfffb7a 	bl	1d560 <CNetConnection::~CNetConnection()>
   1e774:	e1a00004 	mov	r0, r4
   1e778:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e77c:	e3a020d1 	mov	r2, #209	; 0xd1
   1e780:	e59f101c 	ldr	r1, [pc, #28]	; 1e7a4 <CTCPConnection::~CTCPConnection()+0xd0>
   1e784:	e59f001c 	ldr	r0, [pc, #28]	; 1e7a8 <CTCPConnection::~CTCPConnection()+0xd4>
   1e788:	eb001806 	bl	247a8 <assertion_failed>
   1e78c:	e3a020dc 	mov	r2, #220	; 0xdc
   1e790:	e59f100c 	ldr	r1, [pc, #12]	; 1e7a4 <CTCPConnection::~CTCPConnection()+0xd0>
   1e794:	e59f0010 	ldr	r0, [pc, #16]	; 1e7ac <CTCPConnection::~CTCPConnection()+0xd8>
   1e798:	eb001802 	bl	247a8 <assertion_failed>
   1e79c:	00045d2c 	.word	0x00045d2c
   1e7a0:	0005ce1c 	.word	0x0005ce1c
   1e7a4:	00045afc 	.word	0x00045afc
   1e7a8:	00045b5c 	.word	0x00045b5c
   1e7ac:	00045b78 	.word	0x00045b78

0001e7b0 <CTCPConnection::~CTCPConnection()>:
   1e7b0:	e92d4010 	push	{r4, lr}
   1e7b4:	e1a04000 	mov	r4, r0
   1e7b8:	ebffffc5 	bl	1e6d4 <CTCPConnection::~CTCPConnection()>
   1e7bc:	e1a00004 	mov	r0, r4
   1e7c0:	e3a010e0 	mov	r1, #224	; 0xe0
   1e7c4:	eb00320d 	bl	2b000 <operator delete(void*, unsigned int)>
   1e7c8:	e1a00004 	mov	r0, r4
   1e7cc:	e8bd8010 	pop	{r4, pc}

0001e7d0 <CTCPConnection::Close()>:
   1e7d0:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1e7d4:	e92d4010 	push	{r4, lr}
   1e7d8:	e3530000 	cmp	r3, #0
   1e7dc:	e1a04000 	mov	r4, r0
   1e7e0:	ba00000e 	blt	1e820 <CTCPConnection::Close()+0x50>
   1e7e4:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1e7e8:	e353000a 	cmp	r3, #10
   1e7ec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e7f0:	ea000017 	b	1e854 <CTCPConnection::Close()+0x84>
   1e7f4:	0001e828 	.word	0x0001e828
   1e7f8:	0001e88c 	.word	0x0001e88c
   1e7fc:	0001e88c 	.word	0x0001e88c
   1e800:	0001e868 	.word	0x0001e868
   1e804:	0001e868 	.word	0x0001e868
   1e808:	0001e854 	.word	0x0001e854
   1e80c:	0001e854 	.word	0x0001e854
   1e810:	0001e830 	.word	0x0001e830
   1e814:	0001e828 	.word	0x0001e828
   1e818:	0001e828 	.word	0x0001e828
   1e81c:	0001e828 	.word	0x0001e828
   1e820:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e824:	e8bd8010 	pop	{r4, pc}
   1e828:	e3e00000 	mvn	r0, #0
   1e82c:	e8bd8010 	pop	{r4, pc}
   1e830:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   1e834:	e3530000 	cmp	r3, #0
   1e838:	1a00001c 	bne	1e8b0 <CTCPConnection::Close()+0xe0>
   1e83c:	e3a01005 	mov	r1, #5
   1e840:	e3a02009 	mov	r2, #9
   1e844:	e3a03001 	mov	r3, #1
   1e848:	e5801060 	str	r1, [r0, #96]	; 0x60
   1e84c:	e5c0205f 	strb	r2, [r0, #95]	; 0x5f
   1e850:	e5c0305e 	strb	r3, [r0, #94]	; 0x5e
   1e854:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e858:	e3530000 	cmp	r3, #0
   1e85c:	baffffef 	blt	1e820 <CTCPConnection::Close()+0x50>
   1e860:	e3a00000 	mov	r0, #0
   1e864:	e8bd8010 	pop	{r4, pc}
   1e868:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   1e86c:	e3530000 	cmp	r3, #0
   1e870:	1a00000a 	bne	1e8a0 <CTCPConnection::Close()+0xd0>
   1e874:	e3a03005 	mov	r3, #5
   1e878:	e3a02001 	mov	r2, #1
   1e87c:	e5803060 	str	r3, [r0, #96]	; 0x60
   1e880:	e5c0305f 	strb	r3, [r0, #95]	; 0x5f
   1e884:	e5c0205e 	strb	r2, [r0, #94]	; 0x5e
   1e888:	eafffff1 	b	1e854 <CTCPConnection::Close()+0x84>
   1e88c:	e3a01001 	mov	r1, #1
   1e890:	ebffff62 	bl	1e620 <CTCPConnection::StopTimer(unsigned int)>
   1e894:	e3a03000 	mov	r3, #0
   1e898:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1e89c:	eaffffec 	b	1e854 <CTCPConnection::Close()+0x84>
   1e8a0:	e3a02d05 	mov	r2, #320	; 0x140
   1e8a4:	e59f1014 	ldr	r1, [pc, #20]	; 1e8c0 <CTCPConnection::Close()+0xf0>
   1e8a8:	e59f0014 	ldr	r0, [pc, #20]	; 1e8c4 <CTCPConnection::Close()+0xf4>
   1e8ac:	eb0017bd 	bl	247a8 <assertion_failed>
   1e8b0:	e59f2010 	ldr	r2, [pc, #16]	; 1e8c8 <CTCPConnection::Close()+0xf8>
   1e8b4:	e59f1004 	ldr	r1, [pc, #4]	; 1e8c0 <CTCPConnection::Close()+0xf0>
   1e8b8:	e59f0004 	ldr	r0, [pc, #4]	; 1e8c4 <CTCPConnection::Close()+0xf4>
   1e8bc:	eb0017b9 	bl	247a8 <assertion_failed>
   1e8c0:	00045afc 	.word	0x00045afc
   1e8c4:	00045b8c 	.word	0x00045b8c
   1e8c8:	0000014b 	.word	0x0000014b

0001e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>:
   1e8cc:	e92d4070 	push	{r4, r5, r6, lr}
   1e8d0:	e3510002 	cmp	r1, #2
   1e8d4:	e24dd008 	sub	sp, sp, #8
   1e8d8:	8a000012 	bhi	1e928 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x5c>
   1e8dc:	e3520000 	cmp	r2, #0
   1e8e0:	e1a06002 	mov	r6, r2
   1e8e4:	0a000013 	beq	1e938 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x6c>
   1e8e8:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   1e8ec:	e1a04000 	mov	r4, r0
   1e8f0:	e3530000 	cmp	r3, #0
   1e8f4:	0a000013 	beq	1e948 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x7c>
   1e8f8:	e1a05001 	mov	r5, r1
   1e8fc:	ebffff47 	bl	1e620 <CTCPConnection::StopTimer(unsigned int)>
   1e900:	e58d4000 	str	r4, [sp]
   1e904:	e1a01006 	mov	r1, r6
   1e908:	e1a03005 	mov	r3, r5
   1e90c:	e59f2044 	ldr	r2, [pc, #68]	; 1e958 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x8c>
   1e910:	e5940078 	ldr	r0, [r4, #120]	; 0x78
   1e914:	eb002bae 	bl	297d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1e918:	e0841105 	add	r1, r4, r5, lsl #2
   1e91c:	e581007c 	str	r0, [r1, #124]	; 0x7c
   1e920:	e28dd008 	add	sp, sp, #8
   1e924:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e928:	e59f202c 	ldr	r2, [pc, #44]	; 1e95c <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x90>
   1e92c:	e59f102c 	ldr	r1, [pc, #44]	; 1e960 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e930:	e59f002c 	ldr	r0, [pc, #44]	; 1e964 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x98>
   1e934:	eb00179b 	bl	247a8 <assertion_failed>
   1e938:	e59f2028 	ldr	r2, [pc, #40]	; 1e968 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x9c>
   1e93c:	e59f101c 	ldr	r1, [pc, #28]	; 1e960 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e940:	e59f0024 	ldr	r0, [pc, #36]	; 1e96c <CTCPConnection::StartTimer(unsigned int, unsigned int)+0xa0>
   1e944:	eb001797 	bl	247a8 <assertion_failed>
   1e948:	e3a02d17 	mov	r2, #1472	; 0x5c0
   1e94c:	e59f100c 	ldr	r1, [pc, #12]	; 1e960 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e950:	e59f0018 	ldr	r0, [pc, #24]	; 1e970 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0xa4>
   1e954:	eb001793 	bl	247a8 <assertion_failed>
   1e958:	00020168 	.word	0x00020168
   1e95c:	000005be 	.word	0x000005be
   1e960:	00045afc 	.word	0x00045afc
   1e964:	00045b40 	.word	0x00045b40
   1e968:	000005bf 	.word	0x000005bf
   1e96c:	00045b9c 	.word	0x00045b9c
   1e970:	00040b94 	.word	0x00040b94

0001e974 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1e974:	e3a0c006 	mov	ip, #6
   1e978:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1e97c:	e1a04000 	mov	r4, r0
   1e980:	e3a05000 	mov	r5, #0
   1e984:	e3a06001 	mov	r6, #1
   1e988:	e24dd014 	sub	sp, sp, #20
   1e98c:	e1dde2b8 	ldrh	lr, [sp, #40]	; 0x28
   1e990:	e58dc008 	str	ip, [sp, #8]
   1e994:	e1ddc2bc 	ldrh	ip, [sp, #44]	; 0x2c
   1e998:	e58de000 	str	lr, [sp]
   1e99c:	e58dc004 	str	ip, [sp, #4]
   1e9a0:	ebfffa9b 	bl	1d414 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1e9a4:	e59f3140 	ldr	r3, [pc, #320]	; 1eaec <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x178>
   1e9a8:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   1e9ac:	e5843000 	str	r3, [r4]
   1e9b0:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1e9b4:	e5c46029 	strb	r6, [r4, #41]	; 0x29
   1e9b8:	e2840030 	add	r0, r4, #48	; 0x30
   1e9bc:	eb000a24 	bl	21254 <CNetQueue::CNetQueue()>
   1e9c0:	e284003c 	add	r0, r4, #60	; 0x3c
   1e9c4:	eb000a22 	bl	21254 <CNetQueue::CNetQueue()>
   1e9c8:	e3a01801 	mov	r1, #65536	; 0x10000
   1e9cc:	e2840048 	add	r0, r4, #72	; 0x48
   1e9d0:	eb0005f8 	bl	201b8 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1e9d4:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   1e9d8:	e1a01005 	mov	r1, r5
   1e9dc:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   1e9e0:	e2840068 	add	r0, r4, #104	; 0x68
   1e9e4:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1e9e8:	e5845060 	str	r5, [r4, #96]	; 0x60
   1e9ec:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1e9f0:	eb0016d6 	bl	24550 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e9f4:	e1a01005 	mov	r1, r5
   1e9f8:	e2840070 	add	r0, r4, #112	; 0x70
   1e9fc:	eb0016d3 	bl	24550 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1ea00:	eb002d35 	bl	29edc <CTimer::Get()>
   1ea04:	e3a02f86 	mov	r2, #536	; 0x218
   1ea08:	e59f30e0 	ldr	r3, [pc, #224]	; 1eaf0 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x17c>
   1ea0c:	e28470b8 	add	r7, r4, #184	; 0xb8
   1ea10:	e5840078 	str	r0, [r4, #120]	; 0x78
   1ea14:	e1c42bb4 	strh	r2, [r4, #180]	; 0xb4
   1ea18:	e5843094 	str	r3, [r4, #148]	; 0x94
   1ea1c:	e58430ac 	str	r3, [r4, #172]	; 0xac
   1ea20:	e1a00007 	mov	r0, r7
   1ea24:	e5846088 	str	r6, [r4, #136]	; 0x88
   1ea28:	e1c459b8 	strh	r5, [r4, #152]	; 0x98
   1ea2c:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   1ea30:	e58450b0 	str	r5, [r4, #176]	; 0xb0
   1ea34:	eb0006cb 	bl	20568 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1ea38:	e59f20b4 	ldr	r2, [pc, #180]	; 1eaf4 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x180>
   1ea3c:	e1a00004 	mov	r0, r4
   1ea40:	e5923000 	ldr	r3, [r2]
   1ea44:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1ea48:	e0833006 	add	r3, r3, r6
   1ea4c:	e5845080 	str	r5, [r4, #128]	; 0x80
   1ea50:	e5845084 	str	r5, [r4, #132]	; 0x84
   1ea54:	e5823000 	str	r3, [r2]
   1ea58:	ebfffed3 	bl	1e5ac <CTCPConnection::CalculateISN()>
   1ea5c:	e1a01000 	mov	r1, r0
   1ea60:	e1a00007 	mov	r0, r7
   1ea64:	e58410a4 	str	r1, [r4, #164]	; 0xa4
   1ea68:	eb0006d8 	bl	205d0 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1ea6c:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   1ea70:	e1a03005 	mov	r3, r5
   1ea74:	e0821006 	add	r1, r2, r6
   1ea78:	e58d5004 	str	r5, [sp, #4]
   1ea7c:	e58d5000 	str	r5, [sp]
   1ea80:	e1a00004 	mov	r0, r4
   1ea84:	e5841090 	str	r1, [r4, #144]	; 0x90
   1ea88:	e584208c 	str	r2, [r4, #140]	; 0x8c
   1ea8c:	e3a01c02 	mov	r1, #512	; 0x200
   1ea90:	ebfffe39 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ea94:	e1500005 	cmp	r0, r5
   1ea98:	1a000002 	bne	1eaa8 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x134>
   1ea9c:	e1a00004 	mov	r0, r4
   1eaa0:	e28dd014 	add	sp, sp, #20
   1eaa4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1eaa8:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1eaac:	e1a02006 	mov	r2, r6
   1eab0:	e1a00007 	mov	r0, r7
   1eab4:	eb0006e1 	bl	20640 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1eab8:	e3a03005 	mov	r3, #5
   1eabc:	e3a02002 	mov	r2, #2
   1eac0:	e1a00007 	mov	r0, r7
   1eac4:	e5c4202a 	strb	r2, [r4, #42]	; 0x2a
   1eac8:	e5843060 	str	r3, [r4, #96]	; 0x60
   1eacc:	eb0006bd 	bl	205c8 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1ead0:	e1a01006 	mov	r1, r6
   1ead4:	e1a02000 	mov	r2, r0
   1ead8:	e1a00004 	mov	r0, r4
   1eadc:	ebffff7a 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1eae0:	e1a00004 	mov	r0, r4
   1eae4:	e28dd014 	add	sp, sp, #20
   1eae8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1eaec:	00045d2c 	.word	0x00045d2c
   1eaf0:	00003908 	.word	0x00003908
   1eaf4:	0005ce1c 	.word	0x0005ce1c

0001eaf8 <CTCPConnection::Process()>:
   1eaf8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1eafc:	e5d03064 	ldrb	r3, [r0, #100]	; 0x64
   1eb00:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1eb04:	e3530000 	cmp	r3, #0
   1eb08:	e1a04000 	mov	r4, r0
   1eb0c:	e24dd004 	sub	sp, sp, #4
   1eb10:	1a00002a 	bne	1ebc0 <CTCPConnection::Process()+0xc8>
   1eb14:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1eb18:	e353000a 	cmp	r3, #10
   1eb1c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1eb20:	ea0000b9 	b	1ee0c <CTCPConnection::Process()+0x314>
   1eb24:	0001ebb4 	.word	0x0001ebb4
   1eb28:	0001ebb4 	.word	0x0001ebb4
   1eb2c:	0001eb50 	.word	0x0001eb50
   1eb30:	0001eb50 	.word	0x0001eb50
   1eb34:	0001ebe4 	.word	0x0001ebe4
   1eb38:	0001ebe4 	.word	0x0001ebe4
   1eb3c:	0001ebb4 	.word	0x0001ebb4
   1eb40:	0001ebe4 	.word	0x0001ebe4
   1eb44:	0001ebe4 	.word	0x0001ebe4
   1eb48:	0001ebe4 	.word	0x0001ebe4
   1eb4c:	0001ebb4 	.word	0x0001ebb4
   1eb50:	e5d0305d 	ldrb	r3, [r0, #93]	; 0x5d
   1eb54:	e3530000 	cmp	r3, #0
   1eb58:	0a000015 	beq	1ebb4 <CTCPConnection::Process()+0xbc>
   1eb5c:	e3a03000 	mov	r3, #0
   1eb60:	e5c0305d 	strb	r3, [r0, #93]	; 0x5d
   1eb64:	e5d0202a 	ldrb	r2, [r0, #42]	; 0x2a
   1eb68:	e58d3004 	str	r3, [sp, #4]
   1eb6c:	e3520002 	cmp	r2, #2
   1eb70:	e58d3000 	str	r3, [sp]
   1eb74:	03a01c02 	moveq	r1, #512	; 0x200
   1eb78:	11c02ad4 	ldrdne	r2, [r0, #164]	; 0xa4
   1eb7c:	13a01c12 	movne	r1, #4608	; 0x1200
   1eb80:	059020a4 	ldreq	r2, [r0, #164]	; 0xa4
   1eb84:	ebfffdfc 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1eb88:	e3a02001 	mov	r2, #1
   1eb8c:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1eb90:	e28400b8 	add	r0, r4, #184	; 0xb8
   1eb94:	e58d000c 	str	r0, [sp, #12]
   1eb98:	eb0006a8 	bl	20640 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1eb9c:	e59d000c 	ldr	r0, [sp, #12]
   1eba0:	eb000688 	bl	205c8 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1eba4:	e3a01001 	mov	r1, #1
   1eba8:	e1a02000 	mov	r2, r0
   1ebac:	e1a00004 	mov	r0, r4
   1ebb0:	ebffff45 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ebb4:	e28dde65 	add	sp, sp, #1616	; 0x650
   1ebb8:	e28dd004 	add	sp, sp, #4
   1ebbc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ebc0:	e3e02000 	mvn	r2, #0
   1ebc4:	e3a03000 	mov	r3, #0
   1ebc8:	e580202c 	str	r2, [r0, #44]	; 0x2c
   1ebcc:	e2800068 	add	r0, r0, #104	; 0x68
   1ebd0:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1ebd4:	eb001670 	bl	2459c <CSynchronizationEvent::Set()>
   1ebd8:	e28dde65 	add	sp, sp, #1616	; 0x650
   1ebdc:	e28dd004 	add	sp, sp, #4
   1ebe0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ebe4:	e2806048 	add	r6, r0, #72	; 0x48
   1ebe8:	e1a00006 	mov	r0, r6
   1ebec:	eb00058f 	bl	20230 <CRetransmissionQueue::IsEmpty() const>
   1ebf0:	e3500000 	cmp	r0, #0
   1ebf4:	1a000062 	bne	1ed84 <CTCPConnection::Process()+0x28c>
   1ebf8:	e2845030 	add	r5, r4, #48	; 0x30
   1ebfc:	ea000008 	b	1ec24 <CTCPConnection::Process()+0x12c>
   1ec00:	e3a02000 	mov	r2, #0
   1ec04:	e1a00005 	mov	r0, r5
   1ec08:	e28d1010 	add	r1, sp, #16
   1ec0c:	eb000a13 	bl	21460 <CNetQueue::Dequeue(void*, void**)>
   1ec10:	e2502000 	subs	r2, r0, #0
   1ec14:	0a000006 	beq	1ec34 <CTCPConnection::Process()+0x13c>
   1ec18:	e1a00006 	mov	r0, r6
   1ec1c:	e28d1010 	add	r1, sp, #16
   1ec20:	eb0005a8 	bl	202c8 <CRetransmissionQueue::Write(void const*, unsigned int)>
   1ec24:	e1a00006 	mov	r0, r6
   1ec28:	eb000586 	bl	20248 <CRetransmissionQueue::GetFreeSpace() const>
   1ec2c:	e3500d19 	cmp	r0, #1600	; 0x640
   1ec30:	2afffff2 	bcs	1ec00 <CTCPConnection::Process()+0x108>
   1ec34:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1ec38:	e3530004 	cmp	r3, #4
   1ec3c:	0a000042 	beq	1ed4c <CTCPConnection::Process()+0x254>
   1ec40:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1ec44:	e3530007 	cmp	r3, #7
   1ec48:	0a00003f 	beq	1ed4c <CTCPConnection::Process()+0x254>
   1ec4c:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
   1ec50:	e3530000 	cmp	r3, #0
   1ec54:	1a000043 	bne	1ed68 <CTCPConnection::Process()+0x270>
   1ec58:	e28d7010 	add	r7, sp, #16
   1ec5c:	e2848030 	add	r8, r4, #48	; 0x30
   1ec60:	ea000015 	b	1ecbc <CTCPConnection::Process()+0x1c4>
   1ec64:	e3a01a01 	mov	r1, #4096	; 0x1000
   1ec68:	e58d5004 	str	r5, [sp, #4]
   1ec6c:	e58d7000 	str	r7, [sp]
   1ec70:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   1ec74:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   1ec78:	e28490b8 	add	r9, r4, #184	; 0xb8
   1ec7c:	e1a00004 	mov	r0, r4
   1ec80:	ebfffdbd 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ec84:	e1a02005 	mov	r2, r5
   1ec88:	e5941090 	ldr	r1, [r4, #144]	; 0x90
   1ec8c:	e1a00009 	mov	r0, r9
   1ec90:	e58d900c 	str	r9, [sp, #12]
   1ec94:	eb000669 	bl	20640 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1ec98:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   1ec9c:	e59d000c 	ldr	r0, [sp, #12]
   1eca0:	e0835005 	add	r5, r3, r5
   1eca4:	e5845090 	str	r5, [r4, #144]	; 0x90
   1eca8:	eb000646 	bl	205c8 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1ecac:	e3a01001 	mov	r1, #1
   1ecb0:	e1a02000 	mov	r2, r0
   1ecb4:	e1a00004 	mov	r0, r4
   1ecb8:	ebffff03 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ecbc:	e1a00006 	mov	r0, r6
   1ecc0:	eb0005b0 	bl	20388 <CRetransmissionQueue::GetBytesAvailable() const>
   1ecc4:	e3500000 	cmp	r0, #0
   1ecc8:	0affffb9 	beq	1ebb4 <CTCPConnection::Process()+0xbc>
   1eccc:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
   1ecd0:	e5942094 	ldr	r2, [r4, #148]	; 0x94
   1ecd4:	e5945090 	ldr	r5, [r4, #144]	; 0x90
   1ecd8:	e0833002 	add	r3, r3, r2
   1ecdc:	e0533005 	subs	r3, r3, r5
   1ece0:	0affffb3 	beq	1ebb4 <CTCPConnection::Process()+0xbc>
   1ece4:	e1d45bb4 	ldrh	r5, [r4, #180]	; 0xb4
   1ece8:	e1550003 	cmp	r5, r3
   1ecec:	31a03005 	movcc	r3, r5
   1ecf0:	e1530000 	cmp	r3, r0
   1ecf4:	31a05003 	movcc	r5, r3
   1ecf8:	21a05000 	movcs	r5, r0
   1ecfc:	e3550d19 	cmp	r5, #1600	; 0x640
   1ed00:	8a00000d 	bhi	1ed3c <CTCPConnection::Process()+0x244>
   1ed04:	e1a02005 	mov	r2, r5
   1ed08:	e1a01007 	mov	r1, r7
   1ed0c:	e1a00006 	mov	r0, r6
   1ed10:	eb0005bb 	bl	20404 <CRetransmissionQueue::Read(void*, unsigned int)>
   1ed14:	e1a00006 	mov	r0, r6
   1ed18:	eb000544 	bl	20230 <CRetransmissionQueue::IsEmpty() const>
   1ed1c:	e3500000 	cmp	r0, #0
   1ed20:	0affffcf 	beq	1ec64 <CTCPConnection::Process()+0x16c>
   1ed24:	e1a00008 	mov	r0, r8
   1ed28:	eb00094e 	bl	21268 <CNetQueue::IsEmpty() const>
   1ed2c:	e3500000 	cmp	r0, #0
   1ed30:	0affffcb 	beq	1ec64 <CTCPConnection::Process()+0x16c>
   1ed34:	e3a01b06 	mov	r1, #6144	; 0x1800
   1ed38:	eaffffca 	b	1ec68 <CTCPConnection::Process()+0x170>
   1ed3c:	e59f20d0 	ldr	r2, [pc, #208]	; 1ee14 <CTCPConnection::Process()+0x31c>
   1ed40:	e59f10d0 	ldr	r1, [pc, #208]	; 1ee18 <CTCPConnection::Process()+0x320>
   1ed44:	e59f00d0 	ldr	r0, [pc, #208]	; 1ee1c <CTCPConnection::Process()+0x324>
   1ed48:	eb001696 	bl	247a8 <assertion_failed>
   1ed4c:	e2840030 	add	r0, r4, #48	; 0x30
   1ed50:	eb000944 	bl	21268 <CNetQueue::IsEmpty() const>
   1ed54:	e3500000 	cmp	r0, #0
   1ed58:	0affffbb 	beq	1ec4c <CTCPConnection::Process()+0x154>
   1ed5c:	e2840070 	add	r0, r4, #112	; 0x70
   1ed60:	eb00160d 	bl	2459c <CSynchronizationEvent::Set()>
   1ed64:	eaffffb8 	b	1ec4c <CTCPConnection::Process()+0x154>
   1ed68:	e3a03000 	mov	r3, #0
   1ed6c:	e1a00006 	mov	r0, r6
   1ed70:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
   1ed74:	eb0005f3 	bl	20548 <CRetransmissionQueue::Reset()>
   1ed78:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
   1ed7c:	e5843090 	str	r3, [r4, #144]	; 0x90
   1ed80:	eaffffb4 	b	1ec58 <CTCPConnection::Process()+0x160>
   1ed84:	e2840030 	add	r0, r4, #48	; 0x30
   1ed88:	eb000936 	bl	21268 <CNetQueue::IsEmpty() const>
   1ed8c:	e3500000 	cmp	r0, #0
   1ed90:	0affff98 	beq	1ebf8 <CTCPConnection::Process()+0x100>
   1ed94:	e5d4305e 	ldrb	r3, [r4, #94]	; 0x5e
   1ed98:	e3530000 	cmp	r3, #0
   1ed9c:	0affff95 	beq	1ebf8 <CTCPConnection::Process()+0x100>
   1eda0:	e3a07000 	mov	r7, #0
   1eda4:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   1eda8:	e58d7004 	str	r7, [sp, #4]
   1edac:	e58d7000 	str	r7, [sp]
   1edb0:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   1edb4:	e28450b8 	add	r5, r4, #184	; 0xb8
   1edb8:	e3a01c11 	mov	r1, #4352	; 0x1100
   1edbc:	e1a00004 	mov	r0, r4
   1edc0:	ebfffd6d 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1edc4:	e5941090 	ldr	r1, [r4, #144]	; 0x90
   1edc8:	e1a00005 	mov	r0, r5
   1edcc:	e3a02001 	mov	r2, #1
   1edd0:	e58d500c 	str	r5, [sp, #12]
   1edd4:	eb000619 	bl	20640 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1edd8:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   1eddc:	e5d4205f 	ldrb	r2, [r4, #95]	; 0x5f
   1ede0:	e2833001 	add	r3, r3, #1
   1ede4:	e5c4202a 	strb	r2, [r4, #42]	; 0x2a
   1ede8:	e59d000c 	ldr	r0, [sp, #12]
   1edec:	e5843090 	str	r3, [r4, #144]	; 0x90
   1edf0:	e5c4705e 	strb	r7, [r4, #94]	; 0x5e
   1edf4:	eb0005f3 	bl	205c8 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1edf8:	e3a01001 	mov	r1, #1
   1edfc:	e1a02000 	mov	r2, r0
   1ee00:	e1a00004 	mov	r0, r4
   1ee04:	ebfffeb0 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ee08:	eaffff7a 	b	1ebf8 <CTCPConnection::Process()+0x100>
   1ee0c:	e2806048 	add	r6, r0, #72	; 0x48
   1ee10:	eaffff78 	b	1ebf8 <CTCPConnection::Process()+0x100>
   1ee14:	0000025b 	.word	0x0000025b
   1ee18:	00045afc 	.word	0x00045afc
   1ee1c:	00043190 	.word	0x00043190

0001ee20 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1ee20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ee24:	e59d1020 	ldr	r1, [sp, #32]
   1ee28:	e1dd61b8 	ldrh	r6, [sp, #24]
   1ee2c:	e3510006 	cmp	r1, #6
   1ee30:	e1dd71bc 	ldrh	r7, [sp, #28]
   1ee34:	1a000018 	bne	1ee9c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   1ee38:	e1a05003 	mov	r5, r3
   1ee3c:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1ee40:	e1a04000 	mov	r4, r0
   1ee44:	e3530001 	cmp	r3, #1
   1ee48:	9a000013 	bls	1ee9c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   1ee4c:	e1a01002 	mov	r1, r2
   1ee50:	e280000c 	add	r0, r0, #12
   1ee54:	eb0007e0 	bl	20ddc <CIPAddress::operator!=(CIPAddress const&) const>
   1ee58:	e3500000 	cmp	r0, #0
   1ee5c:	1a00000e 	bne	1ee9c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   1ee60:	e1d431b4 	ldrh	r3, [r4, #20]
   1ee64:	e1530006 	cmp	r3, r6
   1ee68:	1a00000b 	bne	1ee9c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   1ee6c:	e5940004 	ldr	r0, [r4, #4]
   1ee70:	e3500000 	cmp	r0, #0
   1ee74:	0a000019 	beq	1eee0 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xc0>
   1ee78:	eb00074d 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   1ee7c:	e1a01000 	mov	r1, r0
   1ee80:	e1a00005 	mov	r0, r5
   1ee84:	eb0007d4 	bl	20ddc <CIPAddress::operator!=(CIPAddress const&) const>
   1ee88:	e3500000 	cmp	r0, #0
   1ee8c:	1a000002 	bne	1ee9c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   1ee90:	e1d431b6 	ldrh	r3, [r4, #22]
   1ee94:	e1530007 	cmp	r3, r7
   1ee98:	0a000001 	beq	1eea4 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x84>
   1ee9c:	e3a00000 	mov	r0, #0
   1eea0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1eea4:	e3e03000 	mvn	r3, #0
   1eea8:	e1a00004 	mov	r0, r4
   1eeac:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1eeb0:	e3a01001 	mov	r1, #1
   1eeb4:	ebfffdd9 	bl	1e620 <CTCPConnection::StopTimer(unsigned int)>
   1eeb8:	e3a0300a 	mov	r3, #10
   1eebc:	e3a01002 	mov	r1, #2
   1eec0:	e1a00004 	mov	r0, r4
   1eec4:	e59f2024 	ldr	r2, [pc, #36]	; 1eef0 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd0>
   1eec8:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1eecc:	ebfffe7e 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1eed0:	e2840068 	add	r0, r4, #104	; 0x68
   1eed4:	eb0015b0 	bl	2459c <CSynchronizationEvent::Set()>
   1eed8:	e3a00001 	mov	r0, #1
   1eedc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1eee0:	e59f200c 	ldr	r2, [pc, #12]	; 1eef4 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd4>
   1eee4:	e59f100c 	ldr	r1, [pc, #12]	; 1eef8 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd8>
   1eee8:	e59f000c 	ldr	r0, [pc, #12]	; 1eefc <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xdc>
   1eeec:	eb00162d 	bl	247a8 <assertion_failed>
   1eef0:	00001770 	.word	0x00001770
   1eef4:	00000539 	.word	0x00000539
   1eef8:	00045afc 	.word	0x00045afc
   1eefc:	000453dc 	.word	0x000453dc

0001ef00 <CTCPConnection::DumpStatus()>:
   1ef00:	e92d4010 	push	{r4, lr}
   1ef04:	e1a04000 	mov	r4, r0
   1ef08:	e24dd020 	sub	sp, sp, #32
   1ef0c:	eb001f0d 	bl	26b48 <CLogger::Get()>
   1ef10:	e594c0a4 	ldr	ip, [r4, #164]	; 0xa4
   1ef14:	e5941090 	ldr	r1, [r4, #144]	; 0x90
   1ef18:	e594e0b0 	ldr	lr, [r4, #176]	; 0xb0
   1ef1c:	e594208c 	ldr	r2, [r4, #140]	; 0x8c
   1ef20:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   1ef24:	e041100c 	sub	r1, r1, ip
   1ef28:	e042200c 	sub	r2, r2, ip
   1ef2c:	e043300e 	sub	r3, r3, lr
   1ef30:	e5d4e02a 	ldrb	lr, [r4, #42]	; 0x2a
   1ef34:	e58d1008 	str	r1, [sp, #8]
   1ef38:	e1d4c1b4 	ldrh	ip, [r4, #20]
   1ef3c:	e58d2004 	str	r2, [sp, #4]
   1ef40:	e59410ac 	ldr	r1, [r4, #172]	; 0xac
   1ef44:	e5942094 	ldr	r2, [r4, #148]	; 0x94
   1ef48:	e58d3010 	str	r3, [sp, #16]
   1ef4c:	e58d1014 	str	r1, [sp, #20]
   1ef50:	e58d200c 	str	r2, [sp, #12]
   1ef54:	e59f3018 	ldr	r3, [pc, #24]	; 1ef74 <CTCPConnection::DumpStatus()+0x74>
   1ef58:	e3a02004 	mov	r2, #4
   1ef5c:	e59f1014 	ldr	r1, [pc, #20]	; 1ef78 <CTCPConnection::DumpStatus()+0x78>
   1ef60:	e58de000 	str	lr, [sp]
   1ef64:	e58dc018 	str	ip, [sp, #24]
   1ef68:	eb001e38 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ef6c:	e28dd020 	add	sp, sp, #32
   1ef70:	e8bd8010 	pop	{r4, pc}
   1ef74:	00045ba4 	.word	0x00045ba4
   1ef78:	00045d68 	.word	0x00045d68

0001ef7c <CTCPConnection::NewState(TTCPState, unsigned int)>:
   1ef7c:	e92d4070 	push	{r4, r5, r6, lr}
   1ef80:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1ef84:	e24dd010 	sub	sp, sp, #16
   1ef88:	e353000a 	cmp	r3, #10
   1ef8c:	8a000015 	bhi	1efe8 <CTCPConnection::NewState(TTCPState, unsigned int)+0x6c>
   1ef90:	e351000a 	cmp	r1, #10
   1ef94:	e1a04001 	mov	r4, r1
   1ef98:	8a000016 	bhi	1eff8 <CTCPConnection::NewState(TTCPState, unsigned int)+0x7c>
   1ef9c:	e1a05000 	mov	r5, r0
   1efa0:	e1a06002 	mov	r6, r2
   1efa4:	eb001ee7 	bl	26b48 <CLogger::Get()>
   1efa8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1efac:	e59f1054 	ldr	r1, [pc, #84]	; 1f008 <CTCPConnection::NewState(TTCPState, unsigned int)+0x8c>
   1efb0:	e58d6008 	str	r6, [sp, #8]
   1efb4:	e081c104 	add	ip, r1, r4, lsl #2
   1efb8:	e0813103 	add	r3, r1, r3, lsl #2
   1efbc:	e5932048 	ldr	r2, [r3, #72]	; 0x48
   1efc0:	e59c3048 	ldr	r3, [ip, #72]	; 0x48
   1efc4:	e2811044 	add	r1, r1, #68	; 0x44
   1efc8:	e1cd20f0 	strd	r2, [sp]
   1efcc:	e3a02004 	mov	r2, #4
   1efd0:	e59f3034 	ldr	r3, [pc, #52]	; 1f00c <CTCPConnection::NewState(TTCPState, unsigned int)+0x90>
   1efd4:	eb001e1d 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1efd8:	e1a00004 	mov	r0, r4
   1efdc:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   1efe0:	e28dd010 	add	sp, sp, #16
   1efe4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1efe8:	e59f2020 	ldr	r2, [pc, #32]	; 1f010 <CTCPConnection::NewState(TTCPState, unsigned int)+0x94>
   1efec:	e59f1020 	ldr	r1, [pc, #32]	; 1f014 <CTCPConnection::NewState(TTCPState, unsigned int)+0x98>
   1eff0:	e59f0020 	ldr	r0, [pc, #32]	; 1f018 <CTCPConnection::NewState(TTCPState, unsigned int)+0x9c>
   1eff4:	eb0015eb 	bl	247a8 <assertion_failed>
   1eff8:	e59f201c 	ldr	r2, [pc, #28]	; 1f01c <CTCPConnection::NewState(TTCPState, unsigned int)+0xa0>
   1effc:	e59f1010 	ldr	r1, [pc, #16]	; 1f014 <CTCPConnection::NewState(TTCPState, unsigned int)+0x98>
   1f000:	e59f0018 	ldr	r0, [pc, #24]	; 1f020 <CTCPConnection::NewState(TTCPState, unsigned int)+0xa4>
   1f004:	eb0015e7 	bl	247a8 <assertion_failed>
   1f008:	00045d24 	.word	0x00045d24
   1f00c:	00045c40 	.word	0x00045c40
   1f010:	00000647 	.word	0x00000647
   1f014:	00045afc 	.word	0x00045afc
   1f018:	00045bdc 	.word	0x00045bdc
   1f01c:	00000648 	.word	0x00000648
   1f020:	00045c10 	.word	0x00045c10

0001f024 <CTCPConnection::UnexpectedState(unsigned int)>:
   1f024:	e92d4030 	push	{r4, r5, lr}
   1f028:	e1a05000 	mov	r5, r0
   1f02c:	e1a04001 	mov	r4, r1
   1f030:	e24dd00c 	sub	sp, sp, #12
   1f034:	ebffffb1 	bl	1ef00 <CTCPConnection::DumpStatus()>
   1f038:	eb001ec2 	bl	26b48 <CLogger::Get()>
   1f03c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f040:	e3a02000 	mov	r2, #0
   1f044:	e88d0018 	stm	sp, {r3, r4}
   1f048:	e59f100c 	ldr	r1, [pc, #12]	; 1f05c <CTCPConnection::UnexpectedState(unsigned int)+0x38>
   1f04c:	e59f300c 	ldr	r3, [pc, #12]	; 1f060 <CTCPConnection::UnexpectedState(unsigned int)+0x3c>
   1f050:	eb001dfe 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f054:	e28dd00c 	add	sp, sp, #12
   1f058:	e8bd8030 	pop	{r4, r5, pc}
   1f05c:	00045d68 	.word	0x00045d68
   1f060:	00045c5c 	.word	0x00045c5c

0001f064 <CTCPConnection::Connect()>:
   1f064:	e92d4010 	push	{r4, lr}
   1f068:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1f06c:	e1a04000 	mov	r4, r0
   1f070:	e3530000 	cmp	r3, #0
   1f074:	e24dd008 	sub	sp, sp, #8
   1f078:	ba000013 	blt	1f0cc <CTCPConnection::Connect()+0x68>
   1f07c:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1f080:	e353000a 	cmp	r3, #10
   1f084:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f088:	ea00000f 	b	1f0cc <CTCPConnection::Connect()+0x68>
   1f08c:	0001f0ec 	.word	0x0001f0ec
   1f090:	0001f0d8 	.word	0x0001f0d8
   1f094:	0001f0b8 	.word	0x0001f0b8
   1f098:	0001f0b8 	.word	0x0001f0b8
   1f09c:	0001f0cc 	.word	0x0001f0cc
   1f0a0:	0001f0d8 	.word	0x0001f0d8
   1f0a4:	0001f0d8 	.word	0x0001f0d8
   1f0a8:	0001f0d8 	.word	0x0001f0d8
   1f0ac:	0001f0d8 	.word	0x0001f0d8
   1f0b0:	0001f0d8 	.word	0x0001f0d8
   1f0b4:	0001f0d8 	.word	0x0001f0d8
   1f0b8:	e2800068 	add	r0, r0, #104	; 0x68
   1f0bc:	e58d0004 	str	r0, [sp, #4]
   1f0c0:	eb001532 	bl	24590 <CSynchronizationEvent::Clear()>
   1f0c4:	e59d0004 	ldr	r0, [sp, #4]
   1f0c8:	eb001541 	bl	245d4 <CSynchronizationEvent::Wait()>
   1f0cc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f0d0:	e28dd008 	add	sp, sp, #8
   1f0d4:	e8bd8010 	pop	{r4, pc}
   1f0d8:	e3a010f9 	mov	r1, #249	; 0xf9
   1f0dc:	ebffffd0 	bl	1f024 <CTCPConnection::UnexpectedState(unsigned int)>
   1f0e0:	e3e00000 	mvn	r0, #0
   1f0e4:	e28dd008 	add	sp, sp, #8
   1f0e8:	e8bd8010 	pop	{r4, pc}
   1f0ec:	e3e00000 	mvn	r0, #0
   1f0f0:	eafffff6 	b	1f0d0 <CTCPConnection::Connect()+0x6c>

0001f0f4 <CTCPConnection::Accept(CIPAddress*, unsigned short*)>:
   1f0f4:	e92d4070 	push	{r4, r5, r6, lr}
   1f0f8:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1f0fc:	e1a04000 	mov	r4, r0
   1f100:	e3530000 	cmp	r3, #0
   1f104:	e24dd008 	sub	sp, sp, #8
   1f108:	ba000024 	blt	1f1a0 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xac>
   1f10c:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1f110:	e1a05001 	mov	r5, r1
   1f114:	e1a06002 	mov	r6, r2
   1f118:	e353000a 	cmp	r3, #10
   1f11c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f120:	ea000012 	b	1f170 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x7c>
   1f124:	0001f150 	.word	0x0001f150
   1f128:	0001f15c 	.word	0x0001f15c
   1f12c:	0001f1ac 	.word	0x0001f1ac
   1f130:	0001f170 	.word	0x0001f170
   1f134:	0001f170 	.word	0x0001f170
   1f138:	0001f150 	.word	0x0001f150
   1f13c:	0001f150 	.word	0x0001f150
   1f140:	0001f150 	.word	0x0001f150
   1f144:	0001f150 	.word	0x0001f150
   1f148:	0001f150 	.word	0x0001f150
   1f14c:	0001f150 	.word	0x0001f150
   1f150:	e3e00000 	mvn	r0, #0
   1f154:	e28dd008 	add	sp, sp, #8
   1f158:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f15c:	e2800068 	add	r0, r0, #104	; 0x68
   1f160:	e58d0004 	str	r0, [sp, #4]
   1f164:	eb001509 	bl	24590 <CSynchronizationEvent::Clear()>
   1f168:	e59d0004 	ldr	r0, [sp, #4]
   1f16c:	eb001518 	bl	245d4 <CSynchronizationEvent::Wait()>
   1f170:	e3550000 	cmp	r5, #0
   1f174:	0a000011 	beq	1f1c0 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xcc>
   1f178:	e1a00005 	mov	r0, r5
   1f17c:	e284100c 	add	r1, r4, #12
   1f180:	eb000782 	bl	20f90 <CIPAddress::Set(CIPAddress const&)>
   1f184:	e3560000 	cmp	r6, #0
   1f188:	0a000010 	beq	1f1d0 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xdc>
   1f18c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f190:	e1d431b4 	ldrh	r3, [r4, #20]
   1f194:	e1c630b0 	strh	r3, [r6]
   1f198:	e28dd008 	add	sp, sp, #8
   1f19c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f1a0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f1a4:	e28dd008 	add	sp, sp, #8
   1f1a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f1ac:	e59f102c 	ldr	r1, [pc, #44]	; 1f1e0 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xec>
   1f1b0:	ebffff9b 	bl	1f024 <CTCPConnection::UnexpectedState(unsigned int)>
   1f1b4:	e3e00000 	mvn	r0, #0
   1f1b8:	e28dd008 	add	sp, sp, #8
   1f1bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f1c0:	e59f201c 	ldr	r2, [pc, #28]	; 1f1e4 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xf0>
   1f1c4:	e59f101c 	ldr	r1, [pc, #28]	; 1f1e8 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xf4>
   1f1c8:	e59f001c 	ldr	r0, [pc, #28]	; 1f1ec <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xf8>
   1f1cc:	eb001575 	bl	247a8 <assertion_failed>
   1f1d0:	e59f2018 	ldr	r2, [pc, #24]	; 1f1f0 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xfc>
   1f1d4:	e59f100c 	ldr	r1, [pc, #12]	; 1f1e8 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xf4>
   1f1d8:	e59f0014 	ldr	r0, [pc, #20]	; 1f1f4 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x100>
   1f1dc:	eb001571 	bl	247a8 <assertion_failed>
   1f1e0:	0000010d 	.word	0x0000010d
   1f1e4:	00000123 	.word	0x00000123
   1f1e8:	00045afc 	.word	0x00045afc
   1f1ec:	00045434 	.word	0x00045434
   1f1f0:	00000126 	.word	0x00000126
   1f1f4:	00045444 	.word	0x00045444

0001f1f8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1f1f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1fc:	e24dd024 	sub	sp, sp, #36	; 0x24
   1f200:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   1f204:	e35c0006 	cmp	ip, #6
   1f208:	1a00000f 	bne	1f24c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   1f20c:	e3520013 	cmp	r2, #19
   1f210:	e1a06002 	mov	r6, r2
   1f214:	9a00000f 	bls	1f258 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x60>
   1f218:	e3510000 	cmp	r1, #0
   1f21c:	e1a04001 	mov	r4, r1
   1f220:	0a00010b 	beq	1f654 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x45c>
   1f224:	e1a05000 	mov	r5, r0
   1f228:	e1a07003 	mov	r7, r3
   1f22c:	e5d10003 	ldrb	r0, [r1, #3]
   1f230:	e5d13002 	ldrb	r3, [r1, #2]
   1f234:	e1d511b6 	ldrh	r1, [r5, #22]
   1f238:	e1833400 	orr	r3, r3, r0, lsl #8
   1f23c:	e6bf3fb3 	rev16	r3, r3
   1f240:	e6ff3073 	uxth	r3, r3
   1f244:	e1510003 	cmp	r1, r3
   1f248:	0a000005 	beq	1f264 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6c>
   1f24c:	e3a00000 	mov	r0, #0
   1f250:	e28dd024 	add	sp, sp, #36	; 0x24
   1f254:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f258:	e3e00000 	mvn	r0, #0
   1f25c:	e28dd024 	add	sp, sp, #36	; 0x24
   1f260:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f264:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f268:	e3530001 	cmp	r3, #1
   1f26c:	0a00004a 	beq	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1a4>
   1f270:	e1a01007 	mov	r1, r7
   1f274:	e285000c 	add	r0, r5, #12
   1f278:	eb0006d7 	bl	20ddc <CIPAddress::operator!=(CIPAddress const&) const>
   1f27c:	e3500000 	cmp	r0, #0
   1f280:	1afffff1 	bne	1f24c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   1f284:	e5d43000 	ldrb	r3, [r4]
   1f288:	e5d40001 	ldrb	r0, [r4, #1]
   1f28c:	e1d511b4 	ldrh	r1, [r5, #20]
   1f290:	e1833400 	orr	r3, r3, r0, lsl #8
   1f294:	e6bf3fb3 	rev16	r3, r3
   1f298:	e6ff3073 	uxth	r3, r3
   1f29c:	e1510003 	cmp	r1, r3
   1f2a0:	0285a01c 	addeq	sl, r5, #28
   1f2a4:	1affffe8 	bne	1f24c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   1f2a8:	e1a02006 	mov	r2, r6
   1f2ac:	e1a01004 	mov	r1, r4
   1f2b0:	e1a0000a 	mov	r0, sl
   1f2b4:	eb0008fc 	bl	216ac <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1f2b8:	e3500000 	cmp	r0, #0
   1f2bc:	1affffe2 	bne	1f24c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   1f2c0:	e5d41005 	ldrb	r1, [r4, #5]
   1f2c4:	e5d43004 	ldrb	r3, [r4, #4]
   1f2c8:	e5d4c006 	ldrb	ip, [r4, #6]
   1f2cc:	e1833401 	orr	r3, r3, r1, lsl #8
   1f2d0:	e183380c 	orr	r3, r3, ip, lsl #16
   1f2d4:	e5d4c007 	ldrb	ip, [r4, #7]
   1f2d8:	e5d4100c 	ldrb	r1, [r4, #12]
   1f2dc:	e5d48008 	ldrb	r8, [r4, #8]
   1f2e0:	e5d4e009 	ldrb	lr, [r4, #9]
   1f2e4:	e5d4900d 	ldrb	r9, [r4, #13]
   1f2e8:	e5d4000a 	ldrb	r0, [r4, #10]
   1f2ec:	e1833c0c 	orr	r3, r3, ip, lsl #24
   1f2f0:	e1819409 	orr	r9, r1, r9, lsl #8
   1f2f4:	e188840e 	orr	r8, r8, lr, lsl #8
   1f2f8:	e1a01221 	lsr	r1, r1, #4
   1f2fc:	e6bf3f33 	rev	r3, r3
   1f300:	e2192c02 	ands	r2, r9, #512	; 0x200
   1f304:	e0466101 	sub	r6, r6, r1, lsl #2
   1f308:	e1888800 	orr	r8, r8, r0, lsl #16
   1f30c:	e5d4000b 	ldrb	r0, [r4, #11]
   1f310:	e58d300c 	str	r3, [sp, #12]
   1f314:	e1a03101 	lsl	r3, r1, #2
   1f318:	e58d3014 	str	r3, [sp, #20]
   1f31c:	1286b001 	addne	fp, r6, #1
   1f320:	01a0b006 	moveq	fp, r6
   1f324:	e2193c01 	ands	r3, r9, #256	; 0x100
   1f328:	e58d2018 	str	r2, [sp, #24]
   1f32c:	e58d301c 	str	r3, [sp, #28]
   1f330:	e5d4300e 	ldrb	r3, [r4, #14]
   1f334:	e5d4200f 	ldrb	r2, [r4, #15]
   1f338:	e1888c00 	orr	r8, r8, r0, lsl #24
   1f33c:	e1833402 	orr	r3, r3, r2, lsl #8
   1f340:	e6bf3fb3 	rev16	r3, r3
   1f344:	e6ff3073 	uxth	r3, r3
   1f348:	e1a01004 	mov	r1, r4
   1f34c:	e1a00005 	mov	r0, r5
   1f350:	e58d3010 	str	r3, [sp, #16]
   1f354:	128bb001 	addne	fp, fp, #1
   1f358:	ebfffc5e 	bl	1e4d8 <CTCPConnection::ScanOptions(TTCPHeader*)>
   1f35c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f360:	e6bf8f38 	rev	r8, r8
   1f364:	e353000a 	cmp	r3, #10
   1f368:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f36c:	ea000027 	b	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f370:	0001f4f8 	.word	0x0001f4f8
   1f374:	0001f558 	.word	0x0001f558
   1f378:	0001f418 	.word	0x0001f418
   1f37c:	0001f3bc 	.word	0x0001f3bc
   1f380:	0001f3bc 	.word	0x0001f3bc
   1f384:	0001f3bc 	.word	0x0001f3bc
   1f388:	0001f3bc 	.word	0x0001f3bc
   1f38c:	0001f3bc 	.word	0x0001f3bc
   1f390:	0001f3bc 	.word	0x0001f3bc
   1f394:	0001f3bc 	.word	0x0001f3bc
   1f398:	0001f3bc 	.word	0x0001f3bc
   1f39c:	e5d4300d 	ldrb	r3, [r4, #13]
   1f3a0:	e3130002 	tst	r3, #2
   1f3a4:	0affffa8 	beq	1f24c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   1f3a8:	e285a01c 	add	sl, r5, #28
   1f3ac:	e1a0000a 	mov	r0, sl
   1f3b0:	e1a01007 	mov	r1, r7
   1f3b4:	eb000891 	bl	21600 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f3b8:	eaffffba 	b	1f2a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb0>
   1f3bc:	e59530ac 	ldr	r3, [r5, #172]	; 0xac
   1f3c0:	e3530000 	cmp	r3, #0
   1f3c4:	0a0000c3 	beq	1f6d8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4e0>
   1f3c8:	e59520a8 	ldr	r2, [r5, #168]	; 0xa8
   1f3cc:	e59d000c 	ldr	r0, [sp, #12]
   1f3d0:	e35b0000 	cmp	fp, #0
   1f3d4:	e0421000 	sub	r1, r2, r0
   1f3d8:	1a0000a1 	bne	1f664 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x46c>
   1f3dc:	e3510000 	cmp	r1, #0
   1f3e0:	da0001b6 	ble	1fac0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8c8>
   1f3e4:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f3e8:	e3530003 	cmp	r3, #3
   1f3ec:	0a0000a8 	beq	1f694 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x49c>
   1f3f0:	e3a02000 	mov	r2, #0
   1f3f4:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f3f8:	e58d2004 	str	r2, [sp, #4]
   1f3fc:	e58d2000 	str	r2, [sp]
   1f400:	e1a00005 	mov	r0, r5
   1f404:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f408:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f40c:	ebfffbda 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f410:	e3a00001 	mov	r0, #1
   1f414:	eaffff8d 	b	1f250 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f418:	e3190a01 	tst	r9, #4096	; 0x1000
   1f41c:	1a0000b4 	bne	1f6f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4fc>
   1f420:	e1a03529 	lsr	r3, r9, #10
   1f424:	e2192c02 	ands	r2, r9, #512	; 0x200
   1f428:	e2233001 	eor	r3, r3, #1
   1f42c:	e3520000 	cmp	r2, #0
   1f430:	03a03000 	moveq	r3, #0
   1f434:	12033001 	andne	r3, r3, #1
   1f438:	e3530000 	cmp	r3, #0
   1f43c:	0afffff3 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f440:	e59d200c 	ldr	r2, [sp, #12]
   1f444:	e2823001 	add	r3, r2, #1
   1f448:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1f44c:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f450:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1f454:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f458:	e0423003 	sub	r3, r2, r3
   1f45c:	e3530000 	cmp	r3, #0
   1f460:	ba0001b2 	blt	1fb30 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x938>
   1f464:	e3a07000 	mov	r7, #0
   1f468:	e3a03003 	mov	r3, #3
   1f46c:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f470:	e58d7004 	str	r7, [sp, #4]
   1f474:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   1f478:	e58d7000 	str	r7, [sp]
   1f47c:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f480:	e3a01c12 	mov	r1, #4608	; 0x1200
   1f484:	e28580b8 	add	r8, r5, #184	; 0xb8
   1f488:	e1a00005 	mov	r0, r5
   1f48c:	ebfffbba 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f490:	e3a02001 	mov	r2, #1
   1f494:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1f498:	e1a00008 	mov	r0, r8
   1f49c:	e58d800c 	str	r8, [sp, #12]
   1f4a0:	eb000466 	bl	20640 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1f4a4:	e3a03005 	mov	r3, #5
   1f4a8:	e59d000c 	ldr	r0, [sp, #12]
   1f4ac:	e5853060 	str	r3, [r5, #96]	; 0x60
   1f4b0:	eb000444 	bl	205c8 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1f4b4:	e3a01001 	mov	r1, #1
   1f4b8:	e1a02000 	mov	r2, r0
   1f4bc:	e1a00005 	mov	r0, r5
   1f4c0:	ebfffd01 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1f4c4:	e59d301c 	ldr	r3, [sp, #28]
   1f4c8:	e1530007 	cmp	r3, r7
   1f4cc:	1a0001b3 	bne	1fba0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9a8>
   1f4d0:	e1560007 	cmp	r6, r7
   1f4d4:	0affffcd 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f4d8:	e59d3014 	ldr	r3, [sp, #20]
   1f4dc:	e285003c 	add	r0, r5, #60	; 0x3c
   1f4e0:	e0841003 	add	r1, r4, r3
   1f4e4:	e1a02006 	mov	r2, r6
   1f4e8:	e3a03000 	mov	r3, #0
   1f4ec:	eb000795 	bl	21348 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1f4f0:	e3a00001 	mov	r0, #1
   1f4f4:	eaffff55 	b	1f250 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f4f8:	e2196b01 	ands	r6, r9, #1024	; 0x400
   1f4fc:	1affffc3 	bne	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f500:	e2199a01 	ands	r9, r9, #4096	; 0x1000
   1f504:	e1a01007 	mov	r1, r7
   1f508:	e285000c 	add	r0, r5, #12
   1f50c:	0a0000c7 	beq	1f830 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x638>
   1f510:	eb00069e 	bl	20f90 <CIPAddress::Set(CIPAddress const&)>
   1f514:	e5d43000 	ldrb	r3, [r4]
   1f518:	e5d42001 	ldrb	r2, [r4, #1]
   1f51c:	e1a01007 	mov	r1, r7
   1f520:	e1833402 	orr	r3, r3, r2, lsl #8
   1f524:	e6bf3fb3 	rev16	r3, r3
   1f528:	e1c531b4 	strh	r3, [r5, #20]
   1f52c:	e1a0000a 	mov	r0, sl
   1f530:	eb000832 	bl	21600 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f534:	e1a03006 	mov	r3, r6
   1f538:	e58d6004 	str	r6, [sp, #4]
   1f53c:	e58d6000 	str	r6, [sp]
   1f540:	e1a02008 	mov	r2, r8
   1f544:	e1a00005 	mov	r0, r5
   1f548:	e3a01b01 	mov	r1, #1024	; 0x400
   1f54c:	ebfffb8a 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f550:	e3a00001 	mov	r0, #1
   1f554:	eaffff3d 	b	1f250 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f558:	e2193b01 	ands	r3, r9, #1024	; 0x400
   1f55c:	1affffab 	bne	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f560:	e2199a01 	ands	r9, r9, #4096	; 0x1000
   1f564:	1a0000c3 	bne	1f878 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x680>
   1f568:	e59d3018 	ldr	r3, [sp, #24]
   1f56c:	e3530000 	cmp	r3, #0
   1f570:	0affffa6 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f574:	e59f39e8 	ldr	r3, [pc, #2536]	; 1ff64 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd6c>
   1f578:	e5933000 	ldr	r3, [r3]
   1f57c:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   1f580:	2a0000a8 	bcs	1f828 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x630>
   1f584:	e59d200c 	ldr	r2, [sp, #12]
   1f588:	e59d1010 	ldr	r1, [sp, #16]
   1f58c:	e2823001 	add	r3, r2, #1
   1f590:	e35b0000 	cmp	fp, #0
   1f594:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1f598:	e5851094 	str	r1, [r5, #148]	; 0x94
   1f59c:	e585209c 	str	r2, [r5, #156]	; 0x9c
   1f5a0:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f5a4:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1f5a8:	0a0001b5 	beq	1fc84 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa8c>
   1f5ac:	e3560000 	cmp	r6, #0
   1f5b0:	1a000189 	bne	1fbdc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9e4>
   1f5b4:	e1a00005 	mov	r0, r5
   1f5b8:	ebfffbfb 	bl	1e5ac <CTCPConnection::CalculateISN()>
   1f5bc:	e28560b8 	add	r6, r5, #184	; 0xb8
   1f5c0:	e1a01000 	mov	r1, r0
   1f5c4:	e58500a4 	str	r0, [r5, #164]	; 0xa4
   1f5c8:	e1a00006 	mov	r0, r6
   1f5cc:	eb0003ff 	bl	205d0 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1f5d0:	e1a01007 	mov	r1, r7
   1f5d4:	e285000c 	add	r0, r5, #12
   1f5d8:	eb00066c 	bl	20f90 <CIPAddress::Set(CIPAddress const&)>
   1f5dc:	e5d42001 	ldrb	r2, [r4, #1]
   1f5e0:	e5d43000 	ldrb	r3, [r4]
   1f5e4:	e1a01007 	mov	r1, r7
   1f5e8:	e1833402 	orr	r3, r3, r2, lsl #8
   1f5ec:	e6bf3fb3 	rev16	r3, r3
   1f5f0:	e1a0000a 	mov	r0, sl
   1f5f4:	e1c531b4 	strh	r3, [r5, #20]
   1f5f8:	eb000800 	bl	21600 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f5fc:	e3a02000 	mov	r2, #0
   1f600:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f604:	e58d2004 	str	r2, [sp, #4]
   1f608:	e58d2000 	str	r2, [sp]
   1f60c:	e3a01c12 	mov	r1, #4608	; 0x1200
   1f610:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1f614:	e1a00005 	mov	r0, r5
   1f618:	ebfffb57 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f61c:	e1a00006 	mov	r0, r6
   1f620:	e3a02001 	mov	r2, #1
   1f624:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1f628:	eb000404 	bl	20640 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1f62c:	e3a02003 	mov	r2, #3
   1f630:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1f634:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1f638:	e2832001 	add	r2, r3, #1
   1f63c:	e2850068 	add	r0, r5, #104	; 0x68
   1f640:	e585308c 	str	r3, [r5, #140]	; 0x8c
   1f644:	e5852090 	str	r2, [r5, #144]	; 0x90
   1f648:	eb0013d3 	bl	2459c <CSynchronizationEvent::Set()>
   1f64c:	e3a00001 	mov	r0, #1
   1f650:	eafffefe 	b	1f250 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f654:	e3a02f9f 	mov	r2, #636	; 0x27c
   1f658:	e59f1908 	ldr	r1, [pc, #2312]	; 1ff68 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd70>
   1f65c:	e59f0908 	ldr	r0, [pc, #2312]	; 1ff6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd74>
   1f660:	eb001450 	bl	247a8 <assertion_failed>
   1f664:	e3510000 	cmp	r1, #0
   1f668:	da000119 	ble	1fad4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8dc>
   1f66c:	e59d100c 	ldr	r1, [sp, #12]
   1f670:	e081000b 	add	r0, r1, fp
   1f674:	e2821001 	add	r1, r2, #1
   1f678:	e0411000 	sub	r1, r1, r0
   1f67c:	e3510000 	cmp	r1, #0
   1f680:	caffff57 	bgt	1f3e4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ec>
   1f684:	e0833002 	add	r3, r3, r2
   1f688:	e1e03003 	mvn	r3, r3
   1f68c:	e1730000 	cmn	r3, r0
   1f690:	5affff53 	bpl	1f3e4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ec>
   1f694:	e3190b01 	tst	r9, #1024	; 0x400
   1f698:	0a000044 	beq	1f7b0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5b8>
   1f69c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f6a0:	e3530007 	cmp	r3, #7
   1f6a4:	e6ef3073 	uxtb	r3, r3
   1f6a8:	8a000037 	bhi	1f78c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x594>
   1f6ac:	e3530003 	cmp	r3, #3
   1f6b0:	8a000115 	bhi	1fb0c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x914>
   1f6b4:	1a00010f 	bne	1faf8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x900>
   1f6b8:	e2850048 	add	r0, r5, #72	; 0x48
   1f6bc:	eb0003a4 	bl	20554 <CRetransmissionQueue::Flush()>
   1f6c0:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   1f6c4:	e3530000 	cmp	r3, #0
   1f6c8:	1a00014a 	bne	1fbf8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa00>
   1f6cc:	e3a00001 	mov	r0, #1
   1f6d0:	e5c5002a 	strb	r0, [r5, #42]	; 0x2a
   1f6d4:	eafffedd 	b	1f250 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f6d8:	e35b0000 	cmp	fp, #0
   1f6dc:	1affff40 	bne	1f3e4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ec>
   1f6e0:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f6e4:	e59d200c 	ldr	r2, [sp, #12]
   1f6e8:	e1520003 	cmp	r2, r3
   1f6ec:	1affff3c 	bne	1f3e4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ec>
   1f6f0:	eaffffe7 	b	1f694 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x49c>
   1f6f4:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1f6f8:	e0433008 	sub	r3, r3, r8
   1f6fc:	e3530000 	cmp	r3, #0
   1f700:	aa00001c 	bge	1f778 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x580>
   1f704:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f708:	e0483003 	sub	r3, r8, r3
   1f70c:	e3530000 	cmp	r3, #0
   1f710:	ca000018 	bgt	1f778 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x580>
   1f714:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f718:	e0433008 	sub	r3, r3, r8
   1f71c:	e3530000 	cmp	r3, #0
   1f720:	caffff3a 	bgt	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f724:	e3190b01 	tst	r9, #1024	; 0x400
   1f728:	1a0000db 	bne	1fa9c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8a4>
   1f72c:	e2193c02 	ands	r3, r9, #512	; 0x200
   1f730:	e3530000 	cmp	r3, #0
   1f734:	0affff35 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f738:	e59d200c 	ldr	r2, [sp, #12]
   1f73c:	e1a01008 	mov	r1, r8
   1f740:	e2823001 	add	r3, r2, #1
   1f744:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1f748:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f74c:	e28500b8 	add	r0, r5, #184	; 0xb8
   1f750:	eb00041e 	bl	207d0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1f754:	e595108c 	ldr	r1, [r5, #140]	; 0x8c
   1f758:	e0481001 	sub	r1, r8, r1
   1f75c:	e3510001 	cmp	r1, #1
   1f760:	9a000002 	bls	1f770 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x578>
   1f764:	e2411001 	sub	r1, r1, #1
   1f768:	e2850048 	add	r0, r5, #72	; 0x48
   1f76c:	eb000354 	bl	204c4 <CRetransmissionQueue::Advance(unsigned int)>
   1f770:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1f774:	eaffff35 	b	1f450 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x258>
   1f778:	e2193b01 	ands	r3, r9, #1024	; 0x400
   1f77c:	1affff23 	bne	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f780:	e58d3004 	str	r3, [sp, #4]
   1f784:	e58d3000 	str	r3, [sp]
   1f788:	eaffff6c 	b	1f540 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x348>
   1f78c:	e2433008 	sub	r3, r3, #8
   1f790:	e3530002 	cmp	r3, #2
   1f794:	8a0000d7 	bhi	1faf8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x900>
   1f798:	e3a03000 	mov	r3, #0
   1f79c:	e2850068 	add	r0, r5, #104	; 0x68
   1f7a0:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f7a4:	eb00137c 	bl	2459c <CSynchronizationEvent::Set()>
   1f7a8:	e3a00001 	mov	r0, #1
   1f7ac:	eafffea7 	b	1f250 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f7b0:	e2193c02 	ands	r3, r9, #512	; 0x200
   1f7b4:	e3530000 	cmp	r3, #0
   1f7b8:	0a00003c 	beq	1f8b0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b8>
   1f7bc:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f7c0:	e3530003 	cmp	r3, #3
   1f7c4:	1a000002 	bne	1f7d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5dc>
   1f7c8:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   1f7cc:	e3530000 	cmp	r3, #0
   1f7d0:	0affffbd 	beq	1f6cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4d4>
   1f7d4:	e3a04000 	mov	r4, #0
   1f7d8:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f7dc:	e3a01b01 	mov	r1, #1024	; 0x400
   1f7e0:	e1a03004 	mov	r3, r4
   1f7e4:	e1a00005 	mov	r0, r5
   1f7e8:	e58d4004 	str	r4, [sp, #4]
   1f7ec:	e58d4000 	str	r4, [sp]
   1f7f0:	ebfffae1 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f7f4:	e3e03000 	mvn	r3, #0
   1f7f8:	e2850048 	add	r0, r5, #72	; 0x48
   1f7fc:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1f800:	eb000353 	bl	20554 <CRetransmissionQueue::Flush()>
   1f804:	e2850030 	add	r0, r5, #48	; 0x30
   1f808:	eb00069a 	bl	21278 <CNetQueue::Flush()>
   1f80c:	e285003c 	add	r0, r5, #60	; 0x3c
   1f810:	eb000698 	bl	21278 <CNetQueue::Flush()>
   1f814:	e2850068 	add	r0, r5, #104	; 0x68
   1f818:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   1f81c:	eb00135e 	bl	2459c <CSynchronizationEvent::Set()>
   1f820:	e3a00001 	mov	r0, #1
   1f824:	eafffe89 	b	1f250 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f828:	e1a01007 	mov	r1, r7
   1f82c:	e285000c 	add	r0, r5, #12
   1f830:	eb0005d6 	bl	20f90 <CIPAddress::Set(CIPAddress const&)>
   1f834:	e5d42001 	ldrb	r2, [r4, #1]
   1f838:	e5d43000 	ldrb	r3, [r4]
   1f83c:	e1a01007 	mov	r1, r7
   1f840:	e1833402 	orr	r3, r3, r2, lsl #8
   1f844:	e6bf3fb3 	rev16	r3, r3
   1f848:	e1a0000a 	mov	r0, sl
   1f84c:	e1c531b4 	strh	r3, [r5, #20]
   1f850:	eb00076a 	bl	21600 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f854:	e59d300c 	ldr	r3, [sp, #12]
   1f858:	e1a02009 	mov	r2, r9
   1f85c:	e1a00005 	mov	r0, r5
   1f860:	e3a01b05 	mov	r1, #5120	; 0x1400
   1f864:	e58d9004 	str	r9, [sp, #4]
   1f868:	e58d9000 	str	r9, [sp]
   1f86c:	e083300b 	add	r3, r3, fp
   1f870:	ebfffac1 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f874:	eafffee5 	b	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f878:	e1a01007 	mov	r1, r7
   1f87c:	e285000c 	add	r0, r5, #12
   1f880:	e58d300c 	str	r3, [sp, #12]
   1f884:	eb0005c1 	bl	20f90 <CIPAddress::Set(CIPAddress const&)>
   1f888:	e5d40001 	ldrb	r0, [r4, #1]
   1f88c:	e5d42000 	ldrb	r2, [r4]
   1f890:	e1a01007 	mov	r1, r7
   1f894:	e1822400 	orr	r2, r2, r0, lsl #8
   1f898:	e6bf2fb2 	rev16	r2, r2
   1f89c:	e1a0000a 	mov	r0, sl
   1f8a0:	e1c521b4 	strh	r2, [r5, #20]
   1f8a4:	eb000755 	bl	21600 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f8a8:	e59d300c 	ldr	r3, [sp, #12]
   1f8ac:	eaffffb3 	b	1f780 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x588>
   1f8b0:	e3190a01 	tst	r9, #4096	; 0x1000
   1f8b4:	0afffed5 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f8b8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f8bc:	e2433003 	sub	r3, r3, #3
   1f8c0:	e3530007 	cmp	r3, #7
   1f8c4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f8c8:	ea000199 	b	1ff34 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd3c>
   1f8cc:	0001f93c 	.word	0x0001f93c
   1f8d0:	0001f8ec 	.word	0x0001f8ec
   1f8d4:	0001f8ec 	.word	0x0001f8ec
   1f8d8:	0001f8ec 	.word	0x0001f8ec
   1f8dc:	0001f8ec 	.word	0x0001f8ec
   1f8e0:	0001f8ec 	.word	0x0001f8ec
   1f8e4:	0001fa74 	.word	0x0001fa74
   1f8e8:	0001fa30 	.word	0x0001fa30
   1f8ec:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f8f0:	e0532008 	subs	r2, r3, r8
   1f8f4:	4a0000e8 	bmi	1fc9c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xaa4>
   1f8f8:	e0483003 	sub	r3, r8, r3
   1f8fc:	e3530000 	cmp	r3, #0
   1f900:	c5952090 	ldrgt	r2, [r5, #144]	; 0x90
   1f904:	da0000ec 	ble	1fcbc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xac4>
   1f908:	e0423008 	sub	r3, r2, r8
   1f90c:	e3530000 	cmp	r3, #0
   1f910:	ba000140 	blt	1fe18 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc20>
   1f914:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f918:	e2433004 	sub	r3, r3, #4
   1f91c:	e3530004 	cmp	r3, #4
   1f920:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f924:	ea00018a 	b	1ff54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd5c>
   1f928:	0001f978 	.word	0x0001f978
   1f92c:	0001fe54 	.word	0x0001fe54
   1f930:	0001fe98 	.word	0x0001fe98
   1f934:	0001f978 	.word	0x0001f978
   1f938:	0001feb4 	.word	0x0001feb4
   1f93c:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f940:	e0433008 	sub	r3, r3, r8
   1f944:	e3530000 	cmp	r3, #0
   1f948:	ca000003 	bgt	1f95c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x764>
   1f94c:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f950:	e0483003 	sub	r3, r8, r3
   1f954:	e3530000 	cmp	r3, #0
   1f958:	da000167 	ble	1fefc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd04>
   1f95c:	e3a03000 	mov	r3, #0
   1f960:	e1a02008 	mov	r2, r8
   1f964:	e3a01b01 	mov	r1, #1024	; 0x400
   1f968:	e1a00005 	mov	r0, r5
   1f96c:	e58d3004 	str	r3, [sp, #4]
   1f970:	e58d3000 	str	r3, [sp]
   1f974:	ebfffa80 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f978:	e35b0000 	cmp	fp, #0
   1f97c:	0afffea3 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f980:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f984:	e3530006 	cmp	r3, #6
   1f988:	e6ef3073 	uxtb	r3, r3
   1f98c:	8a000055 	bhi	1fae8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8f0>
   1f990:	e3530003 	cmp	r3, #3
   1f994:	8a00009f 	bhi	1fc18 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa20>
   1f998:	e1a00005 	mov	r0, r5
   1f99c:	e59f15cc 	ldr	r1, [pc, #1484]	; 1ff70 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd78>
   1f9a0:	ebfffd9f 	bl	1f024 <CTCPConnection::UnexpectedState(unsigned int)>
   1f9a4:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f9a8:	e3530000 	cmp	r3, #0
   1f9ac:	0afffe97 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f9b0:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f9b4:	e3530001 	cmp	r3, #1
   1f9b8:	0afffe94 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f9bc:	e5d5202a 	ldrb	r2, [r5, #42]	; 0x2a
   1f9c0:	e59d301c 	ldr	r3, [sp, #28]
   1f9c4:	e3530000 	cmp	r3, #0
   1f9c8:	13520002 	cmpne	r2, #2
   1f9cc:	03a02001 	moveq	r2, #1
   1f9d0:	13a02000 	movne	r2, #0
   1f9d4:	0afffe8d 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f9d8:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f9dc:	e58d2004 	str	r2, [sp, #4]
   1f9e0:	e2833001 	add	r3, r3, #1
   1f9e4:	e58d2000 	str	r2, [sp]
   1f9e8:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f9ec:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f9f0:	e1a00005 	mov	r0, r5
   1f9f4:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f9f8:	ebfffa5f 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f9fc:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1fa00:	e2433003 	sub	r3, r3, #3
   1fa04:	e3530007 	cmp	r3, #7
   1fa08:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1fa0c:	ea00014c 	b	1ff44 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd4c>
   1fa10:	0001fd7c 	.word	0x0001fd7c
   1fa14:	0001fd7c 	.word	0x0001fd7c
   1fa18:	0001fdc8 	.word	0x0001fdc8
   1fa1c:	0001fd94 	.word	0x0001fd94
   1fa20:	0001f410 	.word	0x0001f410
   1fa24:	0001f410 	.word	0x0001f410
   1fa28:	0001f410 	.word	0x0001f410
   1fa2c:	0001fe3c 	.word	0x0001fe3c
   1fa30:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fa34:	e1580003 	cmp	r8, r3
   1fa38:	1affffce 	bne	1f978 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fa3c:	e3a02000 	mov	r2, #0
   1fa40:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fa44:	e5c5205e 	strb	r2, [r5, #94]	; 0x5e
   1fa48:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fa4c:	e58d2004 	str	r2, [sp, #4]
   1fa50:	e58d2000 	str	r2, [sp]
   1fa54:	e1a00005 	mov	r0, r5
   1fa58:	e1a02008 	mov	r2, r8
   1fa5c:	ebfffa46 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fa60:	e3a01002 	mov	r1, #2
   1fa64:	e1a00005 	mov	r0, r5
   1fa68:	e59f2504 	ldr	r2, [pc, #1284]	; 1ff74 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd7c>
   1fa6c:	ebfffb96 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fa70:	eaffffc0 	b	1f978 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fa74:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fa78:	e1580003 	cmp	r8, r3
   1fa7c:	1affffbd 	bne	1f978 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fa80:	e3a03000 	mov	r3, #0
   1fa84:	e2850068 	add	r0, r5, #104	; 0x68
   1fa88:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1fa8c:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fa90:	eb0012c1 	bl	2459c <CSynchronizationEvent::Set()>
   1fa94:	e3a00001 	mov	r0, #1
   1fa98:	eafffdec 	b	1f250 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fa9c:	e3a03000 	mov	r3, #0
   1faa0:	e3e02000 	mvn	r2, #0
   1faa4:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1faa8:	e2850068 	add	r0, r5, #104	; 0x68
   1faac:	e5c5305d 	strb	r3, [r5, #93]	; 0x5d
   1fab0:	e585202c 	str	r2, [r5, #44]	; 0x2c
   1fab4:	eb0012b8 	bl	2459c <CSynchronizationEvent::Set()>
   1fab8:	e3a00001 	mov	r0, #1
   1fabc:	eafffde3 	b	1f250 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fac0:	e0833002 	add	r3, r3, r2
   1fac4:	e0403003 	sub	r3, r0, r3
   1fac8:	e3530000 	cmp	r3, #0
   1facc:	aafffe44 	bge	1f3e4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ec>
   1fad0:	eafffeef 	b	1f694 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x49c>
   1fad4:	e0831002 	add	r1, r3, r2
   1fad8:	e0401001 	sub	r1, r0, r1
   1fadc:	e3510000 	cmp	r1, #0
   1fae0:	aafffee1 	bge	1f66c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x474>
   1fae4:	eafffeea 	b	1f694 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x49c>
   1fae8:	e2433007 	sub	r3, r3, #7
   1faec:	e3530003 	cmp	r3, #3
   1faf0:	9affffab 	bls	1f9a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7ac>
   1faf4:	eaffffa7 	b	1f998 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7a0>
   1faf8:	e1a00005 	mov	r0, r5
   1fafc:	e59f1474 	ldr	r1, [pc, #1140]	; 1ff78 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd80>
   1fb00:	ebfffd47 	bl	1f024 <CTCPConnection::UnexpectedState(unsigned int)>
   1fb04:	e3a00001 	mov	r0, #1
   1fb08:	eafffdd0 	b	1f250 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fb0c:	e3e03000 	mvn	r3, #0
   1fb10:	e2850048 	add	r0, r5, #72	; 0x48
   1fb14:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1fb18:	eb00028d 	bl	20554 <CRetransmissionQueue::Flush()>
   1fb1c:	e2850030 	add	r0, r5, #48	; 0x30
   1fb20:	eb0005d4 	bl	21278 <CNetQueue::Flush()>
   1fb24:	e285003c 	add	r0, r5, #60	; 0x3c
   1fb28:	eb0005d2 	bl	21278 <CNetQueue::Flush()>
   1fb2c:	eaffff19 	b	1f798 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5a0>
   1fb30:	e3a07000 	mov	r7, #0
   1fb34:	e3a03004 	mov	r3, #4
   1fb38:	e3a01001 	mov	r1, #1
   1fb3c:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fb40:	e1a00005 	mov	r0, r5
   1fb44:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   1fb48:	ebfffab4 	bl	1e620 <CTCPConnection::StopTimer(unsigned int)>
   1fb4c:	e3a03005 	mov	r3, #5
   1fb50:	e2850068 	add	r0, r5, #104	; 0x68
   1fb54:	e5853060 	str	r3, [r5, #96]	; 0x60
   1fb58:	eb00128f 	bl	2459c <CSynchronizationEvent::Set()>
   1fb5c:	e59d3010 	ldr	r3, [sp, #16]
   1fb60:	e58d7004 	str	r7, [sp, #4]
   1fb64:	e58d7000 	str	r7, [sp]
   1fb68:	e5853094 	str	r3, [r5, #148]	; 0x94
   1fb6c:	e59d300c 	ldr	r3, [sp, #12]
   1fb70:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fb74:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1fb78:	e1a00005 	mov	r0, r5
   1fb7c:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fb80:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fb84:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1fb88:	ebfff9fb 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fb8c:	e2193c01 	ands	r3, r9, #256	; 0x100
   1fb90:	e1560007 	cmp	r6, r7
   1fb94:	01530007 	cmpeq	r3, r7
   1fb98:	1affff76 	bne	1f978 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fb9c:	eafffe1b 	b	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1fba0:	e58d7004 	str	r7, [sp, #4]
   1fba4:	e58d7000 	str	r7, [sp]
   1fba8:	e1a03007 	mov	r3, r7
   1fbac:	e3a01b01 	mov	r1, #1024	; 0x400
   1fbb0:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fbb4:	e1a00005 	mov	r0, r5
   1fbb8:	ebfff9ef 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fbbc:	e3e03000 	mvn	r3, #0
   1fbc0:	e5c5702a 	strb	r7, [r5, #42]	; 0x2a
   1fbc4:	e2850068 	add	r0, r5, #104	; 0x68
   1fbc8:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1fbcc:	eb001272 	bl	2459c <CSynchronizationEvent::Set()>
   1fbd0:	e3560000 	cmp	r6, #0
   1fbd4:	0afffe0d 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1fbd8:	eafffe3e 	b	1f4d8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x2e0>
   1fbdc:	e59d1014 	ldr	r1, [sp, #20]
   1fbe0:	e1a03009 	mov	r3, r9
   1fbe4:	e1a02006 	mov	r2, r6
   1fbe8:	e0841001 	add	r1, r4, r1
   1fbec:	e285003c 	add	r0, r5, #60	; 0x3c
   1fbf0:	eb0005d4 	bl	21348 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1fbf4:	eafffe6e 	b	1f5b4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3bc>
   1fbf8:	e3e02000 	mvn	r2, #0
   1fbfc:	e3a03000 	mov	r3, #0
   1fc00:	e585202c 	str	r2, [r5, #44]	; 0x2c
   1fc04:	e2850068 	add	r0, r5, #104	; 0x68
   1fc08:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fc0c:	eb001262 	bl	2459c <CSynchronizationEvent::Set()>
   1fc10:	e3a00001 	mov	r0, #1
   1fc14:	eafffd8d 	b	1f250 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fc18:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fc1c:	e59d200c 	ldr	r2, [sp, #12]
   1fc20:	e1520003 	cmp	r2, r3
   1fc24:	1a00001a 	bne	1fc94 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa9c>
   1fc28:	e3560000 	cmp	r6, #0
   1fc2c:	0affff5c 	beq	1f9a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7ac>
   1fc30:	e59d3014 	ldr	r3, [sp, #20]
   1fc34:	e1a02006 	mov	r2, r6
   1fc38:	e0841003 	add	r1, r4, r3
   1fc3c:	e285003c 	add	r0, r5, #60	; 0x3c
   1fc40:	e3a03000 	mov	r3, #0
   1fc44:	eb0005bf 	bl	21348 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1fc48:	e3a02000 	mov	r2, #0
   1fc4c:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fc50:	e58d2004 	str	r2, [sp, #4]
   1fc54:	e0863003 	add	r3, r6, r3
   1fc58:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1fc5c:	e58d2000 	str	r2, [sp]
   1fc60:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fc64:	e1a00005 	mov	r0, r5
   1fc68:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fc6c:	ebfff9c2 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fc70:	e3190b02 	tst	r9, #2048	; 0x800
   1fc74:	0affff4a 	beq	1f9a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7ac>
   1fc78:	e2850068 	add	r0, r5, #104	; 0x68
   1fc7c:	eb001246 	bl	2459c <CSynchronizationEvent::Set()>
   1fc80:	eaffff47 	b	1f9a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7ac>
   1fc84:	e59f22f0 	ldr	r2, [pc, #752]	; 1ff7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd84>
   1fc88:	e59f12d8 	ldr	r1, [pc, #728]	; 1ff68 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd70>
   1fc8c:	e59f02ec 	ldr	r0, [pc, #748]	; 1ff80 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd88>
   1fc90:	eb0012c4 	bl	247a8 <assertion_failed>
   1fc94:	e3a02000 	mov	r2, #0
   1fc98:	eafffdd6 	b	1f3f8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x200>
   1fc9c:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fca0:	e0481002 	sub	r1, r8, r2
   1fca4:	e3510000 	cmp	r1, #0
   1fca8:	da00001a 	ble	1fd18 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb20>
   1fcac:	e0483003 	sub	r3, r8, r3
   1fcb0:	e3530000 	cmp	r3, #0
   1fcb4:	caffff13 	bgt	1f908 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x710>
   1fcb8:	eaffff15 	b	1f914 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fcbc:	e3520000 	cmp	r2, #0
   1fcc0:	1affff13 	bne	1f914 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fcc4:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fcc8:	e0483003 	sub	r3, r8, r3
   1fccc:	e3530000 	cmp	r3, #0
   1fcd0:	caffff0f 	bgt	1f914 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fcd4:	e595309c 	ldr	r3, [r5, #156]	; 0x9c
   1fcd8:	e59d100c 	ldr	r1, [sp, #12]
   1fcdc:	e0432001 	sub	r2, r3, r1
   1fce0:	e3520000 	cmp	r2, #0
   1fce4:	ba000005 	blt	1fd00 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb08>
   1fce8:	e1510003 	cmp	r1, r3
   1fcec:	1affff08 	bne	1f914 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fcf0:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1fcf4:	e0433008 	sub	r3, r3, r8
   1fcf8:	e3530000 	cmp	r3, #0
   1fcfc:	caffff04 	bgt	1f914 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fd00:	e59d3010 	ldr	r3, [sp, #16]
   1fd04:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1fd08:	e5853094 	str	r3, [r5, #148]	; 0x94
   1fd0c:	e59d300c 	ldr	r3, [sp, #12]
   1fd10:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1fd14:	eafffefe 	b	1f914 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fd18:	e1a01008 	mov	r1, r8
   1fd1c:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fd20:	eb0002aa 	bl	207d0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fd24:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fd28:	e595708c 	ldr	r7, [r5, #140]	; 0x8c
   1fd2c:	e1580003 	cmp	r8, r3
   1fd30:	e0487007 	sub	r7, r8, r7
   1fd34:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1fd38:	0a000030 	beq	1fe00 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc08>
   1fd3c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1fd40:	e3530005 	cmp	r3, #5
   1fd44:	0a000029 	beq	1fdf0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbf8>
   1fd48:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1fd4c:	e3530008 	cmp	r3, #8
   1fd50:	0a000026 	beq	1fdf0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbf8>
   1fd54:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1fd58:	e3570001 	cmp	r7, #1
   1fd5c:	03530004 	cmpeq	r3, #4
   1fd60:	0affffdb 	beq	1fcd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xadc>
   1fd64:	e3570000 	cmp	r7, #0
   1fd68:	0affffd9 	beq	1fcd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xadc>
   1fd6c:	e1a01007 	mov	r1, r7
   1fd70:	e2850048 	add	r0, r5, #72	; 0x48
   1fd74:	eb0001d2 	bl	204c4 <CRetransmissionQueue::Advance(unsigned int)>
   1fd78:	eaffffd5 	b	1fcd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xadc>
   1fd7c:	e3a03007 	mov	r3, #7
   1fd80:	e2850068 	add	r0, r5, #104	; 0x68
   1fd84:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fd88:	eb001203 	bl	2459c <CSynchronizationEvent::Set()>
   1fd8c:	e3a00001 	mov	r0, #1
   1fd90:	eafffd2e 	b	1f250 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fd94:	e3a01001 	mov	r1, #1
   1fd98:	e1a00005 	mov	r0, r5
   1fd9c:	ebfffa1f 	bl	1e620 <CTCPConnection::StopTimer(unsigned int)>
   1fda0:	e1a00005 	mov	r0, r5
   1fda4:	e3a01000 	mov	r1, #0
   1fda8:	ebfffa1c 	bl	1e620 <CTCPConnection::StopTimer(unsigned int)>
   1fdac:	e3a0300a 	mov	r3, #10
   1fdb0:	e1a00005 	mov	r0, r5
   1fdb4:	e3a01002 	mov	r1, #2
   1fdb8:	e59f21b4 	ldr	r2, [pc, #436]	; 1ff74 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd7c>
   1fdbc:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fdc0:	ebfffac1 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fdc4:	eafffd91 	b	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1fdc8:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fdcc:	e1580003 	cmp	r8, r3
   1fdd0:	03a04000 	moveq	r4, #0
   1fdd4:	03a01001 	moveq	r1, #1
   1fdd8:	05c5405e 	strbeq	r4, [r5, #94]	; 0x5e
   1fddc:	0affffed 	beq	1fd98 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xba0>
   1fde0:	e3a03008 	mov	r3, #8
   1fde4:	e3a00001 	mov	r0, #1
   1fde8:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fdec:	eafffd17 	b	1f250 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fdf0:	e3a03000 	mov	r3, #0
   1fdf4:	e2477001 	sub	r7, r7, #1
   1fdf8:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1fdfc:	eaffffd4 	b	1fd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb5c>
   1fe00:	e3a01001 	mov	r1, #1
   1fe04:	e1a00005 	mov	r0, r5
   1fe08:	ebfffa04 	bl	1e620 <CTCPConnection::StopTimer(unsigned int)>
   1fe0c:	e3a03005 	mov	r3, #5
   1fe10:	e5853060 	str	r3, [r5, #96]	; 0x60
   1fe14:	eaffffc8 	b	1fd3c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb44>
   1fe18:	e3a03000 	mov	r3, #0
   1fe1c:	e58d3004 	str	r3, [sp, #4]
   1fe20:	e58d3000 	str	r3, [sp]
   1fe24:	e1a00005 	mov	r0, r5
   1fe28:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fe2c:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fe30:	ebfff951 	bl	1e37c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fe34:	e3a00001 	mov	r0, #1
   1fe38:	eafffd04 	b	1f250 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fe3c:	e1a00005 	mov	r0, r5
   1fe40:	e3a01002 	mov	r1, #2
   1fe44:	e59f2128 	ldr	r2, [pc, #296]	; 1ff74 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd7c>
   1fe48:	ebfffa9f 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fe4c:	e3a00001 	mov	r0, #1
   1fe50:	eafffcfe 	b	1f250 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fe54:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fe58:	e1580003 	cmp	r8, r3
   1fe5c:	1afffec5 	bne	1f978 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fe60:	e1a01008 	mov	r1, r8
   1fe64:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fe68:	eb000258 	bl	207d0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fe6c:	e3a03000 	mov	r3, #0
   1fe70:	e3a01001 	mov	r1, #1
   1fe74:	e1a00005 	mov	r0, r5
   1fe78:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1fe7c:	ebfff9e7 	bl	1e620 <CTCPConnection::StopTimer(unsigned int)>
   1fe80:	e3a03006 	mov	r3, #6
   1fe84:	e3a01002 	mov	r1, #2
   1fe88:	e1a00005 	mov	r0, r5
   1fe8c:	e59f20e0 	ldr	r2, [pc, #224]	; 1ff74 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd7c>
   1fe90:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fe94:	ebfffa8c 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fe98:	e2850048 	add	r0, r5, #72	; 0x48
   1fe9c:	eb0000e3 	bl	20230 <CRetransmissionQueue::IsEmpty() const>
   1fea0:	e3500000 	cmp	r0, #0
   1fea4:	0afffeb3 	beq	1f978 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fea8:	e2850068 	add	r0, r5, #104	; 0x68
   1feac:	eb0011ba 	bl	2459c <CSynchronizationEvent::Set()>
   1feb0:	eafffeb0 	b	1f978 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1feb4:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1feb8:	e1580003 	cmp	r8, r3
   1febc:	1afffead 	bne	1f978 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fec0:	e1a01008 	mov	r1, r8
   1fec4:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fec8:	eb000240 	bl	207d0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fecc:	e3a03000 	mov	r3, #0
   1fed0:	e1a00005 	mov	r0, r5
   1fed4:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1fed8:	e3a01001 	mov	r1, #1
   1fedc:	ebfff9cf 	bl	1e620 <CTCPConnection::StopTimer(unsigned int)>
   1fee0:	e3a0300a 	mov	r3, #10
   1fee4:	e3a01002 	mov	r1, #2
   1fee8:	e1a00005 	mov	r0, r5
   1feec:	e59f2080 	ldr	r2, [pc, #128]	; 1ff74 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd7c>
   1fef0:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fef4:	ebfffa74 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fef8:	eafffe9e 	b	1f978 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fefc:	e59d3010 	ldr	r3, [sp, #16]
   1ff00:	e1a01008 	mov	r1, r8
   1ff04:	e5853094 	str	r3, [r5, #148]	; 0x94
   1ff08:	e59d300c 	ldr	r3, [sp, #12]
   1ff0c:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1ff10:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1ff14:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1ff18:	e28500b8 	add	r0, r5, #184	; 0xb8
   1ff1c:	eb00022b 	bl	207d0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1ff20:	e3a02004 	mov	r2, #4
   1ff24:	e3a03005 	mov	r3, #5
   1ff28:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1ff2c:	e5853060 	str	r3, [r5, #96]	; 0x60
   1ff30:	eafffe90 	b	1f978 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1ff34:	e1a00005 	mov	r0, r5
   1ff38:	e59f1044 	ldr	r1, [pc, #68]	; 1ff84 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd8c>
   1ff3c:	ebfffc38 	bl	1f024 <CTCPConnection::UnexpectedState(unsigned int)>
   1ff40:	eafffe8c 	b	1f978 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1ff44:	e1a00005 	mov	r0, r5
   1ff48:	e59f1038 	ldr	r1, [pc, #56]	; 1ff88 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd90>
   1ff4c:	ebfffc34 	bl	1f024 <CTCPConnection::UnexpectedState(unsigned int)>
   1ff50:	eafffd2e 	b	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1ff54:	e3a01e49 	mov	r1, #1168	; 0x490
   1ff58:	e1a00005 	mov	r0, r5
   1ff5c:	ebfffc30 	bl	1f024 <CTCPConnection::UnexpectedState(unsigned int)>
   1ff60:	eafffe84 	b	1f978 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1ff64:	0005ce1c 	.word	0x0005ce1c
   1ff68:	00045afc 	.word	0x00045afc
   1ff6c:	000454d4 	.word	0x000454d4
   1ff70:	000004dc 	.word	0x000004dc
   1ff74:	00001770 	.word	0x00001770
   1ff78:	000003e3 	.word	0x000003e3
   1ff7c:	00000301 	.word	0x00000301
   1ff80:	00045c7c 	.word	0x00045c7c
   1ff84:	000004a9 	.word	0x000004a9
   1ff88:	00000519 	.word	0x00000519

0001ff8c <CTCPConnection::TimerHandler(unsigned int)>:
   1ff8c:	e3510002 	cmp	r1, #2
   1ff90:	e92d4070 	push	{r4, r5, r6, lr}
   1ff94:	8a00002d 	bhi	20050 <CTCPConnection::TimerHandler(unsigned int)+0xc4>
   1ff98:	e1a04000 	mov	r4, r0
   1ff9c:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   1ffa0:	e1a05001 	mov	r5, r1
   1ffa4:	e3500000 	cmp	r0, #0
   1ffa8:	1a00000c 	bne	1ffe0 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   1ffac:	e281301e 	add	r3, r1, #30
   1ffb0:	e0843103 	add	r3, r4, r3, lsl #2
   1ffb4:	e5932004 	ldr	r2, [r3, #4]
   1ffb8:	e3520000 	cmp	r2, #0
   1ffbc:	15830004 	strne	r0, [r3, #4]
   1ffc0:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ffc4:	e3550001 	cmp	r5, #1
   1ffc8:	0a000012 	beq	20018 <CTCPConnection::TimerHandler(unsigned int)+0x8c>
   1ffcc:	e3550002 	cmp	r5, #2
   1ffd0:	1a000054 	bne	20128 <CTCPConnection::TimerHandler(unsigned int)+0x19c>
   1ffd4:	e3a03000 	mov	r3, #0
   1ffd8:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1ffdc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ffe0:	eb002f25 	bl	2bc7c <EnterCritical>
   1ffe4:	e285301e 	add	r3, r5, #30
   1ffe8:	e0843103 	add	r3, r4, r3, lsl #2
   1ffec:	e5932004 	ldr	r2, [r3, #4]
   1fff0:	e3520000 	cmp	r2, #0
   1fff4:	0a000010 	beq	2003c <CTCPConnection::TimerHandler(unsigned int)+0xb0>
   1fff8:	e3a01000 	mov	r1, #0
   1fffc:	e5942088 	ldr	r2, [r4, #136]	; 0x88
   20000:	e5831004 	str	r1, [r3, #4]
   20004:	e1520001 	cmp	r2, r1
   20008:	0affffed 	beq	1ffc4 <CTCPConnection::TimerHandler(unsigned int)+0x38>
   2000c:	eb002f44 	bl	2bd24 <LeaveCritical>
   20010:	e3550001 	cmp	r5, #1
   20014:	1affffec 	bne	1ffcc <CTCPConnection::TimerHandler(unsigned int)+0x40>
   20018:	e28400b8 	add	r0, r4, #184	; 0xb8
   2001c:	eb0001ac 	bl	206d4 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>
   20020:	e5943060 	ldr	r3, [r4, #96]	; 0x60
   20024:	e3530000 	cmp	r3, #0
   20028:	e2433001 	sub	r3, r3, #1
   2002c:	e5843060 	str	r3, [r4, #96]	; 0x60
   20030:	1a00000a 	bne	20060 <CTCPConnection::TimerHandler(unsigned int)+0xd4>
   20034:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   20038:	e8bd8070 	pop	{r4, r5, r6, pc}
   2003c:	e5943088 	ldr	r3, [r4, #136]	; 0x88
   20040:	e3530000 	cmp	r3, #0
   20044:	08bd8070 	popeq	{r4, r5, r6, pc}
   20048:	e8bd4070 	pop	{r4, r5, r6, lr}
   2004c:	ea002f34 	b	2bd24 <LeaveCritical>
   20050:	e59f20e0 	ldr	r2, [pc, #224]	; 20138 <CTCPConnection::TimerHandler(unsigned int)+0x1ac>
   20054:	e59f10e0 	ldr	r1, [pc, #224]	; 2013c <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   20058:	e59f00e0 	ldr	r0, [pc, #224]	; 20140 <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   2005c:	eb0011d1 	bl	247a8 <assertion_failed>
   20060:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   20064:	e353000a 	cmp	r3, #10
   20068:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2006c:	ea00000a 	b	2009c <CTCPConnection::TimerHandler(unsigned int)+0x110>
   20070:	000200a0 	.word	0x000200a0
   20074:	000200a0 	.word	0x000200a0
   20078:	000200e0 	.word	0x000200e0
   2007c:	000200e0 	.word	0x000200e0
   20080:	000200c8 	.word	0x000200c8
   20084:	000200b0 	.word	0x000200b0
   20088:	000200a0 	.word	0x000200a0
   2008c:	000200c8 	.word	0x000200c8
   20090:	000200b0 	.word	0x000200b0
   20094:	000200b0 	.word	0x000200b0
   20098:	000200a0 	.word	0x000200a0
   2009c:	e8bd8070 	pop	{r4, r5, r6, pc}
   200a0:	e1a00004 	mov	r0, r4
   200a4:	e8bd4070 	pop	{r4, r5, r6, lr}
   200a8:	e59f1094 	ldr	r1, [pc, #148]	; 20144 <CTCPConnection::TimerHandler(unsigned int)+0x1b8>
   200ac:	eafffbdc 	b	1f024 <CTCPConnection::UnexpectedState(unsigned int)>
   200b0:	e5d4305e 	ldrb	r3, [r4, #94]	; 0x5e
   200b4:	e3530000 	cmp	r3, #0
   200b8:	1a00000e 	bne	200f8 <CTCPConnection::TimerHandler(unsigned int)+0x16c>
   200bc:	e3a03001 	mov	r3, #1
   200c0:	e5c4305e 	strb	r3, [r4, #94]	; 0x5e
   200c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   200c8:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
   200cc:	e3530000 	cmp	r3, #0
   200d0:	1a00000c 	bne	20108 <CTCPConnection::TimerHandler(unsigned int)+0x17c>
   200d4:	e3a03001 	mov	r3, #1
   200d8:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
   200dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   200e0:	e5d4305d 	ldrb	r3, [r4, #93]	; 0x5d
   200e4:	e3530000 	cmp	r3, #0
   200e8:	1a00000a 	bne	20118 <CTCPConnection::TimerHandler(unsigned int)+0x18c>
   200ec:	e3a03001 	mov	r3, #1
   200f0:	e5c4305d 	strb	r3, [r4, #93]	; 0x5d
   200f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   200f8:	e59f2048 	ldr	r2, [pc, #72]	; 20148 <CTCPConnection::TimerHandler(unsigned int)+0x1bc>
   200fc:	e59f1038 	ldr	r1, [pc, #56]	; 2013c <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   20100:	e59f0044 	ldr	r0, [pc, #68]	; 2014c <CTCPConnection::TimerHandler(unsigned int)+0x1c0>
   20104:	eb0011a7 	bl	247a8 <assertion_failed>
   20108:	e59f2040 	ldr	r2, [pc, #64]	; 20150 <CTCPConnection::TimerHandler(unsigned int)+0x1c4>
   2010c:	e59f1028 	ldr	r1, [pc, #40]	; 2013c <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   20110:	e59f003c 	ldr	r0, [pc, #60]	; 20154 <CTCPConnection::TimerHandler(unsigned int)+0x1c8>
   20114:	eb0011a3 	bl	247a8 <assertion_failed>
   20118:	e59f2038 	ldr	r2, [pc, #56]	; 20158 <CTCPConnection::TimerHandler(unsigned int)+0x1cc>
   2011c:	e59f1018 	ldr	r1, [pc, #24]	; 2013c <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   20120:	e59f0034 	ldr	r0, [pc, #52]	; 2015c <CTCPConnection::TimerHandler(unsigned int)+0x1d0>
   20124:	eb00119f 	bl	247a8 <assertion_failed>
   20128:	e59f2030 	ldr	r2, [pc, #48]	; 20160 <CTCPConnection::TimerHandler(unsigned int)+0x1d4>
   2012c:	e59f1008 	ldr	r1, [pc, #8]	; 2013c <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   20130:	e59f002c 	ldr	r0, [pc, #44]	; 20164 <CTCPConnection::TimerHandler(unsigned int)+0x1d8>
   20134:	eb00119b 	bl	247a8 <assertion_failed>
   20138:	000005d9 	.word	0x000005d9
   2013c:	00045afc 	.word	0x00045afc
   20140:	00045b40 	.word	0x00045b40
   20144:	000005f9 	.word	0x000005f9
   20148:	0000060b 	.word	0x0000060b
   2014c:	00045b8c 	.word	0x00045b8c
   20150:	00000604 	.word	0x00000604
   20154:	00045c98 	.word	0x00045c98
   20158:	000005fe 	.word	0x000005fe
   2015c:	00045c8c 	.word	0x00045c8c
   20160:	00000617 	.word	0x00000617
   20164:	00041748 	.word	0x00041748

00020168 <CTCPConnection::TimerStub(unsigned int, void*, void*)>:
   20168:	e2520000 	subs	r0, r2, #0
   2016c:	e92d4010 	push	{r4, lr}
   20170:	0a000003 	beq	20184 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x1c>
   20174:	e3510002 	cmp	r1, #2
   20178:	8a000005 	bhi	20194 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x2c>
   2017c:	e8bd4010 	pop	{r4, lr}
   20180:	eaffff81 	b	1ff8c <CTCPConnection::TimerHandler(unsigned int)>
   20184:	e59f2018 	ldr	r2, [pc, #24]	; 201a4 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x3c>
   20188:	e59f1018 	ldr	r1, [pc, #24]	; 201a8 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x40>
   2018c:	e59f0018 	ldr	r0, [pc, #24]	; 201ac <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x44>
   20190:	eb001184 	bl	247a8 <assertion_failed>
   20194:	e59f2014 	ldr	r2, [pc, #20]	; 201b0 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x48>
   20198:	e59f1008 	ldr	r1, [pc, #8]	; 201a8 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x40>
   2019c:	e59f0010 	ldr	r0, [pc, #16]	; 201b4 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x4c>
   201a0:	eb001180 	bl	247a8 <assertion_failed>
   201a4:	0000061f 	.word	0x0000061f
   201a8:	00045afc 	.word	0x00045afc
   201ac:	00040b44 	.word	0x00040b44
   201b0:	00000622 	.word	0x00000622
   201b4:	00045b40 	.word	0x00045b40

000201b8 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>:
   201b8:	e3a03000 	mov	r3, #0
   201bc:	e3510001 	cmp	r1, #1
   201c0:	e92d4010 	push	{r4, lr}
   201c4:	e880000a 	stm	r0, {r1, r3}
   201c8:	e5803008 	str	r3, [r0, #8]
   201cc:	e580300c 	str	r3, [r0, #12]
   201d0:	e5803010 	str	r3, [r0, #16]
   201d4:	9a000006 	bls	201f4 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x3c>
   201d8:	e1a04000 	mov	r4, r0
   201dc:	e1a00001 	mov	r0, r1
   201e0:	eb002b7e 	bl	2afe0 <operator new[](unsigned int)>
   201e4:	e1a03000 	mov	r3, r0
   201e8:	e1a00004 	mov	r0, r4
   201ec:	e5843004 	str	r3, [r4, #4]
   201f0:	e8bd8010 	pop	{r4, pc}
   201f4:	e3a0201e 	mov	r2, #30
   201f8:	e59f1004 	ldr	r1, [pc, #4]	; 20204 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x4c>
   201fc:	e59f0004 	ldr	r0, [pc, #4]	; 20208 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x50>
   20200:	eb001168 	bl	247a8 <assertion_failed>
   20204:	00045d98 	.word	0x00045d98
   20208:	00045db0 	.word	0x00045db0

0002020c <CRetransmissionQueue::~CRetransmissionQueue()>:
   2020c:	e92d4010 	push	{r4, lr}
   20210:	e1a04000 	mov	r4, r0
   20214:	e5900004 	ldr	r0, [r0, #4]
   20218:	e3500000 	cmp	r0, #0
   2021c:	0a000001 	beq	20228 <CRetransmissionQueue::~CRetransmissionQueue()+0x1c>
   20220:	e3a01001 	mov	r1, #1
   20224:	eb002b75 	bl	2b000 <operator delete(void*, unsigned int)>
   20228:	e1a00004 	mov	r0, r4
   2022c:	e8bd8010 	pop	{r4, pc}

00020230 <CRetransmissionQueue::IsEmpty() const>:
   20230:	e590200c 	ldr	r2, [r0, #12]
   20234:	e5900008 	ldr	r0, [r0, #8]
   20238:	e0420000 	sub	r0, r2, r0
   2023c:	e16f0f10 	clz	r0, r0
   20240:	e1a002a0 	lsr	r0, r0, #5
   20244:	e12fff1e 	bx	lr

00020248 <CRetransmissionQueue::GetFreeSpace() const>:
   20248:	e5903000 	ldr	r3, [r0]
   2024c:	e92d4010 	push	{r4, lr}
   20250:	e3530001 	cmp	r3, #1
   20254:	9a00000b 	bls	20288 <CRetransmissionQueue::GetFreeSpace() const+0x40>
   20258:	e5902008 	ldr	r2, [r0, #8]
   2025c:	e1530002 	cmp	r3, r2
   20260:	9a00000c 	bls	20298 <CRetransmissionQueue::GetFreeSpace() const+0x50>
   20264:	e590000c 	ldr	r0, [r0, #12]
   20268:	e1530000 	cmp	r3, r0
   2026c:	9a00000d 	bls	202a8 <CRetransmissionQueue::GetFreeSpace() const+0x60>
   20270:	e1520000 	cmp	r2, r0
   20274:	20833000 	addcs	r3, r3, r0
   20278:	22433001 	subcs	r3, r3, #1
   2027c:	32403001 	subcc	r3, r0, #1
   20280:	e0430002 	sub	r0, r3, r2
   20284:	e8bd8010 	pop	{r4, pc}
   20288:	e3a02033 	mov	r2, #51	; 0x33
   2028c:	e59f1024 	ldr	r1, [pc, #36]	; 202b8 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   20290:	e59f0024 	ldr	r0, [pc, #36]	; 202bc <CRetransmissionQueue::GetFreeSpace() const+0x74>
   20294:	eb001143 	bl	247a8 <assertion_failed>
   20298:	e3a02034 	mov	r2, #52	; 0x34
   2029c:	e59f1014 	ldr	r1, [pc, #20]	; 202b8 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   202a0:	e59f0018 	ldr	r0, [pc, #24]	; 202c0 <CRetransmissionQueue::GetFreeSpace() const+0x78>
   202a4:	eb00113f 	bl	247a8 <assertion_failed>
   202a8:	e3a02035 	mov	r2, #53	; 0x35
   202ac:	e59f1004 	ldr	r1, [pc, #4]	; 202b8 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   202b0:	e59f000c 	ldr	r0, [pc, #12]	; 202c4 <CRetransmissionQueue::GetFreeSpace() const+0x7c>
   202b4:	eb00113b 	bl	247a8 <assertion_failed>
   202b8:	00045d98 	.word	0x00045d98
   202bc:	00045db0 	.word	0x00045db0
   202c0:	00045dbc 	.word	0x00045dbc
   202c4:	00045dd0 	.word	0x00045dd0

000202c8 <CRetransmissionQueue::Write(void const*, unsigned int)>:
   202c8:	e92d4070 	push	{r4, r5, r6, lr}
   202cc:	e2526000 	subs	r6, r2, #0
   202d0:	0a000017 	beq	20334 <CRetransmissionQueue::Write(void const*, unsigned int)+0x6c>
   202d4:	e1a05001 	mov	r5, r1
   202d8:	e1a04000 	mov	r4, r0
   202dc:	ebffffd9 	bl	20248 <CRetransmissionQueue::GetFreeSpace() const>
   202e0:	e1500006 	cmp	r0, r6
   202e4:	3a000016 	bcc	20344 <CRetransmissionQueue::Write(void const*, unsigned int)+0x7c>
   202e8:	e3550000 	cmp	r5, #0
   202ec:	0a000018 	beq	20354 <CRetransmissionQueue::Write(void const*, unsigned int)+0x8c>
   202f0:	e5943004 	ldr	r3, [r4, #4]
   202f4:	e3530000 	cmp	r3, #0
   202f8:	15941008 	ldrne	r1, [r4, #8]
   202fc:	10856006 	addne	r6, r5, r6
   20300:	0a000017 	beq	20364 <CRetransmissionQueue::Write(void const*, unsigned int)+0x9c>
   20304:	e2812001 	add	r2, r1, #1
   20308:	e5842008 	str	r2, [r4, #8]
   2030c:	e4d52001 	ldrb	r2, [r5], #1
   20310:	e7c32001 	strb	r2, [r3, r1]
   20314:	e5940008 	ldr	r0, [r4, #8]
   20318:	e5941000 	ldr	r1, [r4]
   2031c:	eb007a0a 	bl	3eb4c <__aeabi_uidivmod>
   20320:	e1560005 	cmp	r6, r5
   20324:	e5841008 	str	r1, [r4, #8]
   20328:	08bd8070 	popeq	{r4, r5, r6, pc}
   2032c:	e5943004 	ldr	r3, [r4, #4]
   20330:	eafffff3 	b	20304 <CRetransmissionQueue::Write(void const*, unsigned int)+0x3c>
   20334:	e3a02041 	mov	r2, #65	; 0x41
   20338:	e59f1034 	ldr	r1, [pc, #52]	; 20374 <CRetransmissionQueue::Write(void const*, unsigned int)+0xac>
   2033c:	e59f0034 	ldr	r0, [pc, #52]	; 20378 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   20340:	eb001118 	bl	247a8 <assertion_failed>
   20344:	e3a02042 	mov	r2, #66	; 0x42
   20348:	e59f1024 	ldr	r1, [pc, #36]	; 20374 <CRetransmissionQueue::Write(void const*, unsigned int)+0xac>
   2034c:	e59f0028 	ldr	r0, [pc, #40]	; 2037c <CRetransmissionQueue::Write(void const*, unsigned int)+0xb4>
   20350:	eb001114 	bl	247a8 <assertion_failed>
   20354:	e3a02045 	mov	r2, #69	; 0x45
   20358:	e59f1014 	ldr	r1, [pc, #20]	; 20374 <CRetransmissionQueue::Write(void const*, unsigned int)+0xac>
   2035c:	e59f001c 	ldr	r0, [pc, #28]	; 20380 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb8>
   20360:	eb001110 	bl	247a8 <assertion_failed>
   20364:	e3a02046 	mov	r2, #70	; 0x46
   20368:	e59f1004 	ldr	r1, [pc, #4]	; 20374 <CRetransmissionQueue::Write(void const*, unsigned int)+0xac>
   2036c:	e59f0010 	ldr	r0, [pc, #16]	; 20384 <CRetransmissionQueue::Write(void const*, unsigned int)+0xbc>
   20370:	eb00110c 	bl	247a8 <assertion_failed>
   20374:	00045d98 	.word	0x00045d98
   20378:	00045464 	.word	0x00045464
   2037c:	00045de4 	.word	0x00045de4
   20380:	00045e00 	.word	0x00045e00
   20384:	00043244 	.word	0x00043244

00020388 <CRetransmissionQueue::GetBytesAvailable() const>:
   20388:	e5903000 	ldr	r3, [r0]
   2038c:	e92d4010 	push	{r4, lr}
   20390:	e3530001 	cmp	r3, #1
   20394:	9a00000a 	bls	203c4 <CRetransmissionQueue::GetBytesAvailable() const+0x3c>
   20398:	e5902008 	ldr	r2, [r0, #8]
   2039c:	e1530002 	cmp	r3, r2
   203a0:	9a00000b 	bls	203d4 <CRetransmissionQueue::GetBytesAvailable() const+0x4c>
   203a4:	e5900010 	ldr	r0, [r0, #16]
   203a8:	e1530000 	cmp	r3, r0
   203ac:	9a00000c 	bls	203e4 <CRetransmissionQueue::GetBytesAvailable() const+0x5c>
   203b0:	e1520000 	cmp	r2, r0
   203b4:	30833002 	addcc	r3, r3, r2
   203b8:	30430000 	subcc	r0, r3, r0
   203bc:	20420000 	subcs	r0, r2, r0
   203c0:	e8bd8010 	pop	{r4, pc}
   203c4:	e3a02051 	mov	r2, #81	; 0x51
   203c8:	e59f1024 	ldr	r1, [pc, #36]	; 203f4 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   203cc:	e59f0024 	ldr	r0, [pc, #36]	; 203f8 <CRetransmissionQueue::GetBytesAvailable() const+0x70>
   203d0:	eb0010f4 	bl	247a8 <assertion_failed>
   203d4:	e3a02052 	mov	r2, #82	; 0x52
   203d8:	e59f1014 	ldr	r1, [pc, #20]	; 203f4 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   203dc:	e59f0018 	ldr	r0, [pc, #24]	; 203fc <CRetransmissionQueue::GetBytesAvailable() const+0x74>
   203e0:	eb0010f0 	bl	247a8 <assertion_failed>
   203e4:	e3a02053 	mov	r2, #83	; 0x53
   203e8:	e59f1004 	ldr	r1, [pc, #4]	; 203f4 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   203ec:	e59f000c 	ldr	r0, [pc, #12]	; 20400 <CRetransmissionQueue::GetBytesAvailable() const+0x78>
   203f0:	eb0010ec 	bl	247a8 <assertion_failed>
   203f4:	00045d98 	.word	0x00045d98
   203f8:	00045db0 	.word	0x00045db0
   203fc:	00045dbc 	.word	0x00045dbc
   20400:	00045e08 	.word	0x00045e08

00020404 <CRetransmissionQueue::Read(void*, unsigned int)>:
   20404:	e92d4070 	push	{r4, r5, r6, lr}
   20408:	e2526000 	subs	r6, r2, #0
   2040c:	0a000017 	beq	20470 <CRetransmissionQueue::Read(void*, unsigned int)+0x6c>
   20410:	e1a05001 	mov	r5, r1
   20414:	e1a04000 	mov	r4, r0
   20418:	ebffffda 	bl	20388 <CRetransmissionQueue::GetBytesAvailable() const>
   2041c:	e1500006 	cmp	r0, r6
   20420:	3a000016 	bcc	20480 <CRetransmissionQueue::Read(void*, unsigned int)+0x7c>
   20424:	e3550000 	cmp	r5, #0
   20428:	0a000018 	beq	20490 <CRetransmissionQueue::Read(void*, unsigned int)+0x8c>
   2042c:	e5943004 	ldr	r3, [r4, #4]
   20430:	e3530000 	cmp	r3, #0
   20434:	15941010 	ldrne	r1, [r4, #16]
   20438:	10856006 	addne	r6, r5, r6
   2043c:	0a000017 	beq	204a0 <CRetransmissionQueue::Read(void*, unsigned int)+0x9c>
   20440:	e2812001 	add	r2, r1, #1
   20444:	e5842010 	str	r2, [r4, #16]
   20448:	e7d33001 	ldrb	r3, [r3, r1]
   2044c:	e4c53001 	strb	r3, [r5], #1
   20450:	e5940010 	ldr	r0, [r4, #16]
   20454:	e5941000 	ldr	r1, [r4]
   20458:	eb0079bb 	bl	3eb4c <__aeabi_uidivmod>
   2045c:	e1560005 	cmp	r6, r5
   20460:	e5841010 	str	r1, [r4, #16]
   20464:	08bd8070 	popeq	{r4, r5, r6, pc}
   20468:	e5943004 	ldr	r3, [r4, #4]
   2046c:	eafffff3 	b	20440 <CRetransmissionQueue::Read(void*, unsigned int)+0x3c>
   20470:	e3a0205f 	mov	r2, #95	; 0x5f
   20474:	e59f1034 	ldr	r1, [pc, #52]	; 204b0 <CRetransmissionQueue::Read(void*, unsigned int)+0xac>
   20478:	e59f0034 	ldr	r0, [pc, #52]	; 204b4 <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   2047c:	eb0010c9 	bl	247a8 <assertion_failed>
   20480:	e3a02060 	mov	r2, #96	; 0x60
   20484:	e59f1024 	ldr	r1, [pc, #36]	; 204b0 <CRetransmissionQueue::Read(void*, unsigned int)+0xac>
   20488:	e59f0028 	ldr	r0, [pc, #40]	; 204b8 <CRetransmissionQueue::Read(void*, unsigned int)+0xb4>
   2048c:	eb0010c5 	bl	247a8 <assertion_failed>
   20490:	e3a02063 	mov	r2, #99	; 0x63
   20494:	e59f1014 	ldr	r1, [pc, #20]	; 204b0 <CRetransmissionQueue::Read(void*, unsigned int)+0xac>
   20498:	e59f001c 	ldr	r0, [pc, #28]	; 204bc <CRetransmissionQueue::Read(void*, unsigned int)+0xb8>
   2049c:	eb0010c1 	bl	247a8 <assertion_failed>
   204a0:	e3a02064 	mov	r2, #100	; 0x64
   204a4:	e59f1004 	ldr	r1, [pc, #4]	; 204b0 <CRetransmissionQueue::Read(void*, unsigned int)+0xac>
   204a8:	e59f0010 	ldr	r0, [pc, #16]	; 204c0 <CRetransmissionQueue::Read(void*, unsigned int)+0xbc>
   204ac:	eb0010bd 	bl	247a8 <assertion_failed>
   204b0:	00045d98 	.word	0x00045d98
   204b4:	00045464 	.word	0x00045464
   204b8:	00045e20 	.word	0x00045e20
   204bc:	00045e00 	.word	0x00045e00
   204c0:	00043244 	.word	0x00043244

000204c4 <CRetransmissionQueue::Advance(unsigned int)>:
   204c4:	e5903000 	ldr	r3, [r0]
   204c8:	e92d4010 	push	{r4, lr}
   204cc:	e3530001 	cmp	r3, #1
   204d0:	9a00000c 	bls	20508 <CRetransmissionQueue::Advance(unsigned int)+0x44>
   204d4:	e590200c 	ldr	r2, [r0, #12]
   204d8:	e1a04000 	mov	r4, r0
   204dc:	e1530002 	cmp	r3, r2
   204e0:	9a00000c 	bls	20518 <CRetransmissionQueue::Advance(unsigned int)+0x54>
   204e4:	e1a00001 	mov	r0, r1
   204e8:	e5941010 	ldr	r1, [r4, #16]
   204ec:	e1530001 	cmp	r3, r1
   204f0:	9a00000c 	bls	20528 <CRetransmissionQueue::Advance(unsigned int)+0x64>
   204f4:	e1a01003 	mov	r1, r3
   204f8:	e0820000 	add	r0, r2, r0
   204fc:	eb007992 	bl	3eb4c <__aeabi_uidivmod>
   20500:	e584100c 	str	r1, [r4, #12]
   20504:	e8bd8010 	pop	{r4, pc}
   20508:	e3a0206f 	mov	r2, #111	; 0x6f
   2050c:	e59f1024 	ldr	r1, [pc, #36]	; 20538 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   20510:	e59f0024 	ldr	r0, [pc, #36]	; 2053c <CRetransmissionQueue::Advance(unsigned int)+0x78>
   20514:	eb0010a3 	bl	247a8 <assertion_failed>
   20518:	e3a02070 	mov	r2, #112	; 0x70
   2051c:	e59f1014 	ldr	r1, [pc, #20]	; 20538 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   20520:	e59f0018 	ldr	r0, [pc, #24]	; 20540 <CRetransmissionQueue::Advance(unsigned int)+0x7c>
   20524:	eb00109f 	bl	247a8 <assertion_failed>
   20528:	e3a02071 	mov	r2, #113	; 0x71
   2052c:	e59f1004 	ldr	r1, [pc, #4]	; 20538 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   20530:	e59f000c 	ldr	r0, [pc, #12]	; 20544 <CRetransmissionQueue::Advance(unsigned int)+0x80>
   20534:	eb00109b 	bl	247a8 <assertion_failed>
   20538:	00045d98 	.word	0x00045d98
   2053c:	00045db0 	.word	0x00045db0
   20540:	00045dd0 	.word	0x00045dd0
   20544:	00045e08 	.word	0x00045e08

00020548 <CRetransmissionQueue::Reset()>:
   20548:	e590300c 	ldr	r3, [r0, #12]
   2054c:	e5803010 	str	r3, [r0, #16]
   20550:	e12fff1e 	bx	lr

00020554 <CRetransmissionQueue::Flush()>:
   20554:	e3a03000 	mov	r3, #0
   20558:	e5803008 	str	r3, [r0, #8]
   2055c:	e580300c 	str	r3, [r0, #12]
   20560:	e5803010 	str	r3, [r0, #16]
   20564:	e12fff1e 	bx	lr

00020568 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>:
   20568:	e92d4010 	push	{r4, lr}
   2056c:	e1a04000 	mov	r4, r0
   20570:	eb002659 	bl	29edc <CTimer::Get()>
   20574:	e3a03000 	mov	r3, #0
   20578:	e3a02001 	mov	r2, #1
   2057c:	e3a01f4b 	mov	r1, #300	; 0x12c
   20580:	e1500003 	cmp	r0, r3
   20584:	e5840000 	str	r0, [r4]
   20588:	e5841008 	str	r1, [r4, #8]
   2058c:	e5843004 	str	r3, [r4, #4]
   20590:	e5c43018 	strb	r3, [r4, #24]
   20594:	e5843020 	str	r3, [r4, #32]
   20598:	e5c4200c 	strb	r2, [r4, #12]
   2059c:	e5842024 	str	r2, [r4, #36]	; 0x24
   205a0:	0a000001 	beq	205ac <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x44>
   205a4:	e1a00004 	mov	r0, r4
   205a8:	e8bd8010 	pop	{r4, pc}
   205ac:	e3a02033 	mov	r2, #51	; 0x33
   205b0:	e59f1004 	ldr	r1, [pc, #4]	; 205bc <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x54>
   205b4:	e59f0004 	ldr	r0, [pc, #4]	; 205c0 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x58>
   205b8:	eb00107a 	bl	247a8 <assertion_failed>
   205bc:	00045e40 	.word	0x00045e40
   205c0:	00040b94 	.word	0x00040b94

000205c4 <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>:
   205c4:	e12fff1e 	bx	lr

000205c8 <CRetransmissionTimeoutCalculator::GetRTO() const>:
   205c8:	e5900008 	ldr	r0, [r0, #8]
   205cc:	e12fff1e 	bx	lr

000205d0 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>:
   205d0:	e92d4070 	push	{r4, r5, r6, lr}
   205d4:	e1a04000 	mov	r4, r0
   205d8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   205dc:	e1a05001 	mov	r5, r1
   205e0:	e3500000 	cmp	r0, #0
   205e4:	1a000007 	bne	20608 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)+0x38>
   205e8:	e3a02f4b 	mov	r2, #300	; 0x12c
   205ec:	e3a03001 	mov	r3, #1
   205f0:	e5841004 	str	r1, [r4, #4]
   205f4:	e5c40018 	strb	r0, [r4, #24]
   205f8:	e5840020 	str	r0, [r4, #32]
   205fc:	e5842008 	str	r2, [r4, #8]
   20600:	e5c4300c 	strb	r3, [r4, #12]
   20604:	e8bd8070 	pop	{r4, r5, r6, pc}
   20608:	eb002d9b 	bl	2bc7c <EnterCritical>
   2060c:	e3a03000 	mov	r3, #0
   20610:	e3a01f4b 	mov	r1, #300	; 0x12c
   20614:	e3a02001 	mov	r2, #1
   20618:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2061c:	e5845004 	str	r5, [r4, #4]
   20620:	e1500003 	cmp	r0, r3
   20624:	e5841008 	str	r1, [r4, #8]
   20628:	e5c4200c 	strb	r2, [r4, #12]
   2062c:	e5c43018 	strb	r3, [r4, #24]
   20630:	e5843020 	str	r3, [r4, #32]
   20634:	08bd8070 	popeq	{r4, r5, r6, pc}
   20638:	e8bd4070 	pop	{r4, r5, r6, lr}
   2063c:	ea002db8 	b	2bd24 <LeaveCritical>

00020640 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>:
   20640:	e92d4010 	push	{r4, lr}
   20644:	e1a04000 	mov	r4, r0
   20648:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   2064c:	e3500000 	cmp	r0, #0
   20650:	1a000011 	bne	2069c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x5c>
   20654:	e5d43018 	ldrb	r3, [r4, #24]
   20658:	e3530000 	cmp	r3, #0
   2065c:	18bd8010 	popne	{r4, pc}
   20660:	e5943020 	ldr	r3, [r4, #32]
   20664:	e3530000 	cmp	r3, #0
   20668:	1a000006 	bne	20688 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   2066c:	e3a03001 	mov	r3, #1
   20670:	e5940000 	ldr	r0, [r4]
   20674:	e5c43018 	strb	r3, [r4, #24]
   20678:	e3500000 	cmp	r0, #0
   2067c:	0a00000e 	beq	206bc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x7c>
   20680:	eb002363 	bl	29414 <CTimer::GetTicks() const>
   20684:	e584001c 	str	r0, [r4, #28]
   20688:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   2068c:	e3530000 	cmp	r3, #0
   20690:	08bd8010 	popeq	{r4, pc}
   20694:	e8bd4010 	pop	{r4, lr}
   20698:	ea002da1 	b	2bd24 <LeaveCritical>
   2069c:	eb002d76 	bl	2bc7c <EnterCritical>
   206a0:	e5d43018 	ldrb	r3, [r4, #24]
   206a4:	e3530000 	cmp	r3, #0
   206a8:	1afffff6 	bne	20688 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   206ac:	e5943020 	ldr	r3, [r4, #32]
   206b0:	e3530000 	cmp	r3, #0
   206b4:	1afffff3 	bne	20688 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   206b8:	eaffffeb 	b	2066c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x2c>
   206bc:	e3a0205f 	mov	r2, #95	; 0x5f
   206c0:	e59f1004 	ldr	r1, [pc, #4]	; 206cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x8c>
   206c4:	e59f0004 	ldr	r0, [pc, #4]	; 206d0 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x90>
   206c8:	eb001036 	bl	247a8 <assertion_failed>
   206cc:	00045e40 	.word	0x00045e40
   206d0:	00040b94 	.word	0x00040b94

000206d4 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>:
   206d4:	e92d4010 	push	{r4, lr}
   206d8:	e1a04000 	mov	r4, r0
   206dc:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   206e0:	e3500000 	cmp	r0, #0
   206e4:	1a000011 	bne	20730 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x5c>
   206e8:	e5943008 	ldr	r3, [r4, #8]
   206ec:	e59f2048 	ldr	r2, [pc, #72]	; 2073c <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x68>
   206f0:	e1a03083 	lsl	r3, r3, #1
   206f4:	e1530002 	cmp	r3, r2
   206f8:	21a03002 	movcs	r3, r2
   206fc:	e5942020 	ldr	r2, [r4, #32]
   20700:	e5843008 	str	r3, [r4, #8]
   20704:	e2823001 	add	r3, r2, #1
   20708:	e3530002 	cmp	r3, #2
   2070c:	e5843020 	str	r3, [r4, #32]
   20710:	83a03001 	movhi	r3, #1
   20714:	85c4300c 	strbhi	r3, [r4, #12]
   20718:	e3a03000 	mov	r3, #0
   2071c:	e1500003 	cmp	r0, r3
   20720:	e5c43018 	strb	r3, [r4, #24]
   20724:	08bd8010 	popeq	{r4, pc}
   20728:	e8bd4010 	pop	{r4, lr}
   2072c:	ea002d7c 	b	2bd24 <LeaveCritical>
   20730:	eb002d51 	bl	2bc7c <EnterCritical>
   20734:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   20738:	eaffffea 	b	206e8 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x14>
   2073c:	00002ee0 	.word	0x00002ee0

00020740 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>:
   20740:	e5d0300c 	ldrb	r3, [r0, #12]
   20744:	e3530000 	cmp	r3, #0
   20748:	0a00000d 	beq	20784 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x44>
   2074c:	e3a02000 	mov	r2, #0
   20750:	e1a030a1 	lsr	r3, r1, #1
   20754:	e5801010 	str	r1, [r0, #16]
   20758:	e5c0200c 	strb	r2, [r0, #12]
   2075c:	e5803014 	str	r3, [r0, #20]
   20760:	e1a03103 	lsl	r3, r3, #2
   20764:	e3530001 	cmp	r3, #1
   20768:	20811003 	addcs	r1, r1, r3
   2076c:	32811001 	addcc	r1, r1, #1
   20770:	e3510063 	cmp	r1, #99	; 0x63
   20774:	8a00000f 	bhi	207b8 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x78>
   20778:	e3a03064 	mov	r3, #100	; 0x64
   2077c:	e5803008 	str	r3, [r0, #8]
   20780:	e12fff1e 	bx	lr
   20784:	e1c021d0 	ldrd	r2, [r0, #16]
   20788:	e042c001 	sub	ip, r2, r1
   2078c:	e35c0000 	cmp	ip, #0
   20790:	b26cc000 	rsblt	ip, ip, #0
   20794:	e0622182 	rsb	r2, r2, r2, lsl #3
   20798:	e0833083 	add	r3, r3, r3, lsl #1
   2079c:	e0821001 	add	r1, r2, r1
   207a0:	e083300c 	add	r3, r3, ip
   207a4:	e1a011a1 	lsr	r1, r1, #3
   207a8:	e1a03123 	lsr	r3, r3, #2
   207ac:	e5801010 	str	r1, [r0, #16]
   207b0:	e5803014 	str	r3, [r0, #20]
   207b4:	eaffffe9 	b	20760 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x20>
   207b8:	e59f300c 	ldr	r3, [pc, #12]	; 207cc <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x8c>
   207bc:	e1510003 	cmp	r1, r3
   207c0:	21a01003 	movcs	r1, r3
   207c4:	e5801008 	str	r1, [r0, #8]
   207c8:	e12fff1e 	bx	lr
   207cc:	00002ee0 	.word	0x00002ee0

000207d0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>:
   207d0:	e92d4010 	push	{r4, lr}
   207d4:	e1a04000 	mov	r4, r0
   207d8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   207dc:	e3500000 	cmp	r0, #0
   207e0:	1a000016 	bne	20840 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x70>
   207e4:	e5d43018 	ldrb	r3, [r4, #24]
   207e8:	e3530000 	cmp	r3, #0
   207ec:	0a00000b 	beq	20820 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x50>
   207f0:	e5943020 	ldr	r3, [r4, #32]
   207f4:	e3530000 	cmp	r3, #0
   207f8:	1a000008 	bne	20820 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x50>
   207fc:	e5940000 	ldr	r0, [r4]
   20800:	e3500000 	cmp	r0, #0
   20804:	0a00000f 	beq	20848 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x78>
   20808:	eb002301 	bl	29414 <CTimer::GetTicks() const>
   2080c:	e1a01000 	mov	r1, r0
   20810:	e594301c 	ldr	r3, [r4, #28]
   20814:	e1a00004 	mov	r0, r4
   20818:	e0411003 	sub	r1, r1, r3
   2081c:	ebffffc7 	bl	20740 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>
   20820:	e3a03000 	mov	r3, #0
   20824:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   20828:	e5c43018 	strb	r3, [r4, #24]
   2082c:	e1520003 	cmp	r2, r3
   20830:	e5843020 	str	r3, [r4, #32]
   20834:	08bd8010 	popeq	{r4, pc}
   20838:	e8bd4010 	pop	{r4, lr}
   2083c:	ea002d38 	b	2bd24 <LeaveCritical>
   20840:	eb002d0d 	bl	2bc7c <EnterCritical>
   20844:	eaffffe6 	b	207e4 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x14>
   20848:	e3a02074 	mov	r2, #116	; 0x74
   2084c:	e59f1004 	ldr	r1, [pc, #4]	; 20858 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x88>
   20850:	e59f0004 	ldr	r0, [pc, #4]	; 2085c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x8c>
   20854:	eb000fd3 	bl	247a8 <assertion_failed>
   20858:	00045e40 	.word	0x00045e40
   2085c:	00040b94 	.word	0x00040b94

00020860 <CTCPRejector::~CTCPRejector()>:
   20860:	e92d4010 	push	{r4, lr}
   20864:	e1a04000 	mov	r4, r0
   20868:	e59f300c 	ldr	r3, [pc, #12]	; 2087c <CTCPRejector::~CTCPRejector()+0x1c>
   2086c:	e5803000 	str	r3, [r0]
   20870:	ebfff33a 	bl	1d560 <CNetConnection::~CNetConnection()>
   20874:	e1a00004 	mov	r0, r4
   20878:	e8bd8010 	pop	{r4, pc}
   2087c:	00045e8c 	.word	0x00045e8c

00020880 <CTCPRejector::~CTCPRejector()>:
   20880:	e92d4010 	push	{r4, lr}
   20884:	e1a04000 	mov	r4, r0
   20888:	e59f3018 	ldr	r3, [pc, #24]	; 208a8 <CTCPRejector::~CTCPRejector()+0x28>
   2088c:	e5803000 	str	r3, [r0]
   20890:	ebfff332 	bl	1d560 <CNetConnection::~CNetConnection()>
   20894:	e1a00004 	mov	r0, r4
   20898:	e3a0102c 	mov	r1, #44	; 0x2c
   2089c:	eb0029d7 	bl	2b000 <operator delete(void*, unsigned int)>
   208a0:	e1a00004 	mov	r0, r4
   208a4:	e8bd8010 	pop	{r4, pc}
   208a8:	00045e8c 	.word	0x00045e8c

000208ac <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>:
   208ac:	e3a03006 	mov	r3, #6
   208b0:	e92d4010 	push	{r4, lr}
   208b4:	e1a04000 	mov	r4, r0
   208b8:	e24dd008 	sub	sp, sp, #8
   208bc:	e58d3000 	str	r3, [sp]
   208c0:	e3a03000 	mov	r3, #0
   208c4:	ebfff2fe 	bl	1d4c4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   208c8:	e1a00004 	mov	r0, r4
   208cc:	e59f3008 	ldr	r3, [pc, #8]	; 208dc <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)+0x30>
   208d0:	e5843000 	str	r3, [r4]
   208d4:	e28dd008 	add	sp, sp, #8
   208d8:	e8bd8010 	pop	{r4, pc}
   208dc:	00045e8c 	.word	0x00045e8c

000208e0 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>:
   208e0:	e92d4010 	push	{r4, lr}
   208e4:	e3110c02 	tst	r1, #512	; 0x200
   208e8:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   208ec:	e24dd008 	sub	sp, sp, #8
   208f0:	1a000022 	bne	20980 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xa0>
   208f4:	e1d0c1b6 	ldrh	ip, [r0, #22]
   208f8:	e1a04000 	mov	r4, r0
   208fc:	e6bfcfbc 	rev16	ip, ip
   20900:	e1cdc0b8 	strh	ip, [sp, #8]
   20904:	e211ca01 	ands	ip, r1, #4096	; 0x1000
   20908:	16bfcf33 	revne	ip, r3
   2090c:	e3a03000 	mov	r3, #0
   20910:	e1d001b4 	ldrh	r0, [r0, #20]
   20914:	e6bf2f32 	rev	r2, r2
   20918:	e6bf0fb0 	rev16	r0, r0
   2091c:	e3811050 	orr	r1, r1, #80	; 0x50
   20920:	e58d200c 	str	r2, [sp, #12]
   20924:	e1cd00ba 	strh	r0, [sp, #10]
   20928:	e1cd11b4 	strh	r1, [sp, #20]
   2092c:	e3a02014 	mov	r2, #20
   20930:	e28d1008 	add	r1, sp, #8
   20934:	e284001c 	add	r0, r4, #28
   20938:	e1cd31b6 	strh	r3, [sp, #22]
   2093c:	e58d3018 	str	r3, [sp, #24]
   20940:	e58dc010 	str	ip, [sp, #16]
   20944:	eb000358 	bl	216ac <CChecksumCalculator::Calculate(void const*, unsigned int)>
   20948:	e5943008 	ldr	r3, [r4, #8]
   2094c:	e1cd01b8 	strh	r0, [sp, #24]
   20950:	e3530000 	cmp	r3, #0
   20954:	0a00000d 	beq	20990 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xb0>
   20958:	e3a0c006 	mov	ip, #6
   2095c:	e1a00003 	mov	r0, r3
   20960:	e28d2008 	add	r2, sp, #8
   20964:	e3a03014 	mov	r3, #20
   20968:	e284100c 	add	r1, r4, #12
   2096c:	e58dc000 	str	ip, [sp]
   20970:	ebffe900 	bl	1ad78 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   20974:	e28ddd19 	add	sp, sp, #1600	; 0x640
   20978:	e28dd008 	add	sp, sp, #8
   2097c:	e8bd8010 	pop	{r4, pc}
   20980:	e3a020a1 	mov	r2, #161	; 0xa1
   20984:	e59f1014 	ldr	r1, [pc, #20]	; 209a0 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc0>
   20988:	e59f0014 	ldr	r0, [pc, #20]	; 209a4 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc4>
   2098c:	eb000f85 	bl	247a8 <assertion_failed>
   20990:	e3a020c7 	mov	r2, #199	; 0xc7
   20994:	e59f1004 	ldr	r1, [pc, #4]	; 209a0 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc0>
   20998:	e59f0008 	ldr	r0, [pc, #8]	; 209a8 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc8>
   2099c:	eb000f81 	bl	247a8 <assertion_failed>
   209a0:	00045e58 	.word	0x00045e58
   209a4:	00045e68 	.word	0x00045e68
   209a8:	000453f0 	.word	0x000453f0

000209ac <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   209ac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   209b0:	e24dd008 	sub	sp, sp, #8
   209b4:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
   209b8:	e35c0006 	cmp	ip, #6
   209bc:	1a000053 	bne	20b10 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   209c0:	e3520013 	cmp	r2, #19
   209c4:	e1a07002 	mov	r7, r2
   209c8:	9a000053 	bls	20b1c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x170>
   209cc:	e3510000 	cmp	r1, #0
   209d0:	e1a04001 	mov	r4, r1
   209d4:	0a000053 	beq	20b28 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x17c>
   209d8:	e5d11002 	ldrb	r1, [r1, #2]
   209dc:	e1a06003 	mov	r6, r3
   209e0:	e5d43003 	ldrb	r3, [r4, #3]
   209e4:	e1a05000 	mov	r5, r0
   209e8:	e1811403 	orr	r1, r1, r3, lsl #8
   209ec:	e6bf1fb1 	rev16	r1, r1
   209f0:	e6ff3071 	uxth	r3, r1
   209f4:	e3530000 	cmp	r3, #0
   209f8:	e1c011b6 	strh	r1, [r0, #22]
   209fc:	0a000046 	beq	20b1c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x170>
   20a00:	e5900004 	ldr	r0, [r0, #4]
   20a04:	e3500000 	cmp	r0, #0
   20a08:	0a00004a 	beq	20b38 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18c>
   20a0c:	eb000068 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   20a10:	eb0001a1 	bl	2109c <CIPAddress::IsNull() const>
   20a14:	e3500000 	cmp	r0, #0
   20a18:	1a00003c 	bne	20b10 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   20a1c:	e5950004 	ldr	r0, [r5, #4]
   20a20:	eb000063 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   20a24:	e285801c 	add	r8, r5, #28
   20a28:	e1a01000 	mov	r1, r0
   20a2c:	e1a00008 	mov	r0, r8
   20a30:	e58d8004 	str	r8, [sp, #4]
   20a34:	eb0002ed 	bl	215f0 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   20a38:	e1a01006 	mov	r1, r6
   20a3c:	e59d0004 	ldr	r0, [sp, #4]
   20a40:	eb0002ee 	bl	21600 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   20a44:	e1a02007 	mov	r2, r7
   20a48:	e1a01004 	mov	r1, r4
   20a4c:	e59d0004 	ldr	r0, [sp, #4]
   20a50:	eb000315 	bl	216ac <CChecksumCalculator::Calculate(void const*, unsigned int)>
   20a54:	e3500000 	cmp	r0, #0
   20a58:	1a00002c 	bne	20b10 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   20a5c:	e5d42005 	ldrb	r2, [r4, #5]
   20a60:	e5d49004 	ldrb	r9, [r4, #4]
   20a64:	e5d41009 	ldrb	r1, [r4, #9]
   20a68:	e1899402 	orr	r9, r9, r2, lsl #8
   20a6c:	e5d42006 	ldrb	r2, [r4, #6]
   20a70:	e5d4300c 	ldrb	r3, [r4, #12]
   20a74:	e5d4a008 	ldrb	sl, [r4, #8]
   20a78:	e5d4800d 	ldrb	r8, [r4, #13]
   20a7c:	e1899802 	orr	r9, r9, r2, lsl #16
   20a80:	e5d4200a 	ldrb	r2, [r4, #10]
   20a84:	e1838408 	orr	r8, r3, r8, lsl #8
   20a88:	e18aa401 	orr	sl, sl, r1, lsl #8
   20a8c:	e1a03223 	lsr	r3, r3, #4
   20a90:	e5d41007 	ldrb	r1, [r4, #7]
   20a94:	e0477103 	sub	r7, r7, r3, lsl #2
   20a98:	e3180c02 	tst	r8, #512	; 0x200
   20a9c:	e18aa802 	orr	sl, sl, r2, lsl #16
   20aa0:	e5d4200b 	ldrb	r2, [r4, #11]
   20aa4:	12877001 	addne	r7, r7, #1
   20aa8:	e285000c 	add	r0, r5, #12
   20aac:	e3180c01 	tst	r8, #256	; 0x100
   20ab0:	e1899c01 	orr	r9, r9, r1, lsl #24
   20ab4:	e1a01006 	mov	r1, r6
   20ab8:	e18aac02 	orr	sl, sl, r2, lsl #24
   20abc:	12877001 	addne	r7, r7, #1
   20ac0:	eb000132 	bl	20f90 <CIPAddress::Set(CIPAddress const&)>
   20ac4:	e5d42000 	ldrb	r2, [r4]
   20ac8:	e5d41001 	ldrb	r1, [r4, #1]
   20acc:	e2183b01 	ands	r3, r8, #1024	; 0x400
   20ad0:	e1822401 	orr	r2, r2, r1, lsl #8
   20ad4:	e6bf2fb2 	rev16	r2, r2
   20ad8:	13a00001 	movne	r0, #1
   20adc:	e1c521b4 	strh	r2, [r5, #20]
   20ae0:	1a00000b 	bne	20b14 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x168>
   20ae4:	e2182a01 	ands	r2, r8, #4096	; 0x1000
   20ae8:	06bf3f39 	reveq	r3, r9
   20aec:	01a00005 	moveq	r0, r5
   20af0:	03a01b05 	moveq	r1, #5120	; 0x1400
   20af4:	11a00005 	movne	r0, r5
   20af8:	13a01b01 	movne	r1, #1024	; 0x400
   20afc:	00833007 	addeq	r3, r3, r7
   20b00:	16bf2f3a 	revne	r2, sl
   20b04:	ebffff75 	bl	208e0 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>
   20b08:	e3a00001 	mov	r0, #1
   20b0c:	ea000000 	b	20b14 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x168>
   20b10:	e3a00000 	mov	r0, #0
   20b14:	e28dd008 	add	sp, sp, #8
   20b18:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20b1c:	e3e00000 	mvn	r0, #0
   20b20:	e28dd008 	add	sp, sp, #8
   20b24:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20b28:	e3a02052 	mov	r2, #82	; 0x52
   20b2c:	e59f1014 	ldr	r1, [pc, #20]	; 20b48 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x19c>
   20b30:	e59f0014 	ldr	r0, [pc, #20]	; 20b4c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1a0>
   20b34:	eb000f1b 	bl	247a8 <assertion_failed>
   20b38:	e3a0205b 	mov	r2, #91	; 0x5b
   20b3c:	e59f1004 	ldr	r1, [pc, #4]	; 20b48 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x19c>
   20b40:	e59f0008 	ldr	r0, [pc, #8]	; 20b50 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1a4>
   20b44:	eb000f17 	bl	247a8 <assertion_failed>
   20b48:	00045e58 	.word	0x00045e58
   20b4c:	000454d4 	.word	0x000454d4
   20b50:	000453dc 	.word	0x000453dc

00020b54 <CNetConfig::~CNetConfig()>:
   20b54:	e92d4010 	push	{r4, lr}
   20b58:	e1a04000 	mov	r4, r0
   20b5c:	e2800024 	add	r0, r0, #36	; 0x24
   20b60:	eb000084 	bl	20d78 <CIPAddress::~CIPAddress()>
   20b64:	e284001c 	add	r0, r4, #28
   20b68:	eb000082 	bl	20d78 <CIPAddress::~CIPAddress()>
   20b6c:	e2840014 	add	r0, r4, #20
   20b70:	eb000080 	bl	20d78 <CIPAddress::~CIPAddress()>
   20b74:	e284000c 	add	r0, r4, #12
   20b78:	eb00007e 	bl	20d78 <CIPAddress::~CIPAddress()>
   20b7c:	e2840004 	add	r0, r4, #4
   20b80:	eb00007c 	bl	20d78 <CIPAddress::~CIPAddress()>
   20b84:	e1a00004 	mov	r0, r4
   20b88:	e8bd8010 	pop	{r4, pc}

00020b8c <CNetConfig::SetDHCP(bool)>:
   20b8c:	e5c01000 	strb	r1, [r0]
   20b90:	e12fff1e 	bx	lr

00020b94 <CNetConfig::SetDefaultGateway(unsigned int)>:
   20b94:	e2800014 	add	r0, r0, #20
   20b98:	ea0000e3 	b	20f2c <CIPAddress::Set(unsigned int)>

00020b9c <CNetConfig::SetDNSServer(unsigned int)>:
   20b9c:	e280001c 	add	r0, r0, #28
   20ba0:	ea0000e1 	b	20f2c <CIPAddress::Set(unsigned int)>

00020ba4 <CNetConfig::SetDefaultGateway(unsigned char const*)>:
   20ba4:	e2800014 	add	r0, r0, #20
   20ba8:	ea0000e3 	b	20f3c <CIPAddress::Set(unsigned char const*)>

00020bac <CNetConfig::SetDNSServer(unsigned char const*)>:
   20bac:	e280001c 	add	r0, r0, #28
   20bb0:	ea0000e1 	b	20f3c <CIPAddress::Set(unsigned char const*)>

00020bb4 <CNetConfig::GetIPAddress() const>:
   20bb4:	e2800004 	add	r0, r0, #4
   20bb8:	e12fff1e 	bx	lr

00020bbc <CNetConfig::IsDHCPUsed() const>:
   20bbc:	e5d00000 	ldrb	r0, [r0]
   20bc0:	e12fff1e 	bx	lr

00020bc4 <CNetConfig::GetNetMask() const>:
   20bc4:	e280000c 	add	r0, r0, #12
   20bc8:	ea000110 	b	21010 <CIPAddress::Get() const>

00020bcc <CNetConfig::GetDefaultGateway() const>:
   20bcc:	e2800014 	add	r0, r0, #20
   20bd0:	e12fff1e 	bx	lr

00020bd4 <CNetConfig::GetDNSServer() const>:
   20bd4:	e280001c 	add	r0, r0, #28
   20bd8:	e12fff1e 	bx	lr

00020bdc <CNetConfig::GetBroadcastAddress() const>:
   20bdc:	e2800024 	add	r0, r0, #36	; 0x24
   20be0:	e12fff1e 	bx	lr

00020be4 <CNetConfig::UpdateBroadcastAddress()>:
   20be4:	e92d4010 	push	{r4, lr}
   20be8:	e1a04000 	mov	r4, r0
   20bec:	e24dd008 	sub	sp, sp, #8
   20bf0:	e1a0100d 	mov	r1, sp
   20bf4:	e2800004 	add	r0, r0, #4
   20bf8:	eb000110 	bl	21040 <CIPAddress::CopyTo(unsigned char*) const>
   20bfc:	e284000c 	add	r0, r4, #12
   20c00:	e28d1004 	add	r1, sp, #4
   20c04:	eb00010d 	bl	21040 <CIPAddress::CopyTo(unsigned char*) const>
   20c08:	e89d000a 	ldm	sp, {r1, r3}
   20c0c:	e1e03003 	mvn	r3, r3
   20c10:	e2840024 	add	r0, r4, #36	; 0x24
   20c14:	e1831001 	orr	r1, r3, r1
   20c18:	eb0000c3 	bl	20f2c <CIPAddress::Set(unsigned int)>
   20c1c:	e28dd008 	add	sp, sp, #8
   20c20:	e8bd8010 	pop	{r4, pc}

00020c24 <CNetConfig::Reset()>:
   20c24:	e92d4010 	push	{r4, lr}
   20c28:	e1a04000 	mov	r4, r0
   20c2c:	e59f1034 	ldr	r1, [pc, #52]	; 20c68 <CNetConfig::Reset()+0x44>
   20c30:	e2800004 	add	r0, r0, #4
   20c34:	eb0000c0 	bl	20f3c <CIPAddress::Set(unsigned char const*)>
   20c38:	e284000c 	add	r0, r4, #12
   20c3c:	e59f1024 	ldr	r1, [pc, #36]	; 20c68 <CNetConfig::Reset()+0x44>
   20c40:	eb0000bd 	bl	20f3c <CIPAddress::Set(unsigned char const*)>
   20c44:	e2840014 	add	r0, r4, #20
   20c48:	e59f1018 	ldr	r1, [pc, #24]	; 20c68 <CNetConfig::Reset()+0x44>
   20c4c:	eb0000ba 	bl	20f3c <CIPAddress::Set(unsigned char const*)>
   20c50:	e284001c 	add	r0, r4, #28
   20c54:	e59f100c 	ldr	r1, [pc, #12]	; 20c68 <CNetConfig::Reset()+0x44>
   20c58:	eb0000b7 	bl	20f3c <CIPAddress::Set(unsigned char const*)>
   20c5c:	e1a00004 	mov	r0, r4
   20c60:	e8bd4010 	pop	{r4, lr}
   20c64:	eaffffde 	b	20be4 <CNetConfig::UpdateBroadcastAddress()>
   20c68:	00045ec8 	.word	0x00045ec8

00020c6c <CNetConfig::CNetConfig()>:
   20c6c:	e3a03001 	mov	r3, #1
   20c70:	e92d4010 	push	{r4, lr}
   20c74:	e1a04000 	mov	r4, r0
   20c78:	e4c03004 	strb	r3, [r0], #4
   20c7c:	eb000027 	bl	20d20 <CIPAddress::CIPAddress()>
   20c80:	e284000c 	add	r0, r4, #12
   20c84:	eb000025 	bl	20d20 <CIPAddress::CIPAddress()>
   20c88:	e2840014 	add	r0, r4, #20
   20c8c:	eb000023 	bl	20d20 <CIPAddress::CIPAddress()>
   20c90:	e284001c 	add	r0, r4, #28
   20c94:	eb000021 	bl	20d20 <CIPAddress::CIPAddress()>
   20c98:	e2840024 	add	r0, r4, #36	; 0x24
   20c9c:	eb00001f 	bl	20d20 <CIPAddress::CIPAddress()>
   20ca0:	e1a00004 	mov	r0, r4
   20ca4:	ebffffde 	bl	20c24 <CNetConfig::Reset()>
   20ca8:	e1a00004 	mov	r0, r4
   20cac:	e8bd8010 	pop	{r4, pc}

00020cb0 <CNetConfig::SetIPAddress(unsigned int)>:
   20cb0:	e92d4010 	push	{r4, lr}
   20cb4:	e1a04000 	mov	r4, r0
   20cb8:	e2800004 	add	r0, r0, #4
   20cbc:	eb00009a 	bl	20f2c <CIPAddress::Set(unsigned int)>
   20cc0:	e1a00004 	mov	r0, r4
   20cc4:	e8bd4010 	pop	{r4, lr}
   20cc8:	eaffffc5 	b	20be4 <CNetConfig::UpdateBroadcastAddress()>

00020ccc <CNetConfig::SetNetMask(unsigned int)>:
   20ccc:	e92d4010 	push	{r4, lr}
   20cd0:	e1a04000 	mov	r4, r0
   20cd4:	e280000c 	add	r0, r0, #12
   20cd8:	eb000093 	bl	20f2c <CIPAddress::Set(unsigned int)>
   20cdc:	e1a00004 	mov	r0, r4
   20ce0:	e8bd4010 	pop	{r4, lr}
   20ce4:	eaffffbe 	b	20be4 <CNetConfig::UpdateBroadcastAddress()>

00020ce8 <CNetConfig::SetIPAddress(unsigned char const*)>:
   20ce8:	e92d4010 	push	{r4, lr}
   20cec:	e1a04000 	mov	r4, r0
   20cf0:	e2800004 	add	r0, r0, #4
   20cf4:	eb000090 	bl	20f3c <CIPAddress::Set(unsigned char const*)>
   20cf8:	e1a00004 	mov	r0, r4
   20cfc:	e8bd4010 	pop	{r4, lr}
   20d00:	eaffffb7 	b	20be4 <CNetConfig::UpdateBroadcastAddress()>

00020d04 <CNetConfig::SetNetMask(unsigned char const*)>:
   20d04:	e92d4010 	push	{r4, lr}
   20d08:	e1a04000 	mov	r4, r0
   20d0c:	e280000c 	add	r0, r0, #12
   20d10:	eb000089 	bl	20f3c <CIPAddress::Set(unsigned char const*)>
   20d14:	e1a00004 	mov	r0, r4
   20d18:	e8bd4010 	pop	{r4, lr}
   20d1c:	eaffffb0 	b	20be4 <CNetConfig::UpdateBroadcastAddress()>

00020d20 <CIPAddress::CIPAddress()>:
   20d20:	e3a02000 	mov	r2, #0
   20d24:	e5c02000 	strb	r2, [r0]
   20d28:	e12fff1e 	bx	lr

00020d2c <CIPAddress::CIPAddress(unsigned int)>:
   20d2c:	e3a02001 	mov	r2, #1
   20d30:	e5801004 	str	r1, [r0, #4]
   20d34:	e5c02000 	strb	r2, [r0]
   20d38:	e12fff1e 	bx	lr

00020d3c <CIPAddress::CIPAddress(CIPAddress const&)>:
   20d3c:	e5d12000 	ldrb	r2, [r1]
   20d40:	e3520000 	cmp	r2, #0
   20d44:	0a000004 	beq	20d5c <CIPAddress::CIPAddress(CIPAddress const&)+0x20>
   20d48:	e3a0c001 	mov	ip, #1
   20d4c:	e5912004 	ldr	r2, [r1, #4]
   20d50:	e5c0c000 	strb	ip, [r0]
   20d54:	e5802004 	str	r2, [r0, #4]
   20d58:	e12fff1e 	bx	lr
   20d5c:	e3a0202e 	mov	r2, #46	; 0x2e
   20d60:	e92d4010 	push	{r4, lr}
   20d64:	e59f1004 	ldr	r1, [pc, #4]	; 20d70 <CIPAddress::CIPAddress(CIPAddress const&)+0x34>
   20d68:	e59f0004 	ldr	r0, [pc, #4]	; 20d74 <CIPAddress::CIPAddress(CIPAddress const&)+0x38>
   20d6c:	eb000e8d 	bl	247a8 <assertion_failed>
   20d70:	00045ecc 	.word	0x00045ecc
   20d74:	00045edc 	.word	0x00045edc

00020d78 <CIPAddress::~CIPAddress()>:
   20d78:	e12fff1e 	bx	lr

00020d7c <CIPAddress::operator==(CIPAddress const&) const>:
   20d7c:	e5d03000 	ldrb	r3, [r0]
   20d80:	e92d4010 	push	{r4, lr}
   20d84:	e3530000 	cmp	r3, #0
   20d88:	0a000008 	beq	20db0 <CIPAddress::operator==(CIPAddress const&) const+0x34>
   20d8c:	e5d13000 	ldrb	r3, [r1]
   20d90:	e3530000 	cmp	r3, #0
   20d94:	0a000009 	beq	20dc0 <CIPAddress::operator==(CIPAddress const&) const+0x44>
   20d98:	e5900004 	ldr	r0, [r0, #4]
   20d9c:	e5913004 	ldr	r3, [r1, #4]
   20da0:	e0400003 	sub	r0, r0, r3
   20da4:	e16f0f10 	clz	r0, r0
   20da8:	e1a002a0 	lsr	r0, r0, #5
   20dac:	e8bd8010 	pop	{r4, pc}
   20db0:	e3a0203e 	mov	r2, #62	; 0x3e
   20db4:	e59f1014 	ldr	r1, [pc, #20]	; 20dd0 <CIPAddress::operator==(CIPAddress const&) const+0x54>
   20db8:	e59f0014 	ldr	r0, [pc, #20]	; 20dd4 <CIPAddress::operator==(CIPAddress const&) const+0x58>
   20dbc:	eb000e79 	bl	247a8 <assertion_failed>
   20dc0:	e3a0203f 	mov	r2, #63	; 0x3f
   20dc4:	e59f1004 	ldr	r1, [pc, #4]	; 20dd0 <CIPAddress::operator==(CIPAddress const&) const+0x54>
   20dc8:	e59f0008 	ldr	r0, [pc, #8]	; 20dd8 <CIPAddress::operator==(CIPAddress const&) const+0x5c>
   20dcc:	eb000e75 	bl	247a8 <assertion_failed>
   20dd0:	00045ecc 	.word	0x00045ecc
   20dd4:	00041314 	.word	0x00041314
   20dd8:	00045ef0 	.word	0x00045ef0

00020ddc <CIPAddress::operator!=(CIPAddress const&) const>:
   20ddc:	e5d03000 	ldrb	r3, [r0]
   20de0:	e92d4010 	push	{r4, lr}
   20de4:	e3530000 	cmp	r3, #0
   20de8:	0a000007 	beq	20e0c <CIPAddress::operator!=(CIPAddress const&) const+0x30>
   20dec:	e5d13000 	ldrb	r3, [r1]
   20df0:	e3530000 	cmp	r3, #0
   20df4:	0a000008 	beq	20e1c <CIPAddress::operator!=(CIPAddress const&) const+0x40>
   20df8:	e5900004 	ldr	r0, [r0, #4]
   20dfc:	e5913004 	ldr	r3, [r1, #4]
   20e00:	e0500003 	subs	r0, r0, r3
   20e04:	13a00001 	movne	r0, #1
   20e08:	e8bd8010 	pop	{r4, pc}
   20e0c:	e3a02045 	mov	r2, #69	; 0x45
   20e10:	e59f1014 	ldr	r1, [pc, #20]	; 20e2c <CIPAddress::operator!=(CIPAddress const&) const+0x50>
   20e14:	e59f0014 	ldr	r0, [pc, #20]	; 20e30 <CIPAddress::operator!=(CIPAddress const&) const+0x54>
   20e18:	eb000e62 	bl	247a8 <assertion_failed>
   20e1c:	e3a02046 	mov	r2, #70	; 0x46
   20e20:	e59f1004 	ldr	r1, [pc, #4]	; 20e2c <CIPAddress::operator!=(CIPAddress const&) const+0x50>
   20e24:	e59f0008 	ldr	r0, [pc, #8]	; 20e34 <CIPAddress::operator!=(CIPAddress const&) const+0x58>
   20e28:	eb000e5e 	bl	247a8 <assertion_failed>
   20e2c:	00045ecc 	.word	0x00045ecc
   20e30:	00041314 	.word	0x00041314
   20e34:	00045ef0 	.word	0x00045ef0

00020e38 <CIPAddress::operator==(unsigned char const*) const>:
   20e38:	e5d02000 	ldrb	r2, [r0]
   20e3c:	e92d4010 	push	{r4, lr}
   20e40:	e3520000 	cmp	r2, #0
   20e44:	0a000007 	beq	20e68 <CIPAddress::operator==(unsigned char const*) const+0x30>
   20e48:	e3510000 	cmp	r1, #0
   20e4c:	0a000009 	beq	20e78 <CIPAddress::operator==(unsigned char const*) const+0x40>
   20e50:	e3a02004 	mov	r2, #4
   20e54:	e2800004 	add	r0, r0, #4
   20e58:	eb002465 	bl	29ff4 <memcmp>
   20e5c:	e16f0f10 	clz	r0, r0
   20e60:	e1a002a0 	lsr	r0, r0, #5
   20e64:	e8bd8010 	pop	{r4, pc}
   20e68:	e3a0204c 	mov	r2, #76	; 0x4c
   20e6c:	e59f1014 	ldr	r1, [pc, #20]	; 20e88 <CIPAddress::operator==(unsigned char const*) const+0x50>
   20e70:	e59f0014 	ldr	r0, [pc, #20]	; 20e8c <CIPAddress::operator==(unsigned char const*) const+0x54>
   20e74:	eb000e4b 	bl	247a8 <assertion_failed>
   20e78:	e3a0204d 	mov	r2, #77	; 0x4d
   20e7c:	e59f1004 	ldr	r1, [pc, #4]	; 20e88 <CIPAddress::operator==(unsigned char const*) const+0x50>
   20e80:	e59f0008 	ldr	r0, [pc, #8]	; 20e90 <CIPAddress::operator==(unsigned char const*) const+0x58>
   20e84:	eb000e47 	bl	247a8 <assertion_failed>
   20e88:	00045ecc 	.word	0x00045ecc
   20e8c:	00041314 	.word	0x00041314
   20e90:	00045f04 	.word	0x00045f04

00020e94 <CIPAddress::operator!=(unsigned char const*) const>:
   20e94:	e92d4010 	push	{r4, lr}
   20e98:	ebffffe6 	bl	20e38 <CIPAddress::operator==(unsigned char const*) const>
   20e9c:	e2200001 	eor	r0, r0, #1
   20ea0:	e6ef0070 	uxtb	r0, r0
   20ea4:	e8bd8010 	pop	{r4, pc}

00020ea8 <CIPAddress::operator==(unsigned int) const>:
   20ea8:	e5d03000 	ldrb	r3, [r0]
   20eac:	e3530000 	cmp	r3, #0
   20eb0:	0a000004 	beq	20ec8 <CIPAddress::operator==(unsigned int) const+0x20>
   20eb4:	e5900004 	ldr	r0, [r0, #4]
   20eb8:	e0400001 	sub	r0, r0, r1
   20ebc:	e16f0f10 	clz	r0, r0
   20ec0:	e1a002a0 	lsr	r0, r0, #5
   20ec4:	e12fff1e 	bx	lr
   20ec8:	e3a02058 	mov	r2, #88	; 0x58
   20ecc:	e92d4010 	push	{r4, lr}
   20ed0:	e59f1004 	ldr	r1, [pc, #4]	; 20edc <CIPAddress::operator==(unsigned int) const+0x34>
   20ed4:	e59f0004 	ldr	r0, [pc, #4]	; 20ee0 <CIPAddress::operator==(unsigned int) const+0x38>
   20ed8:	eb000e32 	bl	247a8 <assertion_failed>
   20edc:	00045ecc 	.word	0x00045ecc
   20ee0:	00041314 	.word	0x00041314

00020ee4 <CIPAddress::operator!=(unsigned int) const>:
   20ee4:	e5d03000 	ldrb	r3, [r0]
   20ee8:	e3530000 	cmp	r3, #0
   20eec:	0a000003 	beq	20f00 <CIPAddress::operator!=(unsigned int) const+0x1c>
   20ef0:	e5900004 	ldr	r0, [r0, #4]
   20ef4:	e0500001 	subs	r0, r0, r1
   20ef8:	13a00001 	movne	r0, #1
   20efc:	e12fff1e 	bx	lr
   20f00:	e3a0205e 	mov	r2, #94	; 0x5e
   20f04:	e92d4010 	push	{r4, lr}
   20f08:	e59f1004 	ldr	r1, [pc, #4]	; 20f14 <CIPAddress::operator!=(unsigned int) const+0x30>
   20f0c:	e59f0004 	ldr	r0, [pc, #4]	; 20f18 <CIPAddress::operator!=(unsigned int) const+0x34>
   20f10:	eb000e24 	bl	247a8 <assertion_failed>
   20f14:	00045ecc 	.word	0x00045ecc
   20f18:	00041314 	.word	0x00041314

00020f1c <CIPAddress::operator=(unsigned int)>:
   20f1c:	e3a02001 	mov	r2, #1
   20f20:	e5801004 	str	r1, [r0, #4]
   20f24:	e5c02000 	strb	r2, [r0]
   20f28:	e12fff1e 	bx	lr

00020f2c <CIPAddress::Set(unsigned int)>:
   20f2c:	e3a03001 	mov	r3, #1
   20f30:	e5801004 	str	r1, [r0, #4]
   20f34:	e5c03000 	strb	r3, [r0]
   20f38:	e12fff1e 	bx	lr

00020f3c <CIPAddress::Set(unsigned char const*)>:
   20f3c:	e3510000 	cmp	r1, #0
   20f40:	e92d4010 	push	{r4, lr}
   20f44:	0a000006 	beq	20f64 <CIPAddress::Set(unsigned char const*)+0x28>
   20f48:	e3a02004 	mov	r2, #4
   20f4c:	e1a04000 	mov	r4, r0
   20f50:	e0800002 	add	r0, r0, r2
   20f54:	eb002635 	bl	2a830 <memcpy>
   20f58:	e3a03001 	mov	r3, #1
   20f5c:	e5c43000 	strb	r3, [r4]
   20f60:	e8bd8010 	pop	{r4, pc}
   20f64:	e3a02075 	mov	r2, #117	; 0x75
   20f68:	e59f1004 	ldr	r1, [pc, #4]	; 20f74 <CIPAddress::Set(unsigned char const*)+0x38>
   20f6c:	e59f0004 	ldr	r0, [pc, #4]	; 20f78 <CIPAddress::Set(unsigned char const*)+0x3c>
   20f70:	eb000e0c 	bl	247a8 <assertion_failed>
   20f74:	00045ecc 	.word	0x00045ecc
   20f78:	00045f14 	.word	0x00045f14

00020f7c <CIPAddress::CIPAddress(unsigned char const*)>:
   20f7c:	e92d4010 	push	{r4, lr}
   20f80:	e1a04000 	mov	r4, r0
   20f84:	ebffffec 	bl	20f3c <CIPAddress::Set(unsigned char const*)>
   20f88:	e1a00004 	mov	r0, r4
   20f8c:	e8bd8010 	pop	{r4, pc}

00020f90 <CIPAddress::Set(CIPAddress const&)>:
   20f90:	e5d13000 	ldrb	r3, [r1]
   20f94:	e3530000 	cmp	r3, #0
   20f98:	0a000004 	beq	20fb0 <CIPAddress::Set(CIPAddress const&)+0x20>
   20f9c:	e3a02001 	mov	r2, #1
   20fa0:	e5913004 	ldr	r3, [r1, #4]
   20fa4:	e5c02000 	strb	r2, [r0]
   20fa8:	e5803004 	str	r3, [r0, #4]
   20fac:	e12fff1e 	bx	lr
   20fb0:	e3a0207e 	mov	r2, #126	; 0x7e
   20fb4:	e92d4010 	push	{r4, lr}
   20fb8:	e59f1004 	ldr	r1, [pc, #4]	; 20fc4 <CIPAddress::Set(CIPAddress const&)+0x34>
   20fbc:	e59f0004 	ldr	r0, [pc, #4]	; 20fc8 <CIPAddress::Set(CIPAddress const&)+0x38>
   20fc0:	eb000df8 	bl	247a8 <assertion_failed>
   20fc4:	00045ecc 	.word	0x00045ecc
   20fc8:	00045edc 	.word	0x00045edc

00020fcc <CIPAddress::SetBroadcast()>:
   20fcc:	e3e02000 	mvn	r2, #0
   20fd0:	e3a03001 	mov	r3, #1
   20fd4:	e5802004 	str	r2, [r0, #4]
   20fd8:	e5c03000 	strb	r3, [r0]
   20fdc:	e12fff1e 	bx	lr

00020fe0 <CIPAddress::operator unsigned int() const>:
   20fe0:	e5d03000 	ldrb	r3, [r0]
   20fe4:	e3530000 	cmp	r3, #0
   20fe8:	0a000001 	beq	20ff4 <CIPAddress::operator unsigned int() const+0x14>
   20fec:	e5900004 	ldr	r0, [r0, #4]
   20ff0:	e12fff1e 	bx	lr
   20ff4:	e3a0208f 	mov	r2, #143	; 0x8f
   20ff8:	e92d4010 	push	{r4, lr}
   20ffc:	e59f1004 	ldr	r1, [pc, #4]	; 21008 <CIPAddress::operator unsigned int() const+0x28>
   21000:	e59f0004 	ldr	r0, [pc, #4]	; 2100c <CIPAddress::operator unsigned int() const+0x2c>
   21004:	eb000de7 	bl	247a8 <assertion_failed>
   21008:	00045ecc 	.word	0x00045ecc
   2100c:	00041314 	.word	0x00041314

00021010 <CIPAddress::Get() const>:
   21010:	e5d03000 	ldrb	r3, [r0]
   21014:	e3530000 	cmp	r3, #0
   21018:	0a000001 	beq	21024 <CIPAddress::Get() const+0x14>
   2101c:	e2800004 	add	r0, r0, #4
   21020:	e12fff1e 	bx	lr
   21024:	e3a02095 	mov	r2, #149	; 0x95
   21028:	e92d4010 	push	{r4, lr}
   2102c:	e59f1004 	ldr	r1, [pc, #4]	; 21038 <CIPAddress::Get() const+0x28>
   21030:	e59f0004 	ldr	r0, [pc, #4]	; 2103c <CIPAddress::Get() const+0x2c>
   21034:	eb000ddb 	bl	247a8 <assertion_failed>
   21038:	00045ecc 	.word	0x00045ecc
   2103c:	00041314 	.word	0x00041314

00021040 <CIPAddress::CopyTo(unsigned char*) const>:
   21040:	e5d02000 	ldrb	r2, [r0]
   21044:	e92d4010 	push	{r4, lr}
   21048:	e3520000 	cmp	r2, #0
   2104c:	0a000007 	beq	21070 <CIPAddress::CopyTo(unsigned char*) const+0x30>
   21050:	e3510000 	cmp	r1, #0
   21054:	e1a03000 	mov	r3, r0
   21058:	e1a00001 	mov	r0, r1
   2105c:	0a000007 	beq	21080 <CIPAddress::CopyTo(unsigned char*) const+0x40>
   21060:	e8bd4010 	pop	{r4, lr}
   21064:	e3a02004 	mov	r2, #4
   21068:	e2831004 	add	r1, r3, #4
   2106c:	ea0025ef 	b	2a830 <memcpy>
   21070:	e3a0209b 	mov	r2, #155	; 0x9b
   21074:	e59f1014 	ldr	r1, [pc, #20]	; 21090 <CIPAddress::CopyTo(unsigned char*) const+0x50>
   21078:	e59f0014 	ldr	r0, [pc, #20]	; 21094 <CIPAddress::CopyTo(unsigned char*) const+0x54>
   2107c:	eb000dc9 	bl	247a8 <assertion_failed>
   21080:	e3a0209c 	mov	r2, #156	; 0x9c
   21084:	e59f1004 	ldr	r1, [pc, #4]	; 21090 <CIPAddress::CopyTo(unsigned char*) const+0x50>
   21088:	e59f0008 	ldr	r0, [pc, #8]	; 21098 <CIPAddress::CopyTo(unsigned char*) const+0x58>
   2108c:	eb000dc5 	bl	247a8 <assertion_failed>
   21090:	00045ecc 	.word	0x00045ecc
   21094:	00041314 	.word	0x00041314
   21098:	0004256c 	.word	0x0004256c

0002109c <CIPAddress::IsNull() const>:
   2109c:	e5d03000 	ldrb	r3, [r0]
   210a0:	e3530000 	cmp	r3, #0
   210a4:	0a000003 	beq	210b8 <CIPAddress::IsNull() const+0x1c>
   210a8:	e5900004 	ldr	r0, [r0, #4]
   210ac:	e16f0f10 	clz	r0, r0
   210b0:	e1a002a0 	lsr	r0, r0, #5
   210b4:	e12fff1e 	bx	lr
   210b8:	e3a020a2 	mov	r2, #162	; 0xa2
   210bc:	e92d4010 	push	{r4, lr}
   210c0:	e59f1004 	ldr	r1, [pc, #4]	; 210cc <CIPAddress::IsNull() const+0x30>
   210c4:	e59f0004 	ldr	r0, [pc, #4]	; 210d0 <CIPAddress::IsNull() const+0x34>
   210c8:	eb000db6 	bl	247a8 <assertion_failed>
   210cc:	00045ecc 	.word	0x00045ecc
   210d0:	00041314 	.word	0x00041314

000210d4 <CIPAddress::IsBroadcast() const>:
   210d4:	e5d03000 	ldrb	r3, [r0]
   210d8:	e3530000 	cmp	r3, #0
   210dc:	0a000004 	beq	210f4 <CIPAddress::IsBroadcast() const+0x20>
   210e0:	e5900004 	ldr	r0, [r0, #4]
   210e4:	e3700001 	cmn	r0, #1
   210e8:	13a00000 	movne	r0, #0
   210ec:	03a00001 	moveq	r0, #1
   210f0:	e12fff1e 	bx	lr
   210f4:	e3a020a8 	mov	r2, #168	; 0xa8
   210f8:	e92d4010 	push	{r4, lr}
   210fc:	e59f1004 	ldr	r1, [pc, #4]	; 21108 <CIPAddress::IsBroadcast() const+0x34>
   21100:	e59f0004 	ldr	r0, [pc, #4]	; 2110c <CIPAddress::IsBroadcast() const+0x38>
   21104:	eb000da7 	bl	247a8 <assertion_failed>
   21108:	00045ecc 	.word	0x00045ecc
   2110c:	00041314 	.word	0x00041314

00021110 <CIPAddress::GetSize() const>:
   21110:	e3a00004 	mov	r0, #4
   21114:	e12fff1e 	bx	lr

00021118 <CIPAddress::Format(CString*) const>:
   21118:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2111c:	e5d02000 	ldrb	r2, [r0]
   21120:	e24dd00c 	sub	sp, sp, #12
   21124:	e3520000 	cmp	r2, #0
   21128:	0a000010 	beq	21170 <CIPAddress::Format(CString*) const+0x58>
   2112c:	e3510000 	cmp	r1, #0
   21130:	e1a03000 	mov	r3, r0
   21134:	e1a00001 	mov	r0, r1
   21138:	0a000010 	beq	21180 <CIPAddress::Format(CString*) const+0x68>
   2113c:	e5932004 	ldr	r2, [r3, #4]
   21140:	e1a01822 	lsr	r1, r2, #16
   21144:	e1a0cc22 	lsr	ip, r2, #24
   21148:	e6ef1071 	uxtb	r1, r1
   2114c:	e1a03422 	lsr	r3, r2, #8
   21150:	e58d1000 	str	r1, [sp]
   21154:	e6ef3073 	uxtb	r3, r3
   21158:	e59f1030 	ldr	r1, [pc, #48]	; 21190 <CIPAddress::Format(CString*) const+0x78>
   2115c:	e58dc004 	str	ip, [sp, #4]
   21160:	e6ef2072 	uxtb	r2, r2
   21164:	eb001fb2 	bl	29034 <CString::Format(char const*, ...)>
   21168:	e28dd00c 	add	sp, sp, #12
   2116c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   21170:	e3a020b3 	mov	r2, #179	; 0xb3
   21174:	e59f1018 	ldr	r1, [pc, #24]	; 21194 <CIPAddress::Format(CString*) const+0x7c>
   21178:	e59f0018 	ldr	r0, [pc, #24]	; 21198 <CIPAddress::Format(CString*) const+0x80>
   2117c:	eb000d89 	bl	247a8 <assertion_failed>
   21180:	e3a020b4 	mov	r2, #180	; 0xb4
   21184:	e59f1008 	ldr	r1, [pc, #8]	; 21194 <CIPAddress::Format(CString*) const+0x7c>
   21188:	e59f000c 	ldr	r0, [pc, #12]	; 2119c <CIPAddress::Format(CString*) const+0x84>
   2118c:	eb000d85 	bl	247a8 <assertion_failed>
   21190:	00045f34 	.word	0x00045f34
   21194:	00045ecc 	.word	0x00045ecc
   21198:	00041314 	.word	0x00041314
   2119c:	00045f24 	.word	0x00045f24

000211a0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>:
   211a0:	e92d4030 	push	{r4, r5, lr}
   211a4:	e5d13000 	ldrb	r3, [r1]
   211a8:	e24dd00c 	sub	sp, sp, #12
   211ac:	e3530000 	cmp	r3, #0
   211b0:	0a000018 	beq	21218 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x78>
   211b4:	e1a04001 	mov	r4, r1
   211b8:	e1a01002 	mov	r1, r2
   211bc:	e5942004 	ldr	r2, [r4, #4]
   211c0:	e3720001 	cmn	r2, #1
   211c4:	0a000010 	beq	2120c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x6c>
   211c8:	e3510000 	cmp	r1, #0
   211cc:	0a000015 	beq	21228 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x88>
   211d0:	e3a02004 	mov	r2, #4
   211d4:	e1a05000 	mov	r5, r0
   211d8:	e08d0002 	add	r0, sp, r2
   211dc:	eb002593 	bl	2a830 <memcpy>
   211e0:	e5d53000 	ldrb	r3, [r5]
   211e4:	e3530000 	cmp	r3, #0
   211e8:	0a000012 	beq	21238 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x98>
   211ec:	e59d0004 	ldr	r0, [sp, #4]
   211f0:	e5953004 	ldr	r3, [r5, #4]
   211f4:	e5942004 	ldr	r2, [r4, #4]
   211f8:	e0033000 	and	r3, r3, r0
   211fc:	e0000002 	and	r0, r0, r2
   21200:	e0433000 	sub	r3, r3, r0
   21204:	e16f3f13 	clz	r3, r3
   21208:	e1a032a3 	lsr	r3, r3, #5
   2120c:	e1a00003 	mov	r0, r3
   21210:	e28dd00c 	add	sp, sp, #12
   21214:	e8bd8030 	pop	{r4, r5, pc}
   21218:	e3a020a8 	mov	r2, #168	; 0xa8
   2121c:	e59f1024 	ldr	r1, [pc, #36]	; 21248 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   21220:	e59f0024 	ldr	r0, [pc, #36]	; 2124c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xac>
   21224:	eb000d5f 	bl	247a8 <assertion_failed>
   21228:	e3a020c1 	mov	r2, #193	; 0xc1
   2122c:	e59f1014 	ldr	r1, [pc, #20]	; 21248 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   21230:	e59f0018 	ldr	r0, [pc, #24]	; 21250 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xb0>
   21234:	eb000d5b 	bl	247a8 <assertion_failed>
   21238:	e3a020c5 	mov	r2, #197	; 0xc5
   2123c:	e59f1004 	ldr	r1, [pc, #4]	; 21248 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   21240:	e59f0004 	ldr	r0, [pc, #4]	; 2124c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xac>
   21244:	eb000d57 	bl	247a8 <assertion_failed>
   21248:	00045ecc 	.word	0x00045ecc
   2124c:	00041314 	.word	0x00041314
   21250:	00045f40 	.word	0x00045f40

00021254 <CNetQueue::CNetQueue()>:
   21254:	e3a02000 	mov	r2, #0
   21258:	e5802000 	str	r2, [r0]
   2125c:	e5802004 	str	r2, [r0, #4]
   21260:	e5802008 	str	r2, [r0, #8]
   21264:	e12fff1e 	bx	lr

00021268 <CNetQueue::IsEmpty() const>:
   21268:	e5900000 	ldr	r0, [r0]
   2126c:	e16f0f10 	clz	r0, r0
   21270:	e1a002a0 	lsr	r0, r0, #5
   21274:	e12fff1e 	bx	lr

00021278 <CNetQueue::Flush()>:
   21278:	e92d4070 	push	{r4, r5, r6, lr}
   2127c:	e5904000 	ldr	r4, [r0]
   21280:	e3540000 	cmp	r4, #0
   21284:	08bd8070 	popeq	{r4, r5, r6, pc}
   21288:	e1a05000 	mov	r5, r0
   2128c:	e3a06000 	mov	r6, #0
   21290:	ea00000f 	b	212d4 <CNetQueue::Flush()+0x5c>
   21294:	e3540000 	cmp	r4, #0
   21298:	0a000014 	beq	212f0 <CNetQueue::Flush()+0x78>
   2129c:	e5943004 	ldr	r3, [r4, #4]
   212a0:	e3530000 	cmp	r3, #0
   212a4:	e5853000 	str	r3, [r5]
   212a8:	15836000 	strne	r6, [r3]
   212ac:	0a000015 	beq	21308 <CNetQueue::Flush()+0x90>
   212b0:	e5953008 	ldr	r3, [r5, #8]
   212b4:	e3530000 	cmp	r3, #0
   212b8:	1a000010 	bne	21300 <CNetQueue::Flush()+0x88>
   212bc:	e1a00004 	mov	r0, r4
   212c0:	e3a01e65 	mov	r1, #1616	; 0x650
   212c4:	eb00274d 	bl	2b000 <operator delete(void*, unsigned int)>
   212c8:	e5954000 	ldr	r4, [r5]
   212cc:	e3540000 	cmp	r4, #0
   212d0:	08bd8070 	popeq	{r4, r5, r6, pc}
   212d4:	e5950008 	ldr	r0, [r5, #8]
   212d8:	e3500000 	cmp	r0, #0
   212dc:	0affffec 	beq	21294 <CNetQueue::Flush()+0x1c>
   212e0:	eb002a65 	bl	2bc7c <EnterCritical>
   212e4:	e5954000 	ldr	r4, [r5]
   212e8:	e3540000 	cmp	r4, #0
   212ec:	1affffea 	bne	2129c <CNetQueue::Flush()+0x24>
   212f0:	e3a0203a 	mov	r2, #58	; 0x3a
   212f4:	e59f102c 	ldr	r1, [pc, #44]	; 21328 <CNetQueue::Flush()+0xb0>
   212f8:	e59f002c 	ldr	r0, [pc, #44]	; 2132c <CNetQueue::Flush()+0xb4>
   212fc:	eb000d29 	bl	247a8 <assertion_failed>
   21300:	eb002a87 	bl	2bd24 <LeaveCritical>
   21304:	eaffffec 	b	212bc <CNetQueue::Flush()+0x44>
   21308:	e5952004 	ldr	r2, [r5, #4]
   2130c:	e1520004 	cmp	r2, r4
   21310:	05853004 	streq	r3, [r5, #4]
   21314:	0affffe5 	beq	212b0 <CNetQueue::Flush()+0x38>
   21318:	e3a02043 	mov	r2, #67	; 0x43
   2131c:	e59f1004 	ldr	r1, [pc, #4]	; 21328 <CNetQueue::Flush()+0xb0>
   21320:	e59f0008 	ldr	r0, [pc, #8]	; 21330 <CNetQueue::Flush()+0xb8>
   21324:	eb000d1f 	bl	247a8 <assertion_failed>
   21328:	00045f50 	.word	0x00045f50
   2132c:	00045a1c 	.word	0x00045a1c
   21330:	00045f60 	.word	0x00045f60

00021334 <CNetQueue::~CNetQueue()>:
   21334:	e92d4010 	push	{r4, lr}
   21338:	e1a04000 	mov	r4, r0
   2133c:	ebffffcd 	bl	21278 <CNetQueue::Flush()>
   21340:	e1a00004 	mov	r0, r4
   21344:	e8bd8010 	pop	{r4, pc}

00021348 <CNetQueue::Enqueue(void const*, unsigned int, void*)>:
   21348:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2134c:	e1a05002 	mov	r5, r2
   21350:	e1a08000 	mov	r8, r0
   21354:	e3a00e65 	mov	r0, #1616	; 0x650
   21358:	e1a06001 	mov	r6, r1
   2135c:	e1a07003 	mov	r7, r3
   21360:	eb002718 	bl	2afc8 <operator new(unsigned int)>
   21364:	e3550000 	cmp	r5, #0
   21368:	0a000026 	beq	21408 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xc0>
   2136c:	e3550d19 	cmp	r5, #1600	; 0x640
   21370:	8a000028 	bhi	21418 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xd0>
   21374:	e3560000 	cmp	r6, #0
   21378:	e1a04000 	mov	r4, r0
   2137c:	e5805008 	str	r5, [r0, #8]
   21380:	0a000028 	beq	21428 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xe0>
   21384:	e1a02005 	mov	r2, r5
   21388:	e1a01006 	mov	r1, r6
   2138c:	e280000c 	add	r0, r0, #12
   21390:	eb002526 	bl	2a830 <memcpy>
   21394:	e5980008 	ldr	r0, [r8, #8]
   21398:	e584764c 	str	r7, [r4, #1612]	; 0x64c
   2139c:	e3500000 	cmp	r0, #0
   213a0:	1a000012 	bne	213f0 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xa8>
   213a4:	e898000a 	ldm	r8, {r1, r3}
   213a8:	e3a02000 	mov	r2, #0
   213ac:	e1510002 	cmp	r1, r2
   213b0:	e5842004 	str	r2, [r4, #4]
   213b4:	e5843000 	str	r3, [r4]
   213b8:	05884000 	streq	r4, [r8]
   213bc:	0a000005 	beq	213d8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x90>
   213c0:	e3530000 	cmp	r3, #0
   213c4:	0a00000b 	beq	213f8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xb0>
   213c8:	e5932004 	ldr	r2, [r3, #4]
   213cc:	e3520000 	cmp	r2, #0
   213d0:	05834004 	streq	r4, [r3, #4]
   213d4:	1a000017 	bne	21438 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xf0>
   213d8:	e5983008 	ldr	r3, [r8, #8]
   213dc:	e5884004 	str	r4, [r8, #4]
   213e0:	e3530000 	cmp	r3, #0
   213e4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   213e8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   213ec:	ea002a4c 	b	2bd24 <LeaveCritical>
   213f0:	eb002a21 	bl	2bc7c <EnterCritical>
   213f4:	eaffffea 	b	213a4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x5c>
   213f8:	e3a02066 	mov	r2, #102	; 0x66
   213fc:	e59f1044 	ldr	r1, [pc, #68]	; 21448 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   21400:	e59f0044 	ldr	r0, [pc, #68]	; 2144c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x104>
   21404:	eb000ce7 	bl	247a8 <assertion_failed>
   21408:	e3a02052 	mov	r2, #82	; 0x52
   2140c:	e59f1034 	ldr	r1, [pc, #52]	; 21448 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   21410:	e59f0038 	ldr	r0, [pc, #56]	; 21450 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x108>
   21414:	eb000ce3 	bl	247a8 <assertion_failed>
   21418:	e3a02053 	mov	r2, #83	; 0x53
   2141c:	e59f1024 	ldr	r1, [pc, #36]	; 21448 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   21420:	e59f002c 	ldr	r0, [pc, #44]	; 21454 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x10c>
   21424:	eb000cdf 	bl	247a8 <assertion_failed>
   21428:	e3a02056 	mov	r2, #86	; 0x56
   2142c:	e59f1014 	ldr	r1, [pc, #20]	; 21448 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   21430:	e59f0020 	ldr	r0, [pc, #32]	; 21458 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x110>
   21434:	eb000cdb 	bl	247a8 <assertion_failed>
   21438:	e3a02067 	mov	r2, #103	; 0x67
   2143c:	e59f1004 	ldr	r1, [pc, #4]	; 21448 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   21440:	e59f0014 	ldr	r0, [pc, #20]	; 2145c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x114>
   21444:	eb000cd7 	bl	247a8 <assertion_failed>
   21448:	00045f50 	.word	0x00045f50
   2144c:	00045f74 	.word	0x00045f74
   21450:	00045464 	.word	0x00045464
   21454:	00043190 	.word	0x00043190
   21458:	0004256c 	.word	0x0004256c
   2145c:	00045f84 	.word	0x00045f84

00021460 <CNetQueue::Dequeue(void*, void**)>:
   21460:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21464:	e5906000 	ldr	r6, [r0]
   21468:	e3560000 	cmp	r6, #0
   2146c:	0a000027 	beq	21510 <CNetQueue::Dequeue(void*, void**)+0xb0>
   21470:	e1a04000 	mov	r4, r0
   21474:	e5900008 	ldr	r0, [r0, #8]
   21478:	e1a05001 	mov	r5, r1
   2147c:	e3500000 	cmp	r0, #0
   21480:	e1a07002 	mov	r7, r2
   21484:	1a000019 	bne	214f0 <CNetQueue::Dequeue(void*, void**)+0x90>
   21488:	e5963004 	ldr	r3, [r6, #4]
   2148c:	e3530000 	cmp	r3, #0
   21490:	e5843000 	str	r3, [r4]
   21494:	0a000022 	beq	21524 <CNetQueue::Dequeue(void*, void**)+0xc4>
   21498:	e3a02000 	mov	r2, #0
   2149c:	e5832000 	str	r2, [r3]
   214a0:	e5943008 	ldr	r3, [r4, #8]
   214a4:	e3530000 	cmp	r3, #0
   214a8:	1a00001b 	bne	2151c <CNetQueue::Dequeue(void*, void**)+0xbc>
   214ac:	e5964008 	ldr	r4, [r6, #8]
   214b0:	e3540000 	cmp	r4, #0
   214b4:	0a000022 	beq	21544 <CNetQueue::Dequeue(void*, void**)+0xe4>
   214b8:	e3540d19 	cmp	r4, #1600	; 0x640
   214bc:	8a000024 	bhi	21554 <CNetQueue::Dequeue(void*, void**)+0xf4>
   214c0:	e1a02004 	mov	r2, r4
   214c4:	e286100c 	add	r1, r6, #12
   214c8:	e1a00005 	mov	r0, r5
   214cc:	eb0024d7 	bl	2a830 <memcpy>
   214d0:	e3570000 	cmp	r7, #0
   214d4:	1596364c 	ldrne	r3, [r6, #1612]	; 0x64c
   214d8:	e1a00006 	mov	r0, r6
   214dc:	e3a01e65 	mov	r1, #1616	; 0x650
   214e0:	15873000 	strne	r3, [r7]
   214e4:	eb0026c5 	bl	2b000 <operator delete(void*, unsigned int)>
   214e8:	e1a00004 	mov	r0, r4
   214ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   214f0:	eb0029e1 	bl	2bc7c <EnterCritical>
   214f4:	e5946000 	ldr	r6, [r4]
   214f8:	e3560000 	cmp	r6, #0
   214fc:	1affffe1 	bne	21488 <CNetQueue::Dequeue(void*, void**)+0x28>
   21500:	e3a02078 	mov	r2, #120	; 0x78
   21504:	e59f1058 	ldr	r1, [pc, #88]	; 21564 <CNetQueue::Dequeue(void*, void**)+0x104>
   21508:	e59f0058 	ldr	r0, [pc, #88]	; 21568 <CNetQueue::Dequeue(void*, void**)+0x108>
   2150c:	eb000ca5 	bl	247a8 <assertion_failed>
   21510:	e1a04006 	mov	r4, r6
   21514:	e1a00004 	mov	r0, r4
   21518:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2151c:	eb002a00 	bl	2bd24 <LeaveCritical>
   21520:	eaffffe1 	b	214ac <CNetQueue::Dequeue(void*, void**)+0x4c>
   21524:	e5942004 	ldr	r2, [r4, #4]
   21528:	e1520006 	cmp	r2, r6
   2152c:	05843004 	streq	r3, [r4, #4]
   21530:	0affffda 	beq	214a0 <CNetQueue::Dequeue(void*, void**)+0x40>
   21534:	e3a02081 	mov	r2, #129	; 0x81
   21538:	e59f1024 	ldr	r1, [pc, #36]	; 21564 <CNetQueue::Dequeue(void*, void**)+0x104>
   2153c:	e59f0028 	ldr	r0, [pc, #40]	; 2156c <CNetQueue::Dequeue(void*, void**)+0x10c>
   21540:	eb000c98 	bl	247a8 <assertion_failed>
   21544:	e3a02088 	mov	r2, #136	; 0x88
   21548:	e59f1014 	ldr	r1, [pc, #20]	; 21564 <CNetQueue::Dequeue(void*, void**)+0x104>
   2154c:	e59f001c 	ldr	r0, [pc, #28]	; 21570 <CNetQueue::Dequeue(void*, void**)+0x110>
   21550:	eb000c94 	bl	247a8 <assertion_failed>
   21554:	e3a02089 	mov	r2, #137	; 0x89
   21558:	e59f1004 	ldr	r1, [pc, #4]	; 21564 <CNetQueue::Dequeue(void*, void**)+0x104>
   2155c:	e59f0010 	ldr	r0, [pc, #16]	; 21574 <CNetQueue::Dequeue(void*, void**)+0x114>
   21560:	eb000c90 	bl	247a8 <assertion_failed>
   21564:	00045f50 	.word	0x00045f50
   21568:	00045a1c 	.word	0x00045a1c
   2156c:	00045f60 	.word	0x00045f60
   21570:	00045f98 	.word	0x00045f98
   21574:	00045fa4 	.word	0x00045fa4

00021578 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>:
   21578:	e92d4070 	push	{r4, r5, r6, lr}
   2157c:	e1a04000 	mov	r4, r0
   21580:	e3a06000 	mov	r6, #0
   21584:	e1a05002 	mov	r5, r2
   21588:	e1a00001 	mov	r0, r1
   2158c:	e5c4600c 	strb	r6, [r4, #12]
   21590:	e1a01004 	mov	r1, r4
   21594:	ebfffea9 	bl	21040 <CIPAddress::CopyTo(unsigned char*) const>
   21598:	e1a00004 	mov	r0, r4
   2159c:	e5c46008 	strb	r6, [r4, #8]
   215a0:	e5c45009 	strb	r5, [r4, #9]
   215a4:	e8bd8070 	pop	{r4, r5, r6, pc}

000215a8 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>:
   215a8:	e92d4070 	push	{r4, r5, r6, lr}
   215ac:	e3a0c001 	mov	ip, #1
   215b0:	e1a04000 	mov	r4, r0
   215b4:	e1a06002 	mov	r6, r2
   215b8:	e1a00001 	mov	r0, r1
   215bc:	e5c4c00c 	strb	ip, [r4, #12]
   215c0:	e1a01004 	mov	r1, r4
   215c4:	e1a05003 	mov	r5, r3
   215c8:	ebfffe9c 	bl	21040 <CIPAddress::CopyTo(unsigned char*) const>
   215cc:	e1a00006 	mov	r0, r6
   215d0:	e2841004 	add	r1, r4, #4
   215d4:	ebfffe99 	bl	21040 <CIPAddress::CopyTo(unsigned char*) const>
   215d8:	e3a03000 	mov	r3, #0
   215dc:	e1a00004 	mov	r0, r4
   215e0:	e5c45009 	strb	r5, [r4, #9]
   215e4:	e5c43008 	strb	r3, [r4, #8]
   215e8:	e8bd8070 	pop	{r4, r5, r6, pc}

000215ec <CChecksumCalculator::~CChecksumCalculator()>:
   215ec:	e12fff1e 	bx	lr

000215f0 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>:
   215f0:	e1a03001 	mov	r3, r1
   215f4:	e1a01000 	mov	r1, r0
   215f8:	e1a00003 	mov	r0, r3
   215fc:	eafffe8f 	b	21040 <CIPAddress::CopyTo(unsigned char*) const>

00021600 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>:
   21600:	e92d4010 	push	{r4, lr}
   21604:	e1a04000 	mov	r4, r0
   21608:	e1a00001 	mov	r0, r1
   2160c:	e2841004 	add	r1, r4, #4
   21610:	ebfffe8a 	bl	21040 <CIPAddress::CopyTo(unsigned char*) const>
   21614:	e3a03001 	mov	r3, #1
   21618:	e5c4300c 	strb	r3, [r4, #12]
   2161c:	e8bd8010 	pop	{r4, pc}

00021620 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>:
   21620:	e2503000 	subs	r3, r0, #0
   21624:	e92d4010 	push	{r4, lr}
   21628:	0a000011 	beq	21674 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x54>
   2162c:	e3510000 	cmp	r1, #0
   21630:	0a000013 	beq	21684 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x64>
   21634:	e3510001 	cmp	r1, #1
   21638:	9a000015 	bls	21694 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x74>
   2163c:	e1a00002 	mov	r0, r2
   21640:	e241c002 	sub	ip, r1, #2
   21644:	e3ccc001 	bic	ip, ip, #1
   21648:	e28cc002 	add	ip, ip, #2
   2164c:	e083c00c 	add	ip, r3, ip
   21650:	e0d320b2 	ldrh	r2, [r3], #2
   21654:	e153000c 	cmp	r3, ip
   21658:	e0800002 	add	r0, r0, r2
   2165c:	1afffffb 	bne	21650 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x30>
   21660:	e3110001 	tst	r1, #1
   21664:	08bd8010 	popeq	{r4, pc}
   21668:	e5dc3000 	ldrb	r3, [ip]
   2166c:	e0800003 	add	r0, r0, r3
   21670:	e8bd8010 	pop	{r4, pc}
   21674:	e3a02054 	mov	r2, #84	; 0x54
   21678:	e59f1020 	ldr	r1, [pc, #32]	; 216a0 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x80>
   2167c:	e59f0020 	ldr	r0, [pc, #32]	; 216a4 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x84>
   21680:	eb000c48 	bl	247a8 <assertion_failed>
   21684:	e3a02055 	mov	r2, #85	; 0x55
   21688:	e59f1010 	ldr	r1, [pc, #16]	; 216a0 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x80>
   2168c:	e59f0014 	ldr	r0, [pc, #20]	; 216a8 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x88>
   21690:	eb000c44 	bl	247a8 <assertion_failed>
   21694:	e1a0c003 	mov	ip, r3
   21698:	e1a00002 	mov	r0, r2
   2169c:	eafffff1 	b	21668 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x48>
   216a0:	00045fc4 	.word	0x00045fc4
   216a4:	00045fdc 	.word	0x00045fdc
   216a8:	00045464 	.word	0x00045464

000216ac <CChecksumCalculator::Calculate(void const*, unsigned int)>:
   216ac:	e5d0c00c 	ldrb	ip, [r0, #12]
   216b0:	e92d4070 	push	{r4, r5, r6, lr}
   216b4:	e35c0000 	cmp	ip, #0
   216b8:	0a00001b 	beq	2172c <CChecksumCalculator::Calculate(void const*, unsigned int)+0x80>
   216bc:	e1a05001 	mov	r5, r1
   216c0:	e6bf1fb2 	rev16	r1, r2
   216c4:	e1a04002 	mov	r4, r2
   216c8:	e6ff2071 	uxth	r2, r1
   216cc:	e1a02422 	lsr	r2, r2, #8
   216d0:	e5c0100a 	strb	r1, [r0, #10]
   216d4:	e5c0200b 	strb	r2, [r0, #11]
   216d8:	e3a0100c 	mov	r1, #12
   216dc:	e3a02000 	mov	r2, #0
   216e0:	ebffffce 	bl	21620 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   216e4:	e3550000 	cmp	r5, #0
   216e8:	e1a02000 	mov	r2, r0
   216ec:	0a000012 	beq	2173c <CChecksumCalculator::Calculate(void const*, unsigned int)+0x90>
   216f0:	e3540000 	cmp	r4, #0
   216f4:	0a000014 	beq	2174c <CChecksumCalculator::Calculate(void const*, unsigned int)+0xa0>
   216f8:	e1a01004 	mov	r1, r4
   216fc:	e1a00005 	mov	r0, r5
   21700:	ebffffc6 	bl	21620 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   21704:	e1b03820 	lsrs	r3, r0, #16
   21708:	e1a03820 	lsr	r3, r0, #16
   2170c:	0a000003 	beq	21720 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x74>
   21710:	e6f30070 	uxtah	r0, r3, r0
   21714:	e1b03820 	lsrs	r3, r0, #16
   21718:	e3a03001 	mov	r3, #1
   2171c:	1afffffb 	bne	21710 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x64>
   21720:	e1e00000 	mvn	r0, r0
   21724:	e6ff0070 	uxth	r0, r0
   21728:	e8bd8070 	pop	{r4, r5, r6, pc}
   2172c:	e3a0203c 	mov	r2, #60	; 0x3c
   21730:	e59f1024 	ldr	r1, [pc, #36]	; 2175c <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb0>
   21734:	e59f0024 	ldr	r0, [pc, #36]	; 21760 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb4>
   21738:	eb000c1a 	bl	247a8 <assertion_failed>
   2173c:	e3a02041 	mov	r2, #65	; 0x41
   21740:	e59f1014 	ldr	r1, [pc, #20]	; 2175c <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb0>
   21744:	e59f0018 	ldr	r0, [pc, #24]	; 21764 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb8>
   21748:	eb000c16 	bl	247a8 <assertion_failed>
   2174c:	e3a02042 	mov	r2, #66	; 0x42
   21750:	e59f1004 	ldr	r1, [pc, #4]	; 2175c <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb0>
   21754:	e59f000c 	ldr	r0, [pc, #12]	; 21768 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xbc>
   21758:	eb000c12 	bl	247a8 <assertion_failed>
   2175c:	00045fc4 	.word	0x00045fc4
   21760:	00045fec 	.word	0x00045fec
   21764:	0004256c 	.word	0x0004256c
   21768:	00045464 	.word	0x00045464

0002176c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>:
   2176c:	e3500000 	cmp	r0, #0
   21770:	e92d4010 	push	{r4, lr}
   21774:	0a00000d 	beq	217b0 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x44>
   21778:	e3510000 	cmp	r1, #0
   2177c:	0a00000f 	beq	217c0 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x54>
   21780:	e3a02000 	mov	r2, #0
   21784:	ebffffa5 	bl	21620 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   21788:	e1b03820 	lsrs	r3, r0, #16
   2178c:	e1a03820 	lsr	r3, r0, #16
   21790:	0a000003 	beq	217a4 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x38>
   21794:	e6f30070 	uxtah	r0, r3, r0
   21798:	e1b03820 	lsrs	r3, r0, #16
   2179c:	e3a03001 	mov	r3, #1
   217a0:	1afffffb 	bne	21794 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x28>
   217a4:	e1e00000 	mvn	r0, r0
   217a8:	e6ff0070 	uxth	r0, r0
   217ac:	e8bd8010 	pop	{r4, pc}
   217b0:	e3a0204a 	mov	r2, #74	; 0x4a
   217b4:	e59f1014 	ldr	r1, [pc, #20]	; 217d0 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x64>
   217b8:	e59f0014 	ldr	r0, [pc, #20]	; 217d4 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x68>
   217bc:	eb000bf9 	bl	247a8 <assertion_failed>
   217c0:	e3a0204b 	mov	r2, #75	; 0x4b
   217c4:	e59f1004 	ldr	r1, [pc, #4]	; 217d0 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x64>
   217c8:	e59f0008 	ldr	r0, [pc, #8]	; 217d8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x6c>
   217cc:	eb000bf5 	bl	247a8 <assertion_failed>
   217d0:	00045fc4 	.word	0x00045fc4
   217d4:	0004256c 	.word	0x0004256c
   217d8:	00045464 	.word	0x00045464

000217dc <CChecksumCalculator::FoldResult(unsigned int)>:
   217dc:	e1b03820 	lsrs	r3, r0, #16
   217e0:	e1a03820 	lsr	r3, r0, #16
   217e4:	0a000003 	beq	217f8 <CChecksumCalculator::FoldResult(unsigned int)+0x1c>
   217e8:	e6f30070 	uxtah	r0, r3, r0
   217ec:	e1b03820 	lsrs	r3, r0, #16
   217f0:	e3a03001 	mov	r3, #1
   217f4:	1afffffb 	bne	217e8 <CChecksumCalculator::FoldResult(unsigned int)+0xc>
   217f8:	e6ff0070 	uxth	r0, r0
   217fc:	e12fff1e 	bx	lr

00021800 <CDHCPClient::HaltNetwork() [clone .part.0]>:
   21800:	e92d4010 	push	{r4, lr}
   21804:	e59f2008 	ldr	r2, [pc, #8]	; 21814 <CDHCPClient::HaltNetwork() [clone .part.0]+0x14>
   21808:	e59f1008 	ldr	r1, [pc, #8]	; 21818 <CDHCPClient::HaltNetwork() [clone .part.0]+0x18>
   2180c:	e59f0008 	ldr	r0, [pc, #8]	; 2181c <CDHCPClient::HaltNetwork() [clone .part.0]+0x1c>
   21810:	eb000be4 	bl	247a8 <assertion_failed>
   21814:	000001ae 	.word	0x000001ae
   21818:	00046000 	.word	0x00046000
   2181c:	000453dc 	.word	0x000453dc

00021820 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>:
   21820:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21824:	e1a04000 	mov	r4, r0
   21828:	e1a05001 	mov	r5, r1
   2182c:	e3a01902 	mov	r1, #32768	; 0x8000
   21830:	e1a06002 	mov	r6, r2
   21834:	eb00099b 	bl	23ea8 <CTask::CTask(unsigned int)>
   21838:	e59f30a0 	ldr	r3, [pc, #160]	; 218e0 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc0>
   2183c:	e1a00005 	mov	r0, r5
   21840:	e5843000 	str	r3, [r4]
   21844:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   21848:	ebffdfac 	bl	19700 <CNetSubSystem::GetConfig()>
   2184c:	e28470e4 	add	r7, r4, #228	; 0xe4
   21850:	e3560000 	cmp	r6, #0
   21854:	e59f1088 	ldr	r1, [pc, #136]	; 218e4 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc4>
   21858:	e58400e0 	str	r0, [r4, #224]	; 0xe0
   2185c:	11a01006 	movne	r1, r6
   21860:	e1a00007 	mov	r0, r7
   21864:	eb0018ae 	bl	27b24 <CString::CString(char const*)>
   21868:	e3a02011 	mov	r2, #17
   2186c:	e1a01005 	mov	r1, r5
   21870:	e28400f4 	add	r0, r4, #244	; 0xf4
   21874:	eb00068a 	bl	232a4 <CSocket::CSocket(CNetSubSystem*, int)>
   21878:	e3a02000 	mov	r2, #0
   2187c:	e59430dc 	ldr	r3, [r4, #220]	; 0xdc
   21880:	e5c42194 	strb	r2, [r4, #404]	; 0x194
   21884:	e1530002 	cmp	r3, r2
   21888:	0a000008 	beq	218b0 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0x90>
   2188c:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
   21890:	e3530000 	cmp	r3, #0
   21894:	0a000009 	beq	218c0 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xa0>
   21898:	e1a00007 	mov	r0, r7
   2189c:	eb0018e4 	bl	27c34 <CString::GetLength() const>
   218a0:	e350001e 	cmp	r0, #30
   218a4:	8a000009 	bhi	218d0 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xb0>
   218a8:	e1a00004 	mov	r0, r4
   218ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   218b0:	e3a02073 	mov	r2, #115	; 0x73
   218b4:	e59f102c 	ldr	r1, [pc, #44]	; 218e8 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   218b8:	e59f002c 	ldr	r0, [pc, #44]	; 218ec <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xcc>
   218bc:	eb000bb9 	bl	247a8 <assertion_failed>
   218c0:	e3a02074 	mov	r2, #116	; 0x74
   218c4:	e59f101c 	ldr	r1, [pc, #28]	; 218e8 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   218c8:	e59f0020 	ldr	r0, [pc, #32]	; 218f0 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xd0>
   218cc:	eb000bb5 	bl	247a8 <assertion_failed>
   218d0:	e3a02076 	mov	r2, #118	; 0x76
   218d4:	e59f100c 	ldr	r1, [pc, #12]	; 218e8 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   218d8:	e59f0014 	ldr	r0, [pc, #20]	; 218f4 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xd4>
   218dc:	eb000bb1 	bl	247a8 <assertion_failed>
   218e0:	00046340 	.word	0x00046340
   218e4:	000493c8 	.word	0x000493c8
   218e8:	00046000 	.word	0x00046000
   218ec:	0004539c 	.word	0x0004539c
   218f0:	000453dc 	.word	0x000453dc
   218f4:	00046010 	.word	0x00046010

000218f8 <CDHCPClient::IsBound() const>:
   218f8:	e5d00194 	ldrb	r0, [r0, #404]	; 0x194
   218fc:	e12fff1e 	bx	lr

00021900 <CDHCPClient::HaltNetwork()>:
   21900:	e3a02000 	mov	r2, #0
   21904:	e59030e0 	ldr	r3, [r0, #224]	; 0xe0
   21908:	e5c02194 	strb	r2, [r0, #404]	; 0x194
   2190c:	e1530002 	cmp	r3, r2
   21910:	0a000001 	beq	2191c <CDHCPClient::HaltNetwork()+0x1c>
   21914:	e1a00003 	mov	r0, r3
   21918:	eafffcc1 	b	20c24 <CNetConfig::Reset()>
   2191c:	e92d4010 	push	{r4, lr}
   21920:	ebffffb6 	bl	21800 <CDHCPClient::HaltNetwork() [clone .part.0]>

00021924 <CDHCPClient::CheckConfig()>:
   21924:	e92d4030 	push	{r4, r5, lr}
   21928:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   2192c:	e1a04000 	mov	r4, r0
   21930:	e3530000 	cmp	r3, #0
   21934:	e24dd014 	sub	sp, sp, #20
   21938:	0a00002a 	beq	219e8 <CDHCPClient::CheckConfig()+0xc4>
   2193c:	e59021c0 	ldr	r2, [r0, #448]	; 0x1c0
   21940:	e3520000 	cmp	r2, #0
   21944:	0a000027 	beq	219e8 <CDHCPClient::CheckConfig()+0xc4>
   21948:	e59011c4 	ldr	r1, [r0, #452]	; 0x1c4
   2194c:	e3510000 	cmp	r1, #0
   21950:	0a000024 	beq	219e8 <CDHCPClient::CheckConfig()+0xc4>
   21954:	e59001c8 	ldr	r0, [r0, #456]	; 0x1c8
   21958:	e3500000 	cmp	r0, #0
   2195c:	0a000021 	beq	219e8 <CDHCPClient::CheckConfig()+0xc4>
   21960:	e0233001 	eor	r3, r3, r1
   21964:	e1130002 	tst	r3, r2
   21968:	1a000033 	bne	21a3c <CDHCPClient::CheckConfig()+0x118>
   2196c:	e59451cc 	ldr	r5, [r4, #460]	; 0x1cc
   21970:	e3550000 	cmp	r5, #0
   21974:	0a00003d 	beq	21a70 <CDHCPClient::CheckConfig()+0x14c>
   21978:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   2197c:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   21980:	e3520000 	cmp	r2, #0
   21984:	1a000027 	bne	21a28 <CDHCPClient::CheckConfig()+0x104>
   21988:	e3530000 	cmp	r3, #0
   2198c:	01a020a5 	lsreq	r2, r5, #1
   21990:	004531a5 	subeq	r3, r5, r5, lsr #3
   21994:	10652083 	rsbne	r2, r5, r3, lsl #1
   21998:	058421d8 	streq	r2, [r4, #472]	; 0x1d8
   2199c:	058431dc 	streq	r3, [r4, #476]	; 0x1dc
   219a0:	158421d8 	strne	r2, [r4, #472]	; 0x1d8
   219a4:	e1530002 	cmp	r3, r2
   219a8:	21550003 	cmpcs	r5, r3
   219ac:	23a00001 	movcs	r0, #1
   219b0:	2a00001a 	bcs	21a20 <CDHCPClient::CheckConfig()+0xfc>
   219b4:	eb001463 	bl	26b48 <CLogger::Get()>
   219b8:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   219bc:	e59421dc 	ldr	r2, [r4, #476]	; 0x1dc
   219c0:	e59431d8 	ldr	r3, [r4, #472]	; 0x1d8
   219c4:	e58d1008 	str	r1, [sp, #8]
   219c8:	e58d2004 	str	r2, [sp, #4]
   219cc:	e58d3000 	str	r3, [sp]
   219d0:	e3a02002 	mov	r2, #2
   219d4:	e59f30b0 	ldr	r3, [pc, #176]	; 21a8c <CDHCPClient::CheckConfig()+0x168>
   219d8:	e59f10b0 	ldr	r1, [pc, #176]	; 21a90 <CDHCPClient::CheckConfig()+0x16c>
   219dc:	eb00139b 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   219e0:	e3a00000 	mov	r0, #0
   219e4:	ea00000d 	b	21a20 <CDHCPClient::CheckConfig()+0xfc>
   219e8:	eb001456 	bl	26b48 <CLogger::Get()>
   219ec:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   219f0:	e59421c0 	ldr	r2, [r4, #448]	; 0x1c0
   219f4:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   219f8:	e594c1c8 	ldr	ip, [r4, #456]	; 0x1c8
   219fc:	e58d1008 	str	r1, [sp, #8]
   21a00:	e58d2004 	str	r2, [sp, #4]
   21a04:	e58d3000 	str	r3, [sp]
   21a08:	e3a02002 	mov	r2, #2
   21a0c:	e59f3080 	ldr	r3, [pc, #128]	; 21a94 <CDHCPClient::CheckConfig()+0x170>
   21a10:	e59f1078 	ldr	r1, [pc, #120]	; 21a90 <CDHCPClient::CheckConfig()+0x16c>
   21a14:	e58dc00c 	str	ip, [sp, #12]
   21a18:	eb00138c 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21a1c:	e3a00000 	mov	r0, #0
   21a20:	e28dd014 	add	sp, sp, #20
   21a24:	e8bd8030 	pop	{r4, r5, pc}
   21a28:	e3530000 	cmp	r3, #0
   21a2c:	00453002 	subeq	r3, r5, r2
   21a30:	008230a3 	addeq	r3, r2, r3, lsr #1
   21a34:	058431dc 	streq	r3, [r4, #476]	; 0x1dc
   21a38:	eaffffd9 	b	219a4 <CDHCPClient::CheckConfig()+0x80>
   21a3c:	eb001441 	bl	26b48 <CLogger::Get()>
   21a40:	e59411c0 	ldr	r1, [r4, #448]	; 0x1c0
   21a44:	e59421c4 	ldr	r2, [r4, #452]	; 0x1c4
   21a48:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   21a4c:	e58d1008 	str	r1, [sp, #8]
   21a50:	e58d2004 	str	r2, [sp, #4]
   21a54:	e58d3000 	str	r3, [sp]
   21a58:	e3a02002 	mov	r2, #2
   21a5c:	e59f3034 	ldr	r3, [pc, #52]	; 21a98 <CDHCPClient::CheckConfig()+0x174>
   21a60:	e59f1028 	ldr	r1, [pc, #40]	; 21a90 <CDHCPClient::CheckConfig()+0x16c>
   21a64:	eb001379 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21a68:	e3a00000 	mov	r0, #0
   21a6c:	eaffffeb 	b	21a20 <CDHCPClient::CheckConfig()+0xfc>
   21a70:	eb001434 	bl	26b48 <CLogger::Get()>
   21a74:	e3a02002 	mov	r2, #2
   21a78:	e59f301c 	ldr	r3, [pc, #28]	; 21a9c <CDHCPClient::CheckConfig()+0x178>
   21a7c:	e59f100c 	ldr	r1, [pc, #12]	; 21a90 <CDHCPClient::CheckConfig()+0x16c>
   21a80:	eb001372 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21a84:	e1a00005 	mov	r0, r5
   21a88:	eaffffe4 	b	21a20 <CDHCPClient::CheckConfig()+0xfc>
   21a8c:	000460a4 	.word	0x000460a4
   21a90:	0004634c 	.word	0x0004634c
   21a94:	00046030 	.word	0x00046030
   21a98:	00046060 	.word	0x00046060
   21a9c:	0004608c 	.word	0x0004608c

00021aa0 <CDHCPClient::GetUnaligned(void const*)>:
   21aa0:	e3500000 	cmp	r0, #0
   21aa4:	0a000001 	beq	21ab0 <CDHCPClient::GetUnaligned(void const*)+0x10>
   21aa8:	e5900000 	ldr	r0, [r0]
   21aac:	e12fff1e 	bx	lr
   21ab0:	e3a02e36 	mov	r2, #864	; 0x360
   21ab4:	e92d4010 	push	{r4, lr}
   21ab8:	e59f1004 	ldr	r1, [pc, #4]	; 21ac4 <CDHCPClient::GetUnaligned(void const*)+0x24>
   21abc:	e59f0004 	ldr	r0, [pc, #4]	; 21ac8 <CDHCPClient::GetUnaligned(void const*)+0x28>
   21ac0:	eb000b38 	bl	247a8 <assertion_failed>
   21ac4:	00046000 	.word	0x00046000
   21ac8:	000460c4 	.word	0x000460c4

00021acc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>:
   21acc:	e92d4070 	push	{r4, r5, r6, lr}
   21ad0:	e2514000 	subs	r4, r1, #0
   21ad4:	0a0000b0 	beq	21d9c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x2d0>
   21ad8:	e1a06000 	mov	r6, r0
   21adc:	e0845002 	add	r5, r4, r2
   21ae0:	e2840002 	add	r0, r4, #2
   21ae4:	e1550000 	cmp	r5, r0
   21ae8:	38bd8070 	popcc	{r4, r5, r6, pc}
   21aec:	e5d43000 	ldrb	r3, [r4]
   21af0:	e353003b 	cmp	r3, #59	; 0x3b
   21af4:	8a000050 	bhi	21c3c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x170>
   21af8:	e353003b 	cmp	r3, #59	; 0x3b
   21afc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   21b00:	ea000044 	b	21c18 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x14c>
   21b04:	00021d94 	.word	0x00021d94
   21b08:	00021d6c 	.word	0x00021d6c
   21b0c:	00021c18 	.word	0x00021c18
   21b10:	00021d38 	.word	0x00021d38
   21b14:	00021c18 	.word	0x00021c18
   21b18:	00021c18 	.word	0x00021c18
   21b1c:	00021d10 	.word	0x00021d10
   21b20:	00021c18 	.word	0x00021c18
   21b24:	00021c18 	.word	0x00021c18
   21b28:	00021c18 	.word	0x00021c18
   21b2c:	00021c18 	.word	0x00021c18
   21b30:	00021c18 	.word	0x00021c18
   21b34:	00021c18 	.word	0x00021c18
   21b38:	00021c18 	.word	0x00021c18
   21b3c:	00021c18 	.word	0x00021c18
   21b40:	00021c18 	.word	0x00021c18
   21b44:	00021c18 	.word	0x00021c18
   21b48:	00021c18 	.word	0x00021c18
   21b4c:	00021c18 	.word	0x00021c18
   21b50:	00021c18 	.word	0x00021c18
   21b54:	00021c18 	.word	0x00021c18
   21b58:	00021c18 	.word	0x00021c18
   21b5c:	00021c18 	.word	0x00021c18
   21b60:	00021c18 	.word	0x00021c18
   21b64:	00021c18 	.word	0x00021c18
   21b68:	00021c18 	.word	0x00021c18
   21b6c:	00021c18 	.word	0x00021c18
   21b70:	00021c18 	.word	0x00021c18
   21b74:	00021c18 	.word	0x00021c18
   21b78:	00021c18 	.word	0x00021c18
   21b7c:	00021c18 	.word	0x00021c18
   21b80:	00021c18 	.word	0x00021c18
   21b84:	00021c18 	.word	0x00021c18
   21b88:	00021c18 	.word	0x00021c18
   21b8c:	00021c18 	.word	0x00021c18
   21b90:	00021c18 	.word	0x00021c18
   21b94:	00021c18 	.word	0x00021c18
   21b98:	00021c18 	.word	0x00021c18
   21b9c:	00021c18 	.word	0x00021c18
   21ba0:	00021c18 	.word	0x00021c18
   21ba4:	00021c18 	.word	0x00021c18
   21ba8:	00021c18 	.word	0x00021c18
   21bac:	00021c18 	.word	0x00021c18
   21bb0:	00021c18 	.word	0x00021c18
   21bb4:	00021c18 	.word	0x00021c18
   21bb8:	00021c18 	.word	0x00021c18
   21bbc:	00021c18 	.word	0x00021c18
   21bc0:	00021c18 	.word	0x00021c18
   21bc4:	00021c18 	.word	0x00021c18
   21bc8:	00021c18 	.word	0x00021c18
   21bcc:	00021c18 	.word	0x00021c18
   21bd0:	00021ce4 	.word	0x00021ce4
   21bd4:	00021cc0 	.word	0x00021cc0
   21bd8:	00021c9c 	.word	0x00021c9c
   21bdc:	00021c74 	.word	0x00021c74
   21be0:	00021c18 	.word	0x00021c18
   21be4:	00021c18 	.word	0x00021c18
   21be8:	00021c18 	.word	0x00021c18
   21bec:	00021c48 	.word	0x00021c48
   21bf0:	00021bf4 	.word	0x00021bf4
   21bf4:	e5d43001 	ldrb	r3, [r4, #1]
   21bf8:	e3530004 	cmp	r3, #4
   21bfc:	1a000006 	bne	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c00:	e2841006 	add	r1, r4, #6
   21c04:	e1550001 	cmp	r5, r1
   21c08:	3a000003 	bcc	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c0c:	ebffffa3 	bl	21aa0 <CDHCPClient::GetUnaligned(void const*)>
   21c10:	e6bf0f30 	rev	r0, r0
   21c14:	e58601dc 	str	r0, [r6, #476]	; 0x1dc
   21c18:	e5d43001 	ldrb	r3, [r4, #1]
   21c1c:	e2833002 	add	r3, r3, #2
   21c20:	e0844003 	add	r4, r4, r3
   21c24:	e2840002 	add	r0, r4, #2
   21c28:	e1550000 	cmp	r5, r0
   21c2c:	38bd8070 	popcc	{r4, r5, r6, pc}
   21c30:	e5d43000 	ldrb	r3, [r4]
   21c34:	e353003b 	cmp	r3, #59	; 0x3b
   21c38:	9affffae 	bls	21af8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x2c>
   21c3c:	e35300ff 	cmp	r3, #255	; 0xff
   21c40:	08bd8070 	popeq	{r4, r5, r6, pc}
   21c44:	eafffff3 	b	21c18 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x14c>
   21c48:	e5d43001 	ldrb	r3, [r4, #1]
   21c4c:	e3530004 	cmp	r3, #4
   21c50:	1afffff1 	bne	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c54:	e2841006 	add	r1, r4, #6
   21c58:	e1550001 	cmp	r5, r1
   21c5c:	3affffee 	bcc	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c60:	ebffff8e 	bl	21aa0 <CDHCPClient::GetUnaligned(void const*)>
   21c64:	e6bf0f30 	rev	r0, r0
   21c68:	e58601d8 	str	r0, [r6, #472]	; 0x1d8
   21c6c:	e5d43001 	ldrb	r3, [r4, #1]
   21c70:	eaffffe9 	b	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c74:	e5d43001 	ldrb	r3, [r4, #1]
   21c78:	e3530004 	cmp	r3, #4
   21c7c:	1affffe6 	bne	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c80:	e2841006 	add	r1, r4, #6
   21c84:	e1550001 	cmp	r5, r1
   21c88:	3affffe3 	bcc	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c8c:	ebffff83 	bl	21aa0 <CDHCPClient::GetUnaligned(void const*)>
   21c90:	e58601d4 	str	r0, [r6, #468]	; 0x1d4
   21c94:	e5d43001 	ldrb	r3, [r4, #1]
   21c98:	eaffffdf 	b	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c9c:	e5d43001 	ldrb	r3, [r4, #1]
   21ca0:	e3530001 	cmp	r3, #1
   21ca4:	1affffdc 	bne	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21ca8:	e2842003 	add	r2, r4, #3
   21cac:	e1550002 	cmp	r5, r2
   21cb0:	25d43002 	ldrbcs	r3, [r4, #2]
   21cb4:	25c631d1 	strbcs	r3, [r6, #465]	; 0x1d1
   21cb8:	25d43001 	ldrbcs	r3, [r4, #1]
   21cbc:	eaffffd6 	b	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21cc0:	e5d43001 	ldrb	r3, [r4, #1]
   21cc4:	e3530001 	cmp	r3, #1
   21cc8:	1affffd3 	bne	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21ccc:	e2842003 	add	r2, r4, #3
   21cd0:	e1550002 	cmp	r5, r2
   21cd4:	25d43002 	ldrbcs	r3, [r4, #2]
   21cd8:	25c631d0 	strbcs	r3, [r6, #464]	; 0x1d0
   21cdc:	25d43001 	ldrbcs	r3, [r4, #1]
   21ce0:	eaffffcd 	b	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21ce4:	e5d43001 	ldrb	r3, [r4, #1]
   21ce8:	e3530004 	cmp	r3, #4
   21cec:	1affffca 	bne	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21cf0:	e2841006 	add	r1, r4, #6
   21cf4:	e1550001 	cmp	r5, r1
   21cf8:	3affffc7 	bcc	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21cfc:	ebffff67 	bl	21aa0 <CDHCPClient::GetUnaligned(void const*)>
   21d00:	e6bf0f30 	rev	r0, r0
   21d04:	e58601cc 	str	r0, [r6, #460]	; 0x1cc
   21d08:	e5d43001 	ldrb	r3, [r4, #1]
   21d0c:	eaffffc2 	b	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21d10:	e5d43001 	ldrb	r3, [r4, #1]
   21d14:	e3530003 	cmp	r3, #3
   21d18:	9affffbf 	bls	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21d1c:	e2841006 	add	r1, r4, #6
   21d20:	e1550001 	cmp	r5, r1
   21d24:	3affffbc 	bcc	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21d28:	ebffff5c 	bl	21aa0 <CDHCPClient::GetUnaligned(void const*)>
   21d2c:	e58601c8 	str	r0, [r6, #456]	; 0x1c8
   21d30:	e5d43001 	ldrb	r3, [r4, #1]
   21d34:	eaffffb8 	b	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21d38:	e5d43001 	ldrb	r3, [r4, #1]
   21d3c:	e3530003 	cmp	r3, #3
   21d40:	9affffb5 	bls	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21d44:	e2841006 	add	r1, r4, #6
   21d48:	e1550001 	cmp	r5, r1
   21d4c:	3affffb2 	bcc	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21d50:	e59611c4 	ldr	r1, [r6, #452]	; 0x1c4
   21d54:	e3510000 	cmp	r1, #0
   21d58:	1affffaf 	bne	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21d5c:	ebffff4f 	bl	21aa0 <CDHCPClient::GetUnaligned(void const*)>
   21d60:	e58601c4 	str	r0, [r6, #452]	; 0x1c4
   21d64:	e5d43001 	ldrb	r3, [r4, #1]
   21d68:	eaffffab 	b	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21d6c:	e5d43001 	ldrb	r3, [r4, #1]
   21d70:	e3530004 	cmp	r3, #4
   21d74:	1affffa8 	bne	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21d78:	e2841006 	add	r1, r4, #6
   21d7c:	e1550001 	cmp	r5, r1
   21d80:	3affffa5 	bcc	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21d84:	ebffff45 	bl	21aa0 <CDHCPClient::GetUnaligned(void const*)>
   21d88:	e58601c0 	str	r0, [r6, #448]	; 0x1c0
   21d8c:	e5d43001 	ldrb	r3, [r4, #1]
   21d90:	eaffffa1 	b	21c1c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21d94:	e2844001 	add	r4, r4, #1
   21d98:	eaffffa1 	b	21c24 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x158>
   21d9c:	e59f2008 	ldr	r2, [pc, #8]	; 21dac <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x2e0>
   21da0:	e59f1008 	ldr	r1, [pc, #8]	; 21db0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x2e4>
   21da4:	e59f0008 	ldr	r0, [pc, #8]	; 21db4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x2e8>
   21da8:	eb000a7e 	bl	247a8 <assertion_failed>
   21dac:	000002ad 	.word	0x000002ad
   21db0:	00046000 	.word	0x00046000
   21db4:	000460d0 	.word	0x000460d0

00021db8 <CDHCPClient::GetXID() const>:
   21db8:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   21dbc:	e92d4010 	push	{r4, lr}
   21dc0:	e3500000 	cmp	r0, #0
   21dc4:	0a00000b 	beq	21df8 <CDHCPClient::GetXID() const+0x40>
   21dc8:	ebffde4e 	bl	19708 <CNetSubSystem::GetNetDeviceLayer()>
   21dcc:	ebffe7de 	bl	1bd4c <CNetDeviceLayer::GetMACAddress() const>
   21dd0:	eb0023d6 	bl	2ad30 <CMACAddress::Get() const>
   21dd4:	e2504000 	subs	r4, r0, #0
   21dd8:	0a00000a 	beq	21e08 <CDHCPClient::GetXID() const+0x50>
   21ddc:	eb00203e 	bl	29edc <CTimer::Get()>
   21de0:	e2840002 	add	r0, r4, #2
   21de4:	ebffff2d 	bl	21aa0 <CDHCPClient::GetUnaligned(void const*)>
   21de8:	e1a04000 	mov	r4, r0
   21dec:	eb001d81 	bl	293f8 <CTimer::GetClockTicks()>
   21df0:	e0840000 	add	r0, r4, r0
   21df4:	e8bd8010 	pop	{r4, pc}
   21df8:	e59f2018 	ldr	r2, [pc, #24]	; 21e18 <CDHCPClient::GetXID() const+0x60>
   21dfc:	e59f1018 	ldr	r1, [pc, #24]	; 21e1c <CDHCPClient::GetXID() const+0x64>
   21e00:	e59f0018 	ldr	r0, [pc, #24]	; 21e20 <CDHCPClient::GetXID() const+0x68>
   21e04:	eb000a67 	bl	247a8 <assertion_failed>
   21e08:	e3a02fd6 	mov	r2, #856	; 0x358
   21e0c:	e59f1008 	ldr	r1, [pc, #8]	; 21e1c <CDHCPClient::GetXID() const+0x64>
   21e10:	e59f000c 	ldr	r0, [pc, #12]	; 21e24 <CDHCPClient::GetXID() const+0x6c>
   21e14:	eb000a63 	bl	247a8 <assertion_failed>
   21e18:	00000356 	.word	0x00000356
   21e1c:	00046000 	.word	0x00046000
   21e20:	0004539c 	.word	0x0004539c
   21e24:	0004574c 	.word	0x0004574c

00021e28 <CDHCPClient::SetUnaligned(void*, unsigned int)>:
   21e28:	e3500000 	cmp	r0, #0
   21e2c:	0a000007 	beq	21e50 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x28>
   21e30:	e1a0c421 	lsr	ip, r1, #8
   21e34:	e1a02821 	lsr	r2, r1, #16
   21e38:	e1a03c21 	lsr	r3, r1, #24
   21e3c:	e5c01000 	strb	r1, [r0]
   21e40:	e5c0c001 	strb	ip, [r0, #1]
   21e44:	e5c02002 	strb	r2, [r0, #2]
   21e48:	e5c03003 	strb	r3, [r0, #3]
   21e4c:	e12fff1e 	bx	lr
   21e50:	e92d4010 	push	{r4, lr}
   21e54:	e59f2008 	ldr	r2, [pc, #8]	; 21e64 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x3c>
   21e58:	e59f1008 	ldr	r1, [pc, #8]	; 21e68 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x40>
   21e5c:	e59f0008 	ldr	r0, [pc, #8]	; 21e6c <CDHCPClient::SetUnaligned(void*, unsigned int)+0x44>
   21e60:	eb000a50 	bl	247a8 <assertion_failed>
   21e64:	0000036d 	.word	0x0000036d
   21e68:	00046000 	.word	0x00046000
   21e6c:	000460c4 	.word	0x000460c4

00021e70 <CDHCPClient::~CDHCPClient()>:
   21e70:	e3a02000 	mov	r2, #0
   21e74:	e92d4010 	push	{r4, lr}
   21e78:	e1a04000 	mov	r4, r0
   21e7c:	e59f3024 	ldr	r3, [pc, #36]	; 21ea8 <CDHCPClient::~CDHCPClient()+0x38>
   21e80:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   21e84:	e5803000 	str	r3, [r0]
   21e88:	e28000f4 	add	r0, r0, #244	; 0xf4
   21e8c:	eb0003d9 	bl	22df8 <CSocket::~CSocket()>
   21e90:	e28400e4 	add	r0, r4, #228	; 0xe4
   21e94:	eb0016e9 	bl	27a40 <CString::~CString()>
   21e98:	e1a00004 	mov	r0, r4
   21e9c:	eb0007b0 	bl	23d64 <CTask::~CTask()>
   21ea0:	e1a00004 	mov	r0, r4
   21ea4:	e8bd8010 	pop	{r4, pc}
   21ea8:	00046340 	.word	0x00046340

00021eac <CDHCPClient::~CDHCPClient()>:
   21eac:	e92d4010 	push	{r4, lr}
   21eb0:	e1a04000 	mov	r4, r0
   21eb4:	ebffffed 	bl	21e70 <CDHCPClient::~CDHCPClient()>
   21eb8:	e1a00004 	mov	r0, r4
   21ebc:	e3a01e1e 	mov	r1, #480	; 0x1e0
   21ec0:	eb00244e 	bl	2b000 <operator delete(void*, unsigned int)>
   21ec4:	e1a00004 	mov	r0, r4
   21ec8:	e8bd8010 	pop	{r4, pc}

00021ecc <CDHCPClient::ReceiveMessage()>:
   21ecc:	e92d4070 	push	{r4, r5, r6, lr}
   21ed0:	e24dde23 	sub	sp, sp, #560	; 0x230
   21ed4:	e1a04000 	mov	r4, r0
   21ed8:	e3a03040 	mov	r3, #64	; 0x40
   21edc:	e3a02f89 	mov	r2, #548	; 0x224
   21ee0:	e28000f4 	add	r0, r0, #244	; 0xf4
   21ee4:	e28d100c 	add	r1, sp, #12
   21ee8:	eb000468 	bl	23090 <CSocket::Receive(void*, unsigned int, int)>
   21eec:	e35000ef 	cmp	r0, #239	; 0xef
   21ef0:	da000002 	ble	21f00 <CDHCPClient::ReceiveMessage()+0x34>
   21ef4:	e5dd300c 	ldrb	r3, [sp, #12]
   21ef8:	e3530002 	cmp	r3, #2
   21efc:	0a000003 	beq	21f10 <CDHCPClient::ReceiveMessage()+0x44>
   21f00:	e3a04000 	mov	r4, #0
   21f04:	e1a00004 	mov	r0, r4
   21f08:	e28dde23 	add	sp, sp, #560	; 0x230
   21f0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   21f10:	e5dd300d 	ldrb	r3, [sp, #13]
   21f14:	e3530001 	cmp	r3, #1
   21f18:	1afffff8 	bne	21f00 <CDHCPClient::ReceiveMessage()+0x34>
   21f1c:	e5dd300e 	ldrb	r3, [sp, #14]
   21f20:	e3530006 	cmp	r3, #6
   21f24:	1afffff5 	bne	21f00 <CDHCPClient::ReceiveMessage()+0x34>
   21f28:	e59d2010 	ldr	r2, [sp, #16]
   21f2c:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
   21f30:	e1520003 	cmp	r2, r3
   21f34:	1afffff1 	bne	21f00 <CDHCPClient::ReceiveMessage()+0x34>
   21f38:	e59f3114 	ldr	r3, [pc, #276]	; 22054 <CDHCPClient::ReceiveMessage()+0x188>
   21f3c:	e59d20f8 	ldr	r2, [sp, #248]	; 0xf8
   21f40:	e1520003 	cmp	r2, r3
   21f44:	1affffed 	bne	21f00 <CDHCPClient::ReceiveMessage()+0x34>
   21f48:	e1a05000 	mov	r5, r0
   21f4c:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   21f50:	e3500000 	cmp	r0, #0
   21f54:	0a000030 	beq	2201c <CDHCPClient::ReceiveMessage()+0x150>
   21f58:	ebffddea 	bl	19708 <CNetSubSystem::GetNetDeviceLayer()>
   21f5c:	ebffe77a 	bl	1bd4c <CNetDeviceLayer::GetMACAddress() const>
   21f60:	e2506000 	subs	r6, r0, #0
   21f64:	0a000036 	beq	22044 <CDHCPClient::ReceiveMessage()+0x178>
   21f68:	e28d1028 	add	r1, sp, #40	; 0x28
   21f6c:	e28d0004 	add	r0, sp, #4
   21f70:	eb002360 	bl	2acf8 <CMACAddress::CMACAddress(unsigned char const*)>
   21f74:	e1a01006 	mov	r1, r6
   21f78:	e28d0004 	add	r0, sp, #4
   21f7c:	eb002348 	bl	2aca4 <CMACAddress::operator!=(CMACAddress const&) const>
   21f80:	e3500000 	cmp	r0, #0
   21f84:	13a04000 	movne	r4, #0
   21f88:	1a000016 	bne	21fe8 <CDHCPClient::ReceiveMessage()+0x11c>
   21f8c:	e59d101c 	ldr	r1, [sp, #28]
   21f90:	e2843e1d 	add	r3, r4, #464	; 0x1d0
   21f94:	e58401c0 	str	r0, [r4, #448]	; 0x1c0
   21f98:	e58401c4 	str	r0, [r4, #452]	; 0x1c4
   21f9c:	e58401c8 	str	r0, [r4, #456]	; 0x1c8
   21fa0:	e58401cc 	str	r0, [r4, #460]	; 0x1cc
   21fa4:	e58411bc 	str	r1, [r4, #444]	; 0x1bc
   21fa8:	e24520f0 	sub	r2, r5, #240	; 0xf0
   21fac:	e1c300b0 	strh	r0, [r3]
   21fb0:	e28d10fc 	add	r1, sp, #252	; 0xfc
   21fb4:	e58401d4 	str	r0, [r4, #468]	; 0x1d4
   21fb8:	e58401d8 	str	r0, [r4, #472]	; 0x1d8
   21fbc:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
   21fc0:	e1a00004 	mov	r0, r4
   21fc4:	ebfffec0 	bl	21acc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21fc8:	e5d431d0 	ldrb	r3, [r4, #464]	; 0x1d0
   21fcc:	e3530002 	cmp	r3, #2
   21fd0:	0a00000b 	beq	22004 <CDHCPClient::ReceiveMessage()+0x138>
   21fd4:	e3530003 	cmp	r3, #3
   21fd8:	0a000005 	beq	21ff4 <CDHCPClient::ReceiveMessage()+0x128>
   21fdc:	e3530001 	cmp	r3, #1
   21fe0:	13a04001 	movne	r4, #1
   21fe4:	0a000010 	beq	2202c <CDHCPClient::ReceiveMessage()+0x160>
   21fe8:	e28d0004 	add	r0, sp, #4
   21fec:	eb002313 	bl	2ac40 <CMACAddress::~CMACAddress()>
   21ff0:	eaffffc3 	b	21f04 <CDHCPClient::ReceiveMessage()+0x38>
   21ff4:	e3a02080 	mov	r2, #128	; 0x80
   21ff8:	e1a00004 	mov	r0, r4
   21ffc:	e28d1078 	add	r1, sp, #120	; 0x78
   22000:	ebfffeb1 	bl	21acc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   22004:	e1a00004 	mov	r0, r4
   22008:	e3a02040 	mov	r2, #64	; 0x40
   2200c:	e28d1038 	add	r1, sp, #56	; 0x38
   22010:	ebfffead 	bl	21acc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   22014:	e3a04001 	mov	r4, #1
   22018:	eafffff2 	b	21fe8 <CDHCPClient::ReceiveMessage()+0x11c>
   2201c:	e59f2034 	ldr	r2, [pc, #52]	; 22058 <CDHCPClient::ReceiveMessage()+0x18c>
   22020:	e59f1034 	ldr	r1, [pc, #52]	; 2205c <CDHCPClient::ReceiveMessage()+0x190>
   22024:	e59f0034 	ldr	r0, [pc, #52]	; 22060 <CDHCPClient::ReceiveMessage()+0x194>
   22028:	eb0009de 	bl	247a8 <assertion_failed>
   2202c:	e1a00004 	mov	r0, r4
   22030:	e3a02080 	mov	r2, #128	; 0x80
   22034:	e28d1078 	add	r1, sp, #120	; 0x78
   22038:	e1a04003 	mov	r4, r3
   2203c:	ebfffea2 	bl	21acc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   22040:	eaffffe8 	b	21fe8 <CDHCPClient::ReceiveMessage()+0x11c>
   22044:	e59f2018 	ldr	r2, [pc, #24]	; 22064 <CDHCPClient::ReceiveMessage()+0x198>
   22048:	e59f100c 	ldr	r1, [pc, #12]	; 2205c <CDHCPClient::ReceiveMessage()+0x190>
   2204c:	e59f0014 	ldr	r0, [pc, #20]	; 22068 <CDHCPClient::ReceiveMessage()+0x19c>
   22050:	eb0009d4 	bl	247a8 <assertion_failed>
   22054:	63538263 	.word	0x63538263
   22058:	0000027b 	.word	0x0000027b
   2205c:	00046000 	.word	0x00046000
   22060:	0004539c 	.word	0x0004539c
   22064:	0000027d 	.word	0x0000027d
   22068:	000455c8 	.word	0x000455c8

0002206c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>:
   2206c:	e92d4070 	push	{r4, r5, r6, lr}
   22070:	e1a04000 	mov	r4, r0
   22074:	e24ddf8a 	sub	sp, sp, #552	; 0x228
   22078:	e1a05001 	mov	r5, r1
   2207c:	e1a06002 	mov	r6, r2
   22080:	e3a01000 	mov	r1, #0
   22084:	e3a02f89 	mov	r2, #548	; 0x224
   22088:	e28d0004 	add	r0, sp, #4
   2208c:	eb001f9e 	bl	29f0c <memset>
   22090:	e5d431b0 	ldrb	r3, [r4, #432]	; 0x1b0
   22094:	e3a02006 	mov	r2, #6
   22098:	e3530000 	cmp	r3, #0
   2209c:	13a01080 	movne	r1, #128	; 0x80
   220a0:	03a01000 	moveq	r1, #0
   220a4:	e59f30cc 	ldr	r3, [pc, #204]	; 22178 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x10c>
   220a8:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   220ac:	e1cd30b4 	strh	r3, [sp, #4]
   220b0:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
   220b4:	e1cd10be 	strh	r1, [sp, #14]
   220b8:	e58d3008 	str	r3, [sp, #8]
   220bc:	e59411b8 	ldr	r1, [r4, #440]	; 0x1b8
   220c0:	e59f30b4 	ldr	r3, [pc, #180]	; 2217c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x110>
   220c4:	e3500000 	cmp	r0, #0
   220c8:	e58d1010 	str	r1, [sp, #16]
   220cc:	e5cd2006 	strb	r2, [sp, #6]
   220d0:	e58d30f0 	str	r3, [sp, #240]	; 0xf0
   220d4:	0a000017 	beq	22138 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xcc>
   220d8:	ebffdd8a 	bl	19708 <CNetSubSystem::GetNetDeviceLayer()>
   220dc:	ebffe71a 	bl	1bd4c <CNetDeviceLayer::GetMACAddress() const>
   220e0:	e3500000 	cmp	r0, #0
   220e4:	0a000017 	beq	22148 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xdc>
   220e8:	e28d1020 	add	r1, sp, #32
   220ec:	eb00231b 	bl	2ad60 <CMACAddress::CopyTo(unsigned char*) const>
   220f0:	e3550000 	cmp	r5, #0
   220f4:	0a000017 	beq	22158 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xec>
   220f8:	e3560f4d 	cmp	r6, #308	; 0x134
   220fc:	8a000019 	bhi	22168 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xfc>
   22100:	e1a02006 	mov	r2, r6
   22104:	e1a01005 	mov	r1, r5
   22108:	e28d00f4 	add	r0, sp, #244	; 0xf4
   2210c:	eb0021c7 	bl	2a830 <memcpy>
   22110:	e3a03000 	mov	r3, #0
   22114:	e3a02f89 	mov	r2, #548	; 0x224
   22118:	e28d1004 	add	r1, sp, #4
   2211c:	e28400f4 	add	r0, r4, #244	; 0xf4
   22120:	eb0003bc 	bl	23018 <CSocket::Send(void const*, unsigned int, int)>
   22124:	e2400f89 	sub	r0, r0, #548	; 0x224
   22128:	e16f0f10 	clz	r0, r0
   2212c:	e1a002a0 	lsr	r0, r0, #5
   22130:	e28ddf8a 	add	sp, sp, #552	; 0x228
   22134:	e8bd8070 	pop	{r4, r5, r6, pc}
   22138:	e3a02f96 	mov	r2, #600	; 0x258
   2213c:	e59f103c 	ldr	r1, [pc, #60]	; 22180 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   22140:	e59f003c 	ldr	r0, [pc, #60]	; 22184 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x118>
   22144:	eb000997 	bl	247a8 <assertion_failed>
   22148:	e59f2038 	ldr	r2, [pc, #56]	; 22188 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x11c>
   2214c:	e59f102c 	ldr	r1, [pc, #44]	; 22180 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   22150:	e59f0034 	ldr	r0, [pc, #52]	; 2218c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x120>
   22154:	eb000993 	bl	247a8 <assertion_failed>
   22158:	e59f2030 	ldr	r2, [pc, #48]	; 22190 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x124>
   2215c:	e59f101c 	ldr	r1, [pc, #28]	; 22180 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   22160:	e59f002c 	ldr	r0, [pc, #44]	; 22194 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x128>
   22164:	eb00098f 	bl	247a8 <assertion_failed>
   22168:	e59f2028 	ldr	r2, [pc, #40]	; 22198 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x12c>
   2216c:	e59f100c 	ldr	r1, [pc, #12]	; 22180 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   22170:	e59f0024 	ldr	r0, [pc, #36]	; 2219c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x130>
   22174:	eb00098b 	bl	247a8 <assertion_failed>
   22178:	00000101 	.word	0x00000101
   2217c:	63538263 	.word	0x63538263
   22180:	00046000 	.word	0x00046000
   22184:	0004539c 	.word	0x0004539c
   22188:	0000025a 	.word	0x0000025a
   2218c:	0004574c 	.word	0x0004574c
   22190:	0000025d 	.word	0x0000025d
   22194:	000460d0 	.word	0x000460d0
   22198:	0000025e 	.word	0x0000025e
   2219c:	000460e0 	.word	0x000460e0

000221a0 <CDHCPClient::SendDiscover()>:
   221a0:	e3a01000 	mov	r1, #0
   221a4:	e3a0200c 	mov	r2, #12
   221a8:	e58011b8 	str	r1, [r0, #440]	; 0x1b8
   221ac:	e59f1000 	ldr	r1, [pc]	; 221b4 <CDHCPClient::SendDiscover()+0x14>
   221b0:	eaffffad 	b	2206c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   221b4:	00046354 	.word	0x00046354

000221b8 <CDHCPClient::SendRequest(unsigned int)>:
   221b8:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   221bc:	e3510000 	cmp	r1, #0
   221c0:	e1a07000 	mov	r7, r0
   221c4:	e28db01c 	add	fp, sp, #28
   221c8:	e58011b8 	str	r1, [r0, #440]	; 0x1b8
   221cc:	1a000036 	bne	222ac <CDHCPClient::SendRequest(unsigned int)+0xf4>
   221d0:	e59f1108 	ldr	r1, [pc, #264]	; 222e0 <CDHCPClient::SendRequest(unsigned int)+0x128>
   221d4:	e3a06018 	mov	r6, #24
   221d8:	e1a05001 	mov	r5, r1
   221dc:	e59021a0 	ldr	r2, [r0, #416]	; 0x1a0
   221e0:	e590319c 	ldr	r3, [r0, #412]	; 0x19c
   221e4:	e1a00422 	lsr	r0, r2, #8
   221e8:	e1a04822 	lsr	r4, r2, #16
   221ec:	e1a0ec22 	lsr	lr, r2, #24
   221f0:	e5c10006 	strb	r0, [r1, #6]
   221f4:	e1a0c423 	lsr	ip, r3, #8
   221f8:	e5c12005 	strb	r2, [r1, #5]
   221fc:	e1a00823 	lsr	r0, r3, #16
   22200:	e1a02c23 	lsr	r2, r3, #24
   22204:	e5c14007 	strb	r4, [r1, #7]
   22208:	e5c1e008 	strb	lr, [r1, #8]
   2220c:	e5c1300b 	strb	r3, [r1, #11]
   22210:	e5c1c00c 	strb	ip, [r1, #12]
   22214:	e5c1000d 	strb	r0, [r1, #13]
   22218:	e5c1200e 	strb	r2, [r1, #14]
   2221c:	e28780e4 	add	r8, r7, #228	; 0xe4
   22220:	e1a00008 	mov	r0, r8
   22224:	eb001682 	bl	27c34 <CString::GetLength() const>
   22228:	e2504000 	subs	r4, r0, #0
   2222c:	0a000021 	beq	222b8 <CDHCPClient::SendRequest(unsigned int)+0x100>
   22230:	e35400ff 	cmp	r4, #255	; 0xff
   22234:	8a000025 	bhi	222d0 <CDHCPClient::SendRequest(unsigned int)+0x118>
   22238:	e086c004 	add	ip, r6, r4
   2223c:	e28c3009 	add	r3, ip, #9
   22240:	e3c33007 	bic	r3, r3, #7
   22244:	e04dd003 	sub	sp, sp, r3
   22248:	e1a01005 	mov	r1, r5
   2224c:	e1a02006 	mov	r2, r6
   22250:	e1a0000d 	mov	r0, sp
   22254:	e28c9002 	add	r9, ip, #2
   22258:	eb002174 	bl	2a830 <memcpy>
   2225c:	e3a0200c 	mov	r2, #12
   22260:	e2466001 	sub	r6, r6, #1
   22264:	e08d3006 	add	r3, sp, r6
   22268:	e7cd2006 	strb	r2, [sp, r6]
   2226c:	e1a00008 	mov	r0, r8
   22270:	e5c34001 	strb	r4, [r3, #1]
   22274:	e2835002 	add	r5, r3, #2
   22278:	eb00163b 	bl	27b6c <CString::operator char const*() const>
   2227c:	e1a02004 	mov	r2, r4
   22280:	e1a01000 	mov	r1, r0
   22284:	e1a00005 	mov	r0, r5
   22288:	eb002168 	bl	2a830 <memcpy>
   2228c:	e3e03000 	mvn	r3, #0
   22290:	e1a02009 	mov	r2, r9
   22294:	e1a00007 	mov	r0, r7
   22298:	e1a0100d 	mov	r1, sp
   2229c:	e7c53004 	strb	r3, [r5, r4]
   222a0:	ebffff71 	bl	2206c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   222a4:	e24bd01c 	sub	sp, fp, #28
   222a8:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   222ac:	e3a0600c 	mov	r6, #12
   222b0:	e59f502c 	ldr	r5, [pc, #44]	; 222e4 <CDHCPClient::SendRequest(unsigned int)+0x12c>
   222b4:	eaffffd8 	b	2221c <CDHCPClient::SendRequest(unsigned int)+0x64>
   222b8:	e1a02006 	mov	r2, r6
   222bc:	e1a01005 	mov	r1, r5
   222c0:	e1a00007 	mov	r0, r7
   222c4:	ebffff68 	bl	2206c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   222c8:	e24bd01c 	sub	sp, fp, #28
   222cc:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   222d0:	e59f2010 	ldr	r2, [pc, #16]	; 222e8 <CDHCPClient::SendRequest(unsigned int)+0x130>
   222d4:	e59f1010 	ldr	r1, [pc, #16]	; 222ec <CDHCPClient::SendRequest(unsigned int)+0x134>
   222d8:	e59f0010 	ldr	r0, [pc, #16]	; 222f0 <CDHCPClient::SendRequest(unsigned int)+0x138>
   222dc:	eb000931 	bl	247a8 <assertion_failed>
   222e0:	0004a0a4 	.word	0x0004a0a4
   222e4:	00046360 	.word	0x00046360
   222e8:	00000231 	.word	0x00000231
   222ec:	00046000 	.word	0x00046000
   222f0:	00046108 	.word	0x00046108

000222f4 <CDHCPClient::SendAndReceive(bool, unsigned int)>:
   222f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   222f8:	e1a04000 	mov	r4, r0
   222fc:	e1a07001 	mov	r7, r1
   22300:	e59f5170 	ldr	r5, [pc, #368]	; 22478 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x184>
   22304:	e24dd014 	sub	sp, sp, #20
   22308:	e59fa16c 	ldr	sl, [pc, #364]	; 2247c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x188>
   2230c:	e58d200c 	str	r2, [sp, #12]
   22310:	e245b018 	sub	fp, r5, #24
   22314:	e2459020 	sub	r9, r5, #32
   22318:	e3570000 	cmp	r7, #0
   2231c:	0a000040 	beq	22424 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x130>
   22320:	e1a00004 	mov	r0, r4
   22324:	e59d100c 	ldr	r1, [sp, #12]
   22328:	ebffffa2 	bl	221b8 <CDHCPClient::SendRequest(unsigned int)>
   2232c:	e2200001 	eor	r0, r0, #1
   22330:	e6ef3070 	uxtb	r3, r0
   22334:	e3530000 	cmp	r3, #0
   22338:	1a000041 	bne	22444 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x150>
   2233c:	eb001ee6 	bl	29edc <CTimer::Get()>
   22340:	eb001c33 	bl	29414 <CTimer::GetTicks() const>
   22344:	e1a06000 	mov	r6, r0
   22348:	ea000004 	b	22360 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x6c>
   2234c:	e2422005 	sub	r2, r2, #5
   22350:	e3520001 	cmp	r2, #1
   22354:	9a000017 	bls	223b8 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xc4>
   22358:	eb000866 	bl	244f8 <CScheduler::Get()>
   2235c:	eb0007da 	bl	242cc <CScheduler::Yield()>
   22360:	eb001edd 	bl	29edc <CTimer::Get()>
   22364:	eb001c2a 	bl	29414 <CTimer::GetTicks() const>
   22368:	e5953000 	ldr	r3, [r5]
   2236c:	e0400006 	sub	r0, r0, r6
   22370:	e1500003 	cmp	r0, r3
   22374:	2a000012 	bcs	223c4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xd0>
   22378:	e1a00004 	mov	r0, r4
   2237c:	ebfffed2 	bl	21ecc <CDHCPClient::ReceiveMessage()>
   22380:	e2508000 	subs	r8, r0, #0
   22384:	0afffff3 	beq	22358 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22388:	e3570000 	cmp	r7, #0
   2238c:	e5d421d1 	ldrb	r2, [r4, #465]	; 0x1d1
   22390:	1affffed 	bne	2234c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x58>
   22394:	e3520002 	cmp	r2, #2
   22398:	1affffee 	bne	22358 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   2239c:	e1a00004 	mov	r0, r4
   223a0:	ebfffd5f 	bl	21924 <CDHCPClient::CheckConfig()>
   223a4:	e3500000 	cmp	r0, #0
   223a8:	0affffea 	beq	22358 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   223ac:	e59421d4 	ldr	r2, [r4, #468]	; 0x1d4
   223b0:	e3520000 	cmp	r2, #0
   223b4:	0affffe7 	beq	22358 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   223b8:	e1a00008 	mov	r0, r8
   223bc:	e28dd014 	add	sp, sp, #20
   223c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223c4:	eb0011df 	bl	26b48 <CLogger::Get()>
   223c8:	e1a0300a 	mov	r3, sl
   223cc:	e3a02002 	mov	r2, #2
   223d0:	e1a01009 	mov	r1, r9
   223d4:	eb00111d 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   223d8:	e59f30a0 	ldr	r3, [pc, #160]	; 22480 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x18c>
   223dc:	e2855004 	add	r5, r5, #4
   223e0:	e1530005 	cmp	r3, r5
   223e4:	1affffcb 	bne	22318 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x24>
   223e8:	eb0011d6 	bl	26b48 <CLogger::Get()>
   223ec:	e59f2090 	ldr	r2, [pc, #144]	; 22484 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x190>
   223f0:	e59f1090 	ldr	r1, [pc, #144]	; 22488 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x194>
   223f4:	e3570000 	cmp	r7, #0
   223f8:	11a07002 	movne	r7, r2
   223fc:	01a07001 	moveq	r7, r1
   22400:	e3a08000 	mov	r8, #0
   22404:	e3a02002 	mov	r2, #2
   22408:	e59f307c 	ldr	r3, [pc, #124]	; 2248c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x198>
   2240c:	e59f107c 	ldr	r1, [pc, #124]	; 22490 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x19c>
   22410:	e58d7000 	str	r7, [sp]
   22414:	eb00110d 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22418:	e1a00008 	mov	r0, r8
   2241c:	e28dd014 	add	sp, sp, #20
   22420:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22424:	e3a0200c 	mov	r2, #12
   22428:	e1a0100b 	mov	r1, fp
   2242c:	e1a00004 	mov	r0, r4
   22430:	e58471b8 	str	r7, [r4, #440]	; 0x1b8
   22434:	ebffff0c 	bl	2206c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   22438:	e2200001 	eor	r0, r0, #1
   2243c:	e6ef3070 	uxtb	r3, r0
   22440:	eaffffbb 	b	22334 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x40>
   22444:	eb0011bf 	bl	26b48 <CLogger::Get()>
   22448:	e59f2044 	ldr	r2, [pc, #68]	; 22494 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a0>
   2244c:	e59f1044 	ldr	r1, [pc, #68]	; 22498 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a4>
   22450:	e3570000 	cmp	r7, #0
   22454:	11a07002 	movne	r7, r2
   22458:	01a07001 	moveq	r7, r1
   2245c:	e3a02001 	mov	r2, #1
   22460:	e59f3034 	ldr	r3, [pc, #52]	; 2249c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a8>
   22464:	e59f1024 	ldr	r1, [pc, #36]	; 22490 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x19c>
   22468:	e58d7000 	str	r7, [sp]
   2246c:	eb0010f7 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22470:	e3a08000 	mov	r8, #0
   22474:	eaffffcf 	b	223b8 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xc4>
   22478:	0004636c 	.word	0x0004636c
   2247c:	00046154 	.word	0x00046154
   22480:	0004637c 	.word	0x0004637c
   22484:	00046130 	.word	0x00046130
   22488:	0004613c 	.word	0x0004613c
   2248c:	00046178 	.word	0x00046178
   22490:	0004634c 	.word	0x0004634c
   22494:	0004611c 	.word	0x0004611c
   22498:	00046124 	.word	0x00046124
   2249c:	00046144 	.word	0x00046144

000224a0 <CDHCPClient::SelectAndRequest()>:
   224a0:	e92d4070 	push	{r4, r5, r6, lr}
   224a4:	e3a06001 	mov	r6, #1
   224a8:	e1a04000 	mov	r4, r0
   224ac:	e24dd028 	sub	sp, sp, #40	; 0x28
   224b0:	e5c061b0 	strb	r6, [r0, #432]	; 0x1b0
   224b4:	e28d0008 	add	r0, sp, #8
   224b8:	ebfffa18 	bl	20d20 <CIPAddress::CIPAddress()>
   224bc:	e28450f4 	add	r5, r4, #244	; 0xf4
   224c0:	e28d0008 	add	r0, sp, #8
   224c4:	ebfffac0 	bl	20fcc <CIPAddress::SetBroadcast()>
   224c8:	e1a00005 	mov	r0, r5
   224cc:	e3a02043 	mov	r2, #67	; 0x43
   224d0:	e28d1008 	add	r1, sp, #8
   224d4:	eb0001d5 	bl	22c30 <CSocket::Connect(CIPAddress&, unsigned short)>
   224d8:	e3500000 	cmp	r0, #0
   224dc:	ba000066 	blt	2267c <CDHCPClient::SelectAndRequest()+0x1dc>
   224e0:	e1a00005 	mov	r0, r5
   224e4:	e1a01006 	mov	r1, r6
   224e8:	eb000346 	bl	23208 <CSocket::SetOptionBroadcast(bool)>
   224ec:	e2505000 	subs	r5, r0, #0
   224f0:	1a000056 	bne	22650 <CDHCPClient::SelectAndRequest()+0x1b0>
   224f4:	e1a00004 	mov	r0, r4
   224f8:	ebfffe2e 	bl	21db8 <CDHCPClient::GetXID() const>
   224fc:	e1a02005 	mov	r2, r5
   22500:	e58401b4 	str	r0, [r4, #436]	; 0x1b4
   22504:	e1a01005 	mov	r1, r5
   22508:	e1a00004 	mov	r0, r4
   2250c:	ebffff78 	bl	222f4 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   22510:	e3500000 	cmp	r0, #0
   22514:	0a000061 	beq	226a0 <CDHCPClient::SelectAndRequest()+0x200>
   22518:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   2251c:	e3530000 	cmp	r3, #0
   22520:	e584319c 	str	r3, [r4, #412]	; 0x19c
   22524:	0a000068 	beq	226cc <CDHCPClient::SelectAndRequest()+0x22c>
   22528:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   2252c:	e3530000 	cmp	r3, #0
   22530:	e58431a0 	str	r3, [r4, #416]	; 0x1a0
   22534:	0a00006f 	beq	226f8 <CDHCPClient::SelectAndRequest()+0x258>
   22538:	e1a02005 	mov	r2, r5
   2253c:	e1a01006 	mov	r1, r6
   22540:	e1a00004 	mov	r0, r4
   22544:	ebffff6a 	bl	222f4 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   22548:	e3500000 	cmp	r0, #0
   2254c:	0a000053 	beq	226a0 <CDHCPClient::SelectAndRequest()+0x200>
   22550:	e5d431d1 	ldrb	r3, [r4, #465]	; 0x1d1
   22554:	e3530006 	cmp	r3, #6
   22558:	0a00006a 	beq	22708 <CDHCPClient::SelectAndRequest()+0x268>
   2255c:	e1a00004 	mov	r0, r4
   22560:	ebfffcef 	bl	21924 <CDHCPClient::CheckConfig()>
   22564:	e3500000 	cmp	r0, #0
   22568:	0a00004e 	beq	226a8 <CDHCPClient::SelectAndRequest()+0x208>
   2256c:	e594219c 	ldr	r2, [r4, #412]	; 0x19c
   22570:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   22574:	e1520003 	cmp	r2, r3
   22578:	1a000057 	bne	226dc <CDHCPClient::SelectAndRequest()+0x23c>
   2257c:	e59421a0 	ldr	r2, [r4, #416]	; 0x1a0
   22580:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   22584:	e1520003 	cmp	r2, r3
   22588:	1a000048 	bne	226b0 <CDHCPClient::SelectAndRequest()+0x210>
   2258c:	e28d0010 	add	r0, sp, #16
   22590:	ebfff9e2 	bl	20d20 <CIPAddress::CIPAddress()>
   22594:	e594119c 	ldr	r1, [r4, #412]	; 0x19c
   22598:	e28d0010 	add	r0, sp, #16
   2259c:	ebfffa62 	bl	20f2c <CIPAddress::Set(unsigned int)>
   225a0:	e28d0018 	add	r0, sp, #24
   225a4:	eb001558 	bl	27b0c <CString::CString()>
   225a8:	e28d1018 	add	r1, sp, #24
   225ac:	e28d0010 	add	r0, sp, #16
   225b0:	ebfffad8 	bl	21118 <CIPAddress::Format(CString*) const>
   225b4:	eb001163 	bl	26b48 <CLogger::Get()>
   225b8:	e1a05000 	mov	r5, r0
   225bc:	e28d0018 	add	r0, sp, #24
   225c0:	eb001569 	bl	27b6c <CString::operator char const*() const>
   225c4:	e1a02000 	mov	r2, r0
   225c8:	e59f3164 	ldr	r3, [pc, #356]	; 22734 <CDHCPClient::SelectAndRequest()+0x294>
   225cc:	e1a00005 	mov	r0, r5
   225d0:	e58d2000 	str	r2, [sp]
   225d4:	e59f115c 	ldr	r1, [pc, #348]	; 22738 <CDHCPClient::SelectAndRequest()+0x298>
   225d8:	e3a02003 	mov	r2, #3
   225dc:	eb00109b 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   225e0:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   225e4:	e3500000 	cmp	r0, #0
   225e8:	0a00004d 	beq	22724 <CDHCPClient::SelectAndRequest()+0x284>
   225ec:	e594119c 	ldr	r1, [r4, #412]	; 0x19c
   225f0:	ebfff9ae 	bl	20cb0 <CNetConfig::SetIPAddress(unsigned int)>
   225f4:	e59411c0 	ldr	r1, [r4, #448]	; 0x1c0
   225f8:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   225fc:	ebfff9b2 	bl	20ccc <CNetConfig::SetNetMask(unsigned int)>
   22600:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   22604:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   22608:	ebfff961 	bl	20b94 <CNetConfig::SetDefaultGateway(unsigned int)>
   2260c:	e59411c8 	ldr	r1, [r4, #456]	; 0x1c8
   22610:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   22614:	ebfff960 	bl	20b9c <CNetConfig::SetDNSServer(unsigned int)>
   22618:	e3a03001 	mov	r3, #1
   2261c:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   22620:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   22624:	e5c43194 	strb	r3, [r4, #404]	; 0x194
   22628:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   2262c:	e58411a4 	str	r1, [r4, #420]	; 0x1a4
   22630:	e58421a8 	str	r2, [r4, #424]	; 0x1a8
   22634:	e58431ac 	str	r3, [r4, #428]	; 0x1ac
   22638:	e28d0018 	add	r0, sp, #24
   2263c:	eb0014ff 	bl	27a40 <CString::~CString()>
   22640:	e28d0010 	add	r0, sp, #16
   22644:	ebfff9cb 	bl	20d78 <CIPAddress::~CIPAddress()>
   22648:	e3a04000 	mov	r4, #0
   2264c:	ea000005 	b	22668 <CDHCPClient::SelectAndRequest()+0x1c8>
   22650:	eb00113c 	bl	26b48 <CLogger::Get()>
   22654:	e1a02006 	mov	r2, r6
   22658:	e59f30dc 	ldr	r3, [pc, #220]	; 2273c <CDHCPClient::SelectAndRequest()+0x29c>
   2265c:	e59f10d4 	ldr	r1, [pc, #212]	; 22738 <CDHCPClient::SelectAndRequest()+0x298>
   22660:	e1a04006 	mov	r4, r6
   22664:	eb001079 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22668:	e28d0008 	add	r0, sp, #8
   2266c:	ebfff9c1 	bl	20d78 <CIPAddress::~CIPAddress()>
   22670:	e1a00004 	mov	r0, r4
   22674:	e28dd028 	add	sp, sp, #40	; 0x28
   22678:	e8bd8070 	pop	{r4, r5, r6, pc}
   2267c:	eb001131 	bl	26b48 <CLogger::Get()>
   22680:	e3a02043 	mov	r2, #67	; 0x43
   22684:	e59f30b4 	ldr	r3, [pc, #180]	; 22740 <CDHCPClient::SelectAndRequest()+0x2a0>
   22688:	e58d2000 	str	r2, [sp]
   2268c:	e59f10a4 	ldr	r1, [pc, #164]	; 22738 <CDHCPClient::SelectAndRequest()+0x298>
   22690:	e1a02006 	mov	r2, r6
   22694:	e1a04006 	mov	r4, r6
   22698:	eb00106c 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2269c:	eafffff1 	b	22668 <CDHCPClient::SelectAndRequest()+0x1c8>
   226a0:	e3a04002 	mov	r4, #2
   226a4:	eaffffef 	b	22668 <CDHCPClient::SelectAndRequest()+0x1c8>
   226a8:	e3a04004 	mov	r4, #4
   226ac:	eaffffed 	b	22668 <CDHCPClient::SelectAndRequest()+0x1c8>
   226b0:	eb001124 	bl	26b48 <CLogger::Get()>
   226b4:	e3a02002 	mov	r2, #2
   226b8:	e59f3084 	ldr	r3, [pc, #132]	; 22744 <CDHCPClient::SelectAndRequest()+0x2a4>
   226bc:	e59f1074 	ldr	r1, [pc, #116]	; 22738 <CDHCPClient::SelectAndRequest()+0x298>
   226c0:	eb001062 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   226c4:	e3a04005 	mov	r4, #5
   226c8:	eaffffe6 	b	22668 <CDHCPClient::SelectAndRequest()+0x1c8>
   226cc:	e3a020f9 	mov	r2, #249	; 0xf9
   226d0:	e59f1070 	ldr	r1, [pc, #112]	; 22748 <CDHCPClient::SelectAndRequest()+0x2a8>
   226d4:	e59f0070 	ldr	r0, [pc, #112]	; 2274c <CDHCPClient::SelectAndRequest()+0x2ac>
   226d8:	eb000832 	bl	247a8 <assertion_failed>
   226dc:	eb001119 	bl	26b48 <CLogger::Get()>
   226e0:	e3a02002 	mov	r2, #2
   226e4:	e59f3064 	ldr	r3, [pc, #100]	; 22750 <CDHCPClient::SelectAndRequest()+0x2b0>
   226e8:	e59f1048 	ldr	r1, [pc, #72]	; 22738 <CDHCPClient::SelectAndRequest()+0x298>
   226ec:	eb001057 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   226f0:	e3a04005 	mov	r4, #5
   226f4:	eaffffdb 	b	22668 <CDHCPClient::SelectAndRequest()+0x1c8>
   226f8:	e3a020fc 	mov	r2, #252	; 0xfc
   226fc:	e59f1044 	ldr	r1, [pc, #68]	; 22748 <CDHCPClient::SelectAndRequest()+0x2a8>
   22700:	e59f004c 	ldr	r0, [pc, #76]	; 22754 <CDHCPClient::SelectAndRequest()+0x2b4>
   22704:	eb000827 	bl	247a8 <assertion_failed>
   22708:	eb00110e 	bl	26b48 <CLogger::Get()>
   2270c:	e3a02002 	mov	r2, #2
   22710:	e59f3040 	ldr	r3, [pc, #64]	; 22758 <CDHCPClient::SelectAndRequest()+0x2b8>
   22714:	e59f101c 	ldr	r1, [pc, #28]	; 22738 <CDHCPClient::SelectAndRequest()+0x298>
   22718:	eb00104c 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2271c:	e3a04003 	mov	r4, #3
   22720:	eaffffd0 	b	22668 <CDHCPClient::SelectAndRequest()+0x1c8>
   22724:	e59f2030 	ldr	r2, [pc, #48]	; 2275c <CDHCPClient::SelectAndRequest()+0x2bc>
   22728:	e59f1018 	ldr	r1, [pc, #24]	; 22748 <CDHCPClient::SelectAndRequest()+0x2a8>
   2272c:	e59f002c 	ldr	r0, [pc, #44]	; 22760 <CDHCPClient::SelectAndRequest()+0x2c0>
   22730:	eb00081c 	bl	247a8 <assertion_failed>
   22734:	00046254 	.word	0x00046254
   22738:	0004634c 	.word	0x0004634c
   2273c:	000461b0 	.word	0x000461b0
   22740:	0004618c 	.word	0x0004618c
   22744:	00046234 	.word	0x00046234
   22748:	00046000 	.word	0x00046000
   2274c:	000461cc 	.word	0x000461cc
   22750:	0004621c 	.word	0x0004621c
   22754:	000461e4 	.word	0x000461e4
   22758:	00046200 	.word	0x00046200
   2275c:	00000126 	.word	0x00000126
   22760:	000453dc 	.word	0x000453dc

00022764 <CDHCPClient::RenewOrRebind(bool, unsigned int)>:
   22764:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22768:	e1a04000 	mov	r4, r0
   2276c:	e24dd018 	sub	sp, sp, #24
   22770:	e1a05002 	mov	r5, r2
   22774:	e1a06001 	mov	r6, r1
   22778:	eb001dd7 	bl	29edc <CTimer::Get()>
   2277c:	eb001b26 	bl	2941c <CTimer::GetUptime() const>
   22780:	e5943198 	ldr	r3, [r4, #408]	; 0x198
   22784:	e0400003 	sub	r0, r0, r3
   22788:	e1500005 	cmp	r0, r5
   2278c:	2a00004f 	bcs	228d0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x16c>
   22790:	eb0010ec 	bl	26b48 <CLogger::Get()>
   22794:	e3560000 	cmp	r6, #0
   22798:	1a00003d 	bne	22894 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x130>
   2279c:	e59f72cc 	ldr	r7, [pc, #716]	; 22a70 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x30c>
   227a0:	e59f32cc 	ldr	r3, [pc, #716]	; 22a74 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   227a4:	e3a02004 	mov	r2, #4
   227a8:	e59f12c8 	ldr	r1, [pc, #712]	; 22a78 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   227ac:	e28d6010 	add	r6, sp, #16
   227b0:	e58d7000 	str	r7, [sp]
   227b4:	eb001025 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   227b8:	e1a00006 	mov	r0, r6
   227bc:	ebfff957 	bl	20d20 <CIPAddress::CIPAddress()>
   227c0:	e3a03001 	mov	r3, #1
   227c4:	e1a00006 	mov	r0, r6
   227c8:	e5c431b0 	strb	r3, [r4, #432]	; 0x1b0
   227cc:	ebfff9fe 	bl	20fcc <CIPAddress::SetBroadcast()>
   227d0:	e28480f4 	add	r8, r4, #244	; 0xf4
   227d4:	e1a00008 	mov	r0, r8
   227d8:	e3a02043 	mov	r2, #67	; 0x43
   227dc:	e1a01006 	mov	r1, r6
   227e0:	eb000112 	bl	22c30 <CSocket::Connect(CIPAddress&, unsigned short)>
   227e4:	e3500000 	cmp	r0, #0
   227e8:	ba00003c 	blt	228e0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x17c>
   227ec:	e1a00008 	mov	r0, r8
   227f0:	e5d411b0 	ldrb	r1, [r4, #432]	; 0x1b0
   227f4:	eb000283 	bl	23208 <CSocket::SetOptionBroadcast(bool)>
   227f8:	e3500000 	cmp	r0, #0
   227fc:	0a000018 	beq	22864 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x100>
   22800:	ea00007f 	b	22a04 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2a0>
   22804:	e1a00004 	mov	r0, r4
   22808:	ebfffd6a 	bl	21db8 <CDHCPClient::GetXID() const>
   2280c:	e3a01001 	mov	r1, #1
   22810:	e58401b4 	str	r0, [r4, #436]	; 0x1b4
   22814:	e594219c 	ldr	r2, [r4, #412]	; 0x19c
   22818:	e1a00004 	mov	r0, r4
   2281c:	ebfffeb4 	bl	222f4 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   22820:	e3500000 	cmp	r0, #0
   22824:	1a00003c 	bne	2291c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x1b8>
   22828:	eb001dab 	bl	29edc <CTimer::Get()>
   2282c:	eb001afa 	bl	2941c <CTimer::GetUptime() const>
   22830:	e5943198 	ldr	r3, [r4, #408]	; 0x198
   22834:	e0402003 	sub	r2, r0, r3
   22838:	e1550002 	cmp	r5, r2
   2283c:	9a00000e 	bls	2287c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x118>
   22840:	e0853003 	add	r3, r5, r3
   22844:	e0431000 	sub	r1, r3, r0
   22848:	e3510077 	cmp	r1, #119	; 0x77
   2284c:	93a0103c 	movls	r1, #60	; 0x3c
   22850:	81a010a1 	lsrhi	r1, r1, #1
   22854:	e58d100c 	str	r1, [sp, #12]
   22858:	eb000726 	bl	244f8 <CScheduler::Get()>
   2285c:	e59d100c 	ldr	r1, [sp, #12]
   22860:	eb0006e9 	bl	2440c <CScheduler::Sleep(unsigned int)>
   22864:	eb001d9c 	bl	29edc <CTimer::Get()>
   22868:	eb001aeb 	bl	2941c <CTimer::GetUptime() const>
   2286c:	e5943198 	ldr	r3, [r4, #408]	; 0x198
   22870:	e0400003 	sub	r0, r0, r3
   22874:	e1550000 	cmp	r5, r0
   22878:	8affffe1 	bhi	22804 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0xa0>
   2287c:	e3a04002 	mov	r4, #2
   22880:	e1a00006 	mov	r0, r6
   22884:	ebfff93b 	bl	20d78 <CIPAddress::~CIPAddress()>
   22888:	e1a00004 	mov	r0, r4
   2288c:	e28dd018 	add	sp, sp, #24
   22890:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22894:	e59f71e0 	ldr	r7, [pc, #480]	; 22a7c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x318>
   22898:	e3a02004 	mov	r2, #4
   2289c:	e59f31d0 	ldr	r3, [pc, #464]	; 22a74 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   228a0:	e59f11d0 	ldr	r1, [pc, #464]	; 22a78 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   228a4:	e28d6010 	add	r6, sp, #16
   228a8:	e58d7000 	str	r7, [sp]
   228ac:	eb000fe7 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   228b0:	e1a00006 	mov	r0, r6
   228b4:	ebfff919 	bl	20d20 <CIPAddress::CIPAddress()>
   228b8:	e3a03000 	mov	r3, #0
   228bc:	e1a00006 	mov	r0, r6
   228c0:	e59411a0 	ldr	r1, [r4, #416]	; 0x1a0
   228c4:	e5c431b0 	strb	r3, [r4, #432]	; 0x1b0
   228c8:	ebfff997 	bl	20f2c <CIPAddress::Set(unsigned int)>
   228cc:	eaffffbf 	b	227d0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x6c>
   228d0:	e3a04002 	mov	r4, #2
   228d4:	e1a00004 	mov	r0, r4
   228d8:	e28dd018 	add	sp, sp, #24
   228dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   228e0:	eb001098 	bl	26b48 <CLogger::Get()>
   228e4:	e5d4c1b0 	ldrb	ip, [r4, #432]	; 0x1b0
   228e8:	e59f1190 	ldr	r1, [pc, #400]	; 22a80 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x31c>
   228ec:	e35c0000 	cmp	ip, #0
   228f0:	e59f318c 	ldr	r3, [pc, #396]	; 22a84 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x320>
   228f4:	e3a02043 	mov	r2, #67	; 0x43
   228f8:	01a03001 	moveq	r3, r1
   228fc:	e58d2004 	str	r2, [sp, #4]
   22900:	e58d3000 	str	r3, [sp]
   22904:	e3a02001 	mov	r2, #1
   22908:	e59f3178 	ldr	r3, [pc, #376]	; 22a88 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x324>
   2290c:	e59f1164 	ldr	r1, [pc, #356]	; 22a78 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   22910:	eb000fce 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22914:	e3a04001 	mov	r4, #1
   22918:	eaffffd8 	b	22880 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   2291c:	e5d431d1 	ldrb	r3, [r4, #465]	; 0x1d1
   22920:	e3530006 	cmp	r3, #6
   22924:	0a00003f 	beq	22a28 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2c4>
   22928:	e1a00004 	mov	r0, r4
   2292c:	ebfffbfc 	bl	21924 <CDHCPClient::CheckConfig()>
   22930:	e3500000 	cmp	r0, #0
   22934:	0a000039 	beq	22a20 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2bc>
   22938:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   2293c:	e3530000 	cmp	r3, #0
   22940:	e58431a0 	str	r3, [r4, #416]	; 0x1a0
   22944:	0a00003e 	beq	22a44 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2e0>
   22948:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   2294c:	e3500000 	cmp	r0, #0
   22950:	0a000042 	beq	22a60 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2fc>
   22954:	ebfff896 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   22958:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   2295c:	ebfff960 	bl	20ee4 <CIPAddress::operator!=(unsigned int) const>
   22960:	e3500000 	cmp	r0, #0
   22964:	0a000018 	beq	229cc <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x268>
   22968:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   2296c:	ebfff894 	bl	20bc4 <CNetConfig::GetNetMask() const>
   22970:	e59431c0 	ldr	r3, [r4, #448]	; 0x1c0
   22974:	e5902000 	ldr	r2, [r0]
   22978:	e1520003 	cmp	r2, r3
   2297c:	0a000012 	beq	229cc <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x268>
   22980:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   22984:	ebfff890 	bl	20bcc <CNetConfig::GetDefaultGateway() const>
   22988:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   2298c:	ebfff954 	bl	20ee4 <CIPAddress::operator!=(unsigned int) const>
   22990:	e3500000 	cmp	r0, #0
   22994:	0a00000c 	beq	229cc <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x268>
   22998:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   2299c:	ebfff88c 	bl	20bd4 <CNetConfig::GetDNSServer() const>
   229a0:	e59411c8 	ldr	r1, [r4, #456]	; 0x1c8
   229a4:	ebfff94e 	bl	20ee4 <CIPAddress::operator!=(unsigned int) const>
   229a8:	e3500000 	cmp	r0, #0
   229ac:	0a000006 	beq	229cc <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x268>
   229b0:	eb001064 	bl	26b48 <CLogger::Get()>
   229b4:	e3a02002 	mov	r2, #2
   229b8:	e59f30cc 	ldr	r3, [pc, #204]	; 22a8c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x328>
   229bc:	e59f10b4 	ldr	r1, [pc, #180]	; 22a78 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   229c0:	eb000fa2 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   229c4:	e3a04005 	mov	r4, #5
   229c8:	eaffffac 	b	22880 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   229cc:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   229d0:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   229d4:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   229d8:	e58411a4 	str	r1, [r4, #420]	; 0x1a4
   229dc:	e58421a8 	str	r2, [r4, #424]	; 0x1a8
   229e0:	e58431ac 	str	r3, [r4, #428]	; 0x1ac
   229e4:	eb001057 	bl	26b48 <CLogger::Get()>
   229e8:	e3a02004 	mov	r2, #4
   229ec:	e59f309c 	ldr	r3, [pc, #156]	; 22a90 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x32c>
   229f0:	e59f1080 	ldr	r1, [pc, #128]	; 22a78 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   229f4:	e58d7000 	str	r7, [sp]
   229f8:	eb000f94 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   229fc:	e3a04000 	mov	r4, #0
   22a00:	eaffff9e 	b	22880 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   22a04:	eb00104f 	bl	26b48 <CLogger::Get()>
   22a08:	e3a02001 	mov	r2, #1
   22a0c:	e59f3080 	ldr	r3, [pc, #128]	; 22a94 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x330>
   22a10:	e59f1060 	ldr	r1, [pc, #96]	; 22a78 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   22a14:	eb000f8d 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22a18:	e3a04001 	mov	r4, #1
   22a1c:	eaffff97 	b	22880 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   22a20:	e3a04004 	mov	r4, #4
   22a24:	eaffff95 	b	22880 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   22a28:	eb001046 	bl	26b48 <CLogger::Get()>
   22a2c:	e3a02002 	mov	r2, #2
   22a30:	e59f3060 	ldr	r3, [pc, #96]	; 22a98 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x334>
   22a34:	e59f103c 	ldr	r1, [pc, #60]	; 22a78 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   22a38:	eb000f84 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22a3c:	e3a04003 	mov	r4, #3
   22a40:	eaffff8e 	b	22880 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   22a44:	eb00103f 	bl	26b48 <CLogger::Get()>
   22a48:	e3a02002 	mov	r2, #2
   22a4c:	e59f3048 	ldr	r3, [pc, #72]	; 22a9c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x338>
   22a50:	e59f1020 	ldr	r1, [pc, #32]	; 22a78 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   22a54:	eb000f7d 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22a58:	e3a04004 	mov	r4, #4
   22a5c:	eaffff87 	b	22880 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   22a60:	e59f2038 	ldr	r2, [pc, #56]	; 22aa0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x33c>
   22a64:	e59f1038 	ldr	r1, [pc, #56]	; 22aa4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x340>
   22a68:	e59f0038 	ldr	r0, [pc, #56]	; 22aa8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x344>
   22a6c:	eb00074d 	bl	247a8 <assertion_failed>
   22a70:	00046274 	.word	0x00046274
   22a74:	00046304 	.word	0x00046304
   22a78:	0004634c 	.word	0x0004634c
   22a7c:	00046268 	.word	0x00046268
   22a80:	00046288 	.word	0x00046288
   22a84:	00046280 	.word	0x00046280
   22a88:	0004628c 	.word	0x0004628c
   22a8c:	000462d0 	.word	0x000462d0
   22a90:	000462f4 	.word	0x000462f4
   22a94:	000461b0 	.word	0x000461b0
   22a98:	00046200 	.word	0x00046200
   22a9c:	000462b0 	.word	0x000462b0
   22aa0:	00000195 	.word	0x00000195
   22aa4:	00046000 	.word	0x00046000
   22aa8:	000453dc 	.word	0x000453dc

00022aac <CDHCPClient::Run()>:
   22aac:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   22ab0:	e28040f4 	add	r4, r0, #244	; 0xf4
   22ab4:	e1a05000 	mov	r5, r0
   22ab8:	e3a01044 	mov	r1, #68	; 0x44
   22abc:	e1a00004 	mov	r0, r4
   22ac0:	e24ddf8d 	sub	sp, sp, #564	; 0x234
   22ac4:	eb000103 	bl	22ed8 <CSocket::Bind(unsigned short)>
   22ac8:	e3500000 	cmp	r0, #0
   22acc:	ba00004a 	blt	22bfc <CDHCPClient::Run()+0x150>
   22ad0:	e59f714c 	ldr	r7, [pc, #332]	; 22c24 <CDHCPClient::Run()+0x178>
   22ad4:	e59f614c 	ldr	r6, [pc, #332]	; 22c28 <CDHCPClient::Run()+0x17c>
   22ad8:	ea000006 	b	22af8 <CDHCPClient::Run()+0x4c>
   22adc:	e2400002 	sub	r0, r0, #2
   22ae0:	e6ef0070 	uxtb	r0, r0
   22ae4:	e3500003 	cmp	r0, #3
   22ae8:	8a00000f 	bhi	22b2c <CDHCPClient::Run()+0x80>
   22aec:	eb000681 	bl	244f8 <CScheduler::Get()>
   22af0:	e3a0103c 	mov	r1, #60	; 0x3c
   22af4:	eb000644 	bl	2440c <CScheduler::Sleep(unsigned int)>
   22af8:	e1a00005 	mov	r0, r5
   22afc:	ebfffe67 	bl	224a0 <CDHCPClient::SelectAndRequest()>
   22b00:	e3500001 	cmp	r0, #1
   22b04:	1afffff4 	bne	22adc <CDHCPClient::Run()+0x30>
   22b08:	e28ddf8d 	add	sp, sp, #564	; 0x234
   22b0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   22b10:	e3a01001 	mov	r1, #1
   22b14:	e1a00005 	mov	r0, r5
   22b18:	e59521ac 	ldr	r2, [r5, #428]	; 0x1ac
   22b1c:	ebffff10 	bl	22764 <CDHCPClient::RenewOrRebind(bool, unsigned int)>
   22b20:	e3500001 	cmp	r0, #1
   22b24:	0afffff7 	beq	22b08 <CDHCPClient::Run()+0x5c>
   22b28:	8a000017 	bhi	22b8c <CDHCPClient::Run()+0xe0>
   22b2c:	eb001cea 	bl	29edc <CTimer::Get()>
   22b30:	eb001a39 	bl	2941c <CTimer::GetUptime() const>
   22b34:	e5850198 	str	r0, [r5, #408]	; 0x198
   22b38:	eb001ce7 	bl	29edc <CTimer::Get()>
   22b3c:	eb001a36 	bl	2941c <CTimer::GetUptime() const>
   22b40:	e5952198 	ldr	r2, [r5, #408]	; 0x198
   22b44:	e59531a8 	ldr	r3, [r5, #424]	; 0x1a8
   22b48:	e0400002 	sub	r0, r0, r2
   22b4c:	e1500003 	cmp	r0, r3
   22b50:	3a000002 	bcc	22b60 <CDHCPClient::Run()+0xb4>
   22b54:	eaffffed 	b	22b10 <CDHCPClient::Run()+0x64>
   22b58:	eb000666 	bl	244f8 <CScheduler::Get()>
   22b5c:	eb0005da 	bl	242cc <CScheduler::Yield()>
   22b60:	e3a03040 	mov	r3, #64	; 0x40
   22b64:	e3a02f89 	mov	r2, #548	; 0x224
   22b68:	e1a00004 	mov	r0, r4
   22b6c:	e28d100c 	add	r1, sp, #12
   22b70:	eb000146 	bl	23090 <CSocket::Receive(void*, unsigned int, int)>
   22b74:	e3500000 	cmp	r0, #0
   22b78:	cafffff6 	bgt	22b58 <CDHCPClient::Run()+0xac>
   22b7c:	eb00065d 	bl	244f8 <CScheduler::Get()>
   22b80:	e3a0100a 	mov	r1, #10
   22b84:	eb000620 	bl	2440c <CScheduler::Sleep(unsigned int)>
   22b88:	eaffffea 	b	22b38 <CDHCPClient::Run()+0x8c>
   22b8c:	e2403003 	sub	r3, r0, #3
   22b90:	e6ef3073 	uxtb	r3, r3
   22b94:	e3530002 	cmp	r3, #2
   22b98:	8a000006 	bhi	22bb8 <CDHCPClient::Run()+0x10c>
   22b9c:	e3a03000 	mov	r3, #0
   22ba0:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   22ba4:	e5c53194 	strb	r3, [r5, #404]	; 0x194
   22ba8:	e1500003 	cmp	r0, r3
   22bac:	0a00001b 	beq	22c20 <CDHCPClient::Run()+0x174>
   22bb0:	ebfff81b 	bl	20c24 <CNetConfig::Reset()>
   22bb4:	eaffffcf 	b	22af8 <CDHCPClient::Run()+0x4c>
   22bb8:	e3a01000 	mov	r1, #0
   22bbc:	e1a00005 	mov	r0, r5
   22bc0:	e59521a4 	ldr	r2, [r5, #420]	; 0x1a4
   22bc4:	ebfffee6 	bl	22764 <CDHCPClient::RenewOrRebind(bool, unsigned int)>
   22bc8:	e3500001 	cmp	r0, #1
   22bcc:	0affffcd 	beq	22b08 <CDHCPClient::Run()+0x5c>
   22bd0:	9affffd5 	bls	22b2c <CDHCPClient::Run()+0x80>
   22bd4:	e2403003 	sub	r3, r0, #3
   22bd8:	e6ef3073 	uxtb	r3, r3
   22bdc:	e3530002 	cmp	r3, #2
   22be0:	9affffed 	bls	22b9c <CDHCPClient::Run()+0xf0>
   22be4:	eb000fd7 	bl	26b48 <CLogger::Get()>
   22be8:	e1a03007 	mov	r3, r7
   22bec:	e3a02001 	mov	r2, #1
   22bf0:	e1a01006 	mov	r1, r6
   22bf4:	eb000f15 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22bf8:	eaffffe7 	b	22b9c <CDHCPClient::Run()+0xf0>
   22bfc:	eb000fd1 	bl	26b48 <CLogger::Get()>
   22c00:	e3a02044 	mov	r2, #68	; 0x44
   22c04:	e59f3020 	ldr	r3, [pc, #32]	; 22c2c <CDHCPClient::Run()+0x180>
   22c08:	e58d2000 	str	r2, [sp]
   22c0c:	e59f1014 	ldr	r1, [pc, #20]	; 22c28 <CDHCPClient::Run()+0x17c>
   22c10:	e3a02001 	mov	r2, #1
   22c14:	eb000f0d 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22c18:	e28ddf8d 	add	sp, sp, #564	; 0x234
   22c1c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   22c20:	ebfffaf6 	bl	21800 <CDHCPClient::HaltNetwork() [clone .part.0]>
   22c24:	00046328 	.word	0x00046328
   22c28:	0004634c 	.word	0x0004634c
   22c2c:	00046310 	.word	0x00046310

00022c30 <CSocket::Connect(CIPAddress&, unsigned short)>:
   22c30:	e92d4070 	push	{r4, r5, r6, lr}
   22c34:	e2526000 	subs	r6, r2, #0
   22c38:	e24dd008 	sub	sp, sp, #8
   22c3c:	0a000026 	beq	22cdc <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   22c40:	e1a04000 	mov	r4, r0
   22c44:	e590000c 	ldr	r0, [r0, #12]
   22c48:	e3500000 	cmp	r0, #0
   22c4c:	0a000024 	beq	22ce4 <CSocket::Connect(CIPAddress&, unsigned short)+0xb4>
   22c50:	e1a05001 	mov	r5, r1
   22c54:	e5941018 	ldr	r1, [r4, #24]
   22c58:	e3510000 	cmp	r1, #0
   22c5c:	ba000005 	blt	22c78 <CSocket::Connect(CIPAddress&, unsigned short)+0x48>
   22c60:	e5943010 	ldr	r3, [r4, #16]
   22c64:	e3530011 	cmp	r3, #17
   22c68:	1a00001b 	bne	22cdc <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   22c6c:	ebffdd17 	bl	1a0d0 <CTransportLayer::Disconnect(int)>
   22c70:	e3e03000 	mvn	r3, #0
   22c74:	e5843018 	str	r3, [r4, #24]
   22c78:	e5940008 	ldr	r0, [r4, #8]
   22c7c:	e3500000 	cmp	r0, #0
   22c80:	0a00001b 	beq	22cf4 <CSocket::Connect(CIPAddress&, unsigned short)+0xc4>
   22c84:	ebfff7ca 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   22c88:	ebfff903 	bl	2109c <CIPAddress::IsNull() const>
   22c8c:	e3500000 	cmp	r0, #0
   22c90:	0a000006 	beq	22cb0 <CSocket::Connect(CIPAddress&, unsigned short)+0x80>
   22c94:	e5943010 	ldr	r3, [r4, #16]
   22c98:	e3530011 	cmp	r3, #17
   22c9c:	1a00000e 	bne	22cdc <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   22ca0:	e1a00005 	mov	r0, r5
   22ca4:	ebfff90a 	bl	210d4 <CIPAddress::IsBroadcast() const>
   22ca8:	e3500000 	cmp	r0, #0
   22cac:	0a00000a 	beq	22cdc <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   22cb0:	e5943010 	ldr	r3, [r4, #16]
   22cb4:	e1a02006 	mov	r2, r6
   22cb8:	e58d3000 	str	r3, [sp]
   22cbc:	e1a01005 	mov	r1, r5
   22cc0:	e1d431b4 	ldrh	r3, [r4, #20]
   22cc4:	e594000c 	ldr	r0, [r4, #12]
   22cc8:	ebffdbc4 	bl	19be0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>
   22ccc:	e5840018 	str	r0, [r4, #24]
   22cd0:	e0000fc0 	and	r0, r0, r0, asr #31
   22cd4:	e28dd008 	add	sp, sp, #8
   22cd8:	e8bd8070 	pop	{r4, r5, r6, pc}
   22cdc:	e3e00000 	mvn	r0, #0
   22ce0:	eafffffb 	b	22cd4 <CSocket::Connect(CIPAddress&, unsigned short)+0xa4>
   22ce4:	e3a02070 	mov	r2, #112	; 0x70
   22ce8:	e59f1014 	ldr	r1, [pc, #20]	; 22d04 <CSocket::Connect(CIPAddress&, unsigned short)+0xd4>
   22cec:	e59f0014 	ldr	r0, [pc, #20]	; 22d08 <CSocket::Connect(CIPAddress&, unsigned short)+0xd8>
   22cf0:	eb0006ac 	bl	247a8 <assertion_failed>
   22cf4:	e3a0207d 	mov	r2, #125	; 0x7d
   22cf8:	e59f1004 	ldr	r1, [pc, #4]	; 22d04 <CSocket::Connect(CIPAddress&, unsigned short)+0xd4>
   22cfc:	e59f0008 	ldr	r0, [pc, #8]	; 22d0c <CSocket::Connect(CIPAddress&, unsigned short)+0xdc>
   22d00:	eb0006a8 	bl	247a8 <assertion_failed>
   22d04:	0004637c 	.word	0x0004637c
   22d08:	00046388 	.word	0x00046388
   22d0c:	000453dc 	.word	0x000453dc

00022d10 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   22d10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22d14:	e1a04000 	mov	r4, r0
   22d18:	e16f0f12 	clz	r0, r2
   22d1c:	e594c018 	ldr	ip, [r4, #24]
   22d20:	e1a002a0 	lsr	r0, r0, #5
   22d24:	e24dd010 	sub	sp, sp, #16
   22d28:	e1900fac 	orrs	r0, r0, ip, lsr #31
   22d2c:	e1dd82bc 	ldrh	r8, [sp, #44]	; 0x2c
   22d30:	1a000027 	bne	22dd4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xc4>
   22d34:	e5940008 	ldr	r0, [r4, #8]
   22d38:	e3500000 	cmp	r0, #0
   22d3c:	0a000018 	beq	22da4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x94>
   22d40:	e1a06001 	mov	r6, r1
   22d44:	e1a07003 	mov	r7, r3
   22d48:	e1a05002 	mov	r5, r2
   22d4c:	ebfff798 	bl	20bb4 <CNetConfig::GetIPAddress() const>
   22d50:	ebfff8d1 	bl	2109c <CIPAddress::IsNull() const>
   22d54:	e3580000 	cmp	r8, #0
   22d58:	03800001 	orreq	r0, r0, #1
   22d5c:	e31000ff 	tst	r0, #255	; 0xff
   22d60:	1a00001b 	bne	22dd4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xc4>
   22d64:	e594000c 	ldr	r0, [r4, #12]
   22d68:	e3500000 	cmp	r0, #0
   22d6c:	0a000010 	beq	22db4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xa4>
   22d70:	e3560000 	cmp	r6, #0
   22d74:	0a000012 	beq	22dc4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xb4>
   22d78:	e5943018 	ldr	r3, [r4, #24]
   22d7c:	e1a02005 	mov	r2, r5
   22d80:	e58d3008 	str	r3, [sp, #8]
   22d84:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   22d88:	e1a01006 	mov	r1, r6
   22d8c:	e58d3000 	str	r3, [sp]
   22d90:	e58d8004 	str	r8, [sp, #4]
   22d94:	e1a03007 	mov	r3, r7
   22d98:	ebffdd56 	bl	1a2f8 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>
   22d9c:	e28dd010 	add	sp, sp, #16
   22da0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22da4:	e59f2030 	ldr	r2, [pc, #48]	; 22ddc <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xcc>
   22da8:	e59f1030 	ldr	r1, [pc, #48]	; 22de0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   22dac:	e59f0030 	ldr	r0, [pc, #48]	; 22de4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd4>
   22db0:	eb00067c 	bl	247a8 <assertion_failed>
   22db4:	e59f202c 	ldr	r2, [pc, #44]	; 22de8 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd8>
   22db8:	e59f1020 	ldr	r1, [pc, #32]	; 22de0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   22dbc:	e59f0028 	ldr	r0, [pc, #40]	; 22dec <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xdc>
   22dc0:	eb000678 	bl	247a8 <assertion_failed>
   22dc4:	e59f2024 	ldr	r2, [pc, #36]	; 22df0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe0>
   22dc8:	e59f1010 	ldr	r1, [pc, #16]	; 22de0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   22dcc:	e59f0020 	ldr	r0, [pc, #32]	; 22df4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe4>
   22dd0:	eb000674 	bl	247a8 <assertion_failed>
   22dd4:	e3e00000 	mvn	r0, #0
   22dd8:	eaffffef 	b	22d9c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x8c>
   22ddc:	0000011e 	.word	0x0000011e
   22de0:	0004637c 	.word	0x0004637c
   22de4:	000453dc 	.word	0x000453dc
   22de8:	00000129 	.word	0x00000129
   22dec:	00046388 	.word	0x00046388
   22df0:	0000012a 	.word	0x0000012a
   22df4:	0004256c 	.word	0x0004256c

00022df8 <CSocket::~CSocket()>:
   22df8:	e92d4070 	push	{r4, r5, r6, lr}
   22dfc:	e1a04000 	mov	r4, r0
   22e00:	e590000c 	ldr	r0, [r0, #12]
   22e04:	e59f309c 	ldr	r3, [pc, #156]	; 22ea8 <CSocket::~CSocket()+0xb0>
   22e08:	e3500000 	cmp	r0, #0
   22e0c:	e5843000 	str	r3, [r4]
   22e10:	0a000020 	beq	22e98 <CSocket::~CSocket()+0xa0>
   22e14:	e5941018 	ldr	r1, [r4, #24]
   22e18:	e594301c 	ldr	r3, [r4, #28]
   22e1c:	e3510000 	cmp	r1, #0
   22e20:	ba00000b 	blt	22e54 <CSocket::~CSocket()+0x5c>
   22e24:	e3530000 	cmp	r3, #0
   22e28:	1a000016 	bne	22e88 <CSocket::~CSocket()+0x90>
   22e2c:	ebffdca7 	bl	1a0d0 <CTransportLayer::Disconnect(int)>
   22e30:	e3e03000 	mvn	r3, #0
   22e34:	e5843018 	str	r3, [r4, #24]
   22e38:	e3a03000 	mov	r3, #0
   22e3c:	e1a00004 	mov	r0, r4
   22e40:	e584300c 	str	r3, [r4, #12]
   22e44:	e5843008 	str	r3, [r4, #8]
   22e48:	eb000236 	bl	23728 <CNetSocket::~CNetSocket()>
   22e4c:	e1a00004 	mov	r0, r4
   22e50:	e8bd8070 	pop	{r4, r5, r6, pc}
   22e54:	e3530000 	cmp	r3, #0
   22e58:	0afffff6 	beq	22e38 <CSocket::~CSocket()+0x40>
   22e5c:	e3a05000 	mov	r5, #0
   22e60:	e284601c 	add	r6, r4, #28
   22e64:	ea000000 	b	22e6c <CSocket::~CSocket()+0x74>
   22e68:	e594000c 	ldr	r0, [r4, #12]
   22e6c:	e5b61004 	ldr	r1, [r6, #4]!
   22e70:	ebffdc96 	bl	1a0d0 <CTransportLayer::Disconnect(int)>
   22e74:	e594301c 	ldr	r3, [r4, #28]
   22e78:	e2855001 	add	r5, r5, #1
   22e7c:	e1530005 	cmp	r3, r5
   22e80:	8afffff8 	bhi	22e68 <CSocket::~CSocket()+0x70>
   22e84:	eaffffeb 	b	22e38 <CSocket::~CSocket()+0x40>
   22e88:	e3a0203a 	mov	r2, #58	; 0x3a
   22e8c:	e59f1018 	ldr	r1, [pc, #24]	; 22eac <CSocket::~CSocket()+0xb4>
   22e90:	e59f0018 	ldr	r0, [pc, #24]	; 22eb0 <CSocket::~CSocket()+0xb8>
   22e94:	eb000643 	bl	247a8 <assertion_failed>
   22e98:	e3a02036 	mov	r2, #54	; 0x36
   22e9c:	e59f1008 	ldr	r1, [pc, #8]	; 22eac <CSocket::~CSocket()+0xb4>
   22ea0:	e59f000c 	ldr	r0, [pc, #12]	; 22eb4 <CSocket::~CSocket()+0xbc>
   22ea4:	eb00063f 	bl	247a8 <assertion_failed>
   22ea8:	00046460 	.word	0x00046460
   22eac:	0004637c 	.word	0x0004637c
   22eb0:	000463a0 	.word	0x000463a0
   22eb4:	00046388 	.word	0x00046388

00022eb8 <CSocket::~CSocket()>:
   22eb8:	e92d4010 	push	{r4, lr}
   22ebc:	e1a04000 	mov	r4, r0
   22ec0:	ebffffcc 	bl	22df8 <CSocket::~CSocket()>
   22ec4:	e1a00004 	mov	r0, r4
   22ec8:	e3a010a0 	mov	r1, #160	; 0xa0
   22ecc:	eb00204b 	bl	2b000 <operator delete(void*, unsigned int)>
   22ed0:	e1a00004 	mov	r0, r4
   22ed4:	e8bd8010 	pop	{r4, pc}

00022ed8 <CSocket::Bind(unsigned short)>:
   22ed8:	e2513000 	subs	r3, r1, #0
   22edc:	0a000012 	beq	22f2c <CSocket::Bind(unsigned short)+0x54>
   22ee0:	e92d4010 	push	{r4, lr}
   22ee4:	e1a04000 	mov	r4, r0
   22ee8:	e1d001b4 	ldrh	r0, [r0, #20]
   22eec:	e3500000 	cmp	r0, #0
   22ef0:	1a00000b 	bne	22f24 <CSocket::Bind(unsigned short)+0x4c>
   22ef4:	e5942018 	ldr	r2, [r4, #24]
   22ef8:	e3520000 	cmp	r2, #0
   22efc:	aa000008 	bge	22f24 <CSocket::Bind(unsigned short)+0x4c>
   22f00:	e5942010 	ldr	r2, [r4, #16]
   22f04:	e1c431b4 	strh	r3, [r4, #20]
   22f08:	e3520011 	cmp	r2, #17
   22f0c:	18bd8010 	popne	{r4, pc}
   22f10:	e594000c 	ldr	r0, [r4, #12]
   22f14:	ebffdad7 	bl	19a78 <CTransportLayer::Bind(unsigned short, int)>
   22f18:	e5840018 	str	r0, [r4, #24]
   22f1c:	e0000fc0 	and	r0, r0, r0, asr #31
   22f20:	e8bd8010 	pop	{r4, pc}
   22f24:	e3e00000 	mvn	r0, #0
   22f28:	e8bd8010 	pop	{r4, pc}
   22f2c:	e3e00000 	mvn	r0, #0
   22f30:	e12fff1e 	bx	lr

00022f34 <CSocket::Listen(unsigned int)>:
   22f34:	e5902010 	ldr	r2, [r0, #16]
   22f38:	e3520006 	cmp	r2, #6
   22f3c:	1a00002f 	bne	23000 <CSocket::Listen(unsigned int)+0xcc>
   22f40:	e1a03001 	mov	r3, r1
   22f44:	e1d011b4 	ldrh	r1, [r0, #20]
   22f48:	e92d4070 	push	{r4, r5, r6, lr}
   22f4c:	e3510000 	cmp	r1, #0
   22f50:	e1a04000 	mov	r4, r0
   22f54:	0a000027 	beq	22ff8 <CSocket::Listen(unsigned int)+0xc4>
   22f58:	e5900018 	ldr	r0, [r0, #24]
   22f5c:	e3500000 	cmp	r0, #0
   22f60:	aa000024 	bge	22ff8 <CSocket::Listen(unsigned int)+0xc4>
   22f64:	e2430001 	sub	r0, r3, #1
   22f68:	e350001f 	cmp	r0, #31
   22f6c:	8a000021 	bhi	22ff8 <CSocket::Listen(unsigned int)+0xc4>
   22f70:	e594501c 	ldr	r5, [r4, #28]
   22f74:	e3550000 	cmp	r5, #0
   22f78:	1a000016 	bne	22fd8 <CSocket::Listen(unsigned int)+0xa4>
   22f7c:	e594000c 	ldr	r0, [r4, #12]
   22f80:	e584301c 	str	r3, [r4, #28]
   22f84:	e3500000 	cmp	r0, #0
   22f88:	0a000016 	beq	22fe8 <CSocket::Listen(unsigned int)+0xb4>
   22f8c:	e284601c 	add	r6, r4, #28
   22f90:	ea000006 	b	22fb0 <CSocket::Listen(unsigned int)+0x7c>
   22f94:	e594301c 	ldr	r3, [r4, #28]
   22f98:	e2855001 	add	r5, r5, #1
   22f9c:	e1530005 	cmp	r3, r5
   22fa0:	9a00000a 	bls	22fd0 <CSocket::Listen(unsigned int)+0x9c>
   22fa4:	e594000c 	ldr	r0, [r4, #12]
   22fa8:	e1d411b4 	ldrh	r1, [r4, #20]
   22fac:	e5942010 	ldr	r2, [r4, #16]
   22fb0:	ebffdbb2 	bl	19e80 <CTransportLayer::Listen(unsigned short, int)>
   22fb4:	e3500000 	cmp	r0, #0
   22fb8:	e5a60004 	str	r0, [r6, #4]!
   22fbc:	aafffff4 	bge	22f94 <CSocket::Listen(unsigned int)+0x60>
   22fc0:	e3a020a5 	mov	r2, #165	; 0xa5
   22fc4:	e59f103c 	ldr	r1, [pc, #60]	; 23008 <CSocket::Listen(unsigned int)+0xd4>
   22fc8:	e59f003c 	ldr	r0, [pc, #60]	; 2300c <CSocket::Listen(unsigned int)+0xd8>
   22fcc:	eb0005f5 	bl	247a8 <assertion_failed>
   22fd0:	e3a00000 	mov	r0, #0
   22fd4:	e8bd8070 	pop	{r4, r5, r6, pc}
   22fd8:	e3a0209d 	mov	r2, #157	; 0x9d
   22fdc:	e59f1024 	ldr	r1, [pc, #36]	; 23008 <CSocket::Listen(unsigned int)+0xd4>
   22fe0:	e59f0028 	ldr	r0, [pc, #40]	; 23010 <CSocket::Listen(unsigned int)+0xdc>
   22fe4:	eb0005ef 	bl	247a8 <assertion_failed>
   22fe8:	e3a020a0 	mov	r2, #160	; 0xa0
   22fec:	e59f1014 	ldr	r1, [pc, #20]	; 23008 <CSocket::Listen(unsigned int)+0xd4>
   22ff0:	e59f001c 	ldr	r0, [pc, #28]	; 23014 <CSocket::Listen(unsigned int)+0xe0>
   22ff4:	eb0005eb 	bl	247a8 <assertion_failed>
   22ff8:	e3e00000 	mvn	r0, #0
   22ffc:	e8bd8070 	pop	{r4, r5, r6, pc}
   23000:	e3e00000 	mvn	r0, #0
   23004:	e12fff1e 	bx	lr
   23008:	0004637c 	.word	0x0004637c
   2300c:	000463b0 	.word	0x000463b0
   23010:	000463a0 	.word	0x000463a0
   23014:	00046388 	.word	0x00046388

00023018 <CSocket::Send(void const*, unsigned int, int)>:
   23018:	e3520000 	cmp	r2, #0
   2301c:	03a0c001 	moveq	ip, #1
   23020:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   23024:	e590e018 	ldr	lr, [r0, #24]
   23028:	e24dd00c 	sub	sp, sp, #12
   2302c:	11a0cfae 	lsrne	ip, lr, #31
   23030:	e35c0000 	cmp	ip, #0
   23034:	1a000010 	bne	2307c <CSocket::Send(void const*, unsigned int, int)+0x64>
   23038:	e590000c 	ldr	r0, [r0, #12]
   2303c:	e3500000 	cmp	r0, #0
   23040:	0a000005 	beq	2305c <CSocket::Send(void const*, unsigned int, int)+0x44>
   23044:	e3510000 	cmp	r1, #0
   23048:	0a000007 	beq	2306c <CSocket::Send(void const*, unsigned int, int)+0x54>
   2304c:	e58de000 	str	lr, [sp]
   23050:	ebffdc40 	bl	1a158 <CTransportLayer::Send(void const*, unsigned int, int, int)>
   23054:	e28dd00c 	add	sp, sp, #12
   23058:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2305c:	e3a020ed 	mov	r2, #237	; 0xed
   23060:	e59f101c 	ldr	r1, [pc, #28]	; 23084 <CSocket::Send(void const*, unsigned int, int)+0x6c>
   23064:	e59f001c 	ldr	r0, [pc, #28]	; 23088 <CSocket::Send(void const*, unsigned int, int)+0x70>
   23068:	eb0005ce 	bl	247a8 <assertion_failed>
   2306c:	e3a020ee 	mov	r2, #238	; 0xee
   23070:	e59f100c 	ldr	r1, [pc, #12]	; 23084 <CSocket::Send(void const*, unsigned int, int)+0x6c>
   23074:	e59f0010 	ldr	r0, [pc, #16]	; 2308c <CSocket::Send(void const*, unsigned int, int)+0x74>
   23078:	eb0005ca 	bl	247a8 <assertion_failed>
   2307c:	e3e00000 	mvn	r0, #0
   23080:	eafffff3 	b	23054 <CSocket::Send(void const*, unsigned int, int)+0x3c>
   23084:	0004637c 	.word	0x0004637c
   23088:	00046388 	.word	0x00046388
   2308c:	0004256c 	.word	0x0004256c

00023090 <CSocket::Receive(void*, unsigned int, int)>:
   23090:	e3520000 	cmp	r2, #0
   23094:	e92d4070 	push	{r4, r5, r6, lr}
   23098:	e1a05002 	mov	r5, r2
   2309c:	03a02001 	moveq	r2, #1
   230a0:	e590e018 	ldr	lr, [r0, #24]
   230a4:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   230a8:	11a02fae 	lsrne	r2, lr, #31
   230ac:	e3520000 	cmp	r2, #0
   230b0:	1a00001c 	bne	23128 <CSocket::Receive(void*, unsigned int, int)+0x98>
   230b4:	e590000c 	ldr	r0, [r0, #12]
   230b8:	e3500000 	cmp	r0, #0
   230bc:	0a000011 	beq	23108 <CSocket::Receive(void*, unsigned int, int)+0x78>
   230c0:	e1a02003 	mov	r2, r3
   230c4:	e1a06001 	mov	r6, r1
   230c8:	e1a0300e 	mov	r3, lr
   230cc:	e1a0100d 	mov	r1, sp
   230d0:	ebffdc59 	bl	1a23c <CTransportLayer::Receive(void*, int, int)>
   230d4:	e2504000 	subs	r4, r0, #0
   230d8:	ba000007 	blt	230fc <CSocket::Receive(void*, unsigned int, int)+0x6c>
   230dc:	e1540005 	cmp	r4, r5
   230e0:	21a04005 	movcs	r4, r5
   230e4:	e3560000 	cmp	r6, #0
   230e8:	0a00000a 	beq	23118 <CSocket::Receive(void*, unsigned int, int)+0x88>
   230ec:	e1a0100d 	mov	r1, sp
   230f0:	e1a00006 	mov	r0, r6
   230f4:	e1a02004 	mov	r2, r4
   230f8:	eb001dcc 	bl	2a830 <memcpy>
   230fc:	e1a00004 	mov	r0, r4
   23100:	e28ddd19 	add	sp, sp, #1600	; 0x640
   23104:	e8bd8070 	pop	{r4, r5, r6, pc}
   23108:	e3a020fe 	mov	r2, #254	; 0xfe
   2310c:	e59f101c 	ldr	r1, [pc, #28]	; 23130 <CSocket::Receive(void*, unsigned int, int)+0xa0>
   23110:	e59f001c 	ldr	r0, [pc, #28]	; 23134 <CSocket::Receive(void*, unsigned int, int)+0xa4>
   23114:	eb0005a3 	bl	247a8 <assertion_failed>
   23118:	e59f2018 	ldr	r2, [pc, #24]	; 23138 <CSocket::Receive(void*, unsigned int, int)+0xa8>
   2311c:	e59f100c 	ldr	r1, [pc, #12]	; 23130 <CSocket::Receive(void*, unsigned int, int)+0xa0>
   23120:	e59f0014 	ldr	r0, [pc, #20]	; 2313c <CSocket::Receive(void*, unsigned int, int)+0xac>
   23124:	eb00059f 	bl	247a8 <assertion_failed>
   23128:	e3e04000 	mvn	r4, #0
   2312c:	eafffff2 	b	230fc <CSocket::Receive(void*, unsigned int, int)+0x6c>
   23130:	0004637c 	.word	0x0004637c
   23134:	00046388 	.word	0x00046388
   23138:	0000010b 	.word	0x0000010b
   2313c:	0004256c 	.word	0x0004256c

00023140 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   23140:	e3520000 	cmp	r2, #0
   23144:	e92d4070 	push	{r4, r5, r6, lr}
   23148:	e1a05002 	mov	r5, r2
   2314c:	03a02001 	moveq	r2, #1
   23150:	e590e018 	ldr	lr, [r0, #24]
   23154:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   23158:	11a02fae 	lsrne	r2, lr, #31
   2315c:	e3520000 	cmp	r2, #0
   23160:	e24dd008 	sub	sp, sp, #8
   23164:	1a000020 	bne	231ec <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xac>
   23168:	e590000c 	ldr	r0, [r0, #12]
   2316c:	e3500000 	cmp	r0, #0
   23170:	0a000015 	beq	231cc <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x8c>
   23174:	e1a02003 	mov	r2, r3
   23178:	e59d365c 	ldr	r3, [sp, #1628]	; 0x65c
   2317c:	e1a06001 	mov	r6, r1
   23180:	e58d3000 	str	r3, [sp]
   23184:	e58de004 	str	lr, [sp, #4]
   23188:	e59d3658 	ldr	r3, [sp, #1624]	; 0x658
   2318c:	e28d1008 	add	r1, sp, #8
   23190:	ebffdc95 	bl	1a3ec <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>
   23194:	e2504000 	subs	r4, r0, #0
   23198:	ba000007 	blt	231bc <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x7c>
   2319c:	e1540005 	cmp	r4, r5
   231a0:	21a04005 	movcs	r4, r5
   231a4:	e3560000 	cmp	r6, #0
   231a8:	0a00000b 	beq	231dc <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x9c>
   231ac:	e1a00006 	mov	r0, r6
   231b0:	e1a02004 	mov	r2, r4
   231b4:	e28d1008 	add	r1, sp, #8
   231b8:	eb001d9c 	bl	2a830 <memcpy>
   231bc:	e1a00004 	mov	r0, r4
   231c0:	e28ddd19 	add	sp, sp, #1600	; 0x640
   231c4:	e28dd008 	add	sp, sp, #8
   231c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   231cc:	e59f2020 	ldr	r2, [pc, #32]	; 231f4 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb4>
   231d0:	e59f1020 	ldr	r1, [pc, #32]	; 231f8 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb8>
   231d4:	e59f0020 	ldr	r0, [pc, #32]	; 231fc <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xbc>
   231d8:	eb000572 	bl	247a8 <assertion_failed>
   231dc:	e59f201c 	ldr	r2, [pc, #28]	; 23200 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xc0>
   231e0:	e59f1010 	ldr	r1, [pc, #16]	; 231f8 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb8>
   231e4:	e59f0018 	ldr	r0, [pc, #24]	; 23204 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xc4>
   231e8:	eb00056e 	bl	247a8 <assertion_failed>
   231ec:	e3e04000 	mvn	r4, #0
   231f0:	eafffff1 	b	231bc <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x7c>
   231f4:	0000013b 	.word	0x0000013b
   231f8:	0004637c 	.word	0x0004637c
   231fc:	00046388 	.word	0x00046388
   23200:	00000149 	.word	0x00000149
   23204:	0004256c 	.word	0x0004256c

00023208 <CSocket::SetOptionBroadcast(bool)>:
   23208:	e5902018 	ldr	r2, [r0, #24]
   2320c:	e3520000 	cmp	r2, #0
   23210:	ba00000d 	blt	2324c <CSocket::SetOptionBroadcast(bool)+0x44>
   23214:	e5903010 	ldr	r3, [r0, #16]
   23218:	e3530011 	cmp	r3, #17
   2321c:	1a000003 	bne	23230 <CSocket::SetOptionBroadcast(bool)+0x28>
   23220:	e590000c 	ldr	r0, [r0, #12]
   23224:	e3500000 	cmp	r0, #0
   23228:	0a000002 	beq	23238 <CSocket::SetOptionBroadcast(bool)+0x30>
   2322c:	eaffdca2 	b	1a4bc <CTransportLayer::SetOptionBroadcast(bool, int)>
   23230:	e3a00000 	mov	r0, #0
   23234:	e12fff1e 	bx	lr
   23238:	e92d4010 	push	{r4, lr}
   2323c:	e59f2010 	ldr	r2, [pc, #16]	; 23254 <CSocket::SetOptionBroadcast(bool)+0x4c>
   23240:	e59f1010 	ldr	r1, [pc, #16]	; 23258 <CSocket::SetOptionBroadcast(bool)+0x50>
   23244:	e59f0010 	ldr	r0, [pc, #16]	; 2325c <CSocket::SetOptionBroadcast(bool)+0x54>
   23248:	eb000556 	bl	247a8 <assertion_failed>
   2324c:	e3e00000 	mvn	r0, #0
   23250:	e12fff1e 	bx	lr
   23254:	0000015b 	.word	0x0000015b
   23258:	0004637c 	.word	0x0004637c
   2325c:	00046388 	.word	0x00046388

00023260 <CSocket::GetForeignIP() const>:
   23260:	e5901018 	ldr	r1, [r0, #24]
   23264:	e3510000 	cmp	r1, #0
   23268:	ba000003 	blt	2327c <CSocket::GetForeignIP() const+0x1c>
   2326c:	e590000c 	ldr	r0, [r0, #12]
   23270:	e3500000 	cmp	r0, #0
   23274:	0a000002 	beq	23284 <CSocket::GetForeignIP() const+0x24>
   23278:	eaffdcd5 	b	1a5d4 <CTransportLayer::GetForeignIP(int) const>
   2327c:	e3a00000 	mov	r0, #0
   23280:	e12fff1e 	bx	lr
   23284:	e92d4010 	push	{r4, lr}
   23288:	e59f2008 	ldr	r2, [pc, #8]	; 23298 <CSocket::GetForeignIP() const+0x38>
   2328c:	e59f1008 	ldr	r1, [pc, #8]	; 2329c <CSocket::GetForeignIP() const+0x3c>
   23290:	e59f0008 	ldr	r0, [pc, #8]	; 232a0 <CSocket::GetForeignIP() const+0x40>
   23294:	eb000543 	bl	247a8 <assertion_failed>
   23298:	00000166 	.word	0x00000166
   2329c:	0004637c 	.word	0x0004637c
   232a0:	00046388 	.word	0x00046388

000232a4 <CSocket::CSocket(CNetSubSystem*, int)>:
   232a4:	e92d4070 	push	{r4, r5, r6, lr}
   232a8:	e1a04000 	mov	r4, r0
   232ac:	e1a05001 	mov	r5, r1
   232b0:	e1a06002 	mov	r6, r2
   232b4:	eb00010e 	bl	236f4 <CNetSocket::CNetSocket(CNetSubSystem*)>
   232b8:	e59f3070 	ldr	r3, [pc, #112]	; 23330 <CSocket::CSocket(CNetSubSystem*, int)+0x8c>
   232bc:	e1a00005 	mov	r0, r5
   232c0:	e5843000 	str	r3, [r4]
   232c4:	ebffd90d 	bl	19700 <CNetSubSystem::GetConfig()>
   232c8:	e1a03000 	mov	r3, r0
   232cc:	e1a00005 	mov	r0, r5
   232d0:	e5843008 	str	r3, [r4, #8]
   232d4:	ebffd90f 	bl	19718 <CNetSubSystem::GetTransportLayer()>
   232d8:	e3a03000 	mov	r3, #0
   232dc:	e3e02000 	mvn	r2, #0
   232e0:	e5941008 	ldr	r1, [r4, #8]
   232e4:	e5846010 	str	r6, [r4, #16]
   232e8:	e1510003 	cmp	r1, r3
   232ec:	e584000c 	str	r0, [r4, #12]
   232f0:	e5842018 	str	r2, [r4, #24]
   232f4:	e1c431b4 	strh	r3, [r4, #20]
   232f8:	e584301c 	str	r3, [r4, #28]
   232fc:	0a000003 	beq	23310 <CSocket::CSocket(CNetSubSystem*, int)+0x6c>
   23300:	e3500000 	cmp	r0, #0
   23304:	0a000005 	beq	23320 <CSocket::CSocket(CNetSubSystem*, int)+0x7c>
   23308:	e1a00004 	mov	r0, r4
   2330c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23310:	e3a02023 	mov	r2, #35	; 0x23
   23314:	e59f1018 	ldr	r1, [pc, #24]	; 23334 <CSocket::CSocket(CNetSubSystem*, int)+0x90>
   23318:	e59f0018 	ldr	r0, [pc, #24]	; 23338 <CSocket::CSocket(CNetSubSystem*, int)+0x94>
   2331c:	eb000521 	bl	247a8 <assertion_failed>
   23320:	e3a02024 	mov	r2, #36	; 0x24
   23324:	e59f1008 	ldr	r1, [pc, #8]	; 23334 <CSocket::CSocket(CNetSubSystem*, int)+0x90>
   23328:	e59f000c 	ldr	r0, [pc, #12]	; 2333c <CSocket::CSocket(CNetSubSystem*, int)+0x98>
   2332c:	eb00051d 	bl	247a8 <assertion_failed>
   23330:	00046460 	.word	0x00046460
   23334:	0004637c 	.word	0x0004637c
   23338:	000453dc 	.word	0x000453dc
   2333c:	00046388 	.word	0x00046388

00023340 <CSocket::CSocket(CSocket&, int)>:
   23340:	e92d4070 	push	{r4, r5, r6, lr}
   23344:	e1a04000 	mov	r4, r0
   23348:	e1a00001 	mov	r0, r1
   2334c:	e1a05001 	mov	r5, r1
   23350:	e1a06002 	mov	r6, r2
   23354:	eb0000fa 	bl	23744 <CNetSocket::GetNetSubSystem()>
   23358:	e1a01000 	mov	r1, r0
   2335c:	e1a00004 	mov	r0, r4
   23360:	eb0000e3 	bl	236f4 <CNetSocket::CNetSocket(CNetSubSystem*)>
   23364:	e3a01000 	mov	r1, #0
   23368:	e59f2060 	ldr	r2, [pc, #96]	; 233d0 <CSocket::CSocket(CSocket&, int)+0x90>
   2336c:	e5953008 	ldr	r3, [r5, #8]
   23370:	e595c010 	ldr	ip, [r5, #16]
   23374:	e1d501b4 	ldrh	r0, [r5, #20]
   23378:	e5842000 	str	r2, [r4]
   2337c:	e595200c 	ldr	r2, [r5, #12]
   23380:	e1530001 	cmp	r3, r1
   23384:	e5846018 	str	r6, [r4, #24]
   23388:	e584c010 	str	ip, [r4, #16]
   2338c:	e1c401b4 	strh	r0, [r4, #20]
   23390:	e584101c 	str	r1, [r4, #28]
   23394:	e5843008 	str	r3, [r4, #8]
   23398:	e584200c 	str	r2, [r4, #12]
   2339c:	0a000003 	beq	233b0 <CSocket::CSocket(CSocket&, int)+0x70>
   233a0:	e3520000 	cmp	r2, #0
   233a4:	0a000005 	beq	233c0 <CSocket::CSocket(CSocket&, int)+0x80>
   233a8:	e1a00004 	mov	r0, r4
   233ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   233b0:	e3a02030 	mov	r2, #48	; 0x30
   233b4:	e59f1018 	ldr	r1, [pc, #24]	; 233d4 <CSocket::CSocket(CSocket&, int)+0x94>
   233b8:	e59f0018 	ldr	r0, [pc, #24]	; 233d8 <CSocket::CSocket(CSocket&, int)+0x98>
   233bc:	eb0004f9 	bl	247a8 <assertion_failed>
   233c0:	e3a02031 	mov	r2, #49	; 0x31
   233c4:	e59f1008 	ldr	r1, [pc, #8]	; 233d4 <CSocket::CSocket(CSocket&, int)+0x94>
   233c8:	e59f000c 	ldr	r0, [pc, #12]	; 233dc <CSocket::CSocket(CSocket&, int)+0x9c>
   233cc:	eb0004f5 	bl	247a8 <assertion_failed>
   233d0:	00046460 	.word	0x00046460
   233d4:	0004637c 	.word	0x0004637c
   233d8:	000453dc 	.word	0x000453dc
   233dc:	00046388 	.word	0x00046388

000233e0 <CSocket::Accept(CIPAddress*, unsigned short*)>:
   233e0:	e590301c 	ldr	r3, [r0, #28]
   233e4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   233e8:	e3530000 	cmp	r3, #0
   233ec:	0a000044 	beq	23504 <CSocket::Accept(CIPAddress*, unsigned short*)+0x124>
   233f0:	e1d041b4 	ldrh	r4, [r0, #20]
   233f4:	e1a05000 	mov	r5, r0
   233f8:	e3540000 	cmp	r4, #0
   233fc:	0a00003a 	beq	234ec <CSocket::Accept(CIPAddress*, unsigned short*)+0x10c>
   23400:	e590000c 	ldr	r0, [r0, #12]
   23404:	e3500000 	cmp	r0, #0
   23408:	0a000040 	beq	23510 <CSocket::Accept(CIPAddress*, unsigned short*)+0x130>
   2340c:	e3530020 	cmp	r3, #32
   23410:	8a000042 	bhi	23520 <CSocket::Accept(CIPAddress*, unsigned short*)+0x140>
   23414:	e1a09001 	mov	r9, r1
   23418:	e1a0a002 	mov	sl, r2
   2341c:	e3a08020 	mov	r8, #32
   23420:	e3e06102 	mvn	r6, #-2147483648	; 0x80000000
   23424:	e3a04000 	mov	r4, #0
   23428:	e285701c 	add	r7, r5, #28
   2342c:	ea000008 	b	23454 <CSocket::Accept(CIPAddress*, unsigned short*)+0x74>
   23430:	e5973000 	ldr	r3, [r7]
   23434:	e595201c 	ldr	r2, [r5, #28]
   23438:	e1530006 	cmp	r3, r6
   2343c:	b1a08004 	movlt	r8, r4
   23440:	e2844001 	add	r4, r4, #1
   23444:	b1a06003 	movlt	r6, r3
   23448:	e1520004 	cmp	r2, r4
   2344c:	9a000007 	bls	23470 <CSocket::Accept(CIPAddress*, unsigned short*)+0x90>
   23450:	e595000c 	ldr	r0, [r5, #12]
   23454:	e5b71004 	ldr	r1, [r7, #4]!
   23458:	ebffdc3c 	bl	1a550 <CTransportLayer::IsConnected(int) const>
   2345c:	e3500000 	cmp	r0, #0
   23460:	0afffff2 	beq	23430 <CSocket::Accept(CIPAddress*, unsigned short*)+0x50>
   23464:	e1a08004 	mov	r8, r4
   23468:	e2843008 	add	r3, r4, #8
   2346c:	e7956103 	ldr	r6, [r5, r3, lsl #2]
   23470:	e376010a 	cmn	r6, #-2147483646	; 0x80000002
   23474:	8a00001e 	bhi	234f4 <CSocket::Accept(CIPAddress*, unsigned short*)+0x114>
   23478:	e595301c 	ldr	r3, [r5, #28]
   2347c:	e1530008 	cmp	r3, r8
   23480:	9a00002e 	bls	23540 <CSocket::Accept(CIPAddress*, unsigned short*)+0x160>
   23484:	e3590000 	cmp	r9, #0
   23488:	0a000030 	beq	23550 <CSocket::Accept(CIPAddress*, unsigned short*)+0x170>
   2348c:	e35a0000 	cmp	sl, #0
   23490:	0a000032 	beq	23560 <CSocket::Accept(CIPAddress*, unsigned short*)+0x180>
   23494:	e1a0200a 	mov	r2, sl
   23498:	e1a01009 	mov	r1, r9
   2349c:	e1a03006 	mov	r3, r6
   234a0:	e595000c 	ldr	r0, [r5, #12]
   234a4:	ebffdad2 	bl	19ff4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>
   234a8:	e3500000 	cmp	r0, #0
   234ac:	b3a04000 	movlt	r4, #0
   234b0:	ba000005 	blt	234cc <CSocket::Accept(CIPAddress*, unsigned short*)+0xec>
   234b4:	e3a000a0 	mov	r0, #160	; 0xa0
   234b8:	eb001ec2 	bl	2afc8 <operator new(unsigned int)>
   234bc:	e1a02006 	mov	r2, r6
   234c0:	e1a01005 	mov	r1, r5
   234c4:	e1a04000 	mov	r4, r0
   234c8:	ebffff9c 	bl	23340 <CSocket::CSocket(CSocket&, int)>
   234cc:	e5952010 	ldr	r2, [r5, #16]
   234d0:	e1d511b4 	ldrh	r1, [r5, #20]
   234d4:	e595000c 	ldr	r0, [r5, #12]
   234d8:	ebffda68 	bl	19e80 <CTransportLayer::Listen(unsigned short, int)>
   234dc:	e2888008 	add	r8, r8, #8
   234e0:	e3500000 	cmp	r0, #0
   234e4:	e7850108 	str	r0, [r5, r8, lsl #2]
   234e8:	ba000010 	blt	23530 <CSocket::Accept(CIPAddress*, unsigned short*)+0x150>
   234ec:	e1a00004 	mov	r0, r4
   234f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   234f4:	e3a020cb 	mov	r2, #203	; 0xcb
   234f8:	e59f1070 	ldr	r1, [pc, #112]	; 23570 <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   234fc:	e59f0070 	ldr	r0, [pc, #112]	; 23574 <CSocket::Accept(CIPAddress*, unsigned short*)+0x194>
   23500:	eb0004a8 	bl	247a8 <assertion_failed>
   23504:	e1a04003 	mov	r4, r3
   23508:	e1a00004 	mov	r0, r4
   2350c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23510:	e3a020b3 	mov	r2, #179	; 0xb3
   23514:	e59f1054 	ldr	r1, [pc, #84]	; 23570 <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   23518:	e59f0058 	ldr	r0, [pc, #88]	; 23578 <CSocket::Accept(CIPAddress*, unsigned short*)+0x198>
   2351c:	eb0004a1 	bl	247a8 <assertion_failed>
   23520:	e3a020b4 	mov	r2, #180	; 0xb4
   23524:	e59f1044 	ldr	r1, [pc, #68]	; 23570 <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   23528:	e59f004c 	ldr	r0, [pc, #76]	; 2357c <CSocket::Accept(CIPAddress*, unsigned short*)+0x19c>
   2352c:	eb00049d 	bl	247a8 <assertion_failed>
   23530:	e3a020dc 	mov	r2, #220	; 0xdc
   23534:	e59f1034 	ldr	r1, [pc, #52]	; 23570 <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   23538:	e59f0040 	ldr	r0, [pc, #64]	; 23580 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   2353c:	eb000499 	bl	247a8 <assertion_failed>
   23540:	e3a020cc 	mov	r2, #204	; 0xcc
   23544:	e59f1024 	ldr	r1, [pc, #36]	; 23570 <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   23548:	e59f0034 	ldr	r0, [pc, #52]	; 23584 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a4>
   2354c:	eb000495 	bl	247a8 <assertion_failed>
   23550:	e3a020d0 	mov	r2, #208	; 0xd0
   23554:	e59f1014 	ldr	r1, [pc, #20]	; 23570 <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   23558:	e59f0028 	ldr	r0, [pc, #40]	; 23588 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a8>
   2355c:	eb000491 	bl	247a8 <assertion_failed>
   23560:	e3a020d1 	mov	r2, #209	; 0xd1
   23564:	e59f1004 	ldr	r1, [pc, #4]	; 23570 <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   23568:	e59f001c 	ldr	r0, [pc, #28]	; 2358c <CSocket::Accept(CIPAddress*, unsigned short*)+0x1ac>
   2356c:	eb00048d 	bl	247a8 <assertion_failed>
   23570:	0004637c 	.word	0x0004637c
   23574:	000463f4 	.word	0x000463f4
   23578:	00046388 	.word	0x00046388
   2357c:	000463cc 	.word	0x000463cc
   23580:	00046434 	.word	0x00046434
   23584:	00046420 	.word	0x00046420
   23588:	00045434 	.word	0x00045434
   2358c:	00045444 	.word	0x00045444

00023590 <CNetSocket::Connect(char const*, char const*)>:
   23590:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   23594:	e2517000 	subs	r7, r1, #0
   23598:	e24dd01c 	sub	sp, sp, #28
   2359c:	0a000038 	beq	23684 <CNetSocket::Connect(char const*, char const*)+0xf4>
   235a0:	e3520000 	cmp	r2, #0
   235a4:	e1a05002 	mov	r5, r2
   235a8:	0a000039 	beq	23694 <CNetSocket::Connect(char const*, char const*)+0x104>
   235ac:	e3a03000 	mov	r3, #0
   235b0:	e1a04000 	mov	r4, r0
   235b4:	e3a0200a 	mov	r2, #10
   235b8:	e1a00005 	mov	r0, r5
   235bc:	e28d1008 	add	r1, sp, #8
   235c0:	e58d3008 	str	r3, [sp, #8]
   235c4:	eb001bc6 	bl	2a4e4 <strtoul>
   235c8:	e59d3008 	ldr	r3, [sp, #8]
   235cc:	e1a06000 	mov	r6, r0
   235d0:	e3530000 	cmp	r3, #0
   235d4:	0a000002 	beq	235e4 <CNetSocket::Connect(char const*, char const*)+0x54>
   235d8:	e1d330d0 	ldrsb	r3, [r3]
   235dc:	e3530000 	cmp	r3, #0
   235e0:	1a000033 	bne	236b4 <CNetSocket::Connect(char const*, char const*)+0x124>
   235e4:	e59f30e8 	ldr	r3, [pc, #232]	; 236d4 <CNetSocket::Connect(char const*, char const*)+0x144>
   235e8:	e2462001 	sub	r2, r6, #1
   235ec:	e1520003 	cmp	r2, r3
   235f0:	8a00002f 	bhi	236b4 <CNetSocket::Connect(char const*, char const*)+0x124>
   235f4:	e5943004 	ldr	r3, [r4, #4]
   235f8:	e3530000 	cmp	r3, #0
   235fc:	0a000028 	beq	236a4 <CNetSocket::Connect(char const*, char const*)+0x114>
   23600:	e28d0010 	add	r0, sp, #16
   23604:	ebfff5c5 	bl	20d20 <CIPAddress::CIPAddress()>
   23608:	e5941004 	ldr	r1, [r4, #4]
   2360c:	e28d000c 	add	r0, sp, #12
   23610:	eb000061 	bl	2379c <CDNSClient::CDNSClient(CNetSubSystem*)>
   23614:	e1a01007 	mov	r1, r7
   23618:	e28d2010 	add	r2, sp, #16
   2361c:	e28d000c 	add	r0, sp, #12
   23620:	eb0000af 	bl	238e4 <CDNSClient::Resolve(char const*, CIPAddress*)>
   23624:	e3500000 	cmp	r0, #0
   23628:	0a00000d 	beq	23664 <CNetSocket::Connect(char const*, char const*)+0xd4>
   2362c:	e5943000 	ldr	r3, [r4]
   23630:	e1a00004 	mov	r0, r4
   23634:	e593300c 	ldr	r3, [r3, #12]
   23638:	e6ff2076 	uxth	r2, r6
   2363c:	e28d1010 	add	r1, sp, #16
   23640:	e12fff33 	blx	r3
   23644:	e1a04000 	mov	r4, r0
   23648:	e28d000c 	add	r0, sp, #12
   2364c:	eb00005c 	bl	237c4 <CDNSClient::~CDNSClient()>
   23650:	e28d0010 	add	r0, sp, #16
   23654:	ebfff5c7 	bl	20d78 <CIPAddress::~CIPAddress()>
   23658:	e1a00004 	mov	r0, r4
   2365c:	e28dd01c 	add	sp, sp, #28
   23660:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   23664:	eb000d37 	bl	26b48 <CLogger::Get()>
   23668:	e3a02004 	mov	r2, #4
   2366c:	e59f3064 	ldr	r3, [pc, #100]	; 236d8 <CNetSocket::Connect(char const*, char const*)+0x148>
   23670:	e59f1064 	ldr	r1, [pc, #100]	; 236dc <CNetSocket::Connect(char const*, char const*)+0x14c>
   23674:	e58d7000 	str	r7, [sp]
   23678:	eb000c74 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2367c:	e3e04000 	mvn	r4, #0
   23680:	eafffff0 	b	23648 <CNetSocket::Connect(char const*, char const*)+0xb8>
   23684:	e3a0202a 	mov	r2, #42	; 0x2a
   23688:	e59f1050 	ldr	r1, [pc, #80]	; 236e0 <CNetSocket::Connect(char const*, char const*)+0x150>
   2368c:	e59f0050 	ldr	r0, [pc, #80]	; 236e4 <CNetSocket::Connect(char const*, char const*)+0x154>
   23690:	eb000444 	bl	247a8 <assertion_failed>
   23694:	e3a0202b 	mov	r2, #43	; 0x2b
   23698:	e59f1040 	ldr	r1, [pc, #64]	; 236e0 <CNetSocket::Connect(char const*, char const*)+0x150>
   2369c:	e59f0044 	ldr	r0, [pc, #68]	; 236e8 <CNetSocket::Connect(char const*, char const*)+0x158>
   236a0:	eb000440 	bl	247a8 <assertion_failed>
   236a4:	e3a02037 	mov	r2, #55	; 0x37
   236a8:	e59f1030 	ldr	r1, [pc, #48]	; 236e0 <CNetSocket::Connect(char const*, char const*)+0x150>
   236ac:	e59f0038 	ldr	r0, [pc, #56]	; 236ec <CNetSocket::Connect(char const*, char const*)+0x15c>
   236b0:	eb00043c 	bl	247a8 <assertion_failed>
   236b4:	eb000d23 	bl	26b48 <CLogger::Get()>
   236b8:	e3a02004 	mov	r2, #4
   236bc:	e59f302c 	ldr	r3, [pc, #44]	; 236f0 <CNetSocket::Connect(char const*, char const*)+0x160>
   236c0:	e59f1014 	ldr	r1, [pc, #20]	; 236dc <CNetSocket::Connect(char const*, char const*)+0x14c>
   236c4:	e58d5000 	str	r5, [sp]
   236c8:	eb000c60 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   236cc:	e3e04000 	mvn	r4, #0
   236d0:	eaffffe0 	b	23658 <CNetSocket::Connect(char const*, char const*)+0xc8>
   236d4:	0000fffe 	.word	0x0000fffe
   236d8:	000464c8 	.word	0x000464c8
   236dc:	000464dc 	.word	0x000464dc
   236e0:	00046494 	.word	0x00046494
   236e4:	0004257c 	.word	0x0004257c
   236e8:	000464a4 	.word	0x000464a4
   236ec:	0004539c 	.word	0x0004539c
   236f0:	000464b0 	.word	0x000464b0

000236f4 <CNetSocket::CNetSocket(CNetSubSystem*)>:
   236f4:	e59f2020 	ldr	r2, [pc, #32]	; 2371c <CNetSocket::CNetSocket(CNetSubSystem*)+0x28>
   236f8:	e3510000 	cmp	r1, #0
   236fc:	e5801004 	str	r1, [r0, #4]
   23700:	e5802000 	str	r2, [r0]
   23704:	112fff1e 	bxne	lr
   23708:	e3a02020 	mov	r2, #32
   2370c:	e92d4010 	push	{r4, lr}
   23710:	e59f1008 	ldr	r1, [pc, #8]	; 23720 <CNetSocket::CNetSocket(CNetSubSystem*)+0x2c>
   23714:	e59f0008 	ldr	r0, [pc, #8]	; 23724 <CNetSocket::CNetSocket(CNetSubSystem*)+0x30>
   23718:	eb000422 	bl	247a8 <assertion_failed>
   2371c:	000464f0 	.word	0x000464f0
   23720:	00046494 	.word	0x00046494
   23724:	0004539c 	.word	0x0004539c

00023728 <CNetSocket::~CNetSocket()>:
   23728:	e12fff1e 	bx	lr

0002372c <CNetSocket::~CNetSocket()>:
   2372c:	e92d4010 	push	{r4, lr}
   23730:	e1a04000 	mov	r4, r0
   23734:	e3a01008 	mov	r1, #8
   23738:	eb001e30 	bl	2b000 <operator delete(void*, unsigned int)>
   2373c:	e1a00004 	mov	r0, r4
   23740:	e8bd8010 	pop	{r4, pc}

00023744 <CNetSocket::GetNetSubSystem()>:
   23744:	e5900004 	ldr	r0, [r0, #4]
   23748:	e3500000 	cmp	r0, #0
   2374c:	112fff1e 	bxne	lr
   23750:	e3a02046 	mov	r2, #70	; 0x46
   23754:	e92d4010 	push	{r4, lr}
   23758:	e59f1004 	ldr	r1, [pc, #4]	; 23764 <CNetSocket::GetNetSubSystem()+0x20>
   2375c:	e59f0004 	ldr	r0, [pc, #4]	; 23768 <CNetSocket::GetNetSubSystem()+0x24>
   23760:	eb000410 	bl	247a8 <assertion_failed>
   23764:	00046494 	.word	0x00046494
   23768:	0004539c 	.word	0x0004539c

0002376c <CNetSocket::Bind(unsigned short)>:
   2376c:	e3e00000 	mvn	r0, #0
   23770:	e12fff1e 	bx	lr

00023774 <CNetSocket::Listen(unsigned int)>:
   23774:	e3e00000 	mvn	r0, #0
   23778:	e12fff1e 	bx	lr

0002377c <CNetSocket::Accept(CIPAddress*, unsigned short*)>:
   2377c:	e3a00000 	mov	r0, #0
   23780:	e12fff1e 	bx	lr

00023784 <CNetSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   23784:	e3e00000 	mvn	r0, #0
   23788:	e12fff1e 	bx	lr

0002378c <CNetSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   2378c:	e3e00000 	mvn	r0, #0
   23790:	e12fff1e 	bx	lr

00023794 <CNetSocket::SetOptionBroadcast(bool)>:
   23794:	e3e00000 	mvn	r0, #0
   23798:	e12fff1e 	bx	lr

0002379c <CDNSClient::CDNSClient(CNetSubSystem*)>:
   2379c:	e3510000 	cmp	r1, #0
   237a0:	e5801000 	str	r1, [r0]
   237a4:	112fff1e 	bxne	lr
   237a8:	e3a02056 	mov	r2, #86	; 0x56
   237ac:	e92d4010 	push	{r4, lr}
   237b0:	e59f1004 	ldr	r1, [pc, #4]	; 237bc <CDNSClient::CDNSClient(CNetSubSystem*)+0x20>
   237b4:	e59f0004 	ldr	r0, [pc, #4]	; 237c0 <CDNSClient::CDNSClient(CNetSubSystem*)+0x24>
   237b8:	eb0003fa 	bl	247a8 <assertion_failed>
   237bc:	00046524 	.word	0x00046524
   237c0:	0004539c 	.word	0x0004539c

000237c4 <CDNSClient::~CDNSClient()>:
   237c4:	e12fff1e 	bx	lr

000237c8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)>:
   237c8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   237cc:	e3a04000 	mov	r4, #0
   237d0:	e1a00001 	mov	r0, r1
   237d4:	e1a07004 	mov	r7, r4
   237d8:	e24dd00c 	sub	sp, sp, #12
   237dc:	e3500000 	cmp	r0, #0
   237e0:	e1a06002 	mov	r6, r2
   237e4:	e1a0500d 	mov	r5, sp
   237e8:	e58d7004 	str	r7, [sp, #4]
   237ec:	0a000013 	beq	23840 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x78>
   237f0:	e3a0200a 	mov	r2, #10
   237f4:	e28d1004 	add	r1, sp, #4
   237f8:	eb001b39 	bl	2a4e4 <strtoul>
   237fc:	e3540003 	cmp	r4, #3
   23800:	e1a03000 	mov	r3, r0
   23804:	0a000011 	beq	23850 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   23808:	e59d1004 	ldr	r1, [sp, #4]
   2380c:	e3510000 	cmp	r1, #0
   23810:	0a000026 	beq	238b0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   23814:	e1d120d0 	ldrsb	r2, [r1]
   23818:	e352002e 	cmp	r2, #46	; 0x2e
   2381c:	1a000023 	bne	238b0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   23820:	e35000ff 	cmp	r0, #255	; 0xff
   23824:	8a000021 	bhi	238b0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   23828:	e2810001 	add	r0, r1, #1
   2382c:	e3500000 	cmp	r0, #0
   23830:	e4c53001 	strb	r3, [r5], #1
   23834:	e2844001 	add	r4, r4, #1
   23838:	e58d7004 	str	r7, [sp, #4]
   2383c:	1affffeb 	bne	237f0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x28>
   23840:	e59f2080 	ldr	r2, [pc, #128]	; 238c8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x100>
   23844:	e59f1080 	ldr	r1, [pc, #128]	; 238cc <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x104>
   23848:	e59f0080 	ldr	r0, [pc, #128]	; 238d0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x108>
   2384c:	eb0003d5 	bl	247a8 <assertion_failed>
   23850:	e59d2004 	ldr	r2, [sp, #4]
   23854:	e3520000 	cmp	r2, #0
   23858:	0a00000d 	beq	23894 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xcc>
   2385c:	e1d220d0 	ldrsb	r2, [r2]
   23860:	e3520000 	cmp	r2, #0
   23864:	1a000011 	bne	238b0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   23868:	e35000ff 	cmp	r0, #255	; 0xff
   2386c:	8a00000f 	bhi	238b0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   23870:	e3560000 	cmp	r6, #0
   23874:	e5c53000 	strb	r3, [r5]
   23878:	0a00000e 	beq	238b8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xf0>
   2387c:	e1a00006 	mov	r0, r6
   23880:	e1a0100d 	mov	r1, sp
   23884:	ebfff5ac 	bl	20f3c <CIPAddress::Set(unsigned char const*)>
   23888:	e3a00001 	mov	r0, #1
   2388c:	e28dd00c 	add	sp, sp, #12
   23890:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   23894:	e35000ff 	cmp	r0, #255	; 0xff
   23898:	8a000004 	bhi	238b0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   2389c:	e59f2030 	ldr	r2, [pc, #48]	; 238d4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x10c>
   238a0:	e59f1024 	ldr	r1, [pc, #36]	; 238cc <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x104>
   238a4:	e59f002c 	ldr	r0, [pc, #44]	; 238d8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x110>
   238a8:	e5cd3003 	strb	r3, [sp, #3]
   238ac:	eb0003bd 	bl	247a8 <assertion_failed>
   238b0:	e3a00000 	mov	r0, #0
   238b4:	eafffff4 	b	2388c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xc4>
   238b8:	e59f201c 	ldr	r2, [pc, #28]	; 238dc <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x114>
   238bc:	e59f1008 	ldr	r1, [pc, #8]	; 238cc <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x104>
   238c0:	e59f0018 	ldr	r0, [pc, #24]	; 238e0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x118>
   238c4:	eb0003b7 	bl	247a8 <assertion_failed>
   238c8:	0000011a 	.word	0x0000011a
   238cc:	00046524 	.word	0x00046524
   238d0:	00046534 	.word	0x00046534
   238d4:	00000135 	.word	0x00000135
   238d8:	00046554 	.word	0x00046554
   238dc:	00000139 	.word	0x00000139
   238e0:	00046544 	.word	0x00046544

000238e4 <CDNSClient::Resolve(char const*, CIPAddress*)>:
   238e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238e8:	e2515000 	subs	r5, r1, #0
   238ec:	e24ddd17 	sub	sp, sp, #1472	; 0x5c0
   238f0:	e24dd004 	sub	sp, sp, #4
   238f4:	0a000061 	beq	23a80 <CDNSClient::Resolve(char const*, CIPAddress*)+0x19c>
   238f8:	e5d53000 	ldrb	r3, [r5]
   238fc:	e1a04000 	mov	r4, r0
   23900:	e2433031 	sub	r3, r3, #49	; 0x31
   23904:	e3530008 	cmp	r3, #8
   23908:	e1a07002 	mov	r7, r2
   2390c:	9a000020 	bls	23994 <CDNSClient::Resolve(char const*, CIPAddress*)+0xb0>
   23910:	e5940000 	ldr	r0, [r4]
   23914:	e3500000 	cmp	r0, #0
   23918:	0a00005c 	beq	23a90 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1ac>
   2391c:	ebffd777 	bl	19700 <CNetSubSystem::GetConfig()>
   23920:	ebfff4ab 	bl	20bd4 <CNetConfig::GetDNSServer() const>
   23924:	ebfff5b9 	bl	21010 <CIPAddress::Get() const>
   23928:	e1a01000 	mov	r1, r0
   2392c:	e28d0008 	add	r0, sp, #8
   23930:	ebfff591 	bl	20f7c <CIPAddress::CIPAddress(unsigned char const*)>
   23934:	e28d0008 	add	r0, sp, #8
   23938:	ebfff5d7 	bl	2109c <CIPAddress::IsNull() const>
   2393c:	e2506000 	subs	r6, r0, #0
   23940:	13a06000 	movne	r6, #0
   23944:	0a000005 	beq	23960 <CDNSClient::Resolve(char const*, CIPAddress*)+0x7c>
   23948:	e28d0008 	add	r0, sp, #8
   2394c:	ebfff509 	bl	20d78 <CIPAddress::~CIPAddress()>
   23950:	e1a00006 	mov	r0, r6
   23954:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   23958:	e28dd004 	add	sp, sp, #4
   2395c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23960:	e3a02011 	mov	r2, #17
   23964:	e5941000 	ldr	r1, [r4]
   23968:	e28d0020 	add	r0, sp, #32
   2396c:	ebfffe4c 	bl	232a4 <CSocket::CSocket(CNetSubSystem*, int)>
   23970:	e3a02035 	mov	r2, #53	; 0x35
   23974:	e28d0020 	add	r0, sp, #32
   23978:	e28d1008 	add	r1, sp, #8
   2397c:	ebfffcab 	bl	22c30 <CSocket::Connect(CIPAddress&, unsigned short)>
   23980:	e3500000 	cmp	r0, #0
   23984:	0a000009 	beq	239b0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xcc>
   23988:	e28d0020 	add	r0, sp, #32
   2398c:	ebfffd19 	bl	22df8 <CSocket::~CSocket()>
   23990:	eaffffec 	b	23948 <CDNSClient::Resolve(char const*, CIPAddress*)+0x64>
   23994:	ebffff8b 	bl	237c8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)>
   23998:	e2506000 	subs	r6, r0, #0
   2399c:	0affffdb 	beq	23910 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2c>
   239a0:	e1a00006 	mov	r0, r6
   239a4:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   239a8:	e28dd004 	add	sp, sp, #4
   239ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   239b0:	e28d8d07 	add	r8, sp, #448	; 0x1c0
   239b4:	e3a02c02 	mov	r2, #512	; 0x200
   239b8:	e1a01006 	mov	r1, r6
   239bc:	e1a00008 	mov	r0, r8
   239c0:	eb001951 	bl	29f0c <memset>
   239c4:	e3a02001 	mov	r2, #1
   239c8:	e3a00c01 	mov	r0, #256	; 0x100
   239cc:	e59f32ec 	ldr	r3, [pc, #748]	; 23cc0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3dc>
   239d0:	e1c820b2 	strh	r2, [r8, #2]
   239d4:	e1d3a0b0 	ldrh	sl, [r3]
   239d8:	e1a01005 	mov	r1, r5
   239dc:	e08a2002 	add	r2, sl, r2
   239e0:	e6bfafba 	rev16	sl, sl
   239e4:	e1c320b0 	strh	r2, [r3]
   239e8:	e1c800b4 	strh	r0, [r8, #4]
   239ec:	e3a020ff 	mov	r2, #255	; 0xff
   239f0:	e1c8a0b0 	strh	sl, [r8]
   239f4:	e28d00c0 	add	r0, sp, #192	; 0xc0
   239f8:	eb001a40 	bl	2a300 <strncpy>
   239fc:	e1a0200d 	mov	r2, sp
   23a00:	e59f12bc 	ldr	r1, [pc, #700]	; 23cc4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e0>
   23a04:	e28d00c0 	add	r0, sp, #192	; 0xc0
   23a08:	e5cd61bf 	strb	r6, [sp, #447]	; 0x1bf
   23a0c:	eb001a7e 	bl	2a40c <strtok_r>
   23a10:	e2504000 	subs	r4, r0, #0
   23a14:	e6ffa07a 	uxth	sl, sl
   23a18:	0a00004a 	beq	23b48 <CDNSClient::Resolve(char const*, CIPAddress*)+0x264>
   23a1c:	e59f92a0 	ldr	r9, [pc, #672]	; 23cc4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e0>
   23a20:	e28d5f73 	add	r5, sp, #460	; 0x1cc
   23a24:	ea00000f 	b	23a68 <CDNSClient::Resolve(char const*, CIPAddress*)+0x184>
   23a28:	e0453008 	sub	r3, r5, r8
   23a2c:	e2633c02 	rsb	r3, r3, #512	; 0x200
   23a30:	e2802002 	add	r2, r0, #2
   23a34:	e1520003 	cmp	r2, r3
   23a38:	aaffffd2 	bge	23988 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23a3c:	e4c50001 	strb	r0, [r5], #1
   23a40:	e1a01004 	mov	r1, r4
   23a44:	e1a00005 	mov	r0, r5
   23a48:	eb001a21 	bl	2a2d4 <strcpy>
   23a4c:	e1a0200d 	mov	r2, sp
   23a50:	e1a01009 	mov	r1, r9
   23a54:	e3a00000 	mov	r0, #0
   23a58:	eb001a6b 	bl	2a40c <strtok_r>
   23a5c:	e2504000 	subs	r4, r0, #0
   23a60:	e085500b 	add	r5, r5, fp
   23a64:	0a00000d 	beq	23aa0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1bc>
   23a68:	e1a00004 	mov	r0, r4
   23a6c:	eb001974 	bl	2a044 <strlen>
   23a70:	e35000ff 	cmp	r0, #255	; 0xff
   23a74:	e1a0b000 	mov	fp, r0
   23a78:	9affffea 	bls	23a28 <CDNSClient::Resolve(char const*, CIPAddress*)+0x144>
   23a7c:	eaffffc1 	b	23988 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23a80:	e3a02060 	mov	r2, #96	; 0x60
   23a84:	e59f123c 	ldr	r1, [pc, #572]	; 23cc8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   23a88:	e59f023c 	ldr	r0, [pc, #572]	; 23ccc <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e8>
   23a8c:	eb000345 	bl	247a8 <assertion_failed>
   23a90:	e3a0206a 	mov	r2, #106	; 0x6a
   23a94:	e59f122c 	ldr	r1, [pc, #556]	; 23cc8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   23a98:	e59f0230 	ldr	r0, [pc, #560]	; 23cd0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3ec>
   23a9c:	eb000341 	bl	247a8 <assertion_failed>
   23aa0:	e1a00005 	mov	r0, r5
   23aa4:	e4c04001 	strb	r4, [r0], #1
   23aa8:	e0403008 	sub	r3, r0, r8
   23aac:	e59f2220 	ldr	r2, [pc, #544]	; 23cd4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f0>
   23ab0:	e2633c02 	rsb	r3, r3, #512	; 0x200
   23ab4:	e3530003 	cmp	r3, #3
   23ab8:	e58d2004 	str	r2, [sp, #4]
   23abc:	daffffb1 	ble	23988 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23ac0:	e3a02004 	mov	r2, #4
   23ac4:	e2855005 	add	r5, r5, #5
   23ac8:	e08d1002 	add	r1, sp, r2
   23acc:	e0455008 	sub	r5, r5, r8
   23ad0:	eb001b56 	bl	2a830 <memcpy>
   23ad4:	e3550c02 	cmp	r5, #512	; 0x200
   23ad8:	ca000024 	bgt	23b70 <CDNSClient::Resolve(char const*, CIPAddress*)+0x28c>
   23adc:	e3a09003 	mov	r9, #3
   23ae0:	e28dbd0f 	add	fp, sp, #960	; 0x3c0
   23ae4:	e3a03000 	mov	r3, #0
   23ae8:	e1a02005 	mov	r2, r5
   23aec:	e1a01008 	mov	r1, r8
   23af0:	e28d0020 	add	r0, sp, #32
   23af4:	ebfffd47 	bl	23018 <CSocket::Send(void const*, unsigned int, int)>
   23af8:	e1500005 	cmp	r0, r5
   23afc:	1affffa1 	bne	23988 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23b00:	eb00027c 	bl	244f8 <CScheduler::Get()>
   23b04:	e3a01ffa 	mov	r1, #1000	; 0x3e8
   23b08:	eb000256 	bl	24468 <CScheduler::MsSleep(unsigned int)>
   23b0c:	e3a03040 	mov	r3, #64	; 0x40
   23b10:	e3a02c02 	mov	r2, #512	; 0x200
   23b14:	e1a0100b 	mov	r1, fp
   23b18:	e28d0020 	add	r0, sp, #32
   23b1c:	ebfffd5b 	bl	23090 <CSocket::Receive(void*, unsigned int, int)>
   23b20:	e3500c02 	cmp	r0, #512	; 0x200
   23b24:	e1a04000 	mov	r4, r0
   23b28:	aa00000c 	bge	23b60 <CDNSClient::Resolve(char const*, CIPAddress*)+0x27c>
   23b2c:	e3500000 	cmp	r0, #0
   23b30:	baffff94 	blt	23988 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23b34:	e3500019 	cmp	r0, #25
   23b38:	ca000010 	bgt	23b80 <CDNSClient::Resolve(char const*, CIPAddress*)+0x29c>
   23b3c:	e2599001 	subs	r9, r9, #1
   23b40:	1affffe7 	bne	23ae4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x200>
   23b44:	eaffff8f 	b	23988 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23b48:	e59f3184 	ldr	r3, [pc, #388]	; 23cd4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f0>
   23b4c:	e5cd61cc 	strb	r6, [sp, #460]	; 0x1cc
   23b50:	e58d3004 	str	r3, [sp, #4]
   23b54:	e288000d 	add	r0, r8, #13
   23b58:	e28d5f73 	add	r5, sp, #460	; 0x1cc
   23b5c:	eaffffd7 	b	23ac0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1dc>
   23b60:	e3a020ba 	mov	r2, #186	; 0xba
   23b64:	e59f115c 	ldr	r1, [pc, #348]	; 23cc8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   23b68:	e59f0168 	ldr	r0, [pc, #360]	; 23cd8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f4>
   23b6c:	eb00030d 	bl	247a8 <assertion_failed>
   23b70:	e3a020a9 	mov	r2, #169	; 0xa9
   23b74:	e59f114c 	ldr	r1, [pc, #332]	; 23cc8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   23b78:	e59f015c 	ldr	r0, [pc, #348]	; 23cdc <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f8>
   23b7c:	eb000309 	bl	247a8 <assertion_failed>
   23b80:	e1db30b0 	ldrh	r3, [fp]
   23b84:	e153000a 	cmp	r3, sl
   23b88:	1affff7e 	bne	23988 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23b8c:	e1db20b2 	ldrh	r2, [fp, #2]
   23b90:	e59f3148 	ldr	r3, [pc, #328]	; 23ce0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3fc>
   23b94:	e0033002 	and	r3, r3, r2
   23b98:	e3530080 	cmp	r3, #128	; 0x80
   23b9c:	1affff79 	bne	23988 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23ba0:	e1db30b4 	ldrh	r3, [fp, #4]
   23ba4:	e3530c01 	cmp	r3, #256	; 0x100
   23ba8:	1affff76 	bne	23988 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23bac:	e1db30b6 	ldrh	r3, [fp, #6]
   23bb0:	e3530000 	cmp	r3, #0
   23bb4:	0affff73 	beq	23988 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23bb8:	e28d5ff3 	add	r5, sp, #972	; 0x3cc
   23bbc:	ea000004 	b	23bd4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2f0>
   23bc0:	e2833001 	add	r3, r3, #1
   23bc4:	e0855003 	add	r5, r5, r3
   23bc8:	e045300b 	sub	r3, r5, fp
   23bcc:	e1530004 	cmp	r3, r4
   23bd0:	aaffff6c 	bge	23988 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23bd4:	e5d53000 	ldrb	r3, [r5]
   23bd8:	e3530000 	cmp	r3, #0
   23bdc:	1afffff7 	bne	23bc0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2dc>
   23be0:	e2855005 	add	r5, r5, #5
   23be4:	e045300b 	sub	r3, r5, fp
   23be8:	e1530004 	cmp	r3, r4
   23bec:	aaffff65 	bge	23988 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23bf0:	e244800e 	sub	r8, r4, #14
   23bf4:	e5d53000 	ldrb	r3, [r5]
   23bf8:	e20320c0 	and	r2, r3, #192	; 0xc0
   23bfc:	e35200c0 	cmp	r2, #192	; 0xc0
   23c00:	02855002 	addeq	r5, r5, #2
   23c04:	1a000012 	bne	23c54 <CDNSClient::Resolve(char const*, CIPAddress*)+0x370>
   23c08:	e045300b 	sub	r3, r5, fp
   23c0c:	e1530008 	cmp	r3, r8
   23c10:	caffff5c 	bgt	23988 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23c14:	e3a0200e 	mov	r2, #14
   23c18:	e1a01005 	mov	r1, r5
   23c1c:	e28d0010 	add	r0, sp, #16
   23c20:	eb001b02 	bl	2a830 <memcpy>
   23c24:	e1dd31b0 	ldrh	r3, [sp, #16]
   23c28:	e3530c01 	cmp	r3, #256	; 0x100
   23c2c:	0a000012 	beq	23c7c <CDNSClient::Resolve(char const*, CIPAddress*)+0x398>
   23c30:	e1dd31b8 	ldrh	r3, [sp, #24]
   23c34:	e6bf3fb3 	rev16	r3, r3
   23c38:	e6ff3073 	uxth	r3, r3
   23c3c:	e283300a 	add	r3, r3, #10
   23c40:	e0855003 	add	r5, r5, r3
   23c44:	e045300b 	sub	r3, r5, fp
   23c48:	e1530004 	cmp	r3, r4
   23c4c:	baffffe8 	blt	23bf4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x310>
   23c50:	eaffff4c 	b	23988 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23c54:	e2855001 	add	r5, r5, #1
   23c58:	ea000002 	b	23c68 <CDNSClient::Resolve(char const*, CIPAddress*)+0x384>
   23c5c:	e4d53001 	ldrb	r3, [r5], #1
   23c60:	e3530000 	cmp	r3, #0
   23c64:	0affffe7 	beq	23c08 <CDNSClient::Resolve(char const*, CIPAddress*)+0x324>
   23c68:	e0855003 	add	r5, r5, r3
   23c6c:	e045300b 	sub	r3, r5, fp
   23c70:	e1530004 	cmp	r3, r4
   23c74:	bafffff8 	blt	23c5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x378>
   23c78:	eaffff42 	b	23988 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23c7c:	e1dd31b2 	ldrh	r3, [sp, #18]
   23c80:	e3530c01 	cmp	r3, #256	; 0x100
   23c84:	1affffe9 	bne	23c30 <CDNSClient::Resolve(char const*, CIPAddress*)+0x34c>
   23c88:	e1dd31b8 	ldrh	r3, [sp, #24]
   23c8c:	e3530b01 	cmp	r3, #1024	; 0x400
   23c90:	1affffe6 	bne	23c30 <CDNSClient::Resolve(char const*, CIPAddress*)+0x34c>
   23c94:	e3570000 	cmp	r7, #0
   23c98:	0a000004 	beq	23cb0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3cc>
   23c9c:	e1a00007 	mov	r0, r7
   23ca0:	e28d101a 	add	r1, sp, #26
   23ca4:	ebfff4a4 	bl	20f3c <CIPAddress::Set(unsigned char const*)>
   23ca8:	e3a06001 	mov	r6, #1
   23cac:	eaffff35 	b	23988 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23cb0:	e59f202c 	ldr	r2, [pc, #44]	; 23ce4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x400>
   23cb4:	e59f100c 	ldr	r1, [pc, #12]	; 23cc8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   23cb8:	e59f0028 	ldr	r0, [pc, #40]	; 23ce8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x404>
   23cbc:	eb0002b9 	bl	247a8 <assertion_failed>
   23cc0:	0004a0bc 	.word	0x0004a0bc
   23cc4:	00040680 	.word	0x00040680
   23cc8:	00046524 	.word	0x00046524
   23ccc:	00046560 	.word	0x00046560
   23cd0:	0004539c 	.word	0x0004539c
   23cd4:	01000100 	.word	0x01000100
   23cd8:	00046590 	.word	0x00046590
   23cdc:	00046570 	.word	0x00046570
   23ce0:	00000ffa 	.word	0x00000ffa
   23ce4:	0000010d 	.word	0x0000010d
   23ce8:	00046544 	.word	0x00046544

00023cec <CTask::Run()>:
   23cec:	e3a0203f 	mov	r2, #63	; 0x3f
   23cf0:	e92d4010 	push	{r4, lr}
   23cf4:	e59f1004 	ldr	r1, [pc, #4]	; 23d00 <CTask::Run()+0x14>
   23cf8:	e59f0004 	ldr	r0, [pc, #4]	; 23d04 <CTask::Run()+0x18>
   23cfc:	eb0002a9 	bl	247a8 <assertion_failed>
   23d00:	000465b4 	.word	0x000465b4
   23d04:	00041748 	.word	0x00041748

00023d08 <CTask::TaskEntry(void*)>:
   23d08:	e92d4010 	push	{r4, lr}
   23d0c:	e2504000 	subs	r4, r0, #0
   23d10:	0a00000c 	beq	23d48 <CTask::TaskEntry(void*)+0x40>
   23d14:	e5943000 	ldr	r3, [r4]
   23d18:	e5933008 	ldr	r3, [r3, #8]
   23d1c:	e12fff33 	blx	r3
   23d20:	e3a03003 	mov	r3, #3
   23d24:	e28400d4 	add	r0, r4, #212	; 0xd4
   23d28:	e5c43004 	strb	r3, [r4, #4]
   23d2c:	eb00021a 	bl	2459c <CSynchronizationEvent::Set()>
   23d30:	eb0001f0 	bl	244f8 <CScheduler::Get()>
   23d34:	eb000164 	bl	242cc <CScheduler::Yield()>
   23d38:	e3a0208c 	mov	r2, #140	; 0x8c
   23d3c:	e59f1014 	ldr	r1, [pc, #20]	; 23d58 <CTask::TaskEntry(void*)+0x50>
   23d40:	e59f0014 	ldr	r0, [pc, #20]	; 23d5c <CTask::TaskEntry(void*)+0x54>
   23d44:	eb000297 	bl	247a8 <assertion_failed>
   23d48:	e3a02084 	mov	r2, #132	; 0x84
   23d4c:	e59f1004 	ldr	r1, [pc, #4]	; 23d58 <CTask::TaskEntry(void*)+0x50>
   23d50:	e59f0008 	ldr	r0, [pc, #8]	; 23d60 <CTask::TaskEntry(void*)+0x58>
   23d54:	eb000293 	bl	247a8 <assertion_failed>
   23d58:	000465b4 	.word	0x000465b4
   23d5c:	00041748 	.word	0x00041748
   23d60:	00040b44 	.word	0x00040b44

00023d64 <CTask::~CTask()>:
   23d64:	e5d02004 	ldrb	r2, [r0, #4]
   23d68:	e59f3050 	ldr	r3, [pc, #80]	; 23dc0 <CTask::~CTask()+0x5c>
   23d6c:	e3520003 	cmp	r2, #3
   23d70:	e92d4010 	push	{r4, lr}
   23d74:	e5803000 	str	r3, [r0]
   23d78:	1a00000c 	bne	23db0 <CTask::~CTask()+0x4c>
   23d7c:	e1a04000 	mov	r4, r0
   23d80:	e3a03004 	mov	r3, #4
   23d84:	e59000c8 	ldr	r0, [r0, #200]	; 0xc8
   23d88:	e5c43004 	strb	r3, [r4, #4]
   23d8c:	e3500000 	cmp	r0, #0
   23d90:	0a000000 	beq	23d98 <CTask::~CTask()+0x34>
   23d94:	eb001c98 	bl	2affc <operator delete[](void*)>
   23d98:	e3a03000 	mov	r3, #0
   23d9c:	e28400d4 	add	r0, r4, #212	; 0xd4
   23da0:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   23da4:	eb0001ed 	bl	24560 <CSynchronizationEvent::~CSynchronizationEvent()>
   23da8:	e1a00004 	mov	r0, r4
   23dac:	e8bd8010 	pop	{r4, pc}
   23db0:	e3a02036 	mov	r2, #54	; 0x36
   23db4:	e59f1008 	ldr	r1, [pc, #8]	; 23dc4 <CTask::~CTask()+0x60>
   23db8:	e59f0008 	ldr	r0, [pc, #8]	; 23dc8 <CTask::~CTask()+0x64>
   23dbc:	eb000279 	bl	247a8 <assertion_failed>
   23dc0:	00046628 	.word	0x00046628
   23dc4:	000465b4 	.word	0x000465b4
   23dc8:	000465c0 	.word	0x000465c0

00023dcc <CTask::~CTask()>:
   23dcc:	e92d4010 	push	{r4, lr}
   23dd0:	e1a04000 	mov	r4, r0
   23dd4:	ebffffe2 	bl	23d64 <CTask::~CTask()>
   23dd8:	e1a00004 	mov	r0, r4
   23ddc:	e3a010dc 	mov	r1, #220	; 0xdc
   23de0:	eb001c86 	bl	2b000 <operator delete(void*, unsigned int)>
   23de4:	e1a00004 	mov	r0, r4
   23de8:	e8bd8010 	pop	{r4, pc}

00023dec <CTask::Terminate()>:
   23dec:	e3a03003 	mov	r3, #3
   23df0:	e92d4010 	push	{r4, lr}
   23df4:	e28000d4 	add	r0, r0, #212	; 0xd4
   23df8:	e54030d0 	strb	r3, [r0, #-208]	; 0xffffff30
   23dfc:	eb0001e6 	bl	2459c <CSynchronizationEvent::Set()>
   23e00:	eb0001bc 	bl	244f8 <CScheduler::Get()>
   23e04:	eb000130 	bl	242cc <CScheduler::Yield()>
   23e08:	e3a02048 	mov	r2, #72	; 0x48
   23e0c:	e59f1004 	ldr	r1, [pc, #4]	; 23e18 <CTask::Terminate()+0x2c>
   23e10:	e59f0004 	ldr	r0, [pc, #4]	; 23e1c <CTask::Terminate()+0x30>
   23e14:	eb000263 	bl	247a8 <assertion_failed>
   23e18:	000465b4 	.word	0x000465b4
   23e1c:	00041748 	.word	0x00041748

00023e20 <CTask::WaitForTermination()>:
   23e20:	e28000d4 	add	r0, r0, #212	; 0xd4
   23e24:	ea0001ea 	b	245d4 <CSynchronizationEvent::Wait()>

00023e28 <CTask::SetUserData(void*, unsigned int)>:
   23e28:	e0802102 	add	r2, r0, r2, lsl #2
   23e2c:	e58210cc 	str	r1, [r2, #204]	; 0xcc
   23e30:	e12fff1e 	bx	lr

00023e34 <CTask::GetUserData(unsigned int)>:
   23e34:	e0801101 	add	r1, r0, r1, lsl #2
   23e38:	e59100cc 	ldr	r0, [r1, #204]	; 0xcc
   23e3c:	e12fff1e 	bx	lr

00023e40 <CTask::InitializeRegs()>:
   23e40:	e92d4010 	push	{r4, lr}
   23e44:	e1a04000 	mov	r4, r0
   23e48:	e3a020b8 	mov	r2, #184	; 0xb8
   23e4c:	e3a01000 	mov	r1, #0
   23e50:	e280000c 	add	r0, r0, #12
   23e54:	eb00182c 	bl	29f0c <memset>
   23e58:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   23e5c:	e584400c 	str	r4, [r4, #12]
   23e60:	e3530000 	cmp	r3, #0
   23e64:	0a000008 	beq	23e8c <CTask::InitializeRegs()+0x4c>
   23e68:	e3a00101 	mov	r0, #1073741824	; 0x40000000
   23e6c:	e3a01402 	mov	r1, #33554432	; 0x2000000
   23e70:	e594c0c4 	ldr	ip, [r4, #196]	; 0xc4
   23e74:	e59f2020 	ldr	r2, [pc, #32]	; 23e9c <CTask::InitializeRegs()+0x5c>
   23e78:	e083300c 	add	r3, r3, ip
   23e7c:	e1c401f0 	strd	r0, [r4, #16]
   23e80:	e584303c 	str	r3, [r4, #60]	; 0x3c
   23e84:	e5842040 	str	r2, [r4, #64]	; 0x40
   23e88:	e8bd8010 	pop	{r4, pc}
   23e8c:	e3a02062 	mov	r2, #98	; 0x62
   23e90:	e59f1008 	ldr	r1, [pc, #8]	; 23ea0 <CTask::InitializeRegs()+0x60>
   23e94:	e59f0008 	ldr	r0, [pc, #8]	; 23ea4 <CTask::InitializeRegs()+0x64>
   23e98:	eb000242 	bl	247a8 <assertion_failed>
   23e9c:	00023d08 	.word	0x00023d08
   23ea0:	000465b4 	.word	0x000465b4
   23ea4:	000465e0 	.word	0x000465e0

00023ea8 <CTask::CTask(unsigned int)>:
   23ea8:	e92d4070 	push	{r4, r5, r6, lr}
   23eac:	e3a05000 	mov	r5, #0
   23eb0:	e1a04000 	mov	r4, r0
   23eb4:	e59f3084 	ldr	r3, [pc, #132]	; 23f40 <CTask::CTask(unsigned int)+0x98>
   23eb8:	e58010c4 	str	r1, [r0, #196]	; 0xc4
   23ebc:	e5803000 	str	r3, [r0]
   23ec0:	e5c05004 	strb	r5, [r0, #4]
   23ec4:	e58050c8 	str	r5, [r0, #200]	; 0xc8
   23ec8:	e1a01005 	mov	r1, r5
   23ecc:	e28000d4 	add	r0, r0, #212	; 0xd4
   23ed0:	eb00019e 	bl	24550 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   23ed4:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   23ed8:	e58450cc 	str	r5, [r4, #204]	; 0xcc
   23edc:	e1500005 	cmp	r0, r5
   23ee0:	e58450d0 	str	r5, [r4, #208]	; 0xd0
   23ee4:	0a000008 	beq	23f0c <CTask::CTask(unsigned int)+0x64>
   23ee8:	e3500b01 	cmp	r0, #1024	; 0x400
   23eec:	3a00000b 	bcc	23f20 <CTask::CTask(unsigned int)+0x78>
   23ef0:	e3100003 	tst	r0, #3
   23ef4:	1a00000d 	bne	23f30 <CTask::CTask(unsigned int)+0x88>
   23ef8:	eb001c38 	bl	2afe0 <operator new[](unsigned int)>
   23efc:	e1a03000 	mov	r3, r0
   23f00:	e1a00004 	mov	r0, r4
   23f04:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   23f08:	ebffffcc 	bl	23e40 <CTask::InitializeRegs()>
   23f0c:	eb000179 	bl	244f8 <CScheduler::Get()>
   23f10:	e1a01004 	mov	r1, r4
   23f14:	eb000054 	bl	2406c <CScheduler::AddTask(CTask*)>
   23f18:	e1a00004 	mov	r0, r4
   23f1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23f20:	e3a02025 	mov	r2, #37	; 0x25
   23f24:	e59f1018 	ldr	r1, [pc, #24]	; 23f44 <CTask::CTask(unsigned int)+0x9c>
   23f28:	e59f0018 	ldr	r0, [pc, #24]	; 23f48 <CTask::CTask(unsigned int)+0xa0>
   23f2c:	eb00021d 	bl	247a8 <assertion_failed>
   23f30:	e3a02027 	mov	r2, #39	; 0x27
   23f34:	e59f1008 	ldr	r1, [pc, #8]	; 23f44 <CTask::CTask(unsigned int)+0x9c>
   23f38:	e59f000c 	ldr	r0, [pc, #12]	; 23f4c <CTask::CTask(unsigned int)+0xa4>
   23f3c:	eb000219 	bl	247a8 <assertion_failed>
   23f40:	00046628 	.word	0x00046628
   23f44:	000465b4 	.word	0x000465b4
   23f48:	000465f0 	.word	0x000465f0
   23f4c:	00046608 	.word	0x00046608

00023f50 <CScheduler::CScheduler()>:
   23f50:	e3a03000 	mov	r3, #0
   23f54:	e59f2058 	ldr	r2, [pc, #88]	; 23fb4 <CScheduler::CScheduler()+0x64>
   23f58:	e92d4070 	push	{r4, r5, r6, lr}
   23f5c:	e5926000 	ldr	r6, [r2]
   23f60:	e5803050 	str	r3, [r0, #80]	; 0x50
   23f64:	e1560003 	cmp	r6, r3
   23f68:	e5803054 	str	r3, [r0, #84]	; 0x54
   23f6c:	e5803058 	str	r3, [r0, #88]	; 0x58
   23f70:	e580305c 	str	r3, [r0, #92]	; 0x5c
   23f74:	e5803060 	str	r3, [r0, #96]	; 0x60
   23f78:	1a000009 	bne	23fa4 <CScheduler::CScheduler()+0x54>
   23f7c:	e1a04000 	mov	r4, r0
   23f80:	e3a000dc 	mov	r0, #220	; 0xdc
   23f84:	e5824000 	str	r4, [r2]
   23f88:	eb001c0e 	bl	2afc8 <operator new(unsigned int)>
   23f8c:	e1a05000 	mov	r5, r0
   23f90:	e1a01006 	mov	r1, r6
   23f94:	ebffffc3 	bl	23ea8 <CTask::CTask(unsigned int)>
   23f98:	e1a00004 	mov	r0, r4
   23f9c:	e5845054 	str	r5, [r4, #84]	; 0x54
   23fa0:	e8bd8070 	pop	{r4, r5, r6, pc}
   23fa4:	e3a02024 	mov	r2, #36	; 0x24
   23fa8:	e59f1008 	ldr	r1, [pc, #8]	; 23fb8 <CScheduler::CScheduler()+0x68>
   23fac:	e59f0008 	ldr	r0, [pc, #8]	; 23fbc <CScheduler::CScheduler()+0x6c>
   23fb0:	eb0001fc 	bl	247a8 <assertion_failed>
   23fb4:	0005ce20 	.word	0x0005ce20
   23fb8:	00046634 	.word	0x00046634
   23fbc:	00045348 	.word	0x00045348

00023fc0 <CScheduler::~CScheduler()>:
   23fc0:	e3a02000 	mov	r2, #0
   23fc4:	e59f3004 	ldr	r3, [pc, #4]	; 23fd0 <CScheduler::~CScheduler()+0x10>
   23fc8:	e5832000 	str	r2, [r3]
   23fcc:	e12fff1e 	bx	lr
   23fd0:	0005ce20 	.word	0x0005ce20

00023fd4 <CScheduler::GetCurrentTask()>:
   23fd4:	e5900054 	ldr	r0, [r0, #84]	; 0x54
   23fd8:	e12fff1e 	bx	lr

00023fdc <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))>:
   23fdc:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
   23fe0:	e92d4010 	push	{r4, lr}
   23fe4:	e3530000 	cmp	r3, #0
   23fe8:	1a000006 	bne	24008 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x2c>
   23fec:	e3510000 	cmp	r1, #0
   23ff0:	e580105c 	str	r1, [r0, #92]	; 0x5c
   23ff4:	18bd8010 	popne	{r4, pc}
   23ff8:	e3a02080 	mov	r2, #128	; 0x80
   23ffc:	e59f1014 	ldr	r1, [pc, #20]	; 24018 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x3c>
   24000:	e59f0014 	ldr	r0, [pc, #20]	; 2401c <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x40>
   24004:	eb0001e7 	bl	247a8 <assertion_failed>
   24008:	e3a0207e 	mov	r2, #126	; 0x7e
   2400c:	e59f1004 	ldr	r1, [pc, #4]	; 24018 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x3c>
   24010:	e59f0008 	ldr	r0, [pc, #8]	; 24020 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x44>
   24014:	eb0001e3 	bl	247a8 <assertion_failed>
   24018:	00046634 	.word	0x00046634
   2401c:	00046660 	.word	0x00046660
   24020:	00046644 	.word	0x00046644

00024024 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))>:
   24024:	e5903060 	ldr	r3, [r0, #96]	; 0x60
   24028:	e92d4010 	push	{r4, lr}
   2402c:	e3530000 	cmp	r3, #0
   24030:	1a000006 	bne	24050 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x2c>
   24034:	e3510000 	cmp	r1, #0
   24038:	e5801060 	str	r1, [r0, #96]	; 0x60
   2403c:	18bd8010 	popne	{r4, pc}
   24040:	e3a02087 	mov	r2, #135	; 0x87
   24044:	e59f1014 	ldr	r1, [pc, #20]	; 24060 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x3c>
   24048:	e59f0014 	ldr	r0, [pc, #20]	; 24064 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x40>
   2404c:	eb0001d5 	bl	247a8 <assertion_failed>
   24050:	e3a02085 	mov	r2, #133	; 0x85
   24054:	e59f1004 	ldr	r1, [pc, #4]	; 24060 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x3c>
   24058:	e59f0008 	ldr	r0, [pc, #8]	; 24068 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x44>
   2405c:	eb0001d1 	bl	247a8 <assertion_failed>
   24060:	00046634 	.word	0x00046634
   24064:	0004669c 	.word	0x0004669c
   24068:	0004667c 	.word	0x0004667c

0002406c <CScheduler::AddTask(CTask*)>:
   2406c:	e92d4070 	push	{r4, r5, r6, lr}
   24070:	e2515000 	subs	r5, r1, #0
   24074:	0a00001a 	beq	240e4 <CScheduler::AddTask(CTask*)+0x78>
   24078:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   2407c:	e1a04000 	mov	r4, r0
   24080:	e35e0000 	cmp	lr, #0
   24084:	0a000012 	beq	240d4 <CScheduler::AddTask(CTask*)+0x68>
   24088:	e3a03000 	mov	r3, #0
   2408c:	e2402004 	sub	r2, r0, #4
   24090:	ea000002 	b	240a0 <CScheduler::AddTask(CTask*)+0x34>
   24094:	e2833001 	add	r3, r3, #1
   24098:	e15e0003 	cmp	lr, r3
   2409c:	0a000004 	beq	240b4 <CScheduler::AddTask(CTask*)+0x48>
   240a0:	e5b2c004 	ldr	ip, [r2, #4]!
   240a4:	e35c0000 	cmp	ip, #0
   240a8:	1afffff9 	bne	24094 <CScheduler::AddTask(CTask*)+0x28>
   240ac:	e7845103 	str	r5, [r4, r3, lsl #2]
   240b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   240b4:	e35e0014 	cmp	lr, #20
   240b8:	1a000005 	bne	240d4 <CScheduler::AddTask(CTask*)+0x68>
   240bc:	eb000aa1 	bl	26b48 <CLogger::Get()>
   240c0:	e3a02000 	mov	r2, #0
   240c4:	e59f3028 	ldr	r3, [pc, #40]	; 240f4 <CScheduler::AddTask(CTask*)+0x88>
   240c8:	e59f1028 	ldr	r1, [pc, #40]	; 240f8 <CScheduler::AddTask(CTask*)+0x8c>
   240cc:	eb0009df 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   240d0:	e594e050 	ldr	lr, [r4, #80]	; 0x50
   240d4:	e28e3001 	add	r3, lr, #1
   240d8:	e5843050 	str	r3, [r4, #80]	; 0x50
   240dc:	e784510e 	str	r5, [r4, lr, lsl #2]
   240e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   240e4:	e3a0208c 	mov	r2, #140	; 0x8c
   240e8:	e59f100c 	ldr	r1, [pc, #12]	; 240fc <CScheduler::AddTask(CTask*)+0x90>
   240ec:	e59f000c 	ldr	r0, [pc, #12]	; 24100 <CScheduler::AddTask(CTask*)+0x94>
   240f0:	eb0001ac 	bl	247a8 <assertion_failed>
   240f4:	000466c8 	.word	0x000466c8
   240f8:	0004678c 	.word	0x0004678c
   240fc:	00046634 	.word	0x00046634
   24100:	000466bc 	.word	0x000466bc

00024104 <CScheduler::RemoveTask(CTask*)>:
   24104:	e92d4010 	push	{r4, lr}
   24108:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   2410c:	e35e0000 	cmp	lr, #0
   24110:	0a00000e 	beq	24150 <CScheduler::RemoveTask(CTask*)+0x4c>
   24114:	e3a03000 	mov	r3, #0
   24118:	e2402004 	sub	r2, r0, #4
   2411c:	ea000002 	b	2412c <CScheduler::RemoveTask(CTask*)+0x28>
   24120:	e2833001 	add	r3, r3, #1
   24124:	e15e0003 	cmp	lr, r3
   24128:	0a000008 	beq	24150 <CScheduler::RemoveTask(CTask*)+0x4c>
   2412c:	e5b2c004 	ldr	ip, [r2, #4]!
   24130:	e15c0001 	cmp	ip, r1
   24134:	1afffff9 	bne	24120 <CScheduler::RemoveTask(CTask*)+0x1c>
   24138:	e3a02000 	mov	r2, #0
   2413c:	e24ee001 	sub	lr, lr, #1
   24140:	e15e0003 	cmp	lr, r3
   24144:	e7802103 	str	r2, [r0, r3, lsl #2]
   24148:	05803050 	streq	r3, [r0, #80]	; 0x50
   2414c:	e8bd8010 	pop	{r4, pc}
   24150:	e3a020b2 	mov	r2, #178	; 0xb2
   24154:	e59f1004 	ldr	r1, [pc, #4]	; 24160 <CScheduler::RemoveTask(CTask*)+0x5c>
   24158:	e59f0004 	ldr	r0, [pc, #4]	; 24164 <CScheduler::RemoveTask(CTask*)+0x60>
   2415c:	eb000191 	bl	247a8 <assertion_failed>
   24160:	00046634 	.word	0x00046634
   24164:	00041748 	.word	0x00041748

00024168 <CScheduler::WakeTask(CTask**)>:
   24168:	e3510000 	cmp	r1, #0
   2416c:	e92d4010 	push	{r4, lr}
   24170:	0a000009 	beq	2419c <CScheduler::WakeTask(CTask**)+0x34>
   24174:	e3a02000 	mov	r2, #0
   24178:	e5913000 	ldr	r3, [r1]
   2417c:	e5812000 	str	r2, [r1]
   24180:	e1530002 	cmp	r3, r2
   24184:	0a000008 	beq	241ac <CScheduler::WakeTask(CTask**)+0x44>
   24188:	e5d31004 	ldrb	r1, [r3, #4]
   2418c:	e3510001 	cmp	r1, #1
   24190:	1a000009 	bne	241bc <CScheduler::WakeTask(CTask**)+0x54>
   24194:	e5c32004 	strb	r2, [r3, #4]
   24198:	e8bd8010 	pop	{r4, pc}
   2419c:	e3a020c3 	mov	r2, #195	; 0xc3
   241a0:	e59f1024 	ldr	r1, [pc, #36]	; 241cc <CScheduler::WakeTask(CTask**)+0x64>
   241a4:	e59f0024 	ldr	r0, [pc, #36]	; 241d0 <CScheduler::WakeTask(CTask**)+0x68>
   241a8:	eb00017e 	bl	247a8 <assertion_failed>
   241ac:	e3a020cf 	mov	r2, #207	; 0xcf
   241b0:	e59f1014 	ldr	r1, [pc, #20]	; 241cc <CScheduler::WakeTask(CTask**)+0x64>
   241b4:	e59f0018 	ldr	r0, [pc, #24]	; 241d4 <CScheduler::WakeTask(CTask**)+0x6c>
   241b8:	eb00017a 	bl	247a8 <assertion_failed>
   241bc:	e3a020d0 	mov	r2, #208	; 0xd0
   241c0:	e59f1004 	ldr	r1, [pc, #4]	; 241cc <CScheduler::WakeTask(CTask**)+0x64>
   241c4:	e59f000c 	ldr	r0, [pc, #12]	; 241d8 <CScheduler::WakeTask(CTask**)+0x70>
   241c8:	eb000176 	bl	247a8 <assertion_failed>
   241cc:	00046634 	.word	0x00046634
   241d0:	000466e8 	.word	0x000466e8
   241d4:	000466bc 	.word	0x000466bc
   241d8:	000466f4 	.word	0x000466f4

000241dc <CScheduler::GetNextTask()>:
   241dc:	e92d4070 	push	{r4, r5, r6, lr}
   241e0:	e1a05000 	mov	r5, r0
   241e4:	e5904058 	ldr	r4, [r0, #88]	; 0x58
   241e8:	e3540014 	cmp	r4, #20
   241ec:	23a04000 	movcs	r4, #0
   241f0:	eb001739 	bl	29edc <CTimer::Get()>
   241f4:	eb00147f 	bl	293f8 <CTimer::GetClockTicks()>
   241f8:	e5953050 	ldr	r3, [r5, #80]	; 0x50
   241fc:	e3530000 	cmp	r3, #0
   24200:	0a000020 	beq	24288 <CScheduler::GetNextTask()+0xac>
   24204:	e3a01001 	mov	r1, #1
   24208:	e2844001 	add	r4, r4, #1
   2420c:	e1540003 	cmp	r4, r3
   24210:	23a04000 	movcs	r4, #0
   24214:	e7956104 	ldr	r6, [r5, r4, lsl #2]
   24218:	e3560000 	cmp	r6, #0
   2421c:	0a000016 	beq	2427c <CScheduler::GetNextTask()+0xa0>
   24220:	e5d62004 	ldrb	r2, [r6, #4]
   24224:	e3520003 	cmp	r2, #3
   24228:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   2422c:	ea00001f 	b	242b0 <CScheduler::GetNextTask()+0xd4>
   24230:	00024274 	.word	0x00024274
   24234:	0002427c 	.word	0x0002427c
   24238:	00024290 	.word	0x00024290
   2423c:	00024240 	.word	0x00024240
   24240:	e5953060 	ldr	r3, [r5, #96]	; 0x60
   24244:	e3530000 	cmp	r3, #0
   24248:	0a000001 	beq	24254 <CScheduler::GetNextTask()+0x78>
   2424c:	e1a00006 	mov	r0, r6
   24250:	e12fff33 	blx	r3
   24254:	e1a00005 	mov	r0, r5
   24258:	e1a01006 	mov	r1, r6
   2425c:	ebffffa8 	bl	24104 <CScheduler::RemoveTask(CTask*)>
   24260:	e5963000 	ldr	r3, [r6]
   24264:	e1a00006 	mov	r0, r6
   24268:	e5933004 	ldr	r3, [r3, #4]
   2426c:	e12fff33 	blx	r3
   24270:	e3a04014 	mov	r4, #20
   24274:	e1a00004 	mov	r0, r4
   24278:	e8bd8070 	pop	{r4, r5, r6, pc}
   2427c:	e2811001 	add	r1, r1, #1
   24280:	e1510003 	cmp	r1, r3
   24284:	9affffdf 	bls	24208 <CScheduler::GetNextTask()+0x2c>
   24288:	e3a04014 	mov	r4, #20
   2428c:	eafffff8 	b	24274 <CScheduler::GetNextTask()+0x98>
   24290:	e5962008 	ldr	r2, [r6, #8]
   24294:	e0422000 	sub	r2, r2, r0
   24298:	e3520000 	cmp	r2, #0
   2429c:	cafffff6 	bgt	2427c <CScheduler::GetNextTask()+0xa0>
   242a0:	e3a03000 	mov	r3, #0
   242a4:	e1a00004 	mov	r0, r4
   242a8:	e5c63004 	strb	r3, [r6, #4]
   242ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   242b0:	e59f2008 	ldr	r2, [pc, #8]	; 242c0 <CScheduler::GetNextTask()+0xe4>
   242b4:	e59f1008 	ldr	r1, [pc, #8]	; 242c4 <CScheduler::GetNextTask()+0xe8>
   242b8:	e59f0008 	ldr	r0, [pc, #8]	; 242c8 <CScheduler::GetNextTask()+0xec>
   242bc:	eb000139 	bl	247a8 <assertion_failed>
   242c0:	00000103 	.word	0x00000103
   242c4:	00046634 	.word	0x00046634
   242c8:	00041748 	.word	0x00041748

000242cc <CScheduler::Yield()>:
   242cc:	e92d4030 	push	{r4, r5, lr}
   242d0:	e1a04000 	mov	r4, r0
   242d4:	e24dd00c 	sub	sp, sp, #12
   242d8:	e1a00004 	mov	r0, r4
   242dc:	ebffffbe 	bl	241dc <CScheduler::GetNextTask()>
   242e0:	e3500014 	cmp	r0, #20
   242e4:	e5840058 	str	r0, [r4, #88]	; 0x58
   242e8:	1a000006 	bne	24308 <CScheduler::Yield()+0x3c>
   242ec:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   242f0:	e3530000 	cmp	r3, #0
   242f4:	1afffff7 	bne	242d8 <CScheduler::Yield()+0xc>
   242f8:	e3a02037 	mov	r2, #55	; 0x37
   242fc:	e59f1080 	ldr	r1, [pc, #128]	; 24384 <CScheduler::Yield()+0xb8>
   24300:	e59f0080 	ldr	r0, [pc, #128]	; 24388 <CScheduler::Yield()+0xbc>
   24304:	eb000127 	bl	247a8 <assertion_failed>
   24308:	e3500013 	cmp	r0, #19
   2430c:	8a000014 	bhi	24364 <CScheduler::Yield()+0x98>
   24310:	e7940100 	ldr	r0, [r4, r0, lsl #2]
   24314:	e3500000 	cmp	r0, #0
   24318:	0a000015 	beq	24374 <CScheduler::Yield()+0xa8>
   2431c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   24320:	e1530000 	cmp	r3, r0
   24324:	0a00000c 	beq	2435c <CScheduler::Yield()+0x90>
   24328:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   2432c:	e283500c 	add	r5, r3, #12
   24330:	e3520000 	cmp	r2, #0
   24334:	e5840054 	str	r0, [r4, #84]	; 0x54
   24338:	e280100c 	add	r1, r0, #12
   2433c:	0a000002 	beq	2434c <CScheduler::Yield()+0x80>
   24340:	e58d1004 	str	r1, [sp, #4]
   24344:	e12fff32 	blx	r2
   24348:	e59d1004 	ldr	r1, [sp, #4]
   2434c:	e1a00005 	mov	r0, r5
   24350:	e28dd00c 	add	sp, sp, #12
   24354:	e8bd4030 	pop	{r4, r5, lr}
   24358:	ea000073 	b	2452c <TaskSwitch>
   2435c:	e28dd00c 	add	sp, sp, #12
   24360:	e8bd8030 	pop	{r4, r5, pc}
   24364:	e3a0203a 	mov	r2, #58	; 0x3a
   24368:	e59f1014 	ldr	r1, [pc, #20]	; 24384 <CScheduler::Yield()+0xb8>
   2436c:	e59f0018 	ldr	r0, [pc, #24]	; 2438c <CScheduler::Yield()+0xc0>
   24370:	eb00010c 	bl	247a8 <assertion_failed>
   24374:	e3a0203c 	mov	r2, #60	; 0x3c
   24378:	e59f1004 	ldr	r1, [pc, #4]	; 24384 <CScheduler::Yield()+0xb8>
   2437c:	e59f000c 	ldr	r0, [pc, #12]	; 24390 <CScheduler::Yield()+0xc4>
   24380:	eb000108 	bl	247a8 <assertion_failed>
   24384:	00046634 	.word	0x00046634
   24388:	0004671c 	.word	0x0004671c
   2438c:	0004672c 	.word	0x0004672c
   24390:	00046744 	.word	0x00046744

00024394 <CScheduler::usSleep(unsigned int)>:
   24394:	e92d4070 	push	{r4, r5, r6, lr}
   24398:	e2514000 	subs	r4, r1, #0
   2439c:	08bd8070 	popeq	{r4, r5, r6, pc}
   243a0:	e1a05000 	mov	r5, r0
   243a4:	eb0016cc 	bl	29edc <CTimer::Get()>
   243a8:	eb001412 	bl	293f8 <CTimer::GetClockTicks()>
   243ac:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   243b0:	e3530000 	cmp	r3, #0
   243b4:	0a000009 	beq	243e0 <CScheduler::usSleep(unsigned int)+0x4c>
   243b8:	e5d32004 	ldrb	r2, [r3, #4]
   243bc:	e3520000 	cmp	r2, #0
   243c0:	1a00000a 	bne	243f0 <CScheduler::usSleep(unsigned int)+0x5c>
   243c4:	e3a02002 	mov	r2, #2
   243c8:	e0841000 	add	r1, r4, r0
   243cc:	e5831008 	str	r1, [r3, #8]
   243d0:	e1a00005 	mov	r0, r5
   243d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   243d8:	e5c32004 	strb	r2, [r3, #4]
   243dc:	eaffffba 	b	242cc <CScheduler::Yield()>
   243e0:	e3a0206e 	mov	r2, #110	; 0x6e
   243e4:	e59f1014 	ldr	r1, [pc, #20]	; 24400 <CScheduler::usSleep(unsigned int)+0x6c>
   243e8:	e59f0014 	ldr	r0, [pc, #20]	; 24404 <CScheduler::usSleep(unsigned int)+0x70>
   243ec:	eb0000ed 	bl	247a8 <assertion_failed>
   243f0:	e3a0206f 	mov	r2, #111	; 0x6f
   243f4:	e59f1004 	ldr	r1, [pc, #4]	; 24400 <CScheduler::usSleep(unsigned int)+0x6c>
   243f8:	e59f0008 	ldr	r0, [pc, #8]	; 24408 <CScheduler::usSleep(unsigned int)+0x74>
   243fc:	eb0000e9 	bl	247a8 <assertion_failed>
   24400:	00046634 	.word	0x00046634
   24404:	00046750 	.word	0x00046750
   24408:	00046760 	.word	0x00046760

0002440c <CScheduler::Sleep(unsigned int)>:
   2440c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24410:	e59f6048 	ldr	r6, [pc, #72]	; 24460 <CScheduler::Sleep(unsigned int)+0x54>
   24414:	e1a04001 	mov	r4, r1
   24418:	e1510006 	cmp	r1, r6
   2441c:	e1a05000 	mov	r5, r0
   24420:	9a000007 	bls	24444 <CScheduler::Sleep(unsigned int)+0x38>
   24424:	e59f7038 	ldr	r7, [pc, #56]	; 24464 <CScheduler::Sleep(unsigned int)+0x58>
   24428:	e2444c07 	sub	r4, r4, #1792	; 0x700
   2442c:	e1a01007 	mov	r1, r7
   24430:	e1a00005 	mov	r0, r5
   24434:	e2444008 	sub	r4, r4, #8
   24438:	ebffffd5 	bl	24394 <CScheduler::usSleep(unsigned int)>
   2443c:	e1540006 	cmp	r4, r6
   24440:	8afffff8 	bhi	24428 <CScheduler::Sleep(unsigned int)+0x1c>
   24444:	e0641284 	rsb	r1, r4, r4, lsl #5
   24448:	e0611301 	rsb	r1, r1, r1, lsl #6
   2444c:	e0841181 	add	r1, r4, r1, lsl #3
   24450:	e1a00005 	mov	r0, r5
   24454:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   24458:	e1a01301 	lsl	r1, r1, #6
   2445c:	eaffffcc 	b	24394 <CScheduler::usSleep(unsigned int)>
   24460:	00000708 	.word	0x00000708
   24464:	6b49d200 	.word	0x6b49d200

00024468 <CScheduler::MsSleep(unsigned int)>:
   24468:	e3510000 	cmp	r1, #0
   2446c:	012fff1e 	bxeq	lr
   24470:	e0613281 	rsb	r3, r1, r1, lsl #5
   24474:	e0811103 	add	r1, r1, r3, lsl #2
   24478:	e1a01181 	lsl	r1, r1, #3
   2447c:	eaffffc4 	b	24394 <CScheduler::usSleep(unsigned int)>

00024480 <CScheduler::BlockTask(CTask**)>:
   24480:	e3510000 	cmp	r1, #0
   24484:	e92d4010 	push	{r4, lr}
   24488:	0a00000a 	beq	244b8 <CScheduler::BlockTask(CTask**)+0x38>
   2448c:	e5903054 	ldr	r3, [r0, #84]	; 0x54
   24490:	e3530000 	cmp	r3, #0
   24494:	e5813000 	str	r3, [r1]
   24498:	0a00000a 	beq	244c8 <CScheduler::BlockTask(CTask**)+0x48>
   2449c:	e5d32004 	ldrb	r2, [r3, #4]
   244a0:	e3520000 	cmp	r2, #0
   244a4:	1a00000b 	bne	244d8 <CScheduler::BlockTask(CTask**)+0x58>
   244a8:	e8bd4010 	pop	{r4, lr}
   244ac:	e3a02001 	mov	r2, #1
   244b0:	e5c32004 	strb	r2, [r3, #4]
   244b4:	eaffff84 	b	242cc <CScheduler::Yield()>
   244b8:	e3a020b7 	mov	r2, #183	; 0xb7
   244bc:	e59f1024 	ldr	r1, [pc, #36]	; 244e8 <CScheduler::BlockTask(CTask**)+0x68>
   244c0:	e59f0024 	ldr	r0, [pc, #36]	; 244ec <CScheduler::BlockTask(CTask**)+0x6c>
   244c4:	eb0000b7 	bl	247a8 <assertion_failed>
   244c8:	e3a020ba 	mov	r2, #186	; 0xba
   244cc:	e59f1014 	ldr	r1, [pc, #20]	; 244e8 <CScheduler::BlockTask(CTask**)+0x68>
   244d0:	e59f0018 	ldr	r0, [pc, #24]	; 244f0 <CScheduler::BlockTask(CTask**)+0x70>
   244d4:	eb0000b3 	bl	247a8 <assertion_failed>
   244d8:	e3a020bb 	mov	r2, #187	; 0xbb
   244dc:	e59f1004 	ldr	r1, [pc, #4]	; 244e8 <CScheduler::BlockTask(CTask**)+0x68>
   244e0:	e59f000c 	ldr	r0, [pc, #12]	; 244f4 <CScheduler::BlockTask(CTask**)+0x74>
   244e4:	eb0000af 	bl	247a8 <assertion_failed>
   244e8:	00046634 	.word	0x00046634
   244ec:	000466e8 	.word	0x000466e8
   244f0:	00046750 	.word	0x00046750
   244f4:	00046760 	.word	0x00046760

000244f8 <CScheduler::Get()>:
   244f8:	e59f301c 	ldr	r3, [pc, #28]	; 2451c <CScheduler::Get()+0x24>
   244fc:	e5930000 	ldr	r0, [r3]
   24500:	e3500000 	cmp	r0, #0
   24504:	112fff1e 	bxne	lr
   24508:	e92d4010 	push	{r4, lr}
   2450c:	e59f200c 	ldr	r2, [pc, #12]	; 24520 <CScheduler::Get()+0x28>
   24510:	e59f100c 	ldr	r1, [pc, #12]	; 24524 <CScheduler::Get()+0x2c>
   24514:	e59f000c 	ldr	r0, [pc, #12]	; 24528 <CScheduler::Get()+0x30>
   24518:	eb0000a2 	bl	247a8 <assertion_failed>
   2451c:	0005ce20 	.word	0x0005ce20
   24520:	0000010d 	.word	0x0000010d
   24524:	00046634 	.word	0x00046634
   24528:	00045380 	.word	0x00045380

0002452c <TaskSwitch>:
   2452c:	eef82a10 	vmrs	r2, fpexc
   24530:	eef13a10 	vmrs	r3, fpscr
   24534:	e8a07ffd 	stmia	r0!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   24538:	ec800b20 	vstmia	r0, {d0-d15}
   2453c:	e8b17ffd 	ldm	r1!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   24540:	eee82a10 	vmsr	fpexc, r2
   24544:	eee13a10 	vmsr	fpscr, r3
   24548:	ec910b20 	vldmia	r1, {d0-d15}
   2454c:	e12fff1e 	bx	lr

00024550 <CSynchronizationEvent::CSynchronizationEvent(bool)>:
   24550:	e3a02000 	mov	r2, #0
   24554:	e5c01000 	strb	r1, [r0]
   24558:	e5802004 	str	r2, [r0, #4]
   2455c:	e12fff1e 	bx	lr

00024560 <CSynchronizationEvent::~CSynchronizationEvent()>:
   24560:	e5903004 	ldr	r3, [r0, #4]
   24564:	e3530000 	cmp	r3, #0
   24568:	012fff1e 	bxeq	lr
   2456c:	e3a02023 	mov	r2, #35	; 0x23
   24570:	e92d4010 	push	{r4, lr}
   24574:	e59f1004 	ldr	r1, [pc, #4]	; 24580 <CSynchronizationEvent::~CSynchronizationEvent()+0x20>
   24578:	e59f0004 	ldr	r0, [pc, #4]	; 24584 <CSynchronizationEvent::~CSynchronizationEvent()+0x24>
   2457c:	eb000089 	bl	247a8 <assertion_failed>
   24580:	00046794 	.word	0x00046794
   24584:	000467b0 	.word	0x000467b0

00024588 <CSynchronizationEvent::GetState()>:
   24588:	e5d00000 	ldrb	r0, [r0]
   2458c:	e12fff1e 	bx	lr

00024590 <CSynchronizationEvent::Clear()>:
   24590:	e3a03000 	mov	r3, #0
   24594:	e5c03000 	strb	r3, [r0]
   24598:	e12fff1e 	bx	lr

0002459c <CSynchronizationEvent::Set()>:
   2459c:	e5d03000 	ldrb	r3, [r0]
   245a0:	e3530000 	cmp	r3, #0
   245a4:	112fff1e 	bxne	lr
   245a8:	e3a02001 	mov	r2, #1
   245ac:	e5903004 	ldr	r3, [r0, #4]
   245b0:	e92d4010 	push	{r4, lr}
   245b4:	e3530000 	cmp	r3, #0
   245b8:	e1a04000 	mov	r4, r0
   245bc:	e5c02000 	strb	r2, [r0]
   245c0:	08bd8010 	popeq	{r4, pc}
   245c4:	ebffffcb 	bl	244f8 <CScheduler::Get()>
   245c8:	e2841004 	add	r1, r4, #4
   245cc:	e8bd4010 	pop	{r4, lr}
   245d0:	eafffee4 	b	24168 <CScheduler::WakeTask(CTask**)>

000245d4 <CSynchronizationEvent::Wait()>:
   245d4:	e5d03000 	ldrb	r3, [r0]
   245d8:	e3530000 	cmp	r3, #0
   245dc:	112fff1e 	bxne	lr
   245e0:	e5903004 	ldr	r3, [r0, #4]
   245e4:	e92d4010 	push	{r4, lr}
   245e8:	e3530000 	cmp	r3, #0
   245ec:	e1a04000 	mov	r4, r0
   245f0:	1a000009 	bne	2461c <CSynchronizationEvent::Wait()+0x48>
   245f4:	ebffffbf 	bl	244f8 <CScheduler::Get()>
   245f8:	e2841004 	add	r1, r4, #4
   245fc:	ebffff9f 	bl	24480 <CScheduler::BlockTask(CTask**)>
   24600:	e5d43000 	ldrb	r3, [r4]
   24604:	e3530000 	cmp	r3, #0
   24608:	18bd8010 	popne	{r4, pc}
   2460c:	e3a0204c 	mov	r2, #76	; 0x4c
   24610:	e59f1014 	ldr	r1, [pc, #20]	; 2462c <CSynchronizationEvent::Wait()+0x58>
   24614:	e59f0014 	ldr	r0, [pc, #20]	; 24630 <CSynchronizationEvent::Wait()+0x5c>
   24618:	eb000062 	bl	247a8 <assertion_failed>
   2461c:	e3a02049 	mov	r2, #73	; 0x49
   24620:	e59f1004 	ldr	r1, [pc, #4]	; 2462c <CSynchronizationEvent::Wait()+0x58>
   24624:	e59f0008 	ldr	r0, [pc, #8]	; 24634 <CSynchronizationEvent::Wait()+0x60>
   24628:	eb00005e 	bl	247a8 <assertion_failed>
   2462c:	00046794 	.word	0x00046794
   24630:	000467c4 	.word	0x000467c4
   24634:	000467b0 	.word	0x000467b0

00024638 <CActLED::CActLED(bool)>:
   24638:	e3a03000 	mov	r3, #0
   2463c:	e59f2088 	ldr	r2, [pc, #136]	; 246cc <CActLED::CActLED(bool)+0x94>
   24640:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24644:	e5803000 	str	r3, [r0]
   24648:	e5803004 	str	r3, [r0, #4]
   2464c:	e1a06001 	mov	r6, r1
   24650:	e5820000 	str	r0, [r2]
   24654:	e1a05000 	mov	r5, r0
   24658:	eb000c3f 	bl	2775c <CMachineInfo::Get()>
   2465c:	eb000b6c 	bl	27414 <CMachineInfo::GetActLEDInfo() const>
   24660:	e2107080 	ands	r7, r0, #128	; 0x80
   24664:	e1a04000 	mov	r4, r0
   24668:	0a00000e 	beq	246a8 <CActLED::CActLED(bool)+0x70>
   2466c:	e3a00014 	mov	r0, #20
   24670:	eb001a54 	bl	2afc8 <operator new(unsigned int)>
   24674:	e1a07000 	mov	r7, r0
   24678:	e1a02006 	mov	r2, r6
   2467c:	e204103f 	and	r1, r4, #63	; 0x3f
   24680:	eb001881 	bl	2a88c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   24684:	e5857004 	str	r7, [r5, #4]
   24688:	e1a04324 	lsr	r4, r4, #6
   2468c:	e2244001 	eor	r4, r4, #1
   24690:	e2044001 	and	r4, r4, #1
   24694:	e1a00005 	mov	r0, r5
   24698:	e5c54008 	strb	r4, [r5, #8]
   2469c:	eb00001c 	bl	24714 <CActLED::Off()>
   246a0:	e1a00005 	mov	r0, r5
   246a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   246a8:	e3a00028 	mov	r0, #40	; 0x28
   246ac:	eb001a45 	bl	2afc8 <operator new(unsigned int)>
   246b0:	e1a06000 	mov	r6, r0
   246b4:	e1a03007 	mov	r3, r7
   246b8:	e3a02001 	mov	r2, #1
   246bc:	e204103f 	and	r1, r4, #63	; 0x3f
   246c0:	eb0003a4 	bl	25558 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   246c4:	e5856000 	str	r6, [r5]
   246c8:	eaffffee 	b	24688 <CActLED::CActLED(bool)+0x50>
   246cc:	0005ce24 	.word	0x0005ce24

000246d0 <CActLED::~CActLED()>:
   246d0:	e3a02000 	mov	r2, #0
   246d4:	e59f3004 	ldr	r3, [pc, #4]	; 246e0 <CActLED::~CActLED()+0x10>
   246d8:	e5832000 	str	r2, [r3]
   246dc:	e12fff1e 	bx	lr
   246e0:	0005ce24 	.word	0x0005ce24

000246e4 <CActLED::On()>:
   246e4:	e5903000 	ldr	r3, [r0]
   246e8:	e3530000 	cmp	r3, #0
   246ec:	0a000002 	beq	246fc <CActLED::On()+0x18>
   246f0:	e5d01008 	ldrb	r1, [r0, #8]
   246f4:	e1a00003 	mov	r0, r3
   246f8:	ea00043e 	b	257f8 <CGPIOPin::Write(unsigned int)>
   246fc:	e5903004 	ldr	r3, [r0, #4]
   24700:	e3530000 	cmp	r3, #0
   24704:	012fff1e 	bxeq	lr
   24708:	e5d01008 	ldrb	r1, [r0, #8]
   2470c:	e1a00003 	mov	r0, r3
   24710:	ea0018ba 	b	2aa00 <CVirtualGPIOPin::Write(unsigned int)>

00024714 <CActLED::Off()>:
   24714:	e5903000 	ldr	r3, [r0]
   24718:	e3530000 	cmp	r3, #0
   2471c:	0a000003 	beq	24730 <CActLED::Off()+0x1c>
   24720:	e5d01008 	ldrb	r1, [r0, #8]
   24724:	e1a00003 	mov	r0, r3
   24728:	e2211001 	eor	r1, r1, #1
   2472c:	ea000431 	b	257f8 <CGPIOPin::Write(unsigned int)>
   24730:	e5903004 	ldr	r3, [r0, #4]
   24734:	e3530000 	cmp	r3, #0
   24738:	012fff1e 	bxeq	lr
   2473c:	e5d01008 	ldrb	r1, [r0, #8]
   24740:	e1a00003 	mov	r0, r3
   24744:	e2211001 	eor	r1, r1, #1
   24748:	ea0018ac 	b	2aa00 <CVirtualGPIOPin::Write(unsigned int)>

0002474c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   2474c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24750:	e2516000 	subs	r6, r1, #0
   24754:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   24758:	e1a05000 	mov	r5, r0
   2475c:	e1a07002 	mov	r7, r2
   24760:	e1a08003 	mov	r8, r3
   24764:	e3a04001 	mov	r4, #1
   24768:	e1a00005 	mov	r0, r5
   2476c:	ebffffdc 	bl	246e4 <CActLED::On()>
   24770:	e1a00007 	mov	r0, r7
   24774:	eb0015a3 	bl	29e08 <CTimer::SimpleMsDelay(unsigned int)>
   24778:	e1a00005 	mov	r0, r5
   2477c:	ebffffe4 	bl	24714 <CActLED::Off()>
   24780:	e2844001 	add	r4, r4, #1
   24784:	e1a00008 	mov	r0, r8
   24788:	eb00159e 	bl	29e08 <CTimer::SimpleMsDelay(unsigned int)>
   2478c:	e1560004 	cmp	r6, r4
   24790:	2afffff4 	bcs	24768 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
   24794:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00024798 <CActLED::Get()>:
   24798:	e59f3004 	ldr	r3, [pc, #4]	; 247a4 <CActLED::Get()+0xc>
   2479c:	e5930000 	ldr	r0, [r3]
   247a0:	e12fff1e 	bx	lr
   247a4:	0005ce24 	.word	0x0005ce24

000247a8 <assertion_failed>:
   247a8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   247ac:	e24dd024 	sub	sp, sp, #36	; 0x24
   247b0:	e1a05000 	mov	r5, r0
   247b4:	e1a04001 	mov	r4, r1
   247b8:	e58d200c 	str	r2, [sp, #12]
   247bc:	e1a0600d 	mov	r6, sp
   247c0:	eb001e8a 	bl	2c1f0 <CInterruptSystem::DisableFIQ()>
   247c4:	f1080040 	cpsie	f
   247c8:	e28d0010 	add	r0, sp, #16
   247cc:	eb000cce 	bl	27b0c <CString::CString()>
   247d0:	e1a02004 	mov	r2, r4
   247d4:	e59d300c 	ldr	r3, [sp, #12]
   247d8:	e59f1044 	ldr	r1, [pc, #68]	; 24824 <assertion_failed+0x7c>
   247dc:	e28d0010 	add	r0, sp, #16
   247e0:	eb001213 	bl	29034 <CString::Format(char const*, ...)>
   247e4:	e28d0010 	add	r0, sp, #16
   247e8:	eb000cdf 	bl	27b6c <CString::operator char const*() const>
   247ec:	e1a01000 	mov	r1, r0
   247f0:	e1a00006 	mov	r0, r6
   247f4:	eb0001a0 	bl	24e7c <debug_stacktrace(unsigned int const*, char const*)>
   247f8:	eb0008d2 	bl	26b48 <CLogger::Get()>
   247fc:	e1a04000 	mov	r4, r0
   24800:	e28d0010 	add	r0, sp, #16
   24804:	eb000cd8 	bl	27b6c <CString::operator char const*() const>
   24808:	e3a02000 	mov	r2, #0
   2480c:	e1a01000 	mov	r1, r0
   24810:	e59f3010 	ldr	r3, [pc, #16]	; 24828 <assertion_failed+0x80>
   24814:	e1a00004 	mov	r0, r4
   24818:	e58d5000 	str	r5, [sp]
   2481c:	eb00080b 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24820:	eafffffe 	b	24820 <assertion_failed+0x78>
   24824:	000467d0 	.word	0x000467d0
   24828:	000467d8 	.word	0x000467d8

0002482c <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   2482c:	e92d4010 	push	{r4, lr}
   24830:	e1a04000 	mov	r4, r0
   24834:	e1a02001 	mov	r2, r1
   24838:	e3a01008 	mov	r1, #8
   2483c:	eb001f08 	bl	2c464 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   24840:	e1a00004 	mov	r0, r4
   24844:	e8bd8010 	pop	{r4, pc}

00024848 <CBcmPropertyTags::~CBcmPropertyTags()>:
   24848:	e92d4010 	push	{r4, lr}
   2484c:	e1a04000 	mov	r4, r0
   24850:	eb001f06 	bl	2c470 <CBcmMailBox::~CBcmMailBox()>
   24854:	e1a00004 	mov	r0, r4
   24858:	e8bd8010 	pop	{r4, pc}

0002485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   2485c:	e92d4070 	push	{r4, r5, r6, lr}
   24860:	e2524000 	subs	r4, r2, #0
   24864:	e59de010 	ldr	lr, [sp, #16]
   24868:	0a00002f 	beq	2492c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xd0>
   2486c:	e353000f 	cmp	r3, #15
   24870:	9a000031 	bls	2493c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xe0>
   24874:	e3ce2102 	bic	r2, lr, #-2147483648	; 0x80000000
   24878:	e5c4e008 	strb	lr, [r4, #8]
   2487c:	e1a0e422 	lsr	lr, r2, #8
   24880:	e243c00c 	sub	ip, r3, #12
   24884:	e5c4e009 	strb	lr, [r4, #9]
   24888:	e1a0e822 	lsr	lr, r2, #16
   2488c:	e5c4e00a 	strb	lr, [r4, #10]
   24890:	e1a02c22 	lsr	r2, r2, #24
   24894:	e1a0e42c 	lsr	lr, ip, #8
   24898:	e5c41000 	strb	r1, [r4]
   2489c:	e5c4200b 	strb	r2, [r4, #11]
   248a0:	e1a0582c 	lsr	r5, ip, #16
   248a4:	e1a02003 	mov	r2, r3
   248a8:	e5c4c004 	strb	ip, [r4, #4]
   248ac:	e1a03821 	lsr	r3, r1, #16
   248b0:	e1a0cc2c 	lsr	ip, ip, #24
   248b4:	e5c4e005 	strb	lr, [r4, #5]
   248b8:	e1a0e421 	lsr	lr, r1, #8
   248bc:	e1a01c21 	lsr	r1, r1, #24
   248c0:	e5c41003 	strb	r1, [r4, #3]
   248c4:	e5c45006 	strb	r5, [r4, #6]
   248c8:	e1a01004 	mov	r1, r4
   248cc:	e5c4c007 	strb	ip, [r4, #7]
   248d0:	e5c4e001 	strb	lr, [r4, #1]
   248d4:	e5c43002 	strb	r3, [r4, #2]
   248d8:	eb00001c 	bl	24950 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   248dc:	e3500000 	cmp	r0, #0
   248e0:	08bd8070 	popeq	{r4, r5, r6, pc}
   248e4:	e5d42009 	ldrb	r2, [r4, #9]
   248e8:	e5d43008 	ldrb	r3, [r4, #8]
   248ec:	e5d4100a 	ldrb	r1, [r4, #10]
   248f0:	e1833402 	orr	r3, r3, r2, lsl #8
   248f4:	e5d4200b 	ldrb	r2, [r4, #11]
   248f8:	e1833801 	orr	r3, r3, r1, lsl #16
   248fc:	e1833c02 	orr	r3, r3, r2, lsl #24
   24900:	e3c32102 	bic	r2, r3, #-2147483648	; 0x80000000
   24904:	e2520000 	subs	r0, r2, #0
   24908:	e1a0c422 	lsr	ip, r2, #8
   2490c:	e1a01822 	lsr	r1, r2, #16
   24910:	e1a02c22 	lsr	r2, r2, #24
   24914:	13a00001 	movne	r0, #1
   24918:	e5c43008 	strb	r3, [r4, #8]
   2491c:	e5c4c009 	strb	ip, [r4, #9]
   24920:	e5c4100a 	strb	r1, [r4, #10]
   24924:	e5c4200b 	strb	r2, [r4, #11]
   24928:	e8bd8070 	pop	{r4, r5, r6, pc}
   2492c:	e59f1018 	ldr	r1, [pc, #24]	; 2494c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   24930:	e3a02033 	mov	r2, #51	; 0x33
   24934:	e2810014 	add	r0, r1, #20
   24938:	ebffff9a 	bl	247a8 <assertion_failed>
   2493c:	e59f1008 	ldr	r1, [pc, #8]	; 2494c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   24940:	e3a02034 	mov	r2, #52	; 0x34
   24944:	e2810020 	add	r0, r1, #32
   24948:	ebffff96 	bl	247a8 <assertion_failed>
   2494c:	000467f0 	.word	0x000467f0

00024950 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   24950:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24954:	e2519000 	subs	r9, r1, #0
   24958:	0a000034 	beq	24a30 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
   2495c:	e352000f 	cmp	r2, #15
   24960:	e1a05002 	mov	r5, r2
   24964:	9a000035 	bls	24a40 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
   24968:	e2126003 	ands	r6, r2, #3
   2496c:	e282800c 	add	r8, r2, #12
   24970:	1a000036 	bne	24a50 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x100>
   24974:	e1a07000 	mov	r7, r0
   24978:	e1a00006 	mov	r0, r6
   2497c:	eb001c7f 	bl	2bb80 <CMemorySystem::GetCoherentPage(unsigned int)>
   24980:	e1a01428 	lsr	r1, r8, #8
   24984:	e1a02828 	lsr	r2, r8, #16
   24988:	e1a03c28 	lsr	r3, r8, #24
   2498c:	e280a008 	add	sl, r0, #8
   24990:	e5c08000 	strb	r8, [r0]
   24994:	e5c06004 	strb	r6, [r0, #4]
   24998:	e5c06005 	strb	r6, [r0, #5]
   2499c:	e5c06006 	strb	r6, [r0, #6]
   249a0:	e5c06007 	strb	r6, [r0, #7]
   249a4:	e5c01001 	strb	r1, [r0, #1]
   249a8:	e5c02002 	strb	r2, [r0, #2]
   249ac:	e5c03003 	strb	r3, [r0, #3]
   249b0:	e1a04000 	mov	r4, r0
   249b4:	e1a02005 	mov	r2, r5
   249b8:	e1a0000a 	mov	r0, sl
   249bc:	e1a01009 	mov	r1, r9
   249c0:	eb00179a 	bl	2a830 <memcpy>
   249c4:	e78a6005 	str	r6, [sl, r5]
   249c8:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   249cc:	e3c48103 	bic	r8, r4, #-1073741824	; 0xc0000000
   249d0:	e3888101 	orr	r8, r8, #1073741824	; 0x40000000
   249d4:	e1a00007 	mov	r0, r7
   249d8:	e1a01008 	mov	r1, r8
   249dc:	eb001ea4 	bl	2c474 <CBcmMailBox::WriteRead(unsigned int)>
   249e0:	e1500008 	cmp	r0, r8
   249e4:	0a000001 	beq	249f0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
   249e8:	e3a00000 	mov	r0, #0
   249ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   249f0:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   249f4:	e5d42005 	ldrb	r2, [r4, #5]
   249f8:	e5d43004 	ldrb	r3, [r4, #4]
   249fc:	e5d41006 	ldrb	r1, [r4, #6]
   24a00:	e1833402 	orr	r3, r3, r2, lsl #8
   24a04:	e5d42007 	ldrb	r2, [r4, #7]
   24a08:	e1833801 	orr	r3, r3, r1, lsl #16
   24a0c:	e1833c02 	orr	r3, r3, r2, lsl #24
   24a10:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   24a14:	1afffff3 	bne	249e8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x98>
   24a18:	e1a02005 	mov	r2, r5
   24a1c:	e1a0100a 	mov	r1, sl
   24a20:	e1a00009 	mov	r0, r9
   24a24:	eb001781 	bl	2a830 <memcpy>
   24a28:	e3a00001 	mov	r0, #1
   24a2c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24a30:	e59f1028 	ldr	r1, [pc, #40]	; 24a60 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   24a34:	e3a0204b 	mov	r2, #75	; 0x4b
   24a38:	e2810048 	add	r0, r1, #72	; 0x48
   24a3c:	ebffff59 	bl	247a8 <assertion_failed>
   24a40:	e59f1018 	ldr	r1, [pc, #24]	; 24a60 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   24a44:	e3a0204c 	mov	r2, #76	; 0x4c
   24a48:	e2810054 	add	r0, r1, #84	; 0x54
   24a4c:	ebffff55 	bl	247a8 <assertion_failed>
   24a50:	e59f1008 	ldr	r1, [pc, #8]	; 24a60 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   24a54:	e3a0204e 	mov	r2, #78	; 0x4e
   24a58:	e2810080 	add	r0, r1, #128	; 0x80
   24a5c:	ebffff51 	bl	247a8 <assertion_failed>
   24a60:	000467f0 	.word	0x000467f0

00024a64 <CClassAllocator::~CClassAllocator()>:
   24a64:	e3a03000 	mov	r3, #0
   24a68:	e92d4010 	push	{r4, lr}
   24a6c:	e1a04000 	mov	r4, r0
   24a70:	e590000c 	ldr	r0, [r0, #12]
   24a74:	e5843010 	str	r3, [r4, #16]
   24a78:	e1500003 	cmp	r0, r3
   24a7c:	0a000000 	beq	24a84 <CClassAllocator::~CClassAllocator()+0x20>
   24a80:	eb001e46 	bl	2c3a0 <free>
   24a84:	e1a00004 	mov	r0, r4
   24a88:	e8bd8010 	pop	{r4, pc}

00024a8c <CClassAllocator::Init(unsigned int, unsigned int)>:
   24a8c:	e3510001 	cmp	r1, #1
   24a90:	33a01001 	movcc	r1, #1
   24a94:	e281101f 	add	r1, r1, #31
   24a98:	e3c1100f 	bic	r1, r1, #15
   24a9c:	e3520000 	cmp	r2, #0
   24aa0:	e92d4010 	push	{r4, lr}
   24aa4:	e5801000 	str	r1, [r0]
   24aa8:	0a00001b 	beq	24b1c <CClassAllocator::Init(unsigned int, unsigned int)+0x90>
   24aac:	e1a04000 	mov	r4, r0
   24ab0:	e5802004 	str	r2, [r0, #4]
   24ab4:	e0000192 	mul	r0, r2, r1
   24ab8:	eb001e32 	bl	2c388 <malloc>
   24abc:	e3500000 	cmp	r0, #0
   24ac0:	e584000c 	str	r0, [r4, #12]
   24ac4:	0a000012 	beq	24b14 <CClassAllocator::Init(unsigned int, unsigned int)+0x88>
   24ac8:	e210200f 	ands	r2, r0, #15
   24acc:	1a000016 	bne	24b2c <CClassAllocator::Init(unsigned int, unsigned int)+0xa0>
   24ad0:	e5943004 	ldr	r3, [r4, #4]
   24ad4:	e3530000 	cmp	r3, #0
   24ad8:	08bd8010 	popeq	{r4, pc}
   24adc:	e5943010 	ldr	r3, [r4, #16]
   24ae0:	e59fe054 	ldr	lr, [pc, #84]	; 24b3c <CClassAllocator::Init(unsigned int, unsigned int)+0xb0>
   24ae4:	e1a01003 	mov	r1, r3
   24ae8:	e5943000 	ldr	r3, [r4]
   24aec:	e0030293 	mul	r3, r3, r2
   24af0:	e780e003 	str	lr, [r0, r3]
   24af4:	e594c004 	ldr	ip, [r4, #4]
   24af8:	e2822001 	add	r2, r2, #1
   24afc:	e0803003 	add	r3, r0, r3
   24b00:	e15c0002 	cmp	ip, r2
   24b04:	e583100c 	str	r1, [r3, #12]
   24b08:	e5843010 	str	r3, [r4, #16]
   24b0c:	8afffff4 	bhi	24ae4 <CClassAllocator::Init(unsigned int, unsigned int)+0x58>
   24b10:	e8bd8010 	pop	{r4, pc}
   24b14:	e5840004 	str	r0, [r4, #4]
   24b18:	e8bd8010 	pop	{r4, pc}
   24b1c:	e3a02055 	mov	r2, #85	; 0x55
   24b20:	e59f1018 	ldr	r1, [pc, #24]	; 24b40 <CClassAllocator::Init(unsigned int, unsigned int)+0xb4>
   24b24:	e59f0018 	ldr	r0, [pc, #24]	; 24b44 <CClassAllocator::Init(unsigned int, unsigned int)+0xb8>
   24b28:	ebffff1e 	bl	247a8 <assertion_failed>
   24b2c:	e3a0205f 	mov	r2, #95	; 0x5f
   24b30:	e59f1008 	ldr	r1, [pc, #8]	; 24b40 <CClassAllocator::Init(unsigned int, unsigned int)+0xb4>
   24b34:	e59f000c 	ldr	r0, [pc, #12]	; 24b48 <CClassAllocator::Init(unsigned int, unsigned int)+0xbc>
   24b38:	ebffff1a 	bl	247a8 <assertion_failed>
   24b3c:	4f425350 	.word	0x4f425350
   24b40:	00046888 	.word	0x00046888
   24b44:	0004689c 	.word	0x0004689c
   24b48:	000468b4 	.word	0x000468b4

00024b4c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>:
   24b4c:	e92d4010 	push	{r4, lr}
   24b50:	e3a0c000 	mov	ip, #0
   24b54:	e3a0e001 	mov	lr, #1
   24b58:	e1a04000 	mov	r4, r0
   24b5c:	e5803008 	str	r3, [r0, #8]
   24b60:	e580e018 	str	lr, [r0, #24]
   24b64:	e580c00c 	str	ip, [r0, #12]
   24b68:	e580c010 	str	ip, [r0, #16]
   24b6c:	e5c0c014 	strb	ip, [r0, #20]
   24b70:	ebffffc5 	bl	24a8c <CClassAllocator::Init(unsigned int, unsigned int)>
   24b74:	e1a00004 	mov	r0, r4
   24b78:	e8bd8010 	pop	{r4, pc}

00024b7c <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>:
   24b7c:	e92d4010 	push	{r4, lr}
   24b80:	e3a0c000 	mov	ip, #0
   24b84:	e3a0e001 	mov	lr, #1
   24b88:	e1a04000 	mov	r4, r0
   24b8c:	e5803018 	str	r3, [r0, #24]
   24b90:	e59d3008 	ldr	r3, [sp, #8]
   24b94:	e5c0e014 	strb	lr, [r0, #20]
   24b98:	e5803008 	str	r3, [r0, #8]
   24b9c:	e580c00c 	str	ip, [r0, #12]
   24ba0:	e580c010 	str	ip, [r0, #16]
   24ba4:	ebffffb8 	bl	24a8c <CClassAllocator::Init(unsigned int, unsigned int)>
   24ba8:	e1a00004 	mov	r0, r4
   24bac:	e8bd8010 	pop	{r4, pc}

00024bb0 <CClassAllocator::Allocate()>:
   24bb0:	e92d4030 	push	{r4, r5, lr}
   24bb4:	e5d03014 	ldrb	r3, [r0, #20]
   24bb8:	e1a04000 	mov	r4, r0
   24bbc:	e3530000 	cmp	r3, #0
   24bc0:	e24dd00c 	sub	sp, sp, #12
   24bc4:	0a000002 	beq	24bd4 <CClassAllocator::Allocate()+0x24>
   24bc8:	e5900018 	ldr	r0, [r0, #24]
   24bcc:	e3500000 	cmp	r0, #0
   24bd0:	1a000015 	bne	24c2c <CClassAllocator::Allocate()+0x7c>
   24bd4:	e5945010 	ldr	r5, [r4, #16]
   24bd8:	e3550000 	cmp	r5, #0
   24bdc:	0a00001d 	beq	24c58 <CClassAllocator::Allocate()+0xa8>
   24be0:	e59f30a4 	ldr	r3, [pc, #164]	; 24c8c <CClassAllocator::Allocate()+0xdc>
   24be4:	e5952000 	ldr	r2, [r5]
   24be8:	e1520003 	cmp	r2, r3
   24bec:	1a000022 	bne	24c7c <CClassAllocator::Allocate()+0xcc>
   24bf0:	e3a03000 	mov	r3, #0
   24bf4:	e5d41014 	ldrb	r1, [r4, #20]
   24bf8:	e595200c 	ldr	r2, [r5, #12]
   24bfc:	e1510003 	cmp	r1, r3
   24c00:	e5842010 	str	r2, [r4, #16]
   24c04:	e585300c 	str	r3, [r5, #12]
   24c08:	1a000002 	bne	24c18 <CClassAllocator::Allocate()+0x68>
   24c0c:	e2850010 	add	r0, r5, #16
   24c10:	e28dd00c 	add	sp, sp, #12
   24c14:	e8bd8030 	pop	{r4, r5, pc}
   24c18:	e5943018 	ldr	r3, [r4, #24]
   24c1c:	e3530000 	cmp	r3, #0
   24c20:	0afffff9 	beq	24c0c <CClassAllocator::Allocate()+0x5c>
   24c24:	eb001c3e 	bl	2bd24 <LeaveCritical>
   24c28:	eafffff7 	b	24c0c <CClassAllocator::Allocate()+0x5c>
   24c2c:	eb001c12 	bl	2bc7c <EnterCritical>
   24c30:	e5945010 	ldr	r5, [r4, #16]
   24c34:	e3550000 	cmp	r5, #0
   24c38:	1affffe8 	bne	24be0 <CClassAllocator::Allocate()+0x30>
   24c3c:	e5d43014 	ldrb	r3, [r4, #20]
   24c40:	e3530000 	cmp	r3, #0
   24c44:	0a000003 	beq	24c58 <CClassAllocator::Allocate()+0xa8>
   24c48:	e5943018 	ldr	r3, [r4, #24]
   24c4c:	e3530000 	cmp	r3, #0
   24c50:	0a000000 	beq	24c58 <CClassAllocator::Allocate()+0xa8>
   24c54:	eb001c32 	bl	2bd24 <LeaveCritical>
   24c58:	eb0007ba 	bl	26b48 <CLogger::Get()>
   24c5c:	e5943004 	ldr	r3, [r4, #4]
   24c60:	e5941008 	ldr	r1, [r4, #8]
   24c64:	e3a02000 	mov	r2, #0
   24c68:	e58d3000 	str	r3, [sp]
   24c6c:	e59f301c 	ldr	r3, [pc, #28]	; 24c90 <CClassAllocator::Allocate()+0xe0>
   24c70:	eb0006f6 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24c74:	e3a00000 	mov	r0, #0
   24c78:	eaffffe4 	b	24c10 <CClassAllocator::Allocate()+0x60>
   24c7c:	e3a02082 	mov	r2, #130	; 0x82
   24c80:	e59f100c 	ldr	r1, [pc, #12]	; 24c94 <CClassAllocator::Allocate()+0xe4>
   24c84:	e59f000c 	ldr	r0, [pc, #12]	; 24c98 <CClassAllocator::Allocate()+0xe8>
   24c88:	ebfffec6 	bl	247a8 <assertion_failed>
   24c8c:	4f425350 	.word	0x4f425350
   24c90:	000468f0 	.word	0x000468f0
   24c94:	00046888 	.word	0x00046888
   24c98:	0004691c 	.word	0x0004691c

00024c9c <CClassAllocator::Free(void*)>:
   24c9c:	e92d4070 	push	{r4, r5, r6, lr}
   24ca0:	e2514000 	subs	r4, r1, #0
   24ca4:	0a00001e 	beq	24d24 <CClassAllocator::Free(void*)+0x88>
   24ca8:	e59f30a4 	ldr	r3, [pc, #164]	; 24d54 <CClassAllocator::Free(void*)+0xb8>
   24cac:	e5142010 	ldr	r2, [r4, #-16]
   24cb0:	e2446010 	sub	r6, r4, #16
   24cb4:	e1520003 	cmp	r2, r3
   24cb8:	1a00001d 	bne	24d34 <CClassAllocator::Free(void*)+0x98>
   24cbc:	e5143004 	ldr	r3, [r4, #-4]
   24cc0:	e3530000 	cmp	r3, #0
   24cc4:	1a00001e 	bne	24d44 <CClassAllocator::Free(void*)+0xa8>
   24cc8:	e5d03014 	ldrb	r3, [r0, #20]
   24ccc:	e1a05000 	mov	r5, r0
   24cd0:	e3530000 	cmp	r3, #0
   24cd4:	0a000002 	beq	24ce4 <CClassAllocator::Free(void*)+0x48>
   24cd8:	e5900018 	ldr	r0, [r0, #24]
   24cdc:	e3500000 	cmp	r0, #0
   24ce0:	1a000003 	bne	24cf4 <CClassAllocator::Free(void*)+0x58>
   24ce4:	e5953010 	ldr	r3, [r5, #16]
   24ce8:	e5043004 	str	r3, [r4, #-4]
   24cec:	e5856010 	str	r6, [r5, #16]
   24cf0:	e8bd8070 	pop	{r4, r5, r6, pc}
   24cf4:	eb001be0 	bl	2bc7c <EnterCritical>
   24cf8:	e5d52014 	ldrb	r2, [r5, #20]
   24cfc:	e5953010 	ldr	r3, [r5, #16]
   24d00:	e3520000 	cmp	r2, #0
   24d04:	e5043004 	str	r3, [r4, #-4]
   24d08:	e5856010 	str	r6, [r5, #16]
   24d0c:	08bd8070 	popeq	{r4, r5, r6, pc}
   24d10:	e5950018 	ldr	r0, [r5, #24]
   24d14:	e3500000 	cmp	r0, #0
   24d18:	08bd8070 	popeq	{r4, r5, r6, pc}
   24d1c:	e8bd4070 	pop	{r4, r5, r6, lr}
   24d20:	ea001bff 	b	2bd24 <LeaveCritical>
   24d24:	e3a02090 	mov	r2, #144	; 0x90
   24d28:	e59f1028 	ldr	r1, [pc, #40]	; 24d58 <CClassAllocator::Free(void*)+0xbc>
   24d2c:	e59f0028 	ldr	r0, [pc, #40]	; 24d5c <CClassAllocator::Free(void*)+0xc0>
   24d30:	ebfffe9c 	bl	247a8 <assertion_failed>
   24d34:	e3a02094 	mov	r2, #148	; 0x94
   24d38:	e59f1018 	ldr	r1, [pc, #24]	; 24d58 <CClassAllocator::Free(void*)+0xbc>
   24d3c:	e59f001c 	ldr	r0, [pc, #28]	; 24d60 <CClassAllocator::Free(void*)+0xc4>
   24d40:	ebfffe98 	bl	247a8 <assertion_failed>
   24d44:	e3a02095 	mov	r2, #149	; 0x95
   24d48:	e59f1008 	ldr	r1, [pc, #8]	; 24d58 <CClassAllocator::Free(void*)+0xbc>
   24d4c:	e59f0010 	ldr	r0, [pc, #16]	; 24d64 <CClassAllocator::Free(void*)+0xc8>
   24d50:	ebfffe94 	bl	247a8 <assertion_failed>
   24d54:	4f425350 	.word	0x4f425350
   24d58:	00046888 	.word	0x00046888
   24d5c:	0004693c 	.word	0x0004693c
   24d60:	00046948 	.word	0x00046948
   24d64:	00046964 	.word	0x00046964

00024d68 <debug_hexdump(void const*, unsigned int, char const*)>:
   24d68:	e3520000 	cmp	r2, #0
   24d6c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   24d70:	e1a06001 	mov	r6, r1
   24d74:	e1a07000 	mov	r7, r0
   24d78:	e59f80f0 	ldr	r8, [pc, #240]	; 24e70 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   24d7c:	11a08002 	movne	r8, r2
   24d80:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   24d84:	eb00076f 	bl	26b48 <CLogger::Get()>
   24d88:	e1a01008 	mov	r1, r8
   24d8c:	e3a02004 	mov	r2, #4
   24d90:	e1cd60f0 	strd	r6, [sp]
   24d94:	e59f30d8 	ldr	r3, [pc, #216]	; 24e74 <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   24d98:	eb0006ac 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24d9c:	e3560000 	cmp	r6, #0
   24da0:	0a000030 	beq	24e68 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
   24da4:	e3c6000f 	bic	r0, r6, #15
   24da8:	e1a04007 	mov	r4, r7
   24dac:	e0876006 	add	r6, r7, r6
   24db0:	e59f90c0 	ldr	r9, [pc, #192]	; 24e78 <debug_hexdump(void const*, unsigned int, char const*)+0x110>
   24db4:	e0877000 	add	r7, r7, r0
   24db8:	ea000001 	b	24dc4 <debug_hexdump(void const*, unsigned int, char const*)+0x5c>
   24dbc:	e1540006 	cmp	r4, r6
   24dc0:	0a000028 	beq	24e68 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
   24dc4:	eb00075f 	bl	26b48 <CLogger::Get()>
   24dc8:	e5d4300f 	ldrb	r3, [r4, #15]
   24dcc:	e5d45000 	ldrb	r5, [r4]
   24dd0:	e58d3040 	str	r3, [sp, #64]	; 0x40
   24dd4:	e5d4300e 	ldrb	r3, [r4, #14]
   24dd8:	e6ffc074 	uxth	ip, r4
   24ddc:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   24de0:	e5d4200d 	ldrb	r2, [r4, #13]
   24de4:	e1a03009 	mov	r3, r9
   24de8:	e58d2038 	str	r2, [sp, #56]	; 0x38
   24dec:	e5d4100c 	ldrb	r1, [r4, #12]
   24df0:	e3a02004 	mov	r2, #4
   24df4:	e58d1034 	str	r1, [sp, #52]	; 0x34
   24df8:	e5d4e00b 	ldrb	lr, [r4, #11]
   24dfc:	e1a01008 	mov	r1, r8
   24e00:	e58de030 	str	lr, [sp, #48]	; 0x30
   24e04:	e5d4e00a 	ldrb	lr, [r4, #10]
   24e08:	e58de02c 	str	lr, [sp, #44]	; 0x2c
   24e0c:	e5d4e009 	ldrb	lr, [r4, #9]
   24e10:	e58de028 	str	lr, [sp, #40]	; 0x28
   24e14:	e5d4e008 	ldrb	lr, [r4, #8]
   24e18:	e58de024 	str	lr, [sp, #36]	; 0x24
   24e1c:	e5d4e007 	ldrb	lr, [r4, #7]
   24e20:	e58de020 	str	lr, [sp, #32]
   24e24:	e5d4e006 	ldrb	lr, [r4, #6]
   24e28:	e58de01c 	str	lr, [sp, #28]
   24e2c:	e5d4e005 	ldrb	lr, [r4, #5]
   24e30:	e58de018 	str	lr, [sp, #24]
   24e34:	e5d4e004 	ldrb	lr, [r4, #4]
   24e38:	e58de014 	str	lr, [sp, #20]
   24e3c:	e5d4e003 	ldrb	lr, [r4, #3]
   24e40:	e58de010 	str	lr, [sp, #16]
   24e44:	e5d4e002 	ldrb	lr, [r4, #2]
   24e48:	e58de00c 	str	lr, [sp, #12]
   24e4c:	e5d4e001 	ldrb	lr, [r4, #1]
   24e50:	e98d4020 	stmib	sp, {r5, lr}
   24e54:	e58dc000 	str	ip, [sp]
   24e58:	eb00067c 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24e5c:	e1540007 	cmp	r4, r7
   24e60:	e2844010 	add	r4, r4, #16
   24e64:	1affffd4 	bne	24dbc <debug_hexdump(void const*, unsigned int, char const*)+0x54>
   24e68:	e28dd04c 	add	sp, sp, #76	; 0x4c
   24e6c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   24e70:	00046a0c 	.word	0x00046a0c
   24e74:	00046978 	.word	0x00046978
   24e78:	000469a0 	.word	0x000469a0

00024e7c <debug_stacktrace(unsigned int const*, char const*)>:
   24e7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24e80:	e3510000 	cmp	r1, #0
   24e84:	e59f7074 	ldr	r7, [pc, #116]	; 24f00 <debug_stacktrace(unsigned int const*, char const*)+0x84>
   24e88:	e3a04000 	mov	r4, #0
   24e8c:	11a07001 	movne	r7, r1
   24e90:	e59f606c 	ldr	r6, [pc, #108]	; 24f04 <debug_stacktrace(unsigned int const*, char const*)+0x88>
   24e94:	e59f806c 	ldr	r8, [pc, #108]	; 24f08 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
   24e98:	e24dd008 	sub	sp, sp, #8
   24e9c:	e2405004 	sub	r5, r0, #4
   24ea0:	ea000002 	b	24eb0 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   24ea4:	e2844001 	add	r4, r4, #1
   24ea8:	e3540040 	cmp	r4, #64	; 0x40
   24eac:	0a000011 	beq	24ef8 <debug_stacktrace(unsigned int const*, char const*)+0x7c>
   24eb0:	e5b53004 	ldr	r3, [r5, #4]!
   24eb4:	e3530902 	cmp	r3, #32768	; 0x8000
   24eb8:	3afffff9 	bcc	24ea4 <debug_stacktrace(unsigned int const*, char const*)+0x28>
   24ebc:	e1530006 	cmp	r3, r6
   24ec0:	2afffff7 	bcs	24ea4 <debug_stacktrace(unsigned int const*, char const*)+0x28>
   24ec4:	e3130003 	tst	r3, #3
   24ec8:	1afffff5 	bne	24ea4 <debug_stacktrace(unsigned int const*, char const*)+0x28>
   24ecc:	eb00071d 	bl	26b48 <CLogger::Get()>
   24ed0:	e5952000 	ldr	r2, [r5]
   24ed4:	e1a03008 	mov	r3, r8
   24ed8:	e58d2004 	str	r2, [sp, #4]
   24edc:	e58d4000 	str	r4, [sp]
   24ee0:	e3a02004 	mov	r2, #4
   24ee4:	e1a01007 	mov	r1, r7
   24ee8:	e2844001 	add	r4, r4, #1
   24eec:	eb000657 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24ef0:	e3540040 	cmp	r4, #64	; 0x40
   24ef4:	1affffed 	bne	24eb0 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   24ef8:	e28dd008 	add	sp, sp, #8
   24efc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24f00:	00046a0c 	.word	0x00046a0c
   24f04:	000405f0 	.word	0x000405f0
   24f08:	000469f8 	.word	0x000469f8

00024f0c <CDevice::~CDevice()>:
   24f0c:	e12fff1e 	bx	lr

00024f10 <CDevice::Read(void*, unsigned int)>:
   24f10:	e3e00000 	mvn	r0, #0
   24f14:	e12fff1e 	bx	lr

00024f18 <CDevice::Seek(unsigned long long)>:
   24f18:	e3e00000 	mvn	r0, #0
   24f1c:	e3e01000 	mvn	r1, #0
   24f20:	e12fff1e 	bx	lr

00024f24 <CDevice::RemoveDevice()>:
   24f24:	e3a00000 	mov	r0, #0
   24f28:	e12fff1e 	bx	lr

00024f2c <CDevice::~CDevice()>:
   24f2c:	e92d4010 	push	{r4, lr}
   24f30:	e1a04000 	mov	r4, r0
   24f34:	e3a01004 	mov	r1, #4
   24f38:	eb001830 	bl	2b000 <operator delete(void*, unsigned int)>
   24f3c:	e1a00004 	mov	r0, r4
   24f40:	e8bd8010 	pop	{r4, pc}

00024f44 <CDevice::CDevice()>:
   24f44:	e59f3004 	ldr	r3, [pc, #4]	; 24f50 <CDevice::CDevice()+0xc>
   24f48:	e5803000 	str	r3, [r0]
   24f4c:	e12fff1e 	bx	lr
   24f50:	00046a1c 	.word	0x00046a1c

00024f54 <CDeviceNameService::CDeviceNameService()>:
   24f54:	e3a02000 	mov	r2, #0
   24f58:	e59f102c 	ldr	r1, [pc, #44]	; 24f8c <CDeviceNameService::CDeviceNameService()+0x38>
   24f5c:	e5802000 	str	r2, [r0]
   24f60:	e591c000 	ldr	ip, [r1]
   24f64:	e5802004 	str	r2, [r0, #4]
   24f68:	e15c0002 	cmp	ip, r2
   24f6c:	1a000001 	bne	24f78 <CDeviceNameService::CDeviceNameService()+0x24>
   24f70:	e5810000 	str	r0, [r1]
   24f74:	e12fff1e 	bx	lr
   24f78:	e3a0201f 	mov	r2, #31
   24f7c:	e92d4010 	push	{r4, lr}
   24f80:	e59f1008 	ldr	r1, [pc, #8]	; 24f90 <CDeviceNameService::CDeviceNameService()+0x3c>
   24f84:	e59f0008 	ldr	r0, [pc, #8]	; 24f94 <CDeviceNameService::CDeviceNameService()+0x40>
   24f88:	ebfffe06 	bl	247a8 <assertion_failed>
   24f8c:	0005ce28 	.word	0x0005ce28
   24f90:	00046a34 	.word	0x00046a34
   24f94:	00046a4c 	.word	0x00046a4c

00024f98 <CDeviceNameService::~CDeviceNameService()>:
   24f98:	e92d4070 	push	{r4, r5, r6, lr}
   24f9c:	e5904000 	ldr	r4, [r0]
   24fa0:	e1a05000 	mov	r5, r0
   24fa4:	e3540000 	cmp	r4, #0
   24fa8:	0a00000a 	beq	24fd8 <CDeviceNameService::~CDeviceNameService()+0x40>
   24fac:	e5940004 	ldr	r0, [r4, #4]
   24fb0:	e5944000 	ldr	r4, [r4]
   24fb4:	e3500000 	cmp	r0, #0
   24fb8:	0a000000 	beq	24fc0 <CDeviceNameService::~CDeviceNameService()+0x28>
   24fbc:	eb00180e 	bl	2affc <operator delete[](void*)>
   24fc0:	e3a01010 	mov	r1, #16
   24fc4:	e5950000 	ldr	r0, [r5]
   24fc8:	eb00180c 	bl	2b000 <operator delete(void*, unsigned int)>
   24fcc:	e3540000 	cmp	r4, #0
   24fd0:	e5854000 	str	r4, [r5]
   24fd4:	1afffff4 	bne	24fac <CDeviceNameService::~CDeviceNameService()+0x14>
   24fd8:	e3a02000 	mov	r2, #0
   24fdc:	e59f3008 	ldr	r3, [pc, #8]	; 24fec <CDeviceNameService::~CDeviceNameService()+0x54>
   24fe0:	e1a00005 	mov	r0, r5
   24fe4:	e5832000 	str	r2, [r3]
   24fe8:	e8bd8070 	pop	{r4, r5, r6, pc}
   24fec:	0005ce28 	.word	0x0005ce28

00024ff0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   24ff0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24ff4:	e1a05000 	mov	r5, r0
   24ff8:	e5900004 	ldr	r0, [r0, #4]
   24ffc:	e1a06001 	mov	r6, r1
   25000:	e3500000 	cmp	r0, #0
   25004:	e1a07002 	mov	r7, r2
   25008:	e1a08003 	mov	r8, r3
   2500c:	1a000017 	bne	25070 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
   25010:	e3a00010 	mov	r0, #16
   25014:	eb0017eb 	bl	2afc8 <operator new(unsigned int)>
   25018:	e3560000 	cmp	r6, #0
   2501c:	e1a04000 	mov	r4, r0
   25020:	0a000014 	beq	25078 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
   25024:	e1a00006 	mov	r0, r6
   25028:	eb001405 	bl	2a044 <strlen>
   2502c:	e2800001 	add	r0, r0, #1
   25030:	eb0017ea 	bl	2afe0 <operator new[](unsigned int)>
   25034:	e1a01006 	mov	r1, r6
   25038:	e5840004 	str	r0, [r4, #4]
   2503c:	eb0014a4 	bl	2a2d4 <strcpy>
   25040:	e3570000 	cmp	r7, #0
   25044:	0a00000f 	beq	25088 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x98>
   25048:	e5952004 	ldr	r2, [r5, #4]
   2504c:	e5953000 	ldr	r3, [r5]
   25050:	e3520000 	cmp	r2, #0
   25054:	e5847008 	str	r7, [r4, #8]
   25058:	e5c4800c 	strb	r8, [r4, #12]
   2505c:	e5843000 	str	r3, [r4]
   25060:	e5854000 	str	r4, [r5]
   25064:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25068:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2506c:	ea001b2c 	b	2bd24 <LeaveCritical>
   25070:	eb001b01 	bl	2bc7c <EnterCritical>
   25074:	eaffffe5 	b	25010 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
   25078:	e3a0203b 	mov	r2, #59	; 0x3b
   2507c:	e59f1014 	ldr	r1, [pc, #20]	; 25098 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   25080:	e59f0014 	ldr	r0, [pc, #20]	; 2509c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xac>
   25084:	ebfffdc7 	bl	247a8 <assertion_failed>
   25088:	e3a02040 	mov	r2, #64	; 0x40
   2508c:	e59f1004 	ldr	r1, [pc, #4]	; 25098 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   25090:	e59f0008 	ldr	r0, [pc, #8]	; 250a0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
   25094:	ebfffdc3 	bl	247a8 <assertion_failed>
   25098:	00046a34 	.word	0x00046a34
   2509c:	00041708 	.word	0x00041708
   250a0:	00046a58 	.word	0x00046a58

000250a4 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   250a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   250a8:	e2515000 	subs	r5, r1, #0
   250ac:	0a000037 	beq	25190 <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
   250b0:	e1a08000 	mov	r8, r0
   250b4:	e5900004 	ldr	r0, [r0, #4]
   250b8:	e1a07002 	mov	r7, r2
   250bc:	e3500000 	cmp	r0, #0
   250c0:	1a000017 	bne	25124 <CDeviceNameService::RemoveDevice(char const*, bool)+0x80>
   250c4:	e5984000 	ldr	r4, [r8]
   250c8:	e3540000 	cmp	r4, #0
   250cc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   250d0:	e3a06000 	mov	r6, #0
   250d4:	ea00000b 	b	25108 <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
   250d8:	e1a00005 	mov	r0, r5
   250dc:	eb0013e2 	bl	2a06c <strcmp>
   250e0:	e3500000 	cmp	r0, #0
   250e4:	1a000002 	bne	250f4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x50>
   250e8:	e5d4300c 	ldrb	r3, [r4, #12]
   250ec:	e1530007 	cmp	r3, r7
   250f0:	0a000014 	beq	25148 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa4>
   250f4:	e5943000 	ldr	r3, [r4]
   250f8:	e1a06004 	mov	r6, r4
   250fc:	e3530000 	cmp	r3, #0
   25100:	0a00000b 	beq	25134 <CDeviceNameService::RemoveDevice(char const*, bool)+0x90>
   25104:	e1a04003 	mov	r4, r3
   25108:	e5941004 	ldr	r1, [r4, #4]
   2510c:	e3510000 	cmp	r1, #0
   25110:	1afffff0 	bne	250d8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
   25114:	e3a0205e 	mov	r2, #94	; 0x5e
   25118:	e59f1088 	ldr	r1, [pc, #136]	; 251a8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x104>
   2511c:	e59f0088 	ldr	r0, [pc, #136]	; 251ac <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
   25120:	ebfffda0 	bl	247a8 <assertion_failed>
   25124:	eb001ad4 	bl	2bc7c <EnterCritical>
   25128:	e5984000 	ldr	r4, [r8]
   2512c:	e3540000 	cmp	r4, #0
   25130:	1affffe6 	bne	250d0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
   25134:	e5983004 	ldr	r3, [r8, #4]
   25138:	e3530000 	cmp	r3, #0
   2513c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25140:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25144:	ea001af6 	b	2bd24 <LeaveCritical>
   25148:	e3560000 	cmp	r6, #0
   2514c:	0a00000c 	beq	25184 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe0>
   25150:	e5943000 	ldr	r3, [r4]
   25154:	e5863000 	str	r3, [r6]
   25158:	e5983004 	ldr	r3, [r8, #4]
   2515c:	e3530000 	cmp	r3, #0
   25160:	1a00000e 	bne	251a0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xfc>
   25164:	e5940004 	ldr	r0, [r4, #4]
   25168:	e3500000 	cmp	r0, #0
   2516c:	0a000000 	beq	25174 <CDeviceNameService::RemoveDevice(char const*, bool)+0xd0>
   25170:	eb0017a1 	bl	2affc <operator delete[](void*)>
   25174:	e1a00004 	mov	r0, r4
   25178:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2517c:	e3a01010 	mov	r1, #16
   25180:	ea00179e 	b	2b000 <operator delete(void*, unsigned int)>
   25184:	e5943000 	ldr	r3, [r4]
   25188:	e5883000 	str	r3, [r8]
   2518c:	eafffff1 	b	25158 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb4>
   25190:	e3a02056 	mov	r2, #86	; 0x56
   25194:	e59f100c 	ldr	r1, [pc, #12]	; 251a8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x104>
   25198:	e59f0010 	ldr	r0, [pc, #16]	; 251b0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x10c>
   2519c:	ebfffd81 	bl	247a8 <assertion_failed>
   251a0:	eb001adf 	bl	2bd24 <LeaveCritical>
   251a4:	eaffffee 	b	25164 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
   251a8:	00046a34 	.word	0x00046a34
   251ac:	00046a68 	.word	0x00046a68
   251b0:	00041708 	.word	0x00041708

000251b4 <CDeviceNameService::GetDevice(char const*, bool)>:
   251b4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   251b8:	e2515000 	subs	r5, r1, #0
   251bc:	e24dd00c 	sub	sp, sp, #12
   251c0:	0a000024 	beq	25258 <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
   251c4:	e1a07000 	mov	r7, r0
   251c8:	e5900004 	ldr	r0, [r0, #4]
   251cc:	e1a06002 	mov	r6, r2
   251d0:	e3500000 	cmp	r0, #0
   251d4:	1a000014 	bne	2522c <CDeviceNameService::GetDevice(char const*, bool)+0x78>
   251d8:	e5974000 	ldr	r4, [r7]
   251dc:	e3540000 	cmp	r4, #0
   251e0:	1a00000a 	bne	25210 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   251e4:	ea000018 	b	2524c <CDeviceNameService::GetDevice(char const*, bool)+0x98>
   251e8:	e1a00005 	mov	r0, r5
   251ec:	eb00139e 	bl	2a06c <strcmp>
   251f0:	e3500000 	cmp	r0, #0
   251f4:	1a000002 	bne	25204 <CDeviceNameService::GetDevice(char const*, bool)+0x50>
   251f8:	e5d4300c 	ldrb	r3, [r4, #12]
   251fc:	e1530006 	cmp	r3, r6
   25200:	0a000018 	beq	25268 <CDeviceNameService::GetDevice(char const*, bool)+0xb4>
   25204:	e5944000 	ldr	r4, [r4]
   25208:	e3540000 	cmp	r4, #0
   2520c:	0a00000a 	beq	2523c <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   25210:	e5941004 	ldr	r1, [r4, #4]
   25214:	e3510000 	cmp	r1, #0
   25218:	1afffff2 	bne	251e8 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
   2521c:	e3a02092 	mov	r2, #146	; 0x92
   25220:	e59f1078 	ldr	r1, [pc, #120]	; 252a0 <CDeviceNameService::GetDevice(char const*, bool)+0xec>
   25224:	e59f0078 	ldr	r0, [pc, #120]	; 252a4 <CDeviceNameService::GetDevice(char const*, bool)+0xf0>
   25228:	ebfffd5e 	bl	247a8 <assertion_failed>
   2522c:	eb001a92 	bl	2bc7c <EnterCritical>
   25230:	e5974000 	ldr	r4, [r7]
   25234:	e3540000 	cmp	r4, #0
   25238:	1afffff4 	bne	25210 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   2523c:	e5973004 	ldr	r3, [r7, #4]
   25240:	e3530000 	cmp	r3, #0
   25244:	0a000000 	beq	2524c <CDeviceNameService::GetDevice(char const*, bool)+0x98>
   25248:	eb001ab5 	bl	2bd24 <LeaveCritical>
   2524c:	e3a00000 	mov	r0, #0
   25250:	e28dd00c 	add	sp, sp, #12
   25254:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   25258:	e3a0208b 	mov	r2, #139	; 0x8b
   2525c:	e59f103c 	ldr	r1, [pc, #60]	; 252a0 <CDeviceNameService::GetDevice(char const*, bool)+0xec>
   25260:	e59f0040 	ldr	r0, [pc, #64]	; 252a8 <CDeviceNameService::GetDevice(char const*, bool)+0xf4>
   25264:	ebfffd4f 	bl	247a8 <assertion_failed>
   25268:	e5973004 	ldr	r3, [r7, #4]
   2526c:	e5940008 	ldr	r0, [r4, #8]
   25270:	e3530000 	cmp	r3, #0
   25274:	1a000005 	bne	25290 <CDeviceNameService::GetDevice(char const*, bool)+0xdc>
   25278:	e3500000 	cmp	r0, #0
   2527c:	1afffff3 	bne	25250 <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
   25280:	e3a0209a 	mov	r2, #154	; 0x9a
   25284:	e59f1014 	ldr	r1, [pc, #20]	; 252a0 <CDeviceNameService::GetDevice(char const*, bool)+0xec>
   25288:	e59f001c 	ldr	r0, [pc, #28]	; 252ac <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   2528c:	ebfffd45 	bl	247a8 <assertion_failed>
   25290:	e58d0004 	str	r0, [sp, #4]
   25294:	eb001aa2 	bl	2bd24 <LeaveCritical>
   25298:	e59d0004 	ldr	r0, [sp, #4]
   2529c:	eafffff5 	b	25278 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
   252a0:	00046a34 	.word	0x00046a34
   252a4:	00046a68 	.word	0x00046a68
   252a8:	00041708 	.word	0x00041708
   252ac:	00046a7c 	.word	0x00046a7c

000252b0 <CDeviceNameService::Get()>:
   252b0:	e59f301c 	ldr	r3, [pc, #28]	; 252d4 <CDeviceNameService::Get()+0x24>
   252b4:	e5930000 	ldr	r0, [r3]
   252b8:	e3500000 	cmp	r0, #0
   252bc:	112fff1e 	bxne	lr
   252c0:	e3a020cc 	mov	r2, #204	; 0xcc
   252c4:	e92d4010 	push	{r4, lr}
   252c8:	e59f1008 	ldr	r1, [pc, #8]	; 252d8 <CDeviceNameService::Get()+0x28>
   252cc:	e59f0008 	ldr	r0, [pc, #8]	; 252dc <CDeviceNameService::Get()+0x2c>
   252d0:	ebfffd34 	bl	247a8 <assertion_failed>
   252d4:	0005ce28 	.word	0x0005ce28
   252d8:	00046a34 	.word	0x00046a34
   252dc:	00046a8c 	.word	0x00046a8c

000252e0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   252e0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   252e4:	e1a06001 	mov	r6, r1
   252e8:	e24dd01c 	sub	sp, sp, #28
   252ec:	e1a04000 	mov	r4, r0
   252f0:	e28d0008 	add	r0, sp, #8
   252f4:	e1a05003 	mov	r5, r3
   252f8:	e5dd7030 	ldrb	r7, [sp, #48]	; 0x30
   252fc:	e58d2004 	str	r2, [sp, #4]
   25300:	eb000a01 	bl	27b0c <CString::CString()>
   25304:	e1a02006 	mov	r2, r6
   25308:	e59d3004 	ldr	r3, [sp, #4]
   2530c:	e59f1030 	ldr	r1, [pc, #48]	; 25344 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
   25310:	e28d0008 	add	r0, sp, #8
   25314:	eb000f46 	bl	29034 <CString::Format(char const*, ...)>
   25318:	e28d0008 	add	r0, sp, #8
   2531c:	eb000a12 	bl	27b6c <CString::operator char const*() const>
   25320:	e1a03007 	mov	r3, r7
   25324:	e1a01000 	mov	r1, r0
   25328:	e1a02005 	mov	r2, r5
   2532c:	e1a00004 	mov	r0, r4
   25330:	ebffff2e 	bl	24ff0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   25334:	e28d0008 	add	r0, sp, #8
   25338:	eb0009c0 	bl	27a40 <CString::~CString()>
   2533c:	e28dd01c 	add	sp, sp, #28
   25340:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   25344:	00046a98 	.word	0x00046a98

00025348 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   25348:	e92d4070 	push	{r4, r5, r6, lr}
   2534c:	e1a06001 	mov	r6, r1
   25350:	e24dd018 	sub	sp, sp, #24
   25354:	e1a04000 	mov	r4, r0
   25358:	e28d0008 	add	r0, sp, #8
   2535c:	e1a05003 	mov	r5, r3
   25360:	e58d2004 	str	r2, [sp, #4]
   25364:	eb0009e8 	bl	27b0c <CString::CString()>
   25368:	e59d3004 	ldr	r3, [sp, #4]
   2536c:	e1a02006 	mov	r2, r6
   25370:	e59f102c 	ldr	r1, [pc, #44]	; 253a4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
   25374:	e28d0008 	add	r0, sp, #8
   25378:	eb000f2d 	bl	29034 <CString::Format(char const*, ...)>
   2537c:	e28d0008 	add	r0, sp, #8
   25380:	eb0009f9 	bl	27b6c <CString::operator char const*() const>
   25384:	e1a02005 	mov	r2, r5
   25388:	e1a01000 	mov	r1, r0
   2538c:	e1a00004 	mov	r0, r4
   25390:	ebffff43 	bl	250a4 <CDeviceNameService::RemoveDevice(char const*, bool)>
   25394:	e28d0008 	add	r0, sp, #8
   25398:	eb0009a8 	bl	27a40 <CString::~CString()>
   2539c:	e28dd018 	add	sp, sp, #24
   253a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   253a4:	00046a98 	.word	0x00046a98

000253a8 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   253a8:	e92d4070 	push	{r4, r5, r6, lr}
   253ac:	e1a06001 	mov	r6, r1
   253b0:	e24dd018 	sub	sp, sp, #24
   253b4:	e1a04000 	mov	r4, r0
   253b8:	e28d0008 	add	r0, sp, #8
   253bc:	e1a05003 	mov	r5, r3
   253c0:	e58d2004 	str	r2, [sp, #4]
   253c4:	eb0009d0 	bl	27b0c <CString::CString()>
   253c8:	e59d3004 	ldr	r3, [sp, #4]
   253cc:	e1a02006 	mov	r2, r6
   253d0:	e59f1034 	ldr	r1, [pc, #52]	; 2540c <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
   253d4:	e28d0008 	add	r0, sp, #8
   253d8:	eb000f15 	bl	29034 <CString::Format(char const*, ...)>
   253dc:	e28d0008 	add	r0, sp, #8
   253e0:	eb0009e1 	bl	27b6c <CString::operator char const*() const>
   253e4:	e1a02005 	mov	r2, r5
   253e8:	e1a01000 	mov	r1, r0
   253ec:	e1a00004 	mov	r0, r4
   253f0:	ebffff6f 	bl	251b4 <CDeviceNameService::GetDevice(char const*, bool)>
   253f4:	e1a04000 	mov	r4, r0
   253f8:	e28d0008 	add	r0, sp, #8
   253fc:	eb00098f 	bl	27a40 <CString::~CString()>
   25400:	e1a00004 	mov	r0, r4
   25404:	e28dd018 	add	sp, sp, #24
   25408:	e8bd8070 	pop	{r4, r5, r6, pc}
   2540c:	00046a98 	.word	0x00046a98

00025410 <CDeviceNameService::ListDevices(CDevice*)>:
   25410:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   25414:	e2516000 	subs	r6, r1, #0
   25418:	e24dd024 	sub	sp, sp, #36	; 0x24
   2541c:	0a000035 	beq	254f8 <CDeviceNameService::ListDevices(CDevice*)+0xe8>
   25420:	e5904000 	ldr	r4, [r0]
   25424:	e3540000 	cmp	r4, #0
   25428:	0a000030 	beq	254f0 <CDeviceNameService::ListDevices(CDevice*)+0xe0>
   2542c:	e3a05000 	mov	r5, #0
   25430:	e59f70d0 	ldr	r7, [pc, #208]	; 25508 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
   25434:	ea00001c 	b	254ac <CDeviceNameService::ListDevices(CDevice*)+0x9c>
   25438:	e5d4200c 	ldrb	r2, [r4, #12]
   2543c:	e2855001 	add	r5, r5, #1
   25440:	e3520000 	cmp	r2, #0
   25444:	13a02062 	movne	r2, #98	; 0x62
   25448:	03a02063 	moveq	r2, #99	; 0x63
   2544c:	e2158003 	ands	r8, r5, #3
   25450:	03a0100a 	moveq	r1, #10
   25454:	13a01020 	movne	r1, #32
   25458:	e28d0010 	add	r0, sp, #16
   2545c:	e58d1000 	str	r1, [sp]
   25460:	e1a01007 	mov	r1, r7
   25464:	eb000ef2 	bl	29034 <CString::Format(char const*, ...)>
   25468:	e5963000 	ldr	r3, [r6]
   2546c:	e28d0010 	add	r0, sp, #16
   25470:	e593900c 	ldr	r9, [r3, #12]
   25474:	eb0009bc 	bl	27b6c <CString::operator char const*() const>
   25478:	e1a01000 	mov	r1, r0
   2547c:	e28d0010 	add	r0, sp, #16
   25480:	e58d100c 	str	r1, [sp, #12]
   25484:	eb0009ea 	bl	27c34 <CString::GetLength() const>
   25488:	e59d100c 	ldr	r1, [sp, #12]
   2548c:	e1a02000 	mov	r2, r0
   25490:	e1a00006 	mov	r0, r6
   25494:	e12fff39 	blx	r9
   25498:	e5944000 	ldr	r4, [r4]
   2549c:	e28d0010 	add	r0, sp, #16
   254a0:	eb000966 	bl	27a40 <CString::~CString()>
   254a4:	e3540000 	cmp	r4, #0
   254a8:	0a000008 	beq	254d0 <CDeviceNameService::ListDevices(CDevice*)+0xc0>
   254ac:	e28d0010 	add	r0, sp, #16
   254b0:	eb000995 	bl	27b0c <CString::CString()>
   254b4:	e5943004 	ldr	r3, [r4, #4]
   254b8:	e3530000 	cmp	r3, #0
   254bc:	1affffdd 	bne	25438 <CDeviceNameService::ListDevices(CDevice*)+0x28>
   254c0:	e3a020b9 	mov	r2, #185	; 0xb9
   254c4:	e59f1040 	ldr	r1, [pc, #64]	; 2550c <CDeviceNameService::ListDevices(CDevice*)+0xfc>
   254c8:	e59f0040 	ldr	r0, [pc, #64]	; 25510 <CDeviceNameService::ListDevices(CDevice*)+0x100>
   254cc:	ebfffcb5 	bl	247a8 <assertion_failed>
   254d0:	e3580000 	cmp	r8, #0
   254d4:	0a000005 	beq	254f0 <CDeviceNameService::ListDevices(CDevice*)+0xe0>
   254d8:	e5963000 	ldr	r3, [r6]
   254dc:	e1a00006 	mov	r0, r6
   254e0:	e3a02001 	mov	r2, #1
   254e4:	e593300c 	ldr	r3, [r3, #12]
   254e8:	e59f1024 	ldr	r1, [pc, #36]	; 25514 <CDeviceNameService::ListDevices(CDevice*)+0x104>
   254ec:	e12fff33 	blx	r3
   254f0:	e28dd024 	add	sp, sp, #36	; 0x24
   254f4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   254f8:	e3a020b0 	mov	r2, #176	; 0xb0
   254fc:	e59f1008 	ldr	r1, [pc, #8]	; 2550c <CDeviceNameService::ListDevices(CDevice*)+0xfc>
   25500:	e59f0010 	ldr	r0, [pc, #16]	; 25518 <CDeviceNameService::ListDevices(CDevice*)+0x108>
   25504:	ebfffca7 	bl	247a8 <assertion_failed>
   25508:	00046ab0 	.word	0x00046ab0
   2550c:	00046a34 	.word	0x00046a34
   25510:	00046a68 	.word	0x00046a68
   25514:	000491cc 	.word	0x000491cc
   25518:	00046aa0 	.word	0x00046aa0

0002551c <CGPIOPin::CGPIOPin()>:
   2551c:	e3a01000 	mov	r1, #0
   25520:	e3a02006 	mov	r2, #6
   25524:	e92d4010 	push	{r4, lr}
   25528:	e3a0c00a 	mov	ip, #10
   2552c:	e3a04036 	mov	r4, #54	; 0x36
   25530:	e59fe01c 	ldr	lr, [pc, #28]	; 25554 <CGPIOPin::CGPIOPin()+0x38>
   25534:	e5804004 	str	r4, [r0, #4]
   25538:	e580e000 	str	lr, [r0]
   2553c:	e5c0c010 	strb	ip, [r0, #16]
   25540:	e5801018 	str	r1, [r0, #24]
   25544:	e580101c 	str	r1, [r0, #28]
   25548:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   2554c:	e5c02026 	strb	r2, [r0, #38]	; 0x26
   25550:	e8bd8010 	pop	{r4, pc}
   25554:	00046ac4 	.word	0x00046ac4

00025558 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   25558:	e92d4070 	push	{r4, r5, r6, lr}
   2555c:	e3a0c000 	mov	ip, #0
   25560:	e3a0e00a 	mov	lr, #10
   25564:	e1a05002 	mov	r5, r2
   25568:	e3a06036 	mov	r6, #54	; 0x36
   2556c:	e3a02006 	mov	r2, #6
   25570:	e1a04000 	mov	r4, r0
   25574:	e5803018 	str	r3, [r0, #24]
   25578:	e59f302c 	ldr	r3, [pc, #44]	; 255ac <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
   2557c:	e5c0e010 	strb	lr, [r0, #16]
   25580:	e8800048 	stm	r0, {r3, r6}
   25584:	e580c01c 	str	ip, [r0, #28]
   25588:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   2558c:	e5c02026 	strb	r2, [r0, #38]	; 0x26
   25590:	eb00000d 	bl	255cc <CGPIOPin::AssignPin(unsigned int)>
   25594:	e1a00004 	mov	r0, r4
   25598:	e1a01005 	mov	r1, r5
   2559c:	e3a02001 	mov	r2, #1
   255a0:	eb00002a 	bl	25650 <CGPIOPin::SetMode(TGPIOMode, bool)>
   255a4:	e1a00004 	mov	r0, r4
   255a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   255ac:	00046ac4 	.word	0x00046ac4

000255b0 <CGPIOPin::~CGPIOPin()>:
   255b0:	e12fff1e 	bx	lr

000255b4 <CGPIOPin::~CGPIOPin()>:
   255b4:	e92d4010 	push	{r4, lr}
   255b8:	e1a04000 	mov	r4, r0
   255bc:	e3a01028 	mov	r1, #40	; 0x28
   255c0:	eb00168e 	bl	2b000 <operator delete(void*, unsigned int)>
   255c4:	e1a00004 	mov	r0, r4
   255c8:	e8bd8010 	pop	{r4, pc}

000255cc <CGPIOPin::AssignPin(unsigned int)>:
   255cc:	e5903004 	ldr	r3, [r0, #4]
   255d0:	e92d4070 	push	{r4, r5, r6, lr}
   255d4:	e3530036 	cmp	r3, #54	; 0x36
   255d8:	1a000017 	bne	2563c <CGPIOPin::AssignPin(unsigned int)+0x70>
   255dc:	e3510035 	cmp	r1, #53	; 0x35
   255e0:	e1a05000 	mov	r5, r0
   255e4:	e1a04001 	mov	r4, r1
   255e8:	e5801004 	str	r1, [r0, #4]
   255ec:	8a000007 	bhi	25610 <CGPIOPin::AssignPin(unsigned int)+0x44>
   255f0:	e3a03001 	mov	r3, #1
   255f4:	e204201f 	and	r2, r4, #31
   255f8:	e1a042a4 	lsr	r4, r4, #5
   255fc:	e1a03213 	lsl	r3, r3, r2
   25600:	e1a04104 	lsl	r4, r4, #2
   25604:	e585300c 	str	r3, [r5, #12]
   25608:	e5854008 	str	r4, [r5, #8]
   2560c:	e8bd8070 	pop	{r4, r5, r6, pc}
   25610:	eb000851 	bl	2775c <CMachineInfo::Get()>
   25614:	e6ef1074 	uxtb	r1, r4
   25618:	eb0007b4 	bl	274f0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   2561c:	e3500035 	cmp	r0, #53	; 0x35
   25620:	e1a04000 	mov	r4, r0
   25624:	e5850004 	str	r0, [r5, #4]
   25628:	9afffff0 	bls	255f0 <CGPIOPin::AssignPin(unsigned int)+0x24>
   2562c:	e59f1018 	ldr	r1, [pc, #24]	; 2564c <CGPIOPin::AssignPin(unsigned int)+0x80>
   25630:	e3a02047 	mov	r2, #71	; 0x47
   25634:	e2810020 	add	r0, r1, #32
   25638:	ebfffc5a 	bl	247a8 <assertion_failed>
   2563c:	e59f1008 	ldr	r1, [pc, #8]	; 2564c <CGPIOPin::AssignPin(unsigned int)+0x80>
   25640:	e3a02040 	mov	r2, #64	; 0x40
   25644:	e281000c 	add	r0, r1, #12
   25648:	ebfffc56 	bl	247a8 <assertion_failed>
   2564c:	00046acc 	.word	0x00046acc

00025650 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   25650:	e3510009 	cmp	r1, #9
   25654:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25658:	8a000058 	bhi	257c0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x170>
   2565c:	e1a06002 	mov	r6, r2
   25660:	e1a04000 	mov	r4, r0
   25664:	e3a02000 	mov	r2, #0
   25668:	e5c01010 	strb	r1, [r0, #16]
   2566c:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   25670:	e5d03010 	ldrb	r3, [r0, #16]
   25674:	e2431004 	sub	r1, r3, #4
   25678:	e6efc071 	uxtb	ip, r1
   2567c:	e35c0005 	cmp	ip, #5
   25680:	9a000030 	bls	25748 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf8>
   25684:	e3530001 	cmp	r3, #1
   25688:	13a03000 	movne	r3, #0
   2568c:	02063001 	andeq	r3, r6, #1
   25690:	e3530000 	cmp	r3, #0
   25694:	1a00004d 	bne	257d0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x180>
   25698:	e5943004 	ldr	r3, [r4, #4]
   2569c:	e3530035 	cmp	r3, #53	; 0x35
   256a0:	8a00004d 	bhi	257dc <CGPIOPin::SetMode(TGPIOMode, bool)+0x18c>
   256a4:	e59f5140 	ldr	r5, [pc, #320]	; 257ec <CGPIOPin::SetMode(TGPIOMode, bool)+0x19c>
   256a8:	e59f7140 	ldr	r7, [pc, #320]	; 257f0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a0>
   256ac:	e0852395 	umull	r2, r5, r5, r3
   256b0:	e5970000 	ldr	r0, [r7]
   256b4:	e1a051a5 	lsr	r5, r5, #3
   256b8:	e2852302 	add	r2, r5, #134217728	; 0x8000000
   256bc:	e0855105 	add	r5, r5, r5, lsl #2
   256c0:	e2822702 	add	r2, r2, #524288	; 0x80000
   256c4:	e0435085 	sub	r5, r3, r5, lsl #1
   256c8:	e3500000 	cmp	r0, #0
   256cc:	e1a08102 	lsl	r8, r2, #2
   256d0:	e0855085 	add	r5, r5, r5, lsl #1
   256d4:	1a000026 	bne	25774 <CGPIOPin::SetMode(TGPIOMode, bool)+0x124>
   256d8:	e5d42010 	ldrb	r2, [r4, #16]
   256dc:	e3a01007 	mov	r1, #7
   256e0:	e2422001 	sub	r2, r2, #1
   256e4:	e16f2f12 	clz	r2, r2
   256e8:	e5983000 	ldr	r3, [r8]
   256ec:	e1a022a2 	lsr	r2, r2, #5
   256f0:	e1c33511 	bic	r3, r3, r1, lsl r5
   256f4:	e1835512 	orr	r5, r3, r2, lsl r5
   256f8:	e5885000 	str	r5, [r8]
   256fc:	e5973000 	ldr	r3, [r7]
   25700:	e3530000 	cmp	r3, #0
   25704:	1a000016 	bne	25764 <CGPIOPin::SetMode(TGPIOMode, bool)+0x114>
   25708:	e3560000 	cmp	r6, #0
   2570c:	0a00000a 	beq	2573c <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   25710:	e5d43010 	ldrb	r3, [r4, #16]
   25714:	e3530003 	cmp	r3, #3
   25718:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2571c:	ea000006 	b	2573c <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   25720:	0002579c 	.word	0x0002579c
   25724:	0002578c 	.word	0x0002578c
   25728:	0002577c 	.word	0x0002577c
   2572c:	00025730 	.word	0x00025730
   25730:	e1a00004 	mov	r0, r4
   25734:	e3a01001 	mov	r1, #1
   25738:	eb0001e1 	bl	25ec4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2573c:	e3a03000 	mov	r3, #0
   25740:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25744:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25748:	e1560002 	cmp	r6, r2
   2574c:	1a000016 	bne	257ac <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
   25750:	e1a00004 	mov	r0, r4
   25754:	eb000202 	bl	25f64 <CGPIOPin::SetAlternateFunction(unsigned int)>
   25758:	e3a03000 	mov	r3, #0
   2575c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25760:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25764:	eb00196e 	bl	2bd24 <LeaveCritical>
   25768:	e3560000 	cmp	r6, #0
   2576c:	0afffff2 	beq	2573c <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   25770:	eaffffe6 	b	25710 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc0>
   25774:	eb001940 	bl	2bc7c <EnterCritical>
   25778:	eaffffd6 	b	256d8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x88>
   2577c:	e1a00004 	mov	r0, r4
   25780:	e3a01002 	mov	r1, #2
   25784:	eb0001ce 	bl	25ec4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25788:	eaffffeb 	b	2573c <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   2578c:	e1a00004 	mov	r0, r4
   25790:	e3a01000 	mov	r1, #0
   25794:	eb000017 	bl	257f8 <CGPIOPin::Write(unsigned int)>
   25798:	eaffffe7 	b	2573c <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   2579c:	e1a00004 	mov	r0, r4
   257a0:	e3a01000 	mov	r1, #0
   257a4:	eb0001c6 	bl	25ec4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   257a8:	eaffffe3 	b	2573c <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   257ac:	e1a01002 	mov	r1, r2
   257b0:	eb0001c3 	bl	25ec4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   257b4:	e5d43010 	ldrb	r3, [r4, #16]
   257b8:	e2431004 	sub	r1, r3, #4
   257bc:	eaffffe3 	b	25750 <CGPIOPin::SetMode(TGPIOMode, bool)+0x100>
   257c0:	e59f102c 	ldr	r1, [pc, #44]	; 257f4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
   257c4:	e3a0204f 	mov	r2, #79	; 0x4f
   257c8:	e2810034 	add	r0, r1, #52	; 0x34
   257cc:	ebfffbf5 	bl	247a8 <assertion_failed>
   257d0:	e1a01002 	mov	r1, r2
   257d4:	eb0001ba 	bl	25ec4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   257d8:	eaffffae 	b	25698 <CGPIOPin::SetMode(TGPIOMode, bool)+0x48>
   257dc:	e59f1010 	ldr	r1, [pc, #16]	; 257f4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
   257e0:	e3a02068 	mov	r2, #104	; 0x68
   257e4:	e2810020 	add	r0, r1, #32
   257e8:	ebfffbee 	bl	247a8 <assertion_failed>
   257ec:	cccccccd 	.word	0xcccccccd
   257f0:	0005ce2c 	.word	0x0005ce2c
   257f4:	00046acc 	.word	0x00046acc

000257f8 <CGPIOPin::Write(unsigned int)>:
   257f8:	e5903004 	ldr	r3, [r0, #4]
   257fc:	e92d4010 	push	{r4, lr}
   25800:	e3530035 	cmp	r3, #53	; 0x35
   25804:	8a000011 	bhi	25850 <CGPIOPin::Write(unsigned int)+0x58>
   25808:	e5d03010 	ldrb	r3, [r0, #16]
   2580c:	e3530003 	cmp	r3, #3
   25810:	8a000012 	bhi	25860 <CGPIOPin::Write(unsigned int)+0x68>
   25814:	e3a02000 	mov	r2, #0
   25818:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   2581c:	e3510001 	cmp	r1, #1
   25820:	8a000012 	bhi	25870 <CGPIOPin::Write(unsigned int)+0x78>
   25824:	e59f3054 	ldr	r3, [pc, #84]	; 25880 <CGPIOPin::Write(unsigned int)+0x88>
   25828:	e59fc054 	ldr	ip, [pc, #84]	; 25884 <CGPIOPin::Write(unsigned int)+0x8c>
   2582c:	e3510000 	cmp	r1, #0
   25830:	e5801014 	str	r1, [r0, #20]
   25834:	11a01003 	movne	r1, r3
   25838:	01a0100c 	moveq	r1, ip
   2583c:	e5903008 	ldr	r3, [r0, #8]
   25840:	e590c00c 	ldr	ip, [r0, #12]
   25844:	e781c003 	str	ip, [r1, r3]
   25848:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   2584c:	e8bd8010 	pop	{r4, pc}
   25850:	e59f1030 	ldr	r1, [pc, #48]	; 25888 <CGPIOPin::Write(unsigned int)+0x90>
   25854:	e3a02091 	mov	r2, #145	; 0x91
   25858:	e2810020 	add	r0, r1, #32
   2585c:	ebfffbd1 	bl	247a8 <assertion_failed>
   25860:	e59f1020 	ldr	r1, [pc, #32]	; 25888 <CGPIOPin::Write(unsigned int)+0x90>
   25864:	e3a02094 	mov	r2, #148	; 0x94
   25868:	e281004c 	add	r0, r1, #76	; 0x4c
   2586c:	ebfffbcd 	bl	247a8 <assertion_failed>
   25870:	e59f1010 	ldr	r1, [pc, #16]	; 25888 <CGPIOPin::Write(unsigned int)+0x90>
   25874:	e3a02098 	mov	r2, #152	; 0x98
   25878:	e2810070 	add	r0, r1, #112	; 0x70
   2587c:	ebfffbc9 	bl	247a8 <assertion_failed>
   25880:	2020001c 	.word	0x2020001c
   25884:	20200028 	.word	0x20200028
   25888:	00046acc 	.word	0x00046acc

0002588c <CGPIOPin::Read() const>:
   2588c:	e5903004 	ldr	r3, [r0, #4]
   25890:	e92d4010 	push	{r4, lr}
   25894:	e3530035 	cmp	r3, #53	; 0x35
   25898:	8a00000f 	bhi	258dc <CGPIOPin::Read() const+0x50>
   2589c:	e5d03010 	ldrb	r3, [r0, #16]
   258a0:	e2432002 	sub	r2, r3, #2
   258a4:	e3530000 	cmp	r3, #0
   258a8:	13520001 	cmpne	r2, #1
   258ac:	8a00000e 	bhi	258ec <CGPIOPin::Read() const+0x60>
   258b0:	e3a03000 	mov	r3, #0
   258b4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   258b8:	e59f103c 	ldr	r1, [pc, #60]	; 258fc <CGPIOPin::Read() const+0x70>
   258bc:	e590c008 	ldr	ip, [r0, #8]
   258c0:	e590200c 	ldr	r2, [r0, #12]
   258c4:	e79c1001 	ldr	r1, [ip, r1]
   258c8:	e1110002 	tst	r1, r2
   258cc:	13a00001 	movne	r0, #1
   258d0:	01a00003 	moveq	r0, r3
   258d4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   258d8:	e8bd8010 	pop	{r4, pc}
   258dc:	e59f101c 	ldr	r1, [pc, #28]	; 25900 <CGPIOPin::Read() const+0x74>
   258e0:	e3a020a4 	mov	r2, #164	; 0xa4
   258e4:	e2810020 	add	r0, r1, #32
   258e8:	ebfffbae 	bl	247a8 <assertion_failed>
   258ec:	e59f100c 	ldr	r1, [pc, #12]	; 25900 <CGPIOPin::Read() const+0x74>
   258f0:	e3a020a6 	mov	r2, #166	; 0xa6
   258f4:	e2810090 	add	r0, r1, #144	; 0x90
   258f8:	ebfffbaa 	bl	247a8 <assertion_failed>
   258fc:	20200034 	.word	0x20200034
   25900:	00046acc 	.word	0x00046acc

00025904 <CGPIOPin::Invert()>:
   25904:	e5d02010 	ldrb	r2, [r0, #16]
   25908:	e3520001 	cmp	r2, #1
   2590c:	1a000002 	bne	2591c <CGPIOPin::Invert()+0x18>
   25910:	e5901014 	ldr	r1, [r0, #20]
   25914:	e2211001 	eor	r1, r1, #1
   25918:	eaffffb6 	b	257f8 <CGPIOPin::Write(unsigned int)>
   2591c:	e59f100c 	ldr	r1, [pc, #12]	; 25930 <CGPIOPin::Invert()+0x2c>
   25920:	e3a020b5 	mov	r2, #181	; 0xb5
   25924:	e92d4010 	push	{r4, lr}
   25928:	e28100ec 	add	r0, r1, #236	; 0xec
   2592c:	ebfffb9d 	bl	247a8 <assertion_failed>
   25930:	00046acc 	.word	0x00046acc

00025934 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   25934:	e5d0c010 	ldrb	ip, [r0, #16]
   25938:	e92d4010 	push	{r4, lr}
   2593c:	e24ce002 	sub	lr, ip, #2
   25940:	e35c0000 	cmp	ip, #0
   25944:	135e0001 	cmpne	lr, #1
   25948:	8a000028 	bhi	259f0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
   2594c:	e5d0c025 	ldrb	ip, [r0, #37]	; 0x25
   25950:	e35c0006 	cmp	ip, #6
   25954:	1a000011 	bne	259a0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
   25958:	e5d0c026 	ldrb	ip, [r0, #38]	; 0x26
   2595c:	e35c0006 	cmp	ip, #6
   25960:	1a000012 	bne	259b0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
   25964:	e3510000 	cmp	r1, #0
   25968:	0a000014 	beq	259c0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   2596c:	e590c01c 	ldr	ip, [r0, #28]
   25970:	e35c0000 	cmp	ip, #0
   25974:	1a000015 	bne	259d0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
   25978:	e590c018 	ldr	ip, [r0, #24]
   2597c:	e580101c 	str	r1, [r0, #28]
   25980:	e35c0000 	cmp	ip, #0
   25984:	e5802020 	str	r2, [r0, #32]
   25988:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   2598c:	0a000013 	beq	259e0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
   25990:	e8bd4010 	pop	{r4, lr}
   25994:	e1a01000 	mov	r1, r0
   25998:	e1a0000c 	mov	r0, ip
   2599c:	ea001b75 	b	2c778 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   259a0:	e59f1058 	ldr	r1, [pc, #88]	; 25a00 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   259a4:	e3a020c0 	mov	r2, #192	; 0xc0
   259a8:	e2810f42 	add	r0, r1, #264	; 0x108
   259ac:	ebfffb7d 	bl	247a8 <assertion_failed>
   259b0:	e59f1048 	ldr	r1, [pc, #72]	; 25a00 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   259b4:	e3a020c1 	mov	r2, #193	; 0xc1
   259b8:	e2810f4b 	add	r0, r1, #300	; 0x12c
   259bc:	ebfffb79 	bl	247a8 <assertion_failed>
   259c0:	e59f1038 	ldr	r1, [pc, #56]	; 25a00 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   259c4:	e3a020c3 	mov	r2, #195	; 0xc3
   259c8:	e2810f55 	add	r0, r1, #340	; 0x154
   259cc:	ebfffb75 	bl	247a8 <assertion_failed>
   259d0:	e59f1028 	ldr	r1, [pc, #40]	; 25a00 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   259d4:	e3a020c4 	mov	r2, #196	; 0xc4
   259d8:	e2810f59 	add	r0, r1, #356	; 0x164
   259dc:	ebfffb71 	bl	247a8 <assertion_failed>
   259e0:	e59f1018 	ldr	r1, [pc, #24]	; 25a00 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   259e4:	e3a020cb 	mov	r2, #203	; 0xcb
   259e8:	e2810f5d 	add	r0, r1, #372	; 0x174
   259ec:	ebfffb6d 	bl	247a8 <assertion_failed>
   259f0:	e59f1008 	ldr	r1, [pc, #8]	; 25a00 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   259f4:	e3a020bc 	mov	r2, #188	; 0xbc
   259f8:	e2810090 	add	r0, r1, #144	; 0x90
   259fc:	ebfffb69 	bl	247a8 <assertion_failed>
   25a00:	00046acc 	.word	0x00046acc

00025a04 <CGPIOPin::DisconnectInterrupt()>:
   25a04:	e5d03010 	ldrb	r3, [r0, #16]
   25a08:	e92d4010 	push	{r4, lr}
   25a0c:	e2432002 	sub	r2, r3, #2
   25a10:	e3530000 	cmp	r3, #0
   25a14:	13520001 	cmpne	r2, #1
   25a18:	8a000020 	bhi	25aa0 <CGPIOPin::DisconnectInterrupt()+0x9c>
   25a1c:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25a20:	e1a01000 	mov	r1, r0
   25a24:	e3530006 	cmp	r3, #6
   25a28:	1a00000c 	bne	25a60 <CGPIOPin::DisconnectInterrupt()+0x5c>
   25a2c:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25a30:	e3530006 	cmp	r3, #6
   25a34:	1a00000d 	bne	25a70 <CGPIOPin::DisconnectInterrupt()+0x6c>
   25a38:	e590301c 	ldr	r3, [r0, #28]
   25a3c:	e3530000 	cmp	r3, #0
   25a40:	0a00000e 	beq	25a80 <CGPIOPin::DisconnectInterrupt()+0x7c>
   25a44:	e3a03000 	mov	r3, #0
   25a48:	e5900018 	ldr	r0, [r0, #24]
   25a4c:	e581301c 	str	r3, [r1, #28]
   25a50:	e1500003 	cmp	r0, r3
   25a54:	0a00000d 	beq	25a90 <CGPIOPin::DisconnectInterrupt()+0x8c>
   25a58:	e8bd4010 	pop	{r4, lr}
   25a5c:	ea001b69 	b	2c808 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   25a60:	e59f1048 	ldr	r1, [pc, #72]	; 25ab0 <CGPIOPin::DisconnectInterrupt()+0xac>
   25a64:	e3a020d5 	mov	r2, #213	; 0xd5
   25a68:	e2810f42 	add	r0, r1, #264	; 0x108
   25a6c:	ebfffb4d 	bl	247a8 <assertion_failed>
   25a70:	e59f1038 	ldr	r1, [pc, #56]	; 25ab0 <CGPIOPin::DisconnectInterrupt()+0xac>
   25a74:	e3a020d6 	mov	r2, #214	; 0xd6
   25a78:	e2810f4b 	add	r0, r1, #300	; 0x12c
   25a7c:	ebfffb49 	bl	247a8 <assertion_failed>
   25a80:	e59f1028 	ldr	r1, [pc, #40]	; 25ab0 <CGPIOPin::DisconnectInterrupt()+0xac>
   25a84:	e3a020d8 	mov	r2, #216	; 0xd8
   25a88:	e2810f61 	add	r0, r1, #388	; 0x184
   25a8c:	ebfffb45 	bl	247a8 <assertion_failed>
   25a90:	e59f1018 	ldr	r1, [pc, #24]	; 25ab0 <CGPIOPin::DisconnectInterrupt()+0xac>
   25a94:	e3a020db 	mov	r2, #219	; 0xdb
   25a98:	e2810f5d 	add	r0, r1, #372	; 0x174
   25a9c:	ebfffb41 	bl	247a8 <assertion_failed>
   25aa0:	e59f1008 	ldr	r1, [pc, #8]	; 25ab0 <CGPIOPin::DisconnectInterrupt()+0xac>
   25aa4:	e3a020d1 	mov	r2, #209	; 0xd1
   25aa8:	e2810090 	add	r0, r1, #144	; 0x90
   25aac:	ebfffb3d 	bl	247a8 <assertion_failed>
   25ab0:	00046acc 	.word	0x00046acc

00025ab4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   25ab4:	e5d03010 	ldrb	r3, [r0, #16]
   25ab8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25abc:	e2432002 	sub	r2, r3, #2
   25ac0:	e3530000 	cmp	r3, #0
   25ac4:	13520001 	cmpne	r2, #1
   25ac8:	8a000030 	bhi	25b90 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
   25acc:	e590301c 	ldr	r3, [r0, #28]
   25ad0:	e1a04000 	mov	r4, r0
   25ad4:	e3530000 	cmp	r3, #0
   25ad8:	0a00001c 	beq	25b50 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
   25adc:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25ae0:	e3530006 	cmp	r3, #6
   25ae4:	1a00001d 	bne	25b60 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xac>
   25ae8:	e3510005 	cmp	r1, #5
   25aec:	8a00001f 	bhi	25b70 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xbc>
   25af0:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25af4:	e1530001 	cmp	r3, r1
   25af8:	0a000020 	beq	25b80 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
   25afc:	e59f709c 	ldr	r7, [pc, #156]	; 25ba0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xec>
   25b00:	e5903008 	ldr	r3, [r0, #8]
   25b04:	e5970000 	ldr	r0, [r7]
   25b08:	e59f6094 	ldr	r6, [pc, #148]	; 25ba4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
   25b0c:	e0815081 	add	r5, r1, r1, lsl #1
   25b10:	e3500000 	cmp	r0, #0
   25b14:	e5c41025 	strb	r1, [r4, #37]	; 0x25
   25b18:	e1a05105 	lsl	r5, r5, #2
   25b1c:	e0836006 	add	r6, r3, r6
   25b20:	1a000008 	bne	25b48 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
   25b24:	e594200c 	ldr	r2, [r4, #12]
   25b28:	e7963005 	ldr	r3, [r6, r5]
   25b2c:	e1833002 	orr	r3, r3, r2
   25b30:	e7863005 	str	r3, [r6, r5]
   25b34:	e5973000 	ldr	r3, [r7]
   25b38:	e3530000 	cmp	r3, #0
   25b3c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25b40:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25b44:	ea001876 	b	2bd24 <LeaveCritical>
   25b48:	eb00184b 	bl	2bc7c <EnterCritical>
   25b4c:	eafffff4 	b	25b24 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x70>
   25b50:	e59f1050 	ldr	r1, [pc, #80]	; 25ba8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25b54:	e3a020e4 	mov	r2, #228	; 0xe4
   25b58:	e2810f61 	add	r0, r1, #388	; 0x184
   25b5c:	ebfffb11 	bl	247a8 <assertion_failed>
   25b60:	e59f1040 	ldr	r1, [pc, #64]	; 25ba8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25b64:	e3a020e6 	mov	r2, #230	; 0xe6
   25b68:	e2810f42 	add	r0, r1, #264	; 0x108
   25b6c:	ebfffb0d 	bl	247a8 <assertion_failed>
   25b70:	e59f1030 	ldr	r1, [pc, #48]	; 25ba8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25b74:	e3a020e7 	mov	r2, #231	; 0xe7
   25b78:	e2810f65 	add	r0, r1, #404	; 0x194
   25b7c:	ebfffb09 	bl	247a8 <assertion_failed>
   25b80:	e59f1020 	ldr	r1, [pc, #32]	; 25ba8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25b84:	e3a020e8 	mov	r2, #232	; 0xe8
   25b88:	e2810f6e 	add	r0, r1, #440	; 0x1b8
   25b8c:	ebfffb05 	bl	247a8 <assertion_failed>
   25b90:	e59f1010 	ldr	r1, [pc, #16]	; 25ba8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25b94:	e3a020e1 	mov	r2, #225	; 0xe1
   25b98:	e2810090 	add	r0, r1, #144	; 0x90
   25b9c:	ebfffb01 	bl	247a8 <assertion_failed>
   25ba0:	0005ce2c 	.word	0x0005ce2c
   25ba4:	2020004c 	.word	0x2020004c
   25ba8:	00046acc 	.word	0x00046acc

00025bac <CGPIOPin::DisableInterrupt()>:
   25bac:	e5d03010 	ldrb	r3, [r0, #16]
   25bb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25bb4:	e2432002 	sub	r2, r3, #2
   25bb8:	e3530000 	cmp	r3, #0
   25bbc:	13520001 	cmpne	r2, #1
   25bc0:	8a00001e 	bhi	25c40 <CGPIOPin::DisableInterrupt()+0x94>
   25bc4:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25bc8:	e1a05000 	mov	r5, r0
   25bcc:	e3530005 	cmp	r3, #5
   25bd0:	8a000016 	bhi	25c30 <CGPIOPin::DisableInterrupt()+0x84>
   25bd4:	e59f7074 	ldr	r7, [pc, #116]	; 25c50 <CGPIOPin::DisableInterrupt()+0xa4>
   25bd8:	e5902008 	ldr	r2, [r0, #8]
   25bdc:	e5970000 	ldr	r0, [r7]
   25be0:	e59f606c 	ldr	r6, [pc, #108]	; 25c54 <CGPIOPin::DisableInterrupt()+0xa8>
   25be4:	e0833083 	add	r3, r3, r3, lsl #1
   25be8:	e3500000 	cmp	r0, #0
   25bec:	e1a04103 	lsl	r4, r3, #2
   25bf0:	e0826006 	add	r6, r2, r6
   25bf4:	1a000009 	bne	25c20 <CGPIOPin::DisableInterrupt()+0x74>
   25bf8:	e7963004 	ldr	r3, [r6, r4]
   25bfc:	e595200c 	ldr	r2, [r5, #12]
   25c00:	e1c33002 	bic	r3, r3, r2
   25c04:	e7863004 	str	r3, [r6, r4]
   25c08:	e5973000 	ldr	r3, [r7]
   25c0c:	e3530000 	cmp	r3, #0
   25c10:	1a000004 	bne	25c28 <CGPIOPin::DisableInterrupt()+0x7c>
   25c14:	e3a03006 	mov	r3, #6
   25c18:	e5c53025 	strb	r3, [r5, #37]	; 0x25
   25c1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25c20:	eb001815 	bl	2bc7c <EnterCritical>
   25c24:	eafffff3 	b	25bf8 <CGPIOPin::DisableInterrupt()+0x4c>
   25c28:	eb00183d 	bl	2bd24 <LeaveCritical>
   25c2c:	eafffff8 	b	25c14 <CGPIOPin::DisableInterrupt()+0x68>
   25c30:	e59f1020 	ldr	r1, [pc, #32]	; 25c58 <CGPIOPin::DisableInterrupt()+0xac>
   25c34:	e3a020fb 	mov	r2, #251	; 0xfb
   25c38:	e2810f75 	add	r0, r1, #468	; 0x1d4
   25c3c:	ebfffad9 	bl	247a8 <assertion_failed>
   25c40:	e59f1010 	ldr	r1, [pc, #16]	; 25c58 <CGPIOPin::DisableInterrupt()+0xac>
   25c44:	e3a020f7 	mov	r2, #247	; 0xf7
   25c48:	e2810090 	add	r0, r1, #144	; 0x90
   25c4c:	ebfffad5 	bl	247a8 <assertion_failed>
   25c50:	0005ce2c 	.word	0x0005ce2c
   25c54:	2020004c 	.word	0x2020004c
   25c58:	00046acc 	.word	0x00046acc

00025c5c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   25c5c:	e5d03010 	ldrb	r3, [r0, #16]
   25c60:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25c64:	e2432002 	sub	r2, r3, #2
   25c68:	e3530000 	cmp	r3, #0
   25c6c:	13520001 	cmpne	r2, #1
   25c70:	8a000030 	bhi	25d38 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
   25c74:	e590301c 	ldr	r3, [r0, #28]
   25c78:	e1a04000 	mov	r4, r0
   25c7c:	e3530000 	cmp	r3, #0
   25c80:	0a00001c 	beq	25cf8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
   25c84:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25c88:	e3530006 	cmp	r3, #6
   25c8c:	1a00001d 	bne	25d08 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xac>
   25c90:	e3510005 	cmp	r1, #5
   25c94:	8a00001f 	bhi	25d18 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xbc>
   25c98:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25c9c:	e1530001 	cmp	r3, r1
   25ca0:	0a000020 	beq	25d28 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
   25ca4:	e59f709c 	ldr	r7, [pc, #156]	; 25d48 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xec>
   25ca8:	e5903008 	ldr	r3, [r0, #8]
   25cac:	e5970000 	ldr	r0, [r7]
   25cb0:	e59f6094 	ldr	r6, [pc, #148]	; 25d4c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
   25cb4:	e0815081 	add	r5, r1, r1, lsl #1
   25cb8:	e3500000 	cmp	r0, #0
   25cbc:	e5c41026 	strb	r1, [r4, #38]	; 0x26
   25cc0:	e1a05105 	lsl	r5, r5, #2
   25cc4:	e0836006 	add	r6, r3, r6
   25cc8:	1a000008 	bne	25cf0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
   25ccc:	e594200c 	ldr	r2, [r4, #12]
   25cd0:	e7963005 	ldr	r3, [r6, r5]
   25cd4:	e1833002 	orr	r3, r3, r2
   25cd8:	e7863005 	str	r3, [r6, r5]
   25cdc:	e5973000 	ldr	r3, [r7]
   25ce0:	e3530000 	cmp	r3, #0
   25ce4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25ce8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25cec:	ea00180c 	b	2bd24 <LeaveCritical>
   25cf0:	eb0017e1 	bl	2bc7c <EnterCritical>
   25cf4:	eafffff4 	b	25ccc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x70>
   25cf8:	e59f1050 	ldr	r1, [pc, #80]	; 25d50 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25cfc:	e59f2050 	ldr	r2, [pc, #80]	; 25d54 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
   25d00:	e2810f61 	add	r0, r1, #388	; 0x184
   25d04:	ebfffaa7 	bl	247a8 <assertion_failed>
   25d08:	e59f1040 	ldr	r1, [pc, #64]	; 25d50 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25d0c:	e59f2044 	ldr	r2, [pc, #68]	; 25d58 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
   25d10:	e2810f4b 	add	r0, r1, #300	; 0x12c
   25d14:	ebfffaa3 	bl	247a8 <assertion_failed>
   25d18:	e59f1030 	ldr	r1, [pc, #48]	; 25d50 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25d1c:	e3a02e11 	mov	r2, #272	; 0x110
   25d20:	e2810f65 	add	r0, r1, #404	; 0x194
   25d24:	ebfffa9f 	bl	247a8 <assertion_failed>
   25d28:	e59f1020 	ldr	r1, [pc, #32]	; 25d50 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25d2c:	e59f2028 	ldr	r2, [pc, #40]	; 25d5c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x100>
   25d30:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   25d34:	ebfffa9b 	bl	247a8 <assertion_failed>
   25d38:	e59f1010 	ldr	r1, [pc, #16]	; 25d50 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25d3c:	e59f201c 	ldr	r2, [pc, #28]	; 25d60 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
   25d40:	e2810090 	add	r0, r1, #144	; 0x90
   25d44:	ebfffa97 	bl	247a8 <assertion_failed>
   25d48:	0005ce2c 	.word	0x0005ce2c
   25d4c:	2020004c 	.word	0x2020004c
   25d50:	00046acc 	.word	0x00046acc
   25d54:	0000010d 	.word	0x0000010d
   25d58:	0000010f 	.word	0x0000010f
   25d5c:	00000111 	.word	0x00000111
   25d60:	0000010a 	.word	0x0000010a

00025d64 <CGPIOPin::DisableInterrupt2()>:
   25d64:	e5d03010 	ldrb	r3, [r0, #16]
   25d68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25d6c:	e2432002 	sub	r2, r3, #2
   25d70:	e3530000 	cmp	r3, #0
   25d74:	13520001 	cmpne	r2, #1
   25d78:	8a00001e 	bhi	25df8 <CGPIOPin::DisableInterrupt2()+0x94>
   25d7c:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25d80:	e1a05000 	mov	r5, r0
   25d84:	e3530005 	cmp	r3, #5
   25d88:	8a000016 	bhi	25de8 <CGPIOPin::DisableInterrupt2()+0x84>
   25d8c:	e59f7074 	ldr	r7, [pc, #116]	; 25e08 <CGPIOPin::DisableInterrupt2()+0xa4>
   25d90:	e5902008 	ldr	r2, [r0, #8]
   25d94:	e5970000 	ldr	r0, [r7]
   25d98:	e59f606c 	ldr	r6, [pc, #108]	; 25e0c <CGPIOPin::DisableInterrupt2()+0xa8>
   25d9c:	e0833083 	add	r3, r3, r3, lsl #1
   25da0:	e3500000 	cmp	r0, #0
   25da4:	e1a04103 	lsl	r4, r3, #2
   25da8:	e0826006 	add	r6, r2, r6
   25dac:	1a000009 	bne	25dd8 <CGPIOPin::DisableInterrupt2()+0x74>
   25db0:	e7963004 	ldr	r3, [r6, r4]
   25db4:	e595200c 	ldr	r2, [r5, #12]
   25db8:	e1c33002 	bic	r3, r3, r2
   25dbc:	e7863004 	str	r3, [r6, r4]
   25dc0:	e5973000 	ldr	r3, [r7]
   25dc4:	e3530000 	cmp	r3, #0
   25dc8:	1a000004 	bne	25de0 <CGPIOPin::DisableInterrupt2()+0x7c>
   25dcc:	e3a03006 	mov	r3, #6
   25dd0:	e5c53026 	strb	r3, [r5, #38]	; 0x26
   25dd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25dd8:	eb0017a7 	bl	2bc7c <EnterCritical>
   25ddc:	eafffff3 	b	25db0 <CGPIOPin::DisableInterrupt2()+0x4c>
   25de0:	eb0017cf 	bl	2bd24 <LeaveCritical>
   25de4:	eafffff8 	b	25dcc <CGPIOPin::DisableInterrupt2()+0x68>
   25de8:	e59f1020 	ldr	r1, [pc, #32]	; 25e10 <CGPIOPin::DisableInterrupt2()+0xac>
   25dec:	e3a02f49 	mov	r2, #292	; 0x124
   25df0:	e2810f85 	add	r0, r1, #532	; 0x214
   25df4:	ebfffa6b 	bl	247a8 <assertion_failed>
   25df8:	e59f1010 	ldr	r1, [pc, #16]	; 25e10 <CGPIOPin::DisableInterrupt2()+0xac>
   25dfc:	e3a02e12 	mov	r2, #288	; 0x120
   25e00:	e2810090 	add	r0, r1, #144	; 0x90
   25e04:	ebfffa67 	bl	247a8 <assertion_failed>
   25e08:	0005ce2c 	.word	0x0005ce2c
   25e0c:	2020004c 	.word	0x2020004c
   25e10:	00046acc 	.word	0x00046acc

00025e14 <CGPIOPin::AcknowledgeInterrupt()>:
   25e14:	e590301c 	ldr	r3, [r0, #28]
   25e18:	e92d4010 	push	{r4, lr}
   25e1c:	e3530000 	cmp	r3, #0
   25e20:	0a000009 	beq	25e4c <CGPIOPin::AcknowledgeInterrupt()+0x38>
   25e24:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
   25e28:	e3530000 	cmp	r3, #0
   25e2c:	1a00000a 	bne	25e5c <CGPIOPin::AcknowledgeInterrupt()+0x48>
   25e30:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25e34:	e59f2030 	ldr	r2, [pc, #48]	; 25e6c <CGPIOPin::AcknowledgeInterrupt()+0x58>
   25e38:	e590c00c 	ldr	ip, [r0, #12]
   25e3c:	e5901008 	ldr	r1, [r0, #8]
   25e40:	e781c002 	str	ip, [r1, r2]
   25e44:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25e48:	e8bd8010 	pop	{r4, pc}
   25e4c:	e59f101c 	ldr	r1, [pc, #28]	; 25e70 <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   25e50:	e59f201c 	ldr	r2, [pc, #28]	; 25e74 <CGPIOPin::AcknowledgeInterrupt()+0x60>
   25e54:	e2810f61 	add	r0, r1, #388	; 0x184
   25e58:	ebfffa52 	bl	247a8 <assertion_failed>
   25e5c:	e59f100c 	ldr	r1, [pc, #12]	; 25e70 <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   25e60:	e3a02f4d 	mov	r2, #308	; 0x134
   25e64:	e2810f8e 	add	r0, r1, #568	; 0x238
   25e68:	ebfffa4e 	bl	247a8 <assertion_failed>
   25e6c:	20200040 	.word	0x20200040
   25e70:	00046acc 	.word	0x00046acc
   25e74:	00000133 	.word	0x00000133

00025e78 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   25e78:	e3a03000 	mov	r3, #0
   25e7c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25e80:	e1d13000 	bics	r3, r1, r0
   25e84:	159f2018 	ldrne	r2, [pc, #24]	; 25ea4 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   25e88:	15823028 	strne	r3, [r2, #40]	; 0x28
   25e8c:	e0100001 	ands	r0, r0, r1
   25e90:	159f300c 	ldrne	r3, [pc, #12]	; 25ea4 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   25e94:	1583001c 	strne	r0, [r3, #28]
   25e98:	e3a03000 	mov	r3, #0
   25e9c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25ea0:	e12fff1e 	bx	lr
   25ea4:	20200000 	.word	0x20200000

00025ea8 <CGPIOPin::ReadAll()>:
   25ea8:	e3a03000 	mov	r3, #0
   25eac:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25eb0:	e59f2008 	ldr	r2, [pc, #8]	; 25ec0 <CGPIOPin::ReadAll()+0x18>
   25eb4:	e5920034 	ldr	r0, [r2, #52]	; 0x34
   25eb8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25ebc:	e12fff1e 	bx	lr
   25ec0:	20200000 	.word	0x20200000

00025ec4 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   25ec4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25ec8:	e59f7080 	ldr	r7, [pc, #128]	; 25f50 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x8c>
   25ecc:	e1a04000 	mov	r4, r0
   25ed0:	e5970000 	ldr	r0, [r7]
   25ed4:	e1a05001 	mov	r5, r1
   25ed8:	e3500000 	cmp	r0, #0
   25edc:	1a000015 	bne	25f38 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x74>
   25ee0:	e3a06000 	mov	r6, #0
   25ee4:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   25ee8:	e3550002 	cmp	r5, #2
   25eec:	e5949008 	ldr	r9, [r4, #8]
   25ef0:	e59f805c 	ldr	r8, [pc, #92]	; 25f54 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
   25ef4:	8a000011 	bhi	25f40 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x7c>
   25ef8:	e59fa058 	ldr	sl, [pc, #88]	; 25f58 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x94>
   25efc:	e3a00005 	mov	r0, #5
   25f00:	e58a5094 	str	r5, [sl, #148]	; 0x94
   25f04:	eb000fc6 	bl	29e24 <CTimer::SimpleusDelay(unsigned int)>
   25f08:	e594300c 	ldr	r3, [r4, #12]
   25f0c:	e3a00005 	mov	r0, #5
   25f10:	e7893008 	str	r3, [r9, r8]
   25f14:	eb000fc2 	bl	29e24 <CTimer::SimpleusDelay(unsigned int)>
   25f18:	e58a6094 	str	r6, [sl, #148]	; 0x94
   25f1c:	e7896008 	str	r6, [r9, r8]
   25f20:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   25f24:	e5973000 	ldr	r3, [r7]
   25f28:	e3530000 	cmp	r3, #0
   25f2c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   25f30:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   25f34:	ea00177a 	b	2bd24 <LeaveCritical>
   25f38:	eb00174f 	bl	2bc7c <EnterCritical>
   25f3c:	eaffffe7 	b	25ee0 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x1c>
   25f40:	e59f1014 	ldr	r1, [pc, #20]	; 25f5c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x98>
   25f44:	e59f2014 	ldr	r2, [pc, #20]	; 25f60 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x9c>
   25f48:	e2810f91 	add	r0, r1, #580	; 0x244
   25f4c:	ebfffa15 	bl	247a8 <assertion_failed>
   25f50:	0005ce2c 	.word	0x0005ce2c
   25f54:	20200098 	.word	0x20200098
   25f58:	20200000 	.word	0x20200000
   25f5c:	00046acc 	.word	0x00046acc
   25f60:	00000165 	.word	0x00000165

00025f64 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   25f64:	e5903004 	ldr	r3, [r0, #4]
   25f68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25f6c:	e3530035 	cmp	r3, #53	; 0x35
   25f70:	8a00001e 	bhi	25ff0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
   25f74:	e59f2094 	ldr	r2, [pc, #148]	; 26010 <CGPIOPin::SetAlternateFunction(unsigned int)+0xac>
   25f78:	e1a06001 	mov	r6, r1
   25f7c:	e3510005 	cmp	r1, #5
   25f80:	e0821392 	umull	r1, r2, r2, r3
   25f84:	e1a021a2 	lsr	r2, r2, #3
   25f88:	e2820302 	add	r0, r2, #134217728	; 0x8000000
   25f8c:	e0822102 	add	r2, r2, r2, lsl #2
   25f90:	e2800702 	add	r0, r0, #524288	; 0x80000
   25f94:	e0433082 	sub	r3, r3, r2, lsl #1
   25f98:	e1a05100 	lsl	r5, r0, #2
   25f9c:	e0834083 	add	r4, r3, r3, lsl #1
   25fa0:	8a000016 	bhi	26000 <CGPIOPin::SetAlternateFunction(unsigned int)+0x9c>
   25fa4:	e59f7068 	ldr	r7, [pc, #104]	; 26014 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
   25fa8:	e5970000 	ldr	r0, [r7]
   25fac:	e3500000 	cmp	r0, #0
   25fb0:	1a00000c 	bne	25fe8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
   25fb4:	e3a00007 	mov	r0, #7
   25fb8:	e59f1058 	ldr	r1, [pc, #88]	; 26018 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb4>
   25fbc:	e5953000 	ldr	r3, [r5]
   25fc0:	e0816106 	add	r6, r1, r6, lsl #2
   25fc4:	e5962260 	ldr	r2, [r6, #608]	; 0x260
   25fc8:	e1c33410 	bic	r3, r3, r0, lsl r4
   25fcc:	e1833412 	orr	r3, r3, r2, lsl r4
   25fd0:	e5853000 	str	r3, [r5]
   25fd4:	e5973000 	ldr	r3, [r7]
   25fd8:	e3530000 	cmp	r3, #0
   25fdc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25fe0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25fe4:	ea00174e 	b	2bd24 <LeaveCritical>
   25fe8:	eb001723 	bl	2bc7c <EnterCritical>
   25fec:	eafffff0 	b	25fb4 <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
   25ff0:	e59f1024 	ldr	r1, [pc, #36]	; 2601c <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   25ff4:	e59f2024 	ldr	r2, [pc, #36]	; 26020 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
   25ff8:	e2810020 	add	r0, r1, #32
   25ffc:	ebfff9e9 	bl	247a8 <assertion_failed>
   26000:	e59f1014 	ldr	r1, [pc, #20]	; 2601c <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   26004:	e59f2018 	ldr	r2, [pc, #24]	; 26024 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
   26008:	e2810f9a 	add	r0, r1, #616	; 0x268
   2600c:	ebfff9e5 	bl	247a8 <assertion_failed>
   26010:	cccccccd 	.word	0xcccccccd
   26014:	0005ce2c 	.word	0x0005ce2c
   26018:	00046abc 	.word	0x00046abc
   2601c:	00046acc 	.word	0x00046acc
   26020:	00000181 	.word	0x00000181
   26024:	00000185 	.word	0x00000185

00026028 <CGPIOPin::InterruptHandler()>:
   26028:	e5d03010 	ldrb	r3, [r0, #16]
   2602c:	e92d4010 	push	{r4, lr}
   26030:	e2432002 	sub	r2, r3, #2
   26034:	e3530000 	cmp	r3, #0
   26038:	13520001 	cmpne	r2, #1
   2603c:	8a000013 	bhi	26090 <CGPIOPin::InterruptHandler()+0x68>
   26040:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   26044:	e3530005 	cmp	r3, #5
   26048:	8a000005 	bhi	26064 <CGPIOPin::InterruptHandler()+0x3c>
   2604c:	e590301c 	ldr	r3, [r0, #28]
   26050:	e3530000 	cmp	r3, #0
   26054:	0a000009 	beq	26080 <CGPIOPin::InterruptHandler()+0x58>
   26058:	e8bd4010 	pop	{r4, lr}
   2605c:	e5900020 	ldr	r0, [r0, #32]
   26060:	e12fff13 	bx	r3
   26064:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   26068:	e3530005 	cmp	r3, #5
   2606c:	9afffff6 	bls	2604c <CGPIOPin::InterruptHandler()+0x24>
   26070:	e59f1028 	ldr	r1, [pc, #40]	; 260a0 <CGPIOPin::InterruptHandler()+0x78>
   26074:	e59f2028 	ldr	r2, [pc, #40]	; 260a4 <CGPIOPin::InterruptHandler()+0x7c>
   26078:	e2810f9e 	add	r0, r1, #632	; 0x278
   2607c:	ebfff9c9 	bl	247a8 <assertion_failed>
   26080:	e59f1018 	ldr	r1, [pc, #24]	; 260a0 <CGPIOPin::InterruptHandler()+0x78>
   26084:	e3a02f66 	mov	r2, #408	; 0x198
   26088:	e2810f61 	add	r0, r1, #388	; 0x184
   2608c:	ebfff9c5 	bl	247a8 <assertion_failed>
   26090:	e59f1008 	ldr	r1, [pc, #8]	; 260a0 <CGPIOPin::InterruptHandler()+0x78>
   26094:	e59f200c 	ldr	r2, [pc, #12]	; 260a8 <CGPIOPin::InterruptHandler()+0x80>
   26098:	e2810090 	add	r0, r1, #144	; 0x90
   2609c:	ebfff9c1 	bl	247a8 <assertion_failed>
   260a0:	00046acc 	.word	0x00046acc
   260a4:	00000195 	.word	0x00000195
   260a8:	00000192 	.word	0x00000192

000260ac <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   260ac:	e3500035 	cmp	r0, #53	; 0x35
   260b0:	e92d4070 	push	{r4, r5, r6, lr}
   260b4:	8a000018 	bhi	2611c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
   260b8:	e3a02001 	mov	r2, #1
   260bc:	e59f6068 	ldr	r6, [pc, #104]	; 2612c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x80>
   260c0:	e59f4068 	ldr	r4, [pc, #104]	; 26130 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
   260c4:	e5963000 	ldr	r3, [r6]
   260c8:	e08442a0 	add	r4, r4, r0, lsr #5
   260cc:	e200501f 	and	r5, r0, #31
   260d0:	e3530000 	cmp	r3, #0
   260d4:	e1a04104 	lsl	r4, r4, #2
   260d8:	e1a05512 	lsl	r5, r2, r5
   260dc:	1a00000b 	bne	26110 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>
   260e0:	e1e02005 	mvn	r2, r5
   260e4:	e59f1048 	ldr	r1, [pc, #72]	; 26134 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
   260e8:	e5943000 	ldr	r3, [r4]
   260ec:	e0033002 	and	r3, r3, r2
   260f0:	e484300c 	str	r3, [r4], #12
   260f4:	e1540001 	cmp	r4, r1
   260f8:	9afffffa 	bls	260e8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
   260fc:	e5963000 	ldr	r3, [r6]
   26100:	e3530000 	cmp	r3, #0
   26104:	08bd8070 	popeq	{r4, r5, r6, pc}
   26108:	e8bd4070 	pop	{r4, r5, r6, lr}
   2610c:	ea001704 	b	2bd24 <LeaveCritical>
   26110:	e1a00003 	mov	r0, r3
   26114:	eb0016d8 	bl	2bc7c <EnterCritical>
   26118:	eafffff0 	b	260e0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x34>
   2611c:	e59f1014 	ldr	r1, [pc, #20]	; 26138 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
   26120:	e59f2014 	ldr	r2, [pc, #20]	; 2613c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x90>
   26124:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   26128:	ebfff99e 	bl	247a8 <assertion_failed>
   2612c:	0005ce2c 	.word	0x0005ce2c
   26130:	08080013 	.word	0x08080013
   26134:	2020008b 	.word	0x2020008b
   26138:	00046acc 	.word	0x00046acc
   2613c:	0000019e 	.word	0x0000019e

00026140 <__static_initialization_and_destruction_0(int, int)>:
   26140:	e59f3014 	ldr	r3, [pc, #20]	; 2615c <__static_initialization_and_destruction_0(int, int)+0x1c>
   26144:	e1510003 	cmp	r1, r3
   26148:	03500001 	cmpeq	r0, #1
   2614c:	03a02001 	moveq	r2, #1
   26150:	059f3008 	ldreq	r3, [pc, #8]	; 26160 <__static_initialization_and_destruction_0(int, int)+0x20>
   26154:	05832000 	streq	r2, [r3]
   26158:	e12fff1e 	bx	lr
   2615c:	0000ffff 	.word	0x0000ffff
   26160:	0005ce2c 	.word	0x0005ce2c

00026164 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   26164:	e3a02001 	mov	r2, #1
   26168:	e59f3004 	ldr	r3, [pc, #4]	; 26174 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
   2616c:	e5832000 	str	r2, [r3]
   26170:	e12fff1e 	bx	lr
   26174:	0005ce2c 	.word	0x0005ce2c

00026178 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   26178:	e3a01000 	mov	r1, #0
   2617c:	ea00000a 	b	261ac <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
   26180:	e3520009 	cmp	r2, #9
   26184:	8a000011 	bhi	261d0 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   26188:	e3730001 	cmn	r3, #1
   2618c:	13a02000 	movne	r2, #0
   26190:	03a02001 	moveq	r2, #1
   26194:	e1510003 	cmp	r1, r3
   26198:	91a01002 	movls	r1, r2
   2619c:	83821001 	orrhi	r1, r2, #1
   261a0:	e3510000 	cmp	r1, #0
   261a4:	1a000009 	bne	261d0 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   261a8:	e1a01003 	mov	r1, r3
   261ac:	e0d0c0d1 	ldrsb	ip, [r0], #1
   261b0:	e0813101 	add	r3, r1, r1, lsl #2
   261b4:	e24c2030 	sub	r2, ip, #48	; 0x30
   261b8:	e35c0000 	cmp	ip, #0
   261bc:	e0823083 	add	r3, r2, r3, lsl #1
   261c0:	e6ef2072 	uxtb	r2, r2
   261c4:	1affffed 	bne	26180 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
   261c8:	e1a00001 	mov	r0, r1
   261cc:	e12fff1e 	bx	lr
   261d0:	e3e01000 	mvn	r1, #0
   261d4:	e1a00001 	mov	r0, r1
   261d8:	e12fff1e 	bx	lr

000261dc <CKernelOptions::~CKernelOptions()>:
   261dc:	e3a02000 	mov	r2, #0
   261e0:	e59f3004 	ldr	r3, [pc, #4]	; 261ec <CKernelOptions::~CKernelOptions()+0x10>
   261e4:	e5832000 	str	r2, [r3]
   261e8:	e12fff1e 	bx	lr
   261ec:	0005ce30 	.word	0x0005ce30

000261f0 <CKernelOptions::GetWidth() const>:
   261f0:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
   261f4:	e12fff1e 	bx	lr

000261f8 <CKernelOptions::GetHeight() const>:
   261f8:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
   261fc:	e12fff1e 	bx	lr

00026200 <CKernelOptions::GetLogDevice() const>:
   26200:	e2800e81 	add	r0, r0, #2064	; 0x810
   26204:	e2800008 	add	r0, r0, #8
   26208:	e12fff1e 	bx	lr

0002620c <CKernelOptions::GetLogLevel() const>:
   2620c:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
   26210:	e12fff1e 	bx	lr

00026214 <CKernelOptions::GetKeyMap() const>:
   26214:	e2800e83 	add	r0, r0, #2096	; 0x830
   26218:	e12fff1e 	bx	lr

0002621c <CKernelOptions::GetUSBPowerDelay() const>:
   2621c:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
   26220:	e12fff1e 	bx	lr

00026224 <CKernelOptions::GetUSBFullSpeed() const>:
   26224:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
   26228:	e12fff1e 	bx	lr

0002622c <CKernelOptions::GetSoundDevice() const>:
   2622c:	e2800e83 	add	r0, r0, #2096	; 0x830
   26230:	e2800009 	add	r0, r0, #9
   26234:	e12fff1e 	bx	lr

00026238 <CKernelOptions::GetSoundOption() const>:
   26238:	e5900850 	ldr	r0, [r0, #2128]	; 0x850
   2623c:	e12fff1e 	bx	lr

00026240 <CKernelOptions::GetCPUSpeed() const>:
   26240:	e5d00854 	ldrb	r0, [r0, #2132]	; 0x854
   26244:	e12fff1e 	bx	lr

00026248 <CKernelOptions::GetSoCMaxTemp() const>:
   26248:	e5900858 	ldr	r0, [r0, #2136]	; 0x858
   2624c:	e12fff1e 	bx	lr

00026250 <CKernelOptions::Get()>:
   26250:	e59f3004 	ldr	r3, [pc, #4]	; 2625c <CKernelOptions::Get()+0xc>
   26254:	e5930000 	ldr	r0, [r3]
   26258:	e12fff1e 	bx	lr
   2625c:	0005ce30 	.word	0x0005ce30

00026260 <CKernelOptions::GetToken()>:
   26260:	e1a01000 	mov	r1, r0
   26264:	e590080c 	ldr	r0, [r0, #2060]	; 0x80c
   26268:	e1d030d0 	ldrsb	r3, [r0]
   2626c:	e3530000 	cmp	r3, #0
   26270:	1a000005 	bne	2628c <CKernelOptions::GetToken()+0x2c>
   26274:	ea000017 	b	262d8 <CKernelOptions::GetToken()+0x78>
   26278:	e2800001 	add	r0, r0, #1
   2627c:	e581080c 	str	r0, [r1, #2060]	; 0x80c
   26280:	e1d030d0 	ldrsb	r3, [r0]
   26284:	e3530000 	cmp	r3, #0
   26288:	0a000012 	beq	262d8 <CKernelOptions::GetToken()+0x78>
   2628c:	e3530020 	cmp	r3, #32
   26290:	0afffff8 	beq	26278 <CKernelOptions::GetToken()+0x18>
   26294:	e591380c 	ldr	r3, [r1, #2060]	; 0x80c
   26298:	e1d320d0 	ldrsb	r2, [r3]
   2629c:	e3520000 	cmp	r2, #0
   262a0:	1a000005 	bne	262bc <CKernelOptions::GetToken()+0x5c>
   262a4:	e12fff1e 	bx	lr
   262a8:	e2833001 	add	r3, r3, #1
   262ac:	e581380c 	str	r3, [r1, #2060]	; 0x80c
   262b0:	e1d320d0 	ldrsb	r2, [r3]
   262b4:	e3520000 	cmp	r2, #0
   262b8:	012fff1e 	bxeq	lr
   262bc:	e3520020 	cmp	r2, #32
   262c0:	1afffff8 	bne	262a8 <CKernelOptions::GetToken()+0x48>
   262c4:	e3a02000 	mov	r2, #0
   262c8:	e283c001 	add	ip, r3, #1
   262cc:	e581c80c 	str	ip, [r1, #2060]	; 0x80c
   262d0:	e5c32000 	strb	r2, [r3]
   262d4:	e12fff1e 	bx	lr
   262d8:	e3a00000 	mov	r0, #0
   262dc:	e12fff1e 	bx	lr

000262e0 <CKernelOptions::CKernelOptions()>:
   262e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   262e4:	e3a02004 	mov	r2, #4
   262e8:	e1a05000 	mov	r5, r0
   262ec:	e3a04000 	mov	r4, #0
   262f0:	e3a0303c 	mov	r3, #60	; 0x3c
   262f4:	e2807e81 	add	r7, r0, #2064	; 0x810
   262f8:	e2877008 	add	r7, r7, #8
   262fc:	e580282c 	str	r2, [r0, #2092]	; 0x82c
   26300:	e5803858 	str	r3, [r0, #2136]	; 0x858
   26304:	e24dd014 	sub	sp, sp, #20
   26308:	e59f1378 	ldr	r1, [pc, #888]	; 26688 <CKernelOptions::CKernelOptions()+0x3a8>
   2630c:	e1a00007 	mov	r0, r7
   26310:	e5854810 	str	r4, [r5, #2064]	; 0x810
   26314:	e5854814 	str	r4, [r5, #2068]	; 0x814
   26318:	e5854834 	str	r4, [r5, #2100]	; 0x834
   2631c:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
   26320:	e5854850 	str	r4, [r5, #2128]	; 0x850
   26324:	e5c54854 	strb	r4, [r5, #2132]	; 0x854
   26328:	e2859e83 	add	r9, r5, #2096	; 0x830
   2632c:	eb000fe8 	bl	2a2d4 <strcpy>
   26330:	e59f1354 	ldr	r1, [pc, #852]	; 2668c <CKernelOptions::CKernelOptions()+0x3ac>
   26334:	e1a00009 	mov	r0, r9
   26338:	eb000fe5 	bl	2a2d4 <strcpy>
   2633c:	e59f334c 	ldr	r3, [pc, #844]	; 26690 <CKernelOptions::CKernelOptions()+0x3b0>
   26340:	e1a01004 	mov	r1, r4
   26344:	e5c54839 	strb	r4, [r5, #2105]	; 0x839
   26348:	e28d0008 	add	r0, sp, #8
   2634c:	e5835000 	str	r5, [r3]
   26350:	ebfff935 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   26354:	e1a02005 	mov	r2, r5
   26358:	e59f3334 	ldr	r3, [pc, #820]	; 26694 <CKernelOptions::CKernelOptions()+0x3b4>
   2635c:	e59f1334 	ldr	r1, [pc, #820]	; 26698 <CKernelOptions::CKernelOptions()+0x3b8>
   26360:	e58d4000 	str	r4, [sp]
   26364:	e28d0008 	add	r0, sp, #8
   26368:	ebfff93b 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2636c:	e1500004 	cmp	r0, r4
   26370:	0a00002b 	beq	26424 <CKernelOptions::CKernelOptions()+0x144>
   26374:	e5953008 	ldr	r3, [r5, #8]
   26378:	e3530b02 	cmp	r3, #2048	; 0x800
   2637c:	2a000028 	bcs	26424 <CKernelOptions::CKernelOptions()+0x144>
   26380:	e0853003 	add	r3, r5, r3
   26384:	e285200c 	add	r2, r5, #12
   26388:	e59f830c 	ldr	r8, [pc, #780]	; 2669c <CKernelOptions::CKernelOptions()+0x3bc>
   2638c:	e59fa30c 	ldr	sl, [pc, #780]	; 266a0 <CKernelOptions::CKernelOptions()+0x3c0>
   26390:	e5c3400c 	strb	r4, [r3, #12]
   26394:	e585280c 	str	r2, [r5, #2060]	; 0x80c
   26398:	e1a00005 	mov	r0, r5
   2639c:	ebffffaf 	bl	26260 <CKernelOptions::GetToken()>
   263a0:	e2506000 	subs	r6, r0, #0
   263a4:	0a00001e 	beq	26424 <CKernelOptions::CKernelOptions()+0x144>
   263a8:	e1d630d0 	ldrsb	r3, [r6]
   263ac:	e3530000 	cmp	r3, #0
   263b0:	0a00002e 	beq	26470 <CKernelOptions::CKernelOptions()+0x190>
   263b4:	e1a04006 	mov	r4, r6
   263b8:	ea000002 	b	263c8 <CKernelOptions::CKernelOptions()+0xe8>
   263bc:	e1f430d1 	ldrsb	r3, [r4, #1]!
   263c0:	e3530000 	cmp	r3, #0
   263c4:	0a000029 	beq	26470 <CKernelOptions::CKernelOptions()+0x190>
   263c8:	e353003d 	cmp	r3, #61	; 0x3d
   263cc:	1afffffa 	bne	263bc <CKernelOptions::CKernelOptions()+0xdc>
   263d0:	e3a03000 	mov	r3, #0
   263d4:	e1a0b004 	mov	fp, r4
   263d8:	e1a01008 	mov	r1, r8
   263dc:	e1a00006 	mov	r0, r6
   263e0:	e4cb3001 	strb	r3, [fp], #1
   263e4:	eb000f20 	bl	2a06c <strcmp>
   263e8:	e3500000 	cmp	r0, #0
   263ec:	1a000011 	bne	26438 <CKernelOptions::CKernelOptions()+0x158>
   263f0:	e1d430d1 	ldrsb	r3, [r4, #1]
   263f4:	e3530000 	cmp	r3, #0
   263f8:	0affffe6 	beq	26398 <CKernelOptions::CKernelOptions()+0xb8>
   263fc:	e1a0000b 	mov	r0, fp
   26400:	ebffff5c 	bl	26178 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26404:	e59f3298 	ldr	r3, [pc, #664]	; 266a4 <CKernelOptions::CKernelOptions()+0x3c4>
   26408:	e2402d0a 	sub	r2, r0, #640	; 0x280
   2640c:	e1520003 	cmp	r2, r3
   26410:	95850810 	strls	r0, [r5, #2064]	; 0x810
   26414:	e1a00005 	mov	r0, r5
   26418:	ebffff90 	bl	26260 <CKernelOptions::GetToken()>
   2641c:	e2506000 	subs	r6, r0, #0
   26420:	1affffe0 	bne	263a8 <CKernelOptions::CKernelOptions()+0xc8>
   26424:	e28d0008 	add	r0, sp, #8
   26428:	ebfff906 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   2642c:	e1a00005 	mov	r0, r5
   26430:	e28dd014 	add	sp, sp, #20
   26434:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26438:	e1a0100a 	mov	r1, sl
   2643c:	e1a00006 	mov	r0, r6
   26440:	eb000f09 	bl	2a06c <strcmp>
   26444:	e3500000 	cmp	r0, #0
   26448:	1a000013 	bne	2649c <CKernelOptions::CKernelOptions()+0x1bc>
   2644c:	e1d430d1 	ldrsb	r3, [r4, #1]
   26450:	e3530000 	cmp	r3, #0
   26454:	0affffcf 	beq	26398 <CKernelOptions::CKernelOptions()+0xb8>
   26458:	e1a0000b 	mov	r0, fp
   2645c:	ebffff45 	bl	26178 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26460:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
   26464:	e3530f96 	cmp	r3, #600	; 0x258
   26468:	95850814 	strls	r0, [r5, #2068]	; 0x814
   2646c:	eaffffc9 	b	26398 <CKernelOptions::CKernelOptions()+0xb8>
   26470:	e1a01008 	mov	r1, r8
   26474:	e1a00006 	mov	r0, r6
   26478:	eb000efb 	bl	2a06c <strcmp>
   2647c:	e3500000 	cmp	r0, #0
   26480:	0affffc4 	beq	26398 <CKernelOptions::CKernelOptions()+0xb8>
   26484:	e1a0100a 	mov	r1, sl
   26488:	e1a00006 	mov	r0, r6
   2648c:	eb000ef6 	bl	2a06c <strcmp>
   26490:	e3500000 	cmp	r0, #0
   26494:	13a0b000 	movne	fp, #0
   26498:	0affffbe 	beq	26398 <CKernelOptions::CKernelOptions()+0xb8>
   2649c:	e1a00006 	mov	r0, r6
   264a0:	e59f1200 	ldr	r1, [pc, #512]	; 266a8 <CKernelOptions::CKernelOptions()+0x3c8>
   264a4:	eb000ef0 	bl	2a06c <strcmp>
   264a8:	e2504000 	subs	r4, r0, #0
   264ac:	0a00000e 	beq	264ec <CKernelOptions::CKernelOptions()+0x20c>
   264b0:	e1a00006 	mov	r0, r6
   264b4:	e59f11f0 	ldr	r1, [pc, #496]	; 266ac <CKernelOptions::CKernelOptions()+0x3cc>
   264b8:	eb000eeb 	bl	2a06c <strcmp>
   264bc:	e3500000 	cmp	r0, #0
   264c0:	1a00000f 	bne	26504 <CKernelOptions::CKernelOptions()+0x224>
   264c4:	e35b0000 	cmp	fp, #0
   264c8:	0affffb2 	beq	26398 <CKernelOptions::CKernelOptions()+0xb8>
   264cc:	e1db30d0 	ldrsb	r3, [fp]
   264d0:	e3530000 	cmp	r3, #0
   264d4:	0affffaf 	beq	26398 <CKernelOptions::CKernelOptions()+0xb8>
   264d8:	e1a0000b 	mov	r0, fp
   264dc:	ebffff25 	bl	26178 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   264e0:	e3500004 	cmp	r0, #4
   264e4:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
   264e8:	eaffffaa 	b	26398 <CKernelOptions::CKernelOptions()+0xb8>
   264ec:	e1a0100b 	mov	r1, fp
   264f0:	e3a02013 	mov	r2, #19
   264f4:	e1a00007 	mov	r0, r7
   264f8:	eb000f80 	bl	2a300 <strncpy>
   264fc:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
   26500:	eaffffa4 	b	26398 <CKernelOptions::CKernelOptions()+0xb8>
   26504:	e1a00006 	mov	r0, r6
   26508:	e59f11a0 	ldr	r1, [pc, #416]	; 266b0 <CKernelOptions::CKernelOptions()+0x3d0>
   2650c:	eb000ed6 	bl	2a06c <strcmp>
   26510:	e2504000 	subs	r4, r0, #0
   26514:	0a000010 	beq	2655c <CKernelOptions::CKernelOptions()+0x27c>
   26518:	e1a00006 	mov	r0, r6
   2651c:	e59f1190 	ldr	r1, [pc, #400]	; 266b4 <CKernelOptions::CKernelOptions()+0x3d4>
   26520:	eb000ed1 	bl	2a06c <strcmp>
   26524:	e3500000 	cmp	r0, #0
   26528:	1a000011 	bne	26574 <CKernelOptions::CKernelOptions()+0x294>
   2652c:	e35b0000 	cmp	fp, #0
   26530:	0affff98 	beq	26398 <CKernelOptions::CKernelOptions()+0xb8>
   26534:	e1db30d0 	ldrsb	r3, [fp]
   26538:	e3530000 	cmp	r3, #0
   2653c:	0affff95 	beq	26398 <CKernelOptions::CKernelOptions()+0xb8>
   26540:	e1a0000b 	mov	r0, fp
   26544:	ebffff0b 	bl	26178 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26548:	e59f3168 	ldr	r3, [pc, #360]	; 266b8 <CKernelOptions::CKernelOptions()+0x3d8>
   2654c:	e24020c8 	sub	r2, r0, #200	; 0xc8
   26550:	e1520003 	cmp	r2, r3
   26554:	95850834 	strls	r0, [r5, #2100]	; 0x834
   26558:	eaffff8e 	b	26398 <CKernelOptions::CKernelOptions()+0xb8>
   2655c:	e1a0100b 	mov	r1, fp
   26560:	e3a02002 	mov	r2, #2
   26564:	e1a00009 	mov	r0, r9
   26568:	eb000f64 	bl	2a300 <strncpy>
   2656c:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
   26570:	eaffff88 	b	26398 <CKernelOptions::CKernelOptions()+0xb8>
   26574:	e1a00006 	mov	r0, r6
   26578:	e59f113c 	ldr	r1, [pc, #316]	; 266bc <CKernelOptions::CKernelOptions()+0x3dc>
   2657c:	eb000eba 	bl	2a06c <strcmp>
   26580:	e3500000 	cmp	r0, #0
   26584:	1a000006 	bne	265a4 <CKernelOptions::CKernelOptions()+0x2c4>
   26588:	e1a0000b 	mov	r0, fp
   2658c:	e59f112c 	ldr	r1, [pc, #300]	; 266c0 <CKernelOptions::CKernelOptions()+0x3e0>
   26590:	eb000eb5 	bl	2a06c <strcmp>
   26594:	e3500000 	cmp	r0, #0
   26598:	03a03001 	moveq	r3, #1
   2659c:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
   265a0:	eaffff7c 	b	26398 <CKernelOptions::CKernelOptions()+0xb8>
   265a4:	e1a00006 	mov	r0, r6
   265a8:	e59f1114 	ldr	r1, [pc, #276]	; 266c4 <CKernelOptions::CKernelOptions()+0x3e4>
   265ac:	eb000eae 	bl	2a06c <strcmp>
   265b0:	e2504000 	subs	r4, r0, #0
   265b4:	1a000005 	bne	265d0 <CKernelOptions::CKernelOptions()+0x2f0>
   265b8:	e1a0100b 	mov	r1, fp
   265bc:	e3a02013 	mov	r2, #19
   265c0:	e2890009 	add	r0, r9, #9
   265c4:	eb000f4d 	bl	2a300 <strncpy>
   265c8:	e5c5484c 	strb	r4, [r5, #2124]	; 0x84c
   265cc:	eaffff71 	b	26398 <CKernelOptions::CKernelOptions()+0xb8>
   265d0:	e1a00006 	mov	r0, r6
   265d4:	e59f10ec 	ldr	r1, [pc, #236]	; 266c8 <CKernelOptions::CKernelOptions()+0x3e8>
   265d8:	eb000ea3 	bl	2a06c <strcmp>
   265dc:	e3500000 	cmp	r0, #0
   265e0:	1a000009 	bne	2660c <CKernelOptions::CKernelOptions()+0x32c>
   265e4:	e35b0000 	cmp	fp, #0
   265e8:	0affff6a 	beq	26398 <CKernelOptions::CKernelOptions()+0xb8>
   265ec:	e1db30d0 	ldrsb	r3, [fp]
   265f0:	e3530000 	cmp	r3, #0
   265f4:	0affff67 	beq	26398 <CKernelOptions::CKernelOptions()+0xb8>
   265f8:	e1a0000b 	mov	r0, fp
   265fc:	ebfffedd 	bl	26178 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26600:	e3500002 	cmp	r0, #2
   26604:	95850850 	strls	r0, [r5, #2128]	; 0x850
   26608:	eaffff62 	b	26398 <CKernelOptions::CKernelOptions()+0xb8>
   2660c:	e1a00006 	mov	r0, r6
   26610:	e59f10b4 	ldr	r1, [pc, #180]	; 266cc <CKernelOptions::CKernelOptions()+0x3ec>
   26614:	eb000e94 	bl	2a06c <strcmp>
   26618:	e3500000 	cmp	r0, #0
   2661c:	1a000006 	bne	2663c <CKernelOptions::CKernelOptions()+0x35c>
   26620:	e1a0000b 	mov	r0, fp
   26624:	e59f10a4 	ldr	r1, [pc, #164]	; 266d0 <CKernelOptions::CKernelOptions()+0x3f0>
   26628:	eb000e8f 	bl	2a06c <strcmp>
   2662c:	e3500000 	cmp	r0, #0
   26630:	03a03001 	moveq	r3, #1
   26634:	05c53854 	strbeq	r3, [r5, #2132]	; 0x854
   26638:	eaffff56 	b	26398 <CKernelOptions::CKernelOptions()+0xb8>
   2663c:	e1a00006 	mov	r0, r6
   26640:	e59f108c 	ldr	r1, [pc, #140]	; 266d4 <CKernelOptions::CKernelOptions()+0x3f4>
   26644:	eb000e88 	bl	2a06c <strcmp>
   26648:	e16f3f1b 	clz	r3, fp
   2664c:	e3500000 	cmp	r0, #0
   26650:	e1a032a3 	lsr	r3, r3, #5
   26654:	01a00003 	moveq	r0, r3
   26658:	13a00001 	movne	r0, #1
   2665c:	e3500000 	cmp	r0, #0
   26660:	1affff4c 	bne	26398 <CKernelOptions::CKernelOptions()+0xb8>
   26664:	e1db30d0 	ldrsb	r3, [fp]
   26668:	e3530000 	cmp	r3, #0
   2666c:	0affff49 	beq	26398 <CKernelOptions::CKernelOptions()+0xb8>
   26670:	e1a0000b 	mov	r0, fp
   26674:	ebfffebf 	bl	26178 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26678:	e2403028 	sub	r3, r0, #40	; 0x28
   2667c:	e3530026 	cmp	r3, #38	; 0x26
   26680:	95850858 	strls	r0, [r5, #2136]	; 0x858
   26684:	eaffff43 	b	26398 <CKernelOptions::CKernelOptions()+0xb8>
   26688:	00046da4 	.word	0x00046da4
   2668c:	000434a4 	.word	0x000434a4
   26690:	0005ce30 	.word	0x0005ce30
   26694:	0000080c 	.word	0x0000080c
   26698:	00050001 	.word	0x00050001
   2669c:	00046e28 	.word	0x00046e28
   266a0:	00046e20 	.word	0x00046e20
   266a4:	0000053c 	.word	0x0000053c
   266a8:	00046dac 	.word	0x00046dac
   266ac:	00046db4 	.word	0x00046db4
   266b0:	00046dc0 	.word	0x00046dc0
   266b4:	00046dc8 	.word	0x00046dc8
   266b8:	00001e78 	.word	0x00001e78
   266bc:	00046dd8 	.word	0x00046dd8
   266c0:	00046de4 	.word	0x00046de4
   266c4:	00046dec 	.word	0x00046dec
   266c8:	00046df8 	.word	0x00046df8
   266cc:	00046e04 	.word	0x00046e04
   266d0:	00046e0c 	.word	0x00046e0c
   266d4:	00046e14 	.word	0x00046e14

000266d8 <CKernelOptions::GetOptionValue(char*)>:
   266d8:	e1d030d0 	ldrsb	r3, [r0]
   266dc:	e3530000 	cmp	r3, #0
   266e0:	1a000003 	bne	266f4 <CKernelOptions::GetOptionValue(char*)+0x1c>
   266e4:	ea000007 	b	26708 <CKernelOptions::GetOptionValue(char*)+0x30>
   266e8:	e1f030d1 	ldrsb	r3, [r0, #1]!
   266ec:	e3530000 	cmp	r3, #0
   266f0:	0a000004 	beq	26708 <CKernelOptions::GetOptionValue(char*)+0x30>
   266f4:	e353003d 	cmp	r3, #61	; 0x3d
   266f8:	1afffffa 	bne	266e8 <CKernelOptions::GetOptionValue(char*)+0x10>
   266fc:	e3a03000 	mov	r3, #0
   26700:	e4c03001 	strb	r3, [r0], #1
   26704:	e12fff1e 	bx	lr
   26708:	e1a00003 	mov	r0, r3
   2670c:	e12fff1e 	bx	lr

00026710 <CKernelOptions::GetDecimal(char*)>:
   26710:	e2503000 	subs	r3, r0, #0
   26714:	0a000003 	beq	26728 <CKernelOptions::GetDecimal(char*)+0x18>
   26718:	e1d330d0 	ldrsb	r3, [r3]
   2671c:	e3530000 	cmp	r3, #0
   26720:	0a000000 	beq	26728 <CKernelOptions::GetDecimal(char*)+0x18>
   26724:	eafffe93 	b	26178 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26728:	e3e00000 	mvn	r0, #0
   2672c:	e12fff1e 	bx	lr

00026730 <CLogger::CLogger(unsigned int, CTimer*)>:
   26730:	e92d4010 	push	{r4, lr}
   26734:	e3a03000 	mov	r3, #0
   26738:	e1a04000 	mov	r4, r0
   2673c:	e3a00001 	mov	r0, #1
   26740:	e884000e 	stm	r4, {r1, r2, r3}
   26744:	e584300c 	str	r3, [r4, #12]
   26748:	e5843010 	str	r3, [r4, #16]
   2674c:	e5843014 	str	r3, [r4, #20]
   26750:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   26754:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   26758:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   2675c:	e58430f4 	str	r3, [r4, #244]	; 0xf4
   26760:	e5840018 	str	r0, [r4, #24]
   26764:	e58400ec 	str	r0, [r4, #236]	; 0xec
   26768:	e3a00901 	mov	r0, #16384	; 0x4000
   2676c:	eb00121b 	bl	2afe0 <operator new[](unsigned int)>
   26770:	e59f300c 	ldr	r3, [pc, #12]	; 26784 <CLogger::CLogger(unsigned int, CTimer*)+0x54>
   26774:	e584000c 	str	r0, [r4, #12]
   26778:	e5834000 	str	r4, [r3]
   2677c:	e1a00004 	mov	r0, r4
   26780:	e8bd8010 	pop	{r4, pc}
   26784:	0005ce34 	.word	0x0005ce34

00026788 <CLogger::~CLogger()>:
   26788:	e92d4070 	push	{r4, r5, r6, lr}
   2678c:	e3a02000 	mov	r2, #0
   26790:	e1a04000 	mov	r4, r0
   26794:	e59f0064 	ldr	r0, [pc, #100]	; 26800 <CLogger::~CLogger()+0x78>
   26798:	e1a05002 	mov	r5, r2
   2679c:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   267a0:	e59410e4 	ldr	r1, [r4, #228]	; 0xe4
   267a4:	e5802000 	str	r2, [r0]
   267a8:	ea00000b 	b	267dc <CLogger::~CLogger()+0x54>
   267ac:	e592001c 	ldr	r0, [r2, #28]
   267b0:	e3500000 	cmp	r0, #0
   267b4:	0a000003 	beq	267c8 <CLogger::~CLogger()+0x40>
   267b8:	e3a01f42 	mov	r1, #264	; 0x108
   267bc:	eb00120f 	bl	2b000 <operator delete(void*, unsigned int)>
   267c0:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   267c4:	e59410e4 	ldr	r1, [r4, #228]	; 0xe4
   267c8:	e2833001 	add	r3, r3, #1
   267cc:	e3530032 	cmp	r3, #50	; 0x32
   267d0:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   267d4:	03a03000 	moveq	r3, #0
   267d8:	058450e8 	streq	r5, [r4, #232]	; 0xe8
   267dc:	e1530001 	cmp	r3, r1
   267e0:	e0842103 	add	r2, r4, r3, lsl #2
   267e4:	1afffff0 	bne	267ac <CLogger::~CLogger()+0x24>
   267e8:	e594000c 	ldr	r0, [r4, #12]
   267ec:	e3500000 	cmp	r0, #0
   267f0:	0a000000 	beq	267f8 <CLogger::~CLogger()+0x70>
   267f4:	eb001200 	bl	2affc <operator delete[](void*)>
   267f8:	e1a00004 	mov	r0, r4
   267fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   26800:	0005ce34 	.word	0x0005ce34

00026804 <CLogger::Initialize(CDevice*)>:
   26804:	e92d4010 	push	{r4, lr}
   26808:	e5801008 	str	r1, [r0, #8]
   2680c:	e24dd008 	sub	sp, sp, #8
   26810:	e1a04000 	mov	r4, r0
   26814:	eb0003d0 	bl	2775c <CMachineInfo::Get()>
   26818:	eb0002e7 	bl	273bc <CMachineInfo::GetMachineName() const>
   2681c:	e1a02000 	mov	r2, r0
   26820:	e59f301c 	ldr	r3, [pc, #28]	; 26844 <CLogger::Initialize(CDevice*)+0x40>
   26824:	e1a00004 	mov	r0, r4
   26828:	e58d2000 	str	r2, [sp]
   2682c:	e283101c 	add	r1, r3, #28
   26830:	e3a02003 	mov	r2, #3
   26834:	eb000005 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   26838:	e3a00001 	mov	r0, #1
   2683c:	e28dd008 	add	sp, sp, #8
   26840:	e8bd8010 	pop	{r4, pc}
   26844:	00046e30 	.word	0x00046e30

00026848 <CLogger::SetNewTarget(CDevice*)>:
   26848:	e5801008 	str	r1, [r0, #8]
   2684c:	e12fff1e 	bx	lr

00026850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   26850:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   26854:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   26858:	e24dd010 	sub	sp, sp, #16
   2685c:	e28dc018 	add	ip, sp, #24
   26860:	e59d3014 	ldr	r3, [sp, #20]
   26864:	e58dc000 	str	ip, [sp]
   26868:	e58dc00c 	str	ip, [sp, #12]
   2686c:	eb000003 	bl	26880 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   26870:	e28dd010 	add	sp, sp, #16
   26874:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   26878:	e28dd004 	add	sp, sp, #4
   2687c:	e12fff1e 	bx	lr

00026880 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   26880:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   26884:	e1a07003 	mov	r7, r3
   26888:	e24dd024 	sub	sp, sp, #36	; 0x24
   2688c:	e1a04000 	mov	r4, r0
   26890:	e1a0000d 	mov	r0, sp
   26894:	e1a05002 	mov	r5, r2
   26898:	e1a06001 	mov	r6, r1
   2689c:	eb00049a 	bl	27b0c <CString::CString()>
   268a0:	e1a01007 	mov	r1, r7
   268a4:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   268a8:	e1a0000d 	mov	r0, sp
   268ac:	eb0006b9 	bl	28398 <CString::FormatV(char const*, std::__va_list)>
   268b0:	e1a0000d 	mov	r0, sp
   268b4:	eb0004ac 	bl	27b6c <CString::operator char const*() const>
   268b8:	e1a02005 	mov	r2, r5
   268bc:	e1a03000 	mov	r3, r0
   268c0:	e1a01006 	mov	r1, r6
   268c4:	e1a00004 	mov	r0, r4
   268c8:	eb000108 	bl	26cf0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   268cc:	e5943000 	ldr	r3, [r4]
   268d0:	e1550003 	cmp	r5, r3
   268d4:	8a000029 	bhi	26980 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x100>
   268d8:	e28d0010 	add	r0, sp, #16
   268dc:	eb00048a 	bl	27b0c <CString::CString()>
   268e0:	e3550000 	cmp	r5, #0
   268e4:	0a000029 	beq	26990 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x110>
   268e8:	e5940004 	ldr	r0, [r4, #4]
   268ec:	e3500000 	cmp	r0, #0
   268f0:	0a00000d 	beq	2692c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   268f4:	eb000b3d 	bl	295f0 <CTimer::GetTimeString()>
   268f8:	e2505000 	subs	r5, r0, #0
   268fc:	0a00000a 	beq	2692c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   26900:	eb000499 	bl	27b6c <CString::operator char const*() const>
   26904:	e1a01000 	mov	r1, r0
   26908:	e28d0010 	add	r0, sp, #16
   2690c:	eb0004cc 	bl	27c44 <CString::Append(char const*)>
   26910:	e28d0010 	add	r0, sp, #16
   26914:	e59f1138 	ldr	r1, [pc, #312]	; 26a54 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
   26918:	eb0004c9 	bl	27c44 <CString::Append(char const*)>
   2691c:	e5953000 	ldr	r3, [r5]
   26920:	e1a00005 	mov	r0, r5
   26924:	e5933004 	ldr	r3, [r3, #4]
   26928:	e12fff33 	blx	r3
   2692c:	e1a01006 	mov	r1, r6
   26930:	e28d0010 	add	r0, sp, #16
   26934:	eb0004c2 	bl	27c44 <CString::Append(char const*)>
   26938:	e59f1118 	ldr	r1, [pc, #280]	; 26a58 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
   2693c:	e28d0010 	add	r0, sp, #16
   26940:	eb0004bf 	bl	27c44 <CString::Append(char const*)>
   26944:	e1a0000d 	mov	r0, sp
   26948:	eb000487 	bl	27b6c <CString::operator char const*() const>
   2694c:	e1a01000 	mov	r1, r0
   26950:	e28d0010 	add	r0, sp, #16
   26954:	eb0004ba 	bl	27c44 <CString::Append(char const*)>
   26958:	e59f10fc 	ldr	r1, [pc, #252]	; 26a5c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
   2695c:	e28d0010 	add	r0, sp, #16
   26960:	eb0004b7 	bl	27c44 <CString::Append(char const*)>
   26964:	e28d0010 	add	r0, sp, #16
   26968:	eb00047f 	bl	27b6c <CString::operator char const*() const>
   2696c:	e1a01000 	mov	r1, r0
   26970:	e1a00004 	mov	r0, r4
   26974:	eb000077 	bl	26b58 <CLogger::Write(char const*)>
   26978:	e28d0010 	add	r0, sp, #16
   2697c:	eb00042f 	bl	27a40 <CString::~CString()>
   26980:	e1a0000d 	mov	r0, sp
   26984:	eb00042d 	bl	27a40 <CString::~CString()>
   26988:	e28dd024 	add	sp, sp, #36	; 0x24
   2698c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   26990:	e59f10c8 	ldr	r1, [pc, #200]	; 26a60 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
   26994:	e28d0010 	add	r0, sp, #16
   26998:	eb000479 	bl	27b84 <CString::operator=(char const*)>
   2699c:	e5940004 	ldr	r0, [r4, #4]
   269a0:	e3500000 	cmp	r0, #0
   269a4:	0a00000d 	beq	269e0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
   269a8:	eb000b10 	bl	295f0 <CTimer::GetTimeString()>
   269ac:	e2505000 	subs	r5, r0, #0
   269b0:	0a00000a 	beq	269e0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
   269b4:	eb00046c 	bl	27b6c <CString::operator char const*() const>
   269b8:	e1a01000 	mov	r1, r0
   269bc:	e28d0010 	add	r0, sp, #16
   269c0:	eb00049f 	bl	27c44 <CString::Append(char const*)>
   269c4:	e28d0010 	add	r0, sp, #16
   269c8:	e59f1084 	ldr	r1, [pc, #132]	; 26a54 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
   269cc:	eb00049c 	bl	27c44 <CString::Append(char const*)>
   269d0:	e5953000 	ldr	r3, [r5]
   269d4:	e1a00005 	mov	r0, r5
   269d8:	e5933004 	ldr	r3, [r3, #4]
   269dc:	e12fff33 	blx	r3
   269e0:	e1a01006 	mov	r1, r6
   269e4:	e28d0010 	add	r0, sp, #16
   269e8:	eb000495 	bl	27c44 <CString::Append(char const*)>
   269ec:	e59f1064 	ldr	r1, [pc, #100]	; 26a58 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
   269f0:	e28d0010 	add	r0, sp, #16
   269f4:	eb000492 	bl	27c44 <CString::Append(char const*)>
   269f8:	e1a0000d 	mov	r0, sp
   269fc:	eb00045a 	bl	27b6c <CString::operator char const*() const>
   26a00:	e1a01000 	mov	r1, r0
   26a04:	e28d0010 	add	r0, sp, #16
   26a08:	eb00048d 	bl	27c44 <CString::Append(char const*)>
   26a0c:	e59f1050 	ldr	r1, [pc, #80]	; 26a64 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   26a10:	e28d0010 	add	r0, sp, #16
   26a14:	eb00048a 	bl	27c44 <CString::Append(char const*)>
   26a18:	e59f103c 	ldr	r1, [pc, #60]	; 26a5c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
   26a1c:	e28d0010 	add	r0, sp, #16
   26a20:	eb000487 	bl	27c44 <CString::Append(char const*)>
   26a24:	e28d0010 	add	r0, sp, #16
   26a28:	eb00044f 	bl	27b6c <CString::operator char const*() const>
   26a2c:	e1a01000 	mov	r1, r0
   26a30:	e1a00004 	mov	r0, r4
   26a34:	eb000047 	bl	26b58 <CLogger::Write(char const*)>
   26a38:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   26a3c:	e3530000 	cmp	r3, #0
   26a40:	0a000000 	beq	26a48 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c8>
   26a44:	e12fff33 	blx	r3
   26a48:	e3a000ff 	mov	r0, #255	; 0xff
   26a4c:	eb000987 	bl	29070 <set_qemu_exit_status>
   26a50:	eb00098a 	bl	29080 <halt>
   26a54:	00046e6c 	.word	0x00046e6c
   26a58:	00046e68 	.word	0x00046e68
   26a5c:	00046e5c 	.word	0x00046e5c
   26a60:	00046e54 	.word	0x00046e54
   26a64:	00046e60 	.word	0x00046e60

00026a68 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   26a68:	e92d4070 	push	{r4, r5, r6, lr}
   26a6c:	e1a04000 	mov	r4, r0
   26a70:	e5900000 	ldr	r0, [r0]
   26a74:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
   26a78:	e1520000 	cmp	r2, r0
   26a7c:	8a000012 	bhi	26acc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x64>
   26a80:	e1a05003 	mov	r5, r3
   26a84:	e3a03000 	mov	r3, #0
   26a88:	e1520003 	cmp	r2, r3
   26a8c:	e5cd3000 	strb	r3, [sp]
   26a90:	0a00000f 	beq	26ad4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
   26a94:	e1a0000d 	mov	r0, sp
   26a98:	eb000e26 	bl	2a338 <strcat>
   26a9c:	e59f1094 	ldr	r1, [pc, #148]	; 26b38 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   26aa0:	e1a0000d 	mov	r0, sp
   26aa4:	eb000e23 	bl	2a338 <strcat>
   26aa8:	e1a01005 	mov	r1, r5
   26aac:	e1a0000d 	mov	r0, sp
   26ab0:	eb000e20 	bl	2a338 <strcat>
   26ab4:	e59f1080 	ldr	r1, [pc, #128]	; 26b3c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   26ab8:	e1a0000d 	mov	r0, sp
   26abc:	eb000e1d 	bl	2a338 <strcat>
   26ac0:	e1a0100d 	mov	r1, sp
   26ac4:	e1a00004 	mov	r0, r4
   26ac8:	eb000022 	bl	26b58 <CLogger::Write(char const*)>
   26acc:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   26ad0:	e8bd8070 	pop	{r4, r5, r6, pc}
   26ad4:	e1a06001 	mov	r6, r1
   26ad8:	e1a0000d 	mov	r0, sp
   26adc:	e59f105c 	ldr	r1, [pc, #92]	; 26b40 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
   26ae0:	eb000dfb 	bl	2a2d4 <strcpy>
   26ae4:	e1a01006 	mov	r1, r6
   26ae8:	e1a0000d 	mov	r0, sp
   26aec:	eb000e11 	bl	2a338 <strcat>
   26af0:	e59f1040 	ldr	r1, [pc, #64]	; 26b38 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   26af4:	e1a0000d 	mov	r0, sp
   26af8:	eb000e0e 	bl	2a338 <strcat>
   26afc:	e1a01005 	mov	r1, r5
   26b00:	e1a0000d 	mov	r0, sp
   26b04:	eb000e0b 	bl	2a338 <strcat>
   26b08:	e59f1034 	ldr	r1, [pc, #52]	; 26b44 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
   26b0c:	e1a0000d 	mov	r0, sp
   26b10:	eb000e08 	bl	2a338 <strcat>
   26b14:	e59f1020 	ldr	r1, [pc, #32]	; 26b3c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   26b18:	e1a0000d 	mov	r0, sp
   26b1c:	eb000e05 	bl	2a338 <strcat>
   26b20:	e1a0100d 	mov	r1, sp
   26b24:	e1a00004 	mov	r0, r4
   26b28:	eb00000a 	bl	26b58 <CLogger::Write(char const*)>
   26b2c:	e3a000ff 	mov	r0, #255	; 0xff
   26b30:	eb00094e 	bl	29070 <set_qemu_exit_status>
   26b34:	eb000951 	bl	29080 <halt>
   26b38:	00046e68 	.word	0x00046e68
   26b3c:	00046e5c 	.word	0x00046e5c
   26b40:	00046e54 	.word	0x00046e54
   26b44:	00046e60 	.word	0x00046e60

00026b48 <CLogger::Get()>:
   26b48:	e59f3004 	ldr	r3, [pc, #4]	; 26b54 <CLogger::Get()+0xc>
   26b4c:	e5930000 	ldr	r0, [r3]
   26b50:	e12fff1e 	bx	lr
   26b54:	0005ce34 	.word	0x0005ce34

00026b58 <CLogger::Write(char const*)>:
   26b58:	e92d4070 	push	{r4, r5, r6, lr}
   26b5c:	e1a04000 	mov	r4, r0
   26b60:	e1a00001 	mov	r0, r1
   26b64:	e1a06001 	mov	r6, r1
   26b68:	eb000d35 	bl	2a044 <strlen>
   26b6c:	e1a05000 	mov	r5, r0
   26b70:	e5940008 	ldr	r0, [r4, #8]
   26b74:	e1a02005 	mov	r2, r5
   26b78:	e5903000 	ldr	r3, [r0]
   26b7c:	e1a01006 	mov	r1, r6
   26b80:	e593300c 	ldr	r3, [r3, #12]
   26b84:	e12fff33 	blx	r3
   26b88:	e5940018 	ldr	r0, [r4, #24]
   26b8c:	e3500000 	cmp	r0, #0
   26b90:	1a00001e 	bne	26c10 <CLogger::Write(char const*)+0xb8>
   26b94:	e3550000 	cmp	r5, #0
   26b98:	e2450001 	sub	r0, r5, #1
   26b9c:	08bd8070 	popeq	{r4, r5, r6, pc}
   26ba0:	e1a0e006 	mov	lr, r6
   26ba4:	e59f1078 	ldr	r1, [pc, #120]	; 26c24 <CLogger::Write(char const*)+0xcc>
   26ba8:	e0de50d1 	ldrsb	r5, [lr], #1
   26bac:	e26ec001 	rsb	ip, lr, #1
   26bb0:	e355000d 	cmp	r5, #13
   26bb4:	e086c00c 	add	ip, r6, ip
   26bb8:	0a000009 	beq	26be4 <CLogger::Write(char const*)+0x8c>
   26bbc:	e5942010 	ldr	r2, [r4, #16]
   26bc0:	e594300c 	ldr	r3, [r4, #12]
   26bc4:	e7c35002 	strb	r5, [r3, r2]
   26bc8:	e5943010 	ldr	r3, [r4, #16]
   26bcc:	e5942014 	ldr	r2, [r4, #20]
   26bd0:	e2833001 	add	r3, r3, #1
   26bd4:	e0033001 	and	r3, r3, r1
   26bd8:	e1530002 	cmp	r3, r2
   26bdc:	e5843010 	str	r3, [r4, #16]
   26be0:	0a000006 	beq	26c00 <CLogger::Write(char const*)+0xa8>
   26be4:	e17c0000 	cmn	ip, r0
   26be8:	1affffee 	bne	26ba8 <CLogger::Write(char const*)+0x50>
   26bec:	e5943018 	ldr	r3, [r4, #24]
   26bf0:	e3530000 	cmp	r3, #0
   26bf4:	08bd8070 	popeq	{r4, r5, r6, pc}
   26bf8:	e8bd4070 	pop	{r4, r5, r6, lr}
   26bfc:	ea001448 	b	2bd24 <LeaveCritical>
   26c00:	e2433001 	sub	r3, r3, #1
   26c04:	e0033001 	and	r3, r3, r1
   26c08:	e5843010 	str	r3, [r4, #16]
   26c0c:	eafffff6 	b	26bec <CLogger::Write(char const*)+0x94>
   26c10:	eb001419 	bl	2bc7c <EnterCritical>
   26c14:	e3550000 	cmp	r5, #0
   26c18:	e2450001 	sub	r0, r5, #1
   26c1c:	1affffdf 	bne	26ba0 <CLogger::Write(char const*)+0x48>
   26c20:	eafffff1 	b	26bec <CLogger::Write(char const*)+0x94>
   26c24:	00003fff 	.word	0x00003fff

00026c28 <CLogger::Read(void*, unsigned int)>:
   26c28:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26c2c:	e1a04000 	mov	r4, r0
   26c30:	e5900018 	ldr	r0, [r0, #24]
   26c34:	e1a05001 	mov	r5, r1
   26c38:	e3500000 	cmp	r0, #0
   26c3c:	e1a06002 	mov	r6, r2
   26c40:	1a00001f 	bne	26cc4 <CLogger::Read(void*, unsigned int)+0x9c>
   26c44:	e1c421d0 	ldrd	r2, [r4, #16]
   26c48:	e1520003 	cmp	r2, r3
   26c4c:	0a000024 	beq	26ce4 <CLogger::Read(void*, unsigned int)+0xbc>
   26c50:	e1a07006 	mov	r7, r6
   26c54:	e3a0c000 	mov	ip, #0
   26c58:	e59f208c 	ldr	r2, [pc, #140]	; 26cec <CLogger::Read(void*, unsigned int)+0xc4>
   26c5c:	ea00000a 	b	26c8c <CLogger::Read(void*, unsigned int)+0x64>
   26c60:	e594100c 	ldr	r1, [r4, #12]
   26c64:	e28cc001 	add	ip, ip, #1
   26c68:	e19130d3 	ldrsb	r3, [r1, r3]
   26c6c:	e4c53001 	strb	r3, [r5], #1
   26c70:	e5943014 	ldr	r3, [r4, #20]
   26c74:	e5941010 	ldr	r1, [r4, #16]
   26c78:	e2833001 	add	r3, r3, #1
   26c7c:	e0033002 	and	r3, r3, r2
   26c80:	e1530001 	cmp	r3, r1
   26c84:	e5843014 	str	r3, [r4, #20]
   26c88:	0a000006 	beq	26ca8 <CLogger::Read(void*, unsigned int)+0x80>
   26c8c:	e15c0006 	cmp	ip, r6
   26c90:	1afffff2 	bne	26c60 <CLogger::Read(void*, unsigned int)+0x38>
   26c94:	e5943018 	ldr	r3, [r4, #24]
   26c98:	e3530000 	cmp	r3, #0
   26c9c:	1a000005 	bne	26cb8 <CLogger::Read(void*, unsigned int)+0x90>
   26ca0:	e1a00007 	mov	r0, r7
   26ca4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26ca8:	e5943018 	ldr	r3, [r4, #24]
   26cac:	e1a0700c 	mov	r7, ip
   26cb0:	e3530000 	cmp	r3, #0
   26cb4:	0afffff9 	beq	26ca0 <CLogger::Read(void*, unsigned int)+0x78>
   26cb8:	eb001419 	bl	2bd24 <LeaveCritical>
   26cbc:	e1a00007 	mov	r0, r7
   26cc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26cc4:	eb0013ec 	bl	2bc7c <EnterCritical>
   26cc8:	e1c421d0 	ldrd	r2, [r4, #16]
   26ccc:	e1520003 	cmp	r2, r3
   26cd0:	1affffde 	bne	26c50 <CLogger::Read(void*, unsigned int)+0x28>
   26cd4:	e5943018 	ldr	r3, [r4, #24]
   26cd8:	e3530000 	cmp	r3, #0
   26cdc:	0a000000 	beq	26ce4 <CLogger::Read(void*, unsigned int)+0xbc>
   26ce0:	eb00140f 	bl	2bd24 <LeaveCritical>
   26ce4:	e3e07000 	mvn	r7, #0
   26ce8:	eaffffec 	b	26ca0 <CLogger::Read(void*, unsigned int)+0x78>
   26cec:	00003fff 	.word	0x00003fff

00026cf0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   26cf0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26cf4:	e1a04000 	mov	r4, r0
   26cf8:	e24dd010 	sub	sp, sp, #16
   26cfc:	e3a00f42 	mov	r0, #264	; 0x108
   26d00:	e1a06003 	mov	r6, r3
   26d04:	e1a07002 	mov	r7, r2
   26d08:	e58d1004 	str	r1, [sp, #4]
   26d0c:	eb0010ad 	bl	2afc8 <operator new(unsigned int)>
   26d10:	e3a08000 	mov	r8, #0
   26d14:	e1a05000 	mov	r5, r0
   26d18:	e3a02032 	mov	r2, #50	; 0x32
   26d1c:	e59d1004 	ldr	r1, [sp, #4]
   26d20:	e4c07001 	strb	r7, [r0], #1
   26d24:	eb000d75 	bl	2a300 <strncpy>
   26d28:	e1a01006 	mov	r1, r6
   26d2c:	e3a020c8 	mov	r2, #200	; 0xc8
   26d30:	e2850033 	add	r0, r5, #51	; 0x33
   26d34:	e5c58032 	strb	r8, [r5, #50]	; 0x32
   26d38:	eb000d70 	bl	2a300 <strncpy>
   26d3c:	e5940004 	ldr	r0, [r4, #4]
   26d40:	e5c580fa 	strb	r8, [r5, #250]	; 0xfa
   26d44:	e1500008 	cmp	r0, r8
   26d48:	0a000004 	beq	26d60 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   26d4c:	e28d200c 	add	r2, sp, #12
   26d50:	e28d1008 	add	r1, sp, #8
   26d54:	eb0009b4 	bl	2942c <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   26d58:	e1500008 	cmp	r0, r8
   26d5c:	1a000038 	bne	26e44 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x154>
   26d60:	e3a03000 	mov	r3, #0
   26d64:	e58530fc 	str	r3, [r5, #252]	; 0xfc
   26d68:	e5853100 	str	r3, [r5, #256]	; 0x100
   26d6c:	e5853104 	str	r3, [r5, #260]	; 0x104
   26d70:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
   26d74:	e3500000 	cmp	r0, #0
   26d78:	1a00002e 	bne	26e38 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x148>
   26d7c:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   26d80:	e0841103 	add	r1, r4, r3, lsl #2
   26d84:	e3530031 	cmp	r3, #49	; 0x31
   26d88:	e581501c 	str	r5, [r1, #28]
   26d8c:	e2831001 	add	r1, r3, #1
   26d90:	0a00001c 	beq	26e08 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x118>
   26d94:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
   26d98:	e58410e4 	str	r1, [r4, #228]	; 0xe4
   26d9c:	e1510002 	cmp	r1, r2
   26da0:	0a000007 	beq	26dc4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd4>
   26da4:	e3500000 	cmp	r0, #0
   26da8:	1a000014 	bne	26e00 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x110>
   26dac:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   26db0:	e3530000 	cmp	r3, #0
   26db4:	0a000000 	beq	26dbc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
   26db8:	e12fff33 	blx	r3
   26dbc:	e28dd010 	add	sp, sp, #16
   26dc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26dc4:	e0843103 	add	r3, r4, r3, lsl #2
   26dc8:	e3510031 	cmp	r1, #49	; 0x31
   26dcc:	e5935020 	ldr	r5, [r3, #32]
   26dd0:	03a03000 	moveq	r3, #0
   26dd4:	e2811001 	add	r1, r1, #1
   26dd8:	058430e8 	streq	r3, [r4, #232]	; 0xe8
   26ddc:	1a000010 	bne	26e24 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x134>
   26de0:	e3500000 	cmp	r0, #0
   26de4:	1a000011 	bne	26e30 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x140>
   26de8:	e3550000 	cmp	r5, #0
   26dec:	0affffee 	beq	26dac <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   26df0:	e1a00005 	mov	r0, r5
   26df4:	e3a01f42 	mov	r1, #264	; 0x108
   26df8:	eb001080 	bl	2b000 <operator delete(void*, unsigned int)>
   26dfc:	eaffffea 	b	26dac <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   26e00:	eb0013c7 	bl	2bd24 <LeaveCritical>
   26e04:	eaffffe8 	b	26dac <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   26e08:	e3a01000 	mov	r1, #0
   26e0c:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   26e10:	e58410e4 	str	r1, [r4, #228]	; 0xe4
   26e14:	e1530001 	cmp	r3, r1
   26e18:	1affffe1 	bne	26da4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb4>
   26e1c:	e3a01001 	mov	r1, #1
   26e20:	e594501c 	ldr	r5, [r4, #28]
   26e24:	e3500000 	cmp	r0, #0
   26e28:	e58410e8 	str	r1, [r4, #232]	; 0xe8
   26e2c:	0affffed 	beq	26de8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   26e30:	eb0013bb 	bl	2bd24 <LeaveCritical>
   26e34:	eaffffeb 	b	26de8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   26e38:	eb00138f 	bl	2bc7c <EnterCritical>
   26e3c:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
   26e40:	eaffffcd 	b	26d7c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   26e44:	e59d300c 	ldr	r3, [sp, #12]
   26e48:	e59f1020 	ldr	r1, [pc, #32]	; 26e70 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x180>
   26e4c:	e59d2008 	ldr	r2, [sp, #8]
   26e50:	e0831391 	umull	r1, r3, r1, r3
   26e54:	e1a036a3 	lsr	r3, r3, #13
   26e58:	e5940004 	ldr	r0, [r4, #4]
   26e5c:	e5853100 	str	r3, [r5, #256]	; 0x100
   26e60:	e58520fc 	str	r2, [r5, #252]	; 0xfc
   26e64:	eb000942 	bl	29374 <CTimer::GetTimeZone() const>
   26e68:	e5850104 	str	r0, [r5, #260]	; 0x104
   26e6c:	eaffffbf 	b	26d70 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>
   26e70:	d1b71759 	.word	0xd1b71759

00026e74 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   26e74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26e78:	e1a04000 	mov	r4, r0
   26e7c:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
   26e80:	e1a08001 	mov	r8, r1
   26e84:	e3500000 	cmp	r0, #0
   26e88:	e1a06002 	mov	r6, r2
   26e8c:	e1a07003 	mov	r7, r3
   26e90:	1a000022 	bne	26f20 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
   26e94:	e594c0e8 	ldr	ip, [r4, #232]	; 0xe8
   26e98:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   26e9c:	e15c0003 	cmp	ip, r3
   26ea0:	0a000028 	beq	26f48 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   26ea4:	e35c0031 	cmp	ip, #49	; 0x31
   26ea8:	e084310c 	add	r3, r4, ip, lsl #2
   26eac:	e593501c 	ldr	r5, [r3, #28]
   26eb0:	03a03000 	moveq	r3, #0
   26eb4:	e28cc001 	add	ip, ip, #1
   26eb8:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
   26ebc:	058430e8 	streq	r3, [r4, #232]	; 0xe8
   26ec0:	e3500000 	cmp	r0, #0
   26ec4:	1a000021 	bne	26f50 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
   26ec8:	e1a01005 	mov	r1, r5
   26ecc:	e4d13001 	ldrb	r3, [r1], #1
   26ed0:	e1a00006 	mov	r0, r6
   26ed4:	e5c83000 	strb	r3, [r8]
   26ed8:	eb000cfd 	bl	2a2d4 <strcpy>
   26edc:	e2851033 	add	r1, r5, #51	; 0x33
   26ee0:	e1a00007 	mov	r0, r7
   26ee4:	eb000cfa 	bl	2a2d4 <strcpy>
   26ee8:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
   26eec:	e59d1018 	ldr	r1, [sp, #24]
   26ef0:	e5953100 	ldr	r3, [r5, #256]	; 0x100
   26ef4:	e5812000 	str	r2, [r1]
   26ef8:	e59d201c 	ldr	r2, [sp, #28]
   26efc:	e1a00005 	mov	r0, r5
   26f00:	e5823000 	str	r3, [r2]
   26f04:	e5953104 	ldr	r3, [r5, #260]	; 0x104
   26f08:	e59d2020 	ldr	r2, [sp, #32]
   26f0c:	e3a01f42 	mov	r1, #264	; 0x108
   26f10:	e5823000 	str	r3, [r2]
   26f14:	eb001039 	bl	2b000 <operator delete(void*, unsigned int)>
   26f18:	e3a00001 	mov	r0, #1
   26f1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26f20:	eb001355 	bl	2bc7c <EnterCritical>
   26f24:	e594c0e8 	ldr	ip, [r4, #232]	; 0xe8
   26f28:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   26f2c:	e153000c 	cmp	r3, ip
   26f30:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
   26f34:	1affffda 	bne	26ea4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
   26f38:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   26f3c:	e3530000 	cmp	r3, #0
   26f40:	0a000000 	beq	26f48 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   26f44:	eb001376 	bl	2bd24 <LeaveCritical>
   26f48:	e3a00000 	mov	r0, #0
   26f4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26f50:	eb001373 	bl	2bd24 <LeaveCritical>
   26f54:	eaffffdb 	b	26ec8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

00026f58 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   26f58:	e58010f0 	str	r1, [r0, #240]	; 0xf0
   26f5c:	e12fff1e 	bx	lr

00026f60 <CLogger::RegisterPanicHandler(void (*)())>:
   26f60:	e58010f4 	str	r1, [r0, #244]	; 0xf4
   26f64:	e12fff1e 	bx	lr

00026f68 <CMachineInfo::CMachineInfo()>:
   26f68:	e92d4810 	push	{r4, fp, lr}
   26f6c:	e28db008 	add	fp, sp, #8
   26f70:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   26f74:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
   26f78:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f7c:	e3a02000 	mov	r2, #0
   26f80:	e5832000 	str	r2, [r3]
   26f84:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f88:	e3a02010 	mov	r2, #16
   26f8c:	e5c32004 	strb	r2, [r3, #4]
   26f90:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f94:	e3a02000 	mov	r2, #0
   26f98:	e5832008 	str	r2, [r3, #8]
   26f9c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fa0:	e3a02000 	mov	r2, #0
   26fa4:	e583200c 	str	r2, [r3, #12]
   26fa8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fac:	e3a02004 	mov	r2, #4
   26fb0:	e5c32010 	strb	r2, [r3, #16]
   26fb4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fb8:	e3a02000 	mov	r2, #0
   26fbc:	e5832014 	str	r2, [r3, #20]
   26fc0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fc4:	e59f23b4 	ldr	r2, [pc, #948]	; 27380 <CMachineInfo::CMachineInfo()+0x418>
   26fc8:	e1c321b8 	strh	r2, [r3, #24]
   26fcc:	e59f33b0 	ldr	r3, [pc, #944]	; 27384 <CMachineInfo::CMachineInfo()+0x41c>
   26fd0:	e5933000 	ldr	r3, [r3]
   26fd4:	e3530000 	cmp	r3, #0
   26fd8:	0a00001e 	beq	27058 <CMachineInfo::CMachineInfo()+0xf0>
   26fdc:	e59f33a0 	ldr	r3, [pc, #928]	; 27384 <CMachineInfo::CMachineInfo()+0x41c>
   26fe0:	e5933000 	ldr	r3, [r3]
   26fe4:	e5932000 	ldr	r2, [r3]
   26fe8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fec:	e5832000 	str	r2, [r3]
   26ff0:	e59f338c 	ldr	r3, [pc, #908]	; 27384 <CMachineInfo::CMachineInfo()+0x41c>
   26ff4:	e5933000 	ldr	r3, [r3]
   26ff8:	e5d32004 	ldrb	r2, [r3, #4]
   26ffc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27000:	e5c32004 	strb	r2, [r3, #4]
   27004:	e59f3378 	ldr	r3, [pc, #888]	; 27384 <CMachineInfo::CMachineInfo()+0x41c>
   27008:	e5933000 	ldr	r3, [r3]
   2700c:	e5932008 	ldr	r2, [r3, #8]
   27010:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27014:	e5832008 	str	r2, [r3, #8]
   27018:	e59f3364 	ldr	r3, [pc, #868]	; 27384 <CMachineInfo::CMachineInfo()+0x41c>
   2701c:	e5933000 	ldr	r3, [r3]
   27020:	e593200c 	ldr	r2, [r3, #12]
   27024:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27028:	e583200c 	str	r2, [r3, #12]
   2702c:	e59f3350 	ldr	r3, [pc, #848]	; 27384 <CMachineInfo::CMachineInfo()+0x41c>
   27030:	e5933000 	ldr	r3, [r3]
   27034:	e5d32010 	ldrb	r2, [r3, #16]
   27038:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2703c:	e5c32010 	strb	r2, [r3, #16]
   27040:	e59f333c 	ldr	r3, [pc, #828]	; 27384 <CMachineInfo::CMachineInfo()+0x41c>
   27044:	e5933000 	ldr	r3, [r3]
   27048:	e5932014 	ldr	r2, [r3, #20]
   2704c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27050:	e5832014 	str	r2, [r3, #20]
   27054:	ea0000c5 	b	27370 <CMachineInfo::CMachineInfo()+0x408>
   27058:	e59f2324 	ldr	r2, [pc, #804]	; 27384 <CMachineInfo::CMachineInfo()+0x41c>
   2705c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27060:	e5823000 	str	r3, [r2]
   27064:	e24b3020 	sub	r3, fp, #32
   27068:	e3a01001 	mov	r1, #1
   2706c:	e1a00003 	mov	r0, r3
   27070:	ebfff5ed 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   27074:	e24b2030 	sub	r2, fp, #48	; 0x30
   27078:	e24b0020 	sub	r0, fp, #32
   2707c:	e3a03000 	mov	r3, #0
   27080:	e58d3000 	str	r3, [sp]
   27084:	e3a03010 	mov	r3, #16
   27088:	e59f12f8 	ldr	r1, [pc, #760]	; 27388 <CMachineInfo::CMachineInfo()+0x420>
   2708c:	ebfff5f2 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   27090:	e1a03000 	mov	r3, r0
   27094:	e3530000 	cmp	r3, #0
   27098:	0a000003 	beq	270ac <CMachineInfo::CMachineInfo()+0x144>
   2709c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   270a0:	e6ff2073 	uxth	r2, r3
   270a4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   270a8:	e1c321b8 	strh	r2, [r3, #24]
   270ac:	e24b2040 	sub	r2, fp, #64	; 0x40
   270b0:	e24b0020 	sub	r0, fp, #32
   270b4:	e3a03000 	mov	r3, #0
   270b8:	e58d3000 	str	r3, [sp]
   270bc:	e3a03010 	mov	r3, #16
   270c0:	e59f12c4 	ldr	r1, [pc, #708]	; 2738c <CMachineInfo::CMachineInfo()+0x424>
   270c4:	ebfff5e4 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   270c8:	e1a03000 	mov	r3, r0
   270cc:	e2233001 	eor	r3, r3, #1
   270d0:	e6ef3073 	uxtb	r3, r3
   270d4:	e3530000 	cmp	r3, #0
   270d8:	0a000001 	beq	270e4 <CMachineInfo::CMachineInfo()+0x17c>
   270dc:	e3a04000 	mov	r4, #0
   270e0:	ea00009e 	b	27360 <CMachineInfo::CMachineInfo()+0x3f8>
   270e4:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   270e8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   270ec:	e5832000 	str	r2, [r3]
   270f0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   270f4:	e5933000 	ldr	r3, [r3]
   270f8:	e2033502 	and	r3, r3, #8388608	; 0x800000
   270fc:	e3530000 	cmp	r3, #0
   27100:	0a000064 	beq	27298 <CMachineInfo::CMachineInfo()+0x330>
   27104:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27108:	e5933000 	ldr	r3, [r3]
   2710c:	e1a03223 	lsr	r3, r3, #4
   27110:	e6ef3073 	uxtb	r3, r3
   27114:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   27118:	e3a03000 	mov	r3, #0
   2711c:	e50b3010 	str	r3, [fp, #-16]
   27120:	e51b3010 	ldr	r3, [fp, #-16]
   27124:	e353000d 	cmp	r3, #13
   27128:	8a00000f 	bhi	2716c <CMachineInfo::CMachineInfo()+0x204>
   2712c:	e59f125c 	ldr	r1, [pc, #604]	; 27390 <CMachineInfo::CMachineInfo()+0x428>
   27130:	e51b2010 	ldr	r2, [fp, #-16]
   27134:	e1a03002 	mov	r3, r2
   27138:	e1a03083 	lsl	r3, r3, #1
   2713c:	e0833002 	add	r3, r3, r2
   27140:	e1a03103 	lsl	r3, r3, #2
   27144:	e0813003 	add	r3, r1, r3
   27148:	e5933000 	ldr	r3, [r3]
   2714c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   27150:	e1520003 	cmp	r2, r3
   27154:	0a000003 	beq	27168 <CMachineInfo::CMachineInfo()+0x200>
   27158:	e51b3010 	ldr	r3, [fp, #-16]
   2715c:	e2833001 	add	r3, r3, #1
   27160:	e50b3010 	str	r3, [fp, #-16]
   27164:	eaffffed 	b	27120 <CMachineInfo::CMachineInfo()+0x1b8>
   27168:	e320f000 	nop	{0}
   2716c:	e51b3010 	ldr	r3, [fp, #-16]
   27170:	e353000d 	cmp	r3, #13
   27174:	9a000001 	bls	27180 <CMachineInfo::CMachineInfo()+0x218>
   27178:	e3a04000 	mov	r4, #0
   2717c:	ea000077 	b	27360 <CMachineInfo::CMachineInfo()+0x3f8>
   27180:	e59f1208 	ldr	r1, [pc, #520]	; 27390 <CMachineInfo::CMachineInfo()+0x428>
   27184:	e51b2010 	ldr	r2, [fp, #-16]
   27188:	e1a03002 	mov	r3, r2
   2718c:	e1a03083 	lsl	r3, r3, #1
   27190:	e0833002 	add	r3, r3, r2
   27194:	e1a03103 	lsl	r3, r3, #2
   27198:	e0813003 	add	r3, r1, r3
   2719c:	e2833004 	add	r3, r3, #4
   271a0:	e5d32000 	ldrb	r2, [r3]
   271a4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   271a8:	e5c32004 	strb	r2, [r3, #4]
   271ac:	e59f11dc 	ldr	r1, [pc, #476]	; 27390 <CMachineInfo::CMachineInfo()+0x428>
   271b0:	e51b2010 	ldr	r2, [fp, #-16]
   271b4:	e1a03002 	mov	r3, r2
   271b8:	e1a03083 	lsl	r3, r3, #1
   271bc:	e0833002 	add	r3, r3, r2
   271c0:	e1a03103 	lsl	r3, r3, #2
   271c4:	e0813003 	add	r3, r1, r3
   271c8:	e2833008 	add	r3, r3, #8
   271cc:	e5932000 	ldr	r2, [r3]
   271d0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   271d4:	e5832008 	str	r2, [r3, #8]
   271d8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   271dc:	e5933000 	ldr	r3, [r3]
   271e0:	e203300f 	and	r3, r3, #15
   271e4:	e2832001 	add	r2, r3, #1
   271e8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   271ec:	e583200c 	str	r2, [r3, #12]
   271f0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   271f4:	e5933000 	ldr	r3, [r3]
   271f8:	e1a03623 	lsr	r3, r3, #12
   271fc:	e6ef3073 	uxtb	r3, r3
   27200:	e203300f 	and	r3, r3, #15
   27204:	e6ef2073 	uxtb	r2, r3
   27208:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2720c:	e5c32010 	strb	r2, [r3, #16]
   27210:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27214:	e5933000 	ldr	r3, [r3]
   27218:	e1a03a23 	lsr	r3, r3, #20
   2721c:	e2033007 	and	r3, r3, #7
   27220:	e3a02c01 	mov	r2, #256	; 0x100
   27224:	e1a03312 	lsl	r3, r2, r3
   27228:	e1a02003 	mov	r2, r3
   2722c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27230:	e5832014 	str	r2, [r3, #20]
   27234:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27238:	e5d33010 	ldrb	r3, [r3, #16]
   2723c:	e3530003 	cmp	r3, #3
   27240:	9a000002 	bls	27250 <CMachineInfo::CMachineInfo()+0x2e8>
   27244:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27248:	e3a02004 	mov	r2, #4
   2724c:	e5c32010 	strb	r2, [r3, #16]
   27250:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27254:	e5d33004 	ldrb	r3, [r3, #4]
   27258:	e3530003 	cmp	r3, #3
   2725c:	1a00003e 	bne	2735c <CMachineInfo::CMachineInfo()+0x3f4>
   27260:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27264:	e5933014 	ldr	r3, [r3, #20]
   27268:	e3530c01 	cmp	r3, #256	; 0x100
   2726c:	1a00003a 	bne	2735c <CMachineInfo::CMachineInfo()+0x3f4>
   27270:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27274:	e593300c 	ldr	r3, [r3, #12]
   27278:	e3530001 	cmp	r3, #1
   2727c:	1a000001 	bne	27288 <CMachineInfo::CMachineInfo()+0x320>
   27280:	e3a02001 	mov	r2, #1
   27284:	ea000000 	b	2728c <CMachineInfo::CMachineInfo()+0x324>
   27288:	e3a02002 	mov	r2, #2
   2728c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27290:	e5c32004 	strb	r2, [r3, #4]
   27294:	ea000030 	b	2735c <CMachineInfo::CMachineInfo()+0x3f4>
   27298:	e3a03000 	mov	r3, #0
   2729c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   272a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   272a4:	e3530010 	cmp	r3, #16
   272a8:	8a00000b 	bhi	272dc <CMachineInfo::CMachineInfo()+0x374>
   272ac:	e59f20e0 	ldr	r2, [pc, #224]	; 27394 <CMachineInfo::CMachineInfo()+0x42c>
   272b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   272b4:	e7922203 	ldr	r2, [r2, r3, lsl #4]
   272b8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   272bc:	e5933000 	ldr	r3, [r3]
   272c0:	e1520003 	cmp	r2, r3
   272c4:	0a000003 	beq	272d8 <CMachineInfo::CMachineInfo()+0x370>
   272c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   272cc:	e2833001 	add	r3, r3, #1
   272d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   272d4:	eafffff1 	b	272a0 <CMachineInfo::CMachineInfo()+0x338>
   272d8:	e320f000 	nop	{0}
   272dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   272e0:	e3530010 	cmp	r3, #16
   272e4:	9a000001 	bls	272f0 <CMachineInfo::CMachineInfo()+0x388>
   272e8:	e3a04000 	mov	r4, #0
   272ec:	ea00001b 	b	27360 <CMachineInfo::CMachineInfo()+0x3f8>
   272f0:	e59f209c 	ldr	r2, [pc, #156]	; 27394 <CMachineInfo::CMachineInfo()+0x42c>
   272f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   272f8:	e1a03203 	lsl	r3, r3, #4
   272fc:	e0823003 	add	r3, r2, r3
   27300:	e5d32004 	ldrb	r2, [r3, #4]
   27304:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27308:	e5c32004 	strb	r2, [r3, #4]
   2730c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27310:	e3a02001 	mov	r2, #1
   27314:	e5832008 	str	r2, [r3, #8]
   27318:	e59f2074 	ldr	r2, [pc, #116]	; 27394 <CMachineInfo::CMachineInfo()+0x42c>
   2731c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27320:	e1a03203 	lsl	r3, r3, #4
   27324:	e0823003 	add	r3, r2, r3
   27328:	e5932008 	ldr	r2, [r3, #8]
   2732c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27330:	e583200c 	str	r2, [r3, #12]
   27334:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27338:	e3a02000 	mov	r2, #0
   2733c:	e5c32010 	strb	r2, [r3, #16]
   27340:	e59f204c 	ldr	r2, [pc, #76]	; 27394 <CMachineInfo::CMachineInfo()+0x42c>
   27344:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27348:	e1a03203 	lsl	r3, r3, #4
   2734c:	e0823003 	add	r3, r2, r3
   27350:	e593200c 	ldr	r2, [r3, #12]
   27354:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27358:	e5832014 	str	r2, [r3, #20]
   2735c:	e3a04001 	mov	r4, #1
   27360:	e24b3020 	sub	r3, fp, #32
   27364:	e1a00003 	mov	r0, r3
   27368:	ebfff536 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   2736c:	e3540001 	cmp	r4, #1
   27370:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27374:	e1a00003 	mov	r0, r3
   27378:	e24bd008 	sub	sp, fp, #8
   2737c:	e8bd8810 	pop	{r4, fp, pc}
   27380:	00001f35 	.word	0x00001f35
   27384:	0005ce38 	.word	0x0005ce38
   27388:	00060001 	.word	0x00060001
   2738c:	00010002 	.word	0x00010002
   27390:	0004a1d0 	.word	0x0004a1d0
   27394:	0004a0c0 	.word	0x0004a0c0

00027398 <CMachineInfo::~CMachineInfo()>:
   27398:	e59f3010 	ldr	r3, [pc, #16]	; 273b0 <CMachineInfo::~CMachineInfo()+0x18>
   2739c:	e5932000 	ldr	r2, [r3]
   273a0:	e1520000 	cmp	r2, r0
   273a4:	03a02000 	moveq	r2, #0
   273a8:	05832000 	streq	r2, [r3]
   273ac:	e12fff1e 	bx	lr
   273b0:	0005ce38 	.word	0x0005ce38

000273b4 <CMachineInfo::GetMachineModel() const>:
   273b4:	e5d00004 	ldrb	r0, [r0, #4]
   273b8:	e12fff1e 	bx	lr

000273bc <CMachineInfo::GetMachineName() const>:
   273bc:	e5d02004 	ldrb	r2, [r0, #4]
   273c0:	e59f3008 	ldr	r3, [pc, #8]	; 273d0 <CMachineInfo::GetMachineName() const+0x14>
   273c4:	e0833102 	add	r3, r3, r2, lsl #2
   273c8:	e59301b8 	ldr	r0, [r3, #440]	; 0x1b8
   273cc:	e12fff1e 	bx	lr
   273d0:	0004a0c0 	.word	0x0004a0c0

000273d4 <CMachineInfo::GetModelMajor() const>:
   273d4:	e5900008 	ldr	r0, [r0, #8]
   273d8:	e12fff1e 	bx	lr

000273dc <CMachineInfo::GetModelRevision() const>:
   273dc:	e590000c 	ldr	r0, [r0, #12]
   273e0:	e12fff1e 	bx	lr

000273e4 <CMachineInfo::GetSoCType() const>:
   273e4:	e5d00010 	ldrb	r0, [r0, #16]
   273e8:	e12fff1e 	bx	lr

000273ec <CMachineInfo::GetRAMSize() const>:
   273ec:	e5900014 	ldr	r0, [r0, #20]
   273f0:	e12fff1e 	bx	lr

000273f4 <CMachineInfo::GetSoCName() const>:
   273f4:	e5d02010 	ldrb	r2, [r0, #16]
   273f8:	e59f3008 	ldr	r3, [pc, #8]	; 27408 <CMachineInfo::GetSoCName() const+0x14>
   273fc:	e0833102 	add	r3, r3, r2, lsl #2
   27400:	e59301fc 	ldr	r0, [r3, #508]	; 0x1fc
   27404:	e12fff1e 	bx	lr
   27408:	0004a0c0 	.word	0x0004a0c0

0002740c <CMachineInfo::GetRevisionRaw() const>:
   2740c:	e5900000 	ldr	r0, [r0]
   27410:	e12fff1e 	bx	lr

00027414 <CMachineInfo::GetActLEDInfo() const>:
   27414:	e5d02004 	ldrb	r2, [r0, #4]
   27418:	e59f3008 	ldr	r3, [pc, #8]	; 27428 <CMachineInfo::GetActLEDInfo() const+0x14>
   2741c:	e0833102 	add	r3, r3, r2, lsl #2
   27420:	e5930210 	ldr	r0, [r3, #528]	; 0x210
   27424:	e12fff1e 	bx	lr
   27428:	0004a0c0 	.word	0x0004a0c0

0002742c <CMachineInfo::GetClockRate(unsigned int) const>:
   2742c:	e92d4030 	push	{r4, r5, lr}
   27430:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   27434:	e1a04001 	mov	r4, r1
   27438:	e1a05000 	mov	r5, r0
   2743c:	e3a01000 	mov	r1, #0
   27440:	e28d000c 	add	r0, sp, #12
   27444:	ebfff4f8 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   27448:	e3a03004 	mov	r3, #4
   2744c:	e58d3000 	str	r3, [sp]
   27450:	e3a03014 	mov	r3, #20
   27454:	e59f1078 	ldr	r1, [pc, #120]	; 274d4 <CMachineInfo::GetClockRate(unsigned int) const+0xa8>
   27458:	e28d000c 	add	r0, sp, #12
   2745c:	e08d2003 	add	r2, sp, r3
   27460:	e58d4020 	str	r4, [sp, #32]
   27464:	ebfff4fc 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   27468:	e3500000 	cmp	r0, #0
   2746c:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
   27470:	1a00000a 	bne	274a0 <CMachineInfo::GetClockRate(unsigned int) const+0x74>
   27474:	e3540002 	cmp	r4, #2
   27478:	0a000013 	beq	274cc <CMachineInfo::GetClockRate(unsigned int) const+0xa0>
   2747c:	e3540004 	cmp	r4, #4
   27480:	0a00000b 	beq	274b4 <CMachineInfo::GetClockRate(unsigned int) const+0x88>
   27484:	e3540001 	cmp	r4, #1
   27488:	0a000003 	beq	2749c <CMachineInfo::GetClockRate(unsigned int) const+0x70>
   2748c:	e59f1044 	ldr	r1, [pc, #68]	; 274d8 <CMachineInfo::GetClockRate(unsigned int) const+0xac>
   27490:	e59f2044 	ldr	r2, [pc, #68]	; 274dc <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
   27494:	e2810010 	add	r0, r1, #16
   27498:	ebfff4c2 	bl	247a8 <assertion_failed>
   2749c:	e59f403c 	ldr	r4, [pc, #60]	; 274e0 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
   274a0:	e28d000c 	add	r0, sp, #12
   274a4:	ebfff4e7 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   274a8:	e1a00004 	mov	r0, r4
   274ac:	e28dd02c 	add	sp, sp, #44	; 0x2c
   274b0:	e8bd8030 	pop	{r4, r5, pc}
   274b4:	e5952008 	ldr	r2, [r5, #8]
   274b8:	e59f3024 	ldr	r3, [pc, #36]	; 274e4 <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
   274bc:	e3520002 	cmp	r2, #2
   274c0:	e59f4020 	ldr	r4, [pc, #32]	; 274e8 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
   274c4:	81a04003 	movhi	r4, r3
   274c8:	eafffff4 	b	274a0 <CMachineInfo::GetClockRate(unsigned int) const+0x74>
   274cc:	e59f4018 	ldr	r4, [pc, #24]	; 274ec <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
   274d0:	eafffff2 	b	274a0 <CMachineInfo::GetClockRate(unsigned int) const+0x74>
   274d4:	00030002 	.word	0x00030002
   274d8:	00046fe8 	.word	0x00046fe8
   274dc:	00000141 	.word	0x00000141
   274e0:	05f5e100 	.word	0x05f5e100
   274e4:	11e1a300 	.word	0x11e1a300
   274e8:	0ee6b280 	.word	0x0ee6b280
   274ec:	02dc6c00 	.word	0x02dc6c00

000274f0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   274f0:	e3510036 	cmp	r1, #54	; 0x36
   274f4:	0a000006 	beq	27514 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   274f8:	e3510037 	cmp	r1, #55	; 0x37
   274fc:	1a00000e 	bne	2753c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x4c>
   27500:	e5d03004 	ldrb	r3, [r0, #4]
   27504:	e3530003 	cmp	r3, #3
   27508:	83a00028 	movhi	r0, #40	; 0x28
   2750c:	93a0002d 	movls	r0, #45	; 0x2d
   27510:	e12fff1e 	bx	lr
   27514:	e5d03004 	ldrb	r3, [r0, #4]
   27518:	e3530003 	cmp	r3, #3
   2751c:	9a000004 	bls	27534 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x44>
   27520:	e5903008 	ldr	r3, [r0, #8]
   27524:	e3530003 	cmp	r3, #3
   27528:	33a0002d 	movcc	r0, #45	; 0x2d
   2752c:	23a00029 	movcs	r0, #41	; 0x29
   27530:	e12fff1e 	bx	lr
   27534:	e3a00028 	mov	r0, #40	; 0x28
   27538:	e12fff1e 	bx	lr
   2753c:	e59f100c 	ldr	r1, [pc, #12]	; 27550 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
   27540:	e92d4010 	push	{r4, lr}
   27544:	e59f2008 	ldr	r2, [pc, #8]	; 27554 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x64>
   27548:	e2810010 	add	r0, r1, #16
   2754c:	ebfff495 	bl	247a8 <assertion_failed>
   27550:	00046fe8 	.word	0x00046fe8
   27554:	0000017a 	.word	0x0000017a

00027558 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   27558:	e5903008 	ldr	r3, [r0, #8]
   2755c:	e3530003 	cmp	r3, #3
   27560:	8a000005 	bhi	2757c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x24>
   27564:	e3510001 	cmp	r1, #1
   27568:	0a00000b 	beq	2759c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
   2756c:	e3510006 	cmp	r1, #6
   27570:	e59f002c 	ldr	r0, [pc, #44]	; 275a4 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x4c>
   27574:	13a00000 	movne	r0, #0
   27578:	e12fff1e 	bx	lr
   2757c:	e3510001 	cmp	r1, #1
   27580:	0a000003 	beq	27594 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x3c>
   27584:	e3510006 	cmp	r1, #6
   27588:	e59f0018 	ldr	r0, [pc, #24]	; 275a8 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
   2758c:	13a00000 	movne	r0, #0
   27590:	e12fff1e 	bx	lr
   27594:	e59f0010 	ldr	r0, [pc, #16]	; 275ac <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x54>
   27598:	e12fff1e 	bx	lr
   2759c:	e59f000c 	ldr	r0, [pc, #12]	; 275b0 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x58>
   275a0:	e12fff1e 	bx	lr
   275a4:	1dcd6500 	.word	0x1dcd6500
   275a8:	2cb41780 	.word	0x2cb41780
   275ac:	0337f980 	.word	0x0337f980
   275b0:	0124f800 	.word	0x0124f800

000275b4 <CMachineInfo::GetDevice(TDeviceId) const>:
   275b4:	e3510000 	cmp	r1, #0
   275b8:	1a000003 	bne	275cc <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   275bc:	e5d00004 	ldrb	r0, [r0, #4]
   275c0:	e2500001 	subs	r0, r0, #1
   275c4:	13a00001 	movne	r0, #1
   275c8:	e12fff1e 	bx	lr
   275cc:	e59f100c 	ldr	r1, [pc, #12]	; 275e0 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
   275d0:	e92d4010 	push	{r4, lr}
   275d4:	e59f2008 	ldr	r2, [pc, #8]	; 275e4 <CMachineInfo::GetDevice(TDeviceId) const+0x30>
   275d8:	e2810010 	add	r0, r1, #16
   275dc:	ebfff471 	bl	247a8 <assertion_failed>
   275e0:	00046fe8 	.word	0x00046fe8
   275e4:	000001b5 	.word	0x000001b5

000275e8 <CMachineInfo::ArePWMChannelsSwapped() const>:
   275e8:	e5d03004 	ldrb	r3, [r0, #4]
   275ec:	e2430006 	sub	r0, r3, #6
   275f0:	e3500001 	cmp	r0, #1
   275f4:	83530003 	cmphi	r3, #3
   275f8:	83a00001 	movhi	r0, #1
   275fc:	93a00000 	movls	r0, #0
   27600:	e12fff1e 	bx	lr

00027604 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   27604:	e59f30b0 	ldr	r3, [pc, #176]	; 276bc <CMachineInfo::AllocateDMAChannel(unsigned int)+0xb8>
   27608:	e92d4010 	push	{r4, lr}
   2760c:	e5933000 	ldr	r3, [r3]
   27610:	ea000002 	b	27620 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c>
   27614:	e1530000 	cmp	r3, r0
   27618:	0a000006 	beq	27638 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x34>
   2761c:	e1a00003 	mov	r0, r3
   27620:	e3530000 	cmp	r3, #0
   27624:	1afffffa 	bne	27614 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x10>
   27628:	e59f1090 	ldr	r1, [pc, #144]	; 276c0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
   2762c:	e59f2090 	ldr	r2, [pc, #144]	; 276c4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   27630:	e2810014 	add	r0, r1, #20
   27634:	ebfff45b 	bl	247a8 <assertion_failed>
   27638:	e3d1200f 	bics	r2, r1, #15
   2763c:	1a00000a 	bne	2766c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x68>
   27640:	e351000c 	cmp	r1, #12
   27644:	8a000018 	bhi	276ac <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa8>
   27648:	e1d321b8 	ldrh	r2, [r3, #24]
   2764c:	e1a00152 	asr	r0, r2, r1
   27650:	e3100001 	tst	r0, #1
   27654:	0a00000d 	beq	27690 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x8c>
   27658:	e3a00001 	mov	r0, #1
   2765c:	e1c22110 	bic	r2, r2, r0, lsl r1
   27660:	e1c321b8 	strh	r2, [r3, #24]
   27664:	e1a00001 	mov	r0, r1
   27668:	e8bd8010 	pop	{r4, pc}
   2766c:	e3510081 	cmp	r1, #129	; 0x81
   27670:	03a03006 	moveq	r3, #6
   27674:	13a0300c 	movne	r3, #12
   27678:	e1d011b8 	ldrh	r1, [r0, #24]
   2767c:	e1a02351 	asr	r2, r1, r3
   27680:	e3120001 	tst	r2, #1
   27684:	1a000003 	bne	27698 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x94>
   27688:	e2533001 	subs	r3, r3, #1
   2768c:	2afffffa 	bcs	2767c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x78>
   27690:	e3a00080 	mov	r0, #128	; 0x80
   27694:	e8bd8010 	pop	{r4, pc}
   27698:	e3a02001 	mov	r2, #1
   2769c:	e1c11312 	bic	r1, r1, r2, lsl r3
   276a0:	e1c011b8 	strh	r1, [r0, #24]
   276a4:	e1a00003 	mov	r0, r3
   276a8:	e8bd8010 	pop	{r4, pc}
   276ac:	e59f100c 	ldr	r1, [pc, #12]	; 276c0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
   276b0:	e59f2010 	ldr	r2, [pc, #16]	; 276c8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc4>
   276b4:	e2810024 	add	r0, r1, #36	; 0x24
   276b8:	ebfff43a 	bl	247a8 <assertion_failed>
   276bc:	0005ce38 	.word	0x0005ce38
   276c0:	00046fe8 	.word	0x00046fe8
   276c4:	000001c5 	.word	0x000001c5
   276c8:	000001ce 	.word	0x000001ce

000276cc <CMachineInfo::FreeDMAChannel(unsigned int)>:
   276cc:	e59f3074 	ldr	r3, [pc, #116]	; 27748 <CMachineInfo::FreeDMAChannel(unsigned int)+0x7c>
   276d0:	e92d4010 	push	{r4, lr}
   276d4:	e5933000 	ldr	r3, [r3]
   276d8:	ea000002 	b	276e8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
   276dc:	e1530000 	cmp	r3, r0
   276e0:	0a000006 	beq	27700 <CMachineInfo::FreeDMAChannel(unsigned int)+0x34>
   276e4:	e1a00003 	mov	r0, r3
   276e8:	e3530000 	cmp	r3, #0
   276ec:	1afffffa 	bne	276dc <CMachineInfo::FreeDMAChannel(unsigned int)+0x10>
   276f0:	e59f1054 	ldr	r1, [pc, #84]	; 2774c <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   276f4:	e59f2054 	ldr	r2, [pc, #84]	; 27750 <CMachineInfo::FreeDMAChannel(unsigned int)+0x84>
   276f8:	e2810014 	add	r0, r1, #20
   276fc:	ebfff429 	bl	247a8 <assertion_failed>
   27700:	e351000c 	cmp	r1, #12
   27704:	8a000007 	bhi	27728 <CMachineInfo::FreeDMAChannel(unsigned int)+0x5c>
   27708:	e1d321b8 	ldrh	r2, [r3, #24]
   2770c:	e1e00152 	mvn	r0, r2, asr r1
   27710:	e3100001 	tst	r0, #1
   27714:	0a000007 	beq	27738 <CMachineInfo::FreeDMAChannel(unsigned int)+0x6c>
   27718:	e3a00001 	mov	r0, #1
   2771c:	e1821110 	orr	r1, r2, r0, lsl r1
   27720:	e1c311b8 	strh	r1, [r3, #24]
   27724:	e8bd8010 	pop	{r4, pc}
   27728:	e59f101c 	ldr	r1, [pc, #28]	; 2774c <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   2772c:	e59f2020 	ldr	r2, [pc, #32]	; 27754 <CMachineInfo::FreeDMAChannel(unsigned int)+0x88>
   27730:	e2810024 	add	r0, r1, #36	; 0x24
   27734:	ebfff41b 	bl	247a8 <assertion_failed>
   27738:	e59f100c 	ldr	r1, [pc, #12]	; 2774c <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   2773c:	e59f2014 	ldr	r2, [pc, #20]	; 27758 <CMachineInfo::FreeDMAChannel(unsigned int)+0x8c>
   27740:	e2810040 	add	r0, r1, #64	; 0x40
   27744:	ebfff417 	bl	247a8 <assertion_failed>
   27748:	0005ce38 	.word	0x0005ce38
   2774c:	00046fe8 	.word	0x00046fe8
   27750:	000001f2 	.word	0x000001f2
   27754:	000001fa 	.word	0x000001fa
   27758:	000001fb 	.word	0x000001fb

0002775c <CMachineInfo::Get()>:
   2775c:	e59f301c 	ldr	r3, [pc, #28]	; 27780 <CMachineInfo::Get()+0x24>
   27760:	e5930000 	ldr	r0, [r3]
   27764:	e3500000 	cmp	r0, #0
   27768:	112fff1e 	bxne	lr
   2776c:	e59f1010 	ldr	r1, [pc, #16]	; 27784 <CMachineInfo::Get()+0x28>
   27770:	e92d4010 	push	{r4, lr}
   27774:	e59f200c 	ldr	r2, [pc, #12]	; 27788 <CMachineInfo::Get()+0x2c>
   27778:	e2810014 	add	r0, r1, #20
   2777c:	ebfff409 	bl	247a8 <assertion_failed>
   27780:	0005ce38 	.word	0x0005ce38
   27784:	00046fe8 	.word	0x00046fe8
   27788:	00000201 	.word	0x00000201

0002778c <CPtrArray::CPtrArray(unsigned int, unsigned int)>:
   2778c:	e3a03000 	mov	r3, #0
   27790:	e1510003 	cmp	r1, r3
   27794:	e92d4010 	push	{r4, lr}
   27798:	e880000e 	stm	r0, {r1, r2, r3}
   2779c:	e580300c 	str	r3, [r0, #12]
   277a0:	0a00000a 	beq	277d0 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x44>
   277a4:	e3520000 	cmp	r2, #0
   277a8:	0a00000c 	beq	277e0 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x54>
   277ac:	e371022e 	cmn	r1, #-536870910	; 0xe0000002
   277b0:	e1a04000 	mov	r4, r0
   277b4:	83e00000 	mvnhi	r0, #0
   277b8:	91a00101 	lslls	r0, r1, #2
   277bc:	eb000e07 	bl	2afe0 <operator new[](unsigned int)>
   277c0:	e1a03000 	mov	r3, r0
   277c4:	e1a00004 	mov	r0, r4
   277c8:	e584300c 	str	r3, [r4, #12]
   277cc:	e8bd8010 	pop	{r4, pc}
   277d0:	e3a0201e 	mov	r2, #30
   277d4:	e59f1014 	ldr	r1, [pc, #20]	; 277f0 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x64>
   277d8:	e59f0014 	ldr	r0, [pc, #20]	; 277f4 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x68>
   277dc:	ebfff3f1 	bl	247a8 <assertion_failed>
   277e0:	e3a0201f 	mov	r2, #31
   277e4:	e59f1004 	ldr	r1, [pc, #4]	; 277f0 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x64>
   277e8:	e59f0008 	ldr	r0, [pc, #8]	; 277f8 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x6c>
   277ec:	ebfff3ed 	bl	247a8 <assertion_failed>
   277f0:	00047050 	.word	0x00047050
   277f4:	00047060 	.word	0x00047060
   277f8:	00047074 	.word	0x00047074

000277fc <CPtrArray::~CPtrArray()>:
   277fc:	e3a03000 	mov	r3, #0
   27800:	e92d4010 	push	{r4, lr}
   27804:	e1a04000 	mov	r4, r0
   27808:	e590000c 	ldr	r0, [r0, #12]
   2780c:	e5843000 	str	r3, [r4]
   27810:	e1500003 	cmp	r0, r3
   27814:	e5843004 	str	r3, [r4, #4]
   27818:	0a000000 	beq	27820 <CPtrArray::~CPtrArray()+0x24>
   2781c:	eb000df6 	bl	2affc <operator delete[](void*)>
   27820:	e1a00004 	mov	r0, r4
   27824:	e8bd8010 	pop	{r4, pc}

00027828 <CPtrArray::GetCount() const>:
   27828:	e5900008 	ldr	r0, [r0, #8]
   2782c:	e12fff1e 	bx	lr

00027830 <CPtrArray::operator[](unsigned int)>:
   27830:	e5903008 	ldr	r3, [r0, #8]
   27834:	e92d4010 	push	{r4, lr}
   27838:	e1530001 	cmp	r3, r1
   2783c:	9a000007 	bls	27860 <CPtrArray::operator[](unsigned int)+0x30>
   27840:	e5902000 	ldr	r2, [r0]
   27844:	e1530002 	cmp	r3, r2
   27848:	8a000008 	bhi	27870 <CPtrArray::operator[](unsigned int)+0x40>
   2784c:	e590000c 	ldr	r0, [r0, #12]
   27850:	e3500000 	cmp	r0, #0
   27854:	0a000009 	beq	27880 <CPtrArray::operator[](unsigned int)+0x50>
   27858:	e0800101 	add	r0, r0, r1, lsl #2
   2785c:	e8bd8010 	pop	{r4, pc}
   27860:	e3a02035 	mov	r2, #53	; 0x35
   27864:	e59f1024 	ldr	r1, [pc, #36]	; 27890 <CPtrArray::operator[](unsigned int)+0x60>
   27868:	e59f0024 	ldr	r0, [pc, #36]	; 27894 <CPtrArray::operator[](unsigned int)+0x64>
   2786c:	ebfff3cd 	bl	247a8 <assertion_failed>
   27870:	e3a02036 	mov	r2, #54	; 0x36
   27874:	e59f1014 	ldr	r1, [pc, #20]	; 27890 <CPtrArray::operator[](unsigned int)+0x60>
   27878:	e59f0018 	ldr	r0, [pc, #24]	; 27898 <CPtrArray::operator[](unsigned int)+0x68>
   2787c:	ebfff3c9 	bl	247a8 <assertion_failed>
   27880:	e3a02037 	mov	r2, #55	; 0x37
   27884:	e59f1004 	ldr	r1, [pc, #4]	; 27890 <CPtrArray::operator[](unsigned int)+0x60>
   27888:	e59f000c 	ldr	r0, [pc, #12]	; 2789c <CPtrArray::operator[](unsigned int)+0x6c>
   2788c:	ebfff3c5 	bl	247a8 <assertion_failed>
   27890:	00047050 	.word	0x00047050
   27894:	0004708c 	.word	0x0004708c
   27898:	000470a4 	.word	0x000470a4
   2789c:	000470c4 	.word	0x000470c4

000278a0 <CPtrArray::operator[](unsigned int) const>:
   278a0:	e5903008 	ldr	r3, [r0, #8]
   278a4:	e92d4010 	push	{r4, lr}
   278a8:	e1530001 	cmp	r3, r1
   278ac:	9a000007 	bls	278d0 <CPtrArray::operator[](unsigned int) const+0x30>
   278b0:	e5902000 	ldr	r2, [r0]
   278b4:	e1530002 	cmp	r3, r2
   278b8:	8a000008 	bhi	278e0 <CPtrArray::operator[](unsigned int) const+0x40>
   278bc:	e590300c 	ldr	r3, [r0, #12]
   278c0:	e3530000 	cmp	r3, #0
   278c4:	0a000009 	beq	278f0 <CPtrArray::operator[](unsigned int) const+0x50>
   278c8:	e7930101 	ldr	r0, [r3, r1, lsl #2]
   278cc:	e8bd8010 	pop	{r4, pc}
   278d0:	e3a0203e 	mov	r2, #62	; 0x3e
   278d4:	e59f1024 	ldr	r1, [pc, #36]	; 27900 <CPtrArray::operator[](unsigned int) const+0x60>
   278d8:	e59f0024 	ldr	r0, [pc, #36]	; 27904 <CPtrArray::operator[](unsigned int) const+0x64>
   278dc:	ebfff3b1 	bl	247a8 <assertion_failed>
   278e0:	e3a0203f 	mov	r2, #63	; 0x3f
   278e4:	e59f1014 	ldr	r1, [pc, #20]	; 27900 <CPtrArray::operator[](unsigned int) const+0x60>
   278e8:	e59f0018 	ldr	r0, [pc, #24]	; 27908 <CPtrArray::operator[](unsigned int) const+0x68>
   278ec:	ebfff3ad 	bl	247a8 <assertion_failed>
   278f0:	e3a02040 	mov	r2, #64	; 0x40
   278f4:	e59f1004 	ldr	r1, [pc, #4]	; 27900 <CPtrArray::operator[](unsigned int) const+0x60>
   278f8:	e59f000c 	ldr	r0, [pc, #12]	; 2790c <CPtrArray::operator[](unsigned int) const+0x6c>
   278fc:	ebfff3a9 	bl	247a8 <assertion_failed>
   27900:	00047050 	.word	0x00047050
   27904:	0004708c 	.word	0x0004708c
   27908:	000470a4 	.word	0x000470a4
   2790c:	000470c4 	.word	0x000470c4

00027910 <CPtrArray::Append(void*)>:
   27910:	e5903000 	ldr	r3, [r0]
   27914:	e92d4070 	push	{r4, r5, r6, lr}
   27918:	e3530000 	cmp	r3, #0
   2791c:	0a000024 	beq	279b4 <CPtrArray::Append(void*)+0xa4>
   27920:	e590500c 	ldr	r5, [r0, #12]
   27924:	e1a04000 	mov	r4, r0
   27928:	e3550000 	cmp	r5, #0
   2792c:	0a000024 	beq	279c4 <CPtrArray::Append(void*)+0xb4>
   27930:	e5900008 	ldr	r0, [r0, #8]
   27934:	e1530000 	cmp	r3, r0
   27938:	3a000025 	bcc	279d4 <CPtrArray::Append(void*)+0xc4>
   2793c:	e1a06001 	mov	r6, r1
   27940:	0a000003 	beq	27954 <CPtrArray::Append(void*)+0x44>
   27944:	e2803001 	add	r3, r0, #1
   27948:	e7856100 	str	r6, [r5, r0, lsl #2]
   2794c:	e5843008 	str	r3, [r4, #8]
   27950:	e8bd8070 	pop	{r4, r5, r6, pc}
   27954:	e5940004 	ldr	r0, [r4, #4]
   27958:	e3500000 	cmp	r0, #0
   2795c:	0a000020 	beq	279e4 <CPtrArray::Append(void*)+0xd4>
   27960:	e0830000 	add	r0, r3, r0
   27964:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   27968:	83e00000 	mvnhi	r0, #0
   2796c:	91a00100 	lslls	r0, r0, #2
   27970:	eb000d9a 	bl	2afe0 <operator new[](unsigned int)>
   27974:	e5942000 	ldr	r2, [r4]
   27978:	e594100c 	ldr	r1, [r4, #12]
   2797c:	e1a02102 	lsl	r2, r2, #2
   27980:	e1a05000 	mov	r5, r0
   27984:	eb000ba9 	bl	2a830 <memcpy>
   27988:	e594000c 	ldr	r0, [r4, #12]
   2798c:	e3500000 	cmp	r0, #0
   27990:	0a000000 	beq	27998 <CPtrArray::Append(void*)+0x88>
   27994:	eb000d98 	bl	2affc <operator delete[](void*)>
   27998:	e5943000 	ldr	r3, [r4]
   2799c:	e5942004 	ldr	r2, [r4, #4]
   279a0:	e5940008 	ldr	r0, [r4, #8]
   279a4:	e0833002 	add	r3, r3, r2
   279a8:	e584500c 	str	r5, [r4, #12]
   279ac:	e5843000 	str	r3, [r4]
   279b0:	eaffffe3 	b	27944 <CPtrArray::Append(void*)+0x34>
   279b4:	e3a02047 	mov	r2, #71	; 0x47
   279b8:	e59f1034 	ldr	r1, [pc, #52]	; 279f4 <CPtrArray::Append(void*)+0xe4>
   279bc:	e59f0034 	ldr	r0, [pc, #52]	; 279f8 <CPtrArray::Append(void*)+0xe8>
   279c0:	ebfff378 	bl	247a8 <assertion_failed>
   279c4:	e3a02048 	mov	r2, #72	; 0x48
   279c8:	e59f1024 	ldr	r1, [pc, #36]	; 279f4 <CPtrArray::Append(void*)+0xe4>
   279cc:	e59f0028 	ldr	r0, [pc, #40]	; 279fc <CPtrArray::Append(void*)+0xec>
   279d0:	ebfff374 	bl	247a8 <assertion_failed>
   279d4:	e3a0204a 	mov	r2, #74	; 0x4a
   279d8:	e59f1014 	ldr	r1, [pc, #20]	; 279f4 <CPtrArray::Append(void*)+0xe4>
   279dc:	e59f001c 	ldr	r0, [pc, #28]	; 27a00 <CPtrArray::Append(void*)+0xf0>
   279e0:	ebfff370 	bl	247a8 <assertion_failed>
   279e4:	e3a0204d 	mov	r2, #77	; 0x4d
   279e8:	e59f1004 	ldr	r1, [pc, #4]	; 279f4 <CPtrArray::Append(void*)+0xe4>
   279ec:	e59f0010 	ldr	r0, [pc, #16]	; 27a04 <CPtrArray::Append(void*)+0xf4>
   279f0:	ebfff36c 	bl	247a8 <assertion_failed>
   279f4:	00047050 	.word	0x00047050
   279f8:	00047060 	.word	0x00047060
   279fc:	000470c4 	.word	0x000470c4
   27a00:	000470a4 	.word	0x000470a4
   27a04:	00047074 	.word	0x00047074

00027a08 <CPtrArray::RemoveLast()>:
   27a08:	e5903008 	ldr	r3, [r0, #8]
   27a0c:	e3530000 	cmp	r3, #0
   27a10:	0a000002 	beq	27a20 <CPtrArray::RemoveLast()+0x18>
   27a14:	e2433001 	sub	r3, r3, #1
   27a18:	e5803008 	str	r3, [r0, #8]
   27a1c:	e12fff1e 	bx	lr
   27a20:	e3a02060 	mov	r2, #96	; 0x60
   27a24:	e92d4010 	push	{r4, lr}
   27a28:	e59f1004 	ldr	r1, [pc, #4]	; 27a34 <CPtrArray::RemoveLast()+0x2c>
   27a2c:	e59f0004 	ldr	r0, [pc, #4]	; 27a38 <CPtrArray::RemoveLast()+0x30>
   27a30:	ebfff35c 	bl	247a8 <assertion_failed>
   27a34:	00047050 	.word	0x00047050
   27a38:	000470d4 	.word	0x000470d4
   27a3c:	00000000 	.word	0x00000000

00027a40 <CString::~CString()>:
   27a40:	e92d4010 	push	{r4, lr}
   27a44:	e1a04000 	mov	r4, r0
   27a48:	e5900004 	ldr	r0, [r0, #4]
   27a4c:	e59f3014 	ldr	r3, [pc, #20]	; 27a68 <CString::~CString()+0x28>
   27a50:	e3500000 	cmp	r0, #0
   27a54:	e5843000 	str	r3, [r4]
   27a58:	0a000000 	beq	27a60 <CString::~CString()+0x20>
   27a5c:	eb000d66 	bl	2affc <operator delete[](void*)>
   27a60:	e1a00004 	mov	r0, r4
   27a64:	e8bd8010 	pop	{r4, pc}
   27a68:	00047104 	.word	0x00047104

00027a6c <CString::~CString()>:
   27a6c:	e92d4010 	push	{r4, lr}
   27a70:	e1a04000 	mov	r4, r0
   27a74:	e5900004 	ldr	r0, [r0, #4]
   27a78:	e59f3020 	ldr	r3, [pc, #32]	; 27aa0 <CString::~CString()+0x34>
   27a7c:	e3500000 	cmp	r0, #0
   27a80:	e5843000 	str	r3, [r4]
   27a84:	0a000000 	beq	27a8c <CString::~CString()+0x20>
   27a88:	eb000d5b 	bl	2affc <operator delete[](void*)>
   27a8c:	e1a00004 	mov	r0, r4
   27a90:	e3a01010 	mov	r1, #16
   27a94:	eb000d59 	bl	2b000 <operator delete(void*, unsigned int)>
   27a98:	e1a00004 	mov	r0, r4
   27a9c:	e8bd8010 	pop	{r4, pc}
   27aa0:	00047104 	.word	0x00047104

00027aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   27aa4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   27aa8:	e990004c 	ldmib	r0, {r2, r3, r6}
   27aac:	e0466002 	sub	r6, r6, r2
   27ab0:	e0861001 	add	r1, r6, r1
   27ab4:	e2812001 	add	r2, r1, #1
   27ab8:	e1520003 	cmp	r2, r3
   27abc:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   27ac0:	e1a04000 	mov	r4, r0
   27ac4:	e2815041 	add	r5, r1, #65	; 0x41
   27ac8:	e1a00005 	mov	r0, r5
   27acc:	eb000d43 	bl	2afe0 <operator new[](unsigned int)>
   27ad0:	e3a02000 	mov	r2, #0
   27ad4:	e594300c 	ldr	r3, [r4, #12]
   27ad8:	e1a07000 	mov	r7, r0
   27adc:	e5c32000 	strb	r2, [r3]
   27ae0:	e5941004 	ldr	r1, [r4, #4]
   27ae4:	eb0009fa 	bl	2a2d4 <strcpy>
   27ae8:	e5940004 	ldr	r0, [r4, #4]
   27aec:	e3500000 	cmp	r0, #0
   27af0:	0a000000 	beq	27af8 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   27af4:	eb000d40 	bl	2affc <operator delete[](void*)>
   27af8:	e0876006 	add	r6, r7, r6
   27afc:	e584600c 	str	r6, [r4, #12]
   27b00:	e5847004 	str	r7, [r4, #4]
   27b04:	e5845008 	str	r5, [r4, #8]
   27b08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00027b0c <CString::CString()>:
   27b0c:	e3a02000 	mov	r2, #0
   27b10:	e59f1008 	ldr	r1, [pc, #8]	; 27b20 <CString::CString()+0x14>
   27b14:	e5802008 	str	r2, [r0, #8]
   27b18:	e8800006 	stm	r0, {r1, r2}
   27b1c:	e12fff1e 	bx	lr
   27b20:	00047104 	.word	0x00047104

00027b24 <CString::CString(char const*)>:
   27b24:	e92d4010 	push	{r4, lr}
   27b28:	e1a04000 	mov	r4, r0
   27b2c:	e59f3034 	ldr	r3, [pc, #52]	; 27b68 <CString::CString(char const*)+0x44>
   27b30:	e24dd008 	sub	sp, sp, #8
   27b34:	e5843000 	str	r3, [r4]
   27b38:	e1a00001 	mov	r0, r1
   27b3c:	e58d1004 	str	r1, [sp, #4]
   27b40:	eb00093f 	bl	2a044 <strlen>
   27b44:	e2800001 	add	r0, r0, #1
   27b48:	e5840008 	str	r0, [r4, #8]
   27b4c:	eb000d23 	bl	2afe0 <operator new[](unsigned int)>
   27b50:	e59d1004 	ldr	r1, [sp, #4]
   27b54:	e5840004 	str	r0, [r4, #4]
   27b58:	eb0009dd 	bl	2a2d4 <strcpy>
   27b5c:	e1a00004 	mov	r0, r4
   27b60:	e28dd008 	add	sp, sp, #8
   27b64:	e8bd8010 	pop	{r4, pc}
   27b68:	00047104 	.word	0x00047104

00027b6c <CString::operator char const*() const>:
   27b6c:	e5900004 	ldr	r0, [r0, #4]
   27b70:	e59f3008 	ldr	r3, [pc, #8]	; 27b80 <CString::operator char const*() const+0x14>
   27b74:	e3500000 	cmp	r0, #0
   27b78:	01a00003 	moveq	r0, r3
   27b7c:	e12fff1e 	bx	lr
   27b80:	000493c8 	.word	0x000493c8

00027b84 <CString::operator=(char const*)>:
   27b84:	e92d4010 	push	{r4, lr}
   27b88:	e1a04000 	mov	r4, r0
   27b8c:	e5900004 	ldr	r0, [r0, #4]
   27b90:	e24dd008 	sub	sp, sp, #8
   27b94:	e3500000 	cmp	r0, #0
   27b98:	0a000002 	beq	27ba8 <CString::operator=(char const*)+0x24>
   27b9c:	e58d1004 	str	r1, [sp, #4]
   27ba0:	eb000d15 	bl	2affc <operator delete[](void*)>
   27ba4:	e59d1004 	ldr	r1, [sp, #4]
   27ba8:	e1a00001 	mov	r0, r1
   27bac:	e58d1004 	str	r1, [sp, #4]
   27bb0:	eb000923 	bl	2a044 <strlen>
   27bb4:	e2800001 	add	r0, r0, #1
   27bb8:	e5840008 	str	r0, [r4, #8]
   27bbc:	eb000d07 	bl	2afe0 <operator new[](unsigned int)>
   27bc0:	e59d1004 	ldr	r1, [sp, #4]
   27bc4:	e5840004 	str	r0, [r4, #4]
   27bc8:	eb0009c1 	bl	2a2d4 <strcpy>
   27bcc:	e5940004 	ldr	r0, [r4, #4]
   27bd0:	e28dd008 	add	sp, sp, #8
   27bd4:	e8bd8010 	pop	{r4, pc}

00027bd8 <CString::operator=(CString const&)>:
   27bd8:	e92d4070 	push	{r4, r5, r6, lr}
   27bdc:	e1a04000 	mov	r4, r0
   27be0:	e5900004 	ldr	r0, [r0, #4]
   27be4:	e1a05001 	mov	r5, r1
   27be8:	e3500000 	cmp	r0, #0
   27bec:	0a000000 	beq	27bf4 <CString::operator=(CString const&)+0x1c>
   27bf0:	eb000d01 	bl	2affc <operator delete[](void*)>
   27bf4:	e5950004 	ldr	r0, [r5, #4]
   27bf8:	e59f6030 	ldr	r6, [pc, #48]	; 27c30 <CString::operator=(CString const&)+0x58>
   27bfc:	e3500000 	cmp	r0, #0
   27c00:	01a00006 	moveq	r0, r6
   27c04:	eb00090e 	bl	2a044 <strlen>
   27c08:	e2800001 	add	r0, r0, #1
   27c0c:	e5840008 	str	r0, [r4, #8]
   27c10:	eb000cf2 	bl	2afe0 <operator new[](unsigned int)>
   27c14:	e5840004 	str	r0, [r4, #4]
   27c18:	e5951004 	ldr	r1, [r5, #4]
   27c1c:	e3510000 	cmp	r1, #0
   27c20:	01a01006 	moveq	r1, r6
   27c24:	eb0009aa 	bl	2a2d4 <strcpy>
   27c28:	e1a00004 	mov	r0, r4
   27c2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   27c30:	000493c8 	.word	0x000493c8

00027c34 <CString::GetLength() const>:
   27c34:	e5900004 	ldr	r0, [r0, #4]
   27c38:	e3500000 	cmp	r0, #0
   27c3c:	012fff1e 	bxeq	lr
   27c40:	ea0008ff 	b	2a044 <strlen>

00027c44 <CString::Append(char const*)>:
   27c44:	e92d4070 	push	{r4, r5, r6, lr}
   27c48:	e3a03001 	mov	r3, #1
   27c4c:	e1a04000 	mov	r4, r0
   27c50:	e5900004 	ldr	r0, [r0, #4]
   27c54:	e1a06001 	mov	r6, r1
   27c58:	e3500000 	cmp	r0, #0
   27c5c:	e5843008 	str	r3, [r4, #8]
   27c60:	0a000003 	beq	27c74 <CString::Append(char const*)+0x30>
   27c64:	eb0008f6 	bl	2a044 <strlen>
   27c68:	e5943008 	ldr	r3, [r4, #8]
   27c6c:	e0830000 	add	r0, r3, r0
   27c70:	e5840008 	str	r0, [r4, #8]
   27c74:	e1a00006 	mov	r0, r6
   27c78:	eb0008f1 	bl	2a044 <strlen>
   27c7c:	e5943008 	ldr	r3, [r4, #8]
   27c80:	e0800003 	add	r0, r0, r3
   27c84:	e5840008 	str	r0, [r4, #8]
   27c88:	eb000cd4 	bl	2afe0 <operator new[](unsigned int)>
   27c8c:	e5941004 	ldr	r1, [r4, #4]
   27c90:	e1a05000 	mov	r5, r0
   27c94:	e3510000 	cmp	r1, #0
   27c98:	05c01000 	strbeq	r1, [r0]
   27c9c:	0a000004 	beq	27cb4 <CString::Append(char const*)+0x70>
   27ca0:	eb00098b 	bl	2a2d4 <strcpy>
   27ca4:	e5940004 	ldr	r0, [r4, #4]
   27ca8:	e3500000 	cmp	r0, #0
   27cac:	0a000000 	beq	27cb4 <CString::Append(char const*)+0x70>
   27cb0:	eb000cd1 	bl	2affc <operator delete[](void*)>
   27cb4:	e1a01006 	mov	r1, r6
   27cb8:	e1a00005 	mov	r0, r5
   27cbc:	eb00099d 	bl	2a338 <strcat>
   27cc0:	e5845004 	str	r5, [r4, #4]
   27cc4:	e8bd8070 	pop	{r4, r5, r6, pc}

00027cc8 <CString::Compare(char const*) const>:
   27cc8:	e5900004 	ldr	r0, [r0, #4]
   27ccc:	ea0008e6 	b	2a06c <strcmp>

00027cd0 <CString::Find(char) const>:
   27cd0:	e5902004 	ldr	r2, [r0, #4]
   27cd4:	e1d230d0 	ldrsb	r3, [r2]
   27cd8:	e3530000 	cmp	r3, #0
   27cdc:	0a000006 	beq	27cfc <CString::Find(char) const+0x2c>
   27ce0:	e3a00000 	mov	r0, #0
   27ce4:	e1510003 	cmp	r1, r3
   27ce8:	012fff1e 	bxeq	lr
   27cec:	e1f230d1 	ldrsb	r3, [r2, #1]!
   27cf0:	e2800001 	add	r0, r0, #1
   27cf4:	e3530000 	cmp	r3, #0
   27cf8:	1afffff9 	bne	27ce4 <CString::Find(char) const+0x14>
   27cfc:	e3e00000 	mvn	r0, #0
   27d00:	e12fff1e 	bx	lr

00027d04 <CString::PutChar(char, unsigned int)>:
   27d04:	e92d4070 	push	{r4, r5, r6, lr}
   27d08:	e2524000 	subs	r4, r2, #0
   27d0c:	08bd8070 	popeq	{r4, r5, r6, pc}
   27d10:	e1a06001 	mov	r6, r1
   27d14:	e1a01004 	mov	r1, r4
   27d18:	e1a05000 	mov	r5, r0
   27d1c:	ebffff60 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27d20:	e2442001 	sub	r2, r4, #1
   27d24:	e595300c 	ldr	r3, [r5, #12]
   27d28:	e2422001 	sub	r2, r2, #1
   27d2c:	e2830001 	add	r0, r3, #1
   27d30:	e3720001 	cmn	r2, #1
   27d34:	e585000c 	str	r0, [r5, #12]
   27d38:	e5c36000 	strb	r6, [r3]
   27d3c:	1afffff8 	bne	27d24 <CString::PutChar(char, unsigned int)+0x20>
   27d40:	e8bd8070 	pop	{r4, r5, r6, pc}

00027d44 <CString::PutString(char const*)>:
   27d44:	e92d4070 	push	{r4, r5, r6, lr}
   27d48:	e1a04000 	mov	r4, r0
   27d4c:	e1a00001 	mov	r0, r1
   27d50:	e1a06001 	mov	r6, r1
   27d54:	eb0008ba 	bl	2a044 <strlen>
   27d58:	e2505000 	subs	r5, r0, #0
   27d5c:	0a000002 	beq	27d6c <CString::PutString(char const*)+0x28>
   27d60:	e1a01005 	mov	r1, r5
   27d64:	e1a00004 	mov	r0, r4
   27d68:	ebffff4d 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27d6c:	e1a01006 	mov	r1, r6
   27d70:	e594000c 	ldr	r0, [r4, #12]
   27d74:	eb000956 	bl	2a2d4 <strcpy>
   27d78:	e594000c 	ldr	r0, [r4, #12]
   27d7c:	e0800005 	add	r0, r0, r5
   27d80:	e584000c 	str	r0, [r4, #12]
   27d84:	e8bd8070 	pop	{r4, r5, r6, pc}

00027d88 <CString::Replace(char const*, char const*)>:
   27d88:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27d8c:	e1d170d0 	ldrsb	r7, [r1]
   27d90:	e24dd010 	sub	sp, sp, #16
   27d94:	e3570000 	cmp	r7, #0
   27d98:	1a000002 	bne	27da8 <CString::Replace(char const*, char const*)+0x20>
   27d9c:	e1a00007 	mov	r0, r7
   27da0:	e28dd010 	add	sp, sp, #16
   27da4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27da8:	e1a05000 	mov	r5, r0
   27dac:	e1a06001 	mov	r6, r1
   27db0:	e5901004 	ldr	r1, [r0, #4]
   27db4:	e1a0000d 	mov	r0, sp
   27db8:	e1a08002 	mov	r8, r2
   27dbc:	ebffff58 	bl	27b24 <CString::CString(char const*)>
   27dc0:	e5950004 	ldr	r0, [r5, #4]
   27dc4:	e3500000 	cmp	r0, #0
   27dc8:	0a000000 	beq	27dd0 <CString::Replace(char const*, char const*)+0x48>
   27dcc:	eb000c8a 	bl	2affc <operator delete[](void*)>
   27dd0:	e3a00040 	mov	r0, #64	; 0x40
   27dd4:	e5850008 	str	r0, [r5, #8]
   27dd8:	eb000c80 	bl	2afe0 <operator new[](unsigned int)>
   27ddc:	e3a07000 	mov	r7, #0
   27de0:	e59d9004 	ldr	r9, [sp, #4]
   27de4:	e5850004 	str	r0, [r5, #4]
   27de8:	e585000c 	str	r0, [r5, #12]
   27dec:	e1a00009 	mov	r0, r9
   27df0:	e1d610d0 	ldrsb	r1, [r6]
   27df4:	eb000960 	bl	2a37c <strchr>
   27df8:	e2504000 	subs	r4, r0, #0
   27dfc:	0a00002a 	beq	27eac <CString::Replace(char const*, char const*)+0x124>
   27e00:	e1590004 	cmp	r9, r4
   27e04:	3a000016 	bcc	27e64 <CString::Replace(char const*, char const*)+0xdc>
   27e08:	e1d630d1 	ldrsb	r3, [r6, #1]
   27e0c:	e2842001 	add	r2, r4, #1
   27e10:	e3530000 	cmp	r3, #0
   27e14:	e286e001 	add	lr, r6, #1
   27e18:	0a00001d 	beq	27e94 <CString::Replace(char const*, char const*)+0x10c>
   27e1c:	e1a0c002 	mov	ip, r2
   27e20:	ea000003 	b	27e34 <CString::Replace(char const*, char const*)+0xac>
   27e24:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   27e28:	e1a0200c 	mov	r2, ip
   27e2c:	e3530000 	cmp	r3, #0
   27e30:	0a000017 	beq	27e94 <CString::Replace(char const*, char const*)+0x10c>
   27e34:	e0dc40d1 	ldrsb	r4, [ip], #1
   27e38:	e1540003 	cmp	r4, r3
   27e3c:	0afffff8 	beq	27e24 <CString::Replace(char const*, char const*)+0x9c>
   27e40:	e3a01001 	mov	r1, #1
   27e44:	e1a00005 	mov	r0, r5
   27e48:	e0d940d1 	ldrsb	r4, [r9], #1
   27e4c:	ebffff14 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27e50:	e595300c 	ldr	r3, [r5, #12]
   27e54:	e2832001 	add	r2, r3, #1
   27e58:	e585200c 	str	r2, [r5, #12]
   27e5c:	e5c34000 	strb	r4, [r3]
   27e60:	eaffffe1 	b	27dec <CString::Replace(char const*, char const*)+0x64>
   27e64:	e3a01001 	mov	r1, #1
   27e68:	e1a00005 	mov	r0, r5
   27e6c:	e0d9a0d1 	ldrsb	sl, [r9], #1
   27e70:	ebffff0b 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27e74:	e595300c 	ldr	r3, [r5, #12]
   27e78:	e1540009 	cmp	r4, r9
   27e7c:	e2832001 	add	r2, r3, #1
   27e80:	e585200c 	str	r2, [r5, #12]
   27e84:	e5c3a000 	strb	sl, [r3]
   27e88:	1afffff5 	bne	27e64 <CString::Replace(char const*, char const*)+0xdc>
   27e8c:	e1a09004 	mov	r9, r4
   27e90:	eaffffdc 	b	27e08 <CString::Replace(char const*, char const*)+0x80>
   27e94:	e1a01008 	mov	r1, r8
   27e98:	e1a00005 	mov	r0, r5
   27e9c:	e1a09002 	mov	r9, r2
   27ea0:	e2877001 	add	r7, r7, #1
   27ea4:	ebffffa6 	bl	27d44 <CString::PutString(char const*)>
   27ea8:	eaffffcf 	b	27dec <CString::Replace(char const*, char const*)+0x64>
   27eac:	e1a00005 	mov	r0, r5
   27eb0:	e1a01009 	mov	r1, r9
   27eb4:	ebffffa2 	bl	27d44 <CString::PutString(char const*)>
   27eb8:	e595200c 	ldr	r2, [r5, #12]
   27ebc:	e59f3020 	ldr	r3, [pc, #32]	; 27ee4 <CString::Replace(char const*, char const*)+0x15c>
   27ec0:	e5c24000 	strb	r4, [r2]
   27ec4:	e59d0004 	ldr	r0, [sp, #4]
   27ec8:	e58d3000 	str	r3, [sp]
   27ecc:	e3500000 	cmp	r0, #0
   27ed0:	0affffb1 	beq	27d9c <CString::Replace(char const*, char const*)+0x14>
   27ed4:	eb000c48 	bl	2affc <operator delete[](void*)>
   27ed8:	e1a00007 	mov	r0, r7
   27edc:	e28dd010 	add	sp, sp, #16
   27ee0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27ee4:	00047104 	.word	0x00047104

00027ee8 <CString::ReserveSpace(unsigned int)>:
   27ee8:	e3510000 	cmp	r1, #0
   27eec:	012fff1e 	bxeq	lr
   27ef0:	eafffeeb 	b	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>

00027ef4 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   27ef4:	e1510002 	cmp	r1, r2
   27ef8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27efc:	e1a05001 	mov	r5, r1
   27f00:	e1a06002 	mov	r6, r2
   27f04:	e1a08000 	mov	r8, r0
   27f08:	e1a07003 	mov	r7, r3
   27f0c:	23a0a001 	movcs	sl, #1
   27f10:	3a000023 	bcc	27fa4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xb0>
   27f14:	e00a0a96 	mul	sl, r6, sl
   27f18:	e1a00005 	mov	r0, r5
   27f1c:	e1a0100a 	mov	r1, sl
   27f20:	eb005a8e 	bl	3e960 <__udivsi3>
   27f24:	e1500006 	cmp	r0, r6
   27f28:	e1a04000 	mov	r4, r0
   27f2c:	2afffff8 	bcs	27f14 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
   27f30:	e3570000 	cmp	r7, #0
   27f34:	13a09037 	movne	r9, #55	; 0x37
   27f38:	03a09057 	moveq	r9, #87	; 0x57
   27f3c:	e1a07008 	mov	r7, r8
   27f40:	ea000003 	b	27f54 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
   27f44:	e1a01000 	mov	r1, r0
   27f48:	e1a00005 	mov	r0, r5
   27f4c:	eb005a83 	bl	3e960 <__udivsi3>
   27f50:	e1a04000 	mov	r4, r0
   27f54:	e1a00005 	mov	r0, r5
   27f58:	e1a0100a 	mov	r1, sl
   27f5c:	eb005afa 	bl	3eb4c <__aeabi_uidivmod>
   27f60:	e3540009 	cmp	r4, #9
   27f64:	e2840030 	add	r0, r4, #48	; 0x30
   27f68:	80894004 	addhi	r4, r9, r4
   27f6c:	96af4070 	sxtbls	r4, r0
   27f70:	86af4074 	sxtbhi	r4, r4
   27f74:	e1a0000a 	mov	r0, sl
   27f78:	e1a05001 	mov	r5, r1
   27f7c:	e4c74001 	strb	r4, [r7], #1
   27f80:	e1a01006 	mov	r1, r6
   27f84:	eb005a75 	bl	3e960 <__udivsi3>
   27f88:	e15a0006 	cmp	sl, r6
   27f8c:	e1a0a000 	mov	sl, r0
   27f90:	2affffeb 	bcs	27f44 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
   27f94:	e3a03000 	mov	r3, #0
   27f98:	e1a00008 	mov	r0, r8
   27f9c:	e5c73000 	strb	r3, [r7]
   27fa0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27fa4:	e1a04001 	mov	r4, r1
   27fa8:	e3a0a001 	mov	sl, #1
   27fac:	eaffffdf 	b	27f30 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

00027fb0 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
   27fb0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27fb4:	e3a0b000 	mov	fp, #0
   27fb8:	e1a08002 	mov	r8, r2
   27fbc:	e24dd01c 	sub	sp, sp, #28
   27fc0:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
   27fc4:	e15b0003 	cmp	fp, r3
   27fc8:	e1a09003 	mov	r9, r3
   27fcc:	e5dd3044 	ldrb	r3, [sp, #68]	; 0x44
   27fd0:	01520008 	cmpeq	r2, r8
   27fd4:	e1a0a002 	mov	sl, r2
   27fd8:	93a06001 	movls	r6, #1
   27fdc:	93a07000 	movls	r7, #0
   27fe0:	e58d0014 	str	r0, [sp, #20]
   27fe4:	e58d3004 	str	r3, [sp, #4]
   27fe8:	8a000041 	bhi	280f4 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x144>
   27fec:	e0030b96 	mul	r3, r6, fp
   27ff0:	e023379a 	mla	r3, sl, r7, r3
   27ff4:	e0876a96 	umull	r6, r7, r6, sl
   27ff8:	e0837007 	add	r7, r3, r7
   27ffc:	e1a02006 	mov	r2, r6
   28000:	e1a03007 	mov	r3, r7
   28004:	e1a00008 	mov	r0, r8
   28008:	e1a01009 	mov	r1, r9
   2800c:	eb005b9c 	bl	3ee84 <__aeabi_uldivmod>
   28010:	e15b0001 	cmp	fp, r1
   28014:	015a0000 	cmpeq	sl, r0
   28018:	e1a04000 	mov	r4, r0
   2801c:	e1a05001 	mov	r5, r1
   28020:	9afffff1 	bls	27fec <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x3c>
   28024:	e59d3004 	ldr	r3, [sp, #4]
   28028:	e3530000 	cmp	r3, #0
   2802c:	13a03037 	movne	r3, #55	; 0x37
   28030:	03a03057 	moveq	r3, #87	; 0x57
   28034:	e58d3010 	str	r3, [sp, #16]
   28038:	e59d3014 	ldr	r3, [sp, #20]
   2803c:	e58d3004 	str	r3, [sp, #4]
   28040:	ea00000a 	b	28070 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0xc0>
   28044:	e58d000c 	str	r0, [sp, #12]
   28048:	e58d1008 	str	r1, [sp, #8]
   2804c:	e1a00008 	mov	r0, r8
   28050:	e1a01009 	mov	r1, r9
   28054:	eb005b8a 	bl	3ee84 <__aeabi_uldivmod>
   28058:	e59d200c 	ldr	r2, [sp, #12]
   2805c:	e59d3008 	ldr	r3, [sp, #8]
   28060:	e1a04000 	mov	r4, r0
   28064:	e1a06002 	mov	r6, r2
   28068:	e1a05001 	mov	r5, r1
   2806c:	e1a07003 	mov	r7, r3
   28070:	e1a00008 	mov	r0, r8
   28074:	e1a01009 	mov	r1, r9
   28078:	e1a02006 	mov	r2, r6
   2807c:	e1a03007 	mov	r3, r7
   28080:	eb005b7f 	bl	3ee84 <__aeabi_uldivmod>
   28084:	e3550000 	cmp	r5, #0
   28088:	03540009 	cmpeq	r4, #9
   2808c:	e1a09003 	mov	r9, r3
   28090:	859d3010 	ldrhi	r3, [sp, #16]
   28094:	e1a08002 	mov	r8, r2
   28098:	e2842030 	add	r2, r4, #48	; 0x30
   2809c:	80834004 	addhi	r4, r3, r4
   280a0:	e59d3004 	ldr	r3, [sp, #4]
   280a4:	96af4072 	sxtbls	r4, r2
   280a8:	86af4074 	sxtbhi	r4, r4
   280ac:	e4c34001 	strb	r4, [r3], #1
   280b0:	e1a0200a 	mov	r2, sl
   280b4:	e58d3004 	str	r3, [sp, #4]
   280b8:	e1a00006 	mov	r0, r6
   280bc:	e1a0300b 	mov	r3, fp
   280c0:	e1a01007 	mov	r1, r7
   280c4:	eb005b6e 	bl	3ee84 <__aeabi_uldivmod>
   280c8:	e15b0007 	cmp	fp, r7
   280cc:	015a0006 	cmpeq	sl, r6
   280d0:	e1a02000 	mov	r2, r0
   280d4:	e1a03001 	mov	r3, r1
   280d8:	9affffd9 	bls	28044 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x94>
   280dc:	e3a03000 	mov	r3, #0
   280e0:	e59d0014 	ldr	r0, [sp, #20]
   280e4:	e59d2004 	ldr	r2, [sp, #4]
   280e8:	e5c23000 	strb	r3, [r2]
   280ec:	e28dd01c 	add	sp, sp, #28
   280f0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   280f4:	e1a04008 	mov	r4, r8
   280f8:	e1a05009 	mov	r5, r9
   280fc:	e3a06001 	mov	r6, #1
   28100:	e3a07000 	mov	r7, #0
   28104:	eaffffc6 	b	28024 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x74>

00028108 <CString::ftoa(char*, double, unsigned int)>:
   28108:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2810c:	ed2d8b02 	vpush	{d8}
   28110:	ec432b18 	vmov	d8, r2, r3
   28114:	eeb58bc0 	vcmpe.f64	d8, #0.0
   28118:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   2811c:	ed9f7b97 	vldr	d7, [pc, #604]	; 28380 <CString::ftoa(char*, double, unsigned int)+0x278>
   28120:	4eb18b48 	vnegmi.f64	d8, d8
   28124:	43a0302d 	movmi	r3, #45	; 0x2d
   28128:	e1a0a000 	mov	sl, r0
   2812c:	eeb48bc7 	vcmpe.f64	d8, d7
   28130:	44ca3001 	strbmi	r3, [sl], #1
   28134:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   28138:	e1a09000 	mov	r9, r0
   2813c:	e24dd01c 	sub	sp, sp, #28
   28140:	ca00007e 	bgt	28340 <CString::ftoa(char*, double, unsigned int)+0x238>
   28144:	eefc7bc8 	vcvt.u32.f64	s15, d8
   28148:	ee177a90 	vmov	r7, s15
   2814c:	e3570009 	cmp	r7, #9
   28150:	83a04001 	movhi	r4, #1
   28154:	9a000080 	bls	2835c <CString::ftoa(char*, double, unsigned int)+0x254>
   28158:	e0844104 	add	r4, r4, r4, lsl #2
   2815c:	e1a04084 	lsl	r4, r4, #1
   28160:	e1a01004 	mov	r1, r4
   28164:	e1a00007 	mov	r0, r7
   28168:	eb0059fc 	bl	3e960 <__udivsi3>
   2816c:	e3500009 	cmp	r0, #9
   28170:	e1a05000 	mov	r5, r0
   28174:	8afffff7 	bhi	28158 <CString::ftoa(char*, double, unsigned int)+0x50>
   28178:	e1a0600a 	mov	r6, sl
   2817c:	e1a0b007 	mov	fp, r7
   28180:	e59f8208 	ldr	r8, [pc, #520]	; 28390 <CString::ftoa(char*, double, unsigned int)+0x288>
   28184:	ea000003 	b	28198 <CString::ftoa(char*, double, unsigned int)+0x90>
   28188:	e1a01004 	mov	r1, r4
   2818c:	e1a0000b 	mov	r0, fp
   28190:	eb0059f2 	bl	3e960 <__udivsi3>
   28194:	e1a05000 	mov	r5, r0
   28198:	e1a0000b 	mov	r0, fp
   2819c:	e1a01004 	mov	r1, r4
   281a0:	eb005a69 	bl	3eb4c <__aeabi_uidivmod>
   281a4:	e1a0b001 	mov	fp, r1
   281a8:	e0813498 	umull	r3, r1, r8, r4
   281ac:	e3550009 	cmp	r5, #9
   281b0:	e2850030 	add	r0, r5, #48	; 0x30
   281b4:	82855057 	addhi	r5, r5, #87	; 0x57
   281b8:	96af5070 	sxtbls	r5, r0
   281bc:	86af5075 	sxtbhi	r5, r5
   281c0:	e3540009 	cmp	r4, #9
   281c4:	e4c65001 	strb	r5, [r6], #1
   281c8:	e1a041a1 	lsr	r4, r1, #3
   281cc:	8affffed 	bhi	28188 <CString::ftoa(char*, double, unsigned int)+0x80>
   281d0:	e3a03000 	mov	r3, #0
   281d4:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   281d8:	e5c63000 	strb	r3, [r6]
   281dc:	e1520003 	cmp	r2, r3
   281e0:	1a000003 	bne	281f4 <CString::ftoa(char*, double, unsigned int)+0xec>
   281e4:	e1a00009 	mov	r0, r9
   281e8:	e28dd01c 	add	sp, sp, #28
   281ec:	ecbd8b02 	vpop	{d8}
   281f0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   281f4:	e1a0000a 	mov	r0, sl
   281f8:	eb000791 	bl	2a044 <strlen>
   281fc:	e3a0302e 	mov	r3, #46	; 0x2e
   28200:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   28204:	e7ca3000 	strb	r3, [sl, r0]
   28208:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
   2820c:	e3520009 	cmp	r2, #9
   28210:	e08a2000 	add	r2, sl, r0
   28214:	31a0a003 	movcc	sl, r3
   28218:	23a0a009 	movcs	sl, #9
   2821c:	e3530001 	cmp	r3, #1
   28220:	e58d2004 	str	r2, [sp, #4]
   28224:	e282b001 	add	fp, r2, #1
   28228:	9a000051 	bls	28374 <CString::ftoa(char*, double, unsigned int)+0x26c>
   2822c:	e3a02002 	mov	r2, #2
   28230:	e3a0300a 	mov	r3, #10
   28234:	e2822001 	add	r2, r2, #1
   28238:	e0833103 	add	r3, r3, r3, lsl #2
   2823c:	e152000a 	cmp	r2, sl
   28240:	e1a03083 	lsl	r3, r3, #1
   28244:	9afffffa 	bls	28234 <CString::ftoa(char*, double, unsigned int)+0x12c>
   28248:	ee073a90 	vmov	s15, r3
   2824c:	eeb87b67 	vcvt.f64.u32	d7, s15
   28250:	ee067a90 	vmov	s13, r7
   28254:	eeb86b66 	vcvt.f64.u32	d6, s13
   28258:	ee386b46 	vsub.f64	d6, d8, d6
   2825c:	ee267b07 	vmul.f64	d7, d6, d7
   28260:	eefc7bc7 	vcvt.u32.f64	s15, d7
   28264:	ee178a90 	vmov	r8, s15
   28268:	e3580009 	cmp	r8, #9
   2826c:	83a04001 	movhi	r4, #1
   28270:	9a00003c 	bls	28368 <CString::ftoa(char*, double, unsigned int)+0x260>
   28274:	e0844104 	add	r4, r4, r4, lsl #2
   28278:	e1a04084 	lsl	r4, r4, #1
   2827c:	e1a01004 	mov	r1, r4
   28280:	e1a00008 	mov	r0, r8
   28284:	eb0059b5 	bl	3e960 <__udivsi3>
   28288:	e3500009 	cmp	r0, #9
   2828c:	e1a05000 	mov	r5, r0
   28290:	8afffff7 	bhi	28274 <CString::ftoa(char*, double, unsigned int)+0x16c>
   28294:	e59f70f4 	ldr	r7, [pc, #244]	; 28390 <CString::ftoa(char*, double, unsigned int)+0x288>
   28298:	e28d600c 	add	r6, sp, #12
   2829c:	ea000003 	b	282b0 <CString::ftoa(char*, double, unsigned int)+0x1a8>
   282a0:	e1a01004 	mov	r1, r4
   282a4:	e1a00008 	mov	r0, r8
   282a8:	eb0059ac 	bl	3e960 <__udivsi3>
   282ac:	e1a05000 	mov	r5, r0
   282b0:	e1a00008 	mov	r0, r8
   282b4:	e1a01004 	mov	r1, r4
   282b8:	eb005a23 	bl	3eb4c <__aeabi_uidivmod>
   282bc:	e3550009 	cmp	r5, #9
   282c0:	e2853030 	add	r3, r5, #48	; 0x30
   282c4:	96af5073 	sxtbls	r5, r3
   282c8:	e1a08001 	mov	r8, r1
   282cc:	e0813497 	umull	r3, r1, r7, r4
   282d0:	82855057 	addhi	r5, r5, #87	; 0x57
   282d4:	86af5075 	sxtbhi	r5, r5
   282d8:	e3540009 	cmp	r4, #9
   282dc:	e4c65001 	strb	r5, [r6], #1
   282e0:	e1a041a1 	lsr	r4, r1, #3
   282e4:	8affffed 	bhi	282a0 <CString::ftoa(char*, double, unsigned int)+0x198>
   282e8:	e3a03000 	mov	r3, #0
   282ec:	e28d000c 	add	r0, sp, #12
   282f0:	e5c63000 	strb	r3, [r6]
   282f4:	eb000752 	bl	2a044 <strlen>
   282f8:	e05a0000 	subs	r0, sl, r0
   282fc:	0a000008 	beq	28324 <CString::ftoa(char*, double, unsigned int)+0x21c>
   28300:	e1a0300b 	mov	r3, fp
   28304:	e3a02030 	mov	r2, #48	; 0x30
   28308:	e59dc004 	ldr	ip, [sp, #4]
   2830c:	e2801001 	add	r1, r0, #1
   28310:	e08c8001 	add	r8, ip, r1
   28314:	e4c32001 	strb	r2, [r3], #1
   28318:	e1530008 	cmp	r3, r8
   2831c:	1afffffc 	bne	28314 <CString::ftoa(char*, double, unsigned int)+0x20c>
   28320:	e08bb000 	add	fp, fp, r0
   28324:	e1a0000b 	mov	r0, fp
   28328:	e28d100c 	add	r1, sp, #12
   2832c:	eb0007e8 	bl	2a2d4 <strcpy>
   28330:	e1a00009 	mov	r0, r9
   28334:	e28dd01c 	add	sp, sp, #28
   28338:	ecbd8b02 	vpop	{d8}
   2833c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28340:	e1a0000a 	mov	r0, sl
   28344:	e59f1048 	ldr	r1, [pc, #72]	; 28394 <CString::ftoa(char*, double, unsigned int)+0x28c>
   28348:	eb0007e1 	bl	2a2d4 <strcpy>
   2834c:	e1a00009 	mov	r0, r9
   28350:	e28dd01c 	add	sp, sp, #28
   28354:	ecbd8b02 	vpop	{d8}
   28358:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2835c:	ee175a90 	vmov	r5, s15
   28360:	e3a04001 	mov	r4, #1
   28364:	eaffff83 	b	28178 <CString::ftoa(char*, double, unsigned int)+0x70>
   28368:	ee175a90 	vmov	r5, s15
   2836c:	e3a04001 	mov	r4, #1
   28370:	eaffffc7 	b	28294 <CString::ftoa(char*, double, unsigned int)+0x18c>
   28374:	ed9f7b03 	vldr	d7, [pc, #12]	; 28388 <CString::ftoa(char*, double, unsigned int)+0x280>
   28378:	eaffffb4 	b	28250 <CString::ftoa(char*, double, unsigned int)+0x148>
   2837c:	e320f000 	nop	{0}
   28380:	ffe00000 	.word	0xffe00000
   28384:	41efffff 	.word	0x41efffff
   28388:	00000000 	.word	0x00000000
   2838c:	40240000 	.word	0x40240000
   28390:	cccccccd 	.word	0xcccccccd
   28394:	000470e8 	.word	0x000470e8

00028398 <CString::FormatV(char const*, std::__va_list)>:
   28398:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2839c:	ed2d8b02 	vpush	{d8}
   283a0:	e24dd06c 	sub	sp, sp, #108	; 0x6c
   283a4:	e58d0030 	str	r0, [sp, #48]	; 0x30
   283a8:	e5900004 	ldr	r0, [r0, #4]
   283ac:	e1a0b001 	mov	fp, r1
   283b0:	e3500000 	cmp	r0, #0
   283b4:	e58d2020 	str	r2, [sp, #32]
   283b8:	0a000000 	beq	283c0 <CString::FormatV(char const*, std::__va_list)+0x28>
   283bc:	eb000b0e 	bl	2affc <operator delete[](void*)>
   283c0:	e3a00040 	mov	r0, #64	; 0x40
   283c4:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   283c8:	e5850008 	str	r0, [r5, #8]
   283cc:	eb000b03 	bl	2afe0 <operator new[](unsigned int)>
   283d0:	e5850004 	str	r0, [r5, #4]
   283d4:	e585000c 	str	r0, [r5, #12]
   283d8:	e1db40d0 	ldrsb	r4, [fp]
   283dc:	e3540000 	cmp	r4, #0
   283e0:	0a00006b 	beq	28594 <CString::FormatV(char const*, std::__va_list)+0x1fc>
   283e4:	e3540025 	cmp	r4, #37	; 0x25
   283e8:	1a00005c 	bne	28560 <CString::FormatV(char const*, std::__va_list)+0x1c8>
   283ec:	e1db30d1 	ldrsb	r3, [fp, #1]
   283f0:	e3530025 	cmp	r3, #37	; 0x25
   283f4:	0a00006b 	beq	285a8 <CString::FormatV(char const*, std::__va_list)+0x210>
   283f8:	e3530023 	cmp	r3, #35	; 0x23
   283fc:	01db30d2 	ldrsbeq	r3, [fp, #2]
   28400:	13a01000 	movne	r1, #0
   28404:	028bb002 	addeq	fp, fp, #2
   28408:	03a01001 	moveq	r1, #1
   2840c:	128bb001 	addne	fp, fp, #1
   28410:	e353002d 	cmp	r3, #45	; 0x2d
   28414:	03a02001 	moveq	r2, #1
   28418:	13a02000 	movne	r2, #0
   2841c:	01db30d1 	ldrsbeq	r3, [fp, #1]
   28420:	058d2024 	streq	r2, [sp, #36]	; 0x24
   28424:	008bb002 	addeq	fp, fp, r2
   28428:	158d2024 	strne	r2, [sp, #36]	; 0x24
   2842c:	e3530030 	cmp	r3, #48	; 0x30
   28430:	03a02001 	moveq	r2, #1
   28434:	13a02000 	movne	r2, #0
   28438:	01db30d1 	ldrsbeq	r3, [fp, #1]
   2843c:	058d2028 	streq	r2, [sp, #40]	; 0x28
   28440:	008bb002 	addeq	fp, fp, r2
   28444:	158d2028 	strne	r2, [sp, #40]	; 0x28
   28448:	e2432030 	sub	r2, r3, #48	; 0x30
   2844c:	e6ef2072 	uxtb	r2, r2
   28450:	e3520009 	cmp	r2, #9
   28454:	e3a04000 	mov	r4, #0
   28458:	8a000007 	bhi	2847c <CString::FormatV(char const*, std::__va_list)+0xe4>
   2845c:	e0844104 	add	r4, r4, r4, lsl #2
   28460:	e0834084 	add	r4, r3, r4, lsl #1
   28464:	e1fb30d1 	ldrsb	r3, [fp, #1]!
   28468:	e2444030 	sub	r4, r4, #48	; 0x30
   2846c:	e2432030 	sub	r2, r3, #48	; 0x30
   28470:	e6ef2072 	uxtb	r2, r2
   28474:	e3520009 	cmp	r2, #9
   28478:	9afffff7 	bls	2845c <CString::FormatV(char const*, std::__va_list)+0xc4>
   2847c:	e353002e 	cmp	r3, #46	; 0x2e
   28480:	0a000051 	beq	285cc <CString::FormatV(char const*, std::__va_list)+0x234>
   28484:	e3a00006 	mov	r0, #6
   28488:	e1dba0d0 	ldrsb	sl, [fp]
   2848c:	e35a006c 	cmp	sl, #108	; 0x6c
   28490:	13a03000 	movne	r3, #0
   28494:	11a06003 	movne	r6, r3
   28498:	158d300c 	strne	r3, [sp, #12]
   2849c:	1a00000a 	bne	284cc <CString::FormatV(char const*, std::__va_list)+0x134>
   284a0:	e1dba0d1 	ldrsb	sl, [fp, #1]
   284a4:	e35a006c 	cmp	sl, #108	; 0x6c
   284a8:	03a03001 	moveq	r3, #1
   284ac:	13a03000 	movne	r3, #0
   284b0:	03a06000 	moveq	r6, #0
   284b4:	13a06001 	movne	r6, #1
   284b8:	01dba0d2 	ldrsbeq	sl, [fp, #2]
   284bc:	008bb003 	addeq	fp, fp, r3
   284c0:	058d300c 	streq	r3, [sp, #12]
   284c4:	158d300c 	strne	r3, [sp, #12]
   284c8:	e28bb001 	add	fp, fp, #1
   284cc:	e24a3058 	sub	r3, sl, #88	; 0x58
   284d0:	e3530020 	cmp	r3, #32
   284d4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   284d8:	ea00004b 	b	2860c <CString::FormatV(char const*, std::__va_list)+0x274>
   284dc:	0002863c 	.word	0x0002863c
   284e0:	0002860c 	.word	0x0002860c
   284e4:	0002860c 	.word	0x0002860c
   284e8:	0002860c 	.word	0x0002860c
   284ec:	0002860c 	.word	0x0002860c
   284f0:	0002860c 	.word	0x0002860c
   284f4:	0002860c 	.word	0x0002860c
   284f8:	0002860c 	.word	0x0002860c
   284fc:	0002860c 	.word	0x0002860c
   28500:	0002860c 	.word	0x0002860c
   28504:	0002860c 	.word	0x0002860c
   28508:	00028b48 	.word	0x00028b48
   2850c:	00028828 	.word	0x00028828
   28510:	0002860c 	.word	0x0002860c
   28514:	00028b8c 	.word	0x00028b8c
   28518:	0002860c 	.word	0x0002860c
   2851c:	0002860c 	.word	0x0002860c
   28520:	00028828 	.word	0x00028828
   28524:	0002860c 	.word	0x0002860c
   28528:	0002860c 	.word	0x0002860c
   2852c:	0002860c 	.word	0x0002860c
   28530:	0002860c 	.word	0x0002860c
   28534:	0002860c 	.word	0x0002860c
   28538:	00028a50 	.word	0x00028a50
   2853c:	0002863c 	.word	0x0002863c
   28540:	0002860c 	.word	0x0002860c
   28544:	0002860c 	.word	0x0002860c
   28548:	00028a14 	.word	0x00028a14
   2854c:	0002860c 	.word	0x0002860c
   28550:	00028dd0 	.word	0x00028dd0
   28554:	0002860c 	.word	0x0002860c
   28558:	0002860c 	.word	0x0002860c
   2855c:	0002863c 	.word	0x0002863c
   28560:	e3a01001 	mov	r1, #1
   28564:	e1a00005 	mov	r0, r5
   28568:	ebfffd4d 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2856c:	e595300c 	ldr	r3, [r5, #12]
   28570:	e2832001 	add	r2, r3, #1
   28574:	e585200c 	str	r2, [r5, #12]
   28578:	e5c34000 	strb	r4, [r3]
   2857c:	e28bb001 	add	fp, fp, #1
   28580:	e1db40d0 	ldrsb	r4, [fp]
   28584:	e3540000 	cmp	r4, #0
   28588:	1affff95 	bne	283e4 <CString::FormatV(char const*, std::__va_list)+0x4c>
   2858c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   28590:	e593000c 	ldr	r0, [r3, #12]
   28594:	e3a03000 	mov	r3, #0
   28598:	e5c03000 	strb	r3, [r0]
   2859c:	e28dd06c 	add	sp, sp, #108	; 0x6c
   285a0:	ecbd8b02 	vpop	{d8}
   285a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   285a8:	e3a01001 	mov	r1, #1
   285ac:	e1a00005 	mov	r0, r5
   285b0:	ebfffd3b 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   285b4:	e595300c 	ldr	r3, [r5, #12]
   285b8:	e28bb002 	add	fp, fp, #2
   285bc:	e2832001 	add	r2, r3, #1
   285c0:	e585200c 	str	r2, [r5, #12]
   285c4:	e5c34000 	strb	r4, [r3]
   285c8:	eaffffec 	b	28580 <CString::FormatV(char const*, std::__va_list)+0x1e8>
   285cc:	e1dba0d1 	ldrsb	sl, [fp, #1]
   285d0:	e3a00000 	mov	r0, #0
   285d4:	e24a3030 	sub	r3, sl, #48	; 0x30
   285d8:	e6ef3073 	uxtb	r3, r3
   285dc:	e3530009 	cmp	r3, #9
   285e0:	e28bb001 	add	fp, fp, #1
   285e4:	8affffa8 	bhi	2848c <CString::FormatV(char const*, std::__va_list)+0xf4>
   285e8:	e0800100 	add	r0, r0, r0, lsl #2
   285ec:	e08a0080 	add	r0, sl, r0, lsl #1
   285f0:	e1fba0d1 	ldrsb	sl, [fp, #1]!
   285f4:	e2400030 	sub	r0, r0, #48	; 0x30
   285f8:	e24a3030 	sub	r3, sl, #48	; 0x30
   285fc:	e6ef3073 	uxtb	r3, r3
   28600:	e3530009 	cmp	r3, #9
   28604:	9afffff7 	bls	285e8 <CString::FormatV(char const*, std::__va_list)+0x250>
   28608:	eaffff9f 	b	2848c <CString::FormatV(char const*, std::__va_list)+0xf4>
   2860c:	e3a01001 	mov	r1, #1
   28610:	e1a00005 	mov	r0, r5
   28614:	ebfffd22 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28618:	e3a01001 	mov	r1, #1
   2861c:	e3a02025 	mov	r2, #37	; 0x25
   28620:	e595300c 	ldr	r3, [r5, #12]
   28624:	e0830001 	add	r0, r3, r1
   28628:	e585000c 	str	r0, [r5, #12]
   2862c:	e5c32000 	strb	r2, [r3]
   28630:	e1a00005 	mov	r0, r5
   28634:	e1db40d0 	ldrsb	r4, [fp]
   28638:	eaffffca 	b	28568 <CString::FormatV(char const*, std::__va_list)+0x1d0>
   2863c:	e3510000 	cmp	r1, #0
   28640:	03a08010 	moveq	r8, #16
   28644:	0a000007 	beq	28668 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   28648:	e3a08010 	mov	r8, #16
   2864c:	e59f39d4 	ldr	r3, [pc, #2516]	; 29028 <CString::FormatV(char const*, std::__va_list)+0xc90>
   28650:	e35a0058 	cmp	sl, #88	; 0x58
   28654:	e59f19d0 	ldr	r1, [pc, #2512]	; 2902c <CString::FormatV(char const*, std::__va_list)+0xc94>
   28658:	e1a00005 	mov	r0, r5
   2865c:	01a01003 	moveq	r1, r3
   28660:	ebfffdb7 	bl	27d44 <CString::PutString(char const*)>
   28664:	e1dba0d0 	ldrsb	sl, [fp]
   28668:	e59d300c 	ldr	r3, [sp, #12]
   2866c:	e3530000 	cmp	r3, #0
   28670:	0a000106 	beq	28a90 <CString::FormatV(char const*, std::__va_list)+0x6f8>
   28674:	e3a01000 	mov	r1, #0
   28678:	e1a00008 	mov	r0, r8
   2867c:	e59d3020 	ldr	r3, [sp, #32]
   28680:	e1cd01f8 	strd	r0, [sp, #24]
   28684:	e2833007 	add	r3, r3, #7
   28688:	e3c3c007 	bic	ip, r3, #7
   2868c:	e0cc20d8 	ldrd	r2, [ip], #8
   28690:	e1530001 	cmp	r3, r1
   28694:	01520008 	cmpeq	r2, r8
   28698:	e1cd21f0 	strd	r2, [sp, #16]
   2869c:	e58dc020 	str	ip, [sp, #32]
   286a0:	3a00023b 	bcc	28f94 <CString::FormatV(char const*, std::__va_list)+0xbfc>
   286a4:	e58da00c 	str	sl, [sp, #12]
   286a8:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   286ac:	e58d5034 	str	r5, [sp, #52]	; 0x34
   286b0:	e58db038 	str	fp, [sp, #56]	; 0x38
   286b4:	e3a08001 	mov	r8, #1
   286b8:	e3a09000 	mov	r9, #0
   286bc:	e1a04000 	mov	r4, r0
   286c0:	e1a05001 	mov	r5, r1
   286c4:	e1a0a002 	mov	sl, r2
   286c8:	e1a0b003 	mov	fp, r3
   286cc:	e0030598 	mul	r3, r8, r5
   286d0:	e0233994 	mla	r3, r4, r9, r3
   286d4:	e0898498 	umull	r8, r9, r8, r4
   286d8:	e0839009 	add	r9, r3, r9
   286dc:	e1a02008 	mov	r2, r8
   286e0:	e1a03009 	mov	r3, r9
   286e4:	e1a0000a 	mov	r0, sl
   286e8:	e1a0100b 	mov	r1, fp
   286ec:	eb0059e4 	bl	3ee84 <__aeabi_uldivmod>
   286f0:	e1510005 	cmp	r1, r5
   286f4:	01500004 	cmpeq	r0, r4
   286f8:	e1a06000 	mov	r6, r0
   286fc:	e1a07001 	mov	r7, r1
   28700:	2afffff1 	bcs	286cc <CString::FormatV(char const*, std::__va_list)+0x334>
   28704:	e59da00c 	ldr	sl, [sp, #12]
   28708:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   2870c:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   28710:	e59db038 	ldr	fp, [sp, #56]	; 0x38
   28714:	e35a0058 	cmp	sl, #88	; 0x58
   28718:	13a03057 	movne	r3, #87	; 0x57
   2871c:	03a03037 	moveq	r3, #55	; 0x37
   28720:	e28da044 	add	sl, sp, #68	; 0x44
   28724:	ee08aa10 	vmov	s16, sl
   28728:	e58d4034 	str	r4, [sp, #52]	; 0x34
   2872c:	e58da00c 	str	sl, [sp, #12]
   28730:	e58d5038 	str	r5, [sp, #56]	; 0x38
   28734:	e58db03c 	str	fp, [sp, #60]	; 0x3c
   28738:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   2873c:	e1cd41d0 	ldrd	r4, [sp, #16]
   28740:	e1cda1d8 	ldrd	sl, [sp, #24]
   28744:	ea00000a 	b	28774 <CString::FormatV(char const*, std::__va_list)+0x3dc>
   28748:	e58d0018 	str	r0, [sp, #24]
   2874c:	e58d1010 	str	r1, [sp, #16]
   28750:	e1a00004 	mov	r0, r4
   28754:	e1a01005 	mov	r1, r5
   28758:	eb0059c9 	bl	3ee84 <__aeabi_uldivmod>
   2875c:	e59d2018 	ldr	r2, [sp, #24]
   28760:	e59d3010 	ldr	r3, [sp, #16]
   28764:	e1a06000 	mov	r6, r0
   28768:	e1a08002 	mov	r8, r2
   2876c:	e1a07001 	mov	r7, r1
   28770:	e1a09003 	mov	r9, r3
   28774:	e1a00004 	mov	r0, r4
   28778:	e1a01005 	mov	r1, r5
   2877c:	e1a02008 	mov	r2, r8
   28780:	e1a03009 	mov	r3, r9
   28784:	eb0059be 	bl	3ee84 <__aeabi_uldivmod>
   28788:	e3570000 	cmp	r7, #0
   2878c:	03560009 	cmpeq	r6, #9
   28790:	e1a05003 	mov	r5, r3
   28794:	859d302c 	ldrhi	r3, [sp, #44]	; 0x2c
   28798:	e59dc00c 	ldr	ip, [sp, #12]
   2879c:	e1a04002 	mov	r4, r2
   287a0:	e2862030 	add	r2, r6, #48	; 0x30
   287a4:	80836006 	addhi	r6, r3, r6
   287a8:	96af6072 	sxtbls	r6, r2
   287ac:	86af6076 	sxtbhi	r6, r6
   287b0:	e1a0200a 	mov	r2, sl
   287b4:	e1a0300b 	mov	r3, fp
   287b8:	e4cc6001 	strb	r6, [ip], #1
   287bc:	e1a00008 	mov	r0, r8
   287c0:	e1a01009 	mov	r1, r9
   287c4:	e58dc00c 	str	ip, [sp, #12]
   287c8:	eb0059ad 	bl	3ee84 <__aeabi_uldivmod>
   287cc:	e159000b 	cmp	r9, fp
   287d0:	0158000a 	cmpeq	r8, sl
   287d4:	e1a02000 	mov	r2, r0
   287d8:	e1a03001 	mov	r3, r1
   287dc:	2affffd9 	bcs	28748 <CString::FormatV(char const*, std::__va_list)+0x3b0>
   287e0:	e3a03000 	mov	r3, #0
   287e4:	e59da00c 	ldr	sl, [sp, #12]
   287e8:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
   287ec:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
   287f0:	e59db03c 	ldr	fp, [sp, #60]	; 0x3c
   287f4:	e5ca3000 	strb	r3, [sl]
   287f8:	ee180a10 	vmov	r0, s16
   287fc:	eb000610 	bl	2a044 <strlen>
   28800:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   28804:	e1a06000 	mov	r6, r0
   28808:	e3530000 	cmp	r3, #0
   2880c:	1a000100 	bne	28c14 <CString::FormatV(char const*, std::__va_list)+0x87c>
   28810:	e1500004 	cmp	r0, r4
   28814:	3a000111 	bcc	28c60 <CString::FormatV(char const*, std::__va_list)+0x8c8>
   28818:	ee181a10 	vmov	r1, s16
   2881c:	e1a00005 	mov	r0, r5
   28820:	ebfffd47 	bl	27d44 <CString::PutString(char const*)>
   28824:	eaffff54 	b	2857c <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28828:	e59d300c 	ldr	r3, [sp, #12]
   2882c:	e3530000 	cmp	r3, #0
   28830:	e59d3020 	ldr	r3, [sp, #32]
   28834:	0a00013b 	beq	28d28 <CString::FormatV(char const*, std::__va_list)+0x990>
   28838:	e2833007 	add	r3, r3, #7
   2883c:	e3c31007 	bic	r1, r3, #7
   28840:	e0c120d8 	ldrd	r2, [r1], #8
   28844:	e3520000 	cmp	r2, #0
   28848:	e1a07003 	mov	r7, r3
   2884c:	e2d33000 	sbcs	r3, r3, #0
   28850:	a3a03000 	movge	r3, #0
   28854:	e1a06002 	mov	r6, r2
   28858:	e58d1020 	str	r1, [sp, #32]
   2885c:	a58d300c 	strge	r3, [sp, #12]
   28860:	aa000003 	bge	28874 <CString::FormatV(char const*, std::__va_list)+0x4dc>
   28864:	e2762000 	rsbs	r2, r6, #0
   28868:	e2e73000 	rsc	r3, r7, #0
   2886c:	e1a06002 	mov	r6, r2
   28870:	e1a07003 	mov	r7, r3
   28874:	e356000a 	cmp	r6, #10
   28878:	e2d71000 	sbcs	r1, r7, #0
   2887c:	e1a02006 	mov	r2, r6
   28880:	e1a03007 	mov	r3, r7
   28884:	e1a08006 	mov	r8, r6
   28888:	e1a09007 	mov	r9, r7
   2888c:	ba0001da 	blt	28ffc <CString::FormatV(char const*, std::__va_list)+0xc64>
   28890:	e58db010 	str	fp, [sp, #16]
   28894:	e3a06001 	mov	r6, #1
   28898:	e3a07000 	mov	r7, #0
   2889c:	e1a0a002 	mov	sl, r2
   288a0:	e1a0b003 	mov	fp, r3
   288a4:	e1a02107 	lsl	r2, r7, #2
   288a8:	e1a03106 	lsl	r3, r6, #2
   288ac:	e0933006 	adds	r3, r3, r6
   288b0:	e1822f26 	orr	r2, r2, r6, lsr #30
   288b4:	e0a22007 	adc	r2, r2, r7
   288b8:	e0936003 	adds	r6, r3, r3
   288bc:	e0a27002 	adc	r7, r2, r2
   288c0:	e1a03007 	mov	r3, r7
   288c4:	e1a02006 	mov	r2, r6
   288c8:	e1a0000a 	mov	r0, sl
   288cc:	e1a0100b 	mov	r1, fp
   288d0:	eb00596b 	bl	3ee84 <__aeabi_uldivmod>
   288d4:	e3510000 	cmp	r1, #0
   288d8:	03500009 	cmpeq	r0, #9
   288dc:	8afffff0 	bhi	288a4 <CString::FormatV(char const*, std::__va_list)+0x50c>
   288e0:	e59db010 	ldr	fp, [sp, #16]
   288e4:	e28d3044 	add	r3, sp, #68	; 0x44
   288e8:	e58d4018 	str	r4, [sp, #24]
   288ec:	e58d502c 	str	r5, [sp, #44]	; 0x2c
   288f0:	ee083a10 	vmov	s16, r3
   288f4:	e1a0a003 	mov	sl, r3
   288f8:	e1a04000 	mov	r4, r0
   288fc:	e1a05001 	mov	r5, r1
   28900:	e58db034 	str	fp, [sp, #52]	; 0x34
   28904:	ea000009 	b	28930 <CString::FormatV(char const*, std::__va_list)+0x598>
   28908:	e1a03001 	mov	r3, r1
   2890c:	e58d0010 	str	r0, [sp, #16]
   28910:	e1a01009 	mov	r1, r9
   28914:	e1a00008 	mov	r0, r8
   28918:	eb005959 	bl	3ee84 <__aeabi_uldivmod>
   2891c:	e59d2010 	ldr	r2, [sp, #16]
   28920:	e1a04000 	mov	r4, r0
   28924:	e1a06002 	mov	r6, r2
   28928:	e1a05001 	mov	r5, r1
   2892c:	e1a0700b 	mov	r7, fp
   28930:	e1a00008 	mov	r0, r8
   28934:	e1a01009 	mov	r1, r9
   28938:	e1a02006 	mov	r2, r6
   2893c:	e1a03007 	mov	r3, r7
   28940:	eb00594f 	bl	3ee84 <__aeabi_uldivmod>
   28944:	e3550000 	cmp	r5, #0
   28948:	03540009 	cmpeq	r4, #9
   2894c:	e2841030 	add	r1, r4, #48	; 0x30
   28950:	82844057 	addhi	r4, r4, #87	; 0x57
   28954:	96af4071 	sxtbls	r4, r1
   28958:	86af4074 	sxtbhi	r4, r4
   2895c:	e1a08002 	mov	r8, r2
   28960:	e1a09003 	mov	r9, r3
   28964:	e3a0200a 	mov	r2, #10
   28968:	e3a03000 	mov	r3, #0
   2896c:	e1a00006 	mov	r0, r6
   28970:	e1a01007 	mov	r1, r7
   28974:	e4ca4001 	strb	r4, [sl], #1
   28978:	eb005941 	bl	3ee84 <__aeabi_uldivmod>
   2897c:	e3570000 	cmp	r7, #0
   28980:	03560009 	cmpeq	r6, #9
   28984:	e1a02000 	mov	r2, r0
   28988:	e1a0b001 	mov	fp, r1
   2898c:	8affffdd 	bhi	28908 <CString::FormatV(char const*, std::__va_list)+0x570>
   28990:	e3a03000 	mov	r3, #0
   28994:	e59d4018 	ldr	r4, [sp, #24]
   28998:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
   2899c:	e59db034 	ldr	fp, [sp, #52]	; 0x34
   289a0:	e5ca3000 	strb	r3, [sl]
   289a4:	ee180a10 	vmov	r0, s16
   289a8:	eb0005a5 	bl	2a044 <strlen>
   289ac:	e59d300c 	ldr	r3, [sp, #12]
   289b0:	e1a06000 	mov	r6, r0
   289b4:	e3530000 	cmp	r3, #0
   289b8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   289bc:	1a0000b8 	bne	28ca4 <CString::FormatV(char const*, std::__va_list)+0x90c>
   289c0:	e3530000 	cmp	r3, #0
   289c4:	0a00011d 	beq	28e40 <CString::FormatV(char const*, std::__va_list)+0xaa8>
   289c8:	ee181a10 	vmov	r1, s16
   289cc:	e1a00005 	mov	r0, r5
   289d0:	ebfffcdb 	bl	27d44 <CString::PutString(char const*)>
   289d4:	e1540006 	cmp	r4, r6
   289d8:	9afffee7 	bls	2857c <CString::FormatV(char const*, std::__va_list)+0x1e4>
   289dc:	e0444006 	sub	r4, r4, r6
   289e0:	e1a00005 	mov	r0, r5
   289e4:	e1a01004 	mov	r1, r4
   289e8:	ebfffc2d 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   289ec:	e3a00020 	mov	r0, #32
   289f0:	e2443001 	sub	r3, r4, #1
   289f4:	e595200c 	ldr	r2, [r5, #12]
   289f8:	e2433001 	sub	r3, r3, #1
   289fc:	e2821001 	add	r1, r2, #1
   28a00:	e3730001 	cmn	r3, #1
   28a04:	e585100c 	str	r1, [r5, #12]
   28a08:	e5c20000 	strb	r0, [r2]
   28a0c:	1afffff8 	bne	289f4 <CString::FormatV(char const*, std::__va_list)+0x65c>
   28a10:	eafffed9 	b	2857c <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28a14:	e59d7020 	ldr	r7, [sp, #32]
   28a18:	e4978004 	ldr	r8, [r7], #4
   28a1c:	e1a00008 	mov	r0, r8
   28a20:	eb000587 	bl	2a044 <strlen>
   28a24:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   28a28:	e1a06000 	mov	r6, r0
   28a2c:	e3530000 	cmp	r3, #0
   28a30:	1a000133 	bne	28f04 <CString::FormatV(char const*, std::__va_list)+0xb6c>
   28a34:	e1500004 	cmp	r0, r4
   28a38:	3a000144 	bcc	28f50 <CString::FormatV(char const*, std::__va_list)+0xbb8>
   28a3c:	e1a01008 	mov	r1, r8
   28a40:	e1a00005 	mov	r0, r5
   28a44:	e58d7020 	str	r7, [sp, #32]
   28a48:	ebfffcbd 	bl	27d44 <CString::PutString(char const*)>
   28a4c:	eafffeca 	b	2857c <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28a50:	e3510000 	cmp	r1, #0
   28a54:	03a08008 	moveq	r8, #8
   28a58:	0affff02 	beq	28668 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   28a5c:	e3a01001 	mov	r1, #1
   28a60:	e1a00005 	mov	r0, r5
   28a64:	ebfffc0e 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28a68:	e3a02030 	mov	r2, #48	; 0x30
   28a6c:	e595300c 	ldr	r3, [r5, #12]
   28a70:	e3a08008 	mov	r8, #8
   28a74:	e2831001 	add	r1, r3, #1
   28a78:	e585100c 	str	r1, [r5, #12]
   28a7c:	e5c32000 	strb	r2, [r3]
   28a80:	e59d300c 	ldr	r3, [sp, #12]
   28a84:	e1dba0d0 	ldrsb	sl, [fp]
   28a88:	e3530000 	cmp	r3, #0
   28a8c:	1afffef8 	bne	28674 <CString::FormatV(char const*, std::__va_list)+0x2dc>
   28a90:	e59d2020 	ldr	r2, [sp, #32]
   28a94:	e4929004 	ldr	r9, [r2], #4
   28a98:	e1580009 	cmp	r8, r9
   28a9c:	e58d2020 	str	r2, [sp, #32]
   28aa0:	8a000138 	bhi	28f88 <CString::FormatV(char const*, std::__va_list)+0xbf0>
   28aa4:	e3a07001 	mov	r7, #1
   28aa8:	e0070798 	mul	r7, r8, r7
   28aac:	e1a00009 	mov	r0, r9
   28ab0:	e1a01007 	mov	r1, r7
   28ab4:	eb0057a9 	bl	3e960 <__udivsi3>
   28ab8:	e1580000 	cmp	r8, r0
   28abc:	9afffff9 	bls	28aa8 <CString::FormatV(char const*, std::__va_list)+0x710>
   28ac0:	e1a06000 	mov	r6, r0
   28ac4:	e35a0058 	cmp	sl, #88	; 0x58
   28ac8:	13a03057 	movne	r3, #87	; 0x57
   28acc:	03a03037 	moveq	r3, #55	; 0x37
   28ad0:	e28da044 	add	sl, sp, #68	; 0x44
   28ad4:	e58d400c 	str	r4, [sp, #12]
   28ad8:	ee08aa10 	vmov	s16, sl
   28adc:	e1a04007 	mov	r4, r7
   28ae0:	e1a07003 	mov	r7, r3
   28ae4:	ea000003 	b	28af8 <CString::FormatV(char const*, std::__va_list)+0x760>
   28ae8:	e1a01000 	mov	r1, r0
   28aec:	e1a00009 	mov	r0, r9
   28af0:	eb00579a 	bl	3e960 <__udivsi3>
   28af4:	e1a06000 	mov	r6, r0
   28af8:	e1a00009 	mov	r0, r9
   28afc:	e1a01004 	mov	r1, r4
   28b00:	eb005811 	bl	3eb4c <__aeabi_uidivmod>
   28b04:	e3560009 	cmp	r6, #9
   28b08:	e2862030 	add	r2, r6, #48	; 0x30
   28b0c:	80876006 	addhi	r6, r7, r6
   28b10:	96af6072 	sxtbls	r6, r2
   28b14:	86af6076 	sxtbhi	r6, r6
   28b18:	e1a00004 	mov	r0, r4
   28b1c:	e1a09001 	mov	r9, r1
   28b20:	e4ca6001 	strb	r6, [sl], #1
   28b24:	e1a01008 	mov	r1, r8
   28b28:	eb00578c 	bl	3e960 <__udivsi3>
   28b2c:	e1580004 	cmp	r8, r4
   28b30:	e1a04000 	mov	r4, r0
   28b34:	9affffeb 	bls	28ae8 <CString::FormatV(char const*, std::__va_list)+0x750>
   28b38:	e3a03000 	mov	r3, #0
   28b3c:	e59d400c 	ldr	r4, [sp, #12]
   28b40:	e5ca3000 	strb	r3, [sl]
   28b44:	eaffff2b 	b	287f8 <CString::FormatV(char const*, std::__va_list)+0x460>
   28b48:	e59d7020 	ldr	r7, [sp, #32]
   28b4c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   28b50:	e4976004 	ldr	r6, [r7], #4
   28b54:	e3530000 	cmp	r3, #0
   28b58:	e6af6076 	sxtb	r6, r6
   28b5c:	1a0000ca 	bne	28e8c <CString::FormatV(char const*, std::__va_list)+0xaf4>
   28b60:	e3540001 	cmp	r4, #1
   28b64:	8a00009b 	bhi	28dd8 <CString::FormatV(char const*, std::__va_list)+0xa40>
   28b68:	e3a01001 	mov	r1, #1
   28b6c:	e1a00005 	mov	r0, r5
   28b70:	ebfffbcb 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28b74:	e595300c 	ldr	r3, [r5, #12]
   28b78:	e58d7020 	str	r7, [sp, #32]
   28b7c:	e2832001 	add	r2, r3, #1
   28b80:	e585200c 	str	r2, [r5, #12]
   28b84:	e5c36000 	strb	r6, [r3]
   28b88:	eafffe7b 	b	2857c <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28b8c:	e59d3020 	ldr	r3, [sp, #32]
   28b90:	e2833007 	add	r3, r3, #7
   28b94:	e3c33007 	bic	r3, r3, #7
   28b98:	e1a01003 	mov	r1, r3
   28b9c:	e0c120d8 	ldrd	r2, [r1], #8
   28ba0:	e58d1020 	str	r1, [sp, #32]
   28ba4:	e28d1044 	add	r1, sp, #68	; 0x44
   28ba8:	e1a06001 	mov	r6, r1
   28bac:	e58d0000 	str	r0, [sp]
   28bb0:	e1a00001 	mov	r0, r1
   28bb4:	ee081a10 	vmov	s16, r1
   28bb8:	ebfffd52 	bl	28108 <CString::ftoa(char*, double, unsigned int)>
   28bbc:	e1a00006 	mov	r0, r6
   28bc0:	eb00051f 	bl	2a044 <strlen>
   28bc4:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   28bc8:	e1a06000 	mov	r6, r0
   28bcc:	e3530000 	cmp	r3, #0
   28bd0:	1a0000b8 	bne	28eb8 <CString::FormatV(char const*, std::__va_list)+0xb20>
   28bd4:	e1500004 	cmp	r0, r4
   28bd8:	2affff0e 	bcs	28818 <CString::FormatV(char const*, std::__va_list)+0x480>
   28bdc:	e0444000 	sub	r4, r4, r0
   28be0:	e1a01004 	mov	r1, r4
   28be4:	e1a00005 	mov	r0, r5
   28be8:	ebfffbad 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28bec:	e3a00020 	mov	r0, #32
   28bf0:	e2443001 	sub	r3, r4, #1
   28bf4:	e595200c 	ldr	r2, [r5, #12]
   28bf8:	e2433001 	sub	r3, r3, #1
   28bfc:	e2821001 	add	r1, r2, #1
   28c00:	e3730001 	cmn	r3, #1
   28c04:	e585100c 	str	r1, [r5, #12]
   28c08:	e5c20000 	strb	r0, [r2]
   28c0c:	1afffff8 	bne	28bf4 <CString::FormatV(char const*, std::__va_list)+0x85c>
   28c10:	eaffff00 	b	28818 <CString::FormatV(char const*, std::__va_list)+0x480>
   28c14:	ee181a10 	vmov	r1, s16
   28c18:	e1a00005 	mov	r0, r5
   28c1c:	ebfffc48 	bl	27d44 <CString::PutString(char const*)>
   28c20:	e1560004 	cmp	r6, r4
   28c24:	2afffe54 	bcs	2857c <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28c28:	e0444006 	sub	r4, r4, r6
   28c2c:	e1a00005 	mov	r0, r5
   28c30:	e1a01004 	mov	r1, r4
   28c34:	ebfffb9a 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28c38:	e3a00020 	mov	r0, #32
   28c3c:	e2443001 	sub	r3, r4, #1
   28c40:	e595200c 	ldr	r2, [r5, #12]
   28c44:	e2433001 	sub	r3, r3, #1
   28c48:	e2821001 	add	r1, r2, #1
   28c4c:	e3730001 	cmn	r3, #1
   28c50:	e585100c 	str	r1, [r5, #12]
   28c54:	e5c20000 	strb	r0, [r2]
   28c58:	1afffff8 	bne	28c40 <CString::FormatV(char const*, std::__va_list)+0x8a8>
   28c5c:	eafffe46 	b	2857c <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28c60:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   28c64:	e0444000 	sub	r4, r4, r0
   28c68:	e3530000 	cmp	r3, #0
   28c6c:	e1a01004 	mov	r1, r4
   28c70:	e1a00005 	mov	r0, r5
   28c74:	13a06030 	movne	r6, #48	; 0x30
   28c78:	03a06020 	moveq	r6, #32
   28c7c:	ebfffb88 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28c80:	e2443001 	sub	r3, r4, #1
   28c84:	e595200c 	ldr	r2, [r5, #12]
   28c88:	e2433001 	sub	r3, r3, #1
   28c8c:	e2821001 	add	r1, r2, #1
   28c90:	e3730001 	cmn	r3, #1
   28c94:	e585100c 	str	r1, [r5, #12]
   28c98:	e5c26000 	strb	r6, [r2]
   28c9c:	1afffff8 	bne	28c84 <CString::FormatV(char const*, std::__va_list)+0x8ec>
   28ca0:	eafffedc 	b	28818 <CString::FormatV(char const*, std::__va_list)+0x480>
   28ca4:	e3530000 	cmp	r3, #0
   28ca8:	e2806001 	add	r6, r0, #1
   28cac:	1a00005a 	bne	28e1c <CString::FormatV(char const*, std::__va_list)+0xa84>
   28cb0:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   28cb4:	e3530000 	cmp	r3, #0
   28cb8:	1a0000c6 	bne	28fd8 <CString::FormatV(char const*, std::__va_list)+0xc40>
   28cbc:	e1540006 	cmp	r4, r6
   28cc0:	9a00000f 	bls	28d04 <CString::FormatV(char const*, std::__va_list)+0x96c>
   28cc4:	e0444006 	sub	r4, r4, r6
   28cc8:	e1a00005 	mov	r0, r5
   28ccc:	e1a01004 	mov	r1, r4
   28cd0:	ebfffb73 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28cd4:	e3a00020 	mov	r0, #32
   28cd8:	e2443001 	sub	r3, r4, #1
   28cdc:	e595200c 	ldr	r2, [r5, #12]
   28ce0:	e2433001 	sub	r3, r3, #1
   28ce4:	e2821001 	add	r1, r2, #1
   28ce8:	e3730001 	cmn	r3, #1
   28cec:	e585100c 	str	r1, [r5, #12]
   28cf0:	e5c20000 	strb	r0, [r2]
   28cf4:	1afffff8 	bne	28cdc <CString::FormatV(char const*, std::__va_list)+0x944>
   28cf8:	e59d300c 	ldr	r3, [sp, #12]
   28cfc:	e3530000 	cmp	r3, #0
   28d00:	0afffec4 	beq	28818 <CString::FormatV(char const*, std::__va_list)+0x480>
   28d04:	e3a01001 	mov	r1, #1
   28d08:	e1a00005 	mov	r0, r5
   28d0c:	ebfffb64 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28d10:	e3a0202d 	mov	r2, #45	; 0x2d
   28d14:	e595300c 	ldr	r3, [r5, #12]
   28d18:	e2831001 	add	r1, r3, #1
   28d1c:	e585100c 	str	r1, [r5, #12]
   28d20:	e5c32000 	strb	r2, [r3]
   28d24:	eafffebb 	b	28818 <CString::FormatV(char const*, std::__va_list)+0x480>
   28d28:	e4937004 	ldr	r7, [r3], #4
   28d2c:	e3570000 	cmp	r7, #0
   28d30:	e58d3020 	str	r3, [sp, #32]
   28d34:	ba000034 	blt	28e0c <CString::FormatV(char const*, std::__va_list)+0xa74>
   28d38:	e3570009 	cmp	r7, #9
   28d3c:	e1a09007 	mov	r9, r7
   28d40:	da0000b2 	ble	29010 <CString::FormatV(char const*, std::__va_list)+0xc78>
   28d44:	e3a06001 	mov	r6, #1
   28d48:	e0866106 	add	r6, r6, r6, lsl #2
   28d4c:	e1a06086 	lsl	r6, r6, #1
   28d50:	e1a01006 	mov	r1, r6
   28d54:	e1a00007 	mov	r0, r7
   28d58:	eb005700 	bl	3e960 <__udivsi3>
   28d5c:	e3500009 	cmp	r0, #9
   28d60:	8afffff8 	bhi	28d48 <CString::FormatV(char const*, std::__va_list)+0x9b0>
   28d64:	e1a08000 	mov	r8, r0
   28d68:	e28d3044 	add	r3, sp, #68	; 0x44
   28d6c:	ee083a10 	vmov	s16, r3
   28d70:	e1a07003 	mov	r7, r3
   28d74:	ea000003 	b	28d88 <CString::FormatV(char const*, std::__va_list)+0x9f0>
   28d78:	e1a01006 	mov	r1, r6
   28d7c:	e1a00009 	mov	r0, r9
   28d80:	eb0056f6 	bl	3e960 <__udivsi3>
   28d84:	e1a08000 	mov	r8, r0
   28d88:	e1a00009 	mov	r0, r9
   28d8c:	e1a01006 	mov	r1, r6
   28d90:	eb00576d 	bl	3eb4c <__aeabi_uidivmod>
   28d94:	e3580009 	cmp	r8, #9
   28d98:	e2883030 	add	r3, r8, #48	; 0x30
   28d9c:	96af8073 	sxtbls	r8, r3
   28da0:	e59f3288 	ldr	r3, [pc, #648]	; 29030 <CString::FormatV(char const*, std::__va_list)+0xc98>
   28da4:	e1a09001 	mov	r9, r1
   28da8:	e0813693 	umull	r3, r1, r3, r6
   28dac:	82888057 	addhi	r8, r8, #87	; 0x57
   28db0:	86af8078 	sxtbhi	r8, r8
   28db4:	e3560009 	cmp	r6, #9
   28db8:	e4c78001 	strb	r8, [r7], #1
   28dbc:	e1a061a1 	lsr	r6, r1, #3
   28dc0:	8affffec 	bhi	28d78 <CString::FormatV(char const*, std::__va_list)+0x9e0>
   28dc4:	e3a03000 	mov	r3, #0
   28dc8:	e5c73000 	strb	r3, [r7]
   28dcc:	eafffef4 	b	289a4 <CString::FormatV(char const*, std::__va_list)+0x60c>
   28dd0:	e3a0800a 	mov	r8, #10
   28dd4:	eafffe23 	b	28668 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   28dd8:	e2441001 	sub	r1, r4, #1
   28ddc:	e1a00005 	mov	r0, r5
   28de0:	ebfffb2f 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28de4:	e3a01020 	mov	r1, #32
   28de8:	e2444002 	sub	r4, r4, #2
   28dec:	e595300c 	ldr	r3, [r5, #12]
   28df0:	e2444001 	sub	r4, r4, #1
   28df4:	e2832001 	add	r2, r3, #1
   28df8:	e3740001 	cmn	r4, #1
   28dfc:	e585200c 	str	r2, [r5, #12]
   28e00:	e5c31000 	strb	r1, [r3]
   28e04:	1afffff8 	bne	28dec <CString::FormatV(char const*, std::__va_list)+0xa54>
   28e08:	eaffff56 	b	28b68 <CString::FormatV(char const*, std::__va_list)+0x7d0>
   28e0c:	e3a03001 	mov	r3, #1
   28e10:	e2677000 	rsb	r7, r7, #0
   28e14:	e58d300c 	str	r3, [sp, #12]
   28e18:	eaffffc6 	b	28d38 <CString::FormatV(char const*, std::__va_list)+0x9a0>
   28e1c:	e3a01001 	mov	r1, #1
   28e20:	e1a00005 	mov	r0, r5
   28e24:	ebfffb1e 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28e28:	e3a0202d 	mov	r2, #45	; 0x2d
   28e2c:	e595300c 	ldr	r3, [r5, #12]
   28e30:	e2831001 	add	r1, r3, #1
   28e34:	e585100c 	str	r1, [r5, #12]
   28e38:	e5c32000 	strb	r2, [r3]
   28e3c:	eafffee1 	b	289c8 <CString::FormatV(char const*, std::__va_list)+0x630>
   28e40:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   28e44:	e3530000 	cmp	r3, #0
   28e48:	0a000073 	beq	2901c <CString::FormatV(char const*, std::__va_list)+0xc84>
   28e4c:	e1560004 	cmp	r6, r4
   28e50:	2afffe70 	bcs	28818 <CString::FormatV(char const*, std::__va_list)+0x480>
   28e54:	e0444006 	sub	r4, r4, r6
   28e58:	e1a00005 	mov	r0, r5
   28e5c:	e1a01004 	mov	r1, r4
   28e60:	ebfffb0f 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28e64:	e3a00030 	mov	r0, #48	; 0x30
   28e68:	e2443001 	sub	r3, r4, #1
   28e6c:	e595200c 	ldr	r2, [r5, #12]
   28e70:	e2433001 	sub	r3, r3, #1
   28e74:	e2821001 	add	r1, r2, #1
   28e78:	e3730001 	cmn	r3, #1
   28e7c:	e585100c 	str	r1, [r5, #12]
   28e80:	e5c20000 	strb	r0, [r2]
   28e84:	1afffff8 	bne	28e6c <CString::FormatV(char const*, std::__va_list)+0xad4>
   28e88:	eafffe62 	b	28818 <CString::FormatV(char const*, std::__va_list)+0x480>
   28e8c:	e3a01001 	mov	r1, #1
   28e90:	e1a00005 	mov	r0, r5
   28e94:	ebfffb02 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28e98:	e595300c 	ldr	r3, [r5, #12]
   28e9c:	e3540001 	cmp	r4, #1
   28ea0:	e2832001 	add	r2, r3, #1
   28ea4:	e585200c 	str	r2, [r5, #12]
   28ea8:	e5c36000 	strb	r6, [r3]
   28eac:	8a00003c 	bhi	28fa4 <CString::FormatV(char const*, std::__va_list)+0xc0c>
   28eb0:	e58d7020 	str	r7, [sp, #32]
   28eb4:	eafffdb0 	b	2857c <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28eb8:	ee181a10 	vmov	r1, s16
   28ebc:	e1a00005 	mov	r0, r5
   28ec0:	ebfffb9f 	bl	27d44 <CString::PutString(char const*)>
   28ec4:	e1560004 	cmp	r6, r4
   28ec8:	2afffdab 	bcs	2857c <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28ecc:	e0444006 	sub	r4, r4, r6
   28ed0:	e1a00005 	mov	r0, r5
   28ed4:	e1a01004 	mov	r1, r4
   28ed8:	ebfffaf1 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28edc:	e3a00020 	mov	r0, #32
   28ee0:	e2443001 	sub	r3, r4, #1
   28ee4:	e595200c 	ldr	r2, [r5, #12]
   28ee8:	e2433001 	sub	r3, r3, #1
   28eec:	e2821001 	add	r1, r2, #1
   28ef0:	e3730001 	cmn	r3, #1
   28ef4:	e585100c 	str	r1, [r5, #12]
   28ef8:	e5c20000 	strb	r0, [r2]
   28efc:	1afffff8 	bne	28ee4 <CString::FormatV(char const*, std::__va_list)+0xb4c>
   28f00:	eafffd9d 	b	2857c <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28f04:	e1a01008 	mov	r1, r8
   28f08:	e1a00005 	mov	r0, r5
   28f0c:	ebfffb8c 	bl	27d44 <CString::PutString(char const*)>
   28f10:	e1560004 	cmp	r6, r4
   28f14:	2affffe5 	bcs	28eb0 <CString::FormatV(char const*, std::__va_list)+0xb18>
   28f18:	e0444006 	sub	r4, r4, r6
   28f1c:	e1a00005 	mov	r0, r5
   28f20:	e1a01004 	mov	r1, r4
   28f24:	ebfffade 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28f28:	e3a00020 	mov	r0, #32
   28f2c:	e2443001 	sub	r3, r4, #1
   28f30:	e595200c 	ldr	r2, [r5, #12]
   28f34:	e2433001 	sub	r3, r3, #1
   28f38:	e2821001 	add	r1, r2, #1
   28f3c:	e3730001 	cmn	r3, #1
   28f40:	e585100c 	str	r1, [r5, #12]
   28f44:	e5c20000 	strb	r0, [r2]
   28f48:	1afffff8 	bne	28f30 <CString::FormatV(char const*, std::__va_list)+0xb98>
   28f4c:	eaffffd7 	b	28eb0 <CString::FormatV(char const*, std::__va_list)+0xb18>
   28f50:	e0444000 	sub	r4, r4, r0
   28f54:	e1a01004 	mov	r1, r4
   28f58:	e1a00005 	mov	r0, r5
   28f5c:	ebfffad0 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28f60:	e3a00020 	mov	r0, #32
   28f64:	e2443001 	sub	r3, r4, #1
   28f68:	e595200c 	ldr	r2, [r5, #12]
   28f6c:	e2433001 	sub	r3, r3, #1
   28f70:	e2821001 	add	r1, r2, #1
   28f74:	e3730001 	cmn	r3, #1
   28f78:	e585100c 	str	r1, [r5, #12]
   28f7c:	e5c20000 	strb	r0, [r2]
   28f80:	1afffff8 	bne	28f68 <CString::FormatV(char const*, std::__va_list)+0xbd0>
   28f84:	eafffeac 	b	28a3c <CString::FormatV(char const*, std::__va_list)+0x6a4>
   28f88:	e1a06009 	mov	r6, r9
   28f8c:	e3a07001 	mov	r7, #1
   28f90:	eafffecb 	b	28ac4 <CString::FormatV(char const*, std::__va_list)+0x72c>
   28f94:	e3a08001 	mov	r8, #1
   28f98:	e1cd61d0 	ldrd	r6, [sp, #16]
   28f9c:	e3a09000 	mov	r9, #0
   28fa0:	eafffddb 	b	28714 <CString::FormatV(char const*, std::__va_list)+0x37c>
   28fa4:	e2441001 	sub	r1, r4, #1
   28fa8:	e1a00005 	mov	r0, r5
   28fac:	ebfffabc 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28fb0:	e3a01020 	mov	r1, #32
   28fb4:	e2444002 	sub	r4, r4, #2
   28fb8:	e595300c 	ldr	r3, [r5, #12]
   28fbc:	e2444001 	sub	r4, r4, #1
   28fc0:	e2832001 	add	r2, r3, #1
   28fc4:	e3740001 	cmn	r4, #1
   28fc8:	e585200c 	str	r2, [r5, #12]
   28fcc:	e5c31000 	strb	r1, [r3]
   28fd0:	1afffff8 	bne	28fb8 <CString::FormatV(char const*, std::__va_list)+0xc20>
   28fd4:	eaffffb5 	b	28eb0 <CString::FormatV(char const*, std::__va_list)+0xb18>
   28fd8:	e3a01001 	mov	r1, #1
   28fdc:	e1a00005 	mov	r0, r5
   28fe0:	ebfffaaf 	bl	27aa4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28fe4:	e3a0202d 	mov	r2, #45	; 0x2d
   28fe8:	e595300c 	ldr	r3, [r5, #12]
   28fec:	e2831001 	add	r1, r3, #1
   28ff0:	e585100c 	str	r1, [r5, #12]
   28ff4:	e5c32000 	strb	r2, [r3]
   28ff8:	eaffff93 	b	28e4c <CString::FormatV(char const*, std::__va_list)+0xab4>
   28ffc:	e1a00008 	mov	r0, r8
   29000:	e3a06001 	mov	r6, #1
   29004:	e3a07000 	mov	r7, #0
   29008:	e1a01009 	mov	r1, r9
   2900c:	eafffe34 	b	288e4 <CString::FormatV(char const*, std::__va_list)+0x54c>
   29010:	e1a08009 	mov	r8, r9
   29014:	e3a06001 	mov	r6, #1
   29018:	eaffff52 	b	28d68 <CString::FormatV(char const*, std::__va_list)+0x9d0>
   2901c:	e1500004 	cmp	r0, r4
   29020:	2afffdfc 	bcs	28818 <CString::FormatV(char const*, std::__va_list)+0x480>
   29024:	eaffff26 	b	28cc4 <CString::FormatV(char const*, std::__va_list)+0x92c>
   29028:	000470f8 	.word	0x000470f8
   2902c:	000470f4 	.word	0x000470f4
   29030:	cccccccd 	.word	0xcccccccd

00029034 <CString::Format(char const*, ...)>:
   29034:	e92d000e 	push	{r1, r2, r3}
   29038:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2903c:	e24dd008 	sub	sp, sp, #8
   29040:	e28d2010 	add	r2, sp, #16
   29044:	e59d100c 	ldr	r1, [sp, #12]
   29048:	e58d2004 	str	r2, [sp, #4]
   2904c:	ebfffcd1 	bl	28398 <CString::FormatV(char const*, std::__va_list)>
   29050:	e28dd008 	add	sp, sp, #8
   29054:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   29058:	e28dd00c 	add	sp, sp, #12
   2905c:	e12fff1e 	bx	lr

00029060 <__aeabi_atexit>:
   29060:	e12fff1e 	bx	lr

00029064 <__errno>:
   29064:	e59f0000 	ldr	r0, [pc]	; 2906c <__errno+0x8>
   29068:	e12fff1e 	bx	lr
   2906c:	0005ce40 	.word	0x0005ce40

00029070 <set_qemu_exit_status>:
   29070:	e59f3004 	ldr	r3, [pc, #4]	; 2907c <set_qemu_exit_status+0xc>
   29074:	e5830008 	str	r0, [r3, #8]
   29078:	e12fff1e 	bx	lr
   2907c:	0005ce3c 	.word	0x0005ce3c

00029080 <halt>:
   29080:	f10c0080 	cpsid	i
   29084:	f10c0040 	cpsid	f
   29088:	eafffffe 	b	29088 <halt+0x8>

0002908c <reboot>:
   2908c:	e3a03000 	mov	r3, #0
   29090:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   29094:	e59f3010 	ldr	r3, [pc, #16]	; 290ac <reboot+0x20>
   29098:	e59f1010 	ldr	r1, [pc, #16]	; 290b0 <reboot+0x24>
   2909c:	e59f2010 	ldr	r2, [pc, #16]	; 290b4 <reboot+0x28>
   290a0:	e5831024 	str	r1, [r3, #36]	; 0x24
   290a4:	e583201c 	str	r2, [r3, #28]
   290a8:	eafffffe 	b	290a8 <reboot+0x1c>
   290ac:	20100000 	.word	0x20100000
   290b0:	5a000001 	.word	0x5a000001
   290b4:	5a000020 	.word	0x5a000020

000290b8 <vfpinit>:
   290b8:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   290bc:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   290c0:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   290c4:	e3a03000 	mov	r3, #0
   290c8:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   290cc:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   290d0:	eee83a10 	vmsr	fpexc, r3
   290d4:	e3a03402 	mov	r3, #33554432	; 0x2000000
   290d8:	eee13a10 	vmsr	fpscr, r3
   290dc:	e12fff1e 	bx	lr

000290e0 <sysinit>:
   290e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   290e4:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
   290e8:	f1080040 	cpsie	f
   290ec:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   290f0:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   290f4:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   290f8:	e3a01000 	mov	r1, #0
   290fc:	ee071f95 	mcr	15, 0, r1, cr7, cr5, {4}
   29100:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   29104:	eee83a10 	vmsr	fpexc, r3
   29108:	e3a03402 	mov	r3, #33554432	; 0x2000000
   2910c:	eee13a10 	vmsr	fpscr, r3
   29110:	e59f0088 	ldr	r0, [pc, #136]	; 291a0 <sysinit+0xc0>
   29114:	e59f2088 	ldr	r2, [pc, #136]	; 291a4 <sysinit+0xc4>
   29118:	e59f5088 	ldr	r5, [pc, #136]	; 291a8 <sysinit+0xc8>
   2911c:	e0422000 	sub	r2, r2, r0
   29120:	eb000379 	bl	29f0c <memset>
   29124:	e1a0000d 	mov	r0, sp
   29128:	ebfff78e 	bl	26f68 <CMachineInfo::CMachineInfo()>
   2912c:	e3a01001 	mov	r1, #1
   29130:	e28d001c 	add	r0, sp, #28
   29134:	eb0009db 	bl	2b8a8 <CMemorySystem::CMemorySystem(bool)>
   29138:	e59f306c 	ldr	r3, [pc, #108]	; 291ac <sysinit+0xcc>
   2913c:	e1550003 	cmp	r5, r3
   29140:	2a000009 	bcs	2916c <sysinit+0x8c>
   29144:	e2433001 	sub	r3, r3, #1
   29148:	e0433005 	sub	r3, r3, r5
   2914c:	e3c33003 	bic	r3, r3, #3
   29150:	e2833004 	add	r3, r3, #4
   29154:	e1a04005 	mov	r4, r5
   29158:	e0855003 	add	r5, r5, r3
   2915c:	e4943004 	ldr	r3, [r4], #4
   29160:	e12fff33 	blx	r3
   29164:	e1540005 	cmp	r4, r5
   29168:	1afffffb 	bne	2915c <sysinit+0x7c>
   2916c:	ebff7bbd 	bl	8068 <main>
   29170:	e3500001 	cmp	r0, #1
   29174:	0a000000 	beq	2917c <sysinit+0x9c>
   29178:	ebffffc0 	bl	29080 <halt>
   2917c:	eb0006a1 	bl	2ac08 <IsChainBootEnabled>
   29180:	e3500000 	cmp	r0, #0
   29184:	1a000000 	bne	2918c <sysinit+0xac>
   29188:	ebffffbf 	bl	2908c <reboot>
   2918c:	e28d001c 	add	r0, sp, #28
   29190:	eb000a28 	bl	2ba38 <CMemorySystem::Destructor()>
   29194:	f10c0040 	cpsid	f
   29198:	eb0006a0 	bl	2ac20 <DoChainBoot>
   2919c:	eafffff9 	b	29188 <sysinit+0xa8>
   291a0:	0005cdf0 	.word	0x0005cdf0
   291a4:	0006baec 	.word	0x0006baec
   291a8:	00049f78 	.word	0x00049f78
   291ac:	00049f8c 	.word	0x00049f8c

000291b0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
   291b0:	e3a03000 	mov	r3, #0
   291b4:	e2800001 	add	r0, r0, #1
   291b8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   291bc:	e59f3020 	ldr	r3, [pc, #32]	; 291e4 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
   291c0:	e1a01003 	mov	r1, r3
   291c4:	e5932004 	ldr	r2, [r3, #4]
   291c8:	e5913004 	ldr	r3, [r1, #4]
   291cc:	e0433002 	sub	r3, r3, r2
   291d0:	e1500003 	cmp	r0, r3
   291d4:	8afffffb 	bhi	291c8 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
   291d8:	e3a03000 	mov	r3, #0
   291dc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   291e0:	e12fff1e 	bx	lr
   291e4:	20003000 	.word	0x20003000

000291e8 <CTimer::CTimer(CInterruptSystem*)>:
   291e8:	e92d4070 	push	{r4, r5, r6, lr}
   291ec:	e3a05000 	mov	r5, #0
   291f0:	e3a06001 	mov	r6, #1
   291f4:	e1a04000 	mov	r4, r0
   291f8:	e5805004 	str	r5, [r0, #4]
   291fc:	e5801000 	str	r1, [r0]
   29200:	e5805008 	str	r5, [r0, #8]
   29204:	e5805014 	str	r5, [r0, #20]
   29208:	e5806010 	str	r6, [r0, #16]
   2920c:	e580500c 	str	r5, [r0, #12]
   29210:	e2800018 	add	r0, r0, #24
   29214:	eb000ddd 	bl	2c990 <CPtrList::CPtrList()>
   29218:	e3a020c8 	mov	r2, #200	; 0xc8
   2921c:	e59f3038 	ldr	r3, [pc, #56]	; 2925c <CTimer::CTimer(CInterruptSystem*)+0x74>
   29220:	e59f1038 	ldr	r1, [pc, #56]	; 29260 <CTimer::CTimer(CInterruptSystem*)+0x78>
   29224:	e5930000 	ldr	r0, [r3]
   29228:	e584601c 	str	r6, [r4, #28]
   2922c:	e1500005 	cmp	r0, r5
   29230:	e5845038 	str	r5, [r4, #56]	; 0x38
   29234:	e5841020 	str	r1, [r4, #32]
   29238:	e5842024 	str	r2, [r4, #36]	; 0x24
   2923c:	1a000002 	bne	2924c <CTimer::CTimer(CInterruptSystem*)+0x64>
   29240:	e1a00004 	mov	r0, r4
   29244:	e5834000 	str	r4, [r3]
   29248:	e8bd8070 	pop	{r4, r5, r6, pc}
   2924c:	e3a02041 	mov	r2, #65	; 0x41
   29250:	e59f100c 	ldr	r1, [pc, #12]	; 29264 <CTimer::CTimer(CInterruptSystem*)+0x7c>
   29254:	e59f000c 	ldr	r0, [pc, #12]	; 29268 <CTimer::CTimer(CInterruptSystem*)+0x80>
   29258:	ebffed52 	bl	247a8 <assertion_failed>
   2925c:	0005ce48 	.word	0x0005ce48
   29260:	00030d40 	.word	0x00030d40
   29264:	0004710c 	.word	0x0004710c
   29268:	00045348 	.word	0x00045348

0002926c <CTimer::~CTimer()>:
   2926c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   29270:	e1a06000 	mov	r6, r0
   29274:	e5900000 	ldr	r0, [r0]
   29278:	e24dd00c 	sub	sp, sp, #12
   2927c:	e3500000 	cmp	r0, #0
   29280:	0a000028 	beq	29328 <CTimer::~CTimer()+0xbc>
   29284:	e3a01003 	mov	r1, #3
   29288:	e2865018 	add	r5, r6, #24
   2928c:	eb000bac 	bl	2c144 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   29290:	e1a00005 	mov	r0, r5
   29294:	eb000dca 	bl	2c9c4 <CPtrList::GetFirst()>
   29298:	e2501000 	subs	r1, r0, #0
   2929c:	e59f7094 	ldr	r7, [pc, #148]	; 29338 <CTimer::~CTimer()+0xcc>
   292a0:	0a000011 	beq	292ec <CTimer::~CTimer()+0x80>
   292a4:	e1a00005 	mov	r0, r5
   292a8:	e58d1004 	str	r1, [sp, #4]
   292ac:	eb000ddb 	bl	2ca20 <CPtrList::GetPtr(TPtrListElement*)>
   292b0:	e2504000 	subs	r4, r0, #0
   292b4:	e59d1004 	ldr	r1, [sp, #4]
   292b8:	0a000012 	beq	29308 <CTimer::~CTimer()+0x9c>
   292bc:	e5943000 	ldr	r3, [r4]
   292c0:	e1530007 	cmp	r3, r7
   292c4:	1a000013 	bne	29318 <CTimer::~CTimer()+0xac>
   292c8:	e1a00005 	mov	r0, r5
   292cc:	eb000e5b 	bl	2cc40 <CPtrList::Remove(TPtrListElement*)>
   292d0:	e3a01014 	mov	r1, #20
   292d4:	e1a00004 	mov	r0, r4
   292d8:	eb000748 	bl	2b000 <operator delete(void*, unsigned int)>
   292dc:	e1a00005 	mov	r0, r5
   292e0:	eb000db7 	bl	2c9c4 <CPtrList::GetFirst()>
   292e4:	e2501000 	subs	r1, r0, #0
   292e8:	1affffed 	bne	292a4 <CTimer::~CTimer()+0x38>
   292ec:	e59f3048 	ldr	r3, [pc, #72]	; 2933c <CTimer::~CTimer()+0xd0>
   292f0:	e1a00005 	mov	r0, r5
   292f4:	e5831000 	str	r1, [r3]
   292f8:	eb000da7 	bl	2c99c <CPtrList::~CPtrList()>
   292fc:	e1a00006 	mov	r0, r6
   29300:	e28dd00c 	add	sp, sp, #12
   29304:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   29308:	e3a02058 	mov	r2, #88	; 0x58
   2930c:	e59f102c 	ldr	r1, [pc, #44]	; 29340 <CTimer::~CTimer()+0xd4>
   29310:	e59f002c 	ldr	r0, [pc, #44]	; 29344 <CTimer::~CTimer()+0xd8>
   29314:	ebffed23 	bl	247a8 <assertion_failed>
   29318:	e3a02059 	mov	r2, #89	; 0x59
   2931c:	e59f101c 	ldr	r1, [pc, #28]	; 29340 <CTimer::~CTimer()+0xd4>
   29320:	e59f0020 	ldr	r0, [pc, #32]	; 29348 <CTimer::~CTimer()+0xdc>
   29324:	ebffed1f 	bl	247a8 <assertion_failed>
   29328:	e3a02047 	mov	r2, #71	; 0x47
   2932c:	e59f100c 	ldr	r1, [pc, #12]	; 29340 <CTimer::~CTimer()+0xd4>
   29330:	e59f0014 	ldr	r0, [pc, #20]	; 2934c <CTimer::~CTimer()+0xe0>
   29334:	ebffed1b 	bl	247a8 <assertion_failed>
   29338:	4b544d43 	.word	0x4b544d43
   2933c:	0005ce48 	.word	0x0005ce48
   29340:	0004710c 	.word	0x0004710c
   29344:	00042db8 	.word	0x00042db8
   29348:	00047118 	.word	0x00047118
   2934c:	00040b7c 	.word	0x00040b7c

00029350 <CTimer::SetTimeZone(int)>:
   29350:	e59f2018 	ldr	r2, [pc, #24]	; 29370 <CTimer::SetTimeZone(int)+0x20>
   29354:	e2813e59 	add	r3, r1, #1424	; 0x590
   29358:	e283300f 	add	r3, r3, #15
   2935c:	e1530002 	cmp	r3, r2
   29360:	95801014 	strls	r1, [r0, #20]
   29364:	93a00001 	movls	r0, #1
   29368:	83a00000 	movhi	r0, #0
   2936c:	e12fff1e 	bx	lr
   29370:	00000b3e 	.word	0x00000b3e

00029374 <CTimer::GetTimeZone() const>:
   29374:	e5900014 	ldr	r0, [r0, #20]
   29378:	e12fff1e 	bx	lr

0002937c <CTimer::SetTime(unsigned int, bool)>:
   2937c:	e3520000 	cmp	r2, #0
   29380:	e92d4070 	push	{r4, r5, r6, lr}
   29384:	e1a04000 	mov	r4, r0
   29388:	e1a05001 	mov	r5, r1
   2938c:	1a000004 	bne	293a4 <CTimer::SetTime(unsigned int, bool)+0x28>
   29390:	e5903014 	ldr	r3, [r0, #20]
   29394:	e0633203 	rsb	r3, r3, r3, lsl #4
   29398:	e1b03103 	lsls	r3, r3, #2
   2939c:	4a000006 	bmi	293bc <CTimer::SetTime(unsigned int, bool)+0x40>
   293a0:	e0855003 	add	r5, r5, r3
   293a4:	e5940010 	ldr	r0, [r4, #16]
   293a8:	e3500000 	cmp	r0, #0
   293ac:	1a000007 	bne	293d0 <CTimer::SetTime(unsigned int, bool)+0x54>
   293b0:	e3a00001 	mov	r0, #1
   293b4:	e584500c 	str	r5, [r4, #12]
   293b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   293bc:	e2631000 	rsb	r1, r3, #0
   293c0:	e1510005 	cmp	r1, r5
   293c4:	dafffff5 	ble	293a0 <CTimer::SetTime(unsigned int, bool)+0x24>
   293c8:	e1a00002 	mov	r0, r2
   293cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   293d0:	eb000a29 	bl	2bc7c <EnterCritical>
   293d4:	e5943010 	ldr	r3, [r4, #16]
   293d8:	e584500c 	str	r5, [r4, #12]
   293dc:	e3530000 	cmp	r3, #0
   293e0:	0a000002 	beq	293f0 <CTimer::SetTime(unsigned int, bool)+0x74>
   293e4:	eb000a4e 	bl	2bd24 <LeaveCritical>
   293e8:	e3a00001 	mov	r0, #1
   293ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   293f0:	e3a00001 	mov	r0, #1
   293f4:	e8bd8070 	pop	{r4, r5, r6, pc}

000293f8 <CTimer::GetClockTicks()>:
   293f8:	e3a03000 	mov	r3, #0
   293fc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   29400:	e59f2008 	ldr	r2, [pc, #8]	; 29410 <CTimer::GetClockTicks()+0x18>
   29404:	e5920004 	ldr	r0, [r2, #4]
   29408:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2940c:	e12fff1e 	bx	lr
   29410:	20003000 	.word	0x20003000

00029414 <CTimer::GetTicks() const>:
   29414:	e5900004 	ldr	r0, [r0, #4]
   29418:	e12fff1e 	bx	lr

0002941c <CTimer::GetUptime() const>:
   2941c:	e5900008 	ldr	r0, [r0, #8]
   29420:	e12fff1e 	bx	lr

00029424 <CTimer::GetTime() const>:
   29424:	e590000c 	ldr	r0, [r0, #12]
   29428:	e12fff1e 	bx	lr

0002942c <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   2942c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29430:	e1a04000 	mov	r4, r0
   29434:	e5900010 	ldr	r0, [r0, #16]
   29438:	e1a06001 	mov	r6, r1
   2943c:	e3500000 	cmp	r0, #0
   29440:	e1a05002 	mov	r5, r2
   29444:	1a000013 	bne	29498 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x6c>
   29448:	e594700c 	ldr	r7, [r4, #12]
   2944c:	e5944004 	ldr	r4, [r4, #4]
   29450:	e3560000 	cmp	r6, #0
   29454:	0a000018 	beq	294bc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x90>
   29458:	e3550000 	cmp	r5, #0
   2945c:	e5867000 	str	r7, [r6]
   29460:	0a000019 	beq	294cc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
   29464:	e59f3070 	ldr	r3, [pc, #112]	; 294dc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   29468:	e3a00001 	mov	r0, #1
   2946c:	e0832493 	umull	r2, r3, r3, r4
   29470:	e1a032a3 	lsr	r3, r3, #5
   29474:	e0833103 	add	r3, r3, r3, lsl #2
   29478:	e0833103 	add	r3, r3, r3, lsl #2
   2947c:	e0443103 	sub	r3, r4, r3, lsl #2
   29480:	e0632283 	rsb	r2, r3, r3, lsl #5
   29484:	e0833102 	add	r3, r3, r2, lsl #2
   29488:	e0833103 	add	r3, r3, r3, lsl #2
   2948c:	e1a03203 	lsl	r3, r3, #4
   29490:	e5853000 	str	r3, [r5]
   29494:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29498:	eb0009f7 	bl	2bc7c <EnterCritical>
   2949c:	e5943010 	ldr	r3, [r4, #16]
   294a0:	e594700c 	ldr	r7, [r4, #12]
   294a4:	e3530000 	cmp	r3, #0
   294a8:	e5944004 	ldr	r4, [r4, #4]
   294ac:	0affffe7 	beq	29450 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   294b0:	eb000a1b 	bl	2bd24 <LeaveCritical>
   294b4:	e3560000 	cmp	r6, #0
   294b8:	1affffe6 	bne	29458 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   294bc:	e3a02f41 	mov	r2, #260	; 0x104
   294c0:	e59f1018 	ldr	r1, [pc, #24]	; 294e0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   294c4:	e59f0018 	ldr	r0, [pc, #24]	; 294e4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   294c8:	ebffecb6 	bl	247a8 <assertion_failed>
   294cc:	e59f2014 	ldr	r2, [pc, #20]	; 294e8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   294d0:	e59f1008 	ldr	r1, [pc, #8]	; 294e0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   294d4:	e59f0010 	ldr	r0, [pc, #16]	; 294ec <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xc0>
   294d8:	ebffecb2 	bl	247a8 <assertion_failed>
   294dc:	51eb851f 	.word	0x51eb851f
   294e0:	0004710c 	.word	0x0004710c
   294e4:	00047140 	.word	0x00047140
   294e8:	00000107 	.word	0x00000107
   294ec:	00047150 	.word	0x00047150

000294f0 <CTimer::GetUniversalTime() const>:
   294f0:	e5903014 	ldr	r3, [r0, #20]
   294f4:	e590000c 	ldr	r0, [r0, #12]
   294f8:	e0633203 	rsb	r3, r3, r3, lsl #4
   294fc:	e1500103 	cmp	r0, r3, lsl #2
   29500:	e1a03103 	lsl	r3, r3, #2
   29504:	a0400003 	subge	r0, r0, r3
   29508:	b3a00000 	movlt	r0, #0
   2950c:	e12fff1e 	bx	lr

00029510 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   29510:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29514:	e1a05000 	mov	r5, r0
   29518:	e5900010 	ldr	r0, [r0, #16]
   2951c:	e1a06001 	mov	r6, r1
   29520:	e3500000 	cmp	r0, #0
   29524:	e1a04002 	mov	r4, r2
   29528:	1a00001b 	bne	2959c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x8c>
   2952c:	e595800c 	ldr	r8, [r5, #12]
   29530:	e5957004 	ldr	r7, [r5, #4]
   29534:	e5950014 	ldr	r0, [r5, #20]
   29538:	e0600200 	rsb	r0, r0, r0, lsl #4
   2953c:	e1580100 	cmp	r8, r0, lsl #2
   29540:	e1a00100 	lsl	r0, r0, #2
   29544:	ba000012 	blt	29594 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   29548:	e3560000 	cmp	r6, #0
   2954c:	0a00001a 	beq	295bc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xac>
   29550:	e0480000 	sub	r0, r8, r0
   29554:	e3540000 	cmp	r4, #0
   29558:	e5860000 	str	r0, [r6]
   2955c:	0a00001a 	beq	295cc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xbc>
   29560:	e59f3074 	ldr	r3, [pc, #116]	; 295dc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   29564:	e3a00001 	mov	r0, #1
   29568:	e0832793 	umull	r2, r3, r3, r7
   2956c:	e1a032a3 	lsr	r3, r3, #5
   29570:	e0833103 	add	r3, r3, r3, lsl #2
   29574:	e0833103 	add	r3, r3, r3, lsl #2
   29578:	e0473103 	sub	r3, r7, r3, lsl #2
   2957c:	e0632283 	rsb	r2, r3, r3, lsl #5
   29580:	e0833102 	add	r3, r3, r2, lsl #2
   29584:	e0833103 	add	r3, r3, r3, lsl #2
   29588:	e1a03203 	lsl	r3, r3, #4
   2958c:	e5843000 	str	r3, [r4]
   29590:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29594:	e3a00000 	mov	r0, #0
   29598:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2959c:	eb0009b6 	bl	2bc7c <EnterCritical>
   295a0:	e5953010 	ldr	r3, [r5, #16]
   295a4:	e595800c 	ldr	r8, [r5, #12]
   295a8:	e3530000 	cmp	r3, #0
   295ac:	e5957004 	ldr	r7, [r5, #4]
   295b0:	0affffdf 	beq	29534 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   295b4:	eb0009da 	bl	2bd24 <LeaveCritical>
   295b8:	eaffffdd 	b	29534 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   295bc:	e59f201c 	ldr	r2, [pc, #28]	; 295e0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   295c0:	e59f101c 	ldr	r1, [pc, #28]	; 295e4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   295c4:	e59f001c 	ldr	r0, [pc, #28]	; 295e8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   295c8:	ebffec76 	bl	247a8 <assertion_failed>
   295cc:	e3a02f4b 	mov	r2, #300	; 0x12c
   295d0:	e59f100c 	ldr	r1, [pc, #12]	; 295e4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   295d4:	e59f0010 	ldr	r0, [pc, #16]	; 295ec <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
   295d8:	ebffec72 	bl	247a8 <assertion_failed>
   295dc:	51eb851f 	.word	0x51eb851f
   295e0:	00000129 	.word	0x00000129
   295e4:	0004710c 	.word	0x0004710c
   295e8:	00047140 	.word	0x00047140
   295ec:	00047150 	.word	0x00047150

000295f0 <CTimer::GetTimeString()>:
   295f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   295f4:	e1a04000 	mov	r4, r0
   295f8:	e5900010 	ldr	r0, [r0, #16]
   295fc:	e24dd014 	sub	sp, sp, #20
   29600:	e3500000 	cmp	r0, #0
   29604:	1a00005e 	bne	29784 <CTimer::GetTimeString()+0x194>
   29608:	e594b00c 	ldr	fp, [r4, #12]
   2960c:	e594a004 	ldr	sl, [r4, #4]
   29610:	e19b000a 	orrs	r0, fp, sl
   29614:	01a0a000 	moveq	sl, r0
   29618:	0a00004d 	beq	29754 <CTimer::GetTimeString()+0x164>
   2961c:	e59f7180 	ldr	r7, [pc, #384]	; 297a4 <CTimer::GetTimeString()+0x1b4>
   29620:	e59f4180 	ldr	r4, [pc, #384]	; 297a8 <CTimer::GetTimeString()+0x1b8>
   29624:	e0883b97 	umull	r3, r8, r7, fp
   29628:	e1a082a8 	lsr	r8, r8, #5
   2962c:	e1a02008 	mov	r2, r8
   29630:	e0873897 	umull	r3, r7, r7, r8
   29634:	e1a072a7 	lsr	r7, r7, #5
   29638:	e0843794 	umull	r3, r4, r4, r7
   2963c:	e1a09007 	mov	r9, r7
   29640:	e0688208 	rsb	r8, r8, r8, lsl #4
   29644:	e0677207 	rsb	r7, r7, r7, lsl #4
   29648:	e59f615c 	ldr	r6, [pc, #348]	; 297ac <CTimer::GetTimeString()+0x1bc>
   2964c:	e59f515c 	ldr	r5, [pc, #348]	; 297b0 <CTimer::GetTimeString()+0x1c0>
   29650:	e59fe15c 	ldr	lr, [pc, #348]	; 297b4 <CTimer::GetTimeString()+0x1c4>
   29654:	e59fc15c 	ldr	ip, [pc, #348]	; 297b8 <CTimer::GetTimeString()+0x1c8>
   29658:	e04b8108 	sub	r8, fp, r8, lsl #2
   2965c:	e0427107 	sub	r7, r2, r7, lsl #2
   29660:	e1a04224 	lsr	r4, r4, #4
   29664:	ea000008 	b	2968c <CTimer::GetTimeString()+0x9c>
   29668:	e3160003 	tst	r6, #3
   2966c:	03a00001 	moveq	r0, #1
   29670:	13a00000 	movne	r0, #0
   29674:	e2801f5b 	add	r1, r0, #364	; 0x16c
   29678:	e2811001 	add	r1, r1, #1
   2967c:	e1540001 	cmp	r4, r1
   29680:	3a00000b 	bcc	296b4 <CTimer::GetTimeString()+0xc4>
   29684:	e0444001 	sub	r4, r4, r1
   29688:	e2866001 	add	r6, r6, #1
   2968c:	e0030695 	mul	r3, r5, r6
   29690:	e15e0163 	cmp	lr, r3, ror #2
   29694:	3afffff3 	bcc	29668 <CTimer::GetTimeString()+0x78>
   29698:	e15c0263 	cmp	ip, r3, ror #4
   2969c:	23a00001 	movcs	r0, #1
   296a0:	33a00000 	movcc	r0, #0
   296a4:	e2801f5b 	add	r1, r0, #364	; 0x16c
   296a8:	e2811001 	add	r1, r1, #1
   296ac:	e1540001 	cmp	r4, r1
   296b0:	2afffff3 	bcs	29684 <CTimer::GetTimeString()+0x94>
   296b4:	e3a05000 	mov	r5, #0
   296b8:	e59f20fc 	ldr	r2, [pc, #252]	; 297bc <CTimer::GetTimeString()+0x1cc>
   296bc:	ea000001 	b	296c8 <CTimer::GetTimeString()+0xd8>
   296c0:	e0444001 	sub	r4, r4, r1
   296c4:	e2855001 	add	r5, r5, #1
   296c8:	e3550001 	cmp	r5, #1
   296cc:	13a03000 	movne	r3, #0
   296d0:	02003001 	andeq	r3, r0, #1
   296d4:	e3530000 	cmp	r3, #0
   296d8:	13a0101d 	movne	r1, #29
   296dc:	07921105 	ldreq	r1, [r2, r5, lsl #2]
   296e0:	e1540001 	cmp	r4, r1
   296e4:	2afffff5 	bcs	296c0 <CTimer::GetTimeString()+0xd0>
   296e8:	e3a00010 	mov	r0, #16
   296ec:	eb000635 	bl	2afc8 <operator new(unsigned int)>
   296f0:	e59fb0c8 	ldr	fp, [pc, #200]	; 297c0 <CTimer::GetTimeString()+0x1d0>
   296f4:	e08b3a9b 	umull	r3, fp, fp, sl
   296f8:	e1a0b2ab 	lsr	fp, fp, #5
   296fc:	e08bb10b 	add	fp, fp, fp, lsl #2
   29700:	e08bb10b 	add	fp, fp, fp, lsl #2
   29704:	e04ab10b 	sub	fp, sl, fp, lsl #2
   29708:	e1a0a000 	mov	sl, r0
   2970c:	ebfff8fe 	bl	27b0c <CString::CString()>
   29710:	e59f30ac 	ldr	r3, [pc, #172]	; 297c4 <CTimer::GetTimeString()+0x1d4>
   29714:	e1560003 	cmp	r6, r3
   29718:	9a000010 	bls	29760 <CTimer::GetTimeString()+0x170>
   2971c:	e59f3084 	ldr	r3, [pc, #132]	; 297a8 <CTimer::GetTimeString()+0x1b8>
   29720:	e98d0180 	stmib	sp, {r7, r8}
   29724:	e0832993 	umull	r2, r3, r3, r9
   29728:	e1a03223 	lsr	r3, r3, #4
   2972c:	e0833083 	add	r3, r3, r3, lsl #1
   29730:	e0499183 	sub	r9, r9, r3, lsl #3
   29734:	e59f208c 	ldr	r2, [pc, #140]	; 297c8 <CTimer::GetTimeString()+0x1d8>
   29738:	e58db00c 	str	fp, [sp, #12]
   2973c:	e58d9000 	str	r9, [sp]
   29740:	e1a0000a 	mov	r0, sl
   29744:	e7922105 	ldr	r2, [r2, r5, lsl #2]
   29748:	e59f107c 	ldr	r1, [pc, #124]	; 297cc <CTimer::GetTimeString()+0x1dc>
   2974c:	e2843001 	add	r3, r4, #1
   29750:	ebfffe37 	bl	29034 <CString::Format(char const*, ...)>
   29754:	e1a0000a 	mov	r0, sl
   29758:	e28dd014 	add	sp, sp, #20
   2975c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29760:	e1a0000a 	mov	r0, sl
   29764:	e1a03007 	mov	r3, r7
   29768:	e1a02009 	mov	r2, r9
   2976c:	e88d0900 	stm	sp, {r8, fp}
   29770:	e59f1058 	ldr	r1, [pc, #88]	; 297d0 <CTimer::GetTimeString()+0x1e0>
   29774:	ebfffe2e 	bl	29034 <CString::Format(char const*, ...)>
   29778:	e1a0000a 	mov	r0, sl
   2977c:	e28dd014 	add	sp, sp, #20
   29780:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29784:	eb00093c 	bl	2bc7c <EnterCritical>
   29788:	e5943010 	ldr	r3, [r4, #16]
   2978c:	e594b00c 	ldr	fp, [r4, #12]
   29790:	e3530000 	cmp	r3, #0
   29794:	e594a004 	ldr	sl, [r4, #4]
   29798:	0affff9c 	beq	29610 <CTimer::GetTimeString()+0x20>
   2979c:	eb000960 	bl	2bd24 <LeaveCritical>
   297a0:	eaffff9a 	b	29610 <CTimer::GetTimeString()+0x20>
   297a4:	88888889 	.word	0x88888889
   297a8:	aaaaaaab 	.word	0xaaaaaaab
   297ac:	000007b2 	.word	0x000007b2
   297b0:	c28f5c29 	.word	0xc28f5c29
   297b4:	028f5c28 	.word	0x028f5c28
   297b8:	00a3d70a 	.word	0x00a3d70a
   297bc:	00047248 	.word	0x00047248
   297c0:	51eb851f 	.word	0x51eb851f
   297c4:	000007b7 	.word	0x000007b7
   297c8:	0004a314 	.word	0x0004a314
   297cc:	00047164 	.word	0x00047164
   297d0:	00047180 	.word	0x00047180

000297d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   297d4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   297d8:	e1a07000 	mov	r7, r0
   297dc:	e1a04002 	mov	r4, r2
   297e0:	e1a06001 	mov	r6, r1
   297e4:	e3a00014 	mov	r0, #20
   297e8:	e1a08003 	mov	r8, r3
   297ec:	eb0005f5 	bl	2afc8 <operator new(unsigned int)>
   297f0:	e5971004 	ldr	r1, [r7, #4]
   297f4:	e3540000 	cmp	r4, #0
   297f8:	e0816006 	add	r6, r1, r6
   297fc:	0a000034 	beq	298d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x100>
   29800:	e1a05000 	mov	r5, r0
   29804:	e597001c 	ldr	r0, [r7, #28]
   29808:	e59f30f0 	ldr	r3, [pc, #240]	; 29900 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   2980c:	e59d2020 	ldr	r2, [sp, #32]
   29810:	e3500000 	cmp	r0, #0
   29814:	e5854004 	str	r4, [r5, #4]
   29818:	e5856008 	str	r6, [r5, #8]
   2981c:	e585800c 	str	r8, [r5, #12]
   29820:	e5852010 	str	r2, [r5, #16]
   29824:	e5853000 	str	r3, [r5]
   29828:	1a000020 	bne	298b0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
   2982c:	e2874018 	add	r4, r7, #24
   29830:	e1a00004 	mov	r0, r4
   29834:	eb000c62 	bl	2c9c4 <CPtrList::GetFirst()>
   29838:	e2509000 	subs	r9, r0, #0
   2983c:	0a00002a 	beq	298ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   29840:	e59f80b8 	ldr	r8, [pc, #184]	; 29900 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   29844:	e1a01009 	mov	r1, r9
   29848:	e1a00004 	mov	r0, r4
   2984c:	eb000c73 	bl	2ca20 <CPtrList::GetPtr(TPtrListElement*)>
   29850:	e2503000 	subs	r3, r0, #0
   29854:	0a00000d 	beq	29890 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xbc>
   29858:	e5932000 	ldr	r2, [r3]
   2985c:	e1520008 	cmp	r2, r8
   29860:	1a00000e 	bne	298a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xcc>
   29864:	e5933008 	ldr	r3, [r3, #8]
   29868:	e1a01009 	mov	r1, r9
   2986c:	e0433006 	sub	r3, r3, r6
   29870:	e3530000 	cmp	r3, #0
   29874:	e1a00004 	mov	r0, r4
   29878:	ca00000e 	bgt	298b8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe4>
   2987c:	eb000c52 	bl	2c9cc <CPtrList::GetNext(TPtrListElement*)>
   29880:	e3500000 	cmp	r0, #0
   29884:	0a000018 	beq	298ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   29888:	e1a09000 	mov	r9, r0
   2988c:	eaffffec 	b	29844 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x70>
   29890:	e59f206c 	ldr	r2, [pc, #108]	; 29904 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
   29894:	e59f106c 	ldr	r1, [pc, #108]	; 29908 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   29898:	e59f006c 	ldr	r0, [pc, #108]	; 2990c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
   2989c:	ebffebc1 	bl	247a8 <assertion_failed>
   298a0:	e3a02f65 	mov	r2, #404	; 0x194
   298a4:	e59f105c 	ldr	r1, [pc, #92]	; 29908 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   298a8:	e59f0060 	ldr	r0, [pc, #96]	; 29910 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
   298ac:	ebffebbd 	bl	247a8 <assertion_failed>
   298b0:	eb0008f1 	bl	2bc7c <EnterCritical>
   298b4:	eaffffdc 	b	2982c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
   298b8:	e1a02005 	mov	r2, r5
   298bc:	eb000c6c 	bl	2ca74 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   298c0:	e597301c 	ldr	r3, [r7, #28]
   298c4:	e3530000 	cmp	r3, #0
   298c8:	1a000005 	bne	298e4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x110>
   298cc:	e1a00005 	mov	r0, r5
   298d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   298d4:	e59f2038 	ldr	r2, [pc, #56]	; 29914 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
   298d8:	e59f1028 	ldr	r1, [pc, #40]	; 29908 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   298dc:	e59f0034 	ldr	r0, [pc, #52]	; 29918 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
   298e0:	ebffebb0 	bl	247a8 <assertion_failed>
   298e4:	eb00090e 	bl	2bd24 <LeaveCritical>
   298e8:	eafffff7 	b	298cc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
   298ec:	e1a01009 	mov	r1, r9
   298f0:	e1a00004 	mov	r0, r4
   298f4:	e1a02005 	mov	r2, r5
   298f8:	eb000c97 	bl	2cb5c <CPtrList::InsertAfter(TPtrListElement*, void*)>
   298fc:	eaffffef 	b	298c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xec>
   29900:	4b544d43 	.word	0x4b544d43
   29904:	00000193 	.word	0x00000193
   29908:	0004710c 	.word	0x0004710c
   2990c:	00047194 	.word	0x00047194
   29910:	000471a4 	.word	0x000471a4
   29914:	00000183 	.word	0x00000183
   29918:	00047638 	.word	0x00047638

0002991c <CTimer::CancelKernelTimer(unsigned int)>:
   2991c:	e92d4070 	push	{r4, r5, r6, lr}
   29920:	e2514000 	subs	r4, r1, #0
   29924:	0a000019 	beq	29990 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   29928:	e1a05000 	mov	r5, r0
   2992c:	e590001c 	ldr	r0, [r0, #28]
   29930:	e3500000 	cmp	r0, #0
   29934:	1a000013 	bne	29988 <CTimer::CancelKernelTimer(unsigned int)+0x6c>
   29938:	e2856018 	add	r6, r5, #24
   2993c:	e1a01004 	mov	r1, r4
   29940:	e1a00006 	mov	r0, r6
   29944:	eb000d01 	bl	2cd50 <CPtrList::Find(void*)>
   29948:	e2501000 	subs	r1, r0, #0
   2994c:	0a000008 	beq	29974 <CTimer::CancelKernelTimer(unsigned int)+0x58>
   29950:	e59f3058 	ldr	r3, [pc, #88]	; 299b0 <CTimer::CancelKernelTimer(unsigned int)+0x94>
   29954:	e5942000 	ldr	r2, [r4]
   29958:	e1520003 	cmp	r2, r3
   2995c:	1a00000f 	bne	299a0 <CTimer::CancelKernelTimer(unsigned int)+0x84>
   29960:	e1a00006 	mov	r0, r6
   29964:	eb000cb5 	bl	2cc40 <CPtrList::Remove(TPtrListElement*)>
   29968:	e1a00004 	mov	r0, r4
   2996c:	e3a01014 	mov	r1, #20
   29970:	eb0005a2 	bl	2b000 <operator delete(void*, unsigned int)>
   29974:	e595301c 	ldr	r3, [r5, #28]
   29978:	e3530000 	cmp	r3, #0
   2997c:	08bd8070 	popeq	{r4, r5, r6, pc}
   29980:	e8bd4070 	pop	{r4, r5, r6, lr}
   29984:	ea0008e6 	b	2bd24 <LeaveCritical>
   29988:	eb0008bb 	bl	2bc7c <EnterCritical>
   2998c:	eaffffe9 	b	29938 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   29990:	e3a02e1b 	mov	r2, #432	; 0x1b0
   29994:	e59f1018 	ldr	r1, [pc, #24]	; 299b4 <CTimer::CancelKernelTimer(unsigned int)+0x98>
   29998:	e59f0018 	ldr	r0, [pc, #24]	; 299b8 <CTimer::CancelKernelTimer(unsigned int)+0x9c>
   2999c:	ebffeb81 	bl	247a8 <assertion_failed>
   299a0:	e59f2014 	ldr	r2, [pc, #20]	; 299bc <CTimer::CancelKernelTimer(unsigned int)+0xa0>
   299a4:	e59f1008 	ldr	r1, [pc, #8]	; 299b4 <CTimer::CancelKernelTimer(unsigned int)+0x98>
   299a8:	e59f0010 	ldr	r0, [pc, #16]	; 299c0 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   299ac:	ebffeb7d 	bl	247a8 <assertion_failed>
   299b0:	4b544d43 	.word	0x4b544d43
   299b4:	0004710c 	.word	0x0004710c
   299b8:	00042db8 	.word	0x00042db8
   299bc:	000001b7 	.word	0x000001b7
   299c0:	00047118 	.word	0x00047118

000299c4 <CTimer::PollKernelTimers()>:
   299c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   299c8:	e1a05000 	mov	r5, r0
   299cc:	e590001c 	ldr	r0, [r0, #28]
   299d0:	e24dd008 	sub	sp, sp, #8
   299d4:	e3500000 	cmp	r0, #0
   299d8:	1a000038 	bne	29ac0 <CTimer::PollKernelTimers()+0xfc>
   299dc:	e2857018 	add	r7, r5, #24
   299e0:	e1a00007 	mov	r0, r7
   299e4:	eb000bf6 	bl	2c9c4 <CPtrList::GetFirst()>
   299e8:	e2501000 	subs	r1, r0, #0
   299ec:	0a00003d 	beq	29ae8 <CTimer::PollKernelTimers()+0x124>
   299f0:	e59f8110 	ldr	r8, [pc, #272]	; 29b08 <CTimer::PollKernelTimers()+0x144>
   299f4:	e1a00007 	mov	r0, r7
   299f8:	e58d1004 	str	r1, [sp, #4]
   299fc:	eb000c07 	bl	2ca20 <CPtrList::GetPtr(TPtrListElement*)>
   29a00:	e2504000 	subs	r4, r0, #0
   29a04:	e59d1004 	ldr	r1, [sp, #4]
   29a08:	0a00002e 	beq	29ac8 <CTimer::PollKernelTimers()+0x104>
   29a0c:	e5943000 	ldr	r3, [r4]
   29a10:	e1530008 	cmp	r3, r8
   29a14:	1a00002f 	bne	29ad8 <CTimer::PollKernelTimers()+0x114>
   29a18:	e5952004 	ldr	r2, [r5, #4]
   29a1c:	e5943008 	ldr	r3, [r4, #8]
   29a20:	e0433002 	sub	r3, r3, r2
   29a24:	e3530000 	cmp	r3, #0
   29a28:	ca00002e 	bgt	29ae8 <CTimer::PollKernelTimers()+0x124>
   29a2c:	e1a00007 	mov	r0, r7
   29a30:	e58d1004 	str	r1, [sp, #4]
   29a34:	eb000be4 	bl	2c9cc <CPtrList::GetNext(TPtrListElement*)>
   29a38:	e59d1004 	ldr	r1, [sp, #4]
   29a3c:	e1a06000 	mov	r6, r0
   29a40:	e1a00007 	mov	r0, r7
   29a44:	eb000c7d 	bl	2cc40 <CPtrList::Remove(TPtrListElement*)>
   29a48:	e595301c 	ldr	r3, [r5, #28]
   29a4c:	e3530000 	cmp	r3, #0
   29a50:	1a000010 	bne	29a98 <CTimer::PollKernelTimers()+0xd4>
   29a54:	e5943004 	ldr	r3, [r4, #4]
   29a58:	e3530000 	cmp	r3, #0
   29a5c:	0a000011 	beq	29aa8 <CTimer::PollKernelTimers()+0xe4>
   29a60:	e1a00004 	mov	r0, r4
   29a64:	e5942010 	ldr	r2, [r4, #16]
   29a68:	e594100c 	ldr	r1, [r4, #12]
   29a6c:	e12fff33 	blx	r3
   29a70:	e1a00004 	mov	r0, r4
   29a74:	e3a01014 	mov	r1, #20
   29a78:	eb000560 	bl	2b000 <operator delete(void*, unsigned int)>
   29a7c:	e595001c 	ldr	r0, [r5, #28]
   29a80:	e3500000 	cmp	r0, #0
   29a84:	1a00000b 	bne	29ab8 <CTimer::PollKernelTimers()+0xf4>
   29a88:	e3560000 	cmp	r6, #0
   29a8c:	0a000015 	beq	29ae8 <CTimer::PollKernelTimers()+0x124>
   29a90:	e1a01006 	mov	r1, r6
   29a94:	eaffffd6 	b	299f4 <CTimer::PollKernelTimers()+0x30>
   29a98:	eb0008a1 	bl	2bd24 <LeaveCritical>
   29a9c:	e5943004 	ldr	r3, [r4, #4]
   29aa0:	e3530000 	cmp	r3, #0
   29aa4:	1affffed 	bne	29a60 <CTimer::PollKernelTimers()+0x9c>
   29aa8:	e59f205c 	ldr	r2, [pc, #92]	; 29b0c <CTimer::PollKernelTimers()+0x148>
   29aac:	e59f105c 	ldr	r1, [pc, #92]	; 29b10 <CTimer::PollKernelTimers()+0x14c>
   29ab0:	e59f005c 	ldr	r0, [pc, #92]	; 29b14 <CTimer::PollKernelTimers()+0x150>
   29ab4:	ebffeb3b 	bl	247a8 <assertion_failed>
   29ab8:	eb00086f 	bl	2bc7c <EnterCritical>
   29abc:	eafffff1 	b	29a88 <CTimer::PollKernelTimers()+0xc4>
   29ac0:	eb00086d 	bl	2bc7c <EnterCritical>
   29ac4:	eaffffc4 	b	299dc <CTimer::PollKernelTimers()+0x18>
   29ac8:	e3a02f73 	mov	r2, #460	; 0x1cc
   29acc:	e59f103c 	ldr	r1, [pc, #60]	; 29b10 <CTimer::PollKernelTimers()+0x14c>
   29ad0:	e59f0040 	ldr	r0, [pc, #64]	; 29b18 <CTimer::PollKernelTimers()+0x154>
   29ad4:	ebffeb33 	bl	247a8 <assertion_failed>
   29ad8:	e59f203c 	ldr	r2, [pc, #60]	; 29b1c <CTimer::PollKernelTimers()+0x158>
   29adc:	e59f102c 	ldr	r1, [pc, #44]	; 29b10 <CTimer::PollKernelTimers()+0x14c>
   29ae0:	e59f0038 	ldr	r0, [pc, #56]	; 29b20 <CTimer::PollKernelTimers()+0x15c>
   29ae4:	ebffeb2f 	bl	247a8 <assertion_failed>
   29ae8:	e595301c 	ldr	r3, [r5, #28]
   29aec:	e3530000 	cmp	r3, #0
   29af0:	1a000001 	bne	29afc <CTimer::PollKernelTimers()+0x138>
   29af4:	e28dd008 	add	sp, sp, #8
   29af8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29afc:	e28dd008 	add	sp, sp, #8
   29b00:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   29b04:	ea000886 	b	2bd24 <LeaveCritical>
   29b08:	4b544d43 	.word	0x4b544d43
   29b0c:	000001db 	.word	0x000001db
   29b10:	0004710c 	.word	0x0004710c
   29b14:	00047638 	.word	0x00047638
   29b18:	00042db8 	.word	0x00042db8
   29b1c:	000001cd 	.word	0x000001cd
   29b20:	00047118 	.word	0x00047118

00029b24 <CTimer::InterruptHandler()>:
   29b24:	e92d4070 	push	{r4, r5, r6, lr}
   29b28:	e3a03000 	mov	r3, #0
   29b2c:	e1a04000 	mov	r4, r0
   29b30:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   29b34:	e59f20f4 	ldr	r2, [pc, #244]	; 29c30 <CTimer::InterruptHandler()+0x10c>
   29b38:	e5923018 	ldr	r3, [r2, #24]
   29b3c:	e2833c27 	add	r3, r3, #9984	; 0x2700
   29b40:	e2833010 	add	r3, r3, #16
   29b44:	e5823018 	str	r3, [r2, #24]
   29b48:	e5921004 	ldr	r1, [r2, #4]
   29b4c:	e1530001 	cmp	r3, r1
   29b50:	e3a01008 	mov	r1, #8
   29b54:	35923004 	ldrcc	r3, [r2, #4]
   29b58:	32833c27 	addcc	r3, r3, #9984	; 0x2700
   29b5c:	32833010 	addcc	r3, r3, #16
   29b60:	35823018 	strcc	r3, [r2, #24]
   29b64:	e59f20c4 	ldr	r2, [pc, #196]	; 29c30 <CTimer::InterruptHandler()+0x10c>
   29b68:	e3a03000 	mov	r3, #0
   29b6c:	e5821000 	str	r1, [r2]
   29b70:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   29b74:	e5900010 	ldr	r0, [r0, #16]
   29b78:	e1500003 	cmp	r0, r3
   29b7c:	1a000017 	bne	29be0 <CTimer::InterruptHandler()+0xbc>
   29b80:	e5942004 	ldr	r2, [r4, #4]
   29b84:	e59f30a8 	ldr	r3, [pc, #168]	; 29c34 <CTimer::InterruptHandler()+0x110>
   29b88:	e2822001 	add	r2, r2, #1
   29b8c:	e0831293 	umull	r1, r3, r3, r2
   29b90:	e1a032a3 	lsr	r3, r3, #5
   29b94:	e0833103 	add	r3, r3, r3, lsl #2
   29b98:	e0833103 	add	r3, r3, r3, lsl #2
   29b9c:	e0523103 	subs	r3, r2, r3, lsl #2
   29ba0:	e5842004 	str	r2, [r4, #4]
   29ba4:	0a000017 	beq	29c08 <CTimer::InterruptHandler()+0xe4>
   29ba8:	e1a00004 	mov	r0, r4
   29bac:	ebffff84 	bl	299c4 <CTimer::PollKernelTimers()>
   29bb0:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   29bb4:	e3530000 	cmp	r3, #0
   29bb8:	08bd8070 	popeq	{r4, r5, r6, pc}
   29bbc:	e3a05000 	mov	r5, #0
   29bc0:	e2846028 	add	r6, r4, #40	; 0x28
   29bc4:	e4963004 	ldr	r3, [r6], #4
   29bc8:	e12fff33 	blx	r3
   29bcc:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   29bd0:	e2855001 	add	r5, r5, #1
   29bd4:	e1530005 	cmp	r3, r5
   29bd8:	8afffff9 	bhi	29bc4 <CTimer::InterruptHandler()+0xa0>
   29bdc:	e8bd8070 	pop	{r4, r5, r6, pc}
   29be0:	eb000825 	bl	2bc7c <EnterCritical>
   29be4:	e5943004 	ldr	r3, [r4, #4]
   29be8:	e59f2048 	ldr	r2, [pc, #72]	; 29c38 <CTimer::InterruptHandler()+0x114>
   29bec:	e2833001 	add	r3, r3, #1
   29bf0:	e0020392 	mul	r2, r2, r3
   29bf4:	e59f1040 	ldr	r1, [pc, #64]	; 29c3c <CTimer::InterruptHandler()+0x118>
   29bf8:	e5843004 	str	r3, [r4, #4]
   29bfc:	e1510162 	cmp	r1, r2, ror #2
   29c00:	e5943010 	ldr	r3, [r4, #16]
   29c04:	3a000005 	bcc	29c20 <CTimer::InterruptHandler()+0xfc>
   29c08:	e5942008 	ldr	r2, [r4, #8]
   29c0c:	e2822001 	add	r2, r2, #1
   29c10:	e5842008 	str	r2, [r4, #8]
   29c14:	e594200c 	ldr	r2, [r4, #12]
   29c18:	e2822001 	add	r2, r2, #1
   29c1c:	e584200c 	str	r2, [r4, #12]
   29c20:	e3530000 	cmp	r3, #0
   29c24:	0affffdf 	beq	29ba8 <CTimer::InterruptHandler()+0x84>
   29c28:	eb00083d 	bl	2bd24 <LeaveCritical>
   29c2c:	eaffffdd 	b	29ba8 <CTimer::InterruptHandler()+0x84>
   29c30:	20003000 	.word	0x20003000
   29c34:	51eb851f 	.word	0x51eb851f
   29c38:	c28f5c29 	.word	0xc28f5c29
   29c3c:	028f5c28 	.word	0x028f5c28

00029c40 <CTimer::InterruptHandler(void*)>:
   29c40:	e3500000 	cmp	r0, #0
   29c44:	0a000000 	beq	29c4c <CTimer::InterruptHandler(void*)+0xc>
   29c48:	eaffffb5 	b	29b24 <CTimer::InterruptHandler()>
   29c4c:	e92d4010 	push	{r4, lr}
   29c50:	e59f2008 	ldr	r2, [pc, #8]	; 29c60 <CTimer::InterruptHandler(void*)+0x20>
   29c54:	e59f1008 	ldr	r1, [pc, #8]	; 29c64 <CTimer::InterruptHandler(void*)+0x24>
   29c58:	e59f0008 	ldr	r0, [pc, #8]	; 29c68 <CTimer::InterruptHandler(void*)+0x28>
   29c5c:	ebffead1 	bl	247a8 <assertion_failed>
   29c60:	00000223 	.word	0x00000223
   29c64:	0004710c 	.word	0x0004710c
   29c68:	00040b44 	.word	0x00040b44

00029c6c <CTimer::TuneMsDelay()>:
   29c6c:	e92d4070 	push	{r4, r5, r6, lr}
   29c70:	e1a05000 	mov	r5, r0
   29c74:	e5900020 	ldr	r0, [r0, #32]
   29c78:	e24dd008 	sub	sp, sp, #8
   29c7c:	e0603280 	rsb	r3, r0, r0, lsl #5
   29c80:	e0800103 	add	r0, r0, r3, lsl #2
   29c84:	e1a00180 	lsl	r0, r0, #3
   29c88:	e5954004 	ldr	r4, [r5, #4]
   29c8c:	eb000a6f 	bl	2c650 <DelayLoop>
   29c90:	e5951004 	ldr	r1, [r5, #4]
   29c94:	e59f0068 	ldr	r0, [pc, #104]	; 29d04 <CTimer::TuneMsDelay()+0x98>
   29c98:	e0411004 	sub	r1, r1, r4
   29c9c:	eb00532f 	bl	3e960 <__udivsi3>
   29ca0:	e1a06000 	mov	r6, r0
   29ca4:	e5953020 	ldr	r3, [r5, #32]
   29ca8:	e59f4058 	ldr	r4, [pc, #88]	; 29d08 <CTimer::TuneMsDelay()+0x9c>
   29cac:	e0030093 	mul	r3, r3, r0
   29cb0:	e0832394 	umull	r2, r3, r4, r3
   29cb4:	e59f1050 	ldr	r1, [pc, #80]	; 29d0c <CTimer::TuneMsDelay()+0xa0>
   29cb8:	e1a032a3 	lsr	r3, r3, #5
   29cbc:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   29cc0:	e0821291 	umull	r1, r2, r1, r2
   29cc4:	e1a02322 	lsr	r2, r2, #6
   29cc8:	e5852024 	str	r2, [r5, #36]	; 0x24
   29ccc:	e5853020 	str	r3, [r5, #32]
   29cd0:	ebfff39c 	bl	26b48 <CLogger::Get()>
   29cd4:	e0832694 	umull	r2, r3, r4, r6
   29cd8:	e1a032a3 	lsr	r3, r3, #5
   29cdc:	e0832103 	add	r2, r3, r3, lsl #2
   29ce0:	e0822102 	add	r2, r2, r2, lsl #2
   29ce4:	e0466102 	sub	r6, r6, r2, lsl #2
   29ce8:	e88d0048 	stm	sp, {r3, r6}
   29cec:	e3a02003 	mov	r2, #3
   29cf0:	e59f3018 	ldr	r3, [pc, #24]	; 29d10 <CTimer::TuneMsDelay()+0xa4>
   29cf4:	e59f1018 	ldr	r1, [pc, #24]	; 29d14 <CTimer::TuneMsDelay()+0xa8>
   29cf8:	ebfff2d4 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29cfc:	e28dd008 	add	sp, sp, #8
   29d00:	e8bd8070 	pop	{r4, r5, r6, pc}
   29d04:	00002710 	.word	0x00002710
   29d08:	51eb851f 	.word	0x51eb851f
   29d0c:	10624dd3 	.word	0x10624dd3
   29d10:	000471cc 	.word	0x000471cc
   29d14:	00047278 	.word	0x00047278

00029d18 <CTimer::Initialize()>:
   29d18:	e92d4070 	push	{r4, r5, r6, lr}
   29d1c:	e1a04000 	mov	r4, r0
   29d20:	e5900000 	ldr	r0, [r0]
   29d24:	e3500000 	cmp	r0, #0
   29d28:	0a000011 	beq	29d74 <CTimer::Initialize()+0x5c>
   29d2c:	e1a03004 	mov	r3, r4
   29d30:	e3a01003 	mov	r1, #3
   29d34:	e59f2048 	ldr	r2, [pc, #72]	; 29d84 <CTimer::Initialize()+0x6c>
   29d38:	eb0008cd 	bl	2c074 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   29d3c:	e3a05000 	mov	r5, #0
   29d40:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   29d44:	e59f203c 	ldr	r2, [pc, #60]	; 29d88 <CTimer::Initialize()+0x70>
   29d48:	e59f303c 	ldr	r3, [pc, #60]	; 29d8c <CTimer::Initialize()+0x74>
   29d4c:	e1a00004 	mov	r0, r4
   29d50:	e5823004 	str	r3, [r2, #4]
   29d54:	e5923004 	ldr	r3, [r2, #4]
   29d58:	e2833c27 	add	r3, r3, #9984	; 0x2700
   29d5c:	e2833010 	add	r3, r3, #16
   29d60:	e5823018 	str	r3, [r2, #24]
   29d64:	ebffffc0 	bl	29c6c <CTimer::TuneMsDelay()>
   29d68:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   29d6c:	e3a00001 	mov	r0, #1
   29d70:	e8bd8070 	pop	{r4, r5, r6, pc}
   29d74:	e3a02065 	mov	r2, #101	; 0x65
   29d78:	e59f1010 	ldr	r1, [pc, #16]	; 29d90 <CTimer::Initialize()+0x78>
   29d7c:	e59f0010 	ldr	r0, [pc, #16]	; 29d94 <CTimer::Initialize()+0x7c>
   29d80:	ebffea88 	bl	247a8 <assertion_failed>
   29d84:	00029c40 	.word	0x00029c40
   29d88:	20003000 	.word	0x20003000
   29d8c:	fe363c80 	.word	0xfe363c80
   29d90:	0004710c 	.word	0x0004710c
   29d94:	00040b7c 	.word	0x00040b7c

00029d98 <CTimer::RegisterPeriodicHandler(void (*)())>:
   29d98:	e3510000 	cmp	r1, #0
   29d9c:	e92d4010 	push	{r4, lr}
   29da0:	0a00000b 	beq	29dd4 <CTimer::RegisterPeriodicHandler(void (*)())+0x3c>
   29da4:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   29da8:	e3530003 	cmp	r3, #3
   29dac:	8a00000c 	bhi	29de4 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   29db0:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   29db4:	e3a02000 	mov	r2, #0
   29db8:	e283300a 	add	r3, r3, #10
   29dbc:	e7801103 	str	r1, [r0, r3, lsl #2]
   29dc0:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   29dc4:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   29dc8:	e2833001 	add	r3, r3, #1
   29dcc:	e5803038 	str	r3, [r0, #56]	; 0x38
   29dd0:	e8bd8010 	pop	{r4, pc}
   29dd4:	e59f2018 	ldr	r2, [pc, #24]	; 29df4 <CTimer::RegisterPeriodicHandler(void (*)())+0x5c>
   29dd8:	e59f1018 	ldr	r1, [pc, #24]	; 29df8 <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   29ddc:	e59f0018 	ldr	r0, [pc, #24]	; 29dfc <CTimer::RegisterPeriodicHandler(void (*)())+0x64>
   29de0:	ebffea70 	bl	247a8 <assertion_failed>
   29de4:	e59f2014 	ldr	r2, [pc, #20]	; 29e00 <CTimer::RegisterPeriodicHandler(void (*)())+0x68>
   29de8:	e59f1008 	ldr	r1, [pc, #8]	; 29df8 <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   29dec:	e59f0010 	ldr	r0, [pc, #16]	; 29e04 <CTimer::RegisterPeriodicHandler(void (*)())+0x6c>
   29df0:	ebffea6c 	bl	247a8 <assertion_failed>
   29df4:	00000239 	.word	0x00000239
   29df8:	0004710c 	.word	0x0004710c
   29dfc:	00047638 	.word	0x00047638
   29e00:	0000023b 	.word	0x0000023b
   29e04:	000471e4 	.word	0x000471e4

00029e08 <CTimer::SimpleMsDelay(unsigned int)>:
   29e08:	e3500000 	cmp	r0, #0
   29e0c:	012fff1e 	bxeq	lr
   29e10:	e0603280 	rsb	r3, r0, r0, lsl #5
   29e14:	e0800103 	add	r0, r0, r3, lsl #2
   29e18:	e1b00180 	lsls	r0, r0, #3
   29e1c:	012fff1e 	bxeq	lr
   29e20:	eafffce2 	b	291b0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

00029e24 <CTimer::SimpleusDelay(unsigned int)>:
   29e24:	e3500000 	cmp	r0, #0
   29e28:	012fff1e 	bxeq	lr
   29e2c:	eafffcdf 	b	291b0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

00029e30 <CTimer::IsLeapYear(unsigned int)>:
   29e30:	e59f3030 	ldr	r3, [pc, #48]	; 29e68 <CTimer::IsLeapYear(unsigned int)+0x38>
   29e34:	e59f2030 	ldr	r2, [pc, #48]	; 29e6c <CTimer::IsLeapYear(unsigned int)+0x3c>
   29e38:	e0030093 	mul	r3, r3, r0
   29e3c:	e1520163 	cmp	r2, r3, ror #2
   29e40:	2a000003 	bcs	29e54 <CTimer::IsLeapYear(unsigned int)+0x24>
   29e44:	e3100003 	tst	r0, #3
   29e48:	03a00001 	moveq	r0, #1
   29e4c:	13a00000 	movne	r0, #0
   29e50:	e12fff1e 	bx	lr
   29e54:	e59f2014 	ldr	r2, [pc, #20]	; 29e70 <CTimer::IsLeapYear(unsigned int)+0x40>
   29e58:	e1520263 	cmp	r2, r3, ror #4
   29e5c:	23a00001 	movcs	r0, #1
   29e60:	33a00000 	movcc	r0, #0
   29e64:	e12fff1e 	bx	lr
   29e68:	c28f5c29 	.word	0xc28f5c29
   29e6c:	028f5c28 	.word	0x028f5c28
   29e70:	00a3d70a 	.word	0x00a3d70a

00029e74 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   29e74:	e3500001 	cmp	r0, #1
   29e78:	0a000002 	beq	29e88 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   29e7c:	e59f3048 	ldr	r3, [pc, #72]	; 29ecc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x58>
   29e80:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   29e84:	e12fff1e 	bx	lr
   29e88:	e59f3040 	ldr	r3, [pc, #64]	; 29ed0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x5c>
   29e8c:	e59f2040 	ldr	r2, [pc, #64]	; 29ed4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
   29e90:	e0030193 	mul	r3, r3, r1
   29e94:	e1520163 	cmp	r2, r3, ror #2
   29e98:	2a000006 	bcs	29eb8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x44>
   29e9c:	e3110003 	tst	r1, #3
   29ea0:	03a03001 	moveq	r3, #1
   29ea4:	13a03000 	movne	r3, #0
   29ea8:	e3530000 	cmp	r3, #0
   29eac:	0afffff2 	beq	29e7c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   29eb0:	e3a0001d 	mov	r0, #29
   29eb4:	e12fff1e 	bx	lr
   29eb8:	e59f2018 	ldr	r2, [pc, #24]	; 29ed8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x64>
   29ebc:	e1520263 	cmp	r2, r3, ror #4
   29ec0:	23a03001 	movcs	r3, #1
   29ec4:	33a03000 	movcc	r3, #0
   29ec8:	eafffff6 	b	29ea8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x34>
   29ecc:	00047248 	.word	0x00047248
   29ed0:	c28f5c29 	.word	0xc28f5c29
   29ed4:	028f5c28 	.word	0x028f5c28
   29ed8:	00a3d70a 	.word	0x00a3d70a

00029edc <CTimer::Get()>:
   29edc:	e59f301c 	ldr	r3, [pc, #28]	; 29f00 <CTimer::Get()+0x24>
   29ee0:	e5930000 	ldr	r0, [r3]
   29ee4:	e3500000 	cmp	r0, #0
   29ee8:	112fff1e 	bxne	lr
   29eec:	e3a02f9f 	mov	r2, #636	; 0x27c
   29ef0:	e92d4010 	push	{r4, lr}
   29ef4:	e59f1008 	ldr	r1, [pc, #8]	; 29f04 <CTimer::Get()+0x28>
   29ef8:	e59f0008 	ldr	r0, [pc, #8]	; 29f08 <CTimer::Get()+0x2c>
   29efc:	ebffea29 	bl	247a8 <assertion_failed>
   29f00:	0005ce48 	.word	0x0005ce48
   29f04:	0004710c 	.word	0x0004710c
   29f08:	00045380 	.word	0x00045380

00029f0c <memset>:
   29f0c:	e352000f 	cmp	r2, #15
   29f10:	e200c003 	and	ip, r0, #3
   29f14:	93a03000 	movls	r3, #0
   29f18:	83a03001 	movhi	r3, #1
   29f1c:	e35c0000 	cmp	ip, #0
   29f20:	13a03000 	movne	r3, #0
   29f24:	e3530000 	cmp	r3, #0
   29f28:	1a000008 	bne	29f50 <memset+0x44>
   29f2c:	e3520000 	cmp	r2, #0
   29f30:	e1a03000 	mov	r3, r0
   29f34:	012fff1e 	bxeq	lr
   29f38:	e6af1071 	sxtb	r1, r1
   29f3c:	e0802002 	add	r2, r0, r2
   29f40:	e4c31001 	strb	r1, [r3], #1
   29f44:	e1530002 	cmp	r3, r2
   29f48:	1afffffc 	bne	29f40 <memset+0x34>
   29f4c:	e12fff1e 	bx	lr
   29f50:	e2423010 	sub	r3, r2, #16
   29f54:	e3c3c00f 	bic	ip, r3, #15
   29f58:	e92d4010 	push	{r4, lr}
   29f5c:	e2804020 	add	r4, r0, #32
   29f60:	e181e401 	orr	lr, r1, r1, lsl #8
   29f64:	e084400c 	add	r4, r4, ip
   29f68:	e1a03223 	lsr	r3, r3, #4
   29f6c:	e18ee80e 	orr	lr, lr, lr, lsl #16
   29f70:	e280c010 	add	ip, r0, #16
   29f74:	e50ce010 	str	lr, [ip, #-16]
   29f78:	e50ce00c 	str	lr, [ip, #-12]
   29f7c:	e50ce008 	str	lr, [ip, #-8]
   29f80:	e50ce004 	str	lr, [ip, #-4]
   29f84:	e28cc010 	add	ip, ip, #16
   29f88:	e15c0004 	cmp	ip, r4
   29f8c:	1afffff8 	bne	29f74 <memset+0x68>
   29f90:	e202200f 	and	r2, r2, #15
   29f94:	e2833001 	add	r3, r3, #1
   29f98:	e3520000 	cmp	r2, #0
   29f9c:	e0803203 	add	r3, r0, r3, lsl #4
   29fa0:	08bd8010 	popeq	{r4, pc}
   29fa4:	e6af1071 	sxtb	r1, r1
   29fa8:	e0832002 	add	r2, r3, r2
   29fac:	e4c31001 	strb	r1, [r3], #1
   29fb0:	e1530002 	cmp	r3, r2
   29fb4:	1afffffc 	bne	29fac <memset+0xa0>
   29fb8:	e8bd8010 	pop	{r4, pc}

00029fbc <memmove>:
   29fbc:	e1500001 	cmp	r0, r1
   29fc0:	9a000002 	bls	29fd0 <memmove+0x14>
   29fc4:	e0813002 	add	r3, r1, r2
   29fc8:	e1530000 	cmp	r3, r0
   29fcc:	8a000000 	bhi	29fd4 <memmove+0x18>
   29fd0:	ea000216 	b	2a830 <memcpy>
   29fd4:	e3520000 	cmp	r2, #0
   29fd8:	e0802002 	add	r2, r0, r2
   29fdc:	012fff1e 	bxeq	lr
   29fe0:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   29fe4:	e1510003 	cmp	r1, r3
   29fe8:	e562c001 	strb	ip, [r2, #-1]!
   29fec:	1afffffb 	bne	29fe0 <memmove+0x24>
   29ff0:	e12fff1e 	bx	lr

00029ff4 <memcmp>:
   29ff4:	e3520000 	cmp	r2, #0
   29ff8:	e242c001 	sub	ip, r2, #1
   29ffc:	0a00000c 	beq	2a034 <memcmp+0x40>
   2a000:	e080c00c 	add	ip, r0, ip
   2a004:	e2411001 	sub	r1, r1, #1
   2a008:	e2400001 	sub	r0, r0, #1
   2a00c:	ea000002 	b	2a01c <memcmp+0x28>
   2a010:	3a000009 	bcc	2a03c <memcmp+0x48>
   2a014:	e150000c 	cmp	r0, ip
   2a018:	0a000005 	beq	2a034 <memcmp+0x40>
   2a01c:	e5f02001 	ldrb	r2, [r0, #1]!
   2a020:	e5f13001 	ldrb	r3, [r1, #1]!
   2a024:	e1520003 	cmp	r2, r3
   2a028:	9afffff8 	bls	2a010 <memcmp+0x1c>
   2a02c:	e3a00001 	mov	r0, #1
   2a030:	e12fff1e 	bx	lr
   2a034:	e3a00000 	mov	r0, #0
   2a038:	e12fff1e 	bx	lr
   2a03c:	e3e00000 	mvn	r0, #0
   2a040:	e12fff1e 	bx	lr

0002a044 <strlen>:
   2a044:	e0d030d1 	ldrsb	r3, [r0], #1
   2a048:	e3530000 	cmp	r3, #0
   2a04c:	0a000004 	beq	2a064 <strlen+0x20>
   2a050:	e3a03000 	mov	r3, #0
   2a054:	e0d020d1 	ldrsb	r2, [r0], #1
   2a058:	e2833001 	add	r3, r3, #1
   2a05c:	e3520000 	cmp	r2, #0
   2a060:	1afffffb 	bne	2a054 <strlen+0x10>
   2a064:	e1a00003 	mov	r0, r3
   2a068:	e12fff1e 	bx	lr

0002a06c <strcmp>:
   2a06c:	e1d030d0 	ldrsb	r3, [r0]
   2a070:	e3530000 	cmp	r3, #0
   2a074:	1a000006 	bne	2a094 <strcmp+0x28>
   2a078:	ea000016 	b	2a0d8 <strcmp+0x6c>
   2a07c:	e1520003 	cmp	r2, r3
   2a080:	ba00000c 	blt	2a0b8 <strcmp+0x4c>
   2a084:	ca00000d 	bgt	2a0c0 <strcmp+0x54>
   2a088:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a08c:	e3530000 	cmp	r3, #0
   2a090:	0a00000c 	beq	2a0c8 <strcmp+0x5c>
   2a094:	e1a0c001 	mov	ip, r1
   2a098:	e0d120d1 	ldrsb	r2, [r1], #1
   2a09c:	e3520000 	cmp	r2, #0
   2a0a0:	1afffff5 	bne	2a07c <strcmp+0x10>
   2a0a4:	e1530002 	cmp	r3, r2
   2a0a8:	ca000002 	bgt	2a0b8 <strcmp+0x4c>
   2a0ac:	b3e00000 	mvnlt	r0, #0
   2a0b0:	a3a00000 	movge	r0, #0
   2a0b4:	e12fff1e 	bx	lr
   2a0b8:	e3a00001 	mov	r0, #1
   2a0bc:	e12fff1e 	bx	lr
   2a0c0:	e3e00000 	mvn	r0, #0
   2a0c4:	e12fff1e 	bx	lr
   2a0c8:	e1dc20d1 	ldrsb	r2, [ip, #1]
   2a0cc:	e1530002 	cmp	r3, r2
   2a0d0:	dafffff5 	ble	2a0ac <strcmp+0x40>
   2a0d4:	eafffff7 	b	2a0b8 <strcmp+0x4c>
   2a0d8:	e1d120d0 	ldrsb	r2, [r1]
   2a0dc:	eafffff0 	b	2a0a4 <strcmp+0x38>

0002a0e0 <strcasecmp>:
   2a0e0:	e2400001 	sub	r0, r0, #1
   2a0e4:	ea000009 	b	2a110 <strcasecmp+0x30>
   2a0e8:	e0d130d1 	ldrsb	r3, [r1], #1
   2a0ec:	e243c061 	sub	ip, r3, #97	; 0x61
   2a0f0:	e35c0019 	cmp	ip, #25
   2a0f4:	92433020 	subls	r3, r3, #32
   2a0f8:	9a000001 	bls	2a104 <strcasecmp+0x24>
   2a0fc:	e3530000 	cmp	r3, #0
   2a100:	0a000012 	beq	2a150 <strcasecmp+0x70>
   2a104:	e1520003 	cmp	r2, r3
   2a108:	ca000012 	bgt	2a158 <strcasecmp+0x78>
   2a10c:	ba000013 	blt	2a160 <strcasecmp+0x80>
   2a110:	e1f020d1 	ldrsb	r2, [r0, #1]!
   2a114:	e2423061 	sub	r3, r2, #97	; 0x61
   2a118:	e3530019 	cmp	r3, #25
   2a11c:	92422020 	subls	r2, r2, #32
   2a120:	9afffff0 	bls	2a0e8 <strcasecmp+0x8>
   2a124:	e3520000 	cmp	r2, #0
   2a128:	1affffee 	bne	2a0e8 <strcasecmp+0x8>
   2a12c:	e1d130d0 	ldrsb	r3, [r1]
   2a130:	e2431061 	sub	r1, r3, #97	; 0x61
   2a134:	e3510019 	cmp	r1, #25
   2a138:	92433020 	subls	r3, r3, #32
   2a13c:	8a000003 	bhi	2a150 <strcasecmp+0x70>
   2a140:	e1530002 	cmp	r3, r2
   2a144:	d3a00000 	movle	r0, #0
   2a148:	c3e00000 	mvngt	r0, #0
   2a14c:	e12fff1e 	bx	lr
   2a150:	e1530002 	cmp	r3, r2
   2a154:	aafffff9 	bge	2a140 <strcasecmp+0x60>
   2a158:	e3a00001 	mov	r0, #1
   2a15c:	e12fff1e 	bx	lr
   2a160:	e3e00000 	mvn	r0, #0
   2a164:	e12fff1e 	bx	lr

0002a168 <strncmp>:
   2a168:	e3520000 	cmp	r2, #0
   2a16c:	0a000015 	beq	2a1c8 <strncmp+0x60>
   2a170:	e240c001 	sub	ip, r0, #1
   2a174:	e0810002 	add	r0, r1, r2
   2a178:	ea000007 	b	2a19c <strncmp+0x34>
   2a17c:	e0d120d1 	ldrsb	r2, [r1], #1
   2a180:	e3520000 	cmp	r2, #0
   2a184:	0a000008 	beq	2a1ac <strncmp+0x44>
   2a188:	e1530002 	cmp	r3, r2
   2a18c:	ca00000b 	bgt	2a1c0 <strncmp+0x58>
   2a190:	ba00000e 	blt	2a1d0 <strncmp+0x68>
   2a194:	e1510000 	cmp	r1, r0
   2a198:	0a00000a 	beq	2a1c8 <strncmp+0x60>
   2a19c:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2a1a0:	e3530000 	cmp	r3, #0
   2a1a4:	1afffff4 	bne	2a17c <strncmp+0x14>
   2a1a8:	e1d120d0 	ldrsb	r2, [r1]
   2a1ac:	e1520003 	cmp	r2, r3
   2a1b0:	ba000002 	blt	2a1c0 <strncmp+0x58>
   2a1b4:	c3e00000 	mvngt	r0, #0
   2a1b8:	d3a00000 	movle	r0, #0
   2a1bc:	e12fff1e 	bx	lr
   2a1c0:	e3a00001 	mov	r0, #1
   2a1c4:	e12fff1e 	bx	lr
   2a1c8:	e3a00000 	mov	r0, #0
   2a1cc:	e12fff1e 	bx	lr
   2a1d0:	e3e00000 	mvn	r0, #0
   2a1d4:	e12fff1e 	bx	lr

0002a1d8 <strncasecmp>:
   2a1d8:	e3520000 	cmp	r2, #0
   2a1dc:	0a00001e 	beq	2a25c <strncasecmp+0x84>
   2a1e0:	e240c001 	sub	ip, r0, #1
   2a1e4:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2a1e8:	e2430061 	sub	r0, r3, #97	; 0x61
   2a1ec:	e3500019 	cmp	r0, #25
   2a1f0:	92433020 	subls	r3, r3, #32
   2a1f4:	8a00000e 	bhi	2a234 <strncasecmp+0x5c>
   2a1f8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2a1fc:	e0d100d1 	ldrsb	r0, [r1], #1
   2a200:	e240e061 	sub	lr, r0, #97	; 0x61
   2a204:	e35e0019 	cmp	lr, #25
   2a208:	92400020 	subls	r0, r0, #32
   2a20c:	9a000014 	bls	2a264 <strncasecmp+0x8c>
   2a210:	e3500000 	cmp	r0, #0
   2a214:	1a000012 	bne	2a264 <strncasecmp+0x8c>
   2a218:	e1530000 	cmp	r3, r0
   2a21c:	ca000022 	bgt	2a2ac <strncasecmp+0xd4>
   2a220:	e1500003 	cmp	r0, r3
   2a224:	d3a02000 	movle	r2, #0
   2a228:	c3e02000 	mvngt	r2, #0
   2a22c:	e1a00002 	mov	r0, r2
   2a230:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2a234:	e3530000 	cmp	r3, #0
   2a238:	1affffee 	bne	2a1f8 <strncasecmp+0x20>
   2a23c:	e1d100d0 	ldrsb	r0, [r1]
   2a240:	e2402061 	sub	r2, r0, #97	; 0x61
   2a244:	e3520019 	cmp	r2, #25
   2a248:	92400020 	subls	r0, r0, #32
   2a24c:	8a00001c 	bhi	2a2c4 <strncasecmp+0xec>
   2a250:	e1500003 	cmp	r0, r3
   2a254:	d3a02000 	movle	r2, #0
   2a258:	c3e02000 	mvngt	r2, #0
   2a25c:	e1a00002 	mov	r0, r2
   2a260:	e12fff1e 	bx	lr
   2a264:	e1530000 	cmp	r3, r0
   2a268:	ca00000f 	bgt	2a2ac <strncasecmp+0xd4>
   2a26c:	ba000011 	blt	2a2b8 <strncasecmp+0xe0>
   2a270:	e2522001 	subs	r2, r2, #1
   2a274:	0affffec 	beq	2a22c <strncasecmp+0x54>
   2a278:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2a27c:	e2430061 	sub	r0, r3, #97	; 0x61
   2a280:	e3500019 	cmp	r0, #25
   2a284:	92433020 	subls	r3, r3, #32
   2a288:	9affffdb 	bls	2a1fc <strncasecmp+0x24>
   2a28c:	e3530000 	cmp	r3, #0
   2a290:	1affffd9 	bne	2a1fc <strncasecmp+0x24>
   2a294:	e1d100d0 	ldrsb	r0, [r1]
   2a298:	e2402061 	sub	r2, r0, #97	; 0x61
   2a29c:	e3520019 	cmp	r2, #25
   2a2a0:	92400020 	subls	r0, r0, #32
   2a2a4:	9affffdd 	bls	2a220 <strncasecmp+0x48>
   2a2a8:	eaffffda 	b	2a218 <strncasecmp+0x40>
   2a2ac:	e3a02001 	mov	r2, #1
   2a2b0:	e1a00002 	mov	r0, r2
   2a2b4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2a2b8:	e3e02000 	mvn	r2, #0
   2a2bc:	e1a00002 	mov	r0, r2
   2a2c0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2a2c4:	e1530000 	cmp	r3, r0
   2a2c8:	c3a02001 	movgt	r2, #1
   2a2cc:	daffffdf 	ble	2a250 <strncasecmp+0x78>
   2a2d0:	eaffffe1 	b	2a25c <strncasecmp+0x84>

0002a2d4 <strcpy>:
   2a2d4:	e1d130d0 	ldrsb	r3, [r1]
   2a2d8:	e1a02000 	mov	r2, r0
   2a2dc:	e3530000 	cmp	r3, #0
   2a2e0:	0a000003 	beq	2a2f4 <strcpy+0x20>
   2a2e4:	e4c23001 	strb	r3, [r2], #1
   2a2e8:	e1f130d1 	ldrsb	r3, [r1, #1]!
   2a2ec:	e3530000 	cmp	r3, #0
   2a2f0:	1afffffb 	bne	2a2e4 <strcpy+0x10>
   2a2f4:	e3a03000 	mov	r3, #0
   2a2f8:	e5c23000 	strb	r3, [r2]
   2a2fc:	e12fff1e 	bx	lr

0002a300 <strncpy>:
   2a300:	e3520000 	cmp	r2, #0
   2a304:	012fff1e 	bxeq	lr
   2a308:	e1a0c000 	mov	ip, r0
   2a30c:	e2411001 	sub	r1, r1, #1
   2a310:	e0802002 	add	r2, r0, r2
   2a314:	ea000002 	b	2a324 <strncpy+0x24>
   2a318:	e4cc3001 	strb	r3, [ip], #1
   2a31c:	e15c0002 	cmp	ip, r2
   2a320:	012fff1e 	bxeq	lr
   2a324:	e1f130d1 	ldrsb	r3, [r1, #1]!
   2a328:	e3530000 	cmp	r3, #0
   2a32c:	1afffff9 	bne	2a318 <strncpy+0x18>
   2a330:	e5cc3000 	strb	r3, [ip]
   2a334:	e12fff1e 	bx	lr

0002a338 <strcat>:
   2a338:	e1d030d0 	ldrsb	r3, [r0]
   2a33c:	e3530000 	cmp	r3, #0
   2a340:	e1a03000 	mov	r3, r0
   2a344:	0a000002 	beq	2a354 <strcat+0x1c>
   2a348:	e1f320d1 	ldrsb	r2, [r3, #1]!
   2a34c:	e3520000 	cmp	r2, #0
   2a350:	1afffffc 	bne	2a348 <strcat+0x10>
   2a354:	e1d120d0 	ldrsb	r2, [r1]
   2a358:	e3520000 	cmp	r2, #0
   2a35c:	0a000003 	beq	2a370 <strcat+0x38>
   2a360:	e4c32001 	strb	r2, [r3], #1
   2a364:	e1f120d1 	ldrsb	r2, [r1, #1]!
   2a368:	e3520000 	cmp	r2, #0
   2a36c:	1afffffb 	bne	2a360 <strcat+0x28>
   2a370:	e3a02000 	mov	r2, #0
   2a374:	e5c32000 	strb	r2, [r3]
   2a378:	e12fff1e 	bx	lr

0002a37c <strchr>:
   2a37c:	e1d030d0 	ldrsb	r3, [r0]
   2a380:	e3530000 	cmp	r3, #0
   2a384:	0a000004 	beq	2a39c <strchr+0x20>
   2a388:	e1530001 	cmp	r3, r1
   2a38c:	012fff1e 	bxeq	lr
   2a390:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a394:	e3530000 	cmp	r3, #0
   2a398:	1afffffa 	bne	2a388 <strchr+0xc>
   2a39c:	e1a00003 	mov	r0, r3
   2a3a0:	e12fff1e 	bx	lr

0002a3a4 <strstr>:
   2a3a4:	e1d030d0 	ldrsb	r3, [r0]
   2a3a8:	e3530000 	cmp	r3, #0
   2a3ac:	1a000003 	bne	2a3c0 <strstr+0x1c>
   2a3b0:	e1d130d0 	ldrsb	r3, [r1]
   2a3b4:	e3530000 	cmp	r3, #0
   2a3b8:	13a00000 	movne	r0, #0
   2a3bc:	e12fff1e 	bx	lr
   2a3c0:	e92d4010 	push	{r4, lr}
   2a3c4:	e1d140d0 	ldrsb	r4, [r1]
   2a3c8:	e3540000 	cmp	r4, #0
   2a3cc:	08bd8010 	popeq	{r4, pc}
   2a3d0:	e1a0e001 	mov	lr, r1
   2a3d4:	e1a03004 	mov	r3, r4
   2a3d8:	e2402001 	sub	r2, r0, #1
   2a3dc:	ea000002 	b	2a3ec <strstr+0x48>
   2a3e0:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   2a3e4:	e3530000 	cmp	r3, #0
   2a3e8:	08bd8010 	popeq	{r4, pc}
   2a3ec:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   2a3f0:	e15c0003 	cmp	ip, r3
   2a3f4:	0afffff9 	beq	2a3e0 <strstr+0x3c>
   2a3f8:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a3fc:	e3530000 	cmp	r3, #0
   2a400:	1afffff0 	bne	2a3c8 <strstr+0x24>
   2a404:	e1a00003 	mov	r0, r3
   2a408:	e8bd8010 	pop	{r4, pc}

0002a40c <strtok_r>:
   2a40c:	e3500000 	cmp	r0, #0
   2a410:	0a000027 	beq	2a4b4 <strtok_r+0xa8>
   2a414:	e1d0c0d0 	ldrsb	ip, [r0]
   2a418:	e35c0000 	cmp	ip, #0
   2a41c:	0a00002a 	beq	2a4cc <strtok_r+0xc0>
   2a420:	e92d4030 	push	{r4, r5, lr}
   2a424:	e1d140d0 	ldrsb	r4, [r1]
   2a428:	e3540000 	cmp	r4, #0
   2a42c:	0a00000a 	beq	2a45c <strtok_r+0x50>
   2a430:	e1a0e001 	mov	lr, r1
   2a434:	e1a03004 	mov	r3, r4
   2a438:	ea000002 	b	2a448 <strtok_r+0x3c>
   2a43c:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   2a440:	e3530000 	cmp	r3, #0
   2a444:	0a000004 	beq	2a45c <strtok_r+0x50>
   2a448:	e153000c 	cmp	r3, ip
   2a44c:	1afffffa 	bne	2a43c <strtok_r+0x30>
   2a450:	e3540000 	cmp	r4, #0
   2a454:	e1f0c0d1 	ldrsb	ip, [r0, #1]!
   2a458:	1afffff4 	bne	2a430 <strtok_r+0x24>
   2a45c:	e35c0000 	cmp	ip, #0
   2a460:	11a05000 	movne	r5, r0
   2a464:	0a00001b 	beq	2a4d8 <strtok_r+0xcc>
   2a468:	e3540000 	cmp	r4, #0
   2a46c:	0a00000b 	beq	2a4a0 <strtok_r+0x94>
   2a470:	e1a03004 	mov	r3, r4
   2a474:	e1a0e001 	mov	lr, r1
   2a478:	ea000002 	b	2a488 <strtok_r+0x7c>
   2a47c:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   2a480:	e3530000 	cmp	r3, #0
   2a484:	0a000005 	beq	2a4a0 <strtok_r+0x94>
   2a488:	e153000c 	cmp	r3, ip
   2a48c:	1afffffa 	bne	2a47c <strtok_r+0x70>
   2a490:	e3a03000 	mov	r3, #0
   2a494:	e4c53001 	strb	r3, [r5], #1
   2a498:	e5825000 	str	r5, [r2]
   2a49c:	e8bd8030 	pop	{r4, r5, pc}
   2a4a0:	e1f5c0d1 	ldrsb	ip, [r5, #1]!
   2a4a4:	e35c0000 	cmp	ip, #0
   2a4a8:	1affffee 	bne	2a468 <strtok_r+0x5c>
   2a4ac:	e5825000 	str	r5, [r2]
   2a4b0:	e8bd8030 	pop	{r4, r5, pc}
   2a4b4:	e5920000 	ldr	r0, [r2]
   2a4b8:	e3500000 	cmp	r0, #0
   2a4bc:	012fff1e 	bxeq	lr
   2a4c0:	e1d0c0d0 	ldrsb	ip, [r0]
   2a4c4:	e35c0000 	cmp	ip, #0
   2a4c8:	1affffd4 	bne	2a420 <strtok_r+0x14>
   2a4cc:	e3a00000 	mov	r0, #0
   2a4d0:	e5820000 	str	r0, [r2]
   2a4d4:	e12fff1e 	bx	lr
   2a4d8:	e3a00000 	mov	r0, #0
   2a4dc:	e5820000 	str	r0, [r2]
   2a4e0:	e8bd8030 	pop	{r4, r5, pc}

0002a4e4 <strtoul>:
   2a4e4:	e3510000 	cmp	r1, #0
   2a4e8:	e2423002 	sub	r3, r2, #2
   2a4ec:	15810000 	strne	r0, [r1]
   2a4f0:	e3520000 	cmp	r2, #0
   2a4f4:	13530022 	cmpne	r3, #34	; 0x22
   2a4f8:	8a000044 	bhi	2a610 <strtoul+0x12c>
   2a4fc:	e92d4070 	push	{r4, r5, r6, lr}
   2a500:	e1a0e000 	mov	lr, r0
   2a504:	e1de30d0 	ldrsb	r3, [lr]
   2a508:	e1a0c00e 	mov	ip, lr
   2a50c:	e2430009 	sub	r0, r3, #9
   2a510:	e3530020 	cmp	r3, #32
   2a514:	e28ee001 	add	lr, lr, #1
   2a518:	e6ef0070 	uxtb	r0, r0
   2a51c:	0afffff8 	beq	2a504 <strtoul+0x20>
   2a520:	e3500004 	cmp	r0, #4
   2a524:	9afffff6 	bls	2a504 <strtoul+0x20>
   2a528:	e353002b 	cmp	r3, #43	; 0x2b
   2a52c:	0a000027 	beq	2a5d0 <strtoul+0xec>
   2a530:	e353002d 	cmp	r3, #45	; 0x2d
   2a534:	01dc30d1 	ldrsbeq	r3, [ip, #1]
   2a538:	03a06001 	moveq	r6, #1
   2a53c:	01a0c00e 	moveq	ip, lr
   2a540:	13a06000 	movne	r6, #0
   2a544:	e3530030 	cmp	r3, #48	; 0x30
   2a548:	0a000025 	beq	2a5e4 <strtoul+0x100>
   2a54c:	e3520000 	cmp	r2, #0
   2a550:	03a0200a 	moveq	r2, #10
   2a554:	e353002f 	cmp	r3, #47	; 0x2f
   2a558:	e1a0e003 	mov	lr, r3
   2a55c:	da00003c 	ble	2a654 <strtoul+0x170>
   2a560:	e3a05001 	mov	r5, #1
   2a564:	e3a04000 	mov	r4, #0
   2a568:	ea000008 	b	2a590 <strtoul+0xac>
   2a56c:	e020e294 	mla	r0, r4, r2, lr
   2a570:	e1500004 	cmp	r0, r4
   2a574:	3a00002b 	bcc	2a628 <strtoul+0x144>
   2a578:	e1fce0d1 	ldrsb	lr, [ip, #1]!
   2a57c:	e3a05000 	mov	r5, #0
   2a580:	e35e002f 	cmp	lr, #47	; 0x2f
   2a584:	e1a0300e 	mov	r3, lr
   2a588:	da00002b 	ble	2a63c <strtoul+0x158>
   2a58c:	e1a04000 	mov	r4, r0
   2a590:	e2433061 	sub	r3, r3, #97	; 0x61
   2a594:	e3530019 	cmp	r3, #25
   2a598:	924ee020 	subls	lr, lr, #32
   2a59c:	e35e0040 	cmp	lr, #64	; 0x40
   2a5a0:	c24ee007 	subgt	lr, lr, #7
   2a5a4:	e24ee030 	sub	lr, lr, #48	; 0x30
   2a5a8:	e15e0002 	cmp	lr, r2
   2a5ac:	baffffee 	blt	2a56c <strtoul+0x88>
   2a5b0:	e1a00004 	mov	r0, r4
   2a5b4:	e2255001 	eor	r5, r5, #1
   2a5b8:	e3510000 	cmp	r1, #0
   2a5bc:	e0055006 	and	r5, r5, r6
   2a5c0:	1581c000 	strne	ip, [r1]
   2a5c4:	e3550000 	cmp	r5, #0
   2a5c8:	12600000 	rsbne	r0, r0, #0
   2a5cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a5d0:	e1dc30d1 	ldrsb	r3, [ip, #1]
   2a5d4:	e3a06000 	mov	r6, #0
   2a5d8:	e3530030 	cmp	r3, #48	; 0x30
   2a5dc:	e1a0c00e 	mov	ip, lr
   2a5e0:	1affffd9 	bne	2a54c <strtoul+0x68>
   2a5e4:	e1dc30d1 	ldrsb	r3, [ip, #1]
   2a5e8:	e28ce001 	add	lr, ip, #1
   2a5ec:	e3c30020 	bic	r0, r3, #32
   2a5f0:	e3500058 	cmp	r0, #88	; 0x58
   2a5f4:	1a000007 	bne	2a618 <strtoul+0x134>
   2a5f8:	e3d23010 	bics	r3, r2, #16
   2a5fc:	1a000012 	bne	2a64c <strtoul+0x168>
   2a600:	e1dc30d2 	ldrsb	r3, [ip, #2]
   2a604:	e3a02010 	mov	r2, #16
   2a608:	e28cc002 	add	ip, ip, #2
   2a60c:	eaffffd0 	b	2a554 <strtoul+0x70>
   2a610:	e3a00000 	mov	r0, #0
   2a614:	e12fff1e 	bx	lr
   2a618:	e3520000 	cmp	r2, #0
   2a61c:	e1a0c00e 	mov	ip, lr
   2a620:	03a02008 	moveq	r2, #8
   2a624:	eaffffca 	b	2a554 <strtoul+0x70>
   2a628:	e3510000 	cmp	r1, #0
   2a62c:	0a000004 	beq	2a644 <strtoul+0x160>
   2a630:	e3e00000 	mvn	r0, #0
   2a634:	e581c000 	str	ip, [r1]
   2a638:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a63c:	e3a05001 	mov	r5, #1
   2a640:	eaffffdc 	b	2a5b8 <strtoul+0xd4>
   2a644:	e3e00000 	mvn	r0, #0
   2a648:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a64c:	e3a00000 	mov	r0, #0
   2a650:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a654:	e3510000 	cmp	r1, #0
   2a658:	0afffffb 	beq	2a64c <strtoul+0x168>
   2a65c:	e3a00000 	mov	r0, #0
   2a660:	e581c000 	str	ip, [r1]
   2a664:	e8bd8070 	pop	{r4, r5, r6, pc}

0002a668 <strtoull>:
   2a668:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a66c:	e2423002 	sub	r3, r2, #2
   2a670:	e251e000 	subs	lr, r1, #0
   2a674:	158e0000 	strne	r0, [lr]
   2a678:	e3520000 	cmp	r2, #0
   2a67c:	13530022 	cmpne	r3, #34	; 0x22
   2a680:	8a00004f 	bhi	2a7c4 <strtoull+0x15c>
   2a684:	e1a01000 	mov	r1, r0
   2a688:	e1d130d0 	ldrsb	r3, [r1]
   2a68c:	e1a0c001 	mov	ip, r1
   2a690:	e2430009 	sub	r0, r3, #9
   2a694:	e3530020 	cmp	r3, #32
   2a698:	e2811001 	add	r1, r1, #1
   2a69c:	e6ef0070 	uxtb	r0, r0
   2a6a0:	0afffff8 	beq	2a688 <strtoull+0x20>
   2a6a4:	e3500004 	cmp	r0, #4
   2a6a8:	9afffff6 	bls	2a688 <strtoull+0x20>
   2a6ac:	e353002b 	cmp	r3, #43	; 0x2b
   2a6b0:	0a000034 	beq	2a788 <strtoull+0x120>
   2a6b4:	e353002d 	cmp	r3, #45	; 0x2d
   2a6b8:	01dc30d1 	ldrsbeq	r3, [ip, #1]
   2a6bc:	03a08001 	moveq	r8, #1
   2a6c0:	01a0c001 	moveq	ip, r1
   2a6c4:	13a08000 	movne	r8, #0
   2a6c8:	e3530030 	cmp	r3, #48	; 0x30
   2a6cc:	0a000032 	beq	2a79c <strtoull+0x134>
   2a6d0:	e3520000 	cmp	r2, #0
   2a6d4:	03a0200a 	moveq	r2, #10
   2a6d8:	e353002f 	cmp	r3, #47	; 0x2f
   2a6dc:	e1a09003 	mov	r9, r3
   2a6e0:	da000049 	ble	2a80c <strtoull+0x1a4>
   2a6e4:	e3a0a001 	mov	sl, #1
   2a6e8:	e3a04000 	mov	r4, #0
   2a6ec:	e3a05000 	mov	r5, #0
   2a6f0:	e1a06002 	mov	r6, r2
   2a6f4:	e1a07fc2 	asr	r7, r2, #31
   2a6f8:	ea00000f 	b	2a73c <strtoull+0xd4>
   2a6fc:	e0030592 	mul	r3, r2, r5
   2a700:	e0810492 	umull	r0, r1, r2, r4
   2a704:	e0233794 	mla	r3, r4, r7, r3
   2a708:	e0900009 	adds	r0, r0, r9
   2a70c:	e0831001 	add	r1, r3, r1
   2a710:	e0a11fc9 	adc	r1, r1, r9, asr #31
   2a714:	e1510005 	cmp	r1, r5
   2a718:	01500004 	cmpeq	r0, r4
   2a71c:	3a00002f 	bcc	2a7e0 <strtoull+0x178>
   2a720:	e1fc90d1 	ldrsb	r9, [ip, #1]!
   2a724:	e3a0a000 	mov	sl, #0
   2a728:	e359002f 	cmp	r9, #47	; 0x2f
   2a72c:	e1a03009 	mov	r3, r9
   2a730:	da000030 	ble	2a7f8 <strtoull+0x190>
   2a734:	e1a04000 	mov	r4, r0
   2a738:	e1a05001 	mov	r5, r1
   2a73c:	e2433061 	sub	r3, r3, #97	; 0x61
   2a740:	e3530019 	cmp	r3, #25
   2a744:	92499020 	subls	r9, r9, #32
   2a748:	e3590040 	cmp	r9, #64	; 0x40
   2a74c:	c2499007 	subgt	r9, r9, #7
   2a750:	e2499030 	sub	r9, r9, #48	; 0x30
   2a754:	e1590002 	cmp	r9, r2
   2a758:	baffffe7 	blt	2a6fc <strtoull+0x94>
   2a75c:	e1a00004 	mov	r0, r4
   2a760:	e1a01005 	mov	r1, r5
   2a764:	e22aa001 	eor	sl, sl, #1
   2a768:	e35e0000 	cmp	lr, #0
   2a76c:	e008800a 	and	r8, r8, sl
   2a770:	158ec000 	strne	ip, [lr]
   2a774:	e3580000 	cmp	r8, #0
   2a778:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a77c:	e2700000 	rsbs	r0, r0, #0
   2a780:	e2e11000 	rsc	r1, r1, #0
   2a784:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a788:	e1dc30d1 	ldrsb	r3, [ip, #1]
   2a78c:	e3a08000 	mov	r8, #0
   2a790:	e3530030 	cmp	r3, #48	; 0x30
   2a794:	e1a0c001 	mov	ip, r1
   2a798:	1affffcc 	bne	2a6d0 <strtoull+0x68>
   2a79c:	e1dc30d1 	ldrsb	r3, [ip, #1]
   2a7a0:	e28c0001 	add	r0, ip, #1
   2a7a4:	e3c31020 	bic	r1, r3, #32
   2a7a8:	e3510058 	cmp	r1, #88	; 0x58
   2a7ac:	1a000007 	bne	2a7d0 <strtoull+0x168>
   2a7b0:	e3d23010 	bics	r3, r2, #16
   2a7b4:	01dc30d2 	ldrsbeq	r3, [ip, #2]
   2a7b8:	03a02010 	moveq	r2, #16
   2a7bc:	028cc002 	addeq	ip, ip, #2
   2a7c0:	0affffc4 	beq	2a6d8 <strtoull+0x70>
   2a7c4:	e3a00000 	mov	r0, #0
   2a7c8:	e3a01000 	mov	r1, #0
   2a7cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a7d0:	e3520000 	cmp	r2, #0
   2a7d4:	e1a0c000 	mov	ip, r0
   2a7d8:	03a02008 	moveq	r2, #8
   2a7dc:	eaffffbd 	b	2a6d8 <strtoull+0x70>
   2a7e0:	e35e0000 	cmp	lr, #0
   2a7e4:	0a000005 	beq	2a800 <strtoull+0x198>
   2a7e8:	e3e00000 	mvn	r0, #0
   2a7ec:	e3a01000 	mov	r1, #0
   2a7f0:	e58ec000 	str	ip, [lr]
   2a7f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a7f8:	e3a0a001 	mov	sl, #1
   2a7fc:	eaffffd9 	b	2a768 <strtoull+0x100>
   2a800:	e3e00000 	mvn	r0, #0
   2a804:	e3a01000 	mov	r1, #0
   2a808:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a80c:	e35e0000 	cmp	lr, #0
   2a810:	e3a00000 	mov	r0, #0
   2a814:	e3a01000 	mov	r1, #0
   2a818:	158ec000 	strne	ip, [lr]
   2a81c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002a820 <atoi>:
   2a820:	e3a0200a 	mov	r2, #10
   2a824:	e3a01000 	mov	r1, #0
   2a828:	eaffff2d 	b	2a4e4 <strtoul>

0002a82c <char2int>:
   2a82c:	e12fff1e 	bx	lr

0002a830 <memcpy>:
   2a830:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   2a834:	e352007f 	cmp	r2, #127	; 0x7f
   2a838:	9a00000b 	bls	2a86c <memcpy+0x3c>
   2a83c:	e3110003 	tst	r1, #3
   2a840:	1a000009 	bne	2a86c <memcpy+0x3c>
   2a844:	e3100003 	tst	r0, #3
   2a848:	1a000007 	bne	2a86c <memcpy+0x3c>
   2a84c:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   2a850:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   2a854:	e2422020 	sub	r2, r2, #32
   2a858:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   2a85c:	f5d1f040 	pld	[r1, #64]	; 0x40
   2a860:	e352001f 	cmp	r2, #31
   2a864:	8afffff9 	bhi	2a850 <memcpy+0x20>
   2a868:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   2a86c:	e3520000 	cmp	r2, #0
   2a870:	0a000003 	beq	2a884 <memcpy+0x54>
   2a874:	e4d13001 	ldrb	r3, [r1], #1
   2a878:	e2522001 	subs	r2, r2, #1
   2a87c:	e4c03001 	strb	r3, [r0], #1
   2a880:	1afffffb 	bne	2a874 <memcpy+0x44>
   2a884:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   2a888:	e12fff1e 	bx	lr

0002a88c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   2a88c:	e3a03000 	mov	r3, #0
   2a890:	e3510001 	cmp	r1, #1
   2a894:	91a0c002 	movls	ip, r2
   2a898:	8382c001 	orrhi	ip, r2, #1
   2a89c:	e92d4070 	push	{r4, r5, r6, lr}
   2a8a0:	e1a04000 	mov	r4, r0
   2a8a4:	e59f0128 	ldr	r0, [pc, #296]	; 2a9d4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x148>
   2a8a8:	e15c0003 	cmp	ip, r3
   2a8ac:	e24dd020 	sub	sp, sp, #32
   2a8b0:	e5c42004 	strb	r2, [r4, #4]
   2a8b4:	e5841008 	str	r1, [r4, #8]
   2a8b8:	e5840000 	str	r0, [r4]
   2a8bc:	e5843010 	str	r3, [r4, #16]
   2a8c0:	0a000002 	beq	2a8d0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x44>
   2a8c4:	e1a00004 	mov	r0, r4
   2a8c8:	e28dd020 	add	sp, sp, #32
   2a8cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a8d0:	e59f5100 	ldr	r5, [pc, #256]	; 2a9d8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x14c>
   2a8d4:	e5950004 	ldr	r0, [r5, #4]
   2a8d8:	e1500003 	cmp	r0, r3
   2a8dc:	1a00000e 	bne	2a91c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x90>
   2a8e0:	e5956000 	ldr	r6, [r5]
   2a8e4:	e3560000 	cmp	r6, #0
   2a8e8:	0a00000f 	beq	2a92c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xa0>
   2a8ec:	e3a02000 	mov	r2, #0
   2a8f0:	e5943008 	ldr	r3, [r4, #8]
   2a8f4:	e7862103 	str	r2, [r6, r3, lsl #2]
   2a8f8:	e5953004 	ldr	r3, [r5, #4]
   2a8fc:	e3530000 	cmp	r3, #0
   2a900:	1a000025 	bne	2a99c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x110>
   2a904:	e1a00004 	mov	r0, r4
   2a908:	e3a01000 	mov	r1, #0
   2a90c:	eb00003b 	bl	2aa00 <CVirtualGPIOPin::Write(unsigned int)>
   2a910:	e1a00004 	mov	r0, r4
   2a914:	e28dd020 	add	sp, sp, #32
   2a918:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a91c:	eb0004d6 	bl	2bc7c <EnterCritical>
   2a920:	e5956000 	ldr	r6, [r5]
   2a924:	e3560000 	cmp	r6, #0
   2a928:	1affffef 	bne	2a8ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   2a92c:	e3a00001 	mov	r0, #1
   2a930:	eb000492 	bl	2bb80 <CMemorySystem::GetCoherentPage(unsigned int)>
   2a934:	e1a03000 	mov	r3, r0
   2a938:	e1a01006 	mov	r1, r6
   2a93c:	e28d0008 	add	r0, sp, #8
   2a940:	e5853000 	str	r3, [r5]
   2a944:	ebffe7b8 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2a948:	e3a03004 	mov	r3, #4
   2a94c:	e595c000 	ldr	ip, [r5]
   2a950:	e58d3000 	str	r3, [sp]
   2a954:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   2a958:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   2a95c:	e3a03010 	mov	r3, #16
   2a960:	e59f1074 	ldr	r1, [pc, #116]	; 2a9dc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x150>
   2a964:	e28d0008 	add	r0, sp, #8
   2a968:	e28d2010 	add	r2, sp, #16
   2a96c:	e58dc01c 	str	ip, [sp, #28]
   2a970:	ebffe7b9 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2a974:	e3500000 	cmp	r0, #0
   2a978:	0a000009 	beq	2a9a4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x118>
   2a97c:	e28d0008 	add	r0, sp, #8
   2a980:	ebffe7b0 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   2a984:	e5956000 	ldr	r6, [r5]
   2a988:	e3560000 	cmp	r6, #0
   2a98c:	1affffd6 	bne	2a8ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   2a990:	e5953004 	ldr	r3, [r5, #4]
   2a994:	e3530000 	cmp	r3, #0
   2a998:	0affffd9 	beq	2a904 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   2a99c:	eb0004e0 	bl	2bd24 <LeaveCritical>
   2a9a0:	eaffffd7 	b	2a904 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   2a9a4:	e3a03010 	mov	r3, #16
   2a9a8:	e58d0000 	str	r0, [sp]
   2a9ac:	e59f102c 	ldr	r1, [pc, #44]	; 2a9e0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x154>
   2a9b0:	e28d2010 	add	r2, sp, #16
   2a9b4:	e28d0008 	add	r0, sp, #8
   2a9b8:	ebffe7a7 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2a9bc:	e3500000 	cmp	r0, #0
   2a9c0:	159d301c 	ldrne	r3, [sp, #28]
   2a9c4:	05850000 	streq	r0, [r5]
   2a9c8:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   2a9cc:	15853000 	strne	r3, [r5]
   2a9d0:	eaffffe9 	b	2a97c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf0>
   2a9d4:	00047288 	.word	0x00047288
   2a9d8:	0005ce4c 	.word	0x0005ce4c
   2a9dc:	00048020 	.word	0x00048020
   2a9e0:	00040010 	.word	0x00040010

0002a9e4 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   2a9e4:	e12fff1e 	bx	lr

0002a9e8 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   2a9e8:	e92d4010 	push	{r4, lr}
   2a9ec:	e1a04000 	mov	r4, r0
   2a9f0:	e3a01014 	mov	r1, #20
   2a9f4:	eb000181 	bl	2b000 <operator delete(void*, unsigned int)>
   2a9f8:	e1a00004 	mov	r0, r4
   2a9fc:	e8bd8010 	pop	{r4, pc}

0002aa00 <CVirtualGPIOPin::Write(unsigned int)>:
   2aa00:	e92d4070 	push	{r4, r5, r6, lr}
   2aa04:	e5d03004 	ldrb	r3, [r0, #4]
   2aa08:	e1a04000 	mov	r4, r0
   2aa0c:	e3530000 	cmp	r3, #0
   2aa10:	e1a05001 	mov	r5, r1
   2aa14:	e24dd028 	sub	sp, sp, #40	; 0x28
   2aa18:	0a000012 	beq	2aa68 <CVirtualGPIOPin::Write(unsigned int)+0x68>
   2aa1c:	e5901008 	ldr	r1, [r0, #8]
   2aa20:	e3510000 	cmp	r1, #0
   2aa24:	1a000033 	bne	2aaf8 <CVirtualGPIOPin::Write(unsigned int)+0xf8>
   2aa28:	e28d000c 	add	r0, sp, #12
   2aa2c:	ebffe77e 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2aa30:	e3a03008 	mov	r3, #8
   2aa34:	e58d3000 	str	r3, [sp]
   2aa38:	e3a03014 	mov	r3, #20
   2aa3c:	e3a0c082 	mov	ip, #130	; 0x82
   2aa40:	e59f10e0 	ldr	r1, [pc, #224]	; 2ab28 <CVirtualGPIOPin::Write(unsigned int)+0x128>
   2aa44:	e28d000c 	add	r0, sp, #12
   2aa48:	e08d2003 	add	r2, sp, r3
   2aa4c:	e58d5024 	str	r5, [sp, #36]	; 0x24
   2aa50:	e58dc020 	str	ip, [sp, #32]
   2aa54:	ebffe780 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2aa58:	e28d000c 	add	r0, sp, #12
   2aa5c:	ebffe779 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   2aa60:	e28dd028 	add	sp, sp, #40	; 0x28
   2aa64:	e8bd8070 	pop	{r4, r5, r6, pc}
   2aa68:	e5903008 	ldr	r3, [r0, #8]
   2aa6c:	e3530001 	cmp	r3, #1
   2aa70:	8afffffa 	bhi	2aa60 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2aa74:	e59f60b0 	ldr	r6, [pc, #176]	; 2ab2c <CVirtualGPIOPin::Write(unsigned int)+0x12c>
   2aa78:	e3510001 	cmp	r1, #1
   2aa7c:	e5962000 	ldr	r2, [r6]
   2aa80:	93a03000 	movls	r3, #0
   2aa84:	83a03001 	movhi	r3, #1
   2aa88:	e3520000 	cmp	r2, #0
   2aa8c:	03a03001 	moveq	r3, #1
   2aa90:	e3530000 	cmp	r3, #0
   2aa94:	1afffff1 	bne	2aa60 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2aa98:	e5960004 	ldr	r0, [r6, #4]
   2aa9c:	e3500000 	cmp	r0, #0
   2aaa0:	1a00001e 	bne	2ab20 <CVirtualGPIOPin::Write(unsigned int)+0x120>
   2aaa4:	e1d421b0 	ldrh	r2, [r4, #16]
   2aaa8:	e1d431b2 	ldrh	r3, [r4, #18]
   2aaac:	e584500c 	str	r5, [r4, #12]
   2aab0:	e0421003 	sub	r1, r2, r3
   2aab4:	e6bf1071 	sxth	r1, r1
   2aab8:	e3510000 	cmp	r1, #0
   2aabc:	da000011 	ble	2ab08 <CVirtualGPIOPin::Write(unsigned int)+0x108>
   2aac0:	e3550000 	cmp	r5, #0
   2aac4:	02833001 	addeq	r3, r3, #1
   2aac8:	06ff3073 	uxtheq	r3, r3
   2aacc:	01c431b2 	strheq	r3, [r4, #18]
   2aad0:	1a000003 	bne	2aae4 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   2aad4:	e5940008 	ldr	r0, [r4, #8]
   2aad8:	e5961000 	ldr	r1, [r6]
   2aadc:	e1833802 	orr	r3, r3, r2, lsl #16
   2aae0:	e7813100 	str	r3, [r1, r0, lsl #2]
   2aae4:	e5963004 	ldr	r3, [r6, #4]
   2aae8:	e3530000 	cmp	r3, #0
   2aaec:	0affffdb 	beq	2aa60 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2aaf0:	eb00048b 	bl	2bd24 <LeaveCritical>
   2aaf4:	eaffffd9 	b	2aa60 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2aaf8:	e59f1030 	ldr	r1, [pc, #48]	; 2ab30 <CVirtualGPIOPin::Write(unsigned int)+0x130>
   2aafc:	e3a0205b 	mov	r2, #91	; 0x5b
   2ab00:	e2810014 	add	r0, r1, #20
   2ab04:	ebffe727 	bl	247a8 <assertion_failed>
   2ab08:	e3550000 	cmp	r5, #0
   2ab0c:	0afffff4 	beq	2aae4 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   2ab10:	e2822001 	add	r2, r2, #1
   2ab14:	e6ff2072 	uxth	r2, r2
   2ab18:	e1c421b0 	strh	r2, [r4, #16]
   2ab1c:	eaffffec 	b	2aad4 <CVirtualGPIOPin::Write(unsigned int)+0xd4>
   2ab20:	eb000455 	bl	2bc7c <EnterCritical>
   2ab24:	eaffffde 	b	2aaa4 <CVirtualGPIOPin::Write(unsigned int)+0xa4>
   2ab28:	00038041 	.word	0x00038041
   2ab2c:	0005ce4c 	.word	0x0005ce4c
   2ab30:	00047290 	.word	0x00047290

0002ab34 <CVirtualGPIOPin::Invert()>:
   2ab34:	e590100c 	ldr	r1, [r0, #12]
   2ab38:	e2211001 	eor	r1, r1, #1
   2ab3c:	eaffffaf 	b	2aa00 <CVirtualGPIOPin::Write(unsigned int)>

0002ab40 <__static_initialization_and_destruction_0(int, int)>:
   2ab40:	e59f3014 	ldr	r3, [pc, #20]	; 2ab5c <__static_initialization_and_destruction_0(int, int)+0x1c>
   2ab44:	e1510003 	cmp	r1, r3
   2ab48:	03500001 	cmpeq	r0, #1
   2ab4c:	03a02000 	moveq	r2, #0
   2ab50:	059f3008 	ldreq	r3, [pc, #8]	; 2ab60 <__static_initialization_and_destruction_0(int, int)+0x20>
   2ab54:	05832004 	streq	r2, [r3, #4]
   2ab58:	e12fff1e 	bx	lr
   2ab5c:	0000ffff 	.word	0x0000ffff
   2ab60:	0005ce4c 	.word	0x0005ce4c

0002ab64 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   2ab64:	e3a02000 	mov	r2, #0
   2ab68:	e59f3004 	ldr	r3, [pc, #4]	; 2ab74 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   2ab6c:	e5832004 	str	r2, [r3, #4]
   2ab70:	e12fff1e 	bx	lr
   2ab74:	0005ce4c 	.word	0x0005ce4c

0002ab78 <ChainBootStub(void const*, unsigned int)>:
   2ab78:	e2811003 	add	r1, r1, #3
   2ab7c:	e1b01121 	lsrs	r1, r1, #2
   2ab80:	0a000007 	beq	2aba4 <ChainBootStub(void const*, unsigned int)+0x2c>
   2ab84:	e1a03000 	mov	r3, r0
   2ab88:	e0800101 	add	r0, r0, r1, lsl #2
   2ab8c:	e263c902 	rsb	ip, r3, #32768	; 0x8000
   2ab90:	e083200c 	add	r2, r3, ip
   2ab94:	e4931004 	ldr	r1, [r3], #4
   2ab98:	e1530000 	cmp	r3, r0
   2ab9c:	e5821000 	str	r1, [r2]
   2aba0:	1afffffa 	bne	2ab90 <ChainBootStub(void const*, unsigned int)+0x18>
   2aba4:	e3a03000 	mov	r3, #0
   2aba8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2abac:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2abb0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2abb4:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2abb8:	e3a03902 	mov	r3, #32768	; 0x8000
   2abbc:	e12fff13 	bx	r3

0002abc0 <EnableChainBoot>:
   2abc0:	e92d4010 	push	{r4, lr}
   2abc4:	e1a0c001 	mov	ip, r1
   2abc8:	e1a0e000 	mov	lr, r0
   2abcc:	e59f302c 	ldr	r3, [pc, #44]	; 2ac00 <EnableChainBoot+0x40>
   2abd0:	e3a02b01 	mov	r2, #1024	; 0x400
   2abd4:	e59f1028 	ldr	r1, [pc, #40]	; 2ac04 <EnableChainBoot+0x44>
   2abd8:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   2abdc:	e583e000 	str	lr, [r3]
   2abe0:	e583c004 	str	ip, [r3, #4]
   2abe4:	ebffff11 	bl	2a830 <memcpy>
   2abe8:	e3a03000 	mov	r3, #0
   2abec:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2abf0:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2abf4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2abf8:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2abfc:	e8bd8010 	pop	{r4, pc}
   2ac00:	0005ce54 	.word	0x0005ce54
   2ac04:	0002ab78 	.word	0x0002ab78

0002ac08 <IsChainBootEnabled>:
   2ac08:	e59f300c 	ldr	r3, [pc, #12]	; 2ac1c <IsChainBootEnabled+0x14>
   2ac0c:	e5930000 	ldr	r0, [r3]
   2ac10:	e2500000 	subs	r0, r0, #0
   2ac14:	13a00001 	movne	r0, #1
   2ac18:	e12fff1e 	bx	lr
   2ac1c:	0005ce54 	.word	0x0005ce54

0002ac20 <DoChainBoot>:
   2ac20:	e59f3008 	ldr	r3, [pc, #8]	; 2ac30 <DoChainBoot+0x10>
   2ac24:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   2ac28:	e1c300d0 	ldrd	r0, [r3]
   2ac2c:	e12fff12 	bx	r2
   2ac30:	0005ce54 	.word	0x0005ce54

0002ac34 <CMACAddress::CMACAddress()>:
   2ac34:	e3a02000 	mov	r2, #0
   2ac38:	e5c02000 	strb	r2, [r0]
   2ac3c:	e12fff1e 	bx	lr

0002ac40 <CMACAddress::~CMACAddress()>:
   2ac40:	e12fff1e 	bx	lr

0002ac44 <CMACAddress::operator==(CMACAddress const&) const>:
   2ac44:	e5d03000 	ldrb	r3, [r0]
   2ac48:	e92d4010 	push	{r4, lr}
   2ac4c:	e3530000 	cmp	r3, #0
   2ac50:	0a000009 	beq	2ac7c <CMACAddress::operator==(CMACAddress const&) const+0x38>
   2ac54:	e5d13000 	ldrb	r3, [r1]
   2ac58:	e2800001 	add	r0, r0, #1
   2ac5c:	e3530000 	cmp	r3, #0
   2ac60:	0a000009 	beq	2ac8c <CMACAddress::operator==(CMACAddress const&) const+0x48>
   2ac64:	e3a02006 	mov	r2, #6
   2ac68:	e2811001 	add	r1, r1, #1
   2ac6c:	ebfffce0 	bl	29ff4 <memcmp>
   2ac70:	e16f0f10 	clz	r0, r0
   2ac74:	e1a002a0 	lsr	r0, r0, #5
   2ac78:	e8bd8010 	pop	{r4, pc}
   2ac7c:	e3a02029 	mov	r2, #41	; 0x29
   2ac80:	e59f1014 	ldr	r1, [pc, #20]	; 2ac9c <CMACAddress::operator==(CMACAddress const&) const+0x58>
   2ac84:	e59f0014 	ldr	r0, [pc, #20]	; 2aca0 <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   2ac88:	ebffe6c6 	bl	247a8 <assertion_failed>
   2ac8c:	e3a02041 	mov	r2, #65	; 0x41
   2ac90:	e59f1004 	ldr	r1, [pc, #4]	; 2ac9c <CMACAddress::operator==(CMACAddress const&) const+0x58>
   2ac94:	e59f0004 	ldr	r0, [pc, #4]	; 2aca0 <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   2ac98:	ebffe6c2 	bl	247a8 <assertion_failed>
   2ac9c:	000472b0 	.word	0x000472b0
   2aca0:	00041314 	.word	0x00041314

0002aca4 <CMACAddress::operator!=(CMACAddress const&) const>:
   2aca4:	e92d4010 	push	{r4, lr}
   2aca8:	ebffffe5 	bl	2ac44 <CMACAddress::operator==(CMACAddress const&) const>
   2acac:	e2200001 	eor	r0, r0, #1
   2acb0:	e6ef0070 	uxtb	r0, r0
   2acb4:	e8bd8010 	pop	{r4, pc}

0002acb8 <CMACAddress::Set(unsigned char const*)>:
   2acb8:	e3510000 	cmp	r1, #0
   2acbc:	e92d4010 	push	{r4, lr}
   2acc0:	0a000006 	beq	2ace0 <CMACAddress::Set(unsigned char const*)+0x28>
   2acc4:	e1a04000 	mov	r4, r0
   2acc8:	e3a02006 	mov	r2, #6
   2accc:	e2800001 	add	r0, r0, #1
   2acd0:	ebfffed6 	bl	2a830 <memcpy>
   2acd4:	e3a03001 	mov	r3, #1
   2acd8:	e5c43000 	strb	r3, [r4]
   2acdc:	e8bd8010 	pop	{r4, pc}
   2ace0:	e3a02034 	mov	r2, #52	; 0x34
   2ace4:	e59f1004 	ldr	r1, [pc, #4]	; 2acf0 <CMACAddress::Set(unsigned char const*)+0x38>
   2ace8:	e59f0004 	ldr	r0, [pc, #4]	; 2acf4 <CMACAddress::Set(unsigned char const*)+0x3c>
   2acec:	ebffe6ad 	bl	247a8 <assertion_failed>
   2acf0:	000472b0 	.word	0x000472b0
   2acf4:	00045f14 	.word	0x00045f14

0002acf8 <CMACAddress::CMACAddress(unsigned char const*)>:
   2acf8:	e92d4010 	push	{r4, lr}
   2acfc:	e1a04000 	mov	r4, r0
   2ad00:	ebffffec 	bl	2acb8 <CMACAddress::Set(unsigned char const*)>
   2ad04:	e1a00004 	mov	r0, r4
   2ad08:	e8bd8010 	pop	{r4, pc}

0002ad0c <CMACAddress::SetBroadcast()>:
   2ad0c:	e92d4010 	push	{r4, lr}
   2ad10:	e3a02006 	mov	r2, #6
   2ad14:	e1a04000 	mov	r4, r0
   2ad18:	e3a010ff 	mov	r1, #255	; 0xff
   2ad1c:	e2800001 	add	r0, r0, #1
   2ad20:	ebfffc79 	bl	29f0c <memset>
   2ad24:	e3a03001 	mov	r3, #1
   2ad28:	e5c43000 	strb	r3, [r4]
   2ad2c:	e8bd8010 	pop	{r4, pc}

0002ad30 <CMACAddress::Get() const>:
   2ad30:	e5d03000 	ldrb	r3, [r0]
   2ad34:	e3530000 	cmp	r3, #0
   2ad38:	0a000001 	beq	2ad44 <CMACAddress::Get() const+0x14>
   2ad3c:	e2800001 	add	r0, r0, #1
   2ad40:	e12fff1e 	bx	lr
   2ad44:	e3a02041 	mov	r2, #65	; 0x41
   2ad48:	e92d4010 	push	{r4, lr}
   2ad4c:	e59f1004 	ldr	r1, [pc, #4]	; 2ad58 <CMACAddress::Get() const+0x28>
   2ad50:	e59f0004 	ldr	r0, [pc, #4]	; 2ad5c <CMACAddress::Get() const+0x2c>
   2ad54:	ebffe693 	bl	247a8 <assertion_failed>
   2ad58:	000472b0 	.word	0x000472b0
   2ad5c:	00041314 	.word	0x00041314

0002ad60 <CMACAddress::CopyTo(unsigned char*) const>:
   2ad60:	e5d02000 	ldrb	r2, [r0]
   2ad64:	e92d4010 	push	{r4, lr}
   2ad68:	e3520000 	cmp	r2, #0
   2ad6c:	0a000007 	beq	2ad90 <CMACAddress::CopyTo(unsigned char*) const+0x30>
   2ad70:	e3510000 	cmp	r1, #0
   2ad74:	e1a03000 	mov	r3, r0
   2ad78:	e1a00001 	mov	r0, r1
   2ad7c:	0a000007 	beq	2ada0 <CMACAddress::CopyTo(unsigned char*) const+0x40>
   2ad80:	e8bd4010 	pop	{r4, lr}
   2ad84:	e3a02006 	mov	r2, #6
   2ad88:	e2831001 	add	r1, r3, #1
   2ad8c:	eafffea7 	b	2a830 <memcpy>
   2ad90:	e3a02047 	mov	r2, #71	; 0x47
   2ad94:	e59f1014 	ldr	r1, [pc, #20]	; 2adb0 <CMACAddress::CopyTo(unsigned char*) const+0x50>
   2ad98:	e59f0014 	ldr	r0, [pc, #20]	; 2adb4 <CMACAddress::CopyTo(unsigned char*) const+0x54>
   2ad9c:	ebffe681 	bl	247a8 <assertion_failed>
   2ada0:	e3a02048 	mov	r2, #72	; 0x48
   2ada4:	e59f1004 	ldr	r1, [pc, #4]	; 2adb0 <CMACAddress::CopyTo(unsigned char*) const+0x50>
   2ada8:	e59f0008 	ldr	r0, [pc, #8]	; 2adb8 <CMACAddress::CopyTo(unsigned char*) const+0x58>
   2adac:	ebffe67d 	bl	247a8 <assertion_failed>
   2adb0:	000472b0 	.word	0x000472b0
   2adb4:	00041314 	.word	0x00041314
   2adb8:	0004256c 	.word	0x0004256c

0002adbc <CMACAddress::IsBroadcast() const>:
   2adbc:	e1a02000 	mov	r2, r0
   2adc0:	e5d00000 	ldrb	r0, [r0]
   2adc4:	e3500000 	cmp	r0, #0
   2adc8:	12823001 	addne	r3, r2, #1
   2adcc:	12822007 	addne	r2, r2, #7
   2add0:	0a000009 	beq	2adfc <CMACAddress::IsBroadcast() const+0x40>
   2add4:	e4d31001 	ldrb	r1, [r3], #1
   2add8:	e35100ff 	cmp	r1, #255	; 0xff
   2addc:	1a000004 	bne	2adf4 <CMACAddress::IsBroadcast() const+0x38>
   2ade0:	e1530002 	cmp	r3, r2
   2ade4:	012fff1e 	bxeq	lr
   2ade8:	e4d31001 	ldrb	r1, [r3], #1
   2adec:	e35100ff 	cmp	r1, #255	; 0xff
   2adf0:	0afffffa 	beq	2ade0 <CMACAddress::IsBroadcast() const+0x24>
   2adf4:	e3a00000 	mov	r0, #0
   2adf8:	e12fff1e 	bx	lr
   2adfc:	e3a0204e 	mov	r2, #78	; 0x4e
   2ae00:	e92d4010 	push	{r4, lr}
   2ae04:	e59f1004 	ldr	r1, [pc, #4]	; 2ae10 <CMACAddress::IsBroadcast() const+0x54>
   2ae08:	e59f0004 	ldr	r0, [pc, #4]	; 2ae14 <CMACAddress::IsBroadcast() const+0x58>
   2ae0c:	ebffe665 	bl	247a8 <assertion_failed>
   2ae10:	000472b0 	.word	0x000472b0
   2ae14:	00041314 	.word	0x00041314

0002ae18 <CMACAddress::GetSize() const>:
   2ae18:	e3a00006 	mov	r0, #6
   2ae1c:	e12fff1e 	bx	lr

0002ae20 <CMACAddress::Format(CString*) const>:
   2ae20:	e92d4010 	push	{r4, lr}
   2ae24:	e5d03000 	ldrb	r3, [r0]
   2ae28:	e24dd010 	sub	sp, sp, #16
   2ae2c:	e3530000 	cmp	r3, #0
   2ae30:	0a00000f 	beq	2ae74 <CMACAddress::Format(CString*) const+0x54>
   2ae34:	e3510000 	cmp	r1, #0
   2ae38:	e1a02000 	mov	r2, r0
   2ae3c:	e1a00001 	mov	r0, r1
   2ae40:	0a00000f 	beq	2ae84 <CMACAddress::Format(CString*) const+0x64>
   2ae44:	e5d2e005 	ldrb	lr, [r2, #5]
   2ae48:	e5d2c004 	ldrb	ip, [r2, #4]
   2ae4c:	e5d23003 	ldrb	r3, [r2, #3]
   2ae50:	e5d24006 	ldrb	r4, [r2, #6]
   2ae54:	e88d5008 	stm	sp, {r3, ip, lr}
   2ae58:	e58d400c 	str	r4, [sp, #12]
   2ae5c:	e5d23002 	ldrb	r3, [r2, #2]
   2ae60:	e59f102c 	ldr	r1, [pc, #44]	; 2ae94 <CMACAddress::Format(CString*) const+0x74>
   2ae64:	e5d22001 	ldrb	r2, [r2, #1]
   2ae68:	ebfff871 	bl	29034 <CString::Format(char const*, ...)>
   2ae6c:	e28dd010 	add	sp, sp, #16
   2ae70:	e8bd8010 	pop	{r4, pc}
   2ae74:	e3a02062 	mov	r2, #98	; 0x62
   2ae78:	e59f1018 	ldr	r1, [pc, #24]	; 2ae98 <CMACAddress::Format(CString*) const+0x78>
   2ae7c:	e59f0018 	ldr	r0, [pc, #24]	; 2ae9c <CMACAddress::Format(CString*) const+0x7c>
   2ae80:	ebffe648 	bl	247a8 <assertion_failed>
   2ae84:	e3a02063 	mov	r2, #99	; 0x63
   2ae88:	e59f1008 	ldr	r1, [pc, #8]	; 2ae98 <CMACAddress::Format(CString*) const+0x78>
   2ae8c:	e59f000c 	ldr	r0, [pc, #12]	; 2aea0 <CMACAddress::Format(CString*) const+0x80>
   2ae90:	ebffe644 	bl	247a8 <assertion_failed>
   2ae94:	000472c0 	.word	0x000472c0
   2ae98:	000472b0 	.word	0x000472b0
   2ae9c:	00041314 	.word	0x00041314
   2aea0:	00045f24 	.word	0x00045f24

0002aea4 <CNetDevice::AddNetDevice()>:
   2aea4:	e59f2018 	ldr	r2, [pc, #24]	; 2aec4 <CNetDevice::AddNetDevice()+0x20>
   2aea8:	e5923000 	ldr	r3, [r2]
   2aeac:	e3530004 	cmp	r3, #4
   2aeb0:	92831001 	addls	r1, r3, #1
   2aeb4:	90823103 	addls	r3, r2, r3, lsl #2
   2aeb8:	95821000 	strls	r1, [r2]
   2aebc:	95830004 	strls	r0, [r3, #4]
   2aec0:	e12fff1e 	bx	lr
   2aec4:	0005ce5c 	.word	0x0005ce5c

0002aec8 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   2aec8:	e3500005 	cmp	r0, #5
   2aecc:	959f3008 	ldrls	r3, [pc, #8]	; 2aedc <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x14>
   2aed0:	97930100 	ldrls	r0, [r3, r0, lsl #2]
   2aed4:	859f0004 	ldrhi	r0, [pc, #4]	; 2aee0 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x18>
   2aed8:	e12fff1e 	bx	lr
   2aedc:	0004a344 	.word	0x0004a344
   2aee0:	000472e0 	.word	0x000472e0

0002aee4 <CNetDevice::GetNetDevice(unsigned int)>:
   2aee4:	e59f3014 	ldr	r3, [pc, #20]	; 2af00 <CNetDevice::GetNetDevice(unsigned int)+0x1c>
   2aee8:	e5932000 	ldr	r2, [r3]
   2aeec:	e1520000 	cmp	r2, r0
   2aef0:	80830100 	addhi	r0, r3, r0, lsl #2
   2aef4:	85900004 	ldrhi	r0, [r0, #4]
   2aef8:	93a00000 	movls	r0, #0
   2aefc:	e12fff1e 	bx	lr
   2af00:	0005ce5c 	.word	0x0005ce5c

0002af04 <CNetDevice::GetNetDevice(TNetDeviceType)>:
   2af04:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2af08:	e59f8084 	ldr	r8, [pc, #132]	; 2af94 <CNetDevice::GetNetDevice(TNetDeviceType)+0x90>
   2af0c:	e5983000 	ldr	r3, [r8]
   2af10:	e3530000 	cmp	r3, #0
   2af14:	0a00001b 	beq	2af88 <CNetDevice::GetNetDevice(TNetDeviceType)+0x84>
   2af18:	e1a06000 	mov	r6, r0
   2af1c:	e3a05000 	mov	r5, #0
   2af20:	e59f9070 	ldr	r9, [pc, #112]	; 2af98 <CNetDevice::GetNetDevice(TNetDeviceType)+0x94>
   2af24:	e2887004 	add	r7, r8, #4
   2af28:	ea000005 	b	2af44 <CNetDevice::GetNetDevice(TNetDeviceType)+0x40>
   2af2c:	e1500006 	cmp	r0, r6
   2af30:	e2855001 	add	r5, r5, #1
   2af34:	0a000011 	beq	2af80 <CNetDevice::GetNetDevice(TNetDeviceType)+0x7c>
   2af38:	e5983000 	ldr	r3, [r8]
   2af3c:	e1530005 	cmp	r3, r5
   2af40:	9a000010 	bls	2af88 <CNetDevice::GetNetDevice(TNetDeviceType)+0x84>
   2af44:	e4974004 	ldr	r4, [r7], #4
   2af48:	e3540000 	cmp	r4, #0
   2af4c:	0a00000d 	beq	2af88 <CNetDevice::GetNetDevice(TNetDeviceType)+0x84>
   2af50:	e3560002 	cmp	r6, #2
   2af54:	0a000009 	beq	2af80 <CNetDevice::GetNetDevice(TNetDeviceType)+0x7c>
   2af58:	e5943000 	ldr	r3, [r4]
   2af5c:	e5933008 	ldr	r3, [r3, #8]
   2af60:	e1530009 	cmp	r3, r9
   2af64:	03a00000 	moveq	r0, #0
   2af68:	0affffef 	beq	2af2c <CNetDevice::GetNetDevice(TNetDeviceType)+0x28>
   2af6c:	e1a00004 	mov	r0, r4
   2af70:	e12fff33 	blx	r3
   2af74:	e1500006 	cmp	r0, r6
   2af78:	e2855001 	add	r5, r5, #1
   2af7c:	1affffed 	bne	2af38 <CNetDevice::GetNetDevice(TNetDeviceType)+0x34>
   2af80:	e1a00004 	mov	r0, r4
   2af84:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2af88:	e3a04000 	mov	r4, #0
   2af8c:	e1a00004 	mov	r0, r4
   2af90:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2af94:	0005ce5c 	.word	0x0005ce5c
   2af98:	00016138 	.word	0x00016138

0002af9c <operator new(unsigned int, int)>:
   2af9c:	e3d13002 	bics	r3, r1, #2
   2afa0:	e1a01000 	mov	r1, r0
   2afa4:	0a000001 	beq	2afb0 <operator new(unsigned int, int)+0x14>
   2afa8:	e3a00000 	mov	r0, #0
   2afac:	e12fff1e 	bx	lr
   2afb0:	e59f3008 	ldr	r3, [pc, #8]	; 2afc0 <operator new(unsigned int, int)+0x24>
   2afb4:	e5930000 	ldr	r0, [r3]
   2afb8:	e280000c 	add	r0, r0, #12
   2afbc:	ea000035 	b	2b098 <CHeapAllocator::Allocate(unsigned int)>
   2afc0:	0005ce78 	.word	0x0005ce78

0002afc4 <operator new[](unsigned int, int)>:
   2afc4:	eafffff4 	b	2af9c <operator new(unsigned int, int)>

0002afc8 <operator new(unsigned int)>:
   2afc8:	e59f300c 	ldr	r3, [pc, #12]	; 2afdc <operator new(unsigned int)+0x14>
   2afcc:	e1a01000 	mov	r1, r0
   2afd0:	e5930000 	ldr	r0, [r3]
   2afd4:	e280000c 	add	r0, r0, #12
   2afd8:	ea00002e 	b	2b098 <CHeapAllocator::Allocate(unsigned int)>
   2afdc:	0005ce78 	.word	0x0005ce78

0002afe0 <operator new[](unsigned int)>:
   2afe0:	eafffff8 	b	2afc8 <operator new(unsigned int)>

0002afe4 <operator delete(void*)>:
   2afe4:	e59f300c 	ldr	r3, [pc, #12]	; 2aff8 <operator delete(void*)+0x14>
   2afe8:	e1a01000 	mov	r1, r0
   2afec:	e5930000 	ldr	r0, [r3]
   2aff0:	e280000c 	add	r0, r0, #12
   2aff4:	ea0000a4 	b	2b28c <CHeapAllocator::Free(void*)>
   2aff8:	0005ce78 	.word	0x0005ce78

0002affc <operator delete[](void*)>:
   2affc:	eafffff8 	b	2afe4 <operator delete(void*)>

0002b000 <operator delete(void*, unsigned int)>:
   2b000:	e59f300c 	ldr	r3, [pc, #12]	; 2b014 <operator delete(void*, unsigned int)+0x14>
   2b004:	e1a01000 	mov	r1, r0
   2b008:	e5930000 	ldr	r0, [r3]
   2b00c:	e280000c 	add	r0, r0, #12
   2b010:	ea00009d 	b	2b28c <CHeapAllocator::Free(void*)>
   2b014:	0005ce78 	.word	0x0005ce78

0002b018 <operator delete[](void*, unsigned int)>:
   2b018:	eafffff8 	b	2b000 <operator delete(void*, unsigned int)>

0002b01c <CHeapAllocator::CHeapAllocator(char const*)>:
   2b01c:	e3a03000 	mov	r3, #0
   2b020:	e3a02001 	mov	r2, #1
   2b024:	e92d4010 	push	{r4, lr}
   2b028:	e1a04000 	mov	r4, r0
   2b02c:	e5801000 	str	r1, [r0]
   2b030:	e58020b8 	str	r2, [r0, #184]	; 0xb8
   2b034:	e5803004 	str	r3, [r0, #4]
   2b038:	e5803008 	str	r3, [r0, #8]
   2b03c:	e580300c 	str	r3, [r0, #12]
   2b040:	e1a01003 	mov	r1, r3
   2b044:	e3a020a8 	mov	r2, #168	; 0xa8
   2b048:	e2800010 	add	r0, r0, #16
   2b04c:	ebfffbae 	bl	29f0c <memset>
   2b050:	e1a03004 	mov	r3, r4
   2b054:	e59f201c 	ldr	r2, [pc, #28]	; 2b078 <CHeapAllocator::CHeapAllocator(char const*)+0x5c>
   2b058:	e2840038 	add	r0, r4, #56	; 0x38
   2b05c:	e4921004 	ldr	r1, [r2], #4
   2b060:	e2833008 	add	r3, r3, #8
   2b064:	e5831008 	str	r1, [r3, #8]
   2b068:	e1530000 	cmp	r3, r0
   2b06c:	1afffffa 	bne	2b05c <CHeapAllocator::CHeapAllocator(char const*)+0x40>
   2b070:	e1a00004 	mov	r0, r4
   2b074:	e8bd8010 	pop	{r4, pc}
   2b078:	0004a35c 	.word	0x0004a35c

0002b07c <CHeapAllocator::~CHeapAllocator()>:
   2b07c:	e12fff1e 	bx	lr

0002b080 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   2b080:	e0812002 	add	r2, r1, r2
   2b084:	e980000e 	stmib	r0, {r1, r2, r3}
   2b088:	e12fff1e 	bx	lr

0002b08c <CHeapAllocator::GetFreeSpace() const>:
   2b08c:	e9900005 	ldmib	r0, {r0, r2}
   2b090:	e0420000 	sub	r0, r2, r0
   2b094:	e12fff1e 	bx	lr

0002b098 <CHeapAllocator::Allocate(unsigned int)>:
   2b098:	e5903004 	ldr	r3, [r0, #4]
   2b09c:	e3530000 	cmp	r3, #0
   2b0a0:	0a000072 	beq	2b270 <CHeapAllocator::Allocate(unsigned int)+0x1d8>
   2b0a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2b0a8:	e1a05000 	mov	r5, r0
   2b0ac:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
   2b0b0:	e1a04001 	mov	r4, r1
   2b0b4:	e3500000 	cmp	r0, #0
   2b0b8:	1a000055 	bne	2b214 <CHeapAllocator::Allocate(unsigned int)+0x17c>
   2b0bc:	e5953010 	ldr	r3, [r5, #16]
   2b0c0:	e3530000 	cmp	r3, #0
   2b0c4:	0a00002b 	beq	2b178 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   2b0c8:	e2852010 	add	r2, r5, #16
   2b0cc:	ea000002 	b	2b0dc <CHeapAllocator::Allocate(unsigned int)+0x44>
   2b0d0:	e5b23008 	ldr	r3, [r2, #8]!
   2b0d4:	e3530000 	cmp	r3, #0
   2b0d8:	0a000026 	beq	2b178 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   2b0dc:	e1540003 	cmp	r4, r3
   2b0e0:	8afffffa 	bhi	2b0d0 <CHeapAllocator::Allocate(unsigned int)+0x38>
   2b0e4:	e5926004 	ldr	r6, [r2, #4]
   2b0e8:	e3560000 	cmp	r6, #0
   2b0ec:	01a04003 	moveq	r4, r3
   2b0f0:	0a000020 	beq	2b178 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   2b0f4:	e5d60001 	ldrb	r0, [r6, #1]
   2b0f8:	e5d63000 	ldrb	r3, [r6]
   2b0fc:	e5d61002 	ldrb	r1, [r6, #2]
   2b100:	e1833400 	orr	r3, r3, r0, lsl #8
   2b104:	e5d60003 	ldrb	r0, [r6, #3]
   2b108:	e1833801 	orr	r3, r3, r1, lsl #16
   2b10c:	e59f1164 	ldr	r1, [pc, #356]	; 2b278 <CHeapAllocator::Allocate(unsigned int)+0x1e0>
   2b110:	e1833c00 	orr	r3, r3, r0, lsl #24
   2b114:	e1530001 	cmp	r3, r1
   2b118:	1a000050 	bne	2b260 <CHeapAllocator::Allocate(unsigned int)+0x1c8>
   2b11c:	e5d61009 	ldrb	r1, [r6, #9]
   2b120:	e5d63008 	ldrb	r3, [r6, #8]
   2b124:	e5d6000a 	ldrb	r0, [r6, #10]
   2b128:	e1833401 	orr	r3, r3, r1, lsl #8
   2b12c:	e5d6100b 	ldrb	r1, [r6, #11]
   2b130:	e1833800 	orr	r3, r3, r0, lsl #16
   2b134:	e1833c01 	orr	r3, r3, r1, lsl #24
   2b138:	e5823004 	str	r3, [r2, #4]
   2b13c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   2b140:	e3530000 	cmp	r3, #0
   2b144:	1a000030 	bne	2b20c <CHeapAllocator::Allocate(unsigned int)+0x174>
   2b148:	e3a03000 	mov	r3, #0
   2b14c:	e316000f 	tst	r6, #15
   2b150:	e5c63008 	strb	r3, [r6, #8]
   2b154:	e5c63009 	strb	r3, [r6, #9]
   2b158:	e5c6300a 	strb	r3, [r6, #10]
   2b15c:	e5c6300b 	strb	r3, [r6, #11]
   2b160:	e2860010 	add	r0, r6, #16
   2b164:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2b168:	e3a0208e 	mov	r2, #142	; 0x8e
   2b16c:	e59f1108 	ldr	r1, [pc, #264]	; 2b27c <CHeapAllocator::Allocate(unsigned int)+0x1e4>
   2b170:	e59f0108 	ldr	r0, [pc, #264]	; 2b280 <CHeapAllocator::Allocate(unsigned int)+0x1e8>
   2b174:	ebffe58b 	bl	247a8 <assertion_failed>
   2b178:	e5956004 	ldr	r6, [r5, #4]
   2b17c:	e284301f 	add	r3, r4, #31
   2b180:	e3c3300f 	bic	r3, r3, #15
   2b184:	e0863003 	add	r3, r6, r3
   2b188:	e1560003 	cmp	r6, r3
   2b18c:	e595700c 	ldr	r7, [r5, #12]
   2b190:	3a000006 	bcc	2b1b0 <CHeapAllocator::Allocate(unsigned int)+0x118>
   2b194:	e3570000 	cmp	r7, #0
   2b198:	1a00001f 	bne	2b21c <CHeapAllocator::Allocate(unsigned int)+0x184>
   2b19c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   2b1a0:	e3530000 	cmp	r3, #0
   2b1a4:	1a000028 	bne	2b24c <CHeapAllocator::Allocate(unsigned int)+0x1b4>
   2b1a8:	e3a00000 	mov	r0, #0
   2b1ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b1b0:	e5952008 	ldr	r2, [r5, #8]
   2b1b4:	e0422007 	sub	r2, r2, r7
   2b1b8:	e1530002 	cmp	r3, r2
   2b1bc:	8afffff4 	bhi	2b194 <CHeapAllocator::Allocate(unsigned int)+0xfc>
   2b1c0:	e3a0204d 	mov	r2, #77	; 0x4d
   2b1c4:	e3a0c043 	mov	ip, #67	; 0x43
   2b1c8:	e3a0004c 	mov	r0, #76	; 0x4c
   2b1cc:	e3a01042 	mov	r1, #66	; 0x42
   2b1d0:	e5853004 	str	r3, [r5, #4]
   2b1d4:	e1a03824 	lsr	r3, r4, #16
   2b1d8:	e5c64004 	strb	r4, [r6, #4]
   2b1dc:	e5c62001 	strb	r2, [r6, #1]
   2b1e0:	e1a02424 	lsr	r2, r4, #8
   2b1e4:	e1a04c24 	lsr	r4, r4, #24
   2b1e8:	e5c6c000 	strb	ip, [r6]
   2b1ec:	e5c60002 	strb	r0, [r6, #2]
   2b1f0:	e5c61003 	strb	r1, [r6, #3]
   2b1f4:	e5c62005 	strb	r2, [r6, #5]
   2b1f8:	e5c63006 	strb	r3, [r6, #6]
   2b1fc:	e5c64007 	strb	r4, [r6, #7]
   2b200:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   2b204:	e3530000 	cmp	r3, #0
   2b208:	0affffce 	beq	2b148 <CHeapAllocator::Allocate(unsigned int)+0xb0>
   2b20c:	eb0002c4 	bl	2bd24 <LeaveCritical>
   2b210:	eaffffcc 	b	2b148 <CHeapAllocator::Allocate(unsigned int)+0xb0>
   2b214:	eb000298 	bl	2bc7c <EnterCritical>
   2b218:	eaffffa7 	b	2b0bc <CHeapAllocator::Allocate(unsigned int)+0x24>
   2b21c:	e3a02000 	mov	r2, #0
   2b220:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   2b224:	e585200c 	str	r2, [r5, #12]
   2b228:	e1530002 	cmp	r3, r2
   2b22c:	1a000009 	bne	2b258 <CHeapAllocator::Allocate(unsigned int)+0x1c0>
   2b230:	ebffee44 	bl	26b48 <CLogger::Get()>
   2b234:	e3a02000 	mov	r2, #0
   2b238:	e5951000 	ldr	r1, [r5]
   2b23c:	e59f3040 	ldr	r3, [pc, #64]	; 2b284 <CHeapAllocator::Allocate(unsigned int)+0x1ec>
   2b240:	ebffed82 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b244:	e3a00000 	mov	r0, #0
   2b248:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b24c:	eb0002b4 	bl	2bd24 <LeaveCritical>
   2b250:	e1a00007 	mov	r0, r7
   2b254:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b258:	eb0002b1 	bl	2bd24 <LeaveCritical>
   2b25c:	eafffff3 	b	2b230 <CHeapAllocator::Allocate(unsigned int)+0x198>
   2b260:	e3a0205e 	mov	r2, #94	; 0x5e
   2b264:	e59f1010 	ldr	r1, [pc, #16]	; 2b27c <CHeapAllocator::Allocate(unsigned int)+0x1e4>
   2b268:	e59f0018 	ldr	r0, [pc, #24]	; 2b288 <CHeapAllocator::Allocate(unsigned int)+0x1f0>
   2b26c:	ebffe54d 	bl	247a8 <assertion_failed>
   2b270:	e3a00000 	mov	r0, #0
   2b274:	e12fff1e 	bx	lr
   2b278:	424c4d43 	.word	0x424c4d43
   2b27c:	00047378 	.word	0x00047378
   2b280:	000473c8 	.word	0x000473c8
   2b284:	000473b8 	.word	0x000473b8
   2b288:	0004738c 	.word	0x0004738c

0002b28c <CHeapAllocator::Free(void*)>:
   2b28c:	e3510000 	cmp	r1, #0
   2b290:	012fff1e 	bxeq	lr
   2b294:	e92d4070 	push	{r4, r5, r6, lr}
   2b298:	e1a06000 	mov	r6, r0
   2b29c:	e5513010 	ldrb	r3, [r1, #-16]
   2b2a0:	e551000f 	ldrb	r0, [r1, #-15]
   2b2a4:	e551200e 	ldrb	r2, [r1, #-14]
   2b2a8:	e1833400 	orr	r3, r3, r0, lsl #8
   2b2ac:	e551000d 	ldrb	r0, [r1, #-13]
   2b2b0:	e1833802 	orr	r3, r3, r2, lsl #16
   2b2b4:	e59f20d0 	ldr	r2, [pc, #208]	; 2b38c <CHeapAllocator::Free(void*)+0x100>
   2b2b8:	e1833c00 	orr	r3, r3, r0, lsl #24
   2b2bc:	e1530002 	cmp	r3, r2
   2b2c0:	e2415010 	sub	r5, r1, #16
   2b2c4:	1a00002c 	bne	2b37c <CHeapAllocator::Free(void*)+0xf0>
   2b2c8:	e5963010 	ldr	r3, [r6, #16]
   2b2cc:	e3530000 	cmp	r3, #0
   2b2d0:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b2d4:	e5d51005 	ldrb	r1, [r5, #5]
   2b2d8:	e5d52004 	ldrb	r2, [r5, #4]
   2b2dc:	e5d50006 	ldrb	r0, [r5, #6]
   2b2e0:	e1822401 	orr	r2, r2, r1, lsl #8
   2b2e4:	e5d51007 	ldrb	r1, [r5, #7]
   2b2e8:	e1822800 	orr	r2, r2, r0, lsl #16
   2b2ec:	e1822c01 	orr	r2, r2, r1, lsl #24
   2b2f0:	e2864010 	add	r4, r6, #16
   2b2f4:	ea000002 	b	2b304 <CHeapAllocator::Free(void*)+0x78>
   2b2f8:	e5b43008 	ldr	r3, [r4, #8]!
   2b2fc:	e3530000 	cmp	r3, #0
   2b300:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b304:	e1530002 	cmp	r3, r2
   2b308:	1afffffa 	bne	2b2f8 <CHeapAllocator::Free(void*)+0x6c>
   2b30c:	e59600b8 	ldr	r0, [r6, #184]	; 0xb8
   2b310:	e3500000 	cmp	r0, #0
   2b314:	1a000009 	bne	2b340 <CHeapAllocator::Free(void*)+0xb4>
   2b318:	e5943004 	ldr	r3, [r4, #4]
   2b31c:	e1a00423 	lsr	r0, r3, #8
   2b320:	e1a01823 	lsr	r1, r3, #16
   2b324:	e1a02c23 	lsr	r2, r3, #24
   2b328:	e5c53008 	strb	r3, [r5, #8]
   2b32c:	e5c50009 	strb	r0, [r5, #9]
   2b330:	e5c5100a 	strb	r1, [r5, #10]
   2b334:	e5c5200b 	strb	r2, [r5, #11]
   2b338:	e5845004 	str	r5, [r4, #4]
   2b33c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b340:	eb00024d 	bl	2bc7c <EnterCritical>
   2b344:	e5943004 	ldr	r3, [r4, #4]
   2b348:	e59620b8 	ldr	r2, [r6, #184]	; 0xb8
   2b34c:	e1a00423 	lsr	r0, r3, #8
   2b350:	e3520000 	cmp	r2, #0
   2b354:	e1a01823 	lsr	r1, r3, #16
   2b358:	e1a02c23 	lsr	r2, r3, #24
   2b35c:	e5c53008 	strb	r3, [r5, #8]
   2b360:	e5c50009 	strb	r0, [r5, #9]
   2b364:	e5c5100a 	strb	r1, [r5, #10]
   2b368:	e5c5200b 	strb	r2, [r5, #11]
   2b36c:	e5845004 	str	r5, [r4, #4]
   2b370:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b374:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b378:	ea000269 	b	2bd24 <LeaveCritical>
   2b37c:	e3a020bf 	mov	r2, #191	; 0xbf
   2b380:	e59f1008 	ldr	r1, [pc, #8]	; 2b390 <CHeapAllocator::Free(void*)+0x104>
   2b384:	e59f0008 	ldr	r0, [pc, #8]	; 2b394 <CHeapAllocator::Free(void*)+0x108>
   2b388:	ebffe506 	bl	247a8 <assertion_failed>
   2b38c:	424c4d43 	.word	0x424c4d43
   2b390:	00047378 	.word	0x00047378
   2b394:	0004738c 	.word	0x0004738c

0002b398 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   2b398:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b39c:	e2514000 	subs	r4, r1, #0
   2b3a0:	e24dd00c 	sub	sp, sp, #12
   2b3a4:	0a00002d 	beq	2b460 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xc8>
   2b3a8:	e3520000 	cmp	r2, #0
   2b3ac:	0a00002f 	beq	2b470 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xd8>
   2b3b0:	e554c00f 	ldrb	ip, [r4, #-15]
   2b3b4:	e5543010 	ldrb	r3, [r4, #-16]
   2b3b8:	e554100e 	ldrb	r1, [r4, #-14]
   2b3bc:	e183340c 	orr	r3, r3, ip, lsl #8
   2b3c0:	e554c00d 	ldrb	ip, [r4, #-13]
   2b3c4:	e1833801 	orr	r3, r3, r1, lsl #16
   2b3c8:	e59f10c4 	ldr	r1, [pc, #196]	; 2b494 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xfc>
   2b3cc:	e1833c0c 	orr	r3, r3, ip, lsl #24
   2b3d0:	e1530001 	cmp	r3, r1
   2b3d4:	e2446010 	sub	r6, r4, #16
   2b3d8:	1a000029 	bne	2b484 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xec>
   2b3dc:	e5d61005 	ldrb	r1, [r6, #5]
   2b3e0:	e5d63004 	ldrb	r3, [r6, #4]
   2b3e4:	e5d6c006 	ldrb	ip, [r6, #6]
   2b3e8:	e1833401 	orr	r3, r3, r1, lsl #8
   2b3ec:	e5d61007 	ldrb	r1, [r6, #7]
   2b3f0:	e183380c 	orr	r3, r3, ip, lsl #16
   2b3f4:	e1833c01 	orr	r3, r3, r1, lsl #24
   2b3f8:	e1530002 	cmp	r3, r2
   2b3fc:	21a07004 	movcs	r7, r4
   2b400:	3a000002 	bcc	2b410 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x78>
   2b404:	e1a00007 	mov	r0, r7
   2b408:	e28dd00c 	add	sp, sp, #12
   2b40c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b410:	e1a01002 	mov	r1, r2
   2b414:	e1a05000 	mov	r5, r0
   2b418:	ebffff1e 	bl	2b098 <CHeapAllocator::Allocate(unsigned int)>
   2b41c:	e2507000 	subs	r7, r0, #0
   2b420:	0afffff7 	beq	2b404 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x6c>
   2b424:	e5d62005 	ldrb	r2, [r6, #5]
   2b428:	e5d63004 	ldrb	r3, [r6, #4]
   2b42c:	e5d61006 	ldrb	r1, [r6, #6]
   2b430:	e1833402 	orr	r3, r3, r2, lsl #8
   2b434:	e5d62007 	ldrb	r2, [r6, #7]
   2b438:	e1833801 	orr	r3, r3, r1, lsl #16
   2b43c:	e1832c02 	orr	r2, r3, r2, lsl #24
   2b440:	e1a01004 	mov	r1, r4
   2b444:	ebfffcf9 	bl	2a830 <memcpy>
   2b448:	e1a00005 	mov	r0, r5
   2b44c:	e1a01004 	mov	r1, r4
   2b450:	ebffff8d 	bl	2b28c <CHeapAllocator::Free(void*)>
   2b454:	e1a00007 	mov	r0, r7
   2b458:	e28dd00c 	add	sp, sp, #12
   2b45c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b460:	e1a01002 	mov	r1, r2
   2b464:	e28dd00c 	add	sp, sp, #12
   2b468:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   2b46c:	eaffff09 	b	2b098 <CHeapAllocator::Allocate(unsigned int)>
   2b470:	e58d2004 	str	r2, [sp, #4]
   2b474:	ebffff84 	bl	2b28c <CHeapAllocator::Free(void*)>
   2b478:	e59d2004 	ldr	r2, [sp, #4]
   2b47c:	e1a07002 	mov	r7, r2
   2b480:	eaffffdf 	b	2b404 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x6c>
   2b484:	e3a020a3 	mov	r2, #163	; 0xa3
   2b488:	e59f1008 	ldr	r1, [pc, #8]	; 2b498 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x100>
   2b48c:	e59f0008 	ldr	r0, [pc, #8]	; 2b49c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x104>
   2b490:	ebffe4c4 	bl	247a8 <assertion_failed>
   2b494:	424c4d43 	.word	0x424c4d43
   2b498:	00047378 	.word	0x00047378
   2b49c:	0004738c 	.word	0x0004738c

0002b4a0 <CExceptionHandler::Get() [clone .part.0]>:
   2b4a0:	e3a02087 	mov	r2, #135	; 0x87
   2b4a4:	e92d4010 	push	{r4, lr}
   2b4a8:	e59f1004 	ldr	r1, [pc, #4]	; 2b4b4 <CExceptionHandler::Get() [clone .part.0]+0x14>
   2b4ac:	e59f0004 	ldr	r0, [pc, #4]	; 2b4b8 <CExceptionHandler::Get() [clone .part.0]+0x18>
   2b4b0:	ebffe4bc 	bl	247a8 <assertion_failed>
   2b4b4:	000473f4 	.word	0x000473f4
   2b4b8:	00045380 	.word	0x00045380

0002b4bc <CExceptionHandler::CExceptionHandler()>:
   2b4bc:	e59fc074 	ldr	ip, [pc, #116]	; 2b538 <CExceptionHandler::CExceptionHandler()+0x7c>
   2b4c0:	e92d4010 	push	{r4, lr}
   2b4c4:	e1a04000 	mov	r4, r0
   2b4c8:	e59c0000 	ldr	r0, [ip]
   2b4cc:	e3500000 	cmp	r0, #0
   2b4d0:	1a000014 	bne	2b528 <CExceptionHandler::CExceptionHandler()+0x6c>
   2b4d4:	e59f1060 	ldr	r1, [pc, #96]	; 2b53c <CExceptionHandler::CExceptionHandler()+0x80>
   2b4d8:	e59f2060 	ldr	r2, [pc, #96]	; 2b540 <CExceptionHandler::CExceptionHandler()+0x84>
   2b4dc:	e59f3060 	ldr	r3, [pc, #96]	; 2b544 <CExceptionHandler::CExceptionHandler()+0x88>
   2b4e0:	e2411004 	sub	r1, r1, #4
   2b4e4:	e242200c 	sub	r2, r2, #12
   2b4e8:	e2433010 	sub	r3, r3, #16
   2b4ec:	e1a01141 	asr	r1, r1, #2
   2b4f0:	e1a02142 	asr	r2, r2, #2
   2b4f4:	e1a03143 	asr	r3, r3, #2
   2b4f8:	e2411002 	sub	r1, r1, #2
   2b4fc:	e2422002 	sub	r2, r2, #2
   2b500:	e2433002 	sub	r3, r3, #2
   2b504:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   2b508:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   2b50c:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2b510:	e58c4000 	str	r4, [ip]
   2b514:	e1c020fc 	strd	r2, [r0, #12]
   2b518:	e5801004 	str	r1, [r0, #4]
   2b51c:	eb000225 	bl	2bdb8 <SyncDataAndInstructionCache>
   2b520:	e1a00004 	mov	r0, r4
   2b524:	e8bd8010 	pop	{r4, pc}
   2b528:	e3a02030 	mov	r2, #48	; 0x30
   2b52c:	e59f1014 	ldr	r1, [pc, #20]	; 2b548 <CExceptionHandler::CExceptionHandler()+0x8c>
   2b530:	e59f0014 	ldr	r0, [pc, #20]	; 2b54c <CExceptionHandler::CExceptionHandler()+0x90>
   2b534:	ebffe49b 	bl	247a8 <assertion_failed>
   2b538:	0005ce74 	.word	0x0005ce74
   2b53c:	0002b810 	.word	0x0002b810
   2b540:	0002b770 	.word	0x0002b770
   2b544:	0002b7c0 	.word	0x0002b7c0
   2b548:	000473f4 	.word	0x000473f4
   2b54c:	00045348 	.word	0x00045348

0002b550 <CExceptionHandler::~CExceptionHandler()>:
   2b550:	e3a02000 	mov	r2, #0
   2b554:	e59f3004 	ldr	r3, [pc, #4]	; 2b560 <CExceptionHandler::~CExceptionHandler()+0x10>
   2b558:	e5832000 	str	r2, [r3]
   2b55c:	e12fff1e 	bx	lr
   2b560:	0005ce74 	.word	0x0005ce74

0002b564 <CExceptionHandler::Throw(unsigned int)>:
   2b564:	e92d4010 	push	{r4, lr}
   2b568:	e1a04001 	mov	r4, r1
   2b56c:	e24dd008 	sub	sp, sp, #8
   2b570:	ebffed74 	bl	26b48 <CLogger::Get()>
   2b574:	e59f201c 	ldr	r2, [pc, #28]	; 2b598 <CExceptionHandler::Throw(unsigned int)+0x34>
   2b578:	e59f301c 	ldr	r3, [pc, #28]	; 2b59c <CExceptionHandler::Throw(unsigned int)+0x38>
   2b57c:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   2b580:	e3a02000 	mov	r2, #0
   2b584:	e58d1000 	str	r1, [sp]
   2b588:	e59f1010 	ldr	r1, [pc, #16]	; 2b5a0 <CExceptionHandler::Throw(unsigned int)+0x3c>
   2b58c:	ebffecaf 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b590:	e28dd008 	add	sp, sp, #8
   2b594:	e8bd8010 	pop	{r4, pc}
   2b598:	0004a378 	.word	0x0004a378
   2b59c:	0004740c 	.word	0x0004740c
   2b5a0:	000474a4 	.word	0x000474a4

0002b5a4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   2b5a4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2b5a8:	e3510002 	cmp	r1, #2
   2b5ac:	e1a06001 	mov	r6, r1
   2b5b0:	e1a04002 	mov	r4, r2
   2b5b4:	e24dd024 	sub	sp, sp, #36	; 0x24
   2b5b8:	0a000026 	beq	2b658 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb4>
   2b5bc:	e3510003 	cmp	r1, #3
   2b5c0:	13a07000 	movne	r7, #0
   2b5c4:	11a09007 	movne	r9, r7
   2b5c8:	1a000001 	bne	2b5d4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   2b5cc:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   2b5d0:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   2b5d4:	e3540000 	cmp	r4, #0
   2b5d8:	0a000024 	beq	2b670 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xcc>
   2b5dc:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   2b5e0:	e5948048 	ldr	r8, [r4, #72]	; 0x48
   2b5e4:	e203301f 	and	r3, r3, #31
   2b5e8:	e3530011 	cmp	r3, #17
   2b5ec:	e5945044 	ldr	r5, [r4, #68]	; 0x44
   2b5f0:	0a00001b 	beq	2b664 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc0>
   2b5f4:	e3530012 	cmp	r3, #18
   2b5f8:	0a000014 	beq	2b650 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
   2b5fc:	e1a00005 	mov	r0, r5
   2b600:	e59f1078 	ldr	r1, [pc, #120]	; 2b680 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2b604:	ebffe61c 	bl	24e7c <debug_stacktrace(unsigned int const*, char const*)>
   2b608:	ebffed4e 	bl	26b48 <CLogger::Get()>
   2b60c:	e59f3070 	ldr	r3, [pc, #112]	; 2b684 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   2b610:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   2b614:	e7931106 	ldr	r1, [r3, r6, lsl #2]
   2b618:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   2b61c:	e58d1000 	str	r1, [sp]
   2b620:	e58d2018 	str	r2, [sp, #24]
   2b624:	e58d3004 	str	r3, [sp, #4]
   2b628:	e3a02000 	mov	r2, #0
   2b62c:	e59f3054 	ldr	r3, [pc, #84]	; 2b688 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   2b630:	e59f1048 	ldr	r1, [pc, #72]	; 2b680 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2b634:	e58d8014 	str	r8, [sp, #20]
   2b638:	e58d5010 	str	r5, [sp, #16]
   2b63c:	e58d700c 	str	r7, [sp, #12]
   2b640:	e58d9008 	str	r9, [sp, #8]
   2b644:	ebffec81 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b648:	e28dd024 	add	sp, sp, #36	; 0x24
   2b64c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2b650:	e8940120 	ldm	r4, {r5, r8}
   2b654:	eaffffe8 	b	2b5fc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x58>
   2b658:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   2b65c:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   2b660:	eaffffdb 	b	2b5d4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   2b664:	e594800c 	ldr	r8, [r4, #12]
   2b668:	e5945008 	ldr	r5, [r4, #8]
   2b66c:	eaffffe2 	b	2b5fc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x58>
   2b670:	e3a02069 	mov	r2, #105	; 0x69
   2b674:	e59f1010 	ldr	r1, [pc, #16]	; 2b68c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   2b678:	e59f0010 	ldr	r0, [pc, #16]	; 2b690 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   2b67c:	ebffe449 	bl	247a8 <assertion_failed>
   2b680:	000474a4 	.word	0x000474a4
   2b684:	0004a378 	.word	0x0004a378
   2b688:	0004741c 	.word	0x0004741c
   2b68c:	000473f4 	.word	0x000473f4
   2b690:	00045600 	.word	0x00045600

0002b694 <CExceptionHandler::Get()>:
   2b694:	e59f3010 	ldr	r3, [pc, #16]	; 2b6ac <CExceptionHandler::Get()+0x18>
   2b698:	e5930000 	ldr	r0, [r3]
   2b69c:	e3500000 	cmp	r0, #0
   2b6a0:	112fff1e 	bxne	lr
   2b6a4:	e92d4010 	push	{r4, lr}
   2b6a8:	ebffff7c 	bl	2b4a0 <CExceptionHandler::Get() [clone .part.0]>
   2b6ac:	0005ce74 	.word	0x0005ce74

0002b6b0 <ExceptionHandler>:
   2b6b0:	e92d4070 	push	{r4, r5, r6, lr}
   2b6b4:	e3a03000 	mov	r3, #0
   2b6b8:	e1a04000 	mov	r4, r0
   2b6bc:	e1a05001 	mov	r5, r1
   2b6c0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b6c4:	eb0002c9 	bl	2c1f0 <CInterruptSystem::DisableFIQ()>
   2b6c8:	f1080040 	cpsie	f
   2b6cc:	e59f301c 	ldr	r3, [pc, #28]	; 2b6f0 <ExceptionHandler+0x40>
   2b6d0:	e5930000 	ldr	r0, [r3]
   2b6d4:	e3500000 	cmp	r0, #0
   2b6d8:	0a000003 	beq	2b6ec <ExceptionHandler+0x3c>
   2b6dc:	e1a02005 	mov	r2, r5
   2b6e0:	e1a01004 	mov	r1, r4
   2b6e4:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b6e8:	eaffffad 	b	2b5a4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   2b6ec:	ebffff6b 	bl	2b4a0 <CExceptionHandler::Get() [clone .part.0]>
   2b6f0:	0005ce74 	.word	0x0005ce74

0002b6f4 <raise>:
   2b6f4:	e59f3020 	ldr	r3, [pc, #32]	; 2b71c <raise+0x28>
   2b6f8:	e92d4010 	push	{r4, lr}
   2b6fc:	e5930000 	ldr	r0, [r3]
   2b700:	e3500000 	cmp	r0, #0
   2b704:	0a000003 	beq	2b718 <raise+0x24>
   2b708:	e3a01004 	mov	r1, #4
   2b70c:	ebffff94 	bl	2b564 <CExceptionHandler::Throw(unsigned int)>
   2b710:	e3a00000 	mov	r0, #0
   2b714:	e8bd8010 	pop	{r4, pc}
   2b718:	ebffff60 	bl	2b4a0 <CExceptionHandler::Get() [clone .part.0]>
   2b71c:	0005ce74 	.word	0x0005ce74

0002b720 <UndefinedInstructionInternal>:
   2b720:	e24dd004 	sub	sp, sp, #4
   2b724:	e24ee004 	sub	lr, lr, #4
   2b728:	e92d4000 	stmfd	sp!, {lr}
   2b72c:	e14fe000 	mrs	lr, SPSR
   2b730:	e92d4000 	stmfd	sp!, {lr}
   2b734:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b738:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b73c:	e1a0100d 	mov	r1, sp
   2b740:	f1020012 	cps	#18
   2b744:	e1a0200d 	mov	r2, sp
   2b748:	e1a0300e 	mov	r3, lr
   2b74c:	f1020011 	cps	#17
   2b750:	e1a0400d 	mov	r4, sp
   2b754:	e1a0500e 	mov	r5, lr
   2b758:	f102001f 	cps	#31
   2b75c:	e1a0d001 	mov	sp, r1
   2b760:	e92d003c 	push	{r2, r3, r4, r5}
   2b764:	e1a0100d 	mov	r1, sp
   2b768:	e3a00001 	mov	r0, #1
   2b76c:	eaffffcf 	b	2b6b0 <ExceptionHandler>

0002b770 <PrefetchAbortStub>:
   2b770:	e24dd004 	sub	sp, sp, #4
   2b774:	e24ee004 	sub	lr, lr, #4
   2b778:	e92d4000 	stmfd	sp!, {lr}
   2b77c:	e14fe000 	mrs	lr, SPSR
   2b780:	e92d4000 	stmfd	sp!, {lr}
   2b784:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b788:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b78c:	e1a0100d 	mov	r1, sp
   2b790:	f1020012 	cps	#18
   2b794:	e1a0200d 	mov	r2, sp
   2b798:	e1a0300e 	mov	r3, lr
   2b79c:	f1020011 	cps	#17
   2b7a0:	e1a0400d 	mov	r4, sp
   2b7a4:	e1a0500e 	mov	r5, lr
   2b7a8:	f102001f 	cps	#31
   2b7ac:	e1a0d001 	mov	sp, r1
   2b7b0:	e92d003c 	push	{r2, r3, r4, r5}
   2b7b4:	e1a0100d 	mov	r1, sp
   2b7b8:	e3a00002 	mov	r0, #2
   2b7bc:	eaffffbb 	b	2b6b0 <ExceptionHandler>

0002b7c0 <DataAbortStub>:
   2b7c0:	e24dd004 	sub	sp, sp, #4
   2b7c4:	e24ee008 	sub	lr, lr, #8
   2b7c8:	e92d4000 	stmfd	sp!, {lr}
   2b7cc:	e14fe000 	mrs	lr, SPSR
   2b7d0:	e92d4000 	stmfd	sp!, {lr}
   2b7d4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b7d8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b7dc:	e1a0100d 	mov	r1, sp
   2b7e0:	f1020012 	cps	#18
   2b7e4:	e1a0200d 	mov	r2, sp
   2b7e8:	e1a0300e 	mov	r3, lr
   2b7ec:	f1020011 	cps	#17
   2b7f0:	e1a0400d 	mov	r4, sp
   2b7f4:	e1a0500e 	mov	r5, lr
   2b7f8:	f102001f 	cps	#31
   2b7fc:	e1a0d001 	mov	sp, r1
   2b800:	e92d003c 	push	{r2, r3, r4, r5}
   2b804:	e1a0100d 	mov	r1, sp
   2b808:	e3a00003 	mov	r0, #3
   2b80c:	eaffffa7 	b	2b6b0 <ExceptionHandler>

0002b810 <UndefinedInstructionStub>:
   2b810:	e92d4001 	push	{r0, lr}
   2b814:	eef80a10 	vmrs	r0, fpexc
   2b818:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   2b81c:	0affffbf 	beq	2b720 <UndefinedInstructionInternal>
   2b820:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   2b824:	eee80a10 	vmsr	fpexc, r0
   2b828:	e8fd8001 	ldm	sp!, {r0, pc}^

0002b82c <IRQStub>:
   2b82c:	e24ee004 	sub	lr, lr, #4
   2b830:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2b834:	e59f0060 	ldr	r0, [pc, #96]	; 2b89c <FIQStub+0x58>
   2b838:	e580e000 	str	lr, [r0]
   2b83c:	eb0002c4 	bl	2c354 <InterruptHandler>
   2b840:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

0002b844 <FIQStub>:
   2b844:	e24ee004 	sub	lr, lr, #4
   2b848:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2b84c:	e3a03000 	mov	r3, #0
   2b850:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b854:	e59f2044 	ldr	r2, [pc, #68]	; 2b8a0 <FIQStub+0x5c>
   2b858:	e5921000 	ldr	r1, [r2]
   2b85c:	e3510000 	cmp	r1, #0
   2b860:	0a000004 	beq	2b878 <FIQStub+0x34>
   2b864:	e5920004 	ldr	r0, [r2, #4]
   2b868:	e12fff31 	blx	r1
   2b86c:	e3a03000 	mov	r3, #0
   2b870:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b874:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2b878:	e3a03000 	mov	r3, #0
   2b87c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b880:	e59f101c 	ldr	r1, [pc, #28]	; 2b8a4 <FIQStub+0x60>
   2b884:	e3a00000 	mov	r0, #0
   2b888:	e5810000 	str	r0, [r1]
   2b88c:	e3a03000 	mov	r3, #0
   2b890:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b894:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b898:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2b89c:	0004a398 	.word	0x0004a398
   2b8a0:	0004a38c 	.word	0x0004a38c
   2b8a4:	2000b20c 	.word	0x2000b20c

0002b8a8 <CMemorySystem::CMemorySystem(bool)>:
   2b8a8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b8ac:	e1a04000 	mov	r4, r0
   2b8b0:	e3a05000 	mov	r5, #0
   2b8b4:	e280700c 	add	r7, r0, #12
   2b8b8:	e5c01000 	strb	r1, [r0]
   2b8bc:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   2b8c0:	e59f1110 	ldr	r1, [pc, #272]	; 2b9d8 <CMemorySystem::CMemorySystem(bool)+0x130>
   2b8c4:	e5845004 	str	r5, [r4, #4]
   2b8c8:	e5845008 	str	r5, [r4, #8]
   2b8cc:	e1a00007 	mov	r0, r7
   2b8d0:	e28460c8 	add	r6, r4, #200	; 0xc8
   2b8d4:	ebfffdd0 	bl	2b01c <CHeapAllocator::CHeapAllocator(char const*)>
   2b8d8:	e1a00006 	mov	r0, r6
   2b8dc:	eb000531 	bl	2cda8 <CPageAllocator::CPageAllocator()>
   2b8e0:	e59f30f4 	ldr	r3, [pc, #244]	; 2b9dc <CMemorySystem::CMemorySystem(bool)+0x134>
   2b8e4:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   2b8e8:	e5935000 	ldr	r5, [r3]
   2b8ec:	e3550000 	cmp	r5, #0
   2b8f0:	0a000002 	beq	2b900 <CMemorySystem::CMemorySystem(bool)+0x58>
   2b8f4:	e1a00004 	mov	r0, r4
   2b8f8:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2b8fc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b900:	e3a01001 	mov	r1, #1
   2b904:	e28d000c 	add	r0, sp, #12
   2b908:	e5834000 	str	r4, [r3]
   2b90c:	ebffe3c6 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2b910:	e3a03014 	mov	r3, #20
   2b914:	e59f10c4 	ldr	r1, [pc, #196]	; 2b9e0 <CMemorySystem::CMemorySystem(bool)+0x138>
   2b918:	e58d5000 	str	r5, [sp]
   2b91c:	e28d000c 	add	r0, sp, #12
   2b920:	e08d2003 	add	r2, sp, r3
   2b924:	ebffe3cc 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2b928:	e3500000 	cmp	r0, #0
   2b92c:	0a000016 	beq	2b98c <CMemorySystem::CMemorySystem(bool)+0xe4>
   2b930:	e59d3020 	ldr	r3, [sp, #32]
   2b934:	e3530000 	cmp	r3, #0
   2b938:	1a000022 	bne	2b9c8 <CMemorySystem::CMemorySystem(bool)+0x120>
   2b93c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2b940:	e2435501 	sub	r5, r3, #4194304	; 0x400000
   2b944:	e2432609 	sub	r2, r3, #9437184	; 0x900000
   2b948:	e1a00007 	mov	r0, r7
   2b94c:	e3a01605 	mov	r1, #5242880	; 0x500000
   2b950:	e5843004 	str	r3, [r4, #4]
   2b954:	e3a03701 	mov	r3, #262144	; 0x40000
   2b958:	ebfffdc8 	bl	2b080 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   2b95c:	e1a01005 	mov	r1, r5
   2b960:	e1a00006 	mov	r0, r6
   2b964:	e3a02501 	mov	r2, #4194304	; 0x400000
   2b968:	eb000516 	bl	2cdc8 <CPageAllocator::Setup(unsigned int, unsigned int)>
   2b96c:	e5d43000 	ldrb	r3, [r4]
   2b970:	e3530000 	cmp	r3, #0
   2b974:	1a00000a 	bne	2b9a4 <CMemorySystem::CMemorySystem(bool)+0xfc>
   2b978:	e28d000c 	add	r0, sp, #12
   2b97c:	ebffe3b1 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   2b980:	e1a00004 	mov	r0, r4
   2b984:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2b988:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b98c:	e3a03303 	mov	r3, #201326592	; 0xc000000
   2b990:	e3a026b7 	mov	r2, #191889408	; 0xb700000
   2b994:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   2b998:	e58d0020 	str	r0, [sp, #32]
   2b99c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   2b9a0:	eaffffe8 	b	2b948 <CMemorySystem::CMemorySystem(bool)+0xa0>
   2b9a4:	e3a00004 	mov	r0, #4
   2b9a8:	ebfffd86 	bl	2afc8 <operator new(unsigned int)>
   2b9ac:	e1a05000 	mov	r5, r0
   2b9b0:	e5941004 	ldr	r1, [r4, #4]
   2b9b4:	eb00007f 	bl	2bbb8 <CPageTable::CPageTable(unsigned int)>
   2b9b8:	e1a00004 	mov	r0, r4
   2b9bc:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   2b9c0:	eb000040 	bl	2bac8 <CMemorySystem::EnableMMU()>
   2b9c4:	eaffffeb 	b	2b978 <CMemorySystem::CMemorySystem(bool)+0xd0>
   2b9c8:	e59f1014 	ldr	r1, [pc, #20]	; 2b9e4 <CMemorySystem::CMemorySystem(bool)+0x13c>
   2b9cc:	e3a0204e 	mov	r2, #78	; 0x4e
   2b9d0:	e281000c 	add	r0, r1, #12
   2b9d4:	ebffe373 	bl	247a8 <assertion_failed>
   2b9d8:	000474ac 	.word	0x000474ac
   2b9dc:	0005ce78 	.word	0x0005ce78
   2b9e0:	00010005 	.word	0x00010005
   2b9e4:	000474b4 	.word	0x000474b4

0002b9e8 <CMemorySystem::~CMemorySystem()>:
   2b9e8:	e59f3044 	ldr	r3, [pc, #68]	; 2ba34 <CMemorySystem::~CMemorySystem()+0x4c>
   2b9ec:	e92d4010 	push	{r4, lr}
   2b9f0:	e5932000 	ldr	r2, [r3]
   2b9f4:	e1a04000 	mov	r4, r0
   2b9f8:	e1500002 	cmp	r0, r2
   2b9fc:	0a000005 	beq	2ba18 <CMemorySystem::~CMemorySystem()+0x30>
   2ba00:	e28400c8 	add	r0, r4, #200	; 0xc8
   2ba04:	eb0004ee 	bl	2cdc4 <CPageAllocator::~CPageAllocator()>
   2ba08:	e284000c 	add	r0, r4, #12
   2ba0c:	ebfffd9a 	bl	2b07c <CHeapAllocator::~CHeapAllocator()>
   2ba10:	e1a00004 	mov	r0, r4
   2ba14:	e8bd8010 	pop	{r4, pc}
   2ba18:	e3a01000 	mov	r1, #0
   2ba1c:	e5d02000 	ldrb	r2, [r0]
   2ba20:	e5831000 	str	r1, [r3]
   2ba24:	e1520001 	cmp	r2, r1
   2ba28:	0afffff4 	beq	2ba00 <CMemorySystem::~CMemorySystem()+0x18>
   2ba2c:	eb000056 	bl	2bb8c <CMemorySystem::Destructor() [clone .part.0]>
   2ba30:	eafffff2 	b	2ba00 <CMemorySystem::~CMemorySystem()+0x18>
   2ba34:	0005ce78 	.word	0x0005ce78

0002ba38 <CMemorySystem::Destructor()>:
   2ba38:	e59f3020 	ldr	r3, [pc, #32]	; 2ba60 <CMemorySystem::Destructor()+0x28>
   2ba3c:	e5932000 	ldr	r2, [r3]
   2ba40:	e1520000 	cmp	r2, r0
   2ba44:	112fff1e 	bxne	lr
   2ba48:	e3a01000 	mov	r1, #0
   2ba4c:	e5d22000 	ldrb	r2, [r2]
   2ba50:	e5831000 	str	r1, [r3]
   2ba54:	e1520001 	cmp	r2, r1
   2ba58:	012fff1e 	bxeq	lr
   2ba5c:	ea00004a 	b	2bb8c <CMemorySystem::Destructor() [clone .part.0]>
   2ba60:	0005ce78 	.word	0x0005ce78

0002ba64 <CMemorySystem::GetMemSize() const>:
   2ba64:	e59f3028 	ldr	r3, [pc, #40]	; 2ba94 <CMemorySystem::GetMemSize() const+0x30>
   2ba68:	e5933000 	ldr	r3, [r3]
   2ba6c:	e3530000 	cmp	r3, #0
   2ba70:	0a000002 	beq	2ba80 <CMemorySystem::GetMemSize() const+0x1c>
   2ba74:	e9930009 	ldmib	r3, {r0, r3}
   2ba78:	e0800003 	add	r0, r0, r3
   2ba7c:	e12fff1e 	bx	lr
   2ba80:	e59f1010 	ldr	r1, [pc, #16]	; 2ba98 <CMemorySystem::GetMemSize() const+0x34>
   2ba84:	e3a020a0 	mov	r2, #160	; 0xa0
   2ba88:	e92d4010 	push	{r4, lr}
   2ba8c:	e2810028 	add	r0, r1, #40	; 0x28
   2ba90:	ebffe344 	bl	247a8 <assertion_failed>
   2ba94:	0005ce78 	.word	0x0005ce78
   2ba98:	000474b4 	.word	0x000474b4

0002ba9c <CMemorySystem::Get()>:
   2ba9c:	e59f301c 	ldr	r3, [pc, #28]	; 2bac0 <CMemorySystem::Get()+0x24>
   2baa0:	e5930000 	ldr	r0, [r3]
   2baa4:	e3500000 	cmp	r0, #0
   2baa8:	112fff1e 	bxne	lr
   2baac:	e59f1010 	ldr	r1, [pc, #16]	; 2bac4 <CMemorySystem::Get()+0x28>
   2bab0:	e3a020a6 	mov	r2, #166	; 0xa6
   2bab4:	e92d4010 	push	{r4, lr}
   2bab8:	e2810028 	add	r0, r1, #40	; 0x28
   2babc:	ebffe339 	bl	247a8 <assertion_failed>
   2bac0:	0005ce78 	.word	0x0005ce78
   2bac4:	000474b4 	.word	0x000474b4

0002bac8 <CMemorySystem::EnableMMU()>:
   2bac8:	e5d03000 	ldrb	r3, [r0]
   2bacc:	e92d4010 	push	{r4, lr}
   2bad0:	e3530000 	cmp	r3, #0
   2bad4:	0a00001b 	beq	2bb48 <CMemorySystem::EnableMMU()+0x80>
   2bad8:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   2badc:	e3833040 	orr	r3, r3, #64	; 0x40
   2bae0:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   2bae4:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   2bae8:	e3130001 	tst	r3, #1
   2baec:	1a000019 	bne	2bb58 <CMemorySystem::EnableMMU()+0x90>
   2baf0:	e3a04000 	mov	r4, #0
   2baf4:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   2baf8:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   2bafc:	e1500004 	cmp	r0, r4
   2bb00:	0a000018 	beq	2bb68 <CMemorySystem::EnableMMU()+0xa0>
   2bb04:	eb000053 	bl	2bc58 <CPageTable::GetBaseAddress() const>
   2bb08:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   2bb0c:	e3a03001 	mov	r3, #1
   2bb10:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   2bb14:	ee074f16 	mcr	15, 0, r4, cr7, cr6, {0}
   2bb18:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2bb1c:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   2bb20:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   2bb24:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   2bb28:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2bb2c:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}
   2bb30:	ee112f10 	mrc	15, 0, r2, cr1, cr0, {0}
   2bb34:	e59f303c 	ldr	r3, [pc, #60]	; 2bb78 <CMemorySystem::EnableMMU()+0xb0>
   2bb38:	e3c22002 	bic	r2, r2, #2
   2bb3c:	e1823003 	orr	r3, r2, r3
   2bb40:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   2bb44:	e8bd8010 	pop	{r4, pc}
   2bb48:	e59f102c 	ldr	r1, [pc, #44]	; 2bb7c <CMemorySystem::EnableMMU()+0xb4>
   2bb4c:	e3a020ac 	mov	r2, #172	; 0xac
   2bb50:	e2810038 	add	r0, r1, #56	; 0x38
   2bb54:	ebffe313 	bl	247a8 <assertion_failed>
   2bb58:	e59f101c 	ldr	r1, [pc, #28]	; 2bb7c <CMemorySystem::EnableMMU()+0xb4>
   2bb5c:	e3a020ba 	mov	r2, #186	; 0xba
   2bb60:	e2810048 	add	r0, r1, #72	; 0x48
   2bb64:	ebffe30f 	bl	247a8 <assertion_failed>
   2bb68:	e59f100c 	ldr	r1, [pc, #12]	; 2bb7c <CMemorySystem::EnableMMU()+0xb4>
   2bb6c:	e3a020c0 	mov	r2, #192	; 0xc0
   2bb70:	e2810074 	add	r0, r1, #116	; 0x74
   2bb74:	ebffe30b 	bl	247a8 <assertion_failed>
   2bb78:	00c01805 	.word	0x00c01805
   2bb7c:	000474b4 	.word	0x000474b4

0002bb80 <CMemorySystem::GetCoherentPage(unsigned int)>:
   2bb80:	e1a00600 	lsl	r0, r0, #12
   2bb84:	e2800501 	add	r0, r0, #4194304	; 0x400000
   2bb88:	e12fff1e 	bx	lr

0002bb8c <CMemorySystem::Destructor() [clone .part.0]>:
   2bb8c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   2bb90:	e3c33005 	bic	r3, r3, #5
   2bb94:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   2bb98:	e3a03000 	mov	r3, #0
   2bb9c:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2bba0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bba4:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   2bba8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bbac:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   2bbb0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bbb4:	e12fff1e 	bx	lr

0002bbb8 <CPageTable::CPageTable(unsigned int)>:
   2bbb8:	e3a0c709 	mov	ip, #2359296	; 0x240000
   2bbbc:	e59f207c 	ldr	r2, [pc, #124]	; 2bc40 <CPageTable::CPageTable(unsigned int)+0x88>
   2bbc0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2bbc4:	e3a03000 	mov	r3, #0
   2bbc8:	e1a04002 	mov	r4, r2
   2bbcc:	e3e064df 	mvn	r6, #-553648128	; 0xdf000000
   2bbd0:	e59fe06c 	ldr	lr, [pc, #108]	; 2bc44 <CPageTable::CPageTable(unsigned int)+0x8c>
   2bbd4:	e59f806c 	ldr	r8, [pc, #108]	; 2bc48 <CPageTable::CPageTable(unsigned int)+0x90>
   2bbd8:	e59f706c 	ldr	r7, [pc, #108]	; 2bc4c <CPageTable::CPageTable(unsigned int)+0x94>
   2bbdc:	e59f506c 	ldr	r5, [pc, #108]	; 2bc50 <CPageTable::CPageTable(unsigned int)+0x98>
   2bbe0:	e580c000 	str	ip, [r0]
   2bbe4:	ea00000c 	b	2bc1c <CPageTable::CPageTable(unsigned int)+0x64>
   2bbe8:	e153000e 	cmp	r3, lr
   2bbec:	31a02004 	movcc	r2, r4
   2bbf0:	3a000008 	bcc	2bc18 <CPageTable::CPageTable(unsigned int)+0x60>
   2bbf4:	e3530501 	cmp	r3, #4194304	; 0x400000
   2bbf8:	01a02008 	moveq	r2, r8
   2bbfc:	0a000005 	beq	2bc18 <CPageTable::CPageTable(unsigned int)+0x60>
   2bc00:	e1530001 	cmp	r3, r1
   2bc04:	31a02007 	movcc	r2, r7
   2bc08:	3a000002 	bcc	2bc18 <CPageTable::CPageTable(unsigned int)+0x60>
   2bc0c:	e1530006 	cmp	r3, r6
   2bc10:	31a02005 	movcc	r2, r5
   2bc14:	23a02000 	movcs	r2, #0
   2bc18:	e28cc004 	add	ip, ip, #4
   2bc1c:	e1822003 	orr	r2, r2, r3
   2bc20:	e3730601 	cmn	r3, #1048576	; 0x100000
   2bc24:	e58c2000 	str	r2, [ip]
   2bc28:	e2833601 	add	r3, r3, #1048576	; 0x100000
   2bc2c:	1affffed 	bne	2bbe8 <CPageTable::CPageTable(unsigned int)+0x30>
   2bc30:	e3a03000 	mov	r3, #0
   2bc34:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2bc38:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bc3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2bc40:	0000040e 	.word	0x0000040e
   2bc44:	000405f0 	.word	0x000405f0
   2bc48:	00010412 	.word	0x00010412
   2bc4c:	0000041e 	.word	0x0000041e
   2bc50:	00010416 	.word	0x00010416

0002bc54 <CPageTable::~CPageTable()>:
   2bc54:	e12fff1e 	bx	lr

0002bc58 <CPageTable::GetBaseAddress() const>:
   2bc58:	e5900000 	ldr	r0, [r0]
   2bc5c:	e3800001 	orr	r0, r0, #1
   2bc60:	e12fff1e 	bx	lr

0002bc64 <CurrentExecutionLevel>:
   2bc64:	e10f0000 	mrs	r0, CPSR
   2bc68:	e3100040 	tst	r0, #64	; 0x40
   2bc6c:	01a003a0 	lsreq	r0, r0, #7
   2bc70:	02000001 	andeq	r0, r0, #1
   2bc74:	13a00002 	movne	r0, #2
   2bc78:	e12fff1e 	bx	lr

0002bc7c <EnterCritical>:
   2bc7c:	e2403001 	sub	r3, r0, #1
   2bc80:	e3530001 	cmp	r3, #1
   2bc84:	e92d4010 	push	{r4, lr}
   2bc88:	8a000012 	bhi	2bcd8 <EnterCritical+0x5c>
   2bc8c:	e10f1000 	mrs	r1, CPSR
   2bc90:	e3500002 	cmp	r0, #2
   2bc94:	1a000013 	bne	2bce8 <EnterCritical+0x6c>
   2bc98:	f10c00c0 	cpsid	if
   2bc9c:	e59f306c 	ldr	r3, [pc, #108]	; 2bd10 <EnterCritical+0x94>
   2bca0:	e5932000 	ldr	r2, [r3]
   2bca4:	e3520013 	cmp	r2, #19
   2bca8:	8a000014 	bhi	2bd00 <EnterCritical+0x84>
   2bcac:	e5932000 	ldr	r2, [r3]
   2bcb0:	e3500001 	cmp	r0, #1
   2bcb4:	e2820001 	add	r0, r2, #1
   2bcb8:	e0832102 	add	r2, r3, r2, lsl #2
   2bcbc:	e5830000 	str	r0, [r3]
   2bcc0:	e5821004 	str	r1, [r2, #4]
   2bcc4:	1a000000 	bne	2bccc <EnterCritical+0x50>
   2bcc8:	f1080040 	cpsie	f
   2bccc:	e3a03000 	mov	r3, #0
   2bcd0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bcd4:	e8bd8010 	pop	{r4, pc}
   2bcd8:	e3a02064 	mov	r2, #100	; 0x64
   2bcdc:	e59f1030 	ldr	r1, [pc, #48]	; 2bd14 <EnterCritical+0x98>
   2bce0:	e59f0030 	ldr	r0, [pc, #48]	; 2bd18 <EnterCritical+0x9c>
   2bce4:	ebffe2af 	bl	247a8 <assertion_failed>
   2bce8:	e3110040 	tst	r1, #64	; 0x40
   2bcec:	0affffe9 	beq	2bc98 <EnterCritical+0x1c>
   2bcf0:	e3a0206a 	mov	r2, #106	; 0x6a
   2bcf4:	e59f1018 	ldr	r1, [pc, #24]	; 2bd14 <EnterCritical+0x98>
   2bcf8:	e59f001c 	ldr	r0, [pc, #28]	; 2bd1c <EnterCritical+0xa0>
   2bcfc:	ebffe2a9 	bl	247a8 <assertion_failed>
   2bd00:	e3a0206e 	mov	r2, #110	; 0x6e
   2bd04:	e59f1008 	ldr	r1, [pc, #8]	; 2bd14 <EnterCritical+0x98>
   2bd08:	e59f0010 	ldr	r0, [pc, #16]	; 2bd20 <EnterCritical+0xa4>
   2bd0c:	ebffe2a5 	bl	247a8 <assertion_failed>
   2bd10:	0005ce7c 	.word	0x0005ce7c
   2bd14:	0004753c 	.word	0x0004753c
   2bd18:	0004754c 	.word	0x0004754c
   2bd1c:	00047584 	.word	0x00047584
   2bd20:	000475b4 	.word	0x000475b4

0002bd24 <LeaveCritical>:
   2bd24:	e3a03000 	mov	r3, #0
   2bd28:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bd2c:	f10c0040 	cpsid	f
   2bd30:	e59f3038 	ldr	r3, [pc, #56]	; 2bd70 <LeaveCritical+0x4c>
   2bd34:	e5932000 	ldr	r2, [r3]
   2bd38:	e3520000 	cmp	r2, #0
   2bd3c:	0a000006 	beq	2bd5c <LeaveCritical+0x38>
   2bd40:	e5932000 	ldr	r2, [r3]
   2bd44:	e2422001 	sub	r2, r2, #1
   2bd48:	e5832000 	str	r2, [r3]
   2bd4c:	e0833102 	add	r3, r3, r2, lsl #2
   2bd50:	e5933004 	ldr	r3, [r3, #4]
   2bd54:	e121f003 	msr	CPSR_c, r3
   2bd58:	e12fff1e 	bx	lr
   2bd5c:	e3a0207f 	mov	r2, #127	; 0x7f
   2bd60:	e92d4010 	push	{r4, lr}
   2bd64:	e59f1008 	ldr	r1, [pc, #8]	; 2bd74 <LeaveCritical+0x50>
   2bd68:	e59f0008 	ldr	r0, [pc, #8]	; 2bd78 <LeaveCritical+0x54>
   2bd6c:	ebffe28d 	bl	247a8 <assertion_failed>
   2bd70:	0005ce7c 	.word	0x0005ce7c
   2bd74:	0004753c 	.word	0x0004753c
   2bd78:	000475dc 	.word	0x000475dc

0002bd7c <CleanAndInvalidateDataCacheRange>:
   2bd7c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2bd80:	e2813020 	add	r3, r1, #32
   2bd84:	e353001f 	cmp	r3, #31
   2bd88:	9a000007 	bls	2bdac <CleanAndInvalidateDataCacheRange+0x30>
   2bd8c:	e2800020 	add	r0, r0, #32
   2bd90:	e3c1101f 	bic	r1, r1, #31
   2bd94:	e0803001 	add	r3, r0, r1
   2bd98:	ea000000 	b	2bda0 <CleanAndInvalidateDataCacheRange+0x24>
   2bd9c:	e2800020 	add	r0, r0, #32
   2bda0:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2bda4:	e1530000 	cmp	r3, r0
   2bda8:	1afffffb 	bne	2bd9c <CleanAndInvalidateDataCacheRange+0x20>
   2bdac:	e3a03000 	mov	r3, #0
   2bdb0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bdb4:	e12fff1e 	bx	lr

0002bdb8 <SyncDataAndInstructionCache>:
   2bdb8:	e3a03000 	mov	r3, #0
   2bdbc:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2bdc0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bdc4:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2bdc8:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2bdcc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bdd0:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2bdd4:	e12fff1e 	bx	lr

0002bdd8 <CInterruptSystem::CInterruptSystem()>:
   2bdd8:	e3a02000 	mov	r2, #0
   2bddc:	e2403004 	sub	r3, r0, #4
   2bde0:	e2801f47 	add	r1, r0, #284	; 0x11c
   2bde4:	e5a32004 	str	r2, [r3, #4]!
   2bde8:	e1530001 	cmp	r3, r1
   2bdec:	e5832120 	str	r2, [r3, #288]	; 0x120
   2bdf0:	1afffffb 	bne	2bde4 <CInterruptSystem::CInterruptSystem()+0xc>
   2bdf4:	e59f3004 	ldr	r3, [pc, #4]	; 2be00 <CInterruptSystem::CInterruptSystem()+0x28>
   2bdf8:	e5830000 	str	r0, [r3]
   2bdfc:	e12fff1e 	bx	lr
   2be00:	0005ced0 	.word	0x0005ced0

0002be04 <CInterruptSystem::~CInterruptSystem()>:
   2be04:	f10c0080 	cpsid	i
   2be08:	e3a03000 	mov	r3, #0
   2be0c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2be10:	e3e01000 	mvn	r1, #0
   2be14:	e59f201c 	ldr	r2, [pc, #28]	; 2be38 <CInterruptSystem::~CInterruptSystem()+0x34>
   2be18:	e582320c 	str	r3, [r2, #524]	; 0x20c
   2be1c:	e582121c 	str	r1, [r2, #540]	; 0x21c
   2be20:	e5821220 	str	r1, [r2, #544]	; 0x220
   2be24:	e5821224 	str	r1, [r2, #548]	; 0x224
   2be28:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2be2c:	e59f2008 	ldr	r2, [pc, #8]	; 2be3c <CInterruptSystem::~CInterruptSystem()+0x38>
   2be30:	e5823000 	str	r3, [r2]
   2be34:	e12fff1e 	bx	lr
   2be38:	2000b000 	.word	0x2000b000
   2be3c:	0005ced0 	.word	0x0005ced0

0002be40 <CInterruptSystem::Initialize()>:
   2be40:	e92d4010 	push	{r4, lr}
   2be44:	e3a04000 	mov	r4, #0
   2be48:	e59f2054 	ldr	r2, [pc, #84]	; 2bea4 <CInterruptSystem::Initialize()+0x64>
   2be4c:	e59f3054 	ldr	r3, [pc, #84]	; 2bea8 <CInterruptSystem::Initialize()+0x68>
   2be50:	e2422018 	sub	r2, r2, #24
   2be54:	e243301c 	sub	r3, r3, #28
   2be58:	e1a02142 	asr	r2, r2, #2
   2be5c:	e1a03143 	asr	r3, r3, #2
   2be60:	e2422002 	sub	r2, r2, #2
   2be64:	e2433002 	sub	r3, r3, #2
   2be68:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   2be6c:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2be70:	e1c421f8 	strd	r2, [r4, #24]
   2be74:	ebffffcf 	bl	2bdb8 <SyncDataAndInstructionCache>
   2be78:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2be7c:	e3e02000 	mvn	r2, #0
   2be80:	e59f3024 	ldr	r3, [pc, #36]	; 2beac <CInterruptSystem::Initialize()+0x6c>
   2be84:	e583420c 	str	r4, [r3, #524]	; 0x20c
   2be88:	e583221c 	str	r2, [r3, #540]	; 0x21c
   2be8c:	e5832220 	str	r2, [r3, #544]	; 0x220
   2be90:	e5832224 	str	r2, [r3, #548]	; 0x224
   2be94:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   2be98:	f1080080 	cpsie	i
   2be9c:	e3a00001 	mov	r0, #1
   2bea0:	e8bd8010 	pop	{r4, pc}
   2bea4:	0002b82c 	.word	0x0002b82c
   2bea8:	0002b844 	.word	0x0002b844
   2beac:	2000b000 	.word	0x2000b000

0002beb0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   2beb0:	e3510047 	cmp	r1, #71	; 0x47
   2beb4:	e92d4010 	push	{r4, lr}
   2beb8:	8a00001e 	bhi	2bf38 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   2bebc:	e3520000 	cmp	r2, #0
   2bec0:	0a000020 	beq	2bf48 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
   2bec4:	e59f009c 	ldr	r0, [pc, #156]	; 2bf68 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
   2bec8:	e5d0e001 	ldrb	lr, [r0, #1]
   2becc:	e5d0c000 	ldrb	ip, [r0]
   2bed0:	e5d04002 	ldrb	r4, [r0, #2]
   2bed4:	e18cc40e 	orr	ip, ip, lr, lsl #8
   2bed8:	e5d0e003 	ldrb	lr, [r0, #3]
   2bedc:	e18cc804 	orr	ip, ip, r4, lsl #16
   2bee0:	e19ccc0e 	orrs	ip, ip, lr, lsl #24
   2bee4:	1a00001b 	bne	2bf58 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa8>
   2bee8:	e1a04422 	lsr	r4, r2, #8
   2beec:	e1a0e822 	lsr	lr, r2, #16
   2bef0:	e5c02000 	strb	r2, [r0]
   2bef4:	e5c03004 	strb	r3, [r0, #4]
   2bef8:	e1a02c22 	lsr	r2, r2, #24
   2befc:	e5c04001 	strb	r4, [r0, #1]
   2bf00:	e5c0e002 	strb	lr, [r0, #2]
   2bf04:	e1a04423 	lsr	r4, r3, #8
   2bf08:	e1a0e823 	lsr	lr, r3, #16
   2bf0c:	e1a03c23 	lsr	r3, r3, #24
   2bf10:	e5c02003 	strb	r2, [r0, #3]
   2bf14:	e5c04005 	strb	r4, [r0, #5]
   2bf18:	e5c0e006 	strb	lr, [r0, #6]
   2bf1c:	e5c03007 	strb	r3, [r0, #7]
   2bf20:	ee07cf9a 	mcr	15, 0, ip, cr7, cr10, {4}
   2bf24:	e59f3040 	ldr	r3, [pc, #64]	; 2bf6c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xbc>
   2bf28:	e3811080 	orr	r1, r1, #128	; 0x80
   2bf2c:	e583120c 	str	r1, [r3, #524]	; 0x20c
   2bf30:	ee07cfba 	mcr	15, 0, ip, cr7, cr10, {5}
   2bf34:	e8bd8010 	pop	{r4, pc}
   2bf38:	e3a0208f 	mov	r2, #143	; 0x8f
   2bf3c:	e59f102c 	ldr	r1, [pc, #44]	; 2bf70 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2bf40:	e59f002c 	ldr	r0, [pc, #44]	; 2bf74 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   2bf44:	ebffe217 	bl	247a8 <assertion_failed>
   2bf48:	e3a02090 	mov	r2, #144	; 0x90
   2bf4c:	e59f101c 	ldr	r1, [pc, #28]	; 2bf70 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2bf50:	e59f0020 	ldr	r0, [pc, #32]	; 2bf78 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   2bf54:	ebffe213 	bl	247a8 <assertion_failed>
   2bf58:	e3a02091 	mov	r2, #145	; 0x91
   2bf5c:	e59f100c 	ldr	r1, [pc, #12]	; 2bf70 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2bf60:	e59f0014 	ldr	r0, [pc, #20]	; 2bf7c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
   2bf64:	ebffe20f 	bl	247a8 <assertion_failed>
   2bf68:	0004a38c 	.word	0x0004a38c
   2bf6c:	2000b000 	.word	0x2000b000
   2bf70:	000475f4 	.word	0x000475f4
   2bf74:	00047604 	.word	0x00047604
   2bf78:	00047638 	.word	0x00047638
   2bf7c:	00047618 	.word	0x00047618

0002bf80 <CInterruptSystem::DisconnectFIQ()>:
   2bf80:	e59f3068 	ldr	r3, [pc, #104]	; 2bff0 <CInterruptSystem::DisconnectFIQ()+0x70>
   2bf84:	e5d31001 	ldrb	r1, [r3, #1]
   2bf88:	e5d32000 	ldrb	r2, [r3]
   2bf8c:	e5d30002 	ldrb	r0, [r3, #2]
   2bf90:	e1822401 	orr	r2, r2, r1, lsl #8
   2bf94:	e5d31003 	ldrb	r1, [r3, #3]
   2bf98:	e1822800 	orr	r2, r2, r0, lsl #16
   2bf9c:	e1922c01 	orrs	r2, r2, r1, lsl #24
   2bfa0:	0a00000d 	beq	2bfdc <CInterruptSystem::DisconnectFIQ()+0x5c>
   2bfa4:	e3a02000 	mov	r2, #0
   2bfa8:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   2bfac:	e59f1040 	ldr	r1, [pc, #64]	; 2bff4 <CInterruptSystem::DisconnectFIQ()+0x74>
   2bfb0:	e581220c 	str	r2, [r1, #524]	; 0x20c
   2bfb4:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   2bfb8:	e5c32000 	strb	r2, [r3]
   2bfbc:	e5c32001 	strb	r2, [r3, #1]
   2bfc0:	e5c32002 	strb	r2, [r3, #2]
   2bfc4:	e5c32003 	strb	r2, [r3, #3]
   2bfc8:	e5c32004 	strb	r2, [r3, #4]
   2bfcc:	e5c32005 	strb	r2, [r3, #5]
   2bfd0:	e5c32006 	strb	r2, [r3, #6]
   2bfd4:	e5c32007 	strb	r2, [r3, #7]
   2bfd8:	e12fff1e 	bx	lr
   2bfdc:	e3a0209b 	mov	r2, #155	; 0x9b
   2bfe0:	e92d4010 	push	{r4, lr}
   2bfe4:	e59f100c 	ldr	r1, [pc, #12]	; 2bff8 <CInterruptSystem::DisconnectFIQ()+0x78>
   2bfe8:	e59f000c 	ldr	r0, [pc, #12]	; 2bffc <CInterruptSystem::DisconnectFIQ()+0x7c>
   2bfec:	ebffe1ed 	bl	247a8 <assertion_failed>
   2bff0:	0004a38c 	.word	0x0004a38c
   2bff4:	2000b000 	.word	0x2000b000
   2bff8:	000475f4 	.word	0x000475f4
   2bffc:	00047630 	.word	0x00047630

0002c000 <CInterruptSystem::EnableIRQ(unsigned int)>:
   2c000:	e3a03000 	mov	r3, #0
   2c004:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c008:	e3500047 	cmp	r0, #71	; 0x47
   2c00c:	8a00000e 	bhi	2c04c <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
   2c010:	e350001f 	cmp	r0, #31
   2c014:	8a000007 	bhi	2c038 <CInterruptSystem::EnableIRQ(unsigned int)+0x38>
   2c018:	e59f2040 	ldr	r2, [pc, #64]	; 2c060 <CInterruptSystem::EnableIRQ(unsigned int)+0x60>
   2c01c:	e3a03001 	mov	r3, #1
   2c020:	e200001f 	and	r0, r0, #31
   2c024:	e1a00013 	lsl	r0, r3, r0
   2c028:	e5820000 	str	r0, [r2]
   2c02c:	e3a03000 	mov	r3, #0
   2c030:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c034:	e12fff1e 	bx	lr
   2c038:	e59f3024 	ldr	r3, [pc, #36]	; 2c064 <CInterruptSystem::EnableIRQ(unsigned int)+0x64>
   2c03c:	e350003f 	cmp	r0, #63	; 0x3f
   2c040:	e59f2020 	ldr	r2, [pc, #32]	; 2c068 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
   2c044:	81a02003 	movhi	r2, r3
   2c048:	eafffff3 	b	2c01c <CInterruptSystem::EnableIRQ(unsigned int)+0x1c>
   2c04c:	e3a020a7 	mov	r2, #167	; 0xa7
   2c050:	e92d4010 	push	{r4, lr}
   2c054:	e59f1010 	ldr	r1, [pc, #16]	; 2c06c <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   2c058:	e59f0010 	ldr	r0, [pc, #16]	; 2c070 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   2c05c:	ebffe1d1 	bl	247a8 <assertion_failed>
   2c060:	2000b210 	.word	0x2000b210
   2c064:	2000b218 	.word	0x2000b218
   2c068:	2000b214 	.word	0x2000b214
   2c06c:	000475f4 	.word	0x000475f4
   2c070:	00047648 	.word	0x00047648

0002c074 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   2c074:	e3510047 	cmp	r1, #71	; 0x47
   2c078:	e92d4010 	push	{r4, lr}
   2c07c:	8a000008 	bhi	2c0a4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x30>
   2c080:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   2c084:	e080e101 	add	lr, r0, r1, lsl #2
   2c088:	e35c0000 	cmp	ip, #0
   2c08c:	1a000008 	bne	2c0b4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x40>
   2c090:	e7802101 	str	r2, [r0, r1, lsl #2]
   2c094:	e58e3120 	str	r3, [lr, #288]	; 0x120
   2c098:	e1a00001 	mov	r0, r1
   2c09c:	e8bd4010 	pop	{r4, lr}
   2c0a0:	eaffffd6 	b	2c000 <CInterruptSystem::EnableIRQ(unsigned int)>
   2c0a4:	e3a02076 	mov	r2, #118	; 0x76
   2c0a8:	e59f1014 	ldr	r1, [pc, #20]	; 2c0c4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   2c0ac:	e59f0014 	ldr	r0, [pc, #20]	; 2c0c8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x54>
   2c0b0:	ebffe1bc 	bl	247a8 <assertion_failed>
   2c0b4:	e3a02077 	mov	r2, #119	; 0x77
   2c0b8:	e59f1004 	ldr	r1, [pc, #4]	; 2c0c4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   2c0bc:	e59f0008 	ldr	r0, [pc, #8]	; 2c0cc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
   2c0c0:	ebffe1b8 	bl	247a8 <assertion_failed>
   2c0c4:	000475f4 	.word	0x000475f4
   2c0c8:	00047648 	.word	0x00047648
   2c0cc:	0004765c 	.word	0x0004765c

0002c0d0 <CInterruptSystem::DisableIRQ(unsigned int)>:
   2c0d0:	e3a03000 	mov	r3, #0
   2c0d4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c0d8:	e3500047 	cmp	r0, #71	; 0x47
   2c0dc:	8a00000e 	bhi	2c11c <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
   2c0e0:	e350001f 	cmp	r0, #31
   2c0e4:	8a000007 	bhi	2c108 <CInterruptSystem::DisableIRQ(unsigned int)+0x38>
   2c0e8:	e59f2040 	ldr	r2, [pc, #64]	; 2c130 <CInterruptSystem::DisableIRQ(unsigned int)+0x60>
   2c0ec:	e3a03001 	mov	r3, #1
   2c0f0:	e200001f 	and	r0, r0, #31
   2c0f4:	e1a00013 	lsl	r0, r3, r0
   2c0f8:	e5820000 	str	r0, [r2]
   2c0fc:	e3a03000 	mov	r3, #0
   2c100:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c104:	e12fff1e 	bx	lr
   2c108:	e59f3024 	ldr	r3, [pc, #36]	; 2c134 <CInterruptSystem::DisableIRQ(unsigned int)+0x64>
   2c10c:	e350003f 	cmp	r0, #63	; 0x3f
   2c110:	e59f2020 	ldr	r2, [pc, #32]	; 2c138 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
   2c114:	81a02003 	movhi	r2, r3
   2c118:	eafffff3 	b	2c0ec <CInterruptSystem::DisableIRQ(unsigned int)+0x1c>
   2c11c:	e3a020bf 	mov	r2, #191	; 0xbf
   2c120:	e92d4010 	push	{r4, lr}
   2c124:	e59f1010 	ldr	r1, [pc, #16]	; 2c13c <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   2c128:	e59f0010 	ldr	r0, [pc, #16]	; 2c140 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   2c12c:	ebffe19d 	bl	247a8 <assertion_failed>
   2c130:	2000b21c 	.word	0x2000b21c
   2c134:	2000b224 	.word	0x2000b224
   2c138:	2000b220 	.word	0x2000b220
   2c13c:	000475f4 	.word	0x000475f4
   2c140:	00047648 	.word	0x00047648

0002c144 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   2c144:	e3510047 	cmp	r1, #71	; 0x47
   2c148:	e92d4070 	push	{r4, r5, r6, lr}
   2c14c:	8a00000b 	bhi	2c180 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   2c150:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   2c154:	e1a04001 	mov	r4, r1
   2c158:	e3530000 	cmp	r3, #0
   2c15c:	e1a05000 	mov	r5, r0
   2c160:	e0806101 	add	r6, r0, r1, lsl #2
   2c164:	0a000009 	beq	2c190 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>
   2c168:	e1a00001 	mov	r0, r1
   2c16c:	ebffffd7 	bl	2c0d0 <CInterruptSystem::DisableIRQ(unsigned int)>
   2c170:	e3a03000 	mov	r3, #0
   2c174:	e7853104 	str	r3, [r5, r4, lsl #2]
   2c178:	e5863120 	str	r3, [r6, #288]	; 0x120
   2c17c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c180:	e3a02081 	mov	r2, #129	; 0x81
   2c184:	e59f1014 	ldr	r1, [pc, #20]	; 2c1a0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   2c188:	e59f0014 	ldr	r0, [pc, #20]	; 2c1a4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x60>
   2c18c:	ebffe185 	bl	247a8 <assertion_failed>
   2c190:	e3a02082 	mov	r2, #130	; 0x82
   2c194:	e59f1004 	ldr	r1, [pc, #4]	; 2c1a0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   2c198:	e59f0008 	ldr	r0, [pc, #8]	; 2c1a8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
   2c19c:	ebffe181 	bl	247a8 <assertion_failed>
   2c1a0:	000475f4 	.word	0x000475f4
   2c1a4:	00047648 	.word	0x00047648
   2c1a8:	00047678 	.word	0x00047678

0002c1ac <CInterruptSystem::EnableFIQ(unsigned int)>:
   2c1ac:	e3a03000 	mov	r3, #0
   2c1b0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c1b4:	e3500047 	cmp	r0, #71	; 0x47
   2c1b8:	8a000004 	bhi	2c1d0 <CInterruptSystem::EnableFIQ(unsigned int)+0x24>
   2c1bc:	e59f2020 	ldr	r2, [pc, #32]	; 2c1e4 <CInterruptSystem::EnableFIQ(unsigned int)+0x38>
   2c1c0:	e3800080 	orr	r0, r0, #128	; 0x80
   2c1c4:	e582020c 	str	r0, [r2, #524]	; 0x20c
   2c1c8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c1cc:	e12fff1e 	bx	lr
   2c1d0:	e3a020d7 	mov	r2, #215	; 0xd7
   2c1d4:	e92d4010 	push	{r4, lr}
   2c1d8:	e59f1008 	ldr	r1, [pc, #8]	; 2c1e8 <CInterruptSystem::EnableFIQ(unsigned int)+0x3c>
   2c1dc:	e59f0008 	ldr	r0, [pc, #8]	; 2c1ec <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
   2c1e0:	ebffe170 	bl	247a8 <assertion_failed>
   2c1e4:	2000b000 	.word	0x2000b000
   2c1e8:	000475f4 	.word	0x000475f4
   2c1ec:	00047604 	.word	0x00047604

0002c1f0 <CInterruptSystem::DisableFIQ()>:
   2c1f0:	e3a03000 	mov	r3, #0
   2c1f4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c1f8:	e59f2008 	ldr	r2, [pc, #8]	; 2c208 <CInterruptSystem::DisableFIQ()+0x18>
   2c1fc:	e582320c 	str	r3, [r2, #524]	; 0x20c
   2c200:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c204:	e12fff1e 	bx	lr
   2c208:	2000b000 	.word	0x2000b000

0002c20c <CInterruptSystem::Get()>:
   2c20c:	e59f301c 	ldr	r3, [pc, #28]	; 2c230 <CInterruptSystem::Get()+0x24>
   2c210:	e5930000 	ldr	r0, [r3]
   2c214:	e3500000 	cmp	r0, #0
   2c218:	112fff1e 	bxne	lr
   2c21c:	e3a020e9 	mov	r2, #233	; 0xe9
   2c220:	e92d4010 	push	{r4, lr}
   2c224:	e59f1008 	ldr	r1, [pc, #8]	; 2c234 <CInterruptSystem::Get()+0x28>
   2c228:	e59f0008 	ldr	r0, [pc, #8]	; 2c238 <CInterruptSystem::Get()+0x2c>
   2c22c:	ebffe15d 	bl	247a8 <assertion_failed>
   2c230:	0005ced0 	.word	0x0005ced0
   2c234:	000475f4 	.word	0x000475f4
   2c238:	00045380 	.word	0x00045380

0002c23c <CInterruptSystem::CallIRQHandler(unsigned int)>:
   2c23c:	e3510047 	cmp	r1, #71	; 0x47
   2c240:	e92d4010 	push	{r4, lr}
   2c244:	8a00000b 	bhi	2c278 <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   2c248:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   2c24c:	e0803101 	add	r3, r0, r1, lsl #2
   2c250:	e3540000 	cmp	r4, #0
   2c254:	0a000003 	beq	2c268 <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   2c258:	e5930120 	ldr	r0, [r3, #288]	; 0x120
   2c25c:	e12fff34 	blx	r4
   2c260:	e3a00001 	mov	r0, #1
   2c264:	e8bd8010 	pop	{r4, pc}
   2c268:	e1a00001 	mov	r0, r1
   2c26c:	ebffff97 	bl	2c0d0 <CInterruptSystem::DisableIRQ(unsigned int)>
   2c270:	e1a00004 	mov	r0, r4
   2c274:	e8bd8010 	pop	{r4, pc}
   2c278:	e3a020ef 	mov	r2, #239	; 0xef
   2c27c:	e59f1004 	ldr	r1, [pc, #4]	; 2c288 <CInterruptSystem::CallIRQHandler(unsigned int)+0x4c>
   2c280:	e59f0004 	ldr	r0, [pc, #4]	; 2c28c <CInterruptSystem::CallIRQHandler(unsigned int)+0x50>
   2c284:	ebffe147 	bl	247a8 <assertion_failed>
   2c288:	000475f4 	.word	0x000475f4
   2c28c:	00047648 	.word	0x00047648

0002c290 <CInterruptSystem::InterruptHandler()>:
   2c290:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2c294:	e59f80a4 	ldr	r8, [pc, #164]	; 2c340 <CInterruptSystem::InterruptHandler()+0xb0>
   2c298:	e24dd010 	sub	sp, sp, #16
   2c29c:	e5983000 	ldr	r3, [r8]
   2c2a0:	e3530000 	cmp	r3, #0
   2c2a4:	0a000021 	beq	2c330 <CInterruptSystem::InterruptHandler()+0xa0>
   2c2a8:	e3a06000 	mov	r6, #0
   2c2ac:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   2c2b0:	e59f308c 	ldr	r3, [pc, #140]	; 2c344 <CInterruptSystem::InterruptHandler()+0xb4>
   2c2b4:	e5932204 	ldr	r2, [r3, #516]	; 0x204
   2c2b8:	e58d2004 	str	r2, [sp, #4]
   2c2bc:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   2c2c0:	e58d2008 	str	r2, [sp, #8]
   2c2c4:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   2c2c8:	e6ef3073 	uxtb	r3, r3
   2c2cc:	e58d300c 	str	r3, [sp, #12]
   2c2d0:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   2c2d4:	e28d7004 	add	r7, sp, #4
   2c2d8:	e4974004 	ldr	r4, [r7], #4
   2c2dc:	e3540000 	cmp	r4, #0
   2c2e0:	1a000004 	bne	2c2f8 <CInterruptSystem::InterruptHandler()+0x68>
   2c2e4:	e2866001 	add	r6, r6, #1
   2c2e8:	e3560003 	cmp	r6, #3
   2c2ec:	1afffff9 	bne	2c2d8 <CInterruptSystem::InterruptHandler()+0x48>
   2c2f0:	e28dd010 	add	sp, sp, #16
   2c2f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c2f8:	e1a05286 	lsl	r5, r6, #5
   2c2fc:	ea000002 	b	2c30c <CInterruptSystem::InterruptHandler()+0x7c>
   2c300:	e1b040a4 	lsrs	r4, r4, #1
   2c304:	e2855001 	add	r5, r5, #1
   2c308:	0afffff5 	beq	2c2e4 <CInterruptSystem::InterruptHandler()+0x54>
   2c30c:	e3140001 	tst	r4, #1
   2c310:	0afffffa 	beq	2c300 <CInterruptSystem::InterruptHandler()+0x70>
   2c314:	e1a01005 	mov	r1, r5
   2c318:	e5980000 	ldr	r0, [r8]
   2c31c:	ebffffc6 	bl	2c23c <CInterruptSystem::CallIRQHandler(unsigned int)>
   2c320:	e3500000 	cmp	r0, #0
   2c324:	0afffff5 	beq	2c300 <CInterruptSystem::InterruptHandler()+0x70>
   2c328:	e28dd010 	add	sp, sp, #16
   2c32c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c330:	e59f2010 	ldr	r2, [pc, #16]	; 2c348 <CInterruptSystem::InterruptHandler()+0xb8>
   2c334:	e59f1010 	ldr	r1, [pc, #16]	; 2c34c <CInterruptSystem::InterruptHandler()+0xbc>
   2c338:	e59f0010 	ldr	r0, [pc, #16]	; 2c350 <CInterruptSystem::InterruptHandler()+0xc0>
   2c33c:	ebffe119 	bl	247a8 <assertion_failed>
   2c340:	0005ced0 	.word	0x0005ced0
   2c344:	2000b000 	.word	0x2000b000
   2c348:	00000102 	.word	0x00000102
   2c34c:	000475f4 	.word	0x000475f4
   2c350:	00045380 	.word	0x00045380

0002c354 <InterruptHandler>:
   2c354:	e92d4010 	push	{r4, lr}
   2c358:	e3a04000 	mov	r4, #0
   2c35c:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   2c360:	ebffffca 	bl	2c290 <CInterruptSystem::InterruptHandler()>
   2c364:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2c368:	e8bd8010 	pop	{r4, pc}

0002c36c <__cxa_pure_virtual>:
   2c36c:	e3a02018 	mov	r2, #24
   2c370:	e92d4010 	push	{r4, lr}
   2c374:	e59f1004 	ldr	r1, [pc, #4]	; 2c380 <__cxa_pure_virtual+0x14>
   2c378:	e59f0004 	ldr	r0, [pc, #4]	; 2c384 <__cxa_pure_virtual+0x18>
   2c37c:	ebffe109 	bl	247a8 <assertion_failed>
   2c380:	00047694 	.word	0x00047694
   2c384:	00041748 	.word	0x00041748

0002c388 <malloc>:
   2c388:	e59f300c 	ldr	r3, [pc, #12]	; 2c39c <malloc+0x14>
   2c38c:	e1a01000 	mov	r1, r0
   2c390:	e5930000 	ldr	r0, [r3]
   2c394:	e280000c 	add	r0, r0, #12
   2c398:	eafffb3e 	b	2b098 <CHeapAllocator::Allocate(unsigned int)>
   2c39c:	0005ce78 	.word	0x0005ce78

0002c3a0 <free>:
   2c3a0:	e59f300c 	ldr	r3, [pc, #12]	; 2c3b4 <free+0x14>
   2c3a4:	e1a01000 	mov	r1, r0
   2c3a8:	e5930000 	ldr	r0, [r3]
   2c3ac:	e280000c 	add	r0, r0, #12
   2c3b0:	eafffbb5 	b	2b28c <CHeapAllocator::Free(void*)>
   2c3b4:	0005ce78 	.word	0x0005ce78

0002c3b8 <calloc>:
   2c3b8:	e0010190 	mul	r1, r0, r1
   2c3bc:	e3510001 	cmp	r1, #1
   2c3c0:	e92d4070 	push	{r4, r5, r6, lr}
   2c3c4:	21a04001 	movcs	r4, r1
   2c3c8:	33a04001 	movcc	r4, #1
   2c3cc:	e1500004 	cmp	r0, r4
   2c3d0:	8a00000b 	bhi	2c404 <calloc+0x4c>
   2c3d4:	e59f3038 	ldr	r3, [pc, #56]	; 2c414 <calloc+0x5c>
   2c3d8:	e1a01004 	mov	r1, r4
   2c3dc:	e5930000 	ldr	r0, [r3]
   2c3e0:	e280000c 	add	r0, r0, #12
   2c3e4:	ebfffb2b 	bl	2b098 <CHeapAllocator::Allocate(unsigned int)>
   2c3e8:	e2505000 	subs	r5, r0, #0
   2c3ec:	0a000002 	beq	2c3fc <calloc+0x44>
   2c3f0:	e1a02004 	mov	r2, r4
   2c3f4:	e3a01000 	mov	r1, #0
   2c3f8:	ebfff6c3 	bl	29f0c <memset>
   2c3fc:	e1a00005 	mov	r0, r5
   2c400:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c404:	e59f100c 	ldr	r1, [pc, #12]	; 2c418 <calloc+0x60>
   2c408:	e3a0202b 	mov	r2, #43	; 0x2b
   2c40c:	e281000c 	add	r0, r1, #12
   2c410:	ebffe0e4 	bl	247a8 <assertion_failed>
   2c414:	0005ce78 	.word	0x0005ce78
   2c418:	000476a4 	.word	0x000476a4

0002c41c <realloc>:
   2c41c:	e59f3010 	ldr	r3, [pc, #16]	; 2c434 <realloc+0x18>
   2c420:	e1a02001 	mov	r2, r1
   2c424:	e5933000 	ldr	r3, [r3]
   2c428:	e1a01000 	mov	r1, r0
   2c42c:	e283000c 	add	r0, r3, #12
   2c430:	eafffbd8 	b	2b398 <CHeapAllocator::ReAllocate(void*, unsigned int)>
   2c434:	0005ce78 	.word	0x0005ce78

0002c438 <palloc>:
   2c438:	e59f3008 	ldr	r3, [pc, #8]	; 2c448 <palloc+0x10>
   2c43c:	e5930000 	ldr	r0, [r3]
   2c440:	e28000c8 	add	r0, r0, #200	; 0xc8
   2c444:	ea00027c 	b	2ce3c <CPageAllocator::Allocate()>
   2c448:	0005ce78 	.word	0x0005ce78

0002c44c <pfree>:
   2c44c:	e59f300c 	ldr	r3, [pc, #12]	; 2c460 <pfree+0x14>
   2c450:	e1a01000 	mov	r1, r0
   2c454:	e5930000 	ldr	r0, [r3]
   2c458:	e28000c8 	add	r0, r0, #200	; 0xc8
   2c45c:	ea0002a8 	b	2cf04 <CPageAllocator::Free(void*)>
   2c460:	0005ce78 	.word	0x0005ce78

0002c464 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   2c464:	e5801000 	str	r1, [r0]
   2c468:	e5c02004 	strb	r2, [r0, #4]
   2c46c:	e12fff1e 	bx	lr

0002c470 <CBcmMailBox::~CBcmMailBox()>:
   2c470:	e12fff1e 	bx	lr

0002c474 <CBcmMailBox::WriteRead(unsigned int)>:
   2c474:	e92d4070 	push	{r4, r5, r6, lr}
   2c478:	e3a03000 	mov	r3, #0
   2c47c:	e1a05000 	mov	r5, r0
   2c480:	e1a06001 	mov	r6, r1
   2c484:	e24dd008 	sub	sp, sp, #8
   2c488:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c48c:	e5d03004 	ldrb	r3, [r0, #4]
   2c490:	e3530000 	cmp	r3, #0
   2c494:	1a000003 	bne	2c4a8 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   2c498:	e59f30dc 	ldr	r3, [pc, #220]	; 2c57c <CBcmMailBox::WriteRead(unsigned int)+0x108>
   2c49c:	e5930000 	ldr	r0, [r3]
   2c4a0:	e3500000 	cmp	r0, #0
   2c4a4:	1a000027 	bne	2c548 <CBcmMailBox::WriteRead(unsigned int)+0xd4>
   2c4a8:	e59f40d0 	ldr	r4, [pc, #208]	; 2c580 <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2c4ac:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c4b0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c4b4:	1a000005 	bne	2c4d0 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   2c4b8:	e3a00014 	mov	r0, #20
   2c4bc:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2c4c0:	ebfff650 	bl	29e08 <CTimer::SimpleMsDelay(unsigned int)>
   2c4c4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c4c8:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c4cc:	0afffff9 	beq	2c4b8 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   2c4d0:	e59f00a8 	ldr	r0, [pc, #168]	; 2c580 <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2c4d4:	e59038b8 	ldr	r3, [r0, #2232]	; 0x8b8
   2c4d8:	e3530000 	cmp	r3, #0
   2c4dc:	bafffffc 	blt	2c4d4 <CBcmMailBox::WriteRead(unsigned int)+0x60>
   2c4e0:	e316000f 	tst	r6, #15
   2c4e4:	1a000020 	bne	2c56c <CBcmMailBox::WriteRead(unsigned int)+0xf8>
   2c4e8:	e5953000 	ldr	r3, [r5]
   2c4ec:	e59f208c 	ldr	r2, [pc, #140]	; 2c580 <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2c4f0:	e1866003 	orr	r6, r6, r3
   2c4f4:	e58068a0 	str	r6, [r0, #2208]	; 0x8a0
   2c4f8:	e5950000 	ldr	r0, [r5]
   2c4fc:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2c500:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c504:	1afffffc 	bne	2c4fc <CBcmMailBox::WriteRead(unsigned int)+0x88>
   2c508:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   2c50c:	e203100f 	and	r1, r3, #15
   2c510:	e1510000 	cmp	r1, r0
   2c514:	1afffff8 	bne	2c4fc <CBcmMailBox::WriteRead(unsigned int)+0x88>
   2c518:	e5d52004 	ldrb	r2, [r5, #4]
   2c51c:	e3c3000f 	bic	r0, r3, #15
   2c520:	e3520000 	cmp	r2, #0
   2c524:	1a000003 	bne	2c538 <CBcmMailBox::WriteRead(unsigned int)+0xc4>
   2c528:	e59f304c 	ldr	r3, [pc, #76]	; 2c57c <CBcmMailBox::WriteRead(unsigned int)+0x108>
   2c52c:	e5933000 	ldr	r3, [r3]
   2c530:	e3530000 	cmp	r3, #0
   2c534:	1a000005 	bne	2c550 <CBcmMailBox::WriteRead(unsigned int)+0xdc>
   2c538:	e3a03000 	mov	r3, #0
   2c53c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c540:	e28dd008 	add	sp, sp, #8
   2c544:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c548:	ebfffdcb 	bl	2bc7c <EnterCritical>
   2c54c:	eaffffd5 	b	2c4a8 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   2c550:	e58d0004 	str	r0, [sp, #4]
   2c554:	ebfffdf2 	bl	2bd24 <LeaveCritical>
   2c558:	e3a03000 	mov	r3, #0
   2c55c:	e59d0004 	ldr	r0, [sp, #4]
   2c560:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c564:	e28dd008 	add	sp, sp, #8
   2c568:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c56c:	e3a02062 	mov	r2, #98	; 0x62
   2c570:	e59f100c 	ldr	r1, [pc, #12]	; 2c584 <CBcmMailBox::WriteRead(unsigned int)+0x110>
   2c574:	e59f000c 	ldr	r0, [pc, #12]	; 2c588 <CBcmMailBox::WriteRead(unsigned int)+0x114>
   2c578:	ebffe08a 	bl	247a8 <assertion_failed>
   2c57c:	0005ced4 	.word	0x0005ced4
   2c580:	2000b000 	.word	0x2000b000
   2c584:	000476c4 	.word	0x000476c4
   2c588:	000476d4 	.word	0x000476d4

0002c58c <CBcmMailBox::Flush()>:
   2c58c:	e92d4010 	push	{r4, lr}
   2c590:	e59f4024 	ldr	r4, [pc, #36]	; 2c5bc <CBcmMailBox::Flush()+0x30>
   2c594:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c598:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c59c:	18bd8010 	popne	{r4, pc}
   2c5a0:	e3a00014 	mov	r0, #20
   2c5a4:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2c5a8:	ebfff616 	bl	29e08 <CTimer::SimpleMsDelay(unsigned int)>
   2c5ac:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c5b0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c5b4:	0afffff9 	beq	2c5a0 <CBcmMailBox::Flush()+0x14>
   2c5b8:	e8bd8010 	pop	{r4, pc}
   2c5bc:	2000b000 	.word	0x2000b000

0002c5c0 <CBcmMailBox::Read()>:
   2c5c0:	e59f2024 	ldr	r2, [pc, #36]	; 2c5ec <CBcmMailBox::Read()+0x2c>
   2c5c4:	e5901000 	ldr	r1, [r0]
   2c5c8:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2c5cc:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c5d0:	1afffffc 	bne	2c5c8 <CBcmMailBox::Read()+0x8>
   2c5d4:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   2c5d8:	e200300f 	and	r3, r0, #15
   2c5dc:	e1530001 	cmp	r3, r1
   2c5e0:	1afffff8 	bne	2c5c8 <CBcmMailBox::Read()+0x8>
   2c5e4:	e3c0000f 	bic	r0, r0, #15
   2c5e8:	e12fff1e 	bx	lr
   2c5ec:	2000b000 	.word	0x2000b000

0002c5f0 <CBcmMailBox::Write(unsigned int)>:
   2c5f0:	e59f2034 	ldr	r2, [pc, #52]	; 2c62c <CBcmMailBox::Write(unsigned int)+0x3c>
   2c5f4:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   2c5f8:	e3530000 	cmp	r3, #0
   2c5fc:	bafffffc 	blt	2c5f4 <CBcmMailBox::Write(unsigned int)+0x4>
   2c600:	e311000f 	tst	r1, #15
   2c604:	1a000003 	bne	2c618 <CBcmMailBox::Write(unsigned int)+0x28>
   2c608:	e5903000 	ldr	r3, [r0]
   2c60c:	e1811003 	orr	r1, r1, r3
   2c610:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   2c614:	e12fff1e 	bx	lr
   2c618:	e3a02062 	mov	r2, #98	; 0x62
   2c61c:	e92d4010 	push	{r4, lr}
   2c620:	e59f1008 	ldr	r1, [pc, #8]	; 2c630 <CBcmMailBox::Write(unsigned int)+0x40>
   2c624:	e59f0008 	ldr	r0, [pc, #8]	; 2c634 <CBcmMailBox::Write(unsigned int)+0x44>
   2c628:	ebffe05e 	bl	247a8 <assertion_failed>
   2c62c:	2000b000 	.word	0x2000b000
   2c630:	000476c4 	.word	0x000476c4
   2c634:	000476d4 	.word	0x000476d4

0002c638 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   2c638:	e3a02000 	mov	r2, #0
   2c63c:	e59f3004 	ldr	r3, [pc, #4]	; 2c648 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   2c640:	e5832000 	str	r2, [r3]
   2c644:	e12fff1e 	bx	lr
   2c648:	0005ced4 	.word	0x0005ced4
   2c64c:	00000000 	.word	0x00000000

0002c650 <DelayLoop>:
   2c650:	e1a01001 	mov	r1, r1
   2c654:	e1a02002 	mov	r2, r2
   2c658:	e2500001 	subs	r0, r0, #1
   2c65c:	8afffffb 	bhi	2c650 <DelayLoop>
   2c660:	e1a0f00e 	mov	pc, lr

0002c664 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   2c664:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2c668:	e3a0e000 	mov	lr, #0
   2c66c:	e1a03000 	mov	r3, r0
   2c670:	e1a0c00e 	mov	ip, lr
   2c674:	e5801000 	str	r1, [r0]
   2c678:	e28020dc 	add	r2, r0, #220	; 0xdc
   2c67c:	e5e3e004 	strb	lr, [r3, #4]!
   2c680:	e5a3c004 	str	ip, [r3, #4]!
   2c684:	e1530002 	cmp	r3, r2
   2c688:	1afffffc 	bne	2c680 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   2c68c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002c690 <CGPIOManager::~CGPIOManager()>:
   2c690:	e92d4010 	push	{r4, lr}
   2c694:	e2803004 	add	r3, r0, #4
   2c698:	e1a04000 	mov	r4, r0
   2c69c:	e28010dc 	add	r1, r0, #220	; 0xdc
   2c6a0:	ea000001 	b	2c6ac <CGPIOManager::~CGPIOManager()+0x1c>
   2c6a4:	e1530001 	cmp	r3, r1
   2c6a8:	0a000006 	beq	2c6c8 <CGPIOManager::~CGPIOManager()+0x38>
   2c6ac:	e5b32004 	ldr	r2, [r3, #4]!
   2c6b0:	e3520000 	cmp	r2, #0
   2c6b4:	0afffffa 	beq	2c6a4 <CGPIOManager::~CGPIOManager()+0x14>
   2c6b8:	e3a0202c 	mov	r2, #44	; 0x2c
   2c6bc:	e59f103c 	ldr	r1, [pc, #60]	; 2c700 <CGPIOManager::~CGPIOManager()+0x70>
   2c6c0:	e59f003c 	ldr	r0, [pc, #60]	; 2c704 <CGPIOManager::~CGPIOManager()+0x74>
   2c6c4:	ebffe037 	bl	247a8 <assertion_failed>
   2c6c8:	e5d43004 	ldrb	r3, [r4, #4]
   2c6cc:	e3530000 	cmp	r3, #0
   2c6d0:	0a000004 	beq	2c6e8 <CGPIOManager::~CGPIOManager()+0x58>
   2c6d4:	e5940000 	ldr	r0, [r4]
   2c6d8:	e3500000 	cmp	r0, #0
   2c6dc:	0a000003 	beq	2c6f0 <CGPIOManager::~CGPIOManager()+0x60>
   2c6e0:	e3a01034 	mov	r1, #52	; 0x34
   2c6e4:	ebfffe96 	bl	2c144 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2c6e8:	e1a00004 	mov	r0, r4
   2c6ec:	e8bd8010 	pop	{r4, pc}
   2c6f0:	e3a02032 	mov	r2, #50	; 0x32
   2c6f4:	e59f1004 	ldr	r1, [pc, #4]	; 2c700 <CGPIOManager::~CGPIOManager()+0x70>
   2c6f8:	e59f0008 	ldr	r0, [pc, #8]	; 2c708 <CGPIOManager::~CGPIOManager()+0x78>
   2c6fc:	ebffe029 	bl	247a8 <assertion_failed>
   2c700:	000476e8 	.word	0x000476e8
   2c704:	000476f8 	.word	0x000476f8
   2c708:	0004770c 	.word	0x0004770c

0002c70c <CGPIOManager::Initialize()>:
   2c70c:	e5d03004 	ldrb	r3, [r0, #4]
   2c710:	e92d4010 	push	{r4, lr}
   2c714:	e3530000 	cmp	r3, #0
   2c718:	1a00000a 	bne	2c748 <CGPIOManager::Initialize()+0x3c>
   2c71c:	e1a04000 	mov	r4, r0
   2c720:	e5900000 	ldr	r0, [r0]
   2c724:	e3500000 	cmp	r0, #0
   2c728:	0a00000a 	beq	2c758 <CGPIOManager::Initialize()+0x4c>
   2c72c:	e1a03004 	mov	r3, r4
   2c730:	e3a01034 	mov	r1, #52	; 0x34
   2c734:	e59f202c 	ldr	r2, [pc, #44]	; 2c768 <CGPIOManager::Initialize()+0x5c>
   2c738:	ebfffe4d 	bl	2c074 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2c73c:	e3a00001 	mov	r0, #1
   2c740:	e5c40004 	strb	r0, [r4, #4]
   2c744:	e8bd8010 	pop	{r4, pc}
   2c748:	e3a0203b 	mov	r2, #59	; 0x3b
   2c74c:	e59f1018 	ldr	r1, [pc, #24]	; 2c76c <CGPIOManager::Initialize()+0x60>
   2c750:	e59f0018 	ldr	r0, [pc, #24]	; 2c770 <CGPIOManager::Initialize()+0x64>
   2c754:	ebffe013 	bl	247a8 <assertion_failed>
   2c758:	e3a0203c 	mov	r2, #60	; 0x3c
   2c75c:	e59f1008 	ldr	r1, [pc, #8]	; 2c76c <CGPIOManager::Initialize()+0x60>
   2c760:	e59f000c 	ldr	r0, [pc, #12]	; 2c774 <CGPIOManager::Initialize()+0x68>
   2c764:	ebffe00f 	bl	247a8 <assertion_failed>
   2c768:	0002c968 	.word	0x0002c968
   2c76c:	000476e8 	.word	0x000476e8
   2c770:	00047720 	.word	0x00047720
   2c774:	0004770c 	.word	0x0004770c

0002c778 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   2c778:	e5d03004 	ldrb	r3, [r0, #4]
   2c77c:	e92d4010 	push	{r4, lr}
   2c780:	e3530000 	cmp	r3, #0
   2c784:	0a00000a 	beq	2c7b4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   2c788:	e3510000 	cmp	r1, #0
   2c78c:	0a00000c 	beq	2c7c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   2c790:	e5913004 	ldr	r3, [r1, #4]
   2c794:	e3530035 	cmp	r3, #53	; 0x35
   2c798:	8a00000d 	bhi	2c7d4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
   2c79c:	e0800103 	add	r0, r0, r3, lsl #2
   2c7a0:	e5903008 	ldr	r3, [r0, #8]
   2c7a4:	e3530000 	cmp	r3, #0
   2c7a8:	1a00000d 	bne	2c7e4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   2c7ac:	e5801008 	str	r1, [r0, #8]
   2c7b0:	e8bd8010 	pop	{r4, pc}
   2c7b4:	e3a02045 	mov	r2, #69	; 0x45
   2c7b8:	e59f1034 	ldr	r1, [pc, #52]	; 2c7f4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c7bc:	e59f0034 	ldr	r0, [pc, #52]	; 2c7f8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x80>
   2c7c0:	ebffdff8 	bl	247a8 <assertion_failed>
   2c7c4:	e3a02047 	mov	r2, #71	; 0x47
   2c7c8:	e59f1024 	ldr	r1, [pc, #36]	; 2c7f4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c7cc:	e59f0028 	ldr	r0, [pc, #40]	; 2c7fc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   2c7d0:	ebffdff4 	bl	247a8 <assertion_failed>
   2c7d4:	e3a02049 	mov	r2, #73	; 0x49
   2c7d8:	e59f1014 	ldr	r1, [pc, #20]	; 2c7f4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c7dc:	e59f001c 	ldr	r0, [pc, #28]	; 2c800 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x88>
   2c7e0:	ebffdff0 	bl	247a8 <assertion_failed>
   2c7e4:	e3a0204b 	mov	r2, #75	; 0x4b
   2c7e8:	e59f1004 	ldr	r1, [pc, #4]	; 2c7f4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c7ec:	e59f0010 	ldr	r0, [pc, #16]	; 2c804 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x8c>
   2c7f0:	ebffdfec 	bl	247a8 <assertion_failed>
   2c7f4:	000476e8 	.word	0x000476e8
   2c7f8:	00047734 	.word	0x00047734
   2c7fc:	00047744 	.word	0x00047744
   2c800:	00047750 	.word	0x00047750
   2c804:	000476f8 	.word	0x000476f8

0002c808 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   2c808:	e5d03004 	ldrb	r3, [r0, #4]
   2c80c:	e92d4010 	push	{r4, lr}
   2c810:	e3530000 	cmp	r3, #0
   2c814:	0a00000b 	beq	2c848 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   2c818:	e3510000 	cmp	r1, #0
   2c81c:	0a00000d 	beq	2c858 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x50>
   2c820:	e5913004 	ldr	r3, [r1, #4]
   2c824:	e3530035 	cmp	r3, #53	; 0x35
   2c828:	8a00000e 	bhi	2c868 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x60>
   2c82c:	e0800103 	add	r0, r0, r3, lsl #2
   2c830:	e5903008 	ldr	r3, [r0, #8]
   2c834:	e3530000 	cmp	r3, #0
   2c838:	0a00000e 	beq	2c878 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   2c83c:	e3a03000 	mov	r3, #0
   2c840:	e5803008 	str	r3, [r0, #8]
   2c844:	e8bd8010 	pop	{r4, pc}
   2c848:	e3a02052 	mov	r2, #82	; 0x52
   2c84c:	e59f1034 	ldr	r1, [pc, #52]	; 2c888 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c850:	e59f0034 	ldr	r0, [pc, #52]	; 2c88c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x84>
   2c854:	ebffdfd3 	bl	247a8 <assertion_failed>
   2c858:	e3a02054 	mov	r2, #84	; 0x54
   2c85c:	e59f1024 	ldr	r1, [pc, #36]	; 2c888 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c860:	e59f0028 	ldr	r0, [pc, #40]	; 2c890 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   2c864:	ebffdfcf 	bl	247a8 <assertion_failed>
   2c868:	e3a02056 	mov	r2, #86	; 0x56
   2c86c:	e59f1014 	ldr	r1, [pc, #20]	; 2c888 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c870:	e59f001c 	ldr	r0, [pc, #28]	; 2c894 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
   2c874:	ebffdfcb 	bl	247a8 <assertion_failed>
   2c878:	e3a02058 	mov	r2, #88	; 0x58
   2c87c:	e59f1004 	ldr	r1, [pc, #4]	; 2c888 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c880:	e59f0010 	ldr	r0, [pc, #16]	; 2c898 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   2c884:	ebffdfc7 	bl	247a8 <assertion_failed>
   2c888:	000476e8 	.word	0x000476e8
   2c88c:	00047734 	.word	0x00047734
   2c890:	00047744 	.word	0x00047744
   2c894:	00047750 	.word	0x00047750
   2c898:	00047764 	.word	0x00047764

0002c89c <CGPIOManager::InterruptHandler()>:
   2c89c:	e5d03004 	ldrb	r3, [r0, #4]
   2c8a0:	e92d4070 	push	{r4, r5, r6, lr}
   2c8a4:	e3530000 	cmp	r3, #0
   2c8a8:	0a000025 	beq	2c944 <CGPIOManager::InterruptHandler()+0xa8>
   2c8ac:	e3a04000 	mov	r4, #0
   2c8b0:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2c8b4:	e59f2098 	ldr	r2, [pc, #152]	; 2c954 <CGPIOManager::InterruptHandler()+0xb8>
   2c8b8:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   2c8bc:	ea000005 	b	2c8d8 <CGPIOManager::InterruptHandler()+0x3c>
   2c8c0:	e2844001 	add	r4, r4, #1
   2c8c4:	e314001f 	tst	r4, #31
   2c8c8:	11a030a3 	lsrne	r3, r3, #1
   2c8cc:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   2c8d0:	e3540036 	cmp	r4, #54	; 0x36
   2c8d4:	0a00000d 	beq	2c910 <CGPIOManager::InterruptHandler()+0x74>
   2c8d8:	e3130001 	tst	r3, #1
   2c8dc:	0afffff7 	beq	2c8c0 <CGPIOManager::InterruptHandler()+0x24>
   2c8e0:	e2843002 	add	r3, r4, #2
   2c8e4:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   2c8e8:	e3550000 	cmp	r5, #0
   2c8ec:	0a00000a 	beq	2c91c <CGPIOManager::InterruptHandler()+0x80>
   2c8f0:	e1a00005 	mov	r0, r5
   2c8f4:	ebffe5cb 	bl	26028 <CGPIOPin::InterruptHandler()>
   2c8f8:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   2c8fc:	e3530000 	cmp	r3, #0
   2c900:	1595100c 	ldrne	r1, [r5, #12]
   2c904:	15952008 	ldrne	r2, [r5, #8]
   2c908:	159f3048 	ldrne	r3, [pc, #72]	; 2c958 <CGPIOManager::InterruptHandler()+0xbc>
   2c90c:	17821003 	strne	r1, [r2, r3]
   2c910:	e3a03000 	mov	r3, #0
   2c914:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c918:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c91c:	e1a00004 	mov	r0, r4
   2c920:	ebffe5e1 	bl	260ac <CGPIOPin::DisableAllInterrupts(unsigned int)>
   2c924:	e3a02001 	mov	r2, #1
   2c928:	e59f302c 	ldr	r3, [pc, #44]	; 2c95c <CGPIOManager::InterruptHandler()+0xc0>
   2c92c:	e204101f 	and	r1, r4, #31
   2c930:	e08332a4 	add	r3, r3, r4, lsr #5
   2c934:	e1a03103 	lsl	r3, r3, #2
   2c938:	e1a02112 	lsl	r2, r2, r1
   2c93c:	e5832000 	str	r2, [r3]
   2c940:	eafffff2 	b	2c910 <CGPIOManager::InterruptHandler()+0x74>
   2c944:	e3a0205e 	mov	r2, #94	; 0x5e
   2c948:	e59f1010 	ldr	r1, [pc, #16]	; 2c960 <CGPIOManager::InterruptHandler()+0xc4>
   2c94c:	e59f0010 	ldr	r0, [pc, #16]	; 2c964 <CGPIOManager::InterruptHandler()+0xc8>
   2c950:	ebffdf94 	bl	247a8 <assertion_failed>
   2c954:	20200000 	.word	0x20200000
   2c958:	20200040 	.word	0x20200040
   2c95c:	08080010 	.word	0x08080010
   2c960:	000476e8 	.word	0x000476e8
   2c964:	00047734 	.word	0x00047734

0002c968 <CGPIOManager::InterruptStub(void*)>:
   2c968:	e3500000 	cmp	r0, #0
   2c96c:	0a000000 	beq	2c974 <CGPIOManager::InterruptStub(void*)+0xc>
   2c970:	eaffffc9 	b	2c89c <CGPIOManager::InterruptHandler()>
   2c974:	e3a0208e 	mov	r2, #142	; 0x8e
   2c978:	e92d4010 	push	{r4, lr}
   2c97c:	e59f1004 	ldr	r1, [pc, #4]	; 2c988 <CGPIOManager::InterruptStub(void*)+0x20>
   2c980:	e59f0004 	ldr	r0, [pc, #4]	; 2c98c <CGPIOManager::InterruptStub(void*)+0x24>
   2c984:	ebffdf87 	bl	247a8 <assertion_failed>
   2c988:	000476e8 	.word	0x000476e8
   2c98c:	00040c00 	.word	0x00040c00

0002c990 <CPtrList::CPtrList()>:
   2c990:	e3a02000 	mov	r2, #0
   2c994:	e5802000 	str	r2, [r0]
   2c998:	e12fff1e 	bx	lr

0002c99c <CPtrList::~CPtrList()>:
   2c99c:	e5903000 	ldr	r3, [r0]
   2c9a0:	e3530000 	cmp	r3, #0
   2c9a4:	012fff1e 	bxeq	lr
   2c9a8:	e3a0202a 	mov	r2, #42	; 0x2a
   2c9ac:	e92d4010 	push	{r4, lr}
   2c9b0:	e59f1004 	ldr	r1, [pc, #4]	; 2c9bc <CPtrList::~CPtrList()+0x20>
   2c9b4:	e59f0004 	ldr	r0, [pc, #4]	; 2c9c0 <CPtrList::~CPtrList()+0x24>
   2c9b8:	ebffdf7a 	bl	247a8 <assertion_failed>
   2c9bc:	00047778 	.word	0x00047778
   2c9c0:	00047784 	.word	0x00047784

0002c9c4 <CPtrList::GetFirst()>:
   2c9c4:	e5900000 	ldr	r0, [r0]
   2c9c8:	e12fff1e 	bx	lr

0002c9cc <CPtrList::GetNext(TPtrListElement*)>:
   2c9cc:	e3510000 	cmp	r1, #0
   2c9d0:	e92d4010 	push	{r4, lr}
   2c9d4:	0a000005 	beq	2c9f0 <CPtrList::GetNext(TPtrListElement*)+0x24>
   2c9d8:	e59f3030 	ldr	r3, [pc, #48]	; 2ca10 <CPtrList::GetNext(TPtrListElement*)+0x44>
   2c9dc:	e5912000 	ldr	r2, [r1]
   2c9e0:	e1520003 	cmp	r2, r3
   2c9e4:	1a000005 	bne	2ca00 <CPtrList::GetNext(TPtrListElement*)+0x34>
   2c9e8:	e5910008 	ldr	r0, [r1, #8]
   2c9ec:	e8bd8010 	pop	{r4, pc}
   2c9f0:	e3a02034 	mov	r2, #52	; 0x34
   2c9f4:	e59f1018 	ldr	r1, [pc, #24]	; 2ca14 <CPtrList::GetNext(TPtrListElement*)+0x48>
   2c9f8:	e59f0018 	ldr	r0, [pc, #24]	; 2ca18 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   2c9fc:	ebffdf69 	bl	247a8 <assertion_failed>
   2ca00:	e3a02035 	mov	r2, #53	; 0x35
   2ca04:	e59f1008 	ldr	r1, [pc, #8]	; 2ca14 <CPtrList::GetNext(TPtrListElement*)+0x48>
   2ca08:	e59f000c 	ldr	r0, [pc, #12]	; 2ca1c <CPtrList::GetNext(TPtrListElement*)+0x50>
   2ca0c:	ebffdf65 	bl	247a8 <assertion_failed>
   2ca10:	504c4d43 	.word	0x504c4d43
   2ca14:	00047778 	.word	0x00047778
   2ca18:	00047794 	.word	0x00047794
   2ca1c:	000477a4 	.word	0x000477a4

0002ca20 <CPtrList::GetPtr(TPtrListElement*)>:
   2ca20:	e3510000 	cmp	r1, #0
   2ca24:	e92d4010 	push	{r4, lr}
   2ca28:	0a000005 	beq	2ca44 <CPtrList::GetPtr(TPtrListElement*)+0x24>
   2ca2c:	e59f3030 	ldr	r3, [pc, #48]	; 2ca64 <CPtrList::GetPtr(TPtrListElement*)+0x44>
   2ca30:	e5912000 	ldr	r2, [r1]
   2ca34:	e1520003 	cmp	r2, r3
   2ca38:	1a000005 	bne	2ca54 <CPtrList::GetPtr(TPtrListElement*)+0x34>
   2ca3c:	e591000c 	ldr	r0, [r1, #12]
   2ca40:	e8bd8010 	pop	{r4, pc}
   2ca44:	e3a0203c 	mov	r2, #60	; 0x3c
   2ca48:	e59f1018 	ldr	r1, [pc, #24]	; 2ca68 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   2ca4c:	e59f0018 	ldr	r0, [pc, #24]	; 2ca6c <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   2ca50:	ebffdf54 	bl	247a8 <assertion_failed>
   2ca54:	e3a0203d 	mov	r2, #61	; 0x3d
   2ca58:	e59f1008 	ldr	r1, [pc, #8]	; 2ca68 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   2ca5c:	e59f000c 	ldr	r0, [pc, #12]	; 2ca70 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   2ca60:	ebffdf50 	bl	247a8 <assertion_failed>
   2ca64:	504c4d43 	.word	0x504c4d43
   2ca68:	00047778 	.word	0x00047778
   2ca6c:	00047794 	.word	0x00047794
   2ca70:	000477a4 	.word	0x000477a4

0002ca74 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   2ca74:	e92d4070 	push	{r4, r5, r6, lr}
   2ca78:	e1a05000 	mov	r5, r0
   2ca7c:	e3a00010 	mov	r0, #16
   2ca80:	e1a06002 	mov	r6, r2
   2ca84:	e1a04001 	mov	r4, r1
   2ca88:	ebfff94e 	bl	2afc8 <operator new(unsigned int)>
   2ca8c:	e5953000 	ldr	r3, [r5]
   2ca90:	e59f20ac 	ldr	r2, [pc, #172]	; 2cb44 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2ca94:	e3530000 	cmp	r3, #0
   2ca98:	e580600c 	str	r6, [r0, #12]
   2ca9c:	e5802000 	str	r2, [r0]
   2caa0:	0a000017 	beq	2cb04 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
   2caa4:	e3540000 	cmp	r4, #0
   2caa8:	0a000019 	beq	2cb14 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   2caac:	e5941000 	ldr	r1, [r4]
   2cab0:	e1510002 	cmp	r1, r2
   2cab4:	1a00001a 	bne	2cb24 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb0>
   2cab8:	e1530004 	cmp	r3, r4
   2cabc:	0a00000a 	beq	2caec <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   2cac0:	e5943004 	ldr	r3, [r4, #4]
   2cac4:	e5804008 	str	r4, [r0, #8]
   2cac8:	e3530000 	cmp	r3, #0
   2cacc:	e5803004 	str	r3, [r0, #4]
   2cad0:	0a000003 	beq	2cae4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   2cad4:	e5932000 	ldr	r2, [r3]
   2cad8:	e1520001 	cmp	r2, r1
   2cadc:	05830008 	streq	r0, [r3, #8]
   2cae0:	1a000013 	bne	2cb34 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   2cae4:	e5840004 	str	r0, [r4, #4]
   2cae8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2caec:	e3a02000 	mov	r2, #0
   2caf0:	e5830004 	str	r0, [r3, #4]
   2caf4:	e5803008 	str	r3, [r0, #8]
   2caf8:	e5850000 	str	r0, [r5]
   2cafc:	e5802004 	str	r2, [r0, #4]
   2cb00:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cb04:	e3a0204c 	mov	r2, #76	; 0x4c
   2cb08:	e59f1038 	ldr	r1, [pc, #56]	; 2cb48 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   2cb0c:	e59f0038 	ldr	r0, [pc, #56]	; 2cb4c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   2cb10:	ebffdf24 	bl	247a8 <assertion_failed>
   2cb14:	e3a0204d 	mov	r2, #77	; 0x4d
   2cb18:	e59f1028 	ldr	r1, [pc, #40]	; 2cb48 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   2cb1c:	e59f002c 	ldr	r0, [pc, #44]	; 2cb50 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xdc>
   2cb20:	ebffdf20 	bl	247a8 <assertion_failed>
   2cb24:	e3a0204e 	mov	r2, #78	; 0x4e
   2cb28:	e59f1018 	ldr	r1, [pc, #24]	; 2cb48 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   2cb2c:	e59f0020 	ldr	r0, [pc, #32]	; 2cb54 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   2cb30:	ebffdf1c 	bl	247a8 <assertion_failed>
   2cb34:	e3a02060 	mov	r2, #96	; 0x60
   2cb38:	e59f1008 	ldr	r1, [pc, #8]	; 2cb48 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   2cb3c:	e59f0014 	ldr	r0, [pc, #20]	; 2cb58 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe4>
   2cb40:	ebffdf18 	bl	247a8 <assertion_failed>
   2cb44:	504c4d43 	.word	0x504c4d43
   2cb48:	00047778 	.word	0x00047778
   2cb4c:	000477c8 	.word	0x000477c8
   2cb50:	000477d8 	.word	0x000477d8
   2cb54:	000477e4 	.word	0x000477e4
   2cb58:	00047808 	.word	0x00047808

0002cb5c <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   2cb5c:	e92d4070 	push	{r4, r5, r6, lr}
   2cb60:	e1a04001 	mov	r4, r1
   2cb64:	e1a05000 	mov	r5, r0
   2cb68:	e3a00010 	mov	r0, #16
   2cb6c:	e1a06002 	mov	r6, r2
   2cb70:	ebfff914 	bl	2afc8 <operator new(unsigned int)>
   2cb74:	e59f30ac 	ldr	r3, [pc, #172]	; 2cc28 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   2cb78:	e3540000 	cmp	r4, #0
   2cb7c:	e580600c 	str	r6, [r0, #12]
   2cb80:	e5803000 	str	r3, [r0]
   2cb84:	0a000010 	beq	2cbcc <CPtrList::InsertAfter(TPtrListElement*, void*)+0x70>
   2cb88:	e5952000 	ldr	r2, [r5]
   2cb8c:	e3520000 	cmp	r2, #0
   2cb90:	0a000014 	beq	2cbe8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x8c>
   2cb94:	e5942000 	ldr	r2, [r4]
   2cb98:	e1520003 	cmp	r2, r3
   2cb9c:	1a000015 	bne	2cbf8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   2cba0:	e5943008 	ldr	r3, [r4, #8]
   2cba4:	e5804004 	str	r4, [r0, #4]
   2cba8:	e3530000 	cmp	r3, #0
   2cbac:	e5803008 	str	r3, [r0, #8]
   2cbb0:	0a000003 	beq	2cbc4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x68>
   2cbb4:	e5931000 	ldr	r1, [r3]
   2cbb8:	e1510002 	cmp	r1, r2
   2cbbc:	05830004 	streq	r0, [r3, #4]
   2cbc0:	1a000010 	bne	2cc08 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xac>
   2cbc4:	e5840008 	str	r0, [r4, #8]
   2cbc8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cbcc:	e5953000 	ldr	r3, [r5]
   2cbd0:	e3530000 	cmp	r3, #0
   2cbd4:	1a00000f 	bne	2cc18 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   2cbd8:	e5803004 	str	r3, [r0, #4]
   2cbdc:	e5803008 	str	r3, [r0, #8]
   2cbe0:	e5850000 	str	r0, [r5]
   2cbe4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cbe8:	e3a0207d 	mov	r2, #125	; 0x7d
   2cbec:	e59f1038 	ldr	r1, [pc, #56]	; 2cc2c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2cbf0:	e59f0038 	ldr	r0, [pc, #56]	; 2cc30 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd4>
   2cbf4:	ebffdeeb 	bl	247a8 <assertion_failed>
   2cbf8:	e3a0207e 	mov	r2, #126	; 0x7e
   2cbfc:	e59f1028 	ldr	r1, [pc, #40]	; 2cc2c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2cc00:	e59f002c 	ldr	r0, [pc, #44]	; 2cc34 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   2cc04:	ebffdee7 	bl	247a8 <assertion_failed>
   2cc08:	e3a02085 	mov	r2, #133	; 0x85
   2cc0c:	e59f1018 	ldr	r1, [pc, #24]	; 2cc2c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2cc10:	e59f0020 	ldr	r0, [pc, #32]	; 2cc38 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   2cc14:	ebffdee3 	bl	247a8 <assertion_failed>
   2cc18:	e3a02074 	mov	r2, #116	; 0x74
   2cc1c:	e59f1008 	ldr	r1, [pc, #8]	; 2cc2c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2cc20:	e59f0014 	ldr	r0, [pc, #20]	; 2cc3c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   2cc24:	ebffdedf 	bl	247a8 <assertion_failed>
   2cc28:	504c4d43 	.word	0x504c4d43
   2cc2c:	00047778 	.word	0x00047778
   2cc30:	000477c8 	.word	0x000477c8
   2cc34:	00047830 	.word	0x00047830
   2cc38:	00047854 	.word	0x00047854
   2cc3c:	00047784 	.word	0x00047784

0002cc40 <CPtrList::Remove(TPtrListElement*)>:
   2cc40:	e3510000 	cmp	r1, #0
   2cc44:	e92d4010 	push	{r4, lr}
   2cc48:	0a000029 	beq	2ccf4 <CPtrList::Remove(TPtrListElement*)+0xb4>
   2cc4c:	e59f20e0 	ldr	r2, [pc, #224]	; 2cd34 <CPtrList::Remove(TPtrListElement*)+0xf4>
   2cc50:	e5913000 	ldr	r3, [r1]
   2cc54:	e1530002 	cmp	r3, r2
   2cc58:	1a000029 	bne	2cd04 <CPtrList::Remove(TPtrListElement*)+0xc4>
   2cc5c:	e5902000 	ldr	r2, [r0]
   2cc60:	e1520001 	cmp	r2, r1
   2cc64:	0a000011 	beq	2ccb0 <CPtrList::Remove(TPtrListElement*)+0x70>
   2cc68:	e5912004 	ldr	r2, [r1, #4]
   2cc6c:	e3520000 	cmp	r2, #0
   2cc70:	0a000027 	beq	2cd14 <CPtrList::Remove(TPtrListElement*)+0xd4>
   2cc74:	e5920000 	ldr	r0, [r2]
   2cc78:	e1500003 	cmp	r0, r3
   2cc7c:	1a000018 	bne	2cce4 <CPtrList::Remove(TPtrListElement*)+0xa4>
   2cc80:	e5913008 	ldr	r3, [r1, #8]
   2cc84:	e3530000 	cmp	r3, #0
   2cc88:	e5823008 	str	r3, [r2, #8]
   2cc8c:	0a000003 	beq	2cca0 <CPtrList::Remove(TPtrListElement*)+0x60>
   2cc90:	e593c000 	ldr	ip, [r3]
   2cc94:	e15c0000 	cmp	ip, r0
   2cc98:	05832004 	streq	r2, [r3, #4]
   2cc9c:	1a000020 	bne	2cd24 <CPtrList::Remove(TPtrListElement*)+0xe4>
   2cca0:	e8bd4010 	pop	{r4, lr}
   2cca4:	e1a00001 	mov	r0, r1
   2cca8:	e3a01010 	mov	r1, #16
   2ccac:	eafff8d3 	b	2b000 <operator delete(void*, unsigned int)>
   2ccb0:	e5922008 	ldr	r2, [r2, #8]
   2ccb4:	e3520000 	cmp	r2, #0
   2ccb8:	e5802000 	str	r2, [r0]
   2ccbc:	0afffff7 	beq	2cca0 <CPtrList::Remove(TPtrListElement*)+0x60>
   2ccc0:	e5920000 	ldr	r0, [r2]
   2ccc4:	e1500003 	cmp	r0, r3
   2ccc8:	03a03000 	moveq	r3, #0
   2cccc:	05823004 	streq	r3, [r2, #4]
   2ccd0:	0afffff2 	beq	2cca0 <CPtrList::Remove(TPtrListElement*)+0x60>
   2ccd4:	e3a02098 	mov	r2, #152	; 0x98
   2ccd8:	e59f1058 	ldr	r1, [pc, #88]	; 2cd38 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2ccdc:	e59f0058 	ldr	r0, [pc, #88]	; 2cd3c <CPtrList::Remove(TPtrListElement*)+0xfc>
   2cce0:	ebffdeb0 	bl	247a8 <assertion_failed>
   2cce4:	e3a0209f 	mov	r2, #159	; 0x9f
   2cce8:	e59f1048 	ldr	r1, [pc, #72]	; 2cd38 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2ccec:	e59f004c 	ldr	r0, [pc, #76]	; 2cd40 <CPtrList::Remove(TPtrListElement*)+0x100>
   2ccf0:	ebffdeac 	bl	247a8 <assertion_failed>
   2ccf4:	e3a0208f 	mov	r2, #143	; 0x8f
   2ccf8:	e59f1038 	ldr	r1, [pc, #56]	; 2cd38 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2ccfc:	e59f0040 	ldr	r0, [pc, #64]	; 2cd44 <CPtrList::Remove(TPtrListElement*)+0x104>
   2cd00:	ebffdea8 	bl	247a8 <assertion_failed>
   2cd04:	e3a02090 	mov	r2, #144	; 0x90
   2cd08:	e59f1028 	ldr	r1, [pc, #40]	; 2cd38 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2cd0c:	e59f0034 	ldr	r0, [pc, #52]	; 2cd48 <CPtrList::Remove(TPtrListElement*)+0x108>
   2cd10:	ebffdea4 	bl	247a8 <assertion_failed>
   2cd14:	e3a0209e 	mov	r2, #158	; 0x9e
   2cd18:	e59f1018 	ldr	r1, [pc, #24]	; 2cd38 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2cd1c:	e59f0028 	ldr	r0, [pc, #40]	; 2cd4c <CPtrList::Remove(TPtrListElement*)+0x10c>
   2cd20:	ebffdea0 	bl	247a8 <assertion_failed>
   2cd24:	e3a020a4 	mov	r2, #164	; 0xa4
   2cd28:	e59f1008 	ldr	r1, [pc, #8]	; 2cd38 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2cd2c:	e59f0008 	ldr	r0, [pc, #8]	; 2cd3c <CPtrList::Remove(TPtrListElement*)+0xfc>
   2cd30:	ebffde9c 	bl	247a8 <assertion_failed>
   2cd34:	504c4d43 	.word	0x504c4d43
   2cd38:	00047778 	.word	0x00047778
   2cd3c:	00047880 	.word	0x00047880
   2cd40:	000478c4 	.word	0x000478c4
   2cd44:	00047794 	.word	0x00047794
   2cd48:	000477a4 	.word	0x000477a4
   2cd4c:	000478ac 	.word	0x000478ac

0002cd50 <CPtrList::Find(void*)>:
   2cd50:	e5900000 	ldr	r0, [r0]
   2cd54:	e3500000 	cmp	r0, #0
   2cd58:	012fff1e 	bxeq	lr
   2cd5c:	e59f2038 	ldr	r2, [pc, #56]	; 2cd9c <CPtrList::Find(void*)+0x4c>
   2cd60:	ea000005 	b	2cd7c <CPtrList::Find(void*)+0x2c>
   2cd64:	e590300c 	ldr	r3, [r0, #12]
   2cd68:	e1530001 	cmp	r3, r1
   2cd6c:	012fff1e 	bxeq	lr
   2cd70:	e5900008 	ldr	r0, [r0, #8]
   2cd74:	e3500000 	cmp	r0, #0
   2cd78:	012fff1e 	bxeq	lr
   2cd7c:	e5903000 	ldr	r3, [r0]
   2cd80:	e1530002 	cmp	r3, r2
   2cd84:	0afffff6 	beq	2cd64 <CPtrList::Find(void*)+0x14>
   2cd88:	e3a020b3 	mov	r2, #179	; 0xb3
   2cd8c:	e92d4010 	push	{r4, lr}
   2cd90:	e59f1008 	ldr	r1, [pc, #8]	; 2cda0 <CPtrList::Find(void*)+0x50>
   2cd94:	e59f0008 	ldr	r0, [pc, #8]	; 2cda4 <CPtrList::Find(void*)+0x54>
   2cd98:	ebffde82 	bl	247a8 <assertion_failed>
   2cd9c:	504c4d43 	.word	0x504c4d43
   2cda0:	00047778 	.word	0x00047778
   2cda4:	000477a4 	.word	0x000477a4

0002cda8 <CPageAllocator::CPageAllocator()>:
   2cda8:	e3a02000 	mov	r2, #0
   2cdac:	e3a01001 	mov	r1, #1
   2cdb0:	e5802000 	str	r2, [r0]
   2cdb4:	e580100c 	str	r1, [r0, #12]
   2cdb8:	e5802004 	str	r2, [r0, #4]
   2cdbc:	e5802008 	str	r2, [r0, #8]
   2cdc0:	e12fff1e 	bx	lr

0002cdc4 <CPageAllocator::~CPageAllocator()>:
   2cdc4:	e12fff1e 	bx	lr

0002cdc8 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   2cdc8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2cdcc:	e28db000 	add	fp, sp, #0
   2cdd0:	e24dd014 	sub	sp, sp, #20
   2cdd4:	e50b0008 	str	r0, [fp, #-8]
   2cdd8:	e50b100c 	str	r1, [fp, #-12]
   2cddc:	e50b2010 	str	r2, [fp, #-16]
   2cde0:	e51b300c 	ldr	r3, [fp, #-12]
   2cde4:	e2833eff 	add	r3, r3, #4080	; 0xff0
   2cde8:	e283300f 	add	r3, r3, #15
   2cdec:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2cdf0:	e3c3300f 	bic	r3, r3, #15
   2cdf4:	e1a02003 	mov	r2, r3
   2cdf8:	e51b3008 	ldr	r3, [fp, #-8]
   2cdfc:	e5832000 	str	r2, [r3]
   2ce00:	e51b200c 	ldr	r2, [fp, #-12]
   2ce04:	e51b3010 	ldr	r3, [fp, #-16]
   2ce08:	e0823003 	add	r3, r2, r3
   2ce0c:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2ce10:	e3c3300f 	bic	r3, r3, #15
   2ce14:	e1a02003 	mov	r2, r3
   2ce18:	e51b3008 	ldr	r3, [fp, #-8]
   2ce1c:	e5832004 	str	r2, [r3, #4]
   2ce20:	e320f000 	nop	{0}
   2ce24:	e28bd000 	add	sp, fp, #0
   2ce28:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2ce2c:	e12fff1e 	bx	lr

0002ce30 <CPageAllocator::GetFreeSpace() const>:
   2ce30:	e8900005 	ldm	r0, {r0, r2}
   2ce34:	e0420000 	sub	r0, r2, r0
   2ce38:	e12fff1e 	bx	lr

0002ce3c <CPageAllocator::Allocate()>:
   2ce3c:	e5903000 	ldr	r3, [r0]
   2ce40:	e92d4070 	push	{r4, r5, r6, lr}
   2ce44:	e3530000 	cmp	r3, #0
   2ce48:	0a000023 	beq	2cedc <CPageAllocator::Allocate()+0xa0>
   2ce4c:	e1a04000 	mov	r4, r0
   2ce50:	e590000c 	ldr	r0, [r0, #12]
   2ce54:	e3500000 	cmp	r0, #0
   2ce58:	1a00000f 	bne	2ce9c <CPageAllocator::Allocate()+0x60>
   2ce5c:	e5945008 	ldr	r5, [r4, #8]
   2ce60:	e3550000 	cmp	r5, #0
   2ce64:	0a000010 	beq	2ceac <CPageAllocator::Allocate()+0x70>
   2ce68:	e59f308c 	ldr	r3, [pc, #140]	; 2cefc <CPageAllocator::Allocate()+0xc0>
   2ce6c:	e5952000 	ldr	r2, [r5]
   2ce70:	e1520003 	cmp	r2, r3
   2ce74:	1a00001c 	bne	2ceec <CPageAllocator::Allocate()+0xb0>
   2ce78:	e3a03000 	mov	r3, #0
   2ce7c:	e5952004 	ldr	r2, [r5, #4]
   2ce80:	e5842008 	str	r2, [r4, #8]
   2ce84:	e5853000 	str	r3, [r5]
   2ce88:	e594300c 	ldr	r3, [r4, #12]
   2ce8c:	e3530000 	cmp	r3, #0
   2ce90:	1a00000e 	bne	2ced0 <CPageAllocator::Allocate()+0x94>
   2ce94:	e1a00005 	mov	r0, r5
   2ce98:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ce9c:	ebfffb76 	bl	2bc7c <EnterCritical>
   2cea0:	e5945008 	ldr	r5, [r4, #8]
   2cea4:	e3550000 	cmp	r5, #0
   2cea8:	1affffee 	bne	2ce68 <CPageAllocator::Allocate()+0x2c>
   2ceac:	e5942000 	ldr	r2, [r4]
   2ceb0:	e5941004 	ldr	r1, [r4, #4]
   2ceb4:	e2823a01 	add	r3, r2, #4096	; 0x1000
   2ceb8:	e1530001 	cmp	r3, r1
   2cebc:	e5843000 	str	r3, [r4]
   2cec0:	e594300c 	ldr	r3, [r4, #12]
   2cec4:	91a05002 	movls	r5, r2
   2cec8:	e3530000 	cmp	r3, #0
   2cecc:	0afffff0 	beq	2ce94 <CPageAllocator::Allocate()+0x58>
   2ced0:	ebfffb93 	bl	2bd24 <LeaveCritical>
   2ced4:	e1a00005 	mov	r0, r5
   2ced8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cedc:	e59f101c 	ldr	r1, [pc, #28]	; 2cf00 <CPageAllocator::Allocate()+0xc4>
   2cee0:	e3a02036 	mov	r2, #54	; 0x36
   2cee4:	e2810014 	add	r0, r1, #20
   2cee8:	ebffde2e 	bl	247a8 <assertion_failed>
   2ceec:	e59f100c 	ldr	r1, [pc, #12]	; 2cf00 <CPageAllocator::Allocate()+0xc4>
   2cef0:	e3a02044 	mov	r2, #68	; 0x44
   2cef4:	e2810024 	add	r0, r1, #36	; 0x24
   2cef8:	ebffde2a 	bl	247a8 <assertion_failed>
   2cefc:	50474d43 	.word	0x50474d43
   2cf00:	000478f0 	.word	0x000478f0

0002cf04 <CPageAllocator::Free(void*)>:
   2cf04:	e92d4070 	push	{r4, r5, r6, lr}
   2cf08:	e2514000 	subs	r4, r1, #0
   2cf0c:	08bd8070 	popeq	{r4, r5, r6, pc}
   2cf10:	e1a05000 	mov	r5, r0
   2cf14:	e590000c 	ldr	r0, [r0, #12]
   2cf18:	e3500000 	cmp	r0, #0
   2cf1c:	1a000009 	bne	2cf48 <CPageAllocator::Free(void*)+0x44>
   2cf20:	e59f3028 	ldr	r3, [pc, #40]	; 2cf50 <CPageAllocator::Free(void*)+0x4c>
   2cf24:	e5952008 	ldr	r2, [r5, #8]
   2cf28:	e5843000 	str	r3, [r4]
   2cf2c:	e595300c 	ldr	r3, [r5, #12]
   2cf30:	e5842004 	str	r2, [r4, #4]
   2cf34:	e3530000 	cmp	r3, #0
   2cf38:	e5854008 	str	r4, [r5, #8]
   2cf3c:	08bd8070 	popeq	{r4, r5, r6, pc}
   2cf40:	e8bd4070 	pop	{r4, r5, r6, lr}
   2cf44:	eafffb76 	b	2bd24 <LeaveCritical>
   2cf48:	ebfffb4b 	bl	2bc7c <EnterCritical>
   2cf4c:	eafffff3 	b	2cf20 <CPageAllocator::Free(void*)+0x1c>
   2cf50:	50474d43 	.word	0x50474d43

0002cf54 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   2cf54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cf58:	e1a04000 	mov	r4, r0
   2cf5c:	e3a0b000 	mov	fp, #0
   2cf60:	e1a07001 	mov	r7, r1
   2cf64:	e1a06002 	mov	r6, r2
   2cf68:	e1a05003 	mov	r5, r3
   2cf6c:	e24dd00c 	sub	sp, sp, #12
   2cf70:	e280a018 	add	sl, r0, #24
   2cf74:	ebffdff2 	bl	24f44 <CDevice::CDevice()>
   2cf78:	e59f31cc 	ldr	r3, [pc, #460]	; 2d14c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1f8>
   2cf7c:	e5847004 	str	r7, [r4, #4]
   2cf80:	e5843000 	str	r3, [r4]
   2cf84:	e1a0000a 	mov	r0, sl
   2cf88:	e2849040 	add	r9, r4, #64	; 0x40
   2cf8c:	e5c46008 	strb	r6, [r4, #8]
   2cf90:	e584500c 	str	r5, [r4, #12]
   2cf94:	e584b010 	str	fp, [r4, #16]
   2cf98:	e5c4b014 	strb	fp, [r4, #20]
   2cf9c:	ebffe15e 	bl	2551c <CGPIOPin::CGPIOPin()>
   2cfa0:	e2848068 	add	r8, r4, #104	; 0x68
   2cfa4:	e1a00009 	mov	r0, r9
   2cfa8:	ebffe15b 	bl	2551c <CGPIOPin::CGPIOPin()>
   2cfac:	e2847090 	add	r7, r4, #144	; 0x90
   2cfb0:	e1a00008 	mov	r0, r8
   2cfb4:	ebffe158 	bl	2551c <CGPIOPin::CGPIOPin()>
   2cfb8:	e1a00007 	mov	r0, r7
   2cfbc:	ebffe156 	bl	2551c <CGPIOPin::CGPIOPin()>
   2cfc0:	e156000b 	cmp	r6, fp
   2cfc4:	13a00002 	movne	r0, #2
   2cfc8:	03a00001 	moveq	r0, #1
   2cfcc:	e3a02001 	mov	r2, #1
   2cfd0:	e2841901 	add	r1, r4, #16384	; 0x4000
   2cfd4:	e584b0bc 	str	fp, [r4, #188]	; 0xbc
   2cfd8:	e584b0b8 	str	fp, [r4, #184]	; 0xb8
   2cfdc:	e584b0c0 	str	fp, [r4, #192]	; 0xc0
   2cfe0:	e584b0c4 	str	fp, [r4, #196]	; 0xc4
   2cfe4:	e584b0d0 	str	fp, [r4, #208]	; 0xd0
   2cfe8:	e1c4bcb8 	strh	fp, [r4, #200]	; 0xc8
   2cfec:	e584b0cc 	str	fp, [r4, #204]	; 0xcc
   2cff0:	e584b0d8 	str	fp, [r4, #216]	; 0xd8
   2cff4:	e584b0d4 	str	fp, [r4, #212]	; 0xd4
   2cff8:	e5c4b0dc 	strb	fp, [r4, #220]	; 0xdc
   2cffc:	e584b0f4 	str	fp, [r4, #244]	; 0xf4
   2d000:	e584b0e4 	str	fp, [r4, #228]	; 0xe4
   2d004:	e584b0e8 	str	fp, [r4, #232]	; 0xe8
   2d008:	e584b0ec 	str	fp, [r4, #236]	; 0xec
   2d00c:	e584b0f0 	str	fp, [r4, #240]	; 0xf0
   2d010:	e584b0e0 	str	fp, [r4, #224]	; 0xe0
   2d014:	e5810f28 	str	r0, [r1, #3880]	; 0xf28
   2d018:	e5812f18 	str	r2, [r1, #3864]	; 0xf18
   2d01c:	e5812f2c 	str	r2, [r1, #3884]	; 0xf2c
   2d020:	e594000c 	ldr	r0, [r4, #12]
   2d024:	e581bf1c 	str	fp, [r1, #3868]	; 0xf1c
   2d028:	e150000b 	cmp	r0, fp
   2d02c:	1a000027 	bne	2d0d0 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x17c>
   2d030:	e59f6118 	ldr	r6, [pc, #280]	; 2d150 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1fc>
   2d034:	e1a03205 	lsl	r3, r5, #4
   2d038:	e0861205 	add	r1, r6, r5, lsl #4
   2d03c:	e5911004 	ldr	r1, [r1, #4]
   2d040:	e3510035 	cmp	r1, #53	; 0x35
   2d044:	8a000021 	bhi	2d0d0 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x17c>
   2d048:	e59f0104 	ldr	r0, [pc, #260]	; 2d154 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x200>
   2d04c:	e590c020 	ldr	ip, [r0, #32]
   2d050:	e15c000b 	cmp	ip, fp
   2d054:	1a000032 	bne	2d124 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1d0>
   2d058:	e796c105 	ldr	ip, [r6, r5, lsl #2]
   2d05c:	e5804020 	str	r4, [r0, #32]
   2d060:	e35c0000 	cmp	ip, #0
   2d064:	e584c010 	str	ip, [r4, #16]
   2d068:	0a000032 	beq	2d138 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1e4>
   2d06c:	e3550000 	cmp	r5, #0
   2d070:	0a000019 	beq	2d0dc <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x188>
   2d074:	e0866003 	add	r6, r6, r3
   2d078:	e1a00008 	mov	r0, r8
   2d07c:	ebffe152 	bl	255cc <CGPIOPin::AssignPin(unsigned int)>
   2d080:	e5961008 	ldr	r1, [r6, #8]
   2d084:	e3a02001 	mov	r2, #1
   2d088:	e2811004 	add	r1, r1, #4
   2d08c:	e1a00008 	mov	r0, r8
   2d090:	e6ef1071 	uxtb	r1, r1
   2d094:	ebffe16d 	bl	25650 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d098:	e1a00007 	mov	r0, r7
   2d09c:	e596100c 	ldr	r1, [r6, #12]
   2d0a0:	ebffe149 	bl	255cc <CGPIOPin::AssignPin(unsigned int)>
   2d0a4:	e5961010 	ldr	r1, [r6, #16]
   2d0a8:	e3a02001 	mov	r2, #1
   2d0ac:	e2811004 	add	r1, r1, #4
   2d0b0:	e1a00007 	mov	r0, r7
   2d0b4:	e6ef1071 	uxtb	r1, r1
   2d0b8:	ebffe164 	bl	25650 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d0bc:	e1a00007 	mov	r0, r7
   2d0c0:	e3a01002 	mov	r1, #2
   2d0c4:	ebffe37e 	bl	25ec4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2d0c8:	e3a03001 	mov	r3, #1
   2d0cc:	e5c43014 	strb	r3, [r4, #20]
   2d0d0:	e1a00004 	mov	r0, r4
   2d0d4:	e28dd00c 	add	sp, sp, #12
   2d0d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d0dc:	e3a01020 	mov	r1, #32
   2d0e0:	e1a0000a 	mov	r0, sl
   2d0e4:	e58d3004 	str	r3, [sp, #4]
   2d0e8:	ebffe137 	bl	255cc <CGPIOPin::AssignPin(unsigned int)>
   2d0ec:	e3a02001 	mov	r2, #1
   2d0f0:	e1a01005 	mov	r1, r5
   2d0f4:	e1a0000a 	mov	r0, sl
   2d0f8:	ebffe154 	bl	25650 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d0fc:	e3a01021 	mov	r1, #33	; 0x21
   2d100:	e1a00009 	mov	r0, r9
   2d104:	ebffe130 	bl	255cc <CGPIOPin::AssignPin(unsigned int)>
   2d108:	e1a01005 	mov	r1, r5
   2d10c:	e3a02001 	mov	r2, #1
   2d110:	e1a00009 	mov	r0, r9
   2d114:	ebffe14d 	bl	25650 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d118:	e5961004 	ldr	r1, [r6, #4]
   2d11c:	e59d3004 	ldr	r3, [sp, #4]
   2d120:	eaffffd3 	b	2d074 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x120>
   2d124:	e59f3020 	ldr	r3, [pc, #32]	; 2d14c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1f8>
   2d128:	e3a020bd 	mov	r2, #189	; 0xbd
   2d12c:	e2831018 	add	r1, r3, #24
   2d130:	e2830034 	add	r0, r3, #52	; 0x34
   2d134:	ebffdd9b 	bl	247a8 <assertion_failed>
   2d138:	e59f300c 	ldr	r3, [pc, #12]	; 2d14c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1f8>
   2d13c:	e3a020c1 	mov	r2, #193	; 0xc1
   2d140:	e2831018 	add	r1, r3, #24
   2d144:	e283004c 	add	r0, r3, #76	; 0x4c
   2d148:	ebffdd96 	bl	247a8 <assertion_failed>
   2d14c:	0004794c 	.word	0x0004794c
   2d150:	0004a39c 	.word	0x0004a39c
   2d154:	0005ced8 	.word	0x0005ced8

0002d158 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>:
   2d158:	e5d03014 	ldrb	r3, [r0, #20]
   2d15c:	e59fc168 	ldr	ip, [pc, #360]	; 2d2cc <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x174>
   2d160:	e3530000 	cmp	r3, #0
   2d164:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d168:	e1a04000 	mov	r4, r0
   2d16c:	e580c000 	str	ip, [r0]
   2d170:	0a000046 	beq	2d290 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x138>
   2d174:	e3a00001 	mov	r0, #1
   2d178:	e59f5150 	ldr	r5, [pc, #336]	; 2d2d0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x178>
   2d17c:	e594100c 	ldr	r1, [r4, #12]
   2d180:	e595201c 	ldr	r2, [r5, #28]
   2d184:	e3a03000 	mov	r3, #0
   2d188:	e1c22110 	bic	r2, r2, r0, lsl r1
   2d18c:	e585201c 	str	r2, [r5, #28]
   2d190:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d194:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d198:	e5942010 	ldr	r2, [r4, #16]
   2d19c:	e5823038 	str	r3, [r2, #56]	; 0x38
   2d1a0:	e5942010 	ldr	r2, [r4, #16]
   2d1a4:	e5823030 	str	r3, [r2, #48]	; 0x30
   2d1a8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2d1ac:	e5943004 	ldr	r3, [r4, #4]
   2d1b0:	e3530000 	cmp	r3, #0
   2d1b4:	0a00000e 	beq	2d1f4 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x9c>
   2d1b8:	e5953010 	ldr	r3, [r5, #16]
   2d1bc:	e2433001 	sub	r3, r3, #1
   2d1c0:	e3530000 	cmp	r3, #0
   2d1c4:	e5853010 	str	r3, [r5, #16]
   2d1c8:	1a000009 	bne	2d1f4 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x9c>
   2d1cc:	e5950014 	ldr	r0, [r5, #20]
   2d1d0:	e3500000 	cmp	r0, #0
   2d1d4:	0a000038 	beq	2d2bc <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x164>
   2d1d8:	e5d53018 	ldrb	r3, [r5, #24]
   2d1dc:	e3530000 	cmp	r3, #0
   2d1e0:	0a000032 	beq	2d2b0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x158>
   2d1e4:	ebfffb65 	bl	2bf80 <CInterruptSystem::DisconnectFIQ()>
   2d1e8:	e3a03000 	mov	r3, #0
   2d1ec:	e5853014 	str	r3, [r5, #20]
   2d1f0:	e5c53018 	strb	r3, [r5, #24]
   2d1f4:	e2846068 	add	r6, r4, #104	; 0x68
   2d1f8:	e1a00006 	mov	r0, r6
   2d1fc:	e3a02001 	mov	r2, #1
   2d200:	e3a01000 	mov	r1, #0
   2d204:	e2847090 	add	r7, r4, #144	; 0x90
   2d208:	ebffe110 	bl	25650 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d20c:	e1a00007 	mov	r0, r7
   2d210:	e3a02001 	mov	r2, #1
   2d214:	e3a01000 	mov	r1, #0
   2d218:	ebffe10c 	bl	25650 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d21c:	e59400b8 	ldr	r0, [r4, #184]	; 0xb8
   2d220:	e3500000 	cmp	r0, #0
   2d224:	0a000002 	beq	2d234 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xdc>
   2d228:	e5d430c8 	ldrb	r3, [r4, #200]	; 0xc8
   2d22c:	e3530000 	cmp	r3, #0
   2d230:	1a00001c 	bne	2d2a8 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x150>
   2d234:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   2d238:	e3500000 	cmp	r0, #0
   2d23c:	0a000002 	beq	2d24c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xf4>
   2d240:	e5d430dc 	ldrb	r3, [r4, #220]	; 0xdc
   2d244:	e3530000 	cmp	r3, #0
   2d248:	1a000014 	bne	2d2a0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x148>
   2d24c:	e3a03000 	mov	r3, #0
   2d250:	e594200c 	ldr	r2, [r4, #12]
   2d254:	e1a00007 	mov	r0, r7
   2d258:	e0855102 	add	r5, r5, r2, lsl #2
   2d25c:	e5c43014 	strb	r3, [r4, #20]
   2d260:	e5853020 	str	r3, [r5, #32]
   2d264:	ebffe0d1 	bl	255b0 <CGPIOPin::~CGPIOPin()>
   2d268:	e1a00006 	mov	r0, r6
   2d26c:	ebffe0cf 	bl	255b0 <CGPIOPin::~CGPIOPin()>
   2d270:	e2840040 	add	r0, r4, #64	; 0x40
   2d274:	ebffe0cd 	bl	255b0 <CGPIOPin::~CGPIOPin()>
   2d278:	e2840018 	add	r0, r4, #24
   2d27c:	ebffe0cb 	bl	255b0 <CGPIOPin::~CGPIOPin()>
   2d280:	e1a00004 	mov	r0, r4
   2d284:	ebffdf20 	bl	24f0c <CDevice::~CDevice()>
   2d288:	e1a00004 	mov	r0, r4
   2d28c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d290:	e2800090 	add	r0, r0, #144	; 0x90
   2d294:	ebffe0c5 	bl	255b0 <CGPIOPin::~CGPIOPin()>
   2d298:	e2840068 	add	r0, r4, #104	; 0x68
   2d29c:	eafffff2 	b	2d26c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x114>
   2d2a0:	ebfff755 	bl	2affc <operator delete[](void*)>
   2d2a4:	eaffffe8 	b	2d24c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xf4>
   2d2a8:	ebfff753 	bl	2affc <operator delete[](void*)>
   2d2ac:	eaffffe0 	b	2d234 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xdc>
   2d2b0:	e3a01039 	mov	r1, #57	; 0x39
   2d2b4:	ebfffba2 	bl	2c144 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2d2b8:	eaffffca 	b	2d1e8 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x90>
   2d2bc:	e3a020ed 	mov	r2, #237	; 0xed
   2d2c0:	e28c1018 	add	r1, ip, #24
   2d2c4:	e28c0060 	add	r0, ip, #96	; 0x60
   2d2c8:	ebffdd36 	bl	247a8 <assertion_failed>
   2d2cc:	0004794c 	.word	0x0004794c
   2d2d0:	0005ced8 	.word	0x0005ced8

0002d2d4 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>:
   2d2d4:	e92d4010 	push	{r4, lr}
   2d2d8:	e1a04000 	mov	r4, r0
   2d2dc:	ebffff9d 	bl	2d158 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>
   2d2e0:	e1a00004 	mov	r0, r4
   2d2e4:	e59f1008 	ldr	r1, [pc, #8]	; 2d2f4 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x20>
   2d2e8:	ebfff744 	bl	2b000 <operator delete(void*, unsigned int)>
   2d2ec:	e1a00004 	mov	r0, r4
   2d2f0:	e8bd8010 	pop	{r4, pc}
   2d2f4:	00004f30 	.word	0x00004f30

0002d2f8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)>:
   2d2f8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d2fc:	e5d08014 	ldrb	r8, [r0, #20]
   2d300:	e24dd010 	sub	sp, sp, #16
   2d304:	e3580000 	cmp	r8, #0
   2d308:	1a000002 	bne	2d318 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x20>
   2d30c:	e1a00008 	mov	r0, r8
   2d310:	e28dd010 	add	sp, sp, #16
   2d314:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d318:	e1a05001 	mov	r5, r1
   2d31c:	e1a07002 	mov	r7, r2
   2d320:	e3a01002 	mov	r1, #2
   2d324:	e59f2274 	ldr	r2, [pc, #628]	; 2d5a0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2a8>
   2d328:	e1a06003 	mov	r6, r3
   2d32c:	e3a03001 	mov	r3, #1
   2d330:	e1a04000 	mov	r4, r0
   2d334:	eb0000a9 	bl	2d5e0 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)>
   2d338:	ebffe907 	bl	2775c <CMachineInfo::Get()>
   2d33c:	e3a01002 	mov	r1, #2
   2d340:	ebffe839 	bl	2742c <CMachineInfo::GetClockRate(unsigned int) const>
   2d344:	e3500000 	cmp	r0, #0
   2d348:	0a000084 	beq	2d560 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x268>
   2d34c:	e59f3250 	ldr	r3, [pc, #592]	; 2d5a4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2ac>
   2d350:	e2452f4b 	sub	r2, r5, #300	; 0x12c
   2d354:	e1520003 	cmp	r2, r3
   2d358:	8a000084 	bhi	2d570 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x278>
   2d35c:	e1a01205 	lsl	r1, r5, #4
   2d360:	eb0045f9 	bl	3eb4c <__aeabi_uidivmod>
   2d364:	e59f323c 	ldr	r3, [pc, #572]	; 2d5a8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b0>
   2d368:	e2402001 	sub	r2, r0, #1
   2d36c:	e1520003 	cmp	r2, r3
   2d370:	e1a09000 	mov	r9, r0
   2d374:	e1a00001 	mov	r0, r1
   2d378:	8a000080 	bhi	2d580 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x288>
   2d37c:	e1a01005 	mov	r1, r5
   2d380:	e1a00180 	lsl	r0, r0, #3
   2d384:	eb004575 	bl	3e960 <__udivsi3>
   2d388:	e200a001 	and	sl, r0, #1
   2d38c:	e08aa0a0 	add	sl, sl, r0, lsr #1
   2d390:	e35a003f 	cmp	sl, #63	; 0x3f
   2d394:	8a00007d 	bhi	2d590 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x298>
   2d398:	e59f520c 	ldr	r5, [pc, #524]	; 2d5ac <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b4>
   2d39c:	e28410f8 	add	r1, r4, #248	; 0xf8
   2d3a0:	e28420bc 	add	r2, r4, #188	; 0xbc
   2d3a4:	e98d0022 	stmib	sp, {r1, r5}
   2d3a8:	e1a03007 	mov	r3, r7
   2d3ac:	e1a00004 	mov	r0, r4
   2d3b0:	e58d2000 	str	r2, [sp]
   2d3b4:	e28410b8 	add	r1, r4, #184	; 0xb8
   2d3b8:	e28420c8 	add	r2, r4, #200	; 0xc8
   2d3bc:	eb000260 	bl	2dd44 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>
   2d3c0:	e2842b0a 	add	r2, r4, #10240	; 0x2800
   2d3c4:	e2822008 	add	r2, r2, #8
   2d3c8:	e28410d0 	add	r1, r4, #208	; 0xd0
   2d3cc:	e88d0006 	stm	sp, {r1, r2}
   2d3d0:	e1a00004 	mov	r0, r4
   2d3d4:	e58d5008 	str	r5, [sp, #8]
   2d3d8:	e1a03006 	mov	r3, r6
   2d3dc:	e28420dc 	add	r2, r4, #220	; 0xdc
   2d3e0:	e28410cc 	add	r1, r4, #204	; 0xcc
   2d3e4:	eb000256 	bl	2dd44 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>
   2d3e8:	e5940004 	ldr	r0, [r4, #4]
   2d3ec:	e59f51bc 	ldr	r5, [pc, #444]	; 2d5b0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b8>
   2d3f0:	e3500000 	cmp	r0, #0
   2d3f4:	0a000013 	beq	2d448 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x150>
   2d3f8:	e5953010 	ldr	r3, [r5, #16]
   2d3fc:	e3530000 	cmp	r3, #0
   2d400:	1a00003d 	bne	2d4fc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x204>
   2d404:	e5d42008 	ldrb	r2, [r4, #8]
   2d408:	e5850014 	str	r0, [r5, #20]
   2d40c:	e3520000 	cmp	r2, #0
   2d410:	e5c52018 	strb	r2, [r5, #24]
   2d414:	1a000045 	bne	2d530 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x238>
   2d418:	e1a03002 	mov	r3, r2
   2d41c:	e3a01039 	mov	r1, #57	; 0x39
   2d420:	e59f218c 	ldr	r2, [pc, #396]	; 2d5b4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2bc>
   2d424:	ebfffb12 	bl	2c074 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2d428:	e5953008 	ldr	r3, [r5, #8]
   2d42c:	e2833001 	add	r3, r3, #1
   2d430:	e5853008 	str	r3, [r5, #8]
   2d434:	e5953010 	ldr	r3, [r5, #16]
   2d438:	e3530000 	cmp	r3, #0
   2d43c:	1a000043 	bne	2d550 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x258>
   2d440:	e3a03001 	mov	r3, #1
   2d444:	e5853010 	str	r3, [r5, #16]
   2d448:	e3a03000 	mov	r3, #0
   2d44c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d450:	e5942010 	ldr	r2, [r4, #16]
   2d454:	e59f015c 	ldr	r0, [pc, #348]	; 2d5b8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c0>
   2d458:	e5823038 	str	r3, [r2, #56]	; 0x38
   2d45c:	e5942010 	ldr	r2, [r4, #16]
   2d460:	e5941004 	ldr	r1, [r4, #4]
   2d464:	e5820044 	str	r0, [r2, #68]	; 0x44
   2d468:	e5942010 	ldr	r2, [r4, #16]
   2d46c:	e1510003 	cmp	r1, r3
   2d470:	e5829024 	str	r9, [r2, #36]	; 0x24
   2d474:	e5942010 	ldr	r2, [r4, #16]
   2d478:	e582a028 	str	sl, [r2, #40]	; 0x28
   2d47c:	0a000027 	beq	2d520 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x228>
   2d480:	e3a0e011 	mov	lr, #17
   2d484:	e3a0c070 	mov	ip, #112	; 0x70
   2d488:	e3a01e45 	mov	r1, #1104	; 0x450
   2d48c:	e3a00001 	mov	r0, #1
   2d490:	e5942010 	ldr	r2, [r4, #16]
   2d494:	e582e034 	str	lr, [r2, #52]	; 0x34
   2d498:	e5942010 	ldr	r2, [r4, #16]
   2d49c:	e582c02c 	str	ip, [r2, #44]	; 0x2c
   2d4a0:	e5942010 	ldr	r2, [r4, #16]
   2d4a4:	e5821038 	str	r1, [r2, #56]	; 0x38
   2d4a8:	e595201c 	ldr	r2, [r5, #28]
   2d4ac:	e594100c 	ldr	r1, [r4, #12]
   2d4b0:	e1822110 	orr	r2, r2, r0, lsl r1
   2d4b4:	e585201c 	str	r2, [r5, #28]
   2d4b8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d4bc:	e5942010 	ldr	r2, [r4, #16]
   2d4c0:	e59f10f4 	ldr	r1, [pc, #244]	; 2d5bc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c4>
   2d4c4:	e59f30f4 	ldr	r3, [pc, #244]	; 2d5c0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c8>
   2d4c8:	e5821030 	str	r1, [r2, #48]	; 0x30
   2d4cc:	e5933214 	ldr	r3, [r3, #532]	; 0x214
   2d4d0:	e3a06000 	mov	r6, #0
   2d4d4:	e585300c 	str	r3, [r5, #12]
   2d4d8:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   2d4dc:	ebffdf73 	bl	252b0 <CDeviceNameService::Get()>
   2d4e0:	e1a03006 	mov	r3, r6
   2d4e4:	e1a02004 	mov	r2, r4
   2d4e8:	e59f10d4 	ldr	r1, [pc, #212]	; 2d5c4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2cc>
   2d4ec:	ebffdebf 	bl	24ff0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   2d4f0:	e1a00008 	mov	r0, r8
   2d4f4:	e28dd010 	add	sp, sp, #16
   2d4f8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d4fc:	e5953014 	ldr	r3, [r5, #20]
   2d500:	e1500003 	cmp	r0, r3
   2d504:	0a00000d 	beq	2d540 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x248>
   2d508:	e3a08000 	mov	r8, #0
   2d50c:	e594300c 	ldr	r3, [r4, #12]
   2d510:	e5c48014 	strb	r8, [r4, #20]
   2d514:	e0855103 	add	r5, r5, r3, lsl #2
   2d518:	e5858020 	str	r8, [r5, #32]
   2d51c:	eaffff7a 	b	2d30c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x14>
   2d520:	e3a02060 	mov	r2, #96	; 0x60
   2d524:	e5943010 	ldr	r3, [r4, #16]
   2d528:	e583202c 	str	r2, [r3, #44]	; 0x2c
   2d52c:	eaffffe2 	b	2d4bc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x1c4>
   2d530:	e3a01039 	mov	r1, #57	; 0x39
   2d534:	e59f2078 	ldr	r2, [pc, #120]	; 2d5b4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2bc>
   2d538:	ebfffa5c 	bl	2beb0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   2d53c:	eaffffbc 	b	2d434 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x13c>
   2d540:	e5d42008 	ldrb	r2, [r4, #8]
   2d544:	e5d53018 	ldrb	r3, [r5, #24]
   2d548:	e1520003 	cmp	r2, r3
   2d54c:	1affffed 	bne	2d508 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x210>
   2d550:	e59f1070 	ldr	r1, [pc, #112]	; 2d5c8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d554:	e59f2070 	ldr	r2, [pc, #112]	; 2d5cc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d4>
   2d558:	e28100d4 	add	r0, r1, #212	; 0xd4
   2d55c:	ebffdc91 	bl	247a8 <assertion_failed>
   2d560:	e59f1060 	ldr	r1, [pc, #96]	; 2d5c8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d564:	e59f2064 	ldr	r2, [pc, #100]	; 2d5d0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d8>
   2d568:	e2810060 	add	r0, r1, #96	; 0x60
   2d56c:	ebffdc8d 	bl	247a8 <assertion_failed>
   2d570:	e59f1050 	ldr	r1, [pc, #80]	; 2d5c8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d574:	e59f2058 	ldr	r2, [pc, #88]	; 2d5d4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d578:	e2810070 	add	r0, r1, #112	; 0x70
   2d57c:	ebffdc89 	bl	247a8 <assertion_failed>
   2d580:	e59f1040 	ldr	r1, [pc, #64]	; 2d5c8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d584:	e59f204c 	ldr	r2, [pc, #76]	; 2d5d8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e0>
   2d588:	e281009c 	add	r0, r1, #156	; 0x9c
   2d58c:	ebffdc85 	bl	247a8 <assertion_failed>
   2d590:	e59f1030 	ldr	r1, [pc, #48]	; 2d5c8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d594:	e59f2040 	ldr	r2, [pc, #64]	; 2d5dc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e4>
   2d598:	e28100c0 	add	r0, r1, #192	; 0xc0
   2d59c:	ebffdc81 	bl	247a8 <assertion_failed>
   2d5a0:	01e84800 	.word	0x01e84800
   2d5a4:	003d07d4 	.word	0x003d07d4
   2d5a8:	0000fffe 	.word	0x0000fffe
   2d5ac:	00002710 	.word	0x00002710
   2d5b0:	0005ced8 	.word	0x0005ced8
   2d5b4:	0002dcf4 	.word	0x0002dcf4
   2d5b8:	000007ff 	.word	0x000007ff
   2d5bc:	00000301 	.word	0x00000301
   2d5c0:	2000b000 	.word	0x2000b000
   2d5c4:	00047a60 	.word	0x00047a60
   2d5c8:	00047964 	.word	0x00047964
   2d5cc:	00000149 	.word	0x00000149
   2d5d0:	00000115 	.word	0x00000115
   2d5d4:	00000117 	.word	0x00000117
   2d5d8:	0000011a 	.word	0x0000011a
   2d5dc:	0000011d 	.word	0x0000011d

0002d5e0 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)>:
   2d5e0:	e92d4070 	push	{r4, r5, r6, lr}
   2d5e4:	e24dd028 	sub	sp, sp, #40	; 0x28
   2d5e8:	e1a06001 	mov	r6, r1
   2d5ec:	e28d0008 	add	r0, sp, #8
   2d5f0:	e3a01000 	mov	r1, #0
   2d5f4:	e1a05002 	mov	r5, r2
   2d5f8:	e1a04003 	mov	r4, r3
   2d5fc:	ebffdc8a 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2d600:	e3a0300c 	mov	r3, #12
   2d604:	e59f1034 	ldr	r1, [pc, #52]	; 2d640 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)+0x60>
   2d608:	e58d3000 	str	r3, [sp]
   2d60c:	e28d2010 	add	r2, sp, #16
   2d610:	e3a03018 	mov	r3, #24
   2d614:	e28d0008 	add	r0, sp, #8
   2d618:	e58d4024 	str	r4, [sp, #36]	; 0x24
   2d61c:	e58d601c 	str	r6, [sp, #28]
   2d620:	e58d5020 	str	r5, [sp, #32]
   2d624:	ebffdc8c 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2d628:	e1a04000 	mov	r4, r0
   2d62c:	e28d0008 	add	r0, sp, #8
   2d630:	ebffdc84 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   2d634:	e1a00004 	mov	r0, r4
   2d638:	e28dd028 	add	sp, sp, #40	; 0x28
   2d63c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2d640:	00038002 	.word	0x00038002

0002d644 <CUartMaxiSerialDevice::Clear()>:
   2d644:	e3a03000 	mov	r3, #0
   2d648:	e58030bc 	str	r3, [r0, #188]	; 0xbc
   2d64c:	e58030f4 	str	r3, [r0, #244]	; 0xf4
   2d650:	e58030c0 	str	r3, [r0, #192]	; 0xc0
   2d654:	e58030e4 	str	r3, [r0, #228]	; 0xe4
   2d658:	e58030e8 	str	r3, [r0, #232]	; 0xe8
   2d65c:	e58030ec 	str	r3, [r0, #236]	; 0xec
   2d660:	e58030f0 	str	r3, [r0, #240]	; 0xf0
   2d664:	e58030e0 	str	r3, [r0, #224]	; 0xe0
   2d668:	e12fff1e 	bx	lr

0002d66c <CUartMaxiSerialDevice::AvailableForWrite()>:
   2d66c:	e59030d4 	ldr	r3, [r0, #212]	; 0xd4
   2d670:	e59010d0 	ldr	r1, [r0, #208]	; 0xd0
   2d674:	e59020d8 	ldr	r2, [r0, #216]	; 0xd8
   2d678:	e59000d0 	ldr	r0, [r0, #208]	; 0xd0
   2d67c:	e1530001 	cmp	r3, r1
   2d680:	80800002 	addhi	r0, r0, r2
   2d684:	e0400003 	sub	r0, r0, r3
   2d688:	e0420000 	sub	r0, r2, r0
   2d68c:	e12fff1e 	bx	lr

0002d690 <CUartMaxiSerialDevice::WriteBase(unsigned int)>:
   2d690:	e1a03000 	mov	r3, r0
   2d694:	e59000cc 	ldr	r0, [r0, #204]	; 0xcc
   2d698:	e3500000 	cmp	r0, #0
   2d69c:	012fff1e 	bxeq	lr
   2d6a0:	e59320d8 	ldr	r2, [r3, #216]	; 0xd8
   2d6a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2d6a8:	e3520000 	cmp	r2, #0
   2d6ac:	0a00001d 	beq	2d728 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x98>
   2d6b0:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d6b4:	e593c0d4 	ldr	ip, [r3, #212]	; 0xd4
   2d6b8:	e15e000c 	cmp	lr, ip
   2d6bc:	0a000008 	beq	2d6e4 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x54>
   2d6c0:	e593c0d4 	ldr	ip, [r3, #212]	; 0xd4
   2d6c4:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d6c8:	e15c000e 	cmp	ip, lr
   2d6cc:	2a000011 	bcs	2d718 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x88>
   2d6d0:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d6d4:	e2422001 	sub	r2, r2, #1
   2d6d8:	e35c0000 	cmp	ip, #0
   2d6dc:	0152000e 	cmpeq	r2, lr
   2d6e0:	0a000010 	beq	2d728 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x98>
   2d6e4:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d6e8:	e7c01002 	strb	r1, [r0, r2]
   2d6ec:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d6f0:	e59310d8 	ldr	r1, [r3, #216]	; 0xd8
   2d6f4:	e2822001 	add	r2, r2, #1
   2d6f8:	e58320d0 	str	r2, [r3, #208]	; 0xd0
   2d6fc:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d700:	e1520001 	cmp	r2, r1
   2d704:	23a02000 	movcs	r2, #0
   2d708:	23a00001 	movcs	r0, #1
   2d70c:	258320d0 	strcs	r2, [r3, #208]	; 0xd0
   2d710:	33a00001 	movcc	r0, #1
   2d714:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2d718:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d71c:	e04cc002 	sub	ip, ip, r2
   2d720:	e35c0001 	cmp	ip, #1
   2d724:	8affffee 	bhi	2d6e4 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x54>
   2d728:	e59320f4 	ldr	r2, [r3, #244]	; 0xf4
   2d72c:	e3a00000 	mov	r0, #0
   2d730:	e2822001 	add	r2, r2, #1
   2d734:	e58320f4 	str	r2, [r3, #244]	; 0xf4
   2d738:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002d73c <CUartMaxiSerialDevice::Write(unsigned int)>:
   2d73c:	e92d4070 	push	{r4, r5, r6, lr}
   2d740:	e1a05000 	mov	r5, r0
   2d744:	ebffffd1 	bl	2d690 <CUartMaxiSerialDevice::WriteBase(unsigned int)>
   2d748:	e1a04000 	mov	r4, r0
   2d74c:	e1a00005 	mov	r0, r5
   2d750:	eb000021 	bl	2d7dc <CUartMaxiSerialDevice::TxPumpPrime()>
   2d754:	e1a00004 	mov	r0, r4
   2d758:	e8bd8070 	pop	{r4, r5, r6, pc}

0002d75c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>:
   2d75c:	e3520000 	cmp	r2, #0
   2d760:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d764:	e1a07000 	mov	r7, r0
   2d768:	0a00000d 	beq	2d7a4 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x48>
   2d76c:	e3a05000 	mov	r5, #0
   2d770:	e0812002 	add	r2, r1, r2
   2d774:	e2426001 	sub	r6, r2, #1
   2d778:	e2414001 	sub	r4, r1, #1
   2d77c:	e5f41001 	ldrb	r1, [r4, #1]!
   2d780:	e1a00007 	mov	r0, r7
   2d784:	ebffffc1 	bl	2d690 <CUartMaxiSerialDevice::WriteBase(unsigned int)>
   2d788:	e1540006 	cmp	r4, r6
   2d78c:	e0855000 	add	r5, r5, r0
   2d790:	1afffff9 	bne	2d77c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x20>
   2d794:	e1a00007 	mov	r0, r7
   2d798:	eb00000f 	bl	2d7dc <CUartMaxiSerialDevice::TxPumpPrime()>
   2d79c:	e1a00005 	mov	r0, r5
   2d7a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d7a4:	e1a05002 	mov	r5, r2
   2d7a8:	eafffff9 	b	2d794 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x38>

0002d7ac <CUartMaxiSerialDevice::WriteStr(char const*)>:
   2d7ac:	e92d4010 	push	{r4, lr}
   2d7b0:	e1a04000 	mov	r4, r0
   2d7b4:	e24dd008 	sub	sp, sp, #8
   2d7b8:	e1a00001 	mov	r0, r1
   2d7bc:	e58d1004 	str	r1, [sp, #4]
   2d7c0:	ebfff21f 	bl	2a044 <strlen>
   2d7c4:	e1a02000 	mov	r2, r0
   2d7c8:	e1a00004 	mov	r0, r4
   2d7cc:	e59d1004 	ldr	r1, [sp, #4]
   2d7d0:	e28dd008 	add	sp, sp, #8
   2d7d4:	e8bd4010 	pop	{r4, lr}
   2d7d8:	eaffffdf 	b	2d75c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>

0002d7dc <CUartMaxiSerialDevice::TxPumpPrime()>:
   2d7dc:	e92d4010 	push	{r4, lr}
   2d7e0:	e1a04000 	mov	r4, r0
   2d7e4:	e3a00001 	mov	r0, #1
   2d7e8:	ebfff923 	bl	2bc7c <EnterCritical>
   2d7ec:	e59420d0 	ldr	r2, [r4, #208]	; 0xd0
   2d7f0:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
   2d7f4:	e1520003 	cmp	r2, r3
   2d7f8:	0a000019 	beq	2d864 <CUartMaxiSerialDevice::TxPumpPrime()+0x88>
   2d7fc:	e3a00000 	mov	r0, #0
   2d800:	e59f1078 	ldr	r1, [pc, #120]	; 2d880 <CUartMaxiSerialDevice::TxPumpPrime()+0xa4>
   2d804:	ea000013 	b	2d858 <CUartMaxiSerialDevice::TxPumpPrime()+0x7c>
   2d808:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
   2d80c:	e5913018 	ldr	r3, [r1, #24]
   2d810:	e2133020 	ands	r3, r3, #32
   2d814:	1a000014 	bne	2d86c <CUartMaxiSerialDevice::TxPumpPrime()+0x90>
   2d818:	e594c0d4 	ldr	ip, [r4, #212]	; 0xd4
   2d81c:	e59420d4 	ldr	r2, [r4, #212]	; 0xd4
   2d820:	e594e0cc 	ldr	lr, [r4, #204]	; 0xcc
   2d824:	e2822001 	add	r2, r2, #1
   2d828:	e7dec00c 	ldrb	ip, [lr, ip]
   2d82c:	e58420d4 	str	r2, [r4, #212]	; 0xd4
   2d830:	e594e0d4 	ldr	lr, [r4, #212]	; 0xd4
   2d834:	e59420d8 	ldr	r2, [r4, #216]	; 0xd8
   2d838:	e15e0002 	cmp	lr, r2
   2d83c:	258430d4 	strcs	r3, [r4, #212]	; 0xd4
   2d840:	e581c000 	str	ip, [r1]
   2d844:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
   2d848:	e59420d0 	ldr	r2, [r4, #208]	; 0xd0
   2d84c:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
   2d850:	e1520003 	cmp	r2, r3
   2d854:	0a000002 	beq	2d864 <CUartMaxiSerialDevice::TxPumpPrime()+0x88>
   2d858:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   2d85c:	e3530000 	cmp	r3, #0
   2d860:	1affffe8 	bne	2d808 <CUartMaxiSerialDevice::TxPumpPrime()+0x2c>
   2d864:	e8bd4010 	pop	{r4, lr}
   2d868:	eafff92d 	b	2bd24 <LeaveCritical>
   2d86c:	e5913038 	ldr	r3, [r1, #56]	; 0x38
   2d870:	e8bd4010 	pop	{r4, lr}
   2d874:	e3833020 	orr	r3, r3, #32
   2d878:	e5813038 	str	r3, [r1, #56]	; 0x38
   2d87c:	eafff928 	b	2bd24 <LeaveCritical>
   2d880:	20201000 	.word	0x20201000

0002d884 <CUartMaxiSerialDevice::Read()>:
   2d884:	e59010b8 	ldr	r1, [r0, #184]	; 0xb8
   2d888:	e1a03000 	mov	r3, r0
   2d88c:	e3510000 	cmp	r1, #0
   2d890:	0a00000e 	beq	2d8d0 <CUartMaxiSerialDevice::Read()+0x4c>
   2d894:	e59000bc 	ldr	r0, [r0, #188]	; 0xbc
   2d898:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
   2d89c:	e1500002 	cmp	r0, r2
   2d8a0:	0a00000a 	beq	2d8d0 <CUartMaxiSerialDevice::Read()+0x4c>
   2d8a4:	e59300c0 	ldr	r0, [r3, #192]	; 0xc0
   2d8a8:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
   2d8ac:	e7d10000 	ldrb	r0, [r1, r0]
   2d8b0:	e2822001 	add	r2, r2, #1
   2d8b4:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   2d8b8:	e59310c0 	ldr	r1, [r3, #192]	; 0xc0
   2d8bc:	e59320c4 	ldr	r2, [r3, #196]	; 0xc4
   2d8c0:	e1510002 	cmp	r1, r2
   2d8c4:	23a02000 	movcs	r2, #0
   2d8c8:	258320c0 	strcs	r2, [r3, #192]	; 0xc0
   2d8cc:	e12fff1e 	bx	lr
   2d8d0:	e3e00000 	mvn	r0, #0
   2d8d4:	e12fff1e 	bx	lr

0002d8d8 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)>:
   2d8d8:	e59f3098 	ldr	r3, [pc, #152]	; 2d978 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0xa0>
   2d8dc:	e92d4010 	push	{r4, lr}
   2d8e0:	e590e0b8 	ldr	lr, [r0, #184]	; 0xb8
   2d8e4:	e593c040 	ldr	ip, [r3, #64]	; 0x40
   2d8e8:	e59f308c 	ldr	r3, [pc, #140]	; 2d97c <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0xa4>
   2d8ec:	e35e0000 	cmp	lr, #0
   2d8f0:	e583c004 	str	ip, [r3, #4]
   2d8f4:	01a0300e 	moveq	r3, lr
   2d8f8:	0a00001c 	beq	2d970 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x98>
   2d8fc:	e59030bc 	ldr	r3, [r0, #188]	; 0xbc
   2d900:	e590c0c0 	ldr	ip, [r0, #192]	; 0xc0
   2d904:	e053300c 	subs	r3, r3, ip
   2d908:	13a03001 	movne	r3, #1
   2d90c:	e3520000 	cmp	r2, #0
   2d910:	03a03000 	moveq	r3, #0
   2d914:	e3530000 	cmp	r3, #0
   2d918:	0a000014 	beq	2d970 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x98>
   2d91c:	e3a03000 	mov	r3, #0
   2d920:	e241c001 	sub	ip, r1, #1
   2d924:	e1a04003 	mov	r4, r3
   2d928:	ea000000 	b	2d930 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x58>
   2d92c:	e590e0b8 	ldr	lr, [r0, #184]	; 0xb8
   2d930:	e59010c0 	ldr	r1, [r0, #192]	; 0xc0
   2d934:	e2833001 	add	r3, r3, #1
   2d938:	e7de1001 	ldrb	r1, [lr, r1]
   2d93c:	e5ec1001 	strb	r1, [ip, #1]!
   2d940:	e59010c0 	ldr	r1, [r0, #192]	; 0xc0
   2d944:	e590e0c4 	ldr	lr, [r0, #196]	; 0xc4
   2d948:	e2811001 	add	r1, r1, #1
   2d94c:	e58010c0 	str	r1, [r0, #192]	; 0xc0
   2d950:	e59010c0 	ldr	r1, [r0, #192]	; 0xc0
   2d954:	e151000e 	cmp	r1, lr
   2d958:	258040c0 	strcs	r4, [r0, #192]	; 0xc0
   2d95c:	e590e0bc 	ldr	lr, [r0, #188]	; 0xbc
   2d960:	e59010c0 	ldr	r1, [r0, #192]	; 0xc0
   2d964:	e15e0001 	cmp	lr, r1
   2d968:	11520003 	cmpne	r2, r3
   2d96c:	8affffee 	bhi	2d92c <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x54>
   2d970:	e1a00003 	mov	r0, r3
   2d974:	e8bd8010 	pop	{r4, pc}
   2d978:	20201000 	.word	0x20201000
   2d97c:	0005ced8 	.word	0x0005ced8

0002d980 <CUartMaxiSerialDevice::CanGet()>:
   2d980:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2d984:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
   2d988:	e0520000 	subs	r0, r2, r0
   2d98c:	13a00001 	movne	r0, #1
   2d990:	e12fff1e 	bx	lr

0002d994 <CUartMaxiSerialDevice::Peek()>:
   2d994:	e59030b8 	ldr	r3, [r0, #184]	; 0xb8
   2d998:	e3530000 	cmp	r3, #0
   2d99c:	0a000006 	beq	2d9bc <CUartMaxiSerialDevice::Peek()+0x28>
   2d9a0:	e59010bc 	ldr	r1, [r0, #188]	; 0xbc
   2d9a4:	e59020c0 	ldr	r2, [r0, #192]	; 0xc0
   2d9a8:	e1510002 	cmp	r1, r2
   2d9ac:	0a000002 	beq	2d9bc <CUartMaxiSerialDevice::Peek()+0x28>
   2d9b0:	e59020c0 	ldr	r2, [r0, #192]	; 0xc0
   2d9b4:	e7d30002 	ldrb	r0, [r3, r2]
   2d9b8:	e12fff1e 	bx	lr
   2d9bc:	e3e00000 	mvn	r0, #0
   2d9c0:	e12fff1e 	bx	lr

0002d9c4 <CUartMaxiSerialDevice::AvailableForRead()>:
   2d9c4:	e59030c0 	ldr	r3, [r0, #192]	; 0xc0
   2d9c8:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2d9cc:	e1530002 	cmp	r3, r2
   2d9d0:	859020bc 	ldrhi	r2, [r0, #188]	; 0xbc
   2d9d4:	859000c4 	ldrhi	r0, [r0, #196]	; 0xc4
   2d9d8:	959000bc 	ldrls	r0, [r0, #188]	; 0xbc
   2d9dc:	80820000 	addhi	r0, r2, r0
   2d9e0:	e0400003 	sub	r0, r0, r3
   2d9e4:	e12fff1e 	bx	lr

0002d9e8 <CUartMaxiSerialDevice::GetOptions() const>:
   2d9e8:	e2800901 	add	r0, r0, #16384	; 0x4000
   2d9ec:	e5900f18 	ldr	r0, [r0, #3864]	; 0xf18
   2d9f0:	e12fff1e 	bx	lr

0002d9f4 <CUartMaxiSerialDevice::SetOptions(unsigned int)>:
   2d9f4:	e2800901 	add	r0, r0, #16384	; 0x4000
   2d9f8:	e5801f18 	str	r1, [r0, #3864]	; 0xf18
   2d9fc:	e12fff1e 	bx	lr

0002da00 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   2da00:	e5903004 	ldr	r3, [r0, #4]
   2da04:	e92d4010 	push	{r4, lr}
   2da08:	e3530000 	cmp	r3, #0
   2da0c:	0a00000e 	beq	2da4c <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
   2da10:	e2800901 	add	r0, r0, #16384	; 0x4000
   2da14:	e5903f1c 	ldr	r3, [r0, #3868]	; 0xf1c
   2da18:	e3530000 	cmp	r3, #0
   2da1c:	1a00000e 	bne	2da5c <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x5c>
   2da20:	e3510000 	cmp	r1, #0
   2da24:	0a000010 	beq	2da6c <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x6c>
   2da28:	e1d130d0 	ldrsb	r3, [r1]
   2da2c:	e3530000 	cmp	r3, #0
   2da30:	0a000011 	beq	2da7c <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x7c>
   2da34:	e3520000 	cmp	r2, #0
   2da38:	0a000013 	beq	2da8c <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
   2da3c:	e5802f24 	str	r2, [r0, #3876]	; 0xf24
   2da40:	e5801f20 	str	r1, [r0, #3872]	; 0xf20
   2da44:	e5801f1c 	str	r1, [r0, #3868]	; 0xf1c
   2da48:	e8bd8010 	pop	{r4, pc}
   2da4c:	e59f1048 	ldr	r1, [pc, #72]	; 2da9c <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2da50:	e59f2048 	ldr	r2, [pc, #72]	; 2daa0 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa0>
   2da54:	e2810f41 	add	r0, r1, #260	; 0x104
   2da58:	ebffdb52 	bl	247a8 <assertion_failed>
   2da5c:	e59f1038 	ldr	r1, [pc, #56]	; 2da9c <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2da60:	e59f203c 	ldr	r2, [pc, #60]	; 2daa4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa4>
   2da64:	e2810f47 	add	r0, r1, #284	; 0x11c
   2da68:	ebffdb4e 	bl	247a8 <assertion_failed>
   2da6c:	e59f1028 	ldr	r1, [pc, #40]	; 2da9c <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2da70:	e3a02f87 	mov	r2, #540	; 0x21c
   2da74:	e2810f4b 	add	r0, r1, #300	; 0x12c
   2da78:	ebffdb4a 	bl	247a8 <assertion_failed>
   2da7c:	e59f1018 	ldr	r1, [pc, #24]	; 2da9c <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2da80:	e59f2020 	ldr	r2, [pc, #32]	; 2daa8 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
   2da84:	e2810f4e 	add	r0, r1, #312	; 0x138
   2da88:	ebffdb46 	bl	247a8 <assertion_failed>
   2da8c:	e59f1008 	ldr	r1, [pc, #8]	; 2da9c <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2da90:	e59f2014 	ldr	r2, [pc, #20]	; 2daac <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xac>
   2da94:	e2810f52 	add	r0, r1, #328	; 0x148
   2da98:	ebffdb42 	bl	247a8 <assertion_failed>
   2da9c:	00047964 	.word	0x00047964
   2daa0:	00000219 	.word	0x00000219
   2daa4:	0000021a 	.word	0x0000021a
   2daa8:	0000021d 	.word	0x0000021d
   2daac:	0000021e 	.word	0x0000021e

0002dab0 <CUartMaxiSerialDevice::InterruptHandler()>:
   2dab0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dab4:	e3a03000 	mov	r3, #0
   2dab8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2dabc:	e59f222c 	ldr	r2, [pc, #556]	; 2dcf0 <CUartMaxiSerialDevice::InterruptHandler()+0x240>
   2dac0:	e5921040 	ldr	r1, [r2, #64]	; 0x40
   2dac4:	e5821044 	str	r1, [r2, #68]	; 0x44
   2dac8:	e592e018 	ldr	lr, [r2, #24]
   2dacc:	e21ee010 	ands	lr, lr, #16
   2dad0:	11a0e003 	movne	lr, r3
   2dad4:	1a000055 	bne	2dc30 <CUartMaxiSerialDevice::InterruptHandler()+0x180>
   2dad8:	e1a0700e 	mov	r7, lr
   2dadc:	e3a06003 	mov	r6, #3
   2dae0:	e3a08002 	mov	r8, #2
   2dae4:	e3a05001 	mov	r5, #1
   2dae8:	e3a04004 	mov	r4, #4
   2daec:	e59010c4 	ldr	r1, [r0, #196]	; 0xc4
   2daf0:	e280c901 	add	ip, r0, #16384	; 0x4000
   2daf4:	ea000037 	b	2dbd8 <CUartMaxiSerialDevice::InterruptHandler()+0x128>
   2daf8:	e59090ec 	ldr	r9, [r0, #236]	; 0xec
   2dafc:	e5d0a0c9 	ldrb	sl, [r0, #201]	; 0xc9
   2db00:	e2899001 	add	r9, r9, #1
   2db04:	e35a0000 	cmp	sl, #0
   2db08:	e58090ec 	str	r9, [r0, #236]	; 0xec
   2db0c:	05c050c9 	strbeq	r5, [r0, #201]	; 0xc9
   2db10:	e3510000 	cmp	r1, #0
   2db14:	0a00003c 	beq	2dc0c <CUartMaxiSerialDevice::InterruptHandler()+0x15c>
   2db18:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2db1c:	e59090c0 	ldr	r9, [r0, #192]	; 0xc0
   2db20:	e15a0009 	cmp	sl, r9
   2db24:	0a000008 	beq	2db4c <CUartMaxiSerialDevice::InterruptHandler()+0x9c>
   2db28:	e59090c0 	ldr	r9, [r0, #192]	; 0xc0
   2db2c:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2db30:	e159000a 	cmp	r9, sl
   2db34:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2db38:	2a00005a 	bcs	2dca8 <CUartMaxiSerialDevice::InterruptHandler()+0x1f8>
   2db3c:	e241b001 	sub	fp, r1, #1
   2db40:	e3590000 	cmp	r9, #0
   2db44:	015b000a 	cmpeq	fp, sl
   2db48:	0a00002f 	beq	2dc0c <CUartMaxiSerialDevice::InterruptHandler()+0x15c>
   2db4c:	e59090b8 	ldr	r9, [r0, #184]	; 0xb8
   2db50:	e3590000 	cmp	r9, #0
   2db54:	0a00002c 	beq	2dc0c <CUartMaxiSerialDevice::InterruptHandler()+0x15c>
   2db58:	e59010bc 	ldr	r1, [r0, #188]	; 0xbc
   2db5c:	e7c93001 	strb	r3, [r9, r1]
   2db60:	e59090bc 	ldr	r9, [r0, #188]	; 0xbc
   2db64:	e59010c4 	ldr	r1, [r0, #196]	; 0xc4
   2db68:	e2899001 	add	r9, r9, #1
   2db6c:	e58090bc 	str	r9, [r0, #188]	; 0xbc
   2db70:	e59090bc 	ldr	r9, [r0, #188]	; 0xbc
   2db74:	e1590001 	cmp	r9, r1
   2db78:	e59c9f1c 	ldr	r9, [ip, #3868]	; 0xf1c
   2db7c:	258070bc 	strcs	r7, [r0, #188]	; 0xbc
   2db80:	e3590000 	cmp	r9, #0
   2db84:	0a000010 	beq	2dbcc <CUartMaxiSerialDevice::InterruptHandler()+0x11c>
   2db88:	e59caf20 	ldr	sl, [ip, #3872]	; 0xf20
   2db8c:	e6af3073 	sxtb	r3, r3
   2db90:	e1dab0d0 	ldrsb	fp, [sl]
   2db94:	e15b0003 	cmp	fp, r3
   2db98:	158c9f20 	strne	r9, [ip, #3872]	; 0xf20
   2db9c:	1a000004 	bne	2dbb4 <CUartMaxiSerialDevice::InterruptHandler()+0x104>
   2dba0:	e28a3001 	add	r3, sl, #1
   2dba4:	e58c3f20 	str	r3, [ip, #3872]	; 0xf20
   2dba8:	e1da30d1 	ldrsb	r3, [sl, #1]
   2dbac:	e3530000 	cmp	r3, #0
   2dbb0:	03a0e001 	moveq	lr, #1
   2dbb4:	e59030e4 	ldr	r3, [r0, #228]	; 0xe4
   2dbb8:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2dbbc:	e2833001 	add	r3, r3, #1
   2dbc0:	e3590000 	cmp	r9, #0
   2dbc4:	e58030e4 	str	r3, [r0, #228]	; 0xe4
   2dbc8:	05c060c9 	strbeq	r6, [r0, #201]	; 0xc9
   2dbcc:	e5923018 	ldr	r3, [r2, #24]
   2dbd0:	e3130010 	tst	r3, #16
   2dbd4:	1a000015 	bne	2dc30 <CUartMaxiSerialDevice::InterruptHandler()+0x180>
   2dbd8:	e5923000 	ldr	r3, [r2]
   2dbdc:	e3130b01 	tst	r3, #1024	; 0x400
   2dbe0:	1affffc4 	bne	2daf8 <CUartMaxiSerialDevice::InterruptHandler()+0x48>
   2dbe4:	e3130b02 	tst	r3, #2048	; 0x800
   2dbe8:	0a000032 	beq	2dcb8 <CUartMaxiSerialDevice::InterruptHandler()+0x208>
   2dbec:	e5d0a0c9 	ldrb	sl, [r0, #201]	; 0xc9
   2dbf0:	e59090e8 	ldr	r9, [r0, #232]	; 0xe8
   2dbf4:	e35a0000 	cmp	sl, #0
   2dbf8:	e2899001 	add	r9, r9, #1
   2dbfc:	05c080c9 	strbeq	r8, [r0, #201]	; 0xc9
   2dc00:	e3510000 	cmp	r1, #0
   2dc04:	e58090e8 	str	r9, [r0, #232]	; 0xe8
   2dc08:	1affffc2 	bne	2db18 <CUartMaxiSerialDevice::InterruptHandler()+0x68>
   2dc0c:	e59030f0 	ldr	r3, [r0, #240]	; 0xf0
   2dc10:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2dc14:	e2833001 	add	r3, r3, #1
   2dc18:	e58030f0 	str	r3, [r0, #240]	; 0xf0
   2dc1c:	e5923018 	ldr	r3, [r2, #24]
   2dc20:	e3590000 	cmp	r9, #0
   2dc24:	05c040c9 	strbeq	r4, [r0, #201]	; 0xc9
   2dc28:	e3130010 	tst	r3, #16
   2dc2c:	0affffe9 	beq	2dbd8 <CUartMaxiSerialDevice::InterruptHandler()+0x128>
   2dc30:	e59f10b8 	ldr	r1, [pc, #184]	; 2dcf0 <CUartMaxiSerialDevice::InterruptHandler()+0x240>
   2dc34:	ea000010 	b	2dc7c <CUartMaxiSerialDevice::InterruptHandler()+0x1cc>
   2dc38:	e590c0d0 	ldr	ip, [r0, #208]	; 0xd0
   2dc3c:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2dc40:	e15c0002 	cmp	ip, r2
   2dc44:	0a000024 	beq	2dcdc <CUartMaxiSerialDevice::InterruptHandler()+0x22c>
   2dc48:	e59020cc 	ldr	r2, [r0, #204]	; 0xcc
   2dc4c:	e3520000 	cmp	r2, #0
   2dc50:	0a000021 	beq	2dcdc <CUartMaxiSerialDevice::InterruptHandler()+0x22c>
   2dc54:	e590c0d4 	ldr	ip, [r0, #212]	; 0xd4
   2dc58:	e7d2200c 	ldrb	r2, [r2, ip]
   2dc5c:	e5812000 	str	r2, [r1]
   2dc60:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2dc64:	e590c0d8 	ldr	ip, [r0, #216]	; 0xd8
   2dc68:	e2822001 	add	r2, r2, #1
   2dc6c:	e58020d4 	str	r2, [r0, #212]	; 0xd4
   2dc70:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2dc74:	e152000c 	cmp	r2, ip
   2dc78:	258030d4 	strcs	r3, [r0, #212]	; 0xd4
   2dc7c:	e5913018 	ldr	r3, [r1, #24]
   2dc80:	e2133020 	ands	r3, r3, #32
   2dc84:	0affffeb 	beq	2dc38 <CUartMaxiSerialDevice::InterruptHandler()+0x188>
   2dc88:	e35e0000 	cmp	lr, #0
   2dc8c:	0a000002 	beq	2dc9c <CUartMaxiSerialDevice::InterruptHandler()+0x1ec>
   2dc90:	e2800901 	add	r0, r0, #16384	; 0x4000
   2dc94:	e5903f24 	ldr	r3, [r0, #3876]	; 0xf24
   2dc98:	e12fff33 	blx	r3
   2dc9c:	e3a03000 	mov	r3, #0
   2dca0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2dca4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dca8:	e049900a 	sub	r9, r9, sl
   2dcac:	e3590001 	cmp	r9, #1
   2dcb0:	9affffd5 	bls	2dc0c <CUartMaxiSerialDevice::InterruptHandler()+0x15c>
   2dcb4:	eaffffa4 	b	2db4c <CUartMaxiSerialDevice::InterruptHandler()+0x9c>
   2dcb8:	e3130c01 	tst	r3, #256	; 0x100
   2dcbc:	0affff93 	beq	2db10 <CUartMaxiSerialDevice::InterruptHandler()+0x60>
   2dcc0:	e59090e4 	ldr	r9, [r0, #228]	; 0xe4
   2dcc4:	e5d0a0c9 	ldrb	sl, [r0, #201]	; 0xc9
   2dcc8:	e2899001 	add	r9, r9, #1
   2dccc:	e35a0000 	cmp	sl, #0
   2dcd0:	e58090e4 	str	r9, [r0, #228]	; 0xe4
   2dcd4:	05c060c9 	strbeq	r6, [r0, #201]	; 0xc9
   2dcd8:	eaffff8c 	b	2db10 <CUartMaxiSerialDevice::InterruptHandler()+0x60>
   2dcdc:	e59f200c 	ldr	r2, [pc, #12]	; 2dcf0 <CUartMaxiSerialDevice::InterruptHandler()+0x240>
   2dce0:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   2dce4:	e3c33020 	bic	r3, r3, #32
   2dce8:	e5823038 	str	r3, [r2, #56]	; 0x38
   2dcec:	eaffffe5 	b	2dc88 <CUartMaxiSerialDevice::InterruptHandler()+0x1d8>
   2dcf0:	20201000 	.word	0x20201000

0002dcf4 <CUartMaxiSerialDevice::InterruptStub(void*)>:
   2dcf4:	e59f3040 	ldr	r3, [pc, #64]	; 2dd3c <CUartMaxiSerialDevice::InterruptStub(void*)+0x48>
   2dcf8:	e3a01000 	mov	r1, #0
   2dcfc:	e5932000 	ldr	r2, [r3]
   2dd00:	e2822001 	add	r2, r2, #1
   2dd04:	e5832000 	str	r2, [r3]
   2dd08:	ee071fba 	mcr	15, 0, r1, cr7, cr10, {5}
   2dd0c:	e593201c 	ldr	r2, [r3, #28]
   2dd10:	e3120001 	tst	r2, #1
   2dd14:	012fff1e 	bxeq	lr
   2dd18:	e5930020 	ldr	r0, [r3, #32]
   2dd1c:	e1500001 	cmp	r0, r1
   2dd20:	0a000000 	beq	2dd28 <CUartMaxiSerialDevice::InterruptStub(void*)+0x34>
   2dd24:	eaffff61 	b	2dab0 <CUartMaxiSerialDevice::InterruptHandler()>
   2dd28:	e59f1010 	ldr	r1, [pc, #16]	; 2dd40 <CUartMaxiSerialDevice::InterruptStub(void*)+0x4c>
   2dd2c:	e3a02fa9 	mov	r2, #676	; 0x2a4
   2dd30:	e92d4010 	push	{r4, lr}
   2dd34:	e2810f56 	add	r0, r1, #344	; 0x158
   2dd38:	ebffda9a 	bl	247a8 <assertion_failed>
   2dd3c:	0005ced8 	.word	0x0005ced8
   2dd40:	00047964 	.word	0x00047964

0002dd44 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>:
   2dd44:	e5910000 	ldr	r0, [r1]
   2dd48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2dd4c:	e3500000 	cmp	r0, #0
   2dd50:	e1a05001 	mov	r5, r1
   2dd54:	e1a07002 	mov	r7, r2
   2dd58:	e1a04003 	mov	r4, r3
   2dd5c:	e59d6018 	ldr	r6, [sp, #24]
   2dd60:	0a000005 	beq	2dd7c <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x38>
   2dd64:	e5963008 	ldr	r3, [r6, #8]
   2dd68:	e1530004 	cmp	r3, r4
   2dd6c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2dd70:	e5d23000 	ldrb	r3, [r2]
   2dd74:	e3530000 	cmp	r3, #0
   2dd78:	1a000013 	bne	2ddcc <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x88>
   2dd7c:	e3540000 	cmp	r4, #0
   2dd80:	1a000007 	bne	2dda4 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x60>
   2dd84:	e59d301c 	ldr	r3, [sp, #28]
   2dd88:	e5853000 	str	r3, [r5]
   2dd8c:	e59d3020 	ldr	r3, [sp, #32]
   2dd90:	e5c74000 	strb	r4, [r7]
   2dd94:	e5864000 	str	r4, [r6]
   2dd98:	e5863008 	str	r3, [r6, #8]
   2dd9c:	e5864004 	str	r4, [r6, #4]
   2dda0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2dda4:	e1a00004 	mov	r0, r4
   2dda8:	ebfff48c 	bl	2afe0 <operator new[](unsigned int)>
   2ddac:	e3a03000 	mov	r3, #0
   2ddb0:	e3a02001 	mov	r2, #1
   2ddb4:	e5850000 	str	r0, [r5]
   2ddb8:	e5c72000 	strb	r2, [r7]
   2ddbc:	e5863000 	str	r3, [r6]
   2ddc0:	e5864008 	str	r4, [r6, #8]
   2ddc4:	e5863004 	str	r3, [r6, #4]
   2ddc8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2ddcc:	ebfff48a 	bl	2affc <operator delete[](void*)>
   2ddd0:	e3a03000 	mov	r3, #0
   2ddd4:	e3540000 	cmp	r4, #0
   2ddd8:	e5853000 	str	r3, [r5]
   2dddc:	e5c73000 	strb	r3, [r7]
   2dde0:	e5863000 	str	r3, [r6]
   2dde4:	e5863008 	str	r3, [r6, #8]
   2dde8:	e5863004 	str	r3, [r6, #4]
   2ddec:	0affffe4 	beq	2dd84 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x40>
   2ddf0:	eaffffeb 	b	2dda4 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x60>

0002ddf4 <micros>:
   2ddf4:	eaffed7f 	b	293f8 <CTimer::GetClockTicks()>

0002ddf8 <millis>:
   2ddf8:	e92d4010 	push	{r4, lr}
   2ddfc:	ebffed7d 	bl	293f8 <CTimer::GetClockTicks()>
   2de00:	e59f3008 	ldr	r3, [pc, #8]	; 2de10 <millis+0x18>
   2de04:	e0803093 	umull	r3, r0, r3, r0
   2de08:	e1a00320 	lsr	r0, r0, #6
   2de0c:	e8bd8010 	pop	{r4, pc}
   2de10:	10624dd3 	.word	0x10624dd3

0002de14 <microsDelay>:
   2de14:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2de18:	e1a06000 	mov	r6, r0
   2de1c:	ebffed75 	bl	293f8 <CTimer::GetClockTicks()>
   2de20:	e1a04000 	mov	r4, r0
   2de24:	e1e05000 	mvn	r5, r0
   2de28:	e0867000 	add	r7, r6, r0
   2de2c:	ea000004 	b	2de44 <microsDelay+0x30>
   2de30:	e1560003 	cmp	r6, r3
   2de34:	23a03000 	movcs	r3, #0
   2de38:	33a03001 	movcc	r3, #1
   2de3c:	e3530000 	cmp	r3, #0
   2de40:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   2de44:	ebffed6b 	bl	293f8 <CTimer::GetClockTicks()>
   2de48:	e1540000 	cmp	r4, r0
   2de4c:	e0853000 	add	r3, r5, r0
   2de50:	8afffff6 	bhi	2de30 <microsDelay+0x1c>
   2de54:	e1570000 	cmp	r7, r0
   2de58:	23a03000 	movcs	r3, #0
   2de5c:	33a03001 	movcc	r3, #1
   2de60:	e3530000 	cmp	r3, #0
   2de64:	0afffff6 	beq	2de44 <microsDelay+0x30>
   2de68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002de6c <isTimeout>:
   2de6c:	e1500001 	cmp	r0, r1
   2de70:	2a000005 	bcs	2de8c <isTimeout+0x20>
   2de74:	e0401001 	sub	r1, r0, r1
   2de78:	e2411001 	sub	r1, r1, #1
   2de7c:	e1510002 	cmp	r1, r2
   2de80:	93a00000 	movls	r0, #0
   2de84:	83a00001 	movhi	r0, #1
   2de88:	e12fff1e 	bx	lr
   2de8c:	e0811002 	add	r1, r1, r2
   2de90:	e1510000 	cmp	r1, r0
   2de94:	23a00000 	movcs	r0, #0
   2de98:	33a00001 	movcc	r0, #1
   2de9c:	e12fff1e 	bx	lr

0002dea0 <timeToTimeout>:
   2dea0:	e1500001 	cmp	r0, r1
   2dea4:	3a000004 	bcc	2debc <timeToTimeout+0x1c>
   2dea8:	e0811002 	add	r1, r1, r2
   2deac:	e1510000 	cmp	r1, r0
   2deb0:	2a000007 	bcs	2ded4 <timeToTimeout+0x34>
   2deb4:	e3a00000 	mov	r0, #0
   2deb8:	e12fff1e 	bx	lr
   2debc:	e0403001 	sub	r3, r0, r1
   2dec0:	e2433001 	sub	r3, r3, #1
   2dec4:	e1530002 	cmp	r3, r2
   2dec8:	8afffff9 	bhi	2deb4 <timeToTimeout+0x14>
   2decc:	e2822001 	add	r2, r2, #1
   2ded0:	e0821001 	add	r1, r2, r1
   2ded4:	e0410000 	sub	r0, r1, r0
   2ded8:	e12fff1e 	bx	lr

0002dedc <strlcpy>:
   2dedc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2dee0:	e1a06000 	mov	r6, r0
   2dee4:	e1a00001 	mov	r0, r1
   2dee8:	e1a04002 	mov	r4, r2
   2deec:	e1a07001 	mov	r7, r1
   2def0:	ebfff053 	bl	2a044 <strlen>
   2def4:	e2802001 	add	r2, r0, #1
   2def8:	e1520004 	cmp	r2, r4
   2defc:	e1a05000 	mov	r5, r0
   2df00:	3a00000c 	bcc	2df38 <strlcpy+0x5c>
   2df04:	e3540000 	cmp	r4, #0
   2df08:	1a000001 	bne	2df14 <strlcpy+0x38>
   2df0c:	e1a00005 	mov	r0, r5
   2df10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2df14:	e2444001 	sub	r4, r4, #1
   2df18:	e1a01007 	mov	r1, r7
   2df1c:	e1a02004 	mov	r2, r4
   2df20:	e1a00006 	mov	r0, r6
   2df24:	ebfff241 	bl	2a830 <memcpy>
   2df28:	e3a03000 	mov	r3, #0
   2df2c:	e1a00005 	mov	r0, r5
   2df30:	e7c63004 	strb	r3, [r6, r4]
   2df34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2df38:	e1a01007 	mov	r1, r7
   2df3c:	e1a00006 	mov	r0, r6
   2df40:	ebfff23a 	bl	2a830 <memcpy>
   2df44:	e1a00005 	mov	r0, r5
   2df48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002df4c <strlcat>:
   2df4c:	e92d4370 	push	{r4, r5, r6, r8, r9, lr}
   2df50:	e1a06002 	mov	r6, r2
   2df54:	e24dd008 	sub	sp, sp, #8
   2df58:	e1a09000 	mov	r9, r0
   2df5c:	e1a00001 	mov	r0, r1
   2df60:	e58d1004 	str	r1, [sp, #4]
   2df64:	ebfff036 	bl	2a044 <strlen>
   2df68:	e3560000 	cmp	r6, #0
   2df6c:	e1a08000 	mov	r8, r0
   2df70:	0a000019 	beq	2dfdc <strlcat+0x90>
   2df74:	e3a04000 	mov	r4, #0
   2df78:	e59d1004 	ldr	r1, [sp, #4]
   2df7c:	e2493001 	sub	r3, r9, #1
   2df80:	ea000002 	b	2df90 <strlcat+0x44>
   2df84:	e2844001 	add	r4, r4, #1
   2df88:	e1560004 	cmp	r6, r4
   2df8c:	0a000012 	beq	2dfdc <strlcat+0x90>
   2df90:	e1f350d1 	ldrsb	r5, [r3, #1]!
   2df94:	e3550000 	cmp	r5, #0
   2df98:	1afffff9 	bne	2df84 <strlcat+0x38>
   2df9c:	e0463004 	sub	r3, r6, r4
   2dfa0:	e1530008 	cmp	r3, r8
   2dfa4:	8a000008 	bhi	2dfcc <strlcat+0x80>
   2dfa8:	e2466001 	sub	r6, r6, #1
   2dfac:	e1a02006 	mov	r2, r6
   2dfb0:	e0890004 	add	r0, r9, r4
   2dfb4:	e0896006 	add	r6, r9, r6
   2dfb8:	ebfff21c 	bl	2a830 <memcpy>
   2dfbc:	e7c65004 	strb	r5, [r6, r4]
   2dfc0:	e0880004 	add	r0, r8, r4
   2dfc4:	e28dd008 	add	sp, sp, #8
   2dfc8:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
   2dfcc:	e0890004 	add	r0, r9, r4
   2dfd0:	e2882001 	add	r2, r8, #1
   2dfd4:	ebfff215 	bl	2a830 <memcpy>
   2dfd8:	eafffff8 	b	2dfc0 <strlcat+0x74>
   2dfdc:	e0880006 	add	r0, r8, r6
   2dfe0:	e28dd008 	add	sp, sp, #8
   2dfe4:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}

0002dfe8 <strnlen>:
   2dfe8:	e3510000 	cmp	r1, #0
   2dfec:	e1a03000 	mov	r3, r0
   2dff0:	0a000008 	beq	2e018 <strnlen+0x30>
   2dff4:	e3a00000 	mov	r0, #0
   2dff8:	e2433001 	sub	r3, r3, #1
   2dffc:	e1f320d1 	ldrsb	r2, [r3, #1]!
   2e000:	e3520000 	cmp	r2, #0
   2e004:	012fff1e 	bxeq	lr
   2e008:	e2800001 	add	r0, r0, #1
   2e00c:	e1510000 	cmp	r1, r0
   2e010:	1afffff9 	bne	2dffc <strnlen+0x14>
   2e014:	e12fff1e 	bx	lr
   2e018:	e1a00001 	mov	r0, r1
   2e01c:	e12fff1e 	bx	lr

0002e020 <sprintf>:
   2e020:	e92d000e 	push	{r1, r2, r3}
   2e024:	e92d4010 	push	{r4, lr}
   2e028:	e24dd01c 	sub	sp, sp, #28
   2e02c:	e28d3028 	add	r3, sp, #40	; 0x28
   2e030:	e1a04000 	mov	r4, r0
   2e034:	e28d0008 	add	r0, sp, #8
   2e038:	e58d3004 	str	r3, [sp, #4]
   2e03c:	ebffe6b2 	bl	27b0c <CString::CString()>
   2e040:	e59d2004 	ldr	r2, [sp, #4]
   2e044:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   2e048:	e28d0008 	add	r0, sp, #8
   2e04c:	ebffe8d1 	bl	28398 <CString::FormatV(char const*, std::__va_list)>
   2e050:	e28d0008 	add	r0, sp, #8
   2e054:	ebffe6c4 	bl	27b6c <CString::operator char const*() const>
   2e058:	e1a01000 	mov	r1, r0
   2e05c:	e1a00004 	mov	r0, r4
   2e060:	ebfff09b 	bl	2a2d4 <strcpy>
   2e064:	e28d0008 	add	r0, sp, #8
   2e068:	ebffe6f1 	bl	27c34 <CString::GetLength() const>
   2e06c:	e1a04000 	mov	r4, r0
   2e070:	e28d0008 	add	r0, sp, #8
   2e074:	ebffe671 	bl	27a40 <CString::~CString()>
   2e078:	e1a00004 	mov	r0, r4
   2e07c:	e28dd01c 	add	sp, sp, #28
   2e080:	e8bd4010 	pop	{r4, lr}
   2e084:	e28dd00c 	add	sp, sp, #12
   2e088:	e12fff1e 	bx	lr

0002e08c <snprintf>:
   2e08c:	e92d000c 	push	{r2, r3}
   2e090:	e92d4030 	push	{r4, r5, lr}
   2e094:	e24dd01c 	sub	sp, sp, #28
   2e098:	e28d302c 	add	r3, sp, #44	; 0x2c
   2e09c:	e1a05000 	mov	r5, r0
   2e0a0:	e28d0008 	add	r0, sp, #8
   2e0a4:	e1a04001 	mov	r4, r1
   2e0a8:	e58d3004 	str	r3, [sp, #4]
   2e0ac:	ebffe696 	bl	27b0c <CString::CString()>
   2e0b0:	e59d2004 	ldr	r2, [sp, #4]
   2e0b4:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   2e0b8:	e28d0008 	add	r0, sp, #8
   2e0bc:	ebffe8b5 	bl	28398 <CString::FormatV(char const*, std::__va_list)>
   2e0c0:	e28d0008 	add	r0, sp, #8
   2e0c4:	ebffe6da 	bl	27c34 <CString::GetLength() const>
   2e0c8:	e2441001 	sub	r1, r4, #1
   2e0cc:	e1510000 	cmp	r1, r0
   2e0d0:	21a04000 	movcs	r4, r0
   2e0d4:	e28d0008 	add	r0, sp, #8
   2e0d8:	31a04001 	movcc	r4, r1
   2e0dc:	ebffe6a2 	bl	27b6c <CString::operator char const*() const>
   2e0e0:	e1a02004 	mov	r2, r4
   2e0e4:	e1a01000 	mov	r1, r0
   2e0e8:	e1a00005 	mov	r0, r5
   2e0ec:	ebfff1cf 	bl	2a830 <memcpy>
   2e0f0:	e3a03000 	mov	r3, #0
   2e0f4:	e28d0008 	add	r0, sp, #8
   2e0f8:	e7c53004 	strb	r3, [r5, r4]
   2e0fc:	ebffe64f 	bl	27a40 <CString::~CString()>
   2e100:	e1a00004 	mov	r0, r4
   2e104:	e28dd01c 	add	sp, sp, #28
   2e108:	e8bd4030 	pop	{r4, r5, lr}
   2e10c:	e28dd008 	add	sp, sp, #8
   2e110:	e12fff1e 	bx	lr

0002e114 <vsnprintf>:
   2e114:	e92d4030 	push	{r4, r5, lr}
   2e118:	e24dd01c 	sub	sp, sp, #28
   2e11c:	e1a05000 	mov	r5, r0
   2e120:	e28d0008 	add	r0, sp, #8
   2e124:	e1a04001 	mov	r4, r1
   2e128:	e58d3000 	str	r3, [sp]
   2e12c:	e58d2004 	str	r2, [sp, #4]
   2e130:	ebffe675 	bl	27b0c <CString::CString()>
   2e134:	e59d2000 	ldr	r2, [sp]
   2e138:	e59d1004 	ldr	r1, [sp, #4]
   2e13c:	e28d0008 	add	r0, sp, #8
   2e140:	ebffe894 	bl	28398 <CString::FormatV(char const*, std::__va_list)>
   2e144:	e28d0008 	add	r0, sp, #8
   2e148:	ebffe6b9 	bl	27c34 <CString::GetLength() const>
   2e14c:	e2441001 	sub	r1, r4, #1
   2e150:	e1510000 	cmp	r1, r0
   2e154:	21a04000 	movcs	r4, r0
   2e158:	e28d0008 	add	r0, sp, #8
   2e15c:	31a04001 	movcc	r4, r1
   2e160:	ebffe681 	bl	27b6c <CString::operator char const*() const>
   2e164:	e1a02004 	mov	r2, r4
   2e168:	e1a01000 	mov	r1, r0
   2e16c:	e1a00005 	mov	r0, r5
   2e170:	ebfff1ae 	bl	2a830 <memcpy>
   2e174:	e3a03000 	mov	r3, #0
   2e178:	e28d0008 	add	r0, sp, #8
   2e17c:	e7c53004 	strb	r3, [r5, r4]
   2e180:	ebffe62e 	bl	27a40 <CString::~CString()>
   2e184:	e1a00004 	mov	r0, r4
   2e188:	e28dd01c 	add	sp, sp, #28
   2e18c:	e8bd8030 	pop	{r4, r5, pc}

0002e190 <jsonGetValueForKey>:
   2e190:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e194:	e1a08001 	mov	r8, r1
   2e198:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2e19c:	e24dd018 	sub	sp, sp, #24
   2e1a0:	e1a07000 	mov	r7, r0
   2e1a4:	e28d000c 	add	r0, sp, #12
   2e1a8:	e1a0a002 	mov	sl, r2
   2e1ac:	e1a09003 	mov	r9, r3
   2e1b0:	eb000130 	bl	2e678 <JSMNR_init>
   2e1b4:	e1a00008 	mov	r0, r8
   2e1b8:	ebffefa1 	bl	2a044 <strlen>
   2e1bc:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2e1c0:	e1a02000 	mov	r2, r0
   2e1c4:	e1a01008 	mov	r1, r8
   2e1c8:	e28d000c 	add	r0, sp, #12
   2e1cc:	e28d3018 	add	r3, sp, #24
   2e1d0:	e58dc000 	str	ip, [sp]
   2e1d4:	eb000142 	bl	2e6e4 <JSMNR_parse>
   2e1d8:	e2506000 	subs	r6, r0, #0
   2e1dc:	da000020 	ble	2e264 <jsonGetValueForKey+0xd4>
   2e1e0:	e3a05000 	mov	r5, #0
   2e1e4:	e28d4018 	add	r4, sp, #24
   2e1e8:	ea000002 	b	2e1f8 <jsonGetValueForKey+0x68>
   2e1ec:	e1560005 	cmp	r6, r5
   2e1f0:	e2844010 	add	r4, r4, #16
   2e1f4:	0a00001a 	beq	2e264 <jsonGetValueForKey+0xd4>
   2e1f8:	e5d4c000 	ldrb	ip, [r4]
   2e1fc:	e2855001 	add	r5, r5, #1
   2e200:	e35c0003 	cmp	ip, #3
   2e204:	1afffff8 	bne	2e1ec <jsonGetValueForKey+0x5c>
   2e208:	e1a00007 	mov	r0, r7
   2e20c:	ebffef8c 	bl	2a044 <strlen>
   2e210:	e994000a 	ldmib	r4, {r1, r3}
   2e214:	e0433001 	sub	r3, r3, r1
   2e218:	e1500003 	cmp	r0, r3
   2e21c:	1afffff2 	bne	2e1ec <jsonGetValueForKey+0x5c>
   2e220:	e1a02000 	mov	r2, r0
   2e224:	e0880001 	add	r0, r8, r1
   2e228:	e1a01007 	mov	r1, r7
   2e22c:	ebffefcd 	bl	2a168 <strncmp>
   2e230:	e3500000 	cmp	r0, #0
   2e234:	1affffec 	bne	2e1ec <jsonGetValueForKey+0x5c>
   2e238:	e5941014 	ldr	r1, [r4, #20]
   2e23c:	e5942018 	ldr	r2, [r4, #24]
   2e240:	e0422001 	sub	r2, r2, r1
   2e244:	e1520009 	cmp	r2, r9
   2e248:	aa000005 	bge	2e264 <jsonGetValueForKey+0xd4>
   2e24c:	e1a0000a 	mov	r0, sl
   2e250:	e2822001 	add	r2, r2, #1
   2e254:	e0881001 	add	r1, r8, r1
   2e258:	ebffff1f 	bl	2dedc <strlcpy>
   2e25c:	e3a00001 	mov	r0, #1
   2e260:	ea000000 	b	2e268 <jsonGetValueForKey+0xd8>
   2e264:	e3a00000 	mov	r0, #0
   2e268:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2e26c:	e28dd018 	add	sp, sp, #24
   2e270:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002e274 <jsonGetArrayLen>:
   2e274:	e92d4010 	push	{r4, lr}
   2e278:	e1a04000 	mov	r4, r0
   2e27c:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2e280:	e24dd018 	sub	sp, sp, #24
   2e284:	e28d000c 	add	r0, sp, #12
   2e288:	eb0000fa 	bl	2e678 <JSMNR_init>
   2e28c:	e1a00004 	mov	r0, r4
   2e290:	ebffef6b 	bl	2a044 <strlen>
   2e294:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2e298:	e1a02000 	mov	r2, r0
   2e29c:	e1a01004 	mov	r1, r4
   2e2a0:	e28d3018 	add	r3, sp, #24
   2e2a4:	e28d000c 	add	r0, sp, #12
   2e2a8:	e58dc000 	str	ip, [sp]
   2e2ac:	eb00010c 	bl	2e6e4 <JSMNR_parse>
   2e2b0:	e3500000 	cmp	r0, #0
   2e2b4:	b3a00000 	movlt	r0, #0
   2e2b8:	ba000004 	blt	2e2d0 <jsonGetArrayLen+0x5c>
   2e2bc:	0a000006 	beq	2e2dc <jsonGetArrayLen+0x68>
   2e2c0:	e5dd3018 	ldrb	r3, [sp, #24]
   2e2c4:	e3530002 	cmp	r3, #2
   2e2c8:	1a000003 	bne	2e2dc <jsonGetArrayLen+0x68>
   2e2cc:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   2e2d0:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2e2d4:	e28dd018 	add	sp, sp, #24
   2e2d8:	e8bd8010 	pop	{r4, pc}
   2e2dc:	e3e00000 	mvn	r0, #0
   2e2e0:	eafffffa 	b	2e2d0 <jsonGetArrayLen+0x5c>

0002e2e4 <jsonGetArrayElem>:
   2e2e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e2e8:	e1a08002 	mov	r8, r2
   2e2ec:	e1a06001 	mov	r6, r1
   2e2f0:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2e2f4:	e24dd018 	sub	sp, sp, #24
   2e2f8:	e1a02003 	mov	r2, r3
   2e2fc:	e59f111c 	ldr	r1, [pc, #284]	; 2e420 <jsonGetArrayElem+0x13c>
   2e300:	e1a05000 	mov	r5, r0
   2e304:	e1a00008 	mov	r0, r8
   2e308:	e1a07003 	mov	r7, r3
   2e30c:	ebfffef2 	bl	2dedc <strlcpy>
   2e310:	e28d000c 	add	r0, sp, #12
   2e314:	eb0000d7 	bl	2e678 <JSMNR_init>
   2e318:	e1a00006 	mov	r0, r6
   2e31c:	ebffef48 	bl	2a044 <strlen>
   2e320:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2e324:	e1a02000 	mov	r2, r0
   2e328:	e1a01006 	mov	r1, r6
   2e32c:	e28d000c 	add	r0, sp, #12
   2e330:	e28d3018 	add	r3, sp, #24
   2e334:	e58dc000 	str	ip, [sp]
   2e338:	eb0000e9 	bl	2e6e4 <JSMNR_parse>
   2e33c:	e3500000 	cmp	r0, #0
   2e340:	ca000003 	bgt	2e354 <jsonGetArrayElem+0x70>
   2e344:	e3a00000 	mov	r0, #0
   2e348:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2e34c:	e28dd018 	add	sp, sp, #24
   2e350:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e354:	e5dd3018 	ldrb	r3, [sp, #24]
   2e358:	e3530002 	cmp	r3, #2
   2e35c:	1afffff8 	bne	2e344 <jsonGetArrayElem+0x60>
   2e360:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2e364:	e1530005 	cmp	r3, r5
   2e368:	dafffff5 	ble	2e344 <jsonGetArrayElem+0x60>
   2e36c:	e3550000 	cmp	r5, #0
   2e370:	0a000025 	beq	2e40c <jsonGetArrayElem+0x128>
   2e374:	e3a02000 	mov	r2, #0
   2e378:	e3a0c001 	mov	ip, #1
   2e37c:	e3a0e010 	mov	lr, #16
   2e380:	e28d3ef5 	add	r3, sp, #3920	; 0xf50
   2e384:	e2833008 	add	r3, r3, #8
   2e388:	e083300e 	add	r3, r3, lr
   2e38c:	e150000c 	cmp	r0, ip
   2e390:	e5133f38 	ldr	r3, [r3, #-3896]	; 0xfffff0c8
   2e394:	ca000004 	bgt	2e3ac <jsonGetArrayElem+0xc8>
   2e398:	eaffffe9 	b	2e344 <jsonGetArrayElem+0x60>
   2e39c:	e28cc001 	add	ip, ip, #1
   2e3a0:	e150000c 	cmp	r0, ip
   2e3a4:	0affffe6 	beq	2e344 <jsonGetArrayElem+0x60>
   2e3a8:	e1a0e20c 	lsl	lr, ip, #4
   2e3ac:	e28d1018 	add	r1, sp, #24
   2e3b0:	e081400e 	add	r4, r1, lr
   2e3b4:	e5944004 	ldr	r4, [r4, #4]
   2e3b8:	e1540003 	cmp	r4, r3
   2e3bc:	dafffff6 	ble	2e39c <jsonGetArrayElem+0xb8>
   2e3c0:	e150000c 	cmp	r0, ip
   2e3c4:	daffffde 	ble	2e344 <jsonGetArrayElem+0x60>
   2e3c8:	e2822001 	add	r2, r2, #1
   2e3cc:	e1550002 	cmp	r5, r2
   2e3d0:	1affffea 	bne	2e380 <jsonGetArrayElem+0x9c>
   2e3d4:	e28d3ef5 	add	r3, sp, #3920	; 0xf50
   2e3d8:	e2833008 	add	r3, r3, #8
   2e3dc:	e083e00e 	add	lr, r3, lr
   2e3e0:	e51e1f3c 	ldr	r1, [lr, #-3900]	; 0xfffff0c4
   2e3e4:	e51e2f38 	ldr	r2, [lr, #-3896]	; 0xfffff0c8
   2e3e8:	e1a00008 	mov	r0, r8
   2e3ec:	e0422001 	sub	r2, r2, r1
   2e3f0:	e2822001 	add	r2, r2, #1
   2e3f4:	e1520007 	cmp	r2, r7
   2e3f8:	a1a02007 	movge	r2, r7
   2e3fc:	e0861001 	add	r1, r6, r1
   2e400:	ebfffeb5 	bl	2dedc <strlcpy>
   2e404:	e3a00001 	mov	r0, #1
   2e408:	eaffffce 	b	2e348 <jsonGetArrayElem+0x64>
   2e40c:	e3500001 	cmp	r0, #1
   2e410:	01a00005 	moveq	r0, r5
   2e414:	0affffcb 	beq	2e348 <jsonGetArrayElem+0x64>
   2e418:	e3a0e010 	mov	lr, #16
   2e41c:	eaffffec 	b	2e3d4 <jsonGetArrayElem+0xf0>
   2e420:	000493c8 	.word	0x000493c8

0002e424 <jsonEscape>:
   2e424:	e1d030d0 	ldrsb	r3, [r0]
   2e428:	e92d4070 	push	{r4, r5, r6, lr}
   2e42c:	e3530000 	cmp	r3, #0
   2e430:	0a00002d 	beq	2e4ec <jsonEscape+0xc8>
   2e434:	e3520002 	cmp	r2, #2
   2e438:	e3a0e000 	mov	lr, #0
   2e43c:	da00001a 	ble	2e4ac <jsonEscape+0x88>
   2e440:	e3a0c002 	mov	ip, #2
   2e444:	e3a0505c 	mov	r5, #92	; 0x5c
   2e448:	e3a0606e 	mov	r6, #110	; 0x6e
   2e44c:	ea000009 	b	2e478 <jsonEscape+0x54>
   2e450:	e353000a 	cmp	r3, #10
   2e454:	14c13001 	strbne	r3, [r1], #1
   2e458:	128ee001 	addne	lr, lr, #1
   2e45c:	0a00001c 	beq	2e4d4 <jsonEscape+0xb0>
   2e460:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2e464:	e28ec002 	add	ip, lr, #2
   2e468:	e3530000 	cmp	r3, #0
   2e46c:	0a00000e 	beq	2e4ac <jsonEscape+0x88>
   2e470:	e15c0002 	cmp	ip, r2
   2e474:	aa00000c 	bge	2e4ac <jsonEscape+0x88>
   2e478:	e3530022 	cmp	r3, #34	; 0x22
   2e47c:	0a00000e 	beq	2e4bc <jsonEscape+0x98>
   2e480:	e353005c 	cmp	r3, #92	; 0x5c
   2e484:	1afffff1 	bne	2e450 <jsonEscape+0x2c>
   2e488:	e1a04001 	mov	r4, r1
   2e48c:	e1a0e00c 	mov	lr, ip
   2e490:	e4c43002 	strb	r3, [r4], #2
   2e494:	e5c13001 	strb	r3, [r1, #1]
   2e498:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2e49c:	e1a01004 	mov	r1, r4
   2e4a0:	e3530000 	cmp	r3, #0
   2e4a4:	e28ec002 	add	ip, lr, #2
   2e4a8:	1afffff0 	bne	2e470 <jsonEscape+0x4c>
   2e4ac:	e152000e 	cmp	r2, lr
   2e4b0:	c3a03000 	movgt	r3, #0
   2e4b4:	c5c13000 	strbgt	r3, [r1]
   2e4b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2e4bc:	e1a04001 	mov	r4, r1
   2e4c0:	e4c45002 	strb	r5, [r4], #2
   2e4c4:	e1a0e00c 	mov	lr, ip
   2e4c8:	e5c13001 	strb	r3, [r1, #1]
   2e4cc:	e1a01004 	mov	r1, r4
   2e4d0:	eaffffe2 	b	2e460 <jsonEscape+0x3c>
   2e4d4:	e1a03001 	mov	r3, r1
   2e4d8:	e4c35002 	strb	r5, [r3], #2
   2e4dc:	e1a0e00c 	mov	lr, ip
   2e4e0:	e5c16001 	strb	r6, [r1, #1]
   2e4e4:	e1a01003 	mov	r1, r3
   2e4e8:	eaffffdc 	b	2e460 <jsonEscape+0x3c>
   2e4ec:	e1a0e003 	mov	lr, r3
   2e4f0:	eaffffed 	b	2e4ac <jsonEscape+0x88>

0002e4f4 <rdisspace>:
   2e4f4:	e3500020 	cmp	r0, #32
   2e4f8:	0a000004 	beq	2e510 <rdisspace+0x1c>
   2e4fc:	e2400009 	sub	r0, r0, #9
   2e500:	e3500004 	cmp	r0, #4
   2e504:	83a00000 	movhi	r0, #0
   2e508:	93a00001 	movls	r0, #1
   2e50c:	e12fff1e 	bx	lr
   2e510:	e3a00001 	mov	r0, #1
   2e514:	e12fff1e 	bx	lr

0002e518 <rdisdigit>:
   2e518:	e2400030 	sub	r0, r0, #48	; 0x30
   2e51c:	e3500009 	cmp	r0, #9
   2e520:	83a00000 	movhi	r0, #0
   2e524:	93a00001 	movls	r0, #1
   2e528:	e12fff1e 	bx	lr

0002e52c <rdisupper>:
   2e52c:	e2400041 	sub	r0, r0, #65	; 0x41
   2e530:	e3500019 	cmp	r0, #25
   2e534:	83a00000 	movhi	r0, #0
   2e538:	93a00001 	movls	r0, #1
   2e53c:	e12fff1e 	bx	lr

0002e540 <rdislower>:
   2e540:	e2400061 	sub	r0, r0, #97	; 0x61
   2e544:	e3500019 	cmp	r0, #25
   2e548:	83a00000 	movhi	r0, #0
   2e54c:	93a00001 	movls	r0, #1
   2e550:	e12fff1e 	bx	lr

0002e554 <rdtolower>:
   2e554:	e6ef3070 	uxtb	r3, r0
   2e558:	e2432041 	sub	r2, r3, #65	; 0x41
   2e55c:	e3520019 	cmp	r2, #25
   2e560:	92830020 	addls	r0, r3, #32
   2e564:	96af0070 	sxtbls	r0, r0
   2e568:	e12fff1e 	bx	lr

0002e56c <rdtoupper>:
   2e56c:	e6ef3070 	uxtb	r3, r0
   2e570:	e2432061 	sub	r2, r3, #97	; 0x61
   2e574:	e3520019 	cmp	r2, #25
   2e578:	92430020 	subls	r0, r3, #32
   2e57c:	96af0070 	sxtbls	r0, r0
   2e580:	e12fff1e 	bx	lr

0002e584 <rdisalpha>:
   2e584:	e3c00020 	bic	r0, r0, #32
   2e588:	e2400041 	sub	r0, r0, #65	; 0x41
   2e58c:	e3500019 	cmp	r0, #25
   2e590:	83a00000 	movhi	r0, #0
   2e594:	93a00001 	movls	r0, #1
   2e598:	e12fff1e 	bx	lr

0002e59c <rdstrrev>:
   2e59c:	e92d4070 	push	{r4, r5, r6, lr}
   2e5a0:	e1a04000 	mov	r4, r0
   2e5a4:	ebffeea6 	bl	2a044 <strlen>
   2e5a8:	e2403001 	sub	r3, r0, #1
   2e5ac:	e3530000 	cmp	r3, #0
   2e5b0:	d8bd8070 	pople	{r4, r5, r6, pc}
   2e5b4:	e3e06001 	mvn	r6, #1
   2e5b8:	e2441001 	sub	r1, r4, #1
   2e5bc:	e084c000 	add	ip, r4, r0
   2e5c0:	e1a02001 	mov	r2, r1
   2e5c4:	e5f1e001 	ldrb	lr, [r1, #1]!
   2e5c8:	e2822002 	add	r2, r2, #2
   2e5cc:	e0463001 	sub	r3, r6, r1
   2e5d0:	e0833004 	add	r3, r3, r4
   2e5d4:	e57c5001 	ldrb	r5, [ip, #-1]!
   2e5d8:	e0422004 	sub	r2, r2, r4
   2e5dc:	e0833000 	add	r3, r3, r0
   2e5e0:	e1520003 	cmp	r2, r3
   2e5e4:	e5c15000 	strb	r5, [r1]
   2e5e8:	e5cce000 	strb	lr, [ip]
   2e5ec:	bafffff3 	blt	2e5c0 <rdstrrev+0x24>
   2e5f0:	e8bd8070 	pop	{r4, r5, r6, pc}

0002e5f4 <rditoa>:
   2e5f4:	e3520000 	cmp	r2, #0
   2e5f8:	0a00001c 	beq	2e670 <rditoa+0x7c>
   2e5fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e600:	e1a07001 	mov	r7, r1
   2e604:	e1a05003 	mov	r5, r3
   2e608:	e1a08001 	mov	r8, r1
   2e60c:	e2424001 	sub	r4, r2, #1
   2e610:	e2616001 	rsb	r6, r1, #1
   2e614:	ea000002 	b	2e624 <rditoa+0x30>
   2e618:	e1540003 	cmp	r4, r3
   2e61c:	e2888001 	add	r8, r8, #1
   2e620:	da00000f 	ble	2e664 <rditoa+0x70>
   2e624:	e1a01005 	mov	r1, r5
   2e628:	eb0041d7 	bl	3ed8c <__aeabi_idivmod>
   2e62c:	e3510009 	cmp	r1, #9
   2e630:	e2813030 	add	r3, r1, #48	; 0x30
   2e634:	c2811037 	addgt	r1, r1, #55	; 0x37
   2e638:	d5c83000 	strble	r3, [r8]
   2e63c:	c5c81000 	strbgt	r1, [r8]
   2e640:	e3500000 	cmp	r0, #0
   2e644:	e0863008 	add	r3, r6, r8
   2e648:	1afffff2 	bne	2e618 <rditoa+0x24>
   2e64c:	e3a04000 	mov	r4, #0
   2e650:	e1a00007 	mov	r0, r7
   2e654:	e7c74003 	strb	r4, [r7, r3]
   2e658:	ebffffcf 	bl	2e59c <rdstrrev>
   2e65c:	e1a00004 	mov	r0, r4
   2e660:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e664:	1afffff8 	bne	2e64c <rditoa+0x58>
   2e668:	e3e00000 	mvn	r0, #0
   2e66c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e670:	e3e00000 	mvn	r0, #0
   2e674:	e12fff1e 	bx	lr

0002e678 <JSMNR_init>:
   2e678:	e3a03000 	mov	r3, #0
   2e67c:	e3e02000 	mvn	r2, #0
   2e680:	e5803000 	str	r3, [r0]
   2e684:	e5802008 	str	r2, [r0, #8]
   2e688:	e5803004 	str	r3, [r0, #4]
   2e68c:	e12fff1e 	bx	lr

0002e690 <JSMNR_logLongStr>:
   2e690:	e92d48f0 	push	{r4, r5, r6, r7, fp, lr}
   2e694:	e3a04000 	mov	r4, #0
   2e698:	e1a05001 	mov	r5, r1
   2e69c:	e1a07004 	mov	r7, r4
   2e6a0:	e28db014 	add	fp, sp, #20
   2e6a4:	ea000007 	b	2e6c8 <JSMNR_logLongStr+0x38>
   2e6a8:	e1a0600d 	mov	r6, sp
   2e6ac:	e24dd058 	sub	sp, sp, #88	; 0x58
   2e6b0:	e1a0000d 	mov	r0, sp
   2e6b4:	e3a02051 	mov	r2, #81	; 0x51
   2e6b8:	ebfffe07 	bl	2dedc <strlcpy>
   2e6bc:	e5cd7050 	strb	r7, [sp, #80]	; 0x50
   2e6c0:	e1a0d006 	mov	sp, r6
   2e6c4:	e2844050 	add	r4, r4, #80	; 0x50
   2e6c8:	e1a00005 	mov	r0, r5
   2e6cc:	ebffee5c 	bl	2a044 <strlen>
   2e6d0:	e1500004 	cmp	r0, r4
   2e6d4:	e0851004 	add	r1, r5, r4
   2e6d8:	8afffff2 	bhi	2e6a8 <JSMNR_logLongStr+0x18>
   2e6dc:	e24bd014 	sub	sp, fp, #20
   2e6e0:	e8bd88f0 	pop	{r4, r5, r6, r7, fp, pc}

0002e6e4 <JSMNR_parse>:
   2e6e4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e6e8:	e590e000 	ldr	lr, [r0]
   2e6ec:	e5905004 	ldr	r5, [r0, #4]
   2e6f0:	e15e0002 	cmp	lr, r2
   2e6f4:	2a000045 	bcs	2e810 <JSMNR_parse+0x12c>
   2e6f8:	e2839004 	add	r9, r3, #4
   2e6fc:	e283b008 	add	fp, r3, #8
   2e700:	e191c0de 	ldrsb	ip, [r1, lr]
   2e704:	e35c0000 	cmp	ip, #0
   2e708:	0a000040 	beq	2e810 <JSMNR_parse+0x12c>
   2e70c:	e35c003a 	cmp	ip, #58	; 0x3a
   2e710:	ca000131 	bgt	2ebdc <JSMNR_parse+0x4f8>
   2e714:	e35c0008 	cmp	ip, #8
   2e718:	da00004f 	ble	2e85c <JSMNR_parse+0x178>
   2e71c:	e24cc009 	sub	ip, ip, #9
   2e720:	e35c0031 	cmp	ip, #49	; 0x31
   2e724:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
   2e728:	ea00004b 	b	2e85c <JSMNR_parse+0x178>
   2e72c:	0002e7fc 	.word	0x0002e7fc
   2e730:	0002e7fc 	.word	0x0002e7fc
   2e734:	0002e85c 	.word	0x0002e85c
   2e738:	0002e85c 	.word	0x0002e85c
   2e73c:	0002e7fc 	.word	0x0002e7fc
   2e740:	0002e85c 	.word	0x0002e85c
   2e744:	0002e85c 	.word	0x0002e85c
   2e748:	0002e85c 	.word	0x0002e85c
   2e74c:	0002e85c 	.word	0x0002e85c
   2e750:	0002e85c 	.word	0x0002e85c
   2e754:	0002e85c 	.word	0x0002e85c
   2e758:	0002e85c 	.word	0x0002e85c
   2e75c:	0002e85c 	.word	0x0002e85c
   2e760:	0002e85c 	.word	0x0002e85c
   2e764:	0002e85c 	.word	0x0002e85c
   2e768:	0002e85c 	.word	0x0002e85c
   2e76c:	0002e85c 	.word	0x0002e85c
   2e770:	0002e85c 	.word	0x0002e85c
   2e774:	0002e85c 	.word	0x0002e85c
   2e778:	0002e85c 	.word	0x0002e85c
   2e77c:	0002e85c 	.word	0x0002e85c
   2e780:	0002e85c 	.word	0x0002e85c
   2e784:	0002e85c 	.word	0x0002e85c
   2e788:	0002e7fc 	.word	0x0002e7fc
   2e78c:	0002e85c 	.word	0x0002e85c
   2e790:	0002e9c8 	.word	0x0002e9c8
   2e794:	0002e85c 	.word	0x0002e85c
   2e798:	0002e85c 	.word	0x0002e85c
   2e79c:	0002e85c 	.word	0x0002e85c
   2e7a0:	0002e85c 	.word	0x0002e85c
   2e7a4:	0002e85c 	.word	0x0002e85c
   2e7a8:	0002e85c 	.word	0x0002e85c
   2e7ac:	0002e85c 	.word	0x0002e85c
   2e7b0:	0002e85c 	.word	0x0002e85c
   2e7b4:	0002e85c 	.word	0x0002e85c
   2e7b8:	0002e948 	.word	0x0002e948
   2e7bc:	0002e85c 	.word	0x0002e85c
   2e7c0:	0002e85c 	.word	0x0002e85c
   2e7c4:	0002e85c 	.word	0x0002e85c
   2e7c8:	0002e85c 	.word	0x0002e85c
   2e7cc:	0002e85c 	.word	0x0002e85c
   2e7d0:	0002e85c 	.word	0x0002e85c
   2e7d4:	0002e85c 	.word	0x0002e85c
   2e7d8:	0002e85c 	.word	0x0002e85c
   2e7dc:	0002e85c 	.word	0x0002e85c
   2e7e0:	0002e85c 	.word	0x0002e85c
   2e7e4:	0002e85c 	.word	0x0002e85c
   2e7e8:	0002e85c 	.word	0x0002e85c
   2e7ec:	0002e85c 	.word	0x0002e85c
   2e7f0:	0002e930 	.word	0x0002e930
   2e7f4:	e37c0001 	cmn	ip, #1
   2e7f8:	0a00010d 	beq	2ec34 <JSMNR_parse+0x550>
   2e7fc:	e590e000 	ldr	lr, [r0]
   2e800:	e28ee001 	add	lr, lr, #1
   2e804:	e152000e 	cmp	r2, lr
   2e808:	e580e000 	str	lr, [r0]
   2e80c:	8affffbb 	bhi	2e700 <JSMNR_parse+0x1c>
   2e810:	e3530000 	cmp	r3, #0
   2e814:	0a0000aa 	beq	2eac4 <JSMNR_parse+0x3e0>
   2e818:	e5902004 	ldr	r2, [r0, #4]
   2e81c:	e2522001 	subs	r2, r2, #1
   2e820:	4a0000a7 	bmi	2eac4 <JSMNR_parse+0x3e0>
   2e824:	e2830004 	add	r0, r3, #4
   2e828:	e2833008 	add	r3, r3, #8
   2e82c:	ea000001 	b	2e838 <JSMNR_parse+0x154>
   2e830:	e2522001 	subs	r2, r2, #1
   2e834:	3a0000a2 	bcc	2eac4 <JSMNR_parse+0x3e0>
   2e838:	e7901202 	ldr	r1, [r0, r2, lsl #4]
   2e83c:	e3710001 	cmn	r1, #1
   2e840:	0afffffa 	beq	2e830 <JSMNR_parse+0x14c>
   2e844:	e7931202 	ldr	r1, [r3, r2, lsl #4]
   2e848:	e3710001 	cmn	r1, #1
   2e84c:	1afffff7 	bne	2e830 <JSMNR_parse+0x14c>
   2e850:	e3e05002 	mvn	r5, #2
   2e854:	e1a00005 	mov	r0, r5
   2e858:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e85c:	e5904000 	ldr	r4, [r0]
   2e860:	e1540002 	cmp	r4, r2
   2e864:	2a000016 	bcs	2e8c4 <JSMNR_parse+0x1e0>
   2e868:	e2446001 	sub	r6, r4, #1
   2e86c:	e0816006 	add	r6, r1, r6
   2e870:	ea000009 	b	2e89c <JSMNR_parse+0x1b8>
   2e874:	e35c0008 	cmp	ip, #8
   2e878:	ca0000af 	bgt	2eb3c <JSMNR_parse+0x458>
   2e87c:	e24cc020 	sub	ip, ip, #32
   2e880:	e6efc07c 	uxtb	ip, ip
   2e884:	e35c005e 	cmp	ip, #94	; 0x5e
   2e888:	e2844001 	add	r4, r4, #1
   2e88c:	8a00008a 	bhi	2eabc <JSMNR_parse+0x3d8>
   2e890:	e1520004 	cmp	r2, r4
   2e894:	e5804000 	str	r4, [r0]
   2e898:	0a000009 	beq	2e8c4 <JSMNR_parse+0x1e0>
   2e89c:	e1f6c0d1 	ldrsb	ip, [r6, #1]!
   2e8a0:	e35c0000 	cmp	ip, #0
   2e8a4:	e3cc7020 	bic	r7, ip, #32
   2e8a8:	0a000005 	beq	2e8c4 <JSMNR_parse+0x1e0>
   2e8ac:	e35c002c 	cmp	ip, #44	; 0x2c
   2e8b0:	daffffef 	ble	2e874 <JSMNR_parse+0x190>
   2e8b4:	e357005d 	cmp	r7, #93	; 0x5d
   2e8b8:	0a000001 	beq	2e8c4 <JSMNR_parse+0x1e0>
   2e8bc:	e35c003a 	cmp	ip, #58	; 0x3a
   2e8c0:	1affffed 	bne	2e87c <JSMNR_parse+0x198>
   2e8c4:	e3530000 	cmp	r3, #0
   2e8c8:	01a0e004 	moveq	lr, r4
   2e8cc:	02855001 	addeq	r5, r5, #1
   2e8d0:	0affffcb 	beq	2e804 <JSMNR_parse+0x120>
   2e8d4:	e590c004 	ldr	ip, [r0, #4]
   2e8d8:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   2e8dc:	e156000c 	cmp	r6, ip
   2e8e0:	9a000129 	bls	2ed8c <JSMNR_parse+0x6a8>
   2e8e4:	e28c7001 	add	r7, ip, #1
   2e8e8:	e5807004 	str	r7, [r0, #4]
   2e8ec:	e3a07000 	mov	r7, #0
   2e8f0:	e083620c 	add	r6, r3, ip, lsl #4
   2e8f4:	e586700c 	str	r7, [r6, #12]
   2e8f8:	e3a07004 	mov	r7, #4
   2e8fc:	e7c3720c 	strb	r7, [r3, ip, lsl #4]
   2e900:	e590c008 	ldr	ip, [r0, #8]
   2e904:	e586e004 	str	lr, [r6, #4]
   2e908:	e37c0001 	cmn	ip, #1
   2e90c:	1083c20c 	addne	ip, r3, ip, lsl #4
   2e910:	e5864008 	str	r4, [r6, #8]
   2e914:	159c600c 	ldrne	r6, [ip, #12]
   2e918:	11a0e004 	movne	lr, r4
   2e91c:	12864001 	addne	r4, r6, #1
   2e920:	01a0e004 	moveq	lr, r4
   2e924:	e2855001 	add	r5, r5, #1
   2e928:	158c400c 	strne	r4, [ip, #12]
   2e92c:	eaffffb4 	b	2e804 <JSMNR_parse+0x120>
   2e930:	e590c004 	ldr	ip, [r0, #4]
   2e934:	e590e000 	ldr	lr, [r0]
   2e938:	e24cc001 	sub	ip, ip, #1
   2e93c:	e580c008 	str	ip, [r0, #8]
   2e940:	e28ee001 	add	lr, lr, #1
   2e944:	eaffffae 	b	2e804 <JSMNR_parse+0x120>
   2e948:	e3530000 	cmp	r3, #0
   2e94c:	0affffaa 	beq	2e7fc <JSMNR_parse+0x118>
   2e950:	e590c008 	ldr	ip, [r0, #8]
   2e954:	e37c0001 	cmn	ip, #1
   2e958:	0affffa7 	beq	2e7fc <JSMNR_parse+0x118>
   2e95c:	e7d3c20c 	ldrb	ip, [r3, ip, lsl #4]
   2e960:	e24cc001 	sub	ip, ip, #1
   2e964:	e35c0001 	cmp	ip, #1
   2e968:	9affffa3 	bls	2e7fc <JSMNR_parse+0x118>
   2e96c:	e590e004 	ldr	lr, [r0, #4]
   2e970:	e25e4001 	subs	r4, lr, #1
   2e974:	5083e20e 	addpl	lr, r3, lr, lsl #4
   2e978:	5a000004 	bpl	2e990 <JSMNR_parse+0x2ac>
   2e97c:	eaffff9e 	b	2e7fc <JSMNR_parse+0x118>
   2e980:	e2444001 	sub	r4, r4, #1
   2e984:	e3740001 	cmn	r4, #1
   2e988:	e24ee010 	sub	lr, lr, #16
   2e98c:	0affff9a 	beq	2e7fc <JSMNR_parse+0x118>
   2e990:	e55ec010 	ldrb	ip, [lr, #-16]
   2e994:	e24cc001 	sub	ip, ip, #1
   2e998:	e35c0001 	cmp	ip, #1
   2e99c:	8afffff7 	bhi	2e980 <JSMNR_parse+0x29c>
   2e9a0:	e51ec00c 	ldr	ip, [lr, #-12]
   2e9a4:	e37c0001 	cmn	ip, #1
   2e9a8:	0afffff4 	beq	2e980 <JSMNR_parse+0x29c>
   2e9ac:	e51ec008 	ldr	ip, [lr, #-8]
   2e9b0:	e37c0001 	cmn	ip, #1
   2e9b4:	1afffff1 	bne	2e980 <JSMNR_parse+0x29c>
   2e9b8:	e590e000 	ldr	lr, [r0]
   2e9bc:	e5804008 	str	r4, [r0, #8]
   2e9c0:	e28ee001 	add	lr, lr, #1
   2e9c4:	eaffff8e 	b	2e804 <JSMNR_parse+0x120>
   2e9c8:	e28ea001 	add	sl, lr, #1
   2e9cc:	e152000a 	cmp	r2, sl
   2e9d0:	e1a0c00a 	mov	ip, sl
   2e9d4:	e580a000 	str	sl, [r0]
   2e9d8:	8a000005 	bhi	2e9f4 <JSMNR_parse+0x310>
   2e9dc:	ea000050 	b	2eb24 <JSMNR_parse+0x440>
   2e9e0:	e590c000 	ldr	ip, [r0]
   2e9e4:	e28cc001 	add	ip, ip, #1
   2e9e8:	e152000c 	cmp	r2, ip
   2e9ec:	e580c000 	str	ip, [r0]
   2e9f0:	9a00004b 	bls	2eb24 <JSMNR_parse+0x440>
   2e9f4:	e19140dc 	ldrsb	r4, [r1, ip]
   2e9f8:	e3540000 	cmp	r4, #0
   2e9fc:	0a000048 	beq	2eb24 <JSMNR_parse+0x440>
   2ea00:	e3540022 	cmp	r4, #34	; 0x22
   2ea04:	0a0000c3 	beq	2ed18 <JSMNR_parse+0x634>
   2ea08:	e354005c 	cmp	r4, #92	; 0x5c
   2ea0c:	1afffff3 	bne	2e9e0 <JSMNR_parse+0x2fc>
   2ea10:	e28c4001 	add	r4, ip, #1
   2ea14:	e1520004 	cmp	r2, r4
   2ea18:	9afffff0 	bls	2e9e0 <JSMNR_parse+0x2fc>
   2ea1c:	e5804000 	str	r4, [r0]
   2ea20:	e19140d4 	ldrsb	r4, [r1, r4]
   2ea24:	e3540075 	cmp	r4, #117	; 0x75
   2ea28:	ca000023 	bgt	2eabc <JSMNR_parse+0x3d8>
   2ea2c:	e354005b 	cmp	r4, #91	; 0x5b
   2ea30:	da00001d 	ble	2eaac <JSMNR_parse+0x3c8>
   2ea34:	e244405c 	sub	r4, r4, #92	; 0x5c
   2ea38:	e3540019 	cmp	r4, #25
   2ea3c:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
   2ea40:	ea00001d 	b	2eabc <JSMNR_parse+0x3d8>
   2ea44:	0002eb34 	.word	0x0002eb34
   2ea48:	0002eabc 	.word	0x0002eabc
   2ea4c:	0002eabc 	.word	0x0002eabc
   2ea50:	0002eabc 	.word	0x0002eabc
   2ea54:	0002eabc 	.word	0x0002eabc
   2ea58:	0002eabc 	.word	0x0002eabc
   2ea5c:	0002eb34 	.word	0x0002eb34
   2ea60:	0002eabc 	.word	0x0002eabc
   2ea64:	0002eabc 	.word	0x0002eabc
   2ea68:	0002eabc 	.word	0x0002eabc
   2ea6c:	0002eb34 	.word	0x0002eb34
   2ea70:	0002eabc 	.word	0x0002eabc
   2ea74:	0002eabc 	.word	0x0002eabc
   2ea78:	0002eabc 	.word	0x0002eabc
   2ea7c:	0002eabc 	.word	0x0002eabc
   2ea80:	0002eabc 	.word	0x0002eabc
   2ea84:	0002eabc 	.word	0x0002eabc
   2ea88:	0002eabc 	.word	0x0002eabc
   2ea8c:	0002eb34 	.word	0x0002eb34
   2ea90:	0002eabc 	.word	0x0002eabc
   2ea94:	0002eabc 	.word	0x0002eabc
   2ea98:	0002eabc 	.word	0x0002eabc
   2ea9c:	0002eb34 	.word	0x0002eb34
   2eaa0:	0002eabc 	.word	0x0002eabc
   2eaa4:	0002eb34 	.word	0x0002eb34
   2eaa8:	0002eacc 	.word	0x0002eacc
   2eaac:	e3540022 	cmp	r4, #34	; 0x22
   2eab0:	0a00001f 	beq	2eb34 <JSMNR_parse+0x450>
   2eab4:	e354002f 	cmp	r4, #47	; 0x2f
   2eab8:	0a00001d 	beq	2eb34 <JSMNR_parse+0x450>
   2eabc:	e3e05001 	mvn	r5, #1
   2eac0:	e580e000 	str	lr, [r0]
   2eac4:	e1a00005 	mov	r0, r5
   2eac8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eacc:	e28c4002 	add	r4, ip, #2
   2ead0:	e5804000 	str	r4, [r0]
   2ead4:	e28cc006 	add	ip, ip, #6
   2ead8:	e1520004 	cmp	r2, r4
   2eadc:	0a0000b0 	beq	2eda4 <JSMNR_parse+0x6c0>
   2eae0:	e19160d4 	ldrsb	r6, [r1, r4]
   2eae4:	e20680df 	and	r8, r6, #223	; 0xdf
   2eae8:	e2467030 	sub	r7, r6, #48	; 0x30
   2eaec:	e3560000 	cmp	r6, #0
   2eaf0:	e2488041 	sub	r8, r8, #65	; 0x41
   2eaf4:	e20770ff 	and	r7, r7, #255	; 0xff
   2eaf8:	0a0000ab 	beq	2edac <JSMNR_parse+0x6c8>
   2eafc:	e3580005 	cmp	r8, #5
   2eb00:	83570009 	cmphi	r7, #9
   2eb04:	e2844001 	add	r4, r4, #1
   2eb08:	8affffeb 	bhi	2eabc <JSMNR_parse+0x3d8>
   2eb0c:	e154000c 	cmp	r4, ip
   2eb10:	e5804000 	str	r4, [r0]
   2eb14:	1affffef 	bne	2ead8 <JSMNR_parse+0x3f4>
   2eb18:	e152000c 	cmp	r2, ip
   2eb1c:	e580c000 	str	ip, [r0]
   2eb20:	8affffb3 	bhi	2e9f4 <JSMNR_parse+0x310>
   2eb24:	e3e05002 	mvn	r5, #2
   2eb28:	e580e000 	str	lr, [r0]
   2eb2c:	e1a00005 	mov	r0, r5
   2eb30:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eb34:	e28cc002 	add	ip, ip, #2
   2eb38:	eaffffaa 	b	2e9e8 <JSMNR_parse+0x304>
   2eb3c:	e24c7009 	sub	r7, ip, #9
   2eb40:	e3570023 	cmp	r7, #35	; 0x23
   2eb44:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
   2eb48:	eaffff4b 	b	2e87c <JSMNR_parse+0x198>
   2eb4c:	0002e8c4 	.word	0x0002e8c4
   2eb50:	0002e8c4 	.word	0x0002e8c4
   2eb54:	0002e87c 	.word	0x0002e87c
   2eb58:	0002e87c 	.word	0x0002e87c
   2eb5c:	0002e8c4 	.word	0x0002e8c4
   2eb60:	0002e87c 	.word	0x0002e87c
   2eb64:	0002e87c 	.word	0x0002e87c
   2eb68:	0002e87c 	.word	0x0002e87c
   2eb6c:	0002e87c 	.word	0x0002e87c
   2eb70:	0002e87c 	.word	0x0002e87c
   2eb74:	0002e87c 	.word	0x0002e87c
   2eb78:	0002e87c 	.word	0x0002e87c
   2eb7c:	0002e87c 	.word	0x0002e87c
   2eb80:	0002e87c 	.word	0x0002e87c
   2eb84:	0002e87c 	.word	0x0002e87c
   2eb88:	0002e87c 	.word	0x0002e87c
   2eb8c:	0002e87c 	.word	0x0002e87c
   2eb90:	0002e87c 	.word	0x0002e87c
   2eb94:	0002e87c 	.word	0x0002e87c
   2eb98:	0002e87c 	.word	0x0002e87c
   2eb9c:	0002e87c 	.word	0x0002e87c
   2eba0:	0002e87c 	.word	0x0002e87c
   2eba4:	0002e87c 	.word	0x0002e87c
   2eba8:	0002e8c4 	.word	0x0002e8c4
   2ebac:	0002e87c 	.word	0x0002e87c
   2ebb0:	0002e87c 	.word	0x0002e87c
   2ebb4:	0002e87c 	.word	0x0002e87c
   2ebb8:	0002e87c 	.word	0x0002e87c
   2ebbc:	0002e87c 	.word	0x0002e87c
   2ebc0:	0002e87c 	.word	0x0002e87c
   2ebc4:	0002e87c 	.word	0x0002e87c
   2ebc8:	0002e87c 	.word	0x0002e87c
   2ebcc:	0002e87c 	.word	0x0002e87c
   2ebd0:	0002e87c 	.word	0x0002e87c
   2ebd4:	0002e87c 	.word	0x0002e87c
   2ebd8:	0002e8c4 	.word	0x0002e8c4
   2ebdc:	e35c007b 	cmp	ip, #123	; 0x7b
   2ebe0:	0a000020 	beq	2ec68 <JSMNR_parse+0x584>
   2ebe4:	da000017 	ble	2ec48 <JSMNR_parse+0x564>
   2ebe8:	e35c007d 	cmp	ip, #125	; 0x7d
   2ebec:	1affff1a 	bne	2e85c <JSMNR_parse+0x178>
   2ebf0:	e3530000 	cmp	r3, #0
   2ebf4:	13a07001 	movne	r7, #1
   2ebf8:	0afffeff 	beq	2e7fc <JSMNR_parse+0x118>
   2ebfc:	e590c004 	ldr	ip, [r0, #4]
   2ec00:	e25cc001 	subs	ip, ip, #1
   2ec04:	4afffefa 	bmi	2e7f4 <JSMNR_parse+0x110>
   2ec08:	e083420c 	add	r4, r3, ip, lsl #4
   2ec0c:	e5946004 	ldr	r6, [r4, #4]
   2ec10:	e3760001 	cmn	r6, #1
   2ec14:	0a000002 	beq	2ec24 <JSMNR_parse+0x540>
   2ec18:	e5946008 	ldr	r6, [r4, #8]
   2ec1c:	e3760001 	cmn	r6, #1
   2ec20:	0a00002d 	beq	2ecdc <JSMNR_parse+0x5f8>
   2ec24:	e24cc001 	sub	ip, ip, #1
   2ec28:	e37c0001 	cmn	ip, #1
   2ec2c:	e2444010 	sub	r4, r4, #16
   2ec30:	1afffff5 	bne	2ec0c <JSMNR_parse+0x528>
   2ec34:	e3a02001 	mov	r2, #1
   2ec38:	e59f018c 	ldr	r0, [pc, #396]	; 2edcc <JSMNR_parse+0x6e8>
   2ec3c:	ebfffe93 	bl	2e690 <JSMNR_logLongStr>
   2ec40:	e3e05001 	mvn	r5, #1
   2ec44:	eaffff9e 	b	2eac4 <JSMNR_parse+0x3e0>
   2ec48:	e35c005b 	cmp	ip, #91	; 0x5b
   2ec4c:	0a000005 	beq	2ec68 <JSMNR_parse+0x584>
   2ec50:	e35c005d 	cmp	ip, #93	; 0x5d
   2ec54:	1affff00 	bne	2e85c <JSMNR_parse+0x178>
   2ec58:	e3530000 	cmp	r3, #0
   2ec5c:	13a07002 	movne	r7, #2
   2ec60:	0afffee5 	beq	2e7fc <JSMNR_parse+0x118>
   2ec64:	eaffffe4 	b	2ebfc <JSMNR_parse+0x518>
   2ec68:	e3530000 	cmp	r3, #0
   2ec6c:	e2855001 	add	r5, r5, #1
   2ec70:	0afffee1 	beq	2e7fc <JSMNR_parse+0x118>
   2ec74:	e5904004 	ldr	r4, [r0, #4]
   2ec78:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   2ec7c:	e1560004 	cmp	r6, r4
   2ec80:	9a000045 	bls	2ed9c <JSMNR_parse+0x6b8>
   2ec84:	e2848001 	add	r8, r4, #1
   2ec88:	e5808004 	str	r8, [r0, #4]
   2ec8c:	e3e08000 	mvn	r8, #0
   2ec90:	e0837204 	add	r7, r3, r4, lsl #4
   2ec94:	e5906008 	ldr	r6, [r0, #8]
   2ec98:	e5878008 	str	r8, [r7, #8]
   2ec9c:	e3a08000 	mov	r8, #0
   2eca0:	e3760001 	cmn	r6, #1
   2eca4:	e587800c 	str	r8, [r7, #12]
   2eca8:	10836206 	addne	r6, r3, r6, lsl #4
   2ecac:	1596800c 	ldrne	r8, [r6, #12]
   2ecb0:	12888001 	addne	r8, r8, #1
   2ecb4:	1586800c 	strne	r8, [r6, #12]
   2ecb8:	e35c007b 	cmp	ip, #123	; 0x7b
   2ecbc:	03a0c001 	moveq	ip, #1
   2ecc0:	13a0c002 	movne	ip, #2
   2ecc4:	e7c3c204 	strb	ip, [r3, r4, lsl #4]
   2ecc8:	e590c000 	ldr	ip, [r0]
   2eccc:	e587e004 	str	lr, [r7, #4]
   2ecd0:	e5804008 	str	r4, [r0, #8]
   2ecd4:	e28ce001 	add	lr, ip, #1
   2ecd8:	eafffec9 	b	2e804 <JSMNR_parse+0x120>
   2ecdc:	e5d48000 	ldrb	r8, [r4]
   2ece0:	e1580007 	cmp	r8, r7
   2ece4:	1a000036 	bne	2edc4 <JSMNR_parse+0x6e0>
   2ece8:	e28ee001 	add	lr, lr, #1
   2ecec:	e5806008 	str	r6, [r0, #8]
   2ecf0:	e584e008 	str	lr, [r4, #8]
   2ecf4:	e799e20c 	ldr	lr, [r9, ip, lsl #4]
   2ecf8:	e37e0001 	cmn	lr, #1
   2ecfc:	0a000002 	beq	2ed0c <JSMNR_parse+0x628>
   2ed00:	e79be20c 	ldr	lr, [fp, ip, lsl #4]
   2ed04:	e37e0001 	cmn	lr, #1
   2ed08:	0a00001b 	beq	2ed7c <JSMNR_parse+0x698>
   2ed0c:	e25cc001 	subs	ip, ip, #1
   2ed10:	2afffff7 	bcs	2ecf4 <JSMNR_parse+0x610>
   2ed14:	eafffeb8 	b	2e7fc <JSMNR_parse+0x118>
   2ed18:	e3530000 	cmp	r3, #0
   2ed1c:	0a000024 	beq	2edb4 <JSMNR_parse+0x6d0>
   2ed20:	e5904004 	ldr	r4, [r0, #4]
   2ed24:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   2ed28:	e1560004 	cmp	r6, r4
   2ed2c:	9a000016 	bls	2ed8c <JSMNR_parse+0x6a8>
   2ed30:	e284e001 	add	lr, r4, #1
   2ed34:	e580e004 	str	lr, [r0, #4]
   2ed38:	e3a0e000 	mov	lr, #0
   2ed3c:	e0836204 	add	r6, r3, r4, lsl #4
   2ed40:	e586e00c 	str	lr, [r6, #12]
   2ed44:	e3a0e003 	mov	lr, #3
   2ed48:	e7c3e204 	strb	lr, [r3, r4, lsl #4]
   2ed4c:	e590e008 	ldr	lr, [r0, #8]
   2ed50:	e2855001 	add	r5, r5, #1
   2ed54:	e37e0001 	cmn	lr, #1
   2ed58:	e9861400 	stmib	r6, {sl, ip}
   2ed5c:	0afffea6 	beq	2e7fc <JSMNR_parse+0x118>
   2ed60:	e083c20e 	add	ip, r3, lr, lsl #4
   2ed64:	e59c400c 	ldr	r4, [ip, #12]
   2ed68:	e590e000 	ldr	lr, [r0]
   2ed6c:	e2844001 	add	r4, r4, #1
   2ed70:	e58c400c 	str	r4, [ip, #12]
   2ed74:	e28ee001 	add	lr, lr, #1
   2ed78:	eafffea1 	b	2e804 <JSMNR_parse+0x120>
   2ed7c:	e590e000 	ldr	lr, [r0]
   2ed80:	e580c008 	str	ip, [r0, #8]
   2ed84:	e28ee001 	add	lr, lr, #1
   2ed88:	eafffe9d 	b	2e804 <JSMNR_parse+0x120>
   2ed8c:	e3e05000 	mvn	r5, #0
   2ed90:	e580e000 	str	lr, [r0]
   2ed94:	e1a00005 	mov	r0, r5
   2ed98:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ed9c:	e3e05000 	mvn	r5, #0
   2eda0:	eaffff47 	b	2eac4 <JSMNR_parse+0x3e0>
   2eda4:	e1a0c002 	mov	ip, r2
   2eda8:	eaffff0e 	b	2e9e8 <JSMNR_parse+0x304>
   2edac:	e1a0c004 	mov	ip, r4
   2edb0:	eaffff0c 	b	2e9e8 <JSMNR_parse+0x304>
   2edb4:	e590e000 	ldr	lr, [r0]
   2edb8:	e2855001 	add	r5, r5, #1
   2edbc:	e28ee001 	add	lr, lr, #1
   2edc0:	eafffe8f 	b	2e804 <JSMNR_parse+0x120>
   2edc4:	e3e05001 	mvn	r5, #1
   2edc8:	eaffff3d 	b	2eac4 <JSMNR_parse+0x3e0>
   2edcc:	00047acc 	.word	0x00047acc

0002edd0 <LogSetOutFn>:
   2edd0:	e59f3004 	ldr	r3, [pc, #4]	; 2eddc <LogSetOutFn+0xc>
   2edd4:	e5830000 	str	r0, [r3]
   2edd8:	e12fff1e 	bx	lr
   2eddc:	0005cefc 	.word	0x0005cefc

0002ede0 <LogSeverityCircle>:
   2ede0:	e3500003 	cmp	r0, #3
   2ede4:	83a00004 	movhi	r0, #4
   2ede8:	e12fff1e 	bx	lr

0002edec <LogSeverityStr>:
   2edec:	e3500003 	cmp	r0, #3
   2edf0:	959f3008 	ldrls	r3, [pc, #8]	; 2ee00 <LogSeverityStr+0x14>
   2edf4:	97930100 	ldrls	r0, [r3, r0, lsl #2]
   2edf8:	859f0004 	ldrhi	r0, [pc, #4]	; 2ee04 <LogSeverityStr+0x18>
   2edfc:	e12fff1e 	bx	lr
   2ee00:	00047aec 	.word	0x00047aec
   2ee04:	00047ae0 	.word	0x00047ae0

0002ee08 <LogWrite>:
   2ee08:	e92d000c 	push	{r2, r3}
   2ee0c:	e92d4070 	push	{r4, r5, r6, lr}
   2ee10:	e24dd018 	sub	sp, sp, #24
   2ee14:	e28d302c 	add	r3, sp, #44	; 0x2c
   2ee18:	e1a06000 	mov	r6, r0
   2ee1c:	e28d0008 	add	r0, sp, #8
   2ee20:	e58d3004 	str	r3, [sp, #4]
   2ee24:	e1a04001 	mov	r4, r1
   2ee28:	ebffe337 	bl	27b0c <CString::CString()>
   2ee2c:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   2ee30:	e59d2004 	ldr	r2, [sp, #4]
   2ee34:	e28d0008 	add	r0, sp, #8
   2ee38:	ebffe556 	bl	28398 <CString::FormatV(char const*, std::__va_list)>
   2ee3c:	e59f3080 	ldr	r3, [pc, #128]	; 2eec4 <LogWrite+0xbc>
   2ee40:	e5935000 	ldr	r5, [r3]
   2ee44:	e3550000 	cmp	r5, #0
   2ee48:	0a00000f 	beq	2ee8c <LogWrite+0x84>
   2ee4c:	e3540003 	cmp	r4, #3
   2ee50:	959f3070 	ldrls	r3, [pc, #112]	; 2eec8 <LogWrite+0xc0>
   2ee54:	e28d0008 	add	r0, sp, #8
   2ee58:	97934104 	ldrls	r4, [r3, r4, lsl #2]
   2ee5c:	859f4068 	ldrhi	r4, [pc, #104]	; 2eecc <LogWrite+0xc4>
   2ee60:	ebffe341 	bl	27b6c <CString::operator char const*() const>
   2ee64:	e1a01004 	mov	r1, r4
   2ee68:	e1a02000 	mov	r2, r0
   2ee6c:	e1a00006 	mov	r0, r6
   2ee70:	e12fff35 	blx	r5
   2ee74:	e28d0008 	add	r0, sp, #8
   2ee78:	ebffe2f0 	bl	27a40 <CString::~CString()>
   2ee7c:	e28dd018 	add	sp, sp, #24
   2ee80:	e8bd4070 	pop	{r4, r5, r6, lr}
   2ee84:	e28dd008 	add	sp, sp, #8
   2ee88:	e12fff1e 	bx	lr
   2ee8c:	ebffdf2d 	bl	26b48 <CLogger::Get()>
   2ee90:	e3540004 	cmp	r4, #4
   2ee94:	e1a05000 	mov	r5, r0
   2ee98:	e28d0008 	add	r0, sp, #8
   2ee9c:	23a04004 	movcs	r4, #4
   2eea0:	ebffe331 	bl	27b6c <CString::operator char const*() const>
   2eea4:	e1a01006 	mov	r1, r6
   2eea8:	e1a03000 	mov	r3, r0
   2eeac:	e6ef2074 	uxtb	r2, r4
   2eeb0:	e1a00005 	mov	r0, r5
   2eeb4:	ebffde65 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2eeb8:	e28d0008 	add	r0, sp, #8
   2eebc:	ebffe2df 	bl	27a40 <CString::~CString()>
   2eec0:	eaffffed 	b	2ee7c <LogWrite+0x74>
   2eec4:	0005cefc 	.word	0x0005cefc
   2eec8:	00047aec 	.word	0x00047aec
   2eecc:	00047ae0 	.word	0x00047ae0

0002eed0 <_GLOBAL__sub_I___debugHelper>:
   2eed0:	e3a01000 	mov	r1, #0
   2eed4:	e59f3018 	ldr	r3, [pc, #24]	; 2eef4 <_GLOBAL__sub_I___debugHelper+0x24>
   2eed8:	e283203b 	add	r2, r3, #59	; 0x3b
   2eedc:	e283003c 	add	r0, r3, #60	; 0x3c
   2eee0:	e4831004 	str	r1, [r3], #4
   2eee4:	e1530000 	cmp	r3, r0
   2eee8:	e5e21001 	strb	r1, [r2, #1]!
   2eeec:	1afffffb 	bne	2eee0 <_GLOBAL__sub_I___debugHelper+0x10>
   2eef0:	e12fff1e 	bx	lr
   2eef4:	0005cf00 	.word	0x0005cf00

0002eef8 <MiniHDLC::~MiniHDLC()>:
   2eef8:	e12fff1e 	bx	lr

0002eefc <MiniHDLC::~MiniHDLC()>:
   2eefc:	e92d4010 	push	{r4, lr}
   2ef00:	e1a04000 	mov	r4, r0
   2ef04:	e59f1008 	ldr	r1, [pc, #8]	; 2ef14 <MiniHDLC::~MiniHDLC()+0x18>
   2ef08:	ebfff03c 	bl	2b000 <operator delete(void*, unsigned int)>
   2ef0c:	e1a00004 	mov	r0, r4
   2ef10:	e8bd8010 	pop	{r4, pc}
   2ef14:	00004e6c 	.word	0x00004e6c

0002ef18 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]>:
   2ef18:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ef1c:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
   2ef20:	e1a07000 	mov	r7, r0
   2ef24:	e3580000 	cmp	r8, #0
   2ef28:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   2ef2c:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
   2ef30:	08bd8ff0 	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ef34:	e280c002 	add	ip, r0, #2
   2ef38:	e152000c 	cmp	r2, ip
   2ef3c:	98bd8ff0 	popls	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ef40:	e1a06009 	mov	r6, r9
   2ef44:	e59fa068 	ldr	sl, [pc, #104]	; 2efb4 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]+0x9c>
   2ef48:	ea00000b 	b	2ef7c <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]+0x64>
   2ef4c:	e5d75004 	ldrb	r5, [r7, #4]
   2ef50:	e155000c 	cmp	r5, ip
   2ef54:	11a0e000 	movne	lr, r0
   2ef58:	0a000012 	beq	2efa8 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]+0x90>
   2ef5c:	e0490006 	sub	r0, r9, r6
   2ef60:	e1700008 	cmn	r0, r8
   2ef64:	e7c1c00e 	strb	ip, [r1, lr]
   2ef68:	e28e4003 	add	r4, lr, #3
   2ef6c:	e28e0001 	add	r0, lr, #1
   2ef70:	08bd8ff0 	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ef74:	e1540002 	cmp	r4, r2
   2ef78:	28bd8ff0 	popcs	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ef7c:	e4d6c001 	ldrb	ip, [r6], #1
   2ef80:	e1d3b0b0 	ldrh	fp, [r3]
   2ef84:	e280e001 	add	lr, r0, #1
   2ef88:	e02c542b 	eor	r5, ip, fp, lsr #8
   2ef8c:	e1a05085 	lsl	r5, r5, #1
   2ef90:	e19a40b5 	ldrh	r4, [sl, r5]
   2ef94:	e024440b 	eor	r4, r4, fp, lsl #8
   2ef98:	e1c340b0 	strh	r4, [r3]
   2ef9c:	e5d74005 	ldrb	r4, [r7, #5]
   2efa0:	e15c0004 	cmp	ip, r4
   2efa4:	1affffe8 	bne	2ef4c <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]+0x34>
   2efa8:	e7c14000 	strb	r4, [r1, r0]
   2efac:	e22cc020 	eor	ip, ip, #32
   2efb0:	eaffffe9 	b	2ef5c <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]+0x44>
   2efb4:	00047b48 	.word	0x00047b48

0002efb8 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]>:
   2efb8:	e1d330b0 	ldrh	r3, [r3]
   2efbc:	e5d0c007 	ldrb	ip, [r0, #7]
   2efc0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2efc4:	e35c0000 	cmp	ip, #0
   2efc8:	e1a05423 	lsr	r5, r3, #8
   2efcc:	020340ff 	andeq	r4, r3, #255	; 0xff
   2efd0:	11a04005 	movne	r4, r5
   2efd4:	1203c0ff 	andne	ip, r3, #255	; 0xff
   2efd8:	01a0c005 	moveq	ip, r5
   2efdc:	e59d3014 	ldr	r3, [sp, #20]
   2efe0:	e2836002 	add	r6, r3, #2
   2efe4:	e1560002 	cmp	r6, r2
   2efe8:	2a000021 	bcs	2f074 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0xbc>
   2efec:	e5d02005 	ldrb	r2, [r0, #5]
   2eff0:	e1a0e004 	mov	lr, r4
   2eff4:	e1520004 	cmp	r2, r4
   2eff8:	e1a0500c 	mov	r5, ip
   2effc:	0a00000f 	beq	2f040 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0x88>
   2f000:	e5d07004 	ldrb	r7, [r0, #4]
   2f004:	e1570004 	cmp	r7, r4
   2f008:	12836001 	addne	r6, r3, #1
   2f00c:	0a00000b 	beq	2f040 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0x88>
   2f010:	e7c1e003 	strb	lr, [r1, r3]
   2f014:	e5d0e005 	ldrb	lr, [r0, #5]
   2f018:	e15e000c 	cmp	lr, ip
   2f01c:	0a00000f 	beq	2f060 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0xa8>
   2f020:	e5d02004 	ldrb	r2, [r0, #4]
   2f024:	e152000c 	cmp	r2, ip
   2f028:	0a00000c 	beq	2f060 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0xa8>
   2f02c:	e7e15006 	strb	r5, [r1, r6]!
   2f030:	e5d03004 	ldrb	r3, [r0, #4]
   2f034:	e2860002 	add	r0, r6, #2
   2f038:	e5c13001 	strb	r3, [r1, #1]
   2f03c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2f040:	e224e020 	eor	lr, r4, #32
   2f044:	e7c12003 	strb	r2, [r1, r3]
   2f048:	e6efe07e 	uxtb	lr, lr
   2f04c:	e2833001 	add	r3, r3, #1
   2f050:	e7c1e003 	strb	lr, [r1, r3]
   2f054:	e5d0e005 	ldrb	lr, [r0, #5]
   2f058:	e15e000c 	cmp	lr, ip
   2f05c:	1affffef 	bne	2f020 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0x68>
   2f060:	e22c2020 	eor	r2, ip, #32
   2f064:	e7c1e006 	strb	lr, [r1, r6]
   2f068:	e6ef5072 	uxtb	r5, r2
   2f06c:	e2836002 	add	r6, r3, #2
   2f070:	eaffffed 	b	2f02c <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0x74>
   2f074:	e3a00000 	mov	r0, #0
   2f078:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002f07c <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)>:
   2f07c:	e92d4070 	push	{r4, r5, r6, lr}
   2f080:	e59f5094 	ldr	r5, [pc, #148]	; 2f11c <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xa0>
   2f084:	e59f6094 	ldr	r6, [pc, #148]	; 2f120 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xa4>
   2f088:	e3a0c000 	mov	ip, #0
   2f08c:	e59f4090 	ldr	r4, [pc, #144]	; 2f124 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xa8>
   2f090:	e5853004 	str	r3, [r5, #4]
   2f094:	e59f308c 	ldr	r3, [pc, #140]	; 2f128 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xac>
   2f098:	e5806000 	str	r6, [r0]
   2f09c:	e280ea02 	add	lr, r0, #8192	; 0x2000
   2f0a0:	e2806901 	add	r6, r0, #16384	; 0x4000
   2f0a4:	e580401c 	str	r4, [r0, #28]
   2f0a8:	e58e4738 	str	r4, [lr, #1848]	; 0x738
   2f0ac:	e58e3730 	str	r3, [lr, #1840]	; 0x730
   2f0b0:	e5863e4c 	str	r3, [r6, #3660]	; 0xe4c
   2f0b4:	e1a03006 	mov	r3, r6
   2f0b8:	e59f406c 	ldr	r4, [pc, #108]	; 2f12c <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xb0>
   2f0bc:	e585c000 	str	ip, [r5]
   2f0c0:	e59f5068 	ldr	r5, [pc, #104]	; 2f130 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xb4>
   2f0c4:	e586ce5c 	str	ip, [r6, #3676]	; 0xe5c
   2f0c8:	e5865e50 	str	r5, [r6, #3664]	; 0xe50
   2f0cc:	e586ce60 	str	ip, [r6, #3680]	; 0xe60
   2f0d0:	e586ce64 	str	ip, [r6, #3684]	; 0xe64
   2f0d4:	e586ce68 	str	ip, [r6, #3688]	; 0xe68
   2f0d8:	e5dd5014 	ldrb	r5, [sp, #20]
   2f0dc:	e580400c 	str	r4, [r0, #12]
   2f0e0:	e580c008 	str	ip, [r0, #8]
   2f0e4:	e5c0c010 	strb	ip, [r0, #16]
   2f0e8:	e580c014 	str	ip, [r0, #20]
   2f0ec:	e580c018 	str	ip, [r0, #24]
   2f0f0:	e5dd6010 	ldrb	r6, [sp, #16]
   2f0f4:	e583ce54 	str	ip, [r3, #3668]	; 0xe54
   2f0f8:	e583ce58 	str	ip, [r3, #3672]	; 0xe58
   2f0fc:	e5dd4018 	ldrb	r4, [sp, #24]
   2f100:	e5dd301c 	ldrb	r3, [sp, #28]
   2f104:	e5c06004 	strb	r6, [r0, #4]
   2f108:	e5c05005 	strb	r5, [r0, #5]
   2f10c:	e5c04007 	strb	r4, [r0, #7]
   2f110:	e5c03006 	strb	r3, [r0, #6]
   2f114:	e58e1734 	str	r1, [lr, #1844]	; 0x734
   2f118:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f11c:	0005cf4c 	.word	0x0005cf4c
   2f120:	00047d50 	.word	0x00047d50
   2f124:	00040a8c 	.word	0x00040a8c
   2f128:	00002710 	.word	0x00002710
   2f12c:	0000ffff 	.word	0x0000ffff
   2f130:	00001388 	.word	0x00001388

0002f134 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)>:
   2f134:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2f138:	e59f6094 	ldr	r6, [pc, #148]	; 2f1d4 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xa0>
   2f13c:	e59f4094 	ldr	r4, [pc, #148]	; 2f1d8 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xa4>
   2f140:	e59f7094 	ldr	r7, [pc, #148]	; 2f1dc <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xa8>
   2f144:	e2805a02 	add	r5, r0, #8192	; 0x2000
   2f148:	e2808901 	add	r8, r0, #16384	; 0x4000
   2f14c:	e5807000 	str	r7, [r0]
   2f150:	e580601c 	str	r6, [r0, #28]
   2f154:	e3a0e000 	mov	lr, #0
   2f158:	e5856738 	str	r6, [r5, #1848]	; 0x738
   2f15c:	e5854730 	str	r4, [r5, #1840]	; 0x730
   2f160:	e5884e4c 	str	r4, [r8, #3660]	; 0xe4c
   2f164:	e1a04008 	mov	r4, r8
   2f168:	e59f7070 	ldr	r7, [pc, #112]	; 2f1e0 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xac>
   2f16c:	e584ee5c 	str	lr, [r4, #3676]	; 0xe5c
   2f170:	e584ee60 	str	lr, [r4, #3680]	; 0xe60
   2f174:	e584ee64 	str	lr, [r4, #3684]	; 0xe64
   2f178:	e584ee68 	str	lr, [r4, #3688]	; 0xe68
   2f17c:	e5dd901c 	ldrb	r9, [sp, #28]
   2f180:	e580e008 	str	lr, [r0, #8]
   2f184:	e5c0e010 	strb	lr, [r0, #16]
   2f188:	e580e014 	str	lr, [r0, #20]
   2f18c:	e580e018 	str	lr, [r0, #24]
   2f190:	e580700c 	str	r7, [r0, #12]
   2f194:	e5dd8028 	ldrb	r8, [sp, #40]	; 0x28
   2f198:	e584ee54 	str	lr, [r4, #3668]	; 0xe54
   2f19c:	e584ee58 	str	lr, [r4, #3672]	; 0xe58
   2f1a0:	e5dd702c 	ldrb	r7, [sp, #44]	; 0x2c
   2f1a4:	e5c03004 	strb	r3, [r0, #4]
   2f1a8:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   2f1ac:	e59f3030 	ldr	r3, [pc, #48]	; 2f1e4 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xb0>
   2f1b0:	e59de020 	ldr	lr, [sp, #32]
   2f1b4:	e5c09005 	strb	r9, [r0, #5]
   2f1b8:	e5c08007 	strb	r8, [r0, #7]
   2f1bc:	e5c07006 	strb	r7, [r0, #6]
   2f1c0:	e5831000 	str	r1, [r3]
   2f1c4:	e5856734 	str	r6, [r5, #1844]	; 0x734
   2f1c8:	e5832004 	str	r2, [r3, #4]
   2f1cc:	e584ee50 	str	lr, [r4, #3664]	; 0xe50
   2f1d0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2f1d4:	00040a8c 	.word	0x00040a8c
   2f1d8:	00002710 	.word	0x00002710
   2f1dc:	00047d50 	.word	0x00047d50
   2f1e0:	0000ffff 	.word	0x0000ffff
   2f1e4:	0005cf4c 	.word	0x0005cf4c

0002f1e8 <MiniHDLC::clear()>:
   2f1e8:	e3a03000 	mov	r3, #0
   2f1ec:	e59fc044 	ldr	ip, [pc, #68]	; 2f238 <MiniHDLC::clear()+0x50>
   2f1f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2f1f4:	e59f1040 	ldr	r1, [pc, #64]	; 2f23c <MiniHDLC::clear()+0x54>
   2f1f8:	e2802a02 	add	r2, r0, #8192	; 0x2000
   2f1fc:	e59fe03c 	ldr	lr, [pc, #60]	; 2f240 <MiniHDLC::clear()+0x58>
   2f200:	e582c734 	str	ip, [r2, #1844]	; 0x734
   2f204:	e2802901 	add	r2, r0, #16384	; 0x4000
   2f208:	e582ce50 	str	ip, [r2, #3664]	; 0xe50
   2f20c:	e5813004 	str	r3, [r1, #4]
   2f210:	e580e00c 	str	lr, [r0, #12]
   2f214:	e1c030b6 	strh	r3, [r0, #6]
   2f218:	e5803008 	str	r3, [r0, #8]
   2f21c:	e5c03010 	strb	r3, [r0, #16]
   2f220:	e5803014 	str	r3, [r0, #20]
   2f224:	e5803018 	str	r3, [r0, #24]
   2f228:	e5813000 	str	r3, [r1]
   2f22c:	e5823e54 	str	r3, [r2, #3668]	; 0xe54
   2f230:	e5823e58 	str	r3, [r2, #3672]	; 0xe58
   2f234:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2f238:	00001388 	.word	0x00001388
   2f23c:	0005cf4c 	.word	0x0005cf4c
   2f240:	0000ffff 	.word	0x0000ffff

0002f244 <MiniHDLC::handleChar(unsigned char)>:
   2f244:	e92d4030 	push	{r4, r5, lr}
   2f248:	e5d03004 	ldrb	r3, [r0, #4]
   2f24c:	e1a04000 	mov	r4, r0
   2f250:	e1530001 	cmp	r3, r1
   2f254:	e24dd014 	sub	sp, sp, #20
   2f258:	0a000035 	beq	2f334 <MiniHDLC::handleChar(unsigned char)+0xf0>
   2f25c:	e5d0300e 	ldrb	r3, [r0, #14]
   2f260:	e3530000 	cmp	r3, #0
   2f264:	1a00001a 	bne	2f2d4 <MiniHDLC::handleChar(unsigned char)+0x90>
   2f268:	e5d03005 	ldrb	r3, [r0, #5]
   2f26c:	e1530001 	cmp	r3, r1
   2f270:	03a03001 	moveq	r3, #1
   2f274:	05c0300e 	strbeq	r3, [r0, #14]
   2f278:	0a000013 	beq	2f2cc <MiniHDLC::handleChar(unsigned char)+0x88>
   2f27c:	e2842a02 	add	r2, r4, #8192	; 0x2000
   2f280:	e5920730 	ldr	r0, [r2, #1840]	; 0x730
   2f284:	e5943008 	ldr	r3, [r4, #8]
   2f288:	e1530000 	cmp	r3, r0
   2f28c:	3a000014 	bcc	2f2e4 <MiniHDLC::handleChar(unsigned char)+0xa0>
   2f290:	e3a00000 	mov	r0, #0
   2f294:	e3e01000 	mvn	r1, #0
   2f298:	e5922734 	ldr	r2, [r2, #1844]	; 0x734
   2f29c:	e1530002 	cmp	r3, r2
   2f2a0:	e2842901 	add	r2, r4, #16384	; 0x4000
   2f2a4:	25923e64 	ldrcs	r3, [r2, #3684]	; 0xe64
   2f2a8:	35923e68 	ldrcc	r3, [r2, #3688]	; 0xe68
   2f2ac:	22833001 	addcs	r3, r3, #1
   2f2b0:	32833001 	addcc	r3, r3, #1
   2f2b4:	25840008 	strcs	r0, [r4, #8]
   2f2b8:	21c410bc 	strhcs	r1, [r4, #12]
   2f2bc:	35840008 	strcc	r0, [r4, #8]
   2f2c0:	31c410bc 	strhcc	r1, [r4, #12]
   2f2c4:	25823e64 	strcs	r3, [r2, #3684]	; 0xe64
   2f2c8:	35823e68 	strcc	r3, [r2, #3688]	; 0xe68
   2f2cc:	e28dd014 	add	sp, sp, #20
   2f2d0:	e8bd8030 	pop	{r4, r5, pc}
   2f2d4:	e3a03000 	mov	r3, #0
   2f2d8:	e2211020 	eor	r1, r1, #32
   2f2dc:	e5c0300e 	strb	r3, [r0, #14]
   2f2e0:	eaffffe5 	b	2f27c <MiniHDLC::handleChar(unsigned char)+0x38>
   2f2e4:	e0842003 	add	r2, r4, r3
   2f2e8:	e3530001 	cmp	r3, #1
   2f2ec:	e5c21020 	strb	r1, [r2, #32]
   2f2f0:	9a00000b 	bls	2f324 <MiniHDLC::handleChar(unsigned char)+0xe0>
   2f2f4:	e2431002 	sub	r1, r3, #2
   2f2f8:	e1510000 	cmp	r1, r0
   2f2fc:	23a02000 	movcs	r2, #0
   2f300:	30841001 	addcc	r1, r4, r1
   2f304:	e1d400bc 	ldrh	r0, [r4, #12]
   2f308:	35d12020 	ldrbcc	r2, [r1, #32]
   2f30c:	e59f1180 	ldr	r1, [pc, #384]	; 2f494 <MiniHDLC::handleChar(unsigned char)+0x250>
   2f310:	e0222420 	eor	r2, r2, r0, lsr #8
   2f314:	e1a02082 	lsl	r2, r2, #1
   2f318:	e19120b2 	ldrh	r2, [r1, r2]
   2f31c:	e0222400 	eor	r2, r2, r0, lsl #8
   2f320:	e1c420bc 	strh	r2, [r4, #12]
   2f324:	e2833001 	add	r3, r3, #1
   2f328:	e5843008 	str	r3, [r4, #8]
   2f32c:	e28dd014 	add	sp, sp, #20
   2f330:	e8bd8030 	pop	{r4, r5, pc}
   2f334:	e5903008 	ldr	r3, [r0, #8]
   2f338:	e3530001 	cmp	r3, #1
   2f33c:	9a000030 	bls	2f404 <MiniHDLC::handleChar(unsigned char)+0x1c0>
   2f340:	e5d02007 	ldrb	r2, [r0, #7]
   2f344:	e3520000 	cmp	r2, #0
   2f348:	0a000044 	beq	2f460 <MiniHDLC::handleChar(unsigned char)+0x21c>
   2f34c:	e2802a02 	add	r2, r0, #8192	; 0x2000
   2f350:	e5920730 	ldr	r0, [r2, #1840]	; 0x730
   2f354:	e243c001 	sub	ip, r3, #1
   2f358:	e15c0000 	cmp	ip, r0
   2f35c:	3084200c 	addcc	r2, r4, ip
   2f360:	e2431002 	sub	r1, r3, #2
   2f364:	23a02000 	movcs	r2, #0
   2f368:	35d22020 	ldrbcc	r2, [r2, #32]
   2f36c:	e1500001 	cmp	r0, r1
   2f370:	8084e001 	addhi	lr, r4, r1
   2f374:	85dee020 	ldrbhi	lr, [lr, #32]
   2f378:	8182240e 	orrhi	r2, r2, lr, lsl #8
   2f37c:	86bf2072 	sxthhi	r2, r2
   2f380:	e1d4e0bc 	ldrh	lr, [r4, #12]
   2f384:	e6ff2072 	uxth	r2, r2
   2f388:	e15e0002 	cmp	lr, r2
   2f38c:	0a000010 	beq	2f3d4 <MiniHDLC::handleChar(unsigned char)+0x190>
   2f390:	e3a01000 	mov	r1, #0
   2f394:	e284c01f 	add	ip, r4, #31
   2f398:	e1510000 	cmp	r1, r0
   2f39c:	0a000024 	beq	2f434 <MiniHDLC::handleChar(unsigned char)+0x1f0>
   2f3a0:	e5fc5001 	ldrb	r5, [ip, #1]!
   2f3a4:	e3550000 	cmp	r5, #0
   2f3a8:	0a000020 	beq	2f430 <MiniHDLC::handleChar(unsigned char)+0x1ec>
   2f3ac:	e2811001 	add	r1, r1, #1
   2f3b0:	e1530001 	cmp	r3, r1
   2f3b4:	0a000001 	beq	2f3c0 <MiniHDLC::handleChar(unsigned char)+0x17c>
   2f3b8:	e35100c8 	cmp	r1, #200	; 0xc8
   2f3bc:	1afffff5 	bne	2f398 <MiniHDLC::handleChar(unsigned char)+0x154>
   2f3c0:	e2842901 	add	r2, r4, #16384	; 0x4000
   2f3c4:	e5923e60 	ldr	r3, [r2, #3680]	; 0xe60
   2f3c8:	e2833001 	add	r3, r3, #1
   2f3cc:	e5823e60 	str	r3, [r2, #3680]	; 0xe60
   2f3d0:	ea00000c 	b	2f408 <MiniHDLC::handleChar(unsigned char)+0x1c4>
   2f3d4:	e15c0000 	cmp	ip, r0
   2f3d8:	8a000009 	bhi	2f404 <MiniHDLC::handleChar(unsigned char)+0x1c0>
   2f3dc:	e1510000 	cmp	r1, r0
   2f3e0:	33a02000 	movcc	r2, #0
   2f3e4:	30843001 	addcc	r3, r4, r1
   2f3e8:	35c32020 	strbcc	r2, [r3, #32]
   2f3ec:	e59f30a4 	ldr	r3, [pc, #164]	; 2f498 <MiniHDLC::handleChar(unsigned char)+0x254>
   2f3f0:	e5933004 	ldr	r3, [r3, #4]
   2f3f4:	e3530000 	cmp	r3, #0
   2f3f8:	0a000001 	beq	2f404 <MiniHDLC::handleChar(unsigned char)+0x1c0>
   2f3fc:	e2840020 	add	r0, r4, #32
   2f400:	e12fff33 	blx	r3
   2f404:	e2842901 	add	r2, r4, #16384	; 0x4000
   2f408:	e3a01000 	mov	r1, #0
   2f40c:	e3e00000 	mvn	r0, #0
   2f410:	e5923e5c 	ldr	r3, [r2, #3676]	; 0xe5c
   2f414:	e5c4100e 	strb	r1, [r4, #14]
   2f418:	e2833001 	add	r3, r3, #1
   2f41c:	e5841008 	str	r1, [r4, #8]
   2f420:	e1c400bc 	strh	r0, [r4, #12]
   2f424:	e5823e5c 	str	r3, [r2, #3676]	; 0xe5c
   2f428:	e28dd014 	add	sp, sp, #20
   2f42c:	e8bd8030 	pop	{r4, r5, pc}
   2f430:	e1a00001 	mov	r0, r1
   2f434:	e2400001 	sub	r0, r0, #1
   2f438:	e35000c6 	cmp	r0, #198	; 0xc6
   2f43c:	8affffdf 	bhi	2f3c0 <MiniHDLC::handleChar(unsigned char)+0x17c>
   2f440:	e2841020 	add	r1, r4, #32
   2f444:	e88d4004 	stm	sp, {r2, lr}
   2f448:	e58d1008 	str	r1, [sp, #8]
   2f44c:	e59f2048 	ldr	r2, [pc, #72]	; 2f49c <MiniHDLC::handleChar(unsigned char)+0x258>
   2f450:	e3a01003 	mov	r1, #3
   2f454:	e59f0044 	ldr	r0, [pc, #68]	; 2f4a0 <MiniHDLC::handleChar(unsigned char)+0x25c>
   2f458:	ebfffe6a 	bl	2ee08 <LogWrite>
   2f45c:	eaffffd7 	b	2f3c0 <MiniHDLC::handleChar(unsigned char)+0x17c>
   2f460:	e2801a02 	add	r1, r0, #8192	; 0x2000
   2f464:	e5910730 	ldr	r0, [r1, #1840]	; 0x730
   2f468:	e2431002 	sub	r1, r3, #2
   2f46c:	e1510000 	cmp	r1, r0
   2f470:	30842001 	addcc	r2, r4, r1
   2f474:	e243c001 	sub	ip, r3, #1
   2f478:	35d22020 	ldrbcc	r2, [r2, #32]
   2f47c:	e150000c 	cmp	r0, ip
   2f480:	8084e00c 	addhi	lr, r4, ip
   2f484:	85dee020 	ldrbhi	lr, [lr, #32]
   2f488:	8182240e 	orrhi	r2, r2, lr, lsl #8
   2f48c:	86bf2072 	sxthhi	r2, r2
   2f490:	eaffffba 	b	2f380 <MiniHDLC::handleChar(unsigned char)+0x13c>
   2f494:	00047b48 	.word	0x00047b48
   2f498:	0005cf4c 	.word	0x0005cf4c
   2f49c:	00047afc 	.word	0x00047afc
   2f4a0:	00047b3c 	.word	0x00047b3c

0002f4a4 <MiniHDLC::handleBit(unsigned char)>:
   2f4a4:	e92d4010 	push	{r4, lr}
   2f4a8:	e5d0300f 	ldrb	r3, [r0, #15]
   2f4ac:	e3510000 	cmp	r1, #0
   2f4b0:	e1a04000 	mov	r4, r0
   2f4b4:	e5d02004 	ldrb	r2, [r0, #4]
   2f4b8:	e1a030c3 	asr	r3, r3, #1
   2f4bc:	1a000015 	bne	2f518 <MiniHDLC::handleBit(unsigned char)+0x74>
   2f4c0:	e6ef3073 	uxtb	r3, r3
   2f4c4:	e1530002 	cmp	r3, r2
   2f4c8:	e5c0300f 	strb	r3, [r0, #15]
   2f4cc:	0a000016 	beq	2f52c <MiniHDLC::handleBit(unsigned char)+0x88>
   2f4d0:	e203307c 	and	r3, r3, #124	; 0x7c
   2f4d4:	e353007c 	cmp	r3, #124	; 0x7c
   2f4d8:	08bd8010 	popeq	{r4, pc}
   2f4dc:	e5d42010 	ldrb	r2, [r4, #16]
   2f4e0:	e5943014 	ldr	r3, [r4, #20]
   2f4e4:	e18110a2 	orr	r1, r1, r2, lsr #1
   2f4e8:	e2833001 	add	r3, r3, #1
   2f4ec:	e6ef1071 	uxtb	r1, r1
   2f4f0:	e3530008 	cmp	r3, #8
   2f4f4:	e5c41010 	strb	r1, [r4, #16]
   2f4f8:	e5843014 	str	r3, [r4, #20]
   2f4fc:	18bd8010 	popne	{r4, pc}
   2f500:	e1a00004 	mov	r0, r4
   2f504:	ebffff4e 	bl	2f244 <MiniHDLC::handleChar(unsigned char)>
   2f508:	e3a03000 	mov	r3, #0
   2f50c:	e5c43010 	strb	r3, [r4, #16]
   2f510:	e5843014 	str	r3, [r4, #20]
   2f514:	e8bd8010 	pop	{r4, pc}
   2f518:	e3833080 	orr	r3, r3, #128	; 0x80
   2f51c:	e1530002 	cmp	r3, r2
   2f520:	e3e0107f 	mvn	r1, #127	; 0x7f
   2f524:	e5c0300f 	strb	r3, [r0, #15]
   2f528:	1affffeb 	bne	2f4dc <MiniHDLC::handleBit(unsigned char)+0x38>
   2f52c:	e1a01002 	mov	r1, r2
   2f530:	eafffff2 	b	2f500 <MiniHDLC::handleBit(unsigned char)+0x5c>

0002f534 <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)>:
   2f534:	e3520000 	cmp	r2, #0
   2f538:	012fff1e 	bxeq	lr
   2f53c:	e92d4070 	push	{r4, r5, r6, lr}
   2f540:	e1a06000 	mov	r6, r0
   2f544:	e0812002 	add	r2, r1, r2
   2f548:	e2425001 	sub	r5, r2, #1
   2f54c:	e2414001 	sub	r4, r1, #1
   2f550:	e5f41001 	ldrb	r1, [r4, #1]!
   2f554:	e1a00006 	mov	r0, r6
   2f558:	ebffff39 	bl	2f244 <MiniHDLC::handleChar(unsigned char)>
   2f55c:	e1540005 	cmp	r4, r5
   2f560:	1afffffa 	bne	2f550 <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)+0x1c>
   2f564:	e8bd8070 	pop	{r4, r5, r6, pc}

0002f568 <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)>:
   2f568:	e3e0c000 	mvn	ip, #0
   2f56c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2f570:	e3520003 	cmp	r2, #3
   2f574:	e24dd01c 	sub	sp, sp, #28
   2f578:	e1cdc1b6 	strh	ip, [sp, #22]
   2f57c:	9a000010 	bls	2f5c4 <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)+0x5c>
   2f580:	e3a0e001 	mov	lr, #1
   2f584:	e5d0c004 	ldrb	ip, [r0, #4]
   2f588:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   2f58c:	e58de000 	str	lr, [sp]
   2f590:	e98d0088 	stmib	sp, {r3, r7}
   2f594:	e5c1c000 	strb	ip, [r1]
   2f598:	e28d3016 	add	r3, sp, #22
   2f59c:	e1a05000 	mov	r5, r0
   2f5a0:	ebfffe5c 	bl	2ef18 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]>
   2f5a4:	e3500000 	cmp	r0, #0
   2f5a8:	0a000005 	beq	2f5c4 <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)+0x5c>
   2f5ac:	e58d0000 	str	r0, [sp]
   2f5b0:	e28d3016 	add	r3, sp, #22
   2f5b4:	e1a00005 	mov	r0, r5
   2f5b8:	ebfffe7e 	bl	2efb8 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]>
   2f5bc:	e28dd01c 	add	sp, sp, #28
   2f5c0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2f5c4:	e3a00000 	mov	r0, #0
   2f5c8:	e28dd01c 	add	sp, sp, #28
   2f5cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002f5d0 <MiniHDLC::encodeFrameStart(unsigned char*, unsigned long, unsigned short&)>:
   2f5d0:	e3e0c000 	mvn	ip, #0
   2f5d4:	e3520003 	cmp	r2, #3
   2f5d8:	e1c3c0b0 	strh	ip, [r3]
   2f5dc:	85d03004 	ldrbhi	r3, [r0, #4]
   2f5e0:	83a00001 	movhi	r0, #1
   2f5e4:	85c13000 	strbhi	r3, [r1]
   2f5e8:	93a00000 	movls	r0, #0
   2f5ec:	e12fff1e 	bx	lr

0002f5f0 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long)>:
   2f5f0:	e59dc000 	ldr	ip, [sp]
   2f5f4:	e35c0000 	cmp	ip, #0
   2f5f8:	0a000000 	beq	2f600 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long)+0x10>
   2f5fc:	eafffe45 	b	2ef18 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]>
   2f600:	e1a0000c 	mov	r0, ip
   2f604:	e12fff1e 	bx	lr

0002f608 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long)>:
   2f608:	e59dc000 	ldr	ip, [sp]
   2f60c:	e35c0000 	cmp	ip, #0
   2f610:	0a000000 	beq	2f618 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long)+0x10>
   2f614:	eafffe67 	b	2efb8 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]>
   2f618:	e1a0000c 	mov	r0, ip
   2f61c:	e12fff1e 	bx	lr

0002f620 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)>:
   2f620:	e3520000 	cmp	r2, #0
   2f624:	0a000013 	beq	2f678 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x58>
   2f628:	e92d4010 	push	{r4, lr}
   2f62c:	e1a0e000 	mov	lr, r0
   2f630:	e1a00002 	mov	r0, r2
   2f634:	e0812002 	add	r2, r1, r2
   2f638:	e5de4004 	ldrb	r4, [lr, #4]
   2f63c:	e2422001 	sub	r2, r2, #1
   2f640:	e2411001 	sub	r1, r1, #1
   2f644:	ea000004 	b	2f65c <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x3c>
   2f648:	e5dec005 	ldrb	ip, [lr, #5]
   2f64c:	e15c0003 	cmp	ip, r3
   2f650:	0a000004 	beq	2f668 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x48>
   2f654:	e1510002 	cmp	r1, r2
   2f658:	08bd8010 	popeq	{r4, pc}
   2f65c:	e5f13001 	ldrb	r3, [r1, #1]!
   2f660:	e1530004 	cmp	r3, r4
   2f664:	1afffff7 	bne	2f648 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x28>
   2f668:	e1510002 	cmp	r1, r2
   2f66c:	e2800001 	add	r0, r0, #1
   2f670:	1afffff9 	bne	2f65c <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x3c>
   2f674:	e8bd8010 	pop	{r4, pc}
   2f678:	e1a00002 	mov	r0, r2
   2f67c:	e12fff1e 	bx	lr

0002f680 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)>:
   2f680:	e0211420 	eor	r1, r1, r0, lsr #8
   2f684:	e59f3010 	ldr	r3, [pc, #16]	; 2f69c <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)+0x1c>
   2f688:	e1a01081 	lsl	r1, r1, #1
   2f68c:	e19330b1 	ldrh	r3, [r3, r1]
   2f690:	e0230400 	eor	r0, r3, r0, lsl #8
   2f694:	e6ff0070 	uxth	r0, r0
   2f698:	e12fff1e 	bx	lr
   2f69c:	00047b48 	.word	0x00047b48

0002f6a0 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)>:
   2f6a0:	e3520000 	cmp	r2, #0
   2f6a4:	012fff1e 	bxeq	lr
   2f6a8:	e0812002 	add	r2, r1, r2
   2f6ac:	e59fc028 	ldr	ip, [pc, #40]	; 2f6dc <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)+0x3c>
   2f6b0:	e2422001 	sub	r2, r2, #1
   2f6b4:	e2411001 	sub	r1, r1, #1
   2f6b8:	e5f13001 	ldrb	r3, [r1, #1]!
   2f6bc:	e0233420 	eor	r3, r3, r0, lsr #8
   2f6c0:	e1a03083 	lsl	r3, r3, #1
   2f6c4:	e19c30b3 	ldrh	r3, [ip, r3]
   2f6c8:	e1520001 	cmp	r2, r1
   2f6cc:	e0230400 	eor	r0, r3, r0, lsl #8
   2f6d0:	e6ff0070 	uxth	r0, r0
   2f6d4:	1afffff7 	bne	2f6b8 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)+0x18>
   2f6d8:	e12fff1e 	bx	lr
   2f6dc:	00047b48 	.word	0x00047b48

0002f6e0 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)>:
   2f6e0:	e5d0c005 	ldrb	ip, [r0, #5]
   2f6e4:	e15c0001 	cmp	ip, r1
   2f6e8:	0a000005 	beq	2f704 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x24>
   2f6ec:	e5d00004 	ldrb	r0, [r0, #4]
   2f6f0:	e1500001 	cmp	r0, r1
   2f6f4:	0a000002 	beq	2f704 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x24>
   2f6f8:	e7c21003 	strb	r1, [r2, r3]
   2f6fc:	e2830001 	add	r0, r3, #1
   2f700:	e12fff1e 	bx	lr
   2f704:	e7c2c003 	strb	ip, [r2, r3]
   2f708:	e2211020 	eor	r1, r1, #32
   2f70c:	e2833001 	add	r3, r3, #1
   2f710:	eafffff8 	b	2f6f8 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x18>

0002f714 <MiniHDLC::setFrameRxMaxLen(unsigned long)>:
   2f714:	e2800a02 	add	r0, r0, #8192	; 0x2000
   2f718:	e5801734 	str	r1, [r0, #1844]	; 0x734
   2f71c:	e12fff1e 	bx	lr

0002f720 <MiniHDLC::putCharToFrame(unsigned char)>:
   2f720:	e2803901 	add	r3, r0, #16384	; 0x4000
   2f724:	e593ce54 	ldr	ip, [r3, #3668]	; 0xe54
   2f728:	e5932e50 	ldr	r2, [r3, #3664]	; 0xe50
   2f72c:	e15c0002 	cmp	ip, r2
   2f730:	2a000017 	bcs	2f794 <MiniHDLC::putCharToFrame(unsigned char)+0x74>
   2f734:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2f738:	e5d0e006 	ldrb	lr, [r0, #6]
   2f73c:	e5932e4c 	ldr	r2, [r3, #3660]	; 0xe4c
   2f740:	e35e0000 	cmp	lr, #0
   2f744:	0a00000b 	beq	2f778 <MiniHDLC::putCharToFrame(unsigned char)+0x58>
   2f748:	e593ee58 	ldr	lr, [r3, #3672]	; 0xe58
   2f74c:	e35e0000 	cmp	lr, #0
   2f750:	1a000013 	bne	2f7a4 <MiniHDLC::putCharToFrame(unsigned char)+0x84>
   2f754:	e3510000 	cmp	r1, #0
   2f758:	13a01080 	movne	r1, #128	; 0x80
   2f75c:	e15c0002 	cmp	ip, r2
   2f760:	32800a02 	addcc	r0, r0, #8192	; 0x2000
   2f764:	3080000c 	addcc	r0, r0, ip
   2f768:	35c0173c 	strbcc	r1, [r0, #1852]	; 0x73c
   2f76c:	e3a02001 	mov	r2, #1
   2f770:	e5832e58 	str	r2, [r3, #3672]	; 0xe58
   2f774:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2f778:	e15c0002 	cmp	ip, r2
   2f77c:	32800a02 	addcc	r0, r0, #8192	; 0x2000
   2f780:	e28c2001 	add	r2, ip, #1
   2f784:	3080000c 	addcc	r0, r0, ip
   2f788:	e5832e54 	str	r2, [r3, #3668]	; 0xe54
   2f78c:	35c0173c 	strbcc	r1, [r0, #1852]	; 0x73c
   2f790:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2f794:	e3a02000 	mov	r2, #0
   2f798:	e5832e54 	str	r2, [r3, #3668]	; 0xe54
   2f79c:	e5832e58 	str	r2, [r3, #3672]	; 0xe58
   2f7a0:	e12fff1e 	bx	lr
   2f7a4:	e15c0002 	cmp	ip, r2
   2f7a8:	2a000009 	bcs	2f7d4 <MiniHDLC::putCharToFrame(unsigned char)+0xb4>
   2f7ac:	e2800a02 	add	r0, r0, #8192	; 0x2000
   2f7b0:	e080200c 	add	r2, r0, ip
   2f7b4:	e5d2273c 	ldrb	r2, [r2, #1852]	; 0x73c
   2f7b8:	e3510000 	cmp	r1, #0
   2f7bc:	e1a010c2 	asr	r1, r2, #1
   2f7c0:	e1a020a2 	lsr	r2, r2, #1
   2f7c4:	13822080 	orrne	r2, r2, #128	; 0x80
   2f7c8:	06ef2071 	uxtbeq	r2, r1
   2f7cc:	e080000c 	add	r0, r0, ip
   2f7d0:	e5c0273c 	strb	r2, [r0, #1852]	; 0x73c
   2f7d4:	e35e0007 	cmp	lr, #7
   2f7d8:	03a02000 	moveq	r2, #0
   2f7dc:	e28ee001 	add	lr, lr, #1
   2f7e0:	028c0001 	addeq	r0, ip, #1
   2f7e4:	1583ee58 	strne	lr, [r3, #3672]	; 0xe58
   2f7e8:	05830e54 	streq	r0, [r3, #3668]	; 0xe54
   2f7ec:	05832e58 	streq	r2, [r3, #3672]	; 0xe58
   2f7f0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002f7f4 <MiniHDLC::sendChar(unsigned char)>:
   2f7f4:	e5d03006 	ldrb	r3, [r0, #6]
   2f7f8:	e3530000 	cmp	r3, #0
   2f7fc:	0a00000a 	beq	2f82c <MiniHDLC::sendChar(unsigned char)+0x38>
   2f800:	e92d4070 	push	{r4, r5, r6, lr}
   2f804:	e1a06000 	mov	r6, r0
   2f808:	e1a04001 	mov	r4, r1
   2f80c:	e3a05008 	mov	r5, #8
   2f810:	e2041001 	and	r1, r4, #1
   2f814:	e1a00006 	mov	r0, r6
   2f818:	ebffffc0 	bl	2f720 <MiniHDLC::putCharToFrame(unsigned char)>
   2f81c:	e2555001 	subs	r5, r5, #1
   2f820:	e1a040a4 	lsr	r4, r4, #1
   2f824:	1afffff9 	bne	2f810 <MiniHDLC::sendChar(unsigned char)+0x1c>
   2f828:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f82c:	eaffffbb 	b	2f720 <MiniHDLC::putCharToFrame(unsigned char)>

0002f830 <MiniHDLC::sendCharWithStuffing(unsigned char)>:
   2f830:	e5d03006 	ldrb	r3, [r0, #6]
   2f834:	e3530000 	cmp	r3, #0
   2f838:	0a000019 	beq	2f8a4 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x74>
   2f83c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2f840:	e1a06000 	mov	r6, r0
   2f844:	e1a04001 	mov	r4, r1
   2f848:	e3a07008 	mov	r7, #8
   2f84c:	e3a08000 	mov	r8, #0
   2f850:	ea000002 	b	2f860 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x30>
   2f854:	e2577001 	subs	r7, r7, #1
   2f858:	e1a040a4 	lsr	r4, r4, #1
   2f85c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2f860:	e2045001 	and	r5, r4, #1
   2f864:	e1a01005 	mov	r1, r5
   2f868:	e1a00006 	mov	r0, r6
   2f86c:	ebffffab 	bl	2f720 <MiniHDLC::putCharToFrame(unsigned char)>
   2f870:	e3550000 	cmp	r5, #0
   2f874:	05865018 	streq	r5, [r6, #24]
   2f878:	0afffff5 	beq	2f854 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x24>
   2f87c:	e5963018 	ldr	r3, [r6, #24]
   2f880:	e2833001 	add	r3, r3, #1
   2f884:	e3530005 	cmp	r3, #5
   2f888:	e5863018 	str	r3, [r6, #24]
   2f88c:	1afffff0 	bne	2f854 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x24>
   2f890:	e3a01000 	mov	r1, #0
   2f894:	e1a00006 	mov	r0, r6
   2f898:	ebffffa0 	bl	2f720 <MiniHDLC::putCharToFrame(unsigned char)>
   2f89c:	e5868018 	str	r8, [r6, #24]
   2f8a0:	eaffffeb 	b	2f854 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x24>
   2f8a4:	eaffffd2 	b	2f7f4 <MiniHDLC::sendChar(unsigned char)>

0002f8a8 <MiniHDLC::sendEscaped(unsigned char)>:
   2f8a8:	e92d4070 	push	{r4, r5, r6, lr}
   2f8ac:	e1a04001 	mov	r4, r1
   2f8b0:	e5d01005 	ldrb	r1, [r0, #5]
   2f8b4:	e1a05000 	mov	r5, r0
   2f8b8:	e1510004 	cmp	r1, r4
   2f8bc:	0a000006 	beq	2f8dc <MiniHDLC::sendEscaped(unsigned char)+0x34>
   2f8c0:	e5d03004 	ldrb	r3, [r0, #4]
   2f8c4:	e1530004 	cmp	r3, r4
   2f8c8:	0a000003 	beq	2f8dc <MiniHDLC::sendEscaped(unsigned char)+0x34>
   2f8cc:	e1a01004 	mov	r1, r4
   2f8d0:	e1a00005 	mov	r0, r5
   2f8d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   2f8d8:	eaffffd4 	b	2f830 <MiniHDLC::sendCharWithStuffing(unsigned char)>
   2f8dc:	e1a00005 	mov	r0, r5
   2f8e0:	e2244020 	eor	r4, r4, #32
   2f8e4:	ebffffd1 	bl	2f830 <MiniHDLC::sendCharWithStuffing(unsigned char)>
   2f8e8:	e1a01004 	mov	r1, r4
   2f8ec:	e1a00005 	mov	r0, r5
   2f8f0:	e8bd4070 	pop	{r4, r5, r6, lr}
   2f8f4:	eaffffcd 	b	2f830 <MiniHDLC::sendCharWithStuffing(unsigned char)>

0002f8f8 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>:
   2f8f8:	e3a03000 	mov	r3, #0
   2f8fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f900:	e1a05002 	mov	r5, r2
   2f904:	e2806901 	add	r6, r0, #16384	; 0x4000
   2f908:	e5863e54 	str	r3, [r6, #3668]	; 0xe54
   2f90c:	e5863e58 	str	r3, [r6, #3672]	; 0xe58
   2f910:	e1a09001 	mov	r9, r1
   2f914:	e5d01004 	ldrb	r1, [r0, #4]
   2f918:	e1a08000 	mov	r8, r0
   2f91c:	ebffffb4 	bl	2f7f4 <MiniHDLC::sendChar(unsigned char)>
   2f920:	e3550000 	cmp	r5, #0
   2f924:	0a00002a 	beq	2f9d4 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xdc>
   2f928:	e59f40b0 	ldr	r4, [pc, #176]	; 2f9e0 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xe8>
   2f92c:	e59f70b0 	ldr	r7, [pc, #176]	; 2f9e4 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xec>
   2f930:	e0895005 	add	r5, r9, r5
   2f934:	e4d91001 	ldrb	r1, [r9], #1
   2f938:	e1a00008 	mov	r0, r8
   2f93c:	e0212424 	eor	r2, r1, r4, lsr #8
   2f940:	e1a02082 	lsl	r2, r2, #1
   2f944:	e19730b2 	ldrh	r3, [r7, r2]
   2f948:	e0233404 	eor	r3, r3, r4, lsl #8
   2f94c:	e6bfa073 	sxth	sl, r3
   2f950:	e6ff4073 	uxth	r4, r3
   2f954:	ebffffd3 	bl	2f8a8 <MiniHDLC::sendEscaped(unsigned char)>
   2f958:	e1590005 	cmp	r9, r5
   2f95c:	1afffff4 	bne	2f934 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0x3c>
   2f960:	e6ef107a 	uxtb	r1, sl
   2f964:	e1a03424 	lsr	r3, r4, #8
   2f968:	e5d82007 	ldrb	r2, [r8, #7]
   2f96c:	e1a00008 	mov	r0, r8
   2f970:	e3520000 	cmp	r2, #0
   2f974:	01a04003 	moveq	r4, r3
   2f978:	11a04001 	movne	r4, r1
   2f97c:	11a01003 	movne	r1, r3
   2f980:	ebffffc8 	bl	2f8a8 <MiniHDLC::sendEscaped(unsigned char)>
   2f984:	e1a01004 	mov	r1, r4
   2f988:	e1a00008 	mov	r0, r8
   2f98c:	ebffffc5 	bl	2f8a8 <MiniHDLC::sendEscaped(unsigned char)>
   2f990:	e1a00008 	mov	r0, r8
   2f994:	e5d81004 	ldrb	r1, [r8, #4]
   2f998:	ebffff95 	bl	2f7f4 <MiniHDLC::sendChar(unsigned char)>
   2f99c:	e59f3044 	ldr	r3, [pc, #68]	; 2f9e8 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xf0>
   2f9a0:	e5933000 	ldr	r3, [r3]
   2f9a4:	e3530000 	cmp	r3, #0
   2f9a8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f9ac:	e5961e54 	ldr	r1, [r6, #3668]	; 0xe54
   2f9b0:	e3510000 	cmp	r1, #0
   2f9b4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f9b8:	e2880c27 	add	r0, r8, #9984	; 0x2700
   2f9bc:	e280003c 	add	r0, r0, #60	; 0x3c
   2f9c0:	e12fff33 	blx	r3
   2f9c4:	e3a03000 	mov	r3, #0
   2f9c8:	e5863e54 	str	r3, [r6, #3668]	; 0xe54
   2f9cc:	e5863e58 	str	r3, [r6, #3672]	; 0xe58
   2f9d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f9d4:	e3a030ff 	mov	r3, #255	; 0xff
   2f9d8:	e1a01003 	mov	r1, r3
   2f9dc:	eaffffe1 	b	2f968 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0x70>
   2f9e0:	0000ffff 	.word	0x0000ffff
   2f9e4:	00047b48 	.word	0x00047b48
   2f9e8:	0005cf4c 	.word	0x0005cf4c

0002f9ec <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)>:
   2f9ec:	e3510000 	cmp	r1, #0
   2f9f0:	e1a02000 	mov	r2, r0
   2f9f4:	0a00000d 	beq	2fa30 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x44>
   2f9f8:	e0801001 	add	r1, r0, r1
   2f9fc:	e59fc034 	ldr	ip, [pc, #52]	; 2fa38 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x4c>
   2fa00:	e59f0034 	ldr	r0, [pc, #52]	; 2fa3c <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x50>
   2fa04:	e2411001 	sub	r1, r1, #1
   2fa08:	e2422001 	sub	r2, r2, #1
   2fa0c:	e5f23001 	ldrb	r3, [r2, #1]!
   2fa10:	e0233420 	eor	r3, r3, r0, lsr #8
   2fa14:	e1a03083 	lsl	r3, r3, #1
   2fa18:	e19c30b3 	ldrh	r3, [ip, r3]
   2fa1c:	e1510002 	cmp	r1, r2
   2fa20:	e0230400 	eor	r0, r3, r0, lsl #8
   2fa24:	e6ff0070 	uxth	r0, r0
   2fa28:	1afffff7 	bne	2fa0c <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x20>
   2fa2c:	e12fff1e 	bx	lr
   2fa30:	e59f0004 	ldr	r0, [pc, #4]	; 2fa3c <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x50>
   2fa34:	e12fff1e 	bx	lr
   2fa38:	00047b48 	.word	0x00047b48
   2fa3c:	0000ffff 	.word	0x0000ffff

0002fa40 <CommandHandler::hdlcFrameTxStatic(unsigned char const*, unsigned int)>:
   2fa40:	e59f3018 	ldr	r3, [pc, #24]	; 2fa60 <CommandHandler::hdlcFrameTxStatic(unsigned char const*, unsigned int)+0x20>
   2fa44:	e5932000 	ldr	r2, [r3]
   2fa48:	e3520000 	cmp	r2, #0
   2fa4c:	012fff1e 	bxeq	lr
   2fa50:	e5933004 	ldr	r3, [r3, #4]
   2fa54:	e3530000 	cmp	r3, #0
   2fa58:	012fff1e 	bxeq	lr
   2fa5c:	e12fff13 	bx	r3
   2fa60:	0005cf54 	.word	0x0005cf54

0002fa64 <CommandHandler::CommandHandler()>:
   2fa64:	e92d4070 	push	{r4, r5, r6, lr}
   2fa68:	e3a020d7 	mov	r2, #215	; 0xd7
   2fa6c:	e3a04000 	mov	r4, #0
   2fa70:	e3a06001 	mov	r6, #1
   2fa74:	e1a05000 	mov	r5, r0
   2fa78:	e59f3090 	ldr	r3, [pc, #144]	; 2fb10 <CommandHandler::CommandHandler()+0xac>
   2fa7c:	e24dd018 	sub	sp, sp, #24
   2fa80:	e58d2000 	str	r2, [sp]
   2fa84:	e58d3008 	str	r3, [sp, #8]
   2fa88:	e58d3004 	str	r3, [sp, #4]
   2fa8c:	e59f2080 	ldr	r2, [pc, #128]	; 2fb14 <CommandHandler::CommandHandler()+0xb0>
   2fa90:	e3a030e7 	mov	r3, #231	; 0xe7
   2fa94:	e59f107c 	ldr	r1, [pc, #124]	; 2fb18 <CommandHandler::CommandHandler()+0xb4>
   2fa98:	e58d4010 	str	r4, [sp, #16]
   2fa9c:	e58d600c 	str	r6, [sp, #12]
   2faa0:	e2800f65 	add	r0, r0, #404	; 0x194
   2faa4:	ebfffda2 	bl	2f134 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)>
   2faa8:	e59f006c 	ldr	r0, [pc, #108]	; 2fb1c <CommandHandler::CommandHandler()+0xb8>
   2faac:	e3a01032 	mov	r1, #50	; 0x32
   2fab0:	e5805000 	str	r5, [r0]
   2fab4:	e1a00005 	mov	r0, r5
   2fab8:	e2853a05 	add	r3, r5, #20480	; 0x5000
   2fabc:	e2852a07 	add	r2, r5, #28672	; 0x7000
   2fac0:	e5834870 	str	r4, [r3, #2160]	; 0x870
   2fac4:	e5831878 	str	r1, [r3, #2168]	; 0x878
   2fac8:	e5834874 	str	r4, [r3, #2164]	; 0x874
   2facc:	e58247fc 	str	r4, [r2, #2044]	; 0x7fc
   2fad0:	e5824800 	str	r4, [r2, #2048]	; 0x800
   2fad4:	e5824804 	str	r4, [r2, #2052]	; 0x804
   2fad8:	e5824808 	str	r4, [r2, #2056]	; 0x808
   2fadc:	e5854190 	str	r4, [r5, #400]	; 0x190
   2fae0:	e5c34066 	strb	r4, [r3, #102]	; 0x66
   2fae4:	e5c3408f 	strb	r4, [r3, #143]	; 0x8f
   2fae8:	e5834860 	str	r4, [r3, #2144]	; 0x860
   2faec:	e5834864 	str	r4, [r3, #2148]	; 0x864
   2faf0:	e5834868 	str	r4, [r3, #2152]	; 0x868
   2faf4:	e583486c 	str	r4, [r3, #2156]	; 0x86c
   2faf8:	e1c360b0 	strh	r6, [r3]
   2fafc:	e58348b0 	str	r4, [r3, #2224]	; 0x8b0
   2fb00:	e58247f4 	str	r4, [r2, #2036]	; 0x7f4
   2fb04:	e5c267f8 	strb	r6, [r2, #2040]	; 0x7f8
   2fb08:	e28dd018 	add	sp, sp, #24
   2fb0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fb10:	00002710 	.word	0x00002710
   2fb14:	00030b0c 	.word	0x00030b0c
   2fb18:	0002fa40 	.word	0x0002fa40
   2fb1c:	0005cf54 	.word	0x0005cf54

0002fb20 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>:
   2fb20:	e1a0c000 	mov	ip, r0
   2fb24:	e5900190 	ldr	r0, [r0, #400]	; 0x190
   2fb28:	e3500013 	cmp	r0, #19
   2fb2c:	8a00000c 	bhi	2fb64 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))+0x44>
   2fb30:	e92d4010 	push	{r4, lr}
   2fb34:	e0804100 	add	r4, r0, r0, lsl #2
   2fb38:	e08ce104 	add	lr, ip, r4, lsl #2
   2fb3c:	e78c1104 	str	r1, [ip, r4, lsl #2]
   2fb40:	e58e3008 	str	r3, [lr, #8]
   2fb44:	e59d3008 	ldr	r3, [sp, #8]
   2fb48:	e2801001 	add	r1, r0, #1
   2fb4c:	e58e300c 	str	r3, [lr, #12]
   2fb50:	e59d300c 	ldr	r3, [sp, #12]
   2fb54:	e5ce2004 	strb	r2, [lr, #4]
   2fb58:	e58e3010 	str	r3, [lr, #16]
   2fb5c:	e58c1190 	str	r1, [ip, #400]	; 0x190
   2fb60:	e8bd8010 	pop	{r4, pc}
   2fb64:	e3e00000 	mvn	r0, #0
   2fb68:	e12fff1e 	bx	lr

0002fb6c <CommandHandler::commsSocketEnable(unsigned int, bool)>:
   2fb6c:	e5903190 	ldr	r3, [r0, #400]	; 0x190
   2fb70:	e1530001 	cmp	r3, r1
   2fb74:	80811101 	addhi	r1, r1, r1, lsl #2
   2fb78:	80801101 	addhi	r1, r0, r1, lsl #2
   2fb7c:	85c12004 	strbhi	r2, [r1, #4]
   2fb80:	e12fff1e 	bx	lr

0002fb84 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)>:
   2fb84:	e59f3010 	ldr	r3, [pc, #16]	; 2fb9c <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)+0x18>
   2fb88:	e5930000 	ldr	r0, [r3]
   2fb8c:	e3500000 	cmp	r0, #0
   2fb90:	012fff1e 	bxeq	lr
   2fb94:	e2800f65 	add	r0, r0, #404	; 0x194
   2fb98:	eafffe65 	b	2f534 <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)>
   2fb9c:	0005cf54 	.word	0x0005cf54

0002fba0 <CommandHandler::hdlcTxAvailableStatic()>:
   2fba0:	e59f3020 	ldr	r3, [pc, #32]	; 2fbc8 <CommandHandler::hdlcTxAvailableStatic()+0x28>
   2fba4:	e5932000 	ldr	r2, [r3]
   2fba8:	e3520000 	cmp	r2, #0
   2fbac:	0a000003 	beq	2fbc0 <CommandHandler::hdlcTxAvailableStatic()+0x20>
   2fbb0:	e5933008 	ldr	r3, [r3, #8]
   2fbb4:	e3530000 	cmp	r3, #0
   2fbb8:	0a000000 	beq	2fbc0 <CommandHandler::hdlcTxAvailableStatic()+0x20>
   2fbbc:	e12fff13 	bx	r3
   2fbc0:	e3a00000 	mov	r0, #0
   2fbc4:	e12fff1e 	bx	lr
   2fbc8:	0005cf54 	.word	0x0005cf54

0002fbcc <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>:
   2fbcc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fbd0:	e1a07000 	mov	r7, r0
   2fbd4:	e5900190 	ldr	r0, [r0, #400]	; 0x190
   2fbd8:	e1a08001 	mov	r8, r1
   2fbdc:	e3500000 	cmp	r0, #0
   2fbe0:	e1a09002 	mov	r9, r2
   2fbe4:	e1a0a003 	mov	sl, r3
   2fbe8:	e24dd00c 	sub	sp, sp, #12
   2fbec:	0a00002f 	beq	2fcb0 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xe4>
   2fbf0:	e1a04007 	mov	r4, r7
   2fbf4:	e3a05000 	mov	r5, #0
   2fbf8:	e59fb0d4 	ldr	fp, [pc, #212]	; 2fcd4 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x108>
   2fbfc:	ea00000f 	b	2fc40 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x74>
   2fc00:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   2fc04:	e1a02009 	mov	r2, r9
   2fc08:	e58d3004 	str	r3, [sp, #4]
   2fc0c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   2fc10:	e1a01008 	mov	r1, r8
   2fc14:	e58d3000 	str	r3, [sp]
   2fc18:	e5940000 	ldr	r0, [r4]
   2fc1c:	e1a0300a 	mov	r3, sl
   2fc20:	e12fff36 	blx	r6
   2fc24:	e3500000 	cmp	r0, #0
   2fc28:	1a00001e 	bne	2fca8 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xdc>
   2fc2c:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2fc30:	e2855001 	add	r5, r5, #1
   2fc34:	e1500005 	cmp	r0, r5
   2fc38:	e2844014 	add	r4, r4, #20
   2fc3c:	9a000019 	bls	2fca8 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xdc>
   2fc40:	e5d43004 	ldrb	r3, [r4, #4]
   2fc44:	e3530000 	cmp	r3, #0
   2fc48:	0a00000b 	beq	2fc7c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xb0>
   2fc4c:	e5946008 	ldr	r6, [r4, #8]
   2fc50:	e3560000 	cmp	r6, #0
   2fc54:	1affffe9 	bne	2fc00 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x34>
   2fc58:	e3550000 	cmp	r5, #0
   2fc5c:	0afffff3 	beq	2fc30 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x64>
   2fc60:	ebffdbb8 	bl	26b48 <CLogger::Get()>
   2fc64:	e3a02004 	mov	r2, #4
   2fc68:	e1a0100b 	mov	r1, fp
   2fc6c:	e59f3064 	ldr	r3, [pc, #100]	; 2fcd8 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x10c>
   2fc70:	e58d5000 	str	r5, [sp]
   2fc74:	ebffdaf5 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fc78:	eaffffeb 	b	2fc2c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x60>
   2fc7c:	ebffdbb1 	bl	26b48 <CLogger::Get()>
   2fc80:	e58d5000 	str	r5, [sp]
   2fc84:	e3a02004 	mov	r2, #4
   2fc88:	e1a0100b 	mov	r1, fp
   2fc8c:	e59f3048 	ldr	r3, [pc, #72]	; 2fcdc <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x110>
   2fc90:	ebffdaee 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fc94:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2fc98:	e2855001 	add	r5, r5, #1
   2fc9c:	e1500005 	cmp	r0, r5
   2fca0:	e2844014 	add	r4, r4, #20
   2fca4:	8affffe5 	bhi	2fc40 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x74>
   2fca8:	e28dd00c 	add	sp, sp, #12
   2fcac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fcb0:	ebffdba4 	bl	26b48 <CLogger::Get()>
   2fcb4:	e3a02004 	mov	r2, #4
   2fcb8:	e59f3020 	ldr	r3, [pc, #32]	; 2fce0 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x114>
   2fcbc:	e59f1010 	ldr	r1, [pc, #16]	; 2fcd4 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x108>
   2fcc0:	ebffdae2 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fcc4:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2fcc8:	e3500000 	cmp	r0, #0
   2fccc:	1affffc7 	bne	2fbf0 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x24>
   2fcd0:	eafffff4 	b	2fca8 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xdc>
   2fcd4:	00048144 	.word	0x00048144
   2fcd8:	00047d98 	.word	0x00047d98
   2fcdc:	00047d80 	.word	0x00047d80
   2fce0:	00047d58 	.word	0x00047d58

0002fce4 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)>:
   2fce4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fce8:	e1a06000 	mov	r6, r0
   2fcec:	e5900190 	ldr	r0, [r0, #400]	; 0x190
   2fcf0:	e5dd7028 	ldrb	r7, [sp, #40]	; 0x28
   2fcf4:	e3500000 	cmp	r0, #0
   2fcf8:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fcfc:	e1a09001 	mov	r9, r1
   2fd00:	e1a08002 	mov	r8, r2
   2fd04:	e1a0a003 	mov	sl, r3
   2fd08:	e1a04006 	mov	r4, r6
   2fd0c:	e3a05000 	mov	r5, #0
   2fd10:	ea00000c 	b	2fd48 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x64>
   2fd14:	e594300c 	ldr	r3, [r4, #12]
   2fd18:	e3530000 	cmp	r3, #0
   2fd1c:	0a000005 	beq	2fd38 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2fd20:	e1a0100a 	mov	r1, sl
   2fd24:	e1a00008 	mov	r0, r8
   2fd28:	e12fff33 	blx	r3
   2fd2c:	e3500000 	cmp	r0, #0
   2fd30:	18bd8ff8 	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd34:	e5960190 	ldr	r0, [r6, #400]	; 0x190
   2fd38:	e2855001 	add	r5, r5, #1
   2fd3c:	e1500005 	cmp	r0, r5
   2fd40:	e2844014 	add	r4, r4, #20
   2fd44:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd48:	e5d4c004 	ldrb	ip, [r4, #4]
   2fd4c:	e35c0000 	cmp	ip, #0
   2fd50:	0afffff8 	beq	2fd38 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2fd54:	e3570000 	cmp	r7, #0
   2fd58:	1affffed 	bne	2fd14 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x30>
   2fd5c:	e594b010 	ldr	fp, [r4, #16]
   2fd60:	e35b0000 	cmp	fp, #0
   2fd64:	0afffff3 	beq	2fd38 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2fd68:	e1a0300a 	mov	r3, sl
   2fd6c:	e1a02008 	mov	r2, r8
   2fd70:	e1a01009 	mov	r1, r9
   2fd74:	e5940000 	ldr	r0, [r4]
   2fd78:	e12fff3b 	blx	fp
   2fd7c:	e3500000 	cmp	r0, #0
   2fd80:	0affffeb 	beq	2fd34 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x50>
   2fd84:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002fd88 <CommandHandler::getFileReceiveStatus(unsigned long&, unsigned long&)>:
   2fd88:	e2803a05 	add	r3, r0, #20480	; 0x5000
   2fd8c:	e5930864 	ldr	r0, [r3, #2148]	; 0x864
   2fd90:	e3500000 	cmp	r0, #0
   2fd94:	012fff1e 	bxeq	lr
   2fd98:	e5933868 	ldr	r3, [r3, #2152]	; 0x868
   2fd9c:	e1500003 	cmp	r0, r3
   2fda0:	15810000 	strne	r0, [r1]
   2fda4:	13a00001 	movne	r0, #1
   2fda8:	15823000 	strne	r3, [r2]
   2fdac:	03a00000 	moveq	r0, #0
   2fdb0:	e12fff1e 	bx	lr

0002fdb4 <CommandHandler::sendKeyStrToTarget(char const*)>:
   2fdb4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2fdb8:	e3a04000 	mov	r4, #0
   2fdbc:	e1a06000 	mov	r6, r0
   2fdc0:	e1a09001 	mov	r9, r1
   2fdc4:	e1a07004 	mov	r7, r4
   2fdc8:	e59f50a0 	ldr	r5, [pc, #160]	; 2fe70 <CommandHandler::sendKeyStrToTarget(char const*)+0xbc>
   2fdcc:	e2808a05 	add	r8, r0, #20480	; 0x5000
   2fdd0:	ea00000f 	b	2fe14 <CommandHandler::sendKeyStrToTarget(char const*)+0x60>
   2fdd4:	e3510000 	cmp	r1, #0
   2fdd8:	01520003 	cmpeq	r2, r3
   2fddc:	0a00000b 	beq	2fe10 <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2fde0:	e5983870 	ldr	r3, [r8, #2160]	; 0x870
   2fde4:	e7d92004 	ldrb	r2, [r9, r4]
   2fde8:	e0863003 	add	r3, r6, r3
   2fdec:	e2833b16 	add	r3, r3, #22528	; 0x5800
   2fdf0:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
   2fdf4:	e5983870 	ldr	r3, [r8, #2160]	; 0x870
   2fdf8:	e5982878 	ldr	r2, [r8, #2168]	; 0x878
   2fdfc:	e2833001 	add	r3, r3, #1
   2fe00:	e5883870 	str	r3, [r8, #2160]	; 0x870
   2fe04:	e5983870 	ldr	r3, [r8, #2160]	; 0x870
   2fe08:	e1530002 	cmp	r3, r2
   2fe0c:	25887870 	strcs	r7, [r8, #2160]	; 0x870
   2fe10:	e2844001 	add	r4, r4, #1
   2fe14:	e1a00009 	mov	r0, r9
   2fe18:	ebffe889 	bl	2a044 <strlen>
   2fe1c:	e1500004 	cmp	r0, r4
   2fe20:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   2fe24:	e5953000 	ldr	r3, [r5]
   2fe28:	e2833a05 	add	r3, r3, #20480	; 0x5000
   2fe2c:	e5932878 	ldr	r2, [r3, #2168]	; 0x878
   2fe30:	e3520000 	cmp	r2, #0
   2fe34:	0afffff5 	beq	2fe10 <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2fe38:	e5930870 	ldr	r0, [r3, #2160]	; 0x870
   2fe3c:	e5931874 	ldr	r1, [r3, #2164]	; 0x874
   2fe40:	e1500001 	cmp	r0, r1
   2fe44:	0affffe5 	beq	2fde0 <CommandHandler::sendKeyStrToTarget(char const*)+0x2c>
   2fe48:	e5931874 	ldr	r1, [r3, #2164]	; 0x874
   2fe4c:	e5930870 	ldr	r0, [r3, #2160]	; 0x870
   2fe50:	e2422001 	sub	r2, r2, #1
   2fe54:	e1510000 	cmp	r1, r0
   2fe58:	e5933870 	ldr	r3, [r3, #2160]	; 0x870
   2fe5c:	3affffdc 	bcc	2fdd4 <CommandHandler::sendKeyStrToTarget(char const*)+0x20>
   2fe60:	e0411003 	sub	r1, r1, r3
   2fe64:	e3510001 	cmp	r1, #1
   2fe68:	9affffe8 	bls	2fe10 <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2fe6c:	eaffffdb 	b	2fde0 <CommandHandler::sendKeyStrToTarget(char const*)+0x2c>
   2fe70:	0005cf54 	.word	0x0005cf54

0002fe74 <CommandHandler::sendKeyStrToTargetStatic(char const*)>:
   2fe74:	e59f300c 	ldr	r3, [pc, #12]	; 2fe88 <CommandHandler::sendKeyStrToTargetStatic(char const*)+0x14>
   2fe78:	e5930000 	ldr	r0, [r3]
   2fe7c:	e3500000 	cmp	r0, #0
   2fe80:	012fff1e 	bxeq	lr
   2fe84:	eaffffca 	b	2fdb4 <CommandHandler::sendKeyStrToTarget(char const*)>
   2fe88:	0005cf54 	.word	0x0005cf54

0002fe8c <CommandHandler::getTxAvailable()>:
   2fe8c:	e59f3020 	ldr	r3, [pc, #32]	; 2feb4 <CommandHandler::getTxAvailable()+0x28>
   2fe90:	e5932000 	ldr	r2, [r3]
   2fe94:	e3520000 	cmp	r2, #0
   2fe98:	0a000003 	beq	2feac <CommandHandler::getTxAvailable()+0x20>
   2fe9c:	e5933008 	ldr	r3, [r3, #8]
   2fea0:	e3530000 	cmp	r3, #0
   2fea4:	0a000000 	beq	2feac <CommandHandler::getTxAvailable()+0x20>
   2fea8:	e12fff13 	bx	r3
   2feac:	e3a00000 	mov	r0, #0
   2feb0:	e12fff1e 	bx	lr
   2feb4:	0005cf54 	.word	0x0005cf54

0002feb8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>:
   2feb8:	e92d4070 	push	{r4, r5, r6, lr}
   2febc:	e1a06001 	mov	r6, r1
   2fec0:	e1a04002 	mov	r4, r2
   2fec4:	e24ddc4e 	sub	sp, sp, #19968	; 0x4e00
   2fec8:	e24dd050 	sub	sp, sp, #80	; 0x50
   2fecc:	e28d2c4e 	add	r2, sp, #19968	; 0x4e00
   2fed0:	e5925064 	ldr	r5, [r2, #100]	; 0x64
   2fed4:	e28dc030 	add	ip, sp, #48	; 0x30
   2fed8:	e3a01014 	mov	r1, #20
   2fedc:	e2822064 	add	r2, r2, #100	; 0x64
   2fee0:	e28d0008 	add	r0, sp, #8
   2fee4:	e59f2180 	ldr	r2, [pc, #384]	; 3006c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b4>
   2fee8:	e58dc004 	str	ip, [sp, #4]
   2feec:	ebfff866 	bl	2e08c <snprintf>
   2fef0:	e1a03005 	mov	r3, r5
   2fef4:	e3a01014 	mov	r1, #20
   2fef8:	e59f216c 	ldr	r2, [pc, #364]	; 3006c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b4>
   2fefc:	e28d001c 	add	r0, sp, #28
   2ff00:	ebfff861 	bl	2e08c <snprintf>
   2ff04:	e59f2164 	ldr	r2, [pc, #356]	; 30070 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff08:	e59f1164 	ldr	r1, [pc, #356]	; 30074 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1bc>
   2ff0c:	e59d0004 	ldr	r0, [sp, #4]
   2ff10:	ebfff7f1 	bl	2dedc <strlcpy>
   2ff14:	e1a01006 	mov	r1, r6
   2ff18:	e59f2150 	ldr	r2, [pc, #336]	; 30070 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff1c:	e59d0004 	ldr	r0, [sp, #4]
   2ff20:	ebfff809 	bl	2df4c <strlcat>
   2ff24:	e59f2144 	ldr	r2, [pc, #324]	; 30070 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff28:	e59f1148 	ldr	r1, [pc, #328]	; 30078 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c0>
   2ff2c:	e59d0004 	ldr	r0, [sp, #4]
   2ff30:	ebfff805 	bl	2df4c <strlcat>
   2ff34:	e1a00004 	mov	r0, r4
   2ff38:	ebffe841 	bl	2a044 <strlen>
   2ff3c:	e3500000 	cmp	r0, #0
   2ff40:	1a000038 	bne	30028 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x170>
   2ff44:	e59f2124 	ldr	r2, [pc, #292]	; 30070 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff48:	e59f112c 	ldr	r1, [pc, #300]	; 3007c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c4>
   2ff4c:	e59d0004 	ldr	r0, [sp, #4]
   2ff50:	ebfff7fd 	bl	2df4c <strlcat>
   2ff54:	e59f2114 	ldr	r2, [pc, #276]	; 30070 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff58:	e28d1008 	add	r1, sp, #8
   2ff5c:	e59d0004 	ldr	r0, [sp, #4]
   2ff60:	ebfff7f9 	bl	2df4c <strlcat>
   2ff64:	e59f2104 	ldr	r2, [pc, #260]	; 30070 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff68:	e59f1110 	ldr	r1, [pc, #272]	; 30080 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c8>
   2ff6c:	e59d0004 	ldr	r0, [sp, #4]
   2ff70:	ebfff7f5 	bl	2df4c <strlcat>
   2ff74:	e59f20f4 	ldr	r2, [pc, #244]	; 30070 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff78:	e28d101c 	add	r1, sp, #28
   2ff7c:	e59d0004 	ldr	r0, [sp, #4]
   2ff80:	ebfff7f1 	bl	2df4c <strlcat>
   2ff84:	e59f20e4 	ldr	r2, [pc, #228]	; 30070 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff88:	e59f10f4 	ldr	r1, [pc, #244]	; 30084 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1cc>
   2ff8c:	e59d0004 	ldr	r0, [sp, #4]
   2ff90:	ebfff7ed 	bl	2df4c <strlcat>
   2ff94:	e59d0004 	ldr	r0, [sp, #4]
   2ff98:	ebffe829 	bl	2a044 <strlen>
   2ff9c:	e2800001 	add	r0, r0, #1
   2ffa0:	e59f30e0 	ldr	r3, [pc, #224]	; 30088 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d0>
   2ffa4:	e0854000 	add	r4, r5, r0
   2ffa8:	e2846001 	add	r6, r4, #1
   2ffac:	e1560003 	cmp	r6, r3
   2ffb0:	8a000025 	bhi	3004c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x194>
   2ffb4:	e3550000 	cmp	r5, #0
   2ffb8:	0a00000b 	beq	2ffec <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x134>
   2ffbc:	e28d3c4e 	add	r3, sp, #19968	; 0x4e00
   2ffc0:	e2833060 	add	r3, r3, #96	; 0x60
   2ffc4:	e5933000 	ldr	r3, [r3]
   2ffc8:	e3530000 	cmp	r3, #0
   2ffcc:	0a000012 	beq	3001c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x164>
   2ffd0:	e59d3004 	ldr	r3, [sp, #4]
   2ffd4:	e1a02005 	mov	r2, r5
   2ffd8:	e0830000 	add	r0, r3, r0
   2ffdc:	e28d3c4e 	add	r3, sp, #19968	; 0x4e00
   2ffe0:	e5931060 	ldr	r1, [r3, #96]	; 0x60
   2ffe4:	e2833060 	add	r3, r3, #96	; 0x60
   2ffe8:	ebffea10 	bl	2a830 <memcpy>
   2ffec:	e3a02000 	mov	r2, #0
   2fff0:	e59f3094 	ldr	r3, [pc, #148]	; 3008c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d4>
   2fff4:	e5930000 	ldr	r0, [r3]
   2fff8:	e28d3ee5 	add	r3, sp, #3664	; 0xe50
   2fffc:	e0833004 	add	r3, r3, r4
   30000:	e1500002 	cmp	r0, r2
   30004:	e5432e20 	strb	r2, [r3, #-3616]	; 0xfffff1e0
   30008:	0a000003 	beq	3001c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x164>
   3000c:	e1a02006 	mov	r2, r6
   30010:	e59d1004 	ldr	r1, [sp, #4]
   30014:	e2800f65 	add	r0, r0, #404	; 0x194
   30018:	ebfffe36 	bl	2f8f8 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>
   3001c:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   30020:	e28dd050 	add	sp, sp, #80	; 0x50
   30024:	e8bd8070 	pop	{r4, r5, r6, pc}
   30028:	e59f2040 	ldr	r2, [pc, #64]	; 30070 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   3002c:	e59f105c 	ldr	r1, [pc, #92]	; 30090 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d8>
   30030:	e59d0004 	ldr	r0, [sp, #4]
   30034:	ebfff7c4 	bl	2df4c <strlcat>
   30038:	e1a01004 	mov	r1, r4
   3003c:	e59f202c 	ldr	r2, [pc, #44]	; 30070 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   30040:	e59d0004 	ldr	r0, [sp, #4]
   30044:	ebfff7c0 	bl	2df4c <strlcat>
   30048:	eaffffbd 	b	2ff44 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x8c>
   3004c:	ebffdabd 	bl	26b48 <CLogger::Get()>
   30050:	e3a02002 	mov	r2, #2
   30054:	e59f3038 	ldr	r3, [pc, #56]	; 30094 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1dc>
   30058:	e59f1038 	ldr	r1, [pc, #56]	; 30098 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1e0>
   3005c:	ebffd9fb 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30060:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   30064:	e28dd050 	add	sp, sp, #80	; 0x50
   30068:	e8bd8070 	pop	{r4, r5, r6, pc}
   3006c:	00047dac 	.word	0x00047dac
   30070:	00004e20 	.word	0x00004e20
   30074:	00047db0 	.word	0x00047db0
   30078:	000485cc 	.word	0x000485cc
   3007c:	00047dc0 	.word	0x00047dc0
   30080:	00047dcc 	.word	0x00047dcc
   30084:	00047df4 	.word	0x00047df4
   30088:	00004e1f 	.word	0x00004e1f
   3008c:	0005cf54 	.word	0x0005cf54
   30090:	0004358c 	.word	0x0004358c
   30094:	00047dd8 	.word	0x00047dd8
   30098:	00048144 	.word	0x00048144

0003009c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>:
   3009c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   300a0:	e1a08002 	mov	r8, r2
   300a4:	e1a07003 	mov	r7, r3
   300a8:	e1a05001 	mov	r5, r1
   300ac:	e24ddc27 	sub	sp, sp, #9984	; 0x2700
   300b0:	e24dd028 	sub	sp, sp, #40	; 0x28
   300b4:	e1a03001 	mov	r3, r1
   300b8:	e28d4018 	add	r4, sp, #24
   300bc:	e3a0100a 	mov	r1, #10
   300c0:	e59f20c0 	ldr	r2, [pc, #192]	; 30188 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xec>
   300c4:	e1a06000 	mov	r6, r0
   300c8:	e28d000c 	add	r0, sp, #12
   300cc:	ebfff7ee 	bl	2e08c <snprintf>
   300d0:	e59f20b4 	ldr	r2, [pc, #180]	; 3018c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   300d4:	e59f10b4 	ldr	r1, [pc, #180]	; 30190 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf4>
   300d8:	e1a00004 	mov	r0, r4
   300dc:	ebfff77e 	bl	2dedc <strlcpy>
   300e0:	e1a01008 	mov	r1, r8
   300e4:	e59f20a0 	ldr	r2, [pc, #160]	; 3018c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   300e8:	e1a00004 	mov	r0, r4
   300ec:	ebfff796 	bl	2df4c <strlcat>
   300f0:	e59f2094 	ldr	r2, [pc, #148]	; 3018c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   300f4:	e59f1098 	ldr	r1, [pc, #152]	; 30194 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf8>
   300f8:	e1a00004 	mov	r0, r4
   300fc:	ebfff792 	bl	2df4c <strlcat>
   30100:	e59f2084 	ldr	r2, [pc, #132]	; 3018c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   30104:	e59f108c 	ldr	r1, [pc, #140]	; 30198 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xfc>
   30108:	e1a00004 	mov	r0, r4
   3010c:	ebfff78e 	bl	2df4c <strlcat>
   30110:	e1a01007 	mov	r1, r7
   30114:	e1a00004 	mov	r0, r4
   30118:	e59f206c 	ldr	r2, [pc, #108]	; 3018c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   3011c:	ebfff78a 	bl	2df4c <strlcat>
   30120:	e3750001 	cmn	r5, #1
   30124:	0a000007 	beq	30148 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xac>
   30128:	e59f205c 	ldr	r2, [pc, #92]	; 3018c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   3012c:	e59f1068 	ldr	r1, [pc, #104]	; 3019c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x100>
   30130:	e1a00004 	mov	r0, r4
   30134:	ebfff784 	bl	2df4c <strlcat>
   30138:	e1a00004 	mov	r0, r4
   3013c:	e59f2048 	ldr	r2, [pc, #72]	; 3018c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   30140:	e28d100c 	add	r1, sp, #12
   30144:	ebfff780 	bl	2df4c <strlcat>
   30148:	e59f203c 	ldr	r2, [pc, #60]	; 3018c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   3014c:	e59f104c 	ldr	r1, [pc, #76]	; 301a0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x104>
   30150:	e1a00004 	mov	r0, r4
   30154:	ebfff77c 	bl	2df4c <strlcat>
   30158:	e1a00004 	mov	r0, r4
   3015c:	ebffe7b8 	bl	2a044 <strlen>
   30160:	e1a03005 	mov	r3, r5
   30164:	e58d0004 	str	r0, [sp, #4]
   30168:	e59f2034 	ldr	r2, [pc, #52]	; 301a4 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x108>
   3016c:	e1a00006 	mov	r0, r6
   30170:	e59f1030 	ldr	r1, [pc, #48]	; 301a8 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x10c>
   30174:	e58d4000 	str	r4, [sp]
   30178:	ebffff4e 	bl	2feb8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   3017c:	e28ddc27 	add	sp, sp, #9984	; 0x2700
   30180:	e28dd028 	add	sp, sp, #40	; 0x28
   30184:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   30188:	00047dac 	.word	0x00047dac
   3018c:	00002710 	.word	0x00002710
   30190:	00047db0 	.word	0x00047db0
   30194:	000485cc 	.word	0x000485cc
   30198:	0004358c 	.word	0x0004358c
   3019c:	00047dc0 	.word	0x00047dc0
   301a0:	00047de8 	.word	0x00047de8
   301a4:	000493c8 	.word	0x000493c8
   301a8:	00047df8 	.word	0x00047df8

000301ac <CommandHandler::sendUnnumberedMsg(char const*, char const*)>:
   301ac:	e1a0c001 	mov	ip, r1
   301b0:	e1a03002 	mov	r3, r2
   301b4:	e3e01000 	mvn	r1, #0
   301b8:	e1a0200c 	mov	r2, ip
   301bc:	eaffffb6 	b	3009c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>

000301c0 <CommandHandler::handleFileStart(char const*)>:
   301c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   301c4:	e2806a05 	add	r6, r0, #20480	; 0x5000
   301c8:	e1a04000 	mov	r4, r0
   301cc:	e3a03064 	mov	r3, #100	; 0x64
   301d0:	e59f00f0 	ldr	r0, [pc, #240]	; 302c8 <CommandHandler::handleFileStart(char const*)+0x108>
   301d4:	e24dd024 	sub	sp, sp, #36	; 0x24
   301d8:	e2862001 	add	r2, r6, #1
   301dc:	e1a05001 	mov	r5, r1
   301e0:	ebfff7ea 	bl	2e190 <jsonGetValueForKey>
   301e4:	e3500000 	cmp	r0, #0
   301e8:	1a000001 	bne	301f4 <CommandHandler::handleFileStart(char const*)+0x34>
   301ec:	e28dd024 	add	sp, sp, #36	; 0x24
   301f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   301f4:	e3a03028 	mov	r3, #40	; 0x28
   301f8:	e1a01005 	mov	r1, r5
   301fc:	e59f00c8 	ldr	r0, [pc, #200]	; 302cc <CommandHandler::handleFileStart(char const*)+0x10c>
   30200:	e2862066 	add	r2, r6, #102	; 0x66
   30204:	ebfff7e1 	bl	2e190 <jsonGetValueForKey>
   30208:	e3500000 	cmp	r0, #0
   3020c:	0afffff6 	beq	301ec <CommandHandler::handleFileStart(char const*)+0x2c>
   30210:	e3a03014 	mov	r3, #20
   30214:	e1a01005 	mov	r1, r5
   30218:	e59f00b0 	ldr	r0, [pc, #176]	; 302d0 <CommandHandler::handleFileStart(char const*)+0x110>
   3021c:	e28d2008 	add	r2, sp, #8
   30220:	ebfff7da 	bl	2e190 <jsonGetValueForKey>
   30224:	e3500000 	cmp	r0, #0
   30228:	0affffef 	beq	301ec <CommandHandler::handleFileStart(char const*)+0x2c>
   3022c:	e3a0200a 	mov	r2, #10
   30230:	e3a01000 	mov	r1, #0
   30234:	e28d0008 	add	r0, sp, #8
   30238:	ebffe8a9 	bl	2a4e4 <strtoul>
   3023c:	e1a01005 	mov	r1, r5
   30240:	e1a07000 	mov	r7, r0
   30244:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   30248:	e286008f 	add	r0, r6, #143	; 0x8f
   3024c:	ebfff722 	bl	2dedc <strlcpy>
   30250:	e5960860 	ldr	r0, [r6, #2144]	; 0x860
   30254:	e3500000 	cmp	r0, #0
   30258:	0a000000 	beq	30260 <CommandHandler::handleFileStart(char const*)+0xa0>
   3025c:	ebffeb66 	bl	2affc <operator delete[](void*)>
   30260:	e1a00007 	mov	r0, r7
   30264:	ebffeb5d 	bl	2afe0 <operator new[](unsigned int)>
   30268:	e3a05000 	mov	r5, #0
   3026c:	e5860860 	str	r0, [r6, #2144]	; 0x860
   30270:	e5867864 	str	r7, [r6, #2148]	; 0x864
   30274:	e5865868 	str	r5, [r6, #2152]	; 0x868
   30278:	e586586c 	str	r5, [r6, #2156]	; 0x86c
   3027c:	ebfff6dd 	bl	2ddf8 <millis>
   30280:	e2842a07 	add	r2, r4, #28672	; 0x7000
   30284:	e282ce7f 	add	ip, r2, #2032	; 0x7f0
   30288:	e2843c4f 	add	r3, r4, #20224	; 0x4f00
   3028c:	e58608b0 	str	r0, [r6, #2224]	; 0x8b0
   30290:	e28cc00c 	add	ip, ip, #12
   30294:	e58257f4 	str	r5, [r2, #2036]	; 0x7f4
   30298:	e28330f0 	add	r3, r3, #240	; 0xf0
   3029c:	e58d5004 	str	r5, [sp, #4]
   302a0:	e58d5000 	str	r5, [sp]
   302a4:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   302a8:	e88c000f 	stm	ip, {r0, r1, r2, r3}
   302ac:	e1a03005 	mov	r3, r5
   302b0:	e1a00004 	mov	r0, r4
   302b4:	e59f2018 	ldr	r2, [pc, #24]	; 302d4 <CommandHandler::handleFileStart(char const*)+0x114>
   302b8:	e59f1018 	ldr	r1, [pc, #24]	; 302d8 <CommandHandler::handleFileStart(char const*)+0x118>
   302bc:	ebfffefd 	bl	2feb8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   302c0:	e28dd024 	add	sp, sp, #36	; 0x24
   302c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   302c8:	00047dfc 	.word	0x00047dfc
   302cc:	00047e08 	.word	0x00047e08
   302d0:	00047e14 	.word	0x00047e14
   302d4:	000493c8 	.word	0x000493c8
   302d8:	00047e1c 	.word	0x00047e1c

000302dc <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)>:
   302dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   302e0:	e2807a05 	add	r7, r0, #20480	; 0x5000
   302e4:	e1a04000 	mov	r4, r0
   302e8:	e5970860 	ldr	r0, [r7, #2144]	; 0x860
   302ec:	e24dd088 	sub	sp, sp, #136	; 0x88
   302f0:	e3500000 	cmp	r0, #0
   302f4:	0a000007 	beq	30318 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x3c>
   302f8:	e1a06002 	mov	r6, r2
   302fc:	e1a05003 	mov	r5, r3
   30300:	e59f00cc 	ldr	r0, [pc, #204]	; 303d4 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0xf8>
   30304:	e3a03014 	mov	r3, #20
   30308:	e28d200c 	add	r2, sp, #12
   3030c:	ebfff79f 	bl	2e190 <jsonGetValueForKey>
   30310:	e3500000 	cmp	r0, #0
   30314:	1a000001 	bne	30320 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x44>
   30318:	e28dd088 	add	sp, sp, #136	; 0x88
   3031c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   30320:	e3a0200a 	mov	r2, #10
   30324:	e3a01000 	mov	r1, #0
   30328:	e28d000c 	add	r0, sp, #12
   3032c:	ebffe86c 	bl	2a4e4 <strtoul>
   30330:	e5973864 	ldr	r3, [r7, #2148]	; 0x864
   30334:	e0802005 	add	r2, r0, r5
   30338:	e1520003 	cmp	r2, r3
   3033c:	e1a08000 	mov	r8, r0
   30340:	8afffff4 	bhi	30318 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x3c>
   30344:	e5970860 	ldr	r0, [r7, #2144]	; 0x860
   30348:	e1a01006 	mov	r1, r6
   3034c:	e1a02005 	mov	r2, r5
   30350:	e0800008 	add	r0, r0, r8
   30354:	ebffe935 	bl	2a830 <memcpy>
   30358:	e5972868 	ldr	r2, [r7, #2152]	; 0x868
   3035c:	e597386c 	ldr	r3, [r7, #2156]	; 0x86c
   30360:	e0822005 	add	r2, r2, r5
   30364:	e2833001 	add	r3, r3, #1
   30368:	e5872868 	str	r2, [r7, #2152]	; 0x868
   3036c:	e587386c 	str	r3, [r7, #2156]	; 0x86c
   30370:	ebfff6a0 	bl	2ddf8 <millis>
   30374:	e284ca07 	add	ip, r4, #28672	; 0x7000
   30378:	e58708b0 	str	r0, [r7, #2224]	; 0x8b0
   3037c:	e59c37f4 	ldr	r3, [ip, #2036]	; 0x7f4
   30380:	e28d0024 	add	r0, sp, #36	; 0x24
   30384:	e0841103 	add	r1, r4, r3, lsl #2
   30388:	e2832001 	add	r2, r3, #1
   3038c:	e2813a05 	add	r3, r1, #20480	; 0x5000
   30390:	e2811a06 	add	r1, r1, #24576	; 0x6000
   30394:	e58388b4 	str	r8, [r3, #2228]	; 0x8b4
   30398:	e5815854 	str	r5, [r1, #2132]	; 0x854
   3039c:	e1a03008 	mov	r3, r8
   303a0:	e58c27f4 	str	r2, [ip, #2036]	; 0x7f4
   303a4:	e3a01064 	mov	r1, #100	; 0x64
   303a8:	e59f2028 	ldr	r2, [pc, #40]	; 303d8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0xfc>
   303ac:	ebfff736 	bl	2e08c <snprintf>
   303b0:	e3a03000 	mov	r3, #0
   303b4:	e1a00004 	mov	r0, r4
   303b8:	e59f101c 	ldr	r1, [pc, #28]	; 303dc <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x100>
   303bc:	e28d2024 	add	r2, sp, #36	; 0x24
   303c0:	e58d3004 	str	r3, [sp, #4]
   303c4:	e58d3000 	str	r3, [sp]
   303c8:	ebfffeba 	bl	2feb8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   303cc:	e28dd088 	add	sp, sp, #136	; 0x88
   303d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   303d4:	00047e28 	.word	0x00047e28
   303d8:	00047e30 	.word	0x00047e30
   303dc:	00047e3c 	.word	0x00047e3c

000303e0 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]>:
   303e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   303e4:	e24ddb27 	sub	sp, sp, #39936	; 0x9c00
   303e8:	e24dd058 	sub	sp, sp, #88	; 0x58
   303ec:	e59f609c 	ldr	r6, [pc, #156]	; 30490 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0xb0>
   303f0:	e28d8010 	add	r8, sp, #16
   303f4:	e1a04000 	mov	r4, r0
   303f8:	e1a05001 	mov	r5, r1
   303fc:	e1a00002 	mov	r0, r2
   30400:	e1a01008 	mov	r1, r8
   30404:	e59f2088 	ldr	r2, [pc, #136]	; 30494 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0xb4>
   30408:	ebfff805 	bl	2e424 <jsonEscape>
   3040c:	e5963000 	ldr	r3, [r6]
   30410:	e2833a05 	add	r3, r3, #20480	; 0x5000
   30414:	e5d33000 	ldrb	r3, [r3]
   30418:	e3530000 	cmp	r3, #0
   3041c:	0a000012 	beq	3046c <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0x8c>
   30420:	ebfff674 	bl	2ddf8 <millis>
   30424:	e28d7c4e 	add	r7, sp, #19968	; 0x4e00
   30428:	e2877034 	add	r7, r7, #52	; 0x34
   3042c:	e1a03000 	mov	r3, r0
   30430:	e88d0130 	stm	sp, {r4, r5, r8}
   30434:	e1a00007 	mov	r0, r7
   30438:	e59f2058 	ldr	r2, [pc, #88]	; 30498 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0xb8>
   3043c:	e59f1058 	ldr	r1, [pc, #88]	; 3049c <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0xbc>
   30440:	ebfff711 	bl	2e08c <snprintf>
   30444:	e3a03000 	mov	r3, #0
   30448:	e1a02007 	mov	r2, r7
   3044c:	e5960000 	ldr	r0, [r6]
   30450:	e59f1048 	ldr	r1, [pc, #72]	; 304a0 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0xc0>
   30454:	e58d3004 	str	r3, [sp, #4]
   30458:	e58d3000 	str	r3, [sp]
   3045c:	ebfffe95 	bl	2feb8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30460:	e28ddb27 	add	sp, sp, #39936	; 0x9c00
   30464:	e28dd058 	add	sp, sp, #88	; 0x58
   30468:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3046c:	e28d7c4e 	add	r7, sp, #19968	; 0x4e00
   30470:	e2877034 	add	r7, r7, #52	; 0x34
   30474:	e1a03004 	mov	r3, r4
   30478:	e1a00007 	mov	r0, r7
   3047c:	e88d0120 	stm	sp, {r5, r8}
   30480:	e59f201c 	ldr	r2, [pc, #28]	; 304a4 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0xc4>
   30484:	e59f1010 	ldr	r1, [pc, #16]	; 3049c <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0xbc>
   30488:	ebfff6ff 	bl	2e08c <snprintf>
   3048c:	eaffffec 	b	30444 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0x64>
   30490:	0005cf54 	.word	0x0005cf54
   30494:	00004e20 	.word	0x00004e20
   30498:	00047e48 	.word	0x00047e48
   3049c:	00004e21 	.word	0x00004e21
   304a0:	00047e94 	.word	0x00047e94
   304a4:	00047e70 	.word	0x00047e70

000304a8 <CommandHandler::handleFileEnd(char const*) [clone .part.0]>:
   304a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   304ac:	e24ddf5f 	sub	sp, sp, #380	; 0x17c
   304b0:	e1a06000 	mov	r6, r0
   304b4:	e3a03014 	mov	r3, #20
   304b8:	e59f02d0 	ldr	r0, [pc, #720]	; 30790 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2e8>
   304bc:	e28d201c 	add	r2, sp, #28
   304c0:	e1a04001 	mov	r4, r1
   304c4:	ebfff731 	bl	2e190 <jsonGetValueForKey>
   304c8:	e2505000 	subs	r5, r0, #0
   304cc:	1a000072 	bne	3069c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1f4>
   304d0:	e1a01004 	mov	r1, r4
   304d4:	e3a03014 	mov	r3, #20
   304d8:	e59f02b4 	ldr	r0, [pc, #692]	; 30794 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2ec>
   304dc:	e28d2034 	add	r2, sp, #52	; 0x34
   304e0:	ebfff72a 	bl	2e190 <jsonGetValueForKey>
   304e4:	e2507000 	subs	r7, r0, #0
   304e8:	1a000071 	bne	306b4 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x20c>
   304ec:	e2864a05 	add	r4, r6, #20480	; 0x5000
   304f0:	e5941868 	ldr	r1, [r4, #2152]	; 0x868
   304f4:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   304f8:	ebfffd3b 	bl	2f9ec <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)>
   304fc:	e58d7008 	str	r7, [sp, #8]
   30500:	e58d0004 	str	r0, [sp, #4]
   30504:	e58d5000 	str	r5, [sp]
   30508:	e594386c 	ldr	r3, [r4, #2156]	; 0x86c
   3050c:	e1a08000 	mov	r8, r0
   30510:	e3a01064 	mov	r1, #100	; 0x64
   30514:	e59f227c 	ldr	r2, [pc, #636]	; 30798 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2f0>
   30518:	e28d004c 	add	r0, sp, #76	; 0x4c
   3051c:	ebfff6da 	bl	2e08c <snprintf>
   30520:	e594386c 	ldr	r3, [r4, #2156]	; 0x86c
   30524:	e1550003 	cmp	r5, r3
   30528:	1a000051 	bne	30674 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1cc>
   3052c:	e1580007 	cmp	r8, r7
   30530:	0a000065 	beq	306cc <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x224>
   30534:	ebffd983 	bl	26b48 <CLogger::Get()>
   30538:	e2843001 	add	r3, r4, #1
   3053c:	e88d0188 	stm	sp, {r3, r7, r8}
   30540:	e3a02002 	mov	r2, #2
   30544:	e59f3250 	ldr	r3, [pc, #592]	; 3079c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2f4>
   30548:	e59f1250 	ldr	r1, [pc, #592]	; 307a0 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2f8>
   3054c:	e58d500c 	str	r5, [sp, #12]
   30550:	ebffd8be 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30554:	e3a03000 	mov	r3, #0
   30558:	e1a00006 	mov	r0, r6
   3055c:	e59f1240 	ldr	r1, [pc, #576]	; 307a4 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2fc>
   30560:	e28d204c 	add	r2, sp, #76	; 0x4c
   30564:	e58d3004 	str	r3, [sp, #4]
   30568:	e58d3000 	str	r3, [sp]
   3056c:	ebfffe51 	bl	2feb8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30570:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30574:	e3500000 	cmp	r0, #0
   30578:	0a000000 	beq	30580 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0xd8>
   3057c:	ebffea9e 	bl	2affc <operator delete[](void*)>
   30580:	e3a02000 	mov	r2, #0
   30584:	e2865a07 	add	r5, r6, #28672	; 0x7000
   30588:	e59537f4 	ldr	r3, [r5, #2036]	; 0x7f4
   3058c:	e5842860 	str	r2, [r4, #2144]	; 0x860
   30590:	e1530002 	cmp	r3, r2
   30594:	e5842864 	str	r2, [r4, #2148]	; 0x864
   30598:	0a00006f 	beq	3075c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2b4>
   3059c:	e1a0b002 	mov	fp, r2
   305a0:	e2864b16 	add	r4, r6, #22528	; 0x5800
   305a4:	e59f81fc 	ldr	r8, [pc, #508]	; 307a8 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x300>
   305a8:	e59f91fc 	ldr	r9, [pc, #508]	; 307ac <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x304>
   305ac:	e59fa1fc 	ldr	sl, [pc, #508]	; 307b0 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x308>
   305b0:	e28440b0 	add	r4, r4, #176	; 0xb0
   305b4:	e28d70b0 	add	r7, sp, #176	; 0xb0
   305b8:	e5b41004 	ldr	r1, [r4, #4]!
   305bc:	e1510002 	cmp	r1, r2
   305c0:	0a000010 	beq	30608 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x160>
   305c4:	e5940fa0 	ldr	r0, [r4, #4000]	; 0xfa0
   305c8:	e1a0300b 	mov	r3, fp
   305cc:	e58d0008 	str	r0, [sp, #8]
   305d0:	e58d1004 	str	r1, [sp, #4]
   305d4:	e58d2000 	str	r2, [sp]
   305d8:	e3a010c8 	mov	r1, #200	; 0xc8
   305dc:	e1a02009 	mov	r2, r9
   305e0:	e1a00007 	mov	r0, r7
   305e4:	ebfff6a8 	bl	2e08c <snprintf>
   305e8:	e5983000 	ldr	r3, [r8]
   305ec:	e59f01bc 	ldr	r0, [pc, #444]	; 307b0 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x308>
   305f0:	e3530000 	cmp	r3, #0
   305f4:	0a000002 	beq	30604 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x15c>
   305f8:	e1a02007 	mov	r2, r7
   305fc:	e1a0100a 	mov	r1, sl
   30600:	ebffff76 	bl	303e0 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]>
   30604:	e5942000 	ldr	r2, [r4]
   30608:	e59517f4 	ldr	r1, [r5, #2036]	; 0x7f4
   3060c:	e5943fa0 	ldr	r3, [r4, #4000]	; 0xfa0
   30610:	e28bb001 	add	fp, fp, #1
   30614:	e151000b 	cmp	r1, fp
   30618:	e0822003 	add	r2, r2, r3
   3061c:	8affffe5 	bhi	305b8 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x110>
   30620:	e2866901 	add	r6, r6, #16384	; 0x4000
   30624:	e5963ff8 	ldr	r3, [r6, #4088]	; 0xff8
   30628:	e5951804 	ldr	r1, [r5, #2052]	; 0x804
   3062c:	e5952800 	ldr	r2, [r5, #2048]	; 0x800
   30630:	e58d3004 	str	r3, [sp, #4]
   30634:	e5963ff4 	ldr	r3, [r6, #4084]	; 0xff4
   30638:	e1a00007 	mov	r0, r7
   3063c:	e58d1008 	str	r1, [sp, #8]
   30640:	e58d2000 	str	r2, [sp]
   30644:	e3a010c8 	mov	r1, #200	; 0xc8
   30648:	e59f2164 	ldr	r2, [pc, #356]	; 307b4 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x30c>
   3064c:	ebfff68e 	bl	2e08c <snprintf>
   30650:	e5983000 	ldr	r3, [r8]
   30654:	e3530000 	cmp	r3, #0
   30658:	0a000003 	beq	3066c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1c4>
   3065c:	e59f114c 	ldr	r1, [pc, #332]	; 307b0 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x308>
   30660:	e1a02007 	mov	r2, r7
   30664:	e1a00001 	mov	r0, r1
   30668:	ebffff5c 	bl	303e0 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]>
   3066c:	e28ddf5f 	add	sp, sp, #380	; 0x17c
   30670:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30674:	ebffd933 	bl	26b48 <CLogger::Get()>
   30678:	e594286c 	ldr	r2, [r4, #2156]	; 0x86c
   3067c:	e2843001 	add	r3, r4, #1
   30680:	e98d0024 	stmib	sp, {r2, r5}
   30684:	e58d3000 	str	r3, [sp]
   30688:	e3a02002 	mov	r2, #2
   3068c:	e59f3124 	ldr	r3, [pc, #292]	; 307b8 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x310>
   30690:	e59f1108 	ldr	r1, [pc, #264]	; 307a0 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2f8>
   30694:	ebffd86d 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30698:	eaffffad 	b	30554 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0xac>
   3069c:	e3a0200a 	mov	r2, #10
   306a0:	e3a01000 	mov	r1, #0
   306a4:	e28d001c 	add	r0, sp, #28
   306a8:	ebffe78d 	bl	2a4e4 <strtoul>
   306ac:	e1a05000 	mov	r5, r0
   306b0:	eaffff86 	b	304d0 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x28>
   306b4:	e3a02010 	mov	r2, #16
   306b8:	e3a01000 	mov	r1, #0
   306bc:	e28d0034 	add	r0, sp, #52	; 0x34
   306c0:	ebffe787 	bl	2a4e4 <strtoul>
   306c4:	e1a07000 	mov	r7, r0
   306c8:	eaffff87 	b	304ec <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x44>
   306cc:	e3a03000 	mov	r3, #0
   306d0:	e1a00006 	mov	r0, r6
   306d4:	e59f10e0 	ldr	r1, [pc, #224]	; 307bc <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x314>
   306d8:	e28d204c 	add	r2, sp, #76	; 0x4c
   306dc:	e58d3004 	str	r3, [sp, #4]
   306e0:	e58d3000 	str	r3, [sp]
   306e4:	ebfffdf3 	bl	2feb8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   306e8:	e59f10d0 	ldr	r1, [pc, #208]	; 307c0 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x318>
   306ec:	e2840066 	add	r0, r4, #102	; 0x66
   306f0:	ebffe67a 	bl	2a0e0 <strcasecmp>
   306f4:	e3500000 	cmp	r0, #0
   306f8:	03a05001 	moveq	r5, #1
   306fc:	13a05000 	movne	r5, #0
   30700:	1a000018 	bne	30768 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2c0>
   30704:	ebffd90f 	bl	26b48 <CLogger::Get()>
   30708:	e5941864 	ldr	r1, [r4, #2148]	; 0x864
   3070c:	e5942868 	ldr	r2, [r4, #2152]	; 0x868
   30710:	e2843001 	add	r3, r4, #1
   30714:	e58d1008 	str	r1, [sp, #8]
   30718:	e58d2004 	str	r2, [sp, #4]
   3071c:	e58d3000 	str	r3, [sp]
   30720:	e3a02004 	mov	r2, #4
   30724:	e59f3098 	ldr	r3, [pc, #152]	; 307c4 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x31c>
   30728:	e59f1070 	ldr	r1, [pc, #112]	; 307a0 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2f8>
   3072c:	e58d7010 	str	r7, [sp, #16]
   30730:	e58d700c 	str	r7, [sp, #12]
   30734:	ebffd845 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30738:	e59f0088 	ldr	r0, [pc, #136]	; 307c8 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x320>
   3073c:	ebfff5b4 	bl	2de14 <microsDelay>
   30740:	e58d5000 	str	r5, [sp]
   30744:	e1a00006 	mov	r0, r6
   30748:	e5943868 	ldr	r3, [r4, #2152]	; 0x868
   3074c:	e5942860 	ldr	r2, [r4, #2144]	; 0x860
   30750:	e284108f 	add	r1, r4, #143	; 0x8f
   30754:	ebfffd62 	bl	2fce4 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)>
   30758:	eaffff84 	b	30570 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0xc8>
   3075c:	e59f8044 	ldr	r8, [pc, #68]	; 307a8 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x300>
   30760:	e28d70b0 	add	r7, sp, #176	; 0xb0
   30764:	eaffffad 	b	30620 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x178>
   30768:	ebffd8f6 	bl	26b48 <CLogger::Get()>
   3076c:	e5942868 	ldr	r2, [r4, #2152]	; 0x868
   30770:	e2843001 	add	r3, r4, #1
   30774:	e58d2004 	str	r2, [sp, #4]
   30778:	e58d3000 	str	r3, [sp]
   3077c:	e3a02004 	mov	r2, #4
   30780:	e59f3044 	ldr	r3, [pc, #68]	; 307cc <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x324>
   30784:	e59f1014 	ldr	r1, [pc, #20]	; 307a0 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2f8>
   30788:	ebffd830 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3078c:	eaffffeb 	b	30740 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x298>
   30790:	00047e98 	.word	0x00047e98
   30794:	00047ea4 	.word	0x00047ea4
   30798:	00047ea8 	.word	0x00047ea8
   3079c:	00047f2c 	.word	0x00047f2c
   307a0:	00048144 	.word	0x00048144
   307a4:	00047f20 	.word	0x00047f20
   307a8:	0005cf54 	.word	0x0005cf54
   307ac:	00048038 	.word	0x00048038
   307b0:	000493c8 	.word	0x000493c8
   307b4:	00047ffc 	.word	0x00047ffc
   307b8:	00047eec 	.word	0x00047eec
   307bc:	00047f78 	.word	0x00047f78
   307c0:	00047f84 	.word	0x00047f84
   307c4:	00047f90 	.word	0x00047f90
   307c8:	000186a0 	.word	0x000186a0
   307cc:	00047fe4 	.word	0x00047fe4

000307d0 <CommandHandler::handleFileEnd(char const*)>:
   307d0:	e2803a05 	add	r3, r0, #20480	; 0x5000
   307d4:	e5933860 	ldr	r3, [r3, #2144]	; 0x860
   307d8:	e3530000 	cmp	r3, #0
   307dc:	012fff1e 	bxeq	lr
   307e0:	eaffff30 	b	304a8 <CommandHandler::handleFileEnd(char const*) [clone .part.0]>

000307e4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)>:
   307e4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   307e8:	e24ddc57 	sub	sp, sp, #22272	; 0x5700
   307ec:	e24dd0b4 	sub	sp, sp, #180	; 0xb4
   307f0:	e1a06000 	mov	r6, r0
   307f4:	e1a08002 	mov	r8, r2
   307f8:	e1a07003 	mov	r7, r3
   307fc:	e59f0280 	ldr	r0, [pc, #640]	; 30a84 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a0>
   30800:	e3a030c8 	mov	r3, #200	; 0xc8
   30804:	e28d20f0 	add	r2, sp, #240	; 0xf0
   30808:	e1a05001 	mov	r5, r1
   3080c:	ebfff65f 	bl	2e190 <jsonGetValueForKey>
   30810:	e3500000 	cmp	r0, #0
   30814:	1a000002 	bne	30824 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x40>
   30818:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   3081c:	e28dd0b4 	add	sp, sp, #180	; 0xb4
   30820:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30824:	e3a04000 	mov	r4, #0
   30828:	e3a03014 	mov	r3, #20
   3082c:	e1a01005 	mov	r1, r5
   30830:	e28d2014 	add	r2, sp, #20
   30834:	e59f024c 	ldr	r0, [pc, #588]	; 30a88 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a4>
   30838:	e5cd4014 	strb	r4, [sp, #20]
   3083c:	ebfff653 	bl	2e190 <jsonGetValueForKey>
   30840:	e1a01004 	mov	r1, r4
   30844:	e3a0200a 	mov	r2, #10
   30848:	e28d0014 	add	r0, sp, #20
   3084c:	e5cd41bc 	strb	r4, [sp, #444]	; 0x1bc
   30850:	ebffe723 	bl	2a4e4 <strtoul>
   30854:	e59f1230 	ldr	r1, [pc, #560]	; 30a8c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a8>
   30858:	e1a09000 	mov	r9, r0
   3085c:	e28d00f0 	add	r0, sp, #240	; 0xf0
   30860:	ebffe61e 	bl	2a0e0 <strcasecmp>
   30864:	e1500004 	cmp	r0, r4
   30868:	0a00004e 	beq	309a8 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x1c4>
   3086c:	e59f121c 	ldr	r1, [pc, #540]	; 30a90 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2ac>
   30870:	e28d00f0 	add	r0, sp, #240	; 0xf0
   30874:	ebffe619 	bl	2a0e0 <strcasecmp>
   30878:	e3500000 	cmp	r0, #0
   3087c:	0a00004f 	beq	309c0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x1dc>
   30880:	e59f120c 	ldr	r1, [pc, #524]	; 30a94 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b0>
   30884:	e28d00f0 	add	r0, sp, #240	; 0xf0
   30888:	ebffe614 	bl	2a0e0 <strcasecmp>
   3088c:	e3500000 	cmp	r0, #0
   30890:	1a000007 	bne	308b4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0xd0>
   30894:	e2863a05 	add	r3, r6, #20480	; 0x5000
   30898:	e5933860 	ldr	r3, [r3, #2144]	; 0x860
   3089c:	e3530000 	cmp	r3, #0
   308a0:	0affffdc 	beq	30818 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   308a4:	e1a01005 	mov	r1, r5
   308a8:	e1a00006 	mov	r0, r6
   308ac:	ebfffefd 	bl	304a8 <CommandHandler::handleFileEnd(char const*) [clone .part.0]>
   308b0:	eaffffd8 	b	30818 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   308b4:	e59f11dc 	ldr	r1, [pc, #476]	; 30a98 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b4>
   308b8:	e28d00f0 	add	r0, sp, #240	; 0xf0
   308bc:	ebffe607 	bl	2a0e0 <strcasecmp>
   308c0:	e3500000 	cmp	r0, #0
   308c4:	1a000045 	bne	309e0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x1fc>
   308c8:	e1a01008 	mov	r1, r8
   308cc:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   308d0:	e28d0f6f 	add	r0, sp, #444	; 0x1bc
   308d4:	ebfff580 	bl	2dedc <strlcpy>
   308d8:	e28d0f6f 	add	r0, sp, #444	; 0x1bc
   308dc:	ebffe5d8 	bl	2a044 <strlen>
   308e0:	e247c001 	sub	ip, r7, #1
   308e4:	e05c7000 	subs	r7, ip, r0
   308e8:	e3a030c8 	mov	r3, #200	; 0xc8
   308ec:	e0888000 	add	r8, r8, r0
   308f0:	e28d20f0 	add	r2, sp, #240	; 0xf0
   308f4:	e28d1f6f 	add	r1, sp, #444	; 0x1bc
   308f8:	e59f0184 	ldr	r0, [pc, #388]	; 30a84 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a0>
   308fc:	12888001 	addne	r8, r8, #1
   30900:	ebfff622 	bl	2e190 <jsonGetValueForKey>
   30904:	e3a03014 	mov	r3, #20
   30908:	e28d1f6f 	add	r1, sp, #444	; 0x1bc
   3090c:	e08d2003 	add	r2, sp, r3
   30910:	e59f0170 	ldr	r0, [pc, #368]	; 30a88 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a4>
   30914:	ebfff61d 	bl	2e190 <jsonGetValueForKey>
   30918:	e59f117c 	ldr	r1, [pc, #380]	; 30a9c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b8>
   3091c:	e28d00f0 	add	r0, sp, #240	; 0xf0
   30920:	ebffe5ee 	bl	2a0e0 <strcasecmp>
   30924:	e2501000 	subs	r1, r0, #0
   30928:	0a00004c 	beq	30a60 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x27c>
   3092c:	e3a00000 	mov	r0, #0
   30930:	e59fc168 	ldr	ip, [pc, #360]	; 30aa0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2bc>
   30934:	e28d4e99 	add	r4, sp, #2448	; 0x990
   30938:	e28de028 	add	lr, sp, #40	; 0x28
   3093c:	e1a03007 	mov	r3, r7
   30940:	e58dc004 	str	ip, [sp, #4]
   30944:	e1a02008 	mov	r2, r8
   30948:	e28d1f6f 	add	r1, sp, #444	; 0x1bc
   3094c:	e5cd0990 	strb	r0, [sp, #2448]	; 0x990
   30950:	e58d4000 	str	r4, [sp]
   30954:	e1a00006 	mov	r0, r6
   30958:	e58de00c 	str	lr, [sp, #12]
   3095c:	ebfffc9a 	bl	2fbcc <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>
   30960:	e3a020c8 	mov	r2, #200	; 0xc8
   30964:	e28d10f0 	add	r1, sp, #240	; 0xf0
   30968:	e59d000c 	ldr	r0, [sp, #12]
   3096c:	ebfff55a 	bl	2dedc <strlcpy>
   30970:	e3a020c8 	mov	r2, #200	; 0xc8
   30974:	e59f1128 	ldr	r1, [pc, #296]	; 30aa4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2c0>
   30978:	e59d000c 	ldr	r0, [sp, #12]
   3097c:	ebfff572 	bl	2df4c <strlcat>
   30980:	e1a00004 	mov	r0, r4
   30984:	ebffe5ae 	bl	2a044 <strlen>
   30988:	e3500000 	cmp	r0, #0
   3098c:	0affffa1 	beq	30818 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   30990:	e1a03004 	mov	r3, r4
   30994:	e1a01009 	mov	r1, r9
   30998:	e1a00006 	mov	r0, r6
   3099c:	e59d200c 	ldr	r2, [sp, #12]
   309a0:	ebfffdbd 	bl	3009c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>
   309a4:	eaffff9b 	b	30818 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   309a8:	e1a01005 	mov	r1, r5
   309ac:	e1a00006 	mov	r0, r6
   309b0:	ebfffe02 	bl	301c0 <CommandHandler::handleFileStart(char const*)>
   309b4:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   309b8:	e28dd0b4 	add	sp, sp, #180	; 0xb4
   309bc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   309c0:	e1a03007 	mov	r3, r7
   309c4:	e1a02008 	mov	r2, r8
   309c8:	e1a01005 	mov	r1, r5
   309cc:	e1a00006 	mov	r0, r6
   309d0:	ebfffe41 	bl	302dc <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)>
   309d4:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   309d8:	e28dd0b4 	add	sp, sp, #180	; 0xb4
   309dc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   309e0:	e59f00b8 	ldr	r0, [pc, #184]	; 30aa0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2bc>
   309e4:	e28d9e99 	add	r9, sp, #2448	; 0x990
   309e8:	e28dc028 	add	ip, sp, #40	; 0x28
   309ec:	e1a03007 	mov	r3, r7
   309f0:	e1a02008 	mov	r2, r8
   309f4:	e1a01005 	mov	r1, r5
   309f8:	e58d0004 	str	r0, [sp, #4]
   309fc:	e58d9000 	str	r9, [sp]
   30a00:	e1a00006 	mov	r0, r6
   30a04:	e58dc00c 	str	ip, [sp, #12]
   30a08:	e5cd4990 	strb	r4, [sp, #2448]	; 0x990
   30a0c:	ebfffc6e 	bl	2fbcc <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>
   30a10:	e3a020c8 	mov	r2, #200	; 0xc8
   30a14:	e28d10f0 	add	r1, sp, #240	; 0xf0
   30a18:	e59d000c 	ldr	r0, [sp, #12]
   30a1c:	ebfff52e 	bl	2dedc <strlcpy>
   30a20:	e3a020c8 	mov	r2, #200	; 0xc8
   30a24:	e59f1078 	ldr	r1, [pc, #120]	; 30aa4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2c0>
   30a28:	e59d000c 	ldr	r0, [sp, #12]
   30a2c:	ebfff546 	bl	2df4c <strlcat>
   30a30:	e1a00009 	mov	r0, r9
   30a34:	ebffe582 	bl	2a044 <strlen>
   30a38:	e3500000 	cmp	r0, #0
   30a3c:	0affff75 	beq	30818 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   30a40:	e1a03004 	mov	r3, r4
   30a44:	e1a02009 	mov	r2, r9
   30a48:	e1a00006 	mov	r0, r6
   30a4c:	e59d100c 	ldr	r1, [sp, #12]
   30a50:	e58d4004 	str	r4, [sp, #4]
   30a54:	e58d4000 	str	r4, [sp]
   30a58:	ebfffd16 	bl	2feb8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30a5c:	eaffff6d 	b	30818 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   30a60:	e3a0200a 	mov	r2, #10
   30a64:	e28d0014 	add	r0, sp, #20
   30a68:	ebffe69d 	bl	2a4e4 <strtoul>
   30a6c:	e59f3034 	ldr	r3, [pc, #52]	; 30aa8 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2c4>
   30a70:	e1a01000 	mov	r1, r0
   30a74:	e59f2030 	ldr	r2, [pc, #48]	; 30aac <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2c8>
   30a78:	e1a00006 	mov	r0, r6
   30a7c:	ebfffd86 	bl	3009c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>
   30a80:	eaffff64 	b	30818 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   30a84:	000409fc 	.word	0x000409fc
   30a88:	00048070 	.word	0x00048070
   30a8c:	00048078 	.word	0x00048078
   30a90:	00048080 	.word	0x00048080
   30a94:	00048088 	.word	0x00048088
   30a98:	00047df8 	.word	0x00047df8
   30a9c:	00048090 	.word	0x00048090
   30aa0:	00004e20 	.word	0x00004e20
   30aa4:	000480b0 	.word	0x000480b0
   30aa8:	00048098 	.word	0x00048098
   30aac:	000480a4 	.word	0x000480a4

00030ab0 <CommandHandler::hdlcFrameRx(unsigned char const*, unsigned int)>:
   30ab0:	e92d4070 	push	{r4, r5, r6, lr}
   30ab4:	e24dde7d 	sub	sp, sp, #2000	; 0x7d0
   30ab8:	e24dd008 	sub	sp, sp, #8
   30abc:	e3520e7d 	cmp	r2, #2000	; 0x7d0
   30ac0:	e1a04002 	mov	r4, r2
   30ac4:	e1a06000 	mov	r6, r0
   30ac8:	83a02e7d 	movhi	r2, #2000	; 0x7d0
   30acc:	92822001 	addls	r2, r2, #1
   30ad0:	e28d0004 	add	r0, sp, #4
   30ad4:	e1a05001 	mov	r5, r1
   30ad8:	ebfff4ff 	bl	2dedc <strlcpy>
   30adc:	e28d0004 	add	r0, sp, #4
   30ae0:	ebffe557 	bl	2a044 <strlen>
   30ae4:	e2444001 	sub	r4, r4, #1
   30ae8:	e2802001 	add	r2, r0, #1
   30aec:	e0443000 	sub	r3, r4, r0
   30af0:	e28d1004 	add	r1, sp, #4
   30af4:	e1a00006 	mov	r0, r6
   30af8:	e0852002 	add	r2, r5, r2
   30afc:	ebffff38 	bl	307e4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)>
   30b00:	e28dde7d 	add	sp, sp, #2000	; 0x7d0
   30b04:	e28dd008 	add	sp, sp, #8
   30b08:	e8bd8070 	pop	{r4, r5, r6, pc}

00030b0c <CommandHandler::hdlcFrameRxStatic(unsigned char const*, unsigned int)>:
   30b0c:	e59f3018 	ldr	r3, [pc, #24]	; 30b2c <CommandHandler::hdlcFrameRxStatic(unsigned char const*, unsigned int)+0x20>
   30b10:	e1a02001 	mov	r2, r1
   30b14:	e5933000 	ldr	r3, [r3]
   30b18:	e3530000 	cmp	r3, #0
   30b1c:	012fff1e 	bxeq	lr
   30b20:	e1a01000 	mov	r1, r0
   30b24:	e1a00003 	mov	r0, r3
   30b28:	eaffffe0 	b	30ab0 <CommandHandler::hdlcFrameRx(unsigned char const*, unsigned int)>
   30b2c:	0005cf54 	.word	0x0005cf54

00030b30 <CommandHandler::sendAPIReq(char const*)>:
   30b30:	e92d4010 	push	{r4, lr}
   30b34:	e24dd070 	sub	sp, sp, #112	; 0x70
   30b38:	e3a02064 	mov	r2, #100	; 0x64
   30b3c:	e1a04001 	mov	r4, r1
   30b40:	e28d0008 	add	r0, sp, #8
   30b44:	e59f1068 	ldr	r1, [pc, #104]	; 30bb4 <CommandHandler::sendAPIReq(char const*)+0x84>
   30b48:	ebfff4e3 	bl	2dedc <strlcpy>
   30b4c:	e28d0008 	add	r0, sp, #8
   30b50:	ebffe53b 	bl	2a044 <strlen>
   30b54:	e28d3008 	add	r3, sp, #8
   30b58:	e1a01004 	mov	r1, r4
   30b5c:	e3a02064 	mov	r2, #100	; 0x64
   30b60:	e0830000 	add	r0, r3, r0
   30b64:	ebfff4dc 	bl	2dedc <strlcpy>
   30b68:	e28d0008 	add	r0, sp, #8
   30b6c:	ebffe534 	bl	2a044 <strlen>
   30b70:	e28d3008 	add	r3, sp, #8
   30b74:	e0830000 	add	r0, r3, r0
   30b78:	e3a02064 	mov	r2, #100	; 0x64
   30b7c:	e59f1034 	ldr	r1, [pc, #52]	; 30bb8 <CommandHandler::sendAPIReq(char const*)+0x88>
   30b80:	ebfff4d5 	bl	2dedc <strlcpy>
   30b84:	e59f3030 	ldr	r3, [pc, #48]	; 30bbc <CommandHandler::sendAPIReq(char const*)+0x8c>
   30b88:	e5930000 	ldr	r0, [r3]
   30b8c:	e3500000 	cmp	r0, #0
   30b90:	0a000005 	beq	30bac <CommandHandler::sendAPIReq(char const*)+0x7c>
   30b94:	e3a03000 	mov	r3, #0
   30b98:	e59f1020 	ldr	r1, [pc, #32]	; 30bc0 <CommandHandler::sendAPIReq(char const*)+0x90>
   30b9c:	e28d2008 	add	r2, sp, #8
   30ba0:	e58d3004 	str	r3, [sp, #4]
   30ba4:	e58d3000 	str	r3, [sp]
   30ba8:	ebfffcc2 	bl	2feb8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30bac:	e28dd070 	add	sp, sp, #112	; 0x70
   30bb0:	e8bd8010 	pop	{r4, pc}
   30bb4:	000480b8 	.word	0x000480b8
   30bb8:	000485cc 	.word	0x000485cc
   30bbc:	0005cf54 	.word	0x0005cf54
   30bc0:	000480c0 	.word	0x000480c0

00030bc4 <CommandHandler::logDebugMessage(char const*)>:
   30bc4:	e59f3018 	ldr	r3, [pc, #24]	; 30be4 <CommandHandler::logDebugMessage(char const*)+0x20>
   30bc8:	e1a02001 	mov	r2, r1
   30bcc:	e5933000 	ldr	r3, [r3]
   30bd0:	e3530000 	cmp	r3, #0
   30bd4:	012fff1e 	bxeq	lr
   30bd8:	e59f1008 	ldr	r1, [pc, #8]	; 30be8 <CommandHandler::logDebugMessage(char const*)+0x24>
   30bdc:	e1a00001 	mov	r0, r1
   30be0:	eafffdfe 	b	303e0 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]>
   30be4:	0005cf54 	.word	0x0005cf54
   30be8:	000493c8 	.word	0x000493c8

00030bec <CommandHandler::logDebugJson(char const*)>:
   30bec:	e3a03000 	mov	r3, #0
   30bf0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   30bf4:	e24dd00c 	sub	sp, sp, #12
   30bf8:	e1a02001 	mov	r2, r1
   30bfc:	e58d3004 	str	r3, [sp, #4]
   30c00:	e59f100c 	ldr	r1, [pc, #12]	; 30c14 <CommandHandler::logDebugJson(char const*)+0x28>
   30c04:	e58d3000 	str	r3, [sp]
   30c08:	ebfffcaa 	bl	2feb8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30c0c:	e28dd00c 	add	sp, sp, #12
   30c10:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   30c14:	00047e94 	.word	0x00047e94

00030c18 <CommandHandler::logDebug(char const*, char const*, char const*)>:
   30c18:	e59f300c 	ldr	r3, [pc, #12]	; 30c2c <CommandHandler::logDebug(char const*, char const*, char const*)+0x14>
   30c1c:	e5933000 	ldr	r3, [r3]
   30c20:	e3530000 	cmp	r3, #0
   30c24:	012fff1e 	bxeq	lr
   30c28:	eafffdec 	b	303e0 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]>
   30c2c:	0005cf54 	.word	0x0005cf54

00030c30 <CommandHandler::service()>:
   30c30:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   30c34:	e2804a05 	add	r4, r0, #20480	; 0x5000
   30c38:	e5942870 	ldr	r2, [r4, #2160]	; 0x870
   30c3c:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
   30c40:	e24dd084 	sub	sp, sp, #132	; 0x84
   30c44:	e1520003 	cmp	r2, r3
   30c48:	0a000016 	beq	30ca8 <CommandHandler::service()+0x78>
   30c4c:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
   30c50:	e5942874 	ldr	r2, [r4, #2164]	; 0x874
   30c54:	e0803003 	add	r3, r0, r3
   30c58:	e2822001 	add	r2, r2, #1
   30c5c:	e2833b16 	add	r3, r3, #22528	; 0x5800
   30c60:	e5d3307c 	ldrb	r3, [r3, #124]	; 0x7c
   30c64:	e5842874 	str	r2, [r4, #2164]	; 0x874
   30c68:	e5941874 	ldr	r1, [r4, #2164]	; 0x874
   30c6c:	e5942878 	ldr	r2, [r4, #2168]	; 0x878
   30c70:	e1a05000 	mov	r5, r0
   30c74:	e1510002 	cmp	r1, r2
   30c78:	23a02000 	movcs	r2, #0
   30c7c:	e3a01064 	mov	r1, #100	; 0x64
   30c80:	25842874 	strcs	r2, [r4, #2164]	; 0x874
   30c84:	e28d001c 	add	r0, sp, #28
   30c88:	e59f20ac 	ldr	r2, [pc, #172]	; 30d3c <CommandHandler::service()+0x10c>
   30c8c:	ebfff4fe 	bl	2e08c <snprintf>
   30c90:	e28d001c 	add	r0, sp, #28
   30c94:	ebffe4ea 	bl	2a044 <strlen>
   30c98:	e28d101c 	add	r1, sp, #28
   30c9c:	e2802001 	add	r2, r0, #1
   30ca0:	e2850f65 	add	r0, r5, #404	; 0x194
   30ca4:	ebfffb13 	bl	2f8f8 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>
   30ca8:	e5943860 	ldr	r3, [r4, #2144]	; 0x860
   30cac:	e3530000 	cmp	r3, #0
   30cb0:	0a000006 	beq	30cd0 <CommandHandler::service()+0xa0>
   30cb4:	e59f5084 	ldr	r5, [pc, #132]	; 30d40 <CommandHandler::service()+0x110>
   30cb8:	ebfff44e 	bl	2ddf8 <millis>
   30cbc:	e1a02005 	mov	r2, r5
   30cc0:	e59418b0 	ldr	r1, [r4, #2224]	; 0x8b0
   30cc4:	ebfff468 	bl	2de6c <isTimeout>
   30cc8:	e3500000 	cmp	r0, #0
   30ccc:	1a000001 	bne	30cd8 <CommandHandler::service()+0xa8>
   30cd0:	e28dd084 	add	sp, sp, #132	; 0x84
   30cd4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30cd8:	ebffd79a 	bl	26b48 <CLogger::Get()>
   30cdc:	e594986c 	ldr	r9, [r4, #2156]	; 0x86c
   30ce0:	e1a06000 	mov	r6, r0
   30ce4:	e5947868 	ldr	r7, [r4, #2152]	; 0x868
   30ce8:	e59488b0 	ldr	r8, [r4, #2224]	; 0x8b0
   30cec:	ebfff441 	bl	2ddf8 <millis>
   30cf0:	e1a03000 	mov	r3, r0
   30cf4:	e3a02004 	mov	r2, #4
   30cf8:	e1a00006 	mov	r0, r6
   30cfc:	e58d300c 	str	r3, [sp, #12]
   30d00:	e98d0180 	stmib	sp, {r7, r8}
   30d04:	e59f3038 	ldr	r3, [pc, #56]	; 30d44 <CommandHandler::service()+0x114>
   30d08:	e59f1038 	ldr	r1, [pc, #56]	; 30d48 <CommandHandler::service()+0x118>
   30d0c:	e58d9000 	str	r9, [sp]
   30d10:	e58d5010 	str	r5, [sp, #16]
   30d14:	ebffd6cd 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30d18:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30d1c:	e3500000 	cmp	r0, #0
   30d20:	0a000000 	beq	30d28 <CommandHandler::service()+0xf8>
   30d24:	ebffe8b4 	bl	2affc <operator delete[](void*)>
   30d28:	e3a03000 	mov	r3, #0
   30d2c:	e5843860 	str	r3, [r4, #2144]	; 0x860
   30d30:	e5843864 	str	r3, [r4, #2148]	; 0x864
   30d34:	e28dd084 	add	sp, sp, #132	; 0x84
   30d38:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30d3c:	000480c8 	.word	0x000480c8
   30d40:	00000bb8 	.word	0x00000bb8
   30d44:	000480e8 	.word	0x000480e8
   30d48:	00048144 	.word	0x00048144

00030d4c <CommandHandler::fileReceiveCleardown()>:
   30d4c:	e92d4010 	push	{r4, lr}
   30d50:	e2804a05 	add	r4, r0, #20480	; 0x5000
   30d54:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30d58:	e3500000 	cmp	r0, #0
   30d5c:	0a000000 	beq	30d64 <CommandHandler::fileReceiveCleardown()+0x18>
   30d60:	ebffe8a5 	bl	2affc <operator delete[](void*)>
   30d64:	e3a03000 	mov	r3, #0
   30d68:	e5843860 	str	r3, [r4, #2144]	; 0x860
   30d6c:	e5843864 	str	r3, [r4, #2148]	; 0x864
   30d70:	e8bd8010 	pop	{r4, pc}

00030d74 <CommandHandler::~CommandHandler()>:
   30d74:	e92d4010 	push	{r4, lr}
   30d78:	e1a04000 	mov	r4, r0
   30d7c:	e2800f65 	add	r0, r0, #404	; 0x194
   30d80:	ebfff85c 	bl	2eef8 <MiniHDLC::~MiniHDLC()>
   30d84:	e1a00004 	mov	r0, r4
   30d88:	e8bd8010 	pop	{r4, pc}

00030d8c <CommsManager::handleRxMsg(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   30d8c:	e3a00000 	mov	r0, #0
   30d90:	e12fff1e 	bx	lr

00030d94 <CommsManager::serialTxAvailable()>:
   30d94:	e59f3014 	ldr	r3, [pc, #20]	; 30db0 <CommsManager::serialTxAvailable()+0x1c>
   30d98:	e5933000 	ldr	r3, [r3]
   30d9c:	e2833a07 	add	r3, r3, #28672	; 0x7000
   30da0:	e593080c 	ldr	r0, [r3, #2060]	; 0x80c
   30da4:	e3500000 	cmp	r0, #0
   30da8:	012fff1e 	bxeq	lr
   30dac:	eafff22e 	b	2d66c <CUartMaxiSerialDevice::AvailableForWrite()>
   30db0:	0005cf60 	.word	0x0005cf60

00030db4 <CommsManager::registerPendingOTA(unsigned char const*, unsigned int)>:
   30db4:	e92d4030 	push	{r4, r5, lr}
   30db8:	e1a04000 	mov	r4, r0
   30dbc:	e1a05001 	mov	r5, r1
   30dc0:	e24dd014 	sub	sp, sp, #20
   30dc4:	ebffd75f 	bl	26b48 <CLogger::Get()>
   30dc8:	e0843005 	add	r3, r4, r5
   30dcc:	e5531001 	ldrb	r1, [r3, #-1]
   30dd0:	e5d42010 	ldrb	r2, [r4, #16]
   30dd4:	e5d43000 	ldrb	r3, [r4]
   30dd8:	e58d100c 	str	r1, [sp, #12]
   30ddc:	e58d2008 	str	r2, [sp, #8]
   30de0:	e59f1030 	ldr	r1, [pc, #48]	; 30e18 <CommsManager::registerPendingOTA(unsigned char const*, unsigned int)+0x64>
   30de4:	e3a02004 	mov	r2, #4
   30de8:	e58d3004 	str	r3, [sp, #4]
   30dec:	e58d5000 	str	r5, [sp]
   30df0:	e59f3024 	ldr	r3, [pc, #36]	; 30e1c <CommsManager::registerPendingOTA(unsigned char const*, unsigned int)+0x68>
   30df4:	ebffd695 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30df8:	e59f0020 	ldr	r0, [pc, #32]	; 30e20 <CommsManager::registerPendingOTA(unsigned char const*, unsigned int)+0x6c>
   30dfc:	ebfff404 	bl	2de14 <microsDelay>
   30e00:	e1a00004 	mov	r0, r4
   30e04:	e1a01005 	mov	r1, r5
   30e08:	ebffe76c 	bl	2abc0 <EnableChainBoot>
   30e0c:	e3a00001 	mov	r0, #1
   30e10:	e28dd014 	add	sp, sp, #20
   30e14:	e8bd8030 	pop	{r4, r5, pc}
   30e18:	00048190 	.word	0x00048190
   30e1c:	00048154 	.word	0x00048154
   30e20:	000186a0 	.word	0x000186a0

00030e24 <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)>:
   30e24:	e92d4070 	push	{r4, r5, r6, lr}
   30e28:	e1a04000 	mov	r4, r0
   30e2c:	e24dd008 	sub	sp, sp, #8
   30e30:	e1a06001 	mov	r6, r1
   30e34:	e1a05002 	mov	r5, r2
   30e38:	ebfffb09 	bl	2fa64 <CommandHandler::CommandHandler()>
   30e3c:	e3a00000 	mov	r0, #0
   30e40:	e2843a07 	add	r3, r4, #28672	; 0x7000
   30e44:	e583680c 	str	r6, [r3, #2060]	; 0x80c
   30e48:	e5835810 	str	r5, [r3, #2064]	; 0x810
   30e4c:	e5830818 	str	r0, [r3, #2072]	; 0x818
   30e50:	e5830814 	str	r0, [r3, #2068]	; 0x814
   30e54:	e59f2044 	ldr	r2, [pc, #68]	; 30ea0 <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)+0x7c>
   30e58:	e59fc044 	ldr	ip, [pc, #68]	; 30ea4 <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)+0x80>
   30e5c:	e59f3044 	ldr	r3, [pc, #68]	; 30ea8 <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)+0x84>
   30e60:	e58d0004 	str	r0, [sp, #4]
   30e64:	e58d2000 	str	r2, [sp]
   30e68:	e59fe03c 	ldr	lr, [pc, #60]	; 30eac <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)+0x88>
   30e6c:	e58c3000 	str	r3, [ip]
   30e70:	e59f2038 	ldr	r2, [pc, #56]	; 30eb0 <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)+0x8c>
   30e74:	e59fc038 	ldr	ip, [pc, #56]	; 30eb4 <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)+0x90>
   30e78:	e1a01004 	mov	r1, r4
   30e7c:	e582c000 	str	ip, [r2]
   30e80:	e1a00004 	mov	r0, r4
   30e84:	e3a02001 	mov	r2, #1
   30e88:	e59f3028 	ldr	r3, [pc, #40]	; 30eb8 <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)+0x94>
   30e8c:	e58e4000 	str	r4, [lr]
   30e90:	ebfffb22 	bl	2fb20 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   30e94:	e1a00004 	mov	r0, r4
   30e98:	e28dd008 	add	sp, sp, #8
   30e9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   30ea0:	00030db4 	.word	0x00030db4
   30ea4:	0005cf58 	.word	0x0005cf58
   30ea8:	00030f8c 	.word	0x00030f8c
   30eac:	0005cf60 	.word	0x0005cf60
   30eb0:	0005cf5c 	.word	0x0005cf5c
   30eb4:	00030d94 	.word	0x00030d94
   30eb8:	00030d8c 	.word	0x00030d8c

00030ebc <CommsManager::~CommsManager()>:
   30ebc:	e92d4010 	push	{r4, lr}
   30ec0:	e1a04000 	mov	r4, r0
   30ec4:	ebffffaa 	bl	30d74 <CommandHandler::~CommandHandler()>
   30ec8:	e1a00004 	mov	r0, r4
   30ecc:	e8bd8010 	pop	{r4, pc}

00030ed0 <CommsManager::setup()>:
   30ed0:	e3a00001 	mov	r0, #1
   30ed4:	e12fff1e 	bx	lr

00030ed8 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)>:
   30ed8:	e92d4010 	push	{r4, lr}
   30edc:	e1a04001 	mov	r4, r1
   30ee0:	e24dd008 	sub	sp, sp, #8
   30ee4:	ebffd717 	bl	26b48 <CLogger::Get()>
   30ee8:	e59fc048 	ldr	ip, [pc, #72]	; 30f38 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x60>
   30eec:	e5d4e000 	ldrb	lr, [r4]
   30ef0:	e5d42001 	ldrb	r2, [r4, #1]
   30ef4:	e59c3004 	ldr	r3, [ip, #4]
   30ef8:	e082240e 	add	r2, r2, lr, lsl #8
   30efc:	e58d2004 	str	r2, [sp, #4]
   30f00:	e2832001 	add	r2, r3, #1
   30f04:	e58c2004 	str	r2, [ip, #4]
   30f08:	e59f102c 	ldr	r1, [pc, #44]	; 30f3c <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x64>
   30f0c:	e3a02003 	mov	r2, #3
   30f10:	e58d3000 	str	r3, [sp]
   30f14:	e59f3024 	ldr	r3, [pc, #36]	; 30f40 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x68>
   30f18:	ebffd64c 	bl	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30f1c:	ebffd709 	bl	26b48 <CLogger::Get()>
   30f20:	e3a02003 	mov	r2, #3
   30f24:	e59f1010 	ldr	r1, [pc, #16]	; 30f3c <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x64>
   30f28:	e59f3014 	ldr	r3, [pc, #20]	; 30f44 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x6c>
   30f2c:	e28dd008 	add	sp, sp, #8
   30f30:	e8bd4010 	pop	{r4, lr}
   30f34:	eaffd645 	b	26850 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30f38:	0005cf60 	.word	0x0005cf60
   30f3c:	00048190 	.word	0x00048190
   30f40:	000481a0 	.word	0x000481a0
   30f44:	000481b4 	.word	0x000481b4

00030f48 <CommsManager::hdlcFrameRxCBStatic(unsigned char const*, unsigned int)>:
   30f48:	e59f300c 	ldr	r3, [pc, #12]	; 30f5c <CommsManager::hdlcFrameRxCBStatic(unsigned char const*, unsigned int)+0x14>
   30f4c:	e1a02001 	mov	r2, r1
   30f50:	e1a01000 	mov	r1, r0
   30f54:	e5930000 	ldr	r0, [r3]
   30f58:	eaffffde 	b	30ed8 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)>
   30f5c:	0005cf60 	.word	0x0005cf60

00030f60 <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)>:
   30f60:	e59f3020 	ldr	r3, [pc, #32]	; 30f88 <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)+0x28>
   30f64:	e1a0c000 	mov	ip, r0
   30f68:	e5933000 	ldr	r3, [r3]
   30f6c:	e1a02001 	mov	r2, r1
   30f70:	e2833a07 	add	r3, r3, #28672	; 0x7000
   30f74:	e593080c 	ldr	r0, [r3, #2060]	; 0x80c
   30f78:	e3500000 	cmp	r0, #0
   30f7c:	012fff1e 	bxeq	lr
   30f80:	e1a0100c 	mov	r1, ip
   30f84:	eafff1f4 	b	2d75c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>
   30f88:	0005cf60 	.word	0x0005cf60

00030f8c <CommsManager::serialPutStr(unsigned char const*, unsigned int)>:
   30f8c:	eafffff3 	b	30f60 <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)>

00030f90 <CommsManager::hdlcFrameTxCB(unsigned char const*, unsigned int)>:
   30f90:	e2800a07 	add	r0, r0, #28672	; 0x7000
   30f94:	e590080c 	ldr	r0, [r0, #2060]	; 0x80c
   30f98:	e3500000 	cmp	r0, #0
   30f9c:	012fff1e 	bxeq	lr
   30fa0:	eafff1ed 	b	2d75c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>

00030fa4 <CommsManager::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>:
   30fa4:	eafffbc3 	b	2feb8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>

00030fa8 <CommsManager::serviceGetFromSerial()>:
   30fa8:	e92d4010 	push	{r4, lr}
   30fac:	e2803a07 	add	r3, r0, #28672	; 0x7000
   30fb0:	e1a04000 	mov	r4, r0
   30fb4:	e593080c 	ldr	r0, [r3, #2060]	; 0x80c
   30fb8:	e24ddffa 	sub	sp, sp, #1000	; 0x3e8
   30fbc:	e3500000 	cmp	r0, #0
   30fc0:	0a000004 	beq	30fd8 <CommsManager::serviceGetFromSerial()+0x30>
   30fc4:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   30fc8:	e1a0100d 	mov	r1, sp
   30fcc:	ebfff241 	bl	2d8d8 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)>
   30fd0:	e2502000 	subs	r2, r0, #0
   30fd4:	ca000001 	bgt	30fe0 <CommsManager::serviceGetFromSerial()+0x38>
   30fd8:	e28ddffa 	add	sp, sp, #1000	; 0x3e8
   30fdc:	e8bd8010 	pop	{r4, pc}
   30fe0:	e1a0100d 	mov	r1, sp
   30fe4:	e1a00004 	mov	r0, r4
   30fe8:	ebfffae5 	bl	2fb84 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)>
   30fec:	e28ddffa 	add	sp, sp, #1000	; 0x3e8
   30ff0:	e8bd8010 	pop	{r4, pc}

00030ff4 <CommsManager::service()>:
   30ff4:	e92d4010 	push	{r4, lr}
   30ff8:	e1a04000 	mov	r4, r0
   30ffc:	ebffff0b 	bl	30c30 <CommandHandler::service()>
   31000:	e1a00004 	mov	r0, r4
   31004:	e8bd4010 	pop	{r4, lr}
   31008:	eaffffe6 	b	30fa8 <CommsManager::serviceGetFromSerial()>

0003100c <BusControl::BusControl()>:
   3100c:	e92d4010 	push	{r4, lr}
   31010:	e1a04000 	mov	r4, r0
   31014:	e2802004 	add	r2, r0, #4
   31018:	e24dd008 	sub	sp, sp, #8
   3101c:	e1a00002 	mov	r0, r2
   31020:	e58d2004 	str	r2, [sp, #4]
   31024:	eb00050e 	bl	32464 <TargetClockGenerator::TargetClockGenerator()>
   31028:	e1a01004 	mov	r1, r4
   3102c:	e2840014 	add	r0, r4, #20
   31030:	eb00059f 	bl	326b4 <TargetControl::TargetControl(BusControl&)>
   31034:	e59f0064 	ldr	r0, [pc, #100]	; 310a0 <BusControl::BusControl()+0x94>
   31038:	e1a01004 	mov	r1, r4
   3103c:	e0840000 	add	r0, r4, r0
   31040:	eb000166 	bl	315e0 <BusSocketManager::BusSocketManager(BusControl&)>
   31044:	e59f0058 	ldr	r0, [pc, #88]	; 310a4 <BusControl::BusControl()+0x98>
   31048:	e1a01004 	mov	r1, r4
   3104c:	e0840000 	add	r0, r4, r0
   31050:	eb000bbb 	bl	33f44 <MemoryController::MemoryController(BusControl&)>
   31054:	e59f004c 	ldr	r0, [pc, #76]	; 310a8 <BusControl::BusControl()+0x9c>
   31058:	e1a01004 	mov	r1, r4
   3105c:	e59d2004 	ldr	r2, [sp, #4]
   31060:	e0840000 	add	r0, r4, r0
   31064:	eb0002b7 	bl	31b48 <BusRawAccess::BusRawAccess(BusControl&, TargetClockGenerator&)>
   31068:	e3a02064 	mov	r2, #100	; 0x64
   3106c:	e3a01f7d 	mov	r1, #500	; 0x1f4
   31070:	e59f0034 	ldr	r0, [pc, #52]	; 310ac <BusControl::BusControl()+0xa0>
   31074:	e2843811 	add	r3, r4, #1114112	; 0x110000
   31078:	e58316e4 	str	r1, [r3, #1764]	; 0x6e4
   3107c:	e58326e8 	str	r2, [r3, #1768]	; 0x6e8
   31080:	e1a01004 	mov	r1, r4
   31084:	e0840000 	add	r0, r4, r0
   31088:	eb000efe 	bl	34c88 <HwManager::HwManager(BusControl&)>
   3108c:	e3a03000 	mov	r3, #0
   31090:	e1a00004 	mov	r0, r4
   31094:	e5c43000 	strb	r3, [r4]
   31098:	e28dd008 	add	sp, sp, #8
   3109c:	e8bd8010 	pop	{r4, pc}
   310a0:	00100504 	.word	0x00100504
   310a4:	001006c8 	.word	0x001006c8
   310a8:	001106cc 	.word	0x001106cc
   310ac:	001106ec 	.word	0x001106ec

000310b0 <BusControl::init()>:
   310b0:	e5d03000 	ldrb	r3, [r0]
   310b4:	e3530000 	cmp	r3, #0
   310b8:	112fff1e 	bxne	lr
   310bc:	e92d4070 	push	{r4, r5, r6, lr}
   310c0:	e1a04000 	mov	r4, r0
   310c4:	e2805004 	add	r5, r0, #4
   310c8:	e3e01000 	mvn	r1, #0
   310cc:	e1a00005 	mov	r0, r5
   310d0:	eb000543 	bl	325e4 <TargetClockGenerator::setup(int)>
   310d4:	e1a00005 	mov	r0, r5
   310d8:	e59f1038 	ldr	r1, [pc, #56]	; 31118 <BusControl::init()+0x68>
   310dc:	eb000565 	bl	32678 <TargetClockGenerator::setFreqHz(unsigned long)>
   310e0:	e3a01001 	mov	r1, #1
   310e4:	e1a00005 	mov	r0, r5
   310e8:	eb0004e6 	bl	32488 <TargetClockGenerator::enable(bool)>
   310ec:	e59f0028 	ldr	r0, [pc, #40]	; 3111c <BusControl::init()+0x6c>
   310f0:	e0840000 	add	r0, r4, r0
   310f4:	eb0002b1 	bl	31bc0 <BusRawAccess::init()>
   310f8:	e2840014 	add	r0, r4, #20
   310fc:	eb00059a 	bl	3276c <TargetControl::init()>
   31100:	e59f0018 	ldr	r0, [pc, #24]	; 31120 <BusControl::init()+0x70>
   31104:	e0840000 	add	r0, r4, r0
   31108:	eb000139 	bl	315f4 <BusSocketManager::init()>
   3110c:	e3a03001 	mov	r3, #1
   31110:	e5c43000 	strb	r3, [r4]
   31114:	e8bd8070 	pop	{r4, r5, r6, pc}
   31118:	000f4240 	.word	0x000f4240
   3111c:	001106cc 	.word	0x001106cc
   31120:	00100504 	.word	0x00100504

00031124 <BusControl::service()>:
   31124:	e92d4010 	push	{r4, lr}
   31128:	e1a04000 	mov	r4, r0
   3112c:	e59f0014 	ldr	r0, [pc, #20]	; 31148 <BusControl::service()+0x24>
   31130:	e0840000 	add	r0, r4, r0
   31134:	eb000288 	bl	31b5c <BusRawAccess::service()>
   31138:	e2840014 	add	r0, r4, #20
   3113c:	e3a01000 	mov	r1, #0
   31140:	e8bd4010 	pop	{r4, lr}
   31144:	ea00058e 	b	32784 <TargetControl::service(bool)>
   31148:	001106cc 	.word	0x001106cc

0003114c <BusControl::machineChangeInit()>:
   3114c:	e92d4010 	push	{r4, lr}
   31150:	e3a02001 	mov	r2, #1
   31154:	e1a04000 	mov	r4, r0
   31158:	e59f0014 	ldr	r0, [pc, #20]	; 31174 <BusControl::machineChangeInit()+0x28>
   3115c:	e1a01002 	mov	r1, r2
   31160:	e0840000 	add	r0, r4, r0
   31164:	eb000129 	bl	31610 <BusSocketManager::suspend(bool, bool)>
   31168:	e2840018 	add	r0, r4, #24
   3116c:	e8bd4010 	pop	{r4, lr}
   31170:	ea000af1 	b	33d3c <TargetProgrammer::clear()>
   31174:	00100504 	.word	0x00100504

00031178 <BusControl::machineChangeComplete()>:
   31178:	e1a03000 	mov	r3, r0
   3117c:	e59f000c 	ldr	r0, [pc, #12]	; 31190 <BusControl::machineChangeComplete()+0x18>
   31180:	e3a02001 	mov	r2, #1
   31184:	e3a01000 	mov	r1, #0
   31188:	e0830000 	add	r0, r3, r0
   3118c:	ea00011f 	b	31610 <BusSocketManager::suspend(bool, bool)>
   31190:	00100504 	.word	0x00100504

00031194 <BusControl::rawAccessStart()>:
   31194:	e92d4010 	push	{r4, lr}
   31198:	e3a02001 	mov	r2, #1
   3119c:	e1a04000 	mov	r4, r0
   311a0:	e59f0018 	ldr	r0, [pc, #24]	; 311c0 <BusControl::rawAccessStart()+0x2c>
   311a4:	e1a01002 	mov	r1, r2
   311a8:	e0840000 	add	r0, r4, r0
   311ac:	eb000117 	bl	31610 <BusSocketManager::suspend(bool, bool)>
   311b0:	e2840014 	add	r0, r4, #20
   311b4:	e3a01001 	mov	r1, #1
   311b8:	e8bd4010 	pop	{r4, lr}
   311bc:	ea000571 	b	32788 <TargetControl::suspend(bool)>
   311c0:	00100504 	.word	0x00100504

000311c4 <BusControl::rawAccessEnd()>:
   311c4:	e92d4010 	push	{r4, lr}
   311c8:	e1a04000 	mov	r4, r0
   311cc:	e59f001c 	ldr	r0, [pc, #28]	; 311f0 <BusControl::rawAccessEnd()+0x2c>
   311d0:	e3a01000 	mov	r1, #0
   311d4:	e0840000 	add	r0, r4, r0
   311d8:	e3a02001 	mov	r2, #1
   311dc:	eb00010b 	bl	31610 <BusSocketManager::suspend(bool, bool)>
   311e0:	e2840014 	add	r0, r4, #20
   311e4:	e3a01000 	mov	r1, #0
   311e8:	e8bd4010 	pop	{r4, lr}
   311ec:	ea000565 	b	32788 <TargetControl::suspend(bool)>
   311f0:	00100504 	.word	0x00100504

000311f4 <BusControl::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>:
   311f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   311f8:	e2808601 	add	r8, r0, #1048576	; 0x100000
   311fc:	e1a05000 	mov	r5, r0
   31200:	e5d804b8 	ldrb	r0, [r8, #1208]	; 0x4b8
   31204:	e24dd014 	sub	sp, sp, #20
   31208:	e1a06001 	mov	r6, r1
   3120c:	e21010ff 	ands	r1, r0, #255	; 0xff
   31210:	e1a0b003 	mov	fp, r3
   31214:	e1a07002 	mov	r7, r2
   31218:	e5dda038 	ldrb	sl, [sp, #56]	; 0x38
   3121c:	e5dd903c 	ldrb	r9, [sp, #60]	; 0x3c
   31220:	e5dd3040 	ldrb	r3, [sp, #64]	; 0x40
   31224:	0a000029 	beq	312d0 <BusControl::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xdc>
   31228:	e3530000 	cmp	r3, #0
   3122c:	01a04003 	moveq	r4, r3
   31230:	1a000018 	bne	31298 <BusControl::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xa4>
   31234:	e3590000 	cmp	r9, #0
   31238:	1a000005 	bne	31254 <BusControl::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x60>
   3123c:	e5d834b8 	ldrb	r3, [r8, #1208]	; 0x4b8
   31240:	e3530000 	cmp	r3, #0
   31244:	0a00000d 	beq	31280 <BusControl::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x8c>
   31248:	e1a00004 	mov	r0, r4
   3124c:	e28dd014 	add	sp, sp, #20
   31250:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31254:	e59f009c 	ldr	r0, [pc, #156]	; 312f8 <BusControl::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x104>
   31258:	e1a0300b 	mov	r3, fp
   3125c:	e1a02007 	mov	r2, r7
   31260:	e1a01006 	mov	r1, r6
   31264:	e58da000 	str	sl, [sp]
   31268:	e0850000 	add	r0, r5, r0
   3126c:	eb000b37 	bl	33f50 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   31270:	e5d834b8 	ldrb	r3, [r8, #1208]	; 0x4b8
   31274:	e1a04000 	mov	r4, r0
   31278:	e3530000 	cmp	r3, #0
   3127c:	1afffff1 	bne	31248 <BusControl::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x54>
   31280:	e59f0074 	ldr	r0, [pc, #116]	; 312fc <BusControl::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x108>
   31284:	e0850000 	add	r0, r5, r0
   31288:	eb000386 	bl	320a8 <BusRawAccess::busReqRelease()>
   3128c:	e1a00004 	mov	r0, r4
   31290:	e28dd014 	add	sp, sp, #20
   31294:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31298:	e59f0058 	ldr	r0, [pc, #88]	; 312f8 <BusControl::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x104>
   3129c:	e1a0300b 	mov	r3, fp
   312a0:	e1a02007 	mov	r2, r7
   312a4:	e1a01006 	mov	r1, r6
   312a8:	e58da000 	str	sl, [sp]
   312ac:	e0850000 	add	r0, r5, r0
   312b0:	eb000b43 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   312b4:	e3500000 	cmp	r0, #0
   312b8:	13a09000 	movne	r9, #0
   312bc:	02099001 	andeq	r9, r9, #1
   312c0:	e3590000 	cmp	r9, #0
   312c4:	e1a04000 	mov	r4, r0
   312c8:	0affffdb 	beq	3123c <BusControl::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x48>
   312cc:	eaffffe0 	b	31254 <BusControl::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x60>
   312d0:	e59f0024 	ldr	r0, [pc, #36]	; 312fc <BusControl::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x108>
   312d4:	e58d300c 	str	r3, [sp, #12]
   312d8:	e0850000 	add	r0, r5, r0
   312dc:	eb0003db 	bl	32250 <BusRawAccess::busRequestAndTake(unsigned long)>
   312e0:	e2504000 	subs	r4, r0, #0
   312e4:	e59d300c 	ldr	r3, [sp, #12]
   312e8:	0affffce 	beq	31228 <BusControl::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x34>
   312ec:	e1a00004 	mov	r0, r4
   312f0:	e28dd014 	add	sp, sp, #20
   312f4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   312f8:	001006c8 	.word	0x001006c8
   312fc:	001106cc 	.word	0x001106cc

00031300 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>:
   31300:	e92d4070 	push	{r4, r5, r6, lr}
   31304:	e590c1b8 	ldr	ip, [r0, #440]	; 0x1b8
   31308:	e1a04000 	mov	r4, r0
   3130c:	e35c0000 	cmp	ip, #0
   31310:	e24dd018 	sub	sp, sp, #24
   31314:	0a00007f 	beq	31518 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x218>
   31318:	e3a02000 	mov	r2, #0
   3131c:	e1a03000 	mov	r3, r0
   31320:	e1a01002 	mov	r1, r2
   31324:	e08ce10c 	add	lr, ip, ip, lsl #2
   31328:	e08ce08e 	add	lr, ip, lr, lsl #1
   3132c:	e080e10e 	add	lr, r0, lr, lsl #2
   31330:	e5d30000 	ldrb	r0, [r3]
   31334:	e3500000 	cmp	r0, #0
   31338:	0a000003 	beq	3134c <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x4c>
   3133c:	e3510000 	cmp	r1, #0
   31340:	05d31010 	ldrbeq	r1, [r3, #16]
   31344:	e3520000 	cmp	r2, #0
   31348:	05d32011 	ldrbeq	r2, [r3, #17]
   3134c:	e283302c 	add	r3, r3, #44	; 0x2c
   31350:	e15e0003 	cmp	lr, r3
   31354:	1afffff5 	bne	31330 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x30>
   31358:	e5d431c0 	ldrb	r3, [r4, #448]	; 0x1c0
   3135c:	e0220003 	eor	r0, r2, r3
   31360:	e0233001 	eor	r3, r3, r1
   31364:	e1903003 	orrs	r3, r0, r3
   31368:	0a000008 	beq	31390 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x90>
   3136c:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   31370:	e59f01d8 	ldr	r0, [pc, #472]	; 31550 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x250>
   31374:	e5c411c0 	strb	r1, [r4, #448]	; 0x1c0
   31378:	e5c421c1 	strb	r2, [r4, #449]	; 0x1c1
   3137c:	e0830000 	add	r0, r3, r0
   31380:	eb0002c7 	bl	31ea4 <BusRawAccess::waitConfigSocket(bool, bool)>
   31384:	e594c1b8 	ldr	ip, [r4, #440]	; 0x1b8
   31388:	e35c0000 	cmp	ip, #0
   3138c:	0a000038 	beq	31474 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x174>
   31390:	e1a01004 	mov	r1, r4
   31394:	e3a03000 	mov	r3, #0
   31398:	ea000009 	b	313c4 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0xc4>
   3139c:	e5d20018 	ldrb	r0, [r2, #24]
   313a0:	e3500000 	cmp	r0, #0
   313a4:	1a00003b 	bne	31498 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x198>
   313a8:	e5d22020 	ldrb	r2, [r2, #32]
   313ac:	e3520000 	cmp	r2, #0
   313b0:	1a00003e 	bne	314b0 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x1b0>
   313b4:	e2833001 	add	r3, r3, #1
   313b8:	e153000c 	cmp	r3, ip
   313bc:	e281102c 	add	r1, r1, #44	; 0x2c
   313c0:	2a00002b 	bcs	31474 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x174>
   313c4:	e0832103 	add	r2, r3, r3, lsl #2
   313c8:	e0832082 	add	r2, r3, r2, lsl #1
   313cc:	e0842102 	add	r2, r4, r2, lsl #2
   313d0:	e5d20028 	ldrb	r0, [r2, #40]	; 0x28
   313d4:	e1a0e103 	lsl	lr, r3, #2
   313d8:	e3500000 	cmp	r0, #0
   313dc:	1a000026 	bne	3147c <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x17c>
   313e0:	e5d20012 	ldrb	r0, [r2, #18]
   313e4:	e3500000 	cmp	r0, #0
   313e8:	0affffeb 	beq	3139c <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x9c>
   313ec:	e5d12000 	ldrb	r2, [r1]
   313f0:	e3520000 	cmp	r2, #0
   313f4:	0affffee 	beq	313b4 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0xb4>
   313f8:	e3a05001 	mov	r5, #1
   313fc:	e3a02004 	mov	r2, #4
   31400:	e08e0003 	add	r0, lr, r3
   31404:	e0830080 	add	r0, r3, r0, lsl #1
   31408:	e0840100 	add	r0, r4, r0, lsl #2
   3140c:	e5d0c028 	ldrb	ip, [r0, #40]	; 0x28
   31410:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   31414:	e35c0000 	cmp	ip, #0
   31418:	e2816014 	add	r6, r1, #20
   3141c:	e5911004 	ldr	r1, [r1, #4]
   31420:	1a00002d 	bne	314dc <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x1dc>
   31424:	e5d0c012 	ldrb	ip, [r0, #18]
   31428:	e35c0000 	cmp	ip, #0
   3142c:	1a000025 	bne	314c8 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x1c8>
   31430:	e5d0c018 	ldrb	ip, [r0, #24]
   31434:	e35c0000 	cmp	ip, #0
   31438:	1a00003c 	bne	31530 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x230>
   3143c:	e5d0c020 	ldrb	ip, [r0, #32]
   31440:	e21cc0ff 	ands	ip, ip, #255	; 0xff
   31444:	01a0000c 	moveq	r0, ip
   31448:	1a000028 	bne	314f0 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x1f0>
   3144c:	e59fc100 	ldr	ip, [pc, #256]	; 31554 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x254>
   31450:	e58d0000 	str	r0, [sp]
   31454:	e1a01005 	mov	r1, r5
   31458:	e1a00006 	mov	r0, r6
   3145c:	e58d4008 	str	r4, [sp, #8]
   31460:	e58dc004 	str	ip, [sp, #4]
   31464:	eb000781 	bl	33270 <TargetControl::cycleReqAction(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, unsigned long, void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE), void*)>
   31468:	e3500000 	cmp	r0, #0
   3146c:	13a03001 	movne	r3, #1
   31470:	15c431c3 	strbne	r3, [r4, #451]	; 0x1c3
   31474:	e28dd018 	add	sp, sp, #24
   31478:	e8bd8070 	pop	{r4, r5, r6, pc}
   3147c:	e5d10000 	ldrb	r0, [r1]
   31480:	e3500000 	cmp	r0, #0
   31484:	0affffca 	beq	313b4 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0xb4>
   31488:	e5d22029 	ldrb	r2, [r2, #41]	; 0x29
   3148c:	e3a05004 	mov	r5, #4
   31490:	e6ef2072 	uxtb	r2, r2
   31494:	eaffffd9 	b	31400 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x100>
   31498:	e5d12000 	ldrb	r2, [r1]
   3149c:	e3520000 	cmp	r2, #0
   314a0:	0affffc3 	beq	313b4 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0xb4>
   314a4:	e3a05002 	mov	r5, #2
   314a8:	e3a02004 	mov	r2, #4
   314ac:	eaffffd3 	b	31400 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x100>
   314b0:	e5d12000 	ldrb	r2, [r1]
   314b4:	e3520000 	cmp	r2, #0
   314b8:	0affffbd 	beq	313b4 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0xb4>
   314bc:	e3a05003 	mov	r5, #3
   314c0:	e3a02004 	mov	r2, #4
   314c4:	eaffffcd 	b	31400 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x100>
   314c8:	e5901014 	ldr	r1, [r0, #20]
   314cc:	e0610281 	rsb	r0, r1, r1, lsl #5
   314d0:	e0811100 	add	r1, r1, r0, lsl #2
   314d4:	e1a00181 	lsl	r0, r1, #3
   314d8:	eaffffdb 	b	3144c <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x14c>
   314dc:	e59f0074 	ldr	r0, [pc, #116]	; 31558 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x258>
   314e0:	e1510000 	cmp	r1, r0
   314e4:	9a000007 	bls	31508 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x208>
   314e8:	e3a00001 	mov	r0, #1
   314ec:	eaffffd6 	b	3144c <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x14c>
   314f0:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   314f4:	e3500000 	cmp	r0, #0
   314f8:	1a00000f 	bne	3153c <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x23c>
   314fc:	e59f0058 	ldr	r0, [pc, #88]	; 3155c <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x25c>
   31500:	e1500001 	cmp	r0, r1
   31504:	3afffff7 	bcc	314e8 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x1e8>
   31508:	e1cd21f0 	strd	r2, [sp, #16]
   3150c:	eb003513 	bl	3e960 <__udivsi3>
   31510:	e1cd21d0 	ldrd	r2, [sp, #16]
   31514:	eaffffcc 	b	3144c <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x14c>
   31518:	e5d031c0 	ldrb	r3, [r0, #448]	; 0x1c0
   3151c:	e3530000 	cmp	r3, #0
   31520:	11a0100c 	movne	r1, ip
   31524:	11a02001 	movne	r2, r1
   31528:	1affff8f 	bne	3136c <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x6c>
   3152c:	eaffffd0 	b	31474 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x174>
   31530:	e590001c 	ldr	r0, [r0, #28]
   31534:	e3500000 	cmp	r0, #0
   31538:	0affffef 	beq	314fc <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x1fc>
   3153c:	e060c280 	rsb	ip, r0, r0, lsl #5
   31540:	e06cc30c 	rsb	ip, ip, ip, lsl #6
   31544:	e080018c 	add	r0, r0, ip, lsl #3
   31548:	e1a00300 	lsl	r0, r0, #6
   3154c:	eaffffeb 	b	31500 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x200>
   31550:	001106cc 	.word	0x001106cc
   31554:	00031a6c 	.word	0x00031a6c
   31558:	3b9aca00 	.word	0x3b9aca00
   3155c:	01e84800 	.word	0x01e84800

00031560 <BusSocketManager::busAccessCallbackStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   31560:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31564:	e2507000 	subs	r7, r0, #0
   31568:	e24dd00c 	sub	sp, sp, #12
   3156c:	e59da030 	ldr	sl, [sp, #48]	; 0x30
   31570:	0a000018 	beq	315d8 <BusSocketManager::busAccessCallbackStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)+0x78>
   31574:	e1a0b003 	mov	fp, r3
   31578:	e59731b8 	ldr	r3, [r7, #440]	; 0x1b8
   3157c:	e3530000 	cmp	r3, #0
   31580:	0a000014 	beq	315d8 <BusSocketManager::busAccessCallbackStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)+0x78>
   31584:	e1a08001 	mov	r8, r1
   31588:	e1a09002 	mov	r9, r2
   3158c:	e1a04007 	mov	r4, r7
   31590:	e3a05000 	mov	r5, #0
   31594:	e5d4c000 	ldrb	ip, [r4]
   31598:	e2855001 	add	r5, r5, #1
   3159c:	e35c0000 	cmp	ip, #0
   315a0:	0a000009 	beq	315cc <BusSocketManager::busAccessCallbackStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)+0x6c>
   315a4:	e5946004 	ldr	r6, [r4, #4]
   315a8:	e3560000 	cmp	r6, #0
   315ac:	0a000006 	beq	315cc <BusSocketManager::busAccessCallbackStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)+0x6c>
   315b0:	e1a0300b 	mov	r3, fp
   315b4:	e594000c 	ldr	r0, [r4, #12]
   315b8:	e1a02009 	mov	r2, r9
   315bc:	e1a01008 	mov	r1, r8
   315c0:	e58da000 	str	sl, [sp]
   315c4:	e12fff36 	blx	r6
   315c8:	e59731b8 	ldr	r3, [r7, #440]	; 0x1b8
   315cc:	e1530005 	cmp	r3, r5
   315d0:	e284402c 	add	r4, r4, #44	; 0x2c
   315d4:	8affffee 	bhi	31594 <BusSocketManager::busAccessCallbackStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)+0x34>
   315d8:	e28dd00c 	add	sp, sp, #12
   315dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000315e0 <BusSocketManager::BusSocketManager(BusControl&)>:
   315e0:	e3a02000 	mov	r2, #0
   315e4:	e58011bc 	str	r1, [r0, #444]	; 0x1bc
   315e8:	e58021b8 	str	r2, [r0, #440]	; 0x1b8
   315ec:	e58021c0 	str	r2, [r0, #448]	; 0x1c0
   315f0:	e12fff1e 	bx	lr

000315f4 <BusSocketManager::init()>:
   315f4:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   315f8:	e59f200c 	ldr	r2, [pc, #12]	; 3160c <BusSocketManager::init()+0x18>
   315fc:	e2833601 	add	r3, r3, #1048576	; 0x100000
   31600:	e58304b4 	str	r0, [r3, #1204]	; 0x4b4
   31604:	e58324b0 	str	r2, [r3, #1200]	; 0x4b0
   31608:	e12fff1e 	bx	lr
   3160c:	00031560 	.word	0x00031560

00031610 <BusSocketManager::suspend(bool, bool)>:
   31610:	e92d4070 	push	{r4, r5, r6, lr}
   31614:	e1a06002 	mov	r6, r2
   31618:	e1a04000 	mov	r4, r0
   3161c:	e1a05001 	mov	r5, r1
   31620:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   31624:	e59f0074 	ldr	r0, [pc, #116]	; 316a0 <BusSocketManager::suspend(bool, bool)+0x90>
   31628:	e0830000 	add	r0, r3, r0
   3162c:	eb000228 	bl	31ed4 <BusRawAccess::waitSuspend(bool)>
   31630:	e3560000 	cmp	r6, #0
   31634:	e5c451c2 	strb	r5, [r4, #450]	; 0x1c2
   31638:	0a000013 	beq	3168c <BusSocketManager::suspend(bool, bool)+0x7c>
   3163c:	e3a02000 	mov	r2, #0
   31640:	e59401b8 	ldr	r0, [r4, #440]	; 0x1b8
   31644:	e5c421c3 	strb	r2, [r4, #451]	; 0x1c3
   31648:	e1500002 	cmp	r0, r2
   3164c:	11a01002 	movne	r1, r2
   31650:	0a000009 	beq	3167c <BusSocketManager::suspend(bool, bool)+0x6c>
   31654:	e0823102 	add	r3, r2, r2, lsl #2
   31658:	e0823083 	add	r3, r2, r3, lsl #1
   3165c:	e2822001 	add	r2, r2, #1
   31660:	e0843103 	add	r3, r4, r3, lsl #2
   31664:	e1520000 	cmp	r2, r0
   31668:	e5c31028 	strb	r1, [r3, #40]	; 0x28
   3166c:	e5c31012 	strb	r1, [r3, #18]
   31670:	e5c31018 	strb	r1, [r3, #24]
   31674:	e5c31020 	strb	r1, [r3, #32]
   31678:	1afffff5 	bne	31654 <BusSocketManager::suspend(bool, bool)+0x44>
   3167c:	e59401bc 	ldr	r0, [r4, #444]	; 0x1bc
   31680:	e2800014 	add	r0, r0, #20
   31684:	eb000715 	bl	332e0 <TargetControl::cycleClearAction()>
   31688:	e5d451c2 	ldrb	r5, [r4, #450]	; 0x1c2
   3168c:	e3550000 	cmp	r5, #0
   31690:	18bd8070 	popne	{r4, r5, r6, pc}
   31694:	e1a00004 	mov	r0, r4
   31698:	e8bd4070 	pop	{r4, r5, r6, lr}
   3169c:	eaffff17 	b	31300 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>
   316a0:	001106cc 	.word	0x001106cc

000316a4 <BusSocketManager::add(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>:
   316a4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   316a8:	e59041b8 	ldr	r4, [r0, #440]	; 0x1b8
   316ac:	e24dd00c 	sub	sp, sp, #12
   316b0:	e5ddc054 	ldrb	ip, [sp, #84]	; 0x54
   316b4:	e5dd5058 	ldrb	r5, [sp, #88]	; 0x58
   316b8:	e3540009 	cmp	r4, #9
   316bc:	e5dd9030 	ldrb	r9, [sp, #48]	; 0x30
   316c0:	e5dd7034 	ldrb	r7, [sp, #52]	; 0x34
   316c4:	e5ddb038 	ldrb	fp, [sp, #56]	; 0x38
   316c8:	e5dda040 	ldrb	sl, [sp, #64]	; 0x40
   316cc:	e5dd8048 	ldrb	r8, [sp, #72]	; 0x48
   316d0:	e5dd6050 	ldrb	r6, [sp, #80]	; 0x50
   316d4:	e58dc000 	str	ip, [sp]
   316d8:	e58d5004 	str	r5, [sp, #4]
   316dc:	8a000021 	bhi	31768 <BusSocketManager::add(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)+0xc4>
   316e0:	e0845104 	add	r5, r4, r4, lsl #2
   316e4:	e0845085 	add	r5, r4, r5, lsl #1
   316e8:	e080c105 	add	ip, r0, r5, lsl #2
   316ec:	e7c01105 	strb	r1, [r0, r5, lsl #2]
   316f0:	e58c2004 	str	r2, [ip, #4]
   316f4:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
   316f8:	e5ccb012 	strb	fp, [ip, #18]
   316fc:	e58c2014 	str	r2, [ip, #20]
   31700:	e59d205c 	ldr	r2, [sp, #92]	; 0x5c
   31704:	e5cca018 	strb	sl, [ip, #24]
   31708:	e58c200c 	str	r2, [ip, #12]
   3170c:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
   31710:	e58c3008 	str	r3, [ip, #8]
   31714:	e58c201c 	str	r2, [ip, #28]
   31718:	e59d3000 	ldr	r3, [sp]
   3171c:	e59d204c 	ldr	r2, [sp, #76]	; 0x4c
   31720:	e59d5004 	ldr	r5, [sp, #4]
   31724:	e5cc8020 	strb	r8, [ip, #32]
   31728:	e5cc9010 	strb	r9, [ip, #16]
   3172c:	e58c2024 	str	r2, [ip, #36]	; 0x24
   31730:	e5cc7011 	strb	r7, [ip, #17]
   31734:	e5cc6028 	strb	r6, [ip, #40]	; 0x28
   31738:	e5cc3029 	strb	r3, [ip, #41]	; 0x29
   3173c:	e5cc502a 	strb	r5, [ip, #42]	; 0x2a
   31740:	e5d021c2 	ldrb	r2, [r0, #450]	; 0x1c2
   31744:	e2843001 	add	r3, r4, #1
   31748:	e3520000 	cmp	r2, #0
   3174c:	e1a0e000 	mov	lr, r0
   31750:	e58031b8 	str	r3, [r0, #440]	; 0x1b8
   31754:	1a000000 	bne	3175c <BusSocketManager::add(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)+0xb8>
   31758:	ebfffee8 	bl	31300 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>
   3175c:	e1a00004 	mov	r0, r4
   31760:	e28dd00c 	add	sp, sp, #12
   31764:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31768:	e3e00000 	mvn	r0, #0
   3176c:	eafffffb 	b	31760 <BusSocketManager::add(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)+0xbc>

00031770 <BusSocketManager::enable(unsigned long, bool)>:
   31770:	e590c1b8 	ldr	ip, [r0, #440]	; 0x1b8
   31774:	e15c0001 	cmp	ip, r1
   31778:	912fff1e 	bxls	lr
   3177c:	e5d0c1c2 	ldrb	ip, [r0, #450]	; 0x1c2
   31780:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   31784:	e081e101 	add	lr, r1, r1, lsl #2
   31788:	e081108e 	add	r1, r1, lr, lsl #1
   3178c:	e35c0000 	cmp	ip, #0
   31790:	e7c02101 	strb	r2, [r0, r1, lsl #2]
   31794:	149df004 	popne	{pc}		; (ldrne pc, [sp], #4)
   31798:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3179c:	eafffed7 	b	31300 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>

000317a0 <BusSocketManager::isEnabled(unsigned long)>:
   317a0:	e59031b8 	ldr	r3, [r0, #440]	; 0x1b8
   317a4:	e1530001 	cmp	r3, r1
   317a8:	80813101 	addhi	r3, r1, r1, lsl #2
   317ac:	80811083 	addhi	r1, r1, r3, lsl #1
   317b0:	87d00101 	ldrbhi	r0, [r0, r1, lsl #2]
   317b4:	93a00000 	movls	r0, #0
   317b8:	e12fff1e 	bx	lr

000317bc <BusSocketManager::setup(unsigned long, bool, bool)>:
   317bc:	e92d4010 	push	{r4, lr}
   317c0:	e590e1b8 	ldr	lr, [r0, #440]	; 0x1b8
   317c4:	e15e0001 	cmp	lr, r1
   317c8:	98bd8010 	popls	{r4, pc}
   317cc:	e5d0e1c2 	ldrb	lr, [r0, #450]	; 0x1c2
   317d0:	e0814101 	add	r4, r1, r1, lsl #2
   317d4:	e0811084 	add	r1, r1, r4, lsl #1
   317d8:	e080c101 	add	ip, r0, r1, lsl #2
   317dc:	e35e0000 	cmp	lr, #0
   317e0:	e5cc2010 	strb	r2, [ip, #16]
   317e4:	e5cc3011 	strb	r3, [ip, #17]
   317e8:	18bd8010 	popne	{r4, pc}
   317ec:	e8bd4010 	pop	{r4, lr}
   317f0:	eafffec2 	b	31300 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>

000317f4 <BusSocketManager::reqIRQ(unsigned long, int)>:
   317f4:	e590c1b8 	ldr	ip, [r0, #440]	; 0x1b8
   317f8:	e15c0001 	cmp	ip, r1
   317fc:	912fff1e 	bxls	lr
   31800:	e3a0c001 	mov	ip, #1
   31804:	e3520000 	cmp	r2, #0
   31808:	d3a02020 	movle	r2, #32
   3180c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   31810:	e081e101 	add	lr, r1, r1, lsl #2
   31814:	e0811c1e 	add	r1, r1, lr, lsl ip
   31818:	e5d0e1c2 	ldrb	lr, [r0, #450]	; 0x1c2
   3181c:	e0803101 	add	r3, r0, r1, lsl #2
   31820:	e35e0000 	cmp	lr, #0
   31824:	e5832024 	str	r2, [r3, #36]	; 0x24
   31828:	e5c3c020 	strb	ip, [r3, #32]
   3182c:	149df004 	popne	{pc}		; (ldrne pc, [sp], #4)
   31830:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   31834:	eafffeb1 	b	31300 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>

00031838 <BusSocketManager::reqReset(unsigned long, int)>:
   31838:	e590c1b8 	ldr	ip, [r0, #440]	; 0x1b8
   3183c:	e15c0001 	cmp	ip, r1
   31840:	912fff1e 	bxls	lr
   31844:	e3a0c001 	mov	ip, #1
   31848:	e3520000 	cmp	r2, #0
   3184c:	d3a02f7d 	movle	r2, #500	; 0x1f4
   31850:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   31854:	e081e101 	add	lr, r1, r1, lsl #2
   31858:	e0811c1e 	add	r1, r1, lr, lsl ip
   3185c:	e5d0e1c2 	ldrb	lr, [r0, #450]	; 0x1c2
   31860:	e0803101 	add	r3, r0, r1, lsl #2
   31864:	e35e0000 	cmp	lr, #0
   31868:	e5832014 	str	r2, [r3, #20]
   3186c:	e5c3c012 	strb	ip, [r3, #18]
   31870:	149df004 	popne	{pc}		; (ldrne pc, [sp], #4)
   31874:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   31878:	eafffea0 	b	31300 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>

0003187c <BusSocketManager::reqNMI(unsigned long, int)>:
   3187c:	e590c1b8 	ldr	ip, [r0, #440]	; 0x1b8
   31880:	e15c0001 	cmp	ip, r1
   31884:	912fff1e 	bxls	lr
   31888:	e3a0c001 	mov	ip, #1
   3188c:	e3520000 	cmp	r2, #0
   31890:	d3a02020 	movle	r2, #32
   31894:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   31898:	e081e101 	add	lr, r1, r1, lsl #2
   3189c:	e0811c1e 	add	r1, r1, lr, lsl ip
   318a0:	e5d0e1c2 	ldrb	lr, [r0, #450]	; 0x1c2
   318a4:	e0803101 	add	r3, r0, r1, lsl #2
   318a8:	e35e0000 	cmp	lr, #0
   318ac:	e583201c 	str	r2, [r3, #28]
   318b0:	e5c3c018 	strb	ip, [r3, #24]
   318b4:	149df004 	popne	{pc}		; (ldrne pc, [sp], #4)
   318b8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   318bc:	eafffe8f 	b	31300 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>

000318c0 <BusSocketManager::reqBus(unsigned long, BR_BUS_ACTION_REASON)>:
   318c0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   318c4:	e59031b8 	ldr	r3, [r0, #440]	; 0x1b8
   318c8:	e24dd00c 	sub	sp, sp, #12
   318cc:	e1530001 	cmp	r3, r1
   318d0:	9a00000b 	bls	31904 <BusSocketManager::reqBus(unsigned long, BR_BUS_ACTION_REASON)+0x44>
   318d4:	e3a0e001 	mov	lr, #1
   318d8:	e0813101 	add	r3, r1, r1, lsl #2
   318dc:	e0811e13 	add	r1, r1, r3, lsl lr
   318e0:	e5d031c2 	ldrb	r3, [r0, #450]	; 0x1c2
   318e4:	e0801101 	add	r1, r0, r1, lsl #2
   318e8:	e3530000 	cmp	r3, #0
   318ec:	e5c1e028 	strb	lr, [r1, #40]	; 0x28
   318f0:	e5c12029 	strb	r2, [r1, #41]	; 0x29
   318f4:	1a000008 	bne	3191c <BusSocketManager::reqBus(unsigned long, BR_BUS_ACTION_REASON)+0x5c>
   318f8:	e28dd00c 	add	sp, sp, #12
   318fc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   31900:	eafffe7e 	b	31300 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>
   31904:	e58d3000 	str	r3, [sp]
   31908:	e59f2014 	ldr	r2, [pc, #20]	; 31924 <BusSocketManager::reqBus(unsigned long, BR_BUS_ACTION_REASON)+0x64>
   3190c:	e1a03001 	mov	r3, r1
   31910:	e59f0010 	ldr	r0, [pc, #16]	; 31928 <BusSocketManager::reqBus(unsigned long, BR_BUS_ACTION_REASON)+0x68>
   31914:	e3a01004 	mov	r1, #4
   31918:	ebfff53a 	bl	2ee08 <LogWrite>
   3191c:	e28dd00c 	add	sp, sp, #12
   31920:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   31924:	000481bc 	.word	0x000481bc
   31928:	000481e0 	.word	0x000481e0

0003192c <BusSocketManager::updateAfterSocketChange()>:
   3192c:	e5d031c2 	ldrb	r3, [r0, #450]	; 0x1c2
   31930:	e3530000 	cmp	r3, #0
   31934:	112fff1e 	bxne	lr
   31938:	eafffe70 	b	31300 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>

0003193c <BusSocketManager::cycleActionCB(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE)>:
   3193c:	e3530009 	cmp	r3, #9
   31940:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31944:	93a04000 	movls	r4, #0
   31948:	83a04001 	movhi	r4, #1
   3194c:	e590c1b8 	ldr	ip, [r0, #440]	; 0x1b8
   31950:	e5dda020 	ldrb	sl, [sp, #32]
   31954:	e15c0003 	cmp	ip, r3
   31958:	93844001 	orrls	r4, r4, #1
   3195c:	e3540000 	cmp	r4, #0
   31960:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   31964:	e35c0000 	cmp	ip, #0
   31968:	e1a07000 	mov	r7, r0
   3196c:	11a06001 	movne	r6, r1
   31970:	11a09002 	movne	r9, r2
   31974:	11a05000 	movne	r5, r0
   31978:	0a000029 	beq	31a24 <BusSocketManager::cycleActionCB(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE)+0xe8>
   3197c:	e5d51000 	ldrb	r1, [r5]
   31980:	e2844001 	add	r4, r4, #1
   31984:	e3510000 	cmp	r1, #0
   31988:	0a000008 	beq	319b0 <BusSocketManager::cycleActionCB(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE)+0x74>
   3198c:	e5958008 	ldr	r8, [r5, #8]
   31990:	e3580000 	cmp	r8, #0
   31994:	0a000005 	beq	319b0 <BusSocketManager::cycleActionCB(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE)+0x74>
   31998:	e1a0300a 	mov	r3, sl
   3199c:	e1a02009 	mov	r2, r9
   319a0:	e1a01006 	mov	r1, r6
   319a4:	e595000c 	ldr	r0, [r5, #12]
   319a8:	e12fff38 	blx	r8
   319ac:	e597c1b8 	ldr	ip, [r7, #440]	; 0x1b8
   319b0:	e15c0004 	cmp	ip, r4
   319b4:	e285502c 	add	r5, r5, #44	; 0x2c
   319b8:	8affffef 	bhi	3197c <BusSocketManager::cycleActionCB(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE)+0x40>
   319bc:	e35c0000 	cmp	ip, #0
   319c0:	0a000017 	beq	31a24 <BusSocketManager::cycleActionCB(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE)+0xe8>
   319c4:	e3a03000 	mov	r3, #0
   319c8:	e1a01003 	mov	r1, r3
   319cc:	ea00000b 	b	31a00 <BusSocketManager::cycleActionCB(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE)+0xc4>
   319d0:	e3560001 	cmp	r6, #1
   319d4:	0a00001a 	beq	31a44 <BusSocketManager::cycleActionCB(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE)+0x108>
   319d8:	e3560002 	cmp	r6, #2
   319dc:	0a00001d 	beq	31a58 <BusSocketManager::cycleActionCB(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE)+0x11c>
   319e0:	e3560003 	cmp	r6, #3
   319e4:	00832103 	addeq	r2, r3, r3, lsl #2
   319e8:	00832082 	addeq	r2, r3, r2, lsl #1
   319ec:	00872102 	addeq	r2, r7, r2, lsl #2
   319f0:	05c21020 	strbeq	r1, [r2, #32]
   319f4:	e2833001 	add	r3, r3, #1
   319f8:	e15c0003 	cmp	ip, r3
   319fc:	0a000008 	beq	31a24 <BusSocketManager::cycleActionCB(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE)+0xe8>
   31a00:	e3560004 	cmp	r6, #4
   31a04:	1afffff1 	bne	319d0 <BusSocketManager::cycleActionCB(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE)+0x94>
   31a08:	e0832103 	add	r2, r3, r3, lsl #2
   31a0c:	e0832082 	add	r2, r3, r2, lsl #1
   31a10:	e2833001 	add	r3, r3, #1
   31a14:	e0872102 	add	r2, r7, r2, lsl #2
   31a18:	e15c0003 	cmp	ip, r3
   31a1c:	e5c21028 	strb	r1, [r2, #40]	; 0x28
   31a20:	1afffff6 	bne	31a00 <BusSocketManager::cycleActionCB(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE)+0xc4>
   31a24:	e3a02000 	mov	r2, #0
   31a28:	e5d731c2 	ldrb	r3, [r7, #450]	; 0x1c2
   31a2c:	e5c721c3 	strb	r2, [r7, #451]	; 0x1c3
   31a30:	e1530002 	cmp	r3, r2
   31a34:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   31a38:	e1a00007 	mov	r0, r7
   31a3c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   31a40:	eafffe2e 	b	31300 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>
   31a44:	e0832103 	add	r2, r3, r3, lsl #2
   31a48:	e0832082 	add	r2, r3, r2, lsl #1
   31a4c:	e0872102 	add	r2, r7, r2, lsl #2
   31a50:	e5c21012 	strb	r1, [r2, #18]
   31a54:	eaffffe6 	b	319f4 <BusSocketManager::cycleActionCB(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE)+0xb8>
   31a58:	e0832103 	add	r2, r3, r3, lsl #2
   31a5c:	e0832082 	add	r2, r3, r2, lsl #1
   31a60:	e0872102 	add	r2, r7, r2, lsl #2
   31a64:	e5c21018 	strb	r1, [r2, #24]
   31a68:	eaffffe1 	b	319f4 <BusSocketManager::cycleActionCB(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE)+0xb8>

00031a6c <BusSocketManager::cycleActionStaticCB(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE)>:
   31a6c:	e3500000 	cmp	r0, #0
   31a70:	e5ddc000 	ldrb	ip, [sp]
   31a74:	012fff1e 	bxeq	lr
   31a78:	e58dc000 	str	ip, [sp]
   31a7c:	eaffffae 	b	3193c <BusSocketManager::cycleActionCB(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE)>

00031a80 <BusSocketManager::clearAllPending()>:
   31a80:	e3a02000 	mov	r2, #0
   31a84:	e590c1b8 	ldr	ip, [r0, #440]	; 0x1b8
   31a88:	e5c021c3 	strb	r2, [r0, #451]	; 0x1c3
   31a8c:	e15c0002 	cmp	ip, r2
   31a90:	0a00000a 	beq	31ac0 <BusSocketManager::clearAllPending()+0x40>
   31a94:	e1a01002 	mov	r1, r2
   31a98:	e0823102 	add	r3, r2, r2, lsl #2
   31a9c:	e0823083 	add	r3, r2, r3, lsl #1
   31aa0:	e2822001 	add	r2, r2, #1
   31aa4:	e0803103 	add	r3, r0, r3, lsl #2
   31aa8:	e152000c 	cmp	r2, ip
   31aac:	e5c31028 	strb	r1, [r3, #40]	; 0x28
   31ab0:	e5c31012 	strb	r1, [r3, #18]
   31ab4:	e5c31018 	strb	r1, [r3, #24]
   31ab8:	e5c31020 	strb	r1, [r3, #32]
   31abc:	1afffff5 	bne	31a98 <BusSocketManager::clearAllPending()+0x18>
   31ac0:	e59001bc 	ldr	r0, [r0, #444]	; 0x1bc
   31ac4:	e2800014 	add	r0, r0, #20
   31ac8:	ea000604 	b	332e0 <TargetControl::cycleClearAction()>

00031acc <BusSocketManager::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   31acc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31ad0:	e1a07000 	mov	r7, r0
   31ad4:	e59001b8 	ldr	r0, [r0, #440]	; 0x1b8
   31ad8:	e24dd00c 	sub	sp, sp, #12
   31adc:	e3500000 	cmp	r0, #0
   31ae0:	e59da030 	ldr	sl, [sp, #48]	; 0x30
   31ae4:	0a000015 	beq	31b40 <BusSocketManager::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x74>
   31ae8:	e1a08001 	mov	r8, r1
   31aec:	e1a09002 	mov	r9, r2
   31af0:	e1a0b003 	mov	fp, r3
   31af4:	e1a04007 	mov	r4, r7
   31af8:	e3a05000 	mov	r5, #0
   31afc:	e5d4c000 	ldrb	ip, [r4]
   31b00:	e2855001 	add	r5, r5, #1
   31b04:	e35c0000 	cmp	ip, #0
   31b08:	0a000009 	beq	31b34 <BusSocketManager::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x68>
   31b0c:	e5946004 	ldr	r6, [r4, #4]
   31b10:	e3560000 	cmp	r6, #0
   31b14:	0a000006 	beq	31b34 <BusSocketManager::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x68>
   31b18:	e594000c 	ldr	r0, [r4, #12]
   31b1c:	e1a0300b 	mov	r3, fp
   31b20:	e1a02009 	mov	r2, r9
   31b24:	e1a01008 	mov	r1, r8
   31b28:	e58da000 	str	sl, [sp]
   31b2c:	e12fff36 	blx	r6
   31b30:	e59701b8 	ldr	r0, [r7, #440]	; 0x1b8
   31b34:	e1500005 	cmp	r0, r5
   31b38:	e284402c 	add	r4, r4, #44	; 0x2c
   31b3c:	8affffee 	bhi	31afc <BusSocketManager::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x30>
   31b40:	e28dd00c 	add	sp, sp, #12
   31b44:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00031b48 <BusRawAccess::BusRawAccess(BusControl&, TargetClockGenerator&)>:
   31b48:	e3a0c000 	mov	ip, #0
   31b4c:	e5801008 	str	r1, [r0, #8]
   31b50:	e580200c 	str	r2, [r0, #12]
   31b54:	e5c0c000 	strb	ip, [r0]
   31b58:	e12fff1e 	bx	lr

00031b5c <BusRawAccess::service()>:
   31b5c:	e12fff1e 	bx	lr

00031b60 <BusRawAccess::targetReset(unsigned long)>:
   31b60:	e92d4010 	push	{r4, lr}
   31b64:	e1a04000 	mov	r4, r0
   31b68:	e3a01005 	mov	r1, #5
   31b6c:	eb0001cb 	bl	322a0 <BusRawAccess::muxSet(int)>
   31b70:	e59f000c 	ldr	r0, [pc, #12]	; 31b84 <BusRawAccess::targetReset(unsigned long)+0x24>
   31b74:	ebfff0a6 	bl	2de14 <microsDelay>
   31b78:	e1a00004 	mov	r0, r4
   31b7c:	e8bd4010 	pop	{r4, lr}
   31b80:	ea0001d9 	b	322ec <BusRawAccess::muxClear()>
   31b84:	000186a0 	.word	0x000186a0

00031b88 <BusRawAccess::setPinOut(int, bool)>:
   31b88:	e92d4010 	push	{r4, lr}
   31b8c:	e1a04001 	mov	r4, r1
   31b90:	e24dd008 	sub	sp, sp, #8
   31b94:	e6ef0070 	uxtb	r0, r0
   31b98:	e58d0004 	str	r0, [sp, #4]
   31b9c:	eb003698 	bl	3f604 <digitalWrite>
   31ba0:	e59d0004 	ldr	r0, [sp, #4]
   31ba4:	e3a01001 	mov	r1, #1
   31ba8:	eb003654 	bl	3f500 <pinMode>
   31bac:	e1a01004 	mov	r1, r4
   31bb0:	e59d0004 	ldr	r0, [sp, #4]
   31bb4:	e28dd008 	add	sp, sp, #8
   31bb8:	e8bd4010 	pop	{r4, lr}
   31bbc:	ea003690 	b	3f604 <digitalWrite>

00031bc0 <BusRawAccess::init()>:
   31bc0:	e92d4010 	push	{r4, lr}
   31bc4:	e3a01000 	mov	r1, #0
   31bc8:	e1a04000 	mov	r4, r0
   31bcc:	e3a0000b 	mov	r0, #11
   31bd0:	ebffffec 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   31bd4:	e3a01000 	mov	r1, #0
   31bd8:	e3a00009 	mov	r0, #9
   31bdc:	ebffffe9 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   31be0:	e3a01000 	mov	r1, #0
   31be4:	e3a0000a 	mov	r0, #10
   31be8:	ebffffe6 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   31bec:	e3a01001 	mov	r1, #1
   31bf0:	e3a00010 	mov	r0, #16
   31bf4:	ebffffe3 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   31bf8:	e3a01001 	mov	r1, #1
   31bfc:	e3a00013 	mov	r0, #19
   31c00:	ebffffe0 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   31c04:	e3a01000 	mov	r1, #0
   31c08:	e3a00007 	mov	r0, #7
   31c0c:	e5c41000 	strb	r1, [r4]
   31c10:	ebffffdc 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   31c14:	e3a01001 	mov	r1, #1
   31c18:	e3a00006 	mov	r0, #6
   31c1c:	ebffffd9 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   31c20:	e3a00008 	mov	r0, #8
   31c24:	e3a01001 	mov	r1, #1
   31c28:	ebffffd6 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   31c2c:	e1a00004 	mov	r0, r4
   31c30:	e8bd4010 	pop	{r4, lr}
   31c34:	ea000019 	b	31ca0 <BusRawAccess::waitSystemInit()>

00031c38 <BusRawAccess::setBusSignal(BR_BUS_ACTION, bool)>:
   31c38:	e2411001 	sub	r1, r1, #1
   31c3c:	e3510003 	cmp	r1, #3
   31c40:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   31c44:	ea000014 	b	31c9c <BusRawAccess::setBusSignal(BR_BUS_ACTION, bool)+0x64>
   31c48:	00031c84 	.word	0x00031c84
   31c4c:	00031c74 	.word	0x00031c74
   31c50:	00031c64 	.word	0x00031c64
   31c54:	00031c58 	.word	0x00031c58
   31c58:	e3520000 	cmp	r2, #0
   31c5c:	0a00000d 	beq	31c98 <BusRawAccess::setBusSignal(BR_BUS_ACTION, bool)+0x60>
   31c60:	ea00009d 	b	31edc <BusRawAccess::busReqStart()>
   31c64:	e3520000 	cmp	r2, #0
   31c68:	0a000009 	beq	31c94 <BusRawAccess::setBusSignal(BR_BUS_ACTION, bool)+0x5c>
   31c6c:	e3a01002 	mov	r1, #2
   31c70:	ea00018a 	b	322a0 <BusRawAccess::muxSet(int)>
   31c74:	e3520000 	cmp	r2, #0
   31c78:	0a000005 	beq	31c94 <BusRawAccess::setBusSignal(BR_BUS_ACTION, bool)+0x5c>
   31c7c:	e3a01006 	mov	r1, #6
   31c80:	ea000186 	b	322a0 <BusRawAccess::muxSet(int)>
   31c84:	e3520000 	cmp	r2, #0
   31c88:	0a000001 	beq	31c94 <BusRawAccess::setBusSignal(BR_BUS_ACTION, bool)+0x5c>
   31c8c:	e3a01005 	mov	r1, #5
   31c90:	ea000182 	b	322a0 <BusRawAccess::muxSet(int)>
   31c94:	ea000194 	b	322ec <BusRawAccess::muxClear()>
   31c98:	ea000102 	b	320a8 <BusRawAccess::busReqRelease()>
   31c9c:	e12fff1e 	bx	lr

00031ca0 <BusRawAccess::waitSystemInit()>:
   31ca0:	e3a03000 	mov	r3, #0
   31ca4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31ca8:	e59f20dc 	ldr	r2, [pc, #220]	; 31d8c <BusRawAccess::waitSystemInit()+0xec>
   31cac:	e59f10dc 	ldr	r1, [pc, #220]	; 31d90 <BusRawAccess::waitSystemInit()+0xf0>
   31cb0:	e5803010 	str	r3, [r0, #16]
   31cb4:	e5c03014 	strb	r3, [r0, #20]
   31cb8:	e1a07003 	mov	r7, r3
   31cbc:	e1a05003 	mov	r5, r3
   31cc0:	e1a06002 	mov	r6, r2
   31cc4:	e59f80c8 	ldr	r8, [pc, #200]	; 31d94 <BusRawAccess::waitSystemInit()+0xf4>
   31cc8:	e24dd010 	sub	sp, sp, #16
   31ccc:	e58210a0 	str	r1, [r2, #160]	; 0xa0
   31cd0:	ea000005 	b	31cec <BusRawAccess::waitSystemInit()+0x4c>
   31cd4:	e3a00001 	mov	r0, #1
   31cd8:	e2855001 	add	r5, r5, #1
   31cdc:	ebfff04c 	bl	2de14 <microsDelay>
   31ce0:	e1550008 	cmp	r5, r8
   31ce4:	e59670a0 	ldr	r7, [r6, #160]	; 0xa0
   31ce8:	0a000021 	beq	31d74 <BusRawAccess::waitSystemInit()+0xd4>
   31cec:	e59630a0 	ldr	r3, [r6, #160]	; 0xa0
   31cf0:	e2134080 	ands	r4, r3, #128	; 0x80
   31cf4:	1afffff6 	bne	31cd4 <BusRawAccess::waitSystemInit()+0x34>
   31cf8:	e3a01004 	mov	r1, #4
   31cfc:	e3a0000d 	mov	r0, #13
   31d00:	eb0035fe 	bl	3f500 <pinMode>
   31d04:	e3a01004 	mov	r1, #4
   31d08:	e3a0000c 	mov	r0, #12
   31d0c:	eb0035fb 	bl	3f500 <pinMode>
   31d10:	e3e02000 	mvn	r2, #0
   31d14:	e59f607c 	ldr	r6, [pc, #124]	; 31d98 <BusRawAccess::waitSystemInit()+0xf8>
   31d18:	e59f806c 	ldr	r8, [pc, #108]	; 31d8c <BusRawAccess::waitSystemInit()+0xec>
   31d1c:	e59f3078 	ldr	r3, [pc, #120]	; 31d9c <BusRawAccess::waitSystemInit()+0xfc>
   31d20:	e5862004 	str	r2, [r6, #4]
   31d24:	e3a00001 	mov	r0, #1
   31d28:	e58830a4 	str	r3, [r8, #164]	; 0xa4
   31d2c:	ebfff038 	bl	2de14 <microsDelay>
   31d30:	e59f3068 	ldr	r3, [pc, #104]	; 31da0 <BusRawAccess::waitSystemInit()+0x100>
   31d34:	e3a00001 	mov	r0, #1
   31d38:	e58830a0 	str	r3, [r8, #160]	; 0xa0
   31d3c:	ebfff034 	bl	2de14 <microsDelay>
   31d40:	e59f305c 	ldr	r3, [pc, #92]	; 31da4 <BusRawAccess::waitSystemInit()+0x104>
   31d44:	e3a00001 	mov	r0, #1
   31d48:	e5863000 	str	r3, [r6]
   31d4c:	ebfff030 	bl	2de14 <microsDelay>
   31d50:	e3a03008 	mov	r3, #8
   31d54:	e3a01004 	mov	r1, #4
   31d58:	e88d00a0 	stm	sp, {r5, r7}
   31d5c:	e59f2044 	ldr	r2, [pc, #68]	; 31da8 <BusRawAccess::waitSystemInit()+0x108>
   31d60:	e59f0044 	ldr	r0, [pc, #68]	; 31dac <BusRawAccess::waitSystemInit()+0x10c>
   31d64:	e58d4008 	str	r4, [sp, #8]
   31d68:	ebfff426 	bl	2ee08 <LogWrite>
   31d6c:	e28dd010 	add	sp, sp, #16
   31d70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31d74:	e59f3034 	ldr	r3, [pc, #52]	; 31db0 <BusRawAccess::waitSystemInit()+0x110>
   31d78:	e3a00001 	mov	r0, #1
   31d7c:	e58630a0 	str	r3, [r6, #160]	; 0xa0
   31d80:	ebfff023 	bl	2de14 <microsDelay>
   31d84:	e59640a0 	ldr	r4, [r6, #160]	; 0xa0
   31d88:	eaffffda 	b	31cf8 <BusRawAccess::waitSystemInit()+0x58>
   31d8c:	20101000 	.word	0x20101000
   31d90:	5a000006 	.word	0x5a000006
   31d94:	000186a0 	.word	0x000186a0
   31d98:	2020c000 	.word	0x2020c000
   31d9c:	5a008000 	.word	0x5a008000
   31da0:	5a000016 	.word	0x5a000016
   31da4:	00002363 	.word	0x00002363
   31da8:	000481f0 	.word	0x000481f0
   31dac:	00048228 	.word	0x00048228
   31db0:	5a000026 	.word	0x5a000026

00031db4 <BusRawAccess::waitRawSet()>:
   31db4:	e5d03010 	ldrb	r3, [r0, #16]
   31db8:	e3530000 	cmp	r3, #0
   31dbc:	1a000002 	bne	31dcc <BusRawAccess::waitRawSet()+0x18>
   31dc0:	e5d03012 	ldrb	r3, [r0, #18]
   31dc4:	e3530000 	cmp	r3, #0
   31dc8:	0a000018 	beq	31e30 <BusRawAccess::waitRawSet()+0x7c>
   31dcc:	e5d03014 	ldrb	r3, [r0, #20]
   31dd0:	e3530000 	cmp	r3, #0
   31dd4:	1a00000a 	bne	31e04 <BusRawAccess::waitRawSet()+0x50>
   31dd8:	e5d03011 	ldrb	r3, [r0, #17]
   31ddc:	e3530000 	cmp	r3, #0
   31de0:	1a000028 	bne	31e88 <BusRawAccess::waitRawSet()+0xd4>
   31de4:	e5d03013 	ldrb	r3, [r0, #19]
   31de8:	e3530000 	cmp	r3, #0
   31dec:	1a000015 	bne	31e48 <BusRawAccess::waitRawSet()+0x94>
   31df0:	e59f30a8 	ldr	r3, [pc, #168]	; 31ea0 <BusRawAccess::waitRawSet()+0xec>
   31df4:	e5932000 	ldr	r2, [r3]
   31df8:	e3c23b02 	bic	r3, r2, #2048	; 0x800
   31dfc:	e3c33008 	bic	r3, r3, #8
   31e00:	ea000017 	b	31e64 <BusRawAccess::waitRawSet()+0xb0>
   31e04:	e5d03011 	ldrb	r3, [r0, #17]
   31e08:	e3530000 	cmp	r3, #0
   31e0c:	0a000016 	beq	31e6c <BusRawAccess::waitRawSet()+0xb8>
   31e10:	e59f3088 	ldr	r3, [pc, #136]	; 31ea0 <BusRawAccess::waitRawSet()+0xec>
   31e14:	e5932000 	ldr	r2, [r3]
   31e18:	e3c23b02 	bic	r3, r2, #2048	; 0x800
   31e1c:	e3c33008 	bic	r3, r3, #8
   31e20:	e1530002 	cmp	r3, r2
   31e24:	159f2074 	ldrne	r2, [pc, #116]	; 31ea0 <BusRawAccess::waitRawSet()+0xec>
   31e28:	15823000 	strne	r3, [r2]
   31e2c:	e12fff1e 	bx	lr
   31e30:	e5d03011 	ldrb	r3, [r0, #17]
   31e34:	e3530000 	cmp	r3, #0
   31e38:	0a00000b 	beq	31e6c <BusRawAccess::waitRawSet()+0xb8>
   31e3c:	e5d03014 	ldrb	r3, [r0, #20]
   31e40:	e3530000 	cmp	r3, #0
   31e44:	1afffff1 	bne	31e10 <BusRawAccess::waitRawSet()+0x5c>
   31e48:	e59f2050 	ldr	r2, [pc, #80]	; 31ea0 <BusRawAccess::waitRawSet()+0xec>
   31e4c:	e3530000 	cmp	r3, #0
   31e50:	e5922000 	ldr	r2, [r2]
   31e54:	e3c23b02 	bic	r3, r2, #2048	; 0x800
   31e58:	e3c33008 	bic	r3, r3, #8
   31e5c:	e3833008 	orr	r3, r3, #8
   31e60:	0affffee 	beq	31e20 <BusRawAccess::waitRawSet()+0x6c>
   31e64:	e3833b02 	orr	r3, r3, #2048	; 0x800
   31e68:	eaffffec 	b	31e20 <BusRawAccess::waitRawSet()+0x6c>
   31e6c:	e5d03013 	ldrb	r3, [r0, #19]
   31e70:	e3530000 	cmp	r3, #0
   31e74:	0affffe5 	beq	31e10 <BusRawAccess::waitRawSet()+0x5c>
   31e78:	e5d03014 	ldrb	r3, [r0, #20]
   31e7c:	e3530000 	cmp	r3, #0
   31e80:	1affffe2 	bne	31e10 <BusRawAccess::waitRawSet()+0x5c>
   31e84:	eaffffef 	b	31e48 <BusRawAccess::waitRawSet()+0x94>
   31e88:	e59f3010 	ldr	r3, [pc, #16]	; 31ea0 <BusRawAccess::waitRawSet()+0xec>
   31e8c:	e5932000 	ldr	r2, [r3]
   31e90:	e3c23b02 	bic	r3, r2, #2048	; 0x800
   31e94:	e3c33008 	bic	r3, r3, #8
   31e98:	e3833008 	orr	r3, r3, #8
   31e9c:	eafffff0 	b	31e64 <BusRawAccess::waitRawSet()+0xb0>
   31ea0:	2020c000 	.word	0x2020c000

00031ea4 <BusRawAccess::waitConfigSocket(bool, bool)>:
   31ea4:	e92d4010 	push	{r4, lr}
   31ea8:	e5c01010 	strb	r1, [r0, #16]
   31eac:	e5c02011 	strb	r2, [r0, #17]
   31eb0:	ebffffbf 	bl	31db4 <BusRawAccess::waitRawSet()>
   31eb4:	e3a00000 	mov	r0, #0
   31eb8:	e8bd8010 	pop	{r4, pc}

00031ebc <BusRawAccess::waitConfigDebugger(bool, bool)>:
   31ebc:	e92d4010 	push	{r4, lr}
   31ec0:	e5c01012 	strb	r1, [r0, #18]
   31ec4:	e5c02013 	strb	r2, [r0, #19]
   31ec8:	ebffffb9 	bl	31db4 <BusRawAccess::waitRawSet()>
   31ecc:	e3a00000 	mov	r0, #0
   31ed0:	e8bd8010 	pop	{r4, pc}

00031ed4 <BusRawAccess::waitSuspend(bool)>:
   31ed4:	e5c01014 	strb	r1, [r0, #20]
   31ed8:	eaffffb5 	b	31db4 <BusRawAccess::waitRawSet()>

00031edc <BusRawAccess::busReqStart()>:
   31edc:	e59f302c 	ldr	r3, [pc, #44]	; 31f10 <BusRawAccess::busReqStart()+0x34>
   31ee0:	e59fc02c 	ldr	ip, [pc, #44]	; 31f14 <BusRawAccess::busReqStart()+0x38>
   31ee4:	e5931008 	ldr	r1, [r3, #8]
   31ee8:	e59f2028 	ldr	r2, [pc, #40]	; 31f18 <BusRawAccess::busReqStart()+0x3c>
   31eec:	e20114ff 	and	r1, r1, #-16777216	; 0xff000000
   31ef0:	e5831008 	str	r1, [r3, #8]
   31ef4:	e5900004 	ldr	r0, [r0, #4]
   31ef8:	e3a01000 	mov	r1, #0
   31efc:	e3500011 	cmp	r0, #17
   31f00:	11a0200c 	movne	r2, ip
   31f04:	e3a00013 	mov	r0, #19
   31f08:	e583201c 	str	r2, [r3, #28]
   31f0c:	ea0035bc 	b	3f604 <digitalWrite>
   31f10:	20200000 	.word	0x20200000
   31f14:	00060043 	.word	0x00060043
   31f18:	0006004b 	.word	0x0006004b

00031f1c <BusRawAccess::busReqTakeControl()>:
   31f1c:	e92d4070 	push	{r4, r5, r6, lr}
   31f20:	e3a04001 	mov	r4, #1
   31f24:	e1a05000 	mov	r5, r0
   31f28:	e3a00040 	mov	r0, #64	; 0x40
   31f2c:	e59f3074 	ldr	r3, [pc, #116]	; 31fa8 <BusRawAccess::busReqTakeControl()+0x8c>
   31f30:	e5c54000 	strb	r4, [r5]
   31f34:	e5932008 	ldr	r2, [r3, #8]
   31f38:	e1a01004 	mov	r1, r4
   31f3c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   31f40:	e5832008 	str	r2, [r3, #8]
   31f44:	e583001c 	str	r0, [r3, #28]
   31f48:	e3a00011 	mov	r0, #17
   31f4c:	ebffff0d 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   31f50:	e1a01004 	mov	r1, r4
   31f54:	e3a00012 	mov	r0, #18
   31f58:	ebffff0a 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   31f5c:	e1a01004 	mov	r1, r4
   31f60:	e3a00000 	mov	r0, #0
   31f64:	ebffff07 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   31f68:	e1a01004 	mov	r1, r4
   31f6c:	e1a00004 	mov	r0, r4
   31f70:	ebffff04 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   31f74:	e1a01004 	mov	r1, r4
   31f78:	e3a00005 	mov	r0, #5
   31f7c:	ebffff01 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   31f80:	e1a01004 	mov	r1, r4
   31f84:	e3a00003 	mov	r0, #3
   31f88:	ebfffefe 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   31f8c:	e5953004 	ldr	r3, [r5, #4]
   31f90:	e3530011 	cmp	r3, #17
   31f94:	18bd8070 	popne	{r4, r5, r6, pc}
   31f98:	e3a01000 	mov	r1, #0
   31f9c:	e8bd4070 	pop	{r4, r5, r6, lr}
   31fa0:	e3a00003 	mov	r0, #3
   31fa4:	ea003596 	b	3f604 <digitalWrite>
   31fa8:	20200000 	.word	0x20200000

00031fac <BusRawAccess::busReqWaitForAck(bool, unsigned long)>:
   31fac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31fb0:	e1a08000 	mov	r8, r0
   31fb4:	e1a04001 	mov	r4, r1
   31fb8:	e1a07002 	mov	r7, r2
   31fbc:	e3a05ffa 	mov	r5, #1000	; 0x3e8
   31fc0:	e59f60d8 	ldr	r6, [pc, #216]	; 320a0 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0xf4>
   31fc4:	ea000005 	b	31fe0 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0x34>
   31fc8:	e5980008 	ldr	r0, [r8, #8]
   31fcc:	e3a01001 	mov	r1, #1
   31fd0:	e2800014 	add	r0, r0, #20
   31fd4:	eb0001ea 	bl	32784 <TargetControl::service(bool)>
   31fd8:	e2555001 	subs	r5, r5, #1
   31fdc:	0a000005 	beq	31ff8 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0x4c>
   31fe0:	e5963034 	ldr	r3, [r6, #52]	; 0x34
   31fe4:	e1a03123 	lsr	r3, r3, #2
   31fe8:	e2233001 	eor	r3, r3, #1
   31fec:	e2033001 	and	r3, r3, #1
   31ff0:	e1540003 	cmp	r4, r3
   31ff4:	1afffff3 	bne	31fc8 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0x1c>
   31ff8:	e59f30a0 	ldr	r3, [pc, #160]	; 320a0 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0xf4>
   31ffc:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   32000:	e1a03123 	lsr	r3, r3, #2
   32004:	e2233001 	eor	r3, r3, #1
   32008:	e2033001 	and	r3, r3, #1
   3200c:	e1540003 	cmp	r4, r3
   32010:	0a000010 	beq	32058 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0xac>
   32014:	e3570000 	cmp	r7, #0
   32018:	0a000017 	beq	3207c <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0xd0>
   3201c:	e3570001 	cmp	r7, #1
   32020:	33a07001 	movcc	r7, #1
   32024:	e3a05000 	mov	r5, #0
   32028:	e59f6070 	ldr	r6, [pc, #112]	; 320a0 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0xf4>
   3202c:	e5963034 	ldr	r3, [r6, #52]	; 0x34
   32030:	e2855001 	add	r5, r5, #1
   32034:	e1a03123 	lsr	r3, r3, #2
   32038:	e2233001 	eor	r3, r3, #1
   3203c:	e2033001 	and	r3, r3, #1
   32040:	e1540003 	cmp	r4, r3
   32044:	0a000003 	beq	32058 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0xac>
   32048:	e3a00001 	mov	r0, #1
   3204c:	ebffef70 	bl	2de14 <microsDelay>
   32050:	e1570005 	cmp	r7, r5
   32054:	1afffff4 	bne	3202c <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0x80>
   32058:	e59f3040 	ldr	r3, [pc, #64]	; 320a0 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0xf4>
   3205c:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   32060:	e1a00120 	lsr	r0, r0, #2
   32064:	e2200001 	eor	r0, r0, #1
   32068:	e2000001 	and	r0, r0, #1
   3206c:	e0400004 	sub	r0, r0, r4
   32070:	e16f0f10 	clz	r0, r0
   32074:	e1a002a0 	lsr	r0, r0, #5
   32078:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3207c:	e598300c 	ldr	r3, [r8, #12]
   32080:	e59f001c 	ldr	r0, [pc, #28]	; 320a4 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0xf8>
   32084:	e5931000 	ldr	r1, [r3]
   32088:	e1510000 	cmp	r1, r0
   3208c:	83a07001 	movhi	r7, #1
   32090:	8affffe3 	bhi	32024 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0x78>
   32094:	eb003231 	bl	3e960 <__udivsi3>
   32098:	e1a07000 	mov	r7, r0
   3209c:	eaffffde 	b	3201c <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0x70>
   320a0:	20200000 	.word	0x20200000
   320a4:	3b9aca00 	.word	0x3b9aca00

000320a8 <BusRawAccess::busReqRelease()>:
   320a8:	e5903004 	ldr	r3, [r0, #4]
   320ac:	e92d4070 	push	{r4, r5, r6, lr}
   320b0:	e3530011 	cmp	r3, #17
   320b4:	e1a04000 	mov	r4, r0
   320b8:	0a000043 	beq	321cc <BusRawAccess::busReqRelease()+0x124>
   320bc:	e3a06001 	mov	r6, #1
   320c0:	e59f5168 	ldr	r5, [pc, #360]	; 32230 <BusRawAccess::busReqRelease()+0x188>
   320c4:	e59f3168 	ldr	r3, [pc, #360]	; 32234 <BusRawAccess::busReqRelease()+0x18c>
   320c8:	e3a00014 	mov	r0, #20
   320cc:	e585301c 	str	r3, [r5, #28]
   320d0:	eb003576 	bl	3f6b0 <lowlev_cycleDelay>
   320d4:	e3a00014 	mov	r0, #20
   320d8:	e5856028 	str	r6, [r5, #40]	; 0x28
   320dc:	eb003573 	bl	3f6b0 <lowlev_cycleDelay>
   320e0:	e585601c 	str	r6, [r5, #28]
   320e4:	e3a01040 	mov	r1, #64	; 0x40
   320e8:	e59f3140 	ldr	r3, [pc, #320]	; 32230 <BusRawAccess::busReqRelease()+0x188>
   320ec:	e1a00004 	mov	r0, r4
   320f0:	e5932008 	ldr	r2, [r3, #8]
   320f4:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   320f8:	e5832008 	str	r2, [r3, #8]
   320fc:	e583101c 	str	r1, [r3, #28]
   32100:	eb000079 	bl	322ec <BusRawAccess::muxClear()>
   32104:	e5943004 	ldr	r3, [r4, #4]
   32108:	e3530011 	cmp	r3, #17
   3210c:	0a000043 	beq	32220 <BusRawAccess::busReqRelease()+0x178>
   32110:	e59f2120 	ldr	r2, [pc, #288]	; 32238 <BusRawAccess::busReqRelease()+0x190>
   32114:	e59f0120 	ldr	r0, [pc, #288]	; 3223c <BusRawAccess::busReqRelease()+0x194>
   32118:	e3a03064 	mov	r3, #100	; 0x64
   3211c:	e5820018 	str	r0, [r2, #24]
   32120:	e59f1108 	ldr	r1, [pc, #264]	; 32230 <BusRawAccess::busReqRelease()+0x188>
   32124:	e5820018 	str	r0, [r2, #24]
   32128:	ea000001 	b	32134 <BusRawAccess::busReqRelease()+0x8c>
   3212c:	e2533001 	subs	r3, r3, #1
   32130:	0a000002 	beq	32140 <BusRawAccess::busReqRelease()+0x98>
   32134:	e5912034 	ldr	r2, [r1, #52]	; 0x34
   32138:	e3120020 	tst	r2, #32
   3213c:	0afffffa 	beq	3212c <BusRawAccess::busReqRelease()+0x84>
   32140:	e5940004 	ldr	r0, [r4, #4]
   32144:	e59f10f4 	ldr	r1, [pc, #244]	; 32240 <BusRawAccess::busReqRelease()+0x198>
   32148:	e3500011 	cmp	r0, #17
   3214c:	e59f30f0 	ldr	r3, [pc, #240]	; 32244 <BusRawAccess::busReqRelease()+0x19c>
   32150:	11a03001 	movne	r3, r1
   32154:	e59f20d4 	ldr	r2, [pc, #212]	; 32230 <BusRawAccess::busReqRelease()+0x188>
   32158:	e3a01000 	mov	r1, #0
   3215c:	e582301c 	str	r3, [r2, #28]
   32160:	e3a00011 	mov	r0, #17
   32164:	eb0034e5 	bl	3f500 <pinMode>
   32168:	e3a01000 	mov	r1, #0
   3216c:	e3a00012 	mov	r0, #18
   32170:	eb0034e2 	bl	3f500 <pinMode>
   32174:	e3a01000 	mov	r1, #0
   32178:	e1a00001 	mov	r0, r1
   3217c:	eb0034df 	bl	3f500 <pinMode>
   32180:	e3a01000 	mov	r1, #0
   32184:	e3a00001 	mov	r0, #1
   32188:	eb0034dc 	bl	3f500 <pinMode>
   3218c:	e3a01000 	mov	r1, #0
   32190:	e3a00005 	mov	r0, #5
   32194:	eb0034d9 	bl	3f500 <pinMode>
   32198:	e5943004 	ldr	r3, [r4, #4]
   3219c:	e3530011 	cmp	r3, #17
   321a0:	0a000002 	beq	321b0 <BusRawAccess::busReqRelease()+0x108>
   321a4:	e3a01000 	mov	r1, #0
   321a8:	e3a00003 	mov	r0, #3
   321ac:	eb0034d3 	bl	3f500 <pinMode>
   321b0:	e3a02000 	mov	r2, #0
   321b4:	e1a00004 	mov	r0, r4
   321b8:	e1a01002 	mov	r1, r2
   321bc:	ebffff7a 	bl	31fac <BusRawAccess::busReqWaitForAck(bool, unsigned long)>
   321c0:	e3a03000 	mov	r3, #0
   321c4:	e5c43000 	strb	r3, [r4]
   321c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   321cc:	e3a02040 	mov	r2, #64	; 0x40
   321d0:	e3a06001 	mov	r6, #1
   321d4:	e59f5054 	ldr	r5, [pc, #84]	; 32230 <BusRawAccess::busReqRelease()+0x188>
   321d8:	e59f3068 	ldr	r3, [pc, #104]	; 32248 <BusRawAccess::busReqRelease()+0x1a0>
   321dc:	e5852028 	str	r2, [r5, #40]	; 0x28
   321e0:	e5952008 	ldr	r2, [r5, #8]
   321e4:	e59f1060 	ldr	r1, [pc, #96]	; 3224c <BusRawAccess::busReqRelease()+0x1a4>
   321e8:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   321ec:	e1823003 	orr	r3, r2, r3
   321f0:	e5853008 	str	r3, [r5, #8]
   321f4:	e3a00064 	mov	r0, #100	; 0x64
   321f8:	e585101c 	str	r1, [r5, #28]
   321fc:	eb00352b 	bl	3f6b0 <lowlev_cycleDelay>
   32200:	e3a00014 	mov	r0, #20
   32204:	e5856028 	str	r6, [r5, #40]	; 0x28
   32208:	eb003528 	bl	3f6b0 <lowlev_cycleDelay>
   3220c:	e585601c 	str	r6, [r5, #28]
   32210:	e5953008 	ldr	r3, [r5, #8]
   32214:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   32218:	e5853008 	str	r3, [r5, #8]
   3221c:	eaffffb0 	b	320e4 <BusRawAccess::busReqRelease()+0x3c>
   32220:	e3a01001 	mov	r1, #1
   32224:	e3a00003 	mov	r0, #3
   32228:	eb0034f5 	bl	3f604 <digitalWrite>
   3222c:	eaffffb7 	b	32110 <BusRawAccess::busReqRelease()+0x68>
   32230:	20200000 	.word	0x20200000
   32234:	0006000b 	.word	0x0006000b
   32238:	2020c000 	.word	0x2020c000
   3223c:	0000ffff 	.word	0x0000ffff
   32240:	000e002b 	.word	0x000e002b
   32244:	000e0023 	.word	0x000e0023
   32248:	00249249 	.word	0x00249249
   3224c:	00100002 	.word	0x00100002

00032250 <BusRawAccess::busRequestAndTake(unsigned long)>:
   32250:	e92d4010 	push	{r4, lr}
   32254:	e1a04000 	mov	r4, r0
   32258:	e24dd008 	sub	sp, sp, #8
   3225c:	e58d1004 	str	r1, [sp, #4]
   32260:	ebffff1d 	bl	31edc <BusRawAccess::busReqStart()>
   32264:	e1a00004 	mov	r0, r4
   32268:	e3a01001 	mov	r1, #1
   3226c:	e59d2004 	ldr	r2, [sp, #4]
   32270:	ebffff4d 	bl	31fac <BusRawAccess::busReqWaitForAck(bool, unsigned long)>
   32274:	e3500000 	cmp	r0, #0
   32278:	e1a00004 	mov	r0, r4
   3227c:	0a000003 	beq	32290 <BusRawAccess::busRequestAndTake(unsigned long)+0x40>
   32280:	ebffff25 	bl	31f1c <BusRawAccess::busReqTakeControl()>
   32284:	e3a00000 	mov	r0, #0
   32288:	e28dd008 	add	sp, sp, #8
   3228c:	e8bd8010 	pop	{r4, pc}
   32290:	ebffff84 	bl	320a8 <BusRawAccess::busReqRelease()>
   32294:	e3a00002 	mov	r0, #2
   32298:	e28dd008 	add	sp, sp, #8
   3229c:	e8bd8010 	pop	{r4, pc}

000322a0 <BusRawAccess::muxSet(int)>:
   322a0:	e5903004 	ldr	r3, [r0, #4]
   322a4:	e3530011 	cmp	r3, #17
   322a8:	0a000008 	beq	322d0 <BusRawAccess::muxSet(int)+0x30>
   322ac:	e3a02801 	mov	r2, #65536	; 0x10000
   322b0:	e3a00c0e 	mov	r0, #3584	; 0xe00
   322b4:	e59f302c 	ldr	r3, [pc, #44]	; 322e8 <BusRawAccess::muxSet(int)+0x48>
   322b8:	e1a01481 	lsl	r1, r1, #9
   322bc:	e583201c 	str	r2, [r3, #28]
   322c0:	e5830028 	str	r0, [r3, #40]	; 0x28
   322c4:	e583101c 	str	r1, [r3, #28]
   322c8:	e5832028 	str	r2, [r3, #40]	; 0x28
   322cc:	e12fff1e 	bx	lr
   322d0:	e3a02c0e 	mov	r2, #3584	; 0xe00
   322d4:	e59f300c 	ldr	r3, [pc, #12]	; 322e8 <BusRawAccess::muxSet(int)+0x48>
   322d8:	e1a01481 	lsl	r1, r1, #9
   322dc:	e5832028 	str	r2, [r3, #40]	; 0x28
   322e0:	e583101c 	str	r1, [r3, #28]
   322e4:	e12fff1e 	bx	lr
   322e8:	20200000 	.word	0x20200000

000322ec <BusRawAccess::muxClear()>:
   322ec:	e5903004 	ldr	r3, [r0, #4]
   322f0:	e3530011 	cmp	r3, #17
   322f4:	03a02c0e 	moveq	r2, #3584	; 0xe00
   322f8:	13a01801 	movne	r1, #65536	; 0x10000
   322fc:	13a02c0e 	movne	r2, #3584	; 0xe00
   32300:	159f300c 	ldrne	r3, [pc, #12]	; 32314 <BusRawAccess::muxClear()+0x28>
   32304:	059f3008 	ldreq	r3, [pc, #8]	; 32314 <BusRawAccess::muxClear()+0x28>
   32308:	1583101c 	strne	r1, [r3, #28]
   3230c:	e5832028 	str	r2, [r3, #40]	; 0x28
   32310:	e12fff1e 	bx	lr
   32314:	20200000 	.word	0x20200000

00032318 <BusRawAccess::muxDataBusOutputEnable()>:
   32318:	e5903004 	ldr	r3, [r0, #4]
   3231c:	e92d4010 	push	{r4, lr}
   32320:	e3530011 	cmp	r3, #17
   32324:	e1a04000 	mov	r4, r0
   32328:	0a000011 	beq	32374 <BusRawAccess::muxDataBusOutputEnable()+0x5c>
   3232c:	e3a00c0e 	mov	r0, #3584	; 0xe00
   32330:	e3a01c02 	mov	r1, #512	; 0x200
   32334:	e3a02801 	mov	r2, #65536	; 0x10000
   32338:	e59f304c 	ldr	r3, [pc, #76]	; 3238c <BusRawAccess::muxDataBusOutputEnable()+0x74>
   3233c:	e5830028 	str	r0, [r3, #40]	; 0x28
   32340:	e583101c 	str	r1, [r3, #28]
   32344:	e5832028 	str	r2, [r3, #40]	; 0x28
   32348:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   3234c:	eb0034d7 	bl	3f6b0 <lowlev_cycleDelay>
   32350:	e5943004 	ldr	r3, [r4, #4]
   32354:	e3530011 	cmp	r3, #17
   32358:	03a02c0e 	moveq	r2, #3584	; 0xe00
   3235c:	13a02801 	movne	r2, #65536	; 0x10000
   32360:	059f3024 	ldreq	r3, [pc, #36]	; 3238c <BusRawAccess::muxDataBusOutputEnable()+0x74>
   32364:	159f3020 	ldrne	r3, [pc, #32]	; 3238c <BusRawAccess::muxDataBusOutputEnable()+0x74>
   32368:	05832028 	streq	r2, [r3, #40]	; 0x28
   3236c:	1583201c 	strne	r2, [r3, #28]
   32370:	e8bd8010 	pop	{r4, pc}
   32374:	e3a01c0e 	mov	r1, #3584	; 0xe00
   32378:	e3a02c02 	mov	r2, #512	; 0x200
   3237c:	e59f3008 	ldr	r3, [pc, #8]	; 3238c <BusRawAccess::muxDataBusOutputEnable()+0x74>
   32380:	e5831028 	str	r1, [r3, #40]	; 0x28
   32384:	e583201c 	str	r2, [r3, #28]
   32388:	eaffffee 	b	32348 <BusRawAccess::muxDataBusOutputEnable()+0x30>
   3238c:	20200000 	.word	0x20200000

00032390 <BusRawAccess::muxDataBusOutputStart()>:
   32390:	e5903004 	ldr	r3, [r0, #4]
   32394:	e3530011 	cmp	r3, #17
   32398:	0a000007 	beq	323bc <BusRawAccess::muxDataBusOutputStart()+0x2c>
   3239c:	e3a00c0e 	mov	r0, #3584	; 0xe00
   323a0:	e3a01c02 	mov	r1, #512	; 0x200
   323a4:	e3a02801 	mov	r2, #65536	; 0x10000
   323a8:	e59f3024 	ldr	r3, [pc, #36]	; 323d4 <BusRawAccess::muxDataBusOutputStart()+0x44>
   323ac:	e5830028 	str	r0, [r3, #40]	; 0x28
   323b0:	e583101c 	str	r1, [r3, #28]
   323b4:	e5832028 	str	r2, [r3, #40]	; 0x28
   323b8:	e12fff1e 	bx	lr
   323bc:	e3a01c0e 	mov	r1, #3584	; 0xe00
   323c0:	e3a02c02 	mov	r2, #512	; 0x200
   323c4:	e59f3008 	ldr	r3, [pc, #8]	; 323d4 <BusRawAccess::muxDataBusOutputStart()+0x44>
   323c8:	e5831028 	str	r1, [r3, #40]	; 0x28
   323cc:	e583201c 	str	r2, [r3, #28]
   323d0:	e12fff1e 	bx	lr
   323d4:	20200000 	.word	0x20200000

000323d8 <BusRawAccess::muxDataBusOutputFinish()>:
   323d8:	e5903004 	ldr	r3, [r0, #4]
   323dc:	e3530011 	cmp	r3, #17
   323e0:	03a02c0e 	moveq	r2, #3584	; 0xe00
   323e4:	13a02801 	movne	r2, #65536	; 0x10000
   323e8:	059f300c 	ldreq	r3, [pc, #12]	; 323fc <BusRawAccess::muxDataBusOutputFinish()+0x24>
   323ec:	159f3008 	ldrne	r3, [pc, #8]	; 323fc <BusRawAccess::muxDataBusOutputFinish()+0x24>
   323f0:	05832028 	streq	r2, [r3, #40]	; 0x28
   323f4:	1583201c 	strne	r2, [r3, #28]
   323f8:	e12fff1e 	bx	lr
   323fc:	20200000 	.word	0x20200000

00032400 <BusRawAccess::muxClearLowAddr()>:
   32400:	e5903004 	ldr	r3, [r0, #4]
   32404:	e92d4070 	push	{r4, r5, r6, lr}
   32408:	e3530011 	cmp	r3, #17
   3240c:	0a00000a 	beq	3243c <BusRawAccess::muxClearLowAddr()+0x3c>
   32410:	e3a02c0e 	mov	r2, #3584	; 0xe00
   32414:	e3a03b02 	mov	r3, #2048	; 0x800
   32418:	e3a05801 	mov	r5, #65536	; 0x10000
   3241c:	e59f403c 	ldr	r4, [pc, #60]	; 32460 <BusRawAccess::muxClearLowAddr()+0x60>
   32420:	e3a00f7d 	mov	r0, #500	; 0x1f4
   32424:	e5842028 	str	r2, [r4, #40]	; 0x28
   32428:	e584301c 	str	r3, [r4, #28]
   3242c:	e5845028 	str	r5, [r4, #40]	; 0x28
   32430:	eb00349e 	bl	3f6b0 <lowlev_cycleDelay>
   32434:	e584501c 	str	r5, [r4, #28]
   32438:	e8bd8070 	pop	{r4, r5, r6, pc}
   3243c:	e3a05c0e 	mov	r5, #3584	; 0xe00
   32440:	e3a03b02 	mov	r3, #2048	; 0x800
   32444:	e59f4014 	ldr	r4, [pc, #20]	; 32460 <BusRawAccess::muxClearLowAddr()+0x60>
   32448:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   3244c:	e5845028 	str	r5, [r4, #40]	; 0x28
   32450:	e584301c 	str	r3, [r4, #28]
   32454:	eb003495 	bl	3f6b0 <lowlev_cycleDelay>
   32458:	e5845028 	str	r5, [r4, #40]	; 0x28
   3245c:	e8bd8070 	pop	{r4, r5, r6, pc}
   32460:	20200000 	.word	0x20200000

00032464 <TargetClockGenerator::TargetClockGenerator()>:
   32464:	e3a02000 	mov	r2, #0
   32468:	e3e0c000 	mvn	ip, #0
   3246c:	e59f1010 	ldr	r1, [pc, #16]	; 32484 <TargetClockGenerator::TargetClockGenerator()+0x20>
   32470:	e580c008 	str	ip, [r0, #8]
   32474:	e5801000 	str	r1, [r0]
   32478:	e5c02004 	strb	r2, [r0, #4]
   3247c:	e580200c 	str	r2, [r0, #12]
   32480:	e12fff1e 	bx	lr
   32484:	000f4240 	.word	0x000f4240

00032488 <TargetClockGenerator::enable(bool)>:
   32488:	e5d03004 	ldrb	r3, [r0, #4]
   3248c:	e1530001 	cmp	r3, r1
   32490:	012fff1e 	bxeq	lr
   32494:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   32498:	e59f5114 	ldr	r5, [pc, #276]	; 325b4 <TargetClockGenerator::enable(bool)+0x12c>
   3249c:	e59f3114 	ldr	r3, [pc, #276]	; 325b8 <TargetClockGenerator::enable(bool)+0x130>
   324a0:	e5952070 	ldr	r2, [r5, #112]	; 0x70
   324a4:	e3510000 	cmp	r1, #0
   324a8:	e0033002 	and	r3, r3, r2
   324ac:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   324b0:	e5853070 	str	r3, [r5, #112]	; 0x70
   324b4:	e1a06000 	mov	r6, r0
   324b8:	e24dd00c 	sub	sp, sp, #12
   324bc:	05c01004 	strbeq	r1, [r0, #4]
   324c0:	0a000030 	beq	32588 <TargetClockGenerator::enable(bool)+0x100>
   324c4:	e5903008 	ldr	r3, [r0, #8]
   324c8:	e590200c 	ldr	r2, [r0, #12]
   324cc:	e3730001 	cmn	r3, #1
   324d0:	0a00002e 	beq	32590 <TargetClockGenerator::enable(bool)+0x108>
   324d4:	e3520000 	cmp	r2, #0
   324d8:	13a04064 	movne	r4, #100	; 0x64
   324dc:	1a000004 	bne	324f4 <TargetClockGenerator::enable(bool)+0x6c>
   324e0:	ea00002a 	b	32590 <TargetClockGenerator::enable(bool)+0x108>
   324e4:	e3a00001 	mov	r0, #1
   324e8:	ebffee49 	bl	2de14 <microsDelay>
   324ec:	e2544001 	subs	r4, r4, #1
   324f0:	0a000002 	beq	32500 <TargetClockGenerator::enable(bool)+0x78>
   324f4:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   324f8:	e3130080 	tst	r3, #128	; 0x80
   324fc:	1afffff8 	bne	324e4 <TargetClockGenerator::enable(bool)+0x5c>
   32500:	e5d6100c 	ldrb	r1, [r6, #12]
   32504:	e5d60008 	ldrb	r0, [r6, #8]
   32508:	eb0033fc 	bl	3f500 <pinMode>
   3250c:	e5960000 	ldr	r0, [r6]
   32510:	e59f20a4 	ldr	r2, [pc, #164]	; 325bc <TargetClockGenerator::enable(bool)+0x134>
   32514:	e59f10a4 	ldr	r1, [pc, #164]	; 325c0 <TargetClockGenerator::enable(bool)+0x138>
   32518:	e1500002 	cmp	r0, r2
   3251c:	e59f20a0 	ldr	r2, [pc, #160]	; 325c4 <TargetClockGenerator::enable(bool)+0x13c>
   32520:	e59f30a0 	ldr	r3, [pc, #160]	; 325c8 <TargetClockGenerator::enable(bool)+0x140>
   32524:	91a03001 	movls	r3, r1
   32528:	e59f709c 	ldr	r7, [pc, #156]	; 325cc <TargetClockGenerator::enable(bool)+0x144>
   3252c:	91a07002 	movls	r7, r2
   32530:	e59f407c 	ldr	r4, [pc, #124]	; 325b4 <TargetClockGenerator::enable(bool)+0x12c>
   32534:	e59f2094 	ldr	r2, [pc, #148]	; 325d0 <TargetClockGenerator::enable(bool)+0x148>
   32538:	e5843070 	str	r3, [r4, #112]	; 0x70
   3253c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32540:	e59f508c 	ldr	r5, [pc, #140]	; 325d4 <TargetClockGenerator::enable(bool)+0x14c>
   32544:	91a05002 	movls	r5, r2
   32548:	ebffee31 	bl	2de14 <microsDelay>
   3254c:	e5961000 	ldr	r1, [r6]
   32550:	e1a00007 	mov	r0, r7
   32554:	eb003101 	bl	3e960 <__udivsi3>
   32558:	e1a03000 	mov	r3, r0
   3255c:	e59f2074 	ldr	r2, [pc, #116]	; 325d8 <TargetClockGenerator::enable(bool)+0x150>
   32560:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32564:	e1530002 	cmp	r3, r2
   32568:	21a03002 	movcs	r3, r2
   3256c:	e1a03603 	lsl	r3, r3, #12
   32570:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32574:	e5843074 	str	r3, [r4, #116]	; 0x74
   32578:	ebffee25 	bl	2de14 <microsDelay>
   3257c:	e3a03001 	mov	r3, #1
   32580:	e5845070 	str	r5, [r4, #112]	; 0x70
   32584:	e5c63004 	strb	r3, [r6, #4]
   32588:	e28dd00c 	add	sp, sp, #12
   3258c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   32590:	e3a01000 	mov	r1, #0
   32594:	e58d2000 	str	r2, [sp]
   32598:	e59f003c 	ldr	r0, [pc, #60]	; 325dc <TargetClockGenerator::enable(bool)+0x154>
   3259c:	e5c61004 	strb	r1, [r6, #4]
   325a0:	e59f2038 	ldr	r2, [pc, #56]	; 325e0 <TargetClockGenerator::enable(bool)+0x158>
   325a4:	e3a01001 	mov	r1, #1
   325a8:	ebfff216 	bl	2ee08 <LogWrite>
   325ac:	e28dd00c 	add	sp, sp, #12
   325b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   325b4:	20101000 	.word	0x20101000
   325b8:	00000f0f 	.word	0x00000f0f
   325bc:	0003d08f 	.word	0x0003d08f
   325c0:	5a000001 	.word	0x5a000001
   325c4:	0124f800 	.word	0x0124f800
   325c8:	5a000006 	.word	0x5a000006
   325cc:	1dcd6500 	.word	0x1dcd6500
   325d0:	5a000011 	.word	0x5a000011
   325d4:	5a000016 	.word	0x5a000016
   325d8:	00000fff 	.word	0x00000fff
   325dc:	00048254 	.word	0x00048254
   325e0:	00048234 	.word	0x00048234

000325e4 <TargetClockGenerator::setup(int)>:
   325e4:	e3710001 	cmn	r1, #1
   325e8:	13510004 	cmpne	r1, #4
   325ec:	03a03004 	moveq	r3, #4
   325f0:	e92d4070 	push	{r4, r5, r6, lr}
   325f4:	03a05001 	moveq	r5, #1
   325f8:	13a05000 	movne	r5, #0
   325fc:	e1a06000 	mov	r6, r0
   32600:	01a04003 	moveq	r4, r3
   32604:	1a000007 	bne	32628 <TargetClockGenerator::setup(int)+0x44>
   32608:	e5d65004 	ldrb	r5, [r6, #4]
   3260c:	e586300c 	str	r3, [r6, #12]
   32610:	e3550000 	cmp	r5, #0
   32614:	03a05001 	moveq	r5, #1
   32618:	05864008 	streq	r4, [r6, #8]
   3261c:	1a00000a 	bne	3264c <TargetClockGenerator::setup(int)+0x68>
   32620:	e1a00005 	mov	r0, r5
   32624:	e8bd8070 	pop	{r4, r5, r6, pc}
   32628:	e3510014 	cmp	r1, #20
   3262c:	e1a04001 	mov	r4, r1
   32630:	0a00000e 	beq	32670 <TargetClockGenerator::setup(int)+0x8c>
   32634:	e3510020 	cmp	r1, #32
   32638:	0a000001 	beq	32644 <TargetClockGenerator::setup(int)+0x60>
   3263c:	e3510022 	cmp	r1, #34	; 0x22
   32640:	1afffff6 	bne	32620 <TargetClockGenerator::setup(int)+0x3c>
   32644:	e3a03004 	mov	r3, #4
   32648:	eaffffee 	b	32608 <TargetClockGenerator::setup(int)+0x24>
   3264c:	e1a00006 	mov	r0, r6
   32650:	e3a01000 	mov	r1, #0
   32654:	ebffff8b 	bl	32488 <TargetClockGenerator::enable(bool)>
   32658:	e1a00006 	mov	r0, r6
   3265c:	e3a01001 	mov	r1, #1
   32660:	e5864008 	str	r4, [r6, #8]
   32664:	ebffff87 	bl	32488 <TargetClockGenerator::enable(bool)>
   32668:	e1a00005 	mov	r0, r5
   3266c:	e8bd8070 	pop	{r4, r5, r6, pc}
   32670:	e3a03009 	mov	r3, #9
   32674:	eaffffe3 	b	32608 <TargetClockGenerator::setup(int)+0x24>

00032678 <TargetClockGenerator::setFreqHz(unsigned long)>:
   32678:	e5d03004 	ldrb	r3, [r0, #4]
   3267c:	e92d4070 	push	{r4, r5, r6, lr}
   32680:	e3530000 	cmp	r3, #0
   32684:	e1a04000 	mov	r4, r0
   32688:	e1a05001 	mov	r5, r1
   3268c:	1a000001 	bne	32698 <TargetClockGenerator::setFreqHz(unsigned long)+0x20>
   32690:	e5841000 	str	r1, [r4]
   32694:	e8bd8070 	pop	{r4, r5, r6, pc}
   32698:	e3a01000 	mov	r1, #0
   3269c:	ebffff79 	bl	32488 <TargetClockGenerator::enable(bool)>
   326a0:	e1a00004 	mov	r0, r4
   326a4:	e5845000 	str	r5, [r4]
   326a8:	e3a01001 	mov	r1, #1
   326ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   326b0:	eaffff74 	b	32488 <TargetClockGenerator::enable(bool)>

000326b4 <TargetControl::TargetControl(BusControl&)>:
   326b4:	e92d4070 	push	{r4, r5, r6, lr}
   326b8:	e1a06000 	mov	r6, r0
   326bc:	e3a05000 	mov	r5, #0
   326c0:	e2864601 	add	r4, r6, #1048576	; 0x100000
   326c4:	e4801004 	str	r1, [r0], #4
   326c8:	eb000584 	bl	33ce0 <TargetProgrammer::TargetProgrammer()>
   326cc:	e1a00006 	mov	r0, r6
   326d0:	e58454c4 	str	r5, [r4, #1220]	; 0x4c4
   326d4:	e58454c0 	str	r5, [r4, #1216]	; 0x4c0
   326d8:	e58454bc 	str	r5, [r4, #1212]	; 0x4bc
   326dc:	e58454b8 	str	r5, [r4, #1208]	; 0x4b8
   326e0:	e58454b4 	str	r5, [r4, #1204]	; 0x4b4
   326e4:	e58454b0 	str	r5, [r4, #1200]	; 0x4b0
   326e8:	e58454ac 	str	r5, [r4, #1196]	; 0x4ac
   326ec:	e58454a8 	str	r5, [r4, #1192]	; 0x4a8
   326f0:	e58454d8 	str	r5, [r4, #1240]	; 0x4d8
   326f4:	e58454d4 	str	r5, [r4, #1236]	; 0x4d4
   326f8:	e58454d0 	str	r5, [r4, #1232]	; 0x4d0
   326fc:	e58454cc 	str	r5, [r4, #1228]	; 0x4cc
   32700:	e58454c8 	str	r5, [r4, #1224]	; 0x4c8
   32704:	e58454ec 	str	r5, [r4, #1260]	; 0x4ec
   32708:	e58454e8 	str	r5, [r4, #1256]	; 0x4e8
   3270c:	e58454e4 	str	r5, [r4, #1252]	; 0x4e4
   32710:	e58454e0 	str	r5, [r4, #1248]	; 0x4e0
   32714:	e58454dc 	str	r5, [r4, #1244]	; 0x4dc
   32718:	eb0002b8 	bl	33200 <TargetControl::cycleClear()>
   3271c:	e1a00006 	mov	r0, r6
   32720:	eb000157 	bl	32c84 <TargetControl::programmingClear()>
   32724:	e1a02005 	mov	r2, r5
   32728:	e59f3034 	ldr	r3, [pc, #52]	; 32764 <TargetControl::TargetControl(BusControl&)+0xb0>
   3272c:	e59f1034 	ldr	r1, [pc, #52]	; 32768 <TargetControl::TargetControl(BusControl&)+0xb4>
   32730:	e5c45378 	strb	r5, [r4, #888]	; 0x378
   32734:	e584549c 	str	r5, [r4, #1180]	; 0x49c
   32738:	e58454a0 	str	r5, [r4, #1184]	; 0x4a0
   3273c:	e0863003 	add	r3, r6, r3
   32740:	e0861001 	add	r1, r6, r1
   32744:	e5e32001 	strb	r2, [r3, #1]!
   32748:	e1530001 	cmp	r3, r1
   3274c:	1afffffc 	bne	32744 <TargetControl::TargetControl(BusControl&)+0x90>
   32750:	e5c424a4 	strb	r2, [r4, #1188]	; 0x4a4
   32754:	e1a00006 	mov	r0, r6
   32758:	e5c4239a 	strb	r2, [r4, #922]	; 0x39a
   3275c:	e5c424a5 	strb	r2, [r4, #1189]	; 0x4a5
   32760:	e8bd8070 	pop	{r4, r5, r6, pc}
   32764:	0010039a 	.word	0x0010039a
   32768:	0010049a 	.word	0x0010049a

0003276c <TargetControl::init()>:
   3276c:	e3a03000 	mov	r3, #0
   32770:	e2800601 	add	r0, r0, #1048576	; 0x100000
   32774:	e5c034a4 	strb	r3, [r0, #1188]	; 0x4a4
   32778:	e5c0339a 	strb	r3, [r0, #922]	; 0x39a
   3277c:	e5c034a5 	strb	r3, [r0, #1189]	; 0x4a5
   32780:	e12fff1e 	bx	lr

00032784 <TargetControl::service(bool)>:
   32784:	ea00049f 	b	33a08 <TargetControl::cycleService(bool)>

00032788 <TargetControl::suspend(bool)>:
   32788:	e92d4070 	push	{r4, r5, r6, lr}
   3278c:	e1a04000 	mov	r4, r0
   32790:	e1a05001 	mov	r5, r1
   32794:	e2844601 	add	r4, r4, #1048576	; 0x100000
   32798:	eb0002a5 	bl	33234 <TargetControl::cycleSuspend(bool)>
   3279c:	e5c45378 	strb	r5, [r4, #888]	; 0x378
   327a0:	e8bd8070 	pop	{r4, r5, r6, pc}

000327a4 <TargetControl::debuggerBreak()>:
   327a4:	e92d4070 	push	{r4, r5, r6, lr}
   327a8:	e2806601 	add	r6, r0, #1048576	; 0x100000
   327ac:	e5d614a4 	ldrb	r1, [r6, #1188]	; 0x4a4
   327b0:	e1a04000 	mov	r4, r0
   327b4:	e3510001 	cmp	r1, #1
   327b8:	0a00001d 	beq	32834 <TargetControl::debuggerBreak()+0x90>
   327bc:	e3a01001 	mov	r1, #1
   327c0:	e3a02000 	mov	r2, #0
   327c4:	e5943000 	ldr	r3, [r4]
   327c8:	e59f0094 	ldr	r0, [pc, #148]	; 32864 <TargetControl::debuggerBreak()+0xc0>
   327cc:	e5c614a4 	strb	r1, [r6, #1188]	; 0x4a4
   327d0:	e0830000 	add	r0, r3, r0
   327d4:	e5c624a5 	strb	r2, [r6, #1189]	; 0x4a5
   327d8:	ebfffdb7 	bl	31ebc <BusRawAccess::waitConfigDebugger(bool, bool)>
   327dc:	ebffed85 	bl	2ddf8 <millis>
   327e0:	e1a05000 	mov	r5, r0
   327e4:	ea000008 	b	3280c <TargetControl::debuggerBreak()+0x68>
   327e8:	e5940000 	ldr	r0, [r4]
   327ec:	e3a01001 	mov	r1, #1
   327f0:	e2800014 	add	r0, r0, #20
   327f4:	eb000483 	bl	33a08 <TargetControl::cycleService(bool)>
   327f8:	e5943000 	ldr	r3, [r4]
   327fc:	e2833601 	add	r3, r3, #1048576	; 0x100000
   32800:	e5d303ad 	ldrb	r0, [r3, #941]	; 0x3ad
   32804:	e3500000 	cmp	r0, #0
   32808:	18bd8070 	popne	{r4, r5, r6, pc}
   3280c:	ebffed79 	bl	2ddf8 <millis>
   32810:	e3a02064 	mov	r2, #100	; 0x64
   32814:	e1a01005 	mov	r1, r5
   32818:	ebffed93 	bl	2de6c <isTimeout>
   3281c:	e3500000 	cmp	r0, #0
   32820:	0afffff0 	beq	327e8 <TargetControl::debuggerBreak()+0x44>
   32824:	e5943000 	ldr	r3, [r4]
   32828:	e2833601 	add	r3, r3, #1048576	; 0x100000
   3282c:	e5d303ad 	ldrb	r0, [r3, #941]	; 0x3ad
   32830:	e8bd8070 	pop	{r4, r5, r6, pc}
   32834:	e3a03000 	mov	r3, #0
   32838:	e6ef5071 	uxtb	r5, r1
   3283c:	e1a01005 	mov	r1, r5
   32840:	e5c634a4 	strb	r3, [r6, #1188]	; 0x4a4
   32844:	eb00046f 	bl	33a08 <TargetControl::cycleService(bool)>
   32848:	e1a01005 	mov	r1, r5
   3284c:	e1a00004 	mov	r0, r4
   32850:	eb00046c 	bl	33a08 <TargetControl::cycleService(bool)>
   32854:	e1a01005 	mov	r1, r5
   32858:	e1a00004 	mov	r0, r4
   3285c:	eb000469 	bl	33a08 <TargetControl::cycleService(bool)>
   32860:	eaffffd5 	b	327bc <TargetControl::debuggerBreak()+0x18>
   32864:	001106cc 	.word	0x001106cc

00032868 <TargetControl::debuggerContinue()>:
   32868:	e92d4010 	push	{r4, lr}
   3286c:	e1a04000 	mov	r4, r0
   32870:	e3a02000 	mov	r2, #0
   32874:	e5901000 	ldr	r1, [r0]
   32878:	e59f0034 	ldr	r0, [pc, #52]	; 328b4 <TargetControl::debuggerContinue()+0x4c>
   3287c:	e2843601 	add	r3, r4, #1048576	; 0x100000
   32880:	e0810000 	add	r0, r1, r0
   32884:	e5c324a4 	strb	r2, [r3, #1188]	; 0x4a4
   32888:	e1a01002 	mov	r1, r2
   3288c:	ebfffd8a 	bl	31ebc <BusRawAccess::waitConfigDebugger(bool, bool)>
   32890:	e5940000 	ldr	r0, [r4]
   32894:	e3a01001 	mov	r1, #1
   32898:	e2800014 	add	r0, r0, #20
   3289c:	eb000459 	bl	33a08 <TargetControl::cycleService(bool)>
   328a0:	e5940000 	ldr	r0, [r4]
   328a4:	e3a01001 	mov	r1, #1
   328a8:	e8bd4010 	pop	{r4, lr}
   328ac:	e2800014 	add	r0, r0, #20
   328b0:	ea000454 	b	33a08 <TargetControl::cycleService(bool)>
   328b4:	001106cc 	.word	0x001106cc

000328b8 <TargetControl::debuggerStepIn()>:
   328b8:	e2803601 	add	r3, r0, #1048576	; 0x100000
   328bc:	e5d324a4 	ldrb	r2, [r3, #1188]	; 0x4a4
   328c0:	e3520000 	cmp	r2, #0
   328c4:	1a000000 	bne	328cc <TargetControl::debuggerStepIn()+0x14>
   328c8:	eaffffb5 	b	327a4 <TargetControl::debuggerBreak()>
   328cc:	e3a02001 	mov	r2, #1
   328d0:	e92d4070 	push	{r4, r5, r6, lr}
   328d4:	e5c324a5 	strb	r2, [r3, #1189]	; 0x4a5
   328d8:	e1a04000 	mov	r4, r0
   328dc:	ebffed45 	bl	2ddf8 <millis>
   328e0:	e1a05000 	mov	r5, r0
   328e4:	ea000008 	b	3290c <TargetControl::debuggerStepIn()+0x54>
   328e8:	e5940000 	ldr	r0, [r4]
   328ec:	e3a01001 	mov	r1, #1
   328f0:	e2800014 	add	r0, r0, #20
   328f4:	eb000443 	bl	33a08 <TargetControl::cycleService(bool)>
   328f8:	e5943000 	ldr	r3, [r4]
   328fc:	e2833601 	add	r3, r3, #1048576	; 0x100000
   32900:	e5d303ad 	ldrb	r0, [r3, #941]	; 0x3ad
   32904:	e3500000 	cmp	r0, #0
   32908:	18bd8070 	popne	{r4, r5, r6, pc}
   3290c:	ebffed39 	bl	2ddf8 <millis>
   32910:	e3a02064 	mov	r2, #100	; 0x64
   32914:	e1a01005 	mov	r1, r5
   32918:	ebffed53 	bl	2de6c <isTimeout>
   3291c:	e3500000 	cmp	r0, #0
   32920:	0afffff0 	beq	328e8 <TargetControl::debuggerStepIn()+0x30>
   32924:	e5943000 	ldr	r3, [r4]
   32928:	e2833601 	add	r3, r3, #1048576	; 0x100000
   3292c:	e5d303ad 	ldrb	r0, [r3, #941]	; 0x3ad
   32930:	e8bd8070 	pop	{r4, r5, r6, pc}

00032934 <TargetControl::targetReset()>:
   32934:	e92d4010 	push	{r4, lr}
   32938:	e1a04000 	mov	r4, r0
   3293c:	ebffffc9 	bl	32868 <TargetControl::debuggerContinue()>
   32940:	e5943000 	ldr	r3, [r4]
   32944:	e59f0010 	ldr	r0, [pc, #16]	; 3295c <TargetControl::targetReset()+0x28>
   32948:	e2832811 	add	r2, r3, #1114112	; 0x110000
   3294c:	e59216e4 	ldr	r1, [r2, #1764]	; 0x6e4
   32950:	e0830000 	add	r0, r3, r0
   32954:	e8bd4010 	pop	{r4, lr}
   32958:	eafffc80 	b	31b60 <BusRawAccess::targetReset(unsigned long)>
   3295c:	001106cc 	.word	0x001106cc

00032960 <TargetControl::getRegsFormatted(char*, int)>:
   32960:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   32964:	e1a05001 	mov	r5, r1
   32968:	e1a06002 	mov	r6, r2
   3296c:	e2804601 	add	r4, r0, #1048576	; 0x100000
   32970:	e59434c4 	ldr	r3, [r4, #1220]	; 0x4c4
   32974:	e24dd0ec 	sub	sp, sp, #236	; 0xec
   32978:	e58d3018 	str	r3, [sp, #24]
   3297c:	e59434c0 	ldr	r3, [r4, #1216]	; 0x4c0
   32980:	e3a010c8 	mov	r1, #200	; 0xc8
   32984:	e58d3014 	str	r3, [sp, #20]
   32988:	e59434b4 	ldr	r3, [r4, #1204]	; 0x4b4
   3298c:	e59f21d8 	ldr	r2, [pc, #472]	; 32b6c <TargetControl::getRegsFormatted(char*, int)+0x20c>
   32990:	e58d3010 	str	r3, [sp, #16]
   32994:	e59434b0 	ldr	r3, [r4, #1200]	; 0x4b0
   32998:	e28d0020 	add	r0, sp, #32
   3299c:	e58d300c 	str	r3, [sp, #12]
   329a0:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
   329a4:	e58d3008 	str	r3, [sp, #8]
   329a8:	e59434b8 	ldr	r3, [r4, #1208]	; 0x4b8
   329ac:	e58d3004 	str	r3, [sp, #4]
   329b0:	e59434ac 	ldr	r3, [r4, #1196]	; 0x4ac
   329b4:	e58d3000 	str	r3, [sp]
   329b8:	e59434a8 	ldr	r3, [r4, #1192]	; 0x4a8
   329bc:	ebffedb2 	bl	2e08c <snprintf>
   329c0:	e1a02006 	mov	r2, r6
   329c4:	e28d1020 	add	r1, sp, #32
   329c8:	e1a00005 	mov	r0, r5
   329cc:	ebffed42 	bl	2dedc <strlcpy>
   329d0:	e59434e0 	ldr	r3, [r4, #1248]	; 0x4e0
   329d4:	e3a010c8 	mov	r1, #200	; 0xc8
   329d8:	e58d3010 	str	r3, [sp, #16]
   329dc:	e59434dc 	ldr	r3, [r4, #1244]	; 0x4dc
   329e0:	e59f2188 	ldr	r2, [pc, #392]	; 32b70 <TargetControl::getRegsFormatted(char*, int)+0x210>
   329e4:	e58d300c 	str	r3, [sp, #12]
   329e8:	e59434cc 	ldr	r3, [r4, #1228]	; 0x4cc
   329ec:	e28d0020 	add	r0, sp, #32
   329f0:	e58d3008 	str	r3, [sp, #8]
   329f4:	e59434c8 	ldr	r3, [r4, #1224]	; 0x4c8
   329f8:	e58d3004 	str	r3, [sp, #4]
   329fc:	e59434d0 	ldr	r3, [r4, #1232]	; 0x4d0
   32a00:	e58d3000 	str	r3, [sp]
   32a04:	e59434d4 	ldr	r3, [r4, #1236]	; 0x4d4
   32a08:	ebffed9f 	bl	2e08c <snprintf>
   32a0c:	e28d1020 	add	r1, sp, #32
   32a10:	e1a02006 	mov	r2, r6
   32a14:	e1a00005 	mov	r0, r5
   32a18:	ebffed4b 	bl	2df4c <strlcat>
   32a1c:	e59424bc 	ldr	r2, [r4, #1212]	; 0x4bc
   32a20:	e28d0020 	add	r0, sp, #32
   32a24:	e3120080 	tst	r2, #128	; 0x80
   32a28:	13a03053 	movne	r3, #83	; 0x53
   32a2c:	03a0302d 	moveq	r3, #45	; 0x2d
   32a30:	e3120040 	tst	r2, #64	; 0x40
   32a34:	13a0705a 	movne	r7, #90	; 0x5a
   32a38:	03a0702d 	moveq	r7, #45	; 0x2d
   32a3c:	e3120010 	tst	r2, #16
   32a40:	13a0e048 	movne	lr, #72	; 0x48
   32a44:	03a0e02d 	moveq	lr, #45	; 0x2d
   32a48:	e3120004 	tst	r2, #4
   32a4c:	13a0c050 	movne	ip, #80	; 0x50
   32a50:	03a0c02d 	moveq	ip, #45	; 0x2d
   32a54:	e3120002 	tst	r2, #2
   32a58:	13a0104e 	movne	r1, #78	; 0x4e
   32a5c:	03a0102d 	moveq	r1, #45	; 0x2d
   32a60:	e3120001 	tst	r2, #1
   32a64:	13a02043 	movne	r2, #67	; 0x43
   32a68:	03a0202d 	moveq	r2, #45	; 0x2d
   32a6c:	e88d4080 	stm	sp, {r7, lr}
   32a70:	e58dc008 	str	ip, [sp, #8]
   32a74:	e58d100c 	str	r1, [sp, #12]
   32a78:	e58d2010 	str	r2, [sp, #16]
   32a7c:	e3a010c8 	mov	r1, #200	; 0xc8
   32a80:	e59f20ec 	ldr	r2, [pc, #236]	; 32b74 <TargetControl::getRegsFormatted(char*, int)+0x214>
   32a84:	ebffed80 	bl	2e08c <snprintf>
   32a88:	e28d1020 	add	r1, sp, #32
   32a8c:	e1a02006 	mov	r2, r6
   32a90:	e1a00005 	mov	r0, r5
   32a94:	ebffed2c 	bl	2df4c <strlcat>
   32a98:	e59424d4 	ldr	r2, [r4, #1236]	; 0x4d4
   32a9c:	e28d0020 	add	r0, sp, #32
   32aa0:	e3120080 	tst	r2, #128	; 0x80
   32aa4:	13a03053 	movne	r3, #83	; 0x53
   32aa8:	03a0302d 	moveq	r3, #45	; 0x2d
   32aac:	e3120040 	tst	r2, #64	; 0x40
   32ab0:	13a0705a 	movne	r7, #90	; 0x5a
   32ab4:	03a0702d 	moveq	r7, #45	; 0x2d
   32ab8:	e3120010 	tst	r2, #16
   32abc:	13a0e048 	movne	lr, #72	; 0x48
   32ac0:	03a0e02d 	moveq	lr, #45	; 0x2d
   32ac4:	e3120004 	tst	r2, #4
   32ac8:	13a0c050 	movne	ip, #80	; 0x50
   32acc:	03a0c02d 	moveq	ip, #45	; 0x2d
   32ad0:	e3120002 	tst	r2, #2
   32ad4:	13a0104e 	movne	r1, #78	; 0x4e
   32ad8:	03a0102d 	moveq	r1, #45	; 0x2d
   32adc:	e3120001 	tst	r2, #1
   32ae0:	13a02043 	movne	r2, #67	; 0x43
   32ae4:	03a0202d 	moveq	r2, #45	; 0x2d
   32ae8:	e88d4080 	stm	sp, {r7, lr}
   32aec:	e58dc008 	str	ip, [sp, #8]
   32af0:	e58d100c 	str	r1, [sp, #12]
   32af4:	e58d2010 	str	r2, [sp, #16]
   32af8:	e3a010c8 	mov	r1, #200	; 0xc8
   32afc:	e59f2074 	ldr	r2, [pc, #116]	; 32b78 <TargetControl::getRegsFormatted(char*, int)+0x218>
   32b00:	ebffed61 	bl	2e08c <snprintf>
   32b04:	e1a02006 	mov	r2, r6
   32b08:	e28d1020 	add	r1, sp, #32
   32b0c:	e1a00005 	mov	r0, r5
   32b10:	ebffed0d 	bl	2df4c <strlcat>
   32b14:	e59424e8 	ldr	r2, [r4, #1256]	; 0x4e8
   32b18:	e59414e4 	ldr	r1, [r4, #1252]	; 0x4e4
   32b1c:	e3520000 	cmp	r2, #0
   32b20:	03a02020 	moveq	r2, #32
   32b24:	13a02031 	movne	r2, #49	; 0x31
   32b28:	01a00002 	moveq	r0, r2
   32b2c:	13a00032 	movne	r0, #50	; 0x32
   32b30:	e594c4ec 	ldr	ip, [r4, #1260]	; 0x4ec
   32b34:	e59434d8 	ldr	r3, [r4, #1240]	; 0x4d8
   32b38:	e88d0006 	stm	sp, {r1, r2}
   32b3c:	e58dc00c 	str	ip, [sp, #12]
   32b40:	e58d0008 	str	r0, [sp, #8]
   32b44:	e3a010c8 	mov	r1, #200	; 0xc8
   32b48:	e59f202c 	ldr	r2, [pc, #44]	; 32b7c <TargetControl::getRegsFormatted(char*, int)+0x21c>
   32b4c:	e28d0020 	add	r0, sp, #32
   32b50:	ebffed4d 	bl	2e08c <snprintf>
   32b54:	e1a02006 	mov	r2, r6
   32b58:	e1a00005 	mov	r0, r5
   32b5c:	e28d1020 	add	r1, sp, #32
   32b60:	ebffecf9 	bl	2df4c <strlcat>
   32b64:	e28dd0ec 	add	sp, sp, #236	; 0xec
   32b68:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   32b6c:	00048260 	.word	0x00048260
   32b70:	000482a0 	.word	0x000482a0
   32b74:	000482d4 	.word	0x000482d4
   32b78:	000482e8 	.word	0x000482e8
   32b7c:	000482fc 	.word	0x000482fc

00032b80 <TargetControl::getRegsJSON(char*, int)>:
   32b80:	e92d4070 	push	{r4, r5, r6, lr}
   32b84:	e1a05001 	mov	r5, r1
   32b88:	e1a06002 	mov	r6, r2
   32b8c:	e2804601 	add	r4, r0, #1048576	; 0x100000
   32b90:	e59434c4 	ldr	r3, [r4, #1220]	; 0x4c4
   32b94:	e24dd0e8 	sub	sp, sp, #232	; 0xe8
   32b98:	e58d3018 	str	r3, [sp, #24]
   32b9c:	e59434c0 	ldr	r3, [r4, #1216]	; 0x4c0
   32ba0:	e3a010c8 	mov	r1, #200	; 0xc8
   32ba4:	e58d3014 	str	r3, [sp, #20]
   32ba8:	e59434b4 	ldr	r3, [r4, #1204]	; 0x4b4
   32bac:	e59f20c4 	ldr	r2, [pc, #196]	; 32c78 <TargetControl::getRegsJSON(char*, int)+0xf8>
   32bb0:	e58d3010 	str	r3, [sp, #16]
   32bb4:	e59434b0 	ldr	r3, [r4, #1200]	; 0x4b0
   32bb8:	e28d0020 	add	r0, sp, #32
   32bbc:	e58d300c 	str	r3, [sp, #12]
   32bc0:	e59434bc 	ldr	r3, [r4, #1212]	; 0x4bc
   32bc4:	e58d3008 	str	r3, [sp, #8]
   32bc8:	e59434b8 	ldr	r3, [r4, #1208]	; 0x4b8
   32bcc:	e58d3004 	str	r3, [sp, #4]
   32bd0:	e59434ac 	ldr	r3, [r4, #1196]	; 0x4ac
   32bd4:	e58d3000 	str	r3, [sp]
   32bd8:	e59434a8 	ldr	r3, [r4, #1192]	; 0x4a8
   32bdc:	ebffed2a 	bl	2e08c <snprintf>
   32be0:	e1a02006 	mov	r2, r6
   32be4:	e28d1020 	add	r1, sp, #32
   32be8:	e1a00005 	mov	r0, r5
   32bec:	ebffecba 	bl	2dedc <strlcpy>
   32bf0:	e59434e0 	ldr	r3, [r4, #1248]	; 0x4e0
   32bf4:	e3a010c8 	mov	r1, #200	; 0xc8
   32bf8:	e58d3010 	str	r3, [sp, #16]
   32bfc:	e59434dc 	ldr	r3, [r4, #1244]	; 0x4dc
   32c00:	e59f2074 	ldr	r2, [pc, #116]	; 32c7c <TargetControl::getRegsJSON(char*, int)+0xfc>
   32c04:	e58d300c 	str	r3, [sp, #12]
   32c08:	e59434cc 	ldr	r3, [r4, #1228]	; 0x4cc
   32c0c:	e28d0020 	add	r0, sp, #32
   32c10:	e58d3008 	str	r3, [sp, #8]
   32c14:	e59434c8 	ldr	r3, [r4, #1224]	; 0x4c8
   32c18:	e58d3004 	str	r3, [sp, #4]
   32c1c:	e59434d0 	ldr	r3, [r4, #1232]	; 0x4d0
   32c20:	e58d3000 	str	r3, [sp]
   32c24:	e59434d4 	ldr	r3, [r4, #1236]	; 0x4d4
   32c28:	ebffed17 	bl	2e08c <snprintf>
   32c2c:	e1a02006 	mov	r2, r6
   32c30:	e28d1020 	add	r1, sp, #32
   32c34:	e1a00005 	mov	r0, r5
   32c38:	ebffecc3 	bl	2df4c <strlcat>
   32c3c:	e59434ec 	ldr	r3, [r4, #1260]	; 0x4ec
   32c40:	e3a010c8 	mov	r1, #200	; 0xc8
   32c44:	e58d3004 	str	r3, [sp, #4]
   32c48:	e59434e8 	ldr	r3, [r4, #1256]	; 0x4e8
   32c4c:	e59f202c 	ldr	r2, [pc, #44]	; 32c80 <TargetControl::getRegsJSON(char*, int)+0x100>
   32c50:	e58d3000 	str	r3, [sp]
   32c54:	e59434e4 	ldr	r3, [r4, #1252]	; 0x4e4
   32c58:	e28d0020 	add	r0, sp, #32
   32c5c:	ebffed0a 	bl	2e08c <snprintf>
   32c60:	e1a02006 	mov	r2, r6
   32c64:	e1a00005 	mov	r0, r5
   32c68:	e28d1020 	add	r1, sp, #32
   32c6c:	ebffecb6 	bl	2df4c <strlcat>
   32c70:	e28dd0e8 	add	sp, sp, #232	; 0xe8
   32c74:	e8bd8070 	pop	{r4, r5, r6, pc}
   32c78:	00048320 	.word	0x00048320
   32c7c:	00048394 	.word	0x00048394
   32c80:	000483f8 	.word	0x000483f8

00032c84 <TargetControl::programmingClear()>:
   32c84:	e3a03000 	mov	r3, #0
   32c88:	e2800601 	add	r0, r0, #1048576	; 0x100000
   32c8c:	e2802fde 	add	r2, r0, #888	; 0x378
   32c90:	e5c03379 	strb	r3, [r0, #889]	; 0x379
   32c94:	e1c230b2 	strh	r3, [r2, #2]
   32c98:	e12fff1e 	bx	lr

00032c9c <TargetControl::programmingStart(bool, bool)>:
   32c9c:	e92d4070 	push	{r4, r5, r6, lr}
   32ca0:	e1a04000 	mov	r4, r0
   32ca4:	e2800004 	add	r0, r0, #4
   32ca8:	e1a06001 	mov	r6, r1
   32cac:	e1a05002 	mov	r5, r2
   32cb0:	eb00046f 	bl	33e74 <TargetProgrammer::numMemoryBlocks()>
   32cb4:	e3500000 	cmp	r0, #0
   32cb8:	0a000005 	beq	32cd4 <TargetControl::programmingStart(bool, bool)+0x38>
   32cbc:	e3a03001 	mov	r3, #1
   32cc0:	e2840601 	add	r0, r4, #1048576	; 0x100000
   32cc4:	e5c0637a 	strb	r6, [r0, #890]	; 0x37a
   32cc8:	e5c0537b 	strb	r5, [r0, #891]	; 0x37b
   32ccc:	e5c03379 	strb	r3, [r0, #889]	; 0x379
   32cd0:	e8bd8070 	pop	{r4, r5, r6, pc}
   32cd4:	e3a01004 	mov	r1, #4
   32cd8:	e59f2008 	ldr	r2, [pc, #8]	; 32ce8 <TargetControl::programmingStart(bool, bool)+0x4c>
   32cdc:	e59f0008 	ldr	r0, [pc, #8]	; 32cec <TargetControl::programmingStart(bool, bool)+0x50>
   32ce0:	ebfff048 	bl	2ee08 <LogWrite>
   32ce4:	eafffff4 	b	32cbc <TargetControl::programmingStart(bool, bool)+0x20>
   32ce8:	00048414 	.word	0x00048414
   32cec:	000484b8 	.word	0x000484b8

00032cf0 <TargetControl::programmingDone()>:
   32cf0:	e92d4010 	push	{r4, lr}
   32cf4:	e3a01004 	mov	r1, #4
   32cf8:	e1a04000 	mov	r4, r0
   32cfc:	e59f2014 	ldr	r2, [pc, #20]	; 32d18 <TargetControl::programmingDone()+0x28>
   32d00:	e59f0014 	ldr	r0, [pc, #20]	; 32d1c <TargetControl::programmingDone()+0x2c>
   32d04:	ebfff03f 	bl	2ee08 <LogWrite>
   32d08:	e3a03000 	mov	r3, #0
   32d0c:	e2844601 	add	r4, r4, #1048576	; 0x100000
   32d10:	e5c43379 	strb	r3, [r4, #889]	; 0x379
   32d14:	e8bd8010 	pop	{r4, pc}
   32d18:	00048438 	.word	0x00048438
   32d1c:	000484b8 	.word	0x000484b8

00032d20 <TargetControl::programExec(bool)>:
   32d20:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   32d24:	e3510000 	cmp	r1, #0
   32d28:	e1a04000 	mov	r4, r0
   32d2c:	e24ddfcb 	sub	sp, sp, #812	; 0x32c
   32d30:	0a000015 	beq	32d8c <TargetControl::programExec(bool)+0x6c>
   32d34:	e3a01004 	mov	r1, #4
   32d38:	e3a03059 	mov	r3, #89	; 0x59
   32d3c:	e0845001 	add	r5, r4, r1
   32d40:	e59f23b0 	ldr	r2, [pc, #944]	; 330f8 <TargetControl::programExec(bool)+0x3d8>
   32d44:	e59f03b0 	ldr	r0, [pc, #944]	; 330fc <TargetControl::programExec(bool)+0x3dc>
   32d48:	ebfff02e 	bl	2ee08 <LogWrite>
   32d4c:	e1a00005 	mov	r0, r5
   32d50:	eb000469 	bl	33efc <TargetProgrammer::areRegistersValid()>
   32d54:	e3500000 	cmp	r0, #0
   32d58:	1a000011 	bne	32da4 <TargetControl::programExec(bool)+0x84>
   32d5c:	e2846601 	add	r6, r4, #1048576	; 0x100000
   32d60:	e5d6337b 	ldrb	r3, [r6, #891]	; 0x37b
   32d64:	e3530000 	cmp	r3, #0
   32d68:	1a0000df 	bne	330ec <TargetControl::programExec(bool)+0x3cc>
   32d6c:	e5943000 	ldr	r3, [r4]
   32d70:	e59f0388 	ldr	r0, [pc, #904]	; 33100 <TargetControl::programExec(bool)+0x3e0>
   32d74:	e2832811 	add	r2, r3, #1114112	; 0x110000
   32d78:	e59216e4 	ldr	r1, [r2, #1764]	; 0x6e4
   32d7c:	e0830000 	add	r0, r3, r0
   32d80:	ebfffb76 	bl	31b60 <BusRawAccess::targetReset(unsigned long)>
   32d84:	e28ddfcb 	add	sp, sp, #812	; 0x32c
   32d88:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   32d8c:	e3a01004 	mov	r1, #4
   32d90:	e3a0304e 	mov	r3, #78	; 0x4e
   32d94:	e59f235c 	ldr	r2, [pc, #860]	; 330f8 <TargetControl::programExec(bool)+0x3d8>
   32d98:	e59f035c 	ldr	r0, [pc, #860]	; 330fc <TargetControl::programExec(bool)+0x3dc>
   32d9c:	e0845001 	add	r5, r4, r1
   32da0:	ebfff018 	bl	2ee08 <LogWrite>
   32da4:	e1a00005 	mov	r0, r5
   32da8:	eb000453 	bl	33efc <TargetProgrammer::areRegistersValid()>
   32dac:	e3500000 	cmp	r0, #0
   32db0:	0affffe9 	beq	32d5c <TargetControl::programExec(bool)+0x3c>
   32db4:	e3a03000 	mov	r3, #0
   32db8:	e1a00005 	mov	r0, r5
   32dbc:	e28d1024 	add	r1, sp, #36	; 0x24
   32dc0:	e58d3040 	str	r3, [sp, #64]	; 0x40
   32dc4:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   32dc8:	e58d3038 	str	r3, [sp, #56]	; 0x38
   32dcc:	e58d3034 	str	r3, [sp, #52]	; 0x34
   32dd0:	e58d3030 	str	r3, [sp, #48]	; 0x30
   32dd4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   32dd8:	e58d3028 	str	r3, [sp, #40]	; 0x28
   32ddc:	e58d3024 	str	r3, [sp, #36]	; 0x24
   32de0:	e58d3054 	str	r3, [sp, #84]	; 0x54
   32de4:	e58d3050 	str	r3, [sp, #80]	; 0x50
   32de8:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   32dec:	e58d3048 	str	r3, [sp, #72]	; 0x48
   32df0:	e58d3044 	str	r3, [sp, #68]	; 0x44
   32df4:	e58d3068 	str	r3, [sp, #104]	; 0x68
   32df8:	e58d3064 	str	r3, [sp, #100]	; 0x64
   32dfc:	e58d3060 	str	r3, [sp, #96]	; 0x60
   32e00:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   32e04:	e58d3058 	str	r3, [sp, #88]	; 0x58
   32e08:	eb00043e 	bl	33f08 <TargetProgrammer::getTargetRegs(Z80Registers&)>
   32e0c:	e59d5040 	ldr	r5, [sp, #64]	; 0x40
   32e10:	e59de03c 	ldr	lr, [sp, #60]	; 0x3c
   32e14:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   32e18:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   32e1c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   32e20:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
   32e24:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   32e28:	e58d5018 	str	r5, [sp, #24]
   32e2c:	e58de014 	str	lr, [sp, #20]
   32e30:	e58dc010 	str	ip, [sp, #16]
   32e34:	e58d000c 	str	r0, [sp, #12]
   32e38:	e58d1008 	str	r1, [sp, #8]
   32e3c:	e58d2004 	str	r2, [sp, #4]
   32e40:	e3a010c8 	mov	r1, #200	; 0xc8
   32e44:	e59f22b8 	ldr	r2, [pc, #696]	; 33104 <TargetControl::programExec(bool)+0x3e4>
   32e48:	e58d3000 	str	r3, [sp]
   32e4c:	e28d006c 	add	r0, sp, #108	; 0x6c
   32e50:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   32e54:	ebffec8c 	bl	2e08c <snprintf>
   32e58:	e3a02f7d 	mov	r2, #500	; 0x1f4
   32e5c:	e28d106c 	add	r1, sp, #108	; 0x6c
   32e60:	e28d0f4d 	add	r0, sp, #308	; 0x134
   32e64:	ebffec1c 	bl	2dedc <strlcpy>
   32e68:	e59dc058 	ldr	ip, [sp, #88]	; 0x58
   32e6c:	e59de05c 	ldr	lr, [sp, #92]	; 0x5c
   32e70:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
   32e74:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
   32e78:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
   32e7c:	e58dc00c 	str	ip, [sp, #12]
   32e80:	e58de010 	str	lr, [sp, #16]
   32e84:	e58d1008 	str	r1, [sp, #8]
   32e88:	e58d2004 	str	r2, [sp, #4]
   32e8c:	e3a010c8 	mov	r1, #200	; 0xc8
   32e90:	e59f2270 	ldr	r2, [pc, #624]	; 33108 <TargetControl::programExec(bool)+0x3e8>
   32e94:	e58d3000 	str	r3, [sp]
   32e98:	e28d006c 	add	r0, sp, #108	; 0x6c
   32e9c:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
   32ea0:	ebffec79 	bl	2e08c <snprintf>
   32ea4:	e28d106c 	add	r1, sp, #108	; 0x6c
   32ea8:	e3a02f7d 	mov	r2, #500	; 0x1f4
   32eac:	e28d0f4d 	add	r0, sp, #308	; 0x134
   32eb0:	ebffec25 	bl	2df4c <strlcat>
   32eb4:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   32eb8:	e28d006c 	add	r0, sp, #108	; 0x6c
   32ebc:	e3120080 	tst	r2, #128	; 0x80
   32ec0:	13a03053 	movne	r3, #83	; 0x53
   32ec4:	03a0302d 	moveq	r3, #45	; 0x2d
   32ec8:	e3120040 	tst	r2, #64	; 0x40
   32ecc:	13a0505a 	movne	r5, #90	; 0x5a
   32ed0:	03a0502d 	moveq	r5, #45	; 0x2d
   32ed4:	e3120010 	tst	r2, #16
   32ed8:	13a0e048 	movne	lr, #72	; 0x48
   32edc:	03a0e02d 	moveq	lr, #45	; 0x2d
   32ee0:	e3120004 	tst	r2, #4
   32ee4:	13a0c050 	movne	ip, #80	; 0x50
   32ee8:	03a0c02d 	moveq	ip, #45	; 0x2d
   32eec:	e3120002 	tst	r2, #2
   32ef0:	13a0104e 	movne	r1, #78	; 0x4e
   32ef4:	03a0102d 	moveq	r1, #45	; 0x2d
   32ef8:	e3120001 	tst	r2, #1
   32efc:	13a02043 	movne	r2, #67	; 0x43
   32f00:	03a0202d 	moveq	r2, #45	; 0x2d
   32f04:	e88d4020 	stm	sp, {r5, lr}
   32f08:	e58dc008 	str	ip, [sp, #8]
   32f0c:	e58d100c 	str	r1, [sp, #12]
   32f10:	e58d2010 	str	r2, [sp, #16]
   32f14:	e3a010c8 	mov	r1, #200	; 0xc8
   32f18:	e59f21ec 	ldr	r2, [pc, #492]	; 3310c <TargetControl::programExec(bool)+0x3ec>
   32f1c:	ebffec5a 	bl	2e08c <snprintf>
   32f20:	e28d106c 	add	r1, sp, #108	; 0x6c
   32f24:	e3a02f7d 	mov	r2, #500	; 0x1f4
   32f28:	e28d0f4d 	add	r0, sp, #308	; 0x134
   32f2c:	ebffec06 	bl	2df4c <strlcat>
   32f30:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   32f34:	e28d006c 	add	r0, sp, #108	; 0x6c
   32f38:	e3120080 	tst	r2, #128	; 0x80
   32f3c:	13a03053 	movne	r3, #83	; 0x53
   32f40:	03a0302d 	moveq	r3, #45	; 0x2d
   32f44:	e3120040 	tst	r2, #64	; 0x40
   32f48:	13a0505a 	movne	r5, #90	; 0x5a
   32f4c:	03a0502d 	moveq	r5, #45	; 0x2d
   32f50:	e3120010 	tst	r2, #16
   32f54:	13a0e048 	movne	lr, #72	; 0x48
   32f58:	03a0e02d 	moveq	lr, #45	; 0x2d
   32f5c:	e3120004 	tst	r2, #4
   32f60:	13a0c050 	movne	ip, #80	; 0x50
   32f64:	03a0c02d 	moveq	ip, #45	; 0x2d
   32f68:	e3120002 	tst	r2, #2
   32f6c:	13a0104e 	movne	r1, #78	; 0x4e
   32f70:	03a0102d 	moveq	r1, #45	; 0x2d
   32f74:	e3120001 	tst	r2, #1
   32f78:	13a02043 	movne	r2, #67	; 0x43
   32f7c:	03a0202d 	moveq	r2, #45	; 0x2d
   32f80:	e58dc008 	str	ip, [sp, #8]
   32f84:	e88d4020 	stm	sp, {r5, lr}
   32f88:	e58d100c 	str	r1, [sp, #12]
   32f8c:	e58d2010 	str	r2, [sp, #16]
   32f90:	e3a010c8 	mov	r1, #200	; 0xc8
   32f94:	e59f2174 	ldr	r2, [pc, #372]	; 33110 <TargetControl::programExec(bool)+0x3f0>
   32f98:	ebffec3b 	bl	2e08c <snprintf>
   32f9c:	e3a02f7d 	mov	r2, #500	; 0x1f4
   32fa0:	e28d106c 	add	r1, sp, #108	; 0x6c
   32fa4:	e28d0f4d 	add	r0, sp, #308	; 0x134
   32fa8:	ebffebe7 	bl	2df4c <strlcat>
   32fac:	e59d2064 	ldr	r2, [sp, #100]	; 0x64
   32fb0:	e59d0060 	ldr	r0, [sp, #96]	; 0x60
   32fb4:	e3520000 	cmp	r2, #0
   32fb8:	03a02020 	moveq	r2, #32
   32fbc:	13a02031 	movne	r2, #49	; 0x31
   32fc0:	01a0c002 	moveq	ip, r2
   32fc4:	13a0c032 	movne	ip, #50	; 0x32
   32fc8:	e59d1068 	ldr	r1, [sp, #104]	; 0x68
   32fcc:	e88d1005 	stm	sp, {r0, r2, ip}
   32fd0:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
   32fd4:	e59f2138 	ldr	r2, [pc, #312]	; 33114 <TargetControl::programExec(bool)+0x3f4>
   32fd8:	e58d100c 	str	r1, [sp, #12]
   32fdc:	e28d006c 	add	r0, sp, #108	; 0x6c
   32fe0:	e3a010c8 	mov	r1, #200	; 0xc8
   32fe4:	ebffec28 	bl	2e08c <snprintf>
   32fe8:	e3a02f7d 	mov	r2, #500	; 0x1f4
   32fec:	e28d106c 	add	r1, sp, #108	; 0x6c
   32ff0:	e28d0f4d 	add	r0, sp, #308	; 0x134
   32ff4:	ebffebd4 	bl	2df4c <strlcat>
   32ff8:	e2846601 	add	r6, r4, #1048576	; 0x100000
   32ffc:	e3a01004 	mov	r1, #4
   33000:	e59f2110 	ldr	r2, [pc, #272]	; 33118 <TargetControl::programExec(bool)+0x3f8>
   33004:	e59f00f0 	ldr	r0, [pc, #240]	; 330fc <TargetControl::programExec(bool)+0x3dc>
   33008:	e28d3f4d 	add	r3, sp, #308	; 0x134
   3300c:	ebffef7d 	bl	2ee08 <LogWrite>
   33010:	e5967374 	ldr	r7, [r6, #884]	; 0x374
   33014:	e5943000 	ldr	r3, [r4]
   33018:	e59f00fc 	ldr	r0, [pc, #252]	; 3311c <TargetControl::programExec(bool)+0x3fc>
   3301c:	e1a01007 	mov	r1, r7
   33020:	e0830000 	add	r0, r3, r0
   33024:	e28d206c 	add	r2, sp, #108	; 0x6c
   33028:	e3a030c8 	mov	r3, #200	; 0xc8
   3302c:	eb000717 	bl	34c90 <HwManager::getSnippetToSetupHw(unsigned long, unsigned char*, unsigned long)>
   33030:	e28d206c 	add	r2, sp, #108	; 0x6c
   33034:	e1a05000 	mov	r5, r0
   33038:	e26030c8 	rsb	r3, r0, #200	; 0xc8
   3303c:	e0822000 	add	r2, r2, r0
   33040:	e28d1024 	add	r1, sp, #36	; 0x24
   33044:	e0800007 	add	r0, r0, r7
   33048:	eb0002ce 	bl	33b88 <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)>
   3304c:	e0955000 	adds	r5, r5, r0
   33050:	0affff42 	beq	32d60 <TargetControl::programExec(bool)+0x40>
   33054:	e3a08000 	mov	r8, #0
   33058:	e5dd006f 	ldrb	r0, [sp, #111]	; 0x6f
   3305c:	e5dd106e 	ldrb	r1, [sp, #110]	; 0x6e
   33060:	e5dd206d 	ldrb	r2, [sp, #109]	; 0x6d
   33064:	e5dd306c 	ldrb	r3, [sp, #108]	; 0x6c
   33068:	e58d0010 	str	r0, [sp, #16]
   3306c:	e58d100c 	str	r1, [sp, #12]
   33070:	e59f0084 	ldr	r0, [pc, #132]	; 330fc <TargetControl::programExec(bool)+0x3dc>
   33074:	e3a01004 	mov	r1, #4
   33078:	e58d2008 	str	r2, [sp, #8]
   3307c:	e58d3004 	str	r3, [sp, #4]
   33080:	e59f2098 	ldr	r2, [pc, #152]	; 33120 <TargetControl::programExec(bool)+0x400>
   33084:	e1a03007 	mov	r3, r7
   33088:	e58d5000 	str	r5, [sp]
   3308c:	ebffef5d 	bl	2ee08 <LogWrite>
   33090:	e59f908c 	ldr	r9, [pc, #140]	; 33124 <TargetControl::programExec(bool)+0x404>
   33094:	e5940000 	ldr	r0, [r4]
   33098:	e1a03005 	mov	r3, r5
   3309c:	e1a01007 	mov	r1, r7
   330a0:	e28d206c 	add	r2, sp, #108	; 0x6c
   330a4:	e58d8000 	str	r8, [sp]
   330a8:	e0800009 	add	r0, r0, r9
   330ac:	eb0003c4 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   330b0:	e3e0c03c 	mvn	ip, #60	; 0x3c
   330b4:	e5940000 	ldr	r0, [r4]
   330b8:	e3a03003 	mov	r3, #3
   330bc:	e1a0e427 	lsr	lr, r7, #8
   330c0:	e1a01008 	mov	r1, r8
   330c4:	e58d8000 	str	r8, [sp]
   330c8:	e0800009 	add	r0, r0, r9
   330cc:	e28d2020 	add	r2, sp, #32
   330d0:	e5cd7021 	strb	r7, [sp, #33]	; 0x21
   330d4:	e5cde022 	strb	lr, [sp, #34]	; 0x22
   330d8:	e5cdc020 	strb	ip, [sp, #32]
   330dc:	eb0003b8 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   330e0:	e5d6337b 	ldrb	r3, [r6, #891]	; 0x37b
   330e4:	e3530000 	cmp	r3, #0
   330e8:	0affff1f 	beq	32d6c <TargetControl::programExec(bool)+0x4c>
   330ec:	e1a00004 	mov	r0, r4
   330f0:	ebfffdab 	bl	327a4 <TargetControl::debuggerBreak()>
   330f4:	eaffff1c 	b	32d6c <TargetControl::programExec(bool)+0x4c>
   330f8:	00048494 	.word	0x00048494
   330fc:	000484b8 	.word	0x000484b8
   33100:	001106cc 	.word	0x001106cc
   33104:	00048260 	.word	0x00048260
   33108:	000482a0 	.word	0x000482a0
   3310c:	000482d4 	.word	0x000482d4
   33110:	000482e8 	.word	0x000482e8
   33114:	000482fc 	.word	0x000482fc
   33118:	00048448 	.word	0x00048448
   3311c:	001106ec 	.word	0x001106ec
   33120:	00048454 	.word	0x00048454
   33124:	001006c8 	.word	0x001006c8

00033128 <TargetControl::programmingWrite()>:
   33128:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3312c:	e3a05000 	mov	r5, #0
   33130:	e1a09000 	mov	r9, r0
   33134:	e1a08005 	mov	r8, r5
   33138:	e1a0b005 	mov	fp, r5
   3313c:	e59fa0b8 	ldr	sl, [pc, #184]	; 331fc <TargetControl::programmingWrite()+0xd4>
   33140:	e24dd014 	sub	sp, sp, #20
   33144:	e2807004 	add	r7, r0, #4
   33148:	ea000015 	b	331a4 <TargetControl::programmingWrite()+0x7c>
   3314c:	e1a01005 	mov	r1, r5
   33150:	e1a00007 	mov	r0, r7
   33154:	eb000349 	bl	33e80 <TargetProgrammer::getMemoryBlock(unsigned long)>
   33158:	e1a04000 	mov	r4, r0
   3315c:	e5941000 	ldr	r1, [r4]
   33160:	e1a00007 	mov	r0, r7
   33164:	e5996000 	ldr	r6, [r9]
   33168:	e58d100c 	str	r1, [sp, #12]
   3316c:	eb000346 	bl	33e8c <TargetProgrammer::getMemoryImagePtr()>
   33170:	e1a02000 	mov	r2, r0
   33174:	e594c000 	ldr	ip, [r4]
   33178:	e086600a 	add	r6, r6, sl
   3317c:	e5943004 	ldr	r3, [r4, #4]
   33180:	e1a00006 	mov	r0, r6
   33184:	e59d100c 	ldr	r1, [sp, #12]
   33188:	e082200c 	add	r2, r2, ip
   3318c:	e58db000 	str	fp, [sp]
   33190:	eb00038b 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   33194:	e5943000 	ldr	r3, [r4]
   33198:	e2855001 	add	r5, r5, #1
   3319c:	e3530000 	cmp	r3, #0
   331a0:	03a08001 	moveq	r8, #1
   331a4:	e1a00007 	mov	r0, r7
   331a8:	eb000331 	bl	33e74 <TargetProgrammer::numMemoryBlocks()>
   331ac:	e1500005 	cmp	r0, r5
   331b0:	8affffe5 	bhi	3314c <TargetControl::programmingWrite()+0x24>
   331b4:	e2893601 	add	r3, r9, #1048576	; 0x100000
   331b8:	e5d3237a 	ldrb	r2, [r3, #890]	; 0x37a
   331bc:	e3520000 	cmp	r2, #0
   331c0:	1a000008 	bne	331e8 <TargetControl::programmingWrite()+0xc0>
   331c4:	e5d3337b 	ldrb	r3, [r3, #891]	; 0x37b
   331c8:	e3530000 	cmp	r3, #0
   331cc:	1a000001 	bne	331d8 <TargetControl::programmingWrite()+0xb0>
   331d0:	e28dd014 	add	sp, sp, #20
   331d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   331d8:	e1a00009 	mov	r0, r9
   331dc:	e28dd014 	add	sp, sp, #20
   331e0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   331e4:	eafffd6e 	b	327a4 <TargetControl::debuggerBreak()>
   331e8:	e1a01008 	mov	r1, r8
   331ec:	e1a00009 	mov	r0, r9
   331f0:	e28dd014 	add	sp, sp, #20
   331f4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   331f8:	eafffec8 	b	32d20 <TargetControl::programExec(bool)>
   331fc:	001006c8 	.word	0x001006c8

00033200 <TargetControl::cycleClear()>:
   33200:	e3a03000 	mov	r3, #0
   33204:	e3a02004 	mov	r2, #4
   33208:	e2800601 	add	r0, r0, #1048576	; 0x100000
   3320c:	e2801fe2 	add	r1, r0, #904	; 0x388
   33210:	e580337c 	str	r3, [r0, #892]	; 0x37c
   33214:	e5803380 	str	r3, [r0, #896]	; 0x380
   33218:	e5803384 	str	r3, [r0, #900]	; 0x384
   3321c:	e1c130b0 	strh	r3, [r1]
   33220:	e580338c 	str	r3, [r0, #908]	; 0x38c
   33224:	e5803390 	str	r3, [r0, #912]	; 0x390
   33228:	e5803394 	str	r3, [r0, #916]	; 0x394
   3322c:	e5c02398 	strb	r2, [r0, #920]	; 0x398
   33230:	e12fff1e 	bx	lr

00033234 <TargetControl::cycleSuspend(bool)>:
   33234:	e3510000 	cmp	r1, #0
   33238:	112fff1e 	bxne	lr
   3323c:	e3a02040 	mov	r2, #64	; 0x40
   33240:	e59f3020 	ldr	r3, [pc, #32]	; 33268 <TargetControl::cycleSuspend(bool)+0x34>
   33244:	e5901000 	ldr	r1, [r0]
   33248:	e583201c 	str	r2, [r3, #28]
   3324c:	e5932008 	ldr	r2, [r3, #8]
   33250:	e59f0014 	ldr	r0, [pc, #20]	; 3326c <TargetControl::cycleSuspend(bool)+0x38>
   33254:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   33258:	e0810000 	add	r0, r1, r0
   3325c:	e5832008 	str	r2, [r3, #8]
   33260:	e3a01007 	mov	r1, #7
   33264:	eafffc0d 	b	322a0 <BusRawAccess::muxSet(int)>
   33268:	20200000 	.word	0x20200000
   3326c:	001106cc 	.word	0x001106cc

00033270 <TargetControl::cycleReqAction(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, unsigned long, void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE), void*)>:
   33270:	e92d4070 	push	{r4, r5, r6, lr}
   33274:	e2804601 	add	r4, r0, #1048576	; 0x100000
   33278:	e5d45379 	ldrb	r5, [r4, #889]	; 0x379
   3327c:	e3550000 	cmp	r5, #0
   33280:	13a05000 	movne	r5, #0
   33284:	1a000002 	bne	33294 <TargetControl::cycleReqAction(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, unsigned long, void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE), void*)+0x24>
   33288:	e5d40388 	ldrb	r0, [r4, #904]	; 0x388
   3328c:	e3500000 	cmp	r0, #0
   33290:	0a000001 	beq	3329c <TargetControl::cycleReqAction(BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, unsigned long, void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, unsigned long, BR_RETURN_TYPE), void*)+0x2c>
   33294:	e1a00005 	mov	r0, r5
   33298:	e8bd8070 	pop	{r4, r5, r6, pc}
   3329c:	e3a06001 	mov	r6, #1
   332a0:	e59d0014 	ldr	r0, [sp, #20]
   332a4:	e5843384 	str	r3, [r4, #900]	; 0x384
   332a8:	e584037c 	str	r0, [r4, #892]	; 0x37c
   332ac:	e59d0018 	ldr	r0, [sp, #24]
   332b0:	e5c41389 	strb	r1, [r4, #905]	; 0x389
   332b4:	e5840380 	str	r0, [r4, #896]	; 0x380
   332b8:	e5c42398 	strb	r2, [r4, #920]	; 0x398
   332bc:	e5c46388 	strb	r6, [r4, #904]	; 0x388
   332c0:	ebffeacb 	bl	2ddf4 <micros>
   332c4:	e5845390 	str	r5, [r4, #912]	; 0x390
   332c8:	e1a05006 	mov	r5, r6
   332cc:	e59d3010 	ldr	r3, [sp, #16]
   332d0:	e584038c 	str	r0, [r4, #908]	; 0x38c
   332d4:	e5843394 	str	r3, [r4, #916]	; 0x394
   332d8:	e1a00005 	mov	r0, r5
   332dc:	e8bd8070 	pop	{r4, r5, r6, pc}

000332e0 <TargetControl::cycleClearAction()>:
   332e0:	e3a03000 	mov	r3, #0
   332e4:	e2800601 	add	r0, r0, #1048576	; 0x100000
   332e8:	e5c03388 	strb	r3, [r0, #904]	; 0x388
   332ec:	e12fff1e 	bx	lr

000332f0 <TargetControl::cycleReqHandlePending()>:
   332f0:	e92d4010 	push	{r4, lr}
   332f4:	e1a04000 	mov	r4, r0
   332f8:	e59f0028 	ldr	r0, [pc, #40]	; 33328 <TargetControl::cycleReqHandlePending()+0x38>
   332fc:	e5943000 	ldr	r3, [r4]
   33300:	e2844601 	add	r4, r4, #1048576	; 0x100000
   33304:	e0830000 	add	r0, r3, r0
   33308:	e3a02001 	mov	r2, #1
   3330c:	e5d41389 	ldrb	r1, [r4, #905]	; 0x389
   33310:	ebfffa48 	bl	31c38 <BusRawAccess::setBusSignal(BR_BUS_ACTION, bool)>
   33314:	ebffeab6 	bl	2ddf4 <micros>
   33318:	e3a03002 	mov	r3, #2
   3331c:	e5840390 	str	r0, [r4, #912]	; 0x390
   33320:	e5c43388 	strb	r3, [r4, #904]	; 0x388
   33324:	e8bd8010 	pop	{r4, pc}
   33328:	001106cc 	.word	0x001106cc

0003332c <TargetControl::cycleReqAssertedOther(BR_BUS_ACTION)>:
   3332c:	e92d4070 	push	{r4, r5, r6, lr}
   33330:	e2804601 	add	r4, r0, #1048576	; 0x100000
   33334:	e24dd008 	sub	sp, sp, #8
   33338:	e1a05000 	mov	r5, r0
   3333c:	ebffeaac 	bl	2ddf4 <micros>
   33340:	e5942394 	ldr	r2, [r4, #916]	; 0x394
   33344:	e5941390 	ldr	r1, [r4, #912]	; 0x390
   33348:	ebffeac7 	bl	2de6c <isTimeout>
   3334c:	e3500000 	cmp	r0, #0
   33350:	0a000017 	beq	333b4 <TargetControl::cycleReqAssertedOther(BR_BUS_ACTION)+0x88>
   33354:	e3a03000 	mov	r3, #0
   33358:	e594637c 	ldr	r6, [r4, #892]	; 0x37c
   3335c:	e5c43388 	strb	r3, [r4, #904]	; 0x388
   33360:	e1560003 	cmp	r6, r3
   33364:	0a000005 	beq	33380 <TargetControl::cycleReqAssertedOther(BR_BUS_ACTION)+0x54>
   33368:	e58d3000 	str	r3, [sp]
   3336c:	e5943384 	ldr	r3, [r4, #900]	; 0x384
   33370:	e5d42398 	ldrb	r2, [r4, #920]	; 0x398
   33374:	e5d41389 	ldrb	r1, [r4, #905]	; 0x389
   33378:	e5940380 	ldr	r0, [r4, #896]	; 0x380
   3337c:	e12fff36 	blx	r6
   33380:	e3a02040 	mov	r2, #64	; 0x40
   33384:	e5951000 	ldr	r1, [r5]
   33388:	e59f002c 	ldr	r0, [pc, #44]	; 333bc <TargetControl::cycleReqAssertedOther(BR_BUS_ACTION)+0x90>
   3338c:	e59f302c 	ldr	r3, [pc, #44]	; 333c0 <TargetControl::cycleReqAssertedOther(BR_BUS_ACTION)+0x94>
   33390:	e0810000 	add	r0, r1, r0
   33394:	e3a01007 	mov	r1, #7
   33398:	e583201c 	str	r2, [r3, #28]
   3339c:	e5932008 	ldr	r2, [r3, #8]
   333a0:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   333a4:	e5832008 	str	r2, [r3, #8]
   333a8:	e28dd008 	add	sp, sp, #8
   333ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   333b0:	eafffbba 	b	322a0 <BusRawAccess::muxSet(int)>
   333b4:	e28dd008 	add	sp, sp, #8
   333b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   333bc:	001106cc 	.word	0x001106cc
   333c0:	20200000 	.word	0x20200000

000333c4 <TargetControl::cyclePerformActionRequest()>:
   333c4:	e92d4030 	push	{r4, r5, lr}
   333c8:	e2804601 	add	r4, r0, #1048576	; 0x100000
   333cc:	e5d42398 	ldrb	r2, [r4, #920]	; 0x398
   333d0:	e24dd00c 	sub	sp, sp, #12
   333d4:	e3520002 	cmp	r2, #2
   333d8:	0a00000b 	beq	3340c <TargetControl::cyclePerformActionRequest()+0x48>
   333dc:	e3a03000 	mov	r3, #0
   333e0:	e594537c 	ldr	r5, [r4, #892]	; 0x37c
   333e4:	e5c43388 	strb	r3, [r4, #904]	; 0x388
   333e8:	e1550003 	cmp	r5, r3
   333ec:	0a000004 	beq	33404 <TargetControl::cyclePerformActionRequest()+0x40>
   333f0:	e58d3000 	str	r3, [sp]
   333f4:	e5943384 	ldr	r3, [r4, #900]	; 0x384
   333f8:	e5d41389 	ldrb	r1, [r4, #905]	; 0x389
   333fc:	e5940380 	ldr	r0, [r4, #896]	; 0x380
   33400:	e12fff35 	blx	r5
   33404:	e28dd00c 	add	sp, sp, #12
   33408:	e8bd8030 	pop	{r4, r5, pc}
   3340c:	e1a05000 	mov	r5, r0
   33410:	ebffff44 	bl	33128 <TargetControl::programmingWrite()>
   33414:	e1a00005 	mov	r0, r5
   33418:	ebfffe34 	bl	32cf0 <TargetControl::programmingDone()>
   3341c:	e3a03000 	mov	r3, #0
   33420:	e5c43388 	strb	r3, [r4, #904]	; 0x388
   33424:	e28dd00c 	add	sp, sp, #12
   33428:	e8bd8030 	pop	{r4, r5, pc}

0003342c <TargetControl::cycleReqAssertedBusRq()>:
   3342c:	e92d4070 	push	{r4, r5, r6, lr}
   33430:	e59f30d0 	ldr	r3, [pc, #208]	; 33508 <TargetControl::cycleReqAssertedBusRq()+0xdc>
   33434:	e1a04000 	mov	r4, r0
   33438:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   3343c:	e24dd008 	sub	sp, sp, #8
   33440:	e3130004 	tst	r3, #4
   33444:	1a000015 	bne	334a0 <TargetControl::cycleReqAssertedBusRq()+0x74>
   33448:	e5900000 	ldr	r0, [r0]
   3344c:	e59f50b8 	ldr	r5, [pc, #184]	; 3350c <TargetControl::cycleReqAssertedBusRq()+0xe0>
   33450:	e0800005 	add	r0, r0, r5
   33454:	ebfffab0 	bl	31f1c <BusRawAccess::busReqTakeControl()>
   33458:	e1a00004 	mov	r0, r4
   3345c:	ebffffd8 	bl	333c4 <TargetControl::cyclePerformActionRequest()>
   33460:	e5940000 	ldr	r0, [r4]
   33464:	e0800005 	add	r0, r0, r5
   33468:	ebfffb0e 	bl	320a8 <BusRawAccess::busReqRelease()>
   3346c:	e3a02040 	mov	r2, #64	; 0x40
   33470:	e5941000 	ldr	r1, [r4]
   33474:	e59f0090 	ldr	r0, [pc, #144]	; 3350c <TargetControl::cycleReqAssertedBusRq()+0xe0>
   33478:	e59f3088 	ldr	r3, [pc, #136]	; 33508 <TargetControl::cycleReqAssertedBusRq()+0xdc>
   3347c:	e0810000 	add	r0, r1, r0
   33480:	e3a01007 	mov	r1, #7
   33484:	e583201c 	str	r2, [r3, #28]
   33488:	e5932008 	ldr	r2, [r3, #8]
   3348c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   33490:	e5832008 	str	r2, [r3, #8]
   33494:	e28dd008 	add	sp, sp, #8
   33498:	e8bd4070 	pop	{r4, r5, r6, lr}
   3349c:	eafffb7f 	b	322a0 <BusRawAccess::muxSet(int)>
   334a0:	e2805601 	add	r5, r0, #1048576	; 0x100000
   334a4:	ebffea52 	bl	2ddf4 <micros>
   334a8:	e5952394 	ldr	r2, [r5, #916]	; 0x394
   334ac:	e5951390 	ldr	r1, [r5, #912]	; 0x390
   334b0:	ebffea6d 	bl	2de6c <isTimeout>
   334b4:	e3500000 	cmp	r0, #0
   334b8:	0affffeb 	beq	3346c <TargetControl::cycleReqAssertedBusRq()+0x40>
   334bc:	e3a03000 	mov	r3, #0
   334c0:	e595637c 	ldr	r6, [r5, #892]	; 0x37c
   334c4:	e5c53388 	strb	r3, [r5, #904]	; 0x388
   334c8:	e1560003 	cmp	r6, r3
   334cc:	0a000006 	beq	334ec <TargetControl::cycleReqAssertedBusRq()+0xc0>
   334d0:	e3a02004 	mov	r2, #4
   334d4:	e5953384 	ldr	r3, [r5, #900]	; 0x384
   334d8:	e58d2000 	str	r2, [sp]
   334dc:	e5d52398 	ldrb	r2, [r5, #920]	; 0x398
   334e0:	e5d51389 	ldrb	r1, [r5, #905]	; 0x389
   334e4:	e5950380 	ldr	r0, [r5, #896]	; 0x380
   334e8:	e12fff36 	blx	r6
   334ec:	e5943000 	ldr	r3, [r4]
   334f0:	e59f0014 	ldr	r0, [pc, #20]	; 3350c <TargetControl::cycleReqAssertedBusRq()+0xe0>
   334f4:	e3a02000 	mov	r2, #0
   334f8:	e3a01004 	mov	r1, #4
   334fc:	e0830000 	add	r0, r3, r0
   33500:	ebfff9cc 	bl	31c38 <BusRawAccess::setBusSignal(BR_BUS_ACTION, bool)>
   33504:	eaffffd8 	b	3346c <TargetControl::cycleReqAssertedBusRq()+0x40>
   33508:	20200000 	.word	0x20200000
   3350c:	001106cc 	.word	0x001106cc

00033510 <TargetControl::cycleHandleActions()>:
   33510:	e2803601 	add	r3, r0, #1048576	; 0x100000
   33514:	e5d32379 	ldrb	r2, [r3, #889]	; 0x379
   33518:	e3520000 	cmp	r2, #0
   3351c:	e5d32388 	ldrb	r2, [r3, #904]	; 0x388
   33520:	0a000001 	beq	3352c <TargetControl::cycleHandleActions()+0x1c>
   33524:	e3520000 	cmp	r2, #0
   33528:	0a000007 	beq	3354c <TargetControl::cycleHandleActions()+0x3c>
   3352c:	e3520001 	cmp	r2, #1
   33530:	0a000015 	beq	3358c <TargetControl::cycleHandleActions()+0x7c>
   33534:	e3520002 	cmp	r2, #2
   33538:	112fff1e 	bxne	lr
   3353c:	e5d31389 	ldrb	r1, [r3, #905]	; 0x389
   33540:	e3510004 	cmp	r1, #4
   33544:	0a00000f 	beq	33588 <TargetControl::cycleHandleActions()+0x78>
   33548:	eaffff77 	b	3332c <TargetControl::cycleReqAssertedOther(BR_BUS_ACTION)>
   3354c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   33550:	e3a0e002 	mov	lr, #2
   33554:	e59fc044 	ldr	ip, [pc, #68]	; 335a0 <TargetControl::cycleHandleActions()+0x90>
   33558:	e59f1044 	ldr	r1, [pc, #68]	; 335a4 <TargetControl::cycleHandleActions()+0x94>
   3355c:	e2832fe2 	add	r2, r3, #904	; 0x388
   33560:	e5c3e398 	strb	lr, [r3, #920]	; 0x398
   33564:	e583c394 	str	ip, [r3, #916]	; 0x394
   33568:	e1c210b0 	strh	r1, [r2]
   3356c:	e5d334a4 	ldrb	r3, [r3, #1188]	; 0x4a4
   33570:	e3530000 	cmp	r3, #0
   33574:	0a000001 	beq	33580 <TargetControl::cycleHandleActions()+0x70>
   33578:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3357c:	eaffff90 	b	333c4 <TargetControl::cyclePerformActionRequest()>
   33580:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   33584:	eaffff59 	b	332f0 <TargetControl::cycleReqHandlePending()>
   33588:	eaffffa7 	b	3342c <TargetControl::cycleReqAssertedBusRq()>
   3358c:	e5d334a4 	ldrb	r3, [r3, #1188]	; 0x4a4
   33590:	e3530000 	cmp	r3, #0
   33594:	0a000000 	beq	3359c <TargetControl::cycleHandleActions()+0x8c>
   33598:	eaffff89 	b	333c4 <TargetControl::cyclePerformActionRequest()>
   3359c:	eaffff53 	b	332f0 <TargetControl::cycleReqHandlePending()>
   335a0:	000186a0 	.word	0x000186a0
   335a4:	00000401 	.word	0x00000401

000335a8 <TargetControl::cycleReqCallback(BR_RETURN_TYPE)>:
   335a8:	e3a03000 	mov	r3, #0
   335ac:	e92d4010 	push	{r4, lr}
   335b0:	e2800601 	add	r0, r0, #1048576	; 0x100000
   335b4:	e590437c 	ldr	r4, [r0, #892]	; 0x37c
   335b8:	e24dd008 	sub	sp, sp, #8
   335bc:	e1540003 	cmp	r4, r3
   335c0:	e5c03388 	strb	r3, [r0, #904]	; 0x388
   335c4:	0a000005 	beq	335e0 <TargetControl::cycleReqCallback(BR_RETURN_TYPE)+0x38>
   335c8:	e58d1000 	str	r1, [sp]
   335cc:	e5903384 	ldr	r3, [r0, #900]	; 0x384
   335d0:	e5d02398 	ldrb	r2, [r0, #920]	; 0x398
   335d4:	e5d01389 	ldrb	r1, [r0, #905]	; 0x389
   335d8:	e5900380 	ldr	r0, [r0, #896]	; 0x380
   335dc:	e12fff34 	blx	r4
   335e0:	e28dd008 	add	sp, sp, #8
   335e4:	e8bd8010 	pop	{r4, pc}

000335e8 <TargetControl::cycleSetupForFastWait()>:
   335e8:	e3a02040 	mov	r2, #64	; 0x40
   335ec:	e59f3020 	ldr	r3, [pc, #32]	; 33614 <TargetControl::cycleSetupForFastWait()+0x2c>
   335f0:	e5901000 	ldr	r1, [r0]
   335f4:	e583201c 	str	r2, [r3, #28]
   335f8:	e5932008 	ldr	r2, [r3, #8]
   335fc:	e59f0014 	ldr	r0, [pc, #20]	; 33618 <TargetControl::cycleSetupForFastWait()+0x30>
   33600:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   33604:	e0810000 	add	r0, r1, r0
   33608:	e5832008 	str	r2, [r3, #8]
   3360c:	e3a01007 	mov	r1, #7
   33610:	eafffb22 	b	322a0 <BusRawAccess::muxSet(int)>
   33614:	20200000 	.word	0x20200000
   33618:	001106cc 	.word	0x001106cc

0003361c <TargetControl::cycleWaitForReadCompletion()>:
   3361c:	e3a03000 	mov	r3, #0
   33620:	e2800601 	add	r0, r0, #1048576	; 0x100000
   33624:	e92d4070 	push	{r4, r5, r6, lr}
   33628:	e5c0339a 	strb	r3, [r0, #922]	; 0x39a
   3362c:	ebffe9f0 	bl	2ddf4 <micros>
   33630:	e59f503c 	ldr	r5, [pc, #60]	; 33674 <TargetControl::cycleWaitForReadCompletion()+0x58>
   33634:	e1a04000 	mov	r4, r0
   33638:	ea000003 	b	3364c <TargetControl::cycleWaitForReadCompletion()+0x30>
   3363c:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   33640:	e2033003 	and	r3, r3, #3
   33644:	e3530003 	cmp	r3, #3
   33648:	0a000007 	beq	3366c <TargetControl::cycleWaitForReadCompletion()+0x50>
   3364c:	ebffe9e8 	bl	2ddf4 <micros>
   33650:	e3a02064 	mov	r2, #100	; 0x64
   33654:	e1a01004 	mov	r1, r4
   33658:	ebffea03 	bl	2de6c <isTimeout>
   3365c:	e3500000 	cmp	r0, #0
   33660:	0afffff5 	beq	3363c <TargetControl::cycleWaitForReadCompletion()+0x20>
   33664:	e3a00000 	mov	r0, #0
   33668:	e8bd8070 	pop	{r4, r5, r6, pc}
   3366c:	e3a00001 	mov	r0, #1
   33670:	e8bd8070 	pop	{r4, r5, r6, pc}
   33674:	20200000 	.word	0x20200000

00033678 <TargetControl::cycleFullWaitProcessing(unsigned long)>:
   33678:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3367c:	e3a03000 	mov	r3, #0
   33680:	e1a05000 	mov	r5, r0
   33684:	e1a04001 	mov	r4, r1
   33688:	e5902000 	ldr	r2, [r0]
   3368c:	e59f01c0 	ldr	r0, [pc, #448]	; 33854 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x1dc>
   33690:	e24dd01c 	sub	sp, sp, #28
   33694:	e0820000 	add	r0, r2, r0
   33698:	e28d100c 	add	r1, sp, #12
   3369c:	e28d2010 	add	r2, sp, #16
   336a0:	e58d300c 	str	r3, [sp, #12]
   336a4:	e58d3010 	str	r3, [sp, #16]
   336a8:	eb000308 	bl	342d0 <BusRawAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>
   336ac:	e1a03004 	mov	r3, r4
   336b0:	e1a00005 	mov	r0, r5
   336b4:	e59d2010 	ldr	r2, [sp, #16]
   336b8:	e59d100c 	ldr	r1, [sp, #12]
   336bc:	eb00040e 	bl	346fc <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)>
   336c0:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
   336c4:	e2857601 	add	r7, r5, #1048576	; 0x100000
   336c8:	e597849c 	ldr	r8, [r7, #1180]	; 0x49c
   336cc:	e1a06000 	mov	r6, r0
   336d0:	e3580000 	cmp	r8, #0
   336d4:	e58d3014 	str	r3, [sp, #20]
   336d8:	02049701 	andeq	r9, r4, #262144	; 0x40000
   336dc:	0a000014 	beq	33734 <TargetControl::cycleFullWaitProcessing(unsigned long)+0xbc>
   336e0:	e2149701 	ands	r9, r4, #262144	; 0x40000
   336e4:	03a03001 	moveq	r3, #1
   336e8:	13a03000 	movne	r3, #0
   336ec:	e3140802 	tst	r4, #131072	; 0x20000
   336f0:	03833002 	orreq	r3, r3, #2
   336f4:	e3140001 	tst	r4, #1
   336f8:	03833004 	orreq	r3, r3, #4
   336fc:	e3140002 	tst	r4, #2
   33700:	03833008 	orreq	r3, r3, #8
   33704:	e3140020 	tst	r4, #32
   33708:	03833020 	orreq	r3, r3, #32
   3370c:	e28d2014 	add	r2, sp, #20
   33710:	e3140008 	tst	r4, #8
   33714:	03833010 	orreq	r3, r3, #16
   33718:	e58d2000 	str	r2, [sp]
   3371c:	e3140004 	tst	r4, #4
   33720:	e59d2010 	ldr	r2, [sp, #16]
   33724:	e59d100c 	ldr	r1, [sp, #12]
   33728:	e59704a0 	ldr	r0, [r7, #1184]	; 0x4a0
   3372c:	03833b01 	orreq	r3, r3, #1024	; 0x400
   33730:	e12fff38 	blx	r8
   33734:	e3590000 	cmp	r9, #0
   33738:	1a000030 	bne	33800 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x188>
   3373c:	e2043003 	and	r3, r4, #3
   33740:	e3530003 	cmp	r3, #3
   33744:	0a00002d 	beq	33800 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x188>
   33748:	e59d3014 	ldr	r3, [sp, #20]
   3374c:	e3530000 	cmp	r3, #0
   33750:	ba00002c 	blt	33808 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x190>
   33754:	e3a02040 	mov	r2, #64	; 0x40
   33758:	e3a0c001 	mov	ip, #1
   3375c:	e59f10f4 	ldr	r1, [pc, #244]	; 33858 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x1e0>
   33760:	e1a03a03 	lsl	r3, r3, #20
   33764:	e5812028 	str	r2, [r1, #40]	; 0x28
   33768:	e5910008 	ldr	r0, [r1, #8]
   3376c:	e59f20e8 	ldr	r2, [pc, #232]	; 3385c <TargetControl::cycleFullWaitProcessing(unsigned long)+0x1e4>
   33770:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
   33774:	e20004ff 	and	r0, r0, #-16777216	; 0xff000000
   33778:	e1802002 	orr	r2, r0, r2
   3377c:	e3560000 	cmp	r6, #0
   33780:	e22306ff 	eor	r0, r3, #267386880	; 0xff00000
   33784:	e5812008 	str	r2, [r1, #8]
   33788:	e581301c 	str	r3, [r1, #28]
   3378c:	e5810028 	str	r0, [r1, #40]	; 0x28
   33790:	e5c7c39a 	strb	ip, [r7, #922]	; 0x39a
   33794:	1a00002a 	bne	33844 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x1cc>
   33798:	e59f20c0 	ldr	r2, [pc, #192]	; 33860 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x1e8>
   3379c:	e59f00c0 	ldr	r0, [pc, #192]	; 33864 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x1ec>
   337a0:	e3a03064 	mov	r3, #100	; 0x64
   337a4:	e5820018 	str	r0, [r2, #24]
   337a8:	e5820018 	str	r0, [r2, #24]
   337ac:	ea000001 	b	337b8 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x140>
   337b0:	e2533001 	subs	r3, r3, #1
   337b4:	0a000002 	beq	337c4 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x14c>
   337b8:	e5912034 	ldr	r2, [r1, #52]	; 0x34
   337bc:	e3120020 	tst	r2, #32
   337c0:	0afffffa 	beq	337b0 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x138>
   337c4:	e1a00005 	mov	r0, r5
   337c8:	ebffff93 	bl	3361c <TargetControl::cycleWaitForReadCompletion()>
   337cc:	e3a02040 	mov	r2, #64	; 0x40
   337d0:	e59f3080 	ldr	r3, [pc, #128]	; 33858 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x1e0>
   337d4:	e5951000 	ldr	r1, [r5]
   337d8:	e583201c 	str	r2, [r3, #28]
   337dc:	e5932008 	ldr	r2, [r3, #8]
   337e0:	e59f006c 	ldr	r0, [pc, #108]	; 33854 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x1dc>
   337e4:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   337e8:	e0810000 	add	r0, r1, r0
   337ec:	e5832008 	str	r2, [r3, #8]
   337f0:	e3a01007 	mov	r1, #7
   337f4:	ebfffaa9 	bl	322a0 <BusRawAccess::muxSet(int)>
   337f8:	e28dd01c 	add	sp, sp, #28
   337fc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   33800:	e314000a 	tst	r4, #10
   33804:	0affffcf 	beq	33748 <TargetControl::cycleFullWaitProcessing(unsigned long)+0xd0>
   33808:	e3560000 	cmp	r6, #0
   3380c:	1a00000c 	bne	33844 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x1cc>
   33810:	e59f2048 	ldr	r2, [pc, #72]	; 33860 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x1e8>
   33814:	e59f0048 	ldr	r0, [pc, #72]	; 33864 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x1ec>
   33818:	e3a03064 	mov	r3, #100	; 0x64
   3381c:	e5820018 	str	r0, [r2, #24]
   33820:	e59f1030 	ldr	r1, [pc, #48]	; 33858 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x1e0>
   33824:	e5820018 	str	r0, [r2, #24]
   33828:	ea000001 	b	33834 <TargetControl::cycleFullWaitProcessing(unsigned long)+0x1bc>
   3382c:	e2533001 	subs	r3, r3, #1
   33830:	0affffe5 	beq	337cc <TargetControl::cycleFullWaitProcessing(unsigned long)+0x154>
   33834:	e5912034 	ldr	r2, [r1, #52]	; 0x34
   33838:	e3120020 	tst	r2, #32
   3383c:	0afffffa 	beq	3382c <TargetControl::cycleFullWaitProcessing(unsigned long)+0x1b4>
   33840:	eaffffe1 	b	337cc <TargetControl::cycleFullWaitProcessing(unsigned long)+0x154>
   33844:	e3a03001 	mov	r3, #1
   33848:	e5c73399 	strb	r3, [r7, #921]	; 0x399
   3384c:	e28dd01c 	add	sp, sp, #28
   33850:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   33854:	001106cc 	.word	0x001106cc
   33858:	20200000 	.word	0x20200000
   3385c:	00249249 	.word	0x00249249
   33860:	2020c000 	.word	0x2020c000
   33864:	0000ffff 	.word	0x0000ffff

00033868 <TargetControl::cycleHandleHeldInWait()>:
   33868:	e92d4010 	push	{r4, lr}
   3386c:	e1a04000 	mov	r4, r0
   33870:	e2800601 	add	r0, r0, #1048576	; 0x100000
   33874:	e5d034a4 	ldrb	r3, [r0, #1188]	; 0x4a4
   33878:	e3530000 	cmp	r3, #0
   3387c:	0a000002 	beq	3388c <TargetControl::cycleHandleHeldInWait()+0x24>
   33880:	e5d034a5 	ldrb	r3, [r0, #1189]	; 0x4a5
   33884:	e3530001 	cmp	r3, #1
   33888:	18bd8010 	popne	{r4, pc}
   3388c:	e3a01000 	mov	r1, #0
   33890:	e59f2078 	ldr	r2, [pc, #120]	; 33910 <TargetControl::cycleHandleHeldInWait()+0xa8>
   33894:	e59fc078 	ldr	ip, [pc, #120]	; 33914 <TargetControl::cycleHandleHeldInWait()+0xac>
   33898:	e5c014a5 	strb	r1, [r0, #1189]	; 0x4a5
   3389c:	e5c01399 	strb	r1, [r0, #921]	; 0x399
   338a0:	e3a03064 	mov	r3, #100	; 0x64
   338a4:	e582c018 	str	ip, [r2, #24]
   338a8:	e59f1068 	ldr	r1, [pc, #104]	; 33918 <TargetControl::cycleHandleHeldInWait()+0xb0>
   338ac:	e582c018 	str	ip, [r2, #24]
   338b0:	ea000001 	b	338bc <TargetControl::cycleHandleHeldInWait()+0x54>
   338b4:	e2533001 	subs	r3, r3, #1
   338b8:	0a000002 	beq	338c8 <TargetControl::cycleHandleHeldInWait()+0x60>
   338bc:	e5912034 	ldr	r2, [r1, #52]	; 0x34
   338c0:	e3120020 	tst	r2, #32
   338c4:	0afffffa 	beq	338b4 <TargetControl::cycleHandleHeldInWait()+0x4c>
   338c8:	e5d0339a 	ldrb	r3, [r0, #922]	; 0x39a
   338cc:	e3530000 	cmp	r3, #0
   338d0:	1a00000b 	bne	33904 <TargetControl::cycleHandleHeldInWait()+0x9c>
   338d4:	e3a02040 	mov	r2, #64	; 0x40
   338d8:	e59f3038 	ldr	r3, [pc, #56]	; 33918 <TargetControl::cycleHandleHeldInWait()+0xb0>
   338dc:	e5941000 	ldr	r1, [r4]
   338e0:	e583201c 	str	r2, [r3, #28]
   338e4:	e5932008 	ldr	r2, [r3, #8]
   338e8:	e59f002c 	ldr	r0, [pc, #44]	; 3391c <TargetControl::cycleHandleHeldInWait()+0xb4>
   338ec:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   338f0:	e0810000 	add	r0, r1, r0
   338f4:	e5832008 	str	r2, [r3, #8]
   338f8:	e3a01007 	mov	r1, #7
   338fc:	e8bd4010 	pop	{r4, lr}
   33900:	eafffa66 	b	322a0 <BusRawAccess::muxSet(int)>
   33904:	e1a00004 	mov	r0, r4
   33908:	ebffff43 	bl	3361c <TargetControl::cycleWaitForReadCompletion()>
   3390c:	eafffff0 	b	338d4 <TargetControl::cycleHandleHeldInWait()+0x6c>
   33910:	2020c000 	.word	0x2020c000
   33914:	0000ffff 	.word	0x0000ffff
   33918:	20200000 	.word	0x20200000
   3391c:	001106cc 	.word	0x001106cc

00033920 <TargetControl::cycleCheckWait()>:
   33920:	e92d4030 	push	{r4, r5, lr}
   33924:	e2805601 	add	r5, r0, #1048576	; 0x100000
   33928:	e5d53399 	ldrb	r3, [r5, #921]	; 0x399
   3392c:	e3530000 	cmp	r3, #0
   33930:	1a000018 	bne	33998 <TargetControl::cycleCheckWait()+0x78>
   33934:	e1a02000 	mov	r2, r0
   33938:	e3a03014 	mov	r3, #20
   3393c:	e59f40b0 	ldr	r4, [pc, #176]	; 339f4 <TargetControl::cycleCheckWait()+0xd4>
   33940:	e5941034 	ldr	r1, [r4, #52]	; 0x34
   33944:	e2010024 	and	r0, r1, #36	; 0x24
   33948:	e3500004 	cmp	r0, #4
   3394c:	e201c806 	and	ip, r1, #393216	; 0x60000
   33950:	e201e003 	and	lr, r1, #3
   33954:	1a00000c 	bne	3398c <TargetControl::cycleCheckWait()+0x6c>
   33958:	e35c0806 	cmp	ip, #393216	; 0x60000
   3395c:	0a00000a 	beq	3398c <TargetControl::cycleCheckWait()+0x6c>
   33960:	e35e0003 	cmp	lr, #3
   33964:	0a000008 	beq	3398c <TargetControl::cycleCheckWait()+0x6c>
   33968:	e3110001 	tst	r1, #1
   3396c:	1a000003 	bne	33980 <TargetControl::cycleCheckWait()+0x60>
   33970:	e59f3080 	ldr	r3, [pc, #128]	; 339f8 <TargetControl::cycleCheckWait()+0xd8>
   33974:	e0033001 	and	r3, r3, r1
   33978:	e3530c0e 	cmp	r3, #3584	; 0xe00
   3397c:	0a000007 	beq	339a0 <TargetControl::cycleCheckWait()+0x80>
   33980:	e8bd4030 	pop	{r4, r5, lr}
   33984:	e1a00002 	mov	r0, r2
   33988:	eaffff3a 	b	33678 <TargetControl::cycleFullWaitProcessing(unsigned long)>
   3398c:	e2533001 	subs	r3, r3, #1
   33990:	1affffea 	bne	33940 <TargetControl::cycleCheckWait()+0x20>
   33994:	e8bd8030 	pop	{r4, r5, pc}
   33998:	e8bd4030 	pop	{r4, r5, lr}
   3399c:	eaffffb1 	b	33868 <TargetControl::cycleHandleHeldInWait()>
   339a0:	e59f0054 	ldr	r0, [pc, #84]	; 339fc <TargetControl::cycleCheckWait()+0xdc>
   339a4:	e1a03a21 	lsr	r3, r1, #20
   339a8:	e6e23073 	uxtab	r3, r2, r3
   339ac:	e7d33000 	ldrb	r3, [r3, r0]
   339b0:	e3530000 	cmp	r3, #0
   339b4:	1afffff1 	bne	33980 <TargetControl::cycleCheckWait()+0x60>
   339b8:	e5d534a4 	ldrb	r3, [r5, #1188]	; 0x4a4
   339bc:	e3530000 	cmp	r3, #0
   339c0:	1affffee 	bne	33980 <TargetControl::cycleCheckWait()+0x60>
   339c4:	e3a03064 	mov	r3, #100	; 0x64
   339c8:	e59f2030 	ldr	r2, [pc, #48]	; 33a00 <TargetControl::cycleCheckWait()+0xe0>
   339cc:	e59f0030 	ldr	r0, [pc, #48]	; 33a04 <TargetControl::cycleCheckWait()+0xe4>
   339d0:	e59f101c 	ldr	r1, [pc, #28]	; 339f4 <TargetControl::cycleCheckWait()+0xd4>
   339d4:	e5820018 	str	r0, [r2, #24]
   339d8:	e5820018 	str	r0, [r2, #24]
   339dc:	e5912034 	ldr	r2, [r1, #52]	; 0x34
   339e0:	e3120020 	tst	r2, #32
   339e4:	18bd8030 	popne	{r4, r5, pc}
   339e8:	e2533001 	subs	r3, r3, #1
   339ec:	1afffffa 	bne	339dc <TargetControl::cycleCheckWait()+0xbc>
   339f0:	e8bd8030 	pop	{r4, r5, pc}
   339f4:	20200000 	.word	0x20200000
   339f8:	00010e00 	.word	0x00010e00
   339fc:	0010039b 	.word	0x0010039b
   33a00:	2020c000 	.word	0x2020c000
   33a04:	0000ffff 	.word	0x0000ffff

00033a08 <TargetControl::cycleService(bool)>:
   33a08:	e2803601 	add	r3, r0, #1048576	; 0x100000
   33a0c:	e5d33378 	ldrb	r3, [r3, #888]	; 0x378
   33a10:	e3530000 	cmp	r3, #0
   33a14:	112fff1e 	bxne	lr
   33a18:	e92d4070 	push	{r4, r5, r6, lr}
   33a1c:	e1a05001 	mov	r5, r1
   33a20:	e1a04000 	mov	r4, r0
   33a24:	ebffffbd 	bl	33920 <TargetControl::cycleCheckWait()>
   33a28:	e3550000 	cmp	r5, #0
   33a2c:	18bd8070 	popne	{r4, r5, r6, pc}
   33a30:	e1a00004 	mov	r0, r4
   33a34:	e8bd4070 	pop	{r4, r5, r6, lr}
   33a38:	eafffeb4 	b	33510 <TargetControl::cycleHandleActions()>

00033a3c <TargetCPUZ80::store16BitVal(unsigned char*, int, unsigned short)>:
   33a3c:	e1a03422 	lsr	r3, r2, #8
   33a40:	e7e02001 	strb	r2, [r0, r1]!
   33a44:	e5c03001 	strb	r3, [r0, #1]
   33a48:	e12fff1e 	bx	lr

00033a4c <TargetCPUZ80::getInjectToSetRegs(Z80Registers&, unsigned char*, unsigned long)>:
   33a4c:	e92d4070 	push	{r4, r5, r6, lr}
   33a50:	e590e018 	ldr	lr, [r0, #24]
   33a54:	e59f3128 	ldr	r3, [pc, #296]	; 33b84 <TargetCPUZ80::getInjectToSetRegs(Z80Registers&, unsigned char*, unsigned long)+0x138>
   33a58:	e590501c 	ldr	r5, [r0, #28]
   33a5c:	e6ffc07e 	uxth	ip, lr
   33a60:	e1a0c42c 	lsr	ip, ip, #8
   33a64:	e5904024 	ldr	r4, [r0, #36]	; 0x24
   33a68:	e5c3c004 	strb	ip, [r3, #4]
   33a6c:	e5c35007 	strb	r5, [r3, #7]
   33a70:	e6ffc075 	uxth	ip, r5
   33a74:	e1d052b0 	ldrh	r5, [r0, #32]
   33a78:	e1a0c42c 	lsr	ip, ip, #8
   33a7c:	e5c3c008 	strb	ip, [r3, #8]
   33a80:	e1c350ba 	strh	r5, [r3, #10]
   33a84:	e6ffc074 	uxth	ip, r4
   33a88:	e1d052b8 	ldrh	r5, [r0, #40]	; 0x28
   33a8c:	e1a0c42c 	lsr	ip, ip, #8
   33a90:	e5c3400d 	strb	r4, [r3, #13]
   33a94:	e1c351b0 	strh	r5, [r3, #16]
   33a98:	e5c3c00e 	strb	ip, [r3, #14]
   33a9c:	e1d0c0b4 	ldrh	ip, [r0, #4]
   33aa0:	e5c3e003 	strb	lr, [r3, #3]
   33aa4:	e1c3c2b4 	strh	ip, [r3, #36]	; 0x24
   33aa8:	e1d0c0b8 	ldrh	ip, [r0, #8]
   33aac:	e590402c 	ldr	r4, [r0, #44]	; 0x2c
   33ab0:	e1c3c1b4 	strh	ip, [r3, #20]
   33ab4:	e590500c 	ldr	r5, [r0, #12]
   33ab8:	e6ffc074 	uxth	ip, r4
   33abc:	e6ffe075 	uxth	lr, r5
   33ac0:	e1a0e42e 	lsr	lr, lr, #8
   33ac4:	e5c3e018 	strb	lr, [r3, #24]
   33ac8:	e5c35017 	strb	r5, [r3, #23]
   33acc:	e1d051b0 	ldrh	r5, [r0, #16]
   33ad0:	e590e034 	ldr	lr, [r0, #52]	; 0x34
   33ad4:	e1a0c42c 	lsr	ip, ip, #8
   33ad8:	e1c351ba 	strh	r5, [r3, #26]
   33adc:	e5c3c01e 	strb	ip, [r3, #30]
   33ae0:	e5c3401d 	strb	r4, [r3, #29]
   33ae4:	e5904014 	ldr	r4, [r0, #20]
   33ae8:	e5c3e027 	strb	lr, [r3, #39]	; 0x27
   33aec:	e590c038 	ldr	ip, [r0, #56]	; 0x38
   33af0:	e6ffe074 	uxth	lr, r4
   33af4:	e28cc0fb 	add	ip, ip, #251	; 0xfb
   33af8:	e27c5000 	rsbs	r5, ip, #0
   33afc:	e6ef5075 	uxtb	r5, r5
   33b00:	e6efc07c 	uxtb	ip, ip
   33b04:	e1a0e42e 	lsr	lr, lr, #8
   33b08:	5265c000 	rsbpl	ip, r5, #0
   33b0c:	e1a05444 	asr	r5, r4, #8
   33b10:	e5c34021 	strb	r4, [r3, #33]	; 0x21
   33b14:	e5c3e022 	strb	lr, [r3, #34]	; 0x22
   33b18:	e5c3c02b 	strb	ip, [r3, #43]	; 0x2b
   33b1c:	e5c3502f 	strb	r5, [r3, #47]	; 0x2f
   33b20:	e590c03c 	ldr	ip, [r0, #60]	; 0x3c
   33b24:	e35c0000 	cmp	ip, #0
   33b28:	03a0c046 	moveq	ip, #70	; 0x46
   33b2c:	0a000002 	beq	33b3c <TargetCPUZ80::getInjectToSetRegs(Z80Registers&, unsigned char*, unsigned long)+0xf0>
   33b30:	e35c0001 	cmp	ip, #1
   33b34:	03a0c056 	moveq	ip, #86	; 0x56
   33b38:	13a0c05e 	movne	ip, #94	; 0x5e
   33b3c:	e5c3c031 	strb	ip, [r3, #49]	; 0x31
   33b40:	e590c040 	ldr	ip, [r0, #64]	; 0x40
   33b44:	e35c0000 	cmp	ip, #0
   33b48:	03a0c0f3 	moveq	ip, #243	; 0xf3
   33b4c:	13a0c0fb 	movne	ip, #251	; 0xfb
   33b50:	e5c3c032 	strb	ip, [r3, #50]	; 0x32
   33b54:	e1d000b0 	ldrh	r0, [r0]
   33b58:	e3520035 	cmp	r2, #53	; 0x35
   33b5c:	e1c303b4 	strh	r0, [r3, #52]	; 0x34
   33b60:	8a000001 	bhi	33b6c <TargetCPUZ80::getInjectToSetRegs(Z80Registers&, unsigned char*, unsigned long)+0x120>
   33b64:	e3a00000 	mov	r0, #0
   33b68:	e8bd8070 	pop	{r4, r5, r6, pc}
   33b6c:	e1a00001 	mov	r0, r1
   33b70:	e3a02036 	mov	r2, #54	; 0x36
   33b74:	e59f1008 	ldr	r1, [pc, #8]	; 33b84 <TargetCPUZ80::getInjectToSetRegs(Z80Registers&, unsigned char*, unsigned long)+0x138>
   33b78:	ebffdb2c 	bl	2a830 <memcpy>
   33b7c:	e3a00036 	mov	r0, #54	; 0x36
   33b80:	e8bd8070 	pop	{r4, r5, r6, pc}
   33b84:	0004a3b0 	.word	0x0004a3b0

00033b88 <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)>:
   33b88:	e92d4070 	push	{r4, r5, r6, lr}
   33b8c:	e5915020 	ldr	r5, [r1, #32]
   33b90:	e59fc140 	ldr	ip, [pc, #320]	; 33cd8 <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)+0x150>
   33b94:	e6ffe075 	uxth	lr, r5
   33b98:	e1a0e42e 	lsr	lr, lr, #8
   33b9c:	e5cce04c 	strb	lr, [ip, #76]	; 0x4c
   33ba0:	e5914028 	ldr	r4, [r1, #40]	; 0x28
   33ba4:	e1d1e1bc 	ldrh	lr, [r1, #28]
   33ba8:	e1d161b8 	ldrh	r6, [r1, #24]
   33bac:	e5cc504b 	strb	r5, [ip, #75]	; 0x4b
   33bb0:	e1cce4b8 	strh	lr, [ip, #72]	; 0x48
   33bb4:	e1d152b4 	ldrh	r5, [r1, #36]	; 0x24
   33bb8:	e6ffe074 	uxth	lr, r4
   33bbc:	e1a0e42e 	lsr	lr, lr, #8
   33bc0:	e1cc54be 	strh	r5, [ip, #78]	; 0x4e
   33bc4:	e5cce052 	strb	lr, [ip, #82]	; 0x52
   33bc8:	e5cc4051 	strb	r4, [ip, #81]	; 0x51
   33bcc:	e1cc64b4 	strh	r6, [ip, #68]	; 0x44
   33bd0:	e5914004 	ldr	r4, [r1, #4]
   33bd4:	e280e006 	add	lr, r0, #6
   33bd8:	e6ff0074 	uxth	r0, r4
   33bdc:	e1a00420 	lsr	r0, r0, #8
   33be0:	e5cc0062 	strb	r0, [ip, #98]	; 0x62
   33be4:	e5cc4061 	strb	r4, [ip, #97]	; 0x61
   33be8:	e5914008 	ldr	r4, [r1, #8]
   33bec:	e5915034 	ldr	r5, [r1, #52]	; 0x34
   33bf0:	e6ff0074 	uxth	r0, r4
   33bf4:	e1a00420 	lsr	r0, r0, #8
   33bf8:	e5cc4055 	strb	r4, [ip, #85]	; 0x55
   33bfc:	e5cc0056 	strb	r0, [ip, #86]	; 0x56
   33c00:	e1d100bc 	ldrh	r0, [r1, #12]
   33c04:	e6ffe07e 	uxth	lr, lr
   33c08:	e1cc05b8 	strh	r0, [ip, #88]	; 0x58
   33c0c:	e5914010 	ldr	r4, [r1, #16]
   33c10:	e5cce039 	strb	lr, [ip, #57]	; 0x39
   33c14:	e6ff0074 	uxth	r0, r4
   33c18:	e1a00420 	lsr	r0, r0, #8
   33c1c:	e5cc005c 	strb	r0, [ip, #92]	; 0x5c
   33c20:	e5cc405b 	strb	r4, [ip, #91]	; 0x5b
   33c24:	e1d161b4 	ldrh	r6, [r1, #20]
   33c28:	e1d102bc 	ldrh	r0, [r1, #44]	; 0x2c
   33c2c:	e1a0e42e 	lsr	lr, lr, #8
   33c30:	e5914014 	ldr	r4, [r1, #20]
   33c34:	e5cce03a 	strb	lr, [ip, #58]	; 0x3a
   33c38:	e5cc5064 	strb	r5, [ip, #100]	; 0x64
   33c3c:	e1cc64b0 	strh	r6, [ip, #64]	; 0x40
   33c40:	e1cc03be 	strh	r0, [ip, #62]	; 0x3e
   33c44:	e591e038 	ldr	lr, [r1, #56]	; 0x38
   33c48:	e1a04444 	asr	r4, r4, #8
   33c4c:	e28ee0fb 	add	lr, lr, #251	; 0xfb
   33c50:	e27e0000 	rsbs	r0, lr, #0
   33c54:	e6ef0070 	uxtb	r0, r0
   33c58:	e6efe07e 	uxtb	lr, lr
   33c5c:	5260e000 	rsbpl	lr, r0, #0
   33c60:	e5cc406c 	strb	r4, [ip, #108]	; 0x6c
   33c64:	e5cce068 	strb	lr, [ip, #104]	; 0x68
   33c68:	e591003c 	ldr	r0, [r1, #60]	; 0x3c
   33c6c:	e3500000 	cmp	r0, #0
   33c70:	03a00046 	moveq	r0, #70	; 0x46
   33c74:	0a000002 	beq	33c84 <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)+0xfc>
   33c78:	e3500001 	cmp	r0, #1
   33c7c:	03a00056 	moveq	r0, #86	; 0x56
   33c80:	13a0005e 	movne	r0, #94	; 0x5e
   33c84:	e5cc006e 	strb	r0, [ip, #110]	; 0x6e
   33c88:	e5910040 	ldr	r0, [r1, #64]	; 0x40
   33c8c:	e3500000 	cmp	r0, #0
   33c90:	03a000f3 	moveq	r0, #243	; 0xf3
   33c94:	13a000fb 	movne	r0, #251	; 0xfb
   33c98:	e5cc006f 	strb	r0, [ip, #111]	; 0x6f
   33c9c:	e5911000 	ldr	r1, [r1]
   33ca0:	e353003a 	cmp	r3, #58	; 0x3a
   33ca4:	e6ff3071 	uxth	r3, r1
   33ca8:	e1a03423 	lsr	r3, r3, #8
   33cac:	e5cc1071 	strb	r1, [ip, #113]	; 0x71
   33cb0:	e5cc3072 	strb	r3, [ip, #114]	; 0x72
   33cb4:	8a000001 	bhi	33cc0 <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)+0x138>
   33cb8:	e3a00000 	mov	r0, #0
   33cbc:	e8bd8070 	pop	{r4, r5, r6, pc}
   33cc0:	e1a00002 	mov	r0, r2
   33cc4:	e59f1010 	ldr	r1, [pc, #16]	; 33cdc <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)+0x154>
   33cc8:	e3a0203b 	mov	r2, #59	; 0x3b
   33ccc:	ebffdad7 	bl	2a830 <memcpy>
   33cd0:	e3a0003b 	mov	r0, #59	; 0x3b
   33cd4:	e8bd8070 	pop	{r4, r5, r6, pc}
   33cd8:	0004a3b0 	.word	0x0004a3b0
   33cdc:	0004a3e8 	.word	0x0004a3e8

00033ce0 <TargetProgrammer::TargetProgrammer()>:
   33ce0:	e3a02000 	mov	r2, #0
   33ce4:	e2803601 	add	r3, r0, #1048576	; 0x100000
   33ce8:	e5832344 	str	r2, [r3, #836]	; 0x344
   33cec:	e5832340 	str	r2, [r3, #832]	; 0x340
   33cf0:	e583233c 	str	r2, [r3, #828]	; 0x33c
   33cf4:	e5832338 	str	r2, [r3, #824]	; 0x338
   33cf8:	e5832334 	str	r2, [r3, #820]	; 0x334
   33cfc:	e5832330 	str	r2, [r3, #816]	; 0x330
   33d00:	e583232c 	str	r2, [r3, #812]	; 0x32c
   33d04:	e5832328 	str	r2, [r3, #808]	; 0x328
   33d08:	e5832358 	str	r2, [r3, #856]	; 0x358
   33d0c:	e5832354 	str	r2, [r3, #852]	; 0x354
   33d10:	e5832350 	str	r2, [r3, #848]	; 0x350
   33d14:	e583234c 	str	r2, [r3, #844]	; 0x34c
   33d18:	e5832348 	str	r2, [r3, #840]	; 0x348
   33d1c:	e583236c 	str	r2, [r3, #876]	; 0x36c
   33d20:	e5832368 	str	r2, [r3, #872]	; 0x368
   33d24:	e5832364 	str	r2, [r3, #868]	; 0x364
   33d28:	e5832360 	str	r2, [r3, #864]	; 0x360
   33d2c:	e583235c 	str	r2, [r3, #860]	; 0x35c
   33d30:	e5832320 	str	r2, [r3, #800]	; 0x320
   33d34:	e5c32324 	strb	r2, [r3, #804]	; 0x324
   33d38:	e12fff1e 	bx	lr

00033d3c <TargetProgrammer::clear()>:
   33d3c:	e3a0c000 	mov	ip, #0
   33d40:	e1a0300c 	mov	r3, ip
   33d44:	e1a0100c 	mov	r1, ip
   33d48:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   33d4c:	e280e601 	add	lr, r0, #1048576	; 0x100000
   33d50:	e5cec324 	strb	ip, [lr, #804]	; 0x324
   33d54:	e58ec320 	str	ip, [lr, #800]	; 0x320
   33d58:	e28e2004 	add	r2, lr, #4
   33d5c:	e7821183 	str	r1, [r2, r3, lsl #3]
   33d60:	e2833001 	add	r3, r3, #1
   33d64:	e3530064 	cmp	r3, #100	; 0x64
   33d68:	1afffffb 	bne	33d5c <TargetProgrammer::clear()+0x20>
   33d6c:	e3a01000 	mov	r1, #0
   33d70:	e240237f 	sub	r2, r0, #-67108863	; 0xfc000001
   33d74:	e242263f 	sub	r2, r2, #66060288	; 0x3f00000
   33d78:	e2403001 	sub	r3, r0, #1
   33d7c:	e5e31001 	strb	r1, [r3, #1]!
   33d80:	e1530002 	cmp	r3, r2
   33d84:	1afffffc 	bne	33d7c <TargetProgrammer::clear()+0x40>
   33d88:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00033d8c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>:
   33d8c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   33d90:	e2807601 	add	r7, r0, #1048576	; 0x100000
   33d94:	e5975320 	ldr	r5, [r7, #800]	; 0x320
   33d98:	e3550000 	cmp	r5, #0
   33d9c:	0a000029 	beq	33e48 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xbc>
   33da0:	e3a0c000 	mov	ip, #0
   33da4:	e2876004 	add	r6, r7, #4
   33da8:	ea000002 	b	33db8 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x2c>
   33dac:	e28cc001 	add	ip, ip, #1
   33db0:	e15c0005 	cmp	ip, r5
   33db4:	0a000014 	beq	33e0c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x80>
   33db8:	e796418c 	ldr	r4, [r6, ip, lsl #3]
   33dbc:	e797e18c 	ldr	lr, [r7, ip, lsl #3]
   33dc0:	e084e00e 	add	lr, r4, lr
   33dc4:	e15e0001 	cmp	lr, r1
   33dc8:	1afffff7 	bne	33dac <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x20>
   33dcc:	e28cc802 	add	ip, ip, #131072	; 0x20000
   33dd0:	e080c18c 	add	ip, r0, ip, lsl #3
   33dd4:	e0844003 	add	r4, r4, r3
   33dd8:	e3530000 	cmp	r3, #0
   33ddc:	e58c4004 	str	r4, [ip, #4]
   33de0:	08bd80f0 	popeq	{r4, r5, r6, r7, pc}
   33de4:	e1a0c001 	mov	ip, r1
   33de8:	e0811003 	add	r1, r1, r3
   33dec:	e042200c 	sub	r2, r2, ip
   33df0:	e35c0601 	cmp	ip, #1048576	; 0x100000
   33df4:	37d2300c 	ldrbcc	r3, [r2, ip]
   33df8:	37c0300c 	strbcc	r3, [r0, ip]
   33dfc:	e28cc001 	add	ip, ip, #1
   33e00:	e15c0001 	cmp	ip, r1
   33e04:	1afffff9 	bne	33df0 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x64>
   33e08:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   33e0c:	e3550064 	cmp	r5, #100	; 0x64
   33e10:	1285c001 	addne	ip, r5, #1
   33e14:	0a000006 	beq	33e34 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xa8>
   33e18:	e0805185 	add	r5, r0, r5, lsl #3
   33e1c:	e2855601 	add	r5, r5, #1048576	; 0x100000
   33e20:	e3530000 	cmp	r3, #0
   33e24:	e885000a 	stm	r5, {r1, r3}
   33e28:	e587c320 	str	ip, [r7, #800]	; 0x320
   33e2c:	1affffec 	bne	33de4 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x58>
   33e30:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   33e34:	e3a01004 	mov	r1, #4
   33e38:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   33e3c:	e59f200c 	ldr	r2, [pc, #12]	; 33e50 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xc4>
   33e40:	e59f000c 	ldr	r0, [pc, #12]	; 33e54 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xc8>
   33e44:	eaffebef 	b	2ee08 <LogWrite>
   33e48:	e3a0c001 	mov	ip, #1
   33e4c:	eafffff1 	b	33e18 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x8c>
   33e50:	000484c8 	.word	0x000484c8
   33e54:	00048520 	.word	0x00048520

00033e58 <TargetProgrammer::addMemoryBlockStatic(unsigned long, unsigned char const*, unsigned long, void*)>:
   33e58:	e253c000 	subs	ip, r3, #0
   33e5c:	e1a03002 	mov	r3, r2
   33e60:	012fff1e 	bxeq	lr
   33e64:	e1a02001 	mov	r2, r1
   33e68:	e1a01000 	mov	r1, r0
   33e6c:	e1a0000c 	mov	r0, ip
   33e70:	eaffffc5 	b	33d8c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>

00033e74 <TargetProgrammer::numMemoryBlocks()>:
   33e74:	e2800601 	add	r0, r0, #1048576	; 0x100000
   33e78:	e5900320 	ldr	r0, [r0, #800]	; 0x320
   33e7c:	e12fff1e 	bx	lr

00033e80 <TargetProgrammer::getMemoryBlock(unsigned long)>:
   33e80:	e2811802 	add	r1, r1, #131072	; 0x20000
   33e84:	e0800181 	add	r0, r0, r1, lsl #3
   33e88:	e12fff1e 	bx	lr

00033e8c <TargetProgrammer::getMemoryImagePtr()>:
   33e8c:	e12fff1e 	bx	lr

00033e90 <TargetProgrammer::getMemoryImageSize()>:
   33e90:	e3a00601 	mov	r0, #1048576	; 0x100000
   33e94:	e12fff1e 	bx	lr

00033e98 <TargetProgrammer::setTargetRegisters(Z80Registers const&)>:
   33e98:	e92d4030 	push	{r4, r5, lr}
   33e9c:	e1a04001 	mov	r4, r1
   33ea0:	e2805601 	add	r5, r0, #1048576	; 0x100000
   33ea4:	e24dd00c 	sub	sp, sp, #12
   33ea8:	e3a02048 	mov	r2, #72	; 0x48
   33eac:	e2850fca 	add	r0, r5, #808	; 0x328
   33eb0:	ebffda5e 	bl	2a830 <memcpy>
   33eb4:	e3a03001 	mov	r3, #1
   33eb8:	e5942004 	ldr	r2, [r4, #4]
   33ebc:	e3a01004 	mov	r1, #4
   33ec0:	e5c53324 	strb	r3, [r5, #804]	; 0x324
   33ec4:	e59f0014 	ldr	r0, [pc, #20]	; 33ee0 <TargetProgrammer::setTargetRegisters(Z80Registers const&)+0x48>
   33ec8:	e5943000 	ldr	r3, [r4]
   33ecc:	e58d2000 	str	r2, [sp]
   33ed0:	e59f200c 	ldr	r2, [pc, #12]	; 33ee4 <TargetProgrammer::setTargetRegisters(Z80Registers const&)+0x4c>
   33ed4:	ebffebcb 	bl	2ee08 <LogWrite>
   33ed8:	e28dd00c 	add	sp, sp, #12
   33edc:	e8bd8030 	pop	{r4, r5, pc}
   33ee0:	00048520 	.word	0x00048520
   33ee4:	000484e8 	.word	0x000484e8

00033ee8 <TargetProgrammer::setTargetRegistersStatic(Z80Registers const&, void*)>:
   33ee8:	e2513000 	subs	r3, r1, #0
   33eec:	e1a01000 	mov	r1, r0
   33ef0:	012fff1e 	bxeq	lr
   33ef4:	e1a00003 	mov	r0, r3
   33ef8:	eaffffe6 	b	33e98 <TargetProgrammer::setTargetRegisters(Z80Registers const&)>

00033efc <TargetProgrammer::areRegistersValid()>:
   33efc:	e2800601 	add	r0, r0, #1048576	; 0x100000
   33f00:	e5d00324 	ldrb	r0, [r0, #804]	; 0x324
   33f04:	e12fff1e 	bx	lr

00033f08 <TargetProgrammer::getTargetRegs(Z80Registers&)>:
   33f08:	e1a03001 	mov	r3, r1
   33f0c:	e2801601 	add	r1, r0, #1048576	; 0x100000
   33f10:	e3a02048 	mov	r2, #72	; 0x48
   33f14:	e1a00003 	mov	r0, r3
   33f18:	e92d4010 	push	{r4, lr}
   33f1c:	e2811fca 	add	r1, r1, #808	; 0x328
   33f20:	ebffda42 	bl	2a830 <memcpy>
   33f24:	e8bd4010 	pop	{r4, lr}
   33f28:	e5903000 	ldr	r3, [r0]
   33f2c:	e3a01004 	mov	r1, #4
   33f30:	e59f2004 	ldr	r2, [pc, #4]	; 33f3c <TargetProgrammer::getTargetRegs(Z80Registers&)+0x34>
   33f34:	e59f0004 	ldr	r0, [pc, #4]	; 33f40 <TargetProgrammer::getTargetRegs(Z80Registers&)+0x38>
   33f38:	eaffebb2 	b	2ee08 <LogWrite>
   33f3c:	00048508 	.word	0x00048508
   33f40:	00048520 	.word	0x00048520

00033f44 <MemoryController::MemoryController(BusControl&)>:
   33f44:	e5801000 	str	r1, [r0]
   33f48:	e12fff1e 	bx	lr

00033f4c <MemoryController::clear()>:
   33f4c:	e12fff1e 	bx	lr

00033f50 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>:
   33f50:	e92d4070 	push	{r4, r5, r6, lr}
   33f54:	e5905000 	ldr	r5, [r0]
   33f58:	e5dd6010 	ldrb	r6, [sp, #16]
   33f5c:	e285e601 	add	lr, r5, #1048576	; 0x100000
   33f60:	e5dee4b8 	ldrb	lr, [lr, #1208]	; 0x4b8
   33f64:	e35e0000 	cmp	lr, #0
   33f68:	0a00000f 	beq	33fac <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x5c>
   33f6c:	e3510801 	cmp	r1, #65536	; 0x10000
   33f70:	2a00000b 	bcs	33fa4 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x54>
   33f74:	e1a0e003 	mov	lr, r3
   33f78:	e1a04002 	mov	r4, r2
   33f7c:	e0813003 	add	r3, r1, r3
   33f80:	e3530801 	cmp	r3, #65536	; 0x10000
   33f84:	8261e801 	rsbhi	lr, r1, #65536	; 0x10000
   33f88:	e2800004 	add	r0, r0, #4
   33f8c:	e0801001 	add	r1, r0, r1
   33f90:	e1a0200e 	mov	r2, lr
   33f94:	e1a00004 	mov	r0, r4
   33f98:	ebffda24 	bl	2a830 <memcpy>
   33f9c:	e3a00000 	mov	r0, #0
   33fa0:	e8bd8070 	pop	{r4, r5, r6, pc}
   33fa4:	e3a00001 	mov	r0, #1
   33fa8:	e8bd8070 	pop	{r4, r5, r6, pc}
   33fac:	e59f000c 	ldr	r0, [pc, #12]	; 33fc0 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x70>
   33fb0:	e58d6010 	str	r6, [sp, #16]
   33fb4:	e0850000 	add	r0, r5, r0
   33fb8:	e8bd4070 	pop	{r4, r5, r6, lr}
   33fbc:	ea0000f2 	b	3438c <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   33fc0:	001106cc 	.word	0x001106cc

00033fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>:
   33fc4:	e92d4070 	push	{r4, r5, r6, lr}
   33fc8:	e5905000 	ldr	r5, [r0]
   33fcc:	e5dd6010 	ldrb	r6, [sp, #16]
   33fd0:	e285e601 	add	lr, r5, #1048576	; 0x100000
   33fd4:	e5dee4b8 	ldrb	lr, [lr, #1208]	; 0x4b8
   33fd8:	e35e0000 	cmp	lr, #0
   33fdc:	0a00000f 	beq	34020 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x5c>
   33fe0:	e3510801 	cmp	r1, #65536	; 0x10000
   33fe4:	2a00000b 	bcs	34018 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x54>
   33fe8:	e1a0e003 	mov	lr, r3
   33fec:	e1a04002 	mov	r4, r2
   33ff0:	e0813003 	add	r3, r1, r3
   33ff4:	e3530801 	cmp	r3, #65536	; 0x10000
   33ff8:	8261e801 	rsbhi	lr, r1, #65536	; 0x10000
   33ffc:	e2800004 	add	r0, r0, #4
   34000:	e1a0200e 	mov	r2, lr
   34004:	e0800001 	add	r0, r0, r1
   34008:	e1a01004 	mov	r1, r4
   3400c:	ebffda07 	bl	2a830 <memcpy>
   34010:	e3a00000 	mov	r0, #0
   34014:	e8bd8070 	pop	{r4, r5, r6, pc}
   34018:	e3a00001 	mov	r0, #1
   3401c:	e8bd8070 	pop	{r4, r5, r6, pc}
   34020:	e59f000c 	ldr	r0, [pc, #12]	; 34034 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x70>
   34024:	e58d6010 	str	r6, [sp, #16]
   34028:	e0850000 	add	r0, r5, r0
   3402c:	e8bd4070 	pop	{r4, r5, r6, lr}
   34030:	ea000134 	b	34508 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   34034:	001106cc 	.word	0x001106cc

00034038 <MemoryController::memCacheBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>:
   34038:	e3510801 	cmp	r1, #65536	; 0x10000
   3403c:	2a00000b 	bcs	34070 <MemoryController::memCacheBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x38>
   34040:	e1a0c000 	mov	ip, r0
   34044:	e1a00002 	mov	r0, r2
   34048:	e0812003 	add	r2, r1, r3
   3404c:	e3520801 	cmp	r2, #65536	; 0x10000
   34050:	82613801 	rsbhi	r3, r1, #65536	; 0x10000
   34054:	e28cc004 	add	ip, ip, #4
   34058:	e1a02003 	mov	r2, r3
   3405c:	e92d4010 	push	{r4, lr}
   34060:	e08c1001 	add	r1, ip, r1
   34064:	ebffd9f1 	bl	2a830 <memcpy>
   34068:	e3a00000 	mov	r0, #0
   3406c:	e8bd8010 	pop	{r4, pc}
   34070:	e3a00001 	mov	r0, #1
   34074:	e12fff1e 	bx	lr

00034078 <MemoryController::memCacheBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>:
   34078:	e3510801 	cmp	r1, #65536	; 0x10000
   3407c:	2a00000b 	bcs	340b0 <MemoryController::memCacheBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x38>
   34080:	e1a0c002 	mov	ip, r2
   34084:	e0812003 	add	r2, r1, r3
   34088:	e3520801 	cmp	r2, #65536	; 0x10000
   3408c:	82613801 	rsbhi	r3, r1, #65536	; 0x10000
   34090:	e2800004 	add	r0, r0, #4
   34094:	e1a02003 	mov	r2, r3
   34098:	e92d4010 	push	{r4, lr}
   3409c:	e0800001 	add	r0, r0, r1
   340a0:	e1a0100c 	mov	r1, ip
   340a4:	ebffd9e1 	bl	2a830 <memcpy>
   340a8:	e3a00000 	mov	r0, #0
   340ac:	e8bd8010 	pop	{r4, pc}
   340b0:	e3a00001 	mov	r0, #1
   340b4:	e12fff1e 	bx	lr

000340b8 <BusRawAccess::addrLowSet(unsigned long)>:
   340b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   340bc:	e1a04000 	mov	r4, r0
   340c0:	e1a07001 	mov	r7, r1
   340c4:	ebfff8cd 	bl	32400 <BusRawAccess::muxClearLowAddr()>
   340c8:	e5943004 	ldr	r3, [r4, #4]
   340cc:	e3530011 	cmp	r3, #17
   340d0:	0a000013 	beq	34124 <BusRawAccess::addrLowSet(unsigned long)+0x6c>
   340d4:	e3a02000 	mov	r2, #0
   340d8:	e3a06801 	mov	r6, #65536	; 0x10000
   340dc:	e59f307c 	ldr	r3, [pc, #124]	; 34160 <BusRawAccess::addrLowSet(unsigned long)+0xa8>
   340e0:	e3a01c0e 	mov	r1, #3584	; 0xe00
   340e4:	e1a05003 	mov	r5, r3
   340e8:	e1a04002 	mov	r4, r2
   340ec:	e1a08006 	mov	r8, r6
   340f0:	e5831028 	str	r1, [r3, #40]	; 0x28
   340f4:	e6ef7077 	uxtb	r7, r7
   340f8:	e583201c 	str	r2, [r3, #28]
   340fc:	e3a00f7d 	mov	r0, #500	; 0x1f4
   34100:	e5858028 	str	r8, [r5, #40]	; 0x28
   34104:	eb002d69 	bl	3f6b0 <lowlev_cycleDelay>
   34108:	e3a00f7d 	mov	r0, #500	; 0x1f4
   3410c:	e585601c 	str	r6, [r5, #28]
   34110:	eb002d66 	bl	3f6b0 <lowlev_cycleDelay>
   34114:	e1570004 	cmp	r7, r4
   34118:	e2844001 	add	r4, r4, #1
   3411c:	1afffff6 	bne	340fc <BusRawAccess::addrLowSet(unsigned long)+0x44>
   34120:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34124:	e3a06801 	mov	r6, #65536	; 0x10000
   34128:	e3a04000 	mov	r4, #0
   3412c:	e1a08006 	mov	r8, r6
   34130:	e59f5028 	ldr	r5, [pc, #40]	; 34160 <BusRawAccess::addrLowSet(unsigned long)+0xa8>
   34134:	e6ef7077 	uxtb	r7, r7
   34138:	e3a00f7d 	mov	r0, #500	; 0x1f4
   3413c:	e585801c 	str	r8, [r5, #28]
   34140:	eb002d5a 	bl	3f6b0 <lowlev_cycleDelay>
   34144:	e3a00f7d 	mov	r0, #500	; 0x1f4
   34148:	e5856028 	str	r6, [r5, #40]	; 0x28
   3414c:	eb002d57 	bl	3f6b0 <lowlev_cycleDelay>
   34150:	e1570004 	cmp	r7, r4
   34154:	e2844001 	add	r4, r4, #1
   34158:	1afffff6 	bne	34138 <BusRawAccess::addrLowSet(unsigned long)+0x80>
   3415c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34160:	20200000 	.word	0x20200000

00034164 <BusRawAccess::addrHighSet(unsigned long)>:
   34164:	e5903004 	ldr	r3, [r0, #4]
   34168:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3416c:	e3530011 	cmp	r3, #17
   34170:	e1a04001 	mov	r4, r1
   34174:	0a000020 	beq	341fc <BusRawAccess::addrHighSet(unsigned long)+0x98>
   34178:	e3a05801 	mov	r5, #65536	; 0x10000
   3417c:	e3a00080 	mov	r0, #128	; 0x80
   34180:	e3a07d3a 	mov	r7, #3712	; 0xe80
   34184:	e3a06b02 	mov	r6, #2048	; 0x800
   34188:	e1a0e005 	mov	lr, r5
   3418c:	e1a02000 	mov	r2, r0
   34190:	e3a01009 	mov	r1, #9
   34194:	e59fc0b0 	ldr	ip, [pc, #176]	; 3424c <BusRawAccess::addrHighSet(unsigned long)+0xe8>
   34198:	e58c501c 	str	r5, [ip, #28]
   3419c:	e1a0300c 	mov	r3, ip
   341a0:	e58c7028 	str	r7, [ip, #40]	; 0x28
   341a4:	e58c601c 	str	r6, [ip, #28]
   341a8:	e59fc0a0 	ldr	ip, [pc, #160]	; 34250 <BusRawAccess::addrHighSet(unsigned long)+0xec>
   341ac:	e3140080 	tst	r4, #128	; 0x80
   341b0:	1583e01c 	strne	lr, [r3, #28]
   341b4:	0583c028 	streq	ip, [r3, #40]	; 0x28
   341b8:	15830028 	strne	r0, [r3, #40]	; 0x28
   341bc:	e2511001 	subs	r1, r1, #1
   341c0:	e5832028 	str	r2, [r3, #40]	; 0x28
   341c4:	e1a04084 	lsl	r4, r4, #1
   341c8:	e5832028 	str	r2, [r3, #40]	; 0x28
   341cc:	e5832028 	str	r2, [r3, #40]	; 0x28
   341d0:	e5832028 	str	r2, [r3, #40]	; 0x28
   341d4:	e5832028 	str	r2, [r3, #40]	; 0x28
   341d8:	e5832028 	str	r2, [r3, #40]	; 0x28
   341dc:	e5832028 	str	r2, [r3, #40]	; 0x28
   341e0:	e583201c 	str	r2, [r3, #28]
   341e4:	1afffff0 	bne	341ac <BusRawAccess::addrHighSet(unsigned long)+0x48>
   341e8:	e3a01801 	mov	r1, #65536	; 0x10000
   341ec:	e3a02d3a 	mov	r2, #3712	; 0xe80
   341f0:	e583101c 	str	r1, [r3, #28]
   341f4:	e5832028 	str	r2, [r3, #40]	; 0x28
   341f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   341fc:	e1a07000 	mov	r7, r0
   34200:	e3a05009 	mov	r5, #9
   34204:	e59f8040 	ldr	r8, [pc, #64]	; 3424c <BusRawAccess::addrHighSet(unsigned long)+0xe8>
   34208:	e3a06080 	mov	r6, #128	; 0x80
   3420c:	e2141080 	ands	r1, r4, #128	; 0x80
   34210:	13a01004 	movne	r1, #4
   34214:	e1a00007 	mov	r0, r7
   34218:	ebfff820 	bl	322a0 <BusRawAccess::muxSet(int)>
   3421c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   34220:	eb002d22 	bl	3f6b0 <lowlev_cycleDelay>
   34224:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   34228:	e588601c 	str	r6, [r8, #28]
   3422c:	eb002d1f 	bl	3f6b0 <lowlev_cycleDelay>
   34230:	e2555001 	subs	r5, r5, #1
   34234:	e1a04084 	lsl	r4, r4, #1
   34238:	e5886028 	str	r6, [r8, #40]	; 0x28
   3423c:	1afffff1 	bne	34208 <BusRawAccess::addrHighSet(unsigned long)+0xa4>
   34240:	e1a00007 	mov	r0, r7
   34244:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   34248:	eafff827 	b	322ec <BusRawAccess::muxClear()>
   3424c:	20200000 	.word	0x20200000
   34250:	00010080 	.word	0x00010080

00034254 <BusRawAccess::addrSet(unsigned int)>:
   34254:	e92d4070 	push	{r4, r5, r6, lr}
   34258:	e1a04001 	mov	r4, r1
   3425c:	e1a05000 	mov	r5, r0
   34260:	e1a01421 	lsr	r1, r1, #8
   34264:	ebffffbe 	bl	34164 <BusRawAccess::addrHighSet(unsigned long)>
   34268:	e1a00005 	mov	r0, r5
   3426c:	e6ef1074 	uxtb	r1, r4
   34270:	e8bd4070 	pop	{r4, r5, r6, lr}
   34274:	eaffff8f 	b	340b8 <BusRawAccess::addrLowSet(unsigned long)>

00034278 <BusRawAccess::addrLowInc()>:
   34278:	e5903004 	ldr	r3, [r0, #4]
   3427c:	e92d4070 	push	{r4, r5, r6, lr}
   34280:	e3530011 	cmp	r3, #17
   34284:	0a000007 	beq	342a8 <BusRawAccess::addrLowInc()+0x30>
   34288:	e3a03c0e 	mov	r3, #3584	; 0xe00
   3428c:	e59f4038 	ldr	r4, [pc, #56]	; 342cc <BusRawAccess::addrLowInc()+0x54>
   34290:	e3a00f7d 	mov	r0, #500	; 0x1f4
   34294:	e5843028 	str	r3, [r4, #40]	; 0x28
   34298:	eb002d04 	bl	3f6b0 <lowlev_cycleDelay>
   3429c:	e3a03801 	mov	r3, #65536	; 0x10000
   342a0:	e584301c 	str	r3, [r4, #28]
   342a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   342a8:	e3a05801 	mov	r5, #65536	; 0x10000
   342ac:	e59f4018 	ldr	r4, [pc, #24]	; 342cc <BusRawAccess::addrLowInc()+0x54>
   342b0:	e3a00f7d 	mov	r0, #500	; 0x1f4
   342b4:	e584501c 	str	r5, [r4, #28]
   342b8:	eb002cfc 	bl	3f6b0 <lowlev_cycleDelay>
   342bc:	e5845028 	str	r5, [r4, #40]	; 0x28
   342c0:	e3a00f7d 	mov	r0, #500	; 0x1f4
   342c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   342c8:	ea002cf8 	b	3f6b0 <lowlev_cycleDelay>
   342cc:	20200000 	.word	0x20200000

000342d0 <BusRawAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>:
   342d0:	e5903004 	ldr	r3, [r0, #4]
   342d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   342d8:	e3530011 	cmp	r3, #17
   342dc:	e1a07002 	mov	r7, r2
   342e0:	03a02040 	moveq	r2, #64	; 0x40
   342e4:	e1a04000 	mov	r4, r0
   342e8:	e1a06001 	mov	r6, r1
   342ec:	059f3094 	ldreq	r3, [pc, #148]	; 34388 <BusRawAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0xb8>
   342f0:	e59f5090 	ldr	r5, [pc, #144]	; 34388 <BusRawAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0xb8>
   342f4:	05832028 	streq	r2, [r3, #40]	; 0x28
   342f8:	e5953008 	ldr	r3, [r5, #8]
   342fc:	e3a01007 	mov	r1, #7
   34300:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   34304:	e5853008 	str	r3, [r5, #8]
   34308:	ebfff7e4 	bl	322a0 <BusRawAccess::muxSet(int)>
   3430c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   34310:	eb002ce6 	bl	3f6b0 <lowlev_cycleDelay>
   34314:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   34318:	e3a01003 	mov	r1, #3
   3431c:	e1a03623 	lsr	r3, r3, #12
   34320:	e2033cff 	and	r3, r3, #65280	; 0xff00
   34324:	e5863000 	str	r3, [r6]
   34328:	e1a00004 	mov	r0, r4
   3432c:	ebfff7db 	bl	322a0 <BusRawAccess::muxSet(int)>
   34330:	e3a00f7d 	mov	r0, #500	; 0x1f4
   34334:	eb002cdd 	bl	3f6b0 <lowlev_cycleDelay>
   34338:	e5952034 	ldr	r2, [r5, #52]	; 0x34
   3433c:	e5963000 	ldr	r3, [r6]
   34340:	e1a02202 	lsl	r2, r2, #4
   34344:	e1833c22 	orr	r3, r3, r2, lsr #24
   34348:	e5863000 	str	r3, [r6]
   3434c:	e1a00004 	mov	r0, r4
   34350:	ebfff7e5 	bl	322ec <BusRawAccess::muxClear()>
   34354:	e3a00f7d 	mov	r0, #500	; 0x1f4
   34358:	eb002cd4 	bl	3f6b0 <lowlev_cycleDelay>
   3435c:	e3a03040 	mov	r3, #64	; 0x40
   34360:	e1a00004 	mov	r0, r4
   34364:	e585301c 	str	r3, [r5, #28]
   34368:	ebfff7ea 	bl	32318 <BusRawAccess::muxDataBusOutputEnable()>
   3436c:	e3a00f7d 	mov	r0, #500	; 0x1f4
   34370:	eb002cce 	bl	3f6b0 <lowlev_cycleDelay>
   34374:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   34378:	e1a03a23 	lsr	r3, r3, #20
   3437c:	e6ef3073 	uxtb	r3, r3
   34380:	e5873000 	str	r3, [r7]
   34384:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34388:	20200000 	.word	0x20200000

0003438c <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>:
   3438c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34390:	e3a0e040 	mov	lr, #64	; 0x40
   34394:	e59f4158 	ldr	r4, [pc, #344]	; 344f4 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x168>
   34398:	e24dd00c 	sub	sp, sp, #12
   3439c:	e594c008 	ldr	ip, [r4, #8]
   343a0:	e5dd5030 	ldrb	r5, [sp, #48]	; 0x30
   343a4:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   343a8:	e58d2004 	str	r2, [sp, #4]
   343ac:	e584c008 	str	ip, [r4, #8]
   343b0:	e584e01c 	str	lr, [r4, #28]
   343b4:	e1a0a000 	mov	sl, r0
   343b8:	e1a09001 	mov	r9, r1
   343bc:	e1a08003 	mov	r8, r3
   343c0:	ebffffa3 	bl	34254 <BusRawAccess::addrSet(unsigned int)>
   343c4:	e3a03801 	mov	r3, #65536	; 0x10000
   343c8:	e3a00001 	mov	r0, #1
   343cc:	e584301c 	str	r3, [r4, #28]
   343d0:	ebffe68f 	bl	2de14 <microsDelay>
   343d4:	e59f111c 	ldr	r1, [pc, #284]	; 344f8 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x16c>
   343d8:	e59a3004 	ldr	r3, [sl, #4]
   343dc:	e3550001 	cmp	r5, #1
   343e0:	e59f7114 	ldr	r7, [pc, #276]	; 344fc <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x170>
   343e4:	11a07001 	movne	r7, r1
   343e8:	e3530011 	cmp	r3, #17
   343ec:	e59d2004 	ldr	r2, [sp, #4]
   343f0:	0a000026 	beq	34490 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x104>
   343f4:	e3580000 	cmp	r8, #0
   343f8:	e387bc0e 	orr	fp, r7, #3584	; 0xe00
   343fc:	e3877801 	orr	r7, r7, #65536	; 0x10000
   34400:	0a00001f 	beq	34484 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0xf8>
   34404:	e1a06002 	mov	r6, r2
   34408:	e59f30f0 	ldr	r3, [pc, #240]	; 34500 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x174>
   3440c:	e59f50f0 	ldr	r5, [pc, #240]	; 34504 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x178>
   34410:	e0828008 	add	r8, r2, r8
   34414:	e0499002 	sub	r9, r9, r2
   34418:	ea000001 	b	34424 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x98>
   3441c:	e1580006 	cmp	r8, r6
   34420:	0a000017 	beq	34484 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0xf8>
   34424:	e3a02801 	mov	r2, #65536	; 0x10000
   34428:	e584b028 	str	fp, [r4, #40]	; 0x28
   3442c:	e584301c 	str	r3, [r4, #28]
   34430:	e5842028 	str	r2, [r4, #40]	; 0x28
   34434:	e5845028 	str	r5, [r4, #40]	; 0x28
   34438:	e5845028 	str	r5, [r4, #40]	; 0x28
   3443c:	e5845028 	str	r5, [r4, #40]	; 0x28
   34440:	e5845028 	str	r5, [r4, #40]	; 0x28
   34444:	e5845028 	str	r5, [r4, #40]	; 0x28
   34448:	e5845028 	str	r5, [r4, #40]	; 0x28
   3444c:	e5845028 	str	r5, [r4, #40]	; 0x28
   34450:	e5845028 	str	r5, [r4, #40]	; 0x28
   34454:	e5942034 	ldr	r2, [r4, #52]	; 0x34
   34458:	e1a02a22 	lsr	r2, r2, #20
   3445c:	e4c62001 	strb	r2, [r6], #1
   34460:	e0861009 	add	r1, r6, r9
   34464:	e31100ff 	tst	r1, #255	; 0xff
   34468:	e584701c 	str	r7, [r4, #28]
   3446c:	1affffea 	bne	3441c <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x90>
   34470:	e1a0000a 	mov	r0, sl
   34474:	ebffff76 	bl	34254 <BusRawAccess::addrSet(unsigned int)>
   34478:	e1580006 	cmp	r8, r6
   3447c:	e59f307c 	ldr	r3, [pc, #124]	; 34500 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x174>
   34480:	1affffe7 	bne	34424 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x98>
   34484:	e3a00000 	mov	r0, #0
   34488:	e28dd00c 	add	sp, sp, #12
   3448c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34490:	e3580000 	cmp	r8, #0
   34494:	0afffffa 	beq	34484 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0xf8>
   34498:	e1a05002 	mov	r5, r2
   3449c:	e0828008 	add	r8, r2, r8
   344a0:	e0499002 	sub	r9, r9, r2
   344a4:	ea000001 	b	344b0 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x124>
   344a8:	e1550008 	cmp	r5, r8
   344ac:	0afffff4 	beq	34484 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0xf8>
   344b0:	e1a0000a 	mov	r0, sl
   344b4:	ebfff797 	bl	32318 <BusRawAccess::muxDataBusOutputEnable()>
   344b8:	e3a00f7d 	mov	r0, #500	; 0x1f4
   344bc:	e5847028 	str	r7, [r4, #40]	; 0x28
   344c0:	eb002c7a 	bl	3f6b0 <lowlev_cycleDelay>
   344c4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   344c8:	e1a0000a 	mov	r0, sl
   344cc:	e1a03a23 	lsr	r3, r3, #20
   344d0:	e4c53001 	strb	r3, [r5], #1
   344d4:	e584701c 	str	r7, [r4, #28]
   344d8:	ebffff66 	bl	34278 <BusRawAccess::addrLowInc()>
   344dc:	e0851009 	add	r1, r5, r9
   344e0:	e31100ff 	tst	r1, #255	; 0xff
   344e4:	1affffef 	bne	344a8 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x11c>
   344e8:	e1a0000a 	mov	r0, sl
   344ec:	ebffff58 	bl	34254 <BusRawAccess::addrSet(unsigned int)>
   344f0:	eaffffec 	b	344a8 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x11c>
   344f4:	20200000 	.word	0x20200000
   344f8:	00040001 	.word	0x00040001
   344fc:	00040002 	.word	0x00040002
   34500:	00010200 	.word	0x00010200
   34504:	00010e00 	.word	0x00010e00

00034508 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>:
   34508:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3450c:	e1a07000 	mov	r7, r0
   34510:	e59f41c8 	ldr	r4, [pc, #456]	; 346e0 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1d8>
   34514:	e24dd00c 	sub	sp, sp, #12
   34518:	e594c008 	ldr	ip, [r4, #8]
   3451c:	e5dda030 	ldrb	sl, [sp, #48]	; 0x30
   34520:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   34524:	e584c008 	str	ip, [r4, #8]
   34528:	e1a09002 	mov	r9, r2
   3452c:	e1a05003 	mov	r5, r3
   34530:	e1a06001 	mov	r6, r1
   34534:	ebffff46 	bl	34254 <BusRawAccess::addrSet(unsigned int)>
   34538:	e5942008 	ldr	r2, [r4, #8]
   3453c:	e59f31a0 	ldr	r3, [pc, #416]	; 346e4 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1dc>
   34540:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   34544:	e1823003 	orr	r3, r2, r3
   34548:	e5843008 	str	r3, [r4, #8]
   3454c:	e5973004 	ldr	r3, [r7, #4]
   34550:	e3530011 	cmp	r3, #17
   34554:	0a000031 	beq	34620 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x118>
   34558:	e59f2188 	ldr	r2, [pc, #392]	; 346e8 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1e0>
   3455c:	e59f3188 	ldr	r3, [pc, #392]	; 346ec <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1e4>
   34560:	e35a0001 	cmp	sl, #1
   34564:	01a0a002 	moveq	sl, r2
   34568:	11a0a003 	movne	sl, r3
   3456c:	e3550000 	cmp	r5, #0
   34570:	0a000023 	beq	34604 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0xfc>
   34574:	e1a0b009 	mov	fp, r9
   34578:	e59f8170 	ldr	r8, [pc, #368]	; 346f0 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1e8>
   3457c:	e0899005 	add	r9, r9, r5
   34580:	e046600b 	sub	r6, r6, fp
   34584:	e38a5801 	orr	r5, sl, #65536	; 0x10000
   34588:	ea000001 	b	34594 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x8c>
   3458c:	e159000b 	cmp	r9, fp
   34590:	0a00001b 	beq	34604 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0xfc>
   34594:	e3a0cc02 	mov	ip, #512	; 0x200
   34598:	e3a00803 	mov	r0, #196608	; 0x30000
   3459c:	e3a02802 	mov	r2, #131072	; 0x20000
   345a0:	e4db3001 	ldrb	r3, [fp], #1
   345a4:	e1a03a03 	lsl	r3, r3, #20
   345a8:	e08b1006 	add	r1, fp, r6
   345ac:	e584301c 	str	r3, [r4, #28]
   345b0:	e31100ff 	tst	r1, #255	; 0xff
   345b4:	e22336ff 	eor	r3, r3, #267386880	; 0xff00000
   345b8:	e5843028 	str	r3, [r4, #40]	; 0x28
   345bc:	e584a028 	str	sl, [r4, #40]	; 0x28
   345c0:	e584c01c 	str	ip, [r4, #28]
   345c4:	e5840028 	str	r0, [r4, #40]	; 0x28
   345c8:	e5848028 	str	r8, [r4, #40]	; 0x28
   345cc:	e5848028 	str	r8, [r4, #40]	; 0x28
   345d0:	e5848028 	str	r8, [r4, #40]	; 0x28
   345d4:	e5848028 	str	r8, [r4, #40]	; 0x28
   345d8:	e5848028 	str	r8, [r4, #40]	; 0x28
   345dc:	e5848028 	str	r8, [r4, #40]	; 0x28
   345e0:	e5848028 	str	r8, [r4, #40]	; 0x28
   345e4:	e5848028 	str	r8, [r4, #40]	; 0x28
   345e8:	e584201c 	str	r2, [r4, #28]
   345ec:	e584501c 	str	r5, [r4, #28]
   345f0:	1affffe5 	bne	3458c <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x84>
   345f4:	e1a00007 	mov	r0, r7
   345f8:	ebffff15 	bl	34254 <BusRawAccess::addrSet(unsigned int)>
   345fc:	e159000b 	cmp	r9, fp
   34600:	1affffe3 	bne	34594 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x8c>
   34604:	e3a00000 	mov	r0, #0
   34608:	e59f20d0 	ldr	r2, [pc, #208]	; 346e0 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1d8>
   3460c:	e5923008 	ldr	r3, [r2, #8]
   34610:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   34614:	e5823008 	str	r3, [r2, #8]
   34618:	e28dd00c 	add	sp, sp, #12
   3461c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34620:	e3550000 	cmp	r5, #0
   34624:	0afffff6 	beq	34604 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0xfc>
   34628:	e59f30c4 	ldr	r3, [pc, #196]	; 346f4 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1ec>
   3462c:	e35a0001 	cmp	sl, #1
   34630:	e59f20c0 	ldr	r2, [pc, #192]	; 346f8 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1f0>
   34634:	11a02003 	movne	r2, r3
   34638:	e2455001 	sub	r5, r5, #1
   3463c:	e1a0b004 	mov	fp, r4
   34640:	e58d2004 	str	r2, [sp, #4]
   34644:	e0895005 	add	r5, r9, r5
   34648:	e2498001 	sub	r8, r9, #1
   3464c:	ea000014 	b	346a4 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x19c>
   34650:	e3a01c02 	mov	r1, #512	; 0x200
   34654:	e3a03802 	mov	r3, #131072	; 0x20000
   34658:	e59f208c 	ldr	r2, [pc, #140]	; 346ec <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1e4>
   3465c:	e58b2028 	str	r2, [fp, #40]	; 0x28
   34660:	e3a000fa 	mov	r0, #250	; 0xfa
   34664:	e58b101c 	str	r1, [fp, #28]
   34668:	e58b3028 	str	r3, [fp, #40]	; 0x28
   3466c:	eb002c0f 	bl	3f6b0 <lowlev_cycleDelay>
   34670:	e59d3004 	ldr	r3, [sp, #4]
   34674:	e1a00007 	mov	r0, r7
   34678:	e58b301c 	str	r3, [fp, #28]
   3467c:	ebfff71a 	bl	322ec <BusRawAccess::muxClear()>
   34680:	e1a00007 	mov	r0, r7
   34684:	ebfffefb 	bl	34278 <BusRawAccess::addrLowInc()>
   34688:	e2841002 	add	r1, r4, #2
   3468c:	e0811006 	add	r1, r1, r6
   34690:	e0411009 	sub	r1, r1, r9
   34694:	e31100ff 	tst	r1, #255	; 0xff
   34698:	0a00000d 	beq	346d4 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1cc>
   3469c:	e1550008 	cmp	r5, r8
   346a0:	0affffd7 	beq	34604 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0xfc>
   346a4:	e1a04008 	mov	r4, r8
   346a8:	e5f83001 	ldrb	r3, [r8, #1]!
   346ac:	e35a0001 	cmp	sl, #1
   346b0:	e1a03a03 	lsl	r3, r3, #20
   346b4:	e22316ff 	eor	r1, r3, #267386880	; 0xff00000
   346b8:	e58b301c 	str	r3, [fp, #28]
   346bc:	e58b1028 	str	r1, [fp, #40]	; 0x28
   346c0:	1affffe2 	bne	34650 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x148>
   346c4:	e3a01c02 	mov	r1, #512	; 0x200
   346c8:	e3a03802 	mov	r3, #131072	; 0x20000
   346cc:	e59f2014 	ldr	r2, [pc, #20]	; 346e8 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1e0>
   346d0:	eaffffe1 	b	3465c <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x154>
   346d4:	e1a00007 	mov	r0, r7
   346d8:	ebfffedd 	bl	34254 <BusRawAccess::addrSet(unsigned int)>
   346dc:	eaffffee 	b	3469c <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x194>
   346e0:	20200000 	.word	0x20200000
   346e4:	00249249 	.word	0x00249249
   346e8:	00000e42 	.word	0x00000e42
   346ec:	00000e41 	.word	0x00000e41
   346f0:	00010e00 	.word	0x00010e00
   346f4:	00020041 	.word	0x00020041
   346f8:	00020042 	.word	0x00020042

000346fc <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)>:
   346fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34700:	e280b601 	add	fp, r0, #1048576	; 0x100000
   34704:	e1a09000 	mov	r9, r0
   34708:	e5db04a4 	ldrb	r0, [fp, #1188]	; 0x4a4
   3470c:	e24dd01c 	sub	sp, sp, #28
   34710:	e21000ff 	ands	r0, r0, #255	; 0xff
   34714:	e58d1014 	str	r1, [sp, #20]
   34718:	e58d2010 	str	r2, [sp, #16]
   3471c:	0a000003 	beq	34730 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x34>
   34720:	e2131009 	ands	r1, r3, #9
   34724:	e1a04003 	mov	r4, r3
   34728:	13a00000 	movne	r0, #0
   3472c:	0a000001 	beq	34738 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x3c>
   34730:	e28dd01c 	add	sp, sp, #28
   34734:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34738:	e1a07001 	mov	r7, r1
   3473c:	e3a00008 	mov	r0, #8
   34740:	eb002baf 	bl	3f604 <digitalWrite>
   34744:	e1a0a007 	mov	sl, r7
   34748:	e59f551c 	ldr	r5, [pc, #1308]	; 34c6c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x570>
   3474c:	e59f851c 	ldr	r8, [pc, #1308]	; 34c70 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x574>
   34750:	e3140802 	tst	r4, #131072	; 0x20000
   34754:	0a000047 	beq	34878 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x17c>
   34758:	e3570000 	cmp	r7, #0
   3475c:	1a00007a 	bne	3494c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x250>
   34760:	e3a07001 	mov	r7, #1
   34764:	e3a0a000 	mov	sl, #0
   34768:	e59f3504 	ldr	r3, [pc, #1284]	; 34c74 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x578>
   3476c:	e59d2014 	ldr	r2, [sp, #20]
   34770:	e5d36000 	ldrb	r6, [r3]
   34774:	e58b24a8 	str	r2, [fp, #1192]	; 0x4a8
   34778:	e3a02040 	mov	r2, #64	; 0x40
   3477c:	e5852028 	str	r2, [r5, #40]	; 0x28
   34780:	e5951008 	ldr	r1, [r5, #8]
   34784:	e59f04ec 	ldr	r0, [pc, #1260]	; 34c78 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x57c>
   34788:	e20114ff 	and	r1, r1, #-16777216	; 0xff000000
   3478c:	e3811992 	orr	r1, r1, #2392064	; 0x248000
   34790:	e3811d49 	orr	r1, r1, #4672	; 0x1240
   34794:	e3811009 	orr	r1, r1, #9
   34798:	e5851008 	str	r1, [r5, #8]
   3479c:	e1a02a06 	lsl	r2, r6, #20
   347a0:	e59f14d4 	ldr	r1, [pc, #1236]	; 34c7c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x580>
   347a4:	e585201c 	str	r2, [r5, #28]
   347a8:	e22226ff 	eor	r2, r2, #267386880	; 0xff00000
   347ac:	e5852028 	str	r2, [r5, #40]	; 0x28
   347b0:	e3a03064 	mov	r3, #100	; 0x64
   347b4:	e5810018 	str	r0, [r1, #24]
   347b8:	e5810018 	str	r0, [r1, #24]
   347bc:	ea000001 	b	347c8 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0xcc>
   347c0:	e2533001 	subs	r3, r3, #1
   347c4:	0a000002 	beq	347d4 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0xd8>
   347c8:	e5952034 	ldr	r2, [r5, #52]	; 0x34
   347cc:	e3120020 	tst	r2, #32
   347d0:	0afffffa 	beq	347c0 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0xc4>
   347d4:	e1a00009 	mov	r0, r9
   347d8:	ebfffb8f 	bl	3361c <TargetControl::cycleWaitForReadCompletion()>
   347dc:	e35a0000 	cmp	sl, #0
   347e0:	1a000064 	bne	34978 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x27c>
   347e4:	e1a00009 	mov	r0, r9
   347e8:	ebfffb7e 	bl	335e8 <TargetControl::cycleSetupForFastWait()>
   347ec:	e3a00001 	mov	r0, #1
   347f0:	ebffe587 	bl	2de14 <microsDelay>
   347f4:	ebffe57e 	bl	2ddf4 <micros>
   347f8:	e1a06000 	mov	r6, r0
   347fc:	ebffe57c 	bl	2ddf4 <micros>
   34800:	e1a02008 	mov	r2, r8
   34804:	e1a01006 	mov	r1, r6
   34808:	ebffe597 	bl	2de6c <isTimeout>
   3480c:	e3500000 	cmp	r0, #0
   34810:	1a000009 	bne	3483c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x140>
   34814:	e5954034 	ldr	r4, [r5, #52]	; 0x34
   34818:	e2043024 	and	r3, r4, #36	; 0x24
   3481c:	e3530004 	cmp	r3, #4
   34820:	1afffff5 	bne	347fc <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x100>
   34824:	e2043806 	and	r3, r4, #393216	; 0x60000
   34828:	e3530806 	cmp	r3, #393216	; 0x60000
   3482c:	e2042003 	and	r2, r4, #3
   34830:	0afffff1 	beq	347fc <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x100>
   34834:	e3520003 	cmp	r2, #3
   34838:	0affffef 	beq	347fc <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x100>
   3483c:	e5990000 	ldr	r0, [r9]
   34840:	e28d2010 	add	r2, sp, #16
   34844:	e2800811 	add	r0, r0, #1114112	; 0x110000
   34848:	e2800d1b 	add	r0, r0, #1728	; 0x6c0
   3484c:	e280000c 	add	r0, r0, #12
   34850:	e28d1014 	add	r1, sp, #20
   34854:	ebfffe9d 	bl	342d0 <BusRawAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>
   34858:	e3570024 	cmp	r7, #36	; 0x24
   3485c:	1affffbb 	bne	34750 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x54>
   34860:	e3a01001 	mov	r1, #1
   34864:	e3a00008 	mov	r0, #8
   34868:	eb002b65 	bl	3f604 <digitalWrite>
   3486c:	e3a00001 	mov	r0, #1
   34870:	e28dd01c 	add	sp, sp, #28
   34874:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34878:	e2473001 	sub	r3, r7, #1
   3487c:	e353001a 	cmp	r3, #26
   34880:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   34884:	ea000024 	b	3491c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x220>
   34888:	000348f4 	.word	0x000348f4
   3488c:	0003491c 	.word	0x0003491c
   34890:	0003491c 	.word	0x0003491c
   34894:	00034a88 	.word	0x00034a88
   34898:	0003491c 	.word	0x0003491c
   3489c:	0003491c 	.word	0x0003491c
   348a0:	00034a7c 	.word	0x00034a7c
   348a4:	0003491c 	.word	0x0003491c
   348a8:	0003491c 	.word	0x0003491c
   348ac:	00034a70 	.word	0x00034a70
   348b0:	00034a64 	.word	0x00034a64
   348b4:	0003491c 	.word	0x0003491c
   348b8:	00034a58 	.word	0x00034a58
   348bc:	00034a4c 	.word	0x00034a4c
   348c0:	00034a40 	.word	0x00034a40
   348c4:	0003491c 	.word	0x0003491c
   348c8:	0003491c 	.word	0x0003491c
   348cc:	00034a14 	.word	0x00034a14
   348d0:	0003491c 	.word	0x0003491c
   348d4:	0003491c 	.word	0x0003491c
   348d8:	0003491c 	.word	0x0003491c
   348dc:	0003491c 	.word	0x0003491c
   348e0:	000349e8 	.word	0x000349e8
   348e4:	0003491c 	.word	0x0003491c
   348e8:	0003491c 	.word	0x0003491c
   348ec:	0003491c 	.word	0x0003491c
   348f0:	000349bc 	.word	0x000349bc
   348f4:	e35a0000 	cmp	sl, #0
   348f8:	1a00006d 	bne	34ab4 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x3b8>
   348fc:	e1cd21d0 	ldrd	r2, [sp, #16]
   34900:	e1a0a007 	mov	sl, r7
   34904:	e2833001 	add	r3, r3, #1
   34908:	e59f1364 	ldr	r1, [pc, #868]	; 34c74 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x578>
   3490c:	e58b34ac 	str	r3, [fp, #1196]	; 0x4ac
   34910:	e1a03402 	lsl	r3, r2, #8
   34914:	e5c12021 	strb	r2, [r1, #33]	; 0x21
   34918:	e58b34bc 	str	r3, [fp, #1212]	; 0x4bc
   3491c:	e59f2358 	ldr	r2, [pc, #856]	; 34c7c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x580>
   34920:	e59f1350 	ldr	r1, [pc, #848]	; 34c78 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x57c>
   34924:	e3a03064 	mov	r3, #100	; 0x64
   34928:	e5821018 	str	r1, [r2, #24]
   3492c:	e5821018 	str	r1, [r2, #24]
   34930:	ea000001 	b	3493c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x240>
   34934:	e2533001 	subs	r3, r3, #1
   34938:	0affffa9 	beq	347e4 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0xe8>
   3493c:	e5952034 	ldr	r2, [r5, #52]	; 0x34
   34940:	e3120020 	tst	r2, #32
   34944:	0afffffa 	beq	34934 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x238>
   34948:	eaffffa5 	b	347e4 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0xe8>
   3494c:	e59f3320 	ldr	r3, [pc, #800]	; 34c74 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x578>
   34950:	e7d36007 	ldrb	r6, [r3, r7]
   34954:	e2877001 	add	r7, r7, #1
   34958:	e3570022 	cmp	r7, #34	; 0x22
   3495c:	13a0a000 	movne	sl, #0
   34960:	1affff84 	bne	34778 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x7c>
   34964:	e3a01000 	mov	r1, #0
   34968:	e3a00013 	mov	r0, #19
   3496c:	eb002b24 	bl	3f604 <digitalWrite>
   34970:	e3a0a001 	mov	sl, #1
   34974:	eaffff7f 	b	34778 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x7c>
   34978:	ebffe51d 	bl	2ddf4 <micros>
   3497c:	e1a06000 	mov	r6, r0
   34980:	ea000002 	b	34990 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x294>
   34984:	e5954034 	ldr	r4, [r5, #52]	; 0x34
   34988:	e214a004 	ands	sl, r4, #4
   3498c:	0a000051 	beq	34ad8 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x3dc>
   34990:	ebffe517 	bl	2ddf4 <micros>
   34994:	e1a02008 	mov	r2, r8
   34998:	e1a01006 	mov	r1, r6
   3499c:	ebffe532 	bl	2de6c <isTimeout>
   349a0:	e3500000 	cmp	r0, #0
   349a4:	0afffff6 	beq	34984 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x288>
   349a8:	e3a01001 	mov	r1, #1
   349ac:	e3a00013 	mov	r0, #19
   349b0:	eb002b13 	bl	3f604 <digitalWrite>
   349b4:	e3a0a000 	mov	sl, #0
   349b8:	eaffff89 	b	347e4 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0xe8>
   349bc:	e35a0000 	cmp	sl, #0
   349c0:	159b34c4 	ldrne	r3, [fp, #1220]	; 0x4c4
   349c4:	05db34c4 	ldrbeq	r3, [fp, #1220]	; 0x4c4
   349c8:	059d2010 	ldreq	r2, [sp, #16]
   349cc:	15dd2010 	ldrbne	r2, [sp, #16]
   349d0:	12033cff 	andne	r3, r3, #65280	; 0xff00
   349d4:	01833402 	orreq	r3, r3, r2, lsl #8
   349d8:	11833002 	orrne	r3, r3, r2
   349dc:	03a0a001 	moveq	sl, #1
   349e0:	e58b34c4 	str	r3, [fp, #1220]	; 0x4c4
   349e4:	eaffffcc 	b	3491c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x220>
   349e8:	e35a0000 	cmp	sl, #0
   349ec:	159b34c0 	ldrne	r3, [fp, #1216]	; 0x4c0
   349f0:	05db34c0 	ldrbeq	r3, [fp, #1216]	; 0x4c0
   349f4:	059d2010 	ldreq	r2, [sp, #16]
   349f8:	15dd2010 	ldrbne	r2, [sp, #16]
   349fc:	12033cff 	andne	r3, r3, #65280	; 0xff00
   34a00:	01833402 	orreq	r3, r3, r2, lsl #8
   34a04:	11833002 	orrne	r3, r3, r2
   34a08:	03a0a001 	moveq	sl, #1
   34a0c:	e58b34c0 	str	r3, [fp, #1216]	; 0x4c0
   34a10:	eaffffc1 	b	3491c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x220>
   34a14:	e35a0000 	cmp	sl, #0
   34a18:	159b34d4 	ldrne	r3, [fp, #1236]	; 0x4d4
   34a1c:	05db34d4 	ldrbeq	r3, [fp, #1236]	; 0x4d4
   34a20:	059d2010 	ldreq	r2, [sp, #16]
   34a24:	15dd2010 	ldrbne	r2, [sp, #16]
   34a28:	12033cff 	andne	r3, r3, #65280	; 0xff00
   34a2c:	01833402 	orreq	r3, r3, r2, lsl #8
   34a30:	11833002 	orrne	r3, r3, r2
   34a34:	03a0a001 	moveq	sl, #1
   34a38:	e58b34d4 	str	r3, [fp, #1236]	; 0x4d4
   34a3c:	eaffffb6 	b	3491c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x220>
   34a40:	e59d3014 	ldr	r3, [sp, #20]
   34a44:	e58b34d0 	str	r3, [fp, #1232]	; 0x4d0
   34a48:	eaffffb3 	b	3491c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x220>
   34a4c:	e59d3014 	ldr	r3, [sp, #20]
   34a50:	e58b34cc 	str	r3, [fp, #1228]	; 0x4cc
   34a54:	eaffffb0 	b	3491c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x220>
   34a58:	e59d3014 	ldr	r3, [sp, #20]
   34a5c:	e58b34c8 	str	r3, [fp, #1224]	; 0x4c8
   34a60:	eaffffad 	b	3491c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x220>
   34a64:	e59d3014 	ldr	r3, [sp, #20]
   34a68:	e58b34b8 	str	r3, [fp, #1208]	; 0x4b8
   34a6c:	eaffffaa 	b	3491c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x220>
   34a70:	e59d3014 	ldr	r3, [sp, #20]
   34a74:	e58b34b4 	str	r3, [fp, #1204]	; 0x4b4
   34a78:	eaffffa7 	b	3491c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x220>
   34a7c:	e59d3010 	ldr	r3, [sp, #16]
   34a80:	e58b34dc 	str	r3, [fp, #1244]	; 0x4dc
   34a84:	eaffffa4 	b	3491c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x220>
   34a88:	e59d3010 	ldr	r3, [sp, #16]
   34a8c:	e59f11e0 	ldr	r1, [pc, #480]	; 34c74 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x578>
   34a90:	e28330fd 	add	r3, r3, #253	; 0xfd
   34a94:	e203307f 	and	r3, r3, #127	; 0x7f
   34a98:	e2432002 	sub	r2, r3, #2
   34a9c:	e58b34e0 	str	r3, [fp, #1248]	; 0x4e0
   34aa0:	e59d3014 	ldr	r3, [sp, #20]
   34aa4:	e202207f 	and	r2, r2, #127	; 0x7f
   34aa8:	e5c1201c 	strb	r2, [r1, #28]
   34aac:	e58b34b0 	str	r3, [fp, #1200]	; 0x4b0
   34ab0:	eaffff99 	b	3491c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x220>
   34ab4:	e59d2010 	ldr	r2, [sp, #16]
   34ab8:	e59b34bc 	ldr	r3, [fp, #1212]	; 0x4bc
   34abc:	e59f11b0 	ldr	r1, [pc, #432]	; 34c74 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x578>
   34ac0:	e2033cff 	and	r3, r3, #65280	; 0xff00
   34ac4:	e5c12020 	strb	r2, [r1, #32]
   34ac8:	e6ef2072 	uxtb	r2, r2
   34acc:	e1833002 	orr	r3, r3, r2
   34ad0:	e58b34bc 	str	r3, [fp, #1212]	; 0x4bc
   34ad4:	eaffff90 	b	3491c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x220>
   34ad8:	e3a01001 	mov	r1, #1
   34adc:	e3a00008 	mov	r0, #8
   34ae0:	eb002ac7 	bl	3f604 <digitalWrite>
   34ae4:	e3a02040 	mov	r2, #64	; 0x40
   34ae8:	e5953008 	ldr	r3, [r5, #8]
   34aec:	e3a01001 	mov	r1, #1
   34af0:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   34af4:	e5853008 	str	r3, [r5, #8]
   34af8:	e3a00011 	mov	r0, #17
   34afc:	e585201c 	str	r2, [r5, #28]
   34b00:	ebfff420 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   34b04:	e3a01001 	mov	r1, #1
   34b08:	e3a00012 	mov	r0, #18
   34b0c:	ebfff41d 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   34b10:	e3a01001 	mov	r1, #1
   34b14:	e1a0000a 	mov	r0, sl
   34b18:	ebfff41a 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   34b1c:	e3a01001 	mov	r1, #1
   34b20:	e1a00001 	mov	r0, r1
   34b24:	ebfff417 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   34b28:	e3a01001 	mov	r1, #1
   34b2c:	e3a00005 	mov	r0, #5
   34b30:	ebfff414 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   34b34:	e3a01001 	mov	r1, #1
   34b38:	e3a00003 	mov	r0, #3
   34b3c:	ebfff411 	bl	31b88 <BusRawAccess::setPinOut(int, bool)>
   34b40:	e3a00801 	mov	r0, #65536	; 0x10000
   34b44:	ebffd925 	bl	2afe0 <operator new[](unsigned int)>
   34b48:	e1a02000 	mov	r2, r0
   34b4c:	e3a06001 	mov	r6, #1
   34b50:	e5990000 	ldr	r0, [r9]
   34b54:	e3a03801 	mov	r3, #65536	; 0x10000
   34b58:	e2800811 	add	r0, r0, #1114112	; 0x110000
   34b5c:	e2800d1b 	add	r0, r0, #1728	; 0x6c0
   34b60:	e1a0100a 	mov	r1, sl
   34b64:	e58da000 	str	sl, [sp]
   34b68:	e280000c 	add	r0, r0, #12
   34b6c:	e58d200c 	str	r2, [sp, #12]
   34b70:	ebfffe05 	bl	3438c <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   34b74:	e5990000 	ldr	r0, [r9]
   34b78:	e3a03801 	mov	r3, #65536	; 0x10000
   34b7c:	e2800601 	add	r0, r0, #1048576	; 0x100000
   34b80:	e2800d1b 	add	r0, r0, #1728	; 0x6c0
   34b84:	e1a0100a 	mov	r1, sl
   34b88:	e59d200c 	ldr	r2, [sp, #12]
   34b8c:	e58da000 	str	sl, [sp]
   34b90:	e2800008 	add	r0, r0, #8
   34b94:	ebfffd37 	bl	34078 <MemoryController::memCacheBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   34b98:	e59d200c 	ldr	r2, [sp, #12]
   34b9c:	e1a01006 	mov	r1, r6
   34ba0:	e1a00002 	mov	r0, r2
   34ba4:	ebffd915 	bl	2b000 <operator delete(void*, unsigned int)>
   34ba8:	e59f30d0 	ldr	r3, [pc, #208]	; 34c80 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x584>
   34bac:	e3a00014 	mov	r0, #20
   34bb0:	e585301c 	str	r3, [r5, #28]
   34bb4:	eb002abd 	bl	3f6b0 <lowlev_cycleDelay>
   34bb8:	e3a00014 	mov	r0, #20
   34bbc:	e5856028 	str	r6, [r5, #40]	; 0x28
   34bc0:	eb002aba 	bl	3f6b0 <lowlev_cycleDelay>
   34bc4:	e59f20b0 	ldr	r2, [pc, #176]	; 34c7c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x580>
   34bc8:	e59f10a8 	ldr	r1, [pc, #168]	; 34c78 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x57c>
   34bcc:	e585601c 	str	r6, [r5, #28]
   34bd0:	e3a03064 	mov	r3, #100	; 0x64
   34bd4:	e5821018 	str	r1, [r2, #24]
   34bd8:	e5821018 	str	r1, [r2, #24]
   34bdc:	ea000001 	b	34be8 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x4ec>
   34be0:	e2533001 	subs	r3, r3, #1
   34be4:	0a000002 	beq	34bf4 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x4f8>
   34be8:	e5952034 	ldr	r2, [r5, #52]	; 0x34
   34bec:	e3120020 	tst	r2, #32
   34bf0:	0afffffa 	beq	34be0 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x4e4>
   34bf4:	e59f3088 	ldr	r3, [pc, #136]	; 34c84 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x588>
   34bf8:	e3a01000 	mov	r1, #0
   34bfc:	e585301c 	str	r3, [r5, #28]
   34c00:	e3a00011 	mov	r0, #17
   34c04:	eb002a3d 	bl	3f500 <pinMode>
   34c08:	e3a01000 	mov	r1, #0
   34c0c:	e3a00012 	mov	r0, #18
   34c10:	eb002a3a 	bl	3f500 <pinMode>
   34c14:	e3a01000 	mov	r1, #0
   34c18:	e1a00001 	mov	r0, r1
   34c1c:	eb002a37 	bl	3f500 <pinMode>
   34c20:	e3a01000 	mov	r1, #0
   34c24:	e3a00001 	mov	r0, #1
   34c28:	eb002a34 	bl	3f500 <pinMode>
   34c2c:	e3a01000 	mov	r1, #0
   34c30:	e3a00005 	mov	r0, #5
   34c34:	eb002a31 	bl	3f500 <pinMode>
   34c38:	e59f6030 	ldr	r6, [pc, #48]	; 34c70 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x574>
   34c3c:	ea000003 	b	34c50 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x554>
   34c40:	e3a00001 	mov	r0, #1
   34c44:	ebffe472 	bl	2de14 <microsDelay>
   34c48:	e2566001 	subs	r6, r6, #1
   34c4c:	0a000002 	beq	34c5c <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x560>
   34c50:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   34c54:	e3130004 	tst	r3, #4
   34c58:	0afffff8 	beq	34c40 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x544>
   34c5c:	e3a01000 	mov	r1, #0
   34c60:	e3a00008 	mov	r0, #8
   34c64:	eb002a66 	bl	3f604 <digitalWrite>
   34c68:	eaffff4e 	b	349a8 <TargetControl::debuggerHandleWaitCycle(unsigned long, unsigned long, unsigned long)+0x2ac>
   34c6c:	20200000 	.word	0x20200000
   34c70:	000186a0 	.word	0x000186a0
   34c74:	0004a424 	.word	0x0004a424
   34c78:	0000ffff 	.word	0x0000ffff
   34c7c:	2020c000 	.word	0x2020c000
   34c80:	0006000b 	.word	0x0006000b
   34c84:	000e002b 	.word	0x000e002b

00034c88 <HwManager::HwManager(BusControl&)>:
   34c88:	e5801000 	str	r1, [r0]
   34c8c:	e12fff1e 	bx	lr

00034c90 <HwManager::getSnippetToSetupHw(unsigned long, unsigned char*, unsigned long)>:
   34c90:	e3530009 	cmp	r3, #9
   34c94:	8a000001 	bhi	34ca0 <HwManager::getSnippetToSetupHw(unsigned long, unsigned char*, unsigned long)+0x10>
   34c98:	e3a00000 	mov	r0, #0
   34c9c:	e12fff1e 	bx	lr
   34ca0:	e1a00002 	mov	r0, r2
   34ca4:	e92d4010 	push	{r4, lr}
   34ca8:	e3a0200a 	mov	r2, #10
   34cac:	e59f1008 	ldr	r1, [pc, #8]	; 34cbc <HwManager::getSnippetToSetupHw(unsigned long, unsigned char*, unsigned long)+0x2c>
   34cb0:	ebffd6de 	bl	2a830 <memcpy>
   34cb4:	e3a0000a 	mov	r0, #10
   34cb8:	e8bd8010 	pop	{r4, pc}
   34cbc:	0004a448 	.word	0x0004a448

00034cc0 <ControlAPI::busActionActiveStatic(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE)>:
   34cc0:	e12fff1e 	bx	lr

00034cc4 <ControlAPI::handleWaitInterruptStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   34cc4:	e12fff1e 	bx	lr

00034cc8 <ControlAPI::ControlAPI(CommandHandler&, BusControl&, McManager&)>:
   34cc8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   34ccc:	e3e0e000 	mvn	lr, #0
   34cd0:	e5801000 	str	r1, [r0]
   34cd4:	e59f1010 	ldr	r1, [pc, #16]	; 34cec <ControlAPI::ControlAPI(CommandHandler&, BusControl&, McManager&)+0x24>
   34cd8:	e1c020f4 	strd	r2, [r0, #4]
   34cdc:	e5810000 	str	r0, [r1]
   34ce0:	e580e00c 	str	lr, [r0, #12]
   34ce4:	e580e010 	str	lr, [r0, #16]
   34ce8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   34cec:	0005cf68 	.word	0x0005cf68

00034cf0 <ControlAPI::init()>:
   34cf0:	e92d4010 	push	{r4, lr}
   34cf4:	e590300c 	ldr	r3, [r0, #12]
   34cf8:	e1a04000 	mov	r4, r0
   34cfc:	e3530000 	cmp	r3, #0
   34d00:	e24dd030 	sub	sp, sp, #48	; 0x30
   34d04:	ba000004 	blt	34d1c <ControlAPI::init()+0x2c>
   34d08:	e5943010 	ldr	r3, [r4, #16]
   34d0c:	e3530000 	cmp	r3, #0
   34d10:	ba00001a 	blt	34d80 <ControlAPI::init()+0x90>
   34d14:	e28dd030 	add	sp, sp, #48	; 0x30
   34d18:	e8bd8010 	pop	{r4, pc}
   34d1c:	e3a03000 	mov	r3, #0
   34d20:	e3a01004 	mov	r1, #4
   34d24:	e5902004 	ldr	r2, [r0, #4]
   34d28:	e59f007c 	ldr	r0, [pc, #124]	; 34dac <ControlAPI::init()+0xbc>
   34d2c:	e58d3028 	str	r3, [sp, #40]	; 0x28
   34d30:	e58d3020 	str	r3, [sp, #32]
   34d34:	e58d301c 	str	r3, [sp, #28]
   34d38:	e58d3018 	str	r3, [sp, #24]
   34d3c:	e58d3014 	str	r3, [sp, #20]
   34d40:	e58d3010 	str	r3, [sp, #16]
   34d44:	e58d300c 	str	r3, [sp, #12]
   34d48:	e58d3008 	str	r3, [sp, #8]
   34d4c:	e58d3004 	str	r3, [sp, #4]
   34d50:	e58d3000 	str	r3, [sp]
   34d54:	e58d1024 	str	r1, [sp, #36]	; 0x24
   34d58:	e59f3050 	ldr	r3, [pc, #80]	; 34db0 <ControlAPI::init()+0xc0>
   34d5c:	e0820000 	add	r0, r2, r0
   34d60:	e3a01001 	mov	r1, #1
   34d64:	e59f2048 	ldr	r2, [pc, #72]	; 34db4 <ControlAPI::init()+0xc4>
   34d68:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   34d6c:	ebfff24c 	bl	316a4 <BusSocketManager::add(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>
   34d70:	e5943010 	ldr	r3, [r4, #16]
   34d74:	e584000c 	str	r0, [r4, #12]
   34d78:	e3530000 	cmp	r3, #0
   34d7c:	aaffffe4 	bge	34d14 <ControlAPI::init()+0x24>
   34d80:	e3a02000 	mov	r2, #0
   34d84:	e58d2004 	str	r2, [sp, #4]
   34d88:	e58d2000 	str	r2, [sp]
   34d8c:	e1a01004 	mov	r1, r4
   34d90:	e3a02001 	mov	r2, #1
   34d94:	e59f301c 	ldr	r3, [pc, #28]	; 34db8 <ControlAPI::init()+0xc8>
   34d98:	e5940000 	ldr	r0, [r4]
   34d9c:	ebffeb5f 	bl	2fb20 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   34da0:	e5840010 	str	r0, [r4, #16]
   34da4:	e28dd030 	add	sp, sp, #48	; 0x30
   34da8:	e8bd8010 	pop	{r4, pc}
   34dac:	00100504 	.word	0x00100504
   34db0:	00034cc0 	.word	0x00034cc0
   34db4:	00034cc4 	.word	0x00034cc4
   34db8:	000365c8 	.word	0x000365c8

00034dbc <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>:
   34dbc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34dc0:	e24ddf4f 	sub	sp, sp, #316	; 0x13c
   34dc4:	e1a07003 	mov	r7, r3
   34dc8:	e1a08001 	mov	r8, r1
   34dcc:	e1a06002 	mov	r6, r2
   34dd0:	e1a01003 	mov	r1, r3
   34dd4:	e59f01b8 	ldr	r0, [pc, #440]	; 34f94 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1d8>
   34dd8:	e3a030c8 	mov	r3, #200	; 0xc8
   34ddc:	e28d206c 	add	r2, sp, #108	; 0x6c
   34de0:	e5dd916c 	ldrb	r9, [sp, #364]	; 0x16c
   34de4:	ebffe4e9 	bl	2e190 <jsonGetValueForKey>
   34de8:	e2505000 	subs	r5, r0, #0
   34dec:	0a000011 	beq	34e38 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x7c>
   34df0:	e1dd36dc 	ldrsb	r3, [sp, #108]	; 0x6c
   34df4:	e353002f 	cmp	r3, #47	; 0x2f
   34df8:	028d406d 	addeq	r4, sp, #109	; 0x6d
   34dfc:	128d406c 	addne	r4, sp, #108	; 0x6c
   34e00:	e3560000 	cmp	r6, #0
   34e04:	ba000044 	blt	34f1c <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x160>
   34e08:	e3a0a000 	mov	sl, #0
   34e0c:	e59fb184 	ldr	fp, [pc, #388]	; 34f98 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1dc>
   34e10:	ea000002 	b	34e20 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x64>
   34e14:	e156000a 	cmp	r6, sl
   34e18:	e2804001 	add	r4, r0, #1
   34e1c:	ba00003e 	blt	34f1c <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x160>
   34e20:	e1a00004 	mov	r0, r4
   34e24:	e1a0100b 	mov	r1, fp
   34e28:	ebffd55d 	bl	2a3a4 <strstr>
   34e2c:	e3500000 	cmp	r0, #0
   34e30:	e28aa001 	add	sl, sl, #1
   34e34:	1afffff6 	bne	34e14 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x58>
   34e38:	e3a02032 	mov	r2, #50	; 0x32
   34e3c:	e1a01008 	mov	r1, r8
   34e40:	e28d0038 	add	r0, sp, #56	; 0x38
   34e44:	ebffe424 	bl	2dedc <strlcpy>
   34e48:	e3a02032 	mov	r2, #50	; 0x32
   34e4c:	e59f1148 	ldr	r1, [pc, #328]	; 34f9c <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1e0>
   34e50:	e28d0038 	add	r0, sp, #56	; 0x38
   34e54:	ebffe43c 	bl	2df4c <strlcat>
   34e58:	e1a00008 	mov	r0, r8
   34e5c:	e3a03032 	mov	r3, #50	; 0x32
   34e60:	e1a01007 	mov	r1, r7
   34e64:	e28d2004 	add	r2, sp, #4
   34e68:	ebffe4c8 	bl	2e190 <jsonGetValueForKey>
   34e6c:	e2505000 	subs	r5, r0, #0
   34e70:	0a000012 	beq	34ec0 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x104>
   34e74:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   34e78:	e3530000 	cmp	r3, #0
   34e7c:	0a000003 	beq	34e90 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xd4>
   34e80:	e1a00003 	mov	r0, r3
   34e84:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   34e88:	e28d1004 	add	r1, sp, #4
   34e8c:	ebffe412 	bl	2dedc <strlcpy>
   34e90:	e3590000 	cmp	r9, #0
   34e94:	0a000035 	beq	34f70 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1b4>
   34e98:	e28d0004 	add	r0, sp, #4
   34e9c:	e3a0200a 	mov	r2, #10
   34ea0:	e3a01000 	mov	r1, #0
   34ea4:	ebffd58e 	bl	2a4e4 <strtoul>
   34ea8:	e1a05009 	mov	r5, r9
   34eac:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   34eb0:	e5830000 	str	r0, [r3]
   34eb4:	e1a00005 	mov	r0, r5
   34eb8:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   34ebc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34ec0:	e1a01007 	mov	r1, r7
   34ec4:	e3a03032 	mov	r3, #50	; 0x32
   34ec8:	e28d0038 	add	r0, sp, #56	; 0x38
   34ecc:	e28d2004 	add	r2, sp, #4
   34ed0:	ebffe4ae 	bl	2e190 <jsonGetValueForKey>
   34ed4:	e2505000 	subs	r5, r0, #0
   34ed8:	0afffff5 	beq	34eb4 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xf8>
   34edc:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   34ee0:	e3530000 	cmp	r3, #0
   34ee4:	0a000003 	beq	34ef8 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x13c>
   34ee8:	e1a00003 	mov	r0, r3
   34eec:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   34ef0:	e28d1004 	add	r1, sp, #4
   34ef4:	ebffe3f8 	bl	2dedc <strlcpy>
   34ef8:	e3a0200a 	mov	r2, #10
   34efc:	e3a01000 	mov	r1, #0
   34f00:	e28d0004 	add	r0, sp, #4
   34f04:	ebffd576 	bl	2a4e4 <strtoul>
   34f08:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   34f0c:	e5830000 	str	r0, [r3]
   34f10:	e1a00005 	mov	r0, r5
   34f14:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   34f18:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34f1c:	e1a00004 	mov	r0, r4
   34f20:	ebffd447 	bl	2a044 <strlen>
   34f24:	e3500000 	cmp	r0, #0
   34f28:	0affffc2 	beq	34e38 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x7c>
   34f2c:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   34f30:	e3530000 	cmp	r3, #0
   34f34:	0a000003 	beq	34f48 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x18c>
   34f38:	e1a00003 	mov	r0, r3
   34f3c:	e1a01004 	mov	r1, r4
   34f40:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   34f44:	ebffe3e4 	bl	2dedc <strlcpy>
   34f48:	e3590000 	cmp	r9, #0
   34f4c:	11a00004 	movne	r0, r4
   34f50:	1affffd1 	bne	34e9c <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xe0>
   34f54:	e1a01009 	mov	r1, r9
   34f58:	e1a00004 	mov	r0, r4
   34f5c:	e3a02010 	mov	r2, #16
   34f60:	ebffd55f 	bl	2a4e4 <strtoul>
   34f64:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   34f68:	e5830000 	str	r0, [r3]
   34f6c:	eaffffd0 	b	34eb4 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xf8>
   34f70:	e1a01009 	mov	r1, r9
   34f74:	e3a02010 	mov	r2, #16
   34f78:	e28d0004 	add	r0, sp, #4
   34f7c:	ebffd558 	bl	2a4e4 <strtoul>
   34f80:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   34f84:	e5830000 	str	r0, [r3]
   34f88:	e1a00005 	mov	r0, r5
   34f8c:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   34f90:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34f94:	0004858c 	.word	0x0004858c
   34f98:	00048ba8 	.word	0x00048ba8
   34f9c:	00047244 	.word	0x00047244

00034fa0 <ControlAPI::busLineHandler(char const*)>:
   34fa0:	e3a00001 	mov	r0, #1
   34fa4:	e12fff1e 	bx	lr

00034fa8 <ControlAPI::muxLineHandler(char const*)>:
   34fa8:	e3a00001 	mov	r0, #1
   34fac:	e12fff1e 	bx	lr

00034fb0 <ControlAPI::busActionActive(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE)>:
   34fb0:	e12fff1e 	bx	lr

00034fb4 <ControlAPI::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   34fb4:	e12fff1e 	bx	lr

00034fb8 <ControlAPI::service()>:
   34fb8:	e12fff1e 	bx	lr

00034fbc <ControlAPI::apiProgClear(char*, unsigned int)>:
   34fbc:	e5900004 	ldr	r0, [r0, #4]
   34fc0:	e92d4010 	push	{r4, lr}
   34fc4:	e2800018 	add	r0, r0, #24
   34fc8:	ebfffb5b 	bl	33d3c <TargetProgrammer::clear()>
   34fcc:	e3a00001 	mov	r0, #1
   34fd0:	e8bd8010 	pop	{r4, pc}

00034fd4 <ControlAPI::apiProgAddMemBlock(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   34fd4:	e3a0c000 	mov	ip, #0
   34fd8:	e92d4070 	push	{r4, r5, r6, lr}
   34fdc:	e24dd018 	sub	sp, sp, #24
   34fe0:	e1a04002 	mov	r4, r2
   34fe4:	e28d2014 	add	r2, sp, #20
   34fe8:	e88d1004 	stm	sp, {r2, ip}
   34fec:	e1a05003 	mov	r5, r3
   34ff0:	e3a02001 	mov	r2, #1
   34ff4:	e1a03001 	mov	r3, r1
   34ff8:	e58dc00c 	str	ip, [sp, #12]
   34ffc:	e59f1054 	ldr	r1, [pc, #84]	; 35058 <ControlAPI::apiProgAddMemBlock(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x84>
   35000:	e58dc008 	str	ip, [sp, #8]
   35004:	e1a06000 	mov	r6, r0
   35008:	e58dc014 	str	ip, [sp, #20]
   3500c:	ebffff6a 	bl	34dbc <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35010:	e3500000 	cmp	r0, #0
   35014:	0a000008 	beq	3503c <ControlAPI::apiProgAddMemBlock(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x68>
   35018:	e5960004 	ldr	r0, [r6, #4]
   3501c:	e1a03005 	mov	r3, r5
   35020:	e1a02004 	mov	r2, r4
   35024:	e59d1014 	ldr	r1, [sp, #20]
   35028:	e2800018 	add	r0, r0, #24
   3502c:	ebfffb56 	bl	33d8c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   35030:	e3a00001 	mov	r0, #1
   35034:	e28dd018 	add	sp, sp, #24
   35038:	e8bd8070 	pop	{r4, r5, r6, pc}
   3503c:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
   35040:	e59f1014 	ldr	r1, [pc, #20]	; 3505c <ControlAPI::apiProgAddMemBlock(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x88>
   35044:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
   35048:	ebffe3a3 	bl	2dedc <strlcpy>
   3504c:	e3a00001 	mov	r0, #1
   35050:	e28dd018 	add	sp, sp, #24
   35054:	e8bd8070 	pop	{r4, r5, r6, pc}
   35058:	00048594 	.word	0x00048594
   3505c:	0004859c 	.word	0x0004859c

00035060 <ControlAPI::apiProgWrite(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   35060:	e92d4030 	push	{r4, r5, lr}
   35064:	e3a04000 	mov	r4, #0
   35068:	e1a05000 	mov	r5, r0
   3506c:	e24dd024 	sub	sp, sp, #36	; 0x24
   35070:	e28d2018 	add	r2, sp, #24
   35074:	e1a03001 	mov	r3, r1
   35078:	e88d0014 	stm	sp, {r2, r4}
   3507c:	e58d1014 	str	r1, [sp, #20]
   35080:	e3a02001 	mov	r2, #1
   35084:	e59f1068 	ldr	r1, [pc, #104]	; 350f4 <ControlAPI::apiProgWrite(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x94>
   35088:	e58d400c 	str	r4, [sp, #12]
   3508c:	e58d4008 	str	r4, [sp, #8]
   35090:	e58d4018 	str	r4, [sp, #24]
   35094:	e58d401c 	str	r4, [sp, #28]
   35098:	ebffff47 	bl	34dbc <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   3509c:	e28d201c 	add	r2, sp, #28
   350a0:	e59d3014 	ldr	r3, [sp, #20]
   350a4:	e58d2000 	str	r2, [sp]
   350a8:	e1a00005 	mov	r0, r5
   350ac:	e3a02002 	mov	r2, #2
   350b0:	e59f1040 	ldr	r1, [pc, #64]	; 350f8 <ControlAPI::apiProgWrite(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x98>
   350b4:	e58d400c 	str	r4, [sp, #12]
   350b8:	e58d4008 	str	r4, [sp, #8]
   350bc:	e58d4004 	str	r4, [sp, #4]
   350c0:	ebffff3d 	bl	34dbc <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   350c4:	e59d201c 	ldr	r2, [sp, #28]
   350c8:	e59d1018 	ldr	r1, [sp, #24]
   350cc:	e0522004 	subs	r2, r2, r4
   350d0:	e5950004 	ldr	r0, [r5, #4]
   350d4:	13a02001 	movne	r2, #1
   350d8:	e0511004 	subs	r1, r1, r4
   350dc:	13a01001 	movne	r1, #1
   350e0:	e2800014 	add	r0, r0, #20
   350e4:	ebfff6ec 	bl	32c9c <TargetControl::programmingStart(bool, bool)>
   350e8:	e3a00001 	mov	r0, #1
   350ec:	e28dd024 	add	sp, sp, #36	; 0x24
   350f0:	e8bd8030 	pop	{r4, r5, pc}
   350f4:	000485b0 	.word	0x000485b0
   350f8:	000485b8 	.word	0x000485b8

000350fc <ControlAPI::apiProgWriteAndRun(char*, unsigned int)>:
   350fc:	e5900004 	ldr	r0, [r0, #4]
   35100:	e3a02000 	mov	r2, #0
   35104:	e3a01001 	mov	r1, #1
   35108:	e92d4010 	push	{r4, lr}
   3510c:	e2800014 	add	r0, r0, #20
   35110:	ebfff6e1 	bl	32c9c <TargetControl::programmingStart(bool, bool)>
   35114:	e3a00001 	mov	r0, #1
   35118:	e8bd8010 	pop	{r4, pc}

0003511c <ControlAPI::apiTargetReset(char*, unsigned int)>:
   3511c:	e5900004 	ldr	r0, [r0, #4]
   35120:	e92d4010 	push	{r4, lr}
   35124:	e2800014 	add	r0, r0, #20
   35128:	ebfff601 	bl	32934 <TargetControl::targetReset()>
   3512c:	e3a00001 	mov	r0, #1
   35130:	e8bd8010 	pop	{r4, pc}

00035134 <ControlAPI::apiFileToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   35134:	e92d4010 	push	{r4, lr}
   35138:	e5900008 	ldr	r0, [r0, #8]
   3513c:	eb0007c8 	bl	37064 <McManager::targetFileHandler(char const*, unsigned char const*, unsigned int)>
   35140:	e3500000 	cmp	r0, #0
   35144:	0a000001 	beq	35150 <ControlAPI::apiFileToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1c>
   35148:	e3a00001 	mov	r0, #1
   3514c:	e8bd8010 	pop	{r4, pc}
   35150:	e59d200c 	ldr	r2, [sp, #12]
   35154:	e59f100c 	ldr	r1, [pc, #12]	; 35168 <ControlAPI::apiFileToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   35158:	e59d0008 	ldr	r0, [sp, #8]
   3515c:	ebffe35e 	bl	2dedc <strlcpy>
   35160:	e3a00001 	mov	r0, #1
   35164:	e8bd8010 	pop	{r4, pc}
   35168:	000485c0 	.word	0x000485c0

0003516c <ControlAPI::apiSetMcJson(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   3516c:	e92d4010 	push	{r4, lr}
   35170:	e1a04000 	mov	r4, r0
   35174:	e59f004c 	ldr	r0, [pc, #76]	; 351c8 <ControlAPI::apiSetMcJson(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x5c>
   35178:	e2833001 	add	r3, r3, #1
   3517c:	e1530000 	cmp	r3, r0
   35180:	e1a01002 	mov	r1, r2
   35184:	21a02000 	movcs	r2, r0
   35188:	31a02003 	movcc	r2, r3
   3518c:	e59f0038 	ldr	r0, [pc, #56]	; 351cc <ControlAPI::apiSetMcJson(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x60>
   35190:	ebffe351 	bl	2dedc <strlcpy>
   35194:	e5940008 	ldr	r0, [r4, #8]
   35198:	e59f102c 	ldr	r1, [pc, #44]	; 351cc <ControlAPI::apiSetMcJson(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x60>
   3519c:	eb00061d 	bl	36a18 <McManager::setupMachine(char const*)>
   351a0:	e3500000 	cmp	r0, #0
   351a4:	0a000001 	beq	351b0 <ControlAPI::apiSetMcJson(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x44>
   351a8:	e3a00001 	mov	r0, #1
   351ac:	e8bd8010 	pop	{r4, pc}
   351b0:	e59d200c 	ldr	r2, [sp, #12]
   351b4:	e59f1014 	ldr	r1, [pc, #20]	; 351d0 <ControlAPI::apiSetMcJson(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x64>
   351b8:	e59d0008 	ldr	r0, [sp, #8]
   351bc:	ebffe346 	bl	2dedc <strlcpy>
   351c0:	e3a00001 	mov	r0, #1
   351c4:	e8bd8010 	pop	{r4, pc}
   351c8:	00002710 	.word	0x00002710
   351cc:	0005cf6c 	.word	0x0005cf6c
   351d0:	000485c0 	.word	0x000485c0

000351d4 <ControlAPI::apiSendKeyToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   351d4:	e92d4030 	push	{r4, r5, lr}
   351d8:	e3a01000 	mov	r1, #0
   351dc:	e1a05002 	mov	r5, r2
   351e0:	e24dd014 	sub	sp, sp, #20
   351e4:	e1a04000 	mov	r4, r0
   351e8:	e3a02006 	mov	r2, #6
   351ec:	e28d0008 	add	r0, sp, #8
   351f0:	e58d1004 	str	r1, [sp, #4]
   351f4:	ebffd344 	bl	29f0c <memset>
   351f8:	e28d1004 	add	r1, sp, #4
   351fc:	e1a00005 	mov	r0, r5
   35200:	e3a0200a 	mov	r2, #10
   35204:	ebffd4b6 	bl	2a4e4 <strtoul>
   35208:	e28d1004 	add	r1, sp, #4
   3520c:	e3a0200a 	mov	r2, #10
   35210:	e59d0004 	ldr	r0, [sp, #4]
   35214:	ebffd4b2 	bl	2a4e4 <strtoul>
   35218:	e1a03000 	mov	r3, r0
   3521c:	e28d1004 	add	r1, sp, #4
   35220:	e3a0200a 	mov	r2, #10
   35224:	e59d0004 	ldr	r0, [sp, #4]
   35228:	e5cd3008 	strb	r3, [sp, #8]
   3522c:	ebffd4ac 	bl	2a4e4 <strtoul>
   35230:	e1a01000 	mov	r1, r0
   35234:	e28d2008 	add	r2, sp, #8
   35238:	e5940008 	ldr	r0, [r4, #8]
   3523c:	e6ef1071 	uxtb	r1, r1
   35240:	eb00077e 	bl	37040 <McManager::keyHandler(unsigned char, unsigned char const*)>
   35244:	e3a00001 	mov	r0, #1
   35248:	e28dd014 	add	sp, sp, #20
   3524c:	e8bd8030 	pop	{r4, r5, pc}

00035250 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   35250:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   35254:	e3a04000 	mov	r4, #0
   35258:	e24ddd32 	sub	sp, sp, #3200	; 0xc80
   3525c:	e24dd00c 	sub	sp, sp, #12
   35260:	e28d2018 	add	r2, sp, #24
   35264:	e1a03001 	mov	r3, r1
   35268:	e88d0014 	stm	sp, {r2, r4}
   3526c:	e58d1014 	str	r1, [sp, #20]
   35270:	e3a02001 	mov	r2, #1
   35274:	e59f120c 	ldr	r1, [pc, #524]	; 35488 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x238>
   35278:	e58d400c 	str	r4, [sp, #12]
   3527c:	e58d4008 	str	r4, [sp, #8]
   35280:	e1a05000 	mov	r5, r0
   35284:	e58d4018 	str	r4, [sp, #24]
   35288:	e58d401c 	str	r4, [sp, #28]
   3528c:	e58d4020 	str	r4, [sp, #32]
   35290:	ebfffec9 	bl	34dbc <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35294:	e1500004 	cmp	r0, r4
   35298:	e59d3014 	ldr	r3, [sp, #20]
   3529c:	0a000039 	beq	35388 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x138>
   352a0:	e28d201c 	add	r2, sp, #28
   352a4:	e88d0014 	stm	sp, {r2, r4}
   352a8:	e1a00005 	mov	r0, r5
   352ac:	e3a02002 	mov	r2, #2
   352b0:	e59f11d4 	ldr	r1, [pc, #468]	; 3548c <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x23c>
   352b4:	e58d400c 	str	r4, [sp, #12]
   352b8:	e58d4008 	str	r4, [sp, #8]
   352bc:	e58d3014 	str	r3, [sp, #20]
   352c0:	ebfffebd 	bl	34dbc <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   352c4:	e3500000 	cmp	r0, #0
   352c8:	e59d3014 	ldr	r3, [sp, #20]
   352cc:	0a000025 	beq	35368 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x118>
   352d0:	e28d2020 	add	r2, sp, #32
   352d4:	e88d0014 	stm	sp, {r2, r4}
   352d8:	e1a00005 	mov	r0, r5
   352dc:	e3a02003 	mov	r2, #3
   352e0:	e59f11a8 	ldr	r1, [pc, #424]	; 35490 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x240>
   352e4:	e58d400c 	str	r4, [sp, #12]
   352e8:	e58d4008 	str	r4, [sp, #8]
   352ec:	ebfffeb2 	bl	34dbc <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   352f0:	e59d301c 	ldr	r3, [sp, #28]
   352f4:	e2432001 	sub	r2, r3, #1
   352f8:	e3520b01 	cmp	r2, #1024	; 0x400
   352fc:	2a000059 	bcs	35468 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x218>
   35300:	e59d2020 	ldr	r2, [sp, #32]
   35304:	e3a01001 	mov	r1, #1
   35308:	e2522000 	subs	r2, r2, #0
   3530c:	13a02001 	movne	r2, #1
   35310:	e58d4008 	str	r4, [sp, #8]
   35314:	e28d6024 	add	r6, sp, #36	; 0x24
   35318:	e5950004 	ldr	r0, [r5, #4]
   3531c:	e58d2000 	str	r2, [sp]
   35320:	e58d1004 	str	r1, [sp, #4]
   35324:	e1a02006 	mov	r2, r6
   35328:	e59d1018 	ldr	r1, [sp, #24]
   3532c:	ebffefb0 	bl	311f4 <BusControl::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   35330:	e3500000 	cmp	r0, #0
   35334:	0a00001b 	beq	353a8 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x158>
   35338:	e3500003 	cmp	r0, #3
   3533c:	959f3150 	ldrls	r3, [pc, #336]	; 35494 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x244>
   35340:	859f3150 	ldrhi	r3, [pc, #336]	; 35498 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x248>
   35344:	97933100 	ldrls	r3, [r3, r0, lsl #2]
   35348:	e59f214c 	ldr	r2, [pc, #332]	; 3549c <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x24c>
   3534c:	e59d1cac 	ldr	r1, [sp, #3244]	; 0xcac
   35350:	e59d0ca8 	ldr	r0, [sp, #3240]	; 0xca8
   35354:	ebffe34c 	bl	2e08c <snprintf>
   35358:	e3a00001 	mov	r0, #1
   3535c:	e28ddd32 	add	sp, sp, #3200	; 0xc80
   35360:	e28dd00c 	add	sp, sp, #12
   35364:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   35368:	e59d2cac 	ldr	r2, [sp, #3244]	; 0xcac
   3536c:	e59f112c 	ldr	r1, [pc, #300]	; 354a0 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x250>
   35370:	e59d0ca8 	ldr	r0, [sp, #3240]	; 0xca8
   35374:	ebffe2d8 	bl	2dedc <strlcpy>
   35378:	e3a00001 	mov	r0, #1
   3537c:	e28ddd32 	add	sp, sp, #3200	; 0xc80
   35380:	e28dd00c 	add	sp, sp, #12
   35384:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   35388:	e59d2cac 	ldr	r2, [sp, #3244]	; 0xcac
   3538c:	e59f1110 	ldr	r1, [pc, #272]	; 354a4 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x254>
   35390:	e59d0ca8 	ldr	r0, [sp, #3240]	; 0xca8
   35394:	ebffe2d0 	bl	2dedc <strlcpy>
   35398:	e3a00001 	mov	r0, #1
   3539c:	e28ddd32 	add	sp, sp, #3200	; 0xc80
   353a0:	e28dd00c 	add	sp, sp, #12
   353a4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   353a8:	e59d2020 	ldr	r2, [sp, #32]
   353ac:	e59d3018 	ldr	r3, [sp, #24]
   353b0:	e28d0e42 	add	r0, sp, #1056	; 0x420
   353b4:	e59f10ec 	ldr	r1, [pc, #236]	; 354a8 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x258>
   353b8:	e58d2004 	str	r2, [sp, #4]
   353bc:	e58d3000 	str	r3, [sp]
   353c0:	e59f20e4 	ldr	r2, [pc, #228]	; 354ac <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x25c>
   353c4:	e59d301c 	ldr	r3, [sp, #28]
   353c8:	e2800004 	add	r0, r0, #4
   353cc:	ebffe32e 	bl	2e08c <snprintf>
   353d0:	e28d0e42 	add	r0, sp, #1056	; 0x420
   353d4:	e2800004 	add	r0, r0, #4
   353d8:	ebffd319 	bl	2a044 <strlen>
   353dc:	e59d301c 	ldr	r3, [sp, #28]
   353e0:	e3530000 	cmp	r3, #0
   353e4:	0a000011 	beq	35430 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1e0>
   353e8:	e28d3e42 	add	r3, sp, #1056	; 0x420
   353ec:	e2833004 	add	r3, r3, #4
   353f0:	e59f90b8 	ldr	r9, [pc, #184]	; 354b0 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x260>
   353f4:	e59f80ac 	ldr	r8, [pc, #172]	; 354a8 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x258>
   353f8:	e28d5023 	add	r5, sp, #35	; 0x23
   353fc:	e0837000 	add	r7, r3, r0
   35400:	e1a04005 	mov	r4, r5
   35404:	e1a00007 	mov	r0, r7
   35408:	e5f53001 	ldrb	r3, [r5, #1]!
   3540c:	e1a02009 	mov	r2, r9
   35410:	e1a01008 	mov	r1, r8
   35414:	ebffe31c 	bl	2e08c <snprintf>
   35418:	e2844002 	add	r4, r4, #2
   3541c:	e59d301c 	ldr	r3, [sp, #28]
   35420:	e0444006 	sub	r4, r4, r6
   35424:	e1530004 	cmp	r3, r4
   35428:	e2877002 	add	r7, r7, #2
   3542c:	8afffff3 	bhi	35400 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1b0>
   35430:	e28d0e42 	add	r0, sp, #1056	; 0x420
   35434:	e59f206c 	ldr	r2, [pc, #108]	; 354a8 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x258>
   35438:	e59f1074 	ldr	r1, [pc, #116]	; 354b4 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x264>
   3543c:	e2800004 	add	r0, r0, #4
   35440:	ebffe2c1 	bl	2df4c <strlcat>
   35444:	e28d1e42 	add	r1, sp, #1056	; 0x420
   35448:	e59d2cac 	ldr	r2, [sp, #3244]	; 0xcac
   3544c:	e59d0ca8 	ldr	r0, [sp, #3240]	; 0xca8
   35450:	e2811004 	add	r1, r1, #4
   35454:	ebffe2a0 	bl	2dedc <strlcpy>
   35458:	e3a00001 	mov	r0, #1
   3545c:	e28ddd32 	add	sp, sp, #3200	; 0xc80
   35460:	e28dd00c 	add	sp, sp, #12
   35464:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   35468:	e59d2cac 	ldr	r2, [sp, #3244]	; 0xcac
   3546c:	e59f1044 	ldr	r1, [pc, #68]	; 354b8 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x268>
   35470:	e59d0ca8 	ldr	r0, [sp, #3240]	; 0xca8
   35474:	ebffe298 	bl	2dedc <strlcpy>
   35478:	e3a00001 	mov	r0, #1
   3547c:	e28ddd32 	add	sp, sp, #3200	; 0xc80
   35480:	e28dd00c 	add	sp, sp, #12
   35484:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   35488:	00048594 	.word	0x00048594
   3548c:	000485e0 	.word	0x000485e0
   35490:	000485f8 	.word	0x000485f8
   35494:	00048b38 	.word	0x00048b38
   35498:	000485d0 	.word	0x000485d0
   3549c:	00048614 	.word	0x00048614
   354a0:	000485e4 	.word	0x000485e4
   354a4:	0004859c 	.word	0x0004859c
   354a8:	00000864 	.word	0x00000864
   354ac:	00048620 	.word	0x00048620
   354b0:	00049714 	.word	0x00049714
   354b4:	000485cc 	.word	0x000485cc
   354b8:	00048600 	.word	0x00048600

000354bc <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   354bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   354c0:	e3a04000 	mov	r4, #0
   354c4:	e24dd028 	sub	sp, sp, #40	; 0x28
   354c8:	e1a08002 	mov	r8, r2
   354cc:	e28d201c 	add	r2, sp, #28
   354d0:	e88d0014 	stm	sp, {r2, r4}
   354d4:	e1a05001 	mov	r5, r1
   354d8:	e1a07003 	mov	r7, r3
   354dc:	e3a02001 	mov	r2, #1
   354e0:	e1a03001 	mov	r3, r1
   354e4:	e58d400c 	str	r4, [sp, #12]
   354e8:	e59f115c 	ldr	r1, [pc, #348]	; 3564c <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x190>
   354ec:	e58d4008 	str	r4, [sp, #8]
   354f0:	e1a06000 	mov	r6, r0
   354f4:	e58d401c 	str	r4, [sp, #28]
   354f8:	e58d4020 	str	r4, [sp, #32]
   354fc:	e58d4024 	str	r4, [sp, #36]	; 0x24
   35500:	ebfffe2d 	bl	34dbc <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35504:	e1500004 	cmp	r0, r4
   35508:	0a000029 	beq	355b4 <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xf8>
   3550c:	e28d3020 	add	r3, sp, #32
   35510:	e88d0018 	stm	sp, {r3, r4}
   35514:	e3a02002 	mov	r2, #2
   35518:	e1a03005 	mov	r3, r5
   3551c:	e1a00006 	mov	r0, r6
   35520:	e59f1128 	ldr	r1, [pc, #296]	; 35650 <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x194>
   35524:	e58d400c 	str	r4, [sp, #12]
   35528:	e58d4008 	str	r4, [sp, #8]
   3552c:	ebfffe22 	bl	34dbc <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35530:	e3500000 	cmp	r0, #0
   35534:	0a000017 	beq	35598 <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdc>
   35538:	e28d2024 	add	r2, sp, #36	; 0x24
   3553c:	e1a03005 	mov	r3, r5
   35540:	e58d2000 	str	r2, [sp]
   35544:	e1a00006 	mov	r0, r6
   35548:	e3a02003 	mov	r2, #3
   3554c:	e59f1100 	ldr	r1, [pc, #256]	; 35654 <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x198>
   35550:	e58d400c 	str	r4, [sp, #12]
   35554:	e58d4008 	str	r4, [sp, #8]
   35558:	e58d4004 	str	r4, [sp, #4]
   3555c:	ebfffe16 	bl	34dbc <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35560:	e59d3020 	ldr	r3, [sp, #32]
   35564:	e243c001 	sub	ip, r3, #1
   35568:	e1530007 	cmp	r3, r7
   3556c:	935c0b01 	cmpls	ip, #1024	; 0x400
   35570:	23a0c001 	movcs	ip, #1
   35574:	33a0c000 	movcc	ip, #0
   35578:	3a000014 	bcc	355d0 <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x114>
   3557c:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
   35580:	e59f10d0 	ldr	r1, [pc, #208]	; 35658 <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x19c>
   35584:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   35588:	ebffe253 	bl	2dedc <strlcpy>
   3558c:	e3a00001 	mov	r0, #1
   35590:	e28dd028 	add	sp, sp, #40	; 0x28
   35594:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   35598:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
   3559c:	e59f10b8 	ldr	r1, [pc, #184]	; 3565c <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1a0>
   355a0:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   355a4:	ebffe24c 	bl	2dedc <strlcpy>
   355a8:	e3a00001 	mov	r0, #1
   355ac:	e28dd028 	add	sp, sp, #40	; 0x28
   355b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   355b4:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
   355b8:	e59f10a0 	ldr	r1, [pc, #160]	; 35660 <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1a4>
   355bc:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   355c0:	ebffe245 	bl	2dedc <strlcpy>
   355c4:	e3a00001 	mov	r0, #1
   355c8:	e28dd028 	add	sp, sp, #40	; 0x28
   355cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   355d0:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   355d4:	e3a0e001 	mov	lr, #1
   355d8:	e2511000 	subs	r1, r1, #0
   355dc:	13a01001 	movne	r1, #1
   355e0:	e58dc008 	str	ip, [sp, #8]
   355e4:	e5960004 	ldr	r0, [r6, #4]
   355e8:	e1a02008 	mov	r2, r8
   355ec:	e88d4002 	stm	sp, {r1, lr}
   355f0:	e59d101c 	ldr	r1, [sp, #28]
   355f4:	ebffeefe 	bl	311f4 <BusControl::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   355f8:	e3500000 	cmp	r0, #0
   355fc:	0a00000d 	beq	35638 <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x17c>
   35600:	e3500003 	cmp	r0, #3
   35604:	959f3058 	ldrls	r3, [pc, #88]	; 35664 <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1a8>
   35608:	859f3058 	ldrhi	r3, [pc, #88]	; 35668 <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1ac>
   3560c:	97933100 	ldrls	r3, [r3, r0, lsl #2]
   35610:	e3a01002 	mov	r1, #2
   35614:	e59f2050 	ldr	r2, [pc, #80]	; 3566c <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1b0>
   35618:	e59f0050 	ldr	r0, [pc, #80]	; 35670 <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1b4>
   3561c:	e58d3014 	str	r3, [sp, #20]
   35620:	ebffe5f8 	bl	2ee08 <LogWrite>
   35624:	e1cd04d0 	ldrd	r0, [sp, #64]	; 0x40
   35628:	e59d3014 	ldr	r3, [sp, #20]
   3562c:	e59f2040 	ldr	r2, [pc, #64]	; 35674 <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1b8>
   35630:	ebffe295 	bl	2e08c <snprintf>
   35634:	eaffffd4 	b	3558c <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd0>
   35638:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
   3563c:	e59f1034 	ldr	r1, [pc, #52]	; 35678 <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1bc>
   35640:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   35644:	ebffe224 	bl	2dedc <strlcpy>
   35648:	eaffffcf 	b	3558c <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd0>
   3564c:	00048594 	.word	0x00048594
   35650:	000485e0 	.word	0x000485e0
   35654:	000485f8 	.word	0x000485f8
   35658:	00048600 	.word	0x00048600
   3565c:	00048658 	.word	0x00048658
   35660:	0004859c 	.word	0x0004859c
   35664:	00048b38 	.word	0x00048b38
   35668:	000485d0 	.word	0x000485d0
   3566c:	0004866c 	.word	0x0004866c
   35670:	00048b48 	.word	0x00048b48
   35674:	00048614 	.word	0x00048614
   35678:	00048098 	.word	0x00048098

0003567c <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   3567c:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   35680:	e3a04000 	mov	r4, #0
   35684:	e28db01c 	add	fp, sp, #28
   35688:	e1a08002 	mov	r8, r2
   3568c:	e24ddd22 	sub	sp, sp, #2176	; 0x880
   35690:	e24b2d22 	sub	r2, fp, #2176	; 0x880
   35694:	e24dd008 	sub	sp, sp, #8
   35698:	e242200c 	sub	r2, r2, #12
   3569c:	e1a05001 	mov	r5, r1
   356a0:	e88d0014 	stm	sp, {r2, r4}
   356a4:	e1a07003 	mov	r7, r3
   356a8:	e3a02001 	mov	r2, #1
   356ac:	e1a03001 	mov	r3, r1
   356b0:	e58d400c 	str	r4, [sp, #12]
   356b4:	e59f1204 	ldr	r1, [pc, #516]	; 358c0 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x244>
   356b8:	e58d4008 	str	r4, [sp, #8]
   356bc:	e1a06000 	mov	r6, r0
   356c0:	e50b488c 	str	r4, [fp, #-2188]	; 0xfffff774
   356c4:	e50b4888 	str	r4, [fp, #-2184]	; 0xfffff778
   356c8:	e50b4884 	str	r4, [fp, #-2180]	; 0xfffff77c
   356cc:	ebfffdba 	bl	34dbc <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   356d0:	e1500004 	cmp	r0, r4
   356d4:	0a00002b 	beq	35788 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x10c>
   356d8:	e24b3e87 	sub	r3, fp, #2160	; 0x870
   356dc:	e243300c 	sub	r3, r3, #12
   356e0:	e243300c 	sub	r3, r3, #12
   356e4:	e88d0018 	stm	sp, {r3, r4}
   356e8:	e3a02002 	mov	r2, #2
   356ec:	e1a03005 	mov	r3, r5
   356f0:	e1a00006 	mov	r0, r6
   356f4:	e59f11c8 	ldr	r1, [pc, #456]	; 358c4 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x248>
   356f8:	e58d400c 	str	r4, [sp, #12]
   356fc:	e58d4008 	str	r4, [sp, #8]
   35700:	ebfffdad 	bl	34dbc <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35704:	e3500000 	cmp	r0, #0
   35708:	0a000017 	beq	3576c <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xf0>
   3570c:	e24b3e87 	sub	r3, fp, #2160	; 0x870
   35710:	e243300c 	sub	r3, r3, #12
   35714:	e2432008 	sub	r2, r3, #8
   35718:	e58d2000 	str	r2, [sp]
   3571c:	e1a03005 	mov	r3, r5
   35720:	e3a02003 	mov	r2, #3
   35724:	e1a00006 	mov	r0, r6
   35728:	e59f1198 	ldr	r1, [pc, #408]	; 358c8 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x24c>
   3572c:	e58d400c 	str	r4, [sp, #12]
   35730:	e58d4008 	str	r4, [sp, #8]
   35734:	e58d4004 	str	r4, [sp, #4]
   35738:	ebfffd9f 	bl	34dbc <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   3573c:	e51b2888 	ldr	r2, [fp, #-2184]	; 0xfffff778
   35740:	e2423001 	sub	r3, r2, #1
   35744:	e1520007 	cmp	r2, r7
   35748:	93530b01 	cmpls	r3, #1024	; 0x400
   3574c:	3a000014 	bcc	357a4 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x128>
   35750:	e59b2008 	ldr	r2, [fp, #8]
   35754:	e59f1170 	ldr	r1, [pc, #368]	; 358cc <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x250>
   35758:	e59b0004 	ldr	r0, [fp, #4]
   3575c:	ebffe1de 	bl	2dedc <strlcpy>
   35760:	e3a00001 	mov	r0, #1
   35764:	e24bd01c 	sub	sp, fp, #28
   35768:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3576c:	e59b2008 	ldr	r2, [fp, #8]
   35770:	e59f1158 	ldr	r1, [pc, #344]	; 358d0 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x254>
   35774:	e59b0004 	ldr	r0, [fp, #4]
   35778:	ebffe1d7 	bl	2dedc <strlcpy>
   3577c:	e3a00001 	mov	r0, #1
   35780:	e24bd01c 	sub	sp, fp, #28
   35784:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   35788:	e59b2008 	ldr	r2, [fp, #8]
   3578c:	e59f1140 	ldr	r1, [pc, #320]	; 358d4 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x258>
   35790:	e59b0004 	ldr	r0, [fp, #4]
   35794:	ebffe1d0 	bl	2dedc <strlcpy>
   35798:	e3a00001 	mov	r0, #1
   3579c:	e24bd01c 	sub	sp, fp, #28
   357a0:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   357a4:	e2823007 	add	r3, r2, #7
   357a8:	e3c33007 	bic	r3, r3, #7
   357ac:	e04dd003 	sub	sp, sp, r3
   357b0:	e28d7010 	add	r7, sp, #16
   357b4:	e1a01008 	mov	r1, r8
   357b8:	e1a00007 	mov	r0, r7
   357bc:	ebffd41b 	bl	2a830 <memcpy>
   357c0:	e51b3884 	ldr	r3, [fp, #-2180]	; 0xfffff77c
   357c4:	e3a01001 	mov	r1, #1
   357c8:	e2533000 	subs	r3, r3, #0
   357cc:	13a03001 	movne	r3, #1
   357d0:	e5960004 	ldr	r0, [r6, #4]
   357d4:	e1a02007 	mov	r2, r7
   357d8:	e58d3000 	str	r3, [sp]
   357dc:	e58d1008 	str	r1, [sp, #8]
   357e0:	e58d1004 	str	r1, [sp, #4]
   357e4:	e51b3888 	ldr	r3, [fp, #-2184]	; 0xfffff778
   357e8:	e51b188c 	ldr	r1, [fp, #-2188]	; 0xfffff774
   357ec:	ebffee80 	bl	311f4 <BusControl::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   357f0:	e3500000 	cmp	r0, #0
   357f4:	0a000007 	beq	35818 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x19c>
   357f8:	e3500003 	cmp	r0, #3
   357fc:	959f30d4 	ldrls	r3, [pc, #212]	; 358d8 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x25c>
   35800:	859f30d4 	ldrhi	r3, [pc, #212]	; 358dc <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x260>
   35804:	97933100 	ldrls	r3, [r3, r0, lsl #2]
   35808:	e59f20d0 	ldr	r2, [pc, #208]	; 358e0 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x264>
   3580c:	e1cb00d4 	ldrd	r0, [fp, #4]
   35810:	ebffe21d 	bl	2e08c <snprintf>
   35814:	eaffffd1 	b	35760 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe4>
   35818:	e51b2884 	ldr	r2, [fp, #-2180]	; 0xfffff77c
   3581c:	e51b388c 	ldr	r3, [fp, #-2188]	; 0xfffff774
   35820:	e24b1d22 	sub	r1, fp, #2176	; 0x880
   35824:	e1a00001 	mov	r0, r1
   35828:	e50b1890 	str	r1, [fp, #-2192]	; 0xfffff770
   3582c:	e58d2004 	str	r2, [sp, #4]
   35830:	e59f10ac 	ldr	r1, [pc, #172]	; 358e4 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x268>
   35834:	e59f20ac 	ldr	r2, [pc, #172]	; 358e8 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x26c>
   35838:	e58d3000 	str	r3, [sp]
   3583c:	e51b3888 	ldr	r3, [fp, #-2184]	; 0xfffff778
   35840:	ebffe211 	bl	2e08c <snprintf>
   35844:	e51b0890 	ldr	r0, [fp, #-2192]	; 0xfffff770
   35848:	ebffd1fd 	bl	2a044 <strlen>
   3584c:	e51b3888 	ldr	r3, [fp, #-2184]	; 0xfffff778
   35850:	e3530000 	cmp	r3, #0
   35854:	0a000010 	beq	3589c <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x220>
   35858:	e51b3890 	ldr	r3, [fp, #-2192]	; 0xfffff770
   3585c:	e59f9088 	ldr	r9, [pc, #136]	; 358ec <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x270>
   35860:	e59f807c 	ldr	r8, [pc, #124]	; 358e4 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x268>
   35864:	e0835000 	add	r5, r3, r0
   35868:	e28d600f 	add	r6, sp, #15
   3586c:	e1a04006 	mov	r4, r6
   35870:	e1a00005 	mov	r0, r5
   35874:	e5f63001 	ldrb	r3, [r6, #1]!
   35878:	e1a02009 	mov	r2, r9
   3587c:	e1a01008 	mov	r1, r8
   35880:	ebffe201 	bl	2e08c <snprintf>
   35884:	e2844002 	add	r4, r4, #2
   35888:	e51b3888 	ldr	r3, [fp, #-2184]	; 0xfffff778
   3588c:	e0444007 	sub	r4, r4, r7
   35890:	e1530004 	cmp	r3, r4
   35894:	e2855002 	add	r5, r5, #2
   35898:	8afffff3 	bhi	3586c <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1f0>
   3589c:	e59f2040 	ldr	r2, [pc, #64]	; 358e4 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x268>
   358a0:	e59f1048 	ldr	r1, [pc, #72]	; 358f0 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x274>
   358a4:	e51b0890 	ldr	r0, [fp, #-2192]	; 0xfffff770
   358a8:	ebffe1a7 	bl	2df4c <strlcat>
   358ac:	e59b2008 	ldr	r2, [fp, #8]
   358b0:	e51b1890 	ldr	r1, [fp, #-2192]	; 0xfffff770
   358b4:	e59b0004 	ldr	r0, [fp, #4]
   358b8:	ebffe187 	bl	2dedc <strlcpy>
   358bc:	eaffffa7 	b	35760 <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe4>
   358c0:	00048594 	.word	0x00048594
   358c4:	000485e0 	.word	0x000485e0
   358c8:	000485f8 	.word	0x000485f8
   358cc:	00048600 	.word	0x00048600
   358d0:	00048658 	.word	0x00048658
   358d4:	0004859c 	.word	0x0004859c
   358d8:	00048b38 	.word	0x00048b38
   358dc:	000485d0 	.word	0x000485d0
   358e0:	00048614 	.word	0x00048614
   358e4:	00000864 	.word	0x00000864
   358e8:	00048620 	.word	0x00048620
   358ec:	00049714 	.word	0x00049714
   358f0:	000485cc 	.word	0x000485cc

000358f4 <ControlAPI::apiDebuggerContinue(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   358f4:	e5900004 	ldr	r0, [r0, #4]
   358f8:	e92d4010 	push	{r4, lr}
   358fc:	e2800014 	add	r0, r0, #20
   35900:	ebfff3d8 	bl	32868 <TargetControl::debuggerContinue()>
   35904:	e3a00001 	mov	r0, #1
   35908:	e8bd8010 	pop	{r4, pc}

0003590c <ControlAPI::apiDebuggerRegsFormatted(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   3590c:	e92d4030 	push	{r4, r5, lr}
   35910:	e5900004 	ldr	r0, [r0, #4]
   35914:	e24dd0cc 	sub	sp, sp, #204	; 0xcc
   35918:	e59d40d8 	ldr	r4, [sp, #216]	; 0xd8
   3591c:	e59d50dc 	ldr	r5, [sp, #220]	; 0xdc
   35920:	e1a0100d 	mov	r1, sp
   35924:	e3a020c8 	mov	r2, #200	; 0xc8
   35928:	e2800014 	add	r0, r0, #20
   3592c:	ebfff40b 	bl	32960 <TargetControl::getRegsFormatted(char*, int)>
   35930:	e1a02005 	mov	r2, r5
   35934:	e1a00004 	mov	r0, r4
   35938:	e59f102c 	ldr	r1, [pc, #44]	; 3596c <ControlAPI::apiDebuggerRegsFormatted(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x60>
   3593c:	ebffe166 	bl	2dedc <strlcpy>
   35940:	e1a02005 	mov	r2, r5
   35944:	e1a0100d 	mov	r1, sp
   35948:	e1a00004 	mov	r0, r4
   3594c:	ebffe17e 	bl	2df4c <strlcat>
   35950:	e1a02005 	mov	r2, r5
   35954:	e1a00004 	mov	r0, r4
   35958:	e59f1010 	ldr	r1, [pc, #16]	; 35970 <ControlAPI::apiDebuggerRegsFormatted(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x64>
   3595c:	ebffe17a 	bl	2df4c <strlcat>
   35960:	e3a00001 	mov	r0, #1
   35964:	e28dd0cc 	add	sp, sp, #204	; 0xcc
   35968:	e8bd8030 	pop	{r4, r5, pc}
   3596c:	00048688 	.word	0x00048688
   35970:	000485cc 	.word	0x000485cc

00035974 <ControlAPI::apiDebuggerRegsJSON(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   35974:	e92d4030 	push	{r4, r5, lr}
   35978:	e5900004 	ldr	r0, [r0, #4]
   3597c:	e24ddf65 	sub	sp, sp, #404	; 0x194
   35980:	e59d41a0 	ldr	r4, [sp, #416]	; 0x1a0
   35984:	e59d51a4 	ldr	r5, [sp, #420]	; 0x1a4
   35988:	e1a0100d 	mov	r1, sp
   3598c:	e3a02e19 	mov	r2, #400	; 0x190
   35990:	e2800014 	add	r0, r0, #20
   35994:	ebfff479 	bl	32b80 <TargetControl::getRegsJSON(char*, int)>
   35998:	e1a02005 	mov	r2, r5
   3599c:	e1a00004 	mov	r0, r4
   359a0:	e59f101c 	ldr	r1, [pc, #28]	; 359c4 <ControlAPI::apiDebuggerRegsJSON(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x50>
   359a4:	ebffe14c 	bl	2dedc <strlcpy>
   359a8:	e1a02005 	mov	r2, r5
   359ac:	e1a0100d 	mov	r1, sp
   359b0:	e1a00004 	mov	r0, r4
   359b4:	ebffe164 	bl	2df4c <strlcat>
   359b8:	e3a00001 	mov	r0, #1
   359bc:	e28ddf65 	add	sp, sp, #404	; 0x194
   359c0:	e8bd8030 	pop	{r4, r5, pc}
   359c4:	000486a0 	.word	0x000486a0

000359c8 <ControlAPI::apiDebuggerStatus(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   359c8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   359cc:	e5901004 	ldr	r1, [r0, #4]
   359d0:	e24dd00c 	sub	sp, sp, #12
   359d4:	e2811601 	add	r1, r1, #1048576	; 0x100000
   359d8:	e5d134b8 	ldrb	r3, [r1, #1208]	; 0x4b8
   359dc:	e5d113ad 	ldrb	r1, [r1, #941]	; 0x3ad
   359e0:	e2533000 	subs	r3, r3, #0
   359e4:	e58d1000 	str	r1, [sp]
   359e8:	13a03001 	movne	r3, #1
   359ec:	e1cd01d0 	ldrd	r0, [sp, #16]
   359f0:	e59f200c 	ldr	r2, [pc, #12]	; 35a04 <ControlAPI::apiDebuggerStatus(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x3c>
   359f4:	ebffe1a4 	bl	2e08c <snprintf>
   359f8:	e3a00001 	mov	r0, #1
   359fc:	e28dd00c 	add	sp, sp, #12
   35a00:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   35a04:	000486b0 	.word	0x000486b0

00035a08 <ControlAPI::formDebuggerResponse(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   35a08:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   35a0c:	e3a04000 	mov	r4, #0
   35a10:	e3a0c00f 	mov	ip, #15
   35a14:	e1a05000 	mov	r5, r0
   35a18:	e1a06001 	mov	r6, r1
   35a1c:	e1a08002 	mov	r8, r2
   35a20:	e1a09003 	mov	r9, r3
   35a24:	e24ddefb 	sub	sp, sp, #4016	; 0xfb0
   35a28:	e24dd008 	sub	sp, sp, #8
   35a2c:	e59d7fd8 	ldr	r7, [sp, #4056]	; 0xfd8
   35a30:	e59dafdc 	ldr	sl, [sp, #4060]	; 0xfdc
   35a34:	e28d2010 	add	r2, sp, #16
   35a38:	e1a03001 	mov	r3, r1
   35a3c:	e58d2000 	str	r2, [sp]
   35a40:	e59f10a8 	ldr	r1, [pc, #168]	; 35af0 <ControlAPI::formDebuggerResponse(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe8>
   35a44:	e3a02001 	mov	r2, #1
   35a48:	e58d400c 	str	r4, [sp, #12]
   35a4c:	e58d4008 	str	r4, [sp, #8]
   35a50:	e58d4004 	str	r4, [sp, #4]
   35a54:	e58dc010 	str	ip, [sp, #16]
   35a58:	ebfffcd7 	bl	34dbc <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35a5c:	e1a03009 	mov	r3, r9
   35a60:	e1a02008 	mov	r2, r8
   35a64:	e1a01006 	mov	r1, r6
   35a68:	e1a00005 	mov	r0, r5
   35a6c:	e88d0480 	stm	sp, {r7, sl}
   35a70:	ebffffbf 	bl	35974 <ControlAPI::apiDebuggerRegsJSON(char const*, unsigned char const*, unsigned int, char*, unsigned int)>
   35a74:	e5950004 	ldr	r0, [r5, #4]
   35a78:	e28d3014 	add	r3, sp, #20
   35a7c:	e59d1010 	ldr	r1, [sp, #16]
   35a80:	e58d3000 	str	r3, [sp]
   35a84:	e28d2018 	add	r2, sp, #24
   35a88:	e3a03e7d 	mov	r3, #2000	; 0x7d0
   35a8c:	e2800014 	add	r0, r0, #20
   35a90:	e58d4014 	str	r4, [sp, #20]
   35a94:	eb00276e 	bl	3f854 <TargetControl::disassemble(unsigned long, char*, unsigned long, unsigned long&)>
   35a98:	e59d2014 	ldr	r2, [sp, #20]
   35a9c:	e28d0e7e 	add	r0, sp, #2016	; 0x7e0
   35aa0:	e28d3018 	add	r3, sp, #24
   35aa4:	e58d2000 	str	r2, [sp]
   35aa8:	e3a01e7d 	mov	r1, #2000	; 0x7d0
   35aac:	e59f2040 	ldr	r2, [pc, #64]	; 35af4 <ControlAPI::formDebuggerResponse(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xec>
   35ab0:	e2800008 	add	r0, r0, #8
   35ab4:	ebffe174 	bl	2e08c <snprintf>
   35ab8:	e28d1e7e 	add	r1, sp, #2016	; 0x7e0
   35abc:	e1a0200a 	mov	r2, sl
   35ac0:	e1a00007 	mov	r0, r7
   35ac4:	e2811008 	add	r1, r1, #8
   35ac8:	ebffe11f 	bl	2df4c <strlcat>
   35acc:	e1a03007 	mov	r3, r7
   35ad0:	e3a01004 	mov	r1, #4
   35ad4:	e59f201c 	ldr	r2, [pc, #28]	; 35af8 <ControlAPI::formDebuggerResponse(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xf0>
   35ad8:	e59f001c 	ldr	r0, [pc, #28]	; 35afc <ControlAPI::formDebuggerResponse(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xf4>
   35adc:	ebffe4c9 	bl	2ee08 <LogWrite>
   35ae0:	e3a00001 	mov	r0, #1
   35ae4:	e28ddefb 	add	sp, sp, #4016	; 0xfb0
   35ae8:	e28dd008 	add	sp, sp, #8
   35aec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35af0:	000486d8 	.word	0x000486d8
   35af4:	000486e4 	.word	0x000486e4
   35af8:	00048704 	.word	0x00048704
   35afc:	00048b48 	.word	0x00048b48

00035b00 <ControlAPI::apiDebuggerBreak(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   35b00:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   35b04:	e1a04000 	mov	r4, r0
   35b08:	e5900004 	ldr	r0, [r0, #4]
   35b0c:	e24dd00c 	sub	sp, sp, #12
   35b10:	e2800014 	add	r0, r0, #20
   35b14:	e1a05001 	mov	r5, r1
   35b18:	e1a06002 	mov	r6, r2
   35b1c:	e1a07003 	mov	r7, r3
   35b20:	ebfff31f 	bl	327a4 <TargetControl::debuggerBreak()>
   35b24:	e3500000 	cmp	r0, #0
   35b28:	1a000006 	bne	35b48 <ControlAPI::apiDebuggerBreak(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x48>
   35b2c:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   35b30:	e59f1040 	ldr	r1, [pc, #64]	; 35b78 <ControlAPI::apiDebuggerBreak(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x78>
   35b34:	e59d0020 	ldr	r0, [sp, #32]
   35b38:	ebffe0e7 	bl	2dedc <strlcpy>
   35b3c:	e3a00001 	mov	r0, #1
   35b40:	e28dd00c 	add	sp, sp, #12
   35b44:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   35b48:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   35b4c:	e1a02006 	mov	r2, r6
   35b50:	e58d3004 	str	r3, [sp, #4]
   35b54:	e59d3020 	ldr	r3, [sp, #32]
   35b58:	e1a01005 	mov	r1, r5
   35b5c:	e58d3000 	str	r3, [sp]
   35b60:	e1a00004 	mov	r0, r4
   35b64:	e1a03007 	mov	r3, r7
   35b68:	ebffffa6 	bl	35a08 <ControlAPI::formDebuggerResponse(char const*, unsigned char const*, unsigned int, char*, unsigned int)>
   35b6c:	e3a00001 	mov	r0, #1
   35b70:	e28dd00c 	add	sp, sp, #12
   35b74:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   35b78:	00048710 	.word	0x00048710

00035b7c <ControlAPI::apiDebuggerStepIn(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   35b7c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   35b80:	e1a04000 	mov	r4, r0
   35b84:	e5900004 	ldr	r0, [r0, #4]
   35b88:	e24dd00c 	sub	sp, sp, #12
   35b8c:	e2800014 	add	r0, r0, #20
   35b90:	e1a05001 	mov	r5, r1
   35b94:	e1a06002 	mov	r6, r2
   35b98:	e1a07003 	mov	r7, r3
   35b9c:	ebfff345 	bl	328b8 <TargetControl::debuggerStepIn()>
   35ba0:	e3500000 	cmp	r0, #0
   35ba4:	1a000006 	bne	35bc4 <ControlAPI::apiDebuggerStepIn(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x48>
   35ba8:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   35bac:	e59f1040 	ldr	r1, [pc, #64]	; 35bf4 <ControlAPI::apiDebuggerStepIn(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x78>
   35bb0:	e59d0020 	ldr	r0, [sp, #32]
   35bb4:	ebffe0c8 	bl	2dedc <strlcpy>
   35bb8:	e3a00001 	mov	r0, #1
   35bbc:	e28dd00c 	add	sp, sp, #12
   35bc0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   35bc4:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   35bc8:	e1a02006 	mov	r2, r6
   35bcc:	e58d3004 	str	r3, [sp, #4]
   35bd0:	e59d3020 	ldr	r3, [sp, #32]
   35bd4:	e1a01005 	mov	r1, r5
   35bd8:	e58d3000 	str	r3, [sp]
   35bdc:	e1a00004 	mov	r0, r4
   35be0:	e1a03007 	mov	r3, r7
   35be4:	ebffff87 	bl	35a08 <ControlAPI::formDebuggerResponse(char const*, unsigned char const*, unsigned int, char*, unsigned int)>
   35be8:	e3a00001 	mov	r0, #1
   35bec:	e28dd00c 	add	sp, sp, #12
   35bf0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   35bf4:	00048728 	.word	0x00048728

00035bf8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   35bf8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   35bfc:	e24dd078 	sub	sp, sp, #120	; 0x78
   35c00:	e1a05000 	mov	r5, r0
   35c04:	e1a08002 	mov	r8, r2
   35c08:	e1a07003 	mov	r7, r3
   35c0c:	e59f089c 	ldr	r0, [pc, #2204]	; 364b0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8b8>
   35c10:	e3a03032 	mov	r3, #50	; 0x32
   35c14:	e28d2010 	add	r2, sp, #16
   35c18:	e1a06001 	mov	r6, r1
   35c1c:	ebffe15b 	bl	2e190 <jsonGetValueForKey>
   35c20:	e2504000 	subs	r4, r0, #0
   35c24:	1a000002 	bne	35c34 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x3c>
   35c28:	e1a00004 	mov	r0, r4
   35c2c:	e28dd078 	add	sp, sp, #120	; 0x78
   35c30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   35c34:	e59d2094 	ldr	r2, [sp, #148]	; 0x94
   35c38:	e59f1874 	ldr	r1, [pc, #2164]	; 364b4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8bc>
   35c3c:	e59d0090 	ldr	r0, [sp, #144]	; 0x90
   35c40:	ebffe0a5 	bl	2dedc <strlcpy>
   35c44:	e59f186c 	ldr	r1, [pc, #2156]	; 364b8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8c0>
   35c48:	e28d0010 	add	r0, sp, #16
   35c4c:	ebffd123 	bl	2a0e0 <strcasecmp>
   35c50:	e3500000 	cmp	r0, #0
   35c54:	0a000004 	beq	35c6c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x74>
   35c58:	e59f185c 	ldr	r1, [pc, #2140]	; 364bc <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8c4>
   35c5c:	e28d0010 	add	r0, sp, #16
   35c60:	ebffd11e 	bl	2a0e0 <strcasecmp>
   35c64:	e3500000 	cmp	r0, #0
   35c68:	1a000005 	bne	35c84 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8c>
   35c6c:	e5950004 	ldr	r0, [r5, #4]
   35c70:	e2800018 	add	r0, r0, #24
   35c74:	ebfff830 	bl	33d3c <TargetProgrammer::clear()>
   35c78:	e1a00004 	mov	r0, r4
   35c7c:	e28dd078 	add	sp, sp, #120	; 0x78
   35c80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   35c84:	e59f1834 	ldr	r1, [pc, #2100]	; 364c0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8c8>
   35c88:	e28d0010 	add	r0, sp, #16
   35c8c:	ebffd113 	bl	2a0e0 <strcasecmp>
   35c90:	e3500000 	cmp	r0, #0
   35c94:	0a000014 	beq	35cec <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xf4>
   35c98:	e59f1824 	ldr	r1, [pc, #2084]	; 364c4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8cc>
   35c9c:	e28d0010 	add	r0, sp, #16
   35ca0:	ebffd10e 	bl	2a0e0 <strcasecmp>
   35ca4:	e3500000 	cmp	r0, #0
   35ca8:	0a000004 	beq	35cc0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc8>
   35cac:	e59f1814 	ldr	r1, [pc, #2068]	; 364c8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8d0>
   35cb0:	e28d0010 	add	r0, sp, #16
   35cb4:	ebffd109 	bl	2a0e0 <strcasecmp>
   35cb8:	e3500000 	cmp	r0, #0
   35cbc:	1a000015 	bne	35d18 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x120>
   35cc0:	e59d3094 	ldr	r3, [sp, #148]	; 0x94
   35cc4:	e1a02008 	mov	r2, r8
   35cc8:	e58d3004 	str	r3, [sp, #4]
   35ccc:	e59d3090 	ldr	r3, [sp, #144]	; 0x90
   35cd0:	e1a01006 	mov	r1, r6
   35cd4:	e58d3000 	str	r3, [sp]
   35cd8:	e1a00005 	mov	r0, r5
   35cdc:	e1a03007 	mov	r3, r7
   35ce0:	ebfffcde 	bl	35060 <ControlAPI::apiProgWrite(char const*, unsigned char const*, unsigned int, char*, unsigned int)>
   35ce4:	e1a04000 	mov	r4, r0
   35ce8:	eaffffce 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   35cec:	e59d3094 	ldr	r3, [sp, #148]	; 0x94
   35cf0:	e1a02008 	mov	r2, r8
   35cf4:	e58d3004 	str	r3, [sp, #4]
   35cf8:	e59d3090 	ldr	r3, [sp, #144]	; 0x90
   35cfc:	e1a01006 	mov	r1, r6
   35d00:	e58d3000 	str	r3, [sp]
   35d04:	e1a00005 	mov	r0, r5
   35d08:	e1a03007 	mov	r3, r7
   35d0c:	ebfffcb0 	bl	34fd4 <ControlAPI::apiProgAddMemBlock(char const*, unsigned char const*, unsigned int, char*, unsigned int)>
   35d10:	e1a04000 	mov	r4, r0
   35d14:	eaffffc3 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   35d18:	e59f17ac 	ldr	r1, [pc, #1964]	; 364cc <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8d4>
   35d1c:	e28d0010 	add	r0, sp, #16
   35d20:	ebffd0ee 	bl	2a0e0 <strcasecmp>
   35d24:	e3500000 	cmp	r0, #0
   35d28:	0a000004 	beq	35d40 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x148>
   35d2c:	e59f179c 	ldr	r1, [pc, #1948]	; 364d0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8d8>
   35d30:	e28d0010 	add	r0, sp, #16
   35d34:	ebffd0e9 	bl	2a0e0 <strcasecmp>
   35d38:	e3500000 	cmp	r0, #0
   35d3c:	1a000005 	bne	35d58 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x160>
   35d40:	e5950004 	ldr	r0, [r5, #4]
   35d44:	e3a02000 	mov	r2, #0
   35d48:	e3a01001 	mov	r1, #1
   35d4c:	e2800014 	add	r0, r0, #20
   35d50:	ebfff3d1 	bl	32c9c <TargetControl::programmingStart(bool, bool)>
   35d54:	eaffffb3 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   35d58:	e59f1774 	ldr	r1, [pc, #1908]	; 364d4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8dc>
   35d5c:	e28d0010 	add	r0, sp, #16
   35d60:	ebffd0de 	bl	2a0e0 <strcasecmp>
   35d64:	e3500000 	cmp	r0, #0
   35d68:	0afffff4 	beq	35d40 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x148>
   35d6c:	e59f1764 	ldr	r1, [pc, #1892]	; 364d8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8e0>
   35d70:	e28d0010 	add	r0, sp, #16
   35d74:	ebffd0d9 	bl	2a0e0 <strcasecmp>
   35d78:	e3500000 	cmp	r0, #0
   35d7c:	0a000004 	beq	35d94 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x19c>
   35d80:	e59f1754 	ldr	r1, [pc, #1876]	; 364dc <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8e4>
   35d84:	e28d0010 	add	r0, sp, #16
   35d88:	ebffd0d4 	bl	2a0e0 <strcasecmp>
   35d8c:	e3500000 	cmp	r0, #0
   35d90:	1a000003 	bne	35da4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1ac>
   35d94:	e5950004 	ldr	r0, [r5, #4]
   35d98:	e2800014 	add	r0, r0, #20
   35d9c:	ebfff2e4 	bl	32934 <TargetControl::targetReset()>
   35da0:	eaffffa0 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   35da4:	e59f1734 	ldr	r1, [pc, #1844]	; 364e0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8e8>
   35da8:	e28d0010 	add	r0, sp, #16
   35dac:	ebffd0cb 	bl	2a0e0 <strcasecmp>
   35db0:	e3500000 	cmp	r0, #0
   35db4:	0a000004 	beq	35dcc <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1d4>
   35db8:	e59f1724 	ldr	r1, [pc, #1828]	; 364e4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8ec>
   35dbc:	e28d0010 	add	r0, sp, #16
   35dc0:	ebffd0c6 	bl	2a0e0 <strcasecmp>
   35dc4:	e3500000 	cmp	r0, #0
   35dc8:	1a00000a 	bne	35df8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x200>
   35dcc:	e59d3094 	ldr	r3, [sp, #148]	; 0x94
   35dd0:	e1a02008 	mov	r2, r8
   35dd4:	e58d3004 	str	r3, [sp, #4]
   35dd8:	e59d3090 	ldr	r3, [sp, #144]	; 0x90
   35ddc:	e1a01006 	mov	r1, r6
   35de0:	e58d3000 	str	r3, [sp]
   35de4:	e1a00005 	mov	r0, r5
   35de8:	e1a03007 	mov	r3, r7
   35dec:	ebfffcd0 	bl	35134 <ControlAPI::apiFileToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)>
   35df0:	e1a04000 	mov	r4, r0
   35df4:	eaffff8b 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   35df8:	e59f16e8 	ldr	r1, [pc, #1768]	; 364e8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8f0>
   35dfc:	e28d0010 	add	r0, sp, #16
   35e00:	ebffd0b6 	bl	2a0e0 <strcasecmp>
   35e04:	e3500000 	cmp	r0, #0
   35e08:	0affffef 	beq	35dcc <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1d4>
   35e0c:	e59f16d8 	ldr	r1, [pc, #1752]	; 364ec <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8f4>
   35e10:	e28d0010 	add	r0, sp, #16
   35e14:	ebffd0b1 	bl	2a0e0 <strcasecmp>
   35e18:	e3500000 	cmp	r0, #0
   35e1c:	1a00000a 	bne	35e4c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x254>
   35e20:	e59d3094 	ldr	r3, [sp, #148]	; 0x94
   35e24:	e1a02008 	mov	r2, r8
   35e28:	e58d3004 	str	r3, [sp, #4]
   35e2c:	e59d3090 	ldr	r3, [sp, #144]	; 0x90
   35e30:	e1a01006 	mov	r1, r6
   35e34:	e58d3000 	str	r3, [sp]
   35e38:	e1a00005 	mov	r0, r5
   35e3c:	e1a03007 	mov	r3, r7
   35e40:	ebfffcc9 	bl	3516c <ControlAPI::apiSetMcJson(char const*, unsigned char const*, unsigned int, char*, unsigned int)>
   35e44:	e1a04000 	mov	r4, r0
   35e48:	eaffff76 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   35e4c:	e59f169c 	ldr	r1, [pc, #1692]	; 364f0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8f8>
   35e50:	e28d0010 	add	r0, sp, #16
   35e54:	ebffd0a1 	bl	2a0e0 <strcasecmp>
   35e58:	e3500000 	cmp	r0, #0
   35e5c:	0affff71 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   35e60:	e59f168c 	ldr	r1, [pc, #1676]	; 364f4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8fc>
   35e64:	e28d0010 	add	r0, sp, #16
   35e68:	ebffd09c 	bl	2a0e0 <strcasecmp>
   35e6c:	e3500000 	cmp	r0, #0
   35e70:	1a00000a 	bne	35ea0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   35e74:	e59d3094 	ldr	r3, [sp, #148]	; 0x94
   35e78:	e1a02008 	mov	r2, r8
   35e7c:	e58d3004 	str	r3, [sp, #4]
   35e80:	e59d3090 	ldr	r3, [sp, #144]	; 0x90
   35e84:	e1a01006 	mov	r1, r6
   35e88:	e58d3000 	str	r3, [sp]
   35e8c:	e1a00005 	mov	r0, r5
   35e90:	e1a03007 	mov	r3, r7
   35e94:	ebfffcce 	bl	351d4 <ControlAPI::apiSendKeyToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)>
   35e98:	e1a04000 	mov	r4, r0
   35e9c:	eaffff61 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   35ea0:	e59f1650 	ldr	r1, [pc, #1616]	; 364f8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x900>
   35ea4:	e28d0010 	add	r0, sp, #16
   35ea8:	ebffd08c 	bl	2a0e0 <strcasecmp>
   35eac:	e3500000 	cmp	r0, #0
   35eb0:	1a00000a 	bne	35ee0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e8>
   35eb4:	e59d3094 	ldr	r3, [sp, #148]	; 0x94
   35eb8:	e1a02008 	mov	r2, r8
   35ebc:	e58d3004 	str	r3, [sp, #4]
   35ec0:	e59d3090 	ldr	r3, [sp, #144]	; 0x90
   35ec4:	e1a01006 	mov	r1, r6
   35ec8:	e58d3000 	str	r3, [sp]
   35ecc:	e1a00005 	mov	r0, r5
   35ed0:	e1a03007 	mov	r3, r7
   35ed4:	ebfffcdd 	bl	35250 <ControlAPI::apiReadFromTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)>
   35ed8:	e1a04000 	mov	r4, r0
   35edc:	eaffff51 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   35ee0:	e59f1614 	ldr	r1, [pc, #1556]	; 364fc <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x904>
   35ee4:	e28d0010 	add	r0, sp, #16
   35ee8:	ebffd07c 	bl	2a0e0 <strcasecmp>
   35eec:	e3500000 	cmp	r0, #0
   35ef0:	1a00000a 	bne	35f20 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x328>
   35ef4:	e59d3094 	ldr	r3, [sp, #148]	; 0x94
   35ef8:	e1a02008 	mov	r2, r8
   35efc:	e58d3004 	str	r3, [sp, #4]
   35f00:	e59d3090 	ldr	r3, [sp, #144]	; 0x90
   35f04:	e1a01006 	mov	r1, r6
   35f08:	e58d3000 	str	r3, [sp]
   35f0c:	e1a00005 	mov	r0, r5
   35f10:	e1a03007 	mov	r3, r7
   35f14:	ebfffd68 	bl	354bc <ControlAPI::apiWriteToTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)>
   35f18:	e1a04000 	mov	r4, r0
   35f1c:	eaffff41 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   35f20:	e59f15d8 	ldr	r1, [pc, #1496]	; 36500 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x908>
   35f24:	e28d0010 	add	r0, sp, #16
   35f28:	ebffd06c 	bl	2a0e0 <strcasecmp>
   35f2c:	e3500000 	cmp	r0, #0
   35f30:	1a00000a 	bne	35f60 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x368>
   35f34:	e59d3094 	ldr	r3, [sp, #148]	; 0x94
   35f38:	e1a02008 	mov	r2, r8
   35f3c:	e58d3004 	str	r3, [sp, #4]
   35f40:	e59d3090 	ldr	r3, [sp, #144]	; 0x90
   35f44:	e1a01006 	mov	r1, r6
   35f48:	e58d3000 	str	r3, [sp]
   35f4c:	e1a00005 	mov	r0, r5
   35f50:	e1a03007 	mov	r3, r7
   35f54:	ebfffdc8 	bl	3567c <ControlAPI::apiWriteReadTarget(char const*, unsigned char const*, unsigned int, char*, unsigned int)>
   35f58:	e1a04000 	mov	r4, r0
   35f5c:	eaffff31 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   35f60:	e59f159c 	ldr	r1, [pc, #1436]	; 36504 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x90c>
   35f64:	e28d0010 	add	r0, sp, #16
   35f68:	ebffd05c 	bl	2a0e0 <strcasecmp>
   35f6c:	e3500000 	cmp	r0, #0
   35f70:	1a00000a 	bne	35fa0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x3a8>
   35f74:	e59d3094 	ldr	r3, [sp, #148]	; 0x94
   35f78:	e1a02008 	mov	r2, r8
   35f7c:	e58d3004 	str	r3, [sp, #4]
   35f80:	e59d3090 	ldr	r3, [sp, #144]	; 0x90
   35f84:	e1a01006 	mov	r1, r6
   35f88:	e58d3000 	str	r3, [sp]
   35f8c:	e1a00005 	mov	r0, r5
   35f90:	e1a03007 	mov	r3, r7
   35f94:	ebfffed9 	bl	35b00 <ControlAPI::apiDebuggerBreak(char const*, unsigned char const*, unsigned int, char*, unsigned int)>
   35f98:	e1a04000 	mov	r4, r0
   35f9c:	eaffff21 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   35fa0:	e59f1560 	ldr	r1, [pc, #1376]	; 36508 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x910>
   35fa4:	e28d0010 	add	r0, sp, #16
   35fa8:	ebffd04c 	bl	2a0e0 <strcasecmp>
   35fac:	e3500000 	cmp	r0, #0
   35fb0:	1a000003 	bne	35fc4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x3cc>
   35fb4:	e5950004 	ldr	r0, [r5, #4]
   35fb8:	e2800014 	add	r0, r0, #20
   35fbc:	ebfff229 	bl	32868 <TargetControl::debuggerContinue()>
   35fc0:	eaffff18 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   35fc4:	e59f1540 	ldr	r1, [pc, #1344]	; 3650c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x914>
   35fc8:	e28d0010 	add	r0, sp, #16
   35fcc:	ebffd043 	bl	2a0e0 <strcasecmp>
   35fd0:	e3500000 	cmp	r0, #0
   35fd4:	1a00000a 	bne	36004 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x40c>
   35fd8:	e59d3094 	ldr	r3, [sp, #148]	; 0x94
   35fdc:	e1a02008 	mov	r2, r8
   35fe0:	e58d3004 	str	r3, [sp, #4]
   35fe4:	e59d3090 	ldr	r3, [sp, #144]	; 0x90
   35fe8:	e1a01006 	mov	r1, r6
   35fec:	e58d3000 	str	r3, [sp]
   35ff0:	e1a00005 	mov	r0, r5
   35ff4:	e1a03007 	mov	r3, r7
   35ff8:	ebfffedf 	bl	35b7c <ControlAPI::apiDebuggerStepIn(char const*, unsigned char const*, unsigned int, char*, unsigned int)>
   35ffc:	e1a04000 	mov	r4, r0
   36000:	eaffff08 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36004:	e59f1504 	ldr	r1, [pc, #1284]	; 36510 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x918>
   36008:	e28d0010 	add	r0, sp, #16
   3600c:	ebffd033 	bl	2a0e0 <strcasecmp>
   36010:	e3500000 	cmp	r0, #0
   36014:	1a00000a 	bne	36044 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x44c>
   36018:	e5951004 	ldr	r1, [r5, #4]
   3601c:	e59f24f0 	ldr	r2, [pc, #1264]	; 36514 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x91c>
   36020:	e2811601 	add	r1, r1, #1048576	; 0x100000
   36024:	e5d134b8 	ldrb	r3, [r1, #1208]	; 0x4b8
   36028:	e5d113ad 	ldrb	r1, [r1, #941]	; 0x3ad
   3602c:	e2533000 	subs	r3, r3, #0
   36030:	e58d1000 	str	r1, [sp]
   36034:	13a03001 	movne	r3, #1
   36038:	e1cd09d0 	ldrd	r0, [sp, #144]	; 0x90
   3603c:	ebffe012 	bl	2e08c <snprintf>
   36040:	eafffef8 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36044:	e59f14cc 	ldr	r1, [pc, #1228]	; 36518 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x920>
   36048:	e28d0010 	add	r0, sp, #16
   3604c:	ebffd023 	bl	2a0e0 <strcasecmp>
   36050:	e3500000 	cmp	r0, #0
   36054:	1a00000a 	bne	36084 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x48c>
   36058:	e59d3094 	ldr	r3, [sp, #148]	; 0x94
   3605c:	e1a02008 	mov	r2, r8
   36060:	e58d3004 	str	r3, [sp, #4]
   36064:	e59d3090 	ldr	r3, [sp, #144]	; 0x90
   36068:	e1a01006 	mov	r1, r6
   3606c:	e58d3000 	str	r3, [sp]
   36070:	e1a00005 	mov	r0, r5
   36074:	e1a03007 	mov	r3, r7
   36078:	ebfffe23 	bl	3590c <ControlAPI::apiDebuggerRegsFormatted(char const*, unsigned char const*, unsigned int, char*, unsigned int)>
   3607c:	e1a04000 	mov	r4, r0
   36080:	eafffee8 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36084:	e59f1490 	ldr	r1, [pc, #1168]	; 3651c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x924>
   36088:	e28d0010 	add	r0, sp, #16
   3608c:	ebffd013 	bl	2a0e0 <strcasecmp>
   36090:	e3500000 	cmp	r0, #0
   36094:	1a00000a 	bne	360c4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x4cc>
   36098:	e59d3094 	ldr	r3, [sp, #148]	; 0x94
   3609c:	e1a02008 	mov	r2, r8
   360a0:	e58d3004 	str	r3, [sp, #4]
   360a4:	e59d3090 	ldr	r3, [sp, #144]	; 0x90
   360a8:	e1a01006 	mov	r1, r6
   360ac:	e58d3000 	str	r3, [sp]
   360b0:	e1a00005 	mov	r0, r5
   360b4:	e1a03007 	mov	r3, r7
   360b8:	ebfffe2d 	bl	35974 <ControlAPI::apiDebuggerRegsJSON(char const*, unsigned char const*, unsigned int, char*, unsigned int)>
   360bc:	e1a04000 	mov	r4, r0
   360c0:	eafffed8 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   360c4:	e59f1454 	ldr	r1, [pc, #1108]	; 36520 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x928>
   360c8:	e28d0010 	add	r0, sp, #16
   360cc:	ebffd003 	bl	2a0e0 <strcasecmp>
   360d0:	e3500000 	cmp	r0, #0
   360d4:	0afffed3 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   360d8:	e59f1444 	ldr	r1, [pc, #1092]	; 36524 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x92c>
   360dc:	e28d0010 	add	r0, sp, #16
   360e0:	ebffcffe 	bl	2a0e0 <strcasecmp>
   360e4:	e3500000 	cmp	r0, #0
   360e8:	0afffece 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   360ec:	e59f1434 	ldr	r1, [pc, #1076]	; 36528 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x930>
   360f0:	e28d0010 	add	r0, sp, #16
   360f4:	ebffcff9 	bl	2a0e0 <strcasecmp>
   360f8:	e3500000 	cmp	r0, #0
   360fc:	0afffec9 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36100:	e59f1424 	ldr	r1, [pc, #1060]	; 3652c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x934>
   36104:	e28d0010 	add	r0, sp, #16
   36108:	ebffcff4 	bl	2a0e0 <strcasecmp>
   3610c:	e3500000 	cmp	r0, #0
   36110:	0afffec4 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36114:	e59f1414 	ldr	r1, [pc, #1044]	; 36530 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x938>
   36118:	e28d0010 	add	r0, sp, #16
   3611c:	ebffcfef 	bl	2a0e0 <strcasecmp>
   36120:	e3500000 	cmp	r0, #0
   36124:	0afffebf 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36128:	e59f1404 	ldr	r1, [pc, #1028]	; 36534 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x93c>
   3612c:	e28d0010 	add	r0, sp, #16
   36130:	ebffcfea 	bl	2a0e0 <strcasecmp>
   36134:	e3500000 	cmp	r0, #0
   36138:	0afffeba 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   3613c:	e59f13f4 	ldr	r1, [pc, #1012]	; 36538 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x940>
   36140:	e28d0010 	add	r0, sp, #16
   36144:	ebffcfe5 	bl	2a0e0 <strcasecmp>
   36148:	e3500000 	cmp	r0, #0
   3614c:	0afffeb5 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36150:	e59f13e4 	ldr	r1, [pc, #996]	; 3653c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x944>
   36154:	e28d0010 	add	r0, sp, #16
   36158:	ebffcfe0 	bl	2a0e0 <strcasecmp>
   3615c:	e3500000 	cmp	r0, #0
   36160:	0afffeb0 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36164:	e59f13d4 	ldr	r1, [pc, #980]	; 36540 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x948>
   36168:	e28d0010 	add	r0, sp, #16
   3616c:	ebffcfdb 	bl	2a0e0 <strcasecmp>
   36170:	e3500000 	cmp	r0, #0
   36174:	0afffeab 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36178:	e59f13c4 	ldr	r1, [pc, #964]	; 36544 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x94c>
   3617c:	e28d0010 	add	r0, sp, #16
   36180:	ebffcfd6 	bl	2a0e0 <strcasecmp>
   36184:	e3500000 	cmp	r0, #0
   36188:	0afffea6 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   3618c:	e59f13b4 	ldr	r1, [pc, #948]	; 36548 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x950>
   36190:	e28d0010 	add	r0, sp, #16
   36194:	ebffcfd1 	bl	2a0e0 <strcasecmp>
   36198:	e3500000 	cmp	r0, #0
   3619c:	0afffea1 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   361a0:	e59f13a4 	ldr	r1, [pc, #932]	; 3654c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x954>
   361a4:	e28d0010 	add	r0, sp, #16
   361a8:	ebffcfcc 	bl	2a0e0 <strcasecmp>
   361ac:	e3500000 	cmp	r0, #0
   361b0:	0afffe9c 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   361b4:	e59f1394 	ldr	r1, [pc, #916]	; 36550 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x958>
   361b8:	e28d0010 	add	r0, sp, #16
   361bc:	ebffcfc7 	bl	2a0e0 <strcasecmp>
   361c0:	e3500000 	cmp	r0, #0
   361c4:	0afffe97 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   361c8:	e59f1384 	ldr	r1, [pc, #900]	; 36554 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x95c>
   361cc:	e28d0010 	add	r0, sp, #16
   361d0:	ebffcfc2 	bl	2a0e0 <strcasecmp>
   361d4:	e3500000 	cmp	r0, #0
   361d8:	0afffe92 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   361dc:	e59f1374 	ldr	r1, [pc, #884]	; 36558 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x960>
   361e0:	e28d0010 	add	r0, sp, #16
   361e4:	ebffcfbd 	bl	2a0e0 <strcasecmp>
   361e8:	e3500000 	cmp	r0, #0
   361ec:	0afffe8d 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   361f0:	e59f1364 	ldr	r1, [pc, #868]	; 3655c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x964>
   361f4:	e28d0010 	add	r0, sp, #16
   361f8:	ebffcfb8 	bl	2a0e0 <strcasecmp>
   361fc:	e3500000 	cmp	r0, #0
   36200:	0afffe88 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36204:	e59f1354 	ldr	r1, [pc, #852]	; 36560 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x968>
   36208:	e28d0010 	add	r0, sp, #16
   3620c:	ebffcfb3 	bl	2a0e0 <strcasecmp>
   36210:	e3500000 	cmp	r0, #0
   36214:	0afffe83 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36218:	e59f1344 	ldr	r1, [pc, #836]	; 36564 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x96c>
   3621c:	e28d0010 	add	r0, sp, #16
   36220:	ebffcfae 	bl	2a0e0 <strcasecmp>
   36224:	e3500000 	cmp	r0, #0
   36228:	0afffe7e 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   3622c:	e59f1334 	ldr	r1, [pc, #820]	; 36568 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x970>
   36230:	e28d0010 	add	r0, sp, #16
   36234:	ebffcfa9 	bl	2a0e0 <strcasecmp>
   36238:	e3500000 	cmp	r0, #0
   3623c:	0afffe79 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36240:	e59f1324 	ldr	r1, [pc, #804]	; 3656c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x974>
   36244:	e28d0010 	add	r0, sp, #16
   36248:	ebffcfa4 	bl	2a0e0 <strcasecmp>
   3624c:	e3500000 	cmp	r0, #0
   36250:	0afffe74 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36254:	e59f1314 	ldr	r1, [pc, #788]	; 36570 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x978>
   36258:	e28d0010 	add	r0, sp, #16
   3625c:	ebffcf9f 	bl	2a0e0 <strcasecmp>
   36260:	e3500000 	cmp	r0, #0
   36264:	0afffe6f 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36268:	e59f1268 	ldr	r1, [pc, #616]	; 364d8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8e0>
   3626c:	e28d0010 	add	r0, sp, #16
   36270:	ebffcf9a 	bl	2a0e0 <strcasecmp>
   36274:	e3500000 	cmp	r0, #0
   36278:	0afffe6a 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   3627c:	e59f12f0 	ldr	r1, [pc, #752]	; 36574 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x97c>
   36280:	e28d0010 	add	r0, sp, #16
   36284:	ebffcf95 	bl	2a0e0 <strcasecmp>
   36288:	e3500000 	cmp	r0, #0
   3628c:	0afffe65 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36290:	e59f12e0 	ldr	r1, [pc, #736]	; 36578 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x980>
   36294:	e28d0010 	add	r0, sp, #16
   36298:	ebffcf90 	bl	2a0e0 <strcasecmp>
   3629c:	e3500000 	cmp	r0, #0
   362a0:	0afffe60 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   362a4:	e59f12d0 	ldr	r1, [pc, #720]	; 3657c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x984>
   362a8:	e28d0010 	add	r0, sp, #16
   362ac:	ebffcf8b 	bl	2a0e0 <strcasecmp>
   362b0:	e3500000 	cmp	r0, #0
   362b4:	0a000070 	beq	3647c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x884>
   362b8:	e59f12c0 	ldr	r1, [pc, #704]	; 36580 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x988>
   362bc:	e28d0010 	add	r0, sp, #16
   362c0:	ebffcf86 	bl	2a0e0 <strcasecmp>
   362c4:	e3500000 	cmp	r0, #0
   362c8:	1a000029 	bne	36374 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x77c>
   362cc:	e1a01006 	mov	r1, r6
   362d0:	e3a03032 	mov	r3, #50	; 0x32
   362d4:	e59f02a8 	ldr	r0, [pc, #680]	; 36584 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x98c>
   362d8:	e28d2044 	add	r2, sp, #68	; 0x44
   362dc:	ebffdfab 	bl	2e190 <jsonGetValueForKey>
   362e0:	e3500000 	cmp	r0, #0
   362e4:	1a000006 	bne	36304 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x70c>
   362e8:	e1a01008 	mov	r1, r8
   362ec:	e3a03032 	mov	r3, #50	; 0x32
   362f0:	e59f028c 	ldr	r0, [pc, #652]	; 36584 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x98c>
   362f4:	e28d2044 	add	r2, sp, #68	; 0x44
   362f8:	ebffdfa4 	bl	2e190 <jsonGetValueForKey>
   362fc:	e2506000 	subs	r6, r0, #0
   36300:	0a000065 	beq	3649c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x8a4>
   36304:	e3a0200a 	mov	r2, #10
   36308:	e3a01000 	mov	r1, #0
   3630c:	e28d0044 	add	r0, sp, #68	; 0x44
   36310:	ebffd073 	bl	2a4e4 <strtoul>
   36314:	e5956008 	ldr	r6, [r5, #8]
   36318:	e1a01000 	mov	r1, r0
   3631c:	e58d000c 	str	r0, [sp, #12]
   36320:	e5960008 	ldr	r0, [r6, #8]
   36324:	e2866a02 	add	r6, r6, #8192	; 0x2000
   36328:	e2800004 	add	r0, r0, #4
   3632c:	ebfff0d1 	bl	32678 <TargetClockGenerator::setFreqHz(unsigned long)>
   36330:	e5960758 	ldr	r0, [r6, #1880]	; 0x758
   36334:	e3500000 	cmp	r0, #0
   36338:	0a000003 	beq	3634c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x754>
   3633c:	e5903000 	ldr	r3, [r0]
   36340:	e59d100c 	ldr	r1, [sp, #12]
   36344:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   36348:	e12fff33 	blx	r3
   3634c:	e5953008 	ldr	r3, [r5, #8]
   36350:	e59f2230 	ldr	r2, [pc, #560]	; 36588 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x990>
   36354:	e5933008 	ldr	r3, [r3, #8]
   36358:	e59d1094 	ldr	r1, [sp, #148]	; 0x94
   3635c:	e5933004 	ldr	r3, [r3, #4]
   36360:	e59d0090 	ldr	r0, [sp, #144]	; 0x90
   36364:	e1a06004 	mov	r6, r4
   36368:	ebffdf47 	bl	2e08c <snprintf>
   3636c:	e1a04006 	mov	r4, r6
   36370:	eafffe2c 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36374:	e59f1210 	ldr	r1, [pc, #528]	; 3658c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x994>
   36378:	e28d0010 	add	r0, sp, #16
   3637c:	ebffcf57 	bl	2a0e0 <strcasecmp>
   36380:	e3500000 	cmp	r0, #0
   36384:	0afffe27 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36388:	e59f1200 	ldr	r1, [pc, #512]	; 36590 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x998>
   3638c:	e28d0010 	add	r0, sp, #16
   36390:	ebffcf52 	bl	2a0e0 <strcasecmp>
   36394:	e3500000 	cmp	r0, #0
   36398:	0afffe22 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   3639c:	e59f11f0 	ldr	r1, [pc, #496]	; 36594 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x99c>
   363a0:	e28d0010 	add	r0, sp, #16
   363a4:	ebffcf4d 	bl	2a0e0 <strcasecmp>
   363a8:	e3500000 	cmp	r0, #0
   363ac:	0afffe1d 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   363b0:	e59f11e0 	ldr	r1, [pc, #480]	; 36598 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9a0>
   363b4:	e28d0010 	add	r0, sp, #16
   363b8:	ebffcf48 	bl	2a0e0 <strcasecmp>
   363bc:	e3500000 	cmp	r0, #0
   363c0:	0afffe18 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   363c4:	e59f11d0 	ldr	r1, [pc, #464]	; 3659c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9a4>
   363c8:	e28d0010 	add	r0, sp, #16
   363cc:	ebffcf43 	bl	2a0e0 <strcasecmp>
   363d0:	e3500000 	cmp	r0, #0
   363d4:	0afffe13 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   363d8:	e59f11c0 	ldr	r1, [pc, #448]	; 365a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9a8>
   363dc:	e28d0010 	add	r0, sp, #16
   363e0:	ebffcf3e 	bl	2a0e0 <strcasecmp>
   363e4:	e3500000 	cmp	r0, #0
   363e8:	0afffe0e 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   363ec:	e59f11b0 	ldr	r1, [pc, #432]	; 365a4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9ac>
   363f0:	e28d0010 	add	r0, sp, #16
   363f4:	ebffcf39 	bl	2a0e0 <strcasecmp>
   363f8:	e3500000 	cmp	r0, #0
   363fc:	0afffe09 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36400:	e59f11a0 	ldr	r1, [pc, #416]	; 365a8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9b0>
   36404:	e28d0010 	add	r0, sp, #16
   36408:	ebffcf34 	bl	2a0e0 <strcasecmp>
   3640c:	e3500000 	cmp	r0, #0
   36410:	0afffe04 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36414:	e59f1190 	ldr	r1, [pc, #400]	; 365ac <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9b4>
   36418:	e28d0010 	add	r0, sp, #16
   3641c:	ebffcf2f 	bl	2a0e0 <strcasecmp>
   36420:	e3500000 	cmp	r0, #0
   36424:	0afffdff 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36428:	e59f1180 	ldr	r1, [pc, #384]	; 365b0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9b8>
   3642c:	e28d0010 	add	r0, sp, #16
   36430:	ebffcf2a 	bl	2a0e0 <strcasecmp>
   36434:	e3500000 	cmp	r0, #0
   36438:	0afffdfa 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   3643c:	e59f1170 	ldr	r1, [pc, #368]	; 365b4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9bc>
   36440:	e28d0010 	add	r0, sp, #16
   36444:	ebffcf25 	bl	2a0e0 <strcasecmp>
   36448:	e3500000 	cmp	r0, #0
   3644c:	0afffdf5 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36450:	e59f1160 	ldr	r1, [pc, #352]	; 365b8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9c0>
   36454:	e28d0010 	add	r0, sp, #16
   36458:	ebffcf20 	bl	2a0e0 <strcasecmp>
   3645c:	e3500000 	cmp	r0, #0
   36460:	0afffdf0 	beq	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   36464:	e59d2094 	ldr	r2, [sp, #148]	; 0x94
   36468:	e59f114c 	ldr	r1, [pc, #332]	; 365bc <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9c4>
   3646c:	e59d0090 	ldr	r0, [sp, #144]	; 0x90
   36470:	ebffde99 	bl	2dedc <strlcpy>
   36474:	e3a04000 	mov	r4, #0
   36478:	eafffdea 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   3647c:	e5953008 	ldr	r3, [r5, #8]
   36480:	e59f2100 	ldr	r2, [pc, #256]	; 36588 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x990>
   36484:	e5933008 	ldr	r3, [r3, #8]
   36488:	e59d1094 	ldr	r1, [sp, #148]	; 0x94
   3648c:	e5933004 	ldr	r3, [r3, #4]
   36490:	e59d0090 	ldr	r0, [sp, #144]	; 0x90
   36494:	ebffdefc 	bl	2e08c <snprintf>
   36498:	eafffde2 	b	35c28 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   3649c:	e3a01002 	mov	r1, #2
   364a0:	e59f2118 	ldr	r2, [pc, #280]	; 365c0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9c8>
   364a4:	e59f0118 	ldr	r0, [pc, #280]	; 365c4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9cc>
   364a8:	ebffe256 	bl	2ee08 <LogWrite>
   364ac:	eaffffae 	b	3636c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x774>
   364b0:	000409fc 	.word	0x000409fc
   364b4:	00048098 	.word	0x00048098
   364b8:	00048740 	.word	0x00048740
   364bc:	0004874c 	.word	0x0004874c
   364c0:	00048758 	.word	0x00048758
   364c4:	00048760 	.word	0x00048760
   364c8:	0004876c 	.word	0x0004876c
   364cc:	0004877c 	.word	0x0004877c
   364d0:	00048790 	.word	0x00048790
   364d4:	000487a0 	.word	0x000487a0
   364d8:	000487b0 	.word	0x000487b0
   364dc:	000487bc 	.word	0x000487bc
   364e0:	000487c8 	.word	0x000487c8
   364e4:	000487d4 	.word	0x000487d4
   364e8:	000487e0 	.word	0x000487e0
   364ec:	000487ec 	.word	0x000487ec
   364f0:	000487f8 	.word	0x000487f8
   364f4:	00048800 	.word	0x00048800
   364f8:	00048808 	.word	0x00048808
   364fc:	0004880c 	.word	0x0004880c
   36500:	00048810 	.word	0x00048810
   36504:	0004881c 	.word	0x0004881c
   36508:	00048828 	.word	0x00048828
   3650c:	00048838 	.word	0x00048838
   36510:	00048844 	.word	0x00048844
   36514:	000486b0 	.word	0x000486b0
   36518:	00048850 	.word	0x00048850
   3651c:	00048864 	.word	0x00048864
   36520:	00048874 	.word	0x00048874
   36524:	00048884 	.word	0x00048884
   36528:	00048898 	.word	0x00048898
   3652c:	000488a8 	.word	0x000488a8
   36530:	000488bc 	.word	0x000488bc
   36534:	000488d0 	.word	0x000488d0
   36538:	000488e4 	.word	0x000488e4
   3653c:	000488f0 	.word	0x000488f0
   36540:	00048900 	.word	0x00048900
   36544:	00048914 	.word	0x00048914
   36548:	00048924 	.word	0x00048924
   3654c:	00048934 	.word	0x00048934
   36550:	00048944 	.word	0x00048944
   36554:	00048954 	.word	0x00048954
   36558:	00048964 	.word	0x00048964
   3655c:	00048974 	.word	0x00048974
   36560:	00048984 	.word	0x00048984
   36564:	00048998 	.word	0x00048998
   36568:	000489a8 	.word	0x000489a8
   3656c:	000489b4 	.word	0x000489b4
   36570:	000489c4 	.word	0x000489c4
   36574:	000489cc 	.word	0x000489cc
   36578:	000489dc 	.word	0x000489dc
   3657c:	000489ec 	.word	0x000489ec
   36580:	00048a14 	.word	0x00048a14
   36584:	00048a20 	.word	0x00048a20
   36588:	000489f8 	.word	0x000489f8
   3658c:	00048a4c 	.word	0x00048a4c
   36590:	00048a58 	.word	0x00048a58
   36594:	00048a64 	.word	0x00048a64
   36598:	00048a70 	.word	0x00048a70
   3659c:	00048a80 	.word	0x00048a80
   365a0:	00048a90 	.word	0x00048a90
   365a4:	00048a9c 	.word	0x00048a9c
   365a8:	00048aa8 	.word	0x00048aa8
   365ac:	00048ab8 	.word	0x00048ab8
   365b0:	00048acc 	.word	0x00048acc
   365b4:	00048ad8 	.word	0x00048ad8
   365b8:	00048ae0 	.word	0x00048ae0
   365bc:	00048aec 	.word	0x00048aec
   365c0:	00048a28 	.word	0x00048a28
   365c4:	00048b48 	.word	0x00048b48

000365c8 <ControlAPI::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   365c8:	e3500000 	cmp	r0, #0
   365cc:	012fff1e 	bxeq	lr
   365d0:	eafffd88 	b	35bf8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

000365d4 <McManager::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   365d4:	e3a00000 	mov	r0, #0
   365d8:	e12fff1e 	bx	lr

000365dc <McManager::handleWaitInterruptStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   365dc:	e3500000 	cmp	r0, #0
   365e0:	012fff1e 	bxeq	lr
   365e4:	e2800a02 	add	r0, r0, #8192	; 0x2000
   365e8:	e5900758 	ldr	r0, [r0, #1880]	; 0x758
   365ec:	e3500000 	cmp	r0, #0
   365f0:	012fff1e 	bxeq	lr
   365f4:	e590c000 	ldr	ip, [r0]
   365f8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   365fc:	e59ce03c 	ldr	lr, [ip, #60]	; 0x3c
   36600:	e1a0c00e 	mov	ip, lr
   36604:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   36608:	e12fff1c 	bx	ip

0003660c <McManager::machineHeartbeat() [clone .part.0]>:
   3660c:	e2800a02 	add	r0, r0, #8192	; 0x2000
   36610:	e5900758 	ldr	r0, [r0, #1880]	; 0x758
   36614:	e3500000 	cmp	r0, #0
   36618:	012fff1e 	bxeq	lr
   3661c:	e5903000 	ldr	r3, [r0]
   36620:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   36624:	e12fff13 	bx	r3

00036628 <McManager::busActionActive(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE) [clone .part.0]>:
   36628:	e16f1f11 	clz	r1, r1
   3662c:	e92d4010 	push	{r4, lr}
   36630:	e2804a02 	add	r4, r0, #8192	; 0x2000
   36634:	e5940758 	ldr	r0, [r4, #1880]	; 0x758
   36638:	e1a012a1 	lsr	r1, r1, #5
   3663c:	e3500000 	cmp	r0, #0
   36640:	03a01000 	moveq	r1, #0
   36644:	e3510000 	cmp	r1, #0
   36648:	0a000002 	beq	36658 <McManager::busActionActive(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE) [clone .part.0]+0x30>
   3664c:	e5903000 	ldr	r3, [r0]
   36650:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   36654:	e12fff33 	blx	r3
   36658:	e3a03000 	mov	r3, #0
   3665c:	e5c4375c 	strb	r3, [r4, #1884]	; 0x75c
   36660:	e8bd8010 	pop	{r4, pc}

00036664 <McManager::busActionActiveStatic(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE)>:
   36664:	e2411004 	sub	r1, r1, #4
   36668:	e16f1f11 	clz	r1, r1
   3666c:	e3500000 	cmp	r0, #0
   36670:	e1a012a1 	lsr	r1, r1, #5
   36674:	11a02001 	movne	r2, r1
   36678:	03a02000 	moveq	r2, #0
   3667c:	e3520000 	cmp	r2, #0
   36680:	012fff1e 	bxeq	lr
   36684:	e2802a02 	add	r2, r0, #8192	; 0x2000
   36688:	e5d2275c 	ldrb	r2, [r2, #1884]	; 0x75c
   3668c:	e3520000 	cmp	r2, #0
   36690:	012fff1e 	bxeq	lr
   36694:	e1a01003 	mov	r1, r3
   36698:	eaffffe2 	b	36628 <McManager::busActionActive(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE) [clone .part.0]>

0003669c <McManager::McManager(DisplayBase*, CommandHandler&, BusControl&)>:
   3669c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   366a0:	e3a0c000 	mov	ip, #0
   366a4:	e3e04000 	mvn	r4, #0
   366a8:	e3a07ffa 	mov	r7, #1000	; 0x3e8
   366ac:	e3a06064 	mov	r6, #100	; 0x64
   366b0:	e3a05f7d 	mov	r5, #500	; 0x1f4
   366b4:	e880000e 	stm	r0, {r1, r2, r3}
   366b8:	e59f3048 	ldr	r3, [pc, #72]	; 36708 <McManager::McManager(DisplayBase*, CommandHandler&, BusControl&)+0x6c>
   366bc:	e1a0e000 	mov	lr, r0
   366c0:	e5830000 	str	r0, [r3]
   366c4:	e2803a02 	add	r3, r0, #8192	; 0x2000
   366c8:	e5837760 	str	r7, [r3, #1888]	; 0x760
   366cc:	e5836774 	str	r6, [r3, #1908]	; 0x774
   366d0:	e5835780 	str	r5, [r3, #1920]	; 0x780
   366d4:	e580400c 	str	r4, [r0, #12]
   366d8:	e5804010 	str	r4, [r0, #16]
   366dc:	e583c754 	str	ip, [r3, #1876]	; 0x754
   366e0:	e583c758 	str	ip, [r3, #1880]	; 0x758
   366e4:	e583c728 	str	ip, [r3, #1832]	; 0x728
   366e8:	e583c764 	str	ip, [r3, #1892]	; 0x764
   366ec:	e583c76c 	str	ip, [r3, #1900]	; 0x76c
   366f0:	e583c770 	str	ip, [r3, #1904]	; 0x770
   366f4:	e583c768 	str	ip, [r3, #1896]	; 0x768
   366f8:	e5c3c778 	strb	ip, [r3, #1912]	; 0x778
   366fc:	e583c784 	str	ip, [r3, #1924]	; 0x784
   36700:	e583c77c 	str	ip, [r3, #1916]	; 0x77c
   36704:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   36708:	0005f67c 	.word	0x0005f67c

0003670c <McManager::init()>:
   3670c:	e92d4010 	push	{r4, lr}
   36710:	e590300c 	ldr	r3, [r0, #12]
   36714:	e1a04000 	mov	r4, r0
   36718:	e3530000 	cmp	r3, #0
   3671c:	e24dd030 	sub	sp, sp, #48	; 0x30
   36720:	ba00001a 	blt	36790 <McManager::init()+0x84>
   36724:	e5943010 	ldr	r3, [r4, #16]
   36728:	e3530000 	cmp	r3, #0
   3672c:	ba00002f 	blt	367f0 <McManager::init()+0xe4>
   36730:	e59f00e0 	ldr	r0, [pc, #224]	; 36818 <McManager::init()+0x10c>
   36734:	ebffd223 	bl	2afc8 <operator new(unsigned int)>
   36738:	e1a01004 	mov	r1, r4
   3673c:	e5942008 	ldr	r2, [r4, #8]
   36740:	eb000798 	bl	385a8 <McTerminal::McTerminal(McManager&, BusControl&)>
   36744:	e59f00d0 	ldr	r0, [pc, #208]	; 3681c <McManager::init()+0x110>
   36748:	ebffd21e 	bl	2afc8 <operator new(unsigned int)>
   3674c:	e1a01004 	mov	r1, r4
   36750:	e5942008 	ldr	r2, [r4, #8]
   36754:	eb0003c9 	bl	37680 <McTRS80::McTRS80(McManager&, BusControl&)>
   36758:	e59f00c0 	ldr	r0, [pc, #192]	; 36820 <McManager::init()+0x114>
   3675c:	ebffd219 	bl	2afc8 <operator new(unsigned int)>
   36760:	e1a01004 	mov	r1, r4
   36764:	e5942008 	ldr	r2, [r4, #8]
   36768:	eb000942 	bl	38c78 <McZXSpectrum::McZXSpectrum(McManager&, BusControl&)>
   3676c:	e3a03000 	mov	r3, #0
   36770:	e3a02001 	mov	r2, #1
   36774:	e2844a02 	add	r4, r4, #8192	; 0x2000
   36778:	e5c42778 	strb	r2, [r4, #1912]	; 0x778
   3677c:	e5843764 	str	r3, [r4, #1892]	; 0x764
   36780:	e584376c 	str	r3, [r4, #1900]	; 0x76c
   36784:	e584377c 	str	r3, [r4, #1916]	; 0x77c
   36788:	e28dd030 	add	sp, sp, #48	; 0x30
   3678c:	e8bd8010 	pop	{r4, pc}
   36790:	e3a03000 	mov	r3, #0
   36794:	e5902008 	ldr	r2, [r0, #8]
   36798:	e59f0084 	ldr	r0, [pc, #132]	; 36824 <McManager::init()+0x118>
   3679c:	e58d3028 	str	r3, [sp, #40]	; 0x28
   367a0:	e58d3024 	str	r3, [sp, #36]	; 0x24
   367a4:	e58d3020 	str	r3, [sp, #32]
   367a8:	e58d301c 	str	r3, [sp, #28]
   367ac:	e58d3018 	str	r3, [sp, #24]
   367b0:	e58d3014 	str	r3, [sp, #20]
   367b4:	e58d3010 	str	r3, [sp, #16]
   367b8:	e58d300c 	str	r3, [sp, #12]
   367bc:	e58d3008 	str	r3, [sp, #8]
   367c0:	e58d3004 	str	r3, [sp, #4]
   367c4:	e58d3000 	str	r3, [sp]
   367c8:	e0820000 	add	r0, r2, r0
   367cc:	e59f3054 	ldr	r3, [pc, #84]	; 36828 <McManager::init()+0x11c>
   367d0:	e3a01001 	mov	r1, #1
   367d4:	e59f2050 	ldr	r2, [pc, #80]	; 3682c <McManager::init()+0x120>
   367d8:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   367dc:	ebffebb0 	bl	316a4 <BusSocketManager::add(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>
   367e0:	e5943010 	ldr	r3, [r4, #16]
   367e4:	e584000c 	str	r0, [r4, #12]
   367e8:	e3530000 	cmp	r3, #0
   367ec:	aaffffcf 	bge	36730 <McManager::init()+0x24>
   367f0:	e3a02000 	mov	r2, #0
   367f4:	e59f3034 	ldr	r3, [pc, #52]	; 36830 <McManager::init()+0x124>
   367f8:	e1a01004 	mov	r1, r4
   367fc:	e1cd20f0 	strd	r2, [sp]
   36800:	e3a02001 	mov	r2, #1
   36804:	e59f3028 	ldr	r3, [pc, #40]	; 36834 <McManager::init()+0x128>
   36808:	e5940004 	ldr	r0, [r4, #4]
   3680c:	ebffe4c3 	bl	2fb20 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   36810:	e5840010 	str	r0, [r4, #16]
   36814:	eaffffc5 	b	36730 <McManager::init()+0x24>
   36818:	00062f20 	.word	0x00062f20
   3681c:	000005e8 	.word	0x000005e8
   36820:	000037a4 	.word	0x000037a4
   36824:	00100504 	.word	0x00100504
   36828:	00036664 	.word	0x00036664
   3682c:	000365dc 	.word	0x000365dc
   36830:	000370d0 	.word	0x000370d0
   36834:	000365d4 	.word	0x000365d4

00036838 <McManager::getNumMachines()>:
   36838:	e2800a02 	add	r0, r0, #8192	; 0x2000
   3683c:	e5900754 	ldr	r0, [r0, #1876]	; 0x754
   36840:	e12fff1e 	bx	lr

00036844 <McManager::getMachine()>:
   36844:	e2800a02 	add	r0, r0, #8192	; 0x2000
   36848:	e5900758 	ldr	r0, [r0, #1880]	; 0x758
   3684c:	e12fff1e 	bx	lr

00036850 <McManager::getMachineName()>:
   36850:	e2800a02 	add	r0, r0, #8192	; 0x2000
   36854:	e5900758 	ldr	r0, [r0, #1880]	; 0x758
   36858:	e3500000 	cmp	r0, #0
   3685c:	0a000002 	beq	3686c <McManager::getMachineName()+0x1c>
   36860:	e5903000 	ldr	r3, [r0]
   36864:	e5933008 	ldr	r3, [r3, #8]
   36868:	e12fff13 	bx	r3
   3686c:	e59f0000 	ldr	r0, [pc]	; 36874 <McManager::getMachineName()+0x24>
   36870:	e12fff1e 	bx	lr
   36874:	000472e0 	.word	0x000472e0

00036878 <McManager::getMachineJSON()>:
   36878:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3687c:	e3a02e46 	mov	r2, #1120	; 0x460
   36880:	e2807a02 	add	r7, r0, #8192	; 0x2000
   36884:	e1a09000 	mov	r9, r0
   36888:	e59f113c 	ldr	r1, [pc, #316]	; 369cc <McManager::getMachineJSON()+0x154>
   3688c:	e59f013c 	ldr	r0, [pc, #316]	; 369d0 <McManager::getMachineJSON()+0x158>
   36890:	e24ddf4e 	sub	sp, sp, #312	; 0x138
   36894:	ebffdd90 	bl	2dedc <strlcpy>
   36898:	e5973754 	ldr	r3, [r7, #1876]	; 0x754
   3689c:	e3530000 	cmp	r3, #0
   368a0:	da000047 	ble	369c4 <McManager::getMachineJSON()+0x14c>
   368a4:	e597072c 	ldr	r0, [r7, #1836]	; 0x72c
   368a8:	e59fa120 	ldr	sl, [pc, #288]	; 369d0 <McManager::getMachineJSON()+0x158>
   368ac:	e5903000 	ldr	r3, [r0]
   368b0:	e3a02f4b 	mov	r2, #300	; 0x12c
   368b4:	e593300c 	ldr	r3, [r3, #12]
   368b8:	e28d100c 	add	r1, sp, #12
   368bc:	e2895c27 	add	r5, r9, #9984	; 0x2700
   368c0:	e12fff33 	blx	r3
   368c4:	e1a0600a 	mov	r6, sl
   368c8:	e3a04000 	mov	r4, #0
   368cc:	e59f8100 	ldr	r8, [pc, #256]	; 369d4 <McManager::getMachineJSON()+0x15c>
   368d0:	e285502c 	add	r5, r5, #44	; 0x2c
   368d4:	ea000009 	b	36900 <McManager::getMachineJSON()+0x88>
   368d8:	e5b50004 	ldr	r0, [r5, #4]!
   368dc:	e3a02f4b 	mov	r2, #300	; 0x12c
   368e0:	e5903000 	ldr	r3, [r0]
   368e4:	e28d100c 	add	r1, sp, #12
   368e8:	e593300c 	ldr	r3, [r3, #12]
   368ec:	e12fff33 	blx	r3
   368f0:	e3a02e46 	mov	r2, #1120	; 0x460
   368f4:	e1a01008 	mov	r1, r8
   368f8:	e1a00006 	mov	r0, r6
   368fc:	ebffdd92 	bl	2df4c <strlcat>
   36900:	e3a02e46 	mov	r2, #1120	; 0x460
   36904:	e1a00006 	mov	r0, r6
   36908:	e28d100c 	add	r1, sp, #12
   3690c:	ebffdd8e 	bl	2df4c <strlcat>
   36910:	e5973754 	ldr	r3, [r7, #1876]	; 0x754
   36914:	e2844001 	add	r4, r4, #1
   36918:	e1530004 	cmp	r3, r4
   3691c:	caffffed 	bgt	368d8 <McManager::getMachineJSON()+0x60>
   36920:	e3a02e46 	mov	r2, #1120	; 0x460
   36924:	e59f10ac 	ldr	r1, [pc, #172]	; 369d8 <McManager::getMachineJSON()+0x160>
   36928:	e59f00a0 	ldr	r0, [pc, #160]	; 369d0 <McManager::getMachineJSON()+0x158>
   3692c:	ebffdd86 	bl	2df4c <strlcat>
   36930:	e3a02e46 	mov	r2, #1120	; 0x460
   36934:	e59f10a0 	ldr	r1, [pc, #160]	; 369dc <McManager::getMachineJSON()+0x164>
   36938:	e59f0090 	ldr	r0, [pc, #144]	; 369d0 <McManager::getMachineJSON()+0x158>
   3693c:	ebffdd82 	bl	2df4c <strlcat>
   36940:	e3a02e46 	mov	r2, #1120	; 0x460
   36944:	e59f1094 	ldr	r1, [pc, #148]	; 369e0 <McManager::getMachineJSON()+0x168>
   36948:	e59f0080 	ldr	r0, [pc, #128]	; 369d0 <McManager::getMachineJSON()+0x158>
   3694c:	ebffdd7e 	bl	2df4c <strlcat>
   36950:	e5970758 	ldr	r0, [r7, #1880]	; 0x758
   36954:	e3500000 	cmp	r0, #0
   36958:	0a000017 	beq	369bc <McManager::getMachineJSON()+0x144>
   3695c:	e5903000 	ldr	r3, [r0]
   36960:	e5933008 	ldr	r3, [r3, #8]
   36964:	e12fff33 	blx	r3
   36968:	e1a01000 	mov	r1, r0
   3696c:	e3a02e46 	mov	r2, #1120	; 0x460
   36970:	e59f0058 	ldr	r0, [pc, #88]	; 369d0 <McManager::getMachineJSON()+0x158>
   36974:	ebffdd74 	bl	2df4c <strlcat>
   36978:	e3a02e46 	mov	r2, #1120	; 0x460
   3697c:	e59f105c 	ldr	r1, [pc, #92]	; 369e0 <McManager::getMachineJSON()+0x168>
   36980:	e59f0048 	ldr	r0, [pc, #72]	; 369d0 <McManager::getMachineJSON()+0x158>
   36984:	ebffdd70 	bl	2df4c <strlcat>
   36988:	e5993008 	ldr	r3, [r9, #8]
   3698c:	e59f003c 	ldr	r0, [pc, #60]	; 369d0 <McManager::getMachineJSON()+0x158>
   36990:	e5933004 	ldr	r3, [r3, #4]
   36994:	e58d3004 	str	r3, [sp, #4]
   36998:	ebffcda9 	bl	2a044 <strlen>
   3699c:	e3a01e46 	mov	r1, #1120	; 0x460
   369a0:	e59d3004 	ldr	r3, [sp, #4]
   369a4:	e59f2038 	ldr	r2, [pc, #56]	; 369e4 <McManager::getMachineJSON()+0x16c>
   369a8:	e08a0000 	add	r0, sl, r0
   369ac:	ebffddb6 	bl	2e08c <snprintf>
   369b0:	e59f0018 	ldr	r0, [pc, #24]	; 369d0 <McManager::getMachineJSON()+0x158>
   369b4:	e28ddf4e 	add	sp, sp, #312	; 0x138
   369b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   369bc:	e59f1024 	ldr	r1, [pc, #36]	; 369e8 <McManager::getMachineJSON()+0x170>
   369c0:	eaffffe9 	b	3696c <McManager::getMachineJSON()+0xf4>
   369c4:	e59fa004 	ldr	sl, [pc, #4]	; 369d0 <McManager::getMachineJSON()+0x158>
   369c8:	eaffffd4 	b	36920 <McManager::getMachineJSON()+0xa8>
   369cc:	00048b54 	.word	0x00048b54
   369d0:	0005f680 	.word	0x0005f680
   369d4:	0004358c 	.word	0x0004358c
   369d8:	00048b64 	.word	0x00048b64
   369dc:	00048b68 	.word	0x00048b68
   369e0:	000485cc 	.word	0x000485cc
   369e4:	00048b78 	.word	0x00048b78
   369e8:	000472e0 	.word	0x000472e0

000369ec <McManager::add(McBase*)>:
   369ec:	e2802a02 	add	r2, r0, #8192	; 0x2000
   369f0:	e5923754 	ldr	r3, [r2, #1876]	; 0x754
   369f4:	e3530009 	cmp	r3, #9
   369f8:	c12fff1e 	bxgt	lr
   369fc:	e283cd27 	add	ip, r3, #2496	; 0x9c0
   36a00:	e28cc00a 	add	ip, ip, #10
   36a04:	e080010c 	add	r0, r0, ip, lsl #2
   36a08:	e2833001 	add	r3, r3, #1
   36a0c:	e5823754 	str	r3, [r2, #1876]	; 0x754
   36a10:	e5801004 	str	r1, [r0, #4]
   36a14:	e12fff1e 	bx	lr

00036a18 <McManager::setupMachine(char const*)>:
   36a18:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36a1c:	e24ddf66 	sub	sp, sp, #408	; 0x198
   36a20:	e1a07000 	mov	r7, r0
   36a24:	e3a03064 	mov	r3, #100	; 0x64
   36a28:	e59f0234 	ldr	r0, [pc, #564]	; 36c64 <McManager::setupMachine(char const*)+0x24c>
   36a2c:	e28d2008 	add	r2, sp, #8
   36a30:	e1a08001 	mov	r8, r1
   36a34:	ebffddd5 	bl	2e190 <jsonGetValueForKey>
   36a38:	e3500000 	cmp	r0, #0
   36a3c:	e2879a02 	add	r9, r7, #8192	; 0x2000
   36a40:	1a00005e 	bne	36bc0 <McManager::setupMachine(char const*)+0x1a8>
   36a44:	e5993754 	ldr	r3, [r9, #1876]	; 0x754
   36a48:	e3530000 	cmp	r3, #0
   36a4c:	da00001d 	ble	36ac8 <McManager::setupMachine(char const*)+0xb0>
   36a50:	e599072c 	ldr	r0, [r9, #1836]	; 0x72c
   36a54:	e5903000 	ldr	r3, [r0]
   36a58:	e5933008 	ldr	r3, [r3, #8]
   36a5c:	e12fff33 	blx	r3
   36a60:	e3a02064 	mov	r2, #100	; 0x64
   36a64:	e1a01000 	mov	r1, r0
   36a68:	e28d0008 	add	r0, sp, #8
   36a6c:	ebffdd1a 	bl	2dedc <strlcpy>
   36a70:	e5993754 	ldr	r3, [r9, #1876]	; 0x754
   36a74:	e3530000 	cmp	r3, #0
   36a78:	da000012 	ble	36ac8 <McManager::setupMachine(char const*)+0xb0>
   36a7c:	e3a04000 	mov	r4, #0
   36a80:	e1a0a004 	mov	sl, r4
   36a84:	e2876c27 	add	r6, r7, #9984	; 0x2700
   36a88:	e2866028 	add	r6, r6, #40	; 0x28
   36a8c:	e5b60004 	ldr	r0, [r6, #4]!
   36a90:	e3500000 	cmp	r0, #0
   36a94:	0a000007 	beq	36ab8 <McManager::setupMachine(char const*)+0xa0>
   36a98:	e5903000 	ldr	r3, [r0]
   36a9c:	e28d20d0 	add	r2, sp, #208	; 0xd0
   36aa0:	e5933000 	ldr	r3, [r3]
   36aa4:	e58da0d0 	str	sl, [sp, #208]	; 0xd0
   36aa8:	e28d1008 	add	r1, sp, #8
   36aac:	e12fff33 	blx	r3
   36ab0:	e2505000 	subs	r5, r0, #0
   36ab4:	1a000007 	bne	36ad8 <McManager::setupMachine(char const*)+0xc0>
   36ab8:	e5993754 	ldr	r3, [r9, #1876]	; 0x754
   36abc:	e2844001 	add	r4, r4, #1
   36ac0:	e1530004 	cmp	r3, r4
   36ac4:	cafffff0 	bgt	36a8c <McManager::setupMachine(char const*)+0x74>
   36ac8:	e3a05000 	mov	r5, #0
   36acc:	e1a00005 	mov	r0, r5
   36ad0:	e28ddf66 	add	sp, sp, #408	; 0x198
   36ad4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36ad8:	e2844d27 	add	r4, r4, #2496	; 0x9c0
   36adc:	e284400a 	add	r4, r4, #10
   36ae0:	e0874104 	add	r4, r7, r4, lsl #2
   36ae4:	e5944004 	ldr	r4, [r4, #4]
   36ae8:	e3540000 	cmp	r4, #0
   36aec:	0afffff5 	beq	36ac8 <McManager::setupMachine(char const*)+0xb0>
   36af0:	e5970008 	ldr	r0, [r7, #8]
   36af4:	e5894758 	str	r4, [r9, #1880]	; 0x758
   36af8:	ebffe993 	bl	3114c <BusControl::machineChangeInit()>
   36afc:	e5943000 	ldr	r3, [r4]
   36b00:	e1a02008 	mov	r2, r8
   36b04:	e5933010 	ldr	r3, [r3, #16]
   36b08:	e28d1008 	add	r1, sp, #8
   36b0c:	e1a00004 	mov	r0, r4
   36b10:	e12fff33 	blx	r3
   36b14:	e5943000 	ldr	r3, [r4]
   36b18:	e1a00004 	mov	r0, r4
   36b1c:	e5971000 	ldr	r1, [r7]
   36b20:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   36b24:	e12fff33 	blx	r3
   36b28:	e5943000 	ldr	r3, [r4]
   36b2c:	e59f0134 	ldr	r0, [pc, #308]	; 36c68 <McManager::setupMachine(char const*)+0x250>
   36b30:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
   36b34:	e5971008 	ldr	r1, [r7, #8]
   36b38:	e59f612c 	ldr	r6, [pc, #300]	; 36c6c <McManager::setupMachine(char const*)+0x254>
   36b3c:	e1520000 	cmp	r2, r0
   36b40:	e0816006 	add	r6, r1, r6
   36b44:	e597100c 	ldr	r1, [r7, #12]
   36b48:	1a000032 	bne	36c18 <McManager::setupMachine(char const*)+0x200>
   36b4c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   36b50:	e59f0118 	ldr	r0, [pc, #280]	; 36c70 <McManager::setupMachine(char const*)+0x258>
   36b54:	e5d420a9 	ldrb	r2, [r4, #169]	; 0xa9
   36b58:	e1530000 	cmp	r3, r0
   36b5c:	1a000037 	bne	36c40 <McManager::setupMachine(char const*)+0x228>
   36b60:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
   36b64:	e1a00006 	mov	r0, r6
   36b68:	ebffeb13 	bl	317bc <BusSocketManager::setup(unsigned long, bool, bool)>
   36b6c:	e5943000 	ldr	r3, [r4]
   36b70:	e59f20fc 	ldr	r2, [pc, #252]	; 36c74 <McManager::setupMachine(char const*)+0x25c>
   36b74:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
   36b78:	e5976008 	ldr	r6, [r7, #8]
   36b7c:	e1530002 	cmp	r3, r2
   36b80:	1a000034 	bne	36c58 <McManager::setupMachine(char const*)+0x240>
   36b84:	e59400ac 	ldr	r0, [r4, #172]	; 0xac
   36b88:	e2866601 	add	r6, r6, #1048576	; 0x100000
   36b8c:	e5860388 	str	r0, [r6, #904]	; 0x388
   36b90:	e1a01008 	mov	r1, r8
   36b94:	e3a03064 	mov	r3, #100	; 0x64
   36b98:	e59f00d8 	ldr	r0, [pc, #216]	; 36c78 <McManager::setupMachine(char const*)+0x260>
   36b9c:	e28d206c 	add	r2, sp, #108	; 0x6c
   36ba0:	ebffdd7a 	bl	2e190 <jsonGetValueForKey>
   36ba4:	e3500000 	cmp	r0, #0
   36ba8:	1a000009 	bne	36bd4 <McManager::setupMachine(char const*)+0x1bc>
   36bac:	e5970008 	ldr	r0, [r7, #8]
   36bb0:	ebffe970 	bl	31178 <BusControl::machineChangeComplete()>
   36bb4:	e1a00005 	mov	r0, r5
   36bb8:	e28ddf66 	add	sp, sp, #408	; 0x198
   36bbc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36bc0:	e28d0008 	add	r0, sp, #8
   36bc4:	ebffcd1e 	bl	2a044 <strlen>
   36bc8:	e3500000 	cmp	r0, #0
   36bcc:	0affff9c 	beq	36a44 <McManager::setupMachine(char const*)+0x2c>
   36bd0:	eaffffa6 	b	36a70 <McManager::setupMachine(char const*)+0x58>
   36bd4:	e3a020c8 	mov	r2, #200	; 0xc8
   36bd8:	e59f109c 	ldr	r1, [pc, #156]	; 36c7c <McManager::setupMachine(char const*)+0x264>
   36bdc:	e28d00d0 	add	r0, sp, #208	; 0xd0
   36be0:	ebffdcbd 	bl	2dedc <strlcpy>
   36be4:	e3a020c8 	mov	r2, #200	; 0xc8
   36be8:	e28d106c 	add	r1, sp, #108	; 0x6c
   36bec:	e28d00d0 	add	r0, sp, #208	; 0xd0
   36bf0:	ebffdcd5 	bl	2df4c <strlcat>
   36bf4:	e5970004 	ldr	r0, [r7, #4]
   36bf8:	e28d10d0 	add	r1, sp, #208	; 0xd0
   36bfc:	ebffe7cb 	bl	30b30 <CommandHandler::sendAPIReq(char const*)>
   36c00:	e3a01004 	mov	r1, #4
   36c04:	e59f2074 	ldr	r2, [pc, #116]	; 36c80 <McManager::setupMachine(char const*)+0x268>
   36c08:	e59f0074 	ldr	r0, [pc, #116]	; 36c84 <McManager::setupMachine(char const*)+0x26c>
   36c0c:	e28d30d0 	add	r3, sp, #208	; 0xd0
   36c10:	ebffe07c 	bl	2ee08 <LogWrite>
   36c14:	eaffffe4 	b	36bac <McManager::setupMachine(char const*)+0x194>
   36c18:	e58d1000 	str	r1, [sp]
   36c1c:	e1a00004 	mov	r0, r4
   36c20:	e12fff32 	blx	r2
   36c24:	e5943000 	ldr	r3, [r4]
   36c28:	e1a02000 	mov	r2, r0
   36c2c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   36c30:	e59f0038 	ldr	r0, [pc, #56]	; 36c70 <McManager::setupMachine(char const*)+0x258>
   36c34:	e59d1000 	ldr	r1, [sp]
   36c38:	e1530000 	cmp	r3, r0
   36c3c:	0affffc7 	beq	36b60 <McManager::setupMachine(char const*)+0x148>
   36c40:	e88d0006 	stm	sp, {r1, r2}
   36c44:	e1a00004 	mov	r0, r4
   36c48:	e12fff33 	blx	r3
   36c4c:	e89d0006 	ldm	sp, {r1, r2}
   36c50:	e1a03000 	mov	r3, r0
   36c54:	eaffffc2 	b	36b64 <McManager::setupMachine(char const*)+0x14c>
   36c58:	e1a00004 	mov	r0, r4
   36c5c:	e12fff33 	blx	r3
   36c60:	eaffffc8 	b	36b88 <McManager::setupMachine(char const*)+0x170>
   36c64:	00048b88 	.word	0x00048b88
   36c68:	00037110 	.word	0x00037110
   36c6c:	00100504 	.word	0x00100504
   36c70:	00037108 	.word	0x00037108
   36c74:	00037120 	.word	0x00037120
   36c78:	00048b90 	.word	0x00048b90
   36c7c:	00048b98 	.word	0x00048b98
   36c80:	00048bac 	.word	0x00048bac
   36c84:	00048bf0 	.word	0x00048bf0

00036c88 <McManager::setMachineByName(char const*)>:
   36c88:	e92d4010 	push	{r4, lr}
   36c8c:	e1a04000 	mov	r4, r0
   36c90:	e24ddffa 	sub	sp, sp, #1000	; 0x3e8
   36c94:	e1a03001 	mov	r3, r1
   36c98:	e59f201c 	ldr	r2, [pc, #28]	; 36cbc <McManager::setMachineByName(char const*)+0x34>
   36c9c:	e1a0000d 	mov	r0, sp
   36ca0:	e3a01ffa 	mov	r1, #1000	; 0x3e8
   36ca4:	ebffdcf8 	bl	2e08c <snprintf>
   36ca8:	e1a0100d 	mov	r1, sp
   36cac:	e1a00004 	mov	r0, r4
   36cb0:	ebffff58 	bl	36a18 <McManager::setupMachine(char const*)>
   36cb4:	e28ddffa 	add	sp, sp, #1000	; 0x3e8
   36cb8:	e8bd8010 	pop	{r4, pc}
   36cbc:	00048bc0 	.word	0x00048bc0

00036cc0 <McManager::displayRefresh()>:
   36cc0:	e92d4070 	push	{r4, r5, r6, lr}
   36cc4:	e2804a02 	add	r4, r0, #8192	; 0x2000
   36cc8:	e1a05000 	mov	r5, r0
   36ccc:	e5940758 	ldr	r0, [r4, #1880]	; 0x758
   36cd0:	e24dd008 	sub	sp, sp, #8
   36cd4:	e3500000 	cmp	r0, #0
   36cd8:	0a00001d 	beq	36d54 <McManager::displayRefresh()+0x94>
   36cdc:	e5903000 	ldr	r3, [r0]
   36ce0:	e59f2154 	ldr	r2, [pc, #340]	; 36e3c <McManager::displayRefresh()+0x17c>
   36ce4:	e5933058 	ldr	r3, [r3, #88]	; 0x58
   36ce8:	e1530002 	cmp	r3, r2
   36cec:	1a00004c 	bne	36e24 <McManager::displayRefresh()+0x164>
   36cf0:	e5901074 	ldr	r1, [r0, #116]	; 0x74
   36cf4:	e58d1004 	str	r1, [sp, #4]
   36cf8:	ebffdc3e 	bl	2ddf8 <millis>
   36cfc:	e59d1004 	ldr	r1, [sp, #4]
   36d00:	e1a06000 	mov	r6, r0
   36d04:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   36d08:	eb001f14 	bl	3e960 <__udivsi3>
   36d0c:	e594176c 	ldr	r1, [r4, #1900]	; 0x76c
   36d10:	e1a02000 	mov	r2, r0
   36d14:	e1a00006 	mov	r0, r6
   36d18:	ebffdc53 	bl	2de6c <isTimeout>
   36d1c:	e3500000 	cmp	r0, #0
   36d20:	1a00000d 	bne	36d5c <McManager::displayRefresh()+0x9c>
   36d24:	e5940758 	ldr	r0, [r4, #1880]	; 0x758
   36d28:	e59f2110 	ldr	r2, [pc, #272]	; 36e40 <McManager::displayRefresh()+0x180>
   36d2c:	e5903000 	ldr	r3, [r0]
   36d30:	e5933020 	ldr	r3, [r3, #32]
   36d34:	e1530002 	cmp	r3, r2
   36d38:	1a000037 	bne	36e1c <McManager::displayRefresh()+0x15c>
   36d3c:	ebffdc2d 	bl	2ddf8 <millis>
   36d40:	e5942760 	ldr	r2, [r4, #1888]	; 0x760
   36d44:	e5941770 	ldr	r1, [r4, #1904]	; 0x770
   36d48:	ebffdc47 	bl	2de6c <isTimeout>
   36d4c:	e3500000 	cmp	r0, #0
   36d50:	1a00001b 	bne	36dc4 <McManager::displayRefresh()+0x104>
   36d54:	e28dd008 	add	sp, sp, #8
   36d58:	e8bd8070 	pop	{r4, r5, r6, pc}
   36d5c:	ebffdc25 	bl	2ddf8 <millis>
   36d60:	e5942758 	ldr	r2, [r4, #1880]	; 0x758
   36d64:	e59fc0d8 	ldr	ip, [pc, #216]	; 36e44 <McManager::displayRefresh()+0x184>
   36d68:	e5923000 	ldr	r3, [r2]
   36d6c:	e584076c 	str	r0, [r4, #1900]	; 0x76c
   36d70:	e5931060 	ldr	r1, [r3, #96]	; 0x60
   36d74:	e5943764 	ldr	r3, [r4, #1892]	; 0x764
   36d78:	e151000c 	cmp	r1, ip
   36d7c:	e2833001 	add	r3, r3, #1
   36d80:	e5843764 	str	r3, [r4, #1892]	; 0x764
   36d84:	1a000029 	bne	36e30 <McManager::displayRefresh()+0x170>
   36d88:	e5d2009c 	ldrb	r0, [r2, #156]	; 0x9c
   36d8c:	e3500000 	cmp	r0, #0
   36d90:	1a000018 	bne	36df8 <McManager::displayRefresh()+0x138>
   36d94:	e5940758 	ldr	r0, [r4, #1880]	; 0x758
   36d98:	e5903000 	ldr	r3, [r0]
   36d9c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   36da0:	e12fff33 	blx	r3
   36da4:	e5953008 	ldr	r3, [r5, #8]
   36da8:	e2833601 	add	r3, r3, #1048576	; 0x100000
   36dac:	e5d334b8 	ldrb	r3, [r3, #1208]	; 0x4b8
   36db0:	e3530000 	cmp	r3, #0
   36db4:	1affffda 	bne	36d24 <McManager::displayRefresh()+0x64>
   36db8:	e1a00005 	mov	r0, r5
   36dbc:	ebfffe12 	bl	3660c <McManager::machineHeartbeat() [clone .part.0]>
   36dc0:	eaffffd7 	b	36d24 <McManager::displayRefresh()+0x64>
   36dc4:	e5940764 	ldr	r0, [r4, #1892]	; 0x764
   36dc8:	e5941760 	ldr	r1, [r4, #1888]	; 0x760
   36dcc:	e0603280 	rsb	r3, r0, r0, lsl #5
   36dd0:	e0800103 	add	r0, r0, r3, lsl #2
   36dd4:	e1a00180 	lsl	r0, r0, #3
   36dd8:	eb001ee0 	bl	3e960 <__udivsi3>
   36ddc:	e3a03000 	mov	r3, #0
   36de0:	e5840768 	str	r0, [r4, #1896]	; 0x768
   36de4:	e5843764 	str	r3, [r4, #1892]	; 0x764
   36de8:	ebffdc02 	bl	2ddf8 <millis>
   36dec:	e5840770 	str	r0, [r4, #1904]	; 0x770
   36df0:	e28dd008 	add	sp, sp, #8
   36df4:	e8bd8070 	pop	{r4, r5, r6, pc}
   36df8:	e5953008 	ldr	r3, [r5, #8]
   36dfc:	e59f0044 	ldr	r0, [pc, #68]	; 36e48 <McManager::displayRefresh()+0x188>
   36e00:	e3a02000 	mov	r2, #0
   36e04:	e0830000 	add	r0, r3, r0
   36e08:	e595100c 	ldr	r1, [r5, #12]
   36e0c:	ebffeaab 	bl	318c0 <BusSocketManager::reqBus(unsigned long, BR_BUS_ACTION_REASON)>
   36e10:	e3a03001 	mov	r3, #1
   36e14:	e5c4375c 	strb	r3, [r4, #1884]	; 0x75c
   36e18:	eaffffe1 	b	36da4 <McManager::displayRefresh()+0xe4>
   36e1c:	e12fff33 	blx	r3
   36e20:	eaffffc5 	b	36d3c <McManager::displayRefresh()+0x7c>
   36e24:	e12fff33 	blx	r3
   36e28:	e1a01000 	mov	r1, r0
   36e2c:	eaffffb0 	b	36cf4 <McManager::displayRefresh()+0x34>
   36e30:	e1a00002 	mov	r0, r2
   36e34:	e12fff31 	blx	r1
   36e38:	eaffffd3 	b	36d8c <McManager::displayRefresh()+0xcc>
   36e3c:	00037118 	.word	0x00037118
   36e40:	000370fc 	.word	0x000370fc
   36e44:	00037128 	.word	0x00037128
   36e48:	00100504 	.word	0x00100504

00036e4c <McManager::service()>:
   36e4c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   36e50:	e24ddd4e 	sub	sp, sp, #4992	; 0x1380
   36e54:	e2806a02 	add	r6, r0, #8192	; 0x2000
   36e58:	e24dd014 	sub	sp, sp, #20
   36e5c:	e1a04000 	mov	r4, r0
   36e60:	ebffff96 	bl	36cc0 <McManager::displayRefresh()>
   36e64:	e5d65778 	ldrb	r5, [r6, #1912]	; 0x778
   36e68:	e3550000 	cmp	r5, #0
   36e6c:	0a000018 	beq	36ed4 <McManager::service()+0x88>
   36e70:	e5963758 	ldr	r3, [r6, #1880]	; 0x758
   36e74:	e3530000 	cmp	r3, #0
   36e78:	0a000015 	beq	36ed4 <McManager::service()+0x88>
   36e7c:	ebffdbdd 	bl	2ddf8 <millis>
   36e80:	e5962774 	ldr	r2, [r6, #1908]	; 0x774
   36e84:	e596177c 	ldr	r1, [r6, #1916]	; 0x77c
   36e88:	ebffdbf7 	bl	2de6c <isTimeout>
   36e8c:	e3500000 	cmp	r0, #0
   36e90:	0a00000f 	beq	36ed4 <McManager::service()+0x88>
   36e94:	e5963784 	ldr	r3, [r6, #1924]	; 0x784
   36e98:	e5961780 	ldr	r1, [r6, #1920]	; 0x780
   36e9c:	e2832001 	add	r2, r3, #1
   36ea0:	e1530001 	cmp	r3, r1
   36ea4:	83a03000 	movhi	r3, #0
   36ea8:	e5960758 	ldr	r0, [r6, #1880]	; 0x758
   36eac:	e5862784 	str	r2, [r6, #1924]	; 0x784
   36eb0:	e5902000 	ldr	r2, [r0]
   36eb4:	85863784 	strhi	r3, [r6, #1924]	; 0x784
   36eb8:	e5927044 	ldr	r7, [r2, #68]	; 0x44
   36ebc:	e59f3058 	ldr	r3, [pc, #88]	; 36f1c <McManager::service()+0xd0>
   36ec0:	93a05000 	movls	r5, #0
   36ec4:	e1570003 	cmp	r7, r3
   36ec8:	1a000004 	bne	36ee0 <McManager::service()+0x94>
   36ecc:	ebffdbc9 	bl	2ddf8 <millis>
   36ed0:	e586077c 	str	r0, [r6, #1916]	; 0x77c
   36ed4:	e28ddd4e 	add	sp, sp, #4992	; 0x1380
   36ed8:	e28dd014 	add	sp, sp, #20
   36edc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   36ee0:	e1a03005 	mov	r3, r5
   36ee4:	e59f2034 	ldr	r2, [pc, #52]	; 36f20 <McManager::service()+0xd4>
   36ee8:	e28d1008 	add	r1, sp, #8
   36eec:	e12fff37 	blx	r7
   36ef0:	e3500000 	cmp	r0, #0
   36ef4:	0afffff4 	beq	36ecc <McManager::service()+0x80>
   36ef8:	e28d3008 	add	r3, sp, #8
   36efc:	e58d3000 	str	r3, [sp]
   36f00:	e58d0004 	str	r0, [sp, #4]
   36f04:	e3a03000 	mov	r3, #0
   36f08:	e5940004 	ldr	r0, [r4, #4]
   36f0c:	e59f2010 	ldr	r2, [pc, #16]	; 36f24 <McManager::service()+0xd8>
   36f10:	e59f1010 	ldr	r1, [pc, #16]	; 36f28 <McManager::service()+0xdc>
   36f14:	ebffe3e7 	bl	2feb8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   36f18:	eaffffeb 	b	36ecc <McManager::service()+0x80>
   36f1c:	00037100 	.word	0x00037100
   36f20:	00001388 	.word	0x00001388
   36f24:	000493c8 	.word	0x000493c8
   36f28:	00048bcc 	.word	0x00048bcc

00036f2c <McManager::machineHeartbeat()>:
   36f2c:	e5903008 	ldr	r3, [r0, #8]
   36f30:	e2833601 	add	r3, r3, #1048576	; 0x100000
   36f34:	e5d334b8 	ldrb	r3, [r3, #1208]	; 0x4b8
   36f38:	e3530000 	cmp	r3, #0
   36f3c:	112fff1e 	bxne	lr
   36f40:	eafffdb1 	b	3660c <McManager::machineHeartbeat() [clone .part.0]>

00036f44 <McManager::getDisplayRefreshRate()>:
   36f44:	e2800a02 	add	r0, r0, #8192	; 0x2000
   36f48:	e5900768 	ldr	r0, [r0, #1896]	; 0x768
   36f4c:	e12fff1e 	bx	lr

00036f50 <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)>:
   36f50:	e92d4070 	push	{r4, r5, r6, lr}
   36f54:	e1a04002 	mov	r4, r2
   36f58:	e2805a02 	add	r5, r0, #8192	; 0x2000
   36f5c:	e5953728 	ldr	r3, [r5, #1832]	; 0x728
   36f60:	e59f2038 	ldr	r2, [pc, #56]	; 36fa0 <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)+0x50>
   36f64:	e083c004 	add	ip, r3, r4
   36f68:	e15c0002 	cmp	ip, r2
   36f6c:	9a000003 	bls	36f80 <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)+0x30>
   36f70:	e3a03000 	mov	r3, #0
   36f74:	e1540002 	cmp	r4, r2
   36f78:	e5853728 	str	r3, [r5, #1832]	; 0x728
   36f7c:	88bd8070 	pophi	{r4, r5, r6, pc}
   36f80:	e2800014 	add	r0, r0, #20
   36f84:	e1a02004 	mov	r2, r4
   36f88:	e0800003 	add	r0, r0, r3
   36f8c:	ebffce27 	bl	2a830 <memcpy>
   36f90:	e5952728 	ldr	r2, [r5, #1832]	; 0x728
   36f94:	e0822004 	add	r2, r2, r4
   36f98:	e5852728 	str	r2, [r5, #1832]	; 0x728
   36f9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   36fa0:	0000270f 	.word	0x0000270f

00036fa4 <McManager::hostSerialNumChAvailable()>:
   36fa4:	e2800a02 	add	r0, r0, #8192	; 0x2000
   36fa8:	e5900728 	ldr	r0, [r0, #1832]	; 0x728
   36fac:	e12fff1e 	bx	lr

00036fb0 <McManager::hostSerialReadChars(unsigned char*, unsigned long)>:
   36fb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   36fb4:	e2807a02 	add	r7, r0, #8192	; 0x2000
   36fb8:	e5973728 	ldr	r3, [r7, #1832]	; 0x728
   36fbc:	e1520003 	cmp	r2, r3
   36fc0:	31a04002 	movcc	r4, r2
   36fc4:	21a04003 	movcs	r4, r3
   36fc8:	e16f3f14 	clz	r3, r4
   36fcc:	e3510000 	cmp	r1, #0
   36fd0:	e1a032a3 	lsr	r3, r3, #5
   36fd4:	11a05003 	movne	r5, r3
   36fd8:	03a05001 	moveq	r5, #1
   36fdc:	e3550000 	cmp	r5, #0
   36fe0:	13a04000 	movne	r4, #0
   36fe4:	0a000001 	beq	36ff0 <McManager::hostSerialReadChars(unsigned char*, unsigned long)+0x40>
   36fe8:	e1a00004 	mov	r0, r4
   36fec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   36ff0:	e2806014 	add	r6, r0, #20
   36ff4:	e1a02004 	mov	r2, r4
   36ff8:	e1a00001 	mov	r0, r1
   36ffc:	e1a01006 	mov	r1, r6
   37000:	ebffce0a 	bl	2a830 <memcpy>
   37004:	e5972728 	ldr	r2, [r7, #1832]	; 0x728
   37008:	e1520004 	cmp	r2, r4
   3700c:	25875728 	strcs	r5, [r7, #1832]	; 0x728
   37010:	2afffff4 	bcs	36fe8 <McManager::hostSerialReadChars(unsigned char*, unsigned long)+0x38>
   37014:	e1a00006 	mov	r0, r6
   37018:	e0422004 	sub	r2, r2, r4
   3701c:	e0861004 	add	r1, r6, r4
   37020:	ebffcbe5 	bl	29fbc <memmove>
   37024:	e5973728 	ldr	r3, [r7, #1832]	; 0x728
   37028:	e1a00004 	mov	r0, r4
   3702c:	e0433004 	sub	r3, r3, r4
   37030:	e5873728 	str	r3, [r7, #1832]	; 0x728
   37034:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00037038 <McManager::sendKeyStrToTargetStatic(char const*)>:
   37038:	e5900004 	ldr	r0, [r0, #4]
   3703c:	eaffe38c 	b	2fe74 <CommandHandler::sendKeyStrToTargetStatic(char const*)>

00037040 <McManager::keyHandler(unsigned char, unsigned char const*)>:
   37040:	e2800a02 	add	r0, r0, #8192	; 0x2000
   37044:	e5900758 	ldr	r0, [r0, #1880]	; 0x758
   37048:	e3500000 	cmp	r0, #0
   3704c:	012fff1e 	bxeq	lr
   37050:	e5903000 	ldr	r3, [r0]
   37054:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   37058:	e12fff13 	bx	r3

0003705c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   3705c:	e3a00000 	mov	r0, #0
   37060:	e12fff1e 	bx	lr

00037064 <McManager::targetFileHandler(char const*, unsigned char const*, unsigned int)>:
   37064:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   37068:	e1a04000 	mov	r4, r0
   3706c:	e1a05001 	mov	r5, r1
   37070:	e59f0050 	ldr	r0, [pc, #80]	; 370c8 <McManager::targetFileHandler(char const*, unsigned char const*, unsigned int)+0x64>
   37074:	e1a06002 	mov	r6, r2
   37078:	e3a01004 	mov	r1, #4
   3707c:	e59f2048 	ldr	r2, [pc, #72]	; 370cc <McManager::targetFileHandler(char const*, unsigned char const*, unsigned int)+0x68>
   37080:	e24dd00c 	sub	sp, sp, #12
   37084:	e1a07003 	mov	r7, r3
   37088:	ebffdf5e 	bl	2ee08 <LogWrite>
   3708c:	e2843a02 	add	r3, r4, #8192	; 0x2000
   37090:	e5930758 	ldr	r0, [r3, #1880]	; 0x758
   37094:	e3500000 	cmp	r0, #0
   37098:	0a000008 	beq	370c0 <McManager::targetFileHandler(char const*, unsigned char const*, unsigned int)+0x5c>
   3709c:	e5943008 	ldr	r3, [r4, #8]
   370a0:	e590c000 	ldr	ip, [r0]
   370a4:	e2833018 	add	r3, r3, #24
   370a8:	e58d3000 	str	r3, [sp]
   370ac:	e1a02006 	mov	r2, r6
   370b0:	e1a03007 	mov	r3, r7
   370b4:	e1a01005 	mov	r1, r5
   370b8:	e59c4038 	ldr	r4, [ip, #56]	; 0x38
   370bc:	e12fff34 	blx	r4
   370c0:	e28dd00c 	add	sp, sp, #12
   370c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   370c8:	00048bf0 	.word	0x00048bf0
   370cc:	00048bdc 	.word	0x00048bdc

000370d0 <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)>:
   370d0:	e3500000 	cmp	r0, #0
   370d4:	012fff1e 	bxeq	lr
   370d8:	eaffffe1 	b	37064 <McManager::targetFileHandler(char const*, unsigned char const*, unsigned int)>

000370dc <McManager::busActionActive(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE)>:
   370dc:	e3510004 	cmp	r1, #4
   370e0:	112fff1e 	bxne	lr
   370e4:	e2802a02 	add	r2, r0, #8192	; 0x2000
   370e8:	e5d2275c 	ldrb	r2, [r2, #1884]	; 0x75c
   370ec:	e3520000 	cmp	r2, #0
   370f0:	012fff1e 	bxeq	lr
   370f4:	e1a01003 	mov	r1, r3
   370f8:	eafffd4a 	b	36628 <McManager::busActionActive(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE) [clone .part.0]>

000370fc <McBase::service()>:
   370fc:	e12fff1e 	bx	lr

00037100 <McBase::getMirrorChanges(unsigned char*, unsigned long, bool)>:
   37100:	e3a00000 	mov	r0, #0
   37104:	e12fff1e 	bx	lr

00037108 <McBase::isMonitorIORQEnabled()>:
   37108:	e5d000a8 	ldrb	r0, [r0, #168]	; 0xa8
   3710c:	e12fff1e 	bx	lr

00037110 <McBase::isMonitorMREQEnabled()>:
   37110:	e5d000a9 	ldrb	r0, [r0, #169]	; 0xa9
   37114:	e12fff1e 	bx	lr

00037118 <McBase::getDisplayRefreshRatePerSec()>:
   37118:	e5900074 	ldr	r0, [r0, #116]	; 0x74
   3711c:	e12fff1e 	bx	lr

00037120 <McBase::getSetRegistersCodeAddr()>:
   37120:	e59000ac 	ldr	r0, [r0, #172]	; 0xac
   37124:	e12fff1e 	bx	lr

00037128 <McBase::isDisplayMemoryMapped()>:
   37128:	e5d0009c 	ldrb	r0, [r0, #156]	; 0x9c
   3712c:	e12fff1e 	bx	lr

00037130 <McTRS80::enableMachine()>:
   37130:	e3a03000 	mov	r3, #0
   37134:	e5c034e4 	strb	r3, [r0, #1252]	; 0x4e4
   37138:	e5c035e5 	strb	r3, [r0, #1509]	; 0x5e5
   3713c:	e12fff1e 	bx	lr

00037140 <McTRS80::disableMachine()>:
   37140:	e12fff1e 	bx	lr

00037144 <McTRS80::keyHandler(unsigned char, unsigned char const*)>:
   37144:	e3a03000 	mov	r3, #0
   37148:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3714c:	e24dd00c 	sub	sp, sp, #12
   37150:	e242e001 	sub	lr, r2, #1
   37154:	e1a05003 	mov	r5, r3
   37158:	e1a0c003 	mov	ip, r3
   3715c:	e1a06003 	mov	r6, r3
   37160:	e1a04003 	mov	r4, r3
   37164:	e1a07003 	mov	r7, r3
   37168:	e3a08001 	mov	r8, #1
   3716c:	e3e0907f 	mvn	r9, #127	; 0x7f
   37170:	e2011002 	and	r1, r1, #2
   37174:	e2822005 	add	r2, r2, #5
   37178:	e58d3000 	str	r3, [sp]
   3717c:	e58d3004 	str	r3, [sp, #4]
   37180:	ea000008 	b	371a8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x64>
   37184:	e2433003 	sub	r3, r3, #3
   37188:	e28da008 	add	sl, sp, #8
   3718c:	e08ab1c3 	add	fp, sl, r3, asr #3
   37190:	e55ba008 	ldrb	sl, [fp, #-8]
   37194:	e2033007 	and	r3, r3, #7
   37198:	e18a3318 	orr	r3, sl, r8, lsl r3
   3719c:	e54b3008 	strb	r3, [fp, #-8]
   371a0:	e15e0002 	cmp	lr, r2
   371a4:	0a000016 	beq	37204 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xc0>
   371a8:	e5fe3001 	ldrb	r3, [lr, #1]!
   371ac:	e243a004 	sub	sl, r3, #4
   371b0:	e35a0019 	cmp	sl, #25
   371b4:	9afffff2 	bls	37184 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x40>
   371b8:	e353001f 	cmp	r3, #31
   371bc:	0a000033 	beq	37290 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x14c>
   371c0:	e3530023 	cmp	r3, #35	; 0x23
   371c4:	0a000038 	beq	372ac <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x168>
   371c8:	e3530024 	cmp	r3, #36	; 0x24
   371cc:	0a000041 	beq	372d8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x194>
   371d0:	e3530025 	cmp	r3, #37	; 0x25
   371d4:	0a000045 	beq	372f0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1ac>
   371d8:	e3530026 	cmp	r3, #38	; 0x26
   371dc:	1a000049 	bne	37308 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1c4>
   371e0:	e3510000 	cmp	r1, #0
   371e4:	0a000033 	beq	372b8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x174>
   371e8:	e5dd3005 	ldrb	r3, [sp, #5]
   371ec:	e15e0002 	cmp	lr, r2
   371f0:	e3833001 	orr	r3, r3, #1
   371f4:	e3a06001 	mov	r6, #1
   371f8:	e3844001 	orr	r4, r4, #1
   371fc:	e5cd3005 	strb	r3, [sp, #5]
   37200:	1affffe8 	bne	371a8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x64>
   37204:	e3a0e001 	mov	lr, #1
   37208:	e3560000 	cmp	r6, #0
   3720c:	15cd4007 	strbne	r4, [sp, #7]
   37210:	e3550000 	cmp	r5, #0
   37214:	15cdc006 	strbne	ip, [sp, #6]
   37218:	e3570000 	cmp	r7, #0
   3721c:	15dd3007 	ldrbne	r3, [sp, #7]
   37220:	e59f72c4 	ldr	r7, [pc, #708]	; 374ec <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3a8>
   37224:	13c33003 	bicne	r3, r3, #3
   37228:	e2805e4e 	add	r5, r0, #1248	; 0x4e0
   3722c:	e2806e5e 	add	r6, r0, #1504	; 0x5e0
   37230:	15cd3007 	strbne	r3, [sp, #7]
   37234:	e0477000 	sub	r7, r7, r0
   37238:	e2855005 	add	r5, r5, #5
   3723c:	e2866005 	add	r6, r6, #5
   37240:	e3a01000 	mov	r1, #0
   37244:	e1a0200d 	mov	r2, sp
   37248:	e1a03001 	mov	r3, r1
   3724c:	e087c005 	add	ip, r7, r5
   37250:	e01c431e 	ands	r4, ip, lr, lsl r3
   37254:	15d24000 	ldrbne	r4, [r2]
   37258:	e2833001 	add	r3, r3, #1
   3725c:	11811004 	orrne	r1, r1, r4
   37260:	e3530008 	cmp	r3, #8
   37264:	e2822001 	add	r2, r2, #1
   37268:	1afffff8 	bne	37250 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x10c>
   3726c:	e5d53000 	ldrb	r3, [r5]
   37270:	e2855001 	add	r5, r5, #1
   37274:	e1530001 	cmp	r3, r1
   37278:	15451001 	strbne	r1, [r5, #-1]
   3727c:	15c0e5e5 	strbne	lr, [r0, #1509]	; 0x5e5
   37280:	e1550006 	cmp	r5, r6
   37284:	1affffed 	bne	37240 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xfc>
   37288:	e28dd00c 	add	sp, sp, #12
   3728c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37290:	e3510000 	cmp	r1, #0
   37294:	0a000007 	beq	372b8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x174>
   37298:	e3a07001 	mov	r7, #1
   3729c:	e5dd3000 	ldrb	r3, [sp]
   372a0:	e1833007 	orr	r3, r3, r7
   372a4:	e5cd3000 	strb	r3, [sp]
   372a8:	eaffffbc 	b	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   372ac:	e3510000 	cmp	r1, #0
   372b0:	13a07001 	movne	r7, #1
   372b4:	1affffb9 	bne	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   372b8:	e243301d 	sub	r3, r3, #29
   372bc:	e28da008 	add	sl, sp, #8
   372c0:	e08ab1c3 	add	fp, sl, r3, asr #3
   372c4:	e55ba004 	ldrb	sl, [fp, #-4]
   372c8:	e2033007 	and	r3, r3, #7
   372cc:	e18a3318 	orr	r3, sl, r8, lsl r3
   372d0:	e54b3004 	strb	r3, [fp, #-4]
   372d4:	eaffffb1 	b	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   372d8:	e3510000 	cmp	r1, #0
   372dc:	0afffff5 	beq	372b8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x174>
   372e0:	e5dd3004 	ldrb	r3, [sp, #4]
   372e4:	e3833040 	orr	r3, r3, #64	; 0x40
   372e8:	e5cd3004 	strb	r3, [sp, #4]
   372ec:	eaffffab 	b	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   372f0:	e3510000 	cmp	r1, #0
   372f4:	0affffef 	beq	372b8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x174>
   372f8:	e5dd3005 	ldrb	r3, [sp, #5]
   372fc:	e3833004 	orr	r3, r3, #4
   37300:	e5cd3005 	strb	r3, [sp, #5]
   37304:	eaffffa5 	b	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37308:	e3530027 	cmp	r3, #39	; 0x27
   3730c:	1a000005 	bne	37328 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1e4>
   37310:	e3510000 	cmp	r1, #0
   37314:	1a00003d 	bne	37410 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2cc>
   37318:	e5dd3004 	ldrb	r3, [sp, #4]
   3731c:	e3833001 	orr	r3, r3, #1
   37320:	e5cd3004 	strb	r3, [sp, #4]
   37324:	eaffff9d 	b	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37328:	e243a01e 	sub	sl, r3, #30
   3732c:	e35a0008 	cmp	sl, #8
   37330:	9affffe0 	bls	372b8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x174>
   37334:	e3530033 	cmp	r3, #51	; 0x33
   37338:	0a000042 	beq	37448 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x304>
   3733c:	e3530034 	cmp	r3, #52	; 0x34
   37340:	0a000038 	beq	37428 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2e4>
   37344:	e3530036 	cmp	r3, #54	; 0x36
   37348:	0a000045 	beq	37464 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x320>
   3734c:	e3530037 	cmp	r3, #55	; 0x37
   37350:	0a00004d 	beq	3748c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x348>
   37354:	e353002e 	cmp	r3, #46	; 0x2e
   37358:	0a00004f 	beq	3749c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x358>
   3735c:	e353002d 	cmp	r3, #45	; 0x2d
   37360:	0a000043 	beq	37474 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x330>
   37364:	e3530038 	cmp	r3, #56	; 0x38
   37368:	0a00005b 	beq	374dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x398>
   3736c:	e3530028 	cmp	r3, #40	; 0x28
   37370:	03a05001 	moveq	r5, #1
   37374:	038cc001 	orreq	ip, ip, #1
   37378:	0affff88 	beq	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   3737c:	e353002a 	cmp	r3, #42	; 0x2a
   37380:	0a000052 	beq	374d0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x38c>
   37384:	e3530029 	cmp	r3, #41	; 0x29
   37388:	03a05001 	moveq	r5, #1
   3738c:	038cc004 	orreq	ip, ip, #4
   37390:	0affff82 	beq	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37394:	e3530052 	cmp	r3, #82	; 0x52
   37398:	03a05001 	moveq	r5, #1
   3739c:	038cc008 	orreq	ip, ip, #8
   373a0:	0affff7e 	beq	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   373a4:	e3530051 	cmp	r3, #81	; 0x51
   373a8:	03a05001 	moveq	r5, #1
   373ac:	038cc010 	orreq	ip, ip, #16
   373b0:	0affff7a 	beq	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   373b4:	e3530050 	cmp	r3, #80	; 0x50
   373b8:	0a000044 	beq	374d0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x38c>
   373bc:	e353004f 	cmp	r3, #79	; 0x4f
   373c0:	03a05001 	moveq	r5, #1
   373c4:	038cc040 	orreq	ip, ip, #64	; 0x40
   373c8:	0affff74 	beq	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   373cc:	e353002c 	cmp	r3, #44	; 0x2c
   373d0:	03a05001 	moveq	r5, #1
   373d4:	038cc080 	orreq	ip, ip, #128	; 0x80
   373d8:	0affff70 	beq	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   373dc:	e353003a 	cmp	r3, #58	; 0x3a
   373e0:	03a05001 	moveq	r5, #1
   373e4:	038cc002 	orreq	ip, ip, #2
   373e8:	0affff6c 	beq	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   373ec:	e35300e1 	cmp	r3, #225	; 0xe1
   373f0:	03a06001 	moveq	r6, #1
   373f4:	03844001 	orreq	r4, r4, #1
   373f8:	0affff68 	beq	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   373fc:	e35300e5 	cmp	r3, #229	; 0xe5
   37400:	1a00002d 	bne	374bc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x378>
   37404:	e3a06001 	mov	r6, #1
   37408:	e3844002 	orr	r4, r4, #2
   3740c:	eaffff63 	b	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37410:	e5dd3005 	ldrb	r3, [sp, #5]
   37414:	e3a06001 	mov	r6, #1
   37418:	e3833002 	orr	r3, r3, #2
   3741c:	e3844001 	orr	r4, r4, #1
   37420:	e5cd3005 	strb	r3, [sp, #5]
   37424:	eaffff5d 	b	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37428:	e3510000 	cmp	r1, #0
   3742c:	0affff5b 	beq	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37430:	e5dd3004 	ldrb	r3, [sp, #4]
   37434:	e3a06001 	mov	r6, #1
   37438:	e3833004 	orr	r3, r3, #4
   3743c:	e3844001 	orr	r4, r4, #1
   37440:	e5cd3004 	strb	r3, [sp, #4]
   37444:	eaffff55 	b	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37448:	e5dd3005 	ldrb	r3, [sp, #5]
   3744c:	e3510000 	cmp	r1, #0
   37450:	03833008 	orreq	r3, r3, #8
   37454:	13833004 	orrne	r3, r3, #4
   37458:	e3a07001 	mov	r7, #1
   3745c:	e5cd3005 	strb	r3, [sp, #5]
   37460:	eaffff4e 	b	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37464:	e5dd3005 	ldrb	r3, [sp, #5]
   37468:	e3833010 	orr	r3, r3, #16
   3746c:	e5cd3005 	strb	r3, [sp, #5]
   37470:	eaffff4a 	b	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   37474:	e3510000 	cmp	r1, #0
   37478:	05dd3005 	ldrbeq	r3, [sp, #5]
   3747c:	03a07001 	moveq	r7, #1
   37480:	03833020 	orreq	r3, r3, #32
   37484:	05cd3005 	strbeq	r3, [sp, #5]
   37488:	eaffff44 	b	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   3748c:	e5dd3005 	ldrb	r3, [sp, #5]
   37490:	e3833040 	orr	r3, r3, #64	; 0x40
   37494:	e5cd3005 	strb	r3, [sp, #5]
   37498:	eaffff40 	b	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   3749c:	e5dd3005 	ldrb	r3, [sp, #5]
   374a0:	e3510000 	cmp	r1, #0
   374a4:	03833020 	orreq	r3, r3, #32
   374a8:	13833008 	orrne	r3, r3, #8
   374ac:	e3a06001 	mov	r6, #1
   374b0:	e3844001 	orr	r4, r4, #1
   374b4:	e5cd3005 	strb	r3, [sp, #5]
   374b8:	eaffff38 	b	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   374bc:	e20330fb 	and	r3, r3, #251	; 0xfb
   374c0:	e35300e0 	cmp	r3, #224	; 0xe0
   374c4:	03a06001 	moveq	r6, #1
   374c8:	03844010 	orreq	r4, r4, #16
   374cc:	eaffff33 	b	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   374d0:	e3a05001 	mov	r5, #1
   374d4:	e38cc020 	orr	ip, ip, #32
   374d8:	eaffff30 	b	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   374dc:	e5dd3005 	ldrb	r3, [sp, #5]
   374e0:	e1893003 	orr	r3, r9, r3
   374e4:	e5cd3005 	strb	r3, [sp, #5]
   374e8:	eaffff2c 	b	371a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x5c>
   374ec:	fffffb1b 	.word	0xfffffb1b

000374f0 <McTRS80::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   374f0:	e2033009 	and	r3, r3, #9
   374f4:	e3530009 	cmp	r3, #9
   374f8:	112fff1e 	bxne	lr
   374fc:	e6ef1071 	uxtb	r1, r1
   37500:	e3510013 	cmp	r1, #19
   37504:	03a030ff 	moveq	r3, #255	; 0xff
   37508:	059d2000 	ldreq	r2, [sp]
   3750c:	05823000 	streq	r3, [r2]
   37510:	e12fff1e 	bx	lr

00037514 <McTRS80::busActionActiveCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE)>:
   37514:	e12fff1e 	bx	lr

00037518 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)>:
   37518:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3751c:	e1a04001 	mov	r4, r1
   37520:	e24dd094 	sub	sp, sp, #148	; 0x94
   37524:	e59f0124 	ldr	r0, [pc, #292]	; 37650 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x138>
   37528:	e1a06002 	mov	r6, r2
   3752c:	e1a07003 	mov	r7, r3
   37530:	e59f211c 	ldr	r2, [pc, #284]	; 37654 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x13c>
   37534:	e1a03001 	mov	r3, r1
   37538:	e3a01004 	mov	r1, #4
   3753c:	ebffde31 	bl	2ee08 <LogWrite>
   37540:	e1a01004 	mov	r1, r4
   37544:	e3a03064 	mov	r3, #100	; 0x64
   37548:	e59f0108 	ldr	r0, [pc, #264]	; 37658 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x140>
   3754c:	e28d2028 	add	r2, sp, #40	; 0x28
   37550:	ebffdb0e 	bl	2e190 <jsonGetValueForKey>
   37554:	e2505000 	subs	r5, r0, #0
   37558:	0a00002e 	beq	37618 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x100>
   3755c:	e59f10f8 	ldr	r1, [pc, #248]	; 3765c <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x144>
   37560:	e28d0028 	add	r0, sp, #40	; 0x28
   37564:	ebffcb8e 	bl	2a3a4 <strstr>
   37568:	e59f30f0 	ldr	r3, [pc, #240]	; 37660 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x148>
   3756c:	e3500000 	cmp	r0, #0
   37570:	01a00003 	moveq	r0, r3
   37574:	e59f10e8 	ldr	r1, [pc, #232]	; 37664 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x14c>
   37578:	ebffcad8 	bl	2a0e0 <strcasecmp>
   3757c:	e3500000 	cmp	r0, #0
   37580:	0a000014 	beq	375d8 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0xc0>
   37584:	e1a01004 	mov	r1, r4
   37588:	e3a0301e 	mov	r3, #30
   3758c:	e59f00d4 	ldr	r0, [pc, #212]	; 37668 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x150>
   37590:	e28d2008 	add	r2, sp, #8
   37594:	ebffdafd 	bl	2e190 <jsonGetValueForKey>
   37598:	e2504000 	subs	r4, r0, #0
   3759c:	01a03004 	moveq	r3, r4
   375a0:	1a000023 	bne	37634 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x11c>
   375a4:	e3a01004 	mov	r1, #4
   375a8:	e59f20bc 	ldr	r2, [pc, #188]	; 3766c <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x154>
   375ac:	e59f009c 	ldr	r0, [pc, #156]	; 37650 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x138>
   375b0:	e58d7000 	str	r7, [sp]
   375b4:	ebffde13 	bl	2ee08 <LogWrite>
   375b8:	e59d00a8 	ldr	r0, [sp, #168]	; 0xa8
   375bc:	e1a03007 	mov	r3, r7
   375c0:	e1a02006 	mov	r2, r6
   375c4:	e1a01004 	mov	r1, r4
   375c8:	ebfff1ef 	bl	33d8c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   375cc:	e1a00005 	mov	r0, r5
   375d0:	e28dd094 	add	sp, sp, #148	; 0x94
   375d4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   375d8:	e28d0008 	add	r0, sp, #8
   375dc:	eb0011e7 	bl	3bd80 <McTRS80CmdFormat::McTRS80CmdFormat()>
   375e0:	e1a03007 	mov	r3, r7
   375e4:	e3a01004 	mov	r1, #4
   375e8:	e59f2080 	ldr	r2, [pc, #128]	; 37670 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x158>
   375ec:	e59f005c 	ldr	r0, [pc, #92]	; 37650 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x138>
   375f0:	ebffde04 	bl	2ee08 <LogWrite>
   375f4:	e28d0008 	add	r0, sp, #8
   375f8:	e1cd60f0 	strd	r6, [sp]
   375fc:	e59d30a8 	ldr	r3, [sp, #168]	; 0xa8
   37600:	e59f206c 	ldr	r2, [pc, #108]	; 37674 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x15c>
   37604:	e59f106c 	ldr	r1, [pc, #108]	; 37678 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x160>
   37608:	eb0011dd 	bl	3bd84 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>
   3760c:	e1a00005 	mov	r0, r5
   37610:	e28dd094 	add	sp, sp, #148	; 0x94
   37614:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   37618:	e3a01004 	mov	r1, #4
   3761c:	e59f2058 	ldr	r2, [pc, #88]	; 3767c <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x164>
   37620:	e59f0028 	ldr	r0, [pc, #40]	; 37650 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x138>
   37624:	ebffddf7 	bl	2ee08 <LogWrite>
   37628:	e1a00005 	mov	r0, r5
   3762c:	e28dd094 	add	sp, sp, #148	; 0x94
   37630:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   37634:	e3a02010 	mov	r2, #16
   37638:	e3a01000 	mov	r1, #0
   3763c:	e28d0008 	add	r0, sp, #8
   37640:	ebffcba7 	bl	2a4e4 <strtoul>
   37644:	e6ff3070 	uxth	r3, r0
   37648:	e1a04003 	mov	r4, r3
   3764c:	eaffffd4 	b	375a4 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x8c>
   37650:	00048c0c 	.word	0x00048c0c
   37654:	00048bfc 	.word	0x00048bfc
   37658:	00047dfc 	.word	0x00047dfc
   3765c:	00040680 	.word	0x00040680
   37660:	000493c8 	.word	0x000493c8
   37664:	00048c30 	.word	0x00048c30
   37668:	00048c5c 	.word	0x00048c5c
   3766c:	00048c68 	.word	0x00048c68
   37670:	00048c38 	.word	0x00048c38
   37674:	00033ee8 	.word	0x00033ee8
   37678:	00033e58 	.word	0x00033e58
   3767c:	00048c14 	.word	0x00048c14

00037680 <McTRS80::McTRS80(McManager&, BusControl&)>:
   37680:	e3a03001 	mov	r3, #1
   37684:	e92d4010 	push	{r4, lr}
   37688:	e1a04000 	mov	r4, r0
   3768c:	e24dd008 	sub	sp, sp, #8
   37690:	e58d3000 	str	r3, [sp]
   37694:	e59f3040 	ldr	r3, [pc, #64]	; 376dc <McTRS80::McTRS80(McManager&, BusControl&)+0x5c>
   37698:	eb000868 	bl	39840 <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)>
   3769c:	e1a03004 	mov	r3, r4
   376a0:	e3a01000 	mov	r1, #0
   376a4:	e59f0034 	ldr	r0, [pc, #52]	; 376e0 <McTRS80::McTRS80(McManager&, BusControl&)+0x60>
   376a8:	e2842e5e 	add	r2, r4, #1504	; 0x5e0
   376ac:	e48304e0 	str	r0, [r3], #1248	; 0x4e0
   376b0:	e2833004 	add	r3, r3, #4
   376b4:	e2822004 	add	r2, r2, #4
   376b8:	e5e31001 	strb	r1, [r3, #1]!
   376bc:	e1530002 	cmp	r3, r2
   376c0:	1afffffc 	bne	376b8 <McTRS80::McTRS80(McManager&, BusControl&)+0x38>
   376c4:	e3a03001 	mov	r3, #1
   376c8:	e1a00004 	mov	r0, r4
   376cc:	e5c414e4 	strb	r1, [r4, #1252]	; 0x4e4
   376d0:	e5c435e5 	strb	r3, [r4, #1509]	; 0x5e5
   376d4:	e28dd008 	add	sp, sp, #8
   376d8:	e8bd8010 	pop	{r4, pc}
   376dc:	0004a458 	.word	0x0004a458
   376e0:	00048ca0 	.word	0x00048ca0

000376e4 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)>:
   376e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   376e8:	e5903000 	ldr	r3, [r0]
   376ec:	e59fc1b8 	ldr	ip, [pc, #440]	; 378ac <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1c8>
   376f0:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   376f4:	e24dd01c 	sub	sp, sp, #28
   376f8:	e153000c 	cmp	r3, ip
   376fc:	e1a08000 	mov	r8, r0
   37700:	e1a04002 	mov	r4, r2
   37704:	e58d1014 	str	r1, [sp, #20]
   37708:	1a000064 	bne	378a0 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1bc>
   3770c:	e59090e0 	ldr	r9, [r0, #224]	; 0xe0
   37710:	e3540b01 	cmp	r4, #1024	; 0x400
   37714:	23a02000 	movcs	r2, #0
   37718:	33a02001 	movcc	r2, #1
   3771c:	e3590000 	cmp	r9, #0
   37720:	11a04002 	movne	r4, r2
   37724:	03a04001 	moveq	r4, #1
   37728:	e3540000 	cmp	r4, #0
   3772c:	1a000059 	bne	37898 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1b4>
   37730:	e5983000 	ldr	r3, [r8]
   37734:	e1a00008 	mov	r0, r8
   37738:	e5933014 	ldr	r3, [r3, #20]
   3773c:	e12fff33 	blx	r3
   37740:	e1a02000 	mov	r2, r0
   37744:	e5983000 	ldr	r3, [r8]
   37748:	e1a00008 	mov	r0, r8
   3774c:	e5933014 	ldr	r3, [r3, #20]
   37750:	e592506c 	ldr	r5, [r2, #108]	; 0x6c
   37754:	e12fff33 	blx	r3
   37758:	e1a03000 	mov	r3, r0
   3775c:	e1a00005 	mov	r0, r5
   37760:	e5931074 	ldr	r1, [r3, #116]	; 0x74
   37764:	eb001d00 	bl	3eb6c <__divsi3>
   37768:	e5983000 	ldr	r3, [r8]
   3776c:	e1a0b000 	mov	fp, r0
   37770:	e5933014 	ldr	r3, [r3, #20]
   37774:	e1a00008 	mov	r0, r8
   37778:	e12fff33 	blx	r3
   3777c:	e1a02000 	mov	r2, r0
   37780:	e5983000 	ldr	r3, [r8]
   37784:	e1a00008 	mov	r0, r8
   37788:	e5933014 	ldr	r3, [r3, #20]
   3778c:	e5925070 	ldr	r5, [r2, #112]	; 0x70
   37790:	e12fff33 	blx	r3
   37794:	e1a03000 	mov	r3, r0
   37798:	e1a00005 	mov	r0, r5
   3779c:	e5931078 	ldr	r1, [r3, #120]	; 0x78
   377a0:	eb001cf1 	bl	3eb6c <__divsi3>
   377a4:	e2503000 	subs	r3, r0, #0
   377a8:	e58d3010 	str	r3, [sp, #16]
   377ac:	da000037 	ble	37890 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1ac>
   377b0:	e2683000 	rsb	r3, r8, #0
   377b4:	e1a00009 	mov	r0, r9
   377b8:	e1a02004 	mov	r2, r4
   377bc:	e1a09003 	mov	r9, r3
   377c0:	e28870e4 	add	r7, r8, #228	; 0xe4
   377c4:	e59fa0e4 	ldr	sl, [pc, #228]	; 378b0 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1cc>
   377c8:	e58d4000 	str	r4, [sp]
   377cc:	e087700b 	add	r7, r7, fp
   377d0:	e35b0000 	cmp	fp, #0
   377d4:	da000024 	ble	3786c <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x188>
   377d8:	e59d3014 	ldr	r3, [sp, #20]
   377dc:	e59d1000 	ldr	r1, [sp]
   377e0:	e047400b 	sub	r4, r7, fp
   377e4:	e0835001 	add	r5, r3, r1
   377e8:	e24930e4 	sub	r3, r9, #228	; 0xe4
   377ec:	e98d0808 	stmib	sp, {r3, fp}
   377f0:	e58d900c 	str	r9, [sp, #12]
   377f4:	e1a0b000 	mov	fp, r0
   377f8:	e1a09002 	mov	r9, r2
   377fc:	ea000004 	b	37814 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x130>
   37800:	e5c43000 	strb	r3, [r4]
   37804:	e2844001 	add	r4, r4, #1
   37808:	e1540007 	cmp	r4, r7
   3780c:	e2855001 	add	r5, r5, #1
   37810:	0a000011 	beq	3785c <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x178>
   37814:	e5d834e4 	ldrb	r3, [r8, #1252]	; 0x4e4
   37818:	e3530000 	cmp	r3, #0
   3781c:	e5d53000 	ldrb	r3, [r5]
   37820:	0a000002 	beq	37830 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x14c>
   37824:	e5d41000 	ldrb	r1, [r4]
   37828:	e1510003 	cmp	r1, r3
   3782c:	0afffff4 	beq	37804 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x120>
   37830:	e59b1000 	ldr	r1, [fp]
   37834:	e5916028 	ldr	r6, [r1, #40]	; 0x28
   37838:	e156000a 	cmp	r6, sl
   3783c:	0affffef 	beq	37800 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x11c>
   37840:	e59d1004 	ldr	r1, [sp, #4]
   37844:	e1a02009 	mov	r2, r9
   37848:	e1a0000b 	mov	r0, fp
   3784c:	e0811004 	add	r1, r1, r4
   37850:	e12fff36 	blx	r6
   37854:	e5d53000 	ldrb	r3, [r5]
   37858:	eaffffe8 	b	37800 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x11c>
   3785c:	e1a02009 	mov	r2, r9
   37860:	e1a0000b 	mov	r0, fp
   37864:	e59d900c 	ldr	r9, [sp, #12]
   37868:	e59db008 	ldr	fp, [sp, #8]
   3786c:	e59d3010 	ldr	r3, [sp, #16]
   37870:	e2822001 	add	r2, r2, #1
   37874:	e1530002 	cmp	r3, r2
   37878:	e59d3000 	ldr	r3, [sp]
   3787c:	e087700b 	add	r7, r7, fp
   37880:	e083300b 	add	r3, r3, fp
   37884:	e58d3000 	str	r3, [sp]
   37888:	e049900b 	sub	r9, r9, fp
   3788c:	1affffcf 	bne	377d0 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xec>
   37890:	e3a03001 	mov	r3, #1
   37894:	e5c834e4 	strb	r3, [r8, #1252]	; 0x4e4
   37898:	e28dd01c 	add	sp, sp, #28
   3789c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   378a0:	e12fff33 	blx	r3
   378a4:	e1a09000 	mov	r9, r0
   378a8:	eaffff98 	b	37710 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x2c>
   378ac:	00037978 	.word	0x00037978
   378b0:	00037964 	.word	0x00037964

000378b4 <McTRS80::refreshDisplay()>:
   378b4:	e3a03000 	mov	r3, #0
   378b8:	e92d4030 	push	{r4, r5, lr}
   378bc:	e5902008 	ldr	r2, [r0, #8]
   378c0:	e1a04000 	mov	r4, r0
   378c4:	e24ddb01 	sub	sp, sp, #1024	; 0x400
   378c8:	e59f008c 	ldr	r0, [pc, #140]	; 3795c <McTRS80::refreshDisplay()+0xa8>
   378cc:	e24dd00c 	sub	sp, sp, #12
   378d0:	e0820000 	add	r0, r2, r0
   378d4:	e58d3000 	str	r3, [sp]
   378d8:	e3a01b0f 	mov	r1, #15360	; 0x3c00
   378dc:	e3a03b01 	mov	r3, #1024	; 0x400
   378e0:	e28d2008 	add	r2, sp, #8
   378e4:	ebfff199 	bl	33f50 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   378e8:	e3500000 	cmp	r0, #0
   378ec:	0a000005 	beq	37908 <McTRS80::refreshDisplay()+0x54>
   378f0:	e5d435e5 	ldrb	r3, [r4, #1509]	; 0x5e5
   378f4:	e3530000 	cmp	r3, #0
   378f8:	1a000009 	bne	37924 <McTRS80::refreshDisplay()+0x70>
   378fc:	e28ddb01 	add	sp, sp, #1024	; 0x400
   37900:	e28dd00c 	add	sp, sp, #12
   37904:	e8bd8030 	pop	{r4, r5, pc}
   37908:	e3a02b01 	mov	r2, #1024	; 0x400
   3790c:	e1a00004 	mov	r0, r4
   37910:	e28d1008 	add	r1, sp, #8
   37914:	ebffff72 	bl	376e4 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)>
   37918:	e5d435e5 	ldrb	r3, [r4, #1509]	; 0x5e5
   3791c:	e3530000 	cmp	r3, #0
   37920:	0afffff5 	beq	378fc <McTRS80::refreshDisplay()+0x48>
   37924:	e3a05000 	mov	r5, #0
   37928:	e5943008 	ldr	r3, [r4, #8]
   3792c:	e59f0028 	ldr	r0, [pc, #40]	; 3795c <McTRS80::refreshDisplay()+0xa8>
   37930:	e2842e4e 	add	r2, r4, #1248	; 0x4e0
   37934:	e3a01b0e 	mov	r1, #14336	; 0x3800
   37938:	e58d5000 	str	r5, [sp]
   3793c:	e0830000 	add	r0, r3, r0
   37940:	e2822005 	add	r2, r2, #5
   37944:	e3a03c01 	mov	r3, #256	; 0x100
   37948:	ebfff19d 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3794c:	e5c455e5 	strb	r5, [r4, #1509]	; 0x5e5
   37950:	e28ddb01 	add	sp, sp, #1024	; 0x400
   37954:	e28dd00c 	add	sp, sp, #12
   37958:	e8bd8030 	pop	{r4, r5, pc}
   3795c:	001006c8 	.word	0x001006c8

00037960 <McTRS80::handleWD1771DiskController(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   37960:	e12fff1e 	bx	lr

00037964 <DisplayBase::write(unsigned long, unsigned long, unsigned long)>:
   37964:	e12fff1e 	bx	lr

00037968 <McBase::setMonitorIORQEnabled(bool)>:
   37968:	e5c010a8 	strb	r1, [r0, #168]	; 0xa8
   3796c:	e12fff1e 	bx	lr

00037970 <McBase::setMonitorMREQEnabled(bool)>:
   37970:	e5c010a9 	strb	r1, [r0, #169]	; 0xa9
   37974:	e12fff1e 	bx	lr

00037978 <McBase::getDisplay()>:
   37978:	e59000e0 	ldr	r0, [r0, #224]	; 0xe0
   3797c:	e12fff1e 	bx	lr

00037980 <McBase::informClockFreqHz(unsigned long)>:
   37980:	e12fff1e 	bx	lr

00037984 <McTerminal::enableMachine()>:
   37984:	e12fff1e 	bx	lr

00037988 <McTerminal::busActionActiveCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE)>:
   37988:	e3510001 	cmp	r1, #1
   3798c:	03530000 	cmpeq	r3, #0
   37990:	03a02001 	moveq	r2, #1
   37994:	03a03000 	moveq	r3, #0
   37998:	02800a61 	addeq	r0, r0, #397312	; 0x61000
   3799c:	05c02b85 	strbeq	r2, [r0, #2949]	; 0xb85
   379a0:	05c03b86 	strbeq	r3, [r0, #2950]	; 0xb86
   379a4:	e12fff1e 	bx	lr

000379a8 <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)>:
   379a8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   379ac:	e24dd094 	sub	sp, sp, #148	; 0x94
   379b0:	e1a06002 	mov	r6, r2
   379b4:	e1a05003 	mov	r5, r3
   379b8:	e59f009c 	ldr	r0, [pc, #156]	; 37a5c <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0xb4>
   379bc:	e3a03064 	mov	r3, #100	; 0x64
   379c0:	e28d2028 	add	r2, sp, #40	; 0x28
   379c4:	e1a04001 	mov	r4, r1
   379c8:	ebffd9f0 	bl	2e190 <jsonGetValueForKey>
   379cc:	e2507000 	subs	r7, r0, #0
   379d0:	1a000002 	bne	379e0 <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x38>
   379d4:	e1a00007 	mov	r0, r7
   379d8:	e28dd094 	add	sp, sp, #148	; 0x94
   379dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   379e0:	e59f1078 	ldr	r1, [pc, #120]	; 37a60 <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0xb8>
   379e4:	e28d0028 	add	r0, sp, #40	; 0x28
   379e8:	ebffca6d 	bl	2a3a4 <strstr>
   379ec:	e1a01004 	mov	r1, r4
   379f0:	e3a0301e 	mov	r3, #30
   379f4:	e59f0068 	ldr	r0, [pc, #104]	; 37a64 <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0xbc>
   379f8:	e28d2008 	add	r2, sp, #8
   379fc:	ebffd9e3 	bl	2e190 <jsonGetValueForKey>
   37a00:	e2504000 	subs	r4, r0, #0
   37a04:	01a03004 	moveq	r3, r4
   37a08:	1a00000c 	bne	37a40 <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x98>
   37a0c:	e3a01004 	mov	r1, #4
   37a10:	e59f2050 	ldr	r2, [pc, #80]	; 37a68 <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0xc0>
   37a14:	e59f0050 	ldr	r0, [pc, #80]	; 37a6c <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0xc4>
   37a18:	e58d5000 	str	r5, [sp]
   37a1c:	ebffdcf9 	bl	2ee08 <LogWrite>
   37a20:	e59d00a8 	ldr	r0, [sp, #168]	; 0xa8
   37a24:	e1a03005 	mov	r3, r5
   37a28:	e1a02006 	mov	r2, r6
   37a2c:	e1a01004 	mov	r1, r4
   37a30:	ebfff0d5 	bl	33d8c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   37a34:	e1a00007 	mov	r0, r7
   37a38:	e28dd094 	add	sp, sp, #148	; 0x94
   37a3c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   37a40:	e3a02010 	mov	r2, #16
   37a44:	e3a01000 	mov	r1, #0
   37a48:	e28d0008 	add	r0, sp, #8
   37a4c:	ebffcaa4 	bl	2a4e4 <strtoul>
   37a50:	e6ff3070 	uxth	r3, r0
   37a54:	e1a04003 	mov	r4, r3
   37a58:	eaffffeb 	b	37a0c <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x64>
   37a5c:	00047dfc 	.word	0x00047dfc
   37a60:	00040680 	.word	0x00040680
   37a64:	00048c5c 	.word	0x00048c5c
   37a68:	00048c68 	.word	0x00048c68
   37a6c:	00048d0c 	.word	0x00048d0c

00037a70 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   37a70:	e92d4010 	push	{r4, lr}
   37a74:	e2804a61 	add	r4, r0, #397312	; 0x61000
   37a78:	e5d4cb84 	ldrb	ip, [r4, #2948]	; 0xb84
   37a7c:	e35c0000 	cmp	ip, #0
   37a80:	e59dc008 	ldr	ip, [sp, #8]
   37a84:	08bd8010 	popeq	{r4, pc}
   37a88:	e203e018 	and	lr, r3, #24
   37a8c:	e35e0008 	cmp	lr, #8
   37a90:	18bd8010 	popne	{r4, pc}
   37a94:	e201e0c0 	and	lr, r1, #192	; 0xc0
   37a98:	e35e0080 	cmp	lr, #128	; 0x80
   37a9c:	18bd8010 	popne	{r4, pc}
   37aa0:	e3130001 	tst	r3, #1
   37aa4:	1a00000d 	bne	37ae0 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x70>
   37aa8:	e3130002 	tst	r3, #2
   37aac:	08bd8010 	popeq	{r4, pc}
   37ab0:	e2113001 	ands	r3, r1, #1
   37ab4:	1a00003e 	bne	37bb4 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x144>
   37ab8:	e1a013a2 	lsr	r1, r2, #7
   37abc:	e2022003 	and	r2, r2, #3
   37ac0:	e2011001 	and	r1, r1, #1
   37ac4:	e3520003 	cmp	r2, #3
   37ac8:	e5c41b87 	strb	r1, [r4, #2951]	; 0xb87
   37acc:	0a000040 	beq	37bd4 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x164>
   37ad0:	e5d42b86 	ldrb	r2, [r4, #2950]	; 0xb86
   37ad4:	e3520000 	cmp	r2, #0
   37ad8:	15c43b86 	strbne	r3, [r4, #2950]	; 0xb86
   37adc:	e8bd8010 	pop	{r4, pc}
   37ae0:	e3110001 	tst	r1, #1
   37ae4:	1a00000b 	bne	37b18 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0xa8>
   37ae8:	e5943b8c 	ldr	r3, [r4, #2956]	; 0xb8c
   37aec:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   37af0:	e1530002 	cmp	r3, r2
   37af4:	13a03003 	movne	r3, #3
   37af8:	03a03002 	moveq	r3, #2
   37afc:	e58c3000 	str	r3, [ip]
   37b00:	e5d42b85 	ldrb	r2, [r4, #2949]	; 0xb85
   37b04:	e3520000 	cmp	r2, #0
   37b08:	0a000025 	beq	37ba4 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x134>
   37b0c:	e3833030 	orr	r3, r3, #48	; 0x30
   37b10:	e58c3000 	str	r3, [ip]
   37b14:	e8bd8010 	pop	{r4, pc}
   37b18:	e3a01000 	mov	r1, #0
   37b1c:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   37b20:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   37b24:	e58c1000 	str	r1, [ip]
   37b28:	e1520003 	cmp	r2, r3
   37b2c:	0a000019 	beq	37b98 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x128>
   37b30:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   37b34:	e59fe0a8 	ldr	lr, [pc, #168]	; 37be4 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x174>
   37b38:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   37b3c:	e0802002 	add	r2, r0, r2
   37b40:	e7d2200e 	ldrb	r2, [r2, lr]
   37b44:	e2833001 	add	r3, r3, #1
   37b48:	e58c2000 	str	r2, [ip]
   37b4c:	e5843b90 	str	r3, [r4, #2960]	; 0xb90
   37b50:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   37b54:	e5943b94 	ldr	r3, [r4, #2964]	; 0xb94
   37b58:	e1520003 	cmp	r2, r3
   37b5c:	e5d43b87 	ldrb	r3, [r4, #2951]	; 0xb87
   37b60:	25841b90 	strcs	r1, [r4, #2960]	; 0xb90
   37b64:	e3530000 	cmp	r3, #0
   37b68:	0a00000a 	beq	37b98 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x128>
   37b6c:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   37b70:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   37b74:	e1520003 	cmp	r2, r3
   37b78:	0a000006 	beq	37b98 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x128>
   37b7c:	e5903004 	ldr	r3, [r0, #4]
   37b80:	e59f0060 	ldr	r0, [pc, #96]	; 37be8 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x178>
   37b84:	e5932008 	ldr	r2, [r3, #8]
   37b88:	e593100c 	ldr	r1, [r3, #12]
   37b8c:	e0820000 	add	r0, r2, r0
   37b90:	e3e02000 	mvn	r2, #0
   37b94:	ebffe716 	bl	317f4 <BusSocketManager::reqIRQ(unsigned long, int)>
   37b98:	e3a03000 	mov	r3, #0
   37b9c:	e5c43b85 	strb	r3, [r4, #2949]	; 0xb85
   37ba0:	e8bd8010 	pop	{r4, pc}
   37ba4:	e5d43b86 	ldrb	r3, [r4, #2950]	; 0xb86
   37ba8:	e3530000 	cmp	r3, #0
   37bac:	158c2000 	strne	r2, [ip]
   37bb0:	e8bd8010 	pop	{r4, pc}
   37bb4:	e5940b88 	ldr	r0, [r4, #2952]	; 0xb88
   37bb8:	e3500000 	cmp	r0, #0
   37bbc:	08bd8010 	popeq	{r4, pc}
   37bc0:	e5903000 	ldr	r3, [r0]
   37bc4:	e1a01002 	mov	r1, r2
   37bc8:	e8bd4010 	pop	{r4, lr}
   37bcc:	e593300c 	ldr	r3, [r3, #12]
   37bd0:	e12fff13 	bx	r3
   37bd4:	e3a02001 	mov	r2, #1
   37bd8:	e5c43b85 	strb	r3, [r4, #2949]	; 0xb85
   37bdc:	e5c42b86 	strb	r2, [r4, #2950]	; 0xb86
   37be0:	e8bd8010 	pop	{r4, pc}
   37be4:	00061b98 	.word	0x00061b98
   37be8:	00100504 	.word	0x00100504

00037bec <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)>:
   37bec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37bf0:	e3530000 	cmp	r3, #0
   37bf4:	e24dd014 	sub	sp, sp, #20
   37bf8:	e1a09000 	mov	r9, r0
   37bfc:	e1a06001 	mov	r6, r1
   37c00:	e58d2004 	str	r2, [sp, #4]
   37c04:	0a000010 	beq	37c4c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x60>
   37c08:	e1a03000 	mov	r3, r0
   37c0c:	e3e01000 	mvn	r1, #0
   37c10:	e2802bc3 	add	r2, r0, #199680	; 0x30c00
   37c14:	e2822d05 	add	r2, r2, #320	; 0x140
   37c18:	e5c310e7 	strb	r1, [r3, #231]	; 0xe7
   37c1c:	e2833004 	add	r3, r3, #4
   37c20:	e1520003 	cmp	r2, r3
   37c24:	1afffffb 	bne	37c18 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x2c>
   37c28:	e3a03000 	mov	r3, #0
   37c2c:	e3e00000 	mvn	r0, #0
   37c30:	e59f2144 	ldr	r2, [pc, #324]	; 37d7c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x190>
   37c34:	e59f1144 	ldr	r1, [pc, #324]	; 37d80 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x194>
   37c38:	e0892002 	add	r2, r9, r2
   37c3c:	e7c20103 	strb	r0, [r2, r3, lsl #2]
   37c40:	e2833001 	add	r3, r3, #1
   37c44:	e1530001 	cmp	r3, r1
   37c48:	1afffffb 	bne	37c3c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x50>
   37c4c:	e59d3004 	ldr	r3, [sp, #4]
   37c50:	e3530009 	cmp	r3, #9
   37c54:	83a05000 	movhi	r5, #0
   37c58:	93a05001 	movls	r5, #1
   37c5c:	e3560000 	cmp	r6, #0
   37c60:	03a05001 	moveq	r5, #1
   37c64:	e3550000 	cmp	r5, #0
   37c68:	1a00003f 	bne	37d6c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x180>
   37c6c:	e2897a61 	add	r7, r9, #397312	; 0x61000
   37c70:	e5973b88 	ldr	r3, [r7, #2952]	; 0xb88
   37c74:	e593300c 	ldr	r3, [r3, #12]
   37c78:	e5c63000 	strb	r3, [r6]
   37c7c:	e5973b88 	ldr	r3, [r7, #2952]	; 0xb88
   37c80:	e5933010 	ldr	r3, [r3, #16]
   37c84:	e5c63001 	strb	r3, [r6, #1]
   37c88:	e5973b88 	ldr	r3, [r7, #2952]	; 0xb88
   37c8c:	e5932010 	ldr	r2, [r3, #16]
   37c90:	e3520000 	cmp	r2, #0
   37c94:	13a02002 	movne	r2, #2
   37c98:	0a000033 	beq	37d6c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x180>
   37c9c:	e593c00c 	ldr	ip, [r3, #12]
   37ca0:	e35c0000 	cmp	ip, #0
   37ca4:	0a000027 	beq	37d48 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x15c>
   37ca8:	e3a04000 	mov	r4, #0
   37cac:	e02c4c95 	mla	ip, r5, ip, r4
   37cb0:	e5931008 	ldr	r1, [r3, #8]
   37cb4:	e28cacc3 	add	sl, ip, #49920	; 0xc300
   37cb8:	e15c0001 	cmp	ip, r1
   37cbc:	35933004 	ldrcc	r3, [r3, #4]
   37cc0:	2283b028 	addcs	fp, r3, #40	; 0x28
   37cc4:	3083b10c 	addcc	fp, r3, ip, lsl #2
   37cc8:	e28a3089 	add	r3, sl, #137	; 0x89
   37ccc:	e7990103 	ldr	r0, [r9, r3, lsl #2]
   37cd0:	e59b1000 	ldr	r1, [fp]
   37cd4:	e2828006 	add	r8, r2, #6
   37cd8:	e1500001 	cmp	r0, r1
   37cdc:	e0860002 	add	r0, r6, r2
   37ce0:	0a000013 	beq	37d34 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x148>
   37ce4:	e59d3004 	ldr	r3, [sp, #4]
   37ce8:	e1530008 	cmp	r3, r8
   37cec:	3a000019 	bcc	37d58 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x16c>
   37cf0:	e5cd5009 	strb	r5, [sp, #9]
   37cf4:	e5cd4008 	strb	r4, [sp, #8]
   37cf8:	e5db1000 	ldrb	r1, [fp]
   37cfc:	e3a02006 	mov	r2, #6
   37d00:	e5cd100a 	strb	r1, [sp, #10]
   37d04:	e5dbc001 	ldrb	ip, [fp, #1]
   37d08:	e28d1008 	add	r1, sp, #8
   37d0c:	e5cdc00b 	strb	ip, [sp, #11]
   37d10:	e5dbc002 	ldrb	ip, [fp, #2]
   37d14:	e5cdc00c 	strb	ip, [sp, #12]
   37d18:	e5dbc003 	ldrb	ip, [fp, #3]
   37d1c:	e5cdc00d 	strb	ip, [sp, #13]
   37d20:	ebffcac2 	bl	2a830 <memcpy>
   37d24:	e1a02008 	mov	r2, r8
   37d28:	e59b3000 	ldr	r3, [fp]
   37d2c:	e089c10a 	add	ip, r9, sl, lsl #2
   37d30:	e58c3224 	str	r3, [ip, #548]	; 0x224
   37d34:	e5973b88 	ldr	r3, [r7, #2952]	; 0xb88
   37d38:	e2844001 	add	r4, r4, #1
   37d3c:	e593c00c 	ldr	ip, [r3, #12]
   37d40:	e15c0004 	cmp	ip, r4
   37d44:	8affffd8 	bhi	37cac <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0xc0>
   37d48:	e5931010 	ldr	r1, [r3, #16]
   37d4c:	e2855001 	add	r5, r5, #1
   37d50:	e1510005 	cmp	r1, r5
   37d54:	8affffd0 	bhi	37c9c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0xb0>
   37d58:	e3520002 	cmp	r2, #2
   37d5c:	0a000002 	beq	37d6c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x180>
   37d60:	e1a00002 	mov	r0, r2
   37d64:	e28dd014 	add	sp, sp, #20
   37d68:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37d6c:	e3a02000 	mov	r2, #0
   37d70:	e1a00002 	mov	r0, r2
   37d74:	e28dd014 	add	sp, sp, #20
   37d78:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37d7c:	00030e27 	.word	0x00030e27
   37d80:	0000c350 	.word	0x0000c350

00037d84 <McTerminal::refreshDisplay()>:
   37d84:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37d88:	e5903000 	ldr	r3, [r0]
   37d8c:	e59f244c 	ldr	r2, [pc, #1100]	; 381e0 <McTerminal::refreshDisplay()+0x45c>
   37d90:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   37d94:	e1a07000 	mov	r7, r0
   37d98:	e1530002 	cmp	r3, r2
   37d9c:	e24ddffb 	sub	sp, sp, #1004	; 0x3ec
   37da0:	1a0000ba 	bne	38090 <McTerminal::refreshDisplay()+0x30c>
   37da4:	e59080e0 	ldr	r8, [r0, #224]	; 0xe0
   37da8:	e3580000 	cmp	r8, #0
   37dac:	0a000068 	beq	37f54 <McTerminal::refreshDisplay()+0x1d0>
   37db0:	e5970004 	ldr	r0, [r7, #4]
   37db4:	ebfffc7a 	bl	36fa4 <McManager::hostSerialNumChAvailable()>
   37db8:	e3500000 	cmp	r0, #0
   37dbc:	1a000066 	bne	37f5c <McTerminal::refreshDisplay()+0x1d8>
   37dc0:	e287aa61 	add	sl, r7, #397312	; 0x61000
   37dc4:	e59a0b88 	ldr	r0, [sl, #2952]	; 0xb88
   37dc8:	e3500000 	cmp	r0, #0
   37dcc:	0a000060 	beq	37f54 <McTerminal::refreshDisplay()+0x1d0>
   37dd0:	e5903000 	ldr	r3, [r0]
   37dd4:	e59f2408 	ldr	r2, [pc, #1032]	; 381e4 <McTerminal::refreshDisplay()+0x460>
   37dd8:	e5933014 	ldr	r3, [r3, #20]
   37ddc:	e1530002 	cmp	r3, r2
   37de0:	1a0000c9 	bne	3810c <McTerminal::refreshDisplay()+0x388>
   37de4:	e5d0001c 	ldrb	r0, [r0, #28]
   37de8:	e3500000 	cmp	r0, #0
   37dec:	0a000095 	beq	38048 <McTerminal::refreshDisplay()+0x2c4>
   37df0:	e5da3b6c 	ldrb	r3, [sl, #2924]	; 0xb6c
   37df4:	e3530000 	cmp	r3, #0
   37df8:	1a0000a7 	bne	3809c <McTerminal::refreshDisplay()+0x318>
   37dfc:	e59a4b88 	ldr	r4, [sl, #2952]	; 0xb88
   37e00:	e5943010 	ldr	r3, [r4, #16]
   37e04:	e3530000 	cmp	r3, #0
   37e08:	0a00008f 	beq	3804c <McTerminal::refreshDisplay()+0x2c8>
   37e0c:	e3a0b000 	mov	fp, #0
   37e10:	e594300c 	ldr	r3, [r4, #12]
   37e14:	e3530000 	cmp	r3, #0
   37e18:	0a00006a 	beq	37fc8 <McTerminal::refreshDisplay()+0x244>
   37e1c:	e3a05000 	mov	r5, #0
   37e20:	ea000011 	b	37e6c <McTerminal::refreshDisplay()+0xe8>
   37e24:	e1520001 	cmp	r2, r1
   37e28:	1a0000a5 	bne	380c4 <McTerminal::refreshDisplay()+0x340>
   37e2c:	e5932020 	ldr	r2, [r3, #32]
   37e30:	e59f13b0 	ldr	r1, [pc, #944]	; 381e8 <McTerminal::refreshDisplay()+0x464>
   37e34:	e1520001 	cmp	r2, r1
   37e38:	1a0000a9 	bne	380e4 <McTerminal::refreshDisplay()+0x360>
   37e3c:	e5939028 	ldr	r9, [r3, #40]	; 0x28
   37e40:	e59f33a4 	ldr	r3, [pc, #932]	; 381ec <McTerminal::refreshDisplay()+0x468>
   37e44:	e1590003 	cmp	r9, r3
   37e48:	1a000026 	bne	37ee8 <McTerminal::refreshDisplay()+0x164>
   37e4c:	e5942000 	ldr	r2, [r4]
   37e50:	e0873106 	add	r3, r7, r6, lsl #2
   37e54:	e58320e4 	str	r2, [r3, #228]	; 0xe4
   37e58:	e59a4b88 	ldr	r4, [sl, #2952]	; 0xb88
   37e5c:	e2855001 	add	r5, r5, #1
   37e60:	e594300c 	ldr	r3, [r4, #12]
   37e64:	e1530005 	cmp	r3, r5
   37e68:	9a000056 	bls	37fc8 <McTerminal::refreshDisplay()+0x244>
   37e6c:	e026539b 	mla	r6, fp, r3, r5
   37e70:	e5943008 	ldr	r3, [r4, #8]
   37e74:	e1560003 	cmp	r6, r3
   37e78:	35944004 	ldrcc	r4, [r4, #4]
   37e7c:	22844028 	addcs	r4, r4, #40	; 0x28
   37e80:	30844106 	addcc	r4, r4, r6, lsl #2
   37e84:	e2863039 	add	r3, r6, #57	; 0x39
   37e88:	e7972103 	ldr	r2, [r7, r3, lsl #2]
   37e8c:	e5943000 	ldr	r3, [r4]
   37e90:	e1520003 	cmp	r2, r3
   37e94:	0affffef 	beq	37e58 <McTerminal::refreshDisplay()+0xd4>
   37e98:	e5d43003 	ldrb	r3, [r4, #3]
   37e9c:	e59f134c 	ldr	r1, [pc, #844]	; 381f0 <McTerminal::refreshDisplay()+0x46c>
   37ea0:	e3130010 	tst	r3, #16
   37ea4:	e5983000 	ldr	r3, [r8]
   37ea8:	e593201c 	ldr	r2, [r3, #28]
   37eac:	1affffdc 	bne	37e24 <McTerminal::refreshDisplay()+0xa0>
   37eb0:	e1520001 	cmp	r2, r1
   37eb4:	1a00008f 	bne	380f8 <McTerminal::refreshDisplay()+0x374>
   37eb8:	e5932020 	ldr	r2, [r3, #32]
   37ebc:	e59f1324 	ldr	r1, [pc, #804]	; 381e8 <McTerminal::refreshDisplay()+0x464>
   37ec0:	e1520001 	cmp	r2, r1
   37ec4:	0affffdc 	beq	37e3c <McTerminal::refreshDisplay()+0xb8>
   37ec8:	e1a00008 	mov	r0, r8
   37ecc:	e1d410d2 	ldrsb	r1, [r4, #2]
   37ed0:	e12fff32 	blx	r2
   37ed4:	e5983000 	ldr	r3, [r8]
   37ed8:	e5939028 	ldr	r9, [r3, #40]	; 0x28
   37edc:	e59f3308 	ldr	r3, [pc, #776]	; 381ec <McTerminal::refreshDisplay()+0x468>
   37ee0:	e1590003 	cmp	r9, r3
   37ee4:	0affffd8 	beq	37e4c <McTerminal::refreshDisplay()+0xc8>
   37ee8:	e1a0200b 	mov	r2, fp
   37eec:	e1a01005 	mov	r1, r5
   37ef0:	e1a00008 	mov	r0, r8
   37ef4:	e5d43000 	ldrb	r3, [r4]
   37ef8:	e12fff39 	blx	r9
   37efc:	eaffffd2 	b	37e4c <McTerminal::refreshDisplay()+0xc8>
   37f00:	ebffd7bb 	bl	2ddf4 <micros>
   37f04:	e59a3b68 	ldr	r3, [sl, #2920]	; 0xb68
   37f08:	e59a1b64 	ldr	r1, [sl, #2916]	; 0xb64
   37f0c:	e0632283 	rsb	r2, r3, r3, lsl #5
   37f10:	e0832102 	add	r2, r3, r2, lsl #2
   37f14:	e1a02182 	lsl	r2, r2, #3
   37f18:	ebffd7d3 	bl	2de6c <isTimeout>
   37f1c:	e3500000 	cmp	r0, #0
   37f20:	0a00000b 	beq	37f54 <McTerminal::refreshDisplay()+0x1d0>
   37f24:	e5dacb6c 	ldrb	ip, [sl, #2924]	; 0xb6c
   37f28:	e35c0000 	cmp	ip, #0
   37f2c:	0a000078 	beq	38114 <McTerminal::refreshDisplay()+0x390>
   37f30:	e5982000 	ldr	r2, [r8]
   37f34:	e59f32b0 	ldr	r3, [pc, #688]	; 381ec <McTerminal::refreshDisplay()+0x468>
   37f38:	e5924028 	ldr	r4, [r2, #40]	; 0x28
   37f3c:	e1540003 	cmp	r4, r3
   37f40:	1a00009f 	bne	381c4 <McTerminal::refreshDisplay()+0x440>
   37f44:	e22cc001 	eor	ip, ip, #1
   37f48:	e5cacb6c 	strb	ip, [sl, #2924]	; 0xb6c
   37f4c:	ebffd7a8 	bl	2ddf4 <micros>
   37f50:	e58a0b64 	str	r0, [sl, #2916]	; 0xb64
   37f54:	e28ddffb 	add	sp, sp, #1004	; 0x3ec
   37f58:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37f5c:	e3500ffa 	cmp	r0, #1000	; 0x3e8
   37f60:	b1a02000 	movlt	r2, r0
   37f64:	a3a02ffa 	movge	r2, #1000	; 0x3e8
   37f68:	e1a0100d 	mov	r1, sp
   37f6c:	e5970004 	ldr	r0, [r7, #4]
   37f70:	ebfffc0e 	bl	36fb0 <McManager::hostSerialReadChars(unsigned char*, unsigned long)>
   37f74:	e2505000 	subs	r5, r0, #0
   37f78:	0affff90 	beq	37dc0 <McTerminal::refreshDisplay()+0x3c>
   37f7c:	e1a0400d 	mov	r4, sp
   37f80:	e287aa61 	add	sl, r7, #397312	; 0x61000
   37f84:	e59a0b88 	ldr	r0, [sl, #2952]	; 0xb88
   37f88:	e0845005 	add	r5, r4, r5
   37f8c:	ea000007 	b	37fb0 <McTerminal::refreshDisplay()+0x22c>
   37f90:	e5903000 	ldr	r3, [r0]
   37f94:	e5d41000 	ldrb	r1, [r4]
   37f98:	e593300c 	ldr	r3, [r3, #12]
   37f9c:	e12fff33 	blx	r3
   37fa0:	e59a0b88 	ldr	r0, [sl, #2952]	; 0xb88
   37fa4:	e2844001 	add	r4, r4, #1
   37fa8:	e1550004 	cmp	r5, r4
   37fac:	0affff85 	beq	37dc8 <McTerminal::refreshDisplay()+0x44>
   37fb0:	e3500000 	cmp	r0, #0
   37fb4:	1afffff5 	bne	37f90 <McTerminal::refreshDisplay()+0x20c>
   37fb8:	e2844001 	add	r4, r4, #1
   37fbc:	e1540005 	cmp	r4, r5
   37fc0:	1afffff7 	bne	37fa4 <McTerminal::refreshDisplay()+0x220>
   37fc4:	eaffffe2 	b	37f54 <McTerminal::refreshDisplay()+0x1d0>
   37fc8:	e5943010 	ldr	r3, [r4, #16]
   37fcc:	e28bb001 	add	fp, fp, #1
   37fd0:	e153000b 	cmp	r3, fp
   37fd4:	8affff8d 	bhi	37e10 <McTerminal::refreshDisplay()+0x8c>
   37fd8:	e5da3b6c 	ldrb	r3, [sl, #2924]	; 0xb6c
   37fdc:	e3530000 	cmp	r3, #0
   37fe0:	0a000018 	beq	38048 <McTerminal::refreshDisplay()+0x2c4>
   37fe4:	e5983000 	ldr	r3, [r8]
   37fe8:	e59f61fc 	ldr	r6, [pc, #508]	; 381ec <McTerminal::refreshDisplay()+0x468>
   37fec:	e5935028 	ldr	r5, [r3, #40]	; 0x28
   37ff0:	e284e014 	add	lr, r4, #20
   37ff4:	e28aceb7 	add	ip, sl, #2928	; 0xb70
   37ff8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   37ffc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   38000:	e59e3000 	ldr	r3, [lr]
   38004:	e58c3000 	str	r3, [ip]
   38008:	e594300c 	ldr	r3, [r4, #12]
   3800c:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   38010:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   38014:	e5940008 	ldr	r0, [r4, #8]
   38018:	e0231293 	mla	r3, r3, r2, r1
   3801c:	e1530000 	cmp	r3, r0
   38020:	35944004 	ldrcc	r4, [r4, #4]
   38024:	22844028 	addcs	r4, r4, #40	; 0x28
   38028:	30844103 	addcc	r4, r4, r3, lsl #2
   3802c:	e5d43000 	ldrb	r3, [r4]
   38030:	e1550006 	cmp	r5, r6
   38034:	e58a3b80 	str	r3, [sl, #2944]	; 0xb80
   38038:	0a000002 	beq	38048 <McTerminal::refreshDisplay()+0x2c4>
   3803c:	e1a00008 	mov	r0, r8
   38040:	e59a3b7c 	ldr	r3, [sl, #2940]	; 0xb7c
   38044:	e12fff35 	blx	r5
   38048:	e59a4b88 	ldr	r4, [sl, #2952]	; 0xb88
   3804c:	e3a02000 	mov	r2, #0
   38050:	e5d4301d 	ldrb	r3, [r4, #29]
   38054:	e5c4201c 	strb	r2, [r4, #28]
   38058:	e1530002 	cmp	r3, r2
   3805c:	0affffa7 	beq	37f00 <McTerminal::refreshDisplay()+0x17c>
   38060:	e5da3b6c 	ldrb	r3, [sl, #2924]	; 0xb6c
   38064:	e3530000 	cmp	r3, #0
   38068:	0a000004 	beq	38080 <McTerminal::refreshDisplay()+0x2fc>
   3806c:	e5982000 	ldr	r2, [r8]
   38070:	e59f3174 	ldr	r3, [pc, #372]	; 381ec <McTerminal::refreshDisplay()+0x468>
   38074:	e5924028 	ldr	r4, [r2, #40]	; 0x28
   38078:	e1540003 	cmp	r4, r3
   3807c:	1a000040 	bne	38184 <McTerminal::refreshDisplay()+0x400>
   38080:	e3a03000 	mov	r3, #0
   38084:	e5ca3b6c 	strb	r3, [sl, #2924]	; 0xb6c
   38088:	e28ddffb 	add	sp, sp, #1004	; 0x3ec
   3808c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38090:	e12fff33 	blx	r3
   38094:	e1a08000 	mov	r8, r0
   38098:	eaffff42 	b	37da8 <McTerminal::refreshDisplay()+0x24>
   3809c:	e5983000 	ldr	r3, [r8]
   380a0:	e59f6144 	ldr	r6, [pc, #324]	; 381ec <McTerminal::refreshDisplay()+0x468>
   380a4:	e5935028 	ldr	r5, [r3, #40]	; 0x28
   380a8:	e1550006 	cmp	r5, r6
   380ac:	1a00003a 	bne	3819c <McTerminal::refreshDisplay()+0x418>
   380b0:	e59a4b88 	ldr	r4, [sl, #2952]	; 0xb88
   380b4:	e5943010 	ldr	r3, [r4, #16]
   380b8:	e3530000 	cmp	r3, #0
   380bc:	1affff52 	bne	37e0c <McTerminal::refreshDisplay()+0x88>
   380c0:	eaffffca 	b	37ff0 <McTerminal::refreshDisplay()+0x26c>
   380c4:	e1d410d2 	ldrsb	r1, [r4, #2]
   380c8:	e1a00008 	mov	r0, r8
   380cc:	e12fff32 	blx	r2
   380d0:	e5983000 	ldr	r3, [r8]
   380d4:	e59f110c 	ldr	r1, [pc, #268]	; 381e8 <McTerminal::refreshDisplay()+0x464>
   380d8:	e5932020 	ldr	r2, [r3, #32]
   380dc:	e1520001 	cmp	r2, r1
   380e0:	0affff55 	beq	37e3c <McTerminal::refreshDisplay()+0xb8>
   380e4:	e1a00008 	mov	r0, r8
   380e8:	e1d410d1 	ldrsb	r1, [r4, #1]
   380ec:	e12fff32 	blx	r2
   380f0:	e5983000 	ldr	r3, [r8]
   380f4:	eaffff50 	b	37e3c <McTerminal::refreshDisplay()+0xb8>
   380f8:	e1a00008 	mov	r0, r8
   380fc:	e1d410d1 	ldrsb	r1, [r4, #1]
   38100:	e12fff32 	blx	r2
   38104:	e5983000 	ldr	r3, [r8]
   38108:	eaffff6a 	b	37eb8 <McTerminal::refreshDisplay()+0x134>
   3810c:	e12fff33 	blx	r3
   38110:	eaffff34 	b	37de8 <McTerminal::refreshDisplay()+0x64>
   38114:	e59aeb88 	ldr	lr, [sl, #2952]	; 0xb88
   38118:	e28a4eb7 	add	r4, sl, #2928	; 0xb70
   3811c:	e28e5014 	add	r5, lr, #20
   38120:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
   38124:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
   38128:	e5953000 	ldr	r3, [r5]
   3812c:	e5843000 	str	r3, [r4]
   38130:	e59e300c 	ldr	r3, [lr, #12]
   38134:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   38138:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   3813c:	e59e0008 	ldr	r0, [lr, #8]
   38140:	e0231293 	mla	r3, r3, r2, r1
   38144:	e1530000 	cmp	r3, r0
   38148:	359ee004 	ldrcc	lr, [lr, #4]
   3814c:	228ee028 	addcs	lr, lr, #40	; 0x28
   38150:	308ee103 	addcc	lr, lr, r3, lsl #2
   38154:	e5983000 	ldr	r3, [r8]
   38158:	e59f008c 	ldr	r0, [pc, #140]	; 381ec <McTerminal::refreshDisplay()+0x468>
   3815c:	e5934028 	ldr	r4, [r3, #40]	; 0x28
   38160:	e5de3000 	ldrb	r3, [lr]
   38164:	e1540000 	cmp	r4, r0
   38168:	e58a3b80 	str	r3, [sl, #2944]	; 0xb80
   3816c:	0affff74 	beq	37f44 <McTerminal::refreshDisplay()+0x1c0>
   38170:	e1a00008 	mov	r0, r8
   38174:	e59a3b7c 	ldr	r3, [sl, #2940]	; 0xb7c
   38178:	e12fff34 	blx	r4
   3817c:	e5dacb6c 	ldrb	ip, [sl, #2924]	; 0xb6c
   38180:	eaffff6f 	b	37f44 <McTerminal::refreshDisplay()+0x1c0>
   38184:	e1a00008 	mov	r0, r8
   38188:	e59a3b80 	ldr	r3, [sl, #2944]	; 0xb80
   3818c:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   38190:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   38194:	e12fff34 	blx	r4
   38198:	eaffffb8 	b	38080 <McTerminal::refreshDisplay()+0x2fc>
   3819c:	e59a3b80 	ldr	r3, [sl, #2944]	; 0xb80
   381a0:	e1a00008 	mov	r0, r8
   381a4:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   381a8:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   381ac:	e12fff35 	blx	r5
   381b0:	e59a4b88 	ldr	r4, [sl, #2952]	; 0xb88
   381b4:	e5943010 	ldr	r3, [r4, #16]
   381b8:	e3530000 	cmp	r3, #0
   381bc:	1affff12 	bne	37e0c <McTerminal::refreshDisplay()+0x88>
   381c0:	eaffff84 	b	37fd8 <McTerminal::refreshDisplay()+0x254>
   381c4:	e1a00008 	mov	r0, r8
   381c8:	e59a3b80 	ldr	r3, [sl, #2944]	; 0xb80
   381cc:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   381d0:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   381d4:	e12fff34 	blx	r4
   381d8:	e5dacb6c 	ldrb	ip, [sl, #2924]	; 0xb6c
   381dc:	eaffff58 	b	37f44 <McTerminal::refreshDisplay()+0x1c0>
   381e0:	00037978 	.word	0x00037978
   381e4:	000386fc 	.word	0x000386fc
   381e8:	000386f8 	.word	0x000386f8
   381ec:	00037964 	.word	0x00037964
   381f0:	000386f4 	.word	0x000386f4

000381f4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>:
   381f4:	e92d4070 	push	{r4, r5, r6, lr}
   381f8:	e1a04001 	mov	r4, r1
   381fc:	e1a05000 	mov	r5, r0
   38200:	e59f109c 	ldr	r1, [pc, #156]	; 382a4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb0>
   38204:	e59f009c 	ldr	r0, [pc, #156]	; 382a8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb4>
   38208:	ebffc831 	bl	2a2d4 <strcpy>
   3820c:	e5d43000 	ldrb	r3, [r4]
   38210:	e353007f 	cmp	r3, #127	; 0x7f
   38214:	da000009 	ble	38240 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x4c>
   38218:	e5d43001 	ldrb	r3, [r4, #1]
   3821c:	e3530000 	cmp	r3, #0
   38220:	1a000006 	bne	38240 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x4c>
   38224:	e3e03000 	mvn	r3, #0
   38228:	e59f1078 	ldr	r1, [pc, #120]	; 382a8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb4>
   3822c:	e3150011 	tst	r5, #17
   38230:	1203301f 	andne	r3, r3, #31
   38234:	e59f006c 	ldr	r0, [pc, #108]	; 382a8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb4>
   38238:	e5c13000 	strb	r3, [r1]
   3823c:	e8bd8070 	pop	{r4, r5, r6, pc}
   38240:	e3530001 	cmp	r3, #1
   38244:	da000014 	ble	3829c <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xa8>
   38248:	e3130080 	tst	r3, #128	; 0x80
   3824c:	1afffff4 	bne	38224 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x30>
   38250:	e3150022 	tst	r5, #34	; 0x22
   38254:	13a02001 	movne	r2, #1
   38258:	03a02000 	moveq	r2, #0
   3825c:	e59f1044 	ldr	r1, [pc, #68]	; 382a8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb4>
   38260:	e3150044 	tst	r5, #68	; 0x44
   38264:	e591c004 	ldr	ip, [r1, #4]
   38268:	12822002 	addne	r2, r2, #2
   3826c:	e083338c 	add	r3, r3, ip, lsl #7
   38270:	e0823103 	add	r3, r2, r3, lsl #2
   38274:	e59f0030 	ldr	r0, [pc, #48]	; 382ac <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb8>
   38278:	e1a03083 	lsl	r3, r3, #1
   3827c:	e19030b3 	ldrh	r3, [r0, r3]
   38280:	e2432c01 	sub	r2, r3, #256	; 0x100
   38284:	e3520032 	cmp	r2, #50	; 0x32
   38288:	86af3073 	sxtbhi	r3, r3
   3828c:	8affffe6 	bhi	3822c <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x38>
   38290:	e59f3018 	ldr	r3, [pc, #24]	; 382b0 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xbc>
   38294:	e7930102 	ldr	r0, [r3, r2, lsl #2]
   38298:	e8bd8070 	pop	{r4, r5, r6, pc}
   3829c:	e59f0010 	ldr	r0, [pc, #16]	; 382b4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xc0>
   382a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   382a4:	000407a0 	.word	0x000407a0
   382a8:	0005fae4 	.word	0x0005fae4
   382ac:	0004eee0 	.word	0x0004eee0
   382b0:	000506e0 	.word	0x000506e0
   382b4:	000493c8 	.word	0x000493c8

000382b8 <McTerminal::keyHandler(unsigned char, unsigned char const*)>:
   382b8:	e1a03001 	mov	r3, r1
   382bc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   382c0:	e1a01002 	mov	r1, r2
   382c4:	e1a07000 	mov	r7, r0
   382c8:	e1a00003 	mov	r0, r3
   382cc:	ebffffc8 	bl	381f4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>
   382d0:	e1a06000 	mov	r6, r0
   382d4:	ebffc75a 	bl	2a044 <strlen>
   382d8:	e3500000 	cmp	r0, #0
   382dc:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   382e0:	e2874a61 	add	r4, r7, #397312	; 0x61000
   382e4:	e5d43b84 	ldrb	r3, [r4, #2948]	; 0xb84
   382e8:	e3530000 	cmp	r3, #0
   382ec:	0a00002a 	beq	3839c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0xe4>
   382f0:	e3a05000 	mov	r5, #0
   382f4:	e59f80c8 	ldr	r8, [pc, #200]	; 383c4 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x10c>
   382f8:	e59f90c8 	ldr	r9, [pc, #200]	; 383c8 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x110>
   382fc:	ea000012 	b	3834c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x94>
   38300:	e2430001 	sub	r0, r3, #1
   38304:	e3520000 	cmp	r2, #0
   38308:	01500001 	cmpeq	r0, r1
   3830c:	0a00000d 	beq	38348 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   38310:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   38314:	e7d61005 	ldrb	r1, [r6, r5]
   38318:	e0872002 	add	r2, r7, r2
   3831c:	e7c21008 	strb	r1, [r2, r8]
   38320:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   38324:	e2822001 	add	r2, r2, #1
   38328:	e5842b8c 	str	r2, [r4, #2956]	; 0xb8c
   3832c:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   38330:	e1520003 	cmp	r2, r3
   38334:	23a03000 	movcs	r3, #0
   38338:	25843b8c 	strcs	r3, [r4, #2956]	; 0xb8c
   3833c:	e5d43b87 	ldrb	r3, [r4, #2951]	; 0xb87
   38340:	e3530000 	cmp	r3, #0
   38344:	1a000018 	bne	383ac <McTerminal::keyHandler(unsigned char, unsigned char const*)+0xf4>
   38348:	e2855001 	add	r5, r5, #1
   3834c:	e1a00006 	mov	r0, r6
   38350:	ebffc73b 	bl	2a044 <strlen>
   38354:	e1500005 	cmp	r0, r5
   38358:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   3835c:	e5943b94 	ldr	r3, [r4, #2964]	; 0xb94
   38360:	e3530000 	cmp	r3, #0
   38364:	0afffff7 	beq	38348 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   38368:	e5941b8c 	ldr	r1, [r4, #2956]	; 0xb8c
   3836c:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   38370:	e1510002 	cmp	r1, r2
   38374:	0affffe5 	beq	38310 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x58>
   38378:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   3837c:	e5941b8c 	ldr	r1, [r4, #2956]	; 0xb8c
   38380:	e1520001 	cmp	r2, r1
   38384:	e5941b8c 	ldr	r1, [r4, #2956]	; 0xb8c
   38388:	3affffdc 	bcc	38300 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x48>
   3838c:	e0422001 	sub	r2, r2, r1
   38390:	e3520001 	cmp	r2, #1
   38394:	9affffeb 	bls	38348 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   38398:	eaffffdc 	b	38310 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x58>
   3839c:	e1a01006 	mov	r1, r6
   383a0:	e5970004 	ldr	r0, [r7, #4]
   383a4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   383a8:	eafffb22 	b	37038 <McManager::sendKeyStrToTargetStatic(char const*)>
   383ac:	e5973004 	ldr	r3, [r7, #4]
   383b0:	e3e02000 	mvn	r2, #0
   383b4:	e1c300d8 	ldrd	r0, [r3, #8]
   383b8:	e0800009 	add	r0, r0, r9
   383bc:	ebffe50c 	bl	317f4 <BusSocketManager::reqIRQ(unsigned long, int)>
   383c0:	eaffffe0 	b	38348 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   383c4:	00061b98 	.word	0x00061b98
   383c8:	00100504 	.word	0x00100504

000383cc <McTerminal::invalidateScreenCaches(bool)>:
   383cc:	e3510000 	cmp	r1, #0
   383d0:	0a000007 	beq	383f4 <McTerminal::invalidateScreenCaches(bool)+0x28>
   383d4:	e1a03000 	mov	r3, r0
   383d8:	e3e01000 	mvn	r1, #0
   383dc:	e2802bc3 	add	r2, r0, #199680	; 0x30c00
   383e0:	e2822d05 	add	r2, r2, #320	; 0x140
   383e4:	e5c310e7 	strb	r1, [r3, #231]	; 0xe7
   383e8:	e2833004 	add	r3, r3, #4
   383ec:	e1520003 	cmp	r2, r3
   383f0:	1afffffb 	bne	383e4 <McTerminal::invalidateScreenCaches(bool)+0x18>
   383f4:	e3a03000 	mov	r3, #0
   383f8:	e3e0c000 	mvn	ip, #0
   383fc:	e59f2018 	ldr	r2, [pc, #24]	; 3841c <McTerminal::invalidateScreenCaches(bool)+0x50>
   38400:	e59f1018 	ldr	r1, [pc, #24]	; 38420 <McTerminal::invalidateScreenCaches(bool)+0x54>
   38404:	e0802002 	add	r2, r0, r2
   38408:	e7c2c103 	strb	ip, [r2, r3, lsl #2]
   3840c:	e2833001 	add	r3, r3, #1
   38410:	e1530001 	cmp	r3, r1
   38414:	1afffffb 	bne	38408 <McTerminal::invalidateScreenCaches(bool)+0x3c>
   38418:	e12fff1e 	bx	lr
   3841c:	00030e27 	.word	0x00030e27
   38420:	0000c350 	.word	0x0000c350

00038424 <McTerminal::setupMachine(char const*, char const*)>:
   38424:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   38428:	e1a04000 	mov	r4, r0
   3842c:	e24dd0d4 	sub	sp, sp, #212	; 0xd4
   38430:	e1a05002 	mov	r5, r2
   38434:	eb00047a 	bl	39624 <McBase::setupMachine(char const*, char const*)>
   38438:	e3a01001 	mov	r1, #1
   3843c:	e3a02000 	mov	r2, #0
   38440:	e5943000 	ldr	r3, [r4]
   38444:	e59f8134 	ldr	r8, [pc, #308]	; 38580 <McTerminal::setupMachine(char const*, char const*)+0x15c>
   38448:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   3844c:	e2846a61 	add	r6, r4, #397312	; 0x61000
   38450:	e1530008 	cmp	r3, r8
   38454:	e5c62b87 	strb	r2, [r6, #2951]	; 0xb87
   38458:	e5c61b84 	strb	r1, [r6, #2948]	; 0xb84
   3845c:	e1a07000 	mov	r7, r0
   38460:	05c410a8 	strbeq	r1, [r4, #168]	; 0xa8
   38464:	1a000040 	bne	3856c <McTerminal::setupMachine(char const*, char const*)+0x148>
   38468:	e3a03064 	mov	r3, #100	; 0x64
   3846c:	e1a01005 	mov	r1, r5
   38470:	e59f010c 	ldr	r0, [pc, #268]	; 38584 <McTerminal::setupMachine(char const*, char const*)+0x160>
   38474:	e28d2008 	add	r2, sp, #8
   38478:	ebffd744 	bl	2e190 <jsonGetValueForKey>
   3847c:	e3500000 	cmp	r0, #0
   38480:	1a000017 	bne	384e4 <McTerminal::setupMachine(char const*, char const*)+0xc0>
   38484:	e1a01005 	mov	r1, r5
   38488:	e3a03064 	mov	r3, #100	; 0x64
   3848c:	e59f00f4 	ldr	r0, [pc, #244]	; 38588 <McTerminal::setupMachine(char const*, char const*)+0x164>
   38490:	e28d206c 	add	r2, sp, #108	; 0x6c
   38494:	ebffd73d 	bl	2e190 <jsonGetValueForKey>
   38498:	e3500000 	cmp	r0, #0
   3849c:	1a000021 	bne	38528 <McTerminal::setupMachine(char const*, char const*)+0x104>
   384a0:	e59f30e4 	ldr	r3, [pc, #228]	; 3858c <McTerminal::setupMachine(char const*, char const*)+0x168>
   384a4:	e5934004 	ldr	r4, [r3, #4]
   384a8:	e59f20e0 	ldr	r2, [pc, #224]	; 38590 <McTerminal::setupMachine(char const*, char const*)+0x16c>
   384ac:	e5d60b84 	ldrb	r0, [r6, #2948]	; 0xb84
   384b0:	e7922104 	ldr	r2, [r2, r4, lsl #2]
   384b4:	e59f10d8 	ldr	r1, [pc, #216]	; 38594 <McTerminal::setupMachine(char const*, char const*)+0x170>
   384b8:	e3500000 	cmp	r0, #0
   384bc:	e59f30d4 	ldr	r3, [pc, #212]	; 38598 <McTerminal::setupMachine(char const*, char const*)+0x174>
   384c0:	e58d2000 	str	r2, [sp]
   384c4:	01a03001 	moveq	r3, r1
   384c8:	e59f20cc 	ldr	r2, [pc, #204]	; 3859c <McTerminal::setupMachine(char const*, char const*)+0x178>
   384cc:	e3a01004 	mov	r1, #4
   384d0:	e59f00c8 	ldr	r0, [pc, #200]	; 385a0 <McTerminal::setupMachine(char const*, char const*)+0x17c>
   384d4:	ebffda4b 	bl	2ee08 <LogWrite>
   384d8:	e1a00007 	mov	r0, r7
   384dc:	e28dd0d4 	add	sp, sp, #212	; 0xd4
   384e0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   384e4:	e3a01000 	mov	r1, #0
   384e8:	e3a0200a 	mov	r2, #10
   384ec:	e28d0008 	add	r0, sp, #8
   384f0:	ebffc7fb 	bl	2a4e4 <strtoul>
   384f4:	e2501000 	subs	r1, r0, #0
   384f8:	13a03001 	movne	r3, #1
   384fc:	03a03000 	moveq	r3, #0
   38500:	e5c63b84 	strb	r3, [r6, #2948]	; 0xb84
   38504:	1affffde 	bne	38484 <McTerminal::setupMachine(char const*, char const*)+0x60>
   38508:	e5943000 	ldr	r3, [r4]
   3850c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   38510:	e1530008 	cmp	r3, r8
   38514:	05c410a8 	strbeq	r1, [r4, #168]	; 0xa8
   38518:	0affffd9 	beq	38484 <McTerminal::setupMachine(char const*, char const*)+0x60>
   3851c:	e1a00004 	mov	r0, r4
   38520:	e12fff33 	blx	r3
   38524:	eaffffd6 	b	38484 <McTerminal::setupMachine(char const*, char const*)+0x60>
   38528:	e59f905c 	ldr	r9, [pc, #92]	; 3858c <McTerminal::setupMachine(char const*, char const*)+0x168>
   3852c:	e3a04000 	mov	r4, #0
   38530:	e59f506c 	ldr	r5, [pc, #108]	; 385a4 <McTerminal::setupMachine(char const*, char const*)+0x180>
   38534:	e2898004 	add	r8, r9, #4
   38538:	ea000005 	b	38554 <McTerminal::setupMachine(char const*, char const*)+0x130>
   3853c:	e5b51004 	ldr	r1, [r5, #4]!
   38540:	e28d006c 	add	r0, sp, #108	; 0x6c
   38544:	ebffc6e5 	bl	2a0e0 <strcasecmp>
   38548:	e3500000 	cmp	r0, #0
   3854c:	0a000009 	beq	38578 <McTerminal::setupMachine(char const*, char const*)+0x154>
   38550:	e2844001 	add	r4, r4, #1
   38554:	e1a00008 	mov	r0, r8
   38558:	eb001cbb 	bl	3f84c <KeyConversion::getNumTypes()>
   3855c:	e1500004 	cmp	r0, r4
   38560:	8afffff5 	bhi	3853c <McTerminal::setupMachine(char const*, char const*)+0x118>
   38564:	e5994004 	ldr	r4, [r9, #4]
   38568:	eaffffce 	b	384a8 <McTerminal::setupMachine(char const*, char const*)+0x84>
   3856c:	e1a00004 	mov	r0, r4
   38570:	e12fff33 	blx	r3
   38574:	eaffffbb 	b	38468 <McTerminal::setupMachine(char const*, char const*)+0x44>
   38578:	e5894004 	str	r4, [r9, #4]
   3857c:	eaffffc9 	b	384a8 <McTerminal::setupMachine(char const*, char const*)+0x84>
   38580:	00037968 	.word	0x00037968
   38584:	00048d18 	.word	0x00048d18
   38588:	00048d24 	.word	0x00048d24
   3858c:	0005fae4 	.word	0x0005fae4
   38590:	000507ac 	.word	0x000507ac
   38594:	00048870 	.word	0x00048870
   38598:	00048d14 	.word	0x00048d14
   3859c:	00048d34 	.word	0x00048d34
   385a0:	00048d0c 	.word	0x00048d0c
   385a4:	000507a8 	.word	0x000507a8

000385a8 <McTerminal::McTerminal(McManager&, BusControl&)>:
   385a8:	e3a03002 	mov	r3, #2
   385ac:	e92d4070 	push	{r4, r5, r6, lr}
   385b0:	e1a04000 	mov	r4, r0
   385b4:	e24dd008 	sub	sp, sp, #8
   385b8:	e58d3000 	str	r3, [sp]
   385bc:	e59f3110 	ldr	r3, [pc, #272]	; 386d4 <McTerminal::McTerminal(McManager&, BusControl&)+0x12c>
   385c0:	eb00049e 	bl	39840 <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)>
   385c4:	e1a03004 	mov	r3, r4
   385c8:	e3a0c020 	mov	ip, #32
   385cc:	e3a0000f 	mov	r0, #15
   385d0:	e3a02000 	mov	r2, #0
   385d4:	e59fe0fc 	ldr	lr, [pc, #252]	; 386d8 <McTerminal::McTerminal(McManager&, BusControl&)+0x130>
   385d8:	e2841bc3 	add	r1, r4, #199680	; 0x30c00
   385dc:	e483e0e4 	str	lr, [r3], #228	; 0xe4
   385e0:	e2811f89 	add	r1, r1, #548	; 0x224
   385e4:	e5c3c000 	strb	ip, [r3]
   385e8:	e5c30001 	strb	r0, [r3, #1]
   385ec:	e5c32002 	strb	r2, [r3, #2]
   385f0:	e5c32003 	strb	r2, [r3, #3]
   385f4:	e2833004 	add	r3, r3, #4
   385f8:	e1530001 	cmp	r3, r1
   385fc:	1afffff8 	bne	385e4 <McTerminal::McTerminal(McManager&, BusControl&)+0x3c>
   38600:	e3a00020 	mov	r0, #32
   38604:	e3a0c00f 	mov	ip, #15
   38608:	e3a02000 	mov	r2, #0
   3860c:	e59f10c8 	ldr	r1, [pc, #200]	; 386dc <McTerminal::McTerminal(McManager&, BusControl&)+0x134>
   38610:	e0841001 	add	r1, r4, r1
   38614:	e5c30000 	strb	r0, [r3]
   38618:	e5c3c001 	strb	ip, [r3, #1]
   3861c:	e5c32002 	strb	r2, [r3, #2]
   38620:	e5c32003 	strb	r2, [r3, #3]
   38624:	e2833004 	add	r3, r3, #4
   38628:	e1510003 	cmp	r1, r3
   3862c:	1afffff8 	bne	38614 <McTerminal::McTerminal(McManager&, BusControl&)+0x6c>
   38630:	e3a0105f 	mov	r1, #95	; 0x5f
   38634:	e2845a61 	add	r5, r4, #397312	; 0x61000
   38638:	e59f30a0 	ldr	r3, [pc, #160]	; 386e0 <McTerminal::McTerminal(McManager&, BusControl&)+0x138>
   3863c:	e285ceb7 	add	ip, r5, #2928	; 0xb70
   38640:	e5852b70 	str	r2, [r5, #2928]	; 0xb70
   38644:	e5852b74 	str	r2, [r5, #2932]	; 0xb74
   38648:	e1cc20b8 	strh	r2, [ip, #8]
   3864c:	e5852b8c 	str	r2, [r5, #2956]	; 0xb8c
   38650:	e5853b94 	str	r3, [r5, #2964]	; 0xb94
   38654:	e5c52b7a 	strb	r2, [r5, #2938]	; 0xb7a
   38658:	e5852b90 	str	r2, [r5, #2960]	; 0xb90
   3865c:	e5851b7c 	str	r1, [r5, #2940]	; 0xb7c
   38660:	e5850b80 	str	r0, [r5, #2944]	; 0xb80
   38664:	e59f0078 	ldr	r0, [pc, #120]	; 386e4 <McTerminal::McTerminal(McManager&, BusControl&)+0x13c>
   38668:	ebffca56 	bl	2afc8 <operator new(unsigned int)>
   3866c:	e1a06000 	mov	r6, r0
   38670:	eb0005f3 	bl	39e44 <TermAnsi::TermAnsi()>
   38674:	e1a00006 	mov	r0, r6
   38678:	e3a02019 	mov	r2, #25
   3867c:	e3a01050 	mov	r1, #80	; 0x50
   38680:	e5856b88 	str	r6, [r5, #2952]	; 0xb88
   38684:	eb000d39 	bl	3bb70 <TermAnsi::init(unsigned long, unsigned long)>
   38688:	e3a03000 	mov	r3, #0
   3868c:	e3e00000 	mvn	r0, #0
   38690:	e59f2050 	ldr	r2, [pc, #80]	; 386e8 <McTerminal::McTerminal(McManager&, BusControl&)+0x140>
   38694:	e59f1050 	ldr	r1, [pc, #80]	; 386ec <McTerminal::McTerminal(McManager&, BusControl&)+0x144>
   38698:	e0842002 	add	r2, r4, r2
   3869c:	e7c20103 	strb	r0, [r2, r3, lsl #2]
   386a0:	e2833001 	add	r3, r3, #1
   386a4:	e1530001 	cmp	r3, r1
   386a8:	1afffffb 	bne	3869c <McTerminal::McTerminal(McManager&, BusControl&)+0xf4>
   386ac:	e3a03000 	mov	r3, #0
   386b0:	e3a01f7d 	mov	r1, #500	; 0x1f4
   386b4:	e1a00004 	mov	r0, r4
   386b8:	e59f2030 	ldr	r2, [pc, #48]	; 386f0 <McTerminal::McTerminal(McManager&, BusControl&)+0x148>
   386bc:	e5853b64 	str	r3, [r5, #2916]	; 0xb64
   386c0:	e5c53b6c 	strb	r3, [r5, #2924]	; 0xb6c
   386c4:	e5851b68 	str	r1, [r5, #2920]	; 0xb68
   386c8:	e5852b84 	str	r2, [r5, #2948]	; 0xb84
   386cc:	e28dd008 	add	sp, sp, #8
   386d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   386d4:	0004a4fc 	.word	0x0004a4fc
   386d8:	00048d68 	.word	0x00048d68
   386dc:	00061b64 	.word	0x00061b64
   386e0:	00001388 	.word	0x00001388
   386e4:	000008ac 	.word	0x000008ac
   386e8:	00030e27 	.word	0x00030e27
   386ec:	0000c350 	.word	0x0000c350
   386f0:	00000101 	.word	0x00000101

000386f4 <DisplayBase::foreground(DISPLAY_FX_COLOUR)>:
   386f4:	e12fff1e 	bx	lr

000386f8 <DisplayBase::background(DISPLAY_FX_COLOUR)>:
   386f8:	e12fff1e 	bx	lr

000386fc <TermEmu::hasChanged()>:
   386fc:	e5d0001c 	ldrb	r0, [r0, #28]
   38700:	e12fff1e 	bx	lr

00038704 <_GLOBAL__sub_I__ZN10McTerminal14_keyConversionE>:
   38704:	e3a02000 	mov	r2, #0
   38708:	e59f3004 	ldr	r3, [pc, #4]	; 38714 <_GLOBAL__sub_I__ZN10McTerminal14_keyConversionE+0x10>
   3870c:	e5832004 	str	r2, [r3, #4]
   38710:	e12fff1e 	bx	lr
   38714:	0005fae4 	.word	0x0005fae4

00038718 <McZXSpectrum::enableMachine()>:
   38718:	e3a03000 	mov	r3, #0
   3871c:	e2802a01 	add	r2, r0, #4096	; 0x1000
   38720:	e2800a03 	add	r0, r0, #12288	; 0x3000
   38724:	e5c23be4 	strb	r3, [r2, #3044]	; 0xbe4
   38728:	e5c036f4 	strb	r3, [r0, #1780]	; 0x6f4
   3872c:	e5823be8 	str	r3, [r2, #3048]	; 0xbe8
   38730:	e5823bec 	str	r3, [r2, #3052]	; 0xbec
   38734:	e5823bf0 	str	r3, [r2, #3056]	; 0xbf0
   38738:	e58036f8 	str	r3, [r0, #1784]	; 0x6f8
   3873c:	e58036fc 	str	r3, [r0, #1788]	; 0x6fc
   38740:	e12fff1e 	bx	lr

00038744 <McZXSpectrum::disableMachine()>:
   38744:	e12fff1e 	bx	lr

00038748 <McZXSpectrum::busActionActiveCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE)>:
   38748:	e12fff1e 	bx	lr

0003874c <McZXSpectrum::machineHeartbeat()>:
   3874c:	e5903004 	ldr	r3, [r0, #4]
   38750:	e59f0010 	ldr	r0, [pc, #16]	; 38768 <McZXSpectrum::machineHeartbeat()+0x1c>
   38754:	e5932008 	ldr	r2, [r3, #8]
   38758:	e593100c 	ldr	r1, [r3, #12]
   3875c:	e0820000 	add	r0, r2, r0
   38760:	e3e02000 	mvn	r2, #0
   38764:	eaffe422 	b	317f4 <BusSocketManager::reqIRQ(unsigned long, int)>
   38768:	00100504 	.word	0x00100504

0003876c <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)>:
   3876c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38770:	e3e0c000 	mvn	ip, #0
   38774:	e3a05000 	mov	r5, #0
   38778:	e211e022 	ands	lr, r1, #34	; 0x22
   3877c:	13a04001 	movne	r4, #1
   38780:	03a04000 	moveq	r4, #0
   38784:	e2809a03 	add	r9, r0, #12288	; 0x3000
   38788:	e5c9c72c 	strb	ip, [r9, #1836]	; 0x72c
   3878c:	e5c9c72d 	strb	ip, [r9, #1837]	; 0x72d
   38790:	e5c9c72e 	strb	ip, [r9, #1838]	; 0x72e
   38794:	e5c9c72f 	strb	ip, [r9, #1839]	; 0x72f
   38798:	e5c9c730 	strb	ip, [r9, #1840]	; 0x730
   3879c:	e5c9c731 	strb	ip, [r9, #1841]	; 0x731
   387a0:	e5c9c732 	strb	ip, [r9, #1842]	; 0x732
   387a4:	e5c9c733 	strb	ip, [r9, #1843]	; 0x733
   387a8:	e1a0c005 	mov	ip, r5
   387ac:	e24dd01c 	sub	sp, sp, #28
   387b0:	e2011011 	and	r1, r1, #17
   387b4:	e2423001 	sub	r3, r2, #1
   387b8:	e58d4004 	str	r4, [sp, #4]
   387bc:	e59f41a0 	ldr	r4, [pc, #416]	; 38964 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x1f8>
   387c0:	e58d1008 	str	r1, [sp, #8]
   387c4:	e58d3010 	str	r3, [sp, #16]
   387c8:	e2826005 	add	r6, r2, #5
   387cc:	e2891e73 	add	r1, r9, #1840	; 0x730
   387d0:	e5f32001 	ldrb	r2, [r3, #1]!
   387d4:	e352002a 	cmp	r2, #42	; 0x2a
   387d8:	03a0c001 	moveq	ip, #1
   387dc:	0a000007 	beq	38800 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x94>
   387e0:	e352002e 	cmp	r2, #46	; 0x2e
   387e4:	1a000005 	bne	38800 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x94>
   387e8:	e1d120b2 	ldrh	r2, [r1, #2]
   387ec:	e35e0000 	cmp	lr, #0
   387f0:	13c22f81 	bicne	r2, r2, #516	; 0x204
   387f4:	00022004 	andeq	r2, r2, r4
   387f8:	11c120b2 	strhne	r2, [r1, #2]
   387fc:	01c120b2 	strheq	r2, [r1, #2]
   38800:	e1530006 	cmp	r3, r6
   38804:	1afffff1 	bne	387d0 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x64>
   38808:	e3a07091 	mov	r7, #145	; 0x91
   3880c:	e280ac37 	add	sl, r0, #14080	; 0x3700
   38810:	e28ab02c 	add	fp, sl, #44	; 0x2c
   38814:	e59f514c 	ldr	r5, [pc, #332]	; 38968 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x1fc>
   38818:	e1a0800b 	mov	r8, fp
   3881c:	e58db014 	str	fp, [sp, #20]
   38820:	e59db010 	ldr	fp, [sp, #16]
   38824:	e58dc00c 	str	ip, [sp, #12]
   38828:	e28aa034 	add	sl, sl, #52	; 0x34
   3882c:	e285c010 	add	ip, r5, #16
   38830:	e1a0400b 	mov	r4, fp
   38834:	e3a0e0ff 	mov	lr, #255	; 0xff
   38838:	e1a03005 	mov	r3, r5
   3883c:	e1a01007 	mov	r1, r7
   38840:	e3a02001 	mov	r2, #1
   38844:	e5f40001 	ldrb	r0, [r4, #1]!
   38848:	ea000000 	b	38850 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0xe4>
   3884c:	e5b31004 	ldr	r1, [r3, #4]!
   38850:	e1500001 	cmp	r0, r1
   38854:	01cee002 	biceq	lr, lr, r2
   38858:	e153000c 	cmp	r3, ip
   3885c:	e1a02082 	lsl	r2, r2, #1
   38860:	1afffff9 	bne	3884c <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0xe0>
   38864:	e1540006 	cmp	r4, r6
   38868:	1afffff2 	bne	38838 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0xcc>
   3886c:	e5d83000 	ldrb	r3, [r8]
   38870:	e28cc014 	add	ip, ip, #20
   38874:	e00ee003 	and	lr, lr, r3
   38878:	e4c8e001 	strb	lr, [r8], #1
   3887c:	e158000a 	cmp	r8, sl
   38880:	15b57014 	ldrne	r7, [r5, #20]!
   38884:	1affffe9 	bne	38830 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0xc4>
   38888:	e59d3004 	ldr	r3, [sp, #4]
   3888c:	e59d200c 	ldr	r2, [sp, #12]
   38890:	e59db014 	ldr	fp, [sp, #20]
   38894:	e1933002 	orrs	r3, r3, r2
   38898:	0a000006 	beq	388b8 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x14c>
   3889c:	e5d9372c 	ldrb	r3, [r9, #1836]	; 0x72c
   388a0:	e3520000 	cmp	r2, #0
   388a4:	e3c33001 	bic	r3, r3, #1
   388a8:	e5c9372c 	strb	r3, [r9, #1836]	; 0x72c
   388ac:	15d93730 	ldrbne	r3, [r9, #1840]	; 0x730
   388b0:	13c33001 	bicne	r3, r3, #1
   388b4:	15c93730 	strbne	r3, [r9, #1840]	; 0x730
   388b8:	e59d3008 	ldr	r3, [sp, #8]
   388bc:	e599c798 	ldr	ip, [r9, #1944]	; 0x798
   388c0:	e3530000 	cmp	r3, #0
   388c4:	15d93733 	ldrbne	r3, [r9, #1843]	; 0x733
   388c8:	13c33002 	bicne	r3, r3, #2
   388cc:	15c93733 	strbne	r3, [r9, #1843]	; 0x733
   388d0:	e35c0009 	cmp	ip, #9
   388d4:	8a000005 	bhi	388f0 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x184>
   388d8:	e4db3001 	ldrb	r3, [fp], #1
   388dc:	e5db2007 	ldrb	r2, [fp, #7]
   388e0:	e1520003 	cmp	r2, r3
   388e4:	1a000003 	bne	388f8 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x18c>
   388e8:	e15b000a 	cmp	fp, sl
   388ec:	1afffff9 	bne	388d8 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x16c>
   388f0:	e28dd01c 	add	sp, sp, #28
   388f4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   388f8:	e5993794 	ldr	r3, [r9, #1940]	; 0x794
   388fc:	e59f2068 	ldr	r2, [pc, #104]	; 3896c <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x200>
   38900:	e2834001 	add	r4, r3, #1
   38904:	e0821492 	umull	r1, r2, r2, r4
   38908:	e0893183 	add	r3, r9, r3, lsl #3
   3890c:	e289ee72 	add	lr, r9, #1824	; 0x720
   38910:	e2833d1d 	add	r3, r3, #1856	; 0x740
   38914:	e28ee00c 	add	lr, lr, #12
   38918:	e2833004 	add	r3, r3, #4
   3891c:	e1a021a2 	lsr	r2, r2, #3
   38920:	e89e0003 	ldm	lr, {r0, r1}
   38924:	e0822102 	add	r2, r2, r2, lsl #2
   38928:	e8830003 	stm	r3, {r0, r1}
   3892c:	e0442082 	sub	r2, r4, r2, lsl #1
   38930:	e28cc001 	add	ip, ip, #1
   38934:	e2893e73 	add	r3, r9, #1840	; 0x730
   38938:	e5892794 	str	r2, [r9, #1940]	; 0x794
   3893c:	e589c798 	str	ip, [r9, #1944]	; 0x798
   38940:	e2833004 	add	r3, r3, #4
   38944:	e89e0003 	ldm	lr, {r0, r1}
   38948:	e8830003 	stm	r3, {r0, r1}
   3894c:	e3a01004 	mov	r1, #4
   38950:	e59f2018 	ldr	r2, [pc, #24]	; 38970 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x204>
   38954:	e59f0018 	ldr	r0, [pc, #24]	; 38974 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x208>
   38958:	e28dd01c 	add	sp, sp, #28
   3895c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38960:	eaffd928 	b	2ee08 <LogWrite>
   38964:	fffffdfd 	.word	0xfffffdfd
   38968:	00048e64 	.word	0x00048e64
   3896c:	cccccccd 	.word	0xcccccccd
   38970:	00048dd4 	.word	0x00048dd4
   38974:	00048dd8 	.word	0x00048dd8

00038978 <McZXSpectrum::refreshDisplay()>:
   38978:	e92d4010 	push	{r4, lr}
   3897c:	e3a03000 	mov	r3, #0
   38980:	e1a04000 	mov	r4, r0
   38984:	e5901008 	ldr	r1, [r0, #8]
   38988:	e59f0030 	ldr	r0, [pc, #48]	; 389c0 <McZXSpectrum::refreshDisplay()+0x48>
   3898c:	e24dd008 	sub	sp, sp, #8
   38990:	e28420e4 	add	r2, r4, #228	; 0xe4
   38994:	e58d3000 	str	r3, [sp]
   38998:	e0810000 	add	r0, r1, r0
   3899c:	e3a03c1b 	mov	r3, #6912	; 0x1b00
   389a0:	e3a01901 	mov	r1, #16384	; 0x4000
   389a4:	ebffed69 	bl	33f50 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   389a8:	e3500000 	cmp	r0, #0
   389ac:	03a03001 	moveq	r3, #1
   389b0:	02844a01 	addeq	r4, r4, #4096	; 0x1000
   389b4:	05c43be4 	strbeq	r3, [r4, #3044]	; 0xbe4
   389b8:	e28dd008 	add	sp, sp, #8
   389bc:	e8bd8010 	pop	{r4, pc}
   389c0:	001006c8 	.word	0x001006c8

000389c4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)>:
   389c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   389c8:	e24dd090 	sub	sp, sp, #144	; 0x90
   389cc:	e1a07002 	mov	r7, r2
   389d0:	e1a08003 	mov	r8, r3
   389d4:	e59f0194 	ldr	r0, [pc, #404]	; 38b70 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1ac>
   389d8:	e3a03064 	mov	r3, #100	; 0x64
   389dc:	e28d2028 	add	r2, sp, #40	; 0x28
   389e0:	e1a06001 	mov	r6, r1
   389e4:	ebffd5e9 	bl	2e190 <jsonGetValueForKey>
   389e8:	e2504000 	subs	r4, r0, #0
   389ec:	1a000002 	bne	389fc <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x38>
   389f0:	e1a00004 	mov	r0, r4
   389f4:	e28dd090 	add	sp, sp, #144	; 0x90
   389f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   389fc:	e59f1170 	ldr	r1, [pc, #368]	; 38b74 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1b0>
   38a00:	e28d0028 	add	r0, sp, #40	; 0x28
   38a04:	ebffc666 	bl	2a3a4 <strstr>
   38a08:	e3500000 	cmp	r0, #0
   38a0c:	e59f5164 	ldr	r5, [pc, #356]	; 38b78 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1b4>
   38a10:	11a05000 	movne	r5, r0
   38a14:	e59f1160 	ldr	r1, [pc, #352]	; 38b7c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1b8>
   38a18:	e1a00005 	mov	r0, r5
   38a1c:	ebffc5af 	bl	2a0e0 <strcasecmp>
   38a20:	e3500000 	cmp	r0, #0
   38a24:	1a00000f 	bne	38a68 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0xa4>
   38a28:	e28d0008 	add	r0, sp, #8
   38a2c:	eb000e00 	bl	3c234 <McZXSpectrumTZXFormat::McZXSpectrumTZXFormat()>
   38a30:	e1a03008 	mov	r3, r8
   38a34:	e3a01004 	mov	r1, #4
   38a38:	e59f2140 	ldr	r2, [pc, #320]	; 38b80 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1bc>
   38a3c:	e59f0140 	ldr	r0, [pc, #320]	; 38b84 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1c0>
   38a40:	ebffd8f0 	bl	2ee08 <LogWrite>
   38a44:	e88d0180 	stm	sp, {r7, r8}
   38a48:	e59d30a8 	ldr	r3, [sp, #168]	; 0xa8
   38a4c:	e59f2134 	ldr	r2, [pc, #308]	; 38b88 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1c4>
   38a50:	e59f1134 	ldr	r1, [pc, #308]	; 38b8c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1c8>
   38a54:	e28d0008 	add	r0, sp, #8
   38a58:	eb000efa 	bl	3c648 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>
   38a5c:	e1a00004 	mov	r0, r4
   38a60:	e28dd090 	add	sp, sp, #144	; 0x90
   38a64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   38a68:	e1a00005 	mov	r0, r5
   38a6c:	e59f111c 	ldr	r1, [pc, #284]	; 38b90 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1cc>
   38a70:	ebffc59a 	bl	2a0e0 <strcasecmp>
   38a74:	e3500000 	cmp	r0, #0
   38a78:	0a000012 	beq	38ac8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x104>
   38a7c:	e1a00005 	mov	r0, r5
   38a80:	e59f110c 	ldr	r1, [pc, #268]	; 38b94 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1d0>
   38a84:	ebffc595 	bl	2a0e0 <strcasecmp>
   38a88:	e3500000 	cmp	r0, #0
   38a8c:	1a00001d 	bne	38b08 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x144>
   38a90:	e28d0008 	add	r0, sp, #8
   38a94:	eb000d6a 	bl	3c044 <McZXSpectrumSNAFormat::McZXSpectrumSNAFormat()>
   38a98:	e1a03008 	mov	r3, r8
   38a9c:	e3a01004 	mov	r1, #4
   38aa0:	e59f20f0 	ldr	r2, [pc, #240]	; 38b98 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1d4>
   38aa4:	e59f00d8 	ldr	r0, [pc, #216]	; 38b84 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1c0>
   38aa8:	ebffd8d6 	bl	2ee08 <LogWrite>
   38aac:	e88d0180 	stm	sp, {r7, r8}
   38ab0:	e59d30a8 	ldr	r3, [sp, #168]	; 0xa8
   38ab4:	e59f20cc 	ldr	r2, [pc, #204]	; 38b88 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1c4>
   38ab8:	e59f10cc 	ldr	r1, [pc, #204]	; 38b8c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1c8>
   38abc:	e28d0008 	add	r0, sp, #8
   38ac0:	eb000d60 	bl	3c048 <McZXSpectrumSNAFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>
   38ac4:	eaffffc9 	b	389f0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x2c>
   38ac8:	e28d0008 	add	r0, sp, #8
   38acc:	eb000f51 	bl	3c818 <McZXSpectrumZ80Format::McZXSpectrumZ80Format()>
   38ad0:	e1a03008 	mov	r3, r8
   38ad4:	e3a01004 	mov	r1, #4
   38ad8:	e59f20bc 	ldr	r2, [pc, #188]	; 38b9c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1d8>
   38adc:	e59f00a0 	ldr	r0, [pc, #160]	; 38b84 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1c0>
   38ae0:	ebffd8c8 	bl	2ee08 <LogWrite>
   38ae4:	e88d0180 	stm	sp, {r7, r8}
   38ae8:	e59d30a8 	ldr	r3, [sp, #168]	; 0xa8
   38aec:	e59f2094 	ldr	r2, [pc, #148]	; 38b88 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1c4>
   38af0:	e59f1094 	ldr	r1, [pc, #148]	; 38b8c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1c8>
   38af4:	e28d0008 	add	r0, sp, #8
   38af8:	eb000f6b 	bl	3c8ac <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>
   38afc:	e1a00004 	mov	r0, r4
   38b00:	e28dd090 	add	sp, sp, #144	; 0x90
   38b04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   38b08:	e3a0301e 	mov	r3, #30
   38b0c:	e1a01006 	mov	r1, r6
   38b10:	e59f0088 	ldr	r0, [pc, #136]	; 38ba0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1dc>
   38b14:	e28d2008 	add	r2, sp, #8
   38b18:	ebffd59c 	bl	2e190 <jsonGetValueForKey>
   38b1c:	e2505000 	subs	r5, r0, #0
   38b20:	01a03005 	moveq	r3, r5
   38b24:	1a00000a 	bne	38b54 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x190>
   38b28:	e3a01004 	mov	r1, #4
   38b2c:	e59f2070 	ldr	r2, [pc, #112]	; 38ba4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1e0>
   38b30:	e59f004c 	ldr	r0, [pc, #76]	; 38b84 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x1c0>
   38b34:	e58d8000 	str	r8, [sp]
   38b38:	ebffd8b2 	bl	2ee08 <LogWrite>
   38b3c:	e1a03008 	mov	r3, r8
   38b40:	e1a02007 	mov	r2, r7
   38b44:	e1a01005 	mov	r1, r5
   38b48:	e59d00a8 	ldr	r0, [sp, #168]	; 0xa8
   38b4c:	ebffec8e 	bl	33d8c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   38b50:	eaffffa6 	b	389f0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x2c>
   38b54:	e3a02010 	mov	r2, #16
   38b58:	e3a01000 	mov	r1, #0
   38b5c:	e28d0008 	add	r0, sp, #8
   38b60:	ebffc65f 	bl	2a4e4 <strtoul>
   38b64:	e6ff3070 	uxth	r3, r0
   38b68:	e1a05003 	mov	r5, r3
   38b6c:	eaffffed 	b	38b28 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x164>
   38b70:	00047dfc 	.word	0x00047dfc
   38b74:	00040680 	.word	0x00040680
   38b78:	000493c8 	.word	0x000493c8
   38b7c:	00048ddc 	.word	0x00048ddc
   38b80:	00048de4 	.word	0x00048de4
   38b84:	00048e00 	.word	0x00048e00
   38b88:	00033ee8 	.word	0x00033ee8
   38b8c:	00033e58 	.word	0x00033e58
   38b90:	00048e0c 	.word	0x00048e0c
   38b94:	00048e30 	.word	0x00048e30
   38b98:	00048e38 	.word	0x00048e38
   38b9c:	00048e14 	.word	0x00048e14
   38ba0:	00048c5c 	.word	0x00048c5c
   38ba4:	00048c68 	.word	0x00048c68

00038ba8 <McZXSpectrum::canProcFileType(char const*)>:
   38ba8:	e92d4010 	push	{r4, lr}
   38bac:	e1a04001 	mov	r4, r1
   38bb0:	e59f1040 	ldr	r1, [pc, #64]	; 38bf8 <McZXSpectrum::canProcFileType(char const*)+0x50>
   38bb4:	e1a00004 	mov	r0, r4
   38bb8:	ebffc548 	bl	2a0e0 <strcasecmp>
   38bbc:	e3500000 	cmp	r0, #0
   38bc0:	1a000001 	bne	38bcc <McZXSpectrum::canProcFileType(char const*)+0x24>
   38bc4:	e3a00001 	mov	r0, #1
   38bc8:	e8bd8010 	pop	{r4, pc}
   38bcc:	e1a00004 	mov	r0, r4
   38bd0:	e59f1024 	ldr	r1, [pc, #36]	; 38bfc <McZXSpectrum::canProcFileType(char const*)+0x54>
   38bd4:	ebffc541 	bl	2a0e0 <strcasecmp>
   38bd8:	e3500000 	cmp	r0, #0
   38bdc:	0afffff8 	beq	38bc4 <McZXSpectrum::canProcFileType(char const*)+0x1c>
   38be0:	e1a00004 	mov	r0, r4
   38be4:	e59f1014 	ldr	r1, [pc, #20]	; 38c00 <McZXSpectrum::canProcFileType(char const*)+0x58>
   38be8:	ebffc53c 	bl	2a0e0 <strcasecmp>
   38bec:	e16f0f10 	clz	r0, r0
   38bf0:	e1a002a0 	lsr	r0, r0, #5
   38bf4:	e8bd8010 	pop	{r4, pc}
   38bf8:	00048e54 	.word	0x00048e54
   38bfc:	00048e58 	.word	0x00048e58
   38c00:	00048e5c 	.word	0x00048e5c

00038c04 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   38c04:	e2033009 	and	r3, r3, #9
   38c08:	e92d4010 	push	{r4, lr}
   38c0c:	e3530009 	cmp	r3, #9
   38c10:	e59de008 	ldr	lr, [sp, #8]
   38c14:	18bd8010 	popne	{r4, pc}
   38c18:	e3110001 	tst	r1, #1
   38c1c:	1a000010 	bne	38c64 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x60>
   38c20:	e3a0c0ff 	mov	ip, #255	; 0xff
   38c24:	e3a02c01 	mov	r2, #256	; 0x100
   38c28:	e2803c37 	add	r3, r0, #14080	; 0x3700
   38c2c:	e2800ddd 	add	r0, r0, #14144	; 0x3740
   38c30:	e58ec000 	str	ip, [lr]
   38c34:	e283303c 	add	r3, r3, #60	; 0x3c
   38c38:	e2800004 	add	r0, r0, #4
   38c3c:	e1110002 	tst	r1, r2
   38c40:	05d34000 	ldrbeq	r4, [r3]
   38c44:	059ec000 	ldreq	ip, [lr]
   38c48:	e2833001 	add	r3, r3, #1
   38c4c:	000cc004 	andeq	ip, ip, r4
   38c50:	058ec000 	streq	ip, [lr]
   38c54:	e1500003 	cmp	r0, r3
   38c58:	e1a02082 	lsl	r2, r2, #1
   38c5c:	1afffff6 	bne	38c3c <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x38>
   38c60:	e8bd8010 	pop	{r4, pc}
   38c64:	e6ef1071 	uxtb	r1, r1
   38c68:	e351001f 	cmp	r1, #31
   38c6c:	03a03000 	moveq	r3, #0
   38c70:	058e3000 	streq	r3, [lr]
   38c74:	e8bd8010 	pop	{r4, pc}

00038c78 <McZXSpectrum::McZXSpectrum(McManager&, BusControl&)>:
   38c78:	e3a03001 	mov	r3, #1
   38c7c:	e92d4010 	push	{r4, lr}
   38c80:	e24dd008 	sub	sp, sp, #8
   38c84:	e58d3000 	str	r3, [sp]
   38c88:	e59f30fc 	ldr	r3, [pc, #252]	; 38d8c <McZXSpectrum::McZXSpectrum(McManager&, BusControl&)+0x114>
   38c8c:	e1a04000 	mov	r4, r0
   38c90:	eb0002ea 	bl	39840 <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)>
   38c94:	e3e02000 	mvn	r2, #0
   38c98:	e1a00002 	mov	r0, r2
   38c9c:	e59fc0ec 	ldr	ip, [pc, #236]	; 38d90 <McZXSpectrum::McZXSpectrum(McManager&, BusControl&)+0x118>
   38ca0:	e2843a03 	add	r3, r4, #12288	; 0x3000
   38ca4:	e584c000 	str	ip, [r4]
   38ca8:	e2841ddd 	add	r1, r4, #14144	; 0x3740
   38cac:	e284cdde 	add	ip, r4, #14208	; 0x3780
   38cb0:	e5c3272c 	strb	r2, [r3, #1836]	; 0x72c
   38cb4:	e5c3272d 	strb	r2, [r3, #1837]	; 0x72d
   38cb8:	e5c3272e 	strb	r2, [r3, #1838]	; 0x72e
   38cbc:	e5c3272f 	strb	r2, [r3, #1839]	; 0x72f
   38cc0:	e5c32730 	strb	r2, [r3, #1840]	; 0x730
   38cc4:	e5c32731 	strb	r2, [r3, #1841]	; 0x731
   38cc8:	e5c32732 	strb	r2, [r3, #1842]	; 0x732
   38ccc:	e5c32733 	strb	r2, [r3, #1843]	; 0x733
   38cd0:	e5c32734 	strb	r2, [r3, #1844]	; 0x734
   38cd4:	e5c32735 	strb	r2, [r3, #1845]	; 0x735
   38cd8:	e5c32736 	strb	r2, [r3, #1846]	; 0x736
   38cdc:	e5c32737 	strb	r2, [r3, #1847]	; 0x737
   38ce0:	e5c32738 	strb	r2, [r3, #1848]	; 0x738
   38ce4:	e5c32739 	strb	r2, [r3, #1849]	; 0x739
   38ce8:	e5c3273a 	strb	r2, [r3, #1850]	; 0x73a
   38cec:	e5c3273b 	strb	r2, [r3, #1851]	; 0x73b
   38cf0:	e5c3273c 	strb	r2, [r3, #1852]	; 0x73c
   38cf4:	e5c3273d 	strb	r2, [r3, #1853]	; 0x73d
   38cf8:	e5c3273e 	strb	r2, [r3, #1854]	; 0x73e
   38cfc:	e5c3273f 	strb	r2, [r3, #1855]	; 0x73f
   38d00:	e5c32740 	strb	r2, [r3, #1856]	; 0x740
   38d04:	e5c32741 	strb	r2, [r3, #1857]	; 0x741
   38d08:	e5c32742 	strb	r2, [r3, #1858]	; 0x742
   38d0c:	e5c32743 	strb	r2, [r3, #1859]	; 0x743
   38d10:	e2811004 	add	r1, r1, #4
   38d14:	e28cc014 	add	ip, ip, #20
   38d18:	e5c10000 	strb	r0, [r1]
   38d1c:	e5c10001 	strb	r0, [r1, #1]
   38d20:	e5c10002 	strb	r0, [r1, #2]
   38d24:	e5c10003 	strb	r0, [r1, #3]
   38d28:	e5c10004 	strb	r0, [r1, #4]
   38d2c:	e5c10005 	strb	r0, [r1, #5]
   38d30:	e5c10006 	strb	r0, [r1, #6]
   38d34:	e5c10007 	strb	r0, [r1, #7]
   38d38:	e2811008 	add	r1, r1, #8
   38d3c:	e151000c 	cmp	r1, ip
   38d40:	1afffff4 	bne	38d18 <McZXSpectrum::McZXSpectrum(McManager&, BusControl&)+0xa0>
   38d44:	e3a02000 	mov	r2, #0
   38d48:	e3a0c001 	mov	ip, #1
   38d4c:	e1a00004 	mov	r0, r4
   38d50:	e2841a01 	add	r1, r4, #4096	; 0x1000
   38d54:	e5832794 	str	r2, [r3, #1940]	; 0x794
   38d58:	e5832798 	str	r2, [r3, #1944]	; 0x798
   38d5c:	e583279c 	str	r2, [r3, #1948]	; 0x79c
   38d60:	e5c12be4 	strb	r2, [r1, #3044]	; 0xbe4
   38d64:	e5c326f4 	strb	r2, [r3, #1780]	; 0x6f4
   38d68:	e5812be8 	str	r2, [r1, #3048]	; 0xbe8
   38d6c:	e5812bec 	str	r2, [r1, #3052]	; 0xbec
   38d70:	e5812bf0 	str	r2, [r1, #3056]	; 0xbf0
   38d74:	e58326f8 	str	r2, [r3, #1784]	; 0x6f8
   38d78:	e58326fc 	str	r2, [r3, #1788]	; 0x6fc
   38d7c:	e583c720 	str	ip, [r3, #1824]	; 0x720
   38d80:	e583c71c 	str	ip, [r3, #1820]	; 0x71c
   38d84:	e28dd008 	add	sp, sp, #8
   38d88:	e8bd8010 	pop	{r4, pc}
   38d8c:	0004a644 	.word	0x0004a644
   38d90:	00048f0c 	.word	0x00048f0c

00038d94 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)>:
   38d94:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38d98:	e5903000 	ldr	r3, [r0]
   38d9c:	e59fc52c 	ldr	ip, [pc, #1324]	; 392d0 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x53c>
   38da0:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   38da4:	e1a05000 	mov	r5, r0
   38da8:	e153000c 	cmp	r3, ip
   38dac:	e1a08001 	mov	r8, r1
   38db0:	e1a04002 	mov	r4, r2
   38db4:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   38db8:	1a0000a3 	bne	3904c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x2b8>
   38dbc:	e59070e0 	ldr	r7, [r0, #224]	; 0xe0
   38dc0:	e3540c1b 	cmp	r4, #6912	; 0x1b00
   38dc4:	23a02000 	movcs	r2, #0
   38dc8:	33a02001 	movcc	r2, #1
   38dcc:	e3570000 	cmp	r7, #0
   38dd0:	11a06002 	movne	r6, r2
   38dd4:	03a06001 	moveq	r6, #1
   38dd8:	e3560000 	cmp	r6, #0
   38ddc:	1a000006 	bne	38dfc <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x68>
   38de0:	e5953000 	ldr	r3, [r5]
   38de4:	e1a00005 	mov	r0, r5
   38de8:	e5933014 	ldr	r3, [r3, #20]
   38dec:	e12fff33 	blx	r3
   38df0:	e590307c 	ldr	r3, [r0, #124]	; 0x7c
   38df4:	e3530004 	cmp	r3, #4
   38df8:	0a000001 	beq	38e04 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x70>
   38dfc:	e28dd03c 	add	sp, sp, #60	; 0x3c
   38e00:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38e04:	e2854a03 	add	r4, r5, #12288	; 0x3000
   38e08:	e59436f8 	ldr	r3, [r4, #1784]	; 0x6f8
   38e0c:	e3530000 	cmp	r3, #0
   38e10:	0a00009a 	beq	39080 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x2ec>
   38e14:	e2857a01 	add	r7, r5, #4096	; 0x1000
   38e18:	e5971bec 	ldr	r1, [r7, #3052]	; 0xbec
   38e1c:	e5973be8 	ldr	r3, [r7, #3048]	; 0xbe8
   38e20:	e281c001 	add	ip, r1, #1
   38e24:	e587cbec 	str	ip, [r7, #3052]	; 0xbec
   38e28:	e594071c 	ldr	r0, [r4, #1820]	; 0x71c
   38e2c:	e58d7014 	str	r7, [sp, #20]
   38e30:	e15c0000 	cmp	ip, r0
   38e34:	2a000087 	bcs	39058 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x2c4>
   38e38:	e594e718 	ldr	lr, [r4, #1816]	; 0x718
   38e3c:	e5947714 	ldr	r7, [r4, #1812]	; 0x714
   38e40:	e00e019e 	mul	lr, lr, r1
   38e44:	e2812b06 	add	r2, r1, #6144	; 0x1800
   38e48:	e02ee397 	mla	lr, r7, r3, lr
   38e4c:	e0222093 	mla	r2, r3, r0, r2
   38e50:	e5d496f4 	ldrb	r9, [r4, #1780]	; 0x6f4
   38e54:	e7d87002 	ldrb	r7, [r8, r2]
   38e58:	e3590000 	cmp	r9, #0
   38e5c:	e58de008 	str	lr, [sp, #8]
   38e60:	0a000004 	beq	38e78 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xe4>
   38e64:	e085e002 	add	lr, r5, r2
   38e68:	e28eed6f 	add	lr, lr, #7104	; 0x1bc0
   38e6c:	e5dee034 	ldrb	lr, [lr, #52]	; 0x34
   38e70:	e15e0007 	cmp	lr, r7
   38e74:	0a00010a 	beq	392a4 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x510>
   38e78:	e3a06001 	mov	r6, #1
   38e7c:	e3520c1b 	cmp	r2, #6912	; 0x1b00
   38e80:	30852002 	addcc	r2, r5, r2
   38e84:	32822d6f 	addcc	r2, r2, #7104	; 0x1bc0
   38e88:	35c27034 	strbcc	r7, [r2, #52]	; 0x34
   38e8c:	e594e710 	ldr	lr, [r4, #1808]	; 0x710
   38e90:	e2032018 	and	r2, r3, #24
   38e94:	e002029e 	mul	r2, lr, r2
   38e98:	e2033007 	and	r3, r3, #7
   38e9c:	e0232390 	mla	r3, r0, r3, r2
   38ea0:	e594c724 	ldr	ip, [r4, #1828]	; 0x724
   38ea4:	e0833001 	add	r3, r3, r1
   38ea8:	e35c0000 	cmp	ip, #0
   38eac:	e58d3004 	str	r3, [sp, #4]
   38eb0:	0a00005a 	beq	39020 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x28c>
   38eb4:	e3a00000 	mov	r0, #0
   38eb8:	e2855d6f 	add	r5, r5, #7104	; 0x1bc0
   38ebc:	e59d3004 	ldr	r3, [sp, #4]
   38ec0:	e2855034 	add	r5, r5, #52	; 0x34
   38ec4:	e7d52003 	ldrb	r2, [r5, r3]
   38ec8:	e7d81003 	ldrb	r1, [r8, r3]
   38ecc:	e2800001 	add	r0, r0, #1
   38ed0:	e1520001 	cmp	r2, r1
   38ed4:	13530b06 	cmpne	r3, #6144	; 0x1800
   38ed8:	33a02001 	movcc	r2, #1
   38edc:	37c51003 	strbcc	r1, [r5, r3]
   38ee0:	23a02000 	movcs	r2, #0
   38ee4:	31a06002 	movcc	r6, r2
   38ee8:	e150000c 	cmp	r0, ip
   38eec:	e083300e 	add	r3, r3, lr
   38ef0:	1afffff3 	bne	38ec4 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x130>
   38ef4:	e3560000 	cmp	r6, #0
   38ef8:	0a000048 	beq	39020 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x28c>
   38efc:	e3a09000 	mov	r9, #0
   38f00:	e1a011c7 	asr	r1, r7, #3
   38f04:	e59f23c8 	ldr	r2, [pc, #968]	; 392d4 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x540>
   38f08:	e2013008 	and	r3, r1, #8
   38f0c:	e2077007 	and	r7, r7, #7
   38f10:	e201100f 	and	r1, r1, #15
   38f14:	e1833007 	orr	r3, r3, r7
   38f18:	e0823003 	add	r3, r2, r3
   38f1c:	e0822001 	add	r2, r2, r1
   38f20:	e59416f8 	ldr	r1, [r4, #1784]	; 0x6f8
   38f24:	e2833f45 	add	r3, r3, #276	; 0x114
   38f28:	e2822f45 	add	r2, r2, #276	; 0x114
   38f2c:	e1d3b0d0 	ldrsb	fp, [r3]
   38f30:	e1d2a0d0 	ldrsb	sl, [r2]
   38f34:	e2813020 	add	r3, r1, #32
   38f38:	e58d300c 	str	r3, [sp, #12]
   38f3c:	e58d8010 	str	r8, [sp, #16]
   38f40:	e594270c 	ldr	r2, [r4, #1804]	; 0x70c
   38f44:	e5947700 	ldr	r7, [r4, #1792]	; 0x700
   38f48:	e59d3010 	ldr	r3, [sp, #16]
   38f4c:	e59d0004 	ldr	r0, [sp, #4]
   38f50:	e0070297 	mul	r7, r7, r2
   38f54:	e0838000 	add	r8, r3, r0
   38f58:	e59d3008 	ldr	r3, [sp, #8]
   38f5c:	e3a06080 	mov	r6, #128	; 0x80
   38f60:	e0273799 	mla	r7, r9, r7, r3
   38f64:	e59d300c 	ldr	r3, [sp, #12]
   38f68:	e0810007 	add	r0, r1, r7
   38f6c:	e0837007 	add	r7, r3, r7
   38f70:	ea000004 	b	38f88 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1f4>
   38f74:	e2800004 	add	r0, r0, #4
   38f78:	e1570000 	cmp	r7, r0
   38f7c:	e1a060a6 	lsr	r6, r6, #1
   38f80:	0a00001e 	beq	39000 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x26c>
   38f84:	e594270c 	ldr	r2, [r4, #1804]	; 0x70c
   38f88:	e5943704 	ldr	r3, [r4, #1796]	; 0x704
   38f8c:	e5d8e000 	ldrb	lr, [r8]
   38f90:	e0030293 	mul	r3, r3, r2
   38f94:	e594c6fc 	ldr	ip, [r4, #1788]	; 0x6fc
   38f98:	e11e0006 	tst	lr, r6
   38f9c:	e0803103 	add	r3, r0, r3, lsl #2
   38fa0:	e081c00c 	add	ip, r1, ip
   38fa4:	01a0e00a 	moveq	lr, sl
   38fa8:	11a0e00b 	movne	lr, fp
   38fac:	e153000c 	cmp	r3, ip
   38fb0:	e1a03000 	mov	r3, r0
   38fb4:	2affffee 	bcs	38f74 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1e0>
   38fb8:	e3520000 	cmp	r2, #0
   38fbc:	0affffec 	beq	38f74 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1e0>
   38fc0:	e3a02000 	mov	r2, #0
   38fc4:	e1a0580e 	lsl	r5, lr, #16
   38fc8:	e0855c0e 	add	r5, r5, lr, lsl #24
   38fcc:	e085500e 	add	r5, r5, lr
   38fd0:	e085540e 	add	r5, r5, lr, lsl #8
   38fd4:	e5835000 	str	r5, [r3]
   38fd8:	e594e70c 	ldr	lr, [r4, #1804]	; 0x70c
   38fdc:	e594c704 	ldr	ip, [r4, #1796]	; 0x704
   38fe0:	e2822001 	add	r2, r2, #1
   38fe4:	e15e0002 	cmp	lr, r2
   38fe8:	e083310c 	add	r3, r3, ip, lsl #2
   38fec:	8afffff8 	bhi	38fd4 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x240>
   38ff0:	e2800004 	add	r0, r0, #4
   38ff4:	e1570000 	cmp	r7, r0
   38ff8:	e1a060a6 	lsr	r6, r6, #1
   38ffc:	1affffe0 	bne	38f84 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1f0>
   39000:	e5942724 	ldr	r2, [r4, #1828]	; 0x724
   39004:	e2899001 	add	r9, r9, #1
   39008:	e5943710 	ldr	r3, [r4, #1808]	; 0x710
   3900c:	e1520009 	cmp	r2, r9
   39010:	e59d2004 	ldr	r2, [sp, #4]
   39014:	e0823003 	add	r3, r2, r3
   39018:	e58d3004 	str	r3, [sp, #4]
   3901c:	8affffc7 	bhi	38f40 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1ac>
   39020:	e59d3014 	ldr	r3, [sp, #20]
   39024:	e5933bec 	ldr	r3, [r3, #3052]	; 0xbec
   39028:	e3530000 	cmp	r3, #0
   3902c:	1affff72 	bne	38dfc <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x68>
   39030:	e59d3014 	ldr	r3, [sp, #20]
   39034:	e5933be8 	ldr	r3, [r3, #3048]	; 0xbe8
   39038:	e3530000 	cmp	r3, #0
   3903c:	03a03001 	moveq	r3, #1
   39040:	05c436f4 	strbeq	r3, [r4, #1780]	; 0x6f4
   39044:	e28dd03c 	add	sp, sp, #60	; 0x3c
   39048:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3904c:	e12fff33 	blx	r3
   39050:	e1a07000 	mov	r7, r0
   39054:	eaffff59 	b	38dc0 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x2c>
   39058:	e3a0e000 	mov	lr, #0
   3905c:	e2832001 	add	r2, r3, #1
   39060:	e587ebec 	str	lr, [r7, #3052]	; 0xbec
   39064:	e5872be8 	str	r2, [r7, #3048]	; 0xbe8
   39068:	e594c720 	ldr	ip, [r4, #1824]	; 0x720
   3906c:	e152000c 	cmp	r2, ip
   39070:	3a000070 	bcc	39238 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x4a4>
   39074:	e1a0c00e 	mov	ip, lr
   39078:	e587ebe8 	str	lr, [r7, #3048]	; 0xbe8
   3907c:	eaffff6d 	b	38e38 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xa4>
   39080:	e5973000 	ldr	r3, [r7]
   39084:	e59f224c 	ldr	r2, [pc, #588]	; 392d8 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x544>
   39088:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   3908c:	e1530002 	cmp	r3, r2
   39090:	1a00008a 	bne	392c0 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x52c>
   39094:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   39098:	e59d101c 	ldr	r1, [sp, #28]
   3909c:	e3520000 	cmp	r2, #0
   390a0:	e2823003 	add	r3, r2, #3
   390a4:	a1a03002 	movge	r3, r2
   390a8:	e59d0020 	ldr	r0, [sp, #32]
   390ac:	e5842700 	str	r2, [r4, #1792]	; 0x700
   390b0:	e0000190 	mul	r0, r0, r1
   390b4:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
   390b8:	e1a03143 	asr	r3, r3, #2
   390bc:	e0020091 	mul	r2, r1, r0
   390c0:	e5951000 	ldr	r1, [r5]
   390c4:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
   390c8:	e5843704 	str	r3, [r4, #1796]	; 0x704
   390cc:	e58426fc 	str	r2, [r4, #1788]	; 0x6fc
   390d0:	e5913014 	ldr	r3, [r1, #20]
   390d4:	e58406f8 	str	r0, [r4, #1784]	; 0x6f8
   390d8:	e1a00005 	mov	r0, r5
   390dc:	e12fff33 	blx	r3
   390e0:	e5953000 	ldr	r3, [r5]
   390e4:	e590207c 	ldr	r2, [r0, #124]	; 0x7c
   390e8:	e5933014 	ldr	r3, [r3, #20]
   390ec:	e1a00005 	mov	r0, r5
   390f0:	e5842708 	str	r2, [r4, #1800]	; 0x708
   390f4:	e12fff33 	blx	r3
   390f8:	e5953000 	ldr	r3, [r5]
   390fc:	e5902080 	ldr	r2, [r0, #128]	; 0x80
   39100:	e5933014 	ldr	r3, [r3, #20]
   39104:	e1a00005 	mov	r0, r5
   39108:	e584270c 	str	r2, [r4, #1804]	; 0x70c
   3910c:	e12fff33 	blx	r3
   39110:	e1a02000 	mov	r2, r0
   39114:	e5953000 	ldr	r3, [r5]
   39118:	e1a00005 	mov	r0, r5
   3911c:	e5933014 	ldr	r3, [r3, #20]
   39120:	e5929078 	ldr	r9, [r2, #120]	; 0x78
   39124:	e12fff33 	blx	r3
   39128:	e5953000 	ldr	r3, [r5]
   3912c:	e590706c 	ldr	r7, [r0, #108]	; 0x6c
   39130:	e5933014 	ldr	r3, [r3, #20]
   39134:	e1a00005 	mov	r0, r5
   39138:	e12fff33 	blx	r3
   3913c:	e1a03000 	mov	r3, r0
   39140:	e0070997 	mul	r7, r7, r9
   39144:	e5931074 	ldr	r1, [r3, #116]	; 0x74
   39148:	e1a00007 	mov	r0, r7
   3914c:	eb001686 	bl	3eb6c <__divsi3>
   39150:	e5953000 	ldr	r3, [r5]
   39154:	e5840710 	str	r0, [r4, #1808]	; 0x710
   39158:	e5933014 	ldr	r3, [r3, #20]
   3915c:	e1a00005 	mov	r0, r5
   39160:	e12fff33 	blx	r3
   39164:	e5953000 	ldr	r3, [r5]
   39168:	e5902078 	ldr	r2, [r0, #120]	; 0x78
   3916c:	e5933014 	ldr	r3, [r3, #20]
   39170:	e1a00005 	mov	r0, r5
   39174:	e5842724 	str	r2, [r4, #1828]	; 0x724
   39178:	e12fff33 	blx	r3
   3917c:	e5953000 	ldr	r3, [r5]
   39180:	e5902074 	ldr	r2, [r0, #116]	; 0x74
   39184:	e5933014 	ldr	r3, [r3, #20]
   39188:	e1a00005 	mov	r0, r5
   3918c:	e5842728 	str	r2, [r4, #1832]	; 0x728
   39190:	e12fff33 	blx	r3
   39194:	e5943700 	ldr	r3, [r4, #1792]	; 0x700
   39198:	e594170c 	ldr	r1, [r4, #1804]	; 0x70c
   3919c:	e5902078 	ldr	r2, [r0, #120]	; 0x78
   391a0:	e0010193 	mul	r1, r3, r1
   391a4:	e5940728 	ldr	r0, [r4, #1832]	; 0x728
   391a8:	e5943708 	ldr	r3, [r4, #1800]	; 0x708
   391ac:	e0020192 	mul	r2, r2, r1
   391b0:	e0030093 	mul	r3, r3, r0
   391b4:	e5951000 	ldr	r1, [r5]
   391b8:	e1a00005 	mov	r0, r5
   391bc:	e5842714 	str	r2, [r4, #1812]	; 0x714
   391c0:	e5843718 	str	r3, [r4, #1816]	; 0x718
   391c4:	e5913014 	ldr	r3, [r1, #20]
   391c8:	e12fff33 	blx	r3
   391cc:	e1a02000 	mov	r2, r0
   391d0:	e5953000 	ldr	r3, [r5]
   391d4:	e1a00005 	mov	r0, r5
   391d8:	e5933014 	ldr	r3, [r3, #20]
   391dc:	e592706c 	ldr	r7, [r2, #108]	; 0x6c
   391e0:	e12fff33 	blx	r3
   391e4:	e1a03000 	mov	r3, r0
   391e8:	e1a00007 	mov	r0, r7
   391ec:	e5931074 	ldr	r1, [r3, #116]	; 0x74
   391f0:	eb00165d 	bl	3eb6c <__divsi3>
   391f4:	e5953000 	ldr	r3, [r5]
   391f8:	e584071c 	str	r0, [r4, #1820]	; 0x71c
   391fc:	e5933014 	ldr	r3, [r3, #20]
   39200:	e1a00005 	mov	r0, r5
   39204:	e12fff33 	blx	r3
   39208:	e1a02000 	mov	r2, r0
   3920c:	e5953000 	ldr	r3, [r5]
   39210:	e1a00005 	mov	r0, r5
   39214:	e5933014 	ldr	r3, [r3, #20]
   39218:	e5927070 	ldr	r7, [r2, #112]	; 0x70
   3921c:	e12fff33 	blx	r3
   39220:	e1a03000 	mov	r3, r0
   39224:	e1a00007 	mov	r0, r7
   39228:	e5931078 	ldr	r1, [r3, #120]	; 0x78
   3922c:	eb00164e 	bl	3eb6c <__divsi3>
   39230:	e5840720 	str	r0, [r4, #1824]	; 0x720
   39234:	eafffef6 	b	38e14 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x80>
   39238:	e594c718 	ldr	ip, [r4, #1816]	; 0x718
   3923c:	e594e714 	ldr	lr, [r4, #1812]	; 0x714
   39240:	e00c019c 	mul	ip, ip, r1
   39244:	e2812b06 	add	r2, r1, #6144	; 0x1800
   39248:	e0222093 	mla	r2, r3, r0, r2
   3924c:	e02cc39e 	mla	ip, lr, r3, ip
   39250:	e5d476f4 	ldrb	r7, [r4, #1780]	; 0x6f4
   39254:	e58dc008 	str	ip, [sp, #8]
   39258:	e3570000 	cmp	r7, #0
   3925c:	e7d87002 	ldrb	r7, [r8, r2]
   39260:	0affff04 	beq	38e78 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xe4>
   39264:	e085c002 	add	ip, r5, r2
   39268:	e28ccd6f 	add	ip, ip, #7104	; 0x1bc0
   3926c:	e5dcc034 	ldrb	ip, [ip, #52]	; 0x34
   39270:	e15c0007 	cmp	ip, r7
   39274:	1afffeff 	bne	38e78 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xe4>
   39278:	e2032007 	and	r2, r3, #7
   3927c:	e0020290 	mul	r2, r0, r2
   39280:	e594e710 	ldr	lr, [r4, #1808]	; 0x710
   39284:	e2033018 	and	r3, r3, #24
   39288:	e023239e 	mla	r3, lr, r3, r2
   3928c:	e594c724 	ldr	ip, [r4, #1828]	; 0x724
   39290:	e0833001 	add	r3, r3, r1
   39294:	e35c0000 	cmp	ip, #0
   39298:	e58d3004 	str	r3, [sp, #4]
   3929c:	1affff04 	bne	38eb4 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x120>
   392a0:	eaffff62 	b	39030 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x29c>
   392a4:	e35c001f 	cmp	ip, #31
   392a8:	1afffef7 	bne	38e8c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xf8>
   392ac:	e59dc014 	ldr	ip, [sp, #20]
   392b0:	e59ccbe8 	ldr	ip, [ip, #3048]	; 0xbe8
   392b4:	e35c0017 	cmp	ip, #23
   392b8:	1afffef3 	bne	38e8c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xf8>
   392bc:	eafffeed 	b	38e78 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xe4>
   392c0:	e1a00007 	mov	r0, r7
   392c4:	e28d1018 	add	r1, sp, #24
   392c8:	e12fff33 	blx	r3
   392cc:	eaffff70 	b	39094 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x300>
   392d0:	00037978 	.word	0x00037978
   392d4:	00048e64 	.word	0x00048e64
   392d8:	0003941c 	.word	0x0003941c

000392dc <McZXSpectrum::service()>:
   392dc:	e92d4070 	push	{r4, r5, r6, lr}
   392e0:	e2805a01 	add	r5, r0, #4096	; 0x1000
   392e4:	e5d53be4 	ldrb	r3, [r5, #3044]	; 0xbe4
   392e8:	e2804a03 	add	r4, r0, #12288	; 0x3000
   392ec:	e3530000 	cmp	r3, #0
   392f0:	13a03000 	movne	r3, #0
   392f4:	11a02003 	movne	r2, r3
   392f8:	15853bf0 	strne	r3, [r5, #3056]	; 0xbf0
   392fc:	15c53be4 	strbne	r3, [r5, #3044]	; 0xbe4
   39300:	e5941720 	ldr	r1, [r4, #1824]	; 0x720
   39304:	e594371c 	ldr	r3, [r4, #1820]	; 0x71c
   39308:	05952bf0 	ldreq	r2, [r5, #3056]	; 0xbf0
   3930c:	e0030193 	mul	r3, r3, r1
   39310:	e1530002 	cmp	r3, r2
   39314:	0a000005 	beq	39330 <McZXSpectrum::service()+0x54>
   39318:	e3a02c1b 	mov	r2, #6912	; 0x1b00
   3931c:	e28010e4 	add	r1, r0, #228	; 0xe4
   39320:	ebfffe9b 	bl	38d94 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)>
   39324:	e5953bf0 	ldr	r3, [r5, #3056]	; 0xbf0
   39328:	e2833001 	add	r3, r3, #1
   3932c:	e5853bf0 	str	r3, [r5, #3056]	; 0xbf0
   39330:	e5943798 	ldr	r3, [r4, #1944]	; 0x798
   39334:	e3530000 	cmp	r3, #0
   39338:	08bd8070 	popeq	{r4, r5, r6, pc}
   3933c:	ebffd2ad 	bl	2ddf8 <millis>
   39340:	e59427a0 	ldr	r2, [r4, #1952]	; 0x7a0
   39344:	e594179c 	ldr	r1, [r4, #1948]	; 0x79c
   39348:	ebffd2c7 	bl	2de6c <isTimeout>
   3934c:	e3500000 	cmp	r0, #0
   39350:	08bd8070 	popeq	{r4, r5, r6, pc}
   39354:	e594c798 	ldr	ip, [r4, #1944]	; 0x798
   39358:	e35c0000 	cmp	ip, #0
   3935c:	08bd8070 	popeq	{r4, r5, r6, pc}
   39360:	e5943794 	ldr	r3, [r4, #1940]	; 0x794
   39364:	e59f2050 	ldr	r2, [pc, #80]	; 393bc <McZXSpectrum::service()+0xe0>
   39368:	e283300a 	add	r3, r3, #10
   3936c:	e043300c 	sub	r3, r3, ip
   39370:	e0821392 	umull	r1, r2, r2, r3
   39374:	e1a021a2 	lsr	r2, r2, #3
   39378:	e0822102 	add	r2, r2, r2, lsl #2
   3937c:	e0433082 	sub	r3, r3, r2, lsl #1
   39380:	e0843183 	add	r3, r4, r3, lsl #3
   39384:	e5931748 	ldr	r1, [r3, #1864]	; 0x748
   39388:	e5930744 	ldr	r0, [r3, #1860]	; 0x744
   3938c:	e2843e73 	add	r3, r4, #1840	; 0x730
   39390:	e24cc001 	sub	ip, ip, #1
   39394:	e283300c 	add	r3, r3, #12
   39398:	e8830003 	stm	r3, {r0, r1}
   3939c:	e584c798 	str	ip, [r4, #1944]	; 0x798
   393a0:	ebffd294 	bl	2ddf8 <millis>
   393a4:	e3a01004 	mov	r1, #4
   393a8:	e584079c 	str	r0, [r4, #1948]	; 0x79c
   393ac:	e59f200c 	ldr	r2, [pc, #12]	; 393c0 <McZXSpectrum::service()+0xe4>
   393b0:	e59f000c 	ldr	r0, [pc, #12]	; 393c4 <McZXSpectrum::service()+0xe8>
   393b4:	e8bd4070 	pop	{r4, r5, r6, lr}
   393b8:	eaffd692 	b	2ee08 <LogWrite>
   393bc:	cccccccd 	.word	0xcccccccd
   393c0:	00048e60 	.word	0x00048e60
   393c4:	00048dd8 	.word	0x00048dd8

000393c8 <McZXSpectrum::getKeyBitmap(int const*, int, unsigned char const*)>:
   393c8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   393cc:	e3a060ff 	mov	r6, #255	; 0xff
   393d0:	e2400004 	sub	r0, r0, #4
   393d4:	e2827006 	add	r7, r2, #6
   393d8:	e0805101 	add	r5, r0, r1, lsl #2
   393dc:	e3510000 	cmp	r1, #0
   393e0:	da000008 	ble	39408 <McZXSpectrum::getKeyBitmap(int const*, int, unsigned char const*)+0x40>
   393e4:	e1a03000 	mov	r3, r0
   393e8:	e3a0c001 	mov	ip, #1
   393ec:	e5d24000 	ldrb	r4, [r2]
   393f0:	e5b3e004 	ldr	lr, [r3, #4]!
   393f4:	e154000e 	cmp	r4, lr
   393f8:	01c6600c 	biceq	r6, r6, ip
   393fc:	e1530005 	cmp	r3, r5
   39400:	e1a0c08c 	lsl	ip, ip, #1
   39404:	1afffff9 	bne	393f0 <McZXSpectrum::getKeyBitmap(int const*, int, unsigned char const*)+0x28>
   39408:	e2822001 	add	r2, r2, #1
   3940c:	e1520007 	cmp	r2, r7
   39410:	1afffff1 	bne	393dc <McZXSpectrum::getKeyBitmap(int const*, int, unsigned char const*)+0x14>
   39414:	e1a00006 	mov	r0, r6
   39418:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0003941c <DisplayBase::getFrameBufferInfo(FrameBufferInfo&)>:
   3941c:	e12fff1e 	bx	lr

00039420 <McZXSpectrum::informClockFreqHz(unsigned long)>:
   39420:	e59f3024 	ldr	r3, [pc, #36]	; 3944c <McZXSpectrum::informClockFreqHz(unsigned long)+0x2c>
   39424:	e92d4010 	push	{r4, lr}
   39428:	e0813193 	umull	r3, r1, r3, r1
   3942c:	e1a01321 	lsr	r1, r1, #6
   39430:	e1a04000 	mov	r4, r0
   39434:	e2811001 	add	r1, r1, #1
   39438:	e59f0010 	ldr	r0, [pc, #16]	; 39450 <McZXSpectrum::informClockFreqHz(unsigned long)+0x30>
   3943c:	eb001547 	bl	3e960 <__udivsi3>
   39440:	e2844a03 	add	r4, r4, #12288	; 0x3000
   39444:	e58407a0 	str	r0, [r4, #1952]	; 0x7a0
   39448:	e8bd8010 	pop	{r4, pc}
   3944c:	10624dd3 	.word	0x10624dd3
   39450:	00086470 	.word	0x00086470

00039454 <McBase::getDescriptorTable()>:
   39454:	e280000c 	add	r0, r0, #12
   39458:	e12fff1e 	bx	lr

0003945c <McBase::getMachineName()>:
   3945c:	e280000c 	add	r0, r0, #12
   39460:	e12fff1e 	bx	lr

00039464 <McBase::machineHeartbeat()>:
   39464:	e12fff1e 	bx	lr

00039468 <McBase::reset(bool, bool)>:
   39468:	e3a00000 	mov	r0, #0
   3946c:	e12fff1e 	bx	lr

00039470 <McBase::canProcFileType(char const*)>:
   39470:	e3a00000 	mov	r0, #0
   39474:	e12fff1e 	bx	lr

00039478 <McBase::isCalled(char const*, unsigned long&)>:
   39478:	e59030d8 	ldr	r3, [r0, #216]	; 0xd8
   3947c:	e3530000 	cmp	r3, #0
   39480:	0a000014 	beq	394d8 <McBase::isCalled(char const*, unsigned long&)+0x60>
   39484:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   39488:	e1a06000 	mov	r6, r0
   3948c:	e1a07001 	mov	r7, r1
   39490:	e1a08002 	mov	r8, r2
   39494:	e3a04000 	mov	r4, #0
   39498:	e28050ac 	add	r5, r0, #172	; 0xac
   3949c:	ea000003 	b	394b0 <McBase::isCalled(char const*, unsigned long&)+0x38>
   394a0:	e59630d8 	ldr	r3, [r6, #216]	; 0xd8
   394a4:	e2844001 	add	r4, r4, #1
   394a8:	e1530004 	cmp	r3, r4
   394ac:	9a000007 	bls	394d0 <McBase::isCalled(char const*, unsigned long&)+0x58>
   394b0:	e1a01007 	mov	r1, r7
   394b4:	e5b50004 	ldr	r0, [r5, #4]!
   394b8:	ebffc308 	bl	2a0e0 <strcasecmp>
   394bc:	e3500000 	cmp	r0, #0
   394c0:	1afffff6 	bne	394a0 <McBase::isCalled(char const*, unsigned long&)+0x28>
   394c4:	e3a00001 	mov	r0, #1
   394c8:	e5884000 	str	r4, [r8]
   394cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   394d0:	e3a00000 	mov	r0, #0
   394d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   394d8:	e3a00000 	mov	r0, #0
   394dc:	e12fff1e 	bx	lr

000394e0 <McBase::getMachineNames(char*, unsigned long)>:
   394e0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   394e4:	e3a06000 	mov	r6, #0
   394e8:	e5c16000 	strb	r6, [r1]
   394ec:	e59030d8 	ldr	r3, [r0, #216]	; 0xd8
   394f0:	e1530006 	cmp	r3, r6
   394f4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   394f8:	e1a04001 	mov	r4, r1
   394fc:	e1a09000 	mov	r9, r0
   39500:	e1a05002 	mov	r5, r2
   39504:	e59f7058 	ldr	r7, [pc, #88]	; 39564 <McBase::getMachineNames(char*, unsigned long)+0x84>
   39508:	e59fa058 	ldr	sl, [pc, #88]	; 39568 <McBase::getMachineNames(char*, unsigned long)+0x88>
   3950c:	e28080ac 	add	r8, r0, #172	; 0xac
   39510:	e1a02005 	mov	r2, r5
   39514:	e1a01007 	mov	r1, r7
   39518:	e1a00004 	mov	r0, r4
   3951c:	ebffd28a 	bl	2df4c <strlcat>
   39520:	e1a02005 	mov	r2, r5
   39524:	e5b81004 	ldr	r1, [r8, #4]!
   39528:	e1a00004 	mov	r0, r4
   3952c:	ebffd286 	bl	2df4c <strlcat>
   39530:	e1a02005 	mov	r2, r5
   39534:	e1a01007 	mov	r1, r7
   39538:	e1a00004 	mov	r0, r4
   3953c:	ebffd282 	bl	2df4c <strlcat>
   39540:	e59930d8 	ldr	r3, [r9, #216]	; 0xd8
   39544:	e2866001 	add	r6, r6, #1
   39548:	e1560003 	cmp	r6, r3
   3954c:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
   39550:	e1a02005 	mov	r2, r5
   39554:	e1a0100a 	mov	r1, sl
   39558:	e1a00004 	mov	r0, r4
   3955c:	ebffd27a 	bl	2df4c <strlcat>
   39560:	eaffffea 	b	39510 <McBase::getMachineNames(char*, unsigned long)+0x30>
   39564:	000485cc 	.word	0x000485cc
   39568:	0004358c 	.word	0x0004358c

0003956c <McBase::setupDisplay(DisplayBase*)>:
   3956c:	e92d4070 	push	{r4, r5, r6, lr}
   39570:	e1a05001 	mov	r5, r1
   39574:	e5903090 	ldr	r3, [r0, #144]	; 0x90
   39578:	e590107c 	ldr	r1, [r0, #124]	; 0x7c
   3957c:	e5902078 	ldr	r2, [r0, #120]	; 0x78
   39580:	e24dd018 	sub	sp, sp, #24
   39584:	e2833018 	add	r3, r3, #24
   39588:	e58050e0 	str	r5, [r0, #224]	; 0xe0
   3958c:	e1a04000 	mov	r4, r0
   39590:	e98d000a 	stmib	sp, {r1, r3}
   39594:	e58d2000 	str	r2, [sp]
   39598:	e280300c 	add	r3, r0, #12
   3959c:	e3a01004 	mov	r1, #4
   395a0:	e59f2070 	ldr	r2, [pc, #112]	; 39618 <McBase::setupDisplay(DisplayBase*)+0xac>
   395a4:	e59f0070 	ldr	r0, [pc, #112]	; 3961c <McBase::setupDisplay(DisplayBase*)+0xb0>
   395a8:	ebffd616 	bl	2ee08 <LogWrite>
   395ac:	e3550000 	cmp	r5, #0
   395b0:	0a000004 	beq	395c8 <McBase::setupDisplay(DisplayBase*)+0x5c>
   395b4:	e5952000 	ldr	r2, [r5]
   395b8:	e59f3060 	ldr	r3, [pc, #96]	; 39620 <McBase::setupDisplay(DisplayBase*)+0xb4>
   395bc:	e5926034 	ldr	r6, [r2, #52]	; 0x34
   395c0:	e1560003 	cmp	r6, r3
   395c4:	1a000001 	bne	395d0 <McBase::setupDisplay(DisplayBase*)+0x64>
   395c8:	e28dd018 	add	sp, sp, #24
   395cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   395d0:	e5941098 	ldr	r1, [r4, #152]	; 0x98
   395d4:	e5942094 	ldr	r2, [r4, #148]	; 0x94
   395d8:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   395dc:	e58d1014 	str	r1, [sp, #20]
   395e0:	e594108c 	ldr	r1, [r4, #140]	; 0x8c
   395e4:	e58d2010 	str	r2, [sp, #16]
   395e8:	e5942088 	ldr	r2, [r4, #136]	; 0x88
   395ec:	e58d300c 	str	r3, [sp, #12]
   395f0:	e5943084 	ldr	r3, [r4, #132]	; 0x84
   395f4:	e58d1008 	str	r1, [sp, #8]
   395f8:	e58d2004 	str	r2, [sp, #4]
   395fc:	e58d3000 	str	r3, [sp]
   39600:	e1a00005 	mov	r0, r5
   39604:	e1c427dc 	ldrd	r2, [r4, #124]	; 0x7c
   39608:	e5941078 	ldr	r1, [r4, #120]	; 0x78
   3960c:	e12fff36 	blx	r6
   39610:	e28dd018 	add	sp, sp, #24
   39614:	e8bd8070 	pop	{r4, r5, r6, pc}
   39618:	00048f88 	.word	0x00048f88
   3961c:	00048ff8 	.word	0x00048ff8
   39620:	000398f8 	.word	0x000398f8

00039624 <McBase::setupMachine(char const*, char const*)>:
   39624:	e3a0c000 	mov	ip, #0
   39628:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3962c:	e5903000 	ldr	r3, [r0]
   39630:	e24dd06c 	sub	sp, sp, #108	; 0x6c
   39634:	e1a07002 	mov	r7, r2
   39638:	e5933000 	ldr	r3, [r3]
   3963c:	e1a0200d 	mov	r2, sp
   39640:	e58dc000 	str	ip, [sp]
   39644:	e1a04000 	mov	r4, r0
   39648:	e1a06001 	mov	r6, r1
   3964c:	e12fff33 	blx	r3
   39650:	e2505000 	subs	r5, r0, #0
   39654:	0a00004f 	beq	39798 <McBase::setupMachine(char const*, char const*)+0x174>
   39658:	e59d3000 	ldr	r3, [sp]
   3965c:	e284600c 	add	r6, r4, #12
   39660:	e283202c 	add	r2, r3, #44	; 0x2c
   39664:	e7941102 	ldr	r1, [r4, r2, lsl #2]
   39668:	e58430dc 	str	r3, [r4, #220]	; 0xdc
   3966c:	e1a00006 	mov	r0, r6
   39670:	e3a020a4 	mov	r2, #164	; 0xa4
   39674:	ebffc46d 	bl	2a830 <memcpy>
   39678:	e5943000 	ldr	r3, [r4]
   3967c:	e59f9190 	ldr	r9, [pc, #400]	; 39814 <McBase::setupMachine(char const*, char const*)+0x1f0>
   39680:	e5933008 	ldr	r3, [r3, #8]
   39684:	e1530009 	cmp	r3, r9
   39688:	01a03006 	moveq	r3, r6
   3968c:	1a000059 	bne	397f8 <McBase::setupMachine(char const*, char const*)+0x1d4>
   39690:	e59f2180 	ldr	r2, [pc, #384]	; 39818 <McBase::setupMachine(char const*, char const*)+0x1f4>
   39694:	e3a01004 	mov	r1, #4
   39698:	e59f017c 	ldr	r0, [pc, #380]	; 3981c <McBase::setupMachine(char const*, char const*)+0x1f8>
   3969c:	ebffd5d9 	bl	2ee08 <LogWrite>
   396a0:	e5943000 	ldr	r3, [r4]
   396a4:	e59f2174 	ldr	r2, [pc, #372]	; 39820 <McBase::setupMachine(char const*, char const*)+0x1fc>
   396a8:	e593301c 	ldr	r3, [r3, #28]
   396ac:	e1530002 	cmp	r3, r2
   396b0:	1a000054 	bne	39808 <McBase::setupMachine(char const*, char const*)+0x1e4>
   396b4:	e1a01007 	mov	r1, r7
   396b8:	e3a03064 	mov	r3, #100	; 0x64
   396bc:	e59f0160 	ldr	r0, [pc, #352]	; 39824 <McBase::setupMachine(char const*, char const*)+0x200>
   396c0:	e28d2004 	add	r2, sp, #4
   396c4:	e59480a0 	ldr	r8, [r4, #160]	; 0xa0
   396c8:	ebffd2b0 	bl	2e190 <jsonGetValueForKey>
   396cc:	e5947008 	ldr	r7, [r4, #8]
   396d0:	e3500000 	cmp	r0, #0
   396d4:	e2877004 	add	r7, r7, #4
   396d8:	1a00001b 	bne	3974c <McBase::setupMachine(char const*, char const*)+0x128>
   396dc:	e3580000 	cmp	r8, #0
   396e0:	0a000002 	beq	396f0 <McBase::setupMachine(char const*, char const*)+0xcc>
   396e4:	e59f313c 	ldr	r3, [pc, #316]	; 39828 <McBase::setupMachine(char const*, char const*)+0x204>
   396e8:	e1580003 	cmp	r8, r3
   396ec:	9a00001f 	bls	39770 <McBase::setupMachine(char const*, char const*)+0x14c>
   396f0:	e1a00007 	mov	r0, r7
   396f4:	e3a01000 	mov	r1, #0
   396f8:	ebffe362 	bl	32488 <TargetClockGenerator::enable(bool)>
   396fc:	e5943000 	ldr	r3, [r4]
   39700:	e59f1124 	ldr	r1, [pc, #292]	; 3982c <McBase::setupMachine(char const*, char const*)+0x208>
   39704:	e5932068 	ldr	r2, [r3, #104]	; 0x68
   39708:	e1520001 	cmp	r2, r1
   3970c:	1a00002d 	bne	397c8 <McBase::setupMachine(char const*, char const*)+0x1a4>
   39710:	e5932018 	ldr	r2, [r3, #24]
   39714:	e59f1114 	ldr	r1, [pc, #276]	; 39830 <McBase::setupMachine(char const*, char const*)+0x20c>
   39718:	e1520001 	cmp	r2, r1
   3971c:	1a000031 	bne	397e8 <McBase::setupMachine(char const*, char const*)+0x1c4>
   39720:	e5933008 	ldr	r3, [r3, #8]
   39724:	e1530009 	cmp	r3, r9
   39728:	01a03006 	moveq	r3, r6
   3972c:	1a000021 	bne	397b8 <McBase::setupMachine(char const*, char const*)+0x194>
   39730:	e3a01004 	mov	r1, #4
   39734:	e59f20f8 	ldr	r2, [pc, #248]	; 39834 <McBase::setupMachine(char const*, char const*)+0x210>
   39738:	e59f00dc 	ldr	r0, [pc, #220]	; 3981c <McBase::setupMachine(char const*, char const*)+0x1f8>
   3973c:	ebffd5b1 	bl	2ee08 <LogWrite>
   39740:	e1a00005 	mov	r0, r5
   39744:	e28dd06c 	add	sp, sp, #108	; 0x6c
   39748:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3974c:	e3a0200a 	mov	r2, #10
   39750:	e3a01000 	mov	r1, #0
   39754:	e28d0004 	add	r0, sp, #4
   39758:	ebffc361 	bl	2a4e4 <strtoul>
   3975c:	e59f30d4 	ldr	r3, [pc, #212]	; 39838 <McBase::setupMachine(char const*, char const*)+0x214>
   39760:	e2402001 	sub	r2, r0, #1
   39764:	e1520003 	cmp	r2, r3
   39768:	8affffdb 	bhi	396dc <McBase::setupMachine(char const*, char const*)+0xb8>
   3976c:	e1a08000 	mov	r8, r0
   39770:	e3e01000 	mvn	r1, #0
   39774:	e1a00007 	mov	r0, r7
   39778:	ebffe399 	bl	325e4 <TargetClockGenerator::setup(int)>
   3977c:	e1a01008 	mov	r1, r8
   39780:	e1a00007 	mov	r0, r7
   39784:	ebffe3bb 	bl	32678 <TargetClockGenerator::setFreqHz(unsigned long)>
   39788:	e1a00007 	mov	r0, r7
   3978c:	e3a01001 	mov	r1, #1
   39790:	ebffe33c 	bl	32488 <TargetClockGenerator::enable(bool)>
   39794:	eaffffd8 	b	396fc <McBase::setupMachine(char const*, char const*)+0xd8>
   39798:	e1a03006 	mov	r3, r6
   3979c:	e3a01002 	mov	r1, #2
   397a0:	e59f2094 	ldr	r2, [pc, #148]	; 3983c <McBase::setupMachine(char const*, char const*)+0x218>
   397a4:	e59f0070 	ldr	r0, [pc, #112]	; 3981c <McBase::setupMachine(char const*, char const*)+0x1f8>
   397a8:	ebffd596 	bl	2ee08 <LogWrite>
   397ac:	e1a00005 	mov	r0, r5
   397b0:	e28dd06c 	add	sp, sp, #108	; 0x6c
   397b4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   397b8:	e1a00004 	mov	r0, r4
   397bc:	e12fff33 	blx	r3
   397c0:	e1a03000 	mov	r3, r0
   397c4:	eaffffd9 	b	39730 <McBase::setupMachine(char const*, char const*)+0x10c>
   397c8:	e1a01008 	mov	r1, r8
   397cc:	e1a00004 	mov	r0, r4
   397d0:	e12fff32 	blx	r2
   397d4:	e5943000 	ldr	r3, [r4]
   397d8:	e59f1050 	ldr	r1, [pc, #80]	; 39830 <McBase::setupMachine(char const*, char const*)+0x20c>
   397dc:	e5932018 	ldr	r2, [r3, #24]
   397e0:	e1520001 	cmp	r2, r1
   397e4:	0affffcd 	beq	39720 <McBase::setupMachine(char const*, char const*)+0xfc>
   397e8:	e1a00004 	mov	r0, r4
   397ec:	e12fff32 	blx	r2
   397f0:	e5943000 	ldr	r3, [r4]
   397f4:	eaffffc9 	b	39720 <McBase::setupMachine(char const*, char const*)+0xfc>
   397f8:	e1a00004 	mov	r0, r4
   397fc:	e12fff33 	blx	r3
   39800:	e1a03000 	mov	r3, r0
   39804:	eaffffa1 	b	39690 <McBase::setupMachine(char const*, char const*)+0x6c>
   39808:	e1a00004 	mov	r0, r4
   3980c:	e12fff33 	blx	r3
   39810:	eaffffa7 	b	396b4 <McBase::setupMachine(char const*, char const*)+0x90>
   39814:	0003945c 	.word	0x0003945c
   39818:	00048fdc 	.word	0x00048fdc
   3981c:	00048ff8 	.word	0x00048ff8
   39820:	00039900 	.word	0x00039900
   39824:	00048a20 	.word	0x00048a20
   39828:	017d7840 	.word	0x017d7840
   3982c:	00037980 	.word	0x00037980
   39830:	000398fc 	.word	0x000398fc
   39834:	00048fec 	.word	0x00048fec
   39838:	017d783f 	.word	0x017d783f
   3983c:	00048fb8 	.word	0x00048fb8

00039840 <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)>:
   39840:	e92d4070 	push	{r4, r5, r6, lr}
   39844:	e1a05000 	mov	r5, r0
   39848:	e1a06001 	mov	r6, r1
   3984c:	e59d0010 	ldr	r0, [sp, #16]
   39850:	e59f1098 	ldr	r1, [pc, #152]	; 398f0 <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)+0xb0>
   39854:	e3500000 	cmp	r0, #0
   39858:	e5856004 	str	r6, [r5, #4]
   3985c:	e5852008 	str	r2, [r5, #8]
   39860:	e5851000 	str	r1, [r5]
   39864:	0a000019 	beq	398d0 <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)+0x90>
   39868:	e1a0e003 	mov	lr, r3
   3986c:	e3a02000 	mov	r2, #0
   39870:	e28540ac 	add	r4, r5, #172	; 0xac
   39874:	e2822001 	add	r2, r2, #1
   39878:	e3520009 	cmp	r2, #9
   3987c:	93a0c000 	movls	ip, #0
   39880:	83a0c001 	movhi	ip, #1
   39884:	e1500002 	cmp	r0, r2
   39888:	938cc001 	orrls	ip, ip, #1
   3988c:	e35c0000 	cmp	ip, #0
   39890:	e5a4e004 	str	lr, [r4, #4]!
   39894:	e28ee0a4 	add	lr, lr, #164	; 0xa4
   39898:	0afffff5 	beq	39874 <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)+0x34>
   3989c:	e3a02000 	mov	r2, #0
   398a0:	e58500d8 	str	r0, [r5, #216]	; 0xd8
   398a4:	e58520e0 	str	r2, [r5, #224]	; 0xe0
   398a8:	e58520dc 	str	r2, [r5, #220]	; 0xdc
   398ac:	e1a01003 	mov	r1, r3
   398b0:	e3a020a4 	mov	r2, #164	; 0xa4
   398b4:	e285000c 	add	r0, r5, #12
   398b8:	ebffc3dc 	bl	2a830 <memcpy>
   398bc:	e1a00006 	mov	r0, r6
   398c0:	e1a01005 	mov	r1, r5
   398c4:	ebfff448 	bl	369ec <McManager::add(McBase*)>
   398c8:	e1a00005 	mov	r0, r5
   398cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   398d0:	e58500d8 	str	r0, [r5, #216]	; 0xd8
   398d4:	e58500e0 	str	r0, [r5, #224]	; 0xe0
   398d8:	e58500dc 	str	r0, [r5, #220]	; 0xdc
   398dc:	e3a020a4 	mov	r2, #164	; 0xa4
   398e0:	e59f100c 	ldr	r1, [pc, #12]	; 398f4 <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)+0xb4>
   398e4:	e285000c 	add	r0, r5, #12
   398e8:	ebffc3d0 	bl	2a830 <memcpy>
   398ec:	eafffff2 	b	398bc <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)+0x7c>
   398f0:	00049008 	.word	0x00049008
   398f4:	0004a6e8 	.word	0x0004a6e8

000398f8 <DisplayBase::targetLayout(int, int, int, int, int, int, WgfxFont*, int, int)>:
   398f8:	e12fff1e 	bx	lr

000398fc <McBase::enableMachine()>:
   398fc:	e12fff1e 	bx	lr

00039900 <McBase::disableMachine()>:
   39900:	e12fff1e 	bx	lr

00039904 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)>:
   39904:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39908:	e1a04001 	mov	r4, r1
   3990c:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
   39910:	e1a05000 	mov	r5, r0
   39914:	e1a00001 	mov	r0, r1
   39918:	e3a0100c 	mov	r1, #12
   3991c:	e1a07002 	mov	r7, r2
   39920:	eb000dd8 	bl	3d088 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39924:	e1a00004 	mov	r0, r4
   39928:	e59f1460 	ldr	r1, [pc, #1120]	; 39d90 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x48c>
   3992c:	eb000dc6 	bl	3d04c <Display::consolePut(char const*)>
   39930:	e1a00004 	mov	r0, r4
   39934:	e3a0100f 	mov	r1, #15
   39938:	eb000dd2 	bl	3d088 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   3993c:	e59f8450 	ldr	r8, [pc, #1104]	; 39d94 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x490>
   39940:	e1a00004 	mov	r0, r4
   39944:	e59f144c 	ldr	r1, [pc, #1100]	; 39d98 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x494>
   39948:	eb000dbf 	bl	3d04c <Display::consolePut(char const*)>
   3994c:	e1a00004 	mov	r0, r4
   39950:	e59f1444 	ldr	r1, [pc, #1092]	; 39d9c <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x498>
   39954:	eb000dbc 	bl	3d04c <Display::consolePut(char const*)>
   39958:	e1a0e008 	mov	lr, r8
   3995c:	e28dc010 	add	ip, sp, #16
   39960:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   39964:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   39968:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
   3996c:	e88c000f 	stm	ip, {r0, r1, r2, r3}
   39970:	e1a00005 	mov	r0, r5
   39974:	ebff3f85 	bl	9790 <BusRaiderApp::selfTestHelperService()>
   39978:	e1a00004 	mov	r0, r4
   3997c:	e59f141c 	ldr	r1, [pc, #1052]	; 39da0 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x49c>
   39980:	eb000db1 	bl	3d04c <Display::consolePut(char const*)>
   39984:	e1a00005 	mov	r0, r5
   39988:	ebff3f80 	bl	9790 <BusRaiderApp::selfTestHelperService()>
   3998c:	e1a00005 	mov	r0, r5
   39990:	ebff3f7f 	bl	9794 <BusRaiderApp::selfTestKeyboardGet()>
   39994:	e6af6070 	sxtb	r6, r0
   39998:	e1a00006 	mov	r0, r6
   3999c:	ebffd2ec 	bl	2e554 <rdtolower>
   399a0:	e3500079 	cmp	r0, #121	; 0x79
   399a4:	0a000006 	beq	399c4 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0xc0>
   399a8:	e1a00006 	mov	r0, r6
   399ac:	ebffd2e8 	bl	2e554 <rdtolower>
   399b0:	e350006e 	cmp	r0, #110	; 0x6e
   399b4:	0a0000d3 	beq	39d08 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x404>
   399b8:	e1a00005 	mov	r0, r5
   399bc:	ebff3f73 	bl	9790 <BusRaiderApp::selfTestHelperService()>
   399c0:	eafffff1 	b	3998c <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x88>
   399c4:	e59f93d8 	ldr	r9, [pc, #984]	; 39da4 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4a0>
   399c8:	e59f13d8 	ldr	r1, [pc, #984]	; 39da8 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4a4>
   399cc:	e1a00004 	mov	r0, r4
   399d0:	eb000d9d 	bl	3d04c <Display::consolePut(char const*)>
   399d4:	e0879009 	add	r9, r7, r9
   399d8:	e1a00005 	mov	r0, r5
   399dc:	ebff3f6b 	bl	9790 <BusRaiderApp::selfTestHelperService()>
   399e0:	e1a00009 	mov	r0, r9
   399e4:	e3a01064 	mov	r1, #100	; 0x64
   399e8:	ebffe05c 	bl	31b60 <BusRawAccess::targetReset(unsigned long)>
   399ec:	e1a00005 	mov	r0, r5
   399f0:	ebff3f66 	bl	9790 <BusRaiderApp::selfTestHelperService()>
   399f4:	e1a00007 	mov	r0, r7
   399f8:	ebffdde5 	bl	31194 <BusControl::rawAccessStart()>
   399fc:	e3a01000 	mov	r1, #0
   39a00:	e1a00009 	mov	r0, r9
   39a04:	ebffe211 	bl	32250 <BusRawAccess::busRequestAndTake(unsigned long)>
   39a08:	e2506000 	subs	r6, r0, #0
   39a0c:	1a000082 	bne	39c1c <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x318>
   39a10:	e1a00005 	mov	r0, r5
   39a14:	e58d6008 	str	r6, [sp, #8]
   39a18:	ebff3f5c 	bl	9790 <BusRaiderApp::selfTestHelperService()>
   39a1c:	e28d8010 	add	r8, sp, #16
   39a20:	e28da030 	add	sl, sp, #48	; 0x30
   39a24:	e5981004 	ldr	r1, [r8, #4]
   39a28:	e5983000 	ldr	r3, [r8]
   39a2c:	e1a0000a 	mov	r0, sl
   39a30:	e0832001 	add	r2, r3, r1
   39a34:	e2422001 	sub	r2, r2, #1
   39a38:	e58d1004 	str	r1, [sp, #4]
   39a3c:	e58d2000 	str	r2, [sp]
   39a40:	e3a010c8 	mov	r1, #200	; 0xc8
   39a44:	e59f2360 	ldr	r2, [pc, #864]	; 39dac <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4a8>
   39a48:	ebffd18f 	bl	2e08c <snprintf>
   39a4c:	e1a0100a 	mov	r1, sl
   39a50:	e1a00004 	mov	r0, r4
   39a54:	eb000d7c 	bl	3d04c <Display::consolePut(char const*)>
   39a58:	e1a00005 	mov	r0, r5
   39a5c:	ebff3f4b 	bl	9790 <BusRaiderApp::selfTestHelperService()>
   39a60:	e1a00005 	mov	r0, r5
   39a64:	ebff3f4a 	bl	9794 <BusRaiderApp::selfTestKeyboardGet()>
   39a68:	e6afb070 	sxtb	fp, r0
   39a6c:	e1a0000b 	mov	r0, fp
   39a70:	ebffd2b7 	bl	2e554 <rdtolower>
   39a74:	e3500079 	cmp	r0, #121	; 0x79
   39a78:	0a000020 	beq	39b00 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x1fc>
   39a7c:	e1a0000b 	mov	r0, fp
   39a80:	ebffd2b3 	bl	2e554 <rdtolower>
   39a84:	e350006e 	cmp	r0, #110	; 0x6e
   39a88:	1afffff2 	bne	39a58 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x154>
   39a8c:	e1a00004 	mov	r0, r4
   39a90:	e59f1318 	ldr	r1, [pc, #792]	; 39db0 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4ac>
   39a94:	eb000d6c 	bl	3d04c <Display::consolePut(char const*)>
   39a98:	e2866001 	add	r6, r6, #1
   39a9c:	e1a00005 	mov	r0, r5
   39aa0:	ebff3f3a 	bl	9790 <BusRaiderApp::selfTestHelperService()>
   39aa4:	e3560004 	cmp	r6, #4
   39aa8:	e2888008 	add	r8, r8, #8
   39aac:	1a00003b 	bne	39ba0 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x29c>
   39ab0:	e1a00005 	mov	r0, r5
   39ab4:	ebff3f35 	bl	9790 <BusRaiderApp::selfTestHelperService()>
   39ab8:	e1a00009 	mov	r0, r9
   39abc:	ebffe179 	bl	320a8 <BusRawAccess::busReqRelease()>
   39ac0:	e1a00007 	mov	r0, r7
   39ac4:	ebffddbe 	bl	311c4 <BusControl::rawAccessEnd()>
   39ac8:	e59d3008 	ldr	r3, [sp, #8]
   39acc:	e3530000 	cmp	r3, #0
   39ad0:	1a000084 	bne	39ce8 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x3e4>
   39ad4:	e3a0100a 	mov	r1, #10
   39ad8:	e1a00004 	mov	r0, r4
   39adc:	eb000d69 	bl	3d088 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39ae0:	e59f12cc 	ldr	r1, [pc, #716]	; 39db4 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4b0>
   39ae4:	e1a00004 	mov	r0, r4
   39ae8:	eb000d57 	bl	3d04c <Display::consolePut(char const*)>
   39aec:	e1a00004 	mov	r0, r4
   39af0:	e3a0100f 	mov	r1, #15
   39af4:	eb000d63 	bl	3d088 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39af8:	e28dd0fc 	add	sp, sp, #252	; 0xfc
   39afc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39b00:	e59f12b0 	ldr	r1, [pc, #688]	; 39db8 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4b4>
   39b04:	e1a00004 	mov	r0, r4
   39b08:	eb000d4f 	bl	3d04c <Display::consolePut(char const*)>
   39b0c:	e1a00005 	mov	r0, r5
   39b10:	ebff3f1e 	bl	9790 <BusRaiderApp::selfTestHelperService()>
   39b14:	e28d30f8 	add	r3, sp, #248	; 0xf8
   39b18:	e0833186 	add	r3, r3, r6, lsl #3
   39b1c:	e513b0e8 	ldr	fp, [r3, #-232]	; 0xffffff18
   39b20:	e51320e4 	ldr	r2, [r3, #-228]	; 0xffffff1c
   39b24:	e1a0100b 	mov	r1, fp
   39b28:	e1a00007 	mov	r0, r7
   39b2c:	e58d200c 	str	r2, [sp, #12]
   39b30:	eb001806 	bl	3fb50 <memTestDevice(BusControl&, unsigned long, unsigned long)>
   39b34:	e2503000 	subs	r3, r0, #0
   39b38:	e59d200c 	ldr	r2, [sp, #12]
   39b3c:	0a00001a 	beq	39bac <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x2a8>
   39b40:	e3a01009 	mov	r1, #9
   39b44:	e1a00004 	mov	r0, r4
   39b48:	e58d300c 	str	r3, [sp, #12]
   39b4c:	eb000d4d 	bl	3d088 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39b50:	e59d300c 	ldr	r3, [sp, #12]
   39b54:	e59f2260 	ldr	r2, [pc, #608]	; 39dbc <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4b8>
   39b58:	e3a01064 	mov	r1, #100	; 0x64
   39b5c:	e1a0000a 	mov	r0, sl
   39b60:	ebffd149 	bl	2e08c <snprintf>
   39b64:	e1a0100a 	mov	r1, sl
   39b68:	e1a00004 	mov	r0, r4
   39b6c:	eb000d36 	bl	3d04c <Display::consolePut(char const*)>
   39b70:	e1a00004 	mov	r0, r4
   39b74:	e3a0100f 	mov	r1, #15
   39b78:	eb000d42 	bl	3d088 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39b7c:	e59d3008 	ldr	r3, [sp, #8]
   39b80:	e1a00005 	mov	r0, r5
   39b84:	e2833001 	add	r3, r3, #1
   39b88:	e58d3008 	str	r3, [sp, #8]
   39b8c:	ebff3eff 	bl	9790 <BusRaiderApp::selfTestHelperService()>
   39b90:	e2866001 	add	r6, r6, #1
   39b94:	e3560004 	cmp	r6, #4
   39b98:	e2888008 	add	r8, r8, #8
   39b9c:	0affffc3 	beq	39ab0 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x1ac>
   39ba0:	e1a00005 	mov	r0, r5
   39ba4:	ebff3ef9 	bl	9790 <BusRaiderApp::selfTestHelperService()>
   39ba8:	eaffff9d 	b	39a24 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x120>
   39bac:	e1a0100b 	mov	r1, fp
   39bb0:	e1a00007 	mov	r0, r7
   39bb4:	eb001774 	bl	3f98c <memTestAddressBus(BusControl&, unsigned long, unsigned long)>
   39bb8:	e2503000 	subs	r3, r0, #0
   39bbc:	1a000059 	bne	39d28 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x424>
   39bc0:	e1a0100b 	mov	r1, fp
   39bc4:	e1a00007 	mov	r0, r7
   39bc8:	eb00174e 	bl	3f908 <memTestDataBus(BusControl&, unsigned long)>
   39bcc:	e250b000 	subs	fp, r0, #0
   39bd0:	0a000005 	beq	39bec <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x2e8>
   39bd4:	e3a01009 	mov	r1, #9
   39bd8:	e1a00004 	mov	r0, r4
   39bdc:	eb000d29 	bl	3d088 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39be0:	e1a0300b 	mov	r3, fp
   39be4:	e59f21d4 	ldr	r2, [pc, #468]	; 39dc0 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4bc>
   39be8:	eaffffda 	b	39b58 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x254>
   39bec:	e1a00004 	mov	r0, r4
   39bf0:	e3a0100a 	mov	r1, #10
   39bf4:	eb000d23 	bl	3d088 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39bf8:	e1a00004 	mov	r0, r4
   39bfc:	e59f11c0 	ldr	r1, [pc, #448]	; 39dc4 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4c0>
   39c00:	eb000d11 	bl	3d04c <Display::consolePut(char const*)>
   39c04:	e1a00004 	mov	r0, r4
   39c08:	e3a0100f 	mov	r1, #15
   39c0c:	eb000d1d 	bl	3d088 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39c10:	e1a00005 	mov	r0, r5
   39c14:	ebff3edd 	bl	9790 <BusRaiderApp::selfTestHelperService()>
   39c18:	eaffffdc 	b	39b90 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x28c>
   39c1c:	e3a01009 	mov	r1, #9
   39c20:	e1a00004 	mov	r0, r4
   39c24:	eb000d17 	bl	3d088 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39c28:	e59f1198 	ldr	r1, [pc, #408]	; 39dc8 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4c4>
   39c2c:	e1a00004 	mov	r0, r4
   39c30:	eb000d05 	bl	3d04c <Display::consolePut(char const*)>
   39c34:	e3560003 	cmp	r6, #3
   39c38:	90886106 	addls	r6, r8, r6, lsl #2
   39c3c:	95961020 	ldrls	r1, [r6, #32]
   39c40:	859f1184 	ldrhi	r1, [pc, #388]	; 39dcc <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4c8>
   39c44:	e1a00004 	mov	r0, r4
   39c48:	eb000cff 	bl	3d04c <Display::consolePut(char const*)>
   39c4c:	e1a00004 	mov	r0, r4
   39c50:	e59f1178 	ldr	r1, [pc, #376]	; 39dd0 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4cc>
   39c54:	eb000cfc 	bl	3d04c <Display::consolePut(char const*)>
   39c58:	e1a00004 	mov	r0, r4
   39c5c:	e59f1170 	ldr	r1, [pc, #368]	; 39dd4 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4d0>
   39c60:	eb000cf9 	bl	3d04c <Display::consolePut(char const*)>
   39c64:	e1a00004 	mov	r0, r4
   39c68:	e59f1168 	ldr	r1, [pc, #360]	; 39dd8 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4d4>
   39c6c:	eb000cf6 	bl	3d04c <Display::consolePut(char const*)>
   39c70:	e1a00004 	mov	r0, r4
   39c74:	e59f1160 	ldr	r1, [pc, #352]	; 39ddc <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4d8>
   39c78:	eb000cf3 	bl	3d04c <Display::consolePut(char const*)>
   39c7c:	e1a00004 	mov	r0, r4
   39c80:	e59f1158 	ldr	r1, [pc, #344]	; 39de0 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4dc>
   39c84:	eb000cf0 	bl	3d04c <Display::consolePut(char const*)>
   39c88:	e3a0100f 	mov	r1, #15
   39c8c:	e1a00004 	mov	r0, r4
   39c90:	eb000cfc 	bl	3d088 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39c94:	e1a00005 	mov	r0, r5
   39c98:	ebff3ebc 	bl	9790 <BusRaiderApp::selfTestHelperService()>
   39c9c:	e1a00009 	mov	r0, r9
   39ca0:	ebffe100 	bl	320a8 <BusRawAccess::busReqRelease()>
   39ca4:	e1a00007 	mov	r0, r7
   39ca8:	ebffdd45 	bl	311c4 <BusControl::rawAccessEnd()>
   39cac:	e3a01009 	mov	r1, #9
   39cb0:	e1a00004 	mov	r0, r4
   39cb4:	eb000cf3 	bl	3d088 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39cb8:	e28da030 	add	sl, sp, #48	; 0x30
   39cbc:	e3a03001 	mov	r3, #1
   39cc0:	e58d3008 	str	r3, [sp, #8]
   39cc4:	e59f3118 	ldr	r3, [pc, #280]	; 39de4 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4e0>
   39cc8:	e3a01064 	mov	r1, #100	; 0x64
   39ccc:	e58d3000 	str	r3, [sp]
   39cd0:	e1a0000a 	mov	r0, sl
   39cd4:	e59d3008 	ldr	r3, [sp, #8]
   39cd8:	e59f2108 	ldr	r2, [pc, #264]	; 39de8 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4e4>
   39cdc:	ebffd0ea 	bl	2e08c <snprintf>
   39ce0:	e1a0100a 	mov	r1, sl
   39ce4:	eaffff7e 	b	39ae4 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x1e0>
   39ce8:	e3a01009 	mov	r1, #9
   39cec:	e1a00004 	mov	r0, r4
   39cf0:	eb000ce4 	bl	3d088 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39cf4:	e59d3008 	ldr	r3, [sp, #8]
   39cf8:	e3530001 	cmp	r3, #1
   39cfc:	159f30e8 	ldrne	r3, [pc, #232]	; 39dec <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4e8>
   39d00:	1afffff0 	bne	39cc8 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x3c4>
   39d04:	eaffffec 	b	39cbc <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x3b8>
   39d08:	e1a00004 	mov	r0, r4
   39d0c:	e59f1094 	ldr	r1, [pc, #148]	; 39da8 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4a4>
   39d10:	e59f908c 	ldr	r9, [pc, #140]	; 39da4 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4a0>
   39d14:	eb000ccc 	bl	3d04c <Display::consolePut(char const*)>
   39d18:	e1a00005 	mov	r0, r5
   39d1c:	ebff3e9b 	bl	9790 <BusRaiderApp::selfTestHelperService()>
   39d20:	e0879009 	add	r9, r7, r9
   39d24:	eaffff32 	b	399f4 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0xf0>
   39d28:	e3a01009 	mov	r1, #9
   39d2c:	e1a00004 	mov	r0, r4
   39d30:	e58d300c 	str	r3, [sp, #12]
   39d34:	eb000cd3 	bl	3d088 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39d38:	e59d300c 	ldr	r3, [sp, #12]
   39d3c:	e59f20ac 	ldr	r2, [pc, #172]	; 39df0 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4ec>
   39d40:	e3a01064 	mov	r1, #100	; 0x64
   39d44:	e1a0000a 	mov	r0, sl
   39d48:	ebffd0cf 	bl	2e08c <snprintf>
   39d4c:	e1a0100a 	mov	r1, sl
   39d50:	e1a00004 	mov	r0, r4
   39d54:	eb000cbc 	bl	3d04c <Display::consolePut(char const*)>
   39d58:	e3a0100f 	mov	r1, #15
   39d5c:	e1a00004 	mov	r0, r4
   39d60:	eb000cc8 	bl	3d088 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39d64:	e1a0100b 	mov	r1, fp
   39d68:	e1a00007 	mov	r0, r7
   39d6c:	eb0016e5 	bl	3f908 <memTestDataBus(BusControl&, unsigned long)>
   39d70:	e59d3008 	ldr	r3, [sp, #8]
   39d74:	e250b000 	subs	fp, r0, #0
   39d78:	e2833001 	add	r3, r3, #1
   39d7c:	e58d3008 	str	r3, [sp, #8]
   39d80:	1affff93 	bne	39bd4 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x2d0>
   39d84:	e1a00005 	mov	r0, r5
   39d88:	ebff3e80 	bl	9790 <BusRaiderApp::selfTestHelperService()>
   39d8c:	eaffff7f 	b	39b90 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x28c>
   39d90:	00049074 	.word	0x00049074
   39d94:	000493cc 	.word	0x000493cc
   39d98:	00049084 	.word	0x00049084
   39d9c:	000490b8 	.word	0x000490b8
   39da0:	000490e0 	.word	0x000490e0
   39da4:	001106cc 	.word	0x001106cc
   39da8:	000491cc 	.word	0x000491cc
   39dac:	0004924c 	.word	0x0004924c
   39db0:	000492bc 	.word	0x000492bc
   39db4:	0004937c 	.word	0x0004937c
   39db8:	000492a4 	.word	0x000492a4
   39dbc:	000492d0 	.word	0x000492d0
   39dc0:	00049344 	.word	0x00049344
   39dc4:	000493bc 	.word	0x000493bc
   39dc8:	0004911c 	.word	0x0004911c
   39dcc:	000485d0 	.word	0x000485d0
   39dd0:	00049138 	.word	0x00049138
   39dd4:	00049178 	.word	0x00049178
   39dd8:	000491a0 	.word	0x000491a0
   39ddc:	000491d0 	.word	0x000491d0
   39de0:	00049208 	.word	0x00049208
   39de4:	000493c8 	.word	0x000493c8
   39de8:	0004939c 	.word	0x0004939c
   39dec:	000459e0 	.word	0x000459e0
   39df0:	00049308 	.word	0x00049308

00039df4 <TermAnsi::~TermAnsi()>:
   39df4:	e92d4010 	push	{r4, lr}
   39df8:	e1a04000 	mov	r4, r0
   39dfc:	e59f300c 	ldr	r3, [pc, #12]	; 39e10 <TermAnsi::~TermAnsi()+0x1c>
   39e00:	e5803000 	str	r3, [r0]
   39e04:	eb000786 	bl	3bc24 <TermEmu::~TermEmu()>
   39e08:	e1a00004 	mov	r0, r4
   39e0c:	e8bd8010 	pop	{r4, pc}
   39e10:	00049474 	.word	0x00049474

00039e14 <TermAnsi::~TermAnsi()>:
   39e14:	e92d4010 	push	{r4, lr}
   39e18:	e1a04000 	mov	r4, r0
   39e1c:	e59f3018 	ldr	r3, [pc, #24]	; 39e3c <TermAnsi::~TermAnsi()+0x28>
   39e20:	e5803000 	str	r3, [r0]
   39e24:	eb00077e 	bl	3bc24 <TermEmu::~TermEmu()>
   39e28:	e1a00004 	mov	r0, r4
   39e2c:	e59f100c 	ldr	r1, [pc, #12]	; 39e40 <TermAnsi::~TermAnsi()+0x2c>
   39e30:	ebffc472 	bl	2b000 <operator delete(void*, unsigned int)>
   39e34:	e1a00004 	mov	r0, r4
   39e38:	e8bd8010 	pop	{r4, pc}
   39e3c:	00049474 	.word	0x00049474
   39e40:	000008ac 	.word	0x000008ac

00039e44 <TermAnsi::TermAnsi()>:
   39e44:	e92d4010 	push	{r4, lr}
   39e48:	e1a04000 	mov	r4, r0
   39e4c:	eb0007b5 	bl	3bd28 <TermEmu::TermEmu()>
   39e50:	e1a03004 	mov	r3, r4
   39e54:	e3a0c020 	mov	ip, #32
   39e58:	e3a0e00f 	mov	lr, #15
   39e5c:	e3a02000 	mov	r2, #0
   39e60:	e59f0058 	ldr	r0, [pc, #88]	; 39ec0 <TermAnsi::TermAnsi()+0x7c>
   39e64:	e2841e82 	add	r1, r4, #2080	; 0x820
   39e68:	e483005c 	str	r0, [r3], #92	; 0x5c
   39e6c:	e281100c 	add	r1, r1, #12
   39e70:	e5c3c000 	strb	ip, [r3]
   39e74:	e5c3e001 	strb	lr, [r3, #1]
   39e78:	e5c32002 	strb	r2, [r3, #2]
   39e7c:	e5c32003 	strb	r2, [r3, #3]
   39e80:	e2833004 	add	r3, r3, #4
   39e84:	e1530001 	cmp	r3, r1
   39e88:	1afffff8 	bne	39e70 <TermAnsi::TermAnsi()+0x2c>
   39e8c:	e3a03ef2 	mov	r3, #3872	; 0xf20
   39e90:	e3a0105f 	mov	r1, #95	; 0x5f
   39e94:	e2840e8a 	add	r0, r4, #2208	; 0x8a0
   39e98:	e5842898 	str	r2, [r4, #2200]	; 0x898
   39e9c:	e584289c 	str	r2, [r4, #2204]	; 0x89c
   39ea0:	e5843890 	str	r3, [r4, #2192]	; 0x890
   39ea4:	e5843894 	str	r3, [r4, #2196]	; 0x894
   39ea8:	e1c020b0 	strh	r2, [r0]
   39eac:	e1a00004 	mov	r0, r4
   39eb0:	e5c428a2 	strb	r2, [r4, #2210]	; 0x8a2
   39eb4:	e584c8a8 	str	ip, [r4, #2216]	; 0x8a8
   39eb8:	e58418a4 	str	r1, [r4, #2212]	; 0x8a4
   39ebc:	e8bd8010 	pop	{r4, pc}
   39ec0:	00049474 	.word	0x00049474

00039ec4 <TermAnsi::fixcursor()>:
   39ec4:	e590c010 	ldr	ip, [r0, #16]
   39ec8:	e5902018 	ldr	r2, [r0, #24]
   39ecc:	e590100c 	ldr	r1, [r0, #12]
   39ed0:	e5903014 	ldr	r3, [r0, #20]
   39ed4:	e24cc001 	sub	ip, ip, #1
   39ed8:	e152000c 	cmp	r2, ip
   39edc:	e2411001 	sub	r1, r1, #1
   39ee0:	21a0200c 	movcs	r2, ip
   39ee4:	e1530001 	cmp	r3, r1
   39ee8:	21a03001 	movcs	r3, r1
   39eec:	e5802018 	str	r2, [r0, #24]
   39ef0:	e5803014 	str	r3, [r0, #20]
   39ef4:	e12fff1e 	bx	lr

00039ef8 <TermAnsi::consumearg()>:
   39ef8:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   39efc:	e3530007 	cmp	r3, #7
   39f00:	95902054 	ldrls	r2, [r0, #84]	; 0x54
   39f04:	92831001 	addls	r1, r3, #1
   39f08:	9283300c 	addls	r3, r3, #12
   39f0c:	95801050 	strls	r1, [r0, #80]	; 0x50
   39f10:	97802103 	strls	r2, [r0, r3, lsl #2]
   39f14:	e3a03000 	mov	r3, #0
   39f18:	e5803054 	str	r3, [r0, #84]	; 0x54
   39f1c:	e12fff1e 	bx	lr

00039f20 <TermAnsi::resetparser()>:
   39f20:	e92d4010 	push	{r4, lr}
   39f24:	e3a02020 	mov	r2, #32
   39f28:	e1a04000 	mov	r4, r0
   39f2c:	e3a01000 	mov	r1, #0
   39f30:	e2800030 	add	r0, r0, #48	; 0x30
   39f34:	ebffbff4 	bl	29f0c <memset>
   39f38:	e3a03000 	mov	r3, #0
   39f3c:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   39f40:	e5843050 	str	r3, [r4, #80]	; 0x50
   39f44:	e5843054 	str	r3, [r4, #84]	; 0x54
   39f48:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   39f4c:	e8bd8010 	pop	{r4, pc}

00039f50 <TermAnsi::dirtylines(unsigned int, unsigned int)>:
   39f50:	e3a0c001 	mov	ip, #1
   39f54:	e1510002 	cmp	r1, r2
   39f58:	e5c0c01c 	strb	ip, [r0, #28]
   39f5c:	212fff1e 	bxcs	lr
   39f60:	e2813e82 	add	r3, r1, #2080	; 0x820
   39f64:	e2822e82 	add	r2, r2, #2080	; 0x820
   39f68:	e283300c 	add	r3, r3, #12
   39f6c:	e282200c 	add	r2, r2, #12
   39f70:	e0803003 	add	r3, r0, r3
   39f74:	e0800002 	add	r0, r0, r2
   39f78:	e4c3c001 	strb	ip, [r3], #1
   39f7c:	e1530000 	cmp	r3, r0
   39f80:	1afffffc 	bne	39f78 <TermAnsi::dirtylines(unsigned int, unsigned int)+0x28>
   39f84:	e12fff1e 	bx	lr

00039f88 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>:
   39f88:	e92d4030 	push	{r4, r5, lr}
   39f8c:	e3a0e001 	mov	lr, #1
   39f90:	e5c0e01c 	strb	lr, [r0, #28]
   39f94:	e3a0e001 	mov	lr, #1
   39f98:	e590c010 	ldr	ip, [r0, #16]
   39f9c:	e15c0001 	cmp	ip, r1
   39fa0:	924c1001 	subls	r1, ip, #1
   39fa4:	e080c001 	add	ip, r0, r1
   39fa8:	e1520003 	cmp	r2, r3
   39fac:	e5cce82c 	strb	lr, [ip, #2092]	; 0x82c
   39fb0:	28bd8030 	popcs	{r4, r5, pc}
   39fb4:	e3a04ef2 	mov	r4, #3872	; 0xf20
   39fb8:	e2805028 	add	r5, r0, #40	; 0x28
   39fbc:	e590c00c 	ldr	ip, [r0, #12]
   39fc0:	e15c0002 	cmp	ip, r2
   39fc4:	98bd8030 	popls	{r4, r5, pc}
   39fc8:	e02c2c91 	mla	ip, r1, ip, r2
   39fcc:	e590e008 	ldr	lr, [r0, #8]
   39fd0:	e2822001 	add	r2, r2, #1
   39fd4:	e15c000e 	cmp	ip, lr
   39fd8:	21a0c005 	movcs	ip, r5
   39fdc:	3590e004 	ldrcc	lr, [r0, #4]
   39fe0:	308ec10c 	addcc	ip, lr, ip, lsl #2
   39fe4:	e1530002 	cmp	r3, r2
   39fe8:	e58c4000 	str	r4, [ip]
   39fec:	1afffff2 	bne	39fbc <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)+0x34>
   39ff0:	e8bd8030 	pop	{r4, r5, pc}

00039ff4 <TermAnsi::clearlines(unsigned int, unsigned int)>:
   39ff4:	e92d4070 	push	{r4, r5, r6, lr}
   39ff8:	e0815002 	add	r5, r1, r2
   39ffc:	e1510005 	cmp	r1, r5
   3a000:	28bd8070 	popcs	{r4, r5, r6, pc}
   3a004:	e1a04001 	mov	r4, r1
   3a008:	e5903010 	ldr	r3, [r0, #16]
   3a00c:	e1530004 	cmp	r3, r4
   3a010:	98bd8070 	popls	{r4, r5, r6, pc}
   3a014:	e1a01004 	mov	r1, r4
   3a018:	e3a02000 	mov	r2, #0
   3a01c:	e590300c 	ldr	r3, [r0, #12]
   3a020:	e2844001 	add	r4, r4, #1
   3a024:	ebffffd7 	bl	39f88 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3a028:	e1540005 	cmp	r4, r5
   3a02c:	1afffff5 	bne	3a008 <TermAnsi::clearlines(unsigned int, unsigned int)+0x14>
   3a030:	e8bd8070 	pop	{r4, r5, r6, pc}

0003a034 <TermAnsi::scrollUp(unsigned int, unsigned int)>:
   3a034:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a038:	e1e06001 	mvn	r6, r1
   3a03c:	e1a07001 	mov	r7, r1
   3a040:	e5901010 	ldr	r1, [r0, #16]
   3a044:	e5903004 	ldr	r3, [r0, #4]
   3a048:	e0866001 	add	r6, r6, r1
   3a04c:	e1560002 	cmp	r6, r2
   3a050:	21a06002 	movcs	r6, r2
   3a054:	e3530000 	cmp	r3, #0
   3a058:	13560000 	cmpne	r6, #0
   3a05c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a060:	e590c00c 	ldr	ip, [r0, #12]
   3a064:	e1a04000 	mov	r4, r0
   3a068:	e005069c 	mul	r5, ip, r6
   3a06c:	e375022e 	cmn	r5, #-536870910	; 0xe0000002
   3a070:	91a00105 	lslls	r0, r5, #2
   3a074:	83e00000 	mvnhi	r0, #0
   3a078:	ebffc3d8 	bl	2afe0 <operator new[](unsigned int)>
   3a07c:	e255c001 	subs	ip, r5, #1
   3a080:	51a03000 	movpl	r3, r0
   3a084:	e1a05000 	mov	r5, r0
   3a088:	53a0e020 	movpl	lr, #32
   3a08c:	53a0100f 	movpl	r1, #15
   3a090:	53a02000 	movpl	r2, #0
   3a094:	4a000007 	bmi	3a0b8 <TermAnsi::scrollUp(unsigned int, unsigned int)+0x84>
   3a098:	e24cc001 	sub	ip, ip, #1
   3a09c:	e37c0001 	cmn	ip, #1
   3a0a0:	e5c3e000 	strb	lr, [r3]
   3a0a4:	e5c31001 	strb	r1, [r3, #1]
   3a0a8:	e5c32002 	strb	r2, [r3, #2]
   3a0ac:	e5c32003 	strb	r2, [r3, #3]
   3a0b0:	e2833004 	add	r3, r3, #4
   3a0b4:	1afffff7 	bne	3a098 <TermAnsi::scrollUp(unsigned int, unsigned int)+0x64>
   3a0b8:	e594300c 	ldr	r3, [r4, #12]
   3a0bc:	e5941004 	ldr	r1, [r4, #4]
   3a0c0:	e0080396 	mul	r8, r6, r3
   3a0c4:	e1a09107 	lsl	r9, r7, #2
   3a0c8:	e1a08108 	lsl	r8, r8, #2
   3a0cc:	e0211399 	mla	r1, r9, r3, r1
   3a0d0:	e1a02008 	mov	r2, r8
   3a0d4:	e1a00005 	mov	r0, r5
   3a0d8:	ebffc1d4 	bl	2a830 <memcpy>
   3a0dc:	e5942010 	ldr	r2, [r4, #16]
   3a0e0:	e594000c 	ldr	r0, [r4, #12]
   3a0e4:	e5943004 	ldr	r3, [r4, #4]
   3a0e8:	e0422007 	sub	r2, r2, r7
   3a0ec:	e087c006 	add	ip, r7, r6
   3a0f0:	e1a01100 	lsl	r1, r0, #2
   3a0f4:	e0422006 	sub	r2, r2, r6
   3a0f8:	e0020291 	mul	r2, r1, r2
   3a0fc:	e0203099 	mla	r0, r9, r0, r3
   3a100:	e0213c91 	mla	r1, r1, ip, r3
   3a104:	ebffbfac 	bl	29fbc <memmove>
   3a108:	e5940010 	ldr	r0, [r4, #16]
   3a10c:	e594300c 	ldr	r3, [r4, #12]
   3a110:	e0400006 	sub	r0, r0, r6
   3a114:	e0030093 	mul	r3, r3, r0
   3a118:	e5940004 	ldr	r0, [r4, #4]
   3a11c:	e1a02008 	mov	r2, r8
   3a120:	e0800103 	add	r0, r0, r3, lsl #2
   3a124:	e1a01005 	mov	r1, r5
   3a128:	ebffc1c0 	bl	2a830 <memcpy>
   3a12c:	e1a00005 	mov	r0, r5
   3a130:	ebffc3b1 	bl	2affc <operator delete[](void*)>
   3a134:	e5941010 	ldr	r1, [r4, #16]
   3a138:	e1a02006 	mov	r2, r6
   3a13c:	e1a00004 	mov	r0, r4
   3a140:	e0411006 	sub	r1, r1, r6
   3a144:	ebffffaa 	bl	39ff4 <TermAnsi::clearlines(unsigned int, unsigned int)>
   3a148:	e3a02001 	mov	r2, #1
   3a14c:	e5943010 	ldr	r3, [r4, #16]
   3a150:	e5c4201c 	strb	r2, [r4, #28]
   3a154:	e1530007 	cmp	r3, r7
   3a158:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a15c:	e2870e82 	add	r0, r7, #2080	; 0x820
   3a160:	e0843003 	add	r3, r4, r3
   3a164:	e280000c 	add	r0, r0, #12
   3a168:	e2833e82 	add	r3, r3, #2080	; 0x820
   3a16c:	e0840000 	add	r0, r4, r0
   3a170:	e283300c 	add	r3, r3, #12
   3a174:	e4c02001 	strb	r2, [r0], #1
   3a178:	e1530000 	cmp	r3, r0
   3a17c:	1afffffc 	bne	3a174 <TermAnsi::scrollUp(unsigned int, unsigned int)+0x140>
   3a180:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003a184 <TermAnsi::writeCharAtCurs(int)>:
   3a184:	e92d4010 	push	{r4, lr}
   3a188:	e1a04000 	mov	r4, r0
   3a18c:	e5903018 	ldr	r3, [r0, #24]
   3a190:	e5942014 	ldr	r2, [r4, #20]
   3a194:	e590000c 	ldr	r0, [r0, #12]
   3a198:	e5d4e892 	ldrb	lr, [r4, #2194]	; 0x892
   3a19c:	e0222390 	mla	r2, r0, r3, r2
   3a1a0:	e5943008 	ldr	r3, [r4, #8]
   3a1a4:	e5d4c891 	ldrb	ip, [r4, #2193]	; 0x891
   3a1a8:	e1520003 	cmp	r2, r3
   3a1ac:	35943004 	ldrcc	r3, [r4, #4]
   3a1b0:	22843028 	addcs	r3, r4, #40	; 0x28
   3a1b4:	30833102 	addcc	r3, r3, r2, lsl #2
   3a1b8:	e5d42893 	ldrb	r2, [r4, #2195]	; 0x893
   3a1bc:	e5c31000 	strb	r1, [r3]
   3a1c0:	e5c3e002 	strb	lr, [r3, #2]
   3a1c4:	e5c3c001 	strb	ip, [r3, #1]
   3a1c8:	e5c32003 	strb	r2, [r3, #3]
   3a1cc:	e594300c 	ldr	r3, [r4, #12]
   3a1d0:	e5942014 	ldr	r2, [r4, #20]
   3a1d4:	e2433001 	sub	r3, r3, #1
   3a1d8:	e1520003 	cmp	r2, r3
   3a1dc:	e3a00001 	mov	r0, #1
   3a1e0:	23a02000 	movcs	r2, #0
   3a1e4:	e5943018 	ldr	r3, [r4, #24]
   3a1e8:	30822000 	addcc	r2, r2, r0
   3a1ec:	22833001 	addcs	r3, r3, #1
   3a1f0:	21c421f4 	strdcs	r2, [r4, #20]
   3a1f4:	35842014 	strcc	r2, [r4, #20]
   3a1f8:	e5942010 	ldr	r2, [r4, #16]
   3a1fc:	e5c4001c 	strb	r0, [r4, #28]
   3a200:	e1520003 	cmp	r2, r3
   3a204:	9a000002 	bls	3a214 <TermAnsi::writeCharAtCurs(int)+0x90>
   3a208:	e3a03001 	mov	r3, #1
   3a20c:	e5c4301c 	strb	r3, [r4, #28]
   3a210:	e8bd8010 	pop	{r4, pc}
   3a214:	e2422001 	sub	r2, r2, #1
   3a218:	e5842018 	str	r2, [r4, #24]
   3a21c:	e3a01000 	mov	r1, #0
   3a220:	e3a02001 	mov	r2, #1
   3a224:	e1a00004 	mov	r0, r4
   3a228:	ebffff81 	bl	3a034 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3a22c:	eafffff5 	b	3a208 <TermAnsi::writeCharAtCurs(int)+0x84>

0003a230 <TermAnsi::scrollDown(unsigned int, unsigned int)>:
   3a230:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a234:	e1e06001 	mvn	r6, r1
   3a238:	e1a07001 	mov	r7, r1
   3a23c:	e5901010 	ldr	r1, [r0, #16]
   3a240:	e5903004 	ldr	r3, [r0, #4]
   3a244:	e0866001 	add	r6, r6, r1
   3a248:	e1560002 	cmp	r6, r2
   3a24c:	21a06002 	movcs	r6, r2
   3a250:	e3530000 	cmp	r3, #0
   3a254:	13560000 	cmpne	r6, #0
   3a258:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a25c:	e590c00c 	ldr	ip, [r0, #12]
   3a260:	e1a04000 	mov	r4, r0
   3a264:	e005069c 	mul	r5, ip, r6
   3a268:	e375022e 	cmn	r5, #-536870910	; 0xe0000002
   3a26c:	91a00105 	lslls	r0, r5, #2
   3a270:	83e00000 	mvnhi	r0, #0
   3a274:	ebffc359 	bl	2afe0 <operator new[](unsigned int)>
   3a278:	e255c001 	subs	ip, r5, #1
   3a27c:	51a03000 	movpl	r3, r0
   3a280:	e1a05000 	mov	r5, r0
   3a284:	53a0e020 	movpl	lr, #32
   3a288:	53a0100f 	movpl	r1, #15
   3a28c:	53a02000 	movpl	r2, #0
   3a290:	4a000007 	bmi	3a2b4 <TermAnsi::scrollDown(unsigned int, unsigned int)+0x84>
   3a294:	e24cc001 	sub	ip, ip, #1
   3a298:	e37c0001 	cmn	ip, #1
   3a29c:	e5c3e000 	strb	lr, [r3]
   3a2a0:	e5c31001 	strb	r1, [r3, #1]
   3a2a4:	e5c32002 	strb	r2, [r3, #2]
   3a2a8:	e5c32003 	strb	r2, [r3, #3]
   3a2ac:	e2833004 	add	r3, r3, #4
   3a2b0:	1afffff7 	bne	3a294 <TermAnsi::scrollDown(unsigned int, unsigned int)+0x64>
   3a2b4:	e594300c 	ldr	r3, [r4, #12]
   3a2b8:	e5942010 	ldr	r2, [r4, #16]
   3a2bc:	e1a03103 	lsl	r3, r3, #2
   3a2c0:	e0090693 	mul	r9, r3, r6
   3a2c4:	e5941004 	ldr	r1, [r4, #4]
   3a2c8:	e0422006 	sub	r2, r2, r6
   3a2cc:	e0211293 	mla	r1, r3, r2, r1
   3a2d0:	e1a00005 	mov	r0, r5
   3a2d4:	e1a02009 	mov	r2, r9
   3a2d8:	ebffc154 	bl	2a830 <memcpy>
   3a2dc:	e5942010 	ldr	r2, [r4, #16]
   3a2e0:	e594100c 	ldr	r1, [r4, #12]
   3a2e4:	e5943004 	ldr	r3, [r4, #4]
   3a2e8:	e0422007 	sub	r2, r2, r7
   3a2ec:	e087c006 	add	ip, r7, r6
   3a2f0:	e1a00101 	lsl	r0, r1, #2
   3a2f4:	e1a08107 	lsl	r8, r7, #2
   3a2f8:	e0422006 	sub	r2, r2, r6
   3a2fc:	e0020290 	mul	r2, r0, r2
   3a300:	e0213198 	mla	r1, r8, r1, r3
   3a304:	e0203c90 	mla	r0, r0, ip, r3
   3a308:	ebffbf2b 	bl	29fbc <memmove>
   3a30c:	e5943004 	ldr	r3, [r4, #4]
   3a310:	e594000c 	ldr	r0, [r4, #12]
   3a314:	e1a02009 	mov	r2, r9
   3a318:	e0203890 	mla	r0, r0, r8, r3
   3a31c:	e1a01005 	mov	r1, r5
   3a320:	ebffc142 	bl	2a830 <memcpy>
   3a324:	e1a00005 	mov	r0, r5
   3a328:	ebffc333 	bl	2affc <operator delete[](void*)>
   3a32c:	e1a02006 	mov	r2, r6
   3a330:	e1a01007 	mov	r1, r7
   3a334:	e1a00004 	mov	r0, r4
   3a338:	ebffff2d 	bl	39ff4 <TermAnsi::clearlines(unsigned int, unsigned int)>
   3a33c:	e3a02001 	mov	r2, #1
   3a340:	e5943010 	ldr	r3, [r4, #16]
   3a344:	e5c4201c 	strb	r2, [r4, #28]
   3a348:	e1530007 	cmp	r3, r7
   3a34c:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a350:	e2870e82 	add	r0, r7, #2080	; 0x820
   3a354:	e0843003 	add	r3, r4, r3
   3a358:	e280000c 	add	r0, r0, #12
   3a35c:	e2833e82 	add	r3, r3, #2080	; 0x820
   3a360:	e0840000 	add	r0, r4, r0
   3a364:	e283300c 	add	r3, r3, #12
   3a368:	e4c02001 	strb	r2, [r0], #1
   3a36c:	e1530000 	cmp	r3, r0
   3a370:	1afffffc 	bne	3a368 <TermAnsi::scrollDown(unsigned int, unsigned int)+0x138>
   3a374:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003a378 <TermAnsi::ed()>:
   3a378:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3a37c:	e92d4070 	push	{r4, r5, r6, lr}
   3a380:	e3530001 	cmp	r3, #1
   3a384:	e1a04000 	mov	r4, r0
   3a388:	e5905010 	ldr	r5, [r0, #16]
   3a38c:	0a000010 	beq	3a3d4 <TermAnsi::ed()+0x5c>
   3a390:	e3530002 	cmp	r3, #2
   3a394:	0a00000c 	beq	3a3cc <TermAnsi::ed()+0x54>
   3a398:	e3530000 	cmp	r3, #0
   3a39c:	18bd8070 	popne	{r4, r5, r6, pc}
   3a3a0:	e5901018 	ldr	r1, [r0, #24]
   3a3a4:	e590300c 	ldr	r3, [r0, #12]
   3a3a8:	e2816001 	add	r6, r1, #1
   3a3ac:	e5902014 	ldr	r2, [r0, #20]
   3a3b0:	e0455006 	sub	r5, r5, r6
   3a3b4:	ebfffef3 	bl	39f88 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3a3b8:	e1a02005 	mov	r2, r5
   3a3bc:	e1a01006 	mov	r1, r6
   3a3c0:	e1a00004 	mov	r0, r4
   3a3c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   3a3c8:	eaffff09 	b	39ff4 <TermAnsi::clearlines(unsigned int, unsigned int)>
   3a3cc:	e3a06000 	mov	r6, #0
   3a3d0:	eafffff8 	b	3a3b8 <TermAnsi::ed()+0x40>
   3a3d4:	e5901018 	ldr	r1, [r0, #24]
   3a3d8:	e3a02000 	mov	r2, #0
   3a3dc:	e5903014 	ldr	r3, [r0, #20]
   3a3e0:	e2415001 	sub	r5, r1, #1
   3a3e4:	e3a06000 	mov	r6, #0
   3a3e8:	ebfffee6 	bl	39f88 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3a3ec:	eafffff1 	b	3a3b8 <TermAnsi::ed()+0x40>

0003a3f0 <TermAnsi::el()>:
   3a3f0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3a3f4:	e3530001 	cmp	r3, #1
   3a3f8:	0a00000b 	beq	3a42c <TermAnsi::el()+0x3c>
   3a3fc:	e3530002 	cmp	r3, #2
   3a400:	0a000005 	beq	3a41c <TermAnsi::el()+0x2c>
   3a404:	e3530000 	cmp	r3, #0
   3a408:	112fff1e 	bxne	lr
   3a40c:	e590300c 	ldr	r3, [r0, #12]
   3a410:	e5902014 	ldr	r2, [r0, #20]
   3a414:	e5901018 	ldr	r1, [r0, #24]
   3a418:	eafffeda 	b	39f88 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3a41c:	e3a02000 	mov	r2, #0
   3a420:	e590300c 	ldr	r3, [r0, #12]
   3a424:	e5901018 	ldr	r1, [r0, #24]
   3a428:	eafffed6 	b	39f88 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3a42c:	e590200c 	ldr	r2, [r0, #12]
   3a430:	e5903014 	ldr	r3, [r0, #20]
   3a434:	e2422001 	sub	r2, r2, #1
   3a438:	e2833001 	add	r3, r3, #1
   3a43c:	e1520003 	cmp	r2, r3
   3a440:	31a03002 	movcc	r3, r2
   3a444:	e5901018 	ldr	r1, [r0, #24]
   3a448:	e3a02000 	mov	r2, #0
   3a44c:	eafffecd 	b	39f88 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

0003a450 <TermAnsi::dch()>:
   3a450:	e590c004 	ldr	ip, [r0, #4]
   3a454:	e35c0000 	cmp	ip, #0
   3a458:	012fff1e 	bxeq	lr
   3a45c:	e92d4070 	push	{r4, r5, r6, lr}
   3a460:	e5905030 	ldr	r5, [r0, #48]	; 0x30
   3a464:	e590200c 	ldr	r2, [r0, #12]
   3a468:	e3550001 	cmp	r5, #1
   3a46c:	33a05001 	movcc	r5, #1
   3a470:	e1a04000 	mov	r4, r0
   3a474:	e1c001d4 	ldrd	r0, [r0, #20]
   3a478:	e0423000 	sub	r3, r2, r0
   3a47c:	e1550003 	cmp	r5, r3
   3a480:	21a05003 	movcs	r5, r3
   3a484:	e0200291 	mla	r0, r1, r2, r0
   3a488:	e0433005 	sub	r3, r3, r5
   3a48c:	e0020392 	mul	r2, r2, r3
   3a490:	e0801005 	add	r1, r0, r5
   3a494:	e1a02102 	lsl	r2, r2, #2
   3a498:	e08c1101 	add	r1, ip, r1, lsl #2
   3a49c:	e08c0100 	add	r0, ip, r0, lsl #2
   3a4a0:	ebffbec5 	bl	29fbc <memmove>
   3a4a4:	e594300c 	ldr	r3, [r4, #12]
   3a4a8:	e5942014 	ldr	r2, [r4, #20]
   3a4ac:	e1a00004 	mov	r0, r4
   3a4b0:	e0432002 	sub	r2, r3, r2
   3a4b4:	e5941018 	ldr	r1, [r4, #24]
   3a4b8:	e0422005 	sub	r2, r2, r5
   3a4bc:	e8bd4070 	pop	{r4, r5, r6, lr}
   3a4c0:	eafffeb0 	b	39f88 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

0003a4c4 <TermAnsi::ich()>:
   3a4c4:	e590c004 	ldr	ip, [r0, #4]
   3a4c8:	e35c0000 	cmp	ip, #0
   3a4cc:	012fff1e 	bxeq	lr
   3a4d0:	e92d4070 	push	{r4, r5, r6, lr}
   3a4d4:	e5905030 	ldr	r5, [r0, #48]	; 0x30
   3a4d8:	e1a04000 	mov	r4, r0
   3a4dc:	e3550001 	cmp	r5, #1
   3a4e0:	33a05001 	movcc	r5, #1
   3a4e4:	e590000c 	ldr	r0, [r0, #12]
   3a4e8:	e5941014 	ldr	r1, [r4, #20]
   3a4ec:	e2402001 	sub	r2, r0, #1
   3a4f0:	e0422001 	sub	r2, r2, r1
   3a4f4:	e1550002 	cmp	r5, r2
   3a4f8:	21a05002 	movcs	r5, r2
   3a4fc:	e0423005 	sub	r3, r2, r5
   3a500:	e1530002 	cmp	r3, r2
   3a504:	31a02003 	movcc	r2, r3
   3a508:	e5943018 	ldr	r3, [r4, #24]
   3a50c:	e0020290 	mul	r2, r0, r2
   3a510:	e0211093 	mla	r1, r3, r0, r1
   3a514:	e0810005 	add	r0, r1, r5
   3a518:	e1a02102 	lsl	r2, r2, #2
   3a51c:	e08c1101 	add	r1, ip, r1, lsl #2
   3a520:	e08c0100 	add	r0, ip, r0, lsl #2
   3a524:	ebffbea4 	bl	29fbc <memmove>
   3a528:	e1a03005 	mov	r3, r5
   3a52c:	e1a00004 	mov	r0, r4
   3a530:	e5942014 	ldr	r2, [r4, #20]
   3a534:	e5941018 	ldr	r1, [r4, #24]
   3a538:	e8bd4070 	pop	{r4, r5, r6, lr}
   3a53c:	eafffe91 	b	39f88 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

0003a540 <TermAnsi::rep()>:
   3a540:	e5902014 	ldr	r2, [r0, #20]
   3a544:	e3520000 	cmp	r2, #0
   3a548:	012fff1e 	bxeq	lr
   3a54c:	e92d4070 	push	{r4, r5, r6, lr}
   3a550:	e1a05000 	mov	r5, r0
   3a554:	e3a04000 	mov	r4, #0
   3a558:	e5903018 	ldr	r3, [r0, #24]
   3a55c:	e590000c 	ldr	r0, [r0, #12]
   3a560:	e5951004 	ldr	r1, [r5, #4]
   3a564:	e0232390 	mla	r3, r0, r3, r2
   3a568:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   3a56c:	e7d16103 	ldrb	r6, [r1, r3, lsl #2]
   3a570:	e1a01006 	mov	r1, r6
   3a574:	e1a00005 	mov	r0, r5
   3a578:	ebffff01 	bl	3a184 <TermAnsi::writeCharAtCurs(int)>
   3a57c:	e5953030 	ldr	r3, [r5, #48]	; 0x30
   3a580:	e2844001 	add	r4, r4, #1
   3a584:	e3530001 	cmp	r3, #1
   3a588:	33a03001 	movcc	r3, #1
   3a58c:	e1530004 	cmp	r3, r4
   3a590:	8afffff6 	bhi	3a570 <TermAnsi::rep()+0x30>
   3a594:	e8bd8070 	pop	{r4, r5, r6, pc}

0003a598 <TermAnsi::sgr()>:
   3a598:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   3a59c:	e3530000 	cmp	r3, #0
   3a5a0:	1a000002 	bne	3a5b0 <TermAnsi::sgr()+0x18>
   3a5a4:	e5d01893 	ldrb	r1, [r0, #2195]	; 0x893
   3a5a8:	e5c01893 	strb	r1, [r0, #2195]	; 0x893
   3a5ac:	e12fff1e 	bx	lr
   3a5b0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a5b4:	e590e030 	ldr	lr, [r0, #48]	; 0x30
   3a5b8:	e24e201e 	sub	r2, lr, #30
   3a5bc:	e3520012 	cmp	r2, #18
   3a5c0:	9a000048 	bls	3a6e8 <TermAnsi::sgr()+0x150>
   3a5c4:	e35e0013 	cmp	lr, #19
   3a5c8:	e280c030 	add	ip, r0, #48	; 0x30
   3a5cc:	e08cc103 	add	ip, ip, r3, lsl #2
   3a5d0:	93a08020 	movls	r8, #32
   3a5d4:	83a08000 	movhi	r8, #0
   3a5d8:	93a07010 	movls	r7, #16
   3a5dc:	83a07000 	movhi	r7, #0
   3a5e0:	93a06008 	movls	r6, #8
   3a5e4:	83a06000 	movhi	r6, #0
   3a5e8:	93a05004 	movls	r5, #4
   3a5ec:	83a05000 	movhi	r5, #0
   3a5f0:	93a04002 	movls	r4, #2
   3a5f4:	83a04000 	movhi	r4, #0
   3a5f8:	e1a0300e 	mov	r3, lr
   3a5fc:	e3a0a00f 	mov	sl, #15
   3a600:	e3a09000 	mov	r9, #0
   3a604:	e5d01893 	ldrb	r1, [r0, #2195]	; 0x893
   3a608:	e2802034 	add	r2, r0, #52	; 0x34
   3a60c:	e353001c 	cmp	r3, #28
   3a610:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   3a614:	ea00001d 	b	3a690 <TermAnsi::sgr()+0xf8>
   3a618:	0003a6d8 	.word	0x0003a6d8
   3a61c:	0003a6cc 	.word	0x0003a6cc
   3a620:	0003a6c4 	.word	0x0003a6c4
   3a624:	0003a690 	.word	0x0003a690
   3a628:	0003a6bc 	.word	0x0003a6bc
   3a62c:	0003a6b4 	.word	0x0003a6b4
   3a630:	0003a690 	.word	0x0003a690
   3a634:	0003a6a0 	.word	0x0003a6a0
   3a638:	0003a68c 	.word	0x0003a68c
   3a63c:	0003a690 	.word	0x0003a690
   3a640:	0003a690 	.word	0x0003a690
   3a644:	0003a690 	.word	0x0003a690
   3a648:	0003a690 	.word	0x0003a690
   3a64c:	0003a690 	.word	0x0003a690
   3a650:	0003a690 	.word	0x0003a690
   3a654:	0003a690 	.word	0x0003a690
   3a658:	0003a690 	.word	0x0003a690
   3a65c:	0003a690 	.word	0x0003a690
   3a660:	0003a690 	.word	0x0003a690
   3a664:	0003a690 	.word	0x0003a690
   3a668:	0003a690 	.word	0x0003a690
   3a66c:	0003a690 	.word	0x0003a690
   3a670:	0003a6cc 	.word	0x0003a6cc
   3a674:	0003a6c4 	.word	0x0003a6c4
   3a678:	0003a6bc 	.word	0x0003a6bc
   3a67c:	0003a6b4 	.word	0x0003a6b4
   3a680:	0003a690 	.word	0x0003a690
   3a684:	0003a6a0 	.word	0x0003a6a0
   3a688:	0003a68c 	.word	0x0003a68c
   3a68c:	e1881001 	orr	r1, r8, r1
   3a690:	e15c0002 	cmp	ip, r2
   3a694:	0a000004 	beq	3a6ac <TermAnsi::sgr()+0x114>
   3a698:	e4923004 	ldr	r3, [r2], #4
   3a69c:	eaffffda 	b	3a60c <TermAnsi::sgr()+0x74>
   3a6a0:	e15c0002 	cmp	ip, r2
   3a6a4:	e1871001 	orr	r1, r7, r1
   3a6a8:	1afffffa 	bne	3a698 <TermAnsi::sgr()+0x100>
   3a6ac:	e5c01893 	strb	r1, [r0, #2195]	; 0x893
   3a6b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a6b4:	e1861001 	orr	r1, r6, r1
   3a6b8:	eafffff4 	b	3a690 <TermAnsi::sgr()+0xf8>
   3a6bc:	e1851001 	orr	r1, r5, r1
   3a6c0:	eafffff2 	b	3a690 <TermAnsi::sgr()+0xf8>
   3a6c4:	e1841001 	orr	r1, r4, r1
   3a6c8:	eafffff0 	b	3a690 <TermAnsi::sgr()+0xf8>
   3a6cc:	e35e0013 	cmp	lr, #19
   3a6d0:	93811001 	orrls	r1, r1, #1
   3a6d4:	eaffffed 	b	3a690 <TermAnsi::sgr()+0xf8>
   3a6d8:	e3a01000 	mov	r1, #0
   3a6dc:	e5c0a891 	strb	sl, [r0, #2193]	; 0x891
   3a6e0:	e5c09892 	strb	r9, [r0, #2194]	; 0x892
   3a6e4:	eaffffe9 	b	3a690 <TermAnsi::sgr()+0xf8>
   3a6e8:	e3530001 	cmp	r3, #1
   3a6ec:	0a00000d 	beq	3a728 <TermAnsi::sgr()+0x190>
   3a6f0:	e3530002 	cmp	r3, #2
   3a6f4:	0a000015 	beq	3a750 <TermAnsi::sgr()+0x1b8>
   3a6f8:	e3530003 	cmp	r3, #3
   3a6fc:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a700:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   3a704:	e3530005 	cmp	r3, #5
   3a708:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a70c:	e35e0027 	cmp	lr, #39	; 0x27
   3a710:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   3a714:	e2800e89 	add	r0, r0, #2192	; 0x890
   3a718:	8a00000a 	bhi	3a748 <TermAnsi::sgr()+0x1b0>
   3a71c:	e2800001 	add	r0, r0, #1
   3a720:	e5c03000 	strb	r3, [r0]
   3a724:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a728:	e59f305c 	ldr	r3, [pc, #92]	; 3a78c <TermAnsi::sgr()+0x1f4>
   3a72c:	e35e0027 	cmp	lr, #39	; 0x27
   3a730:	e0831293 	umull	r1, r3, r3, r2
   3a734:	e1a031a3 	lsr	r3, r3, #3
   3a738:	e0833103 	add	r3, r3, r3, lsl #2
   3a73c:	e2800e89 	add	r0, r0, #2192	; 0x890
   3a740:	e0423083 	sub	r3, r2, r3, lsl #1
   3a744:	9afffff4 	bls	3a71c <TermAnsi::sgr()+0x184>
   3a748:	e2800002 	add	r0, r0, #2
   3a74c:	eafffff3 	b	3a720 <TermAnsi::sgr()+0x188>
   3a750:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   3a754:	e3530001 	cmp	r3, #1
   3a758:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a75c:	e59f3028 	ldr	r3, [pc, #40]	; 3a78c <TermAnsi::sgr()+0x1f4>
   3a760:	e2800e89 	add	r0, r0, #2192	; 0x890
   3a764:	e0831293 	umull	r1, r3, r3, r2
   3a768:	e1a031a3 	lsr	r3, r3, #3
   3a76c:	e0833103 	add	r3, r3, r3, lsl #2
   3a770:	e0423083 	sub	r3, r2, r3, lsl #1
   3a774:	e35e0027 	cmp	lr, #39	; 0x27
   3a778:	e6ef3073 	uxtb	r3, r3
   3a77c:	92800001 	addls	r0, r0, #1
   3a780:	82800002 	addhi	r0, r0, #2
   3a784:	e2833008 	add	r3, r3, #8
   3a788:	eaffffe4 	b	3a720 <TermAnsi::sgr()+0x188>
   3a78c:	cccccccd 	.word	0xcccccccd

0003a790 <TermAnsi::handleAnsiChar(unsigned char)>:
   3a790:	e3a03000 	mov	r3, #0
   3a794:	e92d4070 	push	{r4, r5, r6, lr}
   3a798:	e5d0502c 	ldrb	r5, [r0, #44]	; 0x2c
   3a79c:	e24dd008 	sub	sp, sp, #8
   3a7a0:	e1550003 	cmp	r5, r3
   3a7a4:	e1a04000 	mov	r4, r0
   3a7a8:	e1a06001 	mov	r6, r1
   3a7ac:	e5cd1004 	strb	r1, [sp, #4]
   3a7b0:	e5cd3005 	strb	r3, [sp, #5]
   3a7b4:	0a00000e 	beq	3a7f4 <TermAnsi::handleAnsiChar(unsigned char)+0x64>
   3a7b8:	e3550001 	cmp	r5, #1
   3a7bc:	0a0000a7 	beq	3aa60 <TermAnsi::handleAnsiChar(unsigned char)+0x2d0>
   3a7c0:	e3550002 	cmp	r5, #2
   3a7c4:	0a000173 	beq	3ad98 <TermAnsi::handleAnsiChar(unsigned char)+0x608>
   3a7c8:	e3a02020 	mov	r2, #32
   3a7cc:	e3a01000 	mov	r1, #0
   3a7d0:	e2840030 	add	r0, r4, #48	; 0x30
   3a7d4:	ebffbdcc 	bl	29f0c <memset>
   3a7d8:	e3a03000 	mov	r3, #0
   3a7dc:	e1a00003 	mov	r0, r3
   3a7e0:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3a7e4:	e5843050 	str	r3, [r4, #80]	; 0x50
   3a7e8:	e5843054 	str	r3, [r4, #84]	; 0x54
   3a7ec:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   3a7f0:	ea000021 	b	3a87c <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   3a7f4:	e59f0fdc 	ldr	r0, [pc, #4060]	; 3b7d8 <TermAnsi::handleAnsiChar(unsigned char)+0x1048>
   3a7f8:	ebffbedf 	bl	2a37c <strchr>
   3a7fc:	e3500000 	cmp	r0, #0
   3a800:	0a00001f 	beq	3a884 <TermAnsi::handleAnsiChar(unsigned char)+0xf4>
   3a804:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a808:	e5940010 	ldr	r0, [r4, #16]
   3a80c:	e3530007 	cmp	r3, #7
   3a810:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a814:	92831001 	addls	r1, r3, #1
   3a818:	9283300c 	addls	r3, r3, #12
   3a81c:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a820:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a824:	e594100c 	ldr	r1, [r4, #12]
   3a828:	e5942018 	ldr	r2, [r4, #24]
   3a82c:	e5943014 	ldr	r3, [r4, #20]
   3a830:	e2400001 	sub	r0, r0, #1
   3a834:	e1520000 	cmp	r2, r0
   3a838:	e2411001 	sub	r1, r1, #1
   3a83c:	21a02000 	movcs	r2, r0
   3a840:	e1530001 	cmp	r3, r1
   3a844:	e3a05000 	mov	r5, #0
   3a848:	21a03001 	movcs	r3, r1
   3a84c:	e5842018 	str	r2, [r4, #24]
   3a850:	e1a01005 	mov	r1, r5
   3a854:	e3a02020 	mov	r2, #32
   3a858:	e5843014 	str	r3, [r4, #20]
   3a85c:	e5845054 	str	r5, [r4, #84]	; 0x54
   3a860:	e2840030 	add	r0, r4, #48	; 0x30
   3a864:	ebffbda8 	bl	29f0c <memset>
   3a868:	e3a00001 	mov	r0, #1
   3a86c:	e5c4502c 	strb	r5, [r4, #44]	; 0x2c
   3a870:	e5845050 	str	r5, [r4, #80]	; 0x50
   3a874:	e5845054 	str	r5, [r4, #84]	; 0x54
   3a878:	e5c45058 	strb	r5, [r4, #88]	; 0x58
   3a87c:	e28dd008 	add	sp, sp, #8
   3a880:	e8bd8070 	pop	{r4, r5, r6, pc}
   3a884:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3a888:	e3550000 	cmp	r5, #0
   3a88c:	1affffc9 	bne	3a7b8 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3a890:	e1a01006 	mov	r1, r6
   3a894:	e59f0f40 	ldr	r0, [pc, #3904]	; 3b7dc <TermAnsi::handleAnsiChar(unsigned char)+0x104c>
   3a898:	ebffbeb7 	bl	2a37c <strchr>
   3a89c:	e3500000 	cmp	r0, #0
   3a8a0:	0a000025 	beq	3a93c <TermAnsi::handleAnsiChar(unsigned char)+0x1ac>
   3a8a4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a8a8:	e5940014 	ldr	r0, [r4, #20]
   3a8ac:	e3530007 	cmp	r3, #7
   3a8b0:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a8b4:	92831001 	addls	r1, r3, #1
   3a8b8:	9283300c 	addls	r3, r3, #12
   3a8bc:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a8c0:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a8c4:	e3a02000 	mov	r2, #0
   3a8c8:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a8cc:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a8d0:	e1530002 	cmp	r3, r2
   3a8d4:	1a000001 	bne	3a8e0 <TermAnsi::handleAnsiChar(unsigned char)+0x150>
   3a8d8:	e3500000 	cmp	r0, #0
   3a8dc:	12400001 	subne	r0, r0, #1
   3a8e0:	e5941010 	ldr	r1, [r4, #16]
   3a8e4:	e5942018 	ldr	r2, [r4, #24]
   3a8e8:	e594300c 	ldr	r3, [r4, #12]
   3a8ec:	e2411001 	sub	r1, r1, #1
   3a8f0:	e1520001 	cmp	r2, r1
   3a8f4:	e2433001 	sub	r3, r3, #1
   3a8f8:	21a02001 	movcs	r2, r1
   3a8fc:	e1530000 	cmp	r3, r0
   3a900:	21a03000 	movcs	r3, r0
   3a904:	e5842018 	str	r2, [r4, #24]
   3a908:	e5843014 	str	r3, [r4, #20]
   3a90c:	e3a02020 	mov	r2, #32
   3a910:	e3a01000 	mov	r1, #0
   3a914:	e2840030 	add	r0, r4, #48	; 0x30
   3a918:	ebffbd7b 	bl	29f0c <memset>
   3a91c:	e3a03000 	mov	r3, #0
   3a920:	e3a00001 	mov	r0, #1
   3a924:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3a928:	e5843050 	str	r3, [r4, #80]	; 0x50
   3a92c:	e5843054 	str	r3, [r4, #84]	; 0x54
   3a930:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   3a934:	e28dd008 	add	sp, sp, #8
   3a938:	e8bd8070 	pop	{r4, r5, r6, pc}
   3a93c:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3a940:	e3550000 	cmp	r5, #0
   3a944:	1affff9b 	bne	3a7b8 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3a948:	e1a01006 	mov	r1, r6
   3a94c:	e59f0e8c 	ldr	r0, [pc, #3724]	; 3b7e0 <TermAnsi::handleAnsiChar(unsigned char)+0x1050>
   3a950:	ebffbe89 	bl	2a37c <strchr>
   3a954:	e3500000 	cmp	r0, #0
   3a958:	0a000020 	beq	3a9e0 <TermAnsi::handleAnsiChar(unsigned char)+0x250>
   3a95c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3a960:	e3530007 	cmp	r3, #7
   3a964:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3a968:	92831001 	addls	r1, r3, #1
   3a96c:	9283300c 	addls	r3, r3, #12
   3a970:	95841050 	strls	r1, [r4, #80]	; 0x50
   3a974:	97842103 	strls	r2, [r4, r3, lsl #2]
   3a978:	e3a02000 	mov	r2, #0
   3a97c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3a980:	e594100c 	ldr	r1, [r4, #12]
   3a984:	e1530002 	cmp	r3, r2
   3a988:	e5842054 	str	r2, [r4, #84]	; 0x54
   3a98c:	e5943014 	ldr	r3, [r4, #20]
   3a990:	e2411001 	sub	r1, r1, #1
   3a994:	1a000009 	bne	3a9c0 <TermAnsi::handleAnsiChar(unsigned char)+0x230>
   3a998:	e2833001 	add	r3, r3, #1
   3a99c:	e284c058 	add	ip, r4, #88	; 0x58
   3a9a0:	ea000003 	b	3a9b4 <TermAnsi::handleAnsiChar(unsigned char)+0x224>
   3a9a4:	e7dc0102 	ldrb	r0, [ip, r2, lsl #2]
   3a9a8:	e350002a 	cmp	r0, #42	; 0x2a
   3a9ac:	0a000003 	beq	3a9c0 <TermAnsi::handleAnsiChar(unsigned char)+0x230>
   3a9b0:	e1a03002 	mov	r3, r2
   3a9b4:	e1510003 	cmp	r1, r3
   3a9b8:	e2832001 	add	r2, r3, #1
   3a9bc:	8afffff8 	bhi	3a9a4 <TermAnsi::handleAnsiChar(unsigned char)+0x214>
   3a9c0:	e5940010 	ldr	r0, [r4, #16]
   3a9c4:	e5942018 	ldr	r2, [r4, #24]
   3a9c8:	e2400001 	sub	r0, r0, #1
   3a9cc:	e1520000 	cmp	r2, r0
   3a9d0:	21a02000 	movcs	r2, r0
   3a9d4:	e1510003 	cmp	r1, r3
   3a9d8:	31a03001 	movcc	r3, r1
   3a9dc:	eaffffc8 	b	3a904 <TermAnsi::handleAnsiChar(unsigned char)+0x174>
   3a9e0:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3a9e4:	e3550000 	cmp	r5, #0
   3a9e8:	1affff72 	bne	3a7b8 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3a9ec:	e1a01006 	mov	r1, r6
   3a9f0:	e59f0dec 	ldr	r0, [pc, #3564]	; 3b7e4 <TermAnsi::handleAnsiChar(unsigned char)+0x1054>
   3a9f4:	ebffbe60 	bl	2a37c <strchr>
   3a9f8:	e3500000 	cmp	r0, #0
   3a9fc:	0a000039 	beq	3aae8 <TermAnsi::handleAnsiChar(unsigned char)+0x358>
   3aa00:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3aa04:	e3530007 	cmp	r3, #7
   3aa08:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3aa0c:	92831001 	addls	r1, r3, #1
   3aa10:	9283300c 	addls	r3, r3, #12
   3aa14:	95841050 	strls	r1, [r4, #80]	; 0x50
   3aa18:	97842103 	strls	r2, [r4, r3, lsl #2]
   3aa1c:	e3a03000 	mov	r3, #0
   3aa20:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3aa24:	e5843054 	str	r3, [r4, #84]	; 0x54
   3aa28:	e1510003 	cmp	r1, r3
   3aa2c:	0a000057 	beq	3ab90 <TermAnsi::handleAnsiChar(unsigned char)+0x400>
   3aa30:	e5942010 	ldr	r2, [r4, #16]
   3aa34:	e5940018 	ldr	r0, [r4, #24]
   3aa38:	e2423001 	sub	r3, r2, #1
   3aa3c:	e1530000 	cmp	r3, r0
   3aa40:	21a03000 	movcs	r3, r0
   3aa44:	e594100c 	ldr	r1, [r4, #12]
   3aa48:	e5942014 	ldr	r2, [r4, #20]
   3aa4c:	e2411001 	sub	r1, r1, #1
   3aa50:	e1520001 	cmp	r2, r1
   3aa54:	21a02001 	movcs	r2, r1
   3aa58:	e1c421f4 	strd	r2, [r4, #20]
   3aa5c:	eaffffaa 	b	3a90c <TermAnsi::handleAnsiChar(unsigned char)+0x17c>
   3aa60:	e1a01006 	mov	r1, r6
   3aa64:	e59f0d7c 	ldr	r0, [pc, #3452]	; 3b7e8 <TermAnsi::handleAnsiChar(unsigned char)+0x1058>
   3aa68:	ebffbe43 	bl	2a37c <strchr>
   3aa6c:	e3500000 	cmp	r0, #0
   3aa70:	0a000003 	beq	3aa84 <TermAnsi::handleAnsiChar(unsigned char)+0x2f4>
   3aa74:	e3a00001 	mov	r0, #1
   3aa78:	e5c4002c 	strb	r0, [r4, #44]	; 0x2c
   3aa7c:	e28dd008 	add	sp, sp, #8
   3aa80:	e8bd8070 	pop	{r4, r5, r6, pc}
   3aa84:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3aa88:	e3550001 	cmp	r5, #1
   3aa8c:	1affff4b 	bne	3a7c0 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3aa90:	e1a01006 	mov	r1, r6
   3aa94:	e59f0d50 	ldr	r0, [pc, #3408]	; 3b7ec <TermAnsi::handleAnsiChar(unsigned char)+0x105c>
   3aa98:	ebffbe37 	bl	2a37c <strchr>
   3aa9c:	e3500000 	cmp	r0, #0
   3aaa0:	0a000044 	beq	3abb8 <TermAnsi::handleAnsiChar(unsigned char)+0x428>
   3aaa4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3aaa8:	e3530007 	cmp	r3, #7
   3aaac:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3aab0:	92831001 	addls	r1, r3, #1
   3aab4:	9283300c 	addls	r3, r3, #12
   3aab8:	95841050 	strls	r1, [r4, #80]	; 0x50
   3aabc:	97842103 	strls	r2, [r4, r3, lsl #2]
   3aac0:	e3a02000 	mov	r2, #0
   3aac4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3aac8:	e5842054 	str	r2, [r4, #84]	; 0x54
   3aacc:	e1530002 	cmp	r3, r2
   3aad0:	03a0202a 	moveq	r2, #42	; 0x2a
   3aad4:	05940014 	ldreq	r0, [r4, #20]
   3aad8:	15940014 	ldrne	r0, [r4, #20]
   3aadc:	00843100 	addeq	r3, r4, r0, lsl #2
   3aae0:	05c3205c 	strbeq	r2, [r3, #92]	; 0x5c
   3aae4:	eaffff7d 	b	3a8e0 <TermAnsi::handleAnsiChar(unsigned char)+0x150>
   3aae8:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3aaec:	e3550000 	cmp	r5, #0
   3aaf0:	1affff30 	bne	3a7b8 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3aaf4:	e1a01006 	mov	r1, r6
   3aaf8:	e59f0cf0 	ldr	r0, [pc, #3312]	; 3b7f0 <TermAnsi::handleAnsiChar(unsigned char)+0x1060>
   3aafc:	ebffbe1e 	bl	2a37c <strchr>
   3ab00:	e3500000 	cmp	r0, #0
   3ab04:	0a000017 	beq	3ab68 <TermAnsi::handleAnsiChar(unsigned char)+0x3d8>
   3ab08:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ab0c:	e5940010 	ldr	r0, [r4, #16]
   3ab10:	e3530007 	cmp	r3, #7
   3ab14:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3ab18:	92831001 	addls	r1, r3, #1
   3ab1c:	9283300c 	addls	r3, r3, #12
   3ab20:	95841050 	strls	r1, [r4, #80]	; 0x50
   3ab24:	97842103 	strls	r2, [r4, r3, lsl #2]
   3ab28:	e3a02000 	mov	r2, #0
   3ab2c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3ab30:	e5941018 	ldr	r1, [r4, #24]
   3ab34:	e1530002 	cmp	r3, r2
   3ab38:	e2400001 	sub	r0, r0, #1
   3ab3c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3ab40:	01a02003 	moveq	r2, r3
   3ab44:	15942014 	ldrne	r2, [r4, #20]
   3ab48:	e1510000 	cmp	r1, r0
   3ab4c:	21a01000 	movcs	r1, r0
   3ab50:	e594300c 	ldr	r3, [r4, #12]
   3ab54:	e5841018 	str	r1, [r4, #24]
   3ab58:	e2433001 	sub	r3, r3, #1
   3ab5c:	e1530002 	cmp	r3, r2
   3ab60:	21a03002 	movcs	r3, r2
   3ab64:	eaffff67 	b	3a908 <TermAnsi::handleAnsiChar(unsigned char)+0x178>
   3ab68:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3ab6c:	e3550000 	cmp	r5, #0
   3ab70:	1affff10 	bne	3a7b8 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3ab74:	e1a01006 	mov	r1, r6
   3ab78:	e59f0c68 	ldr	r0, [pc, #3176]	; 3b7e8 <TermAnsi::handleAnsiChar(unsigned char)+0x1058>
   3ab7c:	ebffbdfe 	bl	2a37c <strchr>
   3ab80:	e3500000 	cmp	r0, #0
   3ab84:	1affffba 	bne	3aa74 <TermAnsi::handleAnsiChar(unsigned char)+0x2e4>
   3ab88:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3ab8c:	eaffff09 	b	3a7b8 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3ab90:	e5943010 	ldr	r3, [r4, #16]
   3ab94:	e5940018 	ldr	r0, [r4, #24]
   3ab98:	e2433001 	sub	r3, r3, #1
   3ab9c:	e1500003 	cmp	r0, r3
   3aba0:	32800001 	addcc	r0, r0, #1
   3aba4:	3affffa4 	bcc	3aa3c <TermAnsi::handleAnsiChar(unsigned char)+0x2ac>
   3aba8:	e3a02001 	mov	r2, #1
   3abac:	e1a00004 	mov	r0, r4
   3abb0:	ebfffd1f 	bl	3a034 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3abb4:	eaffff9d 	b	3aa30 <TermAnsi::handleAnsiChar(unsigned char)+0x2a0>
   3abb8:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3abbc:	e3550001 	cmp	r5, #1
   3abc0:	1afffefe 	bne	3a7c0 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3abc4:	e1a01006 	mov	r1, r6
   3abc8:	e59f0c24 	ldr	r0, [pc, #3108]	; 3b7f4 <TermAnsi::handleAnsiChar(unsigned char)+0x1064>
   3abcc:	ebffbdea 	bl	2a37c <strchr>
   3abd0:	e3500000 	cmp	r0, #0
   3abd4:	0a00001f 	beq	3ac58 <TermAnsi::handleAnsiChar(unsigned char)+0x4c8>
   3abd8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3abdc:	e3530007 	cmp	r3, #7
   3abe0:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3abe4:	92831001 	addls	r1, r3, #1
   3abe8:	9283300c 	addls	r3, r3, #12
   3abec:	95841050 	strls	r1, [r4, #80]	; 0x50
   3abf0:	97842103 	strls	r2, [r4, r3, lsl #2]
   3abf4:	e3a02000 	mov	r2, #0
   3abf8:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3abfc:	e5842054 	str	r2, [r4, #84]	; 0x54
   3ac00:	e1530002 	cmp	r3, r2
   3ac04:	1a000008 	bne	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3ac08:	e5943890 	ldr	r3, [r4, #2192]	; 0x890
   3ac0c:	e284ce89 	add	ip, r4, #2192	; 0x890
   3ac10:	e28cc008 	add	ip, ip, #8
   3ac14:	e284e014 	add	lr, r4, #20
   3ac18:	e5843894 	str	r3, [r4, #2196]	; 0x894
   3ac1c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3ac20:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3ac24:	e59e3000 	ldr	r3, [lr]
   3ac28:	e58c3000 	str	r3, [ip]
   3ac2c:	e5940010 	ldr	r0, [r4, #16]
   3ac30:	e5942018 	ldr	r2, [r4, #24]
   3ac34:	e594100c 	ldr	r1, [r4, #12]
   3ac38:	e2400001 	sub	r0, r0, #1
   3ac3c:	e5943014 	ldr	r3, [r4, #20]
   3ac40:	e1520000 	cmp	r2, r0
   3ac44:	e2411001 	sub	r1, r1, #1
   3ac48:	21a02000 	movcs	r2, r0
   3ac4c:	e1530001 	cmp	r3, r1
   3ac50:	21a03001 	movcs	r3, r1
   3ac54:	eaffff2a 	b	3a904 <TermAnsi::handleAnsiChar(unsigned char)+0x174>
   3ac58:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3ac5c:	e3550001 	cmp	r5, #1
   3ac60:	1afffed6 	bne	3a7c0 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3ac64:	e1a01006 	mov	r1, r6
   3ac68:	e59f0b88 	ldr	r0, [pc, #2952]	; 3b7f8 <TermAnsi::handleAnsiChar(unsigned char)+0x1068>
   3ac6c:	ebffbdc2 	bl	2a37c <strchr>
   3ac70:	e3500000 	cmp	r0, #0
   3ac74:	0a000015 	beq	3acd0 <TermAnsi::handleAnsiChar(unsigned char)+0x540>
   3ac78:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ac7c:	e3530007 	cmp	r3, #7
   3ac80:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3ac84:	92831001 	addls	r1, r3, #1
   3ac88:	9283300c 	addls	r3, r3, #12
   3ac8c:	95841050 	strls	r1, [r4, #80]	; 0x50
   3ac90:	97842103 	strls	r2, [r4, r3, lsl #2]
   3ac94:	e3a02000 	mov	r2, #0
   3ac98:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3ac9c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3aca0:	e1530002 	cmp	r3, r2
   3aca4:	1affffe0 	bne	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3aca8:	e5945894 	ldr	r5, [r4, #2196]	; 0x894
   3acac:	e284ce89 	add	ip, r4, #2192	; 0x890
   3acb0:	e28cc008 	add	ip, ip, #8
   3acb4:	e284e014 	add	lr, r4, #20
   3acb8:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
   3acbc:	e5845890 	str	r5, [r4, #2192]	; 0x890
   3acc0:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   3acc4:	e59c3000 	ldr	r3, [ip]
   3acc8:	e58e3000 	str	r3, [lr]
   3accc:	eaffffd6 	b	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3acd0:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3acd4:	e3550001 	cmp	r5, #1
   3acd8:	1afffeb8 	bne	3a7c0 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3acdc:	e1a01006 	mov	r1, r6
   3ace0:	e59f0b14 	ldr	r0, [pc, #2836]	; 3b7fc <TermAnsi::handleAnsiChar(unsigned char)+0x106c>
   3ace4:	ebffbda4 	bl	2a37c <strchr>
   3ace8:	e3500000 	cmp	r0, #0
   3acec:	0a000004 	beq	3ad04 <TermAnsi::handleAnsiChar(unsigned char)+0x574>
   3acf0:	e3a00001 	mov	r0, #1
   3acf4:	e3a03002 	mov	r3, #2
   3acf8:	e5c40058 	strb	r0, [r4, #88]	; 0x58
   3acfc:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3ad00:	eafffedd 	b	3a87c <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   3ad04:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3ad08:	e3550001 	cmp	r5, #1
   3ad0c:	1afffeab 	bne	3a7c0 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3ad10:	e1a01006 	mov	r1, r6
   3ad14:	e59f0b44 	ldr	r0, [pc, #2884]	; 3b860 <TermAnsi::handleAnsiChar(unsigned char)+0x10d0>
   3ad18:	ebffbd97 	bl	2a37c <strchr>
   3ad1c:	e3500000 	cmp	r0, #0
   3ad20:	0a000010 	beq	3ad68 <TermAnsi::handleAnsiChar(unsigned char)+0x5d8>
   3ad24:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ad28:	e3530007 	cmp	r3, #7
   3ad2c:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3ad30:	92831001 	addls	r1, r3, #1
   3ad34:	9283300c 	addls	r3, r3, #12
   3ad38:	95841050 	strls	r1, [r4, #80]	; 0x50
   3ad3c:	97842103 	strls	r2, [r4, r3, lsl #2]
   3ad40:	e3a02000 	mov	r2, #0
   3ad44:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3ad48:	e5842054 	str	r2, [r4, #84]	; 0x54
   3ad4c:	e1530002 	cmp	r3, r2
   3ad50:	1affffb5 	bne	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3ad54:	e5943000 	ldr	r3, [r4]
   3ad58:	e1a00004 	mov	r0, r4
   3ad5c:	e5933010 	ldr	r3, [r3, #16]
   3ad60:	e12fff33 	blx	r3
   3ad64:	eaffffb0 	b	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3ad68:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3ad6c:	e3550001 	cmp	r5, #1
   3ad70:	1afffe92 	bne	3a7c0 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3ad74:	e1a01006 	mov	r1, r6
   3ad78:	e59f0a80 	ldr	r0, [pc, #2688]	; 3b800 <TermAnsi::handleAnsiChar(unsigned char)+0x1070>
   3ad7c:	ebffbd7e 	bl	2a37c <strchr>
   3ad80:	e3500000 	cmp	r0, #0
   3ad84:	0a000082 	beq	3af94 <TermAnsi::handleAnsiChar(unsigned char)+0x804>
   3ad88:	e3a03002 	mov	r3, #2
   3ad8c:	e1a00005 	mov	r0, r5
   3ad90:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3ad94:	eafffeb8 	b	3a87c <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   3ad98:	e1a01006 	mov	r1, r6
   3ad9c:	e59f0a44 	ldr	r0, [pc, #2628]	; 3b7e8 <TermAnsi::handleAnsiChar(unsigned char)+0x1058>
   3ada0:	ebffbd75 	bl	2a37c <strchr>
   3ada4:	e3500000 	cmp	r0, #0
   3ada8:	1affff31 	bne	3aa74 <TermAnsi::handleAnsiChar(unsigned char)+0x2e4>
   3adac:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3adb0:	e3530002 	cmp	r3, #2
   3adb4:	1afffe83 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3adb8:	e1a01006 	mov	r1, r6
   3adbc:	e59f0a40 	ldr	r0, [pc, #2624]	; 3b804 <TermAnsi::handleAnsiChar(unsigned char)+0x1074>
   3adc0:	ebffbd6d 	bl	2a37c <strchr>
   3adc4:	e3500000 	cmp	r0, #0
   3adc8:	0a00000a 	beq	3adf8 <TermAnsi::handleAnsiChar(unsigned char)+0x668>
   3adcc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3add0:	e3a00001 	mov	r0, #1
   3add4:	e3530007 	cmp	r3, #7
   3add8:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3addc:	92831001 	addls	r1, r3, #1
   3ade0:	9283300c 	addls	r3, r3, #12
   3ade4:	95841050 	strls	r1, [r4, #80]	; 0x50
   3ade8:	97842103 	strls	r2, [r4, r3, lsl #2]
   3adec:	e3a03000 	mov	r3, #0
   3adf0:	e5843054 	str	r3, [r4, #84]	; 0x54
   3adf4:	eafffea0 	b	3a87c <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   3adf8:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3adfc:	e3530002 	cmp	r3, #2
   3ae00:	1afffe70 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ae04:	e1a01006 	mov	r1, r6
   3ae08:	e59f09f8 	ldr	r0, [pc, #2552]	; 3b808 <TermAnsi::handleAnsiChar(unsigned char)+0x1078>
   3ae0c:	ebffbd5a 	bl	2a37c <strchr>
   3ae10:	e3500000 	cmp	r0, #0
   3ae14:	13a00001 	movne	r0, #1
   3ae18:	1afffe97 	bne	3a87c <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   3ae1c:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ae20:	e3530002 	cmp	r3, #2
   3ae24:	1afffe67 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ae28:	e1a01006 	mov	r1, r6
   3ae2c:	e59f09d8 	ldr	r0, [pc, #2520]	; 3b80c <TermAnsi::handleAnsiChar(unsigned char)+0x107c>
   3ae30:	ebffbd51 	bl	2a37c <strchr>
   3ae34:	e3500000 	cmp	r0, #0
   3ae38:	1a0000e9 	bne	3b1e4 <TermAnsi::handleAnsiChar(unsigned char)+0xa54>
   3ae3c:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ae40:	e3530002 	cmp	r3, #2
   3ae44:	1afffe5f 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ae48:	e1a01006 	mov	r1, r6
   3ae4c:	e59f09bc 	ldr	r0, [pc, #2492]	; 3b810 <TermAnsi::handleAnsiChar(unsigned char)+0x1080>
   3ae50:	ebffbd49 	bl	2a37c <strchr>
   3ae54:	e3500000 	cmp	r0, #0
   3ae58:	0a000018 	beq	3aec0 <TermAnsi::handleAnsiChar(unsigned char)+0x730>
   3ae5c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ae60:	e3530007 	cmp	r3, #7
   3ae64:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3ae68:	92831001 	addls	r1, r3, #1
   3ae6c:	9283300c 	addls	r3, r3, #12
   3ae70:	95841050 	strls	r1, [r4, #80]	; 0x50
   3ae74:	97842103 	strls	r2, [r4, r3, lsl #2]
   3ae78:	e3a02000 	mov	r2, #0
   3ae7c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3ae80:	e5842054 	str	r2, [r4, #84]	; 0x54
   3ae84:	e1530002 	cmp	r3, r2
   3ae88:	0a000151 	beq	3b3d4 <TermAnsi::handleAnsiChar(unsigned char)+0xc44>
   3ae8c:	e5942018 	ldr	r2, [r4, #24]
   3ae90:	e5943010 	ldr	r3, [r4, #16]
   3ae94:	e594000c 	ldr	r0, [r4, #12]
   3ae98:	e2433001 	sub	r3, r3, #1
   3ae9c:	e5941014 	ldr	r1, [r4, #20]
   3aea0:	e1530002 	cmp	r3, r2
   3aea4:	e2400001 	sub	r0, r0, #1
   3aea8:	21a03002 	movcs	r3, r2
   3aeac:	e1510000 	cmp	r1, r0
   3aeb0:	21a01000 	movcs	r1, r0
   3aeb4:	e5843018 	str	r3, [r4, #24]
   3aeb8:	e5841014 	str	r1, [r4, #20]
   3aebc:	eafffe92 	b	3a90c <TermAnsi::handleAnsiChar(unsigned char)+0x17c>
   3aec0:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3aec4:	e3530002 	cmp	r3, #2
   3aec8:	1afffe3e 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3aecc:	e1a01006 	mov	r1, r6
   3aed0:	e59f093c 	ldr	r0, [pc, #2364]	; 3b814 <TermAnsi::handleAnsiChar(unsigned char)+0x1084>
   3aed4:	ebffbd28 	bl	2a37c <strchr>
   3aed8:	e3500000 	cmp	r0, #0
   3aedc:	0a000010 	beq	3af24 <TermAnsi::handleAnsiChar(unsigned char)+0x794>
   3aee0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3aee4:	e3530007 	cmp	r3, #7
   3aee8:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3aeec:	92831001 	addls	r1, r3, #1
   3aef0:	9283300c 	addls	r3, r3, #12
   3aef4:	95841050 	strls	r1, [r4, #80]	; 0x50
   3aef8:	97842103 	strls	r2, [r4, r3, lsl #2]
   3aefc:	e3a02000 	mov	r2, #0
   3af00:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3af04:	e5842054 	str	r2, [r4, #84]	; 0x54
   3af08:	e1530002 	cmp	r3, r2
   3af0c:	0a000138 	beq	3b3f4 <TermAnsi::handleAnsiChar(unsigned char)+0xc64>
   3af10:	e5943010 	ldr	r3, [r4, #16]
   3af14:	e5942018 	ldr	r2, [r4, #24]
   3af18:	e2433001 	sub	r3, r3, #1
   3af1c:	e594000c 	ldr	r0, [r4, #12]
   3af20:	eaffffdd 	b	3ae9c <TermAnsi::handleAnsiChar(unsigned char)+0x70c>
   3af24:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3af28:	e3530002 	cmp	r3, #2
   3af2c:	1afffe25 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3af30:	e1a01006 	mov	r1, r6
   3af34:	e59f08dc 	ldr	r0, [pc, #2268]	; 3b818 <TermAnsi::handleAnsiChar(unsigned char)+0x1088>
   3af38:	ebffbd0f 	bl	2a37c <strchr>
   3af3c:	e3500000 	cmp	r0, #0
   3af40:	0a000015 	beq	3af9c <TermAnsi::handleAnsiChar(unsigned char)+0x80c>
   3af44:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3af48:	e3530007 	cmp	r3, #7
   3af4c:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3af50:	92831001 	addls	r1, r3, #1
   3af54:	9283300c 	addls	r3, r3, #12
   3af58:	95841050 	strls	r1, [r4, #80]	; 0x50
   3af5c:	97842103 	strls	r2, [r4, r3, lsl #2]
   3af60:	e3a02000 	mov	r2, #0
   3af64:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3af68:	e5842054 	str	r2, [r4, #84]	; 0x54
   3af6c:	e1530002 	cmp	r3, r2
   3af70:	0a000144 	beq	3b488 <TermAnsi::handleAnsiChar(unsigned char)+0xcf8>
   3af74:	e594300c 	ldr	r3, [r4, #12]
   3af78:	e5941014 	ldr	r1, [r4, #20]
   3af7c:	e2433001 	sub	r3, r3, #1
   3af80:	e5940010 	ldr	r0, [r4, #16]
   3af84:	e5942018 	ldr	r2, [r4, #24]
   3af88:	e2400001 	sub	r0, r0, #1
   3af8c:	e1520000 	cmp	r2, r0
   3af90:	eaffff2c 	b	3ac48 <TermAnsi::handleAnsiChar(unsigned char)+0x4b8>
   3af94:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3af98:	eafffe08 	b	3a7c0 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3af9c:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3afa0:	e3530002 	cmp	r3, #2
   3afa4:	1afffe07 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3afa8:	e1a01006 	mov	r1, r6
   3afac:	e59f0868 	ldr	r0, [pc, #2152]	; 3b81c <TermAnsi::handleAnsiChar(unsigned char)+0x108c>
   3afb0:	ebffbcf1 	bl	2a37c <strchr>
   3afb4:	e3500000 	cmp	r0, #0
   3afb8:	0a000013 	beq	3b00c <TermAnsi::handleAnsiChar(unsigned char)+0x87c>
   3afbc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3afc0:	e3530007 	cmp	r3, #7
   3afc4:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3afc8:	92831001 	addls	r1, r3, #1
   3afcc:	9283300c 	addls	r3, r3, #12
   3afd0:	95841050 	strls	r1, [r4, #80]	; 0x50
   3afd4:	97842103 	strls	r2, [r4, r3, lsl #2]
   3afd8:	e3a02000 	mov	r2, #0
   3afdc:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3afe0:	e5842054 	str	r2, [r4, #84]	; 0x54
   3afe4:	e1530002 	cmp	r3, r2
   3afe8:	0a00014b 	beq	3b51c <TermAnsi::handleAnsiChar(unsigned char)+0xd8c>
   3afec:	e5941014 	ldr	r1, [r4, #20]
   3aff0:	e5940010 	ldr	r0, [r4, #16]
   3aff4:	e5942018 	ldr	r2, [r4, #24]
   3aff8:	e594300c 	ldr	r3, [r4, #12]
   3affc:	e2400001 	sub	r0, r0, #1
   3b000:	e1520000 	cmp	r2, r0
   3b004:	e2433001 	sub	r3, r3, #1
   3b008:	eaffff0e 	b	3ac48 <TermAnsi::handleAnsiChar(unsigned char)+0x4b8>
   3b00c:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b010:	e3530002 	cmp	r3, #2
   3b014:	1afffdeb 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b018:	e1a01006 	mov	r1, r6
   3b01c:	e59f07fc 	ldr	r0, [pc, #2044]	; 3b820 <TermAnsi::handleAnsiChar(unsigned char)+0x1090>
   3b020:	ebffbcd5 	bl	2a37c <strchr>
   3b024:	e3500000 	cmp	r0, #0
   3b028:	0a000014 	beq	3b080 <TermAnsi::handleAnsiChar(unsigned char)+0x8f0>
   3b02c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b030:	e3530007 	cmp	r3, #7
   3b034:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b038:	92831001 	addls	r1, r3, #1
   3b03c:	9283300c 	addls	r3, r3, #12
   3b040:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b044:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b048:	e3a03000 	mov	r3, #0
   3b04c:	e5d42058 	ldrb	r2, [r4, #88]	; 0x58
   3b050:	e5843054 	str	r3, [r4, #84]	; 0x54
   3b054:	e1520003 	cmp	r2, r3
   3b058:	0a000151 	beq	3b5a4 <TermAnsi::handleAnsiChar(unsigned char)+0xe14>
   3b05c:	e5943010 	ldr	r3, [r4, #16]
   3b060:	e5940018 	ldr	r0, [r4, #24]
   3b064:	e5941014 	ldr	r1, [r4, #20]
   3b068:	e2433001 	sub	r3, r3, #1
   3b06c:	e594200c 	ldr	r2, [r4, #12]
   3b070:	e1530000 	cmp	r3, r0
   3b074:	21a03000 	movcs	r3, r0
   3b078:	e2422001 	sub	r2, r2, #1
   3b07c:	eafffe73 	b	3aa50 <TermAnsi::handleAnsiChar(unsigned char)+0x2c0>
   3b080:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b084:	e3530002 	cmp	r3, #2
   3b088:	1afffdce 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b08c:	e1a01006 	mov	r1, r6
   3b090:	e59f078c 	ldr	r0, [pc, #1932]	; 3b824 <TermAnsi::handleAnsiChar(unsigned char)+0x1094>
   3b094:	ebffbcb8 	bl	2a37c <strchr>
   3b098:	e3500000 	cmp	r0, #0
   3b09c:	0a000012 	beq	3b0ec <TermAnsi::handleAnsiChar(unsigned char)+0x95c>
   3b0a0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b0a4:	e3530007 	cmp	r3, #7
   3b0a8:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b0ac:	92831001 	addls	r1, r3, #1
   3b0b0:	9283300c 	addls	r3, r3, #12
   3b0b4:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b0b8:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b0bc:	e3a03000 	mov	r3, #0
   3b0c0:	e5d42058 	ldrb	r2, [r4, #88]	; 0x58
   3b0c4:	e5843054 	str	r3, [r4, #84]	; 0x54
   3b0c8:	e1520003 	cmp	r2, r3
   3b0cc:	0a000155 	beq	3b628 <TermAnsi::handleAnsiChar(unsigned char)+0xe98>
   3b0d0:	e1c401d4 	ldrd	r0, [r4, #20]
   3b0d4:	e5942010 	ldr	r2, [r4, #16]
   3b0d8:	e594300c 	ldr	r3, [r4, #12]
   3b0dc:	e2422001 	sub	r2, r2, #1
   3b0e0:	e1520001 	cmp	r2, r1
   3b0e4:	e2433001 	sub	r3, r3, #1
   3b0e8:	eafffe02 	b	3a8f8 <TermAnsi::handleAnsiChar(unsigned char)+0x168>
   3b0ec:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b0f0:	e3530002 	cmp	r3, #2
   3b0f4:	1afffdb3 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b0f8:	e1a01006 	mov	r1, r6
   3b0fc:	e59f0724 	ldr	r0, [pc, #1828]	; 3b828 <TermAnsi::handleAnsiChar(unsigned char)+0x1098>
   3b100:	ebffbc9d 	bl	2a37c <strchr>
   3b104:	e3500000 	cmp	r0, #0
   3b108:	0a000018 	beq	3b170 <TermAnsi::handleAnsiChar(unsigned char)+0x9e0>
   3b10c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b110:	e3530007 	cmp	r3, #7
   3b114:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b118:	92831001 	addls	r1, r3, #1
   3b11c:	9283300c 	addls	r3, r3, #12
   3b120:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b124:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b128:	e3a02000 	mov	r2, #0
   3b12c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b130:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b134:	e1530002 	cmp	r3, r2
   3b138:	0a000159 	beq	3b6a4 <TermAnsi::handleAnsiChar(unsigned char)+0xf14>
   3b13c:	e594300c 	ldr	r3, [r4, #12]
   3b140:	e5942014 	ldr	r2, [r4, #20]
   3b144:	e2433001 	sub	r3, r3, #1
   3b148:	e1530002 	cmp	r3, r2
   3b14c:	21a03002 	movcs	r3, r2
   3b150:	e5941010 	ldr	r1, [r4, #16]
   3b154:	e5942018 	ldr	r2, [r4, #24]
   3b158:	e2411001 	sub	r1, r1, #1
   3b15c:	e1520001 	cmp	r2, r1
   3b160:	21a02001 	movcs	r2, r1
   3b164:	e5843014 	str	r3, [r4, #20]
   3b168:	e5842018 	str	r2, [r4, #24]
   3b16c:	eafffde6 	b	3a90c <TermAnsi::handleAnsiChar(unsigned char)+0x17c>
   3b170:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b174:	e3530002 	cmp	r3, #2
   3b178:	1afffd92 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b17c:	e1a01006 	mov	r1, r6
   3b180:	e59f06a4 	ldr	r0, [pc, #1700]	; 3b82c <TermAnsi::handleAnsiChar(unsigned char)+0x109c>
   3b184:	ebffbc7c 	bl	2a37c <strchr>
   3b188:	e3500000 	cmp	r0, #0
   3b18c:	0a00001d 	beq	3b208 <TermAnsi::handleAnsiChar(unsigned char)+0xa78>
   3b190:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b194:	e3530007 	cmp	r3, #7
   3b198:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b19c:	92831001 	addls	r1, r3, #1
   3b1a0:	9283300c 	addls	r3, r3, #12
   3b1a4:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b1a8:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b1ac:	e3a02000 	mov	r2, #0
   3b1b0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b1b4:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b1b8:	e1530002 	cmp	r3, r2
   3b1bc:	0a00015d 	beq	3b738 <TermAnsi::handleAnsiChar(unsigned char)+0xfa8>
   3b1c0:	e5943010 	ldr	r3, [r4, #16]
   3b1c4:	e5942018 	ldr	r2, [r4, #24]
   3b1c8:	e2433001 	sub	r3, r3, #1
   3b1cc:	e1530002 	cmp	r3, r2
   3b1d0:	21a03002 	movcs	r3, r2
   3b1d4:	e594100c 	ldr	r1, [r4, #12]
   3b1d8:	e5942014 	ldr	r2, [r4, #20]
   3b1dc:	e2411001 	sub	r1, r1, #1
   3b1e0:	eafffe1a 	b	3aa50 <TermAnsi::handleAnsiChar(unsigned char)+0x2c0>
   3b1e4:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   3b1e8:	e28d0004 	add	r0, sp, #4
   3b1ec:	e0833103 	add	r3, r3, r3, lsl #2
   3b1f0:	e1a05083 	lsl	r5, r3, #1
   3b1f4:	ebffbd89 	bl	2a820 <atoi>
   3b1f8:	e0800005 	add	r0, r0, r5
   3b1fc:	e5840054 	str	r0, [r4, #84]	; 0x54
   3b200:	e3a00001 	mov	r0, #1
   3b204:	eafffd9c 	b	3a87c <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   3b208:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b20c:	e3530002 	cmp	r3, #2
   3b210:	1afffd6c 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b214:	e1a01006 	mov	r1, r6
   3b218:	e59f0610 	ldr	r0, [pc, #1552]	; 3b830 <TermAnsi::handleAnsiChar(unsigned char)+0x10a0>
   3b21c:	ebffbc56 	bl	2a37c <strchr>
   3b220:	e3500000 	cmp	r0, #0
   3b224:	0a000013 	beq	3b278 <TermAnsi::handleAnsiChar(unsigned char)+0xae8>
   3b228:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b22c:	e3530007 	cmp	r3, #7
   3b230:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b234:	92831001 	addls	r1, r3, #1
   3b238:	9283300c 	addls	r3, r3, #12
   3b23c:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b240:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b244:	e3a02000 	mov	r2, #0
   3b248:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b24c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b250:	e1530002 	cmp	r3, r2
   3b254:	0a00018b 	beq	3b888 <TermAnsi::handleAnsiChar(unsigned char)+0x10f8>
   3b258:	e5940018 	ldr	r0, [r4, #24]
   3b25c:	e5941014 	ldr	r1, [r4, #20]
   3b260:	e5942010 	ldr	r2, [r4, #16]
   3b264:	e594300c 	ldr	r3, [r4, #12]
   3b268:	e2422001 	sub	r2, r2, #1
   3b26c:	e1520000 	cmp	r2, r0
   3b270:	e2433001 	sub	r3, r3, #1
   3b274:	eafffe73 	b	3ac48 <TermAnsi::handleAnsiChar(unsigned char)+0x4b8>
   3b278:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b27c:	e3530002 	cmp	r3, #2
   3b280:	1afffd50 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b284:	e1a01006 	mov	r1, r6
   3b288:	e59f05a4 	ldr	r0, [pc, #1444]	; 3b834 <TermAnsi::handleAnsiChar(unsigned char)+0x10a4>
   3b28c:	ebffbc3a 	bl	2a37c <strchr>
   3b290:	e3500000 	cmp	r0, #0
   3b294:	0a000020 	beq	3b31c <TermAnsi::handleAnsiChar(unsigned char)+0xb8c>
   3b298:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b29c:	e594000c 	ldr	r0, [r4, #12]
   3b2a0:	e3530007 	cmp	r3, #7
   3b2a4:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b2a8:	92831001 	addls	r1, r3, #1
   3b2ac:	9283300c 	addls	r3, r3, #12
   3b2b0:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b2b4:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b2b8:	e3a02000 	mov	r2, #0
   3b2bc:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b2c0:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b2c4:	e1530002 	cmp	r3, r2
   3b2c8:	1a00000c 	bne	3b300 <TermAnsi::handleAnsiChar(unsigned char)+0xb70>
   3b2cc:	e5943014 	ldr	r3, [r4, #20]
   3b2d0:	e240c001 	sub	ip, r0, #1
   3b2d4:	e2833001 	add	r3, r3, #1
   3b2d8:	e284e058 	add	lr, r4, #88	; 0x58
   3b2dc:	ea000003 	b	3b2f0 <TermAnsi::handleAnsiChar(unsigned char)+0xb60>
   3b2e0:	e7de1102 	ldrb	r1, [lr, r2, lsl #2]
   3b2e4:	e351002a 	cmp	r1, #42	; 0x2a
   3b2e8:	0a000003 	beq	3b2fc <TermAnsi::handleAnsiChar(unsigned char)+0xb6c>
   3b2ec:	e1a03002 	mov	r3, r2
   3b2f0:	e15c0003 	cmp	ip, r3
   3b2f4:	e2832001 	add	r2, r3, #1
   3b2f8:	8afffff8 	bhi	3b2e0 <TermAnsi::handleAnsiChar(unsigned char)+0xb50>
   3b2fc:	e5843014 	str	r3, [r4, #20]
   3b300:	e5941010 	ldr	r1, [r4, #16]
   3b304:	e5942018 	ldr	r2, [r4, #24]
   3b308:	e2411001 	sub	r1, r1, #1
   3b30c:	e5943014 	ldr	r3, [r4, #20]
   3b310:	e2400001 	sub	r0, r0, #1
   3b314:	e1520001 	cmp	r2, r1
   3b318:	eafffd76 	b	3a8f8 <TermAnsi::handleAnsiChar(unsigned char)+0x168>
   3b31c:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b320:	e3530002 	cmp	r3, #2
   3b324:	1afffd27 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b328:	e1a01006 	mov	r1, r6
   3b32c:	e59f0504 	ldr	r0, [pc, #1284]	; 3b838 <TermAnsi::handleAnsiChar(unsigned char)+0x10a8>
   3b330:	ebffbc11 	bl	2a37c <strchr>
   3b334:	e3500000 	cmp	r0, #0
   3b338:	0a00000e 	beq	3b378 <TermAnsi::handleAnsiChar(unsigned char)+0xbe8>
   3b33c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b340:	e3530007 	cmp	r3, #7
   3b344:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b348:	92831001 	addls	r1, r3, #1
   3b34c:	9283300c 	addls	r3, r3, #12
   3b350:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b354:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b358:	e3a02000 	mov	r2, #0
   3b35c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b360:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b364:	e1530002 	cmp	r3, r2
   3b368:	1afffe2f 	bne	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b36c:	e1a00004 	mov	r0, r4
   3b370:	ebfffc00 	bl	3a378 <TermAnsi::ed()>
   3b374:	eafffe2c 	b	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b378:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b37c:	e3530002 	cmp	r3, #2
   3b380:	1afffd10 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b384:	e1a01006 	mov	r1, r6
   3b388:	e59f04ac 	ldr	r0, [pc, #1196]	; 3b83c <TermAnsi::handleAnsiChar(unsigned char)+0x10ac>
   3b38c:	ebffbbfa 	bl	2a37c <strchr>
   3b390:	e3500000 	cmp	r0, #0
   3b394:	0a000020 	beq	3b41c <TermAnsi::handleAnsiChar(unsigned char)+0xc8c>
   3b398:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b39c:	e3530007 	cmp	r3, #7
   3b3a0:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b3a4:	92831001 	addls	r1, r3, #1
   3b3a8:	9283300c 	addls	r3, r3, #12
   3b3ac:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b3b0:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b3b4:	e3a02000 	mov	r2, #0
   3b3b8:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b3bc:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b3c0:	e1530002 	cmp	r3, r2
   3b3c4:	1afffe18 	bne	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b3c8:	e1a00004 	mov	r0, r4
   3b3cc:	ebfffc07 	bl	3a3f0 <TermAnsi::el()>
   3b3d0:	eafffe15 	b	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b3d4:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b3d8:	e5941018 	ldr	r1, [r4, #24]
   3b3dc:	e3520001 	cmp	r2, #1
   3b3e0:	33a02001 	movcc	r2, #1
   3b3e4:	e1510002 	cmp	r1, r2
   3b3e8:	31a02003 	movcc	r2, r3
   3b3ec:	20412002 	subcs	r2, r1, r2
   3b3f0:	eafffea6 	b	3ae90 <TermAnsi::handleAnsiChar(unsigned char)+0x700>
   3b3f4:	e5941030 	ldr	r1, [r4, #48]	; 0x30
   3b3f8:	e5942018 	ldr	r2, [r4, #24]
   3b3fc:	e5943010 	ldr	r3, [r4, #16]
   3b400:	e3510001 	cmp	r1, #1
   3b404:	20822001 	addcs	r2, r2, r1
   3b408:	32822001 	addcc	r2, r2, #1
   3b40c:	e2433001 	sub	r3, r3, #1
   3b410:	e1520003 	cmp	r2, r3
   3b414:	21a02003 	movcs	r2, r3
   3b418:	eafffebf 	b	3af1c <TermAnsi::handleAnsiChar(unsigned char)+0x78c>
   3b41c:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b420:	e3530002 	cmp	r3, #2
   3b424:	1afffce7 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b428:	e1a01006 	mov	r1, r6
   3b42c:	e59f040c 	ldr	r0, [pc, #1036]	; 3b840 <TermAnsi::handleAnsiChar(unsigned char)+0x10b0>
   3b430:	ebffbbd1 	bl	2a37c <strchr>
   3b434:	e3500000 	cmp	r0, #0
   3b438:	0a00001c 	beq	3b4b0 <TermAnsi::handleAnsiChar(unsigned char)+0xd20>
   3b43c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b440:	e3530007 	cmp	r3, #7
   3b444:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b448:	92831001 	addls	r1, r3, #1
   3b44c:	9283300c 	addls	r3, r3, #12
   3b450:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b454:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b458:	e3a02000 	mov	r2, #0
   3b45c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b460:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b464:	e1530002 	cmp	r3, r2
   3b468:	05942030 	ldreq	r2, [r4, #48]	; 0x30
   3b46c:	05941018 	ldreq	r1, [r4, #24]
   3b470:	1afffded 	bne	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b474:	e3520001 	cmp	r2, #1
   3b478:	33a02001 	movcc	r2, #1
   3b47c:	e1a00004 	mov	r0, r4
   3b480:	ebfffb6a 	bl	3a230 <TermAnsi::scrollDown(unsigned int, unsigned int)>
   3b484:	eafffde8 	b	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b488:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b48c:	e5941014 	ldr	r1, [r4, #20]
   3b490:	e594300c 	ldr	r3, [r4, #12]
   3b494:	e3520001 	cmp	r2, #1
   3b498:	20811002 	addcs	r1, r1, r2
   3b49c:	32811001 	addcc	r1, r1, #1
   3b4a0:	e2433001 	sub	r3, r3, #1
   3b4a4:	e1510003 	cmp	r1, r3
   3b4a8:	21a01003 	movcs	r1, r3
   3b4ac:	eafffeb3 	b	3af80 <TermAnsi::handleAnsiChar(unsigned char)+0x7f0>
   3b4b0:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b4b4:	e3530002 	cmp	r3, #2
   3b4b8:	1afffcc2 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b4bc:	e1a01006 	mov	r1, r6
   3b4c0:	e59f037c 	ldr	r0, [pc, #892]	; 3b844 <TermAnsi::handleAnsiChar(unsigned char)+0x10b4>
   3b4c4:	ebffbbac 	bl	2a37c <strchr>
   3b4c8:	e3500000 	cmp	r0, #0
   3b4cc:	0a00001d 	beq	3b548 <TermAnsi::handleAnsiChar(unsigned char)+0xdb8>
   3b4d0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b4d4:	e3530007 	cmp	r3, #7
   3b4d8:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b4dc:	92831001 	addls	r1, r3, #1
   3b4e0:	9283300c 	addls	r3, r3, #12
   3b4e4:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b4e8:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b4ec:	e3a02000 	mov	r2, #0
   3b4f0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b4f4:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b4f8:	e1530002 	cmp	r3, r2
   3b4fc:	05942030 	ldreq	r2, [r4, #48]	; 0x30
   3b500:	05941018 	ldreq	r1, [r4, #24]
   3b504:	1afffdc8 	bne	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b508:	e3520001 	cmp	r2, #1
   3b50c:	33a02001 	movcc	r2, #1
   3b510:	e1a00004 	mov	r0, r4
   3b514:	ebfffac6 	bl	3a034 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3b518:	eafffdc3 	b	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b51c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b520:	e5941014 	ldr	r1, [r4, #20]
   3b524:	e3520001 	cmp	r2, #1
   3b528:	33a02001 	movcc	r2, #1
   3b52c:	e1520001 	cmp	r2, r1
   3b530:	81a01003 	movhi	r1, r3
   3b534:	8afffead 	bhi	3aff0 <TermAnsi::handleAnsiChar(unsigned char)+0x860>
   3b538:	e0412002 	sub	r2, r1, r2
   3b53c:	e1520001 	cmp	r2, r1
   3b540:	31a01002 	movcc	r1, r2
   3b544:	eafffea9 	b	3aff0 <TermAnsi::handleAnsiChar(unsigned char)+0x860>
   3b548:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b54c:	e3530002 	cmp	r3, #2
   3b550:	1afffc9c 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b554:	e1a01006 	mov	r1, r6
   3b558:	e59f02e8 	ldr	r0, [pc, #744]	; 3b848 <TermAnsi::handleAnsiChar(unsigned char)+0x10b8>
   3b55c:	ebffbb86 	bl	2a37c <strchr>
   3b560:	e3500000 	cmp	r0, #0
   3b564:	0a000019 	beq	3b5d0 <TermAnsi::handleAnsiChar(unsigned char)+0xe40>
   3b568:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b56c:	e3530007 	cmp	r3, #7
   3b570:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b574:	92831001 	addls	r1, r3, #1
   3b578:	9283300c 	addls	r3, r3, #12
   3b57c:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b580:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b584:	e3a02000 	mov	r2, #0
   3b588:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b58c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b590:	e1530002 	cmp	r3, r2
   3b594:	1afffda4 	bne	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b598:	e1a00004 	mov	r0, r4
   3b59c:	ebfffbab 	bl	3a450 <TermAnsi::dch()>
   3b5a0:	eafffda1 	b	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b5a4:	e5941030 	ldr	r1, [r4, #48]	; 0x30
   3b5a8:	e5940018 	ldr	r0, [r4, #24]
   3b5ac:	e5943010 	ldr	r3, [r4, #16]
   3b5b0:	e3510001 	cmp	r1, #1
   3b5b4:	20800001 	addcs	r0, r0, r1
   3b5b8:	32800001 	addcc	r0, r0, #1
   3b5bc:	e2433001 	sub	r3, r3, #1
   3b5c0:	e1500003 	cmp	r0, r3
   3b5c4:	e1a01002 	mov	r1, r2
   3b5c8:	21a00003 	movcs	r0, r3
   3b5cc:	eafffea6 	b	3b06c <TermAnsi::handleAnsiChar(unsigned char)+0x8dc>
   3b5d0:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b5d4:	e3530002 	cmp	r3, #2
   3b5d8:	1afffc7a 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b5dc:	e1a01006 	mov	r1, r6
   3b5e0:	e59f0264 	ldr	r0, [pc, #612]	; 3b84c <TermAnsi::handleAnsiChar(unsigned char)+0x10bc>
   3b5e4:	ebffbb64 	bl	2a37c <strchr>
   3b5e8:	e3500000 	cmp	r0, #0
   3b5ec:	0a000016 	beq	3b64c <TermAnsi::handleAnsiChar(unsigned char)+0xebc>
   3b5f0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b5f4:	e3530007 	cmp	r3, #7
   3b5f8:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b5fc:	92831001 	addls	r1, r3, #1
   3b600:	9283300c 	addls	r3, r3, #12
   3b604:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b608:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b60c:	e3a03000 	mov	r3, #0
   3b610:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3b614:	e5843054 	str	r3, [r4, #84]	; 0x54
   3b618:	e1510003 	cmp	r1, r3
   3b61c:	1afffd82 	bne	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b620:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b624:	eaffffb7 	b	3b508 <TermAnsi::handleAnsiChar(unsigned char)+0xd78>
   3b628:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3b62c:	e5941018 	ldr	r1, [r4, #24]
   3b630:	e3530001 	cmp	r3, #1
   3b634:	33a03001 	movcc	r3, #1
   3b638:	e1510003 	cmp	r1, r3
   3b63c:	01a01002 	moveq	r1, r2
   3b640:	e3a00000 	mov	r0, #0
   3b644:	10411003 	subne	r1, r1, r3
   3b648:	eafffea1 	b	3b0d4 <TermAnsi::handleAnsiChar(unsigned char)+0x944>
   3b64c:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b650:	e3530002 	cmp	r3, #2
   3b654:	1afffc5b 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b658:	e1a01006 	mov	r1, r6
   3b65c:	e59f01ec 	ldr	r0, [pc, #492]	; 3b850 <TermAnsi::handleAnsiChar(unsigned char)+0x10c0>
   3b660:	ebffbb45 	bl	2a37c <strchr>
   3b664:	e3500000 	cmp	r0, #0
   3b668:	0a000016 	beq	3b6c8 <TermAnsi::handleAnsiChar(unsigned char)+0xf38>
   3b66c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b670:	e3530007 	cmp	r3, #7
   3b674:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b678:	92831001 	addls	r1, r3, #1
   3b67c:	9283300c 	addls	r3, r3, #12
   3b680:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b684:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b688:	e3a03000 	mov	r3, #0
   3b68c:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3b690:	e5843054 	str	r3, [r4, #84]	; 0x54
   3b694:	e1510003 	cmp	r1, r3
   3b698:	1afffd63 	bne	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b69c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b6a0:	eaffff73 	b	3b474 <TermAnsi::handleAnsiChar(unsigned char)+0xce4>
   3b6a4:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3b6a8:	e594200c 	ldr	r2, [r4, #12]
   3b6ac:	e3530000 	cmp	r3, #0
   3b6b0:	0afffea6 	beq	3b150 <TermAnsi::handleAnsiChar(unsigned char)+0x9c0>
   3b6b4:	e2422001 	sub	r2, r2, #1
   3b6b8:	e2433001 	sub	r3, r3, #1
   3b6bc:	e1530002 	cmp	r3, r2
   3b6c0:	21a03002 	movcs	r3, r2
   3b6c4:	eafffea1 	b	3b150 <TermAnsi::handleAnsiChar(unsigned char)+0x9c0>
   3b6c8:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b6cc:	e3530002 	cmp	r3, #2
   3b6d0:	1afffc3c 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b6d4:	e1a01006 	mov	r1, r6
   3b6d8:	e59f0174 	ldr	r0, [pc, #372]	; 3b854 <TermAnsi::handleAnsiChar(unsigned char)+0x10c4>
   3b6dc:	ebffbb26 	bl	2a37c <strchr>
   3b6e0:	e3500000 	cmp	r0, #0
   3b6e4:	0a00001c 	beq	3b75c <TermAnsi::handleAnsiChar(unsigned char)+0xfcc>
   3b6e8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b6ec:	e3530007 	cmp	r3, #7
   3b6f0:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b6f4:	92831001 	addls	r1, r3, #1
   3b6f8:	9283300c 	addls	r3, r3, #12
   3b6fc:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b700:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b704:	e3a02000 	mov	r2, #0
   3b708:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b70c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b710:	e1530002 	cmp	r3, r2
   3b714:	1afffd44 	bne	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b718:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3b71c:	e1a00004 	mov	r0, r4
   3b720:	e3530001 	cmp	r3, #1
   3b724:	33a03001 	movcc	r3, #1
   3b728:	e5942014 	ldr	r2, [r4, #20]
   3b72c:	e5941018 	ldr	r1, [r4, #24]
   3b730:	ebfffa14 	bl	39f88 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3b734:	eafffd3c 	b	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b738:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3b73c:	e5942010 	ldr	r2, [r4, #16]
   3b740:	e3530000 	cmp	r3, #0
   3b744:	0afffea2 	beq	3b1d4 <TermAnsi::handleAnsiChar(unsigned char)+0xa44>
   3b748:	e2422001 	sub	r2, r2, #1
   3b74c:	e2433001 	sub	r3, r3, #1
   3b750:	e1530002 	cmp	r3, r2
   3b754:	21a03002 	movcs	r3, r2
   3b758:	eafffe9d 	b	3b1d4 <TermAnsi::handleAnsiChar(unsigned char)+0xa44>
   3b75c:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b760:	e3530002 	cmp	r3, #2
   3b764:	1afffc17 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b768:	e1a01006 	mov	r1, r6
   3b76c:	e59f00e4 	ldr	r0, [pc, #228]	; 3b858 <TermAnsi::handleAnsiChar(unsigned char)+0x10c8>
   3b770:	ebffbb01 	bl	2a37c <strchr>
   3b774:	e3500000 	cmp	r0, #0
   3b778:	0a000049 	beq	3b8a4 <TermAnsi::handleAnsiChar(unsigned char)+0x1114>
   3b77c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b780:	e3530007 	cmp	r3, #7
   3b784:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b788:	92831001 	addls	r1, r3, #1
   3b78c:	9283300c 	addls	r3, r3, #12
   3b790:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b794:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b798:	e3a02000 	mov	r2, #0
   3b79c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b7a0:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b7a4:	e1530002 	cmp	r3, r2
   3b7a8:	1afffd1f 	bne	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b7ac:	e5943014 	ldr	r3, [r4, #20]
   3b7b0:	e284105c 	add	r1, r4, #92	; 0x5c
   3b7b4:	ea000003 	b	3b7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x1038>
   3b7b8:	e5843014 	str	r3, [r4, #20]
   3b7bc:	e7d12103 	ldrb	r2, [r1, r3, lsl #2]
   3b7c0:	e352002a 	cmp	r2, #42	; 0x2a
   3b7c4:	0afffd18 	beq	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b7c8:	e3530000 	cmp	r3, #0
   3b7cc:	e2433001 	sub	r3, r3, #1
   3b7d0:	1afffff8 	bne	3b7b8 <TermAnsi::handleAnsiChar(unsigned char)+0x1028>
   3b7d4:	eafffd14 	b	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b7d8:	00049414 	.word	0x00049414
   3b7dc:	00049418 	.word	0x00049418
   3b7e0:	000434d4 	.word	0x000434d4
   3b7e4:	000491cc 	.word	0x000491cc
   3b7e8:	000434cc 	.word	0x000434cc
   3b7ec:	00042fcc 	.word	0x00042fcc
   3b7f0:	0004941c 	.word	0x0004941c
   3b7f4:	0004357c 	.word	0x0004357c
   3b7f8:	00043580 	.word	0x00043580
   3b7fc:	00049420 	.word	0x00049420
   3b800:	0004942c 	.word	0x0004942c
   3b804:	00049430 	.word	0x00049430
   3b808:	00049434 	.word	0x00049434
   3b80c:	00049438 	.word	0x00049438
   3b810:	000495d4 	.word	0x000495d4
   3b814:	00049444 	.word	0x00049444
   3b818:	00046938 	.word	0x00046938
   3b81c:	00047ae0 	.word	0x00047ae0
   3b820:	0004658c 	.word	0x0004658c
   3b824:	00049448 	.word	0x00049448
   3b828:	0004944c 	.word	0x0004944c
   3b82c:	0004831c 	.word	0x0004831c
   3b830:	00049450 	.word	0x00049450
   3b834:	00047ae8 	.word	0x00047ae8
   3b838:	00049454 	.word	0x00049454
   3b83c:	00046218 	.word	0x00046218
   3b840:	000475d8 	.word	0x000475d8
   3b844:	00049458 	.word	0x00049458
   3b848:	00042f94 	.word	0x00042f94
   3b84c:	00040ea8 	.word	0x00040ea8
   3b850:	00040f50 	.word	0x00040f50
   3b854:	00042db4 	.word	0x00042db4
   3b858:	0004945c 	.word	0x0004945c
   3b85c:	00049460 	.word	0x00049460
   3b860:	00049428 	.word	0x00049428
   3b864:	0004627c 	.word	0x0004627c
   3b868:	00049464 	.word	0x00049464
   3b86c:	000414ac 	.word	0x000414ac
   3b870:	00046e2c 	.word	0x00046e2c
   3b874:	0004135c 	.word	0x0004135c
   3b878:	00041c3c 	.word	0x00041c3c
   3b87c:	000459e0 	.word	0x000459e0
   3b880:	00045c58 	.word	0x00045c58
   3b884:	00049468 	.word	0x00049468
   3b888:	e5940030 	ldr	r0, [r4, #48]	; 0x30
   3b88c:	e5941034 	ldr	r1, [r4, #52]	; 0x34
   3b890:	e3500000 	cmp	r0, #0
   3b894:	12400001 	subne	r0, r0, #1
   3b898:	e3510000 	cmp	r1, #0
   3b89c:	12411001 	subne	r1, r1, #1
   3b8a0:	eafffe6e 	b	3b260 <TermAnsi::handleAnsiChar(unsigned char)+0xad0>
   3b8a4:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b8a8:	e3530002 	cmp	r3, #2
   3b8ac:	1afffbc5 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b8b0:	e1a01006 	mov	r1, r6
   3b8b4:	e51f0060 	ldr	r0, [pc, #-96]	; 3b85c <TermAnsi::handleAnsiChar(unsigned char)+0x10cc>
   3b8b8:	ebffbaaf 	bl	2a37c <strchr>
   3b8bc:	e3500000 	cmp	r0, #0
   3b8c0:	0a00000e 	beq	3b900 <TermAnsi::handleAnsiChar(unsigned char)+0x1170>
   3b8c4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b8c8:	e3530007 	cmp	r3, #7
   3b8cc:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b8d0:	92831001 	addls	r1, r3, #1
   3b8d4:	9283300c 	addls	r3, r3, #12
   3b8d8:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b8dc:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b8e0:	e3a02000 	mov	r2, #0
   3b8e4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b8e8:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b8ec:	e1530002 	cmp	r3, r2
   3b8f0:	1afffccd 	bne	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b8f4:	e1a00004 	mov	r0, r4
   3b8f8:	ebfffb10 	bl	3a540 <TermAnsi::rep()>
   3b8fc:	eafffcca 	b	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b900:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b904:	e3530002 	cmp	r3, #2
   3b908:	1afffbae 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b90c:	e1a01006 	mov	r1, r6
   3b910:	e51f00b8 	ldr	r0, [pc, #-184]	; 3b860 <TermAnsi::handleAnsiChar(unsigned char)+0x10d0>
   3b914:	ebffba98 	bl	2a37c <strchr>
   3b918:	e3500000 	cmp	r0, #0
   3b91c:	1afffbb8 	bne	3a804 <TermAnsi::handleAnsiChar(unsigned char)+0x74>
   3b920:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b924:	e3530002 	cmp	r3, #2
   3b928:	1afffba6 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b92c:	e1a01006 	mov	r1, r6
   3b930:	e51f00d4 	ldr	r0, [pc, #-212]	; 3b864 <TermAnsi::handleAnsiChar(unsigned char)+0x10d4>
   3b934:	ebffba90 	bl	2a37c <strchr>
   3b938:	e3500000 	cmp	r0, #0
   3b93c:	0a000010 	beq	3b984 <TermAnsi::handleAnsiChar(unsigned char)+0x11f4>
   3b940:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b944:	e3530007 	cmp	r3, #7
   3b948:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b94c:	92831001 	addls	r1, r3, #1
   3b950:	9283300c 	addls	r3, r3, #12
   3b954:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b958:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b95c:	e3a03000 	mov	r3, #0
   3b960:	e5d42058 	ldrb	r2, [r4, #88]	; 0x58
   3b964:	e5843054 	str	r3, [r4, #84]	; 0x54
   3b968:	e1520003 	cmp	r2, r3
   3b96c:	1a000002 	bne	3b97c <TermAnsi::handleAnsiChar(unsigned char)+0x11ec>
   3b970:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3b974:	e3530003 	cmp	r3, #3
   3b978:	0a00005f 	beq	3bafc <TermAnsi::handleAnsiChar(unsigned char)+0x136c>
   3b97c:	e594000c 	ldr	r0, [r4, #12]
   3b980:	eafffe5e 	b	3b300 <TermAnsi::handleAnsiChar(unsigned char)+0xb70>
   3b984:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b988:	e3530002 	cmp	r3, #2
   3b98c:	1afffb8d 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b990:	e1a01006 	mov	r1, r6
   3b994:	e51f0134 	ldr	r0, [pc, #-308]	; 3b868 <TermAnsi::handleAnsiChar(unsigned char)+0x10d8>
   3b998:	ebffba77 	bl	2a37c <strchr>
   3b99c:	e3500000 	cmp	r0, #0
   3b9a0:	0a00000e 	beq	3b9e0 <TermAnsi::handleAnsiChar(unsigned char)+0x1250>
   3b9a4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b9a8:	e3530007 	cmp	r3, #7
   3b9ac:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3b9b0:	92831001 	addls	r1, r3, #1
   3b9b4:	9283300c 	addls	r3, r3, #12
   3b9b8:	95841050 	strls	r1, [r4, #80]	; 0x50
   3b9bc:	97842103 	strls	r2, [r4, r3, lsl #2]
   3b9c0:	e3a02000 	mov	r2, #0
   3b9c4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b9c8:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b9cc:	e1530002 	cmp	r3, r2
   3b9d0:	1afffc95 	bne	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b9d4:	e1a00004 	mov	r0, r4
   3b9d8:	ebfffaee 	bl	3a598 <TermAnsi::sgr()>
   3b9dc:	eafffc92 	b	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3b9e0:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3b9e4:	e3530002 	cmp	r3, #2
   3b9e8:	1afffb76 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3b9ec:	e1a01006 	mov	r1, r6
   3b9f0:	e51f018c 	ldr	r0, [pc, #-396]	; 3b86c <TermAnsi::handleAnsiChar(unsigned char)+0x10dc>
   3b9f4:	ebffba60 	bl	2a37c <strchr>
   3b9f8:	e3500000 	cmp	r0, #0
   3b9fc:	1afffb80 	bne	3a804 <TermAnsi::handleAnsiChar(unsigned char)+0x74>
   3ba00:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ba04:	e3530002 	cmp	r3, #2
   3ba08:	1afffb6e 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ba0c:	e1a01006 	mov	r1, r6
   3ba10:	e51f01a8 	ldr	r0, [pc, #-424]	; 3b870 <TermAnsi::handleAnsiChar(unsigned char)+0x10e0>
   3ba14:	ebffba58 	bl	2a37c <strchr>
   3ba18:	e3500000 	cmp	r0, #0
   3ba1c:	1afffb78 	bne	3a804 <TermAnsi::handleAnsiChar(unsigned char)+0x74>
   3ba20:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ba24:	e3530002 	cmp	r3, #2
   3ba28:	1afffb66 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ba2c:	e1a01006 	mov	r1, r6
   3ba30:	e51f01c4 	ldr	r0, [pc, #-452]	; 3b874 <TermAnsi::handleAnsiChar(unsigned char)+0x10e4>
   3ba34:	ebffba50 	bl	2a37c <strchr>
   3ba38:	e3500000 	cmp	r0, #0
   3ba3c:	1afffb70 	bne	3a804 <TermAnsi::handleAnsiChar(unsigned char)+0x74>
   3ba40:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ba44:	e3530002 	cmp	r3, #2
   3ba48:	1afffb5e 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ba4c:	e1a01006 	mov	r1, r6
   3ba50:	e51f01e0 	ldr	r0, [pc, #-480]	; 3b878 <TermAnsi::handleAnsiChar(unsigned char)+0x10e8>
   3ba54:	ebffba48 	bl	2a37c <strchr>
   3ba58:	e3500000 	cmp	r0, #0
   3ba5c:	1afffb68 	bne	3a804 <TermAnsi::handleAnsiChar(unsigned char)+0x74>
   3ba60:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ba64:	e3530002 	cmp	r3, #2
   3ba68:	1afffb56 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ba6c:	e1a01006 	mov	r1, r6
   3ba70:	e51f01fc 	ldr	r0, [pc, #-508]	; 3b87c <TermAnsi::handleAnsiChar(unsigned char)+0x10ec>
   3ba74:	ebffba40 	bl	2a37c <strchr>
   3ba78:	e3500000 	cmp	r0, #0
   3ba7c:	1afffc55 	bne	3abd8 <TermAnsi::handleAnsiChar(unsigned char)+0x448>
   3ba80:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3ba84:	e3530002 	cmp	r3, #2
   3ba88:	1afffb4e 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3ba8c:	e1a01006 	mov	r1, r6
   3ba90:	e51f0218 	ldr	r0, [pc, #-536]	; 3b880 <TermAnsi::handleAnsiChar(unsigned char)+0x10f0>
   3ba94:	ebffba38 	bl	2a37c <strchr>
   3ba98:	e3500000 	cmp	r0, #0
   3ba9c:	1afffc75 	bne	3ac78 <TermAnsi::handleAnsiChar(unsigned char)+0x4e8>
   3baa0:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3baa4:	e3530002 	cmp	r3, #2
   3baa8:	1afffb46 	bne	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3baac:	e1a01006 	mov	r1, r6
   3bab0:	e51f0234 	ldr	r0, [pc, #-564]	; 3b884 <TermAnsi::handleAnsiChar(unsigned char)+0x10f4>
   3bab4:	ebffba30 	bl	2a37c <strchr>
   3bab8:	e3500000 	cmp	r0, #0
   3babc:	0afffb41 	beq	3a7c8 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3bac0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3bac4:	e3530007 	cmp	r3, #7
   3bac8:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3bacc:	92831001 	addls	r1, r3, #1
   3bad0:	9283300c 	addls	r3, r3, #12
   3bad4:	95841050 	strls	r1, [r4, #80]	; 0x50
   3bad8:	97842103 	strls	r2, [r4, r3, lsl #2]
   3badc:	e3a02000 	mov	r2, #0
   3bae0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3bae4:	e5842054 	str	r2, [r4, #84]	; 0x54
   3bae8:	e1530002 	cmp	r3, r2
   3baec:	1afffc4e 	bne	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3baf0:	e1a00004 	mov	r0, r4
   3baf4:	ebfffa72 	bl	3a4c4 <TermAnsi::ich()>
   3baf8:	eafffc4b 	b	3ac2c <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3bafc:	e594000c 	ldr	r0, [r4, #12]
   3bb00:	e3500000 	cmp	r0, #0
   3bb04:	0afffdfd 	beq	3b300 <TermAnsi::handleAnsiChar(unsigned char)+0xb70>
   3bb08:	e1a03004 	mov	r3, r4
   3bb0c:	e3a0c020 	mov	ip, #32
   3bb10:	e3a0100f 	mov	r1, #15
   3bb14:	e0840100 	add	r0, r4, r0, lsl #2
   3bb18:	e5c3c05c 	strb	ip, [r3, #92]	; 0x5c
   3bb1c:	e5c3105d 	strb	r1, [r3, #93]	; 0x5d
   3bb20:	e5c3205e 	strb	r2, [r3, #94]	; 0x5e
   3bb24:	e5c3205f 	strb	r2, [r3, #95]	; 0x5f
   3bb28:	e2833004 	add	r3, r3, #4
   3bb2c:	e1500003 	cmp	r0, r3
   3bb30:	1afffff8 	bne	3bb18 <TermAnsi::handleAnsiChar(unsigned char)+0x1388>
   3bb34:	eaffff90 	b	3b97c <TermAnsi::handleAnsiChar(unsigned char)+0x11ec>

0003bb38 <TermAnsi::putChar(unsigned long)>:
   3bb38:	e92d4070 	push	{r4, r5, r6, lr}
   3bb3c:	e1a04001 	mov	r4, r1
   3bb40:	e6ef1071 	uxtb	r1, r1
   3bb44:	e1a05000 	mov	r5, r0
   3bb48:	ebfffb10 	bl	3a790 <TermAnsi::handleAnsiChar(unsigned char)>
   3bb4c:	e3500000 	cmp	r0, #0
   3bb50:	18bd8070 	popne	{r4, r5, r6, pc}
   3bb54:	e1a01004 	mov	r1, r4
   3bb58:	e1a00005 	mov	r0, r5
   3bb5c:	ebfff988 	bl	3a184 <TermAnsi::writeCharAtCurs(int)>
   3bb60:	e3a03001 	mov	r3, #1
   3bb64:	e5c5301c 	strb	r3, [r5, #28]
   3bb68:	e8bd8070 	pop	{r4, r5, r6, pc}

0003bb6c <TermAnsi::dsr()>:
   3bb6c:	e12fff1e 	bx	lr

0003bb70 <TermAnsi::init(unsigned long, unsigned long)>:
   3bb70:	e92d4010 	push	{r4, lr}
   3bb74:	e1a04000 	mov	r4, r0
   3bb78:	eb000042 	bl	3bc88 <TermEmu::init(unsigned long, unsigned long)>
   3bb7c:	e5943000 	ldr	r3, [r4]
   3bb80:	e1a00004 	mov	r0, r4
   3bb84:	e8bd4010 	pop	{r4, lr}
   3bb88:	e5933010 	ldr	r3, [r3, #16]
   3bb8c:	e12fff13 	bx	r3

0003bb90 <TermAnsi::reset()>:
   3bb90:	e92d4010 	push	{r4, lr}
   3bb94:	e1a04000 	mov	r4, r0
   3bb98:	eb000020 	bl	3bc20 <TermEmu::reset()>
   3bb9c:	e3a00000 	mov	r0, #0
   3bba0:	e3a01001 	mov	r1, #1
   3bba4:	e2843e82 	add	r3, r4, #2080	; 0x820
   3bba8:	e2842d22 	add	r2, r4, #2176	; 0x880
   3bbac:	e283300b 	add	r3, r3, #11
   3bbb0:	e282200f 	add	r2, r2, #15
   3bbb4:	e5c4001d 	strb	r0, [r4, #29]
   3bbb8:	e5840050 	str	r0, [r4, #80]	; 0x50
   3bbbc:	e5840054 	str	r0, [r4, #84]	; 0x54
   3bbc0:	e5c40058 	strb	r0, [r4, #88]	; 0x58
   3bbc4:	e5e31001 	strb	r1, [r3, #1]!
   3bbc8:	e1530002 	cmp	r3, r2
   3bbcc:	1afffffc 	bne	3bbc4 <TermAnsi::reset()+0x34>
   3bbd0:	e3a03ef2 	mov	r3, #3872	; 0xf20
   3bbd4:	e3a02020 	mov	r2, #32
   3bbd8:	e5843890 	str	r3, [r4, #2192]	; 0x890
   3bbdc:	e3a01000 	mov	r1, #0
   3bbe0:	e2840030 	add	r0, r4, #48	; 0x30
   3bbe4:	ebffb8c8 	bl	29f0c <memset>
   3bbe8:	e3a03000 	mov	r3, #0
   3bbec:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3bbf0:	e5843050 	str	r3, [r4, #80]	; 0x50
   3bbf4:	e5843054 	str	r3, [r4, #84]	; 0x54
   3bbf8:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   3bbfc:	e8bd8010 	pop	{r4, pc}

0003bc00 <TermEmu::sendData(int)>:
   3bc00:	e1a03001 	mov	r3, r1
   3bc04:	e59f2008 	ldr	r2, [pc, #8]	; 3bc14 <TermEmu::sendData(int)+0x14>
   3bc08:	e3a01004 	mov	r1, #4
   3bc0c:	e59f0004 	ldr	r0, [pc, #4]	; 3bc18 <TermEmu::sendData(int)+0x18>
   3bc10:	eaffcc7c 	b	2ee08 <LogWrite>
   3bc14:	000493fc 	.word	0x000493fc
   3bc18:	0004940c 	.word	0x0004940c

0003bc1c <TermEmu::putChar(unsigned long)>:
   3bc1c:	e12fff1e 	bx	lr

0003bc20 <TermEmu::reset()>:
   3bc20:	e12fff1e 	bx	lr

0003bc24 <TermEmu::~TermEmu()>:
   3bc24:	e92d4010 	push	{r4, lr}
   3bc28:	e1a04000 	mov	r4, r0
   3bc2c:	e5900004 	ldr	r0, [r0, #4]
   3bc30:	e59f3014 	ldr	r3, [pc, #20]	; 3bc4c <TermEmu::~TermEmu()+0x28>
   3bc34:	e3500000 	cmp	r0, #0
   3bc38:	e5843000 	str	r3, [r4]
   3bc3c:	0a000000 	beq	3bc44 <TermEmu::~TermEmu()+0x20>
   3bc40:	ebffbced 	bl	2affc <operator delete[](void*)>
   3bc44:	e1a00004 	mov	r0, r4
   3bc48:	e8bd8010 	pop	{r4, pc}
   3bc4c:	00049498 	.word	0x00049498

0003bc50 <TermEmu::~TermEmu()>:
   3bc50:	e92d4010 	push	{r4, lr}
   3bc54:	e1a04000 	mov	r4, r0
   3bc58:	e5900004 	ldr	r0, [r0, #4]
   3bc5c:	e59f3020 	ldr	r3, [pc, #32]	; 3bc84 <TermEmu::~TermEmu()+0x34>
   3bc60:	e3500000 	cmp	r0, #0
   3bc64:	e5843000 	str	r3, [r4]
   3bc68:	0a000000 	beq	3bc70 <TermEmu::~TermEmu()+0x20>
   3bc6c:	ebffbce2 	bl	2affc <operator delete[](void*)>
   3bc70:	e1a00004 	mov	r0, r4
   3bc74:	e3a0102c 	mov	r1, #44	; 0x2c
   3bc78:	ebffbce0 	bl	2b000 <operator delete(void*, unsigned int)>
   3bc7c:	e1a00004 	mov	r0, r4
   3bc80:	e8bd8010 	pop	{r4, pc}
   3bc84:	00049498 	.word	0x00049498

0003bc88 <TermEmu::init(unsigned long, unsigned long)>:
   3bc88:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3bc8c:	e1a04000 	mov	r4, r0
   3bc90:	e5900004 	ldr	r0, [r0, #4]
   3bc94:	e1a08001 	mov	r8, r1
   3bc98:	e3500000 	cmp	r0, #0
   3bc9c:	e1a07002 	mov	r7, r2
   3bca0:	0a000000 	beq	3bca8 <TermEmu::init(unsigned long, unsigned long)+0x20>
   3bca4:	ebffbcd4 	bl	2affc <operator delete[](void*)>
   3bca8:	e0090897 	mul	r9, r7, r8
   3bcac:	e379022e 	cmn	r9, #-536870910	; 0xe0000002
   3bcb0:	83e00000 	mvnhi	r0, #0
   3bcb4:	91a00109 	lslls	r0, r9, #2
   3bcb8:	ebffbcc8 	bl	2afe0 <operator new[](unsigned int)>
   3bcbc:	e259c001 	subs	ip, r9, #1
   3bcc0:	4a00000b 	bmi	3bcf4 <TermEmu::init(unsigned long, unsigned long)+0x6c>
   3bcc4:	e1a03000 	mov	r3, r0
   3bcc8:	e3a06020 	mov	r6, #32
   3bccc:	e3a0500f 	mov	r5, #15
   3bcd0:	e3a0e000 	mov	lr, #0
   3bcd4:	e24cc001 	sub	ip, ip, #1
   3bcd8:	e37c0001 	cmn	ip, #1
   3bcdc:	e5c36000 	strb	r6, [r3]
   3bce0:	e5c35001 	strb	r5, [r3, #1]
   3bce4:	e5c3e002 	strb	lr, [r3, #2]
   3bce8:	e5c3e003 	strb	lr, [r3, #3]
   3bcec:	e2833004 	add	r3, r3, #4
   3bcf0:	1afffff7 	bne	3bcd4 <TermEmu::init(unsigned long, unsigned long)+0x4c>
   3bcf4:	e3a03000 	mov	r3, #0
   3bcf8:	e3a0105f 	mov	r1, #95	; 0x5f
   3bcfc:	e3a02020 	mov	r2, #32
   3bd00:	e9840201 	stmib	r4, {r0, r9}
   3bd04:	e584800c 	str	r8, [r4, #12]
   3bd08:	e5847010 	str	r7, [r4, #16]
   3bd0c:	e5843014 	str	r3, [r4, #20]
   3bd10:	e5843018 	str	r3, [r4, #24]
   3bd14:	e1c431bc 	strh	r3, [r4, #28]
   3bd18:	e5c4301e 	strb	r3, [r4, #30]
   3bd1c:	e5841020 	str	r1, [r4, #32]
   3bd20:	e5842024 	str	r2, [r4, #36]	; 0x24
   3bd24:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003bd28 <TermEmu::TermEmu()>:
   3bd28:	e3a02000 	mov	r2, #0
   3bd2c:	e92d4070 	push	{r4, r5, r6, lr}
   3bd30:	e3a0c050 	mov	ip, #80	; 0x50
   3bd34:	e3a0605f 	mov	r6, #95	; 0x5f
   3bd38:	e3a04020 	mov	r4, #32
   3bd3c:	e3a0eef2 	mov	lr, #3872	; 0xf20
   3bd40:	e3a01019 	mov	r1, #25
   3bd44:	e59f5030 	ldr	r5, [pc, #48]	; 3bd7c <TermEmu::TermEmu()+0x54>
   3bd48:	e5806020 	str	r6, [r0, #32]
   3bd4c:	e5805000 	str	r5, [r0]
   3bd50:	e5804024 	str	r4, [r0, #36]	; 0x24
   3bd54:	e580e028 	str	lr, [r0, #40]	; 0x28
   3bd58:	e580c00c 	str	ip, [r0, #12]
   3bd5c:	e5801010 	str	r1, [r0, #16]
   3bd60:	e5802004 	str	r2, [r0, #4]
   3bd64:	e5802008 	str	r2, [r0, #8]
   3bd68:	e5802014 	str	r2, [r0, #20]
   3bd6c:	e5802018 	str	r2, [r0, #24]
   3bd70:	e1c021bc 	strh	r2, [r0, #28]
   3bd74:	e5c0201e 	strb	r2, [r0, #30]
   3bd78:	e8bd8070 	pop	{r4, r5, r6, pc}
   3bd7c:	00049498 	.word	0x00049498

0003bd80 <McTRS80CmdFormat::McTRS80CmdFormat()>:
   3bd80:	e12fff1e 	bx	lr

0003bd84 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>:
   3bd84:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bd88:	e24dd064 	sub	sp, sp, #100	; 0x64
   3bd8c:	e59d508c 	ldr	r5, [sp, #140]	; 0x8c
   3bd90:	e59d7088 	ldr	r7, [sp, #136]	; 0x88
   3bd94:	e2458002 	sub	r8, r5, #2
   3bd98:	e3580000 	cmp	r8, #0
   3bd9c:	e58d100c 	str	r1, [sp, #12]
   3bda0:	e58d2010 	str	r2, [sp, #16]
   3bda4:	da000028 	ble	3be4c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xc8>
   3bda8:	e1a09003 	mov	r9, r3
   3bdac:	e3a0c000 	mov	ip, #0
   3bdb0:	e59fb268 	ldr	fp, [pc, #616]	; 3c020 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x29c>
   3bdb4:	e59fa268 	ldr	sl, [pc, #616]	; 3c024 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a0>
   3bdb8:	e2455001 	sub	r5, r5, #1
   3bdbc:	e1a01007 	mov	r1, r7
   3bdc0:	e7f1300c 	ldrb	r3, [r1, ip]!
   3bdc4:	e28c6002 	add	r6, ip, #2
   3bdc8:	e5d14001 	ldrb	r4, [r1, #1]
   3bdcc:	e2432001 	sub	r2, r3, #1
   3bdd0:	e1540005 	cmp	r4, r5
   3bdd4:	a1a04005 	movge	r4, r5
   3bdd8:	e3540000 	cmp	r4, #0
   3bddc:	0a00001c 	beq	3be54 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xd0>
   3bde0:	e3520004 	cmp	r2, #4
   3bde4:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   3bde8:	ea000087 	b	3c00c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x288>
   3bdec:	0003bf0c 	.word	0x0003bf0c
   3bdf0:	0003be8c 	.word	0x0003be8c
   3bdf4:	0003be3c 	.word	0x0003be3c
   3bdf8:	0003be28 	.word	0x0003be28
   3bdfc:	0003be04 	.word	0x0003be04
   3be00:	e3a04c01 	mov	r4, #256	; 0x100
   3be04:	e1a0200b 	mov	r2, fp
   3be08:	e3a01004 	mov	r1, #4
   3be0c:	e59f0214 	ldr	r0, [pc, #532]	; 3c028 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   3be10:	ebffcbfc 	bl	2ee08 <LogWrite>
   3be14:	e086c004 	add	ip, r6, r4
   3be18:	e158000c 	cmp	r8, ip
   3be1c:	caffffe6 	bgt	3bdbc <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x38>
   3be20:	ea000009 	b	3be4c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xc8>
   3be24:	e3a04c01 	mov	r4, #256	; 0x100
   3be28:	e1a0200a 	mov	r2, sl
   3be2c:	e3a01004 	mov	r1, #4
   3be30:	e59f01f0 	ldr	r0, [pc, #496]	; 3c028 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   3be34:	ebffcbf3 	bl	2ee08 <LogWrite>
   3be38:	eafffff5 	b	3be14 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   3be3c:	e3a01004 	mov	r1, #4
   3be40:	e59f21e4 	ldr	r2, [pc, #484]	; 3c02c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a8>
   3be44:	e59f01dc 	ldr	r0, [pc, #476]	; 3c028 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   3be48:	ebffcbee 	bl	2ee08 <LogWrite>
   3be4c:	e28dd064 	add	sp, sp, #100	; 0x64
   3be50:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3be54:	e3520004 	cmp	r2, #4
   3be58:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   3be5c:	ea000069 	b	3c008 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x284>
   3be60:	0003bf60 	.word	0x0003bf60
   3be64:	0003be74 	.word	0x0003be74
   3be68:	0003be3c 	.word	0x0003be3c
   3be6c:	0003be24 	.word	0x0003be24
   3be70:	0003be00 	.word	0x0003be00
   3be74:	e3a04c01 	mov	r4, #256	; 0x100
   3be78:	e3a01004 	mov	r1, #4
   3be7c:	e59f21ac 	ldr	r2, [pc, #428]	; 3c030 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2ac>
   3be80:	e59f01a0 	ldr	r0, [pc, #416]	; 3c028 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   3be84:	ebffcbdf 	bl	2ee08 <LogWrite>
   3be88:	eaffffe1 	b	3be14 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   3be8c:	e3540001 	cmp	r4, #1
   3be90:	1a000039 	bne	3bf7c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1f8>
   3be94:	e3a03000 	mov	r3, #0
   3be98:	e7d72006 	ldrb	r2, [r7, r6]
   3be9c:	e1a01009 	mov	r1, r9
   3bea0:	e28d0018 	add	r0, sp, #24
   3bea4:	e58d3034 	str	r3, [sp, #52]	; 0x34
   3bea8:	e58d3030 	str	r3, [sp, #48]	; 0x30
   3beac:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   3beb0:	e58d3028 	str	r3, [sp, #40]	; 0x28
   3beb4:	e58d3024 	str	r3, [sp, #36]	; 0x24
   3beb8:	e58d3020 	str	r3, [sp, #32]
   3bebc:	e58d301c 	str	r3, [sp, #28]
   3bec0:	e58d3048 	str	r3, [sp, #72]	; 0x48
   3bec4:	e58d3044 	str	r3, [sp, #68]	; 0x44
   3bec8:	e58d3040 	str	r3, [sp, #64]	; 0x40
   3becc:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   3bed0:	e58d3038 	str	r3, [sp, #56]	; 0x38
   3bed4:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   3bed8:	e58d3058 	str	r3, [sp, #88]	; 0x58
   3bedc:	e58d3054 	str	r3, [sp, #84]	; 0x54
   3bee0:	e58d3050 	str	r3, [sp, #80]	; 0x50
   3bee4:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   3bee8:	e59d3010 	ldr	r3, [sp, #16]
   3beec:	e58d2018 	str	r2, [sp, #24]
   3bef0:	e12fff33 	blx	r3
   3bef4:	e3a01004 	mov	r1, #4
   3bef8:	e59d3018 	ldr	r3, [sp, #24]
   3befc:	e59f2130 	ldr	r2, [pc, #304]	; 3c034 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2b0>
   3bf00:	e59f0120 	ldr	r0, [pc, #288]	; 3c028 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   3bf04:	ebffcbbf 	bl	2ee08 <LogWrite>
   3bf08:	eaffffc1 	b	3be14 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   3bf0c:	e3540002 	cmp	r4, #2
   3bf10:	d28440fe 	addle	r4, r4, #254	; 0xfe
   3bf14:	c2444002 	subgt	r4, r4, #2
   3bf18:	e1a02004 	mov	r2, r4
   3bf1c:	e7d70006 	ldrb	r0, [r7, r6]
   3bf20:	e5d13003 	ldrb	r3, [r1, #3]
   3bf24:	e28c6004 	add	r6, ip, #4
   3bf28:	e0800403 	add	r0, r0, r3, lsl #8
   3bf2c:	e1a03009 	mov	r3, r9
   3bf30:	e0871006 	add	r1, r7, r6
   3bf34:	e59dc00c 	ldr	ip, [sp, #12]
   3bf38:	e58d0014 	str	r0, [sp, #20]
   3bf3c:	e12fff3c 	blx	ip
   3bf40:	e59d0014 	ldr	r0, [sp, #20]
   3bf44:	e3a01004 	mov	r1, #4
   3bf48:	e1a03000 	mov	r3, r0
   3bf4c:	e59f20e4 	ldr	r2, [pc, #228]	; 3c038 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2b4>
   3bf50:	e59f00d0 	ldr	r0, [pc, #208]	; 3c028 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   3bf54:	e58d4000 	str	r4, [sp]
   3bf58:	ebffcbaa 	bl	2ee08 <LogWrite>
   3bf5c:	eaffffac 	b	3be14 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   3bf60:	e3a020fe 	mov	r2, #254	; 0xfe
   3bf64:	e7d70006 	ldrb	r0, [r7, r6]
   3bf68:	e5d13003 	ldrb	r3, [r1, #3]
   3bf6c:	e1a04002 	mov	r4, r2
   3bf70:	e28c6004 	add	r6, ip, #4
   3bf74:	e0800403 	add	r0, r0, r3, lsl #8
   3bf78:	eaffffeb 	b	3bf2c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1a8>
   3bf7c:	e3540002 	cmp	r4, #2
   3bf80:	1affffbc 	bne	3be78 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xf4>
   3bf84:	e3a03000 	mov	r3, #0
   3bf88:	e5d10003 	ldrb	r0, [r1, #3]
   3bf8c:	e7d72006 	ldrb	r2, [r7, r6]
   3bf90:	e1a01009 	mov	r1, r9
   3bf94:	e0822400 	add	r2, r2, r0, lsl #8
   3bf98:	e58d3034 	str	r3, [sp, #52]	; 0x34
   3bf9c:	e28d0018 	add	r0, sp, #24
   3bfa0:	e58d3030 	str	r3, [sp, #48]	; 0x30
   3bfa4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   3bfa8:	e58d3028 	str	r3, [sp, #40]	; 0x28
   3bfac:	e58d3024 	str	r3, [sp, #36]	; 0x24
   3bfb0:	e58d3020 	str	r3, [sp, #32]
   3bfb4:	e58d301c 	str	r3, [sp, #28]
   3bfb8:	e58d3048 	str	r3, [sp, #72]	; 0x48
   3bfbc:	e58d3044 	str	r3, [sp, #68]	; 0x44
   3bfc0:	e58d3040 	str	r3, [sp, #64]	; 0x40
   3bfc4:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   3bfc8:	e58d3038 	str	r3, [sp, #56]	; 0x38
   3bfcc:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   3bfd0:	e58d3058 	str	r3, [sp, #88]	; 0x58
   3bfd4:	e58d3054 	str	r3, [sp, #84]	; 0x54
   3bfd8:	e58d3050 	str	r3, [sp, #80]	; 0x50
   3bfdc:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   3bfe0:	e59d3010 	ldr	r3, [sp, #16]
   3bfe4:	e58d2018 	str	r2, [sp, #24]
   3bfe8:	e28c6004 	add	r6, ip, #4
   3bfec:	e12fff33 	blx	r3
   3bff0:	e3a01004 	mov	r1, #4
   3bff4:	e59d3018 	ldr	r3, [sp, #24]
   3bff8:	e59f203c 	ldr	r2, [pc, #60]	; 3c03c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2b8>
   3bffc:	e59f0024 	ldr	r0, [pc, #36]	; 3c028 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   3c000:	ebffcb80 	bl	2ee08 <LogWrite>
   3c004:	eaffff82 	b	3be14 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   3c008:	e3a04c01 	mov	r4, #256	; 0x100
   3c00c:	e3a01004 	mov	r1, #4
   3c010:	e59f2028 	ldr	r2, [pc, #40]	; 3c040 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2bc>
   3c014:	e59f000c 	ldr	r0, [pc, #12]	; 3c028 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   3c018:	ebffcb7a 	bl	2ee08 <LogWrite>
   3c01c:	eaffff7c 	b	3be14 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   3c020:	0004953c 	.word	0x0004953c
   3c024:	00049524 	.word	0x00049524
   3c028:	000494d4 	.word	0x000494d4
   3c02c:	00049514 	.word	0x00049514
   3c030:	00049500 	.word	0x00049500
   3c034:	000494e0 	.word	0x000494e0
   3c038:	000494b4 	.word	0x000494b4
   3c03c:	000494f0 	.word	0x000494f0
   3c040:	00049544 	.word	0x00049544

0003c044 <McZXSpectrumSNAFormat::McZXSpectrumSNAFormat()>:
   3c044:	e12fff1e 	bx	lr

0003c048 <McZXSpectrumSNAFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>:
   3c048:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3c04c:	e24dd06c 	sub	sp, sp, #108	; 0x6c
   3c050:	e59dc08c 	ldr	ip, [sp, #140]	; 0x8c
   3c054:	e59f01b4 	ldr	r0, [pc, #436]	; 3c210 <McZXSpectrumSNAFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1c8>
   3c058:	e59d4088 	ldr	r4, [sp, #136]	; 0x88
   3c05c:	e15c0000 	cmp	ip, r0
   3c060:	da000062 	ble	3c1f0 <McZXSpectrumSNAFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1a8>
   3c064:	e1a05001 	mov	r5, r1
   3c068:	e3a01000 	mov	r1, #0
   3c06c:	e5d40016 	ldrb	r0, [r4, #22]
   3c070:	e5d4c008 	ldrb	ip, [r4, #8]
   3c074:	e5d47015 	ldrb	r7, [r4, #21]
   3c078:	e5d46007 	ldrb	r6, [r4, #7]
   3c07c:	e5d48006 	ldrb	r8, [r4, #6]
   3c080:	e5d4e00d 	ldrb	lr, [r4, #13]
   3c084:	e1877400 	orr	r7, r7, r0, lsl #8
   3c088:	e186640c 	orr	r6, r6, ip, lsl #8
   3c08c:	e5d4000e 	ldrb	r0, [r4, #14]
   3c090:	e5d4c005 	ldrb	ip, [r4, #5]
   3c094:	e18ee400 	orr	lr, lr, r0, lsl #8
   3c098:	e18cc408 	orr	ip, ip, r8, lsl #8
   3c09c:	e5d4000b 	ldrb	r0, [r4, #11]
   3c0a0:	e5d4800c 	ldrb	r8, [r4, #12]
   3c0a4:	e58d7034 	str	r7, [sp, #52]	; 0x34
   3c0a8:	e5d47003 	ldrb	r7, [r4, #3]
   3c0ac:	e1800408 	orr	r0, r0, r8, lsl #8
   3c0b0:	e5d48004 	ldrb	r8, [r4, #4]
   3c0b4:	e58d604c 	str	r6, [sp, #76]	; 0x4c
   3c0b8:	e5d46009 	ldrb	r6, [r4, #9]
   3c0bc:	e1877408 	orr	r7, r7, r8, lsl #8
   3c0c0:	e5d4800a 	ldrb	r8, [r4, #10]
   3c0c4:	e58de030 	str	lr, [sp, #48]	; 0x30
   3c0c8:	e1866408 	orr	r6, r6, r8, lsl #8
   3c0cc:	e5d4e001 	ldrb	lr, [r4, #1]
   3c0d0:	e5d48002 	ldrb	r8, [r4, #2]
   3c0d4:	e58dc048 	str	ip, [sp, #72]	; 0x48
   3c0d8:	e5d4c011 	ldrb	ip, [r4, #17]
   3c0dc:	e18ee408 	orr	lr, lr, r8, lsl #8
   3c0e0:	e5d48012 	ldrb	r8, [r4, #18]
   3c0e4:	e58d002c 	str	r0, [sp, #44]	; 0x2c
   3c0e8:	e5d4000f 	ldrb	r0, [r4, #15]
   3c0ec:	e18cc408 	orr	ip, ip, r8, lsl #8
   3c0f0:	e5d48010 	ldrb	r8, [r4, #16]
   3c0f4:	e58d7044 	str	r7, [sp, #68]	; 0x44
   3c0f8:	e1800408 	orr	r0, r0, r8, lsl #8
   3c0fc:	e58d6028 	str	r6, [sp, #40]	; 0x28
   3c100:	e58de040 	str	lr, [sp, #64]	; 0x40
   3c104:	e58dc038 	str	ip, [sp, #56]	; 0x38
   3c108:	e58d1050 	str	r1, [sp, #80]	; 0x50
   3c10c:	e58d1064 	str	r1, [sp, #100]	; 0x64
   3c110:	e58d003c 	str	r0, [sp, #60]	; 0x3c
   3c114:	e5d40017 	ldrb	r0, [r4, #23]
   3c118:	e5d4c018 	ldrb	ip, [r4, #24]
   3c11c:	e5d46013 	ldrb	r6, [r4, #19]
   3c120:	e180040c 	orr	r0, r0, ip, lsl #8
   3c124:	e240edff 	sub	lr, r0, #16320	; 0x3fc0
   3c128:	e2407901 	sub	r7, r0, #16384	; 0x4000
   3c12c:	e24ee03f 	sub	lr, lr, #63	; 0x3f
   3c130:	e084e00e 	add	lr, r4, lr
   3c134:	e0847007 	add	r7, r4, r7
   3c138:	e5de801b 	ldrb	r8, [lr, #27]
   3c13c:	e5d7c01b 	ldrb	ip, [r7, #27]
   3c140:	e5d49000 	ldrb	r9, [r4]
   3c144:	e08cc408 	add	ip, ip, r8, lsl #8
   3c148:	e6ffc07c 	uxth	ip, ip
   3c14c:	e5d48019 	ldrb	r8, [r4, #25]
   3c150:	e58dc020 	str	ip, [sp, #32]
   3c154:	e2800002 	add	r0, r0, #2
   3c158:	e5d4c014 	ldrb	ip, [r4, #20]
   3c15c:	e1a06126 	lsr	r6, r6, #2
   3c160:	e5c7101b 	strb	r1, [r7, #27]
   3c164:	e58d0024 	str	r0, [sp, #36]	; 0x24
   3c168:	e5ce101b 	strb	r1, [lr, #27]
   3c16c:	e28d0020 	add	r0, sp, #32
   3c170:	e1a01003 	mov	r1, r3
   3c174:	e2066001 	and	r6, r6, #1
   3c178:	e2088003 	and	r8, r8, #3
   3c17c:	e58dc058 	str	ip, [sp, #88]	; 0x58
   3c180:	e58d301c 	str	r3, [sp, #28]
   3c184:	e58d6060 	str	r6, [sp, #96]	; 0x60
   3c188:	e58d805c 	str	r8, [sp, #92]	; 0x5c
   3c18c:	e58d9054 	str	r9, [sp, #84]	; 0x54
   3c190:	e12fff32 	blx	r2
   3c194:	e59d301c 	ldr	r3, [sp, #28]
   3c198:	e284101b 	add	r1, r4, #27
   3c19c:	e3a02903 	mov	r2, #49152	; 0xc000
   3c1a0:	e3a00901 	mov	r0, #16384	; 0x4000
   3c1a4:	e12fff35 	blx	r5
   3c1a8:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
   3c1ac:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   3c1b0:	e59f005c 	ldr	r0, [pc, #92]	; 3c214 <McZXSpectrumSNAFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1cc>
   3c1b4:	e28d1028 	add	r1, sp, #40	; 0x28
   3c1b8:	e8915002 	ldm	r1, {r1, ip, lr}
   3c1bc:	e5900000 	ldr	r0, [r0]
   3c1c0:	e58d1008 	str	r1, [sp, #8]
   3c1c4:	e58d2004 	str	r2, [sp, #4]
   3c1c8:	e58d3000 	str	r3, [sp]
   3c1cc:	e3a01004 	mov	r1, #4
   3c1d0:	e59d3020 	ldr	r3, [sp, #32]
   3c1d4:	e59f203c 	ldr	r2, [pc, #60]	; 3c218 <McZXSpectrumSNAFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1d0>
   3c1d8:	e58de010 	str	lr, [sp, #16]
   3c1dc:	e58dc00c 	str	ip, [sp, #12]
   3c1e0:	ebffcb08 	bl	2ee08 <LogWrite>
   3c1e4:	e3a00001 	mov	r0, #1
   3c1e8:	e28dd06c 	add	sp, sp, #108	; 0x6c
   3c1ec:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3c1f0:	e59f301c 	ldr	r3, [pc, #28]	; 3c214 <McZXSpectrumSNAFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1cc>
   3c1f4:	e3a01004 	mov	r1, #4
   3c1f8:	e5930000 	ldr	r0, [r3]
   3c1fc:	e59f2018 	ldr	r2, [pc, #24]	; 3c21c <McZXSpectrumSNAFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1d4>
   3c200:	ebffcb00 	bl	2ee08 <LogWrite>
   3c204:	e3a00000 	mov	r0, #0
   3c208:	e28dd06c 	add	sp, sp, #108	; 0x6c
   3c20c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3c210:	0000c01a 	.word	0x0000c01a
   3c214:	0004ee6c 	.word	0x0004ee6c
   3c218:	00049580 	.word	0x00049580
   3c21c:	0004955c 	.word	0x0004955c

0003c220 <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>:
   3c220:	e0803001 	add	r3, r0, r1
   3c224:	e5d32001 	ldrb	r2, [r3, #1]
   3c228:	e7d00001 	ldrb	r0, [r0, r1]
   3c22c:	e0800402 	add	r0, r0, r2, lsl #8
   3c230:	e12fff1e 	bx	lr

0003c234 <McZXSpectrumTZXFormat::McZXSpectrumTZXFormat()>:
   3c234:	e3a02000 	mov	r2, #0
   3c238:	e59f1018 	ldr	r1, [pc, #24]	; 3c258 <McZXSpectrumTZXFormat::McZXSpectrumTZXFormat()+0x24>
   3c23c:	e5802000 	str	r2, [r0]
   3c240:	e5801014 	str	r1, [r0, #20]
   3c244:	e5802004 	str	r2, [r0, #4]
   3c248:	e5802008 	str	r2, [r0, #8]
   3c24c:	e580200c 	str	r2, [r0, #12]
   3c250:	e5802010 	str	r2, [r0, #16]
   3c254:	e12fff1e 	bx	lr
   3c258:	00005ccb 	.word	0x00005ccb

0003c25c <McZXSpectrumTZXFormat::getString(unsigned char const*, int, int, int, char*)>:
   3c25c:	e92d4070 	push	{r4, r5, r6, lr}
   3c260:	e59d4010 	ldr	r4, [sp, #16]
   3c264:	e0422003 	sub	r2, r2, r3
   3c268:	e1520004 	cmp	r2, r4
   3c26c:	b1a04002 	movlt	r4, r2
   3c270:	e59d5014 	ldr	r5, [sp, #20]
   3c274:	e0811003 	add	r1, r1, r3
   3c278:	e1a00005 	mov	r0, r5
   3c27c:	e2842001 	add	r2, r4, #1
   3c280:	ebffc715 	bl	2dedc <strlcpy>
   3c284:	e3a03000 	mov	r3, #0
   3c288:	e7c53004 	strb	r3, [r5, r4]
   3c28c:	e8bd8070 	pop	{r4, r5, r6, pc}

0003c290 <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int)>:
   3c290:	e2830001 	add	r0, r3, #1
   3c294:	e1500002 	cmp	r0, r2
   3c298:	e1a00001 	mov	r0, r1
   3c29c:	aa000001 	bge	3c2a8 <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int)+0x18>
   3c2a0:	e1a01003 	mov	r1, r3
   3c2a4:	eaffffdd 	b	3c220 <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3c2a8:	e3a00000 	mov	r0, #0
   3c2ac:	e12fff1e 	bx	lr

0003c2b0 <McZXSpectrumTZXFormat::getByte(unsigned char const*, int, int)>:
   3c2b0:	e1530002 	cmp	r3, r2
   3c2b4:	b7d10003 	ldrblt	r0, [r1, r3]
   3c2b8:	a3a00000 	movge	r0, #0
   3c2bc:	e12fff1e 	bx	lr

0003c2c0 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)>:
   3c2c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c2c4:	e24dd024 	sub	sp, sp, #36	; 0x24
   3c2c8:	e59d7048 	ldr	r7, [sp, #72]	; 0x48
   3c2cc:	e59d404c 	ldr	r4, [sp, #76]	; 0x4c
   3c2d0:	e1a05000 	mov	r5, r0
   3c2d4:	e7d76004 	ldrb	r6, [r7, r4]
   3c2d8:	e59da050 	ldr	sl, [sp, #80]	; 0x50
   3c2dc:	e3560000 	cmp	r6, #0
   3c2e0:	1a000011 	bne	3c32c <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x6c>
   3c2e4:	e2843001 	add	r3, r4, #1
   3c2e8:	e153000a 	cmp	r3, sl
   3c2ec:	aa00002a 	bge	3c39c <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0xdc>
   3c2f0:	e7d73003 	ldrb	r3, [r7, r3]
   3c2f4:	e3530000 	cmp	r3, #0
   3c2f8:	e5803000 	str	r3, [r0]
   3c2fc:	0a000027 	beq	3c3a0 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0xe0>
   3c300:	e3530001 	cmp	r3, #1
   3c304:	0a000080 	beq	3c50c <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x24c>
   3c308:	e3530002 	cmp	r3, #2
   3c30c:	0a0000a1 	beq	3c598 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x2d8>
   3c310:	e3530003 	cmp	r3, #3
   3c314:	0a000054 	beq	3c46c <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x1ac>
   3c318:	e3a01004 	mov	r1, #4
   3c31c:	e59f2300 	ldr	r2, [pc, #768]	; 3c624 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x364>
   3c320:	e59f0300 	ldr	r0, [pc, #768]	; 3c628 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x368>
   3c324:	ebffcab7 	bl	2ee08 <LogWrite>
   3c328:	ea000006 	b	3c348 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x88>
   3c32c:	e35600ff 	cmp	r6, #255	; 0xff
   3c330:	0a00000b 	beq	3c364 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0xa4>
   3c334:	e1a03006 	mov	r3, r6
   3c338:	e3a01004 	mov	r1, #4
   3c33c:	e59f22e8 	ldr	r2, [pc, #744]	; 3c62c <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x36c>
   3c340:	e59f02e0 	ldr	r0, [pc, #736]	; 3c628 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x368>
   3c344:	ebffcaaf 	bl	2ee08 <LogWrite>
   3c348:	e3a01004 	mov	r1, #4
   3c34c:	e59f22dc 	ldr	r2, [pc, #732]	; 3c630 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x370>
   3c350:	e59f02d0 	ldr	r0, [pc, #720]	; 3c628 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x368>
   3c354:	ebffcaab 	bl	2ee08 <LogWrite>
   3c358:	e3a00001 	mov	r0, #1
   3c35c:	e28dd024 	add	sp, sp, #36	; 0x24
   3c360:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c364:	e1a08003 	mov	r8, r3
   3c368:	e1a09001 	mov	r9, r1
   3c36c:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
   3c370:	e3a01004 	mov	r1, #4
   3c374:	e59f22b8 	ldr	r2, [pc, #696]	; 3c634 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x374>
   3c378:	e59f02a8 	ldr	r0, [pc, #680]	; 3c628 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x368>
   3c37c:	ebffcaa1 	bl	2ee08 <LogWrite>
   3c380:	e2841001 	add	r1, r4, #1
   3c384:	e1a03008 	mov	r3, r8
   3c388:	e5950014 	ldr	r0, [r5, #20]
   3c38c:	e59d2054 	ldr	r2, [sp, #84]	; 0x54
   3c390:	e0871001 	add	r1, r7, r1
   3c394:	e12fff39 	blx	r9
   3c398:	eaffffea 	b	3c348 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x88>
   3c39c:	e5806000 	str	r6, [r0]
   3c3a0:	e2841002 	add	r1, r4, #2
   3c3a4:	e04a8001 	sub	r8, sl, r1
   3c3a8:	e358000a 	cmp	r8, #10
   3c3ac:	a3a0800a 	movge	r8, #10
   3c3b0:	e28d9014 	add	r9, sp, #20
   3c3b4:	e2882001 	add	r2, r8, #1
   3c3b8:	e1a00009 	mov	r0, r9
   3c3bc:	e0871001 	add	r1, r7, r1
   3c3c0:	ebffc6c5 	bl	2dedc <strlcpy>
   3c3c4:	e3a00000 	mov	r0, #0
   3c3c8:	e284300d 	add	r3, r4, #13
   3c3cc:	e28d2020 	add	r2, sp, #32
   3c3d0:	e0828008 	add	r8, r2, r8
   3c3d4:	e15a0003 	cmp	sl, r3
   3c3d8:	e548000c 	strb	r0, [r8, #-12]
   3c3dc:	d1a08000 	movle	r8, r0
   3c3e0:	da000003 	ble	3c3f4 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x134>
   3c3e4:	e1a00007 	mov	r0, r7
   3c3e8:	e284100c 	add	r1, r4, #12
   3c3ec:	ebffff8b 	bl	3c220 <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3c3f0:	e1a08000 	mov	r8, r0
   3c3f4:	e284300f 	add	r3, r4, #15
   3c3f8:	e15a0003 	cmp	sl, r3
   3c3fc:	d3a0b000 	movle	fp, #0
   3c400:	e5858004 	str	r8, [r5, #4]
   3c404:	da000003 	ble	3c418 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x158>
   3c408:	e1a00007 	mov	r0, r7
   3c40c:	e284100e 	add	r1, r4, #14
   3c410:	ebffff82 	bl	3c220 <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3c414:	e1a0b000 	mov	fp, r0
   3c418:	e2843011 	add	r3, r4, #17
   3c41c:	e15a0003 	cmp	sl, r3
   3c420:	d3a00000 	movle	r0, #0
   3c424:	e585b008 	str	fp, [r5, #8]
   3c428:	da000002 	ble	3c438 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x178>
   3c42c:	e1a00007 	mov	r0, r7
   3c430:	e2841010 	add	r1, r4, #16
   3c434:	ebffff79 	bl	3c220 <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3c438:	e2844012 	add	r4, r4, #18
   3c43c:	e585000c 	str	r0, [r5, #12]
   3c440:	e154000a 	cmp	r4, sl
   3c444:	b7d76004 	ldrblt	r6, [r7, r4]
   3c448:	e1a03009 	mov	r3, r9
   3c44c:	e58d0008 	str	r0, [sp, #8]
   3c450:	e3a01004 	mov	r1, #4
   3c454:	e88d0900 	stm	sp, {r8, fp}
   3c458:	e59f21d8 	ldr	r2, [pc, #472]	; 3c638 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x378>
   3c45c:	e59f01c4 	ldr	r0, [pc, #452]	; 3c628 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x368>
   3c460:	e58d600c 	str	r6, [sp, #12]
   3c464:	ebffca67 	bl	2ee08 <LogWrite>
   3c468:	eaffffb6 	b	3c348 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x88>
   3c46c:	e2841002 	add	r1, r4, #2
   3c470:	e04a8001 	sub	r8, sl, r1
   3c474:	e358000a 	cmp	r8, #10
   3c478:	a3a0800a 	movge	r8, #10
   3c47c:	e28d9014 	add	r9, sp, #20
   3c480:	e2882001 	add	r2, r8, #1
   3c484:	e1a00009 	mov	r0, r9
   3c488:	e0871001 	add	r1, r7, r1
   3c48c:	ebffc692 	bl	2dedc <strlcpy>
   3c490:	e284300d 	add	r3, r4, #13
   3c494:	e28d2020 	add	r2, sp, #32
   3c498:	e0828008 	add	r8, r2, r8
   3c49c:	e15a0003 	cmp	sl, r3
   3c4a0:	e548600c 	strb	r6, [r8, #-12]
   3c4a4:	d1a08006 	movle	r8, r6
   3c4a8:	da000003 	ble	3c4bc <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x1fc>
   3c4ac:	e1a00007 	mov	r0, r7
   3c4b0:	e284100c 	add	r1, r4, #12
   3c4b4:	ebffff59 	bl	3c220 <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3c4b8:	e1a08000 	mov	r8, r0
   3c4bc:	e284300f 	add	r3, r4, #15
   3c4c0:	e15a0003 	cmp	sl, r3
   3c4c4:	d3a00000 	movle	r0, #0
   3c4c8:	e5858004 	str	r8, [r5, #4]
   3c4cc:	da000002 	ble	3c4dc <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x21c>
   3c4d0:	e1a00007 	mov	r0, r7
   3c4d4:	e284100e 	add	r1, r4, #14
   3c4d8:	ebffff50 	bl	3c220 <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3c4dc:	e2844011 	add	r4, r4, #17
   3c4e0:	e5850014 	str	r0, [r5, #20]
   3c4e4:	e154000a 	cmp	r4, sl
   3c4e8:	b7d76004 	ldrblt	r6, [r7, r4]
   3c4ec:	e1a03009 	mov	r3, r9
   3c4f0:	e98d0041 	stmib	sp, {r0, r6}
   3c4f4:	e3a01004 	mov	r1, #4
   3c4f8:	e59f213c 	ldr	r2, [pc, #316]	; 3c63c <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x37c>
   3c4fc:	e59f0124 	ldr	r0, [pc, #292]	; 3c628 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x368>
   3c500:	e58d8000 	str	r8, [sp]
   3c504:	ebffca3f 	bl	2ee08 <LogWrite>
   3c508:	eaffff8e 	b	3c348 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x88>
   3c50c:	e2841002 	add	r1, r4, #2
   3c510:	e04a8001 	sub	r8, sl, r1
   3c514:	e358000a 	cmp	r8, #10
   3c518:	a3a0800a 	movge	r8, #10
   3c51c:	e28d9014 	add	r9, sp, #20
   3c520:	e2882001 	add	r2, r8, #1
   3c524:	e1a00009 	mov	r0, r9
   3c528:	e0871001 	add	r1, r7, r1
   3c52c:	ebffc66a 	bl	2dedc <strlcpy>
   3c530:	e284300d 	add	r3, r4, #13
   3c534:	e28d2020 	add	r2, sp, #32
   3c538:	e0828008 	add	r8, r2, r8
   3c53c:	e15a0003 	cmp	sl, r3
   3c540:	d1a00006 	movle	r0, r6
   3c544:	e548600c 	strb	r6, [r8, #-12]
   3c548:	da000002 	ble	3c558 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x298>
   3c54c:	e1a00007 	mov	r0, r7
   3c550:	e284100c 	add	r1, r4, #12
   3c554:	ebffff31 	bl	3c220 <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3c558:	e284300f 	add	r3, r4, #15
   3c55c:	e153000a 	cmp	r3, sl
   3c560:	a3a03000 	movge	r3, #0
   3c564:	e5850004 	str	r0, [r5, #4]
   3c568:	b7d73003 	ldrblt	r3, [r7, r3]
   3c56c:	e2844011 	add	r4, r4, #17
   3c570:	e5853010 	str	r3, [r5, #16]
   3c574:	e154000a 	cmp	r4, sl
   3c578:	b7d76004 	ldrblt	r6, [r7, r4]
   3c57c:	e3a01004 	mov	r1, #4
   3c580:	e88d0049 	stm	sp, {r0, r3, r6}
   3c584:	e59f20b4 	ldr	r2, [pc, #180]	; 3c640 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x380>
   3c588:	e1a03009 	mov	r3, r9
   3c58c:	e59f0094 	ldr	r0, [pc, #148]	; 3c628 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x368>
   3c590:	ebffca1c 	bl	2ee08 <LogWrite>
   3c594:	eaffff6b 	b	3c348 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x88>
   3c598:	e2841002 	add	r1, r4, #2
   3c59c:	e04a8001 	sub	r8, sl, r1
   3c5a0:	e358000a 	cmp	r8, #10
   3c5a4:	a3a0800a 	movge	r8, #10
   3c5a8:	e28d9014 	add	r9, sp, #20
   3c5ac:	e2882001 	add	r2, r8, #1
   3c5b0:	e1a00009 	mov	r0, r9
   3c5b4:	e0871001 	add	r1, r7, r1
   3c5b8:	ebffc647 	bl	2dedc <strlcpy>
   3c5bc:	e284300d 	add	r3, r4, #13
   3c5c0:	e28d2020 	add	r2, sp, #32
   3c5c4:	e0828008 	add	r8, r2, r8
   3c5c8:	e15a0003 	cmp	sl, r3
   3c5cc:	d1a00006 	movle	r0, r6
   3c5d0:	e548600c 	strb	r6, [r8, #-12]
   3c5d4:	da000002 	ble	3c5e4 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x324>
   3c5d8:	e1a00007 	mov	r0, r7
   3c5dc:	e284100c 	add	r1, r4, #12
   3c5e0:	ebffff0e 	bl	3c220 <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3c5e4:	e284300f 	add	r3, r4, #15
   3c5e8:	e153000a 	cmp	r3, sl
   3c5ec:	a3a03000 	movge	r3, #0
   3c5f0:	e5850004 	str	r0, [r5, #4]
   3c5f4:	b7d73003 	ldrblt	r3, [r7, r3]
   3c5f8:	e2844011 	add	r4, r4, #17
   3c5fc:	e5853010 	str	r3, [r5, #16]
   3c600:	e154000a 	cmp	r4, sl
   3c604:	b7d76004 	ldrblt	r6, [r7, r4]
   3c608:	e3a01004 	mov	r1, #4
   3c60c:	e88d0049 	stm	sp, {r0, r3, r6}
   3c610:	e59f202c 	ldr	r2, [pc, #44]	; 3c644 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x384>
   3c614:	e1a03009 	mov	r3, r9
   3c618:	e59f0008 	ldr	r0, [pc, #8]	; 3c628 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x368>
   3c61c:	ebffc9f9 	bl	2ee08 <LogWrite>
   3c620:	eaffff48 	b	3c348 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x88>
   3c624:	000496dc 	.word	0x000496dc
   3c628:	00049624 	.word	0x00049624
   3c62c:	00049704 	.word	0x00049704
   3c630:	000491cc 	.word	0x000491cc
   3c634:	000496f0 	.word	0x000496f0
   3c638:	000495d8 	.word	0x000495d8
   3c63c:	000496a4 	.word	0x000496a4
   3c640:	00049630 	.word	0x00049630
   3c644:	00049668 	.word	0x00049668

0003c648 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>:
   3c648:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c64c:	ed2d8b04 	vpush	{d8-d9}
   3c650:	e1a0e001 	mov	lr, r1
   3c654:	e1a0c002 	mov	ip, r2
   3c658:	e24ddf49 	sub	sp, sp, #292	; 0x124
   3c65c:	e59d8158 	ldr	r8, [sp, #344]	; 0x158
   3c660:	e1a04000 	mov	r4, r0
   3c664:	e3a02007 	mov	r2, #7
   3c668:	e1a00008 	mov	r0, r8
   3c66c:	e59f1190 	ldr	r1, [pc, #400]	; 3c804 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1bc>
   3c670:	ee08ea90 	vmov	s17, lr
   3c674:	ee09ca10 	vmov	s18, ip
   3c678:	e1a0a003 	mov	sl, r3
   3c67c:	e59d615c 	ldr	r6, [sp, #348]	; 0x15c
   3c680:	ebffb6b8 	bl	2a168 <strncmp>
   3c684:	e3500000 	cmp	r0, #0
   3c688:	1a000055 	bne	3c7e4 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x19c>
   3c68c:	ee084a10 	vmov	s16, r4
   3c690:	e3a0400a 	mov	r4, #10
   3c694:	e59f916c 	ldr	r9, [pc, #364]	; 3c808 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1c0>
   3c698:	e2443001 	sub	r3, r4, #1
   3c69c:	e0883003 	add	r3, r8, r3
   3c6a0:	e1540006 	cmp	r4, r6
   3c6a4:	aa000024 	bge	3c73c <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xf4>
   3c6a8:	e5f32001 	ldrb	r2, [r3, #1]!
   3c6ac:	e2845001 	add	r5, r4, #1
   3c6b0:	e3520010 	cmp	r2, #16
   3c6b4:	0a000026 	beq	3c754 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x10c>
   3c6b8:	e3520030 	cmp	r2, #48	; 0x30
   3c6bc:	1a000022 	bne	3c74c <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x104>
   3c6c0:	e1560005 	cmp	r6, r5
   3c6c4:	d3a0b000 	movle	fp, #0
   3c6c8:	c7d8b005 	ldrbgt	fp, [r8, r5]
   3c6cc:	e2841002 	add	r1, r4, #2
   3c6d0:	e0467001 	sub	r7, r6, r1
   3c6d4:	d3a03001 	movle	r3, #1
   3c6d8:	c28b3001 	addgt	r3, fp, #1
   3c6dc:	e157000b 	cmp	r7, fp
   3c6e0:	a1a0700b 	movge	r7, fp
   3c6e4:	e28d401c 	add	r4, sp, #28
   3c6e8:	e2872001 	add	r2, r7, #1
   3c6ec:	e1a00004 	mov	r0, r4
   3c6f0:	e0881001 	add	r1, r8, r1
   3c6f4:	e58d3014 	str	r3, [sp, #20]
   3c6f8:	ebffc5f7 	bl	2dedc <strlcpy>
   3c6fc:	e3a0c000 	mov	ip, #0
   3c700:	e59de014 	ldr	lr, [sp, #20]
   3c704:	e28d3e12 	add	r3, sp, #288	; 0x120
   3c708:	e0837007 	add	r7, r3, r7
   3c70c:	e58d4000 	str	r4, [sp]
   3c710:	e1a0300b 	mov	r3, fp
   3c714:	e085400e 	add	r4, r5, lr
   3c718:	e3a01004 	mov	r1, #4
   3c71c:	e1a00009 	mov	r0, r9
   3c720:	e59f20e4 	ldr	r2, [pc, #228]	; 3c80c <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1c4>
   3c724:	e547c104 	strb	ip, [r7, #-260]	; 0xfffffefc
   3c728:	ebffc9b6 	bl	2ee08 <LogWrite>
   3c72c:	e2443001 	sub	r3, r4, #1
   3c730:	e1540006 	cmp	r4, r6
   3c734:	e0883003 	add	r3, r8, r3
   3c738:	baffffda 	blt	3c6a8 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x60>
   3c73c:	e3a00001 	mov	r0, #1
   3c740:	e28ddf49 	add	sp, sp, #292	; 0x124
   3c744:	ecbd8b04 	vpop	{d8-d9}
   3c748:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c74c:	e1a04005 	mov	r4, r5
   3c750:	eaffffd2 	b	3c6a0 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x58>
   3c754:	e2843002 	add	r3, r4, #2
   3c758:	e1560003 	cmp	r6, r3
   3c75c:	d3a03000 	movle	r3, #0
   3c760:	da000003 	ble	3c774 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x12c>
   3c764:	e1a01005 	mov	r1, r5
   3c768:	e1a00008 	mov	r0, r8
   3c76c:	ebfffeab 	bl	3c220 <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3c770:	e1a03000 	mov	r3, r0
   3c774:	e2842004 	add	r2, r4, #4
   3c778:	e1560002 	cmp	r6, r2
   3c77c:	da000015 	ble	3c7d8 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x190>
   3c780:	e1a00008 	mov	r0, r8
   3c784:	e2841003 	add	r1, r4, #3
   3c788:	e58d3014 	str	r3, [sp, #20]
   3c78c:	ebfffea3 	bl	3c220 <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3c790:	e1a07000 	mov	r7, r0
   3c794:	e59d3014 	ldr	r3, [sp, #20]
   3c798:	e280b004 	add	fp, r0, #4
   3c79c:	e1a00009 	mov	r0, r9
   3c7a0:	e3a01004 	mov	r1, #4
   3c7a4:	e59f2064 	ldr	r2, [pc, #100]	; 3c810 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1c8>
   3c7a8:	e58d7000 	str	r7, [sp]
   3c7ac:	e2844005 	add	r4, r4, #5
   3c7b0:	ebffc994 	bl	2ee08 <LogWrite>
   3c7b4:	e98d00d0 	stmib	sp, {r4, r6, r7}
   3c7b8:	e1a0300a 	mov	r3, sl
   3c7bc:	ee192a10 	vmov	r2, s18
   3c7c0:	ee181a90 	vmov	r1, s17
   3c7c4:	ee180a10 	vmov	r0, s16
   3c7c8:	e58d8000 	str	r8, [sp]
   3c7cc:	e085400b 	add	r4, r5, fp
   3c7d0:	ebfffeba 	bl	3c2c0 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)>
   3c7d4:	eaffffaf 	b	3c698 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x50>
   3c7d8:	e3a07000 	mov	r7, #0
   3c7dc:	e3a0b004 	mov	fp, #4
   3c7e0:	eaffffed 	b	3c79c <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x154>
   3c7e4:	e3a01004 	mov	r1, #4
   3c7e8:	e59f2024 	ldr	r2, [pc, #36]	; 3c814 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1cc>
   3c7ec:	e59f0014 	ldr	r0, [pc, #20]	; 3c808 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1c0>
   3c7f0:	ebffc984 	bl	2ee08 <LogWrite>
   3c7f4:	e3a00000 	mov	r0, #0
   3c7f8:	e28ddf49 	add	sp, sp, #292	; 0x124
   3c7fc:	ecbd8b04 	vpop	{d8-d9}
   3c800:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c804:	0004971c 	.word	0x0004971c
   3c808:	00049624 	.word	0x00049624
   3c80c:	0004975c 	.word	0x0004975c
   3c810:	00049734 	.word	0x00049734
   3c814:	00049724 	.word	0x00049724

0003c818 <McZXSpectrumZ80Format::McZXSpectrumZ80Format()>:
   3c818:	e12fff1e 	bx	lr

0003c81c <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)>:
   3c81c:	e92d4030 	push	{r4, r5, lr}
   3c820:	e3530000 	cmp	r3, #0
   3c824:	e5dd400c 	ldrb	r4, [sp, #12]
   3c828:	da00001d 	ble	3c8a4 <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)+0x88>
   3c82c:	e1a00002 	mov	r0, r2
   3c830:	e3a0e000 	mov	lr, #0
   3c834:	ea000004 	b	3c84c <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)+0x30>
   3c838:	e4c0c001 	strb	ip, [r0], #1
   3c83c:	e040e002 	sub	lr, r0, r2
   3c840:	e15e0003 	cmp	lr, r3
   3c844:	e2811001 	add	r1, r1, #1
   3c848:	aa000013 	bge	3c89c <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)+0x80>
   3c84c:	e3540000 	cmp	r4, #0
   3c850:	e5d1c000 	ldrb	ip, [r1]
   3c854:	0afffff7 	beq	3c838 <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)+0x1c>
   3c858:	e35c00ed 	cmp	ip, #237	; 0xed
   3c85c:	1afffff5 	bne	3c838 <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)+0x1c>
   3c860:	e5d15001 	ldrb	r5, [r1, #1]
   3c864:	e35500ed 	cmp	r5, #237	; 0xed
   3c868:	1afffff2 	bne	3c838 <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)+0x1c>
   3c86c:	e5d1c002 	ldrb	ip, [r1, #2]
   3c870:	e35c0000 	cmp	ip, #0
   3c874:	0a000008 	beq	3c89c <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)+0x80>
   3c878:	e5d1e003 	ldrb	lr, [r1, #3]
   3c87c:	e080c00c 	add	ip, r0, ip
   3c880:	e2811004 	add	r1, r1, #4
   3c884:	e4c0e001 	strb	lr, [r0], #1
   3c888:	e15c0000 	cmp	ip, r0
   3c88c:	1afffffc 	bne	3c884 <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)+0x68>
   3c890:	e040e002 	sub	lr, r0, r2
   3c894:	e15e0003 	cmp	lr, r3
   3c898:	baffffeb 	blt	3c84c <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)+0x30>
   3c89c:	e1a0000e 	mov	r0, lr
   3c8a0:	e8bd8030 	pop	{r4, r5, pc}
   3c8a4:	e3a0e000 	mov	lr, #0
   3c8a8:	eafffffb 	b	3c89c <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)+0x80>

0003c8ac <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>:
   3c8ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c8b0:	e24dd064 	sub	sp, sp, #100	; 0x64
   3c8b4:	e59da08c 	ldr	sl, [sp, #140]	; 0x8c
   3c8b8:	e59d4088 	ldr	r4, [sp, #136]	; 0x88
   3c8bc:	e35a0031 	cmp	sl, #49	; 0x31
   3c8c0:	e58d100c 	str	r1, [sp, #12]
   3c8c4:	e58d2010 	str	r2, [sp, #16]
   3c8c8:	da000097 	ble	3cb2c <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x280>
   3c8cc:	e1a09003 	mov	r9, r3
   3c8d0:	e5d4300c 	ldrb	r3, [r4, #12]
   3c8d4:	e5d42007 	ldrb	r2, [r4, #7]
   3c8d8:	e35300ff 	cmp	r3, #255	; 0xff
   3c8dc:	03a03001 	moveq	r3, #1
   3c8e0:	05c4300c 	strbeq	r3, [r4, #12]
   3c8e4:	e5d43006 	ldrb	r3, [r4, #6]
   3c8e8:	e1a0b000 	mov	fp, r0
   3c8ec:	e1933402 	orrs	r3, r3, r2, lsl #8
   3c8f0:	1a000031 	bne	3c9bc <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x110>
   3c8f4:	e5d4301f 	ldrb	r3, [r4, #31]
   3c8f8:	e5d4601e 	ldrb	r6, [r4, #30]
   3c8fc:	e59f8244 	ldr	r8, [pc, #580]	; 3cb48 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x29c>
   3c900:	e0866403 	add	r6, r6, r3, lsl #8
   3c904:	e3560018 	cmp	r6, #24
   3c908:	b3a03002 	movlt	r3, #2
   3c90c:	a3a03003 	movge	r3, #3
   3c910:	e2866002 	add	r6, r6, #2
   3c914:	e58d3014 	str	r3, [sp, #20]
   3c918:	ea000007 	b	3c93c <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   3c91c:	e3530004 	cmp	r3, #4
   3c920:	03a07902 	moveq	r7, #32768	; 0x8000
   3c924:	0a00000e 	beq	3c964 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xb8>
   3c928:	e2855003 	add	r5, r5, #3
   3c92c:	e0866005 	add	r6, r6, r5
   3c930:	e286301e 	add	r3, r6, #30
   3c934:	e153000a 	cmp	r3, sl
   3c938:	aa00002f 	bge	3c9fc <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x150>
   3c93c:	e0842006 	add	r2, r4, r6
   3c940:	e5d23020 	ldrb	r3, [r2, #32]
   3c944:	e5d2101f 	ldrb	r1, [r2, #31]
   3c948:	e5d2501e 	ldrb	r5, [r2, #30]
   3c94c:	e3530005 	cmp	r3, #5
   3c950:	e0855401 	add	r5, r5, r1, lsl #8
   3c954:	0a000072 	beq	3cb24 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x278>
   3c958:	e3530008 	cmp	r3, #8
   3c95c:	1affffee 	bne	3c91c <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x70>
   3c960:	e3a07901 	mov	r7, #16384	; 0x4000
   3c964:	e3a03001 	mov	r3, #1
   3c968:	e0841006 	add	r1, r4, r6
   3c96c:	e58d3000 	str	r3, [sp]
   3c970:	e1a02008 	mov	r2, r8
   3c974:	e3a03901 	mov	r3, #16384	; 0x4000
   3c978:	e1a0000b 	mov	r0, fp
   3c97c:	e2811021 	add	r1, r1, #33	; 0x21
   3c980:	ebffffa5 	bl	3c81c <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)>
   3c984:	e3500901 	cmp	r0, #16384	; 0x4000
   3c988:	0a000004 	beq	3c9a0 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xf4>
   3c98c:	e1a03000 	mov	r3, r0
   3c990:	e3a01004 	mov	r1, #4
   3c994:	e59f21b0 	ldr	r2, [pc, #432]	; 3cb4c <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a0>
   3c998:	e59f01b0 	ldr	r0, [pc, #432]	; 3cb50 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   3c99c:	ebffc919 	bl	2ee08 <LogWrite>
   3c9a0:	e1a00007 	mov	r0, r7
   3c9a4:	e1a03009 	mov	r3, r9
   3c9a8:	e3a02901 	mov	r2, #16384	; 0x4000
   3c9ac:	e1a01008 	mov	r1, r8
   3c9b0:	e59dc00c 	ldr	ip, [sp, #12]
   3c9b4:	e12fff3c 	blx	ip
   3c9b8:	eaffffda 	b	3c928 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x7c>
   3c9bc:	e5d4300c 	ldrb	r3, [r4, #12]
   3c9c0:	e59f2180 	ldr	r2, [pc, #384]	; 3cb48 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x29c>
   3c9c4:	e1a032a3 	lsr	r3, r3, #5
   3c9c8:	e2033001 	and	r3, r3, #1
   3c9cc:	e58d3000 	str	r3, [sp]
   3c9d0:	e284101e 	add	r1, r4, #30
   3c9d4:	e3a03903 	mov	r3, #49152	; 0xc000
   3c9d8:	ebffff8f 	bl	3c81c <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)>
   3c9dc:	e1a03009 	mov	r3, r9
   3c9e0:	e3a02903 	mov	r2, #49152	; 0xc000
   3c9e4:	e3a00901 	mov	r0, #16384	; 0x4000
   3c9e8:	e59f1158 	ldr	r1, [pc, #344]	; 3cb48 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x29c>
   3c9ec:	e59dc00c 	ldr	ip, [sp, #12]
   3c9f0:	e12fff3c 	blx	ip
   3c9f4:	e3a03001 	mov	r3, #1
   3c9f8:	e58d3014 	str	r3, [sp, #20]
   3c9fc:	e3a01000 	mov	r1, #0
   3ca00:	e5d43000 	ldrb	r3, [r4]
   3ca04:	e5d42001 	ldrb	r2, [r4, #1]
   3ca08:	e5d40015 	ldrb	r0, [r4, #21]
   3ca0c:	e0822403 	add	r2, r2, r3, lsl #8
   3ca10:	e5d43016 	ldrb	r3, [r4, #22]
   3ca14:	e58d1048 	str	r1, [sp, #72]	; 0x48
   3ca18:	e58d202c 	str	r2, [sp, #44]	; 0x2c
   3ca1c:	e58d105c 	str	r1, [sp, #92]	; 0x5c
   3ca20:	e5d41003 	ldrb	r1, [r4, #3]
   3ca24:	e5d42002 	ldrb	r2, [r4, #2]
   3ca28:	e0833400 	add	r3, r3, r0, lsl #8
   3ca2c:	e58d3044 	str	r3, [sp, #68]	; 0x44
   3ca30:	e5d4300f 	ldrb	r3, [r4, #15]
   3ca34:	e1822401 	orr	r2, r2, r1, lsl #8
   3ca38:	e5d41010 	ldrb	r1, [r4, #16]
   3ca3c:	e58d2028 	str	r2, [sp, #40]	; 0x28
   3ca40:	e5d4200d 	ldrb	r2, [r4, #13]
   3ca44:	e1833401 	orr	r3, r3, r1, lsl #8
   3ca48:	e5d4100e 	ldrb	r1, [r4, #14]
   3ca4c:	e58d3040 	str	r3, [sp, #64]	; 0x40
   3ca50:	e5d43011 	ldrb	r3, [r4, #17]
   3ca54:	e1822401 	orr	r2, r2, r1, lsl #8
   3ca58:	e5d41012 	ldrb	r1, [r4, #18]
   3ca5c:	e58d2024 	str	r2, [sp, #36]	; 0x24
   3ca60:	e5d42004 	ldrb	r2, [r4, #4]
   3ca64:	e1833401 	orr	r3, r3, r1, lsl #8
   3ca68:	e5d41005 	ldrb	r1, [r4, #5]
   3ca6c:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   3ca70:	e5d43013 	ldrb	r3, [r4, #19]
   3ca74:	e1822401 	orr	r2, r2, r1, lsl #8
   3ca78:	e5d41014 	ldrb	r1, [r4, #20]
   3ca7c:	e58d2020 	str	r2, [sp, #32]
   3ca80:	e5d42019 	ldrb	r2, [r4, #25]
   3ca84:	e1833401 	orr	r3, r3, r1, lsl #8
   3ca88:	e5d4101a 	ldrb	r1, [r4, #26]
   3ca8c:	e58d3038 	str	r3, [sp, #56]	; 0x38
   3ca90:	e5d43017 	ldrb	r3, [r4, #23]
   3ca94:	e1822401 	orr	r2, r2, r1, lsl #8
   3ca98:	e5d41018 	ldrb	r1, [r4, #24]
   3ca9c:	e58d2030 	str	r2, [sp, #48]	; 0x30
   3caa0:	e1833401 	orr	r3, r3, r1, lsl #8
   3caa4:	e58d3034 	str	r3, [sp, #52]	; 0x34
   3caa8:	e5d40008 	ldrb	r0, [r4, #8]
   3caac:	e5d43009 	ldrb	r3, [r4, #9]
   3cab0:	e59d2014 	ldr	r2, [sp, #20]
   3cab4:	e5d41006 	ldrb	r1, [r4, #6]
   3cab8:	e3520001 	cmp	r2, #1
   3cabc:	e1800403 	orr	r0, r0, r3, lsl #8
   3cac0:	e5d4200b 	ldrb	r2, [r4, #11]
   3cac4:	e5d43007 	ldrb	r3, [r4, #7]
   3cac8:	e202207f 	and	r2, r2, #127	; 0x7f
   3cacc:	e1811403 	orr	r1, r1, r3, lsl #8
   3cad0:	e5d4301d 	ldrb	r3, [r4, #29]
   3cad4:	e58d2050 	str	r2, [sp, #80]	; 0x50
   3cad8:	e5d4201b 	ldrb	r2, [r4, #27]
   3cadc:	e2033003 	and	r3, r3, #3
   3cae0:	e58d3054 	str	r3, [sp, #84]	; 0x54
   3cae4:	e58d2058 	str	r2, [sp, #88]	; 0x58
   3cae8:	15d43020 	ldrbne	r3, [r4, #32]
   3caec:	15d42021 	ldrbne	r2, [r4, #33]	; 0x21
   3caf0:	e58d1018 	str	r1, [sp, #24]
   3caf4:	e5d4100a 	ldrb	r1, [r4, #10]
   3caf8:	10833402 	addne	r3, r3, r2, lsl #8
   3cafc:	e58d001c 	str	r0, [sp, #28]
   3cb00:	e58d104c 	str	r1, [sp, #76]	; 0x4c
   3cb04:	158d3018 	strne	r3, [sp, #24]
   3cb08:	e28d0018 	add	r0, sp, #24
   3cb0c:	e1a01009 	mov	r1, r9
   3cb10:	e59d3010 	ldr	r3, [sp, #16]
   3cb14:	e12fff33 	blx	r3
   3cb18:	e3a00001 	mov	r0, #1
   3cb1c:	e28dd064 	add	sp, sp, #100	; 0x64
   3cb20:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cb24:	e3a07903 	mov	r7, #49152	; 0xc000
   3cb28:	eaffff8d 	b	3c964 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xb8>
   3cb2c:	e3a01004 	mov	r1, #4
   3cb30:	e59f201c 	ldr	r2, [pc, #28]	; 3cb54 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a8>
   3cb34:	e59f0014 	ldr	r0, [pc, #20]	; 3cb50 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   3cb38:	ebffc8b2 	bl	2ee08 <LogWrite>
   3cb3c:	e3a00000 	mov	r0, #0
   3cb40:	e28dd064 	add	sp, sp, #100	; 0x64
   3cb44:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cb48:	0005faec 	.word	0x0005faec
   3cb4c:	00049790 	.word	0x00049790
   3cb50:	0004977c 	.word	0x0004977c
   3cb54:	0004955c 	.word	0x0004955c

0003cb58 <Display::~Display()>:
   3cb58:	e92d4010 	push	{r4, lr}
   3cb5c:	e1a04000 	mov	r4, r0
   3cb60:	e59f301c 	ldr	r3, [pc, #28]	; 3cb84 <Display::~Display()+0x2c>
   3cb64:	e4803004 	str	r3, [r0], #4
   3cb68:	eb000225 	bl	3d404 <DisplayFX::~DisplayFX()>
   3cb6c:	e59f3014 	ldr	r3, [pc, #20]	; 3cb88 <Display::~Display()+0x30>
   3cb70:	e1a00004 	mov	r0, r4
   3cb74:	e5843000 	str	r3, [r4]
   3cb78:	ebffa0e3 	bl	24f0c <CDevice::~CDevice()>
   3cb7c:	e1a00004 	mov	r0, r4
   3cb80:	e8bd8010 	pop	{r4, pc}
   3cb84:	00049800 	.word	0x00049800
   3cb88:	000497c0 	.word	0x000497c0

0003cb8c <Display::~Display()>:
   3cb8c:	e92d4010 	push	{r4, lr}
   3cb90:	e1a04000 	mov	r4, r0
   3cb94:	e59f3028 	ldr	r3, [pc, #40]	; 3cbc4 <Display::~Display()+0x38>
   3cb98:	e4803004 	str	r3, [r0], #4
   3cb9c:	eb000218 	bl	3d404 <DisplayFX::~DisplayFX()>
   3cba0:	e59f3020 	ldr	r3, [pc, #32]	; 3cbc8 <Display::~Display()+0x3c>
   3cba4:	e1a00004 	mov	r0, r4
   3cba8:	e5843000 	str	r3, [r4]
   3cbac:	ebffa0d6 	bl	24f0c <CDevice::~CDevice()>
   3cbb0:	e1a00004 	mov	r0, r4
   3cbb4:	e59f1010 	ldr	r1, [pc, #16]	; 3cbcc <Display::~Display()+0x40>
   3cbb8:	ebffb910 	bl	2b000 <operator delete(void*, unsigned int)>
   3cbbc:	e1a00004 	mov	r0, r4
   3cbc0:	e8bd8010 	pop	{r4, pc}
   3cbc4:	00049800 	.word	0x00049800
   3cbc8:	000497c0 	.word	0x000497c0
   3cbcc:	00001030 	.word	0x00001030

0003cbd0 <Display::foreground(DISPLAY_FX_COLOUR)>:
   3cbd0:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3cbd4:	e3530000 	cmp	r3, #0
   3cbd8:	012fff1e 	bxeq	lr
   3cbdc:	e1a02001 	mov	r2, r1
   3cbe0:	e2800004 	add	r0, r0, #4
   3cbe4:	e3a01000 	mov	r1, #0
   3cbe8:	ea0002ee 	b	3d7a8 <DisplayFX::windowForeground(unsigned long, DISPLAY_FX_COLOUR)>

0003cbec <Display::background(DISPLAY_FX_COLOUR)>:
   3cbec:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3cbf0:	e3530000 	cmp	r3, #0
   3cbf4:	012fff1e 	bxeq	lr
   3cbf8:	e1a02001 	mov	r2, r1
   3cbfc:	e2800004 	add	r0, r0, #4
   3cc00:	e3a01000 	mov	r1, #0
   3cc04:	ea0002ed 	b	3d7c0 <DisplayFX::windowBackground(unsigned long, DISPLAY_FX_COLOUR)>

0003cc08 <Display::write(unsigned long, unsigned long, unsigned char const*)>:
   3cc08:	e5d0cbe0 	ldrb	ip, [r0, #3040]	; 0xbe0
   3cc0c:	e35c0000 	cmp	ip, #0
   3cc10:	012fff1e 	bxeq	lr
   3cc14:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3cc18:	e24dd00c 	sub	sp, sp, #12
   3cc1c:	e58d3000 	str	r3, [sp]
   3cc20:	e2800004 	add	r0, r0, #4
   3cc24:	e1a03002 	mov	r3, r2
   3cc28:	e1a02001 	mov	r2, r1
   3cc2c:	e3a01000 	mov	r1, #0
   3cc30:	eb0002b9 	bl	3d71c <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)>
   3cc34:	e28dd00c 	add	sp, sp, #12
   3cc38:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003cc3c <Display::write(unsigned long, unsigned long, unsigned long)>:
   3cc3c:	e5d0cbe0 	ldrb	ip, [r0, #3040]	; 0xbe0
   3cc40:	e35c0000 	cmp	ip, #0
   3cc44:	012fff1e 	bxeq	lr
   3cc48:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3cc4c:	e24dd00c 	sub	sp, sp, #12
   3cc50:	e58d3000 	str	r3, [sp]
   3cc54:	e2800004 	add	r0, r0, #4
   3cc58:	e1a03002 	mov	r3, r2
   3cc5c:	e1a02001 	mov	r2, r1
   3cc60:	e3a01000 	mov	r1, #0
   3cc64:	eb00022e 	bl	3d524 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)>
   3cc68:	e28dd00c 	add	sp, sp, #12
   3cc6c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003cc70 <Display::setPixel(unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)>:
   3cc70:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3cc74:	e5d0cbe0 	ldrb	ip, [r0, #3040]	; 0xbe0
   3cc78:	e24dd00c 	sub	sp, sp, #12
   3cc7c:	e35c0000 	cmp	ip, #0
   3cc80:	e1ddc1d0 	ldrsb	ip, [sp, #16]
   3cc84:	0a000005 	beq	3cca0 <Display::setPixel(unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)+0x30>
   3cc88:	e88d1008 	stm	sp, {r3, ip}
   3cc8c:	e2800004 	add	r0, r0, #4
   3cc90:	e1a03002 	mov	r3, r2
   3cc94:	e1a02001 	mov	r2, r1
   3cc98:	e3a01000 	mov	r1, #0
   3cc9c:	eb0002cd 	bl	3d7d8 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)>
   3cca0:	e28dd00c 	add	sp, sp, #12
   3cca4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003cca8 <Display::getFrameBufferInfo(FrameBufferInfo&)>:
   3cca8:	e1a02001 	mov	r2, r1
   3ccac:	e2800004 	add	r0, r0, #4
   3ccb0:	e3a01000 	mov	r1, #0
   3ccb4:	ea000319 	b	3d920 <DisplayFX::getFramebuffer(unsigned long, FrameBufferInfo&)>

0003ccb8 <Display::Write(void const*, unsigned int)>:
   3ccb8:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3ccbc:	e92d4010 	push	{r4, lr}
   3ccc0:	e3530000 	cmp	r3, #0
   3ccc4:	e1a04002 	mov	r4, r2
   3ccc8:	0a000001 	beq	3ccd4 <Display::Write(void const*, unsigned int)+0x1c>
   3cccc:	e2800004 	add	r0, r0, #4
   3ccd0:	eb00041f 	bl	3dd54 <DisplayFX::consolePut(char const*, unsigned int)>
   3ccd4:	e1a00004 	mov	r0, r4
   3ccd8:	e8bd8010 	pop	{r4, pc}

0003ccdc <Display::targetLayout(int, int, int, int, int, int, WgfxFont*, int, int)>:
   3ccdc:	e5d0cbe0 	ldrb	ip, [r0, #3040]	; 0xbe0
   3cce0:	e35c0000 	cmp	ip, #0
   3cce4:	012fff1e 	bxeq	lr
   3cce8:	e92d4070 	push	{r4, r5, r6, lr}
   3ccec:	e1a04002 	mov	r4, r2
   3ccf0:	e1a05003 	mov	r5, r3
   3ccf4:	e3a02000 	mov	r2, #0
   3ccf8:	e3a03fe1 	mov	r3, #900	; 0x384
   3ccfc:	e24dd038 	sub	sp, sp, #56	; 0x38
   3cd00:	e1a06001 	mov	r6, r1
   3cd04:	e2800004 	add	r0, r0, #4
   3cd08:	e1a01002 	mov	r1, r2
   3cd0c:	e58d3000 	str	r3, [sp]
   3cd10:	e3a03e41 	mov	r3, #1040	; 0x410
   3cd14:	e58d0034 	str	r0, [sp, #52]	; 0x34
   3cd18:	eb0001e9 	bl	3d4c4 <DisplayFX::screenRectClear(unsigned long, unsigned long, unsigned long, unsigned long)>
   3cd1c:	e3a03000 	mov	r3, #0
   3cd20:	e3a02008 	mov	r2, #8
   3cd24:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
   3cd28:	e58d2028 	str	r2, [sp, #40]	; 0x28
   3cd2c:	e58d1020 	str	r1, [sp, #32]
   3cd30:	e59d1058 	ldr	r1, [sp, #88]	; 0x58
   3cd34:	e58d2024 	str	r2, [sp, #36]	; 0x24
   3cd38:	e58d101c 	str	r1, [sp, #28]
   3cd3c:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   3cd40:	e1a02003 	mov	r2, r3
   3cd44:	e58d1018 	str	r1, [sp, #24]
   3cd48:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
   3cd4c:	e1cd40f4 	strd	r4, [sp, #4]
   3cd50:	e58d1014 	str	r1, [sp, #20]
   3cd54:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   3cd58:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
   3cd5c:	e58d1010 	str	r1, [sp, #16]
   3cd60:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
   3cd64:	e58d6000 	str	r6, [sp]
   3cd68:	e58d100c 	str	r1, [sp, #12]
   3cd6c:	e1a01003 	mov	r1, r3
   3cd70:	eb00064a 	bl	3e6a0 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3cd74:	e28dd038 	add	sp, sp, #56	; 0x38
   3cd78:	e8bd8070 	pop	{r4, r5, r6, pc}

0003cd7c <Display::Display()>:
   3cd7c:	e92d4010 	push	{r4, lr}
   3cd80:	e1a04000 	mov	r4, r0
   3cd84:	ebffa06e 	bl	24f44 <CDevice::CDevice()>
   3cd88:	e1a00004 	mov	r0, r4
   3cd8c:	e59f3014 	ldr	r3, [pc, #20]	; 3cda8 <Display::Display()+0x2c>
   3cd90:	e4803004 	str	r3, [r0], #4
   3cd94:	eb00016c 	bl	3d34c <DisplayFX::DisplayFX()>
   3cd98:	e3a03000 	mov	r3, #0
   3cd9c:	e1a00004 	mov	r0, r4
   3cda0:	e5c43be0 	strb	r3, [r4, #3040]	; 0xbe0
   3cda4:	e8bd8010 	pop	{r4, pc}
   3cda8:	00049800 	.word	0x00049800

0003cdac <Display::init()>:
   3cdac:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3cdb0:	e2809004 	add	r9, r0, #4
   3cdb4:	e24dd034 	sub	sp, sp, #52	; 0x34
   3cdb8:	e1a07000 	mov	r7, r0
   3cdbc:	e3a02fe1 	mov	r2, #900	; 0x384
   3cdc0:	e3a01d19 	mov	r1, #1600	; 0x640
   3cdc4:	e1a00009 	mov	r0, r9
   3cdc8:	eb000637 	bl	3e6ac <DisplayFX::init(unsigned long, unsigned long)>
   3cdcc:	e3e05000 	mvn	r5, #0
   3cdd0:	e3a04000 	mov	r4, #0
   3cdd4:	e3a06001 	mov	r6, #1
   3cdd8:	e3a08008 	mov	r8, #8
   3cddc:	e3a0cb01 	mov	ip, #1024	; 0x400
   3cde0:	e3a0efdd 	mov	lr, #884	; 0x374
   3cde4:	e1a00009 	mov	r0, r9
   3cde8:	e88d5000 	stm	sp, {ip, lr}
   3cdec:	e1a03004 	mov	r3, r4
   3cdf0:	e1a02004 	mov	r2, r4
   3cdf4:	e1a01004 	mov	r1, r4
   3cdf8:	e1cd41f8 	strd	r4, [sp, #24]
   3cdfc:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3ce00:	e58d8024 	str	r8, [sp, #36]	; 0x24
   3ce04:	e58d800c 	str	r8, [sp, #12]
   3ce08:	e58d8008 	str	r8, [sp, #8]
   3ce0c:	e58d5020 	str	r5, [sp, #32]
   3ce10:	e58d6014 	str	r6, [sp, #20]
   3ce14:	e58d6010 	str	r6, [sp, #16]
   3ce18:	eb000620 	bl	3e6a0 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3ce1c:	e1a00009 	mov	r0, r9
   3ce20:	e1a03004 	mov	r3, r4
   3ce24:	e1a01006 	mov	r1, r6
   3ce28:	e59f20a8 	ldr	r2, [pc, #168]	; 3ced8 <Display::init()+0x12c>
   3ce2c:	e1cd41f8 	strd	r4, [sp, #24]
   3ce30:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3ce34:	e58d4024 	str	r4, [sp, #36]	; 0x24
   3ce38:	e58d5020 	str	r5, [sp, #32]
   3ce3c:	e58d6014 	str	r6, [sp, #20]
   3ce40:	e58d6010 	str	r6, [sp, #16]
   3ce44:	e58d500c 	str	r5, [sp, #12]
   3ce48:	e58d5008 	str	r5, [sp, #8]
   3ce4c:	e58d5004 	str	r5, [sp, #4]
   3ce50:	e58d5000 	str	r5, [sp]
   3ce54:	eb000611 	bl	3e6a0 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3ce58:	e59f307c 	ldr	r3, [pc, #124]	; 3cedc <Display::init()+0x130>
   3ce5c:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3ce60:	e5933004 	ldr	r3, [r3, #4]
   3ce64:	e59f206c 	ldr	r2, [pc, #108]	; 3ced8 <Display::init()+0x12c>
   3ce68:	e1a03183 	lsl	r3, r3, #3
   3ce6c:	e1a00009 	mov	r0, r9
   3ce70:	e3a01002 	mov	r1, #2
   3ce74:	e1cd41f8 	strd	r4, [sp, #24]
   3ce78:	e58d4024 	str	r4, [sp, #36]	; 0x24
   3ce7c:	e58d5020 	str	r5, [sp, #32]
   3ce80:	e58d6014 	str	r6, [sp, #20]
   3ce84:	e58d6010 	str	r6, [sp, #16]
   3ce88:	e58d500c 	str	r5, [sp, #12]
   3ce8c:	e58d5008 	str	r5, [sp, #8]
   3ce90:	e58d5004 	str	r5, [sp, #4]
   3ce94:	e58d5000 	str	r5, [sp]
   3ce98:	eb000600 	bl	3e6a0 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3ce9c:	e1a00009 	mov	r0, r9
   3cea0:	e3a01002 	mov	r1, #2
   3cea4:	eb00030e 	bl	3dae4 <DisplayFX::consoleSetWindow(unsigned long)>
   3cea8:	e1a03004 	mov	r3, r4
   3ceac:	e1a0c007 	mov	ip, r7
   3ceb0:	e2872d11 	add	r2, r7, #1088	; 0x440
   3ceb4:	e282200c 	add	r2, r2, #12
   3ceb8:	e5cc3be1 	strb	r3, [ip, #3041]	; 0xbe1
   3cebc:	e28cc064 	add	ip, ip, #100	; 0x64
   3cec0:	e15c0002 	cmp	ip, r2
   3cec4:	1afffffb 	bne	3ceb8 <Display::init()+0x10c>
   3cec8:	e3a00001 	mov	r0, #1
   3cecc:	e5c70be0 	strb	r0, [r7, #3040]	; 0xbe0
   3ced0:	e28dd034 	add	sp, sp, #52	; 0x34
   3ced4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3ced8:	0000041a 	.word	0x0000041a
   3cedc:	0004d9fc 	.word	0x0004d9fc

0003cee0 <Display::statusPut(int, int, char const*)>:
   3cee0:	e351000a 	cmp	r1, #10
   3cee4:	c12fff1e 	bxgt	lr
   3cee8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3ceec:	e0814101 	add	r4, r1, r1, lsl #2
   3cef0:	e0844104 	add	r4, r4, r4, lsl #2
   3cef4:	e0804104 	add	r4, r0, r4, lsl #2
   3cef8:	e2844ebe 	add	r4, r4, #3040	; 0xbe0
   3cefc:	e2844001 	add	r4, r4, #1
   3cf00:	e1a05001 	mov	r5, r1
   3cf04:	e1a06000 	mov	r6, r0
   3cf08:	e1a01003 	mov	r1, r3
   3cf0c:	e1a00004 	mov	r0, r4
   3cf10:	e24dd010 	sub	sp, sp, #16
   3cf14:	e1a07002 	mov	r7, r2
   3cf18:	e1a08003 	mov	r8, r3
   3cf1c:	ebffb452 	bl	2a06c <strcmp>
   3cf20:	e3500000 	cmp	r0, #0
   3cf24:	0a00000c 	beq	3cf5c <Display::statusPut(int, int, char const*)+0x7c>
   3cf28:	e3a02063 	mov	r2, #99	; 0x63
   3cf2c:	e1a00004 	mov	r0, r4
   3cf30:	e1a01008 	mov	r1, r8
   3cf34:	ebffb4f1 	bl	2a300 <strncpy>
   3cf38:	e3570001 	cmp	r7, #1
   3cf3c:	03a02009 	moveq	r2, #9
   3cf40:	0a000002 	beq	3cf50 <Display::statusPut(int, int, char const*)+0x70>
   3cf44:	e3570000 	cmp	r7, #0
   3cf48:	03a0200b 	moveq	r2, #11
   3cf4c:	13a0200a 	movne	r2, #10
   3cf50:	e5d63be0 	ldrb	r3, [r6, #3040]	; 0xbe0
   3cf54:	e3530000 	cmp	r3, #0
   3cf58:	1a000001 	bne	3cf64 <Display::statusPut(int, int, char const*)+0x84>
   3cf5c:	e28dd010 	add	sp, sp, #16
   3cf60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3cf64:	e59f1068 	ldr	r1, [pc, #104]	; 3cfd4 <Display::statusPut(int, int, char const*)+0xf4>
   3cf68:	e2860004 	add	r0, r6, #4
   3cf6c:	e0815185 	add	r5, r1, r5, lsl #3
   3cf70:	e5953044 	ldr	r3, [r5, #68]	; 0x44
   3cf74:	e3a01001 	mov	r1, #1
   3cf78:	e5954040 	ldr	r4, [r5, #64]	; 0x40
   3cf7c:	e58d000c 	str	r0, [sp, #12]
   3cf80:	e58d3008 	str	r3, [sp, #8]
   3cf84:	eb000207 	bl	3d7a8 <DisplayFX::windowForeground(unsigned long, DISPLAY_FX_COLOUR)>
   3cf88:	e5d62be0 	ldrb	r2, [r6, #3040]	; 0xbe0
   3cf8c:	e3520000 	cmp	r2, #0
   3cf90:	0afffff1 	beq	3cf5c <Display::statusPut(int, int, char const*)+0x7c>
   3cf94:	e59d000c 	ldr	r0, [sp, #12]
   3cf98:	e59d3008 	ldr	r3, [sp, #8]
   3cf9c:	e1a02004 	mov	r2, r4
   3cfa0:	e3a01001 	mov	r1, #1
   3cfa4:	e58d8000 	str	r8, [sp]
   3cfa8:	e58d0008 	str	r0, [sp, #8]
   3cfac:	eb0001da 	bl	3d71c <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)>
   3cfb0:	e5d63be0 	ldrb	r3, [r6, #3040]	; 0xbe0
   3cfb4:	e3530000 	cmp	r3, #0
   3cfb8:	0affffe7 	beq	3cf5c <Display::statusPut(int, int, char const*)+0x7c>
   3cfbc:	e3a0200f 	mov	r2, #15
   3cfc0:	e3a01001 	mov	r1, #1
   3cfc4:	e59d0008 	ldr	r0, [sp, #8]
   3cfc8:	e28dd010 	add	sp, sp, #16
   3cfcc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3cfd0:	ea0001f4 	b	3d7a8 <DisplayFX::windowForeground(unsigned long, DISPLAY_FX_COLOUR)>
   3cfd4:	000497f8 	.word	0x000497f8

0003cfd8 <Display::windowForeground(unsigned long, DISPLAY_FX_COLOUR)>:
   3cfd8:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3cfdc:	e3530000 	cmp	r3, #0
   3cfe0:	012fff1e 	bxeq	lr
   3cfe4:	e2800004 	add	r0, r0, #4
   3cfe8:	ea0001ee 	b	3d7a8 <DisplayFX::windowForeground(unsigned long, DISPLAY_FX_COLOUR)>

0003cfec <Display::windowBackground(unsigned long, DISPLAY_FX_COLOUR)>:
   3cfec:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3cff0:	e3530000 	cmp	r3, #0
   3cff4:	012fff1e 	bxeq	lr
   3cff8:	e2800004 	add	r0, r0, #4
   3cffc:	ea0001ef 	b	3d7c0 <DisplayFX::windowBackground(unsigned long, DISPLAY_FX_COLOUR)>

0003d000 <Display::windowWrite(unsigned long, unsigned long, unsigned long, unsigned char const*)>:
   3d000:	e5d0cbe0 	ldrb	ip, [r0, #3040]	; 0xbe0
   3d004:	e35c0000 	cmp	ip, #0
   3d008:	012fff1e 	bxeq	lr
   3d00c:	e2800004 	add	r0, r0, #4
   3d010:	ea0001c1 	b	3d71c <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)>

0003d014 <Display::windowWrite(unsigned long, unsigned long, unsigned long, unsigned long)>:
   3d014:	e5d0cbe0 	ldrb	ip, [r0, #3040]	; 0xbe0
   3d018:	e35c0000 	cmp	ip, #0
   3d01c:	012fff1e 	bxeq	lr
   3d020:	e2800004 	add	r0, r0, #4
   3d024:	ea00013e 	b	3d524 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)>

0003d028 <Display::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)>:
   3d028:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3d02c:	e5d0cbe0 	ldrb	ip, [r0, #3040]	; 0xbe0
   3d030:	e1dde0d8 	ldrsb	lr, [sp, #8]
   3d034:	e35c0000 	cmp	ip, #0
   3d038:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   3d03c:	e58de008 	str	lr, [sp, #8]
   3d040:	e2800004 	add	r0, r0, #4
   3d044:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3d048:	ea0001e2 	b	3d7d8 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)>

0003d04c <Display::consolePut(char const*)>:
   3d04c:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3d050:	e3530000 	cmp	r3, #0
   3d054:	012fff1e 	bxeq	lr
   3d058:	e2800004 	add	r0, r0, #4
   3d05c:	ea000330 	b	3dd24 <DisplayFX::consolePut(char const*)>

0003d060 <Display::consolePut(unsigned long)>:
   3d060:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3d064:	e3530000 	cmp	r3, #0
   3d068:	012fff1e 	bxeq	lr
   3d06c:	e2800004 	add	r0, r0, #4
   3d070:	ea0002cd 	b	3dbac <DisplayFX::consolePut(int)>

0003d074 <Display::consolePut(char const*, unsigned int)>:
   3d074:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3d078:	e3530000 	cmp	r3, #0
   3d07c:	012fff1e 	bxeq	lr
   3d080:	e2800004 	add	r0, r0, #4
   3d084:	ea000332 	b	3dd54 <DisplayFX::consolePut(char const*, unsigned int)>

0003d088 <Display::consoleForeground(DISPLAY_FX_COLOUR)>:
   3d088:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3d08c:	e3530000 	cmp	r3, #0
   3d090:	012fff1e 	bxeq	lr
   3d094:	e2800004 	add	r0, r0, #4
   3d098:	ea00027e 	b	3da98 <DisplayFX::consoleForeground(DISPLAY_FX_COLOUR)>

0003d09c <Display::consoleGetWidth()>:
   3d09c:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3d0a0:	e3530000 	cmp	r3, #0
   3d0a4:	1a000001 	bne	3d0b0 <Display::consoleGetWidth()+0x14>
   3d0a8:	e1a00003 	mov	r0, r3
   3d0ac:	e12fff1e 	bx	lr
   3d0b0:	e2800004 	add	r0, r0, #4
   3d0b4:	ea00027d 	b	3dab0 <DisplayFX::consoleGetWidth()>

0003d0b8 <Display::logDebug(char const*, char const*, char const*)>:
   3d0b8:	e92d4070 	push	{r4, r5, r6, lr}
   3d0bc:	e1a04000 	mov	r4, r0
   3d0c0:	e5d00be0 	ldrb	r0, [r0, #3040]	; 0xbe0
   3d0c4:	e24dd008 	sub	sp, sp, #8
   3d0c8:	e3500000 	cmp	r0, #0
   3d0cc:	1a000001 	bne	3d0d8 <Display::logDebug(char const*, char const*, char const*)+0x20>
   3d0d0:	e28dd008 	add	sp, sp, #8
   3d0d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   3d0d8:	e2840004 	add	r0, r4, #4
   3d0dc:	e1a05003 	mov	r5, r3
   3d0e0:	e1a06002 	mov	r6, r2
   3d0e4:	e58d0004 	str	r0, [sp, #4]
   3d0e8:	eb00030d 	bl	3dd24 <DisplayFX::consolePut(char const*)>
   3d0ec:	e5d43be0 	ldrb	r3, [r4, #3040]	; 0xbe0
   3d0f0:	e3530000 	cmp	r3, #0
   3d0f4:	0afffff5 	beq	3d0d0 <Display::logDebug(char const*, char const*, char const*)+0x18>
   3d0f8:	e59f106c 	ldr	r1, [pc, #108]	; 3d16c <Display::logDebug(char const*, char const*, char const*)+0xb4>
   3d0fc:	e59d0004 	ldr	r0, [sp, #4]
   3d100:	eb000307 	bl	3dd24 <DisplayFX::consolePut(char const*)>
   3d104:	e5d43be0 	ldrb	r3, [r4, #3040]	; 0xbe0
   3d108:	e3530000 	cmp	r3, #0
   3d10c:	0affffef 	beq	3d0d0 <Display::logDebug(char const*, char const*, char const*)+0x18>
   3d110:	e1a01006 	mov	r1, r6
   3d114:	e59d0004 	ldr	r0, [sp, #4]
   3d118:	eb000301 	bl	3dd24 <DisplayFX::consolePut(char const*)>
   3d11c:	e5d43be0 	ldrb	r3, [r4, #3040]	; 0xbe0
   3d120:	e3530000 	cmp	r3, #0
   3d124:	0affffe9 	beq	3d0d0 <Display::logDebug(char const*, char const*, char const*)+0x18>
   3d128:	e59f1040 	ldr	r1, [pc, #64]	; 3d170 <Display::logDebug(char const*, char const*, char const*)+0xb8>
   3d12c:	e59d0004 	ldr	r0, [sp, #4]
   3d130:	eb0002fb 	bl	3dd24 <DisplayFX::consolePut(char const*)>
   3d134:	e5d43be0 	ldrb	r3, [r4, #3040]	; 0xbe0
   3d138:	e3530000 	cmp	r3, #0
   3d13c:	0affffe3 	beq	3d0d0 <Display::logDebug(char const*, char const*, char const*)+0x18>
   3d140:	e1a01005 	mov	r1, r5
   3d144:	e59d0004 	ldr	r0, [sp, #4]
   3d148:	eb0002f5 	bl	3dd24 <DisplayFX::consolePut(char const*)>
   3d14c:	e5d43be0 	ldrb	r3, [r4, #3040]	; 0xbe0
   3d150:	e3530000 	cmp	r3, #0
   3d154:	0affffdd 	beq	3d0d0 <Display::logDebug(char const*, char const*, char const*)+0x18>
   3d158:	e59d0004 	ldr	r0, [sp, #4]
   3d15c:	e59f1010 	ldr	r1, [pc, #16]	; 3d174 <Display::logDebug(char const*, char const*, char const*)+0xbc>
   3d160:	e28dd008 	add	sp, sp, #8
   3d164:	e8bd4070 	pop	{r4, r5, r6, lr}
   3d168:	ea0002ed 	b	3dd24 <DisplayFX::consolePut(char const*)>
   3d16c:	000497b0 	.word	0x000497b0
   3d170:	000497b4 	.word	0x000497b4
   3d174:	000491cc 	.word	0x000491cc

0003d178 <DisplayBase::debug()>:
   3d178:	e12fff1e 	bx	lr

0003d17c <DisplayBase::write(unsigned long, unsigned long, unsigned char const*)>:
   3d17c:	e12fff1e 	bx	lr

0003d180 <DisplayBase::setPixel(unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)>:
   3d180:	e12fff1e 	bx	lr

0003d184 <DisplayBase::~DisplayBase()>:
   3d184:	e92d4010 	push	{r4, lr}
   3d188:	e1a04000 	mov	r4, r0
   3d18c:	e59f300c 	ldr	r3, [pc, #12]	; 3d1a0 <DisplayBase::~DisplayBase()+0x1c>
   3d190:	e5803000 	str	r3, [r0]
   3d194:	ebff9f5c 	bl	24f0c <CDevice::~CDevice()>
   3d198:	e1a00004 	mov	r0, r4
   3d19c:	e8bd8010 	pop	{r4, pc}
   3d1a0:	000497c0 	.word	0x000497c0

0003d1a4 <DisplayBase::~DisplayBase()>:
   3d1a4:	e92d4010 	push	{r4, lr}
   3d1a8:	e1a04000 	mov	r4, r0
   3d1ac:	e59f3018 	ldr	r3, [pc, #24]	; 3d1cc <DisplayBase::~DisplayBase()+0x28>
   3d1b0:	e5803000 	str	r3, [r0]
   3d1b4:	ebff9f54 	bl	24f0c <CDevice::~CDevice()>
   3d1b8:	e1a00004 	mov	r0, r4
   3d1bc:	e3a01004 	mov	r1, #4
   3d1c0:	ebffb78e 	bl	2b000 <operator delete(void*, unsigned int)>
   3d1c4:	e1a00004 	mov	r0, r4
   3d1c8:	e8bd8010 	pop	{r4, pc}
   3d1cc:	000497c0 	.word	0x000497c0

0003d1d0 <Display::debug()>:
   3d1d0:	e5903bd8 	ldr	r3, [r0, #3032]	; 0xbd8
   3d1d4:	e2800004 	add	r0, r0, #4
   3d1d8:	e0833103 	add	r3, r3, r3, lsl #2
   3d1dc:	e0633203 	rsb	r3, r3, r3, lsl #4
   3d1e0:	e0800183 	add	r0, r0, r3, lsl #3
   3d1e4:	ea000594 	b	3e83c <DisplayWindow::debug()>

0003d1e8 <DisplayFX::windowScroll(unsigned long, long) [clone .part.0]>:
   3d1e8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d1ec:	e3520000 	cmp	r2, #0
   3d1f0:	e0224fc2 	eor	r4, r2, r2, asr #31
   3d1f4:	e1a07000 	mov	r7, r0
   3d1f8:	e1a06001 	mov	r6, r1
   3d1fc:	e0444fc2 	sub	r4, r4, r2, asr #31
   3d200:	da00002b 	ble	3d2b4 <DisplayFX::windowScroll(unsigned long, long) [clone .part.0]+0xcc>
   3d204:	e0816101 	add	r6, r1, r1, lsl #2
   3d208:	e0666206 	rsb	r6, r6, r6, lsl #4
   3d20c:	e0806186 	add	r6, r0, r6, lsl #3
   3d210:	e596301c 	ldr	r3, [r6, #28]
   3d214:	e5968024 	ldr	r8, [r6, #36]	; 0x24
   3d218:	e5965010 	ldr	r5, [r6, #16]
   3d21c:	e0090398 	mul	r9, r8, r3
   3d220:	e0245499 	mla	r4, r9, r4, r5
   3d224:	e5963008 	ldr	r3, [r6, #8]
   3d228:	e5902bc4 	ldr	r2, [r0, #3012]	; 0xbc4
   3d22c:	e596a018 	ldr	sl, [r6, #24]
   3d230:	e0243492 	mla	r4, r2, r4, r3
   3d234:	e0253592 	mla	r5, r2, r5, r3
   3d238:	e5903bcc 	ldr	r3, [r0, #3020]	; 0xbcc
   3d23c:	e35a0000 	cmp	sl, #0
   3d240:	e5968020 	ldr	r8, [r6, #32]
   3d244:	e596000c 	ldr	r0, [r6, #12]
   3d248:	e0834004 	add	r4, r3, r4
   3d24c:	e0835005 	add	r5, r3, r5
   3d250:	0a000003 	beq	3d264 <DisplayFX::windowScroll(unsigned long, long) [clone .part.0]+0x7c>
   3d254:	e1a0100a 	mov	r1, sl
   3d258:	eb0005c0 	bl	3e960 <__udivsi3>
   3d25c:	e00a0a98 	mul	sl, r8, sl
   3d260:	e00a009a 	mul	sl, sl, r0
   3d264:	e596101c 	ldr	r1, [r6, #28]
   3d268:	e5960014 	ldr	r0, [r6, #20]
   3d26c:	e3510000 	cmp	r1, #0
   3d270:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d274:	eb0005b9 	bl	3e960 <__udivsi3>
   3d278:	e0090099 	mul	r9, r9, r0
   3d27c:	e3590000 	cmp	r9, #0
   3d280:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d284:	e3a06000 	mov	r6, #0
   3d288:	e1a01004 	mov	r1, r4
   3d28c:	e1a00005 	mov	r0, r5
   3d290:	e1a0200a 	mov	r2, sl
   3d294:	ebffb565 	bl	2a830 <memcpy>
   3d298:	e2866001 	add	r6, r6, #1
   3d29c:	e5973bc4 	ldr	r3, [r7, #3012]	; 0xbc4
   3d2a0:	e1590006 	cmp	r9, r6
   3d2a4:	e0855003 	add	r5, r5, r3
   3d2a8:	e0844003 	add	r4, r4, r3
   3d2ac:	1afffff5 	bne	3d288 <DisplayFX::windowScroll(unsigned long, long) [clone .part.0]+0xa0>
   3d2b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d2b4:	e0813101 	add	r3, r1, r1, lsl #2
   3d2b8:	e0633203 	rsb	r3, r3, r3, lsl #4
   3d2bc:	e0803183 	add	r3, r0, r3, lsl #3
   3d2c0:	e593101c 	ldr	r1, [r3, #28]
   3d2c4:	e5930014 	ldr	r0, [r3, #20]
   3d2c8:	e3510000 	cmp	r1, #0
   3d2cc:	e1a05106 	lsl	r5, r6, #2
   3d2d0:	0a000001 	beq	3d2dc <DisplayFX::windowScroll(unsigned long, long) [clone .part.0]+0xf4>
   3d2d4:	eb0005a1 	bl	3e960 <__udivsi3>
   3d2d8:	e1a01000 	mov	r1, r0
   3d2dc:	e0856006 	add	r6, r5, r6
   3d2e0:	e0666206 	rsb	r6, r6, r6, lsl #4
   3d2e4:	e0876186 	add	r6, r7, r6, lsl #3
   3d2e8:	e596301c 	ldr	r3, [r6, #28]
   3d2ec:	e5960024 	ldr	r0, [r6, #36]	; 0x24
   3d2f0:	e5965010 	ldr	r5, [r6, #16]
   3d2f4:	e0000390 	mul	r0, r0, r3
   3d2f8:	e0413004 	sub	r3, r1, r4
   3d2fc:	e0235390 	mla	r3, r0, r3, r5
   3d300:	e5962008 	ldr	r2, [r6, #8]
   3d304:	e597ebc4 	ldr	lr, [r7, #3012]	; 0xbc4
   3d308:	e2424001 	sub	r4, r2, #1
   3d30c:	e02c259e 	mla	ip, lr, r5, r2
   3d310:	e023439e 	mla	r3, lr, r3, r4
   3d314:	e0215190 	mla	r1, r0, r1, r5
   3d318:	e5972bcc 	ldr	r2, [r7, #3020]	; 0xbcc
   3d31c:	e021419e 	mla	r1, lr, r1, r4
   3d320:	e0823003 	add	r3, r2, r3
   3d324:	e082000c 	add	r0, r2, ip
   3d328:	e1530000 	cmp	r3, r0
   3d32c:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d330:	e2811001 	add	r1, r1, #1
   3d334:	e0822001 	add	r2, r2, r1
   3d338:	e4531001 	ldrb	r1, [r3], #-1
   3d33c:	e1500003 	cmp	r0, r3
   3d340:	e5621001 	strb	r1, [r2, #-1]!
   3d344:	1afffffb 	bne	3d338 <DisplayFX::windowScroll(unsigned long, long) [clone .part.0]+0x150>
   3d348:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003d34c <DisplayFX::DisplayFX()>:
   3d34c:	e92d4010 	push	{r4, lr}
   3d350:	e3a02000 	mov	r2, #0
   3d354:	e1a03000 	mov	r3, r0
   3d358:	e3a01001 	mov	r1, #1
   3d35c:	e3a0400f 	mov	r4, #15
   3d360:	e280cebb 	add	ip, r0, #2992	; 0xbb0
   3d364:	e59fe094 	ldr	lr, [pc, #148]	; 3d400 <DisplayFX::DisplayFX()+0xb4>
   3d368:	e28cc008 	add	ip, ip, #8
   3d36c:	e583e000 	str	lr, [r3]
   3d370:	e5c32004 	strb	r2, [r3, #4]
   3d374:	e5832010 	str	r2, [r3, #16]
   3d378:	e5832008 	str	r2, [r3, #8]
   3d37c:	e5832014 	str	r2, [r3, #20]
   3d380:	e583200c 	str	r2, [r3, #12]
   3d384:	e583201c 	str	r2, [r3, #28]
   3d388:	e5832018 	str	r2, [r3, #24]
   3d38c:	e5831024 	str	r1, [r3, #36]	; 0x24
   3d390:	e5831020 	str	r1, [r3, #32]
   3d394:	e5832028 	str	r2, [r3, #40]	; 0x28
   3d398:	e583402c 	str	r4, [r3, #44]	; 0x2c
   3d39c:	e5832030 	str	r2, [r3, #48]	; 0x30
   3d3a0:	e583204c 	str	r2, [r3, #76]	; 0x4c
   3d3a4:	e5832050 	str	r2, [r3, #80]	; 0x50
   3d3a8:	e5c32054 	strb	r2, [r3, #84]	; 0x54
   3d3ac:	e5832048 	str	r2, [r3, #72]	; 0x48
   3d3b0:	e5831034 	str	r1, [r3, #52]	; 0x34
   3d3b4:	e5831038 	str	r1, [r3, #56]	; 0x38
   3d3b8:	e583203c 	str	r2, [r3, #60]	; 0x3c
   3d3bc:	e5832040 	str	r2, [r3, #64]	; 0x40
   3d3c0:	e5832044 	str	r2, [r3, #68]	; 0x44
   3d3c4:	e2833f96 	add	r3, r3, #600	; 0x258
   3d3c8:	e153000c 	cmp	r3, ip
   3d3cc:	1affffe6 	bne	3d36c <DisplayFX::DisplayFX()+0x20>
   3d3d0:	e3a01c0f 	mov	r1, #3840	; 0xf00
   3d3d4:	e2803ebd 	add	r3, r0, #3024	; 0xbd0
   3d3d8:	e5802bd4 	str	r2, [r0, #3028]	; 0xbd4
   3d3dc:	e5802bb8 	str	r2, [r0, #3000]	; 0xbb8
   3d3e0:	e5802bbc 	str	r2, [r0, #3004]	; 0xbbc
   3d3e4:	e5802bc0 	str	r2, [r0, #3008]	; 0xbc0
   3d3e8:	e5802bc4 	str	r2, [r0, #3012]	; 0xbc4
   3d3ec:	e5802bc8 	str	r2, [r0, #3016]	; 0xbc8
   3d3f0:	e5802bcc 	str	r2, [r0, #3020]	; 0xbcc
   3d3f4:	e1c310b0 	strh	r1, [r3]
   3d3f8:	e5802bd8 	str	r2, [r0, #3032]	; 0xbd8
   3d3fc:	e8bd8010 	pop	{r4, pc}
   3d400:	000498fc 	.word	0x000498fc

0003d404 <DisplayFX::~DisplayFX()>:
   3d404:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3d408:	e5904bb8 	ldr	r4, [r0, #3000]	; 0xbb8
   3d40c:	e1a05000 	mov	r5, r0
   3d410:	e3540000 	cmp	r4, #0
   3d414:	0a000004 	beq	3d42c <DisplayFX::~DisplayFX()+0x28>
   3d418:	e1a00004 	mov	r0, r4
   3d41c:	eb000774 	bl	3f1f4 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   3d420:	e1a00004 	mov	r0, r4
   3d424:	e3a01094 	mov	r1, #148	; 0x94
   3d428:	ebffb6f4 	bl	2b000 <operator delete(void*, unsigned int)>
   3d42c:	e2853ebb 	add	r3, r5, #2992	; 0xbb0
   3d430:	e59f605c 	ldr	r6, [pc, #92]	; 3d494 <DisplayFX::~DisplayFX()+0x90>
   3d434:	e59f705c 	ldr	r7, [pc, #92]	; 3d498 <DisplayFX::~DisplayFX()+0x94>
   3d438:	e2833008 	add	r3, r3, #8
   3d43c:	ea000008 	b	3d464 <DisplayFX::~DisplayFX()+0x60>
   3d440:	e5130210 	ldr	r0, [r3, #-528]	; 0xfffffdf0
   3d444:	e5037258 	str	r7, [r3, #-600]	; 0xfffffda8
   3d448:	e3500000 	cmp	r0, #0
   3d44c:	0a000001 	beq	3d458 <DisplayFX::~DisplayFX()+0x54>
   3d450:	e3a01004 	mov	r1, #4
   3d454:	ebffb6e9 	bl	2b000 <operator delete(void*, unsigned int)>
   3d458:	e1540005 	cmp	r4, r5
   3d45c:	e1a03004 	mov	r3, r4
   3d460:	0a000009 	beq	3d48c <DisplayFX::~DisplayFX()+0x88>
   3d464:	e5132258 	ldr	r2, [r3, #-600]	; 0xfffffda8
   3d468:	e2434f96 	sub	r4, r3, #600	; 0x258
   3d46c:	e5922000 	ldr	r2, [r2]
   3d470:	e1520006 	cmp	r2, r6
   3d474:	0afffff1 	beq	3d440 <DisplayFX::~DisplayFX()+0x3c>
   3d478:	e1a00004 	mov	r0, r4
   3d47c:	e12fff32 	blx	r2
   3d480:	e1540005 	cmp	r4, r5
   3d484:	e1a03004 	mov	r3, r4
   3d488:	1afffff5 	bne	3d464 <DisplayFX::~DisplayFX()+0x60>
   3d48c:	e1a00004 	mov	r0, r4
   3d490:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3d494:	0003e8f4 	.word	0x0003e8f4
   3d498:	000498fc 	.word	0x000498fc

0003d49c <DisplayFX::screenClear()>:
   3d49c:	e5903bcc 	ldr	r3, [r0, #3020]	; 0xbcc
   3d4a0:	e5901bc8 	ldr	r1, [r0, #3016]	; 0xbc8
   3d4a4:	e0831001 	add	r1, r3, r1
   3d4a8:	e1530001 	cmp	r3, r1
   3d4ac:	212fff1e 	bxcs	lr
   3d4b0:	e5d02bd0 	ldrb	r2, [r0, #3024]	; 0xbd0
   3d4b4:	e4c32001 	strb	r2, [r3], #1
   3d4b8:	e1510003 	cmp	r1, r3
   3d4bc:	1afffffb 	bne	3d4b0 <DisplayFX::screenClear()+0x14>
   3d4c0:	e12fff1e 	bx	lr

0003d4c4 <DisplayFX::screenRectClear(unsigned long, unsigned long, unsigned long, unsigned long)>:
   3d4c4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d4c8:	e5904bc4 	ldr	r4, [r0, #3012]	; 0xbc4
   3d4cc:	e59d8020 	ldr	r8, [sp, #32]
   3d4d0:	e0211294 	mla	r1, r4, r2, r1
   3d4d4:	e5904bcc 	ldr	r4, [r0, #3020]	; 0xbcc
   3d4d8:	e3580000 	cmp	r8, #0
   3d4dc:	e0844001 	add	r4, r4, r1
   3d4e0:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d4e4:	e1a06000 	mov	r6, r0
   3d4e8:	e1a07003 	mov	r7, r3
   3d4ec:	e3a05000 	mov	r5, #0
   3d4f0:	e2809ebd 	add	r9, r0, #3024	; 0xbd0
   3d4f4:	e1a00004 	mov	r0, r4
   3d4f8:	e1d910d0 	ldrsb	r1, [r9]
   3d4fc:	e1a02007 	mov	r2, r7
   3d500:	ebffb281 	bl	29f0c <memset>
   3d504:	e2855001 	add	r5, r5, #1
   3d508:	e5961bc4 	ldr	r1, [r6, #3012]	; 0xbc4
   3d50c:	e1580005 	cmp	r8, r5
   3d510:	e0844001 	add	r4, r4, r1
   3d514:	1afffff6 	bne	3d4f4 <DisplayFX::screenRectClear(unsigned long, unsigned long, unsigned long, unsigned long)+0x30>
   3d518:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003d51c <DisplayFX::screenBackground(DISPLAY_FX_COLOUR)>:
   3d51c:	e5c01bd0 	strb	r1, [r0, #3024]	; 0xbd0
   3d520:	e12fff1e 	bx	lr

0003d524 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)>:
   3d524:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d528:	e3510004 	cmp	r1, #4
   3d52c:	e24dd01c 	sub	sp, sp, #28
   3d530:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
   3d534:	8a000076 	bhi	3d714 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1f0>
   3d538:	e1a0b003 	mov	fp, r3
   3d53c:	e0813101 	add	r3, r1, r1, lsl #2
   3d540:	e0633203 	rsb	r3, r3, r3, lsl #4
   3d544:	e0808183 	add	r8, r0, r3, lsl #3
   3d548:	e1a0a002 	mov	sl, r2
   3d54c:	e5d82004 	ldrb	r2, [r8, #4]
   3d550:	e1a03101 	lsl	r3, r1, #2
   3d554:	e3520000 	cmp	r2, #0
   3d558:	e1a07001 	mov	r7, r1
   3d55c:	e1a06000 	mov	r6, r0
   3d560:	e58d3004 	str	r3, [sp, #4]
   3d564:	0a00006a 	beq	3d714 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1f0>
   3d568:	e5985018 	ldr	r5, [r8, #24]
   3d56c:	e3550000 	cmp	r5, #0
   3d570:	0a000067 	beq	3d714 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1f0>
   3d574:	e1a01005 	mov	r1, r5
   3d578:	e598000c 	ldr	r0, [r8, #12]
   3d57c:	eb0004f7 	bl	3e960 <__udivsi3>
   3d580:	e150000a 	cmp	r0, sl
   3d584:	9a000062 	bls	3d714 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1f0>
   3d588:	e598401c 	ldr	r4, [r8, #28]
   3d58c:	e3540000 	cmp	r4, #0
   3d590:	0a00005f 	beq	3d714 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1f0>
   3d594:	e1a01004 	mov	r1, r4
   3d598:	e5980014 	ldr	r0, [r8, #20]
   3d59c:	eb0004ef 	bl	3e960 <__udivsi3>
   3d5a0:	e15b0000 	cmp	fp, r0
   3d5a4:	2a00005a 	bcs	3d714 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1f0>
   3d5a8:	e1a03004 	mov	r3, r4
   3d5ac:	e598c030 	ldr	ip, [r8, #48]	; 0x30
   3d5b0:	e5980024 	ldr	r0, [r8, #36]	; 0x24
   3d5b4:	e59c2014 	ldr	r2, [ip, #20]
   3d5b8:	e00e0390 	mul	lr, r0, r3
   3d5bc:	e1590002 	cmp	r9, r2
   3d5c0:	23a09000 	movcs	r9, #0
   3d5c4:	e58d4008 	str	r4, [sp, #8]
   3d5c8:	e5984020 	ldr	r4, [r8, #32]
   3d5cc:	e5981010 	ldr	r1, [r8, #16]
   3d5d0:	e0020594 	mul	r2, r4, r5
   3d5d4:	e02b1e9b 	mla	fp, fp, lr, r1
   3d5d8:	e598e008 	ldr	lr, [r8, #8]
   3d5dc:	e598102c 	ldr	r1, [r8, #44]	; 0x2c
   3d5e0:	e02ae29a 	mla	sl, sl, r2, lr
   3d5e4:	e59c200c 	ldr	r2, [ip, #12]
   3d5e8:	e59cc010 	ldr	ip, [ip, #16]
   3d5ec:	e3710001 	cmn	r1, #1
   3d5f0:	e022c992 	mla	r2, r2, r9, ip
   3d5f4:	e58d2004 	str	r2, [sp, #4]
   3d5f8:	02862ebd 	addeq	r2, r6, #3024	; 0xbd0
   3d5fc:	01d210d1 	ldrsbeq	r1, [r2, #1]
   3d600:	e5963bc4 	ldr	r3, [r6, #3012]	; 0xbc4
   3d604:	e1812401 	orr	r2, r1, r1, lsl #8
   3d608:	e58d200c 	str	r2, [sp, #12]
   3d60c:	e1a02107 	lsl	r2, r7, #2
   3d610:	e0822007 	add	r2, r2, r7
   3d614:	e0622202 	rsb	r2, r2, r2, lsl #4
   3d618:	e0862182 	add	r2, r6, r2, lsl #3
   3d61c:	e5922028 	ldr	r2, [r2, #40]	; 0x28
   3d620:	e02bab93 	mla	fp, r3, fp, sl
   3d624:	e3720001 	cmn	r2, #1
   3d628:	02862ebd 	addeq	r2, r6, #3024	; 0xbd0
   3d62c:	e59d1008 	ldr	r1, [sp, #8]
   3d630:	01d220d0 	ldrsbeq	r2, [r2]
   3d634:	e596abcc 	ldr	sl, [r6, #3020]	; 0xbcc
   3d638:	e3510000 	cmp	r1, #0
   3d63c:	e08aa00b 	add	sl, sl, fp
   3d640:	e1822402 	orr	r2, r2, r2, lsl #8
   3d644:	0a000032 	beq	3d714 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1f0>
   3d648:	e3a01000 	mov	r1, #0
   3d64c:	e58d1010 	str	r1, [sp, #16]
   3d650:	e1a01107 	lsl	r1, r7, #2
   3d654:	e0817007 	add	r7, r1, r7
   3d658:	e0677207 	rsb	r7, r7, r7, lsl #4
   3d65c:	e0861187 	add	r1, r6, r7, lsl #3
   3d660:	e58d1014 	str	r1, [sp, #20]
   3d664:	e6ef7072 	uxtb	r7, r2
   3d668:	e3500000 	cmp	r0, #0
   3d66c:	0a00001c 	beq	3d6e4 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1c0>
   3d670:	e3a0b000 	mov	fp, #0
   3d674:	e5dd800c 	ldrb	r8, [sp, #12]
   3d678:	e3550000 	cmp	r5, #0
   3d67c:	0a000014 	beq	3d6d4 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1b0>
   3d680:	e1a0300a 	mov	r3, sl
   3d684:	e3a01080 	mov	r1, #128	; 0x80
   3d688:	e3a09000 	mov	r9, #0
   3d68c:	e59dc004 	ldr	ip, [sp, #4]
   3d690:	e3540000 	cmp	r4, #0
   3d694:	0a000007 	beq	3d6b8 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x194>
   3d698:	e083e004 	add	lr, r3, r4
   3d69c:	e5dc2000 	ldrb	r2, [ip]
   3d6a0:	e1120001 	tst	r2, r1
   3d6a4:	11a02008 	movne	r2, r8
   3d6a8:	01a02007 	moveq	r2, r7
   3d6ac:	e4c32001 	strb	r2, [r3], #1
   3d6b0:	e153000e 	cmp	r3, lr
   3d6b4:	1afffff8 	bne	3d69c <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x178>
   3d6b8:	e1b010c1 	asrs	r1, r1, #1
   3d6bc:	e2899001 	add	r9, r9, #1
   3d6c0:	03a01080 	moveq	r1, #128	; 0x80
   3d6c4:	028cc001 	addeq	ip, ip, #1
   3d6c8:	e1550009 	cmp	r5, r9
   3d6cc:	1affffef 	bne	3d690 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x16c>
   3d6d0:	e5963bc4 	ldr	r3, [r6, #3012]	; 0xbc4
   3d6d4:	e28bb001 	add	fp, fp, #1
   3d6d8:	e150000b 	cmp	r0, fp
   3d6dc:	e08aa003 	add	sl, sl, r3
   3d6e0:	1affffe4 	bne	3d678 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x154>
   3d6e4:	e59d2014 	ldr	r2, [sp, #20]
   3d6e8:	e59d1010 	ldr	r1, [sp, #16]
   3d6ec:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   3d6f0:	e59dc008 	ldr	ip, [sp, #8]
   3d6f4:	e2811001 	add	r1, r1, #1
   3d6f8:	e5922008 	ldr	r2, [r2, #8]
   3d6fc:	e58d1010 	str	r1, [sp, #16]
   3d700:	e15c0001 	cmp	ip, r1
   3d704:	e59d1004 	ldr	r1, [sp, #4]
   3d708:	e0812002 	add	r2, r1, r2
   3d70c:	e58d2004 	str	r2, [sp, #4]
   3d710:	1affffd4 	bne	3d668 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x144>
   3d714:	e28dd01c 	add	sp, sp, #28
   3d718:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003d71c <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)>:
   3d71c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d720:	e3510004 	cmp	r1, #4
   3d724:	e24dd008 	sub	sp, sp, #8
   3d728:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
   3d72c:	8a00001b 	bhi	3d7a0 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)+0x84>
   3d730:	e5d75000 	ldrb	r5, [r7]
   3d734:	e3550000 	cmp	r5, #0
   3d738:	0a000018 	beq	3d7a0 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)+0x84>
   3d73c:	e0816101 	add	r6, r1, r1, lsl #2
   3d740:	e0666206 	rsb	r6, r6, r6, lsl #4
   3d744:	e1a08001 	mov	r8, r1
   3d748:	e1a09000 	mov	r9, r0
   3d74c:	e1a04002 	mov	r4, r2
   3d750:	e1a0a003 	mov	sl, r3
   3d754:	e0806186 	add	r6, r0, r6, lsl #3
   3d758:	ea00000c 	b	3d790 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)+0x74>
   3d75c:	eb00047f 	bl	3e960 <__udivsi3>
   3d760:	e1500004 	cmp	r0, r4
   3d764:	9a00000d 	bls	3d7a0 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)+0x84>
   3d768:	e1a02004 	mov	r2, r4
   3d76c:	e58d5000 	str	r5, [sp]
   3d770:	e1a0300a 	mov	r3, sl
   3d774:	e1a01008 	mov	r1, r8
   3d778:	e1a00009 	mov	r0, r9
   3d77c:	ebffff68 	bl	3d524 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)>
   3d780:	e5f75001 	ldrb	r5, [r7, #1]!
   3d784:	e2844001 	add	r4, r4, #1
   3d788:	e3550000 	cmp	r5, #0
   3d78c:	0a000003 	beq	3d7a0 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)+0x84>
   3d790:	e5961018 	ldr	r1, [r6, #24]
   3d794:	e596000c 	ldr	r0, [r6, #12]
   3d798:	e3510000 	cmp	r1, #0
   3d79c:	1affffee 	bne	3d75c <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)+0x40>
   3d7a0:	e28dd008 	add	sp, sp, #8
   3d7a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003d7a8 <DisplayFX::windowForeground(unsigned long, DISPLAY_FX_COLOUR)>:
   3d7a8:	e3510004 	cmp	r1, #4
   3d7ac:	90811101 	addls	r1, r1, r1, lsl #2
   3d7b0:	90611201 	rsbls	r1, r1, r1, lsl #4
   3d7b4:	90801181 	addls	r1, r0, r1, lsl #3
   3d7b8:	9581202c 	strls	r2, [r1, #44]	; 0x2c
   3d7bc:	e12fff1e 	bx	lr

0003d7c0 <DisplayFX::windowBackground(unsigned long, DISPLAY_FX_COLOUR)>:
   3d7c0:	e3510004 	cmp	r1, #4
   3d7c4:	90811101 	addls	r1, r1, r1, lsl #2
   3d7c8:	90611201 	rsbls	r1, r1, r1, lsl #4
   3d7cc:	90801181 	addls	r1, r0, r1, lsl #3
   3d7d0:	95812028 	strls	r2, [r1, #40]	; 0x28
   3d7d4:	e12fff1e 	bx	lr

0003d7d8 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)>:
   3d7d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3d7dc:	e0814101 	add	r4, r1, r1, lsl #2
   3d7e0:	e0644204 	rsb	r4, r4, r4, lsl #4
   3d7e4:	e0804184 	add	r4, r0, r4, lsl #3
   3d7e8:	e594c010 	ldr	ip, [r4, #16]
   3d7ec:	e5945020 	ldr	r5, [r4, #32]
   3d7f0:	e5947024 	ldr	r7, [r4, #36]	; 0x24
   3d7f4:	e594e008 	ldr	lr, [r4, #8]
   3d7f8:	e594402c 	ldr	r4, [r4, #44]	; 0x2c
   3d7fc:	e1dd61dc 	ldrsb	r6, [sp, #28]
   3d800:	e3740001 	cmn	r4, #1
   3d804:	e023c397 	mla	r3, r7, r3, ip
   3d808:	0280cebd 	addeq	ip, r0, #3024	; 0xbd0
   3d80c:	01dc40d1 	ldrsbeq	r4, [ip, #1]
   3d810:	e3760001 	cmn	r6, #1
   3d814:	11a04006 	movne	r4, r6
   3d818:	e02ee295 	mla	lr, r5, r2, lr
   3d81c:	e5902bc4 	ldr	r2, [r0, #3012]	; 0xbc4
   3d820:	e59d8018 	ldr	r8, [sp, #24]
   3d824:	e023e392 	mla	r3, r2, r3, lr
   3d828:	e590ebcc 	ldr	lr, [r0, #3020]	; 0xbcc
   3d82c:	e08ee003 	add	lr, lr, r3
   3d830:	e1a03101 	lsl	r3, r1, #2
   3d834:	e083c001 	add	ip, r3, r1
   3d838:	e06cc20c 	rsb	ip, ip, ip, lsl #4
   3d83c:	e080c18c 	add	ip, r0, ip, lsl #3
   3d840:	e59cc028 	ldr	ip, [ip, #40]	; 0x28
   3d844:	e37c0001 	cmn	ip, #1
   3d848:	0280cebd 	addeq	ip, r0, #3024	; 0xbd0
   3d84c:	01dcc0d0 	ldrsbeq	ip, [ip]
   3d850:	e3580000 	cmp	r8, #0
   3d854:	16ef4074 	uxtbne	r4, r4
   3d858:	06ef407c 	uxtbeq	r4, ip
   3d85c:	e2156003 	ands	r6, r5, #3
   3d860:	1a000018 	bne	3d8c8 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)+0xf0>
   3d864:	e1a0c804 	lsl	ip, r4, #16
   3d868:	e08ccc04 	add	ip, ip, r4, lsl #24
   3d86c:	e08cc404 	add	ip, ip, r4, lsl #8
   3d870:	e3570000 	cmp	r7, #0
   3d874:	e08c4004 	add	r4, ip, r4
   3d878:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3d87c:	e083c001 	add	ip, r3, r1
   3d880:	e06cc20c 	rsb	ip, ip, ip, lsl #4
   3d884:	e080c18c 	add	ip, r0, ip, lsl #3
   3d888:	e1b03125 	lsrs	r3, r5, #2
   3d88c:	13a03000 	movne	r3, #0
   3d890:	e022e296 	mla	r2, r6, r2, lr
   3d894:	0a000004 	beq	3d8ac <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)+0xd4>
   3d898:	e4824004 	str	r4, [r2], #4
   3d89c:	e59c1020 	ldr	r1, [ip, #32]
   3d8a0:	e2833001 	add	r3, r3, #1
   3d8a4:	e1530121 	cmp	r3, r1, lsr #2
   3d8a8:	3afffffa 	bcc	3d898 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)+0xc0>
   3d8ac:	e59c3024 	ldr	r3, [ip, #36]	; 0x24
   3d8b0:	e2866001 	add	r6, r6, #1
   3d8b4:	e1530006 	cmp	r3, r6
   3d8b8:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   3d8bc:	e5902bc4 	ldr	r2, [r0, #3012]	; 0xbc4
   3d8c0:	e59c5020 	ldr	r5, [ip, #32]
   3d8c4:	eaffffef 	b	3d888 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)+0xb0>
   3d8c8:	e3570000 	cmp	r7, #0
   3d8cc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3d8d0:	e3a06000 	mov	r6, #0
   3d8d4:	e083c001 	add	ip, r3, r1
   3d8d8:	e06cc20c 	rsb	ip, ip, ip, lsl #4
   3d8dc:	e080c18c 	add	ip, r0, ip, lsl #3
   3d8e0:	e3550000 	cmp	r5, #0
   3d8e4:	13a03000 	movne	r3, #0
   3d8e8:	e022e296 	mla	r2, r6, r2, lr
   3d8ec:	0a000004 	beq	3d904 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)+0x12c>
   3d8f0:	e4c24001 	strb	r4, [r2], #1
   3d8f4:	e59c1020 	ldr	r1, [ip, #32]
   3d8f8:	e2833001 	add	r3, r3, #1
   3d8fc:	e1510003 	cmp	r1, r3
   3d900:	8afffffa 	bhi	3d8f0 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)+0x118>
   3d904:	e59c3024 	ldr	r3, [ip, #36]	; 0x24
   3d908:	e2866001 	add	r6, r6, #1
   3d90c:	e1530006 	cmp	r3, r6
   3d910:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   3d914:	e5902bc4 	ldr	r2, [r0, #3012]	; 0xbc4
   3d918:	e59c5020 	ldr	r5, [ip, #32]
   3d91c:	eaffffef 	b	3d8e0 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)+0x108>

0003d920 <DisplayFX::getFramebuffer(unsigned long, FrameBufferInfo&)>:
   3d920:	e92d4030 	push	{r4, r5, lr}
   3d924:	e3a04001 	mov	r4, #1
   3d928:	e0811101 	add	r1, r1, r1, lsl #2
   3d92c:	e0611201 	rsb	r1, r1, r1, lsl #4
   3d930:	e0801181 	add	r1, r0, r1, lsl #3
   3d934:	e591e008 	ldr	lr, [r1, #8]
   3d938:	e590cbc4 	ldr	ip, [r0, #3012]	; 0xbc4
   3d93c:	e5913010 	ldr	r3, [r1, #16]
   3d940:	e591500c 	ldr	r5, [r1, #12]
   3d944:	e023ec93 	mla	r3, r3, ip, lr
   3d948:	e590ebcc 	ldr	lr, [r0, #3020]	; 0xbcc
   3d94c:	e5900bbc 	ldr	r0, [r0, #3004]	; 0xbbc
   3d950:	e08e3003 	add	r3, lr, r3
   3d954:	e5823010 	str	r3, [r2, #16]
   3d958:	e5913014 	ldr	r3, [r1, #20]
   3d95c:	e582e000 	str	lr, [r2]
   3d960:	e5820004 	str	r0, [r2, #4]
   3d964:	e5820008 	str	r0, [r2, #8]
   3d968:	e582c00c 	str	ip, [r2, #12]
   3d96c:	e5825014 	str	r5, [r2, #20]
   3d970:	e5823018 	str	r3, [r2, #24]
   3d974:	e582401c 	str	r4, [r2, #28]
   3d978:	e8bd8030 	pop	{r4, r5, pc}

0003d97c <DisplayFX::windowClear(unsigned long)>:
   3d97c:	e3510004 	cmp	r1, #4
   3d980:	812fff1e 	bxhi	lr
   3d984:	e0811101 	add	r1, r1, r1, lsl #2
   3d988:	e0611201 	rsb	r1, r1, r1, lsl #4
   3d98c:	e0801181 	add	r1, r0, r1, lsl #3
   3d990:	e5d13004 	ldrb	r3, [r1, #4]
   3d994:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d998:	e3530000 	cmp	r3, #0
   3d99c:	e1a06000 	mov	r6, r0
   3d9a0:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d9a4:	e5914010 	ldr	r4, [r1, #16]
   3d9a8:	e5902bc4 	ldr	r2, [r0, #3012]	; 0xbc4
   3d9ac:	e5913008 	ldr	r3, [r1, #8]
   3d9b0:	e5917014 	ldr	r7, [r1, #20]
   3d9b4:	e0233492 	mla	r3, r2, r4, r3
   3d9b8:	e5904bcc 	ldr	r4, [r0, #3020]	; 0xbcc
   3d9bc:	e3570000 	cmp	r7, #0
   3d9c0:	e591800c 	ldr	r8, [r1, #12]
   3d9c4:	e0844003 	add	r4, r4, r3
   3d9c8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d9cc:	e3a05000 	mov	r5, #0
   3d9d0:	e2809ebd 	add	r9, r0, #3024	; 0xbd0
   3d9d4:	e1a00004 	mov	r0, r4
   3d9d8:	e1a02008 	mov	r2, r8
   3d9dc:	e1d910d0 	ldrsb	r1, [r9]
   3d9e0:	ebffb149 	bl	29f0c <memset>
   3d9e4:	e2855001 	add	r5, r5, #1
   3d9e8:	e5963bc4 	ldr	r3, [r6, #3012]	; 0xbc4
   3d9ec:	e1570005 	cmp	r7, r5
   3d9f0:	e0844003 	add	r4, r4, r3
   3d9f4:	1afffff6 	bne	3d9d4 <DisplayFX::windowClear(unsigned long)+0x58>
   3d9f8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003d9fc <DisplayFX::windowGetPFB(unsigned long, unsigned long, unsigned long)>:
   3d9fc:	e0811101 	add	r1, r1, r1, lsl #2
   3da00:	e0611201 	rsb	r1, r1, r1, lsl #4
   3da04:	e0801181 	add	r1, r0, r1, lsl #3
   3da08:	e92d4030 	push	{r4, r5, lr}
   3da0c:	e591c024 	ldr	ip, [r1, #36]	; 0x24
   3da10:	e591e01c 	ldr	lr, [r1, #28]
   3da14:	e5915018 	ldr	r5, [r1, #24]
   3da18:	e00c0e9c 	mul	ip, ip, lr
   3da1c:	e591e020 	ldr	lr, [r1, #32]
   3da20:	e5914010 	ldr	r4, [r1, #16]
   3da24:	e00e059e 	mul	lr, lr, r5
   3da28:	e5911008 	ldr	r1, [r1, #8]
   3da2c:	e0234c93 	mla	r3, r3, ip, r4
   3da30:	e0221e92 	mla	r2, r2, lr, r1
   3da34:	e590cbc4 	ldr	ip, [r0, #3012]	; 0xbc4
   3da38:	e5900bcc 	ldr	r0, [r0, #3020]	; 0xbcc
   3da3c:	e023239c 	mla	r3, ip, r3, r2
   3da40:	e0800003 	add	r0, r0, r3
   3da44:	e8bd8030 	pop	{r4, r5, pc}

0003da48 <DisplayFX::screenGetPFBXY(unsigned long, unsigned long)>:
   3da48:	e5903bc4 	ldr	r3, [r0, #3012]	; 0xbc4
   3da4c:	e5900bcc 	ldr	r0, [r0, #3020]	; 0xbcc
   3da50:	e0211293 	mla	r1, r3, r2, r1
   3da54:	e0800001 	add	r0, r0, r1
   3da58:	e12fff1e 	bx	lr

0003da5c <DisplayFX::windowGetPFBXY(unsigned long, unsigned long, unsigned long)>:
   3da5c:	e0811101 	add	r1, r1, r1, lsl #2
   3da60:	e0611201 	rsb	r1, r1, r1, lsl #4
   3da64:	e0801181 	add	r1, r0, r1, lsl #3
   3da68:	e92d4010 	push	{r4, lr}
   3da6c:	e591c020 	ldr	ip, [r1, #32]
   3da70:	e5914024 	ldr	r4, [r1, #36]	; 0x24
   3da74:	e591e010 	ldr	lr, [r1, #16]
   3da78:	e5911008 	ldr	r1, [r1, #8]
   3da7c:	e023e394 	mla	r3, r4, r3, lr
   3da80:	e022129c 	mla	r2, ip, r2, r1
   3da84:	e5901bc4 	ldr	r1, [r0, #3012]	; 0xbc4
   3da88:	e5900bcc 	ldr	r0, [r0, #3020]	; 0xbcc
   3da8c:	e0232391 	mla	r3, r1, r3, r2
   3da90:	e0800003 	add	r0, r0, r3
   3da94:	e8bd8010 	pop	{r4, pc}

0003da98 <DisplayFX::consoleForeground(DISPLAY_FX_COLOUR)>:
   3da98:	e5903bd4 	ldr	r3, [r0, #3028]	; 0xbd4
   3da9c:	e0833103 	add	r3, r3, r3, lsl #2
   3daa0:	e0633203 	rsb	r3, r3, r3, lsl #4
   3daa4:	e0803183 	add	r3, r0, r3, lsl #3
   3daa8:	e583102c 	str	r1, [r3, #44]	; 0x2c
   3daac:	e12fff1e 	bx	lr

0003dab0 <DisplayFX::consoleGetWidth()>:
   3dab0:	e5903bd4 	ldr	r3, [r0, #3028]	; 0xbd4
   3dab4:	e0833103 	add	r3, r3, r3, lsl #2
   3dab8:	e0633203 	rsb	r3, r3, r3, lsl #4
   3dabc:	e0803183 	add	r3, r0, r3, lsl #3
   3dac0:	e5931018 	ldr	r1, [r3, #24]
   3dac4:	e593000c 	ldr	r0, [r3, #12]
   3dac8:	e3510000 	cmp	r1, #0
   3dacc:	0a000002 	beq	3dadc <DisplayFX::consoleGetWidth()+0x2c>
   3dad0:	e92d4010 	push	{r4, lr}
   3dad4:	eb0003a1 	bl	3e960 <__udivsi3>
   3dad8:	e8bd8010 	pop	{r4, pc}
   3dadc:	e1a00001 	mov	r0, r1
   3dae0:	e12fff1e 	bx	lr

0003dae4 <DisplayFX::consoleSetWindow(unsigned long)>:
   3dae4:	e3510004 	cmp	r1, #4
   3dae8:	95801bd4 	strls	r1, [r0, #3028]	; 0xbd4
   3daec:	e12fff1e 	bx	lr

0003daf0 <DisplayFX::cursorCheck()>:
   3daf0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3daf4:	e5906bd4 	ldr	r6, [r0, #3028]	; 0xbd4
   3daf8:	e1a05000 	mov	r5, r0
   3dafc:	e0864106 	add	r4, r6, r6, lsl #2
   3db00:	e0644204 	rsb	r4, r4, r4, lsl #4
   3db04:	e0804184 	add	r4, r0, r4, lsl #3
   3db08:	e5941018 	ldr	r1, [r4, #24]
   3db0c:	e1a07106 	lsl	r7, r6, #2
   3db10:	e3510000 	cmp	r1, #0
   3db14:	0a00001b 	beq	3db88 <DisplayFX::cursorCheck()+0x98>
   3db18:	e594000c 	ldr	r0, [r4, #12]
   3db1c:	eb00038f 	bl	3e960 <__udivsi3>
   3db20:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3db24:	e1530000 	cmp	r3, r0
   3db28:	2a000016 	bcs	3db88 <DisplayFX::cursorCheck()+0x98>
   3db2c:	e594101c 	ldr	r1, [r4, #28]
   3db30:	e0873006 	add	r3, r7, r6
   3db34:	e0633203 	rsb	r3, r3, r3, lsl #4
   3db38:	e0853183 	add	r3, r5, r3, lsl #3
   3db3c:	e3510000 	cmp	r1, #0
   3db40:	e593804c 	ldr	r8, [r3, #76]	; 0x4c
   3db44:	0a000003 	beq	3db58 <DisplayFX::cursorCheck()+0x68>
   3db48:	e5940014 	ldr	r0, [r4, #20]
   3db4c:	eb000383 	bl	3e960 <__udivsi3>
   3db50:	e1580000 	cmp	r8, r0
   3db54:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
   3db58:	e0877006 	add	r7, r7, r6
   3db5c:	e0677207 	rsb	r7, r7, r7, lsl #4
   3db60:	e0857187 	add	r7, r5, r7, lsl #3
   3db64:	e2488001 	sub	r8, r8, #1
   3db68:	e3560004 	cmp	r6, #4
   3db6c:	e587804c 	str	r8, [r7, #76]	; 0x4c
   3db70:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   3db74:	e1a01006 	mov	r1, r6
   3db78:	e1a00005 	mov	r0, r5
   3db7c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3db80:	e3a02001 	mov	r2, #1
   3db84:	eafffd97 	b	3d1e8 <DisplayFX::windowScroll(unsigned long, long) [clone .part.0]>
   3db88:	e3a01000 	mov	r1, #0
   3db8c:	e0873006 	add	r3, r7, r6
   3db90:	e0633203 	rsb	r3, r3, r3, lsl #4
   3db94:	e0853183 	add	r3, r5, r3, lsl #3
   3db98:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
   3db9c:	e5831050 	str	r1, [r3, #80]	; 0x50
   3dba0:	e2822001 	add	r2, r2, #1
   3dba4:	e583204c 	str	r2, [r3, #76]	; 0x4c
   3dba8:	eaffffdf 	b	3db2c <DisplayFX::cursorCheck()+0x3c>

0003dbac <DisplayFX::consolePut(int)>:
   3dbac:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3dbb0:	e2413008 	sub	r3, r1, #8
   3dbb4:	e1a04000 	mov	r4, r0
   3dbb8:	e24dd00c 	sub	sp, sp, #12
   3dbbc:	e3530005 	cmp	r3, #5
   3dbc0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   3dbc4:	ea00000d 	b	3dc00 <DisplayFX::consolePut(int)+0x54>
   3dbc8:	0003dc50 	.word	0x0003dc50
   3dbcc:	0003dc8c 	.word	0x0003dc8c
   3dbd0:	0003dcf4 	.word	0x0003dcf4
   3dbd4:	0003dc00 	.word	0x0003dc00
   3dbd8:	0003dc00 	.word	0x0003dc00
   3dbdc:	0003dbe0 	.word	0x0003dbe0
   3dbe0:	e3a03000 	mov	r3, #0
   3dbe4:	e5900bd4 	ldr	r0, [r0, #3028]	; 0xbd4
   3dbe8:	e0800100 	add	r0, r0, r0, lsl #2
   3dbec:	e0600200 	rsb	r0, r0, r0, lsl #4
   3dbf0:	e0844180 	add	r4, r4, r0, lsl #3
   3dbf4:	e5843050 	str	r3, [r4, #80]	; 0x50
   3dbf8:	e28dd00c 	add	sp, sp, #12
   3dbfc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3dc00:	e1a0c001 	mov	ip, r1
   3dc04:	e5901bd4 	ldr	r1, [r0, #3028]	; 0xbd4
   3dc08:	e0812101 	add	r2, r1, r1, lsl #2
   3dc0c:	e0622202 	rsb	r2, r2, r2, lsl #4
   3dc10:	e0802182 	add	r2, r0, r2, lsl #3
   3dc14:	e592304c 	ldr	r3, [r2, #76]	; 0x4c
   3dc18:	e5922050 	ldr	r2, [r2, #80]	; 0x50
   3dc1c:	e58dc000 	str	ip, [sp]
   3dc20:	ebfffe3f 	bl	3d524 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)>
   3dc24:	e1a00004 	mov	r0, r4
   3dc28:	e5943bd4 	ldr	r3, [r4, #3028]	; 0xbd4
   3dc2c:	e0833103 	add	r3, r3, r3, lsl #2
   3dc30:	e0633203 	rsb	r3, r3, r3, lsl #4
   3dc34:	e0844183 	add	r4, r4, r3, lsl #3
   3dc38:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3dc3c:	e2833001 	add	r3, r3, #1
   3dc40:	e5843050 	str	r3, [r4, #80]	; 0x50
   3dc44:	e28dd00c 	add	sp, sp, #12
   3dc48:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   3dc4c:	eaffffa7 	b	3daf0 <DisplayFX::cursorCheck()>
   3dc50:	e5901bd4 	ldr	r1, [r0, #3028]	; 0xbd4
   3dc54:	e0813101 	add	r3, r1, r1, lsl #2
   3dc58:	e0633203 	rsb	r3, r3, r3, lsl #4
   3dc5c:	e0800183 	add	r0, r0, r3, lsl #3
   3dc60:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   3dc64:	e3520000 	cmp	r2, #0
   3dc68:	0affffe2 	beq	3dbf8 <DisplayFX::consolePut(int)+0x4c>
   3dc6c:	e3a0c020 	mov	ip, #32
   3dc70:	e2422001 	sub	r2, r2, #1
   3dc74:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   3dc78:	e5802050 	str	r2, [r0, #80]	; 0x50
   3dc7c:	e1a00004 	mov	r0, r4
   3dc80:	e58dc000 	str	ip, [sp]
   3dc84:	ebfffe26 	bl	3d524 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)>
   3dc88:	eaffffda 	b	3dbf8 <DisplayFX::consolePut(int)+0x4c>
   3dc8c:	e5907bd4 	ldr	r7, [r0, #3028]	; 0xbd4
   3dc90:	e0873107 	add	r3, r7, r7, lsl #2
   3dc94:	e0633203 	rsb	r3, r3, r3, lsl #4
   3dc98:	e0803183 	add	r3, r0, r3, lsl #3
   3dc9c:	e5932050 	ldr	r2, [r3, #80]	; 0x50
   3dca0:	e5931018 	ldr	r1, [r3, #24]
   3dca4:	e2822001 	add	r2, r2, #1
   3dca8:	e3c26007 	bic	r6, r2, #7
   3dcac:	e3510000 	cmp	r1, #0
   3dcb0:	e593000c 	ldr	r0, [r3, #12]
   3dcb4:	e5832050 	str	r2, [r3, #80]	; 0x50
   3dcb8:	e2866008 	add	r6, r6, #8
   3dcbc:	e1a05107 	lsl	r5, r7, #2
   3dcc0:	0a000003 	beq	3dcd4 <DisplayFX::consolePut(int)+0x128>
   3dcc4:	eb000325 	bl	3e960 <__udivsi3>
   3dcc8:	e2400001 	sub	r0, r0, #1
   3dccc:	e1560000 	cmp	r6, r0
   3dcd0:	21a06000 	movcs	r6, r0
   3dcd4:	e1a00004 	mov	r0, r4
   3dcd8:	e0853007 	add	r3, r5, r7
   3dcdc:	e0633203 	rsb	r3, r3, r3, lsl #4
   3dce0:	e0843183 	add	r3, r4, r3, lsl #3
   3dce4:	e5836050 	str	r6, [r3, #80]	; 0x50
   3dce8:	e28dd00c 	add	sp, sp, #12
   3dcec:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   3dcf0:	eaffff7e 	b	3daf0 <DisplayFX::cursorCheck()>
   3dcf4:	e3a02000 	mov	r2, #0
   3dcf8:	e5903bd4 	ldr	r3, [r0, #3028]	; 0xbd4
   3dcfc:	e0833103 	add	r3, r3, r3, lsl #2
   3dd00:	e0633203 	rsb	r3, r3, r3, lsl #4
   3dd04:	e0804183 	add	r4, r0, r3, lsl #3
   3dd08:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   3dd0c:	e5842050 	str	r2, [r4, #80]	; 0x50
   3dd10:	e2833001 	add	r3, r3, #1
   3dd14:	e584304c 	str	r3, [r4, #76]	; 0x4c
   3dd18:	e28dd00c 	add	sp, sp, #12
   3dd1c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   3dd20:	eaffff72 	b	3daf0 <DisplayFX::cursorCheck()>

0003dd24 <DisplayFX::consolePut(char const*)>:
   3dd24:	e92d4070 	push	{r4, r5, r6, lr}
   3dd28:	e1a04001 	mov	r4, r1
   3dd2c:	e1d110d0 	ldrsb	r1, [r1]
   3dd30:	e3510000 	cmp	r1, #0
   3dd34:	08bd8070 	popeq	{r4, r5, r6, pc}
   3dd38:	e1a05000 	mov	r5, r0
   3dd3c:	e1a00005 	mov	r0, r5
   3dd40:	ebffff99 	bl	3dbac <DisplayFX::consolePut(int)>
   3dd44:	e1f410d1 	ldrsb	r1, [r4, #1]!
   3dd48:	e3510000 	cmp	r1, #0
   3dd4c:	1afffffa 	bne	3dd3c <DisplayFX::consolePut(char const*)+0x18>
   3dd50:	e8bd8070 	pop	{r4, r5, r6, pc}

0003dd54 <DisplayFX::consolePut(char const*, unsigned int)>:
   3dd54:	e3520000 	cmp	r2, #0
   3dd58:	012fff1e 	bxeq	lr
   3dd5c:	e92d4070 	push	{r4, r5, r6, lr}
   3dd60:	e1a06000 	mov	r6, r0
   3dd64:	e0812002 	add	r2, r1, r2
   3dd68:	e2425001 	sub	r5, r2, #1
   3dd6c:	e2414001 	sub	r4, r1, #1
   3dd70:	e1f410d1 	ldrsb	r1, [r4, #1]!
   3dd74:	e1a00006 	mov	r0, r6
   3dd78:	ebffff8b 	bl	3dbac <DisplayFX::consolePut(int)>
   3dd7c:	e1540005 	cmp	r4, r5
   3dd80:	1afffffa 	bne	3dd70 <DisplayFX::consolePut(char const*, unsigned int)+0x1c>
   3dd84:	e8bd8070 	pop	{r4, r5, r6, pc}

0003dd88 <DisplayFX::windowScroll(unsigned long, long)>:
   3dd88:	e16f3f12 	clz	r3, r2
   3dd8c:	e1a032a3 	lsr	r3, r3, #5
   3dd90:	e3510004 	cmp	r1, #4
   3dd94:	83833001 	orrhi	r3, r3, #1
   3dd98:	e3530000 	cmp	r3, #0
   3dd9c:	112fff1e 	bxne	lr
   3dda0:	eafffd10 	b	3d1e8 <DisplayFX::windowScroll(unsigned long, long) [clone .part.0]>

0003dda4 <DisplayFX::drawHorizontal(unsigned long, unsigned long, unsigned long, unsigned long)>:
   3dda4:	e590cbc4 	ldr	ip, [r0, #3012]	; 0xbc4
   3dda8:	e5900bcc 	ldr	r0, [r0, #3020]	; 0xbcc
   3ddac:	e022129c 	mla	r2, ip, r2, r1
   3ddb0:	e3530000 	cmp	r3, #0
   3ddb4:	e0802002 	add	r2, r0, r2
   3ddb8:	012fff1e 	bxeq	lr
   3ddbc:	e59d1000 	ldr	r1, [sp]
   3ddc0:	e0823003 	add	r3, r2, r3
   3ddc4:	e6ef1071 	uxtb	r1, r1
   3ddc8:	e4c21001 	strb	r1, [r2], #1
   3ddcc:	e1520003 	cmp	r2, r3
   3ddd0:	1afffffc 	bne	3ddc8 <DisplayFX::drawHorizontal(unsigned long, unsigned long, unsigned long, unsigned long)+0x24>
   3ddd4:	e12fff1e 	bx	lr

0003ddd8 <DisplayFX::drawVertical(unsigned long, unsigned long, unsigned long, unsigned long)>:
   3ddd8:	e590cbc4 	ldr	ip, [r0, #3012]	; 0xbc4
   3dddc:	e3530000 	cmp	r3, #0
   3dde0:	e022129c 	mla	r2, ip, r2, r1
   3dde4:	e590cbcc 	ldr	ip, [r0, #3020]	; 0xbcc
   3dde8:	e08c2002 	add	r2, ip, r2
   3ddec:	012fff1e 	bxeq	lr
   3ddf0:	e3a01000 	mov	r1, #0
   3ddf4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3ddf8:	e59dc004 	ldr	ip, [sp, #4]
   3ddfc:	e6efe07c 	uxtb	lr, ip
   3de00:	e5c2e000 	strb	lr, [r2]
   3de04:	e590cbc4 	ldr	ip, [r0, #3012]	; 0xbc4
   3de08:	e2811001 	add	r1, r1, #1
   3de0c:	e1530001 	cmp	r3, r1
   3de10:	e082200c 	add	r2, r2, ip
   3de14:	1afffff9 	bne	3de00 <DisplayFX::drawVertical(unsigned long, unsigned long, unsigned long, unsigned long)+0x28>
   3de18:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003de1c <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)>:
   3de1c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3de20:	e3510004 	cmp	r1, #4
   3de24:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   3de28:	88bd8ff8 	pophi	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3de2c:	e0811101 	add	r1, r1, r1, lsl #2
   3de30:	e0611201 	rsb	r1, r1, r1, lsl #4
   3de34:	e0806181 	add	r6, r0, r1, lsl #3
   3de38:	e596b018 	ldr	fp, [r6, #24]
   3de3c:	e1a05000 	mov	r5, r0
   3de40:	e35b0000 	cmp	fp, #0
   3de44:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3de48:	e1a0100b 	mov	r1, fp
   3de4c:	e596000c 	ldr	r0, [r6, #12]
   3de50:	e1a08002 	mov	r8, r2
   3de54:	e1a09003 	mov	r9, r3
   3de58:	eb0002c0 	bl	3e960 <__udivsi3>
   3de5c:	e1500008 	cmp	r0, r8
   3de60:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3de64:	e596a01c 	ldr	sl, [r6, #28]
   3de68:	e35a0000 	cmp	sl, #0
   3de6c:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3de70:	e1a0100a 	mov	r1, sl
   3de74:	e5960014 	ldr	r0, [r6, #20]
   3de78:	eb0002b8 	bl	3e960 <__udivsi3>
   3de7c:	e1590000 	cmp	r9, r0
   3de80:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3de84:	e5d63004 	ldrb	r3, [r6, #4]
   3de88:	e3530000 	cmp	r3, #0
   3de8c:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3de90:	e1a0c006 	mov	ip, r6
   3de94:	e3a07000 	mov	r7, #0
   3de98:	e5961024 	ldr	r1, [r6, #36]	; 0x24
   3de9c:	e5963020 	ldr	r3, [r6, #32]
   3dea0:	e0020a91 	mul	r2, r1, sl
   3dea4:	e0030b93 	mul	r3, r3, fp
   3dea8:	e5960008 	ldr	r0, [r6, #8]
   3deac:	e596e010 	ldr	lr, [r6, #16]
   3deb0:	e0280398 	mla	r8, r8, r3, r0
   3deb4:	e022e299 	mla	r2, r9, r2, lr
   3deb8:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3debc:	e5950bcc 	ldr	r0, [r5, #3020]	; 0xbcc
   3dec0:	e0228293 	mla	r2, r3, r2, r8
   3dec4:	e0800002 	add	r0, r0, r2
   3dec8:	e3510000 	cmp	r1, #0
   3decc:	0a000019 	beq	3df38 <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0x11c>
   3ded0:	e3a06000 	mov	r6, #0
   3ded4:	e59c2018 	ldr	r2, [ip, #24]
   3ded8:	e3520000 	cmp	r2, #0
   3dedc:	0a000010 	beq	3df24 <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0x108>
   3dee0:	e1a02000 	mov	r2, r0
   3dee4:	e3a0e000 	mov	lr, #0
   3dee8:	e59c3020 	ldr	r3, [ip, #32]
   3deec:	e3530000 	cmp	r3, #0
   3def0:	0a000006 	beq	3df10 <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xf4>
   3def4:	e3a03000 	mov	r3, #0
   3def8:	e4d21001 	ldrb	r1, [r2], #1
   3defc:	e2833001 	add	r3, r3, #1
   3df00:	e4c41001 	strb	r1, [r4], #1
   3df04:	e59c1020 	ldr	r1, [ip, #32]
   3df08:	e1510003 	cmp	r1, r3
   3df0c:	8afffff9 	bhi	3def8 <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xdc>
   3df10:	e59c3018 	ldr	r3, [ip, #24]
   3df14:	e28ee001 	add	lr, lr, #1
   3df18:	e153000e 	cmp	r3, lr
   3df1c:	8afffff1 	bhi	3dee8 <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xcc>
   3df20:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3df24:	e59c2024 	ldr	r2, [ip, #36]	; 0x24
   3df28:	e2866001 	add	r6, r6, #1
   3df2c:	e1520006 	cmp	r2, r6
   3df30:	e0800003 	add	r0, r0, r3
   3df34:	8affffe6 	bhi	3ded4 <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xb8>
   3df38:	e59c201c 	ldr	r2, [ip, #28]
   3df3c:	e2877001 	add	r7, r7, #1
   3df40:	e1520007 	cmp	r2, r7
   3df44:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3df48:	e59c1024 	ldr	r1, [ip, #36]	; 0x24
   3df4c:	eaffffdd 	b	3dec8 <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xac>

0003df50 <DisplayFX::cursorRestore()>:
   3df50:	e5901bd4 	ldr	r1, [r0, #3028]	; 0xbd4
   3df54:	e0813101 	add	r3, r1, r1, lsl #2
   3df58:	e0633203 	rsb	r3, r3, r3, lsl #4
   3df5c:	e0802183 	add	r2, r0, r3, lsl #3
   3df60:	e5d2c004 	ldrb	ip, [r2, #4]
   3df64:	e35c0000 	cmp	ip, #0
   3df68:	012fff1e 	bxeq	lr
   3df6c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3df70:	e1a03183 	lsl	r3, r3, #3
   3df74:	e283c055 	add	ip, r3, #85	; 0x55
   3df78:	e24dd00c 	sub	sp, sp, #12
   3df7c:	e080c00c 	add	ip, r0, ip
   3df80:	e592304c 	ldr	r3, [r2, #76]	; 0x4c
   3df84:	e5922050 	ldr	r2, [r2, #80]	; 0x50
   3df88:	e58dc000 	str	ip, [sp]
   3df8c:	ebffffa2 	bl	3de1c <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)>
   3df90:	e28dd00c 	add	sp, sp, #12
   3df94:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003df98 <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)>:
   3df98:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3df9c:	e3510004 	cmp	r1, #4
   3dfa0:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   3dfa4:	88bd8ff8 	pophi	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dfa8:	e0811101 	add	r1, r1, r1, lsl #2
   3dfac:	e0611201 	rsb	r1, r1, r1, lsl #4
   3dfb0:	e0806181 	add	r6, r0, r1, lsl #3
   3dfb4:	e596b018 	ldr	fp, [r6, #24]
   3dfb8:	e1a05000 	mov	r5, r0
   3dfbc:	e35b0000 	cmp	fp, #0
   3dfc0:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dfc4:	e1a0100b 	mov	r1, fp
   3dfc8:	e596000c 	ldr	r0, [r6, #12]
   3dfcc:	e1a08002 	mov	r8, r2
   3dfd0:	e1a09003 	mov	r9, r3
   3dfd4:	eb000261 	bl	3e960 <__udivsi3>
   3dfd8:	e1500008 	cmp	r0, r8
   3dfdc:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dfe0:	e596a01c 	ldr	sl, [r6, #28]
   3dfe4:	e35a0000 	cmp	sl, #0
   3dfe8:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dfec:	e1a0100a 	mov	r1, sl
   3dff0:	e5960014 	ldr	r0, [r6, #20]
   3dff4:	eb000259 	bl	3e960 <__udivsi3>
   3dff8:	e1590000 	cmp	r9, r0
   3dffc:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e000:	e5d63004 	ldrb	r3, [r6, #4]
   3e004:	e3530000 	cmp	r3, #0
   3e008:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e00c:	e1a0c006 	mov	ip, r6
   3e010:	e3a07000 	mov	r7, #0
   3e014:	e5961024 	ldr	r1, [r6, #36]	; 0x24
   3e018:	e5963020 	ldr	r3, [r6, #32]
   3e01c:	e0020a91 	mul	r2, r1, sl
   3e020:	e0030b93 	mul	r3, r3, fp
   3e024:	e5960008 	ldr	r0, [r6, #8]
   3e028:	e596e010 	ldr	lr, [r6, #16]
   3e02c:	e0280398 	mla	r8, r8, r3, r0
   3e030:	e022e299 	mla	r2, r9, r2, lr
   3e034:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3e038:	e5950bcc 	ldr	r0, [r5, #3020]	; 0xbcc
   3e03c:	e0228293 	mla	r2, r3, r2, r8
   3e040:	e0800002 	add	r0, r0, r2
   3e044:	e3510000 	cmp	r1, #0
   3e048:	0a000019 	beq	3e0b4 <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0x11c>
   3e04c:	e3a06000 	mov	r6, #0
   3e050:	e59c2018 	ldr	r2, [ip, #24]
   3e054:	e3520000 	cmp	r2, #0
   3e058:	0a000010 	beq	3e0a0 <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0x108>
   3e05c:	e1a02000 	mov	r2, r0
   3e060:	e3a0e000 	mov	lr, #0
   3e064:	e59c3020 	ldr	r3, [ip, #32]
   3e068:	e3530000 	cmp	r3, #0
   3e06c:	0a000006 	beq	3e08c <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xf4>
   3e070:	e3a03000 	mov	r3, #0
   3e074:	e4d41001 	ldrb	r1, [r4], #1
   3e078:	e2833001 	add	r3, r3, #1
   3e07c:	e4c21001 	strb	r1, [r2], #1
   3e080:	e59c1020 	ldr	r1, [ip, #32]
   3e084:	e1510003 	cmp	r1, r3
   3e088:	8afffff9 	bhi	3e074 <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xdc>
   3e08c:	e59c3018 	ldr	r3, [ip, #24]
   3e090:	e28ee001 	add	lr, lr, #1
   3e094:	e153000e 	cmp	r3, lr
   3e098:	8afffff1 	bhi	3e064 <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xcc>
   3e09c:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3e0a0:	e59c2024 	ldr	r2, [ip, #36]	; 0x24
   3e0a4:	e2866001 	add	r6, r6, #1
   3e0a8:	e1520006 	cmp	r2, r6
   3e0ac:	e0800003 	add	r0, r0, r3
   3e0b0:	8affffe6 	bhi	3e050 <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xb8>
   3e0b4:	e59c201c 	ldr	r2, [ip, #28]
   3e0b8:	e2877001 	add	r7, r7, #1
   3e0bc:	e1520007 	cmp	r2, r7
   3e0c0:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e0c4:	e59c1024 	ldr	r1, [ip, #36]	; 0x24
   3e0c8:	eaffffdd 	b	3e044 <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xac>

0003e0cc <DisplayFX::cursorRender()>:
   3e0cc:	e5901bd4 	ldr	r1, [r0, #3028]	; 0xbd4
   3e0d0:	e0813101 	add	r3, r1, r1, lsl #2
   3e0d4:	e0633203 	rsb	r3, r3, r3, lsl #4
   3e0d8:	e0802183 	add	r2, r0, r3, lsl #3
   3e0dc:	e5d2c004 	ldrb	ip, [r2, #4]
   3e0e0:	e35c0000 	cmp	ip, #0
   3e0e4:	012fff1e 	bxeq	lr
   3e0e8:	e92d4010 	push	{r4, lr}
   3e0ec:	e1a04000 	mov	r4, r0
   3e0f0:	e1a03183 	lsl	r3, r3, #3
   3e0f4:	e283c055 	add	ip, r3, #85	; 0x55
   3e0f8:	e24dd008 	sub	sp, sp, #8
   3e0fc:	e080c00c 	add	ip, r0, ip
   3e100:	e592304c 	ldr	r3, [r2, #76]	; 0x4c
   3e104:	e5922050 	ldr	r2, [r2, #80]	; 0x50
   3e108:	e58dc000 	str	ip, [sp]
   3e10c:	ebffffa1 	bl	3df98 <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)>
   3e110:	e3a0c05f 	mov	ip, #95	; 0x5f
   3e114:	e5941bd4 	ldr	r1, [r4, #3028]	; 0xbd4
   3e118:	e1a00004 	mov	r0, r4
   3e11c:	e0813101 	add	r3, r1, r1, lsl #2
   3e120:	e0633203 	rsb	r3, r3, r3, lsl #4
   3e124:	e0844183 	add	r4, r4, r3, lsl #3
   3e128:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   3e12c:	e5942050 	ldr	r2, [r4, #80]	; 0x50
   3e130:	e58dc000 	str	ip, [sp]
   3e134:	ebfffcfa 	bl	3d524 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)>
   3e138:	e28dd008 	add	sp, sp, #8
   3e13c:	e8bd8010 	pop	{r4, pc}

0003e140 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)>:
   3e140:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3e144:	e3530000 	cmp	r3, #0
   3e148:	012fff1e 	bxeq	lr
   3e14c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e150:	e1a0b000 	mov	fp, r0
   3e154:	e5900048 	ldr	r0, [r0, #72]	; 0x48
   3e158:	e1a09001 	mov	r9, r1
   3e15c:	e3500000 	cmp	r0, #0
   3e160:	e1a08002 	mov	r8, r2
   3e164:	e24dd024 	sub	sp, sp, #36	; 0x24
   3e168:	0a000002 	beq	3e178 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x38>
   3e16c:	e3a01004 	mov	r1, #4
   3e170:	ebffb3a2 	bl	2b000 <operator delete(void*, unsigned int)>
   3e174:	e59b3030 	ldr	r3, [fp, #48]	; 0x30
   3e178:	e3a01000 	mov	r1, #0
   3e17c:	e593000c 	ldr	r0, [r3, #12]
   3e180:	e5932014 	ldr	r2, [r3, #20]
   3e184:	e58b1048 	str	r1, [fp, #72]	; 0x48
   3e188:	e0020092 	mul	r2, r2, r0
   3e18c:	e1520001 	cmp	r2, r1
   3e190:	0a000092 	beq	3e3e0 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x2a0>
   3e194:	e5930010 	ldr	r0, [r3, #16]
   3e198:	e0802002 	add	r2, r0, r2
   3e19c:	e2422001 	sub	r2, r2, #1
   3e1a0:	e2400001 	sub	r0, r0, #1
   3e1a4:	e5f0c001 	ldrb	ip, [r0, #1]!
   3e1a8:	e151000c 	cmp	r1, ip
   3e1ac:	31a0100c 	movcc	r1, ip
   3e1b0:	e1520000 	cmp	r2, r0
   3e1b4:	1afffffa 	bne	3e1a4 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x64>
   3e1b8:	e3510000 	cmp	r1, #0
   3e1bc:	0a000087 	beq	3e3e0 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x2a0>
   3e1c0:	e5932008 	ldr	r2, [r3, #8]
   3e1c4:	e59b0020 	ldr	r0, [fp, #32]
   3e1c8:	e0000290 	mul	r0, r0, r2
   3e1cc:	e1a00180 	lsl	r0, r0, #3
   3e1d0:	e1a00120 	lsr	r0, r0, #2
   3e1d4:	e58b0034 	str	r0, [fp, #52]	; 0x34
   3e1d8:	e5932004 	ldr	r2, [r3, #4]
   3e1dc:	e0020092 	mul	r2, r2, r0
   3e1e0:	e58b2038 	str	r2, [fp, #56]	; 0x38
   3e1e4:	e5930014 	ldr	r0, [r3, #20]
   3e1e8:	e0000290 	mul	r0, r0, r2
   3e1ec:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   3e1f0:	83e00000 	mvnhi	r0, #0
   3e1f4:	91a00100 	lslls	r0, r0, #2
   3e1f8:	ebffb378 	bl	2afe0 <operator new[](unsigned int)>
   3e1fc:	e59b3030 	ldr	r3, [fp, #48]	; 0x30
   3e200:	e59b102c 	ldr	r1, [fp, #44]	; 0x2c
   3e204:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
   3e208:	e3710001 	cmn	r1, #1
   3e20c:	e58d3000 	str	r3, [sp]
   3e210:	e5933014 	ldr	r3, [r3, #20]
   3e214:	11a09001 	movne	r9, r1
   3e218:	e3720001 	cmn	r2, #1
   3e21c:	11a08002 	movne	r8, r2
   3e220:	e3530000 	cmp	r3, #0
   3e224:	e58d0018 	str	r0, [sp, #24]
   3e228:	e58b0048 	str	r0, [fp, #72]	; 0x48
   3e22c:	0a000065 	beq	3e3c8 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x288>
   3e230:	e3a02000 	mov	r2, #0
   3e234:	e1a0a002 	mov	sl, r2
   3e238:	e58d2014 	str	r2, [sp, #20]
   3e23c:	e59d2000 	ldr	r2, [sp]
   3e240:	e5921010 	ldr	r1, [r2, #16]
   3e244:	e5922004 	ldr	r2, [r2, #4]
   3e248:	e58d101c 	str	r1, [sp, #28]
   3e24c:	e59d1000 	ldr	r1, [sp]
   3e250:	e59d0014 	ldr	r0, [sp, #20]
   3e254:	e591100c 	ldr	r1, [r1, #12]
   3e258:	e59dc01c 	ldr	ip, [sp, #28]
   3e25c:	e3520000 	cmp	r2, #0
   3e260:	e021c091 	mla	r1, r1, r0, ip
   3e264:	e58d1008 	str	r1, [sp, #8]
   3e268:	0a000051 	beq	3e3b4 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x274>
   3e26c:	e1cb03d4 	ldrd	r0, [fp, #52]	; 0x34
   3e270:	e3a03000 	mov	r3, #0
   3e274:	e58d300c 	str	r3, [sp, #12]
   3e278:	e59d3014 	ldr	r3, [sp, #20]
   3e27c:	e59dc018 	ldr	ip, [sp, #24]
   3e280:	e0010391 	mul	r1, r1, r3
   3e284:	e59d3000 	ldr	r3, [sp]
   3e288:	e08c1101 	add	r1, ip, r1, lsl #2
   3e28c:	e58d1004 	str	r1, [sp, #4]
   3e290:	e5933000 	ldr	r3, [r3]
   3e294:	e1a01100 	lsl	r1, r0, #2
   3e298:	e58d1010 	str	r1, [sp, #16]
   3e29c:	e3a00001 	mov	r0, #1
   3e2a0:	e2831007 	add	r1, r3, #7
   3e2a4:	e2011007 	and	r1, r1, #7
   3e2a8:	e3530000 	cmp	r3, #0
   3e2ac:	e59dc004 	ldr	ip, [sp, #4]
   3e2b0:	e1a04110 	lsl	r4, r0, r1
   3e2b4:	0a00002e 	beq	3e374 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x234>
   3e2b8:	e3a02000 	mov	r2, #0
   3e2bc:	e1a07002 	mov	r7, r2
   3e2c0:	e59d5008 	ldr	r5, [sp, #8]
   3e2c4:	e59b6020 	ldr	r6, [fp, #32]
   3e2c8:	e3560000 	cmp	r6, #0
   3e2cc:	0a000020 	beq	3e354 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x214>
   3e2d0:	e3a00000 	mov	r0, #0
   3e2d4:	ea000001 	b	3e2e0 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x1a0>
   3e2d8:	e1500006 	cmp	r0, r6
   3e2dc:	2a00001a 	bcs	3e34c <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x20c>
   3e2e0:	e3520000 	cmp	r2, #0
   3e2e4:	0a000012 	beq	3e334 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x1f4>
   3e2e8:	e2623003 	rsb	r3, r2, #3
   3e2ec:	e1a01183 	lsl	r1, r3, #3
   3e2f0:	e59c3000 	ldr	r3, [ip]
   3e2f4:	e2822001 	add	r2, r2, #1
   3e2f8:	e5d5e000 	ldrb	lr, [r5]
   3e2fc:	e2800001 	add	r0, r0, #1
   3e300:	e11e0004 	tst	lr, r4
   3e304:	11a0e009 	movne	lr, r9
   3e308:	01a0e008 	moveq	lr, r8
   3e30c:	e183311e 	orr	r3, r3, lr, lsl r1
   3e310:	e3730001 	cmn	r3, #1
   3e314:	e58c3000 	str	r3, [ip]
   3e318:	03a03004 	moveq	r3, #4
   3e31c:	058b303c 	streq	r3, [fp, #60]	; 0x3c
   3e320:	e3520004 	cmp	r2, #4
   3e324:	1affffeb 	bne	3e2d8 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x198>
   3e328:	e1500006 	cmp	r0, r6
   3e32c:	e28cc004 	add	ip, ip, #4
   3e330:	2a000004 	bcs	3e348 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x208>
   3e334:	e3a02001 	mov	r2, #1
   3e338:	e3a01018 	mov	r1, #24
   3e33c:	e3a03000 	mov	r3, #0
   3e340:	e58ca000 	str	sl, [ip]
   3e344:	eaffffeb 	b	3e2f8 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x1b8>
   3e348:	e3a02000 	mov	r2, #0
   3e34c:	e59d3000 	ldr	r3, [sp]
   3e350:	e5933000 	ldr	r3, [r3]
   3e354:	e1b040a4 	lsrs	r4, r4, #1
   3e358:	e2877001 	add	r7, r7, #1
   3e35c:	03a04080 	moveq	r4, #128	; 0x80
   3e360:	02855001 	addeq	r5, r5, #1
   3e364:	e1530007 	cmp	r3, r7
   3e368:	8affffd6 	bhi	3e2c8 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x188>
   3e36c:	e59d2000 	ldr	r2, [sp]
   3e370:	e5922004 	ldr	r2, [r2, #4]
   3e374:	e59d100c 	ldr	r1, [sp, #12]
   3e378:	e59dc010 	ldr	ip, [sp, #16]
   3e37c:	e2810001 	add	r0, r1, #1
   3e380:	e58d000c 	str	r0, [sp, #12]
   3e384:	e1520000 	cmp	r2, r0
   3e388:	e59d0004 	ldr	r0, [sp, #4]
   3e38c:	e59d1000 	ldr	r1, [sp]
   3e390:	e080000c 	add	r0, r0, ip
   3e394:	e5911008 	ldr	r1, [r1, #8]
   3e398:	e58d0004 	str	r0, [sp, #4]
   3e39c:	e59d0008 	ldr	r0, [sp, #8]
   3e3a0:	e0801001 	add	r1, r0, r1
   3e3a4:	e58d1008 	str	r1, [sp, #8]
   3e3a8:	8affffbb 	bhi	3e29c <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x15c>
   3e3ac:	e59d3000 	ldr	r3, [sp]
   3e3b0:	e5933014 	ldr	r3, [r3, #20]
   3e3b4:	e59d1014 	ldr	r1, [sp, #20]
   3e3b8:	e2811001 	add	r1, r1, #1
   3e3bc:	e1530001 	cmp	r3, r1
   3e3c0:	e58d1014 	str	r1, [sp, #20]
   3e3c4:	8affffa0 	bhi	3e24c <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x10c>
   3e3c8:	e59b303c 	ldr	r3, [fp, #60]	; 0x3c
   3e3cc:	e3530000 	cmp	r3, #0
   3e3d0:	03a03002 	moveq	r3, #2
   3e3d4:	058b303c 	streq	r3, [fp, #60]	; 0x3c
   3e3d8:	e28dd024 	add	sp, sp, #36	; 0x24
   3e3dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e3e0:	e3a02001 	mov	r2, #1
   3e3e4:	e58b203c 	str	r2, [fp, #60]	; 0x3c
   3e3e8:	eaffff74 	b	3e1c0 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x80>

0003e3ec <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]>:
   3e3ec:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e3f0:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
   3e3f4:	e292e001 	adds	lr, r2, #1
   3e3f8:	13a0e001 	movne	lr, #1
   3e3fc:	e3780001 	cmn	r8, #1
   3e400:	13a0e000 	movne	lr, #0
   3e404:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
   3e408:	e59f428c 	ldr	r4, [pc, #652]	; 3e69c <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x2b0>
   3e40c:	e35c0000 	cmp	ip, #0
   3e410:	01a0c004 	moveq	ip, r4
   3e414:	e35e0000 	cmp	lr, #0
   3e418:	e1a05000 	mov	r5, r0
   3e41c:	e1a07001 	mov	r7, r1
   3e420:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
   3e424:	e59de030 	ldr	lr, [sp, #48]	; 0x30
   3e428:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
   3e42c:	e59da038 	ldr	sl, [sp, #56]	; 0x38
   3e430:	e59d903c 	ldr	r9, [sp, #60]	; 0x3c
   3e434:	e59d604c 	ldr	r6, [sp, #76]	; 0x4c
   3e438:	e59d4050 	ldr	r4, [sp, #80]	; 0x50
   3e43c:	0a00008b 	beq	3e670 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x284>
   3e440:	e5958bbc 	ldr	r8, [r5, #3004]	; 0xbbc
   3e444:	e0811101 	add	r1, r1, r1, lsl #2
   3e448:	e0488086 	sub	r8, r8, r6, lsl #1
   3e44c:	e0611201 	rsb	r1, r1, r1, lsl #4
   3e450:	e0488002 	sub	r8, r8, r2
   3e454:	e0851181 	add	r1, r5, r1, lsl #3
   3e458:	e581800c 	str	r8, [r1, #12]
   3e45c:	e1a08107 	lsl	r8, r7, #2
   3e460:	e37b0001 	cmn	fp, #1
   3e464:	0595bbc0 	ldreq	fp, [r5, #3008]	; 0xbc0
   3e468:	100b0b99 	mulne	fp, r9, fp
   3e46c:	e0881007 	add	r1, r8, r7
   3e470:	004bb003 	subeq	fp, fp, r3
   3e474:	e0611201 	rsb	r1, r1, r1, lsl #4
   3e478:	e0851181 	add	r1, r5, r1, lsl #3
   3e47c:	004bb086 	subeq	fp, fp, r6, lsl #1
   3e480:	e581b014 	str	fp, [r1, #20]
   3e484:	e3720001 	cmn	r2, #1
   3e488:	05952bbc 	ldreq	r2, [r5, #3004]	; 0xbbc
   3e48c:	0591100c 	ldreq	r1, [r1, #12]
   3e490:	1022629a 	mlane	r2, sl, r2, r6
   3e494:	e0236399 	mla	r3, r9, r3, r6
   3e498:	00422001 	subeq	r2, r2, r1
   3e49c:	e0881007 	add	r1, r8, r7
   3e4a0:	e0611201 	rsb	r1, r1, r1, lsl #4
   3e4a4:	01a020a2 	lsreq	r2, r2, #1
   3e4a8:	e0851181 	add	r1, r5, r1, lsl #3
   3e4ac:	e5813010 	str	r3, [r1, #16]
   3e4b0:	e5812008 	str	r2, [r1, #8]
   3e4b4:	e37e0001 	cmn	lr, #1
   3e4b8:	e0883007 	add	r3, r8, r7
   3e4bc:	059ce000 	ldreq	lr, [ip]
   3e4c0:	e0633203 	rsb	r3, r3, r3, lsl #4
   3e4c4:	e088b007 	add	fp, r8, r7
   3e4c8:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
   3e4cc:	e0853183 	add	r3, r5, r3, lsl #3
   3e4d0:	e06bb20b 	rsb	fp, fp, fp, lsl #4
   3e4d4:	e583e018 	str	lr, [r3, #24]
   3e4d8:	e085b18b 	add	fp, r5, fp, lsl #3
   3e4dc:	e3700001 	cmn	r0, #1
   3e4e0:	059c0004 	ldreq	r0, [ip, #4]
   3e4e4:	e58b202c 	str	r2, [fp, #44]	; 0x2c
   3e4e8:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   3e4ec:	e2853ebd 	add	r3, r5, #3024	; 0xbd0
   3e4f0:	e58b001c 	str	r0, [fp, #28]
   3e4f4:	e58b2028 	str	r2, [fp, #40]	; 0x28
   3e4f8:	e1a0000b 	mov	r0, fp
   3e4fc:	e1d320d0 	ldrsb	r2, [r3]
   3e500:	e1d310d1 	ldrsb	r1, [r3, #1]
   3e504:	e58ba020 	str	sl, [fp, #32]
   3e508:	e58b9024 	str	r9, [fp, #36]	; 0x24
   3e50c:	e58bc030 	str	ip, [fp, #48]	; 0x30
   3e510:	ebffff0a 	bl	3e140 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)>
   3e514:	e3740001 	cmn	r4, #1
   3e518:	13560000 	cmpne	r6, #0
   3e51c:	da00004d 	ble	3e658 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x26c>
   3e520:	e3a00000 	mov	r0, #0
   3e524:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3e528:	e6ef4074 	uxtb	r4, r4
   3e52c:	e1a0e086 	lsl	lr, r6, #1
   3e530:	e59b2010 	ldr	r2, [fp, #16]
   3e534:	e59ba008 	ldr	sl, [fp, #8]
   3e538:	e0422006 	sub	r2, r2, r6
   3e53c:	e082c000 	add	ip, r2, r0
   3e540:	e04aa006 	sub	sl, sl, r6
   3e544:	e02cac93 	mla	ip, r3, ip, sl
   3e548:	e59b900c 	ldr	r9, [fp, #12]
   3e54c:	e5951bcc 	ldr	r1, [r5, #3020]	; 0xbcc
   3e550:	e09e9009 	adds	r9, lr, r9
   3e554:	e081c00c 	add	ip, r1, ip
   3e558:	0a00001b 	beq	3e5cc <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x1e0>
   3e55c:	e08c3009 	add	r3, ip, r9
   3e560:	e4cc4001 	strb	r4, [ip], #1
   3e564:	e15c0003 	cmp	ip, r3
   3e568:	1afffffc 	bne	3e560 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x174>
   3e56c:	e59b9010 	ldr	r9, [fp, #16]
   3e570:	e59b2014 	ldr	r2, [fp, #20]
   3e574:	e59ba008 	ldr	sl, [fp, #8]
   3e578:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3e57c:	e0892002 	add	r2, r9, r2
   3e580:	e0822000 	add	r2, r2, r0
   3e584:	e04aa006 	sub	sl, sl, r6
   3e588:	e022a293 	mla	r2, r3, r2, sl
   3e58c:	e59bc00c 	ldr	ip, [fp, #12]
   3e590:	e5951bcc 	ldr	r1, [r5, #3020]	; 0xbcc
   3e594:	e09ec00c 	adds	ip, lr, ip
   3e598:	e0812002 	add	r2, r1, r2
   3e59c:	00492006 	subeq	r2, r9, r6
   3e5a0:	0a000009 	beq	3e5cc <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x1e0>
   3e5a4:	e082300c 	add	r3, r2, ip
   3e5a8:	e4c24001 	strb	r4, [r2], #1
   3e5ac:	e1520003 	cmp	r2, r3
   3e5b0:	1afffffc 	bne	3e5a8 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x1bc>
   3e5b4:	e59b2010 	ldr	r2, [fp, #16]
   3e5b8:	e59ba008 	ldr	sl, [fp, #8]
   3e5bc:	e5951bcc 	ldr	r1, [r5, #3020]	; 0xbcc
   3e5c0:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3e5c4:	e0422006 	sub	r2, r2, r6
   3e5c8:	e04aa006 	sub	sl, sl, r6
   3e5cc:	e080a00a 	add	sl, r0, sl
   3e5d0:	e022a293 	mla	r2, r3, r2, sl
   3e5d4:	e59bc014 	ldr	ip, [fp, #20]
   3e5d8:	e0812002 	add	r2, r1, r2
   3e5dc:	e09ec00c 	adds	ip, lr, ip
   3e5e0:	13a01000 	movne	r1, #0
   3e5e4:	0a000018 	beq	3e64c <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x260>
   3e5e8:	e5c24000 	strb	r4, [r2]
   3e5ec:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3e5f0:	e2811001 	add	r1, r1, #1
   3e5f4:	e15c0001 	cmp	ip, r1
   3e5f8:	e0822003 	add	r2, r2, r3
   3e5fc:	1afffff9 	bne	3e5e8 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x1fc>
   3e600:	e59bc00c 	ldr	ip, [fp, #12]
   3e604:	e59b1008 	ldr	r1, [fp, #8]
   3e608:	e59b2010 	ldr	r2, [fp, #16]
   3e60c:	e081100c 	add	r1, r1, ip
   3e610:	e0422006 	sub	r2, r2, r6
   3e614:	e0811000 	add	r1, r1, r0
   3e618:	e0211293 	mla	r1, r3, r2, r1
   3e61c:	e59bc014 	ldr	ip, [fp, #20]
   3e620:	e5952bcc 	ldr	r2, [r5, #3020]	; 0xbcc
   3e624:	e09ec00c 	adds	ip, lr, ip
   3e628:	e0822001 	add	r2, r2, r1
   3e62c:	0a000006 	beq	3e64c <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x260>
   3e630:	e3a01000 	mov	r1, #0
   3e634:	e5c24000 	strb	r4, [r2]
   3e638:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3e63c:	e2811001 	add	r1, r1, #1
   3e640:	e15c0001 	cmp	ip, r1
   3e644:	e0822003 	add	r2, r2, r3
   3e648:	1afffff9 	bne	3e634 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x248>
   3e64c:	e2800001 	add	r0, r0, #1
   3e650:	e1560000 	cmp	r6, r0
   3e654:	caffffb5 	bgt	3e530 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x144>
   3e658:	e3a03001 	mov	r3, #1
   3e65c:	e0887007 	add	r7, r8, r7
   3e660:	e0677207 	rsb	r7, r7, r7, lsl #4
   3e664:	e0855187 	add	r5, r5, r7, lsl #3
   3e668:	e5c53004 	strb	r3, [r5, #4]
   3e66c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e670:	e3780001 	cmn	r8, #1
   3e674:	1008089a 	mulne	r8, sl, r8
   3e678:	00811101 	addeq	r1, r1, r1, lsl #2
   3e67c:	10871107 	addne	r1, r7, r7, lsl #2
   3e680:	05958bbc 	ldreq	r8, [r5, #3004]	; 0xbbc
   3e684:	00611201 	rsbeq	r1, r1, r1, lsl #4
   3e688:	10611201 	rsbne	r1, r1, r1, lsl #4
   3e68c:	e0851181 	add	r1, r5, r1, lsl #3
   3e690:	e581800c 	str	r8, [r1, #12]
   3e694:	e1a08107 	lsl	r8, r7, #2
   3e698:	eaffff70 	b	3e460 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x74>
   3e69c:	0004d9fc 	.word	0x0004d9fc

0003e6a0 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>:
   3e6a0:	e3510004 	cmp	r1, #4
   3e6a4:	812fff1e 	bxhi	lr
   3e6a8:	eaffff4f 	b	3e3ec <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]>

0003e6ac <DisplayFX::init(unsigned long, unsigned long)>:
   3e6ac:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3e6b0:	e1a06000 	mov	r6, r0
   3e6b4:	e24dd034 	sub	sp, sp, #52	; 0x34
   3e6b8:	e3a00094 	mov	r0, #148	; 0x94
   3e6bc:	e1a07001 	mov	r7, r1
   3e6c0:	e1a08002 	mov	r8, r2
   3e6c4:	ebffb23f 	bl	2afc8 <operator new(unsigned int)>
   3e6c8:	e3a04000 	mov	r4, #0
   3e6cc:	e1a05000 	mov	r5, r0
   3e6d0:	e3a03008 	mov	r3, #8
   3e6d4:	e58d4004 	str	r4, [sp, #4]
   3e6d8:	e58d4000 	str	r4, [sp]
   3e6dc:	e1a02008 	mov	r2, r8
   3e6e0:	e1a01007 	mov	r1, r7
   3e6e4:	eb000270 	bl	3f0ac <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   3e6e8:	e1a09004 	mov	r9, r4
   3e6ec:	e1a03004 	mov	r3, r4
   3e6f0:	e5865bb8 	str	r5, [r6, #3000]	; 0xbb8
   3e6f4:	e59f413c 	ldr	r4, [pc, #316]	; 3e838 <DisplayFX::init(unsigned long, unsigned long)+0x18c>
   3e6f8:	ea000001 	b	3e704 <DisplayFX::init(unsigned long, unsigned long)+0x58>
   3e6fc:	e5965bb8 	ldr	r5, [r6, #3000]	; 0xbb8
   3e700:	e5b43004 	ldr	r3, [r4, #4]!
   3e704:	e1a02803 	lsl	r2, r3, #16
   3e708:	e1a01403 	lsl	r1, r3, #8
   3e70c:	e20228ff 	and	r2, r2, #16711680	; 0xff0000
   3e710:	e1822c21 	orr	r2, r2, r1, lsr #24
   3e714:	e2033cff 	and	r3, r3, #65280	; 0xff00
   3e718:	e6ef1079 	uxtb	r1, r9
   3e71c:	e1a00005 	mov	r0, r5
   3e720:	e1822003 	orr	r2, r2, r3
   3e724:	e2899001 	add	r9, r9, #1
   3e728:	eb0002d0 	bl	3f270 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>
   3e72c:	e3590c01 	cmp	r9, #256	; 0x100
   3e730:	1afffff1 	bne	3e6fc <DisplayFX::init(unsigned long, unsigned long)+0x50>
   3e734:	e5960bb8 	ldr	r0, [r6, #3000]	; 0xbb8
   3e738:	e3500000 	cmp	r0, #0
   3e73c:	0a000002 	beq	3e74c <DisplayFX::init(unsigned long, unsigned long)+0xa0>
   3e740:	eb0002d8 	bl	3f2a8 <CBcmFrameBuffer::Initialize()>
   3e744:	e2504000 	subs	r4, r0, #0
   3e748:	1a000003 	bne	3e75c <DisplayFX::init(unsigned long, unsigned long)+0xb0>
   3e74c:	e3a04000 	mov	r4, #0
   3e750:	e1a00004 	mov	r0, r4
   3e754:	e28dd034 	add	sp, sp, #52	; 0x34
   3e758:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3e75c:	e5960bb8 	ldr	r0, [r6, #3000]	; 0xbb8
   3e760:	eb00030b 	bl	3f394 <CBcmFrameBuffer::GetDepth() const>
   3e764:	e3500008 	cmp	r0, #8
   3e768:	1afffff7 	bne	3e74c <DisplayFX::init(unsigned long, unsigned long)+0xa0>
   3e76c:	e5960bb8 	ldr	r0, [r6, #3000]	; 0xbb8
   3e770:	eb000309 	bl	3f39c <CBcmFrameBuffer::GetBuffer() const>
   3e774:	e5860bcc 	str	r0, [r6, #3020]	; 0xbcc
   3e778:	e5960bb8 	ldr	r0, [r6, #3000]	; 0xbb8
   3e77c:	eb000308 	bl	3f3a4 <CBcmFrameBuffer::GetSize() const>
   3e780:	e5860bc8 	str	r0, [r6, #3016]	; 0xbc8
   3e784:	e5960bb8 	ldr	r0, [r6, #3000]	; 0xbb8
   3e788:	eb0002ff 	bl	3f38c <CBcmFrameBuffer::GetPitch() const>
   3e78c:	e5860bc4 	str	r0, [r6, #3012]	; 0xbc4
   3e790:	e5960bb8 	ldr	r0, [r6, #3000]	; 0xbb8
   3e794:	eb0002f4 	bl	3f36c <CBcmFrameBuffer::GetWidth() const>
   3e798:	e5860bbc 	str	r0, [r6, #3004]	; 0xbbc
   3e79c:	e5960bb8 	ldr	r0, [r6, #3000]	; 0xbb8
   3e7a0:	eb0002f3 	bl	3f374 <CBcmFrameBuffer::GetHeight() const>
   3e7a4:	e5963bc4 	ldr	r3, [r6, #3012]	; 0xbc4
   3e7a8:	e5860bc0 	str	r0, [r6, #3008]	; 0xbc0
   3e7ac:	e3130003 	tst	r3, #3
   3e7b0:	1affffe5 	bne	3e74c <DisplayFX::init(unsigned long, unsigned long)+0xa0>
   3e7b4:	e5963bcc 	ldr	r3, [r6, #3020]	; 0xbcc
   3e7b8:	e5961bc8 	ldr	r1, [r6, #3016]	; 0xbc8
   3e7bc:	e0831001 	add	r1, r3, r1
   3e7c0:	e1530001 	cmp	r3, r1
   3e7c4:	2a000003 	bcs	3e7d8 <DisplayFX::init(unsigned long, unsigned long)+0x12c>
   3e7c8:	e5d62bd0 	ldrb	r2, [r6, #3024]	; 0xbd0
   3e7cc:	e4c32001 	strb	r2, [r3], #1
   3e7d0:	e1510003 	cmp	r1, r3
   3e7d4:	1afffffb 	bne	3e7c8 <DisplayFX::init(unsigned long, unsigned long)+0x11c>
   3e7d8:	e3a05000 	mov	r5, #0
   3e7dc:	e3e00000 	mvn	r0, #0
   3e7e0:	e3a0c002 	mov	ip, #2
   3e7e4:	e58d0020 	str	r0, [sp, #32]
   3e7e8:	e58d001c 	str	r0, [sp, #28]
   3e7ec:	e58d000c 	str	r0, [sp, #12]
   3e7f0:	e58d0008 	str	r0, [sp, #8]
   3e7f4:	e1a03005 	mov	r3, r5
   3e7f8:	e1a02005 	mov	r2, r5
   3e7fc:	e1a01005 	mov	r1, r5
   3e800:	e1a00006 	mov	r0, r6
   3e804:	e88d0180 	stm	sp, {r7, r8}
   3e808:	e58d5028 	str	r5, [sp, #40]	; 0x28
   3e80c:	e58d5024 	str	r5, [sp, #36]	; 0x24
   3e810:	e58d5018 	str	r5, [sp, #24]
   3e814:	e58dc014 	str	ip, [sp, #20]
   3e818:	e58dc010 	str	ip, [sp, #16]
   3e81c:	ebfffef2 	bl	3e3ec <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]>
   3e820:	e5c65004 	strb	r5, [r6, #4]
   3e824:	e5c6525c 	strb	r5, [r6, #604]	; 0x25c
   3e828:	e5c654b4 	strb	r5, [r6, #1204]	; 0x4b4
   3e82c:	e5c6570c 	strb	r5, [r6, #1804]	; 0x70c
   3e830:	e5c65964 	strb	r5, [r6, #2404]	; 0x964
   3e834:	eaffffc5 	b	3e750 <DisplayFX::init(unsigned long, unsigned long)+0xa4>
   3e838:	00049904 	.word	0x00049904

0003e83c <DisplayWindow::debug()>:
   3e83c:	e92d4010 	push	{r4, lr}
   3e840:	e1a04000 	mov	r4, r0
   3e844:	e594c028 	ldr	ip, [r4, #40]	; 0x28
   3e848:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
   3e84c:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   3e850:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   3e854:	e24dd018 	sub	sp, sp, #24
   3e858:	e58dc00c 	str	ip, [sp, #12]
   3e85c:	e58d1008 	str	r1, [sp, #8]
   3e860:	e58d2004 	str	r2, [sp, #4]
   3e864:	e58d3000 	str	r3, [sp]
   3e868:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   3e86c:	e3a01004 	mov	r1, #4
   3e870:	e59f006c 	ldr	r0, [pc, #108]	; 3e8e4 <DisplayWindow::debug()+0xa8>
   3e874:	e59f206c 	ldr	r2, [pc, #108]	; 3e8e8 <DisplayWindow::debug()+0xac>
   3e878:	ebffc162 	bl	2ee08 <LogWrite>
   3e87c:	e5941048 	ldr	r1, [r4, #72]	; 0x48
   3e880:	e59f005c 	ldr	r0, [pc, #92]	; 3e8e4 <DisplayWindow::debug()+0xa8>
   3e884:	e2812a02 	add	r2, r1, #8192	; 0x2000
   3e888:	e592c33c 	ldr	ip, [r2, #828]	; 0x33c
   3e88c:	e5913000 	ldr	r3, [r1]
   3e890:	e58dc010 	str	ip, [sp, #16]
   3e894:	e592c338 	ldr	ip, [r2, #824]	; 0x338
   3e898:	e58dc00c 	str	ip, [sp, #12]
   3e89c:	e592c0c4 	ldr	ip, [r2, #196]	; 0xc4
   3e8a0:	e59f2044 	ldr	r2, [pc, #68]	; 3e8ec <DisplayWindow::debug()+0xb0>
   3e8a4:	e58dc008 	str	ip, [sp, #8]
   3e8a8:	e591c098 	ldr	ip, [r1, #152]	; 0x98
   3e8ac:	e58dc004 	str	ip, [sp, #4]
   3e8b0:	e591c004 	ldr	ip, [r1, #4]
   3e8b4:	e3a01004 	mov	r1, #4
   3e8b8:	e58dc000 	str	ip, [sp]
   3e8bc:	ebffc151 	bl	2ee08 <LogWrite>
   3e8c0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   3e8c4:	e3a01004 	mov	r1, #4
   3e8c8:	e58d3000 	str	r3, [sp]
   3e8cc:	e59f0010 	ldr	r0, [pc, #16]	; 3e8e4 <DisplayWindow::debug()+0xa8>
   3e8d0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   3e8d4:	e59f2014 	ldr	r2, [pc, #20]	; 3e8f0 <DisplayWindow::debug()+0xb4>
   3e8d8:	ebffc14a 	bl	2ee08 <LogWrite>
   3e8dc:	e28dd018 	add	sp, sp, #24
   3e8e0:	e8bd8010 	pop	{r4, pc}
   3e8e4:	000498c8 	.word	0x000498c8
   3e8e8:	00049890 	.word	0x00049890
   3e8ec:	000498d4 	.word	0x000498d4
   3e8f0:	000498e8 	.word	0x000498e8

0003e8f4 <DisplayWindow::~DisplayWindow()>:
   3e8f4:	e92d4010 	push	{r4, lr}
   3e8f8:	e1a04000 	mov	r4, r0
   3e8fc:	e5900048 	ldr	r0, [r0, #72]	; 0x48
   3e900:	e59f3018 	ldr	r3, [pc, #24]	; 3e920 <DisplayWindow::~DisplayWindow()+0x2c>
   3e904:	e3500000 	cmp	r0, #0
   3e908:	e5843000 	str	r3, [r4]
   3e90c:	0a000001 	beq	3e918 <DisplayWindow::~DisplayWindow()+0x24>
   3e910:	e3a01004 	mov	r1, #4
   3e914:	ebffb1b9 	bl	2b000 <operator delete(void*, unsigned int)>
   3e918:	e1a00004 	mov	r0, r4
   3e91c:	e8bd8010 	pop	{r4, pc}
   3e920:	000498fc 	.word	0x000498fc

0003e924 <DisplayWindow::~DisplayWindow()>:
   3e924:	e92d4010 	push	{r4, lr}
   3e928:	e1a04000 	mov	r4, r0
   3e92c:	e5900048 	ldr	r0, [r0, #72]	; 0x48
   3e930:	e59f3024 	ldr	r3, [pc, #36]	; 3e95c <DisplayWindow::~DisplayWindow()+0x38>
   3e934:	e3500000 	cmp	r0, #0
   3e938:	e5843000 	str	r3, [r4]
   3e93c:	0a000001 	beq	3e948 <DisplayWindow::~DisplayWindow()+0x24>
   3e940:	e3a01004 	mov	r1, #4
   3e944:	ebffb1ad 	bl	2b000 <operator delete(void*, unsigned int)>
   3e948:	e1a00004 	mov	r0, r4
   3e94c:	e3a01f96 	mov	r1, #600	; 0x258
   3e950:	ebffb1aa 	bl	2b000 <operator delete(void*, unsigned int)>
   3e954:	e1a00004 	mov	r0, r4
   3e958:	e8bd8010 	pop	{r4, pc}
   3e95c:	000498fc 	.word	0x000498fc

0003e960 <__udivsi3>:
   3e960:	e2512001 	subs	r2, r1, #1
   3e964:	012fff1e 	bxeq	lr
   3e968:	3a000074 	bcc	3eb40 <__udivsi3+0x1e0>
   3e96c:	e1500001 	cmp	r0, r1
   3e970:	9a00006b 	bls	3eb24 <__udivsi3+0x1c4>
   3e974:	e1110002 	tst	r1, r2
   3e978:	0a00006c 	beq	3eb30 <__udivsi3+0x1d0>
   3e97c:	e16f3f10 	clz	r3, r0
   3e980:	e16f2f11 	clz	r2, r1
   3e984:	e0423003 	sub	r3, r2, r3
   3e988:	e273301f 	rsbs	r3, r3, #31
   3e98c:	10833083 	addne	r3, r3, r3, lsl #1
   3e990:	e3a02000 	mov	r2, #0
   3e994:	108ff103 	addne	pc, pc, r3, lsl #2
   3e998:	e1a00000 	nop			; (mov r0, r0)
   3e99c:	e1500f81 	cmp	r0, r1, lsl #31
   3e9a0:	e0a22002 	adc	r2, r2, r2
   3e9a4:	20400f81 	subcs	r0, r0, r1, lsl #31
   3e9a8:	e1500f01 	cmp	r0, r1, lsl #30
   3e9ac:	e0a22002 	adc	r2, r2, r2
   3e9b0:	20400f01 	subcs	r0, r0, r1, lsl #30
   3e9b4:	e1500e81 	cmp	r0, r1, lsl #29
   3e9b8:	e0a22002 	adc	r2, r2, r2
   3e9bc:	20400e81 	subcs	r0, r0, r1, lsl #29
   3e9c0:	e1500e01 	cmp	r0, r1, lsl #28
   3e9c4:	e0a22002 	adc	r2, r2, r2
   3e9c8:	20400e01 	subcs	r0, r0, r1, lsl #28
   3e9cc:	e1500d81 	cmp	r0, r1, lsl #27
   3e9d0:	e0a22002 	adc	r2, r2, r2
   3e9d4:	20400d81 	subcs	r0, r0, r1, lsl #27
   3e9d8:	e1500d01 	cmp	r0, r1, lsl #26
   3e9dc:	e0a22002 	adc	r2, r2, r2
   3e9e0:	20400d01 	subcs	r0, r0, r1, lsl #26
   3e9e4:	e1500c81 	cmp	r0, r1, lsl #25
   3e9e8:	e0a22002 	adc	r2, r2, r2
   3e9ec:	20400c81 	subcs	r0, r0, r1, lsl #25
   3e9f0:	e1500c01 	cmp	r0, r1, lsl #24
   3e9f4:	e0a22002 	adc	r2, r2, r2
   3e9f8:	20400c01 	subcs	r0, r0, r1, lsl #24
   3e9fc:	e1500b81 	cmp	r0, r1, lsl #23
   3ea00:	e0a22002 	adc	r2, r2, r2
   3ea04:	20400b81 	subcs	r0, r0, r1, lsl #23
   3ea08:	e1500b01 	cmp	r0, r1, lsl #22
   3ea0c:	e0a22002 	adc	r2, r2, r2
   3ea10:	20400b01 	subcs	r0, r0, r1, lsl #22
   3ea14:	e1500a81 	cmp	r0, r1, lsl #21
   3ea18:	e0a22002 	adc	r2, r2, r2
   3ea1c:	20400a81 	subcs	r0, r0, r1, lsl #21
   3ea20:	e1500a01 	cmp	r0, r1, lsl #20
   3ea24:	e0a22002 	adc	r2, r2, r2
   3ea28:	20400a01 	subcs	r0, r0, r1, lsl #20
   3ea2c:	e1500981 	cmp	r0, r1, lsl #19
   3ea30:	e0a22002 	adc	r2, r2, r2
   3ea34:	20400981 	subcs	r0, r0, r1, lsl #19
   3ea38:	e1500901 	cmp	r0, r1, lsl #18
   3ea3c:	e0a22002 	adc	r2, r2, r2
   3ea40:	20400901 	subcs	r0, r0, r1, lsl #18
   3ea44:	e1500881 	cmp	r0, r1, lsl #17
   3ea48:	e0a22002 	adc	r2, r2, r2
   3ea4c:	20400881 	subcs	r0, r0, r1, lsl #17
   3ea50:	e1500801 	cmp	r0, r1, lsl #16
   3ea54:	e0a22002 	adc	r2, r2, r2
   3ea58:	20400801 	subcs	r0, r0, r1, lsl #16
   3ea5c:	e1500781 	cmp	r0, r1, lsl #15
   3ea60:	e0a22002 	adc	r2, r2, r2
   3ea64:	20400781 	subcs	r0, r0, r1, lsl #15
   3ea68:	e1500701 	cmp	r0, r1, lsl #14
   3ea6c:	e0a22002 	adc	r2, r2, r2
   3ea70:	20400701 	subcs	r0, r0, r1, lsl #14
   3ea74:	e1500681 	cmp	r0, r1, lsl #13
   3ea78:	e0a22002 	adc	r2, r2, r2
   3ea7c:	20400681 	subcs	r0, r0, r1, lsl #13
   3ea80:	e1500601 	cmp	r0, r1, lsl #12
   3ea84:	e0a22002 	adc	r2, r2, r2
   3ea88:	20400601 	subcs	r0, r0, r1, lsl #12
   3ea8c:	e1500581 	cmp	r0, r1, lsl #11
   3ea90:	e0a22002 	adc	r2, r2, r2
   3ea94:	20400581 	subcs	r0, r0, r1, lsl #11
   3ea98:	e1500501 	cmp	r0, r1, lsl #10
   3ea9c:	e0a22002 	adc	r2, r2, r2
   3eaa0:	20400501 	subcs	r0, r0, r1, lsl #10
   3eaa4:	e1500481 	cmp	r0, r1, lsl #9
   3eaa8:	e0a22002 	adc	r2, r2, r2
   3eaac:	20400481 	subcs	r0, r0, r1, lsl #9
   3eab0:	e1500401 	cmp	r0, r1, lsl #8
   3eab4:	e0a22002 	adc	r2, r2, r2
   3eab8:	20400401 	subcs	r0, r0, r1, lsl #8
   3eabc:	e1500381 	cmp	r0, r1, lsl #7
   3eac0:	e0a22002 	adc	r2, r2, r2
   3eac4:	20400381 	subcs	r0, r0, r1, lsl #7
   3eac8:	e1500301 	cmp	r0, r1, lsl #6
   3eacc:	e0a22002 	adc	r2, r2, r2
   3ead0:	20400301 	subcs	r0, r0, r1, lsl #6
   3ead4:	e1500281 	cmp	r0, r1, lsl #5
   3ead8:	e0a22002 	adc	r2, r2, r2
   3eadc:	20400281 	subcs	r0, r0, r1, lsl #5
   3eae0:	e1500201 	cmp	r0, r1, lsl #4
   3eae4:	e0a22002 	adc	r2, r2, r2
   3eae8:	20400201 	subcs	r0, r0, r1, lsl #4
   3eaec:	e1500181 	cmp	r0, r1, lsl #3
   3eaf0:	e0a22002 	adc	r2, r2, r2
   3eaf4:	20400181 	subcs	r0, r0, r1, lsl #3
   3eaf8:	e1500101 	cmp	r0, r1, lsl #2
   3eafc:	e0a22002 	adc	r2, r2, r2
   3eb00:	20400101 	subcs	r0, r0, r1, lsl #2
   3eb04:	e1500081 	cmp	r0, r1, lsl #1
   3eb08:	e0a22002 	adc	r2, r2, r2
   3eb0c:	20400081 	subcs	r0, r0, r1, lsl #1
   3eb10:	e1500001 	cmp	r0, r1
   3eb14:	e0a22002 	adc	r2, r2, r2
   3eb18:	20400001 	subcs	r0, r0, r1
   3eb1c:	e1a00002 	mov	r0, r2
   3eb20:	e12fff1e 	bx	lr
   3eb24:	03a00001 	moveq	r0, #1
   3eb28:	13a00000 	movne	r0, #0
   3eb2c:	e12fff1e 	bx	lr
   3eb30:	e16f2f11 	clz	r2, r1
   3eb34:	e262201f 	rsb	r2, r2, #31
   3eb38:	e1a00230 	lsr	r0, r0, r2
   3eb3c:	e12fff1e 	bx	lr
   3eb40:	e3500000 	cmp	r0, #0
   3eb44:	13e00000 	mvnne	r0, #0
   3eb48:	ea000097 	b	3edac <__aeabi_idiv0>

0003eb4c <__aeabi_uidivmod>:
   3eb4c:	e3510000 	cmp	r1, #0
   3eb50:	0afffffa 	beq	3eb40 <__udivsi3+0x1e0>
   3eb54:	e92d4003 	push	{r0, r1, lr}
   3eb58:	ebffff80 	bl	3e960 <__udivsi3>
   3eb5c:	e8bd4006 	pop	{r1, r2, lr}
   3eb60:	e0030092 	mul	r3, r2, r0
   3eb64:	e0411003 	sub	r1, r1, r3
   3eb68:	e12fff1e 	bx	lr

0003eb6c <__divsi3>:
   3eb6c:	e3510000 	cmp	r1, #0
   3eb70:	0a000081 	beq	3ed7c <.divsi3_skip_div0_test+0x208>

0003eb74 <.divsi3_skip_div0_test>:
   3eb74:	e020c001 	eor	ip, r0, r1
   3eb78:	42611000 	rsbmi	r1, r1, #0
   3eb7c:	e2512001 	subs	r2, r1, #1
   3eb80:	0a000070 	beq	3ed48 <.divsi3_skip_div0_test+0x1d4>
   3eb84:	e1b03000 	movs	r3, r0
   3eb88:	42603000 	rsbmi	r3, r0, #0
   3eb8c:	e1530001 	cmp	r3, r1
   3eb90:	9a00006f 	bls	3ed54 <.divsi3_skip_div0_test+0x1e0>
   3eb94:	e1110002 	tst	r1, r2
   3eb98:	0a000071 	beq	3ed64 <.divsi3_skip_div0_test+0x1f0>
   3eb9c:	e16f2f13 	clz	r2, r3
   3eba0:	e16f0f11 	clz	r0, r1
   3eba4:	e0402002 	sub	r2, r0, r2
   3eba8:	e272201f 	rsbs	r2, r2, #31
   3ebac:	10822082 	addne	r2, r2, r2, lsl #1
   3ebb0:	e3a00000 	mov	r0, #0
   3ebb4:	108ff102 	addne	pc, pc, r2, lsl #2
   3ebb8:	e1a00000 	nop			; (mov r0, r0)
   3ebbc:	e1530f81 	cmp	r3, r1, lsl #31
   3ebc0:	e0a00000 	adc	r0, r0, r0
   3ebc4:	20433f81 	subcs	r3, r3, r1, lsl #31
   3ebc8:	e1530f01 	cmp	r3, r1, lsl #30
   3ebcc:	e0a00000 	adc	r0, r0, r0
   3ebd0:	20433f01 	subcs	r3, r3, r1, lsl #30
   3ebd4:	e1530e81 	cmp	r3, r1, lsl #29
   3ebd8:	e0a00000 	adc	r0, r0, r0
   3ebdc:	20433e81 	subcs	r3, r3, r1, lsl #29
   3ebe0:	e1530e01 	cmp	r3, r1, lsl #28
   3ebe4:	e0a00000 	adc	r0, r0, r0
   3ebe8:	20433e01 	subcs	r3, r3, r1, lsl #28
   3ebec:	e1530d81 	cmp	r3, r1, lsl #27
   3ebf0:	e0a00000 	adc	r0, r0, r0
   3ebf4:	20433d81 	subcs	r3, r3, r1, lsl #27
   3ebf8:	e1530d01 	cmp	r3, r1, lsl #26
   3ebfc:	e0a00000 	adc	r0, r0, r0
   3ec00:	20433d01 	subcs	r3, r3, r1, lsl #26
   3ec04:	e1530c81 	cmp	r3, r1, lsl #25
   3ec08:	e0a00000 	adc	r0, r0, r0
   3ec0c:	20433c81 	subcs	r3, r3, r1, lsl #25
   3ec10:	e1530c01 	cmp	r3, r1, lsl #24
   3ec14:	e0a00000 	adc	r0, r0, r0
   3ec18:	20433c01 	subcs	r3, r3, r1, lsl #24
   3ec1c:	e1530b81 	cmp	r3, r1, lsl #23
   3ec20:	e0a00000 	adc	r0, r0, r0
   3ec24:	20433b81 	subcs	r3, r3, r1, lsl #23
   3ec28:	e1530b01 	cmp	r3, r1, lsl #22
   3ec2c:	e0a00000 	adc	r0, r0, r0
   3ec30:	20433b01 	subcs	r3, r3, r1, lsl #22
   3ec34:	e1530a81 	cmp	r3, r1, lsl #21
   3ec38:	e0a00000 	adc	r0, r0, r0
   3ec3c:	20433a81 	subcs	r3, r3, r1, lsl #21
   3ec40:	e1530a01 	cmp	r3, r1, lsl #20
   3ec44:	e0a00000 	adc	r0, r0, r0
   3ec48:	20433a01 	subcs	r3, r3, r1, lsl #20
   3ec4c:	e1530981 	cmp	r3, r1, lsl #19
   3ec50:	e0a00000 	adc	r0, r0, r0
   3ec54:	20433981 	subcs	r3, r3, r1, lsl #19
   3ec58:	e1530901 	cmp	r3, r1, lsl #18
   3ec5c:	e0a00000 	adc	r0, r0, r0
   3ec60:	20433901 	subcs	r3, r3, r1, lsl #18
   3ec64:	e1530881 	cmp	r3, r1, lsl #17
   3ec68:	e0a00000 	adc	r0, r0, r0
   3ec6c:	20433881 	subcs	r3, r3, r1, lsl #17
   3ec70:	e1530801 	cmp	r3, r1, lsl #16
   3ec74:	e0a00000 	adc	r0, r0, r0
   3ec78:	20433801 	subcs	r3, r3, r1, lsl #16
   3ec7c:	e1530781 	cmp	r3, r1, lsl #15
   3ec80:	e0a00000 	adc	r0, r0, r0
   3ec84:	20433781 	subcs	r3, r3, r1, lsl #15
   3ec88:	e1530701 	cmp	r3, r1, lsl #14
   3ec8c:	e0a00000 	adc	r0, r0, r0
   3ec90:	20433701 	subcs	r3, r3, r1, lsl #14
   3ec94:	e1530681 	cmp	r3, r1, lsl #13
   3ec98:	e0a00000 	adc	r0, r0, r0
   3ec9c:	20433681 	subcs	r3, r3, r1, lsl #13
   3eca0:	e1530601 	cmp	r3, r1, lsl #12
   3eca4:	e0a00000 	adc	r0, r0, r0
   3eca8:	20433601 	subcs	r3, r3, r1, lsl #12
   3ecac:	e1530581 	cmp	r3, r1, lsl #11
   3ecb0:	e0a00000 	adc	r0, r0, r0
   3ecb4:	20433581 	subcs	r3, r3, r1, lsl #11
   3ecb8:	e1530501 	cmp	r3, r1, lsl #10
   3ecbc:	e0a00000 	adc	r0, r0, r0
   3ecc0:	20433501 	subcs	r3, r3, r1, lsl #10
   3ecc4:	e1530481 	cmp	r3, r1, lsl #9
   3ecc8:	e0a00000 	adc	r0, r0, r0
   3eccc:	20433481 	subcs	r3, r3, r1, lsl #9
   3ecd0:	e1530401 	cmp	r3, r1, lsl #8
   3ecd4:	e0a00000 	adc	r0, r0, r0
   3ecd8:	20433401 	subcs	r3, r3, r1, lsl #8
   3ecdc:	e1530381 	cmp	r3, r1, lsl #7
   3ece0:	e0a00000 	adc	r0, r0, r0
   3ece4:	20433381 	subcs	r3, r3, r1, lsl #7
   3ece8:	e1530301 	cmp	r3, r1, lsl #6
   3ecec:	e0a00000 	adc	r0, r0, r0
   3ecf0:	20433301 	subcs	r3, r3, r1, lsl #6
   3ecf4:	e1530281 	cmp	r3, r1, lsl #5
   3ecf8:	e0a00000 	adc	r0, r0, r0
   3ecfc:	20433281 	subcs	r3, r3, r1, lsl #5
   3ed00:	e1530201 	cmp	r3, r1, lsl #4
   3ed04:	e0a00000 	adc	r0, r0, r0
   3ed08:	20433201 	subcs	r3, r3, r1, lsl #4
   3ed0c:	e1530181 	cmp	r3, r1, lsl #3
   3ed10:	e0a00000 	adc	r0, r0, r0
   3ed14:	20433181 	subcs	r3, r3, r1, lsl #3
   3ed18:	e1530101 	cmp	r3, r1, lsl #2
   3ed1c:	e0a00000 	adc	r0, r0, r0
   3ed20:	20433101 	subcs	r3, r3, r1, lsl #2
   3ed24:	e1530081 	cmp	r3, r1, lsl #1
   3ed28:	e0a00000 	adc	r0, r0, r0
   3ed2c:	20433081 	subcs	r3, r3, r1, lsl #1
   3ed30:	e1530001 	cmp	r3, r1
   3ed34:	e0a00000 	adc	r0, r0, r0
   3ed38:	20433001 	subcs	r3, r3, r1
   3ed3c:	e35c0000 	cmp	ip, #0
   3ed40:	42600000 	rsbmi	r0, r0, #0
   3ed44:	e12fff1e 	bx	lr
   3ed48:	e13c0000 	teq	ip, r0
   3ed4c:	42600000 	rsbmi	r0, r0, #0
   3ed50:	e12fff1e 	bx	lr
   3ed54:	33a00000 	movcc	r0, #0
   3ed58:	01a00fcc 	asreq	r0, ip, #31
   3ed5c:	03800001 	orreq	r0, r0, #1
   3ed60:	e12fff1e 	bx	lr
   3ed64:	e16f2f11 	clz	r2, r1
   3ed68:	e262201f 	rsb	r2, r2, #31
   3ed6c:	e35c0000 	cmp	ip, #0
   3ed70:	e1a00233 	lsr	r0, r3, r2
   3ed74:	42600000 	rsbmi	r0, r0, #0
   3ed78:	e12fff1e 	bx	lr
   3ed7c:	e3500000 	cmp	r0, #0
   3ed80:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
   3ed84:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
   3ed88:	ea000007 	b	3edac <__aeabi_idiv0>

0003ed8c <__aeabi_idivmod>:
   3ed8c:	e3510000 	cmp	r1, #0
   3ed90:	0afffff9 	beq	3ed7c <.divsi3_skip_div0_test+0x208>
   3ed94:	e92d4003 	push	{r0, r1, lr}
   3ed98:	ebffff75 	bl	3eb74 <.divsi3_skip_div0_test>
   3ed9c:	e8bd4006 	pop	{r1, r2, lr}
   3eda0:	e0030092 	mul	r3, r2, r0
   3eda4:	e0411003 	sub	r1, r1, r3
   3eda8:	e12fff1e 	bx	lr

0003edac <__aeabi_idiv0>:
   3edac:	e12fff1e 	bx	lr

0003edb0 <__aeabi_ldivmod>:
   3edb0:	e3530000 	cmp	r3, #0
   3edb4:	03520000 	cmpeq	r2, #0
   3edb8:	1a000007 	bne	3eddc <__aeabi_ldivmod+0x2c>
   3edbc:	e3510000 	cmp	r1, #0
   3edc0:	b3a01102 	movlt	r1, #-2147483648	; 0x80000000
   3edc4:	b3a00000 	movlt	r0, #0
   3edc8:	ba000002 	blt	3edd8 <__aeabi_ldivmod+0x28>
   3edcc:	03500000 	cmpeq	r0, #0
   3edd0:	13e01102 	mvnne	r1, #-2147483648	; 0x80000000
   3edd4:	13e00000 	mvnne	r0, #0
   3edd8:	eafffff3 	b	3edac <__aeabi_idiv0>
   3eddc:	e24dd008 	sub	sp, sp, #8
   3ede0:	e92d6000 	push	{sp, lr}
   3ede4:	e3510000 	cmp	r1, #0
   3ede8:	ba000006 	blt	3ee08 <__aeabi_ldivmod+0x58>
   3edec:	e3530000 	cmp	r3, #0
   3edf0:	ba000011 	blt	3ee3c <__aeabi_ldivmod+0x8c>
   3edf4:	eb000031 	bl	3eec0 <__udivmoddi4>
   3edf8:	e59de004 	ldr	lr, [sp, #4]
   3edfc:	e28dd008 	add	sp, sp, #8
   3ee00:	e8bd000c 	pop	{r2, r3}
   3ee04:	e12fff1e 	bx	lr
   3ee08:	e2700000 	rsbs	r0, r0, #0
   3ee0c:	e0c11081 	sbc	r1, r1, r1, lsl #1
   3ee10:	e3530000 	cmp	r3, #0
   3ee14:	ba000011 	blt	3ee60 <__aeabi_ldivmod+0xb0>
   3ee18:	eb000028 	bl	3eec0 <__udivmoddi4>
   3ee1c:	e59de004 	ldr	lr, [sp, #4]
   3ee20:	e28dd008 	add	sp, sp, #8
   3ee24:	e8bd000c 	pop	{r2, r3}
   3ee28:	e2700000 	rsbs	r0, r0, #0
   3ee2c:	e0c11081 	sbc	r1, r1, r1, lsl #1
   3ee30:	e2722000 	rsbs	r2, r2, #0
   3ee34:	e0c33083 	sbc	r3, r3, r3, lsl #1
   3ee38:	e12fff1e 	bx	lr
   3ee3c:	e2722000 	rsbs	r2, r2, #0
   3ee40:	e0c33083 	sbc	r3, r3, r3, lsl #1
   3ee44:	eb00001d 	bl	3eec0 <__udivmoddi4>
   3ee48:	e59de004 	ldr	lr, [sp, #4]
   3ee4c:	e28dd008 	add	sp, sp, #8
   3ee50:	e8bd000c 	pop	{r2, r3}
   3ee54:	e2700000 	rsbs	r0, r0, #0
   3ee58:	e0c11081 	sbc	r1, r1, r1, lsl #1
   3ee5c:	e12fff1e 	bx	lr
   3ee60:	e2722000 	rsbs	r2, r2, #0
   3ee64:	e0c33083 	sbc	r3, r3, r3, lsl #1
   3ee68:	eb000014 	bl	3eec0 <__udivmoddi4>
   3ee6c:	e59de004 	ldr	lr, [sp, #4]
   3ee70:	e28dd008 	add	sp, sp, #8
   3ee74:	e8bd000c 	pop	{r2, r3}
   3ee78:	e2722000 	rsbs	r2, r2, #0
   3ee7c:	e0c33083 	sbc	r3, r3, r3, lsl #1
   3ee80:	e12fff1e 	bx	lr

0003ee84 <__aeabi_uldivmod>:
   3ee84:	e3530000 	cmp	r3, #0
   3ee88:	03520000 	cmpeq	r2, #0
   3ee8c:	1a000004 	bne	3eea4 <__aeabi_uldivmod+0x20>
   3ee90:	e3510000 	cmp	r1, #0
   3ee94:	03500000 	cmpeq	r0, #0
   3ee98:	13e01000 	mvnne	r1, #0
   3ee9c:	13e00000 	mvnne	r0, #0
   3eea0:	eaffffc1 	b	3edac <__aeabi_idiv0>
   3eea4:	e24dd008 	sub	sp, sp, #8
   3eea8:	e92d6000 	push	{sp, lr}
   3eeac:	eb000003 	bl	3eec0 <__udivmoddi4>
   3eeb0:	e59de004 	ldr	lr, [sp, #4]
   3eeb4:	e28dd008 	add	sp, sp, #8
   3eeb8:	e8bd000c 	pop	{r2, r3}
   3eebc:	e12fff1e 	bx	lr

0003eec0 <__udivmoddi4>:
   3eec0:	e1510003 	cmp	r1, r3
   3eec4:	01500002 	cmpeq	r0, r2
   3eec8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3eecc:	e1a04000 	mov	r4, r0
   3eed0:	33a00000 	movcc	r0, #0
   3eed4:	e1a05001 	mov	r5, r1
   3eed8:	e59dc020 	ldr	ip, [sp, #32]
   3eedc:	31a01000 	movcc	r1, r0
   3eee0:	3a00003f 	bcc	3efe4 <__udivmoddi4+0x124>
   3eee4:	e1a06002 	mov	r6, r2
   3eee8:	e3530000 	cmp	r3, #0
   3eeec:	116f2f13 	clzne	r2, r3
   3eef0:	016f2f16 	clzeq	r2, r6
   3eef4:	02822020 	addeq	r2, r2, #32
   3eef8:	e3550000 	cmp	r5, #0
   3eefc:	e1a07003 	mov	r7, r3
   3ef00:	016f3f14 	clzeq	r3, r4
   3ef04:	02833020 	addeq	r3, r3, #32
   3ef08:	116f3f15 	clzne	r3, r5
   3ef0c:	e0422003 	sub	r2, r2, r3
   3ef10:	e1a09217 	lsl	r9, r7, r2
   3ef14:	e242a020 	sub	sl, r2, #32
   3ef18:	e1899a16 	orr	r9, r9, r6, lsl sl
   3ef1c:	e262e020 	rsb	lr, r2, #32
   3ef20:	e1899e36 	orr	r9, r9, r6, lsr lr
   3ef24:	e1a08216 	lsl	r8, r6, r2
   3ef28:	e1550009 	cmp	r5, r9
   3ef2c:	01540008 	cmpeq	r4, r8
   3ef30:	33a00000 	movcc	r0, #0
   3ef34:	31a01000 	movcc	r1, r0
   3ef38:	3a000005 	bcc	3ef54 <__udivmoddi4+0x94>
   3ef3c:	e3a00001 	mov	r0, #1
   3ef40:	e1a01a10 	lsl	r1, r0, sl
   3ef44:	e0544008 	subs	r4, r4, r8
   3ef48:	e1811e30 	orr	r1, r1, r0, lsr lr
   3ef4c:	e1a00210 	lsl	r0, r0, r2
   3ef50:	e0c55009 	sbc	r5, r5, r9
   3ef54:	e3520000 	cmp	r2, #0
   3ef58:	0a000021 	beq	3efe4 <__udivmoddi4+0x124>
   3ef5c:	e1a060a8 	lsr	r6, r8, #1
   3ef60:	e1866f89 	orr	r6, r6, r9, lsl #31
   3ef64:	e1a070a9 	lsr	r7, r9, #1
   3ef68:	e1a08002 	mov	r8, r2
   3ef6c:	ea000007 	b	3ef90 <__udivmoddi4+0xd0>
   3ef70:	e0543006 	subs	r3, r4, r6
   3ef74:	e0c59007 	sbc	r9, r5, r7
   3ef78:	e0933003 	adds	r3, r3, r3
   3ef7c:	e0a99009 	adc	r9, r9, r9
   3ef80:	e2934001 	adds	r4, r3, #1
   3ef84:	e2a95000 	adc	r5, r9, #0
   3ef88:	e2588001 	subs	r8, r8, #1
   3ef8c:	0a000006 	beq	3efac <__udivmoddi4+0xec>
   3ef90:	e1550007 	cmp	r5, r7
   3ef94:	01540006 	cmpeq	r4, r6
   3ef98:	2afffff4 	bcs	3ef70 <__udivmoddi4+0xb0>
   3ef9c:	e0944004 	adds	r4, r4, r4
   3efa0:	e0a55005 	adc	r5, r5, r5
   3efa4:	e2588001 	subs	r8, r8, #1
   3efa8:	1afffff8 	bne	3ef90 <__udivmoddi4+0xd0>
   3efac:	e1a03234 	lsr	r3, r4, r2
   3efb0:	e1833e15 	orr	r3, r3, r5, lsl lr
   3efb4:	e1a06235 	lsr	r6, r5, r2
   3efb8:	e1833a35 	orr	r3, r3, r5, lsr sl
   3efbc:	e0900004 	adds	r0, r0, r4
   3efc0:	e1a04003 	mov	r4, r3
   3efc4:	e1a03216 	lsl	r3, r6, r2
   3efc8:	e1833a14 	orr	r3, r3, r4, lsl sl
   3efcc:	e1a02214 	lsl	r2, r4, r2
   3efd0:	e1833e34 	orr	r3, r3, r4, lsr lr
   3efd4:	e0a11005 	adc	r1, r1, r5
   3efd8:	e0500002 	subs	r0, r0, r2
   3efdc:	e1a05006 	mov	r5, r6
   3efe0:	e0c11003 	sbc	r1, r1, r3
   3efe4:	e35c0000 	cmp	ip, #0
   3efe8:	11cc40f0 	strdne	r4, [ip]
   3efec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003eff0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   3eff0:	e3a01000 	mov	r1, #0
   3eff4:	e3a02001 	mov	r2, #1
   3eff8:	e92d4030 	push	{r4, r5, lr}
   3effc:	e1a05000 	mov	r5, r0
   3f000:	e5903020 	ldr	r3, [r0, #32]
   3f004:	e24dd014 	sub	sp, sp, #20
   3f008:	e5c32011 	strb	r2, [r3, #17]
   3f00c:	e5c3100c 	strb	r1, [r3, #12]
   3f010:	e5c3100d 	strb	r1, [r3, #13]
   3f014:	e5c3100e 	strb	r1, [r3, #14]
   3f018:	e5c3100f 	strb	r1, [r3, #15]
   3f01c:	e5c31010 	strb	r1, [r3, #16]
   3f020:	e5c31012 	strb	r1, [r3, #18]
   3f024:	e5c31013 	strb	r1, [r3, #19]
   3f028:	e28d0008 	add	r0, sp, #8
   3f02c:	ebff95fe 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3f030:	e59f306c 	ldr	r3, [pc, #108]	; 3f0a4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   3f034:	e5952020 	ldr	r2, [r5, #32]
   3f038:	e59f1068 	ldr	r1, [pc, #104]	; 3f0a8 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   3f03c:	e58d3000 	str	r3, [sp]
   3f040:	e28d0008 	add	r0, sp, #8
   3f044:	e283300c 	add	r3, r3, #12
   3f048:	ebff9603 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3f04c:	e2504000 	subs	r4, r0, #0
   3f050:	0a000008 	beq	3f078 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   3f054:	e5952020 	ldr	r2, [r5, #32]
   3f058:	e5d2300c 	ldrb	r3, [r2, #12]
   3f05c:	e5d2000d 	ldrb	r0, [r2, #13]
   3f060:	e5d2100e 	ldrb	r1, [r2, #14]
   3f064:	e1833400 	orr	r3, r3, r0, lsl #8
   3f068:	e5d2200f 	ldrb	r2, [r2, #15]
   3f06c:	e1833801 	orr	r3, r3, r1, lsl #16
   3f070:	e1933c02 	orrs	r3, r3, r2, lsl #24
   3f074:	0a000005 	beq	3f090 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   3f078:	e3a04000 	mov	r4, #0
   3f07c:	e28d0008 	add	r0, sp, #8
   3f080:	ebff95f0 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   3f084:	e1a00004 	mov	r0, r4
   3f088:	e28dd014 	add	sp, sp, #20
   3f08c:	e8bd8030 	pop	{r4, r5, pc}
   3f090:	e28d0008 	add	r0, sp, #8
   3f094:	ebff95eb 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   3f098:	e1a00004 	mov	r0, r4
   3f09c:	e28dd014 	add	sp, sp, #20
   3f0a0:	e8bd8030 	pop	{r4, r5, pc}
   3f0a4:	00000408 	.word	0x00000408
   3f0a8:	0004800b 	.word	0x0004800b

0003f0ac <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   3f0ac:	e92d4030 	push	{r4, r5, lr}
   3f0b0:	e1a04000 	mov	r4, r0
   3f0b4:	e3a05000 	mov	r5, #0
   3f0b8:	e3520000 	cmp	r2, #0
   3f0bc:	13510000 	cmpne	r1, #0
   3f0c0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   3f0c4:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
   3f0c8:	e5841000 	str	r1, [r4]
   3f0cc:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   3f0d0:	e5842004 	str	r2, [r4, #4]
   3f0d4:	e5843010 	str	r3, [r4, #16]
   3f0d8:	e584000c 	str	r0, [r4, #12]
   3f0dc:	e5841008 	str	r1, [r4, #8]
   3f0e0:	e5845014 	str	r5, [r4, #20]
   3f0e4:	e5845018 	str	r5, [r4, #24]
   3f0e8:	e584501c 	str	r5, [r4, #28]
   3f0ec:	e5845020 	str	r5, [r4, #32]
   3f0f0:	1a000011 	bne	3f13c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x90>
   3f0f4:	e1a01005 	mov	r1, r5
   3f0f8:	e28d000c 	add	r0, sp, #12
   3f0fc:	ebff95ca 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3f100:	e3a03014 	mov	r3, #20
   3f104:	e59f10dc 	ldr	r1, [pc, #220]	; 3f1e8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x13c>
   3f108:	e58d5000 	str	r5, [sp]
   3f10c:	e28d000c 	add	r0, sp, #12
   3f110:	e08d2003 	add	r2, sp, r3
   3f114:	ebff95d0 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3f118:	e1500005 	cmp	r0, r5
   3f11c:	1a000029 	bne	3f1c8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x11c>
   3f120:	e3a02d0a 	mov	r2, #640	; 0x280
   3f124:	e3a03e1e 	mov	r3, #480	; 0x1e0
   3f128:	e1c420f0 	strd	r2, [r4]
   3f12c:	e28d000c 	add	r0, sp, #12
   3f130:	ebff95c4 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   3f134:	e5941008 	ldr	r1, [r4, #8]
   3f138:	e5943010 	ldr	r3, [r4, #16]
   3f13c:	e3510000 	cmp	r1, #0
   3f140:	0a000013 	beq	3f194 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xe8>
   3f144:	e594200c 	ldr	r2, [r4, #12]
   3f148:	e3520000 	cmp	r2, #0
   3f14c:	0a000010 	beq	3f194 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xe8>
   3f150:	e3530008 	cmp	r3, #8
   3f154:	9a000013 	bls	3f1a8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
   3f158:	e3a02070 	mov	r2, #112	; 0x70
   3f15c:	e59f1088 	ldr	r1, [pc, #136]	; 3f1ec <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x140>
   3f160:	e2840024 	add	r0, r4, #36	; 0x24
   3f164:	ebffadb1 	bl	2a830 <memcpy>
   3f168:	e1c400d4 	ldrd	r0, [r4, #4]
   3f16c:	e1c420dc 	ldrd	r2, [r4, #12]
   3f170:	e5840034 	str	r0, [r4, #52]	; 0x34
   3f174:	e1a00004 	mov	r0, r4
   3f178:	e594c000 	ldr	ip, [r4]
   3f17c:	e5841044 	str	r1, [r4, #68]	; 0x44
   3f180:	e584c030 	str	ip, [r4, #48]	; 0x30
   3f184:	e5842048 	str	r2, [r4, #72]	; 0x48
   3f188:	e5843058 	str	r3, [r4, #88]	; 0x58
   3f18c:	e28dd02c 	add	sp, sp, #44	; 0x2c
   3f190:	e8bd8030 	pop	{r4, r5, pc}
   3f194:	e3530008 	cmp	r3, #8
   3f198:	e8940006 	ldm	r4, {r1, r2}
   3f19c:	e5841008 	str	r1, [r4, #8]
   3f1a0:	e584200c 	str	r2, [r4, #12]
   3f1a4:	8affffeb 	bhi	3f158 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   3f1a8:	e59f0040 	ldr	r0, [pc, #64]	; 3f1f0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x144>
   3f1ac:	ebffaf8b 	bl	2afe0 <operator new[](unsigned int)>
   3f1b0:	e3a02b01 	mov	r2, #1024	; 0x400
   3f1b4:	e5840020 	str	r0, [r4, #32]
   3f1b8:	e3a01000 	mov	r1, #0
   3f1bc:	e2800014 	add	r0, r0, #20
   3f1c0:	ebffab51 	bl	29f0c <memset>
   3f1c4:	eaffffe3 	b	3f158 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   3f1c8:	e1cd22d0 	ldrd	r2, [sp, #32]
   3f1cc:	e2420d0a 	sub	r0, r2, #640	; 0x280
   3f1d0:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   3f1d4:	e3510f96 	cmp	r1, #600	; 0x258
   3f1d8:	93500c05 	cmpls	r0, #1280	; 0x500
   3f1dc:	e1c420f0 	strd	r2, [r4]
   3f1e0:	8affffce 	bhi	3f120 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   3f1e4:	eaffffd0 	b	3f12c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x80>
   3f1e8:	00040003 	.word	0x00040003
   3f1ec:	0004ee70 	.word	0x0004ee70
   3f1f0:	00000414 	.word	0x00000414

0003f1f4 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   3f1f4:	e92d4010 	push	{r4, lr}
   3f1f8:	e1a04000 	mov	r4, r0
   3f1fc:	e5900020 	ldr	r0, [r0, #32]
   3f200:	e3500000 	cmp	r0, #0
   3f204:	0a000001 	beq	3f210 <CBcmFrameBuffer::~CBcmFrameBuffer()+0x1c>
   3f208:	e3a01014 	mov	r1, #20
   3f20c:	ebffaf7b 	bl	2b000 <operator delete(void*, unsigned int)>
   3f210:	e1a00004 	mov	r0, r4
   3f214:	e8bd8010 	pop	{r4, pc}

0003f218 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   3f218:	e5903010 	ldr	r3, [r0, #16]
   3f21c:	e3530008 	cmp	r3, #8
   3f220:	812fff1e 	bxhi	lr
   3f224:	e1a0c982 	lsl	ip, r2, #19
   3f228:	e1a035a2 	lsr	r3, r2, #11
   3f22c:	e20cc73e 	and	ip, ip, #16252928	; 0xf80000
   3f230:	e1a02282 	lsl	r2, r2, #5
   3f234:	e18cc183 	orr	ip, ip, r3, lsl #3
   3f238:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   3f23c:	e5903020 	ldr	r3, [r0, #32]
   3f240:	e182200c 	orr	r2, r2, ip
   3f244:	e38204ff 	orr	r0, r2, #-16777216	; 0xff000000
   3f248:	e2811004 	add	r1, r1, #4
   3f24c:	e0831101 	add	r1, r3, r1, lsl #2
   3f250:	e1a0c420 	lsr	ip, r0, #8
   3f254:	e1a03820 	lsr	r3, r0, #16
   3f258:	e1a00c20 	lsr	r0, r0, #24
   3f25c:	e5c12004 	strb	r2, [r1, #4]
   3f260:	e5c1c005 	strb	ip, [r1, #5]
   3f264:	e5c13006 	strb	r3, [r1, #6]
   3f268:	e5c10007 	strb	r0, [r1, #7]
   3f26c:	e12fff1e 	bx	lr

0003f270 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   3f270:	e5903010 	ldr	r3, [r0, #16]
   3f274:	e3530008 	cmp	r3, #8
   3f278:	812fff1e 	bxhi	lr
   3f27c:	e5903020 	ldr	r3, [r0, #32]
   3f280:	e2811004 	add	r1, r1, #4
   3f284:	e0831101 	add	r1, r3, r1, lsl #2
   3f288:	e1a0c422 	lsr	ip, r2, #8
   3f28c:	e1a00822 	lsr	r0, r2, #16
   3f290:	e1a03c22 	lsr	r3, r2, #24
   3f294:	e5c12004 	strb	r2, [r1, #4]
   3f298:	e5c1c005 	strb	ip, [r1, #5]
   3f29c:	e5c10006 	strb	r0, [r1, #6]
   3f2a0:	e5c13007 	strb	r3, [r1, #7]
   3f2a4:	e12fff1e 	bx	lr

0003f2a8 <CBcmFrameBuffer::Initialize()>:
   3f2a8:	e92d4030 	push	{r4, r5, lr}
   3f2ac:	e1a04000 	mov	r4, r0
   3f2b0:	e24dd00c 	sub	sp, sp, #12
   3f2b4:	e3a01000 	mov	r1, #0
   3f2b8:	e1a0000d 	mov	r0, sp
   3f2bc:	ebff955a 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3f2c0:	e1a0000d 	mov	r0, sp
   3f2c4:	e3a02070 	mov	r2, #112	; 0x70
   3f2c8:	e2841024 	add	r1, r4, #36	; 0x24
   3f2cc:	ebff959f 	bl	24950 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   3f2d0:	e2505000 	subs	r5, r0, #0
   3f2d4:	0a00001f 	beq	3f358 <CBcmFrameBuffer::Initialize()+0xb0>
   3f2d8:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3f2dc:	e3530000 	cmp	r3, #0
   3f2e0:	0a00001b 	beq	3f354 <CBcmFrameBuffer::Initialize()+0xac>
   3f2e4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   3f2e8:	e3530000 	cmp	r3, #0
   3f2ec:	0a000018 	beq	3f354 <CBcmFrameBuffer::Initialize()+0xac>
   3f2f0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   3f2f4:	e3530000 	cmp	r3, #0
   3f2f8:	0a000015 	beq	3f354 <CBcmFrameBuffer::Initialize()+0xac>
   3f2fc:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   3f300:	e3530000 	cmp	r3, #0
   3f304:	0a000012 	beq	3f354 <CBcmFrameBuffer::Initialize()+0xac>
   3f308:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   3f30c:	e3530000 	cmp	r3, #0
   3f310:	0a00000f 	beq	3f354 <CBcmFrameBuffer::Initialize()+0xac>
   3f314:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   3f318:	e3530000 	cmp	r3, #0
   3f31c:	0a00000c 	beq	3f354 <CBcmFrameBuffer::Initialize()+0xac>
   3f320:	e5942010 	ldr	r2, [r4, #16]
   3f324:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   3f328:	e3520008 	cmp	r2, #8
   3f32c:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   3f330:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   3f334:	e5843014 	str	r3, [r4, #20]
   3f338:	e5841018 	str	r1, [r4, #24]
   3f33c:	e584201c 	str	r2, [r4, #28]
   3f340:	8a000004 	bhi	3f358 <CBcmFrameBuffer::Initialize()+0xb0>
   3f344:	e1a00004 	mov	r0, r4
   3f348:	ebffff28 	bl	3eff0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   3f34c:	e1a05000 	mov	r5, r0
   3f350:	ea000000 	b	3f358 <CBcmFrameBuffer::Initialize()+0xb0>
   3f354:	e1a05003 	mov	r5, r3
   3f358:	e1a0000d 	mov	r0, sp
   3f35c:	ebff9539 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   3f360:	e1a00005 	mov	r0, r5
   3f364:	e28dd00c 	add	sp, sp, #12
   3f368:	e8bd8030 	pop	{r4, r5, pc}

0003f36c <CBcmFrameBuffer::GetWidth() const>:
   3f36c:	e5900000 	ldr	r0, [r0]
   3f370:	e12fff1e 	bx	lr

0003f374 <CBcmFrameBuffer::GetHeight() const>:
   3f374:	e5900004 	ldr	r0, [r0, #4]
   3f378:	e12fff1e 	bx	lr

0003f37c <CBcmFrameBuffer::GetVirtWidth() const>:
   3f37c:	e5900008 	ldr	r0, [r0, #8]
   3f380:	e12fff1e 	bx	lr

0003f384 <CBcmFrameBuffer::GetVirtHeight() const>:
   3f384:	e590000c 	ldr	r0, [r0, #12]
   3f388:	e12fff1e 	bx	lr

0003f38c <CBcmFrameBuffer::GetPitch() const>:
   3f38c:	e590001c 	ldr	r0, [r0, #28]
   3f390:	e12fff1e 	bx	lr

0003f394 <CBcmFrameBuffer::GetDepth() const>:
   3f394:	e5900010 	ldr	r0, [r0, #16]
   3f398:	e12fff1e 	bx	lr

0003f39c <CBcmFrameBuffer::GetBuffer() const>:
   3f39c:	e5900014 	ldr	r0, [r0, #20]
   3f3a0:	e12fff1e 	bx	lr

0003f3a4 <CBcmFrameBuffer::GetSize() const>:
   3f3a4:	e5900018 	ldr	r0, [r0, #24]
   3f3a8:	e12fff1e 	bx	lr

0003f3ac <CBcmFrameBuffer::UpdatePalette()>:
   3f3ac:	e5903010 	ldr	r3, [r0, #16]
   3f3b0:	e3530008 	cmp	r3, #8
   3f3b4:	9a000001 	bls	3f3c0 <CBcmFrameBuffer::UpdatePalette()+0x14>
   3f3b8:	e3a00001 	mov	r0, #1
   3f3bc:	e12fff1e 	bx	lr
   3f3c0:	eaffff0a 	b	3eff0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

0003f3c4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   3f3c4:	e92d4070 	push	{r4, r5, r6, lr}
   3f3c8:	e24dd028 	sub	sp, sp, #40	; 0x28
   3f3cc:	e1a05001 	mov	r5, r1
   3f3d0:	e28d000c 	add	r0, sp, #12
   3f3d4:	e3a01000 	mov	r1, #0
   3f3d8:	e1a06002 	mov	r6, r2
   3f3dc:	ebff9512 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3f3e0:	e3a03008 	mov	r3, #8
   3f3e4:	e58d3000 	str	r3, [sp]
   3f3e8:	e3a03014 	mov	r3, #20
   3f3ec:	e59f1048 	ldr	r1, [pc, #72]	; 3f43c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x78>
   3f3f0:	e28d000c 	add	r0, sp, #12
   3f3f4:	e08d2003 	add	r2, sp, r3
   3f3f8:	e58d5020 	str	r5, [sp, #32]
   3f3fc:	e58d6024 	str	r6, [sp, #36]	; 0x24
   3f400:	ebff9515 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3f404:	e2504000 	subs	r4, r0, #0
   3f408:	0a000006 	beq	3f428 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   3f40c:	e59d3020 	ldr	r3, [sp, #32]
   3f410:	e1530005 	cmp	r3, r5
   3f414:	059d0024 	ldreq	r0, [sp, #36]	; 0x24
   3f418:	13a04000 	movne	r4, #0
   3f41c:	00404006 	subeq	r4, r0, r6
   3f420:	016f4f14 	clzeq	r4, r4
   3f424:	01a042a4 	lsreq	r4, r4, #5
   3f428:	e28d000c 	add	r0, sp, #12
   3f42c:	ebff9505 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   3f430:	e1a00004 	mov	r0, r4
   3f434:	e28dd028 	add	sp, sp, #40	; 0x28
   3f438:	e8bd8070 	pop	{r4, r5, r6, pc}
   3f43c:	00048009 	.word	0x00048009

0003f440 <CBcmFrameBuffer::WaitForVerticalSync()>:
   3f440:	e92d4010 	push	{r4, lr}
   3f444:	e24dd020 	sub	sp, sp, #32
   3f448:	e3a01000 	mov	r1, #0
   3f44c:	e28d0008 	add	r0, sp, #8
   3f450:	ebff94f5 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3f454:	e3a03000 	mov	r3, #0
   3f458:	e58d3000 	str	r3, [sp]
   3f45c:	e3a03010 	mov	r3, #16
   3f460:	e59f1020 	ldr	r1, [pc, #32]	; 3f488 <CBcmFrameBuffer::WaitForVerticalSync()+0x48>
   3f464:	e08d2003 	add	r2, sp, r3
   3f468:	e28d0008 	add	r0, sp, #8
   3f46c:	ebff94fa 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3f470:	e1a04000 	mov	r4, r0
   3f474:	e28d0008 	add	r0, sp, #8
   3f478:	ebff94f2 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   3f47c:	e1a00004 	mov	r0, r4
   3f480:	e28dd020 	add	sp, sp, #32
   3f484:	e8bd8010 	pop	{r4, pc}
   3f488:	0004800e 	.word	0x0004800e

0003f48c <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   3f48c:	e92d4010 	push	{r4, lr}
   3f490:	e24dd020 	sub	sp, sp, #32
   3f494:	e1a04001 	mov	r4, r1
   3f498:	e28d0008 	add	r0, sp, #8
   3f49c:	e3a01000 	mov	r1, #0
   3f4a0:	ebff94e1 	bl	2482c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3f4a4:	e3a03004 	mov	r3, #4
   3f4a8:	e58d3000 	str	r3, [sp]
   3f4ac:	e3a03010 	mov	r3, #16
   3f4b0:	e59f1024 	ldr	r1, [pc, #36]	; 3f4dc <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)+0x50>
   3f4b4:	e08d2003 	add	r2, sp, r3
   3f4b8:	e28d0008 	add	r0, sp, #8
   3f4bc:	e58d401c 	str	r4, [sp, #28]
   3f4c0:	ebff94e5 	bl	2485c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3f4c4:	e1a04000 	mov	r4, r0
   3f4c8:	e28d0008 	add	r0, sp, #8
   3f4cc:	ebff94dd 	bl	24848 <CBcmPropertyTags::~CBcmPropertyTags()>
   3f4d0:	e1a00004 	mov	r0, r4
   3f4d4:	e28dd020 	add	sp, sp, #32
   3f4d8:	e8bd8010 	pop	{r4, pc}
   3f4dc:	0004800f 	.word	0x0004800f

0003f4e0 <convModeToVal>:
   3f4e0:	e2400001 	sub	r0, r0, #1
   3f4e4:	e6ef0070 	uxtb	r0, r0
   3f4e8:	e3500008 	cmp	r0, #8
   3f4ec:	959f3008 	ldrls	r3, [pc, #8]	; 3f4fc <convModeToVal+0x1c>
   3f4f0:	97d30000 	ldrbls	r0, [r3, r0]
   3f4f4:	83a00000 	movhi	r0, #0
   3f4f8:	e12fff1e 	bx	lr
   3f4fc:	00049d04 	.word	0x00049d04

0003f500 <pinMode>:
   3f500:	e92d4070 	push	{r4, r5, r6, lr}
   3f504:	e1a04000 	mov	r4, r0
   3f508:	e3a0c007 	mov	ip, #7
   3f50c:	e59f20e0 	ldr	r2, [pc, #224]	; 3f5f4 <pinMode+0xf4>
   3f510:	e59f00e0 	ldr	r0, [pc, #224]	; 3f5f8 <pinMode+0xf8>
   3f514:	e0823492 	umull	r3, r2, r2, r4
   3f518:	e1a021a2 	lsr	r2, r2, #3
   3f51c:	e0623e82 	rsb	r3, r2, r2, lsl #29
   3f520:	e0623103 	rsb	r3, r2, r3, lsl #2
   3f524:	e0843083 	add	r3, r4, r3, lsl #1
   3f528:	e0ce0390 	smull	r0, lr, r0, r3
   3f52c:	e1a00fc3 	asr	r0, r3, #31
   3f530:	e2822302 	add	r2, r2, #134217728	; 0x8000000
   3f534:	e060014e 	rsb	r0, r0, lr, asr #2
   3f538:	e0800100 	add	r0, r0, r0, lsl #2
   3f53c:	e2822702 	add	r2, r2, #524288	; 0x80000
   3f540:	e0433080 	sub	r3, r3, r0, lsl #1
   3f544:	e2411001 	sub	r1, r1, #1
   3f548:	e1a02102 	lsl	r2, r2, #2
   3f54c:	e5920000 	ldr	r0, [r2]
   3f550:	e6ef1071 	uxtb	r1, r1
   3f554:	e0833083 	add	r3, r3, r3, lsl #1
   3f558:	e6ef3073 	uxtb	r3, r3
   3f55c:	e3510008 	cmp	r1, #8
   3f560:	e1c0c31c 	bic	ip, r0, ip, lsl r3
   3f564:	8a000016 	bhi	3f5c4 <pinMode+0xc4>
   3f568:	e59f008c 	ldr	r0, [pc, #140]	; 3f5fc <pinMode+0xfc>
   3f56c:	e7d01001 	ldrb	r1, [r0, r1]
   3f570:	e201000f 	and	r0, r1, #15
   3f574:	e18cc310 	orr	ip, ip, r0, lsl r3
   3f578:	e31100f0 	tst	r1, #240	; 0xf0
   3f57c:	e582c000 	str	ip, [r2]
   3f580:	08bd8070 	popeq	{r4, r5, r6, pc}
   3f584:	e59f5074 	ldr	r5, [pc, #116]	; 3f600 <pinMode+0x100>
   3f588:	e1a01241 	asr	r1, r1, #4
   3f58c:	e3a00096 	mov	r0, #150	; 0x96
   3f590:	e5851094 	str	r1, [r5, #148]	; 0x94
   3f594:	ebffb42d 	bl	2c650 <DelayLoop>
   3f598:	e354001f 	cmp	r4, #31
   3f59c:	8a00000a 	bhi	3f5cc <pinMode+0xcc>
   3f5a0:	e3a00001 	mov	r0, #1
   3f5a4:	e1a04410 	lsl	r4, r0, r4
   3f5a8:	e5854098 	str	r4, [r5, #152]	; 0x98
   3f5ac:	e3a00096 	mov	r0, #150	; 0x96
   3f5b0:	ebffb426 	bl	2c650 <DelayLoop>
   3f5b4:	e3a03000 	mov	r3, #0
   3f5b8:	e5853094 	str	r3, [r5, #148]	; 0x94
   3f5bc:	e5853098 	str	r3, [r5, #152]	; 0x98
   3f5c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   3f5c4:	e582c000 	str	ip, [r2]
   3f5c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   3f5cc:	e3a03001 	mov	r3, #1
   3f5d0:	e2444020 	sub	r4, r4, #32
   3f5d4:	e1a04413 	lsl	r4, r3, r4
   3f5d8:	e3a00096 	mov	r0, #150	; 0x96
   3f5dc:	e585409c 	str	r4, [r5, #156]	; 0x9c
   3f5e0:	ebffb41a 	bl	2c650 <DelayLoop>
   3f5e4:	e3a03000 	mov	r3, #0
   3f5e8:	e5853094 	str	r3, [r5, #148]	; 0x94
   3f5ec:	e585309c 	str	r3, [r5, #156]	; 0x9c
   3f5f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   3f5f4:	cccccccd 	.word	0xcccccccd
   3f5f8:	66666667 	.word	0x66666667
   3f5fc:	00049d04 	.word	0x00049d04
   3f600:	20200000 	.word	0x20200000

0003f604 <digitalWrite>:
   3f604:	e3510000 	cmp	r1, #0
   3f608:	e3a03001 	mov	r3, #1
   3f60c:	0a000008 	beq	3f634 <digitalWrite+0x30>
   3f610:	e350001f 	cmp	r0, #31
   3f614:	82400020 	subhi	r0, r0, #32
   3f618:	959f2038 	ldrls	r2, [pc, #56]	; 3f658 <digitalWrite+0x54>
   3f61c:	859f2034 	ldrhi	r2, [pc, #52]	; 3f658 <digitalWrite+0x54>
   3f620:	91a00013 	lslls	r0, r3, r0
   3f624:	81a00013 	lslhi	r0, r3, r0
   3f628:	9582001c 	strls	r0, [r2, #28]
   3f62c:	85820020 	strhi	r0, [r2, #32]
   3f630:	e12fff1e 	bx	lr
   3f634:	e350001f 	cmp	r0, #31
   3f638:	82400020 	subhi	r0, r0, #32
   3f63c:	959f2014 	ldrls	r2, [pc, #20]	; 3f658 <digitalWrite+0x54>
   3f640:	859f2010 	ldrhi	r2, [pc, #16]	; 3f658 <digitalWrite+0x54>
   3f644:	91a00013 	lslls	r0, r3, r0
   3f648:	81a00013 	lslhi	r0, r3, r0
   3f64c:	95820028 	strls	r0, [r2, #40]	; 0x28
   3f650:	8582002c 	strhi	r0, [r2, #44]	; 0x2c
   3f654:	e12fff1e 	bx	lr
   3f658:	20200000 	.word	0x20200000

0003f65c <digitalRead>:
   3f65c:	e59f3018 	ldr	r3, [pc, #24]	; 3f67c <digitalRead+0x20>
   3f660:	e350001f 	cmp	r0, #31
   3f664:	95933034 	ldrls	r3, [r3, #52]	; 0x34
   3f668:	85933038 	ldrhi	r3, [r3, #56]	; 0x38
   3f66c:	82400020 	subhi	r0, r0, #32
   3f670:	e1a00033 	lsr	r0, r3, r0
   3f674:	e2000001 	and	r0, r0, #1
   3f678:	e12fff1e 	bx	lr
   3f67c:	20200000 	.word	0x20200000

0003f680 <lowlev_enable_irq>:
   3f680:	e10f0000 	mrs	r0, CPSR
   3f684:	e3c00080 	bic	r0, r0, #128	; 0x80
   3f688:	e121f000 	msr	CPSR_c, r0
   3f68c:	e12fff1e 	bx	lr

0003f690 <lowlev_disable_irq>:
   3f690:	f10c0080 	cpsid	i
   3f694:	e1a0f00e 	mov	pc, lr

0003f698 <lowlev_enable_fiq>:
   3f698:	e10f0000 	mrs	r0, CPSR
   3f69c:	e3c00040 	bic	r0, r0, #64	; 0x40
   3f6a0:	e121f000 	msr	CPSR_c, r0
   3f6a4:	e12fff1e 	bx	lr

0003f6a8 <lowlev_disable_fiq>:
   3f6a8:	f10c0040 	cpsid	f
   3f6ac:	e1a0f00e 	mov	pc, lr

0003f6b0 <lowlev_cycleDelay>:
   3f6b0:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
   3f6b4:	e1a000c0 	asr	r0, r0, #1

0003f6b8 <bloop>:
   3f6b8:	e2500001 	subs	r0, r0, #1
   3f6bc:	1afffffd 	bne	3f6b8 <bloop>
   3f6c0:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
   3f6c4:	e12fff1e 	bx	lr

0003f6c8 <membarrier>:
   3f6c8:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   3f6cc:	e3a03000 	mov	r3, #0
   3f6d0:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   3f6d4:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   3f6d8:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
   3f6dc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   3f6e0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3f6e4:	e12fff1e 	bx	lr

0003f6e8 <disable_mmu_and_cache>:
   3f6e8:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
   3f6ec:	e3c00a01 	bic	r0, r0, #4096	; 0x1000
   3f6f0:	e3c00004 	bic	r0, r0, #4
   3f6f4:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
   3f6f8:	e92d040f 	push	{r0, r1, r2, r3, sl}
   3f6fc:	e3a03000 	mov	r3, #0
   3f700:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   3f704:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   3f708:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
   3f70c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   3f710:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3f714:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   3f718:	e3a00005 	mov	r0, #5
   3f71c:	e1c33000 	bic	r3, r3, r0
   3f720:	e3a00003 	mov	r0, #3
   3f724:	e1c33580 	bic	r3, r3, r0, lsl #11
   3f728:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   3f72c:	e8bd040f 	pop	{r0, r1, r2, r3, sl}
   3f730:	e12fff1e 	bx	lr

0003f734 <blinkCE0>:
   3f734:	e92d040f 	push	{r0, r1, r2, r3, sl}
   3f738:	e59f0108 	ldr	r0, [pc, #264]	; 3f848 <memcopyfast+0x5c>
   3f73c:	e3a01401 	mov	r1, #16777216	; 0x1000000
   3f740:	e5801000 	str	r1, [r0]
   3f744:	e3a01c01 	mov	r1, #256	; 0x100
   3f748:	e3a02c01 	mov	r2, #256	; 0x100
   3f74c:	e580101c 	str	r1, [r0, #28]
   3f750:	e3a0a000 	mov	sl, #0

0003f754 <delay>:
   3f754:	e28aa001 	add	sl, sl, #1
   3f758:	e15a0002 	cmp	sl, r2
   3f75c:	1afffffc 	bne	3f754 <delay>
   3f760:	e5801028 	str	r1, [r0, #40]	; 0x28
   3f764:	e3a0a000 	mov	sl, #0

0003f768 <delay2>:
   3f768:	e28aa001 	add	sl, sl, #1
   3f76c:	e15a0002 	cmp	sl, r2
   3f770:	1afffffc 	bne	3f768 <delay2>
   3f774:	e8bd040f 	pop	{r0, r1, r2, r3, sl}
   3f778:	e12fff1e 	bx	lr

0003f77c <blinkLEDForever>:
   3f77c:	e59f00c4 	ldr	r0, [pc, #196]	; 3f848 <memcopyfast+0x5c>
   3f780:	e3a0260f 	mov	r2, #15728640	; 0xf00000
   3f784:	e3a01602 	mov	r1, #2097152	; 0x200000
   3f788:	e5801010 	str	r1, [r0, #16]
   3f78c:	e3a01902 	mov	r1, #32768	; 0x8000
   3f790:	e5801020 	str	r1, [r0, #32]

0003f794 <loopBlink>:
   3f794:	e5801020 	str	r1, [r0, #32]
   3f798:	e3a0a000 	mov	sl, #0

0003f79c <delay1a>:
   3f79c:	e28aa001 	add	sl, sl, #1
   3f7a0:	e15a0002 	cmp	sl, r2
   3f7a4:	1afffffc 	bne	3f79c <delay1a>
   3f7a8:	e580102c 	str	r1, [r0, #44]	; 0x2c
   3f7ac:	e3a0a000 	mov	sl, #0

0003f7b0 <delay2a>:
   3f7b0:	e28aa001 	add	sl, sl, #1
   3f7b4:	e15a0002 	cmp	sl, r2
   3f7b8:	1afffffc 	bne	3f7b0 <delay2a>
   3f7bc:	eafffff4 	b	3f794 <loopBlink>

0003f7c0 <lowlev_blockCopyExecRelocatable>:
   3f7c0:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

0003f7c4 <blockCopyExecRelocatableLoop>:
   3f7c4:	e4d13001 	ldrb	r3, [r1], #1
   3f7c8:	e4c03001 	strb	r3, [r0], #1
   3f7cc:	e2522001 	subs	r2, r2, #1
   3f7d0:	aafffffb 	bge	3f7c4 <blockCopyExecRelocatableLoop>
   3f7d4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   3f7d8:	e12fff10 	bx	r0

0003f7dc <lowlev_blockCopyExecRelocatableLen>:
   3f7dc:	0000001c 	.word	0x0000001c

0003f7e0 <lowlev_goto>:
   3f7e0:	e12fff10 	bx	r0

0003f7e4 <lowlev_store_abs8>:
   3f7e4:	e5c01000 	strb	r1, [r0]
   3f7e8:	e12fff1e 	bx	lr

0003f7ec <memcopyfast>:
   3f7ec:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   3f7f0:	e352007f 	cmp	r2, #127	; 0x7f
   3f7f4:	9a00000b 	bls	3f828 <memcopyfast+0x3c>
   3f7f8:	e3110003 	tst	r1, #3
   3f7fc:	1a000009 	bne	3f828 <memcopyfast+0x3c>
   3f800:	e3100003 	tst	r0, #3
   3f804:	1a000007 	bne	3f828 <memcopyfast+0x3c>
   3f808:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   3f80c:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   3f810:	e2422020 	sub	r2, r2, #32
   3f814:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   3f818:	f5d1f040 	pld	[r1, #64]	; 0x40
   3f81c:	e352001f 	cmp	r2, #31
   3f820:	8afffff9 	bhi	3f80c <memcopyfast+0x20>
   3f824:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   3f828:	e3520000 	cmp	r2, #0
   3f82c:	0a000003 	beq	3f840 <memcopyfast+0x54>
   3f830:	e4d13001 	ldrb	r3, [r1], #1
   3f834:	e2522001 	subs	r2, r2, #1
   3f838:	e4c03001 	strb	r3, [r0], #1
   3f83c:	1afffffb 	bne	3f830 <memcopyfast+0x44>
   3f840:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   3f844:	e12fff1e 	bx	lr
   3f848:	20200000 	.word	0x20200000

0003f84c <KeyConversion::getNumTypes()>:
   3f84c:	e3a00006 	mov	r0, #6
   3f850:	e12fff1e 	bx	lr

0003f854 <TargetControl::disassemble(unsigned long, char*, unsigned long, unsigned long&)>:
   3f854:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f858:	e1a07002 	mov	r7, r2
   3f85c:	e1a08003 	mov	r8, r3
   3f860:	e1a06001 	mov	r6, r1
   3f864:	e590c000 	ldr	ip, [r0]
   3f868:	e59f9090 	ldr	r9, [pc, #144]	; 3f900 <TargetControl::disassemble(unsigned long, char*, unsigned long, unsigned long&)+0xac>
   3f86c:	e2803601 	add	r3, r0, #1048576	; 0x100000
   3f870:	e1a02008 	mov	r2, r8
   3f874:	e1a00007 	mov	r0, r7
   3f878:	e59f1084 	ldr	r1, [pc, #132]	; 3f904 <TargetControl::disassemble(unsigned long, char*, unsigned long, unsigned long&)+0xb0>
   3f87c:	e24ddfff 	sub	sp, sp, #1020	; 0x3fc
   3f880:	e59354a8 	ldr	r5, [r3, #1192]	; 0x4a8
   3f884:	e08c9009 	add	r9, ip, r9
   3f888:	ebffb993 	bl	2dedc <strlcpy>
   3f88c:	e3560000 	cmp	r6, #0
   3f890:	0a000018 	beq	3f8f8 <TargetControl::disassemble(unsigned long, char*, unsigned long, unsigned long&)+0xa4>
   3f894:	e3a04000 	mov	r4, #0
   3f898:	e3a0bffa 	mov	fp, #1000	; 0x3e8
   3f89c:	e3a03003 	mov	r3, #3
   3f8a0:	e3a00000 	mov	r0, #0
   3f8a4:	e3a01001 	mov	r1, #1
   3f8a8:	e1a02005 	mov	r2, r5
   3f8ac:	e1cd00f4 	strd	r0, [sp, #4]
   3f8b0:	e58d3000 	str	r3, [sp]
   3f8b4:	e3a01000 	mov	r1, #0
   3f8b8:	e28d3010 	add	r3, sp, #16
   3f8bc:	e1a00009 	mov	r0, r9
   3f8c0:	e58db00c 	str	fp, [sp, #12]
   3f8c4:	eb00019c 	bl	3ff3c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)>
   3f8c8:	e1a0a000 	mov	sl, r0
   3f8cc:	e3540000 	cmp	r4, #0
   3f8d0:	059d3420 	ldreq	r3, [sp, #1056]	; 0x420
   3f8d4:	e1a02008 	mov	r2, r8
   3f8d8:	0583a000 	streq	sl, [r3]
   3f8dc:	e1a00007 	mov	r0, r7
   3f8e0:	e28d1010 	add	r1, sp, #16
   3f8e4:	e2844001 	add	r4, r4, #1
   3f8e8:	ebffb997 	bl	2df4c <strlcat>
   3f8ec:	e1560004 	cmp	r6, r4
   3f8f0:	e085500a 	add	r5, r5, sl
   3f8f4:	1affffe8 	bne	3f89c <TargetControl::disassemble(unsigned long, char*, unsigned long, unsigned long&)+0x48>
   3f8f8:	e28ddfff 	add	sp, sp, #1020	; 0x3fc
   3f8fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f900:	001006cc 	.word	0x001006cc
   3f904:	000493c8 	.word	0x000493c8

0003f908 <memTestDataBus(BusControl&, unsigned long)>:
   3f908:	e3a03001 	mov	r3, #1
   3f90c:	e92d4070 	push	{r4, r5, r6, lr}
   3f910:	e59f4070 	ldr	r4, [pc, #112]	; 3f988 <memTestDataBus(BusControl&, unsigned long)+0x80>
   3f914:	e24dd010 	sub	sp, sp, #16
   3f918:	e1a05001 	mov	r5, r1
   3f91c:	e3a06000 	mov	r6, #0
   3f920:	e5cd300e 	strb	r3, [sp, #14]
   3f924:	e0804004 	add	r4, r0, r4
   3f928:	ea000003 	b	3f93c <memTestDataBus(BusControl&, unsigned long)+0x34>
   3f92c:	e6ef0072 	uxtb	r0, r2
   3f930:	e3500000 	cmp	r0, #0
   3f934:	e5cd000e 	strb	r0, [sp, #14]
   3f938:	0a000010 	beq	3f980 <memTestDataBus(BusControl&, unsigned long)+0x78>
   3f93c:	e3a03001 	mov	r3, #1
   3f940:	e1a01005 	mov	r1, r5
   3f944:	e28d200e 	add	r2, sp, #14
   3f948:	e1a00004 	mov	r0, r4
   3f94c:	e58d6000 	str	r6, [sp]
   3f950:	ebffd19b 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3f954:	e3a03001 	mov	r3, #1
   3f958:	e28d200f 	add	r2, sp, #15
   3f95c:	e1a01005 	mov	r1, r5
   3f960:	e1a00004 	mov	r0, r4
   3f964:	e58d6000 	str	r6, [sp]
   3f968:	ebffd178 	bl	33f50 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   3f96c:	e5dd000e 	ldrb	r0, [sp, #14]
   3f970:	e5dd300f 	ldrb	r3, [sp, #15]
   3f974:	e1a02080 	lsl	r2, r0, #1
   3f978:	e1530000 	cmp	r3, r0
   3f97c:	0affffea 	beq	3f92c <memTestDataBus(BusControl&, unsigned long)+0x24>
   3f980:	e28dd010 	add	sp, sp, #16
   3f984:	e8bd8070 	pop	{r4, r5, r6, pc}
   3f988:	001006c8 	.word	0x001006c8

0003f98c <memTestAddressBus(BusControl&, unsigned long, unsigned long)>:
   3f98c:	e3e0c055 	mvn	ip, #85	; 0x55
   3f990:	e3a03055 	mov	r3, #85	; 0x55
   3f994:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f998:	e2425001 	sub	r5, r2, #1
   3f99c:	e24dd014 	sub	sp, sp, #20
   3f9a0:	e2159001 	ands	r9, r5, #1
   3f9a4:	e1a07001 	mov	r7, r1
   3f9a8:	e5cdc00c 	strb	ip, [sp, #12]
   3f9ac:	e5cd300d 	strb	r3, [sp, #13]
   3f9b0:	0a000056 	beq	3fb10 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0x184>
   3f9b4:	e1a04009 	mov	r4, r9
   3f9b8:	e3a08000 	mov	r8, #0
   3f9bc:	e59f6188 	ldr	r6, [pc, #392]	; 3fb4c <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0x1c0>
   3f9c0:	e0806006 	add	r6, r0, r6
   3f9c4:	e3a03001 	mov	r3, #1
   3f9c8:	e0871004 	add	r1, r7, r4
   3f9cc:	e1a00006 	mov	r0, r6
   3f9d0:	e1a04314 	lsl	r4, r4, r3
   3f9d4:	e58d8000 	str	r8, [sp]
   3f9d8:	e28d200c 	add	r2, sp, #12
   3f9dc:	ebffd178 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3f9e0:	e015b004 	ands	fp, r5, r4
   3f9e4:	1afffff6 	bne	3f9c4 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0x38>
   3f9e8:	e3a03001 	mov	r3, #1
   3f9ec:	e1a01007 	mov	r1, r7
   3f9f0:	e1a00006 	mov	r0, r6
   3f9f4:	e58db000 	str	fp, [sp]
   3f9f8:	e28d200d 	add	r2, sp, #13
   3f9fc:	ebffd170 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3fa00:	e1a04009 	mov	r4, r9
   3fa04:	ea000001 	b	3fa10 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0x84>
   3fa08:	e0158004 	ands	r8, r5, r4
   3fa0c:	0a00000e 	beq	3fa4c <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0xc0>
   3fa10:	e087a004 	add	sl, r7, r4
   3fa14:	e3a03001 	mov	r3, #1
   3fa18:	e28d200f 	add	r2, sp, #15
   3fa1c:	e1a0100a 	mov	r1, sl
   3fa20:	e1a00006 	mov	r0, r6
   3fa24:	e58db000 	str	fp, [sp]
   3fa28:	ebffd148 	bl	33f50 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   3fa2c:	e5dd200f 	ldrb	r2, [sp, #15]
   3fa30:	e5dd300c 	ldrb	r3, [sp, #12]
   3fa34:	e1a04084 	lsl	r4, r4, #1
   3fa38:	e1520003 	cmp	r2, r3
   3fa3c:	0afffff1 	beq	3fa08 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0x7c>
   3fa40:	e1a0000a 	mov	r0, sl
   3fa44:	e28dd014 	add	sp, sp, #20
   3fa48:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fa4c:	e3a03001 	mov	r3, #1
   3fa50:	e1a01007 	mov	r1, r7
   3fa54:	e1a00006 	mov	r0, r6
   3fa58:	e58d8000 	str	r8, [sp]
   3fa5c:	e28d200c 	add	r2, sp, #12
   3fa60:	ebffd157 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3fa64:	e1a0b009 	mov	fp, r9
   3fa68:	e087a00b 	add	sl, r7, fp
   3fa6c:	e1a0100a 	mov	r1, sl
   3fa70:	e3a03001 	mov	r3, #1
   3fa74:	e28d200d 	add	r2, sp, #13
   3fa78:	e1a00006 	mov	r0, r6
   3fa7c:	e58d8000 	str	r8, [sp]
   3fa80:	ebffd14f 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3fa84:	e3a03001 	mov	r3, #1
   3fa88:	e28d200e 	add	r2, sp, #14
   3fa8c:	e1a01007 	mov	r1, r7
   3fa90:	e1a00006 	mov	r0, r6
   3fa94:	e58d8000 	str	r8, [sp]
   3fa98:	ebffd12c 	bl	33f50 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   3fa9c:	e5dd200e 	ldrb	r2, [sp, #14]
   3faa0:	e5dd300c 	ldrb	r3, [sp, #12]
   3faa4:	e1520003 	cmp	r2, r3
   3faa8:	1affffe4 	bne	3fa40 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0xb4>
   3faac:	e1a04009 	mov	r4, r9
   3fab0:	e3a03001 	mov	r3, #1
   3fab4:	e28d200f 	add	r2, sp, #15
   3fab8:	e0871004 	add	r1, r7, r4
   3fabc:	e1a00006 	mov	r0, r6
   3fac0:	e58d8000 	str	r8, [sp]
   3fac4:	ebffd121 	bl	33f50 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   3fac8:	e5dd200f 	ldrb	r2, [sp, #15]
   3facc:	e5dd300c 	ldrb	r3, [sp, #12]
   3fad0:	e1520003 	cmp	r2, r3
   3fad4:	1154000b 	cmpne	r4, fp
   3fad8:	e1a04084 	lsl	r4, r4, #1
   3fadc:	1affffd7 	bne	3fa40 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0xb4>
   3fae0:	e0153004 	ands	r3, r5, r4
   3fae4:	1afffff1 	bne	3fab0 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0x124>
   3fae8:	e1a0100a 	mov	r1, sl
   3faec:	e58d3000 	str	r3, [sp]
   3faf0:	e1a00006 	mov	r0, r6
   3faf4:	e3a03001 	mov	r3, #1
   3faf8:	e1a0b08b 	lsl	fp, fp, #1
   3fafc:	e28d200c 	add	r2, sp, #12
   3fb00:	ebffd12f 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3fb04:	e015a00b 	ands	sl, r5, fp
   3fb08:	1affffd6 	bne	3fa68 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0xdc>
   3fb0c:	eaffffcb 	b	3fa40 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0xb4>
   3fb10:	e59f4034 	ldr	r4, [pc, #52]	; 3fb4c <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0x1c0>
   3fb14:	e28d200d 	add	r2, sp, #13
   3fb18:	e0804004 	add	r4, r0, r4
   3fb1c:	e1a00004 	mov	r0, r4
   3fb20:	e3a03001 	mov	r3, #1
   3fb24:	e58d9000 	str	r9, [sp]
   3fb28:	ebffd125 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3fb2c:	e1a00004 	mov	r0, r4
   3fb30:	e1a01007 	mov	r1, r7
   3fb34:	e3a03001 	mov	r3, #1
   3fb38:	e58d9000 	str	r9, [sp]
   3fb3c:	e28d200c 	add	r2, sp, #12
   3fb40:	e1a0a009 	mov	sl, r9
   3fb44:	ebffd11e 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3fb48:	eaffffbc 	b	3fa40 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0xb4>
   3fb4c:	001006c8 	.word	0x001006c8

0003fb50 <memTestDevice(BusControl&, unsigned long, unsigned long)>:
   3fb50:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3fb54:	e1a05002 	mov	r5, r2
   3fb58:	e1a09000 	mov	r9, r0
   3fb5c:	e24dd014 	sub	sp, sp, #20
   3fb60:	e1a00002 	mov	r0, r2
   3fb64:	e1a07001 	mov	r7, r1
   3fb68:	ebffad1c 	bl	2afe0 <operator new[](unsigned int)>
   3fb6c:	e3550000 	cmp	r5, #0
   3fb70:	e1a02000 	mov	r2, r0
   3fb74:	0a000048 	beq	3fc9c <memTestDevice(BusControl&, unsigned long, unsigned long)+0x14c>
   3fb78:	e2406001 	sub	r6, r0, #1
   3fb7c:	e1a03006 	mov	r3, r6
   3fb80:	e2450001 	sub	r0, r5, #1
   3fb84:	e266c001 	rsb	ip, r6, #1
   3fb88:	e0820000 	add	r0, r2, r0
   3fb8c:	e08c1003 	add	r1, ip, r3
   3fb90:	e5e31001 	strb	r1, [r3, #1]!
   3fb94:	e1530000 	cmp	r3, r0
   3fb98:	1afffffb 	bne	3fb8c <memTestDevice(BusControl&, unsigned long, unsigned long)+0x3c>
   3fb9c:	e3a04000 	mov	r4, #0
   3fba0:	e59f8164 	ldr	r8, [pc, #356]	; 3fd0c <memTestDevice(BusControl&, unsigned long, unsigned long)+0x1bc>
   3fba4:	e1a03005 	mov	r3, r5
   3fba8:	e0898008 	add	r8, r9, r8
   3fbac:	e1a01007 	mov	r1, r7
   3fbb0:	e1a00008 	mov	r0, r8
   3fbb4:	e58d4000 	str	r4, [sp]
   3fbb8:	e58d200c 	str	r2, [sp, #12]
   3fbbc:	ebffd100 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3fbc0:	e1a03005 	mov	r3, r5
   3fbc4:	e59d200c 	ldr	r2, [sp, #12]
   3fbc8:	e1a00008 	mov	r0, r8
   3fbcc:	e1a01007 	mov	r1, r7
   3fbd0:	e58d4000 	str	r4, [sp]
   3fbd4:	ebffd0dd 	bl	33f50 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   3fbd8:	e3e09001 	mvn	r9, #1
   3fbdc:	e1a03006 	mov	r3, r6
   3fbe0:	e59d200c 	ldr	r2, [sp, #12]
   3fbe4:	ea000003 	b	3fbf8 <memTestDevice(BusControl&, unsigned long, unsigned long)+0xa8>
   3fbe8:	e1550001 	cmp	r5, r1
   3fbec:	e5c3c000 	strb	ip, [r3]
   3fbf0:	0a00000b 	beq	3fc24 <memTestDevice(BusControl&, unsigned long, unsigned long)+0xd4>
   3fbf4:	e1a04001 	mov	r4, r1
   3fbf8:	e6efc074 	uxtb	ip, r4
   3fbfc:	e28ce001 	add	lr, ip, #1
   3fc00:	e5f30001 	ldrb	r0, [r3, #1]!
   3fc04:	e6efe07e 	uxtb	lr, lr
   3fc08:	e150000e 	cmp	r0, lr
   3fc0c:	e2841001 	add	r1, r4, #1
   3fc10:	e049c00c 	sub	ip, r9, ip
   3fc14:	0afffff3 	beq	3fbe8 <memTestDevice(BusControl&, unsigned long, unsigned long)+0x98>
   3fc18:	e0870004 	add	r0, r7, r4
   3fc1c:	e28dd014 	add	sp, sp, #20
   3fc20:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3fc24:	e3a09000 	mov	r9, #0
   3fc28:	e1a03005 	mov	r3, r5
   3fc2c:	e1a01007 	mov	r1, r7
   3fc30:	e1a00008 	mov	r0, r8
   3fc34:	e58d9000 	str	r9, [sp]
   3fc38:	e58d200c 	str	r2, [sp, #12]
   3fc3c:	ebffd0e0 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3fc40:	e1a03005 	mov	r3, r5
   3fc44:	e1a01007 	mov	r1, r7
   3fc48:	e1a00008 	mov	r0, r8
   3fc4c:	e59d200c 	ldr	r2, [sp, #12]
   3fc50:	e58d9000 	str	r9, [sp]
   3fc54:	ebffd0bd 	bl	33f50 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   3fc58:	e1a05009 	mov	r5, r9
   3fc5c:	e3e01001 	mvn	r1, #1
   3fc60:	ea000002 	b	3fc70 <memTestDevice(BusControl&, unsigned long, unsigned long)+0x120>
   3fc64:	e1540005 	cmp	r4, r5
   3fc68:	e2855001 	add	r5, r5, #1
   3fc6c:	0a000007 	beq	3fc90 <memTestDevice(BusControl&, unsigned long, unsigned long)+0x140>
   3fc70:	e5f62001 	ldrb	r2, [r6, #1]!
   3fc74:	e0413005 	sub	r3, r1, r5
   3fc78:	e6ef3073 	uxtb	r3, r3
   3fc7c:	e1520003 	cmp	r2, r3
   3fc80:	0afffff7 	beq	3fc64 <memTestDevice(BusControl&, unsigned long, unsigned long)+0x114>
   3fc84:	e0870005 	add	r0, r7, r5
   3fc88:	e28dd014 	add	sp, sp, #20
   3fc8c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3fc90:	e3a00000 	mov	r0, #0
   3fc94:	e28dd014 	add	sp, sp, #20
   3fc98:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3fc9c:	e59f4068 	ldr	r4, [pc, #104]	; 3fd0c <memTestDevice(BusControl&, unsigned long, unsigned long)+0x1bc>
   3fca0:	e1a03005 	mov	r3, r5
   3fca4:	e0894004 	add	r4, r9, r4
   3fca8:	e1a01007 	mov	r1, r7
   3fcac:	e1a00004 	mov	r0, r4
   3fcb0:	e58d5000 	str	r5, [sp]
   3fcb4:	e58d200c 	str	r2, [sp, #12]
   3fcb8:	ebffd0c1 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3fcbc:	e1a03005 	mov	r3, r5
   3fcc0:	e1a01007 	mov	r1, r7
   3fcc4:	e59d200c 	ldr	r2, [sp, #12]
   3fcc8:	e1a00004 	mov	r0, r4
   3fccc:	e58d5000 	str	r5, [sp]
   3fcd0:	ebffd09e 	bl	33f50 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   3fcd4:	e1a03005 	mov	r3, r5
   3fcd8:	e1a01007 	mov	r1, r7
   3fcdc:	e59d200c 	ldr	r2, [sp, #12]
   3fce0:	e1a00004 	mov	r0, r4
   3fce4:	e58d5000 	str	r5, [sp]
   3fce8:	ebffd0b5 	bl	33fc4 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3fcec:	e1a00004 	mov	r0, r4
   3fcf0:	e1a01007 	mov	r1, r7
   3fcf4:	e1a03005 	mov	r3, r5
   3fcf8:	e59d200c 	ldr	r2, [sp, #12]
   3fcfc:	e58d5000 	str	r5, [sp]
   3fd00:	ebffd092 	bl	33f50 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   3fd04:	e1a00005 	mov	r0, r5
   3fd08:	eaffffc3 	b	3fc1c <memTestDevice(BusControl&, unsigned long, unsigned long)+0xcc>
   3fd0c:	001006c8 	.word	0x001006c8

0003fd10 <make_byte(int, char*, int, int)>:
   3fd10:	e1a0c001 	mov	ip, r1
   3fd14:	e1a01003 	mov	r1, r3
   3fd18:	e3500003 	cmp	r0, #3
   3fd1c:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   3fd20:	ea000013 	b	3fd74 <make_byte(int, char*, int, int)+0x64>
   3fd24:	0003fd44 	.word	0x0003fd44
   3fd28:	0003fd54 	.word	0x0003fd54
   3fd2c:	0003fd64 	.word	0x0003fd64
   3fd30:	0003fd34 	.word	0x0003fd34
   3fd34:	e6ef3072 	uxtb	r3, r2
   3fd38:	e1a0000c 	mov	r0, ip
   3fd3c:	e59f2034 	ldr	r2, [pc, #52]	; 3fd78 <make_byte(int, char*, int, int)+0x68>
   3fd40:	eaffb8d1 	b	2e08c <snprintf>
   3fd44:	e6ef3072 	uxtb	r3, r2
   3fd48:	e1a0000c 	mov	r0, ip
   3fd4c:	e59f2028 	ldr	r2, [pc, #40]	; 3fd7c <make_byte(int, char*, int, int)+0x6c>
   3fd50:	eaffb8cd 	b	2e08c <snprintf>
   3fd54:	e6ef3072 	uxtb	r3, r2
   3fd58:	e1a0000c 	mov	r0, ip
   3fd5c:	e59f201c 	ldr	r2, [pc, #28]	; 3fd80 <make_byte(int, char*, int, int)+0x70>
   3fd60:	eaffb8c9 	b	2e08c <snprintf>
   3fd64:	e6ef3072 	uxtb	r3, r2
   3fd68:	e1a0000c 	mov	r0, ip
   3fd6c:	e59f2010 	ldr	r2, [pc, #16]	; 3fd84 <make_byte(int, char*, int, int)+0x74>
   3fd70:	eaffb8c5 	b	2e08c <snprintf>
   3fd74:	e12fff1e 	bx	lr
   3fd78:	00049d28 	.word	0x00049d28
   3fd7c:	00049d10 	.word	0x00049d10
   3fd80:	00049d18 	.word	0x00049d18
   3fd84:	00049d20 	.word	0x00049d20

0003fd88 <make_ofs_byte(int, char*, int, int)>:
   3fd88:	e352007f 	cmp	r2, #127	; 0x7f
   3fd8c:	e1a0c001 	mov	ip, r1
   3fd90:	e1a01003 	mov	r1, r3
   3fd94:	c3a0302d 	movgt	r3, #45	; 0x2d
   3fd98:	d3a0302b 	movle	r3, #43	; 0x2b
   3fd9c:	c22220ff 	eorgt	r2, r2, #255	; 0xff
   3fda0:	c2822001 	addgt	r2, r2, #1
   3fda4:	e4cc3001 	strb	r3, [ip], #1
   3fda8:	e3500003 	cmp	r0, #3
   3fdac:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   3fdb0:	ea000013 	b	3fe04 <make_ofs_byte(int, char*, int, int)+0x7c>
   3fdb4:	0003fdd4 	.word	0x0003fdd4
   3fdb8:	0003fde4 	.word	0x0003fde4
   3fdbc:	0003fdf4 	.word	0x0003fdf4
   3fdc0:	0003fdc4 	.word	0x0003fdc4
   3fdc4:	e6ef3072 	uxtb	r3, r2
   3fdc8:	e1a0000c 	mov	r0, ip
   3fdcc:	e59f2034 	ldr	r2, [pc, #52]	; 3fe08 <make_ofs_byte(int, char*, int, int)+0x80>
   3fdd0:	eaffb8ad 	b	2e08c <snprintf>
   3fdd4:	e6ef3072 	uxtb	r3, r2
   3fdd8:	e1a0000c 	mov	r0, ip
   3fddc:	e59f2028 	ldr	r2, [pc, #40]	; 3fe0c <make_ofs_byte(int, char*, int, int)+0x84>
   3fde0:	eaffb8a9 	b	2e08c <snprintf>
   3fde4:	e6ef3072 	uxtb	r3, r2
   3fde8:	e1a0000c 	mov	r0, ip
   3fdec:	e59f201c 	ldr	r2, [pc, #28]	; 3fe10 <make_ofs_byte(int, char*, int, int)+0x88>
   3fdf0:	eaffb8a5 	b	2e08c <snprintf>
   3fdf4:	e6ef3072 	uxtb	r3, r2
   3fdf8:	e1a0000c 	mov	r0, ip
   3fdfc:	e59f2010 	ldr	r2, [pc, #16]	; 3fe14 <make_ofs_byte(int, char*, int, int)+0x8c>
   3fe00:	eaffb8a1 	b	2e08c <snprintf>
   3fe04:	e12fff1e 	bx	lr
   3fe08:	00049d28 	.word	0x00049d28
   3fe0c:	00049d10 	.word	0x00049d10
   3fe10:	00049d18 	.word	0x00049d18
   3fe14:	00049d20 	.word	0x00049d20

0003fe18 <make_word(int, char*, int, int)>:
   3fe18:	e1a0c001 	mov	ip, r1
   3fe1c:	e1a01003 	mov	r1, r3
   3fe20:	e3500003 	cmp	r0, #3
   3fe24:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   3fe28:	ea000013 	b	3fe7c <make_word(int, char*, int, int)+0x64>
   3fe2c:	0003fe4c 	.word	0x0003fe4c
   3fe30:	0003fe5c 	.word	0x0003fe5c
   3fe34:	0003fe6c 	.word	0x0003fe6c
   3fe38:	0003fe3c 	.word	0x0003fe3c
   3fe3c:	e6ff3072 	uxth	r3, r2
   3fe40:	e1a0000c 	mov	r0, ip
   3fe44:	e59f2034 	ldr	r2, [pc, #52]	; 3fe80 <make_word(int, char*, int, int)+0x68>
   3fe48:	eaffb88f 	b	2e08c <snprintf>
   3fe4c:	e6ff3072 	uxth	r3, r2
   3fe50:	e1a0000c 	mov	r0, ip
   3fe54:	e59f2028 	ldr	r2, [pc, #40]	; 3fe84 <make_word(int, char*, int, int)+0x6c>
   3fe58:	eaffb88b 	b	2e08c <snprintf>
   3fe5c:	e6ff3072 	uxth	r3, r2
   3fe60:	e1a0000c 	mov	r0, ip
   3fe64:	e59f201c 	ldr	r2, [pc, #28]	; 3fe88 <make_word(int, char*, int, int)+0x70>
   3fe68:	eaffb887 	b	2e08c <snprintf>
   3fe6c:	e6ff3072 	uxth	r3, r2
   3fe70:	e1a0000c 	mov	r0, ip
   3fe74:	e59f2010 	ldr	r2, [pc, #16]	; 3fe8c <make_word(int, char*, int, int)+0x74>
   3fe78:	eaffb883 	b	2e08c <snprintf>
   3fe7c:	e12fff1e 	bx	lr
   3fe80:	00049d48 	.word	0x00049d48
   3fe84:	00049d30 	.word	0x00049d30
   3fe88:	00049d38 	.word	0x00049d38
   3fe8c:	00049d40 	.word	0x00049d40

0003fe90 <getOPdata(unsigned char*, unsigned long)>:
   3fe90:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3fe94:	e7d03001 	ldrb	r3, [r0, r1]
   3fe98:	e59f5094 	ldr	r5, [pc, #148]	; 3ff34 <getOPdata(unsigned char*, unsigned long)+0xa4>
   3fe9c:	e0632183 	rsb	r2, r3, r3, lsl #3
   3fea0:	e795c102 	ldr	ip, [r5, r2, lsl #2]
   3fea4:	e24dd014 	sub	sp, sp, #20
   3fea8:	e59f2088 	ldr	r2, [pc, #136]	; 3ff38 <getOPdata(unsigned char*, unsigned long)+0xa8>
   3feac:	e28d7010 	add	r7, sp, #16
   3feb0:	e35c0000 	cmp	ip, #0
   3feb4:	e1a0e000 	mov	lr, r0
   3feb8:	e1a06001 	mov	r6, r1
   3febc:	e8920007 	ldm	r2, {r0, r1, r2}
   3fec0:	e9070007 	stmdb	r7, {r0, r1, r2}
   3fec4:	aa000017 	bge	3ff28 <getOPdata(unsigned char*, unsigned long)+0x98>
   3fec8:	e59d3008 	ldr	r3, [sp, #8]
   3fecc:	e08ee006 	add	lr, lr, r6
   3fed0:	e7de3003 	ldrb	r3, [lr, r3]
   3fed4:	e26c2000 	rsb	r2, ip, #0
   3fed8:	e0621182 	rsb	r1, r2, r2, lsl #3
   3fedc:	e0630183 	rsb	r0, r3, r3, lsl #3
   3fee0:	e1a01501 	lsl	r1, r1, #10
   3fee4:	e0811100 	add	r1, r1, r0, lsl #2
   3fee8:	e7951001 	ldr	r1, [r5, r1]
   3feec:	e1a04183 	lsl	r4, r3, #3
   3fef0:	e3510000 	cmp	r1, #0
   3fef4:	b59d300c 	ldrlt	r3, [sp, #12]
   3fef8:	e1a00182 	lsl	r0, r2, #3
   3fefc:	b2612000 	rsblt	r2, r1, #0
   3ff00:	b7de3003 	ldrblt	r3, [lr, r3]
   3ff04:	b1a00182 	lsllt	r0, r2, #3
   3ff08:	e0400002 	sub	r0, r0, r2
   3ff0c:	b1a04183 	lsllt	r4, r3, #3
   3ff10:	e1a00500 	lsl	r0, r0, #10
   3ff14:	e0443003 	sub	r3, r4, r3
   3ff18:	e0800103 	add	r0, r0, r3, lsl #2
   3ff1c:	e0850000 	add	r0, r5, r0
   3ff20:	e28dd014 	add	sp, sp, #20
   3ff24:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3ff28:	e3a00000 	mov	r0, #0
   3ff2c:	e1a04183 	lsl	r4, r3, #3
   3ff30:	eafffff7 	b	3ff14 <getOPdata(unsigned char*, unsigned long)+0x84>
   3ff34:	000509f0 	.word	0x000509f0
   3ff38:	00049f50 	.word	0x00049f50

0003ff3c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)>:
   3ff3c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ff40:	e1a05001 	mov	r5, r1
   3ff44:	e1a04002 	mov	r4, r2
   3ff48:	e24ddf4f 	sub	sp, sp, #316	; 0x13c
   3ff4c:	e59fe64c 	ldr	lr, [pc, #1612]	; 405a0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x664>
   3ff50:	e28dc01c 	add	ip, sp, #28
   3ff54:	e1a06003 	mov	r6, r3
   3ff58:	e58d0008 	str	r0, [sp, #8]
   3ff5c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3ff60:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3ff64:	e89e0007 	ldm	lr, {r0, r1, r2}
   3ff68:	e1a03005 	mov	r3, r5
   3ff6c:	e59d9168 	ldr	r9, [sp, #360]	; 0x168
   3ff70:	e58d5010 	str	r5, [sp, #16]
   3ff74:	e3590000 	cmp	r9, #0
   3ff78:	e58d4004 	str	r4, [sp, #4]
   3ff7c:	e88c0007 	stm	ip, {r0, r1, r2}
   3ff80:	059d3010 	ldreq	r3, [sp, #16]
   3ff84:	059d2004 	ldreq	r2, [sp, #4]
   3ff88:	e59d516c 	ldr	r5, [sp, #364]	; 0x16c
   3ff8c:	00833002 	addeq	r3, r3, r2
   3ff90:	10833004 	addne	r3, r3, r4
   3ff94:	159f2608 	ldrne	r2, [pc, #1544]	; 405a4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x668>
   3ff98:	059f2608 	ldreq	r2, [pc, #1544]	; 405a8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x66c>
   3ff9c:	e1a01005 	mov	r1, r5
   3ffa0:	e1a00006 	mov	r0, r6
   3ffa4:	e59d7164 	ldr	r7, [sp, #356]	; 0x164
   3ffa8:	ebffb837 	bl	2e08c <snprintf>
   3ffac:	e99d0808 	ldmib	sp, {r3, fp}
   3ffb0:	e7db3003 	ldrb	r3, [fp, r3]
   3ffb4:	e59fc5f0 	ldr	ip, [pc, #1520]	; 405ac <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x670>
   3ffb8:	e0632183 	rsb	r2, r3, r3, lsl #3
   3ffbc:	e79ce102 	ldr	lr, [ip, r2, lsl #2]
   3ffc0:	e59f25e8 	ldr	r2, [pc, #1512]	; 405b0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x674>
   3ffc4:	e28da038 	add	sl, sp, #56	; 0x38
   3ffc8:	e1a08000 	mov	r8, r0
   3ffcc:	e8920007 	ldm	r2, {r0, r1, r2}
   3ffd0:	e88a0007 	stm	sl, {r0, r1, r2}
   3ffd4:	e59d2004 	ldr	r2, [sp, #4]
   3ffd8:	e35e0000 	cmp	lr, #0
   3ffdc:	e1a04003 	mov	r4, r3
   3ffe0:	e1a00183 	lsl	r0, r3, #3
   3ffe4:	e08bb002 	add	fp, fp, r2
   3ffe8:	aa00011f 	bge	4046c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x530>
   3ffec:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
   3fff0:	e26e1000 	rsb	r1, lr, #0
   3fff4:	e7db4002 	ldrb	r4, [fp, r2]
   3fff8:	e0612181 	rsb	r2, r1, r1, lsl #3
   3fffc:	e0640184 	rsb	r0, r4, r4, lsl #3
   40000:	e1a02502 	lsl	r2, r2, #10
   40004:	e0822100 	add	r2, r2, r0, lsl #2
   40008:	e79ce002 	ldr	lr, [ip, r2]
   4000c:	e1a02181 	lsl	r2, r1, #3
   40010:	e35e0000 	cmp	lr, #0
   40014:	b59d2040 	ldrlt	r2, [sp, #64]	; 0x40
   40018:	b26e1000 	rsblt	r1, lr, #0
   4001c:	e1a00184 	lsl	r0, r4, #3
   40020:	b7db4002 	ldrblt	r4, [fp, r2]
   40024:	b1a02181 	lsllt	r2, r1, #3
   40028:	e0422001 	sub	r2, r2, r1
   4002c:	b1a00184 	lsllt	r0, r4, #3
   40030:	e1a02502 	lsl	r2, r2, #10
   40034:	e0400004 	sub	r0, r0, r4
   40038:	e0820100 	add	r0, r2, r0, lsl #2
   4003c:	e3570000 	cmp	r7, #0
   40040:	e08c7000 	add	r7, ip, r0
   40044:	0a000001 	beq	40050 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x114>
   40048:	e35300ff 	cmp	r3, #255	; 0xff
   4004c:	0a000134 	beq	40524 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x5e8>
   40050:	e79c2000 	ldr	r2, [ip, r0]
   40054:	e3590000 	cmp	r9, #0
   40058:	0a000024 	beq	400f0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x1b4>
   4005c:	e3520000 	cmp	r2, #0
   40060:	da000011 	ble	400ac <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x170>
   40064:	e59d2004 	ldr	r2, [sp, #4]
   40068:	e59f9544 	ldr	r9, [pc, #1348]	; 405b4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x678>
   4006c:	e2824001 	add	r4, r2, #1
   40070:	e59d2008 	ldr	r2, [sp, #8]
   40074:	e0824004 	add	r4, r2, r4
   40078:	ea000000 	b	40080 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x144>
   4007c:	e4d43001 	ldrb	r3, [r4], #1
   40080:	e1a02009 	mov	r2, r9
   40084:	e0860008 	add	r0, r6, r8
   40088:	e1a01005 	mov	r1, r5
   4008c:	ebffb7fe 	bl	2e08c <snprintf>
   40090:	e5973000 	ldr	r3, [r7]
   40094:	e044200b 	sub	r2, r4, fp
   40098:	e1530002 	cmp	r3, r2
   4009c:	e0888000 	add	r8, r8, r0
   400a0:	cafffff5 	bgt	4007c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x140>
   400a4:	e3530004 	cmp	r3, #4
   400a8:	ca00000a 	bgt	400d8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x19c>
   400ac:	e3a04005 	mov	r4, #5
   400b0:	e59f9500 	ldr	r9, [pc, #1280]	; 405b8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x67c>
   400b4:	e0860008 	add	r0, r6, r8
   400b8:	e1a02005 	mov	r2, r5
   400bc:	e1a01009 	mov	r1, r9
   400c0:	ebffb7a1 	bl	2df4c <strlcat>
   400c4:	e5973000 	ldr	r3, [r7]
   400c8:	e2444001 	sub	r4, r4, #1
   400cc:	e1530004 	cmp	r3, r4
   400d0:	e2888002 	add	r8, r8, #2
   400d4:	bafffff6 	blt	400b4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x178>
   400d8:	e59f34dc 	ldr	r3, [pc, #1244]	; 405bc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x680>
   400dc:	e59f24dc 	ldr	r2, [pc, #1244]	; 405c0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x684>
   400e0:	e1a01003 	mov	r1, r3
   400e4:	e58d300c 	str	r3, [sp, #12]
   400e8:	e5973008 	ldr	r3, [r7, #8]
   400ec:	ea00001d 	b	40168 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x22c>
   400f0:	e3520000 	cmp	r2, #0
   400f4:	da000011 	ble	40140 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x204>
   400f8:	e59d2004 	ldr	r2, [sp, #4]
   400fc:	e59f94c0 	ldr	r9, [pc, #1216]	; 405c4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x688>
   40100:	e2824001 	add	r4, r2, #1
   40104:	e59d2008 	ldr	r2, [sp, #8]
   40108:	e0824004 	add	r4, r2, r4
   4010c:	ea000000 	b	40114 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x1d8>
   40110:	e4d43001 	ldrb	r3, [r4], #1
   40114:	e1a02009 	mov	r2, r9
   40118:	e0860008 	add	r0, r6, r8
   4011c:	e1a01005 	mov	r1, r5
   40120:	ebffb7d9 	bl	2e08c <snprintf>
   40124:	e5973000 	ldr	r3, [r7]
   40128:	e044200b 	sub	r2, r4, fp
   4012c:	e1530002 	cmp	r3, r2
   40130:	e0888000 	add	r8, r8, r0
   40134:	cafffff5 	bgt	40110 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x1d4>
   40138:	e3530004 	cmp	r3, #4
   4013c:	0a00010d 	beq	40578 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x63c>
   40140:	e0860008 	add	r0, r6, r8
   40144:	e1a01005 	mov	r1, r5
   40148:	e59f2478 	ldr	r2, [pc, #1144]	; 405c8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x68c>
   4014c:	ebffb7ce 	bl	2e08c <snprintf>
   40150:	e0808008 	add	r8, r0, r8
   40154:	e59f3460 	ldr	r3, [pc, #1120]	; 405bc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x680>
   40158:	e59f246c 	ldr	r2, [pc, #1132]	; 405cc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x690>
   4015c:	e1a01003 	mov	r1, r3
   40160:	e58d300c 	str	r3, [sp, #12]
   40164:	e5973008 	ldr	r3, [r7, #8]
   40168:	e7913103 	ldr	r3, [r1, r3, lsl #2]
   4016c:	e0860008 	add	r0, r6, r8
   40170:	e1a01005 	mov	r1, r5
   40174:	ebffb7c4 	bl	2e08c <snprintf>
   40178:	e597300c 	ldr	r3, [r7, #12]
   4017c:	e0884000 	add	r4, r8, r0
   40180:	e3530000 	cmp	r3, #0
   40184:	0a000043 	beq	40298 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x35c>
   40188:	e5973004 	ldr	r3, [r7, #4]
   4018c:	e2879010 	add	r9, r7, #16
   40190:	da000040 	ble	40298 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x35c>
   40194:	e58db014 	str	fp, [sp, #20]
   40198:	e1a0b003 	mov	fp, r3
   4019c:	e5993000 	ldr	r3, [r9]
   401a0:	e3a08000 	mov	r8, #0
   401a4:	e35300ff 	cmp	r3, #255	; 0xff
   401a8:	da00002a 	ble	40258 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x31c>
   401ac:	e3530c02 	cmp	r3, #512	; 0x200
   401b0:	0a0000af 	beq	40474 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x538>
   401b4:	ca000070 	bgt	4037c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x440>
   401b8:	e2433c01 	sub	r3, r3, #256	; 0x100
   401bc:	e3530004 	cmp	r3, #4
   401c0:	8a000018 	bhi	40228 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x2ec>
   401c4:	e3530004 	cmp	r3, #4
   401c8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   401cc:	ea000015 	b	40228 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x2ec>
   401d0:	00040304 	.word	0x00040304
   401d4:	00040338 	.word	0x00040338
   401d8:	000402b4 	.word	0x000402b4
   401dc:	00040304 	.word	0x00040304
   401e0:	000401e4 	.word	0x000401e4
   401e4:	e59d3008 	ldr	r3, [sp, #8]
   401e8:	e59d2004 	ldr	r2, [sp, #4]
   401ec:	e083300b 	add	r3, r3, fp
   401f0:	e7d32002 	ldrb	r2, [r3, r2]
   401f4:	e1a0100a 	mov	r1, sl
   401f8:	e1a03005 	mov	r3, r5
   401fc:	e59d0160 	ldr	r0, [sp, #352]	; 0x160
   40200:	ebfffec2 	bl	3fd10 <make_byte(int, char*, int, int)>
   40204:	e0860004 	add	r0, r6, r4
   40208:	e1a0200a 	mov	r2, sl
   4020c:	e1a01005 	mov	r1, r5
   40210:	ebffb79d 	bl	2e08c <snprintf>
   40214:	e1a03000 	mov	r3, r0
   40218:	e1a0000a 	mov	r0, sl
   4021c:	e28bb001 	add	fp, fp, #1
   40220:	e0844003 	add	r4, r4, r3
   40224:	ebffa786 	bl	2a044 <strlen>
   40228:	e597300c 	ldr	r3, [r7, #12]
   4022c:	e2888001 	add	r8, r8, #1
   40230:	e1530008 	cmp	r3, r8
   40234:	da000017 	ble	40298 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x35c>
   40238:	e0860004 	add	r0, r6, r4
   4023c:	e1a01005 	mov	r1, r5
   40240:	e59f2388 	ldr	r2, [pc, #904]	; 405d0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x694>
   40244:	ebffb790 	bl	2e08c <snprintf>
   40248:	e5993000 	ldr	r3, [r9]
   4024c:	e0844000 	add	r4, r4, r0
   40250:	e35300ff 	cmp	r3, #255	; 0xff
   40254:	caffffd4 	bgt	401ac <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x270>
   40258:	e59d200c 	ldr	r2, [sp, #12]
   4025c:	e1a01005 	mov	r1, r5
   40260:	e0823103 	add	r3, r2, r3, lsl #2
   40264:	e5932118 	ldr	r2, [r3, #280]	; 0x118
   40268:	e0860004 	add	r0, r6, r4
   4026c:	ebffb786 	bl	2e08c <snprintf>
   40270:	e4993004 	ldr	r3, [r9], #4
   40274:	e59d200c 	ldr	r2, [sp, #12]
   40278:	e0844000 	add	r4, r4, r0
   4027c:	e0823103 	add	r3, r2, r3, lsl #2
   40280:	e5930118 	ldr	r0, [r3, #280]	; 0x118
   40284:	ebffa76e 	bl	2a044 <strlen>
   40288:	e597300c 	ldr	r3, [r7, #12]
   4028c:	e2888001 	add	r8, r8, #1
   40290:	e1530008 	cmp	r3, r8
   40294:	caffffe7 	bgt	40238 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x2fc>
   40298:	e1a01005 	mov	r1, r5
   4029c:	e59f2330 	ldr	r2, [pc, #816]	; 405d4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x698>
   402a0:	e0860004 	add	r0, r6, r4
   402a4:	ebffb778 	bl	2e08c <snprintf>
   402a8:	e5970000 	ldr	r0, [r7]
   402ac:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   402b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   402b4:	e59d3008 	ldr	r3, [sp, #8]
   402b8:	e59d2004 	ldr	r2, [sp, #4]
   402bc:	e083300b 	add	r3, r3, fp
   402c0:	e7d32002 	ldrb	r2, [r3, r2]
   402c4:	e1a0100a 	mov	r1, sl
   402c8:	e1a03005 	mov	r3, r5
   402cc:	e59d0160 	ldr	r0, [sp, #352]	; 0x160
   402d0:	ebfffe8e 	bl	3fd10 <make_byte(int, char*, int, int)>
   402d4:	e1a0300a 	mov	r3, sl
   402d8:	e59f22f8 	ldr	r2, [pc, #760]	; 405d8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x69c>
   402dc:	e1a01005 	mov	r1, r5
   402e0:	e0860004 	add	r0, r6, r4
   402e4:	ebffb768 	bl	2e08c <snprintf>
   402e8:	e1a03000 	mov	r3, r0
   402ec:	e1a0000a 	mov	r0, sl
   402f0:	e2899004 	add	r9, r9, #4
   402f4:	e28bb001 	add	fp, fp, #1
   402f8:	e0844003 	add	r4, r4, r3
   402fc:	ebffa750 	bl	2a044 <strlen>
   40300:	eaffffc8 	b	40228 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x2ec>
   40304:	e59d3008 	ldr	r3, [sp, #8]
   40308:	e59d2004 	ldr	r2, [sp, #4]
   4030c:	e083300b 	add	r3, r3, fp
   40310:	e1a0100a 	mov	r1, sl
   40314:	e7d32002 	ldrb	r2, [r3, r2]
   40318:	e59d0160 	ldr	r0, [sp, #352]	; 0x160
   4031c:	e1a03005 	mov	r3, r5
   40320:	ebfffe7a 	bl	3fd10 <make_byte(int, char*, int, int)>
   40324:	e1a0200a 	mov	r2, sl
   40328:	e1a01005 	mov	r1, r5
   4032c:	e0860004 	add	r0, r6, r4
   40330:	ebffb755 	bl	2e08c <snprintf>
   40334:	eaffffeb 	b	402e8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x3ac>
   40338:	e59d3014 	ldr	r3, [sp, #20]
   4033c:	e1a0100a 	mov	r1, sl
   40340:	e5d32000 	ldrb	r2, [r3]
   40344:	e59d0160 	ldr	r0, [sp, #352]	; 0x160
   40348:	e1a03005 	mov	r3, r5
   4034c:	e24220c7 	sub	r2, r2, #199	; 0xc7
   40350:	ebfffe6e 	bl	3fd10 <make_byte(int, char*, int, int)>
   40354:	e0860004 	add	r0, r6, r4
   40358:	e1a0200a 	mov	r2, sl
   4035c:	e1a01005 	mov	r1, r5
   40360:	ebffb749 	bl	2e08c <snprintf>
   40364:	e1a03000 	mov	r3, r0
   40368:	e1a0000a 	mov	r0, sl
   4036c:	e2899004 	add	r9, r9, #4
   40370:	e0844003 	add	r4, r4, r3
   40374:	ebffa732 	bl	2a044 <strlen>
   40378:	eaffffaa 	b	40228 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x2ec>
   4037c:	e3530b02 	cmp	r3, #2048	; 0x800
   40380:	0a000046 	beq	404a0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x564>
   40384:	da000019 	ble	403f0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x4b4>
   40388:	e59f224c 	ldr	r2, [pc, #588]	; 405dc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x6a0>
   4038c:	e1530002 	cmp	r3, r2
   40390:	1affffa4 	bne	40228 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x2ec>
   40394:	e59d3004 	ldr	r3, [sp, #4]
   40398:	e59d0008 	ldr	r0, [sp, #8]
   4039c:	e08b3003 	add	r3, fp, r3
   403a0:	e0802003 	add	r2, r0, r3
   403a4:	e5d21001 	ldrb	r1, [r2, #1]
   403a8:	e7d02003 	ldrb	r2, [r0, r3]
   403ac:	e1a03005 	mov	r3, r5
   403b0:	e0822401 	add	r2, r2, r1, lsl #8
   403b4:	e59d0160 	ldr	r0, [sp, #352]	; 0x160
   403b8:	e1a0100a 	mov	r1, sl
   403bc:	ebfffe95 	bl	3fe18 <make_word(int, char*, int, int)>
   403c0:	e1a0300a 	mov	r3, sl
   403c4:	e1a01005 	mov	r1, r5
   403c8:	e59f2208 	ldr	r2, [pc, #520]	; 405d8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x69c>
   403cc:	e0860004 	add	r0, r6, r4
   403d0:	ebffb72d 	bl	2e08c <snprintf>
   403d4:	e1a03000 	mov	r3, r0
   403d8:	e1a0000a 	mov	r0, sl
   403dc:	e0844003 	add	r4, r4, r3
   403e0:	e2899004 	add	r9, r9, #4
   403e4:	ebffa716 	bl	2a044 <strlen>
   403e8:	e28bb002 	add	fp, fp, #2
   403ec:	eaffff8d 	b	40228 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x2ec>
   403f0:	e59f21e8 	ldr	r2, [pc, #488]	; 405e0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x6a4>
   403f4:	e1530002 	cmp	r3, r2
   403f8:	0a00003e 	beq	404f8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x5bc>
   403fc:	e3530b01 	cmp	r3, #1024	; 0x400
   40400:	1affff88 	bne	40228 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x2ec>
   40404:	e59d3008 	ldr	r3, [sp, #8]
   40408:	e59d2004 	ldr	r2, [sp, #4]
   4040c:	e083300b 	add	r3, r3, fp
   40410:	e7d32002 	ldrb	r2, [r3, r2]
   40414:	e59d3004 	ldr	r3, [sp, #4]
   40418:	e59d1010 	ldr	r1, [sp, #16]
   4041c:	e352007f 	cmp	r2, #127	; 0x7f
   40420:	e2833002 	add	r3, r3, #2
   40424:	c2422c01 	subgt	r2, r2, #256	; 0x100
   40428:	e0833001 	add	r3, r3, r1
   4042c:	e59d0160 	ldr	r0, [sp, #352]	; 0x160
   40430:	e1a0100a 	mov	r1, sl
   40434:	e0832002 	add	r2, r3, r2
   40438:	e1a03005 	mov	r3, r5
   4043c:	ebfffe75 	bl	3fe18 <make_word(int, char*, int, int)>
   40440:	e0860004 	add	r0, r6, r4
   40444:	e1a0200a 	mov	r2, sl
   40448:	e1a01005 	mov	r1, r5
   4044c:	ebffb70e 	bl	2e08c <snprintf>
   40450:	e1a03000 	mov	r3, r0
   40454:	e1a0000a 	mov	r0, sl
   40458:	e28bb001 	add	fp, fp, #1
   4045c:	e2899004 	add	r9, r9, #4
   40460:	e0844003 	add	r4, r4, r3
   40464:	ebffa6f6 	bl	2a044 <strlen>
   40468:	eaffff6e 	b	40228 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x2ec>
   4046c:	e3a02000 	mov	r2, #0
   40470:	eafffeef 	b	40034 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0xf8>
   40474:	e59d3008 	ldr	r3, [sp, #8]
   40478:	e59d2004 	ldr	r2, [sp, #4]
   4047c:	e083300b 	add	r3, r3, fp
   40480:	e7d32002 	ldrb	r2, [r3, r2]
   40484:	e1a0100a 	mov	r1, sl
   40488:	e1a03005 	mov	r3, r5
   4048c:	e59d0160 	ldr	r0, [sp, #352]	; 0x160
   40490:	ebfffe3c 	bl	3fd88 <make_ofs_byte(int, char*, int, int)>
   40494:	e1a0300a 	mov	r3, sl
   40498:	e59f2144 	ldr	r2, [pc, #324]	; 405e4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x6a8>
   4049c:	eaffff8e 	b	402dc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x3a0>
   404a0:	e59d3004 	ldr	r3, [sp, #4]
   404a4:	e59d0008 	ldr	r0, [sp, #8]
   404a8:	e08b3003 	add	r3, fp, r3
   404ac:	e0802003 	add	r2, r0, r3
   404b0:	e5d21001 	ldrb	r1, [r2, #1]
   404b4:	e7d02003 	ldrb	r2, [r0, r3]
   404b8:	e1a03005 	mov	r3, r5
   404bc:	e59d0160 	ldr	r0, [sp, #352]	; 0x160
   404c0:	e0822401 	add	r2, r2, r1, lsl #8
   404c4:	e1a0100a 	mov	r1, sl
   404c8:	ebfffe52 	bl	3fe18 <make_word(int, char*, int, int)>
   404cc:	e0860004 	add	r0, r6, r4
   404d0:	e1a0200a 	mov	r2, sl
   404d4:	e1a01005 	mov	r1, r5
   404d8:	ebffb6eb 	bl	2e08c <snprintf>
   404dc:	e1a03000 	mov	r3, r0
   404e0:	e1a0000a 	mov	r0, sl
   404e4:	e2899004 	add	r9, r9, #4
   404e8:	e28bb002 	add	fp, fp, #2
   404ec:	e0844003 	add	r4, r4, r3
   404f0:	ebffa6d3 	bl	2a044 <strlen>
   404f4:	eaffff4b 	b	40228 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x2ec>
   404f8:	e59d3008 	ldr	r3, [sp, #8]
   404fc:	e59d2004 	ldr	r2, [sp, #4]
   40500:	e083300b 	add	r3, r3, fp
   40504:	e7d32002 	ldrb	r2, [r3, r2]
   40508:	e1a0100a 	mov	r1, sl
   4050c:	e1a03005 	mov	r3, r5
   40510:	e59d0160 	ldr	r0, [sp, #352]	; 0x160
   40514:	ebfffe1b 	bl	3fd88 <make_ofs_byte(int, char*, int, int)>
   40518:	e1a0300a 	mov	r3, sl
   4051c:	e59f20c4 	ldr	r2, [pc, #196]	; 405e8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x6ac>
   40520:	eaffff6d 	b	402dc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x3a0>
   40524:	e5db2001 	ldrb	r2, [fp, #1]
   40528:	e35200ff 	cmp	r2, #255	; 0xff
   4052c:	1afffec7 	bne	40050 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x114>
   40530:	e1a0000b 	mov	r0, fp
   40534:	e59d401c 	ldr	r4, [sp, #28]
   40538:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   4053c:	e2841001 	add	r1, r4, #1
   40540:	e2847004 	add	r7, r4, #4
   40544:	e0424004 	sub	r4, r2, r4
   40548:	e1570001 	cmp	r7, r1
   4054c:	e1a02001 	mov	r2, r1
   40550:	e084e001 	add	lr, r4, r1
   40554:	0a00000d 	beq	40590 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x654>
   40558:	e5f0c001 	ldrb	ip, [r0, #1]!
   4055c:	e2821001 	add	r1, r2, #1
   40560:	e35c00ff 	cmp	ip, #255	; 0xff
   40564:	0afffff7 	beq	40548 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x60c>
   40568:	e58d201c 	str	r2, [sp, #28]
   4056c:	e58de028 	str	lr, [sp, #40]	; 0x28
   40570:	e28d701c 	add	r7, sp, #28
   40574:	eafffeb6 	b	40054 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x118>
   40578:	e0860008 	add	r0, r6, r8
   4057c:	e1a01005 	mov	r1, r5
   40580:	e59f2064 	ldr	r2, [pc, #100]	; 405ec <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x6b0>
   40584:	ebffb6c0 	bl	2e08c <snprintf>
   40588:	e0888000 	add	r8, r8, r0
   4058c:	eafffef0 	b	40154 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x218>
   40590:	e28d701c 	add	r7, sp, #28
   40594:	e58d101c 	str	r1, [sp, #28]
   40598:	e58de028 	str	lr, [sp, #40]	; 0x28
   4059c:	eafffeac 	b	40054 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int, unsigned long)+0x118>
   405a0:	00049f5c 	.word	0x00049f5c
   405a4:	00049d50 	.word	0x00049d50
   405a8:	00049d58 	.word	0x00049d58
   405ac:	000509f0 	.word	0x000509f0
   405b0:	00049f50 	.word	0x00049f50
   405b4:	00049d28 	.word	0x00049d28
   405b8:	0004089c 	.word	0x0004089c
   405bc:	000507c4 	.word	0x000507c4
   405c0:	00049d60 	.word	0x00049d60
   405c4:	00042070 	.word	0x00042070
   405c8:	00049d64 	.word	0x00049d64
   405cc:	00049d68 	.word	0x00049d68
   405d0:	0004358c 	.word	0x0004358c
   405d4:	00049d84 	.word	0x00049d84
   405d8:	00049d6c 	.word	0x00049d6c
   405dc:	00000801 	.word	0x00000801
   405e0:	00000201 	.word	0x00000201
   405e4:	00049d74 	.word	0x00049d74
   405e8:	00049d7c 	.word	0x00049d7c
   405ec:	000434d4 	.word	0x000434d4
