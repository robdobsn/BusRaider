
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea008400 	b	29068 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e92d4010 	push	{r4, lr}
    806c:	e24dd945 	sub	sp, sp, #1130496	; 0x114000
    8070:	e24dde75 	sub	sp, sp, #1872	; 0x750
    8074:	e28d0004 	add	r0, sp, #4
    8078:	eb00000e 	bl	80b8 <CKernel::CKernel()>
    807c:	e28d0004 	add	r0, sp, #4
    8080:	eb00007e 	bl	8280 <CKernel::Initialize()>
    8084:	e2504000 	subs	r4, r0, #0
    8088:	0a000004 	beq	80a0 <main+0x38>
    808c:	e28d0004 	add	r0, sp, #4
    8090:	eb0000ae 	bl	8350 <CKernel::Run()>
    8094:	e2404002 	sub	r4, r0, #2
    8098:	e16f4f14 	clz	r4, r4
    809c:	e1a042a4 	lsr	r4, r4, #5
    80a0:	e28d0004 	add	r0, sp, #4
    80a4:	eb00004d 	bl	81e0 <CKernel::~CKernel()>
    80a8:	e1a00004 	mov	r0, r4
    80ac:	e28dd945 	add	sp, sp, #1130496	; 0x114000
    80b0:	e28dde75 	add	sp, sp, #1872	; 0x750
    80b4:	e8bd8010 	pop	{r4, pc}

000080b8 <CKernel::CKernel()>:
    80b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80bc:	e1a04000 	mov	r4, r0
    80c0:	e24dd018 	sub	sp, sp, #24
    80c4:	eb00c815 	bl	3a120 <Display::Display()>
    80c8:	e2840a01 	add	r0, r4, #4096	; 0x1000
    80cc:	e2845c11 	add	r5, r4, #4352	; 0x1100
    80d0:	e3a01001 	mov	r1, #1
    80d4:	e2800030 	add	r0, r0, #48	; 0x30
    80d8:	eb008dd4 	bl	2b830 <CMemorySystem::CMemorySystem(bool)>
    80dc:	e2858018 	add	r8, r5, #24
    80e0:	e3a01000 	mov	r1, #0
    80e4:	e285000c 	add	r0, r5, #12
    80e8:	eb007135 	bl	245c4 <CActLED::CActLED(bool)>
    80ec:	e2845d65 	add	r5, r4, #6464	; 0x1940
    80f0:	e1a00008 	mov	r0, r8
    80f4:	eb00785c 	bl	2626c <CKernelOptions::CKernelOptions()>
    80f8:	e2850034 	add	r0, r5, #52	; 0x34
    80fc:	eb007377 	bl	24ee0 <CDeviceNameService::CDeviceNameService()>
    8100:	e2846d66 	add	r6, r4, #6528	; 0x1980
    8104:	e285003c 	add	r0, r5, #60	; 0x3c
    8108:	eb008ccd 	bl	2b444 <CExceptionHandler::CExceptionHandler()>
    810c:	e1a00006 	mov	r0, r6
    8110:	eb008f12 	bl	2bd60 <CInterruptSystem::CInterruptSystem()>
    8114:	e3a03000 	mov	r3, #0
    8118:	e2847d6f 	add	r7, r4, #7104	; 0x1bc0
    811c:	e1a02003 	mov	r2, r3
    8120:	e1a01006 	mov	r1, r6
    8124:	e1a00007 	mov	r0, r7
    8128:	e1a05003 	mov	r5, r3
    812c:	eb00936a 	bl	2cedc <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)>
    8130:	e2842c6a 	add	r2, r4, #27136	; 0x6a00
    8134:	e28220f0 	add	r2, r2, #240	; 0xf0
    8138:	e1a01006 	mov	r1, r6
    813c:	e1a00002 	mov	r0, r2
    8140:	e58d2014 	str	r2, [sp, #20]
    8144:	eb008409 	bl	29170 <CTimer::CTimer(CInterruptSystem*)>
    8148:	e1a00008 	mov	r0, r8
    814c:	eb007811 	bl	26198 <CKernelOptions::GetLogLevel() const>
    8150:	e1a01000 	mov	r1, r0
    8154:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    8158:	e59d2014 	ldr	r2, [sp, #20]
    815c:	e2848b1b 	add	r8, r4, #27648	; 0x6c00
    8160:	e280002c 	add	r0, r0, #44	; 0x2c
    8164:	eb007954 	bl	266bc <CLogger::CLogger(unsigned int, CTimer*)>
    8168:	e1a01006 	mov	r1, r6
    816c:	e59d2014 	ldr	r2, [sp, #20]
    8170:	e2880024 	add	r0, r8, #36	; 0x24
    8174:	eb0006af 	bl	9c38 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>
    8178:	e28800a8 	add	r0, r8, #168	; 0xa8
    817c:	eb006f56 	bl	23edc <CScheduler::CScheduler()>
    8180:	e59fc050 	ldr	ip, [pc, #80]	; 81d8 <CKernel::CKernel()+0x120>
    8184:	e2840c6d 	add	r0, r4, #27904	; 0x6d00
    8188:	e1a03005 	mov	r3, r5
    818c:	e1a02005 	mov	r2, r5
    8190:	e1a01005 	mov	r1, r5
    8194:	e58dc004 	str	ip, [sp, #4]
    8198:	e58d5008 	str	r5, [sp, #8]
    819c:	e58d5000 	str	r5, [sp]
    81a0:	e280000c 	add	r0, r0, #12
    81a4:	eb0044da 	bl	19514 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>
    81a8:	e2840c6e 	add	r0, r4, #28160	; 0x6e00
    81ac:	e1a02007 	mov	r2, r7
    81b0:	e1a01004 	mov	r1, r4
    81b4:	e2800038 	add	r0, r0, #56	; 0x38
    81b8:	eb0000a8 	bl	8460 <BusRaiderApp::BusRaiderApp(Display&, CUartMaxiSerialDevice&)>
    81bc:	e1a00004 	mov	r0, r4
    81c0:	e59f2014 	ldr	r2, [pc, #20]	; 81dc <CKernel::CKernel()+0x124>
    81c4:	e2843945 	add	r3, r4, #1130496	; 0x114000
    81c8:	e5824000 	str	r4, [r2]
    81cc:	e5c35748 	strb	r5, [r3, #1864]	; 0x748
    81d0:	e28dd018 	add	sp, sp, #24
    81d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    81d8:	0003d058 	.word	0x0003d058
    81dc:	0004c500 	.word	0x0004c500

000081e0 <CKernel::~CKernel()>:
    81e0:	e92d4070 	push	{r4, r5, r6, lr}
    81e4:	e1a04000 	mov	r4, r0
    81e8:	e2800c6e 	add	r0, r0, #28160	; 0x6e00
    81ec:	e28000b4 	add	r0, r0, #180	; 0xb4
    81f0:	eb00a313 	bl	30e44 <CommsManager::~CommsManager()>
    81f4:	e2840c6d 	add	r0, r4, #27904	; 0x6d00
    81f8:	e2845b1b 	add	r5, r4, #27648	; 0x6c00
    81fc:	e280000c 	add	r0, r0, #12
    8200:	eb004590 	bl	19848 <CNetSubSystem::~CNetSubSystem()>
    8204:	e28500a8 	add	r0, r5, #168	; 0xa8
    8208:	eb006f4f 	bl	23f4c <CScheduler::~CScheduler()>
    820c:	e2850024 	add	r0, r5, #36	; 0x24
    8210:	eb000f35 	bl	beec <CDWHCIDevice::~CDWHCIDevice()>
    8214:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    8218:	e280002c 	add	r0, r0, #44	; 0x2c
    821c:	eb00793c 	bl	26714 <CLogger::~CLogger()>
    8220:	e2840c6a 	add	r0, r4, #27136	; 0x6a00
    8224:	e28000f0 	add	r0, r0, #240	; 0xf0
    8228:	eb0083f1 	bl	291f4 <CTimer::~CTimer()>
    822c:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    8230:	eb0093aa 	bl	2d0e0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>
    8234:	e2846d65 	add	r6, r4, #6464	; 0x1940
    8238:	e2840d66 	add	r0, r4, #6528	; 0x1980
    823c:	eb008ed2 	bl	2bd8c <CInterruptSystem::~CInterruptSystem()>
    8240:	e286003c 	add	r0, r6, #60	; 0x3c
    8244:	eb008ca3 	bl	2b4d8 <CExceptionHandler::~CExceptionHandler()>
    8248:	e2845c11 	add	r5, r4, #4352	; 0x1100
    824c:	e2860034 	add	r0, r6, #52	; 0x34
    8250:	eb007333 	bl	24f24 <CDeviceNameService::~CDeviceNameService()>
    8254:	e2850018 	add	r0, r5, #24
    8258:	eb0077c2 	bl	26168 <CKernelOptions::~CKernelOptions()>
    825c:	e285000c 	add	r0, r5, #12
    8260:	eb0070fd 	bl	2465c <CActLED::~CActLED()>
    8264:	e2840a01 	add	r0, r4, #4096	; 0x1000
    8268:	e2800030 	add	r0, r0, #48	; 0x30
    826c:	eb008dbf 	bl	2b970 <CMemorySystem::~CMemorySystem()>
    8270:	e1a00004 	mov	r0, r4
    8274:	eb00c720 	bl	39efc <Display::~Display()>
    8278:	e1a00004 	mov	r0, r4
    827c:	e8bd8070 	pop	{r4, r5, r6, pc}

00008280 <CKernel::Initialize()>:
    8280:	e92d4070 	push	{r4, r5, r6, lr}
    8284:	e1a04000 	mov	r4, r0
    8288:	e2800d66 	add	r0, r0, #6528	; 0x1980
    828c:	eb008ecd 	bl	2bdc8 <CInterruptSystem::Initialize()>
    8290:	e3500000 	cmp	r0, #0
    8294:	1a000002 	bne	82a4 <CKernel::Initialize()+0x24>
    8298:	e3a05000 	mov	r5, #0
    829c:	e1a00005 	mov	r0, r5
    82a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    82a4:	e1a00004 	mov	r0, r4
    82a8:	eb00c7a8 	bl	3a150 <Display::init()>
    82ac:	e3500000 	cmp	r0, #0
    82b0:	0afffff8 	beq	8298 <CKernel::Initialize()+0x18>
    82b4:	e2840c11 	add	r0, r4, #4352	; 0x1100
    82b8:	e2800018 	add	r0, r0, #24
    82bc:	eb0077b2 	bl	2618c <CKernelOptions::GetLogDevice() const>
    82c0:	e1a01000 	mov	r1, r0
    82c4:	e2840d65 	add	r0, r4, #6464	; 0x1940
    82c8:	e3a02000 	mov	r2, #0
    82cc:	e2800034 	add	r0, r0, #52	; 0x34
    82d0:	eb00739a 	bl	25140 <CDeviceNameService::GetDevice(char const*, bool)>
    82d4:	e1a01000 	mov	r1, r0
    82d8:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    82dc:	e3510000 	cmp	r1, #0
    82e0:	01a01004 	moveq	r1, r4
    82e4:	e280002c 	add	r0, r0, #44	; 0x2c
    82e8:	eb007928 	bl	26790 <CLogger::Initialize(CDevice*)>
    82ec:	e3500000 	cmp	r0, #0
    82f0:	0affffe8 	beq	8298 <CKernel::Initialize()+0x18>
    82f4:	e59f3050 	ldr	r3, [pc, #80]	; 834c <CKernel::Initialize()+0xcc>
    82f8:	e3a01ae1 	mov	r1, #921600	; 0xe1000
    82fc:	e1a02003 	mov	r2, r3
    8300:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    8304:	eb0093dd 	bl	2d280 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)>
    8308:	e3500000 	cmp	r0, #0
    830c:	0affffe1 	beq	8298 <CKernel::Initialize()+0x18>
    8310:	e2840c6a 	add	r0, r4, #27136	; 0x6a00
    8314:	e28000f0 	add	r0, r0, #240	; 0xf0
    8318:	eb008660 	bl	29ca0 <CTimer::Initialize()>
    831c:	e3500000 	cmp	r0, #0
    8320:	0affffdc 	beq	8298 <CKernel::Initialize()+0x18>
    8324:	e2840b1b 	add	r0, r4, #27648	; 0x6c00
    8328:	e2800024 	add	r0, r0, #36	; 0x24
    832c:	eb000f53 	bl	c080 <CDWHCIDevice::Initialize()>
    8330:	e2505000 	subs	r5, r0, #0
    8334:	0affffd7 	beq	8298 <CKernel::Initialize()+0x18>
    8338:	e2840c6e 	add	r0, r4, #28160	; 0x6e00
    833c:	e2800038 	add	r0, r0, #56	; 0x38
    8340:	eb000084 	bl	8558 <BusRaiderApp::init()>
    8344:	e1a00005 	mov	r0, r5
    8348:	e8bd8070 	pop	{r4, r5, r6, pc}
    834c:	000f4240 	.word	0x000f4240

00008350 <CKernel::Run()>:
    8350:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8354:	e1a06000 	mov	r6, r0
    8358:	e2800d65 	add	r0, r0, #6464	; 0x1940
    835c:	e3a02000 	mov	r2, #0
    8360:	e59f10c4 	ldr	r1, [pc, #196]	; 842c <CKernel::Run()+0xdc>
    8364:	e2800034 	add	r0, r0, #52	; 0x34
    8368:	eb007374 	bl	25140 <CDeviceNameService::GetDevice(char const*, bool)>
    836c:	e2505000 	subs	r5, r0, #0
    8370:	0a00001f 	beq	83f4 <CKernel::Run()+0xa4>
    8374:	e3a02001 	mov	r2, #1
    8378:	e2864c6e 	add	r4, r6, #28160	; 0x6e00
    837c:	e2844038 	add	r4, r4, #56	; 0x38
    8380:	e1a00004 	mov	r0, r4
    8384:	e1a01002 	mov	r1, r2
    8388:	eb0000bc 	bl	8680 <BusRaiderApp::peripheralStatus(bool, bool)>
    838c:	e2867c6b 	add	r7, r6, #27392	; 0x6b00
    8390:	e287702c 	add	r7, r7, #44	; 0x2c
    8394:	e1a00005 	mov	r0, r5
    8398:	e59f1090 	ldr	r1, [pc, #144]	; 8430 <CKernel::Run()+0xe0>
    839c:	eb000588 	bl	99c4 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>
    83a0:	e2865945 	add	r5, r6, #1130496	; 0x114000
    83a4:	ea000004 	b	83bc <CKernel::Run()+0x6c>
    83a8:	e5d53748 	ldrb	r3, [r5, #1864]	; 0x748
    83ac:	e3530000 	cmp	r3, #0
    83b0:	1a000004 	bne	83c8 <CKernel::Run()+0x78>
    83b4:	e1a00004 	mov	r0, r4
    83b8:	eb000389 	bl	91e4 <BusRaiderApp::service()>
    83bc:	eb0089f3 	bl	2ab90 <IsChainBootEnabled>
    83c0:	e3500000 	cmp	r0, #0
    83c4:	0afffff7 	beq	83a8 <CKernel::Run()+0x58>
    83c8:	e1a00007 	mov	r0, r7
    83cc:	e3a02003 	mov	r2, #3
    83d0:	e59f305c 	ldr	r3, [pc, #92]	; 8434 <CKernel::Run()+0xe4>
    83d4:	e59f105c 	ldr	r1, [pc, #92]	; 8438 <CKernel::Run()+0xe8>
    83d8:	eb0078ff 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    83dc:	e2860b1b 	add	r0, r6, #27648	; 0x6c00
    83e0:	e3a01001 	mov	r1, #1
    83e4:	e28000a8 	add	r0, r0, #168	; 0xa8
    83e8:	eb006fea 	bl	24398 <CScheduler::Sleep(unsigned int)>
    83ec:	e3a00002 	mov	r0, #2
    83f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    83f4:	e2867c6b 	add	r7, r6, #27392	; 0x6b00
    83f8:	e287702c 	add	r7, r7, #44	; 0x2c
    83fc:	e2864c6e 	add	r4, r6, #28160	; 0x6e00
    8400:	e1a00007 	mov	r0, r7
    8404:	e3a02001 	mov	r2, #1
    8408:	e59f302c 	ldr	r3, [pc, #44]	; 843c <CKernel::Run()+0xec>
    840c:	e59f1024 	ldr	r1, [pc, #36]	; 8438 <CKernel::Run()+0xe8>
    8410:	e2844038 	add	r4, r4, #56	; 0x38
    8414:	eb0078f0 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8418:	e1a00004 	mov	r0, r4
    841c:	e1a02005 	mov	r2, r5
    8420:	e3a01001 	mov	r1, #1
    8424:	eb000095 	bl	8680 <BusRaiderApp::peripheralStatus(bool, bool)>
    8428:	eaffffd9 	b	8394 <CKernel::Run()+0x44>
    842c:	0003d064 	.word	0x0003d064
    8430:	00008440 	.word	0x00008440
    8434:	0003d080 	.word	0x0003d080
    8438:	0003d0e4 	.word	0x0003d0e4
    843c:	0003d06c 	.word	0x0003d06c

00008440 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)>:
    8440:	e59f3014 	ldr	r3, [pc, #20]	; 845c <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x1c>
    8444:	e1a02001 	mov	r2, r1
    8448:	e5933000 	ldr	r3, [r3]
    844c:	e1a01000 	mov	r1, r0
    8450:	e2830c6e 	add	r0, r3, #28160	; 0x6e00
    8454:	e2800038 	add	r0, r0, #56	; 0x38
    8458:	ea0001fe 	b	8c58 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)>
    845c:	0004c500 	.word	0x0004c500

00008460 <BusRaiderApp::BusRaiderApp(Display&, CUartMaxiSerialDevice&)>:
    8460:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8464:	e3a04000 	mov	r4, #0
    8468:	e1a05000 	mov	r5, r0
    846c:	e280807c 	add	r8, r0, #124	; 0x7c
    8470:	e2806b1e 	add	r6, r0, #30720	; 0x7800
    8474:	e5801078 	str	r1, [r0, #120]	; 0x78
    8478:	e2866098 	add	r6, r6, #152	; 0x98
    847c:	e1a01002 	mov	r1, r2
    8480:	e1a00008 	mov	r0, r8
    8484:	e1a02004 	mov	r2, r4
    8488:	e5c54008 	strb	r4, [r5, #8]
    848c:	e5854070 	str	r4, [r5, #112]	; 0x70
    8490:	eb00a245 	bl	30dac <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)>
    8494:	e59f70b0 	ldr	r7, [pc, #176]	; 854c <BusRaiderApp::BusRaiderApp(Display&, CUartMaxiSerialDevice&)+0xec>
    8498:	e1a00006 	mov	r0, r6
    849c:	eb00a2bc 	bl	30f94 <BusControl::BusControl()>
    84a0:	e59f00a8 	ldr	r0, [pc, #168]	; 8550 <BusRaiderApp::BusRaiderApp(Display&, CUartMaxiSerialDevice&)+0xf0>
    84a4:	e0857007 	add	r7, r5, r7
    84a8:	e1a02006 	mov	r2, r6
    84ac:	e1a01008 	mov	r1, r8
    84b0:	e1a03007 	mov	r3, r7
    84b4:	e0850000 	add	r0, r5, r0
    84b8:	eb00ae35 	bl	33d94 <ControlAPI::ControlAPI(CommandHandler&, BusControl&, McManager&)>
    84bc:	e1a03006 	mov	r3, r6
    84c0:	e1a02008 	mov	r2, r8
    84c4:	e5951078 	ldr	r1, [r5, #120]	; 0x78
    84c8:	e1a00007 	mov	r0, r7
    84cc:	eb00b36f 	bl	35290 <McManager::McManager(DisplayBase*, CommandHandler&, BusControl&)>
    84d0:	e3a00064 	mov	r0, #100	; 0x64
    84d4:	e3e0c000 	mvn	ip, #0
    84d8:	e2851943 	add	r1, r5, #1097728	; 0x10c000
    84dc:	e59fe070 	ldr	lr, [pc, #112]	; 8554 <BusRaiderApp::BusRaiderApp(Display&, CUartMaxiSerialDevice&)+0xf4>
    84e0:	e2853942 	add	r3, r5, #1081344	; 0x108000
    84e4:	e2833a02 	add	r3, r3, #8192	; 0x2000
    84e8:	e2812a01 	add	r2, r1, #4096	; 0x1000
    84ec:	e2811c19 	add	r1, r1, #6400	; 0x1900
    84f0:	e58248fc 	str	r4, [r2, #2300]	; 0x8fc
    84f4:	e5820904 	str	r0, [r2, #2308]	; 0x904
    84f8:	e5824900 	str	r4, [r2, #2304]	; 0x900
    84fc:	e1a00005 	mov	r0, r5
    8500:	e5854004 	str	r4, [r5, #4]
    8504:	e5c54008 	strb	r4, [r5, #8]
    8508:	e5854070 	str	r4, [r5, #112]	; 0x70
    850c:	e5854074 	str	r4, [r5, #116]	; 0x74
    8510:	e58e5000 	str	r5, [lr]
    8514:	e5c34458 	strb	r4, [r3, #1112]	; 0x458
    8518:	e5c54000 	strb	r4, [r5]
    851c:	e5c34c28 	strb	r4, [r3, #3112]	; 0xc28
    8520:	e5c34c46 	strb	r4, [r3, #3142]	; 0xc46
    8524:	e5c34c64 	strb	r4, [r3, #3172]	; 0xc64
    8528:	e5c34cc8 	strb	r4, [r3, #3272]	; 0xcc8
    852c:	e5c34d2c 	strb	r4, [r3, #3372]	; 0xd2c
    8530:	e5834d30 	str	r4, [r3, #3376]	; 0xd30
    8534:	e5c34d34 	strb	r4, [r3, #3380]	; 0xd34
    8538:	e5824444 	str	r4, [r2, #1092]	; 0x444
    853c:	e5824448 	str	r4, [r2, #1096]	; 0x448
    8540:	e1c140b8 	strh	r4, [r1, #8]
    8544:	e582c90c 	str	ip, [r2, #2316]	; 0x90c
    8548:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    854c:	00107cd0 	.word	0x00107cd0
    8550:	00107cbc 	.word	0x00107cbc
    8554:	0004c504 	.word	0x0004c504

00008558 <BusRaiderApp::init()>:
    8558:	e92d4070 	push	{r4, r5, r6, lr}
    855c:	e3e01000 	mvn	r1, #0
    8560:	e3a04000 	mov	r4, #0
    8564:	e1a05000 	mov	r5, r0
    8568:	e2803942 	add	r3, r0, #1081344	; 0x108000
    856c:	e2802943 	add	r2, r0, #1097728	; 0x10c000
    8570:	e2833a02 	add	r3, r3, #8192	; 0x2000
    8574:	e2822a01 	add	r2, r2, #4096	; 0x1000
    8578:	e280607c 	add	r6, r0, #124	; 0x7c
    857c:	e5804004 	str	r4, [r0, #4]
    8580:	e5c04008 	strb	r4, [r0, #8]
    8584:	e5804070 	str	r4, [r0, #112]	; 0x70
    8588:	e5804074 	str	r4, [r0, #116]	; 0x74
    858c:	e24dd008 	sub	sp, sp, #8
    8590:	e5c34458 	strb	r4, [r3, #1112]	; 0x458
    8594:	e5c04000 	strb	r4, [r0]
    8598:	e5c34c28 	strb	r4, [r3, #3112]	; 0xc28
    859c:	e5c34c46 	strb	r4, [r3, #3142]	; 0xc46
    85a0:	e5c34c64 	strb	r4, [r3, #3172]	; 0xc64
    85a4:	e5c34cc8 	strb	r4, [r3, #3272]	; 0xcc8
    85a8:	e5c34d2c 	strb	r4, [r3, #3372]	; 0xd2c
    85ac:	e5834d30 	str	r4, [r3, #3376]	; 0xd30
    85b0:	e5c34d34 	strb	r4, [r3, #3380]	; 0xd34
    85b4:	e1a00006 	mov	r0, r6
    85b8:	e5824444 	str	r4, [r2, #1092]	; 0x444
    85bc:	e5824448 	str	r4, [r2, #1096]	; 0x448
    85c0:	e5c24909 	strb	r4, [r2, #2313]	; 0x909
    85c4:	e582190c 	str	r1, [r2, #2316]	; 0x90c
    85c8:	eb00a222 	bl	30e58 <CommsManager::setup()>
    85cc:	e2850b1e 	add	r0, r5, #30720	; 0x7800
    85d0:	e2800098 	add	r0, r0, #152	; 0x98
    85d4:	eb00a28f 	bl	31018 <BusControl::init()>
    85d8:	e59f0034 	ldr	r0, [pc, #52]	; 8614 <BusRaiderApp::init()+0xbc>
    85dc:	e0850000 	add	r0, r5, r0
    85e0:	eb00adf5 	bl	33dbc <ControlAPI::init()>
    85e4:	e59f002c 	ldr	r0, [pc, #44]	; 8618 <BusRaiderApp::init()+0xc0>
    85e8:	e0850000 	add	r0, r5, r0
    85ec:	eb00b343 	bl	35300 <McManager::init()>
    85f0:	e1a00006 	mov	r0, r6
    85f4:	e1a01005 	mov	r1, r5
    85f8:	e3a02001 	mov	r2, #1
    85fc:	e59f3018 	ldr	r3, [pc, #24]	; 861c <BusRaiderApp::init()+0xc4>
    8600:	e58d4004 	str	r4, [sp, #4]
    8604:	e58d4000 	str	r4, [sp]
    8608:	eb009d26 	bl	2faa8 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
    860c:	e28dd008 	add	sp, sp, #8
    8610:	e8bd8070 	pop	{r4, r5, r6, pc}
    8614:	00107cbc 	.word	0x00107cbc
    8618:	00107cd0 	.word	0x00107cd0
    861c:	00009710 	.word	0x00009710

00008620 <BusRaiderApp::clear()>:
    8620:	e3a03000 	mov	r3, #0
    8624:	e3e0c000 	mvn	ip, #0
    8628:	e2802942 	add	r2, r0, #1081344	; 0x108000
    862c:	e2801943 	add	r1, r0, #1097728	; 0x10c000
    8630:	e2822a02 	add	r2, r2, #8192	; 0x2000
    8634:	e2811a01 	add	r1, r1, #4096	; 0x1000
    8638:	e5803004 	str	r3, [r0, #4]
    863c:	e5c03008 	strb	r3, [r0, #8]
    8640:	e5803070 	str	r3, [r0, #112]	; 0x70
    8644:	e5803074 	str	r3, [r0, #116]	; 0x74
    8648:	e5c23458 	strb	r3, [r2, #1112]	; 0x458
    864c:	e5c03000 	strb	r3, [r0]
    8650:	e5c23c28 	strb	r3, [r2, #3112]	; 0xc28
    8654:	e5c23c46 	strb	r3, [r2, #3142]	; 0xc46
    8658:	e5c23c64 	strb	r3, [r2, #3172]	; 0xc64
    865c:	e5c23cc8 	strb	r3, [r2, #3272]	; 0xcc8
    8660:	e5c23d2c 	strb	r3, [r2, #3372]	; 0xd2c
    8664:	e5823d30 	str	r3, [r2, #3376]	; 0xd30
    8668:	e5c23d34 	strb	r3, [r2, #3380]	; 0xd34
    866c:	e5813444 	str	r3, [r1, #1092]	; 0x444
    8670:	e5813448 	str	r3, [r1, #1096]	; 0x448
    8674:	e5c13909 	strb	r3, [r1, #2313]	; 0x909
    8678:	e581c90c 	str	ip, [r1, #2316]	; 0x90c
    867c:	e12fff1e 	bx	lr

00008680 <BusRaiderApp::peripheralStatus(bool, bool)>:
    8680:	e3510000 	cmp	r1, #0
    8684:	0a00000a 	beq	86b4 <BusRaiderApp::peripheralStatus(bool, bool)+0x34>
    8688:	e3520000 	cmp	r2, #0
    868c:	e5900078 	ldr	r0, [r0, #120]	; 0x78
    8690:	0a000003 	beq	86a4 <BusRaiderApp::peripheralStatus(bool, bool)+0x24>
    8694:	e3a02002 	mov	r2, #2
    8698:	e3a01008 	mov	r1, #8
    869c:	e59f3024 	ldr	r3, [pc, #36]	; 86c8 <BusRaiderApp::peripheralStatus(bool, bool)+0x48>
    86a0:	ea00c6f7 	b	3a284 <Display::statusPut(int, int, char const*)>
    86a4:	e3a02001 	mov	r2, #1
    86a8:	e3a01008 	mov	r1, #8
    86ac:	e59f3018 	ldr	r3, [pc, #24]	; 86cc <BusRaiderApp::peripheralStatus(bool, bool)+0x4c>
    86b0:	ea00c6f3 	b	3a284 <Display::statusPut(int, int, char const*)>
    86b4:	e1a02001 	mov	r2, r1
    86b8:	e5900078 	ldr	r0, [r0, #120]	; 0x78
    86bc:	e3a01008 	mov	r1, #8
    86c0:	e59f3008 	ldr	r3, [pc, #8]	; 86d0 <BusRaiderApp::peripheralStatus(bool, bool)+0x50>
    86c4:	ea00c6ee 	b	3a284 <Display::statusPut(int, int, char const*)>
    86c8:	0003d0ec 	.word	0x0003d0ec
    86cc:	0003d10c 	.word	0x0003d10c
    86d0:	0003d120 	.word	0x0003d120

000086d4 <BusRaiderApp::statusDisplayUpdate()>:
    86d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    86d8:	e1a06000 	mov	r6, r0
    86dc:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    86e0:	eb0095a5 	bl	2dd7c <micros>
    86e4:	e5961004 	ldr	r1, [r6, #4]
    86e8:	e59f24e4 	ldr	r2, [pc, #1252]	; 8bd4 <BusRaiderApp::statusDisplayUpdate()+0x500>
    86ec:	eb0095c0 	bl	2ddf4 <isTimeout>
    86f0:	e3500000 	cmp	r0, #0
    86f4:	1a000001 	bne	8700 <BusRaiderApp::statusDisplayUpdate()+0x2c>
    86f8:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    86fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8700:	eb00959d 	bl	2dd7c <micros>
    8704:	e3a02000 	mov	r2, #0
    8708:	e59f44c8 	ldr	r4, [pc, #1224]	; 8bd8 <BusRaiderApp::statusDisplayUpdate()+0x504>
    870c:	e1a01002 	mov	r1, r2
    8710:	e5943000 	ldr	r3, [r4]
    8714:	e5860004 	str	r0, [r6, #4]
    8718:	e59f54bc 	ldr	r5, [pc, #1212]	; 8bdc <BusRaiderApp::statusDisplayUpdate()+0x508>
    871c:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8720:	eb00c6d7 	bl	3a284 <Display::statusPut(int, int, char const*)>
    8724:	e5943004 	ldr	r3, [r4, #4]
    8728:	e3a02000 	mov	r2, #0
    872c:	e3a01001 	mov	r1, #1
    8730:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8734:	eb00c6d2 	bl	3a284 <Display::statusPut(int, int, char const*)>
    8738:	e0865005 	add	r5, r6, r5
    873c:	e3a02032 	mov	r2, #50	; 0x32
    8740:	e59f1498 	ldr	r1, [pc, #1176]	; 8be0 <BusRaiderApp::statusDisplayUpdate()+0x50c>
    8744:	e28d005c 	add	r0, sp, #92	; 0x5c
    8748:	eb0095c5 	bl	2de64 <strlcpy>
    874c:	e1a00005 	mov	r0, r5
    8750:	eb00861d 	bl	29fcc <strlen>
    8754:	e3500000 	cmp	r0, #0
    8758:	0a0000d4 	beq	8ab0 <BusRaiderApp::statusDisplayUpdate()+0x3dc>
    875c:	e2864941 	add	r4, r6, #1064960	; 0x104000
    8760:	e1a01005 	mov	r1, r5
    8764:	e3a02032 	mov	r2, #50	; 0x32
    8768:	e28d005c 	add	r0, sp, #92	; 0x5c
    876c:	e2844a03 	add	r4, r4, #12288	; 0x3000
    8770:	eb0095d7 	bl	2ded4 <strlcat>
    8774:	e5942ca4 	ldr	r2, [r4, #3236]	; 0xca4
    8778:	e59f1464 	ldr	r1, [pc, #1124]	; 8be4 <BusRaiderApp::statusDisplayUpdate()+0x510>
    877c:	e1a03fc2 	asr	r3, r2, #31
    8780:	e0c10291 	smull	r0, r1, r1, r2
    8784:	e0633141 	rsb	r3, r3, r1, asr #2
    8788:	e0831103 	add	r1, r3, r3, lsl #2
    878c:	e0422081 	sub	r2, r2, r1, lsl #1
    8790:	e58d2000 	str	r2, [sp]
    8794:	e3a0101e 	mov	r1, #30
    8798:	e59f2448 	ldr	r2, [pc, #1096]	; 8be8 <BusRaiderApp::statusDisplayUpdate()+0x514>
    879c:	e28d0090 	add	r0, sp, #144	; 0x90
    87a0:	eb00961b 	bl	2e014 <snprintf>
    87a4:	e3a02032 	mov	r2, #50	; 0x32
    87a8:	e28d1090 	add	r1, sp, #144	; 0x90
    87ac:	e28d005c 	add	r0, sp, #92	; 0x5c
    87b0:	eb0095c7 	bl	2ded4 <strlcat>
    87b4:	e3a02032 	mov	r2, #50	; 0x32
    87b8:	e59f142c 	ldr	r1, [pc, #1068]	; 8bec <BusRaiderApp::statusDisplayUpdate()+0x518>
    87bc:	e28d005c 	add	r0, sp, #92	; 0x5c
    87c0:	eb0095c3 	bl	2ded4 <strlcat>
    87c4:	e3a02000 	mov	r2, #0
    87c8:	e3a01002 	mov	r1, #2
    87cc:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    87d0:	e28d305c 	add	r3, sp, #92	; 0x5c
    87d4:	eb00c6aa 	bl	3a284 <Display::statusPut(int, int, char const*)>
    87d8:	e3a02000 	mov	r2, #0
    87dc:	e2863942 	add	r3, r6, #1081344	; 0x108000
    87e0:	e2831db1 	add	r1, r3, #11328	; 0x2c40
    87e4:	e1d110d6 	ldrsb	r1, [r1, #6]
    87e8:	e5cd205c 	strb	r2, [sp, #92]	; 0x5c
    87ec:	e3510043 	cmp	r1, #67	; 0x43
    87f0:	e3a02032 	mov	r2, #50	; 0x32
    87f4:	e2835a02 	add	r5, r3, #8192	; 0x2000
    87f8:	0a0000bb 	beq	8aec <BusRaiderApp::statusDisplayUpdate()+0x418>
    87fc:	e59f13ec 	ldr	r1, [pc, #1004]	; 8bf0 <BusRaiderApp::statusDisplayUpdate()+0x51c>
    8800:	e28d005c 	add	r0, sp, #92	; 0x5c
    8804:	eb009596 	bl	2de64 <strlcpy>
    8808:	e3a02001 	mov	r2, #1
    880c:	e3a01003 	mov	r1, #3
    8810:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8814:	e28d305c 	add	r3, sp, #92	; 0x5c
    8818:	eb00c699 	bl	3a284 <Display::statusPut(int, int, char const*)>
    881c:	e59f53d0 	ldr	r5, [pc, #976]	; 8bf4 <BusRaiderApp::statusDisplayUpdate()+0x520>
    8820:	e3a02032 	mov	r2, #50	; 0x32
    8824:	e59f13cc 	ldr	r1, [pc, #972]	; 8bf8 <BusRaiderApp::statusDisplayUpdate()+0x524>
    8828:	e0865005 	add	r5, r6, r5
    882c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8830:	eb00958b 	bl	2de64 <strlcpy>
    8834:	e1a00005 	mov	r0, r5
    8838:	eb00b2fa 	bl	35428 <McManager::getMachineName()>
    883c:	e3a02032 	mov	r2, #50	; 0x32
    8840:	e1a01000 	mov	r1, r0
    8844:	e28d005c 	add	r0, sp, #92	; 0x5c
    8848:	eb0095a1 	bl	2ded4 <strlcat>
    884c:	e3a02028 	mov	r2, #40	; 0x28
    8850:	e59f13a4 	ldr	r1, [pc, #932]	; 8bfc <BusRaiderApp::statusDisplayUpdate()+0x528>
    8854:	e28d005c 	add	r0, sp, #92	; 0x5c
    8858:	eb00959d 	bl	2ded4 <strlcat>
    885c:	e3a02000 	mov	r2, #0
    8860:	e3a01004 	mov	r1, #4
    8864:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8868:	e28d305c 	add	r3, sp, #92	; 0x5c
    886c:	eb00c684 	bl	3a284 <Display::statusPut(int, int, char const*)>
    8870:	e5942cd8 	ldr	r2, [r4, #3288]	; 0xcd8
    8874:	e59f3384 	ldr	r3, [pc, #900]	; 8c00 <BusRaiderApp::statusDisplayUpdate()+0x52c>
    8878:	e5921004 	ldr	r1, [r2, #4]
    887c:	e59f0380 	ldr	r0, [pc, #896]	; 8c04 <BusRaiderApp::statusDisplayUpdate()+0x530>
    8880:	e0832193 	umull	r2, r3, r3, r1
    8884:	e1a03923 	lsr	r3, r3, #18
    8888:	e0632283 	rsb	r2, r3, r3, lsl #5
    888c:	e0622302 	rsb	r2, r2, r2, lsl #6
    8890:	e0832182 	add	r2, r3, r2, lsl #3
    8894:	e0412302 	sub	r2, r1, r2, lsl #6
    8898:	e0810290 	umull	r0, r1, r0, r2
    889c:	e59f0364 	ldr	r0, [pc, #868]	; 8c08 <BusRaiderApp::statusDisplayUpdate()+0x534>
    88a0:	e1a01321 	lsr	r1, r1, #6
    88a4:	e1520000 	cmp	r2, r0
    88a8:	2a00008c 	bcs	8ae0 <BusRaiderApp::statusDisplayUpdate()+0x40c>
    88ac:	e59f0358 	ldr	r0, [pc, #856]	; 8c0c <BusRaiderApp::statusDisplayUpdate()+0x538>
    88b0:	e1520000 	cmp	r2, r0
    88b4:	859f0354 	ldrhi	r0, [pc, #852]	; 8c10 <BusRaiderApp::statusDisplayUpdate()+0x53c>
    88b8:	e59f2354 	ldr	r2, [pc, #852]	; 8c14 <BusRaiderApp::statusDisplayUpdate()+0x540>
    88bc:	91a00002 	movls	r0, r2
    88c0:	e1cd00f4 	strd	r0, [sp, #4]
    88c4:	e58d2000 	str	r2, [sp]
    88c8:	e3a01032 	mov	r1, #50	; 0x32
    88cc:	e59f2344 	ldr	r2, [pc, #836]	; 8c18 <BusRaiderApp::statusDisplayUpdate()+0x544>
    88d0:	e28d005c 	add	r0, sp, #92	; 0x5c
    88d4:	eb0095ce 	bl	2e014 <snprintf>
    88d8:	e3a02032 	mov	r2, #50	; 0x32
    88dc:	e59f1338 	ldr	r1, [pc, #824]	; 8c1c <BusRaiderApp::statusDisplayUpdate()+0x548>
    88e0:	e28d005c 	add	r0, sp, #92	; 0x5c
    88e4:	eb00957a 	bl	2ded4 <strlcat>
    88e8:	e3a02000 	mov	r2, #0
    88ec:	e3a01005 	mov	r1, #5
    88f0:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    88f4:	e28d305c 	add	r3, sp, #92	; 0x5c
    88f8:	eb00c661 	bl	3a284 <Display::statusPut(int, int, char const*)>
    88fc:	e3a03000 	mov	r3, #0
    8900:	e3a02032 	mov	r2, #50	; 0x32
    8904:	e59f1314 	ldr	r1, [pc, #788]	; 8c20 <BusRaiderApp::statusDisplayUpdate()+0x54c>
    8908:	e28d005c 	add	r0, sp, #92	; 0x5c
    890c:	e5cd305c 	strb	r3, [sp, #92]	; 0x5c
    8910:	eb009553 	bl	2de64 <strlcpy>
    8914:	e5d43ca0 	ldrb	r3, [r4, #3232]	; 0xca0
    8918:	e3530000 	cmp	r3, #0
    891c:	1a000082 	bne	8b2c <BusRaiderApp::statusDisplayUpdate()+0x458>
    8920:	e3a02000 	mov	r2, #0
    8924:	e3a01006 	mov	r1, #6
    8928:	e28d305c 	add	r3, sp, #92	; 0x5c
    892c:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8930:	eb00c653 	bl	3a284 <Display::statusPut(int, int, char const*)>
    8934:	e1a00005 	mov	r0, r5
    8938:	eb00b474 	bl	35b10 <McManager::getDisplayRefreshRate()>
    893c:	e1a04000 	mov	r4, r0
    8940:	e5d61000 	ldrb	r1, [r6]
    8944:	e59f32d8 	ldr	r3, [pc, #728]	; 8c24 <BusRaiderApp::statusDisplayUpdate()+0x550>
    8948:	e59f22d8 	ldr	r2, [pc, #728]	; 8c28 <BusRaiderApp::statusDisplayUpdate()+0x554>
    894c:	e3510000 	cmp	r1, #0
    8950:	11a01002 	movne	r1, r2
    8954:	01a01003 	moveq	r1, r3
    8958:	e3a02028 	mov	r2, #40	; 0x28
    895c:	e28d0030 	add	r0, sp, #48	; 0x30
    8960:	eb00953f 	bl	2de64 <strlcpy>
    8964:	e5d63000 	ldrb	r3, [r6]
    8968:	e3a02028 	mov	r2, #40	; 0x28
    896c:	e2233001 	eor	r3, r3, #1
    8970:	e59f12b4 	ldr	r1, [pc, #692]	; 8c2c <BusRaiderApp::statusDisplayUpdate()+0x558>
    8974:	e5c63000 	strb	r3, [r6]
    8978:	e28d0030 	add	r0, sp, #48	; 0x30
    897c:	eb009554 	bl	2ded4 <strlcat>
    8980:	e3a0300a 	mov	r3, #10
    8984:	e1a00004 	mov	r0, r4
    8988:	e3a02028 	mov	r2, #40	; 0x28
    898c:	e28d101c 	add	r1, sp, #28
    8990:	eb0096f9 	bl	2e57c <rditoa>
    8994:	e3a02028 	mov	r2, #40	; 0x28
    8998:	e28d101c 	add	r1, sp, #28
    899c:	e28d0030 	add	r0, sp, #48	; 0x30
    89a0:	eb00954b 	bl	2ded4 <strlcat>
    89a4:	e3a02028 	mov	r2, #40	; 0x28
    89a8:	e59f1280 	ldr	r1, [pc, #640]	; 8c30 <BusRaiderApp::statusDisplayUpdate()+0x55c>
    89ac:	e28d0030 	add	r0, sp, #48	; 0x30
    89b0:	eb009547 	bl	2ded4 <strlcat>
    89b4:	e28d3030 	add	r3, sp, #48	; 0x30
    89b8:	e3a02000 	mov	r2, #0
    89bc:	e3a01007 	mov	r1, #7
    89c0:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    89c4:	eb00c62e 	bl	3a284 <Display::statusPut(int, int, char const*)>
    89c8:	e3a03000 	mov	r3, #0
    89cc:	e1a04003 	mov	r4, r3
    89d0:	e59f525c 	ldr	r5, [pc, #604]	; 8c34 <BusRaiderApp::statusDisplayUpdate()+0x560>
    89d4:	e59f825c 	ldr	r8, [pc, #604]	; 8c38 <BusRaiderApp::statusDisplayUpdate()+0x564>
    89d8:	e5cd305c 	strb	r3, [sp, #92]	; 0x5c
    89dc:	e245703b 	sub	r7, r5, #59	; 0x3b
    89e0:	e5f53001 	ldrb	r3, [r5, #1]!
    89e4:	e3530000 	cmp	r3, #0
    89e8:	0a00000a 	beq	8a18 <BusRaiderApp::statusDisplayUpdate()+0x344>
    89ec:	e7972104 	ldr	r2, [r7, r4, lsl #2]
    89f0:	e3a01029 	mov	r1, #41	; 0x29
    89f4:	e58d2000 	str	r2, [sp]
    89f8:	e1a03004 	mov	r3, r4
    89fc:	e1a02008 	mov	r2, r8
    8a00:	e28d0030 	add	r0, sp, #48	; 0x30
    8a04:	eb009582 	bl	2e014 <snprintf>
    8a08:	e3a02032 	mov	r2, #50	; 0x32
    8a0c:	e28d1030 	add	r1, sp, #48	; 0x30
    8a10:	e28d005c 	add	r0, sp, #92	; 0x5c
    8a14:	eb00952e 	bl	2ded4 <strlcat>
    8a18:	e2844001 	add	r4, r4, #1
    8a1c:	e354000f 	cmp	r4, #15
    8a20:	1affffee 	bne	89e0 <BusRaiderApp::statusDisplayUpdate()+0x30c>
    8a24:	e3a04000 	mov	r4, #0
    8a28:	e3a02032 	mov	r2, #50	; 0x32
    8a2c:	e59f1208 	ldr	r1, [pc, #520]	; 8c3c <BusRaiderApp::statusDisplayUpdate()+0x568>
    8a30:	e28d005c 	add	r0, sp, #92	; 0x5c
    8a34:	eb009526 	bl	2ded4 <strlcat>
    8a38:	e1a02004 	mov	r2, r4
    8a3c:	e3a01009 	mov	r1, #9
    8a40:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8a44:	e28d305c 	add	r3, sp, #92	; 0x5c
    8a48:	eb00c60d 	bl	3a284 <Display::statusPut(int, int, char const*)>
    8a4c:	e28d2018 	add	r2, sp, #24
    8a50:	e28d1014 	add	r1, sp, #20
    8a54:	e286007c 	add	r0, r6, #124	; 0x7c
    8a58:	e58d4014 	str	r4, [sp, #20]
    8a5c:	e58d4018 	str	r4, [sp, #24]
    8a60:	eb009caa 	bl	2fd10 <CommandHandler::getFileReceiveStatus(unsigned long&, unsigned long&)>
    8a64:	e3500000 	cmp	r0, #0
    8a68:	058d0014 	streq	r0, [sp, #20]
    8a6c:	0a000008 	beq	8a94 <BusRaiderApp::statusDisplayUpdate()+0x3c0>
    8a70:	e59d1014 	ldr	r1, [sp, #20]
    8a74:	e3510000 	cmp	r1, #0
    8a78:	0a000005 	beq	8a94 <BusRaiderApp::statusDisplayUpdate()+0x3c0>
    8a7c:	e59d0018 	ldr	r0, [sp, #24]
    8a80:	e0800100 	add	r0, r0, r0, lsl #2
    8a84:	e1a00180 	lsl	r0, r0, #3
    8a88:	eb00cc9e 	bl	3bd08 <__udivsi3>
    8a8c:	e2505000 	subs	r5, r0, #0
    8a90:	ca00002a 	bgt	8b40 <BusRaiderApp::statusDisplayUpdate()+0x46c>
    8a94:	e3a02001 	mov	r2, #1
    8a98:	e3a0100a 	mov	r1, #10
    8a9c:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8aa0:	e59f3198 	ldr	r3, [pc, #408]	; 8c40 <BusRaiderApp::statusDisplayUpdate()+0x56c>
    8aa4:	eb00c5f6 	bl	3a284 <Display::statusPut(int, int, char const*)>
    8aa8:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    8aac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8ab0:	e3a02032 	mov	r2, #50	; 0x32
    8ab4:	e59f1188 	ldr	r1, [pc, #392]	; 8c44 <BusRaiderApp::statusDisplayUpdate()+0x570>
    8ab8:	e28d005c 	add	r0, sp, #92	; 0x5c
    8abc:	eb009504 	bl	2ded4 <strlcat>
    8ac0:	e2864941 	add	r4, r6, #1064960	; 0x104000
    8ac4:	e3a02001 	mov	r2, #1
    8ac8:	e3a01002 	mov	r1, #2
    8acc:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8ad0:	e28d305c 	add	r3, sp, #92	; 0x5c
    8ad4:	eb00c5ea 	bl	3a284 <Display::statusPut(int, int, char const*)>
    8ad8:	e2844a03 	add	r4, r4, #12288	; 0x3000
    8adc:	eaffff3d 	b	87d8 <BusRaiderApp::statusDisplayUpdate()+0x104>
    8ae0:	e59f2128 	ldr	r2, [pc, #296]	; 8c10 <BusRaiderApp::statusDisplayUpdate()+0x53c>
    8ae4:	e1a00002 	mov	r0, r2
    8ae8:	eaffff74 	b	88c0 <BusRaiderApp::statusDisplayUpdate()+0x1ec>
    8aec:	e59f1154 	ldr	r1, [pc, #340]	; 8c48 <BusRaiderApp::statusDisplayUpdate()+0x574>
    8af0:	e28d005c 	add	r0, sp, #92	; 0x5c
    8af4:	eb0094da 	bl	2de64 <strlcpy>
    8af8:	e5d53d2c 	ldrb	r3, [r5, #3372]	; 0xd2c
    8afc:	e3530000 	cmp	r3, #0
    8b00:	1a00002d 	bne	8bbc <BusRaiderApp::statusDisplayUpdate()+0x4e8>
    8b04:	e3a02032 	mov	r2, #50	; 0x32
    8b08:	e59f10dc 	ldr	r1, [pc, #220]	; 8bec <BusRaiderApp::statusDisplayUpdate()+0x518>
    8b0c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8b10:	eb0094ef 	bl	2ded4 <strlcat>
    8b14:	e3a02000 	mov	r2, #0
    8b18:	e3a01003 	mov	r1, #3
    8b1c:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8b20:	e28d305c 	add	r3, sp, #92	; 0x5c
    8b24:	eb00c5d6 	bl	3a284 <Display::statusPut(int, int, char const*)>
    8b28:	eaffff3b 	b	881c <BusRaiderApp::statusDisplayUpdate()+0x148>
    8b2c:	e3a02032 	mov	r2, #50	; 0x32
    8b30:	e59f1114 	ldr	r1, [pc, #276]	; 8c4c <BusRaiderApp::statusDisplayUpdate()+0x578>
    8b34:	e28d005c 	add	r0, sp, #92	; 0x5c
    8b38:	eb0094e5 	bl	2ded4 <strlcat>
    8b3c:	eaffff77 	b	8920 <BusRaiderApp::statusDisplayUpdate()+0x24c>
    8b40:	e3a0203c 	mov	r2, #60	; 0x3c
    8b44:	e59f1104 	ldr	r1, [pc, #260]	; 8c50 <BusRaiderApp::statusDisplayUpdate()+0x57c>
    8b48:	e28d0090 	add	r0, sp, #144	; 0x90
    8b4c:	eb0094c4 	bl	2de64 <strlcpy>
    8b50:	e28d0090 	add	r0, sp, #144	; 0x90
    8b54:	eb00851c 	bl	29fcc <strlen>
    8b58:	e28d1090 	add	r1, sp, #144	; 0x90
    8b5c:	e2402001 	sub	r2, r0, #1
    8b60:	e0812002 	add	r2, r1, r2
    8b64:	e1a03004 	mov	r3, r4
    8b68:	e3a01023 	mov	r1, #35	; 0x23
    8b6c:	ea000002 	b	8b7c <BusRaiderApp::statusDisplayUpdate()+0x4a8>
    8b70:	e1550003 	cmp	r5, r3
    8b74:	c3a01023 	movgt	r1, #35	; 0x23
    8b78:	d3a01020 	movle	r1, #32
    8b7c:	e2833001 	add	r3, r3, #1
    8b80:	e3530028 	cmp	r3, #40	; 0x28
    8b84:	e5e21001 	strb	r1, [r2, #1]!
    8b88:	1afffff8 	bne	8b70 <BusRaiderApp::statusDisplayUpdate()+0x49c>
    8b8c:	e3a0105d 	mov	r1, #93	; 0x5d
    8b90:	e3a0e000 	mov	lr, #0
    8b94:	e28d30d0 	add	r3, sp, #208	; 0xd0
    8b98:	e083c000 	add	ip, r3, r0
    8b9c:	e54c1018 	strb	r1, [ip, #-24]	; 0xffffffe8
    8ba0:	e3a02001 	mov	r2, #1
    8ba4:	e3a0100a 	mov	r1, #10
    8ba8:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8bac:	e28d3090 	add	r3, sp, #144	; 0x90
    8bb0:	e54ce017 	strb	lr, [ip, #-23]	; 0xffffffe9
    8bb4:	eb00c5b2 	bl	3a284 <Display::statusPut(int, int, char const*)>
    8bb8:	eafffece 	b	86f8 <BusRaiderApp::statusDisplayUpdate()+0x24>
    8bbc:	e59f1090 	ldr	r1, [pc, #144]	; 8c54 <BusRaiderApp::statusDisplayUpdate()+0x580>
    8bc0:	e3a02032 	mov	r2, #50	; 0x32
    8bc4:	e0861001 	add	r1, r6, r1
    8bc8:	e28d005c 	add	r0, sp, #92	; 0x5c
    8bcc:	eb0094c0 	bl	2ded4 <strlcat>
    8bd0:	eaffffcb 	b	8b04 <BusRaiderApp::statusDisplayUpdate()+0x430>
    8bd4:	000f4240 	.word	0x000f4240
    8bd8:	000461d0 	.word	0x000461d0
    8bdc:	0010acc8 	.word	0x0010acc8
    8be0:	0003d144 	.word	0x0003d144
    8be4:	66666667 	.word	0x66666667
    8be8:	0003d16c 	.word	0x0003d16c
    8bec:	0003d228 	.word	0x0003d228
    8bf0:	0003d188 	.word	0x0003d188
    8bf4:	00107cd0 	.word	0x00107cd0
    8bf8:	0003d1a0 	.word	0x0003d1a0
    8bfc:	0003d1a8 	.word	0x0003d1a8
    8c00:	431bde83 	.word	0x431bde83
    8c04:	10624dd3 	.word	0x10624dd3
    8c08:	000186a0 	.word	0x000186a0
    8c0c:	0000270f 	.word	0x0000270f
    8c10:	00045ac0 	.word	0x00045ac0
    8c14:	0003e11c 	.word	0x0003e11c
    8c18:	0003d1c0 	.word	0x0003d1c0
    8c1c:	0003d22c 	.word	0x0003d22c
    8c20:	0003d1d4 	.word	0x0003d1d4
    8c24:	0003d140 	.word	0x0003d140
    8c28:	0003d13c 	.word	0x0003d13c
    8c2c:	0003d1ec 	.word	0x0003d1ec
    8c30:	0003d1f8 	.word	0x0003d1f8
    8c34:	0004c64b 	.word	0x0004c64b
    8c38:	0003d204 	.word	0x0003d204
    8c3c:	0003d20c 	.word	0x0003d20c
    8c40:	0003d240 	.word	0x0003d240
    8c44:	0003d154 	.word	0x0003d154
    8c48:	0003d17c 	.word	0x0003d17c
    8c4c:	0003d1dc 	.word	0x0003d1dc
    8c50:	0003d234 	.word	0x0003d234
    8c54:	0010ac28 	.word	0x0010ac28

00008c58 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)>:
    8c58:	e59f30c0 	ldr	r3, [pc, #192]	; 8d20 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0xc8>
    8c5c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8c60:	e5936000 	ldr	r6, [r3]
    8c64:	e2864943 	add	r4, r6, #1097728	; 0x10c000
    8c68:	e2843a01 	add	r3, r4, #4096	; 0x1000
    8c6c:	e5935904 	ldr	r5, [r3, #2308]	; 0x904
    8c70:	e3550000 	cmp	r5, #0
    8c74:	08bd80f0 	popeq	{r4, r5, r6, r7, pc}
    8c78:	e593c8fc 	ldr	ip, [r3, #2300]	; 0x8fc
    8c7c:	e5930900 	ldr	r0, [r3, #2304]	; 0x900
    8c80:	e15c0000 	cmp	ip, r0
    8c84:	0a000008 	beq	8cac <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0x54>
    8c88:	e5930900 	ldr	r0, [r3, #2304]	; 0x900
    8c8c:	e593c8fc 	ldr	ip, [r3, #2300]	; 0x8fc
    8c90:	e150000c 	cmp	r0, ip
    8c94:	e593c8fc 	ldr	ip, [r3, #2300]	; 0x8fc
    8c98:	2a00001c 	bcs	8d10 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0xb8>
    8c9c:	e245e001 	sub	lr, r5, #1
    8ca0:	e3500000 	cmp	r0, #0
    8ca4:	015e000c 	cmpeq	lr, ip
    8ca8:	08bd80f0 	popeq	{r4, r5, r6, r7, pc}
    8cac:	e593e8fc 	ldr	lr, [r3, #2300]	; 0x8fc
    8cb0:	e59f006c 	ldr	r0, [pc, #108]	; 8d24 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0xcc>
    8cb4:	e08e308e 	add	r3, lr, lr, lsl #1
    8cb8:	e0863103 	add	r3, r6, r3, lsl #2
    8cbc:	e0830000 	add	r0, r3, r0
    8cc0:	e1a0708e 	lsl	r7, lr, #1
    8cc4:	e2423001 	sub	r3, r2, #1
    8cc8:	e282c005 	add	ip, r2, #5
    8ccc:	e5f32001 	ldrb	r2, [r3, #1]!
    8cd0:	e153000c 	cmp	r3, ip
    8cd4:	e4c02001 	strb	r2, [r0], #1
    8cd8:	1afffffb 	bne	8ccc <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0x74>
    8cdc:	e59f0044 	ldr	r0, [pc, #68]	; 8d28 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0xd0>
    8ce0:	e087200e 	add	r2, r7, lr
    8ce4:	e0862102 	add	r2, r6, r2, lsl #2
    8ce8:	e2843a01 	add	r3, r4, #4096	; 0x1000
    8cec:	e7821000 	str	r1, [r2, r0]
    8cf0:	e59328fc 	ldr	r2, [r3, #2300]	; 0x8fc
    8cf4:	e2822001 	add	r2, r2, #1
    8cf8:	e58328fc 	str	r2, [r3, #2300]	; 0x8fc
    8cfc:	e59328fc 	ldr	r2, [r3, #2300]	; 0x8fc
    8d00:	e1520005 	cmp	r2, r5
    8d04:	23a02000 	movcs	r2, #0
    8d08:	258328fc 	strcs	r2, [r3, #2300]	; 0x8fc
    8d0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8d10:	e040000c 	sub	r0, r0, ip
    8d14:	e3500001 	cmp	r0, #1
    8d18:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
    8d1c:	eaffffe2 	b	8cac <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0x54>
    8d20:	0004c504 	.word	0x0004c504
    8d24:	0010d44c 	.word	0x0010d44c
    8d28:	0010d454 	.word	0x0010d454

00008d2c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)>:
    8d2c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    8d30:	e1a04000 	mov	r4, r0
    8d34:	e24ddb1e 	sub	sp, sp, #30720	; 0x7800
    8d38:	e24dd014 	sub	sp, sp, #20
    8d3c:	e1a06001 	mov	r6, r1
    8d40:	e1a05002 	mov	r5, r2
    8d44:	e280107c 	add	r1, r0, #124	; 0x7c
    8d48:	e3a02e19 	mov	r2, #400	; 0x190
    8d4c:	e28d0004 	add	r0, sp, #4
    8d50:	eb008698 	bl	2a7b8 <memcpy>
    8d54:	e594c20c 	ldr	ip, [r4, #524]	; 0x20c
    8d58:	e59f3450 	ldr	r3, [pc, #1104]	; 91b0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x484>
    8d5c:	e2840f85 	add	r0, r4, #532	; 0x214
    8d60:	e8900007 	ldm	r0, {r0, r1, r2}
    8d64:	e59f8448 	ldr	r8, [pc, #1096]	; 91b4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x488>
    8d68:	e5d4e220 	ldrb	lr, [r4, #544]	; 0x220
    8d6c:	e58dc194 	str	ip, [sp, #404]	; 0x194
    8d70:	e58d3198 	str	r3, [sp, #408]	; 0x198
    8d74:	e594c224 	ldr	ip, [r4, #548]	; 0x224
    8d78:	e5943228 	ldr	r3, [r4, #552]	; 0x228
    8d7c:	e58d019c 	str	r0, [sp, #412]	; 0x19c
    8d80:	e28d0d07 	add	r0, sp, #448	; 0x1c0
    8d84:	e58d11a0 	str	r1, [sp, #416]	; 0x1a0
    8d88:	e58d21a4 	str	r2, [sp, #420]	; 0x1a4
    8d8c:	e2841e23 	add	r1, r4, #560	; 0x230
    8d90:	e59f2420 	ldr	r2, [pc, #1056]	; 91b8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x48c>
    8d94:	e2400008 	sub	r0, r0, #8
    8d98:	e5cde1a8 	strb	lr, [sp, #424]	; 0x1a8
    8d9c:	e58dc1ac 	str	ip, [sp, #428]	; 0x1ac
    8da0:	e58d31b0 	str	r3, [sp, #432]	; 0x1b0
    8da4:	e58d81b4 	str	r8, [sp, #436]	; 0x1b4
    8da8:	eb008682 	bl	2a7b8 <memcpy>
    8dac:	e2842a02 	add	r2, r4, #8192	; 0x2000
    8db0:	e592e940 	ldr	lr, [r2, #2368]	; 0x940
    8db4:	e592c944 	ldr	ip, [r2, #2372]	; 0x944
    8db8:	e28d3b0a 	add	r3, sp, #10240	; 0x2800
    8dbc:	e2833010 	add	r3, r3, #16
    8dc0:	e28d7b12 	add	r7, sp, #18432	; 0x4800
    8dc4:	e2841da5 	add	r1, r4, #10560	; 0x2940
    8dc8:	e2877010 	add	r7, r7, #16
    8dcc:	e58380c0 	str	r8, [r3, #192]	; 0xc0
    8dd0:	e583e0b8 	str	lr, [r3, #184]	; 0xb8
    8dd4:	e583c0bc 	str	ip, [r3, #188]	; 0xbc
    8dd8:	e59f23d8 	ldr	r2, [pc, #984]	; 91b8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x48c>
    8ddc:	e28300c4 	add	r0, r3, #196	; 0xc4
    8de0:	e281100c 	add	r1, r1, #12
    8de4:	eb008673 	bl	2a7b8 <memcpy>
    8de8:	e1a0c007 	mov	ip, r7
    8dec:	e2848a05 	add	r8, r4, #20480	; 0x5000
    8df0:	e5982068 	ldr	r2, [r8, #104]	; 0x68
    8df4:	e288306c 	add	r3, r8, #108	; 0x6c
    8df8:	e5ac27e0 	str	r2, [ip, #2016]!	; 0x7e0
    8dfc:	e598e060 	ldr	lr, [r8, #96]	; 0x60
    8e00:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    8e04:	e98c000f 	stmib	ip, {r0, r1, r2, r3}
    8e08:	e598205c 	ldr	r2, [r8, #92]	; 0x5c
    8e0c:	e5d8307c 	ldrb	r3, [r8, #124]	; 0x7c
    8e10:	e598c064 	ldr	ip, [r8, #100]	; 0x64
    8e14:	e2870e7f 	add	r0, r7, #2032	; 0x7f0
    8e18:	e288107d 	add	r1, r8, #125	; 0x7d
    8e1c:	e58727d4 	str	r2, [r7, #2004]	; 0x7d4
    8e20:	e5c737f4 	strb	r3, [r7, #2036]	; 0x7f4
    8e24:	e3a02065 	mov	r2, #101	; 0x65
    8e28:	e2800005 	add	r0, r0, #5
    8e2c:	e587e7d8 	str	lr, [r7, #2008]	; 0x7d8
    8e30:	e587c7dc 	str	ip, [r7, #2012]	; 0x7dc
    8e34:	eb00865f 	bl	2a7b8 <memcpy>
    8e38:	e2873e85 	add	r3, r7, #2128	; 0x850
    8e3c:	e28820e2 	add	r2, r8, #226	; 0xe2
    8e40:	e283300a 	add	r3, r3, #10
    8e44:	e2821020 	add	r1, r2, #32
    8e48:	e5927000 	ldr	r7, [r2]
    8e4c:	e592e004 	ldr	lr, [r2, #4]
    8e50:	e592c008 	ldr	ip, [r2, #8]
    8e54:	e592000c 	ldr	r0, [r2, #12]
    8e58:	e2822010 	add	r2, r2, #16
    8e5c:	e1520001 	cmp	r2, r1
    8e60:	e5837000 	str	r7, [r3]
    8e64:	e583e004 	str	lr, [r3, #4]
    8e68:	e583c008 	str	ip, [r3, #8]
    8e6c:	e583000c 	str	r0, [r3, #12]
    8e70:	e2833010 	add	r3, r3, #16
    8e74:	1afffff3 	bne	8e48 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x11c>
    8e78:	e5920000 	ldr	r0, [r2]
    8e7c:	e5921004 	ldr	r1, [r2, #4]
    8e80:	e5830000 	str	r0, [r3]
    8e84:	e5831004 	str	r1, [r3, #4]
    8e88:	e5d2c008 	ldrb	ip, [r2, #8]
    8e8c:	e2881f42 	add	r1, r8, #264	; 0x108
    8e90:	e28d0a05 	add	r0, sp, #20480	; 0x5000
    8e94:	e5c3c008 	strb	ip, [r3, #8]
    8e98:	e59f231c 	ldr	r2, [pc, #796]	; 91bc <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x490>
    8e9c:	e2811003 	add	r1, r1, #3
    8ea0:	e28d7b16 	add	r7, sp, #22528	; 0x5800
    8ea4:	e2800093 	add	r0, r0, #147	; 0x93
    8ea8:	eb008642 	bl	2a7b8 <memcpy>
    8eac:	e2877010 	add	r7, r7, #16
    8eb0:	e2883e8e 	add	r3, r8, #2272	; 0x8e0
    8eb4:	e288ce8f 	add	ip, r8, #2288	; 0x8f0
    8eb8:	e283300c 	add	r3, r3, #12
    8ebc:	e2879064 	add	r9, r7, #100	; 0x64
    8ec0:	e287e070 	add	lr, r7, #112	; 0x70
    8ec4:	e28cc008 	add	ip, ip, #8
    8ec8:	e8930007 	ldm	r3, {r0, r1, r2}
    8ecc:	e8890007 	stm	r9, {r0, r1, r2}
    8ed0:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    8ed4:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    8ed8:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    8edc:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    8ee0:	e59808dc 	ldr	r0, [r8, #2268]	; 0x8dc
    8ee4:	e2881e8e 	add	r1, r8, #2272	; 0x8e0
    8ee8:	e891000e 	ldm	r1, {r1, r2, r3}
    8eec:	e1c705f4 	strd	r0, [r7, #84]	; 0x54
    8ef0:	e1c725fc 	strd	r2, [r7, #92]	; 0x5c
    8ef4:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    8ef8:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    8efc:	e59cc000 	ldr	ip, [ip]
    8f00:	e598392c 	ldr	r3, [r8, #2348]	; 0x92c
    8f04:	e1cec0b0 	strh	ip, [lr]
    8f08:	e58730a4 	str	r3, [r7, #164]	; 0xa4
    8f0c:	e3a02efa 	mov	r2, #4000	; 0xfa0
    8f10:	e28700a8 	add	r0, r7, #168	; 0xa8
    8f14:	e2881e93 	add	r1, r8, #2352	; 0x930
    8f18:	e28d7b1a 	add	r7, sp, #26624	; 0x6800
    8f1c:	eb008625 	bl	2a7b8 <memcpy>
    8f20:	e2877010 	add	r7, r7, #16
    8f24:	e2841b1a 	add	r1, r4, #26624	; 0x6800
    8f28:	e3a02efa 	mov	r2, #4000	; 0xfa0
    8f2c:	e28110d0 	add	r1, r1, #208	; 0xd0
    8f30:	e2870048 	add	r0, r7, #72	; 0x48
    8f34:	eb00861f 	bl	2a7b8 <memcpy>
    8f38:	e2843a07 	add	r3, r4, #28672	; 0x7000
    8f3c:	e5d50000 	ldrb	r0, [r5]
    8f40:	e5931870 	ldr	r1, [r3, #2160]	; 0x870
    8f44:	e5d32874 	ldrb	r2, [r3, #2164]	; 0x874
    8f48:	e28dcb1e 	add	ip, sp, #30720	; 0x7800
    8f4c:	e2833e87 	add	r3, r3, #2160	; 0x870
    8f50:	e2833008 	add	r3, r3, #8
    8f54:	e350003b 	cmp	r0, #59	; 0x3b
    8f58:	e28cc010 	add	ip, ip, #16
    8f5c:	e5871fe8 	str	r1, [r7, #4072]	; 0xfe8
    8f60:	e5c72fec 	strb	r2, [r7, #4076]	; 0xfec
    8f64:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    8f68:	e90c000f 	stmdb	ip, {r0, r1, r2, r3}
    8f6c:	e5d43008 	ldrb	r3, [r4, #8]
    8f70:	0a00002e 	beq	9030 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x304>
    8f74:	e3530000 	cmp	r3, #0
    8f78:	0a000022 	beq	9008 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2dc>
    8f7c:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    8f80:	e3530063 	cmp	r3, #99	; 0x63
    8f84:	da000005 	ble	8fa0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x274>
    8f88:	e28d5004 	add	r5, sp, #4
    8f8c:	e1a00005 	mov	r0, r5
    8f90:	eb009f59 	bl	30cfc <CommandHandler::~CommandHandler()>
    8f94:	e28ddb1e 	add	sp, sp, #30720	; 0x7800
    8f98:	e28dd014 	add	sp, sp, #20
    8f9c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    8fa0:	e1a01005 	mov	r1, r5
    8fa4:	e1a00006 	mov	r0, r6
    8fa8:	eb00b799 	bl	36e14 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>
    8fac:	e1a06000 	mov	r6, r0
    8fb0:	eb008405 	bl	29fcc <strlen>
    8fb4:	e3500000 	cmp	r0, #0
    8fb8:	0afffff2 	beq	8f88 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x25c>
    8fbc:	e1d630d0 	ldrsb	r3, [r6]
    8fc0:	e3530008 	cmp	r3, #8
    8fc4:	0a00002f 	beq	9088 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x35c>
    8fc8:	e353000d 	cmp	r3, #13
    8fcc:	0a000038 	beq	90b4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x388>
    8fd0:	e2433020 	sub	r3, r3, #32
    8fd4:	e6ef3073 	uxtb	r3, r3
    8fd8:	e353005e 	cmp	r3, #94	; 0x5e
    8fdc:	8affffe9 	bhi	8f88 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x25c>
    8fe0:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    8fe4:	e28d5004 	add	r5, sp, #4
    8fe8:	e2832001 	add	r2, r3, #1
    8fec:	e5842070 	str	r2, [r4, #112]	; 0x70
    8ff0:	e1d610d0 	ldrsb	r1, [r6]
    8ff4:	e0843003 	add	r3, r4, r3
    8ff8:	e5c31009 	strb	r1, [r3, #9]
    8ffc:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    9000:	eb00c4ff 	bl	3a404 <Display::consolePut(unsigned long)>
    9004:	eaffffe0 	b	8f8c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x260>
    9008:	e59f01b0 	ldr	r0, [pc, #432]	; 91c0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x494>
    900c:	e1a02005 	mov	r2, r5
    9010:	e1a01006 	mov	r1, r6
    9014:	e0840000 	add	r0, r4, r0
    9018:	eb00b2fb 	bl	35c0c <McManager::keyHandler(unsigned char, unsigned char const*)>
    901c:	e28d0004 	add	r0, sp, #4
    9020:	eb009f35 	bl	30cfc <CommandHandler::~CommandHandler()>
    9024:	e28ddb1e 	add	sp, sp, #30720	; 0x7800
    9028:	e28dd014 	add	sp, sp, #20
    902c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    9030:	e3530000 	cmp	r3, #0
    9034:	0a000003 	beq	9048 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x31c>
    9038:	e3a03001 	mov	r3, #1
    903c:	e28d5004 	add	r5, sp, #4
    9040:	e5c43008 	strb	r3, [r4, #8]
    9044:	eaffffd0 	b	8f8c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x260>
    9048:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    904c:	e59f1170 	ldr	r1, [pc, #368]	; 91c4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x498>
    9050:	eb00c4e6 	bl	3a3f0 <Display::consolePut(char const*)>
    9054:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    9058:	e59f1168 	ldr	r1, [pc, #360]	; 91c8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x49c>
    905c:	eb00c4e3 	bl	3a3f0 <Display::consolePut(char const*)>
    9060:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    9064:	e59f1160 	ldr	r1, [pc, #352]	; 91cc <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4a0>
    9068:	eb00c4e0 	bl	3a3f0 <Display::consolePut(char const*)>
    906c:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    9070:	e59f1158 	ldr	r1, [pc, #344]	; 91d0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4a4>
    9074:	eb00c4dd 	bl	3a3f0 <Display::consolePut(char const*)>
    9078:	e59f1154 	ldr	r1, [pc, #340]	; 91d4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4a8>
    907c:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    9080:	eb00c4da 	bl	3a3f0 <Display::consolePut(char const*)>
    9084:	eaffffeb 	b	9038 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x30c>
    9088:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    908c:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    9090:	e3530000 	cmp	r3, #0
    9094:	c2433001 	subgt	r3, r3, #1
    9098:	e3a01008 	mov	r1, #8
    909c:	c5843070 	strgt	r3, [r4, #112]	; 0x70
    90a0:	eb00c4d7 	bl	3a404 <Display::consolePut(unsigned long)>
    90a4:	e3a01020 	mov	r1, #32
    90a8:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    90ac:	eb00c4d4 	bl	3a404 <Display::consolePut(unsigned long)>
    90b0:	eaffffb4 	b	8f88 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x25c>
    90b4:	e3a02000 	mov	r2, #0
    90b8:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    90bc:	e5c42008 	strb	r2, [r4, #8]
    90c0:	e1530002 	cmp	r3, r2
    90c4:	e0843003 	add	r3, r4, r3
    90c8:	e5c32009 	strb	r2, [r3, #9]
    90cc:	ca000007 	bgt	90f0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3c4>
    90d0:	e28d5004 	add	r5, sp, #4
    90d4:	e3a06000 	mov	r6, #0
    90d8:	e59f10f8 	ldr	r1, [pc, #248]	; 91d8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4ac>
    90dc:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    90e0:	e5846070 	str	r6, [r4, #112]	; 0x70
    90e4:	eb00c4c1 	bl	3a3f0 <Display::consolePut(char const*)>
    90e8:	e5c46008 	strb	r6, [r4, #8]
    90ec:	eaffffa6 	b	8f8c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x260>
    90f0:	e1d400d9 	ldrsb	r0, [r4, #9]
    90f4:	eb0094f8 	bl	2e4dc <rdtolower>
    90f8:	e3500074 	cmp	r0, #116	; 0x74
    90fc:	0afffff3 	beq	90d0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3a4>
    9100:	e1d400d9 	ldrsb	r0, [r4, #9]
    9104:	eb0094f4 	bl	2e4dc <rdtolower>
    9108:	e350006d 	cmp	r0, #109	; 0x6d
    910c:	0a00001a 	beq	917c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x450>
    9110:	e1d400d9 	ldrsb	r0, [r4, #9]
    9114:	eb0094f0 	bl	2e4dc <rdtolower>
    9118:	e3500062 	cmp	r0, #98	; 0x62
    911c:	0affffeb 	beq	90d0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3a4>
    9120:	e1d400d9 	ldrsb	r0, [r4, #9]
    9124:	eb0094ec 	bl	2e4dc <rdtolower>
    9128:	e3500072 	cmp	r0, #114	; 0x72
    912c:	0affffe7 	beq	90d0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3a4>
    9130:	e1d400d9 	ldrsb	r0, [r4, #9]
    9134:	eb0094e8 	bl	2e4dc <rdtolower>
    9138:	e3500073 	cmp	r0, #115	; 0x73
    913c:	0affffe3 	beq	90d0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3a4>
    9140:	e2846009 	add	r6, r4, #9
    9144:	e28d5004 	add	r5, sp, #4
    9148:	e1a00005 	mov	r0, r5
    914c:	e1a01006 	mov	r1, r6
    9150:	eb009e58 	bl	30ab8 <CommandHandler::sendAPIReq(char const*)>
    9154:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    9158:	e59f107c 	ldr	r1, [pc, #124]	; 91dc <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4b0>
    915c:	eb00c4a3 	bl	3a3f0 <Display::consolePut(char const*)>
    9160:	e1a01006 	mov	r1, r6
    9164:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    9168:	eb00c4a0 	bl	3a3f0 <Display::consolePut(char const*)>
    916c:	e59f106c 	ldr	r1, [pc, #108]	; 91e0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4b4>
    9170:	e5940078 	ldr	r0, [r4, #120]	; 0x78
    9174:	eb00c49d 	bl	3a3f0 <Display::consolePut(char const*)>
    9178:	eaffffd5 	b	90d4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3a8>
    917c:	e3a03001 	mov	r3, #1
    9180:	e2846943 	add	r6, r4, #1097728	; 0x10c000
    9184:	e2866a01 	add	r6, r6, #4096	; 0x1000
    9188:	e2842b1e 	add	r2, r4, #30720	; 0x7800
    918c:	e5c63909 	strb	r3, [r6, #2313]	; 0x909
    9190:	e1a00004 	mov	r0, r4
    9194:	e5941078 	ldr	r1, [r4, #120]	; 0x78
    9198:	e2822098 	add	r2, r2, #152	; 0x98
    919c:	eb00b986 	bl	377bc <selfTestMemory(BusRaiderApp*, Display&, BusControl&)>
    91a0:	e3a03000 	mov	r3, #0
    91a4:	e28d5004 	add	r5, sp, #4
    91a8:	e5c63909 	strb	r3, [r6, #2313]	; 0x909
    91ac:	eaffffc8 	b	90d4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3a8>
    91b0:	00044724 	.word	0x00044724
    91b4:	0003d460 	.word	0x0003d460
    91b8:	00002710 	.word	0x00002710
    91bc:	000007d1 	.word	0x000007d1
    91c0:	00107cd0 	.word	0x00107cd0
    91c4:	0003d274 	.word	0x0003d274
    91c8:	0003d284 	.word	0x0003d284
    91cc:	0003d2c4 	.word	0x0003d2c4
    91d0:	0003d2ec 	.word	0x0003d2ec
    91d4:	0003d314 	.word	0x0003d314
    91d8:	0003d354 	.word	0x0003d354
    91dc:	0003d33c 	.word	0x0003d33c
    91e0:	000458c4 	.word	0x000458c4

000091e4 <BusRaiderApp::service()>:
    91e4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    91e8:	e1a04000 	mov	r4, r0
    91ec:	e24dde7d 	sub	sp, sp, #2000	; 0x7d0
    91f0:	e2800b1e 	add	r0, r0, #30720	; 0x7800
    91f4:	e24dd00c 	sub	sp, sp, #12
    91f8:	e2800098 	add	r0, r0, #152	; 0x98
    91fc:	eb009fa1 	bl	31088 <BusControl::service()>
    9200:	e59f5228 	ldr	r5, [pc, #552]	; 9430 <BusRaiderApp::service()+0x24c>
    9204:	e59f0228 	ldr	r0, [pc, #552]	; 9434 <BusRaiderApp::service()+0x250>
    9208:	e0845005 	add	r5, r4, r5
    920c:	e0840000 	add	r0, r4, r0
    9210:	eb00aba0 	bl	34098 <ControlAPI::service()>
    9214:	e284607c 	add	r6, r4, #124	; 0x7c
    9218:	e1a00005 	mov	r0, r5
    921c:	eb00b1fc 	bl	35a14 <McManager::service()>
    9220:	e1a00006 	mov	r0, r6
    9224:	eb009f54 	bl	30f7c <CommsManager::service()>
    9228:	eb0092d3 	bl	2dd7c <micros>
    922c:	e5941074 	ldr	r1, [r4, #116]	; 0x74
    9230:	e59f2200 	ldr	r2, [pc, #512]	; 9438 <BusRaiderApp::service()+0x254>
    9234:	eb0092ee 	bl	2ddf4 <isTimeout>
    9238:	e3500000 	cmp	r0, #0
    923c:	0a000005 	beq	9258 <BusRaiderApp::service()+0x74>
    9240:	e59f31f4 	ldr	r3, [pc, #500]	; 943c <BusRaiderApp::service()+0x258>
    9244:	e5933000 	ldr	r3, [r3]
    9248:	e2833a05 	add	r3, r3, #20480	; 0x5000
    924c:	e5937860 	ldr	r7, [r3, #2144]	; 0x860
    9250:	e3570000 	cmp	r7, #0
    9254:	0a000055 	beq	93b0 <BusRaiderApp::service()+0x1cc>
    9258:	e2845942 	add	r5, r4, #1081344	; 0x108000
    925c:	e2855a02 	add	r5, r5, #8192	; 0x2000
    9260:	eb0092c6 	bl	2dd80 <millis>
    9264:	e5951d30 	ldr	r1, [r5, #3376]	; 0xd30
    9268:	e59f21d0 	ldr	r2, [pc, #464]	; 9440 <BusRaiderApp::service()+0x25c>
    926c:	eb0092e0 	bl	2ddf4 <isTimeout>
    9270:	e3500000 	cmp	r0, #0
    9274:	0a000007 	beq	9298 <BusRaiderApp::service()+0xb4>
    9278:	e59f31bc 	ldr	r3, [pc, #444]	; 943c <BusRaiderApp::service()+0x258>
    927c:	e5933000 	ldr	r3, [r3]
    9280:	e2833a05 	add	r3, r3, #20480	; 0x5000
    9284:	e5933860 	ldr	r3, [r3, #2144]	; 0x860
    9288:	e3530000 	cmp	r3, #0
    928c:	0a000057 	beq	93f0 <BusRaiderApp::service()+0x20c>
    9290:	eb0092ba 	bl	2dd80 <millis>
    9294:	e5850d30 	str	r0, [r5, #3376]	; 0xd30
    9298:	e2847943 	add	r7, r4, #1097728	; 0x10c000
    929c:	e2875a01 	add	r5, r7, #4096	; 0x1000
    92a0:	e5953444 	ldr	r3, [r5, #1092]	; 0x444
    92a4:	e3530000 	cmp	r3, #0
    92a8:	0a000024 	beq	9340 <BusRaiderApp::service()+0x15c>
    92ac:	e1a00004 	mov	r0, r4
    92b0:	ebfffd07 	bl	86d4 <BusRaiderApp::statusDisplayUpdate()>
    92b4:	e5d56908 	ldrb	r6, [r5, #2312]	; 0x908
    92b8:	e3560000 	cmp	r6, #0
    92bc:	0a000002 	beq	92cc <BusRaiderApp::service()+0xe8>
    92c0:	e5d53909 	ldrb	r3, [r5, #2313]	; 0x909
    92c4:	e3530000 	cmp	r3, #0
    92c8:	0a000019 	beq	9334 <BusRaiderApp::service()+0x150>
    92cc:	e59528fc 	ldr	r2, [r5, #2300]	; 0x8fc
    92d0:	e5953900 	ldr	r3, [r5, #2304]	; 0x900
    92d4:	e1520003 	cmp	r2, r3
    92d8:	0a000015 	beq	9334 <BusRaiderApp::service()+0x150>
    92dc:	e5950900 	ldr	r0, [r5, #2304]	; 0x900
    92e0:	e5953900 	ldr	r3, [r5, #2304]	; 0x900
    92e4:	e5952904 	ldr	r2, [r5, #2308]	; 0x904
    92e8:	e2833001 	add	r3, r3, #1
    92ec:	e5853900 	str	r3, [r5, #2304]	; 0x900
    92f0:	e5953900 	ldr	r3, [r5, #2304]	; 0x900
    92f4:	e1530002 	cmp	r3, r2
    92f8:	23a03000 	movcs	r3, #0
    92fc:	25853900 	strcs	r3, [r5, #2304]	; 0x900
    9300:	e3560000 	cmp	r6, #0
    9304:	1a000019 	bne	9370 <BusRaiderApp::service()+0x18c>
    9308:	e3a01001 	mov	r1, #1
    930c:	e59f2130 	ldr	r2, [pc, #304]	; 9444 <BusRaiderApp::service()+0x260>
    9310:	e0800110 	add	r0, r0, r0, lsl r1
    9314:	e5c51908 	strb	r1, [r5, #2312]	; 0x908
    9318:	e59f1128 	ldr	r1, [pc, #296]	; 9448 <BusRaiderApp::service()+0x264>
    931c:	e084c100 	add	ip, r4, r0, lsl #2
    9320:	e7dc1001 	ldrb	r1, [ip, r1]
    9324:	e1a00004 	mov	r0, r4
    9328:	e08c2002 	add	r2, ip, r2
    932c:	ebfffe7e 	bl	8d2c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)>
    9330:	e5c56908 	strb	r6, [r5, #2312]	; 0x908
    9334:	e28dde7d 	add	sp, sp, #2000	; 0x7d0
    9338:	e28dd00c 	add	sp, sp, #12
    933c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9340:	eb00928d 	bl	2dd7c <micros>
    9344:	e59f2100 	ldr	r2, [pc, #256]	; 944c <BusRaiderApp::service()+0x268>
    9348:	e5951448 	ldr	r1, [r5, #1096]	; 0x448
    934c:	eb0092a8 	bl	2ddf4 <isTimeout>
    9350:	e3500000 	cmp	r0, #0
    9354:	0affffd4 	beq	92ac <BusRaiderApp::service()+0xc8>
    9358:	e1a00006 	mov	r0, r6
    935c:	e59f10ec 	ldr	r1, [pc, #236]	; 9450 <BusRaiderApp::service()+0x26c>
    9360:	eb009dd4 	bl	30ab8 <CommandHandler::sendAPIReq(char const*)>
    9364:	eb009284 	bl	2dd7c <micros>
    9368:	e5850448 	str	r0, [r5, #1096]	; 0x448
    936c:	eaffffce 	b	92ac <BusRaiderApp::service()+0xc8>
    9370:	e59f30d0 	ldr	r3, [pc, #208]	; 9448 <BusRaiderApp::service()+0x264>
    9374:	e0800080 	add	r0, r0, r0, lsl #1
    9378:	e59f10c4 	ldr	r1, [pc, #196]	; 9444 <BusRaiderApp::service()+0x260>
    937c:	e0842100 	add	r2, r4, r0, lsl #2
    9380:	e7d20003 	ldrb	r0, [r2, r3]
    9384:	e0821001 	add	r1, r2, r1
    9388:	eb00b6a1 	bl	36e14 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>
    938c:	e1a04000 	mov	r4, r0
    9390:	eb00830d 	bl	29fcc <strlen>
    9394:	e3500000 	cmp	r0, #0
    9398:	11d430d0 	ldrsbne	r3, [r4]
    939c:	12877a01 	addne	r7, r7, #4096	; 0x1000
    93a0:	1587390c 	strne	r3, [r7, #2316]	; 0x90c
    93a4:	e28dde7d 	add	sp, sp, #2000	; 0x7d0
    93a8:	e28dd00c 	add	sp, sp, #12
    93ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    93b0:	e1a00005 	mov	r0, r5
    93b4:	eb00b025 	bl	35450 <McManager::getMachineJSON()>
    93b8:	e59f5094 	ldr	r5, [pc, #148]	; 9454 <BusRaiderApp::service()+0x270>
    93bc:	e1a01000 	mov	r1, r0
    93c0:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    93c4:	e28d0008 	add	r0, sp, #8
    93c8:	e0845005 	add	r5, r4, r5
    93cc:	eb0092a4 	bl	2de64 <strlcpy>
    93d0:	e1a01005 	mov	r1, r5
    93d4:	e28d0008 	add	r0, sp, #8
    93d8:	eb008305 	bl	29ff4 <strcmp>
    93dc:	e3500000 	cmp	r0, #0
    93e0:	1a000006 	bne	9400 <BusRaiderApp::service()+0x21c>
    93e4:	eb009264 	bl	2dd7c <micros>
    93e8:	e5840074 	str	r0, [r4, #116]	; 0x74
    93ec:	eaffff99 	b	9258 <BusRaiderApp::service()+0x74>
    93f0:	e1a00006 	mov	r0, r6
    93f4:	e59f105c 	ldr	r1, [pc, #92]	; 9458 <BusRaiderApp::service()+0x274>
    93f8:	eb009dae 	bl	30ab8 <CommandHandler::sendAPIReq(char const*)>
    93fc:	eaffffa3 	b	9290 <BusRaiderApp::service()+0xac>
    9400:	e28d1008 	add	r1, sp, #8
    9404:	e1a00005 	mov	r0, r5
    9408:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    940c:	eb009294 	bl	2de64 <strlcpy>
    9410:	e1a03007 	mov	r3, r7
    9414:	e1a00006 	mov	r0, r6
    9418:	e59f103c 	ldr	r1, [pc, #60]	; 945c <BusRaiderApp::service()+0x278>
    941c:	e58d7004 	str	r7, [sp, #4]
    9420:	e58d7000 	str	r7, [sp]
    9424:	e28d2008 	add	r2, sp, #8
    9428:	eb009a84 	bl	2fe40 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
    942c:	eaffffec 	b	93e4 <BusRaiderApp::service()+0x200>
    9430:	00107cd0 	.word	0x00107cd0
    9434:	00107cbc 	.word	0x00107cbc
    9438:	000f4240 	.word	0x000f4240
    943c:	0004c664 	.word	0x0004c664
    9440:	00001388 	.word	0x00001388
    9444:	0010d44c 	.word	0x0010d44c
    9448:	0010d454 	.word	0x0010d454
    944c:	004c4b40 	.word	0x004c4b40
    9450:	0003d384 	.word	0x0003d384
    9454:	0010a458 	.word	0x0010a458
    9458:	0003d374 	.word	0x0003d374
    945c:	0003d364 	.word	0x0003d364

00009460 <BusRaiderApp::getPiStatus(char*, int)>:
    9460:	e1a03000 	mov	r3, r0
    9464:	e92d4070 	push	{r4, r5, r6, lr}
    9468:	e1a04001 	mov	r4, r1
    946c:	e59f0024 	ldr	r0, [pc, #36]	; 9498 <BusRaiderApp::getPiStatus(char*, int)+0x38>
    9470:	e1a05002 	mov	r5, r2
    9474:	e0830000 	add	r0, r3, r0
    9478:	eb00aff4 	bl	35450 <McManager::getMachineJSON()>
    947c:	e3540000 	cmp	r4, #0
    9480:	08bd8070 	popeq	{r4, r5, r6, pc}
    9484:	e1a01000 	mov	r1, r0
    9488:	e1a02005 	mov	r2, r5
    948c:	e1a00004 	mov	r0, r4
    9490:	e8bd4070 	pop	{r4, r5, r6, lr}
    9494:	ea009272 	b	2de64 <strlcpy>
    9498:	00107cd0 	.word	0x00107cd0

0000949c <BusRaiderApp::storeESP32StatusInfo(char const*)>:
    949c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    94a0:	e59f514c 	ldr	r5, [pc, #332]	; 95f4 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x158>
    94a4:	e24dde45 	sub	sp, sp, #1104	; 0x450
    94a8:	e0805005 	add	r5, r0, r5
    94ac:	e24dd008 	sub	sp, sp, #8
    94b0:	e1a04000 	mov	r4, r0
    94b4:	e1a00005 	mov	r0, r5
    94b8:	e58d1004 	str	r1, [sp, #4]
    94bc:	eb0082c2 	bl	29fcc <strlen>
    94c0:	e1a08000 	mov	r8, r0
    94c4:	eb00922d 	bl	2dd80 <millis>
    94c8:	e2846942 	add	r6, r4, #1081344	; 0x108000
    94cc:	e2866a02 	add	r6, r6, #8192	; 0x2000
    94d0:	e59f7120 	ldr	r7, [pc, #288]	; 95f8 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x15c>
    94d4:	e5860d30 	str	r0, [r6, #3376]	; 0xd30
    94d8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    94dc:	eb00922e 	bl	2dd9c <microsDelay>
    94e0:	e0847007 	add	r7, r4, r7
    94e4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    94e8:	e59d1004 	ldr	r1, [sp, #4]
    94ec:	e28d2070 	add	r2, sp, #112	; 0x70
    94f0:	e59f0104 	ldr	r0, [pc, #260]	; 95fc <BusRaiderApp::storeESP32StatusInfo(char const*)+0x160>
    94f4:	eb009307 	bl	2e118 <jsonGetValueForKey>
    94f8:	e1a02007 	mov	r2, r7
    94fc:	e3a0301e 	mov	r3, #30
    9500:	e28d1070 	add	r1, sp, #112	; 0x70
    9504:	e59f00f4 	ldr	r0, [pc, #244]	; 9600 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x164>
    9508:	eb009302 	bl	2e118 <jsonGetValueForKey>
    950c:	e59f10f0 	ldr	r1, [pc, #240]	; 9604 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x168>
    9510:	e1a00007 	mov	r0, r7
    9514:	eb0082b6 	bl	29ff4 <strcmp>
    9518:	e2500000 	subs	r0, r0, #0
    951c:	13a00001 	movne	r0, #1
    9520:	e59f20e0 	ldr	r2, [pc, #224]	; 9608 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x16c>
    9524:	e3a0301e 	mov	r3, #30
    9528:	e5c60d2c 	strb	r0, [r6, #3372]	; 0xd2c
    952c:	e0842002 	add	r2, r4, r2
    9530:	e28d1070 	add	r1, sp, #112	; 0x70
    9534:	e59f00d0 	ldr	r0, [pc, #208]	; 960c <BusRaiderApp::storeESP32StatusInfo(char const*)+0x170>
    9538:	eb0092f6 	bl	2e118 <jsonGetValueForKey>
    953c:	e59f20cc 	ldr	r2, [pc, #204]	; 9610 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x174>
    9540:	e3a03064 	mov	r3, #100	; 0x64
    9544:	e28d1070 	add	r1, sp, #112	; 0x70
    9548:	e0842002 	add	r2, r4, r2
    954c:	e59f00c0 	ldr	r0, [pc, #192]	; 9614 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x178>
    9550:	eb0092f0 	bl	2e118 <jsonGetValueForKey>
    9554:	e1a02005 	mov	r2, r5
    9558:	e3a03064 	mov	r3, #100	; 0x64
    955c:	e28d1070 	add	r1, sp, #112	; 0x70
    9560:	e59f00b0 	ldr	r0, [pc, #176]	; 9618 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x17c>
    9564:	eb0092eb 	bl	2e118 <jsonGetValueForKey>
    9568:	e3a0c000 	mov	ip, #0
    956c:	e3a03064 	mov	r3, #100	; 0x64
    9570:	e28d1070 	add	r1, sp, #112	; 0x70
    9574:	e28d200c 	add	r2, sp, #12
    9578:	e59f009c 	ldr	r0, [pc, #156]	; 961c <BusRaiderApp::storeESP32StatusInfo(char const*)+0x180>
    957c:	e5cdc00c 	strb	ip, [sp, #12]
    9580:	eb0092e4 	bl	2e118 <jsonGetValueForKey>
    9584:	e28d000c 	add	r0, sp, #12
    9588:	eb00828f 	bl	29fcc <strlen>
    958c:	e3500000 	cmp	r0, #0
    9590:	03a00014 	moveq	r0, #20
    9594:	1a00000e 	bne	95d4 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x138>
    9598:	e2844941 	add	r4, r4, #1064960	; 0x104000
    959c:	e2844a03 	add	r4, r4, #12288	; 0x3000
    95a0:	e5840ca4 	str	r0, [r4, #3236]	; 0xca4
    95a4:	e1a00005 	mov	r0, r5
    95a8:	eb008287 	bl	29fcc <strlen>
    95ac:	e2503000 	subs	r3, r0, #0
    95b0:	13a03001 	movne	r3, #1
    95b4:	e3580000 	cmp	r8, #0
    95b8:	01a00003 	moveq	r0, r3
    95bc:	13a00000 	movne	r0, #0
    95c0:	e3500000 	cmp	r0, #0
    95c4:	1a000005 	bne	95e0 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x144>
    95c8:	e28dde45 	add	sp, sp, #1104	; 0x450
    95cc:	e28dd008 	add	sp, sp, #8
    95d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    95d4:	e28d000c 	add	r0, sp, #12
    95d8:	eb008472 	bl	2a7a8 <atoi>
    95dc:	eaffffed 	b	9598 <BusRaiderApp::storeESP32StatusInfo(char const*)+0xfc>
    95e0:	e59f0038 	ldr	r0, [pc, #56]	; 9620 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x184>
    95e4:	eb0095db 	bl	2ed58 <LogSetOutFn>
    95e8:	e28dde45 	add	sp, sp, #1104	; 0x450
    95ec:	e28dd008 	add	sp, sp, #8
    95f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    95f4:	0010acc8 	.word	0x0010acc8
    95f8:	0010ac28 	.word	0x0010ac28
    95fc:	0003d390 	.word	0x0003d390
    9600:	0003d39c 	.word	0x0003d39c
    9604:	0003d3a4 	.word	0x0003d3a4
    9608:	0010ac46 	.word	0x0010ac46
    960c:	0003d3ac 	.word	0x0003d3ac
    9610:	0010ac64 	.word	0x0010ac64
    9614:	0003d3b8 	.word	0x0003d3b8
    9618:	0003d3c0 	.word	0x0003d3c0
    961c:	0003d3c8 	.word	0x0003d3c8
    9620:	00030ba0 	.word	0x00030ba0

00009624 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
    9624:	e92d4070 	push	{r4, r5, r6, lr}
    9628:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    962c:	e1a06000 	mov	r6, r0
    9630:	e3a030c8 	mov	r3, #200	; 0xc8
    9634:	e59f00c0 	ldr	r0, [pc, #192]	; 96fc <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd8>
    9638:	e28d2004 	add	r2, sp, #4
    963c:	e1a05001 	mov	r5, r1
    9640:	eb0092b4 	bl	2e118 <jsonGetValueForKey>
    9644:	e2504000 	subs	r4, r0, #0
    9648:	1a000003 	bne	965c <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
    964c:	e3a04000 	mov	r4, #0
    9650:	e1a00004 	mov	r0, r4
    9654:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    9658:	e8bd8070 	pop	{r4, r5, r6, pc}
    965c:	e3a03000 	mov	r3, #0
    9660:	e59d20e0 	ldr	r2, [sp, #224]	; 0xe0
    9664:	e59f1094 	ldr	r1, [pc, #148]	; 9700 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdc>
    9668:	e5c23000 	strb	r3, [r2]
    966c:	e28d0004 	add	r0, sp, #4
    9670:	eb00827c 	bl	2a068 <strcasecmp>
    9674:	e3500000 	cmp	r0, #0
    9678:	0a000012 	beq	96c8 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa4>
    967c:	e59f1080 	ldr	r1, [pc, #128]	; 9704 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe0>
    9680:	e28d0004 	add	r0, sp, #4
    9684:	eb008277 	bl	2a068 <strcasecmp>
    9688:	e3500000 	cmp	r0, #0
    968c:	0a000014 	beq	96e4 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc0>
    9690:	e59f1070 	ldr	r1, [pc, #112]	; 9708 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe4>
    9694:	e28d0004 	add	r0, sp, #4
    9698:	eb008272 	bl	2a068 <strcasecmp>
    969c:	e3500000 	cmp	r0, #0
    96a0:	1affffe9 	bne	964c <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x28>
    96a4:	e59f0060 	ldr	r0, [pc, #96]	; 970c <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe8>
    96a8:	e1a01005 	mov	r1, r5
    96ac:	e0860000 	add	r0, r6, r0
    96b0:	eb00afce 	bl	355f0 <McManager::setupMachine(char const*)>
    96b4:	e3a03001 	mov	r3, #1
    96b8:	e286c943 	add	ip, r6, #1097728	; 0x10c000
    96bc:	e28cca01 	add	ip, ip, #4096	; 0x1000
    96c0:	e58c3444 	str	r3, [ip, #1092]	; 0x444
    96c4:	eaffffe1 	b	9650 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2c>
    96c8:	e1a00006 	mov	r0, r6
    96cc:	e59d20e4 	ldr	r2, [sp, #228]	; 0xe4
    96d0:	e59d10e0 	ldr	r1, [sp, #224]	; 0xe0
    96d4:	ebffff61 	bl	9460 <BusRaiderApp::getPiStatus(char*, int)>
    96d8:	e1a00004 	mov	r0, r4
    96dc:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    96e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    96e4:	e1a00006 	mov	r0, r6
    96e8:	e1a01005 	mov	r1, r5
    96ec:	ebffff6a 	bl	949c <BusRaiderApp::storeESP32StatusInfo(char const*)>
    96f0:	e1a00004 	mov	r0, r4
    96f4:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    96f8:	e8bd8070 	pop	{r4, r5, r6, pc}
    96fc:	0003d3d0 	.word	0x0003d3d0
    9700:	0003d3d8 	.word	0x0003d3d8
    9704:	0003d3e4 	.word	0x0003d3e4
    9708:	0003d3f8 	.word	0x0003d3f8
    970c:	00107cd0 	.word	0x00107cd0

00009710 <BusRaiderApp::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
    9710:	e3500000 	cmp	r0, #0
    9714:	012fff1e 	bxeq	lr
    9718:	eaffffc1 	b	9624 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

0000971c <BusRaiderApp::selfTestHelperService()>:
    971c:	eafffeb0 	b	91e4 <BusRaiderApp::service()>

00009720 <BusRaiderApp::selfTestKeyboardGet()>:
    9720:	e3e02000 	mvn	r2, #0
    9724:	e2803943 	add	r3, r0, #1097728	; 0x10c000
    9728:	e2833a01 	add	r3, r3, #4096	; 0x1000
    972c:	e593090c 	ldr	r0, [r3, #2316]	; 0x90c
    9730:	e583290c 	str	r2, [r3, #2316]	; 0x90c
    9734:	e12fff1e 	bx	lr

00009738 <SimpleBuffer::~SimpleBuffer()>:
    9738:	e12fff1e 	bx	lr

0000973c <SimpleBuffer::~SimpleBuffer()>:
    973c:	e92d4010 	push	{r4, lr}
    9740:	e1a04000 	mov	r4, r0
    9744:	e59f1008 	ldr	r1, [pc, #8]	; 9754 <SimpleBuffer::~SimpleBuffer()+0x18>
    9748:	eb00860e 	bl	2af88 <operator delete(void*, unsigned int)>
    974c:	e1a00004 	mov	r0, r4
    9750:	e8bd8010 	pop	{r4, pc}
    9754:	00002718 	.word	0x00002718

00009758 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
    9758:	e92d4070 	push	{r4, r5, r6, lr}
    975c:	e3a06000 	mov	r6, #0
    9760:	e1a04000 	mov	r4, r0
    9764:	e59f5034 	ldr	r5, [pc, #52]	; 97a0 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x48>
    9768:	e580643c 	str	r6, [r0, #1084]	; 0x43c
    976c:	e2853008 	add	r3, r5, #8
    9770:	e5803000 	str	r3, [r0]
    9774:	eb006eb0 	bl	2523c <CDeviceNameService::Get()>
    9778:	e1a03006 	mov	r3, r6
    977c:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
    9780:	e2851030 	add	r1, r5, #48	; 0x30
    9784:	eb006ed2 	bl	252d4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
    9788:	e2840024 	add	r0, r4, #36	; 0x24
    978c:	eb003ac3 	bl	182a0 <CKeyboardBehaviour::~CKeyboardBehaviour()>
    9790:	e1a00004 	mov	r0, r4
    9794:	eb002236 	bl	12074 <CUSBHIDDevice::~CUSBHIDDevice()>
    9798:	e1a00004 	mov	r0, r4
    979c:	e8bd8070 	pop	{r4, r5, r6, pc}
    97a0:	0003d4c8 	.word	0x0003d4c8

000097a4 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
    97a4:	e92d4010 	push	{r4, lr}
    97a8:	e1a04000 	mov	r4, r0
    97ac:	ebffffe9 	bl	9758 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
    97b0:	e1a00004 	mov	r0, r4
    97b4:	e3a01e45 	mov	r1, #1104	; 0x450
    97b8:	eb0085f2 	bl	2af88 <operator delete(void*, unsigned int)>
    97bc:	e1a00004 	mov	r0, r4
    97c0:	e8bd8010 	pop	{r4, pc}

000097c4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
    97c4:	e2522008 	subs	r2, r2, #8
    97c8:	13a02001 	movne	r2, #1
    97cc:	e3510000 	cmp	r1, #0
    97d0:	03a02001 	moveq	r2, #1
    97d4:	e3520000 	cmp	r2, #0
    97d8:	112fff1e 	bxne	lr
    97dc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97e0:	e590343c 	ldr	r3, [r0, #1084]	; 0x43c
    97e4:	e1a05001 	mov	r5, r1
    97e8:	e3530000 	cmp	r3, #0
    97ec:	e1a06000 	mov	r6, r0
    97f0:	e24dd00c 	sub	sp, sp, #12
    97f4:	0a000003 	beq	9808 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
    97f8:	e4d10002 	ldrb	r0, [r1], #2
    97fc:	e28dd00c 	add	sp, sp, #12
    9800:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9804:	e12fff13 	bx	r3
    9808:	e1a04003 	mov	r4, r3
    980c:	e3a07001 	mov	r7, #1
    9810:	e2808024 	add	r8, r0, #36	; 0x24
    9814:	ea000004 	b	982c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>
    9818:	e1120003 	tst	r2, r3
    981c:	1a000041 	bne	9928 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x164>
    9820:	e2844001 	add	r4, r4, #1
    9824:	e3540008 	cmp	r4, #8
    9828:	0a00000d 	beq	9864 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xa0>
    982c:	e5d52000 	ldrb	r2, [r5]
    9830:	e1a03417 	lsl	r3, r7, r4
    9834:	e1120003 	tst	r2, r3
    9838:	e5d62440 	ldrb	r2, [r6, #1088]	; 0x440
    983c:	0afffff5 	beq	9818 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x54>
    9840:	e1120003 	tst	r2, r3
    9844:	1afffff5 	bne	9820 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x5c>
    9848:	e2441080 	sub	r1, r4, #128	; 0x80
    984c:	e1a00008 	mov	r0, r8
    9850:	e6ef1071 	uxtb	r1, r1
    9854:	e2844001 	add	r4, r4, #1
    9858:	eb003af2 	bl	18428 <CKeyboardBehaviour::KeyPressed(unsigned char)>
    985c:	e3540008 	cmp	r4, #8
    9860:	1afffff1 	bne	982c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>
    9864:	e2867d11 	add	r7, r6, #1088	; 0x440
    9868:	e2878002 	add	r8, r7, #2
    986c:	e1a09008 	mov	r9, r8
    9870:	e2874008 	add	r4, r7, #8
    9874:	e285b002 	add	fp, r5, #2
    9878:	e285a008 	add	sl, r5, #8
    987c:	e2860024 	add	r0, r6, #36	; 0x24
    9880:	ea000001 	b	988c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc8>
    9884:	e1540009 	cmp	r4, r9
    9888:	0a00000d 	beq	98c4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x100>
    988c:	e4d91001 	ldrb	r1, [r9], #1
    9890:	e3510000 	cmp	r1, #0
    9894:	11a0300b 	movne	r3, fp
    9898:	0afffff9 	beq	9884 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc0>
    989c:	e4d32001 	ldrb	r2, [r3], #1
    98a0:	e1520001 	cmp	r2, r1
    98a4:	0afffff6 	beq	9884 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc0>
    98a8:	e15a0003 	cmp	sl, r3
    98ac:	1afffffa 	bne	989c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd8>
    98b0:	e58d0004 	str	r0, [sp, #4]
    98b4:	eb003ae9 	bl	18460 <CKeyboardBehaviour::KeyReleased(unsigned char)>
    98b8:	e1540009 	cmp	r4, r9
    98bc:	e59d0004 	ldr	r0, [sp, #4]
    98c0:	1afffff1 	bne	988c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc8>
    98c4:	e2866024 	add	r6, r6, #36	; 0x24
    98c8:	e2859001 	add	r9, r5, #1
    98cc:	e285a007 	add	sl, r5, #7
    98d0:	ea000001 	b	98dc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x118>
    98d4:	e15a0009 	cmp	sl, r9
    98d8:	0a00000c 	beq	9910 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x14c>
    98dc:	e5f91001 	ldrb	r1, [r9, #1]!
    98e0:	e3510000 	cmp	r1, #0
    98e4:	11a03008 	movne	r3, r8
    98e8:	0afffff9 	beq	98d4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
    98ec:	e4d32001 	ldrb	r2, [r3], #1
    98f0:	e1520001 	cmp	r2, r1
    98f4:	0afffff6 	beq	98d4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
    98f8:	e1540003 	cmp	r4, r3
    98fc:	1afffffa 	bne	98ec <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x128>
    9900:	e1a00006 	mov	r0, r6
    9904:	eb003ac7 	bl	18428 <CKeyboardBehaviour::KeyPressed(unsigned char)>
    9908:	e15a0009 	cmp	sl, r9
    990c:	1afffff2 	bne	98dc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x118>
    9910:	e1a01005 	mov	r1, r5
    9914:	e1a00007 	mov	r0, r7
    9918:	e3a02008 	mov	r2, #8
    991c:	e28dd00c 	add	sp, sp, #12
    9920:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9924:	ea0083a3 	b	2a7b8 <memcpy>
    9928:	e2441080 	sub	r1, r4, #128	; 0x80
    992c:	e1a00008 	mov	r0, r8
    9930:	e6ef1071 	uxtb	r1, r1
    9934:	eb003ac9 	bl	18460 <CKeyboardBehaviour::KeyReleased(unsigned char)>
    9938:	eaffffb8 	b	9820 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x5c>

0000993c <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
    993c:	e92d4010 	push	{r4, lr}
    9940:	e1a04000 	mov	r4, r0
    9944:	e3a02008 	mov	r2, #8
    9948:	eb0021b3 	bl	1201c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
    994c:	e1a00004 	mov	r0, r4
    9950:	e59f3028 	ldr	r3, [pc, #40]	; 9980 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x44>
    9954:	e4803024 	str	r3, [r0], #36	; 0x24
    9958:	eb003a44 	bl	18270 <CKeyboardBehaviour::CKeyboardBehaviour()>
    995c:	e3a01000 	mov	r1, #0
    9960:	e3a02008 	mov	r2, #8
    9964:	e2840d11 	add	r0, r4, #1088	; 0x440
    9968:	e584143c 	str	r1, [r4, #1084]	; 0x43c
    996c:	e5c41448 	strb	r1, [r4, #1096]	; 0x448
    9970:	e584144c 	str	r1, [r4, #1100]	; 0x44c
    9974:	eb008146 	bl	29e94 <memset>
    9978:	e1a00004 	mov	r0, r4
    997c:	e8bd8010 	pop	{r4, pc}
    9980:	0003d4d0 	.word	0x0003d4d0

00009984 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
    9984:	e2800024 	add	r0, r0, #36	; 0x24
    9988:	ea003a4e 	b	182c8 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

0000998c <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
    998c:	e2800024 	add	r0, r0, #36	; 0x24
    9990:	ea003a57 	b	182f4 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

00009994 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
    9994:	e2800024 	add	r0, r0, #36	; 0x24
    9998:	ea003a60 	b	18320 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

0000999c <CUSBKeyboardDevice::GetLEDStatus() const>:
    999c:	e92d4010 	push	{r4, lr}
    99a0:	e2800024 	add	r0, r0, #36	; 0x24
    99a4:	eb003a68 	bl	1834c <CKeyboardBehaviour::GetLEDStatus() const>
    99a8:	e2003001 	and	r3, r0, #1
    99ac:	e3100002 	tst	r0, #2
    99b0:	13833002 	orrne	r3, r3, #2
    99b4:	e3100004 	tst	r0, #4
    99b8:	13833004 	orrne	r3, r3, #4
    99bc:	e1a00003 	mov	r0, r3
    99c0:	e8bd8010 	pop	{r4, pc}

000099c4 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>:
    99c4:	e3510000 	cmp	r1, #0
    99c8:	0a000001 	beq	99d4 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x10>
    99cc:	e580143c 	str	r1, [r0, #1084]	; 0x43c
    99d0:	e12fff1e 	bx	lr
    99d4:	e3a0207d 	mov	r2, #125	; 0x7d
    99d8:	e92d4010 	push	{r4, lr}
    99dc:	e59f1004 	ldr	r1, [pc, #4]	; 99e8 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x24>
    99e0:	e59f0004 	ldr	r0, [pc, #4]	; 99ec <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x28>
    99e4:	eb006b52 	bl	24734 <assertion_failed>
    99e8:	0003d468 	.word	0x0003d468
    99ec:	0003d478 	.word	0x0003d478

000099f0 <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
    99f0:	e92d4030 	push	{r4, r5, lr}
    99f4:	e24dd024 	sub	sp, sp, #36	; 0x24
    99f8:	e1a04000 	mov	r4, r0
    99fc:	e5cd101c 	strb	r1, [sp, #28]
    9a00:	eb0017cf 	bl	f944 <CUSBFunction::GetHost() const>
    9a04:	e1a05000 	mov	r5, r0
    9a08:	e1a00004 	mov	r0, r4
    9a0c:	eb0017c1 	bl	f918 <CUSBFunction::GetEndpoint0() const>
    9a10:	e1a01000 	mov	r1, r0
    9a14:	e1a00004 	mov	r0, r4
    9a18:	e58d1014 	str	r1, [sp, #20]
    9a1c:	eb001824 	bl	fab4 <CUSBFunction::GetInterfaceNumber() const>
    9a20:	e3a0e001 	mov	lr, #1
    9a24:	e3a0cc02 	mov	ip, #512	; 0x200
    9a28:	e6ff3070 	uxth	r3, r0
    9a2c:	e28d201c 	add	r2, sp, #28
    9a30:	e58d3004 	str	r3, [sp, #4]
    9a34:	e58d2008 	str	r2, [sp, #8]
    9a38:	e1a00005 	mov	r0, r5
    9a3c:	e3a03009 	mov	r3, #9
    9a40:	e3a02021 	mov	r2, #33	; 0x21
    9a44:	e59d1014 	ldr	r1, [sp, #20]
    9a48:	e58de00c 	str	lr, [sp, #12]
    9a4c:	e58dc000 	str	ip, [sp]
    9a50:	eb002367 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    9a54:	e1e00000 	mvn	r0, r0
    9a58:	e1a00fa0 	lsr	r0, r0, #31
    9a5c:	e28dd024 	add	sp, sp, #36	; 0x24
    9a60:	e8bd8030 	pop	{r4, r5, pc}

00009a64 <CUSBKeyboardDevice::Configure()>:
    9a64:	e92d4030 	push	{r4, r5, lr}
    9a68:	e3a01000 	mov	r1, #0
    9a6c:	e24dd00c 	sub	sp, sp, #12
    9a70:	e1a04000 	mov	r4, r0
    9a74:	eb0021a9 	bl	12120 <CUSBHIDDevice::Configure(unsigned int)>
    9a78:	e2505000 	subs	r5, r0, #0
    9a7c:	0a000012 	beq	9acc <CUSBKeyboardDevice::Configure()+0x68>
    9a80:	e5d41448 	ldrb	r1, [r4, #1096]	; 0x448
    9a84:	e1a00004 	mov	r0, r4
    9a88:	ebffffd8 	bl	99f0 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
    9a8c:	e59f2058 	ldr	r2, [pc, #88]	; 9aec <CUSBKeyboardDevice::Configure()+0x88>
    9a90:	e5923000 	ldr	r3, [r2]
    9a94:	e584344c 	str	r3, [r4, #1100]	; 0x44c
    9a98:	e2833001 	add	r3, r3, #1
    9a9c:	e5823000 	str	r3, [r2]
    9aa0:	eb006de5 	bl	2523c <CDeviceNameService::Get()>
    9aa4:	e3a02000 	mov	r2, #0
    9aa8:	e58d2000 	str	r2, [sp]
    9aac:	e1a03004 	mov	r3, r4
    9ab0:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
    9ab4:	e59f1034 	ldr	r1, [pc, #52]	; 9af0 <CUSBKeyboardDevice::Configure()+0x8c>
    9ab8:	eb006deb 	bl	2526c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    9abc:	e1a00004 	mov	r0, r4
    9ac0:	e28dd00c 	add	sp, sp, #12
    9ac4:	e8bd4030 	pop	{r4, r5, lr}
    9ac8:	ea0022b7 	b	125ac <CUSBHIDDevice::StartRequest()>
    9acc:	eb007400 	bl	26ad4 <CLogger::Get()>
    9ad0:	e3a02001 	mov	r2, #1
    9ad4:	e59f3018 	ldr	r3, [pc, #24]	; 9af4 <CUSBKeyboardDevice::Configure()+0x90>
    9ad8:	e59f1018 	ldr	r1, [pc, #24]	; 9af8 <CUSBKeyboardDevice::Configure()+0x94>
    9adc:	eb00733e 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9ae0:	e1a00005 	mov	r0, r5
    9ae4:	e28dd00c 	add	sp, sp, #12
    9ae8:	e8bd8030 	pop	{r4, r5, pc}
    9aec:	000461d8 	.word	0x000461d8
    9af0:	0003d4f8 	.word	0x0003d4f8
    9af4:	0003d494 	.word	0x0003d494
    9af8:	0003d500 	.word	0x0003d500

00009afc <CUSBKeyboardDevice::UpdateLEDs()>:
    9afc:	e590343c 	ldr	r3, [r0, #1084]	; 0x43c
    9b00:	e3530000 	cmp	r3, #0
    9b04:	112fff1e 	bxne	lr
    9b08:	e92d4010 	push	{r4, lr}
    9b0c:	e1a04000 	mov	r4, r0
    9b10:	ebffffa1 	bl	999c <CUSBKeyboardDevice::GetLEDStatus() const>
    9b14:	e5d43448 	ldrb	r3, [r4, #1096]	; 0x448
    9b18:	e1530000 	cmp	r3, r0
    9b1c:	08bd8010 	popeq	{r4, pc}
    9b20:	e1a01000 	mov	r1, r0
    9b24:	e5c40448 	strb	r0, [r4, #1096]	; 0x448
    9b28:	e1a00004 	mov	r0, r4
    9b2c:	ebffffaf 	bl	99f0 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
    9b30:	e3500000 	cmp	r0, #0
    9b34:	18bd8010 	popne	{r4, pc}
    9b38:	eb0073e5 	bl	26ad4 <CLogger::Get()>
    9b3c:	e8bd4010 	pop	{r4, lr}
    9b40:	e3a02001 	mov	r2, #1
    9b44:	e59f3004 	ldr	r3, [pc, #4]	; 9b50 <CUSBKeyboardDevice::UpdateLEDs()+0x54>
    9b48:	e59f1004 	ldr	r1, [pc, #4]	; 9b54 <CUSBKeyboardDevice::UpdateLEDs()+0x58>
    9b4c:	ea007322 	b	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9b50:	0003d4b0 	.word	0x0003d4b0
    9b54:	0003d500 	.word	0x0003d500

00009b58 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
    9b58:	e0802002 	add	r2, r0, r2
    9b5c:	ea000002 	b	9b6c <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
    9b60:	e4d03001 	ldrb	r3, [r0], #1
    9b64:	e1530001 	cmp	r3, r1
    9b68:	0a000003 	beq	9b7c <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
    9b6c:	e1500002 	cmp	r0, r2
    9b70:	1afffffa 	bne	9b60 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
    9b74:	e3a00000 	mov	r0, #0
    9b78:	e12fff1e 	bx	lr
    9b7c:	e3a00001 	mov	r0, #1
    9b80:	e12fff1e 	bx	lr

00009b84 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    9b84:	e3520000 	cmp	r2, #0
    9b88:	e92d4010 	push	{r4, lr}
    9b8c:	0a000005 	beq	9ba8 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x24>
    9b90:	e351000f 	cmp	r1, #15
    9b94:	8a000007 	bhi	9bb8 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x34>
    9b98:	e3a03000 	mov	r3, #0
    9b9c:	e0821001 	add	r1, r2, r1
    9ba0:	e5c1305c 	strb	r3, [r1, #92]	; 0x5c
    9ba4:	e8bd8010 	pop	{r4, pc}
    9ba8:	e59f2018 	ldr	r2, [pc, #24]	; 9bc8 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x44>
    9bac:	e59f1018 	ldr	r1, [pc, #24]	; 9bcc <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x48>
    9bb0:	e59f0018 	ldr	r0, [pc, #24]	; 9bd0 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x4c>
    9bb4:	eb006ade 	bl	24734 <assertion_failed>
    9bb8:	e59f2014 	ldr	r2, [pc, #20]	; 9bd4 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x50>
    9bbc:	e59f1008 	ldr	r1, [pc, #8]	; 9bcc <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x48>
    9bc0:	e59f0010 	ldr	r0, [pc, #16]	; 9bd8 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x54>
    9bc4:	eb006ada 	bl	24734 <assertion_failed>
    9bc8:	000002ab 	.word	0x000002ab
    9bcc:	0003d508 	.word	0x0003d508
    9bd0:	0003d518 	.word	0x0003d518
    9bd4:	000002ae 	.word	0x000002ae
    9bd8:	0003d524 	.word	0x0003d524

00009bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>:
    9bdc:	e92d4030 	push	{r4, r5, lr}
    9be0:	e24dd01c 	sub	sp, sp, #28
    9be4:	e1a05000 	mov	r5, r0
    9be8:	e28d000c 	add	r0, sp, #12
    9bec:	eb000c34 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9bf0:	e3a03000 	mov	r3, #0
    9bf4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9bf8:	eb0073b5 	bl	26ad4 <CLogger::Get()>
    9bfc:	e1a04000 	mov	r4, r0
    9c00:	e28d000c 	add	r0, sp, #12
    9c04:	eb000c37 	bl	cce8 <CDWHCIRegister::Read()>
    9c08:	e3a02004 	mov	r2, #4
    9c0c:	e88d0021 	stm	sp, {r0, r5}
    9c10:	e59f3018 	ldr	r3, [pc, #24]	; 9c30 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]+0x54>
    9c14:	e1a00004 	mov	r0, r4
    9c18:	e59f1014 	ldr	r1, [pc, #20]	; 9c34 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]+0x58>
    9c1c:	eb0072ee 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9c20:	e28d000c 	add	r0, sp, #12
    9c24:	eb000c2e 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    9c28:	e28dd01c 	add	sp, sp, #28
    9c2c:	e8bd8030 	pop	{r4, r5, pc}
    9c30:	0003d544 	.word	0x0003d544
    9c34:	0003da84 	.word	0x0003da84

00009c38 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>:
    9c38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9c3c:	e1a04000 	mov	r4, r0
    9c40:	e3a05000 	mov	r5, #0
    9c44:	e1a07001 	mov	r7, r1
    9c48:	e1a06002 	mov	r6, r2
    9c4c:	eb0022dd 	bl	127c8 <CUSBHostController::CUSBHostController()>
    9c50:	e3a03001 	mov	r3, #1
    9c54:	e59f20a8 	ldr	r2, [pc, #168]	; 9d04 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xcc>
    9c58:	e5845010 	str	r5, [r4, #16]
    9c5c:	e5843014 	str	r3, [r4, #20]
    9c60:	e5843058 	str	r3, [r4, #88]	; 0x58
    9c64:	e1a01004 	mov	r1, r4
    9c68:	e5847004 	str	r7, [r4, #4]
    9c6c:	e5846008 	str	r6, [r4, #8]
    9c70:	e5842000 	str	r2, [r4]
    9c74:	e584500c 	str	r5, [r4, #12]
    9c78:	e584506c 	str	r5, [r4, #108]	; 0x6c
    9c7c:	e5845070 	str	r5, [r4, #112]	; 0x70
    9c80:	e2840074 	add	r0, r4, #116	; 0x74
    9c84:	eb000d02 	bl	d094 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    9c88:	e5943004 	ldr	r3, [r4, #4]
    9c8c:	e5c45080 	strb	r5, [r4, #128]	; 0x80
    9c90:	e1530005 	cmp	r3, r5
    9c94:	e5c45081 	strb	r5, [r4, #129]	; 0x81
    9c98:	0a000011 	beq	9ce4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xac>
    9c9c:	e5943008 	ldr	r3, [r4, #8]
    9ca0:	e3530000 	cmp	r3, #0
    9ca4:	11a02005 	movne	r2, r5
    9ca8:	12843014 	addne	r3, r4, #20
    9cac:	12841054 	addne	r1, r4, #84	; 0x54
    9cb0:	0a00000f 	beq	9cf4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xbc>
    9cb4:	e5a32004 	str	r2, [r3, #4]!
    9cb8:	e1530001 	cmp	r3, r1
    9cbc:	1afffffc 	bne	9cb4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x7c>
    9cc0:	e3a03000 	mov	r3, #0
    9cc4:	e1a01003 	mov	r1, r3
    9cc8:	e0842003 	add	r2, r4, r3
    9ccc:	e2833001 	add	r3, r3, #1
    9cd0:	e3530010 	cmp	r3, #16
    9cd4:	e5c2105c 	strb	r1, [r2, #92]	; 0x5c
    9cd8:	1afffffa 	bne	9cc8 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x90>
    9cdc:	e1a00004 	mov	r0, r4
    9ce0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9ce4:	e3a0204b 	mov	r2, #75	; 0x4b
    9ce8:	e59f1018 	ldr	r1, [pc, #24]	; 9d08 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    9cec:	e59f0018 	ldr	r0, [pc, #24]	; 9d0c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd4>
    9cf0:	eb006a8f 	bl	24734 <assertion_failed>
    9cf4:	e3a0204c 	mov	r2, #76	; 0x4c
    9cf8:	e59f1008 	ldr	r1, [pc, #8]	; 9d08 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    9cfc:	e59f000c 	ldr	r0, [pc, #12]	; 9d10 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd8>
    9d00:	eb006a8b 	bl	24734 <assertion_failed>
    9d04:	0003da94 	.word	0x0003da94
    9d08:	0003d508 	.word	0x0003d508
    9d0c:	0003d550 	.word	0x0003d550
    9d10:	0003d568 	.word	0x0003d568

00009d14 <CDWHCIDevice::GetPortSpeed()>:
    9d14:	e92d4010 	push	{r4, lr}
    9d18:	e24dd010 	sub	sp, sp, #16
    9d1c:	e59f1038 	ldr	r1, [pc, #56]	; 9d5c <CDWHCIDevice::GetPortSpeed()+0x48>
    9d20:	e28d0004 	add	r0, sp, #4
    9d24:	eb000be6 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9d28:	e28d0004 	add	r0, sp, #4
    9d2c:	eb000bed 	bl	cce8 <CDWHCIRegister::Read()>
    9d30:	e1a008a0 	lsr	r0, r0, #17
    9d34:	e2000003 	and	r0, r0, #3
    9d38:	e3500003 	cmp	r0, #3
    9d3c:	03a04004 	moveq	r4, #4
    9d40:	12600002 	rsbne	r0, r0, #2
    9d44:	16ef4070 	uxtbne	r4, r0
    9d48:	e28d0004 	add	r0, sp, #4
    9d4c:	eb000be4 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    9d50:	e1a00004 	mov	r0, r4
    9d54:	e28dd010 	add	sp, sp, #16
    9d58:	e8bd8010 	pop	{r4, pc}
    9d5c:	20980440 	.word	0x20980440

00009d60 <CDWHCIDevice::OvercurrentDetected()>:
    9d60:	e92d4010 	push	{r4, lr}
    9d64:	e24dd010 	sub	sp, sp, #16
    9d68:	e59f1028 	ldr	r1, [pc, #40]	; 9d98 <CDWHCIDevice::OvercurrentDetected()+0x38>
    9d6c:	e28d0004 	add	r0, sp, #4
    9d70:	eb000bd3 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9d74:	e28d0004 	add	r0, sp, #4
    9d78:	eb000bda 	bl	cce8 <CDWHCIRegister::Read()>
    9d7c:	e1a04000 	mov	r4, r0
    9d80:	e28d0004 	add	r0, sp, #4
    9d84:	eb000bd6 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    9d88:	e1a00224 	lsr	r0, r4, #4
    9d8c:	e2000001 	and	r0, r0, #1
    9d90:	e28dd010 	add	sp, sp, #16
    9d94:	e8bd8010 	pop	{r4, pc}
    9d98:	20980440 	.word	0x20980440

00009d9c <CDWHCIDevice::DisableRootPort(bool)>:
    9d9c:	e3a03000 	mov	r3, #0
    9da0:	e92d4010 	push	{r4, lr}
    9da4:	e1a04001 	mov	r4, r1
    9da8:	e24dd010 	sub	sp, sp, #16
    9dac:	e5c03080 	strb	r3, [r0, #128]	; 0x80
    9db0:	e59f1048 	ldr	r1, [pc, #72]	; 9e00 <CDWHCIDevice::DisableRootPort(bool)+0x64>
    9db4:	e28d0004 	add	r0, sp, #4
    9db8:	eb000bc1 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9dbc:	e28d0004 	add	r0, sp, #4
    9dc0:	eb000bc8 	bl	cce8 <CDWHCIRegister::Read()>
    9dc4:	e3e01004 	mvn	r1, #4
    9dc8:	e28d0004 	add	r0, sp, #4
    9dcc:	eb000bf9 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    9dd0:	e3540000 	cmp	r4, #0
    9dd4:	1a000005 	bne	9df0 <CDWHCIDevice::DisableRootPort(bool)+0x54>
    9dd8:	e28d0004 	add	r0, sp, #4
    9ddc:	eb000bc8 	bl	cd04 <CDWHCIRegister::Write()>
    9de0:	e28d0004 	add	r0, sp, #4
    9de4:	eb000bbe 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    9de8:	e28dd010 	add	sp, sp, #16
    9dec:	e8bd8010 	pop	{r4, pc}
    9df0:	e3e01a01 	mvn	r1, #4096	; 0x1000
    9df4:	e28d0004 	add	r0, sp, #4
    9df8:	eb000bee 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    9dfc:	eafffff5 	b	9dd8 <CDWHCIDevice::DisableRootPort(bool)+0x3c>
    9e00:	20980440 	.word	0x20980440

00009e04 <CDWHCIDevice::PowerOn()>:
    9e04:	e3a01000 	mov	r1, #0
    9e08:	e92d4030 	push	{r4, r5, lr}
    9e0c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    9e10:	e28d000c 	add	r0, sp, #12
    9e14:	e1a05001 	mov	r5, r1
    9e18:	eb006a66 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    9e1c:	e3a03014 	mov	r3, #20
    9e20:	e3a0c003 	mov	ip, #3
    9e24:	e59f1040 	ldr	r1, [pc, #64]	; 9e6c <CDWHCIDevice::PowerOn()+0x68>
    9e28:	e28d000c 	add	r0, sp, #12
    9e2c:	e58d5000 	str	r5, [sp]
    9e30:	e08d2003 	add	r2, sp, r3
    9e34:	e58dc020 	str	ip, [sp, #32]
    9e38:	e58dc024 	str	ip, [sp, #36]	; 0x24
    9e3c:	eb006a69 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9e40:	e2504000 	subs	r4, r0, #0
    9e44:	0a000003 	beq	9e58 <CDWHCIDevice::PowerOn()+0x54>
    9e48:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
    9e4c:	e3100002 	tst	r0, #2
    9e50:	11a04005 	movne	r4, r5
    9e54:	02004001 	andeq	r4, r0, #1
    9e58:	e28d000c 	add	r0, sp, #12
    9e5c:	eb006a5c 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
    9e60:	e1a00004 	mov	r0, r4
    9e64:	e28dd02c 	add	sp, sp, #44	; 0x2c
    9e68:	e8bd8030 	pop	{r4, r5, pc}
    9e6c:	00028001 	.word	0x00028001

00009e70 <CDWHCIDevice::EnableGlobalInterrupts()>:
    9e70:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9e74:	e24dd014 	sub	sp, sp, #20
    9e78:	e59f1030 	ldr	r1, [pc, #48]	; 9eb0 <CDWHCIDevice::EnableGlobalInterrupts()+0x40>
    9e7c:	e28d0004 	add	r0, sp, #4
    9e80:	eb000b8f 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9e84:	e28d0004 	add	r0, sp, #4
    9e88:	eb000b96 	bl	cce8 <CDWHCIRegister::Read()>
    9e8c:	e3a01001 	mov	r1, #1
    9e90:	e28d0004 	add	r0, sp, #4
    9e94:	eb000bd5 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    9e98:	e28d0004 	add	r0, sp, #4
    9e9c:	eb000b98 	bl	cd04 <CDWHCIRegister::Write()>
    9ea0:	e28d0004 	add	r0, sp, #4
    9ea4:	eb000b8e 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    9ea8:	e28dd014 	add	sp, sp, #20
    9eac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9eb0:	20980008 	.word	0x20980008

00009eb4 <CDWHCIDevice::EnableCommonInterrupts()>:
    9eb4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9eb8:	e24dd014 	sub	sp, sp, #20
    9ebc:	e59f1024 	ldr	r1, [pc, #36]	; 9ee8 <CDWHCIDevice::EnableCommonInterrupts()+0x34>
    9ec0:	e28d0004 	add	r0, sp, #4
    9ec4:	eb000b7e 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9ec8:	e28d0004 	add	r0, sp, #4
    9ecc:	eb000c06 	bl	ceec <CDWHCIRegister::SetAll()>
    9ed0:	e28d0004 	add	r0, sp, #4
    9ed4:	eb000b8a 	bl	cd04 <CDWHCIRegister::Write()>
    9ed8:	e28d0004 	add	r0, sp, #4
    9edc:	eb000b80 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    9ee0:	e28dd014 	add	sp, sp, #20
    9ee4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9ee8:	20980014 	.word	0x20980014

00009eec <CDWHCIDevice::EnableHostInterrupts()>:
    9eec:	e92d4010 	push	{r4, lr}
    9ef0:	e1a04000 	mov	r4, r0
    9ef4:	e24dd010 	sub	sp, sp, #16
    9ef8:	e3a02000 	mov	r2, #0
    9efc:	e59f1040 	ldr	r1, [pc, #64]	; 9f44 <CDWHCIDevice::EnableHostInterrupts()+0x58>
    9f00:	e28d0004 	add	r0, sp, #4
    9f04:	eb000b72 	bl	ccd4 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9f08:	e28d0004 	add	r0, sp, #4
    9f0c:	eb000b7c 	bl	cd04 <CDWHCIRegister::Write()>
    9f10:	e1a00004 	mov	r0, r4
    9f14:	ebffffe6 	bl	9eb4 <CDWHCIDevice::EnableCommonInterrupts()>
    9f18:	e28d0004 	add	r0, sp, #4
    9f1c:	eb000b71 	bl	cce8 <CDWHCIRegister::Read()>
    9f20:	e3a01402 	mov	r1, #33554432	; 0x2000000
    9f24:	e28d0004 	add	r0, sp, #4
    9f28:	eb000bb0 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    9f2c:	e28d0004 	add	r0, sp, #4
    9f30:	eb000b73 	bl	cd04 <CDWHCIRegister::Write()>
    9f34:	e28d0004 	add	r0, sp, #4
    9f38:	eb000b69 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    9f3c:	e28dd010 	add	sp, sp, #16
    9f40:	e8bd8010 	pop	{r4, pc}
    9f44:	20980018 	.word	0x20980018

00009f48 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    9f48:	e92d4030 	push	{r4, r5, lr}
    9f4c:	e1a04000 	mov	r4, r0
    9f50:	e24dd014 	sub	sp, sp, #20
    9f54:	e1a05001 	mov	r5, r1
    9f58:	e28d0004 	add	r0, sp, #4
    9f5c:	e59f1064 	ldr	r1, [pc, #100]	; 9fc8 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x80>
    9f60:	eb000b57 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9f64:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    9f68:	e3500000 	cmp	r0, #0
    9f6c:	1a00000e 	bne	9fac <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x64>
    9f70:	e28d0004 	add	r0, sp, #4
    9f74:	eb000b5b 	bl	cce8 <CDWHCIRegister::Read()>
    9f78:	e3a01001 	mov	r1, #1
    9f7c:	e28d0004 	add	r0, sp, #4
    9f80:	e1a01511 	lsl	r1, r1, r5
    9f84:	eb000b99 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    9f88:	e28d0004 	add	r0, sp, #4
    9f8c:	eb000b5c 	bl	cd04 <CDWHCIRegister::Write()>
    9f90:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    9f94:	e3530000 	cmp	r3, #0
    9f98:	1a000005 	bne	9fb4 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x6c>
    9f9c:	e28d0004 	add	r0, sp, #4
    9fa0:	eb000b4f 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    9fa4:	e28dd014 	add	sp, sp, #20
    9fa8:	e8bd8030 	pop	{r4, r5, pc}
    9fac:	eb008714 	bl	2bc04 <EnterCritical>
    9fb0:	eaffffee 	b	9f70 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x28>
    9fb4:	eb00873c 	bl	2bcac <LeaveCritical>
    9fb8:	e28d0004 	add	r0, sp, #4
    9fbc:	eb000b48 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    9fc0:	e28dd014 	add	sp, sp, #20
    9fc4:	e8bd8030 	pop	{r4, r5, pc}
    9fc8:	20980418 	.word	0x20980418

00009fcc <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    9fcc:	e92d4030 	push	{r4, r5, lr}
    9fd0:	e1a04000 	mov	r4, r0
    9fd4:	e24dd014 	sub	sp, sp, #20
    9fd8:	e1a05001 	mov	r5, r1
    9fdc:	e28d0004 	add	r0, sp, #4
    9fe0:	e59f1064 	ldr	r1, [pc, #100]	; a04c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x80>
    9fe4:	eb000b36 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9fe8:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    9fec:	e3500000 	cmp	r0, #0
    9ff0:	1a00000e 	bne	a030 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x64>
    9ff4:	e28d0004 	add	r0, sp, #4
    9ff8:	eb000b3a 	bl	cce8 <CDWHCIRegister::Read()>
    9ffc:	e3a01001 	mov	r1, #1
    a000:	e28d0004 	add	r0, sp, #4
    a004:	e1e01511 	mvn	r1, r1, lsl r5
    a008:	eb000b6a 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    a00c:	e28d0004 	add	r0, sp, #4
    a010:	eb000b3b 	bl	cd04 <CDWHCIRegister::Write()>
    a014:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a018:	e3530000 	cmp	r3, #0
    a01c:	1a000005 	bne	a038 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x6c>
    a020:	e28d0004 	add	r0, sp, #4
    a024:	eb000b2e 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    a028:	e28dd014 	add	sp, sp, #20
    a02c:	e8bd8030 	pop	{r4, r5, pc}
    a030:	eb0086f3 	bl	2bc04 <EnterCritical>
    a034:	eaffffee 	b	9ff4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x28>
    a038:	eb00871b 	bl	2bcac <LeaveCritical>
    a03c:	e28d0004 	add	r0, sp, #4
    a040:	eb000b27 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    a044:	e28dd014 	add	sp, sp, #20
    a048:	e8bd8030 	pop	{r4, r5, pc}
    a04c:	20980418 	.word	0x20980418

0000a050 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    a050:	e92d4070 	push	{r4, r5, r6, lr}
    a054:	e2514000 	subs	r4, r1, #0
    a058:	e24dd048 	sub	sp, sp, #72	; 0x48
    a05c:	0a0000e4 	beq	a3f4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3a4>
    a060:	e1a06000 	mov	r6, r0
    a064:	e1a00004 	mov	r0, r4
    a068:	eb000d08 	bl	d490 <CDWHCITransferStageData::GetChannelNumber() const>
    a06c:	e596300c 	ldr	r3, [r6, #12]
    a070:	e1a05000 	mov	r5, r0
    a074:	e1530000 	cmp	r3, r0
    a078:	9a0000e1 	bls	a404 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b4>
    a07c:	e3a01001 	mov	r1, #1
    a080:	e1a00004 	mov	r0, r4
    a084:	eb000cfb 	bl	d478 <CDWHCITransferStageData::SetSubState(unsigned int)>
    a088:	e59f1384 	ldr	r1, [pc, #900]	; a414 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c4>
    a08c:	e1a0000d 	mov	r0, sp
    a090:	e0811285 	add	r1, r1, r5, lsl #5
    a094:	eb000b0a 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a098:	e1a0000d 	mov	r0, sp
    a09c:	eb000b92 	bl	ceec <CDWHCIRegister::SetAll()>
    a0a0:	e1a0000d 	mov	r0, sp
    a0a4:	eb000b16 	bl	cd04 <CDWHCIRegister::Write()>
    a0a8:	e59f1368 	ldr	r1, [pc, #872]	; a418 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c8>
    a0ac:	e1a05285 	lsl	r5, r5, #5
    a0b0:	e3a02000 	mov	r2, #0
    a0b4:	e0851001 	add	r1, r5, r1
    a0b8:	e28d000c 	add	r0, sp, #12
    a0bc:	eb000b04 	bl	ccd4 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a0c0:	e1a00004 	mov	r0, r4
    a0c4:	eb000e2a 	bl	d974 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a0c8:	e3c014ff 	bic	r1, r0, #-16777216	; 0xff000000
    a0cc:	e3c1173e 	bic	r1, r1, #16252928	; 0xf80000
    a0d0:	e28d000c 	add	r0, sp, #12
    a0d4:	eb000b45 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a0d8:	e1a00004 	mov	r0, r4
    a0dc:	eb000e26 	bl	d97c <CDWHCITransferStageData::GetPacketsToTransfer() const>
    a0e0:	e1a01000 	mov	r1, r0
    a0e4:	e59f3330 	ldr	r3, [pc, #816]	; a41c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3cc>
    a0e8:	e28d000c 	add	r0, sp, #12
    a0ec:	e0031981 	and	r1, r3, r1, lsl #19
    a0f0:	eb000b3e 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a0f4:	e1a00004 	mov	r0, r4
    a0f8:	eb000df3 	bl	d8cc <CDWHCITransferStageData::GetPID() const>
    a0fc:	e1a01000 	mov	r1, r0
    a100:	e28d000c 	add	r0, sp, #12
    a104:	e1a01e81 	lsl	r1, r1, #29
    a108:	eb000b38 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a10c:	e28d000c 	add	r0, sp, #12
    a110:	eb000afb 	bl	cd04 <CDWHCIRegister::Write()>
    a114:	e1a00004 	mov	r0, r4
    a118:	eb000e0a 	bl	d948 <CDWHCITransferStageData::GetDMAAddress() const>
    a11c:	e59f12fc 	ldr	r1, [pc, #764]	; a420 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d0>
    a120:	e3c00103 	bic	r0, r0, #-1073741824	; 0xc0000000
    a124:	e3802101 	orr	r2, r0, #1073741824	; 0x40000000
    a128:	e0851001 	add	r1, r5, r1
    a12c:	e28d0018 	add	r0, sp, #24
    a130:	eb000ae7 	bl	ccd4 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a134:	e28d0018 	add	r0, sp, #24
    a138:	eb000af1 	bl	cd04 <CDWHCIRegister::Write()>
    a13c:	e1a00004 	mov	r0, r4
    a140:	eb000e00 	bl	d948 <CDWHCITransferStageData::GetDMAAddress() const>
    a144:	e1a06000 	mov	r6, r0
    a148:	e1a00004 	mov	r0, r4
    a14c:	eb000e08 	bl	d974 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a150:	e1a01000 	mov	r1, r0
    a154:	e1a00006 	mov	r0, r6
    a158:	eb0086e9 	bl	2bd04 <CleanAndInvalidateDataCacheRange>
    a15c:	e59f12c0 	ldr	r1, [pc, #704]	; a424 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d4>
    a160:	e3a02000 	mov	r2, #0
    a164:	e0851001 	add	r1, r5, r1
    a168:	e28d0024 	add	r0, sp, #36	; 0x24
    a16c:	eb000ad8 	bl	ccd4 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a170:	e1a00004 	mov	r0, r4
    a174:	eb000e02 	bl	d984 <CDWHCITransferStageData::IsSplit() const>
    a178:	e3500000 	cmp	r0, #0
    a17c:	1a00007f 	bne	a380 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x330>
    a180:	e28d0024 	add	r0, sp, #36	; 0x24
    a184:	eb000ade 	bl	cd04 <CDWHCIRegister::Write()>
    a188:	e59f1298 	ldr	r1, [pc, #664]	; a428 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d8>
    a18c:	e28d0030 	add	r0, sp, #48	; 0x30
    a190:	e0851001 	add	r1, r5, r1
    a194:	eb000aca 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a198:	e28d0030 	add	r0, sp, #48	; 0x30
    a19c:	eb000ad1 	bl	cce8 <CDWHCIRegister::Read()>
    a1a0:	e59f1284 	ldr	r1, [pc, #644]	; a42c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3dc>
    a1a4:	e28d0030 	add	r0, sp, #48	; 0x30
    a1a8:	eb000b02 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    a1ac:	e1a00004 	mov	r0, r4
    a1b0:	eb000dc1 	bl	d8bc <CDWHCITransferStageData::GetMaxPacketSize() const>
    a1b4:	e1a01a80 	lsl	r1, r0, #21
    a1b8:	e1a01aa1 	lsr	r1, r1, #21
    a1bc:	e28d0030 	add	r0, sp, #48	; 0x30
    a1c0:	eb000b0a 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a1c4:	e3e01603 	mvn	r1, #3145728	; 0x300000
    a1c8:	e28d0030 	add	r0, sp, #48	; 0x30
    a1cc:	eb000af9 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    a1d0:	e3a01601 	mov	r1, #1048576	; 0x100000
    a1d4:	e28d0030 	add	r0, sp, #48	; 0x30
    a1d8:	eb000b04 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a1dc:	e1a00004 	mov	r0, r4
    a1e0:	eb000dd4 	bl	d938 <CDWHCITransferStageData::IsDirectionIn() const>
    a1e4:	e3500000 	cmp	r0, #0
    a1e8:	1a000055 	bne	a344 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2f4>
    a1ec:	e3e01902 	mvn	r1, #32768	; 0x8000
    a1f0:	e28d0030 	add	r0, sp, #48	; 0x30
    a1f4:	eb000aef 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    a1f8:	e1a00004 	mov	r0, r4
    a1fc:	eb000db0 	bl	d8c4 <CDWHCITransferStageData::GetSpeed() const>
    a200:	e3500000 	cmp	r0, #0
    a204:	1a000055 	bne	a360 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x310>
    a208:	e3a01802 	mov	r1, #131072	; 0x20000
    a20c:	e28d0030 	add	r0, sp, #48	; 0x30
    a210:	eb000af6 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a214:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
    a218:	e28d0030 	add	r0, sp, #48	; 0x30
    a21c:	eb000ae5 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    a220:	e1a00004 	mov	r0, r4
    a224:	eb000d74 	bl	d7fc <CDWHCITransferStageData::GetDeviceAddress() const>
    a228:	e1a01000 	mov	r1, r0
    a22c:	e28d0030 	add	r0, sp, #48	; 0x30
    a230:	e1a01b01 	lsl	r1, r1, #22
    a234:	eb000aed 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a238:	e3e01703 	mvn	r1, #786432	; 0xc0000
    a23c:	e28d0030 	add	r0, sp, #48	; 0x30
    a240:	eb000adc 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    a244:	e1a00004 	mov	r0, r4
    a248:	eb000d77 	bl	d82c <CDWHCITransferStageData::GetEndpointType() const>
    a24c:	e1a01000 	mov	r1, r0
    a250:	e28d0030 	add	r0, sp, #48	; 0x30
    a254:	e1a01901 	lsl	r1, r1, #18
    a258:	eb000ae4 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a25c:	e3e01b1e 	mvn	r1, #30720	; 0x7800
    a260:	e28d0030 	add	r0, sp, #48	; 0x30
    a264:	eb000ad3 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    a268:	e1a00004 	mov	r0, r4
    a26c:	eb000d86 	bl	d88c <CDWHCITransferStageData::GetEndpointNumber() const>
    a270:	e1a01000 	mov	r1, r0
    a274:	e28d0030 	add	r0, sp, #48	; 0x30
    a278:	e1a01581 	lsl	r1, r1, #11
    a27c:	eb000adb 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a280:	e1a00004 	mov	r0, r4
    a284:	eb000e34 	bl	db5c <CDWHCITransferStageData::GetFrameScheduler() const>
    a288:	e2506000 	subs	r6, r0, #0
    a28c:	0a00000b 	beq	a2c0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x270>
    a290:	e5963000 	ldr	r3, [r6]
    a294:	e5933014 	ldr	r3, [r3, #20]
    a298:	e12fff33 	blx	r3
    a29c:	e5963000 	ldr	r3, [r6]
    a2a0:	e1a00006 	mov	r0, r6
    a2a4:	e5933018 	ldr	r3, [r3, #24]
    a2a8:	e12fff33 	blx	r3
    a2ac:	e3500000 	cmp	r0, #0
    a2b0:	0a00002e 	beq	a370 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x320>
    a2b4:	e3a01202 	mov	r1, #536870912	; 0x20000000
    a2b8:	e28d0030 	add	r0, sp, #48	; 0x30
    a2bc:	eb000acb 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a2c0:	e59f1168 	ldr	r1, [pc, #360]	; a430 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3e0>
    a2c4:	e28d003c 	add	r0, sp, #60	; 0x3c
    a2c8:	e0851001 	add	r1, r5, r1
    a2cc:	eb000a7c 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a2d0:	e1a00004 	mov	r0, r4
    a2d4:	eb000de5 	bl	da70 <CDWHCITransferStageData::GetStatusMask() const>
    a2d8:	e1a01000 	mov	r1, r0
    a2dc:	e28d003c 	add	r0, sp, #60	; 0x3c
    a2e0:	eb000aa1 	bl	cd6c <CDWHCIRegister::Set(unsigned int)>
    a2e4:	e28d003c 	add	r0, sp, #60	; 0x3c
    a2e8:	eb000a85 	bl	cd04 <CDWHCIRegister::Write()>
    a2ec:	e28d0030 	add	r0, sp, #48	; 0x30
    a2f0:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a2f4:	eb000abd 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a2f8:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
    a2fc:	e28d0030 	add	r0, sp, #48	; 0x30
    a300:	eb000aac 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    a304:	e28d0030 	add	r0, sp, #48	; 0x30
    a308:	eb000a7d 	bl	cd04 <CDWHCIRegister::Write()>
    a30c:	e28d003c 	add	r0, sp, #60	; 0x3c
    a310:	eb000a73 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    a314:	e28d0030 	add	r0, sp, #48	; 0x30
    a318:	eb000a71 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    a31c:	e28d0024 	add	r0, sp, #36	; 0x24
    a320:	eb000a6f 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    a324:	e28d0018 	add	r0, sp, #24
    a328:	eb000a6d 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    a32c:	e28d000c 	add	r0, sp, #12
    a330:	eb000a6b 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    a334:	e1a0000d 	mov	r0, sp
    a338:	eb000a69 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    a33c:	e28dd048 	add	sp, sp, #72	; 0x48
    a340:	e8bd8070 	pop	{r4, r5, r6, pc}
    a344:	e3a01902 	mov	r1, #32768	; 0x8000
    a348:	e28d0030 	add	r0, sp, #48	; 0x30
    a34c:	eb000aa7 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a350:	e1a00004 	mov	r0, r4
    a354:	eb000d5a 	bl	d8c4 <CDWHCITransferStageData::GetSpeed() const>
    a358:	e3500000 	cmp	r0, #0
    a35c:	0affffa9 	beq	a208 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1b8>
    a360:	e3e01802 	mvn	r1, #131072	; 0x20000
    a364:	e28d0030 	add	r0, sp, #48	; 0x30
    a368:	eb000a92 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    a36c:	eaffffa8 	b	a214 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1c4>
    a370:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    a374:	e28d0030 	add	r0, sp, #48	; 0x30
    a378:	eb000a8e 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    a37c:	eaffffcf 	b	a2c0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x270>
    a380:	e1a00004 	mov	r0, r4
    a384:	eb000da2 	bl	da14 <CDWHCITransferStageData::GetHubPortAddress() const>
    a388:	e1a01000 	mov	r1, r0
    a38c:	e28d0024 	add	r0, sp, #36	; 0x24
    a390:	eb000a96 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a394:	e1a00004 	mov	r0, r4
    a398:	eb000d88 	bl	d9c0 <CDWHCITransferStageData::GetHubAddress() const>
    a39c:	e1a01000 	mov	r1, r0
    a3a0:	e28d0024 	add	r0, sp, #36	; 0x24
    a3a4:	e1a01381 	lsl	r1, r1, #7
    a3a8:	eb000a90 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a3ac:	e1a00004 	mov	r0, r4
    a3b0:	eb000dac 	bl	da68 <CDWHCITransferStageData::GetSplitPosition() const>
    a3b4:	e1a01000 	mov	r1, r0
    a3b8:	e28d0024 	add	r0, sp, #36	; 0x24
    a3bc:	e1a01701 	lsl	r1, r1, #14
    a3c0:	eb000a8a 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a3c4:	e1a00004 	mov	r0, r4
    a3c8:	eb000d6f 	bl	d98c <CDWHCITransferStageData::IsSplitComplete() const>
    a3cc:	e3500000 	cmp	r0, #0
    a3d0:	1a000003 	bne	a3e4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x394>
    a3d4:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a3d8:	e28d0024 	add	r0, sp, #36	; 0x24
    a3dc:	eb000a83 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a3e0:	eaffff66 	b	a180 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x130>
    a3e4:	e3a01801 	mov	r1, #65536	; 0x10000
    a3e8:	e28d0024 	add	r0, sp, #36	; 0x24
    a3ec:	eb000a7f 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a3f0:	eafffff7 	b	a3d4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x384>
    a3f4:	e59f2038 	ldr	r2, [pc, #56]	; a434 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3e4>
    a3f8:	e59f1038 	ldr	r1, [pc, #56]	; a438 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3e8>
    a3fc:	e59f0038 	ldr	r0, [pc, #56]	; a43c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3ec>
    a400:	eb0068cb 	bl	24734 <assertion_failed>
    a404:	e3a02e35 	mov	r2, #848	; 0x350
    a408:	e59f1028 	ldr	r1, [pc, #40]	; a438 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3e8>
    a40c:	e59f002c 	ldr	r0, [pc, #44]	; a440 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3f0>
    a410:	eb0068c7 	bl	24734 <assertion_failed>
    a414:	20980508 	.word	0x20980508
    a418:	20980510 	.word	0x20980510
    a41c:	1ff80000 	.word	0x1ff80000
    a420:	20980514 	.word	0x20980514
    a424:	20980504 	.word	0x20980504
    a428:	20980500 	.word	0x20980500
    a42c:	fffff800 	.word	0xfffff800
    a430:	2098050c 	.word	0x2098050c
    a434:	0000034e 	.word	0x0000034e
    a438:	0003d508 	.word	0x0003d508
    a43c:	0003d578 	.word	0x0003d578
    a440:	0003d588 	.word	0x0003d588

0000a444 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    a444:	e92d4070 	push	{r4, r5, r6, lr}
    a448:	e2514000 	subs	r4, r1, #0
    a44c:	e24dd018 	sub	sp, sp, #24
    a450:	0a000032 	beq	a520 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xdc>
    a454:	e1a06000 	mov	r6, r0
    a458:	e1a00004 	mov	r0, r4
    a45c:	eb000c0b 	bl	d490 <CDWHCITransferStageData::GetChannelNumber() const>
    a460:	e596300c 	ldr	r3, [r6, #12]
    a464:	e1530000 	cmp	r3, r0
    a468:	9a000030 	bls	a530 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xec>
    a46c:	e59f10cc 	ldr	r1, [pc, #204]	; a540 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xfc>
    a470:	e0801001 	add	r1, r0, r1
    a474:	e1a05281 	lsl	r5, r1, #5
    a478:	e1a01005 	mov	r1, r5
    a47c:	e1a0000d 	mov	r0, sp
    a480:	eb000a0f 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a484:	e1a0000d 	mov	r0, sp
    a488:	eb000a16 	bl	cce8 <CDWHCIRegister::Read()>
    a48c:	e1a0000d 	mov	r0, sp
    a490:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a494:	eb000a38 	bl	cd7c <CDWHCIRegister::IsSet(unsigned int) const>
    a498:	e3500000 	cmp	r0, #0
    a49c:	1a000006 	bne	a4bc <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x78>
    a4a0:	e1a01004 	mov	r1, r4
    a4a4:	e1a00006 	mov	r0, r6
    a4a8:	ebfffee8 	bl	a050 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    a4ac:	e1a0000d 	mov	r0, sp
    a4b0:	eb000a0b 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    a4b4:	e28dd018 	add	sp, sp, #24
    a4b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    a4bc:	e1a00004 	mov	r0, r4
    a4c0:	e3a01000 	mov	r1, #0
    a4c4:	eb000beb 	bl	d478 <CDWHCITransferStageData::SetSubState(unsigned int)>
    a4c8:	e1a0000d 	mov	r0, sp
    a4cc:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
    a4d0:	eb000a38 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    a4d4:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    a4d8:	e1a0000d 	mov	r0, sp
    a4dc:	eb000a43 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    a4e0:	e1a0000d 	mov	r0, sp
    a4e4:	eb000a06 	bl	cd04 <CDWHCIRegister::Write()>
    a4e8:	e285100c 	add	r1, r5, #12
    a4ec:	e28d000c 	add	r0, sp, #12
    a4f0:	eb0009f3 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a4f4:	e3a01002 	mov	r1, #2
    a4f8:	e28d000c 	add	r0, sp, #12
    a4fc:	eb000a1a 	bl	cd6c <CDWHCIRegister::Set(unsigned int)>
    a500:	e28d000c 	add	r0, sp, #12
    a504:	eb0009fe 	bl	cd04 <CDWHCIRegister::Write()>
    a508:	e28d000c 	add	r0, sp, #12
    a50c:	eb0009f4 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    a510:	e1a0000d 	mov	r0, sp
    a514:	eb0009f2 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    a518:	e28dd018 	add	sp, sp, #24
    a51c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a520:	e59f201c 	ldr	r2, [pc, #28]	; a544 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x100>
    a524:	e59f101c 	ldr	r1, [pc, #28]	; a548 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x104>
    a528:	e59f001c 	ldr	r0, [pc, #28]	; a54c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x108>
    a52c:	eb006880 	bl	24734 <assertion_failed>
    a530:	e59f2018 	ldr	r2, [pc, #24]	; a550 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x10c>
    a534:	e59f100c 	ldr	r1, [pc, #12]	; a548 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x104>
    a538:	e59f0014 	ldr	r0, [pc, #20]	; a554 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x110>
    a53c:	eb00687c 	bl	24734 <assertion_failed>
    a540:	0104c028 	.word	0x0104c028
    a544:	00000333 	.word	0x00000333
    a548:	0003d508 	.word	0x0003d508
    a54c:	0003d578 	.word	0x0003d578
    a550:	00000335 	.word	0x00000335
    a554:	0003d588 	.word	0x0003d588

0000a558 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>:
    a558:	e92d4070 	push	{r4, r5, r6, lr}
    a55c:	e3a05000 	mov	r5, #0
    a560:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    a564:	e1510005 	cmp	r1, r5
    a568:	0a00001d 	beq	a5e4 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x8c>
    a56c:	e1a06000 	mov	r6, r0
    a570:	e1a00001 	mov	r0, r1
    a574:	e1a04001 	mov	r4, r1
    a578:	eb000bbc 	bl	d470 <CDWHCITransferStageData::GetState() const>
    a57c:	e3500003 	cmp	r0, #3
    a580:	1a00001b 	bne	a5f4 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x9c>
    a584:	e1a00004 	mov	r0, r4
    a588:	eb000cfd 	bl	d984 <CDWHCITransferStageData::IsSplit() const>
    a58c:	e2501000 	subs	r1, r0, #0
    a590:	1a000007 	bne	a5b4 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x5c>
    a594:	e1a00004 	mov	r0, r4
    a598:	eb000bb2 	bl	d468 <CDWHCITransferStageData::SetState(unsigned int)>
    a59c:	e1a01004 	mov	r1, r4
    a5a0:	e1a00006 	mov	r0, r6
    a5a4:	ebffffa6 	bl	a444 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a5a8:	e3a03000 	mov	r3, #0
    a5ac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a5b0:	e8bd8070 	pop	{r4, r5, r6, pc}
    a5b4:	e1a00004 	mov	r0, r4
    a5b8:	e3a01001 	mov	r1, #1
    a5bc:	eb000ba9 	bl	d468 <CDWHCITransferStageData::SetState(unsigned int)>
    a5c0:	e1a01005 	mov	r1, r5
    a5c4:	e1a00004 	mov	r0, r4
    a5c8:	eb000b9a 	bl	d438 <CDWHCITransferStageData::SetSplitComplete(bool)>
    a5cc:	e1a00004 	mov	r0, r4
    a5d0:	eb000d61 	bl	db5c <CDWHCITransferStageData::GetFrameScheduler() const>
    a5d4:	e5903000 	ldr	r3, [r0]
    a5d8:	e5933008 	ldr	r3, [r3, #8]
    a5dc:	e12fff33 	blx	r3
    a5e0:	eaffffed 	b	a59c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x44>
    a5e4:	e59f2018 	ldr	r2, [pc, #24]	; a604 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xac>
    a5e8:	e59f1018 	ldr	r1, [pc, #24]	; a608 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    a5ec:	e59f0018 	ldr	r0, [pc, #24]	; a60c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb4>
    a5f0:	eb00684f 	bl	24734 <assertion_failed>
    a5f4:	e59f2014 	ldr	r2, [pc, #20]	; a610 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb8>
    a5f8:	e59f1008 	ldr	r1, [pc, #8]	; a608 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    a5fc:	e59f0010 	ldr	r0, [pc, #16]	; a614 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xbc>
    a600:	eb00684b 	bl	24734 <assertion_failed>
    a604:	0000053d 	.word	0x0000053d
    a608:	0003d508 	.word	0x0003d508
    a60c:	0003d578 	.word	0x0003d578
    a610:	0000053e 	.word	0x0000053e
    a614:	0003d5a0 	.word	0x0003d5a0

0000a618 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)>:
    a618:	e2520000 	subs	r0, r2, #0
    a61c:	e92d4010 	push	{r4, lr}
    a620:	0a000003 	beq	a634 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x1c>
    a624:	e3510000 	cmp	r1, #0
    a628:	0a000005 	beq	a644 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x2c>
    a62c:	e8bd4010 	pop	{r4, lr}
    a630:	eaffffc8 	b	a558 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    a634:	e59f2018 	ldr	r2, [pc, #24]	; a654 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x3c>
    a638:	e59f1018 	ldr	r1, [pc, #24]	; a658 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x40>
    a63c:	e59f0018 	ldr	r0, [pc, #24]	; a65c <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x44>
    a640:	eb00683b 	bl	24734 <assertion_failed>
    a644:	e59f2014 	ldr	r2, [pc, #20]	; a660 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x48>
    a648:	e59f1008 	ldr	r1, [pc, #8]	; a658 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x40>
    a64c:	e59f0010 	ldr	r0, [pc, #16]	; a664 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
    a650:	eb006837 	bl	24734 <assertion_failed>
    a654:	00000554 	.word	0x00000554
    a658:	0003d508 	.word	0x0003d508
    a65c:	0003d518 	.word	0x0003d518
    a660:	00000557 	.word	0x00000557
    a664:	0003d5d4 	.word	0x0003d5d4

0000a668 <CDWHCIDevice::AllocateChannel()>:
    a668:	e92d4070 	push	{r4, r5, r6, lr}
    a66c:	e1a05000 	mov	r5, r0
    a670:	e5900014 	ldr	r0, [r0, #20]
    a674:	e3500000 	cmp	r0, #0
    a678:	1a000014 	bne	a6d0 <CDWHCIDevice::AllocateChannel()+0x68>
    a67c:	e595100c 	ldr	r1, [r5, #12]
    a680:	e3510000 	cmp	r1, #0
    a684:	0a00000e 	beq	a6c4 <CDWHCIDevice::AllocateChannel()+0x5c>
    a688:	e5954010 	ldr	r4, [r5, #16]
    a68c:	e2144001 	ands	r4, r4, #1
    a690:	0a000022 	beq	a720 <CDWHCIDevice::AllocateChannel()+0xb8>
    a694:	e3a04000 	mov	r4, #0
    a698:	e3a03001 	mov	r3, #1
    a69c:	ea000002 	b	a6ac <CDWHCIDevice::AllocateChannel()+0x44>
    a6a0:	e5952010 	ldr	r2, [r5, #16]
    a6a4:	e1120003 	tst	r2, r3
    a6a8:	0a000012 	beq	a6f8 <CDWHCIDevice::AllocateChannel()+0x90>
    a6ac:	e2844001 	add	r4, r4, #1
    a6b0:	e1540001 	cmp	r4, r1
    a6b4:	e1a03083 	lsl	r3, r3, #1
    a6b8:	3afffff8 	bcc	a6a0 <CDWHCIDevice::AllocateChannel()+0x38>
    a6bc:	e3500000 	cmp	r0, #0
    a6c0:	1a000014 	bne	a718 <CDWHCIDevice::AllocateChannel()+0xb0>
    a6c4:	e3a04010 	mov	r4, #16
    a6c8:	e1a00004 	mov	r0, r4
    a6cc:	e8bd8070 	pop	{r4, r5, r6, pc}
    a6d0:	eb00854b 	bl	2bc04 <EnterCritical>
    a6d4:	e595100c 	ldr	r1, [r5, #12]
    a6d8:	e3510000 	cmp	r1, #0
    a6dc:	05950014 	ldreq	r0, [r5, #20]
    a6e0:	0afffff5 	beq	a6bc <CDWHCIDevice::AllocateChannel()+0x54>
    a6e4:	e5954010 	ldr	r4, [r5, #16]
    a6e8:	e5950014 	ldr	r0, [r5, #20]
    a6ec:	e2144001 	ands	r4, r4, #1
    a6f0:	1affffe7 	bne	a694 <CDWHCIDevice::AllocateChannel()+0x2c>
    a6f4:	e3a03001 	mov	r3, #1
    a6f8:	e5952010 	ldr	r2, [r5, #16]
    a6fc:	e3500000 	cmp	r0, #0
    a700:	e1823003 	orr	r3, r2, r3
    a704:	e5853010 	str	r3, [r5, #16]
    a708:	0affffee 	beq	a6c8 <CDWHCIDevice::AllocateChannel()+0x60>
    a70c:	eb008566 	bl	2bcac <LeaveCritical>
    a710:	e1a00004 	mov	r0, r4
    a714:	e8bd8070 	pop	{r4, r5, r6, pc}
    a718:	eb008563 	bl	2bcac <LeaveCritical>
    a71c:	eaffffe8 	b	a6c4 <CDWHCIDevice::AllocateChannel()+0x5c>
    a720:	e5953010 	ldr	r3, [r5, #16]
    a724:	e3833001 	orr	r3, r3, #1
    a728:	e5853010 	str	r3, [r5, #16]
    a72c:	eaffffe5 	b	a6c8 <CDWHCIDevice::AllocateChannel()+0x60>

0000a730 <CDWHCIDevice::FreeChannel(unsigned int)>:
    a730:	e590300c 	ldr	r3, [r0, #12]
    a734:	e92d4070 	push	{r4, r5, r6, lr}
    a738:	e1530001 	cmp	r3, r1
    a73c:	9a000012 	bls	a78c <CDWHCIDevice::FreeChannel(unsigned int)+0x5c>
    a740:	e3a05001 	mov	r5, #1
    a744:	e1a04000 	mov	r4, r0
    a748:	e5900014 	ldr	r0, [r0, #20]
    a74c:	e1a05115 	lsl	r5, r5, r1
    a750:	e3500000 	cmp	r0, #0
    a754:	1a00000a 	bne	a784 <CDWHCIDevice::FreeChannel(unsigned int)+0x54>
    a758:	e5943010 	ldr	r3, [r4, #16]
    a75c:	e1130005 	tst	r3, r5
    a760:	0a00000d 	beq	a79c <CDWHCIDevice::FreeChannel(unsigned int)+0x6c>
    a764:	e5941010 	ldr	r1, [r4, #16]
    a768:	e5943014 	ldr	r3, [r4, #20]
    a76c:	e1c11005 	bic	r1, r1, r5
    a770:	e3530000 	cmp	r3, #0
    a774:	e5841010 	str	r1, [r4, #16]
    a778:	08bd8070 	popeq	{r4, r5, r6, pc}
    a77c:	e8bd4070 	pop	{r4, r5, r6, lr}
    a780:	ea008549 	b	2bcac <LeaveCritical>
    a784:	eb00851e 	bl	2bc04 <EnterCritical>
    a788:	eafffff2 	b	a758 <CDWHCIDevice::FreeChannel(unsigned int)+0x28>
    a78c:	e59f2018 	ldr	r2, [pc, #24]	; a7ac <CDWHCIDevice::FreeChannel(unsigned int)+0x7c>
    a790:	e59f1018 	ldr	r1, [pc, #24]	; a7b0 <CDWHCIDevice::FreeChannel(unsigned int)+0x80>
    a794:	e59f0018 	ldr	r0, [pc, #24]	; a7b4 <CDWHCIDevice::FreeChannel(unsigned int)+0x84>
    a798:	eb0067e5 	bl	24734 <assertion_failed>
    a79c:	e59f2014 	ldr	r2, [pc, #20]	; a7b8 <CDWHCIDevice::FreeChannel(unsigned int)+0x88>
    a7a0:	e59f1008 	ldr	r1, [pc, #8]	; a7b0 <CDWHCIDevice::FreeChannel(unsigned int)+0x80>
    a7a4:	e59f0010 	ldr	r0, [pc, #16]	; a7bc <CDWHCIDevice::FreeChannel(unsigned int)+0x8c>
    a7a8:	eb0067e1 	bl	24734 <assertion_failed>
    a7ac:	00000578 	.word	0x00000578
    a7b0:	0003d508 	.word	0x0003d508
    a7b4:	0003d588 	.word	0x0003d588
    a7b8:	0000057d 	.word	0x0000057d
    a7bc:	0003d5e0 	.word	0x0003d5e0

0000a7c0 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>:
    a7c0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a7c4:	e2515000 	subs	r5, r1, #0
    a7c8:	e24dd00c 	sub	sp, sp, #12
    a7cc:	0a000039 	beq	a8b8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xf8>
    a7d0:	e1a04000 	mov	r4, r0
    a7d4:	e1a07003 	mov	r7, r3
    a7d8:	e1a08002 	mov	r8, r2
    a7dc:	ebffffa1 	bl	a668 <CDWHCIDevice::AllocateChannel()>
    a7e0:	e594300c 	ldr	r3, [r4, #12]
    a7e4:	e1a06000 	mov	r6, r0
    a7e8:	e1530000 	cmp	r3, r0
    a7ec:	93a05000 	movls	r5, #0
    a7f0:	8a000002 	bhi	a800 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x40>
    a7f4:	e1a00005 	mov	r0, r5
    a7f8:	e28dd00c 	add	sp, sp, #12
    a7fc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a800:	e3a00054 	mov	r0, #84	; 0x54
    a804:	eb000cd6 	bl	db64 <CDWHCITransferStageData::operator new(unsigned int)>
    a808:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    a80c:	e58d7000 	str	r7, [sp]
    a810:	e58d3004 	str	r3, [sp, #4]
    a814:	e1a02005 	mov	r2, r5
    a818:	e1a03008 	mov	r3, r8
    a81c:	e1a01006 	mov	r1, r6
    a820:	e0848106 	add	r8, r4, r6, lsl #2
    a824:	e1a07000 	mov	r7, r0
    a828:	eb000b2b 	bl	d4dc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>
    a82c:	e5989018 	ldr	r9, [r8, #24]
    a830:	e3590000 	cmp	r9, #0
    a834:	1a000030 	bne	a8fc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x13c>
    a838:	e1a01006 	mov	r1, r6
    a83c:	e1a00004 	mov	r0, r4
    a840:	e5887018 	str	r7, [r8, #24]
    a844:	ebfffdbf 	bl	9f48 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    a848:	e1a00007 	mov	r0, r7
    a84c:	eb000c4c 	bl	d984 <CDWHCITransferStageData::IsSplit() const>
    a850:	e2501000 	subs	r1, r0, #0
    a854:	e1a00007 	mov	r0, r7
    a858:	0a000014 	beq	a8b0 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xf0>
    a85c:	eb000b09 	bl	d488 <CDWHCITransferStageData::BeginSplitCycle()>
    a860:	e2505000 	subs	r5, r0, #0
    a864:	0a000017 	beq	a8c8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x108>
    a868:	e3a01001 	mov	r1, #1
    a86c:	e1a00007 	mov	r0, r7
    a870:	eb000afc 	bl	d468 <CDWHCITransferStageData::SetState(unsigned int)>
    a874:	e1a01009 	mov	r1, r9
    a878:	e1a00007 	mov	r0, r7
    a87c:	eb000aed 	bl	d438 <CDWHCITransferStageData::SetSplitComplete(bool)>
    a880:	e1a00007 	mov	r0, r7
    a884:	eb000cb4 	bl	db5c <CDWHCITransferStageData::GetFrameScheduler() const>
    a888:	e5903000 	ldr	r3, [r0]
    a88c:	e5933008 	ldr	r3, [r3, #8]
    a890:	e12fff33 	blx	r3
    a894:	e3a05001 	mov	r5, #1
    a898:	e1a00004 	mov	r0, r4
    a89c:	e1a01007 	mov	r1, r7
    a8a0:	ebfffee7 	bl	a444 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a8a4:	e1a00005 	mov	r0, r5
    a8a8:	e28dd00c 	add	sp, sp, #12
    a8ac:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a8b0:	eb000aec 	bl	d468 <CDWHCITransferStageData::SetState(unsigned int)>
    a8b4:	eafffff6 	b	a894 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xd4>
    a8b8:	e59f204c 	ldr	r2, [pc, #76]	; a90c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x14c>
    a8bc:	e59f104c 	ldr	r1, [pc, #76]	; a910 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x150>
    a8c0:	e59f004c 	ldr	r0, [pc, #76]	; a914 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x154>
    a8c4:	eb00679a 	bl	24734 <assertion_failed>
    a8c8:	e1a01006 	mov	r1, r6
    a8cc:	e1a00004 	mov	r0, r4
    a8d0:	ebfffdbd 	bl	9fcc <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a8d4:	e1a00007 	mov	r0, r7
    a8d8:	eb000a5b 	bl	d24c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    a8dc:	e1a00007 	mov	r0, r7
    a8e0:	e3a01054 	mov	r1, #84	; 0x54
    a8e4:	eb000cb4 	bl	dbbc <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    a8e8:	e1a01006 	mov	r1, r6
    a8ec:	e1a00004 	mov	r0, r4
    a8f0:	e5885018 	str	r5, [r8, #24]
    a8f4:	ebffff8d 	bl	a730 <CDWHCIDevice::FreeChannel(unsigned int)>
    a8f8:	eaffffbd 	b	a7f4 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x34>
    a8fc:	e59f2014 	ldr	r2, [pc, #20]	; a918 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x158>
    a900:	e59f1008 	ldr	r1, [pc, #8]	; a910 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x150>
    a904:	e59f0010 	ldr	r0, [pc, #16]	; a91c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x15c>
    a908:	eb006789 	bl	24734 <assertion_failed>
    a90c:	000002b6 	.word	0x000002b6
    a910:	0003d508 	.word	0x0003d508
    a914:	0003d604 	.word	0x0003d604
    a918:	000002c7 	.word	0x000002c7
    a91c:	0003d610 	.word	0x0003d610

0000a920 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
    a920:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    a924:	e21330ff 	ands	r3, r3, #255	; 0xff
    a928:	1a000020 	bne	a9b0 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x90>
    a92c:	e92d4070 	push	{r4, r5, r6, lr}
    a930:	e1a04001 	mov	r4, r1
    a934:	e24dd008 	sub	sp, sp, #8
    a938:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a93c:	e3510000 	cmp	r1, #0
    a940:	0a00001c 	beq	a9b8 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x98>
    a944:	e1a06000 	mov	r6, r0
    a948:	e1a00001 	mov	r0, r1
    a94c:	e1a05002 	mov	r5, r2
    a950:	eb0026b2 	bl	14420 <CUSBRequest::GetEndpoint() const>
    a954:	eb001294 	bl	f3ac <CUSBEndpoint::GetType() const>
    a958:	e3500001 	cmp	r0, #1
    a95c:	1a000019 	bne	a9c8 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xa8>
    a960:	e1a00004 	mov	r0, r4
    a964:	eb0026ec 	bl	1451c <CUSBRequest::GetBufLen() const>
    a968:	e3500000 	cmp	r0, #0
    a96c:	0a00001e 	beq	a9ec <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xcc>
    a970:	e3a01000 	mov	r1, #0
    a974:	e1a00004 	mov	r0, r4
    a978:	eb0026b2 	bl	14448 <CUSBRequest::SetStatus(int)>
    a97c:	e1a00004 	mov	r0, r4
    a980:	eb0026a6 	bl	14420 <CUSBRequest::GetEndpoint() const>
    a984:	eb00128a 	bl	f3b4 <CUSBEndpoint::IsDirectionIn() const>
    a988:	e1a01004 	mov	r1, r4
    a98c:	e1a02000 	mov	r2, r0
    a990:	e3a03000 	mov	r3, #0
    a994:	e1a00006 	mov	r0, r6
    a998:	e58d5000 	str	r5, [sp]
    a99c:	ebffff87 	bl	a7c0 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    a9a0:	e3a03000 	mov	r3, #0
    a9a4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a9a8:	e28dd008 	add	sp, sp, #8
    a9ac:	e8bd8070 	pop	{r4, r5, r6, pc}
    a9b0:	e3a00000 	mov	r0, #0
    a9b4:	e12fff1e 	bx	lr
    a9b8:	e3a02f45 	mov	r2, #276	; 0x114
    a9bc:	e59f1038 	ldr	r1, [pc, #56]	; a9fc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    a9c0:	e59f0038 	ldr	r0, [pc, #56]	; aa00 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    a9c4:	eb00675a 	bl	24734 <assertion_failed>
    a9c8:	e1a00004 	mov	r0, r4
    a9cc:	eb002693 	bl	14420 <CUSBRequest::GetEndpoint() const>
    a9d0:	eb001275 	bl	f3ac <CUSBEndpoint::GetType() const>
    a9d4:	e3500002 	cmp	r0, #2
    a9d8:	0affffe0 	beq	a960 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x40>
    a9dc:	e59f2020 	ldr	r2, [pc, #32]	; aa04 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe4>
    a9e0:	e59f1014 	ldr	r1, [pc, #20]	; a9fc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    a9e4:	e59f001c 	ldr	r0, [pc, #28]	; aa08 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe8>
    a9e8:	eb006751 	bl	24734 <assertion_failed>
    a9ec:	e59f2018 	ldr	r2, [pc, #24]	; aa0c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xec>
    a9f0:	e59f1004 	ldr	r1, [pc, #4]	; a9fc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    a9f4:	e59f0014 	ldr	r0, [pc, #20]	; aa10 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xf0>
    a9f8:	eb00674d 	bl	24734 <assertion_failed>
    a9fc:	0003d508 	.word	0x0003d508
    aa00:	0003d604 	.word	0x0003d604
    aa04:	00000115 	.word	0x00000115
    aa08:	0003d644 	.word	0x0003d644
    aa0c:	00000117 	.word	0x00000117
    aa10:	0003d62c 	.word	0x0003d62c

0000aa14 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>:
    aa14:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa18:	e0808101 	add	r8, r0, r1, lsl #2
    aa1c:	e5984018 	ldr	r4, [r8, #24]
    aa20:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    aa24:	e3540000 	cmp	r4, #0
    aa28:	0a0000ac 	beq	ace0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2cc>
    aa2c:	e1a06000 	mov	r6, r0
    aa30:	e1a00004 	mov	r0, r4
    aa34:	e1a05001 	mov	r5, r1
    aa38:	eb000c3d 	bl	db34 <CDWHCITransferStageData::GetURB() const>
    aa3c:	e2507000 	subs	r7, r0, #0
    aa40:	0a0000aa 	beq	acf0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2dc>
    aa44:	e1a00004 	mov	r0, r4
    aa48:	eb000a8c 	bl	d480 <CDWHCITransferStageData::GetSubState() const>
    aa4c:	e2503000 	subs	r3, r0, #0
    aa50:	0a00003d 	beq	ab4c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x138>
    aa54:	e3530001 	cmp	r3, #1
    aa58:	1a000123 	bne	aeec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4d8>
    aa5c:	e1a00004 	mov	r0, r4
    aa60:	eb000bb8 	bl	d948 <CDWHCITransferStageData::GetDMAAddress() const>
    aa64:	e1a09000 	mov	r9, r0
    aa68:	e1a00004 	mov	r0, r4
    aa6c:	eb000bc0 	bl	d974 <CDWHCITransferStageData::GetBytesToTransfer() const>
    aa70:	e1a01000 	mov	r1, r0
    aa74:	e1a00009 	mov	r0, r9
    aa78:	eb0084a1 	bl	2bd04 <CleanAndInvalidateDataCacheRange>
    aa7c:	e59f1478 	ldr	r1, [pc, #1144]	; aefc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4e8>
    aa80:	e28d0010 	add	r0, sp, #16
    aa84:	e0811285 	add	r1, r1, r5, lsl #5
    aa88:	eb00088d 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aa8c:	e28d0010 	add	r0, sp, #16
    aa90:	eb000894 	bl	cce8 <CDWHCIRegister::Read()>
    aa94:	e59f1464 	ldr	r1, [pc, #1124]	; af00 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4ec>
    aa98:	e1a03285 	lsl	r3, r5, #5
    aa9c:	e0831001 	add	r1, r3, r1
    aaa0:	e28d001c 	add	r0, sp, #28
    aaa4:	eb000886 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aaa8:	e28d001c 	add	r0, sp, #28
    aaac:	eb00088d 	bl	cce8 <CDWHCIRegister::Read()>
    aab0:	e3500002 	cmp	r0, #2
    aab4:	0a00006d 	beq	ac70 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x25c>
    aab8:	e1a00004 	mov	r0, r4
    aabc:	eb000a75 	bl	d498 <CDWHCITransferStageData::IsPeriodic() const>
    aac0:	e3500000 	cmp	r0, #0
    aac4:	1a0000e8 	bne	ae6c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x458>
    aac8:	e28d001c 	add	r0, sp, #28
    aacc:	eb000885 	bl	cce8 <CDWHCIRegister::Read()>
    aad0:	e1a01000 	mov	r1, r0
    aad4:	e28d0010 	add	r0, sp, #16
    aad8:	e58d100c 	str	r1, [sp, #12]
    aadc:	eb000896 	bl	cd3c <CDWHCIRegister::Get() const>
    aae0:	e1a09000 	mov	r9, r0
    aae4:	e28d0010 	add	r0, sp, #16
    aae8:	eb000893 	bl	cd3c <CDWHCIRegister::Get() const>
    aaec:	e59f2410 	ldr	r2, [pc, #1040]	; af04 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f0>
    aaf0:	e3c034ff 	bic	r3, r0, #-16777216	; 0xff000000
    aaf4:	e00229a9 	and	r2, r2, r9, lsr #19
    aaf8:	e59d100c 	ldr	r1, [sp, #12]
    aafc:	e3c3373e 	bic	r3, r3, #16252928	; 0xf80000
    ab00:	e1a00004 	mov	r0, r4
    ab04:	eb0009e3 	bl	d298 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    ab08:	e28d001c 	add	r0, sp, #28
    ab0c:	eb000874 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    ab10:	e28d0010 	add	r0, sp, #16
    ab14:	eb000872 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    ab18:	e1a00004 	mov	r0, r4
    ab1c:	eb000a53 	bl	d470 <CDWHCITransferStageData::GetState() const>
    ab20:	e3500001 	cmp	r0, #1
    ab24:	e1a09000 	mov	r9, r0
    ab28:	0a000060 	beq	acb0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x29c>
    ab2c:	e3500002 	cmp	r0, #2
    ab30:	0a00002d 	beq	abec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1d8>
    ab34:	e3500000 	cmp	r0, #0
    ab38:	0a000008 	beq	ab60 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x14c>
    ab3c:	e59f23c4 	ldr	r2, [pc, #964]	; af08 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f4>
    ab40:	e59f13c4 	ldr	r1, [pc, #964]	; af0c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f8>
    ab44:	e59f03c4 	ldr	r0, [pc, #964]	; af10 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4fc>
    ab48:	eb0066f9 	bl	24734 <assertion_failed>
    ab4c:	e1a01004 	mov	r1, r4
    ab50:	e1a00006 	mov	r0, r6
    ab54:	ebfffd3d 	bl	a050 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    ab58:	e28dd02c 	add	sp, sp, #44	; 0x2c
    ab5c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab60:	e1a00004 	mov	r0, r4
    ab64:	eb000bce 	bl	daa4 <CDWHCITransferStageData::GetTransactionStatus() const>
    ab68:	e59fb3a4 	ldr	fp, [pc, #932]	; af14 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x500>
    ab6c:	e1a0a000 	mov	sl, r0
    ab70:	e00bb000 	and	fp, fp, r0
    ab74:	e35b0000 	cmp	fp, #0
    ab78:	1a0000b8 	bne	ae60 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x44c>
    ab7c:	e3100050 	tst	r0, #80	; 0x50
    ab80:	0a000042 	beq	ac90 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x27c>
    ab84:	e1a00004 	mov	r0, r4
    ab88:	eb000a42 	bl	d498 <CDWHCITransferStageData::IsPeriodic() const>
    ab8c:	e3500000 	cmp	r0, #0
    ab90:	0a00003e 	beq	ac90 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x27c>
    ab94:	e1a00004 	mov	r0, r4
    ab98:	eb000bd5 	bl	daf4 <CDWHCITransferStageData::IsTimeout() const>
    ab9c:	e3500000 	cmp	r0, #0
    aba0:	1a00001e 	bne	ac20 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x20c>
    aba4:	e3a01003 	mov	r1, #3
    aba8:	e1a00004 	mov	r0, r4
    abac:	eb000a2d 	bl	d468 <CDWHCITransferStageData::SetState(unsigned int)>
    abb0:	e1a00007 	mov	r0, r7
    abb4:	eb002619 	bl	14420 <CUSBRequest::GetEndpoint() const>
    abb8:	eb001205 	bl	f3d4 <CUSBEndpoint::GetInterval() const>
    abbc:	e0800100 	add	r0, r0, r0, lsl #2
    abc0:	e59f3350 	ldr	r3, [pc, #848]	; af18 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x504>
    abc4:	e0800100 	add	r0, r0, r0, lsl #2
    abc8:	e1a01100 	lsl	r1, r0, #2
    abcc:	e0813193 	umull	r3, r1, r3, r1
    abd0:	e58d6000 	str	r6, [sp]
    abd4:	e1a03004 	mov	r3, r4
    abd8:	e5960008 	ldr	r0, [r6, #8]
    abdc:	e59f2338 	ldr	r2, [pc, #824]	; af1c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x508>
    abe0:	e1a01321 	lsr	r1, r1, #6
    abe4:	eb007adc 	bl	2975c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    abe8:	eaffffda 	b	ab58 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>
    abec:	e1a00004 	mov	r0, r4
    abf0:	eb000bab 	bl	daa4 <CDWHCITransferStageData::GetTransactionStatus() const>
    abf4:	e59f3318 	ldr	r3, [pc, #792]	; af14 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x500>
    abf8:	e1a09000 	mov	r9, r0
    abfc:	e0033000 	and	r3, r3, r0
    ac00:	e3530000 	cmp	r3, #0
    ac04:	0a00003d 	beq	ad00 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2ec>
    ac08:	eb006fb1 	bl	26ad4 <CLogger::Get()>
    ac0c:	e58d9000 	str	r9, [sp]
    ac10:	e3a02001 	mov	r2, #1
    ac14:	e59f3304 	ldr	r3, [pc, #772]	; af20 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x50c>
    ac18:	e59f1304 	ldr	r1, [pc, #772]	; af24 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x510>
    ac1c:	eb006eee 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ac20:	e3a01000 	mov	r1, #0
    ac24:	e1a00007 	mov	r0, r7
    ac28:	eb002606 	bl	14448 <CUSBRequest::SetStatus(int)>
    ac2c:	e1a01005 	mov	r1, r5
    ac30:	e1a00006 	mov	r0, r6
    ac34:	ebfffce4 	bl	9fcc <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    ac38:	e1a00004 	mov	r0, r4
    ac3c:	eb000982 	bl	d24c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    ac40:	e1a00004 	mov	r0, r4
    ac44:	e3a01054 	mov	r1, #84	; 0x54
    ac48:	eb000bdb 	bl	dbbc <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    ac4c:	e3a03000 	mov	r3, #0
    ac50:	e1a01005 	mov	r1, r5
    ac54:	e1a00006 	mov	r0, r6
    ac58:	e5883018 	str	r3, [r8, #24]
    ac5c:	ebfffeb3 	bl	a730 <CDWHCIDevice::FreeChannel(unsigned int)>
    ac60:	e1a00007 	mov	r0, r7
    ac64:	eb002639 	bl	14550 <CUSBRequest::CallCompletionRoutine()>
    ac68:	e28dd02c 	add	sp, sp, #44	; 0x2c
    ac6c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac70:	e1a01004 	mov	r1, r4
    ac74:	e1a00006 	mov	r0, r6
    ac78:	ebfffdf1 	bl	a444 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    ac7c:	e28d001c 	add	r0, sp, #28
    ac80:	eb000817 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    ac84:	e28d0010 	add	r0, sp, #16
    ac88:	eb000815 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    ac8c:	eaffffb1 	b	ab58 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>
    ac90:	e1a00004 	mov	r0, r4
    ac94:	eb000b29 	bl	d940 <CDWHCITransferStageData::IsStatusStage() const>
    ac98:	e3500000 	cmp	r0, #0
    ac9c:	0a000069 	beq	ae48 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x434>
    aca0:	e3a01001 	mov	r1, #1
    aca4:	e1a00007 	mov	r0, r7
    aca8:	eb0025e6 	bl	14448 <CUSBRequest::SetStatus(int)>
    acac:	eaffffde 	b	ac2c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x218>
    acb0:	e1a00004 	mov	r0, r4
    acb4:	eb000b7a 	bl	daa4 <CDWHCITransferStageData::GetTransactionStatus() const>
    acb8:	e59f3268 	ldr	r3, [pc, #616]	; af28 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x514>
    acbc:	e1a0a000 	mov	sl, r0
    acc0:	e0033000 	and	r3, r3, r0
    acc4:	e3530000 	cmp	r3, #0
    acc8:	0a000033 	beq	ad9c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x388>
    accc:	eb006f80 	bl	26ad4 <CLogger::Get()>
    acd0:	e1a02009 	mov	r2, r9
    acd4:	e59f3244 	ldr	r3, [pc, #580]	; af20 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x50c>
    acd8:	e58da000 	str	sl, [sp]
    acdc:	eaffffcd 	b	ac18 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x204>
    ace0:	e59f2244 	ldr	r2, [pc, #580]	; af2c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x518>
    ace4:	e59f1220 	ldr	r1, [pc, #544]	; af0c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f8>
    ace8:	e59f0240 	ldr	r0, [pc, #576]	; af30 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x51c>
    acec:	eb006690 	bl	24734 <assertion_failed>
    acf0:	e59f223c 	ldr	r2, [pc, #572]	; af34 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x520>
    acf4:	e59f1210 	ldr	r1, [pc, #528]	; af0c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f8>
    acf8:	e59f0238 	ldr	r0, [pc, #568]	; af38 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x524>
    acfc:	eb00668c 	bl	24734 <assertion_failed>
    ad00:	e1a00004 	mov	r0, r4
    ad04:	eb000b94 	bl	db5c <CDWHCITransferStageData::GetFrameScheduler() const>
    ad08:	e5903000 	ldr	r3, [r0]
    ad0c:	e1a01009 	mov	r1, r9
    ad10:	e5933010 	ldr	r3, [r3, #16]
    ad14:	e12fff33 	blx	r3
    ad18:	e1a00004 	mov	r0, r4
    ad1c:	eb000b8e 	bl	db5c <CDWHCITransferStageData::GetFrameScheduler() const>
    ad20:	e5903000 	ldr	r3, [r0]
    ad24:	e593300c 	ldr	r3, [r3, #12]
    ad28:	e12fff33 	blx	r3
    ad2c:	e3500000 	cmp	r0, #0
    ad30:	1a000035 	bne	ae0c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3f8>
    ad34:	e1a00004 	mov	r0, r4
    ad38:	eb000b64 	bl	dad0 <CDWHCITransferStageData::IsStageComplete() const>
    ad3c:	e2509000 	subs	r9, r0, #0
    ad40:	1a000035 	bne	ae1c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x408>
    ad44:	e1a00004 	mov	r0, r4
    ad48:	eb0009ce 	bl	d488 <CDWHCITransferStageData::BeginSplitCycle()>
    ad4c:	e250a000 	subs	sl, r0, #0
    ad50:	1a00001e 	bne	add0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3bc>
    ad54:	e1a0100a 	mov	r1, sl
    ad58:	e1a00007 	mov	r0, r7
    ad5c:	eb0025b9 	bl	14448 <CUSBRequest::SetStatus(int)>
    ad60:	e1a01005 	mov	r1, r5
    ad64:	e1a00006 	mov	r0, r6
    ad68:	ebfffc97 	bl	9fcc <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    ad6c:	e1a00004 	mov	r0, r4
    ad70:	eb000935 	bl	d24c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    ad74:	e1a00004 	mov	r0, r4
    ad78:	e3a01054 	mov	r1, #84	; 0x54
    ad7c:	eb000b8e 	bl	dbbc <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    ad80:	e588a018 	str	sl, [r8, #24]
    ad84:	e1a00006 	mov	r0, r6
    ad88:	e1a01005 	mov	r1, r5
    ad8c:	ebfffe67 	bl	a730 <CDWHCIDevice::FreeChannel(unsigned int)>
    ad90:	e1a00007 	mov	r0, r7
    ad94:	eb0025ed 	bl	14550 <CUSBRequest::CallCompletionRoutine()>
    ad98:	eaffff6e 	b	ab58 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>
    ad9c:	e1a00004 	mov	r0, r4
    ada0:	eb000b6d 	bl	db5c <CDWHCITransferStageData::GetFrameScheduler() const>
    ada4:	e5903000 	ldr	r3, [r0]
    ada8:	e1a0100a 	mov	r1, sl
    adac:	e5933010 	ldr	r3, [r3, #16]
    adb0:	e12fff33 	blx	r3
    adb4:	e1a00004 	mov	r0, r4
    adb8:	e3a01002 	mov	r1, #2
    adbc:	eb0009a9 	bl	d468 <CDWHCITransferStageData::SetState(unsigned int)>
    adc0:	e1a01009 	mov	r1, r9
    adc4:	e1a00004 	mov	r0, r4
    adc8:	eb00099a 	bl	d438 <CDWHCITransferStageData::SetSplitComplete(bool)>
    adcc:	eaffffd1 	b	ad18 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x304>
    add0:	e1a00004 	mov	r0, r4
    add4:	eb0009af 	bl	d498 <CDWHCITransferStageData::IsPeriodic() const>
    add8:	e250a000 	subs	sl, r0, #0
    addc:	1a000031 	bne	aea8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x494>
    ade0:	e3a01001 	mov	r1, #1
    ade4:	e1a00004 	mov	r0, r4
    ade8:	eb00099e 	bl	d468 <CDWHCITransferStageData::SetState(unsigned int)>
    adec:	e1a0100a 	mov	r1, sl
    adf0:	e1a00004 	mov	r0, r4
    adf4:	eb00098f 	bl	d438 <CDWHCITransferStageData::SetSplitComplete(bool)>
    adf8:	e1a00004 	mov	r0, r4
    adfc:	eb000b56 	bl	db5c <CDWHCITransferStageData::GetFrameScheduler() const>
    ae00:	e5903000 	ldr	r3, [r0]
    ae04:	e5933008 	ldr	r3, [r3, #8]
    ae08:	e12fff33 	blx	r3
    ae0c:	e1a01004 	mov	r1, r4
    ae10:	e1a00006 	mov	r0, r6
    ae14:	ebfffd8a 	bl	a444 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    ae18:	eaffff4e 	b	ab58 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>
    ae1c:	e1a01005 	mov	r1, r5
    ae20:	e1a00006 	mov	r0, r6
    ae24:	ebfffc68 	bl	9fcc <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    ae28:	e1a00004 	mov	r0, r4
    ae2c:	eb000ac3 	bl	d940 <CDWHCITransferStageData::IsStatusStage() const>
    ae30:	e3500000 	cmp	r0, #0
    ae34:	0a000015 	beq	ae90 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x47c>
    ae38:	e3a01001 	mov	r1, #1
    ae3c:	e1a00007 	mov	r0, r7
    ae40:	eb002580 	bl	14448 <CUSBRequest::SetStatus(int)>
    ae44:	eaffff7b 	b	ac38 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x224>
    ae48:	e1a00004 	mov	r0, r4
    ae4c:	eb000b23 	bl	dae0 <CDWHCITransferStageData::GetResultLen() const>
    ae50:	e1a01000 	mov	r1, r0
    ae54:	e1a00007 	mov	r0, r7
    ae58:	eb00257c 	bl	14450 <CUSBRequest::SetResultLen(unsigned int)>
    ae5c:	eaffff8f 	b	aca0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x28c>
    ae60:	eb006f1b 	bl	26ad4 <CLogger::Get()>
    ae64:	e58da000 	str	sl, [sp]
    ae68:	eaffff68 	b	ac10 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1fc>
    ae6c:	e28d0010 	add	r0, sp, #16
    ae70:	eb0007b1 	bl	cd3c <CDWHCIRegister::Get() const>
    ae74:	e2200206 	eor	r0, r0, #1610612736	; 0x60000000
    ae78:	e3100206 	tst	r0, #1610612736	; 0x60000000
    ae7c:	1affff11 	bne	aac8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0xb4>
    ae80:	e59f20b4 	ldr	r2, [pc, #180]	; af3c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x528>
    ae84:	e59f1080 	ldr	r1, [pc, #128]	; af0c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f8>
    ae88:	e59f00b0 	ldr	r0, [pc, #176]	; af40 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x52c>
    ae8c:	eb006628 	bl	24734 <assertion_failed>
    ae90:	e1a00004 	mov	r0, r4
    ae94:	eb000b11 	bl	dae0 <CDWHCITransferStageData::GetResultLen() const>
    ae98:	e1a01000 	mov	r1, r0
    ae9c:	e1a00007 	mov	r0, r7
    aea0:	eb00256a 	bl	14450 <CUSBRequest::SetResultLen(unsigned int)>
    aea4:	eaffffe3 	b	ae38 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x424>
    aea8:	e1a00004 	mov	r0, r4
    aeac:	eb000b10 	bl	daf4 <CDWHCITransferStageData::IsTimeout() const>
    aeb0:	e3500000 	cmp	r0, #0
    aeb4:	0affff3a 	beq	aba4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x190>
    aeb8:	e1a01005 	mov	r1, r5
    aebc:	e1a00006 	mov	r0, r6
    aec0:	ebfffc41 	bl	9fcc <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    aec4:	e1a01009 	mov	r1, r9
    aec8:	e1a00007 	mov	r0, r7
    aecc:	eb00255d 	bl	14448 <CUSBRequest::SetStatus(int)>
    aed0:	e1a00004 	mov	r0, r4
    aed4:	eb0008dc 	bl	d24c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    aed8:	e1a00004 	mov	r0, r4
    aedc:	e3a01054 	mov	r1, #84	; 0x54
    aee0:	eb000b35 	bl	dbbc <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    aee4:	e5889018 	str	r9, [r8, #24]
    aee8:	eaffffa5 	b	ad84 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x370>
    aeec:	e59f2050 	ldr	r2, [pc, #80]	; af44 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x530>
    aef0:	e59f1014 	ldr	r1, [pc, #20]	; af0c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f8>
    aef4:	e59f0014 	ldr	r0, [pc, #20]	; af10 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4fc>
    aef8:	eb00660d 	bl	24734 <assertion_failed>
    aefc:	20980510 	.word	0x20980510
    af00:	20980508 	.word	0x20980508
    af04:	000003ff 	.word	0x000003ff
    af08:	000004cc 	.word	0x000004cc
    af0c:	0003d508 	.word	0x0003d508
    af10:	0003e11c 	.word	0x0003e11c
    af14:	0000078c 	.word	0x0000078c
    af18:	10624dd3 	.word	0x10624dd3
    af1c:	0000a618 	.word	0x0000a618
    af20:	0003d730 	.word	0x0003d730
    af24:	0003da84 	.word	0x0003da84
    af28:	000007dc 	.word	0x000007dc
    af2c:	000003c1 	.word	0x000003c1
    af30:	0003d578 	.word	0x0003d578
    af34:	000003c3 	.word	0x000003c3
    af38:	0003d604 	.word	0x0003d604
    af3c:	000003e1 	.word	0x000003e1
    af40:	0003d6b8 	.word	0x0003d6b8
    af44:	000003eb 	.word	0x000003eb

0000af48 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    af48:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    af4c:	e3530000 	cmp	r3, #0
    af50:	112fff1e 	bxne	lr
    af54:	eafffeae 	b	aa14 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>

0000af58 <CDWHCIDevice::InterruptHandler()>:
    af58:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    af5c:	e3a04000 	mov	r4, #0
    af60:	e1a06000 	mov	r6, r0
    af64:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    af68:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    af6c:	e59f10dc 	ldr	r1, [pc, #220]	; b050 <CDWHCIDevice::InterruptHandler()+0xf8>
    af70:	e28d0004 	add	r0, sp, #4
    af74:	eb000752 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    af78:	e28d0004 	add	r0, sp, #4
    af7c:	eb000759 	bl	cce8 <CDWHCIRegister::Read()>
    af80:	e28d0004 	add	r0, sp, #4
    af84:	eb00076c 	bl	cd3c <CDWHCIRegister::Get() const>
    af88:	e3100402 	tst	r0, #33554432	; 0x2000000
    af8c:	1a000007 	bne	afb0 <CDWHCIDevice::InterruptHandler()+0x58>
    af90:	e28d0004 	add	r0, sp, #4
    af94:	eb00075a 	bl	cd04 <CDWHCIRegister::Write()>
    af98:	e3a03000 	mov	r3, #0
    af9c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    afa0:	e28d0004 	add	r0, sp, #4
    afa4:	eb00074e 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    afa8:	e28dd02c 	add	sp, sp, #44	; 0x2c
    afac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    afb0:	e59f109c 	ldr	r1, [pc, #156]	; b054 <CDWHCIDevice::InterruptHandler()+0xfc>
    afb4:	e28d0010 	add	r0, sp, #16
    afb8:	eb000741 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    afbc:	e28d0010 	add	r0, sp, #16
    afc0:	eb000748 	bl	cce8 <CDWHCIRegister::Read()>
    afc4:	e28d0010 	add	r0, sp, #16
    afc8:	eb00074d 	bl	cd04 <CDWHCIRegister::Write()>
    afcc:	e596300c 	ldr	r3, [r6, #12]
    afd0:	e1530004 	cmp	r3, r4
    afd4:	0a00001a 	beq	b044 <CDWHCIDevice::InterruptHandler()+0xec>
    afd8:	e3a05001 	mov	r5, #1
    afdc:	e59f7074 	ldr	r7, [pc, #116]	; b058 <CDWHCIDevice::InterruptHandler()+0x100>
    afe0:	ea000004 	b	aff8 <CDWHCIDevice::InterruptHandler()+0xa0>
    afe4:	e596300c 	ldr	r3, [r6, #12]
    afe8:	e2844001 	add	r4, r4, #1
    afec:	e1530004 	cmp	r3, r4
    aff0:	e1a05085 	lsl	r5, r5, #1
    aff4:	9a000012 	bls	b044 <CDWHCIDevice::InterruptHandler()+0xec>
    aff8:	e28d0010 	add	r0, sp, #16
    affc:	eb00074e 	bl	cd3c <CDWHCIRegister::Get() const>
    b000:	e1100005 	tst	r0, r5
    b004:	0afffff6 	beq	afe4 <CDWHCIDevice::InterruptHandler()+0x8c>
    b008:	e3a02000 	mov	r2, #0
    b00c:	e0871284 	add	r1, r7, r4, lsl #5
    b010:	e28d001c 	add	r0, sp, #28
    b014:	eb00072e 	bl	ccd4 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b018:	e28d001c 	add	r0, sp, #28
    b01c:	eb000738 	bl	cd04 <CDWHCIRegister::Write()>
    b020:	e5d63081 	ldrb	r3, [r6, #129]	; 0x81
    b024:	e3530000 	cmp	r3, #0
    b028:	1a000002 	bne	b038 <CDWHCIDevice::InterruptHandler()+0xe0>
    b02c:	e1a01004 	mov	r1, r4
    b030:	e1a00006 	mov	r0, r6
    b034:	ebfffe76 	bl	aa14 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>
    b038:	e28d001c 	add	r0, sp, #28
    b03c:	eb000728 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    b040:	eaffffe7 	b	afe4 <CDWHCIDevice::InterruptHandler()+0x8c>
    b044:	e28d0010 	add	r0, sp, #16
    b048:	eb000725 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    b04c:	eaffffcf 	b	af90 <CDWHCIDevice::InterruptHandler()+0x38>
    b050:	20980014 	.word	0x20980014
    b054:	20980414 	.word	0x20980414
    b058:	2098050c 	.word	0x2098050c

0000b05c <CDWHCIDevice::InterruptStub(void*)>:
    b05c:	e3500000 	cmp	r0, #0
    b060:	0a000000 	beq	b068 <CDWHCIDevice::InterruptStub(void*)+0xc>
    b064:	eaffffbb 	b	af58 <CDWHCIDevice::InterruptHandler()>
    b068:	e92d4010 	push	{r4, lr}
    b06c:	e59f2008 	ldr	r2, [pc, #8]	; b07c <CDWHCIDevice::InterruptStub(void*)+0x20>
    b070:	e59f1008 	ldr	r1, [pc, #8]	; b080 <CDWHCIDevice::InterruptStub(void*)+0x24>
    b074:	e59f0008 	ldr	r0, [pc, #8]	; b084 <CDWHCIDevice::InterruptStub(void*)+0x28>
    b078:	eb0065ad 	bl	24734 <assertion_failed>
    b07c:	00000532 	.word	0x00000532
    b080:	0003d508 	.word	0x0003d508
    b084:	0003d518 	.word	0x0003d518

0000b088 <CDWHCIDevice::AllocateWaitBlock()>:
    b088:	e92d4070 	push	{r4, r5, r6, lr}
    b08c:	e1a05000 	mov	r5, r0
    b090:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    b094:	e3500000 	cmp	r0, #0
    b098:	1a000014 	bne	b0f0 <CDWHCIDevice::AllocateWaitBlock()+0x68>
    b09c:	e3a04000 	mov	r4, #0
    b0a0:	e3a03001 	mov	r3, #1
    b0a4:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    b0a8:	e1120003 	tst	r2, r3
    b0ac:	0a000007 	beq	b0d0 <CDWHCIDevice::AllocateWaitBlock()+0x48>
    b0b0:	e2844001 	add	r4, r4, #1
    b0b4:	e3540010 	cmp	r4, #16
    b0b8:	e1a03083 	lsl	r3, r3, #1
    b0bc:	1afffff8 	bne	b0a4 <CDWHCIDevice::AllocateWaitBlock()+0x1c>
    b0c0:	e3500000 	cmp	r0, #0
    b0c4:	1a000006 	bne	b0e4 <CDWHCIDevice::AllocateWaitBlock()+0x5c>
    b0c8:	e1a00004 	mov	r0, r4
    b0cc:	e8bd8070 	pop	{r4, r5, r6, pc}
    b0d0:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    b0d4:	e3500000 	cmp	r0, #0
    b0d8:	e1823003 	orr	r3, r2, r3
    b0dc:	e585306c 	str	r3, [r5, #108]	; 0x6c
    b0e0:	0afffff8 	beq	b0c8 <CDWHCIDevice::AllocateWaitBlock()+0x40>
    b0e4:	eb0082f0 	bl	2bcac <LeaveCritical>
    b0e8:	e1a00004 	mov	r0, r4
    b0ec:	e8bd8070 	pop	{r4, r5, r6, pc}
    b0f0:	eb0082c3 	bl	2bc04 <EnterCritical>
    b0f4:	e5950070 	ldr	r0, [r5, #112]	; 0x70
    b0f8:	eaffffe7 	b	b09c <CDWHCIDevice::AllocateWaitBlock()+0x14>

0000b0fc <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    b0fc:	e351000f 	cmp	r1, #15
    b100:	e92d4070 	push	{r4, r5, r6, lr}
    b104:	8a000012 	bhi	b154 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x58>
    b108:	e3a05001 	mov	r5, #1
    b10c:	e1a04000 	mov	r4, r0
    b110:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    b114:	e1a05115 	lsl	r5, r5, r1
    b118:	e3500000 	cmp	r0, #0
    b11c:	1a00000a 	bne	b14c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x50>
    b120:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    b124:	e1130005 	tst	r3, r5
    b128:	0a00000d 	beq	b164 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x68>
    b12c:	e594106c 	ldr	r1, [r4, #108]	; 0x6c
    b130:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    b134:	e1c11005 	bic	r1, r1, r5
    b138:	e3530000 	cmp	r3, #0
    b13c:	e584106c 	str	r1, [r4, #108]	; 0x6c
    b140:	08bd8070 	popeq	{r4, r5, r6, pc}
    b144:	e8bd4070 	pop	{r4, r5, r6, lr}
    b148:	ea0082d7 	b	2bcac <LeaveCritical>
    b14c:	eb0082ac 	bl	2bc04 <EnterCritical>
    b150:	eafffff2 	b	b120 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x24>
    b154:	e59f2018 	ldr	r2, [pc, #24]	; b174 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x78>
    b158:	e59f1018 	ldr	r1, [pc, #24]	; b178 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x7c>
    b15c:	e59f0018 	ldr	r0, [pc, #24]	; b17c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x80>
    b160:	eb006573 	bl	24734 <assertion_failed>
    b164:	e59f2014 	ldr	r2, [pc, #20]	; b180 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x84>
    b168:	e59f1008 	ldr	r1, [pc, #8]	; b178 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x7c>
    b16c:	e59f0010 	ldr	r0, [pc, #16]	; b184 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x88>
    b170:	eb00656f 	bl	24734 <assertion_failed>
    b174:	0000059d 	.word	0x0000059d
    b178:	0003d508 	.word	0x0003d508
    b17c:	0003d524 	.word	0x0003d524
    b180:	000005a2 	.word	0x000005a2
    b184:	0003d754 	.word	0x0003d754

0000b188 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>:
    b188:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    b18c:	e24dd00c 	sub	sp, sp, #12
    b190:	e1a08001 	mov	r8, r1
    b194:	e1a05002 	mov	r5, r2
    b198:	e1a09003 	mov	r9, r3
    b19c:	e1a07000 	mov	r7, r0
    b1a0:	ebffffb8 	bl	b088 <CDWHCIDevice::AllocateWaitBlock()>
    b1a4:	e350000f 	cmp	r0, #15
    b1a8:	8a000023 	bhi	b23c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xb4>
    b1ac:	e3580000 	cmp	r8, #0
    b1b0:	0a00002c 	beq	b268 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xe0>
    b1b4:	e1a04000 	mov	r4, r0
    b1b8:	e1a03007 	mov	r3, r7
    b1bc:	e1a02000 	mov	r2, r0
    b1c0:	e59f10c0 	ldr	r1, [pc, #192]	; b288 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x100>
    b1c4:	e1a00008 	mov	r0, r8
    b1c8:	e0876004 	add	r6, r7, r4
    b1cc:	eb0024d4 	bl	14524 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    b1d0:	e5d6305c 	ldrb	r3, [r6, #92]	; 0x5c
    b1d4:	e3530000 	cmp	r3, #0
    b1d8:	1a000026 	bne	b278 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xf0>
    b1dc:	e3a01001 	mov	r1, #1
    b1e0:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    b1e4:	e1a02005 	mov	r2, r5
    b1e8:	e58d3000 	str	r3, [sp]
    b1ec:	e1a00007 	mov	r0, r7
    b1f0:	e5c6105c 	strb	r1, [r6, #92]	; 0x5c
    b1f4:	e1a03009 	mov	r3, r9
    b1f8:	e1a01008 	mov	r1, r8
    b1fc:	ebfffd6f 	bl	a7c0 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    b200:	e2505000 	subs	r5, r0, #0
    b204:	0a000010 	beq	b24c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xc4>
    b208:	e5d6305c 	ldrb	r3, [r6, #92]	; 0x5c
    b20c:	e3530000 	cmp	r3, #0
    b210:	1afffffc 	bne	b208 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x80>
    b214:	e1a01004 	mov	r1, r4
    b218:	e1a00007 	mov	r0, r7
    b21c:	ebffffb6 	bl	b0fc <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b220:	e1a00008 	mov	r0, r8
    b224:	eb00248b 	bl	14458 <CUSBRequest::GetStatus() const>
    b228:	e2505000 	subs	r5, r0, #0
    b22c:	13a05001 	movne	r5, #1
    b230:	e1a00005 	mov	r0, r5
    b234:	e28dd00c 	add	sp, sp, #12
    b238:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b23c:	e3a05000 	mov	r5, #0
    b240:	e1a00005 	mov	r0, r5
    b244:	e28dd00c 	add	sp, sp, #12
    b248:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b24c:	e1a00007 	mov	r0, r7
    b250:	e1a01004 	mov	r1, r4
    b254:	e5c6505c 	strb	r5, [r6, #92]	; 0x5c
    b258:	ebffffa7 	bl	b0fc <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b25c:	e1a00005 	mov	r0, r5
    b260:	e28dd00c 	add	sp, sp, #12
    b264:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b268:	e3a02e29 	mov	r2, #656	; 0x290
    b26c:	e59f1018 	ldr	r1, [pc, #24]	; b28c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    b270:	e59f0018 	ldr	r0, [pc, #24]	; b290 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x108>
    b274:	eb00652e 	bl	24734 <assertion_failed>
    b278:	e59f2014 	ldr	r2, [pc, #20]	; b294 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x10c>
    b27c:	e59f1008 	ldr	r1, [pc, #8]	; b28c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    b280:	e59f0010 	ldr	r0, [pc, #16]	; b298 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x110>
    b284:	eb00652a 	bl	24734 <assertion_failed>
    b288:	00009b84 	.word	0x00009b84
    b28c:	0003d508 	.word	0x0003d508
    b290:	0003d604 	.word	0x0003d604
    b294:	00000293 	.word	0x00000293
    b298:	0003d77c 	.word	0x0003d77c

0000b29c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
    b29c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b2a0:	e5d0c081 	ldrb	ip, [r0, #129]	; 0x81
    b2a4:	e1a04001 	mov	r4, r1
    b2a8:	e21c10ff 	ands	r1, ip, #255	; 0xff
    b2ac:	e24dd00c 	sub	sp, sp, #12
    b2b0:	1a000022 	bne	b340 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b2b4:	ee071f9a 	mcr	15, 0, r1, cr7, cr10, {4}
    b2b8:	e3540000 	cmp	r4, #0
    b2bc:	0a000070 	beq	b484 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1e8>
    b2c0:	e1a06000 	mov	r6, r0
    b2c4:	e1a00004 	mov	r0, r4
    b2c8:	e1a05002 	mov	r5, r2
    b2cc:	eb00245d 	bl	14448 <CUSBRequest::SetStatus(int)>
    b2d0:	e1a00004 	mov	r0, r4
    b2d4:	eb002451 	bl	14420 <CUSBRequest::GetEndpoint() const>
    b2d8:	eb001033 	bl	f3ac <CUSBEndpoint::GetType() const>
    b2dc:	e3500000 	cmp	r0, #0
    b2e0:	1a000019 	bne	b34c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xb0>
    b2e4:	e3550000 	cmp	r5, #0
    b2e8:	1a000069 	bne	b494 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1f8>
    b2ec:	e1a00004 	mov	r0, r4
    b2f0:	eb002466 	bl	14490 <CUSBRequest::GetSetupData()>
    b2f4:	e3500000 	cmp	r0, #0
    b2f8:	0a000069 	beq	b4a4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x208>
    b2fc:	e1d030d0 	ldrsb	r3, [r0]
    b300:	e1a00004 	mov	r0, r4
    b304:	e3530000 	cmp	r3, #0
    b308:	ba000028 	blt	b3b0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x114>
    b30c:	eb002482 	bl	1451c <CUSBRequest::GetBufLen() const>
    b310:	e2507000 	subs	r7, r0, #0
    b314:	1a000041 	bne	b420 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x184>
    b318:	e1a03007 	mov	r3, r7
    b31c:	e1a02007 	mov	r2, r7
    b320:	e1a01004 	mov	r1, r4
    b324:	e1a00006 	mov	r0, r6
    b328:	e58d7000 	str	r7, [sp]
    b32c:	ebffff95 	bl	b188 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b330:	e3500000 	cmp	r0, #0
    b334:	13a03001 	movne	r3, #1
    b338:	158d7000 	strne	r7, [sp]
    b33c:	1a000049 	bne	b468 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1cc>
    b340:	e3a00000 	mov	r0, #0
    b344:	e28dd00c 	add	sp, sp, #12
    b348:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b34c:	e1a00004 	mov	r0, r4
    b350:	eb002432 	bl	14420 <CUSBRequest::GetEndpoint() const>
    b354:	eb001014 	bl	f3ac <CUSBEndpoint::GetType() const>
    b358:	e3500001 	cmp	r0, #1
    b35c:	1a000054 	bne	b4b4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x218>
    b360:	e1a00004 	mov	r0, r4
    b364:	eb00246c 	bl	1451c <CUSBRequest::GetBufLen() const>
    b368:	e3500000 	cmp	r0, #0
    b36c:	0a000059 	beq	b4d8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x23c>
    b370:	e1a00004 	mov	r0, r4
    b374:	eb002429 	bl	14420 <CUSBRequest::GetEndpoint() const>
    b378:	eb00100d 	bl	f3b4 <CUSBEndpoint::IsDirectionIn() const>
    b37c:	e1a01004 	mov	r1, r4
    b380:	e1a02000 	mov	r2, r0
    b384:	e3a03000 	mov	r3, #0
    b388:	e1a00006 	mov	r0, r6
    b38c:	e58d5000 	str	r5, [sp]
    b390:	ebffff7c 	bl	b188 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b394:	e3500000 	cmp	r0, #0
    b398:	0affffe8 	beq	b340 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b39c:	e3a03000 	mov	r3, #0
    b3a0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b3a4:	e3a00001 	mov	r0, #1
    b3a8:	e28dd00c 	add	sp, sp, #12
    b3ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b3b0:	eb002459 	bl	1451c <CUSBRequest::GetBufLen() const>
    b3b4:	e3500000 	cmp	r0, #0
    b3b8:	0a00004a 	beq	b4e8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x24c>
    b3bc:	e1a03005 	mov	r3, r5
    b3c0:	e1a02005 	mov	r2, r5
    b3c4:	e1a01004 	mov	r1, r4
    b3c8:	e1a00006 	mov	r0, r6
    b3cc:	e58d5000 	str	r5, [sp]
    b3d0:	ebffff6c 	bl	b188 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b3d4:	e3500000 	cmp	r0, #0
    b3d8:	0affffd8 	beq	b340 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b3dc:	e1a03005 	mov	r3, r5
    b3e0:	e3a02001 	mov	r2, #1
    b3e4:	e1a01004 	mov	r1, r4
    b3e8:	e1a00006 	mov	r0, r6
    b3ec:	e58d5000 	str	r5, [sp]
    b3f0:	ebffff64 	bl	b188 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b3f4:	e3500000 	cmp	r0, #0
    b3f8:	0affffd0 	beq	b340 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b3fc:	e1a02005 	mov	r2, r5
    b400:	e1a01004 	mov	r1, r4
    b404:	e1a00006 	mov	r0, r6
    b408:	e3a03001 	mov	r3, #1
    b40c:	e58d5000 	str	r5, [sp]
    b410:	ebffff5c 	bl	b188 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b414:	e3500000 	cmp	r0, #0
    b418:	1affffdf 	bne	b39c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x100>
    b41c:	eaffffc7 	b	b340 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b420:	e1a03005 	mov	r3, r5
    b424:	e1a02005 	mov	r2, r5
    b428:	e1a01004 	mov	r1, r4
    b42c:	e1a00006 	mov	r0, r6
    b430:	e58d5000 	str	r5, [sp]
    b434:	ebffff53 	bl	b188 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b438:	e3500000 	cmp	r0, #0
    b43c:	0affffbf 	beq	b340 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b440:	e1a03005 	mov	r3, r5
    b444:	e1a02005 	mov	r2, r5
    b448:	e1a01004 	mov	r1, r4
    b44c:	e1a00006 	mov	r0, r6
    b450:	e58d5000 	str	r5, [sp]
    b454:	ebffff4b 	bl	b188 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b458:	e3500000 	cmp	r0, #0
    b45c:	0affffb7 	beq	b340 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b460:	e3a03001 	mov	r3, #1
    b464:	e58d5000 	str	r5, [sp]
    b468:	e1a01004 	mov	r1, r4
    b46c:	e1a00006 	mov	r0, r6
    b470:	e1a02003 	mov	r2, r3
    b474:	ebffff43 	bl	b188 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b478:	e3500000 	cmp	r0, #0
    b47c:	1affffc6 	bne	b39c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x100>
    b480:	eaffffae 	b	b340 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    b484:	e3a020cf 	mov	r2, #207	; 0xcf
    b488:	e59f1068 	ldr	r1, [pc, #104]	; b4f8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b48c:	e59f0068 	ldr	r0, [pc, #104]	; b4fc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x260>
    b490:	eb0064a7 	bl	24734 <assertion_failed>
    b494:	e3a020d5 	mov	r2, #213	; 0xd5
    b498:	e59f1058 	ldr	r1, [pc, #88]	; b4f8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b49c:	e59f005c 	ldr	r0, [pc, #92]	; b500 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x264>
    b4a0:	eb0064a3 	bl	24734 <assertion_failed>
    b4a4:	e3a020d8 	mov	r2, #216	; 0xd8
    b4a8:	e59f1048 	ldr	r1, [pc, #72]	; b4f8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b4ac:	e59f0050 	ldr	r0, [pc, #80]	; b504 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x268>
    b4b0:	eb00649f 	bl	24734 <assertion_failed>
    b4b4:	e1a00004 	mov	r0, r4
    b4b8:	eb0023d8 	bl	14420 <CUSBRequest::GetEndpoint() const>
    b4bc:	eb000fba 	bl	f3ac <CUSBEndpoint::GetType() const>
    b4c0:	e3500002 	cmp	r0, #2
    b4c4:	0affffa5 	beq	b360 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xc4>
    b4c8:	e3a020fc 	mov	r2, #252	; 0xfc
    b4cc:	e59f1024 	ldr	r1, [pc, #36]	; b4f8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b4d0:	e59f0030 	ldr	r0, [pc, #48]	; b508 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    b4d4:	eb006496 	bl	24734 <assertion_failed>
    b4d8:	e3a020fe 	mov	r2, #254	; 0xfe
    b4dc:	e59f1014 	ldr	r1, [pc, #20]	; b4f8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b4e0:	e59f0024 	ldr	r0, [pc, #36]	; b50c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x270>
    b4e4:	eb006492 	bl	24734 <assertion_failed>
    b4e8:	e3a020dc 	mov	r2, #220	; 0xdc
    b4ec:	e59f1004 	ldr	r1, [pc, #4]	; b4f8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b4f0:	e59f0014 	ldr	r0, [pc, #20]	; b50c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x270>
    b4f4:	eb00648e 	bl	24734 <assertion_failed>
    b4f8:	0003d508 	.word	0x0003d508
    b4fc:	0003d604 	.word	0x0003d604
    b500:	0003d794 	.word	0x0003d794
    b504:	0003d7b4 	.word	0x0003d7b4
    b508:	0003d644 	.word	0x0003d644
    b50c:	0003d62c 	.word	0x0003d62c

0000b510 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>:
    b510:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b514:	e2515000 	subs	r5, r1, #0
    b518:	e59d4020 	ldr	r4, [sp, #32]
    b51c:	0a00001e 	beq	b59c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x8c>
    b520:	e3520000 	cmp	r2, #0
    b524:	e1a06002 	mov	r6, r2
    b528:	0a00001f 	beq	b5ac <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x9c>
    b52c:	e3540000 	cmp	r4, #0
    b530:	0a000021 	beq	b5bc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xac>
    b534:	e1a07000 	mov	r7, r0
    b538:	e1a08003 	mov	r8, r3
    b53c:	e2239001 	eor	r9, r3, #1
    b540:	ea000003 	b	b554 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x44>
    b544:	e3a00001 	mov	r0, #1
    b548:	eb007a10 	bl	29d90 <CTimer::SimpleMsDelay(unsigned int)>
    b54c:	e2544001 	subs	r4, r4, #1
    b550:	0a00000f 	beq	b594 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x84>
    b554:	e1a00005 	mov	r0, r5
    b558:	eb0005e2 	bl	cce8 <CDWHCIRegister::Read()>
    b55c:	e1160000 	tst	r6, r0
    b560:	11a0c009 	movne	ip, r9
    b564:	01a0c008 	moveq	ip, r8
    b568:	e35c0000 	cmp	ip, #0
    b56c:	0a000006 	beq	b58c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x7c>
    b570:	e5973008 	ldr	r3, [r7, #8]
    b574:	e3530000 	cmp	r3, #0
    b578:	1afffff1 	bne	b544 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x34>
    b57c:	e59f2048 	ldr	r2, [pc, #72]	; b5cc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xbc>
    b580:	e59f1048 	ldr	r1, [pc, #72]	; b5d0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    b584:	e59f0048 	ldr	r0, [pc, #72]	; b5d4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    b588:	eb006469 	bl	24734 <assertion_failed>
    b58c:	e3a00001 	mov	r0, #1
    b590:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b594:	e1a00004 	mov	r0, r4
    b598:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b59c:	e59f2034 	ldr	r2, [pc, #52]	; b5d8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc8>
    b5a0:	e59f1028 	ldr	r1, [pc, #40]	; b5d0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    b5a4:	e59f0030 	ldr	r0, [pc, #48]	; b5dc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xcc>
    b5a8:	eb006461 	bl	24734 <assertion_failed>
    b5ac:	e59f202c 	ldr	r2, [pc, #44]	; b5e0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd0>
    b5b0:	e59f1018 	ldr	r1, [pc, #24]	; b5d0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    b5b4:	e59f0028 	ldr	r0, [pc, #40]	; b5e4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd4>
    b5b8:	eb00645d 	bl	24734 <assertion_failed>
    b5bc:	e59f2024 	ldr	r2, [pc, #36]	; b5e8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd8>
    b5c0:	e59f1008 	ldr	r1, [pc, #8]	; b5d0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    b5c4:	e59f0020 	ldr	r0, [pc, #32]	; b5ec <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xdc>
    b5c8:	eb006459 	bl	24734 <assertion_failed>
    b5cc:	000005b3 	.word	0x000005b3
    b5d0:	0003d508 	.word	0x0003d508
    b5d4:	0003d568 	.word	0x0003d568
    b5d8:	000005ad 	.word	0x000005ad
    b5dc:	0003d7c0 	.word	0x0003d7c0
    b5e0:	000005ae 	.word	0x000005ae
    b5e4:	0003d7d0 	.word	0x0003d7d0
    b5e8:	000005af 	.word	0x000005af
    b5ec:	0003d7dc 	.word	0x0003d7dc

0000b5f0 <CDWHCIDevice::EnableRootPort()>:
    b5f0:	e92d4030 	push	{r4, r5, lr}
    b5f4:	e24dd01c 	sub	sp, sp, #28
    b5f8:	e1a04000 	mov	r4, r0
    b5fc:	eb006af6 	bl	261dc <CKernelOptions::Get()>
    b600:	e3500000 	cmp	r0, #0
    b604:	0a00002c 	beq	b6bc <CDWHCIDevice::EnableRootPort()+0xcc>
    b608:	eb006ae6 	bl	261a8 <CKernelOptions::GetUSBPowerDelay() const>
    b60c:	e2505000 	subs	r5, r0, #0
    b610:	0a000029 	beq	b6bc <CDWHCIDevice::EnableRootPort()+0xcc>
    b614:	e59f10a8 	ldr	r1, [pc, #168]	; b6c4 <CDWHCIDevice::EnableRootPort()+0xd4>
    b618:	e28d000c 	add	r0, sp, #12
    b61c:	eb0005a8 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b620:	e3a03001 	mov	r3, #1
    b624:	e1a00004 	mov	r0, r4
    b628:	e1a02003 	mov	r2, r3
    b62c:	e58d5000 	str	r5, [sp]
    b630:	e28d100c 	add	r1, sp, #12
    b634:	ebffffb5 	bl	b510 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b638:	e2504000 	subs	r4, r0, #0
    b63c:	0a000019 	beq	b6a8 <CDWHCIDevice::EnableRootPort()+0xb8>
    b640:	e3a00064 	mov	r0, #100	; 0x64
    b644:	eb0079d1 	bl	29d90 <CTimer::SimpleMsDelay(unsigned int)>
    b648:	e28d000c 	add	r0, sp, #12
    b64c:	eb0005a5 	bl	cce8 <CDWHCIRegister::Read()>
    b650:	e3e0102e 	mvn	r1, #46	; 0x2e
    b654:	e28d000c 	add	r0, sp, #12
    b658:	eb0005d6 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    b65c:	e3a01c01 	mov	r1, #256	; 0x100
    b660:	e28d000c 	add	r0, sp, #12
    b664:	eb0005e1 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    b668:	e28d000c 	add	r0, sp, #12
    b66c:	eb0005a4 	bl	cd04 <CDWHCIRegister::Write()>
    b670:	e3a00032 	mov	r0, #50	; 0x32
    b674:	eb0079c5 	bl	29d90 <CTimer::SimpleMsDelay(unsigned int)>
    b678:	e28d000c 	add	r0, sp, #12
    b67c:	eb000599 	bl	cce8 <CDWHCIRegister::Read()>
    b680:	e3e0102e 	mvn	r1, #46	; 0x2e
    b684:	e28d000c 	add	r0, sp, #12
    b688:	eb0005ca 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    b68c:	e3e01c01 	mvn	r1, #256	; 0x100
    b690:	e28d000c 	add	r0, sp, #12
    b694:	eb0005c7 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    b698:	e28d000c 	add	r0, sp, #12
    b69c:	eb000598 	bl	cd04 <CDWHCIRegister::Write()>
    b6a0:	e3a00014 	mov	r0, #20
    b6a4:	eb0079b9 	bl	29d90 <CTimer::SimpleMsDelay(unsigned int)>
    b6a8:	e28d000c 	add	r0, sp, #12
    b6ac:	eb00058c 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    b6b0:	e1a00004 	mov	r0, r4
    b6b4:	e28dd01c 	add	sp, sp, #28
    b6b8:	e8bd8030 	pop	{r4, r5, pc}
    b6bc:	e59f5004 	ldr	r5, [pc, #4]	; b6c8 <CDWHCIDevice::EnableRootPort()+0xd8>
    b6c0:	eaffffd3 	b	b614 <CDWHCIDevice::EnableRootPort()+0x24>
    b6c4:	20980440 	.word	0x20980440
    b6c8:	000001fe 	.word	0x000001fe

0000b6cc <CDWHCIDevice::Reset()>:
    b6cc:	e92d4030 	push	{r4, r5, lr}
    b6d0:	e1a04000 	mov	r4, r0
    b6d4:	e3a05064 	mov	r5, #100	; 0x64
    b6d8:	e24dd01c 	sub	sp, sp, #28
    b6dc:	e3a02000 	mov	r2, #0
    b6e0:	e59f1080 	ldr	r1, [pc, #128]	; b768 <CDWHCIDevice::Reset()+0x9c>
    b6e4:	e28d000c 	add	r0, sp, #12
    b6e8:	eb000579 	bl	ccd4 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b6ec:	e1a00004 	mov	r0, r4
    b6f0:	e3a03001 	mov	r3, #1
    b6f4:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    b6f8:	e28d100c 	add	r1, sp, #12
    b6fc:	e58d5000 	str	r5, [sp]
    b700:	ebffff82 	bl	b510 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b704:	e3500000 	cmp	r0, #0
    b708:	1a000005 	bne	b724 <CDWHCIDevice::Reset()+0x58>
    b70c:	e3a04000 	mov	r4, #0
    b710:	e28d000c 	add	r0, sp, #12
    b714:	eb000572 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    b718:	e1a00004 	mov	r0, r4
    b71c:	e28dd01c 	add	sp, sp, #28
    b720:	e8bd8030 	pop	{r4, r5, pc}
    b724:	e3a01001 	mov	r1, #1
    b728:	e28d000c 	add	r0, sp, #12
    b72c:	eb0005af 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    b730:	e28d000c 	add	r0, sp, #12
    b734:	eb000572 	bl	cd04 <CDWHCIRegister::Write()>
    b738:	e3a0300a 	mov	r3, #10
    b73c:	e1a00004 	mov	r0, r4
    b740:	e58d3000 	str	r3, [sp]
    b744:	e3a02001 	mov	r2, #1
    b748:	e3a03000 	mov	r3, #0
    b74c:	e28d100c 	add	r1, sp, #12
    b750:	ebffff6e 	bl	b510 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b754:	e2504000 	subs	r4, r0, #0
    b758:	0affffeb 	beq	b70c <CDWHCIDevice::Reset()+0x40>
    b75c:	e1a00005 	mov	r0, r5
    b760:	eb00798a 	bl	29d90 <CTimer::SimpleMsDelay(unsigned int)>
    b764:	eaffffe9 	b	b710 <CDWHCIDevice::Reset()+0x44>
    b768:	20980010 	.word	0x20980010

0000b76c <CDWHCIDevice::InitCore()>:
    b76c:	e92d4030 	push	{r4, r5, lr}
    b770:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    b774:	e59f1234 	ldr	r1, [pc, #564]	; b9b0 <CDWHCIDevice::InitCore()+0x244>
    b778:	e1a04000 	mov	r4, r0
    b77c:	e28d0004 	add	r0, sp, #4
    b780:	eb00054f 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b784:	e28d0004 	add	r0, sp, #4
    b788:	eb000556 	bl	cce8 <CDWHCIRegister::Read()>
    b78c:	eb006a92 	bl	261dc <CKernelOptions::Get()>
    b790:	eb006a86 	bl	261b0 <CKernelOptions::GetUSBFullSpeed() const>
    b794:	e3500000 	cmp	r0, #0
    b798:	1a000074 	bne	b970 <CDWHCIDevice::InitCore()+0x204>
    b79c:	e3e01601 	mvn	r1, #1048576	; 0x100000
    b7a0:	e28d0004 	add	r0, sp, #4
    b7a4:	eb000583 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    b7a8:	e3e01501 	mvn	r1, #4194304	; 0x400000
    b7ac:	e28d0004 	add	r0, sp, #4
    b7b0:	eb000580 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    b7b4:	e28d0004 	add	r0, sp, #4
    b7b8:	eb000551 	bl	cd04 <CDWHCIRegister::Write()>
    b7bc:	e1a00004 	mov	r0, r4
    b7c0:	ebffffc1 	bl	b6cc <CDWHCIDevice::Reset()>
    b7c4:	e2505000 	subs	r5, r0, #0
    b7c8:	0a000062 	beq	b958 <CDWHCIDevice::InitCore()+0x1ec>
    b7cc:	e28d0004 	add	r0, sp, #4
    b7d0:	eb000544 	bl	cce8 <CDWHCIRegister::Read()>
    b7d4:	e3e01010 	mvn	r1, #16
    b7d8:	e28d0004 	add	r0, sp, #4
    b7dc:	eb000575 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    b7e0:	e3e01008 	mvn	r1, #8
    b7e4:	e28d0004 	add	r0, sp, #4
    b7e8:	eb000572 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    b7ec:	e28d0004 	add	r0, sp, #4
    b7f0:	eb000543 	bl	cd04 <CDWHCIRegister::Write()>
    b7f4:	e59f11b8 	ldr	r1, [pc, #440]	; b9b4 <CDWHCIDevice::InitCore()+0x248>
    b7f8:	e28d0010 	add	r0, sp, #16
    b7fc:	eb000530 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b800:	e28d0010 	add	r0, sp, #16
    b804:	eb000537 	bl	cce8 <CDWHCIRegister::Read()>
    b808:	e28d0010 	add	r0, sp, #16
    b80c:	eb00054a 	bl	cd3c <CDWHCIRegister::Get() const>
    b810:	e1a001a0 	lsr	r0, r0, #3
    b814:	e2000003 	and	r0, r0, #3
    b818:	e3500002 	cmp	r0, #2
    b81c:	1a00005b 	bne	b990 <CDWHCIDevice::InitCore()+0x224>
    b820:	e28d0004 	add	r0, sp, #4
    b824:	eb00052f 	bl	cce8 <CDWHCIRegister::Read()>
    b828:	e28d0010 	add	r0, sp, #16
    b82c:	eb000542 	bl	cd3c <CDWHCIRegister::Get() const>
    b830:	e1a00320 	lsr	r0, r0, #6
    b834:	e2000003 	and	r0, r0, #3
    b838:	e3500002 	cmp	r0, #2
    b83c:	0a000038 	beq	b924 <CDWHCIDevice::InitCore()+0x1b8>
    b840:	e3e01802 	mvn	r1, #131072	; 0x20000
    b844:	e28d0004 	add	r0, sp, #4
    b848:	eb00055a 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    b84c:	e3e01702 	mvn	r1, #524288	; 0x80000
    b850:	e28d0004 	add	r0, sp, #4
    b854:	eb000557 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    b858:	e28d0004 	add	r0, sp, #4
    b85c:	eb000528 	bl	cd04 <CDWHCIRegister::Write()>
    b860:	e594300c 	ldr	r3, [r4, #12]
    b864:	e3530000 	cmp	r3, #0
    b868:	1a00004c 	bne	b9a0 <CDWHCIDevice::InitCore()+0x234>
    b86c:	e28d0010 	add	r0, sp, #16
    b870:	eb000531 	bl	cd3c <CDWHCIRegister::Get() const>
    b874:	e1a00720 	lsr	r0, r0, #14
    b878:	e200000f 	and	r0, r0, #15
    b87c:	e2403003 	sub	r3, r0, #3
    b880:	e353000c 	cmp	r3, #12
    b884:	e2800001 	add	r0, r0, #1
    b888:	e584000c 	str	r0, [r4, #12]
    b88c:	8a00003b 	bhi	b980 <CDWHCIDevice::InitCore()+0x214>
    b890:	e59f1120 	ldr	r1, [pc, #288]	; b9b8 <CDWHCIDevice::InitCore()+0x24c>
    b894:	e28d001c 	add	r0, sp, #28
    b898:	eb000509 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b89c:	e28d001c 	add	r0, sp, #28
    b8a0:	eb000510 	bl	cce8 <CDWHCIRegister::Read()>
    b8a4:	e3a01020 	mov	r1, #32
    b8a8:	e28d001c 	add	r0, sp, #28
    b8ac:	eb00054f 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    b8b0:	e3a01010 	mov	r1, #16
    b8b4:	e28d001c 	add	r0, sp, #28
    b8b8:	eb00054c 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    b8bc:	e3e01006 	mvn	r1, #6
    b8c0:	e28d001c 	add	r0, sp, #28
    b8c4:	eb00053b 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    b8c8:	e28d001c 	add	r0, sp, #28
    b8cc:	eb00050c 	bl	cd04 <CDWHCIRegister::Write()>
    b8d0:	e28d0004 	add	r0, sp, #4
    b8d4:	eb000503 	bl	cce8 <CDWHCIRegister::Read()>
    b8d8:	e3e01c02 	mvn	r1, #512	; 0x200
    b8dc:	e28d0004 	add	r0, sp, #4
    b8e0:	eb000534 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    b8e4:	e3e01c01 	mvn	r1, #256	; 0x100
    b8e8:	e28d0004 	add	r0, sp, #4
    b8ec:	eb000531 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    b8f0:	e28d0004 	add	r0, sp, #4
    b8f4:	eb000502 	bl	cd04 <CDWHCIRegister::Write()>
    b8f8:	e1a00004 	mov	r0, r4
    b8fc:	ebfff96c 	bl	9eb4 <CDWHCIDevice::EnableCommonInterrupts()>
    b900:	e28d001c 	add	r0, sp, #28
    b904:	eb0004f6 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    b908:	e28d0010 	add	r0, sp, #16
    b90c:	eb0004f4 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    b910:	e28d0004 	add	r0, sp, #4
    b914:	eb0004f2 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    b918:	e1a00005 	mov	r0, r5
    b91c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    b920:	e8bd8030 	pop	{r4, r5, pc}
    b924:	e28d0010 	add	r0, sp, #16
    b928:	eb000503 	bl	cd3c <CDWHCIRegister::Get() const>
    b92c:	e1a00420 	lsr	r0, r0, #8
    b930:	e2000003 	and	r0, r0, #3
    b934:	e3500001 	cmp	r0, #1
    b938:	1affffc0 	bne	b840 <CDWHCIDevice::InitCore()+0xd4>
    b93c:	e28d0004 	add	r0, sp, #4
    b940:	e3a01802 	mov	r1, #131072	; 0x20000
    b944:	eb000529 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    b948:	e3a01702 	mov	r1, #524288	; 0x80000
    b94c:	e28d0004 	add	r0, sp, #4
    b950:	eb000526 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    b954:	eaffffbf 	b	b858 <CDWHCIDevice::InitCore()+0xec>
    b958:	eb006c5d 	bl	26ad4 <CLogger::Get()>
    b95c:	e3a02001 	mov	r2, #1
    b960:	e59f3054 	ldr	r3, [pc, #84]	; b9bc <CDWHCIDevice::InitCore()+0x250>
    b964:	e59f1054 	ldr	r1, [pc, #84]	; b9c0 <CDWHCIDevice::InitCore()+0x254>
    b968:	eb006b9b 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b96c:	eaffffe7 	b	b910 <CDWHCIDevice::InitCore()+0x1a4>
    b970:	e3a01040 	mov	r1, #64	; 0x40
    b974:	e28d0004 	add	r0, sp, #4
    b978:	eb00051c 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    b97c:	eaffff86 	b	b79c <CDWHCIDevice::InitCore()+0x30>
    b980:	e59f203c 	ldr	r2, [pc, #60]	; b9c4 <CDWHCIDevice::InitCore()+0x258>
    b984:	e59f103c 	ldr	r1, [pc, #60]	; b9c8 <CDWHCIDevice::InitCore()+0x25c>
    b988:	e59f003c 	ldr	r0, [pc, #60]	; b9cc <CDWHCIDevice::InitCore()+0x260>
    b98c:	eb006368 	bl	24734 <assertion_failed>
    b990:	e59f2038 	ldr	r2, [pc, #56]	; b9d0 <CDWHCIDevice::InitCore()+0x264>
    b994:	e59f102c 	ldr	r1, [pc, #44]	; b9c8 <CDWHCIDevice::InitCore()+0x25c>
    b998:	e59f0034 	ldr	r0, [pc, #52]	; b9d4 <CDWHCIDevice::InitCore()+0x268>
    b99c:	eb006364 	bl	24734 <assertion_failed>
    b9a0:	e59f2030 	ldr	r2, [pc, #48]	; b9d8 <CDWHCIDevice::InitCore()+0x26c>
    b9a4:	e59f101c 	ldr	r1, [pc, #28]	; b9c8 <CDWHCIDevice::InitCore()+0x25c>
    b9a8:	e59f002c 	ldr	r0, [pc, #44]	; b9dc <CDWHCIDevice::InitCore()+0x270>
    b9ac:	eb006360 	bl	24734 <assertion_failed>
    b9b0:	2098000c 	.word	0x2098000c
    b9b4:	20980048 	.word	0x20980048
    b9b8:	20980008 	.word	0x20980008
    b9bc:	0003d7ec 	.word	0x0003d7ec
    b9c0:	0003da84 	.word	0x0003da84
    b9c4:	00000187 	.word	0x00000187
    b9c8:	0003d508 	.word	0x0003d508
    b9cc:	0003d848 	.word	0x0003d848
    b9d0:	00000175 	.word	0x00000175
    b9d4:	0003d7fc 	.word	0x0003d7fc
    b9d8:	00000185 	.word	0x00000185
    b9dc:	0003d834 	.word	0x0003d834

0000b9e0 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    b9e0:	e92d4030 	push	{r4, r5, lr}
    b9e4:	e1a05001 	mov	r5, r1
    b9e8:	e24dd01c 	sub	sp, sp, #28
    b9ec:	e3a02000 	mov	r2, #0
    b9f0:	e1a04000 	mov	r4, r0
    b9f4:	e59f106c 	ldr	r1, [pc, #108]	; ba68 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x88>
    b9f8:	e28d000c 	add	r0, sp, #12
    b9fc:	eb0004b4 	bl	ccd4 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    ba00:	e3a01020 	mov	r1, #32
    ba04:	e28d000c 	add	r0, sp, #12
    ba08:	eb0004f8 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    ba0c:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
    ba10:	e28d000c 	add	r0, sp, #12
    ba14:	eb0004e7 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    ba18:	e1a01305 	lsl	r1, r5, #6
    ba1c:	e28d000c 	add	r0, sp, #12
    ba20:	eb0004f2 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    ba24:	e28d000c 	add	r0, sp, #12
    ba28:	eb0004b5 	bl	cd04 <CDWHCIRegister::Write()>
    ba2c:	e3a0300a 	mov	r3, #10
    ba30:	e1a00004 	mov	r0, r4
    ba34:	e58d3000 	str	r3, [sp]
    ba38:	e3a02020 	mov	r2, #32
    ba3c:	e3a03000 	mov	r3, #0
    ba40:	e28d100c 	add	r1, sp, #12
    ba44:	ebfffeb1 	bl	b510 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    ba48:	e3500000 	cmp	r0, #0
    ba4c:	0a000001 	beq	ba58 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x78>
    ba50:	e3a00001 	mov	r0, #1
    ba54:	eb0078d4 	bl	29dac <CTimer::SimpleusDelay(unsigned int)>
    ba58:	e28d000c 	add	r0, sp, #12
    ba5c:	eb0004a0 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    ba60:	e28dd01c 	add	sp, sp, #28
    ba64:	e8bd8030 	pop	{r4, r5, pc}
    ba68:	20980010 	.word	0x20980010

0000ba6c <CDWHCIDevice::FlushRxFIFO()>:
    ba6c:	e92d4010 	push	{r4, lr}
    ba70:	e24dd018 	sub	sp, sp, #24
    ba74:	e3a02000 	mov	r2, #0
    ba78:	e1a04000 	mov	r4, r0
    ba7c:	e59f1054 	ldr	r1, [pc, #84]	; bad8 <CDWHCIDevice::FlushRxFIFO()+0x6c>
    ba80:	e28d000c 	add	r0, sp, #12
    ba84:	eb000492 	bl	ccd4 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    ba88:	e3a01010 	mov	r1, #16
    ba8c:	e28d000c 	add	r0, sp, #12
    ba90:	eb0004d6 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    ba94:	e28d000c 	add	r0, sp, #12
    ba98:	eb000499 	bl	cd04 <CDWHCIRegister::Write()>
    ba9c:	e3a0300a 	mov	r3, #10
    baa0:	e1a00004 	mov	r0, r4
    baa4:	e58d3000 	str	r3, [sp]
    baa8:	e3a02010 	mov	r2, #16
    baac:	e3a03000 	mov	r3, #0
    bab0:	e28d100c 	add	r1, sp, #12
    bab4:	ebfffe95 	bl	b510 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    bab8:	e3500000 	cmp	r0, #0
    babc:	0a000001 	beq	bac8 <CDWHCIDevice::FlushRxFIFO()+0x5c>
    bac0:	e3a00001 	mov	r0, #1
    bac4:	eb0078b8 	bl	29dac <CTimer::SimpleusDelay(unsigned int)>
    bac8:	e28d000c 	add	r0, sp, #12
    bacc:	eb000484 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    bad0:	e28dd018 	add	sp, sp, #24
    bad4:	e8bd8010 	pop	{r4, pc}
    bad8:	20980010 	.word	0x20980010

0000badc <CDWHCIDevice::InitHost()>:
    badc:	e92d4030 	push	{r4, r5, lr}
    bae0:	e24dd064 	sub	sp, sp, #100	; 0x64
    bae4:	e3a02000 	mov	r2, #0
    bae8:	e59f11d4 	ldr	r1, [pc, #468]	; bcc4 <CDWHCIDevice::InitHost()+0x1e8>
    baec:	e1a04000 	mov	r4, r0
    baf0:	e1a0000d 	mov	r0, sp
    baf4:	eb000476 	bl	ccd4 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    baf8:	e1a0000d 	mov	r0, sp
    bafc:	eb000480 	bl	cd04 <CDWHCIRegister::Write()>
    bb00:	e59f11c0 	ldr	r1, [pc, #448]	; bcc8 <CDWHCIDevice::InitHost()+0x1ec>
    bb04:	e28d000c 	add	r0, sp, #12
    bb08:	eb00046d 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bb0c:	e28d000c 	add	r0, sp, #12
    bb10:	eb000474 	bl	cce8 <CDWHCIRegister::Read()>
    bb14:	e3e01003 	mvn	r1, #3
    bb18:	e28d000c 	add	r0, sp, #12
    bb1c:	eb0004a5 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    bb20:	e59f11a4 	ldr	r1, [pc, #420]	; bccc <CDWHCIDevice::InitHost()+0x1f0>
    bb24:	e28d0018 	add	r0, sp, #24
    bb28:	eb000465 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bb2c:	e59f119c 	ldr	r1, [pc, #412]	; bcd0 <CDWHCIDevice::InitHost()+0x1f4>
    bb30:	e28d0024 	add	r0, sp, #36	; 0x24
    bb34:	eb000462 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bb38:	e28d0018 	add	r0, sp, #24
    bb3c:	eb000469 	bl	cce8 <CDWHCIRegister::Read()>
    bb40:	e1a00320 	lsr	r0, r0, #6
    bb44:	e2000003 	and	r0, r0, #3
    bb48:	e3500002 	cmp	r0, #2
    bb4c:	0a000048 	beq	bc74 <CDWHCIDevice::InitHost()+0x198>
    bb50:	e3a01000 	mov	r1, #0
    bb54:	e28d000c 	add	r0, sp, #12
    bb58:	eb0004a4 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    bb5c:	e28d000c 	add	r0, sp, #12
    bb60:	eb000467 	bl	cd04 <CDWHCIRegister::Write()>
    bb64:	e3a02b01 	mov	r2, #1024	; 0x400
    bb68:	e59f1164 	ldr	r1, [pc, #356]	; bcd4 <CDWHCIDevice::InitHost()+0x1f8>
    bb6c:	e28d0030 	add	r0, sp, #48	; 0x30
    bb70:	eb000457 	bl	ccd4 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bb74:	e28d0030 	add	r0, sp, #48	; 0x30
    bb78:	eb000461 	bl	cd04 <CDWHCIRegister::Write()>
    bb7c:	e3a02000 	mov	r2, #0
    bb80:	e59f1150 	ldr	r1, [pc, #336]	; bcd8 <CDWHCIDevice::InitHost()+0x1fc>
    bb84:	e28d003c 	add	r0, sp, #60	; 0x3c
    bb88:	eb000451 	bl	ccd4 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bb8c:	e3a01b01 	mov	r1, #1024	; 0x400
    bb90:	e28d003c 	add	r0, sp, #60	; 0x3c
    bb94:	eb000495 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    bb98:	e3a01301 	mov	r1, #67108864	; 0x4000000
    bb9c:	e28d003c 	add	r0, sp, #60	; 0x3c
    bba0:	eb000492 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    bba4:	e28d003c 	add	r0, sp, #60	; 0x3c
    bba8:	eb000455 	bl	cd04 <CDWHCIRegister::Write()>
    bbac:	e3a02000 	mov	r2, #0
    bbb0:	e59f1124 	ldr	r1, [pc, #292]	; bcdc <CDWHCIDevice::InitHost()+0x200>
    bbb4:	e28d0048 	add	r0, sp, #72	; 0x48
    bbb8:	eb000445 	bl	ccd4 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bbbc:	e3a01b02 	mov	r1, #2048	; 0x800
    bbc0:	e28d0048 	add	r0, sp, #72	; 0x48
    bbc4:	eb000489 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    bbc8:	e3a01301 	mov	r1, #67108864	; 0x4000000
    bbcc:	e28d0048 	add	r0, sp, #72	; 0x48
    bbd0:	eb000486 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    bbd4:	e28d0048 	add	r0, sp, #72	; 0x48
    bbd8:	eb000449 	bl	cd04 <CDWHCIRegister::Write()>
    bbdc:	e3a01010 	mov	r1, #16
    bbe0:	e1a00004 	mov	r0, r4
    bbe4:	ebffff7d 	bl	b9e0 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    bbe8:	e1a00004 	mov	r0, r4
    bbec:	ebffff9e 	bl	ba6c <CDWHCIDevice::FlushRxFIFO()>
    bbf0:	e59f10e8 	ldr	r1, [pc, #232]	; bce0 <CDWHCIDevice::InitHost()+0x204>
    bbf4:	e28d0054 	add	r0, sp, #84	; 0x54
    bbf8:	eb000431 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bbfc:	e28d0054 	add	r0, sp, #84	; 0x54
    bc00:	eb000438 	bl	cce8 <CDWHCIRegister::Read()>
    bc04:	e3e0102e 	mvn	r1, #46	; 0x2e
    bc08:	e28d0054 	add	r0, sp, #84	; 0x54
    bc0c:	eb000469 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    bc10:	e28d0054 	add	r0, sp, #84	; 0x54
    bc14:	eb000448 	bl	cd3c <CDWHCIRegister::Get() const>
    bc18:	e3100a01 	tst	r0, #4096	; 0x1000
    bc1c:	0a000022 	beq	bcac <CDWHCIDevice::InitHost()+0x1d0>
    bc20:	e1a00004 	mov	r0, r4
    bc24:	ebfff8b0 	bl	9eec <CDWHCIDevice::EnableHostInterrupts()>
    bc28:	e28d0054 	add	r0, sp, #84	; 0x54
    bc2c:	eb00042c 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    bc30:	e28d0048 	add	r0, sp, #72	; 0x48
    bc34:	eb00042a 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    bc38:	e28d003c 	add	r0, sp, #60	; 0x3c
    bc3c:	eb000428 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    bc40:	e28d0030 	add	r0, sp, #48	; 0x30
    bc44:	eb000426 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    bc48:	e28d0024 	add	r0, sp, #36	; 0x24
    bc4c:	eb000424 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    bc50:	e28d0018 	add	r0, sp, #24
    bc54:	eb000422 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    bc58:	e28d000c 	add	r0, sp, #12
    bc5c:	eb000420 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    bc60:	e1a0000d 	mov	r0, sp
    bc64:	eb00041e 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    bc68:	e3a00001 	mov	r0, #1
    bc6c:	e28dd064 	add	sp, sp, #100	; 0x64
    bc70:	e8bd8030 	pop	{r4, r5, pc}
    bc74:	e28d0018 	add	r0, sp, #24
    bc78:	eb00042f 	bl	cd3c <CDWHCIRegister::Get() const>
    bc7c:	e1a00420 	lsr	r0, r0, #8
    bc80:	e2005003 	and	r5, r0, #3
    bc84:	e3550001 	cmp	r5, #1
    bc88:	1affffb0 	bne	bb50 <CDWHCIDevice::InitHost()+0x74>
    bc8c:	e28d0024 	add	r0, sp, #36	; 0x24
    bc90:	eb000414 	bl	cce8 <CDWHCIRegister::Read()>
    bc94:	e3100802 	tst	r0, #131072	; 0x20000
    bc98:	0affffac 	beq	bb50 <CDWHCIDevice::InitHost()+0x74>
    bc9c:	e1a01005 	mov	r1, r5
    bca0:	e28d000c 	add	r0, sp, #12
    bca4:	eb000451 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    bca8:	eaffffab 	b	bb5c <CDWHCIDevice::InitHost()+0x80>
    bcac:	e28d0054 	add	r0, sp, #84	; 0x54
    bcb0:	e3a01a01 	mov	r1, #4096	; 0x1000
    bcb4:	eb00044d 	bl	cdf0 <CDWHCIRegister::Or(unsigned int)>
    bcb8:	e28d0054 	add	r0, sp, #84	; 0x54
    bcbc:	eb000410 	bl	cd04 <CDWHCIRegister::Write()>
    bcc0:	eaffffd6 	b	bc20 <CDWHCIDevice::InitHost()+0x144>
    bcc4:	20980e00 	.word	0x20980e00
    bcc8:	20980400 	.word	0x20980400
    bccc:	20980048 	.word	0x20980048
    bcd0:	2098000c 	.word	0x2098000c
    bcd4:	20980024 	.word	0x20980024
    bcd8:	20980028 	.word	0x20980028
    bcdc:	20980100 	.word	0x20980100
    bce0:	20980440 	.word	0x20980440

0000bce4 <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    bce4:	e92d4030 	push	{r4, r5, lr}
    bce8:	e24dd01c 	sub	sp, sp, #28
    bcec:	e1a05001 	mov	r5, r1
    bcf0:	e28d000c 	add	r0, sp, #12
    bcf4:	e1a01002 	mov	r1, r2
    bcf8:	eb0003f1 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bcfc:	e3a03000 	mov	r3, #0
    bd00:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bd04:	eb006b72 	bl	26ad4 <CLogger::Get()>
    bd08:	e1a04000 	mov	r4, r0
    bd0c:	e28d000c 	add	r0, sp, #12
    bd10:	eb0003f4 	bl	cce8 <CDWHCIRegister::Read()>
    bd14:	e3a02004 	mov	r2, #4
    bd18:	e88d0021 	stm	sp, {r0, r5}
    bd1c:	e59f3018 	ldr	r3, [pc, #24]	; bd3c <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x58>
    bd20:	e1a00004 	mov	r0, r4
    bd24:	e59f1014 	ldr	r1, [pc, #20]	; bd40 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x5c>
    bd28:	eb006aab 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bd2c:	e28d000c 	add	r0, sp, #12
    bd30:	eb0003eb 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    bd34:	e28dd01c 	add	sp, sp, #28
    bd38:	e8bd8030 	pop	{r4, r5, pc}
    bd3c:	0003d544 	.word	0x0003d544
    bd40:	0003da84 	.word	0x0003da84

0000bd44 <CDWHCIDevice::DumpStatus(unsigned int)>:
    bd44:	e92d4070 	push	{r4, r5, r6, lr}
    bd48:	e1a05001 	mov	r5, r1
    bd4c:	e59f0104 	ldr	r0, [pc, #260]	; be58 <CDWHCIDevice::DumpStatus(unsigned int)+0x114>
    bd50:	e59f1104 	ldr	r1, [pc, #260]	; be5c <CDWHCIDevice::DumpStatus(unsigned int)+0x118>
    bd54:	ebfff7a0 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd58:	e59f1100 	ldr	r1, [pc, #256]	; be60 <CDWHCIDevice::DumpStatus(unsigned int)+0x11c>
    bd5c:	e59f0100 	ldr	r0, [pc, #256]	; be64 <CDWHCIDevice::DumpStatus(unsigned int)+0x120>
    bd60:	ebfff79d 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd64:	e59f10fc 	ldr	r1, [pc, #252]	; be68 <CDWHCIDevice::DumpStatus(unsigned int)+0x124>
    bd68:	e59f00fc 	ldr	r0, [pc, #252]	; be6c <CDWHCIDevice::DumpStatus(unsigned int)+0x128>
    bd6c:	ebfff79a 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd70:	e59f10f8 	ldr	r1, [pc, #248]	; be70 <CDWHCIDevice::DumpStatus(unsigned int)+0x12c>
    bd74:	e59f00f8 	ldr	r0, [pc, #248]	; be74 <CDWHCIDevice::DumpStatus(unsigned int)+0x130>
    bd78:	ebfff797 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd7c:	e59f10f4 	ldr	r1, [pc, #244]	; be78 <CDWHCIDevice::DumpStatus(unsigned int)+0x134>
    bd80:	e59f00f4 	ldr	r0, [pc, #244]	; be7c <CDWHCIDevice::DumpStatus(unsigned int)+0x138>
    bd84:	ebfff794 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd88:	e59f10f0 	ldr	r1, [pc, #240]	; be80 <CDWHCIDevice::DumpStatus(unsigned int)+0x13c>
    bd8c:	e59f00f0 	ldr	r0, [pc, #240]	; be84 <CDWHCIDevice::DumpStatus(unsigned int)+0x140>
    bd90:	ebfff791 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bd94:	e59f10ec 	ldr	r1, [pc, #236]	; be88 <CDWHCIDevice::DumpStatus(unsigned int)+0x144>
    bd98:	e59f00ec 	ldr	r0, [pc, #236]	; be8c <CDWHCIDevice::DumpStatus(unsigned int)+0x148>
    bd9c:	ebfff78e 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bda0:	e59f10e8 	ldr	r1, [pc, #232]	; be90 <CDWHCIDevice::DumpStatus(unsigned int)+0x14c>
    bda4:	e59f00e8 	ldr	r0, [pc, #232]	; be94 <CDWHCIDevice::DumpStatus(unsigned int)+0x150>
    bda8:	ebfff78b 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bdac:	e59f10e4 	ldr	r1, [pc, #228]	; be98 <CDWHCIDevice::DumpStatus(unsigned int)+0x154>
    bdb0:	e59f00e4 	ldr	r0, [pc, #228]	; be9c <CDWHCIDevice::DumpStatus(unsigned int)+0x158>
    bdb4:	ebfff788 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bdb8:	e59f10e0 	ldr	r1, [pc, #224]	; bea0 <CDWHCIDevice::DumpStatus(unsigned int)+0x15c>
    bdbc:	e59f00e0 	ldr	r0, [pc, #224]	; bea4 <CDWHCIDevice::DumpStatus(unsigned int)+0x160>
    bdc0:	ebfff785 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bdc4:	e59f10dc 	ldr	r1, [pc, #220]	; bea8 <CDWHCIDevice::DumpStatus(unsigned int)+0x164>
    bdc8:	e59f00dc 	ldr	r0, [pc, #220]	; beac <CDWHCIDevice::DumpStatus(unsigned int)+0x168>
    bdcc:	ebfff782 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bdd0:	e59f40d8 	ldr	r4, [pc, #216]	; beb0 <CDWHCIDevice::DumpStatus(unsigned int)+0x16c>
    bdd4:	e59f10d8 	ldr	r1, [pc, #216]	; beb4 <CDWHCIDevice::DumpStatus(unsigned int)+0x170>
    bdd8:	e59f00d8 	ldr	r0, [pc, #216]	; beb8 <CDWHCIDevice::DumpStatus(unsigned int)+0x174>
    bddc:	ebfff77e 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bde0:	e59f10d4 	ldr	r1, [pc, #212]	; bebc <CDWHCIDevice::DumpStatus(unsigned int)+0x178>
    bde4:	e59f00d4 	ldr	r0, [pc, #212]	; bec0 <CDWHCIDevice::DumpStatus(unsigned int)+0x17c>
    bde8:	ebfff77b 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    bdec:	e0854004 	add	r4, r5, r4
    bdf0:	e59f10cc 	ldr	r1, [pc, #204]	; bec4 <CDWHCIDevice::DumpStatus(unsigned int)+0x180>
    bdf4:	e59f00cc 	ldr	r0, [pc, #204]	; bec8 <CDWHCIDevice::DumpStatus(unsigned int)+0x184>
    bdf8:	e1a04284 	lsl	r4, r4, #5
    bdfc:	ebfff776 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be00:	e59f10c4 	ldr	r1, [pc, #196]	; becc <CDWHCIDevice::DumpStatus(unsigned int)+0x188>
    be04:	e59f00c4 	ldr	r0, [pc, #196]	; bed0 <CDWHCIDevice::DumpStatus(unsigned int)+0x18c>
    be08:	ebfff773 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be0c:	e1a01004 	mov	r1, r4
    be10:	e59f00bc 	ldr	r0, [pc, #188]	; bed4 <CDWHCIDevice::DumpStatus(unsigned int)+0x190>
    be14:	ebfff770 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be18:	e2841004 	add	r1, r4, #4
    be1c:	e59f00b4 	ldr	r0, [pc, #180]	; bed8 <CDWHCIDevice::DumpStatus(unsigned int)+0x194>
    be20:	ebfff76d 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be24:	e2841008 	add	r1, r4, #8
    be28:	e59f00ac 	ldr	r0, [pc, #172]	; bedc <CDWHCIDevice::DumpStatus(unsigned int)+0x198>
    be2c:	ebfff76a 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be30:	e284100c 	add	r1, r4, #12
    be34:	e59f00a4 	ldr	r0, [pc, #164]	; bee0 <CDWHCIDevice::DumpStatus(unsigned int)+0x19c>
    be38:	ebfff767 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be3c:	e2841010 	add	r1, r4, #16
    be40:	e59f009c 	ldr	r0, [pc, #156]	; bee4 <CDWHCIDevice::DumpStatus(unsigned int)+0x1a0>
    be44:	ebfff764 	bl	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be48:	e2841014 	add	r1, r4, #20
    be4c:	e59f0094 	ldr	r0, [pc, #148]	; bee8 <CDWHCIDevice::DumpStatus(unsigned int)+0x1a4>
    be50:	e8bd4070 	pop	{r4, r5, r6, lr}
    be54:	eafff760 	b	9bdc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    be58:	0003d880 	.word	0x0003d880
    be5c:	20980000 	.word	0x20980000
    be60:	20980008 	.word	0x20980008
    be64:	0003d88c 	.word	0x0003d88c
    be68:	2098000c 	.word	0x2098000c
    be6c:	0003d894 	.word	0x0003d894
    be70:	20980010 	.word	0x20980010
    be74:	0003d89c 	.word	0x0003d89c
    be78:	20980014 	.word	0x20980014
    be7c:	0003d8a4 	.word	0x0003d8a4
    be80:	20980018 	.word	0x20980018
    be84:	0003d8b0 	.word	0x0003d8b0
    be88:	20980024 	.word	0x20980024
    be8c:	0003d8bc 	.word	0x0003d8bc
    be90:	20980028 	.word	0x20980028
    be94:	0003d8c8 	.word	0x0003d8c8
    be98:	2098002c 	.word	0x2098002c
    be9c:	0003d8dc 	.word	0x0003d8dc
    bea0:	20980100 	.word	0x20980100
    bea4:	0003d8ec 	.word	0x0003d8ec
    bea8:	20980400 	.word	0x20980400
    beac:	0003d904 	.word	0x0003d904
    beb0:	0104c028 	.word	0x0104c028
    beb4:	20980410 	.word	0x20980410
    beb8:	0003d910 	.word	0x0003d910
    bebc:	20980414 	.word	0x20980414
    bec0:	0003d928 	.word	0x0003d928
    bec4:	20980418 	.word	0x20980418
    bec8:	0003d93c 	.word	0x0003d93c
    becc:	20980440 	.word	0x20980440
    bed0:	0003d954 	.word	0x0003d954
    bed4:	0003d960 	.word	0x0003d960
    bed8:	0003d978 	.word	0x0003d978
    bedc:	0003d990 	.word	0x0003d990
    bee0:	0003d9a4 	.word	0x0003d9a4
    bee4:	0003d9bc 	.word	0x0003d9bc
    bee8:	0003d9d4 	.word	0x0003d9d4

0000beec <CDWHCIDevice::~CDWHCIDevice()>:
    beec:	e3a03001 	mov	r3, #1
    bef0:	e92d4030 	push	{r4, r5, lr}
    bef4:	e5901008 	ldr	r1, [r0, #8]
    bef8:	e59f20bc 	ldr	r2, [pc, #188]	; bfbc <CDWHCIDevice::~CDWHCIDevice()+0xd0>
    befc:	e3510000 	cmp	r1, #0
    bf00:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    bf04:	e5802000 	str	r2, [r0]
    bf08:	e5c03081 	strb	r3, [r0, #129]	; 0x81
    bf0c:	0a000022 	beq	bf9c <CDWHCIDevice::~CDWHCIDevice()+0xb0>
    bf10:	e1a04000 	mov	r4, r0
    bf14:	e3a000c8 	mov	r0, #200	; 0xc8
    bf18:	eb00779c 	bl	29d90 <CTimer::SimpleMsDelay(unsigned int)>
    bf1c:	e5940004 	ldr	r0, [r4, #4]
    bf20:	e3500000 	cmp	r0, #0
    bf24:	0a000020 	beq	bfac <CDWHCIDevice::~CDWHCIDevice()+0xc0>
    bf28:	e3a05000 	mov	r5, #0
    bf2c:	e3a01009 	mov	r1, #9
    bf30:	eb008065 	bl	2c0cc <CInterruptSystem::DisconnectIRQ(unsigned int)>
    bf34:	e1a00004 	mov	r0, r4
    bf38:	ebfffde3 	bl	b6cc <CDWHCIDevice::Reset()>
    bf3c:	e1a01005 	mov	r1, r5
    bf40:	e28d000c 	add	r0, sp, #12
    bf44:	eb00621b 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    bf48:	e3a03014 	mov	r3, #20
    bf4c:	e3a01003 	mov	r1, #3
    bf50:	e3a0c002 	mov	ip, #2
    bf54:	e08d2003 	add	r2, sp, r3
    bf58:	e58d1020 	str	r1, [sp, #32]
    bf5c:	e28d000c 	add	r0, sp, #12
    bf60:	e59f1058 	ldr	r1, [pc, #88]	; bfc0 <CDWHCIDevice::~CDWHCIDevice()+0xd4>
    bf64:	e58d5000 	str	r5, [sp]
    bf68:	e58dc024 	str	ip, [sp, #36]	; 0x24
    bf6c:	eb00621d 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    bf70:	e5845004 	str	r5, [r4, #4]
    bf74:	e5845008 	str	r5, [r4, #8]
    bf78:	e28d000c 	add	r0, sp, #12
    bf7c:	eb006214 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
    bf80:	e2840074 	add	r0, r4, #116	; 0x74
    bf84:	eb0003fe 	bl	cf84 <CDWHCIRootPort::~CDWHCIRootPort()>
    bf88:	e1a00004 	mov	r0, r4
    bf8c:	eb001a11 	bl	127d8 <CUSBHostController::~CUSBHostController()>
    bf90:	e1a00004 	mov	r0, r4
    bf94:	e28dd02c 	add	sp, sp, #44	; 0x2c
    bf98:	e8bd8030 	pop	{r4, r5, pc}
    bf9c:	e3a0205d 	mov	r2, #93	; 0x5d
    bfa0:	e59f101c 	ldr	r1, [pc, #28]	; bfc4 <CDWHCIDevice::~CDWHCIDevice()+0xd8>
    bfa4:	e59f001c 	ldr	r0, [pc, #28]	; bfc8 <CDWHCIDevice::~CDWHCIDevice()+0xdc>
    bfa8:	eb0061e1 	bl	24734 <assertion_failed>
    bfac:	e3a02060 	mov	r2, #96	; 0x60
    bfb0:	e59f100c 	ldr	r1, [pc, #12]	; bfc4 <CDWHCIDevice::~CDWHCIDevice()+0xd8>
    bfb4:	e59f0010 	ldr	r0, [pc, #16]	; bfcc <CDWHCIDevice::~CDWHCIDevice()+0xe0>
    bfb8:	eb0061dd 	bl	24734 <assertion_failed>
    bfbc:	0003da94 	.word	0x0003da94
    bfc0:	00028001 	.word	0x00028001
    bfc4:	0003d508 	.word	0x0003d508
    bfc8:	0003d568 	.word	0x0003d568
    bfcc:	0003d550 	.word	0x0003d550

0000bfd0 <CDWHCIDevice::~CDWHCIDevice()>:
    bfd0:	e92d4010 	push	{r4, lr}
    bfd4:	e1a04000 	mov	r4, r0
    bfd8:	ebffffc3 	bl	beec <CDWHCIDevice::~CDWHCIDevice()>
    bfdc:	e1a00004 	mov	r0, r4
    bfe0:	e3a01084 	mov	r1, #132	; 0x84
    bfe4:	eb007be7 	bl	2af88 <operator delete(void*, unsigned int)>
    bfe8:	e1a00004 	mov	r0, r4
    bfec:	e8bd8010 	pop	{r4, pc}

0000bff0 <CDWHCIDevice::ReScanDevices()>:
    bff0:	e92d4010 	push	{r4, lr}
    bff4:	e3a03000 	mov	r3, #0
    bff8:	e1a04000 	mov	r4, r0
    bffc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c000:	e5d03080 	ldrb	r3, [r0, #128]	; 0x80
    c004:	e3530000 	cmp	r3, #0
    c008:	1a000016 	bne	c068 <CDWHCIDevice::ReScanDevices()+0x78>
    c00c:	ebfffd77 	bl	b5f0 <CDWHCIDevice::EnableRootPort()>
    c010:	e3500000 	cmp	r0, #0
    c014:	1a000007 	bne	c038 <CDWHCIDevice::ReScanDevices()+0x48>
    c018:	eb006aad 	bl	26ad4 <CLogger::Get()>
    c01c:	e3a02002 	mov	r2, #2
    c020:	e59f304c 	ldr	r3, [pc, #76]	; c074 <CDWHCIDevice::ReScanDevices()+0x84>
    c024:	e59f104c 	ldr	r1, [pc, #76]	; c078 <CDWHCIDevice::ReScanDevices()+0x88>
    c028:	eb0069eb 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c02c:	e3a03000 	mov	r3, #0
    c030:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c034:	e8bd8010 	pop	{r4, pc}
    c038:	e3a03001 	mov	r3, #1
    c03c:	e2840074 	add	r0, r4, #116	; 0x74
    c040:	e5c43080 	strb	r3, [r4, #128]	; 0x80
    c044:	eb000421 	bl	d0d0 <CDWHCIRootPort::Initialize()>
    c048:	e3500000 	cmp	r0, #0
    c04c:	1afffff6 	bne	c02c <CDWHCIDevice::ReScanDevices()+0x3c>
    c050:	eb006a9f 	bl	26ad4 <CLogger::Get()>
    c054:	e3a02002 	mov	r2, #2
    c058:	e59f301c 	ldr	r3, [pc, #28]	; c07c <CDWHCIDevice::ReScanDevices()+0x8c>
    c05c:	e59f1014 	ldr	r1, [pc, #20]	; c078 <CDWHCIDevice::ReScanDevices()+0x88>
    c060:	eb0069dd 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c064:	eafffff0 	b	c02c <CDWHCIDevice::ReScanDevices()+0x3c>
    c068:	e2800074 	add	r0, r0, #116	; 0x74
    c06c:	eb0003f8 	bl	d054 <CDWHCIRootPort::ReScanDevices()>
    c070:	eaffffed 	b	c02c <CDWHCIDevice::ReScanDevices()+0x3c>
    c074:	0003da08 	.word	0x0003da08
    c078:	0003da84 	.word	0x0003da84
    c07c:	0003d9ec 	.word	0x0003d9ec

0000c080 <CDWHCIDevice::Initialize()>:
    c080:	e92d4070 	push	{r4, r5, r6, lr}
    c084:	e3a01001 	mov	r1, #1
    c088:	e24dd020 	sub	sp, sp, #32
    c08c:	e1a04000 	mov	r4, r0
    c090:	e3a00020 	mov	r0, #32
    c094:	eb002183 	bl	146a8 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
    c098:	e3a01001 	mov	r1, #1
    c09c:	e3a00010 	mov	r0, #16
    c0a0:	eb0006f4 	bl	dc78 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>
    c0a4:	e3a01001 	mov	r1, #1
    c0a8:	e3a00010 	mov	r0, #16
    c0ac:	eb000138 	bl	c594 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    c0b0:	e3a01001 	mov	r1, #1
    c0b4:	e3a00010 	mov	r0, #16
    c0b8:	eb0002e5 	bl	cc54 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    c0bc:	e3a01001 	mov	r1, #1
    c0c0:	e3a00010 	mov	r0, #16
    c0c4:	eb0001d2 	bl	c814 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>
    c0c8:	e3a06000 	mov	r6, #0
    c0cc:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    c0d0:	e5943004 	ldr	r3, [r4, #4]
    c0d4:	e1530006 	cmp	r3, r6
    c0d8:	0a00004c 	beq	c210 <CDWHCIDevice::Initialize()+0x190>
    c0dc:	e5943008 	ldr	r3, [r4, #8]
    c0e0:	e3530000 	cmp	r3, #0
    c0e4:	0a00004d 	beq	c220 <CDWHCIDevice::Initialize()+0x1a0>
    c0e8:	e59f1168 	ldr	r1, [pc, #360]	; c258 <CDWHCIDevice::Initialize()+0x1d8>
    c0ec:	e28d0008 	add	r0, sp, #8
    c0f0:	eb0002f3 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c0f4:	e28d0008 	add	r0, sp, #8
    c0f8:	eb0002fa 	bl	cce8 <CDWHCIRegister::Read()>
    c0fc:	e59f3158 	ldr	r3, [pc, #344]	; c25c <CDWHCIDevice::Initialize()+0x1dc>
    c100:	e1500003 	cmp	r0, r3
    c104:	1a000024 	bne	c19c <CDWHCIDevice::Initialize()+0x11c>
    c108:	e1a00004 	mov	r0, r4
    c10c:	ebfff73c 	bl	9e04 <CDWHCIDevice::PowerOn()>
    c110:	e2505000 	subs	r5, r0, #0
    c114:	0a000037 	beq	c1f8 <CDWHCIDevice::Initialize()+0x178>
    c118:	e59f1140 	ldr	r1, [pc, #320]	; c260 <CDWHCIDevice::Initialize()+0x1e0>
    c11c:	e28d0014 	add	r0, sp, #20
    c120:	eb0002e7 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c124:	e28d0014 	add	r0, sp, #20
    c128:	eb0002ee 	bl	cce8 <CDWHCIRegister::Read()>
    c12c:	e3e01001 	mvn	r1, #1
    c130:	e28d0014 	add	r0, sp, #20
    c134:	eb00031f 	bl	cdb8 <CDWHCIRegister::And(unsigned int)>
    c138:	e28d0014 	add	r0, sp, #20
    c13c:	eb0002f0 	bl	cd04 <CDWHCIRegister::Write()>
    c140:	e5940004 	ldr	r0, [r4, #4]
    c144:	e3500000 	cmp	r0, #0
    c148:	0a00003e 	beq	c248 <CDWHCIDevice::Initialize()+0x1c8>
    c14c:	e1a03004 	mov	r3, r4
    c150:	e3a01009 	mov	r1, #9
    c154:	e59f2108 	ldr	r2, [pc, #264]	; c264 <CDWHCIDevice::Initialize()+0x1e4>
    c158:	eb007fa7 	bl	2bffc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    c15c:	e1a00004 	mov	r0, r4
    c160:	ebfffd81 	bl	b76c <CDWHCIDevice::InitCore()>
    c164:	e2505000 	subs	r5, r0, #0
    c168:	0a00001c 	beq	c1e0 <CDWHCIDevice::Initialize()+0x160>
    c16c:	e1a00004 	mov	r0, r4
    c170:	ebfff73e 	bl	9e70 <CDWHCIDevice::EnableGlobalInterrupts()>
    c174:	e1a00004 	mov	r0, r4
    c178:	ebfffe57 	bl	badc <CDWHCIDevice::InitHost()>
    c17c:	e2505000 	subs	r5, r0, #0
    c180:	0a00002a 	beq	c230 <CDWHCIDevice::Initialize()+0x1b0>
    c184:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
    c188:	e1a00004 	mov	r0, r4
    c18c:	ebffff97 	bl	bff0 <CDWHCIDevice::ReScanDevices()>
    c190:	e28d0014 	add	r0, sp, #20
    c194:	eb0002d2 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    c198:	ea00000b 	b	c1cc <CDWHCIDevice::Initialize()+0x14c>
    c19c:	eb006a4c 	bl	26ad4 <CLogger::Get()>
    c1a0:	e1a04000 	mov	r4, r0
    c1a4:	e28d0008 	add	r0, sp, #8
    c1a8:	eb0002e3 	bl	cd3c <CDWHCIRegister::Get() const>
    c1ac:	e1a02000 	mov	r2, r0
    c1b0:	e59f30b0 	ldr	r3, [pc, #176]	; c268 <CDWHCIDevice::Initialize()+0x1e8>
    c1b4:	e58d2000 	str	r2, [sp]
    c1b8:	e1a00004 	mov	r0, r4
    c1bc:	e3a02001 	mov	r2, #1
    c1c0:	e59f10a4 	ldr	r1, [pc, #164]	; c26c <CDWHCIDevice::Initialize()+0x1ec>
    c1c4:	e1a05006 	mov	r5, r6
    c1c8:	eb006983 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c1cc:	e28d0008 	add	r0, sp, #8
    c1d0:	eb0002c3 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    c1d4:	e1a00005 	mov	r0, r5
    c1d8:	e28dd020 	add	sp, sp, #32
    c1dc:	e8bd8070 	pop	{r4, r5, r6, pc}
    c1e0:	eb006a3b 	bl	26ad4 <CLogger::Get()>
    c1e4:	e3a02001 	mov	r2, #1
    c1e8:	e59f3080 	ldr	r3, [pc, #128]	; c270 <CDWHCIDevice::Initialize()+0x1f0>
    c1ec:	e59f1078 	ldr	r1, [pc, #120]	; c26c <CDWHCIDevice::Initialize()+0x1ec>
    c1f0:	eb006979 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c1f4:	eaffffe5 	b	c190 <CDWHCIDevice::Initialize()+0x110>
    c1f8:	eb006a35 	bl	26ad4 <CLogger::Get()>
    c1fc:	e3a02001 	mov	r2, #1
    c200:	e59f306c 	ldr	r3, [pc, #108]	; c274 <CDWHCIDevice::Initialize()+0x1f4>
    c204:	e59f1060 	ldr	r1, [pc, #96]	; c26c <CDWHCIDevice::Initialize()+0x1ec>
    c208:	eb006973 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c20c:	eaffffee 	b	c1cc <CDWHCIDevice::Initialize()+0x14c>
    c210:	e3a0207a 	mov	r2, #122	; 0x7a
    c214:	e59f105c 	ldr	r1, [pc, #92]	; c278 <CDWHCIDevice::Initialize()+0x1f8>
    c218:	e59f005c 	ldr	r0, [pc, #92]	; c27c <CDWHCIDevice::Initialize()+0x1fc>
    c21c:	eb006144 	bl	24734 <assertion_failed>
    c220:	e3a0207b 	mov	r2, #123	; 0x7b
    c224:	e59f104c 	ldr	r1, [pc, #76]	; c278 <CDWHCIDevice::Initialize()+0x1f8>
    c228:	e59f0050 	ldr	r0, [pc, #80]	; c280 <CDWHCIDevice::Initialize()+0x200>
    c22c:	eb006140 	bl	24734 <assertion_failed>
    c230:	eb006a27 	bl	26ad4 <CLogger::Get()>
    c234:	e3a02001 	mov	r2, #1
    c238:	e59f3044 	ldr	r3, [pc, #68]	; c284 <CDWHCIDevice::Initialize()+0x204>
    c23c:	e59f1028 	ldr	r1, [pc, #40]	; c26c <CDWHCIDevice::Initialize()+0x1ec>
    c240:	eb006965 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c244:	eaffffd1 	b	c190 <CDWHCIDevice::Initialize()+0x110>
    c248:	e3a02090 	mov	r2, #144	; 0x90
    c24c:	e59f1024 	ldr	r1, [pc, #36]	; c278 <CDWHCIDevice::Initialize()+0x1f8>
    c250:	e59f0024 	ldr	r0, [pc, #36]	; c27c <CDWHCIDevice::Initialize()+0x1fc>
    c254:	eb006136 	bl	24734 <assertion_failed>
    c258:	20980040 	.word	0x20980040
    c25c:	4f54280a 	.word	0x4f54280a
    c260:	20980008 	.word	0x20980008
    c264:	0000b05c 	.word	0x0000b05c
    c268:	0003da2c 	.word	0x0003da2c
    c26c:	0003da84 	.word	0x0003da84
    c270:	0003da54 	.word	0x0003da54
    c274:	0003da44 	.word	0x0003da44
    c278:	0003d508 	.word	0x0003d508
    c27c:	0003d550 	.word	0x0003d550
    c280:	0003d568 	.word	0x0003d568
    c284:	0003da6c 	.word	0x0003da6c

0000c288 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    c288:	e12fff1e 	bx	lr

0000c28c <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
    c28c:	e3a03000 	mov	r3, #0
    c290:	e5803008 	str	r3, [r0, #8]
    c294:	e12fff1e 	bx	lr

0000c298 <CDWHCIFrameSchedulerNonPeriodic::WaitForFrame()>:
    c298:	e12fff1e 	bx	lr

0000c29c <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
    c29c:	e3a00000 	mov	r0, #0
    c2a0:	e12fff1e 	bx	lr

0000c2a4 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
    c2a4:	e5903008 	ldr	r3, [r0, #8]
    c2a8:	e92d4010 	push	{r4, lr}
    c2ac:	e3530003 	cmp	r3, #3
    c2b0:	8a000008 	bhi	c2d8 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x34>
    c2b4:	e3530001 	cmp	r3, #1
    c2b8:	8a00000c 	bhi	c2f0 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x4c>
    c2bc:	03a01002 	moveq	r1, #2
    c2c0:	03a02003 	moveq	r2, #3
    c2c4:	05801008 	streq	r1, [r0, #8]
    c2c8:	0580200c 	streq	r2, [r0, #12]
    c2cc:	1a00000b 	bne	c300 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x5c>
    c2d0:	e1a00003 	mov	r0, r3
    c2d4:	e8bd8010 	pop	{r4, pc}
    c2d8:	e2433004 	sub	r3, r3, #4
    c2dc:	e3530001 	cmp	r3, #1
    c2e0:	8a000006 	bhi	c300 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x5c>
    c2e4:	e3a03000 	mov	r3, #0
    c2e8:	e1a00003 	mov	r0, r3
    c2ec:	e8bd8010 	pop	{r4, pc}
    c2f0:	e59f0018 	ldr	r0, [pc, #24]	; c310 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x6c>
    c2f4:	eb0076ac 	bl	29dac <CTimer::SimpleusDelay(unsigned int)>
    c2f8:	e3a03001 	mov	r3, #1
    c2fc:	eafffff3 	b	c2d0 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x2c>
    c300:	e3a0205f 	mov	r2, #95	; 0x5f
    c304:	e59f1008 	ldr	r1, [pc, #8]	; c314 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x70>
    c308:	e59f0008 	ldr	r0, [pc, #8]	; c318 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x74>
    c30c:	eb006108 	bl	24734 <assertion_failed>
    c310:	00000271 	.word	0x00000271
    c314:	0003daa4 	.word	0x0003daa4
    c318:	0003e11c 	.word	0x0003e11c

0000c31c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
    c31c:	e92d4010 	push	{r4, lr}
    c320:	e5903008 	ldr	r3, [r0, #8]
    c324:	e1a04000 	mov	r4, r0
    c328:	e3530000 	cmp	r3, #0
    c32c:	e24dd010 	sub	sp, sp, #16
    c330:	0a000013 	beq	c384 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x68>
    c334:	e2433002 	sub	r3, r3, #2
    c338:	e3530001 	cmp	r3, #1
    c33c:	8a000024 	bhi	c3d4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xb8>
    c340:	e3110001 	tst	r1, #1
    c344:	13a03004 	movne	r3, #4
    c348:	15803008 	strne	r3, [r0, #8]
    c34c:	1a00000a 	bne	c37c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    c350:	e3110060 	tst	r1, #96	; 0x60
    c354:	1a000012 	bne	c3a4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x88>
    c358:	e3110010 	tst	r1, #16
    c35c:	0a000020 	beq	c3e4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xc8>
    c360:	e590300c 	ldr	r3, [r0, #12]
    c364:	e3530000 	cmp	r3, #0
    c368:	e2433001 	sub	r3, r3, #1
    c36c:	e580300c 	str	r3, [r0, #12]
    c370:	0a000014 	beq	c3c8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xac>
    c374:	e3a03003 	mov	r3, #3
    c378:	e5843008 	str	r3, [r4, #8]
    c37c:	e28dd010 	add	sp, sp, #16
    c380:	e8bd8010 	pop	{r4, pc}
    c384:	e3110020 	tst	r1, #32
    c388:	13a03001 	movne	r3, #1
    c38c:	15803008 	strne	r3, [r0, #8]
    c390:	1afffff9 	bne	c37c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    c394:	e3a0206b 	mov	r2, #107	; 0x6b
    c398:	e59f1074 	ldr	r1, [pc, #116]	; c414 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    c39c:	e59f0074 	ldr	r0, [pc, #116]	; c418 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xfc>
    c3a0:	eb0060e3 	bl	24734 <assertion_failed>
    c3a4:	e590300c 	ldr	r3, [r0, #12]
    c3a8:	e3530000 	cmp	r3, #0
    c3ac:	e2433001 	sub	r3, r3, #1
    c3b0:	e580300c 	str	r3, [r0, #12]
    c3b4:	1affffee 	bne	c374 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x58>
    c3b8:	e3a03005 	mov	r3, #5
    c3bc:	e5843008 	str	r3, [r4, #8]
    c3c0:	e28dd010 	add	sp, sp, #16
    c3c4:	e8bd8010 	pop	{r4, pc}
    c3c8:	e59f004c 	ldr	r0, [pc, #76]	; c41c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x100>
    c3cc:	eb007676 	bl	29dac <CTimer::SimpleusDelay(unsigned int)>
    c3d0:	eafffff8 	b	c3b8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x9c>
    c3d4:	e3a0209b 	mov	r2, #155	; 0x9b
    c3d8:	e59f1034 	ldr	r1, [pc, #52]	; c414 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    c3dc:	e59f003c 	ldr	r0, [pc, #60]	; c420 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x104>
    c3e0:	eb0060d3 	bl	24734 <assertion_failed>
    c3e4:	e58d100c 	str	r1, [sp, #12]
    c3e8:	eb0069b9 	bl	26ad4 <CLogger::Get()>
    c3ec:	e59d100c 	ldr	r1, [sp, #12]
    c3f0:	e3a02001 	mov	r2, #1
    c3f4:	e58d1000 	str	r1, [sp]
    c3f8:	e59f3024 	ldr	r3, [pc, #36]	; c424 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x108>
    c3fc:	e59f1024 	ldr	r1, [pc, #36]	; c428 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x10c>
    c400:	eb0068f5 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c404:	e3a02096 	mov	r2, #150	; 0x96
    c408:	e59f1004 	ldr	r1, [pc, #4]	; c414 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    c40c:	e59f000c 	ldr	r0, [pc, #12]	; c420 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x104>
    c410:	eb0060c7 	bl	24734 <assertion_failed>
    c414:	0003daa4 	.word	0x0003daa4
    c418:	0003dabc 	.word	0x0003dabc
    c41c:	00000271 	.word	0x00000271
    c420:	0003e11c 	.word	0x0003e11c
    c424:	0003dae0 	.word	0x0003dae0
    c428:	0003daf4 	.word	0x0003daf4

0000c42c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
    c42c:	e59f3034 	ldr	r3, [pc, #52]	; c468 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x3c>
    c430:	e92d4010 	push	{r4, lr}
    c434:	e5803000 	str	r3, [r0]
    c438:	e1a04000 	mov	r4, r0
    c43c:	eb007688 	bl	29e64 <CTimer::Get()>
    c440:	e3a03006 	mov	r3, #6
    c444:	e3500000 	cmp	r0, #0
    c448:	e9840009 	stmib	r4, {r0, r3}
    c44c:	0a000001 	beq	c458 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x2c>
    c450:	e1a00004 	mov	r0, r4
    c454:	e8bd8010 	pop	{r4, pc}
    c458:	e3a0202e 	mov	r2, #46	; 0x2e
    c45c:	e59f1008 	ldr	r1, [pc, #8]	; c46c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x40>
    c460:	e59f0008 	ldr	r0, [pc, #8]	; c470 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x44>
    c464:	eb0060b2 	bl	24734 <assertion_failed>
    c468:	0003db80 	.word	0x0003db80
    c46c:	0003daa4 	.word	0x0003daa4
    c470:	0003d568 	.word	0x0003d568

0000c474 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>:
    c474:	e3500010 	cmp	r0, #16
    c478:	e92d4010 	push	{r4, lr}
    c47c:	1a000005 	bne	c498 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x24>
    c480:	e59f3030 	ldr	r3, [pc, #48]	; c4b8 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x44>
    c484:	e5930000 	ldr	r0, [r3]
    c488:	e3500000 	cmp	r0, #0
    c48c:	0a000005 	beq	c4a8 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x34>
    c490:	e8bd4010 	pop	{r4, lr}
    c494:	ea0061a8 	b	24b3c <CClassAllocator::Allocate()>
    c498:	e3a020bd 	mov	r2, #189	; 0xbd
    c49c:	e59f1018 	ldr	r1, [pc, #24]	; c4bc <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x48>
    c4a0:	e59f0018 	ldr	r0, [pc, #24]	; c4c0 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x4c>
    c4a4:	eb0060a2 	bl	24734 <assertion_failed>
    c4a8:	e3a020bd 	mov	r2, #189	; 0xbd
    c4ac:	e59f1008 	ldr	r1, [pc, #8]	; c4bc <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x48>
    c4b0:	e59f000c 	ldr	r0, [pc, #12]	; c4c4 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x50>
    c4b4:	eb00609e 	bl	24734 <assertion_failed>
    c4b8:	0004c508 	.word	0x0004c508
    c4bc:	0003daa4 	.word	0x0003daa4
    c4c0:	0003dafc 	.word	0x0003dafc
    c4c4:	0003db30 	.word	0x0003db30

0000c4c8 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>:
    c4c8:	e3510010 	cmp	r1, #16
    c4cc:	e92d4010 	push	{r4, lr}
    c4d0:	1a000006 	bne	c4f0 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x28>
    c4d4:	e59f3034 	ldr	r3, [pc, #52]	; c510 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x48>
    c4d8:	e1a01000 	mov	r1, r0
    c4dc:	e5930000 	ldr	r0, [r3]
    c4e0:	e3500000 	cmp	r0, #0
    c4e4:	0a000005 	beq	c500 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x38>
    c4e8:	e8bd4010 	pop	{r4, lr}
    c4ec:	ea0061cd 	b	24c28 <CClassAllocator::Free(void*)>
    c4f0:	e3a020bd 	mov	r2, #189	; 0xbd
    c4f4:	e59f1018 	ldr	r1, [pc, #24]	; c514 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x4c>
    c4f8:	e59f0018 	ldr	r0, [pc, #24]	; c518 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x50>
    c4fc:	eb00608c 	bl	24734 <assertion_failed>
    c500:	e3a020bd 	mov	r2, #189	; 0xbd
    c504:	e59f1008 	ldr	r1, [pc, #8]	; c514 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x4c>
    c508:	e59f000c 	ldr	r0, [pc, #12]	; c51c <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x54>
    c50c:	eb006088 	bl	24734 <assertion_failed>
    c510:	0004c508 	.word	0x0004c508
    c514:	0003daa4 	.word	0x0003daa4
    c518:	0003dafc 	.word	0x0003dafc
    c51c:	0003db30 	.word	0x0003db30

0000c520 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    c520:	e92d4010 	push	{r4, lr}
    c524:	e1a04000 	mov	r4, r0
    c528:	e3a01010 	mov	r1, #16
    c52c:	ebffffe5 	bl	c4c8 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>
    c530:	e1a00004 	mov	r0, r4
    c534:	e8bd8010 	pop	{r4, pc}

0000c538 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)>:
    c538:	e92d4070 	push	{r4, r5, r6, lr}
    c53c:	e59f6040 	ldr	r6, [pc, #64]	; c584 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x4c>
    c540:	e5963000 	ldr	r3, [r6]
    c544:	e3530000 	cmp	r3, #0
    c548:	1a000009 	bne	c574 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x3c>
    c54c:	e1a04000 	mov	r4, r0
    c550:	e3a0001c 	mov	r0, #28
    c554:	eb007a7d 	bl	2af50 <operator new(unsigned int)>
    c558:	e1a05000 	mov	r5, r0
    c55c:	e1a02004 	mov	r2, r4
    c560:	e3a01010 	mov	r1, #16
    c564:	e59f301c 	ldr	r3, [pc, #28]	; c588 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x50>
    c568:	eb00615a 	bl	24ad8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    c56c:	e5865000 	str	r5, [r6]
    c570:	e8bd8070 	pop	{r4, r5, r6, pc}
    c574:	e3a020bd 	mov	r2, #189	; 0xbd
    c578:	e59f100c 	ldr	r1, [pc, #12]	; c58c <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x54>
    c57c:	e59f000c 	ldr	r0, [pc, #12]	; c590 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x58>
    c580:	eb00606b 	bl	24734 <assertion_failed>
    c584:	0004c508 	.word	0x0004c508
    c588:	0003db58 	.word	0x0003db58
    c58c:	0003daa4 	.word	0x0003daa4
    c590:	0003db44 	.word	0x0003db44

0000c594 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    c594:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c598:	e59f7054 	ldr	r7, [pc, #84]	; c5f4 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    c59c:	e24dd00c 	sub	sp, sp, #12
    c5a0:	e5973000 	ldr	r3, [r7]
    c5a4:	e3530000 	cmp	r3, #0
    c5a8:	1a00000d 	bne	c5e4 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    c5ac:	e1a05001 	mov	r5, r1
    c5b0:	e1a04000 	mov	r4, r0
    c5b4:	e3a0001c 	mov	r0, #28
    c5b8:	eb007a64 	bl	2af50 <operator new(unsigned int)>
    c5bc:	e59f1034 	ldr	r1, [pc, #52]	; c5f8 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    c5c0:	e1a03005 	mov	r3, r5
    c5c4:	e58d1000 	str	r1, [sp]
    c5c8:	e1a02004 	mov	r2, r4
    c5cc:	e3a01010 	mov	r1, #16
    c5d0:	e1a06000 	mov	r6, r0
    c5d4:	eb00614b 	bl	24b08 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c5d8:	e5876000 	str	r6, [r7]
    c5dc:	e28dd00c 	add	sp, sp, #12
    c5e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c5e4:	e3a020bd 	mov	r2, #189	; 0xbd
    c5e8:	e59f100c 	ldr	r1, [pc, #12]	; c5fc <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    c5ec:	e59f000c 	ldr	r0, [pc, #12]	; c600 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    c5f0:	eb00604f 	bl	24734 <assertion_failed>
    c5f4:	0004c508 	.word	0x0004c508
    c5f8:	0003db58 	.word	0x0003db58
    c5fc:	0003daa4 	.word	0x0003daa4
    c600:	0003db44 	.word	0x0003db44

0000c604 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    c604:	e12fff1e 	bx	lr

0000c608 <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
    c608:	e1d000b6 	ldrh	r0, [r0, #6]
    c60c:	e2000001 	and	r0, r0, #1
    c610:	e12fff1e 	bx	lr

0000c614 <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
    c614:	e3a02026 	mov	r2, #38	; 0x26
    c618:	e92d4010 	push	{r4, lr}
    c61c:	e59f1004 	ldr	r1, [pc, #4]	; c628 <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x14>
    c620:	e59f0004 	ldr	r0, [pc, #4]	; c62c <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x18>
    c624:	eb006042 	bl	24734 <assertion_failed>
    c628:	0003db9c 	.word	0x0003db9c
    c62c:	0003e11c 	.word	0x0003e11c

0000c630 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
    c630:	e3a0202b 	mov	r2, #43	; 0x2b
    c634:	e92d4010 	push	{r4, lr}
    c638:	e59f1004 	ldr	r1, [pc, #4]	; c644 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x14>
    c63c:	e59f0004 	ldr	r0, [pc, #4]	; c648 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x18>
    c640:	eb00603b 	bl	24734 <assertion_failed>
    c644:	0003db9c 	.word	0x0003db9c
    c648:	0003e11c 	.word	0x0003e11c

0000c64c <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
    c64c:	e3a02031 	mov	r2, #49	; 0x31
    c650:	e92d4010 	push	{r4, lr}
    c654:	e59f1004 	ldr	r1, [pc, #4]	; c660 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x14>
    c658:	e59f0004 	ldr	r0, [pc, #4]	; c664 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x18>
    c65c:	eb006034 	bl	24734 <assertion_failed>
    c660:	0003db9c 	.word	0x0003db9c
    c664:	0003e11c 	.word	0x0003e11c

0000c668 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()>:
    c668:	e92d4030 	push	{r4, r5, lr}
    c66c:	e24dd014 	sub	sp, sp, #20
    c670:	e1a04000 	mov	r4, r0
    c674:	e59f1054 	ldr	r1, [pc, #84]	; c6d0 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x68>
    c678:	e28d0004 	add	r0, sp, #4
    c67c:	eb000190 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c680:	e28d0004 	add	r0, sp, #4
    c684:	eb000197 	bl	cce8 <CDWHCIRegister::Read()>
    c688:	e59f5044 	ldr	r5, [pc, #68]	; c6d4 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x6c>
    c68c:	e5d43004 	ldrb	r3, [r4, #4]
    c690:	e2800001 	add	r0, r0, #1
    c694:	e0000005 	and	r0, r0, r5
    c698:	e3530000 	cmp	r3, #0
    c69c:	e1c400b6 	strh	r0, [r4, #6]
    c6a0:	0a000003 	beq	c6b4 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x4c>
    c6a4:	e28d0004 	add	r0, sp, #4
    c6a8:	eb00018d 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    c6ac:	e28dd014 	add	sp, sp, #20
    c6b0:	e8bd8030 	pop	{r4, r5, pc}
    c6b4:	e28d0004 	add	r0, sp, #4
    c6b8:	eb00018a 	bl	cce8 <CDWHCIRegister::Read()>
    c6bc:	e1d420b6 	ldrh	r2, [r4, #6]
    c6c0:	e0003005 	and	r3, r0, r5
    c6c4:	e1530002 	cmp	r3, r2
    c6c8:	1afffff9 	bne	c6b4 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x4c>
    c6cc:	eafffff4 	b	c6a4 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x3c>
    c6d0:	20980408 	.word	0x20980408
    c6d4:	00003fff 	.word	0x00003fff

0000c6d8 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>:
    c6d8:	e3a02901 	mov	r2, #16384	; 0x4000
    c6dc:	e59fc00c 	ldr	ip, [pc, #12]	; c6f0 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)+0x18>
    c6e0:	e5c01004 	strb	r1, [r0, #4]
    c6e4:	e580c000 	str	ip, [r0]
    c6e8:	e1c020b6 	strh	r2, [r0, #6]
    c6ec:	e12fff1e 	bx	lr
    c6f0:	0003dc0c 	.word	0x0003dc0c

0000c6f4 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>:
    c6f4:	e3500008 	cmp	r0, #8
    c6f8:	e92d4010 	push	{r4, lr}
    c6fc:	1a000005 	bne	c718 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x24>
    c700:	e59f3030 	ldr	r3, [pc, #48]	; c738 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x44>
    c704:	e5930000 	ldr	r0, [r3]
    c708:	e3500000 	cmp	r0, #0
    c70c:	0a000005 	beq	c728 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x34>
    c710:	e8bd4010 	pop	{r4, lr}
    c714:	ea006108 	b	24b3c <CClassAllocator::Allocate()>
    c718:	e3a0205a 	mov	r2, #90	; 0x5a
    c71c:	e59f1018 	ldr	r1, [pc, #24]	; c73c <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x48>
    c720:	e59f0018 	ldr	r0, [pc, #24]	; c740 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x4c>
    c724:	eb006002 	bl	24734 <assertion_failed>
    c728:	e3a0205a 	mov	r2, #90	; 0x5a
    c72c:	e59f1008 	ldr	r1, [pc, #8]	; c73c <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x48>
    c730:	e59f000c 	ldr	r0, [pc, #12]	; c744 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x50>
    c734:	eb005ffe 	bl	24734 <assertion_failed>
    c738:	0004c50c 	.word	0x0004c50c
    c73c:	0003db9c 	.word	0x0003db9c
    c740:	0003dbb8 	.word	0x0003dbb8
    c744:	0003db30 	.word	0x0003db30

0000c748 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>:
    c748:	e3510008 	cmp	r1, #8
    c74c:	e92d4010 	push	{r4, lr}
    c750:	1a000006 	bne	c770 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x28>
    c754:	e59f3034 	ldr	r3, [pc, #52]	; c790 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x48>
    c758:	e1a01000 	mov	r1, r0
    c75c:	e5930000 	ldr	r0, [r3]
    c760:	e3500000 	cmp	r0, #0
    c764:	0a000005 	beq	c780 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x38>
    c768:	e8bd4010 	pop	{r4, lr}
    c76c:	ea00612d 	b	24c28 <CClassAllocator::Free(void*)>
    c770:	e3a0205a 	mov	r2, #90	; 0x5a
    c774:	e59f1018 	ldr	r1, [pc, #24]	; c794 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x4c>
    c778:	e59f0018 	ldr	r0, [pc, #24]	; c798 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x50>
    c77c:	eb005fec 	bl	24734 <assertion_failed>
    c780:	e3a0205a 	mov	r2, #90	; 0x5a
    c784:	e59f1008 	ldr	r1, [pc, #8]	; c794 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x4c>
    c788:	e59f000c 	ldr	r0, [pc, #12]	; c79c <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x54>
    c78c:	eb005fe8 	bl	24734 <assertion_failed>
    c790:	0004c50c 	.word	0x0004c50c
    c794:	0003db9c 	.word	0x0003db9c
    c798:	0003dbb8 	.word	0x0003dbb8
    c79c:	0003db30 	.word	0x0003db30

0000c7a0 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    c7a0:	e92d4010 	push	{r4, lr}
    c7a4:	e1a04000 	mov	r4, r0
    c7a8:	e3a01008 	mov	r1, #8
    c7ac:	ebffffe5 	bl	c748 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>
    c7b0:	e1a00004 	mov	r0, r4
    c7b4:	e8bd8010 	pop	{r4, pc}

0000c7b8 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)>:
    c7b8:	e92d4070 	push	{r4, r5, r6, lr}
    c7bc:	e59f6040 	ldr	r6, [pc, #64]	; c804 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x4c>
    c7c0:	e5963000 	ldr	r3, [r6]
    c7c4:	e3530000 	cmp	r3, #0
    c7c8:	1a000009 	bne	c7f4 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x3c>
    c7cc:	e1a04000 	mov	r4, r0
    c7d0:	e3a0001c 	mov	r0, #28
    c7d4:	eb0079dd 	bl	2af50 <operator new(unsigned int)>
    c7d8:	e1a05000 	mov	r5, r0
    c7dc:	e1a02004 	mov	r2, r4
    c7e0:	e3a01008 	mov	r1, #8
    c7e4:	e59f301c 	ldr	r3, [pc, #28]	; c808 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x50>
    c7e8:	eb0060ba 	bl	24ad8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    c7ec:	e5865000 	str	r5, [r6]
    c7f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c7f4:	e3a0205a 	mov	r2, #90	; 0x5a
    c7f8:	e59f100c 	ldr	r1, [pc, #12]	; c80c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x54>
    c7fc:	e59f000c 	ldr	r0, [pc, #12]	; c810 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x58>
    c800:	eb005fcb 	bl	24734 <assertion_failed>
    c804:	0004c50c 	.word	0x0004c50c
    c808:	0003dbe8 	.word	0x0003dbe8
    c80c:	0003db9c 	.word	0x0003db9c
    c810:	0003db44 	.word	0x0003db44

0000c814 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>:
    c814:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c818:	e59f7054 	ldr	r7, [pc, #84]	; c874 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    c81c:	e24dd00c 	sub	sp, sp, #12
    c820:	e5973000 	ldr	r3, [r7]
    c824:	e3530000 	cmp	r3, #0
    c828:	1a00000d 	bne	c864 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    c82c:	e1a05001 	mov	r5, r1
    c830:	e1a04000 	mov	r4, r0
    c834:	e3a0001c 	mov	r0, #28
    c838:	eb0079c4 	bl	2af50 <operator new(unsigned int)>
    c83c:	e59f1034 	ldr	r1, [pc, #52]	; c878 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    c840:	e1a03005 	mov	r3, r5
    c844:	e58d1000 	str	r1, [sp]
    c848:	e1a02004 	mov	r2, r4
    c84c:	e3a01008 	mov	r1, #8
    c850:	e1a06000 	mov	r6, r0
    c854:	eb0060ab 	bl	24b08 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c858:	e5876000 	str	r6, [r7]
    c85c:	e28dd00c 	add	sp, sp, #12
    c860:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c864:	e3a0205a 	mov	r2, #90	; 0x5a
    c868:	e59f100c 	ldr	r1, [pc, #12]	; c87c <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    c86c:	e59f000c 	ldr	r0, [pc, #12]	; c880 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    c870:	eb005faf 	bl	24734 <assertion_failed>
    c874:	0004c50c 	.word	0x0004c50c
    c878:	0003dbe8 	.word	0x0003dbe8
    c87c:	0003db9c 	.word	0x0003db9c
    c880:	0003db44 	.word	0x0003db44

0000c884 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    c884:	e12fff1e 	bx	lr

0000c888 <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
    c888:	e3a02901 	mov	r2, #16384	; 0x4000
    c88c:	e3a03000 	mov	r3, #0
    c890:	e1c021b0 	strh	r2, [r0, #16]
    c894:	e5803008 	str	r3, [r0, #8]
    c898:	e12fff1e 	bx	lr

0000c89c <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
    c89c:	e1d001b0 	ldrh	r0, [r0, #16]
    c8a0:	e2000001 	and	r0, r0, #1
    c8a4:	e12fff1e 	bx	lr

0000c8a8 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()>:
    c8a8:	e92d4010 	push	{r4, lr}
    c8ac:	e1a04000 	mov	r4, r0
    c8b0:	e24dd010 	sub	sp, sp, #16
    c8b4:	e59f1058 	ldr	r1, [pc, #88]	; c914 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x6c>
    c8b8:	e28d0004 	add	r0, sp, #4
    c8bc:	eb000100 	bl	ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c8c0:	e1d431b0 	ldrh	r3, [r4, #16]
    c8c4:	e3530901 	cmp	r3, #16384	; 0x4000
    c8c8:	0a000009 	beq	c8f4 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x4c>
    c8cc:	e28d0004 	add	r0, sp, #4
    c8d0:	eb000104 	bl	cce8 <CDWHCIRegister::Read()>
    c8d4:	e1d431b0 	ldrh	r3, [r4, #16]
    c8d8:	e2000007 	and	r0, r0, #7
    c8dc:	e1500003 	cmp	r0, r3
    c8e0:	1afffff9 	bne	c8cc <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
    c8e4:	e28d0004 	add	r0, sp, #4
    c8e8:	eb0000fd 	bl	cce4 <CDWHCIRegister::~CDWHCIRegister()>
    c8ec:	e28dd010 	add	sp, sp, #16
    c8f0:	e8bd8010 	pop	{r4, pc}
    c8f4:	e28d0004 	add	r0, sp, #4
    c8f8:	eb0000fa 	bl	cce8 <CDWHCIRegister::Read()>
    c8fc:	e2800001 	add	r0, r0, #1
    c900:	e2003007 	and	r3, r0, #7
    c904:	e3530006 	cmp	r3, #6
    c908:	03a03007 	moveq	r3, #7
    c90c:	e1c431b0 	strh	r3, [r4, #16]
    c910:	eaffffed 	b	c8cc <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
    c914:	20980408 	.word	0x20980408

0000c918 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
    c918:	e5903008 	ldr	r3, [r0, #8]
    c91c:	e92d4010 	push	{r4, lr}
    c920:	e3530003 	cmp	r3, #3
    c924:	0a000016 	beq	c984 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x6c>
    c928:	8a00000f 	bhi	c96c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x54>
    c92c:	e3530001 	cmp	r3, #1
    c930:	1a000022 	bne	c9c0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xa8>
    c934:	e3a01002 	mov	r1, #2
    c938:	e1d021b0 	ldrh	r2, [r0, #16]
    c93c:	e5801008 	str	r1, [r0, #8]
    c940:	e3520901 	cmp	r2, #16384	; 0x4000
    c944:	0a000019 	beq	c9b0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x98>
    c948:	e3520005 	cmp	r2, #5
    c94c:	13a01003 	movne	r1, #3
    c950:	03a01002 	moveq	r1, #2
    c954:	e2822002 	add	r2, r2, #2
    c958:	e2022007 	and	r2, r2, #7
    c95c:	e1c021b0 	strh	r2, [r0, #16]
    c960:	e580100c 	str	r1, [r0, #12]
    c964:	e1a00003 	mov	r0, r3
    c968:	e8bd8010 	pop	{r4, pc}
    c96c:	e2433004 	sub	r3, r3, #4
    c970:	e3530001 	cmp	r3, #1
    c974:	8a000011 	bhi	c9c0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xa8>
    c978:	e3a03000 	mov	r3, #0
    c97c:	e1a00003 	mov	r0, r3
    c980:	e8bd8010 	pop	{r4, pc}
    c984:	e1d031b0 	ldrh	r3, [r0, #16]
    c988:	e3530901 	cmp	r3, #16384	; 0x4000
    c98c:	12833001 	addne	r3, r3, #1
    c990:	12033007 	andne	r3, r3, #7
    c994:	11c031b0 	strhne	r3, [r0, #16]
    c998:	13a03001 	movne	r3, #1
    c99c:	1afffff6 	bne	c97c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x64>
    c9a0:	e3a02062 	mov	r2, #98	; 0x62
    c9a4:	e59f1024 	ldr	r1, [pc, #36]	; c9d0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xb8>
    c9a8:	e59f0024 	ldr	r0, [pc, #36]	; c9d4 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    c9ac:	eb005f60 	bl	24734 <assertion_failed>
    c9b0:	e3a02054 	mov	r2, #84	; 0x54
    c9b4:	e59f1014 	ldr	r1, [pc, #20]	; c9d0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xb8>
    c9b8:	e59f0014 	ldr	r0, [pc, #20]	; c9d4 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    c9bc:	eb005f5c 	bl	24734 <assertion_failed>
    c9c0:	e3a0206e 	mov	r2, #110	; 0x6e
    c9c4:	e59f1004 	ldr	r1, [pc, #4]	; c9d0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xb8>
    c9c8:	e59f0008 	ldr	r0, [pc, #8]	; c9d8 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc0>
    c9cc:	eb005f58 	bl	24734 <assertion_failed>
    c9d0:	0003dc28 	.word	0x0003dc28
    c9d4:	0003dc40 	.word	0x0003dc40
    c9d8:	0003e11c 	.word	0x0003e11c

0000c9dc <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
    c9dc:	e92d4010 	push	{r4, lr}
    c9e0:	e5903008 	ldr	r3, [r0, #8]
    c9e4:	e1a04000 	mov	r4, r0
    c9e8:	e3530000 	cmp	r3, #0
    c9ec:	e24dd010 	sub	sp, sp, #16
    c9f0:	0a000010 	beq	ca38 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x5c>
    c9f4:	e2433002 	sub	r3, r3, #2
    c9f8:	e3530001 	cmp	r3, #1
    c9fc:	8a000022 	bhi	ca8c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xb0>
    ca00:	e3110001 	tst	r1, #1
    ca04:	13a03004 	movne	r3, #4
    ca08:	15803008 	strne	r3, [r0, #8]
    ca0c:	1a000007 	bne	ca30 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    ca10:	e3110060 	tst	r1, #96	; 0x60
    ca14:	1a00000f 	bne	ca58 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x7c>
    ca18:	e3110010 	tst	r1, #16
    ca1c:	0a00001e 	beq	ca9c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xc0>
    ca20:	e59f00a4 	ldr	r0, [pc, #164]	; cacc <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf0>
    ca24:	eb0074e0 	bl	29dac <CTimer::SimpleusDelay(unsigned int)>
    ca28:	e3a03005 	mov	r3, #5
    ca2c:	e5843008 	str	r3, [r4, #8]
    ca30:	e28dd010 	add	sp, sp, #16
    ca34:	e8bd8010 	pop	{r4, pc}
    ca38:	e3110020 	tst	r1, #32
    ca3c:	13a03001 	movne	r3, #1
    ca40:	15803008 	strne	r3, [r0, #8]
    ca44:	1afffff9 	bne	ca30 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    ca48:	e3a0207a 	mov	r2, #122	; 0x7a
    ca4c:	e59f107c 	ldr	r1, [pc, #124]	; cad0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    ca50:	e59f007c 	ldr	r0, [pc, #124]	; cad4 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
    ca54:	eb005f36 	bl	24734 <assertion_failed>
    ca58:	e590300c 	ldr	r3, [r0, #12]
    ca5c:	e3530000 	cmp	r3, #0
    ca60:	e2433001 	sub	r3, r3, #1
    ca64:	e580300c 	str	r3, [r0, #12]
    ca68:	13a03003 	movne	r3, #3
    ca6c:	15803008 	strne	r3, [r0, #8]
    ca70:	1affffee 	bne	ca30 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    ca74:	e3a03005 	mov	r3, #5
    ca78:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    ca7c:	e5843008 	str	r3, [r4, #8]
    ca80:	e28dd010 	add	sp, sp, #16
    ca84:	e8bd4010 	pop	{r4, lr}
    ca88:	ea0074c7 	b	29dac <CTimer::SimpleusDelay(unsigned int)>
    ca8c:	e3a020a6 	mov	r2, #166	; 0xa6
    ca90:	e59f1038 	ldr	r1, [pc, #56]	; cad0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    ca94:	e59f003c 	ldr	r0, [pc, #60]	; cad8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xfc>
    ca98:	eb005f25 	bl	24734 <assertion_failed>
    ca9c:	e58d100c 	str	r1, [sp, #12]
    caa0:	eb00680b 	bl	26ad4 <CLogger::Get()>
    caa4:	e59d100c 	ldr	r1, [sp, #12]
    caa8:	e3a02001 	mov	r2, #1
    caac:	e58d1000 	str	r1, [sp]
    cab0:	e59f3024 	ldr	r3, [pc, #36]	; cadc <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x100>
    cab4:	e59f1024 	ldr	r1, [pc, #36]	; cae0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x104>
    cab8:	eb006747 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cabc:	e3a020a1 	mov	r2, #161	; 0xa1
    cac0:	e59f1008 	ldr	r1, [pc, #8]	; cad0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    cac4:	e59f000c 	ldr	r0, [pc, #12]	; cad8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xfc>
    cac8:	eb005f19 	bl	24734 <assertion_failed>
    cacc:	00000271 	.word	0x00000271
    cad0:	0003dc28 	.word	0x0003dc28
    cad4:	0003dabc 	.word	0x0003dabc
    cad8:	0003e11c 	.word	0x0003e11c
    cadc:	0003dae0 	.word	0x0003dae0
    cae0:	0003daf4 	.word	0x0003daf4

0000cae4 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
    cae4:	e59f303c 	ldr	r3, [pc, #60]	; cb28 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x44>
    cae8:	e92d4010 	push	{r4, lr}
    caec:	e5803000 	str	r3, [r0]
    caf0:	e1a04000 	mov	r4, r0
    caf4:	eb0074da 	bl	29e64 <CTimer::Get()>
    caf8:	e3a02006 	mov	r2, #6
    cafc:	e3a03901 	mov	r3, #16384	; 0x4000
    cb00:	e3500000 	cmp	r0, #0
    cb04:	e9840005 	stmib	r4, {r0, r2}
    cb08:	e1c431b0 	strh	r3, [r4, #16]
    cb0c:	0a000001 	beq	cb18 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x34>
    cb10:	e1a00004 	mov	r0, r4
    cb14:	e8bd8010 	pop	{r4, pc}
    cb18:	e3a02034 	mov	r2, #52	; 0x34
    cb1c:	e59f1008 	ldr	r1, [pc, #8]	; cb2c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x48>
    cb20:	e59f0008 	ldr	r0, [pc, #8]	; cb30 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x4c>
    cb24:	eb005f02 	bl	24734 <assertion_failed>
    cb28:	0003dcb8 	.word	0x0003dcb8
    cb2c:	0003dc28 	.word	0x0003dc28
    cb30:	0003d568 	.word	0x0003d568

0000cb34 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>:
    cb34:	e3500014 	cmp	r0, #20
    cb38:	e92d4010 	push	{r4, lr}
    cb3c:	1a000005 	bne	cb58 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x24>
    cb40:	e59f3030 	ldr	r3, [pc, #48]	; cb78 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x44>
    cb44:	e5930000 	ldr	r0, [r3]
    cb48:	e3500000 	cmp	r0, #0
    cb4c:	0a000005 	beq	cb68 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x34>
    cb50:	e8bd4010 	pop	{r4, lr}
    cb54:	ea005ff8 	b	24b3c <CClassAllocator::Allocate()>
    cb58:	e3a020e2 	mov	r2, #226	; 0xe2
    cb5c:	e59f1018 	ldr	r1, [pc, #24]	; cb7c <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x48>
    cb60:	e59f0018 	ldr	r0, [pc, #24]	; cb80 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x4c>
    cb64:	eb005ef2 	bl	24734 <assertion_failed>
    cb68:	e3a020e2 	mov	r2, #226	; 0xe2
    cb6c:	e59f1008 	ldr	r1, [pc, #8]	; cb7c <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x48>
    cb70:	e59f000c 	ldr	r0, [pc, #12]	; cb84 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x50>
    cb74:	eb005eee 	bl	24734 <assertion_failed>
    cb78:	0004c510 	.word	0x0004c510
    cb7c:	0003dc28 	.word	0x0003dc28
    cb80:	0003dc60 	.word	0x0003dc60
    cb84:	0003db30 	.word	0x0003db30

0000cb88 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>:
    cb88:	e3510014 	cmp	r1, #20
    cb8c:	e92d4010 	push	{r4, lr}
    cb90:	1a000006 	bne	cbb0 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x28>
    cb94:	e59f3034 	ldr	r3, [pc, #52]	; cbd0 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x48>
    cb98:	e1a01000 	mov	r1, r0
    cb9c:	e5930000 	ldr	r0, [r3]
    cba0:	e3500000 	cmp	r0, #0
    cba4:	0a000005 	beq	cbc0 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x38>
    cba8:	e8bd4010 	pop	{r4, lr}
    cbac:	ea00601d 	b	24c28 <CClassAllocator::Free(void*)>
    cbb0:	e3a020e2 	mov	r2, #226	; 0xe2
    cbb4:	e59f1018 	ldr	r1, [pc, #24]	; cbd4 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x4c>
    cbb8:	e59f0018 	ldr	r0, [pc, #24]	; cbd8 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x50>
    cbbc:	eb005edc 	bl	24734 <assertion_failed>
    cbc0:	e3a020e2 	mov	r2, #226	; 0xe2
    cbc4:	e59f1008 	ldr	r1, [pc, #8]	; cbd4 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x4c>
    cbc8:	e59f000c 	ldr	r0, [pc, #12]	; cbdc <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x54>
    cbcc:	eb005ed8 	bl	24734 <assertion_failed>
    cbd0:	0004c510 	.word	0x0004c510
    cbd4:	0003dc28 	.word	0x0003dc28
    cbd8:	0003dc60 	.word	0x0003dc60
    cbdc:	0003db30 	.word	0x0003db30

0000cbe0 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    cbe0:	e92d4010 	push	{r4, lr}
    cbe4:	e1a04000 	mov	r4, r0
    cbe8:	e3a01014 	mov	r1, #20
    cbec:	ebffffe5 	bl	cb88 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>
    cbf0:	e1a00004 	mov	r0, r4
    cbf4:	e8bd8010 	pop	{r4, pc}

0000cbf8 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)>:
    cbf8:	e92d4070 	push	{r4, r5, r6, lr}
    cbfc:	e59f6040 	ldr	r6, [pc, #64]	; cc44 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x4c>
    cc00:	e5963000 	ldr	r3, [r6]
    cc04:	e3530000 	cmp	r3, #0
    cc08:	1a000009 	bne	cc34 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x3c>
    cc0c:	e1a04000 	mov	r4, r0
    cc10:	e3a0001c 	mov	r0, #28
    cc14:	eb0078cd 	bl	2af50 <operator new(unsigned int)>
    cc18:	e1a05000 	mov	r5, r0
    cc1c:	e1a02004 	mov	r2, r4
    cc20:	e3a01014 	mov	r1, #20
    cc24:	e59f301c 	ldr	r3, [pc, #28]	; cc48 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x50>
    cc28:	eb005faa 	bl	24ad8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    cc2c:	e5865000 	str	r5, [r6]
    cc30:	e8bd8070 	pop	{r4, r5, r6, pc}
    cc34:	e3a020e2 	mov	r2, #226	; 0xe2
    cc38:	e59f100c 	ldr	r1, [pc, #12]	; cc4c <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x54>
    cc3c:	e59f000c 	ldr	r0, [pc, #12]	; cc50 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x58>
    cc40:	eb005ebb 	bl	24734 <assertion_failed>
    cc44:	0004c510 	.word	0x0004c510
    cc48:	0003dc90 	.word	0x0003dc90
    cc4c:	0003dc28 	.word	0x0003dc28
    cc50:	0003db44 	.word	0x0003db44

0000cc54 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    cc54:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    cc58:	e59f7054 	ldr	r7, [pc, #84]	; ccb4 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    cc5c:	e24dd00c 	sub	sp, sp, #12
    cc60:	e5973000 	ldr	r3, [r7]
    cc64:	e3530000 	cmp	r3, #0
    cc68:	1a00000d 	bne	cca4 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    cc6c:	e1a05001 	mov	r5, r1
    cc70:	e1a04000 	mov	r4, r0
    cc74:	e3a0001c 	mov	r0, #28
    cc78:	eb0078b4 	bl	2af50 <operator new(unsigned int)>
    cc7c:	e59f1034 	ldr	r1, [pc, #52]	; ccb8 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    cc80:	e1a03005 	mov	r3, r5
    cc84:	e58d1000 	str	r1, [sp]
    cc88:	e1a02004 	mov	r2, r4
    cc8c:	e3a01014 	mov	r1, #20
    cc90:	e1a06000 	mov	r6, r0
    cc94:	eb005f9b 	bl	24b08 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    cc98:	e5876000 	str	r6, [r7]
    cc9c:	e28dd00c 	add	sp, sp, #12
    cca0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    cca4:	e3a020e2 	mov	r2, #226	; 0xe2
    cca8:	e59f100c 	ldr	r1, [pc, #12]	; ccbc <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    ccac:	e59f000c 	ldr	r0, [pc, #12]	; ccc0 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    ccb0:	eb005e9f 	bl	24734 <assertion_failed>
    ccb4:	0004c510 	.word	0x0004c510
    ccb8:	0003dc90 	.word	0x0003dc90
    ccbc:	0003dc28 	.word	0x0003dc28
    ccc0:	0003db44 	.word	0x0003db44

0000ccc4 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
    ccc4:	e3a02000 	mov	r2, #0
    ccc8:	e5801004 	str	r1, [r0, #4]
    cccc:	e5c02000 	strb	r2, [r0]
    ccd0:	e12fff1e 	bx	lr

0000ccd4 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
    ccd4:	e3a0c001 	mov	ip, #1
    ccd8:	e9800006 	stmib	r0, {r1, r2}
    ccdc:	e5c0c000 	strb	ip, [r0]
    cce0:	e12fff1e 	bx	lr

0000cce4 <CDWHCIRegister::~CDWHCIRegister()>:
    cce4:	e12fff1e 	bx	lr

0000cce8 <CDWHCIRegister::Read()>:
    cce8:	e3a02001 	mov	r2, #1
    ccec:	e5903004 	ldr	r3, [r0, #4]
    ccf0:	e5933000 	ldr	r3, [r3]
    ccf4:	e5c02000 	strb	r2, [r0]
    ccf8:	e5803008 	str	r3, [r0, #8]
    ccfc:	e1a00003 	mov	r0, r3
    cd00:	e12fff1e 	bx	lr

0000cd04 <CDWHCIRegister::Write()>:
    cd04:	e5d03000 	ldrb	r3, [r0]
    cd08:	e3530000 	cmp	r3, #0
    cd0c:	0a000003 	beq	cd20 <CDWHCIRegister::Write()+0x1c>
    cd10:	e5902008 	ldr	r2, [r0, #8]
    cd14:	e5903004 	ldr	r3, [r0, #4]
    cd18:	e5832000 	str	r2, [r3]
    cd1c:	e12fff1e 	bx	lr
    cd20:	e3a02035 	mov	r2, #53	; 0x35
    cd24:	e92d4010 	push	{r4, lr}
    cd28:	e59f1004 	ldr	r1, [pc, #4]	; cd34 <CDWHCIRegister::Write()+0x30>
    cd2c:	e59f0004 	ldr	r0, [pc, #4]	; cd38 <CDWHCIRegister::Write()+0x34>
    cd30:	eb005e7f 	bl	24734 <assertion_failed>
    cd34:	0003dcd4 	.word	0x0003dcd4
    cd38:	0003dce8 	.word	0x0003dce8

0000cd3c <CDWHCIRegister::Get() const>:
    cd3c:	e5d03000 	ldrb	r3, [r0]
    cd40:	e3530000 	cmp	r3, #0
    cd44:	0a000001 	beq	cd50 <CDWHCIRegister::Get() const+0x14>
    cd48:	e5900008 	ldr	r0, [r0, #8]
    cd4c:	e12fff1e 	bx	lr
    cd50:	e3a0203b 	mov	r2, #59	; 0x3b
    cd54:	e92d4010 	push	{r4, lr}
    cd58:	e59f1004 	ldr	r1, [pc, #4]	; cd64 <CDWHCIRegister::Get() const+0x28>
    cd5c:	e59f0004 	ldr	r0, [pc, #4]	; cd68 <CDWHCIRegister::Get() const+0x2c>
    cd60:	eb005e73 	bl	24734 <assertion_failed>
    cd64:	0003dcd4 	.word	0x0003dcd4
    cd68:	0003dce8 	.word	0x0003dce8

0000cd6c <CDWHCIRegister::Set(unsigned int)>:
    cd6c:	e3a03001 	mov	r3, #1
    cd70:	e5801008 	str	r1, [r0, #8]
    cd74:	e5c03000 	strb	r3, [r0]
    cd78:	e12fff1e 	bx	lr

0000cd7c <CDWHCIRegister::IsSet(unsigned int) const>:
    cd7c:	e5d03000 	ldrb	r3, [r0]
    cd80:	e3530000 	cmp	r3, #0
    cd84:	0a000004 	beq	cd9c <CDWHCIRegister::IsSet(unsigned int) const+0x20>
    cd88:	e5903008 	ldr	r3, [r0, #8]
    cd8c:	e1110003 	tst	r1, r3
    cd90:	13a00001 	movne	r0, #1
    cd94:	03a00000 	moveq	r0, #0
    cd98:	e12fff1e 	bx	lr
    cd9c:	e3a02047 	mov	r2, #71	; 0x47
    cda0:	e92d4010 	push	{r4, lr}
    cda4:	e59f1004 	ldr	r1, [pc, #4]	; cdb0 <CDWHCIRegister::IsSet(unsigned int) const+0x34>
    cda8:	e59f0004 	ldr	r0, [pc, #4]	; cdb4 <CDWHCIRegister::IsSet(unsigned int) const+0x38>
    cdac:	eb005e60 	bl	24734 <assertion_failed>
    cdb0:	0003dcd4 	.word	0x0003dcd4
    cdb4:	0003dce8 	.word	0x0003dce8

0000cdb8 <CDWHCIRegister::And(unsigned int)>:
    cdb8:	e5d03000 	ldrb	r3, [r0]
    cdbc:	e3530000 	cmp	r3, #0
    cdc0:	0a000003 	beq	cdd4 <CDWHCIRegister::And(unsigned int)+0x1c>
    cdc4:	e5903008 	ldr	r3, [r0, #8]
    cdc8:	e0011003 	and	r1, r1, r3
    cdcc:	e5801008 	str	r1, [r0, #8]
    cdd0:	e12fff1e 	bx	lr
    cdd4:	e3a0204d 	mov	r2, #77	; 0x4d
    cdd8:	e92d4010 	push	{r4, lr}
    cddc:	e59f1004 	ldr	r1, [pc, #4]	; cde8 <CDWHCIRegister::And(unsigned int)+0x30>
    cde0:	e59f0004 	ldr	r0, [pc, #4]	; cdec <CDWHCIRegister::And(unsigned int)+0x34>
    cde4:	eb005e52 	bl	24734 <assertion_failed>
    cde8:	0003dcd4 	.word	0x0003dcd4
    cdec:	0003dce8 	.word	0x0003dce8

0000cdf0 <CDWHCIRegister::Or(unsigned int)>:
    cdf0:	e5d03000 	ldrb	r3, [r0]
    cdf4:	e3530000 	cmp	r3, #0
    cdf8:	0a000003 	beq	ce0c <CDWHCIRegister::Or(unsigned int)+0x1c>
    cdfc:	e5903008 	ldr	r3, [r0, #8]
    ce00:	e1831001 	orr	r1, r3, r1
    ce04:	e5801008 	str	r1, [r0, #8]
    ce08:	e12fff1e 	bx	lr
    ce0c:	e3a02053 	mov	r2, #83	; 0x53
    ce10:	e92d4010 	push	{r4, lr}
    ce14:	e59f1004 	ldr	r1, [pc, #4]	; ce20 <CDWHCIRegister::Or(unsigned int)+0x30>
    ce18:	e59f0004 	ldr	r0, [pc, #4]	; ce24 <CDWHCIRegister::Or(unsigned int)+0x34>
    ce1c:	eb005e44 	bl	24734 <assertion_failed>
    ce20:	0003dcd4 	.word	0x0003dcd4
    ce24:	0003dce8 	.word	0x0003dce8

0000ce28 <CDWHCIRegister::ClearBit(unsigned int)>:
    ce28:	e5d03000 	ldrb	r3, [r0]
    ce2c:	e92d4010 	push	{r4, lr}
    ce30:	e3530000 	cmp	r3, #0
    ce34:	0a000006 	beq	ce54 <CDWHCIRegister::ClearBit(unsigned int)+0x2c>
    ce38:	e351001f 	cmp	r1, #31
    ce3c:	8a000008 	bhi	ce64 <CDWHCIRegister::ClearBit(unsigned int)+0x3c>
    ce40:	e3a02001 	mov	r2, #1
    ce44:	e5903008 	ldr	r3, [r0, #8]
    ce48:	e1c31112 	bic	r1, r3, r2, lsl r1
    ce4c:	e5801008 	str	r1, [r0, #8]
    ce50:	e8bd8010 	pop	{r4, pc}
    ce54:	e3a02059 	mov	r2, #89	; 0x59
    ce58:	e59f1014 	ldr	r1, [pc, #20]	; ce74 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    ce5c:	e59f0014 	ldr	r0, [pc, #20]	; ce78 <CDWHCIRegister::ClearBit(unsigned int)+0x50>
    ce60:	eb005e33 	bl	24734 <assertion_failed>
    ce64:	e3a0205a 	mov	r2, #90	; 0x5a
    ce68:	e59f1004 	ldr	r1, [pc, #4]	; ce74 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    ce6c:	e59f0008 	ldr	r0, [pc, #8]	; ce7c <CDWHCIRegister::ClearBit(unsigned int)+0x54>
    ce70:	eb005e2f 	bl	24734 <assertion_failed>
    ce74:	0003dcd4 	.word	0x0003dcd4
    ce78:	0003dce8 	.word	0x0003dce8
    ce7c:	0003dcf4 	.word	0x0003dcf4

0000ce80 <CDWHCIRegister::SetBit(unsigned int)>:
    ce80:	e5d03000 	ldrb	r3, [r0]
    ce84:	e92d4010 	push	{r4, lr}
    ce88:	e3530000 	cmp	r3, #0
    ce8c:	0a000006 	beq	ceac <CDWHCIRegister::SetBit(unsigned int)+0x2c>
    ce90:	e351001f 	cmp	r1, #31
    ce94:	8a000008 	bhi	cebc <CDWHCIRegister::SetBit(unsigned int)+0x3c>
    ce98:	e3a02001 	mov	r2, #1
    ce9c:	e5903008 	ldr	r3, [r0, #8]
    cea0:	e1831112 	orr	r1, r3, r2, lsl r1
    cea4:	e5801008 	str	r1, [r0, #8]
    cea8:	e8bd8010 	pop	{r4, pc}
    ceac:	e3a02060 	mov	r2, #96	; 0x60
    ceb0:	e59f1014 	ldr	r1, [pc, #20]	; cecc <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    ceb4:	e59f0014 	ldr	r0, [pc, #20]	; ced0 <CDWHCIRegister::SetBit(unsigned int)+0x50>
    ceb8:	eb005e1d 	bl	24734 <assertion_failed>
    cebc:	e3a02061 	mov	r2, #97	; 0x61
    cec0:	e59f1004 	ldr	r1, [pc, #4]	; cecc <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    cec4:	e59f0008 	ldr	r0, [pc, #8]	; ced4 <CDWHCIRegister::SetBit(unsigned int)+0x54>
    cec8:	eb005e19 	bl	24734 <assertion_failed>
    cecc:	0003dcd4 	.word	0x0003dcd4
    ced0:	0003dce8 	.word	0x0003dce8
    ced4:	0003dcf4 	.word	0x0003dcf4

0000ced8 <CDWHCIRegister::ClearAll()>:
    ced8:	e3a02000 	mov	r2, #0
    cedc:	e3a03001 	mov	r3, #1
    cee0:	e5802008 	str	r2, [r0, #8]
    cee4:	e5c03000 	strb	r3, [r0]
    cee8:	e12fff1e 	bx	lr

0000ceec <CDWHCIRegister::SetAll()>:
    ceec:	e3e02000 	mvn	r2, #0
    cef0:	e3a03001 	mov	r3, #1
    cef4:	e5802008 	str	r2, [r0, #8]
    cef8:	e5c03000 	strb	r3, [r0]
    cefc:	e12fff1e 	bx	lr

0000cf00 <CDWHCIRegister::Dump() const>:
    cf00:	e92d4010 	push	{r4, lr}
    cf04:	e5d03000 	ldrb	r3, [r0]
    cf08:	e1a04000 	mov	r4, r0
    cf0c:	e3530000 	cmp	r3, #0
    cf10:	e24dd008 	sub	sp, sp, #8
    cf14:	0a00000c 	beq	cf4c <CDWHCIRegister::Dump() const+0x4c>
    cf18:	eb0066ed 	bl	26ad4 <CLogger::Get()>
    cf1c:	e5943004 	ldr	r3, [r4, #4]
    cf20:	e5942008 	ldr	r2, [r4, #8]
    cf24:	e1a03a03 	lsl	r3, r3, #20
    cf28:	e1a03a23 	lsr	r3, r3, #20
    cf2c:	e58d3000 	str	r3, [sp]
    cf30:	e58d2004 	str	r2, [sp, #4]
    cf34:	e59f303c 	ldr	r3, [pc, #60]	; cf78 <CDWHCIRegister::Dump() const+0x78>
    cf38:	e3a02004 	mov	r2, #4
    cf3c:	e59f1038 	ldr	r1, [pc, #56]	; cf7c <CDWHCIRegister::Dump() const+0x7c>
    cf40:	eb006625 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cf44:	e28dd008 	add	sp, sp, #8
    cf48:	e8bd8010 	pop	{r4, pc}
    cf4c:	eb0066e0 	bl	26ad4 <CLogger::Get()>
    cf50:	e5942004 	ldr	r2, [r4, #4]
    cf54:	e59f3024 	ldr	r3, [pc, #36]	; cf80 <CDWHCIRegister::Dump() const+0x80>
    cf58:	e1a02a02 	lsl	r2, r2, #20
    cf5c:	e1a02a22 	lsr	r2, r2, #20
    cf60:	e58d2000 	str	r2, [sp]
    cf64:	e59f1010 	ldr	r1, [pc, #16]	; cf7c <CDWHCIRegister::Dump() const+0x7c>
    cf68:	e3a02004 	mov	r2, #4
    cf6c:	eb00661a 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cf70:	e28dd008 	add	sp, sp, #8
    cf74:	e8bd8010 	pop	{r4, pc}
    cf78:	0003dd10 	.word	0x0003dd10
    cf7c:	0003dd2c 	.word	0x0003dd2c
    cf80:	0003dd34 	.word	0x0003dd34

0000cf84 <CDWHCIRootPort::~CDWHCIRootPort()>:
    cf84:	e92d4010 	push	{r4, lr}
    cf88:	e1a04000 	mov	r4, r0
    cf8c:	e5900008 	ldr	r0, [r0, #8]
    cf90:	e59f301c 	ldr	r3, [pc, #28]	; cfb4 <CDWHCIRootPort::~CDWHCIRootPort()+0x30>
    cf94:	e3500000 	cmp	r0, #0
    cf98:	e5843000 	str	r3, [r4]
    cf9c:	0a000002 	beq	cfac <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    cfa0:	e5903000 	ldr	r3, [r0]
    cfa4:	e5933004 	ldr	r3, [r3, #4]
    cfa8:	e12fff33 	blx	r3
    cfac:	e1a00004 	mov	r0, r4
    cfb0:	e8bd8010 	pop	{r4, pc}
    cfb4:	0003de20 	.word	0x0003de20

0000cfb8 <CDWHCIRootPort::~CDWHCIRootPort()>:
    cfb8:	e92d4010 	push	{r4, lr}
    cfbc:	e1a04000 	mov	r4, r0
    cfc0:	e5900008 	ldr	r0, [r0, #8]
    cfc4:	e59f3028 	ldr	r3, [pc, #40]	; cff4 <CDWHCIRootPort::~CDWHCIRootPort()+0x3c>
    cfc8:	e3500000 	cmp	r0, #0
    cfcc:	e5843000 	str	r3, [r4]
    cfd0:	0a000002 	beq	cfe0 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    cfd4:	e5903000 	ldr	r3, [r0]
    cfd8:	e5933004 	ldr	r3, [r3, #4]
    cfdc:	e12fff33 	blx	r3
    cfe0:	e1a00004 	mov	r0, r4
    cfe4:	e3a0100c 	mov	r1, #12
    cfe8:	eb0077e6 	bl	2af88 <operator delete(void*, unsigned int)>
    cfec:	e1a00004 	mov	r0, r4
    cff0:	e8bd8010 	pop	{r4, pc}
    cff4:	0003de20 	.word	0x0003de20

0000cff8 <CDWHCIRootPort::RemoveDevice()>:
    cff8:	e92d4010 	push	{r4, lr}
    cffc:	e1a04000 	mov	r4, r0
    d000:	e5900004 	ldr	r0, [r0, #4]
    d004:	e3500000 	cmp	r0, #0
    d008:	0a00000b 	beq	d03c <CDWHCIRootPort::RemoveDevice()+0x44>
    d00c:	e3a01000 	mov	r1, #0
    d010:	ebfff361 	bl	9d9c <CDWHCIDevice::DisableRootPort(bool)>
    d014:	e5940008 	ldr	r0, [r4, #8]
    d018:	e3500000 	cmp	r0, #0
    d01c:	0a000002 	beq	d02c <CDWHCIRootPort::RemoveDevice()+0x34>
    d020:	e5903000 	ldr	r3, [r0]
    d024:	e5933004 	ldr	r3, [r3, #4]
    d028:	e12fff33 	blx	r3
    d02c:	e3a03000 	mov	r3, #0
    d030:	e3a00001 	mov	r0, #1
    d034:	e5843008 	str	r3, [r4, #8]
    d038:	e8bd8010 	pop	{r4, pc}
    d03c:	e3a0206d 	mov	r2, #109	; 0x6d
    d040:	e59f1004 	ldr	r1, [pc, #4]	; d04c <CDWHCIRootPort::RemoveDevice()+0x54>
    d044:	e59f0004 	ldr	r0, [pc, #4]	; d050 <CDWHCIRootPort::RemoveDevice()+0x58>
    d048:	eb005db9 	bl	24734 <assertion_failed>
    d04c:	0003dd54 	.word	0x0003dd54
    d050:	0003dd68 	.word	0x0003dd68

0000d054 <CDWHCIRootPort::ReScanDevices()>:
    d054:	e92d4010 	push	{r4, lr}
    d058:	e5904008 	ldr	r4, [r0, #8]
    d05c:	e3540000 	cmp	r4, #0
    d060:	0a000002 	beq	d070 <CDWHCIRootPort::ReScanDevices()+0x1c>
    d064:	e1a00004 	mov	r0, r4
    d068:	e8bd4010 	pop	{r4, lr}
    d06c:	ea0003fb 	b	e060 <CUSBDevice::ReScanDevices()>
    d070:	eb006697 	bl	26ad4 <CLogger::Get()>
    d074:	e3a02002 	mov	r2, #2
    d078:	e59f300c 	ldr	r3, [pc, #12]	; d08c <CDWHCIRootPort::ReScanDevices()+0x38>
    d07c:	e59f100c 	ldr	r1, [pc, #12]	; d090 <CDWHCIRootPort::ReScanDevices()+0x3c>
    d080:	eb0065d5 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d084:	e1a00004 	mov	r0, r4
    d088:	e8bd8010 	pop	{r4, pc}
    d08c:	0003dd78 	.word	0x0003dd78
    d090:	0003de30 	.word	0x0003de30

0000d094 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
    d094:	e3a02000 	mov	r2, #0
    d098:	e59fc024 	ldr	ip, [pc, #36]	; d0c4 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x30>
    d09c:	e1510002 	cmp	r1, r2
    d0a0:	e5801004 	str	r1, [r0, #4]
    d0a4:	e580c000 	str	ip, [r0]
    d0a8:	e5802008 	str	r2, [r0, #8]
    d0ac:	112fff1e 	bxne	lr
    d0b0:	e3a0201f 	mov	r2, #31
    d0b4:	e92d4010 	push	{r4, lr}
    d0b8:	e59f1008 	ldr	r1, [pc, #8]	; d0c8 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x34>
    d0bc:	e59f0008 	ldr	r0, [pc, #8]	; d0cc <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x38>
    d0c0:	eb005d9b 	bl	24734 <assertion_failed>
    d0c4:	0003de20 	.word	0x0003de20
    d0c8:	0003dd54 	.word	0x0003dd54
    d0cc:	0003dd68 	.word	0x0003dd68

0000d0d0 <CDWHCIRootPort::Initialize()>:
    d0d0:	e92d4070 	push	{r4, r5, r6, lr}
    d0d4:	e1a04000 	mov	r4, r0
    d0d8:	e5900004 	ldr	r0, [r0, #4]
    d0dc:	e3500000 	cmp	r0, #0
    d0e0:	0a00003d 	beq	d1dc <CDWHCIRootPort::Initialize()+0x10c>
    d0e4:	ebfff30a 	bl	9d14 <CDWHCIDevice::GetPortSpeed()>
    d0e8:	e3500004 	cmp	r0, #4
    d0ec:	e1a05000 	mov	r5, r0
    d0f0:	0a000031 	beq	d1bc <CDWHCIRootPort::Initialize()+0xec>
    d0f4:	e5943008 	ldr	r3, [r4, #8]
    d0f8:	e3530000 	cmp	r3, #0
    d0fc:	1a00003a 	bne	d1ec <CDWHCIRootPort::Initialize()+0x11c>
    d100:	e3a00058 	mov	r0, #88	; 0x58
    d104:	eb007791 	bl	2af50 <operator new(unsigned int)>
    d108:	e1a06000 	mov	r6, r0
    d10c:	e1a02005 	mov	r2, r5
    d110:	e1a03004 	mov	r3, r4
    d114:	e5941004 	ldr	r1, [r4, #4]
    d118:	eb000349 	bl	de44 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>
    d11c:	e1a00006 	mov	r0, r6
    d120:	e5846008 	str	r6, [r4, #8]
    d124:	eb0004f7 	bl	e508 <CUSBDevice::Initialize()>
    d128:	e3500000 	cmp	r0, #0
    d12c:	e5940008 	ldr	r0, [r4, #8]
    d130:	0a00000f 	beq	d174 <CDWHCIRootPort::Initialize()+0xa4>
    d134:	e5903000 	ldr	r3, [r0]
    d138:	e593300c 	ldr	r3, [r3, #12]
    d13c:	e12fff33 	blx	r3
    d140:	e2505000 	subs	r5, r0, #0
    d144:	0a000013 	beq	d198 <CDWHCIRootPort::Initialize()+0xc8>
    d148:	eb006661 	bl	26ad4 <CLogger::Get()>
    d14c:	e3a02004 	mov	r2, #4
    d150:	e59f30d4 	ldr	r3, [pc, #212]	; d22c <CDWHCIRootPort::Initialize()+0x15c>
    d154:	e59f10d4 	ldr	r1, [pc, #212]	; d230 <CDWHCIRootPort::Initialize()+0x160>
    d158:	eb00659f 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d15c:	e5940004 	ldr	r0, [r4, #4]
    d160:	ebfff2fe 	bl	9d60 <CDWHCIDevice::OvercurrentDetected()>
    d164:	e3500000 	cmp	r0, #0
    d168:	1a000023 	bne	d1fc <CDWHCIRootPort::Initialize()+0x12c>
    d16c:	e1a00005 	mov	r0, r5
    d170:	e8bd8070 	pop	{r4, r5, r6, pc}
    d174:	e3500000 	cmp	r0, #0
    d178:	0a000002 	beq	d188 <CDWHCIRootPort::Initialize()+0xb8>
    d17c:	e5903000 	ldr	r3, [r0]
    d180:	e5933004 	ldr	r3, [r3, #4]
    d184:	e12fff33 	blx	r3
    d188:	e3a05000 	mov	r5, #0
    d18c:	e1a00005 	mov	r0, r5
    d190:	e5845008 	str	r5, [r4, #8]
    d194:	e8bd8070 	pop	{r4, r5, r6, pc}
    d198:	eb00664d 	bl	26ad4 <CLogger::Get()>
    d19c:	e3a02002 	mov	r2, #2
    d1a0:	e59f308c 	ldr	r3, [pc, #140]	; d234 <CDWHCIRootPort::Initialize()+0x164>
    d1a4:	e59f1084 	ldr	r1, [pc, #132]	; d230 <CDWHCIRootPort::Initialize()+0x160>
    d1a8:	eb00658b 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d1ac:	e5940008 	ldr	r0, [r4, #8]
    d1b0:	e3500000 	cmp	r0, #0
    d1b4:	1afffff0 	bne	d17c <CDWHCIRootPort::Initialize()+0xac>
    d1b8:	eafffff2 	b	d188 <CDWHCIRootPort::Initialize()+0xb8>
    d1bc:	e3a05000 	mov	r5, #0
    d1c0:	eb006643 	bl	26ad4 <CLogger::Get()>
    d1c4:	e3a02001 	mov	r2, #1
    d1c8:	e59f3068 	ldr	r3, [pc, #104]	; d238 <CDWHCIRootPort::Initialize()+0x168>
    d1cc:	e59f105c 	ldr	r1, [pc, #92]	; d230 <CDWHCIRootPort::Initialize()+0x160>
    d1d0:	eb006581 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d1d4:	e1a00005 	mov	r0, r5
    d1d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    d1dc:	e3a0202c 	mov	r2, #44	; 0x2c
    d1e0:	e59f1054 	ldr	r1, [pc, #84]	; d23c <CDWHCIRootPort::Initialize()+0x16c>
    d1e4:	e59f0054 	ldr	r0, [pc, #84]	; d240 <CDWHCIRootPort::Initialize()+0x170>
    d1e8:	eb005d51 	bl	24734 <assertion_failed>
    d1ec:	e3a02036 	mov	r2, #54	; 0x36
    d1f0:	e59f1044 	ldr	r1, [pc, #68]	; d23c <CDWHCIRootPort::Initialize()+0x16c>
    d1f4:	e59f0048 	ldr	r0, [pc, #72]	; d244 <CDWHCIRootPort::Initialize()+0x174>
    d1f8:	eb005d4d 	bl	24734 <assertion_failed>
    d1fc:	eb006634 	bl	26ad4 <CLogger::Get()>
    d200:	e3a02001 	mov	r2, #1
    d204:	e59f303c 	ldr	r3, [pc, #60]	; d248 <CDWHCIRootPort::Initialize()+0x178>
    d208:	e59f1020 	ldr	r1, [pc, #32]	; d230 <CDWHCIRootPort::Initialize()+0x160>
    d20c:	eb006572 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d210:	e5940004 	ldr	r0, [r4, #4]
    d214:	e3a01001 	mov	r1, #1
    d218:	ebfff2df 	bl	9d9c <CDWHCIDevice::DisableRootPort(bool)>
    d21c:	e5940008 	ldr	r0, [r4, #8]
    d220:	e3500000 	cmp	r0, #0
    d224:	1affffd4 	bne	d17c <CDWHCIRootPort::Initialize()+0xac>
    d228:	eaffffd6 	b	d188 <CDWHCIRootPort::Initialize()+0xb8>
    d22c:	0003ddec 	.word	0x0003ddec
    d230:	0003de30 	.word	0x0003de30
    d234:	0003ddd4 	.word	0x0003ddd4
    d238:	0003dda8 	.word	0x0003dda8
    d23c:	0003dd54 	.word	0x0003dd54
    d240:	0003dd68 	.word	0x0003dd68
    d244:	0003ddc4 	.word	0x0003ddc4
    d248:	0003de00 	.word	0x0003de00

0000d24c <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    d24c:	e92d4010 	push	{r4, lr}
    d250:	e1a04000 	mov	r4, r0
    d254:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    d258:	e3500000 	cmp	r0, #0
    d25c:	0a000002 	beq	d26c <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    d260:	e5903000 	ldr	r3, [r0]
    d264:	e5933004 	ldr	r3, [r3, #4]
    d268:	e12fff33 	blx	r3
    d26c:	e3a03000 	mov	r3, #0
    d270:	e5940044 	ldr	r0, [r4, #68]	; 0x44
    d274:	e5843050 	str	r3, [r4, #80]	; 0x50
    d278:	e1500003 	cmp	r0, r3
    d27c:	e5843048 	str	r3, [r4, #72]	; 0x48
    d280:	0a000000 	beq	d288 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x3c>
    d284:	eb00773e 	bl	2af84 <operator delete[](void*)>
    d288:	e1a00004 	mov	r0, r4
    d28c:	e8bd8010 	pop	{r4, pc}

0000d290 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>:
    d290:	e5801000 	str	r1, [r0]
    d294:	e12fff1e 	bx	lr

0000d298 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    d298:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d29c:	e1a04000 	mov	r4, r0
    d2a0:	e59f0178 	ldr	r0, [pc, #376]	; d420 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    d2a4:	e5841040 	str	r1, [r4, #64]	; 0x40
    d2a8:	e0000001 	and	r0, r0, r1
    d2ac:	e3500000 	cmp	r0, #0
    d2b0:	0a00000f 	beq	d2f4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x5c>
    d2b4:	e3110010 	tst	r1, #16
    d2b8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    d2bc:	e5940004 	ldr	r0, [r4, #4]
    d2c0:	eb001cb4 	bl	14598 <CUSBRequest::IsCompleteOnNAK() const>
    d2c4:	e3500000 	cmp	r0, #0
    d2c8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    d2cc:	e5940018 	ldr	r0, [r4, #24]
    d2d0:	eb000835 	bl	f3ac <CUSBEndpoint::GetType() const>
    d2d4:	e3500001 	cmp	r0, #1
    d2d8:	1a000048 	bne	d400 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x168>
    d2dc:	e5d43008 	ldrb	r3, [r4, #8]
    d2e0:	e3530000 	cmp	r3, #0
    d2e4:	0a000049 	beq	d410 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x178>
    d2e8:	e3a03000 	mov	r3, #0
    d2ec:	e5843028 	str	r3, [r4, #40]	; 0x28
    d2f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d2f4:	e1a05002 	mov	r5, r2
    d2f8:	e5d41010 	ldrb	r1, [r4, #16]
    d2fc:	e5946030 	ldr	r6, [r4, #48]	; 0x30
    d300:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    d304:	e3510000 	cmp	r1, #0
    d308:	e0467005 	sub	r7, r6, r5
    d30c:	e0423003 	sub	r3, r2, r3
    d310:	0a00001d 	beq	d38c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xf4>
    d314:	e5d40011 	ldrb	r0, [r4, #17]
    d318:	e3530000 	cmp	r3, #0
    d31c:	13a01000 	movne	r1, #0
    d320:	02001001 	andeq	r1, r0, #1
    d324:	e3510000 	cmp	r1, #0
    d328:	1a000022 	bne	d3b8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x120>
    d32c:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    d330:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    d334:	e0811003 	add	r1, r1, r3
    d338:	e3500000 	cmp	r0, #0
    d33c:	e0823003 	add	r3, r2, r3
    d340:	e5841034 	str	r1, [r4, #52]	; 0x34
    d344:	e5843048 	str	r3, [r4, #72]	; 0x48
    d348:	1a000015 	bne	d3a4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x10c>
    d34c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d350:	e1530007 	cmp	r3, r7
    d354:	3a000021 	bcc	d3e0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x148>
    d358:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    d35c:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    d360:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    d364:	e0833005 	add	r3, r3, r5
    d368:	e0410002 	sub	r0, r1, r2
    d36c:	e0433006 	sub	r3, r3, r6
    d370:	e150000c 	cmp	r0, ip
    d374:	e5843028 	str	r3, [r4, #40]	; 0x28
    d378:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    d37c:	e1510002 	cmp	r1, r2
    d380:	3a00001a 	bcc	d3f0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x158>
    d384:	e584002c 	str	r0, [r4, #44]	; 0x2c
    d388:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d38c:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    d390:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    d394:	e0811003 	add	r1, r1, r3
    d398:	e0823003 	add	r3, r2, r3
    d39c:	e5841034 	str	r1, [r4, #52]	; 0x34
    d3a0:	e5843048 	str	r3, [r4, #72]	; 0x48
    d3a4:	e1a01007 	mov	r1, r7
    d3a8:	e5d42009 	ldrb	r2, [r4, #9]
    d3ac:	e5940018 	ldr	r0, [r4, #24]
    d3b0:	eb000823 	bl	f444 <CUSBEndpoint::SkipPID(unsigned int, bool)>
    d3b4:	eaffffe4 	b	d34c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb4>
    d3b8:	e3520000 	cmp	r2, #0
    d3bc:	15942020 	ldrne	r2, [r4, #32]
    d3c0:	10020792 	mulne	r2, r2, r7
    d3c4:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    d3c8:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    d3cc:	e0811002 	add	r1, r1, r2
    d3d0:	e0832002 	add	r2, r3, r2
    d3d4:	e5841034 	str	r1, [r4, #52]	; 0x34
    d3d8:	e5842048 	str	r2, [r4, #72]	; 0x48
    d3dc:	eafffff0 	b	d3a4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x10c>
    d3e0:	e3a020d6 	mov	r2, #214	; 0xd6
    d3e4:	e59f1038 	ldr	r1, [pc, #56]	; d424 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    d3e8:	e59f0038 	ldr	r0, [pc, #56]	; d428 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x190>
    d3ec:	eb005cd0 	bl	24734 <assertion_failed>
    d3f0:	e3a020dc 	mov	r2, #220	; 0xdc
    d3f4:	e59f1028 	ldr	r1, [pc, #40]	; d424 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    d3f8:	e59f002c 	ldr	r0, [pc, #44]	; d42c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x194>
    d3fc:	eb005ccc 	bl	24734 <assertion_failed>
    d400:	e3a020b9 	mov	r2, #185	; 0xb9
    d404:	e59f1018 	ldr	r1, [pc, #24]	; d424 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    d408:	e59f0020 	ldr	r0, [pc, #32]	; d430 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x198>
    d40c:	eb005cc8 	bl	24734 <assertion_failed>
    d410:	e3a020ba 	mov	r2, #186	; 0xba
    d414:	e59f1008 	ldr	r1, [pc, #8]	; d424 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    d418:	e59f0014 	ldr	r0, [pc, #20]	; d434 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x19c>
    d41c:	eb005cc4 	bl	24734 <assertion_failed>
    d420:	000007dc 	.word	0x000007dc
    d424:	0003de38 	.word	0x0003de38
    d428:	0003de84 	.word	0x0003de84
    d42c:	0003dea8 	.word	0x0003dea8
    d430:	0003de50 	.word	0x0003de50
    d434:	0003de7c 	.word	0x0003de7c

0000d438 <CDWHCITransferStageData::SetSplitComplete(bool)>:
    d438:	e5d03010 	ldrb	r3, [r0, #16]
    d43c:	e3530000 	cmp	r3, #0
    d440:	0a000001 	beq	d44c <CDWHCITransferStageData::SetSplitComplete(bool)+0x14>
    d444:	e5c01011 	strb	r1, [r0, #17]
    d448:	e12fff1e 	bx	lr
    d44c:	e3a020e3 	mov	r2, #227	; 0xe3
    d450:	e92d4010 	push	{r4, lr}
    d454:	e59f1004 	ldr	r1, [pc, #4]	; d460 <CDWHCITransferStageData::SetSplitComplete(bool)+0x28>
    d458:	e59f0004 	ldr	r0, [pc, #4]	; d464 <CDWHCITransferStageData::SetSplitComplete(bool)+0x2c>
    d45c:	eb005cb4 	bl	24734 <assertion_failed>
    d460:	0003de38 	.word	0x0003de38
    d464:	0003ded4 	.word	0x0003ded4

0000d468 <CDWHCITransferStageData::SetState(unsigned int)>:
    d468:	e5801038 	str	r1, [r0, #56]	; 0x38
    d46c:	e12fff1e 	bx	lr

0000d470 <CDWHCITransferStageData::GetState() const>:
    d470:	e5900038 	ldr	r0, [r0, #56]	; 0x38
    d474:	e12fff1e 	bx	lr

0000d478 <CDWHCITransferStageData::SetSubState(unsigned int)>:
    d478:	e580103c 	str	r1, [r0, #60]	; 0x3c
    d47c:	e12fff1e 	bx	lr

0000d480 <CDWHCITransferStageData::GetSubState() const>:
    d480:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    d484:	e12fff1e 	bx	lr

0000d488 <CDWHCITransferStageData::BeginSplitCycle()>:
    d488:	e3a00001 	mov	r0, #1
    d48c:	e12fff1e 	bx	lr

0000d490 <CDWHCITransferStageData::GetChannelNumber() const>:
    d490:	e5900000 	ldr	r0, [r0]
    d494:	e12fff1e 	bx	lr

0000d498 <CDWHCITransferStageData::IsPeriodic() const>:
    d498:	e5900018 	ldr	r0, [r0, #24]
    d49c:	e92d4010 	push	{r4, lr}
    d4a0:	e3500000 	cmp	r0, #0
    d4a4:	0a000006 	beq	d4c4 <CDWHCITransferStageData::IsPeriodic() const+0x2c>
    d4a8:	eb0007bf 	bl	f3ac <CUSBEndpoint::GetType() const>
    d4ac:	e2400002 	sub	r0, r0, #2
    d4b0:	e6ef0070 	uxtb	r0, r0
    d4b4:	e3500001 	cmp	r0, #1
    d4b8:	83a00000 	movhi	r0, #0
    d4bc:	93a00001 	movls	r0, #1
    d4c0:	e8bd8010 	pop	{r4, pc}
    d4c4:	e3a02f42 	mov	r2, #264	; 0x108
    d4c8:	e59f1004 	ldr	r1, [pc, #4]	; d4d4 <CDWHCITransferStageData::IsPeriodic() const+0x3c>
    d4cc:	e59f0004 	ldr	r0, [pc, #4]	; d4d8 <CDWHCITransferStageData::IsPeriodic() const+0x40>
    d4d0:	eb005c97 	bl	24734 <assertion_failed>
    d4d4:	0003de38 	.word	0x0003de38
    d4d8:	0003dee8 	.word	0x0003dee8

0000d4dc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>:
    d4dc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d4e0:	e1a04000 	mov	r4, r0
    d4e4:	e3a00000 	mov	r0, #0
    d4e8:	e24dd00c 	sub	sp, sp, #12
    d4ec:	e5dd6020 	ldrb	r6, [sp, #32]
    d4f0:	e1520000 	cmp	r2, r0
    d4f4:	e8840006 	stm	r4, {r1, r2}
    d4f8:	e5c43008 	strb	r3, [r4, #8]
    d4fc:	e5c46009 	strb	r6, [r4, #9]
    d500:	e584000c 	str	r0, [r4, #12]
    d504:	e5c40011 	strb	r0, [r4, #17]
    d508:	e5840034 	str	r0, [r4, #52]	; 0x34
    d50c:	e5840038 	str	r0, [r4, #56]	; 0x38
    d510:	e584003c 	str	r0, [r4, #60]	; 0x3c
    d514:	e5840040 	str	r0, [r4, #64]	; 0x40
    d518:	e5840044 	str	r0, [r4, #68]	; 0x44
    d51c:	e584004c 	str	r0, [r4, #76]	; 0x4c
    d520:	e5840050 	str	r0, [r4, #80]	; 0x50
    d524:	0a00008e 	beq	d764 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x288>
    d528:	e1a00002 	mov	r0, r2
    d52c:	e1a05002 	mov	r5, r2
    d530:	eb001bba 	bl	14420 <CUSBRequest::GetEndpoint() const>
    d534:	e3500000 	cmp	r0, #0
    d538:	e5840018 	str	r0, [r4, #24]
    d53c:	0a00008c 	beq	d774 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x298>
    d540:	eb00078d 	bl	f37c <CUSBEndpoint::GetDevice() const>
    d544:	e3500000 	cmp	r0, #0
    d548:	e5840014 	str	r0, [r4, #20]
    d54c:	0a00008c 	beq	d784 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2a8>
    d550:	eb000375 	bl	e32c <CUSBDevice::GetSpeed() const>
    d554:	e1a03000 	mov	r3, r0
    d558:	e5940018 	ldr	r0, [r4, #24]
    d55c:	e5c4301c 	strb	r3, [r4, #28]
    d560:	eb000799 	bl	f3cc <CUSBEndpoint::GetMaxPacketSize() const>
    d564:	e1a03000 	mov	r3, r0
    d568:	e5940014 	ldr	r0, [r4, #20]
    d56c:	e5843020 	str	r3, [r4, #32]
    d570:	eb00036f 	bl	e334 <CUSBDevice::IsSplit() const>
    d574:	e3560000 	cmp	r6, #0
    d578:	e5c40010 	strb	r0, [r4, #16]
    d57c:	0a000020 	beq	d604 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x128>
    d580:	e5946044 	ldr	r6, [r4, #68]	; 0x44
    d584:	e3560000 	cmp	r6, #0
    d588:	1a000085 	bne	d7a4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2c8>
    d58c:	e3a00004 	mov	r0, #4
    d590:	eb007674 	bl	2af68 <operator new[](unsigned int)>
    d594:	e3a03001 	mov	r3, #1
    d598:	e1a05000 	mov	r5, r0
    d59c:	e5846024 	str	r6, [r4, #36]	; 0x24
    d5a0:	e5840044 	str	r0, [r4, #68]	; 0x44
    d5a4:	e5840048 	str	r0, [r4, #72]	; 0x48
    d5a8:	e584602c 	str	r6, [r4, #44]	; 0x2c
    d5ac:	e5843028 	str	r3, [r4, #40]	; 0x28
    d5b0:	e5843030 	str	r3, [r4, #48]	; 0x30
    d5b4:	e3150003 	tst	r5, #3
    d5b8:	1a000075 	bne	d794 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2b8>
    d5bc:	e5d43010 	ldrb	r3, [r4, #16]
    d5c0:	e3530000 	cmp	r3, #0
    d5c4:	0a000032 	beq	d694 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1b8>
    d5c8:	e1a00004 	mov	r0, r4
    d5cc:	ebffffb1 	bl	d498 <CDWHCITransferStageData::IsPeriodic() const>
    d5d0:	e3500000 	cmp	r0, #0
    d5d4:	0a000040 	beq	d6dc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x200>
    d5d8:	e3a00014 	mov	r0, #20
    d5dc:	ebfffd54 	bl	cb34 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>
    d5e0:	e1a05000 	mov	r5, r0
    d5e4:	ebfffd3e 	bl	cae4 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    d5e8:	e5845050 	str	r5, [r4, #80]	; 0x50
    d5ec:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    d5f0:	e3530000 	cmp	r3, #0
    d5f4:	1a000040 	bne	d6fc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x220>
    d5f8:	e1a00004 	mov	r0, r4
    d5fc:	e28dd00c 	add	sp, sp, #12
    d600:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d604:	e1a01006 	mov	r1, r6
    d608:	e5940018 	ldr	r0, [r4, #24]
    d60c:	eb00077c 	bl	f404 <CUSBEndpoint::GetNextPID(bool)>
    d610:	e3500000 	cmp	r0, #0
    d614:	e1a00005 	mov	r0, r5
    d618:	0a00004b 	beq	d74c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x270>
    d61c:	eb001baf 	bl	144e0 <CUSBRequest::GetBuffer()>
    d620:	e1a03000 	mov	r3, r0
    d624:	e1a00005 	mov	r0, r5
    d628:	e5843048 	str	r3, [r4, #72]	; 0x48
    d62c:	eb001bba 	bl	1451c <CUSBRequest::GetBufLen() const>
    d630:	e1a06000 	mov	r6, r0
    d634:	e5945048 	ldr	r5, [r4, #72]	; 0x48
    d638:	e5840024 	str	r0, [r4, #36]	; 0x24
    d63c:	e5947020 	ldr	r7, [r4, #32]
    d640:	e2470001 	sub	r0, r7, #1
    d644:	e1a01007 	mov	r1, r7
    d648:	e0800006 	add	r0, r0, r6
    d64c:	eb00b9ad 	bl	3bd08 <__udivsi3>
    d650:	e5d43010 	ldrb	r3, [r4, #16]
    d654:	e5840028 	str	r0, [r4, #40]	; 0x28
    d658:	e3530000 	cmp	r3, #0
    d65c:	0584602c 	streq	r6, [r4, #44]	; 0x2c
    d660:	05840030 	streq	r0, [r4, #48]	; 0x30
    d664:	0a000004 	beq	d67c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1a0>
    d668:	e1570006 	cmp	r7, r6
    d66c:	31a06007 	movcc	r6, r7
    d670:	e3a03001 	mov	r3, #1
    d674:	e584602c 	str	r6, [r4, #44]	; 0x2c
    d678:	e5843030 	str	r3, [r4, #48]	; 0x30
    d67c:	e3550000 	cmp	r5, #0
    d680:	1affffcb 	bne	d5b4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xd8>
    d684:	e3a0206c 	mov	r2, #108	; 0x6c
    d688:	e59f1144 	ldr	r1, [pc, #324]	; d7d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d68c:	e59f0144 	ldr	r0, [pc, #324]	; d7d8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2fc>
    d690:	eb005c27 	bl	24734 <assertion_failed>
    d694:	e5940014 	ldr	r0, [r4, #20]
    d698:	eb000327 	bl	e33c <CUSBDevice::GetHubAddress() const>
    d69c:	e3500000 	cmp	r0, #0
    d6a0:	1affffd1 	bne	d5ec <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x110>
    d6a4:	e5d4301c 	ldrb	r3, [r4, #28]
    d6a8:	e3530002 	cmp	r3, #2
    d6ac:	0affffce 	beq	d5ec <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x110>
    d6b0:	e1a00004 	mov	r0, r4
    d6b4:	ebffff77 	bl	d498 <CDWHCITransferStageData::IsPeriodic() const>
    d6b8:	e1a01000 	mov	r1, r0
    d6bc:	e3a00008 	mov	r0, #8
    d6c0:	e58d1004 	str	r1, [sp, #4]
    d6c4:	ebfffc0a 	bl	c6f4 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>
    d6c8:	e1a05000 	mov	r5, r0
    d6cc:	e59d1004 	ldr	r1, [sp, #4]
    d6d0:	ebfffc00 	bl	c6d8 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>
    d6d4:	e5845050 	str	r5, [r4, #80]	; 0x50
    d6d8:	eaffffc3 	b	d5ec <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x110>
    d6dc:	e3a00010 	mov	r0, #16
    d6e0:	ebfffb63 	bl	c474 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>
    d6e4:	e1a05000 	mov	r5, r0
    d6e8:	ebfffb4f 	bl	c42c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
    d6ec:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    d6f0:	e5845050 	str	r5, [r4, #80]	; 0x50
    d6f4:	e3530000 	cmp	r3, #0
    d6f8:	0affffbe 	beq	d5f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x11c>
    d6fc:	e5940018 	ldr	r0, [r4, #24]
    d700:	eb000729 	bl	f3ac <CUSBEndpoint::GetType() const>
    d704:	e3500002 	cmp	r0, #2
    d708:	1a000029 	bne	d7b4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d70c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    d710:	e59f20c4 	ldr	r2, [pc, #196]	; d7dc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x300>
    d714:	e0833103 	add	r3, r3, r3, lsl #2
    d718:	e0833103 	add	r3, r3, r3, lsl #2
    d71c:	e1a03103 	lsl	r3, r3, #2
    d720:	e0821392 	umull	r1, r2, r2, r3
    d724:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    d728:	e1a03322 	lsr	r3, r2, #6
    d72c:	e584300c 	str	r3, [r4, #12]
    d730:	3a000023 	bcc	d7c4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e8>
    d734:	eb0071ca 	bl	29e64 <CTimer::Get()>
    d738:	eb006f17 	bl	2939c <CTimer::GetTicks() const>
    d73c:	e584004c 	str	r0, [r4, #76]	; 0x4c
    d740:	e1a00004 	mov	r0, r4
    d744:	e28dd00c 	add	sp, sp, #12
    d748:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d74c:	eb001b4f 	bl	14490 <CUSBRequest::GetSetupData()>
    d750:	e3a06008 	mov	r6, #8
    d754:	e1a05000 	mov	r5, r0
    d758:	e5846024 	str	r6, [r4, #36]	; 0x24
    d75c:	e5840048 	str	r0, [r4, #72]	; 0x48
    d760:	eaffffb5 	b	d63c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x160>
    d764:	e3a02031 	mov	r2, #49	; 0x31
    d768:	e59f1064 	ldr	r1, [pc, #100]	; d7d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d76c:	e59f006c 	ldr	r0, [pc, #108]	; d7e0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x304>
    d770:	eb005bef 	bl	24734 <assertion_failed>
    d774:	e3a02034 	mov	r2, #52	; 0x34
    d778:	e59f1054 	ldr	r1, [pc, #84]	; d7d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d77c:	e59f0060 	ldr	r0, [pc, #96]	; d7e4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x308>
    d780:	eb005beb 	bl	24734 <assertion_failed>
    d784:	e3a02036 	mov	r2, #54	; 0x36
    d788:	e59f1044 	ldr	r1, [pc, #68]	; d7d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d78c:	e59f0054 	ldr	r0, [pc, #84]	; d7e8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x30c>
    d790:	eb005be7 	bl	24734 <assertion_failed>
    d794:	e3a0206d 	mov	r2, #109	; 0x6d
    d798:	e59f1034 	ldr	r1, [pc, #52]	; d7d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d79c:	e59f0048 	ldr	r0, [pc, #72]	; d7ec <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x310>
    d7a0:	eb005be3 	bl	24734 <assertion_failed>
    d7a4:	e3a02061 	mov	r2, #97	; 0x61
    d7a8:	e59f1024 	ldr	r1, [pc, #36]	; d7d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d7ac:	e59f003c 	ldr	r0, [pc, #60]	; d7f0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x314>
    d7b0:	eb005bdf 	bl	24734 <assertion_failed>
    d7b4:	e3a02088 	mov	r2, #136	; 0x88
    d7b8:	e59f1014 	ldr	r1, [pc, #20]	; d7d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d7bc:	e59f0030 	ldr	r0, [pc, #48]	; d7f4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x318>
    d7c0:	eb005bdb 	bl	24734 <assertion_failed>
    d7c4:	e3a0208b 	mov	r2, #139	; 0x8b
    d7c8:	e59f1004 	ldr	r1, [pc, #4]	; d7d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d7cc:	e59f0024 	ldr	r0, [pc, #36]	; d7f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x31c>
    d7d0:	eb005bd7 	bl	24734 <assertion_failed>
    d7d4:	0003de38 	.word	0x0003de38
    d7d8:	0003df2c 	.word	0x0003df2c
    d7dc:	10624dd3 	.word	0x10624dd3
    d7e0:	0003defc 	.word	0x0003defc
    d7e4:	0003dee8 	.word	0x0003dee8
    d7e8:	0003df08 	.word	0x0003df08
    d7ec:	0003df44 	.word	0x0003df44
    d7f0:	0003df18 	.word	0x0003df18
    d7f4:	0003df6c 	.word	0x0003df6c
    d7f8:	0003dfa0 	.word	0x0003dfa0

0000d7fc <CDWHCITransferStageData::GetDeviceAddress() const>:
    d7fc:	e5900014 	ldr	r0, [r0, #20]
    d800:	e3500000 	cmp	r0, #0
    d804:	0a000000 	beq	d80c <CDWHCITransferStageData::GetDeviceAddress() const+0x10>
    d808:	ea0002c5 	b	e324 <CUSBDevice::GetAddress() const>
    d80c:	e92d4010 	push	{r4, lr}
    d810:	e59f2008 	ldr	r2, [pc, #8]	; d820 <CDWHCITransferStageData::GetDeviceAddress() const+0x24>
    d814:	e59f1008 	ldr	r1, [pc, #8]	; d824 <CDWHCITransferStageData::GetDeviceAddress() const+0x28>
    d818:	e59f0008 	ldr	r0, [pc, #8]	; d828 <CDWHCITransferStageData::GetDeviceAddress() const+0x2c>
    d81c:	eb005bc4 	bl	24734 <assertion_failed>
    d820:	00000111 	.word	0x00000111
    d824:	0003de38 	.word	0x0003de38
    d828:	0003df08 	.word	0x0003df08

0000d82c <CDWHCITransferStageData::GetEndpointType() const>:
    d82c:	e5900018 	ldr	r0, [r0, #24]
    d830:	e92d4010 	push	{r4, lr}
    d834:	e3500000 	cmp	r0, #0
    d838:	0a000005 	beq	d854 <CDWHCITransferStageData::GetEndpointType() const+0x28>
    d83c:	eb0006da 	bl	f3ac <CUSBEndpoint::GetType() const>
    d840:	e3500002 	cmp	r0, #2
    d844:	8a000006 	bhi	d864 <CDWHCITransferStageData::GetEndpointType() const+0x38>
    d848:	e59f3024 	ldr	r3, [pc, #36]	; d874 <CDWHCITransferStageData::GetEndpointType() const+0x48>
    d84c:	e7d30100 	ldrb	r0, [r3, r0, lsl #2]
    d850:	e8bd8010 	pop	{r4, pc}
    d854:	e59f201c 	ldr	r2, [pc, #28]	; d878 <CDWHCITransferStageData::GetEndpointType() const+0x4c>
    d858:	e59f101c 	ldr	r1, [pc, #28]	; d87c <CDWHCITransferStageData::GetEndpointType() const+0x50>
    d85c:	e59f001c 	ldr	r0, [pc, #28]	; d880 <CDWHCITransferStageData::GetEndpointType() const+0x54>
    d860:	eb005bb3 	bl	24734 <assertion_failed>
    d864:	e59f2018 	ldr	r2, [pc, #24]	; d884 <CDWHCITransferStageData::GetEndpointType() const+0x58>
    d868:	e59f100c 	ldr	r1, [pc, #12]	; d87c <CDWHCITransferStageData::GetEndpointType() const+0x50>
    d86c:	e59f0014 	ldr	r0, [pc, #20]	; d888 <CDWHCITransferStageData::GetEndpointType() const+0x5c>
    d870:	eb005baf 	bl	24734 <assertion_failed>
    d874:	0003e014 	.word	0x0003e014
    d878:	00000117 	.word	0x00000117
    d87c:	0003de38 	.word	0x0003de38
    d880:	0003dee8 	.word	0x0003dee8
    d884:	0000012a 	.word	0x0000012a
    d888:	0003e11c 	.word	0x0003e11c

0000d88c <CDWHCITransferStageData::GetEndpointNumber() const>:
    d88c:	e5900018 	ldr	r0, [r0, #24]
    d890:	e3500000 	cmp	r0, #0
    d894:	0a000000 	beq	d89c <CDWHCITransferStageData::GetEndpointNumber() const+0x10>
    d898:	ea0006c1 	b	f3a4 <CUSBEndpoint::GetNumber() const>
    d89c:	e92d4010 	push	{r4, lr}
    d8a0:	e59f2008 	ldr	r2, [pc, #8]	; d8b0 <CDWHCITransferStageData::GetEndpointNumber() const+0x24>
    d8a4:	e59f1008 	ldr	r1, [pc, #8]	; d8b4 <CDWHCITransferStageData::GetEndpointNumber() const+0x28>
    d8a8:	e59f0008 	ldr	r0, [pc, #8]	; d8b8 <CDWHCITransferStageData::GetEndpointNumber() const+0x2c>
    d8ac:	eb005ba0 	bl	24734 <assertion_failed>
    d8b0:	00000133 	.word	0x00000133
    d8b4:	0003de38 	.word	0x0003de38
    d8b8:	0003dee8 	.word	0x0003dee8

0000d8bc <CDWHCITransferStageData::GetMaxPacketSize() const>:
    d8bc:	e5900020 	ldr	r0, [r0, #32]
    d8c0:	e12fff1e 	bx	lr

0000d8c4 <CDWHCITransferStageData::GetSpeed() const>:
    d8c4:	e5d0001c 	ldrb	r0, [r0, #28]
    d8c8:	e12fff1e 	bx	lr

0000d8cc <CDWHCITransferStageData::GetPID() const>:
    d8cc:	e5903018 	ldr	r3, [r0, #24]
    d8d0:	e92d4010 	push	{r4, lr}
    d8d4:	e3530000 	cmp	r3, #0
    d8d8:	0a000008 	beq	d900 <CDWHCITransferStageData::GetPID() const+0x34>
    d8dc:	e5d01009 	ldrb	r1, [r0, #9]
    d8e0:	e1a00003 	mov	r0, r3
    d8e4:	eb0006c6 	bl	f404 <CUSBEndpoint::GetNextPID(bool)>
    d8e8:	e3500002 	cmp	r0, #2
    d8ec:	8a000007 	bhi	d910 <CDWHCITransferStageData::GetPID() const+0x44>
    d8f0:	e59f3028 	ldr	r3, [pc, #40]	; d920 <CDWHCITransferStageData::GetPID() const+0x54>
    d8f4:	e0830000 	add	r0, r3, r0
    d8f8:	e5d0000c 	ldrb	r0, [r0, #12]
    d8fc:	e8bd8010 	pop	{r4, pc}
    d900:	e59f201c 	ldr	r2, [pc, #28]	; d924 <CDWHCITransferStageData::GetPID() const+0x58>
    d904:	e59f101c 	ldr	r1, [pc, #28]	; d928 <CDWHCITransferStageData::GetPID() const+0x5c>
    d908:	e59f001c 	ldr	r0, [pc, #28]	; d92c <CDWHCITransferStageData::GetPID() const+0x60>
    d90c:	eb005b88 	bl	24734 <assertion_failed>
    d910:	e59f2018 	ldr	r2, [pc, #24]	; d930 <CDWHCITransferStageData::GetPID() const+0x64>
    d914:	e59f100c 	ldr	r1, [pc, #12]	; d928 <CDWHCITransferStageData::GetPID() const+0x5c>
    d918:	e59f0014 	ldr	r0, [pc, #20]	; d934 <CDWHCITransferStageData::GetPID() const+0x68>
    d91c:	eb005b84 	bl	24734 <assertion_failed>
    d920:	0003e014 	.word	0x0003e014
    d924:	00000143 	.word	0x00000143
    d928:	0003de38 	.word	0x0003de38
    d92c:	0003dee8 	.word	0x0003dee8
    d930:	00000156 	.word	0x00000156
    d934:	0003e11c 	.word	0x0003e11c

0000d938 <CDWHCITransferStageData::IsDirectionIn() const>:
    d938:	e5d00008 	ldrb	r0, [r0, #8]
    d93c:	e12fff1e 	bx	lr

0000d940 <CDWHCITransferStageData::IsStatusStage() const>:
    d940:	e5d00009 	ldrb	r0, [r0, #9]
    d944:	e12fff1e 	bx	lr

0000d948 <CDWHCITransferStageData::GetDMAAddress() const>:
    d948:	e5900048 	ldr	r0, [r0, #72]	; 0x48
    d94c:	e3500000 	cmp	r0, #0
    d950:	112fff1e 	bxne	lr
    d954:	e92d4010 	push	{r4, lr}
    d958:	e59f2008 	ldr	r2, [pc, #8]	; d968 <CDWHCITransferStageData::GetDMAAddress() const+0x20>
    d95c:	e59f1008 	ldr	r1, [pc, #8]	; d96c <CDWHCITransferStageData::GetDMAAddress() const+0x24>
    d960:	e59f0008 	ldr	r0, [pc, #8]	; d970 <CDWHCITransferStageData::GetDMAAddress() const+0x28>
    d964:	eb005b72 	bl	24734 <assertion_failed>
    d968:	00000169 	.word	0x00000169
    d96c:	0003de38 	.word	0x0003de38
    d970:	0003df2c 	.word	0x0003df2c

0000d974 <CDWHCITransferStageData::GetBytesToTransfer() const>:
    d974:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d978:	e12fff1e 	bx	lr

0000d97c <CDWHCITransferStageData::GetPacketsToTransfer() const>:
    d97c:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    d980:	e12fff1e 	bx	lr

0000d984 <CDWHCITransferStageData::IsSplit() const>:
    d984:	e5d00010 	ldrb	r0, [r0, #16]
    d988:	e12fff1e 	bx	lr

0000d98c <CDWHCITransferStageData::IsSplitComplete() const>:
    d98c:	e5d03010 	ldrb	r3, [r0, #16]
    d990:	e3530000 	cmp	r3, #0
    d994:	0a000001 	beq	d9a0 <CDWHCITransferStageData::IsSplitComplete() const+0x14>
    d998:	e5d00011 	ldrb	r0, [r0, #17]
    d99c:	e12fff1e 	bx	lr
    d9a0:	e92d4010 	push	{r4, lr}
    d9a4:	e59f2008 	ldr	r2, [pc, #8]	; d9b4 <CDWHCITransferStageData::IsSplitComplete() const+0x28>
    d9a8:	e59f1008 	ldr	r1, [pc, #8]	; d9b8 <CDWHCITransferStageData::IsSplitComplete() const+0x2c>
    d9ac:	e59f0008 	ldr	r0, [pc, #8]	; d9bc <CDWHCITransferStageData::IsSplitComplete() const+0x30>
    d9b0:	eb005b5f 	bl	24734 <assertion_failed>
    d9b4:	0000017f 	.word	0x0000017f
    d9b8:	0003de38 	.word	0x0003de38
    d9bc:	0003ded4 	.word	0x0003ded4

0000d9c0 <CDWHCITransferStageData::GetHubAddress() const>:
    d9c0:	e5d03010 	ldrb	r3, [r0, #16]
    d9c4:	e92d4010 	push	{r4, lr}
    d9c8:	e3530000 	cmp	r3, #0
    d9cc:	0a000004 	beq	d9e4 <CDWHCITransferStageData::GetHubAddress() const+0x24>
    d9d0:	e5900014 	ldr	r0, [r0, #20]
    d9d4:	e3500000 	cmp	r0, #0
    d9d8:	0a000005 	beq	d9f4 <CDWHCITransferStageData::GetHubAddress() const+0x34>
    d9dc:	e8bd4010 	pop	{r4, lr}
    d9e0:	ea000255 	b	e33c <CUSBDevice::GetHubAddress() const>
    d9e4:	e59f2018 	ldr	r2, [pc, #24]	; da04 <CDWHCITransferStageData::GetHubAddress() const+0x44>
    d9e8:	e59f1018 	ldr	r1, [pc, #24]	; da08 <CDWHCITransferStageData::GetHubAddress() const+0x48>
    d9ec:	e59f0018 	ldr	r0, [pc, #24]	; da0c <CDWHCITransferStageData::GetHubAddress() const+0x4c>
    d9f0:	eb005b4f 	bl	24734 <assertion_failed>
    d9f4:	e3a02f62 	mov	r2, #392	; 0x188
    d9f8:	e59f1008 	ldr	r1, [pc, #8]	; da08 <CDWHCITransferStageData::GetHubAddress() const+0x48>
    d9fc:	e59f000c 	ldr	r0, [pc, #12]	; da10 <CDWHCITransferStageData::GetHubAddress() const+0x50>
    da00:	eb005b4b 	bl	24734 <assertion_failed>
    da04:	00000186 	.word	0x00000186
    da08:	0003de38 	.word	0x0003de38
    da0c:	0003ded4 	.word	0x0003ded4
    da10:	0003df08 	.word	0x0003df08

0000da14 <CDWHCITransferStageData::GetHubPortAddress() const>:
    da14:	e5d03010 	ldrb	r3, [r0, #16]
    da18:	e92d4010 	push	{r4, lr}
    da1c:	e3530000 	cmp	r3, #0
    da20:	0a000004 	beq	da38 <CDWHCITransferStageData::GetHubPortAddress() const+0x24>
    da24:	e5900014 	ldr	r0, [r0, #20]
    da28:	e3500000 	cmp	r0, #0
    da2c:	0a000005 	beq	da48 <CDWHCITransferStageData::GetHubPortAddress() const+0x34>
    da30:	e8bd4010 	pop	{r4, lr}
    da34:	ea000242 	b	e344 <CUSBDevice::GetHubPortNumber() const>
    da38:	e59f2018 	ldr	r2, [pc, #24]	; da58 <CDWHCITransferStageData::GetHubPortAddress() const+0x44>
    da3c:	e59f1018 	ldr	r1, [pc, #24]	; da5c <CDWHCITransferStageData::GetHubPortAddress() const+0x48>
    da40:	e59f0018 	ldr	r0, [pc, #24]	; da60 <CDWHCITransferStageData::GetHubPortAddress() const+0x4c>
    da44:	eb005b3a 	bl	24734 <assertion_failed>
    da48:	e3a02e19 	mov	r2, #400	; 0x190
    da4c:	e59f1008 	ldr	r1, [pc, #8]	; da5c <CDWHCITransferStageData::GetHubPortAddress() const+0x48>
    da50:	e59f000c 	ldr	r0, [pc, #12]	; da64 <CDWHCITransferStageData::GetHubPortAddress() const+0x50>
    da54:	eb005b36 	bl	24734 <assertion_failed>
    da58:	0000018e 	.word	0x0000018e
    da5c:	0003de38 	.word	0x0003de38
    da60:	0003ded4 	.word	0x0003ded4
    da64:	0003df08 	.word	0x0003df08

0000da68 <CDWHCITransferStageData::GetSplitPosition() const>:
    da68:	e3a00003 	mov	r0, #3
    da6c:	e12fff1e 	bx	lr

0000da70 <CDWHCITransferStageData::GetStatusMask() const>:
    da70:	e5d03010 	ldrb	r3, [r0, #16]
    da74:	e3530000 	cmp	r3, #0
    da78:	0a000001 	beq	da84 <CDWHCITransferStageData::GetStatusMask() const+0x14>
    da7c:	e59f0018 	ldr	r0, [pc, #24]	; da9c <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    da80:	e12fff1e 	bx	lr
    da84:	e92d4010 	push	{r4, lr}
    da88:	ebfffe82 	bl	d498 <CDWHCITransferStageData::IsPeriodic() const>
    da8c:	e3500000 	cmp	r0, #0
    da90:	159f0004 	ldrne	r0, [pc, #4]	; da9c <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    da94:	059f0004 	ldreq	r0, [pc, #4]	; daa0 <CDWHCITransferStageData::GetStatusMask() const+0x30>
    da98:	e8bd8010 	pop	{r4, pc}
    da9c:	000007ff 	.word	0x000007ff
    daa0:	0000078f 	.word	0x0000078f

0000daa4 <CDWHCITransferStageData::GetTransactionStatus() const>:
    daa4:	e5900040 	ldr	r0, [r0, #64]	; 0x40
    daa8:	e3500000 	cmp	r0, #0
    daac:	112fff1e 	bxne	lr
    dab0:	e92d4010 	push	{r4, lr}
    dab4:	e59f2008 	ldr	r2, [pc, #8]	; dac4 <CDWHCITransferStageData::GetTransactionStatus() const+0x20>
    dab8:	e59f1008 	ldr	r1, [pc, #8]	; dac8 <CDWHCITransferStageData::GetTransactionStatus() const+0x24>
    dabc:	e59f0008 	ldr	r0, [pc, #8]	; dacc <CDWHCITransferStageData::GetTransactionStatus() const+0x28>
    dac0:	eb005b1b 	bl	24734 <assertion_failed>
    dac4:	000001ad 	.word	0x000001ad
    dac8:	0003de38 	.word	0x0003de38
    dacc:	0003dfb4 	.word	0x0003dfb4

0000dad0 <CDWHCITransferStageData::IsStageComplete() const>:
    dad0:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    dad4:	e16f0f10 	clz	r0, r0
    dad8:	e1a002a0 	lsr	r0, r0, #5
    dadc:	e12fff1e 	bx	lr

0000dae0 <CDWHCITransferStageData::GetResultLen() const>:
    dae0:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    dae4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    dae8:	e1520000 	cmp	r2, r0
    daec:	31a00002 	movcc	r0, r2
    daf0:	e12fff1e 	bx	lr

0000daf4 <CDWHCITransferStageData::IsTimeout() const>:
    daf4:	e590300c 	ldr	r3, [r0, #12]
    daf8:	e3530000 	cmp	r3, #0
    dafc:	1a000001 	bne	db08 <CDWHCITransferStageData::IsTimeout() const+0x14>
    db00:	e1a00003 	mov	r0, r3
    db04:	e12fff1e 	bx	lr
    db08:	e92d4010 	push	{r4, lr}
    db0c:	e1a04000 	mov	r4, r0
    db10:	eb0070d3 	bl	29e64 <CTimer::Get()>
    db14:	eb006e20 	bl	2939c <CTimer::GetTicks() const>
    db18:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    db1c:	e594300c 	ldr	r3, [r4, #12]
    db20:	e0400002 	sub	r0, r0, r2
    db24:	e1500003 	cmp	r0, r3
    db28:	33a00000 	movcc	r0, #0
    db2c:	23a00001 	movcs	r0, #1
    db30:	e8bd8010 	pop	{r4, pc}

0000db34 <CDWHCITransferStageData::GetURB() const>:
    db34:	e5900004 	ldr	r0, [r0, #4]
    db38:	e3500000 	cmp	r0, #0
    db3c:	112fff1e 	bxne	lr
    db40:	e3a02f73 	mov	r2, #460	; 0x1cc
    db44:	e92d4010 	push	{r4, lr}
    db48:	e59f1004 	ldr	r1, [pc, #4]	; db54 <CDWHCITransferStageData::GetURB() const+0x20>
    db4c:	e59f0004 	ldr	r0, [pc, #4]	; db58 <CDWHCITransferStageData::GetURB() const+0x24>
    db50:	eb005af7 	bl	24734 <assertion_failed>
    db54:	0003de38 	.word	0x0003de38
    db58:	0003defc 	.word	0x0003defc

0000db5c <CDWHCITransferStageData::GetFrameScheduler() const>:
    db5c:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    db60:	e12fff1e 	bx	lr

0000db64 <CDWHCITransferStageData::operator new(unsigned int)>:
    db64:	e3500054 	cmp	r0, #84	; 0x54
    db68:	e92d4010 	push	{r4, lr}
    db6c:	1a000005 	bne	db88 <CDWHCITransferStageData::operator new(unsigned int)+0x24>
    db70:	e59f3030 	ldr	r3, [pc, #48]	; dba8 <CDWHCITransferStageData::operator new(unsigned int)+0x44>
    db74:	e5930000 	ldr	r0, [r3]
    db78:	e3500000 	cmp	r0, #0
    db7c:	0a000005 	beq	db98 <CDWHCITransferStageData::operator new(unsigned int)+0x34>
    db80:	e8bd4010 	pop	{r4, lr}
    db84:	ea005bec 	b	24b3c <CClassAllocator::Allocate()>
    db88:	e59f201c 	ldr	r2, [pc, #28]	; dbac <CDWHCITransferStageData::operator new(unsigned int)+0x48>
    db8c:	e59f101c 	ldr	r1, [pc, #28]	; dbb0 <CDWHCITransferStageData::operator new(unsigned int)+0x4c>
    db90:	e59f001c 	ldr	r0, [pc, #28]	; dbb4 <CDWHCITransferStageData::operator new(unsigned int)+0x50>
    db94:	eb005ae6 	bl	24734 <assertion_failed>
    db98:	e59f200c 	ldr	r2, [pc, #12]	; dbac <CDWHCITransferStageData::operator new(unsigned int)+0x48>
    db9c:	e59f100c 	ldr	r1, [pc, #12]	; dbb0 <CDWHCITransferStageData::operator new(unsigned int)+0x4c>
    dba0:	e59f0010 	ldr	r0, [pc, #16]	; dbb8 <CDWHCITransferStageData::operator new(unsigned int)+0x54>
    dba4:	eb005ae2 	bl	24734 <assertion_failed>
    dba8:	0004c514 	.word	0x0004c514
    dbac:	000001d5 	.word	0x000001d5
    dbb0:	0003de38 	.word	0x0003de38
    dbb4:	0003dfd0 	.word	0x0003dfd0
    dbb8:	0003db30 	.word	0x0003db30

0000dbbc <CDWHCITransferStageData::operator delete(void*, unsigned int)>:
    dbbc:	e3510054 	cmp	r1, #84	; 0x54
    dbc0:	e92d4010 	push	{r4, lr}
    dbc4:	1a000006 	bne	dbe4 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x28>
    dbc8:	e59f3034 	ldr	r3, [pc, #52]	; dc04 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x48>
    dbcc:	e1a01000 	mov	r1, r0
    dbd0:	e5930000 	ldr	r0, [r3]
    dbd4:	e3500000 	cmp	r0, #0
    dbd8:	0a000005 	beq	dbf4 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x38>
    dbdc:	e8bd4010 	pop	{r4, lr}
    dbe0:	ea005c10 	b	24c28 <CClassAllocator::Free(void*)>
    dbe4:	e59f201c 	ldr	r2, [pc, #28]	; dc08 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x4c>
    dbe8:	e59f101c 	ldr	r1, [pc, #28]	; dc0c <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x50>
    dbec:	e59f001c 	ldr	r0, [pc, #28]	; dc10 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x54>
    dbf0:	eb005acf 	bl	24734 <assertion_failed>
    dbf4:	e59f200c 	ldr	r2, [pc, #12]	; dc08 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x4c>
    dbf8:	e59f100c 	ldr	r1, [pc, #12]	; dc0c <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x50>
    dbfc:	e59f0010 	ldr	r0, [pc, #16]	; dc14 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x58>
    dc00:	eb005acb 	bl	24734 <assertion_failed>
    dc04:	0004c514 	.word	0x0004c514
    dc08:	000001d5 	.word	0x000001d5
    dc0c:	0003de38 	.word	0x0003de38
    dc10:	0003dfd0 	.word	0x0003dfd0
    dc14:	0003db30 	.word	0x0003db30

0000dc18 <CDWHCITransferStageData::InitAllocator(unsigned int)>:
    dc18:	e92d4070 	push	{r4, r5, r6, lr}
    dc1c:	e59f6040 	ldr	r6, [pc, #64]	; dc64 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x4c>
    dc20:	e5963000 	ldr	r3, [r6]
    dc24:	e3530000 	cmp	r3, #0
    dc28:	1a000009 	bne	dc54 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x3c>
    dc2c:	e1a04000 	mov	r4, r0
    dc30:	e3a0001c 	mov	r0, #28
    dc34:	eb0074c5 	bl	2af50 <operator new(unsigned int)>
    dc38:	e1a05000 	mov	r5, r0
    dc3c:	e1a02004 	mov	r2, r4
    dc40:	e3a01054 	mov	r1, #84	; 0x54
    dc44:	e59f301c 	ldr	r3, [pc, #28]	; dc68 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x50>
    dc48:	eb005ba2 	bl	24ad8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    dc4c:	e5865000 	str	r5, [r6]
    dc50:	e8bd8070 	pop	{r4, r5, r6, pc}
    dc54:	e59f2010 	ldr	r2, [pc, #16]	; dc6c <CDWHCITransferStageData::InitAllocator(unsigned int)+0x54>
    dc58:	e59f1010 	ldr	r1, [pc, #16]	; dc70 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x58>
    dc5c:	e59f0010 	ldr	r0, [pc, #16]	; dc74 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x5c>
    dc60:	eb005ab3 	bl	24734 <assertion_failed>
    dc64:	0004c514 	.word	0x0004c514
    dc68:	0003dffc 	.word	0x0003dffc
    dc6c:	000001d5 	.word	0x000001d5
    dc70:	0003de38 	.word	0x0003de38
    dc74:	0003db44 	.word	0x0003db44

0000dc78 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>:
    dc78:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    dc7c:	e59f7054 	ldr	r7, [pc, #84]	; dcd8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    dc80:	e24dd00c 	sub	sp, sp, #12
    dc84:	e5973000 	ldr	r3, [r7]
    dc88:	e3530000 	cmp	r3, #0
    dc8c:	1a00000d 	bne	dcc8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    dc90:	e1a05001 	mov	r5, r1
    dc94:	e1a04000 	mov	r4, r0
    dc98:	e3a0001c 	mov	r0, #28
    dc9c:	eb0074ab 	bl	2af50 <operator new(unsigned int)>
    dca0:	e59f1034 	ldr	r1, [pc, #52]	; dcdc <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    dca4:	e1a03005 	mov	r3, r5
    dca8:	e58d1000 	str	r1, [sp]
    dcac:	e1a02004 	mov	r2, r4
    dcb0:	e3a01054 	mov	r1, #84	; 0x54
    dcb4:	e1a06000 	mov	r6, r0
    dcb8:	eb005b92 	bl	24b08 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    dcbc:	e5876000 	str	r6, [r7]
    dcc0:	e28dd00c 	add	sp, sp, #12
    dcc4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    dcc8:	e59f2010 	ldr	r2, [pc, #16]	; dce0 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    dccc:	e59f1010 	ldr	r1, [pc, #16]	; dce4 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    dcd0:	e59f0010 	ldr	r0, [pc, #16]	; dce8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x70>
    dcd4:	eb005a96 	bl	24734 <assertion_failed>
    dcd8:	0004c514 	.word	0x0004c514
    dcdc:	0003dffc 	.word	0x0003dffc
    dce0:	000001d5 	.word	0x000001d5
    dce4:	0003de38 	.word	0x0003de38
    dce8:	0003db44 	.word	0x0003db44

0000dcec <CUSBDevice::~CUSBDevice()>:
    dcec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dcf0:	e1a04000 	mov	r4, r0
    dcf4:	e1a05000 	mov	r5, r0
    dcf8:	e3a07000 	mov	r7, #0
    dcfc:	e59f3110 	ldr	r3, [pc, #272]	; de14 <CUSBDevice::~CUSBDevice()+0x128>
    dd00:	e2806054 	add	r6, r0, #84	; 0x54
    dd04:	e484302c 	str	r3, [r4], #44	; 0x2c
    dd08:	e5b40004 	ldr	r0, [r4, #4]!
    dd0c:	e3500000 	cmp	r0, #0
    dd10:	0a000002 	beq	dd20 <CUSBDevice::~CUSBDevice()+0x34>
    dd14:	e5903000 	ldr	r3, [r0]
    dd18:	e5933004 	ldr	r3, [r3, #4]
    dd1c:	e12fff33 	blx	r3
    dd20:	e1560004 	cmp	r6, r4
    dd24:	e5847000 	str	r7, [r4]
    dd28:	1afffff6 	bne	dd08 <CUSBDevice::~CUSBDevice()+0x1c>
    dd2c:	e5d53014 	ldrb	r3, [r5, #20]
    dd30:	e3530000 	cmp	r3, #0
    dd34:	0a000010 	beq	dd7c <CUSBDevice::~CUSBDevice()+0x90>
    dd38:	e59fc0d8 	ldr	ip, [pc, #216]	; de18 <CUSBDevice::~CUSBDevice()+0x12c>
    dd3c:	e2634020 	rsb	r4, r3, #32
    dd40:	e59ce000 	ldr	lr, [ip]
    dd44:	e59c0004 	ldr	r0, [ip, #4]
    dd48:	e1a0133e 	lsr	r1, lr, r3
    dd4c:	e1811410 	orr	r1, r1, r0, lsl r4
    dd50:	e2432020 	sub	r2, r3, #32
    dd54:	e1811230 	orr	r1, r1, r0, lsr r2
    dd58:	e3110001 	tst	r1, #1
    dd5c:	0a000028 	beq	de04 <CUSBDevice::~CUSBDevice()+0x118>
    dd60:	e3a01001 	mov	r1, #1
    dd64:	e1a02211 	lsl	r2, r1, r2
    dd68:	e1822431 	orr	r2, r2, r1, lsr r4
    dd6c:	e1c02002 	bic	r2, r0, r2
    dd70:	e1ce3311 	bic	r3, lr, r1, lsl r3
    dd74:	e58c2004 	str	r2, [ip, #4]
    dd78:	e58c3000 	str	r3, [ip]
    dd7c:	e595402c 	ldr	r4, [r5, #44]	; 0x2c
    dd80:	e3540000 	cmp	r4, #0
    dd84:	0a000004 	beq	dd9c <CUSBDevice::~CUSBDevice()+0xb0>
    dd88:	e1a00004 	mov	r0, r4
    dd8c:	eb00270f 	bl	179d0 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    dd90:	e1a00004 	mov	r0, r4
    dd94:	e3a0101c 	mov	r1, #28
    dd98:	eb00747a 	bl	2af88 <operator delete(void*, unsigned int)>
    dd9c:	e3a03000 	mov	r3, #0
    dda0:	e5950028 	ldr	r0, [r5, #40]	; 0x28
    dda4:	e585302c 	str	r3, [r5, #44]	; 0x2c
    dda8:	e1500003 	cmp	r0, r3
    ddac:	0a000001 	beq	ddb8 <CUSBDevice::~CUSBDevice()+0xcc>
    ddb0:	e3a01009 	mov	r1, #9
    ddb4:	eb007473 	bl	2af88 <operator delete(void*, unsigned int)>
    ddb8:	e3a03000 	mov	r3, #0
    ddbc:	e5950024 	ldr	r0, [r5, #36]	; 0x24
    ddc0:	e5853028 	str	r3, [r5, #40]	; 0x28
    ddc4:	e1500003 	cmp	r0, r3
    ddc8:	0a000001 	beq	ddd4 <CUSBDevice::~CUSBDevice()+0xe8>
    ddcc:	e3a01012 	mov	r1, #18
    ddd0:	eb00746c 	bl	2af88 <operator delete(void*, unsigned int)>
    ddd4:	e3a03000 	mov	r3, #0
    ddd8:	e5954018 	ldr	r4, [r5, #24]
    dddc:	e5853024 	str	r3, [r5, #36]	; 0x24
    dde0:	e1540003 	cmp	r4, r3
    dde4:	0a000004 	beq	ddfc <CUSBDevice::~CUSBDevice()+0x110>
    dde8:	e1a00004 	mov	r0, r4
    ddec:	eb000561 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
    ddf0:	e1a00004 	mov	r0, r4
    ddf4:	e3a01014 	mov	r1, #20
    ddf8:	eb007462 	bl	2af88 <operator delete(void*, unsigned int)>
    ddfc:	e1a00005 	mov	r0, r5
    de00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    de04:	e3a02088 	mov	r2, #136	; 0x88
    de08:	e59f100c 	ldr	r1, [pc, #12]	; de1c <CUSBDevice::~CUSBDevice()+0x130>
    de0c:	e59f000c 	ldr	r0, [pc, #12]	; de20 <CUSBDevice::~CUSBDevice()+0x134>
    de10:	eb005a47 	bl	24734 <assertion_failed>
    de14:	0003e3e0 	.word	0x0003e3e0
    de18:	0004c518 	.word	0x0004c518
    de1c:	0003e024 	.word	0x0003e024
    de20:	0003e034 	.word	0x0003e034

0000de24 <CUSBDevice::~CUSBDevice()>:
    de24:	e92d4010 	push	{r4, lr}
    de28:	e1a04000 	mov	r4, r0
    de2c:	ebffffae 	bl	dcec <CUSBDevice::~CUSBDevice()>
    de30:	e1a00004 	mov	r0, r4
    de34:	e3a01058 	mov	r1, #88	; 0x58
    de38:	eb007452 	bl	2af88 <operator delete(void*, unsigned int)>
    de3c:	e1a00004 	mov	r0, r4
    de40:	e8bd8010 	pop	{r4, pc}

0000de44 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>:
    de44:	e92d4070 	push	{r4, r5, r6, lr}
    de48:	e1a04000 	mov	r4, r0
    de4c:	e3a05000 	mov	r5, #0
    de50:	e3a00001 	mov	r0, #1
    de54:	e1510005 	cmp	r1, r5
    de58:	e5841004 	str	r1, [r4, #4]
    de5c:	e59f108c 	ldr	r1, [pc, #140]	; def0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xac>
    de60:	e5843008 	str	r3, [r4, #8]
    de64:	e5c42015 	strb	r2, [r4, #21]
    de68:	e5841000 	str	r1, [r4]
    de6c:	e5c4001e 	strb	r0, [r4, #30]
    de70:	e584500c 	str	r5, [r4, #12]
    de74:	e5c45014 	strb	r5, [r4, #20]
    de78:	e5845018 	str	r5, [r4, #24]
    de7c:	e1c451bc 	strh	r5, [r4, #28]
    de80:	e5845020 	str	r5, [r4, #32]
    de84:	e5845024 	str	r5, [r4, #36]	; 0x24
    de88:	e5845028 	str	r5, [r4, #40]	; 0x28
    de8c:	e584502c 	str	r5, [r4, #44]	; 0x2c
    de90:	0a00000e 	beq	ded0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x8c>
    de94:	e3530000 	cmp	r3, #0
    de98:	0a000010 	beq	dee0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x9c>
    de9c:	e3a00014 	mov	r0, #20
    dea0:	eb00742a 	bl	2af50 <operator new(unsigned int)>
    dea4:	e1a06000 	mov	r6, r0
    dea8:	e1a01004 	mov	r1, r4
    deac:	eb0004bb 	bl	f1a0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    deb0:	e5846018 	str	r6, [r4, #24]
    deb4:	e284302c 	add	r3, r4, #44	; 0x2c
    deb8:	e2842054 	add	r2, r4, #84	; 0x54
    debc:	e5a35004 	str	r5, [r3, #4]!
    dec0:	e1530002 	cmp	r3, r2
    dec4:	1afffffc 	bne	debc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x78>
    dec8:	e1a00004 	mov	r0, r4
    decc:	e8bd8070 	pop	{r4, r5, r6, pc}
    ded0:	e3a02038 	mov	r2, #56	; 0x38
    ded4:	e59f1018 	ldr	r1, [pc, #24]	; def4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb0>
    ded8:	e59f0018 	ldr	r0, [pc, #24]	; def8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb4>
    dedc:	eb005a14 	bl	24734 <assertion_failed>
    dee0:	e3a02039 	mov	r2, #57	; 0x39
    dee4:	e59f1008 	ldr	r1, [pc, #8]	; def4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb0>
    dee8:	e59f000c 	ldr	r0, [pc, #12]	; defc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb8>
    deec:	eb005a10 	bl	24734 <assertion_failed>
    def0:	0003e3e0 	.word	0x0003e3e0
    def4:	0003e024 	.word	0x0003e024
    def8:	0003dd68 	.word	0x0003dd68
    defc:	0003e064 	.word	0x0003e064

0000df00 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>:
    df00:	e92d4070 	push	{r4, r5, r6, lr}
    df04:	e3a0c000 	mov	ip, #0
    df08:	e1a04000 	mov	r4, r0
    df0c:	e151000c 	cmp	r1, ip
    df10:	e59f0130 	ldr	r0, [pc, #304]	; e048 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x148>
    df14:	e5841004 	str	r1, [r4, #4]
    df18:	e59d1010 	ldr	r1, [sp, #16]
    df1c:	e584300c 	str	r3, [r4, #12]
    df20:	e5c42015 	strb	r2, [r4, #21]
    df24:	e5840000 	str	r0, [r4]
    df28:	e5841010 	str	r1, [r4, #16]
    df2c:	e584c008 	str	ip, [r4, #8]
    df30:	e5c4c014 	strb	ip, [r4, #20]
    df34:	e584c018 	str	ip, [r4, #24]
    df38:	e584c024 	str	ip, [r4, #36]	; 0x24
    df3c:	e584c028 	str	ip, [r4, #40]	; 0x28
    df40:	e584c02c 	str	ip, [r4, #44]	; 0x2c
    df44:	0a00002f 	beq	e008 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x108>
    df48:	e3530000 	cmp	r3, #0
    df4c:	0a000031 	beq	e018 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x118>
    df50:	e1a00003 	mov	r0, r3
    df54:	eb000665 	bl	f8f0 <CUSBFunction::GetDevice() const>
    df58:	e3500000 	cmp	r0, #0
    df5c:	0a000031 	beq	e028 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x128>
    df60:	e5d0301c 	ldrb	r3, [r0, #28]
    df64:	e5c4301c 	strb	r3, [r4, #28]
    df68:	e5d0201d 	ldrb	r2, [r0, #29]
    df6c:	e3530000 	cmp	r3, #0
    df70:	e5c4201d 	strb	r2, [r4, #29]
    df74:	e5d0301e 	ldrb	r3, [r0, #30]
    df78:	e5c4301e 	strb	r3, [r4, #30]
    df7c:	e5903020 	ldr	r3, [r0, #32]
    df80:	e5843020 	str	r3, [r4, #32]
    df84:	0a000010 	beq	dfcc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xcc>
    df88:	e5945018 	ldr	r5, [r4, #24]
    df8c:	e3550000 	cmp	r5, #0
    df90:	1a000028 	bne	e038 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x138>
    df94:	e3a00014 	mov	r0, #20
    df98:	eb0073ec 	bl	2af50 <operator new(unsigned int)>
    df9c:	e1a01004 	mov	r1, r4
    dfa0:	e1a06000 	mov	r6, r0
    dfa4:	eb00047d 	bl	f1a0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    dfa8:	e1a02005 	mov	r2, r5
    dfac:	e5846018 	str	r6, [r4, #24]
    dfb0:	e284302c 	add	r3, r4, #44	; 0x2c
    dfb4:	e2841054 	add	r1, r4, #84	; 0x54
    dfb8:	e5a32004 	str	r2, [r3, #4]!
    dfbc:	e1530001 	cmp	r3, r1
    dfc0:	1afffffc 	bne	dfb8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xb8>
    dfc4:	e1a00004 	mov	r0, r4
    dfc8:	e8bd8070 	pop	{r4, r5, r6, pc}
    dfcc:	e5d03015 	ldrb	r3, [r0, #21]
    dfd0:	e3530002 	cmp	r3, #2
    dfd4:	1affffeb 	bne	df88 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    dfd8:	e5d43015 	ldrb	r3, [r4, #21]
    dfdc:	e3530001 	cmp	r3, #1
    dfe0:	8affffe8 	bhi	df88 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    dfe4:	e3a02001 	mov	r2, #1
    dfe8:	e5943010 	ldr	r3, [r4, #16]
    dfec:	e5c4201c 	strb	r2, [r4, #28]
    dff0:	e5d02014 	ldrb	r2, [r0, #20]
    dff4:	e2833001 	add	r3, r3, #1
    dff8:	e5c4201d 	strb	r2, [r4, #29]
    dffc:	e5840020 	str	r0, [r4, #32]
    e000:	e5c4301e 	strb	r3, [r4, #30]
    e004:	eaffffdf 	b	df88 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    e008:	e3a02057 	mov	r2, #87	; 0x57
    e00c:	e59f1038 	ldr	r1, [pc, #56]	; e04c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    e010:	e59f0038 	ldr	r0, [pc, #56]	; e050 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x150>
    e014:	eb0059c6 	bl	24734 <assertion_failed>
    e018:	e3a02058 	mov	r2, #88	; 0x58
    e01c:	e59f1028 	ldr	r1, [pc, #40]	; e04c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    e020:	e59f002c 	ldr	r0, [pc, #44]	; e054 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x154>
    e024:	eb0059c2 	bl	24734 <assertion_failed>
    e028:	e3a0205b 	mov	r2, #91	; 0x5b
    e02c:	e59f1018 	ldr	r1, [pc, #24]	; e04c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    e030:	e59f0020 	ldr	r0, [pc, #32]	; e058 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x158>
    e034:	eb0059be 	bl	24734 <assertion_failed>
    e038:	e3a02073 	mov	r2, #115	; 0x73
    e03c:	e59f1008 	ldr	r1, [pc, #8]	; e04c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    e040:	e59f0014 	ldr	r0, [pc, #20]	; e05c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x15c>
    e044:	eb0059ba 	bl	24734 <assertion_failed>
    e048:	0003e3e0 	.word	0x0003e3e0
    e04c:	0003e024 	.word	0x0003e024
    e050:	0003dd68 	.word	0x0003dd68
    e054:	0003e078 	.word	0x0003e078
    e058:	0003e084 	.word	0x0003e084
    e05c:	0003e094 	.word	0x0003e094

0000e060 <CUSBDevice::ReScanDevices()>:
    e060:	e92d4070 	push	{r4, r5, r6, lr}
    e064:	e3a05000 	mov	r5, #0
    e068:	e280402c 	add	r4, r0, #44	; 0x2c
    e06c:	e2806054 	add	r6, r0, #84	; 0x54
    e070:	e5b40004 	ldr	r0, [r4, #4]!
    e074:	e3500000 	cmp	r0, #0
    e078:	0a000004 	beq	e090 <CUSBDevice::ReScanDevices()+0x30>
    e07c:	e5903000 	ldr	r3, [r0]
    e080:	e5933020 	ldr	r3, [r3, #32]
    e084:	e12fff33 	blx	r3
    e088:	e3500000 	cmp	r0, #0
    e08c:	11a05000 	movne	r5, r0
    e090:	e1540006 	cmp	r4, r6
    e094:	1afffff5 	bne	e070 <CUSBDevice::ReScanDevices()+0x10>
    e098:	e1a00005 	mov	r0, r5
    e09c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e0a0 <CUSBDevice::RemoveDevice()>:
    e0a0:	e5903008 	ldr	r3, [r0, #8]
    e0a4:	e3530000 	cmp	r3, #0
    e0a8:	0a000003 	beq	e0bc <CUSBDevice::RemoveDevice()+0x1c>
    e0ac:	e5932000 	ldr	r2, [r3]
    e0b0:	e1a00003 	mov	r0, r3
    e0b4:	e592300c 	ldr	r3, [r2, #12]
    e0b8:	e12fff13 	bx	r3
    e0bc:	e590300c 	ldr	r3, [r0, #12]
    e0c0:	e3530000 	cmp	r3, #0
    e0c4:	0a000002 	beq	e0d4 <CUSBDevice::RemoveDevice()+0x34>
    e0c8:	e5901010 	ldr	r1, [r0, #16]
    e0cc:	e1a00003 	mov	r0, r3
    e0d0:	ea001a12 	b	14920 <CUSBStandardHub::RemoveDevice(unsigned int)>
    e0d4:	e3a02f7e 	mov	r2, #504	; 0x1f8
    e0d8:	e92d4010 	push	{r4, lr}
    e0dc:	e59f1004 	ldr	r1, [pc, #4]	; e0e8 <CUSBDevice::RemoveDevice()+0x48>
    e0e0:	e59f0004 	ldr	r0, [pc, #4]	; e0ec <CUSBDevice::RemoveDevice()+0x4c>
    e0e4:	eb005992 	bl	24734 <assertion_failed>
    e0e8:	0003e024 	.word	0x0003e024
    e0ec:	0003e078 	.word	0x0003e078

0000e0f0 <CUSBDevice::GetName(TDeviceNameSelector) const>:
    e0f0:	e92d4070 	push	{r4, r5, r6, lr}
    e0f4:	e1a06000 	mov	r6, r0
    e0f8:	e24dd008 	sub	sp, sp, #8
    e0fc:	e3a00010 	mov	r0, #16
    e100:	e1a04001 	mov	r4, r1
    e104:	eb007391 	bl	2af50 <operator new(unsigned int)>
    e108:	e1a05000 	mov	r5, r0
    e10c:	eb006660 	bl	27a94 <CString::CString()>
    e110:	e3540000 	cmp	r4, #0
    e114:	0a000012 	beq	e164 <CUSBDevice::GetName(TDeviceNameSelector) const+0x74>
    e118:	e3540001 	cmp	r4, #1
    e11c:	1a00002d 	bne	e1d8 <CUSBDevice::GetName(TDeviceNameSelector) const+0xe8>
    e120:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    e124:	e3510000 	cmp	r1, #0
    e128:	0a000022 	beq	e1b8 <CUSBDevice::GetName(TDeviceNameSelector) const+0xc8>
    e12c:	e5d12004 	ldrb	r2, [r1, #4]
    e130:	e2423001 	sub	r3, r2, #1
    e134:	e6ef3073 	uxtb	r3, r3
    e138:	e35300fd 	cmp	r3, #253	; 0xfd
    e13c:	8a000017 	bhi	e1a0 <CUSBDevice::GetName(TDeviceNameSelector) const+0xb0>
    e140:	e5d13005 	ldrb	r3, [r1, #5]
    e144:	e5d11006 	ldrb	r1, [r1, #6]
    e148:	e1a00005 	mov	r0, r5
    e14c:	e58d1000 	str	r1, [sp]
    e150:	e59f1090 	ldr	r1, [pc, #144]	; e1e8 <CUSBDevice::GetName(TDeviceNameSelector) const+0xf8>
    e154:	eb006b98 	bl	28fbc <CString::Format(char const*, ...)>
    e158:	e1a00005 	mov	r0, r5
    e15c:	e28dd008 	add	sp, sp, #8
    e160:	e8bd8070 	pop	{r4, r5, r6, pc}
    e164:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    e168:	e3510000 	cmp	r1, #0
    e16c:	0a000015 	beq	e1c8 <CUSBDevice::GetName(TDeviceNameSelector) const+0xd8>
    e170:	e5d1000b 	ldrb	r0, [r1, #11]
    e174:	e5d1300a 	ldrb	r3, [r1, #10]
    e178:	e5d12008 	ldrb	r2, [r1, #8]
    e17c:	e5d11009 	ldrb	r1, [r1, #9]
    e180:	e1833400 	orr	r3, r3, r0, lsl #8
    e184:	e1822401 	orr	r2, r2, r1, lsl #8
    e188:	e1a00005 	mov	r0, r5
    e18c:	e59f1058 	ldr	r1, [pc, #88]	; e1ec <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
    e190:	eb006b89 	bl	28fbc <CString::Format(char const*, ...)>
    e194:	e1a00005 	mov	r0, r5
    e198:	e28dd008 	add	sp, sp, #8
    e19c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e1a0:	e1a00005 	mov	r0, r5
    e1a4:	e59f1044 	ldr	r1, [pc, #68]	; e1f0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
    e1a8:	eb006657 	bl	27b0c <CString::operator=(char const*)>
    e1ac:	e1a00005 	mov	r0, r5
    e1b0:	e28dd008 	add	sp, sp, #8
    e1b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    e1b8:	e59f2034 	ldr	r2, [pc, #52]	; e1f4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x104>
    e1bc:	e59f1034 	ldr	r1, [pc, #52]	; e1f8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
    e1c0:	e59f0034 	ldr	r0, [pc, #52]	; e1fc <CUSBDevice::GetName(TDeviceNameSelector) const+0x10c>
    e1c4:	eb00595a 	bl	24734 <assertion_failed>
    e1c8:	e3a02f81 	mov	r2, #516	; 0x204
    e1cc:	e59f1024 	ldr	r1, [pc, #36]	; e1f8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
    e1d0:	e59f0024 	ldr	r0, [pc, #36]	; e1fc <CUSBDevice::GetName(TDeviceNameSelector) const+0x10c>
    e1d4:	eb005956 	bl	24734 <assertion_failed>
    e1d8:	e3a02f86 	mov	r2, #536	; 0x218
    e1dc:	e59f1014 	ldr	r1, [pc, #20]	; e1f8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
    e1e0:	e59f0018 	ldr	r0, [pc, #24]	; e200 <CUSBDevice::GetName(TDeviceNameSelector) const+0x110>
    e1e4:	eb005952 	bl	24734 <assertion_failed>
    e1e8:	0003e0d0 	.word	0x0003e0d0
    e1ec:	0003e0bc 	.word	0x0003e0bc
    e1f0:	0003e0c8 	.word	0x0003e0c8
    e1f4:	0000020b 	.word	0x0000020b
    e1f8:	0003e024 	.word	0x0003e024
    e1fc:	0003e0a8 	.word	0x0003e0a8
    e200:	0003e11c 	.word	0x0003e11c

0000e204 <CUSBDevice::GetNames() const>:
    e204:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e208:	e1a07000 	mov	r7, r0
    e20c:	e3a00010 	mov	r0, #16
    e210:	eb00734e 	bl	2af50 <operator new(unsigned int)>
    e214:	e3a06000 	mov	r6, #0
    e218:	e1a05000 	mov	r5, r0
    e21c:	eb00661c 	bl	27a94 <CString::CString()>
    e220:	e59f80b8 	ldr	r8, [pc, #184]	; e2e0 <CUSBDevice::GetNames() const+0xdc>
    e224:	e59f90b8 	ldr	r9, [pc, #184]	; e2e4 <CUSBDevice::GetNames() const+0xe0>
    e228:	e1a01006 	mov	r1, r6
    e22c:	e1a00007 	mov	r0, r7
    e230:	ebffffae 	bl	e0f0 <CUSBDevice::GetName(TDeviceNameSelector) const>
    e234:	e2504000 	subs	r4, r0, #0
    e238:	0a000020 	beq	e2c0 <CUSBDevice::GetNames() const+0xbc>
    e23c:	e1a01008 	mov	r1, r8
    e240:	eb006682 	bl	27c50 <CString::Compare(char const*) const>
    e244:	e3500000 	cmp	r0, #0
    e248:	1a00000d 	bne	e284 <CUSBDevice::GetNames() const+0x80>
    e24c:	e5943000 	ldr	r3, [r4]
    e250:	e1a00004 	mov	r0, r4
    e254:	e5933004 	ldr	r3, [r3, #4]
    e258:	e12fff33 	blx	r3
    e25c:	e3560001 	cmp	r6, #1
    e260:	1a000005 	bne	e27c <CUSBDevice::GetNames() const+0x78>
    e264:	e1a00005 	mov	r0, r5
    e268:	eb006653 	bl	27bbc <CString::GetLength() const>
    e26c:	e3500000 	cmp	r0, #0
    e270:	0a00000d 	beq	e2ac <CUSBDevice::GetNames() const+0xa8>
    e274:	e1a00005 	mov	r0, r5
    e278:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e27c:	e3a06001 	mov	r6, #1
    e280:	eaffffe8 	b	e228 <CUSBDevice::GetNames() const+0x24>
    e284:	e1a00005 	mov	r0, r5
    e288:	eb00664b 	bl	27bbc <CString::GetLength() const>
    e28c:	e3500000 	cmp	r0, #0
    e290:	1a00000e 	bne	e2d0 <CUSBDevice::GetNames() const+0xcc>
    e294:	e1a00004 	mov	r0, r4
    e298:	eb006615 	bl	27af4 <CString::operator char const*() const>
    e29c:	e1a01000 	mov	r1, r0
    e2a0:	e1a00005 	mov	r0, r5
    e2a4:	eb006648 	bl	27bcc <CString::Append(char const*)>
    e2a8:	eaffffe7 	b	e24c <CUSBDevice::GetNames() const+0x48>
    e2ac:	e1a00005 	mov	r0, r5
    e2b0:	e59f1028 	ldr	r1, [pc, #40]	; e2e0 <CUSBDevice::GetNames() const+0xdc>
    e2b4:	eb006614 	bl	27b0c <CString::operator=(char const*)>
    e2b8:	e1a00005 	mov	r0, r5
    e2bc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e2c0:	e59f2020 	ldr	r2, [pc, #32]	; e2e8 <CUSBDevice::GetNames() const+0xe4>
    e2c4:	e59f1020 	ldr	r1, [pc, #32]	; e2ec <CUSBDevice::GetNames() const+0xe8>
    e2c8:	e59f0020 	ldr	r0, [pc, #32]	; e2f0 <CUSBDevice::GetNames() const+0xec>
    e2cc:	eb005918 	bl	24734 <assertion_failed>
    e2d0:	e1a01009 	mov	r1, r9
    e2d4:	e1a00005 	mov	r0, r5
    e2d8:	eb00663b 	bl	27bcc <CString::Append(char const*)>
    e2dc:	eaffffec 	b	e294 <CUSBDevice::GetNames() const+0x90>
    e2e0:	0003e0c8 	.word	0x0003e0c8
    e2e4:	0003e0e8 	.word	0x0003e0e8
    e2e8:	00000229 	.word	0x00000229
    e2ec:	0003e024 	.word	0x0003e024
    e2f0:	0003e0dc 	.word	0x0003e0dc

0000e2f4 <CUSBDevice::SetAddress(unsigned char)>:
    e2f4:	e351003f 	cmp	r1, #63	; 0x3f
    e2f8:	8a000001 	bhi	e304 <CUSBDevice::SetAddress(unsigned char)+0x10>
    e2fc:	e5c01014 	strb	r1, [r0, #20]
    e300:	e12fff1e 	bx	lr
    e304:	e92d4010 	push	{r4, lr}
    e308:	e59f2008 	ldr	r2, [pc, #8]	; e318 <CUSBDevice::SetAddress(unsigned char)+0x24>
    e30c:	e59f1008 	ldr	r1, [pc, #8]	; e31c <CUSBDevice::SetAddress(unsigned char)+0x28>
    e310:	e59f0008 	ldr	r0, [pc, #8]	; e320 <CUSBDevice::SetAddress(unsigned char)+0x2c>
    e314:	eb005906 	bl	24734 <assertion_failed>
    e318:	00000243 	.word	0x00000243
    e31c:	0003e024 	.word	0x0003e024
    e320:	0003e0ec 	.word	0x0003e0ec

0000e324 <CUSBDevice::GetAddress() const>:
    e324:	e5d00014 	ldrb	r0, [r0, #20]
    e328:	e12fff1e 	bx	lr

0000e32c <CUSBDevice::GetSpeed() const>:
    e32c:	e5d00015 	ldrb	r0, [r0, #21]
    e330:	e12fff1e 	bx	lr

0000e334 <CUSBDevice::IsSplit() const>:
    e334:	e5d0001c 	ldrb	r0, [r0, #28]
    e338:	e12fff1e 	bx	lr

0000e33c <CUSBDevice::GetHubAddress() const>:
    e33c:	e5d0001d 	ldrb	r0, [r0, #29]
    e340:	e12fff1e 	bx	lr

0000e344 <CUSBDevice::GetHubPortNumber() const>:
    e344:	e5d0001e 	ldrb	r0, [r0, #30]
    e348:	e12fff1e 	bx	lr

0000e34c <CUSBDevice::GetTTHubDevice() const>:
    e34c:	e5900020 	ldr	r0, [r0, #32]
    e350:	e12fff1e 	bx	lr

0000e354 <CUSBDevice::GetEndpoint0() const>:
    e354:	e5900018 	ldr	r0, [r0, #24]
    e358:	e3500000 	cmp	r0, #0
    e35c:	112fff1e 	bxne	lr
    e360:	e3a02f9b 	mov	r2, #620	; 0x26c
    e364:	e92d4010 	push	{r4, lr}
    e368:	e59f1004 	ldr	r1, [pc, #4]	; e374 <CUSBDevice::GetEndpoint0() const+0x20>
    e36c:	e59f0004 	ldr	r0, [pc, #4]	; e378 <CUSBDevice::GetEndpoint0() const+0x24>
    e370:	eb0058ef 	bl	24734 <assertion_failed>
    e374:	0003e024 	.word	0x0003e024
    e378:	0003e10c 	.word	0x0003e10c

0000e37c <CUSBDevice::GetHost() const>:
    e37c:	e5900004 	ldr	r0, [r0, #4]
    e380:	e3500000 	cmp	r0, #0
    e384:	112fff1e 	bxne	lr
    e388:	e92d4010 	push	{r4, lr}
    e38c:	e59f2008 	ldr	r2, [pc, #8]	; e39c <CUSBDevice::GetHost() const+0x20>
    e390:	e59f1008 	ldr	r1, [pc, #8]	; e3a0 <CUSBDevice::GetHost() const+0x24>
    e394:	e59f0008 	ldr	r0, [pc, #8]	; e3a4 <CUSBDevice::GetHost() const+0x28>
    e398:	eb0058e5 	bl	24734 <assertion_failed>
    e39c:	00000272 	.word	0x00000272
    e3a0:	0003e024 	.word	0x0003e024
    e3a4:	0003dd68 	.word	0x0003dd68

0000e3a8 <CUSBDevice::GetDeviceDescriptor() const>:
    e3a8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    e3ac:	e3500000 	cmp	r0, #0
    e3b0:	112fff1e 	bxne	lr
    e3b4:	e3a02f9e 	mov	r2, #632	; 0x278
    e3b8:	e92d4010 	push	{r4, lr}
    e3bc:	e59f1004 	ldr	r1, [pc, #4]	; e3c8 <CUSBDevice::GetDeviceDescriptor() const+0x20>
    e3c0:	e59f0004 	ldr	r0, [pc, #4]	; e3cc <CUSBDevice::GetDeviceDescriptor() const+0x24>
    e3c4:	eb0058da 	bl	24734 <assertion_failed>
    e3c8:	0003e024 	.word	0x0003e024
    e3cc:	0003e0a8 	.word	0x0003e0a8

0000e3d0 <CUSBDevice::GetConfigurationDescriptor() const>:
    e3d0:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    e3d4:	e3500000 	cmp	r0, #0
    e3d8:	112fff1e 	bxne	lr
    e3dc:	e92d4010 	push	{r4, lr}
    e3e0:	e59f2008 	ldr	r2, [pc, #8]	; e3f0 <CUSBDevice::GetConfigurationDescriptor() const+0x20>
    e3e4:	e59f1008 	ldr	r1, [pc, #8]	; e3f4 <CUSBDevice::GetConfigurationDescriptor() const+0x24>
    e3e8:	e59f0008 	ldr	r0, [pc, #8]	; e3f8 <CUSBDevice::GetConfigurationDescriptor() const+0x28>
    e3ec:	eb0058d0 	bl	24734 <assertion_failed>
    e3f0:	0000027e 	.word	0x0000027e
    e3f4:	0003e024 	.word	0x0003e024
    e3f8:	0003e120 	.word	0x0003e120

0000e3fc <CUSBDevice::GetDescriptor(unsigned char)>:
    e3fc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e400:	e3500000 	cmp	r0, #0
    e404:	0a000000 	beq	e40c <CUSBDevice::GetDescriptor(unsigned char)+0x10>
    e408:	ea002573 	b	179dc <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e40c:	e3a02fa1 	mov	r2, #644	; 0x284
    e410:	e92d4010 	push	{r4, lr}
    e414:	e59f1004 	ldr	r1, [pc, #4]	; e420 <CUSBDevice::GetDescriptor(unsigned char)+0x24>
    e418:	e59f0004 	ldr	r0, [pc, #4]	; e424 <CUSBDevice::GetDescriptor(unsigned char)+0x28>
    e41c:	eb0058c4 	bl	24734 <assertion_failed>
    e420:	0003e024 	.word	0x0003e024
    e424:	0003e134 	.word	0x0003e134

0000e428 <CUSBDevice::ConfigurationError(char const*) const>:
    e428:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e42c:	e3500000 	cmp	r0, #0
    e430:	0a000000 	beq	e438 <CUSBDevice::ConfigurationError(char const*) const+0x10>
    e434:	ea0025a3 	b	17ac8 <CUSBConfigurationParser::Error(char const*) const>
    e438:	e92d4010 	push	{r4, lr}
    e43c:	e59f2008 	ldr	r2, [pc, #8]	; e44c <CUSBDevice::ConfigurationError(char const*) const+0x24>
    e440:	e59f1008 	ldr	r1, [pc, #8]	; e450 <CUSBDevice::ConfigurationError(char const*) const+0x28>
    e444:	e59f0008 	ldr	r0, [pc, #8]	; e454 <CUSBDevice::ConfigurationError(char const*) const+0x2c>
    e448:	eb0058b9 	bl	24734 <assertion_failed>
    e44c:	0000028a 	.word	0x0000028a
    e450:	0003e024 	.word	0x0003e024
    e454:	0003e134 	.word	0x0003e134

0000e458 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
    e458:	e92d000c 	push	{r2, r3}
    e45c:	e92d4070 	push	{r4, r5, r6, lr}
    e460:	e24dd020 	sub	sp, sp, #32
    e464:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
    e468:	e3560000 	cmp	r6, #0
    e46c:	0a00001d 	beq	e4e8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x90>
    e470:	e1a04000 	mov	r4, r0
    e474:	e28d0010 	add	r0, sp, #16
    e478:	e1a05001 	mov	r5, r1
    e47c:	eb006584 	bl	27a94 <CString::CString()>
    e480:	e5d4301e 	ldrb	r3, [r4, #30]
    e484:	e59f206c 	ldr	r2, [pc, #108]	; e4f8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa0>
    e488:	e58d3000 	str	r3, [sp]
    e48c:	e59f1068 	ldr	r1, [pc, #104]	; e4fc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa4>
    e490:	e5d4301d 	ldrb	r3, [r4, #29]
    e494:	e28d0010 	add	r0, sp, #16
    e498:	eb006ac7 	bl	28fbc <CString::Format(char const*, ...)>
    e49c:	e28d3034 	add	r3, sp, #52	; 0x34
    e4a0:	e58d300c 	str	r3, [sp, #12]
    e4a4:	eb00618a 	bl	26ad4 <CLogger::Get()>
    e4a8:	e1a04000 	mov	r4, r0
    e4ac:	e28d0010 	add	r0, sp, #16
    e4b0:	eb00658f 	bl	27af4 <CString::operator char const*() const>
    e4b4:	e59dc00c 	ldr	ip, [sp, #12]
    e4b8:	e1a01000 	mov	r1, r0
    e4bc:	e1a03006 	mov	r3, r6
    e4c0:	e1a00004 	mov	r0, r4
    e4c4:	e1a02005 	mov	r2, r5
    e4c8:	e58dc000 	str	ip, [sp]
    e4cc:	eb0060ce 	bl	2680c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    e4d0:	e28d0010 	add	r0, sp, #16
    e4d4:	eb00653b 	bl	279c8 <CString::~CString()>
    e4d8:	e28dd020 	add	sp, sp, #32
    e4dc:	e8bd4070 	pop	{r4, r5, r6, lr}
    e4e0:	e28dd008 	add	sp, sp, #8
    e4e4:	e12fff1e 	bx	lr
    e4e8:	e3a02e29 	mov	r2, #656	; 0x290
    e4ec:	e59f100c 	ldr	r1, [pc, #12]	; e500 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa8>
    e4f0:	e59f000c 	ldr	r0, [pc, #12]	; e504 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xac>
    e4f4:	eb00588e 	bl	24734 <assertion_failed>
    e4f8:	0003e3f0 	.word	0x0003e3f0
    e4fc:	0003e15c 	.word	0x0003e15c
    e500:	0003e024 	.word	0x0003e024
    e504:	0003e14c 	.word	0x0003e14c

0000e508 <CUSBDevice::Initialize()>:
    e508:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e50c:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    e510:	e24dd01c 	sub	sp, sp, #28
    e514:	e3550000 	cmp	r5, #0
    e518:	1a0000aa 	bne	e7c8 <CUSBDevice::Initialize()+0x2c0>
    e51c:	e1a04000 	mov	r4, r0
    e520:	e3a00012 	mov	r0, #18
    e524:	eb007289 	bl	2af50 <operator new(unsigned int)>
    e528:	e5943004 	ldr	r3, [r4, #4]
    e52c:	e5840024 	str	r0, [r4, #36]	; 0x24
    e530:	e3530000 	cmp	r3, #0
    e534:	0a0000a7 	beq	e7d8 <CUSBDevice::Initialize()+0x2d0>
    e538:	e5941018 	ldr	r1, [r4, #24]
    e53c:	e3510000 	cmp	r1, #0
    e540:	0a0000a8 	beq	e7e8 <CUSBDevice::Initialize()+0x2e0>
    e544:	e3a02008 	mov	r2, #8
    e548:	e3a07080 	mov	r7, #128	; 0x80
    e54c:	e58d0000 	str	r0, [sp]
    e550:	e98d0084 	stmib	sp, {r2, r7}
    e554:	e1a00003 	mov	r0, r3
    e558:	e3a02001 	mov	r2, #1
    e55c:	e1a03005 	mov	r3, r5
    e560:	e58d500c 	str	r5, [sp, #12]
    e564:	eb0010d4 	bl	128bc <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e568:	e3500008 	cmp	r0, #8
    e56c:	1a000014 	bne	e5c4 <CUSBDevice::Initialize()+0xbc>
    e570:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e574:	e5d3a000 	ldrb	sl, [r3]
    e578:	e35a0012 	cmp	sl, #18
    e57c:	1a000002 	bne	e58c <CUSBDevice::Initialize()+0x84>
    e580:	e5d36001 	ldrb	r6, [r3, #1]
    e584:	e3560001 	cmp	r6, #1
    e588:	0a00000f 	beq	e5cc <CUSBDevice::Initialize()+0xc4>
    e58c:	e59f2624 	ldr	r2, [pc, #1572]	; ebb8 <CUSBDevice::Initialize()+0x6b0>
    e590:	e3a01001 	mov	r1, #1
    e594:	e1a00004 	mov	r0, r4
    e598:	ebffffae 	bl	e458 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e59c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    e5a0:	e3500000 	cmp	r0, #0
    e5a4:	0a000001 	beq	e5b0 <CUSBDevice::Initialize()+0xa8>
    e5a8:	e3a01012 	mov	r1, #18
    e5ac:	eb007275 	bl	2af88 <operator delete(void*, unsigned int)>
    e5b0:	e3a05000 	mov	r5, #0
    e5b4:	e5845024 	str	r5, [r4, #36]	; 0x24
    e5b8:	e1a00005 	mov	r0, r5
    e5bc:	e28dd01c 	add	sp, sp, #28
    e5c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e5c4:	e59f25f0 	ldr	r2, [pc, #1520]	; ebbc <CUSBDevice::Initialize()+0x6b4>
    e5c8:	eafffff0 	b	e590 <CUSBDevice::Initialize()+0x88>
    e5cc:	e5d31007 	ldrb	r1, [r3, #7]
    e5d0:	e5940018 	ldr	r0, [r4, #24]
    e5d4:	eb000378 	bl	f3bc <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
    e5d8:	e3500000 	cmp	r0, #0
    e5dc:	0a000088 	beq	e804 <CUSBDevice::Initialize()+0x2fc>
    e5e0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e5e4:	e58d500c 	str	r5, [sp, #12]
    e5e8:	e88d0408 	stm	sp, {r3, sl}
    e5ec:	e58d7008 	str	r7, [sp, #8]
    e5f0:	e1a03005 	mov	r3, r5
    e5f4:	e1a02006 	mov	r2, r6
    e5f8:	e5941018 	ldr	r1, [r4, #24]
    e5fc:	e5940004 	ldr	r0, [r4, #4]
    e600:	eb0010ad 	bl	128bc <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e604:	e3500012 	cmp	r0, #18
    e608:	1a00007a 	bne	e7f8 <CUSBDevice::Initialize()+0x2f0>
    e60c:	e59fc5ac 	ldr	ip, [pc, #1452]	; ebc0 <CUSBDevice::Initialize()+0x6b8>
    e610:	e1a0e006 	mov	lr, r6
    e614:	e89c0005 	ldm	ip, {r0, r2}
    e618:	ea000002 	b	e628 <CUSBDevice::Initialize()+0x120>
    e61c:	e2866001 	add	r6, r6, #1
    e620:	e3560040 	cmp	r6, #64	; 0x40
    e624:	0a000085 	beq	e840 <CUSBDevice::Initialize()+0x338>
    e628:	e1a09005 	mov	r9, r5
    e62c:	e266a020 	rsb	sl, r6, #32
    e630:	e1a03630 	lsr	r3, r0, r6
    e634:	e1833a12 	orr	r3, r3, r2, lsl sl
    e638:	e2461020 	sub	r1, r6, #32
    e63c:	e1833132 	orr	r3, r3, r2, lsr r1
    e640:	e2038001 	and	r8, r3, #1
    e644:	e1983009 	orrs	r3, r8, r9
    e648:	e6ef7076 	uxtb	r7, r6
    e64c:	1afffff2 	bne	e61c <CUSBDevice::Initialize()+0x114>
    e650:	e1a0111e 	lsl	r1, lr, r1
    e654:	e1811a3e 	orr	r1, r1, lr, lsr sl
    e658:	e1813002 	orr	r3, r1, r2
    e65c:	e180e61e 	orr	lr, r0, lr, lsl r6
    e660:	e1a02007 	mov	r2, r7
    e664:	e5940004 	ldr	r0, [r4, #4]
    e668:	e5941018 	ldr	r1, [r4, #24]
    e66c:	e58c3004 	str	r3, [ip, #4]
    e670:	e58ce000 	str	lr, [ip]
    e674:	eb00109e 	bl	128f4 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
    e678:	e2505000 	subs	r5, r0, #0
    e67c:	0a00007f 	beq	e880 <CUSBDevice::Initialize()+0x378>
    e680:	e5945028 	ldr	r5, [r4, #40]	; 0x28
    e684:	e5c47014 	strb	r7, [r4, #20]
    e688:	e3550000 	cmp	r5, #0
    e68c:	1a000081 	bne	e898 <CUSBDevice::Initialize()+0x390>
    e690:	e3a00009 	mov	r0, #9
    e694:	eb00722d 	bl	2af50 <operator new(unsigned int)>
    e698:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    e69c:	e5840028 	str	r0, [r4, #40]	; 0x28
    e6a0:	e5d12008 	ldrb	r2, [r1, #8]
    e6a4:	e5d1c009 	ldrb	ip, [r1, #9]
    e6a8:	e59f3514 	ldr	r3, [pc, #1300]	; ebc4 <CUSBDevice::Initialize()+0x6bc>
    e6ac:	e182240c 	orr	r2, r2, ip, lsl #8
    e6b0:	e1520003 	cmp	r2, r3
    e6b4:	1a000006 	bne	e6d4 <CUSBDevice::Initialize()+0x1cc>
    e6b8:	e5d1500a 	ldrb	r5, [r1, #10]
    e6bc:	e5d1200b 	ldrb	r2, [r1, #11]
    e6c0:	e59f3500 	ldr	r3, [pc, #1280]	; ebc8 <CUSBDevice::Initialize()+0x6c0>
    e6c4:	e1855402 	orr	r5, r5, r2, lsl #8
    e6c8:	e0455003 	sub	r5, r5, r3
    e6cc:	e16f5f15 	clz	r5, r5
    e6d0:	e1a052a5 	lsr	r5, r5, #5
    e6d4:	e3a06009 	mov	r6, #9
    e6d8:	e3a08000 	mov	r8, #0
    e6dc:	e3a07080 	mov	r7, #128	; 0x80
    e6e0:	e88d01c1 	stm	sp, {r0, r6, r7, r8}
    e6e4:	e1a03005 	mov	r3, r5
    e6e8:	e3a02002 	mov	r2, #2
    e6ec:	e5941018 	ldr	r1, [r4, #24]
    e6f0:	e5940004 	ldr	r0, [r4, #4]
    e6f4:	eb001070 	bl	128bc <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e6f8:	e1500006 	cmp	r0, r6
    e6fc:	1a000055 	bne	e858 <CUSBDevice::Initialize()+0x350>
    e700:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    e704:	e5d06000 	ldrb	r6, [r0]
    e708:	e3560009 	cmp	r6, #9
    e70c:	1a00003f 	bne	e810 <CUSBDevice::Initialize()+0x308>
    e710:	e5d0a001 	ldrb	sl, [r0, #1]
    e714:	e35a0002 	cmp	sl, #2
    e718:	1a00003c 	bne	e810 <CUSBDevice::Initialize()+0x308>
    e71c:	e5d09002 	ldrb	r9, [r0, #2]
    e720:	e5d03003 	ldrb	r3, [r0, #3]
    e724:	e1899403 	orr	r9, r9, r3, lsl #8
    e728:	e3590c02 	cmp	r9, #512	; 0x200
    e72c:	8a000037 	bhi	e810 <CUSBDevice::Initialize()+0x308>
    e730:	e1a01006 	mov	r1, r6
    e734:	eb007213 	bl	2af88 <operator delete(void*, unsigned int)>
    e738:	e1a00009 	mov	r0, r9
    e73c:	eb007209 	bl	2af68 <operator new[](unsigned int)>
    e740:	e58d800c 	str	r8, [sp, #12]
    e744:	e5840028 	str	r0, [r4, #40]	; 0x28
    e748:	e58d0000 	str	r0, [sp]
    e74c:	e58d7008 	str	r7, [sp, #8]
    e750:	e58d9004 	str	r9, [sp, #4]
    e754:	e1a03005 	mov	r3, r5
    e758:	e1a0200a 	mov	r2, sl
    e75c:	e5941018 	ldr	r1, [r4, #24]
    e760:	e5940004 	ldr	r0, [r4, #4]
    e764:	eb001054 	bl	128bc <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e768:	e1500009 	cmp	r0, r9
    e76c:	e1a05000 	mov	r5, r0
    e770:	159f2454 	ldrne	r2, [pc, #1108]	; ebcc <CUSBDevice::Initialize()+0x6c4>
    e774:	1a000026 	bne	e814 <CUSBDevice::Initialize()+0x30c>
    e778:	e594902c 	ldr	r9, [r4, #44]	; 0x2c
    e77c:	e3590000 	cmp	r9, #0
    e780:	1a0000d5 	bne	eadc <CUSBDevice::Initialize()+0x5d4>
    e784:	e3a0001c 	mov	r0, #28
    e788:	eb0071f0 	bl	2af50 <operator new(unsigned int)>
    e78c:	e1a06000 	mov	r6, r0
    e790:	e1a02005 	mov	r2, r5
    e794:	e5941028 	ldr	r1, [r4, #40]	; 0x28
    e798:	eb002421 	bl	17824 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
    e79c:	e1a00006 	mov	r0, r6
    e7a0:	e584602c 	str	r6, [r4, #44]	; 0x2c
    e7a4:	eb00248a 	bl	179d4 <CUSBConfigurationParser::IsValid() const>
    e7a8:	e2505000 	subs	r5, r0, #0
    e7ac:	1a00003d 	bne	e8a8 <CUSBDevice::Initialize()+0x3a0>
    e7b0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e7b4:	e3500000 	cmp	r0, #0
    e7b8:	0a0000e1 	beq	eb44 <CUSBDevice::Initialize()+0x63c>
    e7bc:	e59f140c 	ldr	r1, [pc, #1036]	; ebd0 <CUSBDevice::Initialize()+0x6c8>
    e7c0:	eb0024c0 	bl	17ac8 <CUSBConfigurationParser::Error(char const*) const>
    e7c4:	eaffff7b 	b	e5b8 <CUSBDevice::Initialize()+0xb0>
    e7c8:	e3a020a7 	mov	r2, #167	; 0xa7
    e7cc:	e59f1400 	ldr	r1, [pc, #1024]	; ebd4 <CUSBDevice::Initialize()+0x6cc>
    e7d0:	e59f0400 	ldr	r0, [pc, #1024]	; ebd8 <CUSBDevice::Initialize()+0x6d0>
    e7d4:	eb0057d6 	bl	24734 <assertion_failed>
    e7d8:	e3a020ab 	mov	r2, #171	; 0xab
    e7dc:	e59f13f0 	ldr	r1, [pc, #1008]	; ebd4 <CUSBDevice::Initialize()+0x6cc>
    e7e0:	e59f03f4 	ldr	r0, [pc, #1012]	; ebdc <CUSBDevice::Initialize()+0x6d4>
    e7e4:	eb0057d2 	bl	24734 <assertion_failed>
    e7e8:	e3a020ac 	mov	r2, #172	; 0xac
    e7ec:	e59f13e0 	ldr	r1, [pc, #992]	; ebd4 <CUSBDevice::Initialize()+0x6cc>
    e7f0:	e59f03e8 	ldr	r0, [pc, #1000]	; ebe0 <CUSBDevice::Initialize()+0x6d8>
    e7f4:	eb0057ce 	bl	24734 <assertion_failed>
    e7f8:	e1a01006 	mov	r1, r6
    e7fc:	e59f23e0 	ldr	r2, [pc, #992]	; ebe4 <CUSBDevice::Initialize()+0x6dc>
    e800:	eaffff63 	b	e594 <CUSBDevice::Initialize()+0x8c>
    e804:	e1a01006 	mov	r1, r6
    e808:	e59f23d8 	ldr	r2, [pc, #984]	; ebe8 <CUSBDevice::Initialize()+0x6e0>
    e80c:	eaffff60 	b	e594 <CUSBDevice::Initialize()+0x8c>
    e810:	e59f23d4 	ldr	r2, [pc, #980]	; ebec <CUSBDevice::Initialize()+0x6e4>
    e814:	e1a00004 	mov	r0, r4
    e818:	e3a01001 	mov	r1, #1
    e81c:	ebffff0d 	bl	e458 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e820:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    e824:	e3500000 	cmp	r0, #0
    e828:	0a000001 	beq	e834 <CUSBDevice::Initialize()+0x32c>
    e82c:	e3a01009 	mov	r1, #9
    e830:	eb0071d4 	bl	2af88 <operator delete(void*, unsigned int)>
    e834:	e3a05000 	mov	r5, #0
    e838:	e5845028 	str	r5, [r4, #40]	; 0x28
    e83c:	eaffff5d 	b	e5b8 <CUSBDevice::Initialize()+0xb0>
    e840:	e1a00004 	mov	r0, r4
    e844:	e3a01001 	mov	r1, #1
    e848:	e59f23a0 	ldr	r2, [pc, #928]	; ebf0 <CUSBDevice::Initialize()+0x6e8>
    e84c:	ebffff01 	bl	e458 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e850:	e3a05000 	mov	r5, #0
    e854:	eaffff57 	b	e5b8 <CUSBDevice::Initialize()+0xb0>
    e858:	e1a00004 	mov	r0, r4
    e85c:	e3a01001 	mov	r1, #1
    e860:	e59f238c 	ldr	r2, [pc, #908]	; ebf4 <CUSBDevice::Initialize()+0x6ec>
    e864:	ebfffefb 	bl	e458 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e868:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    e86c:	e1500008 	cmp	r0, r8
    e870:	0affffef 	beq	e834 <CUSBDevice::Initialize()+0x32c>
    e874:	e1a01006 	mov	r1, r6
    e878:	eb0071c2 	bl	2af88 <operator delete(void*, unsigned int)>
    e87c:	eaffffec 	b	e834 <CUSBDevice::Initialize()+0x32c>
    e880:	e1a03006 	mov	r3, r6
    e884:	e1a00004 	mov	r0, r4
    e888:	e3a01001 	mov	r1, #1
    e88c:	e59f2364 	ldr	r2, [pc, #868]	; ebf8 <CUSBDevice::Initialize()+0x6f0>
    e890:	ebfffef0 	bl	e458 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e894:	eaffff47 	b	e5b8 <CUSBDevice::Initialize()+0xb0>
    e898:	e3a02c01 	mov	r2, #256	; 0x100
    e89c:	e59f1330 	ldr	r1, [pc, #816]	; ebd4 <CUSBDevice::Initialize()+0x6cc>
    e8a0:	e59f0354 	ldr	r0, [pc, #852]	; ebfc <CUSBDevice::Initialize()+0x6f4>
    e8a4:	eb0057a2 	bl	24734 <assertion_failed>
    e8a8:	e1a00004 	mov	r0, r4
    e8ac:	ebfffe54 	bl	e204 <CUSBDevice::GetNames() const>
    e8b0:	e2506000 	subs	r6, r0, #0
    e8b4:	0a0000b3 	beq	eb88 <CUSBDevice::Initialize()+0x680>
    e8b8:	eb00648d 	bl	27af4 <CString::operator char const*() const>
    e8bc:	e3a01003 	mov	r1, #3
    e8c0:	e1a03000 	mov	r3, r0
    e8c4:	e59f2334 	ldr	r2, [pc, #820]	; ec00 <CUSBDevice::Initialize()+0x6f8>
    e8c8:	e1a00004 	mov	r0, r4
    e8cc:	ebfffee1 	bl	e458 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e8d0:	e5963000 	ldr	r3, [r6]
    e8d4:	e1a00006 	mov	r0, r6
    e8d8:	e5933004 	ldr	r3, [r3, #4]
    e8dc:	e1a08009 	mov	r8, r9
    e8e0:	e1a07009 	mov	r7, r9
    e8e4:	e12fff33 	blx	r3
    e8e8:	e1a09005 	mov	r9, r5
    e8ec:	e59fb310 	ldr	fp, [pc, #784]	; ec04 <CUSBDevice::Initialize()+0x6fc>
    e8f0:	e59fa310 	ldr	sl, [pc, #784]	; ec08 <CUSBDevice::Initialize()+0x700>
    e8f4:	e3a01004 	mov	r1, #4
    e8f8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e8fc:	eb002436 	bl	179dc <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e900:	e3500000 	cmp	r0, #0
    e904:	0a000092 	beq	eb54 <CUSBDevice::Initialize()+0x64c>
    e908:	e5d03002 	ldrb	r3, [r0, #2]
    e90c:	e1530007 	cmp	r3, r7
    e910:	21a05003 	movcs	r5, r3
    e914:	31a05007 	movcc	r5, r7
    e918:	3a000051 	bcc	ea64 <CUSBDevice::Initialize()+0x55c>
    e91c:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    e920:	e3530000 	cmp	r3, #0
    e924:	0a000068 	beq	eacc <CUSBDevice::Initialize()+0x5c4>
    e928:	e0846108 	add	r6, r4, r8, lsl #2
    e92c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    e930:	e3530000 	cmp	r3, #0
    e934:	1a000060 	bne	eabc <CUSBDevice::Initialize()+0x5b4>
    e938:	e3a00010 	mov	r0, #16
    e93c:	eb007183 	bl	2af50 <operator new(unsigned int)>
    e940:	e1a07000 	mov	r7, r0
    e944:	e1a01004 	mov	r1, r4
    e948:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    e94c:	eb00035c 	bl	f6c4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    e950:	e3580000 	cmp	r8, #0
    e954:	e5867030 	str	r7, [r6, #48]	; 0x30
    e958:	1a000026 	bne	e9f8 <CUSBDevice::Initialize()+0x4f0>
    e95c:	e1a01008 	mov	r1, r8
    e960:	e1a00004 	mov	r0, r4
    e964:	ebfffde1 	bl	e0f0 <CUSBDevice::GetName(TDeviceNameSelector) const>
    e968:	e1a01000 	mov	r1, r0
    e96c:	e1a00007 	mov	r0, r7
    e970:	eb0000f1 	bl	ed3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    e974:	e2507000 	subs	r7, r0, #0
    e978:	0a000015 	beq	e9d4 <CUSBDevice::Initialize()+0x4cc>
    e97c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    e980:	e3530000 	cmp	r3, #0
    e984:	0a000058 	beq	eaec <CUSBDevice::Initialize()+0x5e4>
    e988:	e5932000 	ldr	r2, [r3]
    e98c:	e1a00003 	mov	r0, r3
    e990:	e5923004 	ldr	r3, [r2, #4]
    e994:	e12fff33 	blx	r3
    e998:	e3570000 	cmp	r7, #0
    e99c:	0a00007d 	beq	eb98 <CUSBDevice::Initialize()+0x690>
    e9a0:	e5973000 	ldr	r3, [r7]
    e9a4:	e1a00007 	mov	r0, r7
    e9a8:	e5933018 	ldr	r3, [r3, #24]
    e9ac:	e5867030 	str	r7, [r6, #48]	; 0x30
    e9b0:	e12fff33 	blx	r3
    e9b4:	e2503000 	subs	r3, r0, #0
    e9b8:	0a000053 	beq	eb0c <CUSBDevice::Initialize()+0x604>
    e9bc:	e2888001 	add	r8, r8, #1
    e9c0:	e358000a 	cmp	r8, #10
    e9c4:	0a000075 	beq	eba0 <CUSBDevice::Initialize()+0x698>
    e9c8:	e2855001 	add	r5, r5, #1
    e9cc:	e6ef7075 	uxtb	r7, r5
    e9d0:	eaffffc7 	b	e8f4 <CUSBDevice::Initialize()+0x3ec>
    e9d4:	e3a01001 	mov	r1, #1
    e9d8:	e1a00004 	mov	r0, r4
    e9dc:	e5947030 	ldr	r7, [r4, #48]	; 0x30
    e9e0:	ebfffdc2 	bl	e0f0 <CUSBDevice::GetName(TDeviceNameSelector) const>
    e9e4:	e1a01000 	mov	r1, r0
    e9e8:	e1a00007 	mov	r0, r7
    e9ec:	eb0000d2 	bl	ed3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    e9f0:	e2507000 	subs	r7, r0, #0
    e9f4:	1affffe0 	bne	e97c <CUSBDevice::Initialize()+0x474>
    e9f8:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    e9fc:	eb000391 	bl	f848 <CUSBFunction::GetInterfaceName() const>
    ea00:	e2507000 	subs	r7, r0, #0
    ea04:	0a00005b 	beq	eb78 <CUSBDevice::Initialize()+0x670>
    ea08:	e1a0100a 	mov	r1, sl
    ea0c:	eb00648f 	bl	27c50 <CString::Compare(char const*) const>
    ea10:	e2503000 	subs	r3, r0, #0
    ea14:	e58d3014 	str	r3, [sp, #20]
    ea18:	1a000018 	bne	ea80 <CUSBDevice::Initialize()+0x578>
    ea1c:	e5973000 	ldr	r3, [r7]
    ea20:	e1a00007 	mov	r0, r7
    ea24:	e5933004 	ldr	r3, [r3, #4]
    ea28:	e12fff33 	blx	r3
    ea2c:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    ea30:	e3500000 	cmp	r0, #0
    ea34:	0a000004 	beq	ea4c <CUSBDevice::Initialize()+0x544>
    ea38:	e5903000 	ldr	r3, [r0]
    ea3c:	e5933004 	ldr	r3, [r3, #4]
    ea40:	e12fff33 	blx	r3
    ea44:	e59d3014 	ldr	r3, [sp, #20]
    ea48:	e5863030 	str	r3, [r6, #48]	; 0x30
    ea4c:	e3a01002 	mov	r1, #2
    ea50:	e1a00004 	mov	r0, r4
    ea54:	e59f21b0 	ldr	r2, [pc, #432]	; ec0c <CUSBDevice::Initialize()+0x704>
    ea58:	e1a07005 	mov	r7, r5
    ea5c:	ebfffe7d 	bl	e458 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ea60:	eaffffa3 	b	e8f4 <CUSBDevice::Initialize()+0x3ec>
    ea64:	e5d03003 	ldrb	r3, [r0, #3]
    ea68:	e3a01004 	mov	r1, #4
    ea6c:	e1a00004 	mov	r0, r4
    ea70:	e59f2198 	ldr	r2, [pc, #408]	; ec10 <CUSBDevice::Initialize()+0x708>
    ea74:	e1a07005 	mov	r7, r5
    ea78:	ebfffe76 	bl	e458 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ea7c:	eaffff9c 	b	e8f4 <CUSBDevice::Initialize()+0x3ec>
    ea80:	e1a00007 	mov	r0, r7
    ea84:	eb00641a 	bl	27af4 <CString::operator char const*() const>
    ea88:	e3a01003 	mov	r1, #3
    ea8c:	e1a03000 	mov	r3, r0
    ea90:	e59f217c 	ldr	r2, [pc, #380]	; ec14 <CUSBDevice::Initialize()+0x70c>
    ea94:	e1a00004 	mov	r0, r4
    ea98:	ebfffe6e 	bl	e458 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ea9c:	e1a01007 	mov	r1, r7
    eaa0:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    eaa4:	eb0000a4 	bl	ed3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    eaa8:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    eaac:	e1a07000 	mov	r7, r0
    eab0:	e3530000 	cmp	r3, #0
    eab4:	1affffb3 	bne	e988 <CUSBDevice::Initialize()+0x480>
    eab8:	eaffffb6 	b	e998 <CUSBDevice::Initialize()+0x490>
    eabc:	e59f2154 	ldr	r2, [pc, #340]	; ec18 <CUSBDevice::Initialize()+0x710>
    eac0:	e59f110c 	ldr	r1, [pc, #268]	; ebd4 <CUSBDevice::Initialize()+0x6cc>
    eac4:	e59f0150 	ldr	r0, [pc, #336]	; ec1c <CUSBDevice::Initialize()+0x714>
    eac8:	eb005719 	bl	24734 <assertion_failed>
    eacc:	e59f214c 	ldr	r2, [pc, #332]	; ec20 <CUSBDevice::Initialize()+0x718>
    ead0:	e59f10fc 	ldr	r1, [pc, #252]	; ebd4 <CUSBDevice::Initialize()+0x6cc>
    ead4:	e59f0148 	ldr	r0, [pc, #328]	; ec24 <CUSBDevice::Initialize()+0x71c>
    ead8:	eb005715 	bl	24734 <assertion_failed>
    eadc:	e59f2144 	ldr	r2, [pc, #324]	; ec28 <CUSBDevice::Initialize()+0x720>
    eae0:	e59f10ec 	ldr	r1, [pc, #236]	; ebd4 <CUSBDevice::Initialize()+0x6cc>
    eae4:	e59f0140 	ldr	r0, [pc, #320]	; ec2c <CUSBDevice::Initialize()+0x724>
    eae8:	eb005711 	bl	24734 <assertion_failed>
    eaec:	e5973000 	ldr	r3, [r7]
    eaf0:	e1a00007 	mov	r0, r7
    eaf4:	e5933018 	ldr	r3, [r3, #24]
    eaf8:	e5847030 	str	r7, [r4, #48]	; 0x30
    eafc:	e12fff33 	blx	r3
    eb00:	e3500000 	cmp	r0, #0
    eb04:	13a08001 	movne	r8, #1
    eb08:	1affffae 	bne	e9c8 <CUSBDevice::Initialize()+0x4c0>
    eb0c:	e1a00004 	mov	r0, r4
    eb10:	e1a0200b 	mov	r2, fp
    eb14:	e3a01001 	mov	r1, #1
    eb18:	ebfffe4e 	bl	e458 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    eb1c:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    eb20:	e3500000 	cmp	r0, #0
    eb24:	0a000002 	beq	eb34 <CUSBDevice::Initialize()+0x62c>
    eb28:	e5903000 	ldr	r3, [r0]
    eb2c:	e5933004 	ldr	r3, [r3, #4]
    eb30:	e12fff33 	blx	r3
    eb34:	e3a03000 	mov	r3, #0
    eb38:	e1a07005 	mov	r7, r5
    eb3c:	e5863030 	str	r3, [r6, #48]	; 0x30
    eb40:	eaffff6b 	b	e8f4 <CUSBDevice::Initialize()+0x3ec>
    eb44:	e59f20e4 	ldr	r2, [pc, #228]	; ec30 <CUSBDevice::Initialize()+0x728>
    eb48:	e59f1084 	ldr	r1, [pc, #132]	; ebd4 <CUSBDevice::Initialize()+0x6cc>
    eb4c:	e59f00d0 	ldr	r0, [pc, #208]	; ec24 <CUSBDevice::Initialize()+0x71c>
    eb50:	eb0056f7 	bl	24734 <assertion_failed>
    eb54:	e3580000 	cmp	r8, #0
    eb58:	e1a05009 	mov	r5, r9
    eb5c:	1afffe95 	bne	e5b8 <CUSBDevice::Initialize()+0xb0>
    eb60:	e1a00004 	mov	r0, r4
    eb64:	e3a01002 	mov	r1, #2
    eb68:	e59f20c4 	ldr	r2, [pc, #196]	; ec34 <CUSBDevice::Initialize()+0x72c>
    eb6c:	e1a05008 	mov	r5, r8
    eb70:	ebfffe38 	bl	e458 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    eb74:	eafffe8f 	b	e5b8 <CUSBDevice::Initialize()+0xb0>
    eb78:	e3a02d06 	mov	r2, #384	; 0x180
    eb7c:	e59f1050 	ldr	r1, [pc, #80]	; ebd4 <CUSBDevice::Initialize()+0x6cc>
    eb80:	e59f00b0 	ldr	r0, [pc, #176]	; ec38 <CUSBDevice::Initialize()+0x730>
    eb84:	eb0056ea 	bl	24734 <assertion_failed>
    eb88:	e59f20ac 	ldr	r2, [pc, #172]	; ec3c <CUSBDevice::Initialize()+0x734>
    eb8c:	e59f1040 	ldr	r1, [pc, #64]	; ebd4 <CUSBDevice::Initialize()+0x6cc>
    eb90:	e59f00a8 	ldr	r0, [pc, #168]	; ec40 <CUSBDevice::Initialize()+0x738>
    eb94:	eb0056e6 	bl	24734 <assertion_failed>
    eb98:	e5867030 	str	r7, [r6, #48]	; 0x30
    eb9c:	eaffffaa 	b	ea4c <CUSBDevice::Initialize()+0x544>
    eba0:	e1a00004 	mov	r0, r4
    eba4:	e3a01002 	mov	r1, #2
    eba8:	e59f2094 	ldr	r2, [pc, #148]	; ec44 <CUSBDevice::Initialize()+0x73c>
    ebac:	e1a05003 	mov	r5, r3
    ebb0:	ebfffe28 	bl	e458 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ebb4:	eafffe7f 	b	e5b8 <CUSBDevice::Initialize()+0xb0>
    ebb8:	0003e1a0 	.word	0x0003e1a0
    ebbc:	0003e178 	.word	0x0003e178
    ebc0:	0004c518 	.word	0x0004c518
    ebc4:	00000525 	.word	0x00000525
    ebc8:	0000a4a2 	.word	0x0000a4a2
    ebcc:	0003e280 	.word	0x0003e280
    ebd0:	0003e3f0 	.word	0x0003e3f0
    ebd4:	0003e024 	.word	0x0003e024
    ebd8:	0003e164 	.word	0x0003e164
    ebdc:	0003dd68 	.word	0x0003dd68
    ebe0:	0003e10c 	.word	0x0003e10c
    ebe4:	0003e1e4 	.word	0x0003e1e4
    ebe8:	0003e1bc 	.word	0x0003e1bc
    ebec:	0003e25c 	.word	0x0003e25c
    ebf0:	0003e3a4 	.word	0x0003e3a4
    ebf4:	0003e230 	.word	0x0003e230
    ebf8:	0003e204 	.word	0x0003e204
    ebfc:	0003e21c 	.word	0x0003e21c
    ec00:	0003e2c8 	.word	0x0003e2c8
    ec04:	0003e344 	.word	0x0003e344
    ec08:	0003e0c8 	.word	0x0003e0c8
    ec0c:	0003e328 	.word	0x0003e328
    ec10:	0003e2d8 	.word	0x0003e2d8
    ec14:	0003e314 	.word	0x0003e314
    ec18:	0000016e 	.word	0x0000016e
    ec1c:	0003e2f8 	.word	0x0003e2f8
    ec20:	0000016d 	.word	0x0000016d
    ec24:	0003e134 	.word	0x0003e134
    ec28:	0000013e 	.word	0x0000013e
    ec2c:	0003e2a4 	.word	0x0003e2a4
    ec30:	0000028a 	.word	0x0000028a
    ec34:	0003e380 	.word	0x0003e380
    ec38:	0003e0dc 	.word	0x0003e0dc
    ec3c:	0000014a 	.word	0x0000014a
    ec40:	0003e2bc 	.word	0x0003e2bc
    ec44:	0003e360 	.word	0x0003e360

0000ec48 <CUSBDevice::Configure()>:
    ec48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ec4c:	e1a05000 	mov	r5, r0
    ec50:	e5900004 	ldr	r0, [r0, #4]
    ec54:	e3500000 	cmp	r0, #0
    ec58:	0a000029 	beq	ed04 <CUSBDevice::Configure()+0xbc>
    ec5c:	e5951018 	ldr	r1, [r5, #24]
    ec60:	e3510000 	cmp	r1, #0
    ec64:	0a00002a 	beq	ed14 <CUSBDevice::Configure()+0xcc>
    ec68:	e5956028 	ldr	r6, [r5, #40]	; 0x28
    ec6c:	e3560000 	cmp	r6, #0
    ec70:	0a000019 	beq	ecdc <CUSBDevice::Configure()+0x94>
    ec74:	e5d62005 	ldrb	r2, [r6, #5]
    ec78:	eb000f30 	bl	12940 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    ec7c:	e2506000 	subs	r6, r0, #0
    ec80:	0a000017 	beq	ece4 <CUSBDevice::Configure()+0x9c>
    ec84:	e3a06000 	mov	r6, #0
    ec88:	e1a07006 	mov	r7, r6
    ec8c:	e285402c 	add	r4, r5, #44	; 0x2c
    ec90:	e2855054 	add	r5, r5, #84	; 0x54
    ec94:	e5b40004 	ldr	r0, [r4, #4]!
    ec98:	e3500000 	cmp	r0, #0
    ec9c:	0a00000c 	beq	ecd4 <CUSBDevice::Configure()+0x8c>
    eca0:	e5903000 	ldr	r3, [r0]
    eca4:	e593301c 	ldr	r3, [r3, #28]
    eca8:	e12fff33 	blx	r3
    ecac:	e3500000 	cmp	r0, #0
    ecb0:	11a06000 	movne	r6, r0
    ecb4:	1a000006 	bne	ecd4 <CUSBDevice::Configure()+0x8c>
    ecb8:	e5940000 	ldr	r0, [r4]
    ecbc:	e3500000 	cmp	r0, #0
    ecc0:	0a000002 	beq	ecd0 <CUSBDevice::Configure()+0x88>
    ecc4:	e5903000 	ldr	r3, [r0]
    ecc8:	e5933004 	ldr	r3, [r3, #4]
    eccc:	e12fff33 	blx	r3
    ecd0:	e5847000 	str	r7, [r4]
    ecd4:	e1540005 	cmp	r4, r5
    ecd8:	1affffed 	bne	ec94 <CUSBDevice::Configure()+0x4c>
    ecdc:	e1a00006 	mov	r0, r6
    ece0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ece4:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    ece8:	e1a00005 	mov	r0, r5
    ecec:	e3a01001 	mov	r1, #1
    ecf0:	e5d33005 	ldrb	r3, [r3, #5]
    ecf4:	e59f2028 	ldr	r2, [pc, #40]	; ed24 <CUSBDevice::Configure()+0xdc>
    ecf8:	ebfffdd6 	bl	e458 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ecfc:	e1a00006 	mov	r0, r6
    ed00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ed04:	e59f201c 	ldr	r2, [pc, #28]	; ed28 <CUSBDevice::Configure()+0xe0>
    ed08:	e59f101c 	ldr	r1, [pc, #28]	; ed2c <CUSBDevice::Configure()+0xe4>
    ed0c:	e59f001c 	ldr	r0, [pc, #28]	; ed30 <CUSBDevice::Configure()+0xe8>
    ed10:	eb005687 	bl	24734 <assertion_failed>
    ed14:	e59f2018 	ldr	r2, [pc, #24]	; ed34 <CUSBDevice::Configure()+0xec>
    ed18:	e59f100c 	ldr	r1, [pc, #12]	; ed2c <CUSBDevice::Configure()+0xe4>
    ed1c:	e59f0014 	ldr	r0, [pc, #20]	; ed38 <CUSBDevice::Configure()+0xf0>
    ed20:	eb005683 	bl	24734 <assertion_failed>
    ed24:	0003e3b8 	.word	0x0003e3b8
    ed28:	000001b9 	.word	0x000001b9
    ed2c:	0003e024 	.word	0x0003e024
    ed30:	0003dd68 	.word	0x0003dd68
    ed34:	000001ba 	.word	0x000001ba
    ed38:	0003e10c 	.word	0x0003e10c

0000ed3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
    ed3c:	e92d4070 	push	{r4, r5, r6, lr}
    ed40:	e2505000 	subs	r5, r0, #0
    ed44:	0a00002c 	beq	edfc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xc0>
    ed48:	e3510000 	cmp	r1, #0
    ed4c:	e1a04001 	mov	r4, r1
    ed50:	0a00002d 	beq	ee0c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xd0>
    ed54:	e1a00004 	mov	r0, r4
    ed58:	e59f13cc 	ldr	r1, [pc, #972]	; f12c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f0>
    ed5c:	eb0063bb 	bl	27c50 <CString::Compare(char const*) const>
    ed60:	e3500000 	cmp	r0, #0
    ed64:	1a000014 	bne	edbc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x80>
    ed68:	e3a00068 	mov	r0, #104	; 0x68
    ed6c:	eb007077 	bl	2af50 <operator new(unsigned int)>
    ed70:	e1a01005 	mov	r1, r5
    ed74:	e1a05000 	mov	r5, r0
    ed78:	eb0016a2 	bl	14808 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
    ed7c:	e1a00005 	mov	r0, r5
    ed80:	eb0002da 	bl	f8f0 <CUSBFunction::GetDevice() const>
    ed84:	e1a06000 	mov	r6, r0
    ed88:	e1a00004 	mov	r0, r4
    ed8c:	eb006358 	bl	27af4 <CString::operator char const*() const>
    ed90:	e3a01003 	mov	r1, #3
    ed94:	e1a03000 	mov	r3, r0
    ed98:	e59f2390 	ldr	r2, [pc, #912]	; f130 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f4>
    ed9c:	e1a00006 	mov	r0, r6
    eda0:	ebfffdac 	bl	e458 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    eda4:	e5943000 	ldr	r3, [r4]
    eda8:	e1a00004 	mov	r0, r4
    edac:	e5933004 	ldr	r3, [r3, #4]
    edb0:	e12fff33 	blx	r3
    edb4:	e1a00005 	mov	r0, r5
    edb8:	e8bd8070 	pop	{r4, r5, r6, pc}
    edbc:	e1a00004 	mov	r0, r4
    edc0:	e59f136c 	ldr	r1, [pc, #876]	; f134 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f8>
    edc4:	eb0063a1 	bl	27c50 <CString::Compare(char const*) const>
    edc8:	e3500000 	cmp	r0, #0
    edcc:	0affffe5 	beq	ed68 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2c>
    edd0:	e1a00004 	mov	r0, r4
    edd4:	e59f135c 	ldr	r1, [pc, #860]	; f138 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3fc>
    edd8:	eb00639c 	bl	27c50 <CString::Compare(char const*) const>
    eddc:	e3500000 	cmp	r0, #0
    ede0:	1a00000d 	bne	ee1c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xe0>
    ede4:	e3a00030 	mov	r0, #48	; 0x30
    ede8:	eb007058 	bl	2af50 <operator new(unsigned int)>
    edec:	e1a01005 	mov	r1, r5
    edf0:	e1a05000 	mov	r5, r0
    edf4:	eb000f4b 	bl	12b28 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
    edf8:	eaffffdf 	b	ed7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    edfc:	e3a0202b 	mov	r2, #43	; 0x2b
    ee00:	e59f1334 	ldr	r1, [pc, #820]	; f13c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x400>
    ee04:	e59f0334 	ldr	r0, [pc, #820]	; f140 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x404>
    ee08:	eb005649 	bl	24734 <assertion_failed>
    ee0c:	e3a0202c 	mov	r2, #44	; 0x2c
    ee10:	e59f1324 	ldr	r1, [pc, #804]	; f13c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x400>
    ee14:	e59f0328 	ldr	r0, [pc, #808]	; f144 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x408>
    ee18:	eb005645 	bl	24734 <assertion_failed>
    ee1c:	e1a00004 	mov	r0, r4
    ee20:	e59f1320 	ldr	r1, [pc, #800]	; f148 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40c>
    ee24:	eb006389 	bl	27c50 <CString::Compare(char const*) const>
    ee28:	e3500000 	cmp	r0, #0
    ee2c:	0a00000a 	beq	ee5c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x120>
    ee30:	e1a00004 	mov	r0, r4
    ee34:	e59f1310 	ldr	r1, [pc, #784]	; f14c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x410>
    ee38:	eb006384 	bl	27c50 <CString::Compare(char const*) const>
    ee3c:	e3500000 	cmp	r0, #0
    ee40:	1a00000b 	bne	ee74 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x138>
    ee44:	e3a00030 	mov	r0, #48	; 0x30
    ee48:	eb007040 	bl	2af50 <operator new(unsigned int)>
    ee4c:	e1a01005 	mov	r1, r5
    ee50:	e1a05000 	mov	r5, r0
    ee54:	eb001465 	bl	13ff0 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
    ee58:	eaffffc7 	b	ed7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ee5c:	e3a00e45 	mov	r0, #1104	; 0x450
    ee60:	eb00703a 	bl	2af50 <operator new(unsigned int)>
    ee64:	e1a01005 	mov	r1, r5
    ee68:	e1a05000 	mov	r5, r0
    ee6c:	ebffeab2 	bl	993c <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
    ee70:	eaffffc1 	b	ed7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ee74:	e1a00004 	mov	r0, r4
    ee78:	e59f12d0 	ldr	r1, [pc, #720]	; f150 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x414>
    ee7c:	eb006373 	bl	27c50 <CString::Compare(char const*) const>
    ee80:	e3500000 	cmp	r0, #0
    ee84:	1a000006 	bne	eea4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x168>
    ee88:	e3a00f4f 	mov	r0, #316	; 0x13c
    ee8c:	eb00702f 	bl	2af50 <operator new(unsigned int)>
    ee90:	e1a01005 	mov	r1, r5
    ee94:	e3a02001 	mov	r2, #1
    ee98:	e1a05000 	mov	r5, r0
    ee9c:	eb00069a 	bl	1090c <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    eea0:	eaffffb5 	b	ed7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eea4:	e1a00004 	mov	r0, r4
    eea8:	e59f12a4 	ldr	r1, [pc, #676]	; f154 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x418>
    eeac:	eb006367 	bl	27c50 <CString::Compare(char const*) const>
    eeb0:	e3500000 	cmp	r0, #0
    eeb4:	1a000005 	bne	eed0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x194>
    eeb8:	e3a00f5b 	mov	r0, #364	; 0x16c
    eebc:	eb007023 	bl	2af50 <operator new(unsigned int)>
    eec0:	e1a01005 	mov	r1, r5
    eec4:	e1a05000 	mov	r5, r0
    eec8:	eb0003a1 	bl	fd54 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
    eecc:	eaffffaa 	b	ed7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eed0:	e1a00004 	mov	r0, r4
    eed4:	e59f127c 	ldr	r1, [pc, #636]	; f158 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x41c>
    eed8:	eb00635c 	bl	27c50 <CString::Compare(char const*) const>
    eedc:	e3500000 	cmp	r0, #0
    eee0:	0a000004 	beq	eef8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1bc>
    eee4:	e1a00004 	mov	r0, r4
    eee8:	e59f126c 	ldr	r1, [pc, #620]	; f15c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x420>
    eeec:	eb006357 	bl	27c50 <CString::Compare(char const*) const>
    eef0:	e3500000 	cmp	r0, #0
    eef4:	1a000005 	bne	ef10 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1d4>
    eef8:	e3a00f53 	mov	r0, #332	; 0x14c
    eefc:	eb007013 	bl	2af50 <operator new(unsigned int)>
    ef00:	e1a01005 	mov	r1, r5
    ef04:	e1a05000 	mov	r5, r0
    ef08:	eb0004f7 	bl	102ec <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
    ef0c:	eaffff9a 	b	ed7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ef10:	e1a00004 	mov	r0, r4
    ef14:	e59f1244 	ldr	r1, [pc, #580]	; f160 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x424>
    ef18:	eb00634c 	bl	27c50 <CString::Compare(char const*) const>
    ef1c:	e3500000 	cmp	r0, #0
    ef20:	0a000004 	beq	ef38 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1fc>
    ef24:	e1a00004 	mov	r0, r4
    ef28:	e59f1234 	ldr	r1, [pc, #564]	; f164 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x428>
    ef2c:	eb006347 	bl	27c50 <CString::Compare(char const*) const>
    ef30:	e3500000 	cmp	r0, #0
    ef34:	1a000005 	bne	ef50 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x214>
    ef38:	e3a00e13 	mov	r0, #304	; 0x130
    ef3c:	eb007003 	bl	2af50 <operator new(unsigned int)>
    ef40:	e1a01005 	mov	r1, r5
    ef44:	e1a05000 	mov	r5, r0
    ef48:	eb000aaa 	bl	119f8 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
    ef4c:	eaffff8a 	b	ed7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ef50:	e1a00004 	mov	r0, r4
    ef54:	e59f120c 	ldr	r1, [pc, #524]	; f168 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x42c>
    ef58:	eb00633c 	bl	27c50 <CString::Compare(char const*) const>
    ef5c:	e3500000 	cmp	r0, #0
    ef60:	0a000004 	beq	ef78 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x23c>
    ef64:	e1a00004 	mov	r0, r4
    ef68:	e59f11fc 	ldr	r1, [pc, #508]	; f16c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x430>
    ef6c:	eb006337 	bl	27c50 <CString::Compare(char const*) const>
    ef70:	e3500000 	cmp	r0, #0
    ef74:	1a000005 	bne	ef90 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x254>
    ef78:	e3a00f4d 	mov	r0, #308	; 0x134
    ef7c:	eb006ff3 	bl	2af50 <operator new(unsigned int)>
    ef80:	e1a01005 	mov	r1, r5
    ef84:	e1a05000 	mov	r5, r0
    ef88:	eb000bb3 	bl	11e5c <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
    ef8c:	eaffff7a 	b	ed7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ef90:	e1a00004 	mov	r0, r4
    ef94:	e59f11d4 	ldr	r1, [pc, #468]	; f170 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x434>
    ef98:	eb00632c 	bl	27c50 <CString::Compare(char const*) const>
    ef9c:	e3500000 	cmp	r0, #0
    efa0:	0afffff4 	beq	ef78 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x23c>
    efa4:	e1a00004 	mov	r0, r4
    efa8:	e59f11c4 	ldr	r1, [pc, #452]	; f174 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x438>
    efac:	eb006327 	bl	27c50 <CString::Compare(char const*) const>
    efb0:	e3500000 	cmp	r0, #0
    efb4:	0affffef 	beq	ef78 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x23c>
    efb8:	e1a00004 	mov	r0, r4
    efbc:	e59f11b4 	ldr	r1, [pc, #436]	; f178 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x43c>
    efc0:	eb006322 	bl	27c50 <CString::Compare(char const*) const>
    efc4:	e3500000 	cmp	r0, #0
    efc8:	1a000005 	bne	efe4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2a8>
    efcc:	e3a00f4d 	mov	r0, #308	; 0x134
    efd0:	eb006fde 	bl	2af50 <operator new(unsigned int)>
    efd4:	e1a01005 	mov	r1, r5
    efd8:	e1a05000 	mov	r5, r0
    efdc:	eb000906 	bl	113fc <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
    efe0:	eaffff65 	b	ed7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    efe4:	e1a00004 	mov	r0, r4
    efe8:	e59f118c 	ldr	r1, [pc, #396]	; f17c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x440>
    efec:	eb006317 	bl	27c50 <CString::Compare(char const*) const>
    eff0:	e3500000 	cmp	r0, #0
    eff4:	0a000004 	beq	f00c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2d0>
    eff8:	e1a00004 	mov	r0, r4
    effc:	e59f117c 	ldr	r1, [pc, #380]	; f180 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x444>
    f000:	eb006312 	bl	27c50 <CString::Compare(char const*) const>
    f004:	e3500000 	cmp	r0, #0
    f008:	1a000005 	bne	f024 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2e8>
    f00c:	e3a0001c 	mov	r0, #28
    f010:	eb006fce 	bl	2af50 <operator new(unsigned int)>
    f014:	e1a01005 	mov	r1, r5
    f018:	e1a05000 	mov	r5, r0
    f01c:	eb00144a 	bl	1414c <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
    f020:	eaffff55 	b	ed7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f024:	e1a00004 	mov	r0, r4
    f028:	e59f1154 	ldr	r1, [pc, #340]	; f184 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x448>
    f02c:	eb006307 	bl	27c50 <CString::Compare(char const*) const>
    f030:	e3500000 	cmp	r0, #0
    f034:	1a000005 	bne	f050 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x314>
    f038:	e3a00024 	mov	r0, #36	; 0x24
    f03c:	eb006fc3 	bl	2af50 <operator new(unsigned int)>
    f040:	e1a01005 	mov	r1, r5
    f044:	e1a05000 	mov	r5, r0
    f048:	eb001ce8 	bl	163f0 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
    f04c:	eaffff4a 	b	ed7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f050:	e1a00004 	mov	r0, r4
    f054:	e59f112c 	ldr	r1, [pc, #300]	; f188 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44c>
    f058:	eb0062fc 	bl	27c50 <CString::Compare(char const*) const>
    f05c:	e3500000 	cmp	r0, #0
    f060:	1a000005 	bne	f07c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x340>
    f064:	e3a00024 	mov	r0, #36	; 0x24
    f068:	eb006fb8 	bl	2af50 <operator new(unsigned int)>
    f06c:	e1a01005 	mov	r1, r5
    f070:	e1a05000 	mov	r5, r0
    f074:	eb001957 	bl	155d8 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
    f078:	eaffff3f 	b	ed7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f07c:	e1a00004 	mov	r0, r4
    f080:	e59f1104 	ldr	r1, [pc, #260]	; f18c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x450>
    f084:	eb0062f1 	bl	27c50 <CString::Compare(char const*) const>
    f088:	e3500000 	cmp	r0, #0
    f08c:	0a000004 	beq	f0a4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x368>
    f090:	e1a00004 	mov	r0, r4
    f094:	e59f10f4 	ldr	r1, [pc, #244]	; f190 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x454>
    f098:	eb0062ec 	bl	27c50 <CString::Compare(char const*) const>
    f09c:	e3500000 	cmp	r0, #0
    f0a0:	1a000005 	bne	f0bc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x380>
    f0a4:	e3a00028 	mov	r0, #40	; 0x28
    f0a8:	eb006fa8 	bl	2af50 <operator new(unsigned int)>
    f0ac:	e1a01005 	mov	r1, r5
    f0b0:	e1a05000 	mov	r5, r0
    f0b4:	eb001f1b 	bl	16d28 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
    f0b8:	eaffff2f 	b	ed7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f0bc:	e1a00004 	mov	r0, r4
    f0c0:	e59f10cc 	ldr	r1, [pc, #204]	; f194 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x458>
    f0c4:	eb0062e1 	bl	27c50 <CString::Compare(char const*) const>
    f0c8:	e3500000 	cmp	r0, #0
    f0cc:	0a000004 	beq	f0e4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3a8>
    f0d0:	e1a00004 	mov	r0, r4
    f0d4:	e59f10bc 	ldr	r1, [pc, #188]	; f198 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x45c>
    f0d8:	eb0062dc 	bl	27c50 <CString::Compare(char const*) const>
    f0dc:	e3500000 	cmp	r0, #0
    f0e0:	1a000005 	bne	f0fc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3c0>
    f0e4:	e3a00028 	mov	r0, #40	; 0x28
    f0e8:	eb006f98 	bl	2af50 <operator new(unsigned int)>
    f0ec:	e1a01005 	mov	r1, r5
    f0f0:	e1a05000 	mov	r5, r0
    f0f4:	eb0011a4 	bl	1378c <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>
    f0f8:	eaffff1f 	b	ed7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f0fc:	e1a00004 	mov	r0, r4
    f100:	e59f1094 	ldr	r1, [pc, #148]	; f19c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x460>
    f104:	eb0062d1 	bl	27c50 <CString::Compare(char const*) const>
    f108:	e3500000 	cmp	r0, #0
    f10c:	13a05000 	movne	r5, #0
    f110:	1affff23 	bne	eda4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
    f114:	e3a00024 	mov	r0, #36	; 0x24
    f118:	eb006f8c 	bl	2af50 <operator new(unsigned int)>
    f11c:	e1a01005 	mov	r1, r5
    f120:	e1a05000 	mov	r5, r0
    f124:	eb0020dc 	bl	1749c <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
    f128:	eaffff13 	b	ed7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f12c:	0003e420 	.word	0x0003e420
    f130:	0003e54c 	.word	0x0003e54c
    f134:	0003e42c 	.word	0x0003e42c
    f138:	0003e438 	.word	0x0003e438
    f13c:	0003e3f8 	.word	0x0003e3f8
    f140:	0003e410 	.word	0x0003e410
    f144:	0003e0dc 	.word	0x0003e0dc
    f148:	0003e444 	.word	0x0003e444
    f14c:	0003e450 	.word	0x0003e450
    f150:	0003e45c 	.word	0x0003e45c
    f154:	0003e468 	.word	0x0003e468
    f158:	0003e474 	.word	0x0003e474
    f15c:	0003e480 	.word	0x0003e480
    f160:	0003e48c 	.word	0x0003e48c
    f164:	0003e498 	.word	0x0003e498
    f168:	0003e4a4 	.word	0x0003e4a4
    f16c:	0003e4b0 	.word	0x0003e4b0
    f170:	0003e4bc 	.word	0x0003e4bc
    f174:	0003e4c8 	.word	0x0003e4c8
    f178:	0003e4d4 	.word	0x0003e4d4
    f17c:	0003e4e0 	.word	0x0003e4e0
    f180:	0003e4ec 	.word	0x0003e4ec
    f184:	0003e4f8 	.word	0x0003e4f8
    f188:	0003e504 	.word	0x0003e504
    f18c:	0003e510 	.word	0x0003e510
    f190:	0003e51c 	.word	0x0003e51c
    f194:	0003e528 	.word	0x0003e528
    f198:	0003e534 	.word	0x0003e534
    f19c:	0003e540 	.word	0x0003e540

0000f1a0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
    f1a0:	e3a02000 	mov	r2, #0
    f1a4:	e92d4010 	push	{r4, lr}
    f1a8:	e3a0c001 	mov	ip, #1
    f1ac:	e3a0e008 	mov	lr, #8
    f1b0:	e1510002 	cmp	r1, r2
    f1b4:	e5801000 	str	r1, [r0]
    f1b8:	e580e008 	str	lr, [r0, #8]
    f1bc:	e580c00c 	str	ip, [r0, #12]
    f1c0:	e1c020b4 	strh	r2, [r0, #4]
    f1c4:	e5c02006 	strb	r2, [r0, #6]
    f1c8:	e5c02010 	strb	r2, [r0, #16]
    f1cc:	18bd8010 	popne	{r4, pc}
    f1d0:	e3a02023 	mov	r2, #35	; 0x23
    f1d4:	e59f1004 	ldr	r1, [pc, #4]	; f1e0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x40>
    f1d8:	e59f0004 	ldr	r0, [pc, #4]	; f1e4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x44>
    f1dc:	eb005554 	bl	24734 <assertion_failed>
    f1e0:	0003e568 	.word	0x0003e568
    f1e4:	0003df08 	.word	0x0003df08

0000f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
    f1e8:	e92d4070 	push	{r4, r5, r6, lr}
    f1ec:	e3a05001 	mov	r5, #1
    f1f0:	e3510000 	cmp	r1, #0
    f1f4:	e5801000 	str	r1, [r0]
    f1f8:	e580500c 	str	r5, [r0, #12]
    f1fc:	e5c05010 	strb	r5, [r0, #16]
    f200:	0a000040 	beq	f308 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x120>
    f204:	e3520000 	cmp	r2, #0
    f208:	0a000042 	beq	f318 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x130>
    f20c:	e5d23000 	ldrb	r3, [r2]
    f210:	e3530006 	cmp	r3, #6
    f214:	9a000043 	bls	f328 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x140>
    f218:	e5d23001 	ldrb	r3, [r2, #1]
    f21c:	e3530005 	cmp	r3, #5
    f220:	1a000044 	bne	f338 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x150>
    f224:	e5d23003 	ldrb	r3, [r2, #3]
    f228:	e1a04000 	mov	r4, r0
    f22c:	e2033003 	and	r3, r3, #3
    f230:	e3530002 	cmp	r3, #2
    f234:	0a000020 	beq	f2bc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd4>
    f238:	e3530003 	cmp	r3, #3
    f23c:	1a000043 	bne	f350 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x168>
    f240:	e3a00002 	mov	r0, #2
    f244:	e5d23002 	ldrb	r3, [r2, #2]
    f248:	e5c40005 	strb	r0, [r4, #5]
    f24c:	e203000f 	and	r0, r3, #15
    f250:	e1a033a3 	lsr	r3, r3, #7
    f254:	e5c40004 	strb	r0, [r4, #4]
    f258:	e5c43006 	strb	r3, [r4, #6]
    f25c:	e5d20005 	ldrb	r0, [r2, #5]
    f260:	e5d23004 	ldrb	r3, [r2, #4]
    f264:	e5d22006 	ldrb	r2, [r2, #6]
    f268:	e1833400 	orr	r3, r3, r0, lsl #8
    f26c:	e1a03a83 	lsl	r3, r3, #21
    f270:	e1a03aa3 	lsr	r3, r3, #21
    f274:	e3520001 	cmp	r2, #1
    f278:	e1a00001 	mov	r0, r1
    f27c:	e5843008 	str	r3, [r4, #8]
    f280:	21a06002 	movcs	r6, r2
    f284:	33a06001 	movcc	r6, #1
    f288:	ebfffc27 	bl	e32c <CUSBDevice::GetSpeed() const>
    f28c:	e3500001 	cmp	r0, #1
    f290:	9a000017 	bls	f2f4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x10c>
    f294:	e3560010 	cmp	r6, #16
    f298:	31a02006 	movcc	r2, r6
    f29c:	23a02010 	movcs	r2, #16
    f2a0:	e2422001 	sub	r2, r2, #1
    f2a4:	e1a05215 	lsl	r5, r5, r2
    f2a8:	e1b021a5 	lsrs	r2, r5, #3
    f2ac:	1a000025 	bne	f348 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x160>
    f2b0:	e3a03014 	mov	r3, #20
    f2b4:	e584300c 	str	r3, [r4, #12]
    f2b8:	ea00000b 	b	f2ec <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x104>
    f2bc:	e5d23002 	ldrb	r3, [r2, #2]
    f2c0:	e5c05005 	strb	r5, [r0, #5]
    f2c4:	e203100f 	and	r1, r3, #15
    f2c8:	e1a033a3 	lsr	r3, r3, #7
    f2cc:	e5c01004 	strb	r1, [r0, #4]
    f2d0:	e5c03006 	strb	r3, [r0, #6]
    f2d4:	e5d23004 	ldrb	r3, [r2, #4]
    f2d8:	e5d22005 	ldrb	r2, [r2, #5]
    f2dc:	e1833402 	orr	r3, r3, r2, lsl #8
    f2e0:	e1a03a83 	lsl	r3, r3, #21
    f2e4:	e1a03aa3 	lsr	r3, r3, #21
    f2e8:	e5803008 	str	r3, [r0, #8]
    f2ec:	e1a00004 	mov	r0, r4
    f2f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    f2f4:	e1a02006 	mov	r2, r6
    f2f8:	e584600c 	str	r6, [r4, #12]
    f2fc:	e3520013 	cmp	r2, #19
    f300:	8afffff9 	bhi	f2ec <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x104>
    f304:	eaffffe9 	b	f2b0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc8>
    f308:	e3a02032 	mov	r2, #50	; 0x32
    f30c:	e59f104c 	ldr	r1, [pc, #76]	; f360 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    f310:	e59f004c 	ldr	r0, [pc, #76]	; f364 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x17c>
    f314:	eb005506 	bl	24734 <assertion_failed>
    f318:	e3a02034 	mov	r2, #52	; 0x34
    f31c:	e59f103c 	ldr	r1, [pc, #60]	; f360 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    f320:	e59f0040 	ldr	r0, [pc, #64]	; f368 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x180>
    f324:	eb005502 	bl	24734 <assertion_failed>
    f328:	e3a02035 	mov	r2, #53	; 0x35
    f32c:	e59f102c 	ldr	r1, [pc, #44]	; f360 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    f330:	e59f0034 	ldr	r0, [pc, #52]	; f36c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x184>
    f334:	eb0054fe 	bl	24734 <assertion_failed>
    f338:	e3a02036 	mov	r2, #54	; 0x36
    f33c:	e59f101c 	ldr	r1, [pc, #28]	; f360 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    f340:	e59f0028 	ldr	r0, [pc, #40]	; f370 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x188>
    f344:	eb0054fa 	bl	24734 <assertion_failed>
    f348:	e584200c 	str	r2, [r4, #12]
    f34c:	eaffffea 	b	f2fc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x114>
    f350:	e3a02043 	mov	r2, #67	; 0x43
    f354:	e59f1004 	ldr	r1, [pc, #4]	; f360 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    f358:	e59f0014 	ldr	r0, [pc, #20]	; f374 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x18c>
    f35c:	eb0054f4 	bl	24734 <assertion_failed>
    f360:	0003e568 	.word	0x0003e568
    f364:	0003df08 	.word	0x0003df08
    f368:	0003e578 	.word	0x0003e578
    f36c:	0003e584 	.word	0x0003e584
    f370:	0003e5a4 	.word	0x0003e5a4
    f374:	0003e11c 	.word	0x0003e11c

0000f378 <CUSBEndpoint::~CUSBEndpoint()>:
    f378:	e12fff1e 	bx	lr

0000f37c <CUSBEndpoint::GetDevice() const>:
    f37c:	e5900000 	ldr	r0, [r0]
    f380:	e3500000 	cmp	r0, #0
    f384:	112fff1e 	bxne	lr
    f388:	e3a02086 	mov	r2, #134	; 0x86
    f38c:	e92d4010 	push	{r4, lr}
    f390:	e59f1004 	ldr	r1, [pc, #4]	; f39c <CUSBEndpoint::GetDevice() const+0x20>
    f394:	e59f0004 	ldr	r0, [pc, #4]	; f3a0 <CUSBEndpoint::GetDevice() const+0x24>
    f398:	eb0054e5 	bl	24734 <assertion_failed>
    f39c:	0003e568 	.word	0x0003e568
    f3a0:	0003df08 	.word	0x0003df08

0000f3a4 <CUSBEndpoint::GetNumber() const>:
    f3a4:	e5d00004 	ldrb	r0, [r0, #4]
    f3a8:	e12fff1e 	bx	lr

0000f3ac <CUSBEndpoint::GetType() const>:
    f3ac:	e5d00005 	ldrb	r0, [r0, #5]
    f3b0:	e12fff1e 	bx	lr

0000f3b4 <CUSBEndpoint::IsDirectionIn() const>:
    f3b4:	e5d00006 	ldrb	r0, [r0, #6]
    f3b8:	e12fff1e 	bx	lr

0000f3bc <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
    f3bc:	e1a03000 	mov	r3, r0
    f3c0:	e3a00001 	mov	r0, #1
    f3c4:	e5831008 	str	r1, [r3, #8]
    f3c8:	e12fff1e 	bx	lr

0000f3cc <CUSBEndpoint::GetMaxPacketSize() const>:
    f3cc:	e5900008 	ldr	r0, [r0, #8]
    f3d0:	e12fff1e 	bx	lr

0000f3d4 <CUSBEndpoint::GetInterval() const>:
    f3d4:	e5d03005 	ldrb	r3, [r0, #5]
    f3d8:	e3530002 	cmp	r3, #2
    f3dc:	1a000001 	bne	f3e8 <CUSBEndpoint::GetInterval() const+0x14>
    f3e0:	e590000c 	ldr	r0, [r0, #12]
    f3e4:	e12fff1e 	bx	lr
    f3e8:	e3a020ae 	mov	r2, #174	; 0xae
    f3ec:	e92d4010 	push	{r4, lr}
    f3f0:	e59f1004 	ldr	r1, [pc, #4]	; f3fc <CUSBEndpoint::GetInterval() const+0x28>
    f3f4:	e59f0004 	ldr	r0, [pc, #4]	; f400 <CUSBEndpoint::GetInterval() const+0x2c>
    f3f8:	eb0054cd 	bl	24734 <assertion_failed>
    f3fc:	0003e568 	.word	0x0003e568
    f400:	0003e5d4 	.word	0x0003e5d4

0000f404 <CUSBEndpoint::GetNextPID(bool)>:
    f404:	e3510000 	cmp	r1, #0
    f408:	0a000004 	beq	f420 <CUSBEndpoint::GetNextPID(bool)+0x1c>
    f40c:	e5d03005 	ldrb	r3, [r0, #5]
    f410:	e3530000 	cmp	r3, #0
    f414:	1a000003 	bne	f428 <CUSBEndpoint::GetNextPID(bool)+0x24>
    f418:	e3a00002 	mov	r0, #2
    f41c:	e12fff1e 	bx	lr
    f420:	e5d00010 	ldrb	r0, [r0, #16]
    f424:	e12fff1e 	bx	lr
    f428:	e3a020b7 	mov	r2, #183	; 0xb7
    f42c:	e92d4010 	push	{r4, lr}
    f430:	e59f1004 	ldr	r1, [pc, #4]	; f43c <CUSBEndpoint::GetNextPID(bool)+0x38>
    f434:	e59f0004 	ldr	r0, [pc, #4]	; f440 <CUSBEndpoint::GetNextPID(bool)+0x3c>
    f438:	eb0054bd 	bl	24734 <assertion_failed>
    f43c:	0003e568 	.word	0x0003e568
    f440:	0003e5f4 	.word	0x0003e5f4

0000f444 <CUSBEndpoint::SkipPID(unsigned int, bool)>:
    f444:	e5d03005 	ldrb	r3, [r0, #5]
    f448:	e92d4010 	push	{r4, lr}
    f44c:	e3530002 	cmp	r3, #2
    f450:	8a000019 	bhi	f4bc <CUSBEndpoint::SkipPID(unsigned int, bool)+0x78>
    f454:	e3520000 	cmp	r2, #0
    f458:	1a000008 	bne	f480 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x3c>
    f45c:	e5d03010 	ldrb	r3, [r0, #16]
    f460:	e3530001 	cmp	r3, #1
    f464:	0a00000f 	beq	f4a8 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x64>
    f468:	e3530002 	cmp	r3, #2
    f46c:	1a000007 	bne	f490 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x4c>
    f470:	e3110001 	tst	r1, #1
    f474:	13a03001 	movne	r3, #1
    f478:	15c03010 	strbne	r3, [r0, #16]
    f47c:	e8bd8010 	pop	{r4, pc}
    f480:	e3530000 	cmp	r3, #0
    f484:	1a000010 	bne	f4cc <CUSBEndpoint::SkipPID(unsigned int, bool)+0x88>
    f488:	e5c03010 	strb	r3, [r0, #16]
    f48c:	e8bd8010 	pop	{r4, pc}
    f490:	e3530000 	cmp	r3, #0
    f494:	0a000005 	beq	f4b0 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x6c>
    f498:	e3a020dc 	mov	r2, #220	; 0xdc
    f49c:	e59f1038 	ldr	r1, [pc, #56]	; f4dc <CUSBEndpoint::SkipPID(unsigned int, bool)+0x98>
    f4a0:	e59f0038 	ldr	r0, [pc, #56]	; f4e0 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x9c>
    f4a4:	eb0054a2 	bl	24734 <assertion_failed>
    f4a8:	e3110001 	tst	r1, #1
    f4ac:	08bd8010 	popeq	{r4, pc}
    f4b0:	e3a03002 	mov	r3, #2
    f4b4:	e5c03010 	strb	r3, [r0, #16]
    f4b8:	e8bd8010 	pop	{r4, pc}
    f4bc:	e3a020c1 	mov	r2, #193	; 0xc1
    f4c0:	e59f1014 	ldr	r1, [pc, #20]	; f4dc <CUSBEndpoint::SkipPID(unsigned int, bool)+0x98>
    f4c4:	e59f0018 	ldr	r0, [pc, #24]	; f4e4 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa0>
    f4c8:	eb005499 	bl	24734 <assertion_failed>
    f4cc:	e3a020e2 	mov	r2, #226	; 0xe2
    f4d0:	e59f1004 	ldr	r1, [pc, #4]	; f4dc <CUSBEndpoint::SkipPID(unsigned int, bool)+0x98>
    f4d4:	e59f000c 	ldr	r0, [pc, #12]	; f4e8 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa4>
    f4d8:	eb005495 	bl	24734 <assertion_failed>
    f4dc:	0003e568 	.word	0x0003e568
    f4e0:	0003e11c 	.word	0x0003e11c
    f4e4:	0003e614 	.word	0x0003e614
    f4e8:	0003e5f4 	.word	0x0003e5f4

0000f4ec <CUSBEndpoint::ResetPID()>:
    f4ec:	e5d03005 	ldrb	r3, [r0, #5]
    f4f0:	e3530001 	cmp	r3, #1
    f4f4:	1a000001 	bne	f500 <CUSBEndpoint::ResetPID()+0x14>
    f4f8:	e5c03010 	strb	r3, [r0, #16]
    f4fc:	e12fff1e 	bx	lr
    f500:	e3a020ed 	mov	r2, #237	; 0xed
    f504:	e92d4010 	push	{r4, lr}
    f508:	e59f1004 	ldr	r1, [pc, #4]	; f514 <CUSBEndpoint::ResetPID()+0x28>
    f50c:	e59f0004 	ldr	r0, [pc, #4]	; f518 <CUSBEndpoint::ResetPID()+0x2c>
    f510:	eb005487 	bl	24734 <assertion_failed>
    f514:	0003e568 	.word	0x0003e568
    f518:	0003e674 	.word	0x0003e674

0000f51c <CUSBFunction::Initialize()>:
    f51c:	e3a00001 	mov	r0, #1
    f520:	e12fff1e 	bx	lr

0000f524 <CUSBFunction::ReScanDevices()>:
    f524:	e3a00000 	mov	r0, #0
    f528:	e12fff1e 	bx	lr

0000f52c <CUSBFunction::~CUSBFunction()>:
    f52c:	e3a03000 	mov	r3, #0
    f530:	e92d4070 	push	{r4, r5, r6, lr}
    f534:	e5905008 	ldr	r5, [r0, #8]
    f538:	e59f2040 	ldr	r2, [pc, #64]	; f580 <CUSBFunction::~CUSBFunction()+0x54>
    f53c:	e1550003 	cmp	r5, r3
    f540:	e1a04000 	mov	r4, r0
    f544:	e5802000 	str	r2, [r0]
    f548:	e580300c 	str	r3, [r0, #12]
    f54c:	0a000004 	beq	f564 <CUSBFunction::~CUSBFunction()+0x38>
    f550:	e1a00005 	mov	r0, r5
    f554:	eb00211d 	bl	179d0 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    f558:	e1a00005 	mov	r0, r5
    f55c:	e3a0101c 	mov	r1, #28
    f560:	eb006e88 	bl	2af88 <operator delete(void*, unsigned int)>
    f564:	e3a03000 	mov	r3, #0
    f568:	e1a00004 	mov	r0, r4
    f56c:	e5843008 	str	r3, [r4, #8]
    f570:	e5843004 	str	r3, [r4, #4]
    f574:	eb005647 	bl	24e98 <CDevice::~CDevice()>
    f578:	e1a00004 	mov	r0, r4
    f57c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f580:	0003e738 	.word	0x0003e738

0000f584 <CUSBFunction::~CUSBFunction()>:
    f584:	e92d4010 	push	{r4, lr}
    f588:	e1a04000 	mov	r4, r0
    f58c:	ebffffe6 	bl	f52c <CUSBFunction::~CUSBFunction()>
    f590:	e1a00004 	mov	r0, r4
    f594:	e3a01010 	mov	r1, #16
    f598:	eb006e7a 	bl	2af88 <operator delete(void*, unsigned int)>
    f59c:	e1a00004 	mov	r0, r4
    f5a0:	e8bd8010 	pop	{r4, pc}

0000f5a4 <CUSBFunction::RemoveDevice()>:
    f5a4:	e5900004 	ldr	r0, [r0, #4]
    f5a8:	e3500000 	cmp	r0, #0
    f5ac:	0a000000 	beq	f5b4 <CUSBFunction::RemoveDevice()+0x10>
    f5b0:	eafffaba 	b	e0a0 <CUSBDevice::RemoveDevice()>
    f5b4:	e3a02066 	mov	r2, #102	; 0x66
    f5b8:	e92d4010 	push	{r4, lr}
    f5bc:	e59f1004 	ldr	r1, [pc, #4]	; f5c8 <CUSBFunction::RemoveDevice()+0x24>
    f5c0:	e59f0004 	ldr	r0, [pc, #4]	; f5cc <CUSBFunction::RemoveDevice()+0x28>
    f5c4:	eb00545a 	bl	24734 <assertion_failed>
    f5c8:	0003e690 	.word	0x0003e690
    f5cc:	0003df08 	.word	0x0003df08

0000f5d0 <CUSBFunction::Configure()>:
    f5d0:	e92d4070 	push	{r4, r5, r6, lr}
    f5d4:	e590300c 	ldr	r3, [r0, #12]
    f5d8:	e24dd010 	sub	sp, sp, #16
    f5dc:	e3530000 	cmp	r3, #0
    f5e0:	0a000026 	beq	f680 <CUSBFunction::Configure()+0xb0>
    f5e4:	e5d33003 	ldrb	r3, [r3, #3]
    f5e8:	e3530000 	cmp	r3, #0
    f5ec:	0a000019 	beq	f658 <CUSBFunction::Configure()+0x88>
    f5f0:	e1a04000 	mov	r4, r0
    f5f4:	e5900004 	ldr	r0, [r0, #4]
    f5f8:	e3500000 	cmp	r0, #0
    f5fc:	0a000023 	beq	f690 <CUSBFunction::Configure()+0xc0>
    f600:	ebfffb5d 	bl	e37c <CUSBDevice::GetHost() const>
    f604:	e5943004 	ldr	r3, [r4, #4]
    f608:	e1a06000 	mov	r6, r0
    f60c:	e3530000 	cmp	r3, #0
    f610:	0a000022 	beq	f6a0 <CUSBFunction::Configure()+0xd0>
    f614:	e3a05000 	mov	r5, #0
    f618:	e1a00003 	mov	r0, r3
    f61c:	ebfffb4c 	bl	e354 <CUSBDevice::GetEndpoint0() const>
    f620:	e594300c 	ldr	r3, [r4, #12]
    f624:	e58d500c 	str	r5, [sp, #12]
    f628:	e58d5008 	str	r5, [sp, #8]
    f62c:	e5d32002 	ldrb	r2, [r3, #2]
    f630:	e1a01000 	mov	r1, r0
    f634:	e58d2004 	str	r2, [sp, #4]
    f638:	e5d33003 	ldrb	r3, [r3, #3]
    f63c:	e1a00006 	mov	r0, r6
    f640:	e58d3000 	str	r3, [sp]
    f644:	e3a02001 	mov	r2, #1
    f648:	e3a0300b 	mov	r3, #11
    f64c:	eb000c68 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f650:	e1500005 	cmp	r0, r5
    f654:	ba000002 	blt	f664 <CUSBFunction::Configure()+0x94>
    f658:	e3a00001 	mov	r0, #1
    f65c:	e28dd010 	add	sp, sp, #16
    f660:	e8bd8070 	pop	{r4, r5, r6, pc}
    f664:	eb005d1a 	bl	26ad4 <CLogger::Get()>
    f668:	e3a02001 	mov	r2, #1
    f66c:	e59f303c 	ldr	r3, [pc, #60]	; f6b0 <CUSBFunction::Configure()+0xe0>
    f670:	e59f103c 	ldr	r1, [pc, #60]	; f6b4 <CUSBFunction::Configure()+0xe4>
    f674:	eb005c58 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f678:	e1a00005 	mov	r0, r5
    f67c:	eafffff6 	b	f65c <CUSBFunction::Configure()+0x8c>
    f680:	e3a0204e 	mov	r2, #78	; 0x4e
    f684:	e59f102c 	ldr	r1, [pc, #44]	; f6b8 <CUSBFunction::Configure()+0xe8>
    f688:	e59f002c 	ldr	r0, [pc, #44]	; f6bc <CUSBFunction::Configure()+0xec>
    f68c:	eb005428 	bl	24734 <assertion_failed>
    f690:	e3a02090 	mov	r2, #144	; 0x90
    f694:	e59f101c 	ldr	r1, [pc, #28]	; f6b8 <CUSBFunction::Configure()+0xe8>
    f698:	e59f0020 	ldr	r0, [pc, #32]	; f6c0 <CUSBFunction::Configure()+0xf0>
    f69c:	eb005424 	bl	24734 <assertion_failed>
    f6a0:	e3a0208a 	mov	r2, #138	; 0x8a
    f6a4:	e59f100c 	ldr	r1, [pc, #12]	; f6b8 <CUSBFunction::Configure()+0xe8>
    f6a8:	e59f0010 	ldr	r0, [pc, #16]	; f6c0 <CUSBFunction::Configure()+0xf0>
    f6ac:	eb005420 	bl	24734 <assertion_failed>
    f6b0:	0003e6b8 	.word	0x0003e6b8
    f6b4:	0003e75c 	.word	0x0003e75c
    f6b8:	0003e690 	.word	0x0003e690
    f6bc:	0003e6a0 	.word	0x0003e6a0
    f6c0:	0003df08 	.word	0x0003df08

0000f6c4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
    f6c4:	e92d4070 	push	{r4, r5, r6, lr}
    f6c8:	e1a04000 	mov	r4, r0
    f6cc:	e1a05001 	mov	r5, r1
    f6d0:	e1a06002 	mov	r6, r2
    f6d4:	eb0055fd 	bl	24ed0 <CDevice::CDevice()>
    f6d8:	e3a03000 	mov	r3, #0
    f6dc:	e59f207c 	ldr	r2, [pc, #124]	; f760 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x9c>
    f6e0:	e1550003 	cmp	r5, r3
    f6e4:	e8840024 	stm	r4, {r2, r5}
    f6e8:	e5843008 	str	r3, [r4, #8]
    f6ec:	e584300c 	str	r3, [r4, #12]
    f6f0:	0a00000e 	beq	f730 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x6c>
    f6f4:	e3560000 	cmp	r6, #0
    f6f8:	0a000010 	beq	f740 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x7c>
    f6fc:	e3a0001c 	mov	r0, #28
    f700:	eb006e12 	bl	2af50 <operator new(unsigned int)>
    f704:	e1a05000 	mov	r5, r0
    f708:	e1a01006 	mov	r1, r6
    f70c:	eb002097 	bl	17970 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
    f710:	e1a00005 	mov	r0, r5
    f714:	e5845008 	str	r5, [r4, #8]
    f718:	eb0020d8 	bl	17a80 <CUSBConfigurationParser::GetCurrentDescriptor()>
    f71c:	e3500000 	cmp	r0, #0
    f720:	e584000c 	str	r0, [r4, #12]
    f724:	0a000009 	beq	f750 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x8c>
    f728:	e1a00004 	mov	r0, r4
    f72c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f730:	e3a02022 	mov	r2, #34	; 0x22
    f734:	e59f1028 	ldr	r1, [pc, #40]	; f764 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    f738:	e59f0028 	ldr	r0, [pc, #40]	; f768 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa4>
    f73c:	eb0053fc 	bl	24734 <assertion_failed>
    f740:	e3a02024 	mov	r2, #36	; 0x24
    f744:	e59f1018 	ldr	r1, [pc, #24]	; f764 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    f748:	e59f001c 	ldr	r0, [pc, #28]	; f76c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa8>
    f74c:	eb0053f8 	bl	24734 <assertion_failed>
    f750:	e3a02029 	mov	r2, #41	; 0x29
    f754:	e59f1008 	ldr	r1, [pc, #8]	; f764 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    f758:	e59f0010 	ldr	r0, [pc, #16]	; f770 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xac>
    f75c:	eb0053f4 	bl	24734 <assertion_failed>
    f760:	0003e738 	.word	0x0003e738
    f764:	0003e690 	.word	0x0003e690
    f768:	0003df08 	.word	0x0003df08
    f76c:	0003e6d0 	.word	0x0003e6d0
    f770:	0003e6a0 	.word	0x0003e6a0

0000f774 <CUSBFunction::CUSBFunction(CUSBFunction*)>:
    f774:	e92d4070 	push	{r4, r5, r6, lr}
    f778:	e1a04000 	mov	r4, r0
    f77c:	e1a05001 	mov	r5, r1
    f780:	eb0055d2 	bl	24ed0 <CDevice::CDevice()>
    f784:	e3a03000 	mov	r3, #0
    f788:	e59f20a0 	ldr	r2, [pc, #160]	; f830 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xbc>
    f78c:	e1550003 	cmp	r5, r3
    f790:	e1c420f0 	strd	r2, [r4]
    f794:	e5843008 	str	r3, [r4, #8]
    f798:	e584300c 	str	r3, [r4, #12]
    f79c:	0a000013 	beq	f7f0 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x7c>
    f7a0:	e5953004 	ldr	r3, [r5, #4]
    f7a4:	e3530000 	cmp	r3, #0
    f7a8:	e5843004 	str	r3, [r4, #4]
    f7ac:	0a000013 	beq	f800 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x8c>
    f7b0:	e5953008 	ldr	r3, [r5, #8]
    f7b4:	e3530000 	cmp	r3, #0
    f7b8:	0a000014 	beq	f810 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x9c>
    f7bc:	e3a0001c 	mov	r0, #28
    f7c0:	eb006de2 	bl	2af50 <operator new(unsigned int)>
    f7c4:	e1a06000 	mov	r6, r0
    f7c8:	e5951008 	ldr	r1, [r5, #8]
    f7cc:	eb002067 	bl	17970 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
    f7d0:	e1a00006 	mov	r0, r6
    f7d4:	e5846008 	str	r6, [r4, #8]
    f7d8:	eb0020a8 	bl	17a80 <CUSBConfigurationParser::GetCurrentDescriptor()>
    f7dc:	e3500000 	cmp	r0, #0
    f7e0:	e584000c 	str	r0, [r4, #12]
    f7e4:	0a00000d 	beq	f820 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xac>
    f7e8:	e1a00004 	mov	r0, r4
    f7ec:	e8bd8070 	pop	{r4, r5, r6, pc}
    f7f0:	e3a02031 	mov	r2, #49	; 0x31
    f7f4:	e59f1038 	ldr	r1, [pc, #56]	; f834 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f7f8:	e59f0038 	ldr	r0, [pc, #56]	; f838 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc4>
    f7fc:	eb0053cc 	bl	24734 <assertion_failed>
    f800:	e3a02033 	mov	r2, #51	; 0x33
    f804:	e59f1028 	ldr	r1, [pc, #40]	; f834 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f808:	e59f002c 	ldr	r0, [pc, #44]	; f83c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc8>
    f80c:	eb0053c8 	bl	24734 <assertion_failed>
    f810:	e3a02035 	mov	r2, #53	; 0x35
    f814:	e59f1018 	ldr	r1, [pc, #24]	; f834 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f818:	e59f0020 	ldr	r0, [pc, #32]	; f840 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xcc>
    f81c:	eb0053c4 	bl	24734 <assertion_failed>
    f820:	e3a0203a 	mov	r2, #58	; 0x3a
    f824:	e59f1008 	ldr	r1, [pc, #8]	; f834 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f828:	e59f0014 	ldr	r0, [pc, #20]	; f844 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xd0>
    f82c:	eb0053c0 	bl	24734 <assertion_failed>
    f830:	0003e738 	.word	0x0003e738
    f834:	0003e690 	.word	0x0003e690
    f838:	0003e6e4 	.word	0x0003e6e4
    f83c:	0003df08 	.word	0x0003df08
    f840:	0003e6f4 	.word	0x0003e6f4
    f844:	0003e6a0 	.word	0x0003e6a0

0000f848 <CUSBFunction::GetInterfaceName() const>:
    f848:	e92d4030 	push	{r4, r5, lr}
    f84c:	e1a05000 	mov	r5, r0
    f850:	e24dd00c 	sub	sp, sp, #12
    f854:	e3a00010 	mov	r0, #16
    f858:	eb006dbc 	bl	2af50 <operator new(unsigned int)>
    f85c:	e59f1054 	ldr	r1, [pc, #84]	; f8b8 <CUSBFunction::GetInterfaceName() const+0x70>
    f860:	e1a04000 	mov	r4, r0
    f864:	eb006090 	bl	27aac <CString::CString(char const*)>
    f868:	e595100c 	ldr	r1, [r5, #12]
    f86c:	e3510000 	cmp	r1, #0
    f870:	0a000004 	beq	f888 <CUSBFunction::GetInterfaceName() const+0x40>
    f874:	e5d12005 	ldrb	r2, [r1, #5]
    f878:	e2423001 	sub	r3, r2, #1
    f87c:	e6ef3073 	uxtb	r3, r3
    f880:	e35300fd 	cmp	r3, #253	; 0xfd
    f884:	9a000002 	bls	f894 <CUSBFunction::GetInterfaceName() const+0x4c>
    f888:	e1a00004 	mov	r0, r4
    f88c:	e28dd00c 	add	sp, sp, #12
    f890:	e8bd8030 	pop	{r4, r5, pc}
    f894:	e5d13006 	ldrb	r3, [r1, #6]
    f898:	e5d11007 	ldrb	r1, [r1, #7]
    f89c:	e1a00004 	mov	r0, r4
    f8a0:	e58d1000 	str	r1, [sp]
    f8a4:	e59f1010 	ldr	r1, [pc, #16]	; f8bc <CUSBFunction::GetInterfaceName() const+0x74>
    f8a8:	eb0065c3 	bl	28fbc <CString::Format(char const*, ...)>
    f8ac:	e1a00004 	mov	r0, r4
    f8b0:	e28dd00c 	add	sp, sp, #12
    f8b4:	e8bd8030 	pop	{r4, r5, pc}
    f8b8:	0003e0c8 	.word	0x0003e0c8
    f8bc:	0003e714 	.word	0x0003e714

0000f8c0 <CUSBFunction::GetNumEndpoints() const>:
    f8c0:	e590300c 	ldr	r3, [r0, #12]
    f8c4:	e3530000 	cmp	r3, #0
    f8c8:	0a000001 	beq	f8d4 <CUSBFunction::GetNumEndpoints() const+0x14>
    f8cc:	e5d30004 	ldrb	r0, [r3, #4]
    f8d0:	e12fff1e 	bx	lr
    f8d4:	e3a0207e 	mov	r2, #126	; 0x7e
    f8d8:	e92d4010 	push	{r4, lr}
    f8dc:	e59f1004 	ldr	r1, [pc, #4]	; f8e8 <CUSBFunction::GetNumEndpoints() const+0x28>
    f8e0:	e59f0004 	ldr	r0, [pc, #4]	; f8ec <CUSBFunction::GetNumEndpoints() const+0x2c>
    f8e4:	eb005392 	bl	24734 <assertion_failed>
    f8e8:	0003e690 	.word	0x0003e690
    f8ec:	0003e6a0 	.word	0x0003e6a0

0000f8f0 <CUSBFunction::GetDevice() const>:
    f8f0:	e5900004 	ldr	r0, [r0, #4]
    f8f4:	e3500000 	cmp	r0, #0
    f8f8:	112fff1e 	bxne	lr
    f8fc:	e3a02084 	mov	r2, #132	; 0x84
    f900:	e92d4010 	push	{r4, lr}
    f904:	e59f1004 	ldr	r1, [pc, #4]	; f910 <CUSBFunction::GetDevice() const+0x20>
    f908:	e59f0004 	ldr	r0, [pc, #4]	; f914 <CUSBFunction::GetDevice() const+0x24>
    f90c:	eb005388 	bl	24734 <assertion_failed>
    f910:	0003e690 	.word	0x0003e690
    f914:	0003df08 	.word	0x0003df08

0000f918 <CUSBFunction::GetEndpoint0() const>:
    f918:	e5900004 	ldr	r0, [r0, #4]
    f91c:	e3500000 	cmp	r0, #0
    f920:	0a000000 	beq	f928 <CUSBFunction::GetEndpoint0() const+0x10>
    f924:	eafffa8a 	b	e354 <CUSBDevice::GetEndpoint0() const>
    f928:	e3a0208a 	mov	r2, #138	; 0x8a
    f92c:	e92d4010 	push	{r4, lr}
    f930:	e59f1004 	ldr	r1, [pc, #4]	; f93c <CUSBFunction::GetEndpoint0() const+0x24>
    f934:	e59f0004 	ldr	r0, [pc, #4]	; f940 <CUSBFunction::GetEndpoint0() const+0x28>
    f938:	eb00537d 	bl	24734 <assertion_failed>
    f93c:	0003e690 	.word	0x0003e690
    f940:	0003df08 	.word	0x0003df08

0000f944 <CUSBFunction::GetHost() const>:
    f944:	e5900004 	ldr	r0, [r0, #4]
    f948:	e3500000 	cmp	r0, #0
    f94c:	0a000000 	beq	f954 <CUSBFunction::GetHost() const+0x10>
    f950:	eafffa89 	b	e37c <CUSBDevice::GetHost() const>
    f954:	e3a02090 	mov	r2, #144	; 0x90
    f958:	e92d4010 	push	{r4, lr}
    f95c:	e59f1004 	ldr	r1, [pc, #4]	; f968 <CUSBFunction::GetHost() const+0x24>
    f960:	e59f0004 	ldr	r0, [pc, #4]	; f96c <CUSBFunction::GetHost() const+0x28>
    f964:	eb005372 	bl	24734 <assertion_failed>
    f968:	0003e690 	.word	0x0003e690
    f96c:	0003df08 	.word	0x0003df08

0000f970 <CUSBFunction::GetDescriptor(unsigned char)>:
    f970:	e5900008 	ldr	r0, [r0, #8]
    f974:	e3500000 	cmp	r0, #0
    f978:	0a000000 	beq	f980 <CUSBFunction::GetDescriptor(unsigned char)+0x10>
    f97c:	ea002016 	b	179dc <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    f980:	e3a02096 	mov	r2, #150	; 0x96
    f984:	e92d4010 	push	{r4, lr}
    f988:	e59f1004 	ldr	r1, [pc, #4]	; f994 <CUSBFunction::GetDescriptor(unsigned char)+0x24>
    f98c:	e59f0004 	ldr	r0, [pc, #4]	; f998 <CUSBFunction::GetDescriptor(unsigned char)+0x28>
    f990:	eb005367 	bl	24734 <assertion_failed>
    f994:	0003e690 	.word	0x0003e690
    f998:	0003e134 	.word	0x0003e134

0000f99c <CUSBFunction::ConfigurationError(char const*) const>:
    f99c:	e5900008 	ldr	r0, [r0, #8]
    f9a0:	e92d4010 	push	{r4, lr}
    f9a4:	e3500000 	cmp	r0, #0
    f9a8:	0a000003 	beq	f9bc <CUSBFunction::ConfigurationError(char const*) const+0x20>
    f9ac:	e3510000 	cmp	r1, #0
    f9b0:	0a000005 	beq	f9cc <CUSBFunction::ConfigurationError(char const*) const+0x30>
    f9b4:	e8bd4010 	pop	{r4, lr}
    f9b8:	ea002042 	b	17ac8 <CUSBConfigurationParser::Error(char const*) const>
    f9bc:	e3a0209c 	mov	r2, #156	; 0x9c
    f9c0:	e59f1014 	ldr	r1, [pc, #20]	; f9dc <CUSBFunction::ConfigurationError(char const*) const+0x40>
    f9c4:	e59f0014 	ldr	r0, [pc, #20]	; f9e0 <CUSBFunction::ConfigurationError(char const*) const+0x44>
    f9c8:	eb005359 	bl	24734 <assertion_failed>
    f9cc:	e3a0209d 	mov	r2, #157	; 0x9d
    f9d0:	e59f1004 	ldr	r1, [pc, #4]	; f9dc <CUSBFunction::ConfigurationError(char const*) const+0x40>
    f9d4:	e59f0008 	ldr	r0, [pc, #8]	; f9e4 <CUSBFunction::ConfigurationError(char const*) const+0x48>
    f9d8:	eb005355 	bl	24734 <assertion_failed>
    f9dc:	0003e690 	.word	0x0003e690
    f9e0:	0003e134 	.word	0x0003e134
    f9e4:	0003e720 	.word	0x0003e720

0000f9e8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
    f9e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f9ec:	e1a04000 	mov	r4, r0
    f9f0:	e590000c 	ldr	r0, [r0, #12]
    f9f4:	e3500000 	cmp	r0, #0
    f9f8:	0a00001d 	beq	fa74 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x8c>
    f9fc:	e1a07003 	mov	r7, r3
    fa00:	e5943008 	ldr	r3, [r4, #8]
    fa04:	e3530000 	cmp	r3, #0
    fa08:	0a00001d 	beq	fa84 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x9c>
    fa0c:	e5943004 	ldr	r3, [r4, #4]
    fa10:	e1a05001 	mov	r5, r1
    fa14:	e3530000 	cmp	r3, #0
    fa18:	e1a06002 	mov	r6, r2
    fa1c:	1a000009 	bne	fa48 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x60>
    fa20:	ea00001b 	b	fa94 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xac>
    fa24:	e3a01004 	mov	r1, #4
    fa28:	e5940004 	ldr	r0, [r4, #4]
    fa2c:	ebfffa72 	bl	e3fc <CUSBDevice::GetDescriptor(unsigned char)>
    fa30:	e3a01004 	mov	r1, #4
    fa34:	e5940008 	ldr	r0, [r4, #8]
    fa38:	eb001fe7 	bl	179dc <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    fa3c:	e3500000 	cmp	r0, #0
    fa40:	e584000c 	str	r0, [r4, #12]
    fa44:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    fa48:	e5d0c005 	ldrb	ip, [r0, #5]
    fa4c:	e15c0005 	cmp	ip, r5
    fa50:	1afffff3 	bne	fa24 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
    fa54:	e5d01006 	ldrb	r1, [r0, #6]
    fa58:	e1510006 	cmp	r1, r6
    fa5c:	1afffff0 	bne	fa24 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
    fa60:	e5d03007 	ldrb	r3, [r0, #7]
    fa64:	e1530007 	cmp	r3, r7
    fa68:	1affffed 	bne	fa24 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
    fa6c:	e3a00001 	mov	r0, #1
    fa70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fa74:	e3a020a3 	mov	r2, #163	; 0xa3
    fa78:	e59f1024 	ldr	r1, [pc, #36]	; faa4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xbc>
    fa7c:	e59f0024 	ldr	r0, [pc, #36]	; faa8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc0>
    fa80:	eb00532b 	bl	24734 <assertion_failed>
    fa84:	e3a020a4 	mov	r2, #164	; 0xa4
    fa88:	e59f1014 	ldr	r1, [pc, #20]	; faa4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xbc>
    fa8c:	e59f0018 	ldr	r0, [pc, #24]	; faac <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
    fa90:	eb005327 	bl	24734 <assertion_failed>
    fa94:	e3a020a5 	mov	r2, #165	; 0xa5
    fa98:	e59f1004 	ldr	r1, [pc, #4]	; faa4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xbc>
    fa9c:	e59f000c 	ldr	r0, [pc, #12]	; fab0 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc8>
    faa0:	eb005323 	bl	24734 <assertion_failed>
    faa4:	0003e690 	.word	0x0003e690
    faa8:	0003e6a0 	.word	0x0003e6a0
    faac:	0003e134 	.word	0x0003e134
    fab0:	0003df08 	.word	0x0003df08

0000fab4 <CUSBFunction::GetInterfaceNumber() const>:
    fab4:	e590300c 	ldr	r3, [r0, #12]
    fab8:	e3530000 	cmp	r3, #0
    fabc:	0a000001 	beq	fac8 <CUSBFunction::GetInterfaceNumber() const+0x14>
    fac0:	e5d30002 	ldrb	r0, [r3, #2]
    fac4:	e12fff1e 	bx	lr
    fac8:	e3a020bb 	mov	r2, #187	; 0xbb
    facc:	e92d4010 	push	{r4, lr}
    fad0:	e59f1004 	ldr	r1, [pc, #4]	; fadc <CUSBFunction::GetInterfaceNumber() const+0x28>
    fad4:	e59f0004 	ldr	r0, [pc, #4]	; fae0 <CUSBFunction::GetInterfaceNumber() const+0x2c>
    fad8:	eb005315 	bl	24734 <assertion_failed>
    fadc:	0003e690 	.word	0x0003e690
    fae0:	0003e6a0 	.word	0x0003e6a0

0000fae4 <CUSBFunction::GetInterfaceClass() const>:
    fae4:	e590300c 	ldr	r3, [r0, #12]
    fae8:	e3530000 	cmp	r3, #0
    faec:	0a000001 	beq	faf8 <CUSBFunction::GetInterfaceClass() const+0x14>
    faf0:	e5d30005 	ldrb	r0, [r3, #5]
    faf4:	e12fff1e 	bx	lr
    faf8:	e3a020c1 	mov	r2, #193	; 0xc1
    fafc:	e92d4010 	push	{r4, lr}
    fb00:	e59f1004 	ldr	r1, [pc, #4]	; fb0c <CUSBFunction::GetInterfaceClass() const+0x28>
    fb04:	e59f0004 	ldr	r0, [pc, #4]	; fb10 <CUSBFunction::GetInterfaceClass() const+0x2c>
    fb08:	eb005309 	bl	24734 <assertion_failed>
    fb0c:	0003e690 	.word	0x0003e690
    fb10:	0003e6a0 	.word	0x0003e6a0

0000fb14 <CUSBFunction::GetInterfaceSubClass() const>:
    fb14:	e590300c 	ldr	r3, [r0, #12]
    fb18:	e3530000 	cmp	r3, #0
    fb1c:	0a000001 	beq	fb28 <CUSBFunction::GetInterfaceSubClass() const+0x14>
    fb20:	e5d30006 	ldrb	r0, [r3, #6]
    fb24:	e12fff1e 	bx	lr
    fb28:	e3a020c7 	mov	r2, #199	; 0xc7
    fb2c:	e92d4010 	push	{r4, lr}
    fb30:	e59f1004 	ldr	r1, [pc, #4]	; fb3c <CUSBFunction::GetInterfaceSubClass() const+0x28>
    fb34:	e59f0004 	ldr	r0, [pc, #4]	; fb40 <CUSBFunction::GetInterfaceSubClass() const+0x2c>
    fb38:	eb0052fd 	bl	24734 <assertion_failed>
    fb3c:	0003e690 	.word	0x0003e690
    fb40:	0003e6a0 	.word	0x0003e6a0

0000fb44 <CUSBFunction::GetInterfaceProtocol() const>:
    fb44:	e590300c 	ldr	r3, [r0, #12]
    fb48:	e3530000 	cmp	r3, #0
    fb4c:	0a000001 	beq	fb58 <CUSBFunction::GetInterfaceProtocol() const+0x14>
    fb50:	e5d30007 	ldrb	r0, [r3, #7]
    fb54:	e12fff1e 	bx	lr
    fb58:	e3a020cd 	mov	r2, #205	; 0xcd
    fb5c:	e92d4010 	push	{r4, lr}
    fb60:	e59f1004 	ldr	r1, [pc, #4]	; fb6c <CUSBFunction::GetInterfaceProtocol() const+0x28>
    fb64:	e59f0004 	ldr	r0, [pc, #4]	; fb70 <CUSBFunction::GetInterfaceProtocol() const+0x2c>
    fb68:	eb0052f1 	bl	24734 <assertion_failed>
    fb6c:	0003e690 	.word	0x0003e690
    fb70:	0003e6a0 	.word	0x0003e6a0

0000fb74 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
    fb74:	e92d4010 	push	{r4, lr}
    fb78:	e1a04000 	mov	r4, r0
    fb7c:	e59f300c 	ldr	r3, [pc, #12]	; fb90 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x1c>
    fb80:	e5803000 	str	r3, [r0]
    fb84:	eb000349 	bl	108b0 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    fb88:	e1a00004 	mov	r0, r4
    fb8c:	e8bd8010 	pop	{r4, pc}
    fb90:	0003e7ec 	.word	0x0003e7ec

0000fb94 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
    fb94:	e92d4010 	push	{r4, lr}
    fb98:	e1a04000 	mov	r4, r0
    fb9c:	e59f3018 	ldr	r3, [pc, #24]	; fbbc <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x28>
    fba0:	e5803000 	str	r3, [r0]
    fba4:	eb000341 	bl	108b0 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    fba8:	e1a00004 	mov	r0, r4
    fbac:	e3a01f5b 	mov	r1, #364	; 0x16c
    fbb0:	eb006cf4 	bl	2af88 <operator delete(void*, unsigned int)>
    fbb4:	e1a00004 	mov	r0, r4
    fbb8:	e8bd8010 	pop	{r4, pc}
    fbbc:	0003e7ec 	.word	0x0003e7ec

0000fbc0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
    fbc0:	e92d4030 	push	{r4, r5, lr}
    fbc4:	e1a04001 	mov	r4, r1
    fbc8:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    fbcc:	e2801f4f 	add	r1, r0, #316	; 0x13c
    fbd0:	e1a05000 	mov	r5, r0
    fbd4:	e3a02030 	mov	r2, #48	; 0x30
    fbd8:	e28d0018 	add	r0, sp, #24
    fbdc:	eb006af5 	bl	2a7b8 <memcpy>
    fbe0:	e3540001 	cmp	r4, #1
    fbe4:	0a000007 	beq	fc08 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x48>
    fbe8:	e3540002 	cmp	r4, #2
    fbec:	0a000029 	beq	fc98 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xd8>
    fbf0:	e3540000 	cmp	r4, #0
    fbf4:	0a000023 	beq	fc88 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xc8>
    fbf8:	e59f20b4 	ldr	r2, [pc, #180]	; fcb4 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xf4>
    fbfc:	e59f10b4 	ldr	r1, [pc, #180]	; fcb8 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xf8>
    fc00:	e59f00b4 	ldr	r0, [pc, #180]	; fcbc <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xfc>
    fc04:	eb0052ca 	bl	24734 <assertion_failed>
    fc08:	e3e01001 	mvn	r1, #1
    fc0c:	e3e02c01 	mvn	r2, #256	; 0x100
    fc10:	e3a03000 	mov	r3, #0
    fc14:	e5cd1019 	strb	r1, [sp, #25]
    fc18:	e1cd21ba 	strh	r2, [sp, #26]
    fc1c:	e5cd301c 	strb	r3, [sp, #28]
    fc20:	e1a00005 	mov	r0, r5
    fc24:	ebffff46 	bl	f944 <CUSBFunction::GetHost() const>
    fc28:	e1a04000 	mov	r4, r0
    fc2c:	e1a00005 	mov	r0, r5
    fc30:	ebffff38 	bl	f918 <CUSBFunction::GetEndpoint0() const>
    fc34:	e1a01000 	mov	r1, r0
    fc38:	e1a00005 	mov	r0, r5
    fc3c:	e58d1014 	str	r1, [sp, #20]
    fc40:	ebffff9b 	bl	fab4 <CUSBFunction::GetInterfaceNumber() const>
    fc44:	e3a0c030 	mov	ip, #48	; 0x30
    fc48:	e6ff3070 	uxth	r3, r0
    fc4c:	e59f206c 	ldr	r2, [pc, #108]	; fcc0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x100>
    fc50:	e58d3004 	str	r3, [sp, #4]
    fc54:	e28d3018 	add	r3, sp, #24
    fc58:	e58d3008 	str	r3, [sp, #8]
    fc5c:	e58d2000 	str	r2, [sp]
    fc60:	e1a00004 	mov	r0, r4
    fc64:	e3a03009 	mov	r3, #9
    fc68:	e3a02021 	mov	r2, #33	; 0x21
    fc6c:	e59d1014 	ldr	r1, [sp, #20]
    fc70:	e58dc00c 	str	ip, [sp, #12]
    fc74:	eb000ade 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fc78:	e1e00000 	mvn	r0, r0
    fc7c:	e1a00fa0 	lsr	r0, r0, #31
    fc80:	e28dd04c 	add	sp, sp, #76	; 0x4c
    fc84:	e8bd8030 	pop	{r4, r5, pc}
    fc88:	e5cd4019 	strb	r4, [sp, #25]
    fc8c:	e1cd41ba 	strh	r4, [sp, #26]
    fc90:	e5cd401c 	strb	r4, [sp, #28]
    fc94:	eaffffe1 	b	fc20 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
    fc98:	e3e01001 	mvn	r1, #1
    fc9c:	e3a02cfe 	mov	r2, #65024	; 0xfe00
    fca0:	e3e03000 	mvn	r3, #0
    fca4:	e5cd1019 	strb	r1, [sp, #25]
    fca8:	e1cd21ba 	strh	r2, [sp, #26]
    fcac:	e5cd301c 	strb	r3, [sp, #28]
    fcb0:	eaffffda 	b	fc20 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
    fcb4:	0000010e 	.word	0x0000010e
    fcb8:	0003e764 	.word	0x0003e764
    fcbc:	0003e11c 	.word	0x0003e11c
    fcc0:	00000201 	.word	0x00000201

0000fcc4 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
    fcc4:	e351000a 	cmp	r1, #10
    fcc8:	9a000001 	bls	fcd4 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x10>
    fccc:	e3a00000 	mov	r0, #0
    fcd0:	e12fff1e 	bx	lr
    fcd4:	e59f3070 	ldr	r3, [pc, #112]	; fd4c <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x88>
    fcd8:	e92d4030 	push	{r4, r5, lr}
    fcdc:	e0831001 	add	r1, r3, r1
    fce0:	e5d1304c 	ldrb	r3, [r1, #76]	; 0x4c
    fce4:	e24dd01c 	sub	sp, sp, #28
    fce8:	e1a03083 	lsl	r3, r3, #1
    fcec:	e5c03145 	strb	r3, [r0, #325]	; 0x145
    fcf0:	e1a04000 	mov	r4, r0
    fcf4:	ebffff12 	bl	f944 <CUSBFunction::GetHost() const>
    fcf8:	e1a05000 	mov	r5, r0
    fcfc:	e1a00004 	mov	r0, r4
    fd00:	ebffff04 	bl	f918 <CUSBFunction::GetEndpoint0() const>
    fd04:	e1a01000 	mov	r1, r0
    fd08:	e1a00004 	mov	r0, r4
    fd0c:	e58d1014 	str	r1, [sp, #20]
    fd10:	ebffff67 	bl	fab4 <CUSBFunction::GetInterfaceNumber() const>
    fd14:	e3a0c030 	mov	ip, #48	; 0x30
    fd18:	e59f2030 	ldr	r2, [pc, #48]	; fd50 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x8c>
    fd1c:	e6ff3070 	uxth	r3, r0
    fd20:	e2844f4f 	add	r4, r4, #316	; 0x13c
    fd24:	e88d101c 	stm	sp, {r2, r3, r4, ip}
    fd28:	e1a00005 	mov	r0, r5
    fd2c:	e3a03009 	mov	r3, #9
    fd30:	e3a02021 	mov	r2, #33	; 0x21
    fd34:	e59d1014 	ldr	r1, [sp, #20]
    fd38:	eb000aad 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fd3c:	e1e00000 	mvn	r0, r0
    fd40:	e1a00fa0 	lsr	r0, r0, #31
    fd44:	e28dd01c 	add	sp, sp, #28
    fd48:	e8bd8030 	pop	{r4, r5, pc}
    fd4c:	0003e7e4 	.word	0x0003e7e4
    fd50:	00000201 	.word	0x00000201

0000fd54 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
    fd54:	e92d4070 	push	{r4, r5, r6, lr}
    fd58:	e3a02000 	mov	r2, #0
    fd5c:	e1a04000 	mov	r4, r0
    fd60:	eb0002e9 	bl	1090c <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    fd64:	e3a03000 	mov	r3, #0
    fd68:	e59f5030 	ldr	r5, [pc, #48]	; fda0 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)+0x4c>
    fd6c:	e1a00004 	mov	r0, r4
    fd70:	e2852008 	add	r2, r5, #8
    fd74:	e5842000 	str	r2, [r4]
    fd78:	e3a01003 	mov	r1, #3
    fd7c:	e1a02003 	mov	r2, r3
    fd80:	ebffff18 	bl	f9e8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
    fd84:	e3a02030 	mov	r2, #48	; 0x30
    fd88:	e5c4013a 	strb	r0, [r4, #314]	; 0x13a
    fd8c:	e2851058 	add	r1, r5, #88	; 0x58
    fd90:	e2840f4f 	add	r0, r4, #316	; 0x13c
    fd94:	eb006a87 	bl	2a7b8 <memcpy>
    fd98:	e1a00004 	mov	r0, r4
    fd9c:	e8bd8070 	pop	{r4, r5, r6, pc}
    fda0:	0003e7e4 	.word	0x0003e7e4

0000fda4 <CUSBGamePadPS3Device::PS3Enable()>:
    fda4:	e92d4030 	push	{r4, r5, lr}
    fda8:	e59f3084 	ldr	r3, [pc, #132]	; fe34 <CUSBGamePadPS3Device::PS3Enable()+0x90>
    fdac:	e24dd024 	sub	sp, sp, #36	; 0x24
    fdb0:	e58d301c 	str	r3, [sp, #28]
    fdb4:	e1a04000 	mov	r4, r0
    fdb8:	ebfffee1 	bl	f944 <CUSBFunction::GetHost() const>
    fdbc:	e1a05000 	mov	r5, r0
    fdc0:	e1a00004 	mov	r0, r4
    fdc4:	ebfffed3 	bl	f918 <CUSBFunction::GetEndpoint0() const>
    fdc8:	e1a01000 	mov	r1, r0
    fdcc:	e1a00004 	mov	r0, r4
    fdd0:	e58d1014 	str	r1, [sp, #20]
    fdd4:	ebffff36 	bl	fab4 <CUSBFunction::GetInterfaceNumber() const>
    fdd8:	e3a0c004 	mov	ip, #4
    fddc:	e3a02ffd 	mov	r2, #1012	; 0x3f4
    fde0:	e6ff3070 	uxth	r3, r0
    fde4:	e58d3004 	str	r3, [sp, #4]
    fde8:	e28d301c 	add	r3, sp, #28
    fdec:	e58d2000 	str	r2, [sp]
    fdf0:	e58d3008 	str	r3, [sp, #8]
    fdf4:	e1a00005 	mov	r0, r5
    fdf8:	e3a03009 	mov	r3, #9
    fdfc:	e3a02021 	mov	r2, #33	; 0x21
    fe00:	e59d1014 	ldr	r1, [sp, #20]
    fe04:	e58dc00c 	str	ip, [sp, #12]
    fe08:	eb000a79 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fe0c:	e3500000 	cmp	r0, #0
    fe10:	b3a00000 	movlt	r0, #0
    fe14:	ba000004 	blt	fe2c <CUSBGamePadPS3Device::PS3Enable()+0x88>
    fe18:	e5943000 	ldr	r3, [r4]
    fe1c:	e1a00004 	mov	r0, r4
    fe20:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
    fe24:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    fe28:	e12fff33 	blx	r3
    fe2c:	e28dd024 	add	sp, sp, #36	; 0x24
    fe30:	e8bd8030 	pop	{r4, r5, pc}
    fe34:	00000c42 	.word	0x00000c42

0000fe38 <CUSBGamePadPS3Device::Configure()>:
    fe38:	e92d4030 	push	{r4, r5, lr}
    fe3c:	e5d0313a 	ldrb	r3, [r0, #314]	; 0x13a
    fe40:	e24dd00c 	sub	sp, sp, #12
    fe44:	e3530000 	cmp	r3, #0
    fe48:	0a00001e 	beq	fec8 <CUSBGamePadPS3Device::Configure()+0x90>
    fe4c:	e1a04000 	mov	r4, r0
    fe50:	eb00040e 	bl	10e90 <CUSBGamePadStandardDevice::Configure()>
    fe54:	e3500000 	cmp	r0, #0
    fe58:	0a000029 	beq	ff04 <CUSBGamePadPS3Device::Configure()+0xcc>
    fe5c:	e2845f4a 	add	r5, r4, #296	; 0x128
    fe60:	e1d530b0 	ldrh	r3, [r5]
    fe64:	e2433031 	sub	r3, r3, #49	; 0x31
    fe68:	e3530001 	cmp	r3, #1
    fe6c:	8a00001a 	bhi	fedc <CUSBGamePadPS3Device::Configure()+0xa4>
    fe70:	e3a01010 	mov	r1, #16
    fe74:	e3a0c013 	mov	ip, #19
    fe78:	e1a03004 	mov	r3, r4
    fe7c:	e3a02000 	mov	r2, #0
    fe80:	e3a000ff 	mov	r0, #255	; 0xff
    fe84:	e5841024 	str	r1, [r4, #36]	; 0x24
    fe88:	e584c104 	str	ip, [r4, #260]	; 0x104
    fe8c:	e28410c0 	add	r1, r4, #192	; 0xc0
    fe90:	e583202c 	str	r2, [r3, #44]	; 0x2c
    fe94:	e5830030 	str	r0, [r3, #48]	; 0x30
    fe98:	e283300c 	add	r3, r3, #12
    fe9c:	e1530001 	cmp	r3, r1
    fea0:	1afffffa 	bne	fe90 <CUSBGamePadPS3Device::Configure()+0x58>
    fea4:	e1a00004 	mov	r0, r4
    fea8:	e58420e8 	str	r2, [r4, #232]	; 0xe8
    feac:	ebffffbc 	bl	fda4 <CUSBGamePadPS3Device::PS3Enable()>
    feb0:	e3500000 	cmp	r0, #0
    feb4:	0a00001a 	beq	ff24 <CUSBGamePadPS3Device::Configure()+0xec>
    feb8:	e1a00004 	mov	r0, r4
    febc:	e28dd00c 	add	sp, sp, #12
    fec0:	e8bd4030 	pop	{r4, r5, lr}
    fec4:	ea0009b8 	b	125ac <CUSBHIDDevice::StartRequest()>
    fec8:	e59f1074 	ldr	r1, [pc, #116]	; ff44 <CUSBGamePadPS3Device::Configure()+0x10c>
    fecc:	ebfffeb2 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
    fed0:	e3a00000 	mov	r0, #0
    fed4:	e28dd00c 	add	sp, sp, #12
    fed8:	e8bd8030 	pop	{r4, r5, pc}
    fedc:	eb005afc 	bl	26ad4 <CLogger::Get()>
    fee0:	e1d520b0 	ldrh	r2, [r5]
    fee4:	e59f305c 	ldr	r3, [pc, #92]	; ff48 <CUSBGamePadPS3Device::Configure()+0x110>
    fee8:	e58d2000 	str	r2, [sp]
    feec:	e59f1050 	ldr	r1, [pc, #80]	; ff44 <CUSBGamePadPS3Device::Configure()+0x10c>
    fef0:	e3a02001 	mov	r2, #1
    fef4:	eb005a38 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fef8:	e3a00000 	mov	r0, #0
    fefc:	e28dd00c 	add	sp, sp, #12
    ff00:	e8bd8030 	pop	{r4, r5, pc}
    ff04:	eb005af2 	bl	26ad4 <CLogger::Get()>
    ff08:	e3a02001 	mov	r2, #1
    ff0c:	e59f3038 	ldr	r3, [pc, #56]	; ff4c <CUSBGamePadPS3Device::Configure()+0x114>
    ff10:	e59f102c 	ldr	r1, [pc, #44]	; ff44 <CUSBGamePadPS3Device::Configure()+0x10c>
    ff14:	eb005a30 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff18:	e3a00000 	mov	r0, #0
    ff1c:	e28dd00c 	add	sp, sp, #12
    ff20:	e8bd8030 	pop	{r4, r5, pc}
    ff24:	eb005aea 	bl	26ad4 <CLogger::Get()>
    ff28:	e3a02001 	mov	r2, #1
    ff2c:	e59f301c 	ldr	r3, [pc, #28]	; ff50 <CUSBGamePadPS3Device::Configure()+0x118>
    ff30:	e59f100c 	ldr	r1, [pc, #12]	; ff44 <CUSBGamePadPS3Device::Configure()+0x10c>
    ff34:	eb005a28 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff38:	e3a00000 	mov	r0, #0
    ff3c:	e28dd00c 	add	sp, sp, #12
    ff40:	e8bd8030 	pop	{r4, r5, pc}
    ff44:	0003e86c 	.word	0x0003e86c
    ff48:	0003e798 	.word	0x0003e798
    ff4c:	0003e778 	.word	0x0003e778
    ff50:	0003e7b4 	.word	0x0003e7b4

0000ff54 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
    ff54:	e2803f4a 	add	r3, r0, #296	; 0x128
    ff58:	e1d330b0 	ldrh	r3, [r3]
    ff5c:	e92d4010 	push	{r4, lr}
    ff60:	e3530031 	cmp	r3, #49	; 0x31
    ff64:	e1a0c000 	mov	ip, r0
    ff68:	e1a04001 	mov	r4, r1
    ff6c:	0a000007 	beq	ff90 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x3c>
    ff70:	e3530032 	cmp	r3, #50	; 0x32
    ff74:	0a000044 	beq	1008c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x138>
    ff78:	e3530000 	cmp	r3, #0
    ff7c:	0a000040 	beq	10084 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x130>
    ff80:	e3a02092 	mov	r2, #146	; 0x92
    ff84:	e59f1118 	ldr	r1, [pc, #280]	; 100a4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
    ff88:	e59f0118 	ldr	r0, [pc, #280]	; 100a8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x154>
    ff8c:	eb0051e8 	bl	24734 <assertion_failed>
    ff90:	e3510000 	cmp	r1, #0
    ff94:	0a00003e 	beq	10094 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x140>
    ff98:	e5d40003 	ldrb	r0, [r4, #3]
    ff9c:	e5d42002 	ldrb	r2, [r4, #2]
    ffa0:	e5d41004 	ldrb	r1, [r4, #4]
    ffa4:	e1822400 	orr	r2, r2, r0, lsl #8
    ffa8:	e5d40005 	ldrb	r0, [r4, #5]
    ffac:	e1822801 	orr	r2, r2, r1, lsl #16
    ffb0:	e59f10f4 	ldr	r1, [pc, #244]	; 100ac <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x158>
    ffb4:	e1820c00 	orr	r0, r2, r0, lsl #24
    ffb8:	e59fe0f0 	ldr	lr, [pc, #240]	; 100b0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x15c>
    ffbc:	e00112a0 	and	r1, r1, r0, lsr #5
    ffc0:	e1a02682 	lsl	r2, r2, #13
    ffc4:	e00e0580 	and	r0, lr, r0, lsl #11
    ffc8:	e1812ea2 	orr	r2, r1, r2, lsr #29
    ffcc:	e1822000 	orr	r2, r2, r0
    ffd0:	e58c2108 	str	r2, [ip, #264]	; 0x108
    ffd4:	e5d42006 	ldrb	r2, [r4, #6]
    ffd8:	e3a03006 	mov	r3, #6
    ffdc:	e58c2028 	str	r2, [ip, #40]	; 0x28
    ffe0:	e5d41007 	ldrb	r1, [r4, #7]
    ffe4:	e59fe0c8 	ldr	lr, [pc, #200]	; 100b4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x160>
    ffe8:	e58c1034 	str	r1, [ip, #52]	; 0x34
    ffec:	e5d40008 	ldrb	r0, [r4, #8]
    fff0:	e284200d 	add	r2, r4, #13
    fff4:	e58c0040 	str	r0, [ip, #64]	; 0x40
    fff8:	e5d40009 	ldrb	r0, [r4, #9]
    fffc:	e2841019 	add	r1, r4, #25
   10000:	e58c004c 	str	r0, [ip, #76]	; 0x4c
   10004:	ea000000 	b	1000c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb8>
   10008:	e5be3004 	ldr	r3, [lr, #4]!
   1000c:	e5f20001 	ldrb	r0, [r2, #1]!
   10010:	e0833083 	add	r3, r3, r3, lsl #1
   10014:	e08c3103 	add	r3, ip, r3, lsl #2
   10018:	e1520001 	cmp	r2, r1
   1001c:	e5830028 	str	r0, [r3, #40]	; 0x28
   10020:	1afffff8 	bne	10008 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb4>
   10024:	e1d432b9 	ldrh	r3, [r4, #41]	; 0x29
   10028:	e59f2088 	ldr	r2, [pc, #136]	; 100b8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x164>
   1002c:	e6bf3fb3 	rev16	r3, r3
   10030:	e6ff3073 	uxth	r3, r3
   10034:	e0423003 	sub	r3, r2, r3
   10038:	e58c310c 	str	r3, [ip, #268]	; 0x10c
   1003c:	e1d432bb 	ldrh	r3, [r4, #43]	; 0x2b
   10040:	e6bf3fb3 	rev16	r3, r3
   10044:	e6ff3073 	uxth	r3, r3
   10048:	e0423003 	sub	r3, r2, r3
   1004c:	e58c3110 	str	r3, [ip, #272]	; 0x110
   10050:	e1d432bd 	ldrh	r3, [r4, #45]	; 0x2d
   10054:	e6bf3fb3 	rev16	r3, r3
   10058:	e6ff3073 	uxth	r3, r3
   1005c:	e0422003 	sub	r2, r2, r3
   10060:	e58c2114 	str	r2, [ip, #276]	; 0x114
   10064:	e5d4302f 	ldrb	r3, [r4, #47]	; 0x2f
   10068:	e5d42030 	ldrb	r2, [r4, #48]	; 0x30
   1006c:	e1833402 	orr	r3, r3, r2, lsl #8
   10070:	e6bf3fb3 	rev16	r3, r3
   10074:	e6ff3073 	uxth	r3, r3
   10078:	e2433006 	sub	r3, r3, #6
   1007c:	e58c3120 	str	r3, [ip, #288]	; 0x120
   10080:	e8bd8010 	pop	{r4, pc}
   10084:	e8bd4010 	pop	{r4, lr}
   10088:	ea000277 	b	10a6c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
   1008c:	e2814001 	add	r4, r1, #1
   10090:	eaffffc0 	b	ff98 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x44>
   10094:	e3a02097 	mov	r2, #151	; 0x97
   10098:	e59f1004 	ldr	r1, [pc, #4]	; 100a4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
   1009c:	e59f0018 	ldr	r0, [pc, #24]	; 100bc <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x168>
   100a0:	eb0051a3 	bl	24734 <assertion_failed>
   100a4:	0003e764 	.word	0x0003e764
   100a8:	0003e11c 	.word	0x0003e11c
   100ac:	000007f8 	.word	0x000007f8
   100b0:	0007f800 	.word	0x0007f800
   100b4:	0003e878 	.word	0x0003e878
   100b8:	000001ff 	.word	0x000001ff
   100bc:	0003e7d4 	.word	0x0003e7d4

000100c0 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   100c0:	e3a00000 	mov	r0, #0
   100c4:	e12fff1e 	bx	lr

000100c8 <CUSBGamePadPS3Device::GetProperties()>:
   100c8:	e3a0001b 	mov	r0, #27
   100cc:	e12fff1e 	bx	lr

000100d0 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
   100d0:	e5d13001 	ldrb	r3, [r1, #1]
   100d4:	e59f21a0 	ldr	r2, [pc, #416]	; 1027c <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x1ac>
   100d8:	e5803028 	str	r3, [r0, #40]	; 0x28
   100dc:	e5d13002 	ldrb	r3, [r1, #2]
   100e0:	e5803034 	str	r3, [r0, #52]	; 0x34
   100e4:	e5d13003 	ldrb	r3, [r1, #3]
   100e8:	e5803040 	str	r3, [r0, #64]	; 0x40
   100ec:	e5d13004 	ldrb	r3, [r1, #4]
   100f0:	e580304c 	str	r3, [r0, #76]	; 0x4c
   100f4:	e5d13008 	ldrb	r3, [r1, #8]
   100f8:	e5803058 	str	r3, [r0, #88]	; 0x58
   100fc:	e5d13009 	ldrb	r3, [r1, #9]
   10100:	e5803064 	str	r3, [r0, #100]	; 0x64
   10104:	e5d13005 	ldrb	r3, [r1, #5]
   10108:	e203300f 	and	r3, r3, #15
   1010c:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   10110:	e58030ec 	str	r3, [r0, #236]	; 0xec
   10114:	e5802108 	str	r2, [r0, #264]	; 0x108
   10118:	e5d13005 	ldrb	r3, [r1, #5]
   1011c:	e3130080 	tst	r3, #128	; 0x80
   10120:	13822080 	orrne	r2, r2, #128	; 0x80
   10124:	15802108 	strne	r2, [r0, #264]	; 0x108
   10128:	e3130040 	tst	r3, #64	; 0x40
   1012c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10130:	13822c01 	orrne	r2, r2, #256	; 0x100
   10134:	15802108 	strne	r2, [r0, #264]	; 0x108
   10138:	e3130020 	tst	r3, #32
   1013c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10140:	13822c02 	orrne	r2, r2, #512	; 0x200
   10144:	15802108 	strne	r2, [r0, #264]	; 0x108
   10148:	e3130010 	tst	r3, #16
   1014c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10150:	13833b01 	orrne	r3, r3, #1024	; 0x400
   10154:	15803108 	strne	r3, [r0, #264]	; 0x108
   10158:	e5d13006 	ldrb	r3, [r1, #6]
   1015c:	e3130080 	tst	r3, #128	; 0x80
   10160:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10164:	13822a02 	orrne	r2, r2, #8192	; 0x2000
   10168:	15802108 	strne	r2, [r0, #264]	; 0x108
   1016c:	e3130040 	tst	r3, #64	; 0x40
   10170:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10174:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   10178:	15802108 	strne	r2, [r0, #264]	; 0x108
   1017c:	e3130020 	tst	r3, #32
   10180:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10184:	13822901 	orrne	r2, r2, #16384	; 0x4000
   10188:	15802108 	strne	r2, [r0, #264]	; 0x108
   1018c:	e3130010 	tst	r3, #16
   10190:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10194:	13822b02 	orrne	r2, r2, #2048	; 0x800
   10198:	15802108 	strne	r2, [r0, #264]	; 0x108
   1019c:	e3130008 	tst	r3, #8
   101a0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   101a4:	13822010 	orrne	r2, r2, #16
   101a8:	15802108 	strne	r2, [r0, #264]	; 0x108
   101ac:	e3130004 	tst	r3, #4
   101b0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   101b4:	13822008 	orrne	r2, r2, #8
   101b8:	15802108 	strne	r2, [r0, #264]	; 0x108
   101bc:	e3130002 	tst	r3, #2
   101c0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   101c4:	13822040 	orrne	r2, r2, #64	; 0x40
   101c8:	15802108 	strne	r2, [r0, #264]	; 0x108
   101cc:	e3130001 	tst	r3, #1
   101d0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   101d4:	13833020 	orrne	r3, r3, #32
   101d8:	15803108 	strne	r3, [r0, #264]	; 0x108
   101dc:	e5d13007 	ldrb	r3, [r1, #7]
   101e0:	e3130002 	tst	r3, #2
   101e4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   101e8:	13822602 	orrne	r2, r2, #2097152	; 0x200000
   101ec:	15802108 	strne	r2, [r0, #264]	; 0x108
   101f0:	e3130001 	tst	r3, #1
   101f4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   101f8:	13833001 	orrne	r3, r3, #1
   101fc:	15803108 	strne	r3, [r0, #264]	; 0x108
   10200:	e5d12014 	ldrb	r2, [r1, #20]
   10204:	e5d13013 	ldrb	r3, [r1, #19]
   10208:	e1833402 	orr	r3, r3, r2, lsl #8
   1020c:	e6bf3073 	sxth	r3, r3
   10210:	e580310c 	str	r3, [r0, #268]	; 0x10c
   10214:	e5d12018 	ldrb	r2, [r1, #24]
   10218:	e5d13017 	ldrb	r3, [r1, #23]
   1021c:	e1833402 	orr	r3, r3, r2, lsl #8
   10220:	e6bf3073 	sxth	r3, r3
   10224:	e5803110 	str	r3, [r0, #272]	; 0x110
   10228:	e5d12016 	ldrb	r2, [r1, #22]
   1022c:	e5d13015 	ldrb	r3, [r1, #21]
   10230:	e1833402 	orr	r3, r3, r2, lsl #8
   10234:	e6bf3073 	sxth	r3, r3
   10238:	e5803114 	str	r3, [r0, #276]	; 0x114
   1023c:	e5d12012 	ldrb	r2, [r1, #18]
   10240:	e5d13011 	ldrb	r3, [r1, #17]
   10244:	e1833402 	orr	r3, r3, r2, lsl #8
   10248:	e6bf3073 	sxth	r3, r3
   1024c:	e5803118 	str	r3, [r0, #280]	; 0x118
   10250:	e5d1200e 	ldrb	r2, [r1, #14]
   10254:	e5d1300d 	ldrb	r3, [r1, #13]
   10258:	e1833402 	orr	r3, r3, r2, lsl #8
   1025c:	e6bf3073 	sxth	r3, r3
   10260:	e580311c 	str	r3, [r0, #284]	; 0x11c
   10264:	e5d1300f 	ldrb	r3, [r1, #15]
   10268:	e5d12010 	ldrb	r2, [r1, #16]
   1026c:	e1833402 	orr	r3, r3, r2, lsl #8
   10270:	e6bf3073 	sxth	r3, r3
   10274:	e5803120 	str	r3, [r0, #288]	; 0x120
   10278:	e12fff1e 	bx	lr
   1027c:	0003e8f0 	.word	0x0003e8f0

00010280 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   10280:	e92d4010 	push	{r4, lr}
   10284:	e1a04000 	mov	r4, r0
   10288:	e5900140 	ldr	r0, [r0, #320]	; 0x140
   1028c:	e59f3034 	ldr	r3, [pc, #52]	; 102c8 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x48>
   10290:	e3500000 	cmp	r0, #0
   10294:	e5843000 	str	r3, [r4]
   10298:	0a000002 	beq	102a8 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
   1029c:	e5903000 	ldr	r3, [r0]
   102a0:	e5933004 	ldr	r3, [r3, #4]
   102a4:	e12fff33 	blx	r3
   102a8:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   102ac:	e3500000 	cmp	r0, #0
   102b0:	0a000000 	beq	102b8 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
   102b4:	eb006b32 	bl	2af84 <operator delete[](void*)>
   102b8:	e1a00004 	mov	r0, r4
   102bc:	eb001e80 	bl	17cc4 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   102c0:	e1a00004 	mov	r0, r4
   102c4:	e8bd8010 	pop	{r4, pc}
   102c8:	0003e91c 	.word	0x0003e91c

000102cc <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   102cc:	e92d4010 	push	{r4, lr}
   102d0:	e1a04000 	mov	r4, r0
   102d4:	ebffffe9 	bl	10280 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>
   102d8:	e1a00004 	mov	r0, r4
   102dc:	e3a01f53 	mov	r1, #332	; 0x14c
   102e0:	eb006b28 	bl	2af88 <operator delete(void*, unsigned int)>
   102e4:	e1a00004 	mov	r0, r4
   102e8:	e8bd8010 	pop	{r4, pc}

000102ec <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
   102ec:	e92d4010 	push	{r4, lr}
   102f0:	e1a04000 	mov	r4, r0
   102f4:	eb001e61 	bl	17c80 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   102f8:	e3a03000 	mov	r3, #0
   102fc:	e59f2030 	ldr	r2, [pc, #48]	; 10334 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)+0x48>
   10300:	e1a00004 	mov	r0, r4
   10304:	e5842000 	str	r2, [r4]
   10308:	e3a01003 	mov	r1, #3
   1030c:	e1a02003 	mov	r2, r3
   10310:	ebfffdb4 	bl	f9e8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   10314:	e3a03000 	mov	r3, #0
   10318:	e2842f51 	add	r2, r4, #324	; 0x144
   1031c:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   10320:	e584313c 	str	r3, [r4, #316]	; 0x13c
   10324:	e5843140 	str	r3, [r4, #320]	; 0x140
   10328:	e1a00004 	mov	r0, r4
   1032c:	e1c230b0 	strh	r3, [r2]
   10330:	e8bd8010 	pop	{r4, pc}
   10334:	0003e91c 	.word	0x0003e91c

00010338 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
   10338:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1033c:	e5d13007 	ldrb	r3, [r1, #7]
   10340:	e1a06001 	mov	r6, r1
   10344:	e3130002 	tst	r3, #2
   10348:	e1a05000 	mov	r5, r0
   1034c:	1a00004f 	bne	10490 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x158>
   10350:	e5d00144 	ldrb	r0, [r0, #324]	; 0x144
   10354:	e3500000 	cmp	r0, #0
   10358:	1a000050 	bne	104a0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x168>
   1035c:	e3a04000 	mov	r4, #0
   10360:	e5d67021 	ldrb	r7, [r6, #33]	; 0x21
   10364:	e1a09004 	mov	r9, r4
   10368:	e2473001 	sub	r3, r7, #1
   1036c:	e3530003 	cmp	r3, #3
   10370:	23a07001 	movcs	r7, #1
   10374:	e2858f51 	add	r8, r5, #324	; 0x144
   10378:	ea00001a 	b	103e8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb0>
   1037c:	e5d53145 	ldrb	r3, [r5, #325]	; 0x145
   10380:	e3530000 	cmp	r3, #0
   10384:	1a000029 	bne	10430 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xf8>
   10388:	e5d12006 	ldrb	r2, [r1, #6]
   1038c:	e5d1e005 	ldrb	lr, [r1, #5]
   10390:	e5d1c004 	ldrb	ip, [r1, #4]
   10394:	e1a01202 	lsl	r1, r2, #4
   10398:	e1a02003 	mov	r2, r3
   1039c:	e20ea00f 	and	sl, lr, #15
   103a0:	e18cc40a 	orr	ip, ip, sl, lsl #8
   103a4:	e181122e 	orr	r1, r1, lr, lsr #4
   103a8:	e285af52 	add	sl, r5, #328	; 0x148
   103ac:	e3500000 	cmp	r0, #0
   103b0:	e3a00001 	mov	r0, #1
   103b4:	e5c50145 	strb	r0, [r5, #325]	; 0x145
   103b8:	e1c8c0b2 	strh	ip, [r8, #2]
   103bc:	e1ca10b0 	strh	r1, [sl]
   103c0:	0a000004 	beq	103d8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xa0>
   103c4:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   103c8:	e3500000 	cmp	r0, #0
   103cc:	0a000013 	beq	10420 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xe8>
   103d0:	e5d51144 	ldrb	r1, [r5, #324]	; 0x144
   103d4:	eb0021a5 	bl	18a70 <CMouseDevice::ReportHandler(unsigned int, int, int)>
   103d8:	e2844001 	add	r4, r4, #1
   103dc:	e1570004 	cmp	r7, r4
   103e0:	e3a00000 	mov	r0, #0
   103e4:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   103e8:	e0843184 	add	r3, r4, r4, lsl #3
   103ec:	e0863003 	add	r3, r6, r3
   103f0:	e5d32023 	ldrb	r2, [r3, #35]	; 0x23
   103f4:	e2831020 	add	r1, r3, #32
   103f8:	e1b033a2 	lsrs	r3, r2, #7
   103fc:	0affffde 	beq	1037c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x44>
   10400:	e3500000 	cmp	r0, #0
   10404:	e5c59145 	strb	r9, [r5, #325]	; 0x145
   10408:	0afffff2 	beq	103d8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xa0>
   1040c:	e3a03000 	mov	r3, #0
   10410:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   10414:	e1a02003 	mov	r2, r3
   10418:	e3500000 	cmp	r0, #0
   1041c:	1affffeb 	bne	103d0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x98>
   10420:	e59f208c 	ldr	r2, [pc, #140]	; 104b4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x17c>
   10424:	e59f108c 	ldr	r1, [pc, #140]	; 104b8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x180>
   10428:	e59f008c 	ldr	r0, [pc, #140]	; 104bc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x184>
   1042c:	eb0050c0 	bl	24734 <assertion_failed>
   10430:	e5d1b005 	ldrb	fp, [r1, #5]
   10434:	e5d1c004 	ldrb	ip, [r1, #4]
   10438:	e20b300f 	and	r3, fp, #15
   1043c:	e1d820b2 	ldrh	r2, [r8, #2]
   10440:	e18cc403 	orr	ip, ip, r3, lsl #8
   10444:	e04c2002 	sub	r2, ip, r2
   10448:	e352007f 	cmp	r2, #127	; 0x7f
   1044c:	e3e0e07e 	mvn	lr, #126	; 0x7e
   10450:	a3a0207f 	movge	r2, #127	; 0x7f
   10454:	e5d11006 	ldrb	r1, [r1, #6]
   10458:	e285af52 	add	sl, r5, #328	; 0x148
   1045c:	e1da30b0 	ldrh	r3, [sl]
   10460:	e1a01201 	lsl	r1, r1, #4
   10464:	e181122b 	orr	r1, r1, fp, lsr #4
   10468:	e0413003 	sub	r3, r1, r3
   1046c:	e152000e 	cmp	r2, lr
   10470:	b1a0200e 	movlt	r2, lr
   10474:	e353007f 	cmp	r3, #127	; 0x7f
   10478:	a3a0307f 	movge	r3, #127	; 0x7f
   1047c:	e153000e 	cmp	r3, lr
   10480:	b1a0300e 	movlt	r3, lr
   10484:	e192e003 	orrs	lr, r2, r3
   10488:	13800001 	orrne	r0, r0, #1
   1048c:	eaffffc6 	b	103ac <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x74>
   10490:	e5d02144 	ldrb	r2, [r0, #324]	; 0x144
   10494:	e3520000 	cmp	r2, #0
   10498:	13a00000 	movne	r0, #0
   1049c:	1affffae 	bne	1035c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x24>
   104a0:	e1a030a3 	lsr	r3, r3, #1
   104a4:	e2033001 	and	r3, r3, #1
   104a8:	e3a00001 	mov	r0, #1
   104ac:	e5c53144 	strb	r3, [r5, #324]	; 0x144
   104b0:	eaffffa9 	b	1035c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x24>
   104b4:	0000015a 	.word	0x0000015a
   104b8:	0003e8a8 	.word	0x0003e8a8
   104bc:	0003e8bc 	.word	0x0003e8bc

000104c0 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
   104c0:	e2422040 	sub	r2, r2, #64	; 0x40
   104c4:	e16f2f12 	clz	r2, r2
   104c8:	e3510000 	cmp	r1, #0
   104cc:	e1a022a2 	lsr	r2, r2, #5
   104d0:	03a02000 	moveq	r2, #0
   104d4:	e3520000 	cmp	r2, #0
   104d8:	012fff1e 	bxeq	lr
   104dc:	e92d4070 	push	{r4, r5, r6, lr}
   104e0:	e1a04000 	mov	r4, r0
   104e4:	e5903000 	ldr	r3, [r0]
   104e8:	e1a05001 	mov	r5, r1
   104ec:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   104f0:	e12fff33 	blx	r3
   104f4:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   104f8:	e3530000 	cmp	r3, #0
   104fc:	0a000003 	beq	10510 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x50>
   10500:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   10504:	e2841024 	add	r1, r4, #36	; 0x24
   10508:	e2400001 	sub	r0, r0, #1
   1050c:	e12fff33 	blx	r3
   10510:	e5943140 	ldr	r3, [r4, #320]	; 0x140
   10514:	e3530000 	cmp	r3, #0
   10518:	08bd8070 	popeq	{r4, r5, r6, pc}
   1051c:	e1a01005 	mov	r1, r5
   10520:	e1a00004 	mov	r0, r4
   10524:	e8bd4070 	pop	{r4, r5, r6, lr}
   10528:	eaffff82 	b	10338 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>

0001052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
   1052c:	e92d4010 	push	{r4, lr}
   10530:	e590213c 	ldr	r2, [r0, #316]	; 0x13c
   10534:	e5d0c131 	ldrb	ip, [r0, #305]	; 0x131
   10538:	e3a03000 	mov	r3, #0
   1053c:	e5c2c003 	strb	ip, [r2, #3]
   10540:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10544:	e5d0e133 	ldrb	lr, [r0, #307]	; 0x133
   10548:	e3a02020 	mov	r2, #32
   1054c:	e5cce004 	strb	lr, [ip, #4]
   10550:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10554:	e5d0e132 	ldrb	lr, [r0, #306]	; 0x132
   10558:	e5cce005 	strb	lr, [ip, #5]
   1055c:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10560:	e5d0e134 	ldrb	lr, [r0, #308]	; 0x134
   10564:	e5cce006 	strb	lr, [ip, #6]
   10568:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   1056c:	e5d0e135 	ldrb	lr, [r0, #309]	; 0x135
   10570:	e5cce007 	strb	lr, [ip, #7]
   10574:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10578:	e5d0e136 	ldrb	lr, [r0, #310]	; 0x136
   1057c:	e5cce008 	strb	lr, [ip, #8]
   10580:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10584:	e5d0e137 	ldrb	lr, [r0, #311]	; 0x137
   10588:	e5cce009 	strb	lr, [ip, #9]
   1058c:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10590:	e5d0e138 	ldrb	lr, [r0, #312]	; 0x138
   10594:	e5cce00a 	strb	lr, [ip, #10]
   10598:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   1059c:	eb000779 	bl	12388 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   105a0:	e2504000 	subs	r4, r0, #0
   105a4:	0a000001 	beq	105b0 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x84>
   105a8:	e1a00004 	mov	r0, r4
   105ac:	e8bd8010 	pop	{r4, pc}
   105b0:	eb005947 	bl	26ad4 <CLogger::Get()>
   105b4:	e3a02001 	mov	r2, #1
   105b8:	e59f300c 	ldr	r3, [pc, #12]	; 105cc <CUSBGamePadPS4Device::SendLedRumbleCommand()+0xa0>
   105bc:	e59f100c 	ldr	r1, [pc, #12]	; 105d0 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0xa4>
   105c0:	eb005885 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   105c4:	e1a00004 	mov	r0, r4
   105c8:	e8bd8010 	pop	{r4, pc}
   105cc:	0003e8d0 	.word	0x0003e8d0
   105d0:	0003e960 	.word	0x0003e960

000105d4 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
   105d4:	e2411001 	sub	r1, r1, #1
   105d8:	e3510006 	cmp	r1, #6
   105dc:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   105e0:	ea000029 	b	1068c <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xb8>
   105e4:	00010614 	.word	0x00010614
   105e8:	00010628 	.word	0x00010628
   105ec:	0001063c 	.word	0x0001063c
   105f0:	00010650 	.word	0x00010650
   105f4:	00010664 	.word	0x00010664
   105f8:	00010678 	.word	0x00010678
   105fc:	00010600 	.word	0x00010600
   10600:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
   10604:	e3e03000 	mvn	r3, #0
   10608:	e5802134 	str	r2, [r0, #308]	; 0x134
   1060c:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   10610:	eaffffc5 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10614:	e3e02000 	mvn	r2, #0
   10618:	e59f307c 	ldr	r3, [pc, #124]	; 1069c <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xc8>
   1061c:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   10620:	e5803134 	str	r3, [r0, #308]	; 0x134
   10624:	eaffffc0 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10628:	e3e02000 	mvn	r2, #0
   1062c:	e59f306c 	ldr	r3, [pc, #108]	; 106a0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xcc>
   10630:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   10634:	e5803134 	str	r3, [r0, #308]	; 0x134
   10638:	eaffffbb 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1063c:	e3e02000 	mvn	r2, #0
   10640:	e59f305c 	ldr	r3, [pc, #92]	; 106a4 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xd0>
   10644:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   10648:	e5803134 	str	r3, [r0, #308]	; 0x134
   1064c:	eaffffb6 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10650:	e3e02000 	mvn	r2, #0
   10654:	e59f304c 	ldr	r3, [pc, #76]	; 106a8 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xd4>
   10658:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   1065c:	e5803134 	str	r3, [r0, #308]	; 0x134
   10660:	eaffffb1 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10664:	e3e02000 	mvn	r2, #0
   10668:	e59f303c 	ldr	r3, [pc, #60]	; 106ac <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xd8>
   1066c:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   10670:	e5803134 	str	r3, [r0, #308]	; 0x134
   10674:	eaffffac 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10678:	e3e02000 	mvn	r2, #0
   1067c:	e59f302c 	ldr	r3, [pc, #44]	; 106b0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xdc>
   10680:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   10684:	e5803134 	str	r3, [r0, #308]	; 0x134
   10688:	eaffffa7 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1068c:	e3a03000 	mov	r3, #0
   10690:	e5803134 	str	r3, [r0, #308]	; 0x134
   10694:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   10698:	eaffffdc 	b	10610 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x3c>
   1069c:	7fff0000 	.word	0x7fff0000
   106a0:	7f0000ff 	.word	0x7f0000ff
   106a4:	7fff00ff 	.word	0x7fff00ff
   106a8:	7f00ff00 	.word	0x7f00ff00
   106ac:	7fffff00 	.word	0x7fffff00
   106b0:	7f00ffff 	.word	0x7f00ffff

000106b4 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   106b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   106b8:	e1a0e821 	lsr	lr, r1, #16
   106bc:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   106c0:	e1a02421 	lsr	r2, r1, #8
   106c4:	e5c01136 	strb	r1, [r0, #310]	; 0x136
   106c8:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   106cc:	e5c0e134 	strb	lr, [r0, #308]	; 0x134
   106d0:	e5c02135 	strb	r2, [r0, #309]	; 0x135
   106d4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   106d8:	eaffff93 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>

000106dc <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
   106dc:	e3510001 	cmp	r1, #1
   106e0:	0a000005 	beq	106fc <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x20>
   106e4:	e3510002 	cmp	r1, #2
   106e8:	0a00000e 	beq	10728 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x4c>
   106ec:	e3510000 	cmp	r1, #0
   106f0:	0a000007 	beq	10714 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x38>
   106f4:	e3a00001 	mov	r0, #1
   106f8:	e12fff1e 	bx	lr
   106fc:	e3e0100c 	mvn	r1, #12
   10700:	e3a02cff 	mov	r2, #65280	; 0xff00
   10704:	e2803e13 	add	r3, r0, #304	; 0x130
   10708:	e5c01131 	strb	r1, [r0, #305]	; 0x131
   1070c:	e1c320b2 	strh	r2, [r3, #2]
   10710:	eaffff85 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10714:	e3e0200f 	mvn	r2, #15
   10718:	e2803e13 	add	r3, r0, #304	; 0x130
   1071c:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   10720:	e1c310b2 	strh	r1, [r3, #2]
   10724:	eaffff80 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10728:	e3e0100c 	mvn	r1, #12
   1072c:	e3a020ff 	mov	r2, #255	; 0xff
   10730:	e2803e13 	add	r3, r0, #304	; 0x130
   10734:	e5c01131 	strb	r1, [r0, #305]	; 0x131
   10738:	e1c320b2 	strh	r2, [r3, #2]
   1073c:	eaffff7a 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>

00010740 <CUSBGamePadPS4Device::DisableTouchpad()>:
   10740:	e3a02000 	mov	r2, #0
   10744:	e59f3004 	ldr	r3, [pc, #4]	; 10750 <CUSBGamePadPS4Device::DisableTouchpad()+0x10>
   10748:	e5c32000 	strb	r2, [r3]
   1074c:	e12fff1e 	bx	lr
   10750:	000461dc 	.word	0x000461dc

00010754 <CUSBGamePadPS4Device::Configure()>:
   10754:	e5d03130 	ldrb	r3, [r0, #304]	; 0x130
   10758:	e92d4070 	push	{r4, r5, r6, lr}
   1075c:	e3530000 	cmp	r3, #0
   10760:	0a00003c 	beq	10858 <CUSBGamePadPS4Device::Configure()+0x104>
   10764:	e3a02040 	mov	r2, #64	; 0x40
   10768:	e2803f4a 	add	r3, r0, #296	; 0x128
   1076c:	e1c320b0 	strh	r2, [r3]
   10770:	e1a04000 	mov	r4, r0
   10774:	eb001d16 	bl	17bd4 <CUSBGamePadDevice::Configure()>
   10778:	e3500000 	cmp	r0, #0
   1077c:	0a00003f 	beq	10880 <CUSBGamePadPS4Device::Configure()+0x12c>
   10780:	e59f3114 	ldr	r3, [pc, #276]	; 1089c <CUSBGamePadPS4Device::Configure()+0x148>
   10784:	e5d33000 	ldrb	r3, [r3]
   10788:	e3530000 	cmp	r3, #0
   1078c:	1a000035 	bne	10868 <CUSBGamePadPS4Device::Configure()+0x114>
   10790:	e3a02006 	mov	r2, #6
   10794:	e3a0c00e 	mov	ip, #14
   10798:	e3a00001 	mov	r0, #1
   1079c:	e1a03004 	mov	r3, r4
   107a0:	e3a05000 	mov	r5, #0
   107a4:	e3a010ff 	mov	r1, #255	; 0xff
   107a8:	e5842024 	str	r2, [r4, #36]	; 0x24
   107ac:	e584c104 	str	ip, [r4, #260]	; 0x104
   107b0:	e58400e8 	str	r0, [r4, #232]	; 0xe8
   107b4:	e2842048 	add	r2, r4, #72	; 0x48
   107b8:	e583502c 	str	r5, [r3, #44]	; 0x2c
   107bc:	e5831030 	str	r1, [r3, #48]	; 0x30
   107c0:	e283300c 	add	r3, r3, #12
   107c4:	e1530002 	cmp	r3, r2
   107c8:	1afffffa 	bne	107b8 <CUSBGamePadPS4Device::Configure()+0x64>
   107cc:	e3a00020 	mov	r0, #32
   107d0:	eb0069e4 	bl	2af68 <operator new[](unsigned int)>
   107d4:	e3a06005 	mov	r6, #5
   107d8:	e3a02020 	mov	r2, #32
   107dc:	e3a01000 	mov	r1, #0
   107e0:	e584013c 	str	r0, [r4, #316]	; 0x13c
   107e4:	eb0065aa 	bl	29e94 <memset>
   107e8:	e3a0e007 	mov	lr, #7
   107ec:	e3a0c004 	mov	ip, #4
   107f0:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
   107f4:	e3e03000 	mvn	r3, #0
   107f8:	e3e0000f 	mvn	r0, #15
   107fc:	e594113c 	ldr	r1, [r4, #316]	; 0x13c
   10800:	e5c16000 	strb	r6, [r1]
   10804:	e594113c 	ldr	r1, [r4, #316]	; 0x13c
   10808:	e5c1e001 	strb	lr, [r1, #1]
   1080c:	e594113c 	ldr	r1, [r4, #316]	; 0x13c
   10810:	e5c1c002 	strb	ip, [r1, #2]
   10814:	e2841e13 	add	r1, r4, #304	; 0x130
   10818:	e5c40131 	strb	r0, [r4, #305]	; 0x131
   1081c:	e1c150b2 	strh	r5, [r1, #2]
   10820:	e1a00004 	mov	r0, r4
   10824:	e5842134 	str	r2, [r4, #308]	; 0x134
   10828:	e5c43138 	strb	r3, [r4, #312]	; 0x138
   1082c:	ebffff3e 	bl	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10830:	e2843f4d 	add	r3, r4, #308	; 0x134
   10834:	e1c350b0 	strh	r5, [r3]
   10838:	e3a000fa 	mov	r0, #250	; 0xfa
   1083c:	e5c45136 	strb	r5, [r4, #310]	; 0x136
   10840:	eb006552 	bl	29d90 <CTimer::SimpleMsDelay(unsigned int)>
   10844:	e1a00004 	mov	r0, r4
   10848:	ebffff37 	bl	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1084c:	e1a00004 	mov	r0, r4
   10850:	e8bd4070 	pop	{r4, r5, r6, lr}
   10854:	ea000754 	b	125ac <CUSBHIDDevice::StartRequest()>
   10858:	e59f1040 	ldr	r1, [pc, #64]	; 108a0 <CUSBGamePadPS4Device::Configure()+0x14c>
   1085c:	ebfffc4e 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   10860:	e3a00000 	mov	r0, #0
   10864:	e8bd8070 	pop	{r4, r5, r6, pc}
   10868:	e3a00028 	mov	r0, #40	; 0x28
   1086c:	eb0069b7 	bl	2af50 <operator new(unsigned int)>
   10870:	e1a05000 	mov	r5, r0
   10874:	eb002043 	bl	18988 <CMouseDevice::CMouseDevice()>
   10878:	e5845140 	str	r5, [r4, #320]	; 0x140
   1087c:	eaffffc3 	b	10790 <CUSBGamePadPS4Device::Configure()+0x3c>
   10880:	eb005893 	bl	26ad4 <CLogger::Get()>
   10884:	e3a02001 	mov	r2, #1
   10888:	e59f3014 	ldr	r3, [pc, #20]	; 108a4 <CUSBGamePadPS4Device::Configure()+0x150>
   1088c:	e59f100c 	ldr	r1, [pc, #12]	; 108a0 <CUSBGamePadPS4Device::Configure()+0x14c>
   10890:	eb0057d1 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10894:	e3a00000 	mov	r0, #0
   10898:	e8bd8070 	pop	{r4, r5, r6, pc}
   1089c:	000461dc 	.word	0x000461dc
   108a0:	0003e960 	.word	0x0003e960
   108a4:	0003e778 	.word	0x0003e778

000108a8 <CUSBGamePadPS4Device::GetProperties()>:
   108a8:	e3a0003f 	mov	r0, #63	; 0x3f
   108ac:	e12fff1e 	bx	lr

000108b0 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   108b0:	e92d4010 	push	{r4, lr}
   108b4:	e1a04000 	mov	r4, r0
   108b8:	e5900134 	ldr	r0, [r0, #308]	; 0x134
   108bc:	e59f3024 	ldr	r3, [pc, #36]	; 108e8 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x38>
   108c0:	e3500000 	cmp	r0, #0
   108c4:	e5843000 	str	r3, [r4]
   108c8:	0a000000 	beq	108d0 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
   108cc:	eb0069ac 	bl	2af84 <operator delete[](void*)>
   108d0:	e3a03000 	mov	r3, #0
   108d4:	e1a00004 	mov	r0, r4
   108d8:	e5843134 	str	r3, [r4, #308]	; 0x134
   108dc:	eb001cf8 	bl	17cc4 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   108e0:	e1a00004 	mov	r0, r4
   108e4:	e8bd8010 	pop	{r4, pc}
   108e8:	0003e9e0 	.word	0x0003e9e0

000108ec <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   108ec:	e92d4010 	push	{r4, lr}
   108f0:	e1a04000 	mov	r4, r0
   108f4:	ebffffed 	bl	108b0 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   108f8:	e1a00004 	mov	r0, r4
   108fc:	e3a01f4f 	mov	r1, #316	; 0x13c
   10900:	eb0069a0 	bl	2af88 <operator delete(void*, unsigned int)>
   10904:	e1a00004 	mov	r0, r4
   10908:	e8bd8010 	pop	{r4, pc}

0001090c <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
   1090c:	e92d4070 	push	{r4, r5, r6, lr}
   10910:	e1a04000 	mov	r4, r0
   10914:	e1a05002 	mov	r5, r2
   10918:	eb001cd8 	bl	17c80 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   1091c:	e3a03000 	mov	r3, #0
   10920:	e59f1018 	ldr	r1, [pc, #24]	; 10940 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)+0x34>
   10924:	e2842f4e 	add	r2, r4, #312	; 0x138
   10928:	e5c45130 	strb	r5, [r4, #304]	; 0x130
   1092c:	e5841000 	str	r1, [r4]
   10930:	e5843134 	str	r3, [r4, #308]	; 0x134
   10934:	e1a00004 	mov	r0, r4
   10938:	e1c230b0 	strh	r3, [r2]
   1093c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10940:	0003e9e0 	.word	0x0003e9e0

00010944 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   10944:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10948:	e0819002 	add	r9, r1, r2
   1094c:	e2895007 	add	r5, r9, #7
   10950:	e1a051a5 	lsr	r5, r5, #3
   10954:	e15501a1 	cmp	r5, r1, lsr #3
   10958:	e24dd00c 	sub	sp, sp, #12
   1095c:	9a000035 	bls	10a38 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xf4>
   10960:	e3a07001 	mov	r7, #1
   10964:	e3a04000 	mov	r4, #0
   10968:	e201e007 	and	lr, r1, #7
   1096c:	e08e6002 	add	r6, lr, r2
   10970:	e1a06617 	lsl	r6, r7, r6
   10974:	e6ef6076 	uxtb	r6, r6
   10978:	e1a07e17 	lsl	r7, r7, lr
   1097c:	e6ef7077 	uxtb	r7, r7
   10980:	e246a001 	sub	sl, r6, #1
   10984:	e1a0c1a1 	lsr	ip, r1, #3
   10988:	e0466007 	sub	r6, r6, r7
   1098c:	e2491001 	sub	r1, r9, #1
   10990:	e2677000 	rsb	r7, r7, #0
   10994:	e6ef907a 	uxtb	r9, sl
   10998:	e1a08000 	mov	r8, r0
   1099c:	e1a0300c 	mov	r3, ip
   109a0:	e1a00004 	mov	r0, r4
   109a4:	e1a011a1 	lsr	r1, r1, #3
   109a8:	e58d9004 	str	r9, [sp, #4]
   109ac:	e6ef6076 	uxtb	r6, r6
   109b0:	e6ef7077 	uxtb	r7, r7
   109b4:	e26eb008 	rsb	fp, lr, #8
   109b8:	ea00000d 	b	109f4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb0>
   109bc:	e15c0003 	cmp	ip, r3
   109c0:	0a000015 	beq	10a1c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>
   109c4:	e1510003 	cmp	r1, r3
   109c8:	07d89001 	ldrbeq	r9, [r8, r1]
   109cc:	059da004 	ldreq	sl, [sp, #4]
   109d0:	17d8a003 	ldrbne	sl, [r8, r3]
   109d4:	12844008 	addne	r4, r4, #8
   109d8:	0009900a 	andeq	r9, r9, sl
   109dc:	10429004 	subne	r9, r2, r4
   109e0:	01800009 	orreq	r0, r0, r9
   109e4:	1180091a 	orrne	r0, r0, sl, lsl r9
   109e8:	e2833001 	add	r3, r3, #1
   109ec:	e1530005 	cmp	r3, r5
   109f0:	0a000007 	beq	10a14 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd0>
   109f4:	e151000c 	cmp	r1, ip
   109f8:	1affffef 	bne	109bc <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x78>
   109fc:	e7d80003 	ldrb	r0, [r8, r3]
   10a00:	e2833001 	add	r3, r3, #1
   10a04:	e0000006 	and	r0, r0, r6
   10a08:	e1530005 	cmp	r3, r5
   10a0c:	e1a00e50 	asr	r0, r0, lr
   10a10:	1afffff7 	bne	109f4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb0>
   10a14:	e28dd00c 	add	sp, sp, #12
   10a18:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a1c:	e7d8000c 	ldrb	r0, [r8, ip]
   10a20:	e084400b 	add	r4, r4, fp
   10a24:	e0000007 	and	r0, r0, r7
   10a28:	e1a00e50 	asr	r0, r0, lr
   10a2c:	e0429004 	sub	r9, r2, r4
   10a30:	e1a00910 	lsl	r0, r0, r9
   10a34:	eaffffeb 	b	109e8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa4>
   10a38:	e3a00000 	mov	r0, #0
   10a3c:	e28dd00c 	add	sp, sp, #12
   10a40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010a44 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   10a44:	e92d4010 	push	{r4, lr}
   10a48:	e1a04002 	mov	r4, r2
   10a4c:	ebffffbc 	bl	10944 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10a50:	e3a03001 	mov	r3, #1
   10a54:	e2422001 	sub	r2, r2, #1
   10a58:	e0102213 	ands	r2, r0, r3, lsl r2
   10a5c:	11a03413 	lslne	r3, r3, r4
   10a60:	12633000 	rsbne	r3, r3, #0
   10a64:	11800003 	orrne	r0, r0, r3
   10a68:	e8bd8010 	pop	{r4, pc}

00010a6c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
   10a6c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a70:	e5905134 	ldr	r5, [r0, #308]	; 0x134
   10a74:	e24dd034 	sub	sp, sp, #52	; 0x34
   10a78:	e3550000 	cmp	r5, #0
   10a7c:	e58d0010 	str	r0, [sp, #16]
   10a80:	0a000099 	beq	10cec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x280>
   10a84:	e59d3010 	ldr	r3, [sp, #16]
   10a88:	e2833f4e 	add	r3, r3, #312	; 0x138
   10a8c:	e1d340b0 	ldrh	r4, [r3]
   10a90:	e3540000 	cmp	r4, #0
   10a94:	0a0000f4 	beq	10e6c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x400>
   10a98:	e3a09000 	mov	r9, #0
   10a9c:	e59fb3e0 	ldr	fp, [pc, #992]	; 10e84 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x418>
   10aa0:	ee071a90 	vmov	s15, r1
   10aa4:	e1a0a009 	mov	sl, r9
   10aa8:	e1a07009 	mov	r7, r9
   10aac:	e1a06009 	mov	r6, r9
   10ab0:	e58db008 	str	fp, [sp, #8]
   10ab4:	e58d901c 	str	r9, [sp, #28]
   10ab8:	e58d9018 	str	r9, [sp, #24]
   10abc:	e58d9004 	str	r9, [sp, #4]
   10ac0:	e58db014 	str	fp, [sp, #20]
   10ac4:	e58db00c 	str	fp, [sp, #12]
   10ac8:	ea000007 	b	10aec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x80>
   10acc:	e3530014 	cmp	r3, #20
   10ad0:	058d800c 	streq	r8, [sp, #12]
   10ad4:	0a000002 	beq	10ae4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10ad8:	da000033 	ble	10bac <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x140>
   10adc:	e3530024 	cmp	r3, #36	; 0x24
   10ae0:	01a0b008 	moveq	fp, r8
   10ae4:	e3540000 	cmp	r4, #0
   10ae8:	0a000022 	beq	10b78 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x10c>
   10aec:	e1d530d0 	ldrsb	r3, [r5]
   10af0:	e2038003 	and	r8, r3, #3
   10af4:	e3580001 	cmp	r8, #1
   10af8:	0a000055 	beq	10c54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e8>
   10afc:	e3580002 	cmp	r8, #2
   10b00:	0a00004c 	beq	10c38 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1cc>
   10b04:	e3580000 	cmp	r8, #0
   10b08:	02444001 	subeq	r4, r4, #1
   10b0c:	06ff4074 	uxtheq	r4, r4
   10b10:	02855001 	addeq	r5, r5, #1
   10b14:	0a00000a 	beq	10b44 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xd8>
   10b18:	e1d580d3 	ldrsb	r8, [r5, #3]
   10b1c:	e1d520d2 	ldrsb	r2, [r5, #2]
   10b20:	e1d510d1 	ldrsb	r1, [r5, #1]
   10b24:	e1a08808 	lsl	r8, r8, #16
   10b28:	e1888402 	orr	r8, r8, r2, lsl #8
   10b2c:	e1d520d4 	ldrsb	r2, [r5, #4]
   10b30:	e2444005 	sub	r4, r4, #5
   10b34:	e1888001 	orr	r8, r8, r1
   10b38:	e6ff4074 	uxth	r4, r4
   10b3c:	e1888c02 	orr	r8, r8, r2, lsl #24
   10b40:	e2855005 	add	r5, r5, #5
   10b44:	e20330fc 	and	r3, r3, #252	; 0xfc
   10b48:	e3530084 	cmp	r3, #132	; 0x84
   10b4c:	0a00002c 	beq	10c04 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x198>
   10b50:	e3530034 	cmp	r3, #52	; 0x34
   10b54:	0a000043 	beq	10c68 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1fc>
   10b58:	daffffdb 	ble	10acc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10b5c:	e3530080 	cmp	r3, #128	; 0x80
   10b60:	0a000042 	beq	10c70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10b64:	da000016 	ble	10bc4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x158>
   10b68:	e3530094 	cmp	r3, #148	; 0x94
   10b6c:	01a07008 	moveq	r7, r8
   10b70:	e3540000 	cmp	r4, #0
   10b74:	1affffdc 	bne	10aec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x80>
   10b78:	e59d3004 	ldr	r3, [sp, #4]
   10b7c:	e2834007 	add	r4, r3, #7
   10b80:	e1a041a4 	lsr	r4, r4, #3
   10b84:	e6ff4074 	uxth	r4, r4
   10b88:	e59d2010 	ldr	r2, [sp, #16]
   10b8c:	e59d1018 	ldr	r1, [sp, #24]
   10b90:	e2823f4a 	add	r3, r2, #296	; 0x128
   10b94:	e5821024 	str	r1, [r2, #36]	; 0x24
   10b98:	e59d101c 	ldr	r1, [sp, #28]
   10b9c:	e58210e8 	str	r1, [r2, #232]	; 0xe8
   10ba0:	e1c340b0 	strh	r4, [r3]
   10ba4:	e28dd034 	add	sp, sp, #52	; 0x34
   10ba8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bac:	e3530004 	cmp	r3, #4
   10bb0:	1a000009 	bne	10bdc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x170>
   10bb4:	e3590001 	cmp	r9, #1
   10bb8:	03580009 	cmpeq	r8, #9
   10bbc:	03a09002 	moveq	r9, #2
   10bc0:	eaffffc7 	b	10ae4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10bc4:	e3530044 	cmp	r3, #68	; 0x44
   10bc8:	058d8008 	streq	r8, [sp, #8]
   10bcc:	0affffc4 	beq	10ae4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10bd0:	e3530074 	cmp	r3, #116	; 0x74
   10bd4:	01a06008 	moveq	r6, r8
   10bd8:	eaffffc1 	b	10ae4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10bdc:	e3530008 	cmp	r3, #8
   10be0:	1affffbf 	bne	10ae4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10be4:	e3580036 	cmp	r8, #54	; 0x36
   10be8:	ca000028 	bgt	10c90 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x224>
   10bec:	e358002f 	cmp	r8, #47	; 0x2f
   10bf0:	ca00003a 	bgt	10ce0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x274>
   10bf4:	e2488004 	sub	r8, r8, #4
   10bf8:	e3580001 	cmp	r8, #1
   10bfc:	93a09001 	movls	r9, #1
   10c00:	eaffffb7 	b	10ae4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10c04:	e35a0000 	cmp	sl, #0
   10c08:	1affffda 	bne	10b78 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x10c>
   10c0c:	e1a0100a 	mov	r1, sl
   10c10:	e3a02008 	mov	r2, #8
   10c14:	ee170a90 	vmov	r0, s15
   10c18:	ebffff49 	bl	10944 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10c1c:	e3500000 	cmp	r0, #0
   10c20:	11500008 	cmpne	r0, r8
   10c24:	1affffde 	bne	10ba4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x138>
   10c28:	e3a03008 	mov	r3, #8
   10c2c:	e1a0a008 	mov	sl, r8
   10c30:	e58d3004 	str	r3, [sp, #4]
   10c34:	eaffffaa 	b	10ae4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10c38:	e5d58001 	ldrb	r8, [r5, #1]
   10c3c:	e1d520d2 	ldrsb	r2, [r5, #2]
   10c40:	e2444003 	sub	r4, r4, #3
   10c44:	e6ff4074 	uxth	r4, r4
   10c48:	e1888402 	orr	r8, r8, r2, lsl #8
   10c4c:	e2855003 	add	r5, r5, #3
   10c50:	eaffffbb 	b	10b44 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xd8>
   10c54:	e2444002 	sub	r4, r4, #2
   10c58:	e1d580d1 	ldrsb	r8, [r5, #1]
   10c5c:	e6ff4074 	uxth	r4, r4
   10c60:	e2855002 	add	r5, r5, #2
   10c64:	eaffffb6 	b	10b44 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xd8>
   10c68:	e58d8014 	str	r8, [sp, #20]
   10c6c:	eaffff9c 	b	10ae4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10c70:	e2088003 	and	r8, r8, #3
   10c74:	e3580002 	cmp	r8, #2
   10c78:	0a000009 	beq	10ca4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x238>
   10c7c:	e0020796 	mul	r2, r6, r7
   10c80:	e59d3004 	ldr	r3, [sp, #4]
   10c84:	e0833002 	add	r3, r3, r2
   10c88:	e58d3004 	str	r3, [sp, #4]
   10c8c:	eaffff94 	b	10ae4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10c90:	e3580039 	cmp	r8, #57	; 0x39
   10c94:	1affff92 	bne	10ae4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10c98:	e3590001 	cmp	r9, #1
   10c9c:	03a09004 	moveq	r9, #4
   10ca0:	eaffff8f 	b	10ae4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10ca4:	e3590003 	cmp	r9, #3
   10ca8:	0a000013 	beq	10cfc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x290>
   10cac:	e3590004 	cmp	r9, #4
   10cb0:	0a00004a 	beq	10de0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x374>
   10cb4:	e3590002 	cmp	r9, #2
   10cb8:	e0020796 	mul	r2, r6, r7
   10cbc:	1affffef 	bne	10c80 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   10cc0:	e59d8010 	ldr	r8, [sp, #16]
   10cc4:	ee170a90 	vmov	r0, s15
   10cc8:	e59d1004 	ldr	r1, [sp, #4]
   10ccc:	e5887104 	str	r7, [r8, #260]	; 0x104
   10cd0:	ebffff1b 	bl	10944 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10cd4:	e3a09001 	mov	r9, #1
   10cd8:	e5880108 	str	r0, [r8, #264]	; 0x108
   10cdc:	eaffffe7 	b	10c80 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   10ce0:	e3590001 	cmp	r9, #1
   10ce4:	03a09003 	moveq	r9, #3
   10ce8:	eaffff7d 	b	10ae4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   10cec:	e3a020a2 	mov	r2, #162	; 0xa2
   10cf0:	e59f1190 	ldr	r1, [pc, #400]	; 10e88 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x41c>
   10cf4:	e59f0190 	ldr	r0, [pc, #400]	; 10e8c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x420>
   10cf8:	eb004e8d 	bl	24734 <assertion_failed>
   10cfc:	e3570000 	cmp	r7, #0
   10d00:	0a00005c 	beq	10e78 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x40c>
   10d04:	e59d200c 	ldr	r2, [sp, #12]
   10d08:	e59f1174 	ldr	r1, [pc, #372]	; 10e84 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x418>
   10d0c:	e59d0014 	ldr	r0, [sp, #20]
   10d10:	e1520001 	cmp	r2, r1
   10d14:	e1a03002 	mov	r3, r2
   10d18:	01a03000 	moveq	r3, r0
   10d1c:	e15b0001 	cmp	fp, r1
   10d20:	e59d2008 	ldr	r2, [sp, #8]
   10d24:	11a0200b 	movne	r2, fp
   10d28:	e59d0018 	ldr	r0, [sp, #24]
   10d2c:	e59d1004 	ldr	r1, [sp, #4]
   10d30:	e59dc010 	ldr	ip, [sp, #16]
   10d34:	e0808080 	add	r8, r0, r0, lsl #1
   10d38:	e2800001 	add	r0, r0, #1
   10d3c:	e58da020 	str	sl, [sp, #32]
   10d40:	e58d5024 	str	r5, [sp, #36]	; 0x24
   10d44:	e58d4028 	str	r4, [sp, #40]	; 0x28
   10d48:	e58db02c 	str	fp, [sp, #44]	; 0x2c
   10d4c:	e1a04006 	mov	r4, r6
   10d50:	e3a09000 	mov	r9, #0
   10d54:	e1a05002 	mov	r5, r2
   10d58:	e1a0b003 	mov	fp, r3
   10d5c:	e1a06001 	mov	r6, r1
   10d60:	ee17aa90 	vmov	sl, s15
   10d64:	e08c8108 	add	r8, ip, r8, lsl #2
   10d68:	e58d0018 	str	r0, [sp, #24]
   10d6c:	ea000009 	b	10d98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x32c>
   10d70:	ebfffef3 	bl	10944 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10d74:	e59d3018 	ldr	r3, [sp, #24]
   10d78:	e5880028 	str	r0, [r8, #40]	; 0x28
   10d7c:	e083c009 	add	ip, r3, r9
   10d80:	e2899001 	add	r9, r9, #1
   10d84:	e359000f 	cmp	r9, #15
   10d88:	91590007 	cmpls	r9, r7
   10d8c:	e0866004 	add	r6, r6, r4
   10d90:	e288800c 	add	r8, r8, #12
   10d94:	2a000008 	bcs	10dbc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x350>
   10d98:	e35b0000 	cmp	fp, #0
   10d9c:	e1a02004 	mov	r2, r4
   10da0:	e1a01006 	mov	r1, r6
   10da4:	e1a0000a 	mov	r0, sl
   10da8:	e588b02c 	str	fp, [r8, #44]	; 0x2c
   10dac:	e5885030 	str	r5, [r8, #48]	; 0x30
   10db0:	aaffffee 	bge	10d70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x304>
   10db4:	ebffff22 	bl	10a44 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   10db8:	eaffffed 	b	10d74 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x308>
   10dbc:	e1a06004 	mov	r6, r4
   10dc0:	e3a09001 	mov	r9, #1
   10dc4:	e0020796 	mul	r2, r6, r7
   10dc8:	e59da020 	ldr	sl, [sp, #32]
   10dcc:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   10dd0:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
   10dd4:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   10dd8:	e58dc018 	str	ip, [sp, #24]
   10ddc:	eaffffa7 	b	10c80 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   10de0:	e3570000 	cmp	r7, #0
   10de4:	0a000023 	beq	10e78 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x40c>
   10de8:	e59d201c 	ldr	r2, [sp, #28]
   10dec:	e59d0010 	ldr	r0, [sp, #16]
   10df0:	e282303b 	add	r3, r2, #59	; 0x3b
   10df4:	e59d1004 	ldr	r1, [sp, #4]
   10df8:	e0809103 	add	r9, r0, r3, lsl #2
   10dfc:	e2823001 	add	r3, r2, #1
   10e00:	e58da01c 	str	sl, [sp, #28]
   10e04:	e1a02006 	mov	r2, r6
   10e08:	e58d5020 	str	r5, [sp, #32]
   10e0c:	e3a08000 	mov	r8, #0
   10e10:	e1a05009 	mov	r5, r9
   10e14:	e1a06001 	mov	r6, r1
   10e18:	ee17aa90 	vmov	sl, s15
   10e1c:	e1a09003 	mov	r9, r3
   10e20:	e58d4024 	str	r4, [sp, #36]	; 0x24
   10e24:	e1a01006 	mov	r1, r6
   10e28:	e1a0000a 	mov	r0, sl
   10e2c:	e0894008 	add	r4, r9, r8
   10e30:	e2888001 	add	r8, r8, #1
   10e34:	ebfffec2 	bl	10944 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10e38:	e3580005 	cmp	r8, #5
   10e3c:	91580007 	cmpls	r8, r7
   10e40:	e0866002 	add	r6, r6, r2
   10e44:	e4850004 	str	r0, [r5], #4
   10e48:	3afffff5 	bcc	10e24 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3b8>
   10e4c:	e1a06002 	mov	r6, r2
   10e50:	e59da01c 	ldr	sl, [sp, #28]
   10e54:	e3a09001 	mov	r9, #1
   10e58:	e58d401c 	str	r4, [sp, #28]
   10e5c:	e0020792 	mul	r2, r2, r7
   10e60:	e59d5020 	ldr	r5, [sp, #32]
   10e64:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   10e68:	eaffff84 	b	10c80 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   10e6c:	e58d401c 	str	r4, [sp, #28]
   10e70:	e58d4018 	str	r4, [sp, #24]
   10e74:	eaffff43 	b	10b88 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x11c>
   10e78:	e1a02007 	mov	r2, r7
   10e7c:	e3a09001 	mov	r9, #1
   10e80:	eaffff7e 	b	10c80 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   10e84:	f8a432eb 	.word	0xf8a432eb
   10e88:	0003e96c 	.word	0x0003e96c
   10e8c:	0003e984 	.word	0x0003e984

00010e90 <CUSBGamePadStandardDevice::Configure()>:
   10e90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10e94:	e3a01021 	mov	r1, #33	; 0x21
   10e98:	e24dd080 	sub	sp, sp, #128	; 0x80
   10e9c:	e1a04000 	mov	r4, r0
   10ea0:	ebfffab2 	bl	f970 <CUSBFunction::GetDescriptor(unsigned char)>
   10ea4:	e2505000 	subs	r5, r0, #0
   10ea8:	0a000003 	beq	10ebc <CUSBGamePadStandardDevice::Configure()+0x2c>
   10eac:	e5d50007 	ldrb	r0, [r5, #7]
   10eb0:	e5d53008 	ldrb	r3, [r5, #8]
   10eb4:	e1900403 	orrs	r0, r0, r3, lsl #8
   10eb8:	1a000006 	bne	10ed8 <CUSBGamePadStandardDevice::Configure()+0x48>
   10ebc:	e1a00004 	mov	r0, r4
   10ec0:	e59f1164 	ldr	r1, [pc, #356]	; 1102c <CUSBGamePadStandardDevice::Configure()+0x19c>
   10ec4:	ebfffab4 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   10ec8:	e3a05000 	mov	r5, #0
   10ecc:	e1a00005 	mov	r0, r5
   10ed0:	e28dd080 	add	sp, sp, #128	; 0x80
   10ed4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10ed8:	e2846f4e 	add	r6, r4, #312	; 0x138
   10edc:	e1c600b0 	strh	r0, [r6]
   10ee0:	eb006820 	bl	2af68 <operator new[](unsigned int)>
   10ee4:	e1a03000 	mov	r3, r0
   10ee8:	e1a00004 	mov	r0, r4
   10eec:	e5843134 	str	r3, [r4, #308]	; 0x134
   10ef0:	ebfffa93 	bl	f944 <CUSBFunction::GetHost() const>
   10ef4:	e1a07000 	mov	r7, r0
   10ef8:	e1a00004 	mov	r0, r4
   10efc:	ebfffa85 	bl	f918 <CUSBFunction::GetEndpoint0() const>
   10f00:	e1a01000 	mov	r1, r0
   10f04:	e5d52006 	ldrb	r2, [r5, #6]
   10f08:	e1a00004 	mov	r0, r4
   10f0c:	e1d680b0 	ldrh	r8, [r6]
   10f10:	e5945134 	ldr	r5, [r4, #308]	; 0x134
   10f14:	e58d1014 	str	r1, [sp, #20]
   10f18:	e58d2010 	str	r2, [sp, #16]
   10f1c:	ebfffae4 	bl	fab4 <CUSBFunction::GetInterfaceNumber() const>
   10f20:	e3a0c081 	mov	ip, #129	; 0x81
   10f24:	e6ff3070 	uxth	r3, r0
   10f28:	e58d300c 	str	r3, [sp, #12]
   10f2c:	e1a00007 	mov	r0, r7
   10f30:	e3a03000 	mov	r3, #0
   10f34:	e59d1014 	ldr	r1, [sp, #20]
   10f38:	e59d2010 	ldr	r2, [sp, #16]
   10f3c:	e58d8004 	str	r8, [sp, #4]
   10f40:	e58d5000 	str	r5, [sp]
   10f44:	e58dc008 	str	ip, [sp, #8]
   10f48:	eb00065b 	bl	128bc <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   10f4c:	e1d630b0 	ldrh	r3, [r6]
   10f50:	e1500003 	cmp	r0, r3
   10f54:	1a000021 	bne	10fe0 <CUSBGamePadStandardDevice::Configure()+0x150>
   10f58:	e3a01000 	mov	r1, #0
   10f5c:	e3a02060 	mov	r2, #96	; 0x60
   10f60:	e28d0020 	add	r0, sp, #32
   10f64:	e58d101c 	str	r1, [sp, #28]
   10f68:	eb0063c9 	bl	29e94 <memset>
   10f6c:	e5943000 	ldr	r3, [r4]
   10f70:	e1a00004 	mov	r0, r4
   10f74:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   10f78:	e28d101c 	add	r1, sp, #28
   10f7c:	e12fff33 	blx	r3
   10f80:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10f84:	e3530000 	cmp	r3, #0
   10f88:	1a000005 	bne	10fa4 <CUSBGamePadStandardDevice::Configure()+0x114>
   10f8c:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   10f90:	e3530000 	cmp	r3, #0
   10f94:	1a000002 	bne	10fa4 <CUSBGamePadStandardDevice::Configure()+0x114>
   10f98:	e5945104 	ldr	r5, [r4, #260]	; 0x104
   10f9c:	e3550000 	cmp	r5, #0
   10fa0:	0affffc9 	beq	10ecc <CUSBGamePadStandardDevice::Configure()+0x3c>
   10fa4:	e2843f4a 	add	r3, r4, #296	; 0x128
   10fa8:	e1d330b0 	ldrh	r3, [r3]
   10fac:	e3530000 	cmp	r3, #0
   10fb0:	0a000019 	beq	1101c <CUSBGamePadStandardDevice::Configure()+0x18c>
   10fb4:	e1a00004 	mov	r0, r4
   10fb8:	eb001b05 	bl	17bd4 <CUSBGamePadDevice::Configure()>
   10fbc:	e2505000 	subs	r5, r0, #0
   10fc0:	0a00000f 	beq	11004 <CUSBGamePadStandardDevice::Configure()+0x174>
   10fc4:	e5d43130 	ldrb	r3, [r4, #304]	; 0x130
   10fc8:	e3530000 	cmp	r3, #0
   10fcc:	0affffbe 	beq	10ecc <CUSBGamePadStandardDevice::Configure()+0x3c>
   10fd0:	e1a00004 	mov	r0, r4
   10fd4:	eb000574 	bl	125ac <CUSBHIDDevice::StartRequest()>
   10fd8:	e1a05000 	mov	r5, r0
   10fdc:	eaffffba 	b	10ecc <CUSBGamePadStandardDevice::Configure()+0x3c>
   10fe0:	e3a05000 	mov	r5, #0
   10fe4:	eb0056ba 	bl	26ad4 <CLogger::Get()>
   10fe8:	e3a02001 	mov	r2, #1
   10fec:	e59f303c 	ldr	r3, [pc, #60]	; 11030 <CUSBGamePadStandardDevice::Configure()+0x1a0>
   10ff0:	e59f1034 	ldr	r1, [pc, #52]	; 1102c <CUSBGamePadStandardDevice::Configure()+0x19c>
   10ff4:	eb0055f8 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10ff8:	e1a00005 	mov	r0, r5
   10ffc:	e28dd080 	add	sp, sp, #128	; 0x80
   11000:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11004:	eb0056b2 	bl	26ad4 <CLogger::Get()>
   11008:	e3a02001 	mov	r2, #1
   1100c:	e59f3020 	ldr	r3, [pc, #32]	; 11034 <CUSBGamePadStandardDevice::Configure()+0x1a4>
   11010:	e59f1014 	ldr	r1, [pc, #20]	; 1102c <CUSBGamePadStandardDevice::Configure()+0x19c>
   11014:	eb0055f0 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11018:	eaffffab 	b	10ecc <CUSBGamePadStandardDevice::Configure()+0x3c>
   1101c:	e3a02085 	mov	r2, #133	; 0x85
   11020:	e59f1010 	ldr	r1, [pc, #16]	; 11038 <CUSBGamePadStandardDevice::Configure()+0x1a8>
   11024:	e59f0010 	ldr	r0, [pc, #16]	; 1103c <CUSBGamePadStandardDevice::Configure()+0x1ac>
   11028:	eb004dc1 	bl	24734 <assertion_failed>
   1102c:	0003ea24 	.word	0x0003ea24
   11030:	0003e9a0 	.word	0x0003e9a0
   11034:	0003e778 	.word	0x0003e778
   11038:	0003e96c 	.word	0x0003e96c
   1103c:	0003e9c4 	.word	0x0003e9c4

00011040 <CUSBGamePadDevice::GetProperties()>:
   11040:	e3a00000 	mov	r0, #0
   11044:	e12fff1e 	bx	lr

00011048 <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
   11048:	e3a00000 	mov	r0, #0
   1104c:	e12fff1e 	bx	lr

00011050 <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
   11050:	e3a00000 	mov	r0, #0
   11054:	e12fff1e 	bx	lr

00011058 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   11058:	e92d4010 	push	{r4, lr}
   1105c:	e1a04000 	mov	r4, r0
   11060:	e59f300c 	ldr	r3, [pc, #12]	; 11074 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x1c>
   11064:	e5803000 	str	r3, [r0]
   11068:	eb001b15 	bl	17cc4 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   1106c:	e1a00004 	mov	r0, r4
   11070:	e8bd8010 	pop	{r4, pc}
   11074:	0003eb34 	.word	0x0003eb34

00011078 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   11078:	e92d4010 	push	{r4, lr}
   1107c:	e1a04000 	mov	r4, r0
   11080:	e59f3018 	ldr	r3, [pc, #24]	; 110a0 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x28>
   11084:	e5803000 	str	r3, [r0]
   11088:	eb001b0d 	bl	17cc4 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   1108c:	e1a00004 	mov	r0, r4
   11090:	e3a01f4d 	mov	r1, #308	; 0x134
   11094:	eb0067bb 	bl	2af88 <operator delete(void*, unsigned int)>
   11098:	e1a00004 	mov	r0, r4
   1109c:	e8bd8010 	pop	{r4, pc}
   110a0:	0003eb34 	.word	0x0003eb34

000110a4 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   110a4:	e92d4010 	push	{r4, lr}
   110a8:	e5d13000 	ldrb	r3, [r1]
   110ac:	e1a04001 	mov	r4, r1
   110b0:	e3530030 	cmp	r3, #48	; 0x30
   110b4:	e24dd008 	sub	sp, sp, #8
   110b8:	1a00006e 	bne	11278 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1d4>
   110bc:	e3a03000 	mov	r3, #0
   110c0:	e5803108 	str	r3, [r0, #264]	; 0x108
   110c4:	e5d13003 	ldrb	r3, [r1, #3]
   110c8:	e3130001 	tst	r3, #1
   110cc:	13a03080 	movne	r3, #128	; 0x80
   110d0:	15803108 	strne	r3, [r0, #264]	; 0x108
   110d4:	15d13003 	ldrbne	r3, [r1, #3]
   110d8:	e3130002 	tst	r3, #2
   110dc:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   110e0:	13833b01 	orrne	r3, r3, #1024	; 0x400
   110e4:	15803108 	strne	r3, [r0, #264]	; 0x108
   110e8:	15d13003 	ldrbne	r3, [r1, #3]
   110ec:	e3130004 	tst	r3, #4
   110f0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   110f4:	13833c01 	orrne	r3, r3, #256	; 0x100
   110f8:	15803108 	strne	r3, [r0, #264]	; 0x108
   110fc:	15d13003 	ldrbne	r3, [r1, #3]
   11100:	e3130008 	tst	r3, #8
   11104:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11108:	13833c02 	orrne	r3, r3, #512	; 0x200
   1110c:	15803108 	strne	r3, [r0, #264]	; 0x108
   11110:	15d13003 	ldrbne	r3, [r1, #3]
   11114:	e3130040 	tst	r3, #64	; 0x40
   11118:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1111c:	13833040 	orrne	r3, r3, #64	; 0x40
   11120:	15803108 	strne	r3, [r0, #264]	; 0x108
   11124:	15d13003 	ldrbne	r3, [r1, #3]
   11128:	e3130080 	tst	r3, #128	; 0x80
   1112c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11130:	13833010 	orrne	r3, r3, #16
   11134:	15803108 	strne	r3, [r0, #264]	; 0x108
   11138:	e5d13004 	ldrb	r3, [r1, #4]
   1113c:	e3130001 	tst	r3, #1
   11140:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11144:	13833702 	orrne	r3, r3, #524288	; 0x80000
   11148:	15803108 	strne	r3, [r0, #264]	; 0x108
   1114c:	15d13004 	ldrbne	r3, [r1, #4]
   11150:	e3130002 	tst	r3, #2
   11154:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11158:	13833601 	orrne	r3, r3, #1048576	; 0x100000
   1115c:	15803108 	strne	r3, [r0, #264]	; 0x108
   11160:	15d13004 	ldrbne	r3, [r1, #4]
   11164:	e3130004 	tst	r3, #4
   11168:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1116c:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   11170:	15803108 	strne	r3, [r0, #264]	; 0x108
   11174:	15d13004 	ldrbne	r3, [r1, #4]
   11178:	e3130008 	tst	r3, #8
   1117c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11180:	13833a01 	orrne	r3, r3, #4096	; 0x1000
   11184:	15803108 	strne	r3, [r0, #264]	; 0x108
   11188:	15d13004 	ldrbne	r3, [r1, #4]
   1118c:	e3130010 	tst	r3, #16
   11190:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11194:	13833001 	orrne	r3, r3, #1
   11198:	15803108 	strne	r3, [r0, #264]	; 0x108
   1119c:	15d13004 	ldrbne	r3, [r1, #4]
   111a0:	e3130020 	tst	r3, #32
   111a4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   111a8:	13833b02 	orrne	r3, r3, #2048	; 0x800
   111ac:	15803108 	strne	r3, [r0, #264]	; 0x108
   111b0:	e5d13005 	ldrb	r3, [r1, #5]
   111b4:	e3130001 	tst	r3, #1
   111b8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   111bc:	13833802 	orrne	r3, r3, #131072	; 0x20000
   111c0:	15803108 	strne	r3, [r0, #264]	; 0x108
   111c4:	15d13005 	ldrbne	r3, [r1, #5]
   111c8:	e3130002 	tst	r3, #2
   111cc:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   111d0:	13833902 	orrne	r3, r3, #32768	; 0x8000
   111d4:	15803108 	strne	r3, [r0, #264]	; 0x108
   111d8:	15d13005 	ldrbne	r3, [r1, #5]
   111dc:	e3130004 	tst	r3, #4
   111e0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   111e4:	13833801 	orrne	r3, r3, #65536	; 0x10000
   111e8:	15803108 	strne	r3, [r0, #264]	; 0x108
   111ec:	15d13005 	ldrbne	r3, [r1, #5]
   111f0:	e3130008 	tst	r3, #8
   111f4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   111f8:	13833701 	orrne	r3, r3, #262144	; 0x40000
   111fc:	15803108 	strne	r3, [r0, #264]	; 0x108
   11200:	15d13005 	ldrbne	r3, [r1, #5]
   11204:	e3130040 	tst	r3, #64	; 0x40
   11208:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1120c:	13833020 	orrne	r3, r3, #32
   11210:	15803108 	strne	r3, [r0, #264]	; 0x108
   11214:	15d13005 	ldrbne	r3, [r1, #5]
   11218:	e3130080 	tst	r3, #128	; 0x80
   1121c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11220:	13833008 	orrne	r3, r3, #8
   11224:	15803108 	strne	r3, [r0, #264]	; 0x108
   11228:	e5d12007 	ldrb	r2, [r1, #7]
   1122c:	e5d13006 	ldrb	r3, [r1, #6]
   11230:	e1833402 	orr	r3, r3, r2, lsl #8
   11234:	e1a03243 	asr	r3, r3, #4
   11238:	e6ef3073 	uxtb	r3, r3
   1123c:	e5803028 	str	r3, [r0, #40]	; 0x28
   11240:	e5d13008 	ldrb	r3, [r1, #8]
   11244:	e26330ff 	rsb	r3, r3, #255	; 0xff
   11248:	e5803034 	str	r3, [r0, #52]	; 0x34
   1124c:	e5d13009 	ldrb	r3, [r1, #9]
   11250:	e5d1200a 	ldrb	r2, [r1, #10]
   11254:	e1833402 	orr	r3, r3, r2, lsl #8
   11258:	e1a03243 	asr	r3, r3, #4
   1125c:	e6ef3073 	uxtb	r3, r3
   11260:	e5803040 	str	r3, [r0, #64]	; 0x40
   11264:	e5d1300b 	ldrb	r3, [r1, #11]
   11268:	e26330ff 	rsb	r3, r3, #255	; 0xff
   1126c:	e580304c 	str	r3, [r0, #76]	; 0x4c
   11270:	e28dd008 	add	sp, sp, #8
   11274:	e8bd8010 	pop	{r4, pc}
   11278:	eb005615 	bl	26ad4 <CLogger::Get()>
   1127c:	e5d42000 	ldrb	r2, [r4]
   11280:	e59f3014 	ldr	r3, [pc, #20]	; 1129c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1f8>
   11284:	e58d2000 	str	r2, [sp]
   11288:	e59f1010 	ldr	r1, [pc, #16]	; 112a0 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1fc>
   1128c:	e3a02003 	mov	r2, #3
   11290:	eb005551 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11294:	e28dd008 	add	sp, sp, #8
   11298:	e8bd8010 	pop	{r4, pc}
   1129c:	0003ea30 	.word	0x0003ea30
   112a0:	0003eb78 	.word	0x0003eb78

000112a4 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   112a4:	e1a0c000 	mov	ip, r0
   112a8:	e92d4070 	push	{r4, r5, r6, lr}
   112ac:	e1a06001 	mov	r6, r1
   112b0:	e5d03131 	ldrb	r3, [r0, #305]	; 0x131
   112b4:	e24dd010 	sub	sp, sp, #16
   112b8:	e59f5064 	ldr	r5, [pc, #100]	; 11324 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x80>
   112bc:	e2832001 	add	r2, r3, #1
   112c0:	e28d4004 	add	r4, sp, #4
   112c4:	e203e00f 	and	lr, r3, #15
   112c8:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   112cc:	e3a03000 	mov	r3, #0
   112d0:	e8950007 	ldm	r5, {r0, r1, r2}
   112d4:	e8840007 	stm	r4, {r0, r1, r2}
   112d8:	e1a01004 	mov	r1, r4
   112dc:	e1a0000c 	mov	r0, ip
   112e0:	e3a0200c 	mov	r2, #12
   112e4:	e5cde005 	strb	lr, [sp, #5]
   112e8:	e5cd600f 	strb	r6, [sp, #15]
   112ec:	eb000425 	bl	12388 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   112f0:	e2504000 	subs	r4, r0, #0
   112f4:	0a000002 	beq	11304 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x60>
   112f8:	e1a00004 	mov	r0, r4
   112fc:	e28dd010 	add	sp, sp, #16
   11300:	e8bd8070 	pop	{r4, r5, r6, pc}
   11304:	eb0055f2 	bl	26ad4 <CLogger::Get()>
   11308:	e3a02001 	mov	r2, #1
   1130c:	e59f3014 	ldr	r3, [pc, #20]	; 11328 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x84>
   11310:	e2451010 	sub	r1, r5, #16
   11314:	eb005530 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11318:	e1a00004 	mov	r0, r4
   1131c:	e28dd010 	add	sp, sp, #16
   11320:	e8bd8070 	pop	{r4, r5, r6, pc}
   11324:	0003eb88 	.word	0x0003eb88
   11328:	0003ea4c 	.word	0x0003ea4c

0001132c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   1132c:	e92d4010 	push	{r4, lr}
   11330:	e1a0e000 	mov	lr, r0
   11334:	e59f20b0 	ldr	r2, [pc, #176]	; 113ec <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xc0>
   11338:	e24dd010 	sub	sp, sp, #16
   1133c:	e28dc004 	add	ip, sp, #4
   11340:	e1a03001 	mov	r3, r1
   11344:	e3510001 	cmp	r1, #1
   11348:	e8920007 	ldm	r2, {r0, r1, r2}
   1134c:	e8ac0003 	stmia	ip!, {r0, r1}
   11350:	e1a0000e 	mov	r0, lr
   11354:	e1cc20b0 	strh	r2, [ip]
   11358:	0a00001e 	beq	113d8 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xac>
   1135c:	e3530002 	cmp	r3, #2
   11360:	0a000005 	beq	1137c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   11364:	e3530000 	cmp	r3, #0
   11368:	13a04001 	movne	r4, #1
   1136c:	0a000006 	beq	1138c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x60>
   11370:	e1a00004 	mov	r0, r4
   11374:	e28dd010 	add	sp, sp, #16
   11378:	e8bd8010 	pop	{r4, pc}
   1137c:	e3a02d82 	mov	r2, #8320	; 0x2080
   11380:	e3e0309d 	mvn	r3, #157	; 0x9d
   11384:	e1cd20b6 	strh	r2, [sp, #6]
   11388:	e1cd30b8 	strh	r3, [sp, #8]
   1138c:	e5d03131 	ldrb	r3, [r0, #305]	; 0x131
   11390:	e28d1004 	add	r1, sp, #4
   11394:	e2832001 	add	r2, r3, #1
   11398:	e203c00f 	and	ip, r3, #15
   1139c:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   113a0:	e3a03000 	mov	r3, #0
   113a4:	e3a0200a 	mov	r2, #10
   113a8:	e5cdc005 	strb	ip, [sp, #5]
   113ac:	eb0003f5 	bl	12388 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   113b0:	e2504000 	subs	r4, r0, #0
   113b4:	1affffed 	bne	11370 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x44>
   113b8:	eb0055c5 	bl	26ad4 <CLogger::Get()>
   113bc:	e3a02001 	mov	r2, #1
   113c0:	e59f3028 	ldr	r3, [pc, #40]	; 113f0 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xc4>
   113c4:	e59f1028 	ldr	r1, [pc, #40]	; 113f4 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xc8>
   113c8:	eb005503 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   113cc:	e1a00004 	mov	r0, r4
   113d0:	e28dd010 	add	sp, sp, #16
   113d4:	e8bd8010 	pop	{r4, pc}
   113d8:	e3e0209d 	mvn	r2, #157	; 0x9d
   113dc:	e59f3014 	ldr	r3, [pc, #20]	; 113f8 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xcc>
   113e0:	e1cd20bc 	strh	r2, [sp, #12]
   113e4:	e1cd30ba 	strh	r3, [sp, #10]
   113e8:	eaffffe7 	b	1138c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x60>
   113ec:	0003eb94 	.word	0x0003eb94
   113f0:	0003ea60 	.word	0x0003ea60
   113f4:	0003eb78 	.word	0x0003eb78
   113f8:	00002098 	.word	0x00002098

000113fc <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   113fc:	e92d4010 	push	{r4, lr}
   11400:	e1a04000 	mov	r4, r0
   11404:	eb001a1d 	bl	17c80 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11408:	e3a03000 	mov	r3, #0
   1140c:	e59f2024 	ldr	r2, [pc, #36]	; 11438 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)+0x3c>
   11410:	e1a00004 	mov	r0, r4
   11414:	e5842000 	str	r2, [r4]
   11418:	e3a01003 	mov	r1, #3
   1141c:	e1a02003 	mov	r2, r3
   11420:	ebfff970 	bl	f9e8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   11424:	e3a03000 	mov	r3, #0
   11428:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   1142c:	e5c43131 	strb	r3, [r4, #305]	; 0x131
   11430:	e1a00004 	mov	r0, r4
   11434:	e8bd8010 	pop	{r4, pc}
   11438:	0003eb34 	.word	0x0003eb34

0001143c <CUSBGamePadSwitchProDevice::Configure()>:
   1143c:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   11440:	e28db018 	add	fp, sp, #24
   11444:	e24dd014 	sub	sp, sp, #20
   11448:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
   1144c:	e3550000 	cmp	r5, #0
   11450:	0a00005c 	beq	115c8 <CUSBGamePadSwitchProDevice::Configure()+0x18c>
   11454:	e3a03040 	mov	r3, #64	; 0x40
   11458:	e2806f4a 	add	r6, r0, #296	; 0x128
   1145c:	e1c630b0 	strh	r3, [r6]
   11460:	e1a04000 	mov	r4, r0
   11464:	eb0019da 	bl	17bd4 <CUSBGamePadDevice::Configure()>
   11468:	e2505000 	subs	r5, r0, #0
   1146c:	0a000062 	beq	115fc <CUSBGamePadSwitchProDevice::Configure()+0x1c0>
   11470:	e3a03012 	mov	r3, #18
   11474:	e1a0100d 	mov	r1, sp
   11478:	e1d620b0 	ldrh	r2, [r6]
   1147c:	e5843104 	str	r3, [r4, #260]	; 0x104
   11480:	e2823007 	add	r3, r2, #7
   11484:	e1a031a3 	lsr	r3, r3, #3
   11488:	e0413183 	sub	r3, r1, r3, lsl #3
   1148c:	e3a07000 	mov	r7, #0
   11490:	e3a000ff 	mov	r0, #255	; 0xff
   11494:	e1a0d003 	mov	sp, r3
   11498:	e3a0c004 	mov	ip, #4
   1149c:	e1a0100d 	mov	r1, sp
   114a0:	e1a03007 	mov	r3, r7
   114a4:	e584c024 	str	ip, [r4, #36]	; 0x24
   114a8:	e5840030 	str	r0, [r4, #48]	; 0x30
   114ac:	e584003c 	str	r0, [r4, #60]	; 0x3c
   114b0:	e5840048 	str	r0, [r4, #72]	; 0x48
   114b4:	e5840054 	str	r0, [r4, #84]	; 0x54
   114b8:	e58470e8 	str	r7, [r4, #232]	; 0xe8
   114bc:	e1a00004 	mov	r0, r4
   114c0:	e584702c 	str	r7, [r4, #44]	; 0x2c
   114c4:	e5847038 	str	r7, [r4, #56]	; 0x38
   114c8:	e5847044 	str	r7, [r4, #68]	; 0x44
   114cc:	e5847050 	str	r7, [r4, #80]	; 0x50
   114d0:	eb000408 	bl	124f8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   114d4:	e3a0cd0e 	mov	ip, #896	; 0x380
   114d8:	e1a03007 	mov	r3, r7
   114dc:	e3a02002 	mov	r2, #2
   114e0:	e1a00004 	mov	r0, r4
   114e4:	e24b1028 	sub	r1, fp, #40	; 0x28
   114e8:	e14bc2b8 	strh	ip, [fp, #-40]	; 0xffffffd8
   114ec:	eb0003a5 	bl	12388 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   114f0:	e2505000 	subs	r5, r0, #0
   114f4:	e1a0800d 	mov	r8, sp
   114f8:	0a000037 	beq	115dc <CUSBGamePadSwitchProDevice::Configure()+0x1a0>
   114fc:	e1a03007 	mov	r3, r7
   11500:	e1a0100d 	mov	r1, sp
   11504:	e1a00004 	mov	r0, r4
   11508:	e1d620b0 	ldrh	r2, [r6]
   1150c:	eb0003f9 	bl	124f8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   11510:	e3500000 	cmp	r0, #0
   11514:	da000040 	ble	1161c <CUSBGamePadSwitchProDevice::Configure()+0x1e0>
   11518:	e5dd3000 	ldrb	r3, [sp]
   1151c:	e3530081 	cmp	r3, #129	; 0x81
   11520:	1a00001f 	bne	115a4 <CUSBGamePadSwitchProDevice::Configure()+0x168>
   11524:	e5dd3001 	ldrb	r3, [sp, #1]
   11528:	e3530003 	cmp	r3, #3
   1152c:	1a00001c 	bne	115a4 <CUSBGamePadSwitchProDevice::Configure()+0x168>
   11530:	e3a0cd0a 	mov	ip, #640	; 0x280
   11534:	e1a03007 	mov	r3, r7
   11538:	e3a02002 	mov	r2, #2
   1153c:	e1a00004 	mov	r0, r4
   11540:	e24b1024 	sub	r1, fp, #36	; 0x24
   11544:	e14bc2b4 	strh	ip, [fp, #-36]	; 0xffffffdc
   11548:	eb00038e 	bl	12388 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1154c:	e2505000 	subs	r5, r0, #0
   11550:	0a000038 	beq	11638 <CUSBGamePadSwitchProDevice::Configure()+0x1fc>
   11554:	e1a03007 	mov	r3, r7
   11558:	e1a0100d 	mov	r1, sp
   1155c:	e1a00004 	mov	r0, r4
   11560:	e1d620b0 	ldrh	r2, [r6]
   11564:	eb0003e3 	bl	124f8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   11568:	e3500000 	cmp	r0, #0
   1156c:	da000050 	ble	116b4 <CUSBGamePadSwitchProDevice::Configure()+0x278>
   11570:	e5dd3000 	ldrb	r3, [sp]
   11574:	e3530081 	cmp	r3, #129	; 0x81
   11578:	1a000002 	bne	11588 <CUSBGamePadSwitchProDevice::Configure()+0x14c>
   1157c:	e5dd3001 	ldrb	r3, [sp, #1]
   11580:	e3530002 	cmp	r3, #2
   11584:	0a000031 	beq	11650 <CUSBGamePadSwitchProDevice::Configure()+0x214>
   11588:	eb005551 	bl	26ad4 <CLogger::Get()>
   1158c:	e3a02001 	mov	r2, #1
   11590:	e59f3168 	ldr	r3, [pc, #360]	; 11700 <CUSBGamePadSwitchProDevice::Configure()+0x2c4>
   11594:	e59f1168 	ldr	r1, [pc, #360]	; 11704 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   11598:	eb00548f 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1159c:	e3a05000 	mov	r5, #0
   115a0:	ea000005 	b	115bc <CUSBGamePadSwitchProDevice::Configure()+0x180>
   115a4:	eb00554a 	bl	26ad4 <CLogger::Get()>
   115a8:	e3a02001 	mov	r2, #1
   115ac:	e59f3154 	ldr	r3, [pc, #340]	; 11708 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   115b0:	e59f114c 	ldr	r1, [pc, #332]	; 11704 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   115b4:	eb005488 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   115b8:	e3a05000 	mov	r5, #0
   115bc:	e1a00005 	mov	r0, r5
   115c0:	e24bd018 	sub	sp, fp, #24
   115c4:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   115c8:	e59f1134 	ldr	r1, [pc, #308]	; 11704 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   115cc:	ebfff8f2 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   115d0:	e1a00005 	mov	r0, r5
   115d4:	e24bd018 	sub	sp, fp, #24
   115d8:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   115dc:	eb00553c 	bl	26ad4 <CLogger::Get()>
   115e0:	e3a02001 	mov	r2, #1
   115e4:	e59f311c 	ldr	r3, [pc, #284]	; 11708 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   115e8:	e59f1114 	ldr	r1, [pc, #276]	; 11704 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   115ec:	eb00547a 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   115f0:	e1a00005 	mov	r0, r5
   115f4:	e24bd018 	sub	sp, fp, #24
   115f8:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   115fc:	eb005534 	bl	26ad4 <CLogger::Get()>
   11600:	e3a02001 	mov	r2, #1
   11604:	e59f3100 	ldr	r3, [pc, #256]	; 1170c <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   11608:	e59f10f4 	ldr	r1, [pc, #244]	; 11704 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   1160c:	eb005472 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11610:	e1a00005 	mov	r0, r5
   11614:	e24bd018 	sub	sp, fp, #24
   11618:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1161c:	eb00552c 	bl	26ad4 <CLogger::Get()>
   11620:	e3a02001 	mov	r2, #1
   11624:	e59f30e4 	ldr	r3, [pc, #228]	; 11710 <CUSBGamePadSwitchProDevice::Configure()+0x2d4>
   11628:	e59f10d4 	ldr	r1, [pc, #212]	; 11704 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   1162c:	e1a05007 	mov	r5, r7
   11630:	eb005469 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11634:	eaffffe0 	b	115bc <CUSBGamePadSwitchProDevice::Configure()+0x180>
   11638:	eb005525 	bl	26ad4 <CLogger::Get()>
   1163c:	e3a02001 	mov	r2, #1
   11640:	e59f30b8 	ldr	r3, [pc, #184]	; 11700 <CUSBGamePadSwitchProDevice::Configure()+0x2c4>
   11644:	e59f10b8 	ldr	r1, [pc, #184]	; 11704 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   11648:	eb005463 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1164c:	eaffffda 	b	115bc <CUSBGamePadSwitchProDevice::Configure()+0x180>
   11650:	e3a0cd12 	mov	ip, #1152	; 0x480
   11654:	e3a03000 	mov	r3, #0
   11658:	e3a02002 	mov	r2, #2
   1165c:	e1a00004 	mov	r0, r4
   11660:	e24b1020 	sub	r1, fp, #32
   11664:	e14bc2b0 	strh	ip, [fp, #-32]	; 0xffffffe0
   11668:	eb000346 	bl	12388 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1166c:	e2505000 	subs	r5, r0, #0
   11670:	0a00001c 	beq	116e8 <CUSBGamePadSwitchProDevice::Configure()+0x2ac>
   11674:	e5943000 	ldr	r3, [r4]
   11678:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   1167c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   11680:	e1a00004 	mov	r0, r4
   11684:	e12fff33 	blx	r3
   11688:	e1a01008 	mov	r1, r8
   1168c:	e3a03000 	mov	r3, #0
   11690:	e1a00004 	mov	r0, r4
   11694:	e1d620b0 	ldrh	r2, [r6]
   11698:	eb000396 	bl	124f8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   1169c:	e3500000 	cmp	r0, #0
   116a0:	da00000a 	ble	116d0 <CUSBGamePadSwitchProDevice::Configure()+0x294>
   116a4:	e1a00004 	mov	r0, r4
   116a8:	eb0003bf 	bl	125ac <CUSBHIDDevice::StartRequest()>
   116ac:	e1a05000 	mov	r5, r0
   116b0:	eaffffc1 	b	115bc <CUSBGamePadSwitchProDevice::Configure()+0x180>
   116b4:	eb005506 	bl	26ad4 <CLogger::Get()>
   116b8:	e3a02001 	mov	r2, #1
   116bc:	e59f3050 	ldr	r3, [pc, #80]	; 11714 <CUSBGamePadSwitchProDevice::Configure()+0x2d8>
   116c0:	e59f103c 	ldr	r1, [pc, #60]	; 11704 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   116c4:	e1a05007 	mov	r5, r7
   116c8:	eb005443 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   116cc:	eaffffba 	b	115bc <CUSBGamePadSwitchProDevice::Configure()+0x180>
   116d0:	eb0054ff 	bl	26ad4 <CLogger::Get()>
   116d4:	e3a02001 	mov	r2, #1
   116d8:	e59f3038 	ldr	r3, [pc, #56]	; 11718 <CUSBGamePadSwitchProDevice::Configure()+0x2dc>
   116dc:	e59f1020 	ldr	r1, [pc, #32]	; 11704 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   116e0:	eb00543d 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   116e4:	eaffffee 	b	116a4 <CUSBGamePadSwitchProDevice::Configure()+0x268>
   116e8:	eb0054f9 	bl	26ad4 <CLogger::Get()>
   116ec:	e3a02001 	mov	r2, #1
   116f0:	e59f3024 	ldr	r3, [pc, #36]	; 1171c <CUSBGamePadSwitchProDevice::Configure()+0x2e0>
   116f4:	e59f1008 	ldr	r1, [pc, #8]	; 11704 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   116f8:	eb005437 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   116fc:	eaffffae 	b	115bc <CUSBGamePadSwitchProDevice::Configure()+0x180>
   11700:	0003eab8 	.word	0x0003eab8
   11704:	0003eb78 	.word	0x0003eb78
   11708:	0003ea78 	.word	0x0003ea78
   1170c:	0003e778 	.word	0x0003e778
   11710:	0003ea98 	.word	0x0003ea98
   11714:	0003ead4 	.word	0x0003ead4
   11718:	0003eb10 	.word	0x0003eb10
   1171c:	0003eaf0 	.word	0x0003eaf0

00011720 <CUSBGamePadSwitchProDevice::GetProperties()>:
   11720:	e3a0004b 	mov	r0, #75	; 0x4b
   11724:	e12fff1e 	bx	lr

00011728 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   11728:	e92d4010 	push	{r4, lr}
   1172c:	e1a04000 	mov	r4, r0
   11730:	e59f300c 	ldr	r3, [pc, #12]	; 11744 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x1c>
   11734:	e5803000 	str	r3, [r0]
   11738:	eb001961 	bl	17cc4 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   1173c:	e1a00004 	mov	r0, r4
   11740:	e8bd8010 	pop	{r4, pc}
   11744:	0003ebe4 	.word	0x0003ebe4

00011748 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   11748:	e92d4010 	push	{r4, lr}
   1174c:	e1a04000 	mov	r4, r0
   11750:	e59f3018 	ldr	r3, [pc, #24]	; 11770 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x28>
   11754:	e5803000 	str	r3, [r0]
   11758:	eb001959 	bl	17cc4 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   1175c:	e1a00004 	mov	r0, r4
   11760:	e3a01e13 	mov	r1, #304	; 0x130
   11764:	eb006607 	bl	2af88 <operator delete(void*, unsigned int)>
   11768:	e1a00004 	mov	r0, r4
   1176c:	e8bd8010 	pop	{r4, pc}
   11770:	0003ebe4 	.word	0x0003ebe4

00011774 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   11774:	e242200e 	sub	r2, r2, #14
   11778:	e16f2f12 	clz	r2, r2
   1177c:	e3510000 	cmp	r1, #0
   11780:	e1a022a2 	lsr	r2, r2, #5
   11784:	03a02000 	moveq	r2, #0
   11788:	e3520000 	cmp	r2, #0
   1178c:	012fff1e 	bxeq	lr
   11790:	e5d12000 	ldrb	r2, [r1]
   11794:	e3520000 	cmp	r2, #0
   11798:	112fff1e 	bxne	lr
   1179c:	e5d13001 	ldrb	r3, [r1, #1]
   117a0:	e3530014 	cmp	r3, #20
   117a4:	112fff1e 	bxne	lr
   117a8:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   117ac:	e92d4070 	push	{r4, r5, r6, lr}
   117b0:	e3530000 	cmp	r3, #0
   117b4:	e1a04000 	mov	r4, r0
   117b8:	08bd8070 	popeq	{r4, r5, r6, pc}
   117bc:	e1a05000 	mov	r5, r0
   117c0:	e4953024 	ldr	r3, [r5], #36	; 0x24
   117c4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   117c8:	e12fff33 	blx	r3
   117cc:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   117d0:	e1a01005 	mov	r1, r5
   117d4:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   117d8:	e2400001 	sub	r0, r0, #1
   117dc:	e8bd4070 	pop	{r4, r5, r6, lr}
   117e0:	e12fff13 	bx	r3

000117e4 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   117e4:	e3510000 	cmp	r1, #0
   117e8:	e92d4010 	push	{r4, lr}
   117ec:	0a00003e 	beq	118ec <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x108>
   117f0:	e5d13000 	ldrb	r3, [r1]
   117f4:	e5d12001 	ldrb	r2, [r1, #1]
   117f8:	e1833402 	orr	r3, r3, r2, lsl #8
   117fc:	e3530b05 	cmp	r3, #5120	; 0x1400
   11800:	1a00003d 	bne	118fc <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x118>
   11804:	e3a0e000 	mov	lr, #0
   11808:	e5d12002 	ldrb	r2, [r1, #2]
   1180c:	e5d1c003 	ldrb	ip, [r1, #3]
   11810:	e59f30f4 	ldr	r3, [pc, #244]	; 1190c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x128>
   11814:	e580e108 	str	lr, [r0, #264]	; 0x108
   11818:	e182240c 	orr	r2, r2, ip, lsl #8
   1181c:	e283e040 	add	lr, r3, #64	; 0x40
   11820:	e3120001 	tst	r2, #1
   11824:	15934000 	ldrne	r4, [r3]
   11828:	1590c108 	ldrne	ip, [r0, #264]	; 0x108
   1182c:	e2833004 	add	r3, r3, #4
   11830:	118cc004 	orrne	ip, ip, r4
   11834:	1580c108 	strne	ip, [r0, #264]	; 0x108
   11838:	e15e0003 	cmp	lr, r3
   1183c:	e1a020a2 	lsr	r2, r2, #1
   11840:	1afffff6 	bne	11820 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x3c>
   11844:	e3a0c000 	mov	ip, #0
   11848:	e1a0200c 	mov	r2, ip
   1184c:	e5d1e007 	ldrb	lr, [r1, #7]
   11850:	e5d13006 	ldrb	r3, [r1, #6]
   11854:	e183340e 	orr	r3, r3, lr, lsl #8
   11858:	e6bf3073 	sxth	r3, r3
   1185c:	e2833902 	add	r3, r3, #32768	; 0x8000
   11860:	e59fe0a8 	ldr	lr, [pc, #168]	; 11910 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x12c>
   11864:	e1a03423 	lsr	r3, r3, #8
   11868:	e0822082 	add	r2, r2, r2, lsl #1
   1186c:	e28cc001 	add	ip, ip, #1
   11870:	e0802102 	add	r2, r0, r2, lsl #2
   11874:	e35c0004 	cmp	ip, #4
   11878:	e5823028 	str	r3, [r2, #40]	; 0x28
   1187c:	0a00000b 	beq	118b0 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xcc>
   11880:	e081208c 	add	r2, r1, ip, lsl #1
   11884:	e5d24007 	ldrb	r4, [r2, #7]
   11888:	e5d23006 	ldrb	r3, [r2, #6]
   1188c:	e49e2004 	ldr	r2, [lr], #4
   11890:	e1833404 	orr	r3, r3, r4, lsl #8
   11894:	e6bf3073 	sxth	r3, r3
   11898:	e3c24002 	bic	r4, r2, #2
   1189c:	e2833902 	add	r3, r3, #32768	; 0x8000
   118a0:	e3540001 	cmp	r4, #1
   118a4:	e1a03423 	lsr	r3, r3, #8
   118a8:	026330ff 	rsbeq	r3, r3, #255	; 0xff
   118ac:	eaffffed 	b	11868 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x84>
   118b0:	e5d13004 	ldrb	r3, [r1, #4]
   118b4:	e5803058 	str	r3, [r0, #88]	; 0x58
   118b8:	e1d130d4 	ldrsb	r3, [r1, #4]
   118bc:	e3530000 	cmp	r3, #0
   118c0:	b5903108 	ldrlt	r3, [r0, #264]	; 0x108
   118c4:	b3833008 	orrlt	r3, r3, #8
   118c8:	b5803108 	strlt	r3, [r0, #264]	; 0x108
   118cc:	e5d13005 	ldrb	r3, [r1, #5]
   118d0:	e5803064 	str	r3, [r0, #100]	; 0x64
   118d4:	e1d130d5 	ldrsb	r3, [r1, #5]
   118d8:	e3530000 	cmp	r3, #0
   118dc:	b5903108 	ldrlt	r3, [r0, #264]	; 0x108
   118e0:	b3833010 	orrlt	r3, r3, #16
   118e4:	b5803108 	strlt	r3, [r0, #264]	; 0x108
   118e8:	e8bd8010 	pop	{r4, pc}
   118ec:	e3a02077 	mov	r2, #119	; 0x77
   118f0:	e59f101c 	ldr	r1, [pc, #28]	; 11914 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x130>
   118f4:	e59f001c 	ldr	r0, [pc, #28]	; 11918 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x134>
   118f8:	eb004b8d 	bl	24734 <assertion_failed>
   118fc:	e3a02078 	mov	r2, #120	; 0x78
   11900:	e59f100c 	ldr	r1, [pc, #12]	; 11914 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x130>
   11904:	e59f0010 	ldr	r0, [pc, #16]	; 1191c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x138>
   11908:	eb004b89 	bl	24734 <assertion_failed>
   1190c:	0003ec28 	.word	0x0003ec28
   11910:	0003ec6c 	.word	0x0003ec6c
   11914:	0003eba0 	.word	0x0003eba0
   11918:	0003e7d4 	.word	0x0003e7d4
   1191c:	0003ebb8 	.word	0x0003ebb8

00011920 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   11920:	e3510004 	cmp	r1, #4
   11924:	9a000001 	bls	11930 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x10>
   11928:	e3a00000 	mov	r0, #0
   1192c:	e12fff1e 	bx	lr
   11930:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11934:	e59f302c 	ldr	r3, [pc, #44]	; 11968 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x48>
   11938:	e24dd00c 	sub	sp, sp, #12
   1193c:	e0831001 	add	r1, r3, r1
   11940:	e5d1e0a4 	ldrb	lr, [r1, #164]	; 0xa4
   11944:	e59fc020 	ldr	ip, [pc, #32]	; 1196c <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x4c>
   11948:	e3a03000 	mov	r3, #0
   1194c:	e3a02003 	mov	r2, #3
   11950:	e28d1004 	add	r1, sp, #4
   11954:	e5cde006 	strb	lr, [sp, #6]
   11958:	e1cdc0b4 	strh	ip, [sp, #4]
   1195c:	eb000289 	bl	12388 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11960:	e28dd00c 	add	sp, sp, #12
   11964:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11968:	0003ebdc 	.word	0x0003ebdc
   1196c:	00000301 	.word	0x00000301

00011970 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   11970:	e92d4030 	push	{r4, r5, lr}
   11974:	e24dd00c 	sub	sp, sp, #12
   11978:	e1a04001 	mov	r4, r1
   1197c:	e1a05000 	mov	r5, r0
   11980:	e3a02008 	mov	r2, #8
   11984:	e1a0000d 	mov	r0, sp
   11988:	e3a01000 	mov	r1, #0
   1198c:	eb006140 	bl	29e94 <memset>
   11990:	e3a03008 	mov	r3, #8
   11994:	e3540001 	cmp	r4, #1
   11998:	e5cd3001 	strb	r3, [sp, #1]
   1199c:	0a000007 	beq	119c0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   119a0:	e3540002 	cmp	r4, #2
   119a4:	0a00000e 	beq	119e4 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x74>
   119a8:	e3540000 	cmp	r4, #0
   119ac:	0a000005 	beq	119c8 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x58>
   119b0:	e3a020e5 	mov	r2, #229	; 0xe5
   119b4:	e59f1034 	ldr	r1, [pc, #52]	; 119f0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x80>
   119b8:	e59f0034 	ldr	r0, [pc, #52]	; 119f4 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x84>
   119bc:	eb004b5c 	bl	24734 <assertion_failed>
   119c0:	e3e03000 	mvn	r3, #0
   119c4:	e5cd3004 	strb	r3, [sp, #4]
   119c8:	e1a0100d 	mov	r1, sp
   119cc:	e1a00005 	mov	r0, r5
   119d0:	e3a03000 	mov	r3, #0
   119d4:	e3a02008 	mov	r2, #8
   119d8:	eb00026a 	bl	12388 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   119dc:	e28dd00c 	add	sp, sp, #12
   119e0:	e8bd8030 	pop	{r4, r5, pc}
   119e4:	e3e03000 	mvn	r3, #0
   119e8:	e5cd3003 	strb	r3, [sp, #3]
   119ec:	eafffff5 	b	119c8 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x58>
   119f0:	0003eba0 	.word	0x0003eba0
   119f4:	0003e11c 	.word	0x0003e11c

000119f8 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   119f8:	e92d4010 	push	{r4, lr}
   119fc:	e1a04000 	mov	r4, r0
   11a00:	eb00189e 	bl	17c80 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11a04:	e59f3008 	ldr	r3, [pc, #8]	; 11a14 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)+0x1c>
   11a08:	e1a00004 	mov	r0, r4
   11a0c:	e5843000 	str	r3, [r4]
   11a10:	e8bd8010 	pop	{r4, pc}
   11a14:	0003ebe4 	.word	0x0003ebe4

00011a18 <CUSBGamePadXbox360Device::Configure()>:
   11a18:	e3a0200e 	mov	r2, #14
   11a1c:	e2803f4a 	add	r3, r0, #296	; 0x128
   11a20:	e92d4010 	push	{r4, lr}
   11a24:	e1c320b0 	strh	r2, [r3]
   11a28:	e1a04000 	mov	r4, r0
   11a2c:	eb001868 	bl	17bd4 <CUSBGamePadDevice::Configure()>
   11a30:	e3500000 	cmp	r0, #0
   11a34:	0a00001e 	beq	11ab4 <CUSBGamePadXbox360Device::Configure()+0x9c>
   11a38:	e3a03000 	mov	r3, #0
   11a3c:	e3a020ff 	mov	r2, #255	; 0xff
   11a40:	e3a0c012 	mov	ip, #18
   11a44:	e3a00006 	mov	r0, #6
   11a48:	e5941000 	ldr	r1, [r4]
   11a4c:	e5840024 	str	r0, [r4, #36]	; 0x24
   11a50:	e584302c 	str	r3, [r4, #44]	; 0x2c
   11a54:	e5843038 	str	r3, [r4, #56]	; 0x38
   11a58:	e5843044 	str	r3, [r4, #68]	; 0x44
   11a5c:	e5843050 	str	r3, [r4, #80]	; 0x50
   11a60:	e584305c 	str	r3, [r4, #92]	; 0x5c
   11a64:	e5843068 	str	r3, [r4, #104]	; 0x68
   11a68:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   11a6c:	e1a00004 	mov	r0, r4
   11a70:	e5913034 	ldr	r3, [r1, #52]	; 0x34
   11a74:	e584c104 	str	ip, [r4, #260]	; 0x104
   11a78:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   11a7c:	e5842030 	str	r2, [r4, #48]	; 0x30
   11a80:	e584203c 	str	r2, [r4, #60]	; 0x3c
   11a84:	e5842048 	str	r2, [r4, #72]	; 0x48
   11a88:	e5842054 	str	r2, [r4, #84]	; 0x54
   11a8c:	e5842060 	str	r2, [r4, #96]	; 0x60
   11a90:	e584206c 	str	r2, [r4, #108]	; 0x6c
   11a94:	e12fff33 	blx	r3
   11a98:	e3500000 	cmp	r0, #0
   11a9c:	1a000001 	bne	11aa8 <CUSBGamePadXbox360Device::Configure()+0x90>
   11aa0:	e3a00000 	mov	r0, #0
   11aa4:	e8bd8010 	pop	{r4, pc}
   11aa8:	e1a00004 	mov	r0, r4
   11aac:	e8bd4010 	pop	{r4, lr}
   11ab0:	ea0002bd 	b	125ac <CUSBHIDDevice::StartRequest()>
   11ab4:	eb005406 	bl	26ad4 <CLogger::Get()>
   11ab8:	e3a02001 	mov	r2, #1
   11abc:	e59f300c 	ldr	r3, [pc, #12]	; 11ad0 <CUSBGamePadXbox360Device::Configure()+0xb8>
   11ac0:	e59f100c 	ldr	r1, [pc, #12]	; 11ad4 <CUSBGamePadXbox360Device::Configure()+0xbc>
   11ac4:	eb005344 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11ac8:	e3a00000 	mov	r0, #0
   11acc:	e8bd8010 	pop	{r4, pc}
   11ad0:	0003e778 	.word	0x0003e778
   11ad4:	0003ec88 	.word	0x0003ec88

00011ad8 <CUSBGamePadXbox360Device::GetProperties()>:
   11ad8:	e3a0000b 	mov	r0, #11
   11adc:	e12fff1e 	bx	lr

00011ae0 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   11ae0:	e3a02000 	mov	r2, #0
   11ae4:	e5d13004 	ldrb	r3, [r1, #4]
   11ae8:	e5802108 	str	r2, [r0, #264]	; 0x108
   11aec:	e3130004 	tst	r3, #4
   11af0:	13a02901 	movne	r2, #16384	; 0x4000
   11af4:	15802108 	strne	r2, [r0, #264]	; 0x108
   11af8:	e3130008 	tst	r3, #8
   11afc:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b00:	13822b02 	orrne	r2, r2, #2048	; 0x800
   11b04:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b08:	e3130010 	tst	r3, #16
   11b0c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b10:	13822c02 	orrne	r2, r2, #512	; 0x200
   11b14:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b18:	e3130020 	tst	r3, #32
   11b1c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b20:	13822c01 	orrne	r2, r2, #256	; 0x100
   11b24:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b28:	e3130040 	tst	r3, #64	; 0x40
   11b2c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b30:	13822b01 	orrne	r2, r2, #1024	; 0x400
   11b34:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b38:	e1b033a3 	lsrs	r3, r3, #7
   11b3c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11b40:	13833080 	orrne	r3, r3, #128	; 0x80
   11b44:	15803108 	strne	r3, [r0, #264]	; 0x108
   11b48:	e5d13005 	ldrb	r3, [r1, #5]
   11b4c:	e3130001 	tst	r3, #1
   11b50:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b54:	13822902 	orrne	r2, r2, #32768	; 0x8000
   11b58:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b5c:	e3130002 	tst	r3, #2
   11b60:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b64:	13822802 	orrne	r2, r2, #131072	; 0x20000
   11b68:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b6c:	e3130004 	tst	r3, #4
   11b70:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b74:	13822701 	orrne	r2, r2, #262144	; 0x40000
   11b78:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b7c:	e3130008 	tst	r3, #8
   11b80:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b84:	13822801 	orrne	r2, r2, #65536	; 0x10000
   11b88:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b8c:	e3130010 	tst	r3, #16
   11b90:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b94:	13822020 	orrne	r2, r2, #32
   11b98:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b9c:	e3130020 	tst	r3, #32
   11ba0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11ba4:	13822040 	orrne	r2, r2, #64	; 0x40
   11ba8:	15802108 	strne	r2, [r0, #264]	; 0x108
   11bac:	e3130040 	tst	r3, #64	; 0x40
   11bb0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11bb4:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   11bb8:	15802108 	strne	r2, [r0, #264]	; 0x108
   11bbc:	e1b033a3 	lsrs	r3, r3, #7
   11bc0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11bc4:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   11bc8:	15803108 	strne	r3, [r0, #264]	; 0x108
   11bcc:	e5d12007 	ldrb	r2, [r1, #7]
   11bd0:	e5d13006 	ldrb	r3, [r1, #6]
   11bd4:	e1833402 	orr	r3, r3, r2, lsl #8
   11bd8:	e1a03143 	asr	r3, r3, #2
   11bdc:	e353007f 	cmp	r3, #127	; 0x7f
   11be0:	e5803058 	str	r3, [r0, #88]	; 0x58
   11be4:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   11be8:	c3833008 	orrgt	r3, r3, #8
   11bec:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   11bf0:	e5d12009 	ldrb	r2, [r1, #9]
   11bf4:	e5d13008 	ldrb	r3, [r1, #8]
   11bf8:	e1833402 	orr	r3, r3, r2, lsl #8
   11bfc:	e1a03143 	asr	r3, r3, #2
   11c00:	e353007f 	cmp	r3, #127	; 0x7f
   11c04:	e5803064 	str	r3, [r0, #100]	; 0x64
   11c08:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   11c0c:	c3833010 	orrgt	r3, r3, #16
   11c10:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   11c14:	e5d1200b 	ldrb	r2, [r1, #11]
   11c18:	e5d1300a 	ldrb	r3, [r1, #10]
   11c1c:	e1833402 	orr	r3, r3, r2, lsl #8
   11c20:	e6bf3073 	sxth	r3, r3
   11c24:	e2833902 	add	r3, r3, #32768	; 0x8000
   11c28:	e1a03423 	lsr	r3, r3, #8
   11c2c:	e5803028 	str	r3, [r0, #40]	; 0x28
   11c30:	e5d1200d 	ldrb	r2, [r1, #13]
   11c34:	e5d1300c 	ldrb	r3, [r1, #12]
   11c38:	e1833402 	orr	r3, r3, r2, lsl #8
   11c3c:	e6bf3073 	sxth	r3, r3
   11c40:	e2833902 	add	r3, r3, #32768	; 0x8000
   11c44:	e1a03423 	lsr	r3, r3, #8
   11c48:	e22330ff 	eor	r3, r3, #255	; 0xff
   11c4c:	e5803034 	str	r3, [r0, #52]	; 0x34
   11c50:	e5d1200f 	ldrb	r2, [r1, #15]
   11c54:	e5d1300e 	ldrb	r3, [r1, #14]
   11c58:	e1833402 	orr	r3, r3, r2, lsl #8
   11c5c:	e6bf3073 	sxth	r3, r3
   11c60:	e2833902 	add	r3, r3, #32768	; 0x8000
   11c64:	e1a03423 	lsr	r3, r3, #8
   11c68:	e5803040 	str	r3, [r0, #64]	; 0x40
   11c6c:	e5d13010 	ldrb	r3, [r1, #16]
   11c70:	e5d12011 	ldrb	r2, [r1, #17]
   11c74:	e1833402 	orr	r3, r3, r2, lsl #8
   11c78:	e6bf3073 	sxth	r3, r3
   11c7c:	e2833902 	add	r3, r3, #32768	; 0x8000
   11c80:	e1a03423 	lsr	r3, r3, #8
   11c84:	e22330ff 	eor	r3, r3, #255	; 0xff
   11c88:	e580304c 	str	r3, [r0, #76]	; 0x4c
   11c8c:	e12fff1e 	bx	lr

00011c90 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   11c90:	e92d4010 	push	{r4, lr}
   11c94:	e1a04000 	mov	r4, r0
   11c98:	e59f300c 	ldr	r3, [pc, #12]	; 11cac <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x1c>
   11c9c:	e5803000 	str	r3, [r0]
   11ca0:	eb001807 	bl	17cc4 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11ca4:	e1a00004 	mov	r0, r4
   11ca8:	e8bd8010 	pop	{r4, pc}
   11cac:	0003ece4 	.word	0x0003ece4

00011cb0 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   11cb0:	e92d4010 	push	{r4, lr}
   11cb4:	e1a04000 	mov	r4, r0
   11cb8:	e59f3018 	ldr	r3, [pc, #24]	; 11cd8 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x28>
   11cbc:	e5803000 	str	r3, [r0]
   11cc0:	eb0017ff 	bl	17cc4 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11cc4:	e1a00004 	mov	r0, r4
   11cc8:	e3a01f4d 	mov	r1, #308	; 0x134
   11ccc:	eb0064ad 	bl	2af88 <operator delete(void*, unsigned int)>
   11cd0:	e1a00004 	mov	r0, r4
   11cd4:	e8bd8010 	pop	{r4, pc}
   11cd8:	0003ece4 	.word	0x0003ece4

00011cdc <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   11cdc:	e251c000 	subs	ip, r1, #0
   11ce0:	012fff1e 	bxeq	lr
   11ce4:	e92d4030 	push	{r4, r5, lr}
   11ce8:	e3520006 	cmp	r2, #6
   11cec:	e1a04000 	mov	r4, r0
   11cf0:	e24dd014 	sub	sp, sp, #20
   11cf4:	0a000009 	beq	11d20 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
   11cf8:	e2422012 	sub	r2, r2, #18
   11cfc:	e16f2f12 	clz	r2, r2
   11d00:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   11d04:	e1a022a2 	lsr	r2, r2, #5
   11d08:	e3530000 	cmp	r3, #0
   11d0c:	03a02000 	moveq	r2, #0
   11d10:	e3520000 	cmp	r2, #0
   11d14:	1a00001b 	bne	11d88 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xac>
   11d18:	e28dd014 	add	sp, sp, #20
   11d1c:	e8bd8030 	pop	{r4, r5, pc}
   11d20:	e5dc3000 	ldrb	r3, [ip]
   11d24:	e3530007 	cmp	r3, #7
   11d28:	1afffffa 	bne	11d18 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11d2c:	e5dc3001 	ldrb	r3, [ip, #1]
   11d30:	e3530030 	cmp	r3, #48	; 0x30
   11d34:	1afffff7 	bne	11d18 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11d38:	e1a0e00d 	mov	lr, sp
   11d3c:	e59f5078 	ldr	r5, [pc, #120]	; 11dbc <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe0>
   11d40:	e5dcc002 	ldrb	ip, [ip, #2]
   11d44:	e895000f 	ldm	r5, {r0, r1, r2, r3}
   11d48:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   11d4c:	e1a00004 	mov	r0, r4
   11d50:	e5ce3000 	strb	r3, [lr]
   11d54:	e3a0200d 	mov	r2, #13
   11d58:	e3a03000 	mov	r3, #0
   11d5c:	e1a0100d 	mov	r1, sp
   11d60:	e5cdc002 	strb	ip, [sp, #2]
   11d64:	eb0001ab 	bl	12418 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   11d68:	e3500000 	cmp	r0, #0
   11d6c:	1affffe9 	bne	11d18 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11d70:	eb005357 	bl	26ad4 <CLogger::Get()>
   11d74:	e3a02001 	mov	r2, #1
   11d78:	e59f3040 	ldr	r3, [pc, #64]	; 11dc0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
   11d7c:	e2851010 	add	r1, r5, #16
   11d80:	eb005295 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11d84:	eaffffe3 	b	11d18 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11d88:	e5dc3000 	ldrb	r3, [ip]
   11d8c:	e3530020 	cmp	r3, #32
   11d90:	1affffe0 	bne	11d18 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11d94:	e1a05000 	mov	r5, r0
   11d98:	e4953024 	ldr	r3, [r5], #36	; 0x24
   11d9c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11da0:	e12fff33 	blx	r3
   11da4:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   11da8:	e1a01005 	mov	r1, r5
   11dac:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   11db0:	e2400001 	sub	r0, r0, #1
   11db4:	e12fff33 	blx	r3
   11db8:	eaffffd6 	b	11d18 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   11dbc:	0003ed28 	.word	0x0003ed28
   11dc0:	0003ec98 	.word	0x0003ec98

00011dc4 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   11dc4:	e92d4010 	push	{r4, lr}
   11dc8:	e24dd010 	sub	sp, sp, #16
   11dcc:	e1a0c00d 	mov	ip, sp
   11dd0:	e1a04000 	mov	r4, r0
   11dd4:	e59f3074 	ldr	r3, [pc, #116]	; 11e50 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   11dd8:	e1a0e001 	mov	lr, r1
   11ddc:	e3510001 	cmp	r1, #1
   11de0:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   11de4:	e8ac0007 	stmia	ip!, {r0, r1, r2}
   11de8:	e1a00004 	mov	r0, r4
   11dec:	e5cc3000 	strb	r3, [ip]
   11df0:	0a000007 	beq	11e14 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   11df4:	e35e0002 	cmp	lr, #2
   11df8:	0a000011 	beq	11e44 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x80>
   11dfc:	e35e0000 	cmp	lr, #0
   11e00:	0a000005 	beq	11e1c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x58>
   11e04:	e3a020ee 	mov	r2, #238	; 0xee
   11e08:	e59f1044 	ldr	r1, [pc, #68]	; 11e54 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x90>
   11e0c:	e59f0044 	ldr	r0, [pc, #68]	; 11e58 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x94>
   11e10:	eb004a47 	bl	24734 <assertion_failed>
   11e14:	e3e03000 	mvn	r3, #0
   11e18:	e5cd3009 	strb	r3, [sp, #9]
   11e1c:	e5d0c130 	ldrb	ip, [r0, #304]	; 0x130
   11e20:	e1a0100d 	mov	r1, sp
   11e24:	e28c3001 	add	r3, ip, #1
   11e28:	e3a0200d 	mov	r2, #13
   11e2c:	e5c03130 	strb	r3, [r0, #304]	; 0x130
   11e30:	e3a03000 	mov	r3, #0
   11e34:	e5cdc002 	strb	ip, [sp, #2]
   11e38:	eb000152 	bl	12388 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11e3c:	e28dd010 	add	sp, sp, #16
   11e40:	e8bd8010 	pop	{r4, pc}
   11e44:	e3e03000 	mvn	r3, #0
   11e48:	e5cd3008 	strb	r3, [sp, #8]
   11e4c:	eafffff2 	b	11e1c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x58>
   11e50:	0003ed48 	.word	0x0003ed48
   11e54:	0003ecac 	.word	0x0003ecac
   11e58:	0003e11c 	.word	0x0003e11c

00011e5c <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   11e5c:	e92d4010 	push	{r4, lr}
   11e60:	e1a04000 	mov	r4, r0
   11e64:	eb001785 	bl	17c80 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11e68:	e3a02000 	mov	r2, #0
   11e6c:	e59f300c 	ldr	r3, [pc, #12]	; 11e80 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)+0x24>
   11e70:	e1a00004 	mov	r0, r4
   11e74:	e5c42130 	strb	r2, [r4, #304]	; 0x130
   11e78:	e5843000 	str	r3, [r4]
   11e7c:	e8bd8010 	pop	{r4, pc}
   11e80:	0003ece4 	.word	0x0003ece4

00011e84 <CUSBGamePadXboxOneDevice::Configure()>:
   11e84:	e3a02040 	mov	r2, #64	; 0x40
   11e88:	e92d4070 	push	{r4, r5, r6, lr}
   11e8c:	e2803f4a 	add	r3, r0, #296	; 0x128
   11e90:	e24dd008 	sub	sp, sp, #8
   11e94:	e1c320b0 	strh	r2, [r3]
   11e98:	e1a04000 	mov	r4, r0
   11e9c:	eb00174c 	bl	17bd4 <CUSBGamePadDevice::Configure()>
   11ea0:	e2505000 	subs	r5, r0, #0
   11ea4:	0a00002a 	beq	11f54 <CUSBGamePadXboxOneDevice::Configure()+0xd0>
   11ea8:	e3a03000 	mov	r3, #0
   11eac:	e3a020ff 	mov	r2, #255	; 0xff
   11eb0:	e3a01010 	mov	r1, #16
   11eb4:	e3a0c006 	mov	ip, #6
   11eb8:	e59f60b4 	ldr	r6, [pc, #180]	; 11f74 <CUSBGamePadXboxOneDevice::Configure()+0xf0>
   11ebc:	e5841104 	str	r1, [r4, #260]	; 0x104
   11ec0:	e5842030 	str	r2, [r4, #48]	; 0x30
   11ec4:	e8960003 	ldm	r6, {r0, r1}
   11ec8:	e584203c 	str	r2, [r4, #60]	; 0x3c
   11ecc:	e58d0000 	str	r0, [sp]
   11ed0:	e5cd1004 	strb	r1, [sp, #4]
   11ed4:	e5842048 	str	r2, [r4, #72]	; 0x48
   11ed8:	e5842054 	str	r2, [r4, #84]	; 0x54
   11edc:	e5842060 	str	r2, [r4, #96]	; 0x60
   11ee0:	e584206c 	str	r2, [r4, #108]	; 0x6c
   11ee4:	e1a0100d 	mov	r1, sp
   11ee8:	e3a02005 	mov	r2, #5
   11eec:	e1a00004 	mov	r0, r4
   11ef0:	e584c024 	str	ip, [r4, #36]	; 0x24
   11ef4:	e584302c 	str	r3, [r4, #44]	; 0x2c
   11ef8:	e5843038 	str	r3, [r4, #56]	; 0x38
   11efc:	e5843044 	str	r3, [r4, #68]	; 0x44
   11f00:	e5843050 	str	r3, [r4, #80]	; 0x50
   11f04:	e584305c 	str	r3, [r4, #92]	; 0x5c
   11f08:	e5843068 	str	r3, [r4, #104]	; 0x68
   11f0c:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   11f10:	eb00011c 	bl	12388 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11f14:	e2505000 	subs	r5, r0, #0
   11f18:	0a000005 	beq	11f34 <CUSBGamePadXboxOneDevice::Configure()+0xb0>
   11f1c:	e1a00004 	mov	r0, r4
   11f20:	eb0001a1 	bl	125ac <CUSBHIDDevice::StartRequest()>
   11f24:	e1a05000 	mov	r5, r0
   11f28:	e1a00005 	mov	r0, r5
   11f2c:	e28dd008 	add	sp, sp, #8
   11f30:	e8bd8070 	pop	{r4, r5, r6, pc}
   11f34:	eb0052e6 	bl	26ad4 <CLogger::Get()>
   11f38:	e3a02001 	mov	r2, #1
   11f3c:	e59f3034 	ldr	r3, [pc, #52]	; 11f78 <CUSBGamePadXboxOneDevice::Configure()+0xf4>
   11f40:	e2461020 	sub	r1, r6, #32
   11f44:	eb005224 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11f48:	e1a00005 	mov	r0, r5
   11f4c:	e28dd008 	add	sp, sp, #8
   11f50:	e8bd8070 	pop	{r4, r5, r6, pc}
   11f54:	eb0052de 	bl	26ad4 <CLogger::Get()>
   11f58:	e3a02001 	mov	r2, #1
   11f5c:	e59f3018 	ldr	r3, [pc, #24]	; 11f7c <CUSBGamePadXboxOneDevice::Configure()+0xf8>
   11f60:	e59f1018 	ldr	r1, [pc, #24]	; 11f80 <CUSBGamePadXboxOneDevice::Configure()+0xfc>
   11f64:	eb00521c 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11f68:	e1a00005 	mov	r0, r5
   11f6c:	e28dd008 	add	sp, sp, #8
   11f70:	e8bd8070 	pop	{r4, r5, r6, pc}
   11f74:	0003ed58 	.word	0x0003ed58
   11f78:	0003ecc4 	.word	0x0003ecc4
   11f7c:	0003e778 	.word	0x0003e778
   11f80:	0003ed38 	.word	0x0003ed38

00011f84 <CUSBGamePadXboxOneDevice::GetProperties()>:
   11f84:	e3a00009 	mov	r0, #9
   11f88:	e12fff1e 	bx	lr

00011f8c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   11f8c:	e92d4070 	push	{r4, r5, r6, lr}
   11f90:	e2504000 	subs	r4, r0, #0
   11f94:	0a000017 	beq	11ff8 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x6c>
   11f98:	e1a05001 	mov	r5, r1
   11f9c:	eb00092d 	bl	14458 <CUSBRequest::GetStatus() const>
   11fa0:	e3500000 	cmp	r0, #0
   11fa4:	0a00000d 	beq	11fe0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x54>
   11fa8:	e1a00004 	mov	r0, r4
   11fac:	eb00091a 	bl	1441c <CUSBRequest::~CUSBRequest()>
   11fb0:	e1a00004 	mov	r0, r4
   11fb4:	e3a01028 	mov	r1, #40	; 0x28
   11fb8:	eb00098d 	bl	145f4 <CUSBRequest::operator delete(void*, unsigned int)>
   11fbc:	e3550000 	cmp	r5, #0
   11fc0:	1a000003 	bne	11fd4 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x48>
   11fc4:	e3a020b8 	mov	r2, #184	; 0xb8
   11fc8:	e59f1038 	ldr	r1, [pc, #56]	; 12008 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x7c>
   11fcc:	e59f0038 	ldr	r0, [pc, #56]	; 1200c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x80>
   11fd0:	eb0049d7 	bl	24734 <assertion_failed>
   11fd4:	e1a00005 	mov	r0, r5
   11fd8:	e8bd4070 	pop	{r4, r5, r6, lr}
   11fdc:	ea0063e8 	b	2af84 <operator delete[](void*)>
   11fe0:	eb0052bb 	bl	26ad4 <CLogger::Get()>
   11fe4:	e3a02002 	mov	r2, #2
   11fe8:	e59f3020 	ldr	r3, [pc, #32]	; 12010 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x84>
   11fec:	e59f1020 	ldr	r1, [pc, #32]	; 12014 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x88>
   11ff0:	eb0051f9 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11ff4:	eaffffeb 	b	11fa8 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x1c>
   11ff8:	e3a020af 	mov	r2, #175	; 0xaf
   11ffc:	e59f1004 	ldr	r1, [pc, #4]	; 12008 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x7c>
   12000:	e59f0010 	ldr	r0, [pc, #16]	; 12018 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x8c>
   12004:	eb0049ca 	bl	24734 <assertion_failed>
   12008:	0003ed60 	.word	0x0003ed60
   1200c:	0003ed90 	.word	0x0003ed90
   12010:	0003ed74 	.word	0x0003ed74
   12014:	0003ee64 	.word	0x0003ee64
   12018:	0003d604 	.word	0x0003d604

0001201c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   1201c:	e92d4070 	push	{r4, r5, r6, lr}
   12020:	e1a04000 	mov	r4, r0
   12024:	e1a05002 	mov	r5, r2
   12028:	ebfff5d1 	bl	f774 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1202c:	e3a03000 	mov	r3, #0
   12030:	e59f2038 	ldr	r2, [pc, #56]	; 12070 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x54>
   12034:	e1550003 	cmp	r5, r3
   12038:	e5845010 	str	r5, [r4, #16]
   1203c:	e5842000 	str	r2, [r4]
   12040:	e5843014 	str	r3, [r4, #20]
   12044:	e5843018 	str	r3, [r4, #24]
   12048:	e584301c 	str	r3, [r4, #28]
   1204c:	e5843020 	str	r3, [r4, #32]
   12050:	1a000001 	bne	1205c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x40>
   12054:	e1a00004 	mov	r0, r4
   12058:	e8bd8070 	pop	{r4, r5, r6, pc}
   1205c:	e1a00005 	mov	r0, r5
   12060:	eb0063c0 	bl	2af68 <operator new[](unsigned int)>
   12064:	e5840020 	str	r0, [r4, #32]
   12068:	e1a00004 	mov	r0, r4
   1206c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12070:	0003ee74 	.word	0x0003ee74

00012074 <CUSBHIDDevice::~CUSBHIDDevice()>:
   12074:	e92d4070 	push	{r4, r5, r6, lr}
   12078:	e1a04000 	mov	r4, r0
   1207c:	e5900020 	ldr	r0, [r0, #32]
   12080:	e59f3074 	ldr	r3, [pc, #116]	; 120fc <CUSBHIDDevice::~CUSBHIDDevice()+0x88>
   12084:	e3500000 	cmp	r0, #0
   12088:	e5843000 	str	r3, [r4]
   1208c:	0a000000 	beq	12094 <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
   12090:	eb0063bb 	bl	2af84 <operator delete[](void*)>
   12094:	e3a03000 	mov	r3, #0
   12098:	e5945018 	ldr	r5, [r4, #24]
   1209c:	e5843020 	str	r3, [r4, #32]
   120a0:	e1550003 	cmp	r5, r3
   120a4:	0a000004 	beq	120bc <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   120a8:	e1a00005 	mov	r0, r5
   120ac:	ebfff4b1 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   120b0:	e1a00005 	mov	r0, r5
   120b4:	e3a01014 	mov	r1, #20
   120b8:	eb0063b2 	bl	2af88 <operator delete(void*, unsigned int)>
   120bc:	e3a03000 	mov	r3, #0
   120c0:	e5945014 	ldr	r5, [r4, #20]
   120c4:	e5843018 	str	r3, [r4, #24]
   120c8:	e1550003 	cmp	r5, r3
   120cc:	0a000004 	beq	120e4 <CUSBHIDDevice::~CUSBHIDDevice()+0x70>
   120d0:	e1a00005 	mov	r0, r5
   120d4:	ebfff4a7 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   120d8:	e1a00005 	mov	r0, r5
   120dc:	e3a01014 	mov	r1, #20
   120e0:	eb0063a8 	bl	2af88 <operator delete(void*, unsigned int)>
   120e4:	e3a03000 	mov	r3, #0
   120e8:	e1a00004 	mov	r0, r4
   120ec:	e5843014 	str	r3, [r4, #20]
   120f0:	ebfff50d 	bl	f52c <CUSBFunction::~CUSBFunction()>
   120f4:	e1a00004 	mov	r0, r4
   120f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   120fc:	0003ee74 	.word	0x0003ee74

00012100 <CUSBHIDDevice::~CUSBHIDDevice()>:
   12100:	e92d4010 	push	{r4, lr}
   12104:	e1a04000 	mov	r4, r0
   12108:	ebffffd9 	bl	12074 <CUSBHIDDevice::~CUSBHIDDevice()>
   1210c:	e1a00004 	mov	r0, r4
   12110:	e3a01024 	mov	r1, #36	; 0x24
   12114:	eb00639b 	bl	2af88 <operator delete(void*, unsigned int)>
   12118:	e1a00004 	mov	r0, r4
   1211c:	e8bd8010 	pop	{r4, pc}

00012120 <CUSBHIDDevice::Configure(unsigned int)>:
   12120:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12124:	e24dd01c 	sub	sp, sp, #28
   12128:	e1a07001 	mov	r7, r1
   1212c:	e1a05000 	mov	r5, r0
   12130:	ebfff5e2 	bl	f8c0 <CUSBFunction::GetNumEndpoints() const>
   12134:	e2506000 	subs	r6, r0, #0
   12138:	1a000004 	bne	12150 <CUSBHIDDevice::Configure(unsigned int)+0x30>
   1213c:	ea000052 	b	1228c <CUSBHIDDevice::Configure(unsigned int)+0x16c>
   12140:	e5d43003 	ldrb	r3, [r4, #3]
   12144:	e203303f 	and	r3, r3, #63	; 0x3f
   12148:	e3530003 	cmp	r3, #3
   1214c:	0a00001e 	beq	121cc <CUSBHIDDevice::Configure(unsigned int)+0xac>
   12150:	e3a01005 	mov	r1, #5
   12154:	e1a00005 	mov	r0, r5
   12158:	ebfff604 	bl	f970 <CUSBFunction::GetDescriptor(unsigned char)>
   1215c:	e2504000 	subs	r4, r0, #0
   12160:	1afffff6 	bne	12140 <CUSBHIDDevice::Configure(unsigned int)+0x20>
   12164:	e5956014 	ldr	r6, [r5, #20]
   12168:	e1a00005 	mov	r0, r5
   1216c:	e3560000 	cmp	r6, #0
   12170:	0a00004b 	beq	122a4 <CUSBHIDDevice::Configure(unsigned int)+0x184>
   12174:	ebfff515 	bl	f5d0 <CUSBFunction::Configure()>
   12178:	e2506000 	subs	r6, r0, #0
   1217c:	0a000033 	beq	12250 <CUSBHIDDevice::Configure(unsigned int)+0x130>
   12180:	e1a00005 	mov	r0, r5
   12184:	ebfff656 	bl	fae4 <CUSBFunction::GetInterfaceClass() const>
   12188:	e3500003 	cmp	r0, #3
   1218c:	0a000049 	beq	122b8 <CUSBHIDDevice::Configure(unsigned int)+0x198>
   12190:	e5953010 	ldr	r3, [r5, #16]
   12194:	e3530000 	cmp	r3, #0
   12198:	1a000034 	bne	12270 <CUSBHIDDevice::Configure(unsigned int)+0x150>
   1219c:	e3570000 	cmp	r7, #0
   121a0:	e5857010 	str	r7, [r5, #16]
   121a4:	0a000064 	beq	1233c <CUSBHIDDevice::Configure(unsigned int)+0x21c>
   121a8:	e5953020 	ldr	r3, [r5, #32]
   121ac:	e3530000 	cmp	r3, #0
   121b0:	1a000069 	bne	1235c <CUSBHIDDevice::Configure(unsigned int)+0x23c>
   121b4:	e1a00007 	mov	r0, r7
   121b8:	eb00636a 	bl	2af68 <operator new[](unsigned int)>
   121bc:	e5850020 	str	r0, [r5, #32]
   121c0:	e1a00006 	mov	r0, r6
   121c4:	e28dd01c 	add	sp, sp, #28
   121c8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   121cc:	e1d430d2 	ldrsb	r3, [r4, #2]
   121d0:	e3530000 	cmp	r3, #0
   121d4:	ba00000e 	blt	12214 <CUSBHIDDevice::Configure(unsigned int)+0xf4>
   121d8:	e5953018 	ldr	r3, [r5, #24]
   121dc:	e1a00005 	mov	r0, r5
   121e0:	e3530000 	cmp	r3, #0
   121e4:	1a000058 	bne	1234c <CUSBHIDDevice::Configure(unsigned int)+0x22c>
   121e8:	ebfff5c0 	bl	f8f0 <CUSBFunction::GetDevice() const>
   121ec:	e1a01000 	mov	r1, r0
   121f0:	e3a00014 	mov	r0, #20
   121f4:	e58d1014 	str	r1, [sp, #20]
   121f8:	eb006354 	bl	2af50 <operator new(unsigned int)>
   121fc:	e1a06000 	mov	r6, r0
   12200:	e1a02004 	mov	r2, r4
   12204:	e59d1014 	ldr	r1, [sp, #20]
   12208:	ebfff3f6 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1220c:	e5856018 	str	r6, [r5, #24]
   12210:	eaffffce 	b	12150 <CUSBHIDDevice::Configure(unsigned int)+0x30>
   12214:	e5953014 	ldr	r3, [r5, #20]
   12218:	e1a00005 	mov	r0, r5
   1221c:	e3530000 	cmp	r3, #0
   12220:	1a000049 	bne	1234c <CUSBHIDDevice::Configure(unsigned int)+0x22c>
   12224:	ebfff5b1 	bl	f8f0 <CUSBFunction::GetDevice() const>
   12228:	e1a01000 	mov	r1, r0
   1222c:	e3a00014 	mov	r0, #20
   12230:	e58d1014 	str	r1, [sp, #20]
   12234:	eb006345 	bl	2af50 <operator new(unsigned int)>
   12238:	e1a06000 	mov	r6, r0
   1223c:	e1a02004 	mov	r2, r4
   12240:	e59d1014 	ldr	r1, [sp, #20]
   12244:	ebfff3e7 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12248:	e5856014 	str	r6, [r5, #20]
   1224c:	eaffffbf 	b	12150 <CUSBHIDDevice::Configure(unsigned int)+0x30>
   12250:	eb00521f 	bl	26ad4 <CLogger::Get()>
   12254:	e3a02001 	mov	r2, #1
   12258:	e59f310c 	ldr	r3, [pc, #268]	; 1236c <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   1225c:	e59f110c 	ldr	r1, [pc, #268]	; 12370 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   12260:	eb00515d 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12264:	e1a00006 	mov	r0, r6
   12268:	e28dd01c 	add	sp, sp, #28
   1226c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12270:	e5953020 	ldr	r3, [r5, #32]
   12274:	e3530000 	cmp	r3, #0
   12278:	1afffff9 	bne	12264 <CUSBHIDDevice::Configure(unsigned int)+0x144>
   1227c:	e3a02082 	mov	r2, #130	; 0x82
   12280:	e59f10ec 	ldr	r1, [pc, #236]	; 12374 <CUSBHIDDevice::Configure(unsigned int)+0x254>
   12284:	e59f00ec 	ldr	r0, [pc, #236]	; 12378 <CUSBHIDDevice::Configure(unsigned int)+0x258>
   12288:	eb004929 	bl	24734 <assertion_failed>
   1228c:	e1a00005 	mov	r0, r5
   12290:	e59f10d8 	ldr	r1, [pc, #216]	; 12370 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   12294:	ebfff5c0 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   12298:	e1a00006 	mov	r0, r6
   1229c:	e28dd01c 	add	sp, sp, #28
   122a0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   122a4:	e59f10c4 	ldr	r1, [pc, #196]	; 12370 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   122a8:	ebfff5bb 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   122ac:	e1a00006 	mov	r0, r6
   122b0:	e28dd01c 	add	sp, sp, #28
   122b4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   122b8:	e1a00005 	mov	r0, r5
   122bc:	ebfff614 	bl	fb14 <CUSBFunction::GetInterfaceSubClass() const>
   122c0:	e3500001 	cmp	r0, #1
   122c4:	e1a08000 	mov	r8, r0
   122c8:	1affffb0 	bne	12190 <CUSBHIDDevice::Configure(unsigned int)+0x70>
   122cc:	e1a00005 	mov	r0, r5
   122d0:	ebfff59b 	bl	f944 <CUSBFunction::GetHost() const>
   122d4:	e1a09000 	mov	r9, r0
   122d8:	e1a00005 	mov	r0, r5
   122dc:	ebfff58d 	bl	f918 <CUSBFunction::GetEndpoint0() const>
   122e0:	e1a01000 	mov	r1, r0
   122e4:	e1a00005 	mov	r0, r5
   122e8:	e58d1014 	str	r1, [sp, #20]
   122ec:	ebfff5f0 	bl	fab4 <CUSBFunction::GetInterfaceNumber() const>
   122f0:	e6ff3070 	uxth	r3, r0
   122f4:	e58d3004 	str	r3, [sp, #4]
   122f8:	e1a00009 	mov	r0, r9
   122fc:	e3a0300b 	mov	r3, #11
   12300:	e3a02021 	mov	r2, #33	; 0x21
   12304:	e59d1014 	ldr	r1, [sp, #20]
   12308:	e58d400c 	str	r4, [sp, #12]
   1230c:	e58d4008 	str	r4, [sp, #8]
   12310:	e58d4000 	str	r4, [sp]
   12314:	eb000136 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12318:	e3500000 	cmp	r0, #0
   1231c:	aaffff9b 	bge	12190 <CUSBHIDDevice::Configure(unsigned int)+0x70>
   12320:	eb0051eb 	bl	26ad4 <CLogger::Get()>
   12324:	e1a02008 	mov	r2, r8
   12328:	e59f304c 	ldr	r3, [pc, #76]	; 1237c <CUSBHIDDevice::Configure(unsigned int)+0x25c>
   1232c:	e59f103c 	ldr	r1, [pc, #60]	; 12370 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   12330:	e1a06004 	mov	r6, r4
   12334:	eb005128 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12338:	eaffffc9 	b	12264 <CUSBHIDDevice::Configure(unsigned int)+0x144>
   1233c:	e3a0207d 	mov	r2, #125	; 0x7d
   12340:	e59f102c 	ldr	r1, [pc, #44]	; 12374 <CUSBHIDDevice::Configure(unsigned int)+0x254>
   12344:	e59f0034 	ldr	r0, [pc, #52]	; 12380 <CUSBHIDDevice::Configure(unsigned int)+0x260>
   12348:	eb0048f9 	bl	24734 <assertion_failed>
   1234c:	e59f101c 	ldr	r1, [pc, #28]	; 12370 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   12350:	ebfff591 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   12354:	e3a06000 	mov	r6, #0
   12358:	eaffffc1 	b	12264 <CUSBHIDDevice::Configure(unsigned int)+0x144>
   1235c:	e3a0207f 	mov	r2, #127	; 0x7f
   12360:	e59f100c 	ldr	r1, [pc, #12]	; 12374 <CUSBHIDDevice::Configure(unsigned int)+0x254>
   12364:	e59f0018 	ldr	r0, [pc, #24]	; 12384 <CUSBHIDDevice::Configure(unsigned int)+0x264>
   12368:	eb0048f1 	bl	24734 <assertion_failed>
   1236c:	0003e6b8 	.word	0x0003e6b8
   12370:	0003ee64 	.word	0x0003ee64
   12374:	0003ed60 	.word	0x0003ed60
   12378:	0003edf0 	.word	0x0003edf0
   1237c:	0003eda4 	.word	0x0003eda4
   12380:	0003edc0 	.word	0x0003edc0
   12384:	0003edd8 	.word	0x0003edd8

00012388 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   12388:	e590c018 	ldr	ip, [r0, #24]
   1238c:	e35c0000 	cmp	ip, #0
   12390:	0a000013 	beq	123e4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x5c>
   12394:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12398:	e3510000 	cmp	r1, #0
   1239c:	e1a05001 	mov	r5, r1
   123a0:	e24dd00c 	sub	sp, sp, #12
   123a4:	0a000010 	beq	123ec <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x64>
   123a8:	e3520000 	cmp	r2, #0
   123ac:	e1a06002 	mov	r6, r2
   123b0:	0a000011 	beq	123fc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x74>
   123b4:	e1a07003 	mov	r7, r3
   123b8:	e1a04000 	mov	r4, r0
   123bc:	ebfff560 	bl	f944 <CUSBFunction::GetHost() const>
   123c0:	e58d7000 	str	r7, [sp]
   123c4:	e1a03006 	mov	r3, r6
   123c8:	e1a02005 	mov	r2, r5
   123cc:	e5941018 	ldr	r1, [r4, #24]
   123d0:	eb00016d 	bl	1298c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   123d4:	e1e00000 	mvn	r0, r0
   123d8:	e1a00fa0 	lsr	r0, r0, #31
   123dc:	e28dd00c 	add	sp, sp, #12
   123e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   123e4:	e1a0000c 	mov	r0, ip
   123e8:	e12fff1e 	bx	lr
   123ec:	e3a0208e 	mov	r2, #142	; 0x8e
   123f0:	e59f1014 	ldr	r1, [pc, #20]	; 1240c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x84>
   123f4:	e59f0014 	ldr	r0, [pc, #20]	; 12410 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x88>
   123f8:	eb0048cd 	bl	24734 <assertion_failed>
   123fc:	e3a0208f 	mov	r2, #143	; 0x8f
   12400:	e59f1004 	ldr	r1, [pc, #4]	; 1240c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x84>
   12404:	e59f0008 	ldr	r0, [pc, #8]	; 12414 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x8c>
   12408:	eb0048c9 	bl	24734 <assertion_failed>
   1240c:	0003ed60 	.word	0x0003ed60
   12410:	0003ef40 	.word	0x0003ef40
   12414:	0003ee08 	.word	0x0003ee08

00012418 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   12418:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1241c:	e1a04000 	mov	r4, r0
   12420:	e5900018 	ldr	r0, [r0, #24]
   12424:	e24dd008 	sub	sp, sp, #8
   12428:	e3500000 	cmp	r0, #0
   1242c:	0a000023 	beq	124c0 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xa8>
   12430:	e3510000 	cmp	r1, #0
   12434:	e1a06001 	mov	r6, r1
   12438:	0a000022 	beq	124c8 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xb0>
   1243c:	e3520000 	cmp	r2, #0
   12440:	e1a05002 	mov	r5, r2
   12444:	0a000023 	beq	124d8 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xc0>
   12448:	e1a00002 	mov	r0, r2
   1244c:	e1a07003 	mov	r7, r3
   12450:	eb0062c4 	bl	2af68 <operator new[](unsigned int)>
   12454:	e1a01006 	mov	r1, r6
   12458:	e1a02005 	mov	r2, r5
   1245c:	e1a08000 	mov	r8, r0
   12460:	eb0060d4 	bl	2a7b8 <memcpy>
   12464:	e3a00028 	mov	r0, #40	; 0x28
   12468:	eb00084c 	bl	145a0 <CUSBRequest::operator new(unsigned int)>
   1246c:	e3a01000 	mov	r1, #0
   12470:	e1a06000 	mov	r6, r0
   12474:	e58d1000 	str	r1, [sp]
   12478:	e1a03005 	mov	r3, r5
   1247c:	e1a02008 	mov	r2, r8
   12480:	e5941018 	ldr	r1, [r4, #24]
   12484:	eb0007c4 	bl	1439c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   12488:	e1a03004 	mov	r3, r4
   1248c:	e1a02008 	mov	r2, r8
   12490:	e1a00006 	mov	r0, r6
   12494:	e59f104c 	ldr	r1, [pc, #76]	; 124e8 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd0>
   12498:	eb000821 	bl	14524 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   1249c:	e1a00004 	mov	r0, r4
   124a0:	ebfff527 	bl	f944 <CUSBFunction::GetHost() const>
   124a4:	e1a01006 	mov	r1, r6
   124a8:	e1a02007 	mov	r2, r7
   124ac:	e5903000 	ldr	r3, [r0]
   124b0:	e593300c 	ldr	r3, [r3, #12]
   124b4:	e28dd008 	add	sp, sp, #8
   124b8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   124bc:	e12fff13 	bx	r3
   124c0:	e28dd008 	add	sp, sp, #8
   124c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   124c8:	e3a020a0 	mov	r2, #160	; 0xa0
   124cc:	e59f1018 	ldr	r1, [pc, #24]	; 124ec <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd4>
   124d0:	e59f0018 	ldr	r0, [pc, #24]	; 124f0 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd8>
   124d4:	eb004896 	bl	24734 <assertion_failed>
   124d8:	e3a020a1 	mov	r2, #161	; 0xa1
   124dc:	e59f1008 	ldr	r1, [pc, #8]	; 124ec <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd4>
   124e0:	e59f000c 	ldr	r0, [pc, #12]	; 124f4 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xdc>
   124e4:	eb004892 	bl	24734 <assertion_failed>
   124e8:	00011f8c 	.word	0x00011f8c
   124ec:	0003ed60 	.word	0x0003ed60
   124f0:	0003ef40 	.word	0x0003ef40
   124f4:	0003ee08 	.word	0x0003ee08

000124f8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   124f8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   124fc:	e590c01c 	ldr	ip, [r0, #28]
   12500:	e24dd00c 	sub	sp, sp, #12
   12504:	e35c0000 	cmp	ip, #0
   12508:	1a000012 	bne	12558 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x60>
   1250c:	e1a07003 	mov	r7, r3
   12510:	e5903014 	ldr	r3, [r0, #20]
   12514:	e1a04000 	mov	r4, r0
   12518:	e3530000 	cmp	r3, #0
   1251c:	0a000011 	beq	12568 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x70>
   12520:	e3510000 	cmp	r1, #0
   12524:	e1a05001 	mov	r5, r1
   12528:	0a000012 	beq	12578 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x80>
   1252c:	e3520000 	cmp	r2, #0
   12530:	e1a06002 	mov	r6, r2
   12534:	0a000013 	beq	12588 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x90>
   12538:	ebfff501 	bl	f944 <CUSBFunction::GetHost() const>
   1253c:	e58d7000 	str	r7, [sp]
   12540:	e1a03006 	mov	r3, r6
   12544:	e1a02005 	mov	r2, r5
   12548:	e5941014 	ldr	r1, [r4, #20]
   1254c:	eb00010e 	bl	1298c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12550:	e28dd00c 	add	sp, sp, #12
   12554:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12558:	e3a020be 	mov	r2, #190	; 0xbe
   1255c:	e59f1034 	ldr	r1, [pc, #52]	; 12598 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   12560:	e59f0034 	ldr	r0, [pc, #52]	; 1259c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa4>
   12564:	eb004872 	bl	24734 <assertion_failed>
   12568:	e3a020c0 	mov	r2, #192	; 0xc0
   1256c:	e59f1024 	ldr	r1, [pc, #36]	; 12598 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   12570:	e59f0028 	ldr	r0, [pc, #40]	; 125a0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa8>
   12574:	eb00486e 	bl	24734 <assertion_failed>
   12578:	e3a020c1 	mov	r2, #193	; 0xc1
   1257c:	e59f1014 	ldr	r1, [pc, #20]	; 12598 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   12580:	e59f001c 	ldr	r0, [pc, #28]	; 125a4 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   12584:	eb00486a 	bl	24734 <assertion_failed>
   12588:	e3a020c2 	mov	r2, #194	; 0xc2
   1258c:	e59f1004 	ldr	r1, [pc, #4]	; 12598 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   12590:	e59f0010 	ldr	r0, [pc, #16]	; 125a8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb0>
   12594:	eb004866 	bl	24734 <assertion_failed>
   12598:	0003ed60 	.word	0x0003ed60
   1259c:	0003ee18 	.word	0x0003ee18
   125a0:	0003ee24 	.word	0x0003ee24
   125a4:	0003ef40 	.word	0x0003ef40
   125a8:	0003ee08 	.word	0x0003ee08

000125ac <CUSBHIDDevice::StartRequest()>:
   125ac:	e92d4070 	push	{r4, r5, r6, lr}
   125b0:	e5903014 	ldr	r3, [r0, #20]
   125b4:	e24dd008 	sub	sp, sp, #8
   125b8:	e3530000 	cmp	r3, #0
   125bc:	0a000020 	beq	12644 <CUSBHIDDevice::StartRequest()+0x98>
   125c0:	e5903020 	ldr	r3, [r0, #32]
   125c4:	e1a04000 	mov	r4, r0
   125c8:	e3530000 	cmp	r3, #0
   125cc:	0a000020 	beq	12654 <CUSBHIDDevice::StartRequest()+0xa8>
   125d0:	e590501c 	ldr	r5, [r0, #28]
   125d4:	e3550000 	cmp	r5, #0
   125d8:	1a000021 	bne	12664 <CUSBHIDDevice::StartRequest()+0xb8>
   125dc:	e5903010 	ldr	r3, [r0, #16]
   125e0:	e3530000 	cmp	r3, #0
   125e4:	0a000022 	beq	12674 <CUSBHIDDevice::StartRequest()+0xc8>
   125e8:	e3a00028 	mov	r0, #40	; 0x28
   125ec:	eb0007eb 	bl	145a0 <CUSBRequest::operator new(unsigned int)>
   125f0:	e1a06000 	mov	r6, r0
   125f4:	e58d5000 	str	r5, [sp]
   125f8:	e5943010 	ldr	r3, [r4, #16]
   125fc:	e5942020 	ldr	r2, [r4, #32]
   12600:	e5941014 	ldr	r1, [r4, #20]
   12604:	eb000764 	bl	1439c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   12608:	e1a03004 	mov	r3, r4
   1260c:	e1a02005 	mov	r2, r5
   12610:	e1a00006 	mov	r0, r6
   12614:	e59f1068 	ldr	r1, [pc, #104]	; 12684 <CUSBHIDDevice::StartRequest()+0xd8>
   12618:	e584601c 	str	r6, [r4, #28]
   1261c:	eb0007c0 	bl	14524 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   12620:	e1a00004 	mov	r0, r4
   12624:	ebfff4c6 	bl	f944 <CUSBFunction::GetHost() const>
   12628:	e1a02005 	mov	r2, r5
   1262c:	e5903000 	ldr	r3, [r0]
   12630:	e594101c 	ldr	r1, [r4, #28]
   12634:	e593300c 	ldr	r3, [r3, #12]
   12638:	e28dd008 	add	sp, sp, #8
   1263c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12640:	e12fff13 	bx	r3
   12644:	e3a020c8 	mov	r2, #200	; 0xc8
   12648:	e59f1038 	ldr	r1, [pc, #56]	; 12688 <CUSBHIDDevice::StartRequest()+0xdc>
   1264c:	e59f0038 	ldr	r0, [pc, #56]	; 1268c <CUSBHIDDevice::StartRequest()+0xe0>
   12650:	eb004837 	bl	24734 <assertion_failed>
   12654:	e3a020c9 	mov	r2, #201	; 0xc9
   12658:	e59f1028 	ldr	r1, [pc, #40]	; 12688 <CUSBHIDDevice::StartRequest()+0xdc>
   1265c:	e59f002c 	ldr	r0, [pc, #44]	; 12690 <CUSBHIDDevice::StartRequest()+0xe4>
   12660:	eb004833 	bl	24734 <assertion_failed>
   12664:	e3a020cb 	mov	r2, #203	; 0xcb
   12668:	e59f1018 	ldr	r1, [pc, #24]	; 12688 <CUSBHIDDevice::StartRequest()+0xdc>
   1266c:	e59f0020 	ldr	r0, [pc, #32]	; 12694 <CUSBHIDDevice::StartRequest()+0xe8>
   12670:	eb00482f 	bl	24734 <assertion_failed>
   12674:	e3a020cc 	mov	r2, #204	; 0xcc
   12678:	e59f1008 	ldr	r1, [pc, #8]	; 12688 <CUSBHIDDevice::StartRequest()+0xdc>
   1267c:	e59f0014 	ldr	r0, [pc, #20]	; 12698 <CUSBHIDDevice::StartRequest()+0xec>
   12680:	eb00482b 	bl	24734 <assertion_failed>
   12684:	00012798 	.word	0x00012798
   12688:	0003ed60 	.word	0x0003ed60
   1268c:	0003ee24 	.word	0x0003ee24
   12690:	0003edf0 	.word	0x0003edf0
   12694:	0003ee18 	.word	0x0003ee18
   12698:	0003edc0 	.word	0x0003edc0

0001269c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   1269c:	e92d4030 	push	{r4, r5, lr}
   126a0:	e3510000 	cmp	r1, #0
   126a4:	e24dd00c 	sub	sp, sp, #12
   126a8:	0a00002d 	beq	12764 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xc8>
   126ac:	e590501c 	ldr	r5, [r0, #28]
   126b0:	e1a04000 	mov	r4, r0
   126b4:	e1550001 	cmp	r5, r1
   126b8:	1a00002d 	bne	12774 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   126bc:	e1a00005 	mov	r0, r5
   126c0:	eb000764 	bl	14458 <CUSBRequest::GetStatus() const>
   126c4:	e2502000 	subs	r2, r0, #0
   126c8:	e5943000 	ldr	r3, [r4]
   126cc:	1a000013 	bne	12720 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x84>
   126d0:	e1a01002 	mov	r1, r2
   126d4:	e1a00004 	mov	r0, r4
   126d8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   126dc:	e12fff33 	blx	r3
   126e0:	e594501c 	ldr	r5, [r4, #28]
   126e4:	e3550000 	cmp	r5, #0
   126e8:	0a000004 	beq	12700 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x64>
   126ec:	e1a00005 	mov	r0, r5
   126f0:	eb000749 	bl	1441c <CUSBRequest::~CUSBRequest()>
   126f4:	e1a00005 	mov	r0, r5
   126f8:	e3a01028 	mov	r1, #40	; 0x28
   126fc:	eb0007bc 	bl	145f4 <CUSBRequest::operator delete(void*, unsigned int)>
   12700:	e3a03000 	mov	r3, #0
   12704:	e1a00004 	mov	r0, r4
   12708:	e584301c 	str	r3, [r4, #28]
   1270c:	ebffffa6 	bl	125ac <CUSBHIDDevice::StartRequest()>
   12710:	e3500000 	cmp	r0, #0
   12714:	0a00000b 	beq	12748 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xac>
   12718:	e28dd00c 	add	sp, sp, #12
   1271c:	e8bd8030 	pop	{r4, r5, pc}
   12720:	e5941020 	ldr	r1, [r4, #32]
   12724:	e1a00005 	mov	r0, r5
   12728:	e58d1004 	str	r1, [sp, #4]
   1272c:	e5935024 	ldr	r5, [r3, #36]	; 0x24
   12730:	eb00074a 	bl	14460 <CUSBRequest::GetResultLength() const>
   12734:	e59d1004 	ldr	r1, [sp, #4]
   12738:	e1a02000 	mov	r2, r0
   1273c:	e1a00004 	mov	r0, r4
   12740:	e12fff35 	blx	r5
   12744:	eaffffe5 	b	126e0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x44>
   12748:	eb0050e1 	bl	26ad4 <CLogger::Get()>
   1274c:	e3a02001 	mov	r2, #1
   12750:	e59f302c 	ldr	r3, [pc, #44]	; 12784 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe8>
   12754:	e59f102c 	ldr	r1, [pc, #44]	; 12788 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xec>
   12758:	e28dd00c 	add	sp, sp, #12
   1275c:	e8bd4030 	pop	{r4, r5, lr}
   12760:	ea00501d 	b	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12764:	e3a020d6 	mov	r2, #214	; 0xd6
   12768:	e59f101c 	ldr	r1, [pc, #28]	; 1278c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xf0>
   1276c:	e59f001c 	ldr	r0, [pc, #28]	; 12790 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xf4>
   12770:	eb0047ef 	bl	24734 <assertion_failed>
   12774:	e3a020d7 	mov	r2, #215	; 0xd7
   12778:	e59f100c 	ldr	r1, [pc, #12]	; 1278c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xf0>
   1277c:	e59f0010 	ldr	r0, [pc, #16]	; 12794 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xf8>
   12780:	eb0047eb 	bl	24734 <assertion_failed>
   12784:	0003ee4c 	.word	0x0003ee4c
   12788:	0003ee64 	.word	0x0003ee64
   1278c:	0003ed60 	.word	0x0003ed60
   12790:	0003d604 	.word	0x0003d604
   12794:	0003ee3c 	.word	0x0003ee3c

00012798 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   12798:	e3520000 	cmp	r2, #0
   1279c:	0a000002 	beq	127ac <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   127a0:	e1a01000 	mov	r1, r0
   127a4:	e1a00002 	mov	r0, r2
   127a8:	eaffffbb 	b	1269c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   127ac:	e3a020ee 	mov	r2, #238	; 0xee
   127b0:	e92d4010 	push	{r4, lr}
   127b4:	e59f1004 	ldr	r1, [pc, #4]	; 127c0 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   127b8:	e59f0004 	ldr	r0, [pc, #4]	; 127c4 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   127bc:	eb0047dc 	bl	24734 <assertion_failed>
   127c0:	0003ed60 	.word	0x0003ed60
   127c4:	0003d518 	.word	0x0003d518

000127c8 <CUSBHostController::CUSBHostController()>:
   127c8:	e59f3004 	ldr	r3, [pc, #4]	; 127d4 <CUSBHostController::CUSBHostController()+0xc>
   127cc:	e5803000 	str	r3, [r0]
   127d0:	e12fff1e 	bx	lr
   127d4:	0003eea4 	.word	0x0003eea4

000127d8 <CUSBHostController::~CUSBHostController()>:
   127d8:	e12fff1e 	bx	lr

000127dc <CUSBHostController::~CUSBHostController()>:
   127dc:	e92d4010 	push	{r4, lr}
   127e0:	e1a04000 	mov	r4, r0
   127e4:	e3a01004 	mov	r1, #4
   127e8:	eb0061e6 	bl	2af88 <operator delete(void*, unsigned int)>
   127ec:	e1a00004 	mov	r0, r4
   127f0:	e8bd8010 	pop	{r4, pc}

000127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
   127f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   127f8:	e1a05000 	mov	r5, r0
   127fc:	e24dd038 	sub	sp, sp, #56	; 0x38
   12800:	e3a00008 	mov	r0, #8
   12804:	e1dd66b4 	ldrh	r6, [sp, #100]	; 0x64
   12808:	e1a08002 	mov	r8, r2
   1280c:	e1a07003 	mov	r7, r3
   12810:	e1dda5b8 	ldrh	sl, [sp, #88]	; 0x58
   12814:	e1dd95bc 	ldrh	r9, [sp, #92]	; 0x5c
   12818:	e58d100c 	str	r1, [sp, #12]
   1281c:	eb0061cb 	bl	2af50 <operator new(unsigned int)>
   12820:	e1a04000 	mov	r4, r0
   12824:	e58d0000 	str	r0, [sp]
   12828:	e5c08000 	strb	r8, [r0]
   1282c:	e1a0042a 	lsr	r0, sl, #8
   12830:	e1a0e429 	lsr	lr, r9, #8
   12834:	e1a0c426 	lsr	ip, r6, #8
   12838:	e1a03006 	mov	r3, r6
   1283c:	e59d100c 	ldr	r1, [sp, #12]
   12840:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
   12844:	e5c40003 	strb	r0, [r4, #3]
   12848:	e28d0010 	add	r0, sp, #16
   1284c:	e5c4e005 	strb	lr, [r4, #5]
   12850:	e5c4c007 	strb	ip, [r4, #7]
   12854:	e5c47001 	strb	r7, [r4, #1]
   12858:	e5c4a002 	strb	sl, [r4, #2]
   1285c:	e5c49004 	strb	r9, [r4, #4]
   12860:	e5c46006 	strb	r6, [r4, #6]
   12864:	eb0006cc 	bl	1439c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   12868:	e5953000 	ldr	r3, [r5]
   1286c:	e1a00005 	mov	r0, r5
   12870:	e3a02000 	mov	r2, #0
   12874:	e5933008 	ldr	r3, [r3, #8]
   12878:	e28d1010 	add	r1, sp, #16
   1287c:	e12fff33 	blx	r3
   12880:	e3500000 	cmp	r0, #0
   12884:	0a00000a 	beq	128b4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xc0>
   12888:	e28d0010 	add	r0, sp, #16
   1288c:	eb0006f3 	bl	14460 <CUSBRequest::GetResultLength() const>
   12890:	e1a05000 	mov	r5, r0
   12894:	e1a00004 	mov	r0, r4
   12898:	e3a01008 	mov	r1, #8
   1289c:	eb0061b9 	bl	2af88 <operator delete(void*, unsigned int)>
   128a0:	e28d0010 	add	r0, sp, #16
   128a4:	eb0006dc 	bl	1441c <CUSBRequest::~CUSBRequest()>
   128a8:	e1a00005 	mov	r0, r5
   128ac:	e28dd038 	add	sp, sp, #56	; 0x38
   128b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   128b4:	e3e05000 	mvn	r5, #0
   128b8:	eafffff5 	b	12894 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xa0>

000128bc <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
   128bc:	e92d4010 	push	{r4, lr}
   128c0:	e1833402 	orr	r3, r3, r2, lsl #8
   128c4:	e59d4008 	ldr	r4, [sp, #8]
   128c8:	e5dde010 	ldrb	lr, [sp, #16]
   128cc:	e1ddc1b4 	ldrh	ip, [sp, #20]
   128d0:	e58d3008 	str	r3, [sp, #8]
   128d4:	e1dd30bc 	ldrh	r3, [sp, #12]
   128d8:	e1a0200e 	mov	r2, lr
   128dc:	e58d3014 	str	r3, [sp, #20]
   128e0:	e58d4010 	str	r4, [sp, #16]
   128e4:	e58dc00c 	str	ip, [sp, #12]
   128e8:	e3a03006 	mov	r3, #6
   128ec:	e8bd4010 	pop	{r4, lr}
   128f0:	eaffffbf 	b	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

000128f4 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
   128f4:	e92d4010 	push	{r4, lr}
   128f8:	e3a04000 	mov	r4, #0
   128fc:	e24dd010 	sub	sp, sp, #16
   12900:	e58d2000 	str	r2, [sp]
   12904:	e3a03005 	mov	r3, #5
   12908:	e1a02004 	mov	r2, r4
   1290c:	e58d400c 	str	r4, [sp, #12]
   12910:	e58d4008 	str	r4, [sp, #8]
   12914:	e58d4004 	str	r4, [sp, #4]
   12918:	ebffffb5 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1291c:	e1500004 	cmp	r0, r4
   12920:	b1a00004 	movlt	r0, r4
   12924:	ba000003 	blt	12938 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x44>
   12928:	eb005d4d 	bl	29e64 <CTimer::Get()>
   1292c:	e3a00032 	mov	r0, #50	; 0x32
   12930:	eb005d16 	bl	29d90 <CTimer::SimpleMsDelay(unsigned int)>
   12934:	e3a00001 	mov	r0, #1
   12938:	e28dd010 	add	sp, sp, #16
   1293c:	e8bd8010 	pop	{r4, pc}

00012940 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
   12940:	e92d4010 	push	{r4, lr}
   12944:	e3a04000 	mov	r4, #0
   12948:	e24dd010 	sub	sp, sp, #16
   1294c:	e58d2000 	str	r2, [sp]
   12950:	e3a03009 	mov	r3, #9
   12954:	e1a02004 	mov	r2, r4
   12958:	e58d400c 	str	r4, [sp, #12]
   1295c:	e58d4008 	str	r4, [sp, #8]
   12960:	e58d4004 	str	r4, [sp, #4]
   12964:	ebffffa2 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12968:	e1500004 	cmp	r0, r4
   1296c:	b1a00004 	movlt	r0, r4
   12970:	ba000003 	blt	12984 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x44>
   12974:	eb005d3a 	bl	29e64 <CTimer::Get()>
   12978:	e3a00032 	mov	r0, #50	; 0x32
   1297c:	eb005d03 	bl	29d90 <CTimer::SimpleMsDelay(unsigned int)>
   12980:	e3a00001 	mov	r0, #1
   12984:	e28dd010 	add	sp, sp, #16
   12988:	e8bd8010 	pop	{r4, pc}

0001298c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
   1298c:	e3a0c000 	mov	ip, #0
   12990:	e92d4010 	push	{r4, lr}
   12994:	e1a04000 	mov	r4, r0
   12998:	e24dd030 	sub	sp, sp, #48	; 0x30
   1299c:	e58dc000 	str	ip, [sp]
   129a0:	e28d0008 	add	r0, sp, #8
   129a4:	eb00067c 	bl	1439c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   129a8:	e5943000 	ldr	r3, [r4]
   129ac:	e1a00004 	mov	r0, r4
   129b0:	e5933008 	ldr	r3, [r3, #8]
   129b4:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   129b8:	e28d1008 	add	r1, sp, #8
   129bc:	e12fff33 	blx	r3
   129c0:	e3500000 	cmp	r0, #0
   129c4:	0a000007 	beq	129e8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x5c>
   129c8:	e28d0008 	add	r0, sp, #8
   129cc:	eb0006a3 	bl	14460 <CUSBRequest::GetResultLength() const>
   129d0:	e1a04000 	mov	r4, r0
   129d4:	e28d0008 	add	r0, sp, #8
   129d8:	eb00068f 	bl	1441c <CUSBRequest::~CUSBRequest()>
   129dc:	e1a00004 	mov	r0, r4
   129e0:	e28dd030 	add	sp, sp, #48	; 0x30
   129e4:	e8bd8010 	pop	{r4, pc}
   129e8:	e3e04000 	mvn	r4, #0
   129ec:	eafffff8 	b	129d4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x48>

000129f0 <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
   129f0:	e1c022f0 	strd	r2, [r0, #32]
   129f4:	e1a01003 	mov	r1, r3
   129f8:	e1a00002 	mov	r0, r2
   129fc:	e12fff1e 	bx	lr

00012a00 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   12a00:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
   12a04:	e59f30e8 	ldr	r3, [pc, #232]	; 12af4 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xf4>
   12a08:	e3520000 	cmp	r2, #0
   12a0c:	e92d4070 	push	{r4, r5, r6, lr}
   12a10:	e1a04000 	mov	r4, r0
   12a14:	e5803000 	str	r3, [r0]
   12a18:	1a000021 	bne	12aa4 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xa4>
   12a1c:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   12a20:	e3550000 	cmp	r5, #0
   12a24:	0a000004 	beq	12a3c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x3c>
   12a28:	e1a00005 	mov	r0, r5
   12a2c:	eb00194f 	bl	18f70 <CPartitionManager::~CPartitionManager()>
   12a30:	e1a00005 	mov	r0, r5
   12a34:	e3a01024 	mov	r1, #36	; 0x24
   12a38:	eb006152 	bl	2af88 <operator delete(void*, unsigned int)>
   12a3c:	e3a03000 	mov	r3, #0
   12a40:	e5945014 	ldr	r5, [r4, #20]
   12a44:	e5843028 	str	r3, [r4, #40]	; 0x28
   12a48:	e1550003 	cmp	r5, r3
   12a4c:	0a000004 	beq	12a64 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x64>
   12a50:	e1a00005 	mov	r0, r5
   12a54:	ebfff247 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   12a58:	e1a00005 	mov	r0, r5
   12a5c:	e3a01014 	mov	r1, #20
   12a60:	eb006148 	bl	2af88 <operator delete(void*, unsigned int)>
   12a64:	e3a03000 	mov	r3, #0
   12a68:	e5945010 	ldr	r5, [r4, #16]
   12a6c:	e5843014 	str	r3, [r4, #20]
   12a70:	e1550003 	cmp	r5, r3
   12a74:	0a000004 	beq	12a8c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x8c>
   12a78:	e1a00005 	mov	r0, r5
   12a7c:	ebfff23d 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   12a80:	e1a00005 	mov	r0, r5
   12a84:	e3a01014 	mov	r1, #20
   12a88:	eb00613e 	bl	2af88 <operator delete(void*, unsigned int)>
   12a8c:	e3a03000 	mov	r3, #0
   12a90:	e1a00004 	mov	r0, r4
   12a94:	e5843010 	str	r3, [r4, #16]
   12a98:	ebfff2a3 	bl	f52c <CUSBFunction::~CUSBFunction()>
   12a9c:	e1a00004 	mov	r0, r4
   12aa0:	e8bd8070 	pop	{r4, r5, r6, pc}
   12aa4:	eb0049e4 	bl	2523c <CDeviceNameService::Get()>
   12aa8:	e3a03001 	mov	r3, #1
   12aac:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   12ab0:	e59f1040 	ldr	r1, [pc, #64]	; 12af8 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xf8>
   12ab4:	eb004a06 	bl	252d4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   12ab8:	e3a03001 	mov	r3, #1
   12abc:	e59f1038 	ldr	r1, [pc, #56]	; 12afc <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xfc>
   12ac0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12ac4:	e5912000 	ldr	r2, [r1]
   12ac8:	e1a03013 	lsl	r3, r3, r0
   12acc:	e1130002 	tst	r3, r2
   12ad0:	13a00000 	movne	r0, #0
   12ad4:	11c23003 	bicne	r3, r2, r3
   12ad8:	15813000 	strne	r3, [r1]
   12adc:	1584002c 	strne	r0, [r4, #44]	; 0x2c
   12ae0:	1affffcd 	bne	12a1c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x1c>
   12ae4:	e3a020d4 	mov	r2, #212	; 0xd4
   12ae8:	e59f1010 	ldr	r1, [pc, #16]	; 12b00 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x100>
   12aec:	e59f0010 	ldr	r0, [pc, #16]	; 12b04 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x104>
   12af0:	eb00470f 	bl	24734 <assertion_failed>
   12af4:	0003f164 	.word	0x0003f164
   12af8:	0003eeb4 	.word	0x0003eeb4
   12afc:	0004c520 	.word	0x0004c520
   12b00:	0003eebc 	.word	0x0003eebc
   12b04:	0003eed0 	.word	0x0003eed0

00012b08 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   12b08:	e92d4010 	push	{r4, lr}
   12b0c:	e1a04000 	mov	r4, r0
   12b10:	ebffffba 	bl	12a00 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
   12b14:	e1a00004 	mov	r0, r4
   12b18:	e3a01030 	mov	r1, #48	; 0x30
   12b1c:	eb006119 	bl	2af88 <operator delete(void*, unsigned int)>
   12b20:	e1a00004 	mov	r0, r4
   12b24:	e8bd8010 	pop	{r4, pc}

00012b28 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
   12b28:	e92d4010 	push	{r4, lr}
   12b2c:	e1a04000 	mov	r4, r0
   12b30:	ebfff30f 	bl	f774 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   12b34:	e3a03000 	mov	r3, #0
   12b38:	e3a00000 	mov	r0, #0
   12b3c:	e3a01000 	mov	r1, #0
   12b40:	e59f2024 	ldr	r2, [pc, #36]	; 12b6c <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x44>
   12b44:	e1c402f0 	strd	r0, [r4, #32]
   12b48:	e5842000 	str	r2, [r4]
   12b4c:	e1a00004 	mov	r0, r4
   12b50:	e5843010 	str	r3, [r4, #16]
   12b54:	e5843014 	str	r3, [r4, #20]
   12b58:	e5843018 	str	r3, [r4, #24]
   12b5c:	e584301c 	str	r3, [r4, #28]
   12b60:	e5843028 	str	r3, [r4, #40]	; 0x28
   12b64:	e584302c 	str	r3, [r4, #44]	; 0x2c
   12b68:	e8bd8010 	pop	{r4, pc}
   12b6c:	0003f164 	.word	0x0003f164

00012b70 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
   12b70:	e590001c 	ldr	r0, [r0, #28]
   12b74:	e12fff1e 	bx	lr

00012b78 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>:
   12b78:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12b7c:	e2519000 	subs	r9, r1, #0
   12b80:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   12b84:	e59d5058 	ldr	r5, [sp, #88]	; 0x58
   12b88:	e5dd805c 	ldrb	r8, [sp, #92]	; 0x5c
   12b8c:	0a000058 	beq	12cf4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x17c>
   12b90:	e1a07003 	mov	r7, r3
   12b94:	e2423006 	sub	r3, r2, #6
   12b98:	e353000a 	cmp	r3, #10
   12b9c:	e1a06002 	mov	r6, r2
   12ba0:	8a000057 	bhi	12d04 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x18c>
   12ba4:	e2572000 	subs	r2, r7, #0
   12ba8:	13a02001 	movne	r2, #1
   12bac:	e3550000 	cmp	r5, #0
   12bb0:	03a02001 	moveq	r2, #1
   12bb4:	e3520000 	cmp	r2, #0
   12bb8:	0a000055 	beq	12d14 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x19c>
   12bbc:	e1a04000 	mov	r4, r0
   12bc0:	e3a0201f 	mov	r2, #31
   12bc4:	e3a01000 	mov	r1, #0
   12bc8:	e28d0018 	add	r0, sp, #24
   12bcc:	eb005cb0 	bl	29e94 <memset>
   12bd0:	e3580000 	cmp	r8, #0
   12bd4:	13a0e080 	movne	lr, #128	; 0x80
   12bd8:	03a0e000 	moveq	lr, #0
   12bdc:	e5dd0026 	ldrb	r0, [sp, #38]	; 0x26
   12be0:	e594c018 	ldr	ip, [r4, #24]
   12be4:	e3c0301f 	bic	r3, r0, #31
   12be8:	e206001f 	and	r0, r6, #31
   12bec:	e1800003 	orr	r0, r0, r3
   12bf0:	e5dd3025 	ldrb	r3, [sp, #37]	; 0x25
   12bf4:	e28cc001 	add	ip, ip, #1
   12bf8:	e1a02006 	mov	r2, r6
   12bfc:	e59f61e0 	ldr	r6, [pc, #480]	; 12de4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x26c>
   12c00:	e584c018 	str	ip, [r4, #24]
   12c04:	e3c3300f 	bic	r3, r3, #15
   12c08:	e1a01009 	mov	r1, r9
   12c0c:	e5cd0026 	strb	r0, [sp, #38]	; 0x26
   12c10:	e28d0027 	add	r0, sp, #39	; 0x27
   12c14:	e5cde024 	strb	lr, [sp, #36]	; 0x24
   12c18:	e58dc01c 	str	ip, [sp, #28]
   12c1c:	e5cd3025 	strb	r3, [sp, #37]	; 0x25
   12c20:	e58d6018 	str	r6, [sp, #24]
   12c24:	e58d5020 	str	r5, [sp, #32]
   12c28:	eb005ee2 	bl	2a7b8 <memcpy>
   12c2c:	e1a00004 	mov	r0, r4
   12c30:	ebfff343 	bl	f944 <CUSBFunction::GetHost() const>
   12c34:	e2506000 	subs	r6, r0, #0
   12c38:	0a000039 	beq	12d24 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1ac>
   12c3c:	e3a09000 	mov	r9, #0
   12c40:	e58d9000 	str	r9, [sp]
   12c44:	e3a0301f 	mov	r3, #31
   12c48:	e5941014 	ldr	r1, [r4, #20]
   12c4c:	e28d2018 	add	r2, sp, #24
   12c50:	ebffff4d 	bl	1298c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12c54:	e1500009 	cmp	r0, r9
   12c58:	ba00005a 	blt	12dc8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x250>
   12c5c:	e3550000 	cmp	r5, #0
   12c60:	0a000009 	beq	12c8c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x114>
   12c64:	e1c401d0 	ldrd	r0, [r4, #16]
   12c68:	e3580000 	cmp	r8, #0
   12c6c:	11a01000 	movne	r1, r0
   12c70:	e1a03005 	mov	r3, r5
   12c74:	e1a02007 	mov	r2, r7
   12c78:	e1a00006 	mov	r0, r6
   12c7c:	e58d9000 	str	r9, [sp]
   12c80:	ebffff41 	bl	1298c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12c84:	e2505000 	subs	r5, r0, #0
   12c88:	ba000029 	blt	12d34 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1bc>
   12c8c:	e3a03000 	mov	r3, #0
   12c90:	e58d3000 	str	r3, [sp]
   12c94:	e1a00006 	mov	r0, r6
   12c98:	e3a0300d 	mov	r3, #13
   12c9c:	e5941010 	ldr	r1, [r4, #16]
   12ca0:	e28d2008 	add	r2, sp, #8
   12ca4:	ebffff38 	bl	1298c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12ca8:	e350000d 	cmp	r0, #13
   12cac:	1a000030 	bne	12d74 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1fc>
   12cb0:	e59f3130 	ldr	r3, [pc, #304]	; 12de8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x270>
   12cb4:	e59d2008 	ldr	r2, [sp, #8]
   12cb8:	e1520003 	cmp	r2, r3
   12cbc:	1a000025 	bne	12d58 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1e0>
   12cc0:	e5943018 	ldr	r3, [r4, #24]
   12cc4:	e59d200c 	ldr	r2, [sp, #12]
   12cc8:	e1520003 	cmp	r2, r3
   12ccc:	1a00002f 	bne	12d90 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x218>
   12cd0:	e5dd3014 	ldrb	r3, [sp, #20]
   12cd4:	e3530000 	cmp	r3, #0
   12cd8:	1a00001c 	bne	12d50 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1d8>
   12cdc:	e59d3010 	ldr	r3, [sp, #16]
   12ce0:	e3530000 	cmp	r3, #0
   12ce4:	1a000030 	bne	12dac <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x234>
   12ce8:	e1a00005 	mov	r0, r5
   12cec:	e28dd03c 	add	sp, sp, #60	; 0x3c
   12cf0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12cf4:	e3a02f8e 	mov	r2, #568	; 0x238
   12cf8:	e59f10ec 	ldr	r1, [pc, #236]	; 12dec <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
   12cfc:	e59f00ec 	ldr	r0, [pc, #236]	; 12df0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   12d00:	eb00468b 	bl	24734 <assertion_failed>
   12d04:	e59f20e8 	ldr	r2, [pc, #232]	; 12df4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x27c>
   12d08:	e59f10dc 	ldr	r1, [pc, #220]	; 12dec <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
   12d0c:	e59f00e4 	ldr	r0, [pc, #228]	; 12df8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x280>
   12d10:	eb004687 	bl	24734 <assertion_failed>
   12d14:	e59f20e0 	ldr	r2, [pc, #224]	; 12dfc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x284>
   12d18:	e59f10cc 	ldr	r1, [pc, #204]	; 12dec <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
   12d1c:	e59f00dc 	ldr	r0, [pc, #220]	; 12e00 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x288>
   12d20:	eb004683 	bl	24734 <assertion_failed>
   12d24:	e59f20d8 	ldr	r2, [pc, #216]	; 12e04 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x28c>
   12d28:	e59f10bc 	ldr	r1, [pc, #188]	; 12dec <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
   12d2c:	e59f00d4 	ldr	r0, [pc, #212]	; 12e08 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
   12d30:	eb00467f 	bl	24734 <assertion_failed>
   12d34:	eb004f66 	bl	26ad4 <CLogger::Get()>
   12d38:	e3a02001 	mov	r2, #1
   12d3c:	e59f30c8 	ldr	r3, [pc, #200]	; 12e0c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x294>
   12d40:	e59f10c8 	ldr	r1, [pc, #200]	; 12e10 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12d44:	eb004ea4 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12d48:	e3e05000 	mvn	r5, #0
   12d4c:	eaffffe5 	b	12ce8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12d50:	e3e05000 	mvn	r5, #0
   12d54:	eaffffe3 	b	12ce8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12d58:	eb004f5d 	bl	26ad4 <CLogger::Get()>
   12d5c:	e3a02001 	mov	r2, #1
   12d60:	e59f30ac 	ldr	r3, [pc, #172]	; 12e14 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12d64:	e59f10a4 	ldr	r1, [pc, #164]	; 12e10 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12d68:	eb004e9b 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12d6c:	e3e05000 	mvn	r5, #0
   12d70:	eaffffdc 	b	12ce8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12d74:	eb004f56 	bl	26ad4 <CLogger::Get()>
   12d78:	e3a02001 	mov	r2, #1
   12d7c:	e59f3094 	ldr	r3, [pc, #148]	; 12e18 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a0>
   12d80:	e59f1088 	ldr	r1, [pc, #136]	; 12e10 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12d84:	eb004e94 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12d88:	e3e05000 	mvn	r5, #0
   12d8c:	eaffffd5 	b	12ce8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12d90:	eb004f4f 	bl	26ad4 <CLogger::Get()>
   12d94:	e3a02001 	mov	r2, #1
   12d98:	e59f307c 	ldr	r3, [pc, #124]	; 12e1c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a4>
   12d9c:	e59f106c 	ldr	r1, [pc, #108]	; 12e10 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12da0:	eb004e8d 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12da4:	e3e05000 	mvn	r5, #0
   12da8:	eaffffce 	b	12ce8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12dac:	eb004f48 	bl	26ad4 <CLogger::Get()>
   12db0:	e3a02001 	mov	r2, #1
   12db4:	e59f3064 	ldr	r3, [pc, #100]	; 12e20 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
   12db8:	e59f1050 	ldr	r1, [pc, #80]	; 12e10 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12dbc:	eb004e86 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12dc0:	e3e05000 	mvn	r5, #0
   12dc4:	eaffffc7 	b	12ce8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12dc8:	eb004f41 	bl	26ad4 <CLogger::Get()>
   12dcc:	e3a02001 	mov	r2, #1
   12dd0:	e59f304c 	ldr	r3, [pc, #76]	; 12e24 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2ac>
   12dd4:	e59f1034 	ldr	r1, [pc, #52]	; 12e10 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12dd8:	eb004e7f 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12ddc:	e3e05000 	mvn	r5, #0
   12de0:	eaffffc0 	b	12ce8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
   12de4:	43425355 	.word	0x43425355
   12de8:	53425355 	.word	0x53425355
   12dec:	0003eebc 	.word	0x0003eebc
   12df0:	0003eefc 	.word	0x0003eefc
   12df4:	00000239 	.word	0x00000239
   12df8:	0003ef0c 	.word	0x0003ef0c
   12dfc:	0000023a 	.word	0x0000023a
   12e00:	0003ef30 	.word	0x0003ef30
   12e04:	00000249 	.word	0x00000249
   12e08:	0003ef50 	.word	0x0003ef50
   12e0c:	0003ef70 	.word	0x0003ef70
   12e10:	0003f188 	.word	0x0003f188
   12e14:	0003ef9c 	.word	0x0003ef9c
   12e18:	0003ef88 	.word	0x0003ef88
   12e1c:	0003efb4 	.word	0x0003efb4
   12e20:	0003efc8 	.word	0x0003efc8
   12e24:	0003ef5c 	.word	0x0003ef5c

00012e28 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
   12e28:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12e2c:	e2513000 	subs	r3, r1, #0
   12e30:	e24dd01c 	sub	sp, sp, #28
   12e34:	0a000027 	beq	12ed8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xb0>
   12e38:	e1c062d0 	ldrd	r6, [r0, #32]
   12e3c:	e1a04002 	mov	r4, r2
   12e40:	e59f20c4 	ldr	r2, [pc, #196]	; 12f0c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xe4>
   12e44:	e1a01000 	mov	r1, r0
   12e48:	e1120006 	tst	r2, r6
   12e4c:	13a01001 	movne	r1, #1
   12e50:	03a01000 	moveq	r1, #0
   12e54:	e3570c02 	cmp	r7, #512	; 0x200
   12e58:	03560000 	cmpeq	r6, #0
   12e5c:	23811001 	orrcs	r1, r1, #1
   12e60:	e3510000 	cmp	r1, #0
   12e64:	1a00001f 	bne	12ee8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc0>
   12e68:	e014c002 	ands	ip, r4, r2
   12e6c:	e1a024a6 	lsr	r2, r6, #9
   12e70:	e1822b87 	orr	r2, r2, r7, lsl #23
   12e74:	1a00001b 	bne	12ee8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc0>
   12e78:	e3a05001 	mov	r5, #1
   12e7c:	e3a0e028 	mov	lr, #40	; 0x28
   12e80:	e1a014a4 	lsr	r1, r4, #9
   12e84:	e6bf1fb1 	rev16	r1, r1
   12e88:	e6bf2f32 	rev	r2, r2
   12e8c:	e1cd20be 	strh	r2, [sp, #14]
   12e90:	e5cdc012 	strb	ip, [sp, #18]
   12e94:	e1a02822 	lsr	r2, r2, #16
   12e98:	e5cdc015 	strb	ip, [sp, #21]
   12e9c:	e6ffc071 	uxth	ip, r1
   12ea0:	e1cd21b0 	strh	r2, [sp, #16]
   12ea4:	e1a0c42c 	lsr	ip, ip, #8
   12ea8:	e5cd1013 	strb	r1, [sp, #19]
   12eac:	e3a0200a 	mov	r2, #10
   12eb0:	e1cd40f0 	strd	r4, [sp]
   12eb4:	e28d100c 	add	r1, sp, #12
   12eb8:	e5cdc014 	strb	ip, [sp, #20]
   12ebc:	e1cde0bc 	strh	lr, [sp, #12]
   12ec0:	ebffff2c 	bl	12b78 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12ec4:	e1500004 	cmp	r0, r4
   12ec8:	1a000008 	bne	12ef0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc8>
   12ecc:	e1a00004 	mov	r0, r4
   12ed0:	e28dd01c 	add	sp, sp, #28
   12ed4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12ed8:	e59f2030 	ldr	r2, [pc, #48]	; 12f10 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xe8>
   12edc:	e59f1030 	ldr	r1, [pc, #48]	; 12f14 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xec>
   12ee0:	e59f0030 	ldr	r0, [pc, #48]	; 12f18 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf0>
   12ee4:	eb004612 	bl	24734 <assertion_failed>
   12ee8:	e3e04000 	mvn	r4, #0
   12eec:	eafffff6 	b	12ecc <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xa4>
   12ef0:	eb004ef7 	bl	26ad4 <CLogger::Get()>
   12ef4:	e1a02005 	mov	r2, r5
   12ef8:	e59f301c 	ldr	r3, [pc, #28]	; 12f1c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf4>
   12efc:	e59f101c 	ldr	r1, [pc, #28]	; 12f20 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf8>
   12f00:	eb004e35 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12f04:	e3e04000 	mvn	r4, #0
   12f08:	eaffffef 	b	12ecc <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xa4>
   12f0c:	000001ff 	.word	0x000001ff
   12f10:	000001ed 	.word	0x000001ed
   12f14:	0003eebc 	.word	0x0003eebc
   12f18:	0003ef40 	.word	0x0003ef40
   12f1c:	0003efe0 	.word	0x0003efe0
   12f20:	0003f188 	.word	0x0003f188

00012f24 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
   12f24:	e92d40d0 	push	{r4, r6, r7, lr}
   12f28:	e2513000 	subs	r3, r1, #0
   12f2c:	e24dd018 	sub	sp, sp, #24
   12f30:	0a000026 	beq	12fd0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xac>
   12f34:	e1c062d0 	ldrd	r6, [r0, #32]
   12f38:	e1a04002 	mov	r4, r2
   12f3c:	e59f20c0 	ldr	r2, [pc, #192]	; 13004 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xe0>
   12f40:	e1a01000 	mov	r1, r0
   12f44:	e1120006 	tst	r2, r6
   12f48:	13a01001 	movne	r1, #1
   12f4c:	03a01000 	moveq	r1, #0
   12f50:	e3570c02 	cmp	r7, #512	; 0x200
   12f54:	03560000 	cmpeq	r6, #0
   12f58:	23811001 	orrcs	r1, r1, #1
   12f5c:	e3510000 	cmp	r1, #0
   12f60:	1a00001e 	bne	12fe0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xbc>
   12f64:	e014c002 	ands	ip, r4, r2
   12f68:	e1a024a6 	lsr	r2, r6, #9
   12f6c:	e1822b87 	orr	r2, r2, r7, lsl #23
   12f70:	1a00001a 	bne	12fe0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xbc>
   12f74:	e1a014a4 	lsr	r1, r4, #9
   12f78:	e6bf1fb1 	rev16	r1, r1
   12f7c:	e6bf2f32 	rev	r2, r2
   12f80:	e88d1010 	stm	sp, {r4, ip}
   12f84:	e6ffe071 	uxth	lr, r1
   12f88:	e1cd20be 	strh	r2, [sp, #14]
   12f8c:	e5cdc012 	strb	ip, [sp, #18]
   12f90:	e1a02822 	lsr	r2, r2, #16
   12f94:	e5cdc015 	strb	ip, [sp, #21]
   12f98:	e59fc068 	ldr	ip, [pc, #104]	; 13008 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xe4>
   12f9c:	e1a0e42e 	lsr	lr, lr, #8
   12fa0:	e1cd21b0 	strh	r2, [sp, #16]
   12fa4:	e5cd1013 	strb	r1, [sp, #19]
   12fa8:	e3a0200a 	mov	r2, #10
   12fac:	e28d100c 	add	r1, sp, #12
   12fb0:	e5cde014 	strb	lr, [sp, #20]
   12fb4:	e1cdc0bc 	strh	ip, [sp, #12]
   12fb8:	ebfffeee 	bl	12b78 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12fbc:	e3500000 	cmp	r0, #0
   12fc0:	a1a00004 	movge	r0, r4
   12fc4:	ba000007 	blt	12fe8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc4>
   12fc8:	e28dd018 	add	sp, sp, #24
   12fcc:	e8bd80d0 	pop	{r4, r6, r7, pc}
   12fd0:	e59f2034 	ldr	r2, [pc, #52]	; 1300c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xe8>
   12fd4:	e59f1034 	ldr	r1, [pc, #52]	; 13010 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xec>
   12fd8:	e59f0034 	ldr	r0, [pc, #52]	; 13014 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xf0>
   12fdc:	eb0045d4 	bl	24734 <assertion_failed>
   12fe0:	e3e00000 	mvn	r0, #0
   12fe4:	eafffff7 	b	12fc8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xa4>
   12fe8:	eb004eb9 	bl	26ad4 <CLogger::Get()>
   12fec:	e3a02001 	mov	r2, #1
   12ff0:	e59f3020 	ldr	r3, [pc, #32]	; 13018 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xf4>
   12ff4:	e59f1020 	ldr	r1, [pc, #32]	; 1301c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xf8>
   12ff8:	eb004df7 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12ffc:	e3e00000 	mvn	r0, #0
   13000:	eafffff0 	b	12fc8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xa4>
   13004:	000001ff 	.word	0x000001ff
   13008:	0000082a 	.word	0x0000082a
   1300c:	00000212 	.word	0x00000212
   13010:	0003eebc 	.word	0x0003eebc
   13014:	0003ef40 	.word	0x0003ef40
   13018:	0003eff0 	.word	0x0003eff0
   1301c:	0003f188 	.word	0x0003f188

00013020 <CUSBBulkOnlyMassStorageDevice::Reset()>:
   13020:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13024:	e24dd014 	sub	sp, sp, #20
   13028:	e1a05000 	mov	r5, r0
   1302c:	ebfff244 	bl	f944 <CUSBFunction::GetHost() const>
   13030:	e2506000 	subs	r6, r0, #0
   13034:	0a00002e 	beq	130f4 <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
   13038:	e1a00005 	mov	r0, r5
   1303c:	ebfff235 	bl	f918 <CUSBFunction::GetEndpoint0() const>
   13040:	e3a04000 	mov	r4, #0
   13044:	e1a01000 	mov	r1, r0
   13048:	e3a030ff 	mov	r3, #255	; 0xff
   1304c:	e3a02021 	mov	r2, #33	; 0x21
   13050:	e1a00006 	mov	r0, r6
   13054:	e58d400c 	str	r4, [sp, #12]
   13058:	e58d4008 	str	r4, [sp, #8]
   1305c:	e58d4004 	str	r4, [sp, #4]
   13060:	e58d4000 	str	r4, [sp]
   13064:	ebfffde2 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13068:	e1500004 	cmp	r0, r4
   1306c:	ba000024 	blt	13104 <CUSBBulkOnlyMassStorageDevice::Reset()+0xe4>
   13070:	e1a00005 	mov	r0, r5
   13074:	ebfff227 	bl	f918 <CUSBFunction::GetEndpoint0() const>
   13078:	e3a07001 	mov	r7, #1
   1307c:	e1a01000 	mov	r1, r0
   13080:	e1a03007 	mov	r3, r7
   13084:	e3a02002 	mov	r2, #2
   13088:	e1a00006 	mov	r0, r6
   1308c:	e88d0090 	stm	sp, {r4, r7}
   13090:	e58d400c 	str	r4, [sp, #12]
   13094:	e58d4008 	str	r4, [sp, #8]
   13098:	ebfffdd5 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1309c:	e3500000 	cmp	r0, #0
   130a0:	ba000025 	blt	1313c <CUSBBulkOnlyMassStorageDevice::Reset()+0x11c>
   130a4:	e1a00005 	mov	r0, r5
   130a8:	ebfff21a 	bl	f918 <CUSBFunction::GetEndpoint0() const>
   130ac:	e3a02002 	mov	r2, #2
   130b0:	e1a01000 	mov	r1, r0
   130b4:	e1a03007 	mov	r3, r7
   130b8:	e1a00006 	mov	r0, r6
   130bc:	e58d400c 	str	r4, [sp, #12]
   130c0:	e58d4008 	str	r4, [sp, #8]
   130c4:	e58d4000 	str	r4, [sp]
   130c8:	e58d2004 	str	r2, [sp, #4]
   130cc:	ebfffdc8 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   130d0:	e3500000 	cmp	r0, #0
   130d4:	ba000011 	blt	13120 <CUSBBulkOnlyMassStorageDevice::Reset()+0x100>
   130d8:	e5950010 	ldr	r0, [r5, #16]
   130dc:	ebfff102 	bl	f4ec <CUSBEndpoint::ResetPID()>
   130e0:	e5950014 	ldr	r0, [r5, #20]
   130e4:	ebfff100 	bl	f4ec <CUSBEndpoint::ResetPID()>
   130e8:	e1a00004 	mov	r0, r4
   130ec:	e28dd014 	add	sp, sp, #20
   130f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   130f4:	e3a02fa2 	mov	r2, #648	; 0x288
   130f8:	e59f1058 	ldr	r1, [pc, #88]	; 13158 <CUSBBulkOnlyMassStorageDevice::Reset()+0x138>
   130fc:	e59f0058 	ldr	r0, [pc, #88]	; 1315c <CUSBBulkOnlyMassStorageDevice::Reset()+0x13c>
   13100:	eb00458b 	bl	24734 <assertion_failed>
   13104:	eb004e72 	bl	26ad4 <CLogger::Get()>
   13108:	e3a02004 	mov	r2, #4
   1310c:	e59f304c 	ldr	r3, [pc, #76]	; 13160 <CUSBBulkOnlyMassStorageDevice::Reset()+0x140>
   13110:	e59f104c 	ldr	r1, [pc, #76]	; 13164 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   13114:	eb004db0 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13118:	e3e00000 	mvn	r0, #0
   1311c:	eafffff2 	b	130ec <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   13120:	eb004e6b 	bl	26ad4 <CLogger::Get()>
   13124:	e3a02004 	mov	r2, #4
   13128:	e59f3038 	ldr	r3, [pc, #56]	; 13168 <CUSBBulkOnlyMassStorageDevice::Reset()+0x148>
   1312c:	e59f1030 	ldr	r1, [pc, #48]	; 13164 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   13130:	eb004da9 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13134:	e3e00000 	mvn	r0, #0
   13138:	eaffffeb 	b	130ec <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   1313c:	eb004e64 	bl	26ad4 <CLogger::Get()>
   13140:	e3a02004 	mov	r2, #4
   13144:	e59f3020 	ldr	r3, [pc, #32]	; 1316c <CUSBBulkOnlyMassStorageDevice::Reset()+0x14c>
   13148:	e59f1014 	ldr	r1, [pc, #20]	; 13164 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   1314c:	eb004da2 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13150:	e3e00000 	mvn	r0, #0
   13154:	eaffffe4 	b	130ec <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   13158:	0003eebc 	.word	0x0003eebc
   1315c:	0003ef50 	.word	0x0003ef50
   13160:	0003f000 	.word	0x0003f000
   13164:	0003f188 	.word	0x0003f188
   13168:	0003f034 	.word	0x0003f034
   1316c:	0003f014 	.word	0x0003f014

00013170 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
   13170:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13174:	e1a05002 	mov	r5, r2
   13178:	e1a07000 	mov	r7, r0
   1317c:	e1a09001 	mov	r9, r1
   13180:	e1a08002 	mov	r8, r2
   13184:	e3a06004 	mov	r6, #4
   13188:	e1a02005 	mov	r2, r5
   1318c:	e1a01009 	mov	r1, r9
   13190:	e1a00007 	mov	r0, r7
   13194:	ebffff23 	bl	12e28 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
   13198:	e1500005 	cmp	r0, r5
   1319c:	e1a04000 	mov	r4, r0
   131a0:	1a000001 	bne	131ac <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x3c>
   131a4:	e1a00008 	mov	r0, r8
   131a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   131ac:	e1a00007 	mov	r0, r7
   131b0:	ebffff9a 	bl	13020 <CUSBBulkOnlyMassStorageDevice::Reset()>
   131b4:	e3500000 	cmp	r0, #0
   131b8:	1a000004 	bne	131d0 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x60>
   131bc:	e2566001 	subs	r6, r6, #1
   131c0:	1afffff0 	bne	13188 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x18>
   131c4:	e1a08004 	mov	r8, r4
   131c8:	e1a00008 	mov	r0, r8
   131cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   131d0:	e1a08000 	mov	r8, r0
   131d4:	eafffff2 	b	131a4 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x34>

000131d8 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
   131d8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   131dc:	e1a05002 	mov	r5, r2
   131e0:	e1a07000 	mov	r7, r0
   131e4:	e1a09001 	mov	r9, r1
   131e8:	e1a08002 	mov	r8, r2
   131ec:	e3a06004 	mov	r6, #4
   131f0:	e1a02005 	mov	r2, r5
   131f4:	e1a01009 	mov	r1, r9
   131f8:	e1a00007 	mov	r0, r7
   131fc:	ebffff48 	bl	12f24 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
   13200:	e1500005 	cmp	r0, r5
   13204:	e1a04000 	mov	r4, r0
   13208:	1a000001 	bne	13214 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x3c>
   1320c:	e1a00008 	mov	r0, r8
   13210:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13214:	e1a00007 	mov	r0, r7
   13218:	ebffff80 	bl	13020 <CUSBBulkOnlyMassStorageDevice::Reset()>
   1321c:	e3500000 	cmp	r0, #0
   13220:	1a000004 	bne	13238 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x60>
   13224:	e2566001 	subs	r6, r6, #1
   13228:	1afffff0 	bne	131f0 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x18>
   1322c:	e1a08004 	mov	r8, r4
   13230:	e1a00008 	mov	r0, r8
   13234:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13238:	e1a08000 	mov	r8, r0
   1323c:	eafffff2 	b	1320c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x34>

00013240 <CUSBBulkOnlyMassStorageDevice::Configure()>:
   13240:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13244:	e24dd068 	sub	sp, sp, #104	; 0x68
   13248:	e1a05000 	mov	r5, r0
   1324c:	ebfff19b 	bl	f8c0 <CUSBFunction::GetNumEndpoints() const>
   13250:	e3500001 	cmp	r0, #1
   13254:	8a000004 	bhi	1326c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   13258:	ea0000cb 	b	1358c <CUSBBulkOnlyMassStorageDevice::Configure()+0x34c>
   1325c:	e5d43003 	ldrb	r3, [r4, #3]
   13260:	e203303f 	and	r3, r3, #63	; 0x3f
   13264:	e3530002 	cmp	r3, #2
   13268:	0a000029 	beq	13314 <CUSBBulkOnlyMassStorageDevice::Configure()+0xd4>
   1326c:	e3a01005 	mov	r1, #5
   13270:	e1a00005 	mov	r0, r5
   13274:	ebfff1bd 	bl	f970 <CUSBFunction::GetDescriptor(unsigned char)>
   13278:	e2504000 	subs	r4, r0, #0
   1327c:	1afffff6 	bne	1325c <CUSBBulkOnlyMassStorageDevice::Configure()+0x1c>
   13280:	e5953010 	ldr	r3, [r5, #16]
   13284:	e1a00005 	mov	r0, r5
   13288:	e3530000 	cmp	r3, #0
   1328c:	0a0000b0 	beq	13554 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   13290:	e5953014 	ldr	r3, [r5, #20]
   13294:	e3530000 	cmp	r3, #0
   13298:	0a0000ad 	beq	13554 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   1329c:	ebfff0cb 	bl	f5d0 <CUSBFunction::Configure()>
   132a0:	e2506000 	subs	r6, r0, #0
   132a4:	0a0000b0 	beq	1356c <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
   132a8:	e3a00024 	mov	r0, #36	; 0x24
   132ac:	e3a06001 	mov	r6, #1
   132b0:	e3a0c012 	mov	ip, #18
   132b4:	e88d0041 	stm	sp, {r0, r6}
   132b8:	e1cd01b8 	strh	r0, [sp, #24]
   132bc:	e3a02006 	mov	r2, #6
   132c0:	e1a00005 	mov	r0, r5
   132c4:	e28d3044 	add	r3, sp, #68	; 0x44
   132c8:	e28d1014 	add	r1, sp, #20
   132cc:	e58dc014 	str	ip, [sp, #20]
   132d0:	ebfffe28 	bl	12b78 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   132d4:	e3500024 	cmp	r0, #36	; 0x24
   132d8:	1a0000b2 	bne	135a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x368>
   132dc:	e5dd3044 	ldrb	r3, [sp, #68]	; 0x44
   132e0:	e213701f 	ands	r7, r3, #31
   132e4:	03a04063 	moveq	r4, #99	; 0x63
   132e8:	0a00002a 	beq	13398 <CUSBBulkOnlyMassStorageDevice::Configure()+0x158>
   132ec:	eb004df8 	bl	26ad4 <CLogger::Get()>
   132f0:	e5dd3044 	ldrb	r3, [sp, #68]	; 0x44
   132f4:	e1a02006 	mov	r2, r6
   132f8:	e203301f 	and	r3, r3, #31
   132fc:	e58d3000 	str	r3, [sp]
   13300:	e59f13b8 	ldr	r1, [pc, #952]	; 136c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   13304:	e59f33b8 	ldr	r3, [pc, #952]	; 136c4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x484>
   13308:	e1a06004 	mov	r6, r4
   1330c:	eb004d32 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13310:	ea000092 	b	13560 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   13314:	e1d430d2 	ldrsb	r3, [r4, #2]
   13318:	e3530000 	cmp	r3, #0
   1331c:	ba00007d 	blt	13518 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d8>
   13320:	e5953014 	ldr	r3, [r5, #20]
   13324:	e1a00005 	mov	r0, r5
   13328:	e3530000 	cmp	r3, #0
   1332c:	1a000088 	bne	13554 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   13330:	ebfff16e 	bl	f8f0 <CUSBFunction::GetDevice() const>
   13334:	e1a01000 	mov	r1, r0
   13338:	e3a00014 	mov	r0, #20
   1333c:	e58d100c 	str	r1, [sp, #12]
   13340:	eb005f02 	bl	2af50 <operator new(unsigned int)>
   13344:	e1a06000 	mov	r6, r0
   13348:	e1a02004 	mov	r2, r4
   1334c:	e59d100c 	ldr	r1, [sp, #12]
   13350:	ebffefa4 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13354:	e5856014 	str	r6, [r5, #20]
   13358:	eaffffc3 	b	1326c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   1335c:	e3a00012 	mov	r0, #18
   13360:	e3a06001 	mov	r6, #1
   13364:	e3a0c003 	mov	ip, #3
   13368:	e88d0041 	stm	sp, {r0, r6}
   1336c:	e1cd02b8 	strh	r0, [sp, #40]	; 0x28
   13370:	e3a02006 	mov	r2, #6
   13374:	e1a00005 	mov	r0, r5
   13378:	e28d3030 	add	r3, sp, #48	; 0x30
   1337c:	e28d1024 	add	r1, sp, #36	; 0x24
   13380:	e58dc024 	str	ip, [sp, #36]	; 0x24
   13384:	ebfffdfb 	bl	12b78 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   13388:	e3500000 	cmp	r0, #0
   1338c:	ba00008e 	blt	135cc <CUSBBulkOnlyMassStorageDevice::Configure()+0x38c>
   13390:	e2544001 	subs	r4, r4, #1
   13394:	0a00009b 	beq	13608 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3c8>
   13398:	eb005ab1 	bl	29e64 <CTimer::Get()>
   1339c:	e3a00064 	mov	r0, #100	; 0x64
   133a0:	eb005a7a 	bl	29d90 <CTimer::SimpleMsDelay(unsigned int)>
   133a4:	e3a03000 	mov	r3, #0
   133a8:	e3a02006 	mov	r2, #6
   133ac:	e1a00005 	mov	r0, r5
   133b0:	e58d7004 	str	r7, [sp, #4]
   133b4:	e58d7000 	str	r7, [sp]
   133b8:	e28d101c 	add	r1, sp, #28
   133bc:	e58d701c 	str	r7, [sp, #28]
   133c0:	e1cd72b0 	strh	r7, [sp, #32]
   133c4:	ebfffdeb 	bl	12b78 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   133c8:	e3500000 	cmp	r0, #0
   133cc:	baffffe2 	blt	1335c <CUSBBulkOnlyMassStorageDevice::Configure()+0x11c>
   133d0:	e3a02008 	mov	r2, #8
   133d4:	e3a04001 	mov	r4, #1
   133d8:	e3a0c025 	mov	ip, #37	; 0x25
   133dc:	e88d0014 	stm	sp, {r2, r4}
   133e0:	e1a00005 	mov	r0, r5
   133e4:	e3a0200a 	mov	r2, #10
   133e8:	e28d301c 	add	r3, sp, #28
   133ec:	e28d1024 	add	r1, sp, #36	; 0x24
   133f0:	e58d7028 	str	r7, [sp, #40]	; 0x28
   133f4:	e1cd72bc 	strh	r7, [sp, #44]	; 0x2c
   133f8:	e58dc024 	str	ip, [sp, #36]	; 0x24
   133fc:	ebfffddd 	bl	12b78 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   13400:	e3500008 	cmp	r0, #8
   13404:	1a000086 	bne	13624 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3e4>
   13408:	e59d3020 	ldr	r3, [sp, #32]
   1340c:	e3530802 	cmp	r3, #131072	; 0x20000
   13410:	e6bf6f33 	rev	r6, r3
   13414:	1a000073 	bne	135e8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3a8>
   13418:	e59d301c 	ldr	r3, [sp, #28]
   1341c:	e6bf3f33 	rev	r3, r3
   13420:	e3730001 	cmn	r3, #1
   13424:	e585301c 	str	r3, [r5, #28]
   13428:	0a00008e 	beq	13668 <CUSBBulkOnlyMassStorageDevice::Configure()+0x428>
   1342c:	e2833001 	add	r3, r3, #1
   13430:	e585301c 	str	r3, [r5, #28]
   13434:	eb004da6 	bl	26ad4 <CLogger::Get()>
   13438:	e595201c 	ldr	r2, [r5, #28]
   1343c:	e59f8284 	ldr	r8, [pc, #644]	; 136c8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
   13440:	e1a025a2 	lsr	r2, r2, #11
   13444:	e59f3280 	ldr	r3, [pc, #640]	; 136cc <CUSBBulkOnlyMassStorageDevice::Configure()+0x48c>
   13448:	e59f1270 	ldr	r1, [pc, #624]	; 136c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   1344c:	e58d2000 	str	r2, [sp]
   13450:	e3a02004 	mov	r2, #4
   13454:	eb004ce0 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13458:	e1a07004 	mov	r7, r4
   1345c:	e1a03004 	mov	r3, r4
   13460:	e5981000 	ldr	r1, [r8]
   13464:	ea000002 	b	13474 <CUSBBulkOnlyMassStorageDevice::Configure()+0x234>
   13468:	e2833001 	add	r3, r3, #1
   1346c:	e3530020 	cmp	r3, #32
   13470:	0a000083 	beq	13684 <CUSBBulkOnlyMassStorageDevice::Configure()+0x444>
   13474:	e1a02317 	lsl	r2, r7, r3
   13478:	e1120001 	tst	r2, r1
   1347c:	1afffff9 	bne	13468 <CUSBBulkOnlyMassStorageDevice::Configure()+0x228>
   13480:	e595002c 	ldr	r0, [r5, #44]	; 0x2c
   13484:	e1822001 	orr	r2, r2, r1
   13488:	e3500000 	cmp	r0, #0
   1348c:	e5882000 	str	r2, [r8]
   13490:	1a000086 	bne	136b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x470>
   13494:	e585302c 	str	r3, [r5, #44]	; 0x2c
   13498:	e28d0030 	add	r0, sp, #48	; 0x30
   1349c:	eb00517c 	bl	27a94 <CString::CString()>
   134a0:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   134a4:	e59f1224 	ldr	r1, [pc, #548]	; 136d0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x490>
   134a8:	e28d0030 	add	r0, sp, #48	; 0x30
   134ac:	eb0056c2 	bl	28fbc <CString::Format(char const*, ...)>
   134b0:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   134b4:	e3530000 	cmp	r3, #0
   134b8:	1a000078 	bne	136a0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x460>
   134bc:	e28d0030 	add	r0, sp, #48	; 0x30
   134c0:	eb00518b 	bl	27af4 <CString::operator char const*() const>
   134c4:	e1a02000 	mov	r2, r0
   134c8:	e3a00024 	mov	r0, #36	; 0x24
   134cc:	e58d200c 	str	r2, [sp, #12]
   134d0:	eb005e9e 	bl	2af50 <operator new(unsigned int)>
   134d4:	e1a04000 	mov	r4, r0
   134d8:	e1a01005 	mov	r1, r5
   134dc:	e59d200c 	ldr	r2, [sp, #12]
   134e0:	eb001696 	bl	18f40 <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   134e4:	e1a00004 	mov	r0, r4
   134e8:	e5854028 	str	r4, [r5, #40]	; 0x28
   134ec:	eb0016d0 	bl	19034 <CPartitionManager::Initialize()>
   134f0:	e2506000 	subs	r6, r0, #0
   134f4:	1a000051 	bne	13640 <CUSBBulkOnlyMassStorageDevice::Configure()+0x400>
   134f8:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   134fc:	e5983000 	ldr	r3, [r8]
   13500:	e585602c 	str	r6, [r5, #44]	; 0x2c
   13504:	e1c37217 	bic	r7, r3, r7, lsl r2
   13508:	e5887000 	str	r7, [r8]
   1350c:	e28d0030 	add	r0, sp, #48	; 0x30
   13510:	eb00512c 	bl	279c8 <CString::~CString()>
   13514:	ea000011 	b	13560 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   13518:	e5953010 	ldr	r3, [r5, #16]
   1351c:	e1a00005 	mov	r0, r5
   13520:	e3530000 	cmp	r3, #0
   13524:	1a00000a 	bne	13554 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   13528:	ebfff0f0 	bl	f8f0 <CUSBFunction::GetDevice() const>
   1352c:	e1a01000 	mov	r1, r0
   13530:	e3a00014 	mov	r0, #20
   13534:	e58d100c 	str	r1, [sp, #12]
   13538:	eb005e84 	bl	2af50 <operator new(unsigned int)>
   1353c:	e1a06000 	mov	r6, r0
   13540:	e1a02004 	mov	r2, r4
   13544:	e59d100c 	ldr	r1, [sp, #12]
   13548:	ebffef26 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1354c:	e5856010 	str	r6, [r5, #16]
   13550:	eaffff45 	b	1326c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   13554:	e59f1164 	ldr	r1, [pc, #356]	; 136c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   13558:	ebfff10f 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   1355c:	e3a06000 	mov	r6, #0
   13560:	e1a00006 	mov	r0, r6
   13564:	e28dd068 	add	sp, sp, #104	; 0x68
   13568:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1356c:	eb004d58 	bl	26ad4 <CLogger::Get()>
   13570:	e3a02001 	mov	r2, #1
   13574:	e59f3158 	ldr	r3, [pc, #344]	; 136d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x494>
   13578:	e59f1140 	ldr	r1, [pc, #320]	; 136c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   1357c:	eb004c96 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13580:	e1a00006 	mov	r0, r6
   13584:	e28dd068 	add	sp, sp, #104	; 0x68
   13588:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1358c:	e3a06000 	mov	r6, #0
   13590:	e1a00005 	mov	r0, r5
   13594:	e59f1124 	ldr	r1, [pc, #292]	; 136c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   13598:	ebfff0ff 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   1359c:	e1a00006 	mov	r0, r6
   135a0:	e28dd068 	add	sp, sp, #104	; 0x68
   135a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   135a8:	eb004d49 	bl	26ad4 <CLogger::Get()>
   135ac:	e1a02006 	mov	r2, r6
   135b0:	e1a06004 	mov	r6, r4
   135b4:	e59f311c 	ldr	r3, [pc, #284]	; 136d8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x498>
   135b8:	e59f1100 	ldr	r1, [pc, #256]	; 136c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   135bc:	eb004c86 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   135c0:	e1a00006 	mov	r0, r6
   135c4:	e28dd068 	add	sp, sp, #104	; 0x68
   135c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   135cc:	eb004d40 	bl	26ad4 <CLogger::Get()>
   135d0:	e1a02006 	mov	r2, r6
   135d4:	e59f3100 	ldr	r3, [pc, #256]	; 136dc <CUSBBulkOnlyMassStorageDevice::Configure()+0x49c>
   135d8:	e59f10e0 	ldr	r1, [pc, #224]	; 136c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   135dc:	eb004c7e 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   135e0:	e3a06000 	mov	r6, #0
   135e4:	eaffffdd 	b	13560 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   135e8:	eb004d39 	bl	26ad4 <CLogger::Get()>
   135ec:	e58d6000 	str	r6, [sp]
   135f0:	e1a02004 	mov	r2, r4
   135f4:	e59f30e4 	ldr	r3, [pc, #228]	; 136e0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4a0>
   135f8:	e59f10c0 	ldr	r1, [pc, #192]	; 136c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   135fc:	eb004c76 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13600:	e3a06000 	mov	r6, #0
   13604:	eaffffd5 	b	13560 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   13608:	eb004d31 	bl	26ad4 <CLogger::Get()>
   1360c:	e1a02006 	mov	r2, r6
   13610:	e59f30cc 	ldr	r3, [pc, #204]	; 136e4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4a4>
   13614:	e59f10a4 	ldr	r1, [pc, #164]	; 136c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   13618:	e1a06004 	mov	r6, r4
   1361c:	eb004c6e 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13620:	eaffffce 	b	13560 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   13624:	eb004d2a 	bl	26ad4 <CLogger::Get()>
   13628:	e1a02004 	mov	r2, r4
   1362c:	e59f30b4 	ldr	r3, [pc, #180]	; 136e8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4a8>
   13630:	e59f1088 	ldr	r1, [pc, #136]	; 136c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   13634:	eb004c68 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13638:	e3a06000 	mov	r6, #0
   1363c:	eaffffc7 	b	13560 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   13640:	eb0046fd 	bl	2523c <CDeviceNameService::Get()>
   13644:	e1a04000 	mov	r4, r0
   13648:	e28d0030 	add	r0, sp, #48	; 0x30
   1364c:	eb005128 	bl	27af4 <CString::operator char const*() const>
   13650:	e1a02005 	mov	r2, r5
   13654:	e1a01000 	mov	r1, r0
   13658:	e3a03001 	mov	r3, #1
   1365c:	e1a00004 	mov	r0, r4
   13660:	eb004645 	bl	24f7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   13664:	eaffffa8 	b	1350c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2cc>
   13668:	eb004d19 	bl	26ad4 <CLogger::Get()>
   1366c:	e1a02004 	mov	r2, r4
   13670:	e59f3074 	ldr	r3, [pc, #116]	; 136ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x4ac>
   13674:	e59f1044 	ldr	r1, [pc, #68]	; 136c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   13678:	eb004c57 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1367c:	e3a06000 	mov	r6, #0
   13680:	eaffffb6 	b	13560 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   13684:	eb004d12 	bl	26ad4 <CLogger::Get()>
   13688:	e3a02001 	mov	r2, #1
   1368c:	e59f305c 	ldr	r3, [pc, #92]	; 136f0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4b0>
   13690:	e59f1028 	ldr	r1, [pc, #40]	; 136c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   13694:	eb004c50 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13698:	e3a06000 	mov	r6, #0
   1369c:	eaffffaf 	b	13560 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   136a0:	e59f204c 	ldr	r2, [pc, #76]	; 136f4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4b4>
   136a4:	e59f104c 	ldr	r1, [pc, #76]	; 136f8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4b8>
   136a8:	e59f004c 	ldr	r0, [pc, #76]	; 136fc <CUSBBulkOnlyMassStorageDevice::Configure()+0x4bc>
   136ac:	eb004420 	bl	24734 <assertion_failed>
   136b0:	e59f2048 	ldr	r2, [pc, #72]	; 13700 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4c0>
   136b4:	e59f103c 	ldr	r1, [pc, #60]	; 136f8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4b8>
   136b8:	e59f0044 	ldr	r0, [pc, #68]	; 13704 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4c4>
   136bc:	eb00441c 	bl	24734 <assertion_failed>
   136c0:	0003f188 	.word	0x0003f188
   136c4:	0003f06c 	.word	0x0003f06c
   136c8:	0004c520 	.word	0x0004c520
   136cc:	0003f0f4 	.word	0x0003f0f4
   136d0:	0003f124 	.word	0x0003f124
   136d4:	0003e6b8 	.word	0x0003e6b8
   136d8:	0003f054 	.word	0x0003f054
   136dc:	0003f08c 	.word	0x0003f08c
   136e0:	0003f0bc 	.word	0x0003f0bc
   136e4:	0003f148 	.word	0x0003f148
   136e8:	0003f0a4 	.word	0x0003f0a4
   136ec:	0003f0d8 	.word	0x0003f0d8
   136f0:	0003e3a4 	.word	0x0003e3a4
   136f4:	0000019d 	.word	0x0000019d
   136f8:	0003eebc 	.word	0x0003eebc
   136fc:	0003f12c 	.word	0x0003f12c
   13700:	00000197 	.word	0x00000197
   13704:	0003f10c 	.word	0x0003f10c

00013708 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   13708:	e92d4070 	push	{r4, r5, r6, lr}
   1370c:	e1a04000 	mov	r4, r0
   13710:	e5900020 	ldr	r0, [r0, #32]
   13714:	e59f304c 	ldr	r3, [pc, #76]	; 13768 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x60>
   13718:	e3500000 	cmp	r0, #0
   1371c:	e5843000 	str	r3, [r4]
   13720:	0a000002 	beq	13730 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x28>
   13724:	eb005e16 	bl	2af84 <operator delete[](void*)>
   13728:	e3a03000 	mov	r3, #0
   1372c:	e5843020 	str	r3, [r4, #32]
   13730:	e5945010 	ldr	r5, [r4, #16]
   13734:	e3550000 	cmp	r5, #0
   13738:	0a000006 	beq	13758 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x50>
   1373c:	e1a00005 	mov	r0, r5
   13740:	ebffef0c 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   13744:	e1a00005 	mov	r0, r5
   13748:	e3a01014 	mov	r1, #20
   1374c:	eb005e0d 	bl	2af88 <operator delete(void*, unsigned int)>
   13750:	e3a03000 	mov	r3, #0
   13754:	e5843010 	str	r3, [r4, #16]
   13758:	e1a00004 	mov	r0, r4
   1375c:	ebffef72 	bl	f52c <CUSBFunction::~CUSBFunction()>
   13760:	e1a00004 	mov	r0, r4
   13764:	e8bd8070 	pop	{r4, r5, r6, pc}
   13768:	0003f27c 	.word	0x0003f27c

0001376c <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   1376c:	e92d4010 	push	{r4, lr}
   13770:	e1a04000 	mov	r4, r0
   13774:	ebffffe3 	bl	13708 <CUSBMIDIDevice::~CUSBMIDIDevice()>
   13778:	e1a00004 	mov	r0, r4
   1377c:	e3a01028 	mov	r1, #40	; 0x28
   13780:	eb005e00 	bl	2af88 <operator delete(void*, unsigned int)>
   13784:	e1a00004 	mov	r0, r4
   13788:	e8bd8010 	pop	{r4, pc}

0001378c <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>:
   1378c:	e92d4010 	push	{r4, lr}
   13790:	e1a04000 	mov	r4, r0
   13794:	ebffeff6 	bl	f774 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   13798:	e3a03000 	mov	r3, #0
   1379c:	e59f201c 	ldr	r2, [pc, #28]	; 137c0 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)+0x34>
   137a0:	e1a00004 	mov	r0, r4
   137a4:	e5843010 	str	r3, [r4, #16]
   137a8:	e5842000 	str	r2, [r4]
   137ac:	e5843014 	str	r3, [r4, #20]
   137b0:	e5843018 	str	r3, [r4, #24]
   137b4:	e5843020 	str	r3, [r4, #32]
   137b8:	e5843024 	str	r3, [r4, #36]	; 0x24
   137bc:	e8bd8010 	pop	{r4, pc}
   137c0:	0003f27c 	.word	0x0003f27c

000137c4 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   137c4:	e5903014 	ldr	r3, [r0, #20]
   137c8:	e92d4010 	push	{r4, lr}
   137cc:	e3530000 	cmp	r3, #0
   137d0:	1a000006 	bne	137f0 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x2c>
   137d4:	e3510000 	cmp	r1, #0
   137d8:	e5801014 	str	r1, [r0, #20]
   137dc:	18bd8010 	popne	{r4, pc}
   137e0:	e3a0209b 	mov	r2, #155	; 0x9b
   137e4:	e59f1014 	ldr	r1, [pc, #20]	; 13800 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x3c>
   137e8:	e59f0014 	ldr	r0, [pc, #20]	; 13804 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x40>
   137ec:	eb0043d0 	bl	24734 <assertion_failed>
   137f0:	e3a02099 	mov	r2, #153	; 0x99
   137f4:	e59f1004 	ldr	r1, [pc, #4]	; 13800 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x3c>
   137f8:	e59f0008 	ldr	r0, [pc, #8]	; 13808 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x44>
   137fc:	eb0043cc 	bl	24734 <assertion_failed>
   13800:	0003f190 	.word	0x0003f190
   13804:	0003f1b4 	.word	0x0003f1b4
   13808:	0003f19c 	.word	0x0003f19c

0001380c <CUSBMIDIDevice::StartRequest()>:
   1380c:	e92d4070 	push	{r4, r5, r6, lr}
   13810:	e5903010 	ldr	r3, [r0, #16]
   13814:	e24dd008 	sub	sp, sp, #8
   13818:	e3530000 	cmp	r3, #0
   1381c:	0a000022 	beq	138ac <CUSBMIDIDevice::StartRequest()+0xa0>
   13820:	e5903020 	ldr	r3, [r0, #32]
   13824:	e1a04000 	mov	r4, r0
   13828:	e3530000 	cmp	r3, #0
   1382c:	0a000022 	beq	138bc <CUSBMIDIDevice::StartRequest()+0xb0>
   13830:	e5905018 	ldr	r5, [r0, #24]
   13834:	e3550000 	cmp	r5, #0
   13838:	1a000023 	bne	138cc <CUSBMIDIDevice::StartRequest()+0xc0>
   1383c:	e1d031bc 	ldrh	r3, [r0, #28]
   13840:	e3530000 	cmp	r3, #0
   13844:	0a000024 	beq	138dc <CUSBMIDIDevice::StartRequest()+0xd0>
   13848:	e3a00028 	mov	r0, #40	; 0x28
   1384c:	eb000353 	bl	145a0 <CUSBRequest::operator new(unsigned int)>
   13850:	e1a06000 	mov	r6, r0
   13854:	e58d5000 	str	r5, [sp]
   13858:	e1d431bc 	ldrh	r3, [r4, #28]
   1385c:	e5942020 	ldr	r2, [r4, #32]
   13860:	e5941010 	ldr	r1, [r4, #16]
   13864:	eb0002cc 	bl	1439c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   13868:	e1a03004 	mov	r3, r4
   1386c:	e1a02005 	mov	r2, r5
   13870:	e59f1074 	ldr	r1, [pc, #116]	; 138ec <CUSBMIDIDevice::StartRequest()+0xe0>
   13874:	e1a00006 	mov	r0, r6
   13878:	e5846018 	str	r6, [r4, #24]
   1387c:	eb000328 	bl	14524 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   13880:	e5940018 	ldr	r0, [r4, #24]
   13884:	eb000340 	bl	1458c <CUSBRequest::SetCompleteOnNAK()>
   13888:	e1a00004 	mov	r0, r4
   1388c:	ebfff02c 	bl	f944 <CUSBFunction::GetHost() const>
   13890:	e1a02005 	mov	r2, r5
   13894:	e5903000 	ldr	r3, [r0]
   13898:	e5941018 	ldr	r1, [r4, #24]
   1389c:	e593300c 	ldr	r3, [r3, #12]
   138a0:	e28dd008 	add	sp, sp, #8
   138a4:	e8bd4070 	pop	{r4, r5, r6, lr}
   138a8:	e12fff13 	bx	r3
   138ac:	e3a020a0 	mov	r2, #160	; 0xa0
   138b0:	e59f1038 	ldr	r1, [pc, #56]	; 138f0 <CUSBMIDIDevice::StartRequest()+0xe4>
   138b4:	e59f0038 	ldr	r0, [pc, #56]	; 138f4 <CUSBMIDIDevice::StartRequest()+0xe8>
   138b8:	eb00439d 	bl	24734 <assertion_failed>
   138bc:	e3a020a1 	mov	r2, #161	; 0xa1
   138c0:	e59f1028 	ldr	r1, [pc, #40]	; 138f0 <CUSBMIDIDevice::StartRequest()+0xe4>
   138c4:	e59f002c 	ldr	r0, [pc, #44]	; 138f8 <CUSBMIDIDevice::StartRequest()+0xec>
   138c8:	eb004399 	bl	24734 <assertion_failed>
   138cc:	e3a020a3 	mov	r2, #163	; 0xa3
   138d0:	e59f1018 	ldr	r1, [pc, #24]	; 138f0 <CUSBMIDIDevice::StartRequest()+0xe4>
   138d4:	e59f0020 	ldr	r0, [pc, #32]	; 138fc <CUSBMIDIDevice::StartRequest()+0xf0>
   138d8:	eb004395 	bl	24734 <assertion_failed>
   138dc:	e3a020a4 	mov	r2, #164	; 0xa4
   138e0:	e59f1008 	ldr	r1, [pc, #8]	; 138f0 <CUSBMIDIDevice::StartRequest()+0xe4>
   138e4:	e59f0014 	ldr	r0, [pc, #20]	; 13900 <CUSBMIDIDevice::StartRequest()+0xf4>
   138e8:	eb004391 	bl	24734 <assertion_failed>
   138ec:	00013b58 	.word	0x00013b58
   138f0:	0003f190 	.word	0x0003f190
   138f4:	0003f1cc 	.word	0x0003f1cc
   138f8:	0003f1e0 	.word	0x0003f1e0
   138fc:	0003ee18 	.word	0x0003ee18
   13900:	0003f1f8 	.word	0x0003f1f8

00013904 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)>:
   13904:	e3520000 	cmp	r2, #0
   13908:	e92d4010 	push	{r4, lr}
   1390c:	0a000007 	beq	13930 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x2c>
   13910:	e5923024 	ldr	r3, [r2, #36]	; 0x24
   13914:	e1500003 	cmp	r0, r3
   13918:	1a000008 	bne	13940 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x3c>
   1391c:	e8bd4010 	pop	{r4, lr}
   13920:	e3a03000 	mov	r3, #0
   13924:	e1a00002 	mov	r0, r2
   13928:	e5823024 	str	r3, [r2, #36]	; 0x24
   1392c:	eaffffb6 	b	1380c <CUSBMIDIDevice::StartRequest()>
   13930:	e3a020f0 	mov	r2, #240	; 0xf0
   13934:	e59f1014 	ldr	r1, [pc, #20]	; 13950 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
   13938:	e59f0014 	ldr	r0, [pc, #20]	; 13954 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x50>
   1393c:	eb00437c 	bl	24734 <assertion_failed>
   13940:	e3a020e7 	mov	r2, #231	; 0xe7
   13944:	e59f1004 	ldr	r1, [pc, #4]	; 13950 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
   13948:	e59f0008 	ldr	r0, [pc, #8]	; 13958 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x54>
   1394c:	eb004378 	bl	24734 <assertion_failed>
   13950:	0003f190 	.word	0x0003f190
   13954:	0003d518 	.word	0x0003d518
   13958:	0003f20c 	.word	0x0003f20c

0001395c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>:
   1395c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13960:	e3510000 	cmp	r1, #0
   13964:	e24dd008 	sub	sp, sp, #8
   13968:	0a000058 	beq	13ad0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x174>
   1396c:	e5905018 	ldr	r5, [r0, #24]
   13970:	e1a04000 	mov	r4, r0
   13974:	e1550001 	cmp	r5, r1
   13978:	1a000058 	bne	13ae0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x184>
   1397c:	e1a00005 	mov	r0, r5
   13980:	eb0002b4 	bl	14458 <CUSBRequest::GetStatus() const>
   13984:	e3500000 	cmp	r0, #0
   13988:	1a000017 	bne	139ec <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x90>
   1398c:	e5945018 	ldr	r5, [r4, #24]
   13990:	e3550000 	cmp	r5, #0
   13994:	0a000006 	beq	139b4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   13998:	e1a00005 	mov	r0, r5
   1399c:	eb00029e 	bl	1441c <CUSBRequest::~CUSBRequest()>
   139a0:	e1a00005 	mov	r0, r5
   139a4:	e3a01028 	mov	r1, #40	; 0x28
   139a8:	eb000311 	bl	145f4 <CUSBRequest::operator delete(void*, unsigned int)>
   139ac:	e3a03000 	mov	r3, #0
   139b0:	e5843018 	str	r3, [r4, #24]
   139b4:	e5945024 	ldr	r5, [r4, #36]	; 0x24
   139b8:	e3550000 	cmp	r5, #0
   139bc:	1a00003f 	bne	13ac0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x164>
   139c0:	eb005927 	bl	29e64 <CTimer::Get()>
   139c4:	e1a03005 	mov	r3, r5
   139c8:	e3a01001 	mov	r1, #1
   139cc:	e59f2164 	ldr	r2, [pc, #356]	; 13b38 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1dc>
   139d0:	e58d4000 	str	r4, [sp]
   139d4:	eb005760 	bl	2975c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   139d8:	e3500000 	cmp	r0, #0
   139dc:	e5840024 	str	r0, [r4, #36]	; 0x24
   139e0:	0a000042 	beq	13af0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x194>
   139e4:	e28dd008 	add	sp, sp, #8
   139e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   139ec:	e1a00005 	mov	r0, r5
   139f0:	eb00029a 	bl	14460 <CUSBRequest::GetResultLength() const>
   139f4:	e2108003 	ands	r8, r0, #3
   139f8:	1affffe3 	bne	1398c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x30>
   139fc:	e5946020 	ldr	r6, [r4, #32]
   13a00:	e3560000 	cmp	r6, #0
   13a04:	0a00003d 	beq	13b00 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a4>
   13a08:	e1a00005 	mov	r0, r5
   13a0c:	eb000293 	bl	14460 <CUSBRequest::GetResultLength() const>
   13a10:	e5945020 	ldr	r5, [r4, #32]
   13a14:	e0860000 	add	r0, r6, r0
   13a18:	e1500005 	cmp	r0, r5
   13a1c:	9a00003b 	bls	13b10 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b4>
   13a20:	e1e06005 	mvn	r6, r5
   13a24:	e0806006 	add	r6, r0, r6
   13a28:	e2853005 	add	r3, r5, #5
   13a2c:	e3c66003 	bic	r6, r6, #3
   13a30:	e59f7104 	ldr	r7, [pc, #260]	; 13b3c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e0>
   13a34:	e0866003 	add	r6, r6, r3
   13a38:	e2855001 	add	r5, r5, #1
   13a3c:	e5550001 	ldrb	r0, [r5, #-1]
   13a40:	e3500000 	cmp	r0, #0
   13a44:	0a00000a 	beq	13a74 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x118>
   13a48:	e5948014 	ldr	r8, [r4, #20]
   13a4c:	e3580000 	cmp	r8, #0
   13a50:	03a08001 	moveq	r8, #1
   13a54:	0a000006 	beq	13a74 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x118>
   13a58:	e200300f 	and	r3, r0, #15
   13a5c:	e0873103 	add	r3, r7, r3, lsl #2
   13a60:	e1a01005 	mov	r1, r5
   13a64:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   13a68:	e1a00220 	lsr	r0, r0, #4
   13a6c:	e12fff38 	blx	r8
   13a70:	e3a08001 	mov	r8, #1
   13a74:	e2855004 	add	r5, r5, #4
   13a78:	e1560005 	cmp	r6, r5
   13a7c:	1affffee 	bne	13a3c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xe0>
   13a80:	e5945018 	ldr	r5, [r4, #24]
   13a84:	e3550000 	cmp	r5, #0
   13a88:	0a000004 	beq	13aa0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x144>
   13a8c:	e1a00005 	mov	r0, r5
   13a90:	eb000261 	bl	1441c <CUSBRequest::~CUSBRequest()>
   13a94:	e1a00005 	mov	r0, r5
   13a98:	e3a01028 	mov	r1, #40	; 0x28
   13a9c:	eb0002d4 	bl	145f4 <CUSBRequest::operator delete(void*, unsigned int)>
   13aa0:	e3a03000 	mov	r3, #0
   13aa4:	e1580003 	cmp	r8, r3
   13aa8:	e5843018 	str	r3, [r4, #24]
   13aac:	0affffc0 	beq	139b4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   13ab0:	e1a00004 	mov	r0, r4
   13ab4:	e28dd008 	add	sp, sp, #8
   13ab8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   13abc:	eaffff52 	b	1380c <CUSBMIDIDevice::StartRequest()>
   13ac0:	e3a020d7 	mov	r2, #215	; 0xd7
   13ac4:	e59f1074 	ldr	r1, [pc, #116]	; 13b40 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e4>
   13ac8:	e59f0074 	ldr	r0, [pc, #116]	; 13b44 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e8>
   13acc:	eb004318 	bl	24734 <assertion_failed>
   13ad0:	e3a020b0 	mov	r2, #176	; 0xb0
   13ad4:	e59f1064 	ldr	r1, [pc, #100]	; 13b40 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e4>
   13ad8:	e59f0068 	ldr	r0, [pc, #104]	; 13b48 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1ec>
   13adc:	eb004314 	bl	24734 <assertion_failed>
   13ae0:	e3a020b1 	mov	r2, #177	; 0xb1
   13ae4:	e59f1054 	ldr	r1, [pc, #84]	; 13b40 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e4>
   13ae8:	e59f005c 	ldr	r0, [pc, #92]	; 13b4c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1f0>
   13aec:	eb004310 	bl	24734 <assertion_failed>
   13af0:	e3a020d9 	mov	r2, #217	; 0xd9
   13af4:	e59f1044 	ldr	r1, [pc, #68]	; 13b40 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e4>
   13af8:	e59f0050 	ldr	r0, [pc, #80]	; 13b50 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1f4>
   13afc:	eb00430c 	bl	24734 <assertion_failed>
   13b00:	e3a020b8 	mov	r2, #184	; 0xb8
   13b04:	e59f1034 	ldr	r1, [pc, #52]	; 13b40 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e4>
   13b08:	e59f0044 	ldr	r0, [pc, #68]	; 13b54 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1f8>
   13b0c:	eb004308 	bl	24734 <assertion_failed>
   13b10:	e5945018 	ldr	r5, [r4, #24]
   13b14:	e3550000 	cmp	r5, #0
   13b18:	0affffa5 	beq	139b4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   13b1c:	e1a00005 	mov	r0, r5
   13b20:	eb00023d 	bl	1441c <CUSBRequest::~CUSBRequest()>
   13b24:	e1a00005 	mov	r0, r5
   13b28:	e3a01028 	mov	r1, #40	; 0x28
   13b2c:	eb0002b0 	bl	145f4 <CUSBRequest::operator delete(void*, unsigned int)>
   13b30:	e5848018 	str	r8, [r4, #24]
   13b34:	eaffff9e 	b	139b4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   13b38:	00013904 	.word	0x00013904
   13b3c:	0003f274 	.word	0x0003f274
   13b40:	0003f190 	.word	0x0003f190
   13b44:	0003f220 	.word	0x0003f220
   13b48:	0003d604 	.word	0x0003d604
   13b4c:	0003ee3c 	.word	0x0003ee3c
   13b50:	0003f230 	.word	0x0003f230
   13b54:	0003f1e0 	.word	0x0003f1e0

00013b58 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   13b58:	e3520000 	cmp	r2, #0
   13b5c:	0a000002 	beq	13b6c <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   13b60:	e1a01000 	mov	r1, r0
   13b64:	e1a00002 	mov	r0, r2
   13b68:	eaffff7b 	b	1395c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   13b6c:	e3a020e0 	mov	r2, #224	; 0xe0
   13b70:	e92d4010 	push	{r4, lr}
   13b74:	e59f1004 	ldr	r1, [pc, #4]	; 13b80 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   13b78:	e59f0004 	ldr	r0, [pc, #4]	; 13b84 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   13b7c:	eb0042ec 	bl	24734 <assertion_failed>
   13b80:	0003f190 	.word	0x0003f190
   13b84:	0003d518 	.word	0x0003d518

00013b88 <CUSBMIDIDevice::TimerHandler(unsigned int)>:
   13b88:	e5902024 	ldr	r2, [r0, #36]	; 0x24
   13b8c:	e1520001 	cmp	r2, r1
   13b90:	1a000002 	bne	13ba0 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x18>
   13b94:	e3a02000 	mov	r2, #0
   13b98:	e5802024 	str	r2, [r0, #36]	; 0x24
   13b9c:	eaffff1a 	b	1380c <CUSBMIDIDevice::StartRequest()>
   13ba0:	e3a020e7 	mov	r2, #231	; 0xe7
   13ba4:	e92d4010 	push	{r4, lr}
   13ba8:	e59f1004 	ldr	r1, [pc, #4]	; 13bb4 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x2c>
   13bac:	e59f0004 	ldr	r0, [pc, #4]	; 13bb8 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x30>
   13bb0:	eb0042df 	bl	24734 <assertion_failed>
   13bb4:	0003f190 	.word	0x0003f190
   13bb8:	0003f20c 	.word	0x0003f20c

00013bbc <CUSBMIDIDevice::Configure()>:
   13bbc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13bc0:	e24dd01c 	sub	sp, sp, #28
   13bc4:	e1a05000 	mov	r5, r0
   13bc8:	ebffef3c 	bl	f8c0 <CUSBFunction::GetNumEndpoints() const>
   13bcc:	e2506000 	subs	r6, r0, #0
   13bd0:	e1a00005 	mov	r0, r5
   13bd4:	0a000042 	beq	13ce4 <CUSBMIDIDevice::Configure()+0x128>
   13bd8:	ebffef44 	bl	f8f0 <CUSBFunction::GetDevice() const>
   13bdc:	ebffe9f1 	bl	e3a8 <CUSBDevice::GetDeviceDescriptor() const>
   13be0:	e3500000 	cmp	r0, #0
   13be4:	0a000073 	beq	13db8 <CUSBMIDIDevice::Configure()+0x1fc>
   13be8:	e5d03008 	ldrb	r3, [r0, #8]
   13bec:	e5d01009 	ldrb	r1, [r0, #9]
   13bf0:	e59f21d0 	ldr	r2, [pc, #464]	; 13dc8 <CUSBMIDIDevice::Configure()+0x20c>
   13bf4:	e1833401 	orr	r3, r3, r1, lsl #8
   13bf8:	e1530002 	cmp	r3, r2
   13bfc:	05d0600a 	ldrbeq	r6, [r0, #10]
   13c00:	05d0200b 	ldrbeq	r2, [r0, #11]
   13c04:	059f31c0 	ldreq	r3, [pc, #448]	; 13dcc <CUSBMIDIDevice::Configure()+0x210>
   13c08:	01866402 	orreq	r6, r6, r2, lsl #8
   13c0c:	00466003 	subeq	r6, r6, r3
   13c10:	016f6f16 	clzeq	r6, r6
   13c14:	13a06000 	movne	r6, #0
   13c18:	01a062a6 	lsreq	r6, r6, #5
   13c1c:	e3a01005 	mov	r1, #5
   13c20:	e1a00005 	mov	r0, r5
   13c24:	ebffef51 	bl	f970 <CUSBFunction::GetDescriptor(unsigned char)>
   13c28:	e2504000 	subs	r4, r0, #0
   13c2c:	0a000031 	beq	13cf8 <CUSBMIDIDevice::Configure()+0x13c>
   13c30:	e1d430d2 	ldrsb	r3, [r4, #2]
   13c34:	e3530000 	cmp	r3, #0
   13c38:	aafffff7 	bge	13c1c <CUSBMIDIDevice::Configure()+0x60>
   13c3c:	e5d43003 	ldrb	r3, [r4, #3]
   13c40:	e203303f 	and	r3, r3, #63	; 0x3f
   13c44:	e3530002 	cmp	r3, #2
   13c48:	1afffff3 	bne	13c1c <CUSBMIDIDevice::Configure()+0x60>
   13c4c:	e3560000 	cmp	r6, #0
   13c50:	0a000019 	beq	13cbc <CUSBMIDIDevice::Configure()+0x100>
   13c54:	e5953010 	ldr	r3, [r5, #16]
   13c58:	e3530000 	cmp	r3, #0
   13c5c:	1a000050 	bne	13da4 <CUSBMIDIDevice::Configure()+0x1e8>
   13c60:	e1a00005 	mov	r0, r5
   13c64:	ebffef21 	bl	f8f0 <CUSBFunction::GetDevice() const>
   13c68:	e1a01000 	mov	r1, r0
   13c6c:	e3a00014 	mov	r0, #20
   13c70:	e58d1004 	str	r1, [sp, #4]
   13c74:	eb005cb5 	bl	2af50 <operator new(unsigned int)>
   13c78:	e1a07000 	mov	r7, r0
   13c7c:	e1a02004 	mov	r2, r4
   13c80:	e59d1004 	ldr	r1, [sp, #4]
   13c84:	ebffed57 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13c88:	e5857010 	str	r7, [r5, #16]
   13c8c:	e5d40004 	ldrb	r0, [r4, #4]
   13c90:	e5d42005 	ldrb	r2, [r4, #5]
   13c94:	e5953020 	ldr	r3, [r5, #32]
   13c98:	e1800402 	orr	r0, r0, r2, lsl #8
   13c9c:	e3c00003 	bic	r0, r0, #3
   13ca0:	e6ff0070 	uxth	r0, r0
   13ca4:	e3530000 	cmp	r3, #0
   13ca8:	e1c501bc 	strh	r0, [r5, #28]
   13cac:	1a000038 	bne	13d94 <CUSBMIDIDevice::Configure()+0x1d8>
   13cb0:	eb005cac 	bl	2af68 <operator new[](unsigned int)>
   13cb4:	e5850020 	str	r0, [r5, #32]
   13cb8:	eaffffd7 	b	13c1c <CUSBMIDIDevice::Configure()+0x60>
   13cbc:	e3a01025 	mov	r1, #37	; 0x25
   13cc0:	e1a00005 	mov	r0, r5
   13cc4:	ebffef29 	bl	f970 <CUSBFunction::GetDescriptor(unsigned char)>
   13cc8:	e3500000 	cmp	r0, #0
   13ccc:	0affffd2 	beq	13c1c <CUSBMIDIDevice::Configure()+0x60>
   13cd0:	e5d43000 	ldrb	r3, [r4]
   13cd4:	e0843003 	add	r3, r4, r3
   13cd8:	e1500003 	cmp	r0, r3
   13cdc:	1affffce 	bne	13c1c <CUSBMIDIDevice::Configure()+0x60>
   13ce0:	eaffffdb 	b	13c54 <CUSBMIDIDevice::Configure()+0x98>
   13ce4:	e59f10e4 	ldr	r1, [pc, #228]	; 13dd0 <CUSBMIDIDevice::Configure()+0x214>
   13ce8:	ebffef2b 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   13cec:	e1a00006 	mov	r0, r6
   13cf0:	e28dd01c 	add	sp, sp, #28
   13cf4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13cf8:	e5956010 	ldr	r6, [r5, #16]
   13cfc:	e1a00005 	mov	r0, r5
   13d00:	e3560000 	cmp	r6, #0
   13d04:	0afffff6 	beq	13ce4 <CUSBMIDIDevice::Configure()+0x128>
   13d08:	ebffee30 	bl	f5d0 <CUSBFunction::Configure()>
   13d0c:	e2506000 	subs	r6, r0, #0
   13d10:	0a000019 	beq	13d7c <CUSBMIDIDevice::Configure()+0x1c0>
   13d14:	e28d0008 	add	r0, sp, #8
   13d18:	eb004f5d 	bl	27a94 <CString::CString()>
   13d1c:	e59f30b0 	ldr	r3, [pc, #176]	; 13dd4 <CUSBMIDIDevice::Configure()+0x218>
   13d20:	e59f10b0 	ldr	r1, [pc, #176]	; 13dd8 <CUSBMIDIDevice::Configure()+0x21c>
   13d24:	e5932000 	ldr	r2, [r3]
   13d28:	e28d0008 	add	r0, sp, #8
   13d2c:	e282c001 	add	ip, r2, #1
   13d30:	e583c000 	str	ip, [r3]
   13d34:	eb0054a0 	bl	28fbc <CString::Format(char const*, ...)>
   13d38:	eb00453f 	bl	2523c <CDeviceNameService::Get()>
   13d3c:	e1a06000 	mov	r6, r0
   13d40:	e28d0008 	add	r0, sp, #8
   13d44:	eb004f6a 	bl	27af4 <CString::operator char const*() const>
   13d48:	e1a03004 	mov	r3, r4
   13d4c:	e1a01000 	mov	r1, r0
   13d50:	e1a02005 	mov	r2, r5
   13d54:	e1a00006 	mov	r0, r6
   13d58:	eb004487 	bl	24f7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   13d5c:	e1a00005 	mov	r0, r5
   13d60:	ebfffea9 	bl	1380c <CUSBMIDIDevice::StartRequest()>
   13d64:	e1a06000 	mov	r6, r0
   13d68:	e28d0008 	add	r0, sp, #8
   13d6c:	eb004f15 	bl	279c8 <CString::~CString()>
   13d70:	e1a00006 	mov	r0, r6
   13d74:	e28dd01c 	add	sp, sp, #28
   13d78:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13d7c:	eb004b54 	bl	26ad4 <CLogger::Get()>
   13d80:	e3a02001 	mov	r2, #1
   13d84:	e59f3050 	ldr	r3, [pc, #80]	; 13ddc <CUSBMIDIDevice::Configure()+0x220>
   13d88:	e59f1040 	ldr	r1, [pc, #64]	; 13dd0 <CUSBMIDIDevice::Configure()+0x214>
   13d8c:	eb004a92 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13d90:	eaffffd5 	b	13cec <CUSBMIDIDevice::Configure()+0x130>
   13d94:	e3a0207d 	mov	r2, #125	; 0x7d
   13d98:	e59f1040 	ldr	r1, [pc, #64]	; 13de0 <CUSBMIDIDevice::Configure()+0x224>
   13d9c:	e59f0040 	ldr	r0, [pc, #64]	; 13de4 <CUSBMIDIDevice::Configure()+0x228>
   13da0:	eb004263 	bl	24734 <assertion_failed>
   13da4:	e1a00005 	mov	r0, r5
   13da8:	e59f1020 	ldr	r1, [pc, #32]	; 13dd0 <CUSBMIDIDevice::Configure()+0x214>
   13dac:	ebffeefa 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   13db0:	e3a06000 	mov	r6, #0
   13db4:	eaffffcc 	b	13cec <CUSBMIDIDevice::Configure()+0x130>
   13db8:	e3a02051 	mov	r2, #81	; 0x51
   13dbc:	e59f101c 	ldr	r1, [pc, #28]	; 13de0 <CUSBMIDIDevice::Configure()+0x224>
   13dc0:	e59f0020 	ldr	r0, [pc, #32]	; 13de8 <CUSBMIDIDevice::Configure()+0x22c>
   13dc4:	eb00425a 	bl	24734 <assertion_failed>
   13dc8:	00000582 	.word	0x00000582
   13dcc:	0000012a 	.word	0x0000012a
   13dd0:	0003f2e0 	.word	0x0003f2e0
   13dd4:	000461e0 	.word	0x000461e0
   13dd8:	0003f26c 	.word	0x0003f26c
   13ddc:	0003e6b8 	.word	0x0003e6b8
   13de0:	0003f190 	.word	0x0003f190
   13de4:	0003f254 	.word	0x0003f254
   13de8:	0003f240 	.word	0x0003f240

00013dec <CUSBMouseDevice::~CUSBMouseDevice()>:
   13dec:	e92d4010 	push	{r4, lr}
   13df0:	e1a04000 	mov	r4, r0
   13df4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   13df8:	e59f3044 	ldr	r3, [pc, #68]	; 13e44 <CUSBMouseDevice::~CUSBMouseDevice()+0x58>
   13dfc:	e3500000 	cmp	r0, #0
   13e00:	e5843000 	str	r3, [r4]
   13e04:	0a000002 	beq	13e14 <CUSBMouseDevice::~CUSBMouseDevice()+0x28>
   13e08:	e5903000 	ldr	r3, [r0]
   13e0c:	e5933004 	ldr	r3, [r3, #4]
   13e10:	e12fff33 	blx	r3
   13e14:	e3a03000 	mov	r3, #0
   13e18:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   13e1c:	e5843024 	str	r3, [r4, #36]	; 0x24
   13e20:	e1500003 	cmp	r0, r3
   13e24:	0a000000 	beq	13e2c <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   13e28:	eb005c55 	bl	2af84 <operator delete[](void*)>
   13e2c:	e3a03000 	mov	r3, #0
   13e30:	e1a00004 	mov	r0, r4
   13e34:	e5843028 	str	r3, [r4, #40]	; 0x28
   13e38:	ebfff88d 	bl	12074 <CUSBHIDDevice::~CUSBHIDDevice()>
   13e3c:	e1a00004 	mov	r0, r4
   13e40:	e8bd8010 	pop	{r4, pc}
   13e44:	0003f2f0 	.word	0x0003f2f0

00013e48 <CUSBMouseDevice::~CUSBMouseDevice()>:
   13e48:	e92d4010 	push	{r4, lr}
   13e4c:	e1a04000 	mov	r4, r0
   13e50:	ebffffe5 	bl	13dec <CUSBMouseDevice::~CUSBMouseDevice()>
   13e54:	e1a00004 	mov	r0, r4
   13e58:	e3a01030 	mov	r1, #48	; 0x30
   13e5c:	eb005c49 	bl	2af88 <operator delete(void*, unsigned int)>
   13e60:	e1a00004 	mov	r0, r4
   13e64:	e8bd8010 	pop	{r4, pc}

00013e68 <CUSBMouseDevice::Configure()>:
   13e68:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13e6c:	e3a01021 	mov	r1, #33	; 0x21
   13e70:	e24dd01c 	sub	sp, sp, #28
   13e74:	e1a04000 	mov	r4, r0
   13e78:	ebffeebc 	bl	f970 <CUSBFunction::GetDescriptor(unsigned char)>
   13e7c:	e2505000 	subs	r5, r0, #0
   13e80:	0a000003 	beq	13e94 <CUSBMouseDevice::Configure()+0x2c>
   13e84:	e5d50007 	ldrb	r0, [r5, #7]
   13e88:	e5d53008 	ldrb	r3, [r5, #8]
   13e8c:	e1900403 	orrs	r0, r0, r3, lsl #8
   13e90:	1a000005 	bne	13eac <CUSBMouseDevice::Configure()+0x44>
   13e94:	e1a00004 	mov	r0, r4
   13e98:	e59f10f4 	ldr	r1, [pc, #244]	; 13f94 <CUSBMouseDevice::Configure()+0x12c>
   13e9c:	ebffeebe 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   13ea0:	e3a00000 	mov	r0, #0
   13ea4:	e28dd01c 	add	sp, sp, #28
   13ea8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13eac:	e1c402bc 	strh	r0, [r4, #44]	; 0x2c
   13eb0:	eb005c2c 	bl	2af68 <operator new[](unsigned int)>
   13eb4:	e1a03000 	mov	r3, r0
   13eb8:	e1a00004 	mov	r0, r4
   13ebc:	e5843028 	str	r3, [r4, #40]	; 0x28
   13ec0:	ebffee9f 	bl	f944 <CUSBFunction::GetHost() const>
   13ec4:	e1a06000 	mov	r6, r0
   13ec8:	e1a00004 	mov	r0, r4
   13ecc:	ebffee91 	bl	f918 <CUSBFunction::GetEndpoint0() const>
   13ed0:	e1a01000 	mov	r1, r0
   13ed4:	e5d52006 	ldrb	r2, [r5, #6]
   13ed8:	e1a00004 	mov	r0, r4
   13edc:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   13ee0:	e1d472bc 	ldrh	r7, [r4, #44]	; 0x2c
   13ee4:	e58d1014 	str	r1, [sp, #20]
   13ee8:	e58d2010 	str	r2, [sp, #16]
   13eec:	ebffeef0 	bl	fab4 <CUSBFunction::GetInterfaceNumber() const>
   13ef0:	e3a0c081 	mov	ip, #129	; 0x81
   13ef4:	e6ff3070 	uxth	r3, r0
   13ef8:	e58d300c 	str	r3, [sp, #12]
   13efc:	e1a00006 	mov	r0, r6
   13f00:	e3a03000 	mov	r3, #0
   13f04:	e88d00a0 	stm	sp, {r5, r7}
   13f08:	e59d1014 	ldr	r1, [sp, #20]
   13f0c:	e59d2010 	ldr	r2, [sp, #16]
   13f10:	e58dc008 	str	ip, [sp, #8]
   13f14:	ebfffa68 	bl	128bc <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   13f18:	e1d432bc 	ldrh	r3, [r4, #44]	; 0x2c
   13f1c:	e1500003 	cmp	r0, r3
   13f20:	0a000007 	beq	13f44 <CUSBMouseDevice::Configure()+0xdc>
   13f24:	eb004aea 	bl	26ad4 <CLogger::Get()>
   13f28:	e3a02001 	mov	r2, #1
   13f2c:	e59f3064 	ldr	r3, [pc, #100]	; 13f98 <CUSBMouseDevice::Configure()+0x130>
   13f30:	e59f105c 	ldr	r1, [pc, #92]	; 13f94 <CUSBMouseDevice::Configure()+0x12c>
   13f34:	eb004a28 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13f38:	e3a00000 	mov	r0, #0
   13f3c:	e28dd01c 	add	sp, sp, #28
   13f40:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13f44:	e3a01000 	mov	r1, #0
   13f48:	e1a00004 	mov	r0, r4
   13f4c:	ebfff873 	bl	12120 <CUSBHIDDevice::Configure(unsigned int)>
   13f50:	e3500000 	cmp	r0, #0
   13f54:	0a000008 	beq	13f7c <CUSBMouseDevice::Configure()+0x114>
   13f58:	e3a00028 	mov	r0, #40	; 0x28
   13f5c:	eb005bfb 	bl	2af50 <operator new(unsigned int)>
   13f60:	e1a05000 	mov	r5, r0
   13f64:	eb001287 	bl	18988 <CMouseDevice::CMouseDevice()>
   13f68:	e1a00004 	mov	r0, r4
   13f6c:	e5845024 	str	r5, [r4, #36]	; 0x24
   13f70:	e28dd01c 	add	sp, sp, #28
   13f74:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   13f78:	eafff98b 	b	125ac <CUSBHIDDevice::StartRequest()>
   13f7c:	eb004ad4 	bl	26ad4 <CLogger::Get()>
   13f80:	e3a02001 	mov	r2, #1
   13f84:	e59f3010 	ldr	r3, [pc, #16]	; 13f9c <CUSBMouseDevice::Configure()+0x134>
   13f88:	e59f1004 	ldr	r1, [pc, #4]	; 13f94 <CUSBMouseDevice::Configure()+0x12c>
   13f8c:	eb004a12 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13f90:	eaffffc2 	b	13ea0 <CUSBMouseDevice::Configure()+0x38>
   13f94:	0003f318 	.word	0x0003f318
   13f98:	0003e9a0 	.word	0x0003e9a0
   13f9c:	0003d494 	.word	0x0003d494

00013fa0 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   13fa0:	e2422003 	sub	r2, r2, #3
   13fa4:	e16f2f12 	clz	r2, r2
   13fa8:	e3510000 	cmp	r1, #0
   13fac:	e1a022a2 	lsr	r2, r2, #5
   13fb0:	03a02000 	moveq	r2, #0
   13fb4:	e3520000 	cmp	r2, #0
   13fb8:	e1a02001 	mov	r2, r1
   13fbc:	012fff1e 	bxeq	lr
   13fc0:	e5d13000 	ldrb	r3, [r1]
   13fc4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   13fc8:	e3130002 	tst	r3, #2
   13fcc:	e2031001 	and	r1, r3, #1
   13fd0:	13811002 	orrne	r1, r1, #2
   13fd4:	e3130004 	tst	r3, #4
   13fd8:	13811004 	orrne	r1, r1, #4
   13fdc:	e3500000 	cmp	r0, #0
   13fe0:	012fff1e 	bxeq	lr
   13fe4:	e1d230d2 	ldrsb	r3, [r2, #2]
   13fe8:	e1d220d1 	ldrsb	r2, [r2, #1]
   13fec:	ea00129f 	b	18a70 <CMouseDevice::ReportHandler(unsigned int, int, int)>

00013ff0 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   13ff0:	e92d4010 	push	{r4, lr}
   13ff4:	e3a02003 	mov	r2, #3
   13ff8:	e1a04000 	mov	r4, r0
   13ffc:	ebfff806 	bl	1201c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   14000:	e3a03000 	mov	r3, #0
   14004:	e59f2010 	ldr	r2, [pc, #16]	; 1401c <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x2c>
   14008:	e1a00004 	mov	r0, r4
   1400c:	e5843024 	str	r3, [r4, #36]	; 0x24
   14010:	e5842000 	str	r2, [r4]
   14014:	e5843028 	str	r3, [r4, #40]	; 0x28
   14018:	e8bd8010 	pop	{r4, pc}
   1401c:	0003f2f0 	.word	0x0003f2f0

00014020 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   14020:	e92d4070 	push	{r4, r5, r6, lr}
   14024:	e5905018 	ldr	r5, [r0, #24]
   14028:	e59f3060 	ldr	r3, [pc, #96]	; 14090 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x70>
   1402c:	e3550000 	cmp	r5, #0
   14030:	e1a04000 	mov	r4, r0
   14034:	e5803000 	str	r3, [r0]
   14038:	0a000004 	beq	14050 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x30>
   1403c:	e1a00005 	mov	r0, r5
   14040:	ebffeccc 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   14044:	e1a00005 	mov	r0, r5
   14048:	e3a01014 	mov	r1, #20
   1404c:	eb005bcd 	bl	2af88 <operator delete(void*, unsigned int)>
   14050:	e3a03000 	mov	r3, #0
   14054:	e5945014 	ldr	r5, [r4, #20]
   14058:	e5843018 	str	r3, [r4, #24]
   1405c:	e1550003 	cmp	r5, r3
   14060:	0a000004 	beq	14078 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x58>
   14064:	e1a00005 	mov	r0, r5
   14068:	ebffecc2 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   1406c:	e1a00005 	mov	r0, r5
   14070:	e3a01014 	mov	r1, #20
   14074:	eb005bc3 	bl	2af88 <operator delete(void*, unsigned int)>
   14078:	e3a03000 	mov	r3, #0
   1407c:	e1a00004 	mov	r0, r4
   14080:	e5843014 	str	r3, [r4, #20]
   14084:	ebffed28 	bl	f52c <CUSBFunction::~CUSBFunction()>
   14088:	e1a00004 	mov	r0, r4
   1408c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14090:	0003f36c 	.word	0x0003f36c

00014094 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   14094:	e92d4010 	push	{r4, lr}
   14098:	e1a04000 	mov	r4, r0
   1409c:	ebffffdf 	bl	14020 <CUSBPrinterDevice::~CUSBPrinterDevice()>
   140a0:	e1a00004 	mov	r0, r4
   140a4:	e3a0101c 	mov	r1, #28
   140a8:	eb005bb6 	bl	2af88 <operator delete(void*, unsigned int)>
   140ac:	e1a00004 	mov	r0, r4
   140b0:	e8bd8010 	pop	{r4, pc}

000140b4 <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   140b4:	e92d4070 	push	{r4, r5, r6, lr}
   140b8:	e2515000 	subs	r5, r1, #0
   140bc:	e24dd008 	sub	sp, sp, #8
   140c0:	0a000011 	beq	1410c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x58>
   140c4:	e3520000 	cmp	r2, #0
   140c8:	e1a04002 	mov	r4, r2
   140cc:	0a000012 	beq	1411c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x68>
   140d0:	e1a06000 	mov	r6, r0
   140d4:	ebffee1a 	bl	f944 <CUSBFunction::GetHost() const>
   140d8:	e3500000 	cmp	r0, #0
   140dc:	0a000012 	beq	1412c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x78>
   140e0:	e3a03000 	mov	r3, #0
   140e4:	e5961018 	ldr	r1, [r6, #24]
   140e8:	e1a02005 	mov	r2, r5
   140ec:	e58d3000 	str	r3, [sp]
   140f0:	e1a03004 	mov	r3, r4
   140f4:	ebfffa24 	bl	1298c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   140f8:	e3500000 	cmp	r0, #0
   140fc:	a1a00004 	movge	r0, r4
   14100:	b3e00000 	mvnlt	r0, #0
   14104:	e28dd008 	add	sp, sp, #8
   14108:	e8bd8070 	pop	{r4, r5, r6, pc}
   1410c:	e3a0207e 	mov	r2, #126	; 0x7e
   14110:	e59f1024 	ldr	r1, [pc, #36]	; 1413c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   14114:	e59f0024 	ldr	r0, [pc, #36]	; 14140 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x8c>
   14118:	eb004185 	bl	24734 <assertion_failed>
   1411c:	e3a0207f 	mov	r2, #127	; 0x7f
   14120:	e59f1014 	ldr	r1, [pc, #20]	; 1413c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   14124:	e59f0018 	ldr	r0, [pc, #24]	; 14144 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x90>
   14128:	eb004181 	bl	24734 <assertion_failed>
   1412c:	e3a02082 	mov	r2, #130	; 0x82
   14130:	e59f1004 	ldr	r1, [pc, #4]	; 1413c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   14134:	e59f000c 	ldr	r0, [pc, #12]	; 14148 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x94>
   14138:	eb00417d 	bl	24734 <assertion_failed>
   1413c:	0003f320 	.word	0x0003f320
   14140:	0003ef40 	.word	0x0003ef40
   14144:	0003f330 	.word	0x0003f330
   14148:	0003ef50 	.word	0x0003ef50

0001414c <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   1414c:	e92d4010 	push	{r4, lr}
   14150:	e1a04000 	mov	r4, r0
   14154:	ebffed86 	bl	f774 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   14158:	e3a03000 	mov	r3, #0
   1415c:	e59f2014 	ldr	r2, [pc, #20]	; 14178 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x2c>
   14160:	e1a00004 	mov	r0, r4
   14164:	e5c43010 	strb	r3, [r4, #16]
   14168:	e5842000 	str	r2, [r4]
   1416c:	e5843014 	str	r3, [r4, #20]
   14170:	e5843018 	str	r3, [r4, #24]
   14174:	e8bd8010 	pop	{r4, pc}
   14178:	0003f36c 	.word	0x0003f36c

0001417c <CUSBPrinterDevice::Configure()>:
   1417c:	e92d4070 	push	{r4, r5, r6, lr}
   14180:	e24dd020 	sub	sp, sp, #32
   14184:	e1a05000 	mov	r5, r0
   14188:	ebffee6d 	bl	fb44 <CUSBFunction::GetInterfaceProtocol() const>
   1418c:	e2403001 	sub	r3, r0, #1
   14190:	e3530001 	cmp	r3, #1
   14194:	e5c50010 	strb	r0, [r5, #16]
   14198:	8a00003b 	bhi	1428c <CUSBPrinterDevice::Configure()+0x110>
   1419c:	e1a00005 	mov	r0, r5
   141a0:	ebffedc6 	bl	f8c0 <CUSBFunction::GetNumEndpoints() const>
   141a4:	e5d53010 	ldrb	r3, [r5, #16]
   141a8:	e3530001 	cmp	r3, #1
   141ac:	03a03001 	moveq	r3, #1
   141b0:	13a03002 	movne	r3, #2
   141b4:	e1500003 	cmp	r0, r3
   141b8:	aa00000a 	bge	141e8 <CUSBPrinterDevice::Configure()+0x6c>
   141bc:	e3a04000 	mov	r4, #0
   141c0:	e1a00005 	mov	r0, r5
   141c4:	e59f11bc 	ldr	r1, [pc, #444]	; 14388 <CUSBPrinterDevice::Configure()+0x20c>
   141c8:	ebffedf3 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   141cc:	e1a00004 	mov	r0, r4
   141d0:	e28dd020 	add	sp, sp, #32
   141d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   141d8:	e5d43003 	ldrb	r3, [r4, #3]
   141dc:	e203303f 	and	r3, r3, #63	; 0x3f
   141e0:	e3530002 	cmp	r3, #2
   141e4:	0a000033 	beq	142b8 <CUSBPrinterDevice::Configure()+0x13c>
   141e8:	e3a01005 	mov	r1, #5
   141ec:	e1a00005 	mov	r0, r5
   141f0:	ebffedde 	bl	f970 <CUSBFunction::GetDescriptor(unsigned char)>
   141f4:	e2504000 	subs	r4, r0, #0
   141f8:	1afffff6 	bne	141d8 <CUSBPrinterDevice::Configure()+0x5c>
   141fc:	e5954018 	ldr	r4, [r5, #24]
   14200:	e3540000 	cmp	r4, #0
   14204:	0a000054 	beq	1435c <CUSBPrinterDevice::Configure()+0x1e0>
   14208:	e5d53010 	ldrb	r3, [r5, #16]
   1420c:	e1a00005 	mov	r0, r5
   14210:	e3530001 	cmp	r3, #1
   14214:	0a000002 	beq	14224 <CUSBPrinterDevice::Configure()+0xa8>
   14218:	e5954014 	ldr	r4, [r5, #20]
   1421c:	e3540000 	cmp	r4, #0
   14220:	0a000051 	beq	1436c <CUSBPrinterDevice::Configure()+0x1f0>
   14224:	ebffece9 	bl	f5d0 <CUSBFunction::Configure()>
   14228:	e2504000 	subs	r4, r0, #0
   1422c:	0a000042 	beq	1433c <CUSBPrinterDevice::Configure()+0x1c0>
   14230:	e28d0010 	add	r0, sp, #16
   14234:	eb004e16 	bl	27a94 <CString::CString()>
   14238:	e59f314c 	ldr	r3, [pc, #332]	; 1438c <CUSBPrinterDevice::Configure()+0x210>
   1423c:	e59f114c 	ldr	r1, [pc, #332]	; 14390 <CUSBPrinterDevice::Configure()+0x214>
   14240:	e5932000 	ldr	r2, [r3]
   14244:	e28d0010 	add	r0, sp, #16
   14248:	e282c001 	add	ip, r2, #1
   1424c:	e583c000 	str	ip, [r3]
   14250:	eb005359 	bl	28fbc <CString::Format(char const*, ...)>
   14254:	eb0043f8 	bl	2523c <CDeviceNameService::Get()>
   14258:	e1a06000 	mov	r6, r0
   1425c:	e28d0010 	add	r0, sp, #16
   14260:	eb004e23 	bl	27af4 <CString::operator char const*() const>
   14264:	e1a02005 	mov	r2, r5
   14268:	e1a01000 	mov	r1, r0
   1426c:	e3a03000 	mov	r3, #0
   14270:	e1a00006 	mov	r0, r6
   14274:	eb004340 	bl	24f7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   14278:	e28d0010 	add	r0, sp, #16
   1427c:	eb004dd1 	bl	279c8 <CString::~CString()>
   14280:	e1a00004 	mov	r0, r4
   14284:	e28dd020 	add	sp, sp, #32
   14288:	e8bd8070 	pop	{r4, r5, r6, pc}
   1428c:	e3a04000 	mov	r4, #0
   14290:	eb004a0f 	bl	26ad4 <CLogger::Get()>
   14294:	e5d52010 	ldrb	r2, [r5, #16]
   14298:	e59f30f4 	ldr	r3, [pc, #244]	; 14394 <CUSBPrinterDevice::Configure()+0x218>
   1429c:	e58d2000 	str	r2, [sp]
   142a0:	e59f10e0 	ldr	r1, [pc, #224]	; 14388 <CUSBPrinterDevice::Configure()+0x20c>
   142a4:	e3a02001 	mov	r2, #1
   142a8:	eb00494b 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   142ac:	e1a00004 	mov	r0, r4
   142b0:	e28dd020 	add	sp, sp, #32
   142b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   142b8:	e1d430d2 	ldrsb	r3, [r4, #2]
   142bc:	e3530000 	cmp	r3, #0
   142c0:	ba00000e 	blt	14300 <CUSBPrinterDevice::Configure()+0x184>
   142c4:	e5953018 	ldr	r3, [r5, #24]
   142c8:	e1a00005 	mov	r0, r5
   142cc:	e3530000 	cmp	r3, #0
   142d0:	1a000028 	bne	14378 <CUSBPrinterDevice::Configure()+0x1fc>
   142d4:	ebffed85 	bl	f8f0 <CUSBFunction::GetDevice() const>
   142d8:	e1a01000 	mov	r1, r0
   142dc:	e3a00014 	mov	r0, #20
   142e0:	e58d100c 	str	r1, [sp, #12]
   142e4:	eb005b19 	bl	2af50 <operator new(unsigned int)>
   142e8:	e1a06000 	mov	r6, r0
   142ec:	e1a02004 	mov	r2, r4
   142f0:	e59d100c 	ldr	r1, [sp, #12]
   142f4:	ebffebbb 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   142f8:	e5856018 	str	r6, [r5, #24]
   142fc:	eaffffb9 	b	141e8 <CUSBPrinterDevice::Configure()+0x6c>
   14300:	e5953014 	ldr	r3, [r5, #20]
   14304:	e1a00005 	mov	r0, r5
   14308:	e3530000 	cmp	r3, #0
   1430c:	1a000019 	bne	14378 <CUSBPrinterDevice::Configure()+0x1fc>
   14310:	ebffed76 	bl	f8f0 <CUSBFunction::GetDevice() const>
   14314:	e1a01000 	mov	r1, r0
   14318:	e3a00014 	mov	r0, #20
   1431c:	e58d100c 	str	r1, [sp, #12]
   14320:	eb005b0a 	bl	2af50 <operator new(unsigned int)>
   14324:	e1a06000 	mov	r6, r0
   14328:	e1a02004 	mov	r2, r4
   1432c:	e59d100c 	ldr	r1, [sp, #12]
   14330:	ebffebac 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14334:	e5856014 	str	r6, [r5, #20]
   14338:	eaffffaa 	b	141e8 <CUSBPrinterDevice::Configure()+0x6c>
   1433c:	eb0049e4 	bl	26ad4 <CLogger::Get()>
   14340:	e3a02001 	mov	r2, #1
   14344:	e59f304c 	ldr	r3, [pc, #76]	; 14398 <CUSBPrinterDevice::Configure()+0x21c>
   14348:	e59f1038 	ldr	r1, [pc, #56]	; 14388 <CUSBPrinterDevice::Configure()+0x20c>
   1434c:	eb004922 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14350:	e1a00004 	mov	r0, r4
   14354:	e28dd020 	add	sp, sp, #32
   14358:	e8bd8070 	pop	{r4, r5, r6, pc}
   1435c:	e1a00005 	mov	r0, r5
   14360:	e59f1020 	ldr	r1, [pc, #32]	; 14388 <CUSBPrinterDevice::Configure()+0x20c>
   14364:	ebffed8c 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   14368:	eaffffc4 	b	14280 <CUSBPrinterDevice::Configure()+0x104>
   1436c:	e59f1014 	ldr	r1, [pc, #20]	; 14388 <CUSBPrinterDevice::Configure()+0x20c>
   14370:	ebffed89 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   14374:	eaffffc1 	b	14280 <CUSBPrinterDevice::Configure()+0x104>
   14378:	e59f1008 	ldr	r1, [pc, #8]	; 14388 <CUSBPrinterDevice::Configure()+0x20c>
   1437c:	ebffed86 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   14380:	e3a04000 	mov	r4, #0
   14384:	eaffffbd 	b	14280 <CUSBPrinterDevice::Configure()+0x104>
   14388:	0003f390 	.word	0x0003f390
   1438c:	000461e4 	.word	0x000461e4
   14390:	0003f35c 	.word	0x0003f35c
   14394:	0003f33c 	.word	0x0003f33c
   14398:	0003e6b8 	.word	0x0003e6b8

0001439c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
   1439c:	e92d4010 	push	{r4, lr}
   143a0:	e3a0e000 	mov	lr, #0
   143a4:	e5801000 	str	r1, [r0]
   143a8:	e151000e 	cmp	r1, lr
   143ac:	e59d1008 	ldr	r1, [sp, #8]
   143b0:	e1c020f8 	strd	r2, [r0, #8]
   143b4:	e5801004 	str	r1, [r0, #4]
   143b8:	e580e010 	str	lr, [r0, #16]
   143bc:	e580e014 	str	lr, [r0, #20]
   143c0:	e580e018 	str	lr, [r0, #24]
   143c4:	e580e01c 	str	lr, [r0, #28]
   143c8:	e580e020 	str	lr, [r0, #32]
   143cc:	e5c0e024 	strb	lr, [r0, #36]	; 0x24
   143d0:	0a00000a 	beq	14400 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x64>
   143d4:	e2522000 	subs	r2, r2, #0
   143d8:	13a02001 	movne	r2, #1
   143dc:	e3530000 	cmp	r3, #0
   143e0:	11a03002 	movne	r3, r2
   143e4:	03a03001 	moveq	r3, #1
   143e8:	e3530000 	cmp	r3, #0
   143ec:	18bd8010 	popne	{r4, pc}
   143f0:	e3a02024 	mov	r2, #36	; 0x24
   143f4:	e59f1014 	ldr	r1, [pc, #20]	; 14410 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x74>
   143f8:	e59f0014 	ldr	r0, [pc, #20]	; 14414 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x78>
   143fc:	eb0040cc 	bl	24734 <assertion_failed>
   14400:	e3a02023 	mov	r2, #35	; 0x23
   14404:	e59f1004 	ldr	r1, [pc, #4]	; 14410 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x74>
   14408:	e59f0008 	ldr	r0, [pc, #8]	; 14418 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x7c>
   1440c:	eb0040c8 	bl	24734 <assertion_failed>
   14410:	0003f398 	.word	0x0003f398
   14414:	0003f3a8 	.word	0x0003f3a8
   14418:	0003dee8 	.word	0x0003dee8

0001441c <CUSBRequest::~CUSBRequest()>:
   1441c:	e12fff1e 	bx	lr

00014420 <CUSBRequest::GetEndpoint() const>:
   14420:	e5900000 	ldr	r0, [r0]
   14424:	e3500000 	cmp	r0, #0
   14428:	112fff1e 	bxne	lr
   1442c:	e3a02031 	mov	r2, #49	; 0x31
   14430:	e92d4010 	push	{r4, lr}
   14434:	e59f1004 	ldr	r1, [pc, #4]	; 14440 <CUSBRequest::GetEndpoint() const+0x20>
   14438:	e59f0004 	ldr	r0, [pc, #4]	; 14444 <CUSBRequest::GetEndpoint() const+0x24>
   1443c:	eb0040bc 	bl	24734 <assertion_failed>
   14440:	0003f398 	.word	0x0003f398
   14444:	0003dee8 	.word	0x0003dee8

00014448 <CUSBRequest::SetStatus(int)>:
   14448:	e5801010 	str	r1, [r0, #16]
   1444c:	e12fff1e 	bx	lr

00014450 <CUSBRequest::SetResultLen(unsigned int)>:
   14450:	e5801014 	str	r1, [r0, #20]
   14454:	e12fff1e 	bx	lr

00014458 <CUSBRequest::GetStatus() const>:
   14458:	e5900010 	ldr	r0, [r0, #16]
   1445c:	e12fff1e 	bx	lr

00014460 <CUSBRequest::GetResultLength() const>:
   14460:	e5903010 	ldr	r3, [r0, #16]
   14464:	e3530000 	cmp	r3, #0
   14468:	0a000001 	beq	14474 <CUSBRequest::GetResultLength() const+0x14>
   1446c:	e5900014 	ldr	r0, [r0, #20]
   14470:	e12fff1e 	bx	lr
   14474:	e3a02046 	mov	r2, #70	; 0x46
   14478:	e92d4010 	push	{r4, lr}
   1447c:	e59f1004 	ldr	r1, [pc, #4]	; 14488 <CUSBRequest::GetResultLength() const+0x28>
   14480:	e59f0004 	ldr	r0, [pc, #4]	; 1448c <CUSBRequest::GetResultLength() const+0x2c>
   14484:	eb0040aa 	bl	24734 <assertion_failed>
   14488:	0003f398 	.word	0x0003f398
   1448c:	0003f3cc 	.word	0x0003f3cc

00014490 <CUSBRequest::GetSetupData()>:
   14490:	e92d4010 	push	{r4, lr}
   14494:	e1a04000 	mov	r4, r0
   14498:	e5900000 	ldr	r0, [r0]
   1449c:	ebffebc2 	bl	f3ac <CUSBEndpoint::GetType() const>
   144a0:	e3500000 	cmp	r0, #0
   144a4:	1a000006 	bne	144c4 <CUSBRequest::GetSetupData()+0x34>
   144a8:	e5940004 	ldr	r0, [r4, #4]
   144ac:	e3500000 	cmp	r0, #0
   144b0:	18bd8010 	popne	{r4, pc}
   144b4:	e3a0204e 	mov	r2, #78	; 0x4e
   144b8:	e59f1014 	ldr	r1, [pc, #20]	; 144d4 <CUSBRequest::GetSetupData()+0x44>
   144bc:	e59f0014 	ldr	r0, [pc, #20]	; 144d8 <CUSBRequest::GetSetupData()+0x48>
   144c0:	eb00409b 	bl	24734 <assertion_failed>
   144c4:	e3a0204d 	mov	r2, #77	; 0x4d
   144c8:	e59f1004 	ldr	r1, [pc, #4]	; 144d4 <CUSBRequest::GetSetupData()+0x44>
   144cc:	e59f0008 	ldr	r0, [pc, #8]	; 144dc <CUSBRequest::GetSetupData()+0x4c>
   144d0:	eb004097 	bl	24734 <assertion_failed>
   144d4:	0003f398 	.word	0x0003f398
   144d8:	0003f408 	.word	0x0003f408
   144dc:	0003f3d8 	.word	0x0003f3d8

000144e0 <CUSBRequest::GetBuffer()>:
   144e0:	e5903008 	ldr	r3, [r0, #8]
   144e4:	e3530000 	cmp	r3, #0
   144e8:	0a000001 	beq	144f4 <CUSBRequest::GetBuffer()+0x14>
   144ec:	e1a00003 	mov	r0, r3
   144f0:	e12fff1e 	bx	lr
   144f4:	e590200c 	ldr	r2, [r0, #12]
   144f8:	e3520000 	cmp	r2, #0
   144fc:	0afffffa 	beq	144ec <CUSBRequest::GetBuffer()+0xc>
   14500:	e3a02055 	mov	r2, #85	; 0x55
   14504:	e92d4010 	push	{r4, lr}
   14508:	e59f1004 	ldr	r1, [pc, #4]	; 14514 <CUSBRequest::GetBuffer()+0x34>
   1450c:	e59f0004 	ldr	r0, [pc, #4]	; 14518 <CUSBRequest::GetBuffer()+0x38>
   14510:	eb004087 	bl	24734 <assertion_failed>
   14514:	0003f398 	.word	0x0003f398
   14518:	0003f3a8 	.word	0x0003f3a8

0001451c <CUSBRequest::GetBufLen() const>:
   1451c:	e590000c 	ldr	r0, [r0, #12]
   14520:	e12fff1e 	bx	lr

00014524 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
   14524:	e3510000 	cmp	r1, #0
   14528:	e1c021fc 	strd	r2, [r0, #28]
   1452c:	e5801018 	str	r1, [r0, #24]
   14530:	112fff1e 	bxne	lr
   14534:	e3a02066 	mov	r2, #102	; 0x66
   14538:	e92d4010 	push	{r4, lr}
   1453c:	e59f1004 	ldr	r1, [pc, #4]	; 14548 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x24>
   14540:	e59f0004 	ldr	r0, [pc, #4]	; 1454c <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x28>
   14544:	eb00407a 	bl	24734 <assertion_failed>
   14548:	0003f398 	.word	0x0003f398
   1454c:	0003f41c 	.word	0x0003f41c

00014550 <CUSBRequest::CallCompletionRoutine()>:
   14550:	e92d4010 	push	{r4, lr}
   14554:	e590e018 	ldr	lr, [r0, #24]
   14558:	e35e0000 	cmp	lr, #0
   1455c:	0a000004 	beq	14574 <CUSBRequest::CallCompletionRoutine()+0x24>
   14560:	e1a0300e 	mov	r3, lr
   14564:	e8bd4010 	pop	{r4, lr}
   14568:	e5902020 	ldr	r2, [r0, #32]
   1456c:	e590101c 	ldr	r1, [r0, #28]
   14570:	e12fff13 	bx	r3
   14574:	e3a0206b 	mov	r2, #107	; 0x6b
   14578:	e59f1004 	ldr	r1, [pc, #4]	; 14584 <CUSBRequest::CallCompletionRoutine()+0x34>
   1457c:	e59f0004 	ldr	r0, [pc, #4]	; 14588 <CUSBRequest::CallCompletionRoutine()+0x38>
   14580:	eb00406b 	bl	24734 <assertion_failed>
   14584:	0003f398 	.word	0x0003f398
   14588:	0003f41c 	.word	0x0003f41c

0001458c <CUSBRequest::SetCompleteOnNAK()>:
   1458c:	e3a03001 	mov	r3, #1
   14590:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   14594:	e12fff1e 	bx	lr

00014598 <CUSBRequest::IsCompleteOnNAK() const>:
   14598:	e5d00024 	ldrb	r0, [r0, #36]	; 0x24
   1459c:	e12fff1e 	bx	lr

000145a0 <CUSBRequest::operator new(unsigned int)>:
   145a0:	e3500028 	cmp	r0, #40	; 0x28
   145a4:	e92d4010 	push	{r4, lr}
   145a8:	1a000005 	bne	145c4 <CUSBRequest::operator new(unsigned int)+0x24>
   145ac:	e59f3030 	ldr	r3, [pc, #48]	; 145e4 <CUSBRequest::operator new(unsigned int)+0x44>
   145b0:	e5930000 	ldr	r0, [r3]
   145b4:	e3500000 	cmp	r0, #0
   145b8:	0a000005 	beq	145d4 <CUSBRequest::operator new(unsigned int)+0x34>
   145bc:	e8bd4010 	pop	{r4, lr}
   145c0:	ea00415d 	b	24b3c <CClassAllocator::Allocate()>
   145c4:	e3a0207a 	mov	r2, #122	; 0x7a
   145c8:	e59f1018 	ldr	r1, [pc, #24]	; 145e8 <CUSBRequest::operator new(unsigned int)+0x48>
   145cc:	e59f0018 	ldr	r0, [pc, #24]	; 145ec <CUSBRequest::operator new(unsigned int)+0x4c>
   145d0:	eb004057 	bl	24734 <assertion_failed>
   145d4:	e3a0207a 	mov	r2, #122	; 0x7a
   145d8:	e59f1008 	ldr	r1, [pc, #8]	; 145e8 <CUSBRequest::operator new(unsigned int)+0x48>
   145dc:	e59f000c 	ldr	r0, [pc, #12]	; 145f0 <CUSBRequest::operator new(unsigned int)+0x50>
   145e0:	eb004053 	bl	24734 <assertion_failed>
   145e4:	0004c524 	.word	0x0004c524
   145e8:	0003f398 	.word	0x0003f398
   145ec:	0003f438 	.word	0x0003f438
   145f0:	0003db30 	.word	0x0003db30

000145f4 <CUSBRequest::operator delete(void*, unsigned int)>:
   145f4:	e3510028 	cmp	r1, #40	; 0x28
   145f8:	e92d4010 	push	{r4, lr}
   145fc:	1a000006 	bne	1461c <CUSBRequest::operator delete(void*, unsigned int)+0x28>
   14600:	e59f3034 	ldr	r3, [pc, #52]	; 1463c <CUSBRequest::operator delete(void*, unsigned int)+0x48>
   14604:	e1a01000 	mov	r1, r0
   14608:	e5930000 	ldr	r0, [r3]
   1460c:	e3500000 	cmp	r0, #0
   14610:	0a000005 	beq	1462c <CUSBRequest::operator delete(void*, unsigned int)+0x38>
   14614:	e8bd4010 	pop	{r4, lr}
   14618:	ea004182 	b	24c28 <CClassAllocator::Free(void*)>
   1461c:	e3a0207a 	mov	r2, #122	; 0x7a
   14620:	e59f1018 	ldr	r1, [pc, #24]	; 14640 <CUSBRequest::operator delete(void*, unsigned int)+0x4c>
   14624:	e59f0018 	ldr	r0, [pc, #24]	; 14644 <CUSBRequest::operator delete(void*, unsigned int)+0x50>
   14628:	eb004041 	bl	24734 <assertion_failed>
   1462c:	e3a0207a 	mov	r2, #122	; 0x7a
   14630:	e59f1008 	ldr	r1, [pc, #8]	; 14640 <CUSBRequest::operator delete(void*, unsigned int)+0x4c>
   14634:	e59f000c 	ldr	r0, [pc, #12]	; 14648 <CUSBRequest::operator delete(void*, unsigned int)+0x54>
   14638:	eb00403d 	bl	24734 <assertion_failed>
   1463c:	0004c524 	.word	0x0004c524
   14640:	0003f398 	.word	0x0003f398
   14644:	0003f438 	.word	0x0003f438
   14648:	0003db30 	.word	0x0003db30

0001464c <CUSBRequest::InitAllocator(unsigned int)>:
   1464c:	e92d4070 	push	{r4, r5, r6, lr}
   14650:	e59f6040 	ldr	r6, [pc, #64]	; 14698 <CUSBRequest::InitAllocator(unsigned int)+0x4c>
   14654:	e5963000 	ldr	r3, [r6]
   14658:	e3530000 	cmp	r3, #0
   1465c:	1a000009 	bne	14688 <CUSBRequest::InitAllocator(unsigned int)+0x3c>
   14660:	e1a04000 	mov	r4, r0
   14664:	e3a0001c 	mov	r0, #28
   14668:	eb005a38 	bl	2af50 <operator new(unsigned int)>
   1466c:	e1a05000 	mov	r5, r0
   14670:	e1a02004 	mov	r2, r4
   14674:	e3a01028 	mov	r1, #40	; 0x28
   14678:	e59f301c 	ldr	r3, [pc, #28]	; 1469c <CUSBRequest::InitAllocator(unsigned int)+0x50>
   1467c:	eb004115 	bl	24ad8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   14680:	e5865000 	str	r5, [r6]
   14684:	e8bd8070 	pop	{r4, r5, r6, pc}
   14688:	e3a0207a 	mov	r2, #122	; 0x7a
   1468c:	e59f100c 	ldr	r1, [pc, #12]	; 146a0 <CUSBRequest::InitAllocator(unsigned int)+0x54>
   14690:	e59f000c 	ldr	r0, [pc, #12]	; 146a4 <CUSBRequest::InitAllocator(unsigned int)+0x58>
   14694:	eb004026 	bl	24734 <assertion_failed>
   14698:	0004c524 	.word	0x0004c524
   1469c:	0003f458 	.word	0x0003f458
   146a0:	0003f398 	.word	0x0003f398
   146a4:	0003db44 	.word	0x0003db44

000146a8 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
   146a8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   146ac:	e59f7054 	ldr	r7, [pc, #84]	; 14708 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   146b0:	e24dd00c 	sub	sp, sp, #12
   146b4:	e5973000 	ldr	r3, [r7]
   146b8:	e3530000 	cmp	r3, #0
   146bc:	1a00000d 	bne	146f8 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
   146c0:	e1a05001 	mov	r5, r1
   146c4:	e1a04000 	mov	r4, r0
   146c8:	e3a0001c 	mov	r0, #28
   146cc:	eb005a1f 	bl	2af50 <operator new(unsigned int)>
   146d0:	e59f1034 	ldr	r1, [pc, #52]	; 1470c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   146d4:	e1a03005 	mov	r3, r5
   146d8:	e58d1000 	str	r1, [sp]
   146dc:	e1a02004 	mov	r2, r4
   146e0:	e3a01028 	mov	r1, #40	; 0x28
   146e4:	e1a06000 	mov	r6, r0
   146e8:	eb004106 	bl	24b08 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   146ec:	e5876000 	str	r6, [r7]
   146f0:	e28dd00c 	add	sp, sp, #12
   146f4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   146f8:	e3a0207a 	mov	r2, #122	; 0x7a
   146fc:	e59f100c 	ldr	r1, [pc, #12]	; 14710 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   14700:	e59f000c 	ldr	r0, [pc, #12]	; 14714 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   14704:	eb00400a 	bl	24734 <assertion_failed>
   14708:	0004c524 	.word	0x0004c524
   1470c:	0003f458 	.word	0x0003f458
   14710:	0003f398 	.word	0x0003f398
   14714:	0003db44 	.word	0x0003db44

00014718 <CUSBStandardHub::~CUSBStandardHub()>:
   14718:	e5902018 	ldr	r2, [r0, #24]
   1471c:	e59f30c0 	ldr	r3, [pc, #192]	; 147e4 <CUSBStandardHub::~CUSBStandardHub()+0xcc>
   14720:	e3520000 	cmp	r2, #0
   14724:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14728:	e1a07000 	mov	r7, r0
   1472c:	e5803000 	str	r3, [r0]
   14730:	0a000014 	beq	14788 <CUSBStandardHub::~CUSBStandardHub()+0x70>
   14734:	e3a04000 	mov	r4, #0
   14738:	e1a08004 	mov	r8, r4
   1473c:	e2806020 	add	r6, r0, #32
   14740:	e2805040 	add	r5, r0, #64	; 0x40
   14744:	e4950004 	ldr	r0, [r5], #4
   14748:	e2844001 	add	r4, r4, #1
   1474c:	e3500000 	cmp	r0, #0
   14750:	0a000001 	beq	1475c <CUSBStandardHub::~CUSBStandardHub()+0x44>
   14754:	e3a01004 	mov	r1, #4
   14758:	eb005a0a 	bl	2af88 <operator delete(void*, unsigned int)>
   1475c:	e5960000 	ldr	r0, [r6]
   14760:	e5058004 	str	r8, [r5, #-4]
   14764:	e3500000 	cmp	r0, #0
   14768:	0a000002 	beq	14778 <CUSBStandardHub::~CUSBStandardHub()+0x60>
   1476c:	e5903000 	ldr	r3, [r0]
   14770:	e5933004 	ldr	r3, [r3, #4]
   14774:	e12fff33 	blx	r3
   14778:	e5973018 	ldr	r3, [r7, #24]
   1477c:	e4868004 	str	r8, [r6], #4
   14780:	e1530004 	cmp	r3, r4
   14784:	8affffee 	bhi	14744 <CUSBStandardHub::~CUSBStandardHub()+0x2c>
   14788:	e3a03000 	mov	r3, #0
   1478c:	e5974014 	ldr	r4, [r7, #20]
   14790:	e5873018 	str	r3, [r7, #24]
   14794:	e1540003 	cmp	r4, r3
   14798:	0a000004 	beq	147b0 <CUSBStandardHub::~CUSBStandardHub()+0x98>
   1479c:	e1a00004 	mov	r0, r4
   147a0:	ebffeaf4 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   147a4:	e1a00004 	mov	r0, r4
   147a8:	e3a01014 	mov	r1, #20
   147ac:	eb0059f5 	bl	2af88 <operator delete(void*, unsigned int)>
   147b0:	e3a03000 	mov	r3, #0
   147b4:	e5970010 	ldr	r0, [r7, #16]
   147b8:	e5873014 	str	r3, [r7, #20]
   147bc:	e1500003 	cmp	r0, r3
   147c0:	0a000001 	beq	147cc <CUSBStandardHub::~CUSBStandardHub()+0xb4>
   147c4:	e3a01009 	mov	r1, #9
   147c8:	eb0059ee 	bl	2af88 <operator delete(void*, unsigned int)>
   147cc:	e3a03000 	mov	r3, #0
   147d0:	e1a00007 	mov	r0, r7
   147d4:	e5873010 	str	r3, [r7, #16]
   147d8:	ebffeb53 	bl	f52c <CUSBFunction::~CUSBFunction()>
   147dc:	e1a00007 	mov	r0, r7
   147e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   147e4:	0003f67c 	.word	0x0003f67c

000147e8 <CUSBStandardHub::~CUSBStandardHub()>:
   147e8:	e92d4010 	push	{r4, lr}
   147ec:	e1a04000 	mov	r4, r0
   147f0:	ebffffc8 	bl	14718 <CUSBStandardHub::~CUSBStandardHub()>
   147f4:	e1a00004 	mov	r0, r4
   147f8:	e3a01068 	mov	r1, #104	; 0x68
   147fc:	eb0059e1 	bl	2af88 <operator delete(void*, unsigned int)>
   14800:	e1a00004 	mov	r0, r4
   14804:	e8bd8010 	pop	{r4, pc}

00014808 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
   14808:	e92d4010 	push	{r4, lr}
   1480c:	e1a04000 	mov	r4, r0
   14810:	ebffebd7 	bl	f774 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   14814:	e3a03000 	mov	r3, #0
   14818:	e59f103c 	ldr	r1, [pc, #60]	; 1485c <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x54>
   1481c:	e1a02003 	mov	r2, r3
   14820:	e5843010 	str	r3, [r4, #16]
   14824:	e5841000 	str	r1, [r4]
   14828:	e5843014 	str	r3, [r4, #20]
   1482c:	e5843018 	str	r3, [r4, #24]
   14830:	e5c4301c 	strb	r3, [r4, #28]
   14834:	e2841060 	add	r1, r4, #96	; 0x60
   14838:	e2843020 	add	r3, r4, #32
   1483c:	e2840040 	add	r0, r4, #64	; 0x40
   14840:	e4832004 	str	r2, [r3], #4
   14844:	e1530000 	cmp	r3, r0
   14848:	e583201c 	str	r2, [r3, #28]
   1484c:	e4c12001 	strb	r2, [r1], #1
   14850:	1afffffa 	bne	14840 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x38>
   14854:	e1a00004 	mov	r0, r4
   14858:	e8bd8010 	pop	{r4, pc}
   1485c:	0003f67c 	.word	0x0003f67c

00014860 <CUSBStandardHub::DisablePort(unsigned int)>:
   14860:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   14864:	e5903018 	ldr	r3, [r0, #24]
   14868:	e24dd014 	sub	sp, sp, #20
   1486c:	e1530001 	cmp	r3, r1
   14870:	9a000022 	bls	14900 <CUSBStandardHub::DisablePort(unsigned int)+0xa0>
   14874:	e1a05001 	mov	r5, r1
   14878:	e1a04000 	mov	r4, r0
   1487c:	ebffec30 	bl	f944 <CUSBFunction::GetHost() const>
   14880:	e3a06001 	mov	r6, #1
   14884:	e1a07000 	mov	r7, r0
   14888:	e1a00004 	mov	r0, r4
   1488c:	ebffec21 	bl	f918 <CUSBFunction::GetEndpoint0() const>
   14890:	e3a08000 	mov	r8, #0
   14894:	e0859006 	add	r9, r5, r6
   14898:	e6ff3079 	uxth	r3, r9
   1489c:	e1a01000 	mov	r1, r0
   148a0:	e58d3004 	str	r3, [sp, #4]
   148a4:	e1a00007 	mov	r0, r7
   148a8:	e1a03006 	mov	r3, r6
   148ac:	e3a02023 	mov	r2, #35	; 0x23
   148b0:	e58d800c 	str	r8, [sp, #12]
   148b4:	e58d8008 	str	r8, [sp, #8]
   148b8:	e58d6000 	str	r6, [sp]
   148bc:	ebfff7cc 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   148c0:	e1500008 	cmp	r0, r8
   148c4:	a0844005 	addge	r4, r4, r5
   148c8:	a1a00006 	movge	r0, r6
   148cc:	a5c48060 	strbge	r8, [r4, #96]	; 0x60
   148d0:	ba000001 	blt	148dc <CUSBStandardHub::DisablePort(unsigned int)+0x7c>
   148d4:	e28dd014 	add	sp, sp, #20
   148d8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   148dc:	eb00487c 	bl	26ad4 <CLogger::Get()>
   148e0:	e1a02006 	mov	r2, r6
   148e4:	e59f3024 	ldr	r3, [pc, #36]	; 14910 <CUSBStandardHub::DisablePort(unsigned int)+0xb0>
   148e8:	e59f1024 	ldr	r1, [pc, #36]	; 14914 <CUSBStandardHub::DisablePort(unsigned int)+0xb4>
   148ec:	e58d9000 	str	r9, [sp]
   148f0:	eb0047b9 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   148f4:	e1a00008 	mov	r0, r8
   148f8:	e28dd014 	add	sp, sp, #20
   148fc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14900:	e3a020c7 	mov	r2, #199	; 0xc7
   14904:	e59f100c 	ldr	r1, [pc, #12]	; 14918 <CUSBStandardHub::DisablePort(unsigned int)+0xb8>
   14908:	e59f000c 	ldr	r0, [pc, #12]	; 1491c <CUSBStandardHub::DisablePort(unsigned int)+0xbc>
   1490c:	eb003f88 	bl	24734 <assertion_failed>
   14910:	0003f490 	.word	0x0003f490
   14914:	0003f6a0 	.word	0x0003f6a0
   14918:	0003f464 	.word	0x0003f464
   1491c:	0003f478 	.word	0x0003f478

00014920 <CUSBStandardHub::RemoveDevice(unsigned int)>:
   14920:	e92d4070 	push	{r4, r5, r6, lr}
   14924:	e1a05000 	mov	r5, r0
   14928:	e1a04001 	mov	r4, r1
   1492c:	ebffffcb 	bl	14860 <CUSBStandardHub::DisablePort(unsigned int)>
   14930:	e2506000 	subs	r6, r0, #0
   14934:	0a000008 	beq	1495c <CUSBStandardHub::RemoveDevice(unsigned int)+0x3c>
   14938:	e0854104 	add	r4, r5, r4, lsl #2
   1493c:	e5940020 	ldr	r0, [r4, #32]
   14940:	e3500000 	cmp	r0, #0
   14944:	0a000002 	beq	14954 <CUSBStandardHub::RemoveDevice(unsigned int)+0x34>
   14948:	e5903000 	ldr	r3, [r0]
   1494c:	e5933004 	ldr	r3, [r3, #4]
   14950:	e12fff33 	blx	r3
   14954:	e3a03000 	mov	r3, #0
   14958:	e5843020 	str	r3, [r4, #32]
   1495c:	e1a00006 	mov	r0, r6
   14960:	e8bd8070 	pop	{r4, r5, r6, pc}

00014964 <CUSBStandardHub::Initialize()>:
   14964:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14968:	e24dd010 	sub	sp, sp, #16
   1496c:	e1a04000 	mov	r4, r0
   14970:	ebffeae9 	bl	f51c <CUSBFunction::Initialize()>
   14974:	e2505000 	subs	r5, r0, #0
   14978:	0a00001d 	beq	149f4 <CUSBStandardHub::Initialize()+0x90>
   1497c:	e5946010 	ldr	r6, [r4, #16]
   14980:	e3560000 	cmp	r6, #0
   14984:	1a00003a 	bne	14a74 <CUSBStandardHub::Initialize()+0x110>
   14988:	e3a00009 	mov	r0, #9
   1498c:	eb00596f 	bl	2af50 <operator new(unsigned int)>
   14990:	e1a03000 	mov	r3, r0
   14994:	e1a00004 	mov	r0, r4
   14998:	e5843010 	str	r3, [r4, #16]
   1499c:	ebffebe8 	bl	f944 <CUSBFunction::GetHost() const>
   149a0:	e1a07000 	mov	r7, r0
   149a4:	e1a00004 	mov	r0, r4
   149a8:	ebffebda 	bl	f918 <CUSBFunction::GetEndpoint0() const>
   149ac:	e3a08009 	mov	r8, #9
   149b0:	e3a0c0a0 	mov	ip, #160	; 0xa0
   149b4:	e5942010 	ldr	r2, [r4, #16]
   149b8:	e1a01000 	mov	r1, r0
   149bc:	e1a03006 	mov	r3, r6
   149c0:	e88d1104 	stm	sp, {r2, r8, ip}
   149c4:	e58d600c 	str	r6, [sp, #12]
   149c8:	e1a00007 	mov	r0, r7
   149cc:	e3a02029 	mov	r2, #41	; 0x29
   149d0:	ebfff7b9 	bl	128bc <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   149d4:	e1500008 	cmp	r0, r8
   149d8:	e1a06000 	mov	r6, r0
   149dc:	1a000007 	bne	14a00 <CUSBStandardHub::Initialize()+0x9c>
   149e0:	e5943010 	ldr	r3, [r4, #16]
   149e4:	e5d33002 	ldrb	r3, [r3, #2]
   149e8:	e3530008 	cmp	r3, #8
   149ec:	e5843018 	str	r3, [r4, #24]
   149f0:	8a000012 	bhi	14a40 <CUSBStandardHub::Initialize()+0xdc>
   149f4:	e1a00005 	mov	r0, r5
   149f8:	e28dd010 	add	sp, sp, #16
   149fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14a00:	eb004833 	bl	26ad4 <CLogger::Get()>
   14a04:	e3a02001 	mov	r2, #1
   14a08:	e59f3074 	ldr	r3, [pc, #116]	; 14a84 <CUSBStandardHub::Initialize()+0x120>
   14a0c:	e59f1074 	ldr	r1, [pc, #116]	; 14a88 <CUSBStandardHub::Initialize()+0x124>
   14a10:	eb004771 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14a14:	e5940010 	ldr	r0, [r4, #16]
   14a18:	e3500000 	cmp	r0, #0
   14a1c:	0a000001 	beq	14a28 <CUSBStandardHub::Initialize()+0xc4>
   14a20:	e1a01008 	mov	r1, r8
   14a24:	eb005957 	bl	2af88 <operator delete(void*, unsigned int)>
   14a28:	e3a00000 	mov	r0, #0
   14a2c:	e1a05000 	mov	r5, r0
   14a30:	e5840010 	str	r0, [r4, #16]
   14a34:	e1a00005 	mov	r0, r5
   14a38:	e28dd010 	add	sp, sp, #16
   14a3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14a40:	eb004823 	bl	26ad4 <CLogger::Get()>
   14a44:	e5942018 	ldr	r2, [r4, #24]
   14a48:	e59f303c 	ldr	r3, [pc, #60]	; 14a8c <CUSBStandardHub::Initialize()+0x128>
   14a4c:	e58d2000 	str	r2, [sp]
   14a50:	e59f1030 	ldr	r1, [pc, #48]	; 14a88 <CUSBStandardHub::Initialize()+0x124>
   14a54:	e3a02001 	mov	r2, #1
   14a58:	eb00475f 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14a5c:	e5940010 	ldr	r0, [r4, #16]
   14a60:	e3500000 	cmp	r0, #0
   14a64:	0affffef 	beq	14a28 <CUSBStandardHub::Initialize()+0xc4>
   14a68:	e1a01006 	mov	r1, r6
   14a6c:	eb005945 	bl	2af88 <operator delete(void*, unsigned int)>
   14a70:	eaffffec 	b	14a28 <CUSBStandardHub::Initialize()+0xc4>
   14a74:	e3a02055 	mov	r2, #85	; 0x55
   14a78:	e59f1010 	ldr	r1, [pc, #16]	; 14a90 <CUSBStandardHub::Initialize()+0x12c>
   14a7c:	e59f0010 	ldr	r0, [pc, #16]	; 14a94 <CUSBStandardHub::Initialize()+0x130>
   14a80:	eb003f2b 	bl	24734 <assertion_failed>
   14a84:	0003f4b8 	.word	0x0003f4b8
   14a88:	0003f6a0 	.word	0x0003f6a0
   14a8c:	0003f4d4 	.word	0x0003f4d4
   14a90:	0003f464 	.word	0x0003f464
   14a94:	0003f4a8 	.word	0x0003f4a8

00014a98 <CUSBStandardHub::EnumeratePorts()>:
   14a98:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a9c:	ed2d8b02 	vpush	{d8}
   14aa0:	e24dd01c 	sub	sp, sp, #28
   14aa4:	e1a0b000 	mov	fp, r0
   14aa8:	ebffeba5 	bl	f944 <CUSBFunction::GetHost() const>
   14aac:	e2504000 	subs	r4, r0, #0
   14ab0:	0a00013c 	beq	14fa8 <CUSBStandardHub::EnumeratePorts()+0x510>
   14ab4:	e1a0000b 	mov	r0, fp
   14ab8:	ebffeb96 	bl	f918 <CUSBFunction::GetEndpoint0() const>
   14abc:	e2505000 	subs	r5, r0, #0
   14ac0:	0a00013c 	beq	14fb8 <CUSBStandardHub::EnumeratePorts()+0x520>
   14ac4:	e59b3018 	ldr	r3, [fp, #24]
   14ac8:	e3530000 	cmp	r3, #0
   14acc:	0a00013d 	beq	14fc8 <CUSBStandardHub::EnumeratePorts()+0x530>
   14ad0:	e5db601c 	ldrb	r6, [fp, #28]
   14ad4:	e3560000 	cmp	r6, #0
   14ad8:	0a0000cd 	beq	14e14 <CUSBStandardHub::EnumeratePorts()+0x37c>
   14adc:	e28b3020 	add	r3, fp, #32
   14ae0:	e3a07000 	mov	r7, #0
   14ae4:	e1a06003 	mov	r6, r3
   14ae8:	e58d3014 	str	r3, [sp, #20]
   14aec:	e4960004 	ldr	r0, [r6], #4
   14af0:	e3500000 	cmp	r0, #0
   14af4:	1a0000ac 	bne	14dac <CUSBStandardHub::EnumeratePorts()+0x314>
   14af8:	e596001c 	ldr	r0, [r6, #28]
   14afc:	e3500000 	cmp	r0, #0
   14b00:	0a0000bb 	beq	14df4 <CUSBStandardHub::EnumeratePorts()+0x35c>
   14b04:	e3a03004 	mov	r3, #4
   14b08:	e58d300c 	str	r3, [sp, #12]
   14b0c:	e3a03000 	mov	r3, #0
   14b10:	e2879001 	add	r9, r7, #1
   14b14:	e6ffa079 	uxth	sl, r9
   14b18:	e58d0008 	str	r0, [sp, #8]
   14b1c:	e3a020a3 	mov	r2, #163	; 0xa3
   14b20:	e1a01005 	mov	r1, r5
   14b24:	e1a00004 	mov	r0, r4
   14b28:	e88d0408 	stm	sp, {r3, sl}
   14b2c:	ebfff730 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14b30:	e3500004 	cmp	r0, #4
   14b34:	e1a08000 	mov	r8, r0
   14b38:	1a0000a2 	bne	14dc8 <CUSBStandardHub::EnumeratePorts()+0x330>
   14b3c:	e596301c 	ldr	r3, [r6, #28]
   14b40:	e5d32001 	ldrb	r2, [r3, #1]
   14b44:	e5d33000 	ldrb	r3, [r3]
   14b48:	e3120001 	tst	r2, #1
   14b4c:	e1833402 	orr	r3, r3, r2, lsl #8
   14b50:	0a0000e5 	beq	14eec <CUSBStandardHub::EnumeratePorts()+0x454>
   14b54:	e3130001 	tst	r3, #1
   14b58:	0a000034 	beq	14c30 <CUSBStandardHub::EnumeratePorts()+0x198>
   14b5c:	e3a03000 	mov	r3, #0
   14b60:	e3a02023 	mov	r2, #35	; 0x23
   14b64:	e58d300c 	str	r3, [sp, #12]
   14b68:	e58d3008 	str	r3, [sp, #8]
   14b6c:	e1a01005 	mov	r1, r5
   14b70:	e3a03003 	mov	r3, #3
   14b74:	e1a00004 	mov	r0, r4
   14b78:	e88d0500 	stm	sp, {r8, sl}
   14b7c:	ebfff71c 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14b80:	e3500000 	cmp	r0, #0
   14b84:	ba0000cd 	blt	14ec0 <CUSBStandardHub::EnumeratePorts()+0x428>
   14b88:	eb0054b5 	bl	29e64 <CTimer::Get()>
   14b8c:	e3a00064 	mov	r0, #100	; 0x64
   14b90:	eb00547e 	bl	29d90 <CTimer::SimpleMsDelay(unsigned int)>
   14b94:	e3a03000 	mov	r3, #0
   14b98:	e58d800c 	str	r8, [sp, #12]
   14b9c:	e596201c 	ldr	r2, [r6, #28]
   14ba0:	e1a01005 	mov	r1, r5
   14ba4:	e58d2008 	str	r2, [sp, #8]
   14ba8:	e1a00004 	mov	r0, r4
   14bac:	e3a020a3 	mov	r2, #163	; 0xa3
   14bb0:	e58da004 	str	sl, [sp, #4]
   14bb4:	e58d3000 	str	r3, [sp]
   14bb8:	ebfff70d 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14bbc:	e3500004 	cmp	r0, #4
   14bc0:	1a000145 	bne	150dc <CUSBStandardHub::EnumeratePorts()+0x644>
   14bc4:	e596201c 	ldr	r2, [r6, #28]
   14bc8:	e5d23000 	ldrb	r3, [r2]
   14bcc:	e5d22001 	ldrb	r2, [r2, #1]
   14bd0:	e3130002 	tst	r3, #2
   14bd4:	e1833402 	orr	r3, r3, r2, lsl #8
   14bd8:	0a0000e7 	beq	14f7c <CUSBStandardHub::EnumeratePorts()+0x4e4>
   14bdc:	e2132008 	ands	r2, r3, #8
   14be0:	1a00013f 	bne	150e4 <CUSBStandardHub::EnumeratePorts()+0x64c>
   14be4:	e3130c02 	tst	r3, #512	; 0x200
   14be8:	11a0a002 	movne	sl, r2
   14bec:	0a000084 	beq	14e04 <CUSBStandardHub::EnumeratePorts()+0x36c>
   14bf0:	e5163004 	ldr	r3, [r6, #-4]
   14bf4:	e3530000 	cmp	r3, #0
   14bf8:	1a0000f6 	bne	14fd8 <CUSBStandardHub::EnumeratePorts()+0x540>
   14bfc:	e3a00058 	mov	r0, #88	; 0x58
   14c00:	eb0058d2 	bl	2af50 <operator new(unsigned int)>
   14c04:	e1a08000 	mov	r8, r0
   14c08:	e1a0200a 	mov	r2, sl
   14c0c:	e1a0300b 	mov	r3, fp
   14c10:	e1a01004 	mov	r1, r4
   14c14:	e58d7000 	str	r7, [sp]
   14c18:	ebffe4b8 	bl	df00 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>
   14c1c:	e1a00008 	mov	r0, r8
   14c20:	e5068004 	str	r8, [r6, #-4]
   14c24:	ebffe637 	bl	e508 <CUSBDevice::Initialize()>
   14c28:	e3500000 	cmp	r0, #0
   14c2c:	0a000096 	beq	14e8c <CUSBStandardHub::EnumeratePorts()+0x3f4>
   14c30:	e59b3018 	ldr	r3, [fp, #24]
   14c34:	e1a07009 	mov	r7, r9
   14c38:	e1530009 	cmp	r3, r9
   14c3c:	8affffaa 	bhi	14aec <CUSBStandardHub::EnumeratePorts()+0x54>
   14c40:	e3530000 	cmp	r3, #0
   14c44:	0a000027 	beq	14ce8 <CUSBStandardHub::EnumeratePorts()+0x250>
   14c48:	e3e0805e 	mvn	r8, #94	; 0x5e
   14c4c:	e048800b 	sub	r8, r8, fp
   14c50:	ee084a10 	vmov	s16, r4
   14c54:	e28b6060 	add	r6, fp, #96	; 0x60
   14c58:	e1a0400b 	mov	r4, fp
   14c5c:	e59fa4d4 	ldr	sl, [pc, #1236]	; 15138 <CUSBStandardHub::EnumeratePorts()+0x6a0>
   14c60:	e1a0b008 	mov	fp, r8
   14c64:	e59f94d0 	ldr	r9, [pc, #1232]	; 1513c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14c68:	e59d8014 	ldr	r8, [sp, #20]
   14c6c:	ea000011 	b	14cb8 <CUSBStandardHub::EnumeratePorts()+0x220>
   14c70:	e3a02001 	mov	r2, #1
   14c74:	e5903000 	ldr	r3, [r0]
   14c78:	e5c62000 	strb	r2, [r6]
   14c7c:	e593300c 	ldr	r3, [r3, #12]
   14c80:	e12fff33 	blx	r3
   14c84:	e3500000 	cmp	r0, #0
   14c88:	e08b7006 	add	r7, fp, r6
   14c8c:	0a00009a 	beq	14efc <CUSBStandardHub::EnumeratePorts()+0x464>
   14c90:	eb00478f 	bl	26ad4 <CLogger::Get()>
   14c94:	e1a0300a 	mov	r3, sl
   14c98:	e3a02004 	mov	r2, #4
   14c9c:	e1a01009 	mov	r1, r9
   14ca0:	e58d7000 	str	r7, [sp]
   14ca4:	eb0046cc 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ca8:	e5943018 	ldr	r3, [r4, #24]
   14cac:	e1570003 	cmp	r7, r3
   14cb0:	e2866001 	add	r6, r6, #1
   14cb4:	2a000009 	bcs	14ce0 <CUSBStandardHub::EnumeratePorts()+0x248>
   14cb8:	e4980004 	ldr	r0, [r8], #4
   14cbc:	e3500000 	cmp	r0, #0
   14cc0:	0a000002 	beq	14cd0 <CUSBStandardHub::EnumeratePorts()+0x238>
   14cc4:	e5d62000 	ldrb	r2, [r6]
   14cc8:	e3520000 	cmp	r2, #0
   14ccc:	0affffe7 	beq	14c70 <CUSBStandardHub::EnumeratePorts()+0x1d8>
   14cd0:	e08b7006 	add	r7, fp, r6
   14cd4:	e1570003 	cmp	r7, r3
   14cd8:	e2866001 	add	r6, r6, #1
   14cdc:	3afffff5 	bcc	14cb8 <CUSBStandardHub::EnumeratePorts()+0x220>
   14ce0:	e1a0b004 	mov	fp, r4
   14ce4:	ee184a10 	vmov	r4, s16
   14ce8:	e3a00004 	mov	r0, #4
   14cec:	eb005897 	bl	2af50 <operator new(unsigned int)>
   14cf0:	e3a06000 	mov	r6, #0
   14cf4:	e3a07004 	mov	r7, #4
   14cf8:	e58d0008 	str	r0, [sp, #8]
   14cfc:	e1a08000 	mov	r8, r0
   14d00:	e1a03006 	mov	r3, r6
   14d04:	e3a020a0 	mov	r2, #160	; 0xa0
   14d08:	e1a01005 	mov	r1, r5
   14d0c:	e1a00004 	mov	r0, r4
   14d10:	e58d700c 	str	r7, [sp, #12]
   14d14:	e58d6004 	str	r6, [sp, #4]
   14d18:	e58d6000 	str	r6, [sp]
   14d1c:	ebfff6b4 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14d20:	e1500007 	cmp	r0, r7
   14d24:	e1a09000 	mov	r9, r0
   14d28:	1a0000ae 	bne	14fe8 <CUSBStandardHub::EnumeratePorts()+0x550>
   14d2c:	e5d83000 	ldrb	r3, [r8]
   14d30:	e3130002 	tst	r3, #2
   14d34:	0a0000b4 	beq	1500c <CUSBStandardHub::EnumeratePorts()+0x574>
   14d38:	e59b3018 	ldr	r3, [fp, #24]
   14d3c:	e3530000 	cmp	r3, #0
   14d40:	13a07001 	movne	r7, #1
   14d44:	13a09008 	movne	r9, #8
   14d48:	0a00000d 	beq	14d84 <CUSBStandardHub::EnumeratePorts()+0x2ec>
   14d4c:	e6ff3077 	uxth	r3, r7
   14d50:	e3a02023 	mov	r2, #35	; 0x23
   14d54:	e58d3004 	str	r3, [sp, #4]
   14d58:	e1a01005 	mov	r1, r5
   14d5c:	e3a03001 	mov	r3, #1
   14d60:	e1a00004 	mov	r0, r4
   14d64:	e58d600c 	str	r6, [sp, #12]
   14d68:	e58d6008 	str	r6, [sp, #8]
   14d6c:	e58d9000 	str	r9, [sp]
   14d70:	ebfff69f 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14d74:	e59b2018 	ldr	r2, [fp, #24]
   14d78:	e1570002 	cmp	r7, r2
   14d7c:	e2877001 	add	r7, r7, #1
   14d80:	3afffff1 	bcc	14d4c <CUSBStandardHub::EnumeratePorts()+0x2b4>
   14d84:	eb004752 	bl	26ad4 <CLogger::Get()>
   14d88:	e3a02001 	mov	r2, #1
   14d8c:	e59f33ac 	ldr	r3, [pc, #940]	; 15140 <CUSBStandardHub::EnumeratePorts()+0x6a8>
   14d90:	e59f13a4 	ldr	r1, [pc, #932]	; 1513c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14d94:	eb004690 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14d98:	e1a00008 	mov	r0, r8
   14d9c:	e3a01004 	mov	r1, #4
   14da0:	eb005878 	bl	2af88 <operator delete(void*, unsigned int)>
   14da4:	e3a06000 	mov	r6, #0
   14da8:	ea000033 	b	14e7c <CUSBStandardHub::EnumeratePorts()+0x3e4>
   14dac:	ebffe4ab 	bl	e060 <CUSBDevice::ReScanDevices()>
   14db0:	e59b3018 	ldr	r3, [fp, #24]
   14db4:	e2879001 	add	r9, r7, #1
   14db8:	e1530009 	cmp	r3, r9
   14dbc:	e1a07009 	mov	r7, r9
   14dc0:	8affff49 	bhi	14aec <CUSBStandardHub::EnumeratePorts()+0x54>
   14dc4:	eaffff9d 	b	14c40 <CUSBStandardHub::EnumeratePorts()+0x1a8>
   14dc8:	eb004741 	bl	26ad4 <CLogger::Get()>
   14dcc:	e59f3370 	ldr	r3, [pc, #880]	; 15144 <CUSBStandardHub::EnumeratePorts()+0x6ac>
   14dd0:	e3a02001 	mov	r2, #1
   14dd4:	e59f1360 	ldr	r1, [pc, #864]	; 1513c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14dd8:	e58d9000 	str	r9, [sp]
   14ddc:	eb00467e 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14de0:	e59b3018 	ldr	r3, [fp, #24]
   14de4:	e1a07009 	mov	r7, r9
   14de8:	e1530009 	cmp	r3, r9
   14dec:	8affff3e 	bhi	14aec <CUSBStandardHub::EnumeratePorts()+0x54>
   14df0:	eaffff92 	b	14c40 <CUSBStandardHub::EnumeratePorts()+0x1a8>
   14df4:	e3a00004 	mov	r0, #4
   14df8:	eb005854 	bl	2af50 <operator new(unsigned int)>
   14dfc:	e586001c 	str	r0, [r6, #28]
   14e00:	eaffff3f 	b	14b04 <CUSBStandardHub::EnumeratePorts()+0x6c>
   14e04:	e3130b01 	tst	r3, #1024	; 0x400
   14e08:	13a0a002 	movne	sl, #2
   14e0c:	03a0a001 	moveq	sl, #1
   14e10:	eaffff76 	b	14bf0 <CUSBStandardHub::EnumeratePorts()+0x158>
   14e14:	e1a08006 	mov	r8, r6
   14e18:	e3a09008 	mov	r9, #8
   14e1c:	e1a07006 	mov	r7, r6
   14e20:	ea000002 	b	14e30 <CUSBStandardHub::EnumeratePorts()+0x398>
   14e24:	e59b3018 	ldr	r3, [fp, #24]
   14e28:	e1530007 	cmp	r3, r7
   14e2c:	9a000042 	bls	14f3c <CUSBStandardHub::EnumeratePorts()+0x4a4>
   14e30:	e2877001 	add	r7, r7, #1
   14e34:	e6ff3077 	uxth	r3, r7
   14e38:	e58d3004 	str	r3, [sp, #4]
   14e3c:	e3a02023 	mov	r2, #35	; 0x23
   14e40:	e3a03003 	mov	r3, #3
   14e44:	e1a01005 	mov	r1, r5
   14e48:	e1a00004 	mov	r0, r4
   14e4c:	e58d800c 	str	r8, [sp, #12]
   14e50:	e58d8008 	str	r8, [sp, #8]
   14e54:	e58d9000 	str	r9, [sp]
   14e58:	ebfff665 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14e5c:	e3500000 	cmp	r0, #0
   14e60:	aaffffef 	bge	14e24 <CUSBStandardHub::EnumeratePorts()+0x38c>
   14e64:	eb00471a 	bl	26ad4 <CLogger::Get()>
   14e68:	e3a02001 	mov	r2, #1
   14e6c:	e59f32d4 	ldr	r3, [pc, #724]	; 15148 <CUSBStandardHub::EnumeratePorts()+0x6b0>
   14e70:	e59f12c4 	ldr	r1, [pc, #708]	; 1513c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14e74:	e58d7000 	str	r7, [sp]
   14e78:	eb004657 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14e7c:	e1a00006 	mov	r0, r6
   14e80:	e28dd01c 	add	sp, sp, #28
   14e84:	ecbd8b02 	vpop	{d8}
   14e88:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e8c:	e5160004 	ldr	r0, [r6, #-4]
   14e90:	e3500000 	cmp	r0, #0
   14e94:	0a000002 	beq	14ea4 <CUSBStandardHub::EnumeratePorts()+0x40c>
   14e98:	e5903000 	ldr	r3, [r0]
   14e9c:	e5933004 	ldr	r3, [r3, #4]
   14ea0:	e12fff33 	blx	r3
   14ea4:	e3a03000 	mov	r3, #0
   14ea8:	e5063004 	str	r3, [r6, #-4]
   14eac:	e59b3018 	ldr	r3, [fp, #24]
   14eb0:	e1a07009 	mov	r7, r9
   14eb4:	e1530009 	cmp	r3, r9
   14eb8:	8affff0b 	bhi	14aec <CUSBStandardHub::EnumeratePorts()+0x54>
   14ebc:	eaffff5f 	b	14c40 <CUSBStandardHub::EnumeratePorts()+0x1a8>
   14ec0:	eb004703 	bl	26ad4 <CLogger::Get()>
   14ec4:	e59f3280 	ldr	r3, [pc, #640]	; 1514c <CUSBStandardHub::EnumeratePorts()+0x6b4>
   14ec8:	e3a02001 	mov	r2, #1
   14ecc:	e59f1268 	ldr	r1, [pc, #616]	; 1513c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14ed0:	e58d9000 	str	r9, [sp]
   14ed4:	eb004640 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ed8:	e59b3018 	ldr	r3, [fp, #24]
   14edc:	e1a07009 	mov	r7, r9
   14ee0:	e1530009 	cmp	r3, r9
   14ee4:	8affff00 	bhi	14aec <CUSBStandardHub::EnumeratePorts()+0x54>
   14ee8:	eaffff54 	b	14c40 <CUSBStandardHub::EnumeratePorts()+0x1a8>
   14eec:	e59f225c 	ldr	r2, [pc, #604]	; 15150 <CUSBStandardHub::EnumeratePorts()+0x6b8>
   14ef0:	e59f125c 	ldr	r1, [pc, #604]	; 15154 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   14ef4:	e59f025c 	ldr	r0, [pc, #604]	; 15158 <CUSBStandardHub::EnumeratePorts()+0x6c0>
   14ef8:	eb003e0d 	bl	24734 <assertion_failed>
   14efc:	eb0046f4 	bl	26ad4 <CLogger::Get()>
   14f00:	e3a02002 	mov	r2, #2
   14f04:	e1a01009 	mov	r1, r9
   14f08:	e59f324c 	ldr	r3, [pc, #588]	; 1515c <CUSBStandardHub::EnumeratePorts()+0x6c4>
   14f0c:	e58d7000 	str	r7, [sp]
   14f10:	eb004631 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14f14:	e5180004 	ldr	r0, [r8, #-4]
   14f18:	e3500000 	cmp	r0, #0
   14f1c:	0a000002 	beq	14f2c <CUSBStandardHub::EnumeratePorts()+0x494>
   14f20:	e5903000 	ldr	r3, [r0]
   14f24:	e5933004 	ldr	r3, [r3, #4]
   14f28:	e12fff33 	blx	r3
   14f2c:	e3a03000 	mov	r3, #0
   14f30:	e5083004 	str	r3, [r8, #-4]
   14f34:	e5943018 	ldr	r3, [r4, #24]
   14f38:	eaffff5b 	b	14cac <CUSBStandardHub::EnumeratePorts()+0x214>
   14f3c:	e3a03001 	mov	r3, #1
   14f40:	e5cb301c 	strb	r3, [fp, #28]
   14f44:	eb0044a4 	bl	261dc <CKernelOptions::Get()>
   14f48:	e3500000 	cmp	r0, #0
   14f4c:	0a000002 	beq	14f5c <CUSBStandardHub::EnumeratePorts()+0x4c4>
   14f50:	eb004494 	bl	261a8 <CKernelOptions::GetUSBPowerDelay() const>
   14f54:	e2506000 	subs	r6, r0, #0
   14f58:	1a000000 	bne	14f60 <CUSBStandardHub::EnumeratePorts()+0x4c8>
   14f5c:	e59f61fc 	ldr	r6, [pc, #508]	; 15160 <CUSBStandardHub::EnumeratePorts()+0x6c8>
   14f60:	eb0053bf 	bl	29e64 <CTimer::Get()>
   14f64:	e1a00006 	mov	r0, r6
   14f68:	eb005388 	bl	29d90 <CTimer::SimpleMsDelay(unsigned int)>
   14f6c:	e59b3018 	ldr	r3, [fp, #24]
   14f70:	e3530000 	cmp	r3, #0
   14f74:	1afffed8 	bne	14adc <CUSBStandardHub::EnumeratePorts()+0x44>
   14f78:	eaffff5a 	b	14ce8 <CUSBStandardHub::EnumeratePorts()+0x250>
   14f7c:	eb0046d4 	bl	26ad4 <CLogger::Get()>
   14f80:	e59f31dc 	ldr	r3, [pc, #476]	; 15164 <CUSBStandardHub::EnumeratePorts()+0x6cc>
   14f84:	e3a02001 	mov	r2, #1
   14f88:	e59f11ac 	ldr	r1, [pc, #428]	; 1513c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14f8c:	e58d9000 	str	r9, [sp]
   14f90:	eb004611 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14f94:	e59b3018 	ldr	r3, [fp, #24]
   14f98:	e1a07009 	mov	r7, r9
   14f9c:	e1530009 	cmp	r3, r9
   14fa0:	8afffed1 	bhi	14aec <CUSBStandardHub::EnumeratePorts()+0x54>
   14fa4:	eaffff25 	b	14c40 <CUSBStandardHub::EnumeratePorts()+0x1a8>
   14fa8:	e3a020e3 	mov	r2, #227	; 0xe3
   14fac:	e59f11a0 	ldr	r1, [pc, #416]	; 15154 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   14fb0:	e59f01b0 	ldr	r0, [pc, #432]	; 15168 <CUSBStandardHub::EnumeratePorts()+0x6d0>
   14fb4:	eb003dde 	bl	24734 <assertion_failed>
   14fb8:	e3a020e6 	mov	r2, #230	; 0xe6
   14fbc:	e59f1190 	ldr	r1, [pc, #400]	; 15154 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   14fc0:	e59f01a4 	ldr	r0, [pc, #420]	; 1516c <CUSBStandardHub::EnumeratePorts()+0x6d4>
   14fc4:	eb003dda 	bl	24734 <assertion_failed>
   14fc8:	e3a020e8 	mov	r2, #232	; 0xe8
   14fcc:	e59f1180 	ldr	r1, [pc, #384]	; 15154 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   14fd0:	e59f0198 	ldr	r0, [pc, #408]	; 15170 <CUSBStandardHub::EnumeratePorts()+0x6d8>
   14fd4:	eb003dd6 	bl	24734 <assertion_failed>
   14fd8:	e59f2194 	ldr	r2, [pc, #404]	; 15174 <CUSBStandardHub::EnumeratePorts()+0x6dc>
   14fdc:	e59f1170 	ldr	r1, [pc, #368]	; 15154 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   14fe0:	e59f0190 	ldr	r0, [pc, #400]	; 15178 <CUSBStandardHub::EnumeratePorts()+0x6e0>
   14fe4:	eb003dd2 	bl	24734 <assertion_failed>
   14fe8:	eb0046b9 	bl	26ad4 <CLogger::Get()>
   14fec:	e3a02001 	mov	r2, #1
   14ff0:	e59f3184 	ldr	r3, [pc, #388]	; 1517c <CUSBStandardHub::EnumeratePorts()+0x6e4>
   14ff4:	e59f1140 	ldr	r1, [pc, #320]	; 1513c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14ff8:	eb0045f7 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ffc:	e1a01007 	mov	r1, r7
   15000:	e1a00008 	mov	r0, r8
   15004:	eb0057df 	bl	2af88 <operator delete(void*, unsigned int)>
   15008:	eaffff9b 	b	14e7c <CUSBStandardHub::EnumeratePorts()+0x3e4>
   1500c:	e1a00008 	mov	r0, r8
   15010:	e1a01009 	mov	r1, r9
   15014:	eb0057db 	bl	2af88 <operator delete(void*, unsigned int)>
   15018:	e59b3018 	ldr	r3, [fp, #24]
   1501c:	e3530000 	cmp	r3, #0
   15020:	0a000042 	beq	15130 <CUSBStandardHub::EnumeratePorts()+0x698>
   15024:	e3a07001 	mov	r7, #1
   15028:	e58d9014 	str	r9, [sp, #20]
   1502c:	e1a06007 	mov	r6, r7
   15030:	e28b9040 	add	r9, fp, #64	; 0x40
   15034:	ea000004 	b	1504c <CUSBStandardHub::EnumeratePorts()+0x5b4>
   15038:	e59b3018 	ldr	r3, [fp, #24]
   1503c:	e2872001 	add	r2, r7, #1
   15040:	e1530007 	cmp	r3, r7
   15044:	9affff8c 	bls	14e7c <CUSBStandardHub::EnumeratePorts()+0x3e4>
   15048:	e1a07002 	mov	r7, r2
   1504c:	e3a08000 	mov	r8, #0
   15050:	e4992004 	ldr	r2, [r9], #4
   15054:	e59d3014 	ldr	r3, [sp, #20]
   15058:	e6ffa077 	uxth	sl, r7
   1505c:	e58d300c 	str	r3, [sp, #12]
   15060:	e58d2008 	str	r2, [sp, #8]
   15064:	e1a03008 	mov	r3, r8
   15068:	e3a020a3 	mov	r2, #163	; 0xa3
   1506c:	e1a01005 	mov	r1, r5
   15070:	e1a00004 	mov	r0, r4
   15074:	e58d8000 	str	r8, [sp]
   15078:	e58da004 	str	sl, [sp, #4]
   1507c:	ebfff5dc 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15080:	e3500004 	cmp	r0, #4
   15084:	1affffeb 	bne	15038 <CUSBStandardHub::EnumeratePorts()+0x5a0>
   15088:	e5193004 	ldr	r3, [r9, #-4]
   1508c:	e5d33000 	ldrb	r3, [r3]
   15090:	e3130008 	tst	r3, #8
   15094:	0affffe7 	beq	15038 <CUSBStandardHub::EnumeratePorts()+0x5a0>
   15098:	e3a03008 	mov	r3, #8
   1509c:	e1a01005 	mov	r1, r5
   150a0:	e3a02023 	mov	r2, #35	; 0x23
   150a4:	e88d0408 	stm	sp, {r3, sl}
   150a8:	e1a00004 	mov	r0, r4
   150ac:	e3a03001 	mov	r3, #1
   150b0:	e58d800c 	str	r8, [sp, #12]
   150b4:	e58d8008 	str	r8, [sp, #8]
   150b8:	ebfff5cd 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   150bc:	eb004684 	bl	26ad4 <CLogger::Get()>
   150c0:	e3a02001 	mov	r2, #1
   150c4:	e59f30b4 	ldr	r3, [pc, #180]	; 15180 <CUSBStandardHub::EnumeratePorts()+0x6e8>
   150c8:	e59f106c 	ldr	r1, [pc, #108]	; 1513c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   150cc:	e58d7000 	str	r7, [sp]
   150d0:	e1a06008 	mov	r6, r8
   150d4:	eb0045c0 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   150d8:	eaffffd6 	b	15038 <CUSBStandardHub::EnumeratePorts()+0x5a0>
   150dc:	e3a06000 	mov	r6, #0
   150e0:	eaffff65 	b	14e7c <CUSBStandardHub::EnumeratePorts()+0x3e4>
   150e4:	e3a02000 	mov	r2, #0
   150e8:	e3a03008 	mov	r3, #8
   150ec:	e1a01005 	mov	r1, r5
   150f0:	e58d200c 	str	r2, [sp, #12]
   150f4:	e58d2008 	str	r2, [sp, #8]
   150f8:	e58d3000 	str	r3, [sp]
   150fc:	e3a02023 	mov	r2, #35	; 0x23
   15100:	e3a03001 	mov	r3, #1
   15104:	e1a00004 	mov	r0, r4
   15108:	e58da004 	str	sl, [sp, #4]
   1510c:	ebfff5b8 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15110:	eb00466f 	bl	26ad4 <CLogger::Get()>
   15114:	e3a02001 	mov	r2, #1
   15118:	e59f3060 	ldr	r3, [pc, #96]	; 15180 <CUSBStandardHub::EnumeratePorts()+0x6e8>
   1511c:	e59f1018 	ldr	r1, [pc, #24]	; 1513c <CUSBStandardHub::EnumeratePorts()+0x6a4>
   15120:	e58d9000 	str	r9, [sp]
   15124:	eb0045ac 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15128:	e3a06000 	mov	r6, #0
   1512c:	eaffff52 	b	14e7c <CUSBStandardHub::EnumeratePorts()+0x3e4>
   15130:	e3a06001 	mov	r6, #1
   15134:	eaffff50 	b	14e7c <CUSBStandardHub::EnumeratePorts()+0x3e4>
   15138:	0003f604 	.word	0x0003f604
   1513c:	0003f6a0 	.word	0x0003f6a0
   15140:	0003f638 	.word	0x0003f638
   15144:	0003f520 	.word	0x0003f520
   15148:	0003f508 	.word	0x0003f508
   1514c:	0003f574 	.word	0x0003f574
   15150:	00000125 	.word	0x00000125
   15154:	0003f464 	.word	0x0003f464
   15158:	0003f540 	.word	0x0003f540
   1515c:	0003f5e0 	.word	0x0003f5e0
   15160:	000001fe 	.word	0x000001fe
   15164:	0003f58c 	.word	0x0003f58c
   15168:	0003ef50 	.word	0x0003ef50
   1516c:	0003f4e8 	.word	0x0003f4e8
   15170:	0003f4f8 	.word	0x0003f4f8
   15174:	00000162 	.word	0x00000162
   15178:	0003f5c8 	.word	0x0003f5c8
   1517c:	0003f620 	.word	0x0003f620
   15180:	0003f5a4 	.word	0x0003f5a4

00015184 <CUSBStandardHub::ReScanDevices()>:
   15184:	eafffe43 	b	14a98 <CUSBStandardHub::EnumeratePorts()>

00015188 <CUSBStandardHub::Configure()>:
   15188:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1518c:	e24dd01c 	sub	sp, sp, #28
   15190:	e1a04000 	mov	r4, r0
   15194:	ebffe9c9 	bl	f8c0 <CUSBFunction::GetNumEndpoints() const>
   15198:	e3500001 	cmp	r0, #1
   1519c:	1a00000c 	bne	151d4 <CUSBStandardHub::Configure()+0x4c>
   151a0:	e1a05000 	mov	r5, r0
   151a4:	e3a01005 	mov	r1, #5
   151a8:	e1a00004 	mov	r0, r4
   151ac:	ebffe9ef 	bl	f970 <CUSBFunction::GetDescriptor(unsigned char)>
   151b0:	e2506000 	subs	r6, r0, #0
   151b4:	0a000006 	beq	151d4 <CUSBStandardHub::Configure()+0x4c>
   151b8:	e1d630d2 	ldrsb	r3, [r6, #2]
   151bc:	e3530000 	cmp	r3, #0
   151c0:	aa000003 	bge	151d4 <CUSBStandardHub::Configure()+0x4c>
   151c4:	e5d63003 	ldrb	r3, [r6, #3]
   151c8:	e203303f 	and	r3, r3, #63	; 0x3f
   151cc:	e3530003 	cmp	r3, #3
   151d0:	0a000006 	beq	151f0 <CUSBStandardHub::Configure()+0x68>
   151d4:	e1a00004 	mov	r0, r4
   151d8:	e59f10e0 	ldr	r1, [pc, #224]	; 152c0 <CUSBStandardHub::Configure()+0x138>
   151dc:	ebffe9ee 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   151e0:	e3a06000 	mov	r6, #0
   151e4:	e1a00006 	mov	r0, r6
   151e8:	e28dd01c 	add	sp, sp, #28
   151ec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   151f0:	e1a00004 	mov	r0, r4
   151f4:	ebffe9bd 	bl	f8f0 <CUSBFunction::GetDevice() const>
   151f8:	e1a01000 	mov	r1, r0
   151fc:	e3a00014 	mov	r0, #20
   15200:	e58d1004 	str	r1, [sp, #4]
   15204:	eb005751 	bl	2af50 <operator new(unsigned int)>
   15208:	e1a07000 	mov	r7, r0
   1520c:	e1a02006 	mov	r2, r6
   15210:	e59d1004 	ldr	r1, [sp, #4]
   15214:	ebffe7f3 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15218:	e1a00004 	mov	r0, r4
   1521c:	e5847014 	str	r7, [r4, #20]
   15220:	ebffe8ea 	bl	f5d0 <CUSBFunction::Configure()>
   15224:	e2506000 	subs	r6, r0, #0
   15228:	0a00001e 	beq	152a8 <CUSBStandardHub::Configure()+0x120>
   1522c:	e28d0008 	add	r0, sp, #8
   15230:	eb004a17 	bl	27a94 <CString::CString()>
   15234:	e59f3088 	ldr	r3, [pc, #136]	; 152c4 <CUSBStandardHub::Configure()+0x13c>
   15238:	e59f1088 	ldr	r1, [pc, #136]	; 152c8 <CUSBStandardHub::Configure()+0x140>
   1523c:	e5932000 	ldr	r2, [r3]
   15240:	e28d0008 	add	r0, sp, #8
   15244:	e282c001 	add	ip, r2, #1
   15248:	e583c000 	str	ip, [r3]
   1524c:	eb004f5a 	bl	28fbc <CString::Format(char const*, ...)>
   15250:	eb003ff9 	bl	2523c <CDeviceNameService::Get()>
   15254:	e1a06000 	mov	r6, r0
   15258:	e28d0008 	add	r0, sp, #8
   1525c:	eb004a24 	bl	27af4 <CString::operator char const*() const>
   15260:	e3a03000 	mov	r3, #0
   15264:	e1a01000 	mov	r1, r0
   15268:	e1a02004 	mov	r2, r4
   1526c:	e1a00006 	mov	r0, r6
   15270:	eb003f41 	bl	24f7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   15274:	e1a00004 	mov	r0, r4
   15278:	ebfffe06 	bl	14a98 <CUSBStandardHub::EnumeratePorts()>
   1527c:	e2506000 	subs	r6, r0, #0
   15280:	0a000002 	beq	15290 <CUSBStandardHub::Configure()+0x108>
   15284:	e28d0008 	add	r0, sp, #8
   15288:	eb0049ce 	bl	279c8 <CString::~CString()>
   1528c:	eaffffd4 	b	151e4 <CUSBStandardHub::Configure()+0x5c>
   15290:	eb00460f 	bl	26ad4 <CLogger::Get()>
   15294:	e1a02005 	mov	r2, r5
   15298:	e59f302c 	ldr	r3, [pc, #44]	; 152cc <CUSBStandardHub::Configure()+0x144>
   1529c:	e59f101c 	ldr	r1, [pc, #28]	; 152c0 <CUSBStandardHub::Configure()+0x138>
   152a0:	eb00454d 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   152a4:	eafffff6 	b	15284 <CUSBStandardHub::Configure()+0xfc>
   152a8:	eb004609 	bl	26ad4 <CLogger::Get()>
   152ac:	e1a02005 	mov	r2, r5
   152b0:	e59f3018 	ldr	r3, [pc, #24]	; 152d0 <CUSBStandardHub::Configure()+0x148>
   152b4:	e59f1004 	ldr	r1, [pc, #4]	; 152c0 <CUSBStandardHub::Configure()+0x138>
   152b8:	eb004547 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   152bc:	eaffffc8 	b	151e4 <CUSBStandardHub::Configure()+0x5c>
   152c0:	0003f6a0 	.word	0x0003f6a0
   152c4:	000461e8 	.word	0x000461e8
   152c8:	0003f654 	.word	0x0003f654
   152cc:	0003f65c 	.word	0x0003f65c
   152d0:	0003e6b8 	.word	0x0003e6b8

000152d4 <CLAN7800Device::GetMACAddress() const>:
   152d4:	e280001c 	add	r0, r0, #28
   152d8:	e12fff1e 	bx	lr

000152dc <CLAN7800Device::~CLAN7800Device()>:
   152dc:	e92d4070 	push	{r4, r5, r6, lr}
   152e0:	e59f3074 	ldr	r3, [pc, #116]	; 1535c <CLAN7800Device::~CLAN7800Device()+0x80>
   152e4:	e5905018 	ldr	r5, [r0, #24]
   152e8:	e2832040 	add	r2, r3, #64	; 0x40
   152ec:	e3550000 	cmp	r5, #0
   152f0:	e1a04000 	mov	r4, r0
   152f4:	e5803000 	str	r3, [r0]
   152f8:	e5802010 	str	r2, [r0, #16]
   152fc:	0a000004 	beq	15314 <CLAN7800Device::~CLAN7800Device()+0x38>
   15300:	e1a00005 	mov	r0, r5
   15304:	ebffe81b 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   15308:	e1a00005 	mov	r0, r5
   1530c:	e3a01014 	mov	r1, #20
   15310:	eb00571c 	bl	2af88 <operator delete(void*, unsigned int)>
   15314:	e3a03000 	mov	r3, #0
   15318:	e5945014 	ldr	r5, [r4, #20]
   1531c:	e5843018 	str	r3, [r4, #24]
   15320:	e1550003 	cmp	r5, r3
   15324:	0a000004 	beq	1533c <CLAN7800Device::~CLAN7800Device()+0x60>
   15328:	e1a00005 	mov	r0, r5
   1532c:	ebffe811 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   15330:	e1a00005 	mov	r0, r5
   15334:	e3a01014 	mov	r1, #20
   15338:	eb005712 	bl	2af88 <operator delete(void*, unsigned int)>
   1533c:	e3a03000 	mov	r3, #0
   15340:	e284001c 	add	r0, r4, #28
   15344:	e5843014 	str	r3, [r4, #20]
   15348:	eb00561e 	bl	2abc8 <CMACAddress::~CMACAddress()>
   1534c:	e1a00004 	mov	r0, r4
   15350:	ebffe875 	bl	f52c <CUSBFunction::~CUSBFunction()>
   15354:	e1a00004 	mov	r0, r4
   15358:	e8bd8070 	pop	{r4, r5, r6, pc}
   1535c:	0003f85c 	.word	0x0003f85c

00015360 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   15360:	e2400010 	sub	r0, r0, #16
   15364:	eaffffdc 	b	152dc <CLAN7800Device::~CLAN7800Device()>

00015368 <CLAN7800Device::~CLAN7800Device()>:
   15368:	e92d4010 	push	{r4, lr}
   1536c:	e1a04000 	mov	r4, r0
   15370:	ebffffd9 	bl	152dc <CLAN7800Device::~CLAN7800Device()>
   15374:	e1a00004 	mov	r0, r4
   15378:	e3a01024 	mov	r1, #36	; 0x24
   1537c:	eb005701 	bl	2af88 <operator delete(void*, unsigned int)>
   15380:	e1a00004 	mov	r0, r4
   15384:	e8bd8010 	pop	{r4, pc}

00015388 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   15388:	e2400010 	sub	r0, r0, #16
   1538c:	eafffff5 	b	15368 <CLAN7800Device::~CLAN7800Device()>

00015390 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   15390:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15394:	e5903014 	ldr	r3, [r0, #20]
   15398:	e24dd030 	sub	sp, sp, #48	; 0x30
   1539c:	e3530000 	cmp	r3, #0
   153a0:	0a000034 	beq	15478 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xe8>
   153a4:	e3510000 	cmp	r1, #0
   153a8:	e1a04001 	mov	r4, r1
   153ac:	0a000035 	beq	15488 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xf8>
   153b0:	e3a07000 	mov	r7, #0
   153b4:	e1a05000 	mov	r5, r0
   153b8:	e1a01003 	mov	r1, r3
   153bc:	e1a06002 	mov	r6, r2
   153c0:	e3a03d19 	mov	r3, #1600	; 0x640
   153c4:	e1a02004 	mov	r2, r4
   153c8:	e58d7000 	str	r7, [sp]
   153cc:	e28d0008 	add	r0, sp, #8
   153d0:	ebfffbf1 	bl	1439c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   153d4:	e1a00005 	mov	r0, r5
   153d8:	ebffe959 	bl	f944 <CUSBFunction::GetHost() const>
   153dc:	e5903000 	ldr	r3, [r0]
   153e0:	e1a02007 	mov	r2, r7
   153e4:	e5933008 	ldr	r3, [r3, #8]
   153e8:	e28d1008 	add	r1, sp, #8
   153ec:	e12fff33 	blx	r3
   153f0:	e2505000 	subs	r5, r0, #0
   153f4:	1a000005 	bne	15410 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x80>
   153f8:	e3a05000 	mov	r5, #0
   153fc:	e28d0008 	add	r0, sp, #8
   15400:	ebfffc05 	bl	1441c <CUSBRequest::~CUSBRequest()>
   15404:	e1a00005 	mov	r0, r5
   15408:	e28dd030 	add	sp, sp, #48	; 0x30
   1540c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15410:	e28d0008 	add	r0, sp, #8
   15414:	ebfffc11 	bl	14460 <CUSBRequest::GetResultLength() const>
   15418:	e3500009 	cmp	r0, #9
   1541c:	9afffff5 	bls	153f8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x68>
   15420:	e5948000 	ldr	r8, [r4]
   15424:	e3180501 	tst	r8, #4194304	; 0x400000
   15428:	1a00001a 	bne	15498 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x108>
   1542c:	e1a03908 	lsl	r3, r8, #18
   15430:	e1a03923 	lsr	r3, r3, #18
   15434:	e240200a 	sub	r2, r0, #10
   15438:	e1520003 	cmp	r2, r3
   1543c:	1a00001d 	bne	154b8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x128>
   15440:	e3520004 	cmp	r2, #4
   15444:	9a00001f 	bls	154c8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x138>
   15448:	e240700e 	sub	r7, r0, #14
   1544c:	e1a02007 	mov	r2, r7
   15450:	e1a00004 	mov	r0, r4
   15454:	e284100a 	add	r1, r4, #10
   15458:	eb0054d6 	bl	2a7b8 <memcpy>
   1545c:	e3560000 	cmp	r6, #0
   15460:	15867000 	strne	r7, [r6]
   15464:	1affffe4 	bne	153fc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   15468:	e59f2068 	ldr	r2, [pc, #104]	; 154d8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x148>
   1546c:	e59f1068 	ldr	r1, [pc, #104]	; 154dc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   15470:	e59f0068 	ldr	r0, [pc, #104]	; 154e0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x150>
   15474:	eb003cae 	bl	24734 <assertion_failed>
   15478:	e59f2064 	ldr	r2, [pc, #100]	; 154e4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x154>
   1547c:	e59f1058 	ldr	r1, [pc, #88]	; 154dc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   15480:	e59f0060 	ldr	r0, [pc, #96]	; 154e8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x158>
   15484:	eb003caa 	bl	24734 <assertion_failed>
   15488:	e3a02d07 	mov	r2, #448	; 0x1c0
   1548c:	e59f1048 	ldr	r1, [pc, #72]	; 154dc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   15490:	e59f0054 	ldr	r0, [pc, #84]	; 154ec <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x15c>
   15494:	eb003ca6 	bl	24734 <assertion_failed>
   15498:	eb00458d 	bl	26ad4 <CLogger::Get()>
   1549c:	e3a02002 	mov	r2, #2
   154a0:	e59f3048 	ldr	r3, [pc, #72]	; 154f0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   154a4:	e59f1048 	ldr	r1, [pc, #72]	; 154f4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x164>
   154a8:	e58d8000 	str	r8, [sp]
   154ac:	e1a05007 	mov	r5, r7
   154b0:	eb0044c9 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   154b4:	eaffffd0 	b	153fc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   154b8:	e59f2038 	ldr	r2, [pc, #56]	; 154f8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x168>
   154bc:	e59f1018 	ldr	r1, [pc, #24]	; 154dc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   154c0:	e59f0034 	ldr	r0, [pc, #52]	; 154fc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x16c>
   154c4:	eb003c9a 	bl	24734 <assertion_failed>
   154c8:	e3a02f76 	mov	r2, #472	; 0x1d8
   154cc:	e59f1008 	ldr	r1, [pc, #8]	; 154dc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   154d0:	e59f0028 	ldr	r0, [pc, #40]	; 15500 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x170>
   154d4:	eb003c96 	bl	24734 <assertion_failed>
   154d8:	000001e3 	.word	0x000001e3
   154dc:	0003f6a8 	.word	0x0003f6a8
   154e0:	0003f728 	.word	0x0003f728
   154e4:	000001bf 	.word	0x000001bf
   154e8:	0003f6b4 	.word	0x0003f6b4
   154ec:	0003ef40 	.word	0x0003ef40
   154f0:	0003f6cc 	.word	0x0003f6cc
   154f4:	0003f8c4 	.word	0x0003f8c4
   154f8:	000001d7 	.word	0x000001d7
   154fc:	0003f6e4 	.word	0x0003f6e4
   15500:	0003f714 	.word	0x0003f714

00015504 <non-virtual thunk to CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   15504:	e2400010 	sub	r0, r0, #16
   15508:	eaffffa0 	b	15390 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>

0001550c <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   1550c:	e3520d19 	cmp	r2, #1600	; 0x640
   15510:	8a00001d 	bhi	1558c <CLAN7800Device::SendFrame(void const*, unsigned int)+0x80>
   15514:	e92d4070 	push	{r4, r5, r6, lr}
   15518:	e3510000 	cmp	r1, #0
   1551c:	e24dde65 	sub	sp, sp, #1616	; 0x650
   15520:	e24dd008 	sub	sp, sp, #8
   15524:	0a00001a 	beq	15594 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x88>
   15528:	e1a05000 	mov	r5, r0
   1552c:	e1a04002 	mov	r4, r2
   15530:	e3a06000 	mov	r6, #0
   15534:	e28d0018 	add	r0, sp, #24
   15538:	e2403008 	sub	r3, r0, #8
   1553c:	e58d300c 	str	r3, [sp, #12]
   15540:	eb00549c 	bl	2a7b8 <memcpy>
   15544:	e5952018 	ldr	r2, [r5, #24]
   15548:	e3843501 	orr	r3, r4, #4194304	; 0x400000
   1554c:	e1520006 	cmp	r2, r6
   15550:	e58d6014 	str	r6, [sp, #20]
   15554:	e58d3010 	str	r3, [sp, #16]
   15558:	0a000011 	beq	155a4 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x98>
   1555c:	e1a00005 	mov	r0, r5
   15560:	ebffe8f7 	bl	f944 <CUSBFunction::GetHost() const>
   15564:	e58d6000 	str	r6, [sp]
   15568:	e59d200c 	ldr	r2, [sp, #12]
   1556c:	e5951018 	ldr	r1, [r5, #24]
   15570:	e2843008 	add	r3, r4, #8
   15574:	ebfff504 	bl	1298c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   15578:	e1e00000 	mvn	r0, r0
   1557c:	e1a00fa0 	lsr	r0, r0, #31
   15580:	e28dde65 	add	sp, sp, #1616	; 0x650
   15584:	e28dd008 	add	sp, sp, #8
   15588:	e8bd8070 	pop	{r4, r5, r6, pc}
   1558c:	e3a00000 	mov	r0, #0
   15590:	e12fff1e 	bx	lr
   15594:	e59f2018 	ldr	r2, [pc, #24]	; 155b4 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xa8>
   15598:	e59f1018 	ldr	r1, [pc, #24]	; 155b8 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xac>
   1559c:	e59f0018 	ldr	r0, [pc, #24]	; 155bc <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb0>
   155a0:	eb003c63 	bl	24734 <assertion_failed>
   155a4:	e59f2014 	ldr	r2, [pc, #20]	; 155c0 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb4>
   155a8:	e59f1008 	ldr	r1, [pc, #8]	; 155b8 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xac>
   155ac:	e59f0010 	ldr	r0, [pc, #16]	; 155c4 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb8>
   155b0:	eb003c5f 	bl	24734 <assertion_failed>
   155b4:	000001b2 	.word	0x000001b2
   155b8:	0003f6a8 	.word	0x0003f6a8
   155bc:	0003ef40 	.word	0x0003ef40
   155c0:	000001b9 	.word	0x000001b9
   155c4:	0003f73c 	.word	0x0003f73c

000155c8 <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)>:
   155c8:	e2400010 	sub	r0, r0, #16
   155cc:	eaffffce 	b	1550c <CLAN7800Device::SendFrame(void const*, unsigned int)>

000155d0 <non-virtual thunk to CLAN7800Device::GetMACAddress() const>:
   155d0:	e280000c 	add	r0, r0, #12
   155d4:	e12fff1e 	bx	lr

000155d8 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   155d8:	e92d4010 	push	{r4, lr}
   155dc:	e1a04000 	mov	r4, r0
   155e0:	ebffe863 	bl	f774 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   155e4:	e3a02000 	mov	r2, #0
   155e8:	e59f3024 	ldr	r3, [pc, #36]	; 15614 <CLAN7800Device::CLAN7800Device(CUSBFunction*)+0x3c>
   155ec:	e5842014 	str	r2, [r4, #20]
   155f0:	e2831008 	add	r1, r3, #8
   155f4:	e2833048 	add	r3, r3, #72	; 0x48
   155f8:	e5841000 	str	r1, [r4]
   155fc:	e5843010 	str	r3, [r4, #16]
   15600:	e5842018 	str	r2, [r4, #24]
   15604:	e284001c 	add	r0, r4, #28
   15608:	eb00556b 	bl	2abbc <CMACAddress::CMACAddress()>
   1560c:	e1a00004 	mov	r0, r4
   15610:	e8bd8010 	pop	{r4, pc}
   15614:	0003f854 	.word	0x0003f854

00015618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   15618:	e92d4070 	push	{r4, r5, r6, lr}
   1561c:	e24dd018 	sub	sp, sp, #24
   15620:	e1a04001 	mov	r4, r1
   15624:	e1a05000 	mov	r5, r0
   15628:	e58d2014 	str	r2, [sp, #20]
   1562c:	ebffe8c4 	bl	f944 <CUSBFunction::GetHost() const>
   15630:	e1a06000 	mov	r6, r0
   15634:	e1a00005 	mov	r0, r5
   15638:	ebffe8b6 	bl	f918 <CUSBFunction::GetEndpoint0() const>
   1563c:	e3a05000 	mov	r5, #0
   15640:	e3a02004 	mov	r2, #4
   15644:	e6ffc074 	uxth	ip, r4
   15648:	e28d3014 	add	r3, sp, #20
   1564c:	e1a01000 	mov	r1, r0
   15650:	e58d200c 	str	r2, [sp, #12]
   15654:	e58d3008 	str	r3, [sp, #8]
   15658:	e1a00006 	mov	r0, r6
   1565c:	e3a030a0 	mov	r3, #160	; 0xa0
   15660:	e3a02040 	mov	r2, #64	; 0x40
   15664:	e58dc004 	str	ip, [sp, #4]
   15668:	e58d5000 	str	r5, [sp]
   1566c:	ebfff460 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15670:	e1500005 	cmp	r0, r5
   15674:	a3a00001 	movge	r0, #1
   15678:	ba000001 	blt	15684 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x6c>
   1567c:	e28dd018 	add	sp, sp, #24
   15680:	e8bd8070 	pop	{r4, r5, r6, pc}
   15684:	eb004512 	bl	26ad4 <CLogger::Get()>
   15688:	e3a02002 	mov	r2, #2
   1568c:	e59f3014 	ldr	r3, [pc, #20]	; 156a8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x90>
   15690:	e59f1014 	ldr	r1, [pc, #20]	; 156ac <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x94>
   15694:	e58d4000 	str	r4, [sp]
   15698:	eb00444f 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1569c:	e1a00005 	mov	r0, r5
   156a0:	e28dd018 	add	sp, sp, #24
   156a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   156a8:	0003f754 	.word	0x0003f754
   156ac:	0003f8c4 	.word	0x0003f8c4

000156b0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   156b0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   156b4:	e24dd014 	sub	sp, sp, #20
   156b8:	e1a05001 	mov	r5, r1
   156bc:	e1a07002 	mov	r7, r2
   156c0:	e1a04000 	mov	r4, r0
   156c4:	ebffe89e 	bl	f944 <CUSBFunction::GetHost() const>
   156c8:	e1a06000 	mov	r6, r0
   156cc:	e1a00004 	mov	r0, r4
   156d0:	ebffe890 	bl	f918 <CUSBFunction::GetEndpoint0() const>
   156d4:	e3a04000 	mov	r4, #0
   156d8:	e3a03004 	mov	r3, #4
   156dc:	e6ff2075 	uxth	r2, r5
   156e0:	e1a01000 	mov	r1, r0
   156e4:	e58d2004 	str	r2, [sp, #4]
   156e8:	e58d300c 	str	r3, [sp, #12]
   156ec:	e1a00006 	mov	r0, r6
   156f0:	e3a030a1 	mov	r3, #161	; 0xa1
   156f4:	e3a020c0 	mov	r2, #192	; 0xc0
   156f8:	e58d7008 	str	r7, [sp, #8]
   156fc:	e58d4000 	str	r4, [sp]
   15700:	ebfff43b 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15704:	e3500004 	cmp	r0, #4
   15708:	03a00001 	moveq	r0, #1
   1570c:	1a000001 	bne	15718 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x68>
   15710:	e28dd014 	add	sp, sp, #20
   15714:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15718:	eb0044ed 	bl	26ad4 <CLogger::Get()>
   1571c:	e3a02002 	mov	r2, #2
   15720:	e59f3014 	ldr	r3, [pc, #20]	; 1573c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x8c>
   15724:	e59f1014 	ldr	r1, [pc, #20]	; 15740 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x90>
   15728:	e58d5000 	str	r5, [sp]
   1572c:	eb00442a 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15730:	e1a00004 	mov	r0, r4
   15734:	e28dd014 	add	sp, sp, #20
   15738:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1573c:	0003f770 	.word	0x0003f770
   15740:	0003f8c4 	.word	0x0003f8c4

00015744 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   15744:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15748:	e24dd00c 	sub	sp, sp, #12
   1574c:	e1a07000 	mov	r7, r0
   15750:	e1a08001 	mov	r8, r1
   15754:	e1a09002 	mov	r9, r2
   15758:	e1a0a003 	mov	sl, r3
   1575c:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   15760:	e59db034 	ldr	fp, [sp, #52]	; 0x34
   15764:	eb0051be 	bl	29e64 <CTimer::Get()>
   15768:	e2504000 	subs	r4, r0, #0
   1576c:	0a000019 	beq	157d8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x94>
   15770:	eb004f09 	bl	2939c <CTimer::GetTicks() const>
   15774:	e1a06000 	mov	r6, r0
   15778:	ea00000e 	b	157b8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   1577c:	e1a00004 	mov	r0, r4
   15780:	eb004f05 	bl	2939c <CTimer::GetTicks() const>
   15784:	e0400006 	sub	r0, r0, r6
   15788:	e150000b 	cmp	r0, fp
   1578c:	2a00000e 	bcs	157cc <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   15790:	e1a01008 	mov	r1, r8
   15794:	e1a00007 	mov	r0, r7
   15798:	e28d2004 	add	r2, sp, #4
   1579c:	ebffffc3 	bl	156b0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   157a0:	e3500000 	cmp	r0, #0
   157a4:	0a000008 	beq	157cc <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   157a8:	e59d3004 	ldr	r3, [sp, #4]
   157ac:	e0033009 	and	r3, r3, r9
   157b0:	e153000a 	cmp	r3, sl
   157b4:	0a000005 	beq	157d0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   157b8:	e3550000 	cmp	r5, #0
   157bc:	0affffee 	beq	1577c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   157c0:	e1a00005 	mov	r0, r5
   157c4:	eb005178 	bl	29dac <CTimer::SimpleusDelay(unsigned int)>
   157c8:	eaffffeb 	b	1577c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   157cc:	e3a00000 	mov	r0, #0
   157d0:	e28dd00c 	add	sp, sp, #12
   157d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157d8:	e59f2008 	ldr	r2, [pc, #8]	; 157e8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa4>
   157dc:	e59f1008 	ldr	r1, [pc, #8]	; 157ec <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa8>
   157e0:	e59f0008 	ldr	r0, [pc, #8]	; 157f0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   157e4:	eb003bd2 	bl	24734 <assertion_failed>
   157e8:	0000028e 	.word	0x0000028e
   157ec:	0003f6a8 	.word	0x0003f6a8
   157f0:	0003f78c 	.word	0x0003f78c

000157f4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   157f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   157f8:	e351001f 	cmp	r1, #31
   157fc:	e24dd008 	sub	sp, sp, #8
   15800:	8a000023 	bhi	15894 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xa0>
   15804:	e3a06000 	mov	r6, #0
   15808:	e3a08064 	mov	r8, #100	; 0x64
   1580c:	e1a04001 	mov	r4, r1
   15810:	e1a05002 	mov	r5, r2
   15814:	e1a03006 	mov	r3, r6
   15818:	e3a02001 	mov	r2, #1
   1581c:	e3a01e12 	mov	r1, #288	; 0x120
   15820:	e88d0140 	stm	sp, {r6, r8}
   15824:	e1a07000 	mov	r7, r0
   15828:	ebffffc5 	bl	15744 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1582c:	e1500006 	cmp	r0, r6
   15830:	1a000002 	bne	15840 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x4c>
   15834:	e3a00000 	mov	r0, #0
   15838:	e28dd008 	add	sp, sp, #8
   1583c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15840:	e1a02005 	mov	r2, r5
   15844:	e3a01f49 	mov	r1, #292	; 0x124
   15848:	e1a00007 	mov	r0, r7
   1584c:	ebffff71 	bl	15618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15850:	e3500000 	cmp	r0, #0
   15854:	0afffff6 	beq	15834 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   15858:	e59f2044 	ldr	r2, [pc, #68]	; 158a4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb0>
   1585c:	e3a01e12 	mov	r1, #288	; 0x120
   15860:	e1a00007 	mov	r0, r7
   15864:	e1822304 	orr	r2, r2, r4, lsl #6
   15868:	ebffff6a 	bl	15618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1586c:	e3500000 	cmp	r0, #0
   15870:	0affffef 	beq	15834 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   15874:	e1a03006 	mov	r3, r6
   15878:	e1a00007 	mov	r0, r7
   1587c:	e3a02001 	mov	r2, #1
   15880:	e3a01e12 	mov	r1, #288	; 0x120
   15884:	e88d0140 	stm	sp, {r6, r8}
   15888:	ebffffad 	bl	15744 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1588c:	e28dd008 	add	sp, sp, #8
   15890:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15894:	e59f200c 	ldr	r2, [pc, #12]	; 158a8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb4>
   15898:	e59f100c 	ldr	r1, [pc, #12]	; 158ac <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb8>
   1589c:	e59f000c 	ldr	r0, [pc, #12]	; 158b0 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xbc>
   158a0:	eb003ba3 	bl	24734 <assertion_failed>
   158a4:	00000803 	.word	0x00000803
   158a8:	00000259 	.word	0x00000259
   158ac:	0003f6a8 	.word	0x0003f6a8
   158b0:	0003f798 	.word	0x0003f798

000158b4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   158b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   158b8:	e351001f 	cmp	r1, #31
   158bc:	e24dd010 	sub	sp, sp, #16
   158c0:	8a00002d 	bhi	1597c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xc8>
   158c4:	e3a05000 	mov	r5, #0
   158c8:	e3a08064 	mov	r8, #100	; 0x64
   158cc:	e1a04001 	mov	r4, r1
   158d0:	e1a07002 	mov	r7, r2
   158d4:	e1a03005 	mov	r3, r5
   158d8:	e3a02001 	mov	r2, #1
   158dc:	e3a01e12 	mov	r1, #288	; 0x120
   158e0:	e88d0120 	stm	sp, {r5, r8}
   158e4:	e1a06000 	mov	r6, r0
   158e8:	ebffff95 	bl	15744 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   158ec:	e3500000 	cmp	r0, #0
   158f0:	1a000001 	bne	158fc <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x48>
   158f4:	e28dd010 	add	sp, sp, #16
   158f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   158fc:	e59f2088 	ldr	r2, [pc, #136]	; 1598c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xd8>
   15900:	e3a01e12 	mov	r1, #288	; 0x120
   15904:	e1a00006 	mov	r0, r6
   15908:	e1822304 	orr	r2, r2, r4, lsl #6
   1590c:	ebffff41 	bl	15618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15910:	e1500005 	cmp	r0, r5
   15914:	0a000007 	beq	15938 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x84>
   15918:	e1a03005 	mov	r3, r5
   1591c:	e3a02001 	mov	r2, #1
   15920:	e3a01e12 	mov	r1, #288	; 0x120
   15924:	e1a00006 	mov	r0, r6
   15928:	e88d0120 	stm	sp, {r5, r8}
   1592c:	ebffff84 	bl	15744 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15930:	e3500000 	cmp	r0, #0
   15934:	1a000002 	bne	15944 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x90>
   15938:	e3a00000 	mov	r0, #0
   1593c:	e28dd010 	add	sp, sp, #16
   15940:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15944:	e1a00006 	mov	r0, r6
   15948:	e3a01f49 	mov	r1, #292	; 0x124
   1594c:	e28d200c 	add	r2, sp, #12
   15950:	ebffff56 	bl	156b0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   15954:	e3500000 	cmp	r0, #0
   15958:	0afffff6 	beq	15938 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x84>
   1595c:	e3570000 	cmp	r7, #0
   15960:	159d300c 	ldrne	r3, [sp, #12]
   15964:	11c730b0 	strhne	r3, [r7]
   15968:	1affffe1 	bne	158f4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x40>
   1596c:	e3a02fa1 	mov	r2, #644	; 0x284
   15970:	e59f1018 	ldr	r1, [pc, #24]	; 15990 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xdc>
   15974:	e59f0018 	ldr	r0, [pc, #24]	; 15994 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe0>
   15978:	eb003b6d 	bl	24734 <assertion_failed>
   1597c:	e3a02e27 	mov	r2, #624	; 0x270
   15980:	e59f1008 	ldr	r1, [pc, #8]	; 15990 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xdc>
   15984:	e59f000c 	ldr	r0, [pc, #12]	; 15998 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe4>
   15988:	eb003b69 	bl	24734 <assertion_failed>
   1598c:	00000801 	.word	0x00000801
   15990:	0003f6a8 	.word	0x0003f6a8
   15994:	0003f7a8 	.word	0x0003f7a8
   15998:	0003f798 	.word	0x0003f798

0001599c <CLAN7800Device::IsLinkUp()>:
   1599c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   159a0:	e24dd00c 	sub	sp, sp, #12
   159a4:	e3a01001 	mov	r1, #1
   159a8:	e28d2006 	add	r2, sp, #6
   159ac:	ebffffc0 	bl	158b4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   159b0:	e3500000 	cmp	r0, #0
   159b4:	11dd00b6 	ldrhne	r0, [sp, #6]
   159b8:	11a00140 	asrne	r0, r0, #2
   159bc:	12000001 	andne	r0, r0, #1
   159c0:	e28dd00c 	add	sp, sp, #12
   159c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000159c8 <non-virtual thunk to CLAN7800Device::IsLinkUp()>:
   159c8:	e2400010 	sub	r0, r0, #16
   159cc:	eafffff2 	b	1599c <CLAN7800Device::IsLinkUp()>

000159d0 <CLAN7800Device::GetLinkSpeed()>:
   159d0:	e92d4010 	push	{r4, lr}
   159d4:	e3a02000 	mov	r2, #0
   159d8:	e3a0101f 	mov	r1, #31
   159dc:	e24dd008 	sub	sp, sp, #8
   159e0:	e1a04000 	mov	r4, r0
   159e4:	ebffff82 	bl	157f4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   159e8:	e3500000 	cmp	r0, #0
   159ec:	0a00000e 	beq	15a2c <CLAN7800Device::GetLinkSpeed()+0x5c>
   159f0:	e1a00004 	mov	r0, r4
   159f4:	e3a0101c 	mov	r1, #28
   159f8:	e28d2006 	add	r2, sp, #6
   159fc:	ebffffac 	bl	158b4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   15a00:	e3500000 	cmp	r0, #0
   15a04:	0a000008 	beq	15a2c <CLAN7800Device::GetLinkSpeed()+0x5c>
   15a08:	e1dd30b6 	ldrh	r3, [sp, #6]
   15a0c:	e3130901 	tst	r3, #16384	; 0x4000
   15a10:	1a00000d 	bne	15a4c <CLAN7800Device::GetLinkSpeed()+0x7c>
   15a14:	e3130902 	tst	r3, #32768	; 0x8000
   15a18:	0a000003 	beq	15a2c <CLAN7800Device::GetLinkSpeed()+0x5c>
   15a1c:	e1a031c3 	asr	r3, r3, #3
   15a20:	e2033007 	and	r3, r3, #7
   15a24:	e3530007 	cmp	r3, #7
   15a28:	1a000002 	bne	15a38 <CLAN7800Device::GetLinkSpeed()+0x68>
   15a2c:	e3a00006 	mov	r0, #6
   15a30:	e28dd008 	add	sp, sp, #8
   15a34:	e8bd8010 	pop	{r4, pc}
   15a38:	e59f201c 	ldr	r2, [pc, #28]	; 15a5c <CLAN7800Device::GetLinkSpeed()+0x8c>
   15a3c:	e0823003 	add	r3, r2, r3
   15a40:	e5d30078 	ldrb	r0, [r3, #120]	; 0x78
   15a44:	e28dd008 	add	sp, sp, #8
   15a48:	e8bd8010 	pop	{r4, pc}
   15a4c:	e59f200c 	ldr	r2, [pc, #12]	; 15a60 <CLAN7800Device::GetLinkSpeed()+0x90>
   15a50:	e59f100c 	ldr	r1, [pc, #12]	; 15a64 <CLAN7800Device::GetLinkSpeed()+0x94>
   15a54:	e59f000c 	ldr	r0, [pc, #12]	; 15a68 <CLAN7800Device::GetLinkSpeed()+0x98>
   15a58:	eb003b35 	bl	24734 <assertion_failed>
   15a5c:	0003f854 	.word	0x0003f854
   15a60:	00000203 	.word	0x00000203
   15a64:	0003f6a8 	.word	0x0003f6a8
   15a68:	0003f7b4 	.word	0x0003f7b4

00015a6c <non-virtual thunk to CLAN7800Device::GetLinkSpeed()>:
   15a6c:	e2400010 	sub	r0, r0, #16
   15a70:	eaffffd6 	b	159d0 <CLAN7800Device::GetLinkSpeed()>

00015a74 <CLAN7800Device::InitPHY()>:
   15a74:	e92d4010 	push	{r4, lr}
   15a78:	e3a02000 	mov	r2, #0
   15a7c:	e3a0101f 	mov	r1, #31
   15a80:	e24dd008 	sub	sp, sp, #8
   15a84:	e1a04000 	mov	r4, r0
   15a88:	ebffff59 	bl	157f4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   15a8c:	e3500000 	cmp	r0, #0
   15a90:	1a000001 	bne	15a9c <CLAN7800Device::InitPHY()+0x28>
   15a94:	e28dd008 	add	sp, sp, #8
   15a98:	e8bd8010 	pop	{r4, pc}
   15a9c:	e3a0101d 	mov	r1, #29
   15aa0:	e1a00004 	mov	r0, r4
   15aa4:	e28d2006 	add	r2, sp, #6
   15aa8:	ebffff81 	bl	158b4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   15aac:	e3500000 	cmp	r0, #0
   15ab0:	0afffff7 	beq	15a94 <CLAN7800Device::InitPHY()+0x20>
   15ab4:	e1dd20b6 	ldrh	r2, [sp, #6]
   15ab8:	e1a00004 	mov	r0, r4
   15abc:	e3c220ff 	bic	r2, r2, #255	; 0xff
   15ac0:	e3822061 	orr	r2, r2, #97	; 0x61
   15ac4:	e3a0101d 	mov	r1, #29
   15ac8:	e1cd20b6 	strh	r2, [sp, #6]
   15acc:	ebffff48 	bl	157f4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   15ad0:	e28dd008 	add	sp, sp, #8
   15ad4:	e8bd8010 	pop	{r4, pc}

00015ad8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   15ad8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15adc:	e24dd00c 	sub	sp, sp, #12
   15ae0:	e1a05002 	mov	r5, r2
   15ae4:	e28d2004 	add	r2, sp, #4
   15ae8:	e1a07003 	mov	r7, r3
   15aec:	e1a06000 	mov	r6, r0
   15af0:	e1a04001 	mov	r4, r1
   15af4:	ebfffeed 	bl	156b0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   15af8:	e3500000 	cmp	r0, #0
   15afc:	0a000006 	beq	15b1c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x44>
   15b00:	e59d2004 	ldr	r2, [sp, #4]
   15b04:	e1a01004 	mov	r1, r4
   15b08:	e0073002 	and	r3, r7, r2
   15b0c:	e1832005 	orr	r2, r3, r5
   15b10:	e1a00006 	mov	r0, r6
   15b14:	e58d2004 	str	r2, [sp, #4]
   15b18:	ebfffebe 	bl	15618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15b1c:	e28dd00c 	add	sp, sp, #12
   15b20:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00015b24 <CLAN7800Device::InitMACAddress()>:
   15b24:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15b28:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   15b2c:	e3a01000 	mov	r1, #0
   15b30:	e1a04000 	mov	r4, r0
   15b34:	e28d000c 	add	r0, sp, #12
   15b38:	eb003b1e 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   15b3c:	e3a03000 	mov	r3, #0
   15b40:	e59f10f4 	ldr	r1, [pc, #244]	; 15c3c <CLAN7800Device::InitMACAddress()+0x118>
   15b44:	e58d3000 	str	r3, [sp]
   15b48:	e28d000c 	add	r0, sp, #12
   15b4c:	e3a03014 	mov	r3, #20
   15b50:	e28d2024 	add	r2, sp, #36	; 0x24
   15b54:	eb003b23 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   15b58:	e3500000 	cmp	r0, #0
   15b5c:	1a000005 	bne	15b78 <CLAN7800Device::InitMACAddress()+0x54>
   15b60:	e3a04000 	mov	r4, #0
   15b64:	e28d000c 	add	r0, sp, #12
   15b68:	eb003b19 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   15b6c:	e1a00004 	mov	r0, r4
   15b70:	e28dd03c 	add	sp, sp, #60	; 0x3c
   15b74:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15b78:	e284601c 	add	r6, r4, #28
   15b7c:	e1a00006 	mov	r0, r6
   15b80:	e28d1030 	add	r1, sp, #48	; 0x30
   15b84:	eb00542d 	bl	2ac40 <CMACAddress::Set(unsigned char const*)>
   15b88:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   15b8c:	e3a01f47 	mov	r1, #284	; 0x11c
   15b90:	e1a02005 	mov	r2, r5
   15b94:	e1a00004 	mov	r0, r4
   15b98:	e1dd73b4 	ldrh	r7, [sp, #52]	; 0x34
   15b9c:	ebfffe9d 	bl	15618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15ba0:	e3500000 	cmp	r0, #0
   15ba4:	0affffed 	beq	15b60 <CLAN7800Device::InitMACAddress()+0x3c>
   15ba8:	e1a02007 	mov	r2, r7
   15bac:	e3a01f46 	mov	r1, #280	; 0x118
   15bb0:	e1a00004 	mov	r0, r4
   15bb4:	ebfffe97 	bl	15618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15bb8:	e3500000 	cmp	r0, #0
   15bbc:	0affffe7 	beq	15b60 <CLAN7800Device::InitMACAddress()+0x3c>
   15bc0:	e1a02005 	mov	r2, r5
   15bc4:	e1a00004 	mov	r0, r4
   15bc8:	e59f1070 	ldr	r1, [pc, #112]	; 15c40 <CLAN7800Device::InitMACAddress()+0x11c>
   15bcc:	ebfffe91 	bl	15618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15bd0:	e3500000 	cmp	r0, #0
   15bd4:	0affffe1 	beq	15b60 <CLAN7800Device::InitMACAddress()+0x3c>
   15bd8:	e1a00004 	mov	r0, r4
   15bdc:	e3a01b01 	mov	r1, #1024	; 0x400
   15be0:	e3872102 	orr	r2, r7, #-2147483648	; 0x80000000
   15be4:	ebfffe8b 	bl	15618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15be8:	e2504000 	subs	r4, r0, #0
   15bec:	0affffdb 	beq	15b60 <CLAN7800Device::InitMACAddress()+0x3c>
   15bf0:	e28d0014 	add	r0, sp, #20
   15bf4:	eb0047a6 	bl	27a94 <CString::CString()>
   15bf8:	e28d1014 	add	r1, sp, #20
   15bfc:	e1a00006 	mov	r0, r6
   15c00:	eb005468 	bl	2ada8 <CMACAddress::Format(CString*) const>
   15c04:	eb0043b2 	bl	26ad4 <CLogger::Get()>
   15c08:	e1a05000 	mov	r5, r0
   15c0c:	e28d0014 	add	r0, sp, #20
   15c10:	eb0047b7 	bl	27af4 <CString::operator char const*() const>
   15c14:	e1a02000 	mov	r2, r0
   15c18:	e59f3024 	ldr	r3, [pc, #36]	; 15c44 <CLAN7800Device::InitMACAddress()+0x120>
   15c1c:	e1a00005 	mov	r0, r5
   15c20:	e58d2000 	str	r2, [sp]
   15c24:	e59f101c 	ldr	r1, [pc, #28]	; 15c48 <CLAN7800Device::InitMACAddress()+0x124>
   15c28:	e3a02004 	mov	r2, #4
   15c2c:	eb0042ea 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15c30:	e28d0014 	add	r0, sp, #20
   15c34:	eb004763 	bl	279c8 <CString::~CString()>
   15c38:	eaffffc9 	b	15b64 <CLAN7800Device::InitMACAddress()+0x40>
   15c3c:	00010003 	.word	0x00010003
   15c40:	00000404 	.word	0x00000404
   15c44:	0003f7dc 	.word	0x0003f7dc
   15c48:	0003f8c4 	.word	0x0003f8c4

00015c4c <CLAN7800Device::Configure()>:
   15c4c:	e92d4070 	push	{r4, r5, r6, lr}
   15c50:	e24dd018 	sub	sp, sp, #24
   15c54:	e1a05000 	mov	r5, r0
   15c58:	ebffe718 	bl	f8c0 <CUSBFunction::GetNumEndpoints() const>
   15c5c:	e3500003 	cmp	r0, #3
   15c60:	0a000004 	beq	15c78 <CLAN7800Device::Configure()+0x2c>
   15c64:	ea00004d 	b	15da0 <CLAN7800Device::Configure()+0x154>
   15c68:	e5d43003 	ldrb	r3, [r4, #3]
   15c6c:	e203303f 	and	r3, r3, #63	; 0x3f
   15c70:	e3530002 	cmp	r3, #2
   15c74:	0a000022 	beq	15d04 <CLAN7800Device::Configure()+0xb8>
   15c78:	e3a01005 	mov	r1, #5
   15c7c:	e1a00005 	mov	r0, r5
   15c80:	ebffe73a 	bl	f970 <CUSBFunction::GetDescriptor(unsigned char)>
   15c84:	e2504000 	subs	r4, r0, #0
   15c88:	1afffff6 	bne	15c68 <CLAN7800Device::Configure()+0x1c>
   15c8c:	e5953014 	ldr	r3, [r5, #20]
   15c90:	e1a00005 	mov	r0, r5
   15c94:	e3530000 	cmp	r3, #0
   15c98:	0a00003a 	beq	15d88 <CLAN7800Device::Configure()+0x13c>
   15c9c:	e5953018 	ldr	r3, [r5, #24]
   15ca0:	e3530000 	cmp	r3, #0
   15ca4:	0a000037 	beq	15d88 <CLAN7800Device::Configure()+0x13c>
   15ca8:	ebffe648 	bl	f5d0 <CUSBFunction::Configure()>
   15cac:	e2506000 	subs	r6, r0, #0
   15cb0:	0a0000d7 	beq	16014 <CLAN7800Device::Configure()+0x3c8>
   15cb4:	e1a01004 	mov	r1, r4
   15cb8:	e1a00005 	mov	r0, r5
   15cbc:	e28d2014 	add	r2, sp, #20
   15cc0:	ebfffe7a 	bl	156b0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   15cc4:	e3500000 	cmp	r0, #0
   15cc8:	0a000002 	beq	15cd8 <CLAN7800Device::Configure()+0x8c>
   15ccc:	e1dd31b6 	ldrh	r3, [sp, #22]
   15cd0:	e3530b1e 	cmp	r3, #30720	; 0x7800
   15cd4:	0a000038 	beq	15dbc <CLAN7800Device::Configure()+0x170>
   15cd8:	e3a06000 	mov	r6, #0
   15cdc:	eb00437c 	bl	26ad4 <CLogger::Get()>
   15ce0:	e1dd21b6 	ldrh	r2, [sp, #22]
   15ce4:	e59f33b0 	ldr	r3, [pc, #944]	; 1609c <CLAN7800Device::Configure()+0x450>
   15ce8:	e58d2000 	str	r2, [sp]
   15cec:	e59f13ac 	ldr	r1, [pc, #940]	; 160a0 <CLAN7800Device::Configure()+0x454>
   15cf0:	e3a02001 	mov	r2, #1
   15cf4:	eb0042b8 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15cf8:	e1a00006 	mov	r0, r6
   15cfc:	e28dd018 	add	sp, sp, #24
   15d00:	e8bd8070 	pop	{r4, r5, r6, pc}
   15d04:	e1d430d2 	ldrsb	r3, [r4, #2]
   15d08:	e3530000 	cmp	r3, #0
   15d0c:	ba00000e 	blt	15d4c <CLAN7800Device::Configure()+0x100>
   15d10:	e5953018 	ldr	r3, [r5, #24]
   15d14:	e1a00005 	mov	r0, r5
   15d18:	e3530000 	cmp	r3, #0
   15d1c:	1a000019 	bne	15d88 <CLAN7800Device::Configure()+0x13c>
   15d20:	ebffe6f2 	bl	f8f0 <CUSBFunction::GetDevice() const>
   15d24:	e1a01000 	mov	r1, r0
   15d28:	e3a00014 	mov	r0, #20
   15d2c:	e58d100c 	str	r1, [sp, #12]
   15d30:	eb005486 	bl	2af50 <operator new(unsigned int)>
   15d34:	e1a06000 	mov	r6, r0
   15d38:	e1a02004 	mov	r2, r4
   15d3c:	e59d100c 	ldr	r1, [sp, #12]
   15d40:	ebffe528 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15d44:	e5856018 	str	r6, [r5, #24]
   15d48:	eaffffca 	b	15c78 <CLAN7800Device::Configure()+0x2c>
   15d4c:	e5953014 	ldr	r3, [r5, #20]
   15d50:	e1a00005 	mov	r0, r5
   15d54:	e3530000 	cmp	r3, #0
   15d58:	1a00000a 	bne	15d88 <CLAN7800Device::Configure()+0x13c>
   15d5c:	ebffe6e3 	bl	f8f0 <CUSBFunction::GetDevice() const>
   15d60:	e1a01000 	mov	r1, r0
   15d64:	e3a00014 	mov	r0, #20
   15d68:	e58d100c 	str	r1, [sp, #12]
   15d6c:	eb005477 	bl	2af50 <operator new(unsigned int)>
   15d70:	e1a06000 	mov	r6, r0
   15d74:	e1a02004 	mov	r2, r4
   15d78:	e59d100c 	ldr	r1, [sp, #12]
   15d7c:	ebffe519 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15d80:	e5856014 	str	r6, [r5, #20]
   15d84:	eaffffbb 	b	15c78 <CLAN7800Device::Configure()+0x2c>
   15d88:	e59f1310 	ldr	r1, [pc, #784]	; 160a0 <CLAN7800Device::Configure()+0x454>
   15d8c:	ebffe702 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   15d90:	e3a06000 	mov	r6, #0
   15d94:	e1a00006 	mov	r0, r6
   15d98:	e28dd018 	add	sp, sp, #24
   15d9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   15da0:	e3a06000 	mov	r6, #0
   15da4:	e1a00005 	mov	r0, r5
   15da8:	e59f12f0 	ldr	r1, [pc, #752]	; 160a0 <CLAN7800Device::Configure()+0x454>
   15dac:	ebffe6fa 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   15db0:	e1a00006 	mov	r0, r6
   15db4:	e28dd018 	add	sp, sp, #24
   15db8:	e8bd8070 	pop	{r4, r5, r6, pc}
   15dbc:	e3e03000 	mvn	r3, #0
   15dc0:	e3a02002 	mov	r2, #2
   15dc4:	e3a01010 	mov	r1, #16
   15dc8:	e1a00005 	mov	r0, r5
   15dcc:	ebffff41 	bl	15ad8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15dd0:	e3500000 	cmp	r0, #0
   15dd4:	0a000096 	beq	16034 <CLAN7800Device::Configure()+0x3e8>
   15dd8:	e3a01064 	mov	r1, #100	; 0x64
   15ddc:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   15de0:	e58d1004 	str	r1, [sp, #4]
   15de4:	e58d2000 	str	r2, [sp]
   15de8:	e1a03004 	mov	r3, r4
   15dec:	e3a02002 	mov	r2, #2
   15df0:	e3a01010 	mov	r1, #16
   15df4:	e1a00005 	mov	r0, r5
   15df8:	ebfffe51 	bl	15744 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15dfc:	e3500000 	cmp	r0, #0
   15e00:	0a00008b 	beq	16034 <CLAN7800Device::Configure()+0x3e8>
   15e04:	e1a00005 	mov	r0, r5
   15e08:	ebffff45 	bl	15b24 <CLAN7800Device::InitMACAddress()>
   15e0c:	e2506000 	subs	r6, r0, #0
   15e10:	0a000095 	beq	1606c <CLAN7800Device::Configure()+0x420>
   15e14:	e3a02018 	mov	r2, #24
   15e18:	e3a01090 	mov	r1, #144	; 0x90
   15e1c:	e1a00005 	mov	r0, r5
   15e20:	ebfffdfc 	bl	15618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15e24:	e3500000 	cmp	r0, #0
   15e28:	0a00008d 	beq	16064 <CLAN7800Device::Configure()+0x418>
   15e2c:	e3a02b02 	mov	r2, #2048	; 0x800
   15e30:	e3a01094 	mov	r1, #148	; 0x94
   15e34:	e1a00005 	mov	r0, r5
   15e38:	ebfffdf6 	bl	15618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15e3c:	e3500000 	cmp	r0, #0
   15e40:	0a000087 	beq	16064 <CLAN7800Device::Configure()+0x418>
   15e44:	e3e03010 	mvn	r3, #16
   15e48:	e3a02603 	mov	r2, #3145728	; 0x300000
   15e4c:	e3a01010 	mov	r1, #16
   15e50:	e1a00005 	mov	r0, r5
   15e54:	ebffff1f 	bl	15ad8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15e58:	e3500000 	cmp	r0, #0
   15e5c:	0a000080 	beq	16064 <CLAN7800Device::Configure()+0x418>
   15e60:	e3e03040 	mvn	r3, #64	; 0x40
   15e64:	e3a02020 	mov	r2, #32
   15e68:	e3a01080 	mov	r1, #128	; 0x80
   15e6c:	e1a00005 	mov	r0, r5
   15e70:	ebffff18 	bl	15ad8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15e74:	e3500000 	cmp	r0, #0
   15e78:	0a000079 	beq	16064 <CLAN7800Device::Configure()+0x418>
   15e7c:	e3a02017 	mov	r2, #23
   15e80:	e3a010c8 	mov	r1, #200	; 0xc8
   15e84:	e1a00005 	mov	r0, r5
   15e88:	ebfffde2 	bl	15618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15e8c:	e3500000 	cmp	r0, #0
   15e90:	0a000073 	beq	16064 <CLAN7800Device::Configure()+0x418>
   15e94:	e3a02017 	mov	r2, #23
   15e98:	e3a010cc 	mov	r1, #204	; 0xcc
   15e9c:	e1a00005 	mov	r0, r5
   15ea0:	ebfffddc 	bl	15618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15ea4:	e3500000 	cmp	r0, #0
   15ea8:	0a00006d 	beq	16064 <CLAN7800Device::Configure()+0x418>
   15eac:	e3a02000 	mov	r2, #0
   15eb0:	e3a01098 	mov	r1, #152	; 0x98
   15eb4:	e1a00005 	mov	r0, r5
   15eb8:	ebfffdd6 	bl	15618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15ebc:	e3500000 	cmp	r0, #0
   15ec0:	0a000067 	beq	16064 <CLAN7800Device::Configure()+0x418>
   15ec4:	e3e02000 	mvn	r2, #0
   15ec8:	e3a0100c 	mov	r1, #12
   15ecc:	e1a00005 	mov	r0, r5
   15ed0:	ebfffdd0 	bl	15618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15ed4:	e3500000 	cmp	r0, #0
   15ed8:	0a000061 	beq	16064 <CLAN7800Device::Configure()+0x418>
   15edc:	e3a02000 	mov	r2, #0
   15ee0:	e3a01f43 	mov	r1, #268	; 0x10c
   15ee4:	e1a00005 	mov	r0, r5
   15ee8:	ebfffdca 	bl	15618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15eec:	e3500000 	cmp	r0, #0
   15ef0:	0a00005b 	beq	16064 <CLAN7800Device::Configure()+0x418>
   15ef4:	e3a02000 	mov	r2, #0
   15ef8:	e3a010d0 	mov	r1, #208	; 0xd0
   15efc:	e1a00005 	mov	r0, r5
   15f00:	ebfffdc4 	bl	15618 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15f04:	e3500000 	cmp	r0, #0
   15f08:	0a000055 	beq	16064 <CLAN7800Device::Configure()+0x418>
   15f0c:	e3e03000 	mvn	r3, #0
   15f10:	e3a010b0 	mov	r1, #176	; 0xb0
   15f14:	e1a00005 	mov	r0, r5
   15f18:	e59f2184 	ldr	r2, [pc, #388]	; 160a4 <CLAN7800Device::Configure()+0x458>
   15f1c:	ebfffeed 	bl	15ad8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15f20:	e3500000 	cmp	r0, #0
   15f24:	0a00004e 	beq	16064 <CLAN7800Device::Configure()+0x418>
   15f28:	e3e03000 	mvn	r3, #0
   15f2c:	e3a02010 	mov	r2, #16
   15f30:	e3a01014 	mov	r1, #20
   15f34:	e1a00005 	mov	r0, r5
   15f38:	ebfffee6 	bl	15ad8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15f3c:	e3500000 	cmp	r0, #0
   15f40:	0a000042 	beq	16050 <CLAN7800Device::Configure()+0x404>
   15f44:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   15f48:	e3a03064 	mov	r3, #100	; 0x64
   15f4c:	e3a01014 	mov	r1, #20
   15f50:	e1cd20f0 	strd	r2, [sp]
   15f54:	e1a00005 	mov	r0, r5
   15f58:	e3a03080 	mov	r3, #128	; 0x80
   15f5c:	e3a02090 	mov	r2, #144	; 0x90
   15f60:	ebfffdf7 	bl	15744 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15f64:	e3500000 	cmp	r0, #0
   15f68:	0a000038 	beq	16050 <CLAN7800Device::Configure()+0x404>
   15f6c:	e3e03000 	mvn	r3, #0
   15f70:	e3a02b06 	mov	r2, #6144	; 0x1800
   15f74:	e3a01c01 	mov	r1, #256	; 0x100
   15f78:	e1a00005 	mov	r0, r5
   15f7c:	ebfffed5 	bl	15ad8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15f80:	e3500000 	cmp	r0, #0
   15f84:	0a000036 	beq	16064 <CLAN7800Device::Configure()+0x418>
   15f88:	e3e03000 	mvn	r3, #0
   15f8c:	e3a02001 	mov	r2, #1
   15f90:	e3a01f42 	mov	r1, #264	; 0x108
   15f94:	e1a00005 	mov	r0, r5
   15f98:	ebfffece 	bl	15ad8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15f9c:	e3500000 	cmp	r0, #0
   15fa0:	0a00002f 	beq	16064 <CLAN7800Device::Configure()+0x418>
   15fa4:	e3e03000 	mvn	r3, #0
   15fa8:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   15fac:	e3a010c4 	mov	r1, #196	; 0xc4
   15fb0:	e1a00005 	mov	r0, r5
   15fb4:	ebfffec7 	bl	15ad8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15fb8:	e3500000 	cmp	r0, #0
   15fbc:	0a000028 	beq	16064 <CLAN7800Device::Configure()+0x418>
   15fc0:	e3a01f41 	mov	r1, #260	; 0x104
   15fc4:	e1a00005 	mov	r0, r5
   15fc8:	e59f30d8 	ldr	r3, [pc, #216]	; 160a8 <CLAN7800Device::Configure()+0x45c>
   15fcc:	e59f20d8 	ldr	r2, [pc, #216]	; 160ac <CLAN7800Device::Configure()+0x460>
   15fd0:	ebfffec0 	bl	15ad8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15fd4:	e3500000 	cmp	r0, #0
   15fd8:	0a000021 	beq	16064 <CLAN7800Device::Configure()+0x418>
   15fdc:	e3e03000 	mvn	r3, #0
   15fe0:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   15fe4:	e3a010c0 	mov	r1, #192	; 0xc0
   15fe8:	e1a00005 	mov	r0, r5
   15fec:	ebfffeb9 	bl	15ad8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15ff0:	e3500000 	cmp	r0, #0
   15ff4:	0a00001a 	beq	16064 <CLAN7800Device::Configure()+0x418>
   15ff8:	e1a00005 	mov	r0, r5
   15ffc:	ebfffe9c 	bl	15a74 <CLAN7800Device::InitPHY()>
   16000:	e2506000 	subs	r6, r0, #0
   16004:	0a00001e 	beq	16084 <CLAN7800Device::Configure()+0x438>
   16008:	e2850010 	add	r0, r5, #16
   1600c:	eb005386 	bl	2ae2c <CNetDevice::AddNetDevice()>
   16010:	eaffff5f 	b	15d94 <CLAN7800Device::Configure()+0x148>
   16014:	eb0042ae 	bl	26ad4 <CLogger::Get()>
   16018:	e3a02001 	mov	r2, #1
   1601c:	e59f308c 	ldr	r3, [pc, #140]	; 160b0 <CLAN7800Device::Configure()+0x464>
   16020:	e59f1078 	ldr	r1, [pc, #120]	; 160a0 <CLAN7800Device::Configure()+0x454>
   16024:	eb0041ec 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16028:	e1a00006 	mov	r0, r6
   1602c:	e28dd018 	add	sp, sp, #24
   16030:	e8bd8070 	pop	{r4, r5, r6, pc}
   16034:	eb0042a6 	bl	26ad4 <CLogger::Get()>
   16038:	e3a02001 	mov	r2, #1
   1603c:	e59f3070 	ldr	r3, [pc, #112]	; 160b4 <CLAN7800Device::Configure()+0x468>
   16040:	e59f1058 	ldr	r1, [pc, #88]	; 160a0 <CLAN7800Device::Configure()+0x454>
   16044:	eb0041e4 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16048:	e3a06000 	mov	r6, #0
   1604c:	eaffff50 	b	15d94 <CLAN7800Device::Configure()+0x148>
   16050:	eb00429f 	bl	26ad4 <CLogger::Get()>
   16054:	e3a02001 	mov	r2, #1
   16058:	e59f3058 	ldr	r3, [pc, #88]	; 160b8 <CLAN7800Device::Configure()+0x46c>
   1605c:	e59f103c 	ldr	r1, [pc, #60]	; 160a0 <CLAN7800Device::Configure()+0x454>
   16060:	eb0041dd 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16064:	e3a06000 	mov	r6, #0
   16068:	eaffff49 	b	15d94 <CLAN7800Device::Configure()+0x148>
   1606c:	eb004298 	bl	26ad4 <CLogger::Get()>
   16070:	e3a02001 	mov	r2, #1
   16074:	e59f3040 	ldr	r3, [pc, #64]	; 160bc <CLAN7800Device::Configure()+0x470>
   16078:	e59f1020 	ldr	r1, [pc, #32]	; 160a0 <CLAN7800Device::Configure()+0x454>
   1607c:	eb0041d6 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16080:	eaffff43 	b	15d94 <CLAN7800Device::Configure()+0x148>
   16084:	eb004292 	bl	26ad4 <CLogger::Get()>
   16088:	e3a02001 	mov	r2, #1
   1608c:	e59f302c 	ldr	r3, [pc, #44]	; 160c0 <CLAN7800Device::Configure()+0x474>
   16090:	e59f1008 	ldr	r1, [pc, #8]	; 160a0 <CLAN7800Device::Configure()+0x454>
   16094:	eb0041d0 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16098:	eaffff3d 	b	15d94 <CLAN7800Device::Configure()+0x148>
   1609c:	0003f7f0 	.word	0x0003f7f0
   160a0:	0003f8c4 	.word	0x0003f8c4
   160a4:	00000402 	.word	0x00000402
   160a8:	c000ffff 	.word	0xc000ffff
   160ac:	05ee0001 	.word	0x05ee0001
   160b0:	0003e6b8 	.word	0x0003e6b8
   160b4:	0003f808 	.word	0x0003f808
   160b8:	0003f830 	.word	0x0003f830
   160bc:	0003f818 	.word	0x0003f818
   160c0:	0003f844 	.word	0x0003f844

000160c4 <CNetDevice::GetType()>:
   160c4:	e3a00000 	mov	r0, #0
   160c8:	e12fff1e 	bx	lr

000160cc <CNetDevice::IsSendFrameAdvisable()>:
   160cc:	e3a00001 	mov	r0, #1
   160d0:	e12fff1e 	bx	lr

000160d4 <CNetDevice::UpdatePHY()>:
   160d4:	e3a00000 	mov	r0, #0
   160d8:	e12fff1e 	bx	lr

000160dc <CSMSC951xDevice::GetMACAddress() const>:
   160dc:	e280001c 	add	r0, r0, #28
   160e0:	e12fff1e 	bx	lr

000160e4 <CSMSC951xDevice::~CSMSC951xDevice()>:
   160e4:	e92d4070 	push	{r4, r5, r6, lr}
   160e8:	e59f3074 	ldr	r3, [pc, #116]	; 16164 <CSMSC951xDevice::~CSMSC951xDevice()+0x80>
   160ec:	e5905018 	ldr	r5, [r0, #24]
   160f0:	e2832040 	add	r2, r3, #64	; 0x40
   160f4:	e3550000 	cmp	r5, #0
   160f8:	e1a04000 	mov	r4, r0
   160fc:	e5803000 	str	r3, [r0]
   16100:	e5802010 	str	r2, [r0, #16]
   16104:	0a000004 	beq	1611c <CSMSC951xDevice::~CSMSC951xDevice()+0x38>
   16108:	e1a00005 	mov	r0, r5
   1610c:	ebffe499 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   16110:	e1a00005 	mov	r0, r5
   16114:	e3a01014 	mov	r1, #20
   16118:	eb00539a 	bl	2af88 <operator delete(void*, unsigned int)>
   1611c:	e3a03000 	mov	r3, #0
   16120:	e5945014 	ldr	r5, [r4, #20]
   16124:	e5843018 	str	r3, [r4, #24]
   16128:	e1550003 	cmp	r5, r3
   1612c:	0a000004 	beq	16144 <CSMSC951xDevice::~CSMSC951xDevice()+0x60>
   16130:	e1a00005 	mov	r0, r5
   16134:	ebffe48f 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   16138:	e1a00005 	mov	r0, r5
   1613c:	e3a01014 	mov	r1, #20
   16140:	eb005390 	bl	2af88 <operator delete(void*, unsigned int)>
   16144:	e3a03000 	mov	r3, #0
   16148:	e284001c 	add	r0, r4, #28
   1614c:	e5843014 	str	r3, [r4, #20]
   16150:	eb00529c 	bl	2abc8 <CMACAddress::~CMACAddress()>
   16154:	e1a00004 	mov	r0, r4
   16158:	ebffe4f3 	bl	f52c <CUSBFunction::~CUSBFunction()>
   1615c:	e1a00004 	mov	r0, r4
   16160:	e8bd8070 	pop	{r4, r5, r6, pc}
   16164:	0003fa08 	.word	0x0003fa08

00016168 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   16168:	e2400010 	sub	r0, r0, #16
   1616c:	eaffffdc 	b	160e4 <CSMSC951xDevice::~CSMSC951xDevice()>

00016170 <CSMSC951xDevice::~CSMSC951xDevice()>:
   16170:	e92d4010 	push	{r4, lr}
   16174:	e1a04000 	mov	r4, r0
   16178:	ebffffd9 	bl	160e4 <CSMSC951xDevice::~CSMSC951xDevice()>
   1617c:	e1a00004 	mov	r0, r4
   16180:	e3a01024 	mov	r1, #36	; 0x24
   16184:	eb00537f 	bl	2af88 <operator delete(void*, unsigned int)>
   16188:	e1a00004 	mov	r0, r4
   1618c:	e8bd8010 	pop	{r4, pc}

00016190 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   16190:	e2400010 	sub	r0, r0, #16
   16194:	eafffff5 	b	16170 <CSMSC951xDevice::~CSMSC951xDevice()>

00016198 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   16198:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1619c:	e5903014 	ldr	r3, [r0, #20]
   161a0:	e24dd030 	sub	sp, sp, #48	; 0x30
   161a4:	e3530000 	cmp	r3, #0
   161a8:	0a000036 	beq	16288 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf0>
   161ac:	e3510000 	cmp	r1, #0
   161b0:	e1a04001 	mov	r4, r1
   161b4:	0a000037 	beq	16298 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x100>
   161b8:	e3a07000 	mov	r7, #0
   161bc:	e1a05000 	mov	r5, r0
   161c0:	e1a01003 	mov	r1, r3
   161c4:	e1a06002 	mov	r6, r2
   161c8:	e3a03d19 	mov	r3, #1600	; 0x640
   161cc:	e1a02004 	mov	r2, r4
   161d0:	e58d7000 	str	r7, [sp]
   161d4:	e28d0008 	add	r0, sp, #8
   161d8:	ebfff86f 	bl	1439c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   161dc:	e1a00005 	mov	r0, r5
   161e0:	ebffe5d7 	bl	f944 <CUSBFunction::GetHost() const>
   161e4:	e5903000 	ldr	r3, [r0]
   161e8:	e1a02007 	mov	r2, r7
   161ec:	e5933008 	ldr	r3, [r3, #8]
   161f0:	e28d1008 	add	r1, sp, #8
   161f4:	e12fff33 	blx	r3
   161f8:	e2508000 	subs	r8, r0, #0
   161fc:	1a000005 	bne	16218 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x80>
   16200:	e3a08000 	mov	r8, #0
   16204:	e28d0008 	add	r0, sp, #8
   16208:	ebfff883 	bl	1441c <CUSBRequest::~CUSBRequest()>
   1620c:	e1a00008 	mov	r0, r8
   16210:	e28dd030 	add	sp, sp, #48	; 0x30
   16214:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16218:	e28d0008 	add	r0, sp, #8
   1621c:	ebfff88f 	bl	14460 <CUSBRequest::GetResultLength() const>
   16220:	e3500003 	cmp	r0, #3
   16224:	9afffff5 	bls	16200 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   16228:	e5945000 	ldr	r5, [r4]
   1622c:	e59f30b4 	ldr	r3, [pc, #180]	; 162e8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x150>
   16230:	e0033005 	and	r3, r3, r5
   16234:	e3530000 	cmp	r3, #0
   16238:	1a00001a 	bne	162a8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x110>
   1623c:	e59f30a8 	ldr	r3, [pc, #168]	; 162ec <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x154>
   16240:	e2402004 	sub	r2, r0, #4
   16244:	e0033825 	and	r3, r3, r5, lsr #16
   16248:	e1520003 	cmp	r2, r3
   1624c:	1a00001d 	bne	162c8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x130>
   16250:	e3520004 	cmp	r2, #4
   16254:	9a00001f 	bls	162d8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x140>
   16258:	e2425004 	sub	r5, r2, #4
   1625c:	e1a02005 	mov	r2, r5
   16260:	e1a00004 	mov	r0, r4
   16264:	e2841004 	add	r1, r4, #4
   16268:	eb005152 	bl	2a7b8 <memcpy>
   1626c:	e3560000 	cmp	r6, #0
   16270:	15865000 	strne	r5, [r6]
   16274:	1affffe2 	bne	16204 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   16278:	e59f2070 	ldr	r2, [pc, #112]	; 162f0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x158>
   1627c:	e59f1070 	ldr	r1, [pc, #112]	; 162f4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   16280:	e59f0070 	ldr	r0, [pc, #112]	; 162f8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x160>
   16284:	eb00392a 	bl	24734 <assertion_failed>
   16288:	e59f206c 	ldr	r2, [pc, #108]	; 162fc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x164>
   1628c:	e59f1060 	ldr	r1, [pc, #96]	; 162f4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   16290:	e59f0068 	ldr	r0, [pc, #104]	; 16300 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x168>
   16294:	eb003926 	bl	24734 <assertion_failed>
   16298:	e3a02f45 	mov	r2, #276	; 0x114
   1629c:	e59f1050 	ldr	r1, [pc, #80]	; 162f4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   162a0:	e59f005c 	ldr	r0, [pc, #92]	; 16304 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x16c>
   162a4:	eb003922 	bl	24734 <assertion_failed>
   162a8:	eb004209 	bl	26ad4 <CLogger::Get()>
   162ac:	e3a02002 	mov	r2, #2
   162b0:	e59f3050 	ldr	r3, [pc, #80]	; 16308 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   162b4:	e59f1050 	ldr	r1, [pc, #80]	; 1630c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x174>
   162b8:	e58d5000 	str	r5, [sp]
   162bc:	e1a08007 	mov	r8, r7
   162c0:	eb004145 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   162c4:	eaffffce 	b	16204 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   162c8:	e59f2040 	ldr	r2, [pc, #64]	; 16310 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x178>
   162cc:	e59f1020 	ldr	r1, [pc, #32]	; 162f4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   162d0:	e59f003c 	ldr	r0, [pc, #60]	; 16314 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x17c>
   162d4:	eb003916 	bl	24734 <assertion_failed>
   162d8:	e3a02f4b 	mov	r2, #300	; 0x12c
   162dc:	e59f1010 	ldr	r1, [pc, #16]	; 162f4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   162e0:	e59f0030 	ldr	r0, [pc, #48]	; 16318 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x180>
   162e4:	eb003912 	bl	24734 <assertion_failed>
   162e8:	400090de 	.word	0x400090de
   162ec:	00003fff 	.word	0x00003fff
   162f0:	00000137 	.word	0x00000137
   162f4:	0003f8d4 	.word	0x0003f8d4
   162f8:	0003f728 	.word	0x0003f728
   162fc:	00000113 	.word	0x00000113
   16300:	0003f6b4 	.word	0x0003f6b4
   16304:	0003ef40 	.word	0x0003ef40
   16308:	0003f6cc 	.word	0x0003f6cc
   1630c:	0003fa70 	.word	0x0003fa70
   16310:	0000012b 	.word	0x0000012b
   16314:	0003f8e4 	.word	0x0003f8e4
   16318:	0003f714 	.word	0x0003f714

0001631c <non-virtual thunk to CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   1631c:	e2400010 	sub	r0, r0, #16
   16320:	eaffff9c 	b	16198 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>

00016324 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   16324:	e3520d19 	cmp	r2, #1600	; 0x640
   16328:	8a00001d 	bhi	163a4 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x80>
   1632c:	e92d4030 	push	{r4, r5, lr}
   16330:	e3510000 	cmp	r1, #0
   16334:	e24dde65 	sub	sp, sp, #1616	; 0x650
   16338:	e24dd00c 	sub	sp, sp, #12
   1633c:	0a00001a 	beq	163ac <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x88>
   16340:	e1a05000 	mov	r5, r0
   16344:	e1a04002 	mov	r4, r2
   16348:	e28d0018 	add	r0, sp, #24
   1634c:	e2403008 	sub	r3, r0, #8
   16350:	e58d300c 	str	r3, [sp, #12]
   16354:	eb005117 	bl	2a7b8 <memcpy>
   16358:	e5952018 	ldr	r2, [r5, #24]
   1635c:	e3843a03 	orr	r3, r4, #12288	; 0x3000
   16360:	e3520000 	cmp	r2, #0
   16364:	e58d4014 	str	r4, [sp, #20]
   16368:	e58d3010 	str	r3, [sp, #16]
   1636c:	0a000012 	beq	163bc <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x98>
   16370:	e1a00005 	mov	r0, r5
   16374:	ebffe572 	bl	f944 <CUSBFunction::GetHost() const>
   16378:	e3a0c000 	mov	ip, #0
   1637c:	e5951018 	ldr	r1, [r5, #24]
   16380:	e59d200c 	ldr	r2, [sp, #12]
   16384:	e2843008 	add	r3, r4, #8
   16388:	e58dc000 	str	ip, [sp]
   1638c:	ebfff17e 	bl	1298c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   16390:	e1e00000 	mvn	r0, r0
   16394:	e1a00fa0 	lsr	r0, r0, #31
   16398:	e28dde65 	add	sp, sp, #1616	; 0x650
   1639c:	e28dd00c 	add	sp, sp, #12
   163a0:	e8bd8030 	pop	{r4, r5, pc}
   163a4:	e3a00000 	mov	r0, #0
   163a8:	e12fff1e 	bx	lr
   163ac:	e59f2018 	ldr	r2, [pc, #24]	; 163cc <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xa8>
   163b0:	e59f1018 	ldr	r1, [pc, #24]	; 163d0 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xac>
   163b4:	e59f0018 	ldr	r0, [pc, #24]	; 163d4 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb0>
   163b8:	eb0038dd 	bl	24734 <assertion_failed>
   163bc:	e59f2014 	ldr	r2, [pc, #20]	; 163d8 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb4>
   163c0:	e59f1008 	ldr	r1, [pc, #8]	; 163d0 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xac>
   163c4:	e59f0010 	ldr	r0, [pc, #16]	; 163dc <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb8>
   163c8:	eb0038d9 	bl	24734 <assertion_failed>
   163cc:	00000106 	.word	0x00000106
   163d0:	0003f8d4 	.word	0x0003f8d4
   163d4:	0003ef40 	.word	0x0003ef40
   163d8:	0000010d 	.word	0x0000010d
   163dc:	0003f73c 	.word	0x0003f73c

000163e0 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   163e0:	e2400010 	sub	r0, r0, #16
   163e4:	eaffffce 	b	16324 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>

000163e8 <non-virtual thunk to CSMSC951xDevice::GetMACAddress() const>:
   163e8:	e280000c 	add	r0, r0, #12
   163ec:	e12fff1e 	bx	lr

000163f0 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   163f0:	e92d4010 	push	{r4, lr}
   163f4:	e1a04000 	mov	r4, r0
   163f8:	ebffe4dd 	bl	f774 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   163fc:	e3a02000 	mov	r2, #0
   16400:	e59f3024 	ldr	r3, [pc, #36]	; 1642c <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)+0x3c>
   16404:	e5842014 	str	r2, [r4, #20]
   16408:	e2831008 	add	r1, r3, #8
   1640c:	e2833048 	add	r3, r3, #72	; 0x48
   16410:	e5841000 	str	r1, [r4]
   16414:	e5843010 	str	r3, [r4, #16]
   16418:	e5842018 	str	r2, [r4, #24]
   1641c:	e284001c 	add	r0, r4, #28
   16420:	eb0051e5 	bl	2abbc <CMACAddress::CMACAddress()>
   16424:	e1a00004 	mov	r0, r4
   16428:	e8bd8010 	pop	{r4, pc}
   1642c:	0003fa00 	.word	0x0003fa00

00016430 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   16430:	e92d4070 	push	{r4, r5, r6, lr}
   16434:	e24dd018 	sub	sp, sp, #24
   16438:	e1a04001 	mov	r4, r1
   1643c:	e58d2014 	str	r2, [sp, #20]
   16440:	e1a06000 	mov	r6, r0
   16444:	ebffe53e 	bl	f944 <CUSBFunction::GetHost() const>
   16448:	e1a05000 	mov	r5, r0
   1644c:	e1a00006 	mov	r0, r6
   16450:	ebffe530 	bl	f918 <CUSBFunction::GetEndpoint0() const>
   16454:	e3a0c004 	mov	ip, #4
   16458:	e3a02000 	mov	r2, #0
   1645c:	e28d3014 	add	r3, sp, #20
   16460:	e6ff4074 	uxth	r4, r4
   16464:	e1a01000 	mov	r1, r0
   16468:	e58d2000 	str	r2, [sp]
   1646c:	e58d3008 	str	r3, [sp, #8]
   16470:	e1a00005 	mov	r0, r5
   16474:	e3a030a0 	mov	r3, #160	; 0xa0
   16478:	e3a02040 	mov	r2, #64	; 0x40
   1647c:	e58d4004 	str	r4, [sp, #4]
   16480:	e58dc00c 	str	ip, [sp, #12]
   16484:	ebfff0da 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16488:	e1e00000 	mvn	r0, r0
   1648c:	e1a00fa0 	lsr	r0, r0, #31
   16490:	e28dd018 	add	sp, sp, #24
   16494:	e8bd8070 	pop	{r4, r5, r6, pc}

00016498 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   16498:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1649c:	e24dd014 	sub	sp, sp, #20
   164a0:	e1a06002 	mov	r6, r2
   164a4:	e1a04001 	mov	r4, r1
   164a8:	e1a07000 	mov	r7, r0
   164ac:	ebffe524 	bl	f944 <CUSBFunction::GetHost() const>
   164b0:	e1a05000 	mov	r5, r0
   164b4:	e1a00007 	mov	r0, r7
   164b8:	ebffe516 	bl	f918 <CUSBFunction::GetEndpoint0() const>
   164bc:	e3a02004 	mov	r2, #4
   164c0:	e3a03000 	mov	r3, #0
   164c4:	e6ff4074 	uxth	r4, r4
   164c8:	e1a01000 	mov	r1, r0
   164cc:	e58d200c 	str	r2, [sp, #12]
   164d0:	e58d3000 	str	r3, [sp]
   164d4:	e1a00005 	mov	r0, r5
   164d8:	e3a030a1 	mov	r3, #161	; 0xa1
   164dc:	e3a020c0 	mov	r2, #192	; 0xc0
   164e0:	e98d0050 	stmib	sp, {r4, r6}
   164e4:	ebfff0c2 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   164e8:	e2400004 	sub	r0, r0, #4
   164ec:	e16f0f10 	clz	r0, r0
   164f0:	e1a002a0 	lsr	r0, r0, #5
   164f4:	e28dd014 	add	sp, sp, #20
   164f8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000164fc <CSMSC951xDevice::PHYWaitNotBusy()>:
   164fc:	e92d4070 	push	{r4, r5, r6, lr}
   16500:	e24dd008 	sub	sp, sp, #8
   16504:	e1a06000 	mov	r6, r0
   16508:	eb004e55 	bl	29e64 <CTimer::Get()>
   1650c:	e2504000 	subs	r4, r0, #0
   16510:	0a000013 	beq	16564 <CSMSC951xDevice::PHYWaitNotBusy()+0x68>
   16514:	eb004ba0 	bl	2939c <CTimer::GetTicks() const>
   16518:	e1a05000 	mov	r5, r0
   1651c:	ea000008 	b	16544 <CSMSC951xDevice::PHYWaitNotBusy()+0x48>
   16520:	e3a01f45 	mov	r1, #276	; 0x114
   16524:	e1a00006 	mov	r0, r6
   16528:	e28d2004 	add	r2, sp, #4
   1652c:	ebffffd9 	bl	16498 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   16530:	e3500000 	cmp	r0, #0
   16534:	0a000007 	beq	16558 <CSMSC951xDevice::PHYWaitNotBusy()+0x5c>
   16538:	e59d2004 	ldr	r2, [sp, #4]
   1653c:	e3120001 	tst	r2, #1
   16540:	0a000005 	beq	1655c <CSMSC951xDevice::PHYWaitNotBusy()+0x60>
   16544:	e1a00004 	mov	r0, r4
   16548:	eb004b93 	bl	2939c <CTimer::GetTicks() const>
   1654c:	e0403005 	sub	r3, r0, r5
   16550:	e3530063 	cmp	r3, #99	; 0x63
   16554:	9afffff1 	bls	16520 <CSMSC951xDevice::PHYWaitNotBusy()+0x24>
   16558:	e3a00000 	mov	r0, #0
   1655c:	e28dd008 	add	sp, sp, #8
   16560:	e8bd8070 	pop	{r4, r5, r6, pc}
   16564:	e59f2008 	ldr	r2, [pc, #8]	; 16574 <CSMSC951xDevice::PHYWaitNotBusy()+0x78>
   16568:	e59f1008 	ldr	r1, [pc, #8]	; 16578 <CSMSC951xDevice::PHYWaitNotBusy()+0x7c>
   1656c:	e59f0008 	ldr	r0, [pc, #8]	; 1657c <CSMSC951xDevice::PHYWaitNotBusy()+0x80>
   16570:	eb00386f 	bl	24734 <assertion_failed>
   16574:	0000018e 	.word	0x0000018e
   16578:	0003f8d4 	.word	0x0003f8d4
   1657c:	0003f78c 	.word	0x0003f78c

00016580 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   16580:	e351001f 	cmp	r1, #31
   16584:	e92d4070 	push	{r4, r5, r6, lr}
   16588:	8a000017 	bhi	165ec <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x6c>
   1658c:	e1a04001 	mov	r4, r1
   16590:	e1a06002 	mov	r6, r2
   16594:	e1a05000 	mov	r5, r0
   16598:	ebffffd7 	bl	164fc <CSMSC951xDevice::PHYWaitNotBusy()>
   1659c:	e3500000 	cmp	r0, #0
   165a0:	1a000001 	bne	165ac <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x2c>
   165a4:	e3a00000 	mov	r0, #0
   165a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   165ac:	e1a02006 	mov	r2, r6
   165b0:	e3a01f46 	mov	r1, #280	; 0x118
   165b4:	e1a00005 	mov	r0, r5
   165b8:	ebffff9c 	bl	16430 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   165bc:	e3500000 	cmp	r0, #0
   165c0:	0afffff7 	beq	165a4 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   165c4:	e59f2030 	ldr	r2, [pc, #48]	; 165fc <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x7c>
   165c8:	e3a01f45 	mov	r1, #276	; 0x114
   165cc:	e1a00005 	mov	r0, r5
   165d0:	e1822304 	orr	r2, r2, r4, lsl #6
   165d4:	ebffff95 	bl	16430 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   165d8:	e3500000 	cmp	r0, #0
   165dc:	0afffff0 	beq	165a4 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   165e0:	e1a00005 	mov	r0, r5
   165e4:	e8bd4070 	pop	{r4, r5, r6, lr}
   165e8:	eaffffc3 	b	164fc <CSMSC951xDevice::PHYWaitNotBusy()>
   165ec:	e59f200c 	ldr	r2, [pc, #12]	; 16600 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x80>
   165f0:	e59f100c 	ldr	r1, [pc, #12]	; 16604 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x84>
   165f4:	e59f000c 	ldr	r0, [pc, #12]	; 16608 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x88>
   165f8:	eb00384d 	bl	24734 <assertion_failed>
   165fc:	00000803 	.word	0x00000803
   16600:	00000162 	.word	0x00000162
   16604:	0003f8d4 	.word	0x0003f8d4
   16608:	0003f798 	.word	0x0003f798

0001660c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   1660c:	e92d4070 	push	{r4, r5, r6, lr}
   16610:	e351001f 	cmp	r1, #31
   16614:	e24dd008 	sub	sp, sp, #8
   16618:	8a000023 	bhi	166ac <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xa0>
   1661c:	e1a04001 	mov	r4, r1
   16620:	e1a06002 	mov	r6, r2
   16624:	e1a05000 	mov	r5, r0
   16628:	ebffffb3 	bl	164fc <CSMSC951xDevice::PHYWaitNotBusy()>
   1662c:	e3500000 	cmp	r0, #0
   16630:	1a000001 	bne	1663c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x30>
   16634:	e28dd008 	add	sp, sp, #8
   16638:	e8bd8070 	pop	{r4, r5, r6, pc}
   1663c:	e59f2078 	ldr	r2, [pc, #120]	; 166bc <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb0>
   16640:	e3a01f45 	mov	r1, #276	; 0x114
   16644:	e1a00005 	mov	r0, r5
   16648:	e1822304 	orr	r2, r2, r4, lsl #6
   1664c:	ebffff77 	bl	16430 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16650:	e3500000 	cmp	r0, #0
   16654:	0a000003 	beq	16668 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x5c>
   16658:	e1a00005 	mov	r0, r5
   1665c:	ebffffa6 	bl	164fc <CSMSC951xDevice::PHYWaitNotBusy()>
   16660:	e3500000 	cmp	r0, #0
   16664:	1a000002 	bne	16674 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x68>
   16668:	e3a00000 	mov	r0, #0
   1666c:	e28dd008 	add	sp, sp, #8
   16670:	e8bd8070 	pop	{r4, r5, r6, pc}
   16674:	e1a00005 	mov	r0, r5
   16678:	e3a01f46 	mov	r1, #280	; 0x118
   1667c:	e28d2004 	add	r2, sp, #4
   16680:	ebffff84 	bl	16498 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   16684:	e3500000 	cmp	r0, #0
   16688:	0afffff6 	beq	16668 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x5c>
   1668c:	e3560000 	cmp	r6, #0
   16690:	159d3004 	ldrne	r3, [sp, #4]
   16694:	11c630b0 	strhne	r3, [r6]
   16698:	1affffe5 	bne	16634 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x28>
   1669c:	e59f201c 	ldr	r2, [pc, #28]	; 166c0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb4>
   166a0:	e59f101c 	ldr	r1, [pc, #28]	; 166c4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb8>
   166a4:	e59f001c 	ldr	r0, [pc, #28]	; 166c8 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xbc>
   166a8:	eb003821 	bl	24734 <assertion_failed>
   166ac:	e59f2018 	ldr	r2, [pc, #24]	; 166cc <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc0>
   166b0:	e59f100c 	ldr	r1, [pc, #12]	; 166c4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb8>
   166b4:	e59f0014 	ldr	r0, [pc, #20]	; 166d0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc4>
   166b8:	eb00381d 	bl	24734 <assertion_failed>
   166bc:	00000801 	.word	0x00000801
   166c0:	00000185 	.word	0x00000185
   166c4:	0003f8d4 	.word	0x0003f8d4
   166c8:	0003f7a8 	.word	0x0003f7a8
   166cc:	00000175 	.word	0x00000175
   166d0:	0003f798 	.word	0x0003f798

000166d4 <CSMSC951xDevice::IsLinkUp()>:
   166d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   166d8:	e24dd00c 	sub	sp, sp, #12
   166dc:	e3a01001 	mov	r1, #1
   166e0:	e28d2006 	add	r2, sp, #6
   166e4:	ebffffc8 	bl	1660c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   166e8:	e3500000 	cmp	r0, #0
   166ec:	11dd00b6 	ldrhne	r0, [sp, #6]
   166f0:	11a00140 	asrne	r0, r0, #2
   166f4:	12000001 	andne	r0, r0, #1
   166f8:	e28dd00c 	add	sp, sp, #12
   166fc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00016700 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()>:
   16700:	e2400010 	sub	r0, r0, #16
   16704:	eafffff2 	b	166d4 <CSMSC951xDevice::IsLinkUp()>

00016708 <CSMSC951xDevice::GetLinkSpeed()>:
   16708:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1670c:	e24dd00c 	sub	sp, sp, #12
   16710:	e3a0101f 	mov	r1, #31
   16714:	e28d2006 	add	r2, sp, #6
   16718:	ebffffbb 	bl	1660c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   1671c:	e3500000 	cmp	r0, #0
   16720:	0a000007 	beq	16744 <CSMSC951xDevice::GetLinkSpeed()+0x3c>
   16724:	e1dd30b6 	ldrh	r3, [sp, #6]
   16728:	e3130a01 	tst	r3, #4096	; 0x1000
   1672c:	0a000004 	beq	16744 <CSMSC951xDevice::GetLinkSpeed()+0x3c>
   16730:	e1a03143 	asr	r3, r3, #2
   16734:	e2033007 	and	r3, r3, #7
   16738:	e2433001 	sub	r3, r3, #1
   1673c:	e3530005 	cmp	r3, #5
   16740:	9a000002 	bls	16750 <CSMSC951xDevice::GetLinkSpeed()+0x48>
   16744:	e3a00006 	mov	r0, #6
   16748:	e28dd00c 	add	sp, sp, #12
   1674c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   16750:	e59f200c 	ldr	r2, [pc, #12]	; 16764 <CSMSC951xDevice::GetLinkSpeed()+0x5c>
   16754:	e0823003 	add	r3, r2, r3
   16758:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
   1675c:	e28dd00c 	add	sp, sp, #12
   16760:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   16764:	0003fa00 	.word	0x0003fa00

00016768 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()>:
   16768:	e2400010 	sub	r0, r0, #16
   1676c:	eaffffe5 	b	16708 <CSMSC951xDevice::GetLinkSpeed()>

00016770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   16770:	e92d4030 	push	{r4, r5, lr}
   16774:	e1a04002 	mov	r4, r2
   16778:	e24dd014 	sub	sp, sp, #20
   1677c:	e1a05001 	mov	r5, r1
   16780:	e28d200c 	add	r2, sp, #12
   16784:	e1a01004 	mov	r1, r4
   16788:	ebffff42 	bl	16498 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   1678c:	e3500000 	cmp	r0, #0
   16790:	0a000008 	beq	167b8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x48>
   16794:	eb0040ce 	bl	26ad4 <CLogger::Get()>
   16798:	e59d300c 	ldr	r3, [sp, #12]
   1679c:	e3a02004 	mov	r2, #4
   167a0:	e88d0028 	stm	sp, {r3, r5}
   167a4:	e59f102c 	ldr	r1, [pc, #44]	; 167d8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   167a8:	e59f302c 	ldr	r3, [pc, #44]	; 167dc <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x6c>
   167ac:	eb00400a 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   167b0:	e28dd014 	add	sp, sp, #20
   167b4:	e8bd8030 	pop	{r4, r5, pc}
   167b8:	eb0040c5 	bl	26ad4 <CLogger::Get()>
   167bc:	e3a02001 	mov	r2, #1
   167c0:	e59f3018 	ldr	r3, [pc, #24]	; 167e0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x70>
   167c4:	e59f100c 	ldr	r1, [pc, #12]	; 167d8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   167c8:	e58d4000 	str	r4, [sp]
   167cc:	eb004002 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   167d0:	e28dd014 	add	sp, sp, #20
   167d4:	e8bd8030 	pop	{r4, r5, pc}
   167d8:	0003fa70 	.word	0x0003fa70
   167dc:	0003f904 	.word	0x0003f904
   167e0:	0003f770 	.word	0x0003f770

000167e4 <CSMSC951xDevice::DumpRegs()>:
   167e4:	e92d4010 	push	{r4, lr}
   167e8:	e1a04000 	mov	r4, r0
   167ec:	e3a02000 	mov	r2, #0
   167f0:	e59f1134 	ldr	r1, [pc, #308]	; 1692c <CSMSC951xDevice::DumpRegs()+0x148>
   167f4:	ebffffdd 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   167f8:	e1a00004 	mov	r0, r4
   167fc:	e3a02008 	mov	r2, #8
   16800:	e59f1128 	ldr	r1, [pc, #296]	; 16930 <CSMSC951xDevice::DumpRegs()+0x14c>
   16804:	ebffffd9 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16808:	e1a00004 	mov	r0, r4
   1680c:	e3a0200c 	mov	r2, #12
   16810:	e59f111c 	ldr	r1, [pc, #284]	; 16934 <CSMSC951xDevice::DumpRegs()+0x150>
   16814:	ebffffd5 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16818:	e1a00004 	mov	r0, r4
   1681c:	e3a02010 	mov	r2, #16
   16820:	e59f1110 	ldr	r1, [pc, #272]	; 16938 <CSMSC951xDevice::DumpRegs()+0x154>
   16824:	ebffffd1 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16828:	e1a00004 	mov	r0, r4
   1682c:	e3a02014 	mov	r2, #20
   16830:	e59f1104 	ldr	r1, [pc, #260]	; 1693c <CSMSC951xDevice::DumpRegs()+0x158>
   16834:	ebffffcd 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16838:	e1a00004 	mov	r0, r4
   1683c:	e3a02018 	mov	r2, #24
   16840:	e59f10f8 	ldr	r1, [pc, #248]	; 16940 <CSMSC951xDevice::DumpRegs()+0x15c>
   16844:	ebffffc9 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16848:	e1a00004 	mov	r0, r4
   1684c:	e3a02020 	mov	r2, #32
   16850:	e59f10ec 	ldr	r1, [pc, #236]	; 16944 <CSMSC951xDevice::DumpRegs()+0x160>
   16854:	ebffffc5 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16858:	e1a00004 	mov	r0, r4
   1685c:	e3a02024 	mov	r2, #36	; 0x24
   16860:	e59f10e0 	ldr	r1, [pc, #224]	; 16948 <CSMSC951xDevice::DumpRegs()+0x164>
   16864:	ebffffc1 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16868:	e1a00004 	mov	r0, r4
   1686c:	e3a02028 	mov	r2, #40	; 0x28
   16870:	e59f10d4 	ldr	r1, [pc, #212]	; 1694c <CSMSC951xDevice::DumpRegs()+0x168>
   16874:	ebffffbd 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16878:	e1a00004 	mov	r0, r4
   1687c:	e3a0202c 	mov	r2, #44	; 0x2c
   16880:	e59f10c8 	ldr	r1, [pc, #200]	; 16950 <CSMSC951xDevice::DumpRegs()+0x16c>
   16884:	ebffffb9 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16888:	e1a00004 	mov	r0, r4
   1688c:	e3a02038 	mov	r2, #56	; 0x38
   16890:	e59f10bc 	ldr	r1, [pc, #188]	; 16954 <CSMSC951xDevice::DumpRegs()+0x170>
   16894:	ebffffb5 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16898:	e1a00004 	mov	r0, r4
   1689c:	e3a02068 	mov	r2, #104	; 0x68
   168a0:	e59f10b0 	ldr	r1, [pc, #176]	; 16958 <CSMSC951xDevice::DumpRegs()+0x174>
   168a4:	ebffffb1 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168a8:	e1a00004 	mov	r0, r4
   168ac:	e3a0206c 	mov	r2, #108	; 0x6c
   168b0:	e59f10a4 	ldr	r1, [pc, #164]	; 1695c <CSMSC951xDevice::DumpRegs()+0x178>
   168b4:	ebffffad 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168b8:	e1a00004 	mov	r0, r4
   168bc:	e3a02c01 	mov	r2, #256	; 0x100
   168c0:	e59f1098 	ldr	r1, [pc, #152]	; 16960 <CSMSC951xDevice::DumpRegs()+0x17c>
   168c4:	ebffffa9 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168c8:	e1a00004 	mov	r0, r4
   168cc:	e3a02f41 	mov	r2, #260	; 0x104
   168d0:	e59f108c 	ldr	r1, [pc, #140]	; 16964 <CSMSC951xDevice::DumpRegs()+0x180>
   168d4:	ebffffa5 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168d8:	e1a00004 	mov	r0, r4
   168dc:	e3a02f42 	mov	r2, #264	; 0x108
   168e0:	e59f1080 	ldr	r1, [pc, #128]	; 16968 <CSMSC951xDevice::DumpRegs()+0x184>
   168e4:	ebffffa1 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168e8:	e1a00004 	mov	r0, r4
   168ec:	e3a02f43 	mov	r2, #268	; 0x10c
   168f0:	e59f1074 	ldr	r1, [pc, #116]	; 1696c <CSMSC951xDevice::DumpRegs()+0x188>
   168f4:	ebffff9d 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168f8:	e1a00004 	mov	r0, r4
   168fc:	e3a02e11 	mov	r2, #272	; 0x110
   16900:	e59f1068 	ldr	r1, [pc, #104]	; 16970 <CSMSC951xDevice::DumpRegs()+0x18c>
   16904:	ebffff99 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16908:	e1a00004 	mov	r0, r4
   1690c:	e3a02f47 	mov	r2, #284	; 0x11c
   16910:	e59f105c 	ldr	r1, [pc, #92]	; 16974 <CSMSC951xDevice::DumpRegs()+0x190>
   16914:	ebffff95 	bl	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16918:	e1a00004 	mov	r0, r4
   1691c:	e8bd4010 	pop	{r4, lr}
   16920:	e3a02f4b 	mov	r2, #300	; 0x12c
   16924:	e59f104c 	ldr	r1, [pc, #76]	; 16978 <CSMSC951xDevice::DumpRegs()+0x194>
   16928:	eaffff90 	b	16770 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1692c:	0003f90c 	.word	0x0003f90c
   16930:	0003f914 	.word	0x0003f914
   16934:	0003f91c 	.word	0x0003f91c
   16938:	0003f924 	.word	0x0003f924
   1693c:	0003f92c 	.word	0x0003f92c
   16940:	0003f934 	.word	0x0003f934
   16944:	0003f940 	.word	0x0003f940
   16948:	0003f948 	.word	0x0003f948
   1694c:	0003f94c 	.word	0x0003f94c
   16950:	0003f958 	.word	0x0003f958
   16954:	0003f960 	.word	0x0003f960
   16958:	0003f96c 	.word	0x0003f96c
   1695c:	0003f978 	.word	0x0003f978
   16960:	0003f984 	.word	0x0003f984
   16964:	0003f98c 	.word	0x0003f98c
   16968:	0003f994 	.word	0x0003f994
   1696c:	0003f99c 	.word	0x0003f99c
   16970:	0003f9a4 	.word	0x0003f9a4
   16974:	0003f9ac 	.word	0x0003f9ac
   16978:	0003f9b4 	.word	0x0003f9b4

0001697c <CSMSC951xDevice::Configure()>:
   1697c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16980:	e3a07000 	mov	r7, #0
   16984:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   16988:	e1a01007 	mov	r1, r7
   1698c:	e1a05000 	mov	r5, r0
   16990:	e28d001c 	add	r0, sp, #28
   16994:	eb003787 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   16998:	e3a03014 	mov	r3, #20
   1699c:	e59f1284 	ldr	r1, [pc, #644]	; 16c28 <CSMSC951xDevice::Configure()+0x2ac>
   169a0:	e28d001c 	add	r0, sp, #28
   169a4:	e58d7000 	str	r7, [sp]
   169a8:	e28d2034 	add	r2, sp, #52	; 0x34
   169ac:	eb00378d 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   169b0:	e2504000 	subs	r4, r0, #0
   169b4:	0a00006e 	beq	16b74 <CSMSC951xDevice::Configure()+0x1f8>
   169b8:	e285601c 	add	r6, r5, #28
   169bc:	e28d1040 	add	r1, sp, #64	; 0x40
   169c0:	e1a00006 	mov	r0, r6
   169c4:	eb00509d 	bl	2ac40 <CMACAddress::Set(unsigned char const*)>
   169c8:	e28d0024 	add	r0, sp, #36	; 0x24
   169cc:	eb004430 	bl	27a94 <CString::CString()>
   169d0:	e28d1024 	add	r1, sp, #36	; 0x24
   169d4:	e1a00006 	mov	r0, r6
   169d8:	eb0050f2 	bl	2ada8 <CMACAddress::Format(CString*) const>
   169dc:	eb00403c 	bl	26ad4 <CLogger::Get()>
   169e0:	e1a04000 	mov	r4, r0
   169e4:	e28d0024 	add	r0, sp, #36	; 0x24
   169e8:	eb004441 	bl	27af4 <CString::operator char const*() const>
   169ec:	e1a02000 	mov	r2, r0
   169f0:	e59f3234 	ldr	r3, [pc, #564]	; 16c2c <CSMSC951xDevice::Configure()+0x2b0>
   169f4:	e1a00004 	mov	r0, r4
   169f8:	e59f1230 	ldr	r1, [pc, #560]	; 16c30 <CSMSC951xDevice::Configure()+0x2b4>
   169fc:	e58d2000 	str	r2, [sp]
   16a00:	e3a02004 	mov	r2, #4
   16a04:	eb003f74 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16a08:	e1a00005 	mov	r0, r5
   16a0c:	ebffe3ab 	bl	f8c0 <CUSBFunction::GetNumEndpoints() const>
   16a10:	e3500003 	cmp	r0, #3
   16a14:	0a00000e 	beq	16a54 <CSMSC951xDevice::Configure()+0xd8>
   16a18:	e1a00005 	mov	r0, r5
   16a1c:	e59f120c 	ldr	r1, [pc, #524]	; 16c30 <CSMSC951xDevice::Configure()+0x2b4>
   16a20:	e1a04007 	mov	r4, r7
   16a24:	ebffe3dc 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   16a28:	e28d0024 	add	r0, sp, #36	; 0x24
   16a2c:	eb0043e5 	bl	279c8 <CString::~CString()>
   16a30:	e28d001c 	add	r0, sp, #28
   16a34:	eb003766 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   16a38:	e1a00004 	mov	r0, r4
   16a3c:	e28dd04c 	add	sp, sp, #76	; 0x4c
   16a40:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16a44:	e5d43003 	ldrb	r3, [r4, #3]
   16a48:	e203303f 	and	r3, r3, #63	; 0x3f
   16a4c:	e3530002 	cmp	r3, #2
   16a50:	0a000035 	beq	16b2c <CSMSC951xDevice::Configure()+0x1b0>
   16a54:	e3a01005 	mov	r1, #5
   16a58:	e1a00005 	mov	r0, r5
   16a5c:	ebffe3c3 	bl	f970 <CUSBFunction::GetDescriptor(unsigned char)>
   16a60:	e2504000 	subs	r4, r0, #0
   16a64:	1afffff6 	bne	16a44 <CSMSC951xDevice::Configure()+0xc8>
   16a68:	e5953014 	ldr	r3, [r5, #20]
   16a6c:	e1a00005 	mov	r0, r5
   16a70:	e3530000 	cmp	r3, #0
   16a74:	0a00004a 	beq	16ba4 <CSMSC951xDevice::Configure()+0x228>
   16a78:	e5953018 	ldr	r3, [r5, #24]
   16a7c:	e3530000 	cmp	r3, #0
   16a80:	0a000047 	beq	16ba4 <CSMSC951xDevice::Configure()+0x228>
   16a84:	ebffe2d1 	bl	f5d0 <CUSBFunction::Configure()>
   16a88:	e2504000 	subs	r4, r0, #0
   16a8c:	0a00003e 	beq	16b8c <CSMSC951xDevice::Configure()+0x210>
   16a90:	e1a00006 	mov	r0, r6
   16a94:	e28d1014 	add	r1, sp, #20
   16a98:	eb005092 	bl	2ace8 <CMACAddress::CopyTo(unsigned char*) const>
   16a9c:	e5dd2019 	ldrb	r2, [sp, #25]
   16aa0:	e5dd3018 	ldrb	r3, [sp, #24]
   16aa4:	e3a01f41 	mov	r1, #260	; 0x104
   16aa8:	e1a00005 	mov	r0, r5
   16aac:	e1832402 	orr	r2, r3, r2, lsl #8
   16ab0:	e59d4014 	ldr	r4, [sp, #20]
   16ab4:	ebfffe5d 	bl	16430 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16ab8:	e3500000 	cmp	r0, #0
   16abc:	0a00004b 	beq	16bf0 <CSMSC951xDevice::Configure()+0x274>
   16ac0:	e1a02004 	mov	r2, r4
   16ac4:	e3a01f42 	mov	r1, #264	; 0x108
   16ac8:	e1a00005 	mov	r0, r5
   16acc:	ebfffe57 	bl	16430 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16ad0:	e3500000 	cmp	r0, #0
   16ad4:	0a000045 	beq	16bf0 <CSMSC951xDevice::Configure()+0x274>
   16ad8:	e3a01024 	mov	r1, #36	; 0x24
   16adc:	e1a00005 	mov	r0, r5
   16ae0:	e59f214c 	ldr	r2, [pc, #332]	; 16c34 <CSMSC951xDevice::Configure()+0x2b8>
   16ae4:	ebfffe51 	bl	16430 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16ae8:	e3500000 	cmp	r0, #0
   16aec:	0a000046 	beq	16c0c <CSMSC951xDevice::Configure()+0x290>
   16af0:	e3a01c01 	mov	r1, #256	; 0x100
   16af4:	e1a00005 	mov	r0, r5
   16af8:	e59f2138 	ldr	r2, [pc, #312]	; 16c38 <CSMSC951xDevice::Configure()+0x2bc>
   16afc:	ebfffe4b 	bl	16430 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16b00:	e3500000 	cmp	r0, #0
   16b04:	0a000040 	beq	16c0c <CSMSC951xDevice::Configure()+0x290>
   16b08:	e3a02004 	mov	r2, #4
   16b0c:	e3a01010 	mov	r1, #16
   16b10:	e1a00005 	mov	r0, r5
   16b14:	ebfffe45 	bl	16430 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16b18:	e2504000 	subs	r4, r0, #0
   16b1c:	0a00003a 	beq	16c0c <CSMSC951xDevice::Configure()+0x290>
   16b20:	e2850010 	add	r0, r5, #16
   16b24:	eb0050c0 	bl	2ae2c <CNetDevice::AddNetDevice()>
   16b28:	eaffffbe 	b	16a28 <CSMSC951xDevice::Configure()+0xac>
   16b2c:	e1d430d2 	ldrsb	r3, [r4, #2]
   16b30:	e3530000 	cmp	r3, #0
   16b34:	ba00001e 	blt	16bb4 <CSMSC951xDevice::Configure()+0x238>
   16b38:	e5953018 	ldr	r3, [r5, #24]
   16b3c:	e1a00005 	mov	r0, r5
   16b40:	e3530000 	cmp	r3, #0
   16b44:	1a000016 	bne	16ba4 <CSMSC951xDevice::Configure()+0x228>
   16b48:	ebffe368 	bl	f8f0 <CUSBFunction::GetDevice() const>
   16b4c:	e1a01000 	mov	r1, r0
   16b50:	e3a00014 	mov	r0, #20
   16b54:	e58d100c 	str	r1, [sp, #12]
   16b58:	eb0050fc 	bl	2af50 <operator new(unsigned int)>
   16b5c:	e1a07000 	mov	r7, r0
   16b60:	e1a02004 	mov	r2, r4
   16b64:	e59d100c 	ldr	r1, [sp, #12]
   16b68:	ebffe19e 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16b6c:	e5857018 	str	r7, [r5, #24]
   16b70:	eaffffb7 	b	16a54 <CSMSC951xDevice::Configure()+0xd8>
   16b74:	eb003fd6 	bl	26ad4 <CLogger::Get()>
   16b78:	e3a02001 	mov	r2, #1
   16b7c:	e59f30b8 	ldr	r3, [pc, #184]	; 16c3c <CSMSC951xDevice::Configure()+0x2c0>
   16b80:	e59f10a8 	ldr	r1, [pc, #168]	; 16c30 <CSMSC951xDevice::Configure()+0x2b4>
   16b84:	eb003f14 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16b88:	eaffffa8 	b	16a30 <CSMSC951xDevice::Configure()+0xb4>
   16b8c:	eb003fd0 	bl	26ad4 <CLogger::Get()>
   16b90:	e3a02001 	mov	r2, #1
   16b94:	e59f30a4 	ldr	r3, [pc, #164]	; 16c40 <CSMSC951xDevice::Configure()+0x2c4>
   16b98:	e59f1090 	ldr	r1, [pc, #144]	; 16c30 <CSMSC951xDevice::Configure()+0x2b4>
   16b9c:	eb003f0e 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16ba0:	eaffffa0 	b	16a28 <CSMSC951xDevice::Configure()+0xac>
   16ba4:	e59f1084 	ldr	r1, [pc, #132]	; 16c30 <CSMSC951xDevice::Configure()+0x2b4>
   16ba8:	ebffe37b 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   16bac:	e3a04000 	mov	r4, #0
   16bb0:	eaffff9c 	b	16a28 <CSMSC951xDevice::Configure()+0xac>
   16bb4:	e5953014 	ldr	r3, [r5, #20]
   16bb8:	e1a00005 	mov	r0, r5
   16bbc:	e3530000 	cmp	r3, #0
   16bc0:	1afffff7 	bne	16ba4 <CSMSC951xDevice::Configure()+0x228>
   16bc4:	ebffe349 	bl	f8f0 <CUSBFunction::GetDevice() const>
   16bc8:	e1a01000 	mov	r1, r0
   16bcc:	e3a00014 	mov	r0, #20
   16bd0:	e58d100c 	str	r1, [sp, #12]
   16bd4:	eb0050dd 	bl	2af50 <operator new(unsigned int)>
   16bd8:	e1a07000 	mov	r7, r0
   16bdc:	e1a02004 	mov	r2, r4
   16be0:	e59d100c 	ldr	r1, [sp, #12]
   16be4:	ebffe17f 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16be8:	e5857014 	str	r7, [r5, #20]
   16bec:	eaffff98 	b	16a54 <CSMSC951xDevice::Configure()+0xd8>
   16bf0:	eb003fb7 	bl	26ad4 <CLogger::Get()>
   16bf4:	e3a02001 	mov	r2, #1
   16bf8:	e59f3044 	ldr	r3, [pc, #68]	; 16c44 <CSMSC951xDevice::Configure()+0x2c8>
   16bfc:	e59f102c 	ldr	r1, [pc, #44]	; 16c30 <CSMSC951xDevice::Configure()+0x2b4>
   16c00:	eb003ef5 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16c04:	e3a04000 	mov	r4, #0
   16c08:	eaffff86 	b	16a28 <CSMSC951xDevice::Configure()+0xac>
   16c0c:	eb003fb0 	bl	26ad4 <CLogger::Get()>
   16c10:	e3a02001 	mov	r2, #1
   16c14:	e59f302c 	ldr	r3, [pc, #44]	; 16c48 <CSMSC951xDevice::Configure()+0x2cc>
   16c18:	e59f1010 	ldr	r1, [pc, #16]	; 16c30 <CSMSC951xDevice::Configure()+0x2b4>
   16c1c:	eb003eee 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16c20:	e3a04000 	mov	r4, #0
   16c24:	eaffff7f 	b	16a28 <CSMSC951xDevice::Configure()+0xac>
   16c28:	00010003 	.word	0x00010003
   16c2c:	0003f7dc 	.word	0x0003f7dc
   16c30:	0003fa70 	.word	0x0003fa70
   16c34:	01110000 	.word	0x01110000
   16c38:	0080000c 	.word	0x0080000c
   16c3c:	0003f9bc 	.word	0x0003f9bc
   16c40:	0003e6b8 	.word	0x0003e6b8
   16c44:	0003f9d4 	.word	0x0003f9d4
   16c48:	0003f9ec 	.word	0x0003f9ec

00016c4c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   16c4c:	e3a03000 	mov	r3, #0
   16c50:	e92d4070 	push	{r4, r5, r6, lr}
   16c54:	e1a04000 	mov	r4, r0
   16c58:	e5900020 	ldr	r0, [r0, #32]
   16c5c:	e59f20a0 	ldr	r2, [pc, #160]	; 16d04 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xb8>
   16c60:	e1500003 	cmp	r0, r3
   16c64:	e5842000 	str	r2, [r4]
   16c68:	e5843024 	str	r3, [r4, #36]	; 0x24
   16c6c:	0a000000 	beq	16c74 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x28>
   16c70:	eb0050c3 	bl	2af84 <operator delete[](void*)>
   16c74:	e3a03000 	mov	r3, #0
   16c78:	e5945018 	ldr	r5, [r4, #24]
   16c7c:	e5843020 	str	r3, [r4, #32]
   16c80:	e1550003 	cmp	r5, r3
   16c84:	0a000004 	beq	16c9c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x50>
   16c88:	e1a00005 	mov	r0, r5
   16c8c:	ebffe1b9 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   16c90:	e1a00005 	mov	r0, r5
   16c94:	e3a01014 	mov	r1, #20
   16c98:	eb0050ba 	bl	2af88 <operator delete(void*, unsigned int)>
   16c9c:	e3a03000 	mov	r3, #0
   16ca0:	e5945014 	ldr	r5, [r4, #20]
   16ca4:	e5843018 	str	r3, [r4, #24]
   16ca8:	e1550003 	cmp	r5, r3
   16cac:	0a000004 	beq	16cc4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x78>
   16cb0:	e1a00005 	mov	r0, r5
   16cb4:	ebffe1af 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   16cb8:	e1a00005 	mov	r0, r5
   16cbc:	e3a01014 	mov	r1, #20
   16cc0:	eb0050b0 	bl	2af88 <operator delete(void*, unsigned int)>
   16cc4:	e3a03000 	mov	r3, #0
   16cc8:	e5945010 	ldr	r5, [r4, #16]
   16ccc:	e5843014 	str	r3, [r4, #20]
   16cd0:	e1550003 	cmp	r5, r3
   16cd4:	0a000004 	beq	16cec <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xa0>
   16cd8:	e1a00005 	mov	r0, r5
   16cdc:	ebffe1a5 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   16ce0:	e1a00005 	mov	r0, r5
   16ce4:	e3a01014 	mov	r1, #20
   16ce8:	eb0050a6 	bl	2af88 <operator delete(void*, unsigned int)>
   16cec:	e3a03000 	mov	r3, #0
   16cf0:	e1a00004 	mov	r0, r4
   16cf4:	e5843010 	str	r3, [r4, #16]
   16cf8:	ebffe20b 	bl	f52c <CUSBFunction::~CUSBFunction()>
   16cfc:	e1a00004 	mov	r0, r4
   16d00:	e8bd8070 	pop	{r4, r5, r6, pc}
   16d04:	0003fb24 	.word	0x0003fb24

00016d08 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   16d08:	e92d4010 	push	{r4, lr}
   16d0c:	e1a04000 	mov	r4, r0
   16d10:	ebffffcd 	bl	16c4c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   16d14:	e1a00004 	mov	r0, r4
   16d18:	e3a01028 	mov	r1, #40	; 0x28
   16d1c:	eb005099 	bl	2af88 <operator delete(void*, unsigned int)>
   16d20:	e1a00004 	mov	r0, r4
   16d24:	e8bd8010 	pop	{r4, pc}

00016d28 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   16d28:	e92d4010 	push	{r4, lr}
   16d2c:	e1a04000 	mov	r4, r0
   16d30:	ebffe28f 	bl	f774 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   16d34:	e3a03000 	mov	r3, #0
   16d38:	e59f2020 	ldr	r2, [pc, #32]	; 16d60 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x38>
   16d3c:	e1a00004 	mov	r0, r4
   16d40:	e5843010 	str	r3, [r4, #16]
   16d44:	e5842000 	str	r2, [r4]
   16d48:	e5843014 	str	r3, [r4, #20]
   16d4c:	e5843018 	str	r3, [r4, #24]
   16d50:	e584301c 	str	r3, [r4, #28]
   16d54:	e5843020 	str	r3, [r4, #32]
   16d58:	e5843024 	str	r3, [r4, #36]	; 0x24
   16d5c:	e8bd8010 	pop	{r4, pc}
   16d60:	0003fb24 	.word	0x0003fb24

00016d64 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   16d64:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16d68:	e24dd014 	sub	sp, sp, #20
   16d6c:	e1a06001 	mov	r6, r1
   16d70:	e1a04002 	mov	r4, r2
   16d74:	e1a07000 	mov	r7, r0
   16d78:	ebffe2f1 	bl	f944 <CUSBFunction::GetHost() const>
   16d7c:	e1a05000 	mov	r5, r0
   16d80:	e1a00007 	mov	r0, r7
   16d84:	ebffe2e3 	bl	f918 <CUSBFunction::GetEndpoint0() const>
   16d88:	e3a03000 	mov	r3, #0
   16d8c:	e6ff4074 	uxth	r4, r4
   16d90:	e1a01000 	mov	r1, r0
   16d94:	e3a02020 	mov	r2, #32
   16d98:	e1a00005 	mov	r0, r5
   16d9c:	e58d6008 	str	r6, [sp, #8]
   16da0:	e58d400c 	str	r4, [sp, #12]
   16da4:	e58d3004 	str	r3, [sp, #4]
   16da8:	e58d3000 	str	r3, [sp]
   16dac:	ebffee90 	bl	127f4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16db0:	e1e00000 	mvn	r0, r0
   16db4:	e1a00fa0 	lsr	r0, r0, #31
   16db8:	e28dd014 	add	sp, sp, #20
   16dbc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00016dc0 <CUSBBluetoothDevice::StartRequest()>:
   16dc0:	e92d4070 	push	{r4, r5, r6, lr}
   16dc4:	e1a04000 	mov	r4, r0
   16dc8:	e5900010 	ldr	r0, [r0, #16]
   16dcc:	e24dd010 	sub	sp, sp, #16
   16dd0:	e3500000 	cmp	r0, #0
   16dd4:	0a00001f 	beq	16e58 <CUSBBluetoothDevice::StartRequest()+0x98>
   16dd8:	e5943020 	ldr	r3, [r4, #32]
   16ddc:	e3530000 	cmp	r3, #0
   16de0:	0a000020 	beq	16e68 <CUSBBluetoothDevice::StartRequest()+0xa8>
   16de4:	e594501c 	ldr	r5, [r4, #28]
   16de8:	e3550000 	cmp	r5, #0
   16dec:	1a000021 	bne	16e78 <CUSBBluetoothDevice::StartRequest()+0xb8>
   16df0:	ebffe175 	bl	f3cc <CUSBEndpoint::GetMaxPacketSize() const>
   16df4:	e1a03000 	mov	r3, r0
   16df8:	e3a00028 	mov	r0, #40	; 0x28
   16dfc:	e58d300c 	str	r3, [sp, #12]
   16e00:	ebfff5e6 	bl	145a0 <CUSBRequest::operator new(unsigned int)>
   16e04:	e1a06000 	mov	r6, r0
   16e08:	e58d5000 	str	r5, [sp]
   16e0c:	e59d300c 	ldr	r3, [sp, #12]
   16e10:	e5942020 	ldr	r2, [r4, #32]
   16e14:	e5941010 	ldr	r1, [r4, #16]
   16e18:	ebfff55f 	bl	1439c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   16e1c:	e1a03004 	mov	r3, r4
   16e20:	e1a02005 	mov	r2, r5
   16e24:	e1a00006 	mov	r0, r6
   16e28:	e59f1058 	ldr	r1, [pc, #88]	; 16e88 <CUSBBluetoothDevice::StartRequest()+0xc8>
   16e2c:	e584601c 	str	r6, [r4, #28]
   16e30:	ebfff5bb 	bl	14524 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   16e34:	e1a00004 	mov	r0, r4
   16e38:	ebffe2c1 	bl	f944 <CUSBFunction::GetHost() const>
   16e3c:	e1a02005 	mov	r2, r5
   16e40:	e5903000 	ldr	r3, [r0]
   16e44:	e594101c 	ldr	r1, [r4, #28]
   16e48:	e593300c 	ldr	r3, [r3, #12]
   16e4c:	e28dd010 	add	sp, sp, #16
   16e50:	e8bd4070 	pop	{r4, r5, r6, lr}
   16e54:	e12fff13 	bx	r3
   16e58:	e3a020a3 	mov	r2, #163	; 0xa3
   16e5c:	e59f1028 	ldr	r1, [pc, #40]	; 16e8c <CUSBBluetoothDevice::StartRequest()+0xcc>
   16e60:	e59f0028 	ldr	r0, [pc, #40]	; 16e90 <CUSBBluetoothDevice::StartRequest()+0xd0>
   16e64:	eb003632 	bl	24734 <assertion_failed>
   16e68:	e3a020a4 	mov	r2, #164	; 0xa4
   16e6c:	e59f1018 	ldr	r1, [pc, #24]	; 16e8c <CUSBBluetoothDevice::StartRequest()+0xcc>
   16e70:	e59f001c 	ldr	r0, [pc, #28]	; 16e94 <CUSBBluetoothDevice::StartRequest()+0xd4>
   16e74:	eb00362e 	bl	24734 <assertion_failed>
   16e78:	e3a020a6 	mov	r2, #166	; 0xa6
   16e7c:	e59f1008 	ldr	r1, [pc, #8]	; 16e8c <CUSBBluetoothDevice::StartRequest()+0xcc>
   16e80:	e59f0010 	ldr	r0, [pc, #16]	; 16e98 <CUSBBluetoothDevice::StartRequest()+0xd8>
   16e84:	eb00362a 	bl	24734 <assertion_failed>
   16e88:	00016fec 	.word	0x00016fec
   16e8c:	0003fa84 	.word	0x0003fa84
   16e90:	0003fa98 	.word	0x0003fa98
   16e94:	0003fab4 	.word	0x0003fab4
   16e98:	0003ee18 	.word	0x0003ee18

00016e9c <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   16e9c:	e3510000 	cmp	r1, #0
   16ea0:	e5801024 	str	r1, [r0, #36]	; 0x24
   16ea4:	0a000000 	beq	16eac <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x10>
   16ea8:	eaffffc4 	b	16dc0 <CUSBBluetoothDevice::StartRequest()>
   16eac:	e3a0209c 	mov	r2, #156	; 0x9c
   16eb0:	e92d4010 	push	{r4, lr}
   16eb4:	e59f1004 	ldr	r1, [pc, #4]	; 16ec0 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x24>
   16eb8:	e59f0004 	ldr	r0, [pc, #4]	; 16ec4 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x28>
   16ebc:	eb00361c 	bl	24734 <assertion_failed>
   16ec0:	0003fa84 	.word	0x0003fa84
   16ec4:	0003fac8 	.word	0x0003fac8

00016ec8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   16ec8:	e3510000 	cmp	r1, #0
   16ecc:	e92d4070 	push	{r4, r5, r6, lr}
   16ed0:	0a00002d 	beq	16f8c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   16ed4:	e590501c 	ldr	r5, [r0, #28]
   16ed8:	e1a04000 	mov	r4, r0
   16edc:	e1550001 	cmp	r5, r1
   16ee0:	1a00002d 	bne	16f9c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   16ee4:	e5903020 	ldr	r3, [r0, #32]
   16ee8:	e3530000 	cmp	r3, #0
   16eec:	0a00002e 	beq	16fac <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   16ef0:	e1a00005 	mov	r0, r5
   16ef4:	ebfff557 	bl	14458 <CUSBRequest::GetStatus() const>
   16ef8:	e3500000 	cmp	r0, #0
   16efc:	0a00001c 	beq	16f74 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xac>
   16f00:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   16f04:	e3560000 	cmp	r6, #0
   16f08:	0a00002b 	beq	16fbc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xf4>
   16f0c:	e1a00005 	mov	r0, r5
   16f10:	e5945020 	ldr	r5, [r4, #32]
   16f14:	ebfff551 	bl	14460 <CUSBRequest::GetResultLength() const>
   16f18:	e1a01000 	mov	r1, r0
   16f1c:	e1a00005 	mov	r0, r5
   16f20:	e12fff36 	blx	r6
   16f24:	e594501c 	ldr	r5, [r4, #28]
   16f28:	e3550000 	cmp	r5, #0
   16f2c:	0a000004 	beq	16f44 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x7c>
   16f30:	e1a00005 	mov	r0, r5
   16f34:	ebfff538 	bl	1441c <CUSBRequest::~CUSBRequest()>
   16f38:	e1a00005 	mov	r0, r5
   16f3c:	e3a01028 	mov	r1, #40	; 0x28
   16f40:	ebfff5ab 	bl	145f4 <CUSBRequest::operator delete(void*, unsigned int)>
   16f44:	e3a03000 	mov	r3, #0
   16f48:	e1a00004 	mov	r0, r4
   16f4c:	e584301c 	str	r3, [r4, #28]
   16f50:	ebffff9a 	bl	16dc0 <CUSBBluetoothDevice::StartRequest()>
   16f54:	e3500000 	cmp	r0, #0
   16f58:	18bd8070 	popne	{r4, r5, r6, pc}
   16f5c:	eb003edc 	bl	26ad4 <CLogger::Get()>
   16f60:	e8bd4070 	pop	{r4, r5, r6, lr}
   16f64:	e3a02001 	mov	r2, #1
   16f68:	e59f305c 	ldr	r3, [pc, #92]	; 16fcc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x104>
   16f6c:	e59f105c 	ldr	r1, [pc, #92]	; 16fd0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x108>
   16f70:	ea003e19 	b	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16f74:	eb003ed6 	bl	26ad4 <CLogger::Get()>
   16f78:	e3a02002 	mov	r2, #2
   16f7c:	e59f3050 	ldr	r3, [pc, #80]	; 16fd4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x10c>
   16f80:	e59f1048 	ldr	r1, [pc, #72]	; 16fd0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x108>
   16f84:	eb003e14 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16f88:	eaffffe5 	b	16f24 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x5c>
   16f8c:	e3a020b2 	mov	r2, #178	; 0xb2
   16f90:	e59f1040 	ldr	r1, [pc, #64]	; 16fd8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   16f94:	e59f0040 	ldr	r0, [pc, #64]	; 16fdc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   16f98:	eb0035e5 	bl	24734 <assertion_failed>
   16f9c:	e3a020b3 	mov	r2, #179	; 0xb3
   16fa0:	e59f1030 	ldr	r1, [pc, #48]	; 16fd8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   16fa4:	e59f0034 	ldr	r0, [pc, #52]	; 16fe0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x118>
   16fa8:	eb0035e1 	bl	24734 <assertion_failed>
   16fac:	e3a020b4 	mov	r2, #180	; 0xb4
   16fb0:	e59f1020 	ldr	r1, [pc, #32]	; 16fd8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   16fb4:	e59f0028 	ldr	r0, [pc, #40]	; 16fe4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   16fb8:	eb0035dd 	bl	24734 <assertion_failed>
   16fbc:	e3a020b8 	mov	r2, #184	; 0xb8
   16fc0:	e59f1010 	ldr	r1, [pc, #16]	; 16fd8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   16fc4:	e59f001c 	ldr	r0, [pc, #28]	; 16fe8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x120>
   16fc8:	eb0035d9 	bl	24734 <assertion_failed>
   16fcc:	0003ee4c 	.word	0x0003ee4c
   16fd0:	0003fb48 	.word	0x0003fb48
   16fd4:	0003fae0 	.word	0x0003fae0
   16fd8:	0003fa84 	.word	0x0003fa84
   16fdc:	0003d604 	.word	0x0003d604
   16fe0:	0003ee3c 	.word	0x0003ee3c
   16fe4:	0003fab4 	.word	0x0003fab4
   16fe8:	0003fac8 	.word	0x0003fac8

00016fec <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   16fec:	e3520000 	cmp	r2, #0
   16ff0:	0a000002 	beq	17000 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   16ff4:	e1a01000 	mov	r1, r0
   16ff8:	e1a00002 	mov	r0, r2
   16ffc:	eaffffb1 	b	16ec8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   17000:	e3a020cc 	mov	r2, #204	; 0xcc
   17004:	e92d4010 	push	{r4, lr}
   17008:	e59f1004 	ldr	r1, [pc, #4]	; 17014 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   1700c:	e59f0004 	ldr	r0, [pc, #4]	; 17018 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   17010:	eb0035c7 	bl	24734 <assertion_failed>
   17014:	0003fa84 	.word	0x0003fa84
   17018:	0003d518 	.word	0x0003d518

0001701c <CUSBBluetoothDevice::Configure()>:
   1701c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   17020:	e24dd01c 	sub	sp, sp, #28
   17024:	e1a05000 	mov	r5, r0
   17028:	ebffe2a1 	bl	fab4 <CUSBFunction::GetInterfaceNumber() const>
   1702c:	e2506000 	subs	r6, r0, #0
   17030:	1a000044 	bne	17148 <CUSBBluetoothDevice::Configure()+0x12c>
   17034:	e1a00005 	mov	r0, r5
   17038:	ebffe220 	bl	f8c0 <CUSBFunction::GetNumEndpoints() const>
   1703c:	e3500003 	cmp	r0, #3
   17040:	1a00003a 	bne	17130 <CUSBBluetoothDevice::Configure()+0x114>
   17044:	e3a01005 	mov	r1, #5
   17048:	e1a00005 	mov	r0, r5
   1704c:	ebffe247 	bl	f970 <CUSBFunction::GetDescriptor(unsigned char)>
   17050:	e2504000 	subs	r4, r0, #0
   17054:	0a000044 	beq	1716c <CUSBBluetoothDevice::Configure()+0x150>
   17058:	e5d42003 	ldrb	r2, [r4, #3]
   1705c:	e202203f 	and	r2, r2, #63	; 0x3f
   17060:	e3520002 	cmp	r2, #2
   17064:	0a000010 	beq	170ac <CUSBBluetoothDevice::Configure()+0x90>
   17068:	e3520003 	cmp	r2, #3
   1706c:	1afffff4 	bne	17044 <CUSBBluetoothDevice::Configure()+0x28>
   17070:	e5953010 	ldr	r3, [r5, #16]
   17074:	e1a00005 	mov	r0, r5
   17078:	e3530000 	cmp	r3, #0
   1707c:	1a000044 	bne	17194 <CUSBBluetoothDevice::Configure()+0x178>
   17080:	ebffe21a 	bl	f8f0 <CUSBFunction::GetDevice() const>
   17084:	e1a01000 	mov	r1, r0
   17088:	e3a00014 	mov	r0, #20
   1708c:	e58d1004 	str	r1, [sp, #4]
   17090:	eb004fae 	bl	2af50 <operator new(unsigned int)>
   17094:	e1a06000 	mov	r6, r0
   17098:	e1a02004 	mov	r2, r4
   1709c:	e59d1004 	ldr	r1, [sp, #4]
   170a0:	ebffe050 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   170a4:	e5856010 	str	r6, [r5, #16]
   170a8:	eaffffe5 	b	17044 <CUSBBluetoothDevice::Configure()+0x28>
   170ac:	e1d430d2 	ldrsb	r3, [r4, #2]
   170b0:	e3530000 	cmp	r3, #0
   170b4:	ba00000e 	blt	170f4 <CUSBBluetoothDevice::Configure()+0xd8>
   170b8:	e5953018 	ldr	r3, [r5, #24]
   170bc:	e1a00005 	mov	r0, r5
   170c0:	e3530000 	cmp	r3, #0
   170c4:	1a000032 	bne	17194 <CUSBBluetoothDevice::Configure()+0x178>
   170c8:	ebffe208 	bl	f8f0 <CUSBFunction::GetDevice() const>
   170cc:	e1a01000 	mov	r1, r0
   170d0:	e3a00014 	mov	r0, #20
   170d4:	e58d1004 	str	r1, [sp, #4]
   170d8:	eb004f9c 	bl	2af50 <operator new(unsigned int)>
   170dc:	e1a06000 	mov	r6, r0
   170e0:	e1a02004 	mov	r2, r4
   170e4:	e59d1004 	ldr	r1, [sp, #4]
   170e8:	ebffe03e 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   170ec:	e5856018 	str	r6, [r5, #24]
   170f0:	eaffffd3 	b	17044 <CUSBBluetoothDevice::Configure()+0x28>
   170f4:	e5953014 	ldr	r3, [r5, #20]
   170f8:	e1a00005 	mov	r0, r5
   170fc:	e3530000 	cmp	r3, #0
   17100:	1a000023 	bne	17194 <CUSBBluetoothDevice::Configure()+0x178>
   17104:	ebffe1f9 	bl	f8f0 <CUSBFunction::GetDevice() const>
   17108:	e1a01000 	mov	r1, r0
   1710c:	e3a00014 	mov	r0, #20
   17110:	e58d1004 	str	r1, [sp, #4]
   17114:	eb004f8d 	bl	2af50 <operator new(unsigned int)>
   17118:	e1a06000 	mov	r6, r0
   1711c:	e1a02004 	mov	r2, r4
   17120:	e59d1004 	ldr	r1, [sp, #4]
   17124:	ebffe02f 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17128:	e5856014 	str	r6, [r5, #20]
   1712c:	eaffffc4 	b	17044 <CUSBBluetoothDevice::Configure()+0x28>
   17130:	e1a00005 	mov	r0, r5
   17134:	e59f10fc 	ldr	r1, [pc, #252]	; 17238 <CUSBBluetoothDevice::Configure()+0x21c>
   17138:	ebffe217 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   1713c:	e1a00006 	mov	r0, r6
   17140:	e28dd01c 	add	sp, sp, #28
   17144:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17148:	e3a06000 	mov	r6, #0
   1714c:	eb003e60 	bl	26ad4 <CLogger::Get()>
   17150:	e3a02002 	mov	r2, #2
   17154:	e59f30e0 	ldr	r3, [pc, #224]	; 1723c <CUSBBluetoothDevice::Configure()+0x220>
   17158:	e59f10d8 	ldr	r1, [pc, #216]	; 17238 <CUSBBluetoothDevice::Configure()+0x21c>
   1715c:	eb003d9e 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17160:	e1a00006 	mov	r0, r6
   17164:	e28dd01c 	add	sp, sp, #28
   17168:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1716c:	e5953014 	ldr	r3, [r5, #20]
   17170:	e3530000 	cmp	r3, #0
   17174:	0a000005 	beq	17190 <CUSBBluetoothDevice::Configure()+0x174>
   17178:	e5953018 	ldr	r3, [r5, #24]
   1717c:	e3530000 	cmp	r3, #0
   17180:	0a000002 	beq	17190 <CUSBBluetoothDevice::Configure()+0x174>
   17184:	e5953010 	ldr	r3, [r5, #16]
   17188:	e3530000 	cmp	r3, #0
   1718c:	1a000006 	bne	171ac <CUSBBluetoothDevice::Configure()+0x190>
   17190:	e1a00005 	mov	r0, r5
   17194:	e3a06000 	mov	r6, #0
   17198:	e59f1098 	ldr	r1, [pc, #152]	; 17238 <CUSBBluetoothDevice::Configure()+0x21c>
   1719c:	ebffe1fe 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   171a0:	e1a00006 	mov	r0, r6
   171a4:	e28dd01c 	add	sp, sp, #28
   171a8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   171ac:	e1a00005 	mov	r0, r5
   171b0:	ebffe106 	bl	f5d0 <CUSBFunction::Configure()>
   171b4:	e2506000 	subs	r6, r0, #0
   171b8:	0a000018 	beq	17220 <CUSBBluetoothDevice::Configure()+0x204>
   171bc:	e5950010 	ldr	r0, [r5, #16]
   171c0:	ebffe081 	bl	f3cc <CUSBEndpoint::GetMaxPacketSize() const>
   171c4:	eb004f67 	bl	2af68 <operator new[](unsigned int)>
   171c8:	e5850020 	str	r0, [r5, #32]
   171cc:	e28d0008 	add	r0, sp, #8
   171d0:	eb00422f 	bl	27a94 <CString::CString()>
   171d4:	e59f3064 	ldr	r3, [pc, #100]	; 17240 <CUSBBluetoothDevice::Configure()+0x224>
   171d8:	e59f1064 	ldr	r1, [pc, #100]	; 17244 <CUSBBluetoothDevice::Configure()+0x228>
   171dc:	e5932000 	ldr	r2, [r3]
   171e0:	e28d0008 	add	r0, sp, #8
   171e4:	e282c001 	add	ip, r2, #1
   171e8:	e583c000 	str	ip, [r3]
   171ec:	eb004772 	bl	28fbc <CString::Format(char const*, ...)>
   171f0:	eb003811 	bl	2523c <CDeviceNameService::Get()>
   171f4:	e1a07000 	mov	r7, r0
   171f8:	e28d0008 	add	r0, sp, #8
   171fc:	eb00423c 	bl	27af4 <CString::operator char const*() const>
   17200:	e1a03004 	mov	r3, r4
   17204:	e1a01000 	mov	r1, r0
   17208:	e1a02005 	mov	r2, r5
   1720c:	e1a00007 	mov	r0, r7
   17210:	eb003759 	bl	24f7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   17214:	e28d0008 	add	r0, sp, #8
   17218:	eb0041ea 	bl	279c8 <CString::~CString()>
   1721c:	eaffffc6 	b	1713c <CUSBBluetoothDevice::Configure()+0x120>
   17220:	eb003e2b 	bl	26ad4 <CLogger::Get()>
   17224:	e3a02001 	mov	r2, #1
   17228:	e59f3018 	ldr	r3, [pc, #24]	; 17248 <CUSBBluetoothDevice::Configure()+0x22c>
   1722c:	e59f1004 	ldr	r1, [pc, #4]	; 17238 <CUSBBluetoothDevice::Configure()+0x21c>
   17230:	eb003d69 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17234:	eaffffc0 	b	1713c <CUSBBluetoothDevice::Configure()+0x120>
   17238:	0003fb48 	.word	0x0003fb48
   1723c:	0003faf0 	.word	0x0003faf0
   17240:	000461ec 	.word	0x000461ec
   17244:	0003fb14 	.word	0x0003fb14
   17248:	0003e6b8 	.word	0x0003e6b8

0001724c <CUSBCDCEthernetDevice::GetMACAddress() const>:
   1724c:	e280001c 	add	r0, r0, #28
   17250:	e12fff1e 	bx	lr

00017254 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   17254:	e92d4070 	push	{r4, r5, r6, lr}
   17258:	e59f3074 	ldr	r3, [pc, #116]	; 172d4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x80>
   1725c:	e5905018 	ldr	r5, [r0, #24]
   17260:	e2832038 	add	r2, r3, #56	; 0x38
   17264:	e3550000 	cmp	r5, #0
   17268:	e1a04000 	mov	r4, r0
   1726c:	e5803000 	str	r3, [r0]
   17270:	e5802010 	str	r2, [r0, #16]
   17274:	0a000004 	beq	1728c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x38>
   17278:	e1a00005 	mov	r0, r5
   1727c:	ebffe03d 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   17280:	e1a00005 	mov	r0, r5
   17284:	e3a01014 	mov	r1, #20
   17288:	eb004f3e 	bl	2af88 <operator delete(void*, unsigned int)>
   1728c:	e3a03000 	mov	r3, #0
   17290:	e5945014 	ldr	r5, [r4, #20]
   17294:	e5843018 	str	r3, [r4, #24]
   17298:	e1550003 	cmp	r5, r3
   1729c:	0a000004 	beq	172b4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x60>
   172a0:	e1a00005 	mov	r0, r5
   172a4:	ebffe033 	bl	f378 <CUSBEndpoint::~CUSBEndpoint()>
   172a8:	e1a00005 	mov	r0, r5
   172ac:	e3a01014 	mov	r1, #20
   172b0:	eb004f34 	bl	2af88 <operator delete(void*, unsigned int)>
   172b4:	e3a03000 	mov	r3, #0
   172b8:	e284001c 	add	r0, r4, #28
   172bc:	e5843014 	str	r3, [r4, #20]
   172c0:	eb004e40 	bl	2abc8 <CMACAddress::~CMACAddress()>
   172c4:	e1a00004 	mov	r0, r4
   172c8:	ebffe097 	bl	f52c <CUSBFunction::~CUSBFunction()>
   172cc:	e1a00004 	mov	r0, r4
   172d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   172d4:	0003fb9c 	.word	0x0003fb9c

000172d8 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   172d8:	e2400010 	sub	r0, r0, #16
   172dc:	eaffffdc 	b	17254 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

000172e0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   172e0:	e92d4010 	push	{r4, lr}
   172e4:	e1a04000 	mov	r4, r0
   172e8:	ebffffd9 	bl	17254 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   172ec:	e1a00004 	mov	r0, r4
   172f0:	e3a01024 	mov	r1, #36	; 0x24
   172f4:	eb004f23 	bl	2af88 <operator delete(void*, unsigned int)>
   172f8:	e1a00004 	mov	r0, r4
   172fc:	e8bd8010 	pop	{r4, pc}

00017300 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   17300:	e2400010 	sub	r0, r0, #16
   17304:	eafffff5 	b	172e0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

00017308 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   17308:	e92d4070 	push	{r4, r5, r6, lr}
   1730c:	e5903014 	ldr	r3, [r0, #20]
   17310:	e24dd030 	sub	sp, sp, #48	; 0x30
   17314:	e3530000 	cmp	r3, #0
   17318:	0a000026 	beq	173b8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xb0>
   1731c:	e3510000 	cmp	r1, #0
   17320:	0a000028 	beq	173c8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xc0>
   17324:	e3a05000 	mov	r5, #0
   17328:	e1a04000 	mov	r4, r0
   1732c:	e1a06002 	mov	r6, r2
   17330:	e58d5000 	str	r5, [sp]
   17334:	e1a02001 	mov	r2, r1
   17338:	e28d0008 	add	r0, sp, #8
   1733c:	e1a01003 	mov	r1, r3
   17340:	e3a03d19 	mov	r3, #1600	; 0x640
   17344:	ebfff414 	bl	1439c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   17348:	e28d0008 	add	r0, sp, #8
   1734c:	ebfff48e 	bl	1458c <CUSBRequest::SetCompleteOnNAK()>
   17350:	e1a00004 	mov	r0, r4
   17354:	ebffe17a 	bl	f944 <CUSBFunction::GetHost() const>
   17358:	e5903000 	ldr	r3, [r0]
   1735c:	e1a02005 	mov	r2, r5
   17360:	e5933008 	ldr	r3, [r3, #8]
   17364:	e28d1008 	add	r1, sp, #8
   17368:	e12fff33 	blx	r3
   1736c:	e2504000 	subs	r4, r0, #0
   17370:	1a000005 	bne	1738c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x84>
   17374:	e3a04000 	mov	r4, #0
   17378:	e28d0008 	add	r0, sp, #8
   1737c:	ebfff426 	bl	1441c <CUSBRequest::~CUSBRequest()>
   17380:	e1a00004 	mov	r0, r4
   17384:	e28dd030 	add	sp, sp, #48	; 0x30
   17388:	e8bd8070 	pop	{r4, r5, r6, pc}
   1738c:	e28d0008 	add	r0, sp, #8
   17390:	ebfff432 	bl	14460 <CUSBRequest::GetResultLength() const>
   17394:	e3500000 	cmp	r0, #0
   17398:	0afffff5 	beq	17374 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   1739c:	e3560000 	cmp	r6, #0
   173a0:	15860000 	strne	r0, [r6]
   173a4:	1afffff3 	bne	17378 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x70>
   173a8:	e3a020c3 	mov	r2, #195	; 0xc3
   173ac:	e59f1024 	ldr	r1, [pc, #36]	; 173d8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   173b0:	e59f0024 	ldr	r0, [pc, #36]	; 173dc <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd4>
   173b4:	eb0034de 	bl	24734 <assertion_failed>
   173b8:	e3a020b2 	mov	r2, #178	; 0xb2
   173bc:	e59f1014 	ldr	r1, [pc, #20]	; 173d8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   173c0:	e59f0018 	ldr	r0, [pc, #24]	; 173e0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd8>
   173c4:	eb0034da 	bl	24734 <assertion_failed>
   173c8:	e3a020b3 	mov	r2, #179	; 0xb3
   173cc:	e59f1004 	ldr	r1, [pc, #4]	; 173d8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   173d0:	e59f000c 	ldr	r0, [pc, #12]	; 173e4 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   173d4:	eb0034d6 	bl	24734 <assertion_failed>
   173d8:	0003fb50 	.word	0x0003fb50
   173dc:	0003f728 	.word	0x0003f728
   173e0:	0003f6b4 	.word	0x0003f6b4
   173e4:	0003ef40 	.word	0x0003ef40

000173e8 <non-virtual thunk to CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   173e8:	e2400010 	sub	r0, r0, #16
   173ec:	eaffffc5 	b	17308 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>

000173f0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   173f0:	e92d4070 	push	{r4, r5, r6, lr}
   173f4:	e5903018 	ldr	r3, [r0, #24]
   173f8:	e24dd008 	sub	sp, sp, #8
   173fc:	e3530000 	cmp	r3, #0
   17400:	0a000011 	beq	1744c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x5c>
   17404:	e3510000 	cmp	r1, #0
   17408:	e1a05001 	mov	r5, r1
   1740c:	0a000012 	beq	1745c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x6c>
   17410:	e3520d19 	cmp	r2, #1600	; 0x640
   17414:	e1a06002 	mov	r6, r2
   17418:	8a000013 	bhi	1746c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x7c>
   1741c:	e1a04000 	mov	r4, r0
   17420:	ebffe147 	bl	f944 <CUSBFunction::GetHost() const>
   17424:	e3a0c000 	mov	ip, #0
   17428:	e5941018 	ldr	r1, [r4, #24]
   1742c:	e1a03006 	mov	r3, r6
   17430:	e1a02005 	mov	r2, r5
   17434:	e58dc000 	str	ip, [sp]
   17438:	ebffed53 	bl	1298c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1743c:	e1e00000 	mvn	r0, r0
   17440:	e1a00fa0 	lsr	r0, r0, #31
   17444:	e28dd008 	add	sp, sp, #8
   17448:	e8bd8070 	pop	{r4, r5, r6, pc}
   1744c:	e3a020aa 	mov	r2, #170	; 0xaa
   17450:	e59f1024 	ldr	r1, [pc, #36]	; 1747c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   17454:	e59f0024 	ldr	r0, [pc, #36]	; 17480 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x90>
   17458:	eb0034b5 	bl	24734 <assertion_failed>
   1745c:	e3a020ab 	mov	r2, #171	; 0xab
   17460:	e59f1014 	ldr	r1, [pc, #20]	; 1747c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   17464:	e59f0018 	ldr	r0, [pc, #24]	; 17484 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x94>
   17468:	eb0034b1 	bl	24734 <assertion_failed>
   1746c:	e3a020ac 	mov	r2, #172	; 0xac
   17470:	e59f1004 	ldr	r1, [pc, #4]	; 1747c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   17474:	e59f000c 	ldr	r0, [pc, #12]	; 17488 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   17478:	eb0034ad 	bl	24734 <assertion_failed>
   1747c:	0003fb50 	.word	0x0003fb50
   17480:	0003f73c 	.word	0x0003f73c
   17484:	0003ef40 	.word	0x0003ef40
   17488:	0003fb64 	.word	0x0003fb64

0001748c <non-virtual thunk to CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   1748c:	e2400010 	sub	r0, r0, #16
   17490:	eaffffd6 	b	173f0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>

00017494 <non-virtual thunk to CUSBCDCEthernetDevice::GetMACAddress() const>:
   17494:	e280000c 	add	r0, r0, #12
   17498:	e12fff1e 	bx	lr

0001749c <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   1749c:	e92d4010 	push	{r4, lr}
   174a0:	e1a04000 	mov	r4, r0
   174a4:	ebffe0b2 	bl	f774 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   174a8:	e3a02000 	mov	r2, #0
   174ac:	e59f3024 	ldr	r3, [pc, #36]	; 174d8 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x3c>
   174b0:	e5842014 	str	r2, [r4, #20]
   174b4:	e2831008 	add	r1, r3, #8
   174b8:	e2833040 	add	r3, r3, #64	; 0x40
   174bc:	e5841000 	str	r1, [r4]
   174c0:	e5843010 	str	r3, [r4, #16]
   174c4:	e5842018 	str	r2, [r4, #24]
   174c8:	e284001c 	add	r0, r4, #28
   174cc:	eb004dba 	bl	2abbc <CMACAddress::CMACAddress()>
   174d0:	e1a00004 	mov	r0, r4
   174d4:	e8bd8010 	pop	{r4, pc}
   174d8:	0003fb94 	.word	0x0003fb94

000174dc <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   174dc:	e92d4030 	push	{r4, r5, lr}
   174e0:	e24dd01c 	sub	sp, sp, #28
   174e4:	e1a05001 	mov	r5, r1
   174e8:	e1a04000 	mov	r4, r0
   174ec:	ebffe0ff 	bl	f8f0 <CUSBFunction::GetDevice() const>
   174f0:	e1a01000 	mov	r1, r0
   174f4:	e28d000c 	add	r0, sp, #12
   174f8:	eb00020a 	bl	17d28 <CUSBString::CUSBString(CUSBDevice*)>
   174fc:	e3550000 	cmp	r5, #0
   17500:	1a000005 	bne	1751c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x40>
   17504:	e3a05000 	mov	r5, #0
   17508:	e28d000c 	add	r0, sp, #12
   1750c:	eb000248 	bl	17e34 <CUSBString::~CUSBString()>
   17510:	e1a00005 	mov	r0, r5
   17514:	e28dd01c 	add	sp, sp, #28
   17518:	e8bd8030 	pop	{r4, r5, pc}
   1751c:	e28d000c 	add	r0, sp, #12
   17520:	eb0002e7 	bl	180c4 <CUSBString::GetLanguageID()>
   17524:	e1a01005 	mov	r1, r5
   17528:	e1a02000 	mov	r2, r0
   1752c:	e28d000c 	add	r0, sp, #12
   17530:	eb00024f 	bl	17e74 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   17534:	e2505000 	subs	r5, r0, #0
   17538:	0afffff1 	beq	17504 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1753c:	e28d000c 	add	r0, sp, #12
   17540:	eb0002dd 	bl	180bc <CUSBString::Get() const>
   17544:	e3500000 	cmp	r0, #0
   17548:	12801002 	addne	r1, r0, #2
   1754c:	128dc003 	addne	ip, sp, #3
   17550:	1280000e 	addne	r0, r0, #14
   17554:	0a000018 	beq	175bc <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe0>
   17558:	e15130d2 	ldrsb	r3, [r1, #-2]
   1755c:	e3530039 	cmp	r3, #57	; 0x39
   17560:	c2433007 	subgt	r3, r3, #7
   17564:	e6ef3073 	uxtb	r3, r3
   17568:	e2433030 	sub	r3, r3, #48	; 0x30
   1756c:	e6ef2073 	uxtb	r2, r3
   17570:	e352000f 	cmp	r2, #15
   17574:	8affffe2 	bhi	17504 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   17578:	e15130d1 	ldrsb	r3, [r1, #-1]
   1757c:	e3530039 	cmp	r3, #57	; 0x39
   17580:	c2433007 	subgt	r3, r3, #7
   17584:	e6ef3073 	uxtb	r3, r3
   17588:	e2433030 	sub	r3, r3, #48	; 0x30
   1758c:	e6ef3073 	uxtb	r3, r3
   17590:	e353000f 	cmp	r3, #15
   17594:	8affffda 	bhi	17504 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   17598:	e2811002 	add	r1, r1, #2
   1759c:	e1833202 	orr	r3, r3, r2, lsl #4
   175a0:	e1500001 	cmp	r0, r1
   175a4:	e5ec3001 	strb	r3, [ip, #1]!
   175a8:	1affffea 	bne	17558 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   175ac:	e284001c 	add	r0, r4, #28
   175b0:	e28d1004 	add	r1, sp, #4
   175b4:	eb004da1 	bl	2ac40 <CMACAddress::Set(unsigned char const*)>
   175b8:	eaffffd2 	b	17508 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x2c>
   175bc:	e3a020d3 	mov	r2, #211	; 0xd3
   175c0:	e59f1004 	ldr	r1, [pc, #4]	; 175cc <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf0>
   175c4:	e59f0004 	ldr	r0, [pc, #4]	; 175d0 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf4>
   175c8:	eb003459 	bl	24734 <assertion_failed>
   175cc:	0003fb50 	.word	0x0003fb50
   175d0:	0003fb84 	.word	0x0003fb84

000175d4 <CUSBCDCEthernetDevice::Configure()>:
   175d4:	e92d4070 	push	{r4, r5, r6, lr}
   175d8:	e1a05000 	mov	r5, r0
   175dc:	e24dd020 	sub	sp, sp, #32
   175e0:	ea000002 	b	175f0 <CUSBCDCEthernetDevice::Configure()+0x1c>
   175e4:	e5d43002 	ldrb	r3, [r4, #2]
   175e8:	e353000f 	cmp	r3, #15
   175ec:	0a000011 	beq	17638 <CUSBCDCEthernetDevice::Configure()+0x64>
   175f0:	e3a01024 	mov	r1, #36	; 0x24
   175f4:	e1a00005 	mov	r0, r5
   175f8:	ebffe0dc 	bl	f970 <CUSBFunction::GetDescriptor(unsigned char)>
   175fc:	e2504000 	subs	r4, r0, #0
   17600:	1afffff7 	bne	175e4 <CUSBCDCEthernetDevice::Configure()+0x10>
   17604:	e1a00005 	mov	r0, r5
   17608:	e59f11f4 	ldr	r1, [pc, #500]	; 17804 <CUSBCDCEthernetDevice::Configure()+0x230>
   1760c:	ebffe0e2 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   17610:	ea000046 	b	17730 <CUSBCDCEthernetDevice::Configure()+0x15c>
   17614:	e5d32006 	ldrb	r2, [r3, #6]
   17618:	e3520000 	cmp	r2, #0
   1761c:	1a000005 	bne	17638 <CUSBCDCEthernetDevice::Configure()+0x64>
   17620:	e5d32007 	ldrb	r2, [r3, #7]
   17624:	e3520000 	cmp	r2, #0
   17628:	1a000002 	bne	17638 <CUSBCDCEthernetDevice::Configure()+0x64>
   1762c:	e5d33004 	ldrb	r3, [r3, #4]
   17630:	e3530001 	cmp	r3, #1
   17634:	8a000008 	bhi	1765c <CUSBCDCEthernetDevice::Configure()+0x88>
   17638:	e3a01004 	mov	r1, #4
   1763c:	e1a00005 	mov	r0, r5
   17640:	ebffe0ca 	bl	f970 <CUSBFunction::GetDescriptor(unsigned char)>
   17644:	e2503000 	subs	r3, r0, #0
   17648:	0a000066 	beq	177e8 <CUSBCDCEthernetDevice::Configure()+0x214>
   1764c:	e5d32005 	ldrb	r2, [r3, #5]
   17650:	e352000a 	cmp	r2, #10
   17654:	1afffff7 	bne	17638 <CUSBCDCEthernetDevice::Configure()+0x64>
   17658:	eaffffed 	b	17614 <CUSBCDCEthernetDevice::Configure()+0x40>
   1765c:	e5d41003 	ldrb	r1, [r4, #3]
   17660:	e1a00005 	mov	r0, r5
   17664:	ebffff9c 	bl	174dc <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   17668:	e2504000 	subs	r4, r0, #0
   1766c:	0a00002a 	beq	1771c <CUSBCDCEthernetDevice::Configure()+0x148>
   17670:	e28d0010 	add	r0, sp, #16
   17674:	eb004106 	bl	27a94 <CString::CString()>
   17678:	e28d1010 	add	r1, sp, #16
   1767c:	e285001c 	add	r0, r5, #28
   17680:	eb004dc8 	bl	2ada8 <CMACAddress::Format(CString*) const>
   17684:	eb003d12 	bl	26ad4 <CLogger::Get()>
   17688:	e1a04000 	mov	r4, r0
   1768c:	e28d0010 	add	r0, sp, #16
   17690:	eb004117 	bl	27af4 <CString::operator char const*() const>
   17694:	e1a02000 	mov	r2, r0
   17698:	e59f3168 	ldr	r3, [pc, #360]	; 17808 <CUSBCDCEthernetDevice::Configure()+0x234>
   1769c:	e58d2000 	str	r2, [sp]
   176a0:	e1a00004 	mov	r0, r4
   176a4:	e3a02004 	mov	r2, #4
   176a8:	e59f1154 	ldr	r1, [pc, #340]	; 17804 <CUSBCDCEthernetDevice::Configure()+0x230>
   176ac:	eb003c4a 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   176b0:	ea000003 	b	176c4 <CUSBCDCEthernetDevice::Configure()+0xf0>
   176b4:	e5d43003 	ldrb	r3, [r4, #3]
   176b8:	e203303f 	and	r3, r3, #63	; 0x3f
   176bc:	e3530002 	cmp	r3, #2
   176c0:	0a00001d 	beq	1773c <CUSBCDCEthernetDevice::Configure()+0x168>
   176c4:	e3a01005 	mov	r1, #5
   176c8:	e1a00005 	mov	r0, r5
   176cc:	ebffe0a7 	bl	f970 <CUSBFunction::GetDescriptor(unsigned char)>
   176d0:	e2504000 	subs	r4, r0, #0
   176d4:	1afffff6 	bne	176b4 <CUSBCDCEthernetDevice::Configure()+0xe0>
   176d8:	e5953014 	ldr	r3, [r5, #20]
   176dc:	e1a00005 	mov	r0, r5
   176e0:	e3530000 	cmp	r3, #0
   176e4:	0a00002c 	beq	1779c <CUSBCDCEthernetDevice::Configure()+0x1c8>
   176e8:	e5953018 	ldr	r3, [r5, #24]
   176ec:	e3530000 	cmp	r3, #0
   176f0:	0a000029 	beq	1779c <CUSBCDCEthernetDevice::Configure()+0x1c8>
   176f4:	ebffdfb5 	bl	f5d0 <CUSBFunction::Configure()>
   176f8:	e2504000 	subs	r4, r0, #0
   176fc:	0a000020 	beq	17784 <CUSBCDCEthernetDevice::Configure()+0x1b0>
   17700:	e2850010 	add	r0, r5, #16
   17704:	eb004dc8 	bl	2ae2c <CNetDevice::AddNetDevice()>
   17708:	e28d0010 	add	r0, sp, #16
   1770c:	eb0040ad 	bl	279c8 <CString::~CString()>
   17710:	e1a00004 	mov	r0, r4
   17714:	e28dd020 	add	sp, sp, #32
   17718:	e8bd8070 	pop	{r4, r5, r6, pc}
   1771c:	eb003cec 	bl	26ad4 <CLogger::Get()>
   17720:	e3a02001 	mov	r2, #1
   17724:	e59f30e0 	ldr	r3, [pc, #224]	; 1780c <CUSBCDCEthernetDevice::Configure()+0x238>
   17728:	e59f10d4 	ldr	r1, [pc, #212]	; 17804 <CUSBCDCEthernetDevice::Configure()+0x230>
   1772c:	eb003c2a 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17730:	e1a00004 	mov	r0, r4
   17734:	e28dd020 	add	sp, sp, #32
   17738:	e8bd8070 	pop	{r4, r5, r6, pc}
   1773c:	e1d430d2 	ldrsb	r3, [r4, #2]
   17740:	e3530000 	cmp	r3, #0
   17744:	ba000018 	blt	177ac <CUSBCDCEthernetDevice::Configure()+0x1d8>
   17748:	e5953018 	ldr	r3, [r5, #24]
   1774c:	e1a00005 	mov	r0, r5
   17750:	e3530000 	cmp	r3, #0
   17754:	1a000010 	bne	1779c <CUSBCDCEthernetDevice::Configure()+0x1c8>
   17758:	ebffe064 	bl	f8f0 <CUSBFunction::GetDevice() const>
   1775c:	e1a01000 	mov	r1, r0
   17760:	e3a00014 	mov	r0, #20
   17764:	e58d100c 	str	r1, [sp, #12]
   17768:	eb004df8 	bl	2af50 <operator new(unsigned int)>
   1776c:	e1a06000 	mov	r6, r0
   17770:	e1a02004 	mov	r2, r4
   17774:	e59d100c 	ldr	r1, [sp, #12]
   17778:	ebffde9a 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1777c:	e5856018 	str	r6, [r5, #24]
   17780:	eaffffcf 	b	176c4 <CUSBCDCEthernetDevice::Configure()+0xf0>
   17784:	eb003cd2 	bl	26ad4 <CLogger::Get()>
   17788:	e3a02001 	mov	r2, #1
   1778c:	e59f307c 	ldr	r3, [pc, #124]	; 17810 <CUSBCDCEthernetDevice::Configure()+0x23c>
   17790:	e59f106c 	ldr	r1, [pc, #108]	; 17804 <CUSBCDCEthernetDevice::Configure()+0x230>
   17794:	eb003c10 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17798:	eaffffda 	b	17708 <CUSBCDCEthernetDevice::Configure()+0x134>
   1779c:	e59f1060 	ldr	r1, [pc, #96]	; 17804 <CUSBCDCEthernetDevice::Configure()+0x230>
   177a0:	ebffe07d 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   177a4:	e3a04000 	mov	r4, #0
   177a8:	eaffffd6 	b	17708 <CUSBCDCEthernetDevice::Configure()+0x134>
   177ac:	e5953014 	ldr	r3, [r5, #20]
   177b0:	e1a00005 	mov	r0, r5
   177b4:	e3530000 	cmp	r3, #0
   177b8:	1afffff7 	bne	1779c <CUSBCDCEthernetDevice::Configure()+0x1c8>
   177bc:	ebffe04b 	bl	f8f0 <CUSBFunction::GetDevice() const>
   177c0:	e1a01000 	mov	r1, r0
   177c4:	e3a00014 	mov	r0, #20
   177c8:	e58d100c 	str	r1, [sp, #12]
   177cc:	eb004ddf 	bl	2af50 <operator new(unsigned int)>
   177d0:	e1a06000 	mov	r6, r0
   177d4:	e1a02004 	mov	r2, r4
   177d8:	e59d100c 	ldr	r1, [sp, #12]
   177dc:	ebffde81 	bl	f1e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   177e0:	e5856014 	str	r6, [r5, #20]
   177e4:	eaffffb6 	b	176c4 <CUSBCDCEthernetDevice::Configure()+0xf0>
   177e8:	e1a04003 	mov	r4, r3
   177ec:	e1a00005 	mov	r0, r5
   177f0:	e59f100c 	ldr	r1, [pc, #12]	; 17804 <CUSBCDCEthernetDevice::Configure()+0x230>
   177f4:	ebffe068 	bl	f99c <CUSBFunction::ConfigurationError(char const*) const>
   177f8:	e1a00004 	mov	r0, r4
   177fc:	e28dd020 	add	sp, sp, #32
   17800:	e8bd8070 	pop	{r4, r5, r6, pc}
   17804:	0003fbfc 	.word	0x0003fbfc
   17808:	0003f7dc 	.word	0x0003f7dc
   1780c:	0003f9bc 	.word	0x0003f9bc
   17810:	0003e6b8 	.word	0x0003e6b8

00017814 <CNetDevice::IsLinkUp()>:
   17814:	e3a00001 	mov	r0, #1
   17818:	e12fff1e 	bx	lr

0001781c <CNetDevice::GetLinkSpeed()>:
   1781c:	e3a00006 	mov	r0, #6
   17820:	e12fff1e 	bx	lr

00017824 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   17824:	e3a03000 	mov	r3, #0
   17828:	e92d4070 	push	{r4, r5, r6, lr}
   1782c:	e1510003 	cmp	r1, r3
   17830:	e0814002 	add	r4, r1, r2
   17834:	e8800006 	stm	r0, {r1, r2}
   17838:	e5801010 	str	r1, [r0, #16]
   1783c:	e5801018 	str	r1, [r0, #24]
   17840:	e580400c 	str	r4, [r0, #12]
   17844:	e5c03008 	strb	r3, [r0, #8]
   17848:	e5803014 	str	r3, [r0, #20]
   1784c:	0a00003b 	beq	17940 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x11c>
   17850:	e2423004 	sub	r3, r2, #4
   17854:	e3530f7f 	cmp	r3, #508	; 0x1fc
   17858:	88bd8070 	pophi	{r4, r5, r6, pc}
   1785c:	e5d13000 	ldrb	r3, [r1]
   17860:	e3530009 	cmp	r3, #9
   17864:	18bd8070 	popne	{r4, r5, r6, pc}
   17868:	e5d1c001 	ldrb	ip, [r1, #1]
   1786c:	e35c0002 	cmp	ip, #2
   17870:	18bd8070 	popne	{r4, r5, r6, pc}
   17874:	e5d13002 	ldrb	r3, [r1, #2]
   17878:	e5d1e003 	ldrb	lr, [r1, #3]
   1787c:	e183340e 	orr	r3, r3, lr, lsl #8
   17880:	e1530002 	cmp	r3, r2
   17884:	88bd8070 	pophi	{r4, r5, r6, pc}
   17888:	30814003 	addcc	r4, r1, r3
   1788c:	e2813002 	add	r3, r1, #2
   17890:	3580400c 	strcc	r4, [r0, #12]
   17894:	e1540003 	cmp	r4, r3
   17898:	9a00002c 	bls	17950 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x12c>
   1789c:	e3a05000 	mov	r5, #0
   178a0:	e3a02009 	mov	r2, #9
   178a4:	e1a0e005 	mov	lr, r5
   178a8:	ea000008 	b	178d0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xac>
   178ac:	e35c0002 	cmp	ip, #2
   178b0:	0a00001e 	beq	17930 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x10c>
   178b4:	e2832002 	add	r2, r3, #2
   178b8:	e1540002 	cmp	r4, r2
   178bc:	9a000024 	bls	17954 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x130>
   178c0:	e1a01003 	mov	r1, r3
   178c4:	e1a0e00c 	mov	lr, ip
   178c8:	e5d32000 	ldrb	r2, [r3]
   178cc:	e5d3c001 	ldrb	ip, [r3, #1]
   178d0:	e0813002 	add	r3, r1, r2
   178d4:	e1530004 	cmp	r3, r4
   178d8:	8a00000a 	bhi	17908 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   178dc:	e35c0004 	cmp	ip, #4
   178e0:	0a00000a 	beq	17910 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xec>
   178e4:	e35c0005 	cmp	ip, #5
   178e8:	1affffef 	bne	178ac <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x88>
   178ec:	e31e00fd 	tst	lr, #253	; 0xfd
   178f0:	0a000004 	beq	17908 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   178f4:	e3550000 	cmp	r5, #0
   178f8:	13a0e009 	movne	lr, #9
   178fc:	03a0e007 	moveq	lr, #7
   17900:	e152000e 	cmp	r2, lr
   17904:	0affffea 	beq	178b4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x90>
   17908:	e5801018 	str	r1, [r0, #24]
   1790c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17910:	e35e0000 	cmp	lr, #0
   17914:	0afffffb 	beq	17908 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   17918:	e5d15005 	ldrb	r5, [r1, #5]
   1791c:	e3a0e009 	mov	lr, #9
   17920:	e2455001 	sub	r5, r5, #1
   17924:	e16f5f15 	clz	r5, r5
   17928:	e1a052a5 	lsr	r5, r5, #5
   1792c:	eafffff3 	b	17900 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xdc>
   17930:	e35e0000 	cmp	lr, #0
   17934:	1afffff3 	bne	17908 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   17938:	e3a0e009 	mov	lr, #9
   1793c:	eaffffef 	b	17900 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xdc>
   17940:	e3a02024 	mov	r2, #36	; 0x24
   17944:	e59f101c 	ldr	r1, [pc, #28]	; 17968 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x144>
   17948:	e59f001c 	ldr	r0, [pc, #28]	; 1796c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x148>
   1794c:	eb003378 	bl	24734 <assertion_failed>
   17950:	e1a03001 	mov	r3, r1
   17954:	e1530004 	cmp	r3, r4
   17958:	03a03001 	moveq	r3, #1
   1795c:	15803018 	strne	r3, [r0, #24]
   17960:	05c03008 	strbeq	r3, [r0, #8]
   17964:	e8bd8070 	pop	{r4, r5, r6, pc}
   17968:	0003fc04 	.word	0x0003fc04
   1796c:	0003fc18 	.word	0x0003fc18

00017970 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   17970:	e3510000 	cmp	r1, #0
   17974:	e92d4010 	push	{r4, lr}
   17978:	0a00000e 	beq	179b8 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x48>
   1797c:	e591e000 	ldr	lr, [r1]
   17980:	e591c004 	ldr	ip, [r1, #4]
   17984:	e5d12008 	ldrb	r2, [r1, #8]
   17988:	e591400c 	ldr	r4, [r1, #12]
   1798c:	e580e000 	str	lr, [r0]
   17990:	e580c004 	str	ip, [r0, #4]
   17994:	e591e010 	ldr	lr, [r1, #16]
   17998:	e591c014 	ldr	ip, [r1, #20]
   1799c:	e5c02008 	strb	r2, [r0, #8]
   179a0:	e5912018 	ldr	r2, [r1, #24]
   179a4:	e580400c 	str	r4, [r0, #12]
   179a8:	e580e010 	str	lr, [r0, #16]
   179ac:	e580c014 	str	ip, [r0, #20]
   179b0:	e5802018 	str	r2, [r0, #24]
   179b4:	e8bd8010 	pop	{r4, pc}
   179b8:	e3a02082 	mov	r2, #130	; 0x82
   179bc:	e59f1004 	ldr	r1, [pc, #4]	; 179c8 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x58>
   179c0:	e59f0004 	ldr	r0, [pc, #4]	; 179cc <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x5c>
   179c4:	eb00335a 	bl	24734 <assertion_failed>
   179c8:	0003fc04 	.word	0x0003fc04
   179cc:	0003fc28 	.word	0x0003fc28

000179d0 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   179d0:	e12fff1e 	bx	lr

000179d4 <CUSBConfigurationParser::IsValid() const>:
   179d4:	e5d00008 	ldrb	r0, [r0, #8]
   179d8:	e12fff1e 	bx	lr

000179dc <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   179dc:	e5d03008 	ldrb	r3, [r0, #8]
   179e0:	e92d4010 	push	{r4, lr}
   179e4:	e3530000 	cmp	r3, #0
   179e8:	0a00001d 	beq	17a64 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x88>
   179ec:	e5903010 	ldr	r3, [r0, #16]
   179f0:	e590c00c 	ldr	ip, [r0, #12]
   179f4:	e153000c 	cmp	r3, ip
   179f8:	3a000008 	bcc	17a20 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x44>
   179fc:	ea000016 	b	17a5c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x80>
   17a00:	e3510005 	cmp	r1, #5
   17a04:	03520004 	cmpeq	r2, #4
   17a08:	0a000013 	beq	17a5c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x80>
   17a0c:	e1520001 	cmp	r2, r1
   17a10:	0a00000c 	beq	17a48 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x6c>
   17a14:	e153000c 	cmp	r3, ip
   17a18:	e5803010 	str	r3, [r0, #16]
   17a1c:	0a00000e 	beq	17a5c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x80>
   17a20:	e5d3e000 	ldrb	lr, [r3]
   17a24:	e1a04003 	mov	r4, r3
   17a28:	e5d32001 	ldrb	r2, [r3, #1]
   17a2c:	e083300e 	add	r3, r3, lr
   17a30:	e153000c 	cmp	r3, ip
   17a34:	9afffff1 	bls	17a00 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x24>
   17a38:	e3a020a9 	mov	r2, #169	; 0xa9
   17a3c:	e59f1030 	ldr	r1, [pc, #48]	; 17a74 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x98>
   17a40:	e59f0030 	ldr	r0, [pc, #48]	; 17a78 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   17a44:	eb00333a 	bl	24734 <assertion_failed>
   17a48:	e5803010 	str	r3, [r0, #16]
   17a4c:	e5804018 	str	r4, [r0, #24]
   17a50:	e5804014 	str	r4, [r0, #20]
   17a54:	e1a00004 	mov	r0, r4
   17a58:	e8bd8010 	pop	{r4, pc}
   17a5c:	e3a04000 	mov	r4, #0
   17a60:	eafffffa 	b	17a50 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x74>
   17a64:	e3a0209f 	mov	r2, #159	; 0x9f
   17a68:	e59f1004 	ldr	r1, [pc, #4]	; 17a74 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x98>
   17a6c:	e59f0008 	ldr	r0, [pc, #8]	; 17a7c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa0>
   17a70:	eb00332f 	bl	24734 <assertion_failed>
   17a74:	0003fc04 	.word	0x0003fc04
   17a78:	0003fc38 	.word	0x0003fc38
   17a7c:	0003dce8 	.word	0x0003dce8

00017a80 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   17a80:	e5d03008 	ldrb	r3, [r0, #8]
   17a84:	e92d4010 	push	{r4, lr}
   17a88:	e3530000 	cmp	r3, #0
   17a8c:	0a000006 	beq	17aac <CUSBConfigurationParser::GetCurrentDescriptor()+0x2c>
   17a90:	e5900014 	ldr	r0, [r0, #20]
   17a94:	e3500000 	cmp	r0, #0
   17a98:	18bd8010 	popne	{r4, pc}
   17a9c:	e3a020c8 	mov	r2, #200	; 0xc8
   17aa0:	e59f1014 	ldr	r1, [pc, #20]	; 17abc <CUSBConfigurationParser::GetCurrentDescriptor()+0x3c>
   17aa4:	e59f0014 	ldr	r0, [pc, #20]	; 17ac0 <CUSBConfigurationParser::GetCurrentDescriptor()+0x40>
   17aa8:	eb003321 	bl	24734 <assertion_failed>
   17aac:	e3a020c7 	mov	r2, #199	; 0xc7
   17ab0:	e59f1004 	ldr	r1, [pc, #4]	; 17abc <CUSBConfigurationParser::GetCurrentDescriptor()+0x3c>
   17ab4:	e59f0008 	ldr	r0, [pc, #8]	; 17ac4 <CUSBConfigurationParser::GetCurrentDescriptor()+0x44>
   17ab8:	eb00331d 	bl	24734 <assertion_failed>
   17abc:	0003fc04 	.word	0x0003fc04
   17ac0:	0003fc54 	.word	0x0003fc54
   17ac4:	0003dce8 	.word	0x0003dce8

00017ac8 <CUSBConfigurationParser::Error(char const*) const>:
   17ac8:	e92d4030 	push	{r4, r5, lr}
   17acc:	e2515000 	subs	r5, r1, #0
   17ad0:	e24dd00c 	sub	sp, sp, #12
   17ad4:	0a00000e 	beq	17b14 <CUSBConfigurationParser::Error(char const*) const+0x4c>
   17ad8:	e1a04000 	mov	r4, r0
   17adc:	eb003bfc 	bl	26ad4 <CLogger::Get()>
   17ae0:	e5941000 	ldr	r1, [r4]
   17ae4:	e5942018 	ldr	r2, [r4, #24]
   17ae8:	e59f3034 	ldr	r3, [pc, #52]	; 17b24 <CUSBConfigurationParser::Error(char const*) const+0x5c>
   17aec:	e0422001 	sub	r2, r2, r1
   17af0:	e58d2000 	str	r2, [sp]
   17af4:	e1a01005 	mov	r1, r5
   17af8:	e3a02001 	mov	r2, #1
   17afc:	eb003b36 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17b00:	e1c400d0 	ldrd	r0, [r4]
   17b04:	e1a02005 	mov	r2, r5
   17b08:	e28dd00c 	add	sp, sp, #12
   17b0c:	e8bd4030 	pop	{r4, r5, lr}
   17b10:	ea003477 	b	24cf4 <debug_hexdump(void const*, unsigned int, char const*)>
   17b14:	e3a020cf 	mov	r2, #207	; 0xcf
   17b18:	e59f1008 	ldr	r1, [pc, #8]	; 17b28 <CUSBConfigurationParser::Error(char const*) const+0x60>
   17b1c:	e59f0008 	ldr	r0, [pc, #8]	; 17b2c <CUSBConfigurationParser::Error(char const*) const+0x64>
   17b20:	eb003303 	bl	24734 <assertion_failed>
   17b24:	0003fc70 	.word	0x0003fc70
   17b28:	0003fc04 	.word	0x0003fc04
   17b2c:	0003e720 	.word	0x0003e720

00017b30 <CUSBGamePadDevice::GetInitialState()>:
   17b30:	e2800024 	add	r0, r0, #36	; 0x24
   17b34:	e12fff1e 	bx	lr

00017b38 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   17b38:	e3510000 	cmp	r1, #0
   17b3c:	012fff1e 	bxeq	lr
   17b40:	e2803f4a 	add	r3, r0, #296	; 0x128
   17b44:	e1d330b0 	ldrh	r3, [r3]
   17b48:	e92d4070 	push	{r4, r5, r6, lr}
   17b4c:	e1530002 	cmp	r3, r2
   17b50:	e1a04000 	mov	r4, r0
   17b54:	18bd8070 	popne	{r4, r5, r6, pc}
   17b58:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   17b5c:	e3530000 	cmp	r3, #0
   17b60:	08bd8070 	popeq	{r4, r5, r6, pc}
   17b64:	e1a05000 	mov	r5, r0
   17b68:	e4953024 	ldr	r3, [r5], #36	; 0x24
   17b6c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   17b70:	e12fff33 	blx	r3
   17b74:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   17b78:	e1a01005 	mov	r1, r5
   17b7c:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   17b80:	e2400001 	sub	r0, r0, #1
   17b84:	e8bd4070 	pop	{r4, r5, r6, lr}
   17b88:	e12fff13 	bx	r3

00017b8c <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   17b8c:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   17b90:	e92d4010 	push	{r4, lr}
   17b94:	e3530000 	cmp	r3, #0
   17b98:	1a000006 	bne	17bb8 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x2c>
   17b9c:	e3510000 	cmp	r1, #0
   17ba0:	e5801124 	str	r1, [r0, #292]	; 0x124
   17ba4:	18bd8010 	popne	{r4, pc}
   17ba8:	e3a0204d 	mov	r2, #77	; 0x4d
   17bac:	e59f1014 	ldr	r1, [pc, #20]	; 17bc8 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x3c>
   17bb0:	e59f0014 	ldr	r0, [pc, #20]	; 17bcc <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x40>
   17bb4:	eb0032de 	bl	24734 <assertion_failed>
   17bb8:	e3a0204b 	mov	r2, #75	; 0x4b
   17bbc:	e59f1004 	ldr	r1, [pc, #4]	; 17bc8 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x3c>
   17bc0:	e59f0008 	ldr	r0, [pc, #8]	; 17bd0 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x44>
   17bc4:	eb0032da 	bl	24734 <assertion_failed>
   17bc8:	0003fca0 	.word	0x0003fca0
   17bcc:	0003fcc8 	.word	0x0003fcc8
   17bd0:	0003fcb0 	.word	0x0003fcb0

00017bd4 <CUSBGamePadDevice::Configure()>:
   17bd4:	e92d4030 	push	{r4, r5, lr}
   17bd8:	e2803f4a 	add	r3, r0, #296	; 0x128
   17bdc:	e1d310b0 	ldrh	r1, [r3]
   17be0:	e24dd00c 	sub	sp, sp, #12
   17be4:	e3510000 	cmp	r1, #0
   17be8:	0a00001a 	beq	17c58 <CUSBGamePadDevice::Configure()+0x84>
   17bec:	e1a04000 	mov	r4, r0
   17bf0:	ebffe94a 	bl	12120 <CUSBHIDDevice::Configure(unsigned int)>
   17bf4:	e2505000 	subs	r5, r0, #0
   17bf8:	0a00000e 	beq	17c38 <CUSBGamePadDevice::Configure()+0x64>
   17bfc:	e59f2064 	ldr	r2, [pc, #100]	; 17c68 <CUSBGamePadDevice::Configure()+0x94>
   17c00:	e5923000 	ldr	r3, [r2]
   17c04:	e584312c 	str	r3, [r4, #300]	; 0x12c
   17c08:	e2833001 	add	r3, r3, #1
   17c0c:	e5823000 	str	r3, [r2]
   17c10:	eb003589 	bl	2523c <CDeviceNameService::Get()>
   17c14:	e3a02000 	mov	r2, #0
   17c18:	e58d2000 	str	r2, [sp]
   17c1c:	e1a03004 	mov	r3, r4
   17c20:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   17c24:	e59f1040 	ldr	r1, [pc, #64]	; 17c6c <CUSBGamePadDevice::Configure()+0x98>
   17c28:	eb00358f 	bl	2526c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   17c2c:	e1a00005 	mov	r0, r5
   17c30:	e28dd00c 	add	sp, sp, #12
   17c34:	e8bd8030 	pop	{r4, r5, pc}
   17c38:	eb003ba5 	bl	26ad4 <CLogger::Get()>
   17c3c:	e3a02001 	mov	r2, #1
   17c40:	e59f3028 	ldr	r3, [pc, #40]	; 17c70 <CUSBGamePadDevice::Configure()+0x9c>
   17c44:	e59f1028 	ldr	r1, [pc, #40]	; 17c74 <CUSBGamePadDevice::Configure()+0xa0>
   17c48:	eb003ae3 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17c4c:	e1a00005 	mov	r0, r5
   17c50:	e28dd00c 	add	sp, sp, #12
   17c54:	e8bd8030 	pop	{r4, r5, pc}
   17c58:	e3a02035 	mov	r2, #53	; 0x35
   17c5c:	e59f1014 	ldr	r1, [pc, #20]	; 17c78 <CUSBGamePadDevice::Configure()+0xa4>
   17c60:	e59f0014 	ldr	r0, [pc, #20]	; 17c7c <CUSBGamePadDevice::Configure()+0xa8>
   17c64:	eb0032b2 	bl	24734 <assertion_failed>
   17c68:	000461f0 	.word	0x000461f0
   17c6c:	0003fce8 	.word	0x0003fce8
   17c70:	0003d494 	.word	0x0003d494
   17c74:	0003fce0 	.word	0x0003fce0
   17c78:	0003fca0 	.word	0x0003fca0
   17c7c:	0003e9c4 	.word	0x0003e9c4

00017c80 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   17c80:	e92d4010 	push	{r4, lr}
   17c84:	e3a02000 	mov	r2, #0
   17c88:	e1a04000 	mov	r4, r0
   17c8c:	ebffe8e2 	bl	1201c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   17c90:	e3a01000 	mov	r1, #0
   17c94:	e59f2024 	ldr	r2, [pc, #36]	; 17cc0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x40>
   17c98:	e2843f4a 	add	r3, r4, #296	; 0x128
   17c9c:	e5842000 	str	r2, [r4]
   17ca0:	e5841124 	str	r1, [r4, #292]	; 0x124
   17ca4:	e3a02c01 	mov	r2, #256	; 0x100
   17ca8:	e1c310b0 	strh	r1, [r3]
   17cac:	e2840024 	add	r0, r4, #36	; 0x24
   17cb0:	e584112c 	str	r1, [r4, #300]	; 0x12c
   17cb4:	eb004876 	bl	29e94 <memset>
   17cb8:	e1a00004 	mov	r0, r4
   17cbc:	e8bd8010 	pop	{r4, pc}
   17cc0:	0003fcf8 	.word	0x0003fcf8

00017cc4 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   17cc4:	e92d4070 	push	{r4, r5, r6, lr}
   17cc8:	e3a06000 	mov	r6, #0
   17ccc:	e1a04000 	mov	r4, r0
   17cd0:	e59f502c 	ldr	r5, [pc, #44]	; 17d04 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x40>
   17cd4:	e5806124 	str	r6, [r0, #292]	; 0x124
   17cd8:	e2853018 	add	r3, r5, #24
   17cdc:	e5803000 	str	r3, [r0]
   17ce0:	eb003555 	bl	2523c <CDeviceNameService::Get()>
   17ce4:	e1a03006 	mov	r3, r6
   17ce8:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   17cec:	e2851008 	add	r1, r5, #8
   17cf0:	eb003577 	bl	252d4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   17cf4:	e1a00004 	mov	r0, r4
   17cf8:	ebffe8dd 	bl	12074 <CUSBHIDDevice::~CUSBHIDDevice()>
   17cfc:	e1a00004 	mov	r0, r4
   17d00:	e8bd8070 	pop	{r4, r5, r6, pc}
   17d04:	0003fce0 	.word	0x0003fce0

00017d08 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   17d08:	e92d4010 	push	{r4, lr}
   17d0c:	e1a04000 	mov	r4, r0
   17d10:	ebffffeb 	bl	17cc4 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   17d14:	e1a00004 	mov	r0, r4
   17d18:	e3a01e13 	mov	r1, #304	; 0x130
   17d1c:	eb004c99 	bl	2af88 <operator delete(void*, unsigned int)>
   17d20:	e1a00004 	mov	r0, r4
   17d24:	e8bd8010 	pop	{r4, pc}

00017d28 <CUSBString::CUSBString(CUSBDevice*)>:
   17d28:	e3a03000 	mov	r3, #0
   17d2c:	e92d4070 	push	{r4, r5, r6, lr}
   17d30:	e880000a 	stm	r0, {r1, r3}
   17d34:	e1a04000 	mov	r4, r0
   17d38:	e3a00010 	mov	r0, #16
   17d3c:	eb004c83 	bl	2af50 <operator new(unsigned int)>
   17d40:	e1a05000 	mov	r5, r0
   17d44:	eb003f52 	bl	27a94 <CString::CString()>
   17d48:	e5943000 	ldr	r3, [r4]
   17d4c:	e5845008 	str	r5, [r4, #8]
   17d50:	e3530000 	cmp	r3, #0
   17d54:	0a000001 	beq	17d60 <CUSBString::CUSBString(CUSBDevice*)+0x38>
   17d58:	e1a00004 	mov	r0, r4
   17d5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17d60:	e3a02023 	mov	r2, #35	; 0x23
   17d64:	e59f1004 	ldr	r1, [pc, #4]	; 17d70 <CUSBString::CUSBString(CUSBDevice*)+0x48>
   17d68:	e59f0004 	ldr	r0, [pc, #4]	; 17d74 <CUSBString::CUSBString(CUSBDevice*)+0x4c>
   17d6c:	eb003270 	bl	24734 <assertion_failed>
   17d70:	0003fd3c 	.word	0x0003fd3c
   17d74:	0003df08 	.word	0x0003df08

00017d78 <CUSBString::CUSBString(CUSBString*)>:
   17d78:	e3a03000 	mov	r3, #0
   17d7c:	e92d4070 	push	{r4, r5, r6, lr}
   17d80:	e5803004 	str	r3, [r0, #4]
   17d84:	e1a04000 	mov	r4, r0
   17d88:	e3a00010 	mov	r0, #16
   17d8c:	e1a05001 	mov	r5, r1
   17d90:	eb004c6e 	bl	2af50 <operator new(unsigned int)>
   17d94:	e1a06000 	mov	r6, r0
   17d98:	eb003f3d 	bl	27a94 <CString::CString()>
   17d9c:	e3550000 	cmp	r5, #0
   17da0:	e5846008 	str	r6, [r4, #8]
   17da4:	0a000016 	beq	17e04 <CUSBString::CUSBString(CUSBString*)+0x8c>
   17da8:	e1c520d0 	ldrd	r2, [r5]
   17dac:	e3530000 	cmp	r3, #0
   17db0:	e5842000 	str	r2, [r4]
   17db4:	0a000008 	beq	17ddc <CUSBString::CUSBString(CUSBString*)+0x64>
   17db8:	e5d30000 	ldrb	r0, [r3]
   17dbc:	eb004c69 	bl	2af68 <operator new[](unsigned int)>
   17dc0:	e5951004 	ldr	r1, [r5, #4]
   17dc4:	e5840004 	str	r0, [r4, #4]
   17dc8:	e5d12000 	ldrb	r2, [r1]
   17dcc:	eb004a79 	bl	2a7b8 <memcpy>
   17dd0:	e5943008 	ldr	r3, [r4, #8]
   17dd4:	e3530000 	cmp	r3, #0
   17dd8:	0a000005 	beq	17df4 <CUSBString::CUSBString(CUSBString*)+0x7c>
   17ddc:	e5953008 	ldr	r3, [r5, #8]
   17de0:	e3530000 	cmp	r3, #0
   17de4:	0a00000a 	beq	17e14 <CUSBString::CUSBString(CUSBString*)+0x9c>
   17de8:	e1a00004 	mov	r0, r4
   17dec:	e5843008 	str	r3, [r4, #8]
   17df0:	e8bd8070 	pop	{r4, r5, r6, pc}
   17df4:	e3a02035 	mov	r2, #53	; 0x35
   17df8:	e59f1024 	ldr	r1, [pc, #36]	; 17e24 <CUSBString::CUSBString(CUSBString*)+0xac>
   17dfc:	e59f0024 	ldr	r0, [pc, #36]	; 17e28 <CUSBString::CUSBString(CUSBString*)+0xb0>
   17e00:	eb00324b 	bl	24734 <assertion_failed>
   17e04:	e3a0202b 	mov	r2, #43	; 0x2b
   17e08:	e59f1014 	ldr	r1, [pc, #20]	; 17e24 <CUSBString::CUSBString(CUSBString*)+0xac>
   17e0c:	e59f0018 	ldr	r0, [pc, #24]	; 17e2c <CUSBString::CUSBString(CUSBString*)+0xb4>
   17e10:	eb003247 	bl	24734 <assertion_failed>
   17e14:	e3a02036 	mov	r2, #54	; 0x36
   17e18:	e59f1004 	ldr	r1, [pc, #4]	; 17e24 <CUSBString::CUSBString(CUSBString*)+0xac>
   17e1c:	e59f000c 	ldr	r0, [pc, #12]	; 17e30 <CUSBString::CUSBString(CUSBString*)+0xb8>
   17e20:	eb003243 	bl	24734 <assertion_failed>
   17e24:	0003fd3c 	.word	0x0003fd3c
   17e28:	0003fd4c 	.word	0x0003fd4c
   17e2c:	0003e410 	.word	0x0003e410
   17e30:	0003fd5c 	.word	0x0003fd5c

00017e34 <CUSBString::~CUSBString()>:
   17e34:	e92d4010 	push	{r4, lr}
   17e38:	e1a04000 	mov	r4, r0
   17e3c:	e5900008 	ldr	r0, [r0, #8]
   17e40:	e3500000 	cmp	r0, #0
   17e44:	0a000002 	beq	17e54 <CUSBString::~CUSBString()+0x20>
   17e48:	e5903000 	ldr	r3, [r0]
   17e4c:	e5933004 	ldr	r3, [r3, #4]
   17e50:	e12fff33 	blx	r3
   17e54:	e3a03000 	mov	r3, #0
   17e58:	e5940004 	ldr	r0, [r4, #4]
   17e5c:	e5843008 	str	r3, [r4, #8]
   17e60:	e1500003 	cmp	r0, r3
   17e64:	0a000000 	beq	17e6c <CUSBString::~CUSBString()+0x38>
   17e68:	eb004c45 	bl	2af84 <operator delete[](void*)>
   17e6c:	e1a00004 	mov	r0, r4
   17e70:	e8bd8010 	pop	{r4, pc}

00017e74 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   17e74:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e78:	e2517000 	subs	r7, r1, #0
   17e7c:	e28db020 	add	fp, sp, #32
   17e80:	e24dd014 	sub	sp, sp, #20
   17e84:	0a000051 	beq	17fd0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x15c>
   17e88:	e1a04000 	mov	r4, r0
   17e8c:	e5900004 	ldr	r0, [r0, #4]
   17e90:	e1a05002 	mov	r5, r2
   17e94:	e3500000 	cmp	r0, #0
   17e98:	0a000000 	beq	17ea0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   17e9c:	eb004c38 	bl	2af84 <operator delete[](void*)>
   17ea0:	e3a00004 	mov	r0, #4
   17ea4:	eb004c2f 	bl	2af68 <operator new[](unsigned int)>
   17ea8:	e5943000 	ldr	r3, [r4]
   17eac:	e5840004 	str	r0, [r4, #4]
   17eb0:	e3530000 	cmp	r3, #0
   17eb4:	0a000049 	beq	17fe0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x16c>
   17eb8:	e1a00003 	mov	r0, r3
   17ebc:	ebffd92e 	bl	e37c <CUSBDevice::GetHost() const>
   17ec0:	e1a06000 	mov	r6, r0
   17ec4:	e5940000 	ldr	r0, [r4]
   17ec8:	ebffd921 	bl	e354 <CUSBDevice::GetEndpoint0() const>
   17ecc:	e3a08080 	mov	r8, #128	; 0x80
   17ed0:	e3a02004 	mov	r2, #4
   17ed4:	e5943004 	ldr	r3, [r4, #4]
   17ed8:	e1a01000 	mov	r1, r0
   17edc:	e98d0104 	stmib	sp, {r2, r8}
   17ee0:	e58d3000 	str	r3, [sp]
   17ee4:	e1a00006 	mov	r0, r6
   17ee8:	e1a03007 	mov	r3, r7
   17eec:	e3a02003 	mov	r2, #3
   17ef0:	e58d500c 	str	r5, [sp, #12]
   17ef4:	ebffea70 	bl	128bc <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17ef8:	e3500000 	cmp	r0, #0
   17efc:	ba000030 	blt	17fc4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17f00:	e5940004 	ldr	r0, [r4, #4]
   17f04:	e5d06000 	ldrb	r6, [r0]
   17f08:	e3560001 	cmp	r6, #1
   17f0c:	9a00002c 	bls	17fc4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17f10:	e3160001 	tst	r6, #1
   17f14:	1a00002a 	bne	17fc4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17f18:	e5d09001 	ldrb	r9, [r0, #1]
   17f1c:	e3590003 	cmp	r9, #3
   17f20:	1a000027 	bne	17fc4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17f24:	e3560004 	cmp	r6, #4
   17f28:	8a000030 	bhi	17ff0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x17c>
   17f2c:	e3560002 	cmp	r6, #2
   17f30:	0a000054 	beq	18088 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x214>
   17f34:	e3560004 	cmp	r6, #4
   17f38:	024dd008 	subeq	sp, sp, #8
   17f3c:	03a0e001 	moveq	lr, #1
   17f40:	028d5010 	addeq	r5, sp, #16
   17f44:	1a000053 	bne	18098 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x224>
   17f48:	e24e1001 	sub	r1, lr, #1
   17f4c:	e0811005 	add	r1, r1, r5
   17f50:	e245c001 	sub	ip, r5, #1
   17f54:	e2656001 	rsb	r6, r5, #1
   17f58:	e086200c 	add	r2, r6, ip
   17f5c:	e0802082 	add	r2, r0, r2, lsl #1
   17f60:	e5d23002 	ldrb	r3, [r2, #2]
   17f64:	e5d22003 	ldrb	r2, [r2, #3]
   17f68:	e1833402 	orr	r3, r3, r2, lsl #8
   17f6c:	e2432020 	sub	r2, r3, #32
   17f70:	e352005e 	cmp	r2, #94	; 0x5e
   17f74:	83a0305f 	movhi	r3, #95	; 0x5f
   17f78:	e5ec3001 	strb	r3, [ip, #1]!
   17f7c:	e15c0001 	cmp	ip, r1
   17f80:	1afffff4 	bne	17f58 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xe4>
   17f84:	e3a03000 	mov	r3, #0
   17f88:	e5940008 	ldr	r0, [r4, #8]
   17f8c:	e7c5300e 	strb	r3, [r5, lr]
   17f90:	e1500003 	cmp	r0, r3
   17f94:	0a000002 	beq	17fa4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x130>
   17f98:	e5903000 	ldr	r3, [r0]
   17f9c:	e5933004 	ldr	r3, [r3, #4]
   17fa0:	e12fff33 	blx	r3
   17fa4:	e3a00010 	mov	r0, #16
   17fa8:	eb004be8 	bl	2af50 <operator new(unsigned int)>
   17fac:	e1a06000 	mov	r6, r0
   17fb0:	e1a01005 	mov	r1, r5
   17fb4:	eb003ebc 	bl	27aac <CString::CString(char const*)>
   17fb8:	e3a00001 	mov	r0, #1
   17fbc:	e5846008 	str	r6, [r4, #8]
   17fc0:	ea000000 	b	17fc8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x154>
   17fc4:	e3a00000 	mov	r0, #0
   17fc8:	e24bd020 	sub	sp, fp, #32
   17fcc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fd0:	e3a02047 	mov	r2, #71	; 0x47
   17fd4:	e59f10cc 	ldr	r1, [pc, #204]	; 180a8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x234>
   17fd8:	e59f00cc 	ldr	r0, [pc, #204]	; 180ac <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x238>
   17fdc:	eb0031d4 	bl	24734 <assertion_failed>
   17fe0:	e3a0204d 	mov	r2, #77	; 0x4d
   17fe4:	e59f10bc 	ldr	r1, [pc, #188]	; 180a8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x234>
   17fe8:	e59f00c0 	ldr	r0, [pc, #192]	; 180b0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x23c>
   17fec:	eb0031d0 	bl	24734 <assertion_failed>
   17ff0:	e3a01002 	mov	r1, #2
   17ff4:	eb004be3 	bl	2af88 <operator delete(void*, unsigned int)>
   17ff8:	e1a00006 	mov	r0, r6
   17ffc:	eb004bd9 	bl	2af68 <operator new[](unsigned int)>
   18000:	e1a03000 	mov	r3, r0
   18004:	e5940000 	ldr	r0, [r4]
   18008:	e5843004 	str	r3, [r4, #4]
   1800c:	ebffd8da 	bl	e37c <CUSBDevice::GetHost() const>
   18010:	e1a0a000 	mov	sl, r0
   18014:	e5940000 	ldr	r0, [r4]
   18018:	ebffd8cd 	bl	e354 <CUSBDevice::GetEndpoint0() const>
   1801c:	e594c004 	ldr	ip, [r4, #4]
   18020:	e1a01000 	mov	r1, r0
   18024:	e1a03007 	mov	r3, r7
   18028:	e1a0000a 	mov	r0, sl
   1802c:	e1a02009 	mov	r2, r9
   18030:	e98d0140 	stmib	sp, {r6, r8}
   18034:	e58d500c 	str	r5, [sp, #12]
   18038:	e58dc000 	str	ip, [sp]
   1803c:	ebffea1e 	bl	128bc <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   18040:	e1560000 	cmp	r6, r0
   18044:	1affffde 	bne	17fc4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   18048:	e5940004 	ldr	r0, [r4, #4]
   1804c:	e5d03000 	ldrb	r3, [r0]
   18050:	e1530006 	cmp	r3, r6
   18054:	1affffda 	bne	17fc4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   18058:	e5d02001 	ldrb	r2, [r0, #1]
   1805c:	e3520003 	cmp	r2, #3
   18060:	1affffd7 	bne	17fc4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   18064:	e3130001 	tst	r3, #1
   18068:	1a00000a 	bne	18098 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x224>
   1806c:	e2433002 	sub	r3, r3, #2
   18070:	e1a0e0c3 	asr	lr, r3, #1
   18074:	e28e3008 	add	r3, lr, #8
   18078:	e3c33007 	bic	r3, r3, #7
   1807c:	e04dd003 	sub	sp, sp, r3
   18080:	e28d5010 	add	r5, sp, #16
   18084:	eaffffaf 	b	17f48 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xd4>
   18088:	e3a02075 	mov	r2, #117	; 0x75
   1808c:	e59f1014 	ldr	r1, [pc, #20]	; 180a8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x234>
   18090:	e59f001c 	ldr	r0, [pc, #28]	; 180b4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x240>
   18094:	eb0031a6 	bl	24734 <assertion_failed>
   18098:	e3a02076 	mov	r2, #118	; 0x76
   1809c:	e59f1004 	ldr	r1, [pc, #4]	; 180a8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x234>
   180a0:	e59f0010 	ldr	r0, [pc, #16]	; 180b8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x244>
   180a4:	eb0031a2 	bl	24734 <assertion_failed>
   180a8:	0003fd3c 	.word	0x0003fd3c
   180ac:	0003fd74 	.word	0x0003fd74
   180b0:	0003df08 	.word	0x0003df08
   180b4:	0003fd80 	.word	0x0003fd80
   180b8:	0003fd9c 	.word	0x0003fd9c

000180bc <CUSBString::Get() const>:
   180bc:	e5900008 	ldr	r0, [r0, #8]
   180c0:	ea003e8b 	b	27af4 <CString::operator char const*() const>

000180c4 <CUSBString::GetLanguageID()>:
   180c4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   180c8:	e1a06000 	mov	r6, r0
   180cc:	e24dd014 	sub	sp, sp, #20
   180d0:	e3a00004 	mov	r0, #4
   180d4:	eb004ba3 	bl	2af68 <operator new[](unsigned int)>
   180d8:	e5963000 	ldr	r3, [r6]
   180dc:	e3530000 	cmp	r3, #0
   180e0:	0a000057 	beq	18244 <CUSBString::GetLanguageID()+0x180>
   180e4:	e1a04000 	mov	r4, r0
   180e8:	e1a00003 	mov	r0, r3
   180ec:	ebffd8a2 	bl	e37c <CUSBDevice::GetHost() const>
   180f0:	e1a05000 	mov	r5, r0
   180f4:	e5960000 	ldr	r0, [r6]
   180f8:	ebffd895 	bl	e354 <CUSBDevice::GetEndpoint0() const>
   180fc:	e3a07080 	mov	r7, #128	; 0x80
   18100:	e3a03000 	mov	r3, #0
   18104:	e3a02004 	mov	r2, #4
   18108:	e1a01000 	mov	r1, r0
   1810c:	e98d0084 	stmib	sp, {r2, r7}
   18110:	e1a00005 	mov	r0, r5
   18114:	e3a02003 	mov	r2, #3
   18118:	e58d4000 	str	r4, [sp]
   1811c:	e58d300c 	str	r3, [sp, #12]
   18120:	ebffe9e5 	bl	128bc <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   18124:	e3500000 	cmp	r0, #0
   18128:	ba00001e 	blt	181a8 <CUSBString::GetLanguageID()+0xe4>
   1812c:	e5d45000 	ldrb	r5, [r4]
   18130:	e3550003 	cmp	r5, #3
   18134:	9a00001b 	bls	181a8 <CUSBString::GetLanguageID()+0xe4>
   18138:	e2159001 	ands	r9, r5, #1
   1813c:	1a000019 	bne	181a8 <CUSBString::GetLanguageID()+0xe4>
   18140:	e5d48001 	ldrb	r8, [r4, #1]
   18144:	e3580003 	cmp	r8, #3
   18148:	1a000016 	bne	181a8 <CUSBString::GetLanguageID()+0xe4>
   1814c:	e3550004 	cmp	r5, #4
   18150:	1a00001a 	bne	181c0 <CUSBString::GetLanguageID()+0xfc>
   18154:	e3a02000 	mov	r2, #0
   18158:	e2455002 	sub	r5, r5, #2
   1815c:	e59f00fc 	ldr	r0, [pc, #252]	; 18260 <CUSBString::GetLanguageID()+0x19c>
   18160:	e1a030c5 	asr	r3, r5, #1
   18164:	e0841082 	add	r1, r4, r2, lsl #1
   18168:	e5d15002 	ldrb	r5, [r1, #2]
   1816c:	e5d11003 	ldrb	r1, [r1, #3]
   18170:	e1855401 	orr	r5, r5, r1, lsl #8
   18174:	e1550000 	cmp	r5, r0
   18178:	0a000035 	beq	18254 <CUSBString::GetLanguageID()+0x190>
   1817c:	e2822001 	add	r2, r2, #1
   18180:	e1530002 	cmp	r3, r2
   18184:	1afffff6 	bne	18164 <CUSBString::GetLanguageID()+0xa0>
   18188:	e5d45002 	ldrb	r5, [r4, #2]
   1818c:	e5d43003 	ldrb	r3, [r4, #3]
   18190:	e1a00004 	mov	r0, r4
   18194:	e1855403 	orr	r5, r5, r3, lsl #8
   18198:	eb004b79 	bl	2af84 <operator delete[](void*)>
   1819c:	e1a00005 	mov	r0, r5
   181a0:	e28dd014 	add	sp, sp, #20
   181a4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   181a8:	e1a00004 	mov	r0, r4
   181ac:	eb004b74 	bl	2af84 <operator delete[](void*)>
   181b0:	e59f50a8 	ldr	r5, [pc, #168]	; 18260 <CUSBString::GetLanguageID()+0x19c>
   181b4:	e1a00005 	mov	r0, r5
   181b8:	e28dd014 	add	sp, sp, #20
   181bc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   181c0:	e1a00004 	mov	r0, r4
   181c4:	eb004b6e 	bl	2af84 <operator delete[](void*)>
   181c8:	e1a00005 	mov	r0, r5
   181cc:	eb004b65 	bl	2af68 <operator new[](unsigned int)>
   181d0:	e1a04000 	mov	r4, r0
   181d4:	e5960000 	ldr	r0, [r6]
   181d8:	ebffd867 	bl	e37c <CUSBDevice::GetHost() const>
   181dc:	e1a03000 	mov	r3, r0
   181e0:	e5960000 	ldr	r0, [r6]
   181e4:	e1a06003 	mov	r6, r3
   181e8:	ebffd859 	bl	e354 <CUSBDevice::GetEndpoint0() const>
   181ec:	e1a03009 	mov	r3, r9
   181f0:	e1a01000 	mov	r1, r0
   181f4:	e1a02008 	mov	r2, r8
   181f8:	e1a00006 	mov	r0, r6
   181fc:	e98d02a0 	stmib	sp, {r5, r7, r9}
   18200:	e58d4000 	str	r4, [sp]
   18204:	ebffe9ac 	bl	128bc <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   18208:	e1550000 	cmp	r5, r0
   1820c:	1affffe5 	bne	181a8 <CUSBString::GetLanguageID()+0xe4>
   18210:	e5d43000 	ldrb	r3, [r4]
   18214:	e1530005 	cmp	r3, r5
   18218:	1affffe2 	bne	181a8 <CUSBString::GetLanguageID()+0xe4>
   1821c:	e5d42001 	ldrb	r2, [r4, #1]
   18220:	e3520003 	cmp	r2, #3
   18224:	1affffdf 	bne	181a8 <CUSBString::GetLanguageID()+0xe4>
   18228:	e3130001 	tst	r3, #1
   1822c:	e1a05003 	mov	r5, r3
   18230:	0affffc7 	beq	18154 <CUSBString::GetLanguageID()+0x90>
   18234:	e3a020c8 	mov	r2, #200	; 0xc8
   18238:	e59f1024 	ldr	r1, [pc, #36]	; 18264 <CUSBString::GetLanguageID()+0x1a0>
   1823c:	e59f0024 	ldr	r0, [pc, #36]	; 18268 <CUSBString::GetLanguageID()+0x1a4>
   18240:	eb00313b 	bl	24734 <assertion_failed>
   18244:	e3a0209a 	mov	r2, #154	; 0x9a
   18248:	e59f1014 	ldr	r1, [pc, #20]	; 18264 <CUSBString::GetLanguageID()+0x1a0>
   1824c:	e59f0018 	ldr	r0, [pc, #24]	; 1826c <CUSBString::GetLanguageID()+0x1a8>
   18250:	eb003137 	bl	24734 <assertion_failed>
   18254:	e1a00004 	mov	r0, r4
   18258:	eb004b49 	bl	2af84 <operator delete[](void*)>
   1825c:	eaffffd4 	b	181b4 <CUSBString::GetLanguageID()+0xf0>
   18260:	00000409 	.word	0x00000409
   18264:	0003fd3c 	.word	0x0003fd3c
   18268:	0003fdc0 	.word	0x0003fdc0
   1826c:	0003df08 	.word	0x0003df08

00018270 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   18270:	e3a03000 	mov	r3, #0
   18274:	e92d4010 	push	{r4, lr}
   18278:	e1a04000 	mov	r4, r0
   1827c:	e5803000 	str	r3, [r0]
   18280:	e5803004 	str	r3, [r0, #4]
   18284:	e5803008 	str	r3, [r0, #8]
   18288:	e1c030bc 	strh	r3, [r0, #12]
   1828c:	e5803010 	str	r3, [r0, #16]
   18290:	e2800014 	add	r0, r0, #20
   18294:	eb00017d 	bl	18890 <CKeyMap::CKeyMap()>
   18298:	e1a00004 	mov	r0, r4
   1829c:	e8bd8010 	pop	{r4, pc}

000182a0 <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   182a0:	e3a03000 	mov	r3, #0
   182a4:	e92d4010 	push	{r4, lr}
   182a8:	e1a04000 	mov	r4, r0
   182ac:	e5803000 	str	r3, [r0]
   182b0:	e5803004 	str	r3, [r0, #4]
   182b4:	e5803008 	str	r3, [r0, #8]
   182b8:	e2800014 	add	r0, r0, #20
   182bc:	eb0000ae 	bl	1857c <CKeyMap::~CKeyMap()>
   182c0:	e1a00004 	mov	r0, r4
   182c4:	e8bd8010 	pop	{r4, pc}

000182c8 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   182c8:	e3510000 	cmp	r1, #0
   182cc:	0a000001 	beq	182d8 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x10>
   182d0:	e5801000 	str	r1, [r0]
   182d4:	e12fff1e 	bx	lr
   182d8:	e3a0202f 	mov	r2, #47	; 0x2f
   182dc:	e92d4010 	push	{r4, lr}
   182e0:	e59f1004 	ldr	r1, [pc, #4]	; 182ec <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x24>
   182e4:	e59f0004 	ldr	r0, [pc, #4]	; 182f0 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x28>
   182e8:	eb003111 	bl	24734 <assertion_failed>
   182ec:	0003fde4 	.word	0x0003fde4
   182f0:	0003fdfc 	.word	0x0003fdfc

000182f4 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   182f4:	e3510000 	cmp	r1, #0
   182f8:	0a000001 	beq	18304 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x10>
   182fc:	e5801004 	str	r1, [r0, #4]
   18300:	e12fff1e 	bx	lr
   18304:	e3a02035 	mov	r2, #53	; 0x35
   18308:	e92d4010 	push	{r4, lr}
   1830c:	e59f1004 	ldr	r1, [pc, #4]	; 18318 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x24>
   18310:	e59f0004 	ldr	r0, [pc, #4]	; 1831c <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x28>
   18314:	eb003106 	bl	24734 <assertion_failed>
   18318:	0003fde4 	.word	0x0003fde4
   1831c:	0003fe14 	.word	0x0003fe14

00018320 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   18320:	e3510000 	cmp	r1, #0
   18324:	0a000001 	beq	18330 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x10>
   18328:	e5801008 	str	r1, [r0, #8]
   1832c:	e12fff1e 	bx	lr
   18330:	e3a0203b 	mov	r2, #59	; 0x3b
   18334:	e92d4010 	push	{r4, lr}
   18338:	e59f1004 	ldr	r1, [pc, #4]	; 18344 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x24>
   1833c:	e59f0004 	ldr	r0, [pc, #4]	; 18348 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x28>
   18340:	eb0030fb 	bl	24734 <assertion_failed>
   18344:	0003fde4 	.word	0x0003fde4
   18348:	0003fe30 	.word	0x0003fe30

0001834c <CKeyboardBehaviour::GetLEDStatus() const>:
   1834c:	e2800014 	add	r0, r0, #20
   18350:	ea000121 	b	187dc <CKeyMap::GetLEDStatus() const>

00018354 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   18354:	e92d4030 	push	{r4, r5, lr}
   18358:	e2805014 	add	r5, r0, #20
   1835c:	e5d0200c 	ldrb	r2, [r0, #12]
   18360:	e24dd014 	sub	sp, sp, #20
   18364:	e1a04000 	mov	r4, r0
   18368:	e1a00005 	mov	r0, r5
   1836c:	e58d2004 	str	r2, [sp, #4]
   18370:	eb0000a4 	bl	18608 <CKeyMap::Translate(unsigned char, unsigned char)>
   18374:	e59f30a4 	ldr	r3, [pc, #164]	; 18420 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xcc>
   18378:	e59d2004 	ldr	r2, [sp, #4]
   1837c:	e1500003 	cmp	r0, r3
   18380:	8a000009 	bhi	183ac <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x58>
   18384:	e243300c 	sub	r3, r3, #12
   18388:	e1500003 	cmp	r0, r3
   1838c:	8a00001b 	bhi	18400 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xac>
   18390:	e2403e13 	sub	r3, r0, #304	; 0x130
   18394:	e2433003 	sub	r3, r3, #3
   18398:	e6ff3073 	uxth	r3, r3
   1839c:	e3530002 	cmp	r3, #2
   183a0:	8a00000a 	bhi	183d0 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x7c>
   183a4:	e28dd014 	add	sp, sp, #20
   183a8:	e8bd8030 	pop	{r4, r5, pc}
   183ac:	e59f3070 	ldr	r3, [pc, #112]	; 18424 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xd0>
   183b0:	e1500003 	cmp	r0, r3
   183b4:	1a000005 	bne	183d0 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x7c>
   183b8:	e5943008 	ldr	r3, [r4, #8]
   183bc:	e3530000 	cmp	r3, #0
   183c0:	0afffff7 	beq	183a4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x50>
   183c4:	e12fff33 	blx	r3
   183c8:	e28dd014 	add	sp, sp, #20
   183cc:	e8bd8030 	pop	{r4, r5, pc}
   183d0:	e1a01000 	mov	r1, r0
   183d4:	e28d300c 	add	r3, sp, #12
   183d8:	e1a00005 	mov	r0, r5
   183dc:	eb0000cd 	bl	18718 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   183e0:	e3500000 	cmp	r0, #0
   183e4:	0affffee 	beq	183a4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x50>
   183e8:	e5943000 	ldr	r3, [r4]
   183ec:	e3530000 	cmp	r3, #0
   183f0:	0affffeb 	beq	183a4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x50>
   183f4:	e12fff33 	blx	r3
   183f8:	e28dd014 	add	sp, sp, #20
   183fc:	e8bd8030 	pop	{r4, r5, pc}
   18400:	e5943004 	ldr	r3, [r4, #4]
   18404:	e3530000 	cmp	r3, #0
   18408:	0affffe5 	beq	183a4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x50>
   1840c:	e2400f4d 	sub	r0, r0, #308	; 0x134
   18410:	e2400002 	sub	r0, r0, #2
   18414:	e12fff33 	blx	r3
   18418:	e28dd014 	add	sp, sp, #20
   1841c:	e8bd8030 	pop	{r4, r5, pc}
   18420:	00000141 	.word	0x00000141
   18424:	00000142 	.word	0x00000142

00018428 <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   18428:	e2212080 	eor	r2, r1, #128	; 0x80
   1842c:	e3520007 	cmp	r2, #7
   18430:	e241c080 	sub	ip, r1, #128	; 0x80
   18434:	8a000004 	bhi	1844c <CKeyboardBehaviour::KeyPressed(unsigned char)+0x24>
   18438:	e3a01001 	mov	r1, #1
   1843c:	e5d0300c 	ldrb	r3, [r0, #12]
   18440:	e1833c11 	orr	r3, r3, r1, lsl ip
   18444:	e5c0300c 	strb	r3, [r0, #12]
   18448:	e12fff1e 	bx	lr
   1844c:	e5d0c00d 	ldrb	ip, [r0, #13]
   18450:	e15c0001 	cmp	ip, r1
   18454:	012fff1e 	bxeq	lr
   18458:	e5c0100d 	strb	r1, [r0, #13]
   1845c:	eaffffbc 	b	18354 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

00018460 <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   18460:	e2213080 	eor	r3, r1, #128	; 0x80
   18464:	e3530007 	cmp	r3, #7
   18468:	e92d4010 	push	{r4, lr}
   1846c:	e1a04000 	mov	r4, r0
   18470:	8a000005 	bhi	1848c <CKeyboardBehaviour::KeyReleased(unsigned char)+0x2c>
   18474:	e2412080 	sub	r2, r1, #128	; 0x80
   18478:	e3a01001 	mov	r1, #1
   1847c:	e5d0300c 	ldrb	r3, [r0, #12]
   18480:	e1c33211 	bic	r3, r3, r1, lsl r2
   18484:	e5c0300c 	strb	r3, [r0, #12]
   18488:	e8bd8010 	pop	{r4, pc}
   1848c:	e5d0300d 	ldrb	r3, [r0, #13]
   18490:	e1530001 	cmp	r3, r1
   18494:	18bd8010 	popne	{r4, pc}
   18498:	e5903010 	ldr	r3, [r0, #16]
   1849c:	e3530000 	cmp	r3, #0
   184a0:	1a000002 	bne	184b0 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   184a4:	e3a03000 	mov	r3, #0
   184a8:	e5c4300d 	strb	r3, [r4, #13]
   184ac:	e8bd8010 	pop	{r4, pc}
   184b0:	eb00466b 	bl	29e64 <CTimer::Get()>
   184b4:	e5941010 	ldr	r1, [r4, #16]
   184b8:	eb0044f9 	bl	298a4 <CTimer::CancelKernelTimer(unsigned int)>
   184bc:	e3a03000 	mov	r3, #0
   184c0:	e5843010 	str	r3, [r4, #16]
   184c4:	eafffff6 	b	184a4 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

000184c8 <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   184c8:	e92d4010 	push	{r4, lr}
   184cc:	e5903010 	ldr	r3, [r0, #16]
   184d0:	e24dd008 	sub	sp, sp, #8
   184d4:	e1530001 	cmp	r3, r1
   184d8:	1a000013 	bne	1852c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x64>
   184dc:	e5d0100d 	ldrb	r1, [r0, #13]
   184e0:	e1a04000 	mov	r4, r0
   184e4:	e3510000 	cmp	r1, #0
   184e8:	1a000001 	bne	184f4 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x2c>
   184ec:	e28dd008 	add	sp, sp, #8
   184f0:	e8bd8010 	pop	{r4, pc}
   184f4:	ebffff96 	bl	18354 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   184f8:	eb004659 	bl	29e64 <CTimer::Get()>
   184fc:	e3a03000 	mov	r3, #0
   18500:	e3a01008 	mov	r1, #8
   18504:	e59f2030 	ldr	r2, [pc, #48]	; 1853c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x74>
   18508:	e58d4000 	str	r4, [sp]
   1850c:	eb004492 	bl	2975c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   18510:	e3500000 	cmp	r0, #0
   18514:	e5840010 	str	r0, [r4, #16]
   18518:	1afffff3 	bne	184ec <CKeyboardBehaviour::TimerHandler(unsigned int)+0x24>
   1851c:	e3a020b7 	mov	r2, #183	; 0xb7
   18520:	e59f1018 	ldr	r1, [pc, #24]	; 18540 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x78>
   18524:	e59f0018 	ldr	r0, [pc, #24]	; 18544 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x7c>
   18528:	eb003081 	bl	24734 <assertion_failed>
   1852c:	e3a020b0 	mov	r2, #176	; 0xb0
   18530:	e59f1008 	ldr	r1, [pc, #8]	; 18540 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x78>
   18534:	e59f000c 	ldr	r0, [pc, #12]	; 18548 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x80>
   18538:	eb00307d 	bl	24734 <assertion_failed>
   1853c:	0001854c 	.word	0x0001854c
   18540:	0003fde4 	.word	0x0003fde4
   18544:	0003f230 	.word	0x0003f230
   18548:	0003fe48 	.word	0x0003fe48

0001854c <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   1854c:	e3520000 	cmp	r2, #0
   18550:	0a000002 	beq	18560 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x14>
   18554:	e1a01000 	mov	r1, r0
   18558:	e1a00002 	mov	r0, r2
   1855c:	eaffffd9 	b	184c8 <CKeyboardBehaviour::TimerHandler(unsigned int)>
   18560:	e3a020be 	mov	r2, #190	; 0xbe
   18564:	e92d4010 	push	{r4, lr}
   18568:	e59f1004 	ldr	r1, [pc, #4]	; 18574 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x28>
   1856c:	e59f0004 	ldr	r0, [pc, #4]	; 18578 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x2c>
   18570:	eb00306f 	bl	24734 <assertion_failed>
   18574:	0003fde4 	.word	0x0003fde4
   18578:	0003d518 	.word	0x0003d518

0001857c <CKeyMap::~CKeyMap()>:
   1857c:	e12fff1e 	bx	lr

00018580 <CKeyMap::ClearTable(unsigned char)>:
   18580:	e3510003 	cmp	r1, #3
   18584:	8a000008 	bhi	185ac <CKeyMap::ClearTable(unsigned char)+0x2c>
   18588:	e3a0c000 	mov	ip, #0
   1858c:	e2802b01 	add	r2, r0, #1024	; 0x400
   18590:	e0822081 	add	r2, r2, r1, lsl #1
   18594:	e0803081 	add	r3, r0, r1, lsl #1
   18598:	e0c3c0b8 	strh	ip, [r3], #8
   1859c:	e1530002 	cmp	r3, r2
   185a0:	1afffffc 	bne	18598 <CKeyMap::ClearTable(unsigned char)+0x18>
   185a4:	e3a00001 	mov	r0, #1
   185a8:	e12fff1e 	bx	lr
   185ac:	e3a00000 	mov	r0, #0
   185b0:	e12fff1e 	bx	lr

000185b4 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   185b4:	e6afc072 	sxtb	ip, r2
   185b8:	e35c0000 	cmp	ip, #0
   185bc:	c3a0c000 	movgt	ip, #0
   185c0:	d3a0c001 	movle	ip, #1
   185c4:	e3510003 	cmp	r1, #3
   185c8:	838cc001 	orrhi	ip, ip, #1
   185cc:	e35c0000 	cmp	ip, #0
   185d0:	1a000008 	bne	185f8 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x44>
   185d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   185d8:	e59fe024 	ldr	lr, [pc, #36]	; 18604 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x50>
   185dc:	e153000e 	cmp	r3, lr
   185e0:	93a0c001 	movls	ip, #1
   185e4:	90811102 	addls	r1, r1, r2, lsl #2
   185e8:	91a01081 	lslls	r1, r1, #1
   185ec:	918030b1 	strhls	r3, [r0, r1]
   185f0:	e1a0000c 	mov	r0, ip
   185f4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   185f8:	e3a0c000 	mov	ip, #0
   185fc:	e1a0000c 	mov	r0, ip
   18600:	e12fff1e 	bx	lr
   18604:	00000132 	.word	0x00000132

00018608 <CKeyMap::Translate(unsigned char, unsigned char)>:
   18608:	e6af3071 	sxtb	r3, r1
   1860c:	e3530000 	cmp	r3, #0
   18610:	e1a0c000 	mov	ip, r0
   18614:	da000027 	ble	186b8 <CKeyMap::Translate(unsigned char, unsigned char)+0xb0>
   18618:	e1a03181 	lsl	r3, r1, #3
   1861c:	e19030b3 	ldrh	r3, [r0, r3]
   18620:	e3530f42 	cmp	r3, #264	; 0x108
   18624:	0a00001d 	beq	186a0 <CKeyMap::Translate(unsigned char, unsigned char)+0x98>
   18628:	e2430f43 	sub	r0, r3, #268	; 0x10c
   1862c:	e2400003 	sub	r0, r0, #3
   18630:	e350000b 	cmp	r0, #11
   18634:	8a000001 	bhi	18640 <CKeyMap::Translate(unsigned char, unsigned char)+0x38>
   18638:	e3120004 	tst	r2, #4
   1863c:	1a000021 	bne	186c8 <CKeyMap::Translate(unsigned char, unsigned char)+0xc0>
   18640:	e312008c 	tst	r2, #140	; 0x8c
   18644:	1a00001b 	bne	186b8 <CKeyMap::Translate(unsigned char, unsigned char)+0xb0>
   18648:	e2413053 	sub	r3, r1, #83	; 0x53
   1864c:	e3530010 	cmp	r3, #16
   18650:	9a00001a 	bls	186c0 <CKeyMap::Translate(unsigned char, unsigned char)+0xb8>
   18654:	e3120040 	tst	r2, #64	; 0x40
   18658:	0a000027 	beq	186fc <CKeyMap::Translate(unsigned char, unsigned char)+0xf4>
   1865c:	e3120022 	tst	r2, #34	; 0x22
   18660:	13a03003 	movne	r3, #3
   18664:	03a03002 	moveq	r3, #2
   18668:	e0831101 	add	r1, r3, r1, lsl #2
   1866c:	e1a01081 	lsl	r1, r1, #1
   18670:	e19c00b1 	ldrh	r0, [ip, r1]
   18674:	e59f3090 	ldr	r3, [pc, #144]	; 1870c <CKeyMap::Translate(unsigned char, unsigned char)+0x104>
   18678:	e1500003 	cmp	r0, r3
   1867c:	0a000019 	beq	186e8 <CKeyMap::Translate(unsigned char, unsigned char)+0xe0>
   18680:	e3500e12 	cmp	r0, #288	; 0x120
   18684:	0a000012 	beq	186d4 <CKeyMap::Translate(unsigned char, unsigned char)+0xcc>
   18688:	e3500f47 	cmp	r0, #284	; 0x11c
   1868c:	05dc3400 	ldrbeq	r3, [ip, #1024]	; 0x400
   18690:	02800017 	addeq	r0, r0, #23
   18694:	02233001 	eoreq	r3, r3, #1
   18698:	05cc3400 	strbeq	r3, [ip, #1024]	; 0x400
   1869c:	e12fff1e 	bx	lr
   186a0:	e3120011 	tst	r2, #17
   186a4:	0affffe5 	beq	18640 <CKeyMap::Translate(unsigned char, unsigned char)+0x38>
   186a8:	e3120004 	tst	r2, #4
   186ac:	0affffe3 	beq	18640 <CKeyMap::Translate(unsigned char, unsigned char)+0x38>
   186b0:	e59f0058 	ldr	r0, [pc, #88]	; 18710 <CKeyMap::Translate(unsigned char, unsigned char)+0x108>
   186b4:	e12fff1e 	bx	lr
   186b8:	e3a00000 	mov	r0, #0
   186bc:	e12fff1e 	bx	lr
   186c0:	e5dc3401 	ldrb	r3, [ip, #1025]	; 0x401
   186c4:	eaffffe7 	b	18668 <CKeyMap::Translate(unsigned char, unsigned char)+0x60>
   186c8:	e2830027 	add	r0, r3, #39	; 0x27
   186cc:	e6ff0070 	uxth	r0, r0
   186d0:	e12fff1e 	bx	lr
   186d4:	e5dc3401 	ldrb	r3, [ip, #1025]	; 0x401
   186d8:	e3a00f4d 	mov	r0, #308	; 0x134
   186dc:	e2233001 	eor	r3, r3, #1
   186e0:	e5cc3401 	strb	r3, [ip, #1025]	; 0x401
   186e4:	e12fff1e 	bx	lr
   186e8:	e5dc3402 	ldrb	r3, [ip, #1026]	; 0x402
   186ec:	e59f0020 	ldr	r0, [pc, #32]	; 18714 <CKeyMap::Translate(unsigned char, unsigned char)+0x10c>
   186f0:	e2233001 	eor	r3, r3, #1
   186f4:	e5cc3402 	strb	r3, [ip, #1026]	; 0x402
   186f8:	e12fff1e 	bx	lr
   186fc:	e3120022 	tst	r2, #34	; 0x22
   18700:	13a03001 	movne	r3, #1
   18704:	03a03000 	moveq	r3, #0
   18708:	eaffffd6 	b	18668 <CKeyMap::Translate(unsigned char, unsigned char)+0x60>
   1870c:	0000011e 	.word	0x0000011e
   18710:	00000142 	.word	0x00000142
   18714:	00000135 	.word	0x00000135

00018718 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   18718:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1871c:	e241c021 	sub	ip, r1, #33	; 0x21
   18720:	e59fe0ac 	ldr	lr, [pc, #172]	; 187d4 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xbc>
   18724:	e6ffc07c 	uxth	ip, ip
   18728:	e15c000e 	cmp	ip, lr
   1872c:	8a000023 	bhi	187c0 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa8>
   18730:	e1a0c000 	mov	ip, r0
   18734:	e2410c01 	sub	r0, r1, #256	; 0x100
   18738:	e6ffe070 	uxth	lr, r0
   1873c:	e35e0032 	cmp	lr, #50	; 0x32
   18740:	9a000020 	bls	187c8 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   18744:	e3120011 	tst	r2, #17
   18748:	e6af2071 	sxtb	r2, r1
   1874c:	0a000009 	beq	18778 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x60>
   18750:	e6ef1071 	uxtb	r1, r1
   18754:	e2412061 	sub	r2, r1, #97	; 0x61
   18758:	e3520019 	cmp	r2, #25
   1875c:	8a000017 	bhi	187c0 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa8>
   18760:	e3a02000 	mov	r2, #0
   18764:	e2411060 	sub	r1, r1, #96	; 0x60
   18768:	e1a00003 	mov	r0, r3
   1876c:	e5c31000 	strb	r1, [r3]
   18770:	e5c32001 	strb	r2, [r3, #1]
   18774:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18778:	e5dc0400 	ldrb	r0, [ip, #1024]	; 0x400
   1877c:	e3500000 	cmp	r0, #0
   18780:	0a000009 	beq	187ac <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x94>
   18784:	e6ef1071 	uxtb	r1, r1
   18788:	e2410041 	sub	r0, r1, #65	; 0x41
   1878c:	e3500019 	cmp	r0, #25
   18790:	92811020 	addls	r1, r1, #32
   18794:	96af2071 	sxtbls	r2, r1
   18798:	9a000003 	bls	187ac <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x94>
   1879c:	e2410061 	sub	r0, r1, #97	; 0x61
   187a0:	e3500019 	cmp	r0, #25
   187a4:	92411020 	subls	r1, r1, #32
   187a8:	96af2071 	sxtbls	r2, r1
   187ac:	e3a01000 	mov	r1, #0
   187b0:	e1a00003 	mov	r0, r3
   187b4:	e5c32000 	strb	r2, [r3]
   187b8:	e5c31001 	strb	r1, [r3, #1]
   187bc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   187c0:	e3a00000 	mov	r0, #0
   187c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   187c8:	e59f3008 	ldr	r3, [pc, #8]	; 187d8 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xc0>
   187cc:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   187d0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   187d4:	00000111 	.word	0x00000111
   187d8:	000461f4 	.word	0x000461f4

000187dc <CKeyMap::GetLEDStatus() const>:
   187dc:	e5d03400 	ldrb	r3, [r0, #1024]	; 0x400
   187e0:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   187e4:	e3530000 	cmp	r3, #0
   187e8:	13a03002 	movne	r3, #2
   187ec:	03a03000 	moveq	r3, #0
   187f0:	e3520000 	cmp	r2, #0
   187f4:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   187f8:	13833001 	orrne	r3, r3, #1
   187fc:	e3520000 	cmp	r2, #0
   18800:	13833004 	orrne	r3, r3, #4
   18804:	e1a00003 	mov	r0, r3
   18808:	e12fff1e 	bx	lr

0001880c <CKeyMap::LookupDefaultMap(char const*)>:
   1880c:	e92d4070 	push	{r4, r5, r6, lr}
   18810:	e59f4064 	ldr	r4, [pc, #100]	; 1887c <CKeyMap::LookupDefaultMap(char const*)+0x70>
   18814:	e1a06000 	mov	r6, r0
   18818:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   1881c:	e3500000 	cmp	r0, #0
   18820:	0a000013 	beq	18874 <CKeyMap::LookupDefaultMap(char const*)+0x68>
   18824:	e3560000 	cmp	r6, #0
   18828:	13a05000 	movne	r5, #0
   1882c:	128440d0 	addne	r4, r4, #208	; 0xd0
   18830:	1a000004 	bne	18848 <CKeyMap::LookupDefaultMap(char const*)+0x3c>
   18834:	ea00000a 	b	18864 <CKeyMap::LookupDefaultMap(char const*)+0x58>
   18838:	e4940004 	ldr	r0, [r4], #4
   1883c:	e2855001 	add	r5, r5, #1
   18840:	e3500000 	cmp	r0, #0
   18844:	0a00000a 	beq	18874 <CKeyMap::LookupDefaultMap(char const*)+0x68>
   18848:	e1a01006 	mov	r1, r6
   1884c:	eb0045e8 	bl	29ff4 <strcmp>
   18850:	e3500000 	cmp	r0, #0
   18854:	1afffff7 	bne	18838 <CKeyMap::LookupDefaultMap(char const*)+0x2c>
   18858:	e59f0020 	ldr	r0, [pc, #32]	; 18880 <CKeyMap::LookupDefaultMap(char const*)+0x74>
   1885c:	e0800505 	add	r0, r0, r5, lsl #10
   18860:	e8bd8070 	pop	{r4, r5, r6, pc}
   18864:	e59f2018 	ldr	r2, [pc, #24]	; 18884 <CKeyMap::LookupDefaultMap(char const*)+0x78>
   18868:	e59f1018 	ldr	r1, [pc, #24]	; 18888 <CKeyMap::LookupDefaultMap(char const*)+0x7c>
   1886c:	e59f0018 	ldr	r0, [pc, #24]	; 1888c <CKeyMap::LookupDefaultMap(char const*)+0x80>
   18870:	eb002faf 	bl	24734 <assertion_failed>
   18874:	e3a00000 	mov	r0, #0
   18878:	e8bd8070 	pop	{r4, r5, r6, pc}
   1887c:	000461f4 	.word	0x000461f4
   18880:	0003ff64 	.word	0x0003ff64
   18884:	0000013f 	.word	0x0000013f
   18888:	0003fe5c 	.word	0x0003fe5c
   1888c:	0003fe68 	.word	0x0003fe68

00018890 <CKeyMap::CKeyMap()>:
   18890:	e3a01c01 	mov	r1, #256	; 0x100
   18894:	e3a03000 	mov	r3, #0
   18898:	e2802b01 	add	r2, r0, #1024	; 0x400
   1889c:	e92d4010 	push	{r4, lr}
   188a0:	e1c210b0 	strh	r1, [r2]
   188a4:	e5c03402 	strb	r3, [r0, #1026]	; 0x402
   188a8:	e1a04000 	mov	r4, r0
   188ac:	eb00364a 	bl	261dc <CKernelOptions::Get()>
   188b0:	eb00363a 	bl	261a0 <CKernelOptions::GetKeyMap() const>
   188b4:	e3500000 	cmp	r0, #0
   188b8:	0a00000f 	beq	188fc <CKeyMap::CKeyMap()+0x6c>
   188bc:	ebffffd2 	bl	1880c <CKeyMap::LookupDefaultMap(char const*)>
   188c0:	e2501000 	subs	r1, r0, #0
   188c4:	0a000004 	beq	188dc <CKeyMap::CKeyMap()+0x4c>
   188c8:	e3a02b01 	mov	r2, #1024	; 0x400
   188cc:	e1a00004 	mov	r0, r4
   188d0:	eb0047b8 	bl	2a7b8 <memcpy>
   188d4:	e1a00004 	mov	r0, r4
   188d8:	e8bd8010 	pop	{r4, pc}
   188dc:	e59f0028 	ldr	r0, [pc, #40]	; 1890c <CKeyMap::CKeyMap()+0x7c>
   188e0:	ebffffc9 	bl	1880c <CKeyMap::LookupDefaultMap(char const*)>
   188e4:	e2501000 	subs	r1, r0, #0
   188e8:	1afffff6 	bne	188c8 <CKeyMap::CKeyMap()+0x38>
   188ec:	e3a02080 	mov	r2, #128	; 0x80
   188f0:	e59f1018 	ldr	r1, [pc, #24]	; 18910 <CKeyMap::CKeyMap()+0x80>
   188f4:	e59f0018 	ldr	r0, [pc, #24]	; 18914 <CKeyMap::CKeyMap()+0x84>
   188f8:	eb002f8d 	bl	24734 <assertion_failed>
   188fc:	e3a0207a 	mov	r2, #122	; 0x7a
   18900:	e59f1008 	ldr	r1, [pc, #8]	; 18910 <CKeyMap::CKeyMap()+0x80>
   18904:	e59f000c 	ldr	r0, [pc, #12]	; 18918 <CKeyMap::CKeyMap()+0x88>
   18908:	eb002f89 	bl	24734 <assertion_failed>
   1890c:	0003fe78 	.word	0x0003fe78
   18910:	0003fe5c 	.word	0x0003fe5c
   18914:	0003fe7c 	.word	0x0003fe7c
   18918:	0003fe68 	.word	0x0003fe68

0001891c <CMouseDevice::~CMouseDevice()>:
   1891c:	e92d4070 	push	{r4, r5, r6, lr}
   18920:	e3a06000 	mov	r6, #0
   18924:	e1a04000 	mov	r4, r0
   18928:	e59f5034 	ldr	r5, [pc, #52]	; 18964 <CMouseDevice::~CMouseDevice()+0x48>
   1892c:	e5806020 	str	r6, [r0, #32]
   18930:	e2853008 	add	r3, r5, #8
   18934:	e5803000 	str	r3, [r0]
   18938:	eb00323f 	bl	2523c <CDeviceNameService::Get()>
   1893c:	e1a03006 	mov	r3, r6
   18940:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   18944:	e2851020 	add	r1, r5, #32
   18948:	eb003261 	bl	252d4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1894c:	e2840004 	add	r0, r4, #4
   18950:	eb00005e 	bl	18ad0 <CMouseBehaviour::~CMouseBehaviour()>
   18954:	e1a00004 	mov	r0, r4
   18958:	eb00314e 	bl	24e98 <CDevice::~CDevice()>
   1895c:	e1a00004 	mov	r0, r4
   18960:	e8bd8070 	pop	{r4, r5, r6, pc}
   18964:	00041770 	.word	0x00041770

00018968 <CMouseDevice::~CMouseDevice()>:
   18968:	e92d4010 	push	{r4, lr}
   1896c:	e1a04000 	mov	r4, r0
   18970:	ebffffe9 	bl	1891c <CMouseDevice::~CMouseDevice()>
   18974:	e1a00004 	mov	r0, r4
   18978:	e3a01028 	mov	r1, #40	; 0x28
   1897c:	eb004981 	bl	2af88 <operator delete(void*, unsigned int)>
   18980:	e1a00004 	mov	r0, r4
   18984:	e8bd8010 	pop	{r4, pc}

00018988 <CMouseDevice::CMouseDevice()>:
   18988:	e92d4070 	push	{r4, r5, r6, lr}
   1898c:	e1a04000 	mov	r4, r0
   18990:	e24dd008 	sub	sp, sp, #8
   18994:	eb00314d 	bl	24ed0 <CDevice::CDevice()>
   18998:	e1a00004 	mov	r0, r4
   1899c:	e3a06000 	mov	r6, #0
   189a0:	e59f5044 	ldr	r5, [pc, #68]	; 189ec <CMouseDevice::CMouseDevice()+0x64>
   189a4:	e2853008 	add	r3, r5, #8
   189a8:	e4803004 	str	r3, [r0], #4
   189ac:	eb00003e 	bl	18aac <CMouseBehaviour::CMouseBehaviour()>
   189b0:	e59f2038 	ldr	r2, [pc, #56]	; 189f0 <CMouseDevice::CMouseDevice()+0x68>
   189b4:	e5846020 	str	r6, [r4, #32]
   189b8:	e5923000 	ldr	r3, [r2]
   189bc:	e5843024 	str	r3, [r4, #36]	; 0x24
   189c0:	e2833001 	add	r3, r3, #1
   189c4:	e5823000 	str	r3, [r2]
   189c8:	eb00321b 	bl	2523c <CDeviceNameService::Get()>
   189cc:	e58d6000 	str	r6, [sp]
   189d0:	e1a03004 	mov	r3, r4
   189d4:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   189d8:	e2851020 	add	r1, r5, #32
   189dc:	eb003222 	bl	2526c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   189e0:	e1a00004 	mov	r0, r4
   189e4:	e28dd008 	add	sp, sp, #8
   189e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   189ec:	00041770 	.word	0x00041770
   189f0:	000462dc 	.word	0x000462dc

000189f4 <CMouseDevice::Setup(unsigned int, unsigned int)>:
   189f4:	e2800004 	add	r0, r0, #4
   189f8:	ea000035 	b	18ad4 <CMouseBehaviour::Setup(unsigned int, unsigned int)>

000189fc <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   189fc:	e2800004 	add	r0, r0, #4
   18a00:	ea00007b 	b	18bf4 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>

00018a04 <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   18a04:	e2800004 	add	r0, r0, #4
   18a08:	ea000102 	b	18e18 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

00018a0c <CMouseDevice::ShowCursor(bool)>:
   18a0c:	e2800004 	add	r0, r0, #4
   18a10:	ea000124 	b	18ea8 <CMouseBehaviour::ShowCursor(bool)>

00018a14 <CMouseDevice::UpdateCursor()>:
   18a14:	e5903020 	ldr	r3, [r0, #32]
   18a18:	e3530000 	cmp	r3, #0
   18a1c:	112fff1e 	bxne	lr
   18a20:	e2800004 	add	r0, r0, #4
   18a24:	ea00013a 	b	18f14 <CMouseBehaviour::UpdateCursor()>

00018a28 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))>:
   18a28:	e5903020 	ldr	r3, [r0, #32]
   18a2c:	e92d4010 	push	{r4, lr}
   18a30:	e3530000 	cmp	r3, #0
   18a34:	1a000006 	bne	18a54 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x2c>
   18a38:	e3510000 	cmp	r1, #0
   18a3c:	e5801020 	str	r1, [r0, #32]
   18a40:	18bd8010 	popne	{r4, pc}
   18a44:	e3a0204a 	mov	r2, #74	; 0x4a
   18a48:	e59f1014 	ldr	r1, [pc, #20]	; 18a64 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x3c>
   18a4c:	e59f0014 	ldr	r0, [pc, #20]	; 18a68 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x40>
   18a50:	eb002f37 	bl	24734 <assertion_failed>
   18a54:	e3a02048 	mov	r2, #72	; 0x48
   18a58:	e59f1004 	ldr	r1, [pc, #4]	; 18a64 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x3c>
   18a5c:	e59f0008 	ldr	r0, [pc, #8]	; 18a6c <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x44>
   18a60:	eb002f33 	bl	24734 <assertion_failed>
   18a64:	00041764 	.word	0x00041764
   18a68:	0003fcc8 	.word	0x0003fcc8
   18a6c:	0003fcb0 	.word	0x0003fcb0

00018a70 <CMouseDevice::ReportHandler(unsigned int, int, int)>:
   18a70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18a74:	e1a04000 	mov	r4, r0
   18a78:	e2800004 	add	r0, r0, #4
   18a7c:	e1a07003 	mov	r7, r3
   18a80:	e1a05001 	mov	r5, r1
   18a84:	e1a06002 	mov	r6, r2
   18a88:	eb00006b 	bl	18c3c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>
   18a8c:	e5943020 	ldr	r3, [r4, #32]
   18a90:	e3530000 	cmp	r3, #0
   18a94:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   18a98:	e1a02007 	mov	r2, r7
   18a9c:	e1a01006 	mov	r1, r6
   18aa0:	e1a00005 	mov	r0, r5
   18aa4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   18aa8:	e12fff13 	bx	r3

00018aac <CMouseBehaviour::CMouseBehaviour()>:
   18aac:	e3a02000 	mov	r2, #0
   18ab0:	e5802000 	str	r2, [r0]
   18ab4:	e5802004 	str	r2, [r0, #4]
   18ab8:	e5802008 	str	r2, [r0, #8]
   18abc:	e580200c 	str	r2, [r0, #12]
   18ac0:	e1c021b0 	strh	r2, [r0, #16]
   18ac4:	e5802014 	str	r2, [r0, #20]
   18ac8:	e5802018 	str	r2, [r0, #24]
   18acc:	e12fff1e 	bx	lr

00018ad0 <CMouseBehaviour::~CMouseBehaviour()>:
   18ad0:	e12fff1e 	bx	lr

00018ad4 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   18ad4:	e92d4010 	push	{r4, lr}
   18ad8:	e5903000 	ldr	r3, [r0]
   18adc:	e24dd038 	sub	sp, sp, #56	; 0x38
   18ae0:	e3530000 	cmp	r3, #0
   18ae4:	1a00002b 	bne	18b98 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xc4>
   18ae8:	e3510000 	cmp	r1, #0
   18aec:	e5801000 	str	r1, [r0]
   18af0:	0a00002c 	beq	18ba8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xd4>
   18af4:	e5904004 	ldr	r4, [r0, #4]
   18af8:	e3540000 	cmp	r4, #0
   18afc:	1a00002d 	bne	18bb8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xe4>
   18b00:	e3520000 	cmp	r2, #0
   18b04:	e5802004 	str	r2, [r0, #4]
   18b08:	0a00002e 	beq	18bc8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xf4>
   18b0c:	e2813001 	add	r3, r1, #1
   18b10:	e2822001 	add	r2, r2, #1
   18b14:	e1a030a3 	lsr	r3, r3, #1
   18b18:	e1a020a2 	lsr	r2, r2, #1
   18b1c:	e1a01004 	mov	r1, r4
   18b20:	e5803008 	str	r3, [r0, #8]
   18b24:	e580200c 	str	r2, [r0, #12]
   18b28:	e28d000c 	add	r0, sp, #12
   18b2c:	eb002f21 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   18b30:	e3a03018 	mov	r3, #24
   18b34:	e3a0c010 	mov	ip, #16
   18b38:	e59f1098 	ldr	r1, [pc, #152]	; 18bd8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x104>
   18b3c:	e58d3000 	str	r3, [sp]
   18b40:	e3c11103 	bic	r1, r1, #-1073741824	; 0xc0000000
   18b44:	e3811101 	orr	r1, r1, #1073741824	; 0x40000000
   18b48:	e3a03024 	mov	r3, #36	; 0x24
   18b4c:	e28d2014 	add	r2, sp, #20
   18b50:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   18b54:	e28d000c 	add	r0, sp, #12
   18b58:	e59f107c 	ldr	r1, [pc, #124]	; 18bdc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x108>
   18b5c:	e58d4028 	str	r4, [sp, #40]	; 0x28
   18b60:	e58d4030 	str	r4, [sp, #48]	; 0x30
   18b64:	e58d4034 	str	r4, [sp, #52]	; 0x34
   18b68:	e58dc020 	str	ip, [sp, #32]
   18b6c:	e58dc024 	str	ip, [sp, #36]	; 0x24
   18b70:	eb002f1c 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   18b74:	e2504000 	subs	r4, r0, #0
   18b78:	159d4020 	ldrne	r4, [sp, #32]
   18b7c:	e28d000c 	add	r0, sp, #12
   18b80:	116f4f14 	clzne	r4, r4
   18b84:	11a042a4 	lsrne	r4, r4, #5
   18b88:	eb002f11 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   18b8c:	e1a00004 	mov	r0, r4
   18b90:	e28dd038 	add	sp, sp, #56	; 0x38
   18b94:	e8bd8010 	pop	{r4, pc}
   18b98:	e3a0204c 	mov	r2, #76	; 0x4c
   18b9c:	e59f103c 	ldr	r1, [pc, #60]	; 18be0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18ba0:	e59f003c 	ldr	r0, [pc, #60]	; 18be4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x110>
   18ba4:	eb002ee2 	bl	24734 <assertion_failed>
   18ba8:	e3a0204e 	mov	r2, #78	; 0x4e
   18bac:	e59f102c 	ldr	r1, [pc, #44]	; 18be0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18bb0:	e59f0030 	ldr	r0, [pc, #48]	; 18be8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x114>
   18bb4:	eb002ede 	bl	24734 <assertion_failed>
   18bb8:	e3a02050 	mov	r2, #80	; 0x50
   18bbc:	e59f101c 	ldr	r1, [pc, #28]	; 18be0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18bc0:	e59f0024 	ldr	r0, [pc, #36]	; 18bec <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x118>
   18bc4:	eb002eda 	bl	24734 <assertion_failed>
   18bc8:	e3a02052 	mov	r2, #82	; 0x52
   18bcc:	e59f100c 	ldr	r1, [pc, #12]	; 18be0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18bd0:	e59f0018 	ldr	r0, [pc, #24]	; 18bf0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x11c>
   18bd4:	eb002ed6 	bl	24734 <assertion_failed>
   18bd8:	00041850 	.word	0x00041850
   18bdc:	00008010 	.word	0x00008010
   18be0:	00041798 	.word	0x00041798
   18be4:	000417ac 	.word	0x000417ac
   18be8:	000417c0 	.word	0x000417c0
   18bec:	000417d4 	.word	0x000417d4
   18bf0:	000417ec 	.word	0x000417ec

00018bf4 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   18bf4:	e5903018 	ldr	r3, [r0, #24]
   18bf8:	e92d4010 	push	{r4, lr}
   18bfc:	e3530000 	cmp	r3, #0
   18c00:	1a000006 	bne	18c20 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x2c>
   18c04:	e3510000 	cmp	r1, #0
   18c08:	e5801018 	str	r1, [r0, #24]
   18c0c:	18bd8010 	popne	{r4, pc}
   18c10:	e3a02070 	mov	r2, #112	; 0x70
   18c14:	e59f1014 	ldr	r1, [pc, #20]	; 18c30 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x3c>
   18c18:	e59f0014 	ldr	r0, [pc, #20]	; 18c34 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x40>
   18c1c:	eb002ec4 	bl	24734 <assertion_failed>
   18c20:	e3a0206e 	mov	r2, #110	; 0x6e
   18c24:	e59f1004 	ldr	r1, [pc, #4]	; 18c30 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x3c>
   18c28:	e59f0008 	ldr	r0, [pc, #8]	; 18c38 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x44>
   18c2c:	eb002ec0 	bl	24734 <assertion_failed>
   18c30:	00041798 	.word	0x00041798
   18c34:	0003fac8 	.word	0x0003fac8
   18c38:	00041800 	.word	0x00041800

00018c3c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>:
   18c3c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18c40:	e1a04000 	mov	r4, r0
   18c44:	e5900000 	ldr	r0, [r0]
   18c48:	e3500000 	cmp	r0, #0
   18c4c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   18c50:	e1a05001 	mov	r5, r1
   18c54:	e5941004 	ldr	r1, [r4, #4]
   18c58:	e3510000 	cmp	r1, #0
   18c5c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   18c60:	e59fc134 	ldr	ip, [pc, #308]	; 18d9c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x160>
   18c64:	e0822182 	add	r2, r2, r2, lsl #3
   18c68:	e1a02082 	lsl	r2, r2, #1
   18c6c:	e0c6e29c 	smull	lr, r6, ip, r2
   18c70:	e0833183 	add	r3, r3, r3, lsl #3
   18c74:	e1a03083 	lsl	r3, r3, #1
   18c78:	e0cce39c 	smull	lr, ip, ip, r3
   18c7c:	e1a02fc2 	asr	r2, r2, #31
   18c80:	e594e008 	ldr	lr, [r4, #8]
   18c84:	e0622146 	rsb	r2, r2, r6, asr #2
   18c88:	e082200e 	add	r2, r2, lr
   18c8c:	e1a03fc3 	asr	r3, r3, #31
   18c90:	e1500002 	cmp	r0, r2
   18c94:	e594000c 	ldr	r0, [r4, #12]
   18c98:	e063314c 	rsb	r3, r3, ip, asr #2
   18c9c:	e0803003 	add	r3, r0, r3
   18ca0:	9a000031 	bls	18d6c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x130>
   18ca4:	e1510003 	cmp	r1, r3
   18ca8:	e1c420f8 	strd	r2, [r4, #8]
   18cac:	8a000035 	bhi	18d88 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x14c>
   18cb0:	e152000e 	cmp	r2, lr
   18cb4:	e584000c 	str	r0, [r4, #12]
   18cb8:	0a000008 	beq	18ce0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa4>
   18cbc:	e3a03001 	mov	r3, #1
   18cc0:	e5946018 	ldr	r6, [r4, #24]
   18cc4:	e5c43010 	strb	r3, [r4, #16]
   18cc8:	e3560000 	cmp	r6, #0
   18ccc:	0a000024 	beq	18d64 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   18cd0:	e1a01005 	mov	r1, r5
   18cd4:	e3a00000 	mov	r0, #0
   18cd8:	e594300c 	ldr	r3, [r4, #12]
   18cdc:	e12fff36 	blx	r6
   18ce0:	e5943014 	ldr	r3, [r4, #20]
   18ce4:	e1530005 	cmp	r3, r5
   18ce8:	0a00001d 	beq	18d64 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   18cec:	e5942018 	ldr	r2, [r4, #24]
   18cf0:	e3520000 	cmp	r2, #0
   18cf4:	0a00001a 	beq	18d64 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   18cf8:	e3a06000 	mov	r6, #0
   18cfc:	e3a07001 	mov	r7, #1
   18d00:	e1a01617 	lsl	r1, r7, r6
   18d04:	e1110003 	tst	r1, r3
   18d08:	0a00000c 	beq	18d40 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x104>
   18d0c:	e1150001 	tst	r5, r1
   18d10:	1a000003 	bne	18d24 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe8>
   18d14:	e1c420d8 	ldrd	r2, [r4, #8]
   18d18:	e3a00002 	mov	r0, #2
   18d1c:	e5948018 	ldr	r8, [r4, #24]
   18d20:	e12fff38 	blx	r8
   18d24:	e2866001 	add	r6, r6, #1
   18d28:	e3560003 	cmp	r6, #3
   18d2c:	0a00000c 	beq	18d64 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   18d30:	e5943014 	ldr	r3, [r4, #20]
   18d34:	e1a01617 	lsl	r1, r7, r6
   18d38:	e1110003 	tst	r1, r3
   18d3c:	1afffff2 	bne	18d0c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xd0>
   18d40:	e1150001 	tst	r5, r1
   18d44:	0afffff6 	beq	18d24 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe8>
   18d48:	e1c420d8 	ldrd	r2, [r4, #8]
   18d4c:	e3a00001 	mov	r0, #1
   18d50:	e5948018 	ldr	r8, [r4, #24]
   18d54:	e2866001 	add	r6, r6, #1
   18d58:	e12fff38 	blx	r8
   18d5c:	e3560003 	cmp	r6, #3
   18d60:	1afffff2 	bne	18d30 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xf4>
   18d64:	e5845014 	str	r5, [r4, #20]
   18d68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18d6c:	e1510003 	cmp	r1, r3
   18d70:	e584300c 	str	r3, [r4, #12]
   18d74:	9a000006 	bls	18d94 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x158>
   18d78:	e1500003 	cmp	r0, r3
   18d7c:	11a0200e 	movne	r2, lr
   18d80:	1affffcd 	bne	18cbc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x80>
   18d84:	eaffffd5 	b	18ce0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa4>
   18d88:	e152000e 	cmp	r2, lr
   18d8c:	1affffca 	bne	18cbc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x80>
   18d90:	eafffff8 	b	18d78 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x13c>
   18d94:	e584000c 	str	r0, [r4, #12]
   18d98:	eaffffd0 	b	18ce0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa4>
   18d9c:	66666667 	.word	0x66666667

00018da0 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   18da0:	e92d4070 	push	{r4, r5, r6, lr}
   18da4:	e24dd030 	sub	sp, sp, #48	; 0x30
   18da8:	e1a05000 	mov	r5, r0
   18dac:	e1a04001 	mov	r4, r1
   18db0:	e28d000c 	add	r0, sp, #12
   18db4:	e3a01000 	mov	r1, #0
   18db8:	e1a06002 	mov	r6, r2
   18dbc:	eb002e7d 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   18dc0:	e3a03010 	mov	r3, #16
   18dc4:	e3a0c001 	mov	ip, #1
   18dc8:	e59f1044 	ldr	r1, [pc, #68]	; 18e14 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)+0x74>
   18dcc:	e58d3000 	str	r3, [sp]
   18dd0:	e28d2014 	add	r2, sp, #20
   18dd4:	e3a0301c 	mov	r3, #28
   18dd8:	e28d000c 	add	r0, sp, #12
   18ddc:	e58d4028 	str	r4, [sp, #40]	; 0x28
   18de0:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   18de4:	e58d6020 	str	r6, [sp, #32]
   18de8:	e58d5024 	str	r5, [sp, #36]	; 0x24
   18dec:	eb002e7d 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   18df0:	e2504000 	subs	r4, r0, #0
   18df4:	159d4020 	ldrne	r4, [sp, #32]
   18df8:	e28d000c 	add	r0, sp, #12
   18dfc:	116f4f14 	clzne	r4, r4
   18e00:	11a042a4 	lsrne	r4, r4, #5
   18e04:	eb002e72 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   18e08:	e1a00004 	mov	r0, r4
   18e0c:	e28dd030 	add	sp, sp, #48	; 0x30
   18e10:	e8bd8070 	pop	{r4, r5, r6, pc}
   18e14:	00008011 	.word	0x00008011

00018e18 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   18e18:	e590c000 	ldr	ip, [r0]
   18e1c:	e92d4010 	push	{r4, lr}
   18e20:	e35c0000 	cmp	ip, #0
   18e24:	0a000014 	beq	18e7c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x64>
   18e28:	e1a03001 	mov	r3, r1
   18e2c:	e5901004 	ldr	r1, [r0, #4]
   18e30:	e3510000 	cmp	r1, #0
   18e34:	0a000014 	beq	18e8c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x74>
   18e38:	e15c0003 	cmp	ip, r3
   18e3c:	81510002 	cmphi	r1, r2
   18e40:	8a000001 	bhi	18e4c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x34>
   18e44:	e3a00000 	mov	r0, #0
   18e48:	e8bd8010 	pop	{r4, pc}
   18e4c:	e5d01011 	ldrb	r1, [r0, #17]
   18e50:	e5803008 	str	r3, [r0, #8]
   18e54:	e3510000 	cmp	r1, #0
   18e58:	e580200c 	str	r2, [r0, #12]
   18e5c:	1a000001 	bne	18e68 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x50>
   18e60:	e3a00001 	mov	r0, #1
   18e64:	e8bd8010 	pop	{r4, pc}
   18e68:	e1a01002 	mov	r1, r2
   18e6c:	e8bd4010 	pop	{r4, lr}
   18e70:	e1a00003 	mov	r0, r3
   18e74:	e3a02001 	mov	r2, #1
   18e78:	eaffffc8 	b	18da0 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   18e7c:	e3a02075 	mov	r2, #117	; 0x75
   18e80:	e59f1014 	ldr	r1, [pc, #20]	; 18e9c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x84>
   18e84:	e59f0014 	ldr	r0, [pc, #20]	; 18ea0 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x88>
   18e88:	eb002e29 	bl	24734 <assertion_failed>
   18e8c:	e3a02076 	mov	r2, #118	; 0x76
   18e90:	e59f1004 	ldr	r1, [pc, #4]	; 18e9c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x84>
   18e94:	e59f0008 	ldr	r0, [pc, #8]	; 18ea4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x8c>
   18e98:	eb002e25 	bl	24734 <assertion_failed>
   18e9c:	00041798 	.word	0x00041798
   18ea0:	000417c0 	.word	0x000417c0
   18ea4:	000417ec 	.word	0x000417ec

00018ea8 <CMouseBehaviour::ShowCursor(bool)>:
   18ea8:	e1a02001 	mov	r2, r1
   18eac:	e5903008 	ldr	r3, [r0, #8]
   18eb0:	e5901000 	ldr	r1, [r0]
   18eb4:	e92d4010 	push	{r4, lr}
   18eb8:	e1530001 	cmp	r3, r1
   18ebc:	e5d04011 	ldrb	r4, [r0, #17]
   18ec0:	e5c02011 	strb	r2, [r0, #17]
   18ec4:	2a000007 	bcs	18ee8 <CMouseBehaviour::ShowCursor(bool)+0x40>
   18ec8:	e590100c 	ldr	r1, [r0, #12]
   18ecc:	e5900004 	ldr	r0, [r0, #4]
   18ed0:	e1510000 	cmp	r1, r0
   18ed4:	2a000007 	bcs	18ef8 <CMouseBehaviour::ShowCursor(bool)+0x50>
   18ed8:	e1a00003 	mov	r0, r3
   18edc:	ebffffaf 	bl	18da0 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   18ee0:	e1a00004 	mov	r0, r4
   18ee4:	e8bd8010 	pop	{r4, pc}
   18ee8:	e3a0208d 	mov	r2, #141	; 0x8d
   18eec:	e59f1014 	ldr	r1, [pc, #20]	; 18f08 <CMouseBehaviour::ShowCursor(bool)+0x60>
   18ef0:	e59f0014 	ldr	r0, [pc, #20]	; 18f0c <CMouseBehaviour::ShowCursor(bool)+0x64>
   18ef4:	eb002e0e 	bl	24734 <assertion_failed>
   18ef8:	e3a0208e 	mov	r2, #142	; 0x8e
   18efc:	e59f1004 	ldr	r1, [pc, #4]	; 18f08 <CMouseBehaviour::ShowCursor(bool)+0x60>
   18f00:	e59f0008 	ldr	r0, [pc, #8]	; 18f10 <CMouseBehaviour::ShowCursor(bool)+0x68>
   18f04:	eb002e0a 	bl	24734 <assertion_failed>
   18f08:	00041798 	.word	0x00041798
   18f0c:	00041818 	.word	0x00041818
   18f10:	00041834 	.word	0x00041834

00018f14 <CMouseBehaviour::UpdateCursor()>:
   18f14:	e5d03011 	ldrb	r3, [r0, #17]
   18f18:	e3530000 	cmp	r3, #0
   18f1c:	012fff1e 	bxeq	lr
   18f20:	e5d03010 	ldrb	r3, [r0, #16]
   18f24:	e3530000 	cmp	r3, #0
   18f28:	012fff1e 	bxeq	lr
   18f2c:	e3a03000 	mov	r3, #0
   18f30:	e3a02001 	mov	r2, #1
   18f34:	e5c03010 	strb	r3, [r0, #16]
   18f38:	e1c000d8 	ldrd	r0, [r0, #8]
   18f3c:	eaffff97 	b	18da0 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

00018f40 <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   18f40:	e92d4010 	push	{r4, lr}
   18f44:	e1a04000 	mov	r4, r0
   18f48:	e4801004 	str	r1, [r0], #4
   18f4c:	e1a01002 	mov	r1, r2
   18f50:	eb003ad5 	bl	27aac <CString::CString(char const*)>
   18f54:	e3a03000 	mov	r3, #0
   18f58:	e1a00004 	mov	r0, r4
   18f5c:	e5843014 	str	r3, [r4, #20]
   18f60:	e5843018 	str	r3, [r4, #24]
   18f64:	e584301c 	str	r3, [r4, #28]
   18f68:	e5843020 	str	r3, [r4, #32]
   18f6c:	e8bd8010 	pop	{r4, pc}

00018f70 <CPartitionManager::~CPartitionManager()>:
   18f70:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f74:	e1a06000 	mov	r6, r0
   18f78:	e3a07000 	mov	r7, #0
   18f7c:	e59fa0ac 	ldr	sl, [pc, #172]	; 19030 <CPartitionManager::~CPartitionManager()+0xc0>
   18f80:	e24dd010 	sub	sp, sp, #16
   18f84:	e2809004 	add	r9, r0, #4
   18f88:	e2804014 	add	r4, r0, #20
   18f8c:	e2808024 	add	r8, r0, #36	; 0x24
   18f90:	e4943004 	ldr	r3, [r4], #4
   18f94:	e3530000 	cmp	r3, #0
   18f98:	0a00001b 	beq	1900c <CPartitionManager::~CPartitionManager()+0x9c>
   18f9c:	e1a0000d 	mov	r0, sp
   18fa0:	eb003abb 	bl	27a94 <CString::CString()>
   18fa4:	e1a00009 	mov	r0, r9
   18fa8:	eb003ad1 	bl	27af4 <CString::operator char const*() const>
   18fac:	e2877001 	add	r7, r7, #1
   18fb0:	e1a02000 	mov	r2, r0
   18fb4:	e1a03007 	mov	r3, r7
   18fb8:	e1a0100a 	mov	r1, sl
   18fbc:	e1a0000d 	mov	r0, sp
   18fc0:	eb003ffd 	bl	28fbc <CString::Format(char const*, ...)>
   18fc4:	eb00309c 	bl	2523c <CDeviceNameService::Get()>
   18fc8:	e1a05000 	mov	r5, r0
   18fcc:	e1a0000d 	mov	r0, sp
   18fd0:	eb003ac7 	bl	27af4 <CString::operator char const*() const>
   18fd4:	e3a02001 	mov	r2, #1
   18fd8:	e1a01000 	mov	r1, r0
   18fdc:	e1a00005 	mov	r0, r5
   18fe0:	eb003012 	bl	25030 <CDeviceNameService::RemoveDevice(char const*, bool)>
   18fe4:	e5140004 	ldr	r0, [r4, #-4]
   18fe8:	e3500000 	cmp	r0, #0
   18fec:	0a000002 	beq	18ffc <CPartitionManager::~CPartitionManager()+0x8c>
   18ff0:	e5903000 	ldr	r3, [r0]
   18ff4:	e5933004 	ldr	r3, [r3, #4]
   18ff8:	e12fff33 	blx	r3
   18ffc:	e3a03000 	mov	r3, #0
   19000:	e1a0000d 	mov	r0, sp
   19004:	e5043004 	str	r3, [r4, #-4]
   19008:	eb003a6e 	bl	279c8 <CString::~CString()>
   1900c:	e1540008 	cmp	r4, r8
   19010:	1affffde 	bne	18f90 <CPartitionManager::~CPartitionManager()+0x20>
   19014:	e3a03000 	mov	r3, #0
   19018:	e1a00009 	mov	r0, r9
   1901c:	e5863000 	str	r3, [r6]
   19020:	eb003a68 	bl	279c8 <CString::~CString()>
   19024:	e1a00006 	mov	r0, r6
   19028:	e28dd010 	add	sp, sp, #16
   1902c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19030:	00041c50 	.word	0x00041c50

00019034 <CPartitionManager::Initialize()>:
   19034:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19038:	e1a05000 	mov	r5, r0
   1903c:	e5900000 	ldr	r0, [r0]
   19040:	e3a03000 	mov	r3, #0
   19044:	e5901000 	ldr	r1, [r0]
   19048:	e3a02000 	mov	r2, #0
   1904c:	e5911010 	ldr	r1, [r1, #16]
   19050:	e24ddf87 	sub	sp, sp, #540	; 0x21c
   19054:	e12fff31 	blx	r1
   19058:	e1903001 	orrs	r3, r0, r1
   1905c:	1a00002c 	bne	19114 <CPartitionManager::Initialize()+0xe0>
   19060:	e5950000 	ldr	r0, [r5]
   19064:	e3a02c02 	mov	r2, #512	; 0x200
   19068:	e5903000 	ldr	r3, [r0]
   1906c:	e28d1018 	add	r1, sp, #24
   19070:	e5933008 	ldr	r3, [r3, #8]
   19074:	e12fff33 	blx	r3
   19078:	e3500c02 	cmp	r0, #512	; 0x200
   1907c:	1a000024 	bne	19114 <CPartitionManager::Initialize()+0xe0>
   19080:	e28d3f85 	add	r3, sp, #532	; 0x214
   19084:	e2833002 	add	r3, r3, #2
   19088:	e1d320b0 	ldrh	r2, [r3]
   1908c:	e59f31a4 	ldr	r3, [pc, #420]	; 19238 <CPartitionManager::Initialize()+0x204>
   19090:	e1520003 	cmp	r2, r3
   19094:	1a00005b 	bne	19208 <CPartitionManager::Initialize()+0x1d4>
   19098:	e3a04000 	mov	r4, #0
   1909c:	e1a06004 	mov	r6, r4
   190a0:	e59f8194 	ldr	r8, [pc, #404]	; 1923c <CPartitionManager::Initialize()+0x208>
   190a4:	e2857014 	add	r7, r5, #20
   190a8:	e28d3018 	add	r3, sp, #24
   190ac:	e0833204 	add	r3, r3, r4, lsl #4
   190b0:	e5d321c2 	ldrb	r2, [r3, #450]	; 0x1c2
   190b4:	e2423005 	sub	r3, r2, #5
   190b8:	e16f3f13 	clz	r3, r3
   190bc:	e3520000 	cmp	r2, #0
   190c0:	e1a032a3 	lsr	r3, r3, #5
   190c4:	03a03001 	moveq	r3, #1
   190c8:	e352000f 	cmp	r2, #15
   190cc:	03833001 	orreq	r3, r3, #1
   190d0:	e35200ef 	cmp	r2, #239	; 0xef
   190d4:	03833001 	orreq	r3, r3, #1
   190d8:	e3530000 	cmp	r3, #0
   190dc:	0a000014 	beq	19134 <CPartitionManager::Initialize()+0x100>
   190e0:	e2844001 	add	r4, r4, #1
   190e4:	e3540004 	cmp	r4, #4
   190e8:	1affffee 	bne	190a8 <CPartitionManager::Initialize()+0x74>
   190ec:	e3560000 	cmp	r6, #0
   190f0:	13a00001 	movne	r0, #1
   190f4:	1a00000c 	bne	1912c <CPartitionManager::Initialize()+0xf8>
   190f8:	eb003675 	bl	26ad4 <CLogger::Get()>
   190fc:	e3a02002 	mov	r2, #2
   19100:	e59f3138 	ldr	r3, [pc, #312]	; 19240 <CPartitionManager::Initialize()+0x20c>
   19104:	e59f1138 	ldr	r1, [pc, #312]	; 19244 <CPartitionManager::Initialize()+0x210>
   19108:	eb0035b3 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1910c:	e3a00001 	mov	r0, #1
   19110:	ea000005 	b	1912c <CPartitionManager::Initialize()+0xf8>
   19114:	eb00366e 	bl	26ad4 <CLogger::Get()>
   19118:	e3a02001 	mov	r2, #1
   1911c:	e59f3124 	ldr	r3, [pc, #292]	; 19248 <CPartitionManager::Initialize()+0x214>
   19120:	e59f111c 	ldr	r1, [pc, #284]	; 19244 <CPartitionManager::Initialize()+0x210>
   19124:	eb0035ac 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19128:	e3a00000 	mov	r0, #0
   1912c:	e28ddf87 	add	sp, sp, #540	; 0x21c
   19130:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19134:	e28d3f86 	add	r3, sp, #536	; 0x218
   19138:	e284901c 	add	r9, r4, #28
   1913c:	e0839209 	add	r9, r3, r9, lsl #4
   19140:	e2491f7e 	sub	r1, r9, #504	; 0x1f8
   19144:	e15130b2 	ldrh	r3, [r1, #-2]
   19148:	e1d120b0 	ldrh	r2, [r1]
   1914c:	e1933802 	orrs	r3, r3, r2, lsl #16
   19150:	0affffe2 	beq	190e0 <CPartitionManager::Initialize()+0xac>
   19154:	e2499f7d 	sub	r9, r9, #500	; 0x1f4
   19158:	e15930b2 	ldrh	r3, [r9, #-2]
   1915c:	e1d920b0 	ldrh	r2, [r9]
   19160:	e1933802 	orrs	r3, r3, r2, lsl #16
   19164:	0affffdd 	beq	190e0 <CPartitionManager::Initialize()+0xac>
   19168:	e7973104 	ldr	r3, [r7, r4, lsl #2]
   1916c:	e3530000 	cmp	r3, #0
   19170:	1a00002c 	bne	19228 <CPartitionManager::Initialize()+0x1f4>
   19174:	e3a00020 	mov	r0, #32
   19178:	e58d1004 	str	r1, [sp, #4]
   1917c:	eb004773 	bl	2af50 <operator new(unsigned int)>
   19180:	e1a0a005 	mov	sl, r5
   19184:	e1a0b000 	mov	fp, r0
   19188:	e59d1004 	ldr	r1, [sp, #4]
   1918c:	e1d9e0b0 	ldrh	lr, [r9]
   19190:	e1d1c0b0 	ldrh	ip, [r1]
   19194:	e15930b2 	ldrh	r3, [r9, #-2]
   19198:	e15120b2 	ldrh	r2, [r1, #-2]
   1919c:	e183380e 	orr	r3, r3, lr, lsl #16
   191a0:	e182280c 	orr	r2, r2, ip, lsl #16
   191a4:	e49a1004 	ldr	r1, [sl], #4
   191a8:	eb0000bf 	bl	194ac <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   191ac:	e787b104 	str	fp, [r7, r4, lsl #2]
   191b0:	e28d0008 	add	r0, sp, #8
   191b4:	eb003a36 	bl	27a94 <CString::CString()>
   191b8:	e1a0000a 	mov	r0, sl
   191bc:	eb003a4c 	bl	27af4 <CString::operator char const*() const>
   191c0:	e2866001 	add	r6, r6, #1
   191c4:	e1a02000 	mov	r2, r0
   191c8:	e1a03006 	mov	r3, r6
   191cc:	e1a01008 	mov	r1, r8
   191d0:	e28d0008 	add	r0, sp, #8
   191d4:	eb003f78 	bl	28fbc <CString::Format(char const*, ...)>
   191d8:	eb003017 	bl	2523c <CDeviceNameService::Get()>
   191dc:	e1a09000 	mov	r9, r0
   191e0:	e28d0008 	add	r0, sp, #8
   191e4:	eb003a42 	bl	27af4 <CString::operator char const*() const>
   191e8:	e3a03001 	mov	r3, #1
   191ec:	e1a01000 	mov	r1, r0
   191f0:	e7972104 	ldr	r2, [r7, r4, lsl #2]
   191f4:	e1a00009 	mov	r0, r9
   191f8:	eb002f5f 	bl	24f7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   191fc:	e28d0008 	add	r0, sp, #8
   19200:	eb0039f0 	bl	279c8 <CString::~CString()>
   19204:	eaffffb5 	b	190e0 <CPartitionManager::Initialize()+0xac>
   19208:	eb003631 	bl	26ad4 <CLogger::Get()>
   1920c:	e3a02002 	mov	r2, #2
   19210:	e59f3034 	ldr	r3, [pc, #52]	; 1924c <CPartitionManager::Initialize()+0x218>
   19214:	e59f1028 	ldr	r1, [pc, #40]	; 19244 <CPartitionManager::Initialize()+0x210>
   19218:	eb00356f 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1921c:	e3a00001 	mov	r0, #1
   19220:	e28ddf87 	add	sp, sp, #540	; 0x21c
   19224:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19228:	e3a02078 	mov	r2, #120	; 0x78
   1922c:	e59f101c 	ldr	r1, [pc, #28]	; 19250 <CPartitionManager::Initialize()+0x21c>
   19230:	e59f001c 	ldr	r0, [pc, #28]	; 19254 <CPartitionManager::Initialize()+0x220>
   19234:	eb002d3e 	bl	24734 <assertion_failed>
   19238:	0000aa55 	.word	0x0000aa55
   1923c:	00041c50 	.word	0x00041c50
   19240:	00041cac 	.word	0x00041cac
   19244:	00041cd0 	.word	0x00041cd0
   19248:	00041c58 	.word	0x00041c58
   1924c:	00041c68 	.word	0x00041c68
   19250:	00041c7c 	.word	0x00041c7c
   19254:	00041c94 	.word	0x00041c94

00019258 <CPartition::~CPartition()>:
   19258:	e3a02000 	mov	r2, #0
   1925c:	e92d4010 	push	{r4, lr}
   19260:	e1a04000 	mov	r4, r0
   19264:	e59f3010 	ldr	r3, [pc, #16]	; 1927c <CPartition::~CPartition()+0x24>
   19268:	e5802004 	str	r2, [r0, #4]
   1926c:	e5803000 	str	r3, [r0]
   19270:	eb002f08 	bl	24e98 <CDevice::~CDevice()>
   19274:	e1a00004 	mov	r0, r4
   19278:	e8bd8010 	pop	{r4, pc}
   1927c:	00041cf0 	.word	0x00041cf0

00019280 <CPartition::~CPartition()>:
   19280:	e3a02000 	mov	r2, #0
   19284:	e92d4010 	push	{r4, lr}
   19288:	e1a04000 	mov	r4, r0
   1928c:	e59f301c 	ldr	r3, [pc, #28]	; 192b0 <CPartition::~CPartition()+0x30>
   19290:	e5802004 	str	r2, [r0, #4]
   19294:	e5803000 	str	r3, [r0]
   19298:	eb002efe 	bl	24e98 <CDevice::~CDevice()>
   1929c:	e1a00004 	mov	r0, r4
   192a0:	e3a01020 	mov	r1, #32
   192a4:	eb004737 	bl	2af88 <operator delete(void*, unsigned int)>
   192a8:	e1a00004 	mov	r0, r4
   192ac:	e8bd8010 	pop	{r4, pc}
   192b0:	00041cf0 	.word	0x00041cf0

000192b4 <CPartition::Read(void*, unsigned int)>:
   192b4:	e5d0c018 	ldrb	ip, [r0, #24]
   192b8:	e35c0000 	cmp	ip, #0
   192bc:	1a00001d 	bne	19338 <CPartition::Read(void*, unsigned int)+0x84>
   192c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   192c4:	e3a05000 	mov	r5, #0
   192c8:	e3a09000 	mov	r9, #0
   192cc:	e59f406c 	ldr	r4, [pc, #108]	; 19340 <CPartition::Read(void*, unsigned int)+0x8c>
   192d0:	e590c010 	ldr	ip, [r0, #16]
   192d4:	e0944002 	adds	r4, r4, r2
   192d8:	e5903014 	ldr	r3, [r0, #20]
   192dc:	e2a55000 	adc	r5, r5, #0
   192e0:	e094c00c 	adds	ip, r4, ip
   192e4:	e0a53003 	adc	r3, r5, r3
   192e8:	e590800c 	ldr	r8, [r0, #12]
   192ec:	e1a064ac 	lsr	r6, ip, #9
   192f0:	e1a074a3 	lsr	r7, r3, #9
   192f4:	e1866b83 	orr	r6, r6, r3, lsl #23
   192f8:	e1590007 	cmp	r9, r7
   192fc:	01580006 	cmpeq	r8, r6
   19300:	3a00000a 	bcc	19330 <CPartition::Read(void*, unsigned int)+0x7c>
   19304:	e5900004 	ldr	r0, [r0, #4]
   19308:	e3500000 	cmp	r0, #0
   1930c:	0a000003 	beq	19320 <CPartition::Read(void*, unsigned int)+0x6c>
   19310:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19314:	e5903000 	ldr	r3, [r0]
   19318:	e5933008 	ldr	r3, [r3, #8]
   1931c:	e12fff13 	bx	r3
   19320:	e3a02035 	mov	r2, #53	; 0x35
   19324:	e59f1018 	ldr	r1, [pc, #24]	; 19344 <CPartition::Read(void*, unsigned int)+0x90>
   19328:	e59f0018 	ldr	r0, [pc, #24]	; 19348 <CPartition::Read(void*, unsigned int)+0x94>
   1932c:	eb002d00 	bl	24734 <assertion_failed>
   19330:	e3e00000 	mvn	r0, #0
   19334:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19338:	e3e00000 	mvn	r0, #0
   1933c:	e12fff1e 	bx	lr
   19340:	000001ff 	.word	0x000001ff
   19344:	00041cd8 	.word	0x00041cd8
   19348:	0003df08 	.word	0x0003df08

0001934c <CPartition::Write(void const*, unsigned int)>:
   1934c:	e5d0c018 	ldrb	ip, [r0, #24]
   19350:	e35c0000 	cmp	ip, #0
   19354:	1a00001d 	bne	193d0 <CPartition::Write(void const*, unsigned int)+0x84>
   19358:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1935c:	e3a05000 	mov	r5, #0
   19360:	e3a09000 	mov	r9, #0
   19364:	e59f406c 	ldr	r4, [pc, #108]	; 193d8 <CPartition::Write(void const*, unsigned int)+0x8c>
   19368:	e590c010 	ldr	ip, [r0, #16]
   1936c:	e0944002 	adds	r4, r4, r2
   19370:	e5903014 	ldr	r3, [r0, #20]
   19374:	e2a55000 	adc	r5, r5, #0
   19378:	e094c00c 	adds	ip, r4, ip
   1937c:	e0a53003 	adc	r3, r5, r3
   19380:	e590800c 	ldr	r8, [r0, #12]
   19384:	e1a064ac 	lsr	r6, ip, #9
   19388:	e1a074a3 	lsr	r7, r3, #9
   1938c:	e1866b83 	orr	r6, r6, r3, lsl #23
   19390:	e1590007 	cmp	r9, r7
   19394:	01580006 	cmpeq	r8, r6
   19398:	3a00000a 	bcc	193c8 <CPartition::Write(void const*, unsigned int)+0x7c>
   1939c:	e5900004 	ldr	r0, [r0, #4]
   193a0:	e3500000 	cmp	r0, #0
   193a4:	0a000003 	beq	193b8 <CPartition::Write(void const*, unsigned int)+0x6c>
   193a8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   193ac:	e5903000 	ldr	r3, [r0]
   193b0:	e593300c 	ldr	r3, [r3, #12]
   193b4:	e12fff13 	bx	r3
   193b8:	e3a02047 	mov	r2, #71	; 0x47
   193bc:	e59f1018 	ldr	r1, [pc, #24]	; 193dc <CPartition::Write(void const*, unsigned int)+0x90>
   193c0:	e59f0018 	ldr	r0, [pc, #24]	; 193e0 <CPartition::Write(void const*, unsigned int)+0x94>
   193c4:	eb002cda 	bl	24734 <assertion_failed>
   193c8:	e3e00000 	mvn	r0, #0
   193cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   193d0:	e3e00000 	mvn	r0, #0
   193d4:	e12fff1e 	bx	lr
   193d8:	000001ff 	.word	0x000001ff
   193dc:	00041cd8 	.word	0x00041cd8
   193e0:	0003df08 	.word	0x0003df08

000193e4 <CPartition::Seek(unsigned long long)>:
   193e4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193e8:	e3a0b000 	mov	fp, #0
   193ec:	e1a0500b 	mov	r5, fp
   193f0:	e1a04b82 	lsl	r4, r2, #23
   193f4:	e1a06002 	mov	r6, r2
   193f8:	e3a02001 	mov	r2, #1
   193fc:	e1a04ba4 	lsr	r4, r4, #23
   19400:	e1941005 	orrs	r1, r4, r5
   19404:	e5c02018 	strb	r2, [r0, #24]
   19408:	1a00001e 	bne	19488 <CPartition::Seek(unsigned long long)+0xa4>
   1940c:	e1a0a003 	mov	sl, r3
   19410:	e3a03000 	mov	r3, #0
   19414:	e590200c 	ldr	r2, [r0, #12]
   19418:	e1a044a6 	lsr	r4, r6, #9
   1941c:	e1a054aa 	lsr	r5, sl, #9
   19420:	e1844b8a 	orr	r4, r4, sl, lsl #23
   19424:	e1550003 	cmp	r5, r3
   19428:	01540002 	cmpeq	r4, r2
   1942c:	e1a07000 	mov	r7, r0
   19430:	2a000014 	bcs	19488 <CPartition::Seek(unsigned long long)+0xa4>
   19434:	e9900009 	ldmib	r0, {r0, r3}
   19438:	e1a02483 	lsl	r2, r3, #9
   1943c:	e0968002 	adds	r8, r6, r2
   19440:	e1a03ba3 	lsr	r3, r3, #23
   19444:	e0aa9003 	adc	r9, sl, r3
   19448:	e3500000 	cmp	r0, #0
   1944c:	0a000010 	beq	19494 <CPartition::Seek(unsigned long long)+0xb0>
   19450:	e5903000 	ldr	r3, [r0]
   19454:	e1a02008 	mov	r2, r8
   19458:	e5931010 	ldr	r1, [r3, #16]
   1945c:	e1a03009 	mov	r3, r9
   19460:	e12fff31 	blx	r1
   19464:	e1510009 	cmp	r1, r9
   19468:	01500008 	cmpeq	r0, r8
   1946c:	1a000005 	bne	19488 <CPartition::Seek(unsigned long long)+0xa4>
   19470:	e1a00006 	mov	r0, r6
   19474:	e1a0100a 	mov	r1, sl
   19478:	e5876010 	str	r6, [r7, #16]
   1947c:	e587a014 	str	sl, [r7, #20]
   19480:	e5c7b018 	strb	fp, [r7, #24]
   19484:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19488:	e3e00000 	mvn	r0, #0
   1948c:	e1a01000 	mov	r1, r0
   19490:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19494:	e3a02059 	mov	r2, #89	; 0x59
   19498:	e59f1004 	ldr	r1, [pc, #4]	; 194a4 <CPartition::Seek(unsigned long long)+0xc0>
   1949c:	e59f0004 	ldr	r0, [pc, #4]	; 194a8 <CPartition::Seek(unsigned long long)+0xc4>
   194a0:	eb002ca3 	bl	24734 <assertion_failed>
   194a4:	00041cd8 	.word	0x00041cd8
   194a8:	0003df08 	.word	0x0003df08

000194ac <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   194ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   194b0:	e1a05001 	mov	r5, r1
   194b4:	e1a04000 	mov	r4, r0
   194b8:	e1a07002 	mov	r7, r2
   194bc:	e1a06003 	mov	r6, r3
   194c0:	eb002e82 	bl	24ed0 <CDevice::CDevice()>
   194c4:	e3a03001 	mov	r3, #1
   194c8:	e3a00000 	mov	r0, #0
   194cc:	e3a01000 	mov	r1, #0
   194d0:	e59f2030 	ldr	r2, [pc, #48]	; 19508 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x5c>
   194d4:	e3550000 	cmp	r5, #0
   194d8:	e98400a0 	stmib	r4, {r5, r7}
   194dc:	e1c401f0 	strd	r0, [r4, #16]
   194e0:	e584600c 	str	r6, [r4, #12]
   194e4:	e5842000 	str	r2, [r4]
   194e8:	e5c43018 	strb	r3, [r4, #24]
   194ec:	0a000001 	beq	194f8 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   194f0:	e1a00004 	mov	r0, r4
   194f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   194f8:	e3a0201f 	mov	r2, #31
   194fc:	e59f1008 	ldr	r1, [pc, #8]	; 1950c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x60>
   19500:	e59f0008 	ldr	r0, [pc, #8]	; 19510 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x64>
   19504:	eb002c8a 	bl	24734 <assertion_failed>
   19508:	00041cf0 	.word	0x00041cf0
   1950c:	00041cd8 	.word	0x00041cd8
   19510:	0003df08 	.word	0x0003df08

00019514 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>:
   19514:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19518:	e1a04000 	mov	r4, r0
   1951c:	e1a06001 	mov	r6, r1
   19520:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   19524:	e59fc110 	ldr	ip, [pc, #272]	; 1963c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x128>
   19528:	e3510000 	cmp	r1, #0
   1952c:	01a0100c 	moveq	r1, ip
   19530:	e2805010 	add	r5, r0, #16
   19534:	e5dda028 	ldrb	sl, [sp, #40]	; 0x28
   19538:	e1a07003 	mov	r7, r3
   1953c:	e280903c 	add	r9, r0, #60	; 0x3c
   19540:	e1a08002 	mov	r8, r2
   19544:	eb003958 	bl	27aac <CString::CString(char const*)>
   19548:	e1a00005 	mov	r0, r5
   1954c:	eb001da9 	bl	20bf8 <CNetConfig::CNetConfig()>
   19550:	e1a0200a 	mov	r2, sl
   19554:	e1a01005 	mov	r1, r5
   19558:	e1a00009 	mov	r0, r9
   1955c:	e284a060 	add	sl, r4, #96	; 0x60
   19560:	eb000921 	bl	1b9ec <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>
   19564:	e1a02009 	mov	r2, r9
   19568:	e1a01005 	mov	r1, r5
   1956c:	e2849098 	add	r9, r4, #152	; 0x98
   19570:	e1a0000a 	mov	r0, sl
   19574:	eb000748 	bl	1b29c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>
   19578:	e1a0200a 	mov	r2, sl
   1957c:	e1a01005 	mov	r1, r5
   19580:	e1a00009 	mov	r0, r9
   19584:	eb000507 	bl	1a9a8 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>
   19588:	e1a02009 	mov	r2, r9
   1958c:	e1a01005 	mov	r1, r5
   19590:	e28400d8 	add	r0, r4, #216	; 0xd8
   19594:	eb0000f2 	bl	19964 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>
   19598:	e3a01000 	mov	r1, #0
   1959c:	e16f0f16 	clz	r0, r6
   195a0:	e59f3098 	ldr	r3, [pc, #152]	; 19640 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x12c>
   195a4:	e1a002a0 	lsr	r0, r0, #5
   195a8:	e5932000 	ldr	r2, [r3]
   195ac:	e5841128 	str	r1, [r4, #296]	; 0x128
   195b0:	e1520001 	cmp	r2, r1
   195b4:	e5c40124 	strb	r0, [r4, #292]	; 0x124
   195b8:	1a00001b 	bne	1962c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x118>
   195bc:	e1a01000 	mov	r1, r0
   195c0:	e1a00005 	mov	r0, r5
   195c4:	e5834000 	str	r4, [r3]
   195c8:	eb001d52 	bl	20b18 <CNetConfig::SetDHCP(bool)>
   195cc:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   195d0:	e3530000 	cmp	r3, #0
   195d4:	0a000001 	beq	195e0 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xcc>
   195d8:	e1a00004 	mov	r0, r4
   195dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   195e0:	e1a01006 	mov	r1, r6
   195e4:	e1a00005 	mov	r0, r5
   195e8:	eb001da1 	bl	20c74 <CNetConfig::SetIPAddress(unsigned char const*)>
   195ec:	e1a01008 	mov	r1, r8
   195f0:	e1a00005 	mov	r0, r5
   195f4:	eb001da5 	bl	20c90 <CNetConfig::SetNetMask(unsigned char const*)>
   195f8:	e3570000 	cmp	r7, #0
   195fc:	0a000002 	beq	1960c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xf8>
   19600:	e1a01007 	mov	r1, r7
   19604:	e1a00005 	mov	r0, r5
   19608:	eb001d48 	bl	20b30 <CNetConfig::SetDefaultGateway(unsigned char const*)>
   1960c:	e59d3020 	ldr	r3, [sp, #32]
   19610:	e3530000 	cmp	r3, #0
   19614:	0affffef 	beq	195d8 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xc4>
   19618:	e1a00005 	mov	r0, r5
   1961c:	e1a01003 	mov	r1, r3
   19620:	eb001d44 	bl	20b38 <CNetConfig::SetDNSServer(unsigned char const*)>
   19624:	e1a00004 	mov	r0, r4
   19628:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1962c:	e3a02026 	mov	r2, #38	; 0x26
   19630:	e59f100c 	ldr	r1, [pc, #12]	; 19644 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x130>
   19634:	e59f000c 	ldr	r0, [pc, #12]	; 19648 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x134>
   19638:	eb002c3d 	bl	24734 <assertion_failed>
   1963c:	00045ac0 	.word	0x00045ac0
   19640:	0004c528 	.word	0x0004c528
   19644:	00041d08 	.word	0x00041d08
   19648:	00041d1c 	.word	0x00041d1c

0001964c <CNetSubSystem::Process()>:
   1964c:	e59f3034 	ldr	r3, [pc, #52]	; 19688 <CNetSubSystem::Process()+0x3c>
   19650:	e5933000 	ldr	r3, [r3]
   19654:	e3530000 	cmp	r3, #0
   19658:	012fff1e 	bxeq	lr
   1965c:	e92d4010 	push	{r4, lr}
   19660:	e1a04000 	mov	r4, r0
   19664:	e280003c 	add	r0, r0, #60	; 0x3c
   19668:	eb000951 	bl	1bbb4 <CNetDeviceLayer::Process()>
   1966c:	e2840060 	add	r0, r4, #96	; 0x60
   19670:	eb00076a 	bl	1b420 <CLinkLayer::Process()>
   19674:	e2840098 	add	r0, r4, #152	; 0x98
   19678:	eb00051a 	bl	1aae8 <CNetworkLayer::Process()>
   1967c:	e28400d8 	add	r0, r4, #216	; 0xd8
   19680:	e8bd4010 	pop	{r4, lr}
   19684:	ea0003da 	b	1a5f4 <CTransportLayer::Process()>
   19688:	0004c528 	.word	0x0004c528

0001968c <CNetSubSystem::GetConfig()>:
   1968c:	e2800010 	add	r0, r0, #16
   19690:	e12fff1e 	bx	lr

00019694 <CNetSubSystem::GetNetDeviceLayer()>:
   19694:	e280003c 	add	r0, r0, #60	; 0x3c
   19698:	e12fff1e 	bx	lr

0001969c <CNetSubSystem::GetLinkLayer()>:
   1969c:	e2800060 	add	r0, r0, #96	; 0x60
   196a0:	e12fff1e 	bx	lr

000196a4 <CNetSubSystem::GetTransportLayer()>:
   196a4:	e28000d8 	add	r0, r0, #216	; 0xd8
   196a8:	e12fff1e 	bx	lr

000196ac <CNetSubSystem::IsRunning() const>:
   196ac:	e5d03124 	ldrb	r3, [r0, #292]	; 0x124
   196b0:	e3530000 	cmp	r3, #0
   196b4:	0a000003 	beq	196c8 <CNetSubSystem::IsRunning() const+0x1c>
   196b8:	e5900128 	ldr	r0, [r0, #296]	; 0x128
   196bc:	e3500000 	cmp	r0, #0
   196c0:	0a000002 	beq	196d0 <CNetSubSystem::IsRunning() const+0x24>
   196c4:	ea00206e 	b	21884 <CDHCPClient::IsBound() const>
   196c8:	e3a00001 	mov	r0, #1
   196cc:	e12fff1e 	bx	lr
   196d0:	e3a0209d 	mov	r2, #157	; 0x9d
   196d4:	e92d4010 	push	{r4, lr}
   196d8:	e59f1004 	ldr	r1, [pc, #4]	; 196e4 <CNetSubSystem::IsRunning() const+0x38>
   196dc:	e59f0004 	ldr	r0, [pc, #4]	; 196e8 <CNetSubSystem::IsRunning() const+0x3c>
   196e0:	eb002c13 	bl	24734 <assertion_failed>
   196e4:	00041d08 	.word	0x00041d08
   196e8:	00041d2c 	.word	0x00041d2c

000196ec <CNetSubSystem::Initialize(bool)>:
   196ec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   196f0:	e2806010 	add	r6, r0, #16
   196f4:	e24dd00c 	sub	sp, sp, #12
   196f8:	e1a04000 	mov	r4, r0
   196fc:	e1a00006 	mov	r0, r6
   19700:	e1a05001 	mov	r5, r1
   19704:	eb001d0d 	bl	20b40 <CNetConfig::GetIPAddress() const>
   19708:	eb001e46 	bl	21028 <CIPAddress::IsNull() const>
   1970c:	e1a01000 	mov	r1, r0
   19710:	e1a00006 	mov	r0, r6
   19714:	e5c41124 	strb	r1, [r4, #292]	; 0x124
   19718:	eb001cfe 	bl	20b18 <CNetConfig::SetDHCP(bool)>
   1971c:	e1a01005 	mov	r1, r5
   19720:	e284003c 	add	r0, r4, #60	; 0x3c
   19724:	eb0008c7 	bl	1ba48 <CNetDeviceLayer::Initialize(bool)>
   19728:	e3500000 	cmp	r0, #0
   1972c:	1a000003 	bne	19740 <CNetSubSystem::Initialize(bool)+0x54>
   19730:	e3a06000 	mov	r6, #0
   19734:	e1a00006 	mov	r0, r6
   19738:	e28dd00c 	add	sp, sp, #12
   1973c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   19740:	e2846060 	add	r6, r4, #96	; 0x60
   19744:	e1a00006 	mov	r0, r6
   19748:	eb000709 	bl	1b374 <CLinkLayer::Initialize()>
   1974c:	e3500000 	cmp	r0, #0
   19750:	0afffff6 	beq	19730 <CNetSubSystem::Initialize(bool)+0x44>
   19754:	e2847098 	add	r7, r4, #152	; 0x98
   19758:	e1a00007 	mov	r0, r7
   1975c:	eb0004c8 	bl	1aa84 <CNetworkLayer::Initialize()>
   19760:	e3500000 	cmp	r0, #0
   19764:	0afffff1 	beq	19730 <CNetSubSystem::Initialize(bool)+0x44>
   19768:	e1a00006 	mov	r0, r6
   1976c:	e1a01007 	mov	r1, r7
   19770:	eb000718 	bl	1b3d8 <CLinkLayer::AttachLayer(CNetworkLayer*)>
   19774:	e28400d8 	add	r0, r4, #216	; 0xd8
   19778:	eb00009f 	bl	199fc <CTransportLayer::Initialize()>
   1977c:	e2506000 	subs	r6, r0, #0
   19780:	0affffea 	beq	19730 <CNetSubSystem::Initialize(bool)+0x44>
   19784:	e3a000e0 	mov	r0, #224	; 0xe0
   19788:	eb0045f0 	bl	2af50 <operator new(unsigned int)>
   1978c:	e1a01004 	mov	r1, r4
   19790:	eb000068 	bl	19938 <CNetTask::CNetTask(CNetSubSystem*)>
   19794:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   19798:	e3530000 	cmp	r3, #0
   1979c:	0a00000d 	beq	197d8 <CNetSubSystem::Initialize(bool)+0xec>
   197a0:	e5943128 	ldr	r3, [r4, #296]	; 0x128
   197a4:	e3530000 	cmp	r3, #0
   197a8:	1a000014 	bne	19800 <CNetSubSystem::Initialize(bool)+0x114>
   197ac:	e1a00004 	mov	r0, r4
   197b0:	eb0038cf 	bl	27af4 <CString::operator char const*() const>
   197b4:	e1a02000 	mov	r2, r0
   197b8:	e3a00e1e 	mov	r0, #480	; 0x1e0
   197bc:	e58d2004 	str	r2, [sp, #4]
   197c0:	eb0045e2 	bl	2af50 <operator new(unsigned int)>
   197c4:	e1a07000 	mov	r7, r0
   197c8:	e1a01004 	mov	r1, r4
   197cc:	e59d2004 	ldr	r2, [sp, #4]
   197d0:	eb001ff5 	bl	217ac <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>
   197d4:	e5847128 	str	r7, [r4, #296]	; 0x128
   197d8:	e3550000 	cmp	r5, #0
   197dc:	1a000002 	bne	197ec <CNetSubSystem::Initialize(bool)+0x100>
   197e0:	eaffffd3 	b	19734 <CNetSubSystem::Initialize(bool)+0x48>
   197e4:	eb002b26 	bl	24484 <CScheduler::Get()>
   197e8:	eb002a9a 	bl	24258 <CScheduler::Yield()>
   197ec:	e1a00004 	mov	r0, r4
   197f0:	ebffffad 	bl	196ac <CNetSubSystem::IsRunning() const>
   197f4:	e3500000 	cmp	r0, #0
   197f8:	0afffff9 	beq	197e4 <CNetSubSystem::Initialize(bool)+0xf8>
   197fc:	eaffffcc 	b	19734 <CNetSubSystem::Initialize(bool)+0x48>
   19800:	e3a02060 	mov	r2, #96	; 0x60
   19804:	e59f1004 	ldr	r1, [pc, #4]	; 19810 <CNetSubSystem::Initialize(bool)+0x124>
   19808:	e59f0004 	ldr	r0, [pc, #4]	; 19814 <CNetSubSystem::Initialize(bool)+0x128>
   1980c:	eb002bc8 	bl	24734 <assertion_failed>
   19810:	00041d08 	.word	0x00041d08
   19814:	00041d40 	.word	0x00041d40

00019818 <CNetSubSystem::Get()>:
   19818:	e59f301c 	ldr	r3, [pc, #28]	; 1983c <CNetSubSystem::Get()+0x24>
   1981c:	e5930000 	ldr	r0, [r3]
   19820:	e3500000 	cmp	r0, #0
   19824:	112fff1e 	bxne	lr
   19828:	e3a020a3 	mov	r2, #163	; 0xa3
   1982c:	e92d4010 	push	{r4, lr}
   19830:	e59f1008 	ldr	r1, [pc, #8]	; 19840 <CNetSubSystem::Get()+0x28>
   19834:	e59f0008 	ldr	r0, [pc, #8]	; 19844 <CNetSubSystem::Get()+0x2c>
   19838:	eb002bbd 	bl	24734 <assertion_failed>
   1983c:	0004c528 	.word	0x0004c528
   19840:	00041d08 	.word	0x00041d08
   19844:	00041d54 	.word	0x00041d54

00019848 <CNetSubSystem::~CNetSubSystem()>:
   19848:	e92d4010 	push	{r4, lr}
   1984c:	e3a02000 	mov	r2, #0
   19850:	e1a04000 	mov	r4, r0
   19854:	e59f3038 	ldr	r3, [pc, #56]	; 19894 <CNetSubSystem::~CNetSubSystem()+0x4c>
   19858:	e28000d8 	add	r0, r0, #216	; 0xd8
   1985c:	e5832000 	str	r2, [r3]
   19860:	eb000359 	bl	1a5cc <CTransportLayer::~CTransportLayer()>
   19864:	e2840098 	add	r0, r4, #152	; 0x98
   19868:	eb00046d 	bl	1aa24 <CNetworkLayer::~CNetworkLayer()>
   1986c:	e2840060 	add	r0, r4, #96	; 0x60
   19870:	eb0006a8 	bl	1b318 <CLinkLayer::~CLinkLayer()>
   19874:	e284003c 	add	r0, r4, #60	; 0x3c
   19878:	eb000867 	bl	1ba1c <CNetDeviceLayer::~CNetDeviceLayer()>
   1987c:	e2840010 	add	r0, r4, #16
   19880:	eb001c96 	bl	20ae0 <CNetConfig::~CNetConfig()>
   19884:	e1a00004 	mov	r0, r4
   19888:	eb00384e 	bl	279c8 <CString::~CString()>
   1988c:	e1a00004 	mov	r0, r4
   19890:	e8bd8010 	pop	{r4, pc}
   19894:	0004c528 	.word	0x0004c528

00019898 <CNetTask::~CNetTask()>:
   19898:	e3a02000 	mov	r2, #0
   1989c:	e92d4010 	push	{r4, lr}
   198a0:	e1a04000 	mov	r4, r0
   198a4:	e59f3010 	ldr	r3, [pc, #16]	; 198bc <CNetTask::~CNetTask()+0x24>
   198a8:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   198ac:	e5803000 	str	r3, [r0]
   198b0:	eb00290e 	bl	23cf0 <CTask::~CTask()>
   198b4:	e1a00004 	mov	r0, r4
   198b8:	e8bd8010 	pop	{r4, pc}
   198bc:	00041d90 	.word	0x00041d90

000198c0 <CNetTask::~CNetTask()>:
   198c0:	e3a02000 	mov	r2, #0
   198c4:	e92d4010 	push	{r4, lr}
   198c8:	e1a04000 	mov	r4, r0
   198cc:	e59f301c 	ldr	r3, [pc, #28]	; 198f0 <CNetTask::~CNetTask()+0x30>
   198d0:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   198d4:	e5803000 	str	r3, [r0]
   198d8:	eb002904 	bl	23cf0 <CTask::~CTask()>
   198dc:	e1a00004 	mov	r0, r4
   198e0:	e3a010e0 	mov	r1, #224	; 0xe0
   198e4:	eb0045a7 	bl	2af88 <operator delete(void*, unsigned int)>
   198e8:	e1a00004 	mov	r0, r4
   198ec:	e8bd8010 	pop	{r4, pc}
   198f0:	00041d90 	.word	0x00041d90

000198f4 <CNetTask::Run()>:
   198f4:	e92d4010 	push	{r4, lr}
   198f8:	e1a04000 	mov	r4, r0
   198fc:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   19900:	e3500000 	cmp	r0, #0
   19904:	0a000005 	beq	19920 <CNetTask::Run()+0x2c>
   19908:	ebffff4f 	bl	1964c <CNetSubSystem::Process()>
   1990c:	eb002adc 	bl	24484 <CScheduler::Get()>
   19910:	eb002a50 	bl	24258 <CScheduler::Yield()>
   19914:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   19918:	e3500000 	cmp	r0, #0
   1991c:	1afffff9 	bne	19908 <CNetTask::Run()+0x14>
   19920:	e3a02026 	mov	r2, #38	; 0x26
   19924:	e59f1004 	ldr	r1, [pc, #4]	; 19930 <CNetTask::Run()+0x3c>
   19928:	e59f0004 	ldr	r0, [pc, #4]	; 19934 <CNetTask::Run()+0x40>
   1992c:	eb002b80 	bl	24734 <assertion_failed>
   19930:	00041d64 	.word	0x00041d64
   19934:	00041d70 	.word	0x00041d70

00019938 <CNetTask::CNetTask(CNetSubSystem*)>:
   19938:	e92d4070 	push	{r4, r5, r6, lr}
   1993c:	e1a04000 	mov	r4, r0
   19940:	e1a05001 	mov	r5, r1
   19944:	e3a01902 	mov	r1, #32768	; 0x8000
   19948:	eb002939 	bl	23e34 <CTask::CTask(unsigned int)>
   1994c:	e59f300c 	ldr	r3, [pc, #12]	; 19960 <CNetTask::CNetTask(CNetSubSystem*)+0x28>
   19950:	e1a00004 	mov	r0, r4
   19954:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   19958:	e5843000 	str	r3, [r4]
   1995c:	e8bd8070 	pop	{r4, r5, r6, pc}
   19960:	00041d90 	.word	0x00041d90

00019964 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>:
   19964:	e92d4070 	push	{r4, r5, r6, lr}
   19968:	e1a06002 	mov	r6, r2
   1996c:	e3a02064 	mov	r2, #100	; 0x64
   19970:	e1a04000 	mov	r4, r0
   19974:	e5801000 	str	r1, [r0]
   19978:	e1a05001 	mov	r5, r1
   1997c:	e5806004 	str	r6, [r0, #4]
   19980:	e1a01002 	mov	r1, r2
   19984:	e2800008 	add	r0, r0, #8
   19988:	eb003762 	bl	27718 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   1998c:	e3a03000 	mov	r3, #0
   19990:	e59f0054 	ldr	r0, [pc, #84]	; 199ec <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x88>
   19994:	e584301c 	str	r3, [r4, #28]
   19998:	e1c401b8 	strh	r0, [r4, #24]
   1999c:	e1a02006 	mov	r2, r6
   199a0:	e1a01005 	mov	r1, r5
   199a4:	e2840020 	add	r0, r4, #32
   199a8:	eb001ba2 	bl	20838 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>
   199ac:	e5943000 	ldr	r3, [r4]
   199b0:	e3530000 	cmp	r3, #0
   199b4:	0a000004 	beq	199cc <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x68>
   199b8:	e5943004 	ldr	r3, [r4, #4]
   199bc:	e3530000 	cmp	r3, #0
   199c0:	0a000005 	beq	199dc <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x78>
   199c4:	e1a00004 	mov	r0, r4
   199c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   199cc:	e3a02025 	mov	r2, #37	; 0x25
   199d0:	e59f1018 	ldr	r1, [pc, #24]	; 199f0 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x8c>
   199d4:	e59f0018 	ldr	r0, [pc, #24]	; 199f4 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x90>
   199d8:	eb002b55 	bl	24734 <assertion_failed>
   199dc:	e3a02026 	mov	r2, #38	; 0x26
   199e0:	e59f1008 	ldr	r1, [pc, #8]	; 199f0 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x8c>
   199e4:	e59f000c 	ldr	r0, [pc, #12]	; 199f8 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x94>
   199e8:	eb002b51 	bl	24734 <assertion_failed>
   199ec:	ffffea60 	.word	0xffffea60
   199f0:	00041d9c 	.word	0x00041d9c
   199f4:	00041db0 	.word	0x00041db0
   199f8:	00041dc4 	.word	0x00041dc4

000199fc <CTransportLayer::Initialize()>:
   199fc:	e3a00001 	mov	r0, #1
   19a00:	e12fff1e 	bx	lr

00019a04 <CTransportLayer::Bind(unsigned short, int)>:
   19a04:	e3520011 	cmp	r2, #17
   19a08:	1a000051 	bne	19b54 <CTransportLayer::Bind(unsigned short, int)+0x150>
   19a0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19a10:	e1a06000 	mov	r6, r0
   19a14:	e590001c 	ldr	r0, [r0, #28]
   19a18:	e1a07001 	mov	r7, r1
   19a1c:	e3500000 	cmp	r0, #0
   19a20:	1a000036 	bne	19b00 <CTransportLayer::Bind(unsigned short, int)+0xfc>
   19a24:	e3a04000 	mov	r4, #0
   19a28:	e2865008 	add	r5, r6, #8
   19a2c:	ea000006 	b	19a4c <CTransportLayer::Bind(unsigned short, int)+0x48>
   19a30:	e1a01004 	mov	r1, r4
   19a34:	e1a00005 	mov	r0, r5
   19a38:	eb00375f 	bl	277bc <CPtrArray::operator[](unsigned int)>
   19a3c:	e5903000 	ldr	r3, [r0]
   19a40:	e3530000 	cmp	r3, #0
   19a44:	0a000004 	beq	19a5c <CTransportLayer::Bind(unsigned short, int)+0x58>
   19a48:	e2844001 	add	r4, r4, #1
   19a4c:	e1a00005 	mov	r0, r5
   19a50:	eb003757 	bl	277b4 <CPtrArray::GetCount() const>
   19a54:	e1500004 	cmp	r0, r4
   19a58:	8afffff4 	bhi	19a30 <CTransportLayer::Bind(unsigned short, int)+0x2c>
   19a5c:	e1a00005 	mov	r0, r5
   19a60:	eb003753 	bl	277b4 <CPtrArray::GetCount() const>
   19a64:	e1500004 	cmp	r0, r4
   19a68:	9a00001f 	bls	19aec <CTransportLayer::Bind(unsigned short, int)+0xe8>
   19a6c:	e3570000 	cmp	r7, #0
   19a70:	0a000030 	beq	19b38 <CTransportLayer::Bind(unsigned short, int)+0x134>
   19a74:	e5963000 	ldr	r3, [r6]
   19a78:	e3530000 	cmp	r3, #0
   19a7c:	0a000021 	beq	19b08 <CTransportLayer::Bind(unsigned short, int)+0x104>
   19a80:	e5963004 	ldr	r3, [r6, #4]
   19a84:	e3530000 	cmp	r3, #0
   19a88:	0a000022 	beq	19b18 <CTransportLayer::Bind(unsigned short, int)+0x114>
   19a8c:	e3a00048 	mov	r0, #72	; 0x48
   19a90:	eb00452e 	bl	2af50 <operator new(unsigned int)>
   19a94:	e8960006 	ldm	r6, {r1, r2}
   19a98:	e1a03007 	mov	r3, r7
   19a9c:	e1a07000 	mov	r7, r0
   19aa0:	eb001129 	bl	1df4c <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   19aa4:	e1a01004 	mov	r1, r4
   19aa8:	e1a00005 	mov	r0, r5
   19aac:	eb003742 	bl	277bc <CPtrArray::operator[](unsigned int)>
   19ab0:	e1a01004 	mov	r1, r4
   19ab4:	e5807000 	str	r7, [r0]
   19ab8:	e1a00005 	mov	r0, r5
   19abc:	eb00373e 	bl	277bc <CPtrArray::operator[](unsigned int)>
   19ac0:	e5903000 	ldr	r3, [r0]
   19ac4:	e3530000 	cmp	r3, #0
   19ac8:	0a000016 	beq	19b28 <CTransportLayer::Bind(unsigned short, int)+0x124>
   19acc:	e596301c 	ldr	r3, [r6, #28]
   19ad0:	e3530000 	cmp	r3, #0
   19ad4:	1a000001 	bne	19ae0 <CTransportLayer::Bind(unsigned short, int)+0xdc>
   19ad8:	e1a00004 	mov	r0, r4
   19adc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19ae0:	eb004871 	bl	2bcac <LeaveCritical>
   19ae4:	e1a00004 	mov	r0, r4
   19ae8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19aec:	e3a01000 	mov	r1, #0
   19af0:	e1a00005 	mov	r0, r5
   19af4:	eb003768 	bl	2789c <CPtrArray::Append(void*)>
   19af8:	e1a04000 	mov	r4, r0
   19afc:	eaffffda 	b	19a6c <CTransportLayer::Bind(unsigned short, int)+0x68>
   19b00:	eb00483f 	bl	2bc04 <EnterCritical>
   19b04:	eaffffc6 	b	19a24 <CTransportLayer::Bind(unsigned short, int)+0x20>
   19b08:	e3a020ad 	mov	r2, #173	; 0xad
   19b0c:	e59f1048 	ldr	r1, [pc, #72]	; 19b5c <CTransportLayer::Bind(unsigned short, int)+0x158>
   19b10:	e59f0048 	ldr	r0, [pc, #72]	; 19b60 <CTransportLayer::Bind(unsigned short, int)+0x15c>
   19b14:	eb002b06 	bl	24734 <assertion_failed>
   19b18:	e3a020ae 	mov	r2, #174	; 0xae
   19b1c:	e59f1038 	ldr	r1, [pc, #56]	; 19b5c <CTransportLayer::Bind(unsigned short, int)+0x158>
   19b20:	e59f003c 	ldr	r0, [pc, #60]	; 19b64 <CTransportLayer::Bind(unsigned short, int)+0x160>
   19b24:	eb002b02 	bl	24734 <assertion_failed>
   19b28:	e3a020b0 	mov	r2, #176	; 0xb0
   19b2c:	e59f1028 	ldr	r1, [pc, #40]	; 19b5c <CTransportLayer::Bind(unsigned short, int)+0x158>
   19b30:	e59f0030 	ldr	r0, [pc, #48]	; 19b68 <CTransportLayer::Bind(unsigned short, int)+0x164>
   19b34:	eb002afe 	bl	24734 <assertion_failed>
   19b38:	e596301c 	ldr	r3, [r6, #28]
   19b3c:	e3530000 	cmp	r3, #0
   19b40:	1a000001 	bne	19b4c <CTransportLayer::Bind(unsigned short, int)+0x148>
   19b44:	e3e00000 	mvn	r0, #0
   19b48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19b4c:	eb004856 	bl	2bcac <LeaveCritical>
   19b50:	eafffffb 	b	19b44 <CTransportLayer::Bind(unsigned short, int)+0x140>
   19b54:	e3e00000 	mvn	r0, #0
   19b58:	e12fff1e 	bx	lr
   19b5c:	00041d9c 	.word	0x00041d9c
   19b60:	00041db0 	.word	0x00041db0
   19b64:	00041dc4 	.word	0x00041dc4
   19b68:	00041ddc 	.word	0x00041ddc

00019b6c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>:
   19b6c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b70:	e1a07000 	mov	r7, r0
   19b74:	e590001c 	ldr	r0, [r0, #28]
   19b78:	e24dd014 	sub	sp, sp, #20
   19b7c:	e3500000 	cmp	r0, #0
   19b80:	e1a05003 	mov	r5, r3
   19b84:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
   19b88:	e58d1008 	str	r1, [sp, #8]
   19b8c:	e58d200c 	str	r2, [sp, #12]
   19b90:	1a000070 	bne	19d58 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1ec>
   19b94:	e3a06000 	mov	r6, #0
   19b98:	e2874008 	add	r4, r7, #8
   19b9c:	ea000006 	b	19bbc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x50>
   19ba0:	e1a01006 	mov	r1, r6
   19ba4:	e1a00004 	mov	r0, r4
   19ba8:	eb003703 	bl	277bc <CPtrArray::operator[](unsigned int)>
   19bac:	e5903000 	ldr	r3, [r0]
   19bb0:	e3530000 	cmp	r3, #0
   19bb4:	0a000004 	beq	19bcc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x60>
   19bb8:	e2866001 	add	r6, r6, #1
   19bbc:	e1a00004 	mov	r0, r4
   19bc0:	eb0036fb 	bl	277b4 <CPtrArray::GetCount() const>
   19bc4:	e1500006 	cmp	r0, r6
   19bc8:	8afffff4 	bhi	19ba0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x34>
   19bcc:	e1a00004 	mov	r0, r4
   19bd0:	eb0036f7 	bl	277b4 <CPtrArray::GetCount() const>
   19bd4:	e1500006 	cmp	r0, r6
   19bd8:	9a000059 	bls	19d44 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1d8>
   19bdc:	e3550000 	cmp	r5, #0
   19be0:	1a000026 	bne	19c80 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x114>
   19be4:	e59f9204 	ldr	r9, [pc, #516]	; 19df0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x284>
   19be8:	e59fb204 	ldr	fp, [pc, #516]	; 19df4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   19bec:	e1d751b8 	ldrh	r5, [r7, #24]
   19bf0:	e3a0a000 	mov	sl, #0
   19bf4:	e2853001 	add	r3, r5, #1
   19bf8:	e6ff3073 	uxth	r3, r3
   19bfc:	e1530009 	cmp	r3, r9
   19c00:	91c731b8 	strhls	r3, [r7, #24]
   19c04:	81c7b1b8 	strhhi	fp, [r7, #24]
   19c08:	ea000000 	b	19c10 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   19c0c:	e28aa001 	add	sl, sl, #1
   19c10:	e1a00004 	mov	r0, r4
   19c14:	eb0036e6 	bl	277b4 <CPtrArray::GetCount() const>
   19c18:	e150000a 	cmp	r0, sl
   19c1c:	9a000013 	bls	19c70 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x104>
   19c20:	e1a0100a 	mov	r1, sl
   19c24:	e1a00004 	mov	r0, r4
   19c28:	eb0036e3 	bl	277bc <CPtrArray::operator[](unsigned int)>
   19c2c:	e5903000 	ldr	r3, [r0]
   19c30:	e3530000 	cmp	r3, #0
   19c34:	0afffff4 	beq	19c0c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19c38:	e1a0100a 	mov	r1, sl
   19c3c:	e1a00004 	mov	r0, r4
   19c40:	eb0036dd 	bl	277bc <CPtrArray::operator[](unsigned int)>
   19c44:	e5900000 	ldr	r0, [r0]
   19c48:	eb000e46 	bl	1d568 <CNetConnection::GetOwnPort() const>
   19c4c:	e1500005 	cmp	r0, r5
   19c50:	1affffed 	bne	19c0c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19c54:	e1a0100a 	mov	r1, sl
   19c58:	e1a00004 	mov	r0, r4
   19c5c:	eb0036d6 	bl	277bc <CPtrArray::operator[](unsigned int)>
   19c60:	e5900000 	ldr	r0, [r0]
   19c64:	eb000e49 	bl	1d590 <CNetConnection::GetProtocol() const>
   19c68:	e1500008 	cmp	r0, r8
   19c6c:	1affffe6 	bne	19c0c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19c70:	e1a00004 	mov	r0, r4
   19c74:	eb0036ce 	bl	277b4 <CPtrArray::GetCount() const>
   19c78:	e150000a 	cmp	r0, sl
   19c7c:	8affffda 	bhi	19bec <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x80>
   19c80:	e5973000 	ldr	r3, [r7]
   19c84:	e3530000 	cmp	r3, #0
   19c88:	0a00004c 	beq	19dc0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x254>
   19c8c:	e5973004 	ldr	r3, [r7, #4]
   19c90:	e3530000 	cmp	r3, #0
   19c94:	0a00004d 	beq	19dd0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x264>
   19c98:	e3580006 	cmp	r8, #6
   19c9c:	0a00002f 	beq	19d60 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1f4>
   19ca0:	e3580011 	cmp	r8, #17
   19ca4:	1a000021 	bne	19d30 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1c4>
   19ca8:	e3a00048 	mov	r0, #72	; 0x48
   19cac:	eb0044a7 	bl	2af50 <operator new(unsigned int)>
   19cb0:	e59d300c 	ldr	r3, [sp, #12]
   19cb4:	e58d5004 	str	r5, [sp, #4]
   19cb8:	e58d3000 	str	r3, [sp]
   19cbc:	e8970006 	ldm	r7, {r1, r2}
   19cc0:	e59d3008 	ldr	r3, [sp, #8]
   19cc4:	e1a05000 	mov	r5, r0
   19cc8:	eb001084 	bl	1dee0 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   19ccc:	e1a01006 	mov	r1, r6
   19cd0:	e1a00004 	mov	r0, r4
   19cd4:	eb0036b8 	bl	277bc <CPtrArray::operator[](unsigned int)>
   19cd8:	e597301c 	ldr	r3, [r7, #28]
   19cdc:	e5805000 	str	r5, [r0]
   19ce0:	e3530000 	cmp	r3, #0
   19ce4:	1a00002d 	bne	19da0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x234>
   19ce8:	e1a01006 	mov	r1, r6
   19cec:	e1a00004 	mov	r0, r4
   19cf0:	eb0036b1 	bl	277bc <CPtrArray::operator[](unsigned int)>
   19cf4:	e5903000 	ldr	r3, [r0]
   19cf8:	e3530000 	cmp	r3, #0
   19cfc:	0a000037 	beq	19de0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x274>
   19d00:	e1a00004 	mov	r0, r4
   19d04:	e1a01006 	mov	r1, r6
   19d08:	eb0036ab 	bl	277bc <CPtrArray::operator[](unsigned int)>
   19d0c:	e5900000 	ldr	r0, [r0]
   19d10:	e59f20e0 	ldr	r2, [pc, #224]	; 19df8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28c>
   19d14:	e5903000 	ldr	r3, [r0]
   19d18:	e5933008 	ldr	r3, [r3, #8]
   19d1c:	e1530002 	cmp	r3, r2
   19d20:	1a000020 	bne	19da8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x23c>
   19d24:	e3e00000 	mvn	r0, #0
   19d28:	e28dd014 	add	sp, sp, #20
   19d2c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d30:	e597301c 	ldr	r3, [r7, #28]
   19d34:	e3530000 	cmp	r3, #0
   19d38:	0afffff9 	beq	19d24 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1b8>
   19d3c:	eb0047da 	bl	2bcac <LeaveCritical>
   19d40:	eafffff7 	b	19d24 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1b8>
   19d44:	e3a01000 	mov	r1, #0
   19d48:	e1a00004 	mov	r0, r4
   19d4c:	eb0036d2 	bl	2789c <CPtrArray::Append(void*)>
   19d50:	e1a06000 	mov	r6, r0
   19d54:	eaffffa0 	b	19bdc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x70>
   19d58:	eb0047a9 	bl	2bc04 <EnterCritical>
   19d5c:	eaffff8c 	b	19b94 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28>
   19d60:	e3a000e0 	mov	r0, #224	; 0xe0
   19d64:	eb004479 	bl	2af50 <operator new(unsigned int)>
   19d68:	e59d300c 	ldr	r3, [sp, #12]
   19d6c:	e58d5004 	str	r5, [sp, #4]
   19d70:	e58d3000 	str	r3, [sp]
   19d74:	e8970006 	ldm	r7, {r1, r2}
   19d78:	e59d3008 	ldr	r3, [sp, #8]
   19d7c:	e1a05000 	mov	r5, r0
   19d80:	eb0012de 	bl	1e900 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   19d84:	e1a01006 	mov	r1, r6
   19d88:	e1a00004 	mov	r0, r4
   19d8c:	eb00368a 	bl	277bc <CPtrArray::operator[](unsigned int)>
   19d90:	e597301c 	ldr	r3, [r7, #28]
   19d94:	e5805000 	str	r5, [r0]
   19d98:	e3530000 	cmp	r3, #0
   19d9c:	0affffd1 	beq	19ce8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x17c>
   19da0:	eb0047c1 	bl	2bcac <LeaveCritical>
   19da4:	eaffffcf 	b	19ce8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x17c>
   19da8:	e12fff33 	blx	r3
   19dac:	e3500000 	cmp	r0, #0
   19db0:	baffffdb 	blt	19d24 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1b8>
   19db4:	e1a00006 	mov	r0, r6
   19db8:	e28dd014 	add	sp, sp, #20
   19dbc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dc0:	e3a020e1 	mov	r2, #225	; 0xe1
   19dc4:	e59f1030 	ldr	r1, [pc, #48]	; 19dfc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x290>
   19dc8:	e59f0030 	ldr	r0, [pc, #48]	; 19e00 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x294>
   19dcc:	eb002a58 	bl	24734 <assertion_failed>
   19dd0:	e3a020e2 	mov	r2, #226	; 0xe2
   19dd4:	e59f1020 	ldr	r1, [pc, #32]	; 19dfc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x290>
   19dd8:	e59f0024 	ldr	r0, [pc, #36]	; 19e04 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x298>
   19ddc:	eb002a54 	bl	24734 <assertion_failed>
   19de0:	e3a020f4 	mov	r2, #244	; 0xf4
   19de4:	e59f1010 	ldr	r1, [pc, #16]	; 19dfc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x290>
   19de8:	e59f0018 	ldr	r0, [pc, #24]	; 19e08 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x29c>
   19dec:	eb002a50 	bl	24734 <assertion_failed>
   19df0:	0000ee47 	.word	0x0000ee47
   19df4:	ffffea60 	.word	0xffffea60
   19df8:	0001a92c 	.word	0x0001a92c
   19dfc:	00041d9c 	.word	0x00041d9c
   19e00:	00041db0 	.word	0x00041db0
   19e04:	00041dc4 	.word	0x00041dc4
   19e08:	00041ddc 	.word	0x00041ddc

00019e0c <CTransportLayer::Listen(unsigned short, int)>:
   19e0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19e10:	e1a06000 	mov	r6, r0
   19e14:	e590001c 	ldr	r0, [r0, #28]
   19e18:	e1a07001 	mov	r7, r1
   19e1c:	e3500000 	cmp	r0, #0
   19e20:	e1a08002 	mov	r8, r2
   19e24:	1a000038 	bne	19f0c <CTransportLayer::Listen(unsigned short, int)+0x100>
   19e28:	e3a04000 	mov	r4, #0
   19e2c:	e2865008 	add	r5, r6, #8
   19e30:	ea000006 	b	19e50 <CTransportLayer::Listen(unsigned short, int)+0x44>
   19e34:	e1a01004 	mov	r1, r4
   19e38:	e1a00005 	mov	r0, r5
   19e3c:	eb00365e 	bl	277bc <CPtrArray::operator[](unsigned int)>
   19e40:	e5903000 	ldr	r3, [r0]
   19e44:	e3530000 	cmp	r3, #0
   19e48:	0a000004 	beq	19e60 <CTransportLayer::Listen(unsigned short, int)+0x54>
   19e4c:	e2844001 	add	r4, r4, #1
   19e50:	e1a00005 	mov	r0, r5
   19e54:	eb003656 	bl	277b4 <CPtrArray::GetCount() const>
   19e58:	e1500004 	cmp	r0, r4
   19e5c:	8afffff4 	bhi	19e34 <CTransportLayer::Listen(unsigned short, int)+0x28>
   19e60:	e1a00005 	mov	r0, r5
   19e64:	eb003652 	bl	277b4 <CPtrArray::GetCount() const>
   19e68:	e1500004 	cmp	r0, r4
   19e6c:	9a000021 	bls	19ef8 <CTransportLayer::Listen(unsigned short, int)+0xec>
   19e70:	e3570000 	cmp	r7, #0
   19e74:	0a000032 	beq	19f44 <CTransportLayer::Listen(unsigned short, int)+0x138>
   19e78:	e3580006 	cmp	r8, #6
   19e7c:	1a000030 	bne	19f44 <CTransportLayer::Listen(unsigned short, int)+0x138>
   19e80:	e5963000 	ldr	r3, [r6]
   19e84:	e3530000 	cmp	r3, #0
   19e88:	0a000021 	beq	19f14 <CTransportLayer::Listen(unsigned short, int)+0x108>
   19e8c:	e5963004 	ldr	r3, [r6, #4]
   19e90:	e3530000 	cmp	r3, #0
   19e94:	0a000022 	beq	19f24 <CTransportLayer::Listen(unsigned short, int)+0x118>
   19e98:	e3a000e0 	mov	r0, #224	; 0xe0
   19e9c:	eb00442b 	bl	2af50 <operator new(unsigned int)>
   19ea0:	e8960006 	ldm	r6, {r1, r2}
   19ea4:	e1a03007 	mov	r3, r7
   19ea8:	e1a07000 	mov	r7, r0
   19eac:	eb0010dc 	bl	1e224 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   19eb0:	e1a01004 	mov	r1, r4
   19eb4:	e1a00005 	mov	r0, r5
   19eb8:	eb00363f 	bl	277bc <CPtrArray::operator[](unsigned int)>
   19ebc:	e1a01004 	mov	r1, r4
   19ec0:	e5807000 	str	r7, [r0]
   19ec4:	e1a00005 	mov	r0, r5
   19ec8:	eb00363b 	bl	277bc <CPtrArray::operator[](unsigned int)>
   19ecc:	e5903000 	ldr	r3, [r0]
   19ed0:	e3530000 	cmp	r3, #0
   19ed4:	0a000016 	beq	19f34 <CTransportLayer::Listen(unsigned short, int)+0x128>
   19ed8:	e596301c 	ldr	r3, [r6, #28]
   19edc:	e3530000 	cmp	r3, #0
   19ee0:	1a000001 	bne	19eec <CTransportLayer::Listen(unsigned short, int)+0xe0>
   19ee4:	e1a00004 	mov	r0, r4
   19ee8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19eec:	eb00476e 	bl	2bcac <LeaveCritical>
   19ef0:	e1a00004 	mov	r0, r4
   19ef4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19ef8:	e3a01000 	mov	r1, #0
   19efc:	e1a00005 	mov	r0, r5
   19f00:	eb003665 	bl	2789c <CPtrArray::Append(void*)>
   19f04:	e1a04000 	mov	r4, r0
   19f08:	eaffffd8 	b	19e70 <CTransportLayer::Listen(unsigned short, int)+0x64>
   19f0c:	eb00473c 	bl	2bc04 <EnterCritical>
   19f10:	eaffffc4 	b	19e28 <CTransportLayer::Listen(unsigned short, int)+0x1c>
   19f14:	e59f2048 	ldr	r2, [pc, #72]	; 19f64 <CTransportLayer::Listen(unsigned short, int)+0x158>
   19f18:	e59f1048 	ldr	r1, [pc, #72]	; 19f68 <CTransportLayer::Listen(unsigned short, int)+0x15c>
   19f1c:	e59f0048 	ldr	r0, [pc, #72]	; 19f6c <CTransportLayer::Listen(unsigned short, int)+0x160>
   19f20:	eb002a03 	bl	24734 <assertion_failed>
   19f24:	e59f2044 	ldr	r2, [pc, #68]	; 19f70 <CTransportLayer::Listen(unsigned short, int)+0x164>
   19f28:	e59f1038 	ldr	r1, [pc, #56]	; 19f68 <CTransportLayer::Listen(unsigned short, int)+0x15c>
   19f2c:	e59f0040 	ldr	r0, [pc, #64]	; 19f74 <CTransportLayer::Listen(unsigned short, int)+0x168>
   19f30:	eb0029ff 	bl	24734 <assertion_failed>
   19f34:	e59f203c 	ldr	r2, [pc, #60]	; 19f78 <CTransportLayer::Listen(unsigned short, int)+0x16c>
   19f38:	e59f1028 	ldr	r1, [pc, #40]	; 19f68 <CTransportLayer::Listen(unsigned short, int)+0x15c>
   19f3c:	e59f0038 	ldr	r0, [pc, #56]	; 19f7c <CTransportLayer::Listen(unsigned short, int)+0x170>
   19f40:	eb0029fb 	bl	24734 <assertion_failed>
   19f44:	e596301c 	ldr	r3, [r6, #28]
   19f48:	e3530000 	cmp	r3, #0
   19f4c:	1a000001 	bne	19f58 <CTransportLayer::Listen(unsigned short, int)+0x14c>
   19f50:	e3e00000 	mvn	r0, #0
   19f54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19f58:	eb004753 	bl	2bcac <LeaveCritical>
   19f5c:	e3e00000 	mvn	r0, #0
   19f60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19f64:	0000011e 	.word	0x0000011e
   19f68:	00041d9c 	.word	0x00041d9c
   19f6c:	00041db0 	.word	0x00041db0
   19f70:	0000011f 	.word	0x0000011f
   19f74:	00041dc4 	.word	0x00041dc4
   19f78:	00000121 	.word	0x00000121
   19f7c:	00041ddc 	.word	0x00041ddc

00019f80 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>:
   19f80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19f84:	e2535000 	subs	r5, r3, #0
   19f88:	ba00001f 	blt	1a00c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x8c>
   19f8c:	e2804008 	add	r4, r0, #8
   19f90:	e1a00004 	mov	r0, r4
   19f94:	e1a06001 	mov	r6, r1
   19f98:	e1a07002 	mov	r7, r2
   19f9c:	eb003604 	bl	277b4 <CPtrArray::GetCount() const>
   19fa0:	e1500005 	cmp	r0, r5
   19fa4:	da000012 	ble	19ff4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x74>
   19fa8:	e1a01005 	mov	r1, r5
   19fac:	e1a00004 	mov	r0, r4
   19fb0:	eb003601 	bl	277bc <CPtrArray::operator[](unsigned int)>
   19fb4:	e5903000 	ldr	r3, [r0]
   19fb8:	e3530000 	cmp	r3, #0
   19fbc:	0a00000c 	beq	19ff4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x74>
   19fc0:	e3560000 	cmp	r6, #0
   19fc4:	0a000014 	beq	1a01c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x9c>
   19fc8:	e3570000 	cmp	r7, #0
   19fcc:	0a000016 	beq	1a02c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xac>
   19fd0:	e1a01005 	mov	r1, r5
   19fd4:	e1a00004 	mov	r0, r4
   19fd8:	eb0035f7 	bl	277bc <CPtrArray::operator[](unsigned int)>
   19fdc:	e5900000 	ldr	r0, [r0]
   19fe0:	e59f2054 	ldr	r2, [pc, #84]	; 1a03c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xbc>
   19fe4:	e5903000 	ldr	r3, [r0]
   19fe8:	e593300c 	ldr	r3, [r3, #12]
   19fec:	e1530002 	cmp	r3, r2
   19ff0:	1a000001 	bne	19ffc <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x7c>
   19ff4:	e3e00000 	mvn	r0, #0
   19ff8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19ffc:	e1a02007 	mov	r2, r7
   1a000:	e1a01006 	mov	r1, r6
   1a004:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a008:	e12fff13 	bx	r3
   1a00c:	e59f202c 	ldr	r2, [pc, #44]	; 1a040 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc0>
   1a010:	e59f102c 	ldr	r1, [pc, #44]	; 1a044 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   1a014:	e59f002c 	ldr	r0, [pc, #44]	; 1a048 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc8>
   1a018:	eb0029c5 	bl	24734 <assertion_failed>
   1a01c:	e59f2028 	ldr	r2, [pc, #40]	; 1a04c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xcc>
   1a020:	e59f101c 	ldr	r1, [pc, #28]	; 1a044 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   1a024:	e59f0024 	ldr	r0, [pc, #36]	; 1a050 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xd0>
   1a028:	eb0029c1 	bl	24734 <assertion_failed>
   1a02c:	e59f2020 	ldr	r2, [pc, #32]	; 1a054 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xd4>
   1a030:	e59f100c 	ldr	r1, [pc, #12]	; 1a044 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   1a034:	e59f001c 	ldr	r0, [pc, #28]	; 1a058 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xd8>
   1a038:	eb0029bd 	bl	24734 <assertion_failed>
   1a03c:	0001a934 	.word	0x0001a934
   1a040:	0000012a 	.word	0x0000012a
   1a044:	00041d9c 	.word	0x00041d9c
   1a048:	00041df4 	.word	0x00041df4
   1a04c:	00000131 	.word	0x00000131
   1a050:	00041e08 	.word	0x00041e08
   1a054:	00000132 	.word	0x00000132
   1a058:	00041e18 	.word	0x00041e18

0001a05c <CTransportLayer::Disconnect(int)>:
   1a05c:	e92d4070 	push	{r4, r5, r6, lr}
   1a060:	e2515000 	subs	r5, r1, #0
   1a064:	ba000017 	blt	1a0c8 <CTransportLayer::Disconnect(int)+0x6c>
   1a068:	e2804008 	add	r4, r0, #8
   1a06c:	e1a00004 	mov	r0, r4
   1a070:	eb0035cf 	bl	277b4 <CPtrArray::GetCount() const>
   1a074:	e1500005 	cmp	r0, r5
   1a078:	da00000e 	ble	1a0b8 <CTransportLayer::Disconnect(int)+0x5c>
   1a07c:	e1a01005 	mov	r1, r5
   1a080:	e1a00004 	mov	r0, r4
   1a084:	eb0035cc 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a088:	e5903000 	ldr	r3, [r0]
   1a08c:	e3530000 	cmp	r3, #0
   1a090:	0a000008 	beq	1a0b8 <CTransportLayer::Disconnect(int)+0x5c>
   1a094:	e1a01005 	mov	r1, r5
   1a098:	e1a00004 	mov	r0, r4
   1a09c:	eb0035c6 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a0a0:	e5900000 	ldr	r0, [r0]
   1a0a4:	e59f202c 	ldr	r2, [pc, #44]	; 1a0d8 <CTransportLayer::Disconnect(int)+0x7c>
   1a0a8:	e5903000 	ldr	r3, [r0]
   1a0ac:	e5933010 	ldr	r3, [r3, #16]
   1a0b0:	e1530002 	cmp	r3, r2
   1a0b4:	1a000001 	bne	1a0c0 <CTransportLayer::Disconnect(int)+0x64>
   1a0b8:	e3e00000 	mvn	r0, #0
   1a0bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a0c0:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a0c4:	e12fff13 	bx	r3
   1a0c8:	e3a02f4e 	mov	r2, #312	; 0x138
   1a0cc:	e59f1008 	ldr	r1, [pc, #8]	; 1a0dc <CTransportLayer::Disconnect(int)+0x80>
   1a0d0:	e59f0008 	ldr	r0, [pc, #8]	; 1a0e0 <CTransportLayer::Disconnect(int)+0x84>
   1a0d4:	eb002996 	bl	24734 <assertion_failed>
   1a0d8:	0001a93c 	.word	0x0001a93c
   1a0dc:	00041d9c 	.word	0x00041d9c
   1a0e0:	00041df4 	.word	0x00041df4

0001a0e4 <CTransportLayer::Send(void const*, unsigned int, int, int)>:
   1a0e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a0e8:	e59d5018 	ldr	r5, [sp, #24]
   1a0ec:	e3550000 	cmp	r5, #0
   1a0f0:	ba000022 	blt	1a180 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x9c>
   1a0f4:	e2804008 	add	r4, r0, #8
   1a0f8:	e1a00004 	mov	r0, r4
   1a0fc:	e1a06001 	mov	r6, r1
   1a100:	e1a08002 	mov	r8, r2
   1a104:	e1a07003 	mov	r7, r3
   1a108:	eb0035a9 	bl	277b4 <CPtrArray::GetCount() const>
   1a10c:	e1500005 	cmp	r0, r5
   1a110:	da000012 	ble	1a160 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x7c>
   1a114:	e1a01005 	mov	r1, r5
   1a118:	e1a00004 	mov	r0, r4
   1a11c:	eb0035a6 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a120:	e5903000 	ldr	r3, [r0]
   1a124:	e3530000 	cmp	r3, #0
   1a128:	0a00000c 	beq	1a160 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x7c>
   1a12c:	e3560000 	cmp	r6, #0
   1a130:	0a000016 	beq	1a190 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xac>
   1a134:	e3580000 	cmp	r8, #0
   1a138:	0a000018 	beq	1a1a0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xbc>
   1a13c:	e1a01005 	mov	r1, r5
   1a140:	e1a00004 	mov	r0, r4
   1a144:	eb00359c 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a148:	e5900000 	ldr	r0, [r0]
   1a14c:	e59f305c 	ldr	r3, [pc, #92]	; 1a1b0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xcc>
   1a150:	e5902000 	ldr	r2, [r0]
   1a154:	e592e014 	ldr	lr, [r2, #20]
   1a158:	e15e0003 	cmp	lr, r3
   1a15c:	1a000001 	bne	1a168 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x84>
   1a160:	e3e00000 	mvn	r0, #0
   1a164:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a168:	e1a03007 	mov	r3, r7
   1a16c:	e1a02008 	mov	r2, r8
   1a170:	e1a01006 	mov	r1, r6
   1a174:	e1a0c00e 	mov	ip, lr
   1a178:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a17c:	e12fff1c 	bx	ip
   1a180:	e3a02f51 	mov	r2, #324	; 0x144
   1a184:	e59f1028 	ldr	r1, [pc, #40]	; 1a1b4 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd0>
   1a188:	e59f0028 	ldr	r0, [pc, #40]	; 1a1b8 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd4>
   1a18c:	eb002968 	bl	24734 <assertion_failed>
   1a190:	e59f2024 	ldr	r2, [pc, #36]	; 1a1bc <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd8>
   1a194:	e59f1018 	ldr	r1, [pc, #24]	; 1a1b4 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd0>
   1a198:	e59f0020 	ldr	r0, [pc, #32]	; 1a1c0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xdc>
   1a19c:	eb002964 	bl	24734 <assertion_failed>
   1a1a0:	e3a02f53 	mov	r2, #332	; 0x14c
   1a1a4:	e59f1008 	ldr	r1, [pc, #8]	; 1a1b4 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd0>
   1a1a8:	e59f0014 	ldr	r0, [pc, #20]	; 1a1c4 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xe0>
   1a1ac:	eb002960 	bl	24734 <assertion_failed>
   1a1b0:	0001a944 	.word	0x0001a944
   1a1b4:	00041d9c 	.word	0x00041d9c
   1a1b8:	00041df4 	.word	0x00041df4
   1a1bc:	0000014b 	.word	0x0000014b
   1a1c0:	00041e2c 	.word	0x00041e2c
   1a1c4:	00041e38 	.word	0x00041e38

0001a1c8 <CTransportLayer::Receive(void*, int, int)>:
   1a1c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a1cc:	e2535000 	subs	r5, r3, #0
   1a1d0:	ba00001d 	blt	1a24c <CTransportLayer::Receive(void*, int, int)+0x84>
   1a1d4:	e2804008 	add	r4, r0, #8
   1a1d8:	e1a00004 	mov	r0, r4
   1a1dc:	e1a06001 	mov	r6, r1
   1a1e0:	e1a07002 	mov	r7, r2
   1a1e4:	eb003572 	bl	277b4 <CPtrArray::GetCount() const>
   1a1e8:	e1500005 	cmp	r0, r5
   1a1ec:	da000010 	ble	1a234 <CTransportLayer::Receive(void*, int, int)+0x6c>
   1a1f0:	e1a01005 	mov	r1, r5
   1a1f4:	e1a00004 	mov	r0, r4
   1a1f8:	eb00356f 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a1fc:	e5903000 	ldr	r3, [r0]
   1a200:	e3530000 	cmp	r3, #0
   1a204:	0a00000a 	beq	1a234 <CTransportLayer::Receive(void*, int, int)+0x6c>
   1a208:	e3560000 	cmp	r6, #0
   1a20c:	0a000012 	beq	1a25c <CTransportLayer::Receive(void*, int, int)+0x94>
   1a210:	e1a01005 	mov	r1, r5
   1a214:	e1a00004 	mov	r0, r4
   1a218:	eb003567 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a21c:	e5900000 	ldr	r0, [r0]
   1a220:	e59f2044 	ldr	r2, [pc, #68]	; 1a26c <CTransportLayer::Receive(void*, int, int)+0xa4>
   1a224:	e5903000 	ldr	r3, [r0]
   1a228:	e5933018 	ldr	r3, [r3, #24]
   1a22c:	e1530002 	cmp	r3, r2
   1a230:	1a000001 	bne	1a23c <CTransportLayer::Receive(void*, int, int)+0x74>
   1a234:	e3e00000 	mvn	r0, #0
   1a238:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a23c:	e1a02007 	mov	r2, r7
   1a240:	e1a01006 	mov	r1, r6
   1a244:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a248:	e12fff13 	bx	r3
   1a24c:	e59f201c 	ldr	r2, [pc, #28]	; 1a270 <CTransportLayer::Receive(void*, int, int)+0xa8>
   1a250:	e59f101c 	ldr	r1, [pc, #28]	; 1a274 <CTransportLayer::Receive(void*, int, int)+0xac>
   1a254:	e59f001c 	ldr	r0, [pc, #28]	; 1a278 <CTransportLayer::Receive(void*, int, int)+0xb0>
   1a258:	eb002935 	bl	24734 <assertion_failed>
   1a25c:	e59f2018 	ldr	r2, [pc, #24]	; 1a27c <CTransportLayer::Receive(void*, int, int)+0xb4>
   1a260:	e59f100c 	ldr	r1, [pc, #12]	; 1a274 <CTransportLayer::Receive(void*, int, int)+0xac>
   1a264:	e59f0014 	ldr	r0, [pc, #20]	; 1a280 <CTransportLayer::Receive(void*, int, int)+0xb8>
   1a268:	eb002931 	bl	24734 <assertion_failed>
   1a26c:	0001a94c 	.word	0x0001a94c
   1a270:	00000152 	.word	0x00000152
   1a274:	00041d9c 	.word	0x00041d9c
   1a278:	00041df4 	.word	0x00041df4
   1a27c:	00000159 	.word	0x00000159
   1a280:	0003ef40 	.word	0x0003ef40

0001a284 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>:
   1a284:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a288:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   1a28c:	e59d9020 	ldr	r9, [sp, #32]
   1a290:	e3550000 	cmp	r5, #0
   1a294:	e1dda2b4 	ldrh	sl, [sp, #36]	; 0x24
   1a298:	ba000024 	blt	1a330 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xac>
   1a29c:	e2804008 	add	r4, r0, #8
   1a2a0:	e1a00004 	mov	r0, r4
   1a2a4:	e1a06001 	mov	r6, r1
   1a2a8:	e1a08002 	mov	r8, r2
   1a2ac:	e1a07003 	mov	r7, r3
   1a2b0:	eb00353f 	bl	277b4 <CPtrArray::GetCount() const>
   1a2b4:	e1500005 	cmp	r0, r5
   1a2b8:	da000012 	ble	1a308 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x84>
   1a2bc:	e1a01005 	mov	r1, r5
   1a2c0:	e1a00004 	mov	r0, r4
   1a2c4:	eb00353c 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a2c8:	e5903000 	ldr	r3, [r0]
   1a2cc:	e3530000 	cmp	r3, #0
   1a2d0:	0a00000c 	beq	1a308 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x84>
   1a2d4:	e3560000 	cmp	r6, #0
   1a2d8:	0a000018 	beq	1a340 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xbc>
   1a2dc:	e3580000 	cmp	r8, #0
   1a2e0:	0a00001a 	beq	1a350 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xcc>
   1a2e4:	e1a01005 	mov	r1, r5
   1a2e8:	e1a00004 	mov	r0, r4
   1a2ec:	eb003532 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a2f0:	e5900000 	ldr	r0, [r0]
   1a2f4:	e59f3064 	ldr	r3, [pc, #100]	; 1a360 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xdc>
   1a2f8:	e5902000 	ldr	r2, [r0]
   1a2fc:	e592e01c 	ldr	lr, [r2, #28]
   1a300:	e15e0003 	cmp	lr, r3
   1a304:	1a000001 	bne	1a310 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x8c>
   1a308:	e3e00000 	mvn	r0, #0
   1a30c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a310:	e1a03007 	mov	r3, r7
   1a314:	e1a02008 	mov	r2, r8
   1a318:	e1a01006 	mov	r1, r6
   1a31c:	e1a0c00e 	mov	ip, lr
   1a320:	e58da024 	str	sl, [sp, #36]	; 0x24
   1a324:	e58d9020 	str	r9, [sp, #32]
   1a328:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a32c:	e12fff1c 	bx	ip
   1a330:	e3a02e16 	mov	r2, #352	; 0x160
   1a334:	e59f1028 	ldr	r1, [pc, #40]	; 1a364 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   1a338:	e59f0028 	ldr	r0, [pc, #40]	; 1a368 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe4>
   1a33c:	eb0028fc 	bl	24734 <assertion_failed>
   1a340:	e59f2024 	ldr	r2, [pc, #36]	; 1a36c <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe8>
   1a344:	e59f1018 	ldr	r1, [pc, #24]	; 1a364 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   1a348:	e59f0020 	ldr	r0, [pc, #32]	; 1a370 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xec>
   1a34c:	eb0028f8 	bl	24734 <assertion_failed>
   1a350:	e3a02f5a 	mov	r2, #360	; 0x168
   1a354:	e59f1008 	ldr	r1, [pc, #8]	; 1a364 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   1a358:	e59f0014 	ldr	r0, [pc, #20]	; 1a374 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xf0>
   1a35c:	eb0028f4 	bl	24734 <assertion_failed>
   1a360:	0001a954 	.word	0x0001a954
   1a364:	00041d9c 	.word	0x00041d9c
   1a368:	00041df4 	.word	0x00041df4
   1a36c:	00000167 	.word	0x00000167
   1a370:	00041e2c 	.word	0x00041e2c
   1a374:	00041e38 	.word	0x00041e38

0001a378 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>:
   1a378:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a37c:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1a380:	e59d9020 	ldr	r9, [sp, #32]
   1a384:	e3550000 	cmp	r5, #0
   1a388:	ba000021 	blt	1a414 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x9c>
   1a38c:	e2804008 	add	r4, r0, #8
   1a390:	e1a00004 	mov	r0, r4
   1a394:	e1a06001 	mov	r6, r1
   1a398:	e1a08002 	mov	r8, r2
   1a39c:	e1a07003 	mov	r7, r3
   1a3a0:	eb003503 	bl	277b4 <CPtrArray::GetCount() const>
   1a3a4:	e1500005 	cmp	r0, r5
   1a3a8:	da000010 	ble	1a3f0 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x78>
   1a3ac:	e1a01005 	mov	r1, r5
   1a3b0:	e1a00004 	mov	r0, r4
   1a3b4:	eb003500 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a3b8:	e5903000 	ldr	r3, [r0]
   1a3bc:	e3530000 	cmp	r3, #0
   1a3c0:	0a00000a 	beq	1a3f0 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x78>
   1a3c4:	e3560000 	cmp	r6, #0
   1a3c8:	0a000015 	beq	1a424 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xac>
   1a3cc:	e1a01005 	mov	r1, r5
   1a3d0:	e1a00004 	mov	r0, r4
   1a3d4:	eb0034f8 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a3d8:	e5900000 	ldr	r0, [r0]
   1a3dc:	e59f3050 	ldr	r3, [pc, #80]	; 1a434 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xbc>
   1a3e0:	e5902000 	ldr	r2, [r0]
   1a3e4:	e592e020 	ldr	lr, [r2, #32]
   1a3e8:	e15e0003 	cmp	lr, r3
   1a3ec:	1a000001 	bne	1a3f8 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x80>
   1a3f0:	e3e00000 	mvn	r0, #0
   1a3f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a3f8:	e1a03007 	mov	r3, r7
   1a3fc:	e1a02008 	mov	r2, r8
   1a400:	e1a01006 	mov	r1, r6
   1a404:	e1a0c00e 	mov	ip, lr
   1a408:	e58d9020 	str	r9, [sp, #32]
   1a40c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a410:	e12fff1c 	bx	ip
   1a414:	e3a02e17 	mov	r2, #368	; 0x170
   1a418:	e59f1018 	ldr	r1, [pc, #24]	; 1a438 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xc0>
   1a41c:	e59f0018 	ldr	r0, [pc, #24]	; 1a43c <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xc4>
   1a420:	eb0028c3 	bl	24734 <assertion_failed>
   1a424:	e59f2014 	ldr	r2, [pc, #20]	; 1a440 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xc8>
   1a428:	e59f1008 	ldr	r1, [pc, #8]	; 1a438 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xc0>
   1a42c:	e59f0010 	ldr	r0, [pc, #16]	; 1a444 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xcc>
   1a430:	eb0028bf 	bl	24734 <assertion_failed>
   1a434:	0001a95c 	.word	0x0001a95c
   1a438:	00041d9c 	.word	0x00041d9c
   1a43c:	00041df4 	.word	0x00041df4
   1a440:	00000177 	.word	0x00000177
   1a444:	0003ef40 	.word	0x0003ef40

0001a448 <CTransportLayer::SetOptionBroadcast(bool, int)>:
   1a448:	e92d4070 	push	{r4, r5, r6, lr}
   1a44c:	e2525000 	subs	r5, r2, #0
   1a450:	ba000019 	blt	1a4bc <CTransportLayer::SetOptionBroadcast(bool, int)+0x74>
   1a454:	e2804008 	add	r4, r0, #8
   1a458:	e1a00004 	mov	r0, r4
   1a45c:	e1a06001 	mov	r6, r1
   1a460:	eb0034d3 	bl	277b4 <CPtrArray::GetCount() const>
   1a464:	e1500005 	cmp	r0, r5
   1a468:	da00000e 	ble	1a4a8 <CTransportLayer::SetOptionBroadcast(bool, int)+0x60>
   1a46c:	e1a01005 	mov	r1, r5
   1a470:	e1a00004 	mov	r0, r4
   1a474:	eb0034d0 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a478:	e5903000 	ldr	r3, [r0]
   1a47c:	e3530000 	cmp	r3, #0
   1a480:	0a000008 	beq	1a4a8 <CTransportLayer::SetOptionBroadcast(bool, int)+0x60>
   1a484:	e1a01005 	mov	r1, r5
   1a488:	e1a00004 	mov	r0, r4
   1a48c:	eb0034ca 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a490:	e5900000 	ldr	r0, [r0]
   1a494:	e59f2030 	ldr	r2, [pc, #48]	; 1a4cc <CTransportLayer::SetOptionBroadcast(bool, int)+0x84>
   1a498:	e5903000 	ldr	r3, [r0]
   1a49c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1a4a0:	e1530002 	cmp	r3, r2
   1a4a4:	1a000001 	bne	1a4b0 <CTransportLayer::SetOptionBroadcast(bool, int)+0x68>
   1a4a8:	e3e00000 	mvn	r0, #0
   1a4ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a4b0:	e1a01006 	mov	r1, r6
   1a4b4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a4b8:	e12fff13 	bx	r3
   1a4bc:	e59f200c 	ldr	r2, [pc, #12]	; 1a4d0 <CTransportLayer::SetOptionBroadcast(bool, int)+0x88>
   1a4c0:	e59f100c 	ldr	r1, [pc, #12]	; 1a4d4 <CTransportLayer::SetOptionBroadcast(bool, int)+0x8c>
   1a4c4:	e59f000c 	ldr	r0, [pc, #12]	; 1a4d8 <CTransportLayer::SetOptionBroadcast(bool, int)+0x90>
   1a4c8:	eb002899 	bl	24734 <assertion_failed>
   1a4cc:	0001a964 	.word	0x0001a964
   1a4d0:	0000017e 	.word	0x0000017e
   1a4d4:	00041d9c 	.word	0x00041d9c
   1a4d8:	00041df4 	.word	0x00041df4

0001a4dc <CTransportLayer::IsConnected(int) const>:
   1a4dc:	e92d4070 	push	{r4, r5, r6, lr}
   1a4e0:	e2515000 	subs	r5, r1, #0
   1a4e4:	ba000015 	blt	1a540 <CTransportLayer::IsConnected(int) const+0x64>
   1a4e8:	e2804008 	add	r4, r0, #8
   1a4ec:	e1a00004 	mov	r0, r4
   1a4f0:	eb0034af 	bl	277b4 <CPtrArray::GetCount() const>
   1a4f4:	e1500005 	cmp	r0, r5
   1a4f8:	ca000001 	bgt	1a504 <CTransportLayer::IsConnected(int) const+0x28>
   1a4fc:	e3a00000 	mov	r0, #0
   1a500:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a504:	e1a01005 	mov	r1, r5
   1a508:	e1a00004 	mov	r0, r4
   1a50c:	eb0034c6 	bl	2782c <CPtrArray::operator[](unsigned int) const>
   1a510:	e3500000 	cmp	r0, #0
   1a514:	0afffff8 	beq	1a4fc <CTransportLayer::IsConnected(int) const+0x20>
   1a518:	e1a01005 	mov	r1, r5
   1a51c:	e1a00004 	mov	r0, r4
   1a520:	eb0034c1 	bl	2782c <CPtrArray::operator[](unsigned int) const>
   1a524:	e5903000 	ldr	r3, [r0]
   1a528:	e59f2020 	ldr	r2, [pc, #32]	; 1a550 <CTransportLayer::IsConnected(int) const+0x74>
   1a52c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   1a530:	e1530002 	cmp	r3, r2
   1a534:	0afffff0 	beq	1a4fc <CTransportLayer::IsConnected(int) const+0x20>
   1a538:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a53c:	e12fff13 	bx	r3
   1a540:	e59f200c 	ldr	r2, [pc, #12]	; 1a554 <CTransportLayer::IsConnected(int) const+0x78>
   1a544:	e59f100c 	ldr	r1, [pc, #12]	; 1a558 <CTransportLayer::IsConnected(int) const+0x7c>
   1a548:	e59f000c 	ldr	r0, [pc, #12]	; 1a55c <CTransportLayer::IsConnected(int) const+0x80>
   1a54c:	eb002878 	bl	24734 <assertion_failed>
   1a550:	0001a96c 	.word	0x0001a96c
   1a554:	0000018a 	.word	0x0000018a
   1a558:	00041d9c 	.word	0x00041d9c
   1a55c:	00041df4 	.word	0x00041df4

0001a560 <CTransportLayer::GetForeignIP(int) const>:
   1a560:	e92d4070 	push	{r4, r5, r6, lr}
   1a564:	e2515000 	subs	r5, r1, #0
   1a568:	ba000010 	blt	1a5b0 <CTransportLayer::GetForeignIP(int) const+0x50>
   1a56c:	e2804008 	add	r4, r0, #8
   1a570:	e1a00004 	mov	r0, r4
   1a574:	eb00348e 	bl	277b4 <CPtrArray::GetCount() const>
   1a578:	e1500005 	cmp	r0, r5
   1a57c:	da000009 	ble	1a5a8 <CTransportLayer::GetForeignIP(int) const+0x48>
   1a580:	e1a01005 	mov	r1, r5
   1a584:	e1a00004 	mov	r0, r4
   1a588:	eb0034a7 	bl	2782c <CPtrArray::operator[](unsigned int) const>
   1a58c:	e3500000 	cmp	r0, #0
   1a590:	0a000004 	beq	1a5a8 <CTransportLayer::GetForeignIP(int) const+0x48>
   1a594:	e1a01005 	mov	r1, r5
   1a598:	e1a00004 	mov	r0, r4
   1a59c:	eb0034a2 	bl	2782c <CPtrArray::operator[](unsigned int) const>
   1a5a0:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a5a4:	ea000bed 	b	1d560 <CNetConnection::GetForeignIP() const>
   1a5a8:	e3a00000 	mov	r0, #0
   1a5ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a5b0:	e59f2008 	ldr	r2, [pc, #8]	; 1a5c0 <CTransportLayer::GetForeignIP(int) const+0x60>
   1a5b4:	e59f1008 	ldr	r1, [pc, #8]	; 1a5c4 <CTransportLayer::GetForeignIP(int) const+0x64>
   1a5b8:	e59f0008 	ldr	r0, [pc, #8]	; 1a5c8 <CTransportLayer::GetForeignIP(int) const+0x68>
   1a5bc:	eb00285c 	bl	24734 <assertion_failed>
   1a5c0:	00000196 	.word	0x00000196
   1a5c4:	00041d9c 	.word	0x00041d9c
   1a5c8:	00041df4 	.word	0x00041df4

0001a5cc <CTransportLayer::~CTransportLayer()>:
   1a5cc:	e3a03000 	mov	r3, #0
   1a5d0:	e92d4010 	push	{r4, lr}
   1a5d4:	e1a04000 	mov	r4, r0
   1a5d8:	e5803004 	str	r3, [r0, #4]
   1a5dc:	e4803020 	str	r3, [r0], #32
   1a5e0:	eb001881 	bl	207ec <CTCPRejector::~CTCPRejector()>
   1a5e4:	e2840008 	add	r0, r4, #8
   1a5e8:	eb003466 	bl	27788 <CPtrArray::~CPtrArray()>
   1a5ec:	e1a00004 	mov	r0, r4
   1a5f0:	e8bd8010 	pop	{r4, pc}

0001a5f4 <CTransportLayer::Process()>:
   1a5f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5f8:	e1a09000 	mov	r9, r0
   1a5fc:	e24dde67 	sub	sp, sp, #1648	; 0x670
   1a600:	e24dd004 	sub	sp, sp, #4
   1a604:	e28d0020 	add	r0, sp, #32
   1a608:	e28d7028 	add	r7, sp, #40	; 0x28
   1a60c:	eb0019a6 	bl	20cac <CIPAddress::CIPAddress()>
   1a610:	e1a00007 	mov	r0, r7
   1a614:	eb0019a4 	bl	20cac <CIPAddress::CIPAddress()>
   1a618:	e5990004 	ldr	r0, [r9, #4]
   1a61c:	e3500000 	cmp	r0, #0
   1a620:	0a0000b8 	beq	1a908 <CTransportLayer::Process()+0x314>
   1a624:	e2894008 	add	r4, r9, #8
   1a628:	e28da01c 	add	sl, sp, #28
   1a62c:	e2896020 	add	r6, r9, #32
   1a630:	e88d0480 	stm	sp, {r7, sl}
   1a634:	e28d3020 	add	r3, sp, #32
   1a638:	e28d2018 	add	r2, sp, #24
   1a63c:	e28d1030 	add	r1, sp, #48	; 0x30
   1a640:	eb000255 	bl	1af9c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>
   1a644:	e3500000 	cmp	r0, #0
   1a648:	0a000021 	beq	1a6d4 <CTransportLayer::Process()+0xe0>
   1a64c:	e3a05000 	mov	r5, #0
   1a650:	ea000015 	b	1a6ac <CTransportLayer::Process()+0xb8>
   1a654:	e1a01005 	mov	r1, r5
   1a658:	e1a00004 	mov	r0, r4
   1a65c:	eb003456 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a660:	e5903000 	ldr	r3, [r0]
   1a664:	e3530000 	cmp	r3, #0
   1a668:	0a00000e 	beq	1a6a8 <CTransportLayer::Process()+0xb4>
   1a66c:	e1a01005 	mov	r1, r5
   1a670:	e1a00004 	mov	r0, r4
   1a674:	eb003450 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a678:	e5900000 	ldr	r0, [r0]
   1a67c:	e59d201c 	ldr	r2, [sp, #28]
   1a680:	e5903000 	ldr	r3, [r0]
   1a684:	e58d2004 	str	r2, [sp, #4]
   1a688:	e58d7000 	str	r7, [sp]
   1a68c:	e5938034 	ldr	r8, [r3, #52]	; 0x34
   1a690:	e59d2018 	ldr	r2, [sp, #24]
   1a694:	e28d3020 	add	r3, sp, #32
   1a698:	e28d1030 	add	r1, sp, #48	; 0x30
   1a69c:	e12fff38 	blx	r8
   1a6a0:	e3500000 	cmp	r0, #0
   1a6a4:	1a000004 	bne	1a6bc <CTransportLayer::Process()+0xc8>
   1a6a8:	e2855001 	add	r5, r5, #1
   1a6ac:	e1a00004 	mov	r0, r4
   1a6b0:	eb00343f 	bl	277b4 <CPtrArray::GetCount() const>
   1a6b4:	e1500005 	cmp	r0, r5
   1a6b8:	8affffe5 	bhi	1a654 <CTransportLayer::Process()+0x60>
   1a6bc:	e1a00004 	mov	r0, r4
   1a6c0:	eb00343b 	bl	277b4 <CPtrArray::GetCount() const>
   1a6c4:	e1500005 	cmp	r0, r5
   1a6c8:	9a00006e 	bls	1a888 <CTransportLayer::Process()+0x294>
   1a6cc:	e5990004 	ldr	r0, [r9, #4]
   1a6d0:	eaffffd6 	b	1a630 <CTransportLayer::Process()+0x3c>
   1a6d4:	e59f823c 	ldr	r8, [pc, #572]	; 1a918 <CTransportLayer::Process()+0x324>
   1a6d8:	e28db016 	add	fp, sp, #22
   1a6dc:	e28d3014 	add	r3, sp, #20
   1a6e0:	e58d3000 	str	r3, [sp]
   1a6e4:	e58da008 	str	sl, [sp, #8]
   1a6e8:	e58db004 	str	fp, [sp, #4]
   1a6ec:	e1a03007 	mov	r3, r7
   1a6f0:	e5990004 	ldr	r0, [r9, #4]
   1a6f4:	e28d2020 	add	r2, sp, #32
   1a6f8:	e28d1013 	add	r1, sp, #19
   1a6fc:	eb00026d 	bl	1b0b8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>
   1a700:	e3500000 	cmp	r0, #0
   1a704:	0a000021 	beq	1a790 <CTransportLayer::Process()+0x19c>
   1a708:	e3a05000 	mov	r5, #0
   1a70c:	ea000000 	b	1a714 <CTransportLayer::Process()+0x120>
   1a710:	e2855001 	add	r5, r5, #1
   1a714:	e1a00004 	mov	r0, r4
   1a718:	eb003425 	bl	277b4 <CPtrArray::GetCount() const>
   1a71c:	e1500005 	cmp	r0, r5
   1a720:	9affffed 	bls	1a6dc <CTransportLayer::Process()+0xe8>
   1a724:	e1a01005 	mov	r1, r5
   1a728:	e1a00004 	mov	r0, r4
   1a72c:	eb003422 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a730:	e5903000 	ldr	r3, [r0]
   1a734:	e3530000 	cmp	r3, #0
   1a738:	0afffff4 	beq	1a710 <CTransportLayer::Process()+0x11c>
   1a73c:	e1a01005 	mov	r1, r5
   1a740:	e1a00004 	mov	r0, r4
   1a744:	eb00341c 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a748:	e5900000 	ldr	r0, [r0]
   1a74c:	e5903000 	ldr	r3, [r0]
   1a750:	e5936038 	ldr	r6, [r3, #56]	; 0x38
   1a754:	e1560008 	cmp	r6, r8
   1a758:	0affffec 	beq	1a710 <CTransportLayer::Process()+0x11c>
   1a75c:	e59d101c 	ldr	r1, [sp, #28]
   1a760:	e1dd21b6 	ldrh	r2, [sp, #22]
   1a764:	e1dd31b4 	ldrh	r3, [sp, #20]
   1a768:	e58d1008 	str	r1, [sp, #8]
   1a76c:	e58d2004 	str	r2, [sp, #4]
   1a770:	e58d3000 	str	r3, [sp]
   1a774:	e5dd1013 	ldrb	r1, [sp, #19]
   1a778:	e1a03007 	mov	r3, r7
   1a77c:	e28d2020 	add	r2, sp, #32
   1a780:	e12fff36 	blx	r6
   1a784:	e3500000 	cmp	r0, #0
   1a788:	0affffe0 	beq	1a710 <CTransportLayer::Process()+0x11c>
   1a78c:	eaffffd2 	b	1a6dc <CTransportLayer::Process()+0xe8>
   1a790:	e1a05000 	mov	r5, r0
   1a794:	e1a0a000 	mov	sl, r0
   1a798:	e59f617c 	ldr	r6, [pc, #380]	; 1a91c <CTransportLayer::Process()+0x328>
   1a79c:	e59f817c 	ldr	r8, [pc, #380]	; 1a920 <CTransportLayer::Process()+0x32c>
   1a7a0:	ea000016 	b	1a800 <CTransportLayer::Process()+0x20c>
   1a7a4:	e1a01005 	mov	r1, r5
   1a7a8:	e1a00004 	mov	r0, r4
   1a7ac:	eb003402 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a7b0:	e5903000 	ldr	r3, [r0]
   1a7b4:	e3530000 	cmp	r3, #0
   1a7b8:	0a00000f 	beq	1a7fc <CTransportLayer::Process()+0x208>
   1a7bc:	e1a01005 	mov	r1, r5
   1a7c0:	e1a00004 	mov	r0, r4
   1a7c4:	eb0033fc 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a7c8:	e5900000 	ldr	r0, [r0]
   1a7cc:	e5903000 	ldr	r3, [r0]
   1a7d0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1a7d4:	e1530006 	cmp	r3, r6
   1a7d8:	1a000033 	bne	1a8ac <CTransportLayer::Process()+0x2b8>
   1a7dc:	e1a01005 	mov	r1, r5
   1a7e0:	e1a00004 	mov	r0, r4
   1a7e4:	eb0033f4 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a7e8:	e5900000 	ldr	r0, [r0]
   1a7ec:	e5903000 	ldr	r3, [r0]
   1a7f0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   1a7f4:	e1530008 	cmp	r3, r8
   1a7f8:	1a00003c 	bne	1a8f0 <CTransportLayer::Process()+0x2fc>
   1a7fc:	e2855001 	add	r5, r5, #1
   1a800:	e1a00004 	mov	r0, r4
   1a804:	eb0033ea 	bl	277b4 <CPtrArray::GetCount() const>
   1a808:	e1500005 	cmp	r0, r5
   1a80c:	8affffe4 	bhi	1a7a4 <CTransportLayer::Process()+0x1b0>
   1a810:	e599001c 	ldr	r0, [r9, #28]
   1a814:	e3500000 	cmp	r0, #0
   1a818:	1a000038 	bne	1a900 <CTransportLayer::Process()+0x30c>
   1a81c:	e1a00004 	mov	r0, r4
   1a820:	eb0033e3 	bl	277b4 <CPtrArray::GetCount() const>
   1a824:	e3500000 	cmp	r0, #0
   1a828:	e2405001 	sub	r5, r0, #1
   1a82c:	1a000005 	bne	1a848 <CTransportLayer::Process()+0x254>
   1a830:	ea00000a 	b	1a860 <CTransportLayer::Process()+0x26c>
   1a834:	e1a00004 	mov	r0, r4
   1a838:	e2455001 	sub	r5, r5, #1
   1a83c:	eb003454 	bl	27994 <CPtrArray::RemoveLast()>
   1a840:	e3750001 	cmn	r5, #1
   1a844:	0a000005 	beq	1a860 <CTransportLayer::Process()+0x26c>
   1a848:	e1a01005 	mov	r1, r5
   1a84c:	e1a00004 	mov	r0, r4
   1a850:	eb0033d9 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a854:	e5903000 	ldr	r3, [r0]
   1a858:	e3530000 	cmp	r3, #0
   1a85c:	0afffff4 	beq	1a834 <CTransportLayer::Process()+0x240>
   1a860:	e599301c 	ldr	r3, [r9, #28]
   1a864:	e3530000 	cmp	r3, #0
   1a868:	1a000022 	bne	1a8f8 <CTransportLayer::Process()+0x304>
   1a86c:	e1a00007 	mov	r0, r7
   1a870:	eb001923 	bl	20d04 <CIPAddress::~CIPAddress()>
   1a874:	e28d0020 	add	r0, sp, #32
   1a878:	eb001921 	bl	20d04 <CIPAddress::~CIPAddress()>
   1a87c:	e28dde67 	add	sp, sp, #1648	; 0x670
   1a880:	e28dd004 	add	sp, sp, #4
   1a884:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a888:	e59d301c 	ldr	r3, [sp, #28]
   1a88c:	e1a00006 	mov	r0, r6
   1a890:	e58d3004 	str	r3, [sp, #4]
   1a894:	e59d2018 	ldr	r2, [sp, #24]
   1a898:	e58d7000 	str	r7, [sp]
   1a89c:	e28d3020 	add	r3, sp, #32
   1a8a0:	e28d1030 	add	r1, sp, #48	; 0x30
   1a8a4:	eb001823 	bl	20938 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>
   1a8a8:	eaffff87 	b	1a6cc <CTransportLayer::Process()+0xd8>
   1a8ac:	e12fff33 	blx	r3
   1a8b0:	e3500000 	cmp	r0, #0
   1a8b4:	0affffc8 	beq	1a7dc <CTransportLayer::Process()+0x1e8>
   1a8b8:	e1a01005 	mov	r1, r5
   1a8bc:	e1a00004 	mov	r0, r4
   1a8c0:	eb0033bd 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a8c4:	e5900000 	ldr	r0, [r0]
   1a8c8:	e3500000 	cmp	r0, #0
   1a8cc:	0a000002 	beq	1a8dc <CTransportLayer::Process()+0x2e8>
   1a8d0:	e5903000 	ldr	r3, [r0]
   1a8d4:	e5933004 	ldr	r3, [r3, #4]
   1a8d8:	e12fff33 	blx	r3
   1a8dc:	e1a01005 	mov	r1, r5
   1a8e0:	e1a00004 	mov	r0, r4
   1a8e4:	eb0033b4 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1a8e8:	e580a000 	str	sl, [r0]
   1a8ec:	eaffffc2 	b	1a7fc <CTransportLayer::Process()+0x208>
   1a8f0:	e12fff33 	blx	r3
   1a8f4:	eaffffc0 	b	1a7fc <CTransportLayer::Process()+0x208>
   1a8f8:	eb0044eb 	bl	2bcac <LeaveCritical>
   1a8fc:	eaffffda 	b	1a86c <CTransportLayer::Process()+0x278>
   1a900:	eb0044bf 	bl	2bc04 <EnterCritical>
   1a904:	eaffffc4 	b	1a81c <CTransportLayer::Process()+0x228>
   1a908:	e3a0203a 	mov	r2, #58	; 0x3a
   1a90c:	e59f1010 	ldr	r1, [pc, #16]	; 1a924 <CTransportLayer::Process()+0x330>
   1a910:	e59f0010 	ldr	r0, [pc, #16]	; 1a928 <CTransportLayer::Process()+0x334>
   1a914:	eb002786 	bl	24734 <assertion_failed>
   1a918:	0001a980 	.word	0x0001a980
   1a91c:	0001a974 	.word	0x0001a974
   1a920:	0001a97c 	.word	0x0001a97c
   1a924:	00041d9c 	.word	0x00041d9c
   1a928:	00041dc4 	.word	0x00041dc4

0001a92c <CTCPRejector::Connect()>:
   1a92c:	e3e00000 	mvn	r0, #0
   1a930:	e12fff1e 	bx	lr

0001a934 <CTCPRejector::Accept(CIPAddress*, unsigned short*)>:
   1a934:	e3e00000 	mvn	r0, #0
   1a938:	e12fff1e 	bx	lr

0001a93c <CTCPRejector::Close()>:
   1a93c:	e3e00000 	mvn	r0, #0
   1a940:	e12fff1e 	bx	lr

0001a944 <CTCPRejector::Send(void const*, unsigned int, int)>:
   1a944:	e3e00000 	mvn	r0, #0
   1a948:	e12fff1e 	bx	lr

0001a94c <CTCPRejector::Receive(void*, int)>:
   1a94c:	e3e00000 	mvn	r0, #0
   1a950:	e12fff1e 	bx	lr

0001a954 <CTCPRejector::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1a954:	e3e00000 	mvn	r0, #0
   1a958:	e12fff1e 	bx	lr

0001a95c <CTCPRejector::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1a95c:	e3e00000 	mvn	r0, #0
   1a960:	e12fff1e 	bx	lr

0001a964 <CTCPRejector::SetOptionBroadcast(bool)>:
   1a964:	e3e00000 	mvn	r0, #0
   1a968:	e12fff1e 	bx	lr

0001a96c <CTCPRejector::IsConnected() const>:
   1a96c:	e3a00000 	mov	r0, #0
   1a970:	e12fff1e 	bx	lr

0001a974 <CTCPRejector::IsTerminated() const>:
   1a974:	e3a00000 	mov	r0, #0
   1a978:	e12fff1e 	bx	lr

0001a97c <CTCPRejector::Process()>:
   1a97c:	e12fff1e 	bx	lr

0001a980 <CTCPRejector::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1a980:	e3a00000 	mov	r0, #0
   1a984:	e12fff1e 	bx	lr

0001a988 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]>:
   1a988:	e92d4010 	push	{r4, lr}
   1a98c:	e59f2008 	ldr	r2, [pc, #8]	; 1a99c <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]+0x14>
   1a990:	e59f1008 	ldr	r1, [pc, #8]	; 1a9a0 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]+0x18>
   1a994:	e59f0008 	ldr	r0, [pc, #8]	; 1a9a4 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]+0x1c>
   1a998:	eb002765 	bl	24734 <assertion_failed>
   1a99c:	0000012b 	.word	0x0000012b
   1a9a0:	00041e44 	.word	0x00041e44
   1a9a4:	00041e58 	.word	0x00041e58

0001a9a8 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>:
   1a9a8:	e3a03000 	mov	r3, #0
   1a9ac:	e92d4010 	push	{r4, lr}
   1a9b0:	e1a04000 	mov	r4, r0
   1a9b4:	e880000e 	stm	r0, {r1, r2, r3}
   1a9b8:	e280000c 	add	r0, r0, #12
   1a9bc:	eb001a07 	bl	211e0 <CNetQueue::CNetQueue()>
   1a9c0:	e2840018 	add	r0, r4, #24
   1a9c4:	eb001a05 	bl	211e0 <CNetQueue::CNetQueue()>
   1a9c8:	e2840024 	add	r0, r4, #36	; 0x24
   1a9cc:	eb001a03 	bl	211e0 <CNetQueue::CNetQueue()>
   1a9d0:	e2840030 	add	r0, r4, #48	; 0x30
   1a9d4:	eb0009f1 	bl	1d1a0 <CRouteCache::CRouteCache()>
   1a9d8:	e5943000 	ldr	r3, [r4]
   1a9dc:	e3530000 	cmp	r3, #0
   1a9e0:	0a000004 	beq	1a9f8 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x50>
   1a9e4:	e5943004 	ldr	r3, [r4, #4]
   1a9e8:	e3530000 	cmp	r3, #0
   1a9ec:	0a000005 	beq	1aa08 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x60>
   1a9f0:	e1a00004 	mov	r0, r4
   1a9f4:	e8bd8010 	pop	{r4, pc}
   1a9f8:	e3a0201f 	mov	r2, #31
   1a9fc:	e59f1014 	ldr	r1, [pc, #20]	; 1aa18 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x70>
   1aa00:	e59f0014 	ldr	r0, [pc, #20]	; 1aa1c <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x74>
   1aa04:	eb00274a 	bl	24734 <assertion_failed>
   1aa08:	e3a02020 	mov	r2, #32
   1aa0c:	e59f1004 	ldr	r1, [pc, #4]	; 1aa18 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x70>
   1aa10:	e59f0008 	ldr	r0, [pc, #8]	; 1aa20 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x78>
   1aa14:	eb002746 	bl	24734 <assertion_failed>
   1aa18:	00041e44 	.word	0x00041e44
   1aa1c:	00041db0 	.word	0x00041db0
   1aa20:	00041e6c 	.word	0x00041e6c

0001aa24 <CNetworkLayer::~CNetworkLayer()>:
   1aa24:	e92d4070 	push	{r4, r5, r6, lr}
   1aa28:	e5905008 	ldr	r5, [r0, #8]
   1aa2c:	e1a04000 	mov	r4, r0
   1aa30:	e3550000 	cmp	r5, #0
   1aa34:	0a000004 	beq	1aa4c <CNetworkLayer::~CNetworkLayer()+0x28>
   1aa38:	e1a00005 	mov	r0, r5
   1aa3c:	eb00083a 	bl	1cb2c <CICMPHandler::~CICMPHandler()>
   1aa40:	e1a00005 	mov	r0, r5
   1aa44:	e3a01010 	mov	r1, #16
   1aa48:	eb00414e 	bl	2af88 <operator delete(void*, unsigned int)>
   1aa4c:	e3a03000 	mov	r3, #0
   1aa50:	e1a00004 	mov	r0, r4
   1aa54:	e5843008 	str	r3, [r4, #8]
   1aa58:	e5843004 	str	r3, [r4, #4]
   1aa5c:	e4803030 	str	r3, [r0], #48	; 0x30
   1aa60:	eb0009e9 	bl	1d20c <CRouteCache::~CRouteCache()>
   1aa64:	e2840024 	add	r0, r4, #36	; 0x24
   1aa68:	eb001a14 	bl	212c0 <CNetQueue::~CNetQueue()>
   1aa6c:	e2840018 	add	r0, r4, #24
   1aa70:	eb001a12 	bl	212c0 <CNetQueue::~CNetQueue()>
   1aa74:	e284000c 	add	r0, r4, #12
   1aa78:	eb001a10 	bl	212c0 <CNetQueue::~CNetQueue()>
   1aa7c:	e1a00004 	mov	r0, r4
   1aa80:	e8bd8070 	pop	{r4, r5, r6, pc}

0001aa84 <CNetworkLayer::Initialize()>:
   1aa84:	e92d4030 	push	{r4, r5, lr}
   1aa88:	e5903008 	ldr	r3, [r0, #8]
   1aa8c:	e24dd00c 	sub	sp, sp, #12
   1aa90:	e3530000 	cmp	r3, #0
   1aa94:	1a00000d 	bne	1aad0 <CNetworkLayer::Initialize()+0x4c>
   1aa98:	e1a04000 	mov	r4, r0
   1aa9c:	e3a00010 	mov	r0, #16
   1aaa0:	eb00412a 	bl	2af50 <operator new(unsigned int)>
   1aaa4:	e1a02004 	mov	r2, r4
   1aaa8:	e4921024 	ldr	r1, [r2], #36	; 0x24
   1aaac:	e2843018 	add	r3, r4, #24
   1aab0:	e58d2000 	str	r2, [sp]
   1aab4:	e1a02004 	mov	r2, r4
   1aab8:	e1a05000 	mov	r5, r0
   1aabc:	eb0007fa 	bl	1caac <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>
   1aac0:	e3a00001 	mov	r0, #1
   1aac4:	e5845008 	str	r5, [r4, #8]
   1aac8:	e28dd00c 	add	sp, sp, #12
   1aacc:	e8bd8030 	pop	{r4, r5, pc}
   1aad0:	e3a0202e 	mov	r2, #46	; 0x2e
   1aad4:	e59f1004 	ldr	r1, [pc, #4]	; 1aae0 <CNetworkLayer::Initialize()+0x5c>
   1aad8:	e59f0004 	ldr	r0, [pc, #4]	; 1aae4 <CNetworkLayer::Initialize()+0x60>
   1aadc:	eb002714 	bl	24734 <assertion_failed>
   1aae0:	00041e44 	.word	0x00041e44
   1aae4:	00041e80 	.word	0x00041e80

0001aae8 <CNetworkLayer::Process()>:
   1aae8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1aaec:	e1a05000 	mov	r5, r0
   1aaf0:	e5900000 	ldr	r0, [r0]
   1aaf4:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1aaf8:	e3500000 	cmp	r0, #0
   1aafc:	0a000052 	beq	1ac4c <CNetworkLayer::Process()+0x164>
   1ab00:	eb00180e 	bl	20b40 <CNetConfig::GetIPAddress() const>
   1ab04:	e2506000 	subs	r6, r0, #0
   1ab08:	0a000053 	beq	1ac5c <CNetworkLayer::Process()+0x174>
   1ab0c:	e5950004 	ldr	r0, [r5, #4]
   1ab10:	e3500000 	cmp	r0, #0
   1ab14:	0a000054 	beq	1ac6c <CNetworkLayer::Process()+0x184>
   1ab18:	e28d7008 	add	r7, sp, #8
   1ab1c:	ea000014 	b	1ab74 <CNetworkLayer::Process()+0x8c>
   1ab20:	e59d3004 	ldr	r3, [sp, #4]
   1ab24:	e3530014 	cmp	r3, #20
   1ab28:	9a000010 	bls	1ab70 <CNetworkLayer::Process()+0x88>
   1ab2c:	e5dd1010 	ldrb	r1, [sp, #16]
   1ab30:	e201100f 	and	r1, r1, #15
   1ab34:	e2412005 	sub	r2, r1, #5
   1ab38:	e3520001 	cmp	r2, #1
   1ab3c:	8a00000b 	bhi	1ab70 <CNetworkLayer::Process()+0x88>
   1ab40:	e1530101 	cmp	r3, r1, lsl #2
   1ab44:	e1a04101 	lsl	r4, r1, #2
   1ab48:	9a000008 	bls	1ab70 <CNetworkLayer::Process()+0x88>
   1ab4c:	e1a01004 	mov	r1, r4
   1ab50:	e28d0010 	add	r0, sp, #16
   1ab54:	eb001ae7 	bl	216f8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1ab58:	e3500000 	cmp	r0, #0
   1ab5c:	1a000003 	bne	1ab70 <CNetworkLayer::Process()+0x88>
   1ab60:	e5dd3010 	ldrb	r3, [sp, #16]
   1ab64:	e1a03243 	asr	r3, r3, #4
   1ab68:	e3530004 	cmp	r3, #4
   1ab6c:	0a00000b 	beq	1aba0 <CNetworkLayer::Process()+0xb8>
   1ab70:	e5950004 	ldr	r0, [r5, #4]
   1ab74:	e28d2004 	add	r2, sp, #4
   1ab78:	e28d1010 	add	r1, sp, #16
   1ab7c:	eb000307 	bl	1b7a0 <CLinkLayer::Receive(void*, unsigned int*)>
   1ab80:	e3500000 	cmp	r0, #0
   1ab84:	1affffe5 	bne	1ab20 <CNetworkLayer::Process()+0x38>
   1ab88:	e5950008 	ldr	r0, [r5, #8]
   1ab8c:	e3500000 	cmp	r0, #0
   1ab90:	0a000039 	beq	1ac7c <CNetworkLayer::Process()+0x194>
   1ab94:	eb000823 	bl	1cc28 <CICMPHandler::Process()>
   1ab98:	e28dde65 	add	sp, sp, #1616	; 0x650
   1ab9c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1aba0:	e28d1020 	add	r1, sp, #32
   1aba4:	e1a00007 	mov	r0, r7
   1aba8:	eb0018d6 	bl	20f08 <CIPAddress::CIPAddress(unsigned char const*)>
   1abac:	e1a00006 	mov	r0, r6
   1abb0:	eb00191c 	bl	21028 <CIPAddress::IsNull() const>
   1abb4:	e3500000 	cmp	r0, #0
   1abb8:	0a000013 	beq	1ac0c <CNetworkLayer::Process()+0x124>
   1abbc:	e1a00007 	mov	r0, r7
   1abc0:	eb001926 	bl	21060 <CIPAddress::IsBroadcast() const>
   1abc4:	e3500000 	cmp	r0, #0
   1abc8:	0a00000c 	beq	1ac00 <CNetworkLayer::Process()+0x118>
   1abcc:	e1dd31b6 	ldrh	r3, [sp, #22]
   1abd0:	e3130020 	tst	r3, #32
   1abd4:	1a000009 	bne	1ac00 <CNetworkLayer::Process()+0x118>
   1abd8:	e6bf3fb3 	rev16	r3, r3
   1abdc:	e2033c1f 	and	r3, r3, #7936	; 0x1f00
   1abe0:	e3530000 	cmp	r3, #0
   1abe4:	1a000005 	bne	1ac00 <CNetworkLayer::Process()+0x118>
   1abe8:	e1dd31b2 	ldrh	r3, [sp, #18]
   1abec:	e59d2004 	ldr	r2, [sp, #4]
   1abf0:	e6bf3fb3 	rev16	r3, r3
   1abf4:	e6ff3073 	uxth	r3, r3
   1abf8:	e1520003 	cmp	r2, r3
   1abfc:	2a000022 	bcs	1ac8c <CNetworkLayer::Process()+0x1a4>
   1ac00:	e1a00007 	mov	r0, r7
   1ac04:	eb00183e 	bl	20d04 <CIPAddress::~CIPAddress()>
   1ac08:	eaffffd8 	b	1ab70 <CNetworkLayer::Process()+0x88>
   1ac0c:	e1a01007 	mov	r1, r7
   1ac10:	e1a00006 	mov	r0, r6
   1ac14:	eb001853 	bl	20d68 <CIPAddress::operator!=(CIPAddress const&) const>
   1ac18:	e3500000 	cmp	r0, #0
   1ac1c:	0affffea 	beq	1abcc <CNetworkLayer::Process()+0xe4>
   1ac20:	e1a00007 	mov	r0, r7
   1ac24:	eb00190d 	bl	21060 <CIPAddress::IsBroadcast() const>
   1ac28:	e3500000 	cmp	r0, #0
   1ac2c:	1affffe6 	bne	1abcc <CNetworkLayer::Process()+0xe4>
   1ac30:	e5950000 	ldr	r0, [r5]
   1ac34:	eb0017cb 	bl	20b68 <CNetConfig::GetBroadcastAddress() const>
   1ac38:	e1a01007 	mov	r1, r7
   1ac3c:	eb001849 	bl	20d68 <CIPAddress::operator!=(CIPAddress const&) const>
   1ac40:	e3500000 	cmp	r0, #0
   1ac44:	0affffe0 	beq	1abcc <CNetworkLayer::Process()+0xe4>
   1ac48:	eaffffec 	b	1ac00 <CNetworkLayer::Process()+0x118>
   1ac4c:	e3a02037 	mov	r2, #55	; 0x37
   1ac50:	e59f1098 	ldr	r1, [pc, #152]	; 1acf0 <CNetworkLayer::Process()+0x208>
   1ac54:	e59f0098 	ldr	r0, [pc, #152]	; 1acf4 <CNetworkLayer::Process()+0x20c>
   1ac58:	eb0026b5 	bl	24734 <assertion_failed>
   1ac5c:	e3a02039 	mov	r2, #57	; 0x39
   1ac60:	e59f1088 	ldr	r1, [pc, #136]	; 1acf0 <CNetworkLayer::Process()+0x208>
   1ac64:	e59f008c 	ldr	r0, [pc, #140]	; 1acf8 <CNetworkLayer::Process()+0x210>
   1ac68:	eb0026b1 	bl	24734 <assertion_failed>
   1ac6c:	e3a0203d 	mov	r2, #61	; 0x3d
   1ac70:	e59f1078 	ldr	r1, [pc, #120]	; 1acf0 <CNetworkLayer::Process()+0x208>
   1ac74:	e59f0080 	ldr	r0, [pc, #128]	; 1acfc <CNetworkLayer::Process()+0x214>
   1ac78:	eb0026ad 	bl	24734 <assertion_failed>
   1ac7c:	e3a0208a 	mov	r2, #138	; 0x8a
   1ac80:	e59f1068 	ldr	r1, [pc, #104]	; 1acf0 <CNetworkLayer::Process()+0x208>
   1ac84:	e59f0074 	ldr	r0, [pc, #116]	; 1ad00 <CNetworkLayer::Process()+0x218>
   1ac88:	eb0026a9 	bl	24734 <assertion_failed>
   1ac8c:	e3a00009 	mov	r0, #9
   1ac90:	e58d3004 	str	r3, [sp, #4]
   1ac94:	eb0040ad 	bl	2af50 <operator new(unsigned int)>
   1ac98:	e1a08000 	mov	r8, r0
   1ac9c:	e5dd3019 	ldrb	r3, [sp, #25]
   1aca0:	e28d101c 	add	r1, sp, #28
   1aca4:	e4c03001 	strb	r3, [r0], #1
   1aca8:	e3a02004 	mov	r2, #4
   1acac:	eb003ec1 	bl	2a7b8 <memcpy>
   1acb0:	e28d1020 	add	r1, sp, #32
   1acb4:	e3a02004 	mov	r2, #4
   1acb8:	e2880005 	add	r0, r8, #5
   1acbc:	eb003ebd 	bl	2a7b8 <memcpy>
   1acc0:	e5dd3019 	ldrb	r3, [sp, #25]
   1acc4:	e59d2004 	ldr	r2, [sp, #4]
   1acc8:	e3530001 	cmp	r3, #1
   1accc:	e28d1010 	add	r1, sp, #16
   1acd0:	e0422004 	sub	r2, r2, r4
   1acd4:	e1a03008 	mov	r3, r8
   1acd8:	e0811004 	add	r1, r1, r4
   1acdc:	02850018 	addeq	r0, r5, #24
   1ace0:	1285000c 	addne	r0, r5, #12
   1ace4:	e58d2004 	str	r2, [sp, #4]
   1ace8:	eb001979 	bl	212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1acec:	eaffffc3 	b	1ac00 <CNetworkLayer::Process()+0x118>
   1acf0:	00041e44 	.word	0x00041e44
   1acf4:	00041db0 	.word	0x00041db0
   1acf8:	00041e94 	.word	0x00041e94
   1acfc:	00041e6c 	.word	0x00041e6c
   1ad00:	00041e58 	.word	0x00041e58

0001ad04 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>:
   1ad04:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad08:	e1a04003 	mov	r4, r3
   1ad0c:	ed2d8b02 	vpush	{d8}
   1ad10:	e59f3268 	ldr	r3, [pc, #616]	; 1af80 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x27c>
   1ad14:	e244c001 	sub	ip, r4, #1
   1ad18:	e28db028 	add	fp, sp, #40	; 0x28
   1ad1c:	e15c0003 	cmp	ip, r3
   1ad20:	e24dd00c 	sub	sp, sp, #12
   1ad24:	8a000052 	bhi	1ae74 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x170>
   1ad28:	e1a09002 	mov	r9, r2
   1ad2c:	e284201b 	add	r2, r4, #27
   1ad30:	e59b3004 	ldr	r3, [fp, #4]
   1ad34:	e3c22007 	bic	r2, r2, #7
   1ad38:	e04dd002 	sub	sp, sp, r2
   1ad3c:	e3a0a000 	mov	sl, #0
   1ad40:	e3a0c040 	mov	ip, #64	; 0x40
   1ad44:	e3a07045 	mov	r7, #69	; 0x45
   1ad48:	e5cd3009 	strb	r3, [sp, #9]
   1ad4c:	e1a0300d 	mov	r3, sp
   1ad50:	e2848014 	add	r8, r4, #20
   1ad54:	e6bfefb8 	rev16	lr, r8
   1ad58:	e1a06000 	mov	r6, r0
   1ad5c:	e5900000 	ldr	r0, [r0]
   1ad60:	e1a05001 	mov	r5, r1
   1ad64:	e6ff107e 	uxth	r1, lr
   1ad68:	e1a01421 	lsr	r1, r1, #8
   1ad6c:	e150000a 	cmp	r0, sl
   1ad70:	ee083a10 	vmov	s16, r3
   1ad74:	e5cd1003 	strb	r1, [sp, #3]
   1ad78:	e5cde002 	strb	lr, [sp, #2]
   1ad7c:	e5cd7000 	strb	r7, [sp]
   1ad80:	e5cda001 	strb	sl, [sp, #1]
   1ad84:	e5cda004 	strb	sl, [sp, #4]
   1ad88:	e5cda005 	strb	sl, [sp, #5]
   1ad8c:	e5cda007 	strb	sl, [sp, #7]
   1ad90:	e5cdc006 	strb	ip, [sp, #6]
   1ad94:	e5cdc008 	strb	ip, [sp, #8]
   1ad98:	0a000054 	beq	1aef0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1ec>
   1ad9c:	eb001767 	bl	20b40 <CNetConfig::GetIPAddress() const>
   1ada0:	e2507000 	subs	r7, r0, #0
   1ada4:	0a000055 	beq	1af00 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1fc>
   1ada8:	e28d100c 	add	r1, sp, #12
   1adac:	eb001886 	bl	20fcc <CIPAddress::CopyTo(unsigned char*) const>
   1adb0:	e1a00005 	mov	r0, r5
   1adb4:	e28d1010 	add	r1, sp, #16
   1adb8:	eb001883 	bl	20fcc <CIPAddress::CopyTo(unsigned char*) const>
   1adbc:	e3a01014 	mov	r1, #20
   1adc0:	e1a0000d 	mov	r0, sp
   1adc4:	e5cda00a 	strb	sl, [sp, #10]
   1adc8:	e5cda00b 	strb	sl, [sp, #11]
   1adcc:	eb001a49 	bl	216f8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1add0:	e3590000 	cmp	r9, #0
   1add4:	e1a02420 	lsr	r2, r0, #8
   1add8:	e5cd000a 	strb	r0, [sp, #10]
   1addc:	e5cd200b 	strb	r2, [sp, #11]
   1ade0:	0a000033 	beq	1aeb4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1b0>
   1ade4:	e1a02004 	mov	r2, r4
   1ade8:	e1a01009 	mov	r1, r9
   1adec:	e28d0014 	add	r0, sp, #20
   1adf0:	eb003e70 	bl	2a7b8 <memcpy>
   1adf4:	e1a00007 	mov	r0, r7
   1adf8:	eb00188a 	bl	21028 <CIPAddress::IsNull() const>
   1adfc:	e3500000 	cmp	r0, #0
   1ae00:	0a000003 	beq	1ae14 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x110>
   1ae04:	e1a00005 	mov	r0, r5
   1ae08:	eb001894 	bl	21060 <CIPAddress::IsBroadcast() const>
   1ae0c:	e2504000 	subs	r4, r0, #0
   1ae10:	0a00001c 	beq	1ae88 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x184>
   1ae14:	e24b0034 	sub	r0, fp, #52	; 0x34
   1ae18:	eb0017a3 	bl	20cac <CIPAddress::CIPAddress()>
   1ae1c:	e5960000 	ldr	r0, [r6]
   1ae20:	eb00174a 	bl	20b50 <CNetConfig::GetNetMask() const>
   1ae24:	e1a01005 	mov	r1, r5
   1ae28:	e1a02000 	mov	r2, r0
   1ae2c:	e1a00007 	mov	r0, r7
   1ae30:	eb0018bd 	bl	2112c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   1ae34:	e2504000 	subs	r4, r0, #0
   1ae38:	0a000021 	beq	1aec4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1c0>
   1ae3c:	e5960004 	ldr	r0, [r6, #4]
   1ae40:	e3500000 	cmp	r0, #0
   1ae44:	0a000031 	beq	1af10 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x20c>
   1ae48:	e1a03008 	mov	r3, r8
   1ae4c:	ee182a10 	vmov	r2, s16
   1ae50:	e1a01005 	mov	r1, r5
   1ae54:	eb0001e7 	bl	1b5f8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>
   1ae58:	e1a04000 	mov	r4, r0
   1ae5c:	e24b0034 	sub	r0, fp, #52	; 0x34
   1ae60:	eb0017a7 	bl	20d04 <CIPAddress::~CIPAddress()>
   1ae64:	e1a00004 	mov	r0, r4
   1ae68:	e24bd028 	sub	sp, fp, #40	; 0x28
   1ae6c:	ecbd8b02 	vpop	{d8}
   1ae70:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae74:	e3a04000 	mov	r4, #0
   1ae78:	e1a00004 	mov	r0, r4
   1ae7c:	e24bd028 	sub	sp, fp, #40	; 0x28
   1ae80:	ecbd8b02 	vpop	{d8}
   1ae84:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae88:	e5960008 	ldr	r0, [r6, #8]
   1ae8c:	e3500000 	cmp	r0, #0
   1ae90:	0a000039 	beq	1af7c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x278>
   1ae94:	e1a03008 	mov	r3, r8
   1ae98:	e1a0200d 	mov	r2, sp
   1ae9c:	e1a01004 	mov	r1, r4
   1aea0:	eb000856 	bl	1d000 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1aea4:	e1a00004 	mov	r0, r4
   1aea8:	e24bd028 	sub	sp, fp, #40	; 0x28
   1aeac:	ecbd8b02 	vpop	{d8}
   1aeb0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aeb4:	e3a020ad 	mov	r2, #173	; 0xad
   1aeb8:	e59f10c4 	ldr	r1, [pc, #196]	; 1af84 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x280>
   1aebc:	e59f00c4 	ldr	r0, [pc, #196]	; 1af88 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x284>
   1aec0:	eb00261b 	bl	24734 <assertion_failed>
   1aec4:	e1a00005 	mov	r0, r5
   1aec8:	eb001833 	bl	20f9c <CIPAddress::Get() const>
   1aecc:	e1a01000 	mov	r1, r0
   1aed0:	e2860030 	add	r0, r6, #48	; 0x30
   1aed4:	eb00090c 	bl	1d30c <CRouteCache::GetRoute(unsigned char const*) const>
   1aed8:	e2501000 	subs	r1, r0, #0
   1aedc:	0a00000f 	beq	1af20 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x21c>
   1aee0:	e24b0034 	sub	r0, fp, #52	; 0x34
   1aee4:	eb0017f7 	bl	20ec8 <CIPAddress::Set(unsigned char const*)>
   1aee8:	e24b5034 	sub	r5, fp, #52	; 0x34
   1aeec:	eaffffd2 	b	1ae3c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x138>
   1aef0:	e3a020a2 	mov	r2, #162	; 0xa2
   1aef4:	e59f1088 	ldr	r1, [pc, #136]	; 1af84 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x280>
   1aef8:	e59f008c 	ldr	r0, [pc, #140]	; 1af8c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x288>
   1aefc:	eb00260c 	bl	24734 <assertion_failed>
   1af00:	e3a020a4 	mov	r2, #164	; 0xa4
   1af04:	e59f1078 	ldr	r1, [pc, #120]	; 1af84 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x280>
   1af08:	e59f0080 	ldr	r0, [pc, #128]	; 1af90 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x28c>
   1af0c:	eb002608 	bl	24734 <assertion_failed>
   1af10:	e3a020d0 	mov	r2, #208	; 0xd0
   1af14:	e59f1068 	ldr	r1, [pc, #104]	; 1af84 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x280>
   1af18:	e59f0074 	ldr	r0, [pc, #116]	; 1af94 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x290>
   1af1c:	eb002604 	bl	24734 <assertion_failed>
   1af20:	e5960000 	ldr	r0, [r6]
   1af24:	eb00170b 	bl	20b58 <CNetConfig::GetDefaultGateway() const>
   1af28:	e1a05000 	mov	r5, r0
   1af2c:	eb00183d 	bl	21028 <CIPAddress::IsNull() const>
   1af30:	e3500000 	cmp	r0, #0
   1af34:	0a000007 	beq	1af58 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x254>
   1af38:	e5960008 	ldr	r0, [r6, #8]
   1af3c:	e3500000 	cmp	r0, #0
   1af40:	0a00000d 	beq	1af7c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x278>
   1af44:	e1a03008 	mov	r3, r8
   1af48:	ee182a10 	vmov	r2, s16
   1af4c:	e1a01004 	mov	r1, r4
   1af50:	eb00082a 	bl	1d000 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1af54:	eaffffc0 	b	1ae5c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x158>
   1af58:	e5960004 	ldr	r0, [r6, #4]
   1af5c:	e3500000 	cmp	r0, #0
   1af60:	0affffea 	beq	1af10 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x20c>
   1af64:	e3550000 	cmp	r5, #0
   1af68:	1affffb6 	bne	1ae48 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x144>
   1af6c:	e3a020d1 	mov	r2, #209	; 0xd1
   1af70:	e59f100c 	ldr	r1, [pc, #12]	; 1af84 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x280>
   1af74:	e59f001c 	ldr	r0, [pc, #28]	; 1af98 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x294>
   1af78:	eb0025ed 	bl	24734 <assertion_failed>
   1af7c:	ebfffe81 	bl	1a988 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]>
   1af80:	0000062b 	.word	0x0000062b
   1af84:	00041e44 	.word	0x00041e44
   1af88:	00041ea8 	.word	0x00041ea8
   1af8c:	00041db0 	.word	0x00041db0
   1af90:	00041e94 	.word	0x00041e94
   1af94:	00041e6c 	.word	0x00041e6c
   1af98:	00041eb8 	.word	0x00041eb8

0001af9c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>:
   1af9c:	e92d4030 	push	{r4, r5, lr}
   1afa0:	e3510000 	cmp	r1, #0
   1afa4:	e24dd00c 	sub	sp, sp, #12
   1afa8:	0a000027 	beq	1b04c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xb0>
   1afac:	e3520000 	cmp	r2, #0
   1afb0:	e1a04002 	mov	r4, r2
   1afb4:	0a000028 	beq	1b05c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xc0>
   1afb8:	e280000c 	add	r0, r0, #12
   1afbc:	e28d2004 	add	r2, sp, #4
   1afc0:	e1a05003 	mov	r5, r3
   1afc4:	eb001908 	bl	213ec <CNetQueue::Dequeue(void*, void**)>
   1afc8:	e3500000 	cmp	r0, #0
   1afcc:	e5840000 	str	r0, [r4]
   1afd0:	0a000017 	beq	1b034 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x98>
   1afd4:	e59d4004 	ldr	r4, [sp, #4]
   1afd8:	e3540000 	cmp	r4, #0
   1afdc:	0a000016 	beq	1b03c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xa0>
   1afe0:	e59d301c 	ldr	r3, [sp, #28]
   1afe4:	e3530000 	cmp	r3, #0
   1afe8:	0a00001f 	beq	1b06c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xd0>
   1afec:	e5d43000 	ldrb	r3, [r4]
   1aff0:	e59d201c 	ldr	r2, [sp, #28]
   1aff4:	e3550000 	cmp	r5, #0
   1aff8:	e5823000 	str	r3, [r2]
   1affc:	0a00001e 	beq	1b07c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xe0>
   1b000:	e1a00005 	mov	r0, r5
   1b004:	e2841001 	add	r1, r4, #1
   1b008:	eb0017ae 	bl	20ec8 <CIPAddress::Set(unsigned char const*)>
   1b00c:	e59d3018 	ldr	r3, [sp, #24]
   1b010:	e3530000 	cmp	r3, #0
   1b014:	0a00001c 	beq	1b08c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xf0>
   1b018:	e59d0018 	ldr	r0, [sp, #24]
   1b01c:	e2841005 	add	r1, r4, #5
   1b020:	eb0017a8 	bl	20ec8 <CIPAddress::Set(unsigned char const*)>
   1b024:	e1a00004 	mov	r0, r4
   1b028:	e3a01009 	mov	r1, #9
   1b02c:	eb003fd5 	bl	2af88 <operator delete(void*, unsigned int)>
   1b030:	e3a00001 	mov	r0, #1
   1b034:	e28dd00c 	add	sp, sp, #12
   1b038:	e8bd8030 	pop	{r4, r5, pc}
   1b03c:	e3a020e2 	mov	r2, #226	; 0xe2
   1b040:	e59f1054 	ldr	r1, [pc, #84]	; 1b09c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b044:	e59f0054 	ldr	r0, [pc, #84]	; 1b0a0 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x104>
   1b048:	eb0025b9 	bl	24734 <assertion_failed>
   1b04c:	e3a020d9 	mov	r2, #217	; 0xd9
   1b050:	e59f1044 	ldr	r1, [pc, #68]	; 1b09c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b054:	e59f0048 	ldr	r0, [pc, #72]	; 1b0a4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x108>
   1b058:	eb0025b5 	bl	24734 <assertion_failed>
   1b05c:	e3a020da 	mov	r2, #218	; 0xda
   1b060:	e59f1034 	ldr	r1, [pc, #52]	; 1b09c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b064:	e59f003c 	ldr	r0, [pc, #60]	; 1b0a8 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x10c>
   1b068:	eb0025b1 	bl	24734 <assertion_failed>
   1b06c:	e3a020e4 	mov	r2, #228	; 0xe4
   1b070:	e59f1024 	ldr	r1, [pc, #36]	; 1b09c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b074:	e59f0030 	ldr	r0, [pc, #48]	; 1b0ac <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x110>
   1b078:	eb0025ad 	bl	24734 <assertion_failed>
   1b07c:	e3a020e7 	mov	r2, #231	; 0xe7
   1b080:	e59f1014 	ldr	r1, [pc, #20]	; 1b09c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b084:	e59f0024 	ldr	r0, [pc, #36]	; 1b0b0 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x114>
   1b088:	eb0025a9 	bl	24734 <assertion_failed>
   1b08c:	e3a020ea 	mov	r2, #234	; 0xea
   1b090:	e59f1004 	ldr	r1, [pc, #4]	; 1b09c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b094:	e59f0018 	ldr	r0, [pc, #24]	; 1b0b4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x118>
   1b098:	eb0025a5 	bl	24734 <assertion_failed>
   1b09c:	00041e44 	.word	0x00041e44
   1b0a0:	00041e2c 	.word	0x00041e2c
   1b0a4:	0003ef40 	.word	0x0003ef40
   1b0a8:	0003f728 	.word	0x0003f728
   1b0ac:	00041ec8 	.word	0x00041ec8
   1b0b0:	00041ed8 	.word	0x00041ed8
   1b0b4:	00041ee8 	.word	0x00041ee8

0001b0b8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>:
   1b0b8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b0bc:	e24dd014 	sub	sp, sp, #20
   1b0c0:	e1a04001 	mov	r4, r1
   1b0c4:	e1a05002 	mov	r5, r2
   1b0c8:	e1a0100d 	mov	r1, sp
   1b0cc:	e3a02000 	mov	r2, #0
   1b0d0:	e2800024 	add	r0, r0, #36	; 0x24
   1b0d4:	e1a06003 	mov	r6, r3
   1b0d8:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   1b0dc:	eb0018c2 	bl	213ec <CNetQueue::Dequeue(void*, void**)>
   1b0e0:	e3500000 	cmp	r0, #0
   1b0e4:	0a000020 	beq	1b16c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xb4>
   1b0e8:	e350000e 	cmp	r0, #14
   1b0ec:	1a000024 	bne	1b184 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xcc>
   1b0f0:	e3540000 	cmp	r4, #0
   1b0f4:	0a000026 	beq	1b194 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xdc>
   1b0f8:	e5dd3000 	ldrb	r3, [sp]
   1b0fc:	e3570000 	cmp	r7, #0
   1b100:	e5c43000 	strb	r3, [r4]
   1b104:	0a00001a 	beq	1b174 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xbc>
   1b108:	e5dd3001 	ldrb	r3, [sp, #1]
   1b10c:	e3550000 	cmp	r5, #0
   1b110:	e5873000 	str	r3, [r7]
   1b114:	0a000022 	beq	1b1a4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xec>
   1b118:	e1a00005 	mov	r0, r5
   1b11c:	e28d1002 	add	r1, sp, #2
   1b120:	eb001768 	bl	20ec8 <CIPAddress::Set(unsigned char const*)>
   1b124:	e3560000 	cmp	r6, #0
   1b128:	0a000021 	beq	1b1b4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xfc>
   1b12c:	e1a00006 	mov	r0, r6
   1b130:	e28d1006 	add	r1, sp, #6
   1b134:	eb001763 	bl	20ec8 <CIPAddress::Set(unsigned char const*)>
   1b138:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1b13c:	e3530000 	cmp	r3, #0
   1b140:	0a00001f 	beq	1b1c4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x10c>
   1b144:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
   1b148:	e1dd30ba 	ldrh	r3, [sp, #10]
   1b14c:	e3520000 	cmp	r2, #0
   1b150:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1b154:	e1c230b0 	strh	r3, [r2]
   1b158:	0a00001d 	beq	1b1d4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x11c>
   1b15c:	e3a00001 	mov	r0, #1
   1b160:	e1dd30bc 	ldrh	r3, [sp, #12]
   1b164:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
   1b168:	e1c230b0 	strh	r3, [r2]
   1b16c:	e28dd014 	add	sp, sp, #20
   1b170:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1b174:	e59f2068 	ldr	r2, [pc, #104]	; 1b1e4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x12c>
   1b178:	e59f1068 	ldr	r1, [pc, #104]	; 1b1e8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b17c:	e59f0068 	ldr	r0, [pc, #104]	; 1b1ec <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x134>
   1b180:	eb00256b 	bl	24734 <assertion_failed>
   1b184:	e3a020fe 	mov	r2, #254	; 0xfe
   1b188:	e59f1058 	ldr	r1, [pc, #88]	; 1b1e8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b18c:	e59f005c 	ldr	r0, [pc, #92]	; 1b1f0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x138>
   1b190:	eb002567 	bl	24734 <assertion_failed>
   1b194:	e3a02c01 	mov	r2, #256	; 0x100
   1b198:	e59f1048 	ldr	r1, [pc, #72]	; 1b1e8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b19c:	e59f0050 	ldr	r0, [pc, #80]	; 1b1f4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x13c>
   1b1a0:	eb002563 	bl	24734 <assertion_failed>
   1b1a4:	e59f204c 	ldr	r2, [pc, #76]	; 1b1f8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x140>
   1b1a8:	e59f1038 	ldr	r1, [pc, #56]	; 1b1e8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b1ac:	e59f0048 	ldr	r0, [pc, #72]	; 1b1fc <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x144>
   1b1b0:	eb00255f 	bl	24734 <assertion_failed>
   1b1b4:	e59f2044 	ldr	r2, [pc, #68]	; 1b200 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x148>
   1b1b8:	e59f1028 	ldr	r1, [pc, #40]	; 1b1e8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b1bc:	e59f0040 	ldr	r0, [pc, #64]	; 1b204 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x14c>
   1b1c0:	eb00255b 	bl	24734 <assertion_failed>
   1b1c4:	e3a02f43 	mov	r2, #268	; 0x10c
   1b1c8:	e59f1018 	ldr	r1, [pc, #24]	; 1b1e8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b1cc:	e59f0034 	ldr	r0, [pc, #52]	; 1b208 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x150>
   1b1d0:	eb002557 	bl	24734 <assertion_failed>
   1b1d4:	e59f2030 	ldr	r2, [pc, #48]	; 1b20c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x154>
   1b1d8:	e59f1008 	ldr	r1, [pc, #8]	; 1b1e8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b1dc:	e59f002c 	ldr	r0, [pc, #44]	; 1b210 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x158>
   1b1e0:	eb002553 	bl	24734 <assertion_failed>
   1b1e4:	00000103 	.word	0x00000103
   1b1e8:	00041e44 	.word	0x00041e44
   1b1ec:	00041ec8 	.word	0x00041ec8
   1b1f0:	00041ef8 	.word	0x00041ef8
   1b1f4:	00041f18 	.word	0x00041f18
   1b1f8:	00000106 	.word	0x00000106
   1b1fc:	00041ed8 	.word	0x00041ed8
   1b200:	00000109 	.word	0x00000109
   1b204:	00041ee8 	.word	0x00041ee8
   1b208:	00041f24 	.word	0x00041f24
   1b20c:	0000010f 	.word	0x0000010f
   1b210:	00041f34 	.word	0x00041f34

0001b214 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>:
   1b214:	e2800030 	add	r0, r0, #48	; 0x30
   1b218:	ea000802 	b	1d228 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>

0001b21c <CNetworkLayer::GetGateway(unsigned char const*) const>:
   1b21c:	e92d4010 	push	{r4, lr}
   1b220:	e1a04000 	mov	r4, r0
   1b224:	e2800030 	add	r0, r0, #48	; 0x30
   1b228:	eb000837 	bl	1d30c <CRouteCache::GetRoute(unsigned char const*) const>
   1b22c:	e3500000 	cmp	r0, #0
   1b230:	18bd8010 	popne	{r4, pc}
   1b234:	e5940000 	ldr	r0, [r4]
   1b238:	e3500000 	cmp	r0, #0
   1b23c:	0a000004 	beq	1b254 <CNetworkLayer::GetGateway(unsigned char const*) const+0x38>
   1b240:	eb001644 	bl	20b58 <CNetConfig::GetDefaultGateway() const>
   1b244:	e3500000 	cmp	r0, #0
   1b248:	0a000005 	beq	1b264 <CNetworkLayer::GetGateway(unsigned char const*) const+0x48>
   1b24c:	e8bd4010 	pop	{r4, lr}
   1b250:	ea001751 	b	20f9c <CIPAddress::Get() const>
   1b254:	e59f2018 	ldr	r2, [pc, #24]	; 1b274 <CNetworkLayer::GetGateway(unsigned char const*) const+0x58>
   1b258:	e59f1018 	ldr	r1, [pc, #24]	; 1b278 <CNetworkLayer::GetGateway(unsigned char const*) const+0x5c>
   1b25c:	e59f0018 	ldr	r0, [pc, #24]	; 1b27c <CNetworkLayer::GetGateway(unsigned char const*) const+0x60>
   1b260:	eb002533 	bl	24734 <assertion_failed>
   1b264:	e3a02f49 	mov	r2, #292	; 0x124
   1b268:	e59f1008 	ldr	r1, [pc, #8]	; 1b278 <CNetworkLayer::GetGateway(unsigned char const*) const+0x5c>
   1b26c:	e59f000c 	ldr	r0, [pc, #12]	; 1b280 <CNetworkLayer::GetGateway(unsigned char const*) const+0x64>
   1b270:	eb00252f 	bl	24734 <assertion_failed>
   1b274:	00000122 	.word	0x00000122
   1b278:	00041e44 	.word	0x00041e44
   1b27c:	00041db0 	.word	0x00041db0
   1b280:	00041f48 	.word	0x00041f48

0001b284 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>:
   1b284:	e5900008 	ldr	r0, [r0, #8]
   1b288:	e3500000 	cmp	r0, #0
   1b28c:	0a000000 	beq	1b294 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)+0x10>
   1b290:	ea00075a 	b	1d000 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1b294:	e92d4010 	push	{r4, lr}
   1b298:	ebfffdba 	bl	1a988 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.0]>

0001b29c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>:
   1b29c:	e92d4070 	push	{r4, r5, r6, lr}
   1b2a0:	e3a05000 	mov	r5, #0
   1b2a4:	e1a04000 	mov	r4, r0
   1b2a8:	e8800026 	stm	r0, {r1, r2, r5}
   1b2ac:	e580500c 	str	r5, [r0, #12]
   1b2b0:	e2800010 	add	r0, r0, #16
   1b2b4:	eb0017c9 	bl	211e0 <CNetQueue::CNetQueue()>
   1b2b8:	e284001c 	add	r0, r4, #28
   1b2bc:	eb0017c7 	bl	211e0 <CNetQueue::CNetQueue()>
   1b2c0:	e2840028 	add	r0, r4, #40	; 0x28
   1b2c4:	eb0017c5 	bl	211e0 <CNetQueue::CNetQueue()>
   1b2c8:	e5943000 	ldr	r3, [r4]
   1b2cc:	e1c453b4 	strh	r5, [r4, #52]	; 0x34
   1b2d0:	e1530005 	cmp	r3, r5
   1b2d4:	0a000004 	beq	1b2ec <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x50>
   1b2d8:	e5943004 	ldr	r3, [r4, #4]
   1b2dc:	e3530000 	cmp	r3, #0
   1b2e0:	0a000005 	beq	1b2fc <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x60>
   1b2e4:	e1a00004 	mov	r0, r4
   1b2e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b2ec:	e3a02025 	mov	r2, #37	; 0x25
   1b2f0:	e59f1014 	ldr	r1, [pc, #20]	; 1b30c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x70>
   1b2f4:	e59f0014 	ldr	r0, [pc, #20]	; 1b310 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x74>
   1b2f8:	eb00250d 	bl	24734 <assertion_failed>
   1b2fc:	e3a02026 	mov	r2, #38	; 0x26
   1b300:	e59f1004 	ldr	r1, [pc, #4]	; 1b30c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x70>
   1b304:	e59f0008 	ldr	r0, [pc, #8]	; 1b314 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x78>
   1b308:	eb002509 	bl	24734 <assertion_failed>
   1b30c:	00041f60 	.word	0x00041f60
   1b310:	00041db0 	.word	0x00041db0
   1b314:	00041f70 	.word	0x00041f70

0001b318 <CLinkLayer::~CLinkLayer()>:
   1b318:	e92d4070 	push	{r4, r5, r6, lr}
   1b31c:	e590500c 	ldr	r5, [r0, #12]
   1b320:	e1a04000 	mov	r4, r0
   1b324:	e3550000 	cmp	r5, #0
   1b328:	0a000004 	beq	1b340 <CLinkLayer::~CLinkLayer()+0x28>
   1b32c:	e1a00005 	mov	r0, r5
   1b330:	eb000317 	bl	1bf94 <CARPHandler::~CARPHandler()>
   1b334:	e1a00005 	mov	r0, r5
   1b338:	e3a01f93 	mov	r1, #588	; 0x24c
   1b33c:	eb003f11 	bl	2af88 <operator delete(void*, unsigned int)>
   1b340:	e3a03000 	mov	r3, #0
   1b344:	e1a00004 	mov	r0, r4
   1b348:	e584300c 	str	r3, [r4, #12]
   1b34c:	e5843008 	str	r3, [r4, #8]
   1b350:	e5843004 	str	r3, [r4, #4]
   1b354:	e4803028 	str	r3, [r0], #40	; 0x28
   1b358:	eb0017d8 	bl	212c0 <CNetQueue::~CNetQueue()>
   1b35c:	e284001c 	add	r0, r4, #28
   1b360:	eb0017d6 	bl	212c0 <CNetQueue::~CNetQueue()>
   1b364:	e2840010 	add	r0, r4, #16
   1b368:	eb0017d4 	bl	212c0 <CNetQueue::~CNetQueue()>
   1b36c:	e1a00004 	mov	r0, r4
   1b370:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b374 <CLinkLayer::Initialize()>:
   1b374:	e92d4030 	push	{r4, r5, lr}
   1b378:	e5903000 	ldr	r3, [r0]
   1b37c:	e24dd00c 	sub	sp, sp, #12
   1b380:	e3530000 	cmp	r3, #0
   1b384:	0a00000d 	beq	1b3c0 <CLinkLayer::Initialize()+0x4c>
   1b388:	e1a04000 	mov	r4, r0
   1b38c:	e3a00f93 	mov	r0, #588	; 0x24c
   1b390:	eb003eee 	bl	2af50 <operator new(unsigned int)>
   1b394:	e1a02004 	mov	r2, r4
   1b398:	e4921010 	ldr	r1, [r2], #16
   1b39c:	e1a03004 	mov	r3, r4
   1b3a0:	e58d2000 	str	r2, [sp]
   1b3a4:	e5942004 	ldr	r2, [r4, #4]
   1b3a8:	e1a05000 	mov	r5, r0
   1b3ac:	eb0002d1 	bl	1bef8 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>
   1b3b0:	e3a00001 	mov	r0, #1
   1b3b4:	e584500c 	str	r5, [r4, #12]
   1b3b8:	e28dd00c 	add	sp, sp, #12
   1b3bc:	e8bd8030 	pop	{r4, r5, pc}
   1b3c0:	e3a02035 	mov	r2, #53	; 0x35
   1b3c4:	e59f1004 	ldr	r1, [pc, #4]	; 1b3d0 <CLinkLayer::Initialize()+0x5c>
   1b3c8:	e59f0004 	ldr	r0, [pc, #4]	; 1b3d4 <CLinkLayer::Initialize()+0x60>
   1b3cc:	eb0024d8 	bl	24734 <assertion_failed>
   1b3d0:	00041f60 	.word	0x00041f60
   1b3d4:	00041db0 	.word	0x00041db0

0001b3d8 <CLinkLayer::AttachLayer(CNetworkLayer*)>:
   1b3d8:	e5903008 	ldr	r3, [r0, #8]
   1b3dc:	e92d4010 	push	{r4, lr}
   1b3e0:	e3530000 	cmp	r3, #0
   1b3e4:	1a000006 	bne	1b404 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x2c>
   1b3e8:	e3510000 	cmp	r1, #0
   1b3ec:	e5801008 	str	r1, [r0, #8]
   1b3f0:	18bd8010 	popne	{r4, pc}
   1b3f4:	e3a02040 	mov	r2, #64	; 0x40
   1b3f8:	e59f1014 	ldr	r1, [pc, #20]	; 1b414 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x3c>
   1b3fc:	e59f0014 	ldr	r0, [pc, #20]	; 1b418 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x40>
   1b400:	eb0024cb 	bl	24734 <assertion_failed>
   1b404:	e3a0203e 	mov	r2, #62	; 0x3e
   1b408:	e59f1004 	ldr	r1, [pc, #4]	; 1b414 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x3c>
   1b40c:	e59f0008 	ldr	r0, [pc, #8]	; 1b41c <CLinkLayer::AttachLayer(CNetworkLayer*)+0x44>
   1b410:	eb0024c7 	bl	24734 <assertion_failed>
   1b414:	00041f60 	.word	0x00041f60
   1b418:	00041dc4 	.word	0x00041dc4
   1b41c:	00041f84 	.word	0x00041f84

0001b420 <CLinkLayer::Process()>:
   1b420:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b424:	e1a04000 	mov	r4, r0
   1b428:	e5900004 	ldr	r0, [r0, #4]
   1b42c:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1b430:	e3500000 	cmp	r0, #0
   1b434:	e24dd008 	sub	sp, sp, #8
   1b438:	0a000057 	beq	1b59c <CLinkLayer::Process()+0x17c>
   1b43c:	eb000225 	bl	1bcd8 <CNetDeviceLayer::GetMACAddress() const>
   1b440:	e2506000 	subs	r6, r0, #0
   1b444:	0a000058 	beq	1b5ac <CLinkLayer::Process()+0x18c>
   1b448:	e5940004 	ldr	r0, [r4, #4]
   1b44c:	e3500000 	cmp	r0, #0
   1b450:	0a000059 	beq	1b5bc <CLinkLayer::Process()+0x19c>
   1b454:	e28d3018 	add	r3, sp, #24
   1b458:	e59f717c 	ldr	r7, [pc, #380]	; 1b5dc <CLinkLayer::Process()+0x1bc>
   1b45c:	e28d5010 	add	r5, sp, #16
   1b460:	e283800e 	add	r8, r3, #14
   1b464:	e28d200c 	add	r2, sp, #12
   1b468:	e28d1018 	add	r1, sp, #24
   1b46c:	eb000229 	bl	1bd18 <CNetDeviceLayer::Receive(void*, unsigned int*)>
   1b470:	e3500000 	cmp	r0, #0
   1b474:	0a000041 	beq	1b580 <CLinkLayer::Process()+0x160>
   1b478:	e59d300c 	ldr	r3, [sp, #12]
   1b47c:	e3530d19 	cmp	r3, #1600	; 0x640
   1b480:	8a000029 	bhi	1b52c <CLinkLayer::Process()+0x10c>
   1b484:	e353000e 	cmp	r3, #14
   1b488:	9a000016 	bls	1b4e8 <CLinkLayer::Process()+0xc8>
   1b48c:	e28d1018 	add	r1, sp, #24
   1b490:	e1a00005 	mov	r0, r5
   1b494:	eb003df9 	bl	2ac80 <CMACAddress::CMACAddress(unsigned char const*)>
   1b498:	e1a01006 	mov	r1, r6
   1b49c:	e1a00005 	mov	r0, r5
   1b4a0:	eb003de1 	bl	2ac2c <CMACAddress::operator!=(CMACAddress const&) const>
   1b4a4:	e3500000 	cmp	r0, #0
   1b4a8:	1a000010 	bne	1b4f0 <CLinkLayer::Process()+0xd0>
   1b4ac:	e59d200c 	ldr	r2, [sp, #12]
   1b4b0:	e242200e 	sub	r2, r2, #14
   1b4b4:	e3520000 	cmp	r2, #0
   1b4b8:	e58d200c 	str	r2, [sp, #12]
   1b4bc:	0a00002b 	beq	1b570 <CLinkLayer::Process()+0x150>
   1b4c0:	e1dd32b4 	ldrh	r3, [sp, #36]	; 0x24
   1b4c4:	e3530008 	cmp	r3, #8
   1b4c8:	0a000012 	beq	1b518 <CLinkLayer::Process()+0xf8>
   1b4cc:	e1530007 	cmp	r3, r7
   1b4d0:	0a00000b 	beq	1b504 <CLinkLayer::Process()+0xe4>
   1b4d4:	e1d423b4 	ldrh	r2, [r4, #52]	; 0x34
   1b4d8:	e1520003 	cmp	r2, r3
   1b4dc:	0a000016 	beq	1b53c <CLinkLayer::Process()+0x11c>
   1b4e0:	e1a00005 	mov	r0, r5
   1b4e4:	eb003db7 	bl	2abc8 <CMACAddress::~CMACAddress()>
   1b4e8:	e5940004 	ldr	r0, [r4, #4]
   1b4ec:	eaffffdc 	b	1b464 <CLinkLayer::Process()+0x44>
   1b4f0:	e1a00005 	mov	r0, r5
   1b4f4:	eb003e12 	bl	2ad44 <CMACAddress::IsBroadcast() const>
   1b4f8:	e3500000 	cmp	r0, #0
   1b4fc:	1affffea 	bne	1b4ac <CLinkLayer::Process()+0x8c>
   1b500:	eafffff6 	b	1b4e0 <CLinkLayer::Process()+0xc0>
   1b504:	e3a03000 	mov	r3, #0
   1b508:	e1a01008 	mov	r1, r8
   1b50c:	e2840010 	add	r0, r4, #16
   1b510:	eb00176f 	bl	212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b514:	eafffff1 	b	1b4e0 <CLinkLayer::Process()+0xc0>
   1b518:	e3a03000 	mov	r3, #0
   1b51c:	e1a01008 	mov	r1, r8
   1b520:	e284001c 	add	r0, r4, #28
   1b524:	eb00176a 	bl	212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b528:	eaffffec 	b	1b4e0 <CLinkLayer::Process()+0xc0>
   1b52c:	e3a0204e 	mov	r2, #78	; 0x4e
   1b530:	e59f10a8 	ldr	r1, [pc, #168]	; 1b5e0 <CLinkLayer::Process()+0x1c0>
   1b534:	e59f00a8 	ldr	r0, [pc, #168]	; 1b5e4 <CLinkLayer::Process()+0x1c4>
   1b538:	eb00247d 	bl	24734 <assertion_failed>
   1b53c:	e3a00006 	mov	r0, #6
   1b540:	eb003e82 	bl	2af50 <operator new(unsigned int)>
   1b544:	e3a02006 	mov	r2, #6
   1b548:	e28d3018 	add	r3, sp, #24
   1b54c:	e0831002 	add	r1, r3, r2
   1b550:	e58d0004 	str	r0, [sp, #4]
   1b554:	eb003c97 	bl	2a7b8 <memcpy>
   1b558:	e1a01008 	mov	r1, r8
   1b55c:	e59d3004 	ldr	r3, [sp, #4]
   1b560:	e59d200c 	ldr	r2, [sp, #12]
   1b564:	e2840028 	add	r0, r4, #40	; 0x28
   1b568:	eb001759 	bl	212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b56c:	eaffffdb 	b	1b4e0 <CLinkLayer::Process()+0xc0>
   1b570:	e3a0205d 	mov	r2, #93	; 0x5d
   1b574:	e59f1064 	ldr	r1, [pc, #100]	; 1b5e0 <CLinkLayer::Process()+0x1c0>
   1b578:	e59f0068 	ldr	r0, [pc, #104]	; 1b5e8 <CLinkLayer::Process()+0x1c8>
   1b57c:	eb00246c 	bl	24734 <assertion_failed>
   1b580:	e594000c 	ldr	r0, [r4, #12]
   1b584:	e3500000 	cmp	r0, #0
   1b588:	0a00000f 	beq	1b5cc <CLinkLayer::Process()+0x1ac>
   1b58c:	eb000375 	bl	1c368 <CARPHandler::Process()>
   1b590:	e28dde65 	add	sp, sp, #1616	; 0x650
   1b594:	e28dd008 	add	sp, sp, #8
   1b598:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1b59c:	e3a02045 	mov	r2, #69	; 0x45
   1b5a0:	e59f1038 	ldr	r1, [pc, #56]	; 1b5e0 <CLinkLayer::Process()+0x1c0>
   1b5a4:	e59f0040 	ldr	r0, [pc, #64]	; 1b5ec <CLinkLayer::Process()+0x1cc>
   1b5a8:	eb002461 	bl	24734 <assertion_failed>
   1b5ac:	e3a02047 	mov	r2, #71	; 0x47
   1b5b0:	e59f1028 	ldr	r1, [pc, #40]	; 1b5e0 <CLinkLayer::Process()+0x1c0>
   1b5b4:	e59f0034 	ldr	r0, [pc, #52]	; 1b5f0 <CLinkLayer::Process()+0x1d0>
   1b5b8:	eb00245d 	bl	24734 <assertion_failed>
   1b5bc:	e3a02049 	mov	r2, #73	; 0x49
   1b5c0:	e59f1018 	ldr	r1, [pc, #24]	; 1b5e0 <CLinkLayer::Process()+0x1c0>
   1b5c4:	e59f0020 	ldr	r0, [pc, #32]	; 1b5ec <CLinkLayer::Process()+0x1cc>
   1b5c8:	eb002459 	bl	24734 <assertion_failed>
   1b5cc:	e3a02077 	mov	r2, #119	; 0x77
   1b5d0:	e59f1008 	ldr	r1, [pc, #8]	; 1b5e0 <CLinkLayer::Process()+0x1c0>
   1b5d4:	e59f0018 	ldr	r0, [pc, #24]	; 1b5f4 <CLinkLayer::Process()+0x1d4>
   1b5d8:	eb002455 	bl	24734 <assertion_failed>
   1b5dc:	00000608 	.word	0x00000608
   1b5e0:	00041f60 	.word	0x00041f60
   1b5e4:	0003fb64 	.word	0x0003fb64
   1b5e8:	00041e38 	.word	0x00041e38
   1b5ec:	00041f70 	.word	0x00041f70
   1b5f0:	00041f9c 	.word	0x00041f9c
   1b5f4:	00041fb0 	.word	0x00041fb0

0001b5f8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>:
   1b5f8:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b5fc:	e1a04003 	mov	r4, r3
   1b600:	e59f317c 	ldr	r3, [pc, #380]	; 1b784 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x18c>
   1b604:	e244c001 	sub	ip, r4, #1
   1b608:	e28db01c 	add	fp, sp, #28
   1b60c:	e15c0003 	cmp	ip, r3
   1b610:	e24dd010 	sub	sp, sp, #16
   1b614:	8a000033 	bhi	1b6e8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xf0>
   1b618:	e1a05000 	mov	r5, r0
   1b61c:	e2843015 	add	r3, r4, #21
   1b620:	e5900004 	ldr	r0, [r0, #4]
   1b624:	e3c33007 	bic	r3, r3, #7
   1b628:	e04dd003 	sub	sp, sp, r3
   1b62c:	e3500000 	cmp	r0, #0
   1b630:	e28d8008 	add	r8, sp, #8
   1b634:	e284900e 	add	r9, r4, #14
   1b638:	0a000041 	beq	1b744 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x14c>
   1b63c:	e1a07001 	mov	r7, r1
   1b640:	e1a06002 	mov	r6, r2
   1b644:	eb0001a3 	bl	1bcd8 <CNetDeviceLayer::GetMACAddress() const>
   1b648:	e3500000 	cmp	r0, #0
   1b64c:	0a000040 	beq	1b754 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x15c>
   1b650:	e28d100e 	add	r1, sp, #14
   1b654:	eb003da3 	bl	2ace8 <CMACAddress::CopyTo(unsigned char*) const>
   1b658:	e3a02000 	mov	r2, #0
   1b65c:	e3a03008 	mov	r3, #8
   1b660:	e1560002 	cmp	r6, r2
   1b664:	e5c8200d 	strb	r2, [r8, #13]
   1b668:	e5c8300c 	strb	r3, [r8, #12]
   1b66c:	0a000030 	beq	1b734 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x13c>
   1b670:	e1a02004 	mov	r2, r4
   1b674:	e1a01006 	mov	r1, r6
   1b678:	e28d0016 	add	r0, sp, #22
   1b67c:	eb003c4d 	bl	2a7b8 <memcpy>
   1b680:	e5953000 	ldr	r3, [r5]
   1b684:	e3530000 	cmp	r3, #0
   1b688:	0a000035 	beq	1b764 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x16c>
   1b68c:	e595300c 	ldr	r3, [r5, #12]
   1b690:	e3530000 	cmp	r3, #0
   1b694:	0a000036 	beq	1b774 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x17c>
   1b698:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b69c:	eb003d46 	bl	2abbc <CMACAddress::CMACAddress()>
   1b6a0:	e1a00007 	mov	r0, r7
   1b6a4:	eb00166d 	bl	21060 <CIPAddress::IsBroadcast() const>
   1b6a8:	e3500000 	cmp	r0, #0
   1b6ac:	0a000010 	beq	1b6f4 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xfc>
   1b6b0:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b6b4:	eb003d76 	bl	2ac94 <CMACAddress::SetBroadcast()>
   1b6b8:	e1a01008 	mov	r1, r8
   1b6bc:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b6c0:	eb003d88 	bl	2ace8 <CMACAddress::CopyTo(unsigned char*) const>
   1b6c4:	e1a02009 	mov	r2, r9
   1b6c8:	e1a01008 	mov	r1, r8
   1b6cc:	e5950004 	ldr	r0, [r5, #4]
   1b6d0:	eb00018d 	bl	1bd0c <CNetDeviceLayer::Send(void const*, unsigned int)>
   1b6d4:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b6d8:	eb003d3a 	bl	2abc8 <CMACAddress::~CMACAddress()>
   1b6dc:	e3a00001 	mov	r0, #1
   1b6e0:	e24bd01c 	sub	sp, fp, #28
   1b6e4:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b6e8:	e3a00000 	mov	r0, #0
   1b6ec:	e24bd01c 	sub	sp, fp, #28
   1b6f0:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b6f4:	e5950000 	ldr	r0, [r5]
   1b6f8:	eb00151a 	bl	20b68 <CNetConfig::GetBroadcastAddress() const>
   1b6fc:	e1a01000 	mov	r1, r0
   1b700:	e1a00007 	mov	r0, r7
   1b704:	eb00157f 	bl	20d08 <CIPAddress::operator==(CIPAddress const&) const>
   1b708:	e3500000 	cmp	r0, #0
   1b70c:	1affffe7 	bne	1b6b0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xb8>
   1b710:	e58d9000 	str	r9, [sp]
   1b714:	e1a01007 	mov	r1, r7
   1b718:	e1a03008 	mov	r3, r8
   1b71c:	e595000c 	ldr	r0, [r5, #12]
   1b720:	e24b2024 	sub	r2, fp, #36	; 0x24
   1b724:	eb00040f 	bl	1c768 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>
   1b728:	e3500000 	cmp	r0, #0
   1b72c:	1affffe1 	bne	1b6b8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xc0>
   1b730:	eaffffe7 	b	1b6d4 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xdc>
   1b734:	e3a0208e 	mov	r2, #142	; 0x8e
   1b738:	e59f1048 	ldr	r1, [pc, #72]	; 1b788 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b73c:	e59f0048 	ldr	r0, [pc, #72]	; 1b78c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x194>
   1b740:	eb0023fb 	bl	24734 <assertion_failed>
   1b744:	e3a02087 	mov	r2, #135	; 0x87
   1b748:	e59f1038 	ldr	r1, [pc, #56]	; 1b788 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b74c:	e59f003c 	ldr	r0, [pc, #60]	; 1b790 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x198>
   1b750:	eb0023f7 	bl	24734 <assertion_failed>
   1b754:	e3a02089 	mov	r2, #137	; 0x89
   1b758:	e59f1028 	ldr	r1, [pc, #40]	; 1b788 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b75c:	e59f0030 	ldr	r0, [pc, #48]	; 1b794 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x19c>
   1b760:	eb0023f3 	bl	24734 <assertion_failed>
   1b764:	e3a02092 	mov	r2, #146	; 0x92
   1b768:	e59f1018 	ldr	r1, [pc, #24]	; 1b788 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b76c:	e59f0024 	ldr	r0, [pc, #36]	; 1b798 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x1a0>
   1b770:	eb0023ef 	bl	24734 <assertion_failed>
   1b774:	e3a02093 	mov	r2, #147	; 0x93
   1b778:	e59f1008 	ldr	r1, [pc, #8]	; 1b788 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b77c:	e59f0018 	ldr	r0, [pc, #24]	; 1b79c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x1a4>
   1b780:	eb0023eb 	bl	24734 <assertion_failed>
   1b784:	00000631 	.word	0x00000631
   1b788:	00041f60 	.word	0x00041f60
   1b78c:	00041fc4 	.word	0x00041fc4
   1b790:	00041f70 	.word	0x00041f70
   1b794:	00041f9c 	.word	0x00041f9c
   1b798:	00041db0 	.word	0x00041db0
   1b79c:	00041fb0 	.word	0x00041fb0

0001b7a0 <CLinkLayer::Receive(void*, unsigned int*)>:
   1b7a0:	e3510000 	cmp	r1, #0
   1b7a4:	e92d4010 	push	{r4, lr}
   1b7a8:	0a000009 	beq	1b7d4 <CLinkLayer::Receive(void*, unsigned int*)+0x34>
   1b7ac:	e3520000 	cmp	r2, #0
   1b7b0:	e1a04002 	mov	r4, r2
   1b7b4:	0a00000a 	beq	1b7e4 <CLinkLayer::Receive(void*, unsigned int*)+0x44>
   1b7b8:	e3a02000 	mov	r2, #0
   1b7bc:	e280001c 	add	r0, r0, #28
   1b7c0:	eb001709 	bl	213ec <CNetQueue::Dequeue(void*, void**)>
   1b7c4:	e5840000 	str	r0, [r4]
   1b7c8:	e2500000 	subs	r0, r0, #0
   1b7cc:	13a00001 	movne	r0, #1
   1b7d0:	e8bd8010 	pop	{r4, pc}
   1b7d4:	e3a020a9 	mov	r2, #169	; 0xa9
   1b7d8:	e59f1014 	ldr	r1, [pc, #20]	; 1b7f4 <CLinkLayer::Receive(void*, unsigned int*)+0x54>
   1b7dc:	e59f0014 	ldr	r0, [pc, #20]	; 1b7f8 <CLinkLayer::Receive(void*, unsigned int*)+0x58>
   1b7e0:	eb0023d3 	bl	24734 <assertion_failed>
   1b7e4:	e3a020aa 	mov	r2, #170	; 0xaa
   1b7e8:	e59f1004 	ldr	r1, [pc, #4]	; 1b7f4 <CLinkLayer::Receive(void*, unsigned int*)+0x54>
   1b7ec:	e59f0008 	ldr	r0, [pc, #8]	; 1b7fc <CLinkLayer::Receive(void*, unsigned int*)+0x5c>
   1b7f0:	eb0023cf 	bl	24734 <assertion_failed>
   1b7f4:	00041f60 	.word	0x00041f60
   1b7f8:	0003ef40 	.word	0x0003ef40
   1b7fc:	0003f728 	.word	0x0003f728

0001b800 <CLinkLayer::SendRaw(void const*, unsigned int)>:
   1b800:	e3510000 	cmp	r1, #0
   1b804:	e92d4010 	push	{r4, lr}
   1b808:	0a000007 	beq	1b82c <CLinkLayer::SendRaw(void const*, unsigned int)+0x2c>
   1b80c:	e3520000 	cmp	r2, #0
   1b810:	0a000009 	beq	1b83c <CLinkLayer::SendRaw(void const*, unsigned int)+0x3c>
   1b814:	e5900004 	ldr	r0, [r0, #4]
   1b818:	e3500000 	cmp	r0, #0
   1b81c:	0a00000a 	beq	1b84c <CLinkLayer::SendRaw(void const*, unsigned int)+0x4c>
   1b820:	eb000139 	bl	1bd0c <CNetDeviceLayer::Send(void const*, unsigned int)>
   1b824:	e3a00001 	mov	r0, #1
   1b828:	e8bd8010 	pop	{r4, pc}
   1b82c:	e3a020b2 	mov	r2, #178	; 0xb2
   1b830:	e59f1024 	ldr	r1, [pc, #36]	; 1b85c <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b834:	e59f0024 	ldr	r0, [pc, #36]	; 1b860 <CLinkLayer::SendRaw(void const*, unsigned int)+0x60>
   1b838:	eb0023bd 	bl	24734 <assertion_failed>
   1b83c:	e3a020b3 	mov	r2, #179	; 0xb3
   1b840:	e59f1014 	ldr	r1, [pc, #20]	; 1b85c <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b844:	e59f0018 	ldr	r0, [pc, #24]	; 1b864 <CLinkLayer::SendRaw(void const*, unsigned int)+0x64>
   1b848:	eb0023b9 	bl	24734 <assertion_failed>
   1b84c:	e3a020b4 	mov	r2, #180	; 0xb4
   1b850:	e59f1004 	ldr	r1, [pc, #4]	; 1b85c <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b854:	e59f000c 	ldr	r0, [pc, #12]	; 1b868 <CLinkLayer::SendRaw(void const*, unsigned int)+0x68>
   1b858:	eb0023b5 	bl	24734 <assertion_failed>
   1b85c:	00041f60 	.word	0x00041f60
   1b860:	00041fd4 	.word	0x00041fd4
   1b864:	00041e38 	.word	0x00041e38
   1b868:	00041f70 	.word	0x00041f70

0001b86c <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)>:
   1b86c:	e92d4030 	push	{r4, r5, lr}
   1b870:	e3510000 	cmp	r1, #0
   1b874:	e24dd00c 	sub	sp, sp, #12
   1b878:	0a00001c 	beq	1b8f0 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x84>
   1b87c:	e3520000 	cmp	r2, #0
   1b880:	e1a04002 	mov	r4, r2
   1b884:	0a00001d 	beq	1b900 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x94>
   1b888:	e2800028 	add	r0, r0, #40	; 0x28
   1b88c:	e28d2004 	add	r2, sp, #4
   1b890:	e1a05003 	mov	r5, r3
   1b894:	eb0016d4 	bl	213ec <CNetQueue::Dequeue(void*, void**)>
   1b898:	e3500000 	cmp	r0, #0
   1b89c:	e5840000 	str	r0, [r4]
   1b8a0:	0a00000b 	beq	1b8d4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x68>
   1b8a4:	e3550000 	cmp	r5, #0
   1b8a8:	e59d4004 	ldr	r4, [sp, #4]
   1b8ac:	0a00000a 	beq	1b8dc <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x70>
   1b8b0:	e3540000 	cmp	r4, #0
   1b8b4:	0a000015 	beq	1b910 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa4>
   1b8b8:	e1a00005 	mov	r0, r5
   1b8bc:	e1a01004 	mov	r1, r4
   1b8c0:	eb003cde 	bl	2ac40 <CMACAddress::Set(unsigned char const*)>
   1b8c4:	e1a00004 	mov	r0, r4
   1b8c8:	e3a01006 	mov	r1, #6
   1b8cc:	eb003dad 	bl	2af88 <operator delete(void*, unsigned int)>
   1b8d0:	e3a00001 	mov	r0, #1
   1b8d4:	e28dd00c 	add	sp, sp, #12
   1b8d8:	e8bd8030 	pop	{r4, r5, pc}
   1b8dc:	e3540000 	cmp	r4, #0
   1b8e0:	03a00001 	moveq	r0, #1
   1b8e4:	1afffff6 	bne	1b8c4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x58>
   1b8e8:	e28dd00c 	add	sp, sp, #12
   1b8ec:	e8bd8030 	pop	{r4, r5, pc}
   1b8f0:	e3a020bd 	mov	r2, #189	; 0xbd
   1b8f4:	e59f1024 	ldr	r1, [pc, #36]	; 1b920 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xb4>
   1b8f8:	e59f0024 	ldr	r0, [pc, #36]	; 1b924 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xb8>
   1b8fc:	eb00238c 	bl	24734 <assertion_failed>
   1b900:	e3a020be 	mov	r2, #190	; 0xbe
   1b904:	e59f1014 	ldr	r1, [pc, #20]	; 1b920 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xb4>
   1b908:	e59f0018 	ldr	r0, [pc, #24]	; 1b928 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xbc>
   1b90c:	eb002388 	bl	24734 <assertion_failed>
   1b910:	e3a020c9 	mov	r2, #201	; 0xc9
   1b914:	e59f1004 	ldr	r1, [pc, #4]	; 1b920 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xb4>
   1b918:	e59f000c 	ldr	r0, [pc, #12]	; 1b92c <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xc0>
   1b91c:	eb002384 	bl	24734 <assertion_failed>
   1b920:	00041f60 	.word	0x00041f60
   1b924:	0003ef40 	.word	0x0003ef40
   1b928:	0003f728 	.word	0x0003f728
   1b92c:	00041e2c 	.word	0x00041e2c

0001b930 <CLinkLayer::EnableReceiveRaw(unsigned short)>:
   1b930:	e1d033b4 	ldrh	r3, [r0, #52]	; 0x34
   1b934:	e3530000 	cmp	r3, #0
   1b938:	1a000005 	bne	1b954 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x24>
   1b93c:	e3510000 	cmp	r1, #0
   1b940:	0a000005 	beq	1b95c <CLinkLayer::EnableReceiveRaw(unsigned short)+0x2c>
   1b944:	e6bf1fb1 	rev16	r1, r1
   1b948:	e1c013b4 	strh	r1, [r0, #52]	; 0x34
   1b94c:	e3a00001 	mov	r0, #1
   1b950:	e12fff1e 	bx	lr
   1b954:	e3a00000 	mov	r0, #0
   1b958:	e12fff1e 	bx	lr
   1b95c:	e3a020d9 	mov	r2, #217	; 0xd9
   1b960:	e92d4010 	push	{r4, lr}
   1b964:	e59f1004 	ldr	r1, [pc, #4]	; 1b970 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x40>
   1b968:	e59f0004 	ldr	r0, [pc, #4]	; 1b974 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x44>
   1b96c:	eb002370 	bl	24734 <assertion_failed>
   1b970:	00041f60 	.word	0x00041f60
   1b974:	00041fe0 	.word	0x00041fe0

0001b978 <CLinkLayer::ResolveFailed(void const*, unsigned int)>:
   1b978:	e3510000 	cmp	r1, #0
   1b97c:	e92d4010 	push	{r4, lr}
   1b980:	0a000009 	beq	1b9ac <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x34>
   1b984:	e352000e 	cmp	r2, #14
   1b988:	9a00000b 	bls	1b9bc <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x44>
   1b98c:	e5900008 	ldr	r0, [r0, #8]
   1b990:	e3500000 	cmp	r0, #0
   1b994:	0a00000c 	beq	1b9cc <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x54>
   1b998:	e8bd4010 	pop	{r4, lr}
   1b99c:	e242300e 	sub	r3, r2, #14
   1b9a0:	e281200e 	add	r2, r1, #14
   1b9a4:	e3a01001 	mov	r1, #1
   1b9a8:	eafffe35 	b	1b284 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>
   1b9ac:	e3a020e1 	mov	r2, #225	; 0xe1
   1b9b0:	e59f1024 	ldr	r1, [pc, #36]	; 1b9dc <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1b9b4:	e59f0024 	ldr	r0, [pc, #36]	; 1b9e0 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x68>
   1b9b8:	eb00235d 	bl	24734 <assertion_failed>
   1b9bc:	e3a020e2 	mov	r2, #226	; 0xe2
   1b9c0:	e59f1014 	ldr	r1, [pc, #20]	; 1b9dc <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1b9c4:	e59f0018 	ldr	r0, [pc, #24]	; 1b9e4 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x6c>
   1b9c8:	eb002359 	bl	24734 <assertion_failed>
   1b9cc:	e3a020e3 	mov	r2, #227	; 0xe3
   1b9d0:	e59f1004 	ldr	r1, [pc, #4]	; 1b9dc <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1b9d4:	e59f000c 	ldr	r0, [pc, #12]	; 1b9e8 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x70>
   1b9d8:	eb002355 	bl	24734 <assertion_failed>
   1b9dc:	00041f60 	.word	0x00041f60
   1b9e0:	00041ff4 	.word	0x00041ff4
   1b9e4:	00042008 	.word	0x00042008
   1b9e8:	00041dc4 	.word	0x00041dc4

0001b9ec <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>:
   1b9ec:	e3a03000 	mov	r3, #0
   1b9f0:	e92d4010 	push	{r4, lr}
   1b9f4:	e1a04000 	mov	r4, r0
   1b9f8:	e5801004 	str	r1, [r0, #4]
   1b9fc:	e5c02000 	strb	r2, [r0]
   1ba00:	e5803008 	str	r3, [r0, #8]
   1ba04:	e280000c 	add	r0, r0, #12
   1ba08:	eb0015f4 	bl	211e0 <CNetQueue::CNetQueue()>
   1ba0c:	e2840018 	add	r0, r4, #24
   1ba10:	eb0015f2 	bl	211e0 <CNetQueue::CNetQueue()>
   1ba14:	e1a00004 	mov	r0, r4
   1ba18:	e8bd8010 	pop	{r4, pc}

0001ba1c <CNetDeviceLayer::~CNetDeviceLayer()>:
   1ba1c:	e3a03000 	mov	r3, #0
   1ba20:	e92d4010 	push	{r4, lr}
   1ba24:	e1a04000 	mov	r4, r0
   1ba28:	e5803008 	str	r3, [r0, #8]
   1ba2c:	e5803004 	str	r3, [r0, #4]
   1ba30:	e2800018 	add	r0, r0, #24
   1ba34:	eb001621 	bl	212c0 <CNetQueue::~CNetQueue()>
   1ba38:	e284000c 	add	r0, r4, #12
   1ba3c:	eb00161f 	bl	212c0 <CNetQueue::~CNetQueue()>
   1ba40:	e1a00004 	mov	r0, r4
   1ba44:	e8bd8010 	pop	{r4, pc}

0001ba48 <CNetDeviceLayer::Initialize(bool)>:
   1ba48:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1ba4c:	e5903008 	ldr	r3, [r0, #8]
   1ba50:	e24dd00c 	sub	sp, sp, #12
   1ba54:	e3530000 	cmp	r3, #0
   1ba58:	1a000049 	bne	1bb84 <CNetDeviceLayer::Initialize(bool)+0x13c>
   1ba5c:	e1a04000 	mov	r4, r0
   1ba60:	e5d00000 	ldrb	r0, [r0]
   1ba64:	e1a05001 	mov	r5, r1
   1ba68:	eb003d07 	bl	2ae8c <CNetDevice::GetNetDevice(TNetDeviceType)>
   1ba6c:	e3500000 	cmp	r0, #0
   1ba70:	e1a06000 	mov	r6, r0
   1ba74:	e5840008 	str	r0, [r4, #8]
   1ba78:	0a000039 	beq	1bb64 <CNetDeviceLayer::Initialize(bool)+0x11c>
   1ba7c:	e3a000e0 	mov	r0, #224	; 0xe0
   1ba80:	eb003d32 	bl	2af50 <operator new(unsigned int)>
   1ba84:	e5941008 	ldr	r1, [r4, #8]
   1ba88:	eb0000e5 	bl	1be24 <CPHYTask::CPHYTask(CNetDevice*)>
   1ba8c:	e3550000 	cmp	r5, #0
   1ba90:	1a000002 	bne	1baa0 <CNetDeviceLayer::Initialize(bool)+0x58>
   1ba94:	e3a00001 	mov	r0, #1
   1ba98:	e28dd00c 	add	sp, sp, #12
   1ba9c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1baa0:	eb0038ef 	bl	29e64 <CTimer::Get()>
   1baa4:	eb00363c 	bl	2939c <CTimer::GetTicks() const>
   1baa8:	e1a06000 	mov	r6, r0
   1baac:	e59f70e0 	ldr	r7, [pc, #224]	; 1bb94 <CNetDeviceLayer::Initialize(bool)+0x14c>
   1bab0:	eb0038eb 	bl	29e64 <CTimer::Get()>
   1bab4:	eb003638 	bl	2939c <CTimer::GetTicks() const>
   1bab8:	e0403006 	sub	r3, r0, r6
   1babc:	e3530e19 	cmp	r3, #400	; 0x190
   1bac0:	2a00001f 	bcs	1bb44 <CNetDeviceLayer::Initialize(bool)+0xfc>
   1bac4:	e5940008 	ldr	r0, [r4, #8]
   1bac8:	e5902000 	ldr	r2, [r0]
   1bacc:	e592301c 	ldr	r3, [r2, #28]
   1bad0:	e1530007 	cmp	r3, r7
   1bad4:	1a000014 	bne	1bb2c <CNetDeviceLayer::Initialize(bool)+0xe4>
   1bad8:	e5923020 	ldr	r3, [r2, #32]
   1badc:	e59f20b4 	ldr	r2, [pc, #180]	; 1bb98 <CNetDeviceLayer::Initialize(bool)+0x150>
   1bae0:	e1530002 	cmp	r3, r2
   1bae4:	0affffea 	beq	1ba94 <CNetDeviceLayer::Initialize(bool)+0x4c>
   1bae8:	e12fff33 	blx	r3
   1baec:	e3500006 	cmp	r0, #6
   1baf0:	e1a06000 	mov	r6, r0
   1baf4:	0affffe6 	beq	1ba94 <CNetDeviceLayer::Initialize(bool)+0x4c>
   1baf8:	eb002bf5 	bl	26ad4 <CLogger::Get()>
   1bafc:	e1a04000 	mov	r4, r0
   1bb00:	e1a00006 	mov	r0, r6
   1bb04:	eb003cd1 	bl	2ae50 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>
   1bb08:	e1a02000 	mov	r2, r0
   1bb0c:	e59f3088 	ldr	r3, [pc, #136]	; 1bb9c <CNetDeviceLayer::Initialize(bool)+0x154>
   1bb10:	e1a00004 	mov	r0, r4
   1bb14:	e58d2000 	str	r2, [sp]
   1bb18:	e59f1080 	ldr	r1, [pc, #128]	; 1bba0 <CNetDeviceLayer::Initialize(bool)+0x158>
   1bb1c:	e3a02003 	mov	r2, #3
   1bb20:	eb002b2d 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bb24:	e1a00005 	mov	r0, r5
   1bb28:	eaffffda 	b	1ba98 <CNetDeviceLayer::Initialize(bool)+0x50>
   1bb2c:	e12fff33 	blx	r3
   1bb30:	e3500000 	cmp	r0, #0
   1bb34:	0affffdd 	beq	1bab0 <CNetDeviceLayer::Initialize(bool)+0x68>
   1bb38:	e5940008 	ldr	r0, [r4, #8]
   1bb3c:	e5902000 	ldr	r2, [r0]
   1bb40:	eaffffe4 	b	1bad8 <CNetDeviceLayer::Initialize(bool)+0x90>
   1bb44:	eb002be2 	bl	26ad4 <CLogger::Get()>
   1bb48:	e3a02002 	mov	r2, #2
   1bb4c:	e59f3050 	ldr	r3, [pc, #80]	; 1bba4 <CNetDeviceLayer::Initialize(bool)+0x15c>
   1bb50:	e59f1048 	ldr	r1, [pc, #72]	; 1bba0 <CNetDeviceLayer::Initialize(bool)+0x158>
   1bb54:	eb002b20 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bb58:	e1a00005 	mov	r0, r5
   1bb5c:	e28dd00c 	add	sp, sp, #12
   1bb60:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1bb64:	eb002bda 	bl	26ad4 <CLogger::Get()>
   1bb68:	e3a02001 	mov	r2, #1
   1bb6c:	e59f3034 	ldr	r3, [pc, #52]	; 1bba8 <CNetDeviceLayer::Initialize(bool)+0x160>
   1bb70:	e59f1028 	ldr	r1, [pc, #40]	; 1bba0 <CNetDeviceLayer::Initialize(bool)+0x158>
   1bb74:	eb002b18 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bb78:	e1a00006 	mov	r0, r6
   1bb7c:	e28dd00c 	add	sp, sp, #12
   1bb80:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1bb84:	e3a02033 	mov	r2, #51	; 0x33
   1bb88:	e59f101c 	ldr	r1, [pc, #28]	; 1bbac <CNetDeviceLayer::Initialize(bool)+0x164>
   1bb8c:	e59f001c 	ldr	r0, [pc, #28]	; 1bbb0 <CNetDeviceLayer::Initialize(bool)+0x168>
   1bb90:	eb0022e7 	bl	24734 <assertion_failed>
   1bb94:	00017814 	.word	0x00017814
   1bb98:	0001781c 	.word	0x0001781c
   1bb9c:	00042068 	.word	0x00042068
   1bba0:	00042084 	.word	0x00042084
   1bba4:	00042058 	.word	0x00042058
   1bba8:	0004203c 	.word	0x0004203c
   1bbac:	0004202c 	.word	0x0004202c
   1bbb0:	0003ddc4 	.word	0x0003ddc4

0001bbb4 <CNetDeviceLayer::Process()>:
   1bbb4:	e92d4070 	push	{r4, r5, r6, lr}
   1bbb8:	e1a04000 	mov	r4, r0
   1bbbc:	e5900008 	ldr	r0, [r0, #8]
   1bbc0:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1bbc4:	e3500000 	cmp	r0, #0
   1bbc8:	e24dd008 	sub	sp, sp, #8
   1bbcc:	0a000037 	beq	1bcb0 <CNetDeviceLayer::Process()+0xfc>
   1bbd0:	e59f50e8 	ldr	r5, [pc, #232]	; 1bcc0 <CNetDeviceLayer::Process()+0x10c>
   1bbd4:	e284600c 	add	r6, r4, #12
   1bbd8:	ea00000f 	b	1bc1c <CNetDeviceLayer::Process()+0x68>
   1bbdc:	e3a02000 	mov	r2, #0
   1bbe0:	e1a00006 	mov	r0, r6
   1bbe4:	e28d1008 	add	r1, sp, #8
   1bbe8:	eb0015ff 	bl	213ec <CNetQueue::Dequeue(void*, void**)>
   1bbec:	e3500000 	cmp	r0, #0
   1bbf0:	e1a02000 	mov	r2, r0
   1bbf4:	e58d0004 	str	r0, [sp, #4]
   1bbf8:	0a00000e 	beq	1bc38 <CNetDeviceLayer::Process()+0x84>
   1bbfc:	e5940008 	ldr	r0, [r4, #8]
   1bc00:	e28d1008 	add	r1, sp, #8
   1bc04:	e5903000 	ldr	r3, [r0]
   1bc08:	e5933014 	ldr	r3, [r3, #20]
   1bc0c:	e12fff33 	blx	r3
   1bc10:	e3500000 	cmp	r0, #0
   1bc14:	0a00001f 	beq	1bc98 <CNetDeviceLayer::Process()+0xe4>
   1bc18:	e5940008 	ldr	r0, [r4, #8]
   1bc1c:	e5903000 	ldr	r3, [r0]
   1bc20:	e5933010 	ldr	r3, [r3, #16]
   1bc24:	e1530005 	cmp	r3, r5
   1bc28:	0affffeb 	beq	1bbdc <CNetDeviceLayer::Process()+0x28>
   1bc2c:	e12fff33 	blx	r3
   1bc30:	e3500000 	cmp	r0, #0
   1bc34:	1affffe8 	bne	1bbdc <CNetDeviceLayer::Process()+0x28>
   1bc38:	e2845018 	add	r5, r4, #24
   1bc3c:	ea000003 	b	1bc50 <CNetDeviceLayer::Process()+0x9c>
   1bc40:	e3a03000 	mov	r3, #0
   1bc44:	e1a00005 	mov	r0, r5
   1bc48:	e28d1008 	add	r1, sp, #8
   1bc4c:	eb0015a0 	bl	212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1bc50:	e5940008 	ldr	r0, [r4, #8]
   1bc54:	e28d2004 	add	r2, sp, #4
   1bc58:	e5903000 	ldr	r3, [r0]
   1bc5c:	e28d1008 	add	r1, sp, #8
   1bc60:	e5933018 	ldr	r3, [r3, #24]
   1bc64:	e12fff33 	blx	r3
   1bc68:	e3500000 	cmp	r0, #0
   1bc6c:	0a000006 	beq	1bc8c <CNetDeviceLayer::Process()+0xd8>
   1bc70:	e59d2004 	ldr	r2, [sp, #4]
   1bc74:	e3520000 	cmp	r2, #0
   1bc78:	1afffff0 	bne	1bc40 <CNetDeviceLayer::Process()+0x8c>
   1bc7c:	e3a0206d 	mov	r2, #109	; 0x6d
   1bc80:	e59f103c 	ldr	r1, [pc, #60]	; 1bcc4 <CNetDeviceLayer::Process()+0x110>
   1bc84:	e59f003c 	ldr	r0, [pc, #60]	; 1bcc8 <CNetDeviceLayer::Process()+0x114>
   1bc88:	eb0022a9 	bl	24734 <assertion_failed>
   1bc8c:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1bc90:	e28dd008 	add	sp, sp, #8
   1bc94:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bc98:	eb002b8d 	bl	26ad4 <CLogger::Get()>
   1bc9c:	e3a02002 	mov	r2, #2
   1bca0:	e59f3024 	ldr	r3, [pc, #36]	; 1bccc <CNetDeviceLayer::Process()+0x118>
   1bca4:	e59f1024 	ldr	r1, [pc, #36]	; 1bcd0 <CNetDeviceLayer::Process()+0x11c>
   1bca8:	eb002acb 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bcac:	eaffffe1 	b	1bc38 <CNetDeviceLayer::Process()+0x84>
   1bcb0:	e3a0205c 	mov	r2, #92	; 0x5c
   1bcb4:	e59f1008 	ldr	r1, [pc, #8]	; 1bcc4 <CNetDeviceLayer::Process()+0x110>
   1bcb8:	e59f0014 	ldr	r0, [pc, #20]	; 1bcd4 <CNetDeviceLayer::Process()+0x120>
   1bcbc:	eb00229c 	bl	24734 <assertion_failed>
   1bcc0:	000160cc 	.word	0x000160cc
   1bcc4:	0004202c 	.word	0x0004202c
   1bcc8:	00041e38 	.word	0x00041e38
   1bccc:	00042074 	.word	0x00042074
   1bcd0:	00042084 	.word	0x00042084
   1bcd4:	0003df08 	.word	0x0003df08

0001bcd8 <CNetDeviceLayer::GetMACAddress() const>:
   1bcd8:	e5900008 	ldr	r0, [r0, #8]
   1bcdc:	e3500000 	cmp	r0, #0
   1bce0:	0a000002 	beq	1bcf0 <CNetDeviceLayer::GetMACAddress() const+0x18>
   1bce4:	e5903000 	ldr	r3, [r0]
   1bce8:	e593300c 	ldr	r3, [r3, #12]
   1bcec:	e12fff13 	bx	r3
   1bcf0:	e3a02074 	mov	r2, #116	; 0x74
   1bcf4:	e92d4010 	push	{r4, lr}
   1bcf8:	e59f1004 	ldr	r1, [pc, #4]	; 1bd04 <CNetDeviceLayer::GetMACAddress() const+0x2c>
   1bcfc:	e59f0004 	ldr	r0, [pc, #4]	; 1bd08 <CNetDeviceLayer::GetMACAddress() const+0x30>
   1bd00:	eb00228b 	bl	24734 <assertion_failed>
   1bd04:	0004202c 	.word	0x0004202c
   1bd08:	0003df08 	.word	0x0003df08

0001bd0c <CNetDeviceLayer::Send(void const*, unsigned int)>:
   1bd0c:	e3a03000 	mov	r3, #0
   1bd10:	e280000c 	add	r0, r0, #12
   1bd14:	ea00156e 	b	212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)>

0001bd18 <CNetDeviceLayer::Receive(void*, unsigned int*)>:
   1bd18:	e92d4010 	push	{r4, lr}
   1bd1c:	e2800018 	add	r0, r0, #24
   1bd20:	e1a04002 	mov	r4, r2
   1bd24:	e3a02000 	mov	r2, #0
   1bd28:	eb0015af 	bl	213ec <CNetQueue::Dequeue(void*, void**)>
   1bd2c:	e3500000 	cmp	r0, #0
   1bd30:	08bd8010 	popeq	{r4, pc}
   1bd34:	e3540000 	cmp	r4, #0
   1bd38:	0a000002 	beq	1bd48 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x30>
   1bd3c:	e5840000 	str	r0, [r4]
   1bd40:	e3a00001 	mov	r0, #1
   1bd44:	e8bd8010 	pop	{r4, pc}
   1bd48:	e3a02085 	mov	r2, #133	; 0x85
   1bd4c:	e59f1004 	ldr	r1, [pc, #4]	; 1bd58 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x40>
   1bd50:	e59f0004 	ldr	r0, [pc, #4]	; 1bd5c <CNetDeviceLayer::Receive(void*, unsigned int*)+0x44>
   1bd54:	eb002276 	bl	24734 <assertion_failed>
   1bd58:	0004202c 	.word	0x0004202c
   1bd5c:	0003f728 	.word	0x0003f728

0001bd60 <CPHYTask::~CPHYTask()>:
   1bd60:	e3a02000 	mov	r2, #0
   1bd64:	e92d4010 	push	{r4, lr}
   1bd68:	e1a04000 	mov	r4, r0
   1bd6c:	e59f3010 	ldr	r3, [pc, #16]	; 1bd84 <CPHYTask::~CPHYTask()+0x24>
   1bd70:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   1bd74:	e5803000 	str	r3, [r0]
   1bd78:	eb001fdc 	bl	23cf0 <CTask::~CTask()>
   1bd7c:	e1a00004 	mov	r0, r4
   1bd80:	e8bd8010 	pop	{r4, pc}
   1bd84:	000420a0 	.word	0x000420a0

0001bd88 <CPHYTask::~CPHYTask()>:
   1bd88:	e3a02000 	mov	r2, #0
   1bd8c:	e92d4010 	push	{r4, lr}
   1bd90:	e1a04000 	mov	r4, r0
   1bd94:	e59f301c 	ldr	r3, [pc, #28]	; 1bdb8 <CPHYTask::~CPHYTask()+0x30>
   1bd98:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   1bd9c:	e5803000 	str	r3, [r0]
   1bda0:	eb001fd2 	bl	23cf0 <CTask::~CTask()>
   1bda4:	e1a00004 	mov	r0, r4
   1bda8:	e3a010e0 	mov	r1, #224	; 0xe0
   1bdac:	eb003c75 	bl	2af88 <operator delete(void*, unsigned int)>
   1bdb0:	e1a00004 	mov	r0, r4
   1bdb4:	e8bd8010 	pop	{r4, pc}
   1bdb8:	000420a0 	.word	0x000420a0

0001bdbc <CPHYTask::Run()>:
   1bdbc:	e92d4070 	push	{r4, r5, r6, lr}
   1bdc0:	e1a04000 	mov	r4, r0
   1bdc4:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   1bdc8:	e3500000 	cmp	r0, #0
   1bdcc:	0a00000d 	beq	1be08 <CPHYTask::Run()+0x4c>
   1bdd0:	e59f5040 	ldr	r5, [pc, #64]	; 1be18 <CPHYTask::Run()+0x5c>
   1bdd4:	e5903000 	ldr	r3, [r0]
   1bdd8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1bddc:	e1530005 	cmp	r3, r5
   1bde0:	08bd8070 	popeq	{r4, r5, r6, pc}
   1bde4:	e12fff33 	blx	r3
   1bde8:	e3500000 	cmp	r0, #0
   1bdec:	08bd8070 	popeq	{r4, r5, r6, pc}
   1bdf0:	eb0021a3 	bl	24484 <CScheduler::Get()>
   1bdf4:	e3a01e7d 	mov	r1, #2000	; 0x7d0
   1bdf8:	eb00217d 	bl	243f4 <CScheduler::MsSleep(unsigned int)>
   1bdfc:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   1be00:	e3500000 	cmp	r0, #0
   1be04:	1afffff2 	bne	1bdd4 <CPHYTask::Run()+0x18>
   1be08:	e3a02026 	mov	r2, #38	; 0x26
   1be0c:	e59f1008 	ldr	r1, [pc, #8]	; 1be1c <CPHYTask::Run()+0x60>
   1be10:	e59f0008 	ldr	r0, [pc, #8]	; 1be20 <CPHYTask::Run()+0x64>
   1be14:	eb002246 	bl	24734 <assertion_failed>
   1be18:	000160d4 	.word	0x000160d4
   1be1c:	0004208c 	.word	0x0004208c
   1be20:	0003df08 	.word	0x0003df08

0001be24 <CPHYTask::CPHYTask(CNetDevice*)>:
   1be24:	e92d4070 	push	{r4, r5, r6, lr}
   1be28:	e1a04000 	mov	r4, r0
   1be2c:	e1a05001 	mov	r5, r1
   1be30:	e3a01902 	mov	r1, #32768	; 0x8000
   1be34:	eb001ffe 	bl	23e34 <CTask::CTask(unsigned int)>
   1be38:	e59f300c 	ldr	r3, [pc, #12]	; 1be4c <CPHYTask::CPHYTask(CNetDevice*)+0x28>
   1be3c:	e1a00004 	mov	r0, r4
   1be40:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   1be44:	e5843000 	str	r3, [r4]
   1be48:	e8bd8070 	pop	{r4, r5, r6, pc}
   1be4c:	000420a0 	.word	0x000420a0

0001be50 <CARPHandler::TimerHandler(unsigned int, void*, void*)>:
   1be50:	e92d4070 	push	{r4, r5, r6, lr}
   1be54:	e2524000 	subs	r4, r2, #0
   1be58:	0a00001a 	beq	1bec8 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x78>
   1be5c:	e5943010 	ldr	r3, [r4, #16]
   1be60:	e1a05001 	mov	r5, r1
   1be64:	e1530001 	cmp	r3, r1
   1be68:	9a00001a 	bls	1bed8 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x88>
   1be6c:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1be70:	e3500000 	cmp	r0, #0
   1be74:	1a000006 	bne	1be94 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x44>
   1be78:	e0615181 	rsb	r5, r1, r1, lsl #3
   1be7c:	e0844105 	add	r4, r4, r5, lsl #2
   1be80:	e5d43014 	ldrb	r3, [r4, #20]
   1be84:	e3530001 	cmp	r3, #1
   1be88:	03a03002 	moveq	r3, #2
   1be8c:	05c43014 	strbeq	r3, [r4, #20]
   1be90:	e8bd8070 	pop	{r4, r5, r6, pc}
   1be94:	e0655185 	rsb	r5, r5, r5, lsl #3
   1be98:	e0845105 	add	r5, r4, r5, lsl #2
   1be9c:	eb003f58 	bl	2bc04 <EnterCritical>
   1bea0:	e5d53014 	ldrb	r3, [r5, #20]
   1bea4:	e3530001 	cmp	r3, #1
   1bea8:	03a02002 	moveq	r2, #2
   1beac:	05943244 	ldreq	r3, [r4, #580]	; 0x244
   1beb0:	15943244 	ldrne	r3, [r4, #580]	; 0x244
   1beb4:	05c52014 	strbeq	r2, [r5, #20]
   1beb8:	e3530000 	cmp	r3, #0
   1bebc:	08bd8070 	popeq	{r4, r5, r6, pc}
   1bec0:	e8bd4070 	pop	{r4, r5, r6, lr}
   1bec4:	ea003f78 	b	2bcac <LeaveCritical>
   1bec8:	e59f2018 	ldr	r2, [pc, #24]	; 1bee8 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x98>
   1becc:	e59f1018 	ldr	r1, [pc, #24]	; 1beec <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x9c>
   1bed0:	e59f0018 	ldr	r0, [pc, #24]	; 1bef0 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa0>
   1bed4:	eb002216 	bl	24734 <assertion_failed>
   1bed8:	e3a02f6b 	mov	r2, #428	; 0x1ac
   1bedc:	e59f1008 	ldr	r1, [pc, #8]	; 1beec <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x9c>
   1bee0:	e59f000c 	ldr	r0, [pc, #12]	; 1bef4 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa4>
   1bee4:	eb002212 	bl	24734 <assertion_failed>
   1bee8:	000001a9 	.word	0x000001a9
   1beec:	000420ac 	.word	0x000420ac
   1bef0:	0003d518 	.word	0x0003d518
   1bef4:	000420bc 	.word	0x000420bc

0001bef8 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>:
   1bef8:	e92d4010 	push	{r4, lr}
   1befc:	e3a0e000 	mov	lr, #0
   1bf00:	e3a04001 	mov	r4, #1
   1bf04:	e151000e 	cmp	r1, lr
   1bf08:	e5801000 	str	r1, [r0]
   1bf0c:	e59d1008 	ldr	r1, [sp, #8]
   1bf10:	e1c020f4 	strd	r2, [r0, #4]
   1bf14:	e5804244 	str	r4, [r0, #580]	; 0x244
   1bf18:	e580100c 	str	r1, [r0, #12]
   1bf1c:	e580e010 	str	lr, [r0, #16]
   1bf20:	e580e248 	str	lr, [r0, #584]	; 0x248
   1bf24:	0a000009 	beq	1bf50 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x58>
   1bf28:	e3520000 	cmp	r2, #0
   1bf2c:	0a00000b 	beq	1bf60 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x68>
   1bf30:	e3530000 	cmp	r3, #0
   1bf34:	0a00000d 	beq	1bf70 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x78>
   1bf38:	e3510000 	cmp	r1, #0
   1bf3c:	18bd8010 	popne	{r4, pc}
   1bf40:	e3a02045 	mov	r2, #69	; 0x45
   1bf44:	e59f1034 	ldr	r1, [pc, #52]	; 1bf80 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x88>
   1bf48:	e59f0034 	ldr	r0, [pc, #52]	; 1bf84 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x8c>
   1bf4c:	eb0021f8 	bl	24734 <assertion_failed>
   1bf50:	e3a02042 	mov	r2, #66	; 0x42
   1bf54:	e59f1024 	ldr	r1, [pc, #36]	; 1bf80 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x88>
   1bf58:	e59f0028 	ldr	r0, [pc, #40]	; 1bf88 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x90>
   1bf5c:	eb0021f4 	bl	24734 <assertion_failed>
   1bf60:	e3a02043 	mov	r2, #67	; 0x43
   1bf64:	e59f1014 	ldr	r1, [pc, #20]	; 1bf80 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x88>
   1bf68:	e59f001c 	ldr	r0, [pc, #28]	; 1bf8c <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x94>
   1bf6c:	eb0021f0 	bl	24734 <assertion_failed>
   1bf70:	e3a02044 	mov	r2, #68	; 0x44
   1bf74:	e59f1004 	ldr	r1, [pc, #4]	; 1bf80 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x88>
   1bf78:	e59f0010 	ldr	r0, [pc, #16]	; 1bf90 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x98>
   1bf7c:	eb0021ec 	bl	24734 <assertion_failed>
   1bf80:	000420ac 	.word	0x000420ac
   1bf84:	000420d8 	.word	0x000420d8
   1bf88:	00041db0 	.word	0x00041db0
   1bf8c:	00041f70 	.word	0x00041f70
   1bf90:	00041e6c 	.word	0x00041e6c

0001bf94 <CARPHandler::~CARPHandler()>:
   1bf94:	e5903010 	ldr	r3, [r0, #16]
   1bf98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1bf9c:	e3530000 	cmp	r3, #0
   1bfa0:	e1a07000 	mov	r7, r0
   1bfa4:	0a000010 	beq	1bfec <CARPHandler::~CARPHandler()+0x58>
   1bfa8:	e3a05000 	mov	r5, #0
   1bfac:	e1a04000 	mov	r4, r0
   1bfb0:	e1a08005 	mov	r8, r5
   1bfb4:	e594602c 	ldr	r6, [r4, #44]	; 0x2c
   1bfb8:	e2855001 	add	r5, r5, #1
   1bfbc:	e3560000 	cmp	r6, #0
   1bfc0:	0a000005 	beq	1bfdc <CARPHandler::~CARPHandler()+0x48>
   1bfc4:	e1a00006 	mov	r0, r6
   1bfc8:	eb0014bc 	bl	212c0 <CNetQueue::~CNetQueue()>
   1bfcc:	e1a00006 	mov	r0, r6
   1bfd0:	e3a0100c 	mov	r1, #12
   1bfd4:	eb003beb 	bl	2af88 <operator delete(void*, unsigned int)>
   1bfd8:	e5973010 	ldr	r3, [r7, #16]
   1bfdc:	e1530005 	cmp	r3, r5
   1bfe0:	e584802c 	str	r8, [r4, #44]	; 0x2c
   1bfe4:	e284401c 	add	r4, r4, #28
   1bfe8:	8afffff1 	bhi	1bfb4 <CARPHandler::~CARPHandler()+0x20>
   1bfec:	e1a00007 	mov	r0, r7
   1bff0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001bff4 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>:
   1bff4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bff8:	e1a06000 	mov	r6, r0
   1bffc:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1c000:	e1a07001 	mov	r7, r1
   1c004:	e3500000 	cmp	r0, #0
   1c008:	e1a08002 	mov	r8, r2
   1c00c:	1a000029 	bne	1c0b8 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xc4>
   1c010:	e5962010 	ldr	r2, [r6, #16]
   1c014:	e3520000 	cmp	r2, #0
   1c018:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c01c:	e3a04000 	mov	r4, #0
   1c020:	e2865015 	add	r5, r6, #21
   1c024:	e0643184 	rsb	r3, r4, r4, lsl #3
   1c028:	e0863103 	add	r3, r6, r3, lsl #2
   1c02c:	e5d30014 	ldrb	r0, [r3, #20]
   1c030:	e1a09184 	lsl	r9, r4, #3
   1c034:	e3500001 	cmp	r0, #1
   1c038:	0a000002 	beq	1c048 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x54>
   1c03c:	e5d33014 	ldrb	r3, [r3, #20]
   1c040:	e3530002 	cmp	r3, #2
   1c044:	1a000005 	bne	1c060 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x6c>
   1c048:	e1a01005 	mov	r1, r5
   1c04c:	e1a00007 	mov	r0, r7
   1c050:	eb00135b 	bl	20dc4 <CIPAddress::operator==(unsigned char const*) const>
   1c054:	e3500000 	cmp	r0, #0
   1c058:	1a000009 	bne	1c084 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x90>
   1c05c:	e5962010 	ldr	r2, [r6, #16]
   1c060:	e2844001 	add	r4, r4, #1
   1c064:	e1520004 	cmp	r2, r4
   1c068:	e285501c 	add	r5, r5, #28
   1c06c:	8affffec 	bhi	1c024 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x30>
   1c070:	e5963244 	ldr	r3, [r6, #580]	; 0x244
   1c074:	e3530000 	cmp	r3, #0
   1c078:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c07c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c080:	ea003f09 	b	2bcac <LeaveCritical>
   1c084:	e0494004 	sub	r4, r9, r4
   1c088:	e0865104 	add	r5, r6, r4, lsl #2
   1c08c:	e1a04104 	lsl	r4, r4, #2
   1c090:	eb003773 	bl	29e64 <CTimer::Get()>
   1c094:	e2844019 	add	r4, r4, #25
   1c098:	e5951020 	ldr	r1, [r5, #32]
   1c09c:	eb003600 	bl	298a4 <CTimer::CancelKernelTimer(unsigned int)>
   1c0a0:	e1a00008 	mov	r0, r8
   1c0a4:	e0861004 	add	r1, r6, r4
   1c0a8:	eb003b0e 	bl	2ace8 <CMACAddress::CopyTo(unsigned char*) const>
   1c0ac:	e3a03003 	mov	r3, #3
   1c0b0:	e5c53014 	strb	r3, [r5, #20]
   1c0b4:	eaffffed 	b	1c070 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x7c>
   1c0b8:	eb003ed1 	bl	2bc04 <EnterCritical>
   1c0bc:	e5962010 	ldr	r2, [r6, #16]
   1c0c0:	e3520000 	cmp	r2, #0
   1c0c4:	1affffd4 	bne	1c01c <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x28>
   1c0c8:	eaffffe8 	b	1c070 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x7c>

0001c0cc <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>:
   1c0cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0d0:	e1a09000 	mov	r9, r0
   1c0d4:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1c0d8:	e1a06001 	mov	r6, r1
   1c0dc:	e3500000 	cmp	r0, #0
   1c0e0:	e1a08002 	mov	r8, r2
   1c0e4:	e24dd00c 	sub	sp, sp, #12
   1c0e8:	1a000049 	bne	1c214 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x148>
   1c0ec:	e599e010 	ldr	lr, [r9, #16]
   1c0f0:	e35e0000 	cmp	lr, #0
   1c0f4:	0a000032 	beq	1c1c4 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xf8>
   1c0f8:	e3a04000 	mov	r4, #0
   1c0fc:	e3a05014 	mov	r5, #20
   1c100:	e2897015 	add	r7, r9, #21
   1c104:	ea000004 	b	1c11c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x50>
   1c108:	e3550014 	cmp	r5, #20
   1c10c:	01a05004 	moveq	r5, r4
   1c110:	e2844001 	add	r4, r4, #1
   1c114:	e15e0004 	cmp	lr, r4
   1c118:	9a00000e 	bls	1c158 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x8c>
   1c11c:	e0643184 	rsb	r3, r4, r4, lsl #3
   1c120:	e0892103 	add	r2, r9, r3, lsl #2
   1c124:	e5d2c014 	ldrb	ip, [r2, #20]
   1c128:	e1a03103 	lsl	r3, r3, #2
   1c12c:	e35c0000 	cmp	ip, #0
   1c130:	0afffff4 	beq	1c108 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x3c>
   1c134:	e1a00006 	mov	r0, r6
   1c138:	e0871003 	add	r1, r7, r3
   1c13c:	eb001320 	bl	20dc4 <CIPAddress::operator==(unsigned char const*) const>
   1c140:	e3500000 	cmp	r0, #0
   1c144:	1a000017 	bne	1c1a8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xdc>
   1c148:	e599e010 	ldr	lr, [r9, #16]
   1c14c:	e2844001 	add	r4, r4, #1
   1c150:	e15e0004 	cmp	lr, r4
   1c154:	8afffff0 	bhi	1c11c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x50>
   1c158:	e3550014 	cmp	r5, #20
   1c15c:	0a000016 	beq	1c1bc <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xf0>
   1c160:	e0657185 	rsb	r7, r5, r5, lsl #3
   1c164:	e1a07107 	lsl	r7, r7, #2
   1c168:	e287a019 	add	sl, r7, #25
   1c16c:	e1a04185 	lsl	r4, r5, #3
   1c170:	e2877015 	add	r7, r7, #21
   1c174:	e1a00006 	mov	r0, r6
   1c178:	e0891007 	add	r1, r9, r7
   1c17c:	eb001392 	bl	20fcc <CIPAddress::CopyTo(unsigned char*) const>
   1c180:	e089100a 	add	r1, r9, sl
   1c184:	e1a00008 	mov	r0, r8
   1c188:	eb003ad6 	bl	2ace8 <CMACAddress::CopyTo(unsigned char*) const>
   1c18c:	eb003734 	bl	29e64 <CTimer::Get()>
   1c190:	eb003481 	bl	2939c <CTimer::GetTicks() const>
   1c194:	e3a03004 	mov	r3, #4
   1c198:	e0445005 	sub	r5, r4, r5
   1c19c:	e0895105 	add	r5, r9, r5, lsl #2
   1c1a0:	e5850028 	str	r0, [r5, #40]	; 0x28
   1c1a4:	e5c53014 	strb	r3, [r5, #20]
   1c1a8:	e5993244 	ldr	r3, [r9, #580]	; 0x244
   1c1ac:	e3530000 	cmp	r3, #0
   1c1b0:	1a00001f 	bne	1c234 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x168>
   1c1b4:	e28dd00c 	add	sp, sp, #12
   1c1b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1bc:	e35e0014 	cmp	lr, #20
   1c1c0:	0afffff8 	beq	1c1a8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xdc>
   1c1c4:	e1a0500e 	mov	r5, lr
   1c1c8:	e06ea18e 	rsb	sl, lr, lr, lsl #3
   1c1cc:	e1a0a10a 	lsl	sl, sl, #2
   1c1d0:	e28a7015 	add	r7, sl, #21
   1c1d4:	e28aa019 	add	sl, sl, #25
   1c1d8:	e3a03000 	mov	r3, #0
   1c1dc:	e06eb18e 	rsb	fp, lr, lr, lsl #3
   1c1e0:	e089b10b 	add	fp, r9, fp, lsl #2
   1c1e4:	e5cb3014 	strb	r3, [fp, #20]
   1c1e8:	e3a0000c 	mov	r0, #12
   1c1ec:	e1a0418e 	lsl	r4, lr, #3
   1c1f0:	eb003b56 	bl	2af50 <operator new(unsigned int)>
   1c1f4:	e58d0004 	str	r0, [sp, #4]
   1c1f8:	eb0013f8 	bl	211e0 <CNetQueue::CNetQueue()>
   1c1fc:	e5993010 	ldr	r3, [r9, #16]
   1c200:	e59d2004 	ldr	r2, [sp, #4]
   1c204:	e2833001 	add	r3, r3, #1
   1c208:	e58b202c 	str	r2, [fp, #44]	; 0x2c
   1c20c:	e5893010 	str	r3, [r9, #16]
   1c210:	eaffffd7 	b	1c174 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xa8>
   1c214:	eb003e7a 	bl	2bc04 <EnterCritical>
   1c218:	e599e010 	ldr	lr, [r9, #16]
   1c21c:	e35e0000 	cmp	lr, #0
   1c220:	e1a0500e 	mov	r5, lr
   1c224:	1affffb3 	bne	1c0f8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x2c>
   1c228:	e3a0a019 	mov	sl, #25
   1c22c:	e3a07015 	mov	r7, #21
   1c230:	eaffffe8 	b	1c1d8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x10c>
   1c234:	e28dd00c 	add	sp, sp, #12
   1c238:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c23c:	ea003e9a 	b	2bcac <LeaveCritical>

0001c240 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>:
   1c240:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1c244:	e1a04000 	mov	r4, r0
   1c248:	e5900000 	ldr	r0, [r0]
   1c24c:	e24dd034 	sub	sp, sp, #52	; 0x34
   1c250:	e3500000 	cmp	r0, #0
   1c254:	0a00002a 	beq	1c304 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xc4>
   1c258:	e1a08001 	mov	r8, r1
   1c25c:	e1a07002 	mov	r7, r2
   1c260:	e1a05003 	mov	r5, r3
   1c264:	eb001235 	bl	20b40 <CNetConfig::GetIPAddress() const>
   1c268:	e2509000 	subs	r9, r0, #0
   1c26c:	0a000028 	beq	1c314 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xd4>
   1c270:	e5940004 	ldr	r0, [r4, #4]
   1c274:	e3500000 	cmp	r0, #0
   1c278:	0a000029 	beq	1c324 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xe4>
   1c27c:	ebfffe95 	bl	1bcd8 <CNetDeviceLayer::GetMACAddress() const>
   1c280:	e2506000 	subs	r6, r0, #0
   1c284:	0a00002a 	beq	1c334 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xf4>
   1c288:	e1a00005 	mov	r0, r5
   1c28c:	e28d1004 	add	r1, sp, #4
   1c290:	eb003a94 	bl	2ace8 <CMACAddress::CopyTo(unsigned char*) const>
   1c294:	e1a00006 	mov	r0, r6
   1c298:	e28d100a 	add	r1, sp, #10
   1c29c:	eb003a91 	bl	2ace8 <CMACAddress::CopyTo(unsigned char*) const>
   1c2a0:	e3580000 	cmp	r8, #0
   1c2a4:	13a0cc01 	movne	ip, #256	; 0x100
   1c2a8:	03a0cc02 	moveq	ip, #512	; 0x200
   1c2ac:	e59f3090 	ldr	r3, [pc, #144]	; 1c344 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x104>
   1c2b0:	e59f2090 	ldr	r2, [pc, #144]	; 1c348 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x108>
   1c2b4:	e1a00006 	mov	r0, r6
   1c2b8:	e28d101a 	add	r1, sp, #26
   1c2bc:	e1cd21f0 	strd	r2, [sp, #16]
   1c2c0:	e1cdc1b8 	strh	ip, [sp, #24]
   1c2c4:	eb003a87 	bl	2ace8 <CMACAddress::CopyTo(unsigned char*) const>
   1c2c8:	e1a00009 	mov	r0, r9
   1c2cc:	e28d1020 	add	r1, sp, #32
   1c2d0:	eb00133d 	bl	20fcc <CIPAddress::CopyTo(unsigned char*) const>
   1c2d4:	e1a00005 	mov	r0, r5
   1c2d8:	e28d1024 	add	r1, sp, #36	; 0x24
   1c2dc:	eb003a81 	bl	2ace8 <CMACAddress::CopyTo(unsigned char*) const>
   1c2e0:	e1a00007 	mov	r0, r7
   1c2e4:	e28d102a 	add	r1, sp, #42	; 0x2a
   1c2e8:	eb001337 	bl	20fcc <CIPAddress::CopyTo(unsigned char*) const>
   1c2ec:	e3a0202a 	mov	r2, #42	; 0x2a
   1c2f0:	e5940004 	ldr	r0, [r4, #4]
   1c2f4:	e28d1004 	add	r1, sp, #4
   1c2f8:	ebfffe83 	bl	1bd0c <CNetDeviceLayer::Send(void const*, unsigned int)>
   1c2fc:	e28dd034 	add	sp, sp, #52	; 0x34
   1c300:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c304:	e59f2040 	ldr	r2, [pc, #64]	; 1c34c <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x10c>
   1c308:	e59f1040 	ldr	r1, [pc, #64]	; 1c350 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x110>
   1c30c:	e59f0040 	ldr	r0, [pc, #64]	; 1c354 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x114>
   1c310:	eb002107 	bl	24734 <assertion_failed>
   1c314:	e3a02f63 	mov	r2, #396	; 0x18c
   1c318:	e59f1030 	ldr	r1, [pc, #48]	; 1c350 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x110>
   1c31c:	e59f0034 	ldr	r0, [pc, #52]	; 1c358 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x118>
   1c320:	eb002103 	bl	24734 <assertion_failed>
   1c324:	e59f2030 	ldr	r2, [pc, #48]	; 1c35c <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x11c>
   1c328:	e59f1020 	ldr	r1, [pc, #32]	; 1c350 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x110>
   1c32c:	e59f002c 	ldr	r0, [pc, #44]	; 1c360 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x120>
   1c330:	eb0020ff 	bl	24734 <assertion_failed>
   1c334:	e3a02e19 	mov	r2, #400	; 0x190
   1c338:	e59f1010 	ldr	r1, [pc, #16]	; 1c350 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x110>
   1c33c:	e59f0020 	ldr	r0, [pc, #32]	; 1c364 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x124>
   1c340:	eb0020fb 	bl	24734 <assertion_failed>
   1c344:	04060008 	.word	0x04060008
   1c348:	01000608 	.word	0x01000608
   1c34c:	0000018a 	.word	0x0000018a
   1c350:	000420ac 	.word	0x000420ac
   1c354:	00041db0 	.word	0x00041db0
   1c358:	00041e94 	.word	0x00041e94
   1c35c:	0000018e 	.word	0x0000018e
   1c360:	00041f70 	.word	0x00041f70
   1c364:	00041f9c 	.word	0x00041f9c

0001c368 <CARPHandler::Process()>:
   1c368:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c36c:	e1a05000 	mov	r5, r0
   1c370:	e5900000 	ldr	r0, [r0]
   1c374:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1c378:	e3500000 	cmp	r0, #0
   1c37c:	e24dd00c 	sub	sp, sp, #12
   1c380:	0a0000c5 	beq	1c69c <CARPHandler::Process()+0x334>
   1c384:	eb0011ed 	bl	20b40 <CNetConfig::GetIPAddress() const>
   1c388:	e2504000 	subs	r4, r0, #0
   1c38c:	0a0000ca 	beq	1c6bc <CARPHandler::Process()+0x354>
   1c390:	e595000c 	ldr	r0, [r5, #12]
   1c394:	e3500000 	cmp	r0, #0
   1c398:	0a0000cb 	beq	1c6cc <CARPHandler::Process()+0x364>
   1c39c:	e28d3018 	add	r3, sp, #24
   1c3a0:	e28d6030 	add	r6, sp, #48	; 0x30
   1c3a4:	e2838008 	add	r8, r3, #8
   1c3a8:	e3a02000 	mov	r2, #0
   1c3ac:	e28d1018 	add	r1, sp, #24
   1c3b0:	eb00140d 	bl	213ec <CNetQueue::Dequeue(void*, void**)>
   1c3b4:	e2507000 	subs	r7, r0, #0
   1c3b8:	0a00000f 	beq	1c3fc <CARPHandler::Process()+0x94>
   1c3bc:	e357001b 	cmp	r7, #27
   1c3c0:	9a00000b 	bls	1c3f4 <CARPHandler::Process()+0x8c>
   1c3c4:	e1dd31b8 	ldrh	r3, [sp, #24]
   1c3c8:	e3530c01 	cmp	r3, #256	; 0x100
   1c3cc:	1a000008 	bne	1c3f4 <CARPHandler::Process()+0x8c>
   1c3d0:	e1dd31ba 	ldrh	r3, [sp, #26]
   1c3d4:	e3530008 	cmp	r3, #8
   1c3d8:	1a000005 	bne	1c3f4 <CARPHandler::Process()+0x8c>
   1c3dc:	e5dd301c 	ldrb	r3, [sp, #28]
   1c3e0:	e3530006 	cmp	r3, #6
   1c3e4:	1a000002 	bne	1c3f4 <CARPHandler::Process()+0x8c>
   1c3e8:	e5dd301d 	ldrb	r3, [sp, #29]
   1c3ec:	e3530004 	cmp	r3, #4
   1c3f0:	0a00008c 	beq	1c628 <CARPHandler::Process()+0x2c0>
   1c3f4:	e595000c 	ldr	r0, [r5, #12]
   1c3f8:	eaffffea 	b	1c3a8 <CARPHandler::Process()+0x40>
   1c3fc:	e5953008 	ldr	r3, [r5, #8]
   1c400:	e3530000 	cmp	r3, #0
   1c404:	0a0000b4 	beq	1c6dc <CARPHandler::Process()+0x374>
   1c408:	e5953004 	ldr	r3, [r5, #4]
   1c40c:	e3530000 	cmp	r3, #0
   1c410:	0a0000b5 	beq	1c6ec <CARPHandler::Process()+0x384>
   1c414:	e5952010 	ldr	r2, [r5, #16]
   1c418:	e3520000 	cmp	r2, #0
   1c41c:	0a000027 	beq	1c4c0 <CARPHandler::Process()+0x158>
   1c420:	e1a06007 	mov	r6, r7
   1c424:	e59fa318 	ldr	sl, [pc, #792]	; 1c744 <CARPHandler::Process()+0x3dc>
   1c428:	e2854019 	add	r4, r5, #25
   1c42c:	e28d9010 	add	r9, sp, #16
   1c430:	e066b186 	rsb	fp, r6, r6, lsl #3
   1c434:	e085b10b 	add	fp, r5, fp, lsl #2
   1c438:	e5db3014 	ldrb	r3, [fp, #20]
   1c43c:	e1a08186 	lsl	r8, r6, #3
   1c440:	e3530002 	cmp	r3, #2
   1c444:	e6ef3073 	uxtb	r3, r3
   1c448:	0a00003f 	beq	1c54c <CARPHandler::Process()+0x1e4>
   1c44c:	e3530003 	cmp	r3, #3
   1c450:	1a000016 	bne	1c4b0 <CARPHandler::Process()+0x148>
   1c454:	e5940013 	ldr	r0, [r4, #19]
   1c458:	e3500000 	cmp	r0, #0
   1c45c:	1a000009 	bne	1c488 <CARPHandler::Process()+0x120>
   1c460:	ea00006c 	b	1c618 <CARPHandler::Process()+0x2b0>
   1c464:	e3a02006 	mov	r2, #6
   1c468:	e1a01004 	mov	r1, r4
   1c46c:	e28d0018 	add	r0, sp, #24
   1c470:	eb0038d0 	bl	2a7b8 <memcpy>
   1c474:	e5950004 	ldr	r0, [r5, #4]
   1c478:	e1a0200b 	mov	r2, fp
   1c47c:	e28d1018 	add	r1, sp, #24
   1c480:	ebfffe21 	bl	1bd0c <CNetDeviceLayer::Send(void const*, unsigned int)>
   1c484:	e5940013 	ldr	r0, [r4, #19]
   1c488:	e3a02000 	mov	r2, #0
   1c48c:	e28d1018 	add	r1, sp, #24
   1c490:	eb0013d5 	bl	213ec <CNetQueue::Dequeue(void*, void**)>
   1c494:	e250b000 	subs	fp, r0, #0
   1c498:	1afffff1 	bne	1c464 <CARPHandler::Process()+0xfc>
   1c49c:	e3a03004 	mov	r3, #4
   1c4a0:	e0488006 	sub	r8, r8, r6
   1c4a4:	e0858108 	add	r8, r5, r8, lsl #2
   1c4a8:	e5c83014 	strb	r3, [r8, #20]
   1c4ac:	e5952010 	ldr	r2, [r5, #16]
   1c4b0:	e2866001 	add	r6, r6, #1
   1c4b4:	e1520006 	cmp	r2, r6
   1c4b8:	e284401c 	add	r4, r4, #28
   1c4bc:	8affffdb 	bhi	1c430 <CARPHandler::Process()+0xc8>
   1c4c0:	eb003667 	bl	29e64 <CTimer::Get()>
   1c4c4:	eb0033b4 	bl	2939c <CTimer::GetTicks() const>
   1c4c8:	e5953248 	ldr	r3, [r5, #584]	; 0x248
   1c4cc:	e59f2274 	ldr	r2, [pc, #628]	; 1c748 <CARPHandler::Process()+0x3e0>
   1c4d0:	e0403003 	sub	r3, r0, r3
   1c4d4:	e1530002 	cmp	r3, r2
   1c4d8:	e1a04000 	mov	r4, r0
   1c4dc:	9a000017 	bls	1c540 <CARPHandler::Process()+0x1d8>
   1c4e0:	e5950244 	ldr	r0, [r5, #580]	; 0x244
   1c4e4:	e5854248 	str	r4, [r5, #584]	; 0x248
   1c4e8:	e3500000 	cmp	r0, #0
   1c4ec:	1a000084 	bne	1c704 <CARPHandler::Process()+0x39c>
   1c4f0:	e595c010 	ldr	ip, [r5, #16]
   1c4f4:	e35c0000 	cmp	ip, #0
   1c4f8:	0a000010 	beq	1c540 <CARPHandler::Process()+0x1d8>
   1c4fc:	e3a06000 	mov	r6, #0
   1c500:	e285e028 	add	lr, r5, #40	; 0x28
   1c504:	e0673187 	rsb	r3, r7, r7, lsl #3
   1c508:	e0852103 	add	r2, r5, r3, lsl #2
   1c50c:	e5d21014 	ldrb	r1, [r2, #20]
   1c510:	e3510004 	cmp	r1, #4
   1c514:	1a000004 	bne	1c52c <CARPHandler::Process()+0x1c4>
   1c518:	e79e3103 	ldr	r3, [lr, r3, lsl #2]
   1c51c:	e2833cea 	add	r3, r3, #59904	; 0xea00
   1c520:	e2833060 	add	r3, r3, #96	; 0x60
   1c524:	e1530004 	cmp	r3, r4
   1c528:	35c26014 	strbcc	r6, [r2, #20]
   1c52c:	e2877001 	add	r7, r7, #1
   1c530:	e15c0007 	cmp	ip, r7
   1c534:	8afffff2 	bhi	1c504 <CARPHandler::Process()+0x19c>
   1c538:	e3500000 	cmp	r0, #0
   1c53c:	1a00006e 	bne	1c6fc <CARPHandler::Process()+0x394>
   1c540:	e28dde65 	add	sp, sp, #1616	; 0x650
   1c544:	e28dd00c 	add	sp, sp, #12
   1c548:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c54c:	e594300b 	ldr	r3, [r4, #11]
   1c550:	e3530002 	cmp	r3, #2
   1c554:	e2833001 	add	r3, r3, #1
   1c558:	e584300b 	str	r3, [r4, #11]
   1c55c:	8a00001b 	bhi	1c5d0 <CARPHandler::Process()+0x268>
   1c560:	e2441004 	sub	r1, r4, #4
   1c564:	e1a00009 	mov	r0, r9
   1c568:	eb001266 	bl	20f08 <CIPAddress::CIPAddress(unsigned char const*)>
   1c56c:	e28d0008 	add	r0, sp, #8
   1c570:	eb003991 	bl	2abbc <CMACAddress::CMACAddress()>
   1c574:	e28d0008 	add	r0, sp, #8
   1c578:	eb0039c5 	bl	2ac94 <CMACAddress::SetBroadcast()>
   1c57c:	e1a02009 	mov	r2, r9
   1c580:	e3a01001 	mov	r1, #1
   1c584:	e1a00005 	mov	r0, r5
   1c588:	e28d3008 	add	r3, sp, #8
   1c58c:	ebffff2b 	bl	1c240 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1c590:	e3a03001 	mov	r3, #1
   1c594:	e5cb3014 	strb	r3, [fp, #20]
   1c598:	eb003631 	bl	29e64 <CTimer::Get()>
   1c59c:	e1a0200a 	mov	r2, sl
   1c5a0:	e3a01050 	mov	r1, #80	; 0x50
   1c5a4:	e1a03006 	mov	r3, r6
   1c5a8:	e58d5000 	str	r5, [sp]
   1c5ac:	eb00346a 	bl	2975c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1c5b0:	e1a03000 	mov	r3, r0
   1c5b4:	e28d0008 	add	r0, sp, #8
   1c5b8:	e5843007 	str	r3, [r4, #7]
   1c5bc:	eb003981 	bl	2abc8 <CMACAddress::~CMACAddress()>
   1c5c0:	e1a00009 	mov	r0, r9
   1c5c4:	eb0011ce 	bl	20d04 <CIPAddress::~CIPAddress()>
   1c5c8:	e5952010 	ldr	r2, [r5, #16]
   1c5cc:	eaffffb7 	b	1c4b0 <CARPHandler::Process()+0x148>
   1c5d0:	e5940013 	ldr	r0, [r4, #19]
   1c5d4:	e3500000 	cmp	r0, #0
   1c5d8:	1a000004 	bne	1c5f0 <CARPHandler::Process()+0x288>
   1c5dc:	ea000032 	b	1c6ac <CARPHandler::Process()+0x344>
   1c5e0:	e5950008 	ldr	r0, [r5, #8]
   1c5e4:	e28d1018 	add	r1, sp, #24
   1c5e8:	ebfffce2 	bl	1b978 <CLinkLayer::ResolveFailed(void const*, unsigned int)>
   1c5ec:	e5940013 	ldr	r0, [r4, #19]
   1c5f0:	e3a02000 	mov	r2, #0
   1c5f4:	e28d1018 	add	r1, sp, #24
   1c5f8:	eb00137b 	bl	213ec <CNetQueue::Dequeue(void*, void**)>
   1c5fc:	e2502000 	subs	r2, r0, #0
   1c600:	1afffff6 	bne	1c5e0 <CARPHandler::Process()+0x278>
   1c604:	e0488006 	sub	r8, r8, r6
   1c608:	e0858108 	add	r8, r5, r8, lsl #2
   1c60c:	e5c82014 	strb	r2, [r8, #20]
   1c610:	e5952010 	ldr	r2, [r5, #16]
   1c614:	eaffffa5 	b	1c4b0 <CARPHandler::Process()+0x148>
   1c618:	e3a020aa 	mov	r2, #170	; 0xaa
   1c61c:	e59f1128 	ldr	r1, [pc, #296]	; 1c74c <CARPHandler::Process()+0x3e4>
   1c620:	e59f0128 	ldr	r0, [pc, #296]	; 1c750 <CARPHandler::Process()+0x3e8>
   1c624:	eb002042 	bl	24734 <assertion_failed>
   1c628:	e1a00004 	mov	r0, r4
   1c62c:	eb00127d 	bl	21028 <CIPAddress::IsNull() const>
   1c630:	e3500000 	cmp	r0, #0
   1c634:	1affff6e 	bne	1c3f4 <CARPHandler::Process()+0x8c>
   1c638:	e1a01006 	mov	r1, r6
   1c63c:	e1a00004 	mov	r0, r4
   1c640:	eb0011f6 	bl	20e20 <CIPAddress::operator!=(unsigned char const*) const>
   1c644:	e2507000 	subs	r7, r0, #0
   1c648:	1affff69 	bne	1c3f4 <CARPHandler::Process()+0x8c>
   1c64c:	e1a01008 	mov	r1, r8
   1c650:	e28d0008 	add	r0, sp, #8
   1c654:	eb003989 	bl	2ac80 <CMACAddress::CMACAddress(unsigned char const*)>
   1c658:	e28d0010 	add	r0, sp, #16
   1c65c:	e28d1026 	add	r1, sp, #38	; 0x26
   1c660:	eb001228 	bl	20f08 <CIPAddress::CIPAddress(unsigned char const*)>
   1c664:	e1dd31be 	ldrh	r3, [sp, #30]
   1c668:	e3530c01 	cmp	r3, #256	; 0x100
   1c66c:	0a00002a 	beq	1c71c <CARPHandler::Process()+0x3b4>
   1c670:	e3530c02 	cmp	r3, #512	; 0x200
   1c674:	1a000003 	bne	1c688 <CARPHandler::Process()+0x320>
   1c678:	e1a00005 	mov	r0, r5
   1c67c:	e28d2008 	add	r2, sp, #8
   1c680:	e28d1010 	add	r1, sp, #16
   1c684:	ebfffe5a 	bl	1bff4 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>
   1c688:	e28d0010 	add	r0, sp, #16
   1c68c:	eb00119c 	bl	20d04 <CIPAddress::~CIPAddress()>
   1c690:	e28d0008 	add	r0, sp, #8
   1c694:	eb00394b 	bl	2abc8 <CMACAddress::~CMACAddress()>
   1c698:	eaffff55 	b	1c3f4 <CARPHandler::Process()+0x8c>
   1c69c:	e3a02057 	mov	r2, #87	; 0x57
   1c6a0:	e59f10a4 	ldr	r1, [pc, #164]	; 1c74c <CARPHandler::Process()+0x3e4>
   1c6a4:	e59f00a8 	ldr	r0, [pc, #168]	; 1c754 <CARPHandler::Process()+0x3ec>
   1c6a8:	eb002021 	bl	24734 <assertion_failed>
   1c6ac:	e3a0209f 	mov	r2, #159	; 0x9f
   1c6b0:	e59f1094 	ldr	r1, [pc, #148]	; 1c74c <CARPHandler::Process()+0x3e4>
   1c6b4:	e59f0094 	ldr	r0, [pc, #148]	; 1c750 <CARPHandler::Process()+0x3e8>
   1c6b8:	eb00201d 	bl	24734 <assertion_failed>
   1c6bc:	e3a02059 	mov	r2, #89	; 0x59
   1c6c0:	e59f1084 	ldr	r1, [pc, #132]	; 1c74c <CARPHandler::Process()+0x3e4>
   1c6c4:	e59f008c 	ldr	r0, [pc, #140]	; 1c758 <CARPHandler::Process()+0x3f0>
   1c6c8:	eb002019 	bl	24734 <assertion_failed>
   1c6cc:	e3a0205f 	mov	r2, #95	; 0x5f
   1c6d0:	e59f1074 	ldr	r1, [pc, #116]	; 1c74c <CARPHandler::Process()+0x3e4>
   1c6d4:	e59f0080 	ldr	r0, [pc, #128]	; 1c75c <CARPHandler::Process()+0x3f4>
   1c6d8:	eb002015 	bl	24734 <assertion_failed>
   1c6dc:	e3a02088 	mov	r2, #136	; 0x88
   1c6e0:	e59f1064 	ldr	r1, [pc, #100]	; 1c74c <CARPHandler::Process()+0x3e4>
   1c6e4:	e59f0074 	ldr	r0, [pc, #116]	; 1c760 <CARPHandler::Process()+0x3f8>
   1c6e8:	eb002011 	bl	24734 <assertion_failed>
   1c6ec:	e3a02089 	mov	r2, #137	; 0x89
   1c6f0:	e59f1054 	ldr	r1, [pc, #84]	; 1c74c <CARPHandler::Process()+0x3e4>
   1c6f4:	e59f0068 	ldr	r0, [pc, #104]	; 1c764 <CARPHandler::Process()+0x3fc>
   1c6f8:	eb00200d 	bl	24734 <assertion_failed>
   1c6fc:	eb003d6a 	bl	2bcac <LeaveCritical>
   1c700:	eaffff8e 	b	1c540 <CARPHandler::Process()+0x1d8>
   1c704:	eb003d3e 	bl	2bc04 <EnterCritical>
   1c708:	e595c010 	ldr	ip, [r5, #16]
   1c70c:	e5950244 	ldr	r0, [r5, #580]	; 0x244
   1c710:	e35c0000 	cmp	ip, #0
   1c714:	1affff78 	bne	1c4fc <CARPHandler::Process()+0x194>
   1c718:	eaffff86 	b	1c538 <CARPHandler::Process()+0x1d0>
   1c71c:	e1a01007 	mov	r1, r7
   1c720:	e1a00005 	mov	r0, r5
   1c724:	e28d2010 	add	r2, sp, #16
   1c728:	e28d3008 	add	r3, sp, #8
   1c72c:	ebfffec3 	bl	1c240 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1c730:	e1a00005 	mov	r0, r5
   1c734:	e28d2008 	add	r2, sp, #8
   1c738:	e28d1010 	add	r1, sp, #16
   1c73c:	ebfffe62 	bl	1c0cc <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>
   1c740:	eaffffd0 	b	1c688 <CARPHandler::Process()+0x320>
   1c744:	0001be50 	.word	0x0001be50
   1c748:	0000176f 	.word	0x0000176f
   1c74c:	000420ac 	.word	0x000420ac
   1c750:	000420e8 	.word	0x000420e8
   1c754:	00041db0 	.word	0x00041db0
   1c758:	00041e94 	.word	0x00041e94
   1c75c:	000420d8 	.word	0x000420d8
   1c760:	00041e6c 	.word	0x00041e6c
   1c764:	00041f70 	.word	0x00041f70

0001c768 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>:
   1c768:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c76c:	e1a05000 	mov	r5, r0
   1c770:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1c774:	e24dd024 	sub	sp, sp, #36	; 0x24
   1c778:	e3500000 	cmp	r0, #0
   1c77c:	e1a09001 	mov	r9, r1
   1c780:	e58d2014 	str	r2, [sp, #20]
   1c784:	e58d3010 	str	r3, [sp, #16]
   1c788:	1a00007f 	bne	1c98c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x224>
   1c78c:	e595c010 	ldr	ip, [r5, #16]
   1c790:	e35c0000 	cmp	ip, #0
   1c794:	e1a0700c 	mov	r7, ip
   1c798:	0a0000a7 	beq	1ca3c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2d4>
   1c79c:	e3e08000 	mvn	r8, #0
   1c7a0:	e285a015 	add	sl, r5, #21
   1c7a4:	e3a04000 	mov	r4, #0
   1c7a8:	e3a07014 	mov	r7, #20
   1c7ac:	e1a0600a 	mov	r6, sl
   1c7b0:	e58d800c 	str	r8, [sp, #12]
   1c7b4:	ea000007 	b	1c7d8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x70>
   1c7b8:	e3530000 	cmp	r3, #0
   1c7bc:	1a00004f 	bne	1c900 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x198>
   1c7c0:	e3570014 	cmp	r7, #20
   1c7c4:	01a07004 	moveq	r7, r4
   1c7c8:	e2844001 	add	r4, r4, #1
   1c7cc:	e15c0004 	cmp	ip, r4
   1c7d0:	e286601c 	add	r6, r6, #28
   1c7d4:	9a000018 	bls	1c83c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xd4>
   1c7d8:	e064b184 	rsb	fp, r4, r4, lsl #3
   1c7dc:	e085a10b 	add	sl, r5, fp, lsl #2
   1c7e0:	e5da3014 	ldrb	r3, [sl, #20]
   1c7e4:	e1a0b10b 	lsl	fp, fp, #2
   1c7e8:	e3530003 	cmp	r3, #3
   1c7ec:	e6ef3073 	uxtb	r3, r3
   1c7f0:	9afffff0 	bls	1c7b8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x50>
   1c7f4:	e3530004 	cmp	r3, #4
   1c7f8:	1a00009d 	bne	1ca74 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x30c>
   1c7fc:	e5963013 	ldr	r3, [r6, #19]
   1c800:	e1a01006 	mov	r1, r6
   1c804:	e1530008 	cmp	r3, r8
   1c808:	31a08003 	movcc	r8, r3
   1c80c:	e59d300c 	ldr	r3, [sp, #12]
   1c810:	31a03004 	movcc	r3, r4
   1c814:	e1a00009 	mov	r0, r9
   1c818:	e58d300c 	str	r3, [sp, #12]
   1c81c:	eb001168 	bl	20dc4 <CIPAddress::operator==(unsigned char const*) const>
   1c820:	e3500000 	cmp	r0, #0
   1c824:	1a00006c 	bne	1c9dc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x274>
   1c828:	e595c010 	ldr	ip, [r5, #16]
   1c82c:	e2844001 	add	r4, r4, #1
   1c830:	e15c0004 	cmp	ip, r4
   1c834:	e286601c 	add	r6, r6, #28
   1c838:	8affffe6 	bhi	1c7d8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x70>
   1c83c:	e3570014 	cmp	r7, #20
   1c840:	0a000043 	beq	1c954 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x1ec>
   1c844:	e0676187 	rsb	r6, r7, r7, lsl #3
   1c848:	e1a06106 	lsl	r6, r6, #2
   1c84c:	e2866015 	add	r6, r6, #21
   1c850:	e1a04187 	lsl	r4, r7, #3
   1c854:	e3a08001 	mov	r8, #1
   1c858:	e0444007 	sub	r4, r4, r7
   1c85c:	e0854104 	add	r4, r5, r4, lsl #2
   1c860:	e1a00009 	mov	r0, r9
   1c864:	e0851006 	add	r1, r5, r6
   1c868:	e5c48014 	strb	r8, [r4, #20]
   1c86c:	eb0011d6 	bl	20fcc <CIPAddress::CopyTo(unsigned char*) const>
   1c870:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c874:	e3500000 	cmp	r0, #0
   1c878:	0a00006b 	beq	1ca2c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2c4>
   1c87c:	e3a03000 	mov	r3, #0
   1c880:	e59d1010 	ldr	r1, [sp, #16]
   1c884:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1c888:	eb001291 	bl	212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c88c:	eb003574 	bl	29e64 <CTimer::Get()>
   1c890:	eb0032c1 	bl	2939c <CTimer::GetTicks() const>
   1c894:	e5848024 	str	r8, [r4, #36]	; 0x24
   1c898:	e5840028 	str	r0, [r4, #40]	; 0x28
   1c89c:	eb003570 	bl	29e64 <CTimer::Get()>
   1c8a0:	e1a03007 	mov	r3, r7
   1c8a4:	e3a01050 	mov	r1, #80	; 0x50
   1c8a8:	e59f21d4 	ldr	r2, [pc, #468]	; 1ca84 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x31c>
   1c8ac:	e58d5000 	str	r5, [sp]
   1c8b0:	eb0033a9 	bl	2975c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1c8b4:	e5840020 	str	r0, [r4, #32]
   1c8b8:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   1c8bc:	e3530000 	cmp	r3, #0
   1c8c0:	1a000057 	bne	1ca24 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2bc>
   1c8c4:	e28d0018 	add	r0, sp, #24
   1c8c8:	eb0038bb 	bl	2abbc <CMACAddress::CMACAddress()>
   1c8cc:	e28d0018 	add	r0, sp, #24
   1c8d0:	eb0038ef 	bl	2ac94 <CMACAddress::SetBroadcast()>
   1c8d4:	e1a02009 	mov	r2, r9
   1c8d8:	e1a00005 	mov	r0, r5
   1c8dc:	e3a01001 	mov	r1, #1
   1c8e0:	e28d3018 	add	r3, sp, #24
   1c8e4:	ebfffe55 	bl	1c240 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1c8e8:	e28d0018 	add	r0, sp, #24
   1c8ec:	eb0038b5 	bl	2abc8 <CMACAddress::~CMACAddress()>
   1c8f0:	e3a02000 	mov	r2, #0
   1c8f4:	e1a00002 	mov	r0, r2
   1c8f8:	e28dd024 	add	sp, sp, #36	; 0x24
   1c8fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c900:	e1a01006 	mov	r1, r6
   1c904:	e1a00009 	mov	r0, r9
   1c908:	eb00112d 	bl	20dc4 <CIPAddress::operator==(unsigned char const*) const>
   1c90c:	e3500000 	cmp	r0, #0
   1c910:	0affffc4 	beq	1c828 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xc0>
   1c914:	e59a002c 	ldr	r0, [sl, #44]	; 0x2c
   1c918:	e3500000 	cmp	r0, #0
   1c91c:	0a00004c 	beq	1ca54 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2ec>
   1c920:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1c924:	e3a03000 	mov	r3, #0
   1c928:	e59d1010 	ldr	r1, [sp, #16]
   1c92c:	eb001268 	bl	212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c930:	eb00354b 	bl	29e64 <CTimer::Get()>
   1c934:	eb003298 	bl	2939c <CTimer::GetTicks() const>
   1c938:	e58a0028 	str	r0, [sl, #40]	; 0x28
   1c93c:	e5952244 	ldr	r2, [r5, #580]	; 0x244
   1c940:	e3520000 	cmp	r2, #0
   1c944:	0affffea 	beq	1c8f4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x18c>
   1c948:	eb003cd7 	bl	2bcac <LeaveCritical>
   1c94c:	e3a02000 	mov	r2, #0
   1c950:	eaffffe7 	b	1c8f4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x18c>
   1c954:	e35c0014 	cmp	ip, #20
   1c958:	1a00000d 	bne	1c994 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x22c>
   1c95c:	e59d300c 	ldr	r3, [sp, #12]
   1c960:	e3530013 	cmp	r3, #19
   1c964:	8a00003e 	bhi	1ca64 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2fc>
   1c968:	e3a02000 	mov	r2, #0
   1c96c:	e59d700c 	ldr	r7, [sp, #12]
   1c970:	e0673187 	rsb	r3, r7, r7, lsl #3
   1c974:	e1a06103 	lsl	r6, r3, #2
   1c978:	e0853103 	add	r3, r5, r3, lsl #2
   1c97c:	e2866015 	add	r6, r6, #21
   1c980:	e5c32014 	strb	r2, [r3, #20]
   1c984:	e1a04187 	lsl	r4, r7, #3
   1c988:	eaffffb1 	b	1c854 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xec>
   1c98c:	eb003c9c 	bl	2bc04 <EnterCritical>
   1c990:	eaffff7d 	b	1c78c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x24>
   1c994:	e1a0700c 	mov	r7, ip
   1c998:	e06c618c 	rsb	r6, ip, ip, lsl #3
   1c99c:	e1a06106 	lsl	r6, r6, #2
   1c9a0:	e2866015 	add	r6, r6, #21
   1c9a4:	e3a03000 	mov	r3, #0
   1c9a8:	e06c818c 	rsb	r8, ip, ip, lsl #3
   1c9ac:	e0858108 	add	r8, r5, r8, lsl #2
   1c9b0:	e5c83014 	strb	r3, [r8, #20]
   1c9b4:	e3a0000c 	mov	r0, #12
   1c9b8:	e1a0418c 	lsl	r4, ip, #3
   1c9bc:	eb003963 	bl	2af50 <operator new(unsigned int)>
   1c9c0:	e1a0a000 	mov	sl, r0
   1c9c4:	eb001205 	bl	211e0 <CNetQueue::CNetQueue()>
   1c9c8:	e5953010 	ldr	r3, [r5, #16]
   1c9cc:	e588a02c 	str	sl, [r8, #44]	; 0x2c
   1c9d0:	e2833001 	add	r3, r3, #1
   1c9d4:	e5853010 	str	r3, [r5, #16]
   1c9d8:	eaffff9d 	b	1c854 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xec>
   1c9dc:	e59d3014 	ldr	r3, [sp, #20]
   1c9e0:	e3530000 	cmp	r3, #0
   1c9e4:	0a000016 	beq	1ca44 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2dc>
   1c9e8:	e28b3019 	add	r3, fp, #25
   1c9ec:	e0851003 	add	r1, r5, r3
   1c9f0:	e58d000c 	str	r0, [sp, #12]
   1c9f4:	e59d0014 	ldr	r0, [sp, #20]
   1c9f8:	eb003890 	bl	2ac40 <CMACAddress::Set(unsigned char const*)>
   1c9fc:	eb003518 	bl	29e64 <CTimer::Get()>
   1ca00:	eb003265 	bl	2939c <CTimer::GetTicks() const>
   1ca04:	e58a0028 	str	r0, [sl, #40]	; 0x28
   1ca08:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   1ca0c:	e59d200c 	ldr	r2, [sp, #12]
   1ca10:	e3530000 	cmp	r3, #0
   1ca14:	0affffb6 	beq	1c8f4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x18c>
   1ca18:	eb003ca3 	bl	2bcac <LeaveCritical>
   1ca1c:	e59d200c 	ldr	r2, [sp, #12]
   1ca20:	eaffffb3 	b	1c8f4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x18c>
   1ca24:	eb003ca0 	bl	2bcac <LeaveCritical>
   1ca28:	eaffffa5 	b	1c8c4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x15c>
   1ca2c:	e59f2054 	ldr	r2, [pc, #84]	; 1ca88 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x320>
   1ca30:	e59f1054 	ldr	r1, [pc, #84]	; 1ca8c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   1ca34:	e59f0054 	ldr	r0, [pc, #84]	; 1ca90 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x328>
   1ca38:	eb001f3d 	bl	24734 <assertion_failed>
   1ca3c:	e3a06015 	mov	r6, #21
   1ca40:	eaffffd7 	b	1c9a4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x23c>
   1ca44:	e3a020ff 	mov	r2, #255	; 0xff
   1ca48:	e59f103c 	ldr	r1, [pc, #60]	; 1ca8c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   1ca4c:	e59f0040 	ldr	r0, [pc, #64]	; 1ca94 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x32c>
   1ca50:	eb001f37 	bl	24734 <assertion_failed>
   1ca54:	e3a020eb 	mov	r2, #235	; 0xeb
   1ca58:	e59f102c 	ldr	r1, [pc, #44]	; 1ca8c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   1ca5c:	e59f0034 	ldr	r0, [pc, #52]	; 1ca98 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x330>
   1ca60:	eb001f33 	bl	24734 <assertion_failed>
   1ca64:	e59f2030 	ldr	r2, [pc, #48]	; 1ca9c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x334>
   1ca68:	e59f101c 	ldr	r1, [pc, #28]	; 1ca8c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   1ca6c:	e59f002c 	ldr	r0, [pc, #44]	; 1caa0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1ca70:	eb001f2f 	bl	24734 <assertion_failed>
   1ca74:	e59f2028 	ldr	r2, [pc, #40]	; 1caa4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x33c>
   1ca78:	e59f100c 	ldr	r1, [pc, #12]	; 1ca8c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   1ca7c:	e59f0024 	ldr	r0, [pc, #36]	; 1caa8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x340>
   1ca80:	eb001f2b 	bl	24734 <assertion_failed>
   1ca84:	0001be50 	.word	0x0001be50
   1ca88:	00000129 	.word	0x00000129
   1ca8c:	000420ac 	.word	0x000420ac
   1ca90:	000420e8 	.word	0x000420e8
   1ca94:	00042120 	.word	0x00042120
   1ca98:	00042100 	.word	0x00042100
   1ca9c:	0000011d 	.word	0x0000011d
   1caa0:	00042134 	.word	0x00042134
   1caa4:	0000010a 	.word	0x0000010a
   1caa8:	0003e11c 	.word	0x0003e11c

0001caac <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>:
   1caac:	e92d4010 	push	{r4, lr}
   1cab0:	e59de008 	ldr	lr, [sp, #8]
   1cab4:	e3510000 	cmp	r1, #0
   1cab8:	e880400e 	stm	r0, {r1, r2, r3, lr}
   1cabc:	0a000009 	beq	1cae8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x3c>
   1cac0:	e3520000 	cmp	r2, #0
   1cac4:	0a00000b 	beq	1caf8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x4c>
   1cac8:	e3530000 	cmp	r3, #0
   1cacc:	0a00000d 	beq	1cb08 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x5c>
   1cad0:	e35e0000 	cmp	lr, #0
   1cad4:	18bd8010 	popne	{r4, pc}
   1cad8:	e3a0203e 	mov	r2, #62	; 0x3e
   1cadc:	e59f1034 	ldr	r1, [pc, #52]	; 1cb18 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1cae0:	e59f0034 	ldr	r0, [pc, #52]	; 1cb1c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x70>
   1cae4:	eb001f12 	bl	24734 <assertion_failed>
   1cae8:	e3a0203b 	mov	r2, #59	; 0x3b
   1caec:	e59f1024 	ldr	r1, [pc, #36]	; 1cb18 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1caf0:	e59f0028 	ldr	r0, [pc, #40]	; 1cb20 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x74>
   1caf4:	eb001f0e 	bl	24734 <assertion_failed>
   1caf8:	e3a0203c 	mov	r2, #60	; 0x3c
   1cafc:	e59f1014 	ldr	r1, [pc, #20]	; 1cb18 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1cb00:	e59f001c 	ldr	r0, [pc, #28]	; 1cb24 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x78>
   1cb04:	eb001f0a 	bl	24734 <assertion_failed>
   1cb08:	e3a0203d 	mov	r2, #61	; 0x3d
   1cb0c:	e59f1004 	ldr	r1, [pc, #4]	; 1cb18 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1cb10:	e59f0010 	ldr	r0, [pc, #16]	; 1cb28 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x7c>
   1cb14:	eb001f06 	bl	24734 <assertion_failed>
   1cb18:	00042150 	.word	0x00042150
   1cb1c:	00042160 	.word	0x00042160
   1cb20:	00041db0 	.word	0x00041db0
   1cb24:	00041dc4 	.word	0x00041dc4
   1cb28:	000420d8 	.word	0x000420d8

0001cb2c <CICMPHandler::~CICMPHandler()>:
   1cb2c:	e12fff1e 	bx	lr

0001cb30 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>:
   1cb30:	e92d4070 	push	{r4, r5, r6, lr}
   1cb34:	e3510002 	cmp	r1, #2
   1cb38:	e24dd010 	sub	sp, sp, #16
   1cb3c:	8a000024 	bhi	1cbd4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xa4>
   1cb40:	e3520000 	cmp	r2, #0
   1cb44:	e1a05002 	mov	r5, r2
   1cb48:	e5cd1000 	strb	r1, [sp]
   1cb4c:	0a000024 	beq	1cbe4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xb4>
   1cb50:	e1a04003 	mov	r4, r3
   1cb54:	e5d23009 	ldrb	r3, [r2, #9]
   1cb58:	e2851010 	add	r1, r5, #16
   1cb5c:	e3a02004 	mov	r2, #4
   1cb60:	e1a06000 	mov	r6, r0
   1cb64:	e28d0002 	add	r0, sp, #2
   1cb68:	e5cd3001 	strb	r3, [sp, #1]
   1cb6c:	eb003711 	bl	2a7b8 <memcpy>
   1cb70:	e3a02004 	mov	r2, #4
   1cb74:	e285100c 	add	r1, r5, #12
   1cb78:	e28d0006 	add	r0, sp, #6
   1cb7c:	eb00370d 	bl	2a7b8 <memcpy>
   1cb80:	e3540000 	cmp	r4, #0
   1cb84:	0a00001a 	beq	1cbf4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xc4>
   1cb88:	e5d42002 	ldrb	r2, [r4, #2]
   1cb8c:	e5d4c003 	ldrb	ip, [r4, #3]
   1cb90:	e5d43000 	ldrb	r3, [r4]
   1cb94:	e5d41001 	ldrb	r1, [r4, #1]
   1cb98:	e596000c 	ldr	r0, [r6, #12]
   1cb9c:	e182240c 	orr	r2, r2, ip, lsl #8
   1cba0:	e1833401 	orr	r3, r3, r1, lsl #8
   1cba4:	e6bf2fb2 	rev16	r2, r2
   1cba8:	e6bf3fb3 	rev16	r3, r3
   1cbac:	e3500000 	cmp	r0, #0
   1cbb0:	e1cd20ba 	strh	r2, [sp, #10]
   1cbb4:	e1cd30bc 	strh	r3, [sp, #12]
   1cbb8:	0a000011 	beq	1cc04 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xd4>
   1cbbc:	e1a0100d 	mov	r1, sp
   1cbc0:	e3a03000 	mov	r3, #0
   1cbc4:	e3a0200e 	mov	r2, #14
   1cbc8:	eb0011c1 	bl	212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1cbcc:	e28dd010 	add	sp, sp, #16
   1cbd0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cbd4:	e3a020ee 	mov	r2, #238	; 0xee
   1cbd8:	e59f1034 	ldr	r1, [pc, #52]	; 1cc14 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cbdc:	e59f0034 	ldr	r0, [pc, #52]	; 1cc18 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe8>
   1cbe0:	eb001ed3 	bl	24734 <assertion_failed>
   1cbe4:	e3a020f3 	mov	r2, #243	; 0xf3
   1cbe8:	e59f1024 	ldr	r1, [pc, #36]	; 1cc14 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cbec:	e59f0028 	ldr	r0, [pc, #40]	; 1cc1c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xec>
   1cbf0:	eb001ecf 	bl	24734 <assertion_failed>
   1cbf4:	e3a020f8 	mov	r2, #248	; 0xf8
   1cbf8:	e59f1014 	ldr	r1, [pc, #20]	; 1cc14 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cbfc:	e59f001c 	ldr	r0, [pc, #28]	; 1cc20 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xf0>
   1cc00:	eb001ecb 	bl	24734 <assertion_failed>
   1cc04:	e3a020fc 	mov	r2, #252	; 0xfc
   1cc08:	e59f1004 	ldr	r1, [pc, #4]	; 1cc14 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cc0c:	e59f0010 	ldr	r0, [pc, #16]	; 1cc24 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xf4>
   1cc10:	eb001ec7 	bl	24734 <assertion_failed>
   1cc14:	00042150 	.word	0x00042150
   1cc18:	0004217c 	.word	0x0004217c
   1cc1c:	0004219c 	.word	0x0004219c
   1cc20:	000421ac 	.word	0x000421ac
   1cc24:	00042160 	.word	0x00042160

0001cc28 <CICMPHandler::Process()>:
   1cc28:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc2c:	e1a05000 	mov	r5, r0
   1cc30:	e5900008 	ldr	r0, [r0, #8]
   1cc34:	e24dde67 	sub	sp, sp, #1648	; 0x670
   1cc38:	e3500000 	cmp	r0, #0
   1cc3c:	e24dd004 	sub	sp, sp, #4
   1cc40:	0a00007c 	beq	1ce38 <CICMPHandler::Process()+0x210>
   1cc44:	e59fb388 	ldr	fp, [pc, #904]	; 1cfd4 <CICMPHandler::Process()+0x3ac>
   1cc48:	e59f7388 	ldr	r7, [pc, #904]	; 1cfd8 <CICMPHandler::Process()+0x3b0>
   1cc4c:	e59fa388 	ldr	sl, [pc, #904]	; 1cfdc <CICMPHandler::Process()+0x3b4>
   1cc50:	e59f9388 	ldr	r9, [pc, #904]	; 1cfe0 <CICMPHandler::Process()+0x3b8>
   1cc54:	e28d6018 	add	r6, sp, #24
   1cc58:	e28d2014 	add	r2, sp, #20
   1cc5c:	e28d1030 	add	r1, sp, #48	; 0x30
   1cc60:	eb0011e1 	bl	213ec <CNetQueue::Dequeue(void*, void**)>
   1cc64:	e2504000 	subs	r4, r0, #0
   1cc68:	0a000076 	beq	1ce48 <CICMPHandler::Process()+0x220>
   1cc6c:	e59d8014 	ldr	r8, [sp, #20]
   1cc70:	e3580000 	cmp	r8, #0
   1cc74:	0a000050 	beq	1cdbc <CICMPHandler::Process()+0x194>
   1cc78:	e5d82000 	ldrb	r2, [r8]
   1cc7c:	e3520001 	cmp	r2, #1
   1cc80:	1a000051 	bne	1cdcc <CICMPHandler::Process()+0x1a4>
   1cc84:	e2881001 	add	r1, r8, #1
   1cc88:	e1a00006 	mov	r0, r6
   1cc8c:	eb00109d 	bl	20f08 <CIPAddress::CIPAddress(unsigned char const*)>
   1cc90:	e2881005 	add	r1, r8, #5
   1cc94:	e28d0020 	add	r0, sp, #32
   1cc98:	eb00109a 	bl	20f08 <CIPAddress::CIPAddress(unsigned char const*)>
   1cc9c:	e1a00008 	mov	r0, r8
   1cca0:	e3a01009 	mov	r1, #9
   1cca4:	eb0038b7 	bl	2af88 <operator delete(void*, unsigned int)>
   1cca8:	e5953000 	ldr	r3, [r5]
   1ccac:	e3530000 	cmp	r3, #0
   1ccb0:	0a000049 	beq	1cddc <CICMPHandler::Process()+0x1b4>
   1ccb4:	e28d0020 	add	r0, sp, #32
   1ccb8:	eb0010e8 	bl	21060 <CIPAddress::IsBroadcast() const>
   1ccbc:	e3500000 	cmp	r0, #0
   1ccc0:	1a000008 	bne	1cce8 <CICMPHandler::Process()+0xc0>
   1ccc4:	e5950000 	ldr	r0, [r5]
   1ccc8:	eb000fa6 	bl	20b68 <CNetConfig::GetBroadcastAddress() const>
   1cccc:	e1a01000 	mov	r1, r0
   1ccd0:	e28d0020 	add	r0, sp, #32
   1ccd4:	eb00100b 	bl	20d08 <CIPAddress::operator==(CIPAddress const&) const>
   1ccd8:	e3540007 	cmp	r4, #7
   1ccdc:	93800001 	orrls	r0, r0, #1
   1cce0:	e31000ff 	tst	r0, #255	; 0xff
   1cce4:	0a000005 	beq	1cd00 <CICMPHandler::Process()+0xd8>
   1cce8:	e28d0020 	add	r0, sp, #32
   1ccec:	eb001004 	bl	20d04 <CIPAddress::~CIPAddress()>
   1ccf0:	e1a00006 	mov	r0, r6
   1ccf4:	eb001002 	bl	20d04 <CIPAddress::~CIPAddress()>
   1ccf8:	e5950008 	ldr	r0, [r5, #8]
   1ccfc:	eaffffd5 	b	1cc58 <CICMPHandler::Process()+0x30>
   1cd00:	e1a01004 	mov	r1, r4
   1cd04:	e28d0030 	add	r0, sp, #48	; 0x30
   1cd08:	eb00127a 	bl	216f8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1cd0c:	e3500000 	cmp	r0, #0
   1cd10:	1afffff4 	bne	1cce8 <CICMPHandler::Process()+0xc0>
   1cd14:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   1cd18:	e3530008 	cmp	r3, #8
   1cd1c:	0a000032 	beq	1cdec <CICMPHandler::Process()+0x1c4>
   1cd20:	e354001c 	cmp	r4, #28
   1cd24:	9affffef 	bls	1cce8 <CICMPHandler::Process()+0xc0>
   1cd28:	e5dd3038 	ldrb	r3, [sp, #56]	; 0x38
   1cd2c:	e203200f 	and	r2, r3, #15
   1cd30:	e2421005 	sub	r1, r2, #5
   1cd34:	e3510001 	cmp	r1, #1
   1cd38:	8affffea 	bhi	1cce8 <CICMPHandler::Process()+0xc0>
   1cd3c:	e1a03243 	asr	r3, r3, #4
   1cd40:	e3530004 	cmp	r3, #4
   1cd44:	1affffe7 	bne	1cce8 <CICMPHandler::Process()+0xc0>
   1cd48:	e5950000 	ldr	r0, [r5]
   1cd4c:	e58d200c 	str	r2, [sp, #12]
   1cd50:	eb000f7a 	bl	20b40 <CNetConfig::GetIPAddress() const>
   1cd54:	e28d1044 	add	r1, sp, #68	; 0x44
   1cd58:	eb001030 	bl	20e20 <CIPAddress::operator!=(unsigned char const*) const>
   1cd5c:	e3500000 	cmp	r0, #0
   1cd60:	1affffe0 	bne	1cce8 <CICMPHandler::Process()+0xc0>
   1cd64:	e59d200c 	ldr	r2, [sp, #12]
   1cd68:	e1a02102 	lsl	r2, r2, #2
   1cd6c:	e2823010 	add	r3, r2, #16
   1cd70:	e1530004 	cmp	r3, r4
   1cd74:	8affffdb 	bhi	1cce8 <CICMPHandler::Process()+0xc0>
   1cd78:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   1cd7c:	e28d4038 	add	r4, sp, #56	; 0x38
   1cd80:	e2433003 	sub	r3, r3, #3
   1cd84:	e0844002 	add	r4, r4, r2
   1cd88:	e3530009 	cmp	r3, #9
   1cd8c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1cd90:	eaffffd4 	b	1cce8 <CICMPHandler::Process()+0xc0>
   1cd94:	0001cf34 	.word	0x0001cf34
   1cd98:	0001cce8 	.word	0x0001cce8
   1cd9c:	0001cebc 	.word	0x0001cebc
   1cda0:	0001cce8 	.word	0x0001cce8
   1cda4:	0001cce8 	.word	0x0001cce8
   1cda8:	0001cce8 	.word	0x0001cce8
   1cdac:	0001cce8 	.word	0x0001cce8
   1cdb0:	0001cce8 	.word	0x0001cce8
   1cdb4:	0001ce88 	.word	0x0001ce88
   1cdb8:	0001ce54 	.word	0x0001ce54
   1cdbc:	e3a02052 	mov	r2, #82	; 0x52
   1cdc0:	e59f121c 	ldr	r1, [pc, #540]	; 1cfe4 <CICMPHandler::Process()+0x3bc>
   1cdc4:	e59f021c 	ldr	r0, [pc, #540]	; 1cfe8 <CICMPHandler::Process()+0x3c0>
   1cdc8:	eb001e59 	bl	24734 <assertion_failed>
   1cdcc:	e3a02053 	mov	r2, #83	; 0x53
   1cdd0:	e59f120c 	ldr	r1, [pc, #524]	; 1cfe4 <CICMPHandler::Process()+0x3bc>
   1cdd4:	e59f0210 	ldr	r0, [pc, #528]	; 1cfec <CICMPHandler::Process()+0x3c4>
   1cdd8:	eb001e55 	bl	24734 <assertion_failed>
   1cddc:	e3a0205b 	mov	r2, #91	; 0x5b
   1cde0:	e59f11fc 	ldr	r1, [pc, #508]	; 1cfe4 <CICMPHandler::Process()+0x3bc>
   1cde4:	e59f0204 	ldr	r0, [pc, #516]	; 1cff0 <CICMPHandler::Process()+0x3c8>
   1cde8:	eb001e51 	bl	24734 <assertion_failed>
   1cdec:	e5dd3031 	ldrb	r3, [sp, #49]	; 0x31
   1cdf0:	e3530000 	cmp	r3, #0
   1cdf4:	1affffbb 	bne	1cce8 <CICMPHandler::Process()+0xc0>
   1cdf8:	e1a01004 	mov	r1, r4
   1cdfc:	e28d0030 	add	r0, sp, #48	; 0x30
   1ce00:	e58d3030 	str	r3, [sp, #48]	; 0x30
   1ce04:	eb00123b 	bl	216f8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1ce08:	e5952004 	ldr	r2, [r5, #4]
   1ce0c:	e1cd03b2 	strh	r0, [sp, #50]	; 0x32
   1ce10:	e3520000 	cmp	r2, #0
   1ce14:	0a000053 	beq	1cf68 <CICMPHandler::Process()+0x340>
   1ce18:	e3a01001 	mov	r1, #1
   1ce1c:	e1a03004 	mov	r3, r4
   1ce20:	e58d1000 	str	r1, [sp]
   1ce24:	e1a00002 	mov	r0, r2
   1ce28:	e1a01006 	mov	r1, r6
   1ce2c:	e28d2030 	add	r2, sp, #48	; 0x30
   1ce30:	ebfff7b3 	bl	1ad04 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1ce34:	eaffffab 	b	1cce8 <CICMPHandler::Process()+0xc0>
   1ce38:	e3a0204e 	mov	r2, #78	; 0x4e
   1ce3c:	e59f11a0 	ldr	r1, [pc, #416]	; 1cfe4 <CICMPHandler::Process()+0x3bc>
   1ce40:	e59f01ac 	ldr	r0, [pc, #428]	; 1cff4 <CICMPHandler::Process()+0x3cc>
   1ce44:	eb001e3a 	bl	24734 <assertion_failed>
   1ce48:	e28dde67 	add	sp, sp, #1648	; 0x670
   1ce4c:	e28dd004 	add	sp, sp, #4
   1ce50:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce54:	eb00271e 	bl	26ad4 <CLogger::Get()>
   1ce58:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1ce5c:	e1a0300b 	mov	r3, fp
   1ce60:	e1a01007 	mov	r1, r7
   1ce64:	e58d2000 	str	r2, [sp]
   1ce68:	e3a02002 	mov	r2, #2
   1ce6c:	eb00265a 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ce70:	e1a03004 	mov	r3, r4
   1ce74:	e3a01002 	mov	r1, #2
   1ce78:	e1a00005 	mov	r0, r5
   1ce7c:	e28d2038 	add	r2, sp, #56	; 0x38
   1ce80:	ebffff2a 	bl	1cb30 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1ce84:	eaffff97 	b	1cce8 <CICMPHandler::Process()+0xc0>
   1ce88:	eb002711 	bl	26ad4 <CLogger::Get()>
   1ce8c:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1ce90:	e1a0300a 	mov	r3, sl
   1ce94:	e1a01007 	mov	r1, r7
   1ce98:	e58d2000 	str	r2, [sp]
   1ce9c:	e3a02002 	mov	r2, #2
   1cea0:	eb00264d 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cea4:	e1a03004 	mov	r3, r4
   1cea8:	e3a01001 	mov	r1, #1
   1ceac:	e1a00005 	mov	r0, r5
   1ceb0:	e28d2038 	add	r2, sp, #56	; 0x38
   1ceb4:	ebffff1d 	bl	1cb30 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1ceb8:	eaffff8a 	b	1cce8 <CICMPHandler::Process()+0xc0>
   1cebc:	e28d0028 	add	r0, sp, #40	; 0x28
   1cec0:	e28d1034 	add	r1, sp, #52	; 0x34
   1cec4:	eb00100f 	bl	20f08 <CIPAddress::CIPAddress(unsigned char const*)>
   1cec8:	e5953004 	ldr	r3, [r5, #4]
   1cecc:	e3530000 	cmp	r3, #0
   1ced0:	0a000028 	beq	1cf78 <CICMPHandler::Process()+0x350>
   1ced4:	e5950000 	ldr	r0, [r5]
   1ced8:	eb000f18 	bl	20b40 <CNetConfig::GetIPAddress() const>
   1cedc:	e1a01000 	mov	r1, r0
   1cee0:	e5950000 	ldr	r0, [r5]
   1cee4:	e58d100c 	str	r1, [sp, #12]
   1cee8:	eb000f18 	bl	20b50 <CNetConfig::GetNetMask() const>
   1ceec:	e59d100c 	ldr	r1, [sp, #12]
   1cef0:	e1a02000 	mov	r2, r0
   1cef4:	e28d0028 	add	r0, sp, #40	; 0x28
   1cef8:	eb00108b 	bl	2112c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   1cefc:	e3500000 	cmp	r0, #0
   1cf00:	0a000008 	beq	1cf28 <CICMPHandler::Process()+0x300>
   1cf04:	e28d4048 	add	r4, sp, #72	; 0x48
   1cf08:	e1a01004 	mov	r1, r4
   1cf0c:	e5950004 	ldr	r0, [r5, #4]
   1cf10:	ebfff8c1 	bl	1b21c <CNetworkLayer::GetGateway(unsigned char const*) const>
   1cf14:	e1a01000 	mov	r1, r0
   1cf18:	e1a00006 	mov	r0, r6
   1cf1c:	eb000fbf 	bl	20e20 <CIPAddress::operator!=(unsigned char const*) const>
   1cf20:	e3500000 	cmp	r0, #0
   1cf24:	0a000017 	beq	1cf88 <CICMPHandler::Process()+0x360>
   1cf28:	e28d0028 	add	r0, sp, #40	; 0x28
   1cf2c:	eb000f74 	bl	20d04 <CIPAddress::~CIPAddress()>
   1cf30:	eaffff6c 	b	1cce8 <CICMPHandler::Process()+0xc0>
   1cf34:	eb0026e6 	bl	26ad4 <CLogger::Get()>
   1cf38:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1cf3c:	e1a01007 	mov	r1, r7
   1cf40:	e58d2000 	str	r2, [sp]
   1cf44:	e59f30ac 	ldr	r3, [pc, #172]	; 1cff8 <CICMPHandler::Process()+0x3d0>
   1cf48:	e3a02004 	mov	r2, #4
   1cf4c:	eb002622 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cf50:	e1a03004 	mov	r3, r4
   1cf54:	e3a01000 	mov	r1, #0
   1cf58:	e1a00005 	mov	r0, r5
   1cf5c:	e28d2038 	add	r2, sp, #56	; 0x38
   1cf60:	ebfffef2 	bl	1cb30 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1cf64:	eaffff5f 	b	1cce8 <CICMPHandler::Process()+0xc0>
   1cf68:	e3a02078 	mov	r2, #120	; 0x78
   1cf6c:	e59f1070 	ldr	r1, [pc, #112]	; 1cfe4 <CICMPHandler::Process()+0x3bc>
   1cf70:	e59f0084 	ldr	r0, [pc, #132]	; 1cffc <CICMPHandler::Process()+0x3d4>
   1cf74:	eb001dee 	bl	24734 <assertion_failed>
   1cf78:	e3a020a7 	mov	r2, #167	; 0xa7
   1cf7c:	e59f1060 	ldr	r1, [pc, #96]	; 1cfe4 <CICMPHandler::Process()+0x3bc>
   1cf80:	e59f0074 	ldr	r0, [pc, #116]	; 1cffc <CICMPHandler::Process()+0x3d4>
   1cf84:	eb001dea 	bl	24734 <assertion_failed>
   1cf88:	eb0026d1 	bl	26ad4 <CLogger::Get()>
   1cf8c:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1cf90:	e1a01007 	mov	r1, r7
   1cf94:	e1a03009 	mov	r3, r9
   1cf98:	e58d2000 	str	r2, [sp]
   1cf9c:	e3a02004 	mov	r2, #4
   1cfa0:	eb00260d 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cfa4:	e5953004 	ldr	r3, [r5, #4]
   1cfa8:	e28d0028 	add	r0, sp, #40	; 0x28
   1cfac:	e58d300c 	str	r3, [sp, #12]
   1cfb0:	eb000ff9 	bl	20f9c <CIPAddress::Get() const>
   1cfb4:	e59d300c 	ldr	r3, [sp, #12]
   1cfb8:	e1a02000 	mov	r2, r0
   1cfbc:	e1a01004 	mov	r1, r4
   1cfc0:	e1a00003 	mov	r0, r3
   1cfc4:	ebfff892 	bl	1b214 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>
   1cfc8:	e28d0028 	add	r0, sp, #40	; 0x28
   1cfcc:	eb000f4c 	bl	20d04 <CIPAddress::~CIPAddress()>
   1cfd0:	eaffff44 	b	1cce8 <CICMPHandler::Process()+0xc0>
   1cfd4:	0004222c 	.word	0x0004222c
   1cfd8:	000423b8 	.word	0x000423b8
   1cfdc:	00042218 	.word	0x00042218
   1cfe0:	00042208 	.word	0x00042208
   1cfe4:	00042150 	.word	0x00042150
   1cfe8:	00041e2c 	.word	0x00041e2c
   1cfec:	000421c4 	.word	0x000421c4
   1cff0:	00041db0 	.word	0x00041db0
   1cff4:	000420d8 	.word	0x000420d8
   1cff8:	000421e8 	.word	0x000421e8
   1cffc:	00041dc4 	.word	0x00041dc4

0001d000 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>:
   1d000:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d004:	e2524000 	subs	r4, r2, #0
   1d008:	e24dd020 	sub	sp, sp, #32
   1d00c:	0a00003f 	beq	1d110 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x110>
   1d010:	e3530014 	cmp	r3, #20
   1d014:	e1a06003 	mov	r6, r3
   1d018:	9a000040 	bls	1d120 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x120>
   1d01c:	e5d43000 	ldrb	r3, [r4]
   1d020:	e1a08001 	mov	r8, r1
   1d024:	e203200f 	and	r2, r3, #15
   1d028:	e2421005 	sub	r1, r2, #5
   1d02c:	e3510001 	cmp	r1, #1
   1d030:	8a00003e 	bhi	1d130 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x130>
   1d034:	e1a03243 	asr	r3, r3, #4
   1d038:	e3530004 	cmp	r3, #4
   1d03c:	e1a05102 	lsl	r5, r2, #2
   1d040:	1a00003e 	bne	1d140 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x140>
   1d044:	e1a07000 	mov	r7, r0
   1d048:	e5900000 	ldr	r0, [r0]
   1d04c:	eb000ebb 	bl	20b40 <CNetConfig::GetIPAddress() const>
   1d050:	e284100c 	add	r1, r4, #12
   1d054:	eb000f5a 	bl	20dc4 <CIPAddress::operator==(unsigned char const*) const>
   1d058:	e3500000 	cmp	r0, #0
   1d05c:	0a00003b 	beq	1d150 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x150>
   1d060:	e2853008 	add	r3, r5, #8
   1d064:	e1530006 	cmp	r3, r6
   1d068:	8a00003c 	bhi	1d160 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x160>
   1d06c:	e3580000 	cmp	r8, #0
   1d070:	e0845005 	add	r5, r4, r5
   1d074:	0a000023 	beq	1d108 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x108>
   1d078:	e59f10f0 	ldr	r1, [pc, #240]	; 1d170 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x170>
   1d07c:	e59f30f0 	ldr	r3, [pc, #240]	; 1d174 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x174>
   1d080:	e3580001 	cmp	r8, #1
   1d084:	11a08001 	movne	r8, r1
   1d088:	01a08003 	moveq	r8, r3
   1d08c:	e28d0010 	add	r0, sp, #16
   1d090:	eb002a7f 	bl	27a94 <CString::CString()>
   1d094:	e2841010 	add	r1, r4, #16
   1d098:	e28d0008 	add	r0, sp, #8
   1d09c:	eb000f99 	bl	20f08 <CIPAddress::CIPAddress(unsigned char const*)>
   1d0a0:	e28d1010 	add	r1, sp, #16
   1d0a4:	e28d0008 	add	r0, sp, #8
   1d0a8:	eb000ffd 	bl	210a4 <CIPAddress::Format(CString*) const>
   1d0ac:	eb002688 	bl	26ad4 <CLogger::Get()>
   1d0b0:	e1a06000 	mov	r6, r0
   1d0b4:	e28d0010 	add	r0, sp, #16
   1d0b8:	eb002a8d 	bl	27af4 <CString::operator char const*() const>
   1d0bc:	e1a03000 	mov	r3, r0
   1d0c0:	e3a02004 	mov	r2, #4
   1d0c4:	e1a00006 	mov	r0, r6
   1d0c8:	e58d3004 	str	r3, [sp, #4]
   1d0cc:	e59f10a4 	ldr	r1, [pc, #164]	; 1d178 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x178>
   1d0d0:	e59f30a4 	ldr	r3, [pc, #164]	; 1d17c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x17c>
   1d0d4:	e58d8000 	str	r8, [sp]
   1d0d8:	eb0025bf 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d0dc:	e1a03005 	mov	r3, r5
   1d0e0:	e1a02004 	mov	r2, r4
   1d0e4:	e3a01000 	mov	r1, #0
   1d0e8:	e1a00007 	mov	r0, r7
   1d0ec:	ebfffe8f 	bl	1cb30 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1d0f0:	e28d0008 	add	r0, sp, #8
   1d0f4:	eb000f02 	bl	20d04 <CIPAddress::~CIPAddress()>
   1d0f8:	e28d0010 	add	r0, sp, #16
   1d0fc:	eb002a31 	bl	279c8 <CString::~CString()>
   1d100:	e28dd020 	add	sp, sp, #32
   1d104:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d108:	e59f8070 	ldr	r8, [pc, #112]	; 1d180 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1d10c:	eaffffde 	b	1d08c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x8c>
   1d110:	e3a020c9 	mov	r2, #201	; 0xc9
   1d114:	e59f1068 	ldr	r1, [pc, #104]	; 1d184 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d118:	e59f0068 	ldr	r0, [pc, #104]	; 1d188 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x188>
   1d11c:	eb001d84 	bl	24734 <assertion_failed>
   1d120:	e3a020ca 	mov	r2, #202	; 0xca
   1d124:	e59f1058 	ldr	r1, [pc, #88]	; 1d184 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d128:	e59f005c 	ldr	r0, [pc, #92]	; 1d18c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x18c>
   1d12c:	eb001d80 	bl	24734 <assertion_failed>
   1d130:	e3a020ce 	mov	r2, #206	; 0xce
   1d134:	e59f1048 	ldr	r1, [pc, #72]	; 1d184 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d138:	e59f0050 	ldr	r0, [pc, #80]	; 1d190 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x190>
   1d13c:	eb001d7c 	bl	24734 <assertion_failed>
   1d140:	e3a020d2 	mov	r2, #210	; 0xd2
   1d144:	e59f1038 	ldr	r1, [pc, #56]	; 1d184 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d148:	e59f0044 	ldr	r0, [pc, #68]	; 1d194 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x194>
   1d14c:	eb001d78 	bl	24734 <assertion_failed>
   1d150:	e3a020d3 	mov	r2, #211	; 0xd3
   1d154:	e59f1028 	ldr	r1, [pc, #40]	; 1d184 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d158:	e59f0038 	ldr	r0, [pc, #56]	; 1d198 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x198>
   1d15c:	eb001d74 	bl	24734 <assertion_failed>
   1d160:	e3a020d4 	mov	r2, #212	; 0xd4
   1d164:	e59f1018 	ldr	r1, [pc, #24]	; 1d184 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d168:	e59f002c 	ldr	r0, [pc, #44]	; 1d19c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x19c>
   1d16c:	eb001d70 	bl	24734 <assertion_failed>
   1d170:	00045ac0 	.word	0x00045ac0
   1d174:	00042250 	.word	0x00042250
   1d178:	000423b8 	.word	0x000423b8
   1d17c:	00042398 	.word	0x00042398
   1d180:	00042244 	.word	0x00042244
   1d184:	00042150 	.word	0x00042150
   1d188:	00042258 	.word	0x00042258
   1d18c:	00042270 	.word	0x00042270
   1d190:	00042290 	.word	0x00042290
   1d194:	000422f0 	.word	0x000422f0
   1d198:	0004231c 	.word	0x0004231c
   1d19c:	00042358 	.word	0x00042358

0001d1a0 <CRouteCache::CRouteCache()>:
   1d1a0:	e3a02064 	mov	r2, #100	; 0x64
   1d1a4:	e92d4010 	push	{r4, lr}
   1d1a8:	e1a04000 	mov	r4, r0
   1d1ac:	e1a01002 	mov	r1, r2
   1d1b0:	eb002958 	bl	27718 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   1d1b4:	e1a00004 	mov	r0, r4
   1d1b8:	e8bd8010 	pop	{r4, pc}

0001d1bc <CRouteCache::Flush()>:
   1d1bc:	e92d4070 	push	{r4, r5, r6, lr}
   1d1c0:	e1a05000 	mov	r5, r0
   1d1c4:	eb00297a 	bl	277b4 <CPtrArray::GetCount() const>
   1d1c8:	e3500000 	cmp	r0, #0
   1d1cc:	08bd8070 	popeq	{r4, r5, r6, pc}
   1d1d0:	e2404001 	sub	r4, r0, #1
   1d1d4:	e1a01004 	mov	r1, r4
   1d1d8:	e1a00005 	mov	r0, r5
   1d1dc:	eb002976 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1d1e0:	e5900000 	ldr	r0, [r0]
   1d1e4:	e2444001 	sub	r4, r4, #1
   1d1e8:	e3500000 	cmp	r0, #0
   1d1ec:	0a000001 	beq	1d1f8 <CRouteCache::Flush()+0x3c>
   1d1f0:	e3a01008 	mov	r1, #8
   1d1f4:	eb003763 	bl	2af88 <operator delete(void*, unsigned int)>
   1d1f8:	e1a00005 	mov	r0, r5
   1d1fc:	eb0029e4 	bl	27994 <CPtrArray::RemoveLast()>
   1d200:	e3740001 	cmn	r4, #1
   1d204:	1afffff2 	bne	1d1d4 <CRouteCache::Flush()+0x18>
   1d208:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d20c <CRouteCache::~CRouteCache()>:
   1d20c:	e92d4010 	push	{r4, lr}
   1d210:	e1a04000 	mov	r4, r0
   1d214:	ebffffe8 	bl	1d1bc <CRouteCache::Flush()>
   1d218:	e1a00004 	mov	r0, r4
   1d21c:	eb002959 	bl	27788 <CPtrArray::~CPtrArray()>
   1d220:	e1a00004 	mov	r0, r4
   1d224:	e8bd8010 	pop	{r4, pc}

0001d228 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>:
   1d228:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d22c:	e2516000 	subs	r6, r1, #0
   1d230:	0a000029 	beq	1d2dc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xb4>
   1d234:	e3520000 	cmp	r2, #0
   1d238:	e1a08002 	mov	r8, r2
   1d23c:	0a00002a 	beq	1d2ec <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xc4>
   1d240:	e1a07000 	mov	r7, r0
   1d244:	eb00295a 	bl	277b4 <CPtrArray::GetCount() const>
   1d248:	e2509000 	subs	r9, r0, #0
   1d24c:	0a000014 	beq	1d2a4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x7c>
   1d250:	e3a04000 	mov	r4, #0
   1d254:	ea000008 	b	1d27c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x54>
   1d258:	e3a02004 	mov	r2, #4
   1d25c:	e1a01006 	mov	r1, r6
   1d260:	e1a00005 	mov	r0, r5
   1d264:	eb003344 	bl	29f7c <memcmp>
   1d268:	e3500000 	cmp	r0, #0
   1d26c:	0a000015 	beq	1d2c8 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xa0>
   1d270:	e2844001 	add	r4, r4, #1
   1d274:	e1590004 	cmp	r9, r4
   1d278:	0a000009 	beq	1d2a4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x7c>
   1d27c:	e1a01004 	mov	r1, r4
   1d280:	e1a00007 	mov	r0, r7
   1d284:	eb00294c 	bl	277bc <CPtrArray::operator[](unsigned int)>
   1d288:	e5905000 	ldr	r5, [r0]
   1d28c:	e3550000 	cmp	r5, #0
   1d290:	1afffff0 	bne	1d258 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x30>
   1d294:	e3a0203e 	mov	r2, #62	; 0x3e
   1d298:	e59f105c 	ldr	r1, [pc, #92]	; 1d2fc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd4>
   1d29c:	e59f005c 	ldr	r0, [pc, #92]	; 1d300 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd8>
   1d2a0:	eb001d23 	bl	24734 <assertion_failed>
   1d2a4:	e3a00008 	mov	r0, #8
   1d2a8:	eb003728 	bl	2af50 <operator new(unsigned int)>
   1d2ac:	e1a05000 	mov	r5, r0
   1d2b0:	e1a01006 	mov	r1, r6
   1d2b4:	e3a02004 	mov	r2, #4
   1d2b8:	eb00353e 	bl	2a7b8 <memcpy>
   1d2bc:	e1a01005 	mov	r1, r5
   1d2c0:	e1a00007 	mov	r0, r7
   1d2c4:	eb002974 	bl	2789c <CPtrArray::Append(void*)>
   1d2c8:	e1a01008 	mov	r1, r8
   1d2cc:	e2850004 	add	r0, r5, #4
   1d2d0:	e3a02004 	mov	r2, #4
   1d2d4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d2d8:	ea003536 	b	2a7b8 <memcpy>
   1d2dc:	e3a02035 	mov	r2, #53	; 0x35
   1d2e0:	e59f1014 	ldr	r1, [pc, #20]	; 1d2fc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd4>
   1d2e4:	e59f0018 	ldr	r0, [pc, #24]	; 1d304 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xdc>
   1d2e8:	eb001d11 	bl	24734 <assertion_failed>
   1d2ec:	e3a02036 	mov	r2, #54	; 0x36
   1d2f0:	e59f1004 	ldr	r1, [pc, #4]	; 1d2fc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd4>
   1d2f4:	e59f000c 	ldr	r0, [pc, #12]	; 1d308 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xe0>
   1d2f8:	eb001d0d 	bl	24734 <assertion_failed>
   1d2fc:	000423c0 	.word	0x000423c0
   1d300:	000423f0 	.word	0x000423f0
   1d304:	000423d0 	.word	0x000423d0
   1d308:	000423e0 	.word	0x000423e0

0001d30c <CRouteCache::GetRoute(unsigned char const*) const>:
   1d30c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d310:	e2516000 	subs	r6, r1, #0
   1d314:	0a00001a 	beq	1d384 <CRouteCache::GetRoute(unsigned char const*) const+0x78>
   1d318:	e1a07000 	mov	r7, r0
   1d31c:	eb002924 	bl	277b4 <CPtrArray::GetCount() const>
   1d320:	e2508000 	subs	r8, r0, #0
   1d324:	0a000012 	beq	1d374 <CRouteCache::GetRoute(unsigned char const*) const+0x68>
   1d328:	e3a05000 	mov	r5, #0
   1d32c:	ea000007 	b	1d350 <CRouteCache::GetRoute(unsigned char const*) const+0x44>
   1d330:	e3a02004 	mov	r2, #4
   1d334:	e1a01006 	mov	r1, r6
   1d338:	eb00330f 	bl	29f7c <memcmp>
   1d33c:	e3500000 	cmp	r0, #0
   1d340:	0a00000d 	beq	1d37c <CRouteCache::GetRoute(unsigned char const*) const+0x70>
   1d344:	e2855001 	add	r5, r5, #1
   1d348:	e1580005 	cmp	r8, r5
   1d34c:	0a000008 	beq	1d374 <CRouteCache::GetRoute(unsigned char const*) const+0x68>
   1d350:	e1a01005 	mov	r1, r5
   1d354:	e1a00007 	mov	r0, r7
   1d358:	eb002933 	bl	2782c <CPtrArray::operator[](unsigned int) const>
   1d35c:	e2504000 	subs	r4, r0, #0
   1d360:	1afffff2 	bne	1d330 <CRouteCache::GetRoute(unsigned char const*) const+0x24>
   1d364:	e3a0205d 	mov	r2, #93	; 0x5d
   1d368:	e59f1024 	ldr	r1, [pc, #36]	; 1d394 <CRouteCache::GetRoute(unsigned char const*) const+0x88>
   1d36c:	e59f0024 	ldr	r0, [pc, #36]	; 1d398 <CRouteCache::GetRoute(unsigned char const*) const+0x8c>
   1d370:	eb001cef 	bl	24734 <assertion_failed>
   1d374:	e3a00000 	mov	r0, #0
   1d378:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d37c:	e2840004 	add	r0, r4, #4
   1d380:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d384:	e3a02057 	mov	r2, #87	; 0x57
   1d388:	e59f1004 	ldr	r1, [pc, #4]	; 1d394 <CRouteCache::GetRoute(unsigned char const*) const+0x88>
   1d38c:	e59f0008 	ldr	r0, [pc, #8]	; 1d39c <CRouteCache::GetRoute(unsigned char const*) const+0x90>
   1d390:	eb001ce7 	bl	24734 <assertion_failed>
   1d394:	000423c0 	.word	0x000423c0
   1d398:	000423f0 	.word	0x000423f0
   1d39c:	000423d0 	.word	0x000423d0

0001d3a0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>:
   1d3a0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d3a4:	e1a05003 	mov	r5, r3
   1d3a8:	e1a04000 	mov	r4, r0
   1d3ac:	e1a06001 	mov	r6, r1
   1d3b0:	e59f3088 	ldr	r3, [pc, #136]	; 1d440 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1d3b4:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
   1d3b8:	e1dd92b0 	ldrh	r9, [sp, #32]
   1d3bc:	e1dd82b4 	ldrh	r8, [sp, #36]	; 0x24
   1d3c0:	e5802008 	str	r2, [r0, #8]
   1d3c4:	e5803000 	str	r3, [r0]
   1d3c8:	e5801004 	str	r1, [r0, #4]
   1d3cc:	e1a01005 	mov	r1, r5
   1d3d0:	e280000c 	add	r0, r0, #12
   1d3d4:	eb000e3b 	bl	20cc8 <CIPAddress::CIPAddress(CIPAddress const&)>
   1d3d8:	e1a00006 	mov	r0, r6
   1d3dc:	e1c491b4 	strh	r9, [r4, #20]
   1d3e0:	e1c481b6 	strh	r8, [r4, #22]
   1d3e4:	e5847018 	str	r7, [r4, #24]
   1d3e8:	eb000dd4 	bl	20b40 <CNetConfig::GetIPAddress() const>
   1d3ec:	e1a03007 	mov	r3, r7
   1d3f0:	e1a01000 	mov	r1, r0
   1d3f4:	e1a02005 	mov	r2, r5
   1d3f8:	e284001c 	add	r0, r4, #28
   1d3fc:	eb00104c 	bl	21534 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>
   1d400:	e5943004 	ldr	r3, [r4, #4]
   1d404:	e3530000 	cmp	r3, #0
   1d408:	0a000004 	beq	1d420 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x80>
   1d40c:	e5943008 	ldr	r3, [r4, #8]
   1d410:	e3530000 	cmp	r3, #0
   1d414:	0a000005 	beq	1d430 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x90>
   1d418:	e1a00004 	mov	r0, r4
   1d41c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d420:	e3a02025 	mov	r2, #37	; 0x25
   1d424:	e59f1018 	ldr	r1, [pc, #24]	; 1d444 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   1d428:	e59f0018 	ldr	r0, [pc, #24]	; 1d448 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa8>
   1d42c:	eb001cc0 	bl	24734 <assertion_failed>
   1d430:	e3a02026 	mov	r2, #38	; 0x26
   1d434:	e59f1008 	ldr	r1, [pc, #8]	; 1d444 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   1d438:	e59f000c 	ldr	r0, [pc, #12]	; 1d44c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xac>
   1d43c:	eb001cbc 	bl	24734 <assertion_failed>
   1d440:	00042428 	.word	0x00042428
   1d444:	000423fc 	.word	0x000423fc
   1d448:	00041db0 	.word	0x00041db0
   1d44c:	00041dc4 	.word	0x00041dc4

0001d450 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>:
   1d450:	e92d4070 	push	{r4, r5, r6, lr}
   1d454:	e1a05001 	mov	r5, r1
   1d458:	e59f107c 	ldr	r1, [pc, #124]	; 1d4dc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x8c>
   1d45c:	e1a04000 	mov	r4, r0
   1d460:	e5802008 	str	r2, [r0, #8]
   1d464:	e5801000 	str	r1, [r0]
   1d468:	e5805004 	str	r5, [r0, #4]
   1d46c:	e280000c 	add	r0, r0, #12
   1d470:	e1a06003 	mov	r6, r3
   1d474:	eb000e0c 	bl	20cac <CIPAddress::CIPAddress()>
   1d478:	e3a03000 	mov	r3, #0
   1d47c:	e1a00005 	mov	r0, r5
   1d480:	e1c431b4 	strh	r3, [r4, #20]
   1d484:	e1c461b6 	strh	r6, [r4, #22]
   1d488:	eb000dac 	bl	20b40 <CNetConfig::GetIPAddress() const>
   1d48c:	e59d2010 	ldr	r2, [sp, #16]
   1d490:	e1a01000 	mov	r1, r0
   1d494:	e284001c 	add	r0, r4, #28
   1d498:	eb001019 	bl	21504 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>
   1d49c:	e5943004 	ldr	r3, [r4, #4]
   1d4a0:	e3530000 	cmp	r3, #0
   1d4a4:	0a000004 	beq	1d4bc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x6c>
   1d4a8:	e5943008 	ldr	r3, [r4, #8]
   1d4ac:	e3530000 	cmp	r3, #0
   1d4b0:	0a000005 	beq	1d4cc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x7c>
   1d4b4:	e1a00004 	mov	r0, r4
   1d4b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d4bc:	e3a02033 	mov	r2, #51	; 0x33
   1d4c0:	e59f1018 	ldr	r1, [pc, #24]	; 1d4e0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x90>
   1d4c4:	e59f0018 	ldr	r0, [pc, #24]	; 1d4e4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x94>
   1d4c8:	eb001c99 	bl	24734 <assertion_failed>
   1d4cc:	e3a02034 	mov	r2, #52	; 0x34
   1d4d0:	e59f1008 	ldr	r1, [pc, #8]	; 1d4e0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x90>
   1d4d4:	e59f000c 	ldr	r0, [pc, #12]	; 1d4e8 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x98>
   1d4d8:	eb001c95 	bl	24734 <assertion_failed>
   1d4dc:	00042428 	.word	0x00042428
   1d4e0:	000423fc 	.word	0x000423fc
   1d4e4:	00041db0 	.word	0x00041db0
   1d4e8:	00041dc4 	.word	0x00041dc4

0001d4ec <CNetConnection::~CNetConnection()>:
   1d4ec:	e3a03000 	mov	r3, #0
   1d4f0:	e92d4010 	push	{r4, lr}
   1d4f4:	e1a04000 	mov	r4, r0
   1d4f8:	e59f201c 	ldr	r2, [pc, #28]	; 1d51c <CNetConnection::~CNetConnection()+0x30>
   1d4fc:	e5803008 	str	r3, [r0, #8]
   1d500:	e1c020f0 	strd	r2, [r0]
   1d504:	e280001c 	add	r0, r0, #28
   1d508:	eb00101a 	bl	21578 <CChecksumCalculator::~CChecksumCalculator()>
   1d50c:	e284000c 	add	r0, r4, #12
   1d510:	eb000dfb 	bl	20d04 <CIPAddress::~CIPAddress()>
   1d514:	e1a00004 	mov	r0, r4
   1d518:	e8bd8010 	pop	{r4, pc}
   1d51c:	00042428 	.word	0x00042428

0001d520 <CNetConnection::~CNetConnection()>:
   1d520:	e3a03000 	mov	r3, #0
   1d524:	e92d4010 	push	{r4, lr}
   1d528:	e1a04000 	mov	r4, r0
   1d52c:	e59f2028 	ldr	r2, [pc, #40]	; 1d55c <CNetConnection::~CNetConnection()+0x3c>
   1d530:	e5803008 	str	r3, [r0, #8]
   1d534:	e1c020f0 	strd	r2, [r0]
   1d538:	e280001c 	add	r0, r0, #28
   1d53c:	eb00100d 	bl	21578 <CChecksumCalculator::~CChecksumCalculator()>
   1d540:	e284000c 	add	r0, r4, #12
   1d544:	eb000dee 	bl	20d04 <CIPAddress::~CIPAddress()>
   1d548:	e1a00004 	mov	r0, r4
   1d54c:	e3a0102c 	mov	r1, #44	; 0x2c
   1d550:	eb00368c 	bl	2af88 <operator delete(void*, unsigned int)>
   1d554:	e1a00004 	mov	r0, r4
   1d558:	e8bd8010 	pop	{r4, pc}
   1d55c:	00042428 	.word	0x00042428

0001d560 <CNetConnection::GetForeignIP() const>:
   1d560:	e280000c 	add	r0, r0, #12
   1d564:	ea000e8c 	b	20f9c <CIPAddress::Get() const>

0001d568 <CNetConnection::GetOwnPort() const>:
   1d568:	e1d001b6 	ldrh	r0, [r0, #22]
   1d56c:	e3500000 	cmp	r0, #0
   1d570:	112fff1e 	bxne	lr
   1d574:	e3a02044 	mov	r2, #68	; 0x44
   1d578:	e92d4010 	push	{r4, lr}
   1d57c:	e59f1004 	ldr	r1, [pc, #4]	; 1d588 <CNetConnection::GetOwnPort() const+0x20>
   1d580:	e59f0004 	ldr	r0, [pc, #4]	; 1d58c <CNetConnection::GetOwnPort() const+0x24>
   1d584:	eb001c6a 	bl	24734 <assertion_failed>
   1d588:	000423fc 	.word	0x000423fc
   1d58c:	00042410 	.word	0x00042410

0001d590 <CNetConnection::GetProtocol() const>:
   1d590:	e5900018 	ldr	r0, [r0, #24]
   1d594:	e12fff1e 	bx	lr

0001d598 <CUDPConnection::Accept(CIPAddress*, unsigned short*)>:
   1d598:	e3e00000 	mvn	r0, #0
   1d59c:	e12fff1e 	bx	lr

0001d5a0 <CUDPConnection::Close()>:
   1d5a0:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1d5a4:	e3530000 	cmp	r3, #0
   1d5a8:	13a03000 	movne	r3, #0
   1d5ac:	15c03029 	strbne	r3, [r0, #41]	; 0x29
   1d5b0:	11a00003 	movne	r0, r3
   1d5b4:	03e00000 	mvneq	r0, #0
   1d5b8:	e12fff1e 	bx	lr

0001d5bc <CUDPConnection::SetOptionBroadcast(bool)>:
   1d5bc:	e1a03000 	mov	r3, r0
   1d5c0:	e3a00000 	mov	r0, #0
   1d5c4:	e5c31040 	strb	r1, [r3, #64]	; 0x40
   1d5c8:	e12fff1e 	bx	lr

0001d5cc <CUDPConnection::IsConnected() const>:
   1d5cc:	e3a00000 	mov	r0, #0
   1d5d0:	e12fff1e 	bx	lr

0001d5d4 <CUDPConnection::IsTerminated() const>:
   1d5d4:	e5d00029 	ldrb	r0, [r0, #41]	; 0x29
   1d5d8:	e2200001 	eor	r0, r0, #1
   1d5dc:	e12fff1e 	bx	lr

0001d5e0 <CUDPConnection::Process()>:
   1d5e0:	e12fff1e 	bx	lr

0001d5e4 <CUDPConnection::Send(void const*, unsigned int, int)>:
   1d5e4:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d5e8:	e28db01c 	add	fp, sp, #28
   1d5ec:	e24dd008 	sub	sp, sp, #8
   1d5f0:	e1a04000 	mov	r4, r0
   1d5f4:	e5900044 	ldr	r0, [r0, #68]	; 0x44
   1d5f8:	e3500000 	cmp	r0, #0
   1d5fc:	b3a03000 	movlt	r3, #0
   1d600:	b5843044 	strlt	r3, [r4, #68]	; 0x44
   1d604:	ba00004d 	blt	1d740 <CUDPConnection::Send(void const*, unsigned int, int)+0x15c>
   1d608:	e1a06002 	mov	r6, r2
   1d60c:	e5d4202a 	ldrb	r2, [r4, #42]	; 0x2a
   1d610:	e3520000 	cmp	r2, #0
   1d614:	0a000057 	beq	1d778 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d618:	e3d33040 	bics	r3, r3, #64	; 0x40
   1d61c:	1a000055 	bne	1d778 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d620:	e59f3188 	ldr	r3, [pc, #392]	; 1d7b0 <CUDPConnection::Send(void const*, unsigned int, int)+0x1cc>
   1d624:	e2462001 	sub	r2, r6, #1
   1d628:	e1520003 	cmp	r2, r3
   1d62c:	e2868008 	add	r8, r6, #8
   1d630:	8a000050 	bhi	1d778 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d634:	e5943004 	ldr	r3, [r4, #4]
   1d638:	e3530000 	cmp	r3, #0
   1d63c:	0a00004f 	beq	1d780 <CUDPConnection::Send(void const*, unsigned int, int)+0x19c>
   1d640:	e5d43040 	ldrb	r3, [r4, #64]	; 0x40
   1d644:	e1a07001 	mov	r7, r1
   1d648:	e3530000 	cmp	r3, #0
   1d64c:	0a00003d 	beq	1d748 <CUDPConnection::Send(void const*, unsigned int, int)+0x164>
   1d650:	e3a0c000 	mov	ip, #0
   1d654:	e1d401b6 	ldrh	r0, [r4, #22]
   1d658:	e2882007 	add	r2, r8, #7
   1d65c:	e6bf0fb0 	rev16	r0, r0
   1d660:	e3c22007 	bic	r2, r2, #7
   1d664:	e1d411b4 	ldrh	r1, [r4, #20]
   1d668:	e04dd002 	sub	sp, sp, r2
   1d66c:	e6ffe070 	uxth	lr, r0
   1d670:	e28d5008 	add	r5, sp, #8
   1d674:	e6bf1fb1 	rev16	r1, r1
   1d678:	e1a0242e 	lsr	r2, lr, #8
   1d67c:	e5cd0008 	strb	r0, [sp, #8]
   1d680:	e5c52001 	strb	r2, [r5, #1]
   1d684:	e6ff2071 	uxth	r2, r1
   1d688:	e6bf3fb8 	rev16	r3, r8
   1d68c:	e1a02422 	lsr	r2, r2, #8
   1d690:	e5c52003 	strb	r2, [r5, #3]
   1d694:	e6ff2073 	uxth	r2, r3
   1d698:	e1a02422 	lsr	r2, r2, #8
   1d69c:	e157000c 	cmp	r7, ip
   1d6a0:	e5c51002 	strb	r1, [r5, #2]
   1d6a4:	e5c53004 	strb	r3, [r5, #4]
   1d6a8:	e5c52005 	strb	r2, [r5, #5]
   1d6ac:	e5c5c006 	strb	ip, [r5, #6]
   1d6b0:	e5c5c007 	strb	ip, [r5, #7]
   1d6b4:	0a000035 	beq	1d790 <CUDPConnection::Send(void const*, unsigned int, int)+0x1ac>
   1d6b8:	e1a02006 	mov	r2, r6
   1d6bc:	e1a01007 	mov	r1, r7
   1d6c0:	e2850008 	add	r0, r5, #8
   1d6c4:	eb00343b 	bl	2a7b8 <memcpy>
   1d6c8:	e5940004 	ldr	r0, [r4, #4]
   1d6cc:	eb000d1b 	bl	20b40 <CNetConfig::GetIPAddress() const>
   1d6d0:	e284901c 	add	r9, r4, #28
   1d6d4:	e1a01000 	mov	r1, r0
   1d6d8:	e284700c 	add	r7, r4, #12
   1d6dc:	e1a00009 	mov	r0, r9
   1d6e0:	eb000fa5 	bl	2157c <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1d6e4:	e1a00009 	mov	r0, r9
   1d6e8:	e1a01007 	mov	r1, r7
   1d6ec:	eb000fa6 	bl	2158c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1d6f0:	e1a02008 	mov	r2, r8
   1d6f4:	e1a01005 	mov	r1, r5
   1d6f8:	e1a00009 	mov	r0, r9
   1d6fc:	eb000fcd 	bl	21638 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d700:	e594c008 	ldr	ip, [r4, #8]
   1d704:	e1a03420 	lsr	r3, r0, #8
   1d708:	e35c0000 	cmp	ip, #0
   1d70c:	e5c50006 	strb	r0, [r5, #6]
   1d710:	e5c53007 	strb	r3, [r5, #7]
   1d714:	0a000021 	beq	1d7a0 <CUDPConnection::Send(void const*, unsigned int, int)+0x1bc>
   1d718:	e3a0e011 	mov	lr, #17
   1d71c:	e1a03008 	mov	r3, r8
   1d720:	e1a02005 	mov	r2, r5
   1d724:	e1a01007 	mov	r1, r7
   1d728:	e1a0000c 	mov	r0, ip
   1d72c:	e58de000 	str	lr, [sp]
   1d730:	ebfff573 	bl	1ad04 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1d734:	e3500000 	cmp	r0, #0
   1d738:	0a00000e 	beq	1d778 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d73c:	e1a00006 	mov	r0, r6
   1d740:	e24bd01c 	sub	sp, fp, #28
   1d744:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d748:	e284500c 	add	r5, r4, #12
   1d74c:	e1a00005 	mov	r0, r5
   1d750:	eb000e42 	bl	21060 <CIPAddress::IsBroadcast() const>
   1d754:	e3500000 	cmp	r0, #0
   1d758:	1a000006 	bne	1d778 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d75c:	e5940004 	ldr	r0, [r4, #4]
   1d760:	eb000d00 	bl	20b68 <CNetConfig::GetBroadcastAddress() const>
   1d764:	e1a01000 	mov	r1, r0
   1d768:	e1a00005 	mov	r0, r5
   1d76c:	eb000d65 	bl	20d08 <CIPAddress::operator==(CIPAddress const&) const>
   1d770:	e3500000 	cmp	r0, #0
   1d774:	0affffb5 	beq	1d650 <CUDPConnection::Send(void const*, unsigned int, int)+0x6c>
   1d778:	e3e00000 	mvn	r0, #0
   1d77c:	eaffffef 	b	1d740 <CUDPConnection::Send(void const*, unsigned int, int)+0x15c>
   1d780:	e3a0207b 	mov	r2, #123	; 0x7b
   1d784:	e59f1028 	ldr	r1, [pc, #40]	; 1d7b4 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d0>
   1d788:	e59f0028 	ldr	r0, [pc, #40]	; 1d7b8 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d4>
   1d78c:	eb001be8 	bl	24734 <assertion_failed>
   1d790:	e3a0208b 	mov	r2, #139	; 0x8b
   1d794:	e59f1018 	ldr	r1, [pc, #24]	; 1d7b4 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d0>
   1d798:	e59f001c 	ldr	r0, [pc, #28]	; 1d7bc <CUDPConnection::Send(void const*, unsigned int, int)+0x1d8>
   1d79c:	eb001be4 	bl	24734 <assertion_failed>
   1d7a0:	e3a02093 	mov	r2, #147	; 0x93
   1d7a4:	e59f1008 	ldr	r1, [pc, #8]	; 1d7b4 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d0>
   1d7a8:	e59f0010 	ldr	r0, [pc, #16]	; 1d7c0 <CUDPConnection::Send(void const*, unsigned int, int)+0x1dc>
   1d7ac:	eb001be0 	bl	24734 <assertion_failed>
   1d7b0:	00000637 	.word	0x00000637
   1d7b4:	00042464 	.word	0x00042464
   1d7b8:	00041db0 	.word	0x00041db0
   1d7bc:	00041e2c 	.word	0x00041e2c
   1d7c0:	00041dc4 	.word	0x00041dc4

0001d7c4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1d7c4:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   1d7c8:	e28db018 	add	fp, sp, #24
   1d7cc:	e24dd014 	sub	sp, sp, #20
   1d7d0:	e590c044 	ldr	ip, [r0, #68]	; 0x44
   1d7d4:	e1a04000 	mov	r4, r0
   1d7d8:	e35c0000 	cmp	ip, #0
   1d7dc:	b3a03000 	movlt	r3, #0
   1d7e0:	e1db60b8 	ldrh	r6, [fp, #8]
   1d7e4:	b5803044 	strlt	r3, [r0, #68]	; 0x44
   1d7e8:	ba00004d 	blt	1d924 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x160>
   1d7ec:	e5d0c02a 	ldrb	ip, [r0, #42]	; 0x2a
   1d7f0:	e35c0000 	cmp	ip, #0
   1d7f4:	1a00004d 	bne	1d930 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x16c>
   1d7f8:	e1a0e003 	mov	lr, r3
   1d7fc:	e3de3040 	bics	r3, lr, #64	; 0x40
   1d800:	1a00005c 	bne	1d978 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1b4>
   1d804:	e1a05002 	mov	r5, r2
   1d808:	e59f31a0 	ldr	r3, [pc, #416]	; 1d9b0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1ec>
   1d80c:	e2422001 	sub	r2, r2, #1
   1d810:	e1520003 	cmp	r2, r3
   1d814:	e2858008 	add	r8, r5, #8
   1d818:	8a000056 	bhi	1d978 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1b4>
   1d81c:	e5903004 	ldr	r3, [r0, #4]
   1d820:	e3530000 	cmp	r3, #0
   1d824:	0a000055 	beq	1d980 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1bc>
   1d828:	e5d03040 	ldrb	r3, [r0, #64]	; 0x40
   1d82c:	e1a07001 	mov	r7, r1
   1d830:	e3530000 	cmp	r3, #0
   1d834:	0a000044 	beq	1d94c <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x188>
   1d838:	e3a00000 	mov	r0, #0
   1d83c:	e1d411b6 	ldrh	r1, [r4, #22]
   1d840:	e2882007 	add	r2, r8, #7
   1d844:	e6bf1fb1 	rev16	r1, r1
   1d848:	e3c22007 	bic	r2, r2, #7
   1d84c:	e04dd002 	sub	sp, sp, r2
   1d850:	e6ffe071 	uxth	lr, r1
   1d854:	e6bfcfb6 	rev16	ip, r6
   1d858:	e6bf3fb8 	rev16	r3, r8
   1d85c:	e28d6008 	add	r6, sp, #8
   1d860:	e1a0242e 	lsr	r2, lr, #8
   1d864:	e5cd1008 	strb	r1, [sp, #8]
   1d868:	e5c62001 	strb	r2, [r6, #1]
   1d86c:	e6ff107c 	uxth	r1, ip
   1d870:	e6ff2073 	uxth	r2, r3
   1d874:	e1a01421 	lsr	r1, r1, #8
   1d878:	e1a02422 	lsr	r2, r2, #8
   1d87c:	e1570000 	cmp	r7, r0
   1d880:	e5c6c002 	strb	ip, [r6, #2]
   1d884:	e5c61003 	strb	r1, [r6, #3]
   1d888:	e5c63004 	strb	r3, [r6, #4]
   1d88c:	e5c62005 	strb	r2, [r6, #5]
   1d890:	e5c60006 	strb	r0, [r6, #6]
   1d894:	e5c60007 	strb	r0, [r6, #7]
   1d898:	0a00003c 	beq	1d990 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1cc>
   1d89c:	e1a02005 	mov	r2, r5
   1d8a0:	e1a01007 	mov	r1, r7
   1d8a4:	e2860008 	add	r0, r6, #8
   1d8a8:	eb0033c2 	bl	2a7b8 <memcpy>
   1d8ac:	e5940004 	ldr	r0, [r4, #4]
   1d8b0:	eb000ca2 	bl	20b40 <CNetConfig::GetIPAddress() const>
   1d8b4:	e284701c 	add	r7, r4, #28
   1d8b8:	e1a01000 	mov	r1, r0
   1d8bc:	e1a00007 	mov	r0, r7
   1d8c0:	eb000f2d 	bl	2157c <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1d8c4:	e1a00007 	mov	r0, r7
   1d8c8:	e59b1004 	ldr	r1, [fp, #4]
   1d8cc:	eb000f2e 	bl	2158c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1d8d0:	e1a02008 	mov	r2, r8
   1d8d4:	e1a01006 	mov	r1, r6
   1d8d8:	e1a00007 	mov	r0, r7
   1d8dc:	eb000f55 	bl	21638 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d8e0:	e1a03000 	mov	r3, r0
   1d8e4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   1d8e8:	e5940008 	ldr	r0, [r4, #8]
   1d8ec:	e1a02423 	lsr	r2, r3, #8
   1d8f0:	e3500000 	cmp	r0, #0
   1d8f4:	e5c63006 	strb	r3, [r6, #6]
   1d8f8:	e5c62007 	strb	r2, [r6, #7]
   1d8fc:	0a000027 	beq	1d9a0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1dc>
   1d900:	e3a01011 	mov	r1, #17
   1d904:	e1a03008 	mov	r3, r8
   1d908:	e58d1000 	str	r1, [sp]
   1d90c:	e1a02006 	mov	r2, r6
   1d910:	e59b1004 	ldr	r1, [fp, #4]
   1d914:	ebfff4fa 	bl	1ad04 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1d918:	e3500000 	cmp	r0, #0
   1d91c:	0a000015 	beq	1d978 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1b4>
   1d920:	e1a0c005 	mov	ip, r5
   1d924:	e1a0000c 	mov	r0, ip
   1d928:	e24bd018 	sub	sp, fp, #24
   1d92c:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1d930:	e590c000 	ldr	ip, [r0]
   1d934:	e59c4014 	ldr	r4, [ip, #20]
   1d938:	e12fff34 	blx	r4
   1d93c:	e1a0c000 	mov	ip, r0
   1d940:	e1a0000c 	mov	r0, ip
   1d944:	e24bd018 	sub	sp, fp, #24
   1d948:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1d94c:	e59b0004 	ldr	r0, [fp, #4]
   1d950:	eb000dc2 	bl	21060 <CIPAddress::IsBroadcast() const>
   1d954:	e3500000 	cmp	r0, #0
   1d958:	1a000006 	bne	1d978 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1b4>
   1d95c:	e5940004 	ldr	r0, [r4, #4]
   1d960:	eb000c80 	bl	20b68 <CNetConfig::GetBroadcastAddress() const>
   1d964:	e1a01000 	mov	r1, r0
   1d968:	e59b0004 	ldr	r0, [fp, #4]
   1d96c:	eb000ce5 	bl	20d08 <CIPAddress::operator==(CIPAddress const&) const>
   1d970:	e3500000 	cmp	r0, #0
   1d974:	0affffaf 	beq	1d838 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x74>
   1d978:	e3e0c000 	mvn	ip, #0
   1d97c:	eaffffe8 	b	1d924 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x160>
   1d980:	e3a020e4 	mov	r2, #228	; 0xe4
   1d984:	e59f1028 	ldr	r1, [pc, #40]	; 1d9b4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f0>
   1d988:	e59f0028 	ldr	r0, [pc, #40]	; 1d9b8 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f4>
   1d98c:	eb001b68 	bl	24734 <assertion_failed>
   1d990:	e3a020f4 	mov	r2, #244	; 0xf4
   1d994:	e59f1018 	ldr	r1, [pc, #24]	; 1d9b4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f0>
   1d998:	e59f001c 	ldr	r0, [pc, #28]	; 1d9bc <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f8>
   1d99c:	eb001b64 	bl	24734 <assertion_failed>
   1d9a0:	e3a020fc 	mov	r2, #252	; 0xfc
   1d9a4:	e59f1008 	ldr	r1, [pc, #8]	; 1d9b4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f0>
   1d9a8:	e59f0010 	ldr	r0, [pc, #16]	; 1d9c0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1fc>
   1d9ac:	eb001b60 	bl	24734 <assertion_failed>
   1d9b0:	00000637 	.word	0x00000637
   1d9b4:	00042464 	.word	0x00042464
   1d9b8:	00041db0 	.word	0x00041db0
   1d9bc:	00041e2c 	.word	0x00041e2c
   1d9c0:	00041dc4 	.word	0x00041dc4

0001d9c4 <CUDPConnection::Receive(void*, int)>:
   1d9c4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1d9c8:	e1a06000 	mov	r6, r0
   1d9cc:	e5900044 	ldr	r0, [r0, #68]	; 0x44
   1d9d0:	e24dd00c 	sub	sp, sp, #12
   1d9d4:	e3500000 	cmp	r0, #0
   1d9d8:	ba000022 	blt	1da68 <CUDPConnection::Receive(void*, int)+0xa4>
   1d9dc:	e1a05001 	mov	r5, r1
   1d9e0:	e1a09002 	mov	r9, r2
   1d9e4:	e286702c 	add	r7, r6, #44	; 0x2c
   1d9e8:	e2868038 	add	r8, r6, #56	; 0x38
   1d9ec:	e3550000 	cmp	r5, #0
   1d9f0:	0a000018 	beq	1da58 <CUDPConnection::Receive(void*, int)+0x94>
   1d9f4:	e1a01005 	mov	r1, r5
   1d9f8:	e1a00007 	mov	r0, r7
   1d9fc:	e28d2004 	add	r2, sp, #4
   1da00:	eb000e79 	bl	213ec <CNetQueue::Dequeue(void*, void**)>
   1da04:	e2504000 	subs	r4, r0, #0
   1da08:	0a000007 	beq	1da2c <CUDPConnection::Receive(void*, int)+0x68>
   1da0c:	e59d0004 	ldr	r0, [sp, #4]
   1da10:	e3500000 	cmp	r0, #0
   1da14:	0a000019 	beq	1da80 <CUDPConnection::Receive(void*, int)+0xbc>
   1da18:	e3a01006 	mov	r1, #6
   1da1c:	eb003559 	bl	2af88 <operator delete(void*, unsigned int)>
   1da20:	e1a00004 	mov	r0, r4
   1da24:	e28dd00c 	add	sp, sp, #12
   1da28:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1da2c:	e3590040 	cmp	r9, #64	; 0x40
   1da30:	0a000010 	beq	1da78 <CUDPConnection::Receive(void*, int)+0xb4>
   1da34:	e1a00008 	mov	r0, r8
   1da38:	eb001ab7 	bl	2451c <CSynchronizationEvent::Clear()>
   1da3c:	e1a00008 	mov	r0, r8
   1da40:	eb001ac6 	bl	24560 <CSynchronizationEvent::Wait()>
   1da44:	e5960044 	ldr	r0, [r6, #68]	; 0x44
   1da48:	e3500000 	cmp	r0, #0
   1da4c:	aaffffe6 	bge	1d9ec <CUDPConnection::Receive(void*, int)+0x28>
   1da50:	e5864044 	str	r4, [r6, #68]	; 0x44
   1da54:	eafffff2 	b	1da24 <CUDPConnection::Receive(void*, int)+0x60>
   1da58:	e3a020a7 	mov	r2, #167	; 0xa7
   1da5c:	e59f102c 	ldr	r1, [pc, #44]	; 1da90 <CUDPConnection::Receive(void*, int)+0xcc>
   1da60:	e59f002c 	ldr	r0, [pc, #44]	; 1da94 <CUDPConnection::Receive(void*, int)+0xd0>
   1da64:	eb001b32 	bl	24734 <assertion_failed>
   1da68:	e3a03000 	mov	r3, #0
   1da6c:	e5863044 	str	r3, [r6, #68]	; 0x44
   1da70:	e28dd00c 	add	sp, sp, #12
   1da74:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1da78:	e1a00004 	mov	r0, r4
   1da7c:	eaffffe8 	b	1da24 <CUDPConnection::Receive(void*, int)+0x60>
   1da80:	e3a020bf 	mov	r2, #191	; 0xbf
   1da84:	e59f1004 	ldr	r1, [pc, #4]	; 1da90 <CUDPConnection::Receive(void*, int)+0xcc>
   1da88:	e59f0008 	ldr	r0, [pc, #8]	; 1da98 <CUDPConnection::Receive(void*, int)+0xd4>
   1da8c:	eb001b28 	bl	24734 <assertion_failed>
   1da90:	00042464 	.word	0x00042464
   1da94:	0003ef40 	.word	0x0003ef40
   1da98:	00041e2c 	.word	0x00041e2c

0001da9c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1da9c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1daa0:	e1a06000 	mov	r6, r0
   1daa4:	e5900044 	ldr	r0, [r0, #68]	; 0x44
   1daa8:	e24dd008 	sub	sp, sp, #8
   1daac:	e3500000 	cmp	r0, #0
   1dab0:	ba000028 	blt	1db58 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xbc>
   1dab4:	e1a05001 	mov	r5, r1
   1dab8:	e1a09002 	mov	r9, r2
   1dabc:	e1a0a003 	mov	sl, r3
   1dac0:	e286702c 	add	r7, r6, #44	; 0x2c
   1dac4:	e2868038 	add	r8, r6, #56	; 0x38
   1dac8:	e3550000 	cmp	r5, #0
   1dacc:	0a00001d 	beq	1db48 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xac>
   1dad0:	e1a01005 	mov	r1, r5
   1dad4:	e1a00007 	mov	r0, r7
   1dad8:	e28d2004 	add	r2, sp, #4
   1dadc:	eb000e42 	bl	213ec <CNetQueue::Dequeue(void*, void**)>
   1dae0:	e2504000 	subs	r4, r0, #0
   1dae4:	0a00000c 	beq	1db1c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x80>
   1dae8:	e59d5004 	ldr	r5, [sp, #4]
   1daec:	e3550000 	cmp	r5, #0
   1daf0:	0a00001c 	beq	1db68 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xcc>
   1daf4:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1daf8:	e35a0000 	cmp	sl, #0
   1dafc:	13530000 	cmpne	r3, #0
   1db00:	1a00001c 	bne	1db78 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xdc>
   1db04:	e1a00005 	mov	r0, r5
   1db08:	e3a01006 	mov	r1, #6
   1db0c:	eb00351d 	bl	2af88 <operator delete(void*, unsigned int)>
   1db10:	e1a00004 	mov	r0, r4
   1db14:	e28dd008 	add	sp, sp, #8
   1db18:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1db1c:	e3590040 	cmp	r9, #64	; 0x40
   1db20:	0afffffa 	beq	1db10 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x74>
   1db24:	e1a00008 	mov	r0, r8
   1db28:	eb001a7b 	bl	2451c <CSynchronizationEvent::Clear()>
   1db2c:	e1a00008 	mov	r0, r8
   1db30:	eb001a8a 	bl	24560 <CSynchronizationEvent::Wait()>
   1db34:	e5960044 	ldr	r0, [r6, #68]	; 0x44
   1db38:	e3500000 	cmp	r0, #0
   1db3c:	aaffffe1 	bge	1dac8 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x2c>
   1db40:	e5864044 	str	r4, [r6, #68]	; 0x44
   1db44:	eafffff2 	b	1db14 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x78>
   1db48:	e3a02e11 	mov	r2, #272	; 0x110
   1db4c:	e59f1040 	ldr	r1, [pc, #64]	; 1db94 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xf8>
   1db50:	e59f0040 	ldr	r0, [pc, #64]	; 1db98 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xfc>
   1db54:	eb001af6 	bl	24734 <assertion_failed>
   1db58:	e3a03000 	mov	r3, #0
   1db5c:	e5863044 	str	r3, [r6, #68]	; 0x44
   1db60:	e28dd008 	add	sp, sp, #8
   1db64:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1db68:	e3a02f4a 	mov	r2, #296	; 0x128
   1db6c:	e59f1020 	ldr	r1, [pc, #32]	; 1db94 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xf8>
   1db70:	e59f0024 	ldr	r0, [pc, #36]	; 1db9c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x100>
   1db74:	eb001aee 	bl	24734 <assertion_failed>
   1db78:	e1a0000a 	mov	r0, sl
   1db7c:	e1a01005 	mov	r1, r5
   1db80:	eb000cd0 	bl	20ec8 <CIPAddress::Set(unsigned char const*)>
   1db84:	e1d530b4 	ldrh	r3, [r5, #4]
   1db88:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1db8c:	e1c230b0 	strh	r3, [r2]
   1db90:	eaffffdb 	b	1db04 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x68>
   1db94:	00042464 	.word	0x00042464
   1db98:	0003ef40 	.word	0x0003ef40
   1db9c:	00041e2c 	.word	0x00041e2c

0001dba0 <CUDPConnection::Connect()>:
   1dba0:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1dba4:	e3530000 	cmp	r3, #0
   1dba8:	0a000001 	beq	1dbb4 <CUDPConnection::Connect()+0x14>
   1dbac:	e3a00000 	mov	r0, #0
   1dbb0:	e12fff1e 	bx	lr
   1dbb4:	e3a02049 	mov	r2, #73	; 0x49
   1dbb8:	e92d4010 	push	{r4, lr}
   1dbbc:	e59f1004 	ldr	r1, [pc, #4]	; 1dbc8 <CUDPConnection::Connect()+0x28>
   1dbc0:	e59f0004 	ldr	r0, [pc, #4]	; 1dbcc <CUDPConnection::Connect()+0x2c>
   1dbc4:	eb001ada 	bl	24734 <assertion_failed>
   1dbc8:	00042464 	.word	0x00042464
   1dbcc:	00042478 	.word	0x00042478

0001dbd0 <CUDPConnection::~CUDPConnection()>:
   1dbd0:	e5d02029 	ldrb	r2, [r0, #41]	; 0x29
   1dbd4:	e59f3040 	ldr	r3, [pc, #64]	; 1dc1c <CUDPConnection::~CUDPConnection()+0x4c>
   1dbd8:	e3520000 	cmp	r2, #0
   1dbdc:	e92d4010 	push	{r4, lr}
   1dbe0:	e5803000 	str	r3, [r0]
   1dbe4:	1a000008 	bne	1dc0c <CUDPConnection::~CUDPConnection()+0x3c>
   1dbe8:	e1a04000 	mov	r4, r0
   1dbec:	e2800038 	add	r0, r0, #56	; 0x38
   1dbf0:	eb001a3d 	bl	244ec <CSynchronizationEvent::~CSynchronizationEvent()>
   1dbf4:	e284002c 	add	r0, r4, #44	; 0x2c
   1dbf8:	eb000db0 	bl	212c0 <CNetQueue::~CNetQueue()>
   1dbfc:	e1a00004 	mov	r0, r4
   1dc00:	ebfffe39 	bl	1d4ec <CNetConnection::~CNetConnection()>
   1dc04:	e1a00004 	mov	r0, r4
   1dc08:	e8bd8010 	pop	{r4, pc}
   1dc0c:	e3a02044 	mov	r2, #68	; 0x44
   1dc10:	e59f1008 	ldr	r1, [pc, #8]	; 1dc20 <CUDPConnection::~CUDPConnection()+0x50>
   1dc14:	e59f0008 	ldr	r0, [pc, #8]	; 1dc24 <CUDPConnection::~CUDPConnection()+0x54>
   1dc18:	eb001ac5 	bl	24734 <assertion_failed>
   1dc1c:	00042494 	.word	0x00042494
   1dc20:	00042464 	.word	0x00042464
   1dc24:	00042480 	.word	0x00042480

0001dc28 <CUDPConnection::~CUDPConnection()>:
   1dc28:	e92d4010 	push	{r4, lr}
   1dc2c:	e1a04000 	mov	r4, r0
   1dc30:	ebffffe6 	bl	1dbd0 <CUDPConnection::~CUDPConnection()>
   1dc34:	e1a00004 	mov	r0, r4
   1dc38:	e3a01048 	mov	r1, #72	; 0x48
   1dc3c:	eb0034d1 	bl	2af88 <operator delete(void*, unsigned int)>
   1dc40:	e1a00004 	mov	r0, r4
   1dc44:	e8bd8010 	pop	{r4, pc}

0001dc48 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1dc48:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1dc4c:	e24dd00c 	sub	sp, sp, #12
   1dc50:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
   1dc54:	e35c0011 	cmp	ip, #17
   1dc58:	1a00001b 	bne	1dccc <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x84>
   1dc5c:	e3520008 	cmp	r2, #8
   1dc60:	e1a07002 	mov	r7, r2
   1dc64:	9a000044 	bls	1dd7c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x134>
   1dc68:	e1a04001 	mov	r4, r1
   1dc6c:	e5d11002 	ldrb	r1, [r1, #2]
   1dc70:	e5d42003 	ldrb	r2, [r4, #3]
   1dc74:	e1a06003 	mov	r6, r3
   1dc78:	e1811402 	orr	r1, r1, r2, lsl #8
   1dc7c:	e1d031b6 	ldrh	r3, [r0, #22]
   1dc80:	e6bf1fb1 	rev16	r1, r1
   1dc84:	e6ff1071 	uxth	r1, r1
   1dc88:	e1530001 	cmp	r3, r1
   1dc8c:	e1a05000 	mov	r5, r0
   1dc90:	1a00000d 	bne	1dccc <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x84>
   1dc94:	e5903004 	ldr	r3, [r0, #4]
   1dc98:	e3530000 	cmp	r3, #0
   1dc9c:	0a000059 	beq	1de08 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c0>
   1dca0:	e5d48000 	ldrb	r8, [r4]
   1dca4:	e5d42001 	ldrb	r2, [r4, #1]
   1dca8:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1dcac:	e1888402 	orr	r8, r8, r2, lsl #8
   1dcb0:	e6bf8fb8 	rev16	r8, r8
   1dcb4:	e3530000 	cmp	r3, #0
   1dcb8:	e6ff3078 	uxth	r3, r8
   1dcbc:	0a000016 	beq	1dd1c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd4>
   1dcc0:	e1d021b4 	ldrh	r2, [r0, #20]
   1dcc4:	e1520003 	cmp	r2, r3
   1dcc8:	0a000002 	beq	1dcd8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x90>
   1dccc:	e3a00000 	mov	r0, #0
   1dcd0:	e28dd00c 	add	sp, sp, #12
   1dcd4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1dcd8:	e280900c 	add	r9, r0, #12
   1dcdc:	e1a00009 	mov	r0, r9
   1dce0:	e1a01006 	mov	r1, r6
   1dce4:	eb000c1f 	bl	20d68 <CIPAddress::operator!=(CIPAddress const&) const>
   1dce8:	e3500000 	cmp	r0, #0
   1dcec:	0a00000a 	beq	1dd1c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd4>
   1dcf0:	e1a00009 	mov	r0, r9
   1dcf4:	eb000cd9 	bl	21060 <CIPAddress::IsBroadcast() const>
   1dcf8:	e3500000 	cmp	r0, #0
   1dcfc:	1a000006 	bne	1dd1c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd4>
   1dd00:	e5950004 	ldr	r0, [r5, #4]
   1dd04:	eb000b97 	bl	20b68 <CNetConfig::GetBroadcastAddress() const>
   1dd08:	e1a01000 	mov	r1, r0
   1dd0c:	e1a00009 	mov	r0, r9
   1dd10:	eb000c14 	bl	20d68 <CIPAddress::operator!=(CIPAddress const&) const>
   1dd14:	e3500000 	cmp	r0, #0
   1dd18:	1affffeb 	bne	1dccc <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x84>
   1dd1c:	e5d43004 	ldrb	r3, [r4, #4]
   1dd20:	e5d42005 	ldrb	r2, [r4, #5]
   1dd24:	e1833402 	orr	r3, r3, r2, lsl #8
   1dd28:	e6bf3fb3 	rev16	r3, r3
   1dd2c:	e6ff3073 	uxth	r3, r3
   1dd30:	e1570003 	cmp	r7, r3
   1dd34:	3a000010 	bcc	1dd7c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x134>
   1dd38:	e5d43006 	ldrb	r3, [r4, #6]
   1dd3c:	e5d42007 	ldrb	r2, [r4, #7]
   1dd40:	e1933402 	orrs	r3, r3, r2, lsl #8
   1dd44:	0a00000f 	beq	1dd88 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x140>
   1dd48:	e285001c 	add	r0, r5, #28
   1dd4c:	e1a01006 	mov	r1, r6
   1dd50:	e58d0004 	str	r0, [sp, #4]
   1dd54:	eb000e08 	bl	2157c <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1dd58:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   1dd5c:	e59d0004 	ldr	r0, [sp, #4]
   1dd60:	eb000e09 	bl	2158c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1dd64:	e1a02007 	mov	r2, r7
   1dd68:	e1a01004 	mov	r1, r4
   1dd6c:	e59d0004 	ldr	r0, [sp, #4]
   1dd70:	eb000e30 	bl	21638 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1dd74:	e3500000 	cmp	r0, #0
   1dd78:	0a000002 	beq	1dd88 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x140>
   1dd7c:	e3e00000 	mvn	r0, #0
   1dd80:	e28dd00c 	add	sp, sp, #12
   1dd84:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1dd88:	e5d53040 	ldrb	r3, [r5, #64]	; 0x40
   1dd8c:	e3530000 	cmp	r3, #0
   1dd90:	1a00000c 	bne	1ddc8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x180>
   1dd94:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
   1dd98:	eb000cb0 	bl	21060 <CIPAddress::IsBroadcast() const>
   1dd9c:	e3500000 	cmp	r0, #0
   1dda0:	1a000006 	bne	1ddc0 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x178>
   1dda4:	e5950004 	ldr	r0, [r5, #4]
   1dda8:	eb000b6e 	bl	20b68 <CNetConfig::GetBroadcastAddress() const>
   1ddac:	e1a01000 	mov	r1, r0
   1ddb0:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
   1ddb4:	eb000bd3 	bl	20d08 <CIPAddress::operator==(CIPAddress const&) const>
   1ddb8:	e3500000 	cmp	r0, #0
   1ddbc:	0a000001 	beq	1ddc8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x180>
   1ddc0:	e3a00001 	mov	r0, #1
   1ddc4:	eaffffc1 	b	1dcd0 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x88>
   1ddc8:	e3a00006 	mov	r0, #6
   1ddcc:	eb00345f 	bl	2af50 <operator new(unsigned int)>
   1ddd0:	e1a09000 	mov	r9, r0
   1ddd4:	e1a00006 	mov	r0, r6
   1ddd8:	e1a01009 	mov	r1, r9
   1dddc:	eb000c7a 	bl	20fcc <CIPAddress::CopyTo(unsigned char*) const>
   1dde0:	e1a03009 	mov	r3, r9
   1dde4:	e2472008 	sub	r2, r7, #8
   1dde8:	e2841008 	add	r1, r4, #8
   1ddec:	e285002c 	add	r0, r5, #44	; 0x2c
   1ddf0:	e1c980b4 	strh	r8, [r9, #4]
   1ddf4:	eb000d36 	bl	212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1ddf8:	e2850038 	add	r0, r5, #56	; 0x38
   1ddfc:	eb0019c9 	bl	24528 <CSynchronizationEvent::Set()>
   1de00:	e3a00001 	mov	r0, #1
   1de04:	eaffffb1 	b	1dcd0 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x88>
   1de08:	e59f2008 	ldr	r2, [pc, #8]	; 1de18 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d0>
   1de0c:	e59f1008 	ldr	r1, [pc, #8]	; 1de1c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d4>
   1de10:	e59f0008 	ldr	r0, [pc, #8]	; 1de20 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   1de14:	eb001a46 	bl	24734 <assertion_failed>
   1de18:	0000015e 	.word	0x0000015e
   1de1c:	00042464 	.word	0x00042464
   1de20:	00041db0 	.word	0x00041db0

0001de24 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1de24:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1de28:	e59d1020 	ldr	r1, [sp, #32]
   1de2c:	e1a05003 	mov	r5, r3
   1de30:	e3510011 	cmp	r1, #17
   1de34:	e1dd71b8 	ldrh	r7, [sp, #24]
   1de38:	e1dd31bc 	ldrh	r3, [sp, #28]
   1de3c:	1a000013 	bne	1de90 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   1de40:	e1a06002 	mov	r6, r2
   1de44:	e1d021b6 	ldrh	r2, [r0, #22]
   1de48:	e1a04000 	mov	r4, r0
   1de4c:	e1520003 	cmp	r2, r3
   1de50:	1a00000e 	bne	1de90 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   1de54:	e5900004 	ldr	r0, [r0, #4]
   1de58:	e3500000 	cmp	r0, #0
   1de5c:	0a000018 	beq	1dec4 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1de60:	eb000b36 	bl	20b40 <CNetConfig::GetIPAddress() const>
   1de64:	e1a01000 	mov	r1, r0
   1de68:	e1a00005 	mov	r0, r5
   1de6c:	eb000bbd 	bl	20d68 <CIPAddress::operator!=(CIPAddress const&) const>
   1de70:	e3500000 	cmp	r0, #0
   1de74:	1a000005 	bne	1de90 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   1de78:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1de7c:	e3530000 	cmp	r3, #0
   1de80:	0a000009 	beq	1deac <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x88>
   1de84:	e1d431b4 	ldrh	r3, [r4, #20]
   1de88:	e1530007 	cmp	r3, r7
   1de8c:	0a000001 	beq	1de98 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x74>
   1de90:	e3a00000 	mov	r0, #0
   1de94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1de98:	e1a01006 	mov	r1, r6
   1de9c:	e284000c 	add	r0, r4, #12
   1dea0:	eb000bb0 	bl	20d68 <CIPAddress::operator!=(CIPAddress const&) const>
   1dea4:	e3500000 	cmp	r0, #0
   1dea8:	1afffff8 	bne	1de90 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   1deac:	e3e03000 	mvn	r3, #0
   1deb0:	e2840038 	add	r0, r4, #56	; 0x38
   1deb4:	e5843044 	str	r3, [r4, #68]	; 0x44
   1deb8:	eb00199a 	bl	24528 <CSynchronizationEvent::Set()>
   1debc:	e3a00001 	mov	r0, #1
   1dec0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1dec4:	e59f2008 	ldr	r2, [pc, #8]	; 1ded4 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb0>
   1dec8:	e59f1008 	ldr	r1, [pc, #8]	; 1ded8 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb4>
   1decc:	e59f0008 	ldr	r0, [pc, #8]	; 1dedc <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb8>
   1ded0:	eb001a17 	bl	24734 <assertion_failed>
   1ded4:	000001a7 	.word	0x000001a7
   1ded8:	00042464 	.word	0x00042464
   1dedc:	00041db0 	.word	0x00041db0

0001dee0 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1dee0:	e3a0c011 	mov	ip, #17
   1dee4:	e92d4010 	push	{r4, lr}
   1dee8:	e24dd010 	sub	sp, sp, #16
   1deec:	e1dde1b8 	ldrh	lr, [sp, #24]
   1def0:	e58dc008 	str	ip, [sp, #8]
   1def4:	e1ddc1bc 	ldrh	ip, [sp, #28]
   1def8:	e58de000 	str	lr, [sp]
   1defc:	e58dc004 	str	ip, [sp, #4]
   1df00:	e1a04000 	mov	r4, r0
   1df04:	ebfffd25 	bl	1d3a0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1df08:	e3a03001 	mov	r3, #1
   1df0c:	e59f2034 	ldr	r2, [pc, #52]	; 1df48 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x68>
   1df10:	e5c43029 	strb	r3, [r4, #41]	; 0x29
   1df14:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1df18:	e5842000 	str	r2, [r4]
   1df1c:	e284002c 	add	r0, r4, #44	; 0x2c
   1df20:	eb000cae 	bl	211e0 <CNetQueue::CNetQueue()>
   1df24:	e3a01000 	mov	r1, #0
   1df28:	e2840038 	add	r0, r4, #56	; 0x38
   1df2c:	eb00196a 	bl	244dc <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1df30:	e3a03000 	mov	r3, #0
   1df34:	e1a00004 	mov	r0, r4
   1df38:	e5c43040 	strb	r3, [r4, #64]	; 0x40
   1df3c:	e5843044 	str	r3, [r4, #68]	; 0x44
   1df40:	e28dd010 	add	sp, sp, #16
   1df44:	e8bd8010 	pop	{r4, pc}
   1df48:	00042494 	.word	0x00042494

0001df4c <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1df4c:	e3a0c011 	mov	ip, #17
   1df50:	e92d4030 	push	{r4, r5, lr}
   1df54:	e24dd00c 	sub	sp, sp, #12
   1df58:	e58dc000 	str	ip, [sp]
   1df5c:	e1a04000 	mov	r4, r0
   1df60:	e3a05000 	mov	r5, #0
   1df64:	ebfffd39 	bl	1d450 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1df68:	e3a02001 	mov	r2, #1
   1df6c:	e59f3030 	ldr	r3, [pc, #48]	; 1dfa4 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0x58>
   1df70:	e5c42029 	strb	r2, [r4, #41]	; 0x29
   1df74:	e5843000 	str	r3, [r4]
   1df78:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   1df7c:	e284002c 	add	r0, r4, #44	; 0x2c
   1df80:	eb000c96 	bl	211e0 <CNetQueue::CNetQueue()>
   1df84:	e1a01005 	mov	r1, r5
   1df88:	e2840038 	add	r0, r4, #56	; 0x38
   1df8c:	eb001952 	bl	244dc <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1df90:	e1a00004 	mov	r0, r4
   1df94:	e5c45040 	strb	r5, [r4, #64]	; 0x40
   1df98:	e5845044 	str	r5, [r4, #68]	; 0x44
   1df9c:	e28dd00c 	add	sp, sp, #12
   1dfa0:	e8bd8030 	pop	{r4, r5, pc}
   1dfa4:	00042494 	.word	0x00042494

0001dfa8 <CTCPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1dfa8:	e590c000 	ldr	ip, [r0]
   1dfac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1dfb0:	e59ce014 	ldr	lr, [ip, #20]
   1dfb4:	e1a0c00e 	mov	ip, lr
   1dfb8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1dfbc:	e12fff1c 	bx	ip

0001dfc0 <CTCPConnection::SetOptionBroadcast(bool)>:
   1dfc0:	e3a00000 	mov	r0, #0
   1dfc4:	e12fff1e 	bx	lr

0001dfc8 <CTCPConnection::IsConnected() const>:
   1dfc8:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1dfcc:	e3530002 	cmp	r3, #2
   1dfd0:	9a000003 	bls	1dfe4 <CTCPConnection::IsConnected() const+0x1c>
   1dfd4:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   1dfd8:	e250000a 	subs	r0, r0, #10
   1dfdc:	13a00001 	movne	r0, #1
   1dfe0:	e12fff1e 	bx	lr
   1dfe4:	e3a00000 	mov	r0, #0
   1dfe8:	e12fff1e 	bx	lr

0001dfec <CTCPConnection::IsTerminated() const>:
   1dfec:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   1dff0:	e16f0f10 	clz	r0, r0
   1dff4:	e1a002a0 	lsr	r0, r0, #5
   1dff8:	e12fff1e 	bx	lr

0001dffc <CTCPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1dffc:	e590c000 	ldr	ip, [r0]
   1e000:	e92d4070 	push	{r4, r5, r6, lr}
   1e004:	e1a05003 	mov	r5, r3
   1e008:	e59c3018 	ldr	r3, [ip, #24]
   1e00c:	e1a04000 	mov	r4, r0
   1e010:	e12fff33 	blx	r3
   1e014:	e3500000 	cmp	r0, #0
   1e018:	d8bd8070 	pople	{r4, r5, r6, pc}
   1e01c:	e59d3010 	ldr	r3, [sp, #16]
   1e020:	e2532000 	subs	r2, r3, #0
   1e024:	13a02001 	movne	r2, #1
   1e028:	e3550000 	cmp	r5, #0
   1e02c:	11a00002 	movne	r0, r2
   1e030:	03a00000 	moveq	r0, #0
   1e034:	e3500000 	cmp	r0, #0
   1e038:	08bd8070 	popeq	{r4, r5, r6, pc}
   1e03c:	e1a00005 	mov	r0, r5
   1e040:	e284100c 	add	r1, r4, #12
   1e044:	eb000bb4 	bl	20f1c <CIPAddress::Set(CIPAddress const&)>
   1e048:	e1d431b4 	ldrh	r3, [r4, #20]
   1e04c:	e59d2010 	ldr	r2, [sp, #16]
   1e050:	e3a00000 	mov	r0, #0
   1e054:	e1c230b0 	strh	r3, [r2]
   1e058:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e05c <CTCPConnection::Send(void const*, unsigned int, int)>:
   1e05c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1e060:	e1a08003 	mov	r8, r3
   1e064:	e3d83040 	bics	r3, r8, #64	; 0x40
   1e068:	e24dd00c 	sub	sp, sp, #12
   1e06c:	1a00000d 	bne	1e0a8 <CTCPConnection::Send(void const*, unsigned int, int)+0x4c>
   1e070:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1e074:	e1a07000 	mov	r7, r0
   1e078:	e3530000 	cmp	r3, #0
   1e07c:	ba00002a 	blt	1e12c <CTCPConnection::Send(void const*, unsigned int, int)+0xd0>
   1e080:	e1a06002 	mov	r6, r2
   1e084:	e5d0202a 	ldrb	r2, [r0, #42]	; 0x2a
   1e088:	e1a04001 	mov	r4, r1
   1e08c:	e352000a 	cmp	r2, #10
   1e090:	e6ef2072 	uxtb	r2, r2
   1e094:	8a000006 	bhi	1e0b4 <CTCPConnection::Send(void const*, unsigned int, int)+0x58>
   1e098:	e3a0c001 	mov	ip, #1
   1e09c:	e59f10cc 	ldr	r1, [pc, #204]	; 1e170 <CTCPConnection::Send(void const*, unsigned int, int)+0x114>
   1e0a0:	e011321c 	ands	r3, r1, ip, lsl r2
   1e0a4:	0a000002 	beq	1e0b4 <CTCPConnection::Send(void const*, unsigned int, int)+0x58>
   1e0a8:	e3e00000 	mvn	r0, #0
   1e0ac:	e28dd00c 	add	sp, sp, #12
   1e0b0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e0b4:	e3540000 	cmp	r4, #0
   1e0b8:	0a000025 	beq	1e154 <CTCPConnection::Send(void const*, unsigned int, int)+0xf8>
   1e0bc:	e3560d19 	cmp	r6, #1600	; 0x640
   1e0c0:	9a00001c 	bls	1e138 <CTCPConnection::Send(void const*, unsigned int, int)+0xdc>
   1e0c4:	e1a05006 	mov	r5, r6
   1e0c8:	e2879030 	add	r9, r7, #48	; 0x30
   1e0cc:	e1a01004 	mov	r1, r4
   1e0d0:	e3a03000 	mov	r3, #0
   1e0d4:	e3a02d19 	mov	r2, #1600	; 0x640
   1e0d8:	e1a00009 	mov	r0, r9
   1e0dc:	e2455d19 	sub	r5, r5, #1600	; 0x640
   1e0e0:	eb000c7b 	bl	212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1e0e4:	e3550d19 	cmp	r5, #1600	; 0x640
   1e0e8:	e2844d19 	add	r4, r4, #1600	; 0x640
   1e0ec:	8afffff6 	bhi	1e0cc <CTCPConnection::Send(void const*, unsigned int, int)+0x70>
   1e0f0:	e1a02005 	mov	r2, r5
   1e0f4:	e1a01004 	mov	r1, r4
   1e0f8:	e1a00009 	mov	r0, r9
   1e0fc:	e3a03000 	mov	r3, #0
   1e100:	eb000c73 	bl	212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1e104:	e3180040 	tst	r8, #64	; 0x40
   1e108:	1a00000e 	bne	1e148 <CTCPConnection::Send(void const*, unsigned int, int)+0xec>
   1e10c:	e2870070 	add	r0, r7, #112	; 0x70
   1e110:	e58d0004 	str	r0, [sp, #4]
   1e114:	eb001900 	bl	2451c <CSynchronizationEvent::Clear()>
   1e118:	e59d0004 	ldr	r0, [sp, #4]
   1e11c:	eb00190f 	bl	24560 <CSynchronizationEvent::Wait()>
   1e120:	e597302c 	ldr	r3, [r7, #44]	; 0x2c
   1e124:	e3530000 	cmp	r3, #0
   1e128:	aa000006 	bge	1e148 <CTCPConnection::Send(void const*, unsigned int, int)+0xec>
   1e12c:	e597002c 	ldr	r0, [r7, #44]	; 0x2c
   1e130:	e28dd00c 	add	sp, sp, #12
   1e134:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e138:	e3560000 	cmp	r6, #0
   1e13c:	1a000008 	bne	1e164 <CTCPConnection::Send(void const*, unsigned int, int)+0x108>
   1e140:	e3180040 	tst	r8, #64	; 0x40
   1e144:	0afffff0 	beq	1e10c <CTCPConnection::Send(void const*, unsigned int, int)+0xb0>
   1e148:	e1a00006 	mov	r0, r6
   1e14c:	e28dd00c 	add	sp, sp, #12
   1e150:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e154:	e3a02d06 	mov	r2, #384	; 0x180
   1e158:	e59f1014 	ldr	r1, [pc, #20]	; 1e174 <CTCPConnection::Send(void const*, unsigned int, int)+0x118>
   1e15c:	e59f0014 	ldr	r0, [pc, #20]	; 1e178 <CTCPConnection::Send(void const*, unsigned int, int)+0x11c>
   1e160:	eb001973 	bl	24734 <assertion_failed>
   1e164:	e1a05006 	mov	r5, r6
   1e168:	e2879030 	add	r9, r7, #48	; 0x30
   1e16c:	eaffffdf 	b	1e0f0 <CTCPConnection::Send(void const*, unsigned int, int)+0x94>
   1e170:	00000763 	.word	0x00000763
   1e174:	000424d0 	.word	0x000424d0
   1e178:	00041e2c 	.word	0x00041e2c

0001e17c <CTCPConnection::Receive(void*, int)>:
   1e17c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e180:	e3d29040 	bics	r9, r2, #64	; 0x40
   1e184:	1a000012 	bne	1e1d4 <CTCPConnection::Receive(void*, int)+0x58>
   1e188:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1e18c:	e1a04000 	mov	r4, r0
   1e190:	e3530000 	cmp	r3, #0
   1e194:	ba00001c 	blt	1e20c <CTCPConnection::Receive(void*, int)+0x90>
   1e198:	e1a07001 	mov	r7, r1
   1e19c:	e2025040 	and	r5, r2, #64	; 0x40
   1e1a0:	e280803c 	add	r8, r0, #60	; 0x3c
   1e1a4:	e2806068 	add	r6, r0, #104	; 0x68
   1e1a8:	e3a02000 	mov	r2, #0
   1e1ac:	e1a01007 	mov	r1, r7
   1e1b0:	e1a00008 	mov	r0, r8
   1e1b4:	eb000c8c 	bl	213ec <CNetQueue::Dequeue(void*, void**)>
   1e1b8:	e3500000 	cmp	r0, #0
   1e1bc:	1a000015 	bne	1e218 <CTCPConnection::Receive(void*, int)+0x9c>
   1e1c0:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1e1c4:	e3530001 	cmp	r3, #1
   1e1c8:	e6ef3073 	uxtb	r3, r3
   1e1cc:	e2433005 	sub	r3, r3, #5
   1e1d0:	8a000002 	bhi	1e1e0 <CTCPConnection::Receive(void*, int)+0x64>
   1e1d4:	e3e09000 	mvn	r9, #0
   1e1d8:	e1a00009 	mov	r0, r9
   1e1dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e1e0:	e3530005 	cmp	r3, #5
   1e1e4:	9afffffa 	bls	1e1d4 <CTCPConnection::Receive(void*, int)+0x58>
   1e1e8:	e3550000 	cmp	r5, #0
   1e1ec:	1afffff9 	bne	1e1d8 <CTCPConnection::Receive(void*, int)+0x5c>
   1e1f0:	e1a00006 	mov	r0, r6
   1e1f4:	eb0018c8 	bl	2451c <CSynchronizationEvent::Clear()>
   1e1f8:	e1a00006 	mov	r0, r6
   1e1fc:	eb0018d7 	bl	24560 <CSynchronizationEvent::Wait()>
   1e200:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e204:	e3530000 	cmp	r3, #0
   1e208:	aaffffe6 	bge	1e1a8 <CTCPConnection::Receive(void*, int)+0x2c>
   1e20c:	e594902c 	ldr	r9, [r4, #44]	; 0x2c
   1e210:	e1a00009 	mov	r0, r9
   1e214:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e218:	e1a09000 	mov	r9, r0
   1e21c:	e1a00009 	mov	r0, r9
   1e220:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0001e224 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1e224:	e3a0c006 	mov	ip, #6
   1e228:	e92d4070 	push	{r4, r5, r6, lr}
   1e22c:	e1a04000 	mov	r4, r0
   1e230:	e3a05000 	mov	r5, #0
   1e234:	e3a06001 	mov	r6, #1
   1e238:	e24dd008 	sub	sp, sp, #8
   1e23c:	e58dc000 	str	ip, [sp]
   1e240:	ebfffc82 	bl	1d450 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1e244:	e59f30b0 	ldr	r3, [pc, #176]	; 1e2fc <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xd8>
   1e248:	e5c4602a 	strb	r6, [r4, #42]	; 0x2a
   1e24c:	e5843000 	str	r3, [r4]
   1e250:	e5c45029 	strb	r5, [r4, #41]	; 0x29
   1e254:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1e258:	e2840030 	add	r0, r4, #48	; 0x30
   1e25c:	eb000bdf 	bl	211e0 <CNetQueue::CNetQueue()>
   1e260:	e284003c 	add	r0, r4, #60	; 0x3c
   1e264:	eb000bdd 	bl	211e0 <CNetQueue::CNetQueue()>
   1e268:	e3a01801 	mov	r1, #65536	; 0x10000
   1e26c:	e2840048 	add	r0, r4, #72	; 0x48
   1e270:	eb0007b3 	bl	20144 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1e274:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   1e278:	e1a01005 	mov	r1, r5
   1e27c:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   1e280:	e2840068 	add	r0, r4, #104	; 0x68
   1e284:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1e288:	e5845060 	str	r5, [r4, #96]	; 0x60
   1e28c:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1e290:	eb001891 	bl	244dc <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e294:	e1a01005 	mov	r1, r5
   1e298:	e2840070 	add	r0, r4, #112	; 0x70
   1e29c:	eb00188e 	bl	244dc <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e2a0:	eb002eef 	bl	29e64 <CTimer::Get()>
   1e2a4:	e3a02f86 	mov	r2, #536	; 0x218
   1e2a8:	e59f3050 	ldr	r3, [pc, #80]	; 1e300 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xdc>
   1e2ac:	e5840078 	str	r0, [r4, #120]	; 0x78
   1e2b0:	e1c42bb4 	strh	r2, [r4, #180]	; 0xb4
   1e2b4:	e5843094 	str	r3, [r4, #148]	; 0x94
   1e2b8:	e58430ac 	str	r3, [r4, #172]	; 0xac
   1e2bc:	e5846088 	str	r6, [r4, #136]	; 0x88
   1e2c0:	e1c459b8 	strh	r5, [r4, #152]	; 0x98
   1e2c4:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   1e2c8:	e58450b0 	str	r5, [r4, #176]	; 0xb0
   1e2cc:	e28400b8 	add	r0, r4, #184	; 0xb8
   1e2d0:	eb000887 	bl	204f4 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1e2d4:	e1a00004 	mov	r0, r4
   1e2d8:	e59f2024 	ldr	r2, [pc, #36]	; 1e304 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xe0>
   1e2dc:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1e2e0:	e5923000 	ldr	r3, [r2]
   1e2e4:	e5845080 	str	r5, [r4, #128]	; 0x80
   1e2e8:	e0833006 	add	r3, r3, r6
   1e2ec:	e5845084 	str	r5, [r4, #132]	; 0x84
   1e2f0:	e5823000 	str	r3, [r2]
   1e2f4:	e28dd008 	add	sp, sp, #8
   1e2f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e2fc:	00042700 	.word	0x00042700
   1e300:	00003908 	.word	0x00003908
   1e304:	0004c52c 	.word	0x0004c52c

0001e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>:
   1e308:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e30c:	e2017c02 	and	r7, r1, #512	; 0x200
   1e310:	e3570000 	cmp	r7, #0
   1e314:	03a05014 	moveq	r5, #20
   1e318:	13a05018 	movne	r5, #24
   1e31c:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1e320:	e24dd00c 	sub	sp, sp, #12
   1e324:	e59de674 	ldr	lr, [sp, #1652]	; 0x674
   1e328:	03a0b005 	moveq	fp, #5
   1e32c:	13a0b006 	movne	fp, #6
   1e330:	e095600e 	adds	r6, r5, lr
   1e334:	e59da670 	ldr	sl, [sp, #1648]	; 0x670
   1e338:	2a00003d 	bcs	1e434 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x12c>
   1e33c:	e1d091b6 	ldrh	r9, [r0, #22]
   1e340:	e1d081b4 	ldrh	r8, [r0, #20]
   1e344:	e6bfcf32 	rev	ip, r2
   1e348:	e6bf9fb9 	rev16	r9, r9
   1e34c:	e6bf2fb8 	rev16	r2, r8
   1e350:	e58dc00c 	str	ip, [sp, #12]
   1e354:	e211ca01 	ands	ip, r1, #4096	; 0x1000
   1e358:	e1a04000 	mov	r4, r0
   1e35c:	e1cd90b8 	strh	r9, [sp, #8]
   1e360:	e1cd20ba 	strh	r2, [sp, #10]
   1e364:	1a000028 	bne	1e40c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x104>
   1e368:	e1d439b8 	ldrh	r3, [r4, #152]	; 0x98
   1e36c:	e3570000 	cmp	r7, #0
   1e370:	e6bf3fb3 	rev16	r3, r3
   1e374:	e59420ac 	ldr	r2, [r4, #172]	; 0xac
   1e378:	e1cd31ba 	strh	r3, [sp, #26]
   1e37c:	159f30c0 	ldrne	r3, [pc, #192]	; 1e444 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x13c>
   1e380:	e181020b 	orr	r0, r1, fp, lsl #4
   1e384:	e6bf2fb2 	rev16	r2, r2
   1e388:	158d301c 	strne	r3, [sp, #28]
   1e38c:	e35e0000 	cmp	lr, #0
   1e390:	e1cd01b4 	strh	r0, [sp, #20]
   1e394:	e58dc010 	str	ip, [sp, #16]
   1e398:	e1cd21b6 	strh	r2, [sp, #22]
   1e39c:	0a000006 	beq	1e3bc <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0xb4>
   1e3a0:	e35a0000 	cmp	sl, #0
   1e3a4:	0a00001e 	beq	1e424 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x11c>
   1e3a8:	e28d3008 	add	r3, sp, #8
   1e3ac:	e1a0200e 	mov	r2, lr
   1e3b0:	e1a0100a 	mov	r1, sl
   1e3b4:	e0830005 	add	r0, r3, r5
   1e3b8:	eb0030fe 	bl	2a7b8 <memcpy>
   1e3bc:	e3a03000 	mov	r3, #0
   1e3c0:	e1a02006 	mov	r2, r6
   1e3c4:	e28d1008 	add	r1, sp, #8
   1e3c8:	e284001c 	add	r0, r4, #28
   1e3cc:	e1cd31b8 	strh	r3, [sp, #24]
   1e3d0:	eb000c98 	bl	21638 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1e3d4:	e594c008 	ldr	ip, [r4, #8]
   1e3d8:	e1cd01b8 	strh	r0, [sp, #24]
   1e3dc:	e35c0000 	cmp	ip, #0
   1e3e0:	0a00000b 	beq	1e414 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x10c>
   1e3e4:	e3a0e006 	mov	lr, #6
   1e3e8:	e1a03006 	mov	r3, r6
   1e3ec:	e1a0000c 	mov	r0, ip
   1e3f0:	e28d2008 	add	r2, sp, #8
   1e3f4:	e284100c 	add	r1, r4, #12
   1e3f8:	e58de000 	str	lr, [sp]
   1e3fc:	ebfff240 	bl	1ad04 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1e400:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1e404:	e28dd00c 	add	sp, sp, #12
   1e408:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e40c:	e6bfcf33 	rev	ip, r3
   1e410:	eaffffd4 	b	1e368 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x60>
   1e414:	e59f202c 	ldr	r2, [pc, #44]	; 1e448 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x140>
   1e418:	e59f102c 	ldr	r1, [pc, #44]	; 1e44c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x144>
   1e41c:	e59f002c 	ldr	r0, [pc, #44]	; 1e450 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x148>
   1e420:	eb0018c3 	bl	24734 <assertion_failed>
   1e424:	e59f2028 	ldr	r2, [pc, #40]	; 1e454 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x14c>
   1e428:	e59f101c 	ldr	r1, [pc, #28]	; 1e44c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x144>
   1e42c:	e59f0024 	ldr	r0, [pc, #36]	; 1e458 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x150>
   1e430:	eb0018bf 	bl	24734 <assertion_failed>
   1e434:	e59f2020 	ldr	r2, [pc, #32]	; 1e45c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x154>
   1e438:	e59f100c 	ldr	r1, [pc, #12]	; 1e44c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x144>
   1e43c:	e59f001c 	ldr	r0, [pc, #28]	; 1e460 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x158>
   1e440:	eb0018bb 	bl	24734 <assertion_failed>
   1e444:	b4050402 	.word	0xb4050402
   1e448:	00000587 	.word	0x00000587
   1e44c:	000424d0 	.word	0x000424d0
   1e450:	00041dc4 	.word	0x00041dc4
   1e454:	00000571 	.word	0x00000571
   1e458:	00041e2c 	.word	0x00041e2c
   1e45c:	00000557 	.word	0x00000557
   1e460:	000424e4 	.word	0x000424e4

0001e464 <CTCPConnection::ScanOptions(TTCPHeader*)>:
   1e464:	e3510000 	cmp	r1, #0
   1e468:	e92d4010 	push	{r4, lr}
   1e46c:	0a000029 	beq	1e518 <CTCPConnection::ScanOptions(TTCPHeader*)+0xb4>
   1e470:	e5d1200c 	ldrb	r2, [r1, #12]
   1e474:	e2813016 	add	r3, r1, #22
   1e478:	e1a02222 	lsr	r2, r2, #4
   1e47c:	e0812102 	add	r2, r1, r2, lsl #2
   1e480:	e1520003 	cmp	r2, r3
   1e484:	e2811014 	add	r1, r1, #20
   1e488:	38bd8010 	popcc	{r4, pc}
   1e48c:	e5d13000 	ldrb	r3, [r1]
   1e490:	e59fe090 	ldr	lr, [pc, #144]	; 1e528 <CTCPConnection::ScanOptions(TTCPHeader*)+0xc4>
   1e494:	e3530001 	cmp	r3, #1
   1e498:	0a00000b 	beq	1e4cc <CTCPConnection::ScanOptions(TTCPHeader*)+0x68>
   1e49c:	e3530002 	cmp	r3, #2
   1e4a0:	0a00000b 	beq	1e4d4 <CTCPConnection::ScanOptions(TTCPHeader*)+0x70>
   1e4a4:	e3530000 	cmp	r3, #0
   1e4a8:	08bd8010 	popeq	{r4, pc}
   1e4ac:	e5d13001 	ldrb	r3, [r1, #1]
   1e4b0:	e0811003 	add	r1, r1, r3
   1e4b4:	e2813002 	add	r3, r1, #2
   1e4b8:	e1520003 	cmp	r2, r3
   1e4bc:	38bd8010 	popcc	{r4, pc}
   1e4c0:	e5d13000 	ldrb	r3, [r1]
   1e4c4:	e3530001 	cmp	r3, #1
   1e4c8:	1afffff3 	bne	1e49c <CTCPConnection::ScanOptions(TTCPHeader*)+0x38>
   1e4cc:	e2811001 	add	r1, r1, #1
   1e4d0:	eafffff7 	b	1e4b4 <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1e4d4:	e5d13001 	ldrb	r3, [r1, #1]
   1e4d8:	e3530004 	cmp	r3, #4
   1e4dc:	1afffff3 	bne	1e4b0 <CTCPConnection::ScanOptions(TTCPHeader*)+0x4c>
   1e4e0:	e281c004 	add	ip, r1, #4
   1e4e4:	e152000c 	cmp	r2, ip
   1e4e8:	3afffff0 	bcc	1e4b0 <CTCPConnection::ScanOptions(TTCPHeader*)+0x4c>
   1e4ec:	e1d1c0b2 	ldrh	ip, [r1, #2]
   1e4f0:	e6bfcfbc 	rev16	ip, ip
   1e4f4:	e6ffc07c 	uxth	ip, ip
   1e4f8:	e28cc014 	add	ip, ip, #20
   1e4fc:	e15c000e 	cmp	ip, lr
   1e500:	21a0c00e 	movcs	ip, lr
   1e504:	e24cc014 	sub	ip, ip, #20
   1e508:	e35c0009 	cmp	ip, #9
   1e50c:	9affffe7 	bls	1e4b0 <CTCPConnection::ScanOptions(TTCPHeader*)+0x4c>
   1e510:	e1c0cbb4 	strh	ip, [r0, #180]	; 0xb4
   1e514:	eaffffe4 	b	1e4ac <CTCPConnection::ScanOptions(TTCPHeader*)+0x48>
   1e518:	e59f200c 	ldr	r2, [pc, #12]	; 1e52c <CTCPConnection::ScanOptions(TTCPHeader*)+0xc8>
   1e51c:	e59f100c 	ldr	r1, [pc, #12]	; 1e530 <CTCPConnection::ScanOptions(TTCPHeader*)+0xcc>
   1e520:	e59f000c 	ldr	r0, [pc, #12]	; 1e534 <CTCPConnection::ScanOptions(TTCPHeader*)+0xd0>
   1e524:	eb001882 	bl	24734 <assertion_failed>
   1e528:	000005c8 	.word	0x000005c8
   1e52c:	0000058d 	.word	0x0000058d
   1e530:	000424d0 	.word	0x000424d0
   1e534:	00042504 	.word	0x00042504

0001e538 <CTCPConnection::CalculateISN()>:
   1e538:	e92d4070 	push	{r4, r5, r6, lr}
   1e53c:	e1a05000 	mov	r5, r0
   1e540:	e5900078 	ldr	r0, [r0, #120]	; 0x78
   1e544:	e3500000 	cmp	r0, #0
   1e548:	0a00000f 	beq	1e58c <CTCPConnection::CalculateISN()+0x54>
   1e54c:	eb002b96 	bl	293ac <CTimer::GetTime() const>
   1e550:	e1a04000 	mov	r4, r0
   1e554:	e5950078 	ldr	r0, [r5, #120]	; 0x78
   1e558:	eb002b8f 	bl	2939c <CTimer::GetTicks() const>
   1e55c:	e59f3038 	ldr	r3, [pc, #56]	; 1e59c <CTCPConnection::CalculateISN()+0x64>
   1e560:	e0844104 	add	r4, r4, r4, lsl #2
   1e564:	e0832093 	umull	r2, r3, r3, r0
   1e568:	e1a032a3 	lsr	r3, r3, #5
   1e56c:	e0833103 	add	r3, r3, r3, lsl #2
   1e570:	e0833103 	add	r3, r3, r3, lsl #2
   1e574:	e0844104 	add	r4, r4, r4, lsl #2
   1e578:	e0400103 	sub	r0, r0, r3, lsl #2
   1e57c:	e0800104 	add	r0, r0, r4, lsl #2
   1e580:	e0800080 	add	r0, r0, r0, lsl #1
   1e584:	e0600180 	rsb	r0, r0, r0, lsl #3
   1e588:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e58c:	e59f200c 	ldr	r2, [pc, #12]	; 1e5a0 <CTCPConnection::CalculateISN()+0x68>
   1e590:	e59f100c 	ldr	r1, [pc, #12]	; 1e5a4 <CTCPConnection::CalculateISN()+0x6c>
   1e594:	e59f000c 	ldr	r0, [pc, #12]	; 1e5a8 <CTCPConnection::CalculateISN()+0x70>
   1e598:	eb001865 	bl	24734 <assertion_failed>
   1e59c:	51eb851f 	.word	0x51eb851f
   1e5a0:	000005b6 	.word	0x000005b6
   1e5a4:	000424d0 	.word	0x000424d0
   1e5a8:	0003d568 	.word	0x0003d568

0001e5ac <CTCPConnection::StopTimer(unsigned int)>:
   1e5ac:	e3510002 	cmp	r1, #2
   1e5b0:	e92d4070 	push	{r4, r5, r6, lr}
   1e5b4:	8a00001c 	bhi	1e62c <CTCPConnection::StopTimer(unsigned int)+0x80>
   1e5b8:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   1e5bc:	e1a05000 	mov	r5, r0
   1e5c0:	e3530000 	cmp	r3, #0
   1e5c4:	0a00001c 	beq	1e63c <CTCPConnection::StopTimer(unsigned int)+0x90>
   1e5c8:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   1e5cc:	e281401e 	add	r4, r1, #30
   1e5d0:	e3500000 	cmp	r0, #0
   1e5d4:	1a00000d 	bne	1e610 <CTCPConnection::StopTimer(unsigned int)+0x64>
   1e5d8:	e0852104 	add	r2, r5, r4, lsl #2
   1e5dc:	e5921004 	ldr	r1, [r2, #4]
   1e5e0:	e3510000 	cmp	r1, #0
   1e5e4:	08bd8070 	popeq	{r4, r5, r6, pc}
   1e5e8:	e1a00003 	mov	r0, r3
   1e5ec:	eb002cac 	bl	298a4 <CTimer::CancelKernelTimer(unsigned int)>
   1e5f0:	e3a03000 	mov	r3, #0
   1e5f4:	e0851104 	add	r1, r5, r4, lsl #2
   1e5f8:	e5813004 	str	r3, [r1, #4]
   1e5fc:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   1e600:	e3530000 	cmp	r3, #0
   1e604:	08bd8070 	popeq	{r4, r5, r6, pc}
   1e608:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e60c:	ea0035a6 	b	2bcac <LeaveCritical>
   1e610:	eb00357b 	bl	2bc04 <EnterCritical>
   1e614:	e0853104 	add	r3, r5, r4, lsl #2
   1e618:	e5931004 	ldr	r1, [r3, #4]
   1e61c:	e3510000 	cmp	r1, #0
   1e620:	0afffff5 	beq	1e5fc <CTCPConnection::StopTimer(unsigned int)+0x50>
   1e624:	e5953078 	ldr	r3, [r5, #120]	; 0x78
   1e628:	eaffffee 	b	1e5e8 <CTCPConnection::StopTimer(unsigned int)+0x3c>
   1e62c:	e59f2018 	ldr	r2, [pc, #24]	; 1e64c <CTCPConnection::StopTimer(unsigned int)+0xa0>
   1e630:	e59f1018 	ldr	r1, [pc, #24]	; 1e650 <CTCPConnection::StopTimer(unsigned int)+0xa4>
   1e634:	e59f0018 	ldr	r0, [pc, #24]	; 1e654 <CTCPConnection::StopTimer(unsigned int)+0xa8>
   1e638:	eb00183d 	bl	24734 <assertion_failed>
   1e63c:	e59f2014 	ldr	r2, [pc, #20]	; 1e658 <CTCPConnection::StopTimer(unsigned int)+0xac>
   1e640:	e59f1008 	ldr	r1, [pc, #8]	; 1e650 <CTCPConnection::StopTimer(unsigned int)+0xa4>
   1e644:	e59f0010 	ldr	r0, [pc, #16]	; 1e65c <CTCPConnection::StopTimer(unsigned int)+0xb0>
   1e648:	eb001839 	bl	24734 <assertion_failed>
   1e64c:	000005c9 	.word	0x000005c9
   1e650:	000424d0 	.word	0x000424d0
   1e654:	00042514 	.word	0x00042514
   1e658:	000005ca 	.word	0x000005ca
   1e65c:	0003d568 	.word	0x0003d568

0001e660 <CTCPConnection::~CTCPConnection()>:
   1e660:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1e664:	e59f30bc 	ldr	r3, [pc, #188]	; 1e728 <CTCPConnection::~CTCPConnection()+0xc8>
   1e668:	e21110ff 	ands	r1, r1, #255	; 0xff
   1e66c:	e92d4070 	push	{r4, r5, r6, lr}
   1e670:	e5803000 	str	r3, [r0]
   1e674:	1a000023 	bne	1e708 <CTCPConnection::~CTCPConnection()+0xa8>
   1e678:	e1a04000 	mov	r4, r0
   1e67c:	ebffffca 	bl	1e5ac <CTCPConnection::StopTimer(unsigned int)>
   1e680:	e3a01001 	mov	r1, #1
   1e684:	e1a00004 	mov	r0, r4
   1e688:	ebffffc7 	bl	1e5ac <CTCPConnection::StopTimer(unsigned int)>
   1e68c:	e2845068 	add	r5, r4, #104	; 0x68
   1e690:	e3a01002 	mov	r1, #2
   1e694:	e1a00004 	mov	r0, r4
   1e698:	ebffffc3 	bl	1e5ac <CTCPConnection::StopTimer(unsigned int)>
   1e69c:	e2846070 	add	r6, r4, #112	; 0x70
   1e6a0:	e1a00005 	mov	r0, r5
   1e6a4:	eb00179f 	bl	24528 <CSynchronizationEvent::Set()>
   1e6a8:	e1a00006 	mov	r0, r6
   1e6ac:	eb00179d 	bl	24528 <CSynchronizationEvent::Set()>
   1e6b0:	e59f2074 	ldr	r2, [pc, #116]	; 1e72c <CTCPConnection::~CTCPConnection()+0xcc>
   1e6b4:	e5923000 	ldr	r3, [r2]
   1e6b8:	e3530000 	cmp	r3, #0
   1e6bc:	0a000015 	beq	1e718 <CTCPConnection::~CTCPConnection()+0xb8>
   1e6c0:	e2433001 	sub	r3, r3, #1
   1e6c4:	e28400b8 	add	r0, r4, #184	; 0xb8
   1e6c8:	e5823000 	str	r3, [r2]
   1e6cc:	eb00079f 	bl	20550 <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>
   1e6d0:	e1a00006 	mov	r0, r6
   1e6d4:	eb001784 	bl	244ec <CSynchronizationEvent::~CSynchronizationEvent()>
   1e6d8:	e1a00005 	mov	r0, r5
   1e6dc:	eb001782 	bl	244ec <CSynchronizationEvent::~CSynchronizationEvent()>
   1e6e0:	e2840048 	add	r0, r4, #72	; 0x48
   1e6e4:	eb0006ab 	bl	20198 <CRetransmissionQueue::~CRetransmissionQueue()>
   1e6e8:	e284003c 	add	r0, r4, #60	; 0x3c
   1e6ec:	eb000af3 	bl	212c0 <CNetQueue::~CNetQueue()>
   1e6f0:	e2840030 	add	r0, r4, #48	; 0x30
   1e6f4:	eb000af1 	bl	212c0 <CNetQueue::~CNetQueue()>
   1e6f8:	e1a00004 	mov	r0, r4
   1e6fc:	ebfffb7a 	bl	1d4ec <CNetConnection::~CNetConnection()>
   1e700:	e1a00004 	mov	r0, r4
   1e704:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e708:	e3a020d1 	mov	r2, #209	; 0xd1
   1e70c:	e59f101c 	ldr	r1, [pc, #28]	; 1e730 <CTCPConnection::~CTCPConnection()+0xd0>
   1e710:	e59f001c 	ldr	r0, [pc, #28]	; 1e734 <CTCPConnection::~CTCPConnection()+0xd4>
   1e714:	eb001806 	bl	24734 <assertion_failed>
   1e718:	e3a020dc 	mov	r2, #220	; 0xdc
   1e71c:	e59f100c 	ldr	r1, [pc, #12]	; 1e730 <CTCPConnection::~CTCPConnection()+0xd0>
   1e720:	e59f0010 	ldr	r0, [pc, #16]	; 1e738 <CTCPConnection::~CTCPConnection()+0xd8>
   1e724:	eb001802 	bl	24734 <assertion_failed>
   1e728:	00042700 	.word	0x00042700
   1e72c:	0004c52c 	.word	0x0004c52c
   1e730:	000424d0 	.word	0x000424d0
   1e734:	00042530 	.word	0x00042530
   1e738:	0004254c 	.word	0x0004254c

0001e73c <CTCPConnection::~CTCPConnection()>:
   1e73c:	e92d4010 	push	{r4, lr}
   1e740:	e1a04000 	mov	r4, r0
   1e744:	ebffffc5 	bl	1e660 <CTCPConnection::~CTCPConnection()>
   1e748:	e1a00004 	mov	r0, r4
   1e74c:	e3a010e0 	mov	r1, #224	; 0xe0
   1e750:	eb00320c 	bl	2af88 <operator delete(void*, unsigned int)>
   1e754:	e1a00004 	mov	r0, r4
   1e758:	e8bd8010 	pop	{r4, pc}

0001e75c <CTCPConnection::Close()>:
   1e75c:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1e760:	e92d4010 	push	{r4, lr}
   1e764:	e3530000 	cmp	r3, #0
   1e768:	e1a04000 	mov	r4, r0
   1e76c:	ba00000e 	blt	1e7ac <CTCPConnection::Close()+0x50>
   1e770:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1e774:	e353000a 	cmp	r3, #10
   1e778:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e77c:	ea000017 	b	1e7e0 <CTCPConnection::Close()+0x84>
   1e780:	0001e7b4 	.word	0x0001e7b4
   1e784:	0001e818 	.word	0x0001e818
   1e788:	0001e818 	.word	0x0001e818
   1e78c:	0001e7f4 	.word	0x0001e7f4
   1e790:	0001e7f4 	.word	0x0001e7f4
   1e794:	0001e7e0 	.word	0x0001e7e0
   1e798:	0001e7e0 	.word	0x0001e7e0
   1e79c:	0001e7bc 	.word	0x0001e7bc
   1e7a0:	0001e7b4 	.word	0x0001e7b4
   1e7a4:	0001e7b4 	.word	0x0001e7b4
   1e7a8:	0001e7b4 	.word	0x0001e7b4
   1e7ac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e7b0:	e8bd8010 	pop	{r4, pc}
   1e7b4:	e3e00000 	mvn	r0, #0
   1e7b8:	e8bd8010 	pop	{r4, pc}
   1e7bc:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   1e7c0:	e3530000 	cmp	r3, #0
   1e7c4:	1a00001c 	bne	1e83c <CTCPConnection::Close()+0xe0>
   1e7c8:	e3a01005 	mov	r1, #5
   1e7cc:	e3a02009 	mov	r2, #9
   1e7d0:	e3a03001 	mov	r3, #1
   1e7d4:	e5801060 	str	r1, [r0, #96]	; 0x60
   1e7d8:	e5c0205f 	strb	r2, [r0, #95]	; 0x5f
   1e7dc:	e5c0305e 	strb	r3, [r0, #94]	; 0x5e
   1e7e0:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e7e4:	e3530000 	cmp	r3, #0
   1e7e8:	baffffef 	blt	1e7ac <CTCPConnection::Close()+0x50>
   1e7ec:	e3a00000 	mov	r0, #0
   1e7f0:	e8bd8010 	pop	{r4, pc}
   1e7f4:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   1e7f8:	e3530000 	cmp	r3, #0
   1e7fc:	1a00000a 	bne	1e82c <CTCPConnection::Close()+0xd0>
   1e800:	e3a03005 	mov	r3, #5
   1e804:	e3a02001 	mov	r2, #1
   1e808:	e5803060 	str	r3, [r0, #96]	; 0x60
   1e80c:	e5c0305f 	strb	r3, [r0, #95]	; 0x5f
   1e810:	e5c0205e 	strb	r2, [r0, #94]	; 0x5e
   1e814:	eafffff1 	b	1e7e0 <CTCPConnection::Close()+0x84>
   1e818:	e3a01001 	mov	r1, #1
   1e81c:	ebffff62 	bl	1e5ac <CTCPConnection::StopTimer(unsigned int)>
   1e820:	e3a03000 	mov	r3, #0
   1e824:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1e828:	eaffffec 	b	1e7e0 <CTCPConnection::Close()+0x84>
   1e82c:	e3a02d05 	mov	r2, #320	; 0x140
   1e830:	e59f1014 	ldr	r1, [pc, #20]	; 1e84c <CTCPConnection::Close()+0xf0>
   1e834:	e59f0014 	ldr	r0, [pc, #20]	; 1e850 <CTCPConnection::Close()+0xf4>
   1e838:	eb0017bd 	bl	24734 <assertion_failed>
   1e83c:	e59f2010 	ldr	r2, [pc, #16]	; 1e854 <CTCPConnection::Close()+0xf8>
   1e840:	e59f1004 	ldr	r1, [pc, #4]	; 1e84c <CTCPConnection::Close()+0xf0>
   1e844:	e59f0004 	ldr	r0, [pc, #4]	; 1e850 <CTCPConnection::Close()+0xf4>
   1e848:	eb0017b9 	bl	24734 <assertion_failed>
   1e84c:	000424d0 	.word	0x000424d0
   1e850:	00042560 	.word	0x00042560
   1e854:	0000014b 	.word	0x0000014b

0001e858 <CTCPConnection::StartTimer(unsigned int, unsigned int)>:
   1e858:	e92d4070 	push	{r4, r5, r6, lr}
   1e85c:	e3510002 	cmp	r1, #2
   1e860:	e24dd008 	sub	sp, sp, #8
   1e864:	8a000012 	bhi	1e8b4 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x5c>
   1e868:	e3520000 	cmp	r2, #0
   1e86c:	e1a06002 	mov	r6, r2
   1e870:	0a000013 	beq	1e8c4 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x6c>
   1e874:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   1e878:	e1a04000 	mov	r4, r0
   1e87c:	e3530000 	cmp	r3, #0
   1e880:	0a000013 	beq	1e8d4 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x7c>
   1e884:	e1a05001 	mov	r5, r1
   1e888:	ebffff47 	bl	1e5ac <CTCPConnection::StopTimer(unsigned int)>
   1e88c:	e58d4000 	str	r4, [sp]
   1e890:	e1a01006 	mov	r1, r6
   1e894:	e1a03005 	mov	r3, r5
   1e898:	e59f2044 	ldr	r2, [pc, #68]	; 1e8e4 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x8c>
   1e89c:	e5940078 	ldr	r0, [r4, #120]	; 0x78
   1e8a0:	eb002bad 	bl	2975c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1e8a4:	e0841105 	add	r1, r4, r5, lsl #2
   1e8a8:	e581007c 	str	r0, [r1, #124]	; 0x7c
   1e8ac:	e28dd008 	add	sp, sp, #8
   1e8b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e8b4:	e59f202c 	ldr	r2, [pc, #44]	; 1e8e8 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x90>
   1e8b8:	e59f102c 	ldr	r1, [pc, #44]	; 1e8ec <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e8bc:	e59f002c 	ldr	r0, [pc, #44]	; 1e8f0 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x98>
   1e8c0:	eb00179b 	bl	24734 <assertion_failed>
   1e8c4:	e59f2028 	ldr	r2, [pc, #40]	; 1e8f4 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x9c>
   1e8c8:	e59f101c 	ldr	r1, [pc, #28]	; 1e8ec <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e8cc:	e59f0024 	ldr	r0, [pc, #36]	; 1e8f8 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0xa0>
   1e8d0:	eb001797 	bl	24734 <assertion_failed>
   1e8d4:	e3a02d17 	mov	r2, #1472	; 0x5c0
   1e8d8:	e59f100c 	ldr	r1, [pc, #12]	; 1e8ec <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e8dc:	e59f0018 	ldr	r0, [pc, #24]	; 1e8fc <CTCPConnection::StartTimer(unsigned int, unsigned int)+0xa4>
   1e8e0:	eb001793 	bl	24734 <assertion_failed>
   1e8e4:	000200f4 	.word	0x000200f4
   1e8e8:	000005be 	.word	0x000005be
   1e8ec:	000424d0 	.word	0x000424d0
   1e8f0:	00042514 	.word	0x00042514
   1e8f4:	000005bf 	.word	0x000005bf
   1e8f8:	00042570 	.word	0x00042570
   1e8fc:	0003d568 	.word	0x0003d568

0001e900 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1e900:	e3a0c006 	mov	ip, #6
   1e904:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1e908:	e1a04000 	mov	r4, r0
   1e90c:	e3a05000 	mov	r5, #0
   1e910:	e3a06001 	mov	r6, #1
   1e914:	e24dd014 	sub	sp, sp, #20
   1e918:	e1dde2b8 	ldrh	lr, [sp, #40]	; 0x28
   1e91c:	e58dc008 	str	ip, [sp, #8]
   1e920:	e1ddc2bc 	ldrh	ip, [sp, #44]	; 0x2c
   1e924:	e58de000 	str	lr, [sp]
   1e928:	e58dc004 	str	ip, [sp, #4]
   1e92c:	ebfffa9b 	bl	1d3a0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1e930:	e59f3140 	ldr	r3, [pc, #320]	; 1ea78 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x178>
   1e934:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   1e938:	e5843000 	str	r3, [r4]
   1e93c:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1e940:	e5c46029 	strb	r6, [r4, #41]	; 0x29
   1e944:	e2840030 	add	r0, r4, #48	; 0x30
   1e948:	eb000a24 	bl	211e0 <CNetQueue::CNetQueue()>
   1e94c:	e284003c 	add	r0, r4, #60	; 0x3c
   1e950:	eb000a22 	bl	211e0 <CNetQueue::CNetQueue()>
   1e954:	e3a01801 	mov	r1, #65536	; 0x10000
   1e958:	e2840048 	add	r0, r4, #72	; 0x48
   1e95c:	eb0005f8 	bl	20144 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1e960:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   1e964:	e1a01005 	mov	r1, r5
   1e968:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   1e96c:	e2840068 	add	r0, r4, #104	; 0x68
   1e970:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1e974:	e5845060 	str	r5, [r4, #96]	; 0x60
   1e978:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1e97c:	eb0016d6 	bl	244dc <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e980:	e1a01005 	mov	r1, r5
   1e984:	e2840070 	add	r0, r4, #112	; 0x70
   1e988:	eb0016d3 	bl	244dc <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e98c:	eb002d34 	bl	29e64 <CTimer::Get()>
   1e990:	e3a02f86 	mov	r2, #536	; 0x218
   1e994:	e59f30e0 	ldr	r3, [pc, #224]	; 1ea7c <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x17c>
   1e998:	e28470b8 	add	r7, r4, #184	; 0xb8
   1e99c:	e5840078 	str	r0, [r4, #120]	; 0x78
   1e9a0:	e1c42bb4 	strh	r2, [r4, #180]	; 0xb4
   1e9a4:	e5843094 	str	r3, [r4, #148]	; 0x94
   1e9a8:	e58430ac 	str	r3, [r4, #172]	; 0xac
   1e9ac:	e1a00007 	mov	r0, r7
   1e9b0:	e5846088 	str	r6, [r4, #136]	; 0x88
   1e9b4:	e1c459b8 	strh	r5, [r4, #152]	; 0x98
   1e9b8:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   1e9bc:	e58450b0 	str	r5, [r4, #176]	; 0xb0
   1e9c0:	eb0006cb 	bl	204f4 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1e9c4:	e59f20b4 	ldr	r2, [pc, #180]	; 1ea80 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x180>
   1e9c8:	e1a00004 	mov	r0, r4
   1e9cc:	e5923000 	ldr	r3, [r2]
   1e9d0:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1e9d4:	e0833006 	add	r3, r3, r6
   1e9d8:	e5845080 	str	r5, [r4, #128]	; 0x80
   1e9dc:	e5845084 	str	r5, [r4, #132]	; 0x84
   1e9e0:	e5823000 	str	r3, [r2]
   1e9e4:	ebfffed3 	bl	1e538 <CTCPConnection::CalculateISN()>
   1e9e8:	e1a01000 	mov	r1, r0
   1e9ec:	e1a00007 	mov	r0, r7
   1e9f0:	e58410a4 	str	r1, [r4, #164]	; 0xa4
   1e9f4:	eb0006d8 	bl	2055c <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1e9f8:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   1e9fc:	e1a03005 	mov	r3, r5
   1ea00:	e0821006 	add	r1, r2, r6
   1ea04:	e58d5004 	str	r5, [sp, #4]
   1ea08:	e58d5000 	str	r5, [sp]
   1ea0c:	e1a00004 	mov	r0, r4
   1ea10:	e5841090 	str	r1, [r4, #144]	; 0x90
   1ea14:	e584208c 	str	r2, [r4, #140]	; 0x8c
   1ea18:	e3a01c02 	mov	r1, #512	; 0x200
   1ea1c:	ebfffe39 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ea20:	e1500005 	cmp	r0, r5
   1ea24:	1a000002 	bne	1ea34 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x134>
   1ea28:	e1a00004 	mov	r0, r4
   1ea2c:	e28dd014 	add	sp, sp, #20
   1ea30:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1ea34:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1ea38:	e1a02006 	mov	r2, r6
   1ea3c:	e1a00007 	mov	r0, r7
   1ea40:	eb0006e1 	bl	205cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1ea44:	e3a03005 	mov	r3, #5
   1ea48:	e3a02002 	mov	r2, #2
   1ea4c:	e1a00007 	mov	r0, r7
   1ea50:	e5c4202a 	strb	r2, [r4, #42]	; 0x2a
   1ea54:	e5843060 	str	r3, [r4, #96]	; 0x60
   1ea58:	eb0006bd 	bl	20554 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1ea5c:	e1a01006 	mov	r1, r6
   1ea60:	e1a02000 	mov	r2, r0
   1ea64:	e1a00004 	mov	r0, r4
   1ea68:	ebffff7a 	bl	1e858 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ea6c:	e1a00004 	mov	r0, r4
   1ea70:	e28dd014 	add	sp, sp, #20
   1ea74:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1ea78:	00042700 	.word	0x00042700
   1ea7c:	00003908 	.word	0x00003908
   1ea80:	0004c52c 	.word	0x0004c52c

0001ea84 <CTCPConnection::Process()>:
   1ea84:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1ea88:	e5d03064 	ldrb	r3, [r0, #100]	; 0x64
   1ea8c:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1ea90:	e3530000 	cmp	r3, #0
   1ea94:	e1a04000 	mov	r4, r0
   1ea98:	e24dd004 	sub	sp, sp, #4
   1ea9c:	1a00002a 	bne	1eb4c <CTCPConnection::Process()+0xc8>
   1eaa0:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1eaa4:	e353000a 	cmp	r3, #10
   1eaa8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1eaac:	ea0000b9 	b	1ed98 <CTCPConnection::Process()+0x314>
   1eab0:	0001eb40 	.word	0x0001eb40
   1eab4:	0001eb40 	.word	0x0001eb40
   1eab8:	0001eadc 	.word	0x0001eadc
   1eabc:	0001eadc 	.word	0x0001eadc
   1eac0:	0001eb70 	.word	0x0001eb70
   1eac4:	0001eb70 	.word	0x0001eb70
   1eac8:	0001eb40 	.word	0x0001eb40
   1eacc:	0001eb70 	.word	0x0001eb70
   1ead0:	0001eb70 	.word	0x0001eb70
   1ead4:	0001eb70 	.word	0x0001eb70
   1ead8:	0001eb40 	.word	0x0001eb40
   1eadc:	e5d0305d 	ldrb	r3, [r0, #93]	; 0x5d
   1eae0:	e3530000 	cmp	r3, #0
   1eae4:	0a000015 	beq	1eb40 <CTCPConnection::Process()+0xbc>
   1eae8:	e3a03000 	mov	r3, #0
   1eaec:	e5c0305d 	strb	r3, [r0, #93]	; 0x5d
   1eaf0:	e5d0202a 	ldrb	r2, [r0, #42]	; 0x2a
   1eaf4:	e58d3004 	str	r3, [sp, #4]
   1eaf8:	e3520002 	cmp	r2, #2
   1eafc:	e58d3000 	str	r3, [sp]
   1eb00:	03a01c02 	moveq	r1, #512	; 0x200
   1eb04:	11c02ad4 	ldrdne	r2, [r0, #164]	; 0xa4
   1eb08:	13a01c12 	movne	r1, #4608	; 0x1200
   1eb0c:	059020a4 	ldreq	r2, [r0, #164]	; 0xa4
   1eb10:	ebfffdfc 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1eb14:	e3a02001 	mov	r2, #1
   1eb18:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1eb1c:	e28400b8 	add	r0, r4, #184	; 0xb8
   1eb20:	e58d000c 	str	r0, [sp, #12]
   1eb24:	eb0006a8 	bl	205cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1eb28:	e59d000c 	ldr	r0, [sp, #12]
   1eb2c:	eb000688 	bl	20554 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1eb30:	e3a01001 	mov	r1, #1
   1eb34:	e1a02000 	mov	r2, r0
   1eb38:	e1a00004 	mov	r0, r4
   1eb3c:	ebffff45 	bl	1e858 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1eb40:	e28dde65 	add	sp, sp, #1616	; 0x650
   1eb44:	e28dd004 	add	sp, sp, #4
   1eb48:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1eb4c:	e3e02000 	mvn	r2, #0
   1eb50:	e3a03000 	mov	r3, #0
   1eb54:	e580202c 	str	r2, [r0, #44]	; 0x2c
   1eb58:	e2800068 	add	r0, r0, #104	; 0x68
   1eb5c:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1eb60:	eb001670 	bl	24528 <CSynchronizationEvent::Set()>
   1eb64:	e28dde65 	add	sp, sp, #1616	; 0x650
   1eb68:	e28dd004 	add	sp, sp, #4
   1eb6c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1eb70:	e2806048 	add	r6, r0, #72	; 0x48
   1eb74:	e1a00006 	mov	r0, r6
   1eb78:	eb00058f 	bl	201bc <CRetransmissionQueue::IsEmpty() const>
   1eb7c:	e3500000 	cmp	r0, #0
   1eb80:	1a000062 	bne	1ed10 <CTCPConnection::Process()+0x28c>
   1eb84:	e2845030 	add	r5, r4, #48	; 0x30
   1eb88:	ea000008 	b	1ebb0 <CTCPConnection::Process()+0x12c>
   1eb8c:	e3a02000 	mov	r2, #0
   1eb90:	e1a00005 	mov	r0, r5
   1eb94:	e28d1010 	add	r1, sp, #16
   1eb98:	eb000a13 	bl	213ec <CNetQueue::Dequeue(void*, void**)>
   1eb9c:	e2502000 	subs	r2, r0, #0
   1eba0:	0a000006 	beq	1ebc0 <CTCPConnection::Process()+0x13c>
   1eba4:	e1a00006 	mov	r0, r6
   1eba8:	e28d1010 	add	r1, sp, #16
   1ebac:	eb0005a8 	bl	20254 <CRetransmissionQueue::Write(void const*, unsigned int)>
   1ebb0:	e1a00006 	mov	r0, r6
   1ebb4:	eb000586 	bl	201d4 <CRetransmissionQueue::GetFreeSpace() const>
   1ebb8:	e3500d19 	cmp	r0, #1600	; 0x640
   1ebbc:	2afffff2 	bcs	1eb8c <CTCPConnection::Process()+0x108>
   1ebc0:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1ebc4:	e3530004 	cmp	r3, #4
   1ebc8:	0a000042 	beq	1ecd8 <CTCPConnection::Process()+0x254>
   1ebcc:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1ebd0:	e3530007 	cmp	r3, #7
   1ebd4:	0a00003f 	beq	1ecd8 <CTCPConnection::Process()+0x254>
   1ebd8:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
   1ebdc:	e3530000 	cmp	r3, #0
   1ebe0:	1a000043 	bne	1ecf4 <CTCPConnection::Process()+0x270>
   1ebe4:	e28d7010 	add	r7, sp, #16
   1ebe8:	e2848030 	add	r8, r4, #48	; 0x30
   1ebec:	ea000015 	b	1ec48 <CTCPConnection::Process()+0x1c4>
   1ebf0:	e3a01a01 	mov	r1, #4096	; 0x1000
   1ebf4:	e58d5004 	str	r5, [sp, #4]
   1ebf8:	e58d7000 	str	r7, [sp]
   1ebfc:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   1ec00:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   1ec04:	e28490b8 	add	r9, r4, #184	; 0xb8
   1ec08:	e1a00004 	mov	r0, r4
   1ec0c:	ebfffdbd 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ec10:	e1a02005 	mov	r2, r5
   1ec14:	e5941090 	ldr	r1, [r4, #144]	; 0x90
   1ec18:	e1a00009 	mov	r0, r9
   1ec1c:	e58d900c 	str	r9, [sp, #12]
   1ec20:	eb000669 	bl	205cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1ec24:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   1ec28:	e59d000c 	ldr	r0, [sp, #12]
   1ec2c:	e0835005 	add	r5, r3, r5
   1ec30:	e5845090 	str	r5, [r4, #144]	; 0x90
   1ec34:	eb000646 	bl	20554 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1ec38:	e3a01001 	mov	r1, #1
   1ec3c:	e1a02000 	mov	r2, r0
   1ec40:	e1a00004 	mov	r0, r4
   1ec44:	ebffff03 	bl	1e858 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ec48:	e1a00006 	mov	r0, r6
   1ec4c:	eb0005b0 	bl	20314 <CRetransmissionQueue::GetBytesAvailable() const>
   1ec50:	e3500000 	cmp	r0, #0
   1ec54:	0affffb9 	beq	1eb40 <CTCPConnection::Process()+0xbc>
   1ec58:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
   1ec5c:	e5942094 	ldr	r2, [r4, #148]	; 0x94
   1ec60:	e5945090 	ldr	r5, [r4, #144]	; 0x90
   1ec64:	e0833002 	add	r3, r3, r2
   1ec68:	e0533005 	subs	r3, r3, r5
   1ec6c:	0affffb3 	beq	1eb40 <CTCPConnection::Process()+0xbc>
   1ec70:	e1d45bb4 	ldrh	r5, [r4, #180]	; 0xb4
   1ec74:	e1550003 	cmp	r5, r3
   1ec78:	31a03005 	movcc	r3, r5
   1ec7c:	e1530000 	cmp	r3, r0
   1ec80:	31a05003 	movcc	r5, r3
   1ec84:	21a05000 	movcs	r5, r0
   1ec88:	e3550d19 	cmp	r5, #1600	; 0x640
   1ec8c:	8a00000d 	bhi	1ecc8 <CTCPConnection::Process()+0x244>
   1ec90:	e1a02005 	mov	r2, r5
   1ec94:	e1a01007 	mov	r1, r7
   1ec98:	e1a00006 	mov	r0, r6
   1ec9c:	eb0005bb 	bl	20390 <CRetransmissionQueue::Read(void*, unsigned int)>
   1eca0:	e1a00006 	mov	r0, r6
   1eca4:	eb000544 	bl	201bc <CRetransmissionQueue::IsEmpty() const>
   1eca8:	e3500000 	cmp	r0, #0
   1ecac:	0affffcf 	beq	1ebf0 <CTCPConnection::Process()+0x16c>
   1ecb0:	e1a00008 	mov	r0, r8
   1ecb4:	eb00094e 	bl	211f4 <CNetQueue::IsEmpty() const>
   1ecb8:	e3500000 	cmp	r0, #0
   1ecbc:	0affffcb 	beq	1ebf0 <CTCPConnection::Process()+0x16c>
   1ecc0:	e3a01b06 	mov	r1, #6144	; 0x1800
   1ecc4:	eaffffca 	b	1ebf4 <CTCPConnection::Process()+0x170>
   1ecc8:	e59f20d0 	ldr	r2, [pc, #208]	; 1eda0 <CTCPConnection::Process()+0x31c>
   1eccc:	e59f10d0 	ldr	r1, [pc, #208]	; 1eda4 <CTCPConnection::Process()+0x320>
   1ecd0:	e59f00d0 	ldr	r0, [pc, #208]	; 1eda8 <CTCPConnection::Process()+0x324>
   1ecd4:	eb001696 	bl	24734 <assertion_failed>
   1ecd8:	e2840030 	add	r0, r4, #48	; 0x30
   1ecdc:	eb000944 	bl	211f4 <CNetQueue::IsEmpty() const>
   1ece0:	e3500000 	cmp	r0, #0
   1ece4:	0affffbb 	beq	1ebd8 <CTCPConnection::Process()+0x154>
   1ece8:	e2840070 	add	r0, r4, #112	; 0x70
   1ecec:	eb00160d 	bl	24528 <CSynchronizationEvent::Set()>
   1ecf0:	eaffffb8 	b	1ebd8 <CTCPConnection::Process()+0x154>
   1ecf4:	e3a03000 	mov	r3, #0
   1ecf8:	e1a00006 	mov	r0, r6
   1ecfc:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
   1ed00:	eb0005f3 	bl	204d4 <CRetransmissionQueue::Reset()>
   1ed04:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
   1ed08:	e5843090 	str	r3, [r4, #144]	; 0x90
   1ed0c:	eaffffb4 	b	1ebe4 <CTCPConnection::Process()+0x160>
   1ed10:	e2840030 	add	r0, r4, #48	; 0x30
   1ed14:	eb000936 	bl	211f4 <CNetQueue::IsEmpty() const>
   1ed18:	e3500000 	cmp	r0, #0
   1ed1c:	0affff98 	beq	1eb84 <CTCPConnection::Process()+0x100>
   1ed20:	e5d4305e 	ldrb	r3, [r4, #94]	; 0x5e
   1ed24:	e3530000 	cmp	r3, #0
   1ed28:	0affff95 	beq	1eb84 <CTCPConnection::Process()+0x100>
   1ed2c:	e3a07000 	mov	r7, #0
   1ed30:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   1ed34:	e58d7004 	str	r7, [sp, #4]
   1ed38:	e58d7000 	str	r7, [sp]
   1ed3c:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   1ed40:	e28450b8 	add	r5, r4, #184	; 0xb8
   1ed44:	e3a01c11 	mov	r1, #4352	; 0x1100
   1ed48:	e1a00004 	mov	r0, r4
   1ed4c:	ebfffd6d 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ed50:	e5941090 	ldr	r1, [r4, #144]	; 0x90
   1ed54:	e1a00005 	mov	r0, r5
   1ed58:	e3a02001 	mov	r2, #1
   1ed5c:	e58d500c 	str	r5, [sp, #12]
   1ed60:	eb000619 	bl	205cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1ed64:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   1ed68:	e5d4205f 	ldrb	r2, [r4, #95]	; 0x5f
   1ed6c:	e2833001 	add	r3, r3, #1
   1ed70:	e5c4202a 	strb	r2, [r4, #42]	; 0x2a
   1ed74:	e59d000c 	ldr	r0, [sp, #12]
   1ed78:	e5843090 	str	r3, [r4, #144]	; 0x90
   1ed7c:	e5c4705e 	strb	r7, [r4, #94]	; 0x5e
   1ed80:	eb0005f3 	bl	20554 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1ed84:	e3a01001 	mov	r1, #1
   1ed88:	e1a02000 	mov	r2, r0
   1ed8c:	e1a00004 	mov	r0, r4
   1ed90:	ebfffeb0 	bl	1e858 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ed94:	eaffff7a 	b	1eb84 <CTCPConnection::Process()+0x100>
   1ed98:	e2806048 	add	r6, r0, #72	; 0x48
   1ed9c:	eaffff78 	b	1eb84 <CTCPConnection::Process()+0x100>
   1eda0:	0000025b 	.word	0x0000025b
   1eda4:	000424d0 	.word	0x000424d0
   1eda8:	0003fb64 	.word	0x0003fb64

0001edac <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1edac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1edb0:	e59d1020 	ldr	r1, [sp, #32]
   1edb4:	e1dd61b8 	ldrh	r6, [sp, #24]
   1edb8:	e3510006 	cmp	r1, #6
   1edbc:	e1dd71bc 	ldrh	r7, [sp, #28]
   1edc0:	1a000018 	bne	1ee28 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   1edc4:	e1a05003 	mov	r5, r3
   1edc8:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1edcc:	e1a04000 	mov	r4, r0
   1edd0:	e3530001 	cmp	r3, #1
   1edd4:	9a000013 	bls	1ee28 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   1edd8:	e1a01002 	mov	r1, r2
   1eddc:	e280000c 	add	r0, r0, #12
   1ede0:	eb0007e0 	bl	20d68 <CIPAddress::operator!=(CIPAddress const&) const>
   1ede4:	e3500000 	cmp	r0, #0
   1ede8:	1a00000e 	bne	1ee28 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   1edec:	e1d431b4 	ldrh	r3, [r4, #20]
   1edf0:	e1530006 	cmp	r3, r6
   1edf4:	1a00000b 	bne	1ee28 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   1edf8:	e5940004 	ldr	r0, [r4, #4]
   1edfc:	e3500000 	cmp	r0, #0
   1ee00:	0a000019 	beq	1ee6c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xc0>
   1ee04:	eb00074d 	bl	20b40 <CNetConfig::GetIPAddress() const>
   1ee08:	e1a01000 	mov	r1, r0
   1ee0c:	e1a00005 	mov	r0, r5
   1ee10:	eb0007d4 	bl	20d68 <CIPAddress::operator!=(CIPAddress const&) const>
   1ee14:	e3500000 	cmp	r0, #0
   1ee18:	1a000002 	bne	1ee28 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   1ee1c:	e1d431b6 	ldrh	r3, [r4, #22]
   1ee20:	e1530007 	cmp	r3, r7
   1ee24:	0a000001 	beq	1ee30 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x84>
   1ee28:	e3a00000 	mov	r0, #0
   1ee2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ee30:	e3e03000 	mvn	r3, #0
   1ee34:	e1a00004 	mov	r0, r4
   1ee38:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1ee3c:	e3a01001 	mov	r1, #1
   1ee40:	ebfffdd9 	bl	1e5ac <CTCPConnection::StopTimer(unsigned int)>
   1ee44:	e3a0300a 	mov	r3, #10
   1ee48:	e3a01002 	mov	r1, #2
   1ee4c:	e1a00004 	mov	r0, r4
   1ee50:	e59f2024 	ldr	r2, [pc, #36]	; 1ee7c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd0>
   1ee54:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1ee58:	ebfffe7e 	bl	1e858 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ee5c:	e2840068 	add	r0, r4, #104	; 0x68
   1ee60:	eb0015b0 	bl	24528 <CSynchronizationEvent::Set()>
   1ee64:	e3a00001 	mov	r0, #1
   1ee68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ee6c:	e59f200c 	ldr	r2, [pc, #12]	; 1ee80 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd4>
   1ee70:	e59f100c 	ldr	r1, [pc, #12]	; 1ee84 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd8>
   1ee74:	e59f000c 	ldr	r0, [pc, #12]	; 1ee88 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xdc>
   1ee78:	eb00162d 	bl	24734 <assertion_failed>
   1ee7c:	00001770 	.word	0x00001770
   1ee80:	00000539 	.word	0x00000539
   1ee84:	000424d0 	.word	0x000424d0
   1ee88:	00041db0 	.word	0x00041db0

0001ee8c <CTCPConnection::DumpStatus()>:
   1ee8c:	e92d4010 	push	{r4, lr}
   1ee90:	e1a04000 	mov	r4, r0
   1ee94:	e24dd020 	sub	sp, sp, #32
   1ee98:	eb001f0d 	bl	26ad4 <CLogger::Get()>
   1ee9c:	e594c0a4 	ldr	ip, [r4, #164]	; 0xa4
   1eea0:	e5941090 	ldr	r1, [r4, #144]	; 0x90
   1eea4:	e594e0b0 	ldr	lr, [r4, #176]	; 0xb0
   1eea8:	e594208c 	ldr	r2, [r4, #140]	; 0x8c
   1eeac:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   1eeb0:	e041100c 	sub	r1, r1, ip
   1eeb4:	e042200c 	sub	r2, r2, ip
   1eeb8:	e043300e 	sub	r3, r3, lr
   1eebc:	e5d4e02a 	ldrb	lr, [r4, #42]	; 0x2a
   1eec0:	e58d1008 	str	r1, [sp, #8]
   1eec4:	e1d4c1b4 	ldrh	ip, [r4, #20]
   1eec8:	e58d2004 	str	r2, [sp, #4]
   1eecc:	e59410ac 	ldr	r1, [r4, #172]	; 0xac
   1eed0:	e5942094 	ldr	r2, [r4, #148]	; 0x94
   1eed4:	e58d3010 	str	r3, [sp, #16]
   1eed8:	e58d1014 	str	r1, [sp, #20]
   1eedc:	e58d200c 	str	r2, [sp, #12]
   1eee0:	e59f3018 	ldr	r3, [pc, #24]	; 1ef00 <CTCPConnection::DumpStatus()+0x74>
   1eee4:	e3a02004 	mov	r2, #4
   1eee8:	e59f1014 	ldr	r1, [pc, #20]	; 1ef04 <CTCPConnection::DumpStatus()+0x78>
   1eeec:	e58de000 	str	lr, [sp]
   1eef0:	e58dc018 	str	ip, [sp, #24]
   1eef4:	eb001e38 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1eef8:	e28dd020 	add	sp, sp, #32
   1eefc:	e8bd8010 	pop	{r4, pc}
   1ef00:	00042578 	.word	0x00042578
   1ef04:	0004273c 	.word	0x0004273c

0001ef08 <CTCPConnection::NewState(TTCPState, unsigned int)>:
   1ef08:	e92d4070 	push	{r4, r5, r6, lr}
   1ef0c:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1ef10:	e24dd010 	sub	sp, sp, #16
   1ef14:	e353000a 	cmp	r3, #10
   1ef18:	8a000015 	bhi	1ef74 <CTCPConnection::NewState(TTCPState, unsigned int)+0x6c>
   1ef1c:	e351000a 	cmp	r1, #10
   1ef20:	e1a04001 	mov	r4, r1
   1ef24:	8a000016 	bhi	1ef84 <CTCPConnection::NewState(TTCPState, unsigned int)+0x7c>
   1ef28:	e1a05000 	mov	r5, r0
   1ef2c:	e1a06002 	mov	r6, r2
   1ef30:	eb001ee7 	bl	26ad4 <CLogger::Get()>
   1ef34:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1ef38:	e59f1054 	ldr	r1, [pc, #84]	; 1ef94 <CTCPConnection::NewState(TTCPState, unsigned int)+0x8c>
   1ef3c:	e58d6008 	str	r6, [sp, #8]
   1ef40:	e081c104 	add	ip, r1, r4, lsl #2
   1ef44:	e0813103 	add	r3, r1, r3, lsl #2
   1ef48:	e5932048 	ldr	r2, [r3, #72]	; 0x48
   1ef4c:	e59c3048 	ldr	r3, [ip, #72]	; 0x48
   1ef50:	e2811044 	add	r1, r1, #68	; 0x44
   1ef54:	e1cd20f0 	strd	r2, [sp]
   1ef58:	e3a02004 	mov	r2, #4
   1ef5c:	e59f3034 	ldr	r3, [pc, #52]	; 1ef98 <CTCPConnection::NewState(TTCPState, unsigned int)+0x90>
   1ef60:	eb001e1d 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ef64:	e1a00004 	mov	r0, r4
   1ef68:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   1ef6c:	e28dd010 	add	sp, sp, #16
   1ef70:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ef74:	e59f2020 	ldr	r2, [pc, #32]	; 1ef9c <CTCPConnection::NewState(TTCPState, unsigned int)+0x94>
   1ef78:	e59f1020 	ldr	r1, [pc, #32]	; 1efa0 <CTCPConnection::NewState(TTCPState, unsigned int)+0x98>
   1ef7c:	e59f0020 	ldr	r0, [pc, #32]	; 1efa4 <CTCPConnection::NewState(TTCPState, unsigned int)+0x9c>
   1ef80:	eb0015eb 	bl	24734 <assertion_failed>
   1ef84:	e59f201c 	ldr	r2, [pc, #28]	; 1efa8 <CTCPConnection::NewState(TTCPState, unsigned int)+0xa0>
   1ef88:	e59f1010 	ldr	r1, [pc, #16]	; 1efa0 <CTCPConnection::NewState(TTCPState, unsigned int)+0x98>
   1ef8c:	e59f0018 	ldr	r0, [pc, #24]	; 1efac <CTCPConnection::NewState(TTCPState, unsigned int)+0xa4>
   1ef90:	eb0015e7 	bl	24734 <assertion_failed>
   1ef94:	000426f8 	.word	0x000426f8
   1ef98:	00042614 	.word	0x00042614
   1ef9c:	00000647 	.word	0x00000647
   1efa0:	000424d0 	.word	0x000424d0
   1efa4:	000425b0 	.word	0x000425b0
   1efa8:	00000648 	.word	0x00000648
   1efac:	000425e4 	.word	0x000425e4

0001efb0 <CTCPConnection::UnexpectedState(unsigned int)>:
   1efb0:	e92d4030 	push	{r4, r5, lr}
   1efb4:	e1a05000 	mov	r5, r0
   1efb8:	e1a04001 	mov	r4, r1
   1efbc:	e24dd00c 	sub	sp, sp, #12
   1efc0:	ebffffb1 	bl	1ee8c <CTCPConnection::DumpStatus()>
   1efc4:	eb001ec2 	bl	26ad4 <CLogger::Get()>
   1efc8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1efcc:	e3a02000 	mov	r2, #0
   1efd0:	e88d0018 	stm	sp, {r3, r4}
   1efd4:	e59f100c 	ldr	r1, [pc, #12]	; 1efe8 <CTCPConnection::UnexpectedState(unsigned int)+0x38>
   1efd8:	e59f300c 	ldr	r3, [pc, #12]	; 1efec <CTCPConnection::UnexpectedState(unsigned int)+0x3c>
   1efdc:	eb001dfe 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1efe0:	e28dd00c 	add	sp, sp, #12
   1efe4:	e8bd8030 	pop	{r4, r5, pc}
   1efe8:	0004273c 	.word	0x0004273c
   1efec:	00042630 	.word	0x00042630

0001eff0 <CTCPConnection::Connect()>:
   1eff0:	e92d4010 	push	{r4, lr}
   1eff4:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1eff8:	e1a04000 	mov	r4, r0
   1effc:	e3530000 	cmp	r3, #0
   1f000:	e24dd008 	sub	sp, sp, #8
   1f004:	ba000013 	blt	1f058 <CTCPConnection::Connect()+0x68>
   1f008:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1f00c:	e353000a 	cmp	r3, #10
   1f010:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f014:	ea00000f 	b	1f058 <CTCPConnection::Connect()+0x68>
   1f018:	0001f078 	.word	0x0001f078
   1f01c:	0001f064 	.word	0x0001f064
   1f020:	0001f044 	.word	0x0001f044
   1f024:	0001f044 	.word	0x0001f044
   1f028:	0001f058 	.word	0x0001f058
   1f02c:	0001f064 	.word	0x0001f064
   1f030:	0001f064 	.word	0x0001f064
   1f034:	0001f064 	.word	0x0001f064
   1f038:	0001f064 	.word	0x0001f064
   1f03c:	0001f064 	.word	0x0001f064
   1f040:	0001f064 	.word	0x0001f064
   1f044:	e2800068 	add	r0, r0, #104	; 0x68
   1f048:	e58d0004 	str	r0, [sp, #4]
   1f04c:	eb001532 	bl	2451c <CSynchronizationEvent::Clear()>
   1f050:	e59d0004 	ldr	r0, [sp, #4]
   1f054:	eb001541 	bl	24560 <CSynchronizationEvent::Wait()>
   1f058:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f05c:	e28dd008 	add	sp, sp, #8
   1f060:	e8bd8010 	pop	{r4, pc}
   1f064:	e3a010f9 	mov	r1, #249	; 0xf9
   1f068:	ebffffd0 	bl	1efb0 <CTCPConnection::UnexpectedState(unsigned int)>
   1f06c:	e3e00000 	mvn	r0, #0
   1f070:	e28dd008 	add	sp, sp, #8
   1f074:	e8bd8010 	pop	{r4, pc}
   1f078:	e3e00000 	mvn	r0, #0
   1f07c:	eafffff6 	b	1f05c <CTCPConnection::Connect()+0x6c>

0001f080 <CTCPConnection::Accept(CIPAddress*, unsigned short*)>:
   1f080:	e92d4070 	push	{r4, r5, r6, lr}
   1f084:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1f088:	e1a04000 	mov	r4, r0
   1f08c:	e3530000 	cmp	r3, #0
   1f090:	e24dd008 	sub	sp, sp, #8
   1f094:	ba000024 	blt	1f12c <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xac>
   1f098:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1f09c:	e1a05001 	mov	r5, r1
   1f0a0:	e1a06002 	mov	r6, r2
   1f0a4:	e353000a 	cmp	r3, #10
   1f0a8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f0ac:	ea000012 	b	1f0fc <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x7c>
   1f0b0:	0001f0dc 	.word	0x0001f0dc
   1f0b4:	0001f0e8 	.word	0x0001f0e8
   1f0b8:	0001f138 	.word	0x0001f138
   1f0bc:	0001f0fc 	.word	0x0001f0fc
   1f0c0:	0001f0fc 	.word	0x0001f0fc
   1f0c4:	0001f0dc 	.word	0x0001f0dc
   1f0c8:	0001f0dc 	.word	0x0001f0dc
   1f0cc:	0001f0dc 	.word	0x0001f0dc
   1f0d0:	0001f0dc 	.word	0x0001f0dc
   1f0d4:	0001f0dc 	.word	0x0001f0dc
   1f0d8:	0001f0dc 	.word	0x0001f0dc
   1f0dc:	e3e00000 	mvn	r0, #0
   1f0e0:	e28dd008 	add	sp, sp, #8
   1f0e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f0e8:	e2800068 	add	r0, r0, #104	; 0x68
   1f0ec:	e58d0004 	str	r0, [sp, #4]
   1f0f0:	eb001509 	bl	2451c <CSynchronizationEvent::Clear()>
   1f0f4:	e59d0004 	ldr	r0, [sp, #4]
   1f0f8:	eb001518 	bl	24560 <CSynchronizationEvent::Wait()>
   1f0fc:	e3550000 	cmp	r5, #0
   1f100:	0a000011 	beq	1f14c <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xcc>
   1f104:	e1a00005 	mov	r0, r5
   1f108:	e284100c 	add	r1, r4, #12
   1f10c:	eb000782 	bl	20f1c <CIPAddress::Set(CIPAddress const&)>
   1f110:	e3560000 	cmp	r6, #0
   1f114:	0a000010 	beq	1f15c <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xdc>
   1f118:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f11c:	e1d431b4 	ldrh	r3, [r4, #20]
   1f120:	e1c630b0 	strh	r3, [r6]
   1f124:	e28dd008 	add	sp, sp, #8
   1f128:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f12c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f130:	e28dd008 	add	sp, sp, #8
   1f134:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f138:	e59f102c 	ldr	r1, [pc, #44]	; 1f16c <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xec>
   1f13c:	ebffff9b 	bl	1efb0 <CTCPConnection::UnexpectedState(unsigned int)>
   1f140:	e3e00000 	mvn	r0, #0
   1f144:	e28dd008 	add	sp, sp, #8
   1f148:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f14c:	e59f201c 	ldr	r2, [pc, #28]	; 1f170 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xf0>
   1f150:	e59f101c 	ldr	r1, [pc, #28]	; 1f174 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xf4>
   1f154:	e59f001c 	ldr	r0, [pc, #28]	; 1f178 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xf8>
   1f158:	eb001575 	bl	24734 <assertion_failed>
   1f15c:	e59f2018 	ldr	r2, [pc, #24]	; 1f17c <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xfc>
   1f160:	e59f100c 	ldr	r1, [pc, #12]	; 1f174 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xf4>
   1f164:	e59f0014 	ldr	r0, [pc, #20]	; 1f180 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x100>
   1f168:	eb001571 	bl	24734 <assertion_failed>
   1f16c:	0000010d 	.word	0x0000010d
   1f170:	00000123 	.word	0x00000123
   1f174:	000424d0 	.word	0x000424d0
   1f178:	00041e08 	.word	0x00041e08
   1f17c:	00000126 	.word	0x00000126
   1f180:	00041e18 	.word	0x00041e18

0001f184 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1f184:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f188:	e24dd024 	sub	sp, sp, #36	; 0x24
   1f18c:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   1f190:	e35c0006 	cmp	ip, #6
   1f194:	1a00000f 	bne	1f1d8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   1f198:	e3520013 	cmp	r2, #19
   1f19c:	e1a06002 	mov	r6, r2
   1f1a0:	9a00000f 	bls	1f1e4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x60>
   1f1a4:	e3510000 	cmp	r1, #0
   1f1a8:	e1a04001 	mov	r4, r1
   1f1ac:	0a00010b 	beq	1f5e0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x45c>
   1f1b0:	e1a05000 	mov	r5, r0
   1f1b4:	e1a07003 	mov	r7, r3
   1f1b8:	e5d10003 	ldrb	r0, [r1, #3]
   1f1bc:	e5d13002 	ldrb	r3, [r1, #2]
   1f1c0:	e1d511b6 	ldrh	r1, [r5, #22]
   1f1c4:	e1833400 	orr	r3, r3, r0, lsl #8
   1f1c8:	e6bf3fb3 	rev16	r3, r3
   1f1cc:	e6ff3073 	uxth	r3, r3
   1f1d0:	e1510003 	cmp	r1, r3
   1f1d4:	0a000005 	beq	1f1f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6c>
   1f1d8:	e3a00000 	mov	r0, #0
   1f1dc:	e28dd024 	add	sp, sp, #36	; 0x24
   1f1e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1e4:	e3e00000 	mvn	r0, #0
   1f1e8:	e28dd024 	add	sp, sp, #36	; 0x24
   1f1ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1f0:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f1f4:	e3530001 	cmp	r3, #1
   1f1f8:	0a00004a 	beq	1f328 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1a4>
   1f1fc:	e1a01007 	mov	r1, r7
   1f200:	e285000c 	add	r0, r5, #12
   1f204:	eb0006d7 	bl	20d68 <CIPAddress::operator!=(CIPAddress const&) const>
   1f208:	e3500000 	cmp	r0, #0
   1f20c:	1afffff1 	bne	1f1d8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   1f210:	e5d43000 	ldrb	r3, [r4]
   1f214:	e5d40001 	ldrb	r0, [r4, #1]
   1f218:	e1d511b4 	ldrh	r1, [r5, #20]
   1f21c:	e1833400 	orr	r3, r3, r0, lsl #8
   1f220:	e6bf3fb3 	rev16	r3, r3
   1f224:	e6ff3073 	uxth	r3, r3
   1f228:	e1510003 	cmp	r1, r3
   1f22c:	0285a01c 	addeq	sl, r5, #28
   1f230:	1affffe8 	bne	1f1d8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   1f234:	e1a02006 	mov	r2, r6
   1f238:	e1a01004 	mov	r1, r4
   1f23c:	e1a0000a 	mov	r0, sl
   1f240:	eb0008fc 	bl	21638 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1f244:	e3500000 	cmp	r0, #0
   1f248:	1affffe2 	bne	1f1d8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   1f24c:	e5d41005 	ldrb	r1, [r4, #5]
   1f250:	e5d43004 	ldrb	r3, [r4, #4]
   1f254:	e5d4c006 	ldrb	ip, [r4, #6]
   1f258:	e1833401 	orr	r3, r3, r1, lsl #8
   1f25c:	e183380c 	orr	r3, r3, ip, lsl #16
   1f260:	e5d4c007 	ldrb	ip, [r4, #7]
   1f264:	e5d4100c 	ldrb	r1, [r4, #12]
   1f268:	e5d48008 	ldrb	r8, [r4, #8]
   1f26c:	e5d4e009 	ldrb	lr, [r4, #9]
   1f270:	e5d4900d 	ldrb	r9, [r4, #13]
   1f274:	e5d4000a 	ldrb	r0, [r4, #10]
   1f278:	e1833c0c 	orr	r3, r3, ip, lsl #24
   1f27c:	e1819409 	orr	r9, r1, r9, lsl #8
   1f280:	e188840e 	orr	r8, r8, lr, lsl #8
   1f284:	e1a01221 	lsr	r1, r1, #4
   1f288:	e6bf3f33 	rev	r3, r3
   1f28c:	e2192c02 	ands	r2, r9, #512	; 0x200
   1f290:	e0466101 	sub	r6, r6, r1, lsl #2
   1f294:	e1888800 	orr	r8, r8, r0, lsl #16
   1f298:	e5d4000b 	ldrb	r0, [r4, #11]
   1f29c:	e58d300c 	str	r3, [sp, #12]
   1f2a0:	e1a03101 	lsl	r3, r1, #2
   1f2a4:	e58d3014 	str	r3, [sp, #20]
   1f2a8:	1286b001 	addne	fp, r6, #1
   1f2ac:	01a0b006 	moveq	fp, r6
   1f2b0:	e2193c01 	ands	r3, r9, #256	; 0x100
   1f2b4:	e58d2018 	str	r2, [sp, #24]
   1f2b8:	e58d301c 	str	r3, [sp, #28]
   1f2bc:	e5d4300e 	ldrb	r3, [r4, #14]
   1f2c0:	e5d4200f 	ldrb	r2, [r4, #15]
   1f2c4:	e1888c00 	orr	r8, r8, r0, lsl #24
   1f2c8:	e1833402 	orr	r3, r3, r2, lsl #8
   1f2cc:	e6bf3fb3 	rev16	r3, r3
   1f2d0:	e6ff3073 	uxth	r3, r3
   1f2d4:	e1a01004 	mov	r1, r4
   1f2d8:	e1a00005 	mov	r0, r5
   1f2dc:	e58d3010 	str	r3, [sp, #16]
   1f2e0:	128bb001 	addne	fp, fp, #1
   1f2e4:	ebfffc5e 	bl	1e464 <CTCPConnection::ScanOptions(TTCPHeader*)>
   1f2e8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f2ec:	e6bf8f38 	rev	r8, r8
   1f2f0:	e353000a 	cmp	r3, #10
   1f2f4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f2f8:	ea000027 	b	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f2fc:	0001f484 	.word	0x0001f484
   1f300:	0001f4e4 	.word	0x0001f4e4
   1f304:	0001f3a4 	.word	0x0001f3a4
   1f308:	0001f348 	.word	0x0001f348
   1f30c:	0001f348 	.word	0x0001f348
   1f310:	0001f348 	.word	0x0001f348
   1f314:	0001f348 	.word	0x0001f348
   1f318:	0001f348 	.word	0x0001f348
   1f31c:	0001f348 	.word	0x0001f348
   1f320:	0001f348 	.word	0x0001f348
   1f324:	0001f348 	.word	0x0001f348
   1f328:	e5d4300d 	ldrb	r3, [r4, #13]
   1f32c:	e3130002 	tst	r3, #2
   1f330:	0affffa8 	beq	1f1d8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   1f334:	e285a01c 	add	sl, r5, #28
   1f338:	e1a0000a 	mov	r0, sl
   1f33c:	e1a01007 	mov	r1, r7
   1f340:	eb000891 	bl	2158c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f344:	eaffffba 	b	1f234 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb0>
   1f348:	e59530ac 	ldr	r3, [r5, #172]	; 0xac
   1f34c:	e3530000 	cmp	r3, #0
   1f350:	0a0000c3 	beq	1f664 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4e0>
   1f354:	e59520a8 	ldr	r2, [r5, #168]	; 0xa8
   1f358:	e59d000c 	ldr	r0, [sp, #12]
   1f35c:	e35b0000 	cmp	fp, #0
   1f360:	e0421000 	sub	r1, r2, r0
   1f364:	1a0000a1 	bne	1f5f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x46c>
   1f368:	e3510000 	cmp	r1, #0
   1f36c:	da0001b6 	ble	1fa4c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8c8>
   1f370:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f374:	e3530003 	cmp	r3, #3
   1f378:	0a0000a8 	beq	1f620 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x49c>
   1f37c:	e3a02000 	mov	r2, #0
   1f380:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f384:	e58d2004 	str	r2, [sp, #4]
   1f388:	e58d2000 	str	r2, [sp]
   1f38c:	e1a00005 	mov	r0, r5
   1f390:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f394:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f398:	ebfffbda 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f39c:	e3a00001 	mov	r0, #1
   1f3a0:	eaffff8d 	b	1f1dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f3a4:	e3190a01 	tst	r9, #4096	; 0x1000
   1f3a8:	1a0000b4 	bne	1f680 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4fc>
   1f3ac:	e1a03529 	lsr	r3, r9, #10
   1f3b0:	e2192c02 	ands	r2, r9, #512	; 0x200
   1f3b4:	e2233001 	eor	r3, r3, #1
   1f3b8:	e3520000 	cmp	r2, #0
   1f3bc:	03a03000 	moveq	r3, #0
   1f3c0:	12033001 	andne	r3, r3, #1
   1f3c4:	e3530000 	cmp	r3, #0
   1f3c8:	0afffff3 	beq	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f3cc:	e59d200c 	ldr	r2, [sp, #12]
   1f3d0:	e2823001 	add	r3, r2, #1
   1f3d4:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1f3d8:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f3dc:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1f3e0:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f3e4:	e0423003 	sub	r3, r2, r3
   1f3e8:	e3530000 	cmp	r3, #0
   1f3ec:	ba0001b2 	blt	1fabc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x938>
   1f3f0:	e3a07000 	mov	r7, #0
   1f3f4:	e3a03003 	mov	r3, #3
   1f3f8:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f3fc:	e58d7004 	str	r7, [sp, #4]
   1f400:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   1f404:	e58d7000 	str	r7, [sp]
   1f408:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f40c:	e3a01c12 	mov	r1, #4608	; 0x1200
   1f410:	e28580b8 	add	r8, r5, #184	; 0xb8
   1f414:	e1a00005 	mov	r0, r5
   1f418:	ebfffbba 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f41c:	e3a02001 	mov	r2, #1
   1f420:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1f424:	e1a00008 	mov	r0, r8
   1f428:	e58d800c 	str	r8, [sp, #12]
   1f42c:	eb000466 	bl	205cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1f430:	e3a03005 	mov	r3, #5
   1f434:	e59d000c 	ldr	r0, [sp, #12]
   1f438:	e5853060 	str	r3, [r5, #96]	; 0x60
   1f43c:	eb000444 	bl	20554 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1f440:	e3a01001 	mov	r1, #1
   1f444:	e1a02000 	mov	r2, r0
   1f448:	e1a00005 	mov	r0, r5
   1f44c:	ebfffd01 	bl	1e858 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1f450:	e59d301c 	ldr	r3, [sp, #28]
   1f454:	e1530007 	cmp	r3, r7
   1f458:	1a0001b3 	bne	1fb2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9a8>
   1f45c:	e1560007 	cmp	r6, r7
   1f460:	0affffcd 	beq	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f464:	e59d3014 	ldr	r3, [sp, #20]
   1f468:	e285003c 	add	r0, r5, #60	; 0x3c
   1f46c:	e0841003 	add	r1, r4, r3
   1f470:	e1a02006 	mov	r2, r6
   1f474:	e3a03000 	mov	r3, #0
   1f478:	eb000795 	bl	212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1f47c:	e3a00001 	mov	r0, #1
   1f480:	eaffff55 	b	1f1dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f484:	e2196b01 	ands	r6, r9, #1024	; 0x400
   1f488:	1affffc3 	bne	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f48c:	e2199a01 	ands	r9, r9, #4096	; 0x1000
   1f490:	e1a01007 	mov	r1, r7
   1f494:	e285000c 	add	r0, r5, #12
   1f498:	0a0000c7 	beq	1f7bc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x638>
   1f49c:	eb00069e 	bl	20f1c <CIPAddress::Set(CIPAddress const&)>
   1f4a0:	e5d43000 	ldrb	r3, [r4]
   1f4a4:	e5d42001 	ldrb	r2, [r4, #1]
   1f4a8:	e1a01007 	mov	r1, r7
   1f4ac:	e1833402 	orr	r3, r3, r2, lsl #8
   1f4b0:	e6bf3fb3 	rev16	r3, r3
   1f4b4:	e1c531b4 	strh	r3, [r5, #20]
   1f4b8:	e1a0000a 	mov	r0, sl
   1f4bc:	eb000832 	bl	2158c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f4c0:	e1a03006 	mov	r3, r6
   1f4c4:	e58d6004 	str	r6, [sp, #4]
   1f4c8:	e58d6000 	str	r6, [sp]
   1f4cc:	e1a02008 	mov	r2, r8
   1f4d0:	e1a00005 	mov	r0, r5
   1f4d4:	e3a01b01 	mov	r1, #1024	; 0x400
   1f4d8:	ebfffb8a 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f4dc:	e3a00001 	mov	r0, #1
   1f4e0:	eaffff3d 	b	1f1dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f4e4:	e2193b01 	ands	r3, r9, #1024	; 0x400
   1f4e8:	1affffab 	bne	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f4ec:	e2199a01 	ands	r9, r9, #4096	; 0x1000
   1f4f0:	1a0000c3 	bne	1f804 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x680>
   1f4f4:	e59d3018 	ldr	r3, [sp, #24]
   1f4f8:	e3530000 	cmp	r3, #0
   1f4fc:	0affffa6 	beq	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f500:	e59f39e8 	ldr	r3, [pc, #2536]	; 1fef0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd6c>
   1f504:	e5933000 	ldr	r3, [r3]
   1f508:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   1f50c:	2a0000a8 	bcs	1f7b4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x630>
   1f510:	e59d200c 	ldr	r2, [sp, #12]
   1f514:	e59d1010 	ldr	r1, [sp, #16]
   1f518:	e2823001 	add	r3, r2, #1
   1f51c:	e35b0000 	cmp	fp, #0
   1f520:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1f524:	e5851094 	str	r1, [r5, #148]	; 0x94
   1f528:	e585209c 	str	r2, [r5, #156]	; 0x9c
   1f52c:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f530:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1f534:	0a0001b5 	beq	1fc10 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa8c>
   1f538:	e3560000 	cmp	r6, #0
   1f53c:	1a000189 	bne	1fb68 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9e4>
   1f540:	e1a00005 	mov	r0, r5
   1f544:	ebfffbfb 	bl	1e538 <CTCPConnection::CalculateISN()>
   1f548:	e28560b8 	add	r6, r5, #184	; 0xb8
   1f54c:	e1a01000 	mov	r1, r0
   1f550:	e58500a4 	str	r0, [r5, #164]	; 0xa4
   1f554:	e1a00006 	mov	r0, r6
   1f558:	eb0003ff 	bl	2055c <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1f55c:	e1a01007 	mov	r1, r7
   1f560:	e285000c 	add	r0, r5, #12
   1f564:	eb00066c 	bl	20f1c <CIPAddress::Set(CIPAddress const&)>
   1f568:	e5d42001 	ldrb	r2, [r4, #1]
   1f56c:	e5d43000 	ldrb	r3, [r4]
   1f570:	e1a01007 	mov	r1, r7
   1f574:	e1833402 	orr	r3, r3, r2, lsl #8
   1f578:	e6bf3fb3 	rev16	r3, r3
   1f57c:	e1a0000a 	mov	r0, sl
   1f580:	e1c531b4 	strh	r3, [r5, #20]
   1f584:	eb000800 	bl	2158c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f588:	e3a02000 	mov	r2, #0
   1f58c:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f590:	e58d2004 	str	r2, [sp, #4]
   1f594:	e58d2000 	str	r2, [sp]
   1f598:	e3a01c12 	mov	r1, #4608	; 0x1200
   1f59c:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1f5a0:	e1a00005 	mov	r0, r5
   1f5a4:	ebfffb57 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f5a8:	e1a00006 	mov	r0, r6
   1f5ac:	e3a02001 	mov	r2, #1
   1f5b0:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1f5b4:	eb000404 	bl	205cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1f5b8:	e3a02003 	mov	r2, #3
   1f5bc:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1f5c0:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1f5c4:	e2832001 	add	r2, r3, #1
   1f5c8:	e2850068 	add	r0, r5, #104	; 0x68
   1f5cc:	e585308c 	str	r3, [r5, #140]	; 0x8c
   1f5d0:	e5852090 	str	r2, [r5, #144]	; 0x90
   1f5d4:	eb0013d3 	bl	24528 <CSynchronizationEvent::Set()>
   1f5d8:	e3a00001 	mov	r0, #1
   1f5dc:	eafffefe 	b	1f1dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f5e0:	e3a02f9f 	mov	r2, #636	; 0x27c
   1f5e4:	e59f1908 	ldr	r1, [pc, #2312]	; 1fef4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd70>
   1f5e8:	e59f0908 	ldr	r0, [pc, #2312]	; 1fef8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd74>
   1f5ec:	eb001450 	bl	24734 <assertion_failed>
   1f5f0:	e3510000 	cmp	r1, #0
   1f5f4:	da000119 	ble	1fa60 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8dc>
   1f5f8:	e59d100c 	ldr	r1, [sp, #12]
   1f5fc:	e081000b 	add	r0, r1, fp
   1f600:	e2821001 	add	r1, r2, #1
   1f604:	e0411000 	sub	r1, r1, r0
   1f608:	e3510000 	cmp	r1, #0
   1f60c:	caffff57 	bgt	1f370 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ec>
   1f610:	e0833002 	add	r3, r3, r2
   1f614:	e1e03003 	mvn	r3, r3
   1f618:	e1730000 	cmn	r3, r0
   1f61c:	5affff53 	bpl	1f370 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ec>
   1f620:	e3190b01 	tst	r9, #1024	; 0x400
   1f624:	0a000044 	beq	1f73c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5b8>
   1f628:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f62c:	e3530007 	cmp	r3, #7
   1f630:	e6ef3073 	uxtb	r3, r3
   1f634:	8a000037 	bhi	1f718 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x594>
   1f638:	e3530003 	cmp	r3, #3
   1f63c:	8a000115 	bhi	1fa98 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x914>
   1f640:	1a00010f 	bne	1fa84 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x900>
   1f644:	e2850048 	add	r0, r5, #72	; 0x48
   1f648:	eb0003a4 	bl	204e0 <CRetransmissionQueue::Flush()>
   1f64c:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   1f650:	e3530000 	cmp	r3, #0
   1f654:	1a00014a 	bne	1fb84 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa00>
   1f658:	e3a00001 	mov	r0, #1
   1f65c:	e5c5002a 	strb	r0, [r5, #42]	; 0x2a
   1f660:	eafffedd 	b	1f1dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f664:	e35b0000 	cmp	fp, #0
   1f668:	1affff40 	bne	1f370 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ec>
   1f66c:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f670:	e59d200c 	ldr	r2, [sp, #12]
   1f674:	e1520003 	cmp	r2, r3
   1f678:	1affff3c 	bne	1f370 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ec>
   1f67c:	eaffffe7 	b	1f620 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x49c>
   1f680:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1f684:	e0433008 	sub	r3, r3, r8
   1f688:	e3530000 	cmp	r3, #0
   1f68c:	aa00001c 	bge	1f704 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x580>
   1f690:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f694:	e0483003 	sub	r3, r8, r3
   1f698:	e3530000 	cmp	r3, #0
   1f69c:	ca000018 	bgt	1f704 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x580>
   1f6a0:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f6a4:	e0433008 	sub	r3, r3, r8
   1f6a8:	e3530000 	cmp	r3, #0
   1f6ac:	caffff3a 	bgt	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f6b0:	e3190b01 	tst	r9, #1024	; 0x400
   1f6b4:	1a0000db 	bne	1fa28 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8a4>
   1f6b8:	e2193c02 	ands	r3, r9, #512	; 0x200
   1f6bc:	e3530000 	cmp	r3, #0
   1f6c0:	0affff35 	beq	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f6c4:	e59d200c 	ldr	r2, [sp, #12]
   1f6c8:	e1a01008 	mov	r1, r8
   1f6cc:	e2823001 	add	r3, r2, #1
   1f6d0:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1f6d4:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f6d8:	e28500b8 	add	r0, r5, #184	; 0xb8
   1f6dc:	eb00041e 	bl	2075c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1f6e0:	e595108c 	ldr	r1, [r5, #140]	; 0x8c
   1f6e4:	e0481001 	sub	r1, r8, r1
   1f6e8:	e3510001 	cmp	r1, #1
   1f6ec:	9a000002 	bls	1f6fc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x578>
   1f6f0:	e2411001 	sub	r1, r1, #1
   1f6f4:	e2850048 	add	r0, r5, #72	; 0x48
   1f6f8:	eb000354 	bl	20450 <CRetransmissionQueue::Advance(unsigned int)>
   1f6fc:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1f700:	eaffff35 	b	1f3dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x258>
   1f704:	e2193b01 	ands	r3, r9, #1024	; 0x400
   1f708:	1affff23 	bne	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f70c:	e58d3004 	str	r3, [sp, #4]
   1f710:	e58d3000 	str	r3, [sp]
   1f714:	eaffff6c 	b	1f4cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x348>
   1f718:	e2433008 	sub	r3, r3, #8
   1f71c:	e3530002 	cmp	r3, #2
   1f720:	8a0000d7 	bhi	1fa84 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x900>
   1f724:	e3a03000 	mov	r3, #0
   1f728:	e2850068 	add	r0, r5, #104	; 0x68
   1f72c:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f730:	eb00137c 	bl	24528 <CSynchronizationEvent::Set()>
   1f734:	e3a00001 	mov	r0, #1
   1f738:	eafffea7 	b	1f1dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f73c:	e2193c02 	ands	r3, r9, #512	; 0x200
   1f740:	e3530000 	cmp	r3, #0
   1f744:	0a00003c 	beq	1f83c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b8>
   1f748:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f74c:	e3530003 	cmp	r3, #3
   1f750:	1a000002 	bne	1f760 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5dc>
   1f754:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   1f758:	e3530000 	cmp	r3, #0
   1f75c:	0affffbd 	beq	1f658 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4d4>
   1f760:	e3a04000 	mov	r4, #0
   1f764:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f768:	e3a01b01 	mov	r1, #1024	; 0x400
   1f76c:	e1a03004 	mov	r3, r4
   1f770:	e1a00005 	mov	r0, r5
   1f774:	e58d4004 	str	r4, [sp, #4]
   1f778:	e58d4000 	str	r4, [sp]
   1f77c:	ebfffae1 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f780:	e3e03000 	mvn	r3, #0
   1f784:	e2850048 	add	r0, r5, #72	; 0x48
   1f788:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1f78c:	eb000353 	bl	204e0 <CRetransmissionQueue::Flush()>
   1f790:	e2850030 	add	r0, r5, #48	; 0x30
   1f794:	eb00069a 	bl	21204 <CNetQueue::Flush()>
   1f798:	e285003c 	add	r0, r5, #60	; 0x3c
   1f79c:	eb000698 	bl	21204 <CNetQueue::Flush()>
   1f7a0:	e2850068 	add	r0, r5, #104	; 0x68
   1f7a4:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   1f7a8:	eb00135e 	bl	24528 <CSynchronizationEvent::Set()>
   1f7ac:	e3a00001 	mov	r0, #1
   1f7b0:	eafffe89 	b	1f1dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1f7b4:	e1a01007 	mov	r1, r7
   1f7b8:	e285000c 	add	r0, r5, #12
   1f7bc:	eb0005d6 	bl	20f1c <CIPAddress::Set(CIPAddress const&)>
   1f7c0:	e5d42001 	ldrb	r2, [r4, #1]
   1f7c4:	e5d43000 	ldrb	r3, [r4]
   1f7c8:	e1a01007 	mov	r1, r7
   1f7cc:	e1833402 	orr	r3, r3, r2, lsl #8
   1f7d0:	e6bf3fb3 	rev16	r3, r3
   1f7d4:	e1a0000a 	mov	r0, sl
   1f7d8:	e1c531b4 	strh	r3, [r5, #20]
   1f7dc:	eb00076a 	bl	2158c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f7e0:	e59d300c 	ldr	r3, [sp, #12]
   1f7e4:	e1a02009 	mov	r2, r9
   1f7e8:	e1a00005 	mov	r0, r5
   1f7ec:	e3a01b05 	mov	r1, #5120	; 0x1400
   1f7f0:	e58d9004 	str	r9, [sp, #4]
   1f7f4:	e58d9000 	str	r9, [sp]
   1f7f8:	e083300b 	add	r3, r3, fp
   1f7fc:	ebfffac1 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f800:	eafffee5 	b	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f804:	e1a01007 	mov	r1, r7
   1f808:	e285000c 	add	r0, r5, #12
   1f80c:	e58d300c 	str	r3, [sp, #12]
   1f810:	eb0005c1 	bl	20f1c <CIPAddress::Set(CIPAddress const&)>
   1f814:	e5d40001 	ldrb	r0, [r4, #1]
   1f818:	e5d42000 	ldrb	r2, [r4]
   1f81c:	e1a01007 	mov	r1, r7
   1f820:	e1822400 	orr	r2, r2, r0, lsl #8
   1f824:	e6bf2fb2 	rev16	r2, r2
   1f828:	e1a0000a 	mov	r0, sl
   1f82c:	e1c521b4 	strh	r2, [r5, #20]
   1f830:	eb000755 	bl	2158c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f834:	e59d300c 	ldr	r3, [sp, #12]
   1f838:	eaffffb3 	b	1f70c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x588>
   1f83c:	e3190a01 	tst	r9, #4096	; 0x1000
   1f840:	0afffed5 	beq	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f844:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f848:	e2433003 	sub	r3, r3, #3
   1f84c:	e3530007 	cmp	r3, #7
   1f850:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f854:	ea000199 	b	1fec0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd3c>
   1f858:	0001f8c8 	.word	0x0001f8c8
   1f85c:	0001f878 	.word	0x0001f878
   1f860:	0001f878 	.word	0x0001f878
   1f864:	0001f878 	.word	0x0001f878
   1f868:	0001f878 	.word	0x0001f878
   1f86c:	0001f878 	.word	0x0001f878
   1f870:	0001fa00 	.word	0x0001fa00
   1f874:	0001f9bc 	.word	0x0001f9bc
   1f878:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f87c:	e0532008 	subs	r2, r3, r8
   1f880:	4a0000e8 	bmi	1fc28 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xaa4>
   1f884:	e0483003 	sub	r3, r8, r3
   1f888:	e3530000 	cmp	r3, #0
   1f88c:	c5952090 	ldrgt	r2, [r5, #144]	; 0x90
   1f890:	da0000ec 	ble	1fc48 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xac4>
   1f894:	e0423008 	sub	r3, r2, r8
   1f898:	e3530000 	cmp	r3, #0
   1f89c:	ba000140 	blt	1fda4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc20>
   1f8a0:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f8a4:	e2433004 	sub	r3, r3, #4
   1f8a8:	e3530004 	cmp	r3, #4
   1f8ac:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f8b0:	ea00018a 	b	1fee0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd5c>
   1f8b4:	0001f904 	.word	0x0001f904
   1f8b8:	0001fde0 	.word	0x0001fde0
   1f8bc:	0001fe24 	.word	0x0001fe24
   1f8c0:	0001f904 	.word	0x0001f904
   1f8c4:	0001fe40 	.word	0x0001fe40
   1f8c8:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f8cc:	e0433008 	sub	r3, r3, r8
   1f8d0:	e3530000 	cmp	r3, #0
   1f8d4:	ca000003 	bgt	1f8e8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x764>
   1f8d8:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f8dc:	e0483003 	sub	r3, r8, r3
   1f8e0:	e3530000 	cmp	r3, #0
   1f8e4:	da000167 	ble	1fe88 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd04>
   1f8e8:	e3a03000 	mov	r3, #0
   1f8ec:	e1a02008 	mov	r2, r8
   1f8f0:	e3a01b01 	mov	r1, #1024	; 0x400
   1f8f4:	e1a00005 	mov	r0, r5
   1f8f8:	e58d3004 	str	r3, [sp, #4]
   1f8fc:	e58d3000 	str	r3, [sp]
   1f900:	ebfffa80 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f904:	e35b0000 	cmp	fp, #0
   1f908:	0afffea3 	beq	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f90c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f910:	e3530006 	cmp	r3, #6
   1f914:	e6ef3073 	uxtb	r3, r3
   1f918:	8a000055 	bhi	1fa74 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8f0>
   1f91c:	e3530003 	cmp	r3, #3
   1f920:	8a00009f 	bhi	1fba4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa20>
   1f924:	e1a00005 	mov	r0, r5
   1f928:	e59f15cc 	ldr	r1, [pc, #1484]	; 1fefc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd78>
   1f92c:	ebfffd9f 	bl	1efb0 <CTCPConnection::UnexpectedState(unsigned int)>
   1f930:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f934:	e3530000 	cmp	r3, #0
   1f938:	0afffe97 	beq	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f93c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f940:	e3530001 	cmp	r3, #1
   1f944:	0afffe94 	beq	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f948:	e5d5202a 	ldrb	r2, [r5, #42]	; 0x2a
   1f94c:	e59d301c 	ldr	r3, [sp, #28]
   1f950:	e3530000 	cmp	r3, #0
   1f954:	13520002 	cmpne	r2, #2
   1f958:	03a02001 	moveq	r2, #1
   1f95c:	13a02000 	movne	r2, #0
   1f960:	0afffe8d 	beq	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1f964:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f968:	e58d2004 	str	r2, [sp, #4]
   1f96c:	e2833001 	add	r3, r3, #1
   1f970:	e58d2000 	str	r2, [sp]
   1f974:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f978:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f97c:	e1a00005 	mov	r0, r5
   1f980:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f984:	ebfffa5f 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f988:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f98c:	e2433003 	sub	r3, r3, #3
   1f990:	e3530007 	cmp	r3, #7
   1f994:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f998:	ea00014c 	b	1fed0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd4c>
   1f99c:	0001fd08 	.word	0x0001fd08
   1f9a0:	0001fd08 	.word	0x0001fd08
   1f9a4:	0001fd54 	.word	0x0001fd54
   1f9a8:	0001fd20 	.word	0x0001fd20
   1f9ac:	0001f39c 	.word	0x0001f39c
   1f9b0:	0001f39c 	.word	0x0001f39c
   1f9b4:	0001f39c 	.word	0x0001f39c
   1f9b8:	0001fdc8 	.word	0x0001fdc8
   1f9bc:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f9c0:	e1580003 	cmp	r8, r3
   1f9c4:	1affffce 	bne	1f904 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1f9c8:	e3a02000 	mov	r2, #0
   1f9cc:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f9d0:	e5c5205e 	strb	r2, [r5, #94]	; 0x5e
   1f9d4:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f9d8:	e58d2004 	str	r2, [sp, #4]
   1f9dc:	e58d2000 	str	r2, [sp]
   1f9e0:	e1a00005 	mov	r0, r5
   1f9e4:	e1a02008 	mov	r2, r8
   1f9e8:	ebfffa46 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f9ec:	e3a01002 	mov	r1, #2
   1f9f0:	e1a00005 	mov	r0, r5
   1f9f4:	e59f2504 	ldr	r2, [pc, #1284]	; 1ff00 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd7c>
   1f9f8:	ebfffb96 	bl	1e858 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1f9fc:	eaffffc0 	b	1f904 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fa00:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fa04:	e1580003 	cmp	r8, r3
   1fa08:	1affffbd 	bne	1f904 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fa0c:	e3a03000 	mov	r3, #0
   1fa10:	e2850068 	add	r0, r5, #104	; 0x68
   1fa14:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1fa18:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fa1c:	eb0012c1 	bl	24528 <CSynchronizationEvent::Set()>
   1fa20:	e3a00001 	mov	r0, #1
   1fa24:	eafffdec 	b	1f1dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fa28:	e3a03000 	mov	r3, #0
   1fa2c:	e3e02000 	mvn	r2, #0
   1fa30:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fa34:	e2850068 	add	r0, r5, #104	; 0x68
   1fa38:	e5c5305d 	strb	r3, [r5, #93]	; 0x5d
   1fa3c:	e585202c 	str	r2, [r5, #44]	; 0x2c
   1fa40:	eb0012b8 	bl	24528 <CSynchronizationEvent::Set()>
   1fa44:	e3a00001 	mov	r0, #1
   1fa48:	eafffde3 	b	1f1dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fa4c:	e0833002 	add	r3, r3, r2
   1fa50:	e0403003 	sub	r3, r0, r3
   1fa54:	e3530000 	cmp	r3, #0
   1fa58:	aafffe44 	bge	1f370 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ec>
   1fa5c:	eafffeef 	b	1f620 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x49c>
   1fa60:	e0831002 	add	r1, r3, r2
   1fa64:	e0401001 	sub	r1, r0, r1
   1fa68:	e3510000 	cmp	r1, #0
   1fa6c:	aafffee1 	bge	1f5f8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x474>
   1fa70:	eafffeea 	b	1f620 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x49c>
   1fa74:	e2433007 	sub	r3, r3, #7
   1fa78:	e3530003 	cmp	r3, #3
   1fa7c:	9affffab 	bls	1f930 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7ac>
   1fa80:	eaffffa7 	b	1f924 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7a0>
   1fa84:	e1a00005 	mov	r0, r5
   1fa88:	e59f1474 	ldr	r1, [pc, #1140]	; 1ff04 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd80>
   1fa8c:	ebfffd47 	bl	1efb0 <CTCPConnection::UnexpectedState(unsigned int)>
   1fa90:	e3a00001 	mov	r0, #1
   1fa94:	eafffdd0 	b	1f1dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fa98:	e3e03000 	mvn	r3, #0
   1fa9c:	e2850048 	add	r0, r5, #72	; 0x48
   1faa0:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1faa4:	eb00028d 	bl	204e0 <CRetransmissionQueue::Flush()>
   1faa8:	e2850030 	add	r0, r5, #48	; 0x30
   1faac:	eb0005d4 	bl	21204 <CNetQueue::Flush()>
   1fab0:	e285003c 	add	r0, r5, #60	; 0x3c
   1fab4:	eb0005d2 	bl	21204 <CNetQueue::Flush()>
   1fab8:	eaffff19 	b	1f724 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5a0>
   1fabc:	e3a07000 	mov	r7, #0
   1fac0:	e3a03004 	mov	r3, #4
   1fac4:	e3a01001 	mov	r1, #1
   1fac8:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1facc:	e1a00005 	mov	r0, r5
   1fad0:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   1fad4:	ebfffab4 	bl	1e5ac <CTCPConnection::StopTimer(unsigned int)>
   1fad8:	e3a03005 	mov	r3, #5
   1fadc:	e2850068 	add	r0, r5, #104	; 0x68
   1fae0:	e5853060 	str	r3, [r5, #96]	; 0x60
   1fae4:	eb00128f 	bl	24528 <CSynchronizationEvent::Set()>
   1fae8:	e59d3010 	ldr	r3, [sp, #16]
   1faec:	e58d7004 	str	r7, [sp, #4]
   1faf0:	e58d7000 	str	r7, [sp]
   1faf4:	e5853094 	str	r3, [r5, #148]	; 0x94
   1faf8:	e59d300c 	ldr	r3, [sp, #12]
   1fafc:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fb00:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1fb04:	e1a00005 	mov	r0, r5
   1fb08:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fb0c:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fb10:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1fb14:	ebfff9fb 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fb18:	e2193c01 	ands	r3, r9, #256	; 0x100
   1fb1c:	e1560007 	cmp	r6, r7
   1fb20:	01530007 	cmpeq	r3, r7
   1fb24:	1affff76 	bne	1f904 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fb28:	eafffe1b 	b	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1fb2c:	e58d7004 	str	r7, [sp, #4]
   1fb30:	e58d7000 	str	r7, [sp]
   1fb34:	e1a03007 	mov	r3, r7
   1fb38:	e3a01b01 	mov	r1, #1024	; 0x400
   1fb3c:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fb40:	e1a00005 	mov	r0, r5
   1fb44:	ebfff9ef 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fb48:	e3e03000 	mvn	r3, #0
   1fb4c:	e5c5702a 	strb	r7, [r5, #42]	; 0x2a
   1fb50:	e2850068 	add	r0, r5, #104	; 0x68
   1fb54:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1fb58:	eb001272 	bl	24528 <CSynchronizationEvent::Set()>
   1fb5c:	e3560000 	cmp	r6, #0
   1fb60:	0afffe0d 	beq	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1fb64:	eafffe3e 	b	1f464 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x2e0>
   1fb68:	e59d1014 	ldr	r1, [sp, #20]
   1fb6c:	e1a03009 	mov	r3, r9
   1fb70:	e1a02006 	mov	r2, r6
   1fb74:	e0841001 	add	r1, r4, r1
   1fb78:	e285003c 	add	r0, r5, #60	; 0x3c
   1fb7c:	eb0005d4 	bl	212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1fb80:	eafffe6e 	b	1f540 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3bc>
   1fb84:	e3e02000 	mvn	r2, #0
   1fb88:	e3a03000 	mov	r3, #0
   1fb8c:	e585202c 	str	r2, [r5, #44]	; 0x2c
   1fb90:	e2850068 	add	r0, r5, #104	; 0x68
   1fb94:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fb98:	eb001262 	bl	24528 <CSynchronizationEvent::Set()>
   1fb9c:	e3a00001 	mov	r0, #1
   1fba0:	eafffd8d 	b	1f1dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fba4:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fba8:	e59d200c 	ldr	r2, [sp, #12]
   1fbac:	e1520003 	cmp	r2, r3
   1fbb0:	1a00001a 	bne	1fc20 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa9c>
   1fbb4:	e3560000 	cmp	r6, #0
   1fbb8:	0affff5c 	beq	1f930 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7ac>
   1fbbc:	e59d3014 	ldr	r3, [sp, #20]
   1fbc0:	e1a02006 	mov	r2, r6
   1fbc4:	e0841003 	add	r1, r4, r3
   1fbc8:	e285003c 	add	r0, r5, #60	; 0x3c
   1fbcc:	e3a03000 	mov	r3, #0
   1fbd0:	eb0005bf 	bl	212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1fbd4:	e3a02000 	mov	r2, #0
   1fbd8:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fbdc:	e58d2004 	str	r2, [sp, #4]
   1fbe0:	e0863003 	add	r3, r6, r3
   1fbe4:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1fbe8:	e58d2000 	str	r2, [sp]
   1fbec:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fbf0:	e1a00005 	mov	r0, r5
   1fbf4:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fbf8:	ebfff9c2 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fbfc:	e3190b02 	tst	r9, #2048	; 0x800
   1fc00:	0affff4a 	beq	1f930 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7ac>
   1fc04:	e2850068 	add	r0, r5, #104	; 0x68
   1fc08:	eb001246 	bl	24528 <CSynchronizationEvent::Set()>
   1fc0c:	eaffff47 	b	1f930 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7ac>
   1fc10:	e59f22f0 	ldr	r2, [pc, #752]	; 1ff08 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd84>
   1fc14:	e59f12d8 	ldr	r1, [pc, #728]	; 1fef4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd70>
   1fc18:	e59f02ec 	ldr	r0, [pc, #748]	; 1ff0c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd88>
   1fc1c:	eb0012c4 	bl	24734 <assertion_failed>
   1fc20:	e3a02000 	mov	r2, #0
   1fc24:	eafffdd6 	b	1f384 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x200>
   1fc28:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fc2c:	e0481002 	sub	r1, r8, r2
   1fc30:	e3510000 	cmp	r1, #0
   1fc34:	da00001a 	ble	1fca4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb20>
   1fc38:	e0483003 	sub	r3, r8, r3
   1fc3c:	e3530000 	cmp	r3, #0
   1fc40:	caffff13 	bgt	1f894 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x710>
   1fc44:	eaffff15 	b	1f8a0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fc48:	e3520000 	cmp	r2, #0
   1fc4c:	1affff13 	bne	1f8a0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fc50:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fc54:	e0483003 	sub	r3, r8, r3
   1fc58:	e3530000 	cmp	r3, #0
   1fc5c:	caffff0f 	bgt	1f8a0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fc60:	e595309c 	ldr	r3, [r5, #156]	; 0x9c
   1fc64:	e59d100c 	ldr	r1, [sp, #12]
   1fc68:	e0432001 	sub	r2, r3, r1
   1fc6c:	e3520000 	cmp	r2, #0
   1fc70:	ba000005 	blt	1fc8c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb08>
   1fc74:	e1510003 	cmp	r1, r3
   1fc78:	1affff08 	bne	1f8a0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fc7c:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1fc80:	e0433008 	sub	r3, r3, r8
   1fc84:	e3530000 	cmp	r3, #0
   1fc88:	caffff04 	bgt	1f8a0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fc8c:	e59d3010 	ldr	r3, [sp, #16]
   1fc90:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1fc94:	e5853094 	str	r3, [r5, #148]	; 0x94
   1fc98:	e59d300c 	ldr	r3, [sp, #12]
   1fc9c:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1fca0:	eafffefe 	b	1f8a0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x71c>
   1fca4:	e1a01008 	mov	r1, r8
   1fca8:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fcac:	eb0002aa 	bl	2075c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fcb0:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fcb4:	e595708c 	ldr	r7, [r5, #140]	; 0x8c
   1fcb8:	e1580003 	cmp	r8, r3
   1fcbc:	e0487007 	sub	r7, r8, r7
   1fcc0:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1fcc4:	0a000030 	beq	1fd8c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc08>
   1fcc8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1fccc:	e3530005 	cmp	r3, #5
   1fcd0:	0a000029 	beq	1fd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbf8>
   1fcd4:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1fcd8:	e3530008 	cmp	r3, #8
   1fcdc:	0a000026 	beq	1fd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbf8>
   1fce0:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1fce4:	e3570001 	cmp	r7, #1
   1fce8:	03530004 	cmpeq	r3, #4
   1fcec:	0affffdb 	beq	1fc60 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xadc>
   1fcf0:	e3570000 	cmp	r7, #0
   1fcf4:	0affffd9 	beq	1fc60 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xadc>
   1fcf8:	e1a01007 	mov	r1, r7
   1fcfc:	e2850048 	add	r0, r5, #72	; 0x48
   1fd00:	eb0001d2 	bl	20450 <CRetransmissionQueue::Advance(unsigned int)>
   1fd04:	eaffffd5 	b	1fc60 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xadc>
   1fd08:	e3a03007 	mov	r3, #7
   1fd0c:	e2850068 	add	r0, r5, #104	; 0x68
   1fd10:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fd14:	eb001203 	bl	24528 <CSynchronizationEvent::Set()>
   1fd18:	e3a00001 	mov	r0, #1
   1fd1c:	eafffd2e 	b	1f1dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fd20:	e3a01001 	mov	r1, #1
   1fd24:	e1a00005 	mov	r0, r5
   1fd28:	ebfffa1f 	bl	1e5ac <CTCPConnection::StopTimer(unsigned int)>
   1fd2c:	e1a00005 	mov	r0, r5
   1fd30:	e3a01000 	mov	r1, #0
   1fd34:	ebfffa1c 	bl	1e5ac <CTCPConnection::StopTimer(unsigned int)>
   1fd38:	e3a0300a 	mov	r3, #10
   1fd3c:	e1a00005 	mov	r0, r5
   1fd40:	e3a01002 	mov	r1, #2
   1fd44:	e59f21b4 	ldr	r2, [pc, #436]	; 1ff00 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd7c>
   1fd48:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fd4c:	ebfffac1 	bl	1e858 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fd50:	eafffd91 	b	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1fd54:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fd58:	e1580003 	cmp	r8, r3
   1fd5c:	03a04000 	moveq	r4, #0
   1fd60:	03a01001 	moveq	r1, #1
   1fd64:	05c5405e 	strbeq	r4, [r5, #94]	; 0x5e
   1fd68:	0affffed 	beq	1fd24 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xba0>
   1fd6c:	e3a03008 	mov	r3, #8
   1fd70:	e3a00001 	mov	r0, #1
   1fd74:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fd78:	eafffd17 	b	1f1dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fd7c:	e3a03000 	mov	r3, #0
   1fd80:	e2477001 	sub	r7, r7, #1
   1fd84:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1fd88:	eaffffd4 	b	1fce0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb5c>
   1fd8c:	e3a01001 	mov	r1, #1
   1fd90:	e1a00005 	mov	r0, r5
   1fd94:	ebfffa04 	bl	1e5ac <CTCPConnection::StopTimer(unsigned int)>
   1fd98:	e3a03005 	mov	r3, #5
   1fd9c:	e5853060 	str	r3, [r5, #96]	; 0x60
   1fda0:	eaffffc8 	b	1fcc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb44>
   1fda4:	e3a03000 	mov	r3, #0
   1fda8:	e58d3004 	str	r3, [sp, #4]
   1fdac:	e58d3000 	str	r3, [sp]
   1fdb0:	e1a00005 	mov	r0, r5
   1fdb4:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fdb8:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fdbc:	ebfff951 	bl	1e308 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fdc0:	e3a00001 	mov	r0, #1
   1fdc4:	eafffd04 	b	1f1dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fdc8:	e1a00005 	mov	r0, r5
   1fdcc:	e3a01002 	mov	r1, #2
   1fdd0:	e59f2128 	ldr	r2, [pc, #296]	; 1ff00 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd7c>
   1fdd4:	ebfffa9f 	bl	1e858 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fdd8:	e3a00001 	mov	r0, #1
   1fddc:	eafffcfe 	b	1f1dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58>
   1fde0:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fde4:	e1580003 	cmp	r8, r3
   1fde8:	1afffec5 	bne	1f904 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fdec:	e1a01008 	mov	r1, r8
   1fdf0:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fdf4:	eb000258 	bl	2075c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fdf8:	e3a03000 	mov	r3, #0
   1fdfc:	e3a01001 	mov	r1, #1
   1fe00:	e1a00005 	mov	r0, r5
   1fe04:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1fe08:	ebfff9e7 	bl	1e5ac <CTCPConnection::StopTimer(unsigned int)>
   1fe0c:	e3a03006 	mov	r3, #6
   1fe10:	e3a01002 	mov	r1, #2
   1fe14:	e1a00005 	mov	r0, r5
   1fe18:	e59f20e0 	ldr	r2, [pc, #224]	; 1ff00 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd7c>
   1fe1c:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fe20:	ebfffa8c 	bl	1e858 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fe24:	e2850048 	add	r0, r5, #72	; 0x48
   1fe28:	eb0000e3 	bl	201bc <CRetransmissionQueue::IsEmpty() const>
   1fe2c:	e3500000 	cmp	r0, #0
   1fe30:	0afffeb3 	beq	1f904 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fe34:	e2850068 	add	r0, r5, #104	; 0x68
   1fe38:	eb0011ba 	bl	24528 <CSynchronizationEvent::Set()>
   1fe3c:	eafffeb0 	b	1f904 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fe40:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fe44:	e1580003 	cmp	r8, r3
   1fe48:	1afffead 	bne	1f904 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fe4c:	e1a01008 	mov	r1, r8
   1fe50:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fe54:	eb000240 	bl	2075c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fe58:	e3a03000 	mov	r3, #0
   1fe5c:	e1a00005 	mov	r0, r5
   1fe60:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1fe64:	e3a01001 	mov	r1, #1
   1fe68:	ebfff9cf 	bl	1e5ac <CTCPConnection::StopTimer(unsigned int)>
   1fe6c:	e3a0300a 	mov	r3, #10
   1fe70:	e3a01002 	mov	r1, #2
   1fe74:	e1a00005 	mov	r0, r5
   1fe78:	e59f2080 	ldr	r2, [pc, #128]	; 1ff00 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd7c>
   1fe7c:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fe80:	ebfffa74 	bl	1e858 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fe84:	eafffe9e 	b	1f904 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fe88:	e59d3010 	ldr	r3, [sp, #16]
   1fe8c:	e1a01008 	mov	r1, r8
   1fe90:	e5853094 	str	r3, [r5, #148]	; 0x94
   1fe94:	e59d300c 	ldr	r3, [sp, #12]
   1fe98:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1fe9c:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1fea0:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1fea4:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fea8:	eb00022b 	bl	2075c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1feac:	e3a02004 	mov	r2, #4
   1feb0:	e3a03005 	mov	r3, #5
   1feb4:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1feb8:	e5853060 	str	r3, [r5, #96]	; 0x60
   1febc:	eafffe90 	b	1f904 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fec0:	e1a00005 	mov	r0, r5
   1fec4:	e59f1044 	ldr	r1, [pc, #68]	; 1ff10 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd8c>
   1fec8:	ebfffc38 	bl	1efb0 <CTCPConnection::UnexpectedState(unsigned int)>
   1fecc:	eafffe8c 	b	1f904 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fed0:	e1a00005 	mov	r0, r5
   1fed4:	e59f1038 	ldr	r1, [pc, #56]	; 1ff14 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd90>
   1fed8:	ebfffc34 	bl	1efb0 <CTCPConnection::UnexpectedState(unsigned int)>
   1fedc:	eafffd2e 	b	1f39c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x218>
   1fee0:	e3a01e49 	mov	r1, #1168	; 0x490
   1fee4:	e1a00005 	mov	r0, r5
   1fee8:	ebfffc30 	bl	1efb0 <CTCPConnection::UnexpectedState(unsigned int)>
   1feec:	eafffe84 	b	1f904 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x780>
   1fef0:	0004c52c 	.word	0x0004c52c
   1fef4:	000424d0 	.word	0x000424d0
   1fef8:	00041ea8 	.word	0x00041ea8
   1fefc:	000004dc 	.word	0x000004dc
   1ff00:	00001770 	.word	0x00001770
   1ff04:	000003e3 	.word	0x000003e3
   1ff08:	00000301 	.word	0x00000301
   1ff0c:	00042650 	.word	0x00042650
   1ff10:	000004a9 	.word	0x000004a9
   1ff14:	00000519 	.word	0x00000519

0001ff18 <CTCPConnection::TimerHandler(unsigned int)>:
   1ff18:	e3510002 	cmp	r1, #2
   1ff1c:	e92d4070 	push	{r4, r5, r6, lr}
   1ff20:	8a00002d 	bhi	1ffdc <CTCPConnection::TimerHandler(unsigned int)+0xc4>
   1ff24:	e1a04000 	mov	r4, r0
   1ff28:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   1ff2c:	e1a05001 	mov	r5, r1
   1ff30:	e3500000 	cmp	r0, #0
   1ff34:	1a00000c 	bne	1ff6c <CTCPConnection::TimerHandler(unsigned int)+0x54>
   1ff38:	e281301e 	add	r3, r1, #30
   1ff3c:	e0843103 	add	r3, r4, r3, lsl #2
   1ff40:	e5932004 	ldr	r2, [r3, #4]
   1ff44:	e3520000 	cmp	r2, #0
   1ff48:	15830004 	strne	r0, [r3, #4]
   1ff4c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ff50:	e3550001 	cmp	r5, #1
   1ff54:	0a000012 	beq	1ffa4 <CTCPConnection::TimerHandler(unsigned int)+0x8c>
   1ff58:	e3550002 	cmp	r5, #2
   1ff5c:	1a000054 	bne	200b4 <CTCPConnection::TimerHandler(unsigned int)+0x19c>
   1ff60:	e3a03000 	mov	r3, #0
   1ff64:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1ff68:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ff6c:	eb002f24 	bl	2bc04 <EnterCritical>
   1ff70:	e285301e 	add	r3, r5, #30
   1ff74:	e0843103 	add	r3, r4, r3, lsl #2
   1ff78:	e5932004 	ldr	r2, [r3, #4]
   1ff7c:	e3520000 	cmp	r2, #0
   1ff80:	0a000010 	beq	1ffc8 <CTCPConnection::TimerHandler(unsigned int)+0xb0>
   1ff84:	e3a01000 	mov	r1, #0
   1ff88:	e5942088 	ldr	r2, [r4, #136]	; 0x88
   1ff8c:	e5831004 	str	r1, [r3, #4]
   1ff90:	e1520001 	cmp	r2, r1
   1ff94:	0affffed 	beq	1ff50 <CTCPConnection::TimerHandler(unsigned int)+0x38>
   1ff98:	eb002f43 	bl	2bcac <LeaveCritical>
   1ff9c:	e3550001 	cmp	r5, #1
   1ffa0:	1affffec 	bne	1ff58 <CTCPConnection::TimerHandler(unsigned int)+0x40>
   1ffa4:	e28400b8 	add	r0, r4, #184	; 0xb8
   1ffa8:	eb0001ac 	bl	20660 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>
   1ffac:	e5943060 	ldr	r3, [r4, #96]	; 0x60
   1ffb0:	e3530000 	cmp	r3, #0
   1ffb4:	e2433001 	sub	r3, r3, #1
   1ffb8:	e5843060 	str	r3, [r4, #96]	; 0x60
   1ffbc:	1a00000a 	bne	1ffec <CTCPConnection::TimerHandler(unsigned int)+0xd4>
   1ffc0:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1ffc4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ffc8:	e5943088 	ldr	r3, [r4, #136]	; 0x88
   1ffcc:	e3530000 	cmp	r3, #0
   1ffd0:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ffd4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ffd8:	ea002f33 	b	2bcac <LeaveCritical>
   1ffdc:	e59f20e0 	ldr	r2, [pc, #224]	; 200c4 <CTCPConnection::TimerHandler(unsigned int)+0x1ac>
   1ffe0:	e59f10e0 	ldr	r1, [pc, #224]	; 200c8 <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   1ffe4:	e59f00e0 	ldr	r0, [pc, #224]	; 200cc <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   1ffe8:	eb0011d1 	bl	24734 <assertion_failed>
   1ffec:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1fff0:	e353000a 	cmp	r3, #10
   1fff4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1fff8:	ea00000a 	b	20028 <CTCPConnection::TimerHandler(unsigned int)+0x110>
   1fffc:	0002002c 	.word	0x0002002c
   20000:	0002002c 	.word	0x0002002c
   20004:	0002006c 	.word	0x0002006c
   20008:	0002006c 	.word	0x0002006c
   2000c:	00020054 	.word	0x00020054
   20010:	0002003c 	.word	0x0002003c
   20014:	0002002c 	.word	0x0002002c
   20018:	00020054 	.word	0x00020054
   2001c:	0002003c 	.word	0x0002003c
   20020:	0002003c 	.word	0x0002003c
   20024:	0002002c 	.word	0x0002002c
   20028:	e8bd8070 	pop	{r4, r5, r6, pc}
   2002c:	e1a00004 	mov	r0, r4
   20030:	e8bd4070 	pop	{r4, r5, r6, lr}
   20034:	e59f1094 	ldr	r1, [pc, #148]	; 200d0 <CTCPConnection::TimerHandler(unsigned int)+0x1b8>
   20038:	eafffbdc 	b	1efb0 <CTCPConnection::UnexpectedState(unsigned int)>
   2003c:	e5d4305e 	ldrb	r3, [r4, #94]	; 0x5e
   20040:	e3530000 	cmp	r3, #0
   20044:	1a00000e 	bne	20084 <CTCPConnection::TimerHandler(unsigned int)+0x16c>
   20048:	e3a03001 	mov	r3, #1
   2004c:	e5c4305e 	strb	r3, [r4, #94]	; 0x5e
   20050:	e8bd8070 	pop	{r4, r5, r6, pc}
   20054:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
   20058:	e3530000 	cmp	r3, #0
   2005c:	1a00000c 	bne	20094 <CTCPConnection::TimerHandler(unsigned int)+0x17c>
   20060:	e3a03001 	mov	r3, #1
   20064:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
   20068:	e8bd8070 	pop	{r4, r5, r6, pc}
   2006c:	e5d4305d 	ldrb	r3, [r4, #93]	; 0x5d
   20070:	e3530000 	cmp	r3, #0
   20074:	1a00000a 	bne	200a4 <CTCPConnection::TimerHandler(unsigned int)+0x18c>
   20078:	e3a03001 	mov	r3, #1
   2007c:	e5c4305d 	strb	r3, [r4, #93]	; 0x5d
   20080:	e8bd8070 	pop	{r4, r5, r6, pc}
   20084:	e59f2048 	ldr	r2, [pc, #72]	; 200d4 <CTCPConnection::TimerHandler(unsigned int)+0x1bc>
   20088:	e59f1038 	ldr	r1, [pc, #56]	; 200c8 <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   2008c:	e59f0044 	ldr	r0, [pc, #68]	; 200d8 <CTCPConnection::TimerHandler(unsigned int)+0x1c0>
   20090:	eb0011a7 	bl	24734 <assertion_failed>
   20094:	e59f2040 	ldr	r2, [pc, #64]	; 200dc <CTCPConnection::TimerHandler(unsigned int)+0x1c4>
   20098:	e59f1028 	ldr	r1, [pc, #40]	; 200c8 <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   2009c:	e59f003c 	ldr	r0, [pc, #60]	; 200e0 <CTCPConnection::TimerHandler(unsigned int)+0x1c8>
   200a0:	eb0011a3 	bl	24734 <assertion_failed>
   200a4:	e59f2038 	ldr	r2, [pc, #56]	; 200e4 <CTCPConnection::TimerHandler(unsigned int)+0x1cc>
   200a8:	e59f1018 	ldr	r1, [pc, #24]	; 200c8 <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   200ac:	e59f0034 	ldr	r0, [pc, #52]	; 200e8 <CTCPConnection::TimerHandler(unsigned int)+0x1d0>
   200b0:	eb00119f 	bl	24734 <assertion_failed>
   200b4:	e59f2030 	ldr	r2, [pc, #48]	; 200ec <CTCPConnection::TimerHandler(unsigned int)+0x1d4>
   200b8:	e59f1008 	ldr	r1, [pc, #8]	; 200c8 <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   200bc:	e59f002c 	ldr	r0, [pc, #44]	; 200f0 <CTCPConnection::TimerHandler(unsigned int)+0x1d8>
   200c0:	eb00119b 	bl	24734 <assertion_failed>
   200c4:	000005d9 	.word	0x000005d9
   200c8:	000424d0 	.word	0x000424d0
   200cc:	00042514 	.word	0x00042514
   200d0:	000005f9 	.word	0x000005f9
   200d4:	0000060b 	.word	0x0000060b
   200d8:	00042560 	.word	0x00042560
   200dc:	00000604 	.word	0x00000604
   200e0:	0004266c 	.word	0x0004266c
   200e4:	000005fe 	.word	0x000005fe
   200e8:	00042660 	.word	0x00042660
   200ec:	00000617 	.word	0x00000617
   200f0:	0003e11c 	.word	0x0003e11c

000200f4 <CTCPConnection::TimerStub(unsigned int, void*, void*)>:
   200f4:	e2520000 	subs	r0, r2, #0
   200f8:	e92d4010 	push	{r4, lr}
   200fc:	0a000003 	beq	20110 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x1c>
   20100:	e3510002 	cmp	r1, #2
   20104:	8a000005 	bhi	20120 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x2c>
   20108:	e8bd4010 	pop	{r4, lr}
   2010c:	eaffff81 	b	1ff18 <CTCPConnection::TimerHandler(unsigned int)>
   20110:	e59f2018 	ldr	r2, [pc, #24]	; 20130 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x3c>
   20114:	e59f1018 	ldr	r1, [pc, #24]	; 20134 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x40>
   20118:	e59f0018 	ldr	r0, [pc, #24]	; 20138 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x44>
   2011c:	eb001184 	bl	24734 <assertion_failed>
   20120:	e59f2014 	ldr	r2, [pc, #20]	; 2013c <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x48>
   20124:	e59f1008 	ldr	r1, [pc, #8]	; 20134 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x40>
   20128:	e59f0010 	ldr	r0, [pc, #16]	; 20140 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x4c>
   2012c:	eb001180 	bl	24734 <assertion_failed>
   20130:	0000061f 	.word	0x0000061f
   20134:	000424d0 	.word	0x000424d0
   20138:	0003d518 	.word	0x0003d518
   2013c:	00000622 	.word	0x00000622
   20140:	00042514 	.word	0x00042514

00020144 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>:
   20144:	e3a03000 	mov	r3, #0
   20148:	e3510001 	cmp	r1, #1
   2014c:	e92d4010 	push	{r4, lr}
   20150:	e880000a 	stm	r0, {r1, r3}
   20154:	e5803008 	str	r3, [r0, #8]
   20158:	e580300c 	str	r3, [r0, #12]
   2015c:	e5803010 	str	r3, [r0, #16]
   20160:	9a000006 	bls	20180 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x3c>
   20164:	e1a04000 	mov	r4, r0
   20168:	e1a00001 	mov	r0, r1
   2016c:	eb002b7d 	bl	2af68 <operator new[](unsigned int)>
   20170:	e1a03000 	mov	r3, r0
   20174:	e1a00004 	mov	r0, r4
   20178:	e5843004 	str	r3, [r4, #4]
   2017c:	e8bd8010 	pop	{r4, pc}
   20180:	e3a0201e 	mov	r2, #30
   20184:	e59f1004 	ldr	r1, [pc, #4]	; 20190 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x4c>
   20188:	e59f0004 	ldr	r0, [pc, #4]	; 20194 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x50>
   2018c:	eb001168 	bl	24734 <assertion_failed>
   20190:	0004276c 	.word	0x0004276c
   20194:	00042784 	.word	0x00042784

00020198 <CRetransmissionQueue::~CRetransmissionQueue()>:
   20198:	e92d4010 	push	{r4, lr}
   2019c:	e1a04000 	mov	r4, r0
   201a0:	e5900004 	ldr	r0, [r0, #4]
   201a4:	e3500000 	cmp	r0, #0
   201a8:	0a000001 	beq	201b4 <CRetransmissionQueue::~CRetransmissionQueue()+0x1c>
   201ac:	e3a01001 	mov	r1, #1
   201b0:	eb002b74 	bl	2af88 <operator delete(void*, unsigned int)>
   201b4:	e1a00004 	mov	r0, r4
   201b8:	e8bd8010 	pop	{r4, pc}

000201bc <CRetransmissionQueue::IsEmpty() const>:
   201bc:	e590200c 	ldr	r2, [r0, #12]
   201c0:	e5900008 	ldr	r0, [r0, #8]
   201c4:	e0420000 	sub	r0, r2, r0
   201c8:	e16f0f10 	clz	r0, r0
   201cc:	e1a002a0 	lsr	r0, r0, #5
   201d0:	e12fff1e 	bx	lr

000201d4 <CRetransmissionQueue::GetFreeSpace() const>:
   201d4:	e5903000 	ldr	r3, [r0]
   201d8:	e92d4010 	push	{r4, lr}
   201dc:	e3530001 	cmp	r3, #1
   201e0:	9a00000b 	bls	20214 <CRetransmissionQueue::GetFreeSpace() const+0x40>
   201e4:	e5902008 	ldr	r2, [r0, #8]
   201e8:	e1530002 	cmp	r3, r2
   201ec:	9a00000c 	bls	20224 <CRetransmissionQueue::GetFreeSpace() const+0x50>
   201f0:	e590000c 	ldr	r0, [r0, #12]
   201f4:	e1530000 	cmp	r3, r0
   201f8:	9a00000d 	bls	20234 <CRetransmissionQueue::GetFreeSpace() const+0x60>
   201fc:	e1520000 	cmp	r2, r0
   20200:	20833000 	addcs	r3, r3, r0
   20204:	22433001 	subcs	r3, r3, #1
   20208:	32403001 	subcc	r3, r0, #1
   2020c:	e0430002 	sub	r0, r3, r2
   20210:	e8bd8010 	pop	{r4, pc}
   20214:	e3a02033 	mov	r2, #51	; 0x33
   20218:	e59f1024 	ldr	r1, [pc, #36]	; 20244 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   2021c:	e59f0024 	ldr	r0, [pc, #36]	; 20248 <CRetransmissionQueue::GetFreeSpace() const+0x74>
   20220:	eb001143 	bl	24734 <assertion_failed>
   20224:	e3a02034 	mov	r2, #52	; 0x34
   20228:	e59f1014 	ldr	r1, [pc, #20]	; 20244 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   2022c:	e59f0018 	ldr	r0, [pc, #24]	; 2024c <CRetransmissionQueue::GetFreeSpace() const+0x78>
   20230:	eb00113f 	bl	24734 <assertion_failed>
   20234:	e3a02035 	mov	r2, #53	; 0x35
   20238:	e59f1004 	ldr	r1, [pc, #4]	; 20244 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   2023c:	e59f000c 	ldr	r0, [pc, #12]	; 20250 <CRetransmissionQueue::GetFreeSpace() const+0x7c>
   20240:	eb00113b 	bl	24734 <assertion_failed>
   20244:	0004276c 	.word	0x0004276c
   20248:	00042784 	.word	0x00042784
   2024c:	00042790 	.word	0x00042790
   20250:	000427a4 	.word	0x000427a4

00020254 <CRetransmissionQueue::Write(void const*, unsigned int)>:
   20254:	e92d4070 	push	{r4, r5, r6, lr}
   20258:	e2526000 	subs	r6, r2, #0
   2025c:	0a000017 	beq	202c0 <CRetransmissionQueue::Write(void const*, unsigned int)+0x6c>
   20260:	e1a05001 	mov	r5, r1
   20264:	e1a04000 	mov	r4, r0
   20268:	ebffffd9 	bl	201d4 <CRetransmissionQueue::GetFreeSpace() const>
   2026c:	e1500006 	cmp	r0, r6
   20270:	3a000016 	bcc	202d0 <CRetransmissionQueue::Write(void const*, unsigned int)+0x7c>
   20274:	e3550000 	cmp	r5, #0
   20278:	0a000018 	beq	202e0 <CRetransmissionQueue::Write(void const*, unsigned int)+0x8c>
   2027c:	e5943004 	ldr	r3, [r4, #4]
   20280:	e3530000 	cmp	r3, #0
   20284:	15941008 	ldrne	r1, [r4, #8]
   20288:	10856006 	addne	r6, r5, r6
   2028c:	0a000017 	beq	202f0 <CRetransmissionQueue::Write(void const*, unsigned int)+0x9c>
   20290:	e2812001 	add	r2, r1, #1
   20294:	e5842008 	str	r2, [r4, #8]
   20298:	e4d52001 	ldrb	r2, [r5], #1
   2029c:	e7c32001 	strb	r2, [r3, r1]
   202a0:	e5940008 	ldr	r0, [r4, #8]
   202a4:	e5941000 	ldr	r1, [r4]
   202a8:	eb006f11 	bl	3bef4 <__aeabi_uidivmod>
   202ac:	e1560005 	cmp	r6, r5
   202b0:	e5841008 	str	r1, [r4, #8]
   202b4:	08bd8070 	popeq	{r4, r5, r6, pc}
   202b8:	e5943004 	ldr	r3, [r4, #4]
   202bc:	eafffff3 	b	20290 <CRetransmissionQueue::Write(void const*, unsigned int)+0x3c>
   202c0:	e3a02041 	mov	r2, #65	; 0x41
   202c4:	e59f1034 	ldr	r1, [pc, #52]	; 20300 <CRetransmissionQueue::Write(void const*, unsigned int)+0xac>
   202c8:	e59f0034 	ldr	r0, [pc, #52]	; 20304 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   202cc:	eb001118 	bl	24734 <assertion_failed>
   202d0:	e3a02042 	mov	r2, #66	; 0x42
   202d4:	e59f1024 	ldr	r1, [pc, #36]	; 20300 <CRetransmissionQueue::Write(void const*, unsigned int)+0xac>
   202d8:	e59f0028 	ldr	r0, [pc, #40]	; 20308 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb4>
   202dc:	eb001114 	bl	24734 <assertion_failed>
   202e0:	e3a02045 	mov	r2, #69	; 0x45
   202e4:	e59f1014 	ldr	r1, [pc, #20]	; 20300 <CRetransmissionQueue::Write(void const*, unsigned int)+0xac>
   202e8:	e59f001c 	ldr	r0, [pc, #28]	; 2030c <CRetransmissionQueue::Write(void const*, unsigned int)+0xb8>
   202ec:	eb001110 	bl	24734 <assertion_failed>
   202f0:	e3a02046 	mov	r2, #70	; 0x46
   202f4:	e59f1004 	ldr	r1, [pc, #4]	; 20300 <CRetransmissionQueue::Write(void const*, unsigned int)+0xac>
   202f8:	e59f0010 	ldr	r0, [pc, #16]	; 20310 <CRetransmissionQueue::Write(void const*, unsigned int)+0xbc>
   202fc:	eb00110c 	bl	24734 <assertion_failed>
   20300:	0004276c 	.word	0x0004276c
   20304:	00041e38 	.word	0x00041e38
   20308:	000427b8 	.word	0x000427b8
   2030c:	000427d4 	.word	0x000427d4
   20310:	0003fc18 	.word	0x0003fc18

00020314 <CRetransmissionQueue::GetBytesAvailable() const>:
   20314:	e5903000 	ldr	r3, [r0]
   20318:	e92d4010 	push	{r4, lr}
   2031c:	e3530001 	cmp	r3, #1
   20320:	9a00000a 	bls	20350 <CRetransmissionQueue::GetBytesAvailable() const+0x3c>
   20324:	e5902008 	ldr	r2, [r0, #8]
   20328:	e1530002 	cmp	r3, r2
   2032c:	9a00000b 	bls	20360 <CRetransmissionQueue::GetBytesAvailable() const+0x4c>
   20330:	e5900010 	ldr	r0, [r0, #16]
   20334:	e1530000 	cmp	r3, r0
   20338:	9a00000c 	bls	20370 <CRetransmissionQueue::GetBytesAvailable() const+0x5c>
   2033c:	e1520000 	cmp	r2, r0
   20340:	30833002 	addcc	r3, r3, r2
   20344:	30430000 	subcc	r0, r3, r0
   20348:	20420000 	subcs	r0, r2, r0
   2034c:	e8bd8010 	pop	{r4, pc}
   20350:	e3a02051 	mov	r2, #81	; 0x51
   20354:	e59f1024 	ldr	r1, [pc, #36]	; 20380 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   20358:	e59f0024 	ldr	r0, [pc, #36]	; 20384 <CRetransmissionQueue::GetBytesAvailable() const+0x70>
   2035c:	eb0010f4 	bl	24734 <assertion_failed>
   20360:	e3a02052 	mov	r2, #82	; 0x52
   20364:	e59f1014 	ldr	r1, [pc, #20]	; 20380 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   20368:	e59f0018 	ldr	r0, [pc, #24]	; 20388 <CRetransmissionQueue::GetBytesAvailable() const+0x74>
   2036c:	eb0010f0 	bl	24734 <assertion_failed>
   20370:	e3a02053 	mov	r2, #83	; 0x53
   20374:	e59f1004 	ldr	r1, [pc, #4]	; 20380 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   20378:	e59f000c 	ldr	r0, [pc, #12]	; 2038c <CRetransmissionQueue::GetBytesAvailable() const+0x78>
   2037c:	eb0010ec 	bl	24734 <assertion_failed>
   20380:	0004276c 	.word	0x0004276c
   20384:	00042784 	.word	0x00042784
   20388:	00042790 	.word	0x00042790
   2038c:	000427dc 	.word	0x000427dc

00020390 <CRetransmissionQueue::Read(void*, unsigned int)>:
   20390:	e92d4070 	push	{r4, r5, r6, lr}
   20394:	e2526000 	subs	r6, r2, #0
   20398:	0a000017 	beq	203fc <CRetransmissionQueue::Read(void*, unsigned int)+0x6c>
   2039c:	e1a05001 	mov	r5, r1
   203a0:	e1a04000 	mov	r4, r0
   203a4:	ebffffda 	bl	20314 <CRetransmissionQueue::GetBytesAvailable() const>
   203a8:	e1500006 	cmp	r0, r6
   203ac:	3a000016 	bcc	2040c <CRetransmissionQueue::Read(void*, unsigned int)+0x7c>
   203b0:	e3550000 	cmp	r5, #0
   203b4:	0a000018 	beq	2041c <CRetransmissionQueue::Read(void*, unsigned int)+0x8c>
   203b8:	e5943004 	ldr	r3, [r4, #4]
   203bc:	e3530000 	cmp	r3, #0
   203c0:	15941010 	ldrne	r1, [r4, #16]
   203c4:	10856006 	addne	r6, r5, r6
   203c8:	0a000017 	beq	2042c <CRetransmissionQueue::Read(void*, unsigned int)+0x9c>
   203cc:	e2812001 	add	r2, r1, #1
   203d0:	e5842010 	str	r2, [r4, #16]
   203d4:	e7d33001 	ldrb	r3, [r3, r1]
   203d8:	e4c53001 	strb	r3, [r5], #1
   203dc:	e5940010 	ldr	r0, [r4, #16]
   203e0:	e5941000 	ldr	r1, [r4]
   203e4:	eb006ec2 	bl	3bef4 <__aeabi_uidivmod>
   203e8:	e1560005 	cmp	r6, r5
   203ec:	e5841010 	str	r1, [r4, #16]
   203f0:	08bd8070 	popeq	{r4, r5, r6, pc}
   203f4:	e5943004 	ldr	r3, [r4, #4]
   203f8:	eafffff3 	b	203cc <CRetransmissionQueue::Read(void*, unsigned int)+0x3c>
   203fc:	e3a0205f 	mov	r2, #95	; 0x5f
   20400:	e59f1034 	ldr	r1, [pc, #52]	; 2043c <CRetransmissionQueue::Read(void*, unsigned int)+0xac>
   20404:	e59f0034 	ldr	r0, [pc, #52]	; 20440 <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   20408:	eb0010c9 	bl	24734 <assertion_failed>
   2040c:	e3a02060 	mov	r2, #96	; 0x60
   20410:	e59f1024 	ldr	r1, [pc, #36]	; 2043c <CRetransmissionQueue::Read(void*, unsigned int)+0xac>
   20414:	e59f0028 	ldr	r0, [pc, #40]	; 20444 <CRetransmissionQueue::Read(void*, unsigned int)+0xb4>
   20418:	eb0010c5 	bl	24734 <assertion_failed>
   2041c:	e3a02063 	mov	r2, #99	; 0x63
   20420:	e59f1014 	ldr	r1, [pc, #20]	; 2043c <CRetransmissionQueue::Read(void*, unsigned int)+0xac>
   20424:	e59f001c 	ldr	r0, [pc, #28]	; 20448 <CRetransmissionQueue::Read(void*, unsigned int)+0xb8>
   20428:	eb0010c1 	bl	24734 <assertion_failed>
   2042c:	e3a02064 	mov	r2, #100	; 0x64
   20430:	e59f1004 	ldr	r1, [pc, #4]	; 2043c <CRetransmissionQueue::Read(void*, unsigned int)+0xac>
   20434:	e59f0010 	ldr	r0, [pc, #16]	; 2044c <CRetransmissionQueue::Read(void*, unsigned int)+0xbc>
   20438:	eb0010bd 	bl	24734 <assertion_failed>
   2043c:	0004276c 	.word	0x0004276c
   20440:	00041e38 	.word	0x00041e38
   20444:	000427f4 	.word	0x000427f4
   20448:	000427d4 	.word	0x000427d4
   2044c:	0003fc18 	.word	0x0003fc18

00020450 <CRetransmissionQueue::Advance(unsigned int)>:
   20450:	e5903000 	ldr	r3, [r0]
   20454:	e92d4010 	push	{r4, lr}
   20458:	e3530001 	cmp	r3, #1
   2045c:	9a00000c 	bls	20494 <CRetransmissionQueue::Advance(unsigned int)+0x44>
   20460:	e590200c 	ldr	r2, [r0, #12]
   20464:	e1a04000 	mov	r4, r0
   20468:	e1530002 	cmp	r3, r2
   2046c:	9a00000c 	bls	204a4 <CRetransmissionQueue::Advance(unsigned int)+0x54>
   20470:	e1a00001 	mov	r0, r1
   20474:	e5941010 	ldr	r1, [r4, #16]
   20478:	e1530001 	cmp	r3, r1
   2047c:	9a00000c 	bls	204b4 <CRetransmissionQueue::Advance(unsigned int)+0x64>
   20480:	e1a01003 	mov	r1, r3
   20484:	e0820000 	add	r0, r2, r0
   20488:	eb006e99 	bl	3bef4 <__aeabi_uidivmod>
   2048c:	e584100c 	str	r1, [r4, #12]
   20490:	e8bd8010 	pop	{r4, pc}
   20494:	e3a0206f 	mov	r2, #111	; 0x6f
   20498:	e59f1024 	ldr	r1, [pc, #36]	; 204c4 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   2049c:	e59f0024 	ldr	r0, [pc, #36]	; 204c8 <CRetransmissionQueue::Advance(unsigned int)+0x78>
   204a0:	eb0010a3 	bl	24734 <assertion_failed>
   204a4:	e3a02070 	mov	r2, #112	; 0x70
   204a8:	e59f1014 	ldr	r1, [pc, #20]	; 204c4 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   204ac:	e59f0018 	ldr	r0, [pc, #24]	; 204cc <CRetransmissionQueue::Advance(unsigned int)+0x7c>
   204b0:	eb00109f 	bl	24734 <assertion_failed>
   204b4:	e3a02071 	mov	r2, #113	; 0x71
   204b8:	e59f1004 	ldr	r1, [pc, #4]	; 204c4 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   204bc:	e59f000c 	ldr	r0, [pc, #12]	; 204d0 <CRetransmissionQueue::Advance(unsigned int)+0x80>
   204c0:	eb00109b 	bl	24734 <assertion_failed>
   204c4:	0004276c 	.word	0x0004276c
   204c8:	00042784 	.word	0x00042784
   204cc:	000427a4 	.word	0x000427a4
   204d0:	000427dc 	.word	0x000427dc

000204d4 <CRetransmissionQueue::Reset()>:
   204d4:	e590300c 	ldr	r3, [r0, #12]
   204d8:	e5803010 	str	r3, [r0, #16]
   204dc:	e12fff1e 	bx	lr

000204e0 <CRetransmissionQueue::Flush()>:
   204e0:	e3a03000 	mov	r3, #0
   204e4:	e5803008 	str	r3, [r0, #8]
   204e8:	e580300c 	str	r3, [r0, #12]
   204ec:	e5803010 	str	r3, [r0, #16]
   204f0:	e12fff1e 	bx	lr

000204f4 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>:
   204f4:	e92d4010 	push	{r4, lr}
   204f8:	e1a04000 	mov	r4, r0
   204fc:	eb002658 	bl	29e64 <CTimer::Get()>
   20500:	e3a03000 	mov	r3, #0
   20504:	e3a02001 	mov	r2, #1
   20508:	e3a01f4b 	mov	r1, #300	; 0x12c
   2050c:	e1500003 	cmp	r0, r3
   20510:	e5840000 	str	r0, [r4]
   20514:	e5841008 	str	r1, [r4, #8]
   20518:	e5843004 	str	r3, [r4, #4]
   2051c:	e5c43018 	strb	r3, [r4, #24]
   20520:	e5843020 	str	r3, [r4, #32]
   20524:	e5c4200c 	strb	r2, [r4, #12]
   20528:	e5842024 	str	r2, [r4, #36]	; 0x24
   2052c:	0a000001 	beq	20538 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x44>
   20530:	e1a00004 	mov	r0, r4
   20534:	e8bd8010 	pop	{r4, pc}
   20538:	e3a02033 	mov	r2, #51	; 0x33
   2053c:	e59f1004 	ldr	r1, [pc, #4]	; 20548 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x54>
   20540:	e59f0004 	ldr	r0, [pc, #4]	; 2054c <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x58>
   20544:	eb00107a 	bl	24734 <assertion_failed>
   20548:	00042814 	.word	0x00042814
   2054c:	0003d568 	.word	0x0003d568

00020550 <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>:
   20550:	e12fff1e 	bx	lr

00020554 <CRetransmissionTimeoutCalculator::GetRTO() const>:
   20554:	e5900008 	ldr	r0, [r0, #8]
   20558:	e12fff1e 	bx	lr

0002055c <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>:
   2055c:	e92d4070 	push	{r4, r5, r6, lr}
   20560:	e1a04000 	mov	r4, r0
   20564:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   20568:	e1a05001 	mov	r5, r1
   2056c:	e3500000 	cmp	r0, #0
   20570:	1a000007 	bne	20594 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)+0x38>
   20574:	e3a02f4b 	mov	r2, #300	; 0x12c
   20578:	e3a03001 	mov	r3, #1
   2057c:	e5841004 	str	r1, [r4, #4]
   20580:	e5c40018 	strb	r0, [r4, #24]
   20584:	e5840020 	str	r0, [r4, #32]
   20588:	e5842008 	str	r2, [r4, #8]
   2058c:	e5c4300c 	strb	r3, [r4, #12]
   20590:	e8bd8070 	pop	{r4, r5, r6, pc}
   20594:	eb002d9a 	bl	2bc04 <EnterCritical>
   20598:	e3a03000 	mov	r3, #0
   2059c:	e3a01f4b 	mov	r1, #300	; 0x12c
   205a0:	e3a02001 	mov	r2, #1
   205a4:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   205a8:	e5845004 	str	r5, [r4, #4]
   205ac:	e1500003 	cmp	r0, r3
   205b0:	e5841008 	str	r1, [r4, #8]
   205b4:	e5c4200c 	strb	r2, [r4, #12]
   205b8:	e5c43018 	strb	r3, [r4, #24]
   205bc:	e5843020 	str	r3, [r4, #32]
   205c0:	08bd8070 	popeq	{r4, r5, r6, pc}
   205c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   205c8:	ea002db7 	b	2bcac <LeaveCritical>

000205cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>:
   205cc:	e92d4010 	push	{r4, lr}
   205d0:	e1a04000 	mov	r4, r0
   205d4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   205d8:	e3500000 	cmp	r0, #0
   205dc:	1a000011 	bne	20628 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x5c>
   205e0:	e5d43018 	ldrb	r3, [r4, #24]
   205e4:	e3530000 	cmp	r3, #0
   205e8:	18bd8010 	popne	{r4, pc}
   205ec:	e5943020 	ldr	r3, [r4, #32]
   205f0:	e3530000 	cmp	r3, #0
   205f4:	1a000006 	bne	20614 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   205f8:	e3a03001 	mov	r3, #1
   205fc:	e5940000 	ldr	r0, [r4]
   20600:	e5c43018 	strb	r3, [r4, #24]
   20604:	e3500000 	cmp	r0, #0
   20608:	0a00000e 	beq	20648 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x7c>
   2060c:	eb002362 	bl	2939c <CTimer::GetTicks() const>
   20610:	e584001c 	str	r0, [r4, #28]
   20614:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   20618:	e3530000 	cmp	r3, #0
   2061c:	08bd8010 	popeq	{r4, pc}
   20620:	e8bd4010 	pop	{r4, lr}
   20624:	ea002da0 	b	2bcac <LeaveCritical>
   20628:	eb002d75 	bl	2bc04 <EnterCritical>
   2062c:	e5d43018 	ldrb	r3, [r4, #24]
   20630:	e3530000 	cmp	r3, #0
   20634:	1afffff6 	bne	20614 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   20638:	e5943020 	ldr	r3, [r4, #32]
   2063c:	e3530000 	cmp	r3, #0
   20640:	1afffff3 	bne	20614 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   20644:	eaffffeb 	b	205f8 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x2c>
   20648:	e3a0205f 	mov	r2, #95	; 0x5f
   2064c:	e59f1004 	ldr	r1, [pc, #4]	; 20658 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x8c>
   20650:	e59f0004 	ldr	r0, [pc, #4]	; 2065c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x90>
   20654:	eb001036 	bl	24734 <assertion_failed>
   20658:	00042814 	.word	0x00042814
   2065c:	0003d568 	.word	0x0003d568

00020660 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>:
   20660:	e92d4010 	push	{r4, lr}
   20664:	e1a04000 	mov	r4, r0
   20668:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   2066c:	e3500000 	cmp	r0, #0
   20670:	1a000011 	bne	206bc <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x5c>
   20674:	e5943008 	ldr	r3, [r4, #8]
   20678:	e59f2048 	ldr	r2, [pc, #72]	; 206c8 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x68>
   2067c:	e1a03083 	lsl	r3, r3, #1
   20680:	e1530002 	cmp	r3, r2
   20684:	21a03002 	movcs	r3, r2
   20688:	e5942020 	ldr	r2, [r4, #32]
   2068c:	e5843008 	str	r3, [r4, #8]
   20690:	e2823001 	add	r3, r2, #1
   20694:	e3530002 	cmp	r3, #2
   20698:	e5843020 	str	r3, [r4, #32]
   2069c:	83a03001 	movhi	r3, #1
   206a0:	85c4300c 	strbhi	r3, [r4, #12]
   206a4:	e3a03000 	mov	r3, #0
   206a8:	e1500003 	cmp	r0, r3
   206ac:	e5c43018 	strb	r3, [r4, #24]
   206b0:	08bd8010 	popeq	{r4, pc}
   206b4:	e8bd4010 	pop	{r4, lr}
   206b8:	ea002d7b 	b	2bcac <LeaveCritical>
   206bc:	eb002d50 	bl	2bc04 <EnterCritical>
   206c0:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   206c4:	eaffffea 	b	20674 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x14>
   206c8:	00002ee0 	.word	0x00002ee0

000206cc <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>:
   206cc:	e5d0300c 	ldrb	r3, [r0, #12]
   206d0:	e3530000 	cmp	r3, #0
   206d4:	0a00000d 	beq	20710 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x44>
   206d8:	e3a02000 	mov	r2, #0
   206dc:	e1a030a1 	lsr	r3, r1, #1
   206e0:	e5801010 	str	r1, [r0, #16]
   206e4:	e5c0200c 	strb	r2, [r0, #12]
   206e8:	e5803014 	str	r3, [r0, #20]
   206ec:	e1a03103 	lsl	r3, r3, #2
   206f0:	e3530001 	cmp	r3, #1
   206f4:	20811003 	addcs	r1, r1, r3
   206f8:	32811001 	addcc	r1, r1, #1
   206fc:	e3510063 	cmp	r1, #99	; 0x63
   20700:	8a00000f 	bhi	20744 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x78>
   20704:	e3a03064 	mov	r3, #100	; 0x64
   20708:	e5803008 	str	r3, [r0, #8]
   2070c:	e12fff1e 	bx	lr
   20710:	e1c021d0 	ldrd	r2, [r0, #16]
   20714:	e042c001 	sub	ip, r2, r1
   20718:	e35c0000 	cmp	ip, #0
   2071c:	b26cc000 	rsblt	ip, ip, #0
   20720:	e0622182 	rsb	r2, r2, r2, lsl #3
   20724:	e0833083 	add	r3, r3, r3, lsl #1
   20728:	e0821001 	add	r1, r2, r1
   2072c:	e083300c 	add	r3, r3, ip
   20730:	e1a011a1 	lsr	r1, r1, #3
   20734:	e1a03123 	lsr	r3, r3, #2
   20738:	e5801010 	str	r1, [r0, #16]
   2073c:	e5803014 	str	r3, [r0, #20]
   20740:	eaffffe9 	b	206ec <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x20>
   20744:	e59f300c 	ldr	r3, [pc, #12]	; 20758 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x8c>
   20748:	e1510003 	cmp	r1, r3
   2074c:	21a01003 	movcs	r1, r3
   20750:	e5801008 	str	r1, [r0, #8]
   20754:	e12fff1e 	bx	lr
   20758:	00002ee0 	.word	0x00002ee0

0002075c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>:
   2075c:	e92d4010 	push	{r4, lr}
   20760:	e1a04000 	mov	r4, r0
   20764:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   20768:	e3500000 	cmp	r0, #0
   2076c:	1a000016 	bne	207cc <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x70>
   20770:	e5d43018 	ldrb	r3, [r4, #24]
   20774:	e3530000 	cmp	r3, #0
   20778:	0a00000b 	beq	207ac <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x50>
   2077c:	e5943020 	ldr	r3, [r4, #32]
   20780:	e3530000 	cmp	r3, #0
   20784:	1a000008 	bne	207ac <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x50>
   20788:	e5940000 	ldr	r0, [r4]
   2078c:	e3500000 	cmp	r0, #0
   20790:	0a00000f 	beq	207d4 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x78>
   20794:	eb002300 	bl	2939c <CTimer::GetTicks() const>
   20798:	e1a01000 	mov	r1, r0
   2079c:	e594301c 	ldr	r3, [r4, #28]
   207a0:	e1a00004 	mov	r0, r4
   207a4:	e0411003 	sub	r1, r1, r3
   207a8:	ebffffc7 	bl	206cc <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>
   207ac:	e3a03000 	mov	r3, #0
   207b0:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   207b4:	e5c43018 	strb	r3, [r4, #24]
   207b8:	e1520003 	cmp	r2, r3
   207bc:	e5843020 	str	r3, [r4, #32]
   207c0:	08bd8010 	popeq	{r4, pc}
   207c4:	e8bd4010 	pop	{r4, lr}
   207c8:	ea002d37 	b	2bcac <LeaveCritical>
   207cc:	eb002d0c 	bl	2bc04 <EnterCritical>
   207d0:	eaffffe6 	b	20770 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x14>
   207d4:	e3a02074 	mov	r2, #116	; 0x74
   207d8:	e59f1004 	ldr	r1, [pc, #4]	; 207e4 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x88>
   207dc:	e59f0004 	ldr	r0, [pc, #4]	; 207e8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x8c>
   207e0:	eb000fd3 	bl	24734 <assertion_failed>
   207e4:	00042814 	.word	0x00042814
   207e8:	0003d568 	.word	0x0003d568

000207ec <CTCPRejector::~CTCPRejector()>:
   207ec:	e92d4010 	push	{r4, lr}
   207f0:	e1a04000 	mov	r4, r0
   207f4:	e59f300c 	ldr	r3, [pc, #12]	; 20808 <CTCPRejector::~CTCPRejector()+0x1c>
   207f8:	e5803000 	str	r3, [r0]
   207fc:	ebfff33a 	bl	1d4ec <CNetConnection::~CNetConnection()>
   20800:	e1a00004 	mov	r0, r4
   20804:	e8bd8010 	pop	{r4, pc}
   20808:	00042860 	.word	0x00042860

0002080c <CTCPRejector::~CTCPRejector()>:
   2080c:	e92d4010 	push	{r4, lr}
   20810:	e1a04000 	mov	r4, r0
   20814:	e59f3018 	ldr	r3, [pc, #24]	; 20834 <CTCPRejector::~CTCPRejector()+0x28>
   20818:	e5803000 	str	r3, [r0]
   2081c:	ebfff332 	bl	1d4ec <CNetConnection::~CNetConnection()>
   20820:	e1a00004 	mov	r0, r4
   20824:	e3a0102c 	mov	r1, #44	; 0x2c
   20828:	eb0029d6 	bl	2af88 <operator delete(void*, unsigned int)>
   2082c:	e1a00004 	mov	r0, r4
   20830:	e8bd8010 	pop	{r4, pc}
   20834:	00042860 	.word	0x00042860

00020838 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>:
   20838:	e3a03006 	mov	r3, #6
   2083c:	e92d4010 	push	{r4, lr}
   20840:	e1a04000 	mov	r4, r0
   20844:	e24dd008 	sub	sp, sp, #8
   20848:	e58d3000 	str	r3, [sp]
   2084c:	e3a03000 	mov	r3, #0
   20850:	ebfff2fe 	bl	1d450 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   20854:	e1a00004 	mov	r0, r4
   20858:	e59f3008 	ldr	r3, [pc, #8]	; 20868 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)+0x30>
   2085c:	e5843000 	str	r3, [r4]
   20860:	e28dd008 	add	sp, sp, #8
   20864:	e8bd8010 	pop	{r4, pc}
   20868:	00042860 	.word	0x00042860

0002086c <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>:
   2086c:	e92d4010 	push	{r4, lr}
   20870:	e3110c02 	tst	r1, #512	; 0x200
   20874:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   20878:	e24dd008 	sub	sp, sp, #8
   2087c:	1a000022 	bne	2090c <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xa0>
   20880:	e1d0c1b6 	ldrh	ip, [r0, #22]
   20884:	e1a04000 	mov	r4, r0
   20888:	e6bfcfbc 	rev16	ip, ip
   2088c:	e1cdc0b8 	strh	ip, [sp, #8]
   20890:	e211ca01 	ands	ip, r1, #4096	; 0x1000
   20894:	16bfcf33 	revne	ip, r3
   20898:	e3a03000 	mov	r3, #0
   2089c:	e1d001b4 	ldrh	r0, [r0, #20]
   208a0:	e6bf2f32 	rev	r2, r2
   208a4:	e6bf0fb0 	rev16	r0, r0
   208a8:	e3811050 	orr	r1, r1, #80	; 0x50
   208ac:	e58d200c 	str	r2, [sp, #12]
   208b0:	e1cd00ba 	strh	r0, [sp, #10]
   208b4:	e1cd11b4 	strh	r1, [sp, #20]
   208b8:	e3a02014 	mov	r2, #20
   208bc:	e28d1008 	add	r1, sp, #8
   208c0:	e284001c 	add	r0, r4, #28
   208c4:	e1cd31b6 	strh	r3, [sp, #22]
   208c8:	e58d3018 	str	r3, [sp, #24]
   208cc:	e58dc010 	str	ip, [sp, #16]
   208d0:	eb000358 	bl	21638 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   208d4:	e5943008 	ldr	r3, [r4, #8]
   208d8:	e1cd01b8 	strh	r0, [sp, #24]
   208dc:	e3530000 	cmp	r3, #0
   208e0:	0a00000d 	beq	2091c <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xb0>
   208e4:	e3a0c006 	mov	ip, #6
   208e8:	e1a00003 	mov	r0, r3
   208ec:	e28d2008 	add	r2, sp, #8
   208f0:	e3a03014 	mov	r3, #20
   208f4:	e284100c 	add	r1, r4, #12
   208f8:	e58dc000 	str	ip, [sp]
   208fc:	ebffe900 	bl	1ad04 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   20900:	e28ddd19 	add	sp, sp, #1600	; 0x640
   20904:	e28dd008 	add	sp, sp, #8
   20908:	e8bd8010 	pop	{r4, pc}
   2090c:	e3a020a1 	mov	r2, #161	; 0xa1
   20910:	e59f1014 	ldr	r1, [pc, #20]	; 2092c <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc0>
   20914:	e59f0014 	ldr	r0, [pc, #20]	; 20930 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc4>
   20918:	eb000f85 	bl	24734 <assertion_failed>
   2091c:	e3a020c7 	mov	r2, #199	; 0xc7
   20920:	e59f1004 	ldr	r1, [pc, #4]	; 2092c <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc0>
   20924:	e59f0008 	ldr	r0, [pc, #8]	; 20934 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc8>
   20928:	eb000f81 	bl	24734 <assertion_failed>
   2092c:	0004282c 	.word	0x0004282c
   20930:	0004283c 	.word	0x0004283c
   20934:	00041dc4 	.word	0x00041dc4

00020938 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   20938:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2093c:	e24dd008 	sub	sp, sp, #8
   20940:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
   20944:	e35c0006 	cmp	ip, #6
   20948:	1a000053 	bne	20a9c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   2094c:	e3520013 	cmp	r2, #19
   20950:	e1a07002 	mov	r7, r2
   20954:	9a000053 	bls	20aa8 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x170>
   20958:	e3510000 	cmp	r1, #0
   2095c:	e1a04001 	mov	r4, r1
   20960:	0a000053 	beq	20ab4 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x17c>
   20964:	e5d11002 	ldrb	r1, [r1, #2]
   20968:	e1a06003 	mov	r6, r3
   2096c:	e5d43003 	ldrb	r3, [r4, #3]
   20970:	e1a05000 	mov	r5, r0
   20974:	e1811403 	orr	r1, r1, r3, lsl #8
   20978:	e6bf1fb1 	rev16	r1, r1
   2097c:	e6ff3071 	uxth	r3, r1
   20980:	e3530000 	cmp	r3, #0
   20984:	e1c011b6 	strh	r1, [r0, #22]
   20988:	0a000046 	beq	20aa8 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x170>
   2098c:	e5900004 	ldr	r0, [r0, #4]
   20990:	e3500000 	cmp	r0, #0
   20994:	0a00004a 	beq	20ac4 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18c>
   20998:	eb000068 	bl	20b40 <CNetConfig::GetIPAddress() const>
   2099c:	eb0001a1 	bl	21028 <CIPAddress::IsNull() const>
   209a0:	e3500000 	cmp	r0, #0
   209a4:	1a00003c 	bne	20a9c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   209a8:	e5950004 	ldr	r0, [r5, #4]
   209ac:	eb000063 	bl	20b40 <CNetConfig::GetIPAddress() const>
   209b0:	e285801c 	add	r8, r5, #28
   209b4:	e1a01000 	mov	r1, r0
   209b8:	e1a00008 	mov	r0, r8
   209bc:	e58d8004 	str	r8, [sp, #4]
   209c0:	eb0002ed 	bl	2157c <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   209c4:	e1a01006 	mov	r1, r6
   209c8:	e59d0004 	ldr	r0, [sp, #4]
   209cc:	eb0002ee 	bl	2158c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   209d0:	e1a02007 	mov	r2, r7
   209d4:	e1a01004 	mov	r1, r4
   209d8:	e59d0004 	ldr	r0, [sp, #4]
   209dc:	eb000315 	bl	21638 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   209e0:	e3500000 	cmp	r0, #0
   209e4:	1a00002c 	bne	20a9c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   209e8:	e5d42005 	ldrb	r2, [r4, #5]
   209ec:	e5d49004 	ldrb	r9, [r4, #4]
   209f0:	e5d41009 	ldrb	r1, [r4, #9]
   209f4:	e1899402 	orr	r9, r9, r2, lsl #8
   209f8:	e5d42006 	ldrb	r2, [r4, #6]
   209fc:	e5d4300c 	ldrb	r3, [r4, #12]
   20a00:	e5d4a008 	ldrb	sl, [r4, #8]
   20a04:	e5d4800d 	ldrb	r8, [r4, #13]
   20a08:	e1899802 	orr	r9, r9, r2, lsl #16
   20a0c:	e5d4200a 	ldrb	r2, [r4, #10]
   20a10:	e1838408 	orr	r8, r3, r8, lsl #8
   20a14:	e18aa401 	orr	sl, sl, r1, lsl #8
   20a18:	e1a03223 	lsr	r3, r3, #4
   20a1c:	e5d41007 	ldrb	r1, [r4, #7]
   20a20:	e0477103 	sub	r7, r7, r3, lsl #2
   20a24:	e3180c02 	tst	r8, #512	; 0x200
   20a28:	e18aa802 	orr	sl, sl, r2, lsl #16
   20a2c:	e5d4200b 	ldrb	r2, [r4, #11]
   20a30:	12877001 	addne	r7, r7, #1
   20a34:	e285000c 	add	r0, r5, #12
   20a38:	e3180c01 	tst	r8, #256	; 0x100
   20a3c:	e1899c01 	orr	r9, r9, r1, lsl #24
   20a40:	e1a01006 	mov	r1, r6
   20a44:	e18aac02 	orr	sl, sl, r2, lsl #24
   20a48:	12877001 	addne	r7, r7, #1
   20a4c:	eb000132 	bl	20f1c <CIPAddress::Set(CIPAddress const&)>
   20a50:	e5d42000 	ldrb	r2, [r4]
   20a54:	e5d41001 	ldrb	r1, [r4, #1]
   20a58:	e2183b01 	ands	r3, r8, #1024	; 0x400
   20a5c:	e1822401 	orr	r2, r2, r1, lsl #8
   20a60:	e6bf2fb2 	rev16	r2, r2
   20a64:	13a00001 	movne	r0, #1
   20a68:	e1c521b4 	strh	r2, [r5, #20]
   20a6c:	1a00000b 	bne	20aa0 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x168>
   20a70:	e2182a01 	ands	r2, r8, #4096	; 0x1000
   20a74:	06bf3f39 	reveq	r3, r9
   20a78:	01a00005 	moveq	r0, r5
   20a7c:	03a01b05 	moveq	r1, #5120	; 0x1400
   20a80:	11a00005 	movne	r0, r5
   20a84:	13a01b01 	movne	r1, #1024	; 0x400
   20a88:	00833007 	addeq	r3, r3, r7
   20a8c:	16bf2f3a 	revne	r2, sl
   20a90:	ebffff75 	bl	2086c <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>
   20a94:	e3a00001 	mov	r0, #1
   20a98:	ea000000 	b	20aa0 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x168>
   20a9c:	e3a00000 	mov	r0, #0
   20aa0:	e28dd008 	add	sp, sp, #8
   20aa4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20aa8:	e3e00000 	mvn	r0, #0
   20aac:	e28dd008 	add	sp, sp, #8
   20ab0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20ab4:	e3a02052 	mov	r2, #82	; 0x52
   20ab8:	e59f1014 	ldr	r1, [pc, #20]	; 20ad4 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x19c>
   20abc:	e59f0014 	ldr	r0, [pc, #20]	; 20ad8 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1a0>
   20ac0:	eb000f1b 	bl	24734 <assertion_failed>
   20ac4:	e3a0205b 	mov	r2, #91	; 0x5b
   20ac8:	e59f1004 	ldr	r1, [pc, #4]	; 20ad4 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x19c>
   20acc:	e59f0008 	ldr	r0, [pc, #8]	; 20adc <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1a4>
   20ad0:	eb000f17 	bl	24734 <assertion_failed>
   20ad4:	0004282c 	.word	0x0004282c
   20ad8:	00041ea8 	.word	0x00041ea8
   20adc:	00041db0 	.word	0x00041db0

00020ae0 <CNetConfig::~CNetConfig()>:
   20ae0:	e92d4010 	push	{r4, lr}
   20ae4:	e1a04000 	mov	r4, r0
   20ae8:	e2800024 	add	r0, r0, #36	; 0x24
   20aec:	eb000084 	bl	20d04 <CIPAddress::~CIPAddress()>
   20af0:	e284001c 	add	r0, r4, #28
   20af4:	eb000082 	bl	20d04 <CIPAddress::~CIPAddress()>
   20af8:	e2840014 	add	r0, r4, #20
   20afc:	eb000080 	bl	20d04 <CIPAddress::~CIPAddress()>
   20b00:	e284000c 	add	r0, r4, #12
   20b04:	eb00007e 	bl	20d04 <CIPAddress::~CIPAddress()>
   20b08:	e2840004 	add	r0, r4, #4
   20b0c:	eb00007c 	bl	20d04 <CIPAddress::~CIPAddress()>
   20b10:	e1a00004 	mov	r0, r4
   20b14:	e8bd8010 	pop	{r4, pc}

00020b18 <CNetConfig::SetDHCP(bool)>:
   20b18:	e5c01000 	strb	r1, [r0]
   20b1c:	e12fff1e 	bx	lr

00020b20 <CNetConfig::SetDefaultGateway(unsigned int)>:
   20b20:	e2800014 	add	r0, r0, #20
   20b24:	ea0000e3 	b	20eb8 <CIPAddress::Set(unsigned int)>

00020b28 <CNetConfig::SetDNSServer(unsigned int)>:
   20b28:	e280001c 	add	r0, r0, #28
   20b2c:	ea0000e1 	b	20eb8 <CIPAddress::Set(unsigned int)>

00020b30 <CNetConfig::SetDefaultGateway(unsigned char const*)>:
   20b30:	e2800014 	add	r0, r0, #20
   20b34:	ea0000e3 	b	20ec8 <CIPAddress::Set(unsigned char const*)>

00020b38 <CNetConfig::SetDNSServer(unsigned char const*)>:
   20b38:	e280001c 	add	r0, r0, #28
   20b3c:	ea0000e1 	b	20ec8 <CIPAddress::Set(unsigned char const*)>

00020b40 <CNetConfig::GetIPAddress() const>:
   20b40:	e2800004 	add	r0, r0, #4
   20b44:	e12fff1e 	bx	lr

00020b48 <CNetConfig::IsDHCPUsed() const>:
   20b48:	e5d00000 	ldrb	r0, [r0]
   20b4c:	e12fff1e 	bx	lr

00020b50 <CNetConfig::GetNetMask() const>:
   20b50:	e280000c 	add	r0, r0, #12
   20b54:	ea000110 	b	20f9c <CIPAddress::Get() const>

00020b58 <CNetConfig::GetDefaultGateway() const>:
   20b58:	e2800014 	add	r0, r0, #20
   20b5c:	e12fff1e 	bx	lr

00020b60 <CNetConfig::GetDNSServer() const>:
   20b60:	e280001c 	add	r0, r0, #28
   20b64:	e12fff1e 	bx	lr

00020b68 <CNetConfig::GetBroadcastAddress() const>:
   20b68:	e2800024 	add	r0, r0, #36	; 0x24
   20b6c:	e12fff1e 	bx	lr

00020b70 <CNetConfig::UpdateBroadcastAddress()>:
   20b70:	e92d4010 	push	{r4, lr}
   20b74:	e1a04000 	mov	r4, r0
   20b78:	e24dd008 	sub	sp, sp, #8
   20b7c:	e1a0100d 	mov	r1, sp
   20b80:	e2800004 	add	r0, r0, #4
   20b84:	eb000110 	bl	20fcc <CIPAddress::CopyTo(unsigned char*) const>
   20b88:	e284000c 	add	r0, r4, #12
   20b8c:	e28d1004 	add	r1, sp, #4
   20b90:	eb00010d 	bl	20fcc <CIPAddress::CopyTo(unsigned char*) const>
   20b94:	e89d000a 	ldm	sp, {r1, r3}
   20b98:	e1e03003 	mvn	r3, r3
   20b9c:	e2840024 	add	r0, r4, #36	; 0x24
   20ba0:	e1831001 	orr	r1, r3, r1
   20ba4:	eb0000c3 	bl	20eb8 <CIPAddress::Set(unsigned int)>
   20ba8:	e28dd008 	add	sp, sp, #8
   20bac:	e8bd8010 	pop	{r4, pc}

00020bb0 <CNetConfig::Reset()>:
   20bb0:	e92d4010 	push	{r4, lr}
   20bb4:	e1a04000 	mov	r4, r0
   20bb8:	e59f1034 	ldr	r1, [pc, #52]	; 20bf4 <CNetConfig::Reset()+0x44>
   20bbc:	e2800004 	add	r0, r0, #4
   20bc0:	eb0000c0 	bl	20ec8 <CIPAddress::Set(unsigned char const*)>
   20bc4:	e284000c 	add	r0, r4, #12
   20bc8:	e59f1024 	ldr	r1, [pc, #36]	; 20bf4 <CNetConfig::Reset()+0x44>
   20bcc:	eb0000bd 	bl	20ec8 <CIPAddress::Set(unsigned char const*)>
   20bd0:	e2840014 	add	r0, r4, #20
   20bd4:	e59f1018 	ldr	r1, [pc, #24]	; 20bf4 <CNetConfig::Reset()+0x44>
   20bd8:	eb0000ba 	bl	20ec8 <CIPAddress::Set(unsigned char const*)>
   20bdc:	e284001c 	add	r0, r4, #28
   20be0:	e59f100c 	ldr	r1, [pc, #12]	; 20bf4 <CNetConfig::Reset()+0x44>
   20be4:	eb0000b7 	bl	20ec8 <CIPAddress::Set(unsigned char const*)>
   20be8:	e1a00004 	mov	r0, r4
   20bec:	e8bd4010 	pop	{r4, lr}
   20bf0:	eaffffde 	b	20b70 <CNetConfig::UpdateBroadcastAddress()>
   20bf4:	0004289c 	.word	0x0004289c

00020bf8 <CNetConfig::CNetConfig()>:
   20bf8:	e3a03001 	mov	r3, #1
   20bfc:	e92d4010 	push	{r4, lr}
   20c00:	e1a04000 	mov	r4, r0
   20c04:	e4c03004 	strb	r3, [r0], #4
   20c08:	eb000027 	bl	20cac <CIPAddress::CIPAddress()>
   20c0c:	e284000c 	add	r0, r4, #12
   20c10:	eb000025 	bl	20cac <CIPAddress::CIPAddress()>
   20c14:	e2840014 	add	r0, r4, #20
   20c18:	eb000023 	bl	20cac <CIPAddress::CIPAddress()>
   20c1c:	e284001c 	add	r0, r4, #28
   20c20:	eb000021 	bl	20cac <CIPAddress::CIPAddress()>
   20c24:	e2840024 	add	r0, r4, #36	; 0x24
   20c28:	eb00001f 	bl	20cac <CIPAddress::CIPAddress()>
   20c2c:	e1a00004 	mov	r0, r4
   20c30:	ebffffde 	bl	20bb0 <CNetConfig::Reset()>
   20c34:	e1a00004 	mov	r0, r4
   20c38:	e8bd8010 	pop	{r4, pc}

00020c3c <CNetConfig::SetIPAddress(unsigned int)>:
   20c3c:	e92d4010 	push	{r4, lr}
   20c40:	e1a04000 	mov	r4, r0
   20c44:	e2800004 	add	r0, r0, #4
   20c48:	eb00009a 	bl	20eb8 <CIPAddress::Set(unsigned int)>
   20c4c:	e1a00004 	mov	r0, r4
   20c50:	e8bd4010 	pop	{r4, lr}
   20c54:	eaffffc5 	b	20b70 <CNetConfig::UpdateBroadcastAddress()>

00020c58 <CNetConfig::SetNetMask(unsigned int)>:
   20c58:	e92d4010 	push	{r4, lr}
   20c5c:	e1a04000 	mov	r4, r0
   20c60:	e280000c 	add	r0, r0, #12
   20c64:	eb000093 	bl	20eb8 <CIPAddress::Set(unsigned int)>
   20c68:	e1a00004 	mov	r0, r4
   20c6c:	e8bd4010 	pop	{r4, lr}
   20c70:	eaffffbe 	b	20b70 <CNetConfig::UpdateBroadcastAddress()>

00020c74 <CNetConfig::SetIPAddress(unsigned char const*)>:
   20c74:	e92d4010 	push	{r4, lr}
   20c78:	e1a04000 	mov	r4, r0
   20c7c:	e2800004 	add	r0, r0, #4
   20c80:	eb000090 	bl	20ec8 <CIPAddress::Set(unsigned char const*)>
   20c84:	e1a00004 	mov	r0, r4
   20c88:	e8bd4010 	pop	{r4, lr}
   20c8c:	eaffffb7 	b	20b70 <CNetConfig::UpdateBroadcastAddress()>

00020c90 <CNetConfig::SetNetMask(unsigned char const*)>:
   20c90:	e92d4010 	push	{r4, lr}
   20c94:	e1a04000 	mov	r4, r0
   20c98:	e280000c 	add	r0, r0, #12
   20c9c:	eb000089 	bl	20ec8 <CIPAddress::Set(unsigned char const*)>
   20ca0:	e1a00004 	mov	r0, r4
   20ca4:	e8bd4010 	pop	{r4, lr}
   20ca8:	eaffffb0 	b	20b70 <CNetConfig::UpdateBroadcastAddress()>

00020cac <CIPAddress::CIPAddress()>:
   20cac:	e3a02000 	mov	r2, #0
   20cb0:	e5c02000 	strb	r2, [r0]
   20cb4:	e12fff1e 	bx	lr

00020cb8 <CIPAddress::CIPAddress(unsigned int)>:
   20cb8:	e3a02001 	mov	r2, #1
   20cbc:	e5801004 	str	r1, [r0, #4]
   20cc0:	e5c02000 	strb	r2, [r0]
   20cc4:	e12fff1e 	bx	lr

00020cc8 <CIPAddress::CIPAddress(CIPAddress const&)>:
   20cc8:	e5d12000 	ldrb	r2, [r1]
   20ccc:	e3520000 	cmp	r2, #0
   20cd0:	0a000004 	beq	20ce8 <CIPAddress::CIPAddress(CIPAddress const&)+0x20>
   20cd4:	e3a0c001 	mov	ip, #1
   20cd8:	e5912004 	ldr	r2, [r1, #4]
   20cdc:	e5c0c000 	strb	ip, [r0]
   20ce0:	e5802004 	str	r2, [r0, #4]
   20ce4:	e12fff1e 	bx	lr
   20ce8:	e3a0202e 	mov	r2, #46	; 0x2e
   20cec:	e92d4010 	push	{r4, lr}
   20cf0:	e59f1004 	ldr	r1, [pc, #4]	; 20cfc <CIPAddress::CIPAddress(CIPAddress const&)+0x34>
   20cf4:	e59f0004 	ldr	r0, [pc, #4]	; 20d00 <CIPAddress::CIPAddress(CIPAddress const&)+0x38>
   20cf8:	eb000e8d 	bl	24734 <assertion_failed>
   20cfc:	000428a0 	.word	0x000428a0
   20d00:	000428b0 	.word	0x000428b0

00020d04 <CIPAddress::~CIPAddress()>:
   20d04:	e12fff1e 	bx	lr

00020d08 <CIPAddress::operator==(CIPAddress const&) const>:
   20d08:	e5d03000 	ldrb	r3, [r0]
   20d0c:	e92d4010 	push	{r4, lr}
   20d10:	e3530000 	cmp	r3, #0
   20d14:	0a000008 	beq	20d3c <CIPAddress::operator==(CIPAddress const&) const+0x34>
   20d18:	e5d13000 	ldrb	r3, [r1]
   20d1c:	e3530000 	cmp	r3, #0
   20d20:	0a000009 	beq	20d4c <CIPAddress::operator==(CIPAddress const&) const+0x44>
   20d24:	e5900004 	ldr	r0, [r0, #4]
   20d28:	e5913004 	ldr	r3, [r1, #4]
   20d2c:	e0400003 	sub	r0, r0, r3
   20d30:	e16f0f10 	clz	r0, r0
   20d34:	e1a002a0 	lsr	r0, r0, #5
   20d38:	e8bd8010 	pop	{r4, pc}
   20d3c:	e3a0203e 	mov	r2, #62	; 0x3e
   20d40:	e59f1014 	ldr	r1, [pc, #20]	; 20d5c <CIPAddress::operator==(CIPAddress const&) const+0x54>
   20d44:	e59f0014 	ldr	r0, [pc, #20]	; 20d60 <CIPAddress::operator==(CIPAddress const&) const+0x58>
   20d48:	eb000e79 	bl	24734 <assertion_failed>
   20d4c:	e3a0203f 	mov	r2, #63	; 0x3f
   20d50:	e59f1004 	ldr	r1, [pc, #4]	; 20d5c <CIPAddress::operator==(CIPAddress const&) const+0x54>
   20d54:	e59f0008 	ldr	r0, [pc, #8]	; 20d64 <CIPAddress::operator==(CIPAddress const&) const+0x5c>
   20d58:	eb000e75 	bl	24734 <assertion_failed>
   20d5c:	000428a0 	.word	0x000428a0
   20d60:	0003dce8 	.word	0x0003dce8
   20d64:	000428c4 	.word	0x000428c4

00020d68 <CIPAddress::operator!=(CIPAddress const&) const>:
   20d68:	e5d03000 	ldrb	r3, [r0]
   20d6c:	e92d4010 	push	{r4, lr}
   20d70:	e3530000 	cmp	r3, #0
   20d74:	0a000007 	beq	20d98 <CIPAddress::operator!=(CIPAddress const&) const+0x30>
   20d78:	e5d13000 	ldrb	r3, [r1]
   20d7c:	e3530000 	cmp	r3, #0
   20d80:	0a000008 	beq	20da8 <CIPAddress::operator!=(CIPAddress const&) const+0x40>
   20d84:	e5900004 	ldr	r0, [r0, #4]
   20d88:	e5913004 	ldr	r3, [r1, #4]
   20d8c:	e0500003 	subs	r0, r0, r3
   20d90:	13a00001 	movne	r0, #1
   20d94:	e8bd8010 	pop	{r4, pc}
   20d98:	e3a02045 	mov	r2, #69	; 0x45
   20d9c:	e59f1014 	ldr	r1, [pc, #20]	; 20db8 <CIPAddress::operator!=(CIPAddress const&) const+0x50>
   20da0:	e59f0014 	ldr	r0, [pc, #20]	; 20dbc <CIPAddress::operator!=(CIPAddress const&) const+0x54>
   20da4:	eb000e62 	bl	24734 <assertion_failed>
   20da8:	e3a02046 	mov	r2, #70	; 0x46
   20dac:	e59f1004 	ldr	r1, [pc, #4]	; 20db8 <CIPAddress::operator!=(CIPAddress const&) const+0x50>
   20db0:	e59f0008 	ldr	r0, [pc, #8]	; 20dc0 <CIPAddress::operator!=(CIPAddress const&) const+0x58>
   20db4:	eb000e5e 	bl	24734 <assertion_failed>
   20db8:	000428a0 	.word	0x000428a0
   20dbc:	0003dce8 	.word	0x0003dce8
   20dc0:	000428c4 	.word	0x000428c4

00020dc4 <CIPAddress::operator==(unsigned char const*) const>:
   20dc4:	e5d02000 	ldrb	r2, [r0]
   20dc8:	e92d4010 	push	{r4, lr}
   20dcc:	e3520000 	cmp	r2, #0
   20dd0:	0a000007 	beq	20df4 <CIPAddress::operator==(unsigned char const*) const+0x30>
   20dd4:	e3510000 	cmp	r1, #0
   20dd8:	0a000009 	beq	20e04 <CIPAddress::operator==(unsigned char const*) const+0x40>
   20ddc:	e3a02004 	mov	r2, #4
   20de0:	e2800004 	add	r0, r0, #4
   20de4:	eb002464 	bl	29f7c <memcmp>
   20de8:	e16f0f10 	clz	r0, r0
   20dec:	e1a002a0 	lsr	r0, r0, #5
   20df0:	e8bd8010 	pop	{r4, pc}
   20df4:	e3a0204c 	mov	r2, #76	; 0x4c
   20df8:	e59f1014 	ldr	r1, [pc, #20]	; 20e14 <CIPAddress::operator==(unsigned char const*) const+0x50>
   20dfc:	e59f0014 	ldr	r0, [pc, #20]	; 20e18 <CIPAddress::operator==(unsigned char const*) const+0x54>
   20e00:	eb000e4b 	bl	24734 <assertion_failed>
   20e04:	e3a0204d 	mov	r2, #77	; 0x4d
   20e08:	e59f1004 	ldr	r1, [pc, #4]	; 20e14 <CIPAddress::operator==(unsigned char const*) const+0x50>
   20e0c:	e59f0008 	ldr	r0, [pc, #8]	; 20e1c <CIPAddress::operator==(unsigned char const*) const+0x58>
   20e10:	eb000e47 	bl	24734 <assertion_failed>
   20e14:	000428a0 	.word	0x000428a0
   20e18:	0003dce8 	.word	0x0003dce8
   20e1c:	000428d8 	.word	0x000428d8

00020e20 <CIPAddress::operator!=(unsigned char const*) const>:
   20e20:	e92d4010 	push	{r4, lr}
   20e24:	ebffffe6 	bl	20dc4 <CIPAddress::operator==(unsigned char const*) const>
   20e28:	e2200001 	eor	r0, r0, #1
   20e2c:	e6ef0070 	uxtb	r0, r0
   20e30:	e8bd8010 	pop	{r4, pc}

00020e34 <CIPAddress::operator==(unsigned int) const>:
   20e34:	e5d03000 	ldrb	r3, [r0]
   20e38:	e3530000 	cmp	r3, #0
   20e3c:	0a000004 	beq	20e54 <CIPAddress::operator==(unsigned int) const+0x20>
   20e40:	e5900004 	ldr	r0, [r0, #4]
   20e44:	e0400001 	sub	r0, r0, r1
   20e48:	e16f0f10 	clz	r0, r0
   20e4c:	e1a002a0 	lsr	r0, r0, #5
   20e50:	e12fff1e 	bx	lr
   20e54:	e3a02058 	mov	r2, #88	; 0x58
   20e58:	e92d4010 	push	{r4, lr}
   20e5c:	e59f1004 	ldr	r1, [pc, #4]	; 20e68 <CIPAddress::operator==(unsigned int) const+0x34>
   20e60:	e59f0004 	ldr	r0, [pc, #4]	; 20e6c <CIPAddress::operator==(unsigned int) const+0x38>
   20e64:	eb000e32 	bl	24734 <assertion_failed>
   20e68:	000428a0 	.word	0x000428a0
   20e6c:	0003dce8 	.word	0x0003dce8

00020e70 <CIPAddress::operator!=(unsigned int) const>:
   20e70:	e5d03000 	ldrb	r3, [r0]
   20e74:	e3530000 	cmp	r3, #0
   20e78:	0a000003 	beq	20e8c <CIPAddress::operator!=(unsigned int) const+0x1c>
   20e7c:	e5900004 	ldr	r0, [r0, #4]
   20e80:	e0500001 	subs	r0, r0, r1
   20e84:	13a00001 	movne	r0, #1
   20e88:	e12fff1e 	bx	lr
   20e8c:	e3a0205e 	mov	r2, #94	; 0x5e
   20e90:	e92d4010 	push	{r4, lr}
   20e94:	e59f1004 	ldr	r1, [pc, #4]	; 20ea0 <CIPAddress::operator!=(unsigned int) const+0x30>
   20e98:	e59f0004 	ldr	r0, [pc, #4]	; 20ea4 <CIPAddress::operator!=(unsigned int) const+0x34>
   20e9c:	eb000e24 	bl	24734 <assertion_failed>
   20ea0:	000428a0 	.word	0x000428a0
   20ea4:	0003dce8 	.word	0x0003dce8

00020ea8 <CIPAddress::operator=(unsigned int)>:
   20ea8:	e3a02001 	mov	r2, #1
   20eac:	e5801004 	str	r1, [r0, #4]
   20eb0:	e5c02000 	strb	r2, [r0]
   20eb4:	e12fff1e 	bx	lr

00020eb8 <CIPAddress::Set(unsigned int)>:
   20eb8:	e3a03001 	mov	r3, #1
   20ebc:	e5801004 	str	r1, [r0, #4]
   20ec0:	e5c03000 	strb	r3, [r0]
   20ec4:	e12fff1e 	bx	lr

00020ec8 <CIPAddress::Set(unsigned char const*)>:
   20ec8:	e3510000 	cmp	r1, #0
   20ecc:	e92d4010 	push	{r4, lr}
   20ed0:	0a000006 	beq	20ef0 <CIPAddress::Set(unsigned char const*)+0x28>
   20ed4:	e3a02004 	mov	r2, #4
   20ed8:	e1a04000 	mov	r4, r0
   20edc:	e0800002 	add	r0, r0, r2
   20ee0:	eb002634 	bl	2a7b8 <memcpy>
   20ee4:	e3a03001 	mov	r3, #1
   20ee8:	e5c43000 	strb	r3, [r4]
   20eec:	e8bd8010 	pop	{r4, pc}
   20ef0:	e3a02075 	mov	r2, #117	; 0x75
   20ef4:	e59f1004 	ldr	r1, [pc, #4]	; 20f00 <CIPAddress::Set(unsigned char const*)+0x38>
   20ef8:	e59f0004 	ldr	r0, [pc, #4]	; 20f04 <CIPAddress::Set(unsigned char const*)+0x3c>
   20efc:	eb000e0c 	bl	24734 <assertion_failed>
   20f00:	000428a0 	.word	0x000428a0
   20f04:	000428e8 	.word	0x000428e8

00020f08 <CIPAddress::CIPAddress(unsigned char const*)>:
   20f08:	e92d4010 	push	{r4, lr}
   20f0c:	e1a04000 	mov	r4, r0
   20f10:	ebffffec 	bl	20ec8 <CIPAddress::Set(unsigned char const*)>
   20f14:	e1a00004 	mov	r0, r4
   20f18:	e8bd8010 	pop	{r4, pc}

00020f1c <CIPAddress::Set(CIPAddress const&)>:
   20f1c:	e5d13000 	ldrb	r3, [r1]
   20f20:	e3530000 	cmp	r3, #0
   20f24:	0a000004 	beq	20f3c <CIPAddress::Set(CIPAddress const&)+0x20>
   20f28:	e3a02001 	mov	r2, #1
   20f2c:	e5913004 	ldr	r3, [r1, #4]
   20f30:	e5c02000 	strb	r2, [r0]
   20f34:	e5803004 	str	r3, [r0, #4]
   20f38:	e12fff1e 	bx	lr
   20f3c:	e3a0207e 	mov	r2, #126	; 0x7e
   20f40:	e92d4010 	push	{r4, lr}
   20f44:	e59f1004 	ldr	r1, [pc, #4]	; 20f50 <CIPAddress::Set(CIPAddress const&)+0x34>
   20f48:	e59f0004 	ldr	r0, [pc, #4]	; 20f54 <CIPAddress::Set(CIPAddress const&)+0x38>
   20f4c:	eb000df8 	bl	24734 <assertion_failed>
   20f50:	000428a0 	.word	0x000428a0
   20f54:	000428b0 	.word	0x000428b0

00020f58 <CIPAddress::SetBroadcast()>:
   20f58:	e3e02000 	mvn	r2, #0
   20f5c:	e3a03001 	mov	r3, #1
   20f60:	e5802004 	str	r2, [r0, #4]
   20f64:	e5c03000 	strb	r3, [r0]
   20f68:	e12fff1e 	bx	lr

00020f6c <CIPAddress::operator unsigned int() const>:
   20f6c:	e5d03000 	ldrb	r3, [r0]
   20f70:	e3530000 	cmp	r3, #0
   20f74:	0a000001 	beq	20f80 <CIPAddress::operator unsigned int() const+0x14>
   20f78:	e5900004 	ldr	r0, [r0, #4]
   20f7c:	e12fff1e 	bx	lr
   20f80:	e3a0208f 	mov	r2, #143	; 0x8f
   20f84:	e92d4010 	push	{r4, lr}
   20f88:	e59f1004 	ldr	r1, [pc, #4]	; 20f94 <CIPAddress::operator unsigned int() const+0x28>
   20f8c:	e59f0004 	ldr	r0, [pc, #4]	; 20f98 <CIPAddress::operator unsigned int() const+0x2c>
   20f90:	eb000de7 	bl	24734 <assertion_failed>
   20f94:	000428a0 	.word	0x000428a0
   20f98:	0003dce8 	.word	0x0003dce8

00020f9c <CIPAddress::Get() const>:
   20f9c:	e5d03000 	ldrb	r3, [r0]
   20fa0:	e3530000 	cmp	r3, #0
   20fa4:	0a000001 	beq	20fb0 <CIPAddress::Get() const+0x14>
   20fa8:	e2800004 	add	r0, r0, #4
   20fac:	e12fff1e 	bx	lr
   20fb0:	e3a02095 	mov	r2, #149	; 0x95
   20fb4:	e92d4010 	push	{r4, lr}
   20fb8:	e59f1004 	ldr	r1, [pc, #4]	; 20fc4 <CIPAddress::Get() const+0x28>
   20fbc:	e59f0004 	ldr	r0, [pc, #4]	; 20fc8 <CIPAddress::Get() const+0x2c>
   20fc0:	eb000ddb 	bl	24734 <assertion_failed>
   20fc4:	000428a0 	.word	0x000428a0
   20fc8:	0003dce8 	.word	0x0003dce8

00020fcc <CIPAddress::CopyTo(unsigned char*) const>:
   20fcc:	e5d02000 	ldrb	r2, [r0]
   20fd0:	e92d4010 	push	{r4, lr}
   20fd4:	e3520000 	cmp	r2, #0
   20fd8:	0a000007 	beq	20ffc <CIPAddress::CopyTo(unsigned char*) const+0x30>
   20fdc:	e3510000 	cmp	r1, #0
   20fe0:	e1a03000 	mov	r3, r0
   20fe4:	e1a00001 	mov	r0, r1
   20fe8:	0a000007 	beq	2100c <CIPAddress::CopyTo(unsigned char*) const+0x40>
   20fec:	e8bd4010 	pop	{r4, lr}
   20ff0:	e3a02004 	mov	r2, #4
   20ff4:	e2831004 	add	r1, r3, #4
   20ff8:	ea0025ee 	b	2a7b8 <memcpy>
   20ffc:	e3a0209b 	mov	r2, #155	; 0x9b
   21000:	e59f1014 	ldr	r1, [pc, #20]	; 2101c <CIPAddress::CopyTo(unsigned char*) const+0x50>
   21004:	e59f0014 	ldr	r0, [pc, #20]	; 21020 <CIPAddress::CopyTo(unsigned char*) const+0x54>
   21008:	eb000dc9 	bl	24734 <assertion_failed>
   2100c:	e3a0209c 	mov	r2, #156	; 0x9c
   21010:	e59f1004 	ldr	r1, [pc, #4]	; 2101c <CIPAddress::CopyTo(unsigned char*) const+0x50>
   21014:	e59f0008 	ldr	r0, [pc, #8]	; 21024 <CIPAddress::CopyTo(unsigned char*) const+0x58>
   21018:	eb000dc5 	bl	24734 <assertion_failed>
   2101c:	000428a0 	.word	0x000428a0
   21020:	0003dce8 	.word	0x0003dce8
   21024:	0003ef40 	.word	0x0003ef40

00021028 <CIPAddress::IsNull() const>:
   21028:	e5d03000 	ldrb	r3, [r0]
   2102c:	e3530000 	cmp	r3, #0
   21030:	0a000003 	beq	21044 <CIPAddress::IsNull() const+0x1c>
   21034:	e5900004 	ldr	r0, [r0, #4]
   21038:	e16f0f10 	clz	r0, r0
   2103c:	e1a002a0 	lsr	r0, r0, #5
   21040:	e12fff1e 	bx	lr
   21044:	e3a020a2 	mov	r2, #162	; 0xa2
   21048:	e92d4010 	push	{r4, lr}
   2104c:	e59f1004 	ldr	r1, [pc, #4]	; 21058 <CIPAddress::IsNull() const+0x30>
   21050:	e59f0004 	ldr	r0, [pc, #4]	; 2105c <CIPAddress::IsNull() const+0x34>
   21054:	eb000db6 	bl	24734 <assertion_failed>
   21058:	000428a0 	.word	0x000428a0
   2105c:	0003dce8 	.word	0x0003dce8

00021060 <CIPAddress::IsBroadcast() const>:
   21060:	e5d03000 	ldrb	r3, [r0]
   21064:	e3530000 	cmp	r3, #0
   21068:	0a000004 	beq	21080 <CIPAddress::IsBroadcast() const+0x20>
   2106c:	e5900004 	ldr	r0, [r0, #4]
   21070:	e3700001 	cmn	r0, #1
   21074:	13a00000 	movne	r0, #0
   21078:	03a00001 	moveq	r0, #1
   2107c:	e12fff1e 	bx	lr
   21080:	e3a020a8 	mov	r2, #168	; 0xa8
   21084:	e92d4010 	push	{r4, lr}
   21088:	e59f1004 	ldr	r1, [pc, #4]	; 21094 <CIPAddress::IsBroadcast() const+0x34>
   2108c:	e59f0004 	ldr	r0, [pc, #4]	; 21098 <CIPAddress::IsBroadcast() const+0x38>
   21090:	eb000da7 	bl	24734 <assertion_failed>
   21094:	000428a0 	.word	0x000428a0
   21098:	0003dce8 	.word	0x0003dce8

0002109c <CIPAddress::GetSize() const>:
   2109c:	e3a00004 	mov	r0, #4
   210a0:	e12fff1e 	bx	lr

000210a4 <CIPAddress::Format(CString*) const>:
   210a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   210a8:	e5d02000 	ldrb	r2, [r0]
   210ac:	e24dd00c 	sub	sp, sp, #12
   210b0:	e3520000 	cmp	r2, #0
   210b4:	0a000010 	beq	210fc <CIPAddress::Format(CString*) const+0x58>
   210b8:	e3510000 	cmp	r1, #0
   210bc:	e1a03000 	mov	r3, r0
   210c0:	e1a00001 	mov	r0, r1
   210c4:	0a000010 	beq	2110c <CIPAddress::Format(CString*) const+0x68>
   210c8:	e5932004 	ldr	r2, [r3, #4]
   210cc:	e1a01822 	lsr	r1, r2, #16
   210d0:	e1a0cc22 	lsr	ip, r2, #24
   210d4:	e6ef1071 	uxtb	r1, r1
   210d8:	e1a03422 	lsr	r3, r2, #8
   210dc:	e58d1000 	str	r1, [sp]
   210e0:	e6ef3073 	uxtb	r3, r3
   210e4:	e59f1030 	ldr	r1, [pc, #48]	; 2111c <CIPAddress::Format(CString*) const+0x78>
   210e8:	e58dc004 	str	ip, [sp, #4]
   210ec:	e6ef2072 	uxtb	r2, r2
   210f0:	eb001fb1 	bl	28fbc <CString::Format(char const*, ...)>
   210f4:	e28dd00c 	add	sp, sp, #12
   210f8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   210fc:	e3a020b3 	mov	r2, #179	; 0xb3
   21100:	e59f1018 	ldr	r1, [pc, #24]	; 21120 <CIPAddress::Format(CString*) const+0x7c>
   21104:	e59f0018 	ldr	r0, [pc, #24]	; 21124 <CIPAddress::Format(CString*) const+0x80>
   21108:	eb000d89 	bl	24734 <assertion_failed>
   2110c:	e3a020b4 	mov	r2, #180	; 0xb4
   21110:	e59f1008 	ldr	r1, [pc, #8]	; 21120 <CIPAddress::Format(CString*) const+0x7c>
   21114:	e59f000c 	ldr	r0, [pc, #12]	; 21128 <CIPAddress::Format(CString*) const+0x84>
   21118:	eb000d85 	bl	24734 <assertion_failed>
   2111c:	00042908 	.word	0x00042908
   21120:	000428a0 	.word	0x000428a0
   21124:	0003dce8 	.word	0x0003dce8
   21128:	000428f8 	.word	0x000428f8

0002112c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>:
   2112c:	e92d4030 	push	{r4, r5, lr}
   21130:	e5d13000 	ldrb	r3, [r1]
   21134:	e24dd00c 	sub	sp, sp, #12
   21138:	e3530000 	cmp	r3, #0
   2113c:	0a000018 	beq	211a4 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x78>
   21140:	e1a04001 	mov	r4, r1
   21144:	e1a01002 	mov	r1, r2
   21148:	e5942004 	ldr	r2, [r4, #4]
   2114c:	e3720001 	cmn	r2, #1
   21150:	0a000010 	beq	21198 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x6c>
   21154:	e3510000 	cmp	r1, #0
   21158:	0a000015 	beq	211b4 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x88>
   2115c:	e3a02004 	mov	r2, #4
   21160:	e1a05000 	mov	r5, r0
   21164:	e08d0002 	add	r0, sp, r2
   21168:	eb002592 	bl	2a7b8 <memcpy>
   2116c:	e5d53000 	ldrb	r3, [r5]
   21170:	e3530000 	cmp	r3, #0
   21174:	0a000012 	beq	211c4 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x98>
   21178:	e59d0004 	ldr	r0, [sp, #4]
   2117c:	e5953004 	ldr	r3, [r5, #4]
   21180:	e5942004 	ldr	r2, [r4, #4]
   21184:	e0033000 	and	r3, r3, r0
   21188:	e0000002 	and	r0, r0, r2
   2118c:	e0433000 	sub	r3, r3, r0
   21190:	e16f3f13 	clz	r3, r3
   21194:	e1a032a3 	lsr	r3, r3, #5
   21198:	e1a00003 	mov	r0, r3
   2119c:	e28dd00c 	add	sp, sp, #12
   211a0:	e8bd8030 	pop	{r4, r5, pc}
   211a4:	e3a020a8 	mov	r2, #168	; 0xa8
   211a8:	e59f1024 	ldr	r1, [pc, #36]	; 211d4 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   211ac:	e59f0024 	ldr	r0, [pc, #36]	; 211d8 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xac>
   211b0:	eb000d5f 	bl	24734 <assertion_failed>
   211b4:	e3a020c1 	mov	r2, #193	; 0xc1
   211b8:	e59f1014 	ldr	r1, [pc, #20]	; 211d4 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   211bc:	e59f0018 	ldr	r0, [pc, #24]	; 211dc <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xb0>
   211c0:	eb000d5b 	bl	24734 <assertion_failed>
   211c4:	e3a020c5 	mov	r2, #197	; 0xc5
   211c8:	e59f1004 	ldr	r1, [pc, #4]	; 211d4 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   211cc:	e59f0004 	ldr	r0, [pc, #4]	; 211d8 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xac>
   211d0:	eb000d57 	bl	24734 <assertion_failed>
   211d4:	000428a0 	.word	0x000428a0
   211d8:	0003dce8 	.word	0x0003dce8
   211dc:	00042914 	.word	0x00042914

000211e0 <CNetQueue::CNetQueue()>:
   211e0:	e3a02000 	mov	r2, #0
   211e4:	e5802000 	str	r2, [r0]
   211e8:	e5802004 	str	r2, [r0, #4]
   211ec:	e5802008 	str	r2, [r0, #8]
   211f0:	e12fff1e 	bx	lr

000211f4 <CNetQueue::IsEmpty() const>:
   211f4:	e5900000 	ldr	r0, [r0]
   211f8:	e16f0f10 	clz	r0, r0
   211fc:	e1a002a0 	lsr	r0, r0, #5
   21200:	e12fff1e 	bx	lr

00021204 <CNetQueue::Flush()>:
   21204:	e92d4070 	push	{r4, r5, r6, lr}
   21208:	e5904000 	ldr	r4, [r0]
   2120c:	e3540000 	cmp	r4, #0
   21210:	08bd8070 	popeq	{r4, r5, r6, pc}
   21214:	e1a05000 	mov	r5, r0
   21218:	e3a06000 	mov	r6, #0
   2121c:	ea00000f 	b	21260 <CNetQueue::Flush()+0x5c>
   21220:	e3540000 	cmp	r4, #0
   21224:	0a000014 	beq	2127c <CNetQueue::Flush()+0x78>
   21228:	e5943004 	ldr	r3, [r4, #4]
   2122c:	e3530000 	cmp	r3, #0
   21230:	e5853000 	str	r3, [r5]
   21234:	15836000 	strne	r6, [r3]
   21238:	0a000015 	beq	21294 <CNetQueue::Flush()+0x90>
   2123c:	e5953008 	ldr	r3, [r5, #8]
   21240:	e3530000 	cmp	r3, #0
   21244:	1a000010 	bne	2128c <CNetQueue::Flush()+0x88>
   21248:	e1a00004 	mov	r0, r4
   2124c:	e3a01e65 	mov	r1, #1616	; 0x650
   21250:	eb00274c 	bl	2af88 <operator delete(void*, unsigned int)>
   21254:	e5954000 	ldr	r4, [r5]
   21258:	e3540000 	cmp	r4, #0
   2125c:	08bd8070 	popeq	{r4, r5, r6, pc}
   21260:	e5950008 	ldr	r0, [r5, #8]
   21264:	e3500000 	cmp	r0, #0
   21268:	0affffec 	beq	21220 <CNetQueue::Flush()+0x1c>
   2126c:	eb002a64 	bl	2bc04 <EnterCritical>
   21270:	e5954000 	ldr	r4, [r5]
   21274:	e3540000 	cmp	r4, #0
   21278:	1affffea 	bne	21228 <CNetQueue::Flush()+0x24>
   2127c:	e3a0203a 	mov	r2, #58	; 0x3a
   21280:	e59f102c 	ldr	r1, [pc, #44]	; 212b4 <CNetQueue::Flush()+0xb0>
   21284:	e59f002c 	ldr	r0, [pc, #44]	; 212b8 <CNetQueue::Flush()+0xb4>
   21288:	eb000d29 	bl	24734 <assertion_failed>
   2128c:	eb002a86 	bl	2bcac <LeaveCritical>
   21290:	eaffffec 	b	21248 <CNetQueue::Flush()+0x44>
   21294:	e5952004 	ldr	r2, [r5, #4]
   21298:	e1520004 	cmp	r2, r4
   2129c:	05853004 	streq	r3, [r5, #4]
   212a0:	0affffe5 	beq	2123c <CNetQueue::Flush()+0x38>
   212a4:	e3a02043 	mov	r2, #67	; 0x43
   212a8:	e59f1004 	ldr	r1, [pc, #4]	; 212b4 <CNetQueue::Flush()+0xb0>
   212ac:	e59f0008 	ldr	r0, [pc, #8]	; 212bc <CNetQueue::Flush()+0xb8>
   212b0:	eb000d1f 	bl	24734 <assertion_failed>
   212b4:	00042924 	.word	0x00042924
   212b8:	000423f0 	.word	0x000423f0
   212bc:	00042934 	.word	0x00042934

000212c0 <CNetQueue::~CNetQueue()>:
   212c0:	e92d4010 	push	{r4, lr}
   212c4:	e1a04000 	mov	r4, r0
   212c8:	ebffffcd 	bl	21204 <CNetQueue::Flush()>
   212cc:	e1a00004 	mov	r0, r4
   212d0:	e8bd8010 	pop	{r4, pc}

000212d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)>:
   212d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   212d8:	e1a05002 	mov	r5, r2
   212dc:	e1a08000 	mov	r8, r0
   212e0:	e3a00e65 	mov	r0, #1616	; 0x650
   212e4:	e1a06001 	mov	r6, r1
   212e8:	e1a07003 	mov	r7, r3
   212ec:	eb002717 	bl	2af50 <operator new(unsigned int)>
   212f0:	e3550000 	cmp	r5, #0
   212f4:	0a000026 	beq	21394 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xc0>
   212f8:	e3550d19 	cmp	r5, #1600	; 0x640
   212fc:	8a000028 	bhi	213a4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xd0>
   21300:	e3560000 	cmp	r6, #0
   21304:	e1a04000 	mov	r4, r0
   21308:	e5805008 	str	r5, [r0, #8]
   2130c:	0a000028 	beq	213b4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xe0>
   21310:	e1a02005 	mov	r2, r5
   21314:	e1a01006 	mov	r1, r6
   21318:	e280000c 	add	r0, r0, #12
   2131c:	eb002525 	bl	2a7b8 <memcpy>
   21320:	e5980008 	ldr	r0, [r8, #8]
   21324:	e584764c 	str	r7, [r4, #1612]	; 0x64c
   21328:	e3500000 	cmp	r0, #0
   2132c:	1a000012 	bne	2137c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xa8>
   21330:	e898000a 	ldm	r8, {r1, r3}
   21334:	e3a02000 	mov	r2, #0
   21338:	e1510002 	cmp	r1, r2
   2133c:	e5842004 	str	r2, [r4, #4]
   21340:	e5843000 	str	r3, [r4]
   21344:	05884000 	streq	r4, [r8]
   21348:	0a000005 	beq	21364 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x90>
   2134c:	e3530000 	cmp	r3, #0
   21350:	0a00000b 	beq	21384 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xb0>
   21354:	e5932004 	ldr	r2, [r3, #4]
   21358:	e3520000 	cmp	r2, #0
   2135c:	05834004 	streq	r4, [r3, #4]
   21360:	1a000017 	bne	213c4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xf0>
   21364:	e5983008 	ldr	r3, [r8, #8]
   21368:	e5884004 	str	r4, [r8, #4]
   2136c:	e3530000 	cmp	r3, #0
   21370:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   21374:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21378:	ea002a4b 	b	2bcac <LeaveCritical>
   2137c:	eb002a20 	bl	2bc04 <EnterCritical>
   21380:	eaffffea 	b	21330 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x5c>
   21384:	e3a02066 	mov	r2, #102	; 0x66
   21388:	e59f1044 	ldr	r1, [pc, #68]	; 213d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   2138c:	e59f0044 	ldr	r0, [pc, #68]	; 213d8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x104>
   21390:	eb000ce7 	bl	24734 <assertion_failed>
   21394:	e3a02052 	mov	r2, #82	; 0x52
   21398:	e59f1034 	ldr	r1, [pc, #52]	; 213d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   2139c:	e59f0038 	ldr	r0, [pc, #56]	; 213dc <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x108>
   213a0:	eb000ce3 	bl	24734 <assertion_failed>
   213a4:	e3a02053 	mov	r2, #83	; 0x53
   213a8:	e59f1024 	ldr	r1, [pc, #36]	; 213d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   213ac:	e59f002c 	ldr	r0, [pc, #44]	; 213e0 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x10c>
   213b0:	eb000cdf 	bl	24734 <assertion_failed>
   213b4:	e3a02056 	mov	r2, #86	; 0x56
   213b8:	e59f1014 	ldr	r1, [pc, #20]	; 213d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   213bc:	e59f0020 	ldr	r0, [pc, #32]	; 213e4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x110>
   213c0:	eb000cdb 	bl	24734 <assertion_failed>
   213c4:	e3a02067 	mov	r2, #103	; 0x67
   213c8:	e59f1004 	ldr	r1, [pc, #4]	; 213d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   213cc:	e59f0014 	ldr	r0, [pc, #20]	; 213e8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x114>
   213d0:	eb000cd7 	bl	24734 <assertion_failed>
   213d4:	00042924 	.word	0x00042924
   213d8:	00042948 	.word	0x00042948
   213dc:	00041e38 	.word	0x00041e38
   213e0:	0003fb64 	.word	0x0003fb64
   213e4:	0003ef40 	.word	0x0003ef40
   213e8:	00042958 	.word	0x00042958

000213ec <CNetQueue::Dequeue(void*, void**)>:
   213ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   213f0:	e5906000 	ldr	r6, [r0]
   213f4:	e3560000 	cmp	r6, #0
   213f8:	0a000027 	beq	2149c <CNetQueue::Dequeue(void*, void**)+0xb0>
   213fc:	e1a04000 	mov	r4, r0
   21400:	e5900008 	ldr	r0, [r0, #8]
   21404:	e1a05001 	mov	r5, r1
   21408:	e3500000 	cmp	r0, #0
   2140c:	e1a07002 	mov	r7, r2
   21410:	1a000019 	bne	2147c <CNetQueue::Dequeue(void*, void**)+0x90>
   21414:	e5963004 	ldr	r3, [r6, #4]
   21418:	e3530000 	cmp	r3, #0
   2141c:	e5843000 	str	r3, [r4]
   21420:	0a000022 	beq	214b0 <CNetQueue::Dequeue(void*, void**)+0xc4>
   21424:	e3a02000 	mov	r2, #0
   21428:	e5832000 	str	r2, [r3]
   2142c:	e5943008 	ldr	r3, [r4, #8]
   21430:	e3530000 	cmp	r3, #0
   21434:	1a00001b 	bne	214a8 <CNetQueue::Dequeue(void*, void**)+0xbc>
   21438:	e5964008 	ldr	r4, [r6, #8]
   2143c:	e3540000 	cmp	r4, #0
   21440:	0a000022 	beq	214d0 <CNetQueue::Dequeue(void*, void**)+0xe4>
   21444:	e3540d19 	cmp	r4, #1600	; 0x640
   21448:	8a000024 	bhi	214e0 <CNetQueue::Dequeue(void*, void**)+0xf4>
   2144c:	e1a02004 	mov	r2, r4
   21450:	e286100c 	add	r1, r6, #12
   21454:	e1a00005 	mov	r0, r5
   21458:	eb0024d6 	bl	2a7b8 <memcpy>
   2145c:	e3570000 	cmp	r7, #0
   21460:	1596364c 	ldrne	r3, [r6, #1612]	; 0x64c
   21464:	e1a00006 	mov	r0, r6
   21468:	e3a01e65 	mov	r1, #1616	; 0x650
   2146c:	15873000 	strne	r3, [r7]
   21470:	eb0026c4 	bl	2af88 <operator delete(void*, unsigned int)>
   21474:	e1a00004 	mov	r0, r4
   21478:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2147c:	eb0029e0 	bl	2bc04 <EnterCritical>
   21480:	e5946000 	ldr	r6, [r4]
   21484:	e3560000 	cmp	r6, #0
   21488:	1affffe1 	bne	21414 <CNetQueue::Dequeue(void*, void**)+0x28>
   2148c:	e3a02078 	mov	r2, #120	; 0x78
   21490:	e59f1058 	ldr	r1, [pc, #88]	; 214f0 <CNetQueue::Dequeue(void*, void**)+0x104>
   21494:	e59f0058 	ldr	r0, [pc, #88]	; 214f4 <CNetQueue::Dequeue(void*, void**)+0x108>
   21498:	eb000ca5 	bl	24734 <assertion_failed>
   2149c:	e1a04006 	mov	r4, r6
   214a0:	e1a00004 	mov	r0, r4
   214a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   214a8:	eb0029ff 	bl	2bcac <LeaveCritical>
   214ac:	eaffffe1 	b	21438 <CNetQueue::Dequeue(void*, void**)+0x4c>
   214b0:	e5942004 	ldr	r2, [r4, #4]
   214b4:	e1520006 	cmp	r2, r6
   214b8:	05843004 	streq	r3, [r4, #4]
   214bc:	0affffda 	beq	2142c <CNetQueue::Dequeue(void*, void**)+0x40>
   214c0:	e3a02081 	mov	r2, #129	; 0x81
   214c4:	e59f1024 	ldr	r1, [pc, #36]	; 214f0 <CNetQueue::Dequeue(void*, void**)+0x104>
   214c8:	e59f0028 	ldr	r0, [pc, #40]	; 214f8 <CNetQueue::Dequeue(void*, void**)+0x10c>
   214cc:	eb000c98 	bl	24734 <assertion_failed>
   214d0:	e3a02088 	mov	r2, #136	; 0x88
   214d4:	e59f1014 	ldr	r1, [pc, #20]	; 214f0 <CNetQueue::Dequeue(void*, void**)+0x104>
   214d8:	e59f001c 	ldr	r0, [pc, #28]	; 214fc <CNetQueue::Dequeue(void*, void**)+0x110>
   214dc:	eb000c94 	bl	24734 <assertion_failed>
   214e0:	e3a02089 	mov	r2, #137	; 0x89
   214e4:	e59f1004 	ldr	r1, [pc, #4]	; 214f0 <CNetQueue::Dequeue(void*, void**)+0x104>
   214e8:	e59f0010 	ldr	r0, [pc, #16]	; 21500 <CNetQueue::Dequeue(void*, void**)+0x114>
   214ec:	eb000c90 	bl	24734 <assertion_failed>
   214f0:	00042924 	.word	0x00042924
   214f4:	000423f0 	.word	0x000423f0
   214f8:	00042934 	.word	0x00042934
   214fc:	0004296c 	.word	0x0004296c
   21500:	00042978 	.word	0x00042978

00021504 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>:
   21504:	e92d4070 	push	{r4, r5, r6, lr}
   21508:	e1a04000 	mov	r4, r0
   2150c:	e3a06000 	mov	r6, #0
   21510:	e1a05002 	mov	r5, r2
   21514:	e1a00001 	mov	r0, r1
   21518:	e5c4600c 	strb	r6, [r4, #12]
   2151c:	e1a01004 	mov	r1, r4
   21520:	ebfffea9 	bl	20fcc <CIPAddress::CopyTo(unsigned char*) const>
   21524:	e1a00004 	mov	r0, r4
   21528:	e5c46008 	strb	r6, [r4, #8]
   2152c:	e5c45009 	strb	r5, [r4, #9]
   21530:	e8bd8070 	pop	{r4, r5, r6, pc}

00021534 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>:
   21534:	e92d4070 	push	{r4, r5, r6, lr}
   21538:	e3a0c001 	mov	ip, #1
   2153c:	e1a04000 	mov	r4, r0
   21540:	e1a06002 	mov	r6, r2
   21544:	e1a00001 	mov	r0, r1
   21548:	e5c4c00c 	strb	ip, [r4, #12]
   2154c:	e1a01004 	mov	r1, r4
   21550:	e1a05003 	mov	r5, r3
   21554:	ebfffe9c 	bl	20fcc <CIPAddress::CopyTo(unsigned char*) const>
   21558:	e1a00006 	mov	r0, r6
   2155c:	e2841004 	add	r1, r4, #4
   21560:	ebfffe99 	bl	20fcc <CIPAddress::CopyTo(unsigned char*) const>
   21564:	e3a03000 	mov	r3, #0
   21568:	e1a00004 	mov	r0, r4
   2156c:	e5c45009 	strb	r5, [r4, #9]
   21570:	e5c43008 	strb	r3, [r4, #8]
   21574:	e8bd8070 	pop	{r4, r5, r6, pc}

00021578 <CChecksumCalculator::~CChecksumCalculator()>:
   21578:	e12fff1e 	bx	lr

0002157c <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>:
   2157c:	e1a03001 	mov	r3, r1
   21580:	e1a01000 	mov	r1, r0
   21584:	e1a00003 	mov	r0, r3
   21588:	eafffe8f 	b	20fcc <CIPAddress::CopyTo(unsigned char*) const>

0002158c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>:
   2158c:	e92d4010 	push	{r4, lr}
   21590:	e1a04000 	mov	r4, r0
   21594:	e1a00001 	mov	r0, r1
   21598:	e2841004 	add	r1, r4, #4
   2159c:	ebfffe8a 	bl	20fcc <CIPAddress::CopyTo(unsigned char*) const>
   215a0:	e3a03001 	mov	r3, #1
   215a4:	e5c4300c 	strb	r3, [r4, #12]
   215a8:	e8bd8010 	pop	{r4, pc}

000215ac <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>:
   215ac:	e2503000 	subs	r3, r0, #0
   215b0:	e92d4010 	push	{r4, lr}
   215b4:	0a000011 	beq	21600 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x54>
   215b8:	e3510000 	cmp	r1, #0
   215bc:	0a000013 	beq	21610 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x64>
   215c0:	e3510001 	cmp	r1, #1
   215c4:	9a000015 	bls	21620 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x74>
   215c8:	e1a00002 	mov	r0, r2
   215cc:	e241c002 	sub	ip, r1, #2
   215d0:	e3ccc001 	bic	ip, ip, #1
   215d4:	e28cc002 	add	ip, ip, #2
   215d8:	e083c00c 	add	ip, r3, ip
   215dc:	e0d320b2 	ldrh	r2, [r3], #2
   215e0:	e153000c 	cmp	r3, ip
   215e4:	e0800002 	add	r0, r0, r2
   215e8:	1afffffb 	bne	215dc <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x30>
   215ec:	e3110001 	tst	r1, #1
   215f0:	08bd8010 	popeq	{r4, pc}
   215f4:	e5dc3000 	ldrb	r3, [ip]
   215f8:	e0800003 	add	r0, r0, r3
   215fc:	e8bd8010 	pop	{r4, pc}
   21600:	e3a02054 	mov	r2, #84	; 0x54
   21604:	e59f1020 	ldr	r1, [pc, #32]	; 2162c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x80>
   21608:	e59f0020 	ldr	r0, [pc, #32]	; 21630 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x84>
   2160c:	eb000c48 	bl	24734 <assertion_failed>
   21610:	e3a02055 	mov	r2, #85	; 0x55
   21614:	e59f1010 	ldr	r1, [pc, #16]	; 2162c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x80>
   21618:	e59f0014 	ldr	r0, [pc, #20]	; 21634 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x88>
   2161c:	eb000c44 	bl	24734 <assertion_failed>
   21620:	e1a0c003 	mov	ip, r3
   21624:	e1a00002 	mov	r0, r2
   21628:	eafffff1 	b	215f4 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x48>
   2162c:	00042998 	.word	0x00042998
   21630:	000429b0 	.word	0x000429b0
   21634:	00041e38 	.word	0x00041e38

00021638 <CChecksumCalculator::Calculate(void const*, unsigned int)>:
   21638:	e5d0c00c 	ldrb	ip, [r0, #12]
   2163c:	e92d4070 	push	{r4, r5, r6, lr}
   21640:	e35c0000 	cmp	ip, #0
   21644:	0a00001b 	beq	216b8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x80>
   21648:	e1a05001 	mov	r5, r1
   2164c:	e6bf1fb2 	rev16	r1, r2
   21650:	e1a04002 	mov	r4, r2
   21654:	e6ff2071 	uxth	r2, r1
   21658:	e1a02422 	lsr	r2, r2, #8
   2165c:	e5c0100a 	strb	r1, [r0, #10]
   21660:	e5c0200b 	strb	r2, [r0, #11]
   21664:	e3a0100c 	mov	r1, #12
   21668:	e3a02000 	mov	r2, #0
   2166c:	ebffffce 	bl	215ac <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   21670:	e3550000 	cmp	r5, #0
   21674:	e1a02000 	mov	r2, r0
   21678:	0a000012 	beq	216c8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x90>
   2167c:	e3540000 	cmp	r4, #0
   21680:	0a000014 	beq	216d8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xa0>
   21684:	e1a01004 	mov	r1, r4
   21688:	e1a00005 	mov	r0, r5
   2168c:	ebffffc6 	bl	215ac <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   21690:	e1b03820 	lsrs	r3, r0, #16
   21694:	e1a03820 	lsr	r3, r0, #16
   21698:	0a000003 	beq	216ac <CChecksumCalculator::Calculate(void const*, unsigned int)+0x74>
   2169c:	e6f30070 	uxtah	r0, r3, r0
   216a0:	e1b03820 	lsrs	r3, r0, #16
   216a4:	e3a03001 	mov	r3, #1
   216a8:	1afffffb 	bne	2169c <CChecksumCalculator::Calculate(void const*, unsigned int)+0x64>
   216ac:	e1e00000 	mvn	r0, r0
   216b0:	e6ff0070 	uxth	r0, r0
   216b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   216b8:	e3a0203c 	mov	r2, #60	; 0x3c
   216bc:	e59f1024 	ldr	r1, [pc, #36]	; 216e8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb0>
   216c0:	e59f0024 	ldr	r0, [pc, #36]	; 216ec <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb4>
   216c4:	eb000c1a 	bl	24734 <assertion_failed>
   216c8:	e3a02041 	mov	r2, #65	; 0x41
   216cc:	e59f1014 	ldr	r1, [pc, #20]	; 216e8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb0>
   216d0:	e59f0018 	ldr	r0, [pc, #24]	; 216f0 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb8>
   216d4:	eb000c16 	bl	24734 <assertion_failed>
   216d8:	e3a02042 	mov	r2, #66	; 0x42
   216dc:	e59f1004 	ldr	r1, [pc, #4]	; 216e8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb0>
   216e0:	e59f000c 	ldr	r0, [pc, #12]	; 216f4 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xbc>
   216e4:	eb000c12 	bl	24734 <assertion_failed>
   216e8:	00042998 	.word	0x00042998
   216ec:	000429c0 	.word	0x000429c0
   216f0:	0003ef40 	.word	0x0003ef40
   216f4:	00041e38 	.word	0x00041e38

000216f8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>:
   216f8:	e3500000 	cmp	r0, #0
   216fc:	e92d4010 	push	{r4, lr}
   21700:	0a00000d 	beq	2173c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x44>
   21704:	e3510000 	cmp	r1, #0
   21708:	0a00000f 	beq	2174c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x54>
   2170c:	e3a02000 	mov	r2, #0
   21710:	ebffffa5 	bl	215ac <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   21714:	e1b03820 	lsrs	r3, r0, #16
   21718:	e1a03820 	lsr	r3, r0, #16
   2171c:	0a000003 	beq	21730 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x38>
   21720:	e6f30070 	uxtah	r0, r3, r0
   21724:	e1b03820 	lsrs	r3, r0, #16
   21728:	e3a03001 	mov	r3, #1
   2172c:	1afffffb 	bne	21720 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x28>
   21730:	e1e00000 	mvn	r0, r0
   21734:	e6ff0070 	uxth	r0, r0
   21738:	e8bd8010 	pop	{r4, pc}
   2173c:	e3a0204a 	mov	r2, #74	; 0x4a
   21740:	e59f1014 	ldr	r1, [pc, #20]	; 2175c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x64>
   21744:	e59f0014 	ldr	r0, [pc, #20]	; 21760 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x68>
   21748:	eb000bf9 	bl	24734 <assertion_failed>
   2174c:	e3a0204b 	mov	r2, #75	; 0x4b
   21750:	e59f1004 	ldr	r1, [pc, #4]	; 2175c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x64>
   21754:	e59f0008 	ldr	r0, [pc, #8]	; 21764 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x6c>
   21758:	eb000bf5 	bl	24734 <assertion_failed>
   2175c:	00042998 	.word	0x00042998
   21760:	0003ef40 	.word	0x0003ef40
   21764:	00041e38 	.word	0x00041e38

00021768 <CChecksumCalculator::FoldResult(unsigned int)>:
   21768:	e1b03820 	lsrs	r3, r0, #16
   2176c:	e1a03820 	lsr	r3, r0, #16
   21770:	0a000003 	beq	21784 <CChecksumCalculator::FoldResult(unsigned int)+0x1c>
   21774:	e6f30070 	uxtah	r0, r3, r0
   21778:	e1b03820 	lsrs	r3, r0, #16
   2177c:	e3a03001 	mov	r3, #1
   21780:	1afffffb 	bne	21774 <CChecksumCalculator::FoldResult(unsigned int)+0xc>
   21784:	e6ff0070 	uxth	r0, r0
   21788:	e12fff1e 	bx	lr

0002178c <CDHCPClient::HaltNetwork() [clone .part.0]>:
   2178c:	e92d4010 	push	{r4, lr}
   21790:	e59f2008 	ldr	r2, [pc, #8]	; 217a0 <CDHCPClient::HaltNetwork() [clone .part.0]+0x14>
   21794:	e59f1008 	ldr	r1, [pc, #8]	; 217a4 <CDHCPClient::HaltNetwork() [clone .part.0]+0x18>
   21798:	e59f0008 	ldr	r0, [pc, #8]	; 217a8 <CDHCPClient::HaltNetwork() [clone .part.0]+0x1c>
   2179c:	eb000be4 	bl	24734 <assertion_failed>
   217a0:	000001ae 	.word	0x000001ae
   217a4:	000429d4 	.word	0x000429d4
   217a8:	00041db0 	.word	0x00041db0

000217ac <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>:
   217ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   217b0:	e1a04000 	mov	r4, r0
   217b4:	e1a05001 	mov	r5, r1
   217b8:	e3a01902 	mov	r1, #32768	; 0x8000
   217bc:	e1a06002 	mov	r6, r2
   217c0:	eb00099b 	bl	23e34 <CTask::CTask(unsigned int)>
   217c4:	e59f30a0 	ldr	r3, [pc, #160]	; 2186c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc0>
   217c8:	e1a00005 	mov	r0, r5
   217cc:	e5843000 	str	r3, [r4]
   217d0:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   217d4:	ebffdfac 	bl	1968c <CNetSubSystem::GetConfig()>
   217d8:	e28470e4 	add	r7, r4, #228	; 0xe4
   217dc:	e3560000 	cmp	r6, #0
   217e0:	e59f1088 	ldr	r1, [pc, #136]	; 21870 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc4>
   217e4:	e58400e0 	str	r0, [r4, #224]	; 0xe0
   217e8:	11a01006 	movne	r1, r6
   217ec:	e1a00007 	mov	r0, r7
   217f0:	eb0018ad 	bl	27aac <CString::CString(char const*)>
   217f4:	e3a02011 	mov	r2, #17
   217f8:	e1a01005 	mov	r1, r5
   217fc:	e28400f4 	add	r0, r4, #244	; 0xf4
   21800:	eb00068a 	bl	23230 <CSocket::CSocket(CNetSubSystem*, int)>
   21804:	e3a02000 	mov	r2, #0
   21808:	e59430dc 	ldr	r3, [r4, #220]	; 0xdc
   2180c:	e5c42194 	strb	r2, [r4, #404]	; 0x194
   21810:	e1530002 	cmp	r3, r2
   21814:	0a000008 	beq	2183c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0x90>
   21818:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
   2181c:	e3530000 	cmp	r3, #0
   21820:	0a000009 	beq	2184c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xa0>
   21824:	e1a00007 	mov	r0, r7
   21828:	eb0018e3 	bl	27bbc <CString::GetLength() const>
   2182c:	e350001e 	cmp	r0, #30
   21830:	8a000009 	bhi	2185c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xb0>
   21834:	e1a00004 	mov	r0, r4
   21838:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2183c:	e3a02073 	mov	r2, #115	; 0x73
   21840:	e59f102c 	ldr	r1, [pc, #44]	; 21874 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   21844:	e59f002c 	ldr	r0, [pc, #44]	; 21878 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xcc>
   21848:	eb000bb9 	bl	24734 <assertion_failed>
   2184c:	e3a02074 	mov	r2, #116	; 0x74
   21850:	e59f101c 	ldr	r1, [pc, #28]	; 21874 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   21854:	e59f0020 	ldr	r0, [pc, #32]	; 2187c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xd0>
   21858:	eb000bb5 	bl	24734 <assertion_failed>
   2185c:	e3a02076 	mov	r2, #118	; 0x76
   21860:	e59f100c 	ldr	r1, [pc, #12]	; 21874 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   21864:	e59f0014 	ldr	r0, [pc, #20]	; 21880 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xd4>
   21868:	eb000bb1 	bl	24734 <assertion_failed>
   2186c:	00042d14 	.word	0x00042d14
   21870:	00045ac0 	.word	0x00045ac0
   21874:	000429d4 	.word	0x000429d4
   21878:	00041d70 	.word	0x00041d70
   2187c:	00041db0 	.word	0x00041db0
   21880:	000429e4 	.word	0x000429e4

00021884 <CDHCPClient::IsBound() const>:
   21884:	e5d00194 	ldrb	r0, [r0, #404]	; 0x194
   21888:	e12fff1e 	bx	lr

0002188c <CDHCPClient::HaltNetwork()>:
   2188c:	e3a02000 	mov	r2, #0
   21890:	e59030e0 	ldr	r3, [r0, #224]	; 0xe0
   21894:	e5c02194 	strb	r2, [r0, #404]	; 0x194
   21898:	e1530002 	cmp	r3, r2
   2189c:	0a000001 	beq	218a8 <CDHCPClient::HaltNetwork()+0x1c>
   218a0:	e1a00003 	mov	r0, r3
   218a4:	eafffcc1 	b	20bb0 <CNetConfig::Reset()>
   218a8:	e92d4010 	push	{r4, lr}
   218ac:	ebffffb6 	bl	2178c <CDHCPClient::HaltNetwork() [clone .part.0]>

000218b0 <CDHCPClient::CheckConfig()>:
   218b0:	e92d4030 	push	{r4, r5, lr}
   218b4:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   218b8:	e1a04000 	mov	r4, r0
   218bc:	e3530000 	cmp	r3, #0
   218c0:	e24dd014 	sub	sp, sp, #20
   218c4:	0a00002a 	beq	21974 <CDHCPClient::CheckConfig()+0xc4>
   218c8:	e59021c0 	ldr	r2, [r0, #448]	; 0x1c0
   218cc:	e3520000 	cmp	r2, #0
   218d0:	0a000027 	beq	21974 <CDHCPClient::CheckConfig()+0xc4>
   218d4:	e59011c4 	ldr	r1, [r0, #452]	; 0x1c4
   218d8:	e3510000 	cmp	r1, #0
   218dc:	0a000024 	beq	21974 <CDHCPClient::CheckConfig()+0xc4>
   218e0:	e59001c8 	ldr	r0, [r0, #456]	; 0x1c8
   218e4:	e3500000 	cmp	r0, #0
   218e8:	0a000021 	beq	21974 <CDHCPClient::CheckConfig()+0xc4>
   218ec:	e0233001 	eor	r3, r3, r1
   218f0:	e1130002 	tst	r3, r2
   218f4:	1a000033 	bne	219c8 <CDHCPClient::CheckConfig()+0x118>
   218f8:	e59451cc 	ldr	r5, [r4, #460]	; 0x1cc
   218fc:	e3550000 	cmp	r5, #0
   21900:	0a00003d 	beq	219fc <CDHCPClient::CheckConfig()+0x14c>
   21904:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   21908:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   2190c:	e3520000 	cmp	r2, #0
   21910:	1a000027 	bne	219b4 <CDHCPClient::CheckConfig()+0x104>
   21914:	e3530000 	cmp	r3, #0
   21918:	01a020a5 	lsreq	r2, r5, #1
   2191c:	004531a5 	subeq	r3, r5, r5, lsr #3
   21920:	10652083 	rsbne	r2, r5, r3, lsl #1
   21924:	058421d8 	streq	r2, [r4, #472]	; 0x1d8
   21928:	058431dc 	streq	r3, [r4, #476]	; 0x1dc
   2192c:	158421d8 	strne	r2, [r4, #472]	; 0x1d8
   21930:	e1530002 	cmp	r3, r2
   21934:	21550003 	cmpcs	r5, r3
   21938:	23a00001 	movcs	r0, #1
   2193c:	2a00001a 	bcs	219ac <CDHCPClient::CheckConfig()+0xfc>
   21940:	eb001463 	bl	26ad4 <CLogger::Get()>
   21944:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   21948:	e59421dc 	ldr	r2, [r4, #476]	; 0x1dc
   2194c:	e59431d8 	ldr	r3, [r4, #472]	; 0x1d8
   21950:	e58d1008 	str	r1, [sp, #8]
   21954:	e58d2004 	str	r2, [sp, #4]
   21958:	e58d3000 	str	r3, [sp]
   2195c:	e3a02002 	mov	r2, #2
   21960:	e59f30b0 	ldr	r3, [pc, #176]	; 21a18 <CDHCPClient::CheckConfig()+0x168>
   21964:	e59f10b0 	ldr	r1, [pc, #176]	; 21a1c <CDHCPClient::CheckConfig()+0x16c>
   21968:	eb00139b 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2196c:	e3a00000 	mov	r0, #0
   21970:	ea00000d 	b	219ac <CDHCPClient::CheckConfig()+0xfc>
   21974:	eb001456 	bl	26ad4 <CLogger::Get()>
   21978:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   2197c:	e59421c0 	ldr	r2, [r4, #448]	; 0x1c0
   21980:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   21984:	e594c1c8 	ldr	ip, [r4, #456]	; 0x1c8
   21988:	e58d1008 	str	r1, [sp, #8]
   2198c:	e58d2004 	str	r2, [sp, #4]
   21990:	e58d3000 	str	r3, [sp]
   21994:	e3a02002 	mov	r2, #2
   21998:	e59f3080 	ldr	r3, [pc, #128]	; 21a20 <CDHCPClient::CheckConfig()+0x170>
   2199c:	e59f1078 	ldr	r1, [pc, #120]	; 21a1c <CDHCPClient::CheckConfig()+0x16c>
   219a0:	e58dc00c 	str	ip, [sp, #12]
   219a4:	eb00138c 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   219a8:	e3a00000 	mov	r0, #0
   219ac:	e28dd014 	add	sp, sp, #20
   219b0:	e8bd8030 	pop	{r4, r5, pc}
   219b4:	e3530000 	cmp	r3, #0
   219b8:	00453002 	subeq	r3, r5, r2
   219bc:	008230a3 	addeq	r3, r2, r3, lsr #1
   219c0:	058431dc 	streq	r3, [r4, #476]	; 0x1dc
   219c4:	eaffffd9 	b	21930 <CDHCPClient::CheckConfig()+0x80>
   219c8:	eb001441 	bl	26ad4 <CLogger::Get()>
   219cc:	e59411c0 	ldr	r1, [r4, #448]	; 0x1c0
   219d0:	e59421c4 	ldr	r2, [r4, #452]	; 0x1c4
   219d4:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   219d8:	e58d1008 	str	r1, [sp, #8]
   219dc:	e58d2004 	str	r2, [sp, #4]
   219e0:	e58d3000 	str	r3, [sp]
   219e4:	e3a02002 	mov	r2, #2
   219e8:	e59f3034 	ldr	r3, [pc, #52]	; 21a24 <CDHCPClient::CheckConfig()+0x174>
   219ec:	e59f1028 	ldr	r1, [pc, #40]	; 21a1c <CDHCPClient::CheckConfig()+0x16c>
   219f0:	eb001379 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   219f4:	e3a00000 	mov	r0, #0
   219f8:	eaffffeb 	b	219ac <CDHCPClient::CheckConfig()+0xfc>
   219fc:	eb001434 	bl	26ad4 <CLogger::Get()>
   21a00:	e3a02002 	mov	r2, #2
   21a04:	e59f301c 	ldr	r3, [pc, #28]	; 21a28 <CDHCPClient::CheckConfig()+0x178>
   21a08:	e59f100c 	ldr	r1, [pc, #12]	; 21a1c <CDHCPClient::CheckConfig()+0x16c>
   21a0c:	eb001372 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21a10:	e1a00005 	mov	r0, r5
   21a14:	eaffffe4 	b	219ac <CDHCPClient::CheckConfig()+0xfc>
   21a18:	00042a78 	.word	0x00042a78
   21a1c:	00042d20 	.word	0x00042d20
   21a20:	00042a04 	.word	0x00042a04
   21a24:	00042a34 	.word	0x00042a34
   21a28:	00042a60 	.word	0x00042a60

00021a2c <CDHCPClient::GetUnaligned(void const*)>:
   21a2c:	e3500000 	cmp	r0, #0
   21a30:	0a000001 	beq	21a3c <CDHCPClient::GetUnaligned(void const*)+0x10>
   21a34:	e5900000 	ldr	r0, [r0]
   21a38:	e12fff1e 	bx	lr
   21a3c:	e3a02e36 	mov	r2, #864	; 0x360
   21a40:	e92d4010 	push	{r4, lr}
   21a44:	e59f1004 	ldr	r1, [pc, #4]	; 21a50 <CDHCPClient::GetUnaligned(void const*)+0x24>
   21a48:	e59f0004 	ldr	r0, [pc, #4]	; 21a54 <CDHCPClient::GetUnaligned(void const*)+0x28>
   21a4c:	eb000b38 	bl	24734 <assertion_failed>
   21a50:	000429d4 	.word	0x000429d4
   21a54:	00042a98 	.word	0x00042a98

00021a58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>:
   21a58:	e92d4070 	push	{r4, r5, r6, lr}
   21a5c:	e2514000 	subs	r4, r1, #0
   21a60:	0a0000b0 	beq	21d28 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x2d0>
   21a64:	e1a06000 	mov	r6, r0
   21a68:	e0845002 	add	r5, r4, r2
   21a6c:	e2840002 	add	r0, r4, #2
   21a70:	e1550000 	cmp	r5, r0
   21a74:	38bd8070 	popcc	{r4, r5, r6, pc}
   21a78:	e5d43000 	ldrb	r3, [r4]
   21a7c:	e353003b 	cmp	r3, #59	; 0x3b
   21a80:	8a000050 	bhi	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x170>
   21a84:	e353003b 	cmp	r3, #59	; 0x3b
   21a88:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   21a8c:	ea000044 	b	21ba4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x14c>
   21a90:	00021d20 	.word	0x00021d20
   21a94:	00021cf8 	.word	0x00021cf8
   21a98:	00021ba4 	.word	0x00021ba4
   21a9c:	00021cc4 	.word	0x00021cc4
   21aa0:	00021ba4 	.word	0x00021ba4
   21aa4:	00021ba4 	.word	0x00021ba4
   21aa8:	00021c9c 	.word	0x00021c9c
   21aac:	00021ba4 	.word	0x00021ba4
   21ab0:	00021ba4 	.word	0x00021ba4
   21ab4:	00021ba4 	.word	0x00021ba4
   21ab8:	00021ba4 	.word	0x00021ba4
   21abc:	00021ba4 	.word	0x00021ba4
   21ac0:	00021ba4 	.word	0x00021ba4
   21ac4:	00021ba4 	.word	0x00021ba4
   21ac8:	00021ba4 	.word	0x00021ba4
   21acc:	00021ba4 	.word	0x00021ba4
   21ad0:	00021ba4 	.word	0x00021ba4
   21ad4:	00021ba4 	.word	0x00021ba4
   21ad8:	00021ba4 	.word	0x00021ba4
   21adc:	00021ba4 	.word	0x00021ba4
   21ae0:	00021ba4 	.word	0x00021ba4
   21ae4:	00021ba4 	.word	0x00021ba4
   21ae8:	00021ba4 	.word	0x00021ba4
   21aec:	00021ba4 	.word	0x00021ba4
   21af0:	00021ba4 	.word	0x00021ba4
   21af4:	00021ba4 	.word	0x00021ba4
   21af8:	00021ba4 	.word	0x00021ba4
   21afc:	00021ba4 	.word	0x00021ba4
   21b00:	00021ba4 	.word	0x00021ba4
   21b04:	00021ba4 	.word	0x00021ba4
   21b08:	00021ba4 	.word	0x00021ba4
   21b0c:	00021ba4 	.word	0x00021ba4
   21b10:	00021ba4 	.word	0x00021ba4
   21b14:	00021ba4 	.word	0x00021ba4
   21b18:	00021ba4 	.word	0x00021ba4
   21b1c:	00021ba4 	.word	0x00021ba4
   21b20:	00021ba4 	.word	0x00021ba4
   21b24:	00021ba4 	.word	0x00021ba4
   21b28:	00021ba4 	.word	0x00021ba4
   21b2c:	00021ba4 	.word	0x00021ba4
   21b30:	00021ba4 	.word	0x00021ba4
   21b34:	00021ba4 	.word	0x00021ba4
   21b38:	00021ba4 	.word	0x00021ba4
   21b3c:	00021ba4 	.word	0x00021ba4
   21b40:	00021ba4 	.word	0x00021ba4
   21b44:	00021ba4 	.word	0x00021ba4
   21b48:	00021ba4 	.word	0x00021ba4
   21b4c:	00021ba4 	.word	0x00021ba4
   21b50:	00021ba4 	.word	0x00021ba4
   21b54:	00021ba4 	.word	0x00021ba4
   21b58:	00021ba4 	.word	0x00021ba4
   21b5c:	00021c70 	.word	0x00021c70
   21b60:	00021c4c 	.word	0x00021c4c
   21b64:	00021c28 	.word	0x00021c28
   21b68:	00021c00 	.word	0x00021c00
   21b6c:	00021ba4 	.word	0x00021ba4
   21b70:	00021ba4 	.word	0x00021ba4
   21b74:	00021ba4 	.word	0x00021ba4
   21b78:	00021bd4 	.word	0x00021bd4
   21b7c:	00021b80 	.word	0x00021b80
   21b80:	e5d43001 	ldrb	r3, [r4, #1]
   21b84:	e3530004 	cmp	r3, #4
   21b88:	1a000006 	bne	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21b8c:	e2841006 	add	r1, r4, #6
   21b90:	e1550001 	cmp	r5, r1
   21b94:	3a000003 	bcc	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21b98:	ebffffa3 	bl	21a2c <CDHCPClient::GetUnaligned(void const*)>
   21b9c:	e6bf0f30 	rev	r0, r0
   21ba0:	e58601dc 	str	r0, [r6, #476]	; 0x1dc
   21ba4:	e5d43001 	ldrb	r3, [r4, #1]
   21ba8:	e2833002 	add	r3, r3, #2
   21bac:	e0844003 	add	r4, r4, r3
   21bb0:	e2840002 	add	r0, r4, #2
   21bb4:	e1550000 	cmp	r5, r0
   21bb8:	38bd8070 	popcc	{r4, r5, r6, pc}
   21bbc:	e5d43000 	ldrb	r3, [r4]
   21bc0:	e353003b 	cmp	r3, #59	; 0x3b
   21bc4:	9affffae 	bls	21a84 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x2c>
   21bc8:	e35300ff 	cmp	r3, #255	; 0xff
   21bcc:	08bd8070 	popeq	{r4, r5, r6, pc}
   21bd0:	eafffff3 	b	21ba4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x14c>
   21bd4:	e5d43001 	ldrb	r3, [r4, #1]
   21bd8:	e3530004 	cmp	r3, #4
   21bdc:	1afffff1 	bne	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21be0:	e2841006 	add	r1, r4, #6
   21be4:	e1550001 	cmp	r5, r1
   21be8:	3affffee 	bcc	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21bec:	ebffff8e 	bl	21a2c <CDHCPClient::GetUnaligned(void const*)>
   21bf0:	e6bf0f30 	rev	r0, r0
   21bf4:	e58601d8 	str	r0, [r6, #472]	; 0x1d8
   21bf8:	e5d43001 	ldrb	r3, [r4, #1]
   21bfc:	eaffffe9 	b	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c00:	e5d43001 	ldrb	r3, [r4, #1]
   21c04:	e3530004 	cmp	r3, #4
   21c08:	1affffe6 	bne	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c0c:	e2841006 	add	r1, r4, #6
   21c10:	e1550001 	cmp	r5, r1
   21c14:	3affffe3 	bcc	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c18:	ebffff83 	bl	21a2c <CDHCPClient::GetUnaligned(void const*)>
   21c1c:	e58601d4 	str	r0, [r6, #468]	; 0x1d4
   21c20:	e5d43001 	ldrb	r3, [r4, #1]
   21c24:	eaffffdf 	b	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c28:	e5d43001 	ldrb	r3, [r4, #1]
   21c2c:	e3530001 	cmp	r3, #1
   21c30:	1affffdc 	bne	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c34:	e2842003 	add	r2, r4, #3
   21c38:	e1550002 	cmp	r5, r2
   21c3c:	25d43002 	ldrbcs	r3, [r4, #2]
   21c40:	25c631d1 	strbcs	r3, [r6, #465]	; 0x1d1
   21c44:	25d43001 	ldrbcs	r3, [r4, #1]
   21c48:	eaffffd6 	b	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c4c:	e5d43001 	ldrb	r3, [r4, #1]
   21c50:	e3530001 	cmp	r3, #1
   21c54:	1affffd3 	bne	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c58:	e2842003 	add	r2, r4, #3
   21c5c:	e1550002 	cmp	r5, r2
   21c60:	25d43002 	ldrbcs	r3, [r4, #2]
   21c64:	25c631d0 	strbcs	r3, [r6, #464]	; 0x1d0
   21c68:	25d43001 	ldrbcs	r3, [r4, #1]
   21c6c:	eaffffcd 	b	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c70:	e5d43001 	ldrb	r3, [r4, #1]
   21c74:	e3530004 	cmp	r3, #4
   21c78:	1affffca 	bne	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c7c:	e2841006 	add	r1, r4, #6
   21c80:	e1550001 	cmp	r5, r1
   21c84:	3affffc7 	bcc	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c88:	ebffff67 	bl	21a2c <CDHCPClient::GetUnaligned(void const*)>
   21c8c:	e6bf0f30 	rev	r0, r0
   21c90:	e58601cc 	str	r0, [r6, #460]	; 0x1cc
   21c94:	e5d43001 	ldrb	r3, [r4, #1]
   21c98:	eaffffc2 	b	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21c9c:	e5d43001 	ldrb	r3, [r4, #1]
   21ca0:	e3530003 	cmp	r3, #3
   21ca4:	9affffbf 	bls	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21ca8:	e2841006 	add	r1, r4, #6
   21cac:	e1550001 	cmp	r5, r1
   21cb0:	3affffbc 	bcc	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21cb4:	ebffff5c 	bl	21a2c <CDHCPClient::GetUnaligned(void const*)>
   21cb8:	e58601c8 	str	r0, [r6, #456]	; 0x1c8
   21cbc:	e5d43001 	ldrb	r3, [r4, #1]
   21cc0:	eaffffb8 	b	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21cc4:	e5d43001 	ldrb	r3, [r4, #1]
   21cc8:	e3530003 	cmp	r3, #3
   21ccc:	9affffb5 	bls	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21cd0:	e2841006 	add	r1, r4, #6
   21cd4:	e1550001 	cmp	r5, r1
   21cd8:	3affffb2 	bcc	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21cdc:	e59611c4 	ldr	r1, [r6, #452]	; 0x1c4
   21ce0:	e3510000 	cmp	r1, #0
   21ce4:	1affffaf 	bne	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21ce8:	ebffff4f 	bl	21a2c <CDHCPClient::GetUnaligned(void const*)>
   21cec:	e58601c4 	str	r0, [r6, #452]	; 0x1c4
   21cf0:	e5d43001 	ldrb	r3, [r4, #1]
   21cf4:	eaffffab 	b	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21cf8:	e5d43001 	ldrb	r3, [r4, #1]
   21cfc:	e3530004 	cmp	r3, #4
   21d00:	1affffa8 	bne	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21d04:	e2841006 	add	r1, r4, #6
   21d08:	e1550001 	cmp	r5, r1
   21d0c:	3affffa5 	bcc	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21d10:	ebffff45 	bl	21a2c <CDHCPClient::GetUnaligned(void const*)>
   21d14:	e58601c0 	str	r0, [r6, #448]	; 0x1c0
   21d18:	e5d43001 	ldrb	r3, [r4, #1]
   21d1c:	eaffffa1 	b	21ba8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x150>
   21d20:	e2844001 	add	r4, r4, #1
   21d24:	eaffffa1 	b	21bb0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x158>
   21d28:	e59f2008 	ldr	r2, [pc, #8]	; 21d38 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x2e0>
   21d2c:	e59f1008 	ldr	r1, [pc, #8]	; 21d3c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x2e4>
   21d30:	e59f0008 	ldr	r0, [pc, #8]	; 21d40 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x2e8>
   21d34:	eb000a7e 	bl	24734 <assertion_failed>
   21d38:	000002ad 	.word	0x000002ad
   21d3c:	000429d4 	.word	0x000429d4
   21d40:	00042aa4 	.word	0x00042aa4

00021d44 <CDHCPClient::GetXID() const>:
   21d44:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   21d48:	e92d4010 	push	{r4, lr}
   21d4c:	e3500000 	cmp	r0, #0
   21d50:	0a00000b 	beq	21d84 <CDHCPClient::GetXID() const+0x40>
   21d54:	ebffde4e 	bl	19694 <CNetSubSystem::GetNetDeviceLayer()>
   21d58:	ebffe7de 	bl	1bcd8 <CNetDeviceLayer::GetMACAddress() const>
   21d5c:	eb0023d5 	bl	2acb8 <CMACAddress::Get() const>
   21d60:	e2504000 	subs	r4, r0, #0
   21d64:	0a00000a 	beq	21d94 <CDHCPClient::GetXID() const+0x50>
   21d68:	eb00203d 	bl	29e64 <CTimer::Get()>
   21d6c:	e2840002 	add	r0, r4, #2
   21d70:	ebffff2d 	bl	21a2c <CDHCPClient::GetUnaligned(void const*)>
   21d74:	e1a04000 	mov	r4, r0
   21d78:	eb001d80 	bl	29380 <CTimer::GetClockTicks()>
   21d7c:	e0840000 	add	r0, r4, r0
   21d80:	e8bd8010 	pop	{r4, pc}
   21d84:	e59f2018 	ldr	r2, [pc, #24]	; 21da4 <CDHCPClient::GetXID() const+0x60>
   21d88:	e59f1018 	ldr	r1, [pc, #24]	; 21da8 <CDHCPClient::GetXID() const+0x64>
   21d8c:	e59f0018 	ldr	r0, [pc, #24]	; 21dac <CDHCPClient::GetXID() const+0x68>
   21d90:	eb000a67 	bl	24734 <assertion_failed>
   21d94:	e3a02fd6 	mov	r2, #856	; 0x358
   21d98:	e59f1008 	ldr	r1, [pc, #8]	; 21da8 <CDHCPClient::GetXID() const+0x64>
   21d9c:	e59f000c 	ldr	r0, [pc, #12]	; 21db0 <CDHCPClient::GetXID() const+0x6c>
   21da0:	eb000a63 	bl	24734 <assertion_failed>
   21da4:	00000356 	.word	0x00000356
   21da8:	000429d4 	.word	0x000429d4
   21dac:	00041d70 	.word	0x00041d70
   21db0:	00042120 	.word	0x00042120

00021db4 <CDHCPClient::SetUnaligned(void*, unsigned int)>:
   21db4:	e3500000 	cmp	r0, #0
   21db8:	0a000007 	beq	21ddc <CDHCPClient::SetUnaligned(void*, unsigned int)+0x28>
   21dbc:	e1a0c421 	lsr	ip, r1, #8
   21dc0:	e1a02821 	lsr	r2, r1, #16
   21dc4:	e1a03c21 	lsr	r3, r1, #24
   21dc8:	e5c01000 	strb	r1, [r0]
   21dcc:	e5c0c001 	strb	ip, [r0, #1]
   21dd0:	e5c02002 	strb	r2, [r0, #2]
   21dd4:	e5c03003 	strb	r3, [r0, #3]
   21dd8:	e12fff1e 	bx	lr
   21ddc:	e92d4010 	push	{r4, lr}
   21de0:	e59f2008 	ldr	r2, [pc, #8]	; 21df0 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x3c>
   21de4:	e59f1008 	ldr	r1, [pc, #8]	; 21df4 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x40>
   21de8:	e59f0008 	ldr	r0, [pc, #8]	; 21df8 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x44>
   21dec:	eb000a50 	bl	24734 <assertion_failed>
   21df0:	0000036d 	.word	0x0000036d
   21df4:	000429d4 	.word	0x000429d4
   21df8:	00042a98 	.word	0x00042a98

00021dfc <CDHCPClient::~CDHCPClient()>:
   21dfc:	e3a02000 	mov	r2, #0
   21e00:	e92d4010 	push	{r4, lr}
   21e04:	e1a04000 	mov	r4, r0
   21e08:	e59f3024 	ldr	r3, [pc, #36]	; 21e34 <CDHCPClient::~CDHCPClient()+0x38>
   21e0c:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   21e10:	e5803000 	str	r3, [r0]
   21e14:	e28000f4 	add	r0, r0, #244	; 0xf4
   21e18:	eb0003d9 	bl	22d84 <CSocket::~CSocket()>
   21e1c:	e28400e4 	add	r0, r4, #228	; 0xe4
   21e20:	eb0016e8 	bl	279c8 <CString::~CString()>
   21e24:	e1a00004 	mov	r0, r4
   21e28:	eb0007b0 	bl	23cf0 <CTask::~CTask()>
   21e2c:	e1a00004 	mov	r0, r4
   21e30:	e8bd8010 	pop	{r4, pc}
   21e34:	00042d14 	.word	0x00042d14

00021e38 <CDHCPClient::~CDHCPClient()>:
   21e38:	e92d4010 	push	{r4, lr}
   21e3c:	e1a04000 	mov	r4, r0
   21e40:	ebffffed 	bl	21dfc <CDHCPClient::~CDHCPClient()>
   21e44:	e1a00004 	mov	r0, r4
   21e48:	e3a01e1e 	mov	r1, #480	; 0x1e0
   21e4c:	eb00244d 	bl	2af88 <operator delete(void*, unsigned int)>
   21e50:	e1a00004 	mov	r0, r4
   21e54:	e8bd8010 	pop	{r4, pc}

00021e58 <CDHCPClient::ReceiveMessage()>:
   21e58:	e92d4070 	push	{r4, r5, r6, lr}
   21e5c:	e24dde23 	sub	sp, sp, #560	; 0x230
   21e60:	e1a04000 	mov	r4, r0
   21e64:	e3a03040 	mov	r3, #64	; 0x40
   21e68:	e3a02f89 	mov	r2, #548	; 0x224
   21e6c:	e28000f4 	add	r0, r0, #244	; 0xf4
   21e70:	e28d100c 	add	r1, sp, #12
   21e74:	eb000468 	bl	2301c <CSocket::Receive(void*, unsigned int, int)>
   21e78:	e35000ef 	cmp	r0, #239	; 0xef
   21e7c:	da000002 	ble	21e8c <CDHCPClient::ReceiveMessage()+0x34>
   21e80:	e5dd300c 	ldrb	r3, [sp, #12]
   21e84:	e3530002 	cmp	r3, #2
   21e88:	0a000003 	beq	21e9c <CDHCPClient::ReceiveMessage()+0x44>
   21e8c:	e3a04000 	mov	r4, #0
   21e90:	e1a00004 	mov	r0, r4
   21e94:	e28dde23 	add	sp, sp, #560	; 0x230
   21e98:	e8bd8070 	pop	{r4, r5, r6, pc}
   21e9c:	e5dd300d 	ldrb	r3, [sp, #13]
   21ea0:	e3530001 	cmp	r3, #1
   21ea4:	1afffff8 	bne	21e8c <CDHCPClient::ReceiveMessage()+0x34>
   21ea8:	e5dd300e 	ldrb	r3, [sp, #14]
   21eac:	e3530006 	cmp	r3, #6
   21eb0:	1afffff5 	bne	21e8c <CDHCPClient::ReceiveMessage()+0x34>
   21eb4:	e59d2010 	ldr	r2, [sp, #16]
   21eb8:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
   21ebc:	e1520003 	cmp	r2, r3
   21ec0:	1afffff1 	bne	21e8c <CDHCPClient::ReceiveMessage()+0x34>
   21ec4:	e59f3114 	ldr	r3, [pc, #276]	; 21fe0 <CDHCPClient::ReceiveMessage()+0x188>
   21ec8:	e59d20f8 	ldr	r2, [sp, #248]	; 0xf8
   21ecc:	e1520003 	cmp	r2, r3
   21ed0:	1affffed 	bne	21e8c <CDHCPClient::ReceiveMessage()+0x34>
   21ed4:	e1a05000 	mov	r5, r0
   21ed8:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   21edc:	e3500000 	cmp	r0, #0
   21ee0:	0a000030 	beq	21fa8 <CDHCPClient::ReceiveMessage()+0x150>
   21ee4:	ebffddea 	bl	19694 <CNetSubSystem::GetNetDeviceLayer()>
   21ee8:	ebffe77a 	bl	1bcd8 <CNetDeviceLayer::GetMACAddress() const>
   21eec:	e2506000 	subs	r6, r0, #0
   21ef0:	0a000036 	beq	21fd0 <CDHCPClient::ReceiveMessage()+0x178>
   21ef4:	e28d1028 	add	r1, sp, #40	; 0x28
   21ef8:	e28d0004 	add	r0, sp, #4
   21efc:	eb00235f 	bl	2ac80 <CMACAddress::CMACAddress(unsigned char const*)>
   21f00:	e1a01006 	mov	r1, r6
   21f04:	e28d0004 	add	r0, sp, #4
   21f08:	eb002347 	bl	2ac2c <CMACAddress::operator!=(CMACAddress const&) const>
   21f0c:	e3500000 	cmp	r0, #0
   21f10:	13a04000 	movne	r4, #0
   21f14:	1a000016 	bne	21f74 <CDHCPClient::ReceiveMessage()+0x11c>
   21f18:	e59d101c 	ldr	r1, [sp, #28]
   21f1c:	e2843e1d 	add	r3, r4, #464	; 0x1d0
   21f20:	e58401c0 	str	r0, [r4, #448]	; 0x1c0
   21f24:	e58401c4 	str	r0, [r4, #452]	; 0x1c4
   21f28:	e58401c8 	str	r0, [r4, #456]	; 0x1c8
   21f2c:	e58401cc 	str	r0, [r4, #460]	; 0x1cc
   21f30:	e58411bc 	str	r1, [r4, #444]	; 0x1bc
   21f34:	e24520f0 	sub	r2, r5, #240	; 0xf0
   21f38:	e1c300b0 	strh	r0, [r3]
   21f3c:	e28d10fc 	add	r1, sp, #252	; 0xfc
   21f40:	e58401d4 	str	r0, [r4, #468]	; 0x1d4
   21f44:	e58401d8 	str	r0, [r4, #472]	; 0x1d8
   21f48:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
   21f4c:	e1a00004 	mov	r0, r4
   21f50:	ebfffec0 	bl	21a58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21f54:	e5d431d0 	ldrb	r3, [r4, #464]	; 0x1d0
   21f58:	e3530002 	cmp	r3, #2
   21f5c:	0a00000b 	beq	21f90 <CDHCPClient::ReceiveMessage()+0x138>
   21f60:	e3530003 	cmp	r3, #3
   21f64:	0a000005 	beq	21f80 <CDHCPClient::ReceiveMessage()+0x128>
   21f68:	e3530001 	cmp	r3, #1
   21f6c:	13a04001 	movne	r4, #1
   21f70:	0a000010 	beq	21fb8 <CDHCPClient::ReceiveMessage()+0x160>
   21f74:	e28d0004 	add	r0, sp, #4
   21f78:	eb002312 	bl	2abc8 <CMACAddress::~CMACAddress()>
   21f7c:	eaffffc3 	b	21e90 <CDHCPClient::ReceiveMessage()+0x38>
   21f80:	e3a02080 	mov	r2, #128	; 0x80
   21f84:	e1a00004 	mov	r0, r4
   21f88:	e28d1078 	add	r1, sp, #120	; 0x78
   21f8c:	ebfffeb1 	bl	21a58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21f90:	e1a00004 	mov	r0, r4
   21f94:	e3a02040 	mov	r2, #64	; 0x40
   21f98:	e28d1038 	add	r1, sp, #56	; 0x38
   21f9c:	ebfffead 	bl	21a58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21fa0:	e3a04001 	mov	r4, #1
   21fa4:	eafffff2 	b	21f74 <CDHCPClient::ReceiveMessage()+0x11c>
   21fa8:	e59f2034 	ldr	r2, [pc, #52]	; 21fe4 <CDHCPClient::ReceiveMessage()+0x18c>
   21fac:	e59f1034 	ldr	r1, [pc, #52]	; 21fe8 <CDHCPClient::ReceiveMessage()+0x190>
   21fb0:	e59f0034 	ldr	r0, [pc, #52]	; 21fec <CDHCPClient::ReceiveMessage()+0x194>
   21fb4:	eb0009de 	bl	24734 <assertion_failed>
   21fb8:	e1a00004 	mov	r0, r4
   21fbc:	e3a02080 	mov	r2, #128	; 0x80
   21fc0:	e28d1078 	add	r1, sp, #120	; 0x78
   21fc4:	e1a04003 	mov	r4, r3
   21fc8:	ebfffea2 	bl	21a58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21fcc:	eaffffe8 	b	21f74 <CDHCPClient::ReceiveMessage()+0x11c>
   21fd0:	e59f2018 	ldr	r2, [pc, #24]	; 21ff0 <CDHCPClient::ReceiveMessage()+0x198>
   21fd4:	e59f100c 	ldr	r1, [pc, #12]	; 21fe8 <CDHCPClient::ReceiveMessage()+0x190>
   21fd8:	e59f0014 	ldr	r0, [pc, #20]	; 21ff4 <CDHCPClient::ReceiveMessage()+0x19c>
   21fdc:	eb0009d4 	bl	24734 <assertion_failed>
   21fe0:	63538263 	.word	0x63538263
   21fe4:	0000027b 	.word	0x0000027b
   21fe8:	000429d4 	.word	0x000429d4
   21fec:	00041d70 	.word	0x00041d70
   21ff0:	0000027d 	.word	0x0000027d
   21ff4:	00041f9c 	.word	0x00041f9c

00021ff8 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>:
   21ff8:	e92d4070 	push	{r4, r5, r6, lr}
   21ffc:	e1a04000 	mov	r4, r0
   22000:	e24ddf8a 	sub	sp, sp, #552	; 0x228
   22004:	e1a05001 	mov	r5, r1
   22008:	e1a06002 	mov	r6, r2
   2200c:	e3a01000 	mov	r1, #0
   22010:	e3a02f89 	mov	r2, #548	; 0x224
   22014:	e28d0004 	add	r0, sp, #4
   22018:	eb001f9d 	bl	29e94 <memset>
   2201c:	e5d431b0 	ldrb	r3, [r4, #432]	; 0x1b0
   22020:	e3a02006 	mov	r2, #6
   22024:	e3530000 	cmp	r3, #0
   22028:	13a01080 	movne	r1, #128	; 0x80
   2202c:	03a01000 	moveq	r1, #0
   22030:	e59f30cc 	ldr	r3, [pc, #204]	; 22104 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x10c>
   22034:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   22038:	e1cd30b4 	strh	r3, [sp, #4]
   2203c:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
   22040:	e1cd10be 	strh	r1, [sp, #14]
   22044:	e58d3008 	str	r3, [sp, #8]
   22048:	e59411b8 	ldr	r1, [r4, #440]	; 0x1b8
   2204c:	e59f30b4 	ldr	r3, [pc, #180]	; 22108 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x110>
   22050:	e3500000 	cmp	r0, #0
   22054:	e58d1010 	str	r1, [sp, #16]
   22058:	e5cd2006 	strb	r2, [sp, #6]
   2205c:	e58d30f0 	str	r3, [sp, #240]	; 0xf0
   22060:	0a000017 	beq	220c4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xcc>
   22064:	ebffdd8a 	bl	19694 <CNetSubSystem::GetNetDeviceLayer()>
   22068:	ebffe71a 	bl	1bcd8 <CNetDeviceLayer::GetMACAddress() const>
   2206c:	e3500000 	cmp	r0, #0
   22070:	0a000017 	beq	220d4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xdc>
   22074:	e28d1020 	add	r1, sp, #32
   22078:	eb00231a 	bl	2ace8 <CMACAddress::CopyTo(unsigned char*) const>
   2207c:	e3550000 	cmp	r5, #0
   22080:	0a000017 	beq	220e4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xec>
   22084:	e3560f4d 	cmp	r6, #308	; 0x134
   22088:	8a000019 	bhi	220f4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xfc>
   2208c:	e1a02006 	mov	r2, r6
   22090:	e1a01005 	mov	r1, r5
   22094:	e28d00f4 	add	r0, sp, #244	; 0xf4
   22098:	eb0021c6 	bl	2a7b8 <memcpy>
   2209c:	e3a03000 	mov	r3, #0
   220a0:	e3a02f89 	mov	r2, #548	; 0x224
   220a4:	e28d1004 	add	r1, sp, #4
   220a8:	e28400f4 	add	r0, r4, #244	; 0xf4
   220ac:	eb0003bc 	bl	22fa4 <CSocket::Send(void const*, unsigned int, int)>
   220b0:	e2400f89 	sub	r0, r0, #548	; 0x224
   220b4:	e16f0f10 	clz	r0, r0
   220b8:	e1a002a0 	lsr	r0, r0, #5
   220bc:	e28ddf8a 	add	sp, sp, #552	; 0x228
   220c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   220c4:	e3a02f96 	mov	r2, #600	; 0x258
   220c8:	e59f103c 	ldr	r1, [pc, #60]	; 2210c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   220cc:	e59f003c 	ldr	r0, [pc, #60]	; 22110 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x118>
   220d0:	eb000997 	bl	24734 <assertion_failed>
   220d4:	e59f2038 	ldr	r2, [pc, #56]	; 22114 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x11c>
   220d8:	e59f102c 	ldr	r1, [pc, #44]	; 2210c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   220dc:	e59f0034 	ldr	r0, [pc, #52]	; 22118 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x120>
   220e0:	eb000993 	bl	24734 <assertion_failed>
   220e4:	e59f2030 	ldr	r2, [pc, #48]	; 2211c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x124>
   220e8:	e59f101c 	ldr	r1, [pc, #28]	; 2210c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   220ec:	e59f002c 	ldr	r0, [pc, #44]	; 22120 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x128>
   220f0:	eb00098f 	bl	24734 <assertion_failed>
   220f4:	e59f2028 	ldr	r2, [pc, #40]	; 22124 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x12c>
   220f8:	e59f100c 	ldr	r1, [pc, #12]	; 2210c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   220fc:	e59f0024 	ldr	r0, [pc, #36]	; 22128 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x130>
   22100:	eb00098b 	bl	24734 <assertion_failed>
   22104:	00000101 	.word	0x00000101
   22108:	63538263 	.word	0x63538263
   2210c:	000429d4 	.word	0x000429d4
   22110:	00041d70 	.word	0x00041d70
   22114:	0000025a 	.word	0x0000025a
   22118:	00042120 	.word	0x00042120
   2211c:	0000025d 	.word	0x0000025d
   22120:	00042aa4 	.word	0x00042aa4
   22124:	0000025e 	.word	0x0000025e
   22128:	00042ab4 	.word	0x00042ab4

0002212c <CDHCPClient::SendDiscover()>:
   2212c:	e3a01000 	mov	r1, #0
   22130:	e3a0200c 	mov	r2, #12
   22134:	e58011b8 	str	r1, [r0, #440]	; 0x1b8
   22138:	e59f1000 	ldr	r1, [pc]	; 22140 <CDHCPClient::SendDiscover()+0x14>
   2213c:	eaffffad 	b	21ff8 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   22140:	00042d28 	.word	0x00042d28

00022144 <CDHCPClient::SendRequest(unsigned int)>:
   22144:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22148:	e3510000 	cmp	r1, #0
   2214c:	e1a07000 	mov	r7, r0
   22150:	e28db01c 	add	fp, sp, #28
   22154:	e58011b8 	str	r1, [r0, #440]	; 0x1b8
   22158:	1a000036 	bne	22238 <CDHCPClient::SendRequest(unsigned int)+0xf4>
   2215c:	e59f1108 	ldr	r1, [pc, #264]	; 2226c <CDHCPClient::SendRequest(unsigned int)+0x128>
   22160:	e3a06018 	mov	r6, #24
   22164:	e1a05001 	mov	r5, r1
   22168:	e59021a0 	ldr	r2, [r0, #416]	; 0x1a0
   2216c:	e590319c 	ldr	r3, [r0, #412]	; 0x19c
   22170:	e1a00422 	lsr	r0, r2, #8
   22174:	e1a04822 	lsr	r4, r2, #16
   22178:	e1a0ec22 	lsr	lr, r2, #24
   2217c:	e5c10006 	strb	r0, [r1, #6]
   22180:	e1a0c423 	lsr	ip, r3, #8
   22184:	e5c12005 	strb	r2, [r1, #5]
   22188:	e1a00823 	lsr	r0, r3, #16
   2218c:	e1a02c23 	lsr	r2, r3, #24
   22190:	e5c14007 	strb	r4, [r1, #7]
   22194:	e5c1e008 	strb	lr, [r1, #8]
   22198:	e5c1300b 	strb	r3, [r1, #11]
   2219c:	e5c1c00c 	strb	ip, [r1, #12]
   221a0:	e5c1000d 	strb	r0, [r1, #13]
   221a4:	e5c1200e 	strb	r2, [r1, #14]
   221a8:	e28780e4 	add	r8, r7, #228	; 0xe4
   221ac:	e1a00008 	mov	r0, r8
   221b0:	eb001681 	bl	27bbc <CString::GetLength() const>
   221b4:	e2504000 	subs	r4, r0, #0
   221b8:	0a000021 	beq	22244 <CDHCPClient::SendRequest(unsigned int)+0x100>
   221bc:	e35400ff 	cmp	r4, #255	; 0xff
   221c0:	8a000025 	bhi	2225c <CDHCPClient::SendRequest(unsigned int)+0x118>
   221c4:	e086c004 	add	ip, r6, r4
   221c8:	e28c3009 	add	r3, ip, #9
   221cc:	e3c33007 	bic	r3, r3, #7
   221d0:	e04dd003 	sub	sp, sp, r3
   221d4:	e1a01005 	mov	r1, r5
   221d8:	e1a02006 	mov	r2, r6
   221dc:	e1a0000d 	mov	r0, sp
   221e0:	e28c9002 	add	r9, ip, #2
   221e4:	eb002173 	bl	2a7b8 <memcpy>
   221e8:	e3a0200c 	mov	r2, #12
   221ec:	e2466001 	sub	r6, r6, #1
   221f0:	e08d3006 	add	r3, sp, r6
   221f4:	e7cd2006 	strb	r2, [sp, r6]
   221f8:	e1a00008 	mov	r0, r8
   221fc:	e5c34001 	strb	r4, [r3, #1]
   22200:	e2835002 	add	r5, r3, #2
   22204:	eb00163a 	bl	27af4 <CString::operator char const*() const>
   22208:	e1a02004 	mov	r2, r4
   2220c:	e1a01000 	mov	r1, r0
   22210:	e1a00005 	mov	r0, r5
   22214:	eb002167 	bl	2a7b8 <memcpy>
   22218:	e3e03000 	mvn	r3, #0
   2221c:	e1a02009 	mov	r2, r9
   22220:	e1a00007 	mov	r0, r7
   22224:	e1a0100d 	mov	r1, sp
   22228:	e7c53004 	strb	r3, [r5, r4]
   2222c:	ebffff71 	bl	21ff8 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   22230:	e24bd01c 	sub	sp, fp, #28
   22234:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22238:	e3a0600c 	mov	r6, #12
   2223c:	e59f502c 	ldr	r5, [pc, #44]	; 22270 <CDHCPClient::SendRequest(unsigned int)+0x12c>
   22240:	eaffffd8 	b	221a8 <CDHCPClient::SendRequest(unsigned int)+0x64>
   22244:	e1a02006 	mov	r2, r6
   22248:	e1a01005 	mov	r1, r5
   2224c:	e1a00007 	mov	r0, r7
   22250:	ebffff68 	bl	21ff8 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   22254:	e24bd01c 	sub	sp, fp, #28
   22258:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2225c:	e59f2010 	ldr	r2, [pc, #16]	; 22274 <CDHCPClient::SendRequest(unsigned int)+0x130>
   22260:	e59f1010 	ldr	r1, [pc, #16]	; 22278 <CDHCPClient::SendRequest(unsigned int)+0x134>
   22264:	e59f0010 	ldr	r0, [pc, #16]	; 2227c <CDHCPClient::SendRequest(unsigned int)+0x138>
   22268:	eb000931 	bl	24734 <assertion_failed>
   2226c:	000462e0 	.word	0x000462e0
   22270:	00042d34 	.word	0x00042d34
   22274:	00000231 	.word	0x00000231
   22278:	000429d4 	.word	0x000429d4
   2227c:	00042adc 	.word	0x00042adc

00022280 <CDHCPClient::SendAndReceive(bool, unsigned int)>:
   22280:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22284:	e1a04000 	mov	r4, r0
   22288:	e1a07001 	mov	r7, r1
   2228c:	e59f5170 	ldr	r5, [pc, #368]	; 22404 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x184>
   22290:	e24dd014 	sub	sp, sp, #20
   22294:	e59fa16c 	ldr	sl, [pc, #364]	; 22408 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x188>
   22298:	e58d200c 	str	r2, [sp, #12]
   2229c:	e245b018 	sub	fp, r5, #24
   222a0:	e2459020 	sub	r9, r5, #32
   222a4:	e3570000 	cmp	r7, #0
   222a8:	0a000040 	beq	223b0 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x130>
   222ac:	e1a00004 	mov	r0, r4
   222b0:	e59d100c 	ldr	r1, [sp, #12]
   222b4:	ebffffa2 	bl	22144 <CDHCPClient::SendRequest(unsigned int)>
   222b8:	e2200001 	eor	r0, r0, #1
   222bc:	e6ef3070 	uxtb	r3, r0
   222c0:	e3530000 	cmp	r3, #0
   222c4:	1a000041 	bne	223d0 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x150>
   222c8:	eb001ee5 	bl	29e64 <CTimer::Get()>
   222cc:	eb001c32 	bl	2939c <CTimer::GetTicks() const>
   222d0:	e1a06000 	mov	r6, r0
   222d4:	ea000004 	b	222ec <CDHCPClient::SendAndReceive(bool, unsigned int)+0x6c>
   222d8:	e2422005 	sub	r2, r2, #5
   222dc:	e3520001 	cmp	r2, #1
   222e0:	9a000017 	bls	22344 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xc4>
   222e4:	eb000866 	bl	24484 <CScheduler::Get()>
   222e8:	eb0007da 	bl	24258 <CScheduler::Yield()>
   222ec:	eb001edc 	bl	29e64 <CTimer::Get()>
   222f0:	eb001c29 	bl	2939c <CTimer::GetTicks() const>
   222f4:	e5953000 	ldr	r3, [r5]
   222f8:	e0400006 	sub	r0, r0, r6
   222fc:	e1500003 	cmp	r0, r3
   22300:	2a000012 	bcs	22350 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xd0>
   22304:	e1a00004 	mov	r0, r4
   22308:	ebfffed2 	bl	21e58 <CDHCPClient::ReceiveMessage()>
   2230c:	e2508000 	subs	r8, r0, #0
   22310:	0afffff3 	beq	222e4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22314:	e3570000 	cmp	r7, #0
   22318:	e5d421d1 	ldrb	r2, [r4, #465]	; 0x1d1
   2231c:	1affffed 	bne	222d8 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x58>
   22320:	e3520002 	cmp	r2, #2
   22324:	1affffee 	bne	222e4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22328:	e1a00004 	mov	r0, r4
   2232c:	ebfffd5f 	bl	218b0 <CDHCPClient::CheckConfig()>
   22330:	e3500000 	cmp	r0, #0
   22334:	0affffea 	beq	222e4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22338:	e59421d4 	ldr	r2, [r4, #468]	; 0x1d4
   2233c:	e3520000 	cmp	r2, #0
   22340:	0affffe7 	beq	222e4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22344:	e1a00008 	mov	r0, r8
   22348:	e28dd014 	add	sp, sp, #20
   2234c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22350:	eb0011df 	bl	26ad4 <CLogger::Get()>
   22354:	e1a0300a 	mov	r3, sl
   22358:	e3a02002 	mov	r2, #2
   2235c:	e1a01009 	mov	r1, r9
   22360:	eb00111d 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22364:	e59f30a0 	ldr	r3, [pc, #160]	; 2240c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x18c>
   22368:	e2855004 	add	r5, r5, #4
   2236c:	e1530005 	cmp	r3, r5
   22370:	1affffcb 	bne	222a4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x24>
   22374:	eb0011d6 	bl	26ad4 <CLogger::Get()>
   22378:	e59f2090 	ldr	r2, [pc, #144]	; 22410 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x190>
   2237c:	e59f1090 	ldr	r1, [pc, #144]	; 22414 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x194>
   22380:	e3570000 	cmp	r7, #0
   22384:	11a07002 	movne	r7, r2
   22388:	01a07001 	moveq	r7, r1
   2238c:	e3a08000 	mov	r8, #0
   22390:	e3a02002 	mov	r2, #2
   22394:	e59f307c 	ldr	r3, [pc, #124]	; 22418 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x198>
   22398:	e59f107c 	ldr	r1, [pc, #124]	; 2241c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x19c>
   2239c:	e58d7000 	str	r7, [sp]
   223a0:	eb00110d 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   223a4:	e1a00008 	mov	r0, r8
   223a8:	e28dd014 	add	sp, sp, #20
   223ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223b0:	e3a0200c 	mov	r2, #12
   223b4:	e1a0100b 	mov	r1, fp
   223b8:	e1a00004 	mov	r0, r4
   223bc:	e58471b8 	str	r7, [r4, #440]	; 0x1b8
   223c0:	ebffff0c 	bl	21ff8 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   223c4:	e2200001 	eor	r0, r0, #1
   223c8:	e6ef3070 	uxtb	r3, r0
   223cc:	eaffffbb 	b	222c0 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x40>
   223d0:	eb0011bf 	bl	26ad4 <CLogger::Get()>
   223d4:	e59f2044 	ldr	r2, [pc, #68]	; 22420 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a0>
   223d8:	e59f1044 	ldr	r1, [pc, #68]	; 22424 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a4>
   223dc:	e3570000 	cmp	r7, #0
   223e0:	11a07002 	movne	r7, r2
   223e4:	01a07001 	moveq	r7, r1
   223e8:	e3a02001 	mov	r2, #1
   223ec:	e59f3034 	ldr	r3, [pc, #52]	; 22428 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a8>
   223f0:	e59f1024 	ldr	r1, [pc, #36]	; 2241c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x19c>
   223f4:	e58d7000 	str	r7, [sp]
   223f8:	eb0010f7 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   223fc:	e3a08000 	mov	r8, #0
   22400:	eaffffcf 	b	22344 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xc4>
   22404:	00042d40 	.word	0x00042d40
   22408:	00042b28 	.word	0x00042b28
   2240c:	00042d50 	.word	0x00042d50
   22410:	00042b04 	.word	0x00042b04
   22414:	00042b10 	.word	0x00042b10
   22418:	00042b4c 	.word	0x00042b4c
   2241c:	00042d20 	.word	0x00042d20
   22420:	00042af0 	.word	0x00042af0
   22424:	00042af8 	.word	0x00042af8
   22428:	00042b18 	.word	0x00042b18

0002242c <CDHCPClient::SelectAndRequest()>:
   2242c:	e92d4070 	push	{r4, r5, r6, lr}
   22430:	e3a06001 	mov	r6, #1
   22434:	e1a04000 	mov	r4, r0
   22438:	e24dd028 	sub	sp, sp, #40	; 0x28
   2243c:	e5c061b0 	strb	r6, [r0, #432]	; 0x1b0
   22440:	e28d0008 	add	r0, sp, #8
   22444:	ebfffa18 	bl	20cac <CIPAddress::CIPAddress()>
   22448:	e28450f4 	add	r5, r4, #244	; 0xf4
   2244c:	e28d0008 	add	r0, sp, #8
   22450:	ebfffac0 	bl	20f58 <CIPAddress::SetBroadcast()>
   22454:	e1a00005 	mov	r0, r5
   22458:	e3a02043 	mov	r2, #67	; 0x43
   2245c:	e28d1008 	add	r1, sp, #8
   22460:	eb0001d5 	bl	22bbc <CSocket::Connect(CIPAddress&, unsigned short)>
   22464:	e3500000 	cmp	r0, #0
   22468:	ba000066 	blt	22608 <CDHCPClient::SelectAndRequest()+0x1dc>
   2246c:	e1a00005 	mov	r0, r5
   22470:	e1a01006 	mov	r1, r6
   22474:	eb000346 	bl	23194 <CSocket::SetOptionBroadcast(bool)>
   22478:	e2505000 	subs	r5, r0, #0
   2247c:	1a000056 	bne	225dc <CDHCPClient::SelectAndRequest()+0x1b0>
   22480:	e1a00004 	mov	r0, r4
   22484:	ebfffe2e 	bl	21d44 <CDHCPClient::GetXID() const>
   22488:	e1a02005 	mov	r2, r5
   2248c:	e58401b4 	str	r0, [r4, #436]	; 0x1b4
   22490:	e1a01005 	mov	r1, r5
   22494:	e1a00004 	mov	r0, r4
   22498:	ebffff78 	bl	22280 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   2249c:	e3500000 	cmp	r0, #0
   224a0:	0a000061 	beq	2262c <CDHCPClient::SelectAndRequest()+0x200>
   224a4:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   224a8:	e3530000 	cmp	r3, #0
   224ac:	e584319c 	str	r3, [r4, #412]	; 0x19c
   224b0:	0a000068 	beq	22658 <CDHCPClient::SelectAndRequest()+0x22c>
   224b4:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   224b8:	e3530000 	cmp	r3, #0
   224bc:	e58431a0 	str	r3, [r4, #416]	; 0x1a0
   224c0:	0a00006f 	beq	22684 <CDHCPClient::SelectAndRequest()+0x258>
   224c4:	e1a02005 	mov	r2, r5
   224c8:	e1a01006 	mov	r1, r6
   224cc:	e1a00004 	mov	r0, r4
   224d0:	ebffff6a 	bl	22280 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   224d4:	e3500000 	cmp	r0, #0
   224d8:	0a000053 	beq	2262c <CDHCPClient::SelectAndRequest()+0x200>
   224dc:	e5d431d1 	ldrb	r3, [r4, #465]	; 0x1d1
   224e0:	e3530006 	cmp	r3, #6
   224e4:	0a00006a 	beq	22694 <CDHCPClient::SelectAndRequest()+0x268>
   224e8:	e1a00004 	mov	r0, r4
   224ec:	ebfffcef 	bl	218b0 <CDHCPClient::CheckConfig()>
   224f0:	e3500000 	cmp	r0, #0
   224f4:	0a00004e 	beq	22634 <CDHCPClient::SelectAndRequest()+0x208>
   224f8:	e594219c 	ldr	r2, [r4, #412]	; 0x19c
   224fc:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   22500:	e1520003 	cmp	r2, r3
   22504:	1a000057 	bne	22668 <CDHCPClient::SelectAndRequest()+0x23c>
   22508:	e59421a0 	ldr	r2, [r4, #416]	; 0x1a0
   2250c:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   22510:	e1520003 	cmp	r2, r3
   22514:	1a000048 	bne	2263c <CDHCPClient::SelectAndRequest()+0x210>
   22518:	e28d0010 	add	r0, sp, #16
   2251c:	ebfff9e2 	bl	20cac <CIPAddress::CIPAddress()>
   22520:	e594119c 	ldr	r1, [r4, #412]	; 0x19c
   22524:	e28d0010 	add	r0, sp, #16
   22528:	ebfffa62 	bl	20eb8 <CIPAddress::Set(unsigned int)>
   2252c:	e28d0018 	add	r0, sp, #24
   22530:	eb001557 	bl	27a94 <CString::CString()>
   22534:	e28d1018 	add	r1, sp, #24
   22538:	e28d0010 	add	r0, sp, #16
   2253c:	ebfffad8 	bl	210a4 <CIPAddress::Format(CString*) const>
   22540:	eb001163 	bl	26ad4 <CLogger::Get()>
   22544:	e1a05000 	mov	r5, r0
   22548:	e28d0018 	add	r0, sp, #24
   2254c:	eb001568 	bl	27af4 <CString::operator char const*() const>
   22550:	e1a02000 	mov	r2, r0
   22554:	e59f3164 	ldr	r3, [pc, #356]	; 226c0 <CDHCPClient::SelectAndRequest()+0x294>
   22558:	e1a00005 	mov	r0, r5
   2255c:	e58d2000 	str	r2, [sp]
   22560:	e59f115c 	ldr	r1, [pc, #348]	; 226c4 <CDHCPClient::SelectAndRequest()+0x298>
   22564:	e3a02003 	mov	r2, #3
   22568:	eb00109b 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2256c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   22570:	e3500000 	cmp	r0, #0
   22574:	0a00004d 	beq	226b0 <CDHCPClient::SelectAndRequest()+0x284>
   22578:	e594119c 	ldr	r1, [r4, #412]	; 0x19c
   2257c:	ebfff9ae 	bl	20c3c <CNetConfig::SetIPAddress(unsigned int)>
   22580:	e59411c0 	ldr	r1, [r4, #448]	; 0x1c0
   22584:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   22588:	ebfff9b2 	bl	20c58 <CNetConfig::SetNetMask(unsigned int)>
   2258c:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   22590:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   22594:	ebfff961 	bl	20b20 <CNetConfig::SetDefaultGateway(unsigned int)>
   22598:	e59411c8 	ldr	r1, [r4, #456]	; 0x1c8
   2259c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   225a0:	ebfff960 	bl	20b28 <CNetConfig::SetDNSServer(unsigned int)>
   225a4:	e3a03001 	mov	r3, #1
   225a8:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   225ac:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   225b0:	e5c43194 	strb	r3, [r4, #404]	; 0x194
   225b4:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   225b8:	e58411a4 	str	r1, [r4, #420]	; 0x1a4
   225bc:	e58421a8 	str	r2, [r4, #424]	; 0x1a8
   225c0:	e58431ac 	str	r3, [r4, #428]	; 0x1ac
   225c4:	e28d0018 	add	r0, sp, #24
   225c8:	eb0014fe 	bl	279c8 <CString::~CString()>
   225cc:	e28d0010 	add	r0, sp, #16
   225d0:	ebfff9cb 	bl	20d04 <CIPAddress::~CIPAddress()>
   225d4:	e3a04000 	mov	r4, #0
   225d8:	ea000005 	b	225f4 <CDHCPClient::SelectAndRequest()+0x1c8>
   225dc:	eb00113c 	bl	26ad4 <CLogger::Get()>
   225e0:	e1a02006 	mov	r2, r6
   225e4:	e59f30dc 	ldr	r3, [pc, #220]	; 226c8 <CDHCPClient::SelectAndRequest()+0x29c>
   225e8:	e59f10d4 	ldr	r1, [pc, #212]	; 226c4 <CDHCPClient::SelectAndRequest()+0x298>
   225ec:	e1a04006 	mov	r4, r6
   225f0:	eb001079 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   225f4:	e28d0008 	add	r0, sp, #8
   225f8:	ebfff9c1 	bl	20d04 <CIPAddress::~CIPAddress()>
   225fc:	e1a00004 	mov	r0, r4
   22600:	e28dd028 	add	sp, sp, #40	; 0x28
   22604:	e8bd8070 	pop	{r4, r5, r6, pc}
   22608:	eb001131 	bl	26ad4 <CLogger::Get()>
   2260c:	e3a02043 	mov	r2, #67	; 0x43
   22610:	e59f30b4 	ldr	r3, [pc, #180]	; 226cc <CDHCPClient::SelectAndRequest()+0x2a0>
   22614:	e58d2000 	str	r2, [sp]
   22618:	e59f10a4 	ldr	r1, [pc, #164]	; 226c4 <CDHCPClient::SelectAndRequest()+0x298>
   2261c:	e1a02006 	mov	r2, r6
   22620:	e1a04006 	mov	r4, r6
   22624:	eb00106c 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22628:	eafffff1 	b	225f4 <CDHCPClient::SelectAndRequest()+0x1c8>
   2262c:	e3a04002 	mov	r4, #2
   22630:	eaffffef 	b	225f4 <CDHCPClient::SelectAndRequest()+0x1c8>
   22634:	e3a04004 	mov	r4, #4
   22638:	eaffffed 	b	225f4 <CDHCPClient::SelectAndRequest()+0x1c8>
   2263c:	eb001124 	bl	26ad4 <CLogger::Get()>
   22640:	e3a02002 	mov	r2, #2
   22644:	e59f3084 	ldr	r3, [pc, #132]	; 226d0 <CDHCPClient::SelectAndRequest()+0x2a4>
   22648:	e59f1074 	ldr	r1, [pc, #116]	; 226c4 <CDHCPClient::SelectAndRequest()+0x298>
   2264c:	eb001062 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22650:	e3a04005 	mov	r4, #5
   22654:	eaffffe6 	b	225f4 <CDHCPClient::SelectAndRequest()+0x1c8>
   22658:	e3a020f9 	mov	r2, #249	; 0xf9
   2265c:	e59f1070 	ldr	r1, [pc, #112]	; 226d4 <CDHCPClient::SelectAndRequest()+0x2a8>
   22660:	e59f0070 	ldr	r0, [pc, #112]	; 226d8 <CDHCPClient::SelectAndRequest()+0x2ac>
   22664:	eb000832 	bl	24734 <assertion_failed>
   22668:	eb001119 	bl	26ad4 <CLogger::Get()>
   2266c:	e3a02002 	mov	r2, #2
   22670:	e59f3064 	ldr	r3, [pc, #100]	; 226dc <CDHCPClient::SelectAndRequest()+0x2b0>
   22674:	e59f1048 	ldr	r1, [pc, #72]	; 226c4 <CDHCPClient::SelectAndRequest()+0x298>
   22678:	eb001057 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2267c:	e3a04005 	mov	r4, #5
   22680:	eaffffdb 	b	225f4 <CDHCPClient::SelectAndRequest()+0x1c8>
   22684:	e3a020fc 	mov	r2, #252	; 0xfc
   22688:	e59f1044 	ldr	r1, [pc, #68]	; 226d4 <CDHCPClient::SelectAndRequest()+0x2a8>
   2268c:	e59f004c 	ldr	r0, [pc, #76]	; 226e0 <CDHCPClient::SelectAndRequest()+0x2b4>
   22690:	eb000827 	bl	24734 <assertion_failed>
   22694:	eb00110e 	bl	26ad4 <CLogger::Get()>
   22698:	e3a02002 	mov	r2, #2
   2269c:	e59f3040 	ldr	r3, [pc, #64]	; 226e4 <CDHCPClient::SelectAndRequest()+0x2b8>
   226a0:	e59f101c 	ldr	r1, [pc, #28]	; 226c4 <CDHCPClient::SelectAndRequest()+0x298>
   226a4:	eb00104c 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   226a8:	e3a04003 	mov	r4, #3
   226ac:	eaffffd0 	b	225f4 <CDHCPClient::SelectAndRequest()+0x1c8>
   226b0:	e59f2030 	ldr	r2, [pc, #48]	; 226e8 <CDHCPClient::SelectAndRequest()+0x2bc>
   226b4:	e59f1018 	ldr	r1, [pc, #24]	; 226d4 <CDHCPClient::SelectAndRequest()+0x2a8>
   226b8:	e59f002c 	ldr	r0, [pc, #44]	; 226ec <CDHCPClient::SelectAndRequest()+0x2c0>
   226bc:	eb00081c 	bl	24734 <assertion_failed>
   226c0:	00042c28 	.word	0x00042c28
   226c4:	00042d20 	.word	0x00042d20
   226c8:	00042b84 	.word	0x00042b84
   226cc:	00042b60 	.word	0x00042b60
   226d0:	00042c08 	.word	0x00042c08
   226d4:	000429d4 	.word	0x000429d4
   226d8:	00042ba0 	.word	0x00042ba0
   226dc:	00042bf0 	.word	0x00042bf0
   226e0:	00042bb8 	.word	0x00042bb8
   226e4:	00042bd4 	.word	0x00042bd4
   226e8:	00000126 	.word	0x00000126
   226ec:	00041db0 	.word	0x00041db0

000226f0 <CDHCPClient::RenewOrRebind(bool, unsigned int)>:
   226f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   226f4:	e1a04000 	mov	r4, r0
   226f8:	e24dd018 	sub	sp, sp, #24
   226fc:	e1a05002 	mov	r5, r2
   22700:	e1a06001 	mov	r6, r1
   22704:	eb001dd6 	bl	29e64 <CTimer::Get()>
   22708:	eb001b25 	bl	293a4 <CTimer::GetUptime() const>
   2270c:	e5943198 	ldr	r3, [r4, #408]	; 0x198
   22710:	e0400003 	sub	r0, r0, r3
   22714:	e1500005 	cmp	r0, r5
   22718:	2a00004f 	bcs	2285c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x16c>
   2271c:	eb0010ec 	bl	26ad4 <CLogger::Get()>
   22720:	e3560000 	cmp	r6, #0
   22724:	1a00003d 	bne	22820 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x130>
   22728:	e59f72cc 	ldr	r7, [pc, #716]	; 229fc <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x30c>
   2272c:	e59f32cc 	ldr	r3, [pc, #716]	; 22a00 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   22730:	e3a02004 	mov	r2, #4
   22734:	e59f12c8 	ldr	r1, [pc, #712]	; 22a04 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   22738:	e28d6010 	add	r6, sp, #16
   2273c:	e58d7000 	str	r7, [sp]
   22740:	eb001025 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22744:	e1a00006 	mov	r0, r6
   22748:	ebfff957 	bl	20cac <CIPAddress::CIPAddress()>
   2274c:	e3a03001 	mov	r3, #1
   22750:	e1a00006 	mov	r0, r6
   22754:	e5c431b0 	strb	r3, [r4, #432]	; 0x1b0
   22758:	ebfff9fe 	bl	20f58 <CIPAddress::SetBroadcast()>
   2275c:	e28480f4 	add	r8, r4, #244	; 0xf4
   22760:	e1a00008 	mov	r0, r8
   22764:	e3a02043 	mov	r2, #67	; 0x43
   22768:	e1a01006 	mov	r1, r6
   2276c:	eb000112 	bl	22bbc <CSocket::Connect(CIPAddress&, unsigned short)>
   22770:	e3500000 	cmp	r0, #0
   22774:	ba00003c 	blt	2286c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x17c>
   22778:	e1a00008 	mov	r0, r8
   2277c:	e5d411b0 	ldrb	r1, [r4, #432]	; 0x1b0
   22780:	eb000283 	bl	23194 <CSocket::SetOptionBroadcast(bool)>
   22784:	e3500000 	cmp	r0, #0
   22788:	0a000018 	beq	227f0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x100>
   2278c:	ea00007f 	b	22990 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2a0>
   22790:	e1a00004 	mov	r0, r4
   22794:	ebfffd6a 	bl	21d44 <CDHCPClient::GetXID() const>
   22798:	e3a01001 	mov	r1, #1
   2279c:	e58401b4 	str	r0, [r4, #436]	; 0x1b4
   227a0:	e594219c 	ldr	r2, [r4, #412]	; 0x19c
   227a4:	e1a00004 	mov	r0, r4
   227a8:	ebfffeb4 	bl	22280 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   227ac:	e3500000 	cmp	r0, #0
   227b0:	1a00003c 	bne	228a8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x1b8>
   227b4:	eb001daa 	bl	29e64 <CTimer::Get()>
   227b8:	eb001af9 	bl	293a4 <CTimer::GetUptime() const>
   227bc:	e5943198 	ldr	r3, [r4, #408]	; 0x198
   227c0:	e0402003 	sub	r2, r0, r3
   227c4:	e1550002 	cmp	r5, r2
   227c8:	9a00000e 	bls	22808 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x118>
   227cc:	e0853003 	add	r3, r5, r3
   227d0:	e0431000 	sub	r1, r3, r0
   227d4:	e3510077 	cmp	r1, #119	; 0x77
   227d8:	93a0103c 	movls	r1, #60	; 0x3c
   227dc:	81a010a1 	lsrhi	r1, r1, #1
   227e0:	e58d100c 	str	r1, [sp, #12]
   227e4:	eb000726 	bl	24484 <CScheduler::Get()>
   227e8:	e59d100c 	ldr	r1, [sp, #12]
   227ec:	eb0006e9 	bl	24398 <CScheduler::Sleep(unsigned int)>
   227f0:	eb001d9b 	bl	29e64 <CTimer::Get()>
   227f4:	eb001aea 	bl	293a4 <CTimer::GetUptime() const>
   227f8:	e5943198 	ldr	r3, [r4, #408]	; 0x198
   227fc:	e0400003 	sub	r0, r0, r3
   22800:	e1550000 	cmp	r5, r0
   22804:	8affffe1 	bhi	22790 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0xa0>
   22808:	e3a04002 	mov	r4, #2
   2280c:	e1a00006 	mov	r0, r6
   22810:	ebfff93b 	bl	20d04 <CIPAddress::~CIPAddress()>
   22814:	e1a00004 	mov	r0, r4
   22818:	e28dd018 	add	sp, sp, #24
   2281c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22820:	e59f71e0 	ldr	r7, [pc, #480]	; 22a08 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x318>
   22824:	e3a02004 	mov	r2, #4
   22828:	e59f31d0 	ldr	r3, [pc, #464]	; 22a00 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   2282c:	e59f11d0 	ldr	r1, [pc, #464]	; 22a04 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   22830:	e28d6010 	add	r6, sp, #16
   22834:	e58d7000 	str	r7, [sp]
   22838:	eb000fe7 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2283c:	e1a00006 	mov	r0, r6
   22840:	ebfff919 	bl	20cac <CIPAddress::CIPAddress()>
   22844:	e3a03000 	mov	r3, #0
   22848:	e1a00006 	mov	r0, r6
   2284c:	e59411a0 	ldr	r1, [r4, #416]	; 0x1a0
   22850:	e5c431b0 	strb	r3, [r4, #432]	; 0x1b0
   22854:	ebfff997 	bl	20eb8 <CIPAddress::Set(unsigned int)>
   22858:	eaffffbf 	b	2275c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x6c>
   2285c:	e3a04002 	mov	r4, #2
   22860:	e1a00004 	mov	r0, r4
   22864:	e28dd018 	add	sp, sp, #24
   22868:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2286c:	eb001098 	bl	26ad4 <CLogger::Get()>
   22870:	e5d4c1b0 	ldrb	ip, [r4, #432]	; 0x1b0
   22874:	e59f1190 	ldr	r1, [pc, #400]	; 22a0c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x31c>
   22878:	e35c0000 	cmp	ip, #0
   2287c:	e59f318c 	ldr	r3, [pc, #396]	; 22a10 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x320>
   22880:	e3a02043 	mov	r2, #67	; 0x43
   22884:	01a03001 	moveq	r3, r1
   22888:	e58d2004 	str	r2, [sp, #4]
   2288c:	e58d3000 	str	r3, [sp]
   22890:	e3a02001 	mov	r2, #1
   22894:	e59f3178 	ldr	r3, [pc, #376]	; 22a14 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x324>
   22898:	e59f1164 	ldr	r1, [pc, #356]	; 22a04 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   2289c:	eb000fce 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   228a0:	e3a04001 	mov	r4, #1
   228a4:	eaffffd8 	b	2280c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   228a8:	e5d431d1 	ldrb	r3, [r4, #465]	; 0x1d1
   228ac:	e3530006 	cmp	r3, #6
   228b0:	0a00003f 	beq	229b4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2c4>
   228b4:	e1a00004 	mov	r0, r4
   228b8:	ebfffbfc 	bl	218b0 <CDHCPClient::CheckConfig()>
   228bc:	e3500000 	cmp	r0, #0
   228c0:	0a000039 	beq	229ac <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2bc>
   228c4:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   228c8:	e3530000 	cmp	r3, #0
   228cc:	e58431a0 	str	r3, [r4, #416]	; 0x1a0
   228d0:	0a00003e 	beq	229d0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2e0>
   228d4:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   228d8:	e3500000 	cmp	r0, #0
   228dc:	0a000042 	beq	229ec <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2fc>
   228e0:	ebfff896 	bl	20b40 <CNetConfig::GetIPAddress() const>
   228e4:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   228e8:	ebfff960 	bl	20e70 <CIPAddress::operator!=(unsigned int) const>
   228ec:	e3500000 	cmp	r0, #0
   228f0:	0a000018 	beq	22958 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x268>
   228f4:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   228f8:	ebfff894 	bl	20b50 <CNetConfig::GetNetMask() const>
   228fc:	e59431c0 	ldr	r3, [r4, #448]	; 0x1c0
   22900:	e5902000 	ldr	r2, [r0]
   22904:	e1520003 	cmp	r2, r3
   22908:	0a000012 	beq	22958 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x268>
   2290c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   22910:	ebfff890 	bl	20b58 <CNetConfig::GetDefaultGateway() const>
   22914:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   22918:	ebfff954 	bl	20e70 <CIPAddress::operator!=(unsigned int) const>
   2291c:	e3500000 	cmp	r0, #0
   22920:	0a00000c 	beq	22958 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x268>
   22924:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   22928:	ebfff88c 	bl	20b60 <CNetConfig::GetDNSServer() const>
   2292c:	e59411c8 	ldr	r1, [r4, #456]	; 0x1c8
   22930:	ebfff94e 	bl	20e70 <CIPAddress::operator!=(unsigned int) const>
   22934:	e3500000 	cmp	r0, #0
   22938:	0a000006 	beq	22958 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x268>
   2293c:	eb001064 	bl	26ad4 <CLogger::Get()>
   22940:	e3a02002 	mov	r2, #2
   22944:	e59f30cc 	ldr	r3, [pc, #204]	; 22a18 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x328>
   22948:	e59f10b4 	ldr	r1, [pc, #180]	; 22a04 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   2294c:	eb000fa2 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22950:	e3a04005 	mov	r4, #5
   22954:	eaffffac 	b	2280c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   22958:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   2295c:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   22960:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   22964:	e58411a4 	str	r1, [r4, #420]	; 0x1a4
   22968:	e58421a8 	str	r2, [r4, #424]	; 0x1a8
   2296c:	e58431ac 	str	r3, [r4, #428]	; 0x1ac
   22970:	eb001057 	bl	26ad4 <CLogger::Get()>
   22974:	e3a02004 	mov	r2, #4
   22978:	e59f309c 	ldr	r3, [pc, #156]	; 22a1c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x32c>
   2297c:	e59f1080 	ldr	r1, [pc, #128]	; 22a04 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   22980:	e58d7000 	str	r7, [sp]
   22984:	eb000f94 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22988:	e3a04000 	mov	r4, #0
   2298c:	eaffff9e 	b	2280c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   22990:	eb00104f 	bl	26ad4 <CLogger::Get()>
   22994:	e3a02001 	mov	r2, #1
   22998:	e59f3080 	ldr	r3, [pc, #128]	; 22a20 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x330>
   2299c:	e59f1060 	ldr	r1, [pc, #96]	; 22a04 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   229a0:	eb000f8d 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   229a4:	e3a04001 	mov	r4, #1
   229a8:	eaffff97 	b	2280c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   229ac:	e3a04004 	mov	r4, #4
   229b0:	eaffff95 	b	2280c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   229b4:	eb001046 	bl	26ad4 <CLogger::Get()>
   229b8:	e3a02002 	mov	r2, #2
   229bc:	e59f3060 	ldr	r3, [pc, #96]	; 22a24 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x334>
   229c0:	e59f103c 	ldr	r1, [pc, #60]	; 22a04 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   229c4:	eb000f84 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   229c8:	e3a04003 	mov	r4, #3
   229cc:	eaffff8e 	b	2280c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   229d0:	eb00103f 	bl	26ad4 <CLogger::Get()>
   229d4:	e3a02002 	mov	r2, #2
   229d8:	e59f3048 	ldr	r3, [pc, #72]	; 22a28 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x338>
   229dc:	e59f1020 	ldr	r1, [pc, #32]	; 22a04 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   229e0:	eb000f7d 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   229e4:	e3a04004 	mov	r4, #4
   229e8:	eaffff87 	b	2280c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   229ec:	e59f2038 	ldr	r2, [pc, #56]	; 22a2c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x33c>
   229f0:	e59f1038 	ldr	r1, [pc, #56]	; 22a30 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x340>
   229f4:	e59f0038 	ldr	r0, [pc, #56]	; 22a34 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x344>
   229f8:	eb00074d 	bl	24734 <assertion_failed>
   229fc:	00042c48 	.word	0x00042c48
   22a00:	00042cd8 	.word	0x00042cd8
   22a04:	00042d20 	.word	0x00042d20
   22a08:	00042c3c 	.word	0x00042c3c
   22a0c:	00042c5c 	.word	0x00042c5c
   22a10:	00042c54 	.word	0x00042c54
   22a14:	00042c60 	.word	0x00042c60
   22a18:	00042ca4 	.word	0x00042ca4
   22a1c:	00042cc8 	.word	0x00042cc8
   22a20:	00042b84 	.word	0x00042b84
   22a24:	00042bd4 	.word	0x00042bd4
   22a28:	00042c84 	.word	0x00042c84
   22a2c:	00000195 	.word	0x00000195
   22a30:	000429d4 	.word	0x000429d4
   22a34:	00041db0 	.word	0x00041db0

00022a38 <CDHCPClient::Run()>:
   22a38:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   22a3c:	e28040f4 	add	r4, r0, #244	; 0xf4
   22a40:	e1a05000 	mov	r5, r0
   22a44:	e3a01044 	mov	r1, #68	; 0x44
   22a48:	e1a00004 	mov	r0, r4
   22a4c:	e24ddf8d 	sub	sp, sp, #564	; 0x234
   22a50:	eb000103 	bl	22e64 <CSocket::Bind(unsigned short)>
   22a54:	e3500000 	cmp	r0, #0
   22a58:	ba00004a 	blt	22b88 <CDHCPClient::Run()+0x150>
   22a5c:	e59f714c 	ldr	r7, [pc, #332]	; 22bb0 <CDHCPClient::Run()+0x178>
   22a60:	e59f614c 	ldr	r6, [pc, #332]	; 22bb4 <CDHCPClient::Run()+0x17c>
   22a64:	ea000006 	b	22a84 <CDHCPClient::Run()+0x4c>
   22a68:	e2400002 	sub	r0, r0, #2
   22a6c:	e6ef0070 	uxtb	r0, r0
   22a70:	e3500003 	cmp	r0, #3
   22a74:	8a00000f 	bhi	22ab8 <CDHCPClient::Run()+0x80>
   22a78:	eb000681 	bl	24484 <CScheduler::Get()>
   22a7c:	e3a0103c 	mov	r1, #60	; 0x3c
   22a80:	eb000644 	bl	24398 <CScheduler::Sleep(unsigned int)>
   22a84:	e1a00005 	mov	r0, r5
   22a88:	ebfffe67 	bl	2242c <CDHCPClient::SelectAndRequest()>
   22a8c:	e3500001 	cmp	r0, #1
   22a90:	1afffff4 	bne	22a68 <CDHCPClient::Run()+0x30>
   22a94:	e28ddf8d 	add	sp, sp, #564	; 0x234
   22a98:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   22a9c:	e3a01001 	mov	r1, #1
   22aa0:	e1a00005 	mov	r0, r5
   22aa4:	e59521ac 	ldr	r2, [r5, #428]	; 0x1ac
   22aa8:	ebffff10 	bl	226f0 <CDHCPClient::RenewOrRebind(bool, unsigned int)>
   22aac:	e3500001 	cmp	r0, #1
   22ab0:	0afffff7 	beq	22a94 <CDHCPClient::Run()+0x5c>
   22ab4:	8a000017 	bhi	22b18 <CDHCPClient::Run()+0xe0>
   22ab8:	eb001ce9 	bl	29e64 <CTimer::Get()>
   22abc:	eb001a38 	bl	293a4 <CTimer::GetUptime() const>
   22ac0:	e5850198 	str	r0, [r5, #408]	; 0x198
   22ac4:	eb001ce6 	bl	29e64 <CTimer::Get()>
   22ac8:	eb001a35 	bl	293a4 <CTimer::GetUptime() const>
   22acc:	e5952198 	ldr	r2, [r5, #408]	; 0x198
   22ad0:	e59531a8 	ldr	r3, [r5, #424]	; 0x1a8
   22ad4:	e0400002 	sub	r0, r0, r2
   22ad8:	e1500003 	cmp	r0, r3
   22adc:	3a000002 	bcc	22aec <CDHCPClient::Run()+0xb4>
   22ae0:	eaffffed 	b	22a9c <CDHCPClient::Run()+0x64>
   22ae4:	eb000666 	bl	24484 <CScheduler::Get()>
   22ae8:	eb0005da 	bl	24258 <CScheduler::Yield()>
   22aec:	e3a03040 	mov	r3, #64	; 0x40
   22af0:	e3a02f89 	mov	r2, #548	; 0x224
   22af4:	e1a00004 	mov	r0, r4
   22af8:	e28d100c 	add	r1, sp, #12
   22afc:	eb000146 	bl	2301c <CSocket::Receive(void*, unsigned int, int)>
   22b00:	e3500000 	cmp	r0, #0
   22b04:	cafffff6 	bgt	22ae4 <CDHCPClient::Run()+0xac>
   22b08:	eb00065d 	bl	24484 <CScheduler::Get()>
   22b0c:	e3a0100a 	mov	r1, #10
   22b10:	eb000620 	bl	24398 <CScheduler::Sleep(unsigned int)>
   22b14:	eaffffea 	b	22ac4 <CDHCPClient::Run()+0x8c>
   22b18:	e2403003 	sub	r3, r0, #3
   22b1c:	e6ef3073 	uxtb	r3, r3
   22b20:	e3530002 	cmp	r3, #2
   22b24:	8a000006 	bhi	22b44 <CDHCPClient::Run()+0x10c>
   22b28:	e3a03000 	mov	r3, #0
   22b2c:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   22b30:	e5c53194 	strb	r3, [r5, #404]	; 0x194
   22b34:	e1500003 	cmp	r0, r3
   22b38:	0a00001b 	beq	22bac <CDHCPClient::Run()+0x174>
   22b3c:	ebfff81b 	bl	20bb0 <CNetConfig::Reset()>
   22b40:	eaffffcf 	b	22a84 <CDHCPClient::Run()+0x4c>
   22b44:	e3a01000 	mov	r1, #0
   22b48:	e1a00005 	mov	r0, r5
   22b4c:	e59521a4 	ldr	r2, [r5, #420]	; 0x1a4
   22b50:	ebfffee6 	bl	226f0 <CDHCPClient::RenewOrRebind(bool, unsigned int)>
   22b54:	e3500001 	cmp	r0, #1
   22b58:	0affffcd 	beq	22a94 <CDHCPClient::Run()+0x5c>
   22b5c:	9affffd5 	bls	22ab8 <CDHCPClient::Run()+0x80>
   22b60:	e2403003 	sub	r3, r0, #3
   22b64:	e6ef3073 	uxtb	r3, r3
   22b68:	e3530002 	cmp	r3, #2
   22b6c:	9affffed 	bls	22b28 <CDHCPClient::Run()+0xf0>
   22b70:	eb000fd7 	bl	26ad4 <CLogger::Get()>
   22b74:	e1a03007 	mov	r3, r7
   22b78:	e3a02001 	mov	r2, #1
   22b7c:	e1a01006 	mov	r1, r6
   22b80:	eb000f15 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22b84:	eaffffe7 	b	22b28 <CDHCPClient::Run()+0xf0>
   22b88:	eb000fd1 	bl	26ad4 <CLogger::Get()>
   22b8c:	e3a02044 	mov	r2, #68	; 0x44
   22b90:	e59f3020 	ldr	r3, [pc, #32]	; 22bb8 <CDHCPClient::Run()+0x180>
   22b94:	e58d2000 	str	r2, [sp]
   22b98:	e59f1014 	ldr	r1, [pc, #20]	; 22bb4 <CDHCPClient::Run()+0x17c>
   22b9c:	e3a02001 	mov	r2, #1
   22ba0:	eb000f0d 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22ba4:	e28ddf8d 	add	sp, sp, #564	; 0x234
   22ba8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   22bac:	ebfffaf6 	bl	2178c <CDHCPClient::HaltNetwork() [clone .part.0]>
   22bb0:	00042cfc 	.word	0x00042cfc
   22bb4:	00042d20 	.word	0x00042d20
   22bb8:	00042ce4 	.word	0x00042ce4

00022bbc <CSocket::Connect(CIPAddress&, unsigned short)>:
   22bbc:	e92d4070 	push	{r4, r5, r6, lr}
   22bc0:	e2526000 	subs	r6, r2, #0
   22bc4:	e24dd008 	sub	sp, sp, #8
   22bc8:	0a000026 	beq	22c68 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   22bcc:	e1a04000 	mov	r4, r0
   22bd0:	e590000c 	ldr	r0, [r0, #12]
   22bd4:	e3500000 	cmp	r0, #0
   22bd8:	0a000024 	beq	22c70 <CSocket::Connect(CIPAddress&, unsigned short)+0xb4>
   22bdc:	e1a05001 	mov	r5, r1
   22be0:	e5941018 	ldr	r1, [r4, #24]
   22be4:	e3510000 	cmp	r1, #0
   22be8:	ba000005 	blt	22c04 <CSocket::Connect(CIPAddress&, unsigned short)+0x48>
   22bec:	e5943010 	ldr	r3, [r4, #16]
   22bf0:	e3530011 	cmp	r3, #17
   22bf4:	1a00001b 	bne	22c68 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   22bf8:	ebffdd17 	bl	1a05c <CTransportLayer::Disconnect(int)>
   22bfc:	e3e03000 	mvn	r3, #0
   22c00:	e5843018 	str	r3, [r4, #24]
   22c04:	e5940008 	ldr	r0, [r4, #8]
   22c08:	e3500000 	cmp	r0, #0
   22c0c:	0a00001b 	beq	22c80 <CSocket::Connect(CIPAddress&, unsigned short)+0xc4>
   22c10:	ebfff7ca 	bl	20b40 <CNetConfig::GetIPAddress() const>
   22c14:	ebfff903 	bl	21028 <CIPAddress::IsNull() const>
   22c18:	e3500000 	cmp	r0, #0
   22c1c:	0a000006 	beq	22c3c <CSocket::Connect(CIPAddress&, unsigned short)+0x80>
   22c20:	e5943010 	ldr	r3, [r4, #16]
   22c24:	e3530011 	cmp	r3, #17
   22c28:	1a00000e 	bne	22c68 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   22c2c:	e1a00005 	mov	r0, r5
   22c30:	ebfff90a 	bl	21060 <CIPAddress::IsBroadcast() const>
   22c34:	e3500000 	cmp	r0, #0
   22c38:	0a00000a 	beq	22c68 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   22c3c:	e5943010 	ldr	r3, [r4, #16]
   22c40:	e1a02006 	mov	r2, r6
   22c44:	e58d3000 	str	r3, [sp]
   22c48:	e1a01005 	mov	r1, r5
   22c4c:	e1d431b4 	ldrh	r3, [r4, #20]
   22c50:	e594000c 	ldr	r0, [r4, #12]
   22c54:	ebffdbc4 	bl	19b6c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>
   22c58:	e5840018 	str	r0, [r4, #24]
   22c5c:	e0000fc0 	and	r0, r0, r0, asr #31
   22c60:	e28dd008 	add	sp, sp, #8
   22c64:	e8bd8070 	pop	{r4, r5, r6, pc}
   22c68:	e3e00000 	mvn	r0, #0
   22c6c:	eafffffb 	b	22c60 <CSocket::Connect(CIPAddress&, unsigned short)+0xa4>
   22c70:	e3a02070 	mov	r2, #112	; 0x70
   22c74:	e59f1014 	ldr	r1, [pc, #20]	; 22c90 <CSocket::Connect(CIPAddress&, unsigned short)+0xd4>
   22c78:	e59f0014 	ldr	r0, [pc, #20]	; 22c94 <CSocket::Connect(CIPAddress&, unsigned short)+0xd8>
   22c7c:	eb0006ac 	bl	24734 <assertion_failed>
   22c80:	e3a0207d 	mov	r2, #125	; 0x7d
   22c84:	e59f1004 	ldr	r1, [pc, #4]	; 22c90 <CSocket::Connect(CIPAddress&, unsigned short)+0xd4>
   22c88:	e59f0008 	ldr	r0, [pc, #8]	; 22c98 <CSocket::Connect(CIPAddress&, unsigned short)+0xdc>
   22c8c:	eb0006a8 	bl	24734 <assertion_failed>
   22c90:	00042d50 	.word	0x00042d50
   22c94:	00042d5c 	.word	0x00042d5c
   22c98:	00041db0 	.word	0x00041db0

00022c9c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   22c9c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22ca0:	e1a04000 	mov	r4, r0
   22ca4:	e16f0f12 	clz	r0, r2
   22ca8:	e594c018 	ldr	ip, [r4, #24]
   22cac:	e1a002a0 	lsr	r0, r0, #5
   22cb0:	e24dd010 	sub	sp, sp, #16
   22cb4:	e1900fac 	orrs	r0, r0, ip, lsr #31
   22cb8:	e1dd82bc 	ldrh	r8, [sp, #44]	; 0x2c
   22cbc:	1a000027 	bne	22d60 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xc4>
   22cc0:	e5940008 	ldr	r0, [r4, #8]
   22cc4:	e3500000 	cmp	r0, #0
   22cc8:	0a000018 	beq	22d30 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x94>
   22ccc:	e1a06001 	mov	r6, r1
   22cd0:	e1a07003 	mov	r7, r3
   22cd4:	e1a05002 	mov	r5, r2
   22cd8:	ebfff798 	bl	20b40 <CNetConfig::GetIPAddress() const>
   22cdc:	ebfff8d1 	bl	21028 <CIPAddress::IsNull() const>
   22ce0:	e3580000 	cmp	r8, #0
   22ce4:	03800001 	orreq	r0, r0, #1
   22ce8:	e31000ff 	tst	r0, #255	; 0xff
   22cec:	1a00001b 	bne	22d60 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xc4>
   22cf0:	e594000c 	ldr	r0, [r4, #12]
   22cf4:	e3500000 	cmp	r0, #0
   22cf8:	0a000010 	beq	22d40 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xa4>
   22cfc:	e3560000 	cmp	r6, #0
   22d00:	0a000012 	beq	22d50 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xb4>
   22d04:	e5943018 	ldr	r3, [r4, #24]
   22d08:	e1a02005 	mov	r2, r5
   22d0c:	e58d3008 	str	r3, [sp, #8]
   22d10:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   22d14:	e1a01006 	mov	r1, r6
   22d18:	e58d3000 	str	r3, [sp]
   22d1c:	e58d8004 	str	r8, [sp, #4]
   22d20:	e1a03007 	mov	r3, r7
   22d24:	ebffdd56 	bl	1a284 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>
   22d28:	e28dd010 	add	sp, sp, #16
   22d2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22d30:	e59f2030 	ldr	r2, [pc, #48]	; 22d68 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xcc>
   22d34:	e59f1030 	ldr	r1, [pc, #48]	; 22d6c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   22d38:	e59f0030 	ldr	r0, [pc, #48]	; 22d70 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd4>
   22d3c:	eb00067c 	bl	24734 <assertion_failed>
   22d40:	e59f202c 	ldr	r2, [pc, #44]	; 22d74 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd8>
   22d44:	e59f1020 	ldr	r1, [pc, #32]	; 22d6c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   22d48:	e59f0028 	ldr	r0, [pc, #40]	; 22d78 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xdc>
   22d4c:	eb000678 	bl	24734 <assertion_failed>
   22d50:	e59f2024 	ldr	r2, [pc, #36]	; 22d7c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe0>
   22d54:	e59f1010 	ldr	r1, [pc, #16]	; 22d6c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   22d58:	e59f0020 	ldr	r0, [pc, #32]	; 22d80 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe4>
   22d5c:	eb000674 	bl	24734 <assertion_failed>
   22d60:	e3e00000 	mvn	r0, #0
   22d64:	eaffffef 	b	22d28 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x8c>
   22d68:	0000011e 	.word	0x0000011e
   22d6c:	00042d50 	.word	0x00042d50
   22d70:	00041db0 	.word	0x00041db0
   22d74:	00000129 	.word	0x00000129
   22d78:	00042d5c 	.word	0x00042d5c
   22d7c:	0000012a 	.word	0x0000012a
   22d80:	0003ef40 	.word	0x0003ef40

00022d84 <CSocket::~CSocket()>:
   22d84:	e92d4070 	push	{r4, r5, r6, lr}
   22d88:	e1a04000 	mov	r4, r0
   22d8c:	e590000c 	ldr	r0, [r0, #12]
   22d90:	e59f309c 	ldr	r3, [pc, #156]	; 22e34 <CSocket::~CSocket()+0xb0>
   22d94:	e3500000 	cmp	r0, #0
   22d98:	e5843000 	str	r3, [r4]
   22d9c:	0a000020 	beq	22e24 <CSocket::~CSocket()+0xa0>
   22da0:	e5941018 	ldr	r1, [r4, #24]
   22da4:	e594301c 	ldr	r3, [r4, #28]
   22da8:	e3510000 	cmp	r1, #0
   22dac:	ba00000b 	blt	22de0 <CSocket::~CSocket()+0x5c>
   22db0:	e3530000 	cmp	r3, #0
   22db4:	1a000016 	bne	22e14 <CSocket::~CSocket()+0x90>
   22db8:	ebffdca7 	bl	1a05c <CTransportLayer::Disconnect(int)>
   22dbc:	e3e03000 	mvn	r3, #0
   22dc0:	e5843018 	str	r3, [r4, #24]
   22dc4:	e3a03000 	mov	r3, #0
   22dc8:	e1a00004 	mov	r0, r4
   22dcc:	e584300c 	str	r3, [r4, #12]
   22dd0:	e5843008 	str	r3, [r4, #8]
   22dd4:	eb000236 	bl	236b4 <CNetSocket::~CNetSocket()>
   22dd8:	e1a00004 	mov	r0, r4
   22ddc:	e8bd8070 	pop	{r4, r5, r6, pc}
   22de0:	e3530000 	cmp	r3, #0
   22de4:	0afffff6 	beq	22dc4 <CSocket::~CSocket()+0x40>
   22de8:	e3a05000 	mov	r5, #0
   22dec:	e284601c 	add	r6, r4, #28
   22df0:	ea000000 	b	22df8 <CSocket::~CSocket()+0x74>
   22df4:	e594000c 	ldr	r0, [r4, #12]
   22df8:	e5b61004 	ldr	r1, [r6, #4]!
   22dfc:	ebffdc96 	bl	1a05c <CTransportLayer::Disconnect(int)>
   22e00:	e594301c 	ldr	r3, [r4, #28]
   22e04:	e2855001 	add	r5, r5, #1
   22e08:	e1530005 	cmp	r3, r5
   22e0c:	8afffff8 	bhi	22df4 <CSocket::~CSocket()+0x70>
   22e10:	eaffffeb 	b	22dc4 <CSocket::~CSocket()+0x40>
   22e14:	e3a0203a 	mov	r2, #58	; 0x3a
   22e18:	e59f1018 	ldr	r1, [pc, #24]	; 22e38 <CSocket::~CSocket()+0xb4>
   22e1c:	e59f0018 	ldr	r0, [pc, #24]	; 22e3c <CSocket::~CSocket()+0xb8>
   22e20:	eb000643 	bl	24734 <assertion_failed>
   22e24:	e3a02036 	mov	r2, #54	; 0x36
   22e28:	e59f1008 	ldr	r1, [pc, #8]	; 22e38 <CSocket::~CSocket()+0xb4>
   22e2c:	e59f000c 	ldr	r0, [pc, #12]	; 22e40 <CSocket::~CSocket()+0xbc>
   22e30:	eb00063f 	bl	24734 <assertion_failed>
   22e34:	00042e34 	.word	0x00042e34
   22e38:	00042d50 	.word	0x00042d50
   22e3c:	00042d74 	.word	0x00042d74
   22e40:	00042d5c 	.word	0x00042d5c

00022e44 <CSocket::~CSocket()>:
   22e44:	e92d4010 	push	{r4, lr}
   22e48:	e1a04000 	mov	r4, r0
   22e4c:	ebffffcc 	bl	22d84 <CSocket::~CSocket()>
   22e50:	e1a00004 	mov	r0, r4
   22e54:	e3a010a0 	mov	r1, #160	; 0xa0
   22e58:	eb00204a 	bl	2af88 <operator delete(void*, unsigned int)>
   22e5c:	e1a00004 	mov	r0, r4
   22e60:	e8bd8010 	pop	{r4, pc}

00022e64 <CSocket::Bind(unsigned short)>:
   22e64:	e2513000 	subs	r3, r1, #0
   22e68:	0a000012 	beq	22eb8 <CSocket::Bind(unsigned short)+0x54>
   22e6c:	e92d4010 	push	{r4, lr}
   22e70:	e1a04000 	mov	r4, r0
   22e74:	e1d001b4 	ldrh	r0, [r0, #20]
   22e78:	e3500000 	cmp	r0, #0
   22e7c:	1a00000b 	bne	22eb0 <CSocket::Bind(unsigned short)+0x4c>
   22e80:	e5942018 	ldr	r2, [r4, #24]
   22e84:	e3520000 	cmp	r2, #0
   22e88:	aa000008 	bge	22eb0 <CSocket::Bind(unsigned short)+0x4c>
   22e8c:	e5942010 	ldr	r2, [r4, #16]
   22e90:	e1c431b4 	strh	r3, [r4, #20]
   22e94:	e3520011 	cmp	r2, #17
   22e98:	18bd8010 	popne	{r4, pc}
   22e9c:	e594000c 	ldr	r0, [r4, #12]
   22ea0:	ebffdad7 	bl	19a04 <CTransportLayer::Bind(unsigned short, int)>
   22ea4:	e5840018 	str	r0, [r4, #24]
   22ea8:	e0000fc0 	and	r0, r0, r0, asr #31
   22eac:	e8bd8010 	pop	{r4, pc}
   22eb0:	e3e00000 	mvn	r0, #0
   22eb4:	e8bd8010 	pop	{r4, pc}
   22eb8:	e3e00000 	mvn	r0, #0
   22ebc:	e12fff1e 	bx	lr

00022ec0 <CSocket::Listen(unsigned int)>:
   22ec0:	e5902010 	ldr	r2, [r0, #16]
   22ec4:	e3520006 	cmp	r2, #6
   22ec8:	1a00002f 	bne	22f8c <CSocket::Listen(unsigned int)+0xcc>
   22ecc:	e1a03001 	mov	r3, r1
   22ed0:	e1d011b4 	ldrh	r1, [r0, #20]
   22ed4:	e92d4070 	push	{r4, r5, r6, lr}
   22ed8:	e3510000 	cmp	r1, #0
   22edc:	e1a04000 	mov	r4, r0
   22ee0:	0a000027 	beq	22f84 <CSocket::Listen(unsigned int)+0xc4>
   22ee4:	e5900018 	ldr	r0, [r0, #24]
   22ee8:	e3500000 	cmp	r0, #0
   22eec:	aa000024 	bge	22f84 <CSocket::Listen(unsigned int)+0xc4>
   22ef0:	e2430001 	sub	r0, r3, #1
   22ef4:	e350001f 	cmp	r0, #31
   22ef8:	8a000021 	bhi	22f84 <CSocket::Listen(unsigned int)+0xc4>
   22efc:	e594501c 	ldr	r5, [r4, #28]
   22f00:	e3550000 	cmp	r5, #0
   22f04:	1a000016 	bne	22f64 <CSocket::Listen(unsigned int)+0xa4>
   22f08:	e594000c 	ldr	r0, [r4, #12]
   22f0c:	e584301c 	str	r3, [r4, #28]
   22f10:	e3500000 	cmp	r0, #0
   22f14:	0a000016 	beq	22f74 <CSocket::Listen(unsigned int)+0xb4>
   22f18:	e284601c 	add	r6, r4, #28
   22f1c:	ea000006 	b	22f3c <CSocket::Listen(unsigned int)+0x7c>
   22f20:	e594301c 	ldr	r3, [r4, #28]
   22f24:	e2855001 	add	r5, r5, #1
   22f28:	e1530005 	cmp	r3, r5
   22f2c:	9a00000a 	bls	22f5c <CSocket::Listen(unsigned int)+0x9c>
   22f30:	e594000c 	ldr	r0, [r4, #12]
   22f34:	e1d411b4 	ldrh	r1, [r4, #20]
   22f38:	e5942010 	ldr	r2, [r4, #16]
   22f3c:	ebffdbb2 	bl	19e0c <CTransportLayer::Listen(unsigned short, int)>
   22f40:	e3500000 	cmp	r0, #0
   22f44:	e5a60004 	str	r0, [r6, #4]!
   22f48:	aafffff4 	bge	22f20 <CSocket::Listen(unsigned int)+0x60>
   22f4c:	e3a020a5 	mov	r2, #165	; 0xa5
   22f50:	e59f103c 	ldr	r1, [pc, #60]	; 22f94 <CSocket::Listen(unsigned int)+0xd4>
   22f54:	e59f003c 	ldr	r0, [pc, #60]	; 22f98 <CSocket::Listen(unsigned int)+0xd8>
   22f58:	eb0005f5 	bl	24734 <assertion_failed>
   22f5c:	e3a00000 	mov	r0, #0
   22f60:	e8bd8070 	pop	{r4, r5, r6, pc}
   22f64:	e3a0209d 	mov	r2, #157	; 0x9d
   22f68:	e59f1024 	ldr	r1, [pc, #36]	; 22f94 <CSocket::Listen(unsigned int)+0xd4>
   22f6c:	e59f0028 	ldr	r0, [pc, #40]	; 22f9c <CSocket::Listen(unsigned int)+0xdc>
   22f70:	eb0005ef 	bl	24734 <assertion_failed>
   22f74:	e3a020a0 	mov	r2, #160	; 0xa0
   22f78:	e59f1014 	ldr	r1, [pc, #20]	; 22f94 <CSocket::Listen(unsigned int)+0xd4>
   22f7c:	e59f001c 	ldr	r0, [pc, #28]	; 22fa0 <CSocket::Listen(unsigned int)+0xe0>
   22f80:	eb0005eb 	bl	24734 <assertion_failed>
   22f84:	e3e00000 	mvn	r0, #0
   22f88:	e8bd8070 	pop	{r4, r5, r6, pc}
   22f8c:	e3e00000 	mvn	r0, #0
   22f90:	e12fff1e 	bx	lr
   22f94:	00042d50 	.word	0x00042d50
   22f98:	00042d84 	.word	0x00042d84
   22f9c:	00042d74 	.word	0x00042d74
   22fa0:	00042d5c 	.word	0x00042d5c

00022fa4 <CSocket::Send(void const*, unsigned int, int)>:
   22fa4:	e3520000 	cmp	r2, #0
   22fa8:	03a0c001 	moveq	ip, #1
   22fac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   22fb0:	e590e018 	ldr	lr, [r0, #24]
   22fb4:	e24dd00c 	sub	sp, sp, #12
   22fb8:	11a0cfae 	lsrne	ip, lr, #31
   22fbc:	e35c0000 	cmp	ip, #0
   22fc0:	1a000010 	bne	23008 <CSocket::Send(void const*, unsigned int, int)+0x64>
   22fc4:	e590000c 	ldr	r0, [r0, #12]
   22fc8:	e3500000 	cmp	r0, #0
   22fcc:	0a000005 	beq	22fe8 <CSocket::Send(void const*, unsigned int, int)+0x44>
   22fd0:	e3510000 	cmp	r1, #0
   22fd4:	0a000007 	beq	22ff8 <CSocket::Send(void const*, unsigned int, int)+0x54>
   22fd8:	e58de000 	str	lr, [sp]
   22fdc:	ebffdc40 	bl	1a0e4 <CTransportLayer::Send(void const*, unsigned int, int, int)>
   22fe0:	e28dd00c 	add	sp, sp, #12
   22fe4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   22fe8:	e3a020ed 	mov	r2, #237	; 0xed
   22fec:	e59f101c 	ldr	r1, [pc, #28]	; 23010 <CSocket::Send(void const*, unsigned int, int)+0x6c>
   22ff0:	e59f001c 	ldr	r0, [pc, #28]	; 23014 <CSocket::Send(void const*, unsigned int, int)+0x70>
   22ff4:	eb0005ce 	bl	24734 <assertion_failed>
   22ff8:	e3a020ee 	mov	r2, #238	; 0xee
   22ffc:	e59f100c 	ldr	r1, [pc, #12]	; 23010 <CSocket::Send(void const*, unsigned int, int)+0x6c>
   23000:	e59f0010 	ldr	r0, [pc, #16]	; 23018 <CSocket::Send(void const*, unsigned int, int)+0x74>
   23004:	eb0005ca 	bl	24734 <assertion_failed>
   23008:	e3e00000 	mvn	r0, #0
   2300c:	eafffff3 	b	22fe0 <CSocket::Send(void const*, unsigned int, int)+0x3c>
   23010:	00042d50 	.word	0x00042d50
   23014:	00042d5c 	.word	0x00042d5c
   23018:	0003ef40 	.word	0x0003ef40

0002301c <CSocket::Receive(void*, unsigned int, int)>:
   2301c:	e3520000 	cmp	r2, #0
   23020:	e92d4070 	push	{r4, r5, r6, lr}
   23024:	e1a05002 	mov	r5, r2
   23028:	03a02001 	moveq	r2, #1
   2302c:	e590e018 	ldr	lr, [r0, #24]
   23030:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   23034:	11a02fae 	lsrne	r2, lr, #31
   23038:	e3520000 	cmp	r2, #0
   2303c:	1a00001c 	bne	230b4 <CSocket::Receive(void*, unsigned int, int)+0x98>
   23040:	e590000c 	ldr	r0, [r0, #12]
   23044:	e3500000 	cmp	r0, #0
   23048:	0a000011 	beq	23094 <CSocket::Receive(void*, unsigned int, int)+0x78>
   2304c:	e1a02003 	mov	r2, r3
   23050:	e1a06001 	mov	r6, r1
   23054:	e1a0300e 	mov	r3, lr
   23058:	e1a0100d 	mov	r1, sp
   2305c:	ebffdc59 	bl	1a1c8 <CTransportLayer::Receive(void*, int, int)>
   23060:	e2504000 	subs	r4, r0, #0
   23064:	ba000007 	blt	23088 <CSocket::Receive(void*, unsigned int, int)+0x6c>
   23068:	e1540005 	cmp	r4, r5
   2306c:	21a04005 	movcs	r4, r5
   23070:	e3560000 	cmp	r6, #0
   23074:	0a00000a 	beq	230a4 <CSocket::Receive(void*, unsigned int, int)+0x88>
   23078:	e1a0100d 	mov	r1, sp
   2307c:	e1a00006 	mov	r0, r6
   23080:	e1a02004 	mov	r2, r4
   23084:	eb001dcb 	bl	2a7b8 <memcpy>
   23088:	e1a00004 	mov	r0, r4
   2308c:	e28ddd19 	add	sp, sp, #1600	; 0x640
   23090:	e8bd8070 	pop	{r4, r5, r6, pc}
   23094:	e3a020fe 	mov	r2, #254	; 0xfe
   23098:	e59f101c 	ldr	r1, [pc, #28]	; 230bc <CSocket::Receive(void*, unsigned int, int)+0xa0>
   2309c:	e59f001c 	ldr	r0, [pc, #28]	; 230c0 <CSocket::Receive(void*, unsigned int, int)+0xa4>
   230a0:	eb0005a3 	bl	24734 <assertion_failed>
   230a4:	e59f2018 	ldr	r2, [pc, #24]	; 230c4 <CSocket::Receive(void*, unsigned int, int)+0xa8>
   230a8:	e59f100c 	ldr	r1, [pc, #12]	; 230bc <CSocket::Receive(void*, unsigned int, int)+0xa0>
   230ac:	e59f0014 	ldr	r0, [pc, #20]	; 230c8 <CSocket::Receive(void*, unsigned int, int)+0xac>
   230b0:	eb00059f 	bl	24734 <assertion_failed>
   230b4:	e3e04000 	mvn	r4, #0
   230b8:	eafffff2 	b	23088 <CSocket::Receive(void*, unsigned int, int)+0x6c>
   230bc:	00042d50 	.word	0x00042d50
   230c0:	00042d5c 	.word	0x00042d5c
   230c4:	0000010b 	.word	0x0000010b
   230c8:	0003ef40 	.word	0x0003ef40

000230cc <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   230cc:	e3520000 	cmp	r2, #0
   230d0:	e92d4070 	push	{r4, r5, r6, lr}
   230d4:	e1a05002 	mov	r5, r2
   230d8:	03a02001 	moveq	r2, #1
   230dc:	e590e018 	ldr	lr, [r0, #24]
   230e0:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   230e4:	11a02fae 	lsrne	r2, lr, #31
   230e8:	e3520000 	cmp	r2, #0
   230ec:	e24dd008 	sub	sp, sp, #8
   230f0:	1a000020 	bne	23178 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xac>
   230f4:	e590000c 	ldr	r0, [r0, #12]
   230f8:	e3500000 	cmp	r0, #0
   230fc:	0a000015 	beq	23158 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x8c>
   23100:	e1a02003 	mov	r2, r3
   23104:	e59d365c 	ldr	r3, [sp, #1628]	; 0x65c
   23108:	e1a06001 	mov	r6, r1
   2310c:	e58d3000 	str	r3, [sp]
   23110:	e58de004 	str	lr, [sp, #4]
   23114:	e59d3658 	ldr	r3, [sp, #1624]	; 0x658
   23118:	e28d1008 	add	r1, sp, #8
   2311c:	ebffdc95 	bl	1a378 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>
   23120:	e2504000 	subs	r4, r0, #0
   23124:	ba000007 	blt	23148 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x7c>
   23128:	e1540005 	cmp	r4, r5
   2312c:	21a04005 	movcs	r4, r5
   23130:	e3560000 	cmp	r6, #0
   23134:	0a00000b 	beq	23168 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x9c>
   23138:	e1a00006 	mov	r0, r6
   2313c:	e1a02004 	mov	r2, r4
   23140:	e28d1008 	add	r1, sp, #8
   23144:	eb001d9b 	bl	2a7b8 <memcpy>
   23148:	e1a00004 	mov	r0, r4
   2314c:	e28ddd19 	add	sp, sp, #1600	; 0x640
   23150:	e28dd008 	add	sp, sp, #8
   23154:	e8bd8070 	pop	{r4, r5, r6, pc}
   23158:	e59f2020 	ldr	r2, [pc, #32]	; 23180 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb4>
   2315c:	e59f1020 	ldr	r1, [pc, #32]	; 23184 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb8>
   23160:	e59f0020 	ldr	r0, [pc, #32]	; 23188 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xbc>
   23164:	eb000572 	bl	24734 <assertion_failed>
   23168:	e59f201c 	ldr	r2, [pc, #28]	; 2318c <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xc0>
   2316c:	e59f1010 	ldr	r1, [pc, #16]	; 23184 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb8>
   23170:	e59f0018 	ldr	r0, [pc, #24]	; 23190 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xc4>
   23174:	eb00056e 	bl	24734 <assertion_failed>
   23178:	e3e04000 	mvn	r4, #0
   2317c:	eafffff1 	b	23148 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x7c>
   23180:	0000013b 	.word	0x0000013b
   23184:	00042d50 	.word	0x00042d50
   23188:	00042d5c 	.word	0x00042d5c
   2318c:	00000149 	.word	0x00000149
   23190:	0003ef40 	.word	0x0003ef40

00023194 <CSocket::SetOptionBroadcast(bool)>:
   23194:	e5902018 	ldr	r2, [r0, #24]
   23198:	e3520000 	cmp	r2, #0
   2319c:	ba00000d 	blt	231d8 <CSocket::SetOptionBroadcast(bool)+0x44>
   231a0:	e5903010 	ldr	r3, [r0, #16]
   231a4:	e3530011 	cmp	r3, #17
   231a8:	1a000003 	bne	231bc <CSocket::SetOptionBroadcast(bool)+0x28>
   231ac:	e590000c 	ldr	r0, [r0, #12]
   231b0:	e3500000 	cmp	r0, #0
   231b4:	0a000002 	beq	231c4 <CSocket::SetOptionBroadcast(bool)+0x30>
   231b8:	eaffdca2 	b	1a448 <CTransportLayer::SetOptionBroadcast(bool, int)>
   231bc:	e3a00000 	mov	r0, #0
   231c0:	e12fff1e 	bx	lr
   231c4:	e92d4010 	push	{r4, lr}
   231c8:	e59f2010 	ldr	r2, [pc, #16]	; 231e0 <CSocket::SetOptionBroadcast(bool)+0x4c>
   231cc:	e59f1010 	ldr	r1, [pc, #16]	; 231e4 <CSocket::SetOptionBroadcast(bool)+0x50>
   231d0:	e59f0010 	ldr	r0, [pc, #16]	; 231e8 <CSocket::SetOptionBroadcast(bool)+0x54>
   231d4:	eb000556 	bl	24734 <assertion_failed>
   231d8:	e3e00000 	mvn	r0, #0
   231dc:	e12fff1e 	bx	lr
   231e0:	0000015b 	.word	0x0000015b
   231e4:	00042d50 	.word	0x00042d50
   231e8:	00042d5c 	.word	0x00042d5c

000231ec <CSocket::GetForeignIP() const>:
   231ec:	e5901018 	ldr	r1, [r0, #24]
   231f0:	e3510000 	cmp	r1, #0
   231f4:	ba000003 	blt	23208 <CSocket::GetForeignIP() const+0x1c>
   231f8:	e590000c 	ldr	r0, [r0, #12]
   231fc:	e3500000 	cmp	r0, #0
   23200:	0a000002 	beq	23210 <CSocket::GetForeignIP() const+0x24>
   23204:	eaffdcd5 	b	1a560 <CTransportLayer::GetForeignIP(int) const>
   23208:	e3a00000 	mov	r0, #0
   2320c:	e12fff1e 	bx	lr
   23210:	e92d4010 	push	{r4, lr}
   23214:	e59f2008 	ldr	r2, [pc, #8]	; 23224 <CSocket::GetForeignIP() const+0x38>
   23218:	e59f1008 	ldr	r1, [pc, #8]	; 23228 <CSocket::GetForeignIP() const+0x3c>
   2321c:	e59f0008 	ldr	r0, [pc, #8]	; 2322c <CSocket::GetForeignIP() const+0x40>
   23220:	eb000543 	bl	24734 <assertion_failed>
   23224:	00000166 	.word	0x00000166
   23228:	00042d50 	.word	0x00042d50
   2322c:	00042d5c 	.word	0x00042d5c

00023230 <CSocket::CSocket(CNetSubSystem*, int)>:
   23230:	e92d4070 	push	{r4, r5, r6, lr}
   23234:	e1a04000 	mov	r4, r0
   23238:	e1a05001 	mov	r5, r1
   2323c:	e1a06002 	mov	r6, r2
   23240:	eb00010e 	bl	23680 <CNetSocket::CNetSocket(CNetSubSystem*)>
   23244:	e59f3070 	ldr	r3, [pc, #112]	; 232bc <CSocket::CSocket(CNetSubSystem*, int)+0x8c>
   23248:	e1a00005 	mov	r0, r5
   2324c:	e5843000 	str	r3, [r4]
   23250:	ebffd90d 	bl	1968c <CNetSubSystem::GetConfig()>
   23254:	e1a03000 	mov	r3, r0
   23258:	e1a00005 	mov	r0, r5
   2325c:	e5843008 	str	r3, [r4, #8]
   23260:	ebffd90f 	bl	196a4 <CNetSubSystem::GetTransportLayer()>
   23264:	e3a03000 	mov	r3, #0
   23268:	e3e02000 	mvn	r2, #0
   2326c:	e5941008 	ldr	r1, [r4, #8]
   23270:	e5846010 	str	r6, [r4, #16]
   23274:	e1510003 	cmp	r1, r3
   23278:	e584000c 	str	r0, [r4, #12]
   2327c:	e5842018 	str	r2, [r4, #24]
   23280:	e1c431b4 	strh	r3, [r4, #20]
   23284:	e584301c 	str	r3, [r4, #28]
   23288:	0a000003 	beq	2329c <CSocket::CSocket(CNetSubSystem*, int)+0x6c>
   2328c:	e3500000 	cmp	r0, #0
   23290:	0a000005 	beq	232ac <CSocket::CSocket(CNetSubSystem*, int)+0x7c>
   23294:	e1a00004 	mov	r0, r4
   23298:	e8bd8070 	pop	{r4, r5, r6, pc}
   2329c:	e3a02023 	mov	r2, #35	; 0x23
   232a0:	e59f1018 	ldr	r1, [pc, #24]	; 232c0 <CSocket::CSocket(CNetSubSystem*, int)+0x90>
   232a4:	e59f0018 	ldr	r0, [pc, #24]	; 232c4 <CSocket::CSocket(CNetSubSystem*, int)+0x94>
   232a8:	eb000521 	bl	24734 <assertion_failed>
   232ac:	e3a02024 	mov	r2, #36	; 0x24
   232b0:	e59f1008 	ldr	r1, [pc, #8]	; 232c0 <CSocket::CSocket(CNetSubSystem*, int)+0x90>
   232b4:	e59f000c 	ldr	r0, [pc, #12]	; 232c8 <CSocket::CSocket(CNetSubSystem*, int)+0x98>
   232b8:	eb00051d 	bl	24734 <assertion_failed>
   232bc:	00042e34 	.word	0x00042e34
   232c0:	00042d50 	.word	0x00042d50
   232c4:	00041db0 	.word	0x00041db0
   232c8:	00042d5c 	.word	0x00042d5c

000232cc <CSocket::CSocket(CSocket&, int)>:
   232cc:	e92d4070 	push	{r4, r5, r6, lr}
   232d0:	e1a04000 	mov	r4, r0
   232d4:	e1a00001 	mov	r0, r1
   232d8:	e1a05001 	mov	r5, r1
   232dc:	e1a06002 	mov	r6, r2
   232e0:	eb0000fa 	bl	236d0 <CNetSocket::GetNetSubSystem()>
   232e4:	e1a01000 	mov	r1, r0
   232e8:	e1a00004 	mov	r0, r4
   232ec:	eb0000e3 	bl	23680 <CNetSocket::CNetSocket(CNetSubSystem*)>
   232f0:	e3a01000 	mov	r1, #0
   232f4:	e59f2060 	ldr	r2, [pc, #96]	; 2335c <CSocket::CSocket(CSocket&, int)+0x90>
   232f8:	e5953008 	ldr	r3, [r5, #8]
   232fc:	e595c010 	ldr	ip, [r5, #16]
   23300:	e1d501b4 	ldrh	r0, [r5, #20]
   23304:	e5842000 	str	r2, [r4]
   23308:	e595200c 	ldr	r2, [r5, #12]
   2330c:	e1530001 	cmp	r3, r1
   23310:	e5846018 	str	r6, [r4, #24]
   23314:	e584c010 	str	ip, [r4, #16]
   23318:	e1c401b4 	strh	r0, [r4, #20]
   2331c:	e584101c 	str	r1, [r4, #28]
   23320:	e5843008 	str	r3, [r4, #8]
   23324:	e584200c 	str	r2, [r4, #12]
   23328:	0a000003 	beq	2333c <CSocket::CSocket(CSocket&, int)+0x70>
   2332c:	e3520000 	cmp	r2, #0
   23330:	0a000005 	beq	2334c <CSocket::CSocket(CSocket&, int)+0x80>
   23334:	e1a00004 	mov	r0, r4
   23338:	e8bd8070 	pop	{r4, r5, r6, pc}
   2333c:	e3a02030 	mov	r2, #48	; 0x30
   23340:	e59f1018 	ldr	r1, [pc, #24]	; 23360 <CSocket::CSocket(CSocket&, int)+0x94>
   23344:	e59f0018 	ldr	r0, [pc, #24]	; 23364 <CSocket::CSocket(CSocket&, int)+0x98>
   23348:	eb0004f9 	bl	24734 <assertion_failed>
   2334c:	e3a02031 	mov	r2, #49	; 0x31
   23350:	e59f1008 	ldr	r1, [pc, #8]	; 23360 <CSocket::CSocket(CSocket&, int)+0x94>
   23354:	e59f000c 	ldr	r0, [pc, #12]	; 23368 <CSocket::CSocket(CSocket&, int)+0x9c>
   23358:	eb0004f5 	bl	24734 <assertion_failed>
   2335c:	00042e34 	.word	0x00042e34
   23360:	00042d50 	.word	0x00042d50
   23364:	00041db0 	.word	0x00041db0
   23368:	00042d5c 	.word	0x00042d5c

0002336c <CSocket::Accept(CIPAddress*, unsigned short*)>:
   2336c:	e590301c 	ldr	r3, [r0, #28]
   23370:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23374:	e3530000 	cmp	r3, #0
   23378:	0a000044 	beq	23490 <CSocket::Accept(CIPAddress*, unsigned short*)+0x124>
   2337c:	e1d041b4 	ldrh	r4, [r0, #20]
   23380:	e1a05000 	mov	r5, r0
   23384:	e3540000 	cmp	r4, #0
   23388:	0a00003a 	beq	23478 <CSocket::Accept(CIPAddress*, unsigned short*)+0x10c>
   2338c:	e590000c 	ldr	r0, [r0, #12]
   23390:	e3500000 	cmp	r0, #0
   23394:	0a000040 	beq	2349c <CSocket::Accept(CIPAddress*, unsigned short*)+0x130>
   23398:	e3530020 	cmp	r3, #32
   2339c:	8a000042 	bhi	234ac <CSocket::Accept(CIPAddress*, unsigned short*)+0x140>
   233a0:	e1a09001 	mov	r9, r1
   233a4:	e1a0a002 	mov	sl, r2
   233a8:	e3a08020 	mov	r8, #32
   233ac:	e3e06102 	mvn	r6, #-2147483648	; 0x80000000
   233b0:	e3a04000 	mov	r4, #0
   233b4:	e285701c 	add	r7, r5, #28
   233b8:	ea000008 	b	233e0 <CSocket::Accept(CIPAddress*, unsigned short*)+0x74>
   233bc:	e5973000 	ldr	r3, [r7]
   233c0:	e595201c 	ldr	r2, [r5, #28]
   233c4:	e1530006 	cmp	r3, r6
   233c8:	b1a08004 	movlt	r8, r4
   233cc:	e2844001 	add	r4, r4, #1
   233d0:	b1a06003 	movlt	r6, r3
   233d4:	e1520004 	cmp	r2, r4
   233d8:	9a000007 	bls	233fc <CSocket::Accept(CIPAddress*, unsigned short*)+0x90>
   233dc:	e595000c 	ldr	r0, [r5, #12]
   233e0:	e5b71004 	ldr	r1, [r7, #4]!
   233e4:	ebffdc3c 	bl	1a4dc <CTransportLayer::IsConnected(int) const>
   233e8:	e3500000 	cmp	r0, #0
   233ec:	0afffff2 	beq	233bc <CSocket::Accept(CIPAddress*, unsigned short*)+0x50>
   233f0:	e1a08004 	mov	r8, r4
   233f4:	e2843008 	add	r3, r4, #8
   233f8:	e7956103 	ldr	r6, [r5, r3, lsl #2]
   233fc:	e376010a 	cmn	r6, #-2147483646	; 0x80000002
   23400:	8a00001e 	bhi	23480 <CSocket::Accept(CIPAddress*, unsigned short*)+0x114>
   23404:	e595301c 	ldr	r3, [r5, #28]
   23408:	e1530008 	cmp	r3, r8
   2340c:	9a00002e 	bls	234cc <CSocket::Accept(CIPAddress*, unsigned short*)+0x160>
   23410:	e3590000 	cmp	r9, #0
   23414:	0a000030 	beq	234dc <CSocket::Accept(CIPAddress*, unsigned short*)+0x170>
   23418:	e35a0000 	cmp	sl, #0
   2341c:	0a000032 	beq	234ec <CSocket::Accept(CIPAddress*, unsigned short*)+0x180>
   23420:	e1a0200a 	mov	r2, sl
   23424:	e1a01009 	mov	r1, r9
   23428:	e1a03006 	mov	r3, r6
   2342c:	e595000c 	ldr	r0, [r5, #12]
   23430:	ebffdad2 	bl	19f80 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>
   23434:	e3500000 	cmp	r0, #0
   23438:	b3a04000 	movlt	r4, #0
   2343c:	ba000005 	blt	23458 <CSocket::Accept(CIPAddress*, unsigned short*)+0xec>
   23440:	e3a000a0 	mov	r0, #160	; 0xa0
   23444:	eb001ec1 	bl	2af50 <operator new(unsigned int)>
   23448:	e1a02006 	mov	r2, r6
   2344c:	e1a01005 	mov	r1, r5
   23450:	e1a04000 	mov	r4, r0
   23454:	ebffff9c 	bl	232cc <CSocket::CSocket(CSocket&, int)>
   23458:	e5952010 	ldr	r2, [r5, #16]
   2345c:	e1d511b4 	ldrh	r1, [r5, #20]
   23460:	e595000c 	ldr	r0, [r5, #12]
   23464:	ebffda68 	bl	19e0c <CTransportLayer::Listen(unsigned short, int)>
   23468:	e2888008 	add	r8, r8, #8
   2346c:	e3500000 	cmp	r0, #0
   23470:	e7850108 	str	r0, [r5, r8, lsl #2]
   23474:	ba000010 	blt	234bc <CSocket::Accept(CIPAddress*, unsigned short*)+0x150>
   23478:	e1a00004 	mov	r0, r4
   2347c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23480:	e3a020cb 	mov	r2, #203	; 0xcb
   23484:	e59f1070 	ldr	r1, [pc, #112]	; 234fc <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   23488:	e59f0070 	ldr	r0, [pc, #112]	; 23500 <CSocket::Accept(CIPAddress*, unsigned short*)+0x194>
   2348c:	eb0004a8 	bl	24734 <assertion_failed>
   23490:	e1a04003 	mov	r4, r3
   23494:	e1a00004 	mov	r0, r4
   23498:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2349c:	e3a020b3 	mov	r2, #179	; 0xb3
   234a0:	e59f1054 	ldr	r1, [pc, #84]	; 234fc <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   234a4:	e59f0058 	ldr	r0, [pc, #88]	; 23504 <CSocket::Accept(CIPAddress*, unsigned short*)+0x198>
   234a8:	eb0004a1 	bl	24734 <assertion_failed>
   234ac:	e3a020b4 	mov	r2, #180	; 0xb4
   234b0:	e59f1044 	ldr	r1, [pc, #68]	; 234fc <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   234b4:	e59f004c 	ldr	r0, [pc, #76]	; 23508 <CSocket::Accept(CIPAddress*, unsigned short*)+0x19c>
   234b8:	eb00049d 	bl	24734 <assertion_failed>
   234bc:	e3a020dc 	mov	r2, #220	; 0xdc
   234c0:	e59f1034 	ldr	r1, [pc, #52]	; 234fc <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   234c4:	e59f0040 	ldr	r0, [pc, #64]	; 2350c <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   234c8:	eb000499 	bl	24734 <assertion_failed>
   234cc:	e3a020cc 	mov	r2, #204	; 0xcc
   234d0:	e59f1024 	ldr	r1, [pc, #36]	; 234fc <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   234d4:	e59f0034 	ldr	r0, [pc, #52]	; 23510 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a4>
   234d8:	eb000495 	bl	24734 <assertion_failed>
   234dc:	e3a020d0 	mov	r2, #208	; 0xd0
   234e0:	e59f1014 	ldr	r1, [pc, #20]	; 234fc <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   234e4:	e59f0028 	ldr	r0, [pc, #40]	; 23514 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a8>
   234e8:	eb000491 	bl	24734 <assertion_failed>
   234ec:	e3a020d1 	mov	r2, #209	; 0xd1
   234f0:	e59f1004 	ldr	r1, [pc, #4]	; 234fc <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   234f4:	e59f001c 	ldr	r0, [pc, #28]	; 23518 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1ac>
   234f8:	eb00048d 	bl	24734 <assertion_failed>
   234fc:	00042d50 	.word	0x00042d50
   23500:	00042dc8 	.word	0x00042dc8
   23504:	00042d5c 	.word	0x00042d5c
   23508:	00042da0 	.word	0x00042da0
   2350c:	00042e08 	.word	0x00042e08
   23510:	00042df4 	.word	0x00042df4
   23514:	00041e08 	.word	0x00041e08
   23518:	00041e18 	.word	0x00041e18

0002351c <CNetSocket::Connect(char const*, char const*)>:
   2351c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   23520:	e2517000 	subs	r7, r1, #0
   23524:	e24dd01c 	sub	sp, sp, #28
   23528:	0a000038 	beq	23610 <CNetSocket::Connect(char const*, char const*)+0xf4>
   2352c:	e3520000 	cmp	r2, #0
   23530:	e1a05002 	mov	r5, r2
   23534:	0a000039 	beq	23620 <CNetSocket::Connect(char const*, char const*)+0x104>
   23538:	e3a03000 	mov	r3, #0
   2353c:	e1a04000 	mov	r4, r0
   23540:	e3a0200a 	mov	r2, #10
   23544:	e1a00005 	mov	r0, r5
   23548:	e28d1008 	add	r1, sp, #8
   2354c:	e58d3008 	str	r3, [sp, #8]
   23550:	eb001bc5 	bl	2a46c <strtoul>
   23554:	e59d3008 	ldr	r3, [sp, #8]
   23558:	e1a06000 	mov	r6, r0
   2355c:	e3530000 	cmp	r3, #0
   23560:	0a000002 	beq	23570 <CNetSocket::Connect(char const*, char const*)+0x54>
   23564:	e1d330d0 	ldrsb	r3, [r3]
   23568:	e3530000 	cmp	r3, #0
   2356c:	1a000033 	bne	23640 <CNetSocket::Connect(char const*, char const*)+0x124>
   23570:	e59f30e8 	ldr	r3, [pc, #232]	; 23660 <CNetSocket::Connect(char const*, char const*)+0x144>
   23574:	e2462001 	sub	r2, r6, #1
   23578:	e1520003 	cmp	r2, r3
   2357c:	8a00002f 	bhi	23640 <CNetSocket::Connect(char const*, char const*)+0x124>
   23580:	e5943004 	ldr	r3, [r4, #4]
   23584:	e3530000 	cmp	r3, #0
   23588:	0a000028 	beq	23630 <CNetSocket::Connect(char const*, char const*)+0x114>
   2358c:	e28d0010 	add	r0, sp, #16
   23590:	ebfff5c5 	bl	20cac <CIPAddress::CIPAddress()>
   23594:	e5941004 	ldr	r1, [r4, #4]
   23598:	e28d000c 	add	r0, sp, #12
   2359c:	eb000061 	bl	23728 <CDNSClient::CDNSClient(CNetSubSystem*)>
   235a0:	e1a01007 	mov	r1, r7
   235a4:	e28d2010 	add	r2, sp, #16
   235a8:	e28d000c 	add	r0, sp, #12
   235ac:	eb0000af 	bl	23870 <CDNSClient::Resolve(char const*, CIPAddress*)>
   235b0:	e3500000 	cmp	r0, #0
   235b4:	0a00000d 	beq	235f0 <CNetSocket::Connect(char const*, char const*)+0xd4>
   235b8:	e5943000 	ldr	r3, [r4]
   235bc:	e1a00004 	mov	r0, r4
   235c0:	e593300c 	ldr	r3, [r3, #12]
   235c4:	e6ff2076 	uxth	r2, r6
   235c8:	e28d1010 	add	r1, sp, #16
   235cc:	e12fff33 	blx	r3
   235d0:	e1a04000 	mov	r4, r0
   235d4:	e28d000c 	add	r0, sp, #12
   235d8:	eb00005c 	bl	23750 <CDNSClient::~CDNSClient()>
   235dc:	e28d0010 	add	r0, sp, #16
   235e0:	ebfff5c7 	bl	20d04 <CIPAddress::~CIPAddress()>
   235e4:	e1a00004 	mov	r0, r4
   235e8:	e28dd01c 	add	sp, sp, #28
   235ec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   235f0:	eb000d37 	bl	26ad4 <CLogger::Get()>
   235f4:	e3a02004 	mov	r2, #4
   235f8:	e59f3064 	ldr	r3, [pc, #100]	; 23664 <CNetSocket::Connect(char const*, char const*)+0x148>
   235fc:	e59f1064 	ldr	r1, [pc, #100]	; 23668 <CNetSocket::Connect(char const*, char const*)+0x14c>
   23600:	e58d7000 	str	r7, [sp]
   23604:	eb000c74 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23608:	e3e04000 	mvn	r4, #0
   2360c:	eafffff0 	b	235d4 <CNetSocket::Connect(char const*, char const*)+0xb8>
   23610:	e3a0202a 	mov	r2, #42	; 0x2a
   23614:	e59f1050 	ldr	r1, [pc, #80]	; 2366c <CNetSocket::Connect(char const*, char const*)+0x150>
   23618:	e59f0050 	ldr	r0, [pc, #80]	; 23670 <CNetSocket::Connect(char const*, char const*)+0x154>
   2361c:	eb000444 	bl	24734 <assertion_failed>
   23620:	e3a0202b 	mov	r2, #43	; 0x2b
   23624:	e59f1040 	ldr	r1, [pc, #64]	; 2366c <CNetSocket::Connect(char const*, char const*)+0x150>
   23628:	e59f0044 	ldr	r0, [pc, #68]	; 23674 <CNetSocket::Connect(char const*, char const*)+0x158>
   2362c:	eb000440 	bl	24734 <assertion_failed>
   23630:	e3a02037 	mov	r2, #55	; 0x37
   23634:	e59f1030 	ldr	r1, [pc, #48]	; 2366c <CNetSocket::Connect(char const*, char const*)+0x150>
   23638:	e59f0038 	ldr	r0, [pc, #56]	; 23678 <CNetSocket::Connect(char const*, char const*)+0x15c>
   2363c:	eb00043c 	bl	24734 <assertion_failed>
   23640:	eb000d23 	bl	26ad4 <CLogger::Get()>
   23644:	e3a02004 	mov	r2, #4
   23648:	e59f302c 	ldr	r3, [pc, #44]	; 2367c <CNetSocket::Connect(char const*, char const*)+0x160>
   2364c:	e59f1014 	ldr	r1, [pc, #20]	; 23668 <CNetSocket::Connect(char const*, char const*)+0x14c>
   23650:	e58d5000 	str	r5, [sp]
   23654:	eb000c60 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23658:	e3e04000 	mvn	r4, #0
   2365c:	eaffffe0 	b	235e4 <CNetSocket::Connect(char const*, char const*)+0xc8>
   23660:	0000fffe 	.word	0x0000fffe
   23664:	00042e9c 	.word	0x00042e9c
   23668:	00042eb0 	.word	0x00042eb0
   2366c:	00042e68 	.word	0x00042e68
   23670:	0003ef50 	.word	0x0003ef50
   23674:	00042e78 	.word	0x00042e78
   23678:	00041d70 	.word	0x00041d70
   2367c:	00042e84 	.word	0x00042e84

00023680 <CNetSocket::CNetSocket(CNetSubSystem*)>:
   23680:	e59f2020 	ldr	r2, [pc, #32]	; 236a8 <CNetSocket::CNetSocket(CNetSubSystem*)+0x28>
   23684:	e3510000 	cmp	r1, #0
   23688:	e5801004 	str	r1, [r0, #4]
   2368c:	e5802000 	str	r2, [r0]
   23690:	112fff1e 	bxne	lr
   23694:	e3a02020 	mov	r2, #32
   23698:	e92d4010 	push	{r4, lr}
   2369c:	e59f1008 	ldr	r1, [pc, #8]	; 236ac <CNetSocket::CNetSocket(CNetSubSystem*)+0x2c>
   236a0:	e59f0008 	ldr	r0, [pc, #8]	; 236b0 <CNetSocket::CNetSocket(CNetSubSystem*)+0x30>
   236a4:	eb000422 	bl	24734 <assertion_failed>
   236a8:	00042ec4 	.word	0x00042ec4
   236ac:	00042e68 	.word	0x00042e68
   236b0:	00041d70 	.word	0x00041d70

000236b4 <CNetSocket::~CNetSocket()>:
   236b4:	e12fff1e 	bx	lr

000236b8 <CNetSocket::~CNetSocket()>:
   236b8:	e92d4010 	push	{r4, lr}
   236bc:	e1a04000 	mov	r4, r0
   236c0:	e3a01008 	mov	r1, #8
   236c4:	eb001e2f 	bl	2af88 <operator delete(void*, unsigned int)>
   236c8:	e1a00004 	mov	r0, r4
   236cc:	e8bd8010 	pop	{r4, pc}

000236d0 <CNetSocket::GetNetSubSystem()>:
   236d0:	e5900004 	ldr	r0, [r0, #4]
   236d4:	e3500000 	cmp	r0, #0
   236d8:	112fff1e 	bxne	lr
   236dc:	e3a02046 	mov	r2, #70	; 0x46
   236e0:	e92d4010 	push	{r4, lr}
   236e4:	e59f1004 	ldr	r1, [pc, #4]	; 236f0 <CNetSocket::GetNetSubSystem()+0x20>
   236e8:	e59f0004 	ldr	r0, [pc, #4]	; 236f4 <CNetSocket::GetNetSubSystem()+0x24>
   236ec:	eb000410 	bl	24734 <assertion_failed>
   236f0:	00042e68 	.word	0x00042e68
   236f4:	00041d70 	.word	0x00041d70

000236f8 <CNetSocket::Bind(unsigned short)>:
   236f8:	e3e00000 	mvn	r0, #0
   236fc:	e12fff1e 	bx	lr

00023700 <CNetSocket::Listen(unsigned int)>:
   23700:	e3e00000 	mvn	r0, #0
   23704:	e12fff1e 	bx	lr

00023708 <CNetSocket::Accept(CIPAddress*, unsigned short*)>:
   23708:	e3a00000 	mov	r0, #0
   2370c:	e12fff1e 	bx	lr

00023710 <CNetSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   23710:	e3e00000 	mvn	r0, #0
   23714:	e12fff1e 	bx	lr

00023718 <CNetSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   23718:	e3e00000 	mvn	r0, #0
   2371c:	e12fff1e 	bx	lr

00023720 <CNetSocket::SetOptionBroadcast(bool)>:
   23720:	e3e00000 	mvn	r0, #0
   23724:	e12fff1e 	bx	lr

00023728 <CDNSClient::CDNSClient(CNetSubSystem*)>:
   23728:	e3510000 	cmp	r1, #0
   2372c:	e5801000 	str	r1, [r0]
   23730:	112fff1e 	bxne	lr
   23734:	e3a02056 	mov	r2, #86	; 0x56
   23738:	e92d4010 	push	{r4, lr}
   2373c:	e59f1004 	ldr	r1, [pc, #4]	; 23748 <CDNSClient::CDNSClient(CNetSubSystem*)+0x20>
   23740:	e59f0004 	ldr	r0, [pc, #4]	; 2374c <CDNSClient::CDNSClient(CNetSubSystem*)+0x24>
   23744:	eb0003fa 	bl	24734 <assertion_failed>
   23748:	00042ef8 	.word	0x00042ef8
   2374c:	00041d70 	.word	0x00041d70

00023750 <CDNSClient::~CDNSClient()>:
   23750:	e12fff1e 	bx	lr

00023754 <CDNSClient::ConvertIPString(char const*, CIPAddress*)>:
   23754:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   23758:	e3a04000 	mov	r4, #0
   2375c:	e1a00001 	mov	r0, r1
   23760:	e1a07004 	mov	r7, r4
   23764:	e24dd00c 	sub	sp, sp, #12
   23768:	e3500000 	cmp	r0, #0
   2376c:	e1a06002 	mov	r6, r2
   23770:	e1a0500d 	mov	r5, sp
   23774:	e58d7004 	str	r7, [sp, #4]
   23778:	0a000013 	beq	237cc <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x78>
   2377c:	e3a0200a 	mov	r2, #10
   23780:	e28d1004 	add	r1, sp, #4
   23784:	eb001b38 	bl	2a46c <strtoul>
   23788:	e3540003 	cmp	r4, #3
   2378c:	e1a03000 	mov	r3, r0
   23790:	0a000011 	beq	237dc <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   23794:	e59d1004 	ldr	r1, [sp, #4]
   23798:	e3510000 	cmp	r1, #0
   2379c:	0a000026 	beq	2383c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   237a0:	e1d120d0 	ldrsb	r2, [r1]
   237a4:	e352002e 	cmp	r2, #46	; 0x2e
   237a8:	1a000023 	bne	2383c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   237ac:	e35000ff 	cmp	r0, #255	; 0xff
   237b0:	8a000021 	bhi	2383c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   237b4:	e2810001 	add	r0, r1, #1
   237b8:	e3500000 	cmp	r0, #0
   237bc:	e4c53001 	strb	r3, [r5], #1
   237c0:	e2844001 	add	r4, r4, #1
   237c4:	e58d7004 	str	r7, [sp, #4]
   237c8:	1affffeb 	bne	2377c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x28>
   237cc:	e59f2080 	ldr	r2, [pc, #128]	; 23854 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x100>
   237d0:	e59f1080 	ldr	r1, [pc, #128]	; 23858 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x104>
   237d4:	e59f0080 	ldr	r0, [pc, #128]	; 2385c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x108>
   237d8:	eb0003d5 	bl	24734 <assertion_failed>
   237dc:	e59d2004 	ldr	r2, [sp, #4]
   237e0:	e3520000 	cmp	r2, #0
   237e4:	0a00000d 	beq	23820 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xcc>
   237e8:	e1d220d0 	ldrsb	r2, [r2]
   237ec:	e3520000 	cmp	r2, #0
   237f0:	1a000011 	bne	2383c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   237f4:	e35000ff 	cmp	r0, #255	; 0xff
   237f8:	8a00000f 	bhi	2383c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   237fc:	e3560000 	cmp	r6, #0
   23800:	e5c53000 	strb	r3, [r5]
   23804:	0a00000e 	beq	23844 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xf0>
   23808:	e1a00006 	mov	r0, r6
   2380c:	e1a0100d 	mov	r1, sp
   23810:	ebfff5ac 	bl	20ec8 <CIPAddress::Set(unsigned char const*)>
   23814:	e3a00001 	mov	r0, #1
   23818:	e28dd00c 	add	sp, sp, #12
   2381c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   23820:	e35000ff 	cmp	r0, #255	; 0xff
   23824:	8a000004 	bhi	2383c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   23828:	e59f2030 	ldr	r2, [pc, #48]	; 23860 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x10c>
   2382c:	e59f1024 	ldr	r1, [pc, #36]	; 23858 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x104>
   23830:	e59f002c 	ldr	r0, [pc, #44]	; 23864 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x110>
   23834:	e5cd3003 	strb	r3, [sp, #3]
   23838:	eb0003bd 	bl	24734 <assertion_failed>
   2383c:	e3a00000 	mov	r0, #0
   23840:	eafffff4 	b	23818 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xc4>
   23844:	e59f201c 	ldr	r2, [pc, #28]	; 23868 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x114>
   23848:	e59f1008 	ldr	r1, [pc, #8]	; 23858 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x104>
   2384c:	e59f0018 	ldr	r0, [pc, #24]	; 2386c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x118>
   23850:	eb0003b7 	bl	24734 <assertion_failed>
   23854:	0000011a 	.word	0x0000011a
   23858:	00042ef8 	.word	0x00042ef8
   2385c:	00042f08 	.word	0x00042f08
   23860:	00000135 	.word	0x00000135
   23864:	00042f28 	.word	0x00042f28
   23868:	00000139 	.word	0x00000139
   2386c:	00042f18 	.word	0x00042f18

00023870 <CDNSClient::Resolve(char const*, CIPAddress*)>:
   23870:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23874:	e2515000 	subs	r5, r1, #0
   23878:	e24ddd17 	sub	sp, sp, #1472	; 0x5c0
   2387c:	e24dd004 	sub	sp, sp, #4
   23880:	0a000061 	beq	23a0c <CDNSClient::Resolve(char const*, CIPAddress*)+0x19c>
   23884:	e5d53000 	ldrb	r3, [r5]
   23888:	e1a04000 	mov	r4, r0
   2388c:	e2433031 	sub	r3, r3, #49	; 0x31
   23890:	e3530008 	cmp	r3, #8
   23894:	e1a07002 	mov	r7, r2
   23898:	9a000020 	bls	23920 <CDNSClient::Resolve(char const*, CIPAddress*)+0xb0>
   2389c:	e5940000 	ldr	r0, [r4]
   238a0:	e3500000 	cmp	r0, #0
   238a4:	0a00005c 	beq	23a1c <CDNSClient::Resolve(char const*, CIPAddress*)+0x1ac>
   238a8:	ebffd777 	bl	1968c <CNetSubSystem::GetConfig()>
   238ac:	ebfff4ab 	bl	20b60 <CNetConfig::GetDNSServer() const>
   238b0:	ebfff5b9 	bl	20f9c <CIPAddress::Get() const>
   238b4:	e1a01000 	mov	r1, r0
   238b8:	e28d0008 	add	r0, sp, #8
   238bc:	ebfff591 	bl	20f08 <CIPAddress::CIPAddress(unsigned char const*)>
   238c0:	e28d0008 	add	r0, sp, #8
   238c4:	ebfff5d7 	bl	21028 <CIPAddress::IsNull() const>
   238c8:	e2506000 	subs	r6, r0, #0
   238cc:	13a06000 	movne	r6, #0
   238d0:	0a000005 	beq	238ec <CDNSClient::Resolve(char const*, CIPAddress*)+0x7c>
   238d4:	e28d0008 	add	r0, sp, #8
   238d8:	ebfff509 	bl	20d04 <CIPAddress::~CIPAddress()>
   238dc:	e1a00006 	mov	r0, r6
   238e0:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   238e4:	e28dd004 	add	sp, sp, #4
   238e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   238ec:	e3a02011 	mov	r2, #17
   238f0:	e5941000 	ldr	r1, [r4]
   238f4:	e28d0020 	add	r0, sp, #32
   238f8:	ebfffe4c 	bl	23230 <CSocket::CSocket(CNetSubSystem*, int)>
   238fc:	e3a02035 	mov	r2, #53	; 0x35
   23900:	e28d0020 	add	r0, sp, #32
   23904:	e28d1008 	add	r1, sp, #8
   23908:	ebfffcab 	bl	22bbc <CSocket::Connect(CIPAddress&, unsigned short)>
   2390c:	e3500000 	cmp	r0, #0
   23910:	0a000009 	beq	2393c <CDNSClient::Resolve(char const*, CIPAddress*)+0xcc>
   23914:	e28d0020 	add	r0, sp, #32
   23918:	ebfffd19 	bl	22d84 <CSocket::~CSocket()>
   2391c:	eaffffec 	b	238d4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x64>
   23920:	ebffff8b 	bl	23754 <CDNSClient::ConvertIPString(char const*, CIPAddress*)>
   23924:	e2506000 	subs	r6, r0, #0
   23928:	0affffdb 	beq	2389c <CDNSClient::Resolve(char const*, CIPAddress*)+0x2c>
   2392c:	e1a00006 	mov	r0, r6
   23930:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   23934:	e28dd004 	add	sp, sp, #4
   23938:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2393c:	e28d8d07 	add	r8, sp, #448	; 0x1c0
   23940:	e3a02c02 	mov	r2, #512	; 0x200
   23944:	e1a01006 	mov	r1, r6
   23948:	e1a00008 	mov	r0, r8
   2394c:	eb001950 	bl	29e94 <memset>
   23950:	e3a02001 	mov	r2, #1
   23954:	e3a00c01 	mov	r0, #256	; 0x100
   23958:	e59f32ec 	ldr	r3, [pc, #748]	; 23c4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x3dc>
   2395c:	e1c820b2 	strh	r2, [r8, #2]
   23960:	e1d3a0b0 	ldrh	sl, [r3]
   23964:	e1a01005 	mov	r1, r5
   23968:	e08a2002 	add	r2, sl, r2
   2396c:	e6bfafba 	rev16	sl, sl
   23970:	e1c320b0 	strh	r2, [r3]
   23974:	e1c800b4 	strh	r0, [r8, #4]
   23978:	e3a020ff 	mov	r2, #255	; 0xff
   2397c:	e1c8a0b0 	strh	sl, [r8]
   23980:	e28d00c0 	add	r0, sp, #192	; 0xc0
   23984:	eb001a3f 	bl	2a288 <strncpy>
   23988:	e1a0200d 	mov	r2, sp
   2398c:	e59f12bc 	ldr	r1, [pc, #700]	; 23c50 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e0>
   23990:	e28d00c0 	add	r0, sp, #192	; 0xc0
   23994:	e5cd61bf 	strb	r6, [sp, #447]	; 0x1bf
   23998:	eb001a7d 	bl	2a394 <strtok_r>
   2399c:	e2504000 	subs	r4, r0, #0
   239a0:	e6ffa07a 	uxth	sl, sl
   239a4:	0a00004a 	beq	23ad4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x264>
   239a8:	e59f92a0 	ldr	r9, [pc, #672]	; 23c50 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e0>
   239ac:	e28d5f73 	add	r5, sp, #460	; 0x1cc
   239b0:	ea00000f 	b	239f4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x184>
   239b4:	e0453008 	sub	r3, r5, r8
   239b8:	e2633c02 	rsb	r3, r3, #512	; 0x200
   239bc:	e2802002 	add	r2, r0, #2
   239c0:	e1520003 	cmp	r2, r3
   239c4:	aaffffd2 	bge	23914 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   239c8:	e4c50001 	strb	r0, [r5], #1
   239cc:	e1a01004 	mov	r1, r4
   239d0:	e1a00005 	mov	r0, r5
   239d4:	eb001a20 	bl	2a25c <strcpy>
   239d8:	e1a0200d 	mov	r2, sp
   239dc:	e1a01009 	mov	r1, r9
   239e0:	e3a00000 	mov	r0, #0
   239e4:	eb001a6a 	bl	2a394 <strtok_r>
   239e8:	e2504000 	subs	r4, r0, #0
   239ec:	e085500b 	add	r5, r5, fp
   239f0:	0a00000d 	beq	23a2c <CDNSClient::Resolve(char const*, CIPAddress*)+0x1bc>
   239f4:	e1a00004 	mov	r0, r4
   239f8:	eb001973 	bl	29fcc <strlen>
   239fc:	e35000ff 	cmp	r0, #255	; 0xff
   23a00:	e1a0b000 	mov	fp, r0
   23a04:	9affffea 	bls	239b4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x144>
   23a08:	eaffffc1 	b	23914 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23a0c:	e3a02060 	mov	r2, #96	; 0x60
   23a10:	e59f123c 	ldr	r1, [pc, #572]	; 23c54 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   23a14:	e59f023c 	ldr	r0, [pc, #572]	; 23c58 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e8>
   23a18:	eb000345 	bl	24734 <assertion_failed>
   23a1c:	e3a0206a 	mov	r2, #106	; 0x6a
   23a20:	e59f122c 	ldr	r1, [pc, #556]	; 23c54 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   23a24:	e59f0230 	ldr	r0, [pc, #560]	; 23c5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x3ec>
   23a28:	eb000341 	bl	24734 <assertion_failed>
   23a2c:	e1a00005 	mov	r0, r5
   23a30:	e4c04001 	strb	r4, [r0], #1
   23a34:	e0403008 	sub	r3, r0, r8
   23a38:	e59f2220 	ldr	r2, [pc, #544]	; 23c60 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f0>
   23a3c:	e2633c02 	rsb	r3, r3, #512	; 0x200
   23a40:	e3530003 	cmp	r3, #3
   23a44:	e58d2004 	str	r2, [sp, #4]
   23a48:	daffffb1 	ble	23914 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23a4c:	e3a02004 	mov	r2, #4
   23a50:	e2855005 	add	r5, r5, #5
   23a54:	e08d1002 	add	r1, sp, r2
   23a58:	e0455008 	sub	r5, r5, r8
   23a5c:	eb001b55 	bl	2a7b8 <memcpy>
   23a60:	e3550c02 	cmp	r5, #512	; 0x200
   23a64:	ca000024 	bgt	23afc <CDNSClient::Resolve(char const*, CIPAddress*)+0x28c>
   23a68:	e3a09003 	mov	r9, #3
   23a6c:	e28dbd0f 	add	fp, sp, #960	; 0x3c0
   23a70:	e3a03000 	mov	r3, #0
   23a74:	e1a02005 	mov	r2, r5
   23a78:	e1a01008 	mov	r1, r8
   23a7c:	e28d0020 	add	r0, sp, #32
   23a80:	ebfffd47 	bl	22fa4 <CSocket::Send(void const*, unsigned int, int)>
   23a84:	e1500005 	cmp	r0, r5
   23a88:	1affffa1 	bne	23914 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23a8c:	eb00027c 	bl	24484 <CScheduler::Get()>
   23a90:	e3a01ffa 	mov	r1, #1000	; 0x3e8
   23a94:	eb000256 	bl	243f4 <CScheduler::MsSleep(unsigned int)>
   23a98:	e3a03040 	mov	r3, #64	; 0x40
   23a9c:	e3a02c02 	mov	r2, #512	; 0x200
   23aa0:	e1a0100b 	mov	r1, fp
   23aa4:	e28d0020 	add	r0, sp, #32
   23aa8:	ebfffd5b 	bl	2301c <CSocket::Receive(void*, unsigned int, int)>
   23aac:	e3500c02 	cmp	r0, #512	; 0x200
   23ab0:	e1a04000 	mov	r4, r0
   23ab4:	aa00000c 	bge	23aec <CDNSClient::Resolve(char const*, CIPAddress*)+0x27c>
   23ab8:	e3500000 	cmp	r0, #0
   23abc:	baffff94 	blt	23914 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23ac0:	e3500019 	cmp	r0, #25
   23ac4:	ca000010 	bgt	23b0c <CDNSClient::Resolve(char const*, CIPAddress*)+0x29c>
   23ac8:	e2599001 	subs	r9, r9, #1
   23acc:	1affffe7 	bne	23a70 <CDNSClient::Resolve(char const*, CIPAddress*)+0x200>
   23ad0:	eaffff8f 	b	23914 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23ad4:	e59f3184 	ldr	r3, [pc, #388]	; 23c60 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f0>
   23ad8:	e5cd61cc 	strb	r6, [sp, #460]	; 0x1cc
   23adc:	e58d3004 	str	r3, [sp, #4]
   23ae0:	e288000d 	add	r0, r8, #13
   23ae4:	e28d5f73 	add	r5, sp, #460	; 0x1cc
   23ae8:	eaffffd7 	b	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x1dc>
   23aec:	e3a020ba 	mov	r2, #186	; 0xba
   23af0:	e59f115c 	ldr	r1, [pc, #348]	; 23c54 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   23af4:	e59f0168 	ldr	r0, [pc, #360]	; 23c64 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f4>
   23af8:	eb00030d 	bl	24734 <assertion_failed>
   23afc:	e3a020a9 	mov	r2, #169	; 0xa9
   23b00:	e59f114c 	ldr	r1, [pc, #332]	; 23c54 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   23b04:	e59f015c 	ldr	r0, [pc, #348]	; 23c68 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f8>
   23b08:	eb000309 	bl	24734 <assertion_failed>
   23b0c:	e1db30b0 	ldrh	r3, [fp]
   23b10:	e153000a 	cmp	r3, sl
   23b14:	1affff7e 	bne	23914 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23b18:	e1db20b2 	ldrh	r2, [fp, #2]
   23b1c:	e59f3148 	ldr	r3, [pc, #328]	; 23c6c <CDNSClient::Resolve(char const*, CIPAddress*)+0x3fc>
   23b20:	e0033002 	and	r3, r3, r2
   23b24:	e3530080 	cmp	r3, #128	; 0x80
   23b28:	1affff79 	bne	23914 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23b2c:	e1db30b4 	ldrh	r3, [fp, #4]
   23b30:	e3530c01 	cmp	r3, #256	; 0x100
   23b34:	1affff76 	bne	23914 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23b38:	e1db30b6 	ldrh	r3, [fp, #6]
   23b3c:	e3530000 	cmp	r3, #0
   23b40:	0affff73 	beq	23914 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23b44:	e28d5ff3 	add	r5, sp, #972	; 0x3cc
   23b48:	ea000004 	b	23b60 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2f0>
   23b4c:	e2833001 	add	r3, r3, #1
   23b50:	e0855003 	add	r5, r5, r3
   23b54:	e045300b 	sub	r3, r5, fp
   23b58:	e1530004 	cmp	r3, r4
   23b5c:	aaffff6c 	bge	23914 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23b60:	e5d53000 	ldrb	r3, [r5]
   23b64:	e3530000 	cmp	r3, #0
   23b68:	1afffff7 	bne	23b4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x2dc>
   23b6c:	e2855005 	add	r5, r5, #5
   23b70:	e045300b 	sub	r3, r5, fp
   23b74:	e1530004 	cmp	r3, r4
   23b78:	aaffff65 	bge	23914 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23b7c:	e244800e 	sub	r8, r4, #14
   23b80:	e5d53000 	ldrb	r3, [r5]
   23b84:	e20320c0 	and	r2, r3, #192	; 0xc0
   23b88:	e35200c0 	cmp	r2, #192	; 0xc0
   23b8c:	02855002 	addeq	r5, r5, #2
   23b90:	1a000012 	bne	23be0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x370>
   23b94:	e045300b 	sub	r3, r5, fp
   23b98:	e1530008 	cmp	r3, r8
   23b9c:	caffff5c 	bgt	23914 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23ba0:	e3a0200e 	mov	r2, #14
   23ba4:	e1a01005 	mov	r1, r5
   23ba8:	e28d0010 	add	r0, sp, #16
   23bac:	eb001b01 	bl	2a7b8 <memcpy>
   23bb0:	e1dd31b0 	ldrh	r3, [sp, #16]
   23bb4:	e3530c01 	cmp	r3, #256	; 0x100
   23bb8:	0a000012 	beq	23c08 <CDNSClient::Resolve(char const*, CIPAddress*)+0x398>
   23bbc:	e1dd31b8 	ldrh	r3, [sp, #24]
   23bc0:	e6bf3fb3 	rev16	r3, r3
   23bc4:	e6ff3073 	uxth	r3, r3
   23bc8:	e283300a 	add	r3, r3, #10
   23bcc:	e0855003 	add	r5, r5, r3
   23bd0:	e045300b 	sub	r3, r5, fp
   23bd4:	e1530004 	cmp	r3, r4
   23bd8:	baffffe8 	blt	23b80 <CDNSClient::Resolve(char const*, CIPAddress*)+0x310>
   23bdc:	eaffff4c 	b	23914 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23be0:	e2855001 	add	r5, r5, #1
   23be4:	ea000002 	b	23bf4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x384>
   23be8:	e4d53001 	ldrb	r3, [r5], #1
   23bec:	e3530000 	cmp	r3, #0
   23bf0:	0affffe7 	beq	23b94 <CDNSClient::Resolve(char const*, CIPAddress*)+0x324>
   23bf4:	e0855003 	add	r5, r5, r3
   23bf8:	e045300b 	sub	r3, r5, fp
   23bfc:	e1530004 	cmp	r3, r4
   23c00:	bafffff8 	blt	23be8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x378>
   23c04:	eaffff42 	b	23914 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23c08:	e1dd31b2 	ldrh	r3, [sp, #18]
   23c0c:	e3530c01 	cmp	r3, #256	; 0x100
   23c10:	1affffe9 	bne	23bbc <CDNSClient::Resolve(char const*, CIPAddress*)+0x34c>
   23c14:	e1dd31b8 	ldrh	r3, [sp, #24]
   23c18:	e3530b01 	cmp	r3, #1024	; 0x400
   23c1c:	1affffe6 	bne	23bbc <CDNSClient::Resolve(char const*, CIPAddress*)+0x34c>
   23c20:	e3570000 	cmp	r7, #0
   23c24:	0a000004 	beq	23c3c <CDNSClient::Resolve(char const*, CIPAddress*)+0x3cc>
   23c28:	e1a00007 	mov	r0, r7
   23c2c:	e28d101a 	add	r1, sp, #26
   23c30:	ebfff4a4 	bl	20ec8 <CIPAddress::Set(unsigned char const*)>
   23c34:	e3a06001 	mov	r6, #1
   23c38:	eaffff35 	b	23914 <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   23c3c:	e59f202c 	ldr	r2, [pc, #44]	; 23c70 <CDNSClient::Resolve(char const*, CIPAddress*)+0x400>
   23c40:	e59f100c 	ldr	r1, [pc, #12]	; 23c54 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   23c44:	e59f0028 	ldr	r0, [pc, #40]	; 23c74 <CDNSClient::Resolve(char const*, CIPAddress*)+0x404>
   23c48:	eb0002b9 	bl	24734 <assertion_failed>
   23c4c:	000462f8 	.word	0x000462f8
   23c50:	0003d08c 	.word	0x0003d08c
   23c54:	00042ef8 	.word	0x00042ef8
   23c58:	00042f34 	.word	0x00042f34
   23c5c:	00041d70 	.word	0x00041d70
   23c60:	01000100 	.word	0x01000100
   23c64:	00042f64 	.word	0x00042f64
   23c68:	00042f44 	.word	0x00042f44
   23c6c:	00000ffa 	.word	0x00000ffa
   23c70:	0000010d 	.word	0x0000010d
   23c74:	00042f18 	.word	0x00042f18

00023c78 <CTask::Run()>:
   23c78:	e3a0203f 	mov	r2, #63	; 0x3f
   23c7c:	e92d4010 	push	{r4, lr}
   23c80:	e59f1004 	ldr	r1, [pc, #4]	; 23c8c <CTask::Run()+0x14>
   23c84:	e59f0004 	ldr	r0, [pc, #4]	; 23c90 <CTask::Run()+0x18>
   23c88:	eb0002a9 	bl	24734 <assertion_failed>
   23c8c:	00042f88 	.word	0x00042f88
   23c90:	0003e11c 	.word	0x0003e11c

00023c94 <CTask::TaskEntry(void*)>:
   23c94:	e92d4010 	push	{r4, lr}
   23c98:	e2504000 	subs	r4, r0, #0
   23c9c:	0a00000c 	beq	23cd4 <CTask::TaskEntry(void*)+0x40>
   23ca0:	e5943000 	ldr	r3, [r4]
   23ca4:	e5933008 	ldr	r3, [r3, #8]
   23ca8:	e12fff33 	blx	r3
   23cac:	e3a03003 	mov	r3, #3
   23cb0:	e28400d4 	add	r0, r4, #212	; 0xd4
   23cb4:	e5c43004 	strb	r3, [r4, #4]
   23cb8:	eb00021a 	bl	24528 <CSynchronizationEvent::Set()>
   23cbc:	eb0001f0 	bl	24484 <CScheduler::Get()>
   23cc0:	eb000164 	bl	24258 <CScheduler::Yield()>
   23cc4:	e3a0208c 	mov	r2, #140	; 0x8c
   23cc8:	e59f1014 	ldr	r1, [pc, #20]	; 23ce4 <CTask::TaskEntry(void*)+0x50>
   23ccc:	e59f0014 	ldr	r0, [pc, #20]	; 23ce8 <CTask::TaskEntry(void*)+0x54>
   23cd0:	eb000297 	bl	24734 <assertion_failed>
   23cd4:	e3a02084 	mov	r2, #132	; 0x84
   23cd8:	e59f1004 	ldr	r1, [pc, #4]	; 23ce4 <CTask::TaskEntry(void*)+0x50>
   23cdc:	e59f0008 	ldr	r0, [pc, #8]	; 23cec <CTask::TaskEntry(void*)+0x58>
   23ce0:	eb000293 	bl	24734 <assertion_failed>
   23ce4:	00042f88 	.word	0x00042f88
   23ce8:	0003e11c 	.word	0x0003e11c
   23cec:	0003d518 	.word	0x0003d518

00023cf0 <CTask::~CTask()>:
   23cf0:	e5d02004 	ldrb	r2, [r0, #4]
   23cf4:	e59f3050 	ldr	r3, [pc, #80]	; 23d4c <CTask::~CTask()+0x5c>
   23cf8:	e3520003 	cmp	r2, #3
   23cfc:	e92d4010 	push	{r4, lr}
   23d00:	e5803000 	str	r3, [r0]
   23d04:	1a00000c 	bne	23d3c <CTask::~CTask()+0x4c>
   23d08:	e1a04000 	mov	r4, r0
   23d0c:	e3a03004 	mov	r3, #4
   23d10:	e59000c8 	ldr	r0, [r0, #200]	; 0xc8
   23d14:	e5c43004 	strb	r3, [r4, #4]
   23d18:	e3500000 	cmp	r0, #0
   23d1c:	0a000000 	beq	23d24 <CTask::~CTask()+0x34>
   23d20:	eb001c97 	bl	2af84 <operator delete[](void*)>
   23d24:	e3a03000 	mov	r3, #0
   23d28:	e28400d4 	add	r0, r4, #212	; 0xd4
   23d2c:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   23d30:	eb0001ed 	bl	244ec <CSynchronizationEvent::~CSynchronizationEvent()>
   23d34:	e1a00004 	mov	r0, r4
   23d38:	e8bd8010 	pop	{r4, pc}
   23d3c:	e3a02036 	mov	r2, #54	; 0x36
   23d40:	e59f1008 	ldr	r1, [pc, #8]	; 23d50 <CTask::~CTask()+0x60>
   23d44:	e59f0008 	ldr	r0, [pc, #8]	; 23d54 <CTask::~CTask()+0x64>
   23d48:	eb000279 	bl	24734 <assertion_failed>
   23d4c:	00042ffc 	.word	0x00042ffc
   23d50:	00042f88 	.word	0x00042f88
   23d54:	00042f94 	.word	0x00042f94

00023d58 <CTask::~CTask()>:
   23d58:	e92d4010 	push	{r4, lr}
   23d5c:	e1a04000 	mov	r4, r0
   23d60:	ebffffe2 	bl	23cf0 <CTask::~CTask()>
   23d64:	e1a00004 	mov	r0, r4
   23d68:	e3a010dc 	mov	r1, #220	; 0xdc
   23d6c:	eb001c85 	bl	2af88 <operator delete(void*, unsigned int)>
   23d70:	e1a00004 	mov	r0, r4
   23d74:	e8bd8010 	pop	{r4, pc}

00023d78 <CTask::Terminate()>:
   23d78:	e3a03003 	mov	r3, #3
   23d7c:	e92d4010 	push	{r4, lr}
   23d80:	e28000d4 	add	r0, r0, #212	; 0xd4
   23d84:	e54030d0 	strb	r3, [r0, #-208]	; 0xffffff30
   23d88:	eb0001e6 	bl	24528 <CSynchronizationEvent::Set()>
   23d8c:	eb0001bc 	bl	24484 <CScheduler::Get()>
   23d90:	eb000130 	bl	24258 <CScheduler::Yield()>
   23d94:	e3a02048 	mov	r2, #72	; 0x48
   23d98:	e59f1004 	ldr	r1, [pc, #4]	; 23da4 <CTask::Terminate()+0x2c>
   23d9c:	e59f0004 	ldr	r0, [pc, #4]	; 23da8 <CTask::Terminate()+0x30>
   23da0:	eb000263 	bl	24734 <assertion_failed>
   23da4:	00042f88 	.word	0x00042f88
   23da8:	0003e11c 	.word	0x0003e11c

00023dac <CTask::WaitForTermination()>:
   23dac:	e28000d4 	add	r0, r0, #212	; 0xd4
   23db0:	ea0001ea 	b	24560 <CSynchronizationEvent::Wait()>

00023db4 <CTask::SetUserData(void*, unsigned int)>:
   23db4:	e0802102 	add	r2, r0, r2, lsl #2
   23db8:	e58210cc 	str	r1, [r2, #204]	; 0xcc
   23dbc:	e12fff1e 	bx	lr

00023dc0 <CTask::GetUserData(unsigned int)>:
   23dc0:	e0801101 	add	r1, r0, r1, lsl #2
   23dc4:	e59100cc 	ldr	r0, [r1, #204]	; 0xcc
   23dc8:	e12fff1e 	bx	lr

00023dcc <CTask::InitializeRegs()>:
   23dcc:	e92d4010 	push	{r4, lr}
   23dd0:	e1a04000 	mov	r4, r0
   23dd4:	e3a020b8 	mov	r2, #184	; 0xb8
   23dd8:	e3a01000 	mov	r1, #0
   23ddc:	e280000c 	add	r0, r0, #12
   23de0:	eb00182b 	bl	29e94 <memset>
   23de4:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   23de8:	e584400c 	str	r4, [r4, #12]
   23dec:	e3530000 	cmp	r3, #0
   23df0:	0a000008 	beq	23e18 <CTask::InitializeRegs()+0x4c>
   23df4:	e3a00101 	mov	r0, #1073741824	; 0x40000000
   23df8:	e3a01402 	mov	r1, #33554432	; 0x2000000
   23dfc:	e594c0c4 	ldr	ip, [r4, #196]	; 0xc4
   23e00:	e59f2020 	ldr	r2, [pc, #32]	; 23e28 <CTask::InitializeRegs()+0x5c>
   23e04:	e083300c 	add	r3, r3, ip
   23e08:	e1c401f0 	strd	r0, [r4, #16]
   23e0c:	e584303c 	str	r3, [r4, #60]	; 0x3c
   23e10:	e5842040 	str	r2, [r4, #64]	; 0x40
   23e14:	e8bd8010 	pop	{r4, pc}
   23e18:	e3a02062 	mov	r2, #98	; 0x62
   23e1c:	e59f1008 	ldr	r1, [pc, #8]	; 23e2c <CTask::InitializeRegs()+0x60>
   23e20:	e59f0008 	ldr	r0, [pc, #8]	; 23e30 <CTask::InitializeRegs()+0x64>
   23e24:	eb000242 	bl	24734 <assertion_failed>
   23e28:	00023c94 	.word	0x00023c94
   23e2c:	00042f88 	.word	0x00042f88
   23e30:	00042fb4 	.word	0x00042fb4

00023e34 <CTask::CTask(unsigned int)>:
   23e34:	e92d4070 	push	{r4, r5, r6, lr}
   23e38:	e3a05000 	mov	r5, #0
   23e3c:	e1a04000 	mov	r4, r0
   23e40:	e59f3084 	ldr	r3, [pc, #132]	; 23ecc <CTask::CTask(unsigned int)+0x98>
   23e44:	e58010c4 	str	r1, [r0, #196]	; 0xc4
   23e48:	e5803000 	str	r3, [r0]
   23e4c:	e5c05004 	strb	r5, [r0, #4]
   23e50:	e58050c8 	str	r5, [r0, #200]	; 0xc8
   23e54:	e1a01005 	mov	r1, r5
   23e58:	e28000d4 	add	r0, r0, #212	; 0xd4
   23e5c:	eb00019e 	bl	244dc <CSynchronizationEvent::CSynchronizationEvent(bool)>
   23e60:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   23e64:	e58450cc 	str	r5, [r4, #204]	; 0xcc
   23e68:	e1500005 	cmp	r0, r5
   23e6c:	e58450d0 	str	r5, [r4, #208]	; 0xd0
   23e70:	0a000008 	beq	23e98 <CTask::CTask(unsigned int)+0x64>
   23e74:	e3500b01 	cmp	r0, #1024	; 0x400
   23e78:	3a00000b 	bcc	23eac <CTask::CTask(unsigned int)+0x78>
   23e7c:	e3100003 	tst	r0, #3
   23e80:	1a00000d 	bne	23ebc <CTask::CTask(unsigned int)+0x88>
   23e84:	eb001c37 	bl	2af68 <operator new[](unsigned int)>
   23e88:	e1a03000 	mov	r3, r0
   23e8c:	e1a00004 	mov	r0, r4
   23e90:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   23e94:	ebffffcc 	bl	23dcc <CTask::InitializeRegs()>
   23e98:	eb000179 	bl	24484 <CScheduler::Get()>
   23e9c:	e1a01004 	mov	r1, r4
   23ea0:	eb000054 	bl	23ff8 <CScheduler::AddTask(CTask*)>
   23ea4:	e1a00004 	mov	r0, r4
   23ea8:	e8bd8070 	pop	{r4, r5, r6, pc}
   23eac:	e3a02025 	mov	r2, #37	; 0x25
   23eb0:	e59f1018 	ldr	r1, [pc, #24]	; 23ed0 <CTask::CTask(unsigned int)+0x9c>
   23eb4:	e59f0018 	ldr	r0, [pc, #24]	; 23ed4 <CTask::CTask(unsigned int)+0xa0>
   23eb8:	eb00021d 	bl	24734 <assertion_failed>
   23ebc:	e3a02027 	mov	r2, #39	; 0x27
   23ec0:	e59f1008 	ldr	r1, [pc, #8]	; 23ed0 <CTask::CTask(unsigned int)+0x9c>
   23ec4:	e59f000c 	ldr	r0, [pc, #12]	; 23ed8 <CTask::CTask(unsigned int)+0xa4>
   23ec8:	eb000219 	bl	24734 <assertion_failed>
   23ecc:	00042ffc 	.word	0x00042ffc
   23ed0:	00042f88 	.word	0x00042f88
   23ed4:	00042fc4 	.word	0x00042fc4
   23ed8:	00042fdc 	.word	0x00042fdc

00023edc <CScheduler::CScheduler()>:
   23edc:	e3a03000 	mov	r3, #0
   23ee0:	e59f2058 	ldr	r2, [pc, #88]	; 23f40 <CScheduler::CScheduler()+0x64>
   23ee4:	e92d4070 	push	{r4, r5, r6, lr}
   23ee8:	e5926000 	ldr	r6, [r2]
   23eec:	e5803050 	str	r3, [r0, #80]	; 0x50
   23ef0:	e1560003 	cmp	r6, r3
   23ef4:	e5803054 	str	r3, [r0, #84]	; 0x54
   23ef8:	e5803058 	str	r3, [r0, #88]	; 0x58
   23efc:	e580305c 	str	r3, [r0, #92]	; 0x5c
   23f00:	e5803060 	str	r3, [r0, #96]	; 0x60
   23f04:	1a000009 	bne	23f30 <CScheduler::CScheduler()+0x54>
   23f08:	e1a04000 	mov	r4, r0
   23f0c:	e3a000dc 	mov	r0, #220	; 0xdc
   23f10:	e5824000 	str	r4, [r2]
   23f14:	eb001c0d 	bl	2af50 <operator new(unsigned int)>
   23f18:	e1a05000 	mov	r5, r0
   23f1c:	e1a01006 	mov	r1, r6
   23f20:	ebffffc3 	bl	23e34 <CTask::CTask(unsigned int)>
   23f24:	e1a00004 	mov	r0, r4
   23f28:	e5845054 	str	r5, [r4, #84]	; 0x54
   23f2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23f30:	e3a02024 	mov	r2, #36	; 0x24
   23f34:	e59f1008 	ldr	r1, [pc, #8]	; 23f44 <CScheduler::CScheduler()+0x68>
   23f38:	e59f0008 	ldr	r0, [pc, #8]	; 23f48 <CScheduler::CScheduler()+0x6c>
   23f3c:	eb0001fc 	bl	24734 <assertion_failed>
   23f40:	0004c530 	.word	0x0004c530
   23f44:	00043008 	.word	0x00043008
   23f48:	00041d1c 	.word	0x00041d1c

00023f4c <CScheduler::~CScheduler()>:
   23f4c:	e3a02000 	mov	r2, #0
   23f50:	e59f3004 	ldr	r3, [pc, #4]	; 23f5c <CScheduler::~CScheduler()+0x10>
   23f54:	e5832000 	str	r2, [r3]
   23f58:	e12fff1e 	bx	lr
   23f5c:	0004c530 	.word	0x0004c530

00023f60 <CScheduler::GetCurrentTask()>:
   23f60:	e5900054 	ldr	r0, [r0, #84]	; 0x54
   23f64:	e12fff1e 	bx	lr

00023f68 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))>:
   23f68:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
   23f6c:	e92d4010 	push	{r4, lr}
   23f70:	e3530000 	cmp	r3, #0
   23f74:	1a000006 	bne	23f94 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x2c>
   23f78:	e3510000 	cmp	r1, #0
   23f7c:	e580105c 	str	r1, [r0, #92]	; 0x5c
   23f80:	18bd8010 	popne	{r4, pc}
   23f84:	e3a02080 	mov	r2, #128	; 0x80
   23f88:	e59f1014 	ldr	r1, [pc, #20]	; 23fa4 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x3c>
   23f8c:	e59f0014 	ldr	r0, [pc, #20]	; 23fa8 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x40>
   23f90:	eb0001e7 	bl	24734 <assertion_failed>
   23f94:	e3a0207e 	mov	r2, #126	; 0x7e
   23f98:	e59f1004 	ldr	r1, [pc, #4]	; 23fa4 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x3c>
   23f9c:	e59f0008 	ldr	r0, [pc, #8]	; 23fac <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x44>
   23fa0:	eb0001e3 	bl	24734 <assertion_failed>
   23fa4:	00043008 	.word	0x00043008
   23fa8:	00043034 	.word	0x00043034
   23fac:	00043018 	.word	0x00043018

00023fb0 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))>:
   23fb0:	e5903060 	ldr	r3, [r0, #96]	; 0x60
   23fb4:	e92d4010 	push	{r4, lr}
   23fb8:	e3530000 	cmp	r3, #0
   23fbc:	1a000006 	bne	23fdc <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x2c>
   23fc0:	e3510000 	cmp	r1, #0
   23fc4:	e5801060 	str	r1, [r0, #96]	; 0x60
   23fc8:	18bd8010 	popne	{r4, pc}
   23fcc:	e3a02087 	mov	r2, #135	; 0x87
   23fd0:	e59f1014 	ldr	r1, [pc, #20]	; 23fec <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x3c>
   23fd4:	e59f0014 	ldr	r0, [pc, #20]	; 23ff0 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x40>
   23fd8:	eb0001d5 	bl	24734 <assertion_failed>
   23fdc:	e3a02085 	mov	r2, #133	; 0x85
   23fe0:	e59f1004 	ldr	r1, [pc, #4]	; 23fec <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x3c>
   23fe4:	e59f0008 	ldr	r0, [pc, #8]	; 23ff4 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x44>
   23fe8:	eb0001d1 	bl	24734 <assertion_failed>
   23fec:	00043008 	.word	0x00043008
   23ff0:	00043070 	.word	0x00043070
   23ff4:	00043050 	.word	0x00043050

00023ff8 <CScheduler::AddTask(CTask*)>:
   23ff8:	e92d4070 	push	{r4, r5, r6, lr}
   23ffc:	e2515000 	subs	r5, r1, #0
   24000:	0a00001a 	beq	24070 <CScheduler::AddTask(CTask*)+0x78>
   24004:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   24008:	e1a04000 	mov	r4, r0
   2400c:	e35e0000 	cmp	lr, #0
   24010:	0a000012 	beq	24060 <CScheduler::AddTask(CTask*)+0x68>
   24014:	e3a03000 	mov	r3, #0
   24018:	e2402004 	sub	r2, r0, #4
   2401c:	ea000002 	b	2402c <CScheduler::AddTask(CTask*)+0x34>
   24020:	e2833001 	add	r3, r3, #1
   24024:	e15e0003 	cmp	lr, r3
   24028:	0a000004 	beq	24040 <CScheduler::AddTask(CTask*)+0x48>
   2402c:	e5b2c004 	ldr	ip, [r2, #4]!
   24030:	e35c0000 	cmp	ip, #0
   24034:	1afffff9 	bne	24020 <CScheduler::AddTask(CTask*)+0x28>
   24038:	e7845103 	str	r5, [r4, r3, lsl #2]
   2403c:	e8bd8070 	pop	{r4, r5, r6, pc}
   24040:	e35e0014 	cmp	lr, #20
   24044:	1a000005 	bne	24060 <CScheduler::AddTask(CTask*)+0x68>
   24048:	eb000aa1 	bl	26ad4 <CLogger::Get()>
   2404c:	e3a02000 	mov	r2, #0
   24050:	e59f3028 	ldr	r3, [pc, #40]	; 24080 <CScheduler::AddTask(CTask*)+0x88>
   24054:	e59f1028 	ldr	r1, [pc, #40]	; 24084 <CScheduler::AddTask(CTask*)+0x8c>
   24058:	eb0009df 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2405c:	e594e050 	ldr	lr, [r4, #80]	; 0x50
   24060:	e28e3001 	add	r3, lr, #1
   24064:	e5843050 	str	r3, [r4, #80]	; 0x50
   24068:	e784510e 	str	r5, [r4, lr, lsl #2]
   2406c:	e8bd8070 	pop	{r4, r5, r6, pc}
   24070:	e3a0208c 	mov	r2, #140	; 0x8c
   24074:	e59f100c 	ldr	r1, [pc, #12]	; 24088 <CScheduler::AddTask(CTask*)+0x90>
   24078:	e59f000c 	ldr	r0, [pc, #12]	; 2408c <CScheduler::AddTask(CTask*)+0x94>
   2407c:	eb0001ac 	bl	24734 <assertion_failed>
   24080:	0004309c 	.word	0x0004309c
   24084:	00043160 	.word	0x00043160
   24088:	00043008 	.word	0x00043008
   2408c:	00043090 	.word	0x00043090

00024090 <CScheduler::RemoveTask(CTask*)>:
   24090:	e92d4010 	push	{r4, lr}
   24094:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   24098:	e35e0000 	cmp	lr, #0
   2409c:	0a00000e 	beq	240dc <CScheduler::RemoveTask(CTask*)+0x4c>
   240a0:	e3a03000 	mov	r3, #0
   240a4:	e2402004 	sub	r2, r0, #4
   240a8:	ea000002 	b	240b8 <CScheduler::RemoveTask(CTask*)+0x28>
   240ac:	e2833001 	add	r3, r3, #1
   240b0:	e15e0003 	cmp	lr, r3
   240b4:	0a000008 	beq	240dc <CScheduler::RemoveTask(CTask*)+0x4c>
   240b8:	e5b2c004 	ldr	ip, [r2, #4]!
   240bc:	e15c0001 	cmp	ip, r1
   240c0:	1afffff9 	bne	240ac <CScheduler::RemoveTask(CTask*)+0x1c>
   240c4:	e3a02000 	mov	r2, #0
   240c8:	e24ee001 	sub	lr, lr, #1
   240cc:	e15e0003 	cmp	lr, r3
   240d0:	e7802103 	str	r2, [r0, r3, lsl #2]
   240d4:	05803050 	streq	r3, [r0, #80]	; 0x50
   240d8:	e8bd8010 	pop	{r4, pc}
   240dc:	e3a020b2 	mov	r2, #178	; 0xb2
   240e0:	e59f1004 	ldr	r1, [pc, #4]	; 240ec <CScheduler::RemoveTask(CTask*)+0x5c>
   240e4:	e59f0004 	ldr	r0, [pc, #4]	; 240f0 <CScheduler::RemoveTask(CTask*)+0x60>
   240e8:	eb000191 	bl	24734 <assertion_failed>
   240ec:	00043008 	.word	0x00043008
   240f0:	0003e11c 	.word	0x0003e11c

000240f4 <CScheduler::WakeTask(CTask**)>:
   240f4:	e3510000 	cmp	r1, #0
   240f8:	e92d4010 	push	{r4, lr}
   240fc:	0a000009 	beq	24128 <CScheduler::WakeTask(CTask**)+0x34>
   24100:	e3a02000 	mov	r2, #0
   24104:	e5913000 	ldr	r3, [r1]
   24108:	e5812000 	str	r2, [r1]
   2410c:	e1530002 	cmp	r3, r2
   24110:	0a000008 	beq	24138 <CScheduler::WakeTask(CTask**)+0x44>
   24114:	e5d31004 	ldrb	r1, [r3, #4]
   24118:	e3510001 	cmp	r1, #1
   2411c:	1a000009 	bne	24148 <CScheduler::WakeTask(CTask**)+0x54>
   24120:	e5c32004 	strb	r2, [r3, #4]
   24124:	e8bd8010 	pop	{r4, pc}
   24128:	e3a020c3 	mov	r2, #195	; 0xc3
   2412c:	e59f1024 	ldr	r1, [pc, #36]	; 24158 <CScheduler::WakeTask(CTask**)+0x64>
   24130:	e59f0024 	ldr	r0, [pc, #36]	; 2415c <CScheduler::WakeTask(CTask**)+0x68>
   24134:	eb00017e 	bl	24734 <assertion_failed>
   24138:	e3a020cf 	mov	r2, #207	; 0xcf
   2413c:	e59f1014 	ldr	r1, [pc, #20]	; 24158 <CScheduler::WakeTask(CTask**)+0x64>
   24140:	e59f0018 	ldr	r0, [pc, #24]	; 24160 <CScheduler::WakeTask(CTask**)+0x6c>
   24144:	eb00017a 	bl	24734 <assertion_failed>
   24148:	e3a020d0 	mov	r2, #208	; 0xd0
   2414c:	e59f1004 	ldr	r1, [pc, #4]	; 24158 <CScheduler::WakeTask(CTask**)+0x64>
   24150:	e59f000c 	ldr	r0, [pc, #12]	; 24164 <CScheduler::WakeTask(CTask**)+0x70>
   24154:	eb000176 	bl	24734 <assertion_failed>
   24158:	00043008 	.word	0x00043008
   2415c:	000430bc 	.word	0x000430bc
   24160:	00043090 	.word	0x00043090
   24164:	000430c8 	.word	0x000430c8

00024168 <CScheduler::GetNextTask()>:
   24168:	e92d4070 	push	{r4, r5, r6, lr}
   2416c:	e1a05000 	mov	r5, r0
   24170:	e5904058 	ldr	r4, [r0, #88]	; 0x58
   24174:	e3540014 	cmp	r4, #20
   24178:	23a04000 	movcs	r4, #0
   2417c:	eb001738 	bl	29e64 <CTimer::Get()>
   24180:	eb00147e 	bl	29380 <CTimer::GetClockTicks()>
   24184:	e5953050 	ldr	r3, [r5, #80]	; 0x50
   24188:	e3530000 	cmp	r3, #0
   2418c:	0a000020 	beq	24214 <CScheduler::GetNextTask()+0xac>
   24190:	e3a01001 	mov	r1, #1
   24194:	e2844001 	add	r4, r4, #1
   24198:	e1540003 	cmp	r4, r3
   2419c:	23a04000 	movcs	r4, #0
   241a0:	e7956104 	ldr	r6, [r5, r4, lsl #2]
   241a4:	e3560000 	cmp	r6, #0
   241a8:	0a000016 	beq	24208 <CScheduler::GetNextTask()+0xa0>
   241ac:	e5d62004 	ldrb	r2, [r6, #4]
   241b0:	e3520003 	cmp	r2, #3
   241b4:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   241b8:	ea00001f 	b	2423c <CScheduler::GetNextTask()+0xd4>
   241bc:	00024200 	.word	0x00024200
   241c0:	00024208 	.word	0x00024208
   241c4:	0002421c 	.word	0x0002421c
   241c8:	000241cc 	.word	0x000241cc
   241cc:	e5953060 	ldr	r3, [r5, #96]	; 0x60
   241d0:	e3530000 	cmp	r3, #0
   241d4:	0a000001 	beq	241e0 <CScheduler::GetNextTask()+0x78>
   241d8:	e1a00006 	mov	r0, r6
   241dc:	e12fff33 	blx	r3
   241e0:	e1a00005 	mov	r0, r5
   241e4:	e1a01006 	mov	r1, r6
   241e8:	ebffffa8 	bl	24090 <CScheduler::RemoveTask(CTask*)>
   241ec:	e5963000 	ldr	r3, [r6]
   241f0:	e1a00006 	mov	r0, r6
   241f4:	e5933004 	ldr	r3, [r3, #4]
   241f8:	e12fff33 	blx	r3
   241fc:	e3a04014 	mov	r4, #20
   24200:	e1a00004 	mov	r0, r4
   24204:	e8bd8070 	pop	{r4, r5, r6, pc}
   24208:	e2811001 	add	r1, r1, #1
   2420c:	e1510003 	cmp	r1, r3
   24210:	9affffdf 	bls	24194 <CScheduler::GetNextTask()+0x2c>
   24214:	e3a04014 	mov	r4, #20
   24218:	eafffff8 	b	24200 <CScheduler::GetNextTask()+0x98>
   2421c:	e5962008 	ldr	r2, [r6, #8]
   24220:	e0422000 	sub	r2, r2, r0
   24224:	e3520000 	cmp	r2, #0
   24228:	cafffff6 	bgt	24208 <CScheduler::GetNextTask()+0xa0>
   2422c:	e3a03000 	mov	r3, #0
   24230:	e1a00004 	mov	r0, r4
   24234:	e5c63004 	strb	r3, [r6, #4]
   24238:	e8bd8070 	pop	{r4, r5, r6, pc}
   2423c:	e59f2008 	ldr	r2, [pc, #8]	; 2424c <CScheduler::GetNextTask()+0xe4>
   24240:	e59f1008 	ldr	r1, [pc, #8]	; 24250 <CScheduler::GetNextTask()+0xe8>
   24244:	e59f0008 	ldr	r0, [pc, #8]	; 24254 <CScheduler::GetNextTask()+0xec>
   24248:	eb000139 	bl	24734 <assertion_failed>
   2424c:	00000103 	.word	0x00000103
   24250:	00043008 	.word	0x00043008
   24254:	0003e11c 	.word	0x0003e11c

00024258 <CScheduler::Yield()>:
   24258:	e92d4030 	push	{r4, r5, lr}
   2425c:	e1a04000 	mov	r4, r0
   24260:	e24dd00c 	sub	sp, sp, #12
   24264:	e1a00004 	mov	r0, r4
   24268:	ebffffbe 	bl	24168 <CScheduler::GetNextTask()>
   2426c:	e3500014 	cmp	r0, #20
   24270:	e5840058 	str	r0, [r4, #88]	; 0x58
   24274:	1a000006 	bne	24294 <CScheduler::Yield()+0x3c>
   24278:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   2427c:	e3530000 	cmp	r3, #0
   24280:	1afffff7 	bne	24264 <CScheduler::Yield()+0xc>
   24284:	e3a02037 	mov	r2, #55	; 0x37
   24288:	e59f1080 	ldr	r1, [pc, #128]	; 24310 <CScheduler::Yield()+0xb8>
   2428c:	e59f0080 	ldr	r0, [pc, #128]	; 24314 <CScheduler::Yield()+0xbc>
   24290:	eb000127 	bl	24734 <assertion_failed>
   24294:	e3500013 	cmp	r0, #19
   24298:	8a000014 	bhi	242f0 <CScheduler::Yield()+0x98>
   2429c:	e7940100 	ldr	r0, [r4, r0, lsl #2]
   242a0:	e3500000 	cmp	r0, #0
   242a4:	0a000015 	beq	24300 <CScheduler::Yield()+0xa8>
   242a8:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   242ac:	e1530000 	cmp	r3, r0
   242b0:	0a00000c 	beq	242e8 <CScheduler::Yield()+0x90>
   242b4:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   242b8:	e283500c 	add	r5, r3, #12
   242bc:	e3520000 	cmp	r2, #0
   242c0:	e5840054 	str	r0, [r4, #84]	; 0x54
   242c4:	e280100c 	add	r1, r0, #12
   242c8:	0a000002 	beq	242d8 <CScheduler::Yield()+0x80>
   242cc:	e58d1004 	str	r1, [sp, #4]
   242d0:	e12fff32 	blx	r2
   242d4:	e59d1004 	ldr	r1, [sp, #4]
   242d8:	e1a00005 	mov	r0, r5
   242dc:	e28dd00c 	add	sp, sp, #12
   242e0:	e8bd4030 	pop	{r4, r5, lr}
   242e4:	ea000073 	b	244b8 <TaskSwitch>
   242e8:	e28dd00c 	add	sp, sp, #12
   242ec:	e8bd8030 	pop	{r4, r5, pc}
   242f0:	e3a0203a 	mov	r2, #58	; 0x3a
   242f4:	e59f1014 	ldr	r1, [pc, #20]	; 24310 <CScheduler::Yield()+0xb8>
   242f8:	e59f0018 	ldr	r0, [pc, #24]	; 24318 <CScheduler::Yield()+0xc0>
   242fc:	eb00010c 	bl	24734 <assertion_failed>
   24300:	e3a0203c 	mov	r2, #60	; 0x3c
   24304:	e59f1004 	ldr	r1, [pc, #4]	; 24310 <CScheduler::Yield()+0xb8>
   24308:	e59f000c 	ldr	r0, [pc, #12]	; 2431c <CScheduler::Yield()+0xc4>
   2430c:	eb000108 	bl	24734 <assertion_failed>
   24310:	00043008 	.word	0x00043008
   24314:	000430f0 	.word	0x000430f0
   24318:	00043100 	.word	0x00043100
   2431c:	00043118 	.word	0x00043118

00024320 <CScheduler::usSleep(unsigned int)>:
   24320:	e92d4070 	push	{r4, r5, r6, lr}
   24324:	e2514000 	subs	r4, r1, #0
   24328:	08bd8070 	popeq	{r4, r5, r6, pc}
   2432c:	e1a05000 	mov	r5, r0
   24330:	eb0016cb 	bl	29e64 <CTimer::Get()>
   24334:	eb001411 	bl	29380 <CTimer::GetClockTicks()>
   24338:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   2433c:	e3530000 	cmp	r3, #0
   24340:	0a000009 	beq	2436c <CScheduler::usSleep(unsigned int)+0x4c>
   24344:	e5d32004 	ldrb	r2, [r3, #4]
   24348:	e3520000 	cmp	r2, #0
   2434c:	1a00000a 	bne	2437c <CScheduler::usSleep(unsigned int)+0x5c>
   24350:	e3a02002 	mov	r2, #2
   24354:	e0841000 	add	r1, r4, r0
   24358:	e5831008 	str	r1, [r3, #8]
   2435c:	e1a00005 	mov	r0, r5
   24360:	e8bd4070 	pop	{r4, r5, r6, lr}
   24364:	e5c32004 	strb	r2, [r3, #4]
   24368:	eaffffba 	b	24258 <CScheduler::Yield()>
   2436c:	e3a0206e 	mov	r2, #110	; 0x6e
   24370:	e59f1014 	ldr	r1, [pc, #20]	; 2438c <CScheduler::usSleep(unsigned int)+0x6c>
   24374:	e59f0014 	ldr	r0, [pc, #20]	; 24390 <CScheduler::usSleep(unsigned int)+0x70>
   24378:	eb0000ed 	bl	24734 <assertion_failed>
   2437c:	e3a0206f 	mov	r2, #111	; 0x6f
   24380:	e59f1004 	ldr	r1, [pc, #4]	; 2438c <CScheduler::usSleep(unsigned int)+0x6c>
   24384:	e59f0008 	ldr	r0, [pc, #8]	; 24394 <CScheduler::usSleep(unsigned int)+0x74>
   24388:	eb0000e9 	bl	24734 <assertion_failed>
   2438c:	00043008 	.word	0x00043008
   24390:	00043124 	.word	0x00043124
   24394:	00043134 	.word	0x00043134

00024398 <CScheduler::Sleep(unsigned int)>:
   24398:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2439c:	e59f6048 	ldr	r6, [pc, #72]	; 243ec <CScheduler::Sleep(unsigned int)+0x54>
   243a0:	e1a04001 	mov	r4, r1
   243a4:	e1510006 	cmp	r1, r6
   243a8:	e1a05000 	mov	r5, r0
   243ac:	9a000007 	bls	243d0 <CScheduler::Sleep(unsigned int)+0x38>
   243b0:	e59f7038 	ldr	r7, [pc, #56]	; 243f0 <CScheduler::Sleep(unsigned int)+0x58>
   243b4:	e2444c07 	sub	r4, r4, #1792	; 0x700
   243b8:	e1a01007 	mov	r1, r7
   243bc:	e1a00005 	mov	r0, r5
   243c0:	e2444008 	sub	r4, r4, #8
   243c4:	ebffffd5 	bl	24320 <CScheduler::usSleep(unsigned int)>
   243c8:	e1540006 	cmp	r4, r6
   243cc:	8afffff8 	bhi	243b4 <CScheduler::Sleep(unsigned int)+0x1c>
   243d0:	e0641284 	rsb	r1, r4, r4, lsl #5
   243d4:	e0611301 	rsb	r1, r1, r1, lsl #6
   243d8:	e0841181 	add	r1, r4, r1, lsl #3
   243dc:	e1a00005 	mov	r0, r5
   243e0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   243e4:	e1a01301 	lsl	r1, r1, #6
   243e8:	eaffffcc 	b	24320 <CScheduler::usSleep(unsigned int)>
   243ec:	00000708 	.word	0x00000708
   243f0:	6b49d200 	.word	0x6b49d200

000243f4 <CScheduler::MsSleep(unsigned int)>:
   243f4:	e3510000 	cmp	r1, #0
   243f8:	012fff1e 	bxeq	lr
   243fc:	e0613281 	rsb	r3, r1, r1, lsl #5
   24400:	e0811103 	add	r1, r1, r3, lsl #2
   24404:	e1a01181 	lsl	r1, r1, #3
   24408:	eaffffc4 	b	24320 <CScheduler::usSleep(unsigned int)>

0002440c <CScheduler::BlockTask(CTask**)>:
   2440c:	e3510000 	cmp	r1, #0
   24410:	e92d4010 	push	{r4, lr}
   24414:	0a00000a 	beq	24444 <CScheduler::BlockTask(CTask**)+0x38>
   24418:	e5903054 	ldr	r3, [r0, #84]	; 0x54
   2441c:	e3530000 	cmp	r3, #0
   24420:	e5813000 	str	r3, [r1]
   24424:	0a00000a 	beq	24454 <CScheduler::BlockTask(CTask**)+0x48>
   24428:	e5d32004 	ldrb	r2, [r3, #4]
   2442c:	e3520000 	cmp	r2, #0
   24430:	1a00000b 	bne	24464 <CScheduler::BlockTask(CTask**)+0x58>
   24434:	e8bd4010 	pop	{r4, lr}
   24438:	e3a02001 	mov	r2, #1
   2443c:	e5c32004 	strb	r2, [r3, #4]
   24440:	eaffff84 	b	24258 <CScheduler::Yield()>
   24444:	e3a020b7 	mov	r2, #183	; 0xb7
   24448:	e59f1024 	ldr	r1, [pc, #36]	; 24474 <CScheduler::BlockTask(CTask**)+0x68>
   2444c:	e59f0024 	ldr	r0, [pc, #36]	; 24478 <CScheduler::BlockTask(CTask**)+0x6c>
   24450:	eb0000b7 	bl	24734 <assertion_failed>
   24454:	e3a020ba 	mov	r2, #186	; 0xba
   24458:	e59f1014 	ldr	r1, [pc, #20]	; 24474 <CScheduler::BlockTask(CTask**)+0x68>
   2445c:	e59f0018 	ldr	r0, [pc, #24]	; 2447c <CScheduler::BlockTask(CTask**)+0x70>
   24460:	eb0000b3 	bl	24734 <assertion_failed>
   24464:	e3a020bb 	mov	r2, #187	; 0xbb
   24468:	e59f1004 	ldr	r1, [pc, #4]	; 24474 <CScheduler::BlockTask(CTask**)+0x68>
   2446c:	e59f000c 	ldr	r0, [pc, #12]	; 24480 <CScheduler::BlockTask(CTask**)+0x74>
   24470:	eb0000af 	bl	24734 <assertion_failed>
   24474:	00043008 	.word	0x00043008
   24478:	000430bc 	.word	0x000430bc
   2447c:	00043124 	.word	0x00043124
   24480:	00043134 	.word	0x00043134

00024484 <CScheduler::Get()>:
   24484:	e59f301c 	ldr	r3, [pc, #28]	; 244a8 <CScheduler::Get()+0x24>
   24488:	e5930000 	ldr	r0, [r3]
   2448c:	e3500000 	cmp	r0, #0
   24490:	112fff1e 	bxne	lr
   24494:	e92d4010 	push	{r4, lr}
   24498:	e59f200c 	ldr	r2, [pc, #12]	; 244ac <CScheduler::Get()+0x28>
   2449c:	e59f100c 	ldr	r1, [pc, #12]	; 244b0 <CScheduler::Get()+0x2c>
   244a0:	e59f000c 	ldr	r0, [pc, #12]	; 244b4 <CScheduler::Get()+0x30>
   244a4:	eb0000a2 	bl	24734 <assertion_failed>
   244a8:	0004c530 	.word	0x0004c530
   244ac:	0000010d 	.word	0x0000010d
   244b0:	00043008 	.word	0x00043008
   244b4:	00041d54 	.word	0x00041d54

000244b8 <TaskSwitch>:
   244b8:	eef82a10 	vmrs	r2, fpexc
   244bc:	eef13a10 	vmrs	r3, fpscr
   244c0:	e8a07ffd 	stmia	r0!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   244c4:	ec800b20 	vstmia	r0, {d0-d15}
   244c8:	e8b17ffd 	ldm	r1!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   244cc:	eee82a10 	vmsr	fpexc, r2
   244d0:	eee13a10 	vmsr	fpscr, r3
   244d4:	ec910b20 	vldmia	r1, {d0-d15}
   244d8:	e12fff1e 	bx	lr

000244dc <CSynchronizationEvent::CSynchronizationEvent(bool)>:
   244dc:	e3a02000 	mov	r2, #0
   244e0:	e5c01000 	strb	r1, [r0]
   244e4:	e5802004 	str	r2, [r0, #4]
   244e8:	e12fff1e 	bx	lr

000244ec <CSynchronizationEvent::~CSynchronizationEvent()>:
   244ec:	e5903004 	ldr	r3, [r0, #4]
   244f0:	e3530000 	cmp	r3, #0
   244f4:	012fff1e 	bxeq	lr
   244f8:	e3a02023 	mov	r2, #35	; 0x23
   244fc:	e92d4010 	push	{r4, lr}
   24500:	e59f1004 	ldr	r1, [pc, #4]	; 2450c <CSynchronizationEvent::~CSynchronizationEvent()+0x20>
   24504:	e59f0004 	ldr	r0, [pc, #4]	; 24510 <CSynchronizationEvent::~CSynchronizationEvent()+0x24>
   24508:	eb000089 	bl	24734 <assertion_failed>
   2450c:	00043168 	.word	0x00043168
   24510:	00043184 	.word	0x00043184

00024514 <CSynchronizationEvent::GetState()>:
   24514:	e5d00000 	ldrb	r0, [r0]
   24518:	e12fff1e 	bx	lr

0002451c <CSynchronizationEvent::Clear()>:
   2451c:	e3a03000 	mov	r3, #0
   24520:	e5c03000 	strb	r3, [r0]
   24524:	e12fff1e 	bx	lr

00024528 <CSynchronizationEvent::Set()>:
   24528:	e5d03000 	ldrb	r3, [r0]
   2452c:	e3530000 	cmp	r3, #0
   24530:	112fff1e 	bxne	lr
   24534:	e3a02001 	mov	r2, #1
   24538:	e5903004 	ldr	r3, [r0, #4]
   2453c:	e92d4010 	push	{r4, lr}
   24540:	e3530000 	cmp	r3, #0
   24544:	e1a04000 	mov	r4, r0
   24548:	e5c02000 	strb	r2, [r0]
   2454c:	08bd8010 	popeq	{r4, pc}
   24550:	ebffffcb 	bl	24484 <CScheduler::Get()>
   24554:	e2841004 	add	r1, r4, #4
   24558:	e8bd4010 	pop	{r4, lr}
   2455c:	eafffee4 	b	240f4 <CScheduler::WakeTask(CTask**)>

00024560 <CSynchronizationEvent::Wait()>:
   24560:	e5d03000 	ldrb	r3, [r0]
   24564:	e3530000 	cmp	r3, #0
   24568:	112fff1e 	bxne	lr
   2456c:	e5903004 	ldr	r3, [r0, #4]
   24570:	e92d4010 	push	{r4, lr}
   24574:	e3530000 	cmp	r3, #0
   24578:	e1a04000 	mov	r4, r0
   2457c:	1a000009 	bne	245a8 <CSynchronizationEvent::Wait()+0x48>
   24580:	ebffffbf 	bl	24484 <CScheduler::Get()>
   24584:	e2841004 	add	r1, r4, #4
   24588:	ebffff9f 	bl	2440c <CScheduler::BlockTask(CTask**)>
   2458c:	e5d43000 	ldrb	r3, [r4]
   24590:	e3530000 	cmp	r3, #0
   24594:	18bd8010 	popne	{r4, pc}
   24598:	e3a0204c 	mov	r2, #76	; 0x4c
   2459c:	e59f1014 	ldr	r1, [pc, #20]	; 245b8 <CSynchronizationEvent::Wait()+0x58>
   245a0:	e59f0014 	ldr	r0, [pc, #20]	; 245bc <CSynchronizationEvent::Wait()+0x5c>
   245a4:	eb000062 	bl	24734 <assertion_failed>
   245a8:	e3a02049 	mov	r2, #73	; 0x49
   245ac:	e59f1004 	ldr	r1, [pc, #4]	; 245b8 <CSynchronizationEvent::Wait()+0x58>
   245b0:	e59f0008 	ldr	r0, [pc, #8]	; 245c0 <CSynchronizationEvent::Wait()+0x60>
   245b4:	eb00005e 	bl	24734 <assertion_failed>
   245b8:	00043168 	.word	0x00043168
   245bc:	00043198 	.word	0x00043198
   245c0:	00043184 	.word	0x00043184

000245c4 <CActLED::CActLED(bool)>:
   245c4:	e3a03000 	mov	r3, #0
   245c8:	e59f2088 	ldr	r2, [pc, #136]	; 24658 <CActLED::CActLED(bool)+0x94>
   245cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   245d0:	e5803000 	str	r3, [r0]
   245d4:	e5803004 	str	r3, [r0, #4]
   245d8:	e1a06001 	mov	r6, r1
   245dc:	e5820000 	str	r0, [r2]
   245e0:	e1a05000 	mov	r5, r0
   245e4:	eb000c3f 	bl	276e8 <CMachineInfo::Get()>
   245e8:	eb000b6c 	bl	273a0 <CMachineInfo::GetActLEDInfo() const>
   245ec:	e2107080 	ands	r7, r0, #128	; 0x80
   245f0:	e1a04000 	mov	r4, r0
   245f4:	0a00000e 	beq	24634 <CActLED::CActLED(bool)+0x70>
   245f8:	e3a00014 	mov	r0, #20
   245fc:	eb001a53 	bl	2af50 <operator new(unsigned int)>
   24600:	e1a07000 	mov	r7, r0
   24604:	e1a02006 	mov	r2, r6
   24608:	e204103f 	and	r1, r4, #63	; 0x3f
   2460c:	eb001880 	bl	2a814 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   24610:	e5857004 	str	r7, [r5, #4]
   24614:	e1a04324 	lsr	r4, r4, #6
   24618:	e2244001 	eor	r4, r4, #1
   2461c:	e2044001 	and	r4, r4, #1
   24620:	e1a00005 	mov	r0, r5
   24624:	e5c54008 	strb	r4, [r5, #8]
   24628:	eb00001c 	bl	246a0 <CActLED::Off()>
   2462c:	e1a00005 	mov	r0, r5
   24630:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24634:	e3a00028 	mov	r0, #40	; 0x28
   24638:	eb001a44 	bl	2af50 <operator new(unsigned int)>
   2463c:	e1a06000 	mov	r6, r0
   24640:	e1a03007 	mov	r3, r7
   24644:	e3a02001 	mov	r2, #1
   24648:	e204103f 	and	r1, r4, #63	; 0x3f
   2464c:	eb0003a4 	bl	254e4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   24650:	e5856000 	str	r6, [r5]
   24654:	eaffffee 	b	24614 <CActLED::CActLED(bool)+0x50>
   24658:	0004c534 	.word	0x0004c534

0002465c <CActLED::~CActLED()>:
   2465c:	e3a02000 	mov	r2, #0
   24660:	e59f3004 	ldr	r3, [pc, #4]	; 2466c <CActLED::~CActLED()+0x10>
   24664:	e5832000 	str	r2, [r3]
   24668:	e12fff1e 	bx	lr
   2466c:	0004c534 	.word	0x0004c534

00024670 <CActLED::On()>:
   24670:	e5903000 	ldr	r3, [r0]
   24674:	e3530000 	cmp	r3, #0
   24678:	0a000002 	beq	24688 <CActLED::On()+0x18>
   2467c:	e5d01008 	ldrb	r1, [r0, #8]
   24680:	e1a00003 	mov	r0, r3
   24684:	ea00043e 	b	25784 <CGPIOPin::Write(unsigned int)>
   24688:	e5903004 	ldr	r3, [r0, #4]
   2468c:	e3530000 	cmp	r3, #0
   24690:	012fff1e 	bxeq	lr
   24694:	e5d01008 	ldrb	r1, [r0, #8]
   24698:	e1a00003 	mov	r0, r3
   2469c:	ea0018b9 	b	2a988 <CVirtualGPIOPin::Write(unsigned int)>

000246a0 <CActLED::Off()>:
   246a0:	e5903000 	ldr	r3, [r0]
   246a4:	e3530000 	cmp	r3, #0
   246a8:	0a000003 	beq	246bc <CActLED::Off()+0x1c>
   246ac:	e5d01008 	ldrb	r1, [r0, #8]
   246b0:	e1a00003 	mov	r0, r3
   246b4:	e2211001 	eor	r1, r1, #1
   246b8:	ea000431 	b	25784 <CGPIOPin::Write(unsigned int)>
   246bc:	e5903004 	ldr	r3, [r0, #4]
   246c0:	e3530000 	cmp	r3, #0
   246c4:	012fff1e 	bxeq	lr
   246c8:	e5d01008 	ldrb	r1, [r0, #8]
   246cc:	e1a00003 	mov	r0, r3
   246d0:	e2211001 	eor	r1, r1, #1
   246d4:	ea0018ab 	b	2a988 <CVirtualGPIOPin::Write(unsigned int)>

000246d8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   246d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   246dc:	e2516000 	subs	r6, r1, #0
   246e0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   246e4:	e1a05000 	mov	r5, r0
   246e8:	e1a07002 	mov	r7, r2
   246ec:	e1a08003 	mov	r8, r3
   246f0:	e3a04001 	mov	r4, #1
   246f4:	e1a00005 	mov	r0, r5
   246f8:	ebffffdc 	bl	24670 <CActLED::On()>
   246fc:	e1a00007 	mov	r0, r7
   24700:	eb0015a2 	bl	29d90 <CTimer::SimpleMsDelay(unsigned int)>
   24704:	e1a00005 	mov	r0, r5
   24708:	ebffffe4 	bl	246a0 <CActLED::Off()>
   2470c:	e2844001 	add	r4, r4, #1
   24710:	e1a00008 	mov	r0, r8
   24714:	eb00159d 	bl	29d90 <CTimer::SimpleMsDelay(unsigned int)>
   24718:	e1560004 	cmp	r6, r4
   2471c:	2afffff4 	bcs	246f4 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
   24720:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00024724 <CActLED::Get()>:
   24724:	e59f3004 	ldr	r3, [pc, #4]	; 24730 <CActLED::Get()+0xc>
   24728:	e5930000 	ldr	r0, [r3]
   2472c:	e12fff1e 	bx	lr
   24730:	0004c534 	.word	0x0004c534

00024734 <assertion_failed>:
   24734:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   24738:	e24dd024 	sub	sp, sp, #36	; 0x24
   2473c:	e1a05000 	mov	r5, r0
   24740:	e1a04001 	mov	r4, r1
   24744:	e58d200c 	str	r2, [sp, #12]
   24748:	e1a0600d 	mov	r6, sp
   2474c:	eb001e89 	bl	2c178 <CInterruptSystem::DisableFIQ()>
   24750:	f1080040 	cpsie	f
   24754:	e28d0010 	add	r0, sp, #16
   24758:	eb000ccd 	bl	27a94 <CString::CString()>
   2475c:	e1a02004 	mov	r2, r4
   24760:	e59d300c 	ldr	r3, [sp, #12]
   24764:	e59f1044 	ldr	r1, [pc, #68]	; 247b0 <assertion_failed+0x7c>
   24768:	e28d0010 	add	r0, sp, #16
   2476c:	eb001212 	bl	28fbc <CString::Format(char const*, ...)>
   24770:	e28d0010 	add	r0, sp, #16
   24774:	eb000cde 	bl	27af4 <CString::operator char const*() const>
   24778:	e1a01000 	mov	r1, r0
   2477c:	e1a00006 	mov	r0, r6
   24780:	eb0001a0 	bl	24e08 <debug_stacktrace(unsigned int const*, char const*)>
   24784:	eb0008d2 	bl	26ad4 <CLogger::Get()>
   24788:	e1a04000 	mov	r4, r0
   2478c:	e28d0010 	add	r0, sp, #16
   24790:	eb000cd7 	bl	27af4 <CString::operator char const*() const>
   24794:	e3a02000 	mov	r2, #0
   24798:	e1a01000 	mov	r1, r0
   2479c:	e59f3010 	ldr	r3, [pc, #16]	; 247b4 <assertion_failed+0x80>
   247a0:	e1a00004 	mov	r0, r4
   247a4:	e58d5000 	str	r5, [sp]
   247a8:	eb00080b 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   247ac:	eafffffe 	b	247ac <assertion_failed+0x78>
   247b0:	000431a4 	.word	0x000431a4
   247b4:	000431ac 	.word	0x000431ac

000247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   247b8:	e92d4010 	push	{r4, lr}
   247bc:	e1a04000 	mov	r4, r0
   247c0:	e1a02001 	mov	r2, r1
   247c4:	e3a01008 	mov	r1, #8
   247c8:	eb001f07 	bl	2c3ec <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   247cc:	e1a00004 	mov	r0, r4
   247d0:	e8bd8010 	pop	{r4, pc}

000247d4 <CBcmPropertyTags::~CBcmPropertyTags()>:
   247d4:	e92d4010 	push	{r4, lr}
   247d8:	e1a04000 	mov	r4, r0
   247dc:	eb001f05 	bl	2c3f8 <CBcmMailBox::~CBcmMailBox()>
   247e0:	e1a00004 	mov	r0, r4
   247e4:	e8bd8010 	pop	{r4, pc}

000247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   247e8:	e92d4070 	push	{r4, r5, r6, lr}
   247ec:	e2524000 	subs	r4, r2, #0
   247f0:	e59de010 	ldr	lr, [sp, #16]
   247f4:	0a00002f 	beq	248b8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xd0>
   247f8:	e353000f 	cmp	r3, #15
   247fc:	9a000031 	bls	248c8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xe0>
   24800:	e3ce2102 	bic	r2, lr, #-2147483648	; 0x80000000
   24804:	e5c4e008 	strb	lr, [r4, #8]
   24808:	e1a0e422 	lsr	lr, r2, #8
   2480c:	e243c00c 	sub	ip, r3, #12
   24810:	e5c4e009 	strb	lr, [r4, #9]
   24814:	e1a0e822 	lsr	lr, r2, #16
   24818:	e5c4e00a 	strb	lr, [r4, #10]
   2481c:	e1a02c22 	lsr	r2, r2, #24
   24820:	e1a0e42c 	lsr	lr, ip, #8
   24824:	e5c41000 	strb	r1, [r4]
   24828:	e5c4200b 	strb	r2, [r4, #11]
   2482c:	e1a0582c 	lsr	r5, ip, #16
   24830:	e1a02003 	mov	r2, r3
   24834:	e5c4c004 	strb	ip, [r4, #4]
   24838:	e1a03821 	lsr	r3, r1, #16
   2483c:	e1a0cc2c 	lsr	ip, ip, #24
   24840:	e5c4e005 	strb	lr, [r4, #5]
   24844:	e1a0e421 	lsr	lr, r1, #8
   24848:	e1a01c21 	lsr	r1, r1, #24
   2484c:	e5c41003 	strb	r1, [r4, #3]
   24850:	e5c45006 	strb	r5, [r4, #6]
   24854:	e1a01004 	mov	r1, r4
   24858:	e5c4c007 	strb	ip, [r4, #7]
   2485c:	e5c4e001 	strb	lr, [r4, #1]
   24860:	e5c43002 	strb	r3, [r4, #2]
   24864:	eb00001c 	bl	248dc <CBcmPropertyTags::GetTags(void*, unsigned int)>
   24868:	e3500000 	cmp	r0, #0
   2486c:	08bd8070 	popeq	{r4, r5, r6, pc}
   24870:	e5d42009 	ldrb	r2, [r4, #9]
   24874:	e5d43008 	ldrb	r3, [r4, #8]
   24878:	e5d4100a 	ldrb	r1, [r4, #10]
   2487c:	e1833402 	orr	r3, r3, r2, lsl #8
   24880:	e5d4200b 	ldrb	r2, [r4, #11]
   24884:	e1833801 	orr	r3, r3, r1, lsl #16
   24888:	e1833c02 	orr	r3, r3, r2, lsl #24
   2488c:	e3c32102 	bic	r2, r3, #-2147483648	; 0x80000000
   24890:	e2520000 	subs	r0, r2, #0
   24894:	e1a0c422 	lsr	ip, r2, #8
   24898:	e1a01822 	lsr	r1, r2, #16
   2489c:	e1a02c22 	lsr	r2, r2, #24
   248a0:	13a00001 	movne	r0, #1
   248a4:	e5c43008 	strb	r3, [r4, #8]
   248a8:	e5c4c009 	strb	ip, [r4, #9]
   248ac:	e5c4100a 	strb	r1, [r4, #10]
   248b0:	e5c4200b 	strb	r2, [r4, #11]
   248b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   248b8:	e59f1018 	ldr	r1, [pc, #24]	; 248d8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   248bc:	e3a02033 	mov	r2, #51	; 0x33
   248c0:	e2810014 	add	r0, r1, #20
   248c4:	ebffff9a 	bl	24734 <assertion_failed>
   248c8:	e59f1008 	ldr	r1, [pc, #8]	; 248d8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   248cc:	e3a02034 	mov	r2, #52	; 0x34
   248d0:	e2810020 	add	r0, r1, #32
   248d4:	ebffff96 	bl	24734 <assertion_failed>
   248d8:	000431c4 	.word	0x000431c4

000248dc <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   248dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   248e0:	e2519000 	subs	r9, r1, #0
   248e4:	0a000034 	beq	249bc <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
   248e8:	e352000f 	cmp	r2, #15
   248ec:	e1a05002 	mov	r5, r2
   248f0:	9a000035 	bls	249cc <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
   248f4:	e2126003 	ands	r6, r2, #3
   248f8:	e282800c 	add	r8, r2, #12
   248fc:	1a000036 	bne	249dc <CBcmPropertyTags::GetTags(void*, unsigned int)+0x100>
   24900:	e1a07000 	mov	r7, r0
   24904:	e1a00006 	mov	r0, r6
   24908:	eb001c7e 	bl	2bb08 <CMemorySystem::GetCoherentPage(unsigned int)>
   2490c:	e1a01428 	lsr	r1, r8, #8
   24910:	e1a02828 	lsr	r2, r8, #16
   24914:	e1a03c28 	lsr	r3, r8, #24
   24918:	e280a008 	add	sl, r0, #8
   2491c:	e5c08000 	strb	r8, [r0]
   24920:	e5c06004 	strb	r6, [r0, #4]
   24924:	e5c06005 	strb	r6, [r0, #5]
   24928:	e5c06006 	strb	r6, [r0, #6]
   2492c:	e5c06007 	strb	r6, [r0, #7]
   24930:	e5c01001 	strb	r1, [r0, #1]
   24934:	e5c02002 	strb	r2, [r0, #2]
   24938:	e5c03003 	strb	r3, [r0, #3]
   2493c:	e1a04000 	mov	r4, r0
   24940:	e1a02005 	mov	r2, r5
   24944:	e1a0000a 	mov	r0, sl
   24948:	e1a01009 	mov	r1, r9
   2494c:	eb001799 	bl	2a7b8 <memcpy>
   24950:	e78a6005 	str	r6, [sl, r5]
   24954:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   24958:	e3c48103 	bic	r8, r4, #-1073741824	; 0xc0000000
   2495c:	e3888101 	orr	r8, r8, #1073741824	; 0x40000000
   24960:	e1a00007 	mov	r0, r7
   24964:	e1a01008 	mov	r1, r8
   24968:	eb001ea3 	bl	2c3fc <CBcmMailBox::WriteRead(unsigned int)>
   2496c:	e1500008 	cmp	r0, r8
   24970:	0a000001 	beq	2497c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
   24974:	e3a00000 	mov	r0, #0
   24978:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2497c:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   24980:	e5d42005 	ldrb	r2, [r4, #5]
   24984:	e5d43004 	ldrb	r3, [r4, #4]
   24988:	e5d41006 	ldrb	r1, [r4, #6]
   2498c:	e1833402 	orr	r3, r3, r2, lsl #8
   24990:	e5d42007 	ldrb	r2, [r4, #7]
   24994:	e1833801 	orr	r3, r3, r1, lsl #16
   24998:	e1833c02 	orr	r3, r3, r2, lsl #24
   2499c:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   249a0:	1afffff3 	bne	24974 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x98>
   249a4:	e1a02005 	mov	r2, r5
   249a8:	e1a0100a 	mov	r1, sl
   249ac:	e1a00009 	mov	r0, r9
   249b0:	eb001780 	bl	2a7b8 <memcpy>
   249b4:	e3a00001 	mov	r0, #1
   249b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   249bc:	e59f1028 	ldr	r1, [pc, #40]	; 249ec <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   249c0:	e3a0204b 	mov	r2, #75	; 0x4b
   249c4:	e2810048 	add	r0, r1, #72	; 0x48
   249c8:	ebffff59 	bl	24734 <assertion_failed>
   249cc:	e59f1018 	ldr	r1, [pc, #24]	; 249ec <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   249d0:	e3a0204c 	mov	r2, #76	; 0x4c
   249d4:	e2810054 	add	r0, r1, #84	; 0x54
   249d8:	ebffff55 	bl	24734 <assertion_failed>
   249dc:	e59f1008 	ldr	r1, [pc, #8]	; 249ec <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   249e0:	e3a0204e 	mov	r2, #78	; 0x4e
   249e4:	e2810080 	add	r0, r1, #128	; 0x80
   249e8:	ebffff51 	bl	24734 <assertion_failed>
   249ec:	000431c4 	.word	0x000431c4

000249f0 <CClassAllocator::~CClassAllocator()>:
   249f0:	e3a03000 	mov	r3, #0
   249f4:	e92d4010 	push	{r4, lr}
   249f8:	e1a04000 	mov	r4, r0
   249fc:	e590000c 	ldr	r0, [r0, #12]
   24a00:	e5843010 	str	r3, [r4, #16]
   24a04:	e1500003 	cmp	r0, r3
   24a08:	0a000000 	beq	24a10 <CClassAllocator::~CClassAllocator()+0x20>
   24a0c:	eb001e45 	bl	2c328 <free>
   24a10:	e1a00004 	mov	r0, r4
   24a14:	e8bd8010 	pop	{r4, pc}

00024a18 <CClassAllocator::Init(unsigned int, unsigned int)>:
   24a18:	e3510001 	cmp	r1, #1
   24a1c:	33a01001 	movcc	r1, #1
   24a20:	e281101f 	add	r1, r1, #31
   24a24:	e3c1100f 	bic	r1, r1, #15
   24a28:	e3520000 	cmp	r2, #0
   24a2c:	e92d4010 	push	{r4, lr}
   24a30:	e5801000 	str	r1, [r0]
   24a34:	0a00001b 	beq	24aa8 <CClassAllocator::Init(unsigned int, unsigned int)+0x90>
   24a38:	e1a04000 	mov	r4, r0
   24a3c:	e5802004 	str	r2, [r0, #4]
   24a40:	e0000192 	mul	r0, r2, r1
   24a44:	eb001e31 	bl	2c310 <malloc>
   24a48:	e3500000 	cmp	r0, #0
   24a4c:	e584000c 	str	r0, [r4, #12]
   24a50:	0a000012 	beq	24aa0 <CClassAllocator::Init(unsigned int, unsigned int)+0x88>
   24a54:	e210200f 	ands	r2, r0, #15
   24a58:	1a000016 	bne	24ab8 <CClassAllocator::Init(unsigned int, unsigned int)+0xa0>
   24a5c:	e5943004 	ldr	r3, [r4, #4]
   24a60:	e3530000 	cmp	r3, #0
   24a64:	08bd8010 	popeq	{r4, pc}
   24a68:	e5943010 	ldr	r3, [r4, #16]
   24a6c:	e59fe054 	ldr	lr, [pc, #84]	; 24ac8 <CClassAllocator::Init(unsigned int, unsigned int)+0xb0>
   24a70:	e1a01003 	mov	r1, r3
   24a74:	e5943000 	ldr	r3, [r4]
   24a78:	e0030293 	mul	r3, r3, r2
   24a7c:	e780e003 	str	lr, [r0, r3]
   24a80:	e594c004 	ldr	ip, [r4, #4]
   24a84:	e2822001 	add	r2, r2, #1
   24a88:	e0803003 	add	r3, r0, r3
   24a8c:	e15c0002 	cmp	ip, r2
   24a90:	e583100c 	str	r1, [r3, #12]
   24a94:	e5843010 	str	r3, [r4, #16]
   24a98:	8afffff4 	bhi	24a70 <CClassAllocator::Init(unsigned int, unsigned int)+0x58>
   24a9c:	e8bd8010 	pop	{r4, pc}
   24aa0:	e5840004 	str	r0, [r4, #4]
   24aa4:	e8bd8010 	pop	{r4, pc}
   24aa8:	e3a02055 	mov	r2, #85	; 0x55
   24aac:	e59f1018 	ldr	r1, [pc, #24]	; 24acc <CClassAllocator::Init(unsigned int, unsigned int)+0xb4>
   24ab0:	e59f0018 	ldr	r0, [pc, #24]	; 24ad0 <CClassAllocator::Init(unsigned int, unsigned int)+0xb8>
   24ab4:	ebffff1e 	bl	24734 <assertion_failed>
   24ab8:	e3a0205f 	mov	r2, #95	; 0x5f
   24abc:	e59f1008 	ldr	r1, [pc, #8]	; 24acc <CClassAllocator::Init(unsigned int, unsigned int)+0xb4>
   24ac0:	e59f000c 	ldr	r0, [pc, #12]	; 24ad4 <CClassAllocator::Init(unsigned int, unsigned int)+0xbc>
   24ac4:	ebffff1a 	bl	24734 <assertion_failed>
   24ac8:	4f425350 	.word	0x4f425350
   24acc:	0004325c 	.word	0x0004325c
   24ad0:	00043270 	.word	0x00043270
   24ad4:	00043288 	.word	0x00043288

00024ad8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>:
   24ad8:	e92d4010 	push	{r4, lr}
   24adc:	e3a0c000 	mov	ip, #0
   24ae0:	e3a0e001 	mov	lr, #1
   24ae4:	e1a04000 	mov	r4, r0
   24ae8:	e5803008 	str	r3, [r0, #8]
   24aec:	e580e018 	str	lr, [r0, #24]
   24af0:	e580c00c 	str	ip, [r0, #12]
   24af4:	e580c010 	str	ip, [r0, #16]
   24af8:	e5c0c014 	strb	ip, [r0, #20]
   24afc:	ebffffc5 	bl	24a18 <CClassAllocator::Init(unsigned int, unsigned int)>
   24b00:	e1a00004 	mov	r0, r4
   24b04:	e8bd8010 	pop	{r4, pc}

00024b08 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>:
   24b08:	e92d4010 	push	{r4, lr}
   24b0c:	e3a0c000 	mov	ip, #0
   24b10:	e3a0e001 	mov	lr, #1
   24b14:	e1a04000 	mov	r4, r0
   24b18:	e5803018 	str	r3, [r0, #24]
   24b1c:	e59d3008 	ldr	r3, [sp, #8]
   24b20:	e5c0e014 	strb	lr, [r0, #20]
   24b24:	e5803008 	str	r3, [r0, #8]
   24b28:	e580c00c 	str	ip, [r0, #12]
   24b2c:	e580c010 	str	ip, [r0, #16]
   24b30:	ebffffb8 	bl	24a18 <CClassAllocator::Init(unsigned int, unsigned int)>
   24b34:	e1a00004 	mov	r0, r4
   24b38:	e8bd8010 	pop	{r4, pc}

00024b3c <CClassAllocator::Allocate()>:
   24b3c:	e92d4030 	push	{r4, r5, lr}
   24b40:	e5d03014 	ldrb	r3, [r0, #20]
   24b44:	e1a04000 	mov	r4, r0
   24b48:	e3530000 	cmp	r3, #0
   24b4c:	e24dd00c 	sub	sp, sp, #12
   24b50:	0a000002 	beq	24b60 <CClassAllocator::Allocate()+0x24>
   24b54:	e5900018 	ldr	r0, [r0, #24]
   24b58:	e3500000 	cmp	r0, #0
   24b5c:	1a000015 	bne	24bb8 <CClassAllocator::Allocate()+0x7c>
   24b60:	e5945010 	ldr	r5, [r4, #16]
   24b64:	e3550000 	cmp	r5, #0
   24b68:	0a00001d 	beq	24be4 <CClassAllocator::Allocate()+0xa8>
   24b6c:	e59f30a4 	ldr	r3, [pc, #164]	; 24c18 <CClassAllocator::Allocate()+0xdc>
   24b70:	e5952000 	ldr	r2, [r5]
   24b74:	e1520003 	cmp	r2, r3
   24b78:	1a000022 	bne	24c08 <CClassAllocator::Allocate()+0xcc>
   24b7c:	e3a03000 	mov	r3, #0
   24b80:	e5d41014 	ldrb	r1, [r4, #20]
   24b84:	e595200c 	ldr	r2, [r5, #12]
   24b88:	e1510003 	cmp	r1, r3
   24b8c:	e5842010 	str	r2, [r4, #16]
   24b90:	e585300c 	str	r3, [r5, #12]
   24b94:	1a000002 	bne	24ba4 <CClassAllocator::Allocate()+0x68>
   24b98:	e2850010 	add	r0, r5, #16
   24b9c:	e28dd00c 	add	sp, sp, #12
   24ba0:	e8bd8030 	pop	{r4, r5, pc}
   24ba4:	e5943018 	ldr	r3, [r4, #24]
   24ba8:	e3530000 	cmp	r3, #0
   24bac:	0afffff9 	beq	24b98 <CClassAllocator::Allocate()+0x5c>
   24bb0:	eb001c3d 	bl	2bcac <LeaveCritical>
   24bb4:	eafffff7 	b	24b98 <CClassAllocator::Allocate()+0x5c>
   24bb8:	eb001c11 	bl	2bc04 <EnterCritical>
   24bbc:	e5945010 	ldr	r5, [r4, #16]
   24bc0:	e3550000 	cmp	r5, #0
   24bc4:	1affffe8 	bne	24b6c <CClassAllocator::Allocate()+0x30>
   24bc8:	e5d43014 	ldrb	r3, [r4, #20]
   24bcc:	e3530000 	cmp	r3, #0
   24bd0:	0a000003 	beq	24be4 <CClassAllocator::Allocate()+0xa8>
   24bd4:	e5943018 	ldr	r3, [r4, #24]
   24bd8:	e3530000 	cmp	r3, #0
   24bdc:	0a000000 	beq	24be4 <CClassAllocator::Allocate()+0xa8>
   24be0:	eb001c31 	bl	2bcac <LeaveCritical>
   24be4:	eb0007ba 	bl	26ad4 <CLogger::Get()>
   24be8:	e5943004 	ldr	r3, [r4, #4]
   24bec:	e5941008 	ldr	r1, [r4, #8]
   24bf0:	e3a02000 	mov	r2, #0
   24bf4:	e58d3000 	str	r3, [sp]
   24bf8:	e59f301c 	ldr	r3, [pc, #28]	; 24c1c <CClassAllocator::Allocate()+0xe0>
   24bfc:	eb0006f6 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24c00:	e3a00000 	mov	r0, #0
   24c04:	eaffffe4 	b	24b9c <CClassAllocator::Allocate()+0x60>
   24c08:	e3a02082 	mov	r2, #130	; 0x82
   24c0c:	e59f100c 	ldr	r1, [pc, #12]	; 24c20 <CClassAllocator::Allocate()+0xe4>
   24c10:	e59f000c 	ldr	r0, [pc, #12]	; 24c24 <CClassAllocator::Allocate()+0xe8>
   24c14:	ebfffec6 	bl	24734 <assertion_failed>
   24c18:	4f425350 	.word	0x4f425350
   24c1c:	000432c4 	.word	0x000432c4
   24c20:	0004325c 	.word	0x0004325c
   24c24:	000432f0 	.word	0x000432f0

00024c28 <CClassAllocator::Free(void*)>:
   24c28:	e92d4070 	push	{r4, r5, r6, lr}
   24c2c:	e2514000 	subs	r4, r1, #0
   24c30:	0a00001e 	beq	24cb0 <CClassAllocator::Free(void*)+0x88>
   24c34:	e59f30a4 	ldr	r3, [pc, #164]	; 24ce0 <CClassAllocator::Free(void*)+0xb8>
   24c38:	e5142010 	ldr	r2, [r4, #-16]
   24c3c:	e2446010 	sub	r6, r4, #16
   24c40:	e1520003 	cmp	r2, r3
   24c44:	1a00001d 	bne	24cc0 <CClassAllocator::Free(void*)+0x98>
   24c48:	e5143004 	ldr	r3, [r4, #-4]
   24c4c:	e3530000 	cmp	r3, #0
   24c50:	1a00001e 	bne	24cd0 <CClassAllocator::Free(void*)+0xa8>
   24c54:	e5d03014 	ldrb	r3, [r0, #20]
   24c58:	e1a05000 	mov	r5, r0
   24c5c:	e3530000 	cmp	r3, #0
   24c60:	0a000002 	beq	24c70 <CClassAllocator::Free(void*)+0x48>
   24c64:	e5900018 	ldr	r0, [r0, #24]
   24c68:	e3500000 	cmp	r0, #0
   24c6c:	1a000003 	bne	24c80 <CClassAllocator::Free(void*)+0x58>
   24c70:	e5953010 	ldr	r3, [r5, #16]
   24c74:	e5043004 	str	r3, [r4, #-4]
   24c78:	e5856010 	str	r6, [r5, #16]
   24c7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   24c80:	eb001bdf 	bl	2bc04 <EnterCritical>
   24c84:	e5d52014 	ldrb	r2, [r5, #20]
   24c88:	e5953010 	ldr	r3, [r5, #16]
   24c8c:	e3520000 	cmp	r2, #0
   24c90:	e5043004 	str	r3, [r4, #-4]
   24c94:	e5856010 	str	r6, [r5, #16]
   24c98:	08bd8070 	popeq	{r4, r5, r6, pc}
   24c9c:	e5950018 	ldr	r0, [r5, #24]
   24ca0:	e3500000 	cmp	r0, #0
   24ca4:	08bd8070 	popeq	{r4, r5, r6, pc}
   24ca8:	e8bd4070 	pop	{r4, r5, r6, lr}
   24cac:	ea001bfe 	b	2bcac <LeaveCritical>
   24cb0:	e3a02090 	mov	r2, #144	; 0x90
   24cb4:	e59f1028 	ldr	r1, [pc, #40]	; 24ce4 <CClassAllocator::Free(void*)+0xbc>
   24cb8:	e59f0028 	ldr	r0, [pc, #40]	; 24ce8 <CClassAllocator::Free(void*)+0xc0>
   24cbc:	ebfffe9c 	bl	24734 <assertion_failed>
   24cc0:	e3a02094 	mov	r2, #148	; 0x94
   24cc4:	e59f1018 	ldr	r1, [pc, #24]	; 24ce4 <CClassAllocator::Free(void*)+0xbc>
   24cc8:	e59f001c 	ldr	r0, [pc, #28]	; 24cec <CClassAllocator::Free(void*)+0xc4>
   24ccc:	ebfffe98 	bl	24734 <assertion_failed>
   24cd0:	e3a02095 	mov	r2, #149	; 0x95
   24cd4:	e59f1008 	ldr	r1, [pc, #8]	; 24ce4 <CClassAllocator::Free(void*)+0xbc>
   24cd8:	e59f0010 	ldr	r0, [pc, #16]	; 24cf0 <CClassAllocator::Free(void*)+0xc8>
   24cdc:	ebfffe94 	bl	24734 <assertion_failed>
   24ce0:	4f425350 	.word	0x4f425350
   24ce4:	0004325c 	.word	0x0004325c
   24ce8:	00043310 	.word	0x00043310
   24cec:	0004331c 	.word	0x0004331c
   24cf0:	00043338 	.word	0x00043338

00024cf4 <debug_hexdump(void const*, unsigned int, char const*)>:
   24cf4:	e3520000 	cmp	r2, #0
   24cf8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   24cfc:	e1a06001 	mov	r6, r1
   24d00:	e1a07000 	mov	r7, r0
   24d04:	e59f80f0 	ldr	r8, [pc, #240]	; 24dfc <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   24d08:	11a08002 	movne	r8, r2
   24d0c:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   24d10:	eb00076f 	bl	26ad4 <CLogger::Get()>
   24d14:	e1a01008 	mov	r1, r8
   24d18:	e3a02004 	mov	r2, #4
   24d1c:	e1cd60f0 	strd	r6, [sp]
   24d20:	e59f30d8 	ldr	r3, [pc, #216]	; 24e00 <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   24d24:	eb0006ac 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24d28:	e3560000 	cmp	r6, #0
   24d2c:	0a000030 	beq	24df4 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
   24d30:	e3c6000f 	bic	r0, r6, #15
   24d34:	e1a04007 	mov	r4, r7
   24d38:	e0876006 	add	r6, r7, r6
   24d3c:	e59f90c0 	ldr	r9, [pc, #192]	; 24e04 <debug_hexdump(void const*, unsigned int, char const*)+0x110>
   24d40:	e0877000 	add	r7, r7, r0
   24d44:	ea000001 	b	24d50 <debug_hexdump(void const*, unsigned int, char const*)+0x5c>
   24d48:	e1540006 	cmp	r4, r6
   24d4c:	0a000028 	beq	24df4 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
   24d50:	eb00075f 	bl	26ad4 <CLogger::Get()>
   24d54:	e5d4300f 	ldrb	r3, [r4, #15]
   24d58:	e5d45000 	ldrb	r5, [r4]
   24d5c:	e58d3040 	str	r3, [sp, #64]	; 0x40
   24d60:	e5d4300e 	ldrb	r3, [r4, #14]
   24d64:	e6ffc074 	uxth	ip, r4
   24d68:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   24d6c:	e5d4200d 	ldrb	r2, [r4, #13]
   24d70:	e1a03009 	mov	r3, r9
   24d74:	e58d2038 	str	r2, [sp, #56]	; 0x38
   24d78:	e5d4100c 	ldrb	r1, [r4, #12]
   24d7c:	e3a02004 	mov	r2, #4
   24d80:	e58d1034 	str	r1, [sp, #52]	; 0x34
   24d84:	e5d4e00b 	ldrb	lr, [r4, #11]
   24d88:	e1a01008 	mov	r1, r8
   24d8c:	e58de030 	str	lr, [sp, #48]	; 0x30
   24d90:	e5d4e00a 	ldrb	lr, [r4, #10]
   24d94:	e58de02c 	str	lr, [sp, #44]	; 0x2c
   24d98:	e5d4e009 	ldrb	lr, [r4, #9]
   24d9c:	e58de028 	str	lr, [sp, #40]	; 0x28
   24da0:	e5d4e008 	ldrb	lr, [r4, #8]
   24da4:	e58de024 	str	lr, [sp, #36]	; 0x24
   24da8:	e5d4e007 	ldrb	lr, [r4, #7]
   24dac:	e58de020 	str	lr, [sp, #32]
   24db0:	e5d4e006 	ldrb	lr, [r4, #6]
   24db4:	e58de01c 	str	lr, [sp, #28]
   24db8:	e5d4e005 	ldrb	lr, [r4, #5]
   24dbc:	e58de018 	str	lr, [sp, #24]
   24dc0:	e5d4e004 	ldrb	lr, [r4, #4]
   24dc4:	e58de014 	str	lr, [sp, #20]
   24dc8:	e5d4e003 	ldrb	lr, [r4, #3]
   24dcc:	e58de010 	str	lr, [sp, #16]
   24dd0:	e5d4e002 	ldrb	lr, [r4, #2]
   24dd4:	e58de00c 	str	lr, [sp, #12]
   24dd8:	e5d4e001 	ldrb	lr, [r4, #1]
   24ddc:	e98d4020 	stmib	sp, {r5, lr}
   24de0:	e58dc000 	str	ip, [sp]
   24de4:	eb00067c 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24de8:	e1540007 	cmp	r4, r7
   24dec:	e2844010 	add	r4, r4, #16
   24df0:	1affffd4 	bne	24d48 <debug_hexdump(void const*, unsigned int, char const*)+0x54>
   24df4:	e28dd04c 	add	sp, sp, #76	; 0x4c
   24df8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   24dfc:	000433e0 	.word	0x000433e0
   24e00:	0004334c 	.word	0x0004334c
   24e04:	00043374 	.word	0x00043374

00024e08 <debug_stacktrace(unsigned int const*, char const*)>:
   24e08:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24e0c:	e3510000 	cmp	r1, #0
   24e10:	e59f7074 	ldr	r7, [pc, #116]	; 24e8c <debug_stacktrace(unsigned int const*, char const*)+0x84>
   24e14:	e3a04000 	mov	r4, #0
   24e18:	11a07001 	movne	r7, r1
   24e1c:	e59f606c 	ldr	r6, [pc, #108]	; 24e90 <debug_stacktrace(unsigned int const*, char const*)+0x88>
   24e20:	e59f806c 	ldr	r8, [pc, #108]	; 24e94 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
   24e24:	e24dd008 	sub	sp, sp, #8
   24e28:	e2405004 	sub	r5, r0, #4
   24e2c:	ea000002 	b	24e3c <debug_stacktrace(unsigned int const*, char const*)+0x34>
   24e30:	e2844001 	add	r4, r4, #1
   24e34:	e3540040 	cmp	r4, #64	; 0x40
   24e38:	0a000011 	beq	24e84 <debug_stacktrace(unsigned int const*, char const*)+0x7c>
   24e3c:	e5b53004 	ldr	r3, [r5, #4]!
   24e40:	e3530902 	cmp	r3, #32768	; 0x8000
   24e44:	3afffff9 	bcc	24e30 <debug_stacktrace(unsigned int const*, char const*)+0x28>
   24e48:	e1530006 	cmp	r3, r6
   24e4c:	2afffff7 	bcs	24e30 <debug_stacktrace(unsigned int const*, char const*)+0x28>
   24e50:	e3130003 	tst	r3, #3
   24e54:	1afffff5 	bne	24e30 <debug_stacktrace(unsigned int const*, char const*)+0x28>
   24e58:	eb00071d 	bl	26ad4 <CLogger::Get()>
   24e5c:	e5952000 	ldr	r2, [r5]
   24e60:	e1a03008 	mov	r3, r8
   24e64:	e58d2004 	str	r2, [sp, #4]
   24e68:	e58d4000 	str	r4, [sp]
   24e6c:	e3a02004 	mov	r2, #4
   24e70:	e1a01007 	mov	r1, r7
   24e74:	e2844001 	add	r4, r4, #1
   24e78:	eb000657 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24e7c:	e3540040 	cmp	r4, #64	; 0x40
   24e80:	1affffed 	bne	24e3c <debug_stacktrace(unsigned int const*, char const*)+0x34>
   24e84:	e28dd008 	add	sp, sp, #8
   24e88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24e8c:	000433e0 	.word	0x000433e0
   24e90:	0003d004 	.word	0x0003d004
   24e94:	000433cc 	.word	0x000433cc

00024e98 <CDevice::~CDevice()>:
   24e98:	e12fff1e 	bx	lr

00024e9c <CDevice::Read(void*, unsigned int)>:
   24e9c:	e3e00000 	mvn	r0, #0
   24ea0:	e12fff1e 	bx	lr

00024ea4 <CDevice::Seek(unsigned long long)>:
   24ea4:	e3e00000 	mvn	r0, #0
   24ea8:	e3e01000 	mvn	r1, #0
   24eac:	e12fff1e 	bx	lr

00024eb0 <CDevice::RemoveDevice()>:
   24eb0:	e3a00000 	mov	r0, #0
   24eb4:	e12fff1e 	bx	lr

00024eb8 <CDevice::~CDevice()>:
   24eb8:	e92d4010 	push	{r4, lr}
   24ebc:	e1a04000 	mov	r4, r0
   24ec0:	e3a01004 	mov	r1, #4
   24ec4:	eb00182f 	bl	2af88 <operator delete(void*, unsigned int)>
   24ec8:	e1a00004 	mov	r0, r4
   24ecc:	e8bd8010 	pop	{r4, pc}

00024ed0 <CDevice::CDevice()>:
   24ed0:	e59f3004 	ldr	r3, [pc, #4]	; 24edc <CDevice::CDevice()+0xc>
   24ed4:	e5803000 	str	r3, [r0]
   24ed8:	e12fff1e 	bx	lr
   24edc:	000433f0 	.word	0x000433f0

00024ee0 <CDeviceNameService::CDeviceNameService()>:
   24ee0:	e3a02000 	mov	r2, #0
   24ee4:	e59f102c 	ldr	r1, [pc, #44]	; 24f18 <CDeviceNameService::CDeviceNameService()+0x38>
   24ee8:	e5802000 	str	r2, [r0]
   24eec:	e591c000 	ldr	ip, [r1]
   24ef0:	e5802004 	str	r2, [r0, #4]
   24ef4:	e15c0002 	cmp	ip, r2
   24ef8:	1a000001 	bne	24f04 <CDeviceNameService::CDeviceNameService()+0x24>
   24efc:	e5810000 	str	r0, [r1]
   24f00:	e12fff1e 	bx	lr
   24f04:	e3a0201f 	mov	r2, #31
   24f08:	e92d4010 	push	{r4, lr}
   24f0c:	e59f1008 	ldr	r1, [pc, #8]	; 24f1c <CDeviceNameService::CDeviceNameService()+0x3c>
   24f10:	e59f0008 	ldr	r0, [pc, #8]	; 24f20 <CDeviceNameService::CDeviceNameService()+0x40>
   24f14:	ebfffe06 	bl	24734 <assertion_failed>
   24f18:	0004c538 	.word	0x0004c538
   24f1c:	00043408 	.word	0x00043408
   24f20:	00043420 	.word	0x00043420

00024f24 <CDeviceNameService::~CDeviceNameService()>:
   24f24:	e92d4070 	push	{r4, r5, r6, lr}
   24f28:	e5904000 	ldr	r4, [r0]
   24f2c:	e1a05000 	mov	r5, r0
   24f30:	e3540000 	cmp	r4, #0
   24f34:	0a00000a 	beq	24f64 <CDeviceNameService::~CDeviceNameService()+0x40>
   24f38:	e5940004 	ldr	r0, [r4, #4]
   24f3c:	e5944000 	ldr	r4, [r4]
   24f40:	e3500000 	cmp	r0, #0
   24f44:	0a000000 	beq	24f4c <CDeviceNameService::~CDeviceNameService()+0x28>
   24f48:	eb00180d 	bl	2af84 <operator delete[](void*)>
   24f4c:	e3a01010 	mov	r1, #16
   24f50:	e5950000 	ldr	r0, [r5]
   24f54:	eb00180b 	bl	2af88 <operator delete(void*, unsigned int)>
   24f58:	e3540000 	cmp	r4, #0
   24f5c:	e5854000 	str	r4, [r5]
   24f60:	1afffff4 	bne	24f38 <CDeviceNameService::~CDeviceNameService()+0x14>
   24f64:	e3a02000 	mov	r2, #0
   24f68:	e59f3008 	ldr	r3, [pc, #8]	; 24f78 <CDeviceNameService::~CDeviceNameService()+0x54>
   24f6c:	e1a00005 	mov	r0, r5
   24f70:	e5832000 	str	r2, [r3]
   24f74:	e8bd8070 	pop	{r4, r5, r6, pc}
   24f78:	0004c538 	.word	0x0004c538

00024f7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   24f7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24f80:	e1a05000 	mov	r5, r0
   24f84:	e5900004 	ldr	r0, [r0, #4]
   24f88:	e1a06001 	mov	r6, r1
   24f8c:	e3500000 	cmp	r0, #0
   24f90:	e1a07002 	mov	r7, r2
   24f94:	e1a08003 	mov	r8, r3
   24f98:	1a000017 	bne	24ffc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
   24f9c:	e3a00010 	mov	r0, #16
   24fa0:	eb0017ea 	bl	2af50 <operator new(unsigned int)>
   24fa4:	e3560000 	cmp	r6, #0
   24fa8:	e1a04000 	mov	r4, r0
   24fac:	0a000014 	beq	25004 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
   24fb0:	e1a00006 	mov	r0, r6
   24fb4:	eb001404 	bl	29fcc <strlen>
   24fb8:	e2800001 	add	r0, r0, #1
   24fbc:	eb0017e9 	bl	2af68 <operator new[](unsigned int)>
   24fc0:	e1a01006 	mov	r1, r6
   24fc4:	e5840004 	str	r0, [r4, #4]
   24fc8:	eb0014a3 	bl	2a25c <strcpy>
   24fcc:	e3570000 	cmp	r7, #0
   24fd0:	0a00000f 	beq	25014 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x98>
   24fd4:	e5952004 	ldr	r2, [r5, #4]
   24fd8:	e5953000 	ldr	r3, [r5]
   24fdc:	e3520000 	cmp	r2, #0
   24fe0:	e5847008 	str	r7, [r4, #8]
   24fe4:	e5c4800c 	strb	r8, [r4, #12]
   24fe8:	e5843000 	str	r3, [r4]
   24fec:	e5854000 	str	r4, [r5]
   24ff0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   24ff4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   24ff8:	ea001b2b 	b	2bcac <LeaveCritical>
   24ffc:	eb001b00 	bl	2bc04 <EnterCritical>
   25000:	eaffffe5 	b	24f9c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
   25004:	e3a0203b 	mov	r2, #59	; 0x3b
   25008:	e59f1014 	ldr	r1, [pc, #20]	; 25024 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   2500c:	e59f0014 	ldr	r0, [pc, #20]	; 25028 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xac>
   25010:	ebfffdc7 	bl	24734 <assertion_failed>
   25014:	e3a02040 	mov	r2, #64	; 0x40
   25018:	e59f1004 	ldr	r1, [pc, #4]	; 25024 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   2501c:	e59f0008 	ldr	r0, [pc, #8]	; 2502c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
   25020:	ebfffdc3 	bl	24734 <assertion_failed>
   25024:	00043408 	.word	0x00043408
   25028:	0003e0dc 	.word	0x0003e0dc
   2502c:	0004342c 	.word	0x0004342c

00025030 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   25030:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25034:	e2515000 	subs	r5, r1, #0
   25038:	0a000037 	beq	2511c <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
   2503c:	e1a08000 	mov	r8, r0
   25040:	e5900004 	ldr	r0, [r0, #4]
   25044:	e1a07002 	mov	r7, r2
   25048:	e3500000 	cmp	r0, #0
   2504c:	1a000017 	bne	250b0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x80>
   25050:	e5984000 	ldr	r4, [r8]
   25054:	e3540000 	cmp	r4, #0
   25058:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2505c:	e3a06000 	mov	r6, #0
   25060:	ea00000b 	b	25094 <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
   25064:	e1a00005 	mov	r0, r5
   25068:	eb0013e1 	bl	29ff4 <strcmp>
   2506c:	e3500000 	cmp	r0, #0
   25070:	1a000002 	bne	25080 <CDeviceNameService::RemoveDevice(char const*, bool)+0x50>
   25074:	e5d4300c 	ldrb	r3, [r4, #12]
   25078:	e1530007 	cmp	r3, r7
   2507c:	0a000014 	beq	250d4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa4>
   25080:	e5943000 	ldr	r3, [r4]
   25084:	e1a06004 	mov	r6, r4
   25088:	e3530000 	cmp	r3, #0
   2508c:	0a00000b 	beq	250c0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x90>
   25090:	e1a04003 	mov	r4, r3
   25094:	e5941004 	ldr	r1, [r4, #4]
   25098:	e3510000 	cmp	r1, #0
   2509c:	1afffff0 	bne	25064 <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
   250a0:	e3a0205e 	mov	r2, #94	; 0x5e
   250a4:	e59f1088 	ldr	r1, [pc, #136]	; 25134 <CDeviceNameService::RemoveDevice(char const*, bool)+0x104>
   250a8:	e59f0088 	ldr	r0, [pc, #136]	; 25138 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
   250ac:	ebfffda0 	bl	24734 <assertion_failed>
   250b0:	eb001ad3 	bl	2bc04 <EnterCritical>
   250b4:	e5984000 	ldr	r4, [r8]
   250b8:	e3540000 	cmp	r4, #0
   250bc:	1affffe6 	bne	2505c <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
   250c0:	e5983004 	ldr	r3, [r8, #4]
   250c4:	e3530000 	cmp	r3, #0
   250c8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   250cc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   250d0:	ea001af5 	b	2bcac <LeaveCritical>
   250d4:	e3560000 	cmp	r6, #0
   250d8:	0a00000c 	beq	25110 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe0>
   250dc:	e5943000 	ldr	r3, [r4]
   250e0:	e5863000 	str	r3, [r6]
   250e4:	e5983004 	ldr	r3, [r8, #4]
   250e8:	e3530000 	cmp	r3, #0
   250ec:	1a00000e 	bne	2512c <CDeviceNameService::RemoveDevice(char const*, bool)+0xfc>
   250f0:	e5940004 	ldr	r0, [r4, #4]
   250f4:	e3500000 	cmp	r0, #0
   250f8:	0a000000 	beq	25100 <CDeviceNameService::RemoveDevice(char const*, bool)+0xd0>
   250fc:	eb0017a0 	bl	2af84 <operator delete[](void*)>
   25100:	e1a00004 	mov	r0, r4
   25104:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25108:	e3a01010 	mov	r1, #16
   2510c:	ea00179d 	b	2af88 <operator delete(void*, unsigned int)>
   25110:	e5943000 	ldr	r3, [r4]
   25114:	e5883000 	str	r3, [r8]
   25118:	eafffff1 	b	250e4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb4>
   2511c:	e3a02056 	mov	r2, #86	; 0x56
   25120:	e59f100c 	ldr	r1, [pc, #12]	; 25134 <CDeviceNameService::RemoveDevice(char const*, bool)+0x104>
   25124:	e59f0010 	ldr	r0, [pc, #16]	; 2513c <CDeviceNameService::RemoveDevice(char const*, bool)+0x10c>
   25128:	ebfffd81 	bl	24734 <assertion_failed>
   2512c:	eb001ade 	bl	2bcac <LeaveCritical>
   25130:	eaffffee 	b	250f0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
   25134:	00043408 	.word	0x00043408
   25138:	0004343c 	.word	0x0004343c
   2513c:	0003e0dc 	.word	0x0003e0dc

00025140 <CDeviceNameService::GetDevice(char const*, bool)>:
   25140:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   25144:	e2515000 	subs	r5, r1, #0
   25148:	e24dd00c 	sub	sp, sp, #12
   2514c:	0a000024 	beq	251e4 <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
   25150:	e1a07000 	mov	r7, r0
   25154:	e5900004 	ldr	r0, [r0, #4]
   25158:	e1a06002 	mov	r6, r2
   2515c:	e3500000 	cmp	r0, #0
   25160:	1a000014 	bne	251b8 <CDeviceNameService::GetDevice(char const*, bool)+0x78>
   25164:	e5974000 	ldr	r4, [r7]
   25168:	e3540000 	cmp	r4, #0
   2516c:	1a00000a 	bne	2519c <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   25170:	ea000018 	b	251d8 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
   25174:	e1a00005 	mov	r0, r5
   25178:	eb00139d 	bl	29ff4 <strcmp>
   2517c:	e3500000 	cmp	r0, #0
   25180:	1a000002 	bne	25190 <CDeviceNameService::GetDevice(char const*, bool)+0x50>
   25184:	e5d4300c 	ldrb	r3, [r4, #12]
   25188:	e1530006 	cmp	r3, r6
   2518c:	0a000018 	beq	251f4 <CDeviceNameService::GetDevice(char const*, bool)+0xb4>
   25190:	e5944000 	ldr	r4, [r4]
   25194:	e3540000 	cmp	r4, #0
   25198:	0a00000a 	beq	251c8 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   2519c:	e5941004 	ldr	r1, [r4, #4]
   251a0:	e3510000 	cmp	r1, #0
   251a4:	1afffff2 	bne	25174 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
   251a8:	e3a02092 	mov	r2, #146	; 0x92
   251ac:	e59f1078 	ldr	r1, [pc, #120]	; 2522c <CDeviceNameService::GetDevice(char const*, bool)+0xec>
   251b0:	e59f0078 	ldr	r0, [pc, #120]	; 25230 <CDeviceNameService::GetDevice(char const*, bool)+0xf0>
   251b4:	ebfffd5e 	bl	24734 <assertion_failed>
   251b8:	eb001a91 	bl	2bc04 <EnterCritical>
   251bc:	e5974000 	ldr	r4, [r7]
   251c0:	e3540000 	cmp	r4, #0
   251c4:	1afffff4 	bne	2519c <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   251c8:	e5973004 	ldr	r3, [r7, #4]
   251cc:	e3530000 	cmp	r3, #0
   251d0:	0a000000 	beq	251d8 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
   251d4:	eb001ab4 	bl	2bcac <LeaveCritical>
   251d8:	e3a00000 	mov	r0, #0
   251dc:	e28dd00c 	add	sp, sp, #12
   251e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   251e4:	e3a0208b 	mov	r2, #139	; 0x8b
   251e8:	e59f103c 	ldr	r1, [pc, #60]	; 2522c <CDeviceNameService::GetDevice(char const*, bool)+0xec>
   251ec:	e59f0040 	ldr	r0, [pc, #64]	; 25234 <CDeviceNameService::GetDevice(char const*, bool)+0xf4>
   251f0:	ebfffd4f 	bl	24734 <assertion_failed>
   251f4:	e5973004 	ldr	r3, [r7, #4]
   251f8:	e5940008 	ldr	r0, [r4, #8]
   251fc:	e3530000 	cmp	r3, #0
   25200:	1a000005 	bne	2521c <CDeviceNameService::GetDevice(char const*, bool)+0xdc>
   25204:	e3500000 	cmp	r0, #0
   25208:	1afffff3 	bne	251dc <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
   2520c:	e3a0209a 	mov	r2, #154	; 0x9a
   25210:	e59f1014 	ldr	r1, [pc, #20]	; 2522c <CDeviceNameService::GetDevice(char const*, bool)+0xec>
   25214:	e59f001c 	ldr	r0, [pc, #28]	; 25238 <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   25218:	ebfffd45 	bl	24734 <assertion_failed>
   2521c:	e58d0004 	str	r0, [sp, #4]
   25220:	eb001aa1 	bl	2bcac <LeaveCritical>
   25224:	e59d0004 	ldr	r0, [sp, #4]
   25228:	eafffff5 	b	25204 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
   2522c:	00043408 	.word	0x00043408
   25230:	0004343c 	.word	0x0004343c
   25234:	0003e0dc 	.word	0x0003e0dc
   25238:	00043450 	.word	0x00043450

0002523c <CDeviceNameService::Get()>:
   2523c:	e59f301c 	ldr	r3, [pc, #28]	; 25260 <CDeviceNameService::Get()+0x24>
   25240:	e5930000 	ldr	r0, [r3]
   25244:	e3500000 	cmp	r0, #0
   25248:	112fff1e 	bxne	lr
   2524c:	e3a020cc 	mov	r2, #204	; 0xcc
   25250:	e92d4010 	push	{r4, lr}
   25254:	e59f1008 	ldr	r1, [pc, #8]	; 25264 <CDeviceNameService::Get()+0x28>
   25258:	e59f0008 	ldr	r0, [pc, #8]	; 25268 <CDeviceNameService::Get()+0x2c>
   2525c:	ebfffd34 	bl	24734 <assertion_failed>
   25260:	0004c538 	.word	0x0004c538
   25264:	00043408 	.word	0x00043408
   25268:	00043460 	.word	0x00043460

0002526c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   2526c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   25270:	e1a06001 	mov	r6, r1
   25274:	e24dd01c 	sub	sp, sp, #28
   25278:	e1a04000 	mov	r4, r0
   2527c:	e28d0008 	add	r0, sp, #8
   25280:	e1a05003 	mov	r5, r3
   25284:	e5dd7030 	ldrb	r7, [sp, #48]	; 0x30
   25288:	e58d2004 	str	r2, [sp, #4]
   2528c:	eb000a00 	bl	27a94 <CString::CString()>
   25290:	e1a02006 	mov	r2, r6
   25294:	e59d3004 	ldr	r3, [sp, #4]
   25298:	e59f1030 	ldr	r1, [pc, #48]	; 252d0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
   2529c:	e28d0008 	add	r0, sp, #8
   252a0:	eb000f45 	bl	28fbc <CString::Format(char const*, ...)>
   252a4:	e28d0008 	add	r0, sp, #8
   252a8:	eb000a11 	bl	27af4 <CString::operator char const*() const>
   252ac:	e1a03007 	mov	r3, r7
   252b0:	e1a01000 	mov	r1, r0
   252b4:	e1a02005 	mov	r2, r5
   252b8:	e1a00004 	mov	r0, r4
   252bc:	ebffff2e 	bl	24f7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   252c0:	e28d0008 	add	r0, sp, #8
   252c4:	eb0009bf 	bl	279c8 <CString::~CString()>
   252c8:	e28dd01c 	add	sp, sp, #28
   252cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   252d0:	0004346c 	.word	0x0004346c

000252d4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   252d4:	e92d4070 	push	{r4, r5, r6, lr}
   252d8:	e1a06001 	mov	r6, r1
   252dc:	e24dd018 	sub	sp, sp, #24
   252e0:	e1a04000 	mov	r4, r0
   252e4:	e28d0008 	add	r0, sp, #8
   252e8:	e1a05003 	mov	r5, r3
   252ec:	e58d2004 	str	r2, [sp, #4]
   252f0:	eb0009e7 	bl	27a94 <CString::CString()>
   252f4:	e59d3004 	ldr	r3, [sp, #4]
   252f8:	e1a02006 	mov	r2, r6
   252fc:	e59f102c 	ldr	r1, [pc, #44]	; 25330 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
   25300:	e28d0008 	add	r0, sp, #8
   25304:	eb000f2c 	bl	28fbc <CString::Format(char const*, ...)>
   25308:	e28d0008 	add	r0, sp, #8
   2530c:	eb0009f8 	bl	27af4 <CString::operator char const*() const>
   25310:	e1a02005 	mov	r2, r5
   25314:	e1a01000 	mov	r1, r0
   25318:	e1a00004 	mov	r0, r4
   2531c:	ebffff43 	bl	25030 <CDeviceNameService::RemoveDevice(char const*, bool)>
   25320:	e28d0008 	add	r0, sp, #8
   25324:	eb0009a7 	bl	279c8 <CString::~CString()>
   25328:	e28dd018 	add	sp, sp, #24
   2532c:	e8bd8070 	pop	{r4, r5, r6, pc}
   25330:	0004346c 	.word	0x0004346c

00025334 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   25334:	e92d4070 	push	{r4, r5, r6, lr}
   25338:	e1a06001 	mov	r6, r1
   2533c:	e24dd018 	sub	sp, sp, #24
   25340:	e1a04000 	mov	r4, r0
   25344:	e28d0008 	add	r0, sp, #8
   25348:	e1a05003 	mov	r5, r3
   2534c:	e58d2004 	str	r2, [sp, #4]
   25350:	eb0009cf 	bl	27a94 <CString::CString()>
   25354:	e59d3004 	ldr	r3, [sp, #4]
   25358:	e1a02006 	mov	r2, r6
   2535c:	e59f1034 	ldr	r1, [pc, #52]	; 25398 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
   25360:	e28d0008 	add	r0, sp, #8
   25364:	eb000f14 	bl	28fbc <CString::Format(char const*, ...)>
   25368:	e28d0008 	add	r0, sp, #8
   2536c:	eb0009e0 	bl	27af4 <CString::operator char const*() const>
   25370:	e1a02005 	mov	r2, r5
   25374:	e1a01000 	mov	r1, r0
   25378:	e1a00004 	mov	r0, r4
   2537c:	ebffff6f 	bl	25140 <CDeviceNameService::GetDevice(char const*, bool)>
   25380:	e1a04000 	mov	r4, r0
   25384:	e28d0008 	add	r0, sp, #8
   25388:	eb00098e 	bl	279c8 <CString::~CString()>
   2538c:	e1a00004 	mov	r0, r4
   25390:	e28dd018 	add	sp, sp, #24
   25394:	e8bd8070 	pop	{r4, r5, r6, pc}
   25398:	0004346c 	.word	0x0004346c

0002539c <CDeviceNameService::ListDevices(CDevice*)>:
   2539c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   253a0:	e2516000 	subs	r6, r1, #0
   253a4:	e24dd024 	sub	sp, sp, #36	; 0x24
   253a8:	0a000035 	beq	25484 <CDeviceNameService::ListDevices(CDevice*)+0xe8>
   253ac:	e5904000 	ldr	r4, [r0]
   253b0:	e3540000 	cmp	r4, #0
   253b4:	0a000030 	beq	2547c <CDeviceNameService::ListDevices(CDevice*)+0xe0>
   253b8:	e3a05000 	mov	r5, #0
   253bc:	e59f70d0 	ldr	r7, [pc, #208]	; 25494 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
   253c0:	ea00001c 	b	25438 <CDeviceNameService::ListDevices(CDevice*)+0x9c>
   253c4:	e5d4200c 	ldrb	r2, [r4, #12]
   253c8:	e2855001 	add	r5, r5, #1
   253cc:	e3520000 	cmp	r2, #0
   253d0:	13a02062 	movne	r2, #98	; 0x62
   253d4:	03a02063 	moveq	r2, #99	; 0x63
   253d8:	e2158003 	ands	r8, r5, #3
   253dc:	03a0100a 	moveq	r1, #10
   253e0:	13a01020 	movne	r1, #32
   253e4:	e28d0010 	add	r0, sp, #16
   253e8:	e58d1000 	str	r1, [sp]
   253ec:	e1a01007 	mov	r1, r7
   253f0:	eb000ef1 	bl	28fbc <CString::Format(char const*, ...)>
   253f4:	e5963000 	ldr	r3, [r6]
   253f8:	e28d0010 	add	r0, sp, #16
   253fc:	e593900c 	ldr	r9, [r3, #12]
   25400:	eb0009bb 	bl	27af4 <CString::operator char const*() const>
   25404:	e1a01000 	mov	r1, r0
   25408:	e28d0010 	add	r0, sp, #16
   2540c:	e58d100c 	str	r1, [sp, #12]
   25410:	eb0009e9 	bl	27bbc <CString::GetLength() const>
   25414:	e59d100c 	ldr	r1, [sp, #12]
   25418:	e1a02000 	mov	r2, r0
   2541c:	e1a00006 	mov	r0, r6
   25420:	e12fff39 	blx	r9
   25424:	e5944000 	ldr	r4, [r4]
   25428:	e28d0010 	add	r0, sp, #16
   2542c:	eb000965 	bl	279c8 <CString::~CString()>
   25430:	e3540000 	cmp	r4, #0
   25434:	0a000008 	beq	2545c <CDeviceNameService::ListDevices(CDevice*)+0xc0>
   25438:	e28d0010 	add	r0, sp, #16
   2543c:	eb000994 	bl	27a94 <CString::CString()>
   25440:	e5943004 	ldr	r3, [r4, #4]
   25444:	e3530000 	cmp	r3, #0
   25448:	1affffdd 	bne	253c4 <CDeviceNameService::ListDevices(CDevice*)+0x28>
   2544c:	e3a020b9 	mov	r2, #185	; 0xb9
   25450:	e59f1040 	ldr	r1, [pc, #64]	; 25498 <CDeviceNameService::ListDevices(CDevice*)+0xfc>
   25454:	e59f0040 	ldr	r0, [pc, #64]	; 2549c <CDeviceNameService::ListDevices(CDevice*)+0x100>
   25458:	ebfffcb5 	bl	24734 <assertion_failed>
   2545c:	e3580000 	cmp	r8, #0
   25460:	0a000005 	beq	2547c <CDeviceNameService::ListDevices(CDevice*)+0xe0>
   25464:	e5963000 	ldr	r3, [r6]
   25468:	e1a00006 	mov	r0, r6
   2546c:	e3a02001 	mov	r2, #1
   25470:	e593300c 	ldr	r3, [r3, #12]
   25474:	e59f1024 	ldr	r1, [pc, #36]	; 254a0 <CDeviceNameService::ListDevices(CDevice*)+0x104>
   25478:	e12fff33 	blx	r3
   2547c:	e28dd024 	add	sp, sp, #36	; 0x24
   25480:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   25484:	e3a020b0 	mov	r2, #176	; 0xb0
   25488:	e59f1008 	ldr	r1, [pc, #8]	; 25498 <CDeviceNameService::ListDevices(CDevice*)+0xfc>
   2548c:	e59f0010 	ldr	r0, [pc, #16]	; 254a4 <CDeviceNameService::ListDevices(CDevice*)+0x108>
   25490:	ebfffca7 	bl	24734 <assertion_failed>
   25494:	00043484 	.word	0x00043484
   25498:	00043408 	.word	0x00043408
   2549c:	0004343c 	.word	0x0004343c
   254a0:	000458c4 	.word	0x000458c4
   254a4:	00043474 	.word	0x00043474

000254a8 <CGPIOPin::CGPIOPin()>:
   254a8:	e3a01000 	mov	r1, #0
   254ac:	e3a02006 	mov	r2, #6
   254b0:	e92d4010 	push	{r4, lr}
   254b4:	e3a0c00a 	mov	ip, #10
   254b8:	e3a04036 	mov	r4, #54	; 0x36
   254bc:	e59fe01c 	ldr	lr, [pc, #28]	; 254e0 <CGPIOPin::CGPIOPin()+0x38>
   254c0:	e5804004 	str	r4, [r0, #4]
   254c4:	e580e000 	str	lr, [r0]
   254c8:	e5c0c010 	strb	ip, [r0, #16]
   254cc:	e5801018 	str	r1, [r0, #24]
   254d0:	e580101c 	str	r1, [r0, #28]
   254d4:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   254d8:	e5c02026 	strb	r2, [r0, #38]	; 0x26
   254dc:	e8bd8010 	pop	{r4, pc}
   254e0:	00043498 	.word	0x00043498

000254e4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   254e4:	e92d4070 	push	{r4, r5, r6, lr}
   254e8:	e3a0c000 	mov	ip, #0
   254ec:	e3a0e00a 	mov	lr, #10
   254f0:	e1a05002 	mov	r5, r2
   254f4:	e3a06036 	mov	r6, #54	; 0x36
   254f8:	e3a02006 	mov	r2, #6
   254fc:	e1a04000 	mov	r4, r0
   25500:	e5803018 	str	r3, [r0, #24]
   25504:	e59f302c 	ldr	r3, [pc, #44]	; 25538 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
   25508:	e5c0e010 	strb	lr, [r0, #16]
   2550c:	e8800048 	stm	r0, {r3, r6}
   25510:	e580c01c 	str	ip, [r0, #28]
   25514:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   25518:	e5c02026 	strb	r2, [r0, #38]	; 0x26
   2551c:	eb00000d 	bl	25558 <CGPIOPin::AssignPin(unsigned int)>
   25520:	e1a00004 	mov	r0, r4
   25524:	e1a01005 	mov	r1, r5
   25528:	e3a02001 	mov	r2, #1
   2552c:	eb00002a 	bl	255dc <CGPIOPin::SetMode(TGPIOMode, bool)>
   25530:	e1a00004 	mov	r0, r4
   25534:	e8bd8070 	pop	{r4, r5, r6, pc}
   25538:	00043498 	.word	0x00043498

0002553c <CGPIOPin::~CGPIOPin()>:
   2553c:	e12fff1e 	bx	lr

00025540 <CGPIOPin::~CGPIOPin()>:
   25540:	e92d4010 	push	{r4, lr}
   25544:	e1a04000 	mov	r4, r0
   25548:	e3a01028 	mov	r1, #40	; 0x28
   2554c:	eb00168d 	bl	2af88 <operator delete(void*, unsigned int)>
   25550:	e1a00004 	mov	r0, r4
   25554:	e8bd8010 	pop	{r4, pc}

00025558 <CGPIOPin::AssignPin(unsigned int)>:
   25558:	e5903004 	ldr	r3, [r0, #4]
   2555c:	e92d4070 	push	{r4, r5, r6, lr}
   25560:	e3530036 	cmp	r3, #54	; 0x36
   25564:	1a000017 	bne	255c8 <CGPIOPin::AssignPin(unsigned int)+0x70>
   25568:	e3510035 	cmp	r1, #53	; 0x35
   2556c:	e1a05000 	mov	r5, r0
   25570:	e1a04001 	mov	r4, r1
   25574:	e5801004 	str	r1, [r0, #4]
   25578:	8a000007 	bhi	2559c <CGPIOPin::AssignPin(unsigned int)+0x44>
   2557c:	e3a03001 	mov	r3, #1
   25580:	e204201f 	and	r2, r4, #31
   25584:	e1a042a4 	lsr	r4, r4, #5
   25588:	e1a03213 	lsl	r3, r3, r2
   2558c:	e1a04104 	lsl	r4, r4, #2
   25590:	e585300c 	str	r3, [r5, #12]
   25594:	e5854008 	str	r4, [r5, #8]
   25598:	e8bd8070 	pop	{r4, r5, r6, pc}
   2559c:	eb000851 	bl	276e8 <CMachineInfo::Get()>
   255a0:	e6ef1074 	uxtb	r1, r4
   255a4:	eb0007b4 	bl	2747c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   255a8:	e3500035 	cmp	r0, #53	; 0x35
   255ac:	e1a04000 	mov	r4, r0
   255b0:	e5850004 	str	r0, [r5, #4]
   255b4:	9afffff0 	bls	2557c <CGPIOPin::AssignPin(unsigned int)+0x24>
   255b8:	e59f1018 	ldr	r1, [pc, #24]	; 255d8 <CGPIOPin::AssignPin(unsigned int)+0x80>
   255bc:	e3a02047 	mov	r2, #71	; 0x47
   255c0:	e2810020 	add	r0, r1, #32
   255c4:	ebfffc5a 	bl	24734 <assertion_failed>
   255c8:	e59f1008 	ldr	r1, [pc, #8]	; 255d8 <CGPIOPin::AssignPin(unsigned int)+0x80>
   255cc:	e3a02040 	mov	r2, #64	; 0x40
   255d0:	e281000c 	add	r0, r1, #12
   255d4:	ebfffc56 	bl	24734 <assertion_failed>
   255d8:	000434a0 	.word	0x000434a0

000255dc <CGPIOPin::SetMode(TGPIOMode, bool)>:
   255dc:	e3510009 	cmp	r1, #9
   255e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   255e4:	8a000058 	bhi	2574c <CGPIOPin::SetMode(TGPIOMode, bool)+0x170>
   255e8:	e1a06002 	mov	r6, r2
   255ec:	e1a04000 	mov	r4, r0
   255f0:	e3a02000 	mov	r2, #0
   255f4:	e5c01010 	strb	r1, [r0, #16]
   255f8:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   255fc:	e5d03010 	ldrb	r3, [r0, #16]
   25600:	e2431004 	sub	r1, r3, #4
   25604:	e6efc071 	uxtb	ip, r1
   25608:	e35c0005 	cmp	ip, #5
   2560c:	9a000030 	bls	256d4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf8>
   25610:	e3530001 	cmp	r3, #1
   25614:	13a03000 	movne	r3, #0
   25618:	02063001 	andeq	r3, r6, #1
   2561c:	e3530000 	cmp	r3, #0
   25620:	1a00004d 	bne	2575c <CGPIOPin::SetMode(TGPIOMode, bool)+0x180>
   25624:	e5943004 	ldr	r3, [r4, #4]
   25628:	e3530035 	cmp	r3, #53	; 0x35
   2562c:	8a00004d 	bhi	25768 <CGPIOPin::SetMode(TGPIOMode, bool)+0x18c>
   25630:	e59f5140 	ldr	r5, [pc, #320]	; 25778 <CGPIOPin::SetMode(TGPIOMode, bool)+0x19c>
   25634:	e59f7140 	ldr	r7, [pc, #320]	; 2577c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a0>
   25638:	e0852395 	umull	r2, r5, r5, r3
   2563c:	e5970000 	ldr	r0, [r7]
   25640:	e1a051a5 	lsr	r5, r5, #3
   25644:	e2852302 	add	r2, r5, #134217728	; 0x8000000
   25648:	e0855105 	add	r5, r5, r5, lsl #2
   2564c:	e2822702 	add	r2, r2, #524288	; 0x80000
   25650:	e0435085 	sub	r5, r3, r5, lsl #1
   25654:	e3500000 	cmp	r0, #0
   25658:	e1a08102 	lsl	r8, r2, #2
   2565c:	e0855085 	add	r5, r5, r5, lsl #1
   25660:	1a000026 	bne	25700 <CGPIOPin::SetMode(TGPIOMode, bool)+0x124>
   25664:	e5d42010 	ldrb	r2, [r4, #16]
   25668:	e3a01007 	mov	r1, #7
   2566c:	e2422001 	sub	r2, r2, #1
   25670:	e16f2f12 	clz	r2, r2
   25674:	e5983000 	ldr	r3, [r8]
   25678:	e1a022a2 	lsr	r2, r2, #5
   2567c:	e1c33511 	bic	r3, r3, r1, lsl r5
   25680:	e1835512 	orr	r5, r3, r2, lsl r5
   25684:	e5885000 	str	r5, [r8]
   25688:	e5973000 	ldr	r3, [r7]
   2568c:	e3530000 	cmp	r3, #0
   25690:	1a000016 	bne	256f0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x114>
   25694:	e3560000 	cmp	r6, #0
   25698:	0a00000a 	beq	256c8 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   2569c:	e5d43010 	ldrb	r3, [r4, #16]
   256a0:	e3530003 	cmp	r3, #3
   256a4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   256a8:	ea000006 	b	256c8 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   256ac:	00025728 	.word	0x00025728
   256b0:	00025718 	.word	0x00025718
   256b4:	00025708 	.word	0x00025708
   256b8:	000256bc 	.word	0x000256bc
   256bc:	e1a00004 	mov	r0, r4
   256c0:	e3a01001 	mov	r1, #1
   256c4:	eb0001e1 	bl	25e50 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   256c8:	e3a03000 	mov	r3, #0
   256cc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   256d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   256d4:	e1560002 	cmp	r6, r2
   256d8:	1a000016 	bne	25738 <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
   256dc:	e1a00004 	mov	r0, r4
   256e0:	eb000202 	bl	25ef0 <CGPIOPin::SetAlternateFunction(unsigned int)>
   256e4:	e3a03000 	mov	r3, #0
   256e8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   256ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   256f0:	eb00196d 	bl	2bcac <LeaveCritical>
   256f4:	e3560000 	cmp	r6, #0
   256f8:	0afffff2 	beq	256c8 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   256fc:	eaffffe6 	b	2569c <CGPIOPin::SetMode(TGPIOMode, bool)+0xc0>
   25700:	eb00193f 	bl	2bc04 <EnterCritical>
   25704:	eaffffd6 	b	25664 <CGPIOPin::SetMode(TGPIOMode, bool)+0x88>
   25708:	e1a00004 	mov	r0, r4
   2570c:	e3a01002 	mov	r1, #2
   25710:	eb0001ce 	bl	25e50 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25714:	eaffffeb 	b	256c8 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   25718:	e1a00004 	mov	r0, r4
   2571c:	e3a01000 	mov	r1, #0
   25720:	eb000017 	bl	25784 <CGPIOPin::Write(unsigned int)>
   25724:	eaffffe7 	b	256c8 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   25728:	e1a00004 	mov	r0, r4
   2572c:	e3a01000 	mov	r1, #0
   25730:	eb0001c6 	bl	25e50 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25734:	eaffffe3 	b	256c8 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   25738:	e1a01002 	mov	r1, r2
   2573c:	eb0001c3 	bl	25e50 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25740:	e5d43010 	ldrb	r3, [r4, #16]
   25744:	e2431004 	sub	r1, r3, #4
   25748:	eaffffe3 	b	256dc <CGPIOPin::SetMode(TGPIOMode, bool)+0x100>
   2574c:	e59f102c 	ldr	r1, [pc, #44]	; 25780 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
   25750:	e3a0204f 	mov	r2, #79	; 0x4f
   25754:	e2810034 	add	r0, r1, #52	; 0x34
   25758:	ebfffbf5 	bl	24734 <assertion_failed>
   2575c:	e1a01002 	mov	r1, r2
   25760:	eb0001ba 	bl	25e50 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25764:	eaffffae 	b	25624 <CGPIOPin::SetMode(TGPIOMode, bool)+0x48>
   25768:	e59f1010 	ldr	r1, [pc, #16]	; 25780 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
   2576c:	e3a02068 	mov	r2, #104	; 0x68
   25770:	e2810020 	add	r0, r1, #32
   25774:	ebfffbee 	bl	24734 <assertion_failed>
   25778:	cccccccd 	.word	0xcccccccd
   2577c:	0004c53c 	.word	0x0004c53c
   25780:	000434a0 	.word	0x000434a0

00025784 <CGPIOPin::Write(unsigned int)>:
   25784:	e5903004 	ldr	r3, [r0, #4]
   25788:	e92d4010 	push	{r4, lr}
   2578c:	e3530035 	cmp	r3, #53	; 0x35
   25790:	8a000011 	bhi	257dc <CGPIOPin::Write(unsigned int)+0x58>
   25794:	e5d03010 	ldrb	r3, [r0, #16]
   25798:	e3530003 	cmp	r3, #3
   2579c:	8a000012 	bhi	257ec <CGPIOPin::Write(unsigned int)+0x68>
   257a0:	e3a02000 	mov	r2, #0
   257a4:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   257a8:	e3510001 	cmp	r1, #1
   257ac:	8a000012 	bhi	257fc <CGPIOPin::Write(unsigned int)+0x78>
   257b0:	e59f3054 	ldr	r3, [pc, #84]	; 2580c <CGPIOPin::Write(unsigned int)+0x88>
   257b4:	e59fc054 	ldr	ip, [pc, #84]	; 25810 <CGPIOPin::Write(unsigned int)+0x8c>
   257b8:	e3510000 	cmp	r1, #0
   257bc:	e5801014 	str	r1, [r0, #20]
   257c0:	11a01003 	movne	r1, r3
   257c4:	01a0100c 	moveq	r1, ip
   257c8:	e5903008 	ldr	r3, [r0, #8]
   257cc:	e590c00c 	ldr	ip, [r0, #12]
   257d0:	e781c003 	str	ip, [r1, r3]
   257d4:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   257d8:	e8bd8010 	pop	{r4, pc}
   257dc:	e59f1030 	ldr	r1, [pc, #48]	; 25814 <CGPIOPin::Write(unsigned int)+0x90>
   257e0:	e3a02091 	mov	r2, #145	; 0x91
   257e4:	e2810020 	add	r0, r1, #32
   257e8:	ebfffbd1 	bl	24734 <assertion_failed>
   257ec:	e59f1020 	ldr	r1, [pc, #32]	; 25814 <CGPIOPin::Write(unsigned int)+0x90>
   257f0:	e3a02094 	mov	r2, #148	; 0x94
   257f4:	e281004c 	add	r0, r1, #76	; 0x4c
   257f8:	ebfffbcd 	bl	24734 <assertion_failed>
   257fc:	e59f1010 	ldr	r1, [pc, #16]	; 25814 <CGPIOPin::Write(unsigned int)+0x90>
   25800:	e3a02098 	mov	r2, #152	; 0x98
   25804:	e2810070 	add	r0, r1, #112	; 0x70
   25808:	ebfffbc9 	bl	24734 <assertion_failed>
   2580c:	2020001c 	.word	0x2020001c
   25810:	20200028 	.word	0x20200028
   25814:	000434a0 	.word	0x000434a0

00025818 <CGPIOPin::Read() const>:
   25818:	e5903004 	ldr	r3, [r0, #4]
   2581c:	e92d4010 	push	{r4, lr}
   25820:	e3530035 	cmp	r3, #53	; 0x35
   25824:	8a00000f 	bhi	25868 <CGPIOPin::Read() const+0x50>
   25828:	e5d03010 	ldrb	r3, [r0, #16]
   2582c:	e2432002 	sub	r2, r3, #2
   25830:	e3530000 	cmp	r3, #0
   25834:	13520001 	cmpne	r2, #1
   25838:	8a00000e 	bhi	25878 <CGPIOPin::Read() const+0x60>
   2583c:	e3a03000 	mov	r3, #0
   25840:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25844:	e59f103c 	ldr	r1, [pc, #60]	; 25888 <CGPIOPin::Read() const+0x70>
   25848:	e590c008 	ldr	ip, [r0, #8]
   2584c:	e590200c 	ldr	r2, [r0, #12]
   25850:	e79c1001 	ldr	r1, [ip, r1]
   25854:	e1110002 	tst	r1, r2
   25858:	13a00001 	movne	r0, #1
   2585c:	01a00003 	moveq	r0, r3
   25860:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25864:	e8bd8010 	pop	{r4, pc}
   25868:	e59f101c 	ldr	r1, [pc, #28]	; 2588c <CGPIOPin::Read() const+0x74>
   2586c:	e3a020a4 	mov	r2, #164	; 0xa4
   25870:	e2810020 	add	r0, r1, #32
   25874:	ebfffbae 	bl	24734 <assertion_failed>
   25878:	e59f100c 	ldr	r1, [pc, #12]	; 2588c <CGPIOPin::Read() const+0x74>
   2587c:	e3a020a6 	mov	r2, #166	; 0xa6
   25880:	e2810090 	add	r0, r1, #144	; 0x90
   25884:	ebfffbaa 	bl	24734 <assertion_failed>
   25888:	20200034 	.word	0x20200034
   2588c:	000434a0 	.word	0x000434a0

00025890 <CGPIOPin::Invert()>:
   25890:	e5d02010 	ldrb	r2, [r0, #16]
   25894:	e3520001 	cmp	r2, #1
   25898:	1a000002 	bne	258a8 <CGPIOPin::Invert()+0x18>
   2589c:	e5901014 	ldr	r1, [r0, #20]
   258a0:	e2211001 	eor	r1, r1, #1
   258a4:	eaffffb6 	b	25784 <CGPIOPin::Write(unsigned int)>
   258a8:	e59f100c 	ldr	r1, [pc, #12]	; 258bc <CGPIOPin::Invert()+0x2c>
   258ac:	e3a020b5 	mov	r2, #181	; 0xb5
   258b0:	e92d4010 	push	{r4, lr}
   258b4:	e28100ec 	add	r0, r1, #236	; 0xec
   258b8:	ebfffb9d 	bl	24734 <assertion_failed>
   258bc:	000434a0 	.word	0x000434a0

000258c0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   258c0:	e5d0c010 	ldrb	ip, [r0, #16]
   258c4:	e92d4010 	push	{r4, lr}
   258c8:	e24ce002 	sub	lr, ip, #2
   258cc:	e35c0000 	cmp	ip, #0
   258d0:	135e0001 	cmpne	lr, #1
   258d4:	8a000028 	bhi	2597c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
   258d8:	e5d0c025 	ldrb	ip, [r0, #37]	; 0x25
   258dc:	e35c0006 	cmp	ip, #6
   258e0:	1a000011 	bne	2592c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
   258e4:	e5d0c026 	ldrb	ip, [r0, #38]	; 0x26
   258e8:	e35c0006 	cmp	ip, #6
   258ec:	1a000012 	bne	2593c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
   258f0:	e3510000 	cmp	r1, #0
   258f4:	0a000014 	beq	2594c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   258f8:	e590c01c 	ldr	ip, [r0, #28]
   258fc:	e35c0000 	cmp	ip, #0
   25900:	1a000015 	bne	2595c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
   25904:	e590c018 	ldr	ip, [r0, #24]
   25908:	e580101c 	str	r1, [r0, #28]
   2590c:	e35c0000 	cmp	ip, #0
   25910:	e5802020 	str	r2, [r0, #32]
   25914:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   25918:	0a000013 	beq	2596c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
   2591c:	e8bd4010 	pop	{r4, lr}
   25920:	e1a01000 	mov	r1, r0
   25924:	e1a0000c 	mov	r0, ip
   25928:	ea001b74 	b	2c700 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   2592c:	e59f1058 	ldr	r1, [pc, #88]	; 2598c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25930:	e3a020c0 	mov	r2, #192	; 0xc0
   25934:	e2810f42 	add	r0, r1, #264	; 0x108
   25938:	ebfffb7d 	bl	24734 <assertion_failed>
   2593c:	e59f1048 	ldr	r1, [pc, #72]	; 2598c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25940:	e3a020c1 	mov	r2, #193	; 0xc1
   25944:	e2810f4b 	add	r0, r1, #300	; 0x12c
   25948:	ebfffb79 	bl	24734 <assertion_failed>
   2594c:	e59f1038 	ldr	r1, [pc, #56]	; 2598c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25950:	e3a020c3 	mov	r2, #195	; 0xc3
   25954:	e2810f55 	add	r0, r1, #340	; 0x154
   25958:	ebfffb75 	bl	24734 <assertion_failed>
   2595c:	e59f1028 	ldr	r1, [pc, #40]	; 2598c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25960:	e3a020c4 	mov	r2, #196	; 0xc4
   25964:	e2810f59 	add	r0, r1, #356	; 0x164
   25968:	ebfffb71 	bl	24734 <assertion_failed>
   2596c:	e59f1018 	ldr	r1, [pc, #24]	; 2598c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25970:	e3a020cb 	mov	r2, #203	; 0xcb
   25974:	e2810f5d 	add	r0, r1, #372	; 0x174
   25978:	ebfffb6d 	bl	24734 <assertion_failed>
   2597c:	e59f1008 	ldr	r1, [pc, #8]	; 2598c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25980:	e3a020bc 	mov	r2, #188	; 0xbc
   25984:	e2810090 	add	r0, r1, #144	; 0x90
   25988:	ebfffb69 	bl	24734 <assertion_failed>
   2598c:	000434a0 	.word	0x000434a0

00025990 <CGPIOPin::DisconnectInterrupt()>:
   25990:	e5d03010 	ldrb	r3, [r0, #16]
   25994:	e92d4010 	push	{r4, lr}
   25998:	e2432002 	sub	r2, r3, #2
   2599c:	e3530000 	cmp	r3, #0
   259a0:	13520001 	cmpne	r2, #1
   259a4:	8a000020 	bhi	25a2c <CGPIOPin::DisconnectInterrupt()+0x9c>
   259a8:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   259ac:	e1a01000 	mov	r1, r0
   259b0:	e3530006 	cmp	r3, #6
   259b4:	1a00000c 	bne	259ec <CGPIOPin::DisconnectInterrupt()+0x5c>
   259b8:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   259bc:	e3530006 	cmp	r3, #6
   259c0:	1a00000d 	bne	259fc <CGPIOPin::DisconnectInterrupt()+0x6c>
   259c4:	e590301c 	ldr	r3, [r0, #28]
   259c8:	e3530000 	cmp	r3, #0
   259cc:	0a00000e 	beq	25a0c <CGPIOPin::DisconnectInterrupt()+0x7c>
   259d0:	e3a03000 	mov	r3, #0
   259d4:	e5900018 	ldr	r0, [r0, #24]
   259d8:	e581301c 	str	r3, [r1, #28]
   259dc:	e1500003 	cmp	r0, r3
   259e0:	0a00000d 	beq	25a1c <CGPIOPin::DisconnectInterrupt()+0x8c>
   259e4:	e8bd4010 	pop	{r4, lr}
   259e8:	ea001b68 	b	2c790 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   259ec:	e59f1048 	ldr	r1, [pc, #72]	; 25a3c <CGPIOPin::DisconnectInterrupt()+0xac>
   259f0:	e3a020d5 	mov	r2, #213	; 0xd5
   259f4:	e2810f42 	add	r0, r1, #264	; 0x108
   259f8:	ebfffb4d 	bl	24734 <assertion_failed>
   259fc:	e59f1038 	ldr	r1, [pc, #56]	; 25a3c <CGPIOPin::DisconnectInterrupt()+0xac>
   25a00:	e3a020d6 	mov	r2, #214	; 0xd6
   25a04:	e2810f4b 	add	r0, r1, #300	; 0x12c
   25a08:	ebfffb49 	bl	24734 <assertion_failed>
   25a0c:	e59f1028 	ldr	r1, [pc, #40]	; 25a3c <CGPIOPin::DisconnectInterrupt()+0xac>
   25a10:	e3a020d8 	mov	r2, #216	; 0xd8
   25a14:	e2810f61 	add	r0, r1, #388	; 0x184
   25a18:	ebfffb45 	bl	24734 <assertion_failed>
   25a1c:	e59f1018 	ldr	r1, [pc, #24]	; 25a3c <CGPIOPin::DisconnectInterrupt()+0xac>
   25a20:	e3a020db 	mov	r2, #219	; 0xdb
   25a24:	e2810f5d 	add	r0, r1, #372	; 0x174
   25a28:	ebfffb41 	bl	24734 <assertion_failed>
   25a2c:	e59f1008 	ldr	r1, [pc, #8]	; 25a3c <CGPIOPin::DisconnectInterrupt()+0xac>
   25a30:	e3a020d1 	mov	r2, #209	; 0xd1
   25a34:	e2810090 	add	r0, r1, #144	; 0x90
   25a38:	ebfffb3d 	bl	24734 <assertion_failed>
   25a3c:	000434a0 	.word	0x000434a0

00025a40 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   25a40:	e5d03010 	ldrb	r3, [r0, #16]
   25a44:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25a48:	e2432002 	sub	r2, r3, #2
   25a4c:	e3530000 	cmp	r3, #0
   25a50:	13520001 	cmpne	r2, #1
   25a54:	8a000030 	bhi	25b1c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
   25a58:	e590301c 	ldr	r3, [r0, #28]
   25a5c:	e1a04000 	mov	r4, r0
   25a60:	e3530000 	cmp	r3, #0
   25a64:	0a00001c 	beq	25adc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
   25a68:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25a6c:	e3530006 	cmp	r3, #6
   25a70:	1a00001d 	bne	25aec <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xac>
   25a74:	e3510005 	cmp	r1, #5
   25a78:	8a00001f 	bhi	25afc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xbc>
   25a7c:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25a80:	e1530001 	cmp	r3, r1
   25a84:	0a000020 	beq	25b0c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
   25a88:	e59f709c 	ldr	r7, [pc, #156]	; 25b2c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xec>
   25a8c:	e5903008 	ldr	r3, [r0, #8]
   25a90:	e5970000 	ldr	r0, [r7]
   25a94:	e59f6094 	ldr	r6, [pc, #148]	; 25b30 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
   25a98:	e0815081 	add	r5, r1, r1, lsl #1
   25a9c:	e3500000 	cmp	r0, #0
   25aa0:	e5c41025 	strb	r1, [r4, #37]	; 0x25
   25aa4:	e1a05105 	lsl	r5, r5, #2
   25aa8:	e0836006 	add	r6, r3, r6
   25aac:	1a000008 	bne	25ad4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
   25ab0:	e594200c 	ldr	r2, [r4, #12]
   25ab4:	e7963005 	ldr	r3, [r6, r5]
   25ab8:	e1833002 	orr	r3, r3, r2
   25abc:	e7863005 	str	r3, [r6, r5]
   25ac0:	e5973000 	ldr	r3, [r7]
   25ac4:	e3530000 	cmp	r3, #0
   25ac8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25acc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25ad0:	ea001875 	b	2bcac <LeaveCritical>
   25ad4:	eb00184a 	bl	2bc04 <EnterCritical>
   25ad8:	eafffff4 	b	25ab0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x70>
   25adc:	e59f1050 	ldr	r1, [pc, #80]	; 25b34 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25ae0:	e3a020e4 	mov	r2, #228	; 0xe4
   25ae4:	e2810f61 	add	r0, r1, #388	; 0x184
   25ae8:	ebfffb11 	bl	24734 <assertion_failed>
   25aec:	e59f1040 	ldr	r1, [pc, #64]	; 25b34 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25af0:	e3a020e6 	mov	r2, #230	; 0xe6
   25af4:	e2810f42 	add	r0, r1, #264	; 0x108
   25af8:	ebfffb0d 	bl	24734 <assertion_failed>
   25afc:	e59f1030 	ldr	r1, [pc, #48]	; 25b34 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25b00:	e3a020e7 	mov	r2, #231	; 0xe7
   25b04:	e2810f65 	add	r0, r1, #404	; 0x194
   25b08:	ebfffb09 	bl	24734 <assertion_failed>
   25b0c:	e59f1020 	ldr	r1, [pc, #32]	; 25b34 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25b10:	e3a020e8 	mov	r2, #232	; 0xe8
   25b14:	e2810f6e 	add	r0, r1, #440	; 0x1b8
   25b18:	ebfffb05 	bl	24734 <assertion_failed>
   25b1c:	e59f1010 	ldr	r1, [pc, #16]	; 25b34 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25b20:	e3a020e1 	mov	r2, #225	; 0xe1
   25b24:	e2810090 	add	r0, r1, #144	; 0x90
   25b28:	ebfffb01 	bl	24734 <assertion_failed>
   25b2c:	0004c53c 	.word	0x0004c53c
   25b30:	2020004c 	.word	0x2020004c
   25b34:	000434a0 	.word	0x000434a0

00025b38 <CGPIOPin::DisableInterrupt()>:
   25b38:	e5d03010 	ldrb	r3, [r0, #16]
   25b3c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25b40:	e2432002 	sub	r2, r3, #2
   25b44:	e3530000 	cmp	r3, #0
   25b48:	13520001 	cmpne	r2, #1
   25b4c:	8a00001e 	bhi	25bcc <CGPIOPin::DisableInterrupt()+0x94>
   25b50:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25b54:	e1a05000 	mov	r5, r0
   25b58:	e3530005 	cmp	r3, #5
   25b5c:	8a000016 	bhi	25bbc <CGPIOPin::DisableInterrupt()+0x84>
   25b60:	e59f7074 	ldr	r7, [pc, #116]	; 25bdc <CGPIOPin::DisableInterrupt()+0xa4>
   25b64:	e5902008 	ldr	r2, [r0, #8]
   25b68:	e5970000 	ldr	r0, [r7]
   25b6c:	e59f606c 	ldr	r6, [pc, #108]	; 25be0 <CGPIOPin::DisableInterrupt()+0xa8>
   25b70:	e0833083 	add	r3, r3, r3, lsl #1
   25b74:	e3500000 	cmp	r0, #0
   25b78:	e1a04103 	lsl	r4, r3, #2
   25b7c:	e0826006 	add	r6, r2, r6
   25b80:	1a000009 	bne	25bac <CGPIOPin::DisableInterrupt()+0x74>
   25b84:	e7963004 	ldr	r3, [r6, r4]
   25b88:	e595200c 	ldr	r2, [r5, #12]
   25b8c:	e1c33002 	bic	r3, r3, r2
   25b90:	e7863004 	str	r3, [r6, r4]
   25b94:	e5973000 	ldr	r3, [r7]
   25b98:	e3530000 	cmp	r3, #0
   25b9c:	1a000004 	bne	25bb4 <CGPIOPin::DisableInterrupt()+0x7c>
   25ba0:	e3a03006 	mov	r3, #6
   25ba4:	e5c53025 	strb	r3, [r5, #37]	; 0x25
   25ba8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25bac:	eb001814 	bl	2bc04 <EnterCritical>
   25bb0:	eafffff3 	b	25b84 <CGPIOPin::DisableInterrupt()+0x4c>
   25bb4:	eb00183c 	bl	2bcac <LeaveCritical>
   25bb8:	eafffff8 	b	25ba0 <CGPIOPin::DisableInterrupt()+0x68>
   25bbc:	e59f1020 	ldr	r1, [pc, #32]	; 25be4 <CGPIOPin::DisableInterrupt()+0xac>
   25bc0:	e3a020fb 	mov	r2, #251	; 0xfb
   25bc4:	e2810f75 	add	r0, r1, #468	; 0x1d4
   25bc8:	ebfffad9 	bl	24734 <assertion_failed>
   25bcc:	e59f1010 	ldr	r1, [pc, #16]	; 25be4 <CGPIOPin::DisableInterrupt()+0xac>
   25bd0:	e3a020f7 	mov	r2, #247	; 0xf7
   25bd4:	e2810090 	add	r0, r1, #144	; 0x90
   25bd8:	ebfffad5 	bl	24734 <assertion_failed>
   25bdc:	0004c53c 	.word	0x0004c53c
   25be0:	2020004c 	.word	0x2020004c
   25be4:	000434a0 	.word	0x000434a0

00025be8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   25be8:	e5d03010 	ldrb	r3, [r0, #16]
   25bec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25bf0:	e2432002 	sub	r2, r3, #2
   25bf4:	e3530000 	cmp	r3, #0
   25bf8:	13520001 	cmpne	r2, #1
   25bfc:	8a000030 	bhi	25cc4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
   25c00:	e590301c 	ldr	r3, [r0, #28]
   25c04:	e1a04000 	mov	r4, r0
   25c08:	e3530000 	cmp	r3, #0
   25c0c:	0a00001c 	beq	25c84 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
   25c10:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25c14:	e3530006 	cmp	r3, #6
   25c18:	1a00001d 	bne	25c94 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xac>
   25c1c:	e3510005 	cmp	r1, #5
   25c20:	8a00001f 	bhi	25ca4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xbc>
   25c24:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25c28:	e1530001 	cmp	r3, r1
   25c2c:	0a000020 	beq	25cb4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
   25c30:	e59f709c 	ldr	r7, [pc, #156]	; 25cd4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xec>
   25c34:	e5903008 	ldr	r3, [r0, #8]
   25c38:	e5970000 	ldr	r0, [r7]
   25c3c:	e59f6094 	ldr	r6, [pc, #148]	; 25cd8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
   25c40:	e0815081 	add	r5, r1, r1, lsl #1
   25c44:	e3500000 	cmp	r0, #0
   25c48:	e5c41026 	strb	r1, [r4, #38]	; 0x26
   25c4c:	e1a05105 	lsl	r5, r5, #2
   25c50:	e0836006 	add	r6, r3, r6
   25c54:	1a000008 	bne	25c7c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
   25c58:	e594200c 	ldr	r2, [r4, #12]
   25c5c:	e7963005 	ldr	r3, [r6, r5]
   25c60:	e1833002 	orr	r3, r3, r2
   25c64:	e7863005 	str	r3, [r6, r5]
   25c68:	e5973000 	ldr	r3, [r7]
   25c6c:	e3530000 	cmp	r3, #0
   25c70:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25c74:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25c78:	ea00180b 	b	2bcac <LeaveCritical>
   25c7c:	eb0017e0 	bl	2bc04 <EnterCritical>
   25c80:	eafffff4 	b	25c58 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x70>
   25c84:	e59f1050 	ldr	r1, [pc, #80]	; 25cdc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25c88:	e59f2050 	ldr	r2, [pc, #80]	; 25ce0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
   25c8c:	e2810f61 	add	r0, r1, #388	; 0x184
   25c90:	ebfffaa7 	bl	24734 <assertion_failed>
   25c94:	e59f1040 	ldr	r1, [pc, #64]	; 25cdc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25c98:	e59f2044 	ldr	r2, [pc, #68]	; 25ce4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
   25c9c:	e2810f4b 	add	r0, r1, #300	; 0x12c
   25ca0:	ebfffaa3 	bl	24734 <assertion_failed>
   25ca4:	e59f1030 	ldr	r1, [pc, #48]	; 25cdc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25ca8:	e3a02e11 	mov	r2, #272	; 0x110
   25cac:	e2810f65 	add	r0, r1, #404	; 0x194
   25cb0:	ebfffa9f 	bl	24734 <assertion_failed>
   25cb4:	e59f1020 	ldr	r1, [pc, #32]	; 25cdc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25cb8:	e59f2028 	ldr	r2, [pc, #40]	; 25ce8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x100>
   25cbc:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   25cc0:	ebfffa9b 	bl	24734 <assertion_failed>
   25cc4:	e59f1010 	ldr	r1, [pc, #16]	; 25cdc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25cc8:	e59f201c 	ldr	r2, [pc, #28]	; 25cec <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
   25ccc:	e2810090 	add	r0, r1, #144	; 0x90
   25cd0:	ebfffa97 	bl	24734 <assertion_failed>
   25cd4:	0004c53c 	.word	0x0004c53c
   25cd8:	2020004c 	.word	0x2020004c
   25cdc:	000434a0 	.word	0x000434a0
   25ce0:	0000010d 	.word	0x0000010d
   25ce4:	0000010f 	.word	0x0000010f
   25ce8:	00000111 	.word	0x00000111
   25cec:	0000010a 	.word	0x0000010a

00025cf0 <CGPIOPin::DisableInterrupt2()>:
   25cf0:	e5d03010 	ldrb	r3, [r0, #16]
   25cf4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25cf8:	e2432002 	sub	r2, r3, #2
   25cfc:	e3530000 	cmp	r3, #0
   25d00:	13520001 	cmpne	r2, #1
   25d04:	8a00001e 	bhi	25d84 <CGPIOPin::DisableInterrupt2()+0x94>
   25d08:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25d0c:	e1a05000 	mov	r5, r0
   25d10:	e3530005 	cmp	r3, #5
   25d14:	8a000016 	bhi	25d74 <CGPIOPin::DisableInterrupt2()+0x84>
   25d18:	e59f7074 	ldr	r7, [pc, #116]	; 25d94 <CGPIOPin::DisableInterrupt2()+0xa4>
   25d1c:	e5902008 	ldr	r2, [r0, #8]
   25d20:	e5970000 	ldr	r0, [r7]
   25d24:	e59f606c 	ldr	r6, [pc, #108]	; 25d98 <CGPIOPin::DisableInterrupt2()+0xa8>
   25d28:	e0833083 	add	r3, r3, r3, lsl #1
   25d2c:	e3500000 	cmp	r0, #0
   25d30:	e1a04103 	lsl	r4, r3, #2
   25d34:	e0826006 	add	r6, r2, r6
   25d38:	1a000009 	bne	25d64 <CGPIOPin::DisableInterrupt2()+0x74>
   25d3c:	e7963004 	ldr	r3, [r6, r4]
   25d40:	e595200c 	ldr	r2, [r5, #12]
   25d44:	e1c33002 	bic	r3, r3, r2
   25d48:	e7863004 	str	r3, [r6, r4]
   25d4c:	e5973000 	ldr	r3, [r7]
   25d50:	e3530000 	cmp	r3, #0
   25d54:	1a000004 	bne	25d6c <CGPIOPin::DisableInterrupt2()+0x7c>
   25d58:	e3a03006 	mov	r3, #6
   25d5c:	e5c53026 	strb	r3, [r5, #38]	; 0x26
   25d60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25d64:	eb0017a6 	bl	2bc04 <EnterCritical>
   25d68:	eafffff3 	b	25d3c <CGPIOPin::DisableInterrupt2()+0x4c>
   25d6c:	eb0017ce 	bl	2bcac <LeaveCritical>
   25d70:	eafffff8 	b	25d58 <CGPIOPin::DisableInterrupt2()+0x68>
   25d74:	e59f1020 	ldr	r1, [pc, #32]	; 25d9c <CGPIOPin::DisableInterrupt2()+0xac>
   25d78:	e3a02f49 	mov	r2, #292	; 0x124
   25d7c:	e2810f85 	add	r0, r1, #532	; 0x214
   25d80:	ebfffa6b 	bl	24734 <assertion_failed>
   25d84:	e59f1010 	ldr	r1, [pc, #16]	; 25d9c <CGPIOPin::DisableInterrupt2()+0xac>
   25d88:	e3a02e12 	mov	r2, #288	; 0x120
   25d8c:	e2810090 	add	r0, r1, #144	; 0x90
   25d90:	ebfffa67 	bl	24734 <assertion_failed>
   25d94:	0004c53c 	.word	0x0004c53c
   25d98:	2020004c 	.word	0x2020004c
   25d9c:	000434a0 	.word	0x000434a0

00025da0 <CGPIOPin::AcknowledgeInterrupt()>:
   25da0:	e590301c 	ldr	r3, [r0, #28]
   25da4:	e92d4010 	push	{r4, lr}
   25da8:	e3530000 	cmp	r3, #0
   25dac:	0a000009 	beq	25dd8 <CGPIOPin::AcknowledgeInterrupt()+0x38>
   25db0:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
   25db4:	e3530000 	cmp	r3, #0
   25db8:	1a00000a 	bne	25de8 <CGPIOPin::AcknowledgeInterrupt()+0x48>
   25dbc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25dc0:	e59f2030 	ldr	r2, [pc, #48]	; 25df8 <CGPIOPin::AcknowledgeInterrupt()+0x58>
   25dc4:	e590c00c 	ldr	ip, [r0, #12]
   25dc8:	e5901008 	ldr	r1, [r0, #8]
   25dcc:	e781c002 	str	ip, [r1, r2]
   25dd0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25dd4:	e8bd8010 	pop	{r4, pc}
   25dd8:	e59f101c 	ldr	r1, [pc, #28]	; 25dfc <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   25ddc:	e59f201c 	ldr	r2, [pc, #28]	; 25e00 <CGPIOPin::AcknowledgeInterrupt()+0x60>
   25de0:	e2810f61 	add	r0, r1, #388	; 0x184
   25de4:	ebfffa52 	bl	24734 <assertion_failed>
   25de8:	e59f100c 	ldr	r1, [pc, #12]	; 25dfc <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   25dec:	e3a02f4d 	mov	r2, #308	; 0x134
   25df0:	e2810f8e 	add	r0, r1, #568	; 0x238
   25df4:	ebfffa4e 	bl	24734 <assertion_failed>
   25df8:	20200040 	.word	0x20200040
   25dfc:	000434a0 	.word	0x000434a0
   25e00:	00000133 	.word	0x00000133

00025e04 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   25e04:	e3a03000 	mov	r3, #0
   25e08:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25e0c:	e1d13000 	bics	r3, r1, r0
   25e10:	159f2018 	ldrne	r2, [pc, #24]	; 25e30 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   25e14:	15823028 	strne	r3, [r2, #40]	; 0x28
   25e18:	e0100001 	ands	r0, r0, r1
   25e1c:	159f300c 	ldrne	r3, [pc, #12]	; 25e30 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   25e20:	1583001c 	strne	r0, [r3, #28]
   25e24:	e3a03000 	mov	r3, #0
   25e28:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25e2c:	e12fff1e 	bx	lr
   25e30:	20200000 	.word	0x20200000

00025e34 <CGPIOPin::ReadAll()>:
   25e34:	e3a03000 	mov	r3, #0
   25e38:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25e3c:	e59f2008 	ldr	r2, [pc, #8]	; 25e4c <CGPIOPin::ReadAll()+0x18>
   25e40:	e5920034 	ldr	r0, [r2, #52]	; 0x34
   25e44:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25e48:	e12fff1e 	bx	lr
   25e4c:	20200000 	.word	0x20200000

00025e50 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   25e50:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25e54:	e59f7080 	ldr	r7, [pc, #128]	; 25edc <CGPIOPin::SetPullMode(TGPIOPullMode)+0x8c>
   25e58:	e1a04000 	mov	r4, r0
   25e5c:	e5970000 	ldr	r0, [r7]
   25e60:	e1a05001 	mov	r5, r1
   25e64:	e3500000 	cmp	r0, #0
   25e68:	1a000015 	bne	25ec4 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x74>
   25e6c:	e3a06000 	mov	r6, #0
   25e70:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   25e74:	e3550002 	cmp	r5, #2
   25e78:	e5949008 	ldr	r9, [r4, #8]
   25e7c:	e59f805c 	ldr	r8, [pc, #92]	; 25ee0 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
   25e80:	8a000011 	bhi	25ecc <CGPIOPin::SetPullMode(TGPIOPullMode)+0x7c>
   25e84:	e59fa058 	ldr	sl, [pc, #88]	; 25ee4 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x94>
   25e88:	e3a00005 	mov	r0, #5
   25e8c:	e58a5094 	str	r5, [sl, #148]	; 0x94
   25e90:	eb000fc5 	bl	29dac <CTimer::SimpleusDelay(unsigned int)>
   25e94:	e594300c 	ldr	r3, [r4, #12]
   25e98:	e3a00005 	mov	r0, #5
   25e9c:	e7893008 	str	r3, [r9, r8]
   25ea0:	eb000fc1 	bl	29dac <CTimer::SimpleusDelay(unsigned int)>
   25ea4:	e58a6094 	str	r6, [sl, #148]	; 0x94
   25ea8:	e7896008 	str	r6, [r9, r8]
   25eac:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   25eb0:	e5973000 	ldr	r3, [r7]
   25eb4:	e3530000 	cmp	r3, #0
   25eb8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   25ebc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   25ec0:	ea001779 	b	2bcac <LeaveCritical>
   25ec4:	eb00174e 	bl	2bc04 <EnterCritical>
   25ec8:	eaffffe7 	b	25e6c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x1c>
   25ecc:	e59f1014 	ldr	r1, [pc, #20]	; 25ee8 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x98>
   25ed0:	e59f2014 	ldr	r2, [pc, #20]	; 25eec <CGPIOPin::SetPullMode(TGPIOPullMode)+0x9c>
   25ed4:	e2810f91 	add	r0, r1, #580	; 0x244
   25ed8:	ebfffa15 	bl	24734 <assertion_failed>
   25edc:	0004c53c 	.word	0x0004c53c
   25ee0:	20200098 	.word	0x20200098
   25ee4:	20200000 	.word	0x20200000
   25ee8:	000434a0 	.word	0x000434a0
   25eec:	00000165 	.word	0x00000165

00025ef0 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   25ef0:	e5903004 	ldr	r3, [r0, #4]
   25ef4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25ef8:	e3530035 	cmp	r3, #53	; 0x35
   25efc:	8a00001e 	bhi	25f7c <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
   25f00:	e59f2094 	ldr	r2, [pc, #148]	; 25f9c <CGPIOPin::SetAlternateFunction(unsigned int)+0xac>
   25f04:	e1a06001 	mov	r6, r1
   25f08:	e3510005 	cmp	r1, #5
   25f0c:	e0821392 	umull	r1, r2, r2, r3
   25f10:	e1a021a2 	lsr	r2, r2, #3
   25f14:	e2820302 	add	r0, r2, #134217728	; 0x8000000
   25f18:	e0822102 	add	r2, r2, r2, lsl #2
   25f1c:	e2800702 	add	r0, r0, #524288	; 0x80000
   25f20:	e0433082 	sub	r3, r3, r2, lsl #1
   25f24:	e1a05100 	lsl	r5, r0, #2
   25f28:	e0834083 	add	r4, r3, r3, lsl #1
   25f2c:	8a000016 	bhi	25f8c <CGPIOPin::SetAlternateFunction(unsigned int)+0x9c>
   25f30:	e59f7068 	ldr	r7, [pc, #104]	; 25fa0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
   25f34:	e5970000 	ldr	r0, [r7]
   25f38:	e3500000 	cmp	r0, #0
   25f3c:	1a00000c 	bne	25f74 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
   25f40:	e3a00007 	mov	r0, #7
   25f44:	e59f1058 	ldr	r1, [pc, #88]	; 25fa4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb4>
   25f48:	e5953000 	ldr	r3, [r5]
   25f4c:	e0816106 	add	r6, r1, r6, lsl #2
   25f50:	e5962260 	ldr	r2, [r6, #608]	; 0x260
   25f54:	e1c33410 	bic	r3, r3, r0, lsl r4
   25f58:	e1833412 	orr	r3, r3, r2, lsl r4
   25f5c:	e5853000 	str	r3, [r5]
   25f60:	e5973000 	ldr	r3, [r7]
   25f64:	e3530000 	cmp	r3, #0
   25f68:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25f6c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25f70:	ea00174d 	b	2bcac <LeaveCritical>
   25f74:	eb001722 	bl	2bc04 <EnterCritical>
   25f78:	eafffff0 	b	25f40 <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
   25f7c:	e59f1024 	ldr	r1, [pc, #36]	; 25fa8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   25f80:	e59f2024 	ldr	r2, [pc, #36]	; 25fac <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
   25f84:	e2810020 	add	r0, r1, #32
   25f88:	ebfff9e9 	bl	24734 <assertion_failed>
   25f8c:	e59f1014 	ldr	r1, [pc, #20]	; 25fa8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   25f90:	e59f2018 	ldr	r2, [pc, #24]	; 25fb0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
   25f94:	e2810f9a 	add	r0, r1, #616	; 0x268
   25f98:	ebfff9e5 	bl	24734 <assertion_failed>
   25f9c:	cccccccd 	.word	0xcccccccd
   25fa0:	0004c53c 	.word	0x0004c53c
   25fa4:	00043490 	.word	0x00043490
   25fa8:	000434a0 	.word	0x000434a0
   25fac:	00000181 	.word	0x00000181
   25fb0:	00000185 	.word	0x00000185

00025fb4 <CGPIOPin::InterruptHandler()>:
   25fb4:	e5d03010 	ldrb	r3, [r0, #16]
   25fb8:	e92d4010 	push	{r4, lr}
   25fbc:	e2432002 	sub	r2, r3, #2
   25fc0:	e3530000 	cmp	r3, #0
   25fc4:	13520001 	cmpne	r2, #1
   25fc8:	8a000013 	bhi	2601c <CGPIOPin::InterruptHandler()+0x68>
   25fcc:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25fd0:	e3530005 	cmp	r3, #5
   25fd4:	8a000005 	bhi	25ff0 <CGPIOPin::InterruptHandler()+0x3c>
   25fd8:	e590301c 	ldr	r3, [r0, #28]
   25fdc:	e3530000 	cmp	r3, #0
   25fe0:	0a000009 	beq	2600c <CGPIOPin::InterruptHandler()+0x58>
   25fe4:	e8bd4010 	pop	{r4, lr}
   25fe8:	e5900020 	ldr	r0, [r0, #32]
   25fec:	e12fff13 	bx	r3
   25ff0:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25ff4:	e3530005 	cmp	r3, #5
   25ff8:	9afffff6 	bls	25fd8 <CGPIOPin::InterruptHandler()+0x24>
   25ffc:	e59f1028 	ldr	r1, [pc, #40]	; 2602c <CGPIOPin::InterruptHandler()+0x78>
   26000:	e59f2028 	ldr	r2, [pc, #40]	; 26030 <CGPIOPin::InterruptHandler()+0x7c>
   26004:	e2810f9e 	add	r0, r1, #632	; 0x278
   26008:	ebfff9c9 	bl	24734 <assertion_failed>
   2600c:	e59f1018 	ldr	r1, [pc, #24]	; 2602c <CGPIOPin::InterruptHandler()+0x78>
   26010:	e3a02f66 	mov	r2, #408	; 0x198
   26014:	e2810f61 	add	r0, r1, #388	; 0x184
   26018:	ebfff9c5 	bl	24734 <assertion_failed>
   2601c:	e59f1008 	ldr	r1, [pc, #8]	; 2602c <CGPIOPin::InterruptHandler()+0x78>
   26020:	e59f200c 	ldr	r2, [pc, #12]	; 26034 <CGPIOPin::InterruptHandler()+0x80>
   26024:	e2810090 	add	r0, r1, #144	; 0x90
   26028:	ebfff9c1 	bl	24734 <assertion_failed>
   2602c:	000434a0 	.word	0x000434a0
   26030:	00000195 	.word	0x00000195
   26034:	00000192 	.word	0x00000192

00026038 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   26038:	e3500035 	cmp	r0, #53	; 0x35
   2603c:	e92d4070 	push	{r4, r5, r6, lr}
   26040:	8a000018 	bhi	260a8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
   26044:	e3a02001 	mov	r2, #1
   26048:	e59f6068 	ldr	r6, [pc, #104]	; 260b8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x80>
   2604c:	e59f4068 	ldr	r4, [pc, #104]	; 260bc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
   26050:	e5963000 	ldr	r3, [r6]
   26054:	e08442a0 	add	r4, r4, r0, lsr #5
   26058:	e200501f 	and	r5, r0, #31
   2605c:	e3530000 	cmp	r3, #0
   26060:	e1a04104 	lsl	r4, r4, #2
   26064:	e1a05512 	lsl	r5, r2, r5
   26068:	1a00000b 	bne	2609c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>
   2606c:	e1e02005 	mvn	r2, r5
   26070:	e59f1048 	ldr	r1, [pc, #72]	; 260c0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
   26074:	e5943000 	ldr	r3, [r4]
   26078:	e0033002 	and	r3, r3, r2
   2607c:	e484300c 	str	r3, [r4], #12
   26080:	e1540001 	cmp	r4, r1
   26084:	9afffffa 	bls	26074 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
   26088:	e5963000 	ldr	r3, [r6]
   2608c:	e3530000 	cmp	r3, #0
   26090:	08bd8070 	popeq	{r4, r5, r6, pc}
   26094:	e8bd4070 	pop	{r4, r5, r6, lr}
   26098:	ea001703 	b	2bcac <LeaveCritical>
   2609c:	e1a00003 	mov	r0, r3
   260a0:	eb0016d7 	bl	2bc04 <EnterCritical>
   260a4:	eafffff0 	b	2606c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x34>
   260a8:	e59f1014 	ldr	r1, [pc, #20]	; 260c4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
   260ac:	e59f2014 	ldr	r2, [pc, #20]	; 260c8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x90>
   260b0:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   260b4:	ebfff99e 	bl	24734 <assertion_failed>
   260b8:	0004c53c 	.word	0x0004c53c
   260bc:	08080013 	.word	0x08080013
   260c0:	2020008b 	.word	0x2020008b
   260c4:	000434a0 	.word	0x000434a0
   260c8:	0000019e 	.word	0x0000019e

000260cc <__static_initialization_and_destruction_0(int, int)>:
   260cc:	e59f3014 	ldr	r3, [pc, #20]	; 260e8 <__static_initialization_and_destruction_0(int, int)+0x1c>
   260d0:	e1510003 	cmp	r1, r3
   260d4:	03500001 	cmpeq	r0, #1
   260d8:	03a02001 	moveq	r2, #1
   260dc:	059f3008 	ldreq	r3, [pc, #8]	; 260ec <__static_initialization_and_destruction_0(int, int)+0x20>
   260e0:	05832000 	streq	r2, [r3]
   260e4:	e12fff1e 	bx	lr
   260e8:	0000ffff 	.word	0x0000ffff
   260ec:	0004c53c 	.word	0x0004c53c

000260f0 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   260f0:	e3a02001 	mov	r2, #1
   260f4:	e59f3004 	ldr	r3, [pc, #4]	; 26100 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
   260f8:	e5832000 	str	r2, [r3]
   260fc:	e12fff1e 	bx	lr
   26100:	0004c53c 	.word	0x0004c53c

00026104 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   26104:	e3a01000 	mov	r1, #0
   26108:	ea00000a 	b	26138 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
   2610c:	e3520009 	cmp	r2, #9
   26110:	8a000011 	bhi	2615c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   26114:	e3730001 	cmn	r3, #1
   26118:	13a02000 	movne	r2, #0
   2611c:	03a02001 	moveq	r2, #1
   26120:	e1510003 	cmp	r1, r3
   26124:	91a01002 	movls	r1, r2
   26128:	83821001 	orrhi	r1, r2, #1
   2612c:	e3510000 	cmp	r1, #0
   26130:	1a000009 	bne	2615c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   26134:	e1a01003 	mov	r1, r3
   26138:	e0d0c0d1 	ldrsb	ip, [r0], #1
   2613c:	e0813101 	add	r3, r1, r1, lsl #2
   26140:	e24c2030 	sub	r2, ip, #48	; 0x30
   26144:	e35c0000 	cmp	ip, #0
   26148:	e0823083 	add	r3, r2, r3, lsl #1
   2614c:	e6ef2072 	uxtb	r2, r2
   26150:	1affffed 	bne	2610c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
   26154:	e1a00001 	mov	r0, r1
   26158:	e12fff1e 	bx	lr
   2615c:	e3e01000 	mvn	r1, #0
   26160:	e1a00001 	mov	r0, r1
   26164:	e12fff1e 	bx	lr

00026168 <CKernelOptions::~CKernelOptions()>:
   26168:	e3a02000 	mov	r2, #0
   2616c:	e59f3004 	ldr	r3, [pc, #4]	; 26178 <CKernelOptions::~CKernelOptions()+0x10>
   26170:	e5832000 	str	r2, [r3]
   26174:	e12fff1e 	bx	lr
   26178:	0004c540 	.word	0x0004c540

0002617c <CKernelOptions::GetWidth() const>:
   2617c:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
   26180:	e12fff1e 	bx	lr

00026184 <CKernelOptions::GetHeight() const>:
   26184:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
   26188:	e12fff1e 	bx	lr

0002618c <CKernelOptions::GetLogDevice() const>:
   2618c:	e2800e81 	add	r0, r0, #2064	; 0x810
   26190:	e2800008 	add	r0, r0, #8
   26194:	e12fff1e 	bx	lr

00026198 <CKernelOptions::GetLogLevel() const>:
   26198:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
   2619c:	e12fff1e 	bx	lr

000261a0 <CKernelOptions::GetKeyMap() const>:
   261a0:	e2800e83 	add	r0, r0, #2096	; 0x830
   261a4:	e12fff1e 	bx	lr

000261a8 <CKernelOptions::GetUSBPowerDelay() const>:
   261a8:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
   261ac:	e12fff1e 	bx	lr

000261b0 <CKernelOptions::GetUSBFullSpeed() const>:
   261b0:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
   261b4:	e12fff1e 	bx	lr

000261b8 <CKernelOptions::GetSoundDevice() const>:
   261b8:	e2800e83 	add	r0, r0, #2096	; 0x830
   261bc:	e2800009 	add	r0, r0, #9
   261c0:	e12fff1e 	bx	lr

000261c4 <CKernelOptions::GetSoundOption() const>:
   261c4:	e5900850 	ldr	r0, [r0, #2128]	; 0x850
   261c8:	e12fff1e 	bx	lr

000261cc <CKernelOptions::GetCPUSpeed() const>:
   261cc:	e5d00854 	ldrb	r0, [r0, #2132]	; 0x854
   261d0:	e12fff1e 	bx	lr

000261d4 <CKernelOptions::GetSoCMaxTemp() const>:
   261d4:	e5900858 	ldr	r0, [r0, #2136]	; 0x858
   261d8:	e12fff1e 	bx	lr

000261dc <CKernelOptions::Get()>:
   261dc:	e59f3004 	ldr	r3, [pc, #4]	; 261e8 <CKernelOptions::Get()+0xc>
   261e0:	e5930000 	ldr	r0, [r3]
   261e4:	e12fff1e 	bx	lr
   261e8:	0004c540 	.word	0x0004c540

000261ec <CKernelOptions::GetToken()>:
   261ec:	e1a01000 	mov	r1, r0
   261f0:	e590080c 	ldr	r0, [r0, #2060]	; 0x80c
   261f4:	e1d030d0 	ldrsb	r3, [r0]
   261f8:	e3530000 	cmp	r3, #0
   261fc:	1a000005 	bne	26218 <CKernelOptions::GetToken()+0x2c>
   26200:	ea000017 	b	26264 <CKernelOptions::GetToken()+0x78>
   26204:	e2800001 	add	r0, r0, #1
   26208:	e581080c 	str	r0, [r1, #2060]	; 0x80c
   2620c:	e1d030d0 	ldrsb	r3, [r0]
   26210:	e3530000 	cmp	r3, #0
   26214:	0a000012 	beq	26264 <CKernelOptions::GetToken()+0x78>
   26218:	e3530020 	cmp	r3, #32
   2621c:	0afffff8 	beq	26204 <CKernelOptions::GetToken()+0x18>
   26220:	e591380c 	ldr	r3, [r1, #2060]	; 0x80c
   26224:	e1d320d0 	ldrsb	r2, [r3]
   26228:	e3520000 	cmp	r2, #0
   2622c:	1a000005 	bne	26248 <CKernelOptions::GetToken()+0x5c>
   26230:	e12fff1e 	bx	lr
   26234:	e2833001 	add	r3, r3, #1
   26238:	e581380c 	str	r3, [r1, #2060]	; 0x80c
   2623c:	e1d320d0 	ldrsb	r2, [r3]
   26240:	e3520000 	cmp	r2, #0
   26244:	012fff1e 	bxeq	lr
   26248:	e3520020 	cmp	r2, #32
   2624c:	1afffff8 	bne	26234 <CKernelOptions::GetToken()+0x48>
   26250:	e3a02000 	mov	r2, #0
   26254:	e283c001 	add	ip, r3, #1
   26258:	e581c80c 	str	ip, [r1, #2060]	; 0x80c
   2625c:	e5c32000 	strb	r2, [r3]
   26260:	e12fff1e 	bx	lr
   26264:	e3a00000 	mov	r0, #0
   26268:	e12fff1e 	bx	lr

0002626c <CKernelOptions::CKernelOptions()>:
   2626c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26270:	e3a02004 	mov	r2, #4
   26274:	e1a05000 	mov	r5, r0
   26278:	e3a04000 	mov	r4, #0
   2627c:	e3a0303c 	mov	r3, #60	; 0x3c
   26280:	e2807e81 	add	r7, r0, #2064	; 0x810
   26284:	e2877008 	add	r7, r7, #8
   26288:	e580282c 	str	r2, [r0, #2092]	; 0x82c
   2628c:	e5803858 	str	r3, [r0, #2136]	; 0x858
   26290:	e24dd014 	sub	sp, sp, #20
   26294:	e59f1378 	ldr	r1, [pc, #888]	; 26614 <CKernelOptions::CKernelOptions()+0x3a8>
   26298:	e1a00007 	mov	r0, r7
   2629c:	e5854810 	str	r4, [r5, #2064]	; 0x810
   262a0:	e5854814 	str	r4, [r5, #2068]	; 0x814
   262a4:	e5854834 	str	r4, [r5, #2100]	; 0x834
   262a8:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
   262ac:	e5854850 	str	r4, [r5, #2128]	; 0x850
   262b0:	e5c54854 	strb	r4, [r5, #2132]	; 0x854
   262b4:	e2859e83 	add	r9, r5, #2096	; 0x830
   262b8:	eb000fe7 	bl	2a25c <strcpy>
   262bc:	e59f1354 	ldr	r1, [pc, #852]	; 26618 <CKernelOptions::CKernelOptions()+0x3ac>
   262c0:	e1a00009 	mov	r0, r9
   262c4:	eb000fe4 	bl	2a25c <strcpy>
   262c8:	e59f334c 	ldr	r3, [pc, #844]	; 2661c <CKernelOptions::CKernelOptions()+0x3b0>
   262cc:	e1a01004 	mov	r1, r4
   262d0:	e5c54839 	strb	r4, [r5, #2105]	; 0x839
   262d4:	e28d0008 	add	r0, sp, #8
   262d8:	e5835000 	str	r5, [r3]
   262dc:	ebfff935 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   262e0:	e1a02005 	mov	r2, r5
   262e4:	e59f3334 	ldr	r3, [pc, #820]	; 26620 <CKernelOptions::CKernelOptions()+0x3b4>
   262e8:	e59f1334 	ldr	r1, [pc, #820]	; 26624 <CKernelOptions::CKernelOptions()+0x3b8>
   262ec:	e58d4000 	str	r4, [sp]
   262f0:	e28d0008 	add	r0, sp, #8
   262f4:	ebfff93b 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   262f8:	e1500004 	cmp	r0, r4
   262fc:	0a00002b 	beq	263b0 <CKernelOptions::CKernelOptions()+0x144>
   26300:	e5953008 	ldr	r3, [r5, #8]
   26304:	e3530b02 	cmp	r3, #2048	; 0x800
   26308:	2a000028 	bcs	263b0 <CKernelOptions::CKernelOptions()+0x144>
   2630c:	e0853003 	add	r3, r5, r3
   26310:	e285200c 	add	r2, r5, #12
   26314:	e59f830c 	ldr	r8, [pc, #780]	; 26628 <CKernelOptions::CKernelOptions()+0x3bc>
   26318:	e59fa30c 	ldr	sl, [pc, #780]	; 2662c <CKernelOptions::CKernelOptions()+0x3c0>
   2631c:	e5c3400c 	strb	r4, [r3, #12]
   26320:	e585280c 	str	r2, [r5, #2060]	; 0x80c
   26324:	e1a00005 	mov	r0, r5
   26328:	ebffffaf 	bl	261ec <CKernelOptions::GetToken()>
   2632c:	e2506000 	subs	r6, r0, #0
   26330:	0a00001e 	beq	263b0 <CKernelOptions::CKernelOptions()+0x144>
   26334:	e1d630d0 	ldrsb	r3, [r6]
   26338:	e3530000 	cmp	r3, #0
   2633c:	0a00002e 	beq	263fc <CKernelOptions::CKernelOptions()+0x190>
   26340:	e1a04006 	mov	r4, r6
   26344:	ea000002 	b	26354 <CKernelOptions::CKernelOptions()+0xe8>
   26348:	e1f430d1 	ldrsb	r3, [r4, #1]!
   2634c:	e3530000 	cmp	r3, #0
   26350:	0a000029 	beq	263fc <CKernelOptions::CKernelOptions()+0x190>
   26354:	e353003d 	cmp	r3, #61	; 0x3d
   26358:	1afffffa 	bne	26348 <CKernelOptions::CKernelOptions()+0xdc>
   2635c:	e3a03000 	mov	r3, #0
   26360:	e1a0b004 	mov	fp, r4
   26364:	e1a01008 	mov	r1, r8
   26368:	e1a00006 	mov	r0, r6
   2636c:	e4cb3001 	strb	r3, [fp], #1
   26370:	eb000f1f 	bl	29ff4 <strcmp>
   26374:	e3500000 	cmp	r0, #0
   26378:	1a000011 	bne	263c4 <CKernelOptions::CKernelOptions()+0x158>
   2637c:	e1d430d1 	ldrsb	r3, [r4, #1]
   26380:	e3530000 	cmp	r3, #0
   26384:	0affffe6 	beq	26324 <CKernelOptions::CKernelOptions()+0xb8>
   26388:	e1a0000b 	mov	r0, fp
   2638c:	ebffff5c 	bl	26104 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26390:	e59f3298 	ldr	r3, [pc, #664]	; 26630 <CKernelOptions::CKernelOptions()+0x3c4>
   26394:	e2402d0a 	sub	r2, r0, #640	; 0x280
   26398:	e1520003 	cmp	r2, r3
   2639c:	95850810 	strls	r0, [r5, #2064]	; 0x810
   263a0:	e1a00005 	mov	r0, r5
   263a4:	ebffff90 	bl	261ec <CKernelOptions::GetToken()>
   263a8:	e2506000 	subs	r6, r0, #0
   263ac:	1affffe0 	bne	26334 <CKernelOptions::CKernelOptions()+0xc8>
   263b0:	e28d0008 	add	r0, sp, #8
   263b4:	ebfff906 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   263b8:	e1a00005 	mov	r0, r5
   263bc:	e28dd014 	add	sp, sp, #20
   263c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   263c4:	e1a0100a 	mov	r1, sl
   263c8:	e1a00006 	mov	r0, r6
   263cc:	eb000f08 	bl	29ff4 <strcmp>
   263d0:	e3500000 	cmp	r0, #0
   263d4:	1a000013 	bne	26428 <CKernelOptions::CKernelOptions()+0x1bc>
   263d8:	e1d430d1 	ldrsb	r3, [r4, #1]
   263dc:	e3530000 	cmp	r3, #0
   263e0:	0affffcf 	beq	26324 <CKernelOptions::CKernelOptions()+0xb8>
   263e4:	e1a0000b 	mov	r0, fp
   263e8:	ebffff45 	bl	26104 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   263ec:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
   263f0:	e3530f96 	cmp	r3, #600	; 0x258
   263f4:	95850814 	strls	r0, [r5, #2068]	; 0x814
   263f8:	eaffffc9 	b	26324 <CKernelOptions::CKernelOptions()+0xb8>
   263fc:	e1a01008 	mov	r1, r8
   26400:	e1a00006 	mov	r0, r6
   26404:	eb000efa 	bl	29ff4 <strcmp>
   26408:	e3500000 	cmp	r0, #0
   2640c:	0affffc4 	beq	26324 <CKernelOptions::CKernelOptions()+0xb8>
   26410:	e1a0100a 	mov	r1, sl
   26414:	e1a00006 	mov	r0, r6
   26418:	eb000ef5 	bl	29ff4 <strcmp>
   2641c:	e3500000 	cmp	r0, #0
   26420:	13a0b000 	movne	fp, #0
   26424:	0affffbe 	beq	26324 <CKernelOptions::CKernelOptions()+0xb8>
   26428:	e1a00006 	mov	r0, r6
   2642c:	e59f1200 	ldr	r1, [pc, #512]	; 26634 <CKernelOptions::CKernelOptions()+0x3c8>
   26430:	eb000eef 	bl	29ff4 <strcmp>
   26434:	e2504000 	subs	r4, r0, #0
   26438:	0a00000e 	beq	26478 <CKernelOptions::CKernelOptions()+0x20c>
   2643c:	e1a00006 	mov	r0, r6
   26440:	e59f11f0 	ldr	r1, [pc, #496]	; 26638 <CKernelOptions::CKernelOptions()+0x3cc>
   26444:	eb000eea 	bl	29ff4 <strcmp>
   26448:	e3500000 	cmp	r0, #0
   2644c:	1a00000f 	bne	26490 <CKernelOptions::CKernelOptions()+0x224>
   26450:	e35b0000 	cmp	fp, #0
   26454:	0affffb2 	beq	26324 <CKernelOptions::CKernelOptions()+0xb8>
   26458:	e1db30d0 	ldrsb	r3, [fp]
   2645c:	e3530000 	cmp	r3, #0
   26460:	0affffaf 	beq	26324 <CKernelOptions::CKernelOptions()+0xb8>
   26464:	e1a0000b 	mov	r0, fp
   26468:	ebffff25 	bl	26104 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   2646c:	e3500004 	cmp	r0, #4
   26470:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
   26474:	eaffffaa 	b	26324 <CKernelOptions::CKernelOptions()+0xb8>
   26478:	e1a0100b 	mov	r1, fp
   2647c:	e3a02013 	mov	r2, #19
   26480:	e1a00007 	mov	r0, r7
   26484:	eb000f7f 	bl	2a288 <strncpy>
   26488:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
   2648c:	eaffffa4 	b	26324 <CKernelOptions::CKernelOptions()+0xb8>
   26490:	e1a00006 	mov	r0, r6
   26494:	e59f11a0 	ldr	r1, [pc, #416]	; 2663c <CKernelOptions::CKernelOptions()+0x3d0>
   26498:	eb000ed5 	bl	29ff4 <strcmp>
   2649c:	e2504000 	subs	r4, r0, #0
   264a0:	0a000010 	beq	264e8 <CKernelOptions::CKernelOptions()+0x27c>
   264a4:	e1a00006 	mov	r0, r6
   264a8:	e59f1190 	ldr	r1, [pc, #400]	; 26640 <CKernelOptions::CKernelOptions()+0x3d4>
   264ac:	eb000ed0 	bl	29ff4 <strcmp>
   264b0:	e3500000 	cmp	r0, #0
   264b4:	1a000011 	bne	26500 <CKernelOptions::CKernelOptions()+0x294>
   264b8:	e35b0000 	cmp	fp, #0
   264bc:	0affff98 	beq	26324 <CKernelOptions::CKernelOptions()+0xb8>
   264c0:	e1db30d0 	ldrsb	r3, [fp]
   264c4:	e3530000 	cmp	r3, #0
   264c8:	0affff95 	beq	26324 <CKernelOptions::CKernelOptions()+0xb8>
   264cc:	e1a0000b 	mov	r0, fp
   264d0:	ebffff0b 	bl	26104 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   264d4:	e59f3168 	ldr	r3, [pc, #360]	; 26644 <CKernelOptions::CKernelOptions()+0x3d8>
   264d8:	e24020c8 	sub	r2, r0, #200	; 0xc8
   264dc:	e1520003 	cmp	r2, r3
   264e0:	95850834 	strls	r0, [r5, #2100]	; 0x834
   264e4:	eaffff8e 	b	26324 <CKernelOptions::CKernelOptions()+0xb8>
   264e8:	e1a0100b 	mov	r1, fp
   264ec:	e3a02002 	mov	r2, #2
   264f0:	e1a00009 	mov	r0, r9
   264f4:	eb000f63 	bl	2a288 <strncpy>
   264f8:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
   264fc:	eaffff88 	b	26324 <CKernelOptions::CKernelOptions()+0xb8>
   26500:	e1a00006 	mov	r0, r6
   26504:	e59f113c 	ldr	r1, [pc, #316]	; 26648 <CKernelOptions::CKernelOptions()+0x3dc>
   26508:	eb000eb9 	bl	29ff4 <strcmp>
   2650c:	e3500000 	cmp	r0, #0
   26510:	1a000006 	bne	26530 <CKernelOptions::CKernelOptions()+0x2c4>
   26514:	e1a0000b 	mov	r0, fp
   26518:	e59f112c 	ldr	r1, [pc, #300]	; 2664c <CKernelOptions::CKernelOptions()+0x3e0>
   2651c:	eb000eb4 	bl	29ff4 <strcmp>
   26520:	e3500000 	cmp	r0, #0
   26524:	03a03001 	moveq	r3, #1
   26528:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
   2652c:	eaffff7c 	b	26324 <CKernelOptions::CKernelOptions()+0xb8>
   26530:	e1a00006 	mov	r0, r6
   26534:	e59f1114 	ldr	r1, [pc, #276]	; 26650 <CKernelOptions::CKernelOptions()+0x3e4>
   26538:	eb000ead 	bl	29ff4 <strcmp>
   2653c:	e2504000 	subs	r4, r0, #0
   26540:	1a000005 	bne	2655c <CKernelOptions::CKernelOptions()+0x2f0>
   26544:	e1a0100b 	mov	r1, fp
   26548:	e3a02013 	mov	r2, #19
   2654c:	e2890009 	add	r0, r9, #9
   26550:	eb000f4c 	bl	2a288 <strncpy>
   26554:	e5c5484c 	strb	r4, [r5, #2124]	; 0x84c
   26558:	eaffff71 	b	26324 <CKernelOptions::CKernelOptions()+0xb8>
   2655c:	e1a00006 	mov	r0, r6
   26560:	e59f10ec 	ldr	r1, [pc, #236]	; 26654 <CKernelOptions::CKernelOptions()+0x3e8>
   26564:	eb000ea2 	bl	29ff4 <strcmp>
   26568:	e3500000 	cmp	r0, #0
   2656c:	1a000009 	bne	26598 <CKernelOptions::CKernelOptions()+0x32c>
   26570:	e35b0000 	cmp	fp, #0
   26574:	0affff6a 	beq	26324 <CKernelOptions::CKernelOptions()+0xb8>
   26578:	e1db30d0 	ldrsb	r3, [fp]
   2657c:	e3530000 	cmp	r3, #0
   26580:	0affff67 	beq	26324 <CKernelOptions::CKernelOptions()+0xb8>
   26584:	e1a0000b 	mov	r0, fp
   26588:	ebfffedd 	bl	26104 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   2658c:	e3500002 	cmp	r0, #2
   26590:	95850850 	strls	r0, [r5, #2128]	; 0x850
   26594:	eaffff62 	b	26324 <CKernelOptions::CKernelOptions()+0xb8>
   26598:	e1a00006 	mov	r0, r6
   2659c:	e59f10b4 	ldr	r1, [pc, #180]	; 26658 <CKernelOptions::CKernelOptions()+0x3ec>
   265a0:	eb000e93 	bl	29ff4 <strcmp>
   265a4:	e3500000 	cmp	r0, #0
   265a8:	1a000006 	bne	265c8 <CKernelOptions::CKernelOptions()+0x35c>
   265ac:	e1a0000b 	mov	r0, fp
   265b0:	e59f10a4 	ldr	r1, [pc, #164]	; 2665c <CKernelOptions::CKernelOptions()+0x3f0>
   265b4:	eb000e8e 	bl	29ff4 <strcmp>
   265b8:	e3500000 	cmp	r0, #0
   265bc:	03a03001 	moveq	r3, #1
   265c0:	05c53854 	strbeq	r3, [r5, #2132]	; 0x854
   265c4:	eaffff56 	b	26324 <CKernelOptions::CKernelOptions()+0xb8>
   265c8:	e1a00006 	mov	r0, r6
   265cc:	e59f108c 	ldr	r1, [pc, #140]	; 26660 <CKernelOptions::CKernelOptions()+0x3f4>
   265d0:	eb000e87 	bl	29ff4 <strcmp>
   265d4:	e16f3f1b 	clz	r3, fp
   265d8:	e3500000 	cmp	r0, #0
   265dc:	e1a032a3 	lsr	r3, r3, #5
   265e0:	01a00003 	moveq	r0, r3
   265e4:	13a00001 	movne	r0, #1
   265e8:	e3500000 	cmp	r0, #0
   265ec:	1affff4c 	bne	26324 <CKernelOptions::CKernelOptions()+0xb8>
   265f0:	e1db30d0 	ldrsb	r3, [fp]
   265f4:	e3530000 	cmp	r3, #0
   265f8:	0affff49 	beq	26324 <CKernelOptions::CKernelOptions()+0xb8>
   265fc:	e1a0000b 	mov	r0, fp
   26600:	ebfffebf 	bl	26104 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26604:	e2403028 	sub	r3, r0, #40	; 0x28
   26608:	e3530026 	cmp	r3, #38	; 0x26
   2660c:	95850858 	strls	r0, [r5, #2136]	; 0x858
   26610:	eaffff43 	b	26324 <CKernelOptions::CKernelOptions()+0xb8>
   26614:	00043778 	.word	0x00043778
   26618:	0003fe78 	.word	0x0003fe78
   2661c:	0004c540 	.word	0x0004c540
   26620:	0000080c 	.word	0x0000080c
   26624:	00050001 	.word	0x00050001
   26628:	000437fc 	.word	0x000437fc
   2662c:	000437f4 	.word	0x000437f4
   26630:	0000053c 	.word	0x0000053c
   26634:	00043780 	.word	0x00043780
   26638:	00043788 	.word	0x00043788
   2663c:	00043794 	.word	0x00043794
   26640:	0004379c 	.word	0x0004379c
   26644:	00001e78 	.word	0x00001e78
   26648:	000437ac 	.word	0x000437ac
   2664c:	000437b8 	.word	0x000437b8
   26650:	000437c0 	.word	0x000437c0
   26654:	000437cc 	.word	0x000437cc
   26658:	000437d8 	.word	0x000437d8
   2665c:	000437e0 	.word	0x000437e0
   26660:	000437e8 	.word	0x000437e8

00026664 <CKernelOptions::GetOptionValue(char*)>:
   26664:	e1d030d0 	ldrsb	r3, [r0]
   26668:	e3530000 	cmp	r3, #0
   2666c:	1a000003 	bne	26680 <CKernelOptions::GetOptionValue(char*)+0x1c>
   26670:	ea000007 	b	26694 <CKernelOptions::GetOptionValue(char*)+0x30>
   26674:	e1f030d1 	ldrsb	r3, [r0, #1]!
   26678:	e3530000 	cmp	r3, #0
   2667c:	0a000004 	beq	26694 <CKernelOptions::GetOptionValue(char*)+0x30>
   26680:	e353003d 	cmp	r3, #61	; 0x3d
   26684:	1afffffa 	bne	26674 <CKernelOptions::GetOptionValue(char*)+0x10>
   26688:	e3a03000 	mov	r3, #0
   2668c:	e4c03001 	strb	r3, [r0], #1
   26690:	e12fff1e 	bx	lr
   26694:	e1a00003 	mov	r0, r3
   26698:	e12fff1e 	bx	lr

0002669c <CKernelOptions::GetDecimal(char*)>:
   2669c:	e2503000 	subs	r3, r0, #0
   266a0:	0a000003 	beq	266b4 <CKernelOptions::GetDecimal(char*)+0x18>
   266a4:	e1d330d0 	ldrsb	r3, [r3]
   266a8:	e3530000 	cmp	r3, #0
   266ac:	0a000000 	beq	266b4 <CKernelOptions::GetDecimal(char*)+0x18>
   266b0:	eafffe93 	b	26104 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   266b4:	e3e00000 	mvn	r0, #0
   266b8:	e12fff1e 	bx	lr

000266bc <CLogger::CLogger(unsigned int, CTimer*)>:
   266bc:	e92d4010 	push	{r4, lr}
   266c0:	e3a03000 	mov	r3, #0
   266c4:	e1a04000 	mov	r4, r0
   266c8:	e3a00001 	mov	r0, #1
   266cc:	e884000e 	stm	r4, {r1, r2, r3}
   266d0:	e584300c 	str	r3, [r4, #12]
   266d4:	e5843010 	str	r3, [r4, #16]
   266d8:	e5843014 	str	r3, [r4, #20]
   266dc:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   266e0:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   266e4:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   266e8:	e58430f4 	str	r3, [r4, #244]	; 0xf4
   266ec:	e5840018 	str	r0, [r4, #24]
   266f0:	e58400ec 	str	r0, [r4, #236]	; 0xec
   266f4:	e3a00901 	mov	r0, #16384	; 0x4000
   266f8:	eb00121a 	bl	2af68 <operator new[](unsigned int)>
   266fc:	e59f300c 	ldr	r3, [pc, #12]	; 26710 <CLogger::CLogger(unsigned int, CTimer*)+0x54>
   26700:	e584000c 	str	r0, [r4, #12]
   26704:	e5834000 	str	r4, [r3]
   26708:	e1a00004 	mov	r0, r4
   2670c:	e8bd8010 	pop	{r4, pc}
   26710:	0004c544 	.word	0x0004c544

00026714 <CLogger::~CLogger()>:
   26714:	e92d4070 	push	{r4, r5, r6, lr}
   26718:	e3a02000 	mov	r2, #0
   2671c:	e1a04000 	mov	r4, r0
   26720:	e59f0064 	ldr	r0, [pc, #100]	; 2678c <CLogger::~CLogger()+0x78>
   26724:	e1a05002 	mov	r5, r2
   26728:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   2672c:	e59410e4 	ldr	r1, [r4, #228]	; 0xe4
   26730:	e5802000 	str	r2, [r0]
   26734:	ea00000b 	b	26768 <CLogger::~CLogger()+0x54>
   26738:	e592001c 	ldr	r0, [r2, #28]
   2673c:	e3500000 	cmp	r0, #0
   26740:	0a000003 	beq	26754 <CLogger::~CLogger()+0x40>
   26744:	e3a01f42 	mov	r1, #264	; 0x108
   26748:	eb00120e 	bl	2af88 <operator delete(void*, unsigned int)>
   2674c:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   26750:	e59410e4 	ldr	r1, [r4, #228]	; 0xe4
   26754:	e2833001 	add	r3, r3, #1
   26758:	e3530032 	cmp	r3, #50	; 0x32
   2675c:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   26760:	03a03000 	moveq	r3, #0
   26764:	058450e8 	streq	r5, [r4, #232]	; 0xe8
   26768:	e1530001 	cmp	r3, r1
   2676c:	e0842103 	add	r2, r4, r3, lsl #2
   26770:	1afffff0 	bne	26738 <CLogger::~CLogger()+0x24>
   26774:	e594000c 	ldr	r0, [r4, #12]
   26778:	e3500000 	cmp	r0, #0
   2677c:	0a000000 	beq	26784 <CLogger::~CLogger()+0x70>
   26780:	eb0011ff 	bl	2af84 <operator delete[](void*)>
   26784:	e1a00004 	mov	r0, r4
   26788:	e8bd8070 	pop	{r4, r5, r6, pc}
   2678c:	0004c544 	.word	0x0004c544

00026790 <CLogger::Initialize(CDevice*)>:
   26790:	e92d4010 	push	{r4, lr}
   26794:	e5801008 	str	r1, [r0, #8]
   26798:	e24dd008 	sub	sp, sp, #8
   2679c:	e1a04000 	mov	r4, r0
   267a0:	eb0003d0 	bl	276e8 <CMachineInfo::Get()>
   267a4:	eb0002e7 	bl	27348 <CMachineInfo::GetMachineName() const>
   267a8:	e1a02000 	mov	r2, r0
   267ac:	e59f301c 	ldr	r3, [pc, #28]	; 267d0 <CLogger::Initialize(CDevice*)+0x40>
   267b0:	e1a00004 	mov	r0, r4
   267b4:	e58d2000 	str	r2, [sp]
   267b8:	e283101c 	add	r1, r3, #28
   267bc:	e3a02003 	mov	r2, #3
   267c0:	eb000005 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   267c4:	e3a00001 	mov	r0, #1
   267c8:	e28dd008 	add	sp, sp, #8
   267cc:	e8bd8010 	pop	{r4, pc}
   267d0:	00043804 	.word	0x00043804

000267d4 <CLogger::SetNewTarget(CDevice*)>:
   267d4:	e5801008 	str	r1, [r0, #8]
   267d8:	e12fff1e 	bx	lr

000267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   267dc:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   267e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   267e4:	e24dd010 	sub	sp, sp, #16
   267e8:	e28dc018 	add	ip, sp, #24
   267ec:	e59d3014 	ldr	r3, [sp, #20]
   267f0:	e58dc000 	str	ip, [sp]
   267f4:	e58dc00c 	str	ip, [sp, #12]
   267f8:	eb000003 	bl	2680c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   267fc:	e28dd010 	add	sp, sp, #16
   26800:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   26804:	e28dd004 	add	sp, sp, #4
   26808:	e12fff1e 	bx	lr

0002680c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   2680c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   26810:	e1a07003 	mov	r7, r3
   26814:	e24dd024 	sub	sp, sp, #36	; 0x24
   26818:	e1a04000 	mov	r4, r0
   2681c:	e1a0000d 	mov	r0, sp
   26820:	e1a05002 	mov	r5, r2
   26824:	e1a06001 	mov	r6, r1
   26828:	eb000499 	bl	27a94 <CString::CString()>
   2682c:	e1a01007 	mov	r1, r7
   26830:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   26834:	e1a0000d 	mov	r0, sp
   26838:	eb0006b8 	bl	28320 <CString::FormatV(char const*, std::__va_list)>
   2683c:	e1a0000d 	mov	r0, sp
   26840:	eb0004ab 	bl	27af4 <CString::operator char const*() const>
   26844:	e1a02005 	mov	r2, r5
   26848:	e1a03000 	mov	r3, r0
   2684c:	e1a01006 	mov	r1, r6
   26850:	e1a00004 	mov	r0, r4
   26854:	eb000108 	bl	26c7c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   26858:	e5943000 	ldr	r3, [r4]
   2685c:	e1550003 	cmp	r5, r3
   26860:	8a000029 	bhi	2690c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x100>
   26864:	e28d0010 	add	r0, sp, #16
   26868:	eb000489 	bl	27a94 <CString::CString()>
   2686c:	e3550000 	cmp	r5, #0
   26870:	0a000029 	beq	2691c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x110>
   26874:	e5940004 	ldr	r0, [r4, #4]
   26878:	e3500000 	cmp	r0, #0
   2687c:	0a00000d 	beq	268b8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   26880:	eb000b3c 	bl	29578 <CTimer::GetTimeString()>
   26884:	e2505000 	subs	r5, r0, #0
   26888:	0a00000a 	beq	268b8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   2688c:	eb000498 	bl	27af4 <CString::operator char const*() const>
   26890:	e1a01000 	mov	r1, r0
   26894:	e28d0010 	add	r0, sp, #16
   26898:	eb0004cb 	bl	27bcc <CString::Append(char const*)>
   2689c:	e28d0010 	add	r0, sp, #16
   268a0:	e59f1138 	ldr	r1, [pc, #312]	; 269e0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
   268a4:	eb0004c8 	bl	27bcc <CString::Append(char const*)>
   268a8:	e5953000 	ldr	r3, [r5]
   268ac:	e1a00005 	mov	r0, r5
   268b0:	e5933004 	ldr	r3, [r3, #4]
   268b4:	e12fff33 	blx	r3
   268b8:	e1a01006 	mov	r1, r6
   268bc:	e28d0010 	add	r0, sp, #16
   268c0:	eb0004c1 	bl	27bcc <CString::Append(char const*)>
   268c4:	e59f1118 	ldr	r1, [pc, #280]	; 269e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
   268c8:	e28d0010 	add	r0, sp, #16
   268cc:	eb0004be 	bl	27bcc <CString::Append(char const*)>
   268d0:	e1a0000d 	mov	r0, sp
   268d4:	eb000486 	bl	27af4 <CString::operator char const*() const>
   268d8:	e1a01000 	mov	r1, r0
   268dc:	e28d0010 	add	r0, sp, #16
   268e0:	eb0004b9 	bl	27bcc <CString::Append(char const*)>
   268e4:	e59f10fc 	ldr	r1, [pc, #252]	; 269e8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
   268e8:	e28d0010 	add	r0, sp, #16
   268ec:	eb0004b6 	bl	27bcc <CString::Append(char const*)>
   268f0:	e28d0010 	add	r0, sp, #16
   268f4:	eb00047e 	bl	27af4 <CString::operator char const*() const>
   268f8:	e1a01000 	mov	r1, r0
   268fc:	e1a00004 	mov	r0, r4
   26900:	eb000077 	bl	26ae4 <CLogger::Write(char const*)>
   26904:	e28d0010 	add	r0, sp, #16
   26908:	eb00042e 	bl	279c8 <CString::~CString()>
   2690c:	e1a0000d 	mov	r0, sp
   26910:	eb00042c 	bl	279c8 <CString::~CString()>
   26914:	e28dd024 	add	sp, sp, #36	; 0x24
   26918:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2691c:	e59f10c8 	ldr	r1, [pc, #200]	; 269ec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
   26920:	e28d0010 	add	r0, sp, #16
   26924:	eb000478 	bl	27b0c <CString::operator=(char const*)>
   26928:	e5940004 	ldr	r0, [r4, #4]
   2692c:	e3500000 	cmp	r0, #0
   26930:	0a00000d 	beq	2696c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
   26934:	eb000b0f 	bl	29578 <CTimer::GetTimeString()>
   26938:	e2505000 	subs	r5, r0, #0
   2693c:	0a00000a 	beq	2696c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
   26940:	eb00046b 	bl	27af4 <CString::operator char const*() const>
   26944:	e1a01000 	mov	r1, r0
   26948:	e28d0010 	add	r0, sp, #16
   2694c:	eb00049e 	bl	27bcc <CString::Append(char const*)>
   26950:	e28d0010 	add	r0, sp, #16
   26954:	e59f1084 	ldr	r1, [pc, #132]	; 269e0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
   26958:	eb00049b 	bl	27bcc <CString::Append(char const*)>
   2695c:	e5953000 	ldr	r3, [r5]
   26960:	e1a00005 	mov	r0, r5
   26964:	e5933004 	ldr	r3, [r3, #4]
   26968:	e12fff33 	blx	r3
   2696c:	e1a01006 	mov	r1, r6
   26970:	e28d0010 	add	r0, sp, #16
   26974:	eb000494 	bl	27bcc <CString::Append(char const*)>
   26978:	e59f1064 	ldr	r1, [pc, #100]	; 269e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
   2697c:	e28d0010 	add	r0, sp, #16
   26980:	eb000491 	bl	27bcc <CString::Append(char const*)>
   26984:	e1a0000d 	mov	r0, sp
   26988:	eb000459 	bl	27af4 <CString::operator char const*() const>
   2698c:	e1a01000 	mov	r1, r0
   26990:	e28d0010 	add	r0, sp, #16
   26994:	eb00048c 	bl	27bcc <CString::Append(char const*)>
   26998:	e59f1050 	ldr	r1, [pc, #80]	; 269f0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   2699c:	e28d0010 	add	r0, sp, #16
   269a0:	eb000489 	bl	27bcc <CString::Append(char const*)>
   269a4:	e59f103c 	ldr	r1, [pc, #60]	; 269e8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
   269a8:	e28d0010 	add	r0, sp, #16
   269ac:	eb000486 	bl	27bcc <CString::Append(char const*)>
   269b0:	e28d0010 	add	r0, sp, #16
   269b4:	eb00044e 	bl	27af4 <CString::operator char const*() const>
   269b8:	e1a01000 	mov	r1, r0
   269bc:	e1a00004 	mov	r0, r4
   269c0:	eb000047 	bl	26ae4 <CLogger::Write(char const*)>
   269c4:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   269c8:	e3530000 	cmp	r3, #0
   269cc:	0a000000 	beq	269d4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c8>
   269d0:	e12fff33 	blx	r3
   269d4:	e3a000ff 	mov	r0, #255	; 0xff
   269d8:	eb000986 	bl	28ff8 <set_qemu_exit_status>
   269dc:	eb000989 	bl	29008 <halt>
   269e0:	00043840 	.word	0x00043840
   269e4:	0004383c 	.word	0x0004383c
   269e8:	00043830 	.word	0x00043830
   269ec:	00043828 	.word	0x00043828
   269f0:	00043834 	.word	0x00043834

000269f4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   269f4:	e92d4070 	push	{r4, r5, r6, lr}
   269f8:	e1a04000 	mov	r4, r0
   269fc:	e5900000 	ldr	r0, [r0]
   26a00:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
   26a04:	e1520000 	cmp	r2, r0
   26a08:	8a000012 	bhi	26a58 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x64>
   26a0c:	e1a05003 	mov	r5, r3
   26a10:	e3a03000 	mov	r3, #0
   26a14:	e1520003 	cmp	r2, r3
   26a18:	e5cd3000 	strb	r3, [sp]
   26a1c:	0a00000f 	beq	26a60 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
   26a20:	e1a0000d 	mov	r0, sp
   26a24:	eb000e25 	bl	2a2c0 <strcat>
   26a28:	e59f1094 	ldr	r1, [pc, #148]	; 26ac4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   26a2c:	e1a0000d 	mov	r0, sp
   26a30:	eb000e22 	bl	2a2c0 <strcat>
   26a34:	e1a01005 	mov	r1, r5
   26a38:	e1a0000d 	mov	r0, sp
   26a3c:	eb000e1f 	bl	2a2c0 <strcat>
   26a40:	e59f1080 	ldr	r1, [pc, #128]	; 26ac8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   26a44:	e1a0000d 	mov	r0, sp
   26a48:	eb000e1c 	bl	2a2c0 <strcat>
   26a4c:	e1a0100d 	mov	r1, sp
   26a50:	e1a00004 	mov	r0, r4
   26a54:	eb000022 	bl	26ae4 <CLogger::Write(char const*)>
   26a58:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   26a5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   26a60:	e1a06001 	mov	r6, r1
   26a64:	e1a0000d 	mov	r0, sp
   26a68:	e59f105c 	ldr	r1, [pc, #92]	; 26acc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
   26a6c:	eb000dfa 	bl	2a25c <strcpy>
   26a70:	e1a01006 	mov	r1, r6
   26a74:	e1a0000d 	mov	r0, sp
   26a78:	eb000e10 	bl	2a2c0 <strcat>
   26a7c:	e59f1040 	ldr	r1, [pc, #64]	; 26ac4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   26a80:	e1a0000d 	mov	r0, sp
   26a84:	eb000e0d 	bl	2a2c0 <strcat>
   26a88:	e1a01005 	mov	r1, r5
   26a8c:	e1a0000d 	mov	r0, sp
   26a90:	eb000e0a 	bl	2a2c0 <strcat>
   26a94:	e59f1034 	ldr	r1, [pc, #52]	; 26ad0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
   26a98:	e1a0000d 	mov	r0, sp
   26a9c:	eb000e07 	bl	2a2c0 <strcat>
   26aa0:	e59f1020 	ldr	r1, [pc, #32]	; 26ac8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   26aa4:	e1a0000d 	mov	r0, sp
   26aa8:	eb000e04 	bl	2a2c0 <strcat>
   26aac:	e1a0100d 	mov	r1, sp
   26ab0:	e1a00004 	mov	r0, r4
   26ab4:	eb00000a 	bl	26ae4 <CLogger::Write(char const*)>
   26ab8:	e3a000ff 	mov	r0, #255	; 0xff
   26abc:	eb00094d 	bl	28ff8 <set_qemu_exit_status>
   26ac0:	eb000950 	bl	29008 <halt>
   26ac4:	0004383c 	.word	0x0004383c
   26ac8:	00043830 	.word	0x00043830
   26acc:	00043828 	.word	0x00043828
   26ad0:	00043834 	.word	0x00043834

00026ad4 <CLogger::Get()>:
   26ad4:	e59f3004 	ldr	r3, [pc, #4]	; 26ae0 <CLogger::Get()+0xc>
   26ad8:	e5930000 	ldr	r0, [r3]
   26adc:	e12fff1e 	bx	lr
   26ae0:	0004c544 	.word	0x0004c544

00026ae4 <CLogger::Write(char const*)>:
   26ae4:	e92d4070 	push	{r4, r5, r6, lr}
   26ae8:	e1a04000 	mov	r4, r0
   26aec:	e1a00001 	mov	r0, r1
   26af0:	e1a06001 	mov	r6, r1
   26af4:	eb000d34 	bl	29fcc <strlen>
   26af8:	e1a05000 	mov	r5, r0
   26afc:	e5940008 	ldr	r0, [r4, #8]
   26b00:	e1a02005 	mov	r2, r5
   26b04:	e5903000 	ldr	r3, [r0]
   26b08:	e1a01006 	mov	r1, r6
   26b0c:	e593300c 	ldr	r3, [r3, #12]
   26b10:	e12fff33 	blx	r3
   26b14:	e5940018 	ldr	r0, [r4, #24]
   26b18:	e3500000 	cmp	r0, #0
   26b1c:	1a00001e 	bne	26b9c <CLogger::Write(char const*)+0xb8>
   26b20:	e3550000 	cmp	r5, #0
   26b24:	e2450001 	sub	r0, r5, #1
   26b28:	08bd8070 	popeq	{r4, r5, r6, pc}
   26b2c:	e1a0e006 	mov	lr, r6
   26b30:	e59f1078 	ldr	r1, [pc, #120]	; 26bb0 <CLogger::Write(char const*)+0xcc>
   26b34:	e0de50d1 	ldrsb	r5, [lr], #1
   26b38:	e26ec001 	rsb	ip, lr, #1
   26b3c:	e355000d 	cmp	r5, #13
   26b40:	e086c00c 	add	ip, r6, ip
   26b44:	0a000009 	beq	26b70 <CLogger::Write(char const*)+0x8c>
   26b48:	e5942010 	ldr	r2, [r4, #16]
   26b4c:	e594300c 	ldr	r3, [r4, #12]
   26b50:	e7c35002 	strb	r5, [r3, r2]
   26b54:	e5943010 	ldr	r3, [r4, #16]
   26b58:	e5942014 	ldr	r2, [r4, #20]
   26b5c:	e2833001 	add	r3, r3, #1
   26b60:	e0033001 	and	r3, r3, r1
   26b64:	e1530002 	cmp	r3, r2
   26b68:	e5843010 	str	r3, [r4, #16]
   26b6c:	0a000006 	beq	26b8c <CLogger::Write(char const*)+0xa8>
   26b70:	e17c0000 	cmn	ip, r0
   26b74:	1affffee 	bne	26b34 <CLogger::Write(char const*)+0x50>
   26b78:	e5943018 	ldr	r3, [r4, #24]
   26b7c:	e3530000 	cmp	r3, #0
   26b80:	08bd8070 	popeq	{r4, r5, r6, pc}
   26b84:	e8bd4070 	pop	{r4, r5, r6, lr}
   26b88:	ea001447 	b	2bcac <LeaveCritical>
   26b8c:	e2433001 	sub	r3, r3, #1
   26b90:	e0033001 	and	r3, r3, r1
   26b94:	e5843010 	str	r3, [r4, #16]
   26b98:	eafffff6 	b	26b78 <CLogger::Write(char const*)+0x94>
   26b9c:	eb001418 	bl	2bc04 <EnterCritical>
   26ba0:	e3550000 	cmp	r5, #0
   26ba4:	e2450001 	sub	r0, r5, #1
   26ba8:	1affffdf 	bne	26b2c <CLogger::Write(char const*)+0x48>
   26bac:	eafffff1 	b	26b78 <CLogger::Write(char const*)+0x94>
   26bb0:	00003fff 	.word	0x00003fff

00026bb4 <CLogger::Read(void*, unsigned int)>:
   26bb4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26bb8:	e1a04000 	mov	r4, r0
   26bbc:	e5900018 	ldr	r0, [r0, #24]
   26bc0:	e1a05001 	mov	r5, r1
   26bc4:	e3500000 	cmp	r0, #0
   26bc8:	e1a06002 	mov	r6, r2
   26bcc:	1a00001f 	bne	26c50 <CLogger::Read(void*, unsigned int)+0x9c>
   26bd0:	e1c421d0 	ldrd	r2, [r4, #16]
   26bd4:	e1520003 	cmp	r2, r3
   26bd8:	0a000024 	beq	26c70 <CLogger::Read(void*, unsigned int)+0xbc>
   26bdc:	e1a07006 	mov	r7, r6
   26be0:	e3a0c000 	mov	ip, #0
   26be4:	e59f208c 	ldr	r2, [pc, #140]	; 26c78 <CLogger::Read(void*, unsigned int)+0xc4>
   26be8:	ea00000a 	b	26c18 <CLogger::Read(void*, unsigned int)+0x64>
   26bec:	e594100c 	ldr	r1, [r4, #12]
   26bf0:	e28cc001 	add	ip, ip, #1
   26bf4:	e19130d3 	ldrsb	r3, [r1, r3]
   26bf8:	e4c53001 	strb	r3, [r5], #1
   26bfc:	e5943014 	ldr	r3, [r4, #20]
   26c00:	e5941010 	ldr	r1, [r4, #16]
   26c04:	e2833001 	add	r3, r3, #1
   26c08:	e0033002 	and	r3, r3, r2
   26c0c:	e1530001 	cmp	r3, r1
   26c10:	e5843014 	str	r3, [r4, #20]
   26c14:	0a000006 	beq	26c34 <CLogger::Read(void*, unsigned int)+0x80>
   26c18:	e15c0006 	cmp	ip, r6
   26c1c:	1afffff2 	bne	26bec <CLogger::Read(void*, unsigned int)+0x38>
   26c20:	e5943018 	ldr	r3, [r4, #24]
   26c24:	e3530000 	cmp	r3, #0
   26c28:	1a000005 	bne	26c44 <CLogger::Read(void*, unsigned int)+0x90>
   26c2c:	e1a00007 	mov	r0, r7
   26c30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26c34:	e5943018 	ldr	r3, [r4, #24]
   26c38:	e1a0700c 	mov	r7, ip
   26c3c:	e3530000 	cmp	r3, #0
   26c40:	0afffff9 	beq	26c2c <CLogger::Read(void*, unsigned int)+0x78>
   26c44:	eb001418 	bl	2bcac <LeaveCritical>
   26c48:	e1a00007 	mov	r0, r7
   26c4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26c50:	eb0013eb 	bl	2bc04 <EnterCritical>
   26c54:	e1c421d0 	ldrd	r2, [r4, #16]
   26c58:	e1520003 	cmp	r2, r3
   26c5c:	1affffde 	bne	26bdc <CLogger::Read(void*, unsigned int)+0x28>
   26c60:	e5943018 	ldr	r3, [r4, #24]
   26c64:	e3530000 	cmp	r3, #0
   26c68:	0a000000 	beq	26c70 <CLogger::Read(void*, unsigned int)+0xbc>
   26c6c:	eb00140e 	bl	2bcac <LeaveCritical>
   26c70:	e3e07000 	mvn	r7, #0
   26c74:	eaffffec 	b	26c2c <CLogger::Read(void*, unsigned int)+0x78>
   26c78:	00003fff 	.word	0x00003fff

00026c7c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   26c7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26c80:	e1a04000 	mov	r4, r0
   26c84:	e24dd010 	sub	sp, sp, #16
   26c88:	e3a00f42 	mov	r0, #264	; 0x108
   26c8c:	e1a06003 	mov	r6, r3
   26c90:	e1a07002 	mov	r7, r2
   26c94:	e58d1004 	str	r1, [sp, #4]
   26c98:	eb0010ac 	bl	2af50 <operator new(unsigned int)>
   26c9c:	e3a08000 	mov	r8, #0
   26ca0:	e1a05000 	mov	r5, r0
   26ca4:	e3a02032 	mov	r2, #50	; 0x32
   26ca8:	e59d1004 	ldr	r1, [sp, #4]
   26cac:	e4c07001 	strb	r7, [r0], #1
   26cb0:	eb000d74 	bl	2a288 <strncpy>
   26cb4:	e1a01006 	mov	r1, r6
   26cb8:	e3a020c8 	mov	r2, #200	; 0xc8
   26cbc:	e2850033 	add	r0, r5, #51	; 0x33
   26cc0:	e5c58032 	strb	r8, [r5, #50]	; 0x32
   26cc4:	eb000d6f 	bl	2a288 <strncpy>
   26cc8:	e5940004 	ldr	r0, [r4, #4]
   26ccc:	e5c580fa 	strb	r8, [r5, #250]	; 0xfa
   26cd0:	e1500008 	cmp	r0, r8
   26cd4:	0a000004 	beq	26cec <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   26cd8:	e28d200c 	add	r2, sp, #12
   26cdc:	e28d1008 	add	r1, sp, #8
   26ce0:	eb0009b3 	bl	293b4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   26ce4:	e1500008 	cmp	r0, r8
   26ce8:	1a000038 	bne	26dd0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x154>
   26cec:	e3a03000 	mov	r3, #0
   26cf0:	e58530fc 	str	r3, [r5, #252]	; 0xfc
   26cf4:	e5853100 	str	r3, [r5, #256]	; 0x100
   26cf8:	e5853104 	str	r3, [r5, #260]	; 0x104
   26cfc:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
   26d00:	e3500000 	cmp	r0, #0
   26d04:	1a00002e 	bne	26dc4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x148>
   26d08:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   26d0c:	e0841103 	add	r1, r4, r3, lsl #2
   26d10:	e3530031 	cmp	r3, #49	; 0x31
   26d14:	e581501c 	str	r5, [r1, #28]
   26d18:	e2831001 	add	r1, r3, #1
   26d1c:	0a00001c 	beq	26d94 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x118>
   26d20:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
   26d24:	e58410e4 	str	r1, [r4, #228]	; 0xe4
   26d28:	e1510002 	cmp	r1, r2
   26d2c:	0a000007 	beq	26d50 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd4>
   26d30:	e3500000 	cmp	r0, #0
   26d34:	1a000014 	bne	26d8c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x110>
   26d38:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   26d3c:	e3530000 	cmp	r3, #0
   26d40:	0a000000 	beq	26d48 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
   26d44:	e12fff33 	blx	r3
   26d48:	e28dd010 	add	sp, sp, #16
   26d4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26d50:	e0843103 	add	r3, r4, r3, lsl #2
   26d54:	e3510031 	cmp	r1, #49	; 0x31
   26d58:	e5935020 	ldr	r5, [r3, #32]
   26d5c:	03a03000 	moveq	r3, #0
   26d60:	e2811001 	add	r1, r1, #1
   26d64:	058430e8 	streq	r3, [r4, #232]	; 0xe8
   26d68:	1a000010 	bne	26db0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x134>
   26d6c:	e3500000 	cmp	r0, #0
   26d70:	1a000011 	bne	26dbc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x140>
   26d74:	e3550000 	cmp	r5, #0
   26d78:	0affffee 	beq	26d38 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   26d7c:	e1a00005 	mov	r0, r5
   26d80:	e3a01f42 	mov	r1, #264	; 0x108
   26d84:	eb00107f 	bl	2af88 <operator delete(void*, unsigned int)>
   26d88:	eaffffea 	b	26d38 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   26d8c:	eb0013c6 	bl	2bcac <LeaveCritical>
   26d90:	eaffffe8 	b	26d38 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   26d94:	e3a01000 	mov	r1, #0
   26d98:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   26d9c:	e58410e4 	str	r1, [r4, #228]	; 0xe4
   26da0:	e1530001 	cmp	r3, r1
   26da4:	1affffe1 	bne	26d30 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb4>
   26da8:	e3a01001 	mov	r1, #1
   26dac:	e594501c 	ldr	r5, [r4, #28]
   26db0:	e3500000 	cmp	r0, #0
   26db4:	e58410e8 	str	r1, [r4, #232]	; 0xe8
   26db8:	0affffed 	beq	26d74 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   26dbc:	eb0013ba 	bl	2bcac <LeaveCritical>
   26dc0:	eaffffeb 	b	26d74 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   26dc4:	eb00138e 	bl	2bc04 <EnterCritical>
   26dc8:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
   26dcc:	eaffffcd 	b	26d08 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   26dd0:	e59d300c 	ldr	r3, [sp, #12]
   26dd4:	e59f1020 	ldr	r1, [pc, #32]	; 26dfc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x180>
   26dd8:	e59d2008 	ldr	r2, [sp, #8]
   26ddc:	e0831391 	umull	r1, r3, r1, r3
   26de0:	e1a036a3 	lsr	r3, r3, #13
   26de4:	e5940004 	ldr	r0, [r4, #4]
   26de8:	e5853100 	str	r3, [r5, #256]	; 0x100
   26dec:	e58520fc 	str	r2, [r5, #252]	; 0xfc
   26df0:	eb000941 	bl	292fc <CTimer::GetTimeZone() const>
   26df4:	e5850104 	str	r0, [r5, #260]	; 0x104
   26df8:	eaffffbf 	b	26cfc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>
   26dfc:	d1b71759 	.word	0xd1b71759

00026e00 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   26e00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26e04:	e1a04000 	mov	r4, r0
   26e08:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
   26e0c:	e1a08001 	mov	r8, r1
   26e10:	e3500000 	cmp	r0, #0
   26e14:	e1a06002 	mov	r6, r2
   26e18:	e1a07003 	mov	r7, r3
   26e1c:	1a000022 	bne	26eac <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
   26e20:	e594c0e8 	ldr	ip, [r4, #232]	; 0xe8
   26e24:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   26e28:	e15c0003 	cmp	ip, r3
   26e2c:	0a000028 	beq	26ed4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   26e30:	e35c0031 	cmp	ip, #49	; 0x31
   26e34:	e084310c 	add	r3, r4, ip, lsl #2
   26e38:	e593501c 	ldr	r5, [r3, #28]
   26e3c:	03a03000 	moveq	r3, #0
   26e40:	e28cc001 	add	ip, ip, #1
   26e44:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
   26e48:	058430e8 	streq	r3, [r4, #232]	; 0xe8
   26e4c:	e3500000 	cmp	r0, #0
   26e50:	1a000021 	bne	26edc <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
   26e54:	e1a01005 	mov	r1, r5
   26e58:	e4d13001 	ldrb	r3, [r1], #1
   26e5c:	e1a00006 	mov	r0, r6
   26e60:	e5c83000 	strb	r3, [r8]
   26e64:	eb000cfc 	bl	2a25c <strcpy>
   26e68:	e2851033 	add	r1, r5, #51	; 0x33
   26e6c:	e1a00007 	mov	r0, r7
   26e70:	eb000cf9 	bl	2a25c <strcpy>
   26e74:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
   26e78:	e59d1018 	ldr	r1, [sp, #24]
   26e7c:	e5953100 	ldr	r3, [r5, #256]	; 0x100
   26e80:	e5812000 	str	r2, [r1]
   26e84:	e59d201c 	ldr	r2, [sp, #28]
   26e88:	e1a00005 	mov	r0, r5
   26e8c:	e5823000 	str	r3, [r2]
   26e90:	e5953104 	ldr	r3, [r5, #260]	; 0x104
   26e94:	e59d2020 	ldr	r2, [sp, #32]
   26e98:	e3a01f42 	mov	r1, #264	; 0x108
   26e9c:	e5823000 	str	r3, [r2]
   26ea0:	eb001038 	bl	2af88 <operator delete(void*, unsigned int)>
   26ea4:	e3a00001 	mov	r0, #1
   26ea8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26eac:	eb001354 	bl	2bc04 <EnterCritical>
   26eb0:	e594c0e8 	ldr	ip, [r4, #232]	; 0xe8
   26eb4:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   26eb8:	e153000c 	cmp	r3, ip
   26ebc:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
   26ec0:	1affffda 	bne	26e30 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
   26ec4:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   26ec8:	e3530000 	cmp	r3, #0
   26ecc:	0a000000 	beq	26ed4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   26ed0:	eb001375 	bl	2bcac <LeaveCritical>
   26ed4:	e3a00000 	mov	r0, #0
   26ed8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26edc:	eb001372 	bl	2bcac <LeaveCritical>
   26ee0:	eaffffdb 	b	26e54 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

00026ee4 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   26ee4:	e58010f0 	str	r1, [r0, #240]	; 0xf0
   26ee8:	e12fff1e 	bx	lr

00026eec <CLogger::RegisterPanicHandler(void (*)())>:
   26eec:	e58010f4 	str	r1, [r0, #244]	; 0xf4
   26ef0:	e12fff1e 	bx	lr

00026ef4 <CMachineInfo::CMachineInfo()>:
   26ef4:	e92d4810 	push	{r4, fp, lr}
   26ef8:	e28db008 	add	fp, sp, #8
   26efc:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   26f00:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
   26f04:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f08:	e3a02000 	mov	r2, #0
   26f0c:	e5832000 	str	r2, [r3]
   26f10:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f14:	e3a02010 	mov	r2, #16
   26f18:	e5c32004 	strb	r2, [r3, #4]
   26f1c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f20:	e3a02000 	mov	r2, #0
   26f24:	e5832008 	str	r2, [r3, #8]
   26f28:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f2c:	e3a02000 	mov	r2, #0
   26f30:	e583200c 	str	r2, [r3, #12]
   26f34:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f38:	e3a02004 	mov	r2, #4
   26f3c:	e5c32010 	strb	r2, [r3, #16]
   26f40:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f44:	e3a02000 	mov	r2, #0
   26f48:	e5832014 	str	r2, [r3, #20]
   26f4c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f50:	e59f23b4 	ldr	r2, [pc, #948]	; 2730c <CMachineInfo::CMachineInfo()+0x418>
   26f54:	e1c321b8 	strh	r2, [r3, #24]
   26f58:	e59f33b0 	ldr	r3, [pc, #944]	; 27310 <CMachineInfo::CMachineInfo()+0x41c>
   26f5c:	e5933000 	ldr	r3, [r3]
   26f60:	e3530000 	cmp	r3, #0
   26f64:	0a00001e 	beq	26fe4 <CMachineInfo::CMachineInfo()+0xf0>
   26f68:	e59f33a0 	ldr	r3, [pc, #928]	; 27310 <CMachineInfo::CMachineInfo()+0x41c>
   26f6c:	e5933000 	ldr	r3, [r3]
   26f70:	e5932000 	ldr	r2, [r3]
   26f74:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f78:	e5832000 	str	r2, [r3]
   26f7c:	e59f338c 	ldr	r3, [pc, #908]	; 27310 <CMachineInfo::CMachineInfo()+0x41c>
   26f80:	e5933000 	ldr	r3, [r3]
   26f84:	e5d32004 	ldrb	r2, [r3, #4]
   26f88:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26f8c:	e5c32004 	strb	r2, [r3, #4]
   26f90:	e59f3378 	ldr	r3, [pc, #888]	; 27310 <CMachineInfo::CMachineInfo()+0x41c>
   26f94:	e5933000 	ldr	r3, [r3]
   26f98:	e5932008 	ldr	r2, [r3, #8]
   26f9c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fa0:	e5832008 	str	r2, [r3, #8]
   26fa4:	e59f3364 	ldr	r3, [pc, #868]	; 27310 <CMachineInfo::CMachineInfo()+0x41c>
   26fa8:	e5933000 	ldr	r3, [r3]
   26fac:	e593200c 	ldr	r2, [r3, #12]
   26fb0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fb4:	e583200c 	str	r2, [r3, #12]
   26fb8:	e59f3350 	ldr	r3, [pc, #848]	; 27310 <CMachineInfo::CMachineInfo()+0x41c>
   26fbc:	e5933000 	ldr	r3, [r3]
   26fc0:	e5d32010 	ldrb	r2, [r3, #16]
   26fc4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fc8:	e5c32010 	strb	r2, [r3, #16]
   26fcc:	e59f333c 	ldr	r3, [pc, #828]	; 27310 <CMachineInfo::CMachineInfo()+0x41c>
   26fd0:	e5933000 	ldr	r3, [r3]
   26fd4:	e5932014 	ldr	r2, [r3, #20]
   26fd8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fdc:	e5832014 	str	r2, [r3, #20]
   26fe0:	ea0000c5 	b	272fc <CMachineInfo::CMachineInfo()+0x408>
   26fe4:	e59f2324 	ldr	r2, [pc, #804]	; 27310 <CMachineInfo::CMachineInfo()+0x41c>
   26fe8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fec:	e5823000 	str	r3, [r2]
   26ff0:	e24b3020 	sub	r3, fp, #32
   26ff4:	e3a01001 	mov	r1, #1
   26ff8:	e1a00003 	mov	r0, r3
   26ffc:	ebfff5ed 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   27000:	e24b2030 	sub	r2, fp, #48	; 0x30
   27004:	e24b0020 	sub	r0, fp, #32
   27008:	e3a03000 	mov	r3, #0
   2700c:	e58d3000 	str	r3, [sp]
   27010:	e3a03010 	mov	r3, #16
   27014:	e59f12f8 	ldr	r1, [pc, #760]	; 27314 <CMachineInfo::CMachineInfo()+0x420>
   27018:	ebfff5f2 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2701c:	e1a03000 	mov	r3, r0
   27020:	e3530000 	cmp	r3, #0
   27024:	0a000003 	beq	27038 <CMachineInfo::CMachineInfo()+0x144>
   27028:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2702c:	e6ff2073 	uxth	r2, r3
   27030:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27034:	e1c321b8 	strh	r2, [r3, #24]
   27038:	e24b2040 	sub	r2, fp, #64	; 0x40
   2703c:	e24b0020 	sub	r0, fp, #32
   27040:	e3a03000 	mov	r3, #0
   27044:	e58d3000 	str	r3, [sp]
   27048:	e3a03010 	mov	r3, #16
   2704c:	e59f12c4 	ldr	r1, [pc, #708]	; 27318 <CMachineInfo::CMachineInfo()+0x424>
   27050:	ebfff5e4 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   27054:	e1a03000 	mov	r3, r0
   27058:	e2233001 	eor	r3, r3, #1
   2705c:	e6ef3073 	uxtb	r3, r3
   27060:	e3530000 	cmp	r3, #0
   27064:	0a000001 	beq	27070 <CMachineInfo::CMachineInfo()+0x17c>
   27068:	e3a04000 	mov	r4, #0
   2706c:	ea00009e 	b	272ec <CMachineInfo::CMachineInfo()+0x3f8>
   27070:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   27074:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27078:	e5832000 	str	r2, [r3]
   2707c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27080:	e5933000 	ldr	r3, [r3]
   27084:	e2033502 	and	r3, r3, #8388608	; 0x800000
   27088:	e3530000 	cmp	r3, #0
   2708c:	0a000064 	beq	27224 <CMachineInfo::CMachineInfo()+0x330>
   27090:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27094:	e5933000 	ldr	r3, [r3]
   27098:	e1a03223 	lsr	r3, r3, #4
   2709c:	e6ef3073 	uxtb	r3, r3
   270a0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   270a4:	e3a03000 	mov	r3, #0
   270a8:	e50b3010 	str	r3, [fp, #-16]
   270ac:	e51b3010 	ldr	r3, [fp, #-16]
   270b0:	e353000d 	cmp	r3, #13
   270b4:	8a00000f 	bhi	270f8 <CMachineInfo::CMachineInfo()+0x204>
   270b8:	e59f125c 	ldr	r1, [pc, #604]	; 2731c <CMachineInfo::CMachineInfo()+0x428>
   270bc:	e51b2010 	ldr	r2, [fp, #-16]
   270c0:	e1a03002 	mov	r3, r2
   270c4:	e1a03083 	lsl	r3, r3, #1
   270c8:	e0833002 	add	r3, r3, r2
   270cc:	e1a03103 	lsl	r3, r3, #2
   270d0:	e0813003 	add	r3, r1, r3
   270d4:	e5933000 	ldr	r3, [r3]
   270d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   270dc:	e1520003 	cmp	r2, r3
   270e0:	0a000003 	beq	270f4 <CMachineInfo::CMachineInfo()+0x200>
   270e4:	e51b3010 	ldr	r3, [fp, #-16]
   270e8:	e2833001 	add	r3, r3, #1
   270ec:	e50b3010 	str	r3, [fp, #-16]
   270f0:	eaffffed 	b	270ac <CMachineInfo::CMachineInfo()+0x1b8>
   270f4:	e320f000 	nop	{0}
   270f8:	e51b3010 	ldr	r3, [fp, #-16]
   270fc:	e353000d 	cmp	r3, #13
   27100:	9a000001 	bls	2710c <CMachineInfo::CMachineInfo()+0x218>
   27104:	e3a04000 	mov	r4, #0
   27108:	ea000077 	b	272ec <CMachineInfo::CMachineInfo()+0x3f8>
   2710c:	e59f1208 	ldr	r1, [pc, #520]	; 2731c <CMachineInfo::CMachineInfo()+0x428>
   27110:	e51b2010 	ldr	r2, [fp, #-16]
   27114:	e1a03002 	mov	r3, r2
   27118:	e1a03083 	lsl	r3, r3, #1
   2711c:	e0833002 	add	r3, r3, r2
   27120:	e1a03103 	lsl	r3, r3, #2
   27124:	e0813003 	add	r3, r1, r3
   27128:	e2833004 	add	r3, r3, #4
   2712c:	e5d32000 	ldrb	r2, [r3]
   27130:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27134:	e5c32004 	strb	r2, [r3, #4]
   27138:	e59f11dc 	ldr	r1, [pc, #476]	; 2731c <CMachineInfo::CMachineInfo()+0x428>
   2713c:	e51b2010 	ldr	r2, [fp, #-16]
   27140:	e1a03002 	mov	r3, r2
   27144:	e1a03083 	lsl	r3, r3, #1
   27148:	e0833002 	add	r3, r3, r2
   2714c:	e1a03103 	lsl	r3, r3, #2
   27150:	e0813003 	add	r3, r1, r3
   27154:	e2833008 	add	r3, r3, #8
   27158:	e5932000 	ldr	r2, [r3]
   2715c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27160:	e5832008 	str	r2, [r3, #8]
   27164:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27168:	e5933000 	ldr	r3, [r3]
   2716c:	e203300f 	and	r3, r3, #15
   27170:	e2832001 	add	r2, r3, #1
   27174:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27178:	e583200c 	str	r2, [r3, #12]
   2717c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27180:	e5933000 	ldr	r3, [r3]
   27184:	e1a03623 	lsr	r3, r3, #12
   27188:	e6ef3073 	uxtb	r3, r3
   2718c:	e203300f 	and	r3, r3, #15
   27190:	e6ef2073 	uxtb	r2, r3
   27194:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27198:	e5c32010 	strb	r2, [r3, #16]
   2719c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   271a0:	e5933000 	ldr	r3, [r3]
   271a4:	e1a03a23 	lsr	r3, r3, #20
   271a8:	e2033007 	and	r3, r3, #7
   271ac:	e3a02c01 	mov	r2, #256	; 0x100
   271b0:	e1a03312 	lsl	r3, r2, r3
   271b4:	e1a02003 	mov	r2, r3
   271b8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   271bc:	e5832014 	str	r2, [r3, #20]
   271c0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   271c4:	e5d33010 	ldrb	r3, [r3, #16]
   271c8:	e3530003 	cmp	r3, #3
   271cc:	9a000002 	bls	271dc <CMachineInfo::CMachineInfo()+0x2e8>
   271d0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   271d4:	e3a02004 	mov	r2, #4
   271d8:	e5c32010 	strb	r2, [r3, #16]
   271dc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   271e0:	e5d33004 	ldrb	r3, [r3, #4]
   271e4:	e3530003 	cmp	r3, #3
   271e8:	1a00003e 	bne	272e8 <CMachineInfo::CMachineInfo()+0x3f4>
   271ec:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   271f0:	e5933014 	ldr	r3, [r3, #20]
   271f4:	e3530c01 	cmp	r3, #256	; 0x100
   271f8:	1a00003a 	bne	272e8 <CMachineInfo::CMachineInfo()+0x3f4>
   271fc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27200:	e593300c 	ldr	r3, [r3, #12]
   27204:	e3530001 	cmp	r3, #1
   27208:	1a000001 	bne	27214 <CMachineInfo::CMachineInfo()+0x320>
   2720c:	e3a02001 	mov	r2, #1
   27210:	ea000000 	b	27218 <CMachineInfo::CMachineInfo()+0x324>
   27214:	e3a02002 	mov	r2, #2
   27218:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2721c:	e5c32004 	strb	r2, [r3, #4]
   27220:	ea000030 	b	272e8 <CMachineInfo::CMachineInfo()+0x3f4>
   27224:	e3a03000 	mov	r3, #0
   27228:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2722c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27230:	e3530010 	cmp	r3, #16
   27234:	8a00000b 	bhi	27268 <CMachineInfo::CMachineInfo()+0x374>
   27238:	e59f20e0 	ldr	r2, [pc, #224]	; 27320 <CMachineInfo::CMachineInfo()+0x42c>
   2723c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27240:	e7922203 	ldr	r2, [r2, r3, lsl #4]
   27244:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27248:	e5933000 	ldr	r3, [r3]
   2724c:	e1520003 	cmp	r2, r3
   27250:	0a000003 	beq	27264 <CMachineInfo::CMachineInfo()+0x370>
   27254:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27258:	e2833001 	add	r3, r3, #1
   2725c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   27260:	eafffff1 	b	2722c <CMachineInfo::CMachineInfo()+0x338>
   27264:	e320f000 	nop	{0}
   27268:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2726c:	e3530010 	cmp	r3, #16
   27270:	9a000001 	bls	2727c <CMachineInfo::CMachineInfo()+0x388>
   27274:	e3a04000 	mov	r4, #0
   27278:	ea00001b 	b	272ec <CMachineInfo::CMachineInfo()+0x3f8>
   2727c:	e59f209c 	ldr	r2, [pc, #156]	; 27320 <CMachineInfo::CMachineInfo()+0x42c>
   27280:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27284:	e1a03203 	lsl	r3, r3, #4
   27288:	e0823003 	add	r3, r2, r3
   2728c:	e5d32004 	ldrb	r2, [r3, #4]
   27290:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27294:	e5c32004 	strb	r2, [r3, #4]
   27298:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2729c:	e3a02001 	mov	r2, #1
   272a0:	e5832008 	str	r2, [r3, #8]
   272a4:	e59f2074 	ldr	r2, [pc, #116]	; 27320 <CMachineInfo::CMachineInfo()+0x42c>
   272a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   272ac:	e1a03203 	lsl	r3, r3, #4
   272b0:	e0823003 	add	r3, r2, r3
   272b4:	e5932008 	ldr	r2, [r3, #8]
   272b8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   272bc:	e583200c 	str	r2, [r3, #12]
   272c0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   272c4:	e3a02000 	mov	r2, #0
   272c8:	e5c32010 	strb	r2, [r3, #16]
   272cc:	e59f204c 	ldr	r2, [pc, #76]	; 27320 <CMachineInfo::CMachineInfo()+0x42c>
   272d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   272d4:	e1a03203 	lsl	r3, r3, #4
   272d8:	e0823003 	add	r3, r2, r3
   272dc:	e593200c 	ldr	r2, [r3, #12]
   272e0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   272e4:	e5832014 	str	r2, [r3, #20]
   272e8:	e3a04001 	mov	r4, #1
   272ec:	e24b3020 	sub	r3, fp, #32
   272f0:	e1a00003 	mov	r0, r3
   272f4:	ebfff536 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   272f8:	e3540001 	cmp	r4, #1
   272fc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27300:	e1a00003 	mov	r0, r3
   27304:	e24bd008 	sub	sp, fp, #8
   27308:	e8bd8810 	pop	{r4, fp, pc}
   2730c:	00001f35 	.word	0x00001f35
   27310:	0004c548 	.word	0x0004c548
   27314:	00060001 	.word	0x00060001
   27318:	00010002 	.word	0x00010002
   2731c:	0004640c 	.word	0x0004640c
   27320:	000462fc 	.word	0x000462fc

00027324 <CMachineInfo::~CMachineInfo()>:
   27324:	e59f3010 	ldr	r3, [pc, #16]	; 2733c <CMachineInfo::~CMachineInfo()+0x18>
   27328:	e5932000 	ldr	r2, [r3]
   2732c:	e1520000 	cmp	r2, r0
   27330:	03a02000 	moveq	r2, #0
   27334:	05832000 	streq	r2, [r3]
   27338:	e12fff1e 	bx	lr
   2733c:	0004c548 	.word	0x0004c548

00027340 <CMachineInfo::GetMachineModel() const>:
   27340:	e5d00004 	ldrb	r0, [r0, #4]
   27344:	e12fff1e 	bx	lr

00027348 <CMachineInfo::GetMachineName() const>:
   27348:	e5d02004 	ldrb	r2, [r0, #4]
   2734c:	e59f3008 	ldr	r3, [pc, #8]	; 2735c <CMachineInfo::GetMachineName() const+0x14>
   27350:	e0833102 	add	r3, r3, r2, lsl #2
   27354:	e59301b8 	ldr	r0, [r3, #440]	; 0x1b8
   27358:	e12fff1e 	bx	lr
   2735c:	000462fc 	.word	0x000462fc

00027360 <CMachineInfo::GetModelMajor() const>:
   27360:	e5900008 	ldr	r0, [r0, #8]
   27364:	e12fff1e 	bx	lr

00027368 <CMachineInfo::GetModelRevision() const>:
   27368:	e590000c 	ldr	r0, [r0, #12]
   2736c:	e12fff1e 	bx	lr

00027370 <CMachineInfo::GetSoCType() const>:
   27370:	e5d00010 	ldrb	r0, [r0, #16]
   27374:	e12fff1e 	bx	lr

00027378 <CMachineInfo::GetRAMSize() const>:
   27378:	e5900014 	ldr	r0, [r0, #20]
   2737c:	e12fff1e 	bx	lr

00027380 <CMachineInfo::GetSoCName() const>:
   27380:	e5d02010 	ldrb	r2, [r0, #16]
   27384:	e59f3008 	ldr	r3, [pc, #8]	; 27394 <CMachineInfo::GetSoCName() const+0x14>
   27388:	e0833102 	add	r3, r3, r2, lsl #2
   2738c:	e59301fc 	ldr	r0, [r3, #508]	; 0x1fc
   27390:	e12fff1e 	bx	lr
   27394:	000462fc 	.word	0x000462fc

00027398 <CMachineInfo::GetRevisionRaw() const>:
   27398:	e5900000 	ldr	r0, [r0]
   2739c:	e12fff1e 	bx	lr

000273a0 <CMachineInfo::GetActLEDInfo() const>:
   273a0:	e5d02004 	ldrb	r2, [r0, #4]
   273a4:	e59f3008 	ldr	r3, [pc, #8]	; 273b4 <CMachineInfo::GetActLEDInfo() const+0x14>
   273a8:	e0833102 	add	r3, r3, r2, lsl #2
   273ac:	e5930210 	ldr	r0, [r3, #528]	; 0x210
   273b0:	e12fff1e 	bx	lr
   273b4:	000462fc 	.word	0x000462fc

000273b8 <CMachineInfo::GetClockRate(unsigned int) const>:
   273b8:	e92d4030 	push	{r4, r5, lr}
   273bc:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   273c0:	e1a04001 	mov	r4, r1
   273c4:	e1a05000 	mov	r5, r0
   273c8:	e3a01000 	mov	r1, #0
   273cc:	e28d000c 	add	r0, sp, #12
   273d0:	ebfff4f8 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   273d4:	e3a03004 	mov	r3, #4
   273d8:	e58d3000 	str	r3, [sp]
   273dc:	e3a03014 	mov	r3, #20
   273e0:	e59f1078 	ldr	r1, [pc, #120]	; 27460 <CMachineInfo::GetClockRate(unsigned int) const+0xa8>
   273e4:	e28d000c 	add	r0, sp, #12
   273e8:	e08d2003 	add	r2, sp, r3
   273ec:	e58d4020 	str	r4, [sp, #32]
   273f0:	ebfff4fc 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   273f4:	e3500000 	cmp	r0, #0
   273f8:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
   273fc:	1a00000a 	bne	2742c <CMachineInfo::GetClockRate(unsigned int) const+0x74>
   27400:	e3540002 	cmp	r4, #2
   27404:	0a000013 	beq	27458 <CMachineInfo::GetClockRate(unsigned int) const+0xa0>
   27408:	e3540004 	cmp	r4, #4
   2740c:	0a00000b 	beq	27440 <CMachineInfo::GetClockRate(unsigned int) const+0x88>
   27410:	e3540001 	cmp	r4, #1
   27414:	0a000003 	beq	27428 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
   27418:	e59f1044 	ldr	r1, [pc, #68]	; 27464 <CMachineInfo::GetClockRate(unsigned int) const+0xac>
   2741c:	e59f2044 	ldr	r2, [pc, #68]	; 27468 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
   27420:	e2810010 	add	r0, r1, #16
   27424:	ebfff4c2 	bl	24734 <assertion_failed>
   27428:	e59f403c 	ldr	r4, [pc, #60]	; 2746c <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
   2742c:	e28d000c 	add	r0, sp, #12
   27430:	ebfff4e7 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   27434:	e1a00004 	mov	r0, r4
   27438:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2743c:	e8bd8030 	pop	{r4, r5, pc}
   27440:	e5952008 	ldr	r2, [r5, #8]
   27444:	e59f3024 	ldr	r3, [pc, #36]	; 27470 <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
   27448:	e3520002 	cmp	r2, #2
   2744c:	e59f4020 	ldr	r4, [pc, #32]	; 27474 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
   27450:	81a04003 	movhi	r4, r3
   27454:	eafffff4 	b	2742c <CMachineInfo::GetClockRate(unsigned int) const+0x74>
   27458:	e59f4018 	ldr	r4, [pc, #24]	; 27478 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
   2745c:	eafffff2 	b	2742c <CMachineInfo::GetClockRate(unsigned int) const+0x74>
   27460:	00030002 	.word	0x00030002
   27464:	000439bc 	.word	0x000439bc
   27468:	00000141 	.word	0x00000141
   2746c:	05f5e100 	.word	0x05f5e100
   27470:	11e1a300 	.word	0x11e1a300
   27474:	0ee6b280 	.word	0x0ee6b280
   27478:	02dc6c00 	.word	0x02dc6c00

0002747c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   2747c:	e3510036 	cmp	r1, #54	; 0x36
   27480:	0a000006 	beq	274a0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   27484:	e3510037 	cmp	r1, #55	; 0x37
   27488:	1a00000e 	bne	274c8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x4c>
   2748c:	e5d03004 	ldrb	r3, [r0, #4]
   27490:	e3530003 	cmp	r3, #3
   27494:	83a00028 	movhi	r0, #40	; 0x28
   27498:	93a0002d 	movls	r0, #45	; 0x2d
   2749c:	e12fff1e 	bx	lr
   274a0:	e5d03004 	ldrb	r3, [r0, #4]
   274a4:	e3530003 	cmp	r3, #3
   274a8:	9a000004 	bls	274c0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x44>
   274ac:	e5903008 	ldr	r3, [r0, #8]
   274b0:	e3530003 	cmp	r3, #3
   274b4:	33a0002d 	movcc	r0, #45	; 0x2d
   274b8:	23a00029 	movcs	r0, #41	; 0x29
   274bc:	e12fff1e 	bx	lr
   274c0:	e3a00028 	mov	r0, #40	; 0x28
   274c4:	e12fff1e 	bx	lr
   274c8:	e59f100c 	ldr	r1, [pc, #12]	; 274dc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
   274cc:	e92d4010 	push	{r4, lr}
   274d0:	e59f2008 	ldr	r2, [pc, #8]	; 274e0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x64>
   274d4:	e2810010 	add	r0, r1, #16
   274d8:	ebfff495 	bl	24734 <assertion_failed>
   274dc:	000439bc 	.word	0x000439bc
   274e0:	0000017a 	.word	0x0000017a

000274e4 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   274e4:	e5903008 	ldr	r3, [r0, #8]
   274e8:	e3530003 	cmp	r3, #3
   274ec:	8a000005 	bhi	27508 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x24>
   274f0:	e3510001 	cmp	r1, #1
   274f4:	0a00000b 	beq	27528 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
   274f8:	e3510006 	cmp	r1, #6
   274fc:	e59f002c 	ldr	r0, [pc, #44]	; 27530 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x4c>
   27500:	13a00000 	movne	r0, #0
   27504:	e12fff1e 	bx	lr
   27508:	e3510001 	cmp	r1, #1
   2750c:	0a000003 	beq	27520 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x3c>
   27510:	e3510006 	cmp	r1, #6
   27514:	e59f0018 	ldr	r0, [pc, #24]	; 27534 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
   27518:	13a00000 	movne	r0, #0
   2751c:	e12fff1e 	bx	lr
   27520:	e59f0010 	ldr	r0, [pc, #16]	; 27538 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x54>
   27524:	e12fff1e 	bx	lr
   27528:	e59f000c 	ldr	r0, [pc, #12]	; 2753c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x58>
   2752c:	e12fff1e 	bx	lr
   27530:	1dcd6500 	.word	0x1dcd6500
   27534:	2cb41780 	.word	0x2cb41780
   27538:	0337f980 	.word	0x0337f980
   2753c:	0124f800 	.word	0x0124f800

00027540 <CMachineInfo::GetDevice(TDeviceId) const>:
   27540:	e3510000 	cmp	r1, #0
   27544:	1a000003 	bne	27558 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   27548:	e5d00004 	ldrb	r0, [r0, #4]
   2754c:	e2500001 	subs	r0, r0, #1
   27550:	13a00001 	movne	r0, #1
   27554:	e12fff1e 	bx	lr
   27558:	e59f100c 	ldr	r1, [pc, #12]	; 2756c <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
   2755c:	e92d4010 	push	{r4, lr}
   27560:	e59f2008 	ldr	r2, [pc, #8]	; 27570 <CMachineInfo::GetDevice(TDeviceId) const+0x30>
   27564:	e2810010 	add	r0, r1, #16
   27568:	ebfff471 	bl	24734 <assertion_failed>
   2756c:	000439bc 	.word	0x000439bc
   27570:	000001b5 	.word	0x000001b5

00027574 <CMachineInfo::ArePWMChannelsSwapped() const>:
   27574:	e5d03004 	ldrb	r3, [r0, #4]
   27578:	e2430006 	sub	r0, r3, #6
   2757c:	e3500001 	cmp	r0, #1
   27580:	83530003 	cmphi	r3, #3
   27584:	83a00001 	movhi	r0, #1
   27588:	93a00000 	movls	r0, #0
   2758c:	e12fff1e 	bx	lr

00027590 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   27590:	e59f30b0 	ldr	r3, [pc, #176]	; 27648 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xb8>
   27594:	e92d4010 	push	{r4, lr}
   27598:	e5933000 	ldr	r3, [r3]
   2759c:	ea000002 	b	275ac <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c>
   275a0:	e1530000 	cmp	r3, r0
   275a4:	0a000006 	beq	275c4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x34>
   275a8:	e1a00003 	mov	r0, r3
   275ac:	e3530000 	cmp	r3, #0
   275b0:	1afffffa 	bne	275a0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x10>
   275b4:	e59f1090 	ldr	r1, [pc, #144]	; 2764c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
   275b8:	e59f2090 	ldr	r2, [pc, #144]	; 27650 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   275bc:	e2810014 	add	r0, r1, #20
   275c0:	ebfff45b 	bl	24734 <assertion_failed>
   275c4:	e3d1200f 	bics	r2, r1, #15
   275c8:	1a00000a 	bne	275f8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x68>
   275cc:	e351000c 	cmp	r1, #12
   275d0:	8a000018 	bhi	27638 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa8>
   275d4:	e1d321b8 	ldrh	r2, [r3, #24]
   275d8:	e1a00152 	asr	r0, r2, r1
   275dc:	e3100001 	tst	r0, #1
   275e0:	0a00000d 	beq	2761c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x8c>
   275e4:	e3a00001 	mov	r0, #1
   275e8:	e1c22110 	bic	r2, r2, r0, lsl r1
   275ec:	e1c321b8 	strh	r2, [r3, #24]
   275f0:	e1a00001 	mov	r0, r1
   275f4:	e8bd8010 	pop	{r4, pc}
   275f8:	e3510081 	cmp	r1, #129	; 0x81
   275fc:	03a03006 	moveq	r3, #6
   27600:	13a0300c 	movne	r3, #12
   27604:	e1d011b8 	ldrh	r1, [r0, #24]
   27608:	e1a02351 	asr	r2, r1, r3
   2760c:	e3120001 	tst	r2, #1
   27610:	1a000003 	bne	27624 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x94>
   27614:	e2533001 	subs	r3, r3, #1
   27618:	2afffffa 	bcs	27608 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x78>
   2761c:	e3a00080 	mov	r0, #128	; 0x80
   27620:	e8bd8010 	pop	{r4, pc}
   27624:	e3a02001 	mov	r2, #1
   27628:	e1c11312 	bic	r1, r1, r2, lsl r3
   2762c:	e1c011b8 	strh	r1, [r0, #24]
   27630:	e1a00003 	mov	r0, r3
   27634:	e8bd8010 	pop	{r4, pc}
   27638:	e59f100c 	ldr	r1, [pc, #12]	; 2764c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
   2763c:	e59f2010 	ldr	r2, [pc, #16]	; 27654 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc4>
   27640:	e2810024 	add	r0, r1, #36	; 0x24
   27644:	ebfff43a 	bl	24734 <assertion_failed>
   27648:	0004c548 	.word	0x0004c548
   2764c:	000439bc 	.word	0x000439bc
   27650:	000001c5 	.word	0x000001c5
   27654:	000001ce 	.word	0x000001ce

00027658 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   27658:	e59f3074 	ldr	r3, [pc, #116]	; 276d4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x7c>
   2765c:	e92d4010 	push	{r4, lr}
   27660:	e5933000 	ldr	r3, [r3]
   27664:	ea000002 	b	27674 <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
   27668:	e1530000 	cmp	r3, r0
   2766c:	0a000006 	beq	2768c <CMachineInfo::FreeDMAChannel(unsigned int)+0x34>
   27670:	e1a00003 	mov	r0, r3
   27674:	e3530000 	cmp	r3, #0
   27678:	1afffffa 	bne	27668 <CMachineInfo::FreeDMAChannel(unsigned int)+0x10>
   2767c:	e59f1054 	ldr	r1, [pc, #84]	; 276d8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   27680:	e59f2054 	ldr	r2, [pc, #84]	; 276dc <CMachineInfo::FreeDMAChannel(unsigned int)+0x84>
   27684:	e2810014 	add	r0, r1, #20
   27688:	ebfff429 	bl	24734 <assertion_failed>
   2768c:	e351000c 	cmp	r1, #12
   27690:	8a000007 	bhi	276b4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x5c>
   27694:	e1d321b8 	ldrh	r2, [r3, #24]
   27698:	e1e00152 	mvn	r0, r2, asr r1
   2769c:	e3100001 	tst	r0, #1
   276a0:	0a000007 	beq	276c4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x6c>
   276a4:	e3a00001 	mov	r0, #1
   276a8:	e1821110 	orr	r1, r2, r0, lsl r1
   276ac:	e1c311b8 	strh	r1, [r3, #24]
   276b0:	e8bd8010 	pop	{r4, pc}
   276b4:	e59f101c 	ldr	r1, [pc, #28]	; 276d8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   276b8:	e59f2020 	ldr	r2, [pc, #32]	; 276e0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x88>
   276bc:	e2810024 	add	r0, r1, #36	; 0x24
   276c0:	ebfff41b 	bl	24734 <assertion_failed>
   276c4:	e59f100c 	ldr	r1, [pc, #12]	; 276d8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   276c8:	e59f2014 	ldr	r2, [pc, #20]	; 276e4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x8c>
   276cc:	e2810040 	add	r0, r1, #64	; 0x40
   276d0:	ebfff417 	bl	24734 <assertion_failed>
   276d4:	0004c548 	.word	0x0004c548
   276d8:	000439bc 	.word	0x000439bc
   276dc:	000001f2 	.word	0x000001f2
   276e0:	000001fa 	.word	0x000001fa
   276e4:	000001fb 	.word	0x000001fb

000276e8 <CMachineInfo::Get()>:
   276e8:	e59f301c 	ldr	r3, [pc, #28]	; 2770c <CMachineInfo::Get()+0x24>
   276ec:	e5930000 	ldr	r0, [r3]
   276f0:	e3500000 	cmp	r0, #0
   276f4:	112fff1e 	bxne	lr
   276f8:	e59f1010 	ldr	r1, [pc, #16]	; 27710 <CMachineInfo::Get()+0x28>
   276fc:	e92d4010 	push	{r4, lr}
   27700:	e59f200c 	ldr	r2, [pc, #12]	; 27714 <CMachineInfo::Get()+0x2c>
   27704:	e2810014 	add	r0, r1, #20
   27708:	ebfff409 	bl	24734 <assertion_failed>
   2770c:	0004c548 	.word	0x0004c548
   27710:	000439bc 	.word	0x000439bc
   27714:	00000201 	.word	0x00000201

00027718 <CPtrArray::CPtrArray(unsigned int, unsigned int)>:
   27718:	e3a03000 	mov	r3, #0
   2771c:	e1510003 	cmp	r1, r3
   27720:	e92d4010 	push	{r4, lr}
   27724:	e880000e 	stm	r0, {r1, r2, r3}
   27728:	e580300c 	str	r3, [r0, #12]
   2772c:	0a00000a 	beq	2775c <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x44>
   27730:	e3520000 	cmp	r2, #0
   27734:	0a00000c 	beq	2776c <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x54>
   27738:	e371022e 	cmn	r1, #-536870910	; 0xe0000002
   2773c:	e1a04000 	mov	r4, r0
   27740:	83e00000 	mvnhi	r0, #0
   27744:	91a00101 	lslls	r0, r1, #2
   27748:	eb000e06 	bl	2af68 <operator new[](unsigned int)>
   2774c:	e1a03000 	mov	r3, r0
   27750:	e1a00004 	mov	r0, r4
   27754:	e584300c 	str	r3, [r4, #12]
   27758:	e8bd8010 	pop	{r4, pc}
   2775c:	e3a0201e 	mov	r2, #30
   27760:	e59f1014 	ldr	r1, [pc, #20]	; 2777c <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x64>
   27764:	e59f0014 	ldr	r0, [pc, #20]	; 27780 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x68>
   27768:	ebfff3f1 	bl	24734 <assertion_failed>
   2776c:	e3a0201f 	mov	r2, #31
   27770:	e59f1004 	ldr	r1, [pc, #4]	; 2777c <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x64>
   27774:	e59f0008 	ldr	r0, [pc, #8]	; 27784 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x6c>
   27778:	ebfff3ed 	bl	24734 <assertion_failed>
   2777c:	00043a24 	.word	0x00043a24
   27780:	00043a34 	.word	0x00043a34
   27784:	00043a48 	.word	0x00043a48

00027788 <CPtrArray::~CPtrArray()>:
   27788:	e3a03000 	mov	r3, #0
   2778c:	e92d4010 	push	{r4, lr}
   27790:	e1a04000 	mov	r4, r0
   27794:	e590000c 	ldr	r0, [r0, #12]
   27798:	e5843000 	str	r3, [r4]
   2779c:	e1500003 	cmp	r0, r3
   277a0:	e5843004 	str	r3, [r4, #4]
   277a4:	0a000000 	beq	277ac <CPtrArray::~CPtrArray()+0x24>
   277a8:	eb000df5 	bl	2af84 <operator delete[](void*)>
   277ac:	e1a00004 	mov	r0, r4
   277b0:	e8bd8010 	pop	{r4, pc}

000277b4 <CPtrArray::GetCount() const>:
   277b4:	e5900008 	ldr	r0, [r0, #8]
   277b8:	e12fff1e 	bx	lr

000277bc <CPtrArray::operator[](unsigned int)>:
   277bc:	e5903008 	ldr	r3, [r0, #8]
   277c0:	e92d4010 	push	{r4, lr}
   277c4:	e1530001 	cmp	r3, r1
   277c8:	9a000007 	bls	277ec <CPtrArray::operator[](unsigned int)+0x30>
   277cc:	e5902000 	ldr	r2, [r0]
   277d0:	e1530002 	cmp	r3, r2
   277d4:	8a000008 	bhi	277fc <CPtrArray::operator[](unsigned int)+0x40>
   277d8:	e590000c 	ldr	r0, [r0, #12]
   277dc:	e3500000 	cmp	r0, #0
   277e0:	0a000009 	beq	2780c <CPtrArray::operator[](unsigned int)+0x50>
   277e4:	e0800101 	add	r0, r0, r1, lsl #2
   277e8:	e8bd8010 	pop	{r4, pc}
   277ec:	e3a02035 	mov	r2, #53	; 0x35
   277f0:	e59f1024 	ldr	r1, [pc, #36]	; 2781c <CPtrArray::operator[](unsigned int)+0x60>
   277f4:	e59f0024 	ldr	r0, [pc, #36]	; 27820 <CPtrArray::operator[](unsigned int)+0x64>
   277f8:	ebfff3cd 	bl	24734 <assertion_failed>
   277fc:	e3a02036 	mov	r2, #54	; 0x36
   27800:	e59f1014 	ldr	r1, [pc, #20]	; 2781c <CPtrArray::operator[](unsigned int)+0x60>
   27804:	e59f0018 	ldr	r0, [pc, #24]	; 27824 <CPtrArray::operator[](unsigned int)+0x68>
   27808:	ebfff3c9 	bl	24734 <assertion_failed>
   2780c:	e3a02037 	mov	r2, #55	; 0x37
   27810:	e59f1004 	ldr	r1, [pc, #4]	; 2781c <CPtrArray::operator[](unsigned int)+0x60>
   27814:	e59f000c 	ldr	r0, [pc, #12]	; 27828 <CPtrArray::operator[](unsigned int)+0x6c>
   27818:	ebfff3c5 	bl	24734 <assertion_failed>
   2781c:	00043a24 	.word	0x00043a24
   27820:	00043a60 	.word	0x00043a60
   27824:	00043a78 	.word	0x00043a78
   27828:	00043a98 	.word	0x00043a98

0002782c <CPtrArray::operator[](unsigned int) const>:
   2782c:	e5903008 	ldr	r3, [r0, #8]
   27830:	e92d4010 	push	{r4, lr}
   27834:	e1530001 	cmp	r3, r1
   27838:	9a000007 	bls	2785c <CPtrArray::operator[](unsigned int) const+0x30>
   2783c:	e5902000 	ldr	r2, [r0]
   27840:	e1530002 	cmp	r3, r2
   27844:	8a000008 	bhi	2786c <CPtrArray::operator[](unsigned int) const+0x40>
   27848:	e590300c 	ldr	r3, [r0, #12]
   2784c:	e3530000 	cmp	r3, #0
   27850:	0a000009 	beq	2787c <CPtrArray::operator[](unsigned int) const+0x50>
   27854:	e7930101 	ldr	r0, [r3, r1, lsl #2]
   27858:	e8bd8010 	pop	{r4, pc}
   2785c:	e3a0203e 	mov	r2, #62	; 0x3e
   27860:	e59f1024 	ldr	r1, [pc, #36]	; 2788c <CPtrArray::operator[](unsigned int) const+0x60>
   27864:	e59f0024 	ldr	r0, [pc, #36]	; 27890 <CPtrArray::operator[](unsigned int) const+0x64>
   27868:	ebfff3b1 	bl	24734 <assertion_failed>
   2786c:	e3a0203f 	mov	r2, #63	; 0x3f
   27870:	e59f1014 	ldr	r1, [pc, #20]	; 2788c <CPtrArray::operator[](unsigned int) const+0x60>
   27874:	e59f0018 	ldr	r0, [pc, #24]	; 27894 <CPtrArray::operator[](unsigned int) const+0x68>
   27878:	ebfff3ad 	bl	24734 <assertion_failed>
   2787c:	e3a02040 	mov	r2, #64	; 0x40
   27880:	e59f1004 	ldr	r1, [pc, #4]	; 2788c <CPtrArray::operator[](unsigned int) const+0x60>
   27884:	e59f000c 	ldr	r0, [pc, #12]	; 27898 <CPtrArray::operator[](unsigned int) const+0x6c>
   27888:	ebfff3a9 	bl	24734 <assertion_failed>
   2788c:	00043a24 	.word	0x00043a24
   27890:	00043a60 	.word	0x00043a60
   27894:	00043a78 	.word	0x00043a78
   27898:	00043a98 	.word	0x00043a98

0002789c <CPtrArray::Append(void*)>:
   2789c:	e5903000 	ldr	r3, [r0]
   278a0:	e92d4070 	push	{r4, r5, r6, lr}
   278a4:	e3530000 	cmp	r3, #0
   278a8:	0a000024 	beq	27940 <CPtrArray::Append(void*)+0xa4>
   278ac:	e590500c 	ldr	r5, [r0, #12]
   278b0:	e1a04000 	mov	r4, r0
   278b4:	e3550000 	cmp	r5, #0
   278b8:	0a000024 	beq	27950 <CPtrArray::Append(void*)+0xb4>
   278bc:	e5900008 	ldr	r0, [r0, #8]
   278c0:	e1530000 	cmp	r3, r0
   278c4:	3a000025 	bcc	27960 <CPtrArray::Append(void*)+0xc4>
   278c8:	e1a06001 	mov	r6, r1
   278cc:	0a000003 	beq	278e0 <CPtrArray::Append(void*)+0x44>
   278d0:	e2803001 	add	r3, r0, #1
   278d4:	e7856100 	str	r6, [r5, r0, lsl #2]
   278d8:	e5843008 	str	r3, [r4, #8]
   278dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   278e0:	e5940004 	ldr	r0, [r4, #4]
   278e4:	e3500000 	cmp	r0, #0
   278e8:	0a000020 	beq	27970 <CPtrArray::Append(void*)+0xd4>
   278ec:	e0830000 	add	r0, r3, r0
   278f0:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   278f4:	83e00000 	mvnhi	r0, #0
   278f8:	91a00100 	lslls	r0, r0, #2
   278fc:	eb000d99 	bl	2af68 <operator new[](unsigned int)>
   27900:	e5942000 	ldr	r2, [r4]
   27904:	e594100c 	ldr	r1, [r4, #12]
   27908:	e1a02102 	lsl	r2, r2, #2
   2790c:	e1a05000 	mov	r5, r0
   27910:	eb000ba8 	bl	2a7b8 <memcpy>
   27914:	e594000c 	ldr	r0, [r4, #12]
   27918:	e3500000 	cmp	r0, #0
   2791c:	0a000000 	beq	27924 <CPtrArray::Append(void*)+0x88>
   27920:	eb000d97 	bl	2af84 <operator delete[](void*)>
   27924:	e5943000 	ldr	r3, [r4]
   27928:	e5942004 	ldr	r2, [r4, #4]
   2792c:	e5940008 	ldr	r0, [r4, #8]
   27930:	e0833002 	add	r3, r3, r2
   27934:	e584500c 	str	r5, [r4, #12]
   27938:	e5843000 	str	r3, [r4]
   2793c:	eaffffe3 	b	278d0 <CPtrArray::Append(void*)+0x34>
   27940:	e3a02047 	mov	r2, #71	; 0x47
   27944:	e59f1034 	ldr	r1, [pc, #52]	; 27980 <CPtrArray::Append(void*)+0xe4>
   27948:	e59f0034 	ldr	r0, [pc, #52]	; 27984 <CPtrArray::Append(void*)+0xe8>
   2794c:	ebfff378 	bl	24734 <assertion_failed>
   27950:	e3a02048 	mov	r2, #72	; 0x48
   27954:	e59f1024 	ldr	r1, [pc, #36]	; 27980 <CPtrArray::Append(void*)+0xe4>
   27958:	e59f0028 	ldr	r0, [pc, #40]	; 27988 <CPtrArray::Append(void*)+0xec>
   2795c:	ebfff374 	bl	24734 <assertion_failed>
   27960:	e3a0204a 	mov	r2, #74	; 0x4a
   27964:	e59f1014 	ldr	r1, [pc, #20]	; 27980 <CPtrArray::Append(void*)+0xe4>
   27968:	e59f001c 	ldr	r0, [pc, #28]	; 2798c <CPtrArray::Append(void*)+0xf0>
   2796c:	ebfff370 	bl	24734 <assertion_failed>
   27970:	e3a0204d 	mov	r2, #77	; 0x4d
   27974:	e59f1004 	ldr	r1, [pc, #4]	; 27980 <CPtrArray::Append(void*)+0xe4>
   27978:	e59f0010 	ldr	r0, [pc, #16]	; 27990 <CPtrArray::Append(void*)+0xf4>
   2797c:	ebfff36c 	bl	24734 <assertion_failed>
   27980:	00043a24 	.word	0x00043a24
   27984:	00043a34 	.word	0x00043a34
   27988:	00043a98 	.word	0x00043a98
   2798c:	00043a78 	.word	0x00043a78
   27990:	00043a48 	.word	0x00043a48

00027994 <CPtrArray::RemoveLast()>:
   27994:	e5903008 	ldr	r3, [r0, #8]
   27998:	e3530000 	cmp	r3, #0
   2799c:	0a000002 	beq	279ac <CPtrArray::RemoveLast()+0x18>
   279a0:	e2433001 	sub	r3, r3, #1
   279a4:	e5803008 	str	r3, [r0, #8]
   279a8:	e12fff1e 	bx	lr
   279ac:	e3a02060 	mov	r2, #96	; 0x60
   279b0:	e92d4010 	push	{r4, lr}
   279b4:	e59f1004 	ldr	r1, [pc, #4]	; 279c0 <CPtrArray::RemoveLast()+0x2c>
   279b8:	e59f0004 	ldr	r0, [pc, #4]	; 279c4 <CPtrArray::RemoveLast()+0x30>
   279bc:	ebfff35c 	bl	24734 <assertion_failed>
   279c0:	00043a24 	.word	0x00043a24
   279c4:	00043aa8 	.word	0x00043aa8

000279c8 <CString::~CString()>:
   279c8:	e92d4010 	push	{r4, lr}
   279cc:	e1a04000 	mov	r4, r0
   279d0:	e5900004 	ldr	r0, [r0, #4]
   279d4:	e59f3014 	ldr	r3, [pc, #20]	; 279f0 <CString::~CString()+0x28>
   279d8:	e3500000 	cmp	r0, #0
   279dc:	e5843000 	str	r3, [r4]
   279e0:	0a000000 	beq	279e8 <CString::~CString()+0x20>
   279e4:	eb000d66 	bl	2af84 <operator delete[](void*)>
   279e8:	e1a00004 	mov	r0, r4
   279ec:	e8bd8010 	pop	{r4, pc}
   279f0:	00043ad8 	.word	0x00043ad8

000279f4 <CString::~CString()>:
   279f4:	e92d4010 	push	{r4, lr}
   279f8:	e1a04000 	mov	r4, r0
   279fc:	e5900004 	ldr	r0, [r0, #4]
   27a00:	e59f3020 	ldr	r3, [pc, #32]	; 27a28 <CString::~CString()+0x34>
   27a04:	e3500000 	cmp	r0, #0
   27a08:	e5843000 	str	r3, [r4]
   27a0c:	0a000000 	beq	27a14 <CString::~CString()+0x20>
   27a10:	eb000d5b 	bl	2af84 <operator delete[](void*)>
   27a14:	e1a00004 	mov	r0, r4
   27a18:	e3a01010 	mov	r1, #16
   27a1c:	eb000d59 	bl	2af88 <operator delete(void*, unsigned int)>
   27a20:	e1a00004 	mov	r0, r4
   27a24:	e8bd8010 	pop	{r4, pc}
   27a28:	00043ad8 	.word	0x00043ad8

00027a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   27a2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   27a30:	e990004c 	ldmib	r0, {r2, r3, r6}
   27a34:	e0466002 	sub	r6, r6, r2
   27a38:	e0861001 	add	r1, r6, r1
   27a3c:	e2812001 	add	r2, r1, #1
   27a40:	e1520003 	cmp	r2, r3
   27a44:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   27a48:	e1a04000 	mov	r4, r0
   27a4c:	e2815041 	add	r5, r1, #65	; 0x41
   27a50:	e1a00005 	mov	r0, r5
   27a54:	eb000d43 	bl	2af68 <operator new[](unsigned int)>
   27a58:	e3a02000 	mov	r2, #0
   27a5c:	e594300c 	ldr	r3, [r4, #12]
   27a60:	e1a07000 	mov	r7, r0
   27a64:	e5c32000 	strb	r2, [r3]
   27a68:	e5941004 	ldr	r1, [r4, #4]
   27a6c:	eb0009fa 	bl	2a25c <strcpy>
   27a70:	e5940004 	ldr	r0, [r4, #4]
   27a74:	e3500000 	cmp	r0, #0
   27a78:	0a000000 	beq	27a80 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   27a7c:	eb000d40 	bl	2af84 <operator delete[](void*)>
   27a80:	e0876006 	add	r6, r7, r6
   27a84:	e584600c 	str	r6, [r4, #12]
   27a88:	e5847004 	str	r7, [r4, #4]
   27a8c:	e5845008 	str	r5, [r4, #8]
   27a90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00027a94 <CString::CString()>:
   27a94:	e3a02000 	mov	r2, #0
   27a98:	e59f1008 	ldr	r1, [pc, #8]	; 27aa8 <CString::CString()+0x14>
   27a9c:	e5802008 	str	r2, [r0, #8]
   27aa0:	e8800006 	stm	r0, {r1, r2}
   27aa4:	e12fff1e 	bx	lr
   27aa8:	00043ad8 	.word	0x00043ad8

00027aac <CString::CString(char const*)>:
   27aac:	e92d4010 	push	{r4, lr}
   27ab0:	e1a04000 	mov	r4, r0
   27ab4:	e59f3034 	ldr	r3, [pc, #52]	; 27af0 <CString::CString(char const*)+0x44>
   27ab8:	e24dd008 	sub	sp, sp, #8
   27abc:	e5843000 	str	r3, [r4]
   27ac0:	e1a00001 	mov	r0, r1
   27ac4:	e58d1004 	str	r1, [sp, #4]
   27ac8:	eb00093f 	bl	29fcc <strlen>
   27acc:	e2800001 	add	r0, r0, #1
   27ad0:	e5840008 	str	r0, [r4, #8]
   27ad4:	eb000d23 	bl	2af68 <operator new[](unsigned int)>
   27ad8:	e59d1004 	ldr	r1, [sp, #4]
   27adc:	e5840004 	str	r0, [r4, #4]
   27ae0:	eb0009dd 	bl	2a25c <strcpy>
   27ae4:	e1a00004 	mov	r0, r4
   27ae8:	e28dd008 	add	sp, sp, #8
   27aec:	e8bd8010 	pop	{r4, pc}
   27af0:	00043ad8 	.word	0x00043ad8

00027af4 <CString::operator char const*() const>:
   27af4:	e5900004 	ldr	r0, [r0, #4]
   27af8:	e59f3008 	ldr	r3, [pc, #8]	; 27b08 <CString::operator char const*() const+0x14>
   27afc:	e3500000 	cmp	r0, #0
   27b00:	01a00003 	moveq	r0, r3
   27b04:	e12fff1e 	bx	lr
   27b08:	00045ac0 	.word	0x00045ac0

00027b0c <CString::operator=(char const*)>:
   27b0c:	e92d4010 	push	{r4, lr}
   27b10:	e1a04000 	mov	r4, r0
   27b14:	e5900004 	ldr	r0, [r0, #4]
   27b18:	e24dd008 	sub	sp, sp, #8
   27b1c:	e3500000 	cmp	r0, #0
   27b20:	0a000002 	beq	27b30 <CString::operator=(char const*)+0x24>
   27b24:	e58d1004 	str	r1, [sp, #4]
   27b28:	eb000d15 	bl	2af84 <operator delete[](void*)>
   27b2c:	e59d1004 	ldr	r1, [sp, #4]
   27b30:	e1a00001 	mov	r0, r1
   27b34:	e58d1004 	str	r1, [sp, #4]
   27b38:	eb000923 	bl	29fcc <strlen>
   27b3c:	e2800001 	add	r0, r0, #1
   27b40:	e5840008 	str	r0, [r4, #8]
   27b44:	eb000d07 	bl	2af68 <operator new[](unsigned int)>
   27b48:	e59d1004 	ldr	r1, [sp, #4]
   27b4c:	e5840004 	str	r0, [r4, #4]
   27b50:	eb0009c1 	bl	2a25c <strcpy>
   27b54:	e5940004 	ldr	r0, [r4, #4]
   27b58:	e28dd008 	add	sp, sp, #8
   27b5c:	e8bd8010 	pop	{r4, pc}

00027b60 <CString::operator=(CString const&)>:
   27b60:	e92d4070 	push	{r4, r5, r6, lr}
   27b64:	e1a04000 	mov	r4, r0
   27b68:	e5900004 	ldr	r0, [r0, #4]
   27b6c:	e1a05001 	mov	r5, r1
   27b70:	e3500000 	cmp	r0, #0
   27b74:	0a000000 	beq	27b7c <CString::operator=(CString const&)+0x1c>
   27b78:	eb000d01 	bl	2af84 <operator delete[](void*)>
   27b7c:	e5950004 	ldr	r0, [r5, #4]
   27b80:	e59f6030 	ldr	r6, [pc, #48]	; 27bb8 <CString::operator=(CString const&)+0x58>
   27b84:	e3500000 	cmp	r0, #0
   27b88:	01a00006 	moveq	r0, r6
   27b8c:	eb00090e 	bl	29fcc <strlen>
   27b90:	e2800001 	add	r0, r0, #1
   27b94:	e5840008 	str	r0, [r4, #8]
   27b98:	eb000cf2 	bl	2af68 <operator new[](unsigned int)>
   27b9c:	e5840004 	str	r0, [r4, #4]
   27ba0:	e5951004 	ldr	r1, [r5, #4]
   27ba4:	e3510000 	cmp	r1, #0
   27ba8:	01a01006 	moveq	r1, r6
   27bac:	eb0009aa 	bl	2a25c <strcpy>
   27bb0:	e1a00004 	mov	r0, r4
   27bb4:	e8bd8070 	pop	{r4, r5, r6, pc}
   27bb8:	00045ac0 	.word	0x00045ac0

00027bbc <CString::GetLength() const>:
   27bbc:	e5900004 	ldr	r0, [r0, #4]
   27bc0:	e3500000 	cmp	r0, #0
   27bc4:	012fff1e 	bxeq	lr
   27bc8:	ea0008ff 	b	29fcc <strlen>

00027bcc <CString::Append(char const*)>:
   27bcc:	e92d4070 	push	{r4, r5, r6, lr}
   27bd0:	e3a03001 	mov	r3, #1
   27bd4:	e1a04000 	mov	r4, r0
   27bd8:	e5900004 	ldr	r0, [r0, #4]
   27bdc:	e1a06001 	mov	r6, r1
   27be0:	e3500000 	cmp	r0, #0
   27be4:	e5843008 	str	r3, [r4, #8]
   27be8:	0a000003 	beq	27bfc <CString::Append(char const*)+0x30>
   27bec:	eb0008f6 	bl	29fcc <strlen>
   27bf0:	e5943008 	ldr	r3, [r4, #8]
   27bf4:	e0830000 	add	r0, r3, r0
   27bf8:	e5840008 	str	r0, [r4, #8]
   27bfc:	e1a00006 	mov	r0, r6
   27c00:	eb0008f1 	bl	29fcc <strlen>
   27c04:	e5943008 	ldr	r3, [r4, #8]
   27c08:	e0800003 	add	r0, r0, r3
   27c0c:	e5840008 	str	r0, [r4, #8]
   27c10:	eb000cd4 	bl	2af68 <operator new[](unsigned int)>
   27c14:	e5941004 	ldr	r1, [r4, #4]
   27c18:	e1a05000 	mov	r5, r0
   27c1c:	e3510000 	cmp	r1, #0
   27c20:	05c01000 	strbeq	r1, [r0]
   27c24:	0a000004 	beq	27c3c <CString::Append(char const*)+0x70>
   27c28:	eb00098b 	bl	2a25c <strcpy>
   27c2c:	e5940004 	ldr	r0, [r4, #4]
   27c30:	e3500000 	cmp	r0, #0
   27c34:	0a000000 	beq	27c3c <CString::Append(char const*)+0x70>
   27c38:	eb000cd1 	bl	2af84 <operator delete[](void*)>
   27c3c:	e1a01006 	mov	r1, r6
   27c40:	e1a00005 	mov	r0, r5
   27c44:	eb00099d 	bl	2a2c0 <strcat>
   27c48:	e5845004 	str	r5, [r4, #4]
   27c4c:	e8bd8070 	pop	{r4, r5, r6, pc}

00027c50 <CString::Compare(char const*) const>:
   27c50:	e5900004 	ldr	r0, [r0, #4]
   27c54:	ea0008e6 	b	29ff4 <strcmp>

00027c58 <CString::Find(char) const>:
   27c58:	e5902004 	ldr	r2, [r0, #4]
   27c5c:	e1d230d0 	ldrsb	r3, [r2]
   27c60:	e3530000 	cmp	r3, #0
   27c64:	0a000006 	beq	27c84 <CString::Find(char) const+0x2c>
   27c68:	e3a00000 	mov	r0, #0
   27c6c:	e1510003 	cmp	r1, r3
   27c70:	012fff1e 	bxeq	lr
   27c74:	e1f230d1 	ldrsb	r3, [r2, #1]!
   27c78:	e2800001 	add	r0, r0, #1
   27c7c:	e3530000 	cmp	r3, #0
   27c80:	1afffff9 	bne	27c6c <CString::Find(char) const+0x14>
   27c84:	e3e00000 	mvn	r0, #0
   27c88:	e12fff1e 	bx	lr

00027c8c <CString::PutChar(char, unsigned int)>:
   27c8c:	e92d4070 	push	{r4, r5, r6, lr}
   27c90:	e2524000 	subs	r4, r2, #0
   27c94:	08bd8070 	popeq	{r4, r5, r6, pc}
   27c98:	e1a06001 	mov	r6, r1
   27c9c:	e1a01004 	mov	r1, r4
   27ca0:	e1a05000 	mov	r5, r0
   27ca4:	ebffff60 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27ca8:	e2442001 	sub	r2, r4, #1
   27cac:	e595300c 	ldr	r3, [r5, #12]
   27cb0:	e2422001 	sub	r2, r2, #1
   27cb4:	e2830001 	add	r0, r3, #1
   27cb8:	e3720001 	cmn	r2, #1
   27cbc:	e585000c 	str	r0, [r5, #12]
   27cc0:	e5c36000 	strb	r6, [r3]
   27cc4:	1afffff8 	bne	27cac <CString::PutChar(char, unsigned int)+0x20>
   27cc8:	e8bd8070 	pop	{r4, r5, r6, pc}

00027ccc <CString::PutString(char const*)>:
   27ccc:	e92d4070 	push	{r4, r5, r6, lr}
   27cd0:	e1a04000 	mov	r4, r0
   27cd4:	e1a00001 	mov	r0, r1
   27cd8:	e1a06001 	mov	r6, r1
   27cdc:	eb0008ba 	bl	29fcc <strlen>
   27ce0:	e2505000 	subs	r5, r0, #0
   27ce4:	0a000002 	beq	27cf4 <CString::PutString(char const*)+0x28>
   27ce8:	e1a01005 	mov	r1, r5
   27cec:	e1a00004 	mov	r0, r4
   27cf0:	ebffff4d 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27cf4:	e1a01006 	mov	r1, r6
   27cf8:	e594000c 	ldr	r0, [r4, #12]
   27cfc:	eb000956 	bl	2a25c <strcpy>
   27d00:	e594000c 	ldr	r0, [r4, #12]
   27d04:	e0800005 	add	r0, r0, r5
   27d08:	e584000c 	str	r0, [r4, #12]
   27d0c:	e8bd8070 	pop	{r4, r5, r6, pc}

00027d10 <CString::Replace(char const*, char const*)>:
   27d10:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27d14:	e1d170d0 	ldrsb	r7, [r1]
   27d18:	e24dd010 	sub	sp, sp, #16
   27d1c:	e3570000 	cmp	r7, #0
   27d20:	1a000002 	bne	27d30 <CString::Replace(char const*, char const*)+0x20>
   27d24:	e1a00007 	mov	r0, r7
   27d28:	e28dd010 	add	sp, sp, #16
   27d2c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27d30:	e1a05000 	mov	r5, r0
   27d34:	e1a06001 	mov	r6, r1
   27d38:	e5901004 	ldr	r1, [r0, #4]
   27d3c:	e1a0000d 	mov	r0, sp
   27d40:	e1a08002 	mov	r8, r2
   27d44:	ebffff58 	bl	27aac <CString::CString(char const*)>
   27d48:	e5950004 	ldr	r0, [r5, #4]
   27d4c:	e3500000 	cmp	r0, #0
   27d50:	0a000000 	beq	27d58 <CString::Replace(char const*, char const*)+0x48>
   27d54:	eb000c8a 	bl	2af84 <operator delete[](void*)>
   27d58:	e3a00040 	mov	r0, #64	; 0x40
   27d5c:	e5850008 	str	r0, [r5, #8]
   27d60:	eb000c80 	bl	2af68 <operator new[](unsigned int)>
   27d64:	e3a07000 	mov	r7, #0
   27d68:	e59d9004 	ldr	r9, [sp, #4]
   27d6c:	e5850004 	str	r0, [r5, #4]
   27d70:	e585000c 	str	r0, [r5, #12]
   27d74:	e1a00009 	mov	r0, r9
   27d78:	e1d610d0 	ldrsb	r1, [r6]
   27d7c:	eb000960 	bl	2a304 <strchr>
   27d80:	e2504000 	subs	r4, r0, #0
   27d84:	0a00002a 	beq	27e34 <CString::Replace(char const*, char const*)+0x124>
   27d88:	e1590004 	cmp	r9, r4
   27d8c:	3a000016 	bcc	27dec <CString::Replace(char const*, char const*)+0xdc>
   27d90:	e1d630d1 	ldrsb	r3, [r6, #1]
   27d94:	e2842001 	add	r2, r4, #1
   27d98:	e3530000 	cmp	r3, #0
   27d9c:	e286e001 	add	lr, r6, #1
   27da0:	0a00001d 	beq	27e1c <CString::Replace(char const*, char const*)+0x10c>
   27da4:	e1a0c002 	mov	ip, r2
   27da8:	ea000003 	b	27dbc <CString::Replace(char const*, char const*)+0xac>
   27dac:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   27db0:	e1a0200c 	mov	r2, ip
   27db4:	e3530000 	cmp	r3, #0
   27db8:	0a000017 	beq	27e1c <CString::Replace(char const*, char const*)+0x10c>
   27dbc:	e0dc40d1 	ldrsb	r4, [ip], #1
   27dc0:	e1540003 	cmp	r4, r3
   27dc4:	0afffff8 	beq	27dac <CString::Replace(char const*, char const*)+0x9c>
   27dc8:	e3a01001 	mov	r1, #1
   27dcc:	e1a00005 	mov	r0, r5
   27dd0:	e0d940d1 	ldrsb	r4, [r9], #1
   27dd4:	ebffff14 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27dd8:	e595300c 	ldr	r3, [r5, #12]
   27ddc:	e2832001 	add	r2, r3, #1
   27de0:	e585200c 	str	r2, [r5, #12]
   27de4:	e5c34000 	strb	r4, [r3]
   27de8:	eaffffe1 	b	27d74 <CString::Replace(char const*, char const*)+0x64>
   27dec:	e3a01001 	mov	r1, #1
   27df0:	e1a00005 	mov	r0, r5
   27df4:	e0d9a0d1 	ldrsb	sl, [r9], #1
   27df8:	ebffff0b 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27dfc:	e595300c 	ldr	r3, [r5, #12]
   27e00:	e1540009 	cmp	r4, r9
   27e04:	e2832001 	add	r2, r3, #1
   27e08:	e585200c 	str	r2, [r5, #12]
   27e0c:	e5c3a000 	strb	sl, [r3]
   27e10:	1afffff5 	bne	27dec <CString::Replace(char const*, char const*)+0xdc>
   27e14:	e1a09004 	mov	r9, r4
   27e18:	eaffffdc 	b	27d90 <CString::Replace(char const*, char const*)+0x80>
   27e1c:	e1a01008 	mov	r1, r8
   27e20:	e1a00005 	mov	r0, r5
   27e24:	e1a09002 	mov	r9, r2
   27e28:	e2877001 	add	r7, r7, #1
   27e2c:	ebffffa6 	bl	27ccc <CString::PutString(char const*)>
   27e30:	eaffffcf 	b	27d74 <CString::Replace(char const*, char const*)+0x64>
   27e34:	e1a00005 	mov	r0, r5
   27e38:	e1a01009 	mov	r1, r9
   27e3c:	ebffffa2 	bl	27ccc <CString::PutString(char const*)>
   27e40:	e595200c 	ldr	r2, [r5, #12]
   27e44:	e59f3020 	ldr	r3, [pc, #32]	; 27e6c <CString::Replace(char const*, char const*)+0x15c>
   27e48:	e5c24000 	strb	r4, [r2]
   27e4c:	e59d0004 	ldr	r0, [sp, #4]
   27e50:	e58d3000 	str	r3, [sp]
   27e54:	e3500000 	cmp	r0, #0
   27e58:	0affffb1 	beq	27d24 <CString::Replace(char const*, char const*)+0x14>
   27e5c:	eb000c48 	bl	2af84 <operator delete[](void*)>
   27e60:	e1a00007 	mov	r0, r7
   27e64:	e28dd010 	add	sp, sp, #16
   27e68:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27e6c:	00043ad8 	.word	0x00043ad8

00027e70 <CString::ReserveSpace(unsigned int)>:
   27e70:	e3510000 	cmp	r1, #0
   27e74:	012fff1e 	bxeq	lr
   27e78:	eafffeeb 	b	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>

00027e7c <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   27e7c:	e1510002 	cmp	r1, r2
   27e80:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27e84:	e1a05001 	mov	r5, r1
   27e88:	e1a06002 	mov	r6, r2
   27e8c:	e1a08000 	mov	r8, r0
   27e90:	e1a07003 	mov	r7, r3
   27e94:	23a0a001 	movcs	sl, #1
   27e98:	3a000023 	bcc	27f2c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xb0>
   27e9c:	e00a0a96 	mul	sl, r6, sl
   27ea0:	e1a00005 	mov	r0, r5
   27ea4:	e1a0100a 	mov	r1, sl
   27ea8:	eb004f96 	bl	3bd08 <__udivsi3>
   27eac:	e1500006 	cmp	r0, r6
   27eb0:	e1a04000 	mov	r4, r0
   27eb4:	2afffff8 	bcs	27e9c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
   27eb8:	e3570000 	cmp	r7, #0
   27ebc:	13a09037 	movne	r9, #55	; 0x37
   27ec0:	03a09057 	moveq	r9, #87	; 0x57
   27ec4:	e1a07008 	mov	r7, r8
   27ec8:	ea000003 	b	27edc <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
   27ecc:	e1a01000 	mov	r1, r0
   27ed0:	e1a00005 	mov	r0, r5
   27ed4:	eb004f8b 	bl	3bd08 <__udivsi3>
   27ed8:	e1a04000 	mov	r4, r0
   27edc:	e1a00005 	mov	r0, r5
   27ee0:	e1a0100a 	mov	r1, sl
   27ee4:	eb005002 	bl	3bef4 <__aeabi_uidivmod>
   27ee8:	e3540009 	cmp	r4, #9
   27eec:	e2840030 	add	r0, r4, #48	; 0x30
   27ef0:	80894004 	addhi	r4, r9, r4
   27ef4:	96af4070 	sxtbls	r4, r0
   27ef8:	86af4074 	sxtbhi	r4, r4
   27efc:	e1a0000a 	mov	r0, sl
   27f00:	e1a05001 	mov	r5, r1
   27f04:	e4c74001 	strb	r4, [r7], #1
   27f08:	e1a01006 	mov	r1, r6
   27f0c:	eb004f7d 	bl	3bd08 <__udivsi3>
   27f10:	e15a0006 	cmp	sl, r6
   27f14:	e1a0a000 	mov	sl, r0
   27f18:	2affffeb 	bcs	27ecc <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
   27f1c:	e3a03000 	mov	r3, #0
   27f20:	e1a00008 	mov	r0, r8
   27f24:	e5c73000 	strb	r3, [r7]
   27f28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27f2c:	e1a04001 	mov	r4, r1
   27f30:	e3a0a001 	mov	sl, #1
   27f34:	eaffffdf 	b	27eb8 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

00027f38 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
   27f38:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27f3c:	e3a0b000 	mov	fp, #0
   27f40:	e1a08002 	mov	r8, r2
   27f44:	e24dd01c 	sub	sp, sp, #28
   27f48:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
   27f4c:	e15b0003 	cmp	fp, r3
   27f50:	e1a09003 	mov	r9, r3
   27f54:	e5dd3044 	ldrb	r3, [sp, #68]	; 0x44
   27f58:	01520008 	cmpeq	r2, r8
   27f5c:	e1a0a002 	mov	sl, r2
   27f60:	93a06001 	movls	r6, #1
   27f64:	93a07000 	movls	r7, #0
   27f68:	e58d0014 	str	r0, [sp, #20]
   27f6c:	e58d3004 	str	r3, [sp, #4]
   27f70:	8a000041 	bhi	2807c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x144>
   27f74:	e0030b96 	mul	r3, r6, fp
   27f78:	e023379a 	mla	r3, sl, r7, r3
   27f7c:	e0876a96 	umull	r6, r7, r6, sl
   27f80:	e0837007 	add	r7, r3, r7
   27f84:	e1a02006 	mov	r2, r6
   27f88:	e1a03007 	mov	r3, r7
   27f8c:	e1a00008 	mov	r0, r8
   27f90:	e1a01009 	mov	r1, r9
   27f94:	eb0050a4 	bl	3c22c <__aeabi_uldivmod>
   27f98:	e15b0001 	cmp	fp, r1
   27f9c:	015a0000 	cmpeq	sl, r0
   27fa0:	e1a04000 	mov	r4, r0
   27fa4:	e1a05001 	mov	r5, r1
   27fa8:	9afffff1 	bls	27f74 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x3c>
   27fac:	e59d3004 	ldr	r3, [sp, #4]
   27fb0:	e3530000 	cmp	r3, #0
   27fb4:	13a03037 	movne	r3, #55	; 0x37
   27fb8:	03a03057 	moveq	r3, #87	; 0x57
   27fbc:	e58d3010 	str	r3, [sp, #16]
   27fc0:	e59d3014 	ldr	r3, [sp, #20]
   27fc4:	e58d3004 	str	r3, [sp, #4]
   27fc8:	ea00000a 	b	27ff8 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0xc0>
   27fcc:	e58d000c 	str	r0, [sp, #12]
   27fd0:	e58d1008 	str	r1, [sp, #8]
   27fd4:	e1a00008 	mov	r0, r8
   27fd8:	e1a01009 	mov	r1, r9
   27fdc:	eb005092 	bl	3c22c <__aeabi_uldivmod>
   27fe0:	e59d200c 	ldr	r2, [sp, #12]
   27fe4:	e59d3008 	ldr	r3, [sp, #8]
   27fe8:	e1a04000 	mov	r4, r0
   27fec:	e1a06002 	mov	r6, r2
   27ff0:	e1a05001 	mov	r5, r1
   27ff4:	e1a07003 	mov	r7, r3
   27ff8:	e1a00008 	mov	r0, r8
   27ffc:	e1a01009 	mov	r1, r9
   28000:	e1a02006 	mov	r2, r6
   28004:	e1a03007 	mov	r3, r7
   28008:	eb005087 	bl	3c22c <__aeabi_uldivmod>
   2800c:	e3550000 	cmp	r5, #0
   28010:	03540009 	cmpeq	r4, #9
   28014:	e1a09003 	mov	r9, r3
   28018:	859d3010 	ldrhi	r3, [sp, #16]
   2801c:	e1a08002 	mov	r8, r2
   28020:	e2842030 	add	r2, r4, #48	; 0x30
   28024:	80834004 	addhi	r4, r3, r4
   28028:	e59d3004 	ldr	r3, [sp, #4]
   2802c:	96af4072 	sxtbls	r4, r2
   28030:	86af4074 	sxtbhi	r4, r4
   28034:	e4c34001 	strb	r4, [r3], #1
   28038:	e1a0200a 	mov	r2, sl
   2803c:	e58d3004 	str	r3, [sp, #4]
   28040:	e1a00006 	mov	r0, r6
   28044:	e1a0300b 	mov	r3, fp
   28048:	e1a01007 	mov	r1, r7
   2804c:	eb005076 	bl	3c22c <__aeabi_uldivmod>
   28050:	e15b0007 	cmp	fp, r7
   28054:	015a0006 	cmpeq	sl, r6
   28058:	e1a02000 	mov	r2, r0
   2805c:	e1a03001 	mov	r3, r1
   28060:	9affffd9 	bls	27fcc <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x94>
   28064:	e3a03000 	mov	r3, #0
   28068:	e59d0014 	ldr	r0, [sp, #20]
   2806c:	e59d2004 	ldr	r2, [sp, #4]
   28070:	e5c23000 	strb	r3, [r2]
   28074:	e28dd01c 	add	sp, sp, #28
   28078:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2807c:	e1a04008 	mov	r4, r8
   28080:	e1a05009 	mov	r5, r9
   28084:	e3a06001 	mov	r6, #1
   28088:	e3a07000 	mov	r7, #0
   2808c:	eaffffc6 	b	27fac <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x74>

00028090 <CString::ftoa(char*, double, unsigned int)>:
   28090:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28094:	ed2d8b02 	vpush	{d8}
   28098:	ec432b18 	vmov	d8, r2, r3
   2809c:	eeb58bc0 	vcmpe.f64	d8, #0.0
   280a0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   280a4:	ed9f7b97 	vldr	d7, [pc, #604]	; 28308 <CString::ftoa(char*, double, unsigned int)+0x278>
   280a8:	4eb18b48 	vnegmi.f64	d8, d8
   280ac:	43a0302d 	movmi	r3, #45	; 0x2d
   280b0:	e1a0a000 	mov	sl, r0
   280b4:	eeb48bc7 	vcmpe.f64	d8, d7
   280b8:	44ca3001 	strbmi	r3, [sl], #1
   280bc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   280c0:	e1a09000 	mov	r9, r0
   280c4:	e24dd01c 	sub	sp, sp, #28
   280c8:	ca00007e 	bgt	282c8 <CString::ftoa(char*, double, unsigned int)+0x238>
   280cc:	eefc7bc8 	vcvt.u32.f64	s15, d8
   280d0:	ee177a90 	vmov	r7, s15
   280d4:	e3570009 	cmp	r7, #9
   280d8:	83a04001 	movhi	r4, #1
   280dc:	9a000080 	bls	282e4 <CString::ftoa(char*, double, unsigned int)+0x254>
   280e0:	e0844104 	add	r4, r4, r4, lsl #2
   280e4:	e1a04084 	lsl	r4, r4, #1
   280e8:	e1a01004 	mov	r1, r4
   280ec:	e1a00007 	mov	r0, r7
   280f0:	eb004f04 	bl	3bd08 <__udivsi3>
   280f4:	e3500009 	cmp	r0, #9
   280f8:	e1a05000 	mov	r5, r0
   280fc:	8afffff7 	bhi	280e0 <CString::ftoa(char*, double, unsigned int)+0x50>
   28100:	e1a0600a 	mov	r6, sl
   28104:	e1a0b007 	mov	fp, r7
   28108:	e59f8208 	ldr	r8, [pc, #520]	; 28318 <CString::ftoa(char*, double, unsigned int)+0x288>
   2810c:	ea000003 	b	28120 <CString::ftoa(char*, double, unsigned int)+0x90>
   28110:	e1a01004 	mov	r1, r4
   28114:	e1a0000b 	mov	r0, fp
   28118:	eb004efa 	bl	3bd08 <__udivsi3>
   2811c:	e1a05000 	mov	r5, r0
   28120:	e1a0000b 	mov	r0, fp
   28124:	e1a01004 	mov	r1, r4
   28128:	eb004f71 	bl	3bef4 <__aeabi_uidivmod>
   2812c:	e1a0b001 	mov	fp, r1
   28130:	e0813498 	umull	r3, r1, r8, r4
   28134:	e3550009 	cmp	r5, #9
   28138:	e2850030 	add	r0, r5, #48	; 0x30
   2813c:	82855057 	addhi	r5, r5, #87	; 0x57
   28140:	96af5070 	sxtbls	r5, r0
   28144:	86af5075 	sxtbhi	r5, r5
   28148:	e3540009 	cmp	r4, #9
   2814c:	e4c65001 	strb	r5, [r6], #1
   28150:	e1a041a1 	lsr	r4, r1, #3
   28154:	8affffed 	bhi	28110 <CString::ftoa(char*, double, unsigned int)+0x80>
   28158:	e3a03000 	mov	r3, #0
   2815c:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   28160:	e5c63000 	strb	r3, [r6]
   28164:	e1520003 	cmp	r2, r3
   28168:	1a000003 	bne	2817c <CString::ftoa(char*, double, unsigned int)+0xec>
   2816c:	e1a00009 	mov	r0, r9
   28170:	e28dd01c 	add	sp, sp, #28
   28174:	ecbd8b02 	vpop	{d8}
   28178:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2817c:	e1a0000a 	mov	r0, sl
   28180:	eb000791 	bl	29fcc <strlen>
   28184:	e3a0302e 	mov	r3, #46	; 0x2e
   28188:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   2818c:	e7ca3000 	strb	r3, [sl, r0]
   28190:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
   28194:	e3520009 	cmp	r2, #9
   28198:	e08a2000 	add	r2, sl, r0
   2819c:	31a0a003 	movcc	sl, r3
   281a0:	23a0a009 	movcs	sl, #9
   281a4:	e3530001 	cmp	r3, #1
   281a8:	e58d2004 	str	r2, [sp, #4]
   281ac:	e282b001 	add	fp, r2, #1
   281b0:	9a000051 	bls	282fc <CString::ftoa(char*, double, unsigned int)+0x26c>
   281b4:	e3a02002 	mov	r2, #2
   281b8:	e3a0300a 	mov	r3, #10
   281bc:	e2822001 	add	r2, r2, #1
   281c0:	e0833103 	add	r3, r3, r3, lsl #2
   281c4:	e152000a 	cmp	r2, sl
   281c8:	e1a03083 	lsl	r3, r3, #1
   281cc:	9afffffa 	bls	281bc <CString::ftoa(char*, double, unsigned int)+0x12c>
   281d0:	ee073a90 	vmov	s15, r3
   281d4:	eeb87b67 	vcvt.f64.u32	d7, s15
   281d8:	ee067a90 	vmov	s13, r7
   281dc:	eeb86b66 	vcvt.f64.u32	d6, s13
   281e0:	ee386b46 	vsub.f64	d6, d8, d6
   281e4:	ee267b07 	vmul.f64	d7, d6, d7
   281e8:	eefc7bc7 	vcvt.u32.f64	s15, d7
   281ec:	ee178a90 	vmov	r8, s15
   281f0:	e3580009 	cmp	r8, #9
   281f4:	83a04001 	movhi	r4, #1
   281f8:	9a00003c 	bls	282f0 <CString::ftoa(char*, double, unsigned int)+0x260>
   281fc:	e0844104 	add	r4, r4, r4, lsl #2
   28200:	e1a04084 	lsl	r4, r4, #1
   28204:	e1a01004 	mov	r1, r4
   28208:	e1a00008 	mov	r0, r8
   2820c:	eb004ebd 	bl	3bd08 <__udivsi3>
   28210:	e3500009 	cmp	r0, #9
   28214:	e1a05000 	mov	r5, r0
   28218:	8afffff7 	bhi	281fc <CString::ftoa(char*, double, unsigned int)+0x16c>
   2821c:	e59f70f4 	ldr	r7, [pc, #244]	; 28318 <CString::ftoa(char*, double, unsigned int)+0x288>
   28220:	e28d600c 	add	r6, sp, #12
   28224:	ea000003 	b	28238 <CString::ftoa(char*, double, unsigned int)+0x1a8>
   28228:	e1a01004 	mov	r1, r4
   2822c:	e1a00008 	mov	r0, r8
   28230:	eb004eb4 	bl	3bd08 <__udivsi3>
   28234:	e1a05000 	mov	r5, r0
   28238:	e1a00008 	mov	r0, r8
   2823c:	e1a01004 	mov	r1, r4
   28240:	eb004f2b 	bl	3bef4 <__aeabi_uidivmod>
   28244:	e3550009 	cmp	r5, #9
   28248:	e2853030 	add	r3, r5, #48	; 0x30
   2824c:	96af5073 	sxtbls	r5, r3
   28250:	e1a08001 	mov	r8, r1
   28254:	e0813497 	umull	r3, r1, r7, r4
   28258:	82855057 	addhi	r5, r5, #87	; 0x57
   2825c:	86af5075 	sxtbhi	r5, r5
   28260:	e3540009 	cmp	r4, #9
   28264:	e4c65001 	strb	r5, [r6], #1
   28268:	e1a041a1 	lsr	r4, r1, #3
   2826c:	8affffed 	bhi	28228 <CString::ftoa(char*, double, unsigned int)+0x198>
   28270:	e3a03000 	mov	r3, #0
   28274:	e28d000c 	add	r0, sp, #12
   28278:	e5c63000 	strb	r3, [r6]
   2827c:	eb000752 	bl	29fcc <strlen>
   28280:	e05a0000 	subs	r0, sl, r0
   28284:	0a000008 	beq	282ac <CString::ftoa(char*, double, unsigned int)+0x21c>
   28288:	e1a0300b 	mov	r3, fp
   2828c:	e3a02030 	mov	r2, #48	; 0x30
   28290:	e59dc004 	ldr	ip, [sp, #4]
   28294:	e2801001 	add	r1, r0, #1
   28298:	e08c8001 	add	r8, ip, r1
   2829c:	e4c32001 	strb	r2, [r3], #1
   282a0:	e1530008 	cmp	r3, r8
   282a4:	1afffffc 	bne	2829c <CString::ftoa(char*, double, unsigned int)+0x20c>
   282a8:	e08bb000 	add	fp, fp, r0
   282ac:	e1a0000b 	mov	r0, fp
   282b0:	e28d100c 	add	r1, sp, #12
   282b4:	eb0007e8 	bl	2a25c <strcpy>
   282b8:	e1a00009 	mov	r0, r9
   282bc:	e28dd01c 	add	sp, sp, #28
   282c0:	ecbd8b02 	vpop	{d8}
   282c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   282c8:	e1a0000a 	mov	r0, sl
   282cc:	e59f1048 	ldr	r1, [pc, #72]	; 2831c <CString::ftoa(char*, double, unsigned int)+0x28c>
   282d0:	eb0007e1 	bl	2a25c <strcpy>
   282d4:	e1a00009 	mov	r0, r9
   282d8:	e28dd01c 	add	sp, sp, #28
   282dc:	ecbd8b02 	vpop	{d8}
   282e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   282e4:	ee175a90 	vmov	r5, s15
   282e8:	e3a04001 	mov	r4, #1
   282ec:	eaffff83 	b	28100 <CString::ftoa(char*, double, unsigned int)+0x70>
   282f0:	ee175a90 	vmov	r5, s15
   282f4:	e3a04001 	mov	r4, #1
   282f8:	eaffffc7 	b	2821c <CString::ftoa(char*, double, unsigned int)+0x18c>
   282fc:	ed9f7b03 	vldr	d7, [pc, #12]	; 28310 <CString::ftoa(char*, double, unsigned int)+0x280>
   28300:	eaffffb4 	b	281d8 <CString::ftoa(char*, double, unsigned int)+0x148>
   28304:	e320f000 	nop	{0}
   28308:	ffe00000 	.word	0xffe00000
   2830c:	41efffff 	.word	0x41efffff
   28310:	00000000 	.word	0x00000000
   28314:	40240000 	.word	0x40240000
   28318:	cccccccd 	.word	0xcccccccd
   2831c:	00043abc 	.word	0x00043abc

00028320 <CString::FormatV(char const*, std::__va_list)>:
   28320:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28324:	ed2d8b02 	vpush	{d8}
   28328:	e24dd06c 	sub	sp, sp, #108	; 0x6c
   2832c:	e58d0030 	str	r0, [sp, #48]	; 0x30
   28330:	e5900004 	ldr	r0, [r0, #4]
   28334:	e1a0b001 	mov	fp, r1
   28338:	e3500000 	cmp	r0, #0
   2833c:	e58d2020 	str	r2, [sp, #32]
   28340:	0a000000 	beq	28348 <CString::FormatV(char const*, std::__va_list)+0x28>
   28344:	eb000b0e 	bl	2af84 <operator delete[](void*)>
   28348:	e3a00040 	mov	r0, #64	; 0x40
   2834c:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   28350:	e5850008 	str	r0, [r5, #8]
   28354:	eb000b03 	bl	2af68 <operator new[](unsigned int)>
   28358:	e5850004 	str	r0, [r5, #4]
   2835c:	e585000c 	str	r0, [r5, #12]
   28360:	e1db40d0 	ldrsb	r4, [fp]
   28364:	e3540000 	cmp	r4, #0
   28368:	0a00006b 	beq	2851c <CString::FormatV(char const*, std::__va_list)+0x1fc>
   2836c:	e3540025 	cmp	r4, #37	; 0x25
   28370:	1a00005c 	bne	284e8 <CString::FormatV(char const*, std::__va_list)+0x1c8>
   28374:	e1db30d1 	ldrsb	r3, [fp, #1]
   28378:	e3530025 	cmp	r3, #37	; 0x25
   2837c:	0a00006b 	beq	28530 <CString::FormatV(char const*, std::__va_list)+0x210>
   28380:	e3530023 	cmp	r3, #35	; 0x23
   28384:	01db30d2 	ldrsbeq	r3, [fp, #2]
   28388:	13a01000 	movne	r1, #0
   2838c:	028bb002 	addeq	fp, fp, #2
   28390:	03a01001 	moveq	r1, #1
   28394:	128bb001 	addne	fp, fp, #1
   28398:	e353002d 	cmp	r3, #45	; 0x2d
   2839c:	03a02001 	moveq	r2, #1
   283a0:	13a02000 	movne	r2, #0
   283a4:	01db30d1 	ldrsbeq	r3, [fp, #1]
   283a8:	058d2024 	streq	r2, [sp, #36]	; 0x24
   283ac:	008bb002 	addeq	fp, fp, r2
   283b0:	158d2024 	strne	r2, [sp, #36]	; 0x24
   283b4:	e3530030 	cmp	r3, #48	; 0x30
   283b8:	03a02001 	moveq	r2, #1
   283bc:	13a02000 	movne	r2, #0
   283c0:	01db30d1 	ldrsbeq	r3, [fp, #1]
   283c4:	058d2028 	streq	r2, [sp, #40]	; 0x28
   283c8:	008bb002 	addeq	fp, fp, r2
   283cc:	158d2028 	strne	r2, [sp, #40]	; 0x28
   283d0:	e2432030 	sub	r2, r3, #48	; 0x30
   283d4:	e6ef2072 	uxtb	r2, r2
   283d8:	e3520009 	cmp	r2, #9
   283dc:	e3a04000 	mov	r4, #0
   283e0:	8a000007 	bhi	28404 <CString::FormatV(char const*, std::__va_list)+0xe4>
   283e4:	e0844104 	add	r4, r4, r4, lsl #2
   283e8:	e0834084 	add	r4, r3, r4, lsl #1
   283ec:	e1fb30d1 	ldrsb	r3, [fp, #1]!
   283f0:	e2444030 	sub	r4, r4, #48	; 0x30
   283f4:	e2432030 	sub	r2, r3, #48	; 0x30
   283f8:	e6ef2072 	uxtb	r2, r2
   283fc:	e3520009 	cmp	r2, #9
   28400:	9afffff7 	bls	283e4 <CString::FormatV(char const*, std::__va_list)+0xc4>
   28404:	e353002e 	cmp	r3, #46	; 0x2e
   28408:	0a000051 	beq	28554 <CString::FormatV(char const*, std::__va_list)+0x234>
   2840c:	e3a00006 	mov	r0, #6
   28410:	e1dba0d0 	ldrsb	sl, [fp]
   28414:	e35a006c 	cmp	sl, #108	; 0x6c
   28418:	13a03000 	movne	r3, #0
   2841c:	11a06003 	movne	r6, r3
   28420:	158d300c 	strne	r3, [sp, #12]
   28424:	1a00000a 	bne	28454 <CString::FormatV(char const*, std::__va_list)+0x134>
   28428:	e1dba0d1 	ldrsb	sl, [fp, #1]
   2842c:	e35a006c 	cmp	sl, #108	; 0x6c
   28430:	03a03001 	moveq	r3, #1
   28434:	13a03000 	movne	r3, #0
   28438:	03a06000 	moveq	r6, #0
   2843c:	13a06001 	movne	r6, #1
   28440:	01dba0d2 	ldrsbeq	sl, [fp, #2]
   28444:	008bb003 	addeq	fp, fp, r3
   28448:	058d300c 	streq	r3, [sp, #12]
   2844c:	158d300c 	strne	r3, [sp, #12]
   28450:	e28bb001 	add	fp, fp, #1
   28454:	e24a3058 	sub	r3, sl, #88	; 0x58
   28458:	e3530020 	cmp	r3, #32
   2845c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   28460:	ea00004b 	b	28594 <CString::FormatV(char const*, std::__va_list)+0x274>
   28464:	000285c4 	.word	0x000285c4
   28468:	00028594 	.word	0x00028594
   2846c:	00028594 	.word	0x00028594
   28470:	00028594 	.word	0x00028594
   28474:	00028594 	.word	0x00028594
   28478:	00028594 	.word	0x00028594
   2847c:	00028594 	.word	0x00028594
   28480:	00028594 	.word	0x00028594
   28484:	00028594 	.word	0x00028594
   28488:	00028594 	.word	0x00028594
   2848c:	00028594 	.word	0x00028594
   28490:	00028ad0 	.word	0x00028ad0
   28494:	000287b0 	.word	0x000287b0
   28498:	00028594 	.word	0x00028594
   2849c:	00028b14 	.word	0x00028b14
   284a0:	00028594 	.word	0x00028594
   284a4:	00028594 	.word	0x00028594
   284a8:	000287b0 	.word	0x000287b0
   284ac:	00028594 	.word	0x00028594
   284b0:	00028594 	.word	0x00028594
   284b4:	00028594 	.word	0x00028594
   284b8:	00028594 	.word	0x00028594
   284bc:	00028594 	.word	0x00028594
   284c0:	000289d8 	.word	0x000289d8
   284c4:	000285c4 	.word	0x000285c4
   284c8:	00028594 	.word	0x00028594
   284cc:	00028594 	.word	0x00028594
   284d0:	0002899c 	.word	0x0002899c
   284d4:	00028594 	.word	0x00028594
   284d8:	00028d58 	.word	0x00028d58
   284dc:	00028594 	.word	0x00028594
   284e0:	00028594 	.word	0x00028594
   284e4:	000285c4 	.word	0x000285c4
   284e8:	e3a01001 	mov	r1, #1
   284ec:	e1a00005 	mov	r0, r5
   284f0:	ebfffd4d 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   284f4:	e595300c 	ldr	r3, [r5, #12]
   284f8:	e2832001 	add	r2, r3, #1
   284fc:	e585200c 	str	r2, [r5, #12]
   28500:	e5c34000 	strb	r4, [r3]
   28504:	e28bb001 	add	fp, fp, #1
   28508:	e1db40d0 	ldrsb	r4, [fp]
   2850c:	e3540000 	cmp	r4, #0
   28510:	1affff95 	bne	2836c <CString::FormatV(char const*, std::__va_list)+0x4c>
   28514:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   28518:	e593000c 	ldr	r0, [r3, #12]
   2851c:	e3a03000 	mov	r3, #0
   28520:	e5c03000 	strb	r3, [r0]
   28524:	e28dd06c 	add	sp, sp, #108	; 0x6c
   28528:	ecbd8b02 	vpop	{d8}
   2852c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28530:	e3a01001 	mov	r1, #1
   28534:	e1a00005 	mov	r0, r5
   28538:	ebfffd3b 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2853c:	e595300c 	ldr	r3, [r5, #12]
   28540:	e28bb002 	add	fp, fp, #2
   28544:	e2832001 	add	r2, r3, #1
   28548:	e585200c 	str	r2, [r5, #12]
   2854c:	e5c34000 	strb	r4, [r3]
   28550:	eaffffec 	b	28508 <CString::FormatV(char const*, std::__va_list)+0x1e8>
   28554:	e1dba0d1 	ldrsb	sl, [fp, #1]
   28558:	e3a00000 	mov	r0, #0
   2855c:	e24a3030 	sub	r3, sl, #48	; 0x30
   28560:	e6ef3073 	uxtb	r3, r3
   28564:	e3530009 	cmp	r3, #9
   28568:	e28bb001 	add	fp, fp, #1
   2856c:	8affffa8 	bhi	28414 <CString::FormatV(char const*, std::__va_list)+0xf4>
   28570:	e0800100 	add	r0, r0, r0, lsl #2
   28574:	e08a0080 	add	r0, sl, r0, lsl #1
   28578:	e1fba0d1 	ldrsb	sl, [fp, #1]!
   2857c:	e2400030 	sub	r0, r0, #48	; 0x30
   28580:	e24a3030 	sub	r3, sl, #48	; 0x30
   28584:	e6ef3073 	uxtb	r3, r3
   28588:	e3530009 	cmp	r3, #9
   2858c:	9afffff7 	bls	28570 <CString::FormatV(char const*, std::__va_list)+0x250>
   28590:	eaffff9f 	b	28414 <CString::FormatV(char const*, std::__va_list)+0xf4>
   28594:	e3a01001 	mov	r1, #1
   28598:	e1a00005 	mov	r0, r5
   2859c:	ebfffd22 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   285a0:	e3a01001 	mov	r1, #1
   285a4:	e3a02025 	mov	r2, #37	; 0x25
   285a8:	e595300c 	ldr	r3, [r5, #12]
   285ac:	e0830001 	add	r0, r3, r1
   285b0:	e585000c 	str	r0, [r5, #12]
   285b4:	e5c32000 	strb	r2, [r3]
   285b8:	e1a00005 	mov	r0, r5
   285bc:	e1db40d0 	ldrsb	r4, [fp]
   285c0:	eaffffca 	b	284f0 <CString::FormatV(char const*, std::__va_list)+0x1d0>
   285c4:	e3510000 	cmp	r1, #0
   285c8:	03a08010 	moveq	r8, #16
   285cc:	0a000007 	beq	285f0 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   285d0:	e3a08010 	mov	r8, #16
   285d4:	e59f39d4 	ldr	r3, [pc, #2516]	; 28fb0 <CString::FormatV(char const*, std::__va_list)+0xc90>
   285d8:	e35a0058 	cmp	sl, #88	; 0x58
   285dc:	e59f19d0 	ldr	r1, [pc, #2512]	; 28fb4 <CString::FormatV(char const*, std::__va_list)+0xc94>
   285e0:	e1a00005 	mov	r0, r5
   285e4:	01a01003 	moveq	r1, r3
   285e8:	ebfffdb7 	bl	27ccc <CString::PutString(char const*)>
   285ec:	e1dba0d0 	ldrsb	sl, [fp]
   285f0:	e59d300c 	ldr	r3, [sp, #12]
   285f4:	e3530000 	cmp	r3, #0
   285f8:	0a000106 	beq	28a18 <CString::FormatV(char const*, std::__va_list)+0x6f8>
   285fc:	e3a01000 	mov	r1, #0
   28600:	e1a00008 	mov	r0, r8
   28604:	e59d3020 	ldr	r3, [sp, #32]
   28608:	e1cd01f8 	strd	r0, [sp, #24]
   2860c:	e2833007 	add	r3, r3, #7
   28610:	e3c3c007 	bic	ip, r3, #7
   28614:	e0cc20d8 	ldrd	r2, [ip], #8
   28618:	e1530001 	cmp	r3, r1
   2861c:	01520008 	cmpeq	r2, r8
   28620:	e1cd21f0 	strd	r2, [sp, #16]
   28624:	e58dc020 	str	ip, [sp, #32]
   28628:	3a00023b 	bcc	28f1c <CString::FormatV(char const*, std::__va_list)+0xbfc>
   2862c:	e58da00c 	str	sl, [sp, #12]
   28630:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   28634:	e58d5034 	str	r5, [sp, #52]	; 0x34
   28638:	e58db038 	str	fp, [sp, #56]	; 0x38
   2863c:	e3a08001 	mov	r8, #1
   28640:	e3a09000 	mov	r9, #0
   28644:	e1a04000 	mov	r4, r0
   28648:	e1a05001 	mov	r5, r1
   2864c:	e1a0a002 	mov	sl, r2
   28650:	e1a0b003 	mov	fp, r3
   28654:	e0030598 	mul	r3, r8, r5
   28658:	e0233994 	mla	r3, r4, r9, r3
   2865c:	e0898498 	umull	r8, r9, r8, r4
   28660:	e0839009 	add	r9, r3, r9
   28664:	e1a02008 	mov	r2, r8
   28668:	e1a03009 	mov	r3, r9
   2866c:	e1a0000a 	mov	r0, sl
   28670:	e1a0100b 	mov	r1, fp
   28674:	eb004eec 	bl	3c22c <__aeabi_uldivmod>
   28678:	e1510005 	cmp	r1, r5
   2867c:	01500004 	cmpeq	r0, r4
   28680:	e1a06000 	mov	r6, r0
   28684:	e1a07001 	mov	r7, r1
   28688:	2afffff1 	bcs	28654 <CString::FormatV(char const*, std::__va_list)+0x334>
   2868c:	e59da00c 	ldr	sl, [sp, #12]
   28690:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   28694:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   28698:	e59db038 	ldr	fp, [sp, #56]	; 0x38
   2869c:	e35a0058 	cmp	sl, #88	; 0x58
   286a0:	13a03057 	movne	r3, #87	; 0x57
   286a4:	03a03037 	moveq	r3, #55	; 0x37
   286a8:	e28da044 	add	sl, sp, #68	; 0x44
   286ac:	ee08aa10 	vmov	s16, sl
   286b0:	e58d4034 	str	r4, [sp, #52]	; 0x34
   286b4:	e58da00c 	str	sl, [sp, #12]
   286b8:	e58d5038 	str	r5, [sp, #56]	; 0x38
   286bc:	e58db03c 	str	fp, [sp, #60]	; 0x3c
   286c0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   286c4:	e1cd41d0 	ldrd	r4, [sp, #16]
   286c8:	e1cda1d8 	ldrd	sl, [sp, #24]
   286cc:	ea00000a 	b	286fc <CString::FormatV(char const*, std::__va_list)+0x3dc>
   286d0:	e58d0018 	str	r0, [sp, #24]
   286d4:	e58d1010 	str	r1, [sp, #16]
   286d8:	e1a00004 	mov	r0, r4
   286dc:	e1a01005 	mov	r1, r5
   286e0:	eb004ed1 	bl	3c22c <__aeabi_uldivmod>
   286e4:	e59d2018 	ldr	r2, [sp, #24]
   286e8:	e59d3010 	ldr	r3, [sp, #16]
   286ec:	e1a06000 	mov	r6, r0
   286f0:	e1a08002 	mov	r8, r2
   286f4:	e1a07001 	mov	r7, r1
   286f8:	e1a09003 	mov	r9, r3
   286fc:	e1a00004 	mov	r0, r4
   28700:	e1a01005 	mov	r1, r5
   28704:	e1a02008 	mov	r2, r8
   28708:	e1a03009 	mov	r3, r9
   2870c:	eb004ec6 	bl	3c22c <__aeabi_uldivmod>
   28710:	e3570000 	cmp	r7, #0
   28714:	03560009 	cmpeq	r6, #9
   28718:	e1a05003 	mov	r5, r3
   2871c:	859d302c 	ldrhi	r3, [sp, #44]	; 0x2c
   28720:	e59dc00c 	ldr	ip, [sp, #12]
   28724:	e1a04002 	mov	r4, r2
   28728:	e2862030 	add	r2, r6, #48	; 0x30
   2872c:	80836006 	addhi	r6, r3, r6
   28730:	96af6072 	sxtbls	r6, r2
   28734:	86af6076 	sxtbhi	r6, r6
   28738:	e1a0200a 	mov	r2, sl
   2873c:	e1a0300b 	mov	r3, fp
   28740:	e4cc6001 	strb	r6, [ip], #1
   28744:	e1a00008 	mov	r0, r8
   28748:	e1a01009 	mov	r1, r9
   2874c:	e58dc00c 	str	ip, [sp, #12]
   28750:	eb004eb5 	bl	3c22c <__aeabi_uldivmod>
   28754:	e159000b 	cmp	r9, fp
   28758:	0158000a 	cmpeq	r8, sl
   2875c:	e1a02000 	mov	r2, r0
   28760:	e1a03001 	mov	r3, r1
   28764:	2affffd9 	bcs	286d0 <CString::FormatV(char const*, std::__va_list)+0x3b0>
   28768:	e3a03000 	mov	r3, #0
   2876c:	e59da00c 	ldr	sl, [sp, #12]
   28770:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
   28774:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
   28778:	e59db03c 	ldr	fp, [sp, #60]	; 0x3c
   2877c:	e5ca3000 	strb	r3, [sl]
   28780:	ee180a10 	vmov	r0, s16
   28784:	eb000610 	bl	29fcc <strlen>
   28788:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2878c:	e1a06000 	mov	r6, r0
   28790:	e3530000 	cmp	r3, #0
   28794:	1a000100 	bne	28b9c <CString::FormatV(char const*, std::__va_list)+0x87c>
   28798:	e1500004 	cmp	r0, r4
   2879c:	3a000111 	bcc	28be8 <CString::FormatV(char const*, std::__va_list)+0x8c8>
   287a0:	ee181a10 	vmov	r1, s16
   287a4:	e1a00005 	mov	r0, r5
   287a8:	ebfffd47 	bl	27ccc <CString::PutString(char const*)>
   287ac:	eaffff54 	b	28504 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   287b0:	e59d300c 	ldr	r3, [sp, #12]
   287b4:	e3530000 	cmp	r3, #0
   287b8:	e59d3020 	ldr	r3, [sp, #32]
   287bc:	0a00013b 	beq	28cb0 <CString::FormatV(char const*, std::__va_list)+0x990>
   287c0:	e2833007 	add	r3, r3, #7
   287c4:	e3c31007 	bic	r1, r3, #7
   287c8:	e0c120d8 	ldrd	r2, [r1], #8
   287cc:	e3520000 	cmp	r2, #0
   287d0:	e1a07003 	mov	r7, r3
   287d4:	e2d33000 	sbcs	r3, r3, #0
   287d8:	a3a03000 	movge	r3, #0
   287dc:	e1a06002 	mov	r6, r2
   287e0:	e58d1020 	str	r1, [sp, #32]
   287e4:	a58d300c 	strge	r3, [sp, #12]
   287e8:	aa000003 	bge	287fc <CString::FormatV(char const*, std::__va_list)+0x4dc>
   287ec:	e2762000 	rsbs	r2, r6, #0
   287f0:	e2e73000 	rsc	r3, r7, #0
   287f4:	e1a06002 	mov	r6, r2
   287f8:	e1a07003 	mov	r7, r3
   287fc:	e356000a 	cmp	r6, #10
   28800:	e2d71000 	sbcs	r1, r7, #0
   28804:	e1a02006 	mov	r2, r6
   28808:	e1a03007 	mov	r3, r7
   2880c:	e1a08006 	mov	r8, r6
   28810:	e1a09007 	mov	r9, r7
   28814:	ba0001da 	blt	28f84 <CString::FormatV(char const*, std::__va_list)+0xc64>
   28818:	e58db010 	str	fp, [sp, #16]
   2881c:	e3a06001 	mov	r6, #1
   28820:	e3a07000 	mov	r7, #0
   28824:	e1a0a002 	mov	sl, r2
   28828:	e1a0b003 	mov	fp, r3
   2882c:	e1a02107 	lsl	r2, r7, #2
   28830:	e1a03106 	lsl	r3, r6, #2
   28834:	e0933006 	adds	r3, r3, r6
   28838:	e1822f26 	orr	r2, r2, r6, lsr #30
   2883c:	e0a22007 	adc	r2, r2, r7
   28840:	e0936003 	adds	r6, r3, r3
   28844:	e0a27002 	adc	r7, r2, r2
   28848:	e1a03007 	mov	r3, r7
   2884c:	e1a02006 	mov	r2, r6
   28850:	e1a0000a 	mov	r0, sl
   28854:	e1a0100b 	mov	r1, fp
   28858:	eb004e73 	bl	3c22c <__aeabi_uldivmod>
   2885c:	e3510000 	cmp	r1, #0
   28860:	03500009 	cmpeq	r0, #9
   28864:	8afffff0 	bhi	2882c <CString::FormatV(char const*, std::__va_list)+0x50c>
   28868:	e59db010 	ldr	fp, [sp, #16]
   2886c:	e28d3044 	add	r3, sp, #68	; 0x44
   28870:	e58d4018 	str	r4, [sp, #24]
   28874:	e58d502c 	str	r5, [sp, #44]	; 0x2c
   28878:	ee083a10 	vmov	s16, r3
   2887c:	e1a0a003 	mov	sl, r3
   28880:	e1a04000 	mov	r4, r0
   28884:	e1a05001 	mov	r5, r1
   28888:	e58db034 	str	fp, [sp, #52]	; 0x34
   2888c:	ea000009 	b	288b8 <CString::FormatV(char const*, std::__va_list)+0x598>
   28890:	e1a03001 	mov	r3, r1
   28894:	e58d0010 	str	r0, [sp, #16]
   28898:	e1a01009 	mov	r1, r9
   2889c:	e1a00008 	mov	r0, r8
   288a0:	eb004e61 	bl	3c22c <__aeabi_uldivmod>
   288a4:	e59d2010 	ldr	r2, [sp, #16]
   288a8:	e1a04000 	mov	r4, r0
   288ac:	e1a06002 	mov	r6, r2
   288b0:	e1a05001 	mov	r5, r1
   288b4:	e1a0700b 	mov	r7, fp
   288b8:	e1a00008 	mov	r0, r8
   288bc:	e1a01009 	mov	r1, r9
   288c0:	e1a02006 	mov	r2, r6
   288c4:	e1a03007 	mov	r3, r7
   288c8:	eb004e57 	bl	3c22c <__aeabi_uldivmod>
   288cc:	e3550000 	cmp	r5, #0
   288d0:	03540009 	cmpeq	r4, #9
   288d4:	e2841030 	add	r1, r4, #48	; 0x30
   288d8:	82844057 	addhi	r4, r4, #87	; 0x57
   288dc:	96af4071 	sxtbls	r4, r1
   288e0:	86af4074 	sxtbhi	r4, r4
   288e4:	e1a08002 	mov	r8, r2
   288e8:	e1a09003 	mov	r9, r3
   288ec:	e3a0200a 	mov	r2, #10
   288f0:	e3a03000 	mov	r3, #0
   288f4:	e1a00006 	mov	r0, r6
   288f8:	e1a01007 	mov	r1, r7
   288fc:	e4ca4001 	strb	r4, [sl], #1
   28900:	eb004e49 	bl	3c22c <__aeabi_uldivmod>
   28904:	e3570000 	cmp	r7, #0
   28908:	03560009 	cmpeq	r6, #9
   2890c:	e1a02000 	mov	r2, r0
   28910:	e1a0b001 	mov	fp, r1
   28914:	8affffdd 	bhi	28890 <CString::FormatV(char const*, std::__va_list)+0x570>
   28918:	e3a03000 	mov	r3, #0
   2891c:	e59d4018 	ldr	r4, [sp, #24]
   28920:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
   28924:	e59db034 	ldr	fp, [sp, #52]	; 0x34
   28928:	e5ca3000 	strb	r3, [sl]
   2892c:	ee180a10 	vmov	r0, s16
   28930:	eb0005a5 	bl	29fcc <strlen>
   28934:	e59d300c 	ldr	r3, [sp, #12]
   28938:	e1a06000 	mov	r6, r0
   2893c:	e3530000 	cmp	r3, #0
   28940:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   28944:	1a0000b8 	bne	28c2c <CString::FormatV(char const*, std::__va_list)+0x90c>
   28948:	e3530000 	cmp	r3, #0
   2894c:	0a00011d 	beq	28dc8 <CString::FormatV(char const*, std::__va_list)+0xaa8>
   28950:	ee181a10 	vmov	r1, s16
   28954:	e1a00005 	mov	r0, r5
   28958:	ebfffcdb 	bl	27ccc <CString::PutString(char const*)>
   2895c:	e1540006 	cmp	r4, r6
   28960:	9afffee7 	bls	28504 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28964:	e0444006 	sub	r4, r4, r6
   28968:	e1a00005 	mov	r0, r5
   2896c:	e1a01004 	mov	r1, r4
   28970:	ebfffc2d 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28974:	e3a00020 	mov	r0, #32
   28978:	e2443001 	sub	r3, r4, #1
   2897c:	e595200c 	ldr	r2, [r5, #12]
   28980:	e2433001 	sub	r3, r3, #1
   28984:	e2821001 	add	r1, r2, #1
   28988:	e3730001 	cmn	r3, #1
   2898c:	e585100c 	str	r1, [r5, #12]
   28990:	e5c20000 	strb	r0, [r2]
   28994:	1afffff8 	bne	2897c <CString::FormatV(char const*, std::__va_list)+0x65c>
   28998:	eafffed9 	b	28504 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   2899c:	e59d7020 	ldr	r7, [sp, #32]
   289a0:	e4978004 	ldr	r8, [r7], #4
   289a4:	e1a00008 	mov	r0, r8
   289a8:	eb000587 	bl	29fcc <strlen>
   289ac:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   289b0:	e1a06000 	mov	r6, r0
   289b4:	e3530000 	cmp	r3, #0
   289b8:	1a000133 	bne	28e8c <CString::FormatV(char const*, std::__va_list)+0xb6c>
   289bc:	e1500004 	cmp	r0, r4
   289c0:	3a000144 	bcc	28ed8 <CString::FormatV(char const*, std::__va_list)+0xbb8>
   289c4:	e1a01008 	mov	r1, r8
   289c8:	e1a00005 	mov	r0, r5
   289cc:	e58d7020 	str	r7, [sp, #32]
   289d0:	ebfffcbd 	bl	27ccc <CString::PutString(char const*)>
   289d4:	eafffeca 	b	28504 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   289d8:	e3510000 	cmp	r1, #0
   289dc:	03a08008 	moveq	r8, #8
   289e0:	0affff02 	beq	285f0 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   289e4:	e3a01001 	mov	r1, #1
   289e8:	e1a00005 	mov	r0, r5
   289ec:	ebfffc0e 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   289f0:	e3a02030 	mov	r2, #48	; 0x30
   289f4:	e595300c 	ldr	r3, [r5, #12]
   289f8:	e3a08008 	mov	r8, #8
   289fc:	e2831001 	add	r1, r3, #1
   28a00:	e585100c 	str	r1, [r5, #12]
   28a04:	e5c32000 	strb	r2, [r3]
   28a08:	e59d300c 	ldr	r3, [sp, #12]
   28a0c:	e1dba0d0 	ldrsb	sl, [fp]
   28a10:	e3530000 	cmp	r3, #0
   28a14:	1afffef8 	bne	285fc <CString::FormatV(char const*, std::__va_list)+0x2dc>
   28a18:	e59d2020 	ldr	r2, [sp, #32]
   28a1c:	e4929004 	ldr	r9, [r2], #4
   28a20:	e1580009 	cmp	r8, r9
   28a24:	e58d2020 	str	r2, [sp, #32]
   28a28:	8a000138 	bhi	28f10 <CString::FormatV(char const*, std::__va_list)+0xbf0>
   28a2c:	e3a07001 	mov	r7, #1
   28a30:	e0070798 	mul	r7, r8, r7
   28a34:	e1a00009 	mov	r0, r9
   28a38:	e1a01007 	mov	r1, r7
   28a3c:	eb004cb1 	bl	3bd08 <__udivsi3>
   28a40:	e1580000 	cmp	r8, r0
   28a44:	9afffff9 	bls	28a30 <CString::FormatV(char const*, std::__va_list)+0x710>
   28a48:	e1a06000 	mov	r6, r0
   28a4c:	e35a0058 	cmp	sl, #88	; 0x58
   28a50:	13a03057 	movne	r3, #87	; 0x57
   28a54:	03a03037 	moveq	r3, #55	; 0x37
   28a58:	e28da044 	add	sl, sp, #68	; 0x44
   28a5c:	e58d400c 	str	r4, [sp, #12]
   28a60:	ee08aa10 	vmov	s16, sl
   28a64:	e1a04007 	mov	r4, r7
   28a68:	e1a07003 	mov	r7, r3
   28a6c:	ea000003 	b	28a80 <CString::FormatV(char const*, std::__va_list)+0x760>
   28a70:	e1a01000 	mov	r1, r0
   28a74:	e1a00009 	mov	r0, r9
   28a78:	eb004ca2 	bl	3bd08 <__udivsi3>
   28a7c:	e1a06000 	mov	r6, r0
   28a80:	e1a00009 	mov	r0, r9
   28a84:	e1a01004 	mov	r1, r4
   28a88:	eb004d19 	bl	3bef4 <__aeabi_uidivmod>
   28a8c:	e3560009 	cmp	r6, #9
   28a90:	e2862030 	add	r2, r6, #48	; 0x30
   28a94:	80876006 	addhi	r6, r7, r6
   28a98:	96af6072 	sxtbls	r6, r2
   28a9c:	86af6076 	sxtbhi	r6, r6
   28aa0:	e1a00004 	mov	r0, r4
   28aa4:	e1a09001 	mov	r9, r1
   28aa8:	e4ca6001 	strb	r6, [sl], #1
   28aac:	e1a01008 	mov	r1, r8
   28ab0:	eb004c94 	bl	3bd08 <__udivsi3>
   28ab4:	e1580004 	cmp	r8, r4
   28ab8:	e1a04000 	mov	r4, r0
   28abc:	9affffeb 	bls	28a70 <CString::FormatV(char const*, std::__va_list)+0x750>
   28ac0:	e3a03000 	mov	r3, #0
   28ac4:	e59d400c 	ldr	r4, [sp, #12]
   28ac8:	e5ca3000 	strb	r3, [sl]
   28acc:	eaffff2b 	b	28780 <CString::FormatV(char const*, std::__va_list)+0x460>
   28ad0:	e59d7020 	ldr	r7, [sp, #32]
   28ad4:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   28ad8:	e4976004 	ldr	r6, [r7], #4
   28adc:	e3530000 	cmp	r3, #0
   28ae0:	e6af6076 	sxtb	r6, r6
   28ae4:	1a0000ca 	bne	28e14 <CString::FormatV(char const*, std::__va_list)+0xaf4>
   28ae8:	e3540001 	cmp	r4, #1
   28aec:	8a00009b 	bhi	28d60 <CString::FormatV(char const*, std::__va_list)+0xa40>
   28af0:	e3a01001 	mov	r1, #1
   28af4:	e1a00005 	mov	r0, r5
   28af8:	ebfffbcb 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28afc:	e595300c 	ldr	r3, [r5, #12]
   28b00:	e58d7020 	str	r7, [sp, #32]
   28b04:	e2832001 	add	r2, r3, #1
   28b08:	e585200c 	str	r2, [r5, #12]
   28b0c:	e5c36000 	strb	r6, [r3]
   28b10:	eafffe7b 	b	28504 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28b14:	e59d3020 	ldr	r3, [sp, #32]
   28b18:	e2833007 	add	r3, r3, #7
   28b1c:	e3c33007 	bic	r3, r3, #7
   28b20:	e1a01003 	mov	r1, r3
   28b24:	e0c120d8 	ldrd	r2, [r1], #8
   28b28:	e58d1020 	str	r1, [sp, #32]
   28b2c:	e28d1044 	add	r1, sp, #68	; 0x44
   28b30:	e1a06001 	mov	r6, r1
   28b34:	e58d0000 	str	r0, [sp]
   28b38:	e1a00001 	mov	r0, r1
   28b3c:	ee081a10 	vmov	s16, r1
   28b40:	ebfffd52 	bl	28090 <CString::ftoa(char*, double, unsigned int)>
   28b44:	e1a00006 	mov	r0, r6
   28b48:	eb00051f 	bl	29fcc <strlen>
   28b4c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   28b50:	e1a06000 	mov	r6, r0
   28b54:	e3530000 	cmp	r3, #0
   28b58:	1a0000b8 	bne	28e40 <CString::FormatV(char const*, std::__va_list)+0xb20>
   28b5c:	e1500004 	cmp	r0, r4
   28b60:	2affff0e 	bcs	287a0 <CString::FormatV(char const*, std::__va_list)+0x480>
   28b64:	e0444000 	sub	r4, r4, r0
   28b68:	e1a01004 	mov	r1, r4
   28b6c:	e1a00005 	mov	r0, r5
   28b70:	ebfffbad 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28b74:	e3a00020 	mov	r0, #32
   28b78:	e2443001 	sub	r3, r4, #1
   28b7c:	e595200c 	ldr	r2, [r5, #12]
   28b80:	e2433001 	sub	r3, r3, #1
   28b84:	e2821001 	add	r1, r2, #1
   28b88:	e3730001 	cmn	r3, #1
   28b8c:	e585100c 	str	r1, [r5, #12]
   28b90:	e5c20000 	strb	r0, [r2]
   28b94:	1afffff8 	bne	28b7c <CString::FormatV(char const*, std::__va_list)+0x85c>
   28b98:	eaffff00 	b	287a0 <CString::FormatV(char const*, std::__va_list)+0x480>
   28b9c:	ee181a10 	vmov	r1, s16
   28ba0:	e1a00005 	mov	r0, r5
   28ba4:	ebfffc48 	bl	27ccc <CString::PutString(char const*)>
   28ba8:	e1560004 	cmp	r6, r4
   28bac:	2afffe54 	bcs	28504 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28bb0:	e0444006 	sub	r4, r4, r6
   28bb4:	e1a00005 	mov	r0, r5
   28bb8:	e1a01004 	mov	r1, r4
   28bbc:	ebfffb9a 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28bc0:	e3a00020 	mov	r0, #32
   28bc4:	e2443001 	sub	r3, r4, #1
   28bc8:	e595200c 	ldr	r2, [r5, #12]
   28bcc:	e2433001 	sub	r3, r3, #1
   28bd0:	e2821001 	add	r1, r2, #1
   28bd4:	e3730001 	cmn	r3, #1
   28bd8:	e585100c 	str	r1, [r5, #12]
   28bdc:	e5c20000 	strb	r0, [r2]
   28be0:	1afffff8 	bne	28bc8 <CString::FormatV(char const*, std::__va_list)+0x8a8>
   28be4:	eafffe46 	b	28504 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28be8:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   28bec:	e0444000 	sub	r4, r4, r0
   28bf0:	e3530000 	cmp	r3, #0
   28bf4:	e1a01004 	mov	r1, r4
   28bf8:	e1a00005 	mov	r0, r5
   28bfc:	13a06030 	movne	r6, #48	; 0x30
   28c00:	03a06020 	moveq	r6, #32
   28c04:	ebfffb88 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28c08:	e2443001 	sub	r3, r4, #1
   28c0c:	e595200c 	ldr	r2, [r5, #12]
   28c10:	e2433001 	sub	r3, r3, #1
   28c14:	e2821001 	add	r1, r2, #1
   28c18:	e3730001 	cmn	r3, #1
   28c1c:	e585100c 	str	r1, [r5, #12]
   28c20:	e5c26000 	strb	r6, [r2]
   28c24:	1afffff8 	bne	28c0c <CString::FormatV(char const*, std::__va_list)+0x8ec>
   28c28:	eafffedc 	b	287a0 <CString::FormatV(char const*, std::__va_list)+0x480>
   28c2c:	e3530000 	cmp	r3, #0
   28c30:	e2806001 	add	r6, r0, #1
   28c34:	1a00005a 	bne	28da4 <CString::FormatV(char const*, std::__va_list)+0xa84>
   28c38:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   28c3c:	e3530000 	cmp	r3, #0
   28c40:	1a0000c6 	bne	28f60 <CString::FormatV(char const*, std::__va_list)+0xc40>
   28c44:	e1540006 	cmp	r4, r6
   28c48:	9a00000f 	bls	28c8c <CString::FormatV(char const*, std::__va_list)+0x96c>
   28c4c:	e0444006 	sub	r4, r4, r6
   28c50:	e1a00005 	mov	r0, r5
   28c54:	e1a01004 	mov	r1, r4
   28c58:	ebfffb73 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28c5c:	e3a00020 	mov	r0, #32
   28c60:	e2443001 	sub	r3, r4, #1
   28c64:	e595200c 	ldr	r2, [r5, #12]
   28c68:	e2433001 	sub	r3, r3, #1
   28c6c:	e2821001 	add	r1, r2, #1
   28c70:	e3730001 	cmn	r3, #1
   28c74:	e585100c 	str	r1, [r5, #12]
   28c78:	e5c20000 	strb	r0, [r2]
   28c7c:	1afffff8 	bne	28c64 <CString::FormatV(char const*, std::__va_list)+0x944>
   28c80:	e59d300c 	ldr	r3, [sp, #12]
   28c84:	e3530000 	cmp	r3, #0
   28c88:	0afffec4 	beq	287a0 <CString::FormatV(char const*, std::__va_list)+0x480>
   28c8c:	e3a01001 	mov	r1, #1
   28c90:	e1a00005 	mov	r0, r5
   28c94:	ebfffb64 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28c98:	e3a0202d 	mov	r2, #45	; 0x2d
   28c9c:	e595300c 	ldr	r3, [r5, #12]
   28ca0:	e2831001 	add	r1, r3, #1
   28ca4:	e585100c 	str	r1, [r5, #12]
   28ca8:	e5c32000 	strb	r2, [r3]
   28cac:	eafffebb 	b	287a0 <CString::FormatV(char const*, std::__va_list)+0x480>
   28cb0:	e4937004 	ldr	r7, [r3], #4
   28cb4:	e3570000 	cmp	r7, #0
   28cb8:	e58d3020 	str	r3, [sp, #32]
   28cbc:	ba000034 	blt	28d94 <CString::FormatV(char const*, std::__va_list)+0xa74>
   28cc0:	e3570009 	cmp	r7, #9
   28cc4:	e1a09007 	mov	r9, r7
   28cc8:	da0000b2 	ble	28f98 <CString::FormatV(char const*, std::__va_list)+0xc78>
   28ccc:	e3a06001 	mov	r6, #1
   28cd0:	e0866106 	add	r6, r6, r6, lsl #2
   28cd4:	e1a06086 	lsl	r6, r6, #1
   28cd8:	e1a01006 	mov	r1, r6
   28cdc:	e1a00007 	mov	r0, r7
   28ce0:	eb004c08 	bl	3bd08 <__udivsi3>
   28ce4:	e3500009 	cmp	r0, #9
   28ce8:	8afffff8 	bhi	28cd0 <CString::FormatV(char const*, std::__va_list)+0x9b0>
   28cec:	e1a08000 	mov	r8, r0
   28cf0:	e28d3044 	add	r3, sp, #68	; 0x44
   28cf4:	ee083a10 	vmov	s16, r3
   28cf8:	e1a07003 	mov	r7, r3
   28cfc:	ea000003 	b	28d10 <CString::FormatV(char const*, std::__va_list)+0x9f0>
   28d00:	e1a01006 	mov	r1, r6
   28d04:	e1a00009 	mov	r0, r9
   28d08:	eb004bfe 	bl	3bd08 <__udivsi3>
   28d0c:	e1a08000 	mov	r8, r0
   28d10:	e1a00009 	mov	r0, r9
   28d14:	e1a01006 	mov	r1, r6
   28d18:	eb004c75 	bl	3bef4 <__aeabi_uidivmod>
   28d1c:	e3580009 	cmp	r8, #9
   28d20:	e2883030 	add	r3, r8, #48	; 0x30
   28d24:	96af8073 	sxtbls	r8, r3
   28d28:	e59f3288 	ldr	r3, [pc, #648]	; 28fb8 <CString::FormatV(char const*, std::__va_list)+0xc98>
   28d2c:	e1a09001 	mov	r9, r1
   28d30:	e0813693 	umull	r3, r1, r3, r6
   28d34:	82888057 	addhi	r8, r8, #87	; 0x57
   28d38:	86af8078 	sxtbhi	r8, r8
   28d3c:	e3560009 	cmp	r6, #9
   28d40:	e4c78001 	strb	r8, [r7], #1
   28d44:	e1a061a1 	lsr	r6, r1, #3
   28d48:	8affffec 	bhi	28d00 <CString::FormatV(char const*, std::__va_list)+0x9e0>
   28d4c:	e3a03000 	mov	r3, #0
   28d50:	e5c73000 	strb	r3, [r7]
   28d54:	eafffef4 	b	2892c <CString::FormatV(char const*, std::__va_list)+0x60c>
   28d58:	e3a0800a 	mov	r8, #10
   28d5c:	eafffe23 	b	285f0 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   28d60:	e2441001 	sub	r1, r4, #1
   28d64:	e1a00005 	mov	r0, r5
   28d68:	ebfffb2f 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28d6c:	e3a01020 	mov	r1, #32
   28d70:	e2444002 	sub	r4, r4, #2
   28d74:	e595300c 	ldr	r3, [r5, #12]
   28d78:	e2444001 	sub	r4, r4, #1
   28d7c:	e2832001 	add	r2, r3, #1
   28d80:	e3740001 	cmn	r4, #1
   28d84:	e585200c 	str	r2, [r5, #12]
   28d88:	e5c31000 	strb	r1, [r3]
   28d8c:	1afffff8 	bne	28d74 <CString::FormatV(char const*, std::__va_list)+0xa54>
   28d90:	eaffff56 	b	28af0 <CString::FormatV(char const*, std::__va_list)+0x7d0>
   28d94:	e3a03001 	mov	r3, #1
   28d98:	e2677000 	rsb	r7, r7, #0
   28d9c:	e58d300c 	str	r3, [sp, #12]
   28da0:	eaffffc6 	b	28cc0 <CString::FormatV(char const*, std::__va_list)+0x9a0>
   28da4:	e3a01001 	mov	r1, #1
   28da8:	e1a00005 	mov	r0, r5
   28dac:	ebfffb1e 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28db0:	e3a0202d 	mov	r2, #45	; 0x2d
   28db4:	e595300c 	ldr	r3, [r5, #12]
   28db8:	e2831001 	add	r1, r3, #1
   28dbc:	e585100c 	str	r1, [r5, #12]
   28dc0:	e5c32000 	strb	r2, [r3]
   28dc4:	eafffee1 	b	28950 <CString::FormatV(char const*, std::__va_list)+0x630>
   28dc8:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   28dcc:	e3530000 	cmp	r3, #0
   28dd0:	0a000073 	beq	28fa4 <CString::FormatV(char const*, std::__va_list)+0xc84>
   28dd4:	e1560004 	cmp	r6, r4
   28dd8:	2afffe70 	bcs	287a0 <CString::FormatV(char const*, std::__va_list)+0x480>
   28ddc:	e0444006 	sub	r4, r4, r6
   28de0:	e1a00005 	mov	r0, r5
   28de4:	e1a01004 	mov	r1, r4
   28de8:	ebfffb0f 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28dec:	e3a00030 	mov	r0, #48	; 0x30
   28df0:	e2443001 	sub	r3, r4, #1
   28df4:	e595200c 	ldr	r2, [r5, #12]
   28df8:	e2433001 	sub	r3, r3, #1
   28dfc:	e2821001 	add	r1, r2, #1
   28e00:	e3730001 	cmn	r3, #1
   28e04:	e585100c 	str	r1, [r5, #12]
   28e08:	e5c20000 	strb	r0, [r2]
   28e0c:	1afffff8 	bne	28df4 <CString::FormatV(char const*, std::__va_list)+0xad4>
   28e10:	eafffe62 	b	287a0 <CString::FormatV(char const*, std::__va_list)+0x480>
   28e14:	e3a01001 	mov	r1, #1
   28e18:	e1a00005 	mov	r0, r5
   28e1c:	ebfffb02 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28e20:	e595300c 	ldr	r3, [r5, #12]
   28e24:	e3540001 	cmp	r4, #1
   28e28:	e2832001 	add	r2, r3, #1
   28e2c:	e585200c 	str	r2, [r5, #12]
   28e30:	e5c36000 	strb	r6, [r3]
   28e34:	8a00003c 	bhi	28f2c <CString::FormatV(char const*, std::__va_list)+0xc0c>
   28e38:	e58d7020 	str	r7, [sp, #32]
   28e3c:	eafffdb0 	b	28504 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28e40:	ee181a10 	vmov	r1, s16
   28e44:	e1a00005 	mov	r0, r5
   28e48:	ebfffb9f 	bl	27ccc <CString::PutString(char const*)>
   28e4c:	e1560004 	cmp	r6, r4
   28e50:	2afffdab 	bcs	28504 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28e54:	e0444006 	sub	r4, r4, r6
   28e58:	e1a00005 	mov	r0, r5
   28e5c:	e1a01004 	mov	r1, r4
   28e60:	ebfffaf1 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28e64:	e3a00020 	mov	r0, #32
   28e68:	e2443001 	sub	r3, r4, #1
   28e6c:	e595200c 	ldr	r2, [r5, #12]
   28e70:	e2433001 	sub	r3, r3, #1
   28e74:	e2821001 	add	r1, r2, #1
   28e78:	e3730001 	cmn	r3, #1
   28e7c:	e585100c 	str	r1, [r5, #12]
   28e80:	e5c20000 	strb	r0, [r2]
   28e84:	1afffff8 	bne	28e6c <CString::FormatV(char const*, std::__va_list)+0xb4c>
   28e88:	eafffd9d 	b	28504 <CString::FormatV(char const*, std::__va_list)+0x1e4>
   28e8c:	e1a01008 	mov	r1, r8
   28e90:	e1a00005 	mov	r0, r5
   28e94:	ebfffb8c 	bl	27ccc <CString::PutString(char const*)>
   28e98:	e1560004 	cmp	r6, r4
   28e9c:	2affffe5 	bcs	28e38 <CString::FormatV(char const*, std::__va_list)+0xb18>
   28ea0:	e0444006 	sub	r4, r4, r6
   28ea4:	e1a00005 	mov	r0, r5
   28ea8:	e1a01004 	mov	r1, r4
   28eac:	ebfffade 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28eb0:	e3a00020 	mov	r0, #32
   28eb4:	e2443001 	sub	r3, r4, #1
   28eb8:	e595200c 	ldr	r2, [r5, #12]
   28ebc:	e2433001 	sub	r3, r3, #1
   28ec0:	e2821001 	add	r1, r2, #1
   28ec4:	e3730001 	cmn	r3, #1
   28ec8:	e585100c 	str	r1, [r5, #12]
   28ecc:	e5c20000 	strb	r0, [r2]
   28ed0:	1afffff8 	bne	28eb8 <CString::FormatV(char const*, std::__va_list)+0xb98>
   28ed4:	eaffffd7 	b	28e38 <CString::FormatV(char const*, std::__va_list)+0xb18>
   28ed8:	e0444000 	sub	r4, r4, r0
   28edc:	e1a01004 	mov	r1, r4
   28ee0:	e1a00005 	mov	r0, r5
   28ee4:	ebfffad0 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28ee8:	e3a00020 	mov	r0, #32
   28eec:	e2443001 	sub	r3, r4, #1
   28ef0:	e595200c 	ldr	r2, [r5, #12]
   28ef4:	e2433001 	sub	r3, r3, #1
   28ef8:	e2821001 	add	r1, r2, #1
   28efc:	e3730001 	cmn	r3, #1
   28f00:	e585100c 	str	r1, [r5, #12]
   28f04:	e5c20000 	strb	r0, [r2]
   28f08:	1afffff8 	bne	28ef0 <CString::FormatV(char const*, std::__va_list)+0xbd0>
   28f0c:	eafffeac 	b	289c4 <CString::FormatV(char const*, std::__va_list)+0x6a4>
   28f10:	e1a06009 	mov	r6, r9
   28f14:	e3a07001 	mov	r7, #1
   28f18:	eafffecb 	b	28a4c <CString::FormatV(char const*, std::__va_list)+0x72c>
   28f1c:	e3a08001 	mov	r8, #1
   28f20:	e1cd61d0 	ldrd	r6, [sp, #16]
   28f24:	e3a09000 	mov	r9, #0
   28f28:	eafffddb 	b	2869c <CString::FormatV(char const*, std::__va_list)+0x37c>
   28f2c:	e2441001 	sub	r1, r4, #1
   28f30:	e1a00005 	mov	r0, r5
   28f34:	ebfffabc 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28f38:	e3a01020 	mov	r1, #32
   28f3c:	e2444002 	sub	r4, r4, #2
   28f40:	e595300c 	ldr	r3, [r5, #12]
   28f44:	e2444001 	sub	r4, r4, #1
   28f48:	e2832001 	add	r2, r3, #1
   28f4c:	e3740001 	cmn	r4, #1
   28f50:	e585200c 	str	r2, [r5, #12]
   28f54:	e5c31000 	strb	r1, [r3]
   28f58:	1afffff8 	bne	28f40 <CString::FormatV(char const*, std::__va_list)+0xc20>
   28f5c:	eaffffb5 	b	28e38 <CString::FormatV(char const*, std::__va_list)+0xb18>
   28f60:	e3a01001 	mov	r1, #1
   28f64:	e1a00005 	mov	r0, r5
   28f68:	ebfffaaf 	bl	27a2c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28f6c:	e3a0202d 	mov	r2, #45	; 0x2d
   28f70:	e595300c 	ldr	r3, [r5, #12]
   28f74:	e2831001 	add	r1, r3, #1
   28f78:	e585100c 	str	r1, [r5, #12]
   28f7c:	e5c32000 	strb	r2, [r3]
   28f80:	eaffff93 	b	28dd4 <CString::FormatV(char const*, std::__va_list)+0xab4>
   28f84:	e1a00008 	mov	r0, r8
   28f88:	e3a06001 	mov	r6, #1
   28f8c:	e3a07000 	mov	r7, #0
   28f90:	e1a01009 	mov	r1, r9
   28f94:	eafffe34 	b	2886c <CString::FormatV(char const*, std::__va_list)+0x54c>
   28f98:	e1a08009 	mov	r8, r9
   28f9c:	e3a06001 	mov	r6, #1
   28fa0:	eaffff52 	b	28cf0 <CString::FormatV(char const*, std::__va_list)+0x9d0>
   28fa4:	e1500004 	cmp	r0, r4
   28fa8:	2afffdfc 	bcs	287a0 <CString::FormatV(char const*, std::__va_list)+0x480>
   28fac:	eaffff26 	b	28c4c <CString::FormatV(char const*, std::__va_list)+0x92c>
   28fb0:	00043acc 	.word	0x00043acc
   28fb4:	00043ac8 	.word	0x00043ac8
   28fb8:	cccccccd 	.word	0xcccccccd

00028fbc <CString::Format(char const*, ...)>:
   28fbc:	e92d000e 	push	{r1, r2, r3}
   28fc0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   28fc4:	e24dd008 	sub	sp, sp, #8
   28fc8:	e28d2010 	add	r2, sp, #16
   28fcc:	e59d100c 	ldr	r1, [sp, #12]
   28fd0:	e58d2004 	str	r2, [sp, #4]
   28fd4:	ebfffcd1 	bl	28320 <CString::FormatV(char const*, std::__va_list)>
   28fd8:	e28dd008 	add	sp, sp, #8
   28fdc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   28fe0:	e28dd00c 	add	sp, sp, #12
   28fe4:	e12fff1e 	bx	lr

00028fe8 <__aeabi_atexit>:
   28fe8:	e12fff1e 	bx	lr

00028fec <__errno>:
   28fec:	e59f0000 	ldr	r0, [pc]	; 28ff4 <__errno+0x8>
   28ff0:	e12fff1e 	bx	lr
   28ff4:	0004c550 	.word	0x0004c550

00028ff8 <set_qemu_exit_status>:
   28ff8:	e59f3004 	ldr	r3, [pc, #4]	; 29004 <set_qemu_exit_status+0xc>
   28ffc:	e5830008 	str	r0, [r3, #8]
   29000:	e12fff1e 	bx	lr
   29004:	0004c54c 	.word	0x0004c54c

00029008 <halt>:
   29008:	f10c0080 	cpsid	i
   2900c:	f10c0040 	cpsid	f
   29010:	eafffffe 	b	29010 <halt+0x8>

00029014 <reboot>:
   29014:	e3a03000 	mov	r3, #0
   29018:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2901c:	e59f3010 	ldr	r3, [pc, #16]	; 29034 <reboot+0x20>
   29020:	e59f1010 	ldr	r1, [pc, #16]	; 29038 <reboot+0x24>
   29024:	e59f2010 	ldr	r2, [pc, #16]	; 2903c <reboot+0x28>
   29028:	e5831024 	str	r1, [r3, #36]	; 0x24
   2902c:	e583201c 	str	r2, [r3, #28]
   29030:	eafffffe 	b	29030 <reboot+0x1c>
   29034:	20100000 	.word	0x20100000
   29038:	5a000001 	.word	0x5a000001
   2903c:	5a000020 	.word	0x5a000020

00029040 <vfpinit>:
   29040:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   29044:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   29048:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   2904c:	e3a03000 	mov	r3, #0
   29050:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   29054:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   29058:	eee83a10 	vmsr	fpexc, r3
   2905c:	e3a03402 	mov	r3, #33554432	; 0x2000000
   29060:	eee13a10 	vmsr	fpscr, r3
   29064:	e12fff1e 	bx	lr

00029068 <sysinit>:
   29068:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2906c:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
   29070:	f1080040 	cpsie	f
   29074:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   29078:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   2907c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   29080:	e3a01000 	mov	r1, #0
   29084:	ee071f95 	mcr	15, 0, r1, cr7, cr5, {4}
   29088:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   2908c:	eee83a10 	vmsr	fpexc, r3
   29090:	e3a03402 	mov	r3, #33554432	; 0x2000000
   29094:	eee13a10 	vmsr	fpscr, r3
   29098:	e59f0088 	ldr	r0, [pc, #136]	; 29128 <sysinit+0xc0>
   2909c:	e59f2088 	ldr	r2, [pc, #136]	; 2912c <sysinit+0xc4>
   290a0:	e59f5088 	ldr	r5, [pc, #136]	; 29130 <sysinit+0xc8>
   290a4:	e0422000 	sub	r2, r2, r0
   290a8:	eb000379 	bl	29e94 <memset>
   290ac:	e1a0000d 	mov	r0, sp
   290b0:	ebfff78f 	bl	26ef4 <CMachineInfo::CMachineInfo()>
   290b4:	e3a01001 	mov	r1, #1
   290b8:	e28d001c 	add	r0, sp, #28
   290bc:	eb0009db 	bl	2b830 <CMemorySystem::CMemorySystem(bool)>
   290c0:	e59f306c 	ldr	r3, [pc, #108]	; 29134 <sysinit+0xcc>
   290c4:	e1550003 	cmp	r5, r3
   290c8:	2a000009 	bcs	290f4 <sysinit+0x8c>
   290cc:	e2433001 	sub	r3, r3, #1
   290d0:	e0433005 	sub	r3, r3, r5
   290d4:	e3c33003 	bic	r3, r3, #3
   290d8:	e2833004 	add	r3, r3, #4
   290dc:	e1a04005 	mov	r4, r5
   290e0:	e0855003 	add	r5, r5, r3
   290e4:	e4943004 	ldr	r3, [r4], #4
   290e8:	e12fff33 	blx	r3
   290ec:	e1540005 	cmp	r4, r5
   290f0:	1afffffb 	bne	290e4 <sysinit+0x7c>
   290f4:	ebff7bdb 	bl	8068 <main>
   290f8:	e3500001 	cmp	r0, #1
   290fc:	0a000000 	beq	29104 <sysinit+0x9c>
   29100:	ebffffc0 	bl	29008 <halt>
   29104:	eb0006a1 	bl	2ab90 <IsChainBootEnabled>
   29108:	e3500000 	cmp	r0, #0
   2910c:	1a000000 	bne	29114 <sysinit+0xac>
   29110:	ebffffbf 	bl	29014 <reboot>
   29114:	e28d001c 	add	r0, sp, #28
   29118:	eb000a28 	bl	2b9c0 <CMemorySystem::Destructor()>
   2911c:	f10c0040 	cpsid	f
   29120:	eb0006a0 	bl	2aba8 <DoChainBoot>
   29124:	eafffff9 	b	29110 <sysinit+0xa8>
   29128:	0004c500 	.word	0x0004c500
   2912c:	0004f1fc 	.word	0x0004f1fc
   29130:	000461b4 	.word	0x000461b4
   29134:	000461c8 	.word	0x000461c8

00029138 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
   29138:	e3a03000 	mov	r3, #0
   2913c:	e2800001 	add	r0, r0, #1
   29140:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   29144:	e59f3020 	ldr	r3, [pc, #32]	; 2916c <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
   29148:	e1a01003 	mov	r1, r3
   2914c:	e5932004 	ldr	r2, [r3, #4]
   29150:	e5913004 	ldr	r3, [r1, #4]
   29154:	e0433002 	sub	r3, r3, r2
   29158:	e1500003 	cmp	r0, r3
   2915c:	8afffffb 	bhi	29150 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
   29160:	e3a03000 	mov	r3, #0
   29164:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   29168:	e12fff1e 	bx	lr
   2916c:	20003000 	.word	0x20003000

00029170 <CTimer::CTimer(CInterruptSystem*)>:
   29170:	e92d4070 	push	{r4, r5, r6, lr}
   29174:	e3a05000 	mov	r5, #0
   29178:	e3a06001 	mov	r6, #1
   2917c:	e1a04000 	mov	r4, r0
   29180:	e5805004 	str	r5, [r0, #4]
   29184:	e5801000 	str	r1, [r0]
   29188:	e5805008 	str	r5, [r0, #8]
   2918c:	e5805014 	str	r5, [r0, #20]
   29190:	e5806010 	str	r6, [r0, #16]
   29194:	e580500c 	str	r5, [r0, #12]
   29198:	e2800018 	add	r0, r0, #24
   2919c:	eb000ddd 	bl	2c918 <CPtrList::CPtrList()>
   291a0:	e3a020c8 	mov	r2, #200	; 0xc8
   291a4:	e59f3038 	ldr	r3, [pc, #56]	; 291e4 <CTimer::CTimer(CInterruptSystem*)+0x74>
   291a8:	e59f1038 	ldr	r1, [pc, #56]	; 291e8 <CTimer::CTimer(CInterruptSystem*)+0x78>
   291ac:	e5930000 	ldr	r0, [r3]
   291b0:	e584601c 	str	r6, [r4, #28]
   291b4:	e1500005 	cmp	r0, r5
   291b8:	e5845038 	str	r5, [r4, #56]	; 0x38
   291bc:	e5841020 	str	r1, [r4, #32]
   291c0:	e5842024 	str	r2, [r4, #36]	; 0x24
   291c4:	1a000002 	bne	291d4 <CTimer::CTimer(CInterruptSystem*)+0x64>
   291c8:	e1a00004 	mov	r0, r4
   291cc:	e5834000 	str	r4, [r3]
   291d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   291d4:	e3a02041 	mov	r2, #65	; 0x41
   291d8:	e59f100c 	ldr	r1, [pc, #12]	; 291ec <CTimer::CTimer(CInterruptSystem*)+0x7c>
   291dc:	e59f000c 	ldr	r0, [pc, #12]	; 291f0 <CTimer::CTimer(CInterruptSystem*)+0x80>
   291e0:	ebffed53 	bl	24734 <assertion_failed>
   291e4:	0004c558 	.word	0x0004c558
   291e8:	00030d40 	.word	0x00030d40
   291ec:	00043ae0 	.word	0x00043ae0
   291f0:	00041d1c 	.word	0x00041d1c

000291f4 <CTimer::~CTimer()>:
   291f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   291f8:	e1a06000 	mov	r6, r0
   291fc:	e5900000 	ldr	r0, [r0]
   29200:	e24dd00c 	sub	sp, sp, #12
   29204:	e3500000 	cmp	r0, #0
   29208:	0a000028 	beq	292b0 <CTimer::~CTimer()+0xbc>
   2920c:	e3a01003 	mov	r1, #3
   29210:	e2865018 	add	r5, r6, #24
   29214:	eb000bac 	bl	2c0cc <CInterruptSystem::DisconnectIRQ(unsigned int)>
   29218:	e1a00005 	mov	r0, r5
   2921c:	eb000dca 	bl	2c94c <CPtrList::GetFirst()>
   29220:	e2501000 	subs	r1, r0, #0
   29224:	e59f7094 	ldr	r7, [pc, #148]	; 292c0 <CTimer::~CTimer()+0xcc>
   29228:	0a000011 	beq	29274 <CTimer::~CTimer()+0x80>
   2922c:	e1a00005 	mov	r0, r5
   29230:	e58d1004 	str	r1, [sp, #4]
   29234:	eb000ddb 	bl	2c9a8 <CPtrList::GetPtr(TPtrListElement*)>
   29238:	e2504000 	subs	r4, r0, #0
   2923c:	e59d1004 	ldr	r1, [sp, #4]
   29240:	0a000012 	beq	29290 <CTimer::~CTimer()+0x9c>
   29244:	e5943000 	ldr	r3, [r4]
   29248:	e1530007 	cmp	r3, r7
   2924c:	1a000013 	bne	292a0 <CTimer::~CTimer()+0xac>
   29250:	e1a00005 	mov	r0, r5
   29254:	eb000e5b 	bl	2cbc8 <CPtrList::Remove(TPtrListElement*)>
   29258:	e3a01014 	mov	r1, #20
   2925c:	e1a00004 	mov	r0, r4
   29260:	eb000748 	bl	2af88 <operator delete(void*, unsigned int)>
   29264:	e1a00005 	mov	r0, r5
   29268:	eb000db7 	bl	2c94c <CPtrList::GetFirst()>
   2926c:	e2501000 	subs	r1, r0, #0
   29270:	1affffed 	bne	2922c <CTimer::~CTimer()+0x38>
   29274:	e59f3048 	ldr	r3, [pc, #72]	; 292c4 <CTimer::~CTimer()+0xd0>
   29278:	e1a00005 	mov	r0, r5
   2927c:	e5831000 	str	r1, [r3]
   29280:	eb000da7 	bl	2c924 <CPtrList::~CPtrList()>
   29284:	e1a00006 	mov	r0, r6
   29288:	e28dd00c 	add	sp, sp, #12
   2928c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   29290:	e3a02058 	mov	r2, #88	; 0x58
   29294:	e59f102c 	ldr	r1, [pc, #44]	; 292c8 <CTimer::~CTimer()+0xd4>
   29298:	e59f002c 	ldr	r0, [pc, #44]	; 292cc <CTimer::~CTimer()+0xd8>
   2929c:	ebffed24 	bl	24734 <assertion_failed>
   292a0:	e3a02059 	mov	r2, #89	; 0x59
   292a4:	e59f101c 	ldr	r1, [pc, #28]	; 292c8 <CTimer::~CTimer()+0xd4>
   292a8:	e59f0020 	ldr	r0, [pc, #32]	; 292d0 <CTimer::~CTimer()+0xdc>
   292ac:	ebffed20 	bl	24734 <assertion_failed>
   292b0:	e3a02047 	mov	r2, #71	; 0x47
   292b4:	e59f100c 	ldr	r1, [pc, #12]	; 292c8 <CTimer::~CTimer()+0xd4>
   292b8:	e59f0014 	ldr	r0, [pc, #20]	; 292d4 <CTimer::~CTimer()+0xe0>
   292bc:	ebffed1c 	bl	24734 <assertion_failed>
   292c0:	4b544d43 	.word	0x4b544d43
   292c4:	0004c558 	.word	0x0004c558
   292c8:	00043ae0 	.word	0x00043ae0
   292cc:	0003f78c 	.word	0x0003f78c
   292d0:	00043aec 	.word	0x00043aec
   292d4:	0003d550 	.word	0x0003d550

000292d8 <CTimer::SetTimeZone(int)>:
   292d8:	e59f2018 	ldr	r2, [pc, #24]	; 292f8 <CTimer::SetTimeZone(int)+0x20>
   292dc:	e2813e59 	add	r3, r1, #1424	; 0x590
   292e0:	e283300f 	add	r3, r3, #15
   292e4:	e1530002 	cmp	r3, r2
   292e8:	95801014 	strls	r1, [r0, #20]
   292ec:	93a00001 	movls	r0, #1
   292f0:	83a00000 	movhi	r0, #0
   292f4:	e12fff1e 	bx	lr
   292f8:	00000b3e 	.word	0x00000b3e

000292fc <CTimer::GetTimeZone() const>:
   292fc:	e5900014 	ldr	r0, [r0, #20]
   29300:	e12fff1e 	bx	lr

00029304 <CTimer::SetTime(unsigned int, bool)>:
   29304:	e3520000 	cmp	r2, #0
   29308:	e92d4070 	push	{r4, r5, r6, lr}
   2930c:	e1a04000 	mov	r4, r0
   29310:	e1a05001 	mov	r5, r1
   29314:	1a000004 	bne	2932c <CTimer::SetTime(unsigned int, bool)+0x28>
   29318:	e5903014 	ldr	r3, [r0, #20]
   2931c:	e0633203 	rsb	r3, r3, r3, lsl #4
   29320:	e1b03103 	lsls	r3, r3, #2
   29324:	4a000006 	bmi	29344 <CTimer::SetTime(unsigned int, bool)+0x40>
   29328:	e0855003 	add	r5, r5, r3
   2932c:	e5940010 	ldr	r0, [r4, #16]
   29330:	e3500000 	cmp	r0, #0
   29334:	1a000007 	bne	29358 <CTimer::SetTime(unsigned int, bool)+0x54>
   29338:	e3a00001 	mov	r0, #1
   2933c:	e584500c 	str	r5, [r4, #12]
   29340:	e8bd8070 	pop	{r4, r5, r6, pc}
   29344:	e2631000 	rsb	r1, r3, #0
   29348:	e1510005 	cmp	r1, r5
   2934c:	dafffff5 	ble	29328 <CTimer::SetTime(unsigned int, bool)+0x24>
   29350:	e1a00002 	mov	r0, r2
   29354:	e8bd8070 	pop	{r4, r5, r6, pc}
   29358:	eb000a29 	bl	2bc04 <EnterCritical>
   2935c:	e5943010 	ldr	r3, [r4, #16]
   29360:	e584500c 	str	r5, [r4, #12]
   29364:	e3530000 	cmp	r3, #0
   29368:	0a000002 	beq	29378 <CTimer::SetTime(unsigned int, bool)+0x74>
   2936c:	eb000a4e 	bl	2bcac <LeaveCritical>
   29370:	e3a00001 	mov	r0, #1
   29374:	e8bd8070 	pop	{r4, r5, r6, pc}
   29378:	e3a00001 	mov	r0, #1
   2937c:	e8bd8070 	pop	{r4, r5, r6, pc}

00029380 <CTimer::GetClockTicks()>:
   29380:	e3a03000 	mov	r3, #0
   29384:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   29388:	e59f2008 	ldr	r2, [pc, #8]	; 29398 <CTimer::GetClockTicks()+0x18>
   2938c:	e5920004 	ldr	r0, [r2, #4]
   29390:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   29394:	e12fff1e 	bx	lr
   29398:	20003000 	.word	0x20003000

0002939c <CTimer::GetTicks() const>:
   2939c:	e5900004 	ldr	r0, [r0, #4]
   293a0:	e12fff1e 	bx	lr

000293a4 <CTimer::GetUptime() const>:
   293a4:	e5900008 	ldr	r0, [r0, #8]
   293a8:	e12fff1e 	bx	lr

000293ac <CTimer::GetTime() const>:
   293ac:	e590000c 	ldr	r0, [r0, #12]
   293b0:	e12fff1e 	bx	lr

000293b4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   293b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   293b8:	e1a04000 	mov	r4, r0
   293bc:	e5900010 	ldr	r0, [r0, #16]
   293c0:	e1a06001 	mov	r6, r1
   293c4:	e3500000 	cmp	r0, #0
   293c8:	e1a05002 	mov	r5, r2
   293cc:	1a000013 	bne	29420 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x6c>
   293d0:	e594700c 	ldr	r7, [r4, #12]
   293d4:	e5944004 	ldr	r4, [r4, #4]
   293d8:	e3560000 	cmp	r6, #0
   293dc:	0a000018 	beq	29444 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x90>
   293e0:	e3550000 	cmp	r5, #0
   293e4:	e5867000 	str	r7, [r6]
   293e8:	0a000019 	beq	29454 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
   293ec:	e59f3070 	ldr	r3, [pc, #112]	; 29464 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   293f0:	e3a00001 	mov	r0, #1
   293f4:	e0832493 	umull	r2, r3, r3, r4
   293f8:	e1a032a3 	lsr	r3, r3, #5
   293fc:	e0833103 	add	r3, r3, r3, lsl #2
   29400:	e0833103 	add	r3, r3, r3, lsl #2
   29404:	e0443103 	sub	r3, r4, r3, lsl #2
   29408:	e0632283 	rsb	r2, r3, r3, lsl #5
   2940c:	e0833102 	add	r3, r3, r2, lsl #2
   29410:	e0833103 	add	r3, r3, r3, lsl #2
   29414:	e1a03203 	lsl	r3, r3, #4
   29418:	e5853000 	str	r3, [r5]
   2941c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29420:	eb0009f7 	bl	2bc04 <EnterCritical>
   29424:	e5943010 	ldr	r3, [r4, #16]
   29428:	e594700c 	ldr	r7, [r4, #12]
   2942c:	e3530000 	cmp	r3, #0
   29430:	e5944004 	ldr	r4, [r4, #4]
   29434:	0affffe7 	beq	293d8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   29438:	eb000a1b 	bl	2bcac <LeaveCritical>
   2943c:	e3560000 	cmp	r6, #0
   29440:	1affffe6 	bne	293e0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   29444:	e3a02f41 	mov	r2, #260	; 0x104
   29448:	e59f1018 	ldr	r1, [pc, #24]	; 29468 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   2944c:	e59f0018 	ldr	r0, [pc, #24]	; 2946c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   29450:	ebffecb7 	bl	24734 <assertion_failed>
   29454:	e59f2014 	ldr	r2, [pc, #20]	; 29470 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   29458:	e59f1008 	ldr	r1, [pc, #8]	; 29468 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   2945c:	e59f0010 	ldr	r0, [pc, #16]	; 29474 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xc0>
   29460:	ebffecb3 	bl	24734 <assertion_failed>
   29464:	51eb851f 	.word	0x51eb851f
   29468:	00043ae0 	.word	0x00043ae0
   2946c:	00043b14 	.word	0x00043b14
   29470:	00000107 	.word	0x00000107
   29474:	00043b24 	.word	0x00043b24

00029478 <CTimer::GetUniversalTime() const>:
   29478:	e5903014 	ldr	r3, [r0, #20]
   2947c:	e590000c 	ldr	r0, [r0, #12]
   29480:	e0633203 	rsb	r3, r3, r3, lsl #4
   29484:	e1500103 	cmp	r0, r3, lsl #2
   29488:	e1a03103 	lsl	r3, r3, #2
   2948c:	a0400003 	subge	r0, r0, r3
   29490:	b3a00000 	movlt	r0, #0
   29494:	e12fff1e 	bx	lr

00029498 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   29498:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2949c:	e1a05000 	mov	r5, r0
   294a0:	e5900010 	ldr	r0, [r0, #16]
   294a4:	e1a06001 	mov	r6, r1
   294a8:	e3500000 	cmp	r0, #0
   294ac:	e1a04002 	mov	r4, r2
   294b0:	1a00001b 	bne	29524 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x8c>
   294b4:	e595800c 	ldr	r8, [r5, #12]
   294b8:	e5957004 	ldr	r7, [r5, #4]
   294bc:	e5950014 	ldr	r0, [r5, #20]
   294c0:	e0600200 	rsb	r0, r0, r0, lsl #4
   294c4:	e1580100 	cmp	r8, r0, lsl #2
   294c8:	e1a00100 	lsl	r0, r0, #2
   294cc:	ba000012 	blt	2951c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   294d0:	e3560000 	cmp	r6, #0
   294d4:	0a00001a 	beq	29544 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xac>
   294d8:	e0480000 	sub	r0, r8, r0
   294dc:	e3540000 	cmp	r4, #0
   294e0:	e5860000 	str	r0, [r6]
   294e4:	0a00001a 	beq	29554 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xbc>
   294e8:	e59f3074 	ldr	r3, [pc, #116]	; 29564 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   294ec:	e3a00001 	mov	r0, #1
   294f0:	e0832793 	umull	r2, r3, r3, r7
   294f4:	e1a032a3 	lsr	r3, r3, #5
   294f8:	e0833103 	add	r3, r3, r3, lsl #2
   294fc:	e0833103 	add	r3, r3, r3, lsl #2
   29500:	e0473103 	sub	r3, r7, r3, lsl #2
   29504:	e0632283 	rsb	r2, r3, r3, lsl #5
   29508:	e0833102 	add	r3, r3, r2, lsl #2
   2950c:	e0833103 	add	r3, r3, r3, lsl #2
   29510:	e1a03203 	lsl	r3, r3, #4
   29514:	e5843000 	str	r3, [r4]
   29518:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2951c:	e3a00000 	mov	r0, #0
   29520:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29524:	eb0009b6 	bl	2bc04 <EnterCritical>
   29528:	e5953010 	ldr	r3, [r5, #16]
   2952c:	e595800c 	ldr	r8, [r5, #12]
   29530:	e3530000 	cmp	r3, #0
   29534:	e5957004 	ldr	r7, [r5, #4]
   29538:	0affffdf 	beq	294bc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   2953c:	eb0009da 	bl	2bcac <LeaveCritical>
   29540:	eaffffdd 	b	294bc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   29544:	e59f201c 	ldr	r2, [pc, #28]	; 29568 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   29548:	e59f101c 	ldr	r1, [pc, #28]	; 2956c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   2954c:	e59f001c 	ldr	r0, [pc, #28]	; 29570 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   29550:	ebffec77 	bl	24734 <assertion_failed>
   29554:	e3a02f4b 	mov	r2, #300	; 0x12c
   29558:	e59f100c 	ldr	r1, [pc, #12]	; 2956c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   2955c:	e59f0010 	ldr	r0, [pc, #16]	; 29574 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
   29560:	ebffec73 	bl	24734 <assertion_failed>
   29564:	51eb851f 	.word	0x51eb851f
   29568:	00000129 	.word	0x00000129
   2956c:	00043ae0 	.word	0x00043ae0
   29570:	00043b14 	.word	0x00043b14
   29574:	00043b24 	.word	0x00043b24

00029578 <CTimer::GetTimeString()>:
   29578:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2957c:	e1a04000 	mov	r4, r0
   29580:	e5900010 	ldr	r0, [r0, #16]
   29584:	e24dd014 	sub	sp, sp, #20
   29588:	e3500000 	cmp	r0, #0
   2958c:	1a00005e 	bne	2970c <CTimer::GetTimeString()+0x194>
   29590:	e594b00c 	ldr	fp, [r4, #12]
   29594:	e594a004 	ldr	sl, [r4, #4]
   29598:	e19b000a 	orrs	r0, fp, sl
   2959c:	01a0a000 	moveq	sl, r0
   295a0:	0a00004d 	beq	296dc <CTimer::GetTimeString()+0x164>
   295a4:	e59f7180 	ldr	r7, [pc, #384]	; 2972c <CTimer::GetTimeString()+0x1b4>
   295a8:	e59f4180 	ldr	r4, [pc, #384]	; 29730 <CTimer::GetTimeString()+0x1b8>
   295ac:	e0883b97 	umull	r3, r8, r7, fp
   295b0:	e1a082a8 	lsr	r8, r8, #5
   295b4:	e1a02008 	mov	r2, r8
   295b8:	e0873897 	umull	r3, r7, r7, r8
   295bc:	e1a072a7 	lsr	r7, r7, #5
   295c0:	e0843794 	umull	r3, r4, r4, r7
   295c4:	e1a09007 	mov	r9, r7
   295c8:	e0688208 	rsb	r8, r8, r8, lsl #4
   295cc:	e0677207 	rsb	r7, r7, r7, lsl #4
   295d0:	e59f615c 	ldr	r6, [pc, #348]	; 29734 <CTimer::GetTimeString()+0x1bc>
   295d4:	e59f515c 	ldr	r5, [pc, #348]	; 29738 <CTimer::GetTimeString()+0x1c0>
   295d8:	e59fe15c 	ldr	lr, [pc, #348]	; 2973c <CTimer::GetTimeString()+0x1c4>
   295dc:	e59fc15c 	ldr	ip, [pc, #348]	; 29740 <CTimer::GetTimeString()+0x1c8>
   295e0:	e04b8108 	sub	r8, fp, r8, lsl #2
   295e4:	e0427107 	sub	r7, r2, r7, lsl #2
   295e8:	e1a04224 	lsr	r4, r4, #4
   295ec:	ea000008 	b	29614 <CTimer::GetTimeString()+0x9c>
   295f0:	e3160003 	tst	r6, #3
   295f4:	03a00001 	moveq	r0, #1
   295f8:	13a00000 	movne	r0, #0
   295fc:	e2801f5b 	add	r1, r0, #364	; 0x16c
   29600:	e2811001 	add	r1, r1, #1
   29604:	e1540001 	cmp	r4, r1
   29608:	3a00000b 	bcc	2963c <CTimer::GetTimeString()+0xc4>
   2960c:	e0444001 	sub	r4, r4, r1
   29610:	e2866001 	add	r6, r6, #1
   29614:	e0030695 	mul	r3, r5, r6
   29618:	e15e0163 	cmp	lr, r3, ror #2
   2961c:	3afffff3 	bcc	295f0 <CTimer::GetTimeString()+0x78>
   29620:	e15c0263 	cmp	ip, r3, ror #4
   29624:	23a00001 	movcs	r0, #1
   29628:	33a00000 	movcc	r0, #0
   2962c:	e2801f5b 	add	r1, r0, #364	; 0x16c
   29630:	e2811001 	add	r1, r1, #1
   29634:	e1540001 	cmp	r4, r1
   29638:	2afffff3 	bcs	2960c <CTimer::GetTimeString()+0x94>
   2963c:	e3a05000 	mov	r5, #0
   29640:	e59f20fc 	ldr	r2, [pc, #252]	; 29744 <CTimer::GetTimeString()+0x1cc>
   29644:	ea000001 	b	29650 <CTimer::GetTimeString()+0xd8>
   29648:	e0444001 	sub	r4, r4, r1
   2964c:	e2855001 	add	r5, r5, #1
   29650:	e3550001 	cmp	r5, #1
   29654:	13a03000 	movne	r3, #0
   29658:	02003001 	andeq	r3, r0, #1
   2965c:	e3530000 	cmp	r3, #0
   29660:	13a0101d 	movne	r1, #29
   29664:	07921105 	ldreq	r1, [r2, r5, lsl #2]
   29668:	e1540001 	cmp	r4, r1
   2966c:	2afffff5 	bcs	29648 <CTimer::GetTimeString()+0xd0>
   29670:	e3a00010 	mov	r0, #16
   29674:	eb000635 	bl	2af50 <operator new(unsigned int)>
   29678:	e59fb0c8 	ldr	fp, [pc, #200]	; 29748 <CTimer::GetTimeString()+0x1d0>
   2967c:	e08b3a9b 	umull	r3, fp, fp, sl
   29680:	e1a0b2ab 	lsr	fp, fp, #5
   29684:	e08bb10b 	add	fp, fp, fp, lsl #2
   29688:	e08bb10b 	add	fp, fp, fp, lsl #2
   2968c:	e04ab10b 	sub	fp, sl, fp, lsl #2
   29690:	e1a0a000 	mov	sl, r0
   29694:	ebfff8fe 	bl	27a94 <CString::CString()>
   29698:	e59f30ac 	ldr	r3, [pc, #172]	; 2974c <CTimer::GetTimeString()+0x1d4>
   2969c:	e1560003 	cmp	r6, r3
   296a0:	9a000010 	bls	296e8 <CTimer::GetTimeString()+0x170>
   296a4:	e59f3084 	ldr	r3, [pc, #132]	; 29730 <CTimer::GetTimeString()+0x1b8>
   296a8:	e98d0180 	stmib	sp, {r7, r8}
   296ac:	e0832993 	umull	r2, r3, r3, r9
   296b0:	e1a03223 	lsr	r3, r3, #4
   296b4:	e0833083 	add	r3, r3, r3, lsl #1
   296b8:	e0499183 	sub	r9, r9, r3, lsl #3
   296bc:	e59f208c 	ldr	r2, [pc, #140]	; 29750 <CTimer::GetTimeString()+0x1d8>
   296c0:	e58db00c 	str	fp, [sp, #12]
   296c4:	e58d9000 	str	r9, [sp]
   296c8:	e1a0000a 	mov	r0, sl
   296cc:	e7922105 	ldr	r2, [r2, r5, lsl #2]
   296d0:	e59f107c 	ldr	r1, [pc, #124]	; 29754 <CTimer::GetTimeString()+0x1dc>
   296d4:	e2843001 	add	r3, r4, #1
   296d8:	ebfffe37 	bl	28fbc <CString::Format(char const*, ...)>
   296dc:	e1a0000a 	mov	r0, sl
   296e0:	e28dd014 	add	sp, sp, #20
   296e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296e8:	e1a0000a 	mov	r0, sl
   296ec:	e1a03007 	mov	r3, r7
   296f0:	e1a02009 	mov	r2, r9
   296f4:	e88d0900 	stm	sp, {r8, fp}
   296f8:	e59f1058 	ldr	r1, [pc, #88]	; 29758 <CTimer::GetTimeString()+0x1e0>
   296fc:	ebfffe2e 	bl	28fbc <CString::Format(char const*, ...)>
   29700:	e1a0000a 	mov	r0, sl
   29704:	e28dd014 	add	sp, sp, #20
   29708:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2970c:	eb00093c 	bl	2bc04 <EnterCritical>
   29710:	e5943010 	ldr	r3, [r4, #16]
   29714:	e594b00c 	ldr	fp, [r4, #12]
   29718:	e3530000 	cmp	r3, #0
   2971c:	e594a004 	ldr	sl, [r4, #4]
   29720:	0affff9c 	beq	29598 <CTimer::GetTimeString()+0x20>
   29724:	eb000960 	bl	2bcac <LeaveCritical>
   29728:	eaffff9a 	b	29598 <CTimer::GetTimeString()+0x20>
   2972c:	88888889 	.word	0x88888889
   29730:	aaaaaaab 	.word	0xaaaaaaab
   29734:	000007b2 	.word	0x000007b2
   29738:	c28f5c29 	.word	0xc28f5c29
   2973c:	028f5c28 	.word	0x028f5c28
   29740:	00a3d70a 	.word	0x00a3d70a
   29744:	00043c1c 	.word	0x00043c1c
   29748:	51eb851f 	.word	0x51eb851f
   2974c:	000007b7 	.word	0x000007b7
   29750:	00046550 	.word	0x00046550
   29754:	00043b38 	.word	0x00043b38
   29758:	00043b54 	.word	0x00043b54

0002975c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   2975c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29760:	e1a07000 	mov	r7, r0
   29764:	e1a04002 	mov	r4, r2
   29768:	e1a06001 	mov	r6, r1
   2976c:	e3a00014 	mov	r0, #20
   29770:	e1a08003 	mov	r8, r3
   29774:	eb0005f5 	bl	2af50 <operator new(unsigned int)>
   29778:	e5971004 	ldr	r1, [r7, #4]
   2977c:	e3540000 	cmp	r4, #0
   29780:	e0816006 	add	r6, r1, r6
   29784:	0a000034 	beq	2985c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x100>
   29788:	e1a05000 	mov	r5, r0
   2978c:	e597001c 	ldr	r0, [r7, #28]
   29790:	e59f30f0 	ldr	r3, [pc, #240]	; 29888 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   29794:	e59d2020 	ldr	r2, [sp, #32]
   29798:	e3500000 	cmp	r0, #0
   2979c:	e5854004 	str	r4, [r5, #4]
   297a0:	e5856008 	str	r6, [r5, #8]
   297a4:	e585800c 	str	r8, [r5, #12]
   297a8:	e5852010 	str	r2, [r5, #16]
   297ac:	e5853000 	str	r3, [r5]
   297b0:	1a000020 	bne	29838 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
   297b4:	e2874018 	add	r4, r7, #24
   297b8:	e1a00004 	mov	r0, r4
   297bc:	eb000c62 	bl	2c94c <CPtrList::GetFirst()>
   297c0:	e2509000 	subs	r9, r0, #0
   297c4:	0a00002a 	beq	29874 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   297c8:	e59f80b8 	ldr	r8, [pc, #184]	; 29888 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   297cc:	e1a01009 	mov	r1, r9
   297d0:	e1a00004 	mov	r0, r4
   297d4:	eb000c73 	bl	2c9a8 <CPtrList::GetPtr(TPtrListElement*)>
   297d8:	e2503000 	subs	r3, r0, #0
   297dc:	0a00000d 	beq	29818 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xbc>
   297e0:	e5932000 	ldr	r2, [r3]
   297e4:	e1520008 	cmp	r2, r8
   297e8:	1a00000e 	bne	29828 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xcc>
   297ec:	e5933008 	ldr	r3, [r3, #8]
   297f0:	e1a01009 	mov	r1, r9
   297f4:	e0433006 	sub	r3, r3, r6
   297f8:	e3530000 	cmp	r3, #0
   297fc:	e1a00004 	mov	r0, r4
   29800:	ca00000e 	bgt	29840 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe4>
   29804:	eb000c52 	bl	2c954 <CPtrList::GetNext(TPtrListElement*)>
   29808:	e3500000 	cmp	r0, #0
   2980c:	0a000018 	beq	29874 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   29810:	e1a09000 	mov	r9, r0
   29814:	eaffffec 	b	297cc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x70>
   29818:	e59f206c 	ldr	r2, [pc, #108]	; 2988c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
   2981c:	e59f106c 	ldr	r1, [pc, #108]	; 29890 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   29820:	e59f006c 	ldr	r0, [pc, #108]	; 29894 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
   29824:	ebffebc2 	bl	24734 <assertion_failed>
   29828:	e3a02f65 	mov	r2, #404	; 0x194
   2982c:	e59f105c 	ldr	r1, [pc, #92]	; 29890 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   29830:	e59f0060 	ldr	r0, [pc, #96]	; 29898 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
   29834:	ebffebbe 	bl	24734 <assertion_failed>
   29838:	eb0008f1 	bl	2bc04 <EnterCritical>
   2983c:	eaffffdc 	b	297b4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
   29840:	e1a02005 	mov	r2, r5
   29844:	eb000c6c 	bl	2c9fc <CPtrList::InsertBefore(TPtrListElement*, void*)>
   29848:	e597301c 	ldr	r3, [r7, #28]
   2984c:	e3530000 	cmp	r3, #0
   29850:	1a000005 	bne	2986c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x110>
   29854:	e1a00005 	mov	r0, r5
   29858:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2985c:	e59f2038 	ldr	r2, [pc, #56]	; 2989c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
   29860:	e59f1028 	ldr	r1, [pc, #40]	; 29890 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   29864:	e59f0034 	ldr	r0, [pc, #52]	; 298a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
   29868:	ebffebb1 	bl	24734 <assertion_failed>
   2986c:	eb00090e 	bl	2bcac <LeaveCritical>
   29870:	eafffff7 	b	29854 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
   29874:	e1a01009 	mov	r1, r9
   29878:	e1a00004 	mov	r0, r4
   2987c:	e1a02005 	mov	r2, r5
   29880:	eb000c97 	bl	2cae4 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   29884:	eaffffef 	b	29848 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xec>
   29888:	4b544d43 	.word	0x4b544d43
   2988c:	00000193 	.word	0x00000193
   29890:	00043ae0 	.word	0x00043ae0
   29894:	00043b68 	.word	0x00043b68
   29898:	00043b78 	.word	0x00043b78
   2989c:	00000183 	.word	0x00000183
   298a0:	0004400c 	.word	0x0004400c

000298a4 <CTimer::CancelKernelTimer(unsigned int)>:
   298a4:	e92d4070 	push	{r4, r5, r6, lr}
   298a8:	e2514000 	subs	r4, r1, #0
   298ac:	0a000019 	beq	29918 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   298b0:	e1a05000 	mov	r5, r0
   298b4:	e590001c 	ldr	r0, [r0, #28]
   298b8:	e3500000 	cmp	r0, #0
   298bc:	1a000013 	bne	29910 <CTimer::CancelKernelTimer(unsigned int)+0x6c>
   298c0:	e2856018 	add	r6, r5, #24
   298c4:	e1a01004 	mov	r1, r4
   298c8:	e1a00006 	mov	r0, r6
   298cc:	eb000d01 	bl	2ccd8 <CPtrList::Find(void*)>
   298d0:	e2501000 	subs	r1, r0, #0
   298d4:	0a000008 	beq	298fc <CTimer::CancelKernelTimer(unsigned int)+0x58>
   298d8:	e59f3058 	ldr	r3, [pc, #88]	; 29938 <CTimer::CancelKernelTimer(unsigned int)+0x94>
   298dc:	e5942000 	ldr	r2, [r4]
   298e0:	e1520003 	cmp	r2, r3
   298e4:	1a00000f 	bne	29928 <CTimer::CancelKernelTimer(unsigned int)+0x84>
   298e8:	e1a00006 	mov	r0, r6
   298ec:	eb000cb5 	bl	2cbc8 <CPtrList::Remove(TPtrListElement*)>
   298f0:	e1a00004 	mov	r0, r4
   298f4:	e3a01014 	mov	r1, #20
   298f8:	eb0005a2 	bl	2af88 <operator delete(void*, unsigned int)>
   298fc:	e595301c 	ldr	r3, [r5, #28]
   29900:	e3530000 	cmp	r3, #0
   29904:	08bd8070 	popeq	{r4, r5, r6, pc}
   29908:	e8bd4070 	pop	{r4, r5, r6, lr}
   2990c:	ea0008e6 	b	2bcac <LeaveCritical>
   29910:	eb0008bb 	bl	2bc04 <EnterCritical>
   29914:	eaffffe9 	b	298c0 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   29918:	e3a02e1b 	mov	r2, #432	; 0x1b0
   2991c:	e59f1018 	ldr	r1, [pc, #24]	; 2993c <CTimer::CancelKernelTimer(unsigned int)+0x98>
   29920:	e59f0018 	ldr	r0, [pc, #24]	; 29940 <CTimer::CancelKernelTimer(unsigned int)+0x9c>
   29924:	ebffeb82 	bl	24734 <assertion_failed>
   29928:	e59f2014 	ldr	r2, [pc, #20]	; 29944 <CTimer::CancelKernelTimer(unsigned int)+0xa0>
   2992c:	e59f1008 	ldr	r1, [pc, #8]	; 2993c <CTimer::CancelKernelTimer(unsigned int)+0x98>
   29930:	e59f0010 	ldr	r0, [pc, #16]	; 29948 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   29934:	ebffeb7e 	bl	24734 <assertion_failed>
   29938:	4b544d43 	.word	0x4b544d43
   2993c:	00043ae0 	.word	0x00043ae0
   29940:	0003f78c 	.word	0x0003f78c
   29944:	000001b7 	.word	0x000001b7
   29948:	00043aec 	.word	0x00043aec

0002994c <CTimer::PollKernelTimers()>:
   2994c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29950:	e1a05000 	mov	r5, r0
   29954:	e590001c 	ldr	r0, [r0, #28]
   29958:	e24dd008 	sub	sp, sp, #8
   2995c:	e3500000 	cmp	r0, #0
   29960:	1a000038 	bne	29a48 <CTimer::PollKernelTimers()+0xfc>
   29964:	e2857018 	add	r7, r5, #24
   29968:	e1a00007 	mov	r0, r7
   2996c:	eb000bf6 	bl	2c94c <CPtrList::GetFirst()>
   29970:	e2501000 	subs	r1, r0, #0
   29974:	0a00003d 	beq	29a70 <CTimer::PollKernelTimers()+0x124>
   29978:	e59f8110 	ldr	r8, [pc, #272]	; 29a90 <CTimer::PollKernelTimers()+0x144>
   2997c:	e1a00007 	mov	r0, r7
   29980:	e58d1004 	str	r1, [sp, #4]
   29984:	eb000c07 	bl	2c9a8 <CPtrList::GetPtr(TPtrListElement*)>
   29988:	e2504000 	subs	r4, r0, #0
   2998c:	e59d1004 	ldr	r1, [sp, #4]
   29990:	0a00002e 	beq	29a50 <CTimer::PollKernelTimers()+0x104>
   29994:	e5943000 	ldr	r3, [r4]
   29998:	e1530008 	cmp	r3, r8
   2999c:	1a00002f 	bne	29a60 <CTimer::PollKernelTimers()+0x114>
   299a0:	e5952004 	ldr	r2, [r5, #4]
   299a4:	e5943008 	ldr	r3, [r4, #8]
   299a8:	e0433002 	sub	r3, r3, r2
   299ac:	e3530000 	cmp	r3, #0
   299b0:	ca00002e 	bgt	29a70 <CTimer::PollKernelTimers()+0x124>
   299b4:	e1a00007 	mov	r0, r7
   299b8:	e58d1004 	str	r1, [sp, #4]
   299bc:	eb000be4 	bl	2c954 <CPtrList::GetNext(TPtrListElement*)>
   299c0:	e59d1004 	ldr	r1, [sp, #4]
   299c4:	e1a06000 	mov	r6, r0
   299c8:	e1a00007 	mov	r0, r7
   299cc:	eb000c7d 	bl	2cbc8 <CPtrList::Remove(TPtrListElement*)>
   299d0:	e595301c 	ldr	r3, [r5, #28]
   299d4:	e3530000 	cmp	r3, #0
   299d8:	1a000010 	bne	29a20 <CTimer::PollKernelTimers()+0xd4>
   299dc:	e5943004 	ldr	r3, [r4, #4]
   299e0:	e3530000 	cmp	r3, #0
   299e4:	0a000011 	beq	29a30 <CTimer::PollKernelTimers()+0xe4>
   299e8:	e1a00004 	mov	r0, r4
   299ec:	e5942010 	ldr	r2, [r4, #16]
   299f0:	e594100c 	ldr	r1, [r4, #12]
   299f4:	e12fff33 	blx	r3
   299f8:	e1a00004 	mov	r0, r4
   299fc:	e3a01014 	mov	r1, #20
   29a00:	eb000560 	bl	2af88 <operator delete(void*, unsigned int)>
   29a04:	e595001c 	ldr	r0, [r5, #28]
   29a08:	e3500000 	cmp	r0, #0
   29a0c:	1a00000b 	bne	29a40 <CTimer::PollKernelTimers()+0xf4>
   29a10:	e3560000 	cmp	r6, #0
   29a14:	0a000015 	beq	29a70 <CTimer::PollKernelTimers()+0x124>
   29a18:	e1a01006 	mov	r1, r6
   29a1c:	eaffffd6 	b	2997c <CTimer::PollKernelTimers()+0x30>
   29a20:	eb0008a1 	bl	2bcac <LeaveCritical>
   29a24:	e5943004 	ldr	r3, [r4, #4]
   29a28:	e3530000 	cmp	r3, #0
   29a2c:	1affffed 	bne	299e8 <CTimer::PollKernelTimers()+0x9c>
   29a30:	e59f205c 	ldr	r2, [pc, #92]	; 29a94 <CTimer::PollKernelTimers()+0x148>
   29a34:	e59f105c 	ldr	r1, [pc, #92]	; 29a98 <CTimer::PollKernelTimers()+0x14c>
   29a38:	e59f005c 	ldr	r0, [pc, #92]	; 29a9c <CTimer::PollKernelTimers()+0x150>
   29a3c:	ebffeb3c 	bl	24734 <assertion_failed>
   29a40:	eb00086f 	bl	2bc04 <EnterCritical>
   29a44:	eafffff1 	b	29a10 <CTimer::PollKernelTimers()+0xc4>
   29a48:	eb00086d 	bl	2bc04 <EnterCritical>
   29a4c:	eaffffc4 	b	29964 <CTimer::PollKernelTimers()+0x18>
   29a50:	e3a02f73 	mov	r2, #460	; 0x1cc
   29a54:	e59f103c 	ldr	r1, [pc, #60]	; 29a98 <CTimer::PollKernelTimers()+0x14c>
   29a58:	e59f0040 	ldr	r0, [pc, #64]	; 29aa0 <CTimer::PollKernelTimers()+0x154>
   29a5c:	ebffeb34 	bl	24734 <assertion_failed>
   29a60:	e59f203c 	ldr	r2, [pc, #60]	; 29aa4 <CTimer::PollKernelTimers()+0x158>
   29a64:	e59f102c 	ldr	r1, [pc, #44]	; 29a98 <CTimer::PollKernelTimers()+0x14c>
   29a68:	e59f0038 	ldr	r0, [pc, #56]	; 29aa8 <CTimer::PollKernelTimers()+0x15c>
   29a6c:	ebffeb30 	bl	24734 <assertion_failed>
   29a70:	e595301c 	ldr	r3, [r5, #28]
   29a74:	e3530000 	cmp	r3, #0
   29a78:	1a000001 	bne	29a84 <CTimer::PollKernelTimers()+0x138>
   29a7c:	e28dd008 	add	sp, sp, #8
   29a80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29a84:	e28dd008 	add	sp, sp, #8
   29a88:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   29a8c:	ea000886 	b	2bcac <LeaveCritical>
   29a90:	4b544d43 	.word	0x4b544d43
   29a94:	000001db 	.word	0x000001db
   29a98:	00043ae0 	.word	0x00043ae0
   29a9c:	0004400c 	.word	0x0004400c
   29aa0:	0003f78c 	.word	0x0003f78c
   29aa4:	000001cd 	.word	0x000001cd
   29aa8:	00043aec 	.word	0x00043aec

00029aac <CTimer::InterruptHandler()>:
   29aac:	e92d4070 	push	{r4, r5, r6, lr}
   29ab0:	e3a03000 	mov	r3, #0
   29ab4:	e1a04000 	mov	r4, r0
   29ab8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   29abc:	e59f20f4 	ldr	r2, [pc, #244]	; 29bb8 <CTimer::InterruptHandler()+0x10c>
   29ac0:	e5923018 	ldr	r3, [r2, #24]
   29ac4:	e2833c27 	add	r3, r3, #9984	; 0x2700
   29ac8:	e2833010 	add	r3, r3, #16
   29acc:	e5823018 	str	r3, [r2, #24]
   29ad0:	e5921004 	ldr	r1, [r2, #4]
   29ad4:	e1530001 	cmp	r3, r1
   29ad8:	e3a01008 	mov	r1, #8
   29adc:	35923004 	ldrcc	r3, [r2, #4]
   29ae0:	32833c27 	addcc	r3, r3, #9984	; 0x2700
   29ae4:	32833010 	addcc	r3, r3, #16
   29ae8:	35823018 	strcc	r3, [r2, #24]
   29aec:	e59f20c4 	ldr	r2, [pc, #196]	; 29bb8 <CTimer::InterruptHandler()+0x10c>
   29af0:	e3a03000 	mov	r3, #0
   29af4:	e5821000 	str	r1, [r2]
   29af8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   29afc:	e5900010 	ldr	r0, [r0, #16]
   29b00:	e1500003 	cmp	r0, r3
   29b04:	1a000017 	bne	29b68 <CTimer::InterruptHandler()+0xbc>
   29b08:	e5942004 	ldr	r2, [r4, #4]
   29b0c:	e59f30a8 	ldr	r3, [pc, #168]	; 29bbc <CTimer::InterruptHandler()+0x110>
   29b10:	e2822001 	add	r2, r2, #1
   29b14:	e0831293 	umull	r1, r3, r3, r2
   29b18:	e1a032a3 	lsr	r3, r3, #5
   29b1c:	e0833103 	add	r3, r3, r3, lsl #2
   29b20:	e0833103 	add	r3, r3, r3, lsl #2
   29b24:	e0523103 	subs	r3, r2, r3, lsl #2
   29b28:	e5842004 	str	r2, [r4, #4]
   29b2c:	0a000017 	beq	29b90 <CTimer::InterruptHandler()+0xe4>
   29b30:	e1a00004 	mov	r0, r4
   29b34:	ebffff84 	bl	2994c <CTimer::PollKernelTimers()>
   29b38:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   29b3c:	e3530000 	cmp	r3, #0
   29b40:	08bd8070 	popeq	{r4, r5, r6, pc}
   29b44:	e3a05000 	mov	r5, #0
   29b48:	e2846028 	add	r6, r4, #40	; 0x28
   29b4c:	e4963004 	ldr	r3, [r6], #4
   29b50:	e12fff33 	blx	r3
   29b54:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   29b58:	e2855001 	add	r5, r5, #1
   29b5c:	e1530005 	cmp	r3, r5
   29b60:	8afffff9 	bhi	29b4c <CTimer::InterruptHandler()+0xa0>
   29b64:	e8bd8070 	pop	{r4, r5, r6, pc}
   29b68:	eb000825 	bl	2bc04 <EnterCritical>
   29b6c:	e5943004 	ldr	r3, [r4, #4]
   29b70:	e59f2048 	ldr	r2, [pc, #72]	; 29bc0 <CTimer::InterruptHandler()+0x114>
   29b74:	e2833001 	add	r3, r3, #1
   29b78:	e0020392 	mul	r2, r2, r3
   29b7c:	e59f1040 	ldr	r1, [pc, #64]	; 29bc4 <CTimer::InterruptHandler()+0x118>
   29b80:	e5843004 	str	r3, [r4, #4]
   29b84:	e1510162 	cmp	r1, r2, ror #2
   29b88:	e5943010 	ldr	r3, [r4, #16]
   29b8c:	3a000005 	bcc	29ba8 <CTimer::InterruptHandler()+0xfc>
   29b90:	e5942008 	ldr	r2, [r4, #8]
   29b94:	e2822001 	add	r2, r2, #1
   29b98:	e5842008 	str	r2, [r4, #8]
   29b9c:	e594200c 	ldr	r2, [r4, #12]
   29ba0:	e2822001 	add	r2, r2, #1
   29ba4:	e584200c 	str	r2, [r4, #12]
   29ba8:	e3530000 	cmp	r3, #0
   29bac:	0affffdf 	beq	29b30 <CTimer::InterruptHandler()+0x84>
   29bb0:	eb00083d 	bl	2bcac <LeaveCritical>
   29bb4:	eaffffdd 	b	29b30 <CTimer::InterruptHandler()+0x84>
   29bb8:	20003000 	.word	0x20003000
   29bbc:	51eb851f 	.word	0x51eb851f
   29bc0:	c28f5c29 	.word	0xc28f5c29
   29bc4:	028f5c28 	.word	0x028f5c28

00029bc8 <CTimer::InterruptHandler(void*)>:
   29bc8:	e3500000 	cmp	r0, #0
   29bcc:	0a000000 	beq	29bd4 <CTimer::InterruptHandler(void*)+0xc>
   29bd0:	eaffffb5 	b	29aac <CTimer::InterruptHandler()>
   29bd4:	e92d4010 	push	{r4, lr}
   29bd8:	e59f2008 	ldr	r2, [pc, #8]	; 29be8 <CTimer::InterruptHandler(void*)+0x20>
   29bdc:	e59f1008 	ldr	r1, [pc, #8]	; 29bec <CTimer::InterruptHandler(void*)+0x24>
   29be0:	e59f0008 	ldr	r0, [pc, #8]	; 29bf0 <CTimer::InterruptHandler(void*)+0x28>
   29be4:	ebffead2 	bl	24734 <assertion_failed>
   29be8:	00000223 	.word	0x00000223
   29bec:	00043ae0 	.word	0x00043ae0
   29bf0:	0003d518 	.word	0x0003d518

00029bf4 <CTimer::TuneMsDelay()>:
   29bf4:	e92d4070 	push	{r4, r5, r6, lr}
   29bf8:	e1a05000 	mov	r5, r0
   29bfc:	e5900020 	ldr	r0, [r0, #32]
   29c00:	e24dd008 	sub	sp, sp, #8
   29c04:	e0603280 	rsb	r3, r0, r0, lsl #5
   29c08:	e0800103 	add	r0, r0, r3, lsl #2
   29c0c:	e1a00180 	lsl	r0, r0, #3
   29c10:	e5954004 	ldr	r4, [r5, #4]
   29c14:	eb000a6f 	bl	2c5d8 <DelayLoop>
   29c18:	e5951004 	ldr	r1, [r5, #4]
   29c1c:	e59f0068 	ldr	r0, [pc, #104]	; 29c8c <CTimer::TuneMsDelay()+0x98>
   29c20:	e0411004 	sub	r1, r1, r4
   29c24:	eb004837 	bl	3bd08 <__udivsi3>
   29c28:	e1a06000 	mov	r6, r0
   29c2c:	e5953020 	ldr	r3, [r5, #32]
   29c30:	e59f4058 	ldr	r4, [pc, #88]	; 29c90 <CTimer::TuneMsDelay()+0x9c>
   29c34:	e0030093 	mul	r3, r3, r0
   29c38:	e0832394 	umull	r2, r3, r4, r3
   29c3c:	e59f1050 	ldr	r1, [pc, #80]	; 29c94 <CTimer::TuneMsDelay()+0xa0>
   29c40:	e1a032a3 	lsr	r3, r3, #5
   29c44:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   29c48:	e0821291 	umull	r1, r2, r1, r2
   29c4c:	e1a02322 	lsr	r2, r2, #6
   29c50:	e5852024 	str	r2, [r5, #36]	; 0x24
   29c54:	e5853020 	str	r3, [r5, #32]
   29c58:	ebfff39d 	bl	26ad4 <CLogger::Get()>
   29c5c:	e0832694 	umull	r2, r3, r4, r6
   29c60:	e1a032a3 	lsr	r3, r3, #5
   29c64:	e0832103 	add	r2, r3, r3, lsl #2
   29c68:	e0822102 	add	r2, r2, r2, lsl #2
   29c6c:	e0466102 	sub	r6, r6, r2, lsl #2
   29c70:	e88d0048 	stm	sp, {r3, r6}
   29c74:	e3a02003 	mov	r2, #3
   29c78:	e59f3018 	ldr	r3, [pc, #24]	; 29c98 <CTimer::TuneMsDelay()+0xa4>
   29c7c:	e59f1018 	ldr	r1, [pc, #24]	; 29c9c <CTimer::TuneMsDelay()+0xa8>
   29c80:	ebfff2d5 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29c84:	e28dd008 	add	sp, sp, #8
   29c88:	e8bd8070 	pop	{r4, r5, r6, pc}
   29c8c:	00002710 	.word	0x00002710
   29c90:	51eb851f 	.word	0x51eb851f
   29c94:	10624dd3 	.word	0x10624dd3
   29c98:	00043ba0 	.word	0x00043ba0
   29c9c:	00043c4c 	.word	0x00043c4c

00029ca0 <CTimer::Initialize()>:
   29ca0:	e92d4070 	push	{r4, r5, r6, lr}
   29ca4:	e1a04000 	mov	r4, r0
   29ca8:	e5900000 	ldr	r0, [r0]
   29cac:	e3500000 	cmp	r0, #0
   29cb0:	0a000011 	beq	29cfc <CTimer::Initialize()+0x5c>
   29cb4:	e1a03004 	mov	r3, r4
   29cb8:	e3a01003 	mov	r1, #3
   29cbc:	e59f2048 	ldr	r2, [pc, #72]	; 29d0c <CTimer::Initialize()+0x6c>
   29cc0:	eb0008cd 	bl	2bffc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   29cc4:	e3a05000 	mov	r5, #0
   29cc8:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   29ccc:	e59f203c 	ldr	r2, [pc, #60]	; 29d10 <CTimer::Initialize()+0x70>
   29cd0:	e59f303c 	ldr	r3, [pc, #60]	; 29d14 <CTimer::Initialize()+0x74>
   29cd4:	e1a00004 	mov	r0, r4
   29cd8:	e5823004 	str	r3, [r2, #4]
   29cdc:	e5923004 	ldr	r3, [r2, #4]
   29ce0:	e2833c27 	add	r3, r3, #9984	; 0x2700
   29ce4:	e2833010 	add	r3, r3, #16
   29ce8:	e5823018 	str	r3, [r2, #24]
   29cec:	ebffffc0 	bl	29bf4 <CTimer::TuneMsDelay()>
   29cf0:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   29cf4:	e3a00001 	mov	r0, #1
   29cf8:	e8bd8070 	pop	{r4, r5, r6, pc}
   29cfc:	e3a02065 	mov	r2, #101	; 0x65
   29d00:	e59f1010 	ldr	r1, [pc, #16]	; 29d18 <CTimer::Initialize()+0x78>
   29d04:	e59f0010 	ldr	r0, [pc, #16]	; 29d1c <CTimer::Initialize()+0x7c>
   29d08:	ebffea89 	bl	24734 <assertion_failed>
   29d0c:	00029bc8 	.word	0x00029bc8
   29d10:	20003000 	.word	0x20003000
   29d14:	fe363c80 	.word	0xfe363c80
   29d18:	00043ae0 	.word	0x00043ae0
   29d1c:	0003d550 	.word	0x0003d550

00029d20 <CTimer::RegisterPeriodicHandler(void (*)())>:
   29d20:	e3510000 	cmp	r1, #0
   29d24:	e92d4010 	push	{r4, lr}
   29d28:	0a00000b 	beq	29d5c <CTimer::RegisterPeriodicHandler(void (*)())+0x3c>
   29d2c:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   29d30:	e3530003 	cmp	r3, #3
   29d34:	8a00000c 	bhi	29d6c <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   29d38:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   29d3c:	e3a02000 	mov	r2, #0
   29d40:	e283300a 	add	r3, r3, #10
   29d44:	e7801103 	str	r1, [r0, r3, lsl #2]
   29d48:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   29d4c:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   29d50:	e2833001 	add	r3, r3, #1
   29d54:	e5803038 	str	r3, [r0, #56]	; 0x38
   29d58:	e8bd8010 	pop	{r4, pc}
   29d5c:	e59f2018 	ldr	r2, [pc, #24]	; 29d7c <CTimer::RegisterPeriodicHandler(void (*)())+0x5c>
   29d60:	e59f1018 	ldr	r1, [pc, #24]	; 29d80 <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   29d64:	e59f0018 	ldr	r0, [pc, #24]	; 29d84 <CTimer::RegisterPeriodicHandler(void (*)())+0x64>
   29d68:	ebffea71 	bl	24734 <assertion_failed>
   29d6c:	e59f2014 	ldr	r2, [pc, #20]	; 29d88 <CTimer::RegisterPeriodicHandler(void (*)())+0x68>
   29d70:	e59f1008 	ldr	r1, [pc, #8]	; 29d80 <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   29d74:	e59f0010 	ldr	r0, [pc, #16]	; 29d8c <CTimer::RegisterPeriodicHandler(void (*)())+0x6c>
   29d78:	ebffea6d 	bl	24734 <assertion_failed>
   29d7c:	00000239 	.word	0x00000239
   29d80:	00043ae0 	.word	0x00043ae0
   29d84:	0004400c 	.word	0x0004400c
   29d88:	0000023b 	.word	0x0000023b
   29d8c:	00043bb8 	.word	0x00043bb8

00029d90 <CTimer::SimpleMsDelay(unsigned int)>:
   29d90:	e3500000 	cmp	r0, #0
   29d94:	012fff1e 	bxeq	lr
   29d98:	e0603280 	rsb	r3, r0, r0, lsl #5
   29d9c:	e0800103 	add	r0, r0, r3, lsl #2
   29da0:	e1b00180 	lsls	r0, r0, #3
   29da4:	012fff1e 	bxeq	lr
   29da8:	eafffce2 	b	29138 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

00029dac <CTimer::SimpleusDelay(unsigned int)>:
   29dac:	e3500000 	cmp	r0, #0
   29db0:	012fff1e 	bxeq	lr
   29db4:	eafffcdf 	b	29138 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

00029db8 <CTimer::IsLeapYear(unsigned int)>:
   29db8:	e59f3030 	ldr	r3, [pc, #48]	; 29df0 <CTimer::IsLeapYear(unsigned int)+0x38>
   29dbc:	e59f2030 	ldr	r2, [pc, #48]	; 29df4 <CTimer::IsLeapYear(unsigned int)+0x3c>
   29dc0:	e0030093 	mul	r3, r3, r0
   29dc4:	e1520163 	cmp	r2, r3, ror #2
   29dc8:	2a000003 	bcs	29ddc <CTimer::IsLeapYear(unsigned int)+0x24>
   29dcc:	e3100003 	tst	r0, #3
   29dd0:	03a00001 	moveq	r0, #1
   29dd4:	13a00000 	movne	r0, #0
   29dd8:	e12fff1e 	bx	lr
   29ddc:	e59f2014 	ldr	r2, [pc, #20]	; 29df8 <CTimer::IsLeapYear(unsigned int)+0x40>
   29de0:	e1520263 	cmp	r2, r3, ror #4
   29de4:	23a00001 	movcs	r0, #1
   29de8:	33a00000 	movcc	r0, #0
   29dec:	e12fff1e 	bx	lr
   29df0:	c28f5c29 	.word	0xc28f5c29
   29df4:	028f5c28 	.word	0x028f5c28
   29df8:	00a3d70a 	.word	0x00a3d70a

00029dfc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   29dfc:	e3500001 	cmp	r0, #1
   29e00:	0a000002 	beq	29e10 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   29e04:	e59f3048 	ldr	r3, [pc, #72]	; 29e54 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x58>
   29e08:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   29e0c:	e12fff1e 	bx	lr
   29e10:	e59f3040 	ldr	r3, [pc, #64]	; 29e58 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x5c>
   29e14:	e59f2040 	ldr	r2, [pc, #64]	; 29e5c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
   29e18:	e0030193 	mul	r3, r3, r1
   29e1c:	e1520163 	cmp	r2, r3, ror #2
   29e20:	2a000006 	bcs	29e40 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x44>
   29e24:	e3110003 	tst	r1, #3
   29e28:	03a03001 	moveq	r3, #1
   29e2c:	13a03000 	movne	r3, #0
   29e30:	e3530000 	cmp	r3, #0
   29e34:	0afffff2 	beq	29e04 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   29e38:	e3a0001d 	mov	r0, #29
   29e3c:	e12fff1e 	bx	lr
   29e40:	e59f2018 	ldr	r2, [pc, #24]	; 29e60 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x64>
   29e44:	e1520263 	cmp	r2, r3, ror #4
   29e48:	23a03001 	movcs	r3, #1
   29e4c:	33a03000 	movcc	r3, #0
   29e50:	eafffff6 	b	29e30 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x34>
   29e54:	00043c1c 	.word	0x00043c1c
   29e58:	c28f5c29 	.word	0xc28f5c29
   29e5c:	028f5c28 	.word	0x028f5c28
   29e60:	00a3d70a 	.word	0x00a3d70a

00029e64 <CTimer::Get()>:
   29e64:	e59f301c 	ldr	r3, [pc, #28]	; 29e88 <CTimer::Get()+0x24>
   29e68:	e5930000 	ldr	r0, [r3]
   29e6c:	e3500000 	cmp	r0, #0
   29e70:	112fff1e 	bxne	lr
   29e74:	e3a02f9f 	mov	r2, #636	; 0x27c
   29e78:	e92d4010 	push	{r4, lr}
   29e7c:	e59f1008 	ldr	r1, [pc, #8]	; 29e8c <CTimer::Get()+0x28>
   29e80:	e59f0008 	ldr	r0, [pc, #8]	; 29e90 <CTimer::Get()+0x2c>
   29e84:	ebffea2a 	bl	24734 <assertion_failed>
   29e88:	0004c558 	.word	0x0004c558
   29e8c:	00043ae0 	.word	0x00043ae0
   29e90:	00041d54 	.word	0x00041d54

00029e94 <memset>:
   29e94:	e352000f 	cmp	r2, #15
   29e98:	e200c003 	and	ip, r0, #3
   29e9c:	93a03000 	movls	r3, #0
   29ea0:	83a03001 	movhi	r3, #1
   29ea4:	e35c0000 	cmp	ip, #0
   29ea8:	13a03000 	movne	r3, #0
   29eac:	e3530000 	cmp	r3, #0
   29eb0:	1a000008 	bne	29ed8 <memset+0x44>
   29eb4:	e3520000 	cmp	r2, #0
   29eb8:	e1a03000 	mov	r3, r0
   29ebc:	012fff1e 	bxeq	lr
   29ec0:	e6af1071 	sxtb	r1, r1
   29ec4:	e0802002 	add	r2, r0, r2
   29ec8:	e4c31001 	strb	r1, [r3], #1
   29ecc:	e1530002 	cmp	r3, r2
   29ed0:	1afffffc 	bne	29ec8 <memset+0x34>
   29ed4:	e12fff1e 	bx	lr
   29ed8:	e2423010 	sub	r3, r2, #16
   29edc:	e3c3c00f 	bic	ip, r3, #15
   29ee0:	e92d4010 	push	{r4, lr}
   29ee4:	e2804020 	add	r4, r0, #32
   29ee8:	e181e401 	orr	lr, r1, r1, lsl #8
   29eec:	e084400c 	add	r4, r4, ip
   29ef0:	e1a03223 	lsr	r3, r3, #4
   29ef4:	e18ee80e 	orr	lr, lr, lr, lsl #16
   29ef8:	e280c010 	add	ip, r0, #16
   29efc:	e50ce010 	str	lr, [ip, #-16]
   29f00:	e50ce00c 	str	lr, [ip, #-12]
   29f04:	e50ce008 	str	lr, [ip, #-8]
   29f08:	e50ce004 	str	lr, [ip, #-4]
   29f0c:	e28cc010 	add	ip, ip, #16
   29f10:	e15c0004 	cmp	ip, r4
   29f14:	1afffff8 	bne	29efc <memset+0x68>
   29f18:	e202200f 	and	r2, r2, #15
   29f1c:	e2833001 	add	r3, r3, #1
   29f20:	e3520000 	cmp	r2, #0
   29f24:	e0803203 	add	r3, r0, r3, lsl #4
   29f28:	08bd8010 	popeq	{r4, pc}
   29f2c:	e6af1071 	sxtb	r1, r1
   29f30:	e0832002 	add	r2, r3, r2
   29f34:	e4c31001 	strb	r1, [r3], #1
   29f38:	e1530002 	cmp	r3, r2
   29f3c:	1afffffc 	bne	29f34 <memset+0xa0>
   29f40:	e8bd8010 	pop	{r4, pc}

00029f44 <memmove>:
   29f44:	e1500001 	cmp	r0, r1
   29f48:	9a000002 	bls	29f58 <memmove+0x14>
   29f4c:	e0813002 	add	r3, r1, r2
   29f50:	e1530000 	cmp	r3, r0
   29f54:	8a000000 	bhi	29f5c <memmove+0x18>
   29f58:	ea000216 	b	2a7b8 <memcpy>
   29f5c:	e3520000 	cmp	r2, #0
   29f60:	e0802002 	add	r2, r0, r2
   29f64:	012fff1e 	bxeq	lr
   29f68:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   29f6c:	e1510003 	cmp	r1, r3
   29f70:	e562c001 	strb	ip, [r2, #-1]!
   29f74:	1afffffb 	bne	29f68 <memmove+0x24>
   29f78:	e12fff1e 	bx	lr

00029f7c <memcmp>:
   29f7c:	e3520000 	cmp	r2, #0
   29f80:	e242c001 	sub	ip, r2, #1
   29f84:	0a00000c 	beq	29fbc <memcmp+0x40>
   29f88:	e080c00c 	add	ip, r0, ip
   29f8c:	e2411001 	sub	r1, r1, #1
   29f90:	e2400001 	sub	r0, r0, #1
   29f94:	ea000002 	b	29fa4 <memcmp+0x28>
   29f98:	3a000009 	bcc	29fc4 <memcmp+0x48>
   29f9c:	e150000c 	cmp	r0, ip
   29fa0:	0a000005 	beq	29fbc <memcmp+0x40>
   29fa4:	e5f02001 	ldrb	r2, [r0, #1]!
   29fa8:	e5f13001 	ldrb	r3, [r1, #1]!
   29fac:	e1520003 	cmp	r2, r3
   29fb0:	9afffff8 	bls	29f98 <memcmp+0x1c>
   29fb4:	e3a00001 	mov	r0, #1
   29fb8:	e12fff1e 	bx	lr
   29fbc:	e3a00000 	mov	r0, #0
   29fc0:	e12fff1e 	bx	lr
   29fc4:	e3e00000 	mvn	r0, #0
   29fc8:	e12fff1e 	bx	lr

00029fcc <strlen>:
   29fcc:	e0d030d1 	ldrsb	r3, [r0], #1
   29fd0:	e3530000 	cmp	r3, #0
   29fd4:	0a000004 	beq	29fec <strlen+0x20>
   29fd8:	e3a03000 	mov	r3, #0
   29fdc:	e0d020d1 	ldrsb	r2, [r0], #1
   29fe0:	e2833001 	add	r3, r3, #1
   29fe4:	e3520000 	cmp	r2, #0
   29fe8:	1afffffb 	bne	29fdc <strlen+0x10>
   29fec:	e1a00003 	mov	r0, r3
   29ff0:	e12fff1e 	bx	lr

00029ff4 <strcmp>:
   29ff4:	e1d030d0 	ldrsb	r3, [r0]
   29ff8:	e3530000 	cmp	r3, #0
   29ffc:	1a000006 	bne	2a01c <strcmp+0x28>
   2a000:	ea000016 	b	2a060 <strcmp+0x6c>
   2a004:	e1520003 	cmp	r2, r3
   2a008:	ba00000c 	blt	2a040 <strcmp+0x4c>
   2a00c:	ca00000d 	bgt	2a048 <strcmp+0x54>
   2a010:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a014:	e3530000 	cmp	r3, #0
   2a018:	0a00000c 	beq	2a050 <strcmp+0x5c>
   2a01c:	e1a0c001 	mov	ip, r1
   2a020:	e0d120d1 	ldrsb	r2, [r1], #1
   2a024:	e3520000 	cmp	r2, #0
   2a028:	1afffff5 	bne	2a004 <strcmp+0x10>
   2a02c:	e1530002 	cmp	r3, r2
   2a030:	ca000002 	bgt	2a040 <strcmp+0x4c>
   2a034:	b3e00000 	mvnlt	r0, #0
   2a038:	a3a00000 	movge	r0, #0
   2a03c:	e12fff1e 	bx	lr
   2a040:	e3a00001 	mov	r0, #1
   2a044:	e12fff1e 	bx	lr
   2a048:	e3e00000 	mvn	r0, #0
   2a04c:	e12fff1e 	bx	lr
   2a050:	e1dc20d1 	ldrsb	r2, [ip, #1]
   2a054:	e1530002 	cmp	r3, r2
   2a058:	dafffff5 	ble	2a034 <strcmp+0x40>
   2a05c:	eafffff7 	b	2a040 <strcmp+0x4c>
   2a060:	e1d120d0 	ldrsb	r2, [r1]
   2a064:	eafffff0 	b	2a02c <strcmp+0x38>

0002a068 <strcasecmp>:
   2a068:	e2400001 	sub	r0, r0, #1
   2a06c:	ea000009 	b	2a098 <strcasecmp+0x30>
   2a070:	e0d130d1 	ldrsb	r3, [r1], #1
   2a074:	e243c061 	sub	ip, r3, #97	; 0x61
   2a078:	e35c0019 	cmp	ip, #25
   2a07c:	92433020 	subls	r3, r3, #32
   2a080:	9a000001 	bls	2a08c <strcasecmp+0x24>
   2a084:	e3530000 	cmp	r3, #0
   2a088:	0a000012 	beq	2a0d8 <strcasecmp+0x70>
   2a08c:	e1520003 	cmp	r2, r3
   2a090:	ca000012 	bgt	2a0e0 <strcasecmp+0x78>
   2a094:	ba000013 	blt	2a0e8 <strcasecmp+0x80>
   2a098:	e1f020d1 	ldrsb	r2, [r0, #1]!
   2a09c:	e2423061 	sub	r3, r2, #97	; 0x61
   2a0a0:	e3530019 	cmp	r3, #25
   2a0a4:	92422020 	subls	r2, r2, #32
   2a0a8:	9afffff0 	bls	2a070 <strcasecmp+0x8>
   2a0ac:	e3520000 	cmp	r2, #0
   2a0b0:	1affffee 	bne	2a070 <strcasecmp+0x8>
   2a0b4:	e1d130d0 	ldrsb	r3, [r1]
   2a0b8:	e2431061 	sub	r1, r3, #97	; 0x61
   2a0bc:	e3510019 	cmp	r1, #25
   2a0c0:	92433020 	subls	r3, r3, #32
   2a0c4:	8a000003 	bhi	2a0d8 <strcasecmp+0x70>
   2a0c8:	e1530002 	cmp	r3, r2
   2a0cc:	d3a00000 	movle	r0, #0
   2a0d0:	c3e00000 	mvngt	r0, #0
   2a0d4:	e12fff1e 	bx	lr
   2a0d8:	e1530002 	cmp	r3, r2
   2a0dc:	aafffff9 	bge	2a0c8 <strcasecmp+0x60>
   2a0e0:	e3a00001 	mov	r0, #1
   2a0e4:	e12fff1e 	bx	lr
   2a0e8:	e3e00000 	mvn	r0, #0
   2a0ec:	e12fff1e 	bx	lr

0002a0f0 <strncmp>:
   2a0f0:	e3520000 	cmp	r2, #0
   2a0f4:	0a000015 	beq	2a150 <strncmp+0x60>
   2a0f8:	e240c001 	sub	ip, r0, #1
   2a0fc:	e0810002 	add	r0, r1, r2
   2a100:	ea000007 	b	2a124 <strncmp+0x34>
   2a104:	e0d120d1 	ldrsb	r2, [r1], #1
   2a108:	e3520000 	cmp	r2, #0
   2a10c:	0a000008 	beq	2a134 <strncmp+0x44>
   2a110:	e1530002 	cmp	r3, r2
   2a114:	ca00000b 	bgt	2a148 <strncmp+0x58>
   2a118:	ba00000e 	blt	2a158 <strncmp+0x68>
   2a11c:	e1510000 	cmp	r1, r0
   2a120:	0a00000a 	beq	2a150 <strncmp+0x60>
   2a124:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2a128:	e3530000 	cmp	r3, #0
   2a12c:	1afffff4 	bne	2a104 <strncmp+0x14>
   2a130:	e1d120d0 	ldrsb	r2, [r1]
   2a134:	e1520003 	cmp	r2, r3
   2a138:	ba000002 	blt	2a148 <strncmp+0x58>
   2a13c:	c3e00000 	mvngt	r0, #0
   2a140:	d3a00000 	movle	r0, #0
   2a144:	e12fff1e 	bx	lr
   2a148:	e3a00001 	mov	r0, #1
   2a14c:	e12fff1e 	bx	lr
   2a150:	e3a00000 	mov	r0, #0
   2a154:	e12fff1e 	bx	lr
   2a158:	e3e00000 	mvn	r0, #0
   2a15c:	e12fff1e 	bx	lr

0002a160 <strncasecmp>:
   2a160:	e3520000 	cmp	r2, #0
   2a164:	0a00001e 	beq	2a1e4 <strncasecmp+0x84>
   2a168:	e240c001 	sub	ip, r0, #1
   2a16c:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2a170:	e2430061 	sub	r0, r3, #97	; 0x61
   2a174:	e3500019 	cmp	r0, #25
   2a178:	92433020 	subls	r3, r3, #32
   2a17c:	8a00000e 	bhi	2a1bc <strncasecmp+0x5c>
   2a180:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2a184:	e0d100d1 	ldrsb	r0, [r1], #1
   2a188:	e240e061 	sub	lr, r0, #97	; 0x61
   2a18c:	e35e0019 	cmp	lr, #25
   2a190:	92400020 	subls	r0, r0, #32
   2a194:	9a000014 	bls	2a1ec <strncasecmp+0x8c>
   2a198:	e3500000 	cmp	r0, #0
   2a19c:	1a000012 	bne	2a1ec <strncasecmp+0x8c>
   2a1a0:	e1530000 	cmp	r3, r0
   2a1a4:	ca000022 	bgt	2a234 <strncasecmp+0xd4>
   2a1a8:	e1500003 	cmp	r0, r3
   2a1ac:	d3a02000 	movle	r2, #0
   2a1b0:	c3e02000 	mvngt	r2, #0
   2a1b4:	e1a00002 	mov	r0, r2
   2a1b8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2a1bc:	e3530000 	cmp	r3, #0
   2a1c0:	1affffee 	bne	2a180 <strncasecmp+0x20>
   2a1c4:	e1d100d0 	ldrsb	r0, [r1]
   2a1c8:	e2402061 	sub	r2, r0, #97	; 0x61
   2a1cc:	e3520019 	cmp	r2, #25
   2a1d0:	92400020 	subls	r0, r0, #32
   2a1d4:	8a00001c 	bhi	2a24c <strncasecmp+0xec>
   2a1d8:	e1500003 	cmp	r0, r3
   2a1dc:	d3a02000 	movle	r2, #0
   2a1e0:	c3e02000 	mvngt	r2, #0
   2a1e4:	e1a00002 	mov	r0, r2
   2a1e8:	e12fff1e 	bx	lr
   2a1ec:	e1530000 	cmp	r3, r0
   2a1f0:	ca00000f 	bgt	2a234 <strncasecmp+0xd4>
   2a1f4:	ba000011 	blt	2a240 <strncasecmp+0xe0>
   2a1f8:	e2522001 	subs	r2, r2, #1
   2a1fc:	0affffec 	beq	2a1b4 <strncasecmp+0x54>
   2a200:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2a204:	e2430061 	sub	r0, r3, #97	; 0x61
   2a208:	e3500019 	cmp	r0, #25
   2a20c:	92433020 	subls	r3, r3, #32
   2a210:	9affffdb 	bls	2a184 <strncasecmp+0x24>
   2a214:	e3530000 	cmp	r3, #0
   2a218:	1affffd9 	bne	2a184 <strncasecmp+0x24>
   2a21c:	e1d100d0 	ldrsb	r0, [r1]
   2a220:	e2402061 	sub	r2, r0, #97	; 0x61
   2a224:	e3520019 	cmp	r2, #25
   2a228:	92400020 	subls	r0, r0, #32
   2a22c:	9affffdd 	bls	2a1a8 <strncasecmp+0x48>
   2a230:	eaffffda 	b	2a1a0 <strncasecmp+0x40>
   2a234:	e3a02001 	mov	r2, #1
   2a238:	e1a00002 	mov	r0, r2
   2a23c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2a240:	e3e02000 	mvn	r2, #0
   2a244:	e1a00002 	mov	r0, r2
   2a248:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2a24c:	e1530000 	cmp	r3, r0
   2a250:	c3a02001 	movgt	r2, #1
   2a254:	daffffdf 	ble	2a1d8 <strncasecmp+0x78>
   2a258:	eaffffe1 	b	2a1e4 <strncasecmp+0x84>

0002a25c <strcpy>:
   2a25c:	e1d130d0 	ldrsb	r3, [r1]
   2a260:	e1a02000 	mov	r2, r0
   2a264:	e3530000 	cmp	r3, #0
   2a268:	0a000003 	beq	2a27c <strcpy+0x20>
   2a26c:	e4c23001 	strb	r3, [r2], #1
   2a270:	e1f130d1 	ldrsb	r3, [r1, #1]!
   2a274:	e3530000 	cmp	r3, #0
   2a278:	1afffffb 	bne	2a26c <strcpy+0x10>
   2a27c:	e3a03000 	mov	r3, #0
   2a280:	e5c23000 	strb	r3, [r2]
   2a284:	e12fff1e 	bx	lr

0002a288 <strncpy>:
   2a288:	e3520000 	cmp	r2, #0
   2a28c:	012fff1e 	bxeq	lr
   2a290:	e1a0c000 	mov	ip, r0
   2a294:	e2411001 	sub	r1, r1, #1
   2a298:	e0802002 	add	r2, r0, r2
   2a29c:	ea000002 	b	2a2ac <strncpy+0x24>
   2a2a0:	e4cc3001 	strb	r3, [ip], #1
   2a2a4:	e15c0002 	cmp	ip, r2
   2a2a8:	012fff1e 	bxeq	lr
   2a2ac:	e1f130d1 	ldrsb	r3, [r1, #1]!
   2a2b0:	e3530000 	cmp	r3, #0
   2a2b4:	1afffff9 	bne	2a2a0 <strncpy+0x18>
   2a2b8:	e5cc3000 	strb	r3, [ip]
   2a2bc:	e12fff1e 	bx	lr

0002a2c0 <strcat>:
   2a2c0:	e1d030d0 	ldrsb	r3, [r0]
   2a2c4:	e3530000 	cmp	r3, #0
   2a2c8:	e1a03000 	mov	r3, r0
   2a2cc:	0a000002 	beq	2a2dc <strcat+0x1c>
   2a2d0:	e1f320d1 	ldrsb	r2, [r3, #1]!
   2a2d4:	e3520000 	cmp	r2, #0
   2a2d8:	1afffffc 	bne	2a2d0 <strcat+0x10>
   2a2dc:	e1d120d0 	ldrsb	r2, [r1]
   2a2e0:	e3520000 	cmp	r2, #0
   2a2e4:	0a000003 	beq	2a2f8 <strcat+0x38>
   2a2e8:	e4c32001 	strb	r2, [r3], #1
   2a2ec:	e1f120d1 	ldrsb	r2, [r1, #1]!
   2a2f0:	e3520000 	cmp	r2, #0
   2a2f4:	1afffffb 	bne	2a2e8 <strcat+0x28>
   2a2f8:	e3a02000 	mov	r2, #0
   2a2fc:	e5c32000 	strb	r2, [r3]
   2a300:	e12fff1e 	bx	lr

0002a304 <strchr>:
   2a304:	e1d030d0 	ldrsb	r3, [r0]
   2a308:	e3530000 	cmp	r3, #0
   2a30c:	0a000004 	beq	2a324 <strchr+0x20>
   2a310:	e1530001 	cmp	r3, r1
   2a314:	012fff1e 	bxeq	lr
   2a318:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a31c:	e3530000 	cmp	r3, #0
   2a320:	1afffffa 	bne	2a310 <strchr+0xc>
   2a324:	e1a00003 	mov	r0, r3
   2a328:	e12fff1e 	bx	lr

0002a32c <strstr>:
   2a32c:	e1d030d0 	ldrsb	r3, [r0]
   2a330:	e3530000 	cmp	r3, #0
   2a334:	1a000003 	bne	2a348 <strstr+0x1c>
   2a338:	e1d130d0 	ldrsb	r3, [r1]
   2a33c:	e3530000 	cmp	r3, #0
   2a340:	13a00000 	movne	r0, #0
   2a344:	e12fff1e 	bx	lr
   2a348:	e92d4010 	push	{r4, lr}
   2a34c:	e1d140d0 	ldrsb	r4, [r1]
   2a350:	e3540000 	cmp	r4, #0
   2a354:	08bd8010 	popeq	{r4, pc}
   2a358:	e1a0e001 	mov	lr, r1
   2a35c:	e1a03004 	mov	r3, r4
   2a360:	e2402001 	sub	r2, r0, #1
   2a364:	ea000002 	b	2a374 <strstr+0x48>
   2a368:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   2a36c:	e3530000 	cmp	r3, #0
   2a370:	08bd8010 	popeq	{r4, pc}
   2a374:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   2a378:	e15c0003 	cmp	ip, r3
   2a37c:	0afffff9 	beq	2a368 <strstr+0x3c>
   2a380:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a384:	e3530000 	cmp	r3, #0
   2a388:	1afffff0 	bne	2a350 <strstr+0x24>
   2a38c:	e1a00003 	mov	r0, r3
   2a390:	e8bd8010 	pop	{r4, pc}

0002a394 <strtok_r>:
   2a394:	e3500000 	cmp	r0, #0
   2a398:	0a000027 	beq	2a43c <strtok_r+0xa8>
   2a39c:	e1d0c0d0 	ldrsb	ip, [r0]
   2a3a0:	e35c0000 	cmp	ip, #0
   2a3a4:	0a00002a 	beq	2a454 <strtok_r+0xc0>
   2a3a8:	e92d4030 	push	{r4, r5, lr}
   2a3ac:	e1d140d0 	ldrsb	r4, [r1]
   2a3b0:	e3540000 	cmp	r4, #0
   2a3b4:	0a00000a 	beq	2a3e4 <strtok_r+0x50>
   2a3b8:	e1a0e001 	mov	lr, r1
   2a3bc:	e1a03004 	mov	r3, r4
   2a3c0:	ea000002 	b	2a3d0 <strtok_r+0x3c>
   2a3c4:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   2a3c8:	e3530000 	cmp	r3, #0
   2a3cc:	0a000004 	beq	2a3e4 <strtok_r+0x50>
   2a3d0:	e153000c 	cmp	r3, ip
   2a3d4:	1afffffa 	bne	2a3c4 <strtok_r+0x30>
   2a3d8:	e3540000 	cmp	r4, #0
   2a3dc:	e1f0c0d1 	ldrsb	ip, [r0, #1]!
   2a3e0:	1afffff4 	bne	2a3b8 <strtok_r+0x24>
   2a3e4:	e35c0000 	cmp	ip, #0
   2a3e8:	11a05000 	movne	r5, r0
   2a3ec:	0a00001b 	beq	2a460 <strtok_r+0xcc>
   2a3f0:	e3540000 	cmp	r4, #0
   2a3f4:	0a00000b 	beq	2a428 <strtok_r+0x94>
   2a3f8:	e1a03004 	mov	r3, r4
   2a3fc:	e1a0e001 	mov	lr, r1
   2a400:	ea000002 	b	2a410 <strtok_r+0x7c>
   2a404:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   2a408:	e3530000 	cmp	r3, #0
   2a40c:	0a000005 	beq	2a428 <strtok_r+0x94>
   2a410:	e153000c 	cmp	r3, ip
   2a414:	1afffffa 	bne	2a404 <strtok_r+0x70>
   2a418:	e3a03000 	mov	r3, #0
   2a41c:	e4c53001 	strb	r3, [r5], #1
   2a420:	e5825000 	str	r5, [r2]
   2a424:	e8bd8030 	pop	{r4, r5, pc}
   2a428:	e1f5c0d1 	ldrsb	ip, [r5, #1]!
   2a42c:	e35c0000 	cmp	ip, #0
   2a430:	1affffee 	bne	2a3f0 <strtok_r+0x5c>
   2a434:	e5825000 	str	r5, [r2]
   2a438:	e8bd8030 	pop	{r4, r5, pc}
   2a43c:	e5920000 	ldr	r0, [r2]
   2a440:	e3500000 	cmp	r0, #0
   2a444:	012fff1e 	bxeq	lr
   2a448:	e1d0c0d0 	ldrsb	ip, [r0]
   2a44c:	e35c0000 	cmp	ip, #0
   2a450:	1affffd4 	bne	2a3a8 <strtok_r+0x14>
   2a454:	e3a00000 	mov	r0, #0
   2a458:	e5820000 	str	r0, [r2]
   2a45c:	e12fff1e 	bx	lr
   2a460:	e3a00000 	mov	r0, #0
   2a464:	e5820000 	str	r0, [r2]
   2a468:	e8bd8030 	pop	{r4, r5, pc}

0002a46c <strtoul>:
   2a46c:	e3510000 	cmp	r1, #0
   2a470:	e2423002 	sub	r3, r2, #2
   2a474:	15810000 	strne	r0, [r1]
   2a478:	e3520000 	cmp	r2, #0
   2a47c:	13530022 	cmpne	r3, #34	; 0x22
   2a480:	8a000044 	bhi	2a598 <strtoul+0x12c>
   2a484:	e92d4070 	push	{r4, r5, r6, lr}
   2a488:	e1a0e000 	mov	lr, r0
   2a48c:	e1de30d0 	ldrsb	r3, [lr]
   2a490:	e1a0c00e 	mov	ip, lr
   2a494:	e2430009 	sub	r0, r3, #9
   2a498:	e3530020 	cmp	r3, #32
   2a49c:	e28ee001 	add	lr, lr, #1
   2a4a0:	e6ef0070 	uxtb	r0, r0
   2a4a4:	0afffff8 	beq	2a48c <strtoul+0x20>
   2a4a8:	e3500004 	cmp	r0, #4
   2a4ac:	9afffff6 	bls	2a48c <strtoul+0x20>
   2a4b0:	e353002b 	cmp	r3, #43	; 0x2b
   2a4b4:	0a000027 	beq	2a558 <strtoul+0xec>
   2a4b8:	e353002d 	cmp	r3, #45	; 0x2d
   2a4bc:	01dc30d1 	ldrsbeq	r3, [ip, #1]
   2a4c0:	03a06001 	moveq	r6, #1
   2a4c4:	01a0c00e 	moveq	ip, lr
   2a4c8:	13a06000 	movne	r6, #0
   2a4cc:	e3530030 	cmp	r3, #48	; 0x30
   2a4d0:	0a000025 	beq	2a56c <strtoul+0x100>
   2a4d4:	e3520000 	cmp	r2, #0
   2a4d8:	03a0200a 	moveq	r2, #10
   2a4dc:	e353002f 	cmp	r3, #47	; 0x2f
   2a4e0:	e1a0e003 	mov	lr, r3
   2a4e4:	da00003c 	ble	2a5dc <strtoul+0x170>
   2a4e8:	e3a05001 	mov	r5, #1
   2a4ec:	e3a04000 	mov	r4, #0
   2a4f0:	ea000008 	b	2a518 <strtoul+0xac>
   2a4f4:	e020e294 	mla	r0, r4, r2, lr
   2a4f8:	e1500004 	cmp	r0, r4
   2a4fc:	3a00002b 	bcc	2a5b0 <strtoul+0x144>
   2a500:	e1fce0d1 	ldrsb	lr, [ip, #1]!
   2a504:	e3a05000 	mov	r5, #0
   2a508:	e35e002f 	cmp	lr, #47	; 0x2f
   2a50c:	e1a0300e 	mov	r3, lr
   2a510:	da00002b 	ble	2a5c4 <strtoul+0x158>
   2a514:	e1a04000 	mov	r4, r0
   2a518:	e2433061 	sub	r3, r3, #97	; 0x61
   2a51c:	e3530019 	cmp	r3, #25
   2a520:	924ee020 	subls	lr, lr, #32
   2a524:	e35e0040 	cmp	lr, #64	; 0x40
   2a528:	c24ee007 	subgt	lr, lr, #7
   2a52c:	e24ee030 	sub	lr, lr, #48	; 0x30
   2a530:	e15e0002 	cmp	lr, r2
   2a534:	baffffee 	blt	2a4f4 <strtoul+0x88>
   2a538:	e1a00004 	mov	r0, r4
   2a53c:	e2255001 	eor	r5, r5, #1
   2a540:	e3510000 	cmp	r1, #0
   2a544:	e0055006 	and	r5, r5, r6
   2a548:	1581c000 	strne	ip, [r1]
   2a54c:	e3550000 	cmp	r5, #0
   2a550:	12600000 	rsbne	r0, r0, #0
   2a554:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a558:	e1dc30d1 	ldrsb	r3, [ip, #1]
   2a55c:	e3a06000 	mov	r6, #0
   2a560:	e3530030 	cmp	r3, #48	; 0x30
   2a564:	e1a0c00e 	mov	ip, lr
   2a568:	1affffd9 	bne	2a4d4 <strtoul+0x68>
   2a56c:	e1dc30d1 	ldrsb	r3, [ip, #1]
   2a570:	e28ce001 	add	lr, ip, #1
   2a574:	e3c30020 	bic	r0, r3, #32
   2a578:	e3500058 	cmp	r0, #88	; 0x58
   2a57c:	1a000007 	bne	2a5a0 <strtoul+0x134>
   2a580:	e3d23010 	bics	r3, r2, #16
   2a584:	1a000012 	bne	2a5d4 <strtoul+0x168>
   2a588:	e1dc30d2 	ldrsb	r3, [ip, #2]
   2a58c:	e3a02010 	mov	r2, #16
   2a590:	e28cc002 	add	ip, ip, #2
   2a594:	eaffffd0 	b	2a4dc <strtoul+0x70>
   2a598:	e3a00000 	mov	r0, #0
   2a59c:	e12fff1e 	bx	lr
   2a5a0:	e3520000 	cmp	r2, #0
   2a5a4:	e1a0c00e 	mov	ip, lr
   2a5a8:	03a02008 	moveq	r2, #8
   2a5ac:	eaffffca 	b	2a4dc <strtoul+0x70>
   2a5b0:	e3510000 	cmp	r1, #0
   2a5b4:	0a000004 	beq	2a5cc <strtoul+0x160>
   2a5b8:	e3e00000 	mvn	r0, #0
   2a5bc:	e581c000 	str	ip, [r1]
   2a5c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a5c4:	e3a05001 	mov	r5, #1
   2a5c8:	eaffffdc 	b	2a540 <strtoul+0xd4>
   2a5cc:	e3e00000 	mvn	r0, #0
   2a5d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a5d4:	e3a00000 	mov	r0, #0
   2a5d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a5dc:	e3510000 	cmp	r1, #0
   2a5e0:	0afffffb 	beq	2a5d4 <strtoul+0x168>
   2a5e4:	e3a00000 	mov	r0, #0
   2a5e8:	e581c000 	str	ip, [r1]
   2a5ec:	e8bd8070 	pop	{r4, r5, r6, pc}

0002a5f0 <strtoull>:
   2a5f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a5f4:	e2423002 	sub	r3, r2, #2
   2a5f8:	e251e000 	subs	lr, r1, #0
   2a5fc:	158e0000 	strne	r0, [lr]
   2a600:	e3520000 	cmp	r2, #0
   2a604:	13530022 	cmpne	r3, #34	; 0x22
   2a608:	8a00004f 	bhi	2a74c <strtoull+0x15c>
   2a60c:	e1a01000 	mov	r1, r0
   2a610:	e1d130d0 	ldrsb	r3, [r1]
   2a614:	e1a0c001 	mov	ip, r1
   2a618:	e2430009 	sub	r0, r3, #9
   2a61c:	e3530020 	cmp	r3, #32
   2a620:	e2811001 	add	r1, r1, #1
   2a624:	e6ef0070 	uxtb	r0, r0
   2a628:	0afffff8 	beq	2a610 <strtoull+0x20>
   2a62c:	e3500004 	cmp	r0, #4
   2a630:	9afffff6 	bls	2a610 <strtoull+0x20>
   2a634:	e353002b 	cmp	r3, #43	; 0x2b
   2a638:	0a000034 	beq	2a710 <strtoull+0x120>
   2a63c:	e353002d 	cmp	r3, #45	; 0x2d
   2a640:	01dc30d1 	ldrsbeq	r3, [ip, #1]
   2a644:	03a08001 	moveq	r8, #1
   2a648:	01a0c001 	moveq	ip, r1
   2a64c:	13a08000 	movne	r8, #0
   2a650:	e3530030 	cmp	r3, #48	; 0x30
   2a654:	0a000032 	beq	2a724 <strtoull+0x134>
   2a658:	e3520000 	cmp	r2, #0
   2a65c:	03a0200a 	moveq	r2, #10
   2a660:	e353002f 	cmp	r3, #47	; 0x2f
   2a664:	e1a09003 	mov	r9, r3
   2a668:	da000049 	ble	2a794 <strtoull+0x1a4>
   2a66c:	e3a0a001 	mov	sl, #1
   2a670:	e3a04000 	mov	r4, #0
   2a674:	e3a05000 	mov	r5, #0
   2a678:	e1a06002 	mov	r6, r2
   2a67c:	e1a07fc2 	asr	r7, r2, #31
   2a680:	ea00000f 	b	2a6c4 <strtoull+0xd4>
   2a684:	e0030592 	mul	r3, r2, r5
   2a688:	e0810492 	umull	r0, r1, r2, r4
   2a68c:	e0233794 	mla	r3, r4, r7, r3
   2a690:	e0900009 	adds	r0, r0, r9
   2a694:	e0831001 	add	r1, r3, r1
   2a698:	e0a11fc9 	adc	r1, r1, r9, asr #31
   2a69c:	e1510005 	cmp	r1, r5
   2a6a0:	01500004 	cmpeq	r0, r4
   2a6a4:	3a00002f 	bcc	2a768 <strtoull+0x178>
   2a6a8:	e1fc90d1 	ldrsb	r9, [ip, #1]!
   2a6ac:	e3a0a000 	mov	sl, #0
   2a6b0:	e359002f 	cmp	r9, #47	; 0x2f
   2a6b4:	e1a03009 	mov	r3, r9
   2a6b8:	da000030 	ble	2a780 <strtoull+0x190>
   2a6bc:	e1a04000 	mov	r4, r0
   2a6c0:	e1a05001 	mov	r5, r1
   2a6c4:	e2433061 	sub	r3, r3, #97	; 0x61
   2a6c8:	e3530019 	cmp	r3, #25
   2a6cc:	92499020 	subls	r9, r9, #32
   2a6d0:	e3590040 	cmp	r9, #64	; 0x40
   2a6d4:	c2499007 	subgt	r9, r9, #7
   2a6d8:	e2499030 	sub	r9, r9, #48	; 0x30
   2a6dc:	e1590002 	cmp	r9, r2
   2a6e0:	baffffe7 	blt	2a684 <strtoull+0x94>
   2a6e4:	e1a00004 	mov	r0, r4
   2a6e8:	e1a01005 	mov	r1, r5
   2a6ec:	e22aa001 	eor	sl, sl, #1
   2a6f0:	e35e0000 	cmp	lr, #0
   2a6f4:	e008800a 	and	r8, r8, sl
   2a6f8:	158ec000 	strne	ip, [lr]
   2a6fc:	e3580000 	cmp	r8, #0
   2a700:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a704:	e2700000 	rsbs	r0, r0, #0
   2a708:	e2e11000 	rsc	r1, r1, #0
   2a70c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a710:	e1dc30d1 	ldrsb	r3, [ip, #1]
   2a714:	e3a08000 	mov	r8, #0
   2a718:	e3530030 	cmp	r3, #48	; 0x30
   2a71c:	e1a0c001 	mov	ip, r1
   2a720:	1affffcc 	bne	2a658 <strtoull+0x68>
   2a724:	e1dc30d1 	ldrsb	r3, [ip, #1]
   2a728:	e28c0001 	add	r0, ip, #1
   2a72c:	e3c31020 	bic	r1, r3, #32
   2a730:	e3510058 	cmp	r1, #88	; 0x58
   2a734:	1a000007 	bne	2a758 <strtoull+0x168>
   2a738:	e3d23010 	bics	r3, r2, #16
   2a73c:	01dc30d2 	ldrsbeq	r3, [ip, #2]
   2a740:	03a02010 	moveq	r2, #16
   2a744:	028cc002 	addeq	ip, ip, #2
   2a748:	0affffc4 	beq	2a660 <strtoull+0x70>
   2a74c:	e3a00000 	mov	r0, #0
   2a750:	e3a01000 	mov	r1, #0
   2a754:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a758:	e3520000 	cmp	r2, #0
   2a75c:	e1a0c000 	mov	ip, r0
   2a760:	03a02008 	moveq	r2, #8
   2a764:	eaffffbd 	b	2a660 <strtoull+0x70>
   2a768:	e35e0000 	cmp	lr, #0
   2a76c:	0a000005 	beq	2a788 <strtoull+0x198>
   2a770:	e3e00000 	mvn	r0, #0
   2a774:	e3a01000 	mov	r1, #0
   2a778:	e58ec000 	str	ip, [lr]
   2a77c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a780:	e3a0a001 	mov	sl, #1
   2a784:	eaffffd9 	b	2a6f0 <strtoull+0x100>
   2a788:	e3e00000 	mvn	r0, #0
   2a78c:	e3a01000 	mov	r1, #0
   2a790:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a794:	e35e0000 	cmp	lr, #0
   2a798:	e3a00000 	mov	r0, #0
   2a79c:	e3a01000 	mov	r1, #0
   2a7a0:	158ec000 	strne	ip, [lr]
   2a7a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002a7a8 <atoi>:
   2a7a8:	e3a0200a 	mov	r2, #10
   2a7ac:	e3a01000 	mov	r1, #0
   2a7b0:	eaffff2d 	b	2a46c <strtoul>

0002a7b4 <char2int>:
   2a7b4:	e12fff1e 	bx	lr

0002a7b8 <memcpy>:
   2a7b8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   2a7bc:	e352007f 	cmp	r2, #127	; 0x7f
   2a7c0:	9a00000b 	bls	2a7f4 <memcpy+0x3c>
   2a7c4:	e3110003 	tst	r1, #3
   2a7c8:	1a000009 	bne	2a7f4 <memcpy+0x3c>
   2a7cc:	e3100003 	tst	r0, #3
   2a7d0:	1a000007 	bne	2a7f4 <memcpy+0x3c>
   2a7d4:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   2a7d8:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   2a7dc:	e2422020 	sub	r2, r2, #32
   2a7e0:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   2a7e4:	f5d1f040 	pld	[r1, #64]	; 0x40
   2a7e8:	e352001f 	cmp	r2, #31
   2a7ec:	8afffff9 	bhi	2a7d8 <memcpy+0x20>
   2a7f0:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   2a7f4:	e3520000 	cmp	r2, #0
   2a7f8:	0a000003 	beq	2a80c <memcpy+0x54>
   2a7fc:	e4d13001 	ldrb	r3, [r1], #1
   2a800:	e2522001 	subs	r2, r2, #1
   2a804:	e4c03001 	strb	r3, [r0], #1
   2a808:	1afffffb 	bne	2a7fc <memcpy+0x44>
   2a80c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   2a810:	e12fff1e 	bx	lr

0002a814 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   2a814:	e3a03000 	mov	r3, #0
   2a818:	e3510001 	cmp	r1, #1
   2a81c:	91a0c002 	movls	ip, r2
   2a820:	8382c001 	orrhi	ip, r2, #1
   2a824:	e92d4070 	push	{r4, r5, r6, lr}
   2a828:	e1a04000 	mov	r4, r0
   2a82c:	e59f0128 	ldr	r0, [pc, #296]	; 2a95c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x148>
   2a830:	e15c0003 	cmp	ip, r3
   2a834:	e24dd020 	sub	sp, sp, #32
   2a838:	e5c42004 	strb	r2, [r4, #4]
   2a83c:	e5841008 	str	r1, [r4, #8]
   2a840:	e5840000 	str	r0, [r4]
   2a844:	e5843010 	str	r3, [r4, #16]
   2a848:	0a000002 	beq	2a858 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x44>
   2a84c:	e1a00004 	mov	r0, r4
   2a850:	e28dd020 	add	sp, sp, #32
   2a854:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a858:	e59f5100 	ldr	r5, [pc, #256]	; 2a960 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x14c>
   2a85c:	e5950004 	ldr	r0, [r5, #4]
   2a860:	e1500003 	cmp	r0, r3
   2a864:	1a00000e 	bne	2a8a4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x90>
   2a868:	e5956000 	ldr	r6, [r5]
   2a86c:	e3560000 	cmp	r6, #0
   2a870:	0a00000f 	beq	2a8b4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xa0>
   2a874:	e3a02000 	mov	r2, #0
   2a878:	e5943008 	ldr	r3, [r4, #8]
   2a87c:	e7862103 	str	r2, [r6, r3, lsl #2]
   2a880:	e5953004 	ldr	r3, [r5, #4]
   2a884:	e3530000 	cmp	r3, #0
   2a888:	1a000025 	bne	2a924 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x110>
   2a88c:	e1a00004 	mov	r0, r4
   2a890:	e3a01000 	mov	r1, #0
   2a894:	eb00003b 	bl	2a988 <CVirtualGPIOPin::Write(unsigned int)>
   2a898:	e1a00004 	mov	r0, r4
   2a89c:	e28dd020 	add	sp, sp, #32
   2a8a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a8a4:	eb0004d6 	bl	2bc04 <EnterCritical>
   2a8a8:	e5956000 	ldr	r6, [r5]
   2a8ac:	e3560000 	cmp	r6, #0
   2a8b0:	1affffef 	bne	2a874 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   2a8b4:	e3a00001 	mov	r0, #1
   2a8b8:	eb000492 	bl	2bb08 <CMemorySystem::GetCoherentPage(unsigned int)>
   2a8bc:	e1a03000 	mov	r3, r0
   2a8c0:	e1a01006 	mov	r1, r6
   2a8c4:	e28d0008 	add	r0, sp, #8
   2a8c8:	e5853000 	str	r3, [r5]
   2a8cc:	ebffe7b9 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2a8d0:	e3a03004 	mov	r3, #4
   2a8d4:	e595c000 	ldr	ip, [r5]
   2a8d8:	e58d3000 	str	r3, [sp]
   2a8dc:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   2a8e0:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   2a8e4:	e3a03010 	mov	r3, #16
   2a8e8:	e59f1074 	ldr	r1, [pc, #116]	; 2a964 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x150>
   2a8ec:	e28d0008 	add	r0, sp, #8
   2a8f0:	e28d2010 	add	r2, sp, #16
   2a8f4:	e58dc01c 	str	ip, [sp, #28]
   2a8f8:	ebffe7ba 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2a8fc:	e3500000 	cmp	r0, #0
   2a900:	0a000009 	beq	2a92c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x118>
   2a904:	e28d0008 	add	r0, sp, #8
   2a908:	ebffe7b1 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   2a90c:	e5956000 	ldr	r6, [r5]
   2a910:	e3560000 	cmp	r6, #0
   2a914:	1affffd6 	bne	2a874 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   2a918:	e5953004 	ldr	r3, [r5, #4]
   2a91c:	e3530000 	cmp	r3, #0
   2a920:	0affffd9 	beq	2a88c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   2a924:	eb0004e0 	bl	2bcac <LeaveCritical>
   2a928:	eaffffd7 	b	2a88c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   2a92c:	e3a03010 	mov	r3, #16
   2a930:	e58d0000 	str	r0, [sp]
   2a934:	e59f102c 	ldr	r1, [pc, #44]	; 2a968 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x154>
   2a938:	e28d2010 	add	r2, sp, #16
   2a93c:	e28d0008 	add	r0, sp, #8
   2a940:	ebffe7a8 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2a944:	e3500000 	cmp	r0, #0
   2a948:	159d301c 	ldrne	r3, [sp, #28]
   2a94c:	05850000 	streq	r0, [r5]
   2a950:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   2a954:	15853000 	strne	r3, [r5]
   2a958:	eaffffe9 	b	2a904 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf0>
   2a95c:	00043c5c 	.word	0x00043c5c
   2a960:	0004c55c 	.word	0x0004c55c
   2a964:	00048020 	.word	0x00048020
   2a968:	00040010 	.word	0x00040010

0002a96c <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   2a96c:	e12fff1e 	bx	lr

0002a970 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   2a970:	e92d4010 	push	{r4, lr}
   2a974:	e1a04000 	mov	r4, r0
   2a978:	e3a01014 	mov	r1, #20
   2a97c:	eb000181 	bl	2af88 <operator delete(void*, unsigned int)>
   2a980:	e1a00004 	mov	r0, r4
   2a984:	e8bd8010 	pop	{r4, pc}

0002a988 <CVirtualGPIOPin::Write(unsigned int)>:
   2a988:	e92d4070 	push	{r4, r5, r6, lr}
   2a98c:	e5d03004 	ldrb	r3, [r0, #4]
   2a990:	e1a04000 	mov	r4, r0
   2a994:	e3530000 	cmp	r3, #0
   2a998:	e1a05001 	mov	r5, r1
   2a99c:	e24dd028 	sub	sp, sp, #40	; 0x28
   2a9a0:	0a000012 	beq	2a9f0 <CVirtualGPIOPin::Write(unsigned int)+0x68>
   2a9a4:	e5901008 	ldr	r1, [r0, #8]
   2a9a8:	e3510000 	cmp	r1, #0
   2a9ac:	1a000033 	bne	2aa80 <CVirtualGPIOPin::Write(unsigned int)+0xf8>
   2a9b0:	e28d000c 	add	r0, sp, #12
   2a9b4:	ebffe77f 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2a9b8:	e3a03008 	mov	r3, #8
   2a9bc:	e58d3000 	str	r3, [sp]
   2a9c0:	e3a03014 	mov	r3, #20
   2a9c4:	e3a0c082 	mov	ip, #130	; 0x82
   2a9c8:	e59f10e0 	ldr	r1, [pc, #224]	; 2aab0 <CVirtualGPIOPin::Write(unsigned int)+0x128>
   2a9cc:	e28d000c 	add	r0, sp, #12
   2a9d0:	e08d2003 	add	r2, sp, r3
   2a9d4:	e58d5024 	str	r5, [sp, #36]	; 0x24
   2a9d8:	e58dc020 	str	ip, [sp, #32]
   2a9dc:	ebffe781 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2a9e0:	e28d000c 	add	r0, sp, #12
   2a9e4:	ebffe77a 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   2a9e8:	e28dd028 	add	sp, sp, #40	; 0x28
   2a9ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a9f0:	e5903008 	ldr	r3, [r0, #8]
   2a9f4:	e3530001 	cmp	r3, #1
   2a9f8:	8afffffa 	bhi	2a9e8 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2a9fc:	e59f60b0 	ldr	r6, [pc, #176]	; 2aab4 <CVirtualGPIOPin::Write(unsigned int)+0x12c>
   2aa00:	e3510001 	cmp	r1, #1
   2aa04:	e5962000 	ldr	r2, [r6]
   2aa08:	93a03000 	movls	r3, #0
   2aa0c:	83a03001 	movhi	r3, #1
   2aa10:	e3520000 	cmp	r2, #0
   2aa14:	03a03001 	moveq	r3, #1
   2aa18:	e3530000 	cmp	r3, #0
   2aa1c:	1afffff1 	bne	2a9e8 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2aa20:	e5960004 	ldr	r0, [r6, #4]
   2aa24:	e3500000 	cmp	r0, #0
   2aa28:	1a00001e 	bne	2aaa8 <CVirtualGPIOPin::Write(unsigned int)+0x120>
   2aa2c:	e1d421b0 	ldrh	r2, [r4, #16]
   2aa30:	e1d431b2 	ldrh	r3, [r4, #18]
   2aa34:	e584500c 	str	r5, [r4, #12]
   2aa38:	e0421003 	sub	r1, r2, r3
   2aa3c:	e6bf1071 	sxth	r1, r1
   2aa40:	e3510000 	cmp	r1, #0
   2aa44:	da000011 	ble	2aa90 <CVirtualGPIOPin::Write(unsigned int)+0x108>
   2aa48:	e3550000 	cmp	r5, #0
   2aa4c:	02833001 	addeq	r3, r3, #1
   2aa50:	06ff3073 	uxtheq	r3, r3
   2aa54:	01c431b2 	strheq	r3, [r4, #18]
   2aa58:	1a000003 	bne	2aa6c <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   2aa5c:	e5940008 	ldr	r0, [r4, #8]
   2aa60:	e5961000 	ldr	r1, [r6]
   2aa64:	e1833802 	orr	r3, r3, r2, lsl #16
   2aa68:	e7813100 	str	r3, [r1, r0, lsl #2]
   2aa6c:	e5963004 	ldr	r3, [r6, #4]
   2aa70:	e3530000 	cmp	r3, #0
   2aa74:	0affffdb 	beq	2a9e8 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2aa78:	eb00048b 	bl	2bcac <LeaveCritical>
   2aa7c:	eaffffd9 	b	2a9e8 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2aa80:	e59f1030 	ldr	r1, [pc, #48]	; 2aab8 <CVirtualGPIOPin::Write(unsigned int)+0x130>
   2aa84:	e3a0205b 	mov	r2, #91	; 0x5b
   2aa88:	e2810014 	add	r0, r1, #20
   2aa8c:	ebffe728 	bl	24734 <assertion_failed>
   2aa90:	e3550000 	cmp	r5, #0
   2aa94:	0afffff4 	beq	2aa6c <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   2aa98:	e2822001 	add	r2, r2, #1
   2aa9c:	e6ff2072 	uxth	r2, r2
   2aaa0:	e1c421b0 	strh	r2, [r4, #16]
   2aaa4:	eaffffec 	b	2aa5c <CVirtualGPIOPin::Write(unsigned int)+0xd4>
   2aaa8:	eb000455 	bl	2bc04 <EnterCritical>
   2aaac:	eaffffde 	b	2aa2c <CVirtualGPIOPin::Write(unsigned int)+0xa4>
   2aab0:	00038041 	.word	0x00038041
   2aab4:	0004c55c 	.word	0x0004c55c
   2aab8:	00043c64 	.word	0x00043c64

0002aabc <CVirtualGPIOPin::Invert()>:
   2aabc:	e590100c 	ldr	r1, [r0, #12]
   2aac0:	e2211001 	eor	r1, r1, #1
   2aac4:	eaffffaf 	b	2a988 <CVirtualGPIOPin::Write(unsigned int)>

0002aac8 <__static_initialization_and_destruction_0(int, int)>:
   2aac8:	e59f3014 	ldr	r3, [pc, #20]	; 2aae4 <__static_initialization_and_destruction_0(int, int)+0x1c>
   2aacc:	e1510003 	cmp	r1, r3
   2aad0:	03500001 	cmpeq	r0, #1
   2aad4:	03a02000 	moveq	r2, #0
   2aad8:	059f3008 	ldreq	r3, [pc, #8]	; 2aae8 <__static_initialization_and_destruction_0(int, int)+0x20>
   2aadc:	05832004 	streq	r2, [r3, #4]
   2aae0:	e12fff1e 	bx	lr
   2aae4:	0000ffff 	.word	0x0000ffff
   2aae8:	0004c55c 	.word	0x0004c55c

0002aaec <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   2aaec:	e3a02000 	mov	r2, #0
   2aaf0:	e59f3004 	ldr	r3, [pc, #4]	; 2aafc <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   2aaf4:	e5832004 	str	r2, [r3, #4]
   2aaf8:	e12fff1e 	bx	lr
   2aafc:	0004c55c 	.word	0x0004c55c

0002ab00 <ChainBootStub(void const*, unsigned int)>:
   2ab00:	e2811003 	add	r1, r1, #3
   2ab04:	e1b01121 	lsrs	r1, r1, #2
   2ab08:	0a000007 	beq	2ab2c <ChainBootStub(void const*, unsigned int)+0x2c>
   2ab0c:	e1a03000 	mov	r3, r0
   2ab10:	e0800101 	add	r0, r0, r1, lsl #2
   2ab14:	e263c902 	rsb	ip, r3, #32768	; 0x8000
   2ab18:	e083200c 	add	r2, r3, ip
   2ab1c:	e4931004 	ldr	r1, [r3], #4
   2ab20:	e1530000 	cmp	r3, r0
   2ab24:	e5821000 	str	r1, [r2]
   2ab28:	1afffffa 	bne	2ab18 <ChainBootStub(void const*, unsigned int)+0x18>
   2ab2c:	e3a03000 	mov	r3, #0
   2ab30:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2ab34:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2ab38:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2ab3c:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2ab40:	e3a03902 	mov	r3, #32768	; 0x8000
   2ab44:	e12fff13 	bx	r3

0002ab48 <EnableChainBoot>:
   2ab48:	e92d4010 	push	{r4, lr}
   2ab4c:	e1a0c001 	mov	ip, r1
   2ab50:	e1a0e000 	mov	lr, r0
   2ab54:	e59f302c 	ldr	r3, [pc, #44]	; 2ab88 <EnableChainBoot+0x40>
   2ab58:	e3a02b01 	mov	r2, #1024	; 0x400
   2ab5c:	e59f1028 	ldr	r1, [pc, #40]	; 2ab8c <EnableChainBoot+0x44>
   2ab60:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   2ab64:	e583e000 	str	lr, [r3]
   2ab68:	e583c004 	str	ip, [r3, #4]
   2ab6c:	ebffff11 	bl	2a7b8 <memcpy>
   2ab70:	e3a03000 	mov	r3, #0
   2ab74:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2ab78:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2ab7c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2ab80:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2ab84:	e8bd8010 	pop	{r4, pc}
   2ab88:	0004c564 	.word	0x0004c564
   2ab8c:	0002ab00 	.word	0x0002ab00

0002ab90 <IsChainBootEnabled>:
   2ab90:	e59f300c 	ldr	r3, [pc, #12]	; 2aba4 <IsChainBootEnabled+0x14>
   2ab94:	e5930000 	ldr	r0, [r3]
   2ab98:	e2500000 	subs	r0, r0, #0
   2ab9c:	13a00001 	movne	r0, #1
   2aba0:	e12fff1e 	bx	lr
   2aba4:	0004c564 	.word	0x0004c564

0002aba8 <DoChainBoot>:
   2aba8:	e59f3008 	ldr	r3, [pc, #8]	; 2abb8 <DoChainBoot+0x10>
   2abac:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   2abb0:	e1c300d0 	ldrd	r0, [r3]
   2abb4:	e12fff12 	bx	r2
   2abb8:	0004c564 	.word	0x0004c564

0002abbc <CMACAddress::CMACAddress()>:
   2abbc:	e3a02000 	mov	r2, #0
   2abc0:	e5c02000 	strb	r2, [r0]
   2abc4:	e12fff1e 	bx	lr

0002abc8 <CMACAddress::~CMACAddress()>:
   2abc8:	e12fff1e 	bx	lr

0002abcc <CMACAddress::operator==(CMACAddress const&) const>:
   2abcc:	e5d03000 	ldrb	r3, [r0]
   2abd0:	e92d4010 	push	{r4, lr}
   2abd4:	e3530000 	cmp	r3, #0
   2abd8:	0a000009 	beq	2ac04 <CMACAddress::operator==(CMACAddress const&) const+0x38>
   2abdc:	e5d13000 	ldrb	r3, [r1]
   2abe0:	e2800001 	add	r0, r0, #1
   2abe4:	e3530000 	cmp	r3, #0
   2abe8:	0a000009 	beq	2ac14 <CMACAddress::operator==(CMACAddress const&) const+0x48>
   2abec:	e3a02006 	mov	r2, #6
   2abf0:	e2811001 	add	r1, r1, #1
   2abf4:	ebfffce0 	bl	29f7c <memcmp>
   2abf8:	e16f0f10 	clz	r0, r0
   2abfc:	e1a002a0 	lsr	r0, r0, #5
   2ac00:	e8bd8010 	pop	{r4, pc}
   2ac04:	e3a02029 	mov	r2, #41	; 0x29
   2ac08:	e59f1014 	ldr	r1, [pc, #20]	; 2ac24 <CMACAddress::operator==(CMACAddress const&) const+0x58>
   2ac0c:	e59f0014 	ldr	r0, [pc, #20]	; 2ac28 <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   2ac10:	ebffe6c7 	bl	24734 <assertion_failed>
   2ac14:	e3a02041 	mov	r2, #65	; 0x41
   2ac18:	e59f1004 	ldr	r1, [pc, #4]	; 2ac24 <CMACAddress::operator==(CMACAddress const&) const+0x58>
   2ac1c:	e59f0004 	ldr	r0, [pc, #4]	; 2ac28 <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   2ac20:	ebffe6c3 	bl	24734 <assertion_failed>
   2ac24:	00043c84 	.word	0x00043c84
   2ac28:	0003dce8 	.word	0x0003dce8

0002ac2c <CMACAddress::operator!=(CMACAddress const&) const>:
   2ac2c:	e92d4010 	push	{r4, lr}
   2ac30:	ebffffe5 	bl	2abcc <CMACAddress::operator==(CMACAddress const&) const>
   2ac34:	e2200001 	eor	r0, r0, #1
   2ac38:	e6ef0070 	uxtb	r0, r0
   2ac3c:	e8bd8010 	pop	{r4, pc}

0002ac40 <CMACAddress::Set(unsigned char const*)>:
   2ac40:	e3510000 	cmp	r1, #0
   2ac44:	e92d4010 	push	{r4, lr}
   2ac48:	0a000006 	beq	2ac68 <CMACAddress::Set(unsigned char const*)+0x28>
   2ac4c:	e1a04000 	mov	r4, r0
   2ac50:	e3a02006 	mov	r2, #6
   2ac54:	e2800001 	add	r0, r0, #1
   2ac58:	ebfffed6 	bl	2a7b8 <memcpy>
   2ac5c:	e3a03001 	mov	r3, #1
   2ac60:	e5c43000 	strb	r3, [r4]
   2ac64:	e8bd8010 	pop	{r4, pc}
   2ac68:	e3a02034 	mov	r2, #52	; 0x34
   2ac6c:	e59f1004 	ldr	r1, [pc, #4]	; 2ac78 <CMACAddress::Set(unsigned char const*)+0x38>
   2ac70:	e59f0004 	ldr	r0, [pc, #4]	; 2ac7c <CMACAddress::Set(unsigned char const*)+0x3c>
   2ac74:	ebffe6ae 	bl	24734 <assertion_failed>
   2ac78:	00043c84 	.word	0x00043c84
   2ac7c:	000428e8 	.word	0x000428e8

0002ac80 <CMACAddress::CMACAddress(unsigned char const*)>:
   2ac80:	e92d4010 	push	{r4, lr}
   2ac84:	e1a04000 	mov	r4, r0
   2ac88:	ebffffec 	bl	2ac40 <CMACAddress::Set(unsigned char const*)>
   2ac8c:	e1a00004 	mov	r0, r4
   2ac90:	e8bd8010 	pop	{r4, pc}

0002ac94 <CMACAddress::SetBroadcast()>:
   2ac94:	e92d4010 	push	{r4, lr}
   2ac98:	e3a02006 	mov	r2, #6
   2ac9c:	e1a04000 	mov	r4, r0
   2aca0:	e3a010ff 	mov	r1, #255	; 0xff
   2aca4:	e2800001 	add	r0, r0, #1
   2aca8:	ebfffc79 	bl	29e94 <memset>
   2acac:	e3a03001 	mov	r3, #1
   2acb0:	e5c43000 	strb	r3, [r4]
   2acb4:	e8bd8010 	pop	{r4, pc}

0002acb8 <CMACAddress::Get() const>:
   2acb8:	e5d03000 	ldrb	r3, [r0]
   2acbc:	e3530000 	cmp	r3, #0
   2acc0:	0a000001 	beq	2accc <CMACAddress::Get() const+0x14>
   2acc4:	e2800001 	add	r0, r0, #1
   2acc8:	e12fff1e 	bx	lr
   2accc:	e3a02041 	mov	r2, #65	; 0x41
   2acd0:	e92d4010 	push	{r4, lr}
   2acd4:	e59f1004 	ldr	r1, [pc, #4]	; 2ace0 <CMACAddress::Get() const+0x28>
   2acd8:	e59f0004 	ldr	r0, [pc, #4]	; 2ace4 <CMACAddress::Get() const+0x2c>
   2acdc:	ebffe694 	bl	24734 <assertion_failed>
   2ace0:	00043c84 	.word	0x00043c84
   2ace4:	0003dce8 	.word	0x0003dce8

0002ace8 <CMACAddress::CopyTo(unsigned char*) const>:
   2ace8:	e5d02000 	ldrb	r2, [r0]
   2acec:	e92d4010 	push	{r4, lr}
   2acf0:	e3520000 	cmp	r2, #0
   2acf4:	0a000007 	beq	2ad18 <CMACAddress::CopyTo(unsigned char*) const+0x30>
   2acf8:	e3510000 	cmp	r1, #0
   2acfc:	e1a03000 	mov	r3, r0
   2ad00:	e1a00001 	mov	r0, r1
   2ad04:	0a000007 	beq	2ad28 <CMACAddress::CopyTo(unsigned char*) const+0x40>
   2ad08:	e8bd4010 	pop	{r4, lr}
   2ad0c:	e3a02006 	mov	r2, #6
   2ad10:	e2831001 	add	r1, r3, #1
   2ad14:	eafffea7 	b	2a7b8 <memcpy>
   2ad18:	e3a02047 	mov	r2, #71	; 0x47
   2ad1c:	e59f1014 	ldr	r1, [pc, #20]	; 2ad38 <CMACAddress::CopyTo(unsigned char*) const+0x50>
   2ad20:	e59f0014 	ldr	r0, [pc, #20]	; 2ad3c <CMACAddress::CopyTo(unsigned char*) const+0x54>
   2ad24:	ebffe682 	bl	24734 <assertion_failed>
   2ad28:	e3a02048 	mov	r2, #72	; 0x48
   2ad2c:	e59f1004 	ldr	r1, [pc, #4]	; 2ad38 <CMACAddress::CopyTo(unsigned char*) const+0x50>
   2ad30:	e59f0008 	ldr	r0, [pc, #8]	; 2ad40 <CMACAddress::CopyTo(unsigned char*) const+0x58>
   2ad34:	ebffe67e 	bl	24734 <assertion_failed>
   2ad38:	00043c84 	.word	0x00043c84
   2ad3c:	0003dce8 	.word	0x0003dce8
   2ad40:	0003ef40 	.word	0x0003ef40

0002ad44 <CMACAddress::IsBroadcast() const>:
   2ad44:	e1a02000 	mov	r2, r0
   2ad48:	e5d00000 	ldrb	r0, [r0]
   2ad4c:	e3500000 	cmp	r0, #0
   2ad50:	12823001 	addne	r3, r2, #1
   2ad54:	12822007 	addne	r2, r2, #7
   2ad58:	0a000009 	beq	2ad84 <CMACAddress::IsBroadcast() const+0x40>
   2ad5c:	e4d31001 	ldrb	r1, [r3], #1
   2ad60:	e35100ff 	cmp	r1, #255	; 0xff
   2ad64:	1a000004 	bne	2ad7c <CMACAddress::IsBroadcast() const+0x38>
   2ad68:	e1530002 	cmp	r3, r2
   2ad6c:	012fff1e 	bxeq	lr
   2ad70:	e4d31001 	ldrb	r1, [r3], #1
   2ad74:	e35100ff 	cmp	r1, #255	; 0xff
   2ad78:	0afffffa 	beq	2ad68 <CMACAddress::IsBroadcast() const+0x24>
   2ad7c:	e3a00000 	mov	r0, #0
   2ad80:	e12fff1e 	bx	lr
   2ad84:	e3a0204e 	mov	r2, #78	; 0x4e
   2ad88:	e92d4010 	push	{r4, lr}
   2ad8c:	e59f1004 	ldr	r1, [pc, #4]	; 2ad98 <CMACAddress::IsBroadcast() const+0x54>
   2ad90:	e59f0004 	ldr	r0, [pc, #4]	; 2ad9c <CMACAddress::IsBroadcast() const+0x58>
   2ad94:	ebffe666 	bl	24734 <assertion_failed>
   2ad98:	00043c84 	.word	0x00043c84
   2ad9c:	0003dce8 	.word	0x0003dce8

0002ada0 <CMACAddress::GetSize() const>:
   2ada0:	e3a00006 	mov	r0, #6
   2ada4:	e12fff1e 	bx	lr

0002ada8 <CMACAddress::Format(CString*) const>:
   2ada8:	e92d4010 	push	{r4, lr}
   2adac:	e5d03000 	ldrb	r3, [r0]
   2adb0:	e24dd010 	sub	sp, sp, #16
   2adb4:	e3530000 	cmp	r3, #0
   2adb8:	0a00000f 	beq	2adfc <CMACAddress::Format(CString*) const+0x54>
   2adbc:	e3510000 	cmp	r1, #0
   2adc0:	e1a02000 	mov	r2, r0
   2adc4:	e1a00001 	mov	r0, r1
   2adc8:	0a00000f 	beq	2ae0c <CMACAddress::Format(CString*) const+0x64>
   2adcc:	e5d2e005 	ldrb	lr, [r2, #5]
   2add0:	e5d2c004 	ldrb	ip, [r2, #4]
   2add4:	e5d23003 	ldrb	r3, [r2, #3]
   2add8:	e5d24006 	ldrb	r4, [r2, #6]
   2addc:	e88d5008 	stm	sp, {r3, ip, lr}
   2ade0:	e58d400c 	str	r4, [sp, #12]
   2ade4:	e5d23002 	ldrb	r3, [r2, #2]
   2ade8:	e59f102c 	ldr	r1, [pc, #44]	; 2ae1c <CMACAddress::Format(CString*) const+0x74>
   2adec:	e5d22001 	ldrb	r2, [r2, #1]
   2adf0:	ebfff871 	bl	28fbc <CString::Format(char const*, ...)>
   2adf4:	e28dd010 	add	sp, sp, #16
   2adf8:	e8bd8010 	pop	{r4, pc}
   2adfc:	e3a02062 	mov	r2, #98	; 0x62
   2ae00:	e59f1018 	ldr	r1, [pc, #24]	; 2ae20 <CMACAddress::Format(CString*) const+0x78>
   2ae04:	e59f0018 	ldr	r0, [pc, #24]	; 2ae24 <CMACAddress::Format(CString*) const+0x7c>
   2ae08:	ebffe649 	bl	24734 <assertion_failed>
   2ae0c:	e3a02063 	mov	r2, #99	; 0x63
   2ae10:	e59f1008 	ldr	r1, [pc, #8]	; 2ae20 <CMACAddress::Format(CString*) const+0x78>
   2ae14:	e59f000c 	ldr	r0, [pc, #12]	; 2ae28 <CMACAddress::Format(CString*) const+0x80>
   2ae18:	ebffe645 	bl	24734 <assertion_failed>
   2ae1c:	00043c94 	.word	0x00043c94
   2ae20:	00043c84 	.word	0x00043c84
   2ae24:	0003dce8 	.word	0x0003dce8
   2ae28:	000428f8 	.word	0x000428f8

0002ae2c <CNetDevice::AddNetDevice()>:
   2ae2c:	e59f2018 	ldr	r2, [pc, #24]	; 2ae4c <CNetDevice::AddNetDevice()+0x20>
   2ae30:	e5923000 	ldr	r3, [r2]
   2ae34:	e3530004 	cmp	r3, #4
   2ae38:	92831001 	addls	r1, r3, #1
   2ae3c:	90823103 	addls	r3, r2, r3, lsl #2
   2ae40:	95821000 	strls	r1, [r2]
   2ae44:	95830004 	strls	r0, [r3, #4]
   2ae48:	e12fff1e 	bx	lr
   2ae4c:	0004c56c 	.word	0x0004c56c

0002ae50 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   2ae50:	e3500005 	cmp	r0, #5
   2ae54:	959f3008 	ldrls	r3, [pc, #8]	; 2ae64 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x14>
   2ae58:	97930100 	ldrls	r0, [r3, r0, lsl #2]
   2ae5c:	859f0004 	ldrhi	r0, [pc, #4]	; 2ae68 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x18>
   2ae60:	e12fff1e 	bx	lr
   2ae64:	00046580 	.word	0x00046580
   2ae68:	00043cb4 	.word	0x00043cb4

0002ae6c <CNetDevice::GetNetDevice(unsigned int)>:
   2ae6c:	e59f3014 	ldr	r3, [pc, #20]	; 2ae88 <CNetDevice::GetNetDevice(unsigned int)+0x1c>
   2ae70:	e5932000 	ldr	r2, [r3]
   2ae74:	e1520000 	cmp	r2, r0
   2ae78:	80830100 	addhi	r0, r3, r0, lsl #2
   2ae7c:	85900004 	ldrhi	r0, [r0, #4]
   2ae80:	93a00000 	movls	r0, #0
   2ae84:	e12fff1e 	bx	lr
   2ae88:	0004c56c 	.word	0x0004c56c

0002ae8c <CNetDevice::GetNetDevice(TNetDeviceType)>:
   2ae8c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ae90:	e59f8084 	ldr	r8, [pc, #132]	; 2af1c <CNetDevice::GetNetDevice(TNetDeviceType)+0x90>
   2ae94:	e5983000 	ldr	r3, [r8]
   2ae98:	e3530000 	cmp	r3, #0
   2ae9c:	0a00001b 	beq	2af10 <CNetDevice::GetNetDevice(TNetDeviceType)+0x84>
   2aea0:	e1a06000 	mov	r6, r0
   2aea4:	e3a05000 	mov	r5, #0
   2aea8:	e59f9070 	ldr	r9, [pc, #112]	; 2af20 <CNetDevice::GetNetDevice(TNetDeviceType)+0x94>
   2aeac:	e2887004 	add	r7, r8, #4
   2aeb0:	ea000005 	b	2aecc <CNetDevice::GetNetDevice(TNetDeviceType)+0x40>
   2aeb4:	e1500006 	cmp	r0, r6
   2aeb8:	e2855001 	add	r5, r5, #1
   2aebc:	0a000011 	beq	2af08 <CNetDevice::GetNetDevice(TNetDeviceType)+0x7c>
   2aec0:	e5983000 	ldr	r3, [r8]
   2aec4:	e1530005 	cmp	r3, r5
   2aec8:	9a000010 	bls	2af10 <CNetDevice::GetNetDevice(TNetDeviceType)+0x84>
   2aecc:	e4974004 	ldr	r4, [r7], #4
   2aed0:	e3540000 	cmp	r4, #0
   2aed4:	0a00000d 	beq	2af10 <CNetDevice::GetNetDevice(TNetDeviceType)+0x84>
   2aed8:	e3560002 	cmp	r6, #2
   2aedc:	0a000009 	beq	2af08 <CNetDevice::GetNetDevice(TNetDeviceType)+0x7c>
   2aee0:	e5943000 	ldr	r3, [r4]
   2aee4:	e5933008 	ldr	r3, [r3, #8]
   2aee8:	e1530009 	cmp	r3, r9
   2aeec:	03a00000 	moveq	r0, #0
   2aef0:	0affffef 	beq	2aeb4 <CNetDevice::GetNetDevice(TNetDeviceType)+0x28>
   2aef4:	e1a00004 	mov	r0, r4
   2aef8:	e12fff33 	blx	r3
   2aefc:	e1500006 	cmp	r0, r6
   2af00:	e2855001 	add	r5, r5, #1
   2af04:	1affffed 	bne	2aec0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x34>
   2af08:	e1a00004 	mov	r0, r4
   2af0c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2af10:	e3a04000 	mov	r4, #0
   2af14:	e1a00004 	mov	r0, r4
   2af18:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2af1c:	0004c56c 	.word	0x0004c56c
   2af20:	000160c4 	.word	0x000160c4

0002af24 <operator new(unsigned int, int)>:
   2af24:	e3d13002 	bics	r3, r1, #2
   2af28:	e1a01000 	mov	r1, r0
   2af2c:	0a000001 	beq	2af38 <operator new(unsigned int, int)+0x14>
   2af30:	e3a00000 	mov	r0, #0
   2af34:	e12fff1e 	bx	lr
   2af38:	e59f3008 	ldr	r3, [pc, #8]	; 2af48 <operator new(unsigned int, int)+0x24>
   2af3c:	e5930000 	ldr	r0, [r3]
   2af40:	e280000c 	add	r0, r0, #12
   2af44:	ea000035 	b	2b020 <CHeapAllocator::Allocate(unsigned int)>
   2af48:	0004c588 	.word	0x0004c588

0002af4c <operator new[](unsigned int, int)>:
   2af4c:	eafffff4 	b	2af24 <operator new(unsigned int, int)>

0002af50 <operator new(unsigned int)>:
   2af50:	e59f300c 	ldr	r3, [pc, #12]	; 2af64 <operator new(unsigned int)+0x14>
   2af54:	e1a01000 	mov	r1, r0
   2af58:	e5930000 	ldr	r0, [r3]
   2af5c:	e280000c 	add	r0, r0, #12
   2af60:	ea00002e 	b	2b020 <CHeapAllocator::Allocate(unsigned int)>
   2af64:	0004c588 	.word	0x0004c588

0002af68 <operator new[](unsigned int)>:
   2af68:	eafffff8 	b	2af50 <operator new(unsigned int)>

0002af6c <operator delete(void*)>:
   2af6c:	e59f300c 	ldr	r3, [pc, #12]	; 2af80 <operator delete(void*)+0x14>
   2af70:	e1a01000 	mov	r1, r0
   2af74:	e5930000 	ldr	r0, [r3]
   2af78:	e280000c 	add	r0, r0, #12
   2af7c:	ea0000a4 	b	2b214 <CHeapAllocator::Free(void*)>
   2af80:	0004c588 	.word	0x0004c588

0002af84 <operator delete[](void*)>:
   2af84:	eafffff8 	b	2af6c <operator delete(void*)>

0002af88 <operator delete(void*, unsigned int)>:
   2af88:	e59f300c 	ldr	r3, [pc, #12]	; 2af9c <operator delete(void*, unsigned int)+0x14>
   2af8c:	e1a01000 	mov	r1, r0
   2af90:	e5930000 	ldr	r0, [r3]
   2af94:	e280000c 	add	r0, r0, #12
   2af98:	ea00009d 	b	2b214 <CHeapAllocator::Free(void*)>
   2af9c:	0004c588 	.word	0x0004c588

0002afa0 <operator delete[](void*, unsigned int)>:
   2afa0:	eafffff8 	b	2af88 <operator delete(void*, unsigned int)>

0002afa4 <CHeapAllocator::CHeapAllocator(char const*)>:
   2afa4:	e3a03000 	mov	r3, #0
   2afa8:	e3a02001 	mov	r2, #1
   2afac:	e92d4010 	push	{r4, lr}
   2afb0:	e1a04000 	mov	r4, r0
   2afb4:	e5801000 	str	r1, [r0]
   2afb8:	e58020b8 	str	r2, [r0, #184]	; 0xb8
   2afbc:	e5803004 	str	r3, [r0, #4]
   2afc0:	e5803008 	str	r3, [r0, #8]
   2afc4:	e580300c 	str	r3, [r0, #12]
   2afc8:	e1a01003 	mov	r1, r3
   2afcc:	e3a020a8 	mov	r2, #168	; 0xa8
   2afd0:	e2800010 	add	r0, r0, #16
   2afd4:	ebfffbae 	bl	29e94 <memset>
   2afd8:	e1a03004 	mov	r3, r4
   2afdc:	e59f201c 	ldr	r2, [pc, #28]	; 2b000 <CHeapAllocator::CHeapAllocator(char const*)+0x5c>
   2afe0:	e2840038 	add	r0, r4, #56	; 0x38
   2afe4:	e4921004 	ldr	r1, [r2], #4
   2afe8:	e2833008 	add	r3, r3, #8
   2afec:	e5831008 	str	r1, [r3, #8]
   2aff0:	e1530000 	cmp	r3, r0
   2aff4:	1afffffa 	bne	2afe4 <CHeapAllocator::CHeapAllocator(char const*)+0x40>
   2aff8:	e1a00004 	mov	r0, r4
   2affc:	e8bd8010 	pop	{r4, pc}
   2b000:	00046598 	.word	0x00046598

0002b004 <CHeapAllocator::~CHeapAllocator()>:
   2b004:	e12fff1e 	bx	lr

0002b008 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   2b008:	e0812002 	add	r2, r1, r2
   2b00c:	e980000e 	stmib	r0, {r1, r2, r3}
   2b010:	e12fff1e 	bx	lr

0002b014 <CHeapAllocator::GetFreeSpace() const>:
   2b014:	e9900005 	ldmib	r0, {r0, r2}
   2b018:	e0420000 	sub	r0, r2, r0
   2b01c:	e12fff1e 	bx	lr

0002b020 <CHeapAllocator::Allocate(unsigned int)>:
   2b020:	e5903004 	ldr	r3, [r0, #4]
   2b024:	e3530000 	cmp	r3, #0
   2b028:	0a000072 	beq	2b1f8 <CHeapAllocator::Allocate(unsigned int)+0x1d8>
   2b02c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2b030:	e1a05000 	mov	r5, r0
   2b034:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
   2b038:	e1a04001 	mov	r4, r1
   2b03c:	e3500000 	cmp	r0, #0
   2b040:	1a000055 	bne	2b19c <CHeapAllocator::Allocate(unsigned int)+0x17c>
   2b044:	e5953010 	ldr	r3, [r5, #16]
   2b048:	e3530000 	cmp	r3, #0
   2b04c:	0a00002b 	beq	2b100 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   2b050:	e2852010 	add	r2, r5, #16
   2b054:	ea000002 	b	2b064 <CHeapAllocator::Allocate(unsigned int)+0x44>
   2b058:	e5b23008 	ldr	r3, [r2, #8]!
   2b05c:	e3530000 	cmp	r3, #0
   2b060:	0a000026 	beq	2b100 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   2b064:	e1540003 	cmp	r4, r3
   2b068:	8afffffa 	bhi	2b058 <CHeapAllocator::Allocate(unsigned int)+0x38>
   2b06c:	e5926004 	ldr	r6, [r2, #4]
   2b070:	e3560000 	cmp	r6, #0
   2b074:	01a04003 	moveq	r4, r3
   2b078:	0a000020 	beq	2b100 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   2b07c:	e5d60001 	ldrb	r0, [r6, #1]
   2b080:	e5d63000 	ldrb	r3, [r6]
   2b084:	e5d61002 	ldrb	r1, [r6, #2]
   2b088:	e1833400 	orr	r3, r3, r0, lsl #8
   2b08c:	e5d60003 	ldrb	r0, [r6, #3]
   2b090:	e1833801 	orr	r3, r3, r1, lsl #16
   2b094:	e59f1164 	ldr	r1, [pc, #356]	; 2b200 <CHeapAllocator::Allocate(unsigned int)+0x1e0>
   2b098:	e1833c00 	orr	r3, r3, r0, lsl #24
   2b09c:	e1530001 	cmp	r3, r1
   2b0a0:	1a000050 	bne	2b1e8 <CHeapAllocator::Allocate(unsigned int)+0x1c8>
   2b0a4:	e5d61009 	ldrb	r1, [r6, #9]
   2b0a8:	e5d63008 	ldrb	r3, [r6, #8]
   2b0ac:	e5d6000a 	ldrb	r0, [r6, #10]
   2b0b0:	e1833401 	orr	r3, r3, r1, lsl #8
   2b0b4:	e5d6100b 	ldrb	r1, [r6, #11]
   2b0b8:	e1833800 	orr	r3, r3, r0, lsl #16
   2b0bc:	e1833c01 	orr	r3, r3, r1, lsl #24
   2b0c0:	e5823004 	str	r3, [r2, #4]
   2b0c4:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   2b0c8:	e3530000 	cmp	r3, #0
   2b0cc:	1a000030 	bne	2b194 <CHeapAllocator::Allocate(unsigned int)+0x174>
   2b0d0:	e3a03000 	mov	r3, #0
   2b0d4:	e316000f 	tst	r6, #15
   2b0d8:	e5c63008 	strb	r3, [r6, #8]
   2b0dc:	e5c63009 	strb	r3, [r6, #9]
   2b0e0:	e5c6300a 	strb	r3, [r6, #10]
   2b0e4:	e5c6300b 	strb	r3, [r6, #11]
   2b0e8:	e2860010 	add	r0, r6, #16
   2b0ec:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2b0f0:	e3a0208e 	mov	r2, #142	; 0x8e
   2b0f4:	e59f1108 	ldr	r1, [pc, #264]	; 2b204 <CHeapAllocator::Allocate(unsigned int)+0x1e4>
   2b0f8:	e59f0108 	ldr	r0, [pc, #264]	; 2b208 <CHeapAllocator::Allocate(unsigned int)+0x1e8>
   2b0fc:	ebffe58c 	bl	24734 <assertion_failed>
   2b100:	e5956004 	ldr	r6, [r5, #4]
   2b104:	e284301f 	add	r3, r4, #31
   2b108:	e3c3300f 	bic	r3, r3, #15
   2b10c:	e0863003 	add	r3, r6, r3
   2b110:	e1560003 	cmp	r6, r3
   2b114:	e595700c 	ldr	r7, [r5, #12]
   2b118:	3a000006 	bcc	2b138 <CHeapAllocator::Allocate(unsigned int)+0x118>
   2b11c:	e3570000 	cmp	r7, #0
   2b120:	1a00001f 	bne	2b1a4 <CHeapAllocator::Allocate(unsigned int)+0x184>
   2b124:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   2b128:	e3530000 	cmp	r3, #0
   2b12c:	1a000028 	bne	2b1d4 <CHeapAllocator::Allocate(unsigned int)+0x1b4>
   2b130:	e3a00000 	mov	r0, #0
   2b134:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b138:	e5952008 	ldr	r2, [r5, #8]
   2b13c:	e0422007 	sub	r2, r2, r7
   2b140:	e1530002 	cmp	r3, r2
   2b144:	8afffff4 	bhi	2b11c <CHeapAllocator::Allocate(unsigned int)+0xfc>
   2b148:	e3a0204d 	mov	r2, #77	; 0x4d
   2b14c:	e3a0c043 	mov	ip, #67	; 0x43
   2b150:	e3a0004c 	mov	r0, #76	; 0x4c
   2b154:	e3a01042 	mov	r1, #66	; 0x42
   2b158:	e5853004 	str	r3, [r5, #4]
   2b15c:	e1a03824 	lsr	r3, r4, #16
   2b160:	e5c64004 	strb	r4, [r6, #4]
   2b164:	e5c62001 	strb	r2, [r6, #1]
   2b168:	e1a02424 	lsr	r2, r4, #8
   2b16c:	e1a04c24 	lsr	r4, r4, #24
   2b170:	e5c6c000 	strb	ip, [r6]
   2b174:	e5c60002 	strb	r0, [r6, #2]
   2b178:	e5c61003 	strb	r1, [r6, #3]
   2b17c:	e5c62005 	strb	r2, [r6, #5]
   2b180:	e5c63006 	strb	r3, [r6, #6]
   2b184:	e5c64007 	strb	r4, [r6, #7]
   2b188:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   2b18c:	e3530000 	cmp	r3, #0
   2b190:	0affffce 	beq	2b0d0 <CHeapAllocator::Allocate(unsigned int)+0xb0>
   2b194:	eb0002c4 	bl	2bcac <LeaveCritical>
   2b198:	eaffffcc 	b	2b0d0 <CHeapAllocator::Allocate(unsigned int)+0xb0>
   2b19c:	eb000298 	bl	2bc04 <EnterCritical>
   2b1a0:	eaffffa7 	b	2b044 <CHeapAllocator::Allocate(unsigned int)+0x24>
   2b1a4:	e3a02000 	mov	r2, #0
   2b1a8:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   2b1ac:	e585200c 	str	r2, [r5, #12]
   2b1b0:	e1530002 	cmp	r3, r2
   2b1b4:	1a000009 	bne	2b1e0 <CHeapAllocator::Allocate(unsigned int)+0x1c0>
   2b1b8:	ebffee45 	bl	26ad4 <CLogger::Get()>
   2b1bc:	e3a02000 	mov	r2, #0
   2b1c0:	e5951000 	ldr	r1, [r5]
   2b1c4:	e59f3040 	ldr	r3, [pc, #64]	; 2b20c <CHeapAllocator::Allocate(unsigned int)+0x1ec>
   2b1c8:	ebffed83 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b1cc:	e3a00000 	mov	r0, #0
   2b1d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b1d4:	eb0002b4 	bl	2bcac <LeaveCritical>
   2b1d8:	e1a00007 	mov	r0, r7
   2b1dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b1e0:	eb0002b1 	bl	2bcac <LeaveCritical>
   2b1e4:	eafffff3 	b	2b1b8 <CHeapAllocator::Allocate(unsigned int)+0x198>
   2b1e8:	e3a0205e 	mov	r2, #94	; 0x5e
   2b1ec:	e59f1010 	ldr	r1, [pc, #16]	; 2b204 <CHeapAllocator::Allocate(unsigned int)+0x1e4>
   2b1f0:	e59f0018 	ldr	r0, [pc, #24]	; 2b210 <CHeapAllocator::Allocate(unsigned int)+0x1f0>
   2b1f4:	ebffe54e 	bl	24734 <assertion_failed>
   2b1f8:	e3a00000 	mov	r0, #0
   2b1fc:	e12fff1e 	bx	lr
   2b200:	424c4d43 	.word	0x424c4d43
   2b204:	00043d4c 	.word	0x00043d4c
   2b208:	00043d9c 	.word	0x00043d9c
   2b20c:	00043d8c 	.word	0x00043d8c
   2b210:	00043d60 	.word	0x00043d60

0002b214 <CHeapAllocator::Free(void*)>:
   2b214:	e3510000 	cmp	r1, #0
   2b218:	012fff1e 	bxeq	lr
   2b21c:	e92d4070 	push	{r4, r5, r6, lr}
   2b220:	e1a06000 	mov	r6, r0
   2b224:	e5513010 	ldrb	r3, [r1, #-16]
   2b228:	e551000f 	ldrb	r0, [r1, #-15]
   2b22c:	e551200e 	ldrb	r2, [r1, #-14]
   2b230:	e1833400 	orr	r3, r3, r0, lsl #8
   2b234:	e551000d 	ldrb	r0, [r1, #-13]
   2b238:	e1833802 	orr	r3, r3, r2, lsl #16
   2b23c:	e59f20d0 	ldr	r2, [pc, #208]	; 2b314 <CHeapAllocator::Free(void*)+0x100>
   2b240:	e1833c00 	orr	r3, r3, r0, lsl #24
   2b244:	e1530002 	cmp	r3, r2
   2b248:	e2415010 	sub	r5, r1, #16
   2b24c:	1a00002c 	bne	2b304 <CHeapAllocator::Free(void*)+0xf0>
   2b250:	e5963010 	ldr	r3, [r6, #16]
   2b254:	e3530000 	cmp	r3, #0
   2b258:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b25c:	e5d51005 	ldrb	r1, [r5, #5]
   2b260:	e5d52004 	ldrb	r2, [r5, #4]
   2b264:	e5d50006 	ldrb	r0, [r5, #6]
   2b268:	e1822401 	orr	r2, r2, r1, lsl #8
   2b26c:	e5d51007 	ldrb	r1, [r5, #7]
   2b270:	e1822800 	orr	r2, r2, r0, lsl #16
   2b274:	e1822c01 	orr	r2, r2, r1, lsl #24
   2b278:	e2864010 	add	r4, r6, #16
   2b27c:	ea000002 	b	2b28c <CHeapAllocator::Free(void*)+0x78>
   2b280:	e5b43008 	ldr	r3, [r4, #8]!
   2b284:	e3530000 	cmp	r3, #0
   2b288:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b28c:	e1530002 	cmp	r3, r2
   2b290:	1afffffa 	bne	2b280 <CHeapAllocator::Free(void*)+0x6c>
   2b294:	e59600b8 	ldr	r0, [r6, #184]	; 0xb8
   2b298:	e3500000 	cmp	r0, #0
   2b29c:	1a000009 	bne	2b2c8 <CHeapAllocator::Free(void*)+0xb4>
   2b2a0:	e5943004 	ldr	r3, [r4, #4]
   2b2a4:	e1a00423 	lsr	r0, r3, #8
   2b2a8:	e1a01823 	lsr	r1, r3, #16
   2b2ac:	e1a02c23 	lsr	r2, r3, #24
   2b2b0:	e5c53008 	strb	r3, [r5, #8]
   2b2b4:	e5c50009 	strb	r0, [r5, #9]
   2b2b8:	e5c5100a 	strb	r1, [r5, #10]
   2b2bc:	e5c5200b 	strb	r2, [r5, #11]
   2b2c0:	e5845004 	str	r5, [r4, #4]
   2b2c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b2c8:	eb00024d 	bl	2bc04 <EnterCritical>
   2b2cc:	e5943004 	ldr	r3, [r4, #4]
   2b2d0:	e59620b8 	ldr	r2, [r6, #184]	; 0xb8
   2b2d4:	e1a00423 	lsr	r0, r3, #8
   2b2d8:	e3520000 	cmp	r2, #0
   2b2dc:	e1a01823 	lsr	r1, r3, #16
   2b2e0:	e1a02c23 	lsr	r2, r3, #24
   2b2e4:	e5c53008 	strb	r3, [r5, #8]
   2b2e8:	e5c50009 	strb	r0, [r5, #9]
   2b2ec:	e5c5100a 	strb	r1, [r5, #10]
   2b2f0:	e5c5200b 	strb	r2, [r5, #11]
   2b2f4:	e5845004 	str	r5, [r4, #4]
   2b2f8:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b2fc:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b300:	ea000269 	b	2bcac <LeaveCritical>
   2b304:	e3a020bf 	mov	r2, #191	; 0xbf
   2b308:	e59f1008 	ldr	r1, [pc, #8]	; 2b318 <CHeapAllocator::Free(void*)+0x104>
   2b30c:	e59f0008 	ldr	r0, [pc, #8]	; 2b31c <CHeapAllocator::Free(void*)+0x108>
   2b310:	ebffe507 	bl	24734 <assertion_failed>
   2b314:	424c4d43 	.word	0x424c4d43
   2b318:	00043d4c 	.word	0x00043d4c
   2b31c:	00043d60 	.word	0x00043d60

0002b320 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   2b320:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b324:	e2514000 	subs	r4, r1, #0
   2b328:	e24dd00c 	sub	sp, sp, #12
   2b32c:	0a00002d 	beq	2b3e8 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xc8>
   2b330:	e3520000 	cmp	r2, #0
   2b334:	0a00002f 	beq	2b3f8 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xd8>
   2b338:	e554c00f 	ldrb	ip, [r4, #-15]
   2b33c:	e5543010 	ldrb	r3, [r4, #-16]
   2b340:	e554100e 	ldrb	r1, [r4, #-14]
   2b344:	e183340c 	orr	r3, r3, ip, lsl #8
   2b348:	e554c00d 	ldrb	ip, [r4, #-13]
   2b34c:	e1833801 	orr	r3, r3, r1, lsl #16
   2b350:	e59f10c4 	ldr	r1, [pc, #196]	; 2b41c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xfc>
   2b354:	e1833c0c 	orr	r3, r3, ip, lsl #24
   2b358:	e1530001 	cmp	r3, r1
   2b35c:	e2446010 	sub	r6, r4, #16
   2b360:	1a000029 	bne	2b40c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xec>
   2b364:	e5d61005 	ldrb	r1, [r6, #5]
   2b368:	e5d63004 	ldrb	r3, [r6, #4]
   2b36c:	e5d6c006 	ldrb	ip, [r6, #6]
   2b370:	e1833401 	orr	r3, r3, r1, lsl #8
   2b374:	e5d61007 	ldrb	r1, [r6, #7]
   2b378:	e183380c 	orr	r3, r3, ip, lsl #16
   2b37c:	e1833c01 	orr	r3, r3, r1, lsl #24
   2b380:	e1530002 	cmp	r3, r2
   2b384:	21a07004 	movcs	r7, r4
   2b388:	3a000002 	bcc	2b398 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x78>
   2b38c:	e1a00007 	mov	r0, r7
   2b390:	e28dd00c 	add	sp, sp, #12
   2b394:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b398:	e1a01002 	mov	r1, r2
   2b39c:	e1a05000 	mov	r5, r0
   2b3a0:	ebffff1e 	bl	2b020 <CHeapAllocator::Allocate(unsigned int)>
   2b3a4:	e2507000 	subs	r7, r0, #0
   2b3a8:	0afffff7 	beq	2b38c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x6c>
   2b3ac:	e5d62005 	ldrb	r2, [r6, #5]
   2b3b0:	e5d63004 	ldrb	r3, [r6, #4]
   2b3b4:	e5d61006 	ldrb	r1, [r6, #6]
   2b3b8:	e1833402 	orr	r3, r3, r2, lsl #8
   2b3bc:	e5d62007 	ldrb	r2, [r6, #7]
   2b3c0:	e1833801 	orr	r3, r3, r1, lsl #16
   2b3c4:	e1832c02 	orr	r2, r3, r2, lsl #24
   2b3c8:	e1a01004 	mov	r1, r4
   2b3cc:	ebfffcf9 	bl	2a7b8 <memcpy>
   2b3d0:	e1a00005 	mov	r0, r5
   2b3d4:	e1a01004 	mov	r1, r4
   2b3d8:	ebffff8d 	bl	2b214 <CHeapAllocator::Free(void*)>
   2b3dc:	e1a00007 	mov	r0, r7
   2b3e0:	e28dd00c 	add	sp, sp, #12
   2b3e4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b3e8:	e1a01002 	mov	r1, r2
   2b3ec:	e28dd00c 	add	sp, sp, #12
   2b3f0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   2b3f4:	eaffff09 	b	2b020 <CHeapAllocator::Allocate(unsigned int)>
   2b3f8:	e58d2004 	str	r2, [sp, #4]
   2b3fc:	ebffff84 	bl	2b214 <CHeapAllocator::Free(void*)>
   2b400:	e59d2004 	ldr	r2, [sp, #4]
   2b404:	e1a07002 	mov	r7, r2
   2b408:	eaffffdf 	b	2b38c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x6c>
   2b40c:	e3a020a3 	mov	r2, #163	; 0xa3
   2b410:	e59f1008 	ldr	r1, [pc, #8]	; 2b420 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x100>
   2b414:	e59f0008 	ldr	r0, [pc, #8]	; 2b424 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x104>
   2b418:	ebffe4c5 	bl	24734 <assertion_failed>
   2b41c:	424c4d43 	.word	0x424c4d43
   2b420:	00043d4c 	.word	0x00043d4c
   2b424:	00043d60 	.word	0x00043d60

0002b428 <CExceptionHandler::Get() [clone .part.0]>:
   2b428:	e3a02087 	mov	r2, #135	; 0x87
   2b42c:	e92d4010 	push	{r4, lr}
   2b430:	e59f1004 	ldr	r1, [pc, #4]	; 2b43c <CExceptionHandler::Get() [clone .part.0]+0x14>
   2b434:	e59f0004 	ldr	r0, [pc, #4]	; 2b440 <CExceptionHandler::Get() [clone .part.0]+0x18>
   2b438:	ebffe4bd 	bl	24734 <assertion_failed>
   2b43c:	00043dc8 	.word	0x00043dc8
   2b440:	00041d54 	.word	0x00041d54

0002b444 <CExceptionHandler::CExceptionHandler()>:
   2b444:	e59fc074 	ldr	ip, [pc, #116]	; 2b4c0 <CExceptionHandler::CExceptionHandler()+0x7c>
   2b448:	e92d4010 	push	{r4, lr}
   2b44c:	e1a04000 	mov	r4, r0
   2b450:	e59c0000 	ldr	r0, [ip]
   2b454:	e3500000 	cmp	r0, #0
   2b458:	1a000014 	bne	2b4b0 <CExceptionHandler::CExceptionHandler()+0x6c>
   2b45c:	e59f1060 	ldr	r1, [pc, #96]	; 2b4c4 <CExceptionHandler::CExceptionHandler()+0x80>
   2b460:	e59f2060 	ldr	r2, [pc, #96]	; 2b4c8 <CExceptionHandler::CExceptionHandler()+0x84>
   2b464:	e59f3060 	ldr	r3, [pc, #96]	; 2b4cc <CExceptionHandler::CExceptionHandler()+0x88>
   2b468:	e2411004 	sub	r1, r1, #4
   2b46c:	e242200c 	sub	r2, r2, #12
   2b470:	e2433010 	sub	r3, r3, #16
   2b474:	e1a01141 	asr	r1, r1, #2
   2b478:	e1a02142 	asr	r2, r2, #2
   2b47c:	e1a03143 	asr	r3, r3, #2
   2b480:	e2411002 	sub	r1, r1, #2
   2b484:	e2422002 	sub	r2, r2, #2
   2b488:	e2433002 	sub	r3, r3, #2
   2b48c:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   2b490:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   2b494:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2b498:	e58c4000 	str	r4, [ip]
   2b49c:	e1c020fc 	strd	r2, [r0, #12]
   2b4a0:	e5801004 	str	r1, [r0, #4]
   2b4a4:	eb000225 	bl	2bd40 <SyncDataAndInstructionCache>
   2b4a8:	e1a00004 	mov	r0, r4
   2b4ac:	e8bd8010 	pop	{r4, pc}
   2b4b0:	e3a02030 	mov	r2, #48	; 0x30
   2b4b4:	e59f1014 	ldr	r1, [pc, #20]	; 2b4d0 <CExceptionHandler::CExceptionHandler()+0x8c>
   2b4b8:	e59f0014 	ldr	r0, [pc, #20]	; 2b4d4 <CExceptionHandler::CExceptionHandler()+0x90>
   2b4bc:	ebffe49c 	bl	24734 <assertion_failed>
   2b4c0:	0004c584 	.word	0x0004c584
   2b4c4:	0002b798 	.word	0x0002b798
   2b4c8:	0002b6f8 	.word	0x0002b6f8
   2b4cc:	0002b748 	.word	0x0002b748
   2b4d0:	00043dc8 	.word	0x00043dc8
   2b4d4:	00041d1c 	.word	0x00041d1c

0002b4d8 <CExceptionHandler::~CExceptionHandler()>:
   2b4d8:	e3a02000 	mov	r2, #0
   2b4dc:	e59f3004 	ldr	r3, [pc, #4]	; 2b4e8 <CExceptionHandler::~CExceptionHandler()+0x10>
   2b4e0:	e5832000 	str	r2, [r3]
   2b4e4:	e12fff1e 	bx	lr
   2b4e8:	0004c584 	.word	0x0004c584

0002b4ec <CExceptionHandler::Throw(unsigned int)>:
   2b4ec:	e92d4010 	push	{r4, lr}
   2b4f0:	e1a04001 	mov	r4, r1
   2b4f4:	e24dd008 	sub	sp, sp, #8
   2b4f8:	ebffed75 	bl	26ad4 <CLogger::Get()>
   2b4fc:	e59f201c 	ldr	r2, [pc, #28]	; 2b520 <CExceptionHandler::Throw(unsigned int)+0x34>
   2b500:	e59f301c 	ldr	r3, [pc, #28]	; 2b524 <CExceptionHandler::Throw(unsigned int)+0x38>
   2b504:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   2b508:	e3a02000 	mov	r2, #0
   2b50c:	e58d1000 	str	r1, [sp]
   2b510:	e59f1010 	ldr	r1, [pc, #16]	; 2b528 <CExceptionHandler::Throw(unsigned int)+0x3c>
   2b514:	ebffecb0 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b518:	e28dd008 	add	sp, sp, #8
   2b51c:	e8bd8010 	pop	{r4, pc}
   2b520:	000465b4 	.word	0x000465b4
   2b524:	00043de0 	.word	0x00043de0
   2b528:	00043e78 	.word	0x00043e78

0002b52c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   2b52c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2b530:	e3510002 	cmp	r1, #2
   2b534:	e1a06001 	mov	r6, r1
   2b538:	e1a04002 	mov	r4, r2
   2b53c:	e24dd024 	sub	sp, sp, #36	; 0x24
   2b540:	0a000026 	beq	2b5e0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb4>
   2b544:	e3510003 	cmp	r1, #3
   2b548:	13a07000 	movne	r7, #0
   2b54c:	11a09007 	movne	r9, r7
   2b550:	1a000001 	bne	2b55c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   2b554:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   2b558:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   2b55c:	e3540000 	cmp	r4, #0
   2b560:	0a000024 	beq	2b5f8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xcc>
   2b564:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   2b568:	e5948048 	ldr	r8, [r4, #72]	; 0x48
   2b56c:	e203301f 	and	r3, r3, #31
   2b570:	e3530011 	cmp	r3, #17
   2b574:	e5945044 	ldr	r5, [r4, #68]	; 0x44
   2b578:	0a00001b 	beq	2b5ec <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc0>
   2b57c:	e3530012 	cmp	r3, #18
   2b580:	0a000014 	beq	2b5d8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
   2b584:	e1a00005 	mov	r0, r5
   2b588:	e59f1078 	ldr	r1, [pc, #120]	; 2b608 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2b58c:	ebffe61d 	bl	24e08 <debug_stacktrace(unsigned int const*, char const*)>
   2b590:	ebffed4f 	bl	26ad4 <CLogger::Get()>
   2b594:	e59f3070 	ldr	r3, [pc, #112]	; 2b60c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   2b598:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   2b59c:	e7931106 	ldr	r1, [r3, r6, lsl #2]
   2b5a0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   2b5a4:	e58d1000 	str	r1, [sp]
   2b5a8:	e58d2018 	str	r2, [sp, #24]
   2b5ac:	e58d3004 	str	r3, [sp, #4]
   2b5b0:	e3a02000 	mov	r2, #0
   2b5b4:	e59f3054 	ldr	r3, [pc, #84]	; 2b610 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   2b5b8:	e59f1048 	ldr	r1, [pc, #72]	; 2b608 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2b5bc:	e58d8014 	str	r8, [sp, #20]
   2b5c0:	e58d5010 	str	r5, [sp, #16]
   2b5c4:	e58d700c 	str	r7, [sp, #12]
   2b5c8:	e58d9008 	str	r9, [sp, #8]
   2b5cc:	ebffec82 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b5d0:	e28dd024 	add	sp, sp, #36	; 0x24
   2b5d4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2b5d8:	e8940120 	ldm	r4, {r5, r8}
   2b5dc:	eaffffe8 	b	2b584 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x58>
   2b5e0:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   2b5e4:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   2b5e8:	eaffffdb 	b	2b55c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   2b5ec:	e594800c 	ldr	r8, [r4, #12]
   2b5f0:	e5945008 	ldr	r5, [r4, #8]
   2b5f4:	eaffffe2 	b	2b584 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x58>
   2b5f8:	e3a02069 	mov	r2, #105	; 0x69
   2b5fc:	e59f1010 	ldr	r1, [pc, #16]	; 2b614 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   2b600:	e59f0010 	ldr	r0, [pc, #16]	; 2b618 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   2b604:	ebffe44a 	bl	24734 <assertion_failed>
   2b608:	00043e78 	.word	0x00043e78
   2b60c:	000465b4 	.word	0x000465b4
   2b610:	00043df0 	.word	0x00043df0
   2b614:	00043dc8 	.word	0x00043dc8
   2b618:	00041fd4 	.word	0x00041fd4

0002b61c <CExceptionHandler::Get()>:
   2b61c:	e59f3010 	ldr	r3, [pc, #16]	; 2b634 <CExceptionHandler::Get()+0x18>
   2b620:	e5930000 	ldr	r0, [r3]
   2b624:	e3500000 	cmp	r0, #0
   2b628:	112fff1e 	bxne	lr
   2b62c:	e92d4010 	push	{r4, lr}
   2b630:	ebffff7c 	bl	2b428 <CExceptionHandler::Get() [clone .part.0]>
   2b634:	0004c584 	.word	0x0004c584

0002b638 <ExceptionHandler>:
   2b638:	e92d4070 	push	{r4, r5, r6, lr}
   2b63c:	e3a03000 	mov	r3, #0
   2b640:	e1a04000 	mov	r4, r0
   2b644:	e1a05001 	mov	r5, r1
   2b648:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b64c:	eb0002c9 	bl	2c178 <CInterruptSystem::DisableFIQ()>
   2b650:	f1080040 	cpsie	f
   2b654:	e59f301c 	ldr	r3, [pc, #28]	; 2b678 <ExceptionHandler+0x40>
   2b658:	e5930000 	ldr	r0, [r3]
   2b65c:	e3500000 	cmp	r0, #0
   2b660:	0a000003 	beq	2b674 <ExceptionHandler+0x3c>
   2b664:	e1a02005 	mov	r2, r5
   2b668:	e1a01004 	mov	r1, r4
   2b66c:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b670:	eaffffad 	b	2b52c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   2b674:	ebffff6b 	bl	2b428 <CExceptionHandler::Get() [clone .part.0]>
   2b678:	0004c584 	.word	0x0004c584

0002b67c <raise>:
   2b67c:	e59f3020 	ldr	r3, [pc, #32]	; 2b6a4 <raise+0x28>
   2b680:	e92d4010 	push	{r4, lr}
   2b684:	e5930000 	ldr	r0, [r3]
   2b688:	e3500000 	cmp	r0, #0
   2b68c:	0a000003 	beq	2b6a0 <raise+0x24>
   2b690:	e3a01004 	mov	r1, #4
   2b694:	ebffff94 	bl	2b4ec <CExceptionHandler::Throw(unsigned int)>
   2b698:	e3a00000 	mov	r0, #0
   2b69c:	e8bd8010 	pop	{r4, pc}
   2b6a0:	ebffff60 	bl	2b428 <CExceptionHandler::Get() [clone .part.0]>
   2b6a4:	0004c584 	.word	0x0004c584

0002b6a8 <UndefinedInstructionInternal>:
   2b6a8:	e24dd004 	sub	sp, sp, #4
   2b6ac:	e24ee004 	sub	lr, lr, #4
   2b6b0:	e92d4000 	stmfd	sp!, {lr}
   2b6b4:	e14fe000 	mrs	lr, SPSR
   2b6b8:	e92d4000 	stmfd	sp!, {lr}
   2b6bc:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b6c0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b6c4:	e1a0100d 	mov	r1, sp
   2b6c8:	f1020012 	cps	#18
   2b6cc:	e1a0200d 	mov	r2, sp
   2b6d0:	e1a0300e 	mov	r3, lr
   2b6d4:	f1020011 	cps	#17
   2b6d8:	e1a0400d 	mov	r4, sp
   2b6dc:	e1a0500e 	mov	r5, lr
   2b6e0:	f102001f 	cps	#31
   2b6e4:	e1a0d001 	mov	sp, r1
   2b6e8:	e92d003c 	push	{r2, r3, r4, r5}
   2b6ec:	e1a0100d 	mov	r1, sp
   2b6f0:	e3a00001 	mov	r0, #1
   2b6f4:	eaffffcf 	b	2b638 <ExceptionHandler>

0002b6f8 <PrefetchAbortStub>:
   2b6f8:	e24dd004 	sub	sp, sp, #4
   2b6fc:	e24ee004 	sub	lr, lr, #4
   2b700:	e92d4000 	stmfd	sp!, {lr}
   2b704:	e14fe000 	mrs	lr, SPSR
   2b708:	e92d4000 	stmfd	sp!, {lr}
   2b70c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b710:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b714:	e1a0100d 	mov	r1, sp
   2b718:	f1020012 	cps	#18
   2b71c:	e1a0200d 	mov	r2, sp
   2b720:	e1a0300e 	mov	r3, lr
   2b724:	f1020011 	cps	#17
   2b728:	e1a0400d 	mov	r4, sp
   2b72c:	e1a0500e 	mov	r5, lr
   2b730:	f102001f 	cps	#31
   2b734:	e1a0d001 	mov	sp, r1
   2b738:	e92d003c 	push	{r2, r3, r4, r5}
   2b73c:	e1a0100d 	mov	r1, sp
   2b740:	e3a00002 	mov	r0, #2
   2b744:	eaffffbb 	b	2b638 <ExceptionHandler>

0002b748 <DataAbortStub>:
   2b748:	e24dd004 	sub	sp, sp, #4
   2b74c:	e24ee008 	sub	lr, lr, #8
   2b750:	e92d4000 	stmfd	sp!, {lr}
   2b754:	e14fe000 	mrs	lr, SPSR
   2b758:	e92d4000 	stmfd	sp!, {lr}
   2b75c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b760:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b764:	e1a0100d 	mov	r1, sp
   2b768:	f1020012 	cps	#18
   2b76c:	e1a0200d 	mov	r2, sp
   2b770:	e1a0300e 	mov	r3, lr
   2b774:	f1020011 	cps	#17
   2b778:	e1a0400d 	mov	r4, sp
   2b77c:	e1a0500e 	mov	r5, lr
   2b780:	f102001f 	cps	#31
   2b784:	e1a0d001 	mov	sp, r1
   2b788:	e92d003c 	push	{r2, r3, r4, r5}
   2b78c:	e1a0100d 	mov	r1, sp
   2b790:	e3a00003 	mov	r0, #3
   2b794:	eaffffa7 	b	2b638 <ExceptionHandler>

0002b798 <UndefinedInstructionStub>:
   2b798:	e92d4001 	push	{r0, lr}
   2b79c:	eef80a10 	vmrs	r0, fpexc
   2b7a0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   2b7a4:	0affffbf 	beq	2b6a8 <UndefinedInstructionInternal>
   2b7a8:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   2b7ac:	eee80a10 	vmsr	fpexc, r0
   2b7b0:	e8fd8001 	ldm	sp!, {r0, pc}^

0002b7b4 <IRQStub>:
   2b7b4:	e24ee004 	sub	lr, lr, #4
   2b7b8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2b7bc:	e59f0060 	ldr	r0, [pc, #96]	; 2b824 <FIQStub+0x58>
   2b7c0:	e580e000 	str	lr, [r0]
   2b7c4:	eb0002c4 	bl	2c2dc <InterruptHandler>
   2b7c8:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

0002b7cc <FIQStub>:
   2b7cc:	e24ee004 	sub	lr, lr, #4
   2b7d0:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2b7d4:	e3a03000 	mov	r3, #0
   2b7d8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b7dc:	e59f2044 	ldr	r2, [pc, #68]	; 2b828 <FIQStub+0x5c>
   2b7e0:	e5921000 	ldr	r1, [r2]
   2b7e4:	e3510000 	cmp	r1, #0
   2b7e8:	0a000004 	beq	2b800 <FIQStub+0x34>
   2b7ec:	e5920004 	ldr	r0, [r2, #4]
   2b7f0:	e12fff31 	blx	r1
   2b7f4:	e3a03000 	mov	r3, #0
   2b7f8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b7fc:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2b800:	e3a03000 	mov	r3, #0
   2b804:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b808:	e59f101c 	ldr	r1, [pc, #28]	; 2b82c <FIQStub+0x60>
   2b80c:	e3a00000 	mov	r0, #0
   2b810:	e5810000 	str	r0, [r1]
   2b814:	e3a03000 	mov	r3, #0
   2b818:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b81c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b820:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2b824:	000465d4 	.word	0x000465d4
   2b828:	000465c8 	.word	0x000465c8
   2b82c:	2000b20c 	.word	0x2000b20c

0002b830 <CMemorySystem::CMemorySystem(bool)>:
   2b830:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b834:	e1a04000 	mov	r4, r0
   2b838:	e3a05000 	mov	r5, #0
   2b83c:	e280700c 	add	r7, r0, #12
   2b840:	e5c01000 	strb	r1, [r0]
   2b844:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   2b848:	e59f1110 	ldr	r1, [pc, #272]	; 2b960 <CMemorySystem::CMemorySystem(bool)+0x130>
   2b84c:	e5845004 	str	r5, [r4, #4]
   2b850:	e5845008 	str	r5, [r4, #8]
   2b854:	e1a00007 	mov	r0, r7
   2b858:	e28460c8 	add	r6, r4, #200	; 0xc8
   2b85c:	ebfffdd0 	bl	2afa4 <CHeapAllocator::CHeapAllocator(char const*)>
   2b860:	e1a00006 	mov	r0, r6
   2b864:	eb000531 	bl	2cd30 <CPageAllocator::CPageAllocator()>
   2b868:	e59f30f4 	ldr	r3, [pc, #244]	; 2b964 <CMemorySystem::CMemorySystem(bool)+0x134>
   2b86c:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   2b870:	e5935000 	ldr	r5, [r3]
   2b874:	e3550000 	cmp	r5, #0
   2b878:	0a000002 	beq	2b888 <CMemorySystem::CMemorySystem(bool)+0x58>
   2b87c:	e1a00004 	mov	r0, r4
   2b880:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2b884:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b888:	e3a01001 	mov	r1, #1
   2b88c:	e28d000c 	add	r0, sp, #12
   2b890:	e5834000 	str	r4, [r3]
   2b894:	ebffe3c7 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2b898:	e3a03014 	mov	r3, #20
   2b89c:	e59f10c4 	ldr	r1, [pc, #196]	; 2b968 <CMemorySystem::CMemorySystem(bool)+0x138>
   2b8a0:	e58d5000 	str	r5, [sp]
   2b8a4:	e28d000c 	add	r0, sp, #12
   2b8a8:	e08d2003 	add	r2, sp, r3
   2b8ac:	ebffe3cd 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2b8b0:	e3500000 	cmp	r0, #0
   2b8b4:	0a000016 	beq	2b914 <CMemorySystem::CMemorySystem(bool)+0xe4>
   2b8b8:	e59d3020 	ldr	r3, [sp, #32]
   2b8bc:	e3530000 	cmp	r3, #0
   2b8c0:	1a000022 	bne	2b950 <CMemorySystem::CMemorySystem(bool)+0x120>
   2b8c4:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2b8c8:	e2435501 	sub	r5, r3, #4194304	; 0x400000
   2b8cc:	e2432609 	sub	r2, r3, #9437184	; 0x900000
   2b8d0:	e1a00007 	mov	r0, r7
   2b8d4:	e3a01605 	mov	r1, #5242880	; 0x500000
   2b8d8:	e5843004 	str	r3, [r4, #4]
   2b8dc:	e3a03701 	mov	r3, #262144	; 0x40000
   2b8e0:	ebfffdc8 	bl	2b008 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   2b8e4:	e1a01005 	mov	r1, r5
   2b8e8:	e1a00006 	mov	r0, r6
   2b8ec:	e3a02501 	mov	r2, #4194304	; 0x400000
   2b8f0:	eb000516 	bl	2cd50 <CPageAllocator::Setup(unsigned int, unsigned int)>
   2b8f4:	e5d43000 	ldrb	r3, [r4]
   2b8f8:	e3530000 	cmp	r3, #0
   2b8fc:	1a00000a 	bne	2b92c <CMemorySystem::CMemorySystem(bool)+0xfc>
   2b900:	e28d000c 	add	r0, sp, #12
   2b904:	ebffe3b2 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   2b908:	e1a00004 	mov	r0, r4
   2b90c:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2b910:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b914:	e3a03303 	mov	r3, #201326592	; 0xc000000
   2b918:	e3a026b7 	mov	r2, #191889408	; 0xb700000
   2b91c:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   2b920:	e58d0020 	str	r0, [sp, #32]
   2b924:	e58d3024 	str	r3, [sp, #36]	; 0x24
   2b928:	eaffffe8 	b	2b8d0 <CMemorySystem::CMemorySystem(bool)+0xa0>
   2b92c:	e3a00004 	mov	r0, #4
   2b930:	ebfffd86 	bl	2af50 <operator new(unsigned int)>
   2b934:	e1a05000 	mov	r5, r0
   2b938:	e5941004 	ldr	r1, [r4, #4]
   2b93c:	eb00007f 	bl	2bb40 <CPageTable::CPageTable(unsigned int)>
   2b940:	e1a00004 	mov	r0, r4
   2b944:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   2b948:	eb000040 	bl	2ba50 <CMemorySystem::EnableMMU()>
   2b94c:	eaffffeb 	b	2b900 <CMemorySystem::CMemorySystem(bool)+0xd0>
   2b950:	e59f1014 	ldr	r1, [pc, #20]	; 2b96c <CMemorySystem::CMemorySystem(bool)+0x13c>
   2b954:	e3a0204e 	mov	r2, #78	; 0x4e
   2b958:	e281000c 	add	r0, r1, #12
   2b95c:	ebffe374 	bl	24734 <assertion_failed>
   2b960:	00043e80 	.word	0x00043e80
   2b964:	0004c588 	.word	0x0004c588
   2b968:	00010005 	.word	0x00010005
   2b96c:	00043e88 	.word	0x00043e88

0002b970 <CMemorySystem::~CMemorySystem()>:
   2b970:	e59f3044 	ldr	r3, [pc, #68]	; 2b9bc <CMemorySystem::~CMemorySystem()+0x4c>
   2b974:	e92d4010 	push	{r4, lr}
   2b978:	e5932000 	ldr	r2, [r3]
   2b97c:	e1a04000 	mov	r4, r0
   2b980:	e1500002 	cmp	r0, r2
   2b984:	0a000005 	beq	2b9a0 <CMemorySystem::~CMemorySystem()+0x30>
   2b988:	e28400c8 	add	r0, r4, #200	; 0xc8
   2b98c:	eb0004ee 	bl	2cd4c <CPageAllocator::~CPageAllocator()>
   2b990:	e284000c 	add	r0, r4, #12
   2b994:	ebfffd9a 	bl	2b004 <CHeapAllocator::~CHeapAllocator()>
   2b998:	e1a00004 	mov	r0, r4
   2b99c:	e8bd8010 	pop	{r4, pc}
   2b9a0:	e3a01000 	mov	r1, #0
   2b9a4:	e5d02000 	ldrb	r2, [r0]
   2b9a8:	e5831000 	str	r1, [r3]
   2b9ac:	e1520001 	cmp	r2, r1
   2b9b0:	0afffff4 	beq	2b988 <CMemorySystem::~CMemorySystem()+0x18>
   2b9b4:	eb000056 	bl	2bb14 <CMemorySystem::Destructor() [clone .part.0]>
   2b9b8:	eafffff2 	b	2b988 <CMemorySystem::~CMemorySystem()+0x18>
   2b9bc:	0004c588 	.word	0x0004c588

0002b9c0 <CMemorySystem::Destructor()>:
   2b9c0:	e59f3020 	ldr	r3, [pc, #32]	; 2b9e8 <CMemorySystem::Destructor()+0x28>
   2b9c4:	e5932000 	ldr	r2, [r3]
   2b9c8:	e1520000 	cmp	r2, r0
   2b9cc:	112fff1e 	bxne	lr
   2b9d0:	e3a01000 	mov	r1, #0
   2b9d4:	e5d22000 	ldrb	r2, [r2]
   2b9d8:	e5831000 	str	r1, [r3]
   2b9dc:	e1520001 	cmp	r2, r1
   2b9e0:	012fff1e 	bxeq	lr
   2b9e4:	ea00004a 	b	2bb14 <CMemorySystem::Destructor() [clone .part.0]>
   2b9e8:	0004c588 	.word	0x0004c588

0002b9ec <CMemorySystem::GetMemSize() const>:
   2b9ec:	e59f3028 	ldr	r3, [pc, #40]	; 2ba1c <CMemorySystem::GetMemSize() const+0x30>
   2b9f0:	e5933000 	ldr	r3, [r3]
   2b9f4:	e3530000 	cmp	r3, #0
   2b9f8:	0a000002 	beq	2ba08 <CMemorySystem::GetMemSize() const+0x1c>
   2b9fc:	e9930009 	ldmib	r3, {r0, r3}
   2ba00:	e0800003 	add	r0, r0, r3
   2ba04:	e12fff1e 	bx	lr
   2ba08:	e59f1010 	ldr	r1, [pc, #16]	; 2ba20 <CMemorySystem::GetMemSize() const+0x34>
   2ba0c:	e3a020a0 	mov	r2, #160	; 0xa0
   2ba10:	e92d4010 	push	{r4, lr}
   2ba14:	e2810028 	add	r0, r1, #40	; 0x28
   2ba18:	ebffe345 	bl	24734 <assertion_failed>
   2ba1c:	0004c588 	.word	0x0004c588
   2ba20:	00043e88 	.word	0x00043e88

0002ba24 <CMemorySystem::Get()>:
   2ba24:	e59f301c 	ldr	r3, [pc, #28]	; 2ba48 <CMemorySystem::Get()+0x24>
   2ba28:	e5930000 	ldr	r0, [r3]
   2ba2c:	e3500000 	cmp	r0, #0
   2ba30:	112fff1e 	bxne	lr
   2ba34:	e59f1010 	ldr	r1, [pc, #16]	; 2ba4c <CMemorySystem::Get()+0x28>
   2ba38:	e3a020a6 	mov	r2, #166	; 0xa6
   2ba3c:	e92d4010 	push	{r4, lr}
   2ba40:	e2810028 	add	r0, r1, #40	; 0x28
   2ba44:	ebffe33a 	bl	24734 <assertion_failed>
   2ba48:	0004c588 	.word	0x0004c588
   2ba4c:	00043e88 	.word	0x00043e88

0002ba50 <CMemorySystem::EnableMMU()>:
   2ba50:	e5d03000 	ldrb	r3, [r0]
   2ba54:	e92d4010 	push	{r4, lr}
   2ba58:	e3530000 	cmp	r3, #0
   2ba5c:	0a00001b 	beq	2bad0 <CMemorySystem::EnableMMU()+0x80>
   2ba60:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   2ba64:	e3833040 	orr	r3, r3, #64	; 0x40
   2ba68:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   2ba6c:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   2ba70:	e3130001 	tst	r3, #1
   2ba74:	1a000019 	bne	2bae0 <CMemorySystem::EnableMMU()+0x90>
   2ba78:	e3a04000 	mov	r4, #0
   2ba7c:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   2ba80:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   2ba84:	e1500004 	cmp	r0, r4
   2ba88:	0a000018 	beq	2baf0 <CMemorySystem::EnableMMU()+0xa0>
   2ba8c:	eb000053 	bl	2bbe0 <CPageTable::GetBaseAddress() const>
   2ba90:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   2ba94:	e3a03001 	mov	r3, #1
   2ba98:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   2ba9c:	ee074f16 	mcr	15, 0, r4, cr7, cr6, {0}
   2baa0:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2baa4:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   2baa8:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   2baac:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   2bab0:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2bab4:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}
   2bab8:	ee112f10 	mrc	15, 0, r2, cr1, cr0, {0}
   2babc:	e59f303c 	ldr	r3, [pc, #60]	; 2bb00 <CMemorySystem::EnableMMU()+0xb0>
   2bac0:	e3c22002 	bic	r2, r2, #2
   2bac4:	e1823003 	orr	r3, r2, r3
   2bac8:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   2bacc:	e8bd8010 	pop	{r4, pc}
   2bad0:	e59f102c 	ldr	r1, [pc, #44]	; 2bb04 <CMemorySystem::EnableMMU()+0xb4>
   2bad4:	e3a020ac 	mov	r2, #172	; 0xac
   2bad8:	e2810038 	add	r0, r1, #56	; 0x38
   2badc:	ebffe314 	bl	24734 <assertion_failed>
   2bae0:	e59f101c 	ldr	r1, [pc, #28]	; 2bb04 <CMemorySystem::EnableMMU()+0xb4>
   2bae4:	e3a020ba 	mov	r2, #186	; 0xba
   2bae8:	e2810048 	add	r0, r1, #72	; 0x48
   2baec:	ebffe310 	bl	24734 <assertion_failed>
   2baf0:	e59f100c 	ldr	r1, [pc, #12]	; 2bb04 <CMemorySystem::EnableMMU()+0xb4>
   2baf4:	e3a020c0 	mov	r2, #192	; 0xc0
   2baf8:	e2810074 	add	r0, r1, #116	; 0x74
   2bafc:	ebffe30c 	bl	24734 <assertion_failed>
   2bb00:	00c01805 	.word	0x00c01805
   2bb04:	00043e88 	.word	0x00043e88

0002bb08 <CMemorySystem::GetCoherentPage(unsigned int)>:
   2bb08:	e1a00600 	lsl	r0, r0, #12
   2bb0c:	e2800501 	add	r0, r0, #4194304	; 0x400000
   2bb10:	e12fff1e 	bx	lr

0002bb14 <CMemorySystem::Destructor() [clone .part.0]>:
   2bb14:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   2bb18:	e3c33005 	bic	r3, r3, #5
   2bb1c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   2bb20:	e3a03000 	mov	r3, #0
   2bb24:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2bb28:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bb2c:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   2bb30:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bb34:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   2bb38:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bb3c:	e12fff1e 	bx	lr

0002bb40 <CPageTable::CPageTable(unsigned int)>:
   2bb40:	e3a0c709 	mov	ip, #2359296	; 0x240000
   2bb44:	e59f207c 	ldr	r2, [pc, #124]	; 2bbc8 <CPageTable::CPageTable(unsigned int)+0x88>
   2bb48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2bb4c:	e3a03000 	mov	r3, #0
   2bb50:	e1a04002 	mov	r4, r2
   2bb54:	e3e064df 	mvn	r6, #-553648128	; 0xdf000000
   2bb58:	e59fe06c 	ldr	lr, [pc, #108]	; 2bbcc <CPageTable::CPageTable(unsigned int)+0x8c>
   2bb5c:	e59f806c 	ldr	r8, [pc, #108]	; 2bbd0 <CPageTable::CPageTable(unsigned int)+0x90>
   2bb60:	e59f706c 	ldr	r7, [pc, #108]	; 2bbd4 <CPageTable::CPageTable(unsigned int)+0x94>
   2bb64:	e59f506c 	ldr	r5, [pc, #108]	; 2bbd8 <CPageTable::CPageTable(unsigned int)+0x98>
   2bb68:	e580c000 	str	ip, [r0]
   2bb6c:	ea00000c 	b	2bba4 <CPageTable::CPageTable(unsigned int)+0x64>
   2bb70:	e153000e 	cmp	r3, lr
   2bb74:	31a02004 	movcc	r2, r4
   2bb78:	3a000008 	bcc	2bba0 <CPageTable::CPageTable(unsigned int)+0x60>
   2bb7c:	e3530501 	cmp	r3, #4194304	; 0x400000
   2bb80:	01a02008 	moveq	r2, r8
   2bb84:	0a000005 	beq	2bba0 <CPageTable::CPageTable(unsigned int)+0x60>
   2bb88:	e1530001 	cmp	r3, r1
   2bb8c:	31a02007 	movcc	r2, r7
   2bb90:	3a000002 	bcc	2bba0 <CPageTable::CPageTable(unsigned int)+0x60>
   2bb94:	e1530006 	cmp	r3, r6
   2bb98:	31a02005 	movcc	r2, r5
   2bb9c:	23a02000 	movcs	r2, #0
   2bba0:	e28cc004 	add	ip, ip, #4
   2bba4:	e1822003 	orr	r2, r2, r3
   2bba8:	e3730601 	cmn	r3, #1048576	; 0x100000
   2bbac:	e58c2000 	str	r2, [ip]
   2bbb0:	e2833601 	add	r3, r3, #1048576	; 0x100000
   2bbb4:	1affffed 	bne	2bb70 <CPageTable::CPageTable(unsigned int)+0x30>
   2bbb8:	e3a03000 	mov	r3, #0
   2bbbc:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2bbc0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bbc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2bbc8:	0000040e 	.word	0x0000040e
   2bbcc:	0003d004 	.word	0x0003d004
   2bbd0:	00010412 	.word	0x00010412
   2bbd4:	0000041e 	.word	0x0000041e
   2bbd8:	00010416 	.word	0x00010416

0002bbdc <CPageTable::~CPageTable()>:
   2bbdc:	e12fff1e 	bx	lr

0002bbe0 <CPageTable::GetBaseAddress() const>:
   2bbe0:	e5900000 	ldr	r0, [r0]
   2bbe4:	e3800001 	orr	r0, r0, #1
   2bbe8:	e12fff1e 	bx	lr

0002bbec <CurrentExecutionLevel>:
   2bbec:	e10f0000 	mrs	r0, CPSR
   2bbf0:	e3100040 	tst	r0, #64	; 0x40
   2bbf4:	01a003a0 	lsreq	r0, r0, #7
   2bbf8:	02000001 	andeq	r0, r0, #1
   2bbfc:	13a00002 	movne	r0, #2
   2bc00:	e12fff1e 	bx	lr

0002bc04 <EnterCritical>:
   2bc04:	e2403001 	sub	r3, r0, #1
   2bc08:	e3530001 	cmp	r3, #1
   2bc0c:	e92d4010 	push	{r4, lr}
   2bc10:	8a000012 	bhi	2bc60 <EnterCritical+0x5c>
   2bc14:	e10f1000 	mrs	r1, CPSR
   2bc18:	e3500002 	cmp	r0, #2
   2bc1c:	1a000013 	bne	2bc70 <EnterCritical+0x6c>
   2bc20:	f10c00c0 	cpsid	if
   2bc24:	e59f306c 	ldr	r3, [pc, #108]	; 2bc98 <EnterCritical+0x94>
   2bc28:	e5932000 	ldr	r2, [r3]
   2bc2c:	e3520013 	cmp	r2, #19
   2bc30:	8a000014 	bhi	2bc88 <EnterCritical+0x84>
   2bc34:	e5932000 	ldr	r2, [r3]
   2bc38:	e3500001 	cmp	r0, #1
   2bc3c:	e2820001 	add	r0, r2, #1
   2bc40:	e0832102 	add	r2, r3, r2, lsl #2
   2bc44:	e5830000 	str	r0, [r3]
   2bc48:	e5821004 	str	r1, [r2, #4]
   2bc4c:	1a000000 	bne	2bc54 <EnterCritical+0x50>
   2bc50:	f1080040 	cpsie	f
   2bc54:	e3a03000 	mov	r3, #0
   2bc58:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bc5c:	e8bd8010 	pop	{r4, pc}
   2bc60:	e3a02064 	mov	r2, #100	; 0x64
   2bc64:	e59f1030 	ldr	r1, [pc, #48]	; 2bc9c <EnterCritical+0x98>
   2bc68:	e59f0030 	ldr	r0, [pc, #48]	; 2bca0 <EnterCritical+0x9c>
   2bc6c:	ebffe2b0 	bl	24734 <assertion_failed>
   2bc70:	e3110040 	tst	r1, #64	; 0x40
   2bc74:	0affffe9 	beq	2bc20 <EnterCritical+0x1c>
   2bc78:	e3a0206a 	mov	r2, #106	; 0x6a
   2bc7c:	e59f1018 	ldr	r1, [pc, #24]	; 2bc9c <EnterCritical+0x98>
   2bc80:	e59f001c 	ldr	r0, [pc, #28]	; 2bca4 <EnterCritical+0xa0>
   2bc84:	ebffe2aa 	bl	24734 <assertion_failed>
   2bc88:	e3a0206e 	mov	r2, #110	; 0x6e
   2bc8c:	e59f1008 	ldr	r1, [pc, #8]	; 2bc9c <EnterCritical+0x98>
   2bc90:	e59f0010 	ldr	r0, [pc, #16]	; 2bca8 <EnterCritical+0xa4>
   2bc94:	ebffe2a6 	bl	24734 <assertion_failed>
   2bc98:	0004c58c 	.word	0x0004c58c
   2bc9c:	00043f10 	.word	0x00043f10
   2bca0:	00043f20 	.word	0x00043f20
   2bca4:	00043f58 	.word	0x00043f58
   2bca8:	00043f88 	.word	0x00043f88

0002bcac <LeaveCritical>:
   2bcac:	e3a03000 	mov	r3, #0
   2bcb0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bcb4:	f10c0040 	cpsid	f
   2bcb8:	e59f3038 	ldr	r3, [pc, #56]	; 2bcf8 <LeaveCritical+0x4c>
   2bcbc:	e5932000 	ldr	r2, [r3]
   2bcc0:	e3520000 	cmp	r2, #0
   2bcc4:	0a000006 	beq	2bce4 <LeaveCritical+0x38>
   2bcc8:	e5932000 	ldr	r2, [r3]
   2bccc:	e2422001 	sub	r2, r2, #1
   2bcd0:	e5832000 	str	r2, [r3]
   2bcd4:	e0833102 	add	r3, r3, r2, lsl #2
   2bcd8:	e5933004 	ldr	r3, [r3, #4]
   2bcdc:	e121f003 	msr	CPSR_c, r3
   2bce0:	e12fff1e 	bx	lr
   2bce4:	e3a0207f 	mov	r2, #127	; 0x7f
   2bce8:	e92d4010 	push	{r4, lr}
   2bcec:	e59f1008 	ldr	r1, [pc, #8]	; 2bcfc <LeaveCritical+0x50>
   2bcf0:	e59f0008 	ldr	r0, [pc, #8]	; 2bd00 <LeaveCritical+0x54>
   2bcf4:	ebffe28e 	bl	24734 <assertion_failed>
   2bcf8:	0004c58c 	.word	0x0004c58c
   2bcfc:	00043f10 	.word	0x00043f10
   2bd00:	00043fb0 	.word	0x00043fb0

0002bd04 <CleanAndInvalidateDataCacheRange>:
   2bd04:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2bd08:	e2813020 	add	r3, r1, #32
   2bd0c:	e353001f 	cmp	r3, #31
   2bd10:	9a000007 	bls	2bd34 <CleanAndInvalidateDataCacheRange+0x30>
   2bd14:	e2800020 	add	r0, r0, #32
   2bd18:	e3c1101f 	bic	r1, r1, #31
   2bd1c:	e0803001 	add	r3, r0, r1
   2bd20:	ea000000 	b	2bd28 <CleanAndInvalidateDataCacheRange+0x24>
   2bd24:	e2800020 	add	r0, r0, #32
   2bd28:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2bd2c:	e1530000 	cmp	r3, r0
   2bd30:	1afffffb 	bne	2bd24 <CleanAndInvalidateDataCacheRange+0x20>
   2bd34:	e3a03000 	mov	r3, #0
   2bd38:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bd3c:	e12fff1e 	bx	lr

0002bd40 <SyncDataAndInstructionCache>:
   2bd40:	e3a03000 	mov	r3, #0
   2bd44:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2bd48:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bd4c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2bd50:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2bd54:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bd58:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2bd5c:	e12fff1e 	bx	lr

0002bd60 <CInterruptSystem::CInterruptSystem()>:
   2bd60:	e3a02000 	mov	r2, #0
   2bd64:	e2403004 	sub	r3, r0, #4
   2bd68:	e2801f47 	add	r1, r0, #284	; 0x11c
   2bd6c:	e5a32004 	str	r2, [r3, #4]!
   2bd70:	e1530001 	cmp	r3, r1
   2bd74:	e5832120 	str	r2, [r3, #288]	; 0x120
   2bd78:	1afffffb 	bne	2bd6c <CInterruptSystem::CInterruptSystem()+0xc>
   2bd7c:	e59f3004 	ldr	r3, [pc, #4]	; 2bd88 <CInterruptSystem::CInterruptSystem()+0x28>
   2bd80:	e5830000 	str	r0, [r3]
   2bd84:	e12fff1e 	bx	lr
   2bd88:	0004c5e0 	.word	0x0004c5e0

0002bd8c <CInterruptSystem::~CInterruptSystem()>:
   2bd8c:	f10c0080 	cpsid	i
   2bd90:	e3a03000 	mov	r3, #0
   2bd94:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bd98:	e3e01000 	mvn	r1, #0
   2bd9c:	e59f201c 	ldr	r2, [pc, #28]	; 2bdc0 <CInterruptSystem::~CInterruptSystem()+0x34>
   2bda0:	e582320c 	str	r3, [r2, #524]	; 0x20c
   2bda4:	e582121c 	str	r1, [r2, #540]	; 0x21c
   2bda8:	e5821220 	str	r1, [r2, #544]	; 0x220
   2bdac:	e5821224 	str	r1, [r2, #548]	; 0x224
   2bdb0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bdb4:	e59f2008 	ldr	r2, [pc, #8]	; 2bdc4 <CInterruptSystem::~CInterruptSystem()+0x38>
   2bdb8:	e5823000 	str	r3, [r2]
   2bdbc:	e12fff1e 	bx	lr
   2bdc0:	2000b000 	.word	0x2000b000
   2bdc4:	0004c5e0 	.word	0x0004c5e0

0002bdc8 <CInterruptSystem::Initialize()>:
   2bdc8:	e92d4010 	push	{r4, lr}
   2bdcc:	e3a04000 	mov	r4, #0
   2bdd0:	e59f2054 	ldr	r2, [pc, #84]	; 2be2c <CInterruptSystem::Initialize()+0x64>
   2bdd4:	e59f3054 	ldr	r3, [pc, #84]	; 2be30 <CInterruptSystem::Initialize()+0x68>
   2bdd8:	e2422018 	sub	r2, r2, #24
   2bddc:	e243301c 	sub	r3, r3, #28
   2bde0:	e1a02142 	asr	r2, r2, #2
   2bde4:	e1a03143 	asr	r3, r3, #2
   2bde8:	e2422002 	sub	r2, r2, #2
   2bdec:	e2433002 	sub	r3, r3, #2
   2bdf0:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   2bdf4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2bdf8:	e1c421f8 	strd	r2, [r4, #24]
   2bdfc:	ebffffcf 	bl	2bd40 <SyncDataAndInstructionCache>
   2be00:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2be04:	e3e02000 	mvn	r2, #0
   2be08:	e59f3024 	ldr	r3, [pc, #36]	; 2be34 <CInterruptSystem::Initialize()+0x6c>
   2be0c:	e583420c 	str	r4, [r3, #524]	; 0x20c
   2be10:	e583221c 	str	r2, [r3, #540]	; 0x21c
   2be14:	e5832220 	str	r2, [r3, #544]	; 0x220
   2be18:	e5832224 	str	r2, [r3, #548]	; 0x224
   2be1c:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   2be20:	f1080080 	cpsie	i
   2be24:	e3a00001 	mov	r0, #1
   2be28:	e8bd8010 	pop	{r4, pc}
   2be2c:	0002b7b4 	.word	0x0002b7b4
   2be30:	0002b7cc 	.word	0x0002b7cc
   2be34:	2000b000 	.word	0x2000b000

0002be38 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   2be38:	e3510047 	cmp	r1, #71	; 0x47
   2be3c:	e92d4010 	push	{r4, lr}
   2be40:	8a00001e 	bhi	2bec0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   2be44:	e3520000 	cmp	r2, #0
   2be48:	0a000020 	beq	2bed0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
   2be4c:	e59f009c 	ldr	r0, [pc, #156]	; 2bef0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
   2be50:	e5d0e001 	ldrb	lr, [r0, #1]
   2be54:	e5d0c000 	ldrb	ip, [r0]
   2be58:	e5d04002 	ldrb	r4, [r0, #2]
   2be5c:	e18cc40e 	orr	ip, ip, lr, lsl #8
   2be60:	e5d0e003 	ldrb	lr, [r0, #3]
   2be64:	e18cc804 	orr	ip, ip, r4, lsl #16
   2be68:	e19ccc0e 	orrs	ip, ip, lr, lsl #24
   2be6c:	1a00001b 	bne	2bee0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa8>
   2be70:	e1a04422 	lsr	r4, r2, #8
   2be74:	e1a0e822 	lsr	lr, r2, #16
   2be78:	e5c02000 	strb	r2, [r0]
   2be7c:	e5c03004 	strb	r3, [r0, #4]
   2be80:	e1a02c22 	lsr	r2, r2, #24
   2be84:	e5c04001 	strb	r4, [r0, #1]
   2be88:	e5c0e002 	strb	lr, [r0, #2]
   2be8c:	e1a04423 	lsr	r4, r3, #8
   2be90:	e1a0e823 	lsr	lr, r3, #16
   2be94:	e1a03c23 	lsr	r3, r3, #24
   2be98:	e5c02003 	strb	r2, [r0, #3]
   2be9c:	e5c04005 	strb	r4, [r0, #5]
   2bea0:	e5c0e006 	strb	lr, [r0, #6]
   2bea4:	e5c03007 	strb	r3, [r0, #7]
   2bea8:	ee07cf9a 	mcr	15, 0, ip, cr7, cr10, {4}
   2beac:	e59f3040 	ldr	r3, [pc, #64]	; 2bef4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xbc>
   2beb0:	e3811080 	orr	r1, r1, #128	; 0x80
   2beb4:	e583120c 	str	r1, [r3, #524]	; 0x20c
   2beb8:	ee07cfba 	mcr	15, 0, ip, cr7, cr10, {5}
   2bebc:	e8bd8010 	pop	{r4, pc}
   2bec0:	e3a0208f 	mov	r2, #143	; 0x8f
   2bec4:	e59f102c 	ldr	r1, [pc, #44]	; 2bef8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2bec8:	e59f002c 	ldr	r0, [pc, #44]	; 2befc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   2becc:	ebffe218 	bl	24734 <assertion_failed>
   2bed0:	e3a02090 	mov	r2, #144	; 0x90
   2bed4:	e59f101c 	ldr	r1, [pc, #28]	; 2bef8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2bed8:	e59f0020 	ldr	r0, [pc, #32]	; 2bf00 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   2bedc:	ebffe214 	bl	24734 <assertion_failed>
   2bee0:	e3a02091 	mov	r2, #145	; 0x91
   2bee4:	e59f100c 	ldr	r1, [pc, #12]	; 2bef8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2bee8:	e59f0014 	ldr	r0, [pc, #20]	; 2bf04 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
   2beec:	ebffe210 	bl	24734 <assertion_failed>
   2bef0:	000465c8 	.word	0x000465c8
   2bef4:	2000b000 	.word	0x2000b000
   2bef8:	00043fc8 	.word	0x00043fc8
   2befc:	00043fd8 	.word	0x00043fd8
   2bf00:	0004400c 	.word	0x0004400c
   2bf04:	00043fec 	.word	0x00043fec

0002bf08 <CInterruptSystem::DisconnectFIQ()>:
   2bf08:	e59f3068 	ldr	r3, [pc, #104]	; 2bf78 <CInterruptSystem::DisconnectFIQ()+0x70>
   2bf0c:	e5d31001 	ldrb	r1, [r3, #1]
   2bf10:	e5d32000 	ldrb	r2, [r3]
   2bf14:	e5d30002 	ldrb	r0, [r3, #2]
   2bf18:	e1822401 	orr	r2, r2, r1, lsl #8
   2bf1c:	e5d31003 	ldrb	r1, [r3, #3]
   2bf20:	e1822800 	orr	r2, r2, r0, lsl #16
   2bf24:	e1922c01 	orrs	r2, r2, r1, lsl #24
   2bf28:	0a00000d 	beq	2bf64 <CInterruptSystem::DisconnectFIQ()+0x5c>
   2bf2c:	e3a02000 	mov	r2, #0
   2bf30:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   2bf34:	e59f1040 	ldr	r1, [pc, #64]	; 2bf7c <CInterruptSystem::DisconnectFIQ()+0x74>
   2bf38:	e581220c 	str	r2, [r1, #524]	; 0x20c
   2bf3c:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   2bf40:	e5c32000 	strb	r2, [r3]
   2bf44:	e5c32001 	strb	r2, [r3, #1]
   2bf48:	e5c32002 	strb	r2, [r3, #2]
   2bf4c:	e5c32003 	strb	r2, [r3, #3]
   2bf50:	e5c32004 	strb	r2, [r3, #4]
   2bf54:	e5c32005 	strb	r2, [r3, #5]
   2bf58:	e5c32006 	strb	r2, [r3, #6]
   2bf5c:	e5c32007 	strb	r2, [r3, #7]
   2bf60:	e12fff1e 	bx	lr
   2bf64:	e3a0209b 	mov	r2, #155	; 0x9b
   2bf68:	e92d4010 	push	{r4, lr}
   2bf6c:	e59f100c 	ldr	r1, [pc, #12]	; 2bf80 <CInterruptSystem::DisconnectFIQ()+0x78>
   2bf70:	e59f000c 	ldr	r0, [pc, #12]	; 2bf84 <CInterruptSystem::DisconnectFIQ()+0x7c>
   2bf74:	ebffe1ee 	bl	24734 <assertion_failed>
   2bf78:	000465c8 	.word	0x000465c8
   2bf7c:	2000b000 	.word	0x2000b000
   2bf80:	00043fc8 	.word	0x00043fc8
   2bf84:	00044004 	.word	0x00044004

0002bf88 <CInterruptSystem::EnableIRQ(unsigned int)>:
   2bf88:	e3a03000 	mov	r3, #0
   2bf8c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bf90:	e3500047 	cmp	r0, #71	; 0x47
   2bf94:	8a00000e 	bhi	2bfd4 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
   2bf98:	e350001f 	cmp	r0, #31
   2bf9c:	8a000007 	bhi	2bfc0 <CInterruptSystem::EnableIRQ(unsigned int)+0x38>
   2bfa0:	e59f2040 	ldr	r2, [pc, #64]	; 2bfe8 <CInterruptSystem::EnableIRQ(unsigned int)+0x60>
   2bfa4:	e3a03001 	mov	r3, #1
   2bfa8:	e200001f 	and	r0, r0, #31
   2bfac:	e1a00013 	lsl	r0, r3, r0
   2bfb0:	e5820000 	str	r0, [r2]
   2bfb4:	e3a03000 	mov	r3, #0
   2bfb8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bfbc:	e12fff1e 	bx	lr
   2bfc0:	e59f3024 	ldr	r3, [pc, #36]	; 2bfec <CInterruptSystem::EnableIRQ(unsigned int)+0x64>
   2bfc4:	e350003f 	cmp	r0, #63	; 0x3f
   2bfc8:	e59f2020 	ldr	r2, [pc, #32]	; 2bff0 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
   2bfcc:	81a02003 	movhi	r2, r3
   2bfd0:	eafffff3 	b	2bfa4 <CInterruptSystem::EnableIRQ(unsigned int)+0x1c>
   2bfd4:	e3a020a7 	mov	r2, #167	; 0xa7
   2bfd8:	e92d4010 	push	{r4, lr}
   2bfdc:	e59f1010 	ldr	r1, [pc, #16]	; 2bff4 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   2bfe0:	e59f0010 	ldr	r0, [pc, #16]	; 2bff8 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   2bfe4:	ebffe1d2 	bl	24734 <assertion_failed>
   2bfe8:	2000b210 	.word	0x2000b210
   2bfec:	2000b218 	.word	0x2000b218
   2bff0:	2000b214 	.word	0x2000b214
   2bff4:	00043fc8 	.word	0x00043fc8
   2bff8:	0004401c 	.word	0x0004401c

0002bffc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   2bffc:	e3510047 	cmp	r1, #71	; 0x47
   2c000:	e92d4010 	push	{r4, lr}
   2c004:	8a000008 	bhi	2c02c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x30>
   2c008:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   2c00c:	e080e101 	add	lr, r0, r1, lsl #2
   2c010:	e35c0000 	cmp	ip, #0
   2c014:	1a000008 	bne	2c03c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x40>
   2c018:	e7802101 	str	r2, [r0, r1, lsl #2]
   2c01c:	e58e3120 	str	r3, [lr, #288]	; 0x120
   2c020:	e1a00001 	mov	r0, r1
   2c024:	e8bd4010 	pop	{r4, lr}
   2c028:	eaffffd6 	b	2bf88 <CInterruptSystem::EnableIRQ(unsigned int)>
   2c02c:	e3a02076 	mov	r2, #118	; 0x76
   2c030:	e59f1014 	ldr	r1, [pc, #20]	; 2c04c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   2c034:	e59f0014 	ldr	r0, [pc, #20]	; 2c050 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x54>
   2c038:	ebffe1bd 	bl	24734 <assertion_failed>
   2c03c:	e3a02077 	mov	r2, #119	; 0x77
   2c040:	e59f1004 	ldr	r1, [pc, #4]	; 2c04c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   2c044:	e59f0008 	ldr	r0, [pc, #8]	; 2c054 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
   2c048:	ebffe1b9 	bl	24734 <assertion_failed>
   2c04c:	00043fc8 	.word	0x00043fc8
   2c050:	0004401c 	.word	0x0004401c
   2c054:	00044030 	.word	0x00044030

0002c058 <CInterruptSystem::DisableIRQ(unsigned int)>:
   2c058:	e3a03000 	mov	r3, #0
   2c05c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c060:	e3500047 	cmp	r0, #71	; 0x47
   2c064:	8a00000e 	bhi	2c0a4 <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
   2c068:	e350001f 	cmp	r0, #31
   2c06c:	8a000007 	bhi	2c090 <CInterruptSystem::DisableIRQ(unsigned int)+0x38>
   2c070:	e59f2040 	ldr	r2, [pc, #64]	; 2c0b8 <CInterruptSystem::DisableIRQ(unsigned int)+0x60>
   2c074:	e3a03001 	mov	r3, #1
   2c078:	e200001f 	and	r0, r0, #31
   2c07c:	e1a00013 	lsl	r0, r3, r0
   2c080:	e5820000 	str	r0, [r2]
   2c084:	e3a03000 	mov	r3, #0
   2c088:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c08c:	e12fff1e 	bx	lr
   2c090:	e59f3024 	ldr	r3, [pc, #36]	; 2c0bc <CInterruptSystem::DisableIRQ(unsigned int)+0x64>
   2c094:	e350003f 	cmp	r0, #63	; 0x3f
   2c098:	e59f2020 	ldr	r2, [pc, #32]	; 2c0c0 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
   2c09c:	81a02003 	movhi	r2, r3
   2c0a0:	eafffff3 	b	2c074 <CInterruptSystem::DisableIRQ(unsigned int)+0x1c>
   2c0a4:	e3a020bf 	mov	r2, #191	; 0xbf
   2c0a8:	e92d4010 	push	{r4, lr}
   2c0ac:	e59f1010 	ldr	r1, [pc, #16]	; 2c0c4 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   2c0b0:	e59f0010 	ldr	r0, [pc, #16]	; 2c0c8 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   2c0b4:	ebffe19e 	bl	24734 <assertion_failed>
   2c0b8:	2000b21c 	.word	0x2000b21c
   2c0bc:	2000b224 	.word	0x2000b224
   2c0c0:	2000b220 	.word	0x2000b220
   2c0c4:	00043fc8 	.word	0x00043fc8
   2c0c8:	0004401c 	.word	0x0004401c

0002c0cc <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   2c0cc:	e3510047 	cmp	r1, #71	; 0x47
   2c0d0:	e92d4070 	push	{r4, r5, r6, lr}
   2c0d4:	8a00000b 	bhi	2c108 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   2c0d8:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   2c0dc:	e1a04001 	mov	r4, r1
   2c0e0:	e3530000 	cmp	r3, #0
   2c0e4:	e1a05000 	mov	r5, r0
   2c0e8:	e0806101 	add	r6, r0, r1, lsl #2
   2c0ec:	0a000009 	beq	2c118 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>
   2c0f0:	e1a00001 	mov	r0, r1
   2c0f4:	ebffffd7 	bl	2c058 <CInterruptSystem::DisableIRQ(unsigned int)>
   2c0f8:	e3a03000 	mov	r3, #0
   2c0fc:	e7853104 	str	r3, [r5, r4, lsl #2]
   2c100:	e5863120 	str	r3, [r6, #288]	; 0x120
   2c104:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c108:	e3a02081 	mov	r2, #129	; 0x81
   2c10c:	e59f1014 	ldr	r1, [pc, #20]	; 2c128 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   2c110:	e59f0014 	ldr	r0, [pc, #20]	; 2c12c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x60>
   2c114:	ebffe186 	bl	24734 <assertion_failed>
   2c118:	e3a02082 	mov	r2, #130	; 0x82
   2c11c:	e59f1004 	ldr	r1, [pc, #4]	; 2c128 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   2c120:	e59f0008 	ldr	r0, [pc, #8]	; 2c130 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
   2c124:	ebffe182 	bl	24734 <assertion_failed>
   2c128:	00043fc8 	.word	0x00043fc8
   2c12c:	0004401c 	.word	0x0004401c
   2c130:	0004404c 	.word	0x0004404c

0002c134 <CInterruptSystem::EnableFIQ(unsigned int)>:
   2c134:	e3a03000 	mov	r3, #0
   2c138:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c13c:	e3500047 	cmp	r0, #71	; 0x47
   2c140:	8a000004 	bhi	2c158 <CInterruptSystem::EnableFIQ(unsigned int)+0x24>
   2c144:	e59f2020 	ldr	r2, [pc, #32]	; 2c16c <CInterruptSystem::EnableFIQ(unsigned int)+0x38>
   2c148:	e3800080 	orr	r0, r0, #128	; 0x80
   2c14c:	e582020c 	str	r0, [r2, #524]	; 0x20c
   2c150:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c154:	e12fff1e 	bx	lr
   2c158:	e3a020d7 	mov	r2, #215	; 0xd7
   2c15c:	e92d4010 	push	{r4, lr}
   2c160:	e59f1008 	ldr	r1, [pc, #8]	; 2c170 <CInterruptSystem::EnableFIQ(unsigned int)+0x3c>
   2c164:	e59f0008 	ldr	r0, [pc, #8]	; 2c174 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
   2c168:	ebffe171 	bl	24734 <assertion_failed>
   2c16c:	2000b000 	.word	0x2000b000
   2c170:	00043fc8 	.word	0x00043fc8
   2c174:	00043fd8 	.word	0x00043fd8

0002c178 <CInterruptSystem::DisableFIQ()>:
   2c178:	e3a03000 	mov	r3, #0
   2c17c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c180:	e59f2008 	ldr	r2, [pc, #8]	; 2c190 <CInterruptSystem::DisableFIQ()+0x18>
   2c184:	e582320c 	str	r3, [r2, #524]	; 0x20c
   2c188:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c18c:	e12fff1e 	bx	lr
   2c190:	2000b000 	.word	0x2000b000

0002c194 <CInterruptSystem::Get()>:
   2c194:	e59f301c 	ldr	r3, [pc, #28]	; 2c1b8 <CInterruptSystem::Get()+0x24>
   2c198:	e5930000 	ldr	r0, [r3]
   2c19c:	e3500000 	cmp	r0, #0
   2c1a0:	112fff1e 	bxne	lr
   2c1a4:	e3a020e9 	mov	r2, #233	; 0xe9
   2c1a8:	e92d4010 	push	{r4, lr}
   2c1ac:	e59f1008 	ldr	r1, [pc, #8]	; 2c1bc <CInterruptSystem::Get()+0x28>
   2c1b0:	e59f0008 	ldr	r0, [pc, #8]	; 2c1c0 <CInterruptSystem::Get()+0x2c>
   2c1b4:	ebffe15e 	bl	24734 <assertion_failed>
   2c1b8:	0004c5e0 	.word	0x0004c5e0
   2c1bc:	00043fc8 	.word	0x00043fc8
   2c1c0:	00041d54 	.word	0x00041d54

0002c1c4 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   2c1c4:	e3510047 	cmp	r1, #71	; 0x47
   2c1c8:	e92d4010 	push	{r4, lr}
   2c1cc:	8a00000b 	bhi	2c200 <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   2c1d0:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   2c1d4:	e0803101 	add	r3, r0, r1, lsl #2
   2c1d8:	e3540000 	cmp	r4, #0
   2c1dc:	0a000003 	beq	2c1f0 <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   2c1e0:	e5930120 	ldr	r0, [r3, #288]	; 0x120
   2c1e4:	e12fff34 	blx	r4
   2c1e8:	e3a00001 	mov	r0, #1
   2c1ec:	e8bd8010 	pop	{r4, pc}
   2c1f0:	e1a00001 	mov	r0, r1
   2c1f4:	ebffff97 	bl	2c058 <CInterruptSystem::DisableIRQ(unsigned int)>
   2c1f8:	e1a00004 	mov	r0, r4
   2c1fc:	e8bd8010 	pop	{r4, pc}
   2c200:	e3a020ef 	mov	r2, #239	; 0xef
   2c204:	e59f1004 	ldr	r1, [pc, #4]	; 2c210 <CInterruptSystem::CallIRQHandler(unsigned int)+0x4c>
   2c208:	e59f0004 	ldr	r0, [pc, #4]	; 2c214 <CInterruptSystem::CallIRQHandler(unsigned int)+0x50>
   2c20c:	ebffe148 	bl	24734 <assertion_failed>
   2c210:	00043fc8 	.word	0x00043fc8
   2c214:	0004401c 	.word	0x0004401c

0002c218 <CInterruptSystem::InterruptHandler()>:
   2c218:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2c21c:	e59f80a4 	ldr	r8, [pc, #164]	; 2c2c8 <CInterruptSystem::InterruptHandler()+0xb0>
   2c220:	e24dd010 	sub	sp, sp, #16
   2c224:	e5983000 	ldr	r3, [r8]
   2c228:	e3530000 	cmp	r3, #0
   2c22c:	0a000021 	beq	2c2b8 <CInterruptSystem::InterruptHandler()+0xa0>
   2c230:	e3a06000 	mov	r6, #0
   2c234:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   2c238:	e59f308c 	ldr	r3, [pc, #140]	; 2c2cc <CInterruptSystem::InterruptHandler()+0xb4>
   2c23c:	e5932204 	ldr	r2, [r3, #516]	; 0x204
   2c240:	e58d2004 	str	r2, [sp, #4]
   2c244:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   2c248:	e58d2008 	str	r2, [sp, #8]
   2c24c:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   2c250:	e6ef3073 	uxtb	r3, r3
   2c254:	e58d300c 	str	r3, [sp, #12]
   2c258:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   2c25c:	e28d7004 	add	r7, sp, #4
   2c260:	e4974004 	ldr	r4, [r7], #4
   2c264:	e3540000 	cmp	r4, #0
   2c268:	1a000004 	bne	2c280 <CInterruptSystem::InterruptHandler()+0x68>
   2c26c:	e2866001 	add	r6, r6, #1
   2c270:	e3560003 	cmp	r6, #3
   2c274:	1afffff9 	bne	2c260 <CInterruptSystem::InterruptHandler()+0x48>
   2c278:	e28dd010 	add	sp, sp, #16
   2c27c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c280:	e1a05286 	lsl	r5, r6, #5
   2c284:	ea000002 	b	2c294 <CInterruptSystem::InterruptHandler()+0x7c>
   2c288:	e1b040a4 	lsrs	r4, r4, #1
   2c28c:	e2855001 	add	r5, r5, #1
   2c290:	0afffff5 	beq	2c26c <CInterruptSystem::InterruptHandler()+0x54>
   2c294:	e3140001 	tst	r4, #1
   2c298:	0afffffa 	beq	2c288 <CInterruptSystem::InterruptHandler()+0x70>
   2c29c:	e1a01005 	mov	r1, r5
   2c2a0:	e5980000 	ldr	r0, [r8]
   2c2a4:	ebffffc6 	bl	2c1c4 <CInterruptSystem::CallIRQHandler(unsigned int)>
   2c2a8:	e3500000 	cmp	r0, #0
   2c2ac:	0afffff5 	beq	2c288 <CInterruptSystem::InterruptHandler()+0x70>
   2c2b0:	e28dd010 	add	sp, sp, #16
   2c2b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c2b8:	e59f2010 	ldr	r2, [pc, #16]	; 2c2d0 <CInterruptSystem::InterruptHandler()+0xb8>
   2c2bc:	e59f1010 	ldr	r1, [pc, #16]	; 2c2d4 <CInterruptSystem::InterruptHandler()+0xbc>
   2c2c0:	e59f0010 	ldr	r0, [pc, #16]	; 2c2d8 <CInterruptSystem::InterruptHandler()+0xc0>
   2c2c4:	ebffe11a 	bl	24734 <assertion_failed>
   2c2c8:	0004c5e0 	.word	0x0004c5e0
   2c2cc:	2000b000 	.word	0x2000b000
   2c2d0:	00000102 	.word	0x00000102
   2c2d4:	00043fc8 	.word	0x00043fc8
   2c2d8:	00041d54 	.word	0x00041d54

0002c2dc <InterruptHandler>:
   2c2dc:	e92d4010 	push	{r4, lr}
   2c2e0:	e3a04000 	mov	r4, #0
   2c2e4:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   2c2e8:	ebffffca 	bl	2c218 <CInterruptSystem::InterruptHandler()>
   2c2ec:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2c2f0:	e8bd8010 	pop	{r4, pc}

0002c2f4 <__cxa_pure_virtual>:
   2c2f4:	e3a02018 	mov	r2, #24
   2c2f8:	e92d4010 	push	{r4, lr}
   2c2fc:	e59f1004 	ldr	r1, [pc, #4]	; 2c308 <__cxa_pure_virtual+0x14>
   2c300:	e59f0004 	ldr	r0, [pc, #4]	; 2c30c <__cxa_pure_virtual+0x18>
   2c304:	ebffe10a 	bl	24734 <assertion_failed>
   2c308:	00044068 	.word	0x00044068
   2c30c:	0003e11c 	.word	0x0003e11c

0002c310 <malloc>:
   2c310:	e59f300c 	ldr	r3, [pc, #12]	; 2c324 <malloc+0x14>
   2c314:	e1a01000 	mov	r1, r0
   2c318:	e5930000 	ldr	r0, [r3]
   2c31c:	e280000c 	add	r0, r0, #12
   2c320:	eafffb3e 	b	2b020 <CHeapAllocator::Allocate(unsigned int)>
   2c324:	0004c588 	.word	0x0004c588

0002c328 <free>:
   2c328:	e59f300c 	ldr	r3, [pc, #12]	; 2c33c <free+0x14>
   2c32c:	e1a01000 	mov	r1, r0
   2c330:	e5930000 	ldr	r0, [r3]
   2c334:	e280000c 	add	r0, r0, #12
   2c338:	eafffbb5 	b	2b214 <CHeapAllocator::Free(void*)>
   2c33c:	0004c588 	.word	0x0004c588

0002c340 <calloc>:
   2c340:	e0010190 	mul	r1, r0, r1
   2c344:	e3510001 	cmp	r1, #1
   2c348:	e92d4070 	push	{r4, r5, r6, lr}
   2c34c:	21a04001 	movcs	r4, r1
   2c350:	33a04001 	movcc	r4, #1
   2c354:	e1500004 	cmp	r0, r4
   2c358:	8a00000b 	bhi	2c38c <calloc+0x4c>
   2c35c:	e59f3038 	ldr	r3, [pc, #56]	; 2c39c <calloc+0x5c>
   2c360:	e1a01004 	mov	r1, r4
   2c364:	e5930000 	ldr	r0, [r3]
   2c368:	e280000c 	add	r0, r0, #12
   2c36c:	ebfffb2b 	bl	2b020 <CHeapAllocator::Allocate(unsigned int)>
   2c370:	e2505000 	subs	r5, r0, #0
   2c374:	0a000002 	beq	2c384 <calloc+0x44>
   2c378:	e1a02004 	mov	r2, r4
   2c37c:	e3a01000 	mov	r1, #0
   2c380:	ebfff6c3 	bl	29e94 <memset>
   2c384:	e1a00005 	mov	r0, r5
   2c388:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c38c:	e59f100c 	ldr	r1, [pc, #12]	; 2c3a0 <calloc+0x60>
   2c390:	e3a0202b 	mov	r2, #43	; 0x2b
   2c394:	e281000c 	add	r0, r1, #12
   2c398:	ebffe0e5 	bl	24734 <assertion_failed>
   2c39c:	0004c588 	.word	0x0004c588
   2c3a0:	00044078 	.word	0x00044078

0002c3a4 <realloc>:
   2c3a4:	e59f3010 	ldr	r3, [pc, #16]	; 2c3bc <realloc+0x18>
   2c3a8:	e1a02001 	mov	r2, r1
   2c3ac:	e5933000 	ldr	r3, [r3]
   2c3b0:	e1a01000 	mov	r1, r0
   2c3b4:	e283000c 	add	r0, r3, #12
   2c3b8:	eafffbd8 	b	2b320 <CHeapAllocator::ReAllocate(void*, unsigned int)>
   2c3bc:	0004c588 	.word	0x0004c588

0002c3c0 <palloc>:
   2c3c0:	e59f3008 	ldr	r3, [pc, #8]	; 2c3d0 <palloc+0x10>
   2c3c4:	e5930000 	ldr	r0, [r3]
   2c3c8:	e28000c8 	add	r0, r0, #200	; 0xc8
   2c3cc:	ea00027c 	b	2cdc4 <CPageAllocator::Allocate()>
   2c3d0:	0004c588 	.word	0x0004c588

0002c3d4 <pfree>:
   2c3d4:	e59f300c 	ldr	r3, [pc, #12]	; 2c3e8 <pfree+0x14>
   2c3d8:	e1a01000 	mov	r1, r0
   2c3dc:	e5930000 	ldr	r0, [r3]
   2c3e0:	e28000c8 	add	r0, r0, #200	; 0xc8
   2c3e4:	ea0002a8 	b	2ce8c <CPageAllocator::Free(void*)>
   2c3e8:	0004c588 	.word	0x0004c588

0002c3ec <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   2c3ec:	e5801000 	str	r1, [r0]
   2c3f0:	e5c02004 	strb	r2, [r0, #4]
   2c3f4:	e12fff1e 	bx	lr

0002c3f8 <CBcmMailBox::~CBcmMailBox()>:
   2c3f8:	e12fff1e 	bx	lr

0002c3fc <CBcmMailBox::WriteRead(unsigned int)>:
   2c3fc:	e92d4070 	push	{r4, r5, r6, lr}
   2c400:	e3a03000 	mov	r3, #0
   2c404:	e1a05000 	mov	r5, r0
   2c408:	e1a06001 	mov	r6, r1
   2c40c:	e24dd008 	sub	sp, sp, #8
   2c410:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c414:	e5d03004 	ldrb	r3, [r0, #4]
   2c418:	e3530000 	cmp	r3, #0
   2c41c:	1a000003 	bne	2c430 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   2c420:	e59f30dc 	ldr	r3, [pc, #220]	; 2c504 <CBcmMailBox::WriteRead(unsigned int)+0x108>
   2c424:	e5930000 	ldr	r0, [r3]
   2c428:	e3500000 	cmp	r0, #0
   2c42c:	1a000027 	bne	2c4d0 <CBcmMailBox::WriteRead(unsigned int)+0xd4>
   2c430:	e59f40d0 	ldr	r4, [pc, #208]	; 2c508 <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2c434:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c438:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c43c:	1a000005 	bne	2c458 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   2c440:	e3a00014 	mov	r0, #20
   2c444:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2c448:	ebfff650 	bl	29d90 <CTimer::SimpleMsDelay(unsigned int)>
   2c44c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c450:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c454:	0afffff9 	beq	2c440 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   2c458:	e59f00a8 	ldr	r0, [pc, #168]	; 2c508 <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2c45c:	e59038b8 	ldr	r3, [r0, #2232]	; 0x8b8
   2c460:	e3530000 	cmp	r3, #0
   2c464:	bafffffc 	blt	2c45c <CBcmMailBox::WriteRead(unsigned int)+0x60>
   2c468:	e316000f 	tst	r6, #15
   2c46c:	1a000020 	bne	2c4f4 <CBcmMailBox::WriteRead(unsigned int)+0xf8>
   2c470:	e5953000 	ldr	r3, [r5]
   2c474:	e59f208c 	ldr	r2, [pc, #140]	; 2c508 <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2c478:	e1866003 	orr	r6, r6, r3
   2c47c:	e58068a0 	str	r6, [r0, #2208]	; 0x8a0
   2c480:	e5950000 	ldr	r0, [r5]
   2c484:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2c488:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c48c:	1afffffc 	bne	2c484 <CBcmMailBox::WriteRead(unsigned int)+0x88>
   2c490:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   2c494:	e203100f 	and	r1, r3, #15
   2c498:	e1510000 	cmp	r1, r0
   2c49c:	1afffff8 	bne	2c484 <CBcmMailBox::WriteRead(unsigned int)+0x88>
   2c4a0:	e5d52004 	ldrb	r2, [r5, #4]
   2c4a4:	e3c3000f 	bic	r0, r3, #15
   2c4a8:	e3520000 	cmp	r2, #0
   2c4ac:	1a000003 	bne	2c4c0 <CBcmMailBox::WriteRead(unsigned int)+0xc4>
   2c4b0:	e59f304c 	ldr	r3, [pc, #76]	; 2c504 <CBcmMailBox::WriteRead(unsigned int)+0x108>
   2c4b4:	e5933000 	ldr	r3, [r3]
   2c4b8:	e3530000 	cmp	r3, #0
   2c4bc:	1a000005 	bne	2c4d8 <CBcmMailBox::WriteRead(unsigned int)+0xdc>
   2c4c0:	e3a03000 	mov	r3, #0
   2c4c4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c4c8:	e28dd008 	add	sp, sp, #8
   2c4cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c4d0:	ebfffdcb 	bl	2bc04 <EnterCritical>
   2c4d4:	eaffffd5 	b	2c430 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   2c4d8:	e58d0004 	str	r0, [sp, #4]
   2c4dc:	ebfffdf2 	bl	2bcac <LeaveCritical>
   2c4e0:	e3a03000 	mov	r3, #0
   2c4e4:	e59d0004 	ldr	r0, [sp, #4]
   2c4e8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c4ec:	e28dd008 	add	sp, sp, #8
   2c4f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c4f4:	e3a02062 	mov	r2, #98	; 0x62
   2c4f8:	e59f100c 	ldr	r1, [pc, #12]	; 2c50c <CBcmMailBox::WriteRead(unsigned int)+0x110>
   2c4fc:	e59f000c 	ldr	r0, [pc, #12]	; 2c510 <CBcmMailBox::WriteRead(unsigned int)+0x114>
   2c500:	ebffe08b 	bl	24734 <assertion_failed>
   2c504:	0004c5e4 	.word	0x0004c5e4
   2c508:	2000b000 	.word	0x2000b000
   2c50c:	00044098 	.word	0x00044098
   2c510:	000440a8 	.word	0x000440a8

0002c514 <CBcmMailBox::Flush()>:
   2c514:	e92d4010 	push	{r4, lr}
   2c518:	e59f4024 	ldr	r4, [pc, #36]	; 2c544 <CBcmMailBox::Flush()+0x30>
   2c51c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c520:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c524:	18bd8010 	popne	{r4, pc}
   2c528:	e3a00014 	mov	r0, #20
   2c52c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2c530:	ebfff616 	bl	29d90 <CTimer::SimpleMsDelay(unsigned int)>
   2c534:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c538:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c53c:	0afffff9 	beq	2c528 <CBcmMailBox::Flush()+0x14>
   2c540:	e8bd8010 	pop	{r4, pc}
   2c544:	2000b000 	.word	0x2000b000

0002c548 <CBcmMailBox::Read()>:
   2c548:	e59f2024 	ldr	r2, [pc, #36]	; 2c574 <CBcmMailBox::Read()+0x2c>
   2c54c:	e5901000 	ldr	r1, [r0]
   2c550:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2c554:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c558:	1afffffc 	bne	2c550 <CBcmMailBox::Read()+0x8>
   2c55c:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   2c560:	e200300f 	and	r3, r0, #15
   2c564:	e1530001 	cmp	r3, r1
   2c568:	1afffff8 	bne	2c550 <CBcmMailBox::Read()+0x8>
   2c56c:	e3c0000f 	bic	r0, r0, #15
   2c570:	e12fff1e 	bx	lr
   2c574:	2000b000 	.word	0x2000b000

0002c578 <CBcmMailBox::Write(unsigned int)>:
   2c578:	e59f2034 	ldr	r2, [pc, #52]	; 2c5b4 <CBcmMailBox::Write(unsigned int)+0x3c>
   2c57c:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   2c580:	e3530000 	cmp	r3, #0
   2c584:	bafffffc 	blt	2c57c <CBcmMailBox::Write(unsigned int)+0x4>
   2c588:	e311000f 	tst	r1, #15
   2c58c:	1a000003 	bne	2c5a0 <CBcmMailBox::Write(unsigned int)+0x28>
   2c590:	e5903000 	ldr	r3, [r0]
   2c594:	e1811003 	orr	r1, r1, r3
   2c598:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   2c59c:	e12fff1e 	bx	lr
   2c5a0:	e3a02062 	mov	r2, #98	; 0x62
   2c5a4:	e92d4010 	push	{r4, lr}
   2c5a8:	e59f1008 	ldr	r1, [pc, #8]	; 2c5b8 <CBcmMailBox::Write(unsigned int)+0x40>
   2c5ac:	e59f0008 	ldr	r0, [pc, #8]	; 2c5bc <CBcmMailBox::Write(unsigned int)+0x44>
   2c5b0:	ebffe05f 	bl	24734 <assertion_failed>
   2c5b4:	2000b000 	.word	0x2000b000
   2c5b8:	00044098 	.word	0x00044098
   2c5bc:	000440a8 	.word	0x000440a8

0002c5c0 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   2c5c0:	e3a02000 	mov	r2, #0
   2c5c4:	e59f3004 	ldr	r3, [pc, #4]	; 2c5d0 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   2c5c8:	e5832000 	str	r2, [r3]
   2c5cc:	e12fff1e 	bx	lr
   2c5d0:	0004c5e4 	.word	0x0004c5e4
   2c5d4:	00000000 	.word	0x00000000

0002c5d8 <DelayLoop>:
   2c5d8:	e1a01001 	mov	r1, r1
   2c5dc:	e1a02002 	mov	r2, r2
   2c5e0:	e2500001 	subs	r0, r0, #1
   2c5e4:	8afffffb 	bhi	2c5d8 <DelayLoop>
   2c5e8:	e1a0f00e 	mov	pc, lr

0002c5ec <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   2c5ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2c5f0:	e3a0e000 	mov	lr, #0
   2c5f4:	e1a03000 	mov	r3, r0
   2c5f8:	e1a0c00e 	mov	ip, lr
   2c5fc:	e5801000 	str	r1, [r0]
   2c600:	e28020dc 	add	r2, r0, #220	; 0xdc
   2c604:	e5e3e004 	strb	lr, [r3, #4]!
   2c608:	e5a3c004 	str	ip, [r3, #4]!
   2c60c:	e1530002 	cmp	r3, r2
   2c610:	1afffffc 	bne	2c608 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   2c614:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002c618 <CGPIOManager::~CGPIOManager()>:
   2c618:	e92d4010 	push	{r4, lr}
   2c61c:	e2803004 	add	r3, r0, #4
   2c620:	e1a04000 	mov	r4, r0
   2c624:	e28010dc 	add	r1, r0, #220	; 0xdc
   2c628:	ea000001 	b	2c634 <CGPIOManager::~CGPIOManager()+0x1c>
   2c62c:	e1530001 	cmp	r3, r1
   2c630:	0a000006 	beq	2c650 <CGPIOManager::~CGPIOManager()+0x38>
   2c634:	e5b32004 	ldr	r2, [r3, #4]!
   2c638:	e3520000 	cmp	r2, #0
   2c63c:	0afffffa 	beq	2c62c <CGPIOManager::~CGPIOManager()+0x14>
   2c640:	e3a0202c 	mov	r2, #44	; 0x2c
   2c644:	e59f103c 	ldr	r1, [pc, #60]	; 2c688 <CGPIOManager::~CGPIOManager()+0x70>
   2c648:	e59f003c 	ldr	r0, [pc, #60]	; 2c68c <CGPIOManager::~CGPIOManager()+0x74>
   2c64c:	ebffe038 	bl	24734 <assertion_failed>
   2c650:	e5d43004 	ldrb	r3, [r4, #4]
   2c654:	e3530000 	cmp	r3, #0
   2c658:	0a000004 	beq	2c670 <CGPIOManager::~CGPIOManager()+0x58>
   2c65c:	e5940000 	ldr	r0, [r4]
   2c660:	e3500000 	cmp	r0, #0
   2c664:	0a000003 	beq	2c678 <CGPIOManager::~CGPIOManager()+0x60>
   2c668:	e3a01034 	mov	r1, #52	; 0x34
   2c66c:	ebfffe96 	bl	2c0cc <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2c670:	e1a00004 	mov	r0, r4
   2c674:	e8bd8010 	pop	{r4, pc}
   2c678:	e3a02032 	mov	r2, #50	; 0x32
   2c67c:	e59f1004 	ldr	r1, [pc, #4]	; 2c688 <CGPIOManager::~CGPIOManager()+0x70>
   2c680:	e59f0008 	ldr	r0, [pc, #8]	; 2c690 <CGPIOManager::~CGPIOManager()+0x78>
   2c684:	ebffe02a 	bl	24734 <assertion_failed>
   2c688:	000440bc 	.word	0x000440bc
   2c68c:	000440cc 	.word	0x000440cc
   2c690:	000440e0 	.word	0x000440e0

0002c694 <CGPIOManager::Initialize()>:
   2c694:	e5d03004 	ldrb	r3, [r0, #4]
   2c698:	e92d4010 	push	{r4, lr}
   2c69c:	e3530000 	cmp	r3, #0
   2c6a0:	1a00000a 	bne	2c6d0 <CGPIOManager::Initialize()+0x3c>
   2c6a4:	e1a04000 	mov	r4, r0
   2c6a8:	e5900000 	ldr	r0, [r0]
   2c6ac:	e3500000 	cmp	r0, #0
   2c6b0:	0a00000a 	beq	2c6e0 <CGPIOManager::Initialize()+0x4c>
   2c6b4:	e1a03004 	mov	r3, r4
   2c6b8:	e3a01034 	mov	r1, #52	; 0x34
   2c6bc:	e59f202c 	ldr	r2, [pc, #44]	; 2c6f0 <CGPIOManager::Initialize()+0x5c>
   2c6c0:	ebfffe4d 	bl	2bffc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2c6c4:	e3a00001 	mov	r0, #1
   2c6c8:	e5c40004 	strb	r0, [r4, #4]
   2c6cc:	e8bd8010 	pop	{r4, pc}
   2c6d0:	e3a0203b 	mov	r2, #59	; 0x3b
   2c6d4:	e59f1018 	ldr	r1, [pc, #24]	; 2c6f4 <CGPIOManager::Initialize()+0x60>
   2c6d8:	e59f0018 	ldr	r0, [pc, #24]	; 2c6f8 <CGPIOManager::Initialize()+0x64>
   2c6dc:	ebffe014 	bl	24734 <assertion_failed>
   2c6e0:	e3a0203c 	mov	r2, #60	; 0x3c
   2c6e4:	e59f1008 	ldr	r1, [pc, #8]	; 2c6f4 <CGPIOManager::Initialize()+0x60>
   2c6e8:	e59f000c 	ldr	r0, [pc, #12]	; 2c6fc <CGPIOManager::Initialize()+0x68>
   2c6ec:	ebffe010 	bl	24734 <assertion_failed>
   2c6f0:	0002c8f0 	.word	0x0002c8f0
   2c6f4:	000440bc 	.word	0x000440bc
   2c6f8:	000440f4 	.word	0x000440f4
   2c6fc:	000440e0 	.word	0x000440e0

0002c700 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   2c700:	e5d03004 	ldrb	r3, [r0, #4]
   2c704:	e92d4010 	push	{r4, lr}
   2c708:	e3530000 	cmp	r3, #0
   2c70c:	0a00000a 	beq	2c73c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   2c710:	e3510000 	cmp	r1, #0
   2c714:	0a00000c 	beq	2c74c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   2c718:	e5913004 	ldr	r3, [r1, #4]
   2c71c:	e3530035 	cmp	r3, #53	; 0x35
   2c720:	8a00000d 	bhi	2c75c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
   2c724:	e0800103 	add	r0, r0, r3, lsl #2
   2c728:	e5903008 	ldr	r3, [r0, #8]
   2c72c:	e3530000 	cmp	r3, #0
   2c730:	1a00000d 	bne	2c76c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   2c734:	e5801008 	str	r1, [r0, #8]
   2c738:	e8bd8010 	pop	{r4, pc}
   2c73c:	e3a02045 	mov	r2, #69	; 0x45
   2c740:	e59f1034 	ldr	r1, [pc, #52]	; 2c77c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c744:	e59f0034 	ldr	r0, [pc, #52]	; 2c780 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x80>
   2c748:	ebffdff9 	bl	24734 <assertion_failed>
   2c74c:	e3a02047 	mov	r2, #71	; 0x47
   2c750:	e59f1024 	ldr	r1, [pc, #36]	; 2c77c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c754:	e59f0028 	ldr	r0, [pc, #40]	; 2c784 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   2c758:	ebffdff5 	bl	24734 <assertion_failed>
   2c75c:	e3a02049 	mov	r2, #73	; 0x49
   2c760:	e59f1014 	ldr	r1, [pc, #20]	; 2c77c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c764:	e59f001c 	ldr	r0, [pc, #28]	; 2c788 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x88>
   2c768:	ebffdff1 	bl	24734 <assertion_failed>
   2c76c:	e3a0204b 	mov	r2, #75	; 0x4b
   2c770:	e59f1004 	ldr	r1, [pc, #4]	; 2c77c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c774:	e59f0010 	ldr	r0, [pc, #16]	; 2c78c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x8c>
   2c778:	ebffdfed 	bl	24734 <assertion_failed>
   2c77c:	000440bc 	.word	0x000440bc
   2c780:	00044108 	.word	0x00044108
   2c784:	00044118 	.word	0x00044118
   2c788:	00044124 	.word	0x00044124
   2c78c:	000440cc 	.word	0x000440cc

0002c790 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   2c790:	e5d03004 	ldrb	r3, [r0, #4]
   2c794:	e92d4010 	push	{r4, lr}
   2c798:	e3530000 	cmp	r3, #0
   2c79c:	0a00000b 	beq	2c7d0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   2c7a0:	e3510000 	cmp	r1, #0
   2c7a4:	0a00000d 	beq	2c7e0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x50>
   2c7a8:	e5913004 	ldr	r3, [r1, #4]
   2c7ac:	e3530035 	cmp	r3, #53	; 0x35
   2c7b0:	8a00000e 	bhi	2c7f0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x60>
   2c7b4:	e0800103 	add	r0, r0, r3, lsl #2
   2c7b8:	e5903008 	ldr	r3, [r0, #8]
   2c7bc:	e3530000 	cmp	r3, #0
   2c7c0:	0a00000e 	beq	2c800 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   2c7c4:	e3a03000 	mov	r3, #0
   2c7c8:	e5803008 	str	r3, [r0, #8]
   2c7cc:	e8bd8010 	pop	{r4, pc}
   2c7d0:	e3a02052 	mov	r2, #82	; 0x52
   2c7d4:	e59f1034 	ldr	r1, [pc, #52]	; 2c810 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c7d8:	e59f0034 	ldr	r0, [pc, #52]	; 2c814 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x84>
   2c7dc:	ebffdfd4 	bl	24734 <assertion_failed>
   2c7e0:	e3a02054 	mov	r2, #84	; 0x54
   2c7e4:	e59f1024 	ldr	r1, [pc, #36]	; 2c810 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c7e8:	e59f0028 	ldr	r0, [pc, #40]	; 2c818 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   2c7ec:	ebffdfd0 	bl	24734 <assertion_failed>
   2c7f0:	e3a02056 	mov	r2, #86	; 0x56
   2c7f4:	e59f1014 	ldr	r1, [pc, #20]	; 2c810 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c7f8:	e59f001c 	ldr	r0, [pc, #28]	; 2c81c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
   2c7fc:	ebffdfcc 	bl	24734 <assertion_failed>
   2c800:	e3a02058 	mov	r2, #88	; 0x58
   2c804:	e59f1004 	ldr	r1, [pc, #4]	; 2c810 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c808:	e59f0010 	ldr	r0, [pc, #16]	; 2c820 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   2c80c:	ebffdfc8 	bl	24734 <assertion_failed>
   2c810:	000440bc 	.word	0x000440bc
   2c814:	00044108 	.word	0x00044108
   2c818:	00044118 	.word	0x00044118
   2c81c:	00044124 	.word	0x00044124
   2c820:	00044138 	.word	0x00044138

0002c824 <CGPIOManager::InterruptHandler()>:
   2c824:	e5d03004 	ldrb	r3, [r0, #4]
   2c828:	e92d4070 	push	{r4, r5, r6, lr}
   2c82c:	e3530000 	cmp	r3, #0
   2c830:	0a000025 	beq	2c8cc <CGPIOManager::InterruptHandler()+0xa8>
   2c834:	e3a04000 	mov	r4, #0
   2c838:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2c83c:	e59f2098 	ldr	r2, [pc, #152]	; 2c8dc <CGPIOManager::InterruptHandler()+0xb8>
   2c840:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   2c844:	ea000005 	b	2c860 <CGPIOManager::InterruptHandler()+0x3c>
   2c848:	e2844001 	add	r4, r4, #1
   2c84c:	e314001f 	tst	r4, #31
   2c850:	11a030a3 	lsrne	r3, r3, #1
   2c854:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   2c858:	e3540036 	cmp	r4, #54	; 0x36
   2c85c:	0a00000d 	beq	2c898 <CGPIOManager::InterruptHandler()+0x74>
   2c860:	e3130001 	tst	r3, #1
   2c864:	0afffff7 	beq	2c848 <CGPIOManager::InterruptHandler()+0x24>
   2c868:	e2843002 	add	r3, r4, #2
   2c86c:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   2c870:	e3550000 	cmp	r5, #0
   2c874:	0a00000a 	beq	2c8a4 <CGPIOManager::InterruptHandler()+0x80>
   2c878:	e1a00005 	mov	r0, r5
   2c87c:	ebffe5cc 	bl	25fb4 <CGPIOPin::InterruptHandler()>
   2c880:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   2c884:	e3530000 	cmp	r3, #0
   2c888:	1595100c 	ldrne	r1, [r5, #12]
   2c88c:	15952008 	ldrne	r2, [r5, #8]
   2c890:	159f3048 	ldrne	r3, [pc, #72]	; 2c8e0 <CGPIOManager::InterruptHandler()+0xbc>
   2c894:	17821003 	strne	r1, [r2, r3]
   2c898:	e3a03000 	mov	r3, #0
   2c89c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c8a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c8a4:	e1a00004 	mov	r0, r4
   2c8a8:	ebffe5e2 	bl	26038 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   2c8ac:	e3a02001 	mov	r2, #1
   2c8b0:	e59f302c 	ldr	r3, [pc, #44]	; 2c8e4 <CGPIOManager::InterruptHandler()+0xc0>
   2c8b4:	e204101f 	and	r1, r4, #31
   2c8b8:	e08332a4 	add	r3, r3, r4, lsr #5
   2c8bc:	e1a03103 	lsl	r3, r3, #2
   2c8c0:	e1a02112 	lsl	r2, r2, r1
   2c8c4:	e5832000 	str	r2, [r3]
   2c8c8:	eafffff2 	b	2c898 <CGPIOManager::InterruptHandler()+0x74>
   2c8cc:	e3a0205e 	mov	r2, #94	; 0x5e
   2c8d0:	e59f1010 	ldr	r1, [pc, #16]	; 2c8e8 <CGPIOManager::InterruptHandler()+0xc4>
   2c8d4:	e59f0010 	ldr	r0, [pc, #16]	; 2c8ec <CGPIOManager::InterruptHandler()+0xc8>
   2c8d8:	ebffdf95 	bl	24734 <assertion_failed>
   2c8dc:	20200000 	.word	0x20200000
   2c8e0:	20200040 	.word	0x20200040
   2c8e4:	08080010 	.word	0x08080010
   2c8e8:	000440bc 	.word	0x000440bc
   2c8ec:	00044108 	.word	0x00044108

0002c8f0 <CGPIOManager::InterruptStub(void*)>:
   2c8f0:	e3500000 	cmp	r0, #0
   2c8f4:	0a000000 	beq	2c8fc <CGPIOManager::InterruptStub(void*)+0xc>
   2c8f8:	eaffffc9 	b	2c824 <CGPIOManager::InterruptHandler()>
   2c8fc:	e3a0208e 	mov	r2, #142	; 0x8e
   2c900:	e92d4010 	push	{r4, lr}
   2c904:	e59f1004 	ldr	r1, [pc, #4]	; 2c910 <CGPIOManager::InterruptStub(void*)+0x20>
   2c908:	e59f0004 	ldr	r0, [pc, #4]	; 2c914 <CGPIOManager::InterruptStub(void*)+0x24>
   2c90c:	ebffdf88 	bl	24734 <assertion_failed>
   2c910:	000440bc 	.word	0x000440bc
   2c914:	0003d5d4 	.word	0x0003d5d4

0002c918 <CPtrList::CPtrList()>:
   2c918:	e3a02000 	mov	r2, #0
   2c91c:	e5802000 	str	r2, [r0]
   2c920:	e12fff1e 	bx	lr

0002c924 <CPtrList::~CPtrList()>:
   2c924:	e5903000 	ldr	r3, [r0]
   2c928:	e3530000 	cmp	r3, #0
   2c92c:	012fff1e 	bxeq	lr
   2c930:	e3a0202a 	mov	r2, #42	; 0x2a
   2c934:	e92d4010 	push	{r4, lr}
   2c938:	e59f1004 	ldr	r1, [pc, #4]	; 2c944 <CPtrList::~CPtrList()+0x20>
   2c93c:	e59f0004 	ldr	r0, [pc, #4]	; 2c948 <CPtrList::~CPtrList()+0x24>
   2c940:	ebffdf7b 	bl	24734 <assertion_failed>
   2c944:	0004414c 	.word	0x0004414c
   2c948:	00044158 	.word	0x00044158

0002c94c <CPtrList::GetFirst()>:
   2c94c:	e5900000 	ldr	r0, [r0]
   2c950:	e12fff1e 	bx	lr

0002c954 <CPtrList::GetNext(TPtrListElement*)>:
   2c954:	e3510000 	cmp	r1, #0
   2c958:	e92d4010 	push	{r4, lr}
   2c95c:	0a000005 	beq	2c978 <CPtrList::GetNext(TPtrListElement*)+0x24>
   2c960:	e59f3030 	ldr	r3, [pc, #48]	; 2c998 <CPtrList::GetNext(TPtrListElement*)+0x44>
   2c964:	e5912000 	ldr	r2, [r1]
   2c968:	e1520003 	cmp	r2, r3
   2c96c:	1a000005 	bne	2c988 <CPtrList::GetNext(TPtrListElement*)+0x34>
   2c970:	e5910008 	ldr	r0, [r1, #8]
   2c974:	e8bd8010 	pop	{r4, pc}
   2c978:	e3a02034 	mov	r2, #52	; 0x34
   2c97c:	e59f1018 	ldr	r1, [pc, #24]	; 2c99c <CPtrList::GetNext(TPtrListElement*)+0x48>
   2c980:	e59f0018 	ldr	r0, [pc, #24]	; 2c9a0 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   2c984:	ebffdf6a 	bl	24734 <assertion_failed>
   2c988:	e3a02035 	mov	r2, #53	; 0x35
   2c98c:	e59f1008 	ldr	r1, [pc, #8]	; 2c99c <CPtrList::GetNext(TPtrListElement*)+0x48>
   2c990:	e59f000c 	ldr	r0, [pc, #12]	; 2c9a4 <CPtrList::GetNext(TPtrListElement*)+0x50>
   2c994:	ebffdf66 	bl	24734 <assertion_failed>
   2c998:	504c4d43 	.word	0x504c4d43
   2c99c:	0004414c 	.word	0x0004414c
   2c9a0:	00044168 	.word	0x00044168
   2c9a4:	00044178 	.word	0x00044178

0002c9a8 <CPtrList::GetPtr(TPtrListElement*)>:
   2c9a8:	e3510000 	cmp	r1, #0
   2c9ac:	e92d4010 	push	{r4, lr}
   2c9b0:	0a000005 	beq	2c9cc <CPtrList::GetPtr(TPtrListElement*)+0x24>
   2c9b4:	e59f3030 	ldr	r3, [pc, #48]	; 2c9ec <CPtrList::GetPtr(TPtrListElement*)+0x44>
   2c9b8:	e5912000 	ldr	r2, [r1]
   2c9bc:	e1520003 	cmp	r2, r3
   2c9c0:	1a000005 	bne	2c9dc <CPtrList::GetPtr(TPtrListElement*)+0x34>
   2c9c4:	e591000c 	ldr	r0, [r1, #12]
   2c9c8:	e8bd8010 	pop	{r4, pc}
   2c9cc:	e3a0203c 	mov	r2, #60	; 0x3c
   2c9d0:	e59f1018 	ldr	r1, [pc, #24]	; 2c9f0 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   2c9d4:	e59f0018 	ldr	r0, [pc, #24]	; 2c9f4 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   2c9d8:	ebffdf55 	bl	24734 <assertion_failed>
   2c9dc:	e3a0203d 	mov	r2, #61	; 0x3d
   2c9e0:	e59f1008 	ldr	r1, [pc, #8]	; 2c9f0 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   2c9e4:	e59f000c 	ldr	r0, [pc, #12]	; 2c9f8 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   2c9e8:	ebffdf51 	bl	24734 <assertion_failed>
   2c9ec:	504c4d43 	.word	0x504c4d43
   2c9f0:	0004414c 	.word	0x0004414c
   2c9f4:	00044168 	.word	0x00044168
   2c9f8:	00044178 	.word	0x00044178

0002c9fc <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   2c9fc:	e92d4070 	push	{r4, r5, r6, lr}
   2ca00:	e1a05000 	mov	r5, r0
   2ca04:	e3a00010 	mov	r0, #16
   2ca08:	e1a06002 	mov	r6, r2
   2ca0c:	e1a04001 	mov	r4, r1
   2ca10:	ebfff94e 	bl	2af50 <operator new(unsigned int)>
   2ca14:	e5953000 	ldr	r3, [r5]
   2ca18:	e59f20ac 	ldr	r2, [pc, #172]	; 2cacc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2ca1c:	e3530000 	cmp	r3, #0
   2ca20:	e580600c 	str	r6, [r0, #12]
   2ca24:	e5802000 	str	r2, [r0]
   2ca28:	0a000017 	beq	2ca8c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
   2ca2c:	e3540000 	cmp	r4, #0
   2ca30:	0a000019 	beq	2ca9c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   2ca34:	e5941000 	ldr	r1, [r4]
   2ca38:	e1510002 	cmp	r1, r2
   2ca3c:	1a00001a 	bne	2caac <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb0>
   2ca40:	e1530004 	cmp	r3, r4
   2ca44:	0a00000a 	beq	2ca74 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   2ca48:	e5943004 	ldr	r3, [r4, #4]
   2ca4c:	e5804008 	str	r4, [r0, #8]
   2ca50:	e3530000 	cmp	r3, #0
   2ca54:	e5803004 	str	r3, [r0, #4]
   2ca58:	0a000003 	beq	2ca6c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   2ca5c:	e5932000 	ldr	r2, [r3]
   2ca60:	e1520001 	cmp	r2, r1
   2ca64:	05830008 	streq	r0, [r3, #8]
   2ca68:	1a000013 	bne	2cabc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   2ca6c:	e5840004 	str	r0, [r4, #4]
   2ca70:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ca74:	e3a02000 	mov	r2, #0
   2ca78:	e5830004 	str	r0, [r3, #4]
   2ca7c:	e5803008 	str	r3, [r0, #8]
   2ca80:	e5850000 	str	r0, [r5]
   2ca84:	e5802004 	str	r2, [r0, #4]
   2ca88:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ca8c:	e3a0204c 	mov	r2, #76	; 0x4c
   2ca90:	e59f1038 	ldr	r1, [pc, #56]	; 2cad0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   2ca94:	e59f0038 	ldr	r0, [pc, #56]	; 2cad4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   2ca98:	ebffdf25 	bl	24734 <assertion_failed>
   2ca9c:	e3a0204d 	mov	r2, #77	; 0x4d
   2caa0:	e59f1028 	ldr	r1, [pc, #40]	; 2cad0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   2caa4:	e59f002c 	ldr	r0, [pc, #44]	; 2cad8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xdc>
   2caa8:	ebffdf21 	bl	24734 <assertion_failed>
   2caac:	e3a0204e 	mov	r2, #78	; 0x4e
   2cab0:	e59f1018 	ldr	r1, [pc, #24]	; 2cad0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   2cab4:	e59f0020 	ldr	r0, [pc, #32]	; 2cadc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   2cab8:	ebffdf1d 	bl	24734 <assertion_failed>
   2cabc:	e3a02060 	mov	r2, #96	; 0x60
   2cac0:	e59f1008 	ldr	r1, [pc, #8]	; 2cad0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   2cac4:	e59f0014 	ldr	r0, [pc, #20]	; 2cae0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe4>
   2cac8:	ebffdf19 	bl	24734 <assertion_failed>
   2cacc:	504c4d43 	.word	0x504c4d43
   2cad0:	0004414c 	.word	0x0004414c
   2cad4:	0004419c 	.word	0x0004419c
   2cad8:	000441ac 	.word	0x000441ac
   2cadc:	000441b8 	.word	0x000441b8
   2cae0:	000441dc 	.word	0x000441dc

0002cae4 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   2cae4:	e92d4070 	push	{r4, r5, r6, lr}
   2cae8:	e1a04001 	mov	r4, r1
   2caec:	e1a05000 	mov	r5, r0
   2caf0:	e3a00010 	mov	r0, #16
   2caf4:	e1a06002 	mov	r6, r2
   2caf8:	ebfff914 	bl	2af50 <operator new(unsigned int)>
   2cafc:	e59f30ac 	ldr	r3, [pc, #172]	; 2cbb0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   2cb00:	e3540000 	cmp	r4, #0
   2cb04:	e580600c 	str	r6, [r0, #12]
   2cb08:	e5803000 	str	r3, [r0]
   2cb0c:	0a000010 	beq	2cb54 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x70>
   2cb10:	e5952000 	ldr	r2, [r5]
   2cb14:	e3520000 	cmp	r2, #0
   2cb18:	0a000014 	beq	2cb70 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x8c>
   2cb1c:	e5942000 	ldr	r2, [r4]
   2cb20:	e1520003 	cmp	r2, r3
   2cb24:	1a000015 	bne	2cb80 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   2cb28:	e5943008 	ldr	r3, [r4, #8]
   2cb2c:	e5804004 	str	r4, [r0, #4]
   2cb30:	e3530000 	cmp	r3, #0
   2cb34:	e5803008 	str	r3, [r0, #8]
   2cb38:	0a000003 	beq	2cb4c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x68>
   2cb3c:	e5931000 	ldr	r1, [r3]
   2cb40:	e1510002 	cmp	r1, r2
   2cb44:	05830004 	streq	r0, [r3, #4]
   2cb48:	1a000010 	bne	2cb90 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xac>
   2cb4c:	e5840008 	str	r0, [r4, #8]
   2cb50:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cb54:	e5953000 	ldr	r3, [r5]
   2cb58:	e3530000 	cmp	r3, #0
   2cb5c:	1a00000f 	bne	2cba0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   2cb60:	e5803004 	str	r3, [r0, #4]
   2cb64:	e5803008 	str	r3, [r0, #8]
   2cb68:	e5850000 	str	r0, [r5]
   2cb6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cb70:	e3a0207d 	mov	r2, #125	; 0x7d
   2cb74:	e59f1038 	ldr	r1, [pc, #56]	; 2cbb4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2cb78:	e59f0038 	ldr	r0, [pc, #56]	; 2cbb8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd4>
   2cb7c:	ebffdeec 	bl	24734 <assertion_failed>
   2cb80:	e3a0207e 	mov	r2, #126	; 0x7e
   2cb84:	e59f1028 	ldr	r1, [pc, #40]	; 2cbb4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2cb88:	e59f002c 	ldr	r0, [pc, #44]	; 2cbbc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   2cb8c:	ebffdee8 	bl	24734 <assertion_failed>
   2cb90:	e3a02085 	mov	r2, #133	; 0x85
   2cb94:	e59f1018 	ldr	r1, [pc, #24]	; 2cbb4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2cb98:	e59f0020 	ldr	r0, [pc, #32]	; 2cbc0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   2cb9c:	ebffdee4 	bl	24734 <assertion_failed>
   2cba0:	e3a02074 	mov	r2, #116	; 0x74
   2cba4:	e59f1008 	ldr	r1, [pc, #8]	; 2cbb4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2cba8:	e59f0014 	ldr	r0, [pc, #20]	; 2cbc4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   2cbac:	ebffdee0 	bl	24734 <assertion_failed>
   2cbb0:	504c4d43 	.word	0x504c4d43
   2cbb4:	0004414c 	.word	0x0004414c
   2cbb8:	0004419c 	.word	0x0004419c
   2cbbc:	00044204 	.word	0x00044204
   2cbc0:	00044228 	.word	0x00044228
   2cbc4:	00044158 	.word	0x00044158

0002cbc8 <CPtrList::Remove(TPtrListElement*)>:
   2cbc8:	e3510000 	cmp	r1, #0
   2cbcc:	e92d4010 	push	{r4, lr}
   2cbd0:	0a000029 	beq	2cc7c <CPtrList::Remove(TPtrListElement*)+0xb4>
   2cbd4:	e59f20e0 	ldr	r2, [pc, #224]	; 2ccbc <CPtrList::Remove(TPtrListElement*)+0xf4>
   2cbd8:	e5913000 	ldr	r3, [r1]
   2cbdc:	e1530002 	cmp	r3, r2
   2cbe0:	1a000029 	bne	2cc8c <CPtrList::Remove(TPtrListElement*)+0xc4>
   2cbe4:	e5902000 	ldr	r2, [r0]
   2cbe8:	e1520001 	cmp	r2, r1
   2cbec:	0a000011 	beq	2cc38 <CPtrList::Remove(TPtrListElement*)+0x70>
   2cbf0:	e5912004 	ldr	r2, [r1, #4]
   2cbf4:	e3520000 	cmp	r2, #0
   2cbf8:	0a000027 	beq	2cc9c <CPtrList::Remove(TPtrListElement*)+0xd4>
   2cbfc:	e5920000 	ldr	r0, [r2]
   2cc00:	e1500003 	cmp	r0, r3
   2cc04:	1a000018 	bne	2cc6c <CPtrList::Remove(TPtrListElement*)+0xa4>
   2cc08:	e5913008 	ldr	r3, [r1, #8]
   2cc0c:	e3530000 	cmp	r3, #0
   2cc10:	e5823008 	str	r3, [r2, #8]
   2cc14:	0a000003 	beq	2cc28 <CPtrList::Remove(TPtrListElement*)+0x60>
   2cc18:	e593c000 	ldr	ip, [r3]
   2cc1c:	e15c0000 	cmp	ip, r0
   2cc20:	05832004 	streq	r2, [r3, #4]
   2cc24:	1a000020 	bne	2ccac <CPtrList::Remove(TPtrListElement*)+0xe4>
   2cc28:	e8bd4010 	pop	{r4, lr}
   2cc2c:	e1a00001 	mov	r0, r1
   2cc30:	e3a01010 	mov	r1, #16
   2cc34:	eafff8d3 	b	2af88 <operator delete(void*, unsigned int)>
   2cc38:	e5922008 	ldr	r2, [r2, #8]
   2cc3c:	e3520000 	cmp	r2, #0
   2cc40:	e5802000 	str	r2, [r0]
   2cc44:	0afffff7 	beq	2cc28 <CPtrList::Remove(TPtrListElement*)+0x60>
   2cc48:	e5920000 	ldr	r0, [r2]
   2cc4c:	e1500003 	cmp	r0, r3
   2cc50:	03a03000 	moveq	r3, #0
   2cc54:	05823004 	streq	r3, [r2, #4]
   2cc58:	0afffff2 	beq	2cc28 <CPtrList::Remove(TPtrListElement*)+0x60>
   2cc5c:	e3a02098 	mov	r2, #152	; 0x98
   2cc60:	e59f1058 	ldr	r1, [pc, #88]	; 2ccc0 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2cc64:	e59f0058 	ldr	r0, [pc, #88]	; 2ccc4 <CPtrList::Remove(TPtrListElement*)+0xfc>
   2cc68:	ebffdeb1 	bl	24734 <assertion_failed>
   2cc6c:	e3a0209f 	mov	r2, #159	; 0x9f
   2cc70:	e59f1048 	ldr	r1, [pc, #72]	; 2ccc0 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2cc74:	e59f004c 	ldr	r0, [pc, #76]	; 2ccc8 <CPtrList::Remove(TPtrListElement*)+0x100>
   2cc78:	ebffdead 	bl	24734 <assertion_failed>
   2cc7c:	e3a0208f 	mov	r2, #143	; 0x8f
   2cc80:	e59f1038 	ldr	r1, [pc, #56]	; 2ccc0 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2cc84:	e59f0040 	ldr	r0, [pc, #64]	; 2cccc <CPtrList::Remove(TPtrListElement*)+0x104>
   2cc88:	ebffdea9 	bl	24734 <assertion_failed>
   2cc8c:	e3a02090 	mov	r2, #144	; 0x90
   2cc90:	e59f1028 	ldr	r1, [pc, #40]	; 2ccc0 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2cc94:	e59f0034 	ldr	r0, [pc, #52]	; 2ccd0 <CPtrList::Remove(TPtrListElement*)+0x108>
   2cc98:	ebffdea5 	bl	24734 <assertion_failed>
   2cc9c:	e3a0209e 	mov	r2, #158	; 0x9e
   2cca0:	e59f1018 	ldr	r1, [pc, #24]	; 2ccc0 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2cca4:	e59f0028 	ldr	r0, [pc, #40]	; 2ccd4 <CPtrList::Remove(TPtrListElement*)+0x10c>
   2cca8:	ebffdea1 	bl	24734 <assertion_failed>
   2ccac:	e3a020a4 	mov	r2, #164	; 0xa4
   2ccb0:	e59f1008 	ldr	r1, [pc, #8]	; 2ccc0 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2ccb4:	e59f0008 	ldr	r0, [pc, #8]	; 2ccc4 <CPtrList::Remove(TPtrListElement*)+0xfc>
   2ccb8:	ebffde9d 	bl	24734 <assertion_failed>
   2ccbc:	504c4d43 	.word	0x504c4d43
   2ccc0:	0004414c 	.word	0x0004414c
   2ccc4:	00044254 	.word	0x00044254
   2ccc8:	00044298 	.word	0x00044298
   2cccc:	00044168 	.word	0x00044168
   2ccd0:	00044178 	.word	0x00044178
   2ccd4:	00044280 	.word	0x00044280

0002ccd8 <CPtrList::Find(void*)>:
   2ccd8:	e5900000 	ldr	r0, [r0]
   2ccdc:	e3500000 	cmp	r0, #0
   2cce0:	012fff1e 	bxeq	lr
   2cce4:	e59f2038 	ldr	r2, [pc, #56]	; 2cd24 <CPtrList::Find(void*)+0x4c>
   2cce8:	ea000005 	b	2cd04 <CPtrList::Find(void*)+0x2c>
   2ccec:	e590300c 	ldr	r3, [r0, #12]
   2ccf0:	e1530001 	cmp	r3, r1
   2ccf4:	012fff1e 	bxeq	lr
   2ccf8:	e5900008 	ldr	r0, [r0, #8]
   2ccfc:	e3500000 	cmp	r0, #0
   2cd00:	012fff1e 	bxeq	lr
   2cd04:	e5903000 	ldr	r3, [r0]
   2cd08:	e1530002 	cmp	r3, r2
   2cd0c:	0afffff6 	beq	2ccec <CPtrList::Find(void*)+0x14>
   2cd10:	e3a020b3 	mov	r2, #179	; 0xb3
   2cd14:	e92d4010 	push	{r4, lr}
   2cd18:	e59f1008 	ldr	r1, [pc, #8]	; 2cd28 <CPtrList::Find(void*)+0x50>
   2cd1c:	e59f0008 	ldr	r0, [pc, #8]	; 2cd2c <CPtrList::Find(void*)+0x54>
   2cd20:	ebffde83 	bl	24734 <assertion_failed>
   2cd24:	504c4d43 	.word	0x504c4d43
   2cd28:	0004414c 	.word	0x0004414c
   2cd2c:	00044178 	.word	0x00044178

0002cd30 <CPageAllocator::CPageAllocator()>:
   2cd30:	e3a02000 	mov	r2, #0
   2cd34:	e3a01001 	mov	r1, #1
   2cd38:	e5802000 	str	r2, [r0]
   2cd3c:	e580100c 	str	r1, [r0, #12]
   2cd40:	e5802004 	str	r2, [r0, #4]
   2cd44:	e5802008 	str	r2, [r0, #8]
   2cd48:	e12fff1e 	bx	lr

0002cd4c <CPageAllocator::~CPageAllocator()>:
   2cd4c:	e12fff1e 	bx	lr

0002cd50 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   2cd50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2cd54:	e28db000 	add	fp, sp, #0
   2cd58:	e24dd014 	sub	sp, sp, #20
   2cd5c:	e50b0008 	str	r0, [fp, #-8]
   2cd60:	e50b100c 	str	r1, [fp, #-12]
   2cd64:	e50b2010 	str	r2, [fp, #-16]
   2cd68:	e51b300c 	ldr	r3, [fp, #-12]
   2cd6c:	e2833eff 	add	r3, r3, #4080	; 0xff0
   2cd70:	e283300f 	add	r3, r3, #15
   2cd74:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2cd78:	e3c3300f 	bic	r3, r3, #15
   2cd7c:	e1a02003 	mov	r2, r3
   2cd80:	e51b3008 	ldr	r3, [fp, #-8]
   2cd84:	e5832000 	str	r2, [r3]
   2cd88:	e51b200c 	ldr	r2, [fp, #-12]
   2cd8c:	e51b3010 	ldr	r3, [fp, #-16]
   2cd90:	e0823003 	add	r3, r2, r3
   2cd94:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2cd98:	e3c3300f 	bic	r3, r3, #15
   2cd9c:	e1a02003 	mov	r2, r3
   2cda0:	e51b3008 	ldr	r3, [fp, #-8]
   2cda4:	e5832004 	str	r2, [r3, #4]
   2cda8:	e320f000 	nop	{0}
   2cdac:	e28bd000 	add	sp, fp, #0
   2cdb0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2cdb4:	e12fff1e 	bx	lr

0002cdb8 <CPageAllocator::GetFreeSpace() const>:
   2cdb8:	e8900005 	ldm	r0, {r0, r2}
   2cdbc:	e0420000 	sub	r0, r2, r0
   2cdc0:	e12fff1e 	bx	lr

0002cdc4 <CPageAllocator::Allocate()>:
   2cdc4:	e5903000 	ldr	r3, [r0]
   2cdc8:	e92d4070 	push	{r4, r5, r6, lr}
   2cdcc:	e3530000 	cmp	r3, #0
   2cdd0:	0a000023 	beq	2ce64 <CPageAllocator::Allocate()+0xa0>
   2cdd4:	e1a04000 	mov	r4, r0
   2cdd8:	e590000c 	ldr	r0, [r0, #12]
   2cddc:	e3500000 	cmp	r0, #0
   2cde0:	1a00000f 	bne	2ce24 <CPageAllocator::Allocate()+0x60>
   2cde4:	e5945008 	ldr	r5, [r4, #8]
   2cde8:	e3550000 	cmp	r5, #0
   2cdec:	0a000010 	beq	2ce34 <CPageAllocator::Allocate()+0x70>
   2cdf0:	e59f308c 	ldr	r3, [pc, #140]	; 2ce84 <CPageAllocator::Allocate()+0xc0>
   2cdf4:	e5952000 	ldr	r2, [r5]
   2cdf8:	e1520003 	cmp	r2, r3
   2cdfc:	1a00001c 	bne	2ce74 <CPageAllocator::Allocate()+0xb0>
   2ce00:	e3a03000 	mov	r3, #0
   2ce04:	e5952004 	ldr	r2, [r5, #4]
   2ce08:	e5842008 	str	r2, [r4, #8]
   2ce0c:	e5853000 	str	r3, [r5]
   2ce10:	e594300c 	ldr	r3, [r4, #12]
   2ce14:	e3530000 	cmp	r3, #0
   2ce18:	1a00000e 	bne	2ce58 <CPageAllocator::Allocate()+0x94>
   2ce1c:	e1a00005 	mov	r0, r5
   2ce20:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ce24:	ebfffb76 	bl	2bc04 <EnterCritical>
   2ce28:	e5945008 	ldr	r5, [r4, #8]
   2ce2c:	e3550000 	cmp	r5, #0
   2ce30:	1affffee 	bne	2cdf0 <CPageAllocator::Allocate()+0x2c>
   2ce34:	e5942000 	ldr	r2, [r4]
   2ce38:	e5941004 	ldr	r1, [r4, #4]
   2ce3c:	e2823a01 	add	r3, r2, #4096	; 0x1000
   2ce40:	e1530001 	cmp	r3, r1
   2ce44:	e5843000 	str	r3, [r4]
   2ce48:	e594300c 	ldr	r3, [r4, #12]
   2ce4c:	91a05002 	movls	r5, r2
   2ce50:	e3530000 	cmp	r3, #0
   2ce54:	0afffff0 	beq	2ce1c <CPageAllocator::Allocate()+0x58>
   2ce58:	ebfffb93 	bl	2bcac <LeaveCritical>
   2ce5c:	e1a00005 	mov	r0, r5
   2ce60:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ce64:	e59f101c 	ldr	r1, [pc, #28]	; 2ce88 <CPageAllocator::Allocate()+0xc4>
   2ce68:	e3a02036 	mov	r2, #54	; 0x36
   2ce6c:	e2810014 	add	r0, r1, #20
   2ce70:	ebffde2f 	bl	24734 <assertion_failed>
   2ce74:	e59f100c 	ldr	r1, [pc, #12]	; 2ce88 <CPageAllocator::Allocate()+0xc4>
   2ce78:	e3a02044 	mov	r2, #68	; 0x44
   2ce7c:	e2810024 	add	r0, r1, #36	; 0x24
   2ce80:	ebffde2b 	bl	24734 <assertion_failed>
   2ce84:	50474d43 	.word	0x50474d43
   2ce88:	000442c4 	.word	0x000442c4

0002ce8c <CPageAllocator::Free(void*)>:
   2ce8c:	e92d4070 	push	{r4, r5, r6, lr}
   2ce90:	e2514000 	subs	r4, r1, #0
   2ce94:	08bd8070 	popeq	{r4, r5, r6, pc}
   2ce98:	e1a05000 	mov	r5, r0
   2ce9c:	e590000c 	ldr	r0, [r0, #12]
   2cea0:	e3500000 	cmp	r0, #0
   2cea4:	1a000009 	bne	2ced0 <CPageAllocator::Free(void*)+0x44>
   2cea8:	e59f3028 	ldr	r3, [pc, #40]	; 2ced8 <CPageAllocator::Free(void*)+0x4c>
   2ceac:	e5952008 	ldr	r2, [r5, #8]
   2ceb0:	e5843000 	str	r3, [r4]
   2ceb4:	e595300c 	ldr	r3, [r5, #12]
   2ceb8:	e5842004 	str	r2, [r4, #4]
   2cebc:	e3530000 	cmp	r3, #0
   2cec0:	e5854008 	str	r4, [r5, #8]
   2cec4:	08bd8070 	popeq	{r4, r5, r6, pc}
   2cec8:	e8bd4070 	pop	{r4, r5, r6, lr}
   2cecc:	eafffb76 	b	2bcac <LeaveCritical>
   2ced0:	ebfffb4b 	bl	2bc04 <EnterCritical>
   2ced4:	eafffff3 	b	2cea8 <CPageAllocator::Free(void*)+0x1c>
   2ced8:	50474d43 	.word	0x50474d43

0002cedc <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   2cedc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cee0:	e1a04000 	mov	r4, r0
   2cee4:	e3a0b000 	mov	fp, #0
   2cee8:	e1a07001 	mov	r7, r1
   2ceec:	e1a06002 	mov	r6, r2
   2cef0:	e1a05003 	mov	r5, r3
   2cef4:	e24dd00c 	sub	sp, sp, #12
   2cef8:	e280a018 	add	sl, r0, #24
   2cefc:	ebffdff3 	bl	24ed0 <CDevice::CDevice()>
   2cf00:	e59f31cc 	ldr	r3, [pc, #460]	; 2d0d4 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1f8>
   2cf04:	e5847004 	str	r7, [r4, #4]
   2cf08:	e5843000 	str	r3, [r4]
   2cf0c:	e1a0000a 	mov	r0, sl
   2cf10:	e2849040 	add	r9, r4, #64	; 0x40
   2cf14:	e5c46008 	strb	r6, [r4, #8]
   2cf18:	e584500c 	str	r5, [r4, #12]
   2cf1c:	e584b010 	str	fp, [r4, #16]
   2cf20:	e5c4b014 	strb	fp, [r4, #20]
   2cf24:	ebffe15f 	bl	254a8 <CGPIOPin::CGPIOPin()>
   2cf28:	e2848068 	add	r8, r4, #104	; 0x68
   2cf2c:	e1a00009 	mov	r0, r9
   2cf30:	ebffe15c 	bl	254a8 <CGPIOPin::CGPIOPin()>
   2cf34:	e2847090 	add	r7, r4, #144	; 0x90
   2cf38:	e1a00008 	mov	r0, r8
   2cf3c:	ebffe159 	bl	254a8 <CGPIOPin::CGPIOPin()>
   2cf40:	e1a00007 	mov	r0, r7
   2cf44:	ebffe157 	bl	254a8 <CGPIOPin::CGPIOPin()>
   2cf48:	e156000b 	cmp	r6, fp
   2cf4c:	13a00002 	movne	r0, #2
   2cf50:	03a00001 	moveq	r0, #1
   2cf54:	e3a02001 	mov	r2, #1
   2cf58:	e2841901 	add	r1, r4, #16384	; 0x4000
   2cf5c:	e584b0bc 	str	fp, [r4, #188]	; 0xbc
   2cf60:	e584b0b8 	str	fp, [r4, #184]	; 0xb8
   2cf64:	e584b0c0 	str	fp, [r4, #192]	; 0xc0
   2cf68:	e584b0c4 	str	fp, [r4, #196]	; 0xc4
   2cf6c:	e584b0d0 	str	fp, [r4, #208]	; 0xd0
   2cf70:	e1c4bcb8 	strh	fp, [r4, #200]	; 0xc8
   2cf74:	e584b0cc 	str	fp, [r4, #204]	; 0xcc
   2cf78:	e584b0d8 	str	fp, [r4, #216]	; 0xd8
   2cf7c:	e584b0d4 	str	fp, [r4, #212]	; 0xd4
   2cf80:	e5c4b0dc 	strb	fp, [r4, #220]	; 0xdc
   2cf84:	e584b0f4 	str	fp, [r4, #244]	; 0xf4
   2cf88:	e584b0e4 	str	fp, [r4, #228]	; 0xe4
   2cf8c:	e584b0e8 	str	fp, [r4, #232]	; 0xe8
   2cf90:	e584b0ec 	str	fp, [r4, #236]	; 0xec
   2cf94:	e584b0f0 	str	fp, [r4, #240]	; 0xf0
   2cf98:	e584b0e0 	str	fp, [r4, #224]	; 0xe0
   2cf9c:	e5810f28 	str	r0, [r1, #3880]	; 0xf28
   2cfa0:	e5812f18 	str	r2, [r1, #3864]	; 0xf18
   2cfa4:	e5812f2c 	str	r2, [r1, #3884]	; 0xf2c
   2cfa8:	e594000c 	ldr	r0, [r4, #12]
   2cfac:	e581bf1c 	str	fp, [r1, #3868]	; 0xf1c
   2cfb0:	e150000b 	cmp	r0, fp
   2cfb4:	1a000027 	bne	2d058 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x17c>
   2cfb8:	e59f6118 	ldr	r6, [pc, #280]	; 2d0d8 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1fc>
   2cfbc:	e1a03205 	lsl	r3, r5, #4
   2cfc0:	e0861205 	add	r1, r6, r5, lsl #4
   2cfc4:	e5911004 	ldr	r1, [r1, #4]
   2cfc8:	e3510035 	cmp	r1, #53	; 0x35
   2cfcc:	8a000021 	bhi	2d058 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x17c>
   2cfd0:	e59f0104 	ldr	r0, [pc, #260]	; 2d0dc <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x200>
   2cfd4:	e590c020 	ldr	ip, [r0, #32]
   2cfd8:	e15c000b 	cmp	ip, fp
   2cfdc:	1a000032 	bne	2d0ac <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1d0>
   2cfe0:	e796c105 	ldr	ip, [r6, r5, lsl #2]
   2cfe4:	e5804020 	str	r4, [r0, #32]
   2cfe8:	e35c0000 	cmp	ip, #0
   2cfec:	e584c010 	str	ip, [r4, #16]
   2cff0:	0a000032 	beq	2d0c0 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1e4>
   2cff4:	e3550000 	cmp	r5, #0
   2cff8:	0a000019 	beq	2d064 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x188>
   2cffc:	e0866003 	add	r6, r6, r3
   2d000:	e1a00008 	mov	r0, r8
   2d004:	ebffe153 	bl	25558 <CGPIOPin::AssignPin(unsigned int)>
   2d008:	e5961008 	ldr	r1, [r6, #8]
   2d00c:	e3a02001 	mov	r2, #1
   2d010:	e2811004 	add	r1, r1, #4
   2d014:	e1a00008 	mov	r0, r8
   2d018:	e6ef1071 	uxtb	r1, r1
   2d01c:	ebffe16e 	bl	255dc <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d020:	e1a00007 	mov	r0, r7
   2d024:	e596100c 	ldr	r1, [r6, #12]
   2d028:	ebffe14a 	bl	25558 <CGPIOPin::AssignPin(unsigned int)>
   2d02c:	e5961010 	ldr	r1, [r6, #16]
   2d030:	e3a02001 	mov	r2, #1
   2d034:	e2811004 	add	r1, r1, #4
   2d038:	e1a00007 	mov	r0, r7
   2d03c:	e6ef1071 	uxtb	r1, r1
   2d040:	ebffe165 	bl	255dc <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d044:	e1a00007 	mov	r0, r7
   2d048:	e3a01002 	mov	r1, #2
   2d04c:	ebffe37f 	bl	25e50 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2d050:	e3a03001 	mov	r3, #1
   2d054:	e5c43014 	strb	r3, [r4, #20]
   2d058:	e1a00004 	mov	r0, r4
   2d05c:	e28dd00c 	add	sp, sp, #12
   2d060:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d064:	e3a01020 	mov	r1, #32
   2d068:	e1a0000a 	mov	r0, sl
   2d06c:	e58d3004 	str	r3, [sp, #4]
   2d070:	ebffe138 	bl	25558 <CGPIOPin::AssignPin(unsigned int)>
   2d074:	e3a02001 	mov	r2, #1
   2d078:	e1a01005 	mov	r1, r5
   2d07c:	e1a0000a 	mov	r0, sl
   2d080:	ebffe155 	bl	255dc <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d084:	e3a01021 	mov	r1, #33	; 0x21
   2d088:	e1a00009 	mov	r0, r9
   2d08c:	ebffe131 	bl	25558 <CGPIOPin::AssignPin(unsigned int)>
   2d090:	e1a01005 	mov	r1, r5
   2d094:	e3a02001 	mov	r2, #1
   2d098:	e1a00009 	mov	r0, r9
   2d09c:	ebffe14e 	bl	255dc <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d0a0:	e5961004 	ldr	r1, [r6, #4]
   2d0a4:	e59d3004 	ldr	r3, [sp, #4]
   2d0a8:	eaffffd3 	b	2cffc <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x120>
   2d0ac:	e59f3020 	ldr	r3, [pc, #32]	; 2d0d4 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1f8>
   2d0b0:	e3a020bd 	mov	r2, #189	; 0xbd
   2d0b4:	e2831018 	add	r1, r3, #24
   2d0b8:	e2830034 	add	r0, r3, #52	; 0x34
   2d0bc:	ebffdd9c 	bl	24734 <assertion_failed>
   2d0c0:	e59f300c 	ldr	r3, [pc, #12]	; 2d0d4 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1f8>
   2d0c4:	e3a020c1 	mov	r2, #193	; 0xc1
   2d0c8:	e2831018 	add	r1, r3, #24
   2d0cc:	e283004c 	add	r0, r3, #76	; 0x4c
   2d0d0:	ebffdd97 	bl	24734 <assertion_failed>
   2d0d4:	00044320 	.word	0x00044320
   2d0d8:	000465d8 	.word	0x000465d8
   2d0dc:	0004c5e8 	.word	0x0004c5e8

0002d0e0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>:
   2d0e0:	e5d03014 	ldrb	r3, [r0, #20]
   2d0e4:	e59fc168 	ldr	ip, [pc, #360]	; 2d254 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x174>
   2d0e8:	e3530000 	cmp	r3, #0
   2d0ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d0f0:	e1a04000 	mov	r4, r0
   2d0f4:	e580c000 	str	ip, [r0]
   2d0f8:	0a000046 	beq	2d218 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x138>
   2d0fc:	e3a00001 	mov	r0, #1
   2d100:	e59f5150 	ldr	r5, [pc, #336]	; 2d258 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x178>
   2d104:	e594100c 	ldr	r1, [r4, #12]
   2d108:	e595201c 	ldr	r2, [r5, #28]
   2d10c:	e3a03000 	mov	r3, #0
   2d110:	e1c22110 	bic	r2, r2, r0, lsl r1
   2d114:	e585201c 	str	r2, [r5, #28]
   2d118:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d11c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d120:	e5942010 	ldr	r2, [r4, #16]
   2d124:	e5823038 	str	r3, [r2, #56]	; 0x38
   2d128:	e5942010 	ldr	r2, [r4, #16]
   2d12c:	e5823030 	str	r3, [r2, #48]	; 0x30
   2d130:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2d134:	e5943004 	ldr	r3, [r4, #4]
   2d138:	e3530000 	cmp	r3, #0
   2d13c:	0a00000e 	beq	2d17c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x9c>
   2d140:	e5953010 	ldr	r3, [r5, #16]
   2d144:	e2433001 	sub	r3, r3, #1
   2d148:	e3530000 	cmp	r3, #0
   2d14c:	e5853010 	str	r3, [r5, #16]
   2d150:	1a000009 	bne	2d17c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x9c>
   2d154:	e5950014 	ldr	r0, [r5, #20]
   2d158:	e3500000 	cmp	r0, #0
   2d15c:	0a000038 	beq	2d244 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x164>
   2d160:	e5d53018 	ldrb	r3, [r5, #24]
   2d164:	e3530000 	cmp	r3, #0
   2d168:	0a000032 	beq	2d238 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x158>
   2d16c:	ebfffb65 	bl	2bf08 <CInterruptSystem::DisconnectFIQ()>
   2d170:	e3a03000 	mov	r3, #0
   2d174:	e5853014 	str	r3, [r5, #20]
   2d178:	e5c53018 	strb	r3, [r5, #24]
   2d17c:	e2846068 	add	r6, r4, #104	; 0x68
   2d180:	e1a00006 	mov	r0, r6
   2d184:	e3a02001 	mov	r2, #1
   2d188:	e3a01000 	mov	r1, #0
   2d18c:	e2847090 	add	r7, r4, #144	; 0x90
   2d190:	ebffe111 	bl	255dc <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d194:	e1a00007 	mov	r0, r7
   2d198:	e3a02001 	mov	r2, #1
   2d19c:	e3a01000 	mov	r1, #0
   2d1a0:	ebffe10d 	bl	255dc <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d1a4:	e59400b8 	ldr	r0, [r4, #184]	; 0xb8
   2d1a8:	e3500000 	cmp	r0, #0
   2d1ac:	0a000002 	beq	2d1bc <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xdc>
   2d1b0:	e5d430c8 	ldrb	r3, [r4, #200]	; 0xc8
   2d1b4:	e3530000 	cmp	r3, #0
   2d1b8:	1a00001c 	bne	2d230 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x150>
   2d1bc:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   2d1c0:	e3500000 	cmp	r0, #0
   2d1c4:	0a000002 	beq	2d1d4 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xf4>
   2d1c8:	e5d430dc 	ldrb	r3, [r4, #220]	; 0xdc
   2d1cc:	e3530000 	cmp	r3, #0
   2d1d0:	1a000014 	bne	2d228 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x148>
   2d1d4:	e3a03000 	mov	r3, #0
   2d1d8:	e594200c 	ldr	r2, [r4, #12]
   2d1dc:	e1a00007 	mov	r0, r7
   2d1e0:	e0855102 	add	r5, r5, r2, lsl #2
   2d1e4:	e5c43014 	strb	r3, [r4, #20]
   2d1e8:	e5853020 	str	r3, [r5, #32]
   2d1ec:	ebffe0d2 	bl	2553c <CGPIOPin::~CGPIOPin()>
   2d1f0:	e1a00006 	mov	r0, r6
   2d1f4:	ebffe0d0 	bl	2553c <CGPIOPin::~CGPIOPin()>
   2d1f8:	e2840040 	add	r0, r4, #64	; 0x40
   2d1fc:	ebffe0ce 	bl	2553c <CGPIOPin::~CGPIOPin()>
   2d200:	e2840018 	add	r0, r4, #24
   2d204:	ebffe0cc 	bl	2553c <CGPIOPin::~CGPIOPin()>
   2d208:	e1a00004 	mov	r0, r4
   2d20c:	ebffdf21 	bl	24e98 <CDevice::~CDevice()>
   2d210:	e1a00004 	mov	r0, r4
   2d214:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d218:	e2800090 	add	r0, r0, #144	; 0x90
   2d21c:	ebffe0c6 	bl	2553c <CGPIOPin::~CGPIOPin()>
   2d220:	e2840068 	add	r0, r4, #104	; 0x68
   2d224:	eafffff2 	b	2d1f4 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x114>
   2d228:	ebfff755 	bl	2af84 <operator delete[](void*)>
   2d22c:	eaffffe8 	b	2d1d4 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xf4>
   2d230:	ebfff753 	bl	2af84 <operator delete[](void*)>
   2d234:	eaffffe0 	b	2d1bc <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xdc>
   2d238:	e3a01039 	mov	r1, #57	; 0x39
   2d23c:	ebfffba2 	bl	2c0cc <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2d240:	eaffffca 	b	2d170 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x90>
   2d244:	e3a020ed 	mov	r2, #237	; 0xed
   2d248:	e28c1018 	add	r1, ip, #24
   2d24c:	e28c0060 	add	r0, ip, #96	; 0x60
   2d250:	ebffdd37 	bl	24734 <assertion_failed>
   2d254:	00044320 	.word	0x00044320
   2d258:	0004c5e8 	.word	0x0004c5e8

0002d25c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>:
   2d25c:	e92d4010 	push	{r4, lr}
   2d260:	e1a04000 	mov	r4, r0
   2d264:	ebffff9d 	bl	2d0e0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>
   2d268:	e1a00004 	mov	r0, r4
   2d26c:	e59f1008 	ldr	r1, [pc, #8]	; 2d27c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x20>
   2d270:	ebfff744 	bl	2af88 <operator delete(void*, unsigned int)>
   2d274:	e1a00004 	mov	r0, r4
   2d278:	e8bd8010 	pop	{r4, pc}
   2d27c:	00004f30 	.word	0x00004f30

0002d280 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)>:
   2d280:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d284:	e5d08014 	ldrb	r8, [r0, #20]
   2d288:	e24dd010 	sub	sp, sp, #16
   2d28c:	e3580000 	cmp	r8, #0
   2d290:	1a000002 	bne	2d2a0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x20>
   2d294:	e1a00008 	mov	r0, r8
   2d298:	e28dd010 	add	sp, sp, #16
   2d29c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d2a0:	e1a05001 	mov	r5, r1
   2d2a4:	e1a07002 	mov	r7, r2
   2d2a8:	e3a01002 	mov	r1, #2
   2d2ac:	e59f2274 	ldr	r2, [pc, #628]	; 2d528 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2a8>
   2d2b0:	e1a06003 	mov	r6, r3
   2d2b4:	e3a03001 	mov	r3, #1
   2d2b8:	e1a04000 	mov	r4, r0
   2d2bc:	eb0000a9 	bl	2d568 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)>
   2d2c0:	ebffe908 	bl	276e8 <CMachineInfo::Get()>
   2d2c4:	e3a01002 	mov	r1, #2
   2d2c8:	ebffe83a 	bl	273b8 <CMachineInfo::GetClockRate(unsigned int) const>
   2d2cc:	e3500000 	cmp	r0, #0
   2d2d0:	0a000084 	beq	2d4e8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x268>
   2d2d4:	e59f3250 	ldr	r3, [pc, #592]	; 2d52c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2ac>
   2d2d8:	e2452f4b 	sub	r2, r5, #300	; 0x12c
   2d2dc:	e1520003 	cmp	r2, r3
   2d2e0:	8a000084 	bhi	2d4f8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x278>
   2d2e4:	e1a01205 	lsl	r1, r5, #4
   2d2e8:	eb003b01 	bl	3bef4 <__aeabi_uidivmod>
   2d2ec:	e59f323c 	ldr	r3, [pc, #572]	; 2d530 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b0>
   2d2f0:	e2402001 	sub	r2, r0, #1
   2d2f4:	e1520003 	cmp	r2, r3
   2d2f8:	e1a09000 	mov	r9, r0
   2d2fc:	e1a00001 	mov	r0, r1
   2d300:	8a000080 	bhi	2d508 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x288>
   2d304:	e1a01005 	mov	r1, r5
   2d308:	e1a00180 	lsl	r0, r0, #3
   2d30c:	eb003a7d 	bl	3bd08 <__udivsi3>
   2d310:	e200a001 	and	sl, r0, #1
   2d314:	e08aa0a0 	add	sl, sl, r0, lsr #1
   2d318:	e35a003f 	cmp	sl, #63	; 0x3f
   2d31c:	8a00007d 	bhi	2d518 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x298>
   2d320:	e59f520c 	ldr	r5, [pc, #524]	; 2d534 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b4>
   2d324:	e28410f8 	add	r1, r4, #248	; 0xf8
   2d328:	e28420bc 	add	r2, r4, #188	; 0xbc
   2d32c:	e98d0022 	stmib	sp, {r1, r5}
   2d330:	e1a03007 	mov	r3, r7
   2d334:	e1a00004 	mov	r0, r4
   2d338:	e58d2000 	str	r2, [sp]
   2d33c:	e28410b8 	add	r1, r4, #184	; 0xb8
   2d340:	e28420c8 	add	r2, r4, #200	; 0xc8
   2d344:	eb000260 	bl	2dccc <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>
   2d348:	e2842b0a 	add	r2, r4, #10240	; 0x2800
   2d34c:	e2822008 	add	r2, r2, #8
   2d350:	e28410d0 	add	r1, r4, #208	; 0xd0
   2d354:	e88d0006 	stm	sp, {r1, r2}
   2d358:	e1a00004 	mov	r0, r4
   2d35c:	e58d5008 	str	r5, [sp, #8]
   2d360:	e1a03006 	mov	r3, r6
   2d364:	e28420dc 	add	r2, r4, #220	; 0xdc
   2d368:	e28410cc 	add	r1, r4, #204	; 0xcc
   2d36c:	eb000256 	bl	2dccc <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>
   2d370:	e5940004 	ldr	r0, [r4, #4]
   2d374:	e59f51bc 	ldr	r5, [pc, #444]	; 2d538 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b8>
   2d378:	e3500000 	cmp	r0, #0
   2d37c:	0a000013 	beq	2d3d0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x150>
   2d380:	e5953010 	ldr	r3, [r5, #16]
   2d384:	e3530000 	cmp	r3, #0
   2d388:	1a00003d 	bne	2d484 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x204>
   2d38c:	e5d42008 	ldrb	r2, [r4, #8]
   2d390:	e5850014 	str	r0, [r5, #20]
   2d394:	e3520000 	cmp	r2, #0
   2d398:	e5c52018 	strb	r2, [r5, #24]
   2d39c:	1a000045 	bne	2d4b8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x238>
   2d3a0:	e1a03002 	mov	r3, r2
   2d3a4:	e3a01039 	mov	r1, #57	; 0x39
   2d3a8:	e59f218c 	ldr	r2, [pc, #396]	; 2d53c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2bc>
   2d3ac:	ebfffb12 	bl	2bffc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2d3b0:	e5953008 	ldr	r3, [r5, #8]
   2d3b4:	e2833001 	add	r3, r3, #1
   2d3b8:	e5853008 	str	r3, [r5, #8]
   2d3bc:	e5953010 	ldr	r3, [r5, #16]
   2d3c0:	e3530000 	cmp	r3, #0
   2d3c4:	1a000043 	bne	2d4d8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x258>
   2d3c8:	e3a03001 	mov	r3, #1
   2d3cc:	e5853010 	str	r3, [r5, #16]
   2d3d0:	e3a03000 	mov	r3, #0
   2d3d4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d3d8:	e5942010 	ldr	r2, [r4, #16]
   2d3dc:	e59f015c 	ldr	r0, [pc, #348]	; 2d540 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c0>
   2d3e0:	e5823038 	str	r3, [r2, #56]	; 0x38
   2d3e4:	e5942010 	ldr	r2, [r4, #16]
   2d3e8:	e5941004 	ldr	r1, [r4, #4]
   2d3ec:	e5820044 	str	r0, [r2, #68]	; 0x44
   2d3f0:	e5942010 	ldr	r2, [r4, #16]
   2d3f4:	e1510003 	cmp	r1, r3
   2d3f8:	e5829024 	str	r9, [r2, #36]	; 0x24
   2d3fc:	e5942010 	ldr	r2, [r4, #16]
   2d400:	e582a028 	str	sl, [r2, #40]	; 0x28
   2d404:	0a000027 	beq	2d4a8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x228>
   2d408:	e3a0e011 	mov	lr, #17
   2d40c:	e3a0c070 	mov	ip, #112	; 0x70
   2d410:	e3a01e45 	mov	r1, #1104	; 0x450
   2d414:	e3a00001 	mov	r0, #1
   2d418:	e5942010 	ldr	r2, [r4, #16]
   2d41c:	e582e034 	str	lr, [r2, #52]	; 0x34
   2d420:	e5942010 	ldr	r2, [r4, #16]
   2d424:	e582c02c 	str	ip, [r2, #44]	; 0x2c
   2d428:	e5942010 	ldr	r2, [r4, #16]
   2d42c:	e5821038 	str	r1, [r2, #56]	; 0x38
   2d430:	e595201c 	ldr	r2, [r5, #28]
   2d434:	e594100c 	ldr	r1, [r4, #12]
   2d438:	e1822110 	orr	r2, r2, r0, lsl r1
   2d43c:	e585201c 	str	r2, [r5, #28]
   2d440:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d444:	e5942010 	ldr	r2, [r4, #16]
   2d448:	e59f10f4 	ldr	r1, [pc, #244]	; 2d544 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c4>
   2d44c:	e59f30f4 	ldr	r3, [pc, #244]	; 2d548 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c8>
   2d450:	e5821030 	str	r1, [r2, #48]	; 0x30
   2d454:	e5933214 	ldr	r3, [r3, #532]	; 0x214
   2d458:	e3a06000 	mov	r6, #0
   2d45c:	e585300c 	str	r3, [r5, #12]
   2d460:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   2d464:	ebffdf74 	bl	2523c <CDeviceNameService::Get()>
   2d468:	e1a03006 	mov	r3, r6
   2d46c:	e1a02004 	mov	r2, r4
   2d470:	e59f10d4 	ldr	r1, [pc, #212]	; 2d54c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2cc>
   2d474:	ebffdec0 	bl	24f7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   2d478:	e1a00008 	mov	r0, r8
   2d47c:	e28dd010 	add	sp, sp, #16
   2d480:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d484:	e5953014 	ldr	r3, [r5, #20]
   2d488:	e1500003 	cmp	r0, r3
   2d48c:	0a00000d 	beq	2d4c8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x248>
   2d490:	e3a08000 	mov	r8, #0
   2d494:	e594300c 	ldr	r3, [r4, #12]
   2d498:	e5c48014 	strb	r8, [r4, #20]
   2d49c:	e0855103 	add	r5, r5, r3, lsl #2
   2d4a0:	e5858020 	str	r8, [r5, #32]
   2d4a4:	eaffff7a 	b	2d294 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x14>
   2d4a8:	e3a02060 	mov	r2, #96	; 0x60
   2d4ac:	e5943010 	ldr	r3, [r4, #16]
   2d4b0:	e583202c 	str	r2, [r3, #44]	; 0x2c
   2d4b4:	eaffffe2 	b	2d444 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x1c4>
   2d4b8:	e3a01039 	mov	r1, #57	; 0x39
   2d4bc:	e59f2078 	ldr	r2, [pc, #120]	; 2d53c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2bc>
   2d4c0:	ebfffa5c 	bl	2be38 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   2d4c4:	eaffffbc 	b	2d3bc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x13c>
   2d4c8:	e5d42008 	ldrb	r2, [r4, #8]
   2d4cc:	e5d53018 	ldrb	r3, [r5, #24]
   2d4d0:	e1520003 	cmp	r2, r3
   2d4d4:	1affffed 	bne	2d490 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x210>
   2d4d8:	e59f1070 	ldr	r1, [pc, #112]	; 2d550 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d4dc:	e59f2070 	ldr	r2, [pc, #112]	; 2d554 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d4>
   2d4e0:	e28100d4 	add	r0, r1, #212	; 0xd4
   2d4e4:	ebffdc92 	bl	24734 <assertion_failed>
   2d4e8:	e59f1060 	ldr	r1, [pc, #96]	; 2d550 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d4ec:	e59f2064 	ldr	r2, [pc, #100]	; 2d558 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d8>
   2d4f0:	e2810060 	add	r0, r1, #96	; 0x60
   2d4f4:	ebffdc8e 	bl	24734 <assertion_failed>
   2d4f8:	e59f1050 	ldr	r1, [pc, #80]	; 2d550 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d4fc:	e59f2058 	ldr	r2, [pc, #88]	; 2d55c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d500:	e2810070 	add	r0, r1, #112	; 0x70
   2d504:	ebffdc8a 	bl	24734 <assertion_failed>
   2d508:	e59f1040 	ldr	r1, [pc, #64]	; 2d550 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d50c:	e59f204c 	ldr	r2, [pc, #76]	; 2d560 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e0>
   2d510:	e281009c 	add	r0, r1, #156	; 0x9c
   2d514:	ebffdc86 	bl	24734 <assertion_failed>
   2d518:	e59f1030 	ldr	r1, [pc, #48]	; 2d550 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d51c:	e59f2040 	ldr	r2, [pc, #64]	; 2d564 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e4>
   2d520:	e28100c0 	add	r0, r1, #192	; 0xc0
   2d524:	ebffdc82 	bl	24734 <assertion_failed>
   2d528:	01e84800 	.word	0x01e84800
   2d52c:	003d07d4 	.word	0x003d07d4
   2d530:	0000fffe 	.word	0x0000fffe
   2d534:	00002710 	.word	0x00002710
   2d538:	0004c5e8 	.word	0x0004c5e8
   2d53c:	0002dc7c 	.word	0x0002dc7c
   2d540:	000007ff 	.word	0x000007ff
   2d544:	00000301 	.word	0x00000301
   2d548:	2000b000 	.word	0x2000b000
   2d54c:	00044434 	.word	0x00044434
   2d550:	00044338 	.word	0x00044338
   2d554:	00000149 	.word	0x00000149
   2d558:	00000115 	.word	0x00000115
   2d55c:	00000117 	.word	0x00000117
   2d560:	0000011a 	.word	0x0000011a
   2d564:	0000011d 	.word	0x0000011d

0002d568 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)>:
   2d568:	e92d4070 	push	{r4, r5, r6, lr}
   2d56c:	e24dd028 	sub	sp, sp, #40	; 0x28
   2d570:	e1a06001 	mov	r6, r1
   2d574:	e28d0008 	add	r0, sp, #8
   2d578:	e3a01000 	mov	r1, #0
   2d57c:	e1a05002 	mov	r5, r2
   2d580:	e1a04003 	mov	r4, r3
   2d584:	ebffdc8b 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2d588:	e3a0300c 	mov	r3, #12
   2d58c:	e59f1034 	ldr	r1, [pc, #52]	; 2d5c8 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)+0x60>
   2d590:	e58d3000 	str	r3, [sp]
   2d594:	e28d2010 	add	r2, sp, #16
   2d598:	e3a03018 	mov	r3, #24
   2d59c:	e28d0008 	add	r0, sp, #8
   2d5a0:	e58d4024 	str	r4, [sp, #36]	; 0x24
   2d5a4:	e58d601c 	str	r6, [sp, #28]
   2d5a8:	e58d5020 	str	r5, [sp, #32]
   2d5ac:	ebffdc8d 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2d5b0:	e1a04000 	mov	r4, r0
   2d5b4:	e28d0008 	add	r0, sp, #8
   2d5b8:	ebffdc85 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   2d5bc:	e1a00004 	mov	r0, r4
   2d5c0:	e28dd028 	add	sp, sp, #40	; 0x28
   2d5c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2d5c8:	00038002 	.word	0x00038002

0002d5cc <CUartMaxiSerialDevice::Clear()>:
   2d5cc:	e3a03000 	mov	r3, #0
   2d5d0:	e58030bc 	str	r3, [r0, #188]	; 0xbc
   2d5d4:	e58030f4 	str	r3, [r0, #244]	; 0xf4
   2d5d8:	e58030c0 	str	r3, [r0, #192]	; 0xc0
   2d5dc:	e58030e4 	str	r3, [r0, #228]	; 0xe4
   2d5e0:	e58030e8 	str	r3, [r0, #232]	; 0xe8
   2d5e4:	e58030ec 	str	r3, [r0, #236]	; 0xec
   2d5e8:	e58030f0 	str	r3, [r0, #240]	; 0xf0
   2d5ec:	e58030e0 	str	r3, [r0, #224]	; 0xe0
   2d5f0:	e12fff1e 	bx	lr

0002d5f4 <CUartMaxiSerialDevice::AvailableForWrite()>:
   2d5f4:	e59030d4 	ldr	r3, [r0, #212]	; 0xd4
   2d5f8:	e59010d0 	ldr	r1, [r0, #208]	; 0xd0
   2d5fc:	e59020d8 	ldr	r2, [r0, #216]	; 0xd8
   2d600:	e59000d0 	ldr	r0, [r0, #208]	; 0xd0
   2d604:	e1530001 	cmp	r3, r1
   2d608:	80800002 	addhi	r0, r0, r2
   2d60c:	e0400003 	sub	r0, r0, r3
   2d610:	e0420000 	sub	r0, r2, r0
   2d614:	e12fff1e 	bx	lr

0002d618 <CUartMaxiSerialDevice::WriteBase(unsigned int)>:
   2d618:	e1a03000 	mov	r3, r0
   2d61c:	e59000cc 	ldr	r0, [r0, #204]	; 0xcc
   2d620:	e3500000 	cmp	r0, #0
   2d624:	012fff1e 	bxeq	lr
   2d628:	e59320d8 	ldr	r2, [r3, #216]	; 0xd8
   2d62c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2d630:	e3520000 	cmp	r2, #0
   2d634:	0a00001d 	beq	2d6b0 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x98>
   2d638:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d63c:	e593c0d4 	ldr	ip, [r3, #212]	; 0xd4
   2d640:	e15e000c 	cmp	lr, ip
   2d644:	0a000008 	beq	2d66c <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x54>
   2d648:	e593c0d4 	ldr	ip, [r3, #212]	; 0xd4
   2d64c:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d650:	e15c000e 	cmp	ip, lr
   2d654:	2a000011 	bcs	2d6a0 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x88>
   2d658:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d65c:	e2422001 	sub	r2, r2, #1
   2d660:	e35c0000 	cmp	ip, #0
   2d664:	0152000e 	cmpeq	r2, lr
   2d668:	0a000010 	beq	2d6b0 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x98>
   2d66c:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d670:	e7c01002 	strb	r1, [r0, r2]
   2d674:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d678:	e59310d8 	ldr	r1, [r3, #216]	; 0xd8
   2d67c:	e2822001 	add	r2, r2, #1
   2d680:	e58320d0 	str	r2, [r3, #208]	; 0xd0
   2d684:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d688:	e1520001 	cmp	r2, r1
   2d68c:	23a02000 	movcs	r2, #0
   2d690:	23a00001 	movcs	r0, #1
   2d694:	258320d0 	strcs	r2, [r3, #208]	; 0xd0
   2d698:	33a00001 	movcc	r0, #1
   2d69c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2d6a0:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d6a4:	e04cc002 	sub	ip, ip, r2
   2d6a8:	e35c0001 	cmp	ip, #1
   2d6ac:	8affffee 	bhi	2d66c <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x54>
   2d6b0:	e59320f4 	ldr	r2, [r3, #244]	; 0xf4
   2d6b4:	e3a00000 	mov	r0, #0
   2d6b8:	e2822001 	add	r2, r2, #1
   2d6bc:	e58320f4 	str	r2, [r3, #244]	; 0xf4
   2d6c0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002d6c4 <CUartMaxiSerialDevice::Write(unsigned int)>:
   2d6c4:	e92d4070 	push	{r4, r5, r6, lr}
   2d6c8:	e1a05000 	mov	r5, r0
   2d6cc:	ebffffd1 	bl	2d618 <CUartMaxiSerialDevice::WriteBase(unsigned int)>
   2d6d0:	e1a04000 	mov	r4, r0
   2d6d4:	e1a00005 	mov	r0, r5
   2d6d8:	eb000021 	bl	2d764 <CUartMaxiSerialDevice::TxPumpPrime()>
   2d6dc:	e1a00004 	mov	r0, r4
   2d6e0:	e8bd8070 	pop	{r4, r5, r6, pc}

0002d6e4 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>:
   2d6e4:	e3520000 	cmp	r2, #0
   2d6e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d6ec:	e1a07000 	mov	r7, r0
   2d6f0:	0a00000d 	beq	2d72c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x48>
   2d6f4:	e3a05000 	mov	r5, #0
   2d6f8:	e0812002 	add	r2, r1, r2
   2d6fc:	e2426001 	sub	r6, r2, #1
   2d700:	e2414001 	sub	r4, r1, #1
   2d704:	e5f41001 	ldrb	r1, [r4, #1]!
   2d708:	e1a00007 	mov	r0, r7
   2d70c:	ebffffc1 	bl	2d618 <CUartMaxiSerialDevice::WriteBase(unsigned int)>
   2d710:	e1540006 	cmp	r4, r6
   2d714:	e0855000 	add	r5, r5, r0
   2d718:	1afffff9 	bne	2d704 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x20>
   2d71c:	e1a00007 	mov	r0, r7
   2d720:	eb00000f 	bl	2d764 <CUartMaxiSerialDevice::TxPumpPrime()>
   2d724:	e1a00005 	mov	r0, r5
   2d728:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d72c:	e1a05002 	mov	r5, r2
   2d730:	eafffff9 	b	2d71c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x38>

0002d734 <CUartMaxiSerialDevice::WriteStr(char const*)>:
   2d734:	e92d4010 	push	{r4, lr}
   2d738:	e1a04000 	mov	r4, r0
   2d73c:	e24dd008 	sub	sp, sp, #8
   2d740:	e1a00001 	mov	r0, r1
   2d744:	e58d1004 	str	r1, [sp, #4]
   2d748:	ebfff21f 	bl	29fcc <strlen>
   2d74c:	e1a02000 	mov	r2, r0
   2d750:	e1a00004 	mov	r0, r4
   2d754:	e59d1004 	ldr	r1, [sp, #4]
   2d758:	e28dd008 	add	sp, sp, #8
   2d75c:	e8bd4010 	pop	{r4, lr}
   2d760:	eaffffdf 	b	2d6e4 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>

0002d764 <CUartMaxiSerialDevice::TxPumpPrime()>:
   2d764:	e92d4010 	push	{r4, lr}
   2d768:	e1a04000 	mov	r4, r0
   2d76c:	e3a00001 	mov	r0, #1
   2d770:	ebfff923 	bl	2bc04 <EnterCritical>
   2d774:	e59420d0 	ldr	r2, [r4, #208]	; 0xd0
   2d778:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
   2d77c:	e1520003 	cmp	r2, r3
   2d780:	0a000019 	beq	2d7ec <CUartMaxiSerialDevice::TxPumpPrime()+0x88>
   2d784:	e3a00000 	mov	r0, #0
   2d788:	e59f1078 	ldr	r1, [pc, #120]	; 2d808 <CUartMaxiSerialDevice::TxPumpPrime()+0xa4>
   2d78c:	ea000013 	b	2d7e0 <CUartMaxiSerialDevice::TxPumpPrime()+0x7c>
   2d790:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
   2d794:	e5913018 	ldr	r3, [r1, #24]
   2d798:	e2133020 	ands	r3, r3, #32
   2d79c:	1a000014 	bne	2d7f4 <CUartMaxiSerialDevice::TxPumpPrime()+0x90>
   2d7a0:	e594c0d4 	ldr	ip, [r4, #212]	; 0xd4
   2d7a4:	e59420d4 	ldr	r2, [r4, #212]	; 0xd4
   2d7a8:	e594e0cc 	ldr	lr, [r4, #204]	; 0xcc
   2d7ac:	e2822001 	add	r2, r2, #1
   2d7b0:	e7dec00c 	ldrb	ip, [lr, ip]
   2d7b4:	e58420d4 	str	r2, [r4, #212]	; 0xd4
   2d7b8:	e594e0d4 	ldr	lr, [r4, #212]	; 0xd4
   2d7bc:	e59420d8 	ldr	r2, [r4, #216]	; 0xd8
   2d7c0:	e15e0002 	cmp	lr, r2
   2d7c4:	258430d4 	strcs	r3, [r4, #212]	; 0xd4
   2d7c8:	e581c000 	str	ip, [r1]
   2d7cc:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
   2d7d0:	e59420d0 	ldr	r2, [r4, #208]	; 0xd0
   2d7d4:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
   2d7d8:	e1520003 	cmp	r2, r3
   2d7dc:	0a000002 	beq	2d7ec <CUartMaxiSerialDevice::TxPumpPrime()+0x88>
   2d7e0:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   2d7e4:	e3530000 	cmp	r3, #0
   2d7e8:	1affffe8 	bne	2d790 <CUartMaxiSerialDevice::TxPumpPrime()+0x2c>
   2d7ec:	e8bd4010 	pop	{r4, lr}
   2d7f0:	eafff92d 	b	2bcac <LeaveCritical>
   2d7f4:	e5913038 	ldr	r3, [r1, #56]	; 0x38
   2d7f8:	e8bd4010 	pop	{r4, lr}
   2d7fc:	e3833020 	orr	r3, r3, #32
   2d800:	e5813038 	str	r3, [r1, #56]	; 0x38
   2d804:	eafff928 	b	2bcac <LeaveCritical>
   2d808:	20201000 	.word	0x20201000

0002d80c <CUartMaxiSerialDevice::Read()>:
   2d80c:	e59010b8 	ldr	r1, [r0, #184]	; 0xb8
   2d810:	e1a03000 	mov	r3, r0
   2d814:	e3510000 	cmp	r1, #0
   2d818:	0a00000e 	beq	2d858 <CUartMaxiSerialDevice::Read()+0x4c>
   2d81c:	e59000bc 	ldr	r0, [r0, #188]	; 0xbc
   2d820:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
   2d824:	e1500002 	cmp	r0, r2
   2d828:	0a00000a 	beq	2d858 <CUartMaxiSerialDevice::Read()+0x4c>
   2d82c:	e59300c0 	ldr	r0, [r3, #192]	; 0xc0
   2d830:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
   2d834:	e7d10000 	ldrb	r0, [r1, r0]
   2d838:	e2822001 	add	r2, r2, #1
   2d83c:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   2d840:	e59310c0 	ldr	r1, [r3, #192]	; 0xc0
   2d844:	e59320c4 	ldr	r2, [r3, #196]	; 0xc4
   2d848:	e1510002 	cmp	r1, r2
   2d84c:	23a02000 	movcs	r2, #0
   2d850:	258320c0 	strcs	r2, [r3, #192]	; 0xc0
   2d854:	e12fff1e 	bx	lr
   2d858:	e3e00000 	mvn	r0, #0
   2d85c:	e12fff1e 	bx	lr

0002d860 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)>:
   2d860:	e59f3098 	ldr	r3, [pc, #152]	; 2d900 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0xa0>
   2d864:	e92d4010 	push	{r4, lr}
   2d868:	e590e0b8 	ldr	lr, [r0, #184]	; 0xb8
   2d86c:	e593c040 	ldr	ip, [r3, #64]	; 0x40
   2d870:	e59f308c 	ldr	r3, [pc, #140]	; 2d904 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0xa4>
   2d874:	e35e0000 	cmp	lr, #0
   2d878:	e583c004 	str	ip, [r3, #4]
   2d87c:	01a0300e 	moveq	r3, lr
   2d880:	0a00001c 	beq	2d8f8 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x98>
   2d884:	e59030bc 	ldr	r3, [r0, #188]	; 0xbc
   2d888:	e590c0c0 	ldr	ip, [r0, #192]	; 0xc0
   2d88c:	e053300c 	subs	r3, r3, ip
   2d890:	13a03001 	movne	r3, #1
   2d894:	e3520000 	cmp	r2, #0
   2d898:	03a03000 	moveq	r3, #0
   2d89c:	e3530000 	cmp	r3, #0
   2d8a0:	0a000014 	beq	2d8f8 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x98>
   2d8a4:	e3a03000 	mov	r3, #0
   2d8a8:	e241c001 	sub	ip, r1, #1
   2d8ac:	e1a04003 	mov	r4, r3
   2d8b0:	ea000000 	b	2d8b8 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x58>
   2d8b4:	e590e0b8 	ldr	lr, [r0, #184]	; 0xb8
   2d8b8:	e59010c0 	ldr	r1, [r0, #192]	; 0xc0
   2d8bc:	e2833001 	add	r3, r3, #1
   2d8c0:	e7de1001 	ldrb	r1, [lr, r1]
   2d8c4:	e5ec1001 	strb	r1, [ip, #1]!
   2d8c8:	e59010c0 	ldr	r1, [r0, #192]	; 0xc0
   2d8cc:	e590e0c4 	ldr	lr, [r0, #196]	; 0xc4
   2d8d0:	e2811001 	add	r1, r1, #1
   2d8d4:	e58010c0 	str	r1, [r0, #192]	; 0xc0
   2d8d8:	e59010c0 	ldr	r1, [r0, #192]	; 0xc0
   2d8dc:	e151000e 	cmp	r1, lr
   2d8e0:	258040c0 	strcs	r4, [r0, #192]	; 0xc0
   2d8e4:	e590e0bc 	ldr	lr, [r0, #188]	; 0xbc
   2d8e8:	e59010c0 	ldr	r1, [r0, #192]	; 0xc0
   2d8ec:	e15e0001 	cmp	lr, r1
   2d8f0:	11520003 	cmpne	r2, r3
   2d8f4:	8affffee 	bhi	2d8b4 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x54>
   2d8f8:	e1a00003 	mov	r0, r3
   2d8fc:	e8bd8010 	pop	{r4, pc}
   2d900:	20201000 	.word	0x20201000
   2d904:	0004c5e8 	.word	0x0004c5e8

0002d908 <CUartMaxiSerialDevice::CanGet()>:
   2d908:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2d90c:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
   2d910:	e0520000 	subs	r0, r2, r0
   2d914:	13a00001 	movne	r0, #1
   2d918:	e12fff1e 	bx	lr

0002d91c <CUartMaxiSerialDevice::Peek()>:
   2d91c:	e59030b8 	ldr	r3, [r0, #184]	; 0xb8
   2d920:	e3530000 	cmp	r3, #0
   2d924:	0a000006 	beq	2d944 <CUartMaxiSerialDevice::Peek()+0x28>
   2d928:	e59010bc 	ldr	r1, [r0, #188]	; 0xbc
   2d92c:	e59020c0 	ldr	r2, [r0, #192]	; 0xc0
   2d930:	e1510002 	cmp	r1, r2
   2d934:	0a000002 	beq	2d944 <CUartMaxiSerialDevice::Peek()+0x28>
   2d938:	e59020c0 	ldr	r2, [r0, #192]	; 0xc0
   2d93c:	e7d30002 	ldrb	r0, [r3, r2]
   2d940:	e12fff1e 	bx	lr
   2d944:	e3e00000 	mvn	r0, #0
   2d948:	e12fff1e 	bx	lr

0002d94c <CUartMaxiSerialDevice::AvailableForRead()>:
   2d94c:	e59030c0 	ldr	r3, [r0, #192]	; 0xc0
   2d950:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2d954:	e1530002 	cmp	r3, r2
   2d958:	859020bc 	ldrhi	r2, [r0, #188]	; 0xbc
   2d95c:	859000c4 	ldrhi	r0, [r0, #196]	; 0xc4
   2d960:	959000bc 	ldrls	r0, [r0, #188]	; 0xbc
   2d964:	80820000 	addhi	r0, r2, r0
   2d968:	e0400003 	sub	r0, r0, r3
   2d96c:	e12fff1e 	bx	lr

0002d970 <CUartMaxiSerialDevice::GetOptions() const>:
   2d970:	e2800901 	add	r0, r0, #16384	; 0x4000
   2d974:	e5900f18 	ldr	r0, [r0, #3864]	; 0xf18
   2d978:	e12fff1e 	bx	lr

0002d97c <CUartMaxiSerialDevice::SetOptions(unsigned int)>:
   2d97c:	e2800901 	add	r0, r0, #16384	; 0x4000
   2d980:	e5801f18 	str	r1, [r0, #3864]	; 0xf18
   2d984:	e12fff1e 	bx	lr

0002d988 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   2d988:	e5903004 	ldr	r3, [r0, #4]
   2d98c:	e92d4010 	push	{r4, lr}
   2d990:	e3530000 	cmp	r3, #0
   2d994:	0a00000e 	beq	2d9d4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
   2d998:	e2800901 	add	r0, r0, #16384	; 0x4000
   2d99c:	e5903f1c 	ldr	r3, [r0, #3868]	; 0xf1c
   2d9a0:	e3530000 	cmp	r3, #0
   2d9a4:	1a00000e 	bne	2d9e4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x5c>
   2d9a8:	e3510000 	cmp	r1, #0
   2d9ac:	0a000010 	beq	2d9f4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x6c>
   2d9b0:	e1d130d0 	ldrsb	r3, [r1]
   2d9b4:	e3530000 	cmp	r3, #0
   2d9b8:	0a000011 	beq	2da04 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x7c>
   2d9bc:	e3520000 	cmp	r2, #0
   2d9c0:	0a000013 	beq	2da14 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
   2d9c4:	e5802f24 	str	r2, [r0, #3876]	; 0xf24
   2d9c8:	e5801f20 	str	r1, [r0, #3872]	; 0xf20
   2d9cc:	e5801f1c 	str	r1, [r0, #3868]	; 0xf1c
   2d9d0:	e8bd8010 	pop	{r4, pc}
   2d9d4:	e59f1048 	ldr	r1, [pc, #72]	; 2da24 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2d9d8:	e59f2048 	ldr	r2, [pc, #72]	; 2da28 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa0>
   2d9dc:	e2810f41 	add	r0, r1, #260	; 0x104
   2d9e0:	ebffdb53 	bl	24734 <assertion_failed>
   2d9e4:	e59f1038 	ldr	r1, [pc, #56]	; 2da24 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2d9e8:	e59f203c 	ldr	r2, [pc, #60]	; 2da2c <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa4>
   2d9ec:	e2810f47 	add	r0, r1, #284	; 0x11c
   2d9f0:	ebffdb4f 	bl	24734 <assertion_failed>
   2d9f4:	e59f1028 	ldr	r1, [pc, #40]	; 2da24 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2d9f8:	e3a02f87 	mov	r2, #540	; 0x21c
   2d9fc:	e2810f4b 	add	r0, r1, #300	; 0x12c
   2da00:	ebffdb4b 	bl	24734 <assertion_failed>
   2da04:	e59f1018 	ldr	r1, [pc, #24]	; 2da24 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2da08:	e59f2020 	ldr	r2, [pc, #32]	; 2da30 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
   2da0c:	e2810f4e 	add	r0, r1, #312	; 0x138
   2da10:	ebffdb47 	bl	24734 <assertion_failed>
   2da14:	e59f1008 	ldr	r1, [pc, #8]	; 2da24 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2da18:	e59f2014 	ldr	r2, [pc, #20]	; 2da34 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xac>
   2da1c:	e2810f52 	add	r0, r1, #328	; 0x148
   2da20:	ebffdb43 	bl	24734 <assertion_failed>
   2da24:	00044338 	.word	0x00044338
   2da28:	00000219 	.word	0x00000219
   2da2c:	0000021a 	.word	0x0000021a
   2da30:	0000021d 	.word	0x0000021d
   2da34:	0000021e 	.word	0x0000021e

0002da38 <CUartMaxiSerialDevice::InterruptHandler()>:
   2da38:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2da3c:	e3a03000 	mov	r3, #0
   2da40:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2da44:	e59f222c 	ldr	r2, [pc, #556]	; 2dc78 <CUartMaxiSerialDevice::InterruptHandler()+0x240>
   2da48:	e5921040 	ldr	r1, [r2, #64]	; 0x40
   2da4c:	e5821044 	str	r1, [r2, #68]	; 0x44
   2da50:	e592e018 	ldr	lr, [r2, #24]
   2da54:	e21ee010 	ands	lr, lr, #16
   2da58:	11a0e003 	movne	lr, r3
   2da5c:	1a000055 	bne	2dbb8 <CUartMaxiSerialDevice::InterruptHandler()+0x180>
   2da60:	e1a0700e 	mov	r7, lr
   2da64:	e3a06003 	mov	r6, #3
   2da68:	e3a08002 	mov	r8, #2
   2da6c:	e3a05001 	mov	r5, #1
   2da70:	e3a04004 	mov	r4, #4
   2da74:	e59010c4 	ldr	r1, [r0, #196]	; 0xc4
   2da78:	e280c901 	add	ip, r0, #16384	; 0x4000
   2da7c:	ea000037 	b	2db60 <CUartMaxiSerialDevice::InterruptHandler()+0x128>
   2da80:	e59090ec 	ldr	r9, [r0, #236]	; 0xec
   2da84:	e5d0a0c9 	ldrb	sl, [r0, #201]	; 0xc9
   2da88:	e2899001 	add	r9, r9, #1
   2da8c:	e35a0000 	cmp	sl, #0
   2da90:	e58090ec 	str	r9, [r0, #236]	; 0xec
   2da94:	05c050c9 	strbeq	r5, [r0, #201]	; 0xc9
   2da98:	e3510000 	cmp	r1, #0
   2da9c:	0a00003c 	beq	2db94 <CUartMaxiSerialDevice::InterruptHandler()+0x15c>
   2daa0:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2daa4:	e59090c0 	ldr	r9, [r0, #192]	; 0xc0
   2daa8:	e15a0009 	cmp	sl, r9
   2daac:	0a000008 	beq	2dad4 <CUartMaxiSerialDevice::InterruptHandler()+0x9c>
   2dab0:	e59090c0 	ldr	r9, [r0, #192]	; 0xc0
   2dab4:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2dab8:	e159000a 	cmp	r9, sl
   2dabc:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2dac0:	2a00005a 	bcs	2dc30 <CUartMaxiSerialDevice::InterruptHandler()+0x1f8>
   2dac4:	e241b001 	sub	fp, r1, #1
   2dac8:	e3590000 	cmp	r9, #0
   2dacc:	015b000a 	cmpeq	fp, sl
   2dad0:	0a00002f 	beq	2db94 <CUartMaxiSerialDevice::InterruptHandler()+0x15c>
   2dad4:	e59090b8 	ldr	r9, [r0, #184]	; 0xb8
   2dad8:	e3590000 	cmp	r9, #0
   2dadc:	0a00002c 	beq	2db94 <CUartMaxiSerialDevice::InterruptHandler()+0x15c>
   2dae0:	e59010bc 	ldr	r1, [r0, #188]	; 0xbc
   2dae4:	e7c93001 	strb	r3, [r9, r1]
   2dae8:	e59090bc 	ldr	r9, [r0, #188]	; 0xbc
   2daec:	e59010c4 	ldr	r1, [r0, #196]	; 0xc4
   2daf0:	e2899001 	add	r9, r9, #1
   2daf4:	e58090bc 	str	r9, [r0, #188]	; 0xbc
   2daf8:	e59090bc 	ldr	r9, [r0, #188]	; 0xbc
   2dafc:	e1590001 	cmp	r9, r1
   2db00:	e59c9f1c 	ldr	r9, [ip, #3868]	; 0xf1c
   2db04:	258070bc 	strcs	r7, [r0, #188]	; 0xbc
   2db08:	e3590000 	cmp	r9, #0
   2db0c:	0a000010 	beq	2db54 <CUartMaxiSerialDevice::InterruptHandler()+0x11c>
   2db10:	e59caf20 	ldr	sl, [ip, #3872]	; 0xf20
   2db14:	e6af3073 	sxtb	r3, r3
   2db18:	e1dab0d0 	ldrsb	fp, [sl]
   2db1c:	e15b0003 	cmp	fp, r3
   2db20:	158c9f20 	strne	r9, [ip, #3872]	; 0xf20
   2db24:	1a000004 	bne	2db3c <CUartMaxiSerialDevice::InterruptHandler()+0x104>
   2db28:	e28a3001 	add	r3, sl, #1
   2db2c:	e58c3f20 	str	r3, [ip, #3872]	; 0xf20
   2db30:	e1da30d1 	ldrsb	r3, [sl, #1]
   2db34:	e3530000 	cmp	r3, #0
   2db38:	03a0e001 	moveq	lr, #1
   2db3c:	e59030e4 	ldr	r3, [r0, #228]	; 0xe4
   2db40:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2db44:	e2833001 	add	r3, r3, #1
   2db48:	e3590000 	cmp	r9, #0
   2db4c:	e58030e4 	str	r3, [r0, #228]	; 0xe4
   2db50:	05c060c9 	strbeq	r6, [r0, #201]	; 0xc9
   2db54:	e5923018 	ldr	r3, [r2, #24]
   2db58:	e3130010 	tst	r3, #16
   2db5c:	1a000015 	bne	2dbb8 <CUartMaxiSerialDevice::InterruptHandler()+0x180>
   2db60:	e5923000 	ldr	r3, [r2]
   2db64:	e3130b01 	tst	r3, #1024	; 0x400
   2db68:	1affffc4 	bne	2da80 <CUartMaxiSerialDevice::InterruptHandler()+0x48>
   2db6c:	e3130b02 	tst	r3, #2048	; 0x800
   2db70:	0a000032 	beq	2dc40 <CUartMaxiSerialDevice::InterruptHandler()+0x208>
   2db74:	e5d0a0c9 	ldrb	sl, [r0, #201]	; 0xc9
   2db78:	e59090e8 	ldr	r9, [r0, #232]	; 0xe8
   2db7c:	e35a0000 	cmp	sl, #0
   2db80:	e2899001 	add	r9, r9, #1
   2db84:	05c080c9 	strbeq	r8, [r0, #201]	; 0xc9
   2db88:	e3510000 	cmp	r1, #0
   2db8c:	e58090e8 	str	r9, [r0, #232]	; 0xe8
   2db90:	1affffc2 	bne	2daa0 <CUartMaxiSerialDevice::InterruptHandler()+0x68>
   2db94:	e59030f0 	ldr	r3, [r0, #240]	; 0xf0
   2db98:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2db9c:	e2833001 	add	r3, r3, #1
   2dba0:	e58030f0 	str	r3, [r0, #240]	; 0xf0
   2dba4:	e5923018 	ldr	r3, [r2, #24]
   2dba8:	e3590000 	cmp	r9, #0
   2dbac:	05c040c9 	strbeq	r4, [r0, #201]	; 0xc9
   2dbb0:	e3130010 	tst	r3, #16
   2dbb4:	0affffe9 	beq	2db60 <CUartMaxiSerialDevice::InterruptHandler()+0x128>
   2dbb8:	e59f10b8 	ldr	r1, [pc, #184]	; 2dc78 <CUartMaxiSerialDevice::InterruptHandler()+0x240>
   2dbbc:	ea000010 	b	2dc04 <CUartMaxiSerialDevice::InterruptHandler()+0x1cc>
   2dbc0:	e590c0d0 	ldr	ip, [r0, #208]	; 0xd0
   2dbc4:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2dbc8:	e15c0002 	cmp	ip, r2
   2dbcc:	0a000024 	beq	2dc64 <CUartMaxiSerialDevice::InterruptHandler()+0x22c>
   2dbd0:	e59020cc 	ldr	r2, [r0, #204]	; 0xcc
   2dbd4:	e3520000 	cmp	r2, #0
   2dbd8:	0a000021 	beq	2dc64 <CUartMaxiSerialDevice::InterruptHandler()+0x22c>
   2dbdc:	e590c0d4 	ldr	ip, [r0, #212]	; 0xd4
   2dbe0:	e7d2200c 	ldrb	r2, [r2, ip]
   2dbe4:	e5812000 	str	r2, [r1]
   2dbe8:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2dbec:	e590c0d8 	ldr	ip, [r0, #216]	; 0xd8
   2dbf0:	e2822001 	add	r2, r2, #1
   2dbf4:	e58020d4 	str	r2, [r0, #212]	; 0xd4
   2dbf8:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2dbfc:	e152000c 	cmp	r2, ip
   2dc00:	258030d4 	strcs	r3, [r0, #212]	; 0xd4
   2dc04:	e5913018 	ldr	r3, [r1, #24]
   2dc08:	e2133020 	ands	r3, r3, #32
   2dc0c:	0affffeb 	beq	2dbc0 <CUartMaxiSerialDevice::InterruptHandler()+0x188>
   2dc10:	e35e0000 	cmp	lr, #0
   2dc14:	0a000002 	beq	2dc24 <CUartMaxiSerialDevice::InterruptHandler()+0x1ec>
   2dc18:	e2800901 	add	r0, r0, #16384	; 0x4000
   2dc1c:	e5903f24 	ldr	r3, [r0, #3876]	; 0xf24
   2dc20:	e12fff33 	blx	r3
   2dc24:	e3a03000 	mov	r3, #0
   2dc28:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2dc2c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc30:	e049900a 	sub	r9, r9, sl
   2dc34:	e3590001 	cmp	r9, #1
   2dc38:	9affffd5 	bls	2db94 <CUartMaxiSerialDevice::InterruptHandler()+0x15c>
   2dc3c:	eaffffa4 	b	2dad4 <CUartMaxiSerialDevice::InterruptHandler()+0x9c>
   2dc40:	e3130c01 	tst	r3, #256	; 0x100
   2dc44:	0affff93 	beq	2da98 <CUartMaxiSerialDevice::InterruptHandler()+0x60>
   2dc48:	e59090e4 	ldr	r9, [r0, #228]	; 0xe4
   2dc4c:	e5d0a0c9 	ldrb	sl, [r0, #201]	; 0xc9
   2dc50:	e2899001 	add	r9, r9, #1
   2dc54:	e35a0000 	cmp	sl, #0
   2dc58:	e58090e4 	str	r9, [r0, #228]	; 0xe4
   2dc5c:	05c060c9 	strbeq	r6, [r0, #201]	; 0xc9
   2dc60:	eaffff8c 	b	2da98 <CUartMaxiSerialDevice::InterruptHandler()+0x60>
   2dc64:	e59f200c 	ldr	r2, [pc, #12]	; 2dc78 <CUartMaxiSerialDevice::InterruptHandler()+0x240>
   2dc68:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   2dc6c:	e3c33020 	bic	r3, r3, #32
   2dc70:	e5823038 	str	r3, [r2, #56]	; 0x38
   2dc74:	eaffffe5 	b	2dc10 <CUartMaxiSerialDevice::InterruptHandler()+0x1d8>
   2dc78:	20201000 	.word	0x20201000

0002dc7c <CUartMaxiSerialDevice::InterruptStub(void*)>:
   2dc7c:	e59f3040 	ldr	r3, [pc, #64]	; 2dcc4 <CUartMaxiSerialDevice::InterruptStub(void*)+0x48>
   2dc80:	e3a01000 	mov	r1, #0
   2dc84:	e5932000 	ldr	r2, [r3]
   2dc88:	e2822001 	add	r2, r2, #1
   2dc8c:	e5832000 	str	r2, [r3]
   2dc90:	ee071fba 	mcr	15, 0, r1, cr7, cr10, {5}
   2dc94:	e593201c 	ldr	r2, [r3, #28]
   2dc98:	e3120001 	tst	r2, #1
   2dc9c:	012fff1e 	bxeq	lr
   2dca0:	e5930020 	ldr	r0, [r3, #32]
   2dca4:	e1500001 	cmp	r0, r1
   2dca8:	0a000000 	beq	2dcb0 <CUartMaxiSerialDevice::InterruptStub(void*)+0x34>
   2dcac:	eaffff61 	b	2da38 <CUartMaxiSerialDevice::InterruptHandler()>
   2dcb0:	e59f1010 	ldr	r1, [pc, #16]	; 2dcc8 <CUartMaxiSerialDevice::InterruptStub(void*)+0x4c>
   2dcb4:	e3a02fa9 	mov	r2, #676	; 0x2a4
   2dcb8:	e92d4010 	push	{r4, lr}
   2dcbc:	e2810f56 	add	r0, r1, #344	; 0x158
   2dcc0:	ebffda9b 	bl	24734 <assertion_failed>
   2dcc4:	0004c5e8 	.word	0x0004c5e8
   2dcc8:	00044338 	.word	0x00044338

0002dccc <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>:
   2dccc:	e5910000 	ldr	r0, [r1]
   2dcd0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2dcd4:	e3500000 	cmp	r0, #0
   2dcd8:	e1a05001 	mov	r5, r1
   2dcdc:	e1a07002 	mov	r7, r2
   2dce0:	e1a04003 	mov	r4, r3
   2dce4:	e59d6018 	ldr	r6, [sp, #24]
   2dce8:	0a000005 	beq	2dd04 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x38>
   2dcec:	e5963008 	ldr	r3, [r6, #8]
   2dcf0:	e1530004 	cmp	r3, r4
   2dcf4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2dcf8:	e5d23000 	ldrb	r3, [r2]
   2dcfc:	e3530000 	cmp	r3, #0
   2dd00:	1a000013 	bne	2dd54 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x88>
   2dd04:	e3540000 	cmp	r4, #0
   2dd08:	1a000007 	bne	2dd2c <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x60>
   2dd0c:	e59d301c 	ldr	r3, [sp, #28]
   2dd10:	e5853000 	str	r3, [r5]
   2dd14:	e59d3020 	ldr	r3, [sp, #32]
   2dd18:	e5c74000 	strb	r4, [r7]
   2dd1c:	e5864000 	str	r4, [r6]
   2dd20:	e5863008 	str	r3, [r6, #8]
   2dd24:	e5864004 	str	r4, [r6, #4]
   2dd28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2dd2c:	e1a00004 	mov	r0, r4
   2dd30:	ebfff48c 	bl	2af68 <operator new[](unsigned int)>
   2dd34:	e3a03000 	mov	r3, #0
   2dd38:	e3a02001 	mov	r2, #1
   2dd3c:	e5850000 	str	r0, [r5]
   2dd40:	e5c72000 	strb	r2, [r7]
   2dd44:	e5863000 	str	r3, [r6]
   2dd48:	e5864008 	str	r4, [r6, #8]
   2dd4c:	e5863004 	str	r3, [r6, #4]
   2dd50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2dd54:	ebfff48a 	bl	2af84 <operator delete[](void*)>
   2dd58:	e3a03000 	mov	r3, #0
   2dd5c:	e3540000 	cmp	r4, #0
   2dd60:	e5853000 	str	r3, [r5]
   2dd64:	e5c73000 	strb	r3, [r7]
   2dd68:	e5863000 	str	r3, [r6]
   2dd6c:	e5863008 	str	r3, [r6, #8]
   2dd70:	e5863004 	str	r3, [r6, #4]
   2dd74:	0affffe4 	beq	2dd0c <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x40>
   2dd78:	eaffffeb 	b	2dd2c <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x60>

0002dd7c <micros>:
   2dd7c:	eaffed7f 	b	29380 <CTimer::GetClockTicks()>

0002dd80 <millis>:
   2dd80:	e92d4010 	push	{r4, lr}
   2dd84:	ebffed7d 	bl	29380 <CTimer::GetClockTicks()>
   2dd88:	e59f3008 	ldr	r3, [pc, #8]	; 2dd98 <millis+0x18>
   2dd8c:	e0803093 	umull	r3, r0, r3, r0
   2dd90:	e1a00320 	lsr	r0, r0, #6
   2dd94:	e8bd8010 	pop	{r4, pc}
   2dd98:	10624dd3 	.word	0x10624dd3

0002dd9c <microsDelay>:
   2dd9c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2dda0:	e1a06000 	mov	r6, r0
   2dda4:	ebffed75 	bl	29380 <CTimer::GetClockTicks()>
   2dda8:	e1a04000 	mov	r4, r0
   2ddac:	e1e05000 	mvn	r5, r0
   2ddb0:	e0867000 	add	r7, r6, r0
   2ddb4:	ea000004 	b	2ddcc <microsDelay+0x30>
   2ddb8:	e1560003 	cmp	r6, r3
   2ddbc:	23a03000 	movcs	r3, #0
   2ddc0:	33a03001 	movcc	r3, #1
   2ddc4:	e3530000 	cmp	r3, #0
   2ddc8:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   2ddcc:	ebffed6b 	bl	29380 <CTimer::GetClockTicks()>
   2ddd0:	e1540000 	cmp	r4, r0
   2ddd4:	e0853000 	add	r3, r5, r0
   2ddd8:	8afffff6 	bhi	2ddb8 <microsDelay+0x1c>
   2dddc:	e1570000 	cmp	r7, r0
   2dde0:	23a03000 	movcs	r3, #0
   2dde4:	33a03001 	movcc	r3, #1
   2dde8:	e3530000 	cmp	r3, #0
   2ddec:	0afffff6 	beq	2ddcc <microsDelay+0x30>
   2ddf0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002ddf4 <isTimeout>:
   2ddf4:	e1500001 	cmp	r0, r1
   2ddf8:	2a000005 	bcs	2de14 <isTimeout+0x20>
   2ddfc:	e0401001 	sub	r1, r0, r1
   2de00:	e2411001 	sub	r1, r1, #1
   2de04:	e1510002 	cmp	r1, r2
   2de08:	93a00000 	movls	r0, #0
   2de0c:	83a00001 	movhi	r0, #1
   2de10:	e12fff1e 	bx	lr
   2de14:	e0811002 	add	r1, r1, r2
   2de18:	e1510000 	cmp	r1, r0
   2de1c:	23a00000 	movcs	r0, #0
   2de20:	33a00001 	movcc	r0, #1
   2de24:	e12fff1e 	bx	lr

0002de28 <timeToTimeout>:
   2de28:	e1500001 	cmp	r0, r1
   2de2c:	3a000004 	bcc	2de44 <timeToTimeout+0x1c>
   2de30:	e0811002 	add	r1, r1, r2
   2de34:	e1510000 	cmp	r1, r0
   2de38:	2a000007 	bcs	2de5c <timeToTimeout+0x34>
   2de3c:	e3a00000 	mov	r0, #0
   2de40:	e12fff1e 	bx	lr
   2de44:	e0403001 	sub	r3, r0, r1
   2de48:	e2433001 	sub	r3, r3, #1
   2de4c:	e1530002 	cmp	r3, r2
   2de50:	8afffff9 	bhi	2de3c <timeToTimeout+0x14>
   2de54:	e2822001 	add	r2, r2, #1
   2de58:	e0821001 	add	r1, r2, r1
   2de5c:	e0410000 	sub	r0, r1, r0
   2de60:	e12fff1e 	bx	lr

0002de64 <strlcpy>:
   2de64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2de68:	e1a06000 	mov	r6, r0
   2de6c:	e1a00001 	mov	r0, r1
   2de70:	e1a04002 	mov	r4, r2
   2de74:	e1a07001 	mov	r7, r1
   2de78:	ebfff053 	bl	29fcc <strlen>
   2de7c:	e2802001 	add	r2, r0, #1
   2de80:	e1520004 	cmp	r2, r4
   2de84:	e1a05000 	mov	r5, r0
   2de88:	3a00000c 	bcc	2dec0 <strlcpy+0x5c>
   2de8c:	e3540000 	cmp	r4, #0
   2de90:	1a000001 	bne	2de9c <strlcpy+0x38>
   2de94:	e1a00005 	mov	r0, r5
   2de98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2de9c:	e2444001 	sub	r4, r4, #1
   2dea0:	e1a01007 	mov	r1, r7
   2dea4:	e1a02004 	mov	r2, r4
   2dea8:	e1a00006 	mov	r0, r6
   2deac:	ebfff241 	bl	2a7b8 <memcpy>
   2deb0:	e3a03000 	mov	r3, #0
   2deb4:	e1a00005 	mov	r0, r5
   2deb8:	e7c63004 	strb	r3, [r6, r4]
   2debc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2dec0:	e1a01007 	mov	r1, r7
   2dec4:	e1a00006 	mov	r0, r6
   2dec8:	ebfff23a 	bl	2a7b8 <memcpy>
   2decc:	e1a00005 	mov	r0, r5
   2ded0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002ded4 <strlcat>:
   2ded4:	e92d4370 	push	{r4, r5, r6, r8, r9, lr}
   2ded8:	e1a06002 	mov	r6, r2
   2dedc:	e24dd008 	sub	sp, sp, #8
   2dee0:	e1a09000 	mov	r9, r0
   2dee4:	e1a00001 	mov	r0, r1
   2dee8:	e58d1004 	str	r1, [sp, #4]
   2deec:	ebfff036 	bl	29fcc <strlen>
   2def0:	e3560000 	cmp	r6, #0
   2def4:	e1a08000 	mov	r8, r0
   2def8:	0a000019 	beq	2df64 <strlcat+0x90>
   2defc:	e3a04000 	mov	r4, #0
   2df00:	e59d1004 	ldr	r1, [sp, #4]
   2df04:	e2493001 	sub	r3, r9, #1
   2df08:	ea000002 	b	2df18 <strlcat+0x44>
   2df0c:	e2844001 	add	r4, r4, #1
   2df10:	e1560004 	cmp	r6, r4
   2df14:	0a000012 	beq	2df64 <strlcat+0x90>
   2df18:	e1f350d1 	ldrsb	r5, [r3, #1]!
   2df1c:	e3550000 	cmp	r5, #0
   2df20:	1afffff9 	bne	2df0c <strlcat+0x38>
   2df24:	e0463004 	sub	r3, r6, r4
   2df28:	e1530008 	cmp	r3, r8
   2df2c:	8a000008 	bhi	2df54 <strlcat+0x80>
   2df30:	e2466001 	sub	r6, r6, #1
   2df34:	e1a02006 	mov	r2, r6
   2df38:	e0890004 	add	r0, r9, r4
   2df3c:	e0896006 	add	r6, r9, r6
   2df40:	ebfff21c 	bl	2a7b8 <memcpy>
   2df44:	e7c65004 	strb	r5, [r6, r4]
   2df48:	e0880004 	add	r0, r8, r4
   2df4c:	e28dd008 	add	sp, sp, #8
   2df50:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
   2df54:	e0890004 	add	r0, r9, r4
   2df58:	e2882001 	add	r2, r8, #1
   2df5c:	ebfff215 	bl	2a7b8 <memcpy>
   2df60:	eafffff8 	b	2df48 <strlcat+0x74>
   2df64:	e0880006 	add	r0, r8, r6
   2df68:	e28dd008 	add	sp, sp, #8
   2df6c:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}

0002df70 <strnlen>:
   2df70:	e3510000 	cmp	r1, #0
   2df74:	e1a03000 	mov	r3, r0
   2df78:	0a000008 	beq	2dfa0 <strnlen+0x30>
   2df7c:	e3a00000 	mov	r0, #0
   2df80:	e2433001 	sub	r3, r3, #1
   2df84:	e1f320d1 	ldrsb	r2, [r3, #1]!
   2df88:	e3520000 	cmp	r2, #0
   2df8c:	012fff1e 	bxeq	lr
   2df90:	e2800001 	add	r0, r0, #1
   2df94:	e1510000 	cmp	r1, r0
   2df98:	1afffff9 	bne	2df84 <strnlen+0x14>
   2df9c:	e12fff1e 	bx	lr
   2dfa0:	e1a00001 	mov	r0, r1
   2dfa4:	e12fff1e 	bx	lr

0002dfa8 <sprintf>:
   2dfa8:	e92d000e 	push	{r1, r2, r3}
   2dfac:	e92d4010 	push	{r4, lr}
   2dfb0:	e24dd01c 	sub	sp, sp, #28
   2dfb4:	e28d3028 	add	r3, sp, #40	; 0x28
   2dfb8:	e1a04000 	mov	r4, r0
   2dfbc:	e28d0008 	add	r0, sp, #8
   2dfc0:	e58d3004 	str	r3, [sp, #4]
   2dfc4:	ebffe6b2 	bl	27a94 <CString::CString()>
   2dfc8:	e59d2004 	ldr	r2, [sp, #4]
   2dfcc:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   2dfd0:	e28d0008 	add	r0, sp, #8
   2dfd4:	ebffe8d1 	bl	28320 <CString::FormatV(char const*, std::__va_list)>
   2dfd8:	e28d0008 	add	r0, sp, #8
   2dfdc:	ebffe6c4 	bl	27af4 <CString::operator char const*() const>
   2dfe0:	e1a01000 	mov	r1, r0
   2dfe4:	e1a00004 	mov	r0, r4
   2dfe8:	ebfff09b 	bl	2a25c <strcpy>
   2dfec:	e28d0008 	add	r0, sp, #8
   2dff0:	ebffe6f1 	bl	27bbc <CString::GetLength() const>
   2dff4:	e1a04000 	mov	r4, r0
   2dff8:	e28d0008 	add	r0, sp, #8
   2dffc:	ebffe671 	bl	279c8 <CString::~CString()>
   2e000:	e1a00004 	mov	r0, r4
   2e004:	e28dd01c 	add	sp, sp, #28
   2e008:	e8bd4010 	pop	{r4, lr}
   2e00c:	e28dd00c 	add	sp, sp, #12
   2e010:	e12fff1e 	bx	lr

0002e014 <snprintf>:
   2e014:	e92d000c 	push	{r2, r3}
   2e018:	e92d4030 	push	{r4, r5, lr}
   2e01c:	e24dd01c 	sub	sp, sp, #28
   2e020:	e28d302c 	add	r3, sp, #44	; 0x2c
   2e024:	e1a05000 	mov	r5, r0
   2e028:	e28d0008 	add	r0, sp, #8
   2e02c:	e1a04001 	mov	r4, r1
   2e030:	e58d3004 	str	r3, [sp, #4]
   2e034:	ebffe696 	bl	27a94 <CString::CString()>
   2e038:	e59d2004 	ldr	r2, [sp, #4]
   2e03c:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   2e040:	e28d0008 	add	r0, sp, #8
   2e044:	ebffe8b5 	bl	28320 <CString::FormatV(char const*, std::__va_list)>
   2e048:	e28d0008 	add	r0, sp, #8
   2e04c:	ebffe6da 	bl	27bbc <CString::GetLength() const>
   2e050:	e2441001 	sub	r1, r4, #1
   2e054:	e1510000 	cmp	r1, r0
   2e058:	21a04000 	movcs	r4, r0
   2e05c:	e28d0008 	add	r0, sp, #8
   2e060:	31a04001 	movcc	r4, r1
   2e064:	ebffe6a2 	bl	27af4 <CString::operator char const*() const>
   2e068:	e1a02004 	mov	r2, r4
   2e06c:	e1a01000 	mov	r1, r0
   2e070:	e1a00005 	mov	r0, r5
   2e074:	ebfff1cf 	bl	2a7b8 <memcpy>
   2e078:	e3a03000 	mov	r3, #0
   2e07c:	e28d0008 	add	r0, sp, #8
   2e080:	e7c53004 	strb	r3, [r5, r4]
   2e084:	ebffe64f 	bl	279c8 <CString::~CString()>
   2e088:	e1a00004 	mov	r0, r4
   2e08c:	e28dd01c 	add	sp, sp, #28
   2e090:	e8bd4030 	pop	{r4, r5, lr}
   2e094:	e28dd008 	add	sp, sp, #8
   2e098:	e12fff1e 	bx	lr

0002e09c <vsnprintf>:
   2e09c:	e92d4030 	push	{r4, r5, lr}
   2e0a0:	e24dd01c 	sub	sp, sp, #28
   2e0a4:	e1a05000 	mov	r5, r0
   2e0a8:	e28d0008 	add	r0, sp, #8
   2e0ac:	e1a04001 	mov	r4, r1
   2e0b0:	e58d3000 	str	r3, [sp]
   2e0b4:	e58d2004 	str	r2, [sp, #4]
   2e0b8:	ebffe675 	bl	27a94 <CString::CString()>
   2e0bc:	e59d2000 	ldr	r2, [sp]
   2e0c0:	e59d1004 	ldr	r1, [sp, #4]
   2e0c4:	e28d0008 	add	r0, sp, #8
   2e0c8:	ebffe894 	bl	28320 <CString::FormatV(char const*, std::__va_list)>
   2e0cc:	e28d0008 	add	r0, sp, #8
   2e0d0:	ebffe6b9 	bl	27bbc <CString::GetLength() const>
   2e0d4:	e2441001 	sub	r1, r4, #1
   2e0d8:	e1510000 	cmp	r1, r0
   2e0dc:	21a04000 	movcs	r4, r0
   2e0e0:	e28d0008 	add	r0, sp, #8
   2e0e4:	31a04001 	movcc	r4, r1
   2e0e8:	ebffe681 	bl	27af4 <CString::operator char const*() const>
   2e0ec:	e1a02004 	mov	r2, r4
   2e0f0:	e1a01000 	mov	r1, r0
   2e0f4:	e1a00005 	mov	r0, r5
   2e0f8:	ebfff1ae 	bl	2a7b8 <memcpy>
   2e0fc:	e3a03000 	mov	r3, #0
   2e100:	e28d0008 	add	r0, sp, #8
   2e104:	e7c53004 	strb	r3, [r5, r4]
   2e108:	ebffe62e 	bl	279c8 <CString::~CString()>
   2e10c:	e1a00004 	mov	r0, r4
   2e110:	e28dd01c 	add	sp, sp, #28
   2e114:	e8bd8030 	pop	{r4, r5, pc}

0002e118 <jsonGetValueForKey>:
   2e118:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e11c:	e1a08001 	mov	r8, r1
   2e120:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2e124:	e24dd018 	sub	sp, sp, #24
   2e128:	e1a07000 	mov	r7, r0
   2e12c:	e28d000c 	add	r0, sp, #12
   2e130:	e1a0a002 	mov	sl, r2
   2e134:	e1a09003 	mov	r9, r3
   2e138:	eb000130 	bl	2e600 <JSMNR_init>
   2e13c:	e1a00008 	mov	r0, r8
   2e140:	ebffefa1 	bl	29fcc <strlen>
   2e144:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2e148:	e1a02000 	mov	r2, r0
   2e14c:	e1a01008 	mov	r1, r8
   2e150:	e28d000c 	add	r0, sp, #12
   2e154:	e28d3018 	add	r3, sp, #24
   2e158:	e58dc000 	str	ip, [sp]
   2e15c:	eb000142 	bl	2e66c <JSMNR_parse>
   2e160:	e2506000 	subs	r6, r0, #0
   2e164:	da000020 	ble	2e1ec <jsonGetValueForKey+0xd4>
   2e168:	e3a05000 	mov	r5, #0
   2e16c:	e28d4018 	add	r4, sp, #24
   2e170:	ea000002 	b	2e180 <jsonGetValueForKey+0x68>
   2e174:	e1560005 	cmp	r6, r5
   2e178:	e2844010 	add	r4, r4, #16
   2e17c:	0a00001a 	beq	2e1ec <jsonGetValueForKey+0xd4>
   2e180:	e5d4c000 	ldrb	ip, [r4]
   2e184:	e2855001 	add	r5, r5, #1
   2e188:	e35c0003 	cmp	ip, #3
   2e18c:	1afffff8 	bne	2e174 <jsonGetValueForKey+0x5c>
   2e190:	e1a00007 	mov	r0, r7
   2e194:	ebffef8c 	bl	29fcc <strlen>
   2e198:	e994000a 	ldmib	r4, {r1, r3}
   2e19c:	e0433001 	sub	r3, r3, r1
   2e1a0:	e1500003 	cmp	r0, r3
   2e1a4:	1afffff2 	bne	2e174 <jsonGetValueForKey+0x5c>
   2e1a8:	e1a02000 	mov	r2, r0
   2e1ac:	e0880001 	add	r0, r8, r1
   2e1b0:	e1a01007 	mov	r1, r7
   2e1b4:	ebffefcd 	bl	2a0f0 <strncmp>
   2e1b8:	e3500000 	cmp	r0, #0
   2e1bc:	1affffec 	bne	2e174 <jsonGetValueForKey+0x5c>
   2e1c0:	e5941014 	ldr	r1, [r4, #20]
   2e1c4:	e5942018 	ldr	r2, [r4, #24]
   2e1c8:	e0422001 	sub	r2, r2, r1
   2e1cc:	e1520009 	cmp	r2, r9
   2e1d0:	aa000005 	bge	2e1ec <jsonGetValueForKey+0xd4>
   2e1d4:	e1a0000a 	mov	r0, sl
   2e1d8:	e2822001 	add	r2, r2, #1
   2e1dc:	e0881001 	add	r1, r8, r1
   2e1e0:	ebffff1f 	bl	2de64 <strlcpy>
   2e1e4:	e3a00001 	mov	r0, #1
   2e1e8:	ea000000 	b	2e1f0 <jsonGetValueForKey+0xd8>
   2e1ec:	e3a00000 	mov	r0, #0
   2e1f0:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2e1f4:	e28dd018 	add	sp, sp, #24
   2e1f8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002e1fc <jsonGetArrayLen>:
   2e1fc:	e92d4010 	push	{r4, lr}
   2e200:	e1a04000 	mov	r4, r0
   2e204:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2e208:	e24dd018 	sub	sp, sp, #24
   2e20c:	e28d000c 	add	r0, sp, #12
   2e210:	eb0000fa 	bl	2e600 <JSMNR_init>
   2e214:	e1a00004 	mov	r0, r4
   2e218:	ebffef6b 	bl	29fcc <strlen>
   2e21c:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2e220:	e1a02000 	mov	r2, r0
   2e224:	e1a01004 	mov	r1, r4
   2e228:	e28d3018 	add	r3, sp, #24
   2e22c:	e28d000c 	add	r0, sp, #12
   2e230:	e58dc000 	str	ip, [sp]
   2e234:	eb00010c 	bl	2e66c <JSMNR_parse>
   2e238:	e3500000 	cmp	r0, #0
   2e23c:	b3a00000 	movlt	r0, #0
   2e240:	ba000004 	blt	2e258 <jsonGetArrayLen+0x5c>
   2e244:	0a000006 	beq	2e264 <jsonGetArrayLen+0x68>
   2e248:	e5dd3018 	ldrb	r3, [sp, #24]
   2e24c:	e3530002 	cmp	r3, #2
   2e250:	1a000003 	bne	2e264 <jsonGetArrayLen+0x68>
   2e254:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   2e258:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2e25c:	e28dd018 	add	sp, sp, #24
   2e260:	e8bd8010 	pop	{r4, pc}
   2e264:	e3e00000 	mvn	r0, #0
   2e268:	eafffffa 	b	2e258 <jsonGetArrayLen+0x5c>

0002e26c <jsonGetArrayElem>:
   2e26c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e270:	e1a08002 	mov	r8, r2
   2e274:	e1a06001 	mov	r6, r1
   2e278:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2e27c:	e24dd018 	sub	sp, sp, #24
   2e280:	e1a02003 	mov	r2, r3
   2e284:	e59f111c 	ldr	r1, [pc, #284]	; 2e3a8 <jsonGetArrayElem+0x13c>
   2e288:	e1a05000 	mov	r5, r0
   2e28c:	e1a00008 	mov	r0, r8
   2e290:	e1a07003 	mov	r7, r3
   2e294:	ebfffef2 	bl	2de64 <strlcpy>
   2e298:	e28d000c 	add	r0, sp, #12
   2e29c:	eb0000d7 	bl	2e600 <JSMNR_init>
   2e2a0:	e1a00006 	mov	r0, r6
   2e2a4:	ebffef48 	bl	29fcc <strlen>
   2e2a8:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2e2ac:	e1a02000 	mov	r2, r0
   2e2b0:	e1a01006 	mov	r1, r6
   2e2b4:	e28d000c 	add	r0, sp, #12
   2e2b8:	e28d3018 	add	r3, sp, #24
   2e2bc:	e58dc000 	str	ip, [sp]
   2e2c0:	eb0000e9 	bl	2e66c <JSMNR_parse>
   2e2c4:	e3500000 	cmp	r0, #0
   2e2c8:	ca000003 	bgt	2e2dc <jsonGetArrayElem+0x70>
   2e2cc:	e3a00000 	mov	r0, #0
   2e2d0:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2e2d4:	e28dd018 	add	sp, sp, #24
   2e2d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e2dc:	e5dd3018 	ldrb	r3, [sp, #24]
   2e2e0:	e3530002 	cmp	r3, #2
   2e2e4:	1afffff8 	bne	2e2cc <jsonGetArrayElem+0x60>
   2e2e8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2e2ec:	e1530005 	cmp	r3, r5
   2e2f0:	dafffff5 	ble	2e2cc <jsonGetArrayElem+0x60>
   2e2f4:	e3550000 	cmp	r5, #0
   2e2f8:	0a000025 	beq	2e394 <jsonGetArrayElem+0x128>
   2e2fc:	e3a02000 	mov	r2, #0
   2e300:	e3a0c001 	mov	ip, #1
   2e304:	e3a0e010 	mov	lr, #16
   2e308:	e28d3ef5 	add	r3, sp, #3920	; 0xf50
   2e30c:	e2833008 	add	r3, r3, #8
   2e310:	e083300e 	add	r3, r3, lr
   2e314:	e150000c 	cmp	r0, ip
   2e318:	e5133f38 	ldr	r3, [r3, #-3896]	; 0xfffff0c8
   2e31c:	ca000004 	bgt	2e334 <jsonGetArrayElem+0xc8>
   2e320:	eaffffe9 	b	2e2cc <jsonGetArrayElem+0x60>
   2e324:	e28cc001 	add	ip, ip, #1
   2e328:	e150000c 	cmp	r0, ip
   2e32c:	0affffe6 	beq	2e2cc <jsonGetArrayElem+0x60>
   2e330:	e1a0e20c 	lsl	lr, ip, #4
   2e334:	e28d1018 	add	r1, sp, #24
   2e338:	e081400e 	add	r4, r1, lr
   2e33c:	e5944004 	ldr	r4, [r4, #4]
   2e340:	e1540003 	cmp	r4, r3
   2e344:	dafffff6 	ble	2e324 <jsonGetArrayElem+0xb8>
   2e348:	e150000c 	cmp	r0, ip
   2e34c:	daffffde 	ble	2e2cc <jsonGetArrayElem+0x60>
   2e350:	e2822001 	add	r2, r2, #1
   2e354:	e1550002 	cmp	r5, r2
   2e358:	1affffea 	bne	2e308 <jsonGetArrayElem+0x9c>
   2e35c:	e28d3ef5 	add	r3, sp, #3920	; 0xf50
   2e360:	e2833008 	add	r3, r3, #8
   2e364:	e083e00e 	add	lr, r3, lr
   2e368:	e51e1f3c 	ldr	r1, [lr, #-3900]	; 0xfffff0c4
   2e36c:	e51e2f38 	ldr	r2, [lr, #-3896]	; 0xfffff0c8
   2e370:	e1a00008 	mov	r0, r8
   2e374:	e0422001 	sub	r2, r2, r1
   2e378:	e2822001 	add	r2, r2, #1
   2e37c:	e1520007 	cmp	r2, r7
   2e380:	a1a02007 	movge	r2, r7
   2e384:	e0861001 	add	r1, r6, r1
   2e388:	ebfffeb5 	bl	2de64 <strlcpy>
   2e38c:	e3a00001 	mov	r0, #1
   2e390:	eaffffce 	b	2e2d0 <jsonGetArrayElem+0x64>
   2e394:	e3500001 	cmp	r0, #1
   2e398:	01a00005 	moveq	r0, r5
   2e39c:	0affffcb 	beq	2e2d0 <jsonGetArrayElem+0x64>
   2e3a0:	e3a0e010 	mov	lr, #16
   2e3a4:	eaffffec 	b	2e35c <jsonGetArrayElem+0xf0>
   2e3a8:	00045ac0 	.word	0x00045ac0

0002e3ac <jsonEscape>:
   2e3ac:	e1d030d0 	ldrsb	r3, [r0]
   2e3b0:	e92d4070 	push	{r4, r5, r6, lr}
   2e3b4:	e3530000 	cmp	r3, #0
   2e3b8:	0a00002d 	beq	2e474 <jsonEscape+0xc8>
   2e3bc:	e3520002 	cmp	r2, #2
   2e3c0:	e3a0e000 	mov	lr, #0
   2e3c4:	da00001a 	ble	2e434 <jsonEscape+0x88>
   2e3c8:	e3a0c002 	mov	ip, #2
   2e3cc:	e3a0505c 	mov	r5, #92	; 0x5c
   2e3d0:	e3a0606e 	mov	r6, #110	; 0x6e
   2e3d4:	ea000009 	b	2e400 <jsonEscape+0x54>
   2e3d8:	e353000a 	cmp	r3, #10
   2e3dc:	14c13001 	strbne	r3, [r1], #1
   2e3e0:	128ee001 	addne	lr, lr, #1
   2e3e4:	0a00001c 	beq	2e45c <jsonEscape+0xb0>
   2e3e8:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2e3ec:	e28ec002 	add	ip, lr, #2
   2e3f0:	e3530000 	cmp	r3, #0
   2e3f4:	0a00000e 	beq	2e434 <jsonEscape+0x88>
   2e3f8:	e15c0002 	cmp	ip, r2
   2e3fc:	aa00000c 	bge	2e434 <jsonEscape+0x88>
   2e400:	e3530022 	cmp	r3, #34	; 0x22
   2e404:	0a00000e 	beq	2e444 <jsonEscape+0x98>
   2e408:	e353005c 	cmp	r3, #92	; 0x5c
   2e40c:	1afffff1 	bne	2e3d8 <jsonEscape+0x2c>
   2e410:	e1a04001 	mov	r4, r1
   2e414:	e1a0e00c 	mov	lr, ip
   2e418:	e4c43002 	strb	r3, [r4], #2
   2e41c:	e5c13001 	strb	r3, [r1, #1]
   2e420:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2e424:	e1a01004 	mov	r1, r4
   2e428:	e3530000 	cmp	r3, #0
   2e42c:	e28ec002 	add	ip, lr, #2
   2e430:	1afffff0 	bne	2e3f8 <jsonEscape+0x4c>
   2e434:	e152000e 	cmp	r2, lr
   2e438:	c3a03000 	movgt	r3, #0
   2e43c:	c5c13000 	strbgt	r3, [r1]
   2e440:	e8bd8070 	pop	{r4, r5, r6, pc}
   2e444:	e1a04001 	mov	r4, r1
   2e448:	e4c45002 	strb	r5, [r4], #2
   2e44c:	e1a0e00c 	mov	lr, ip
   2e450:	e5c13001 	strb	r3, [r1, #1]
   2e454:	e1a01004 	mov	r1, r4
   2e458:	eaffffe2 	b	2e3e8 <jsonEscape+0x3c>
   2e45c:	e1a03001 	mov	r3, r1
   2e460:	e4c35002 	strb	r5, [r3], #2
   2e464:	e1a0e00c 	mov	lr, ip
   2e468:	e5c16001 	strb	r6, [r1, #1]
   2e46c:	e1a01003 	mov	r1, r3
   2e470:	eaffffdc 	b	2e3e8 <jsonEscape+0x3c>
   2e474:	e1a0e003 	mov	lr, r3
   2e478:	eaffffed 	b	2e434 <jsonEscape+0x88>

0002e47c <rdisspace>:
   2e47c:	e3500020 	cmp	r0, #32
   2e480:	0a000004 	beq	2e498 <rdisspace+0x1c>
   2e484:	e2400009 	sub	r0, r0, #9
   2e488:	e3500004 	cmp	r0, #4
   2e48c:	83a00000 	movhi	r0, #0
   2e490:	93a00001 	movls	r0, #1
   2e494:	e12fff1e 	bx	lr
   2e498:	e3a00001 	mov	r0, #1
   2e49c:	e12fff1e 	bx	lr

0002e4a0 <rdisdigit>:
   2e4a0:	e2400030 	sub	r0, r0, #48	; 0x30
   2e4a4:	e3500009 	cmp	r0, #9
   2e4a8:	83a00000 	movhi	r0, #0
   2e4ac:	93a00001 	movls	r0, #1
   2e4b0:	e12fff1e 	bx	lr

0002e4b4 <rdisupper>:
   2e4b4:	e2400041 	sub	r0, r0, #65	; 0x41
   2e4b8:	e3500019 	cmp	r0, #25
   2e4bc:	83a00000 	movhi	r0, #0
   2e4c0:	93a00001 	movls	r0, #1
   2e4c4:	e12fff1e 	bx	lr

0002e4c8 <rdislower>:
   2e4c8:	e2400061 	sub	r0, r0, #97	; 0x61
   2e4cc:	e3500019 	cmp	r0, #25
   2e4d0:	83a00000 	movhi	r0, #0
   2e4d4:	93a00001 	movls	r0, #1
   2e4d8:	e12fff1e 	bx	lr

0002e4dc <rdtolower>:
   2e4dc:	e6ef3070 	uxtb	r3, r0
   2e4e0:	e2432041 	sub	r2, r3, #65	; 0x41
   2e4e4:	e3520019 	cmp	r2, #25
   2e4e8:	92830020 	addls	r0, r3, #32
   2e4ec:	96af0070 	sxtbls	r0, r0
   2e4f0:	e12fff1e 	bx	lr

0002e4f4 <rdtoupper>:
   2e4f4:	e6ef3070 	uxtb	r3, r0
   2e4f8:	e2432061 	sub	r2, r3, #97	; 0x61
   2e4fc:	e3520019 	cmp	r2, #25
   2e500:	92430020 	subls	r0, r3, #32
   2e504:	96af0070 	sxtbls	r0, r0
   2e508:	e12fff1e 	bx	lr

0002e50c <rdisalpha>:
   2e50c:	e3c00020 	bic	r0, r0, #32
   2e510:	e2400041 	sub	r0, r0, #65	; 0x41
   2e514:	e3500019 	cmp	r0, #25
   2e518:	83a00000 	movhi	r0, #0
   2e51c:	93a00001 	movls	r0, #1
   2e520:	e12fff1e 	bx	lr

0002e524 <rdstrrev>:
   2e524:	e92d4070 	push	{r4, r5, r6, lr}
   2e528:	e1a04000 	mov	r4, r0
   2e52c:	ebffeea6 	bl	29fcc <strlen>
   2e530:	e2403001 	sub	r3, r0, #1
   2e534:	e3530000 	cmp	r3, #0
   2e538:	d8bd8070 	pople	{r4, r5, r6, pc}
   2e53c:	e3e06001 	mvn	r6, #1
   2e540:	e2441001 	sub	r1, r4, #1
   2e544:	e084c000 	add	ip, r4, r0
   2e548:	e1a02001 	mov	r2, r1
   2e54c:	e5f1e001 	ldrb	lr, [r1, #1]!
   2e550:	e2822002 	add	r2, r2, #2
   2e554:	e0463001 	sub	r3, r6, r1
   2e558:	e0833004 	add	r3, r3, r4
   2e55c:	e57c5001 	ldrb	r5, [ip, #-1]!
   2e560:	e0422004 	sub	r2, r2, r4
   2e564:	e0833000 	add	r3, r3, r0
   2e568:	e1520003 	cmp	r2, r3
   2e56c:	e5c15000 	strb	r5, [r1]
   2e570:	e5cce000 	strb	lr, [ip]
   2e574:	bafffff3 	blt	2e548 <rdstrrev+0x24>
   2e578:	e8bd8070 	pop	{r4, r5, r6, pc}

0002e57c <rditoa>:
   2e57c:	e3520000 	cmp	r2, #0
   2e580:	0a00001c 	beq	2e5f8 <rditoa+0x7c>
   2e584:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e588:	e1a07001 	mov	r7, r1
   2e58c:	e1a05003 	mov	r5, r3
   2e590:	e1a08001 	mov	r8, r1
   2e594:	e2424001 	sub	r4, r2, #1
   2e598:	e2616001 	rsb	r6, r1, #1
   2e59c:	ea000002 	b	2e5ac <rditoa+0x30>
   2e5a0:	e1540003 	cmp	r4, r3
   2e5a4:	e2888001 	add	r8, r8, #1
   2e5a8:	da00000f 	ble	2e5ec <rditoa+0x70>
   2e5ac:	e1a01005 	mov	r1, r5
   2e5b0:	eb0036df 	bl	3c134 <__aeabi_idivmod>
   2e5b4:	e3510009 	cmp	r1, #9
   2e5b8:	e2813030 	add	r3, r1, #48	; 0x30
   2e5bc:	c2811037 	addgt	r1, r1, #55	; 0x37
   2e5c0:	d5c83000 	strble	r3, [r8]
   2e5c4:	c5c81000 	strbgt	r1, [r8]
   2e5c8:	e3500000 	cmp	r0, #0
   2e5cc:	e0863008 	add	r3, r6, r8
   2e5d0:	1afffff2 	bne	2e5a0 <rditoa+0x24>
   2e5d4:	e3a04000 	mov	r4, #0
   2e5d8:	e1a00007 	mov	r0, r7
   2e5dc:	e7c74003 	strb	r4, [r7, r3]
   2e5e0:	ebffffcf 	bl	2e524 <rdstrrev>
   2e5e4:	e1a00004 	mov	r0, r4
   2e5e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e5ec:	1afffff8 	bne	2e5d4 <rditoa+0x58>
   2e5f0:	e3e00000 	mvn	r0, #0
   2e5f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e5f8:	e3e00000 	mvn	r0, #0
   2e5fc:	e12fff1e 	bx	lr

0002e600 <JSMNR_init>:
   2e600:	e3a03000 	mov	r3, #0
   2e604:	e3e02000 	mvn	r2, #0
   2e608:	e5803000 	str	r3, [r0]
   2e60c:	e5802008 	str	r2, [r0, #8]
   2e610:	e5803004 	str	r3, [r0, #4]
   2e614:	e12fff1e 	bx	lr

0002e618 <JSMNR_logLongStr>:
   2e618:	e92d48f0 	push	{r4, r5, r6, r7, fp, lr}
   2e61c:	e3a04000 	mov	r4, #0
   2e620:	e1a05001 	mov	r5, r1
   2e624:	e1a07004 	mov	r7, r4
   2e628:	e28db014 	add	fp, sp, #20
   2e62c:	ea000007 	b	2e650 <JSMNR_logLongStr+0x38>
   2e630:	e1a0600d 	mov	r6, sp
   2e634:	e24dd058 	sub	sp, sp, #88	; 0x58
   2e638:	e1a0000d 	mov	r0, sp
   2e63c:	e3a02051 	mov	r2, #81	; 0x51
   2e640:	ebfffe07 	bl	2de64 <strlcpy>
   2e644:	e5cd7050 	strb	r7, [sp, #80]	; 0x50
   2e648:	e1a0d006 	mov	sp, r6
   2e64c:	e2844050 	add	r4, r4, #80	; 0x50
   2e650:	e1a00005 	mov	r0, r5
   2e654:	ebffee5c 	bl	29fcc <strlen>
   2e658:	e1500004 	cmp	r0, r4
   2e65c:	e0851004 	add	r1, r5, r4
   2e660:	8afffff2 	bhi	2e630 <JSMNR_logLongStr+0x18>
   2e664:	e24bd014 	sub	sp, fp, #20
   2e668:	e8bd88f0 	pop	{r4, r5, r6, r7, fp, pc}

0002e66c <JSMNR_parse>:
   2e66c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e670:	e590e000 	ldr	lr, [r0]
   2e674:	e5905004 	ldr	r5, [r0, #4]
   2e678:	e15e0002 	cmp	lr, r2
   2e67c:	2a000045 	bcs	2e798 <JSMNR_parse+0x12c>
   2e680:	e2839004 	add	r9, r3, #4
   2e684:	e283b008 	add	fp, r3, #8
   2e688:	e191c0de 	ldrsb	ip, [r1, lr]
   2e68c:	e35c0000 	cmp	ip, #0
   2e690:	0a000040 	beq	2e798 <JSMNR_parse+0x12c>
   2e694:	e35c003a 	cmp	ip, #58	; 0x3a
   2e698:	ca000131 	bgt	2eb64 <JSMNR_parse+0x4f8>
   2e69c:	e35c0008 	cmp	ip, #8
   2e6a0:	da00004f 	ble	2e7e4 <JSMNR_parse+0x178>
   2e6a4:	e24cc009 	sub	ip, ip, #9
   2e6a8:	e35c0031 	cmp	ip, #49	; 0x31
   2e6ac:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
   2e6b0:	ea00004b 	b	2e7e4 <JSMNR_parse+0x178>
   2e6b4:	0002e784 	.word	0x0002e784
   2e6b8:	0002e784 	.word	0x0002e784
   2e6bc:	0002e7e4 	.word	0x0002e7e4
   2e6c0:	0002e7e4 	.word	0x0002e7e4
   2e6c4:	0002e784 	.word	0x0002e784
   2e6c8:	0002e7e4 	.word	0x0002e7e4
   2e6cc:	0002e7e4 	.word	0x0002e7e4
   2e6d0:	0002e7e4 	.word	0x0002e7e4
   2e6d4:	0002e7e4 	.word	0x0002e7e4
   2e6d8:	0002e7e4 	.word	0x0002e7e4
   2e6dc:	0002e7e4 	.word	0x0002e7e4
   2e6e0:	0002e7e4 	.word	0x0002e7e4
   2e6e4:	0002e7e4 	.word	0x0002e7e4
   2e6e8:	0002e7e4 	.word	0x0002e7e4
   2e6ec:	0002e7e4 	.word	0x0002e7e4
   2e6f0:	0002e7e4 	.word	0x0002e7e4
   2e6f4:	0002e7e4 	.word	0x0002e7e4
   2e6f8:	0002e7e4 	.word	0x0002e7e4
   2e6fc:	0002e7e4 	.word	0x0002e7e4
   2e700:	0002e7e4 	.word	0x0002e7e4
   2e704:	0002e7e4 	.word	0x0002e7e4
   2e708:	0002e7e4 	.word	0x0002e7e4
   2e70c:	0002e7e4 	.word	0x0002e7e4
   2e710:	0002e784 	.word	0x0002e784
   2e714:	0002e7e4 	.word	0x0002e7e4
   2e718:	0002e950 	.word	0x0002e950
   2e71c:	0002e7e4 	.word	0x0002e7e4
   2e720:	0002e7e4 	.word	0x0002e7e4
   2e724:	0002e7e4 	.word	0x0002e7e4
   2e728:	0002e7e4 	.word	0x0002e7e4
   2e72c:	0002e7e4 	.word	0x0002e7e4
   2e730:	0002e7e4 	.word	0x0002e7e4
   2e734:	0002e7e4 	.word	0x0002e7e4
   2e738:	0002e7e4 	.word	0x0002e7e4
   2e73c:	0002e7e4 	.word	0x0002e7e4
   2e740:	0002e8d0 	.word	0x0002e8d0
   2e744:	0002e7e4 	.word	0x0002e7e4
   2e748:	0002e7e4 	.word	0x0002e7e4
   2e74c:	0002e7e4 	.word	0x0002e7e4
   2e750:	0002e7e4 	.word	0x0002e7e4
   2e754:	0002e7e4 	.word	0x0002e7e4
   2e758:	0002e7e4 	.word	0x0002e7e4
   2e75c:	0002e7e4 	.word	0x0002e7e4
   2e760:	0002e7e4 	.word	0x0002e7e4
   2e764:	0002e7e4 	.word	0x0002e7e4
   2e768:	0002e7e4 	.word	0x0002e7e4
   2e76c:	0002e7e4 	.word	0x0002e7e4
   2e770:	0002e7e4 	.word	0x0002e7e4
   2e774:	0002e7e4 	.word	0x0002e7e4
   2e778:	0002e8b8 	.word	0x0002e8b8
   2e77c:	e37c0001 	cmn	ip, #1
   2e780:	0a00010d 	beq	2ebbc <JSMNR_parse+0x550>
   2e784:	e590e000 	ldr	lr, [r0]
   2e788:	e28ee001 	add	lr, lr, #1
   2e78c:	e152000e 	cmp	r2, lr
   2e790:	e580e000 	str	lr, [r0]
   2e794:	8affffbb 	bhi	2e688 <JSMNR_parse+0x1c>
   2e798:	e3530000 	cmp	r3, #0
   2e79c:	0a0000aa 	beq	2ea4c <JSMNR_parse+0x3e0>
   2e7a0:	e5902004 	ldr	r2, [r0, #4]
   2e7a4:	e2522001 	subs	r2, r2, #1
   2e7a8:	4a0000a7 	bmi	2ea4c <JSMNR_parse+0x3e0>
   2e7ac:	e2830004 	add	r0, r3, #4
   2e7b0:	e2833008 	add	r3, r3, #8
   2e7b4:	ea000001 	b	2e7c0 <JSMNR_parse+0x154>
   2e7b8:	e2522001 	subs	r2, r2, #1
   2e7bc:	3a0000a2 	bcc	2ea4c <JSMNR_parse+0x3e0>
   2e7c0:	e7901202 	ldr	r1, [r0, r2, lsl #4]
   2e7c4:	e3710001 	cmn	r1, #1
   2e7c8:	0afffffa 	beq	2e7b8 <JSMNR_parse+0x14c>
   2e7cc:	e7931202 	ldr	r1, [r3, r2, lsl #4]
   2e7d0:	e3710001 	cmn	r1, #1
   2e7d4:	1afffff7 	bne	2e7b8 <JSMNR_parse+0x14c>
   2e7d8:	e3e05002 	mvn	r5, #2
   2e7dc:	e1a00005 	mov	r0, r5
   2e7e0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e7e4:	e5904000 	ldr	r4, [r0]
   2e7e8:	e1540002 	cmp	r4, r2
   2e7ec:	2a000016 	bcs	2e84c <JSMNR_parse+0x1e0>
   2e7f0:	e2446001 	sub	r6, r4, #1
   2e7f4:	e0816006 	add	r6, r1, r6
   2e7f8:	ea000009 	b	2e824 <JSMNR_parse+0x1b8>
   2e7fc:	e35c0008 	cmp	ip, #8
   2e800:	ca0000af 	bgt	2eac4 <JSMNR_parse+0x458>
   2e804:	e24cc020 	sub	ip, ip, #32
   2e808:	e6efc07c 	uxtb	ip, ip
   2e80c:	e35c005e 	cmp	ip, #94	; 0x5e
   2e810:	e2844001 	add	r4, r4, #1
   2e814:	8a00008a 	bhi	2ea44 <JSMNR_parse+0x3d8>
   2e818:	e1520004 	cmp	r2, r4
   2e81c:	e5804000 	str	r4, [r0]
   2e820:	0a000009 	beq	2e84c <JSMNR_parse+0x1e0>
   2e824:	e1f6c0d1 	ldrsb	ip, [r6, #1]!
   2e828:	e35c0000 	cmp	ip, #0
   2e82c:	e3cc7020 	bic	r7, ip, #32
   2e830:	0a000005 	beq	2e84c <JSMNR_parse+0x1e0>
   2e834:	e35c002c 	cmp	ip, #44	; 0x2c
   2e838:	daffffef 	ble	2e7fc <JSMNR_parse+0x190>
   2e83c:	e357005d 	cmp	r7, #93	; 0x5d
   2e840:	0a000001 	beq	2e84c <JSMNR_parse+0x1e0>
   2e844:	e35c003a 	cmp	ip, #58	; 0x3a
   2e848:	1affffed 	bne	2e804 <JSMNR_parse+0x198>
   2e84c:	e3530000 	cmp	r3, #0
   2e850:	01a0e004 	moveq	lr, r4
   2e854:	02855001 	addeq	r5, r5, #1
   2e858:	0affffcb 	beq	2e78c <JSMNR_parse+0x120>
   2e85c:	e590c004 	ldr	ip, [r0, #4]
   2e860:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   2e864:	e156000c 	cmp	r6, ip
   2e868:	9a000129 	bls	2ed14 <JSMNR_parse+0x6a8>
   2e86c:	e28c7001 	add	r7, ip, #1
   2e870:	e5807004 	str	r7, [r0, #4]
   2e874:	e3a07000 	mov	r7, #0
   2e878:	e083620c 	add	r6, r3, ip, lsl #4
   2e87c:	e586700c 	str	r7, [r6, #12]
   2e880:	e3a07004 	mov	r7, #4
   2e884:	e7c3720c 	strb	r7, [r3, ip, lsl #4]
   2e888:	e590c008 	ldr	ip, [r0, #8]
   2e88c:	e586e004 	str	lr, [r6, #4]
   2e890:	e37c0001 	cmn	ip, #1
   2e894:	1083c20c 	addne	ip, r3, ip, lsl #4
   2e898:	e5864008 	str	r4, [r6, #8]
   2e89c:	159c600c 	ldrne	r6, [ip, #12]
   2e8a0:	11a0e004 	movne	lr, r4
   2e8a4:	12864001 	addne	r4, r6, #1
   2e8a8:	01a0e004 	moveq	lr, r4
   2e8ac:	e2855001 	add	r5, r5, #1
   2e8b0:	158c400c 	strne	r4, [ip, #12]
   2e8b4:	eaffffb4 	b	2e78c <JSMNR_parse+0x120>
   2e8b8:	e590c004 	ldr	ip, [r0, #4]
   2e8bc:	e590e000 	ldr	lr, [r0]
   2e8c0:	e24cc001 	sub	ip, ip, #1
   2e8c4:	e580c008 	str	ip, [r0, #8]
   2e8c8:	e28ee001 	add	lr, lr, #1
   2e8cc:	eaffffae 	b	2e78c <JSMNR_parse+0x120>
   2e8d0:	e3530000 	cmp	r3, #0
   2e8d4:	0affffaa 	beq	2e784 <JSMNR_parse+0x118>
   2e8d8:	e590c008 	ldr	ip, [r0, #8]
   2e8dc:	e37c0001 	cmn	ip, #1
   2e8e0:	0affffa7 	beq	2e784 <JSMNR_parse+0x118>
   2e8e4:	e7d3c20c 	ldrb	ip, [r3, ip, lsl #4]
   2e8e8:	e24cc001 	sub	ip, ip, #1
   2e8ec:	e35c0001 	cmp	ip, #1
   2e8f0:	9affffa3 	bls	2e784 <JSMNR_parse+0x118>
   2e8f4:	e590e004 	ldr	lr, [r0, #4]
   2e8f8:	e25e4001 	subs	r4, lr, #1
   2e8fc:	5083e20e 	addpl	lr, r3, lr, lsl #4
   2e900:	5a000004 	bpl	2e918 <JSMNR_parse+0x2ac>
   2e904:	eaffff9e 	b	2e784 <JSMNR_parse+0x118>
   2e908:	e2444001 	sub	r4, r4, #1
   2e90c:	e3740001 	cmn	r4, #1
   2e910:	e24ee010 	sub	lr, lr, #16
   2e914:	0affff9a 	beq	2e784 <JSMNR_parse+0x118>
   2e918:	e55ec010 	ldrb	ip, [lr, #-16]
   2e91c:	e24cc001 	sub	ip, ip, #1
   2e920:	e35c0001 	cmp	ip, #1
   2e924:	8afffff7 	bhi	2e908 <JSMNR_parse+0x29c>
   2e928:	e51ec00c 	ldr	ip, [lr, #-12]
   2e92c:	e37c0001 	cmn	ip, #1
   2e930:	0afffff4 	beq	2e908 <JSMNR_parse+0x29c>
   2e934:	e51ec008 	ldr	ip, [lr, #-8]
   2e938:	e37c0001 	cmn	ip, #1
   2e93c:	1afffff1 	bne	2e908 <JSMNR_parse+0x29c>
   2e940:	e590e000 	ldr	lr, [r0]
   2e944:	e5804008 	str	r4, [r0, #8]
   2e948:	e28ee001 	add	lr, lr, #1
   2e94c:	eaffff8e 	b	2e78c <JSMNR_parse+0x120>
   2e950:	e28ea001 	add	sl, lr, #1
   2e954:	e152000a 	cmp	r2, sl
   2e958:	e1a0c00a 	mov	ip, sl
   2e95c:	e580a000 	str	sl, [r0]
   2e960:	8a000005 	bhi	2e97c <JSMNR_parse+0x310>
   2e964:	ea000050 	b	2eaac <JSMNR_parse+0x440>
   2e968:	e590c000 	ldr	ip, [r0]
   2e96c:	e28cc001 	add	ip, ip, #1
   2e970:	e152000c 	cmp	r2, ip
   2e974:	e580c000 	str	ip, [r0]
   2e978:	9a00004b 	bls	2eaac <JSMNR_parse+0x440>
   2e97c:	e19140dc 	ldrsb	r4, [r1, ip]
   2e980:	e3540000 	cmp	r4, #0
   2e984:	0a000048 	beq	2eaac <JSMNR_parse+0x440>
   2e988:	e3540022 	cmp	r4, #34	; 0x22
   2e98c:	0a0000c3 	beq	2eca0 <JSMNR_parse+0x634>
   2e990:	e354005c 	cmp	r4, #92	; 0x5c
   2e994:	1afffff3 	bne	2e968 <JSMNR_parse+0x2fc>
   2e998:	e28c4001 	add	r4, ip, #1
   2e99c:	e1520004 	cmp	r2, r4
   2e9a0:	9afffff0 	bls	2e968 <JSMNR_parse+0x2fc>
   2e9a4:	e5804000 	str	r4, [r0]
   2e9a8:	e19140d4 	ldrsb	r4, [r1, r4]
   2e9ac:	e3540075 	cmp	r4, #117	; 0x75
   2e9b0:	ca000023 	bgt	2ea44 <JSMNR_parse+0x3d8>
   2e9b4:	e354005b 	cmp	r4, #91	; 0x5b
   2e9b8:	da00001d 	ble	2ea34 <JSMNR_parse+0x3c8>
   2e9bc:	e244405c 	sub	r4, r4, #92	; 0x5c
   2e9c0:	e3540019 	cmp	r4, #25
   2e9c4:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
   2e9c8:	ea00001d 	b	2ea44 <JSMNR_parse+0x3d8>
   2e9cc:	0002eabc 	.word	0x0002eabc
   2e9d0:	0002ea44 	.word	0x0002ea44
   2e9d4:	0002ea44 	.word	0x0002ea44
   2e9d8:	0002ea44 	.word	0x0002ea44
   2e9dc:	0002ea44 	.word	0x0002ea44
   2e9e0:	0002ea44 	.word	0x0002ea44
   2e9e4:	0002eabc 	.word	0x0002eabc
   2e9e8:	0002ea44 	.word	0x0002ea44
   2e9ec:	0002ea44 	.word	0x0002ea44
   2e9f0:	0002ea44 	.word	0x0002ea44
   2e9f4:	0002eabc 	.word	0x0002eabc
   2e9f8:	0002ea44 	.word	0x0002ea44
   2e9fc:	0002ea44 	.word	0x0002ea44
   2ea00:	0002ea44 	.word	0x0002ea44
   2ea04:	0002ea44 	.word	0x0002ea44
   2ea08:	0002ea44 	.word	0x0002ea44
   2ea0c:	0002ea44 	.word	0x0002ea44
   2ea10:	0002ea44 	.word	0x0002ea44
   2ea14:	0002eabc 	.word	0x0002eabc
   2ea18:	0002ea44 	.word	0x0002ea44
   2ea1c:	0002ea44 	.word	0x0002ea44
   2ea20:	0002ea44 	.word	0x0002ea44
   2ea24:	0002eabc 	.word	0x0002eabc
   2ea28:	0002ea44 	.word	0x0002ea44
   2ea2c:	0002eabc 	.word	0x0002eabc
   2ea30:	0002ea54 	.word	0x0002ea54
   2ea34:	e3540022 	cmp	r4, #34	; 0x22
   2ea38:	0a00001f 	beq	2eabc <JSMNR_parse+0x450>
   2ea3c:	e354002f 	cmp	r4, #47	; 0x2f
   2ea40:	0a00001d 	beq	2eabc <JSMNR_parse+0x450>
   2ea44:	e3e05001 	mvn	r5, #1
   2ea48:	e580e000 	str	lr, [r0]
   2ea4c:	e1a00005 	mov	r0, r5
   2ea50:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ea54:	e28c4002 	add	r4, ip, #2
   2ea58:	e5804000 	str	r4, [r0]
   2ea5c:	e28cc006 	add	ip, ip, #6
   2ea60:	e1520004 	cmp	r2, r4
   2ea64:	0a0000b0 	beq	2ed2c <JSMNR_parse+0x6c0>
   2ea68:	e19160d4 	ldrsb	r6, [r1, r4]
   2ea6c:	e20680df 	and	r8, r6, #223	; 0xdf
   2ea70:	e2467030 	sub	r7, r6, #48	; 0x30
   2ea74:	e3560000 	cmp	r6, #0
   2ea78:	e2488041 	sub	r8, r8, #65	; 0x41
   2ea7c:	e20770ff 	and	r7, r7, #255	; 0xff
   2ea80:	0a0000ab 	beq	2ed34 <JSMNR_parse+0x6c8>
   2ea84:	e3580005 	cmp	r8, #5
   2ea88:	83570009 	cmphi	r7, #9
   2ea8c:	e2844001 	add	r4, r4, #1
   2ea90:	8affffeb 	bhi	2ea44 <JSMNR_parse+0x3d8>
   2ea94:	e154000c 	cmp	r4, ip
   2ea98:	e5804000 	str	r4, [r0]
   2ea9c:	1affffef 	bne	2ea60 <JSMNR_parse+0x3f4>
   2eaa0:	e152000c 	cmp	r2, ip
   2eaa4:	e580c000 	str	ip, [r0]
   2eaa8:	8affffb3 	bhi	2e97c <JSMNR_parse+0x310>
   2eaac:	e3e05002 	mvn	r5, #2
   2eab0:	e580e000 	str	lr, [r0]
   2eab4:	e1a00005 	mov	r0, r5
   2eab8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eabc:	e28cc002 	add	ip, ip, #2
   2eac0:	eaffffaa 	b	2e970 <JSMNR_parse+0x304>
   2eac4:	e24c7009 	sub	r7, ip, #9
   2eac8:	e3570023 	cmp	r7, #35	; 0x23
   2eacc:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
   2ead0:	eaffff4b 	b	2e804 <JSMNR_parse+0x198>
   2ead4:	0002e84c 	.word	0x0002e84c
   2ead8:	0002e84c 	.word	0x0002e84c
   2eadc:	0002e804 	.word	0x0002e804
   2eae0:	0002e804 	.word	0x0002e804
   2eae4:	0002e84c 	.word	0x0002e84c
   2eae8:	0002e804 	.word	0x0002e804
   2eaec:	0002e804 	.word	0x0002e804
   2eaf0:	0002e804 	.word	0x0002e804
   2eaf4:	0002e804 	.word	0x0002e804
   2eaf8:	0002e804 	.word	0x0002e804
   2eafc:	0002e804 	.word	0x0002e804
   2eb00:	0002e804 	.word	0x0002e804
   2eb04:	0002e804 	.word	0x0002e804
   2eb08:	0002e804 	.word	0x0002e804
   2eb0c:	0002e804 	.word	0x0002e804
   2eb10:	0002e804 	.word	0x0002e804
   2eb14:	0002e804 	.word	0x0002e804
   2eb18:	0002e804 	.word	0x0002e804
   2eb1c:	0002e804 	.word	0x0002e804
   2eb20:	0002e804 	.word	0x0002e804
   2eb24:	0002e804 	.word	0x0002e804
   2eb28:	0002e804 	.word	0x0002e804
   2eb2c:	0002e804 	.word	0x0002e804
   2eb30:	0002e84c 	.word	0x0002e84c
   2eb34:	0002e804 	.word	0x0002e804
   2eb38:	0002e804 	.word	0x0002e804
   2eb3c:	0002e804 	.word	0x0002e804
   2eb40:	0002e804 	.word	0x0002e804
   2eb44:	0002e804 	.word	0x0002e804
   2eb48:	0002e804 	.word	0x0002e804
   2eb4c:	0002e804 	.word	0x0002e804
   2eb50:	0002e804 	.word	0x0002e804
   2eb54:	0002e804 	.word	0x0002e804
   2eb58:	0002e804 	.word	0x0002e804
   2eb5c:	0002e804 	.word	0x0002e804
   2eb60:	0002e84c 	.word	0x0002e84c
   2eb64:	e35c007b 	cmp	ip, #123	; 0x7b
   2eb68:	0a000020 	beq	2ebf0 <JSMNR_parse+0x584>
   2eb6c:	da000017 	ble	2ebd0 <JSMNR_parse+0x564>
   2eb70:	e35c007d 	cmp	ip, #125	; 0x7d
   2eb74:	1affff1a 	bne	2e7e4 <JSMNR_parse+0x178>
   2eb78:	e3530000 	cmp	r3, #0
   2eb7c:	13a07001 	movne	r7, #1
   2eb80:	0afffeff 	beq	2e784 <JSMNR_parse+0x118>
   2eb84:	e590c004 	ldr	ip, [r0, #4]
   2eb88:	e25cc001 	subs	ip, ip, #1
   2eb8c:	4afffefa 	bmi	2e77c <JSMNR_parse+0x110>
   2eb90:	e083420c 	add	r4, r3, ip, lsl #4
   2eb94:	e5946004 	ldr	r6, [r4, #4]
   2eb98:	e3760001 	cmn	r6, #1
   2eb9c:	0a000002 	beq	2ebac <JSMNR_parse+0x540>
   2eba0:	e5946008 	ldr	r6, [r4, #8]
   2eba4:	e3760001 	cmn	r6, #1
   2eba8:	0a00002d 	beq	2ec64 <JSMNR_parse+0x5f8>
   2ebac:	e24cc001 	sub	ip, ip, #1
   2ebb0:	e37c0001 	cmn	ip, #1
   2ebb4:	e2444010 	sub	r4, r4, #16
   2ebb8:	1afffff5 	bne	2eb94 <JSMNR_parse+0x528>
   2ebbc:	e3a02001 	mov	r2, #1
   2ebc0:	e59f018c 	ldr	r0, [pc, #396]	; 2ed54 <JSMNR_parse+0x6e8>
   2ebc4:	ebfffe93 	bl	2e618 <JSMNR_logLongStr>
   2ebc8:	e3e05001 	mvn	r5, #1
   2ebcc:	eaffff9e 	b	2ea4c <JSMNR_parse+0x3e0>
   2ebd0:	e35c005b 	cmp	ip, #91	; 0x5b
   2ebd4:	0a000005 	beq	2ebf0 <JSMNR_parse+0x584>
   2ebd8:	e35c005d 	cmp	ip, #93	; 0x5d
   2ebdc:	1affff00 	bne	2e7e4 <JSMNR_parse+0x178>
   2ebe0:	e3530000 	cmp	r3, #0
   2ebe4:	13a07002 	movne	r7, #2
   2ebe8:	0afffee5 	beq	2e784 <JSMNR_parse+0x118>
   2ebec:	eaffffe4 	b	2eb84 <JSMNR_parse+0x518>
   2ebf0:	e3530000 	cmp	r3, #0
   2ebf4:	e2855001 	add	r5, r5, #1
   2ebf8:	0afffee1 	beq	2e784 <JSMNR_parse+0x118>
   2ebfc:	e5904004 	ldr	r4, [r0, #4]
   2ec00:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   2ec04:	e1560004 	cmp	r6, r4
   2ec08:	9a000045 	bls	2ed24 <JSMNR_parse+0x6b8>
   2ec0c:	e2848001 	add	r8, r4, #1
   2ec10:	e5808004 	str	r8, [r0, #4]
   2ec14:	e3e08000 	mvn	r8, #0
   2ec18:	e0837204 	add	r7, r3, r4, lsl #4
   2ec1c:	e5906008 	ldr	r6, [r0, #8]
   2ec20:	e5878008 	str	r8, [r7, #8]
   2ec24:	e3a08000 	mov	r8, #0
   2ec28:	e3760001 	cmn	r6, #1
   2ec2c:	e587800c 	str	r8, [r7, #12]
   2ec30:	10836206 	addne	r6, r3, r6, lsl #4
   2ec34:	1596800c 	ldrne	r8, [r6, #12]
   2ec38:	12888001 	addne	r8, r8, #1
   2ec3c:	1586800c 	strne	r8, [r6, #12]
   2ec40:	e35c007b 	cmp	ip, #123	; 0x7b
   2ec44:	03a0c001 	moveq	ip, #1
   2ec48:	13a0c002 	movne	ip, #2
   2ec4c:	e7c3c204 	strb	ip, [r3, r4, lsl #4]
   2ec50:	e590c000 	ldr	ip, [r0]
   2ec54:	e587e004 	str	lr, [r7, #4]
   2ec58:	e5804008 	str	r4, [r0, #8]
   2ec5c:	e28ce001 	add	lr, ip, #1
   2ec60:	eafffec9 	b	2e78c <JSMNR_parse+0x120>
   2ec64:	e5d48000 	ldrb	r8, [r4]
   2ec68:	e1580007 	cmp	r8, r7
   2ec6c:	1a000036 	bne	2ed4c <JSMNR_parse+0x6e0>
   2ec70:	e28ee001 	add	lr, lr, #1
   2ec74:	e5806008 	str	r6, [r0, #8]
   2ec78:	e584e008 	str	lr, [r4, #8]
   2ec7c:	e799e20c 	ldr	lr, [r9, ip, lsl #4]
   2ec80:	e37e0001 	cmn	lr, #1
   2ec84:	0a000002 	beq	2ec94 <JSMNR_parse+0x628>
   2ec88:	e79be20c 	ldr	lr, [fp, ip, lsl #4]
   2ec8c:	e37e0001 	cmn	lr, #1
   2ec90:	0a00001b 	beq	2ed04 <JSMNR_parse+0x698>
   2ec94:	e25cc001 	subs	ip, ip, #1
   2ec98:	2afffff7 	bcs	2ec7c <JSMNR_parse+0x610>
   2ec9c:	eafffeb8 	b	2e784 <JSMNR_parse+0x118>
   2eca0:	e3530000 	cmp	r3, #0
   2eca4:	0a000024 	beq	2ed3c <JSMNR_parse+0x6d0>
   2eca8:	e5904004 	ldr	r4, [r0, #4]
   2ecac:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   2ecb0:	e1560004 	cmp	r6, r4
   2ecb4:	9a000016 	bls	2ed14 <JSMNR_parse+0x6a8>
   2ecb8:	e284e001 	add	lr, r4, #1
   2ecbc:	e580e004 	str	lr, [r0, #4]
   2ecc0:	e3a0e000 	mov	lr, #0
   2ecc4:	e0836204 	add	r6, r3, r4, lsl #4
   2ecc8:	e586e00c 	str	lr, [r6, #12]
   2eccc:	e3a0e003 	mov	lr, #3
   2ecd0:	e7c3e204 	strb	lr, [r3, r4, lsl #4]
   2ecd4:	e590e008 	ldr	lr, [r0, #8]
   2ecd8:	e2855001 	add	r5, r5, #1
   2ecdc:	e37e0001 	cmn	lr, #1
   2ece0:	e9861400 	stmib	r6, {sl, ip}
   2ece4:	0afffea6 	beq	2e784 <JSMNR_parse+0x118>
   2ece8:	e083c20e 	add	ip, r3, lr, lsl #4
   2ecec:	e59c400c 	ldr	r4, [ip, #12]
   2ecf0:	e590e000 	ldr	lr, [r0]
   2ecf4:	e2844001 	add	r4, r4, #1
   2ecf8:	e58c400c 	str	r4, [ip, #12]
   2ecfc:	e28ee001 	add	lr, lr, #1
   2ed00:	eafffea1 	b	2e78c <JSMNR_parse+0x120>
   2ed04:	e590e000 	ldr	lr, [r0]
   2ed08:	e580c008 	str	ip, [r0, #8]
   2ed0c:	e28ee001 	add	lr, lr, #1
   2ed10:	eafffe9d 	b	2e78c <JSMNR_parse+0x120>
   2ed14:	e3e05000 	mvn	r5, #0
   2ed18:	e580e000 	str	lr, [r0]
   2ed1c:	e1a00005 	mov	r0, r5
   2ed20:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ed24:	e3e05000 	mvn	r5, #0
   2ed28:	eaffff47 	b	2ea4c <JSMNR_parse+0x3e0>
   2ed2c:	e1a0c002 	mov	ip, r2
   2ed30:	eaffff0e 	b	2e970 <JSMNR_parse+0x304>
   2ed34:	e1a0c004 	mov	ip, r4
   2ed38:	eaffff0c 	b	2e970 <JSMNR_parse+0x304>
   2ed3c:	e590e000 	ldr	lr, [r0]
   2ed40:	e2855001 	add	r5, r5, #1
   2ed44:	e28ee001 	add	lr, lr, #1
   2ed48:	eafffe8f 	b	2e78c <JSMNR_parse+0x120>
   2ed4c:	e3e05001 	mvn	r5, #1
   2ed50:	eaffff3d 	b	2ea4c <JSMNR_parse+0x3e0>
   2ed54:	000444a0 	.word	0x000444a0

0002ed58 <LogSetOutFn>:
   2ed58:	e59f3004 	ldr	r3, [pc, #4]	; 2ed64 <LogSetOutFn+0xc>
   2ed5c:	e5830000 	str	r0, [r3]
   2ed60:	e12fff1e 	bx	lr
   2ed64:	0004c60c 	.word	0x0004c60c

0002ed68 <LogSeverityCircle>:
   2ed68:	e3500003 	cmp	r0, #3
   2ed6c:	83a00004 	movhi	r0, #4
   2ed70:	e12fff1e 	bx	lr

0002ed74 <LogSeverityStr>:
   2ed74:	e3500003 	cmp	r0, #3
   2ed78:	959f3008 	ldrls	r3, [pc, #8]	; 2ed88 <LogSeverityStr+0x14>
   2ed7c:	97930100 	ldrls	r0, [r3, r0, lsl #2]
   2ed80:	859f0004 	ldrhi	r0, [pc, #4]	; 2ed8c <LogSeverityStr+0x18>
   2ed84:	e12fff1e 	bx	lr
   2ed88:	000444c0 	.word	0x000444c0
   2ed8c:	000444b4 	.word	0x000444b4

0002ed90 <LogWrite>:
   2ed90:	e92d000c 	push	{r2, r3}
   2ed94:	e92d4070 	push	{r4, r5, r6, lr}
   2ed98:	e24dd018 	sub	sp, sp, #24
   2ed9c:	e28d302c 	add	r3, sp, #44	; 0x2c
   2eda0:	e1a06000 	mov	r6, r0
   2eda4:	e28d0008 	add	r0, sp, #8
   2eda8:	e58d3004 	str	r3, [sp, #4]
   2edac:	e1a04001 	mov	r4, r1
   2edb0:	ebffe337 	bl	27a94 <CString::CString()>
   2edb4:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   2edb8:	e59d2004 	ldr	r2, [sp, #4]
   2edbc:	e28d0008 	add	r0, sp, #8
   2edc0:	ebffe556 	bl	28320 <CString::FormatV(char const*, std::__va_list)>
   2edc4:	e59f3080 	ldr	r3, [pc, #128]	; 2ee4c <LogWrite+0xbc>
   2edc8:	e5935000 	ldr	r5, [r3]
   2edcc:	e3550000 	cmp	r5, #0
   2edd0:	0a00000f 	beq	2ee14 <LogWrite+0x84>
   2edd4:	e3540003 	cmp	r4, #3
   2edd8:	959f3070 	ldrls	r3, [pc, #112]	; 2ee50 <LogWrite+0xc0>
   2eddc:	e28d0008 	add	r0, sp, #8
   2ede0:	97934104 	ldrls	r4, [r3, r4, lsl #2]
   2ede4:	859f4068 	ldrhi	r4, [pc, #104]	; 2ee54 <LogWrite+0xc4>
   2ede8:	ebffe341 	bl	27af4 <CString::operator char const*() const>
   2edec:	e1a01004 	mov	r1, r4
   2edf0:	e1a02000 	mov	r2, r0
   2edf4:	e1a00006 	mov	r0, r6
   2edf8:	e12fff35 	blx	r5
   2edfc:	e28d0008 	add	r0, sp, #8
   2ee00:	ebffe2f0 	bl	279c8 <CString::~CString()>
   2ee04:	e28dd018 	add	sp, sp, #24
   2ee08:	e8bd4070 	pop	{r4, r5, r6, lr}
   2ee0c:	e28dd008 	add	sp, sp, #8
   2ee10:	e12fff1e 	bx	lr
   2ee14:	ebffdf2e 	bl	26ad4 <CLogger::Get()>
   2ee18:	e3540004 	cmp	r4, #4
   2ee1c:	e1a05000 	mov	r5, r0
   2ee20:	e28d0008 	add	r0, sp, #8
   2ee24:	23a04004 	movcs	r4, #4
   2ee28:	ebffe331 	bl	27af4 <CString::operator char const*() const>
   2ee2c:	e1a01006 	mov	r1, r6
   2ee30:	e1a03000 	mov	r3, r0
   2ee34:	e6ef2074 	uxtb	r2, r4
   2ee38:	e1a00005 	mov	r0, r5
   2ee3c:	ebffde66 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2ee40:	e28d0008 	add	r0, sp, #8
   2ee44:	ebffe2df 	bl	279c8 <CString::~CString()>
   2ee48:	eaffffed 	b	2ee04 <LogWrite+0x74>
   2ee4c:	0004c60c 	.word	0x0004c60c
   2ee50:	000444c0 	.word	0x000444c0
   2ee54:	000444b4 	.word	0x000444b4

0002ee58 <_GLOBAL__sub_I___debugHelper>:
   2ee58:	e3a01000 	mov	r1, #0
   2ee5c:	e59f3018 	ldr	r3, [pc, #24]	; 2ee7c <_GLOBAL__sub_I___debugHelper+0x24>
   2ee60:	e283203b 	add	r2, r3, #59	; 0x3b
   2ee64:	e283003c 	add	r0, r3, #60	; 0x3c
   2ee68:	e4831004 	str	r1, [r3], #4
   2ee6c:	e1530000 	cmp	r3, r0
   2ee70:	e5e21001 	strb	r1, [r2, #1]!
   2ee74:	1afffffb 	bne	2ee68 <_GLOBAL__sub_I___debugHelper+0x10>
   2ee78:	e12fff1e 	bx	lr
   2ee7c:	0004c610 	.word	0x0004c610

0002ee80 <MiniHDLC::~MiniHDLC()>:
   2ee80:	e12fff1e 	bx	lr

0002ee84 <MiniHDLC::~MiniHDLC()>:
   2ee84:	e92d4010 	push	{r4, lr}
   2ee88:	e1a04000 	mov	r4, r0
   2ee8c:	e59f1008 	ldr	r1, [pc, #8]	; 2ee9c <MiniHDLC::~MiniHDLC()+0x18>
   2ee90:	ebfff03c 	bl	2af88 <operator delete(void*, unsigned int)>
   2ee94:	e1a00004 	mov	r0, r4
   2ee98:	e8bd8010 	pop	{r4, pc}
   2ee9c:	00004e6c 	.word	0x00004e6c

0002eea0 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]>:
   2eea0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eea4:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
   2eea8:	e1a07000 	mov	r7, r0
   2eeac:	e3580000 	cmp	r8, #0
   2eeb0:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   2eeb4:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
   2eeb8:	08bd8ff0 	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eebc:	e280c002 	add	ip, r0, #2
   2eec0:	e152000c 	cmp	r2, ip
   2eec4:	98bd8ff0 	popls	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eec8:	e1a06009 	mov	r6, r9
   2eecc:	e59fa068 	ldr	sl, [pc, #104]	; 2ef3c <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]+0x9c>
   2eed0:	ea00000b 	b	2ef04 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]+0x64>
   2eed4:	e5d75004 	ldrb	r5, [r7, #4]
   2eed8:	e155000c 	cmp	r5, ip
   2eedc:	11a0e000 	movne	lr, r0
   2eee0:	0a000012 	beq	2ef30 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]+0x90>
   2eee4:	e0490006 	sub	r0, r9, r6
   2eee8:	e1700008 	cmn	r0, r8
   2eeec:	e7c1c00e 	strb	ip, [r1, lr]
   2eef0:	e28e4003 	add	r4, lr, #3
   2eef4:	e28e0001 	add	r0, lr, #1
   2eef8:	08bd8ff0 	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eefc:	e1540002 	cmp	r4, r2
   2ef00:	28bd8ff0 	popcs	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ef04:	e4d6c001 	ldrb	ip, [r6], #1
   2ef08:	e1d3b0b0 	ldrh	fp, [r3]
   2ef0c:	e280e001 	add	lr, r0, #1
   2ef10:	e02c542b 	eor	r5, ip, fp, lsr #8
   2ef14:	e1a05085 	lsl	r5, r5, #1
   2ef18:	e19a40b5 	ldrh	r4, [sl, r5]
   2ef1c:	e024440b 	eor	r4, r4, fp, lsl #8
   2ef20:	e1c340b0 	strh	r4, [r3]
   2ef24:	e5d74005 	ldrb	r4, [r7, #5]
   2ef28:	e15c0004 	cmp	ip, r4
   2ef2c:	1affffe8 	bne	2eed4 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]+0x34>
   2ef30:	e7c14000 	strb	r4, [r1, r0]
   2ef34:	e22cc020 	eor	ip, ip, #32
   2ef38:	eaffffe9 	b	2eee4 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]+0x44>
   2ef3c:	0004451c 	.word	0x0004451c

0002ef40 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]>:
   2ef40:	e1d330b0 	ldrh	r3, [r3]
   2ef44:	e5d0c007 	ldrb	ip, [r0, #7]
   2ef48:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2ef4c:	e35c0000 	cmp	ip, #0
   2ef50:	e1a05423 	lsr	r5, r3, #8
   2ef54:	020340ff 	andeq	r4, r3, #255	; 0xff
   2ef58:	11a04005 	movne	r4, r5
   2ef5c:	1203c0ff 	andne	ip, r3, #255	; 0xff
   2ef60:	01a0c005 	moveq	ip, r5
   2ef64:	e59d3014 	ldr	r3, [sp, #20]
   2ef68:	e2836002 	add	r6, r3, #2
   2ef6c:	e1560002 	cmp	r6, r2
   2ef70:	2a000021 	bcs	2effc <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0xbc>
   2ef74:	e5d02005 	ldrb	r2, [r0, #5]
   2ef78:	e1a0e004 	mov	lr, r4
   2ef7c:	e1520004 	cmp	r2, r4
   2ef80:	e1a0500c 	mov	r5, ip
   2ef84:	0a00000f 	beq	2efc8 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0x88>
   2ef88:	e5d07004 	ldrb	r7, [r0, #4]
   2ef8c:	e1570004 	cmp	r7, r4
   2ef90:	12836001 	addne	r6, r3, #1
   2ef94:	0a00000b 	beq	2efc8 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0x88>
   2ef98:	e7c1e003 	strb	lr, [r1, r3]
   2ef9c:	e5d0e005 	ldrb	lr, [r0, #5]
   2efa0:	e15e000c 	cmp	lr, ip
   2efa4:	0a00000f 	beq	2efe8 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0xa8>
   2efa8:	e5d02004 	ldrb	r2, [r0, #4]
   2efac:	e152000c 	cmp	r2, ip
   2efb0:	0a00000c 	beq	2efe8 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0xa8>
   2efb4:	e7e15006 	strb	r5, [r1, r6]!
   2efb8:	e5d03004 	ldrb	r3, [r0, #4]
   2efbc:	e2860002 	add	r0, r6, #2
   2efc0:	e5c13001 	strb	r3, [r1, #1]
   2efc4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2efc8:	e224e020 	eor	lr, r4, #32
   2efcc:	e7c12003 	strb	r2, [r1, r3]
   2efd0:	e6efe07e 	uxtb	lr, lr
   2efd4:	e2833001 	add	r3, r3, #1
   2efd8:	e7c1e003 	strb	lr, [r1, r3]
   2efdc:	e5d0e005 	ldrb	lr, [r0, #5]
   2efe0:	e15e000c 	cmp	lr, ip
   2efe4:	1affffef 	bne	2efa8 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0x68>
   2efe8:	e22c2020 	eor	r2, ip, #32
   2efec:	e7c1e006 	strb	lr, [r1, r6]
   2eff0:	e6ef5072 	uxtb	r5, r2
   2eff4:	e2836002 	add	r6, r3, #2
   2eff8:	eaffffed 	b	2efb4 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]+0x74>
   2effc:	e3a00000 	mov	r0, #0
   2f000:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002f004 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)>:
   2f004:	e92d4070 	push	{r4, r5, r6, lr}
   2f008:	e59f5094 	ldr	r5, [pc, #148]	; 2f0a4 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xa0>
   2f00c:	e59f6094 	ldr	r6, [pc, #148]	; 2f0a8 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xa4>
   2f010:	e3a0c000 	mov	ip, #0
   2f014:	e59f4090 	ldr	r4, [pc, #144]	; 2f0ac <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xa8>
   2f018:	e5853004 	str	r3, [r5, #4]
   2f01c:	e59f308c 	ldr	r3, [pc, #140]	; 2f0b0 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xac>
   2f020:	e5806000 	str	r6, [r0]
   2f024:	e280ea02 	add	lr, r0, #8192	; 0x2000
   2f028:	e2806901 	add	r6, r0, #16384	; 0x4000
   2f02c:	e580401c 	str	r4, [r0, #28]
   2f030:	e58e4738 	str	r4, [lr, #1848]	; 0x738
   2f034:	e58e3730 	str	r3, [lr, #1840]	; 0x730
   2f038:	e5863e4c 	str	r3, [r6, #3660]	; 0xe4c
   2f03c:	e1a03006 	mov	r3, r6
   2f040:	e59f406c 	ldr	r4, [pc, #108]	; 2f0b4 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xb0>
   2f044:	e585c000 	str	ip, [r5]
   2f048:	e59f5068 	ldr	r5, [pc, #104]	; 2f0b8 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xb4>
   2f04c:	e586ce5c 	str	ip, [r6, #3676]	; 0xe5c
   2f050:	e5865e50 	str	r5, [r6, #3664]	; 0xe50
   2f054:	e586ce60 	str	ip, [r6, #3680]	; 0xe60
   2f058:	e586ce64 	str	ip, [r6, #3684]	; 0xe64
   2f05c:	e586ce68 	str	ip, [r6, #3688]	; 0xe68
   2f060:	e5dd5014 	ldrb	r5, [sp, #20]
   2f064:	e580400c 	str	r4, [r0, #12]
   2f068:	e580c008 	str	ip, [r0, #8]
   2f06c:	e5c0c010 	strb	ip, [r0, #16]
   2f070:	e580c014 	str	ip, [r0, #20]
   2f074:	e580c018 	str	ip, [r0, #24]
   2f078:	e5dd6010 	ldrb	r6, [sp, #16]
   2f07c:	e583ce54 	str	ip, [r3, #3668]	; 0xe54
   2f080:	e583ce58 	str	ip, [r3, #3672]	; 0xe58
   2f084:	e5dd4018 	ldrb	r4, [sp, #24]
   2f088:	e5dd301c 	ldrb	r3, [sp, #28]
   2f08c:	e5c06004 	strb	r6, [r0, #4]
   2f090:	e5c05005 	strb	r5, [r0, #5]
   2f094:	e5c04007 	strb	r4, [r0, #7]
   2f098:	e5c03006 	strb	r3, [r0, #6]
   2f09c:	e58e1734 	str	r1, [lr, #1844]	; 0x734
   2f0a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f0a4:	0004c65c 	.word	0x0004c65c
   2f0a8:	00044724 	.word	0x00044724
   2f0ac:	0003d460 	.word	0x0003d460
   2f0b0:	00002710 	.word	0x00002710
   2f0b4:	0000ffff 	.word	0x0000ffff
   2f0b8:	00001388 	.word	0x00001388

0002f0bc <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)>:
   2f0bc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2f0c0:	e59f6094 	ldr	r6, [pc, #148]	; 2f15c <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xa0>
   2f0c4:	e59f4094 	ldr	r4, [pc, #148]	; 2f160 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xa4>
   2f0c8:	e59f7094 	ldr	r7, [pc, #148]	; 2f164 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xa8>
   2f0cc:	e2805a02 	add	r5, r0, #8192	; 0x2000
   2f0d0:	e2808901 	add	r8, r0, #16384	; 0x4000
   2f0d4:	e5807000 	str	r7, [r0]
   2f0d8:	e580601c 	str	r6, [r0, #28]
   2f0dc:	e3a0e000 	mov	lr, #0
   2f0e0:	e5856738 	str	r6, [r5, #1848]	; 0x738
   2f0e4:	e5854730 	str	r4, [r5, #1840]	; 0x730
   2f0e8:	e5884e4c 	str	r4, [r8, #3660]	; 0xe4c
   2f0ec:	e1a04008 	mov	r4, r8
   2f0f0:	e59f7070 	ldr	r7, [pc, #112]	; 2f168 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xac>
   2f0f4:	e584ee5c 	str	lr, [r4, #3676]	; 0xe5c
   2f0f8:	e584ee60 	str	lr, [r4, #3680]	; 0xe60
   2f0fc:	e584ee64 	str	lr, [r4, #3684]	; 0xe64
   2f100:	e584ee68 	str	lr, [r4, #3688]	; 0xe68
   2f104:	e5dd901c 	ldrb	r9, [sp, #28]
   2f108:	e580e008 	str	lr, [r0, #8]
   2f10c:	e5c0e010 	strb	lr, [r0, #16]
   2f110:	e580e014 	str	lr, [r0, #20]
   2f114:	e580e018 	str	lr, [r0, #24]
   2f118:	e580700c 	str	r7, [r0, #12]
   2f11c:	e5dd8028 	ldrb	r8, [sp, #40]	; 0x28
   2f120:	e584ee54 	str	lr, [r4, #3668]	; 0xe54
   2f124:	e584ee58 	str	lr, [r4, #3672]	; 0xe58
   2f128:	e5dd702c 	ldrb	r7, [sp, #44]	; 0x2c
   2f12c:	e5c03004 	strb	r3, [r0, #4]
   2f130:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   2f134:	e59f3030 	ldr	r3, [pc, #48]	; 2f16c <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xb0>
   2f138:	e59de020 	ldr	lr, [sp, #32]
   2f13c:	e5c09005 	strb	r9, [r0, #5]
   2f140:	e5c08007 	strb	r8, [r0, #7]
   2f144:	e5c07006 	strb	r7, [r0, #6]
   2f148:	e5831000 	str	r1, [r3]
   2f14c:	e5856734 	str	r6, [r5, #1844]	; 0x734
   2f150:	e5832004 	str	r2, [r3, #4]
   2f154:	e584ee50 	str	lr, [r4, #3664]	; 0xe50
   2f158:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2f15c:	0003d460 	.word	0x0003d460
   2f160:	00002710 	.word	0x00002710
   2f164:	00044724 	.word	0x00044724
   2f168:	0000ffff 	.word	0x0000ffff
   2f16c:	0004c65c 	.word	0x0004c65c

0002f170 <MiniHDLC::clear()>:
   2f170:	e3a03000 	mov	r3, #0
   2f174:	e59fc044 	ldr	ip, [pc, #68]	; 2f1c0 <MiniHDLC::clear()+0x50>
   2f178:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2f17c:	e59f1040 	ldr	r1, [pc, #64]	; 2f1c4 <MiniHDLC::clear()+0x54>
   2f180:	e2802a02 	add	r2, r0, #8192	; 0x2000
   2f184:	e59fe03c 	ldr	lr, [pc, #60]	; 2f1c8 <MiniHDLC::clear()+0x58>
   2f188:	e582c734 	str	ip, [r2, #1844]	; 0x734
   2f18c:	e2802901 	add	r2, r0, #16384	; 0x4000
   2f190:	e582ce50 	str	ip, [r2, #3664]	; 0xe50
   2f194:	e5813004 	str	r3, [r1, #4]
   2f198:	e580e00c 	str	lr, [r0, #12]
   2f19c:	e1c030b6 	strh	r3, [r0, #6]
   2f1a0:	e5803008 	str	r3, [r0, #8]
   2f1a4:	e5c03010 	strb	r3, [r0, #16]
   2f1a8:	e5803014 	str	r3, [r0, #20]
   2f1ac:	e5803018 	str	r3, [r0, #24]
   2f1b0:	e5813000 	str	r3, [r1]
   2f1b4:	e5823e54 	str	r3, [r2, #3668]	; 0xe54
   2f1b8:	e5823e58 	str	r3, [r2, #3672]	; 0xe58
   2f1bc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2f1c0:	00001388 	.word	0x00001388
   2f1c4:	0004c65c 	.word	0x0004c65c
   2f1c8:	0000ffff 	.word	0x0000ffff

0002f1cc <MiniHDLC::handleChar(unsigned char)>:
   2f1cc:	e92d4030 	push	{r4, r5, lr}
   2f1d0:	e5d03004 	ldrb	r3, [r0, #4]
   2f1d4:	e1a04000 	mov	r4, r0
   2f1d8:	e1530001 	cmp	r3, r1
   2f1dc:	e24dd014 	sub	sp, sp, #20
   2f1e0:	0a000035 	beq	2f2bc <MiniHDLC::handleChar(unsigned char)+0xf0>
   2f1e4:	e5d0300e 	ldrb	r3, [r0, #14]
   2f1e8:	e3530000 	cmp	r3, #0
   2f1ec:	1a00001a 	bne	2f25c <MiniHDLC::handleChar(unsigned char)+0x90>
   2f1f0:	e5d03005 	ldrb	r3, [r0, #5]
   2f1f4:	e1530001 	cmp	r3, r1
   2f1f8:	03a03001 	moveq	r3, #1
   2f1fc:	05c0300e 	strbeq	r3, [r0, #14]
   2f200:	0a000013 	beq	2f254 <MiniHDLC::handleChar(unsigned char)+0x88>
   2f204:	e2842a02 	add	r2, r4, #8192	; 0x2000
   2f208:	e5920730 	ldr	r0, [r2, #1840]	; 0x730
   2f20c:	e5943008 	ldr	r3, [r4, #8]
   2f210:	e1530000 	cmp	r3, r0
   2f214:	3a000014 	bcc	2f26c <MiniHDLC::handleChar(unsigned char)+0xa0>
   2f218:	e3a00000 	mov	r0, #0
   2f21c:	e3e01000 	mvn	r1, #0
   2f220:	e5922734 	ldr	r2, [r2, #1844]	; 0x734
   2f224:	e1530002 	cmp	r3, r2
   2f228:	e2842901 	add	r2, r4, #16384	; 0x4000
   2f22c:	25923e64 	ldrcs	r3, [r2, #3684]	; 0xe64
   2f230:	35923e68 	ldrcc	r3, [r2, #3688]	; 0xe68
   2f234:	22833001 	addcs	r3, r3, #1
   2f238:	32833001 	addcc	r3, r3, #1
   2f23c:	25840008 	strcs	r0, [r4, #8]
   2f240:	21c410bc 	strhcs	r1, [r4, #12]
   2f244:	35840008 	strcc	r0, [r4, #8]
   2f248:	31c410bc 	strhcc	r1, [r4, #12]
   2f24c:	25823e64 	strcs	r3, [r2, #3684]	; 0xe64
   2f250:	35823e68 	strcc	r3, [r2, #3688]	; 0xe68
   2f254:	e28dd014 	add	sp, sp, #20
   2f258:	e8bd8030 	pop	{r4, r5, pc}
   2f25c:	e3a03000 	mov	r3, #0
   2f260:	e2211020 	eor	r1, r1, #32
   2f264:	e5c0300e 	strb	r3, [r0, #14]
   2f268:	eaffffe5 	b	2f204 <MiniHDLC::handleChar(unsigned char)+0x38>
   2f26c:	e0842003 	add	r2, r4, r3
   2f270:	e3530001 	cmp	r3, #1
   2f274:	e5c21020 	strb	r1, [r2, #32]
   2f278:	9a00000b 	bls	2f2ac <MiniHDLC::handleChar(unsigned char)+0xe0>
   2f27c:	e2431002 	sub	r1, r3, #2
   2f280:	e1510000 	cmp	r1, r0
   2f284:	23a02000 	movcs	r2, #0
   2f288:	30841001 	addcc	r1, r4, r1
   2f28c:	e1d400bc 	ldrh	r0, [r4, #12]
   2f290:	35d12020 	ldrbcc	r2, [r1, #32]
   2f294:	e59f1180 	ldr	r1, [pc, #384]	; 2f41c <MiniHDLC::handleChar(unsigned char)+0x250>
   2f298:	e0222420 	eor	r2, r2, r0, lsr #8
   2f29c:	e1a02082 	lsl	r2, r2, #1
   2f2a0:	e19120b2 	ldrh	r2, [r1, r2]
   2f2a4:	e0222400 	eor	r2, r2, r0, lsl #8
   2f2a8:	e1c420bc 	strh	r2, [r4, #12]
   2f2ac:	e2833001 	add	r3, r3, #1
   2f2b0:	e5843008 	str	r3, [r4, #8]
   2f2b4:	e28dd014 	add	sp, sp, #20
   2f2b8:	e8bd8030 	pop	{r4, r5, pc}
   2f2bc:	e5903008 	ldr	r3, [r0, #8]
   2f2c0:	e3530001 	cmp	r3, #1
   2f2c4:	9a000030 	bls	2f38c <MiniHDLC::handleChar(unsigned char)+0x1c0>
   2f2c8:	e5d02007 	ldrb	r2, [r0, #7]
   2f2cc:	e3520000 	cmp	r2, #0
   2f2d0:	0a000044 	beq	2f3e8 <MiniHDLC::handleChar(unsigned char)+0x21c>
   2f2d4:	e2802a02 	add	r2, r0, #8192	; 0x2000
   2f2d8:	e5920730 	ldr	r0, [r2, #1840]	; 0x730
   2f2dc:	e243c001 	sub	ip, r3, #1
   2f2e0:	e15c0000 	cmp	ip, r0
   2f2e4:	3084200c 	addcc	r2, r4, ip
   2f2e8:	e2431002 	sub	r1, r3, #2
   2f2ec:	23a02000 	movcs	r2, #0
   2f2f0:	35d22020 	ldrbcc	r2, [r2, #32]
   2f2f4:	e1500001 	cmp	r0, r1
   2f2f8:	8084e001 	addhi	lr, r4, r1
   2f2fc:	85dee020 	ldrbhi	lr, [lr, #32]
   2f300:	8182240e 	orrhi	r2, r2, lr, lsl #8
   2f304:	86bf2072 	sxthhi	r2, r2
   2f308:	e1d4e0bc 	ldrh	lr, [r4, #12]
   2f30c:	e6ff2072 	uxth	r2, r2
   2f310:	e15e0002 	cmp	lr, r2
   2f314:	0a000010 	beq	2f35c <MiniHDLC::handleChar(unsigned char)+0x190>
   2f318:	e3a01000 	mov	r1, #0
   2f31c:	e284c01f 	add	ip, r4, #31
   2f320:	e1510000 	cmp	r1, r0
   2f324:	0a000024 	beq	2f3bc <MiniHDLC::handleChar(unsigned char)+0x1f0>
   2f328:	e5fc5001 	ldrb	r5, [ip, #1]!
   2f32c:	e3550000 	cmp	r5, #0
   2f330:	0a000020 	beq	2f3b8 <MiniHDLC::handleChar(unsigned char)+0x1ec>
   2f334:	e2811001 	add	r1, r1, #1
   2f338:	e1530001 	cmp	r3, r1
   2f33c:	0a000001 	beq	2f348 <MiniHDLC::handleChar(unsigned char)+0x17c>
   2f340:	e35100c8 	cmp	r1, #200	; 0xc8
   2f344:	1afffff5 	bne	2f320 <MiniHDLC::handleChar(unsigned char)+0x154>
   2f348:	e2842901 	add	r2, r4, #16384	; 0x4000
   2f34c:	e5923e60 	ldr	r3, [r2, #3680]	; 0xe60
   2f350:	e2833001 	add	r3, r3, #1
   2f354:	e5823e60 	str	r3, [r2, #3680]	; 0xe60
   2f358:	ea00000c 	b	2f390 <MiniHDLC::handleChar(unsigned char)+0x1c4>
   2f35c:	e15c0000 	cmp	ip, r0
   2f360:	8a000009 	bhi	2f38c <MiniHDLC::handleChar(unsigned char)+0x1c0>
   2f364:	e1510000 	cmp	r1, r0
   2f368:	33a02000 	movcc	r2, #0
   2f36c:	30843001 	addcc	r3, r4, r1
   2f370:	35c32020 	strbcc	r2, [r3, #32]
   2f374:	e59f30a4 	ldr	r3, [pc, #164]	; 2f420 <MiniHDLC::handleChar(unsigned char)+0x254>
   2f378:	e5933004 	ldr	r3, [r3, #4]
   2f37c:	e3530000 	cmp	r3, #0
   2f380:	0a000001 	beq	2f38c <MiniHDLC::handleChar(unsigned char)+0x1c0>
   2f384:	e2840020 	add	r0, r4, #32
   2f388:	e12fff33 	blx	r3
   2f38c:	e2842901 	add	r2, r4, #16384	; 0x4000
   2f390:	e3a01000 	mov	r1, #0
   2f394:	e3e00000 	mvn	r0, #0
   2f398:	e5923e5c 	ldr	r3, [r2, #3676]	; 0xe5c
   2f39c:	e5c4100e 	strb	r1, [r4, #14]
   2f3a0:	e2833001 	add	r3, r3, #1
   2f3a4:	e5841008 	str	r1, [r4, #8]
   2f3a8:	e1c400bc 	strh	r0, [r4, #12]
   2f3ac:	e5823e5c 	str	r3, [r2, #3676]	; 0xe5c
   2f3b0:	e28dd014 	add	sp, sp, #20
   2f3b4:	e8bd8030 	pop	{r4, r5, pc}
   2f3b8:	e1a00001 	mov	r0, r1
   2f3bc:	e2400001 	sub	r0, r0, #1
   2f3c0:	e35000c6 	cmp	r0, #198	; 0xc6
   2f3c4:	8affffdf 	bhi	2f348 <MiniHDLC::handleChar(unsigned char)+0x17c>
   2f3c8:	e2841020 	add	r1, r4, #32
   2f3cc:	e88d4004 	stm	sp, {r2, lr}
   2f3d0:	e58d1008 	str	r1, [sp, #8]
   2f3d4:	e59f2048 	ldr	r2, [pc, #72]	; 2f424 <MiniHDLC::handleChar(unsigned char)+0x258>
   2f3d8:	e3a01003 	mov	r1, #3
   2f3dc:	e59f0044 	ldr	r0, [pc, #68]	; 2f428 <MiniHDLC::handleChar(unsigned char)+0x25c>
   2f3e0:	ebfffe6a 	bl	2ed90 <LogWrite>
   2f3e4:	eaffffd7 	b	2f348 <MiniHDLC::handleChar(unsigned char)+0x17c>
   2f3e8:	e2801a02 	add	r1, r0, #8192	; 0x2000
   2f3ec:	e5910730 	ldr	r0, [r1, #1840]	; 0x730
   2f3f0:	e2431002 	sub	r1, r3, #2
   2f3f4:	e1510000 	cmp	r1, r0
   2f3f8:	30842001 	addcc	r2, r4, r1
   2f3fc:	e243c001 	sub	ip, r3, #1
   2f400:	35d22020 	ldrbcc	r2, [r2, #32]
   2f404:	e150000c 	cmp	r0, ip
   2f408:	8084e00c 	addhi	lr, r4, ip
   2f40c:	85dee020 	ldrbhi	lr, [lr, #32]
   2f410:	8182240e 	orrhi	r2, r2, lr, lsl #8
   2f414:	86bf2072 	sxthhi	r2, r2
   2f418:	eaffffba 	b	2f308 <MiniHDLC::handleChar(unsigned char)+0x13c>
   2f41c:	0004451c 	.word	0x0004451c
   2f420:	0004c65c 	.word	0x0004c65c
   2f424:	000444d0 	.word	0x000444d0
   2f428:	00044510 	.word	0x00044510

0002f42c <MiniHDLC::handleBit(unsigned char)>:
   2f42c:	e92d4010 	push	{r4, lr}
   2f430:	e5d0300f 	ldrb	r3, [r0, #15]
   2f434:	e3510000 	cmp	r1, #0
   2f438:	e1a04000 	mov	r4, r0
   2f43c:	e5d02004 	ldrb	r2, [r0, #4]
   2f440:	e1a030c3 	asr	r3, r3, #1
   2f444:	1a000015 	bne	2f4a0 <MiniHDLC::handleBit(unsigned char)+0x74>
   2f448:	e6ef3073 	uxtb	r3, r3
   2f44c:	e1530002 	cmp	r3, r2
   2f450:	e5c0300f 	strb	r3, [r0, #15]
   2f454:	0a000016 	beq	2f4b4 <MiniHDLC::handleBit(unsigned char)+0x88>
   2f458:	e203307c 	and	r3, r3, #124	; 0x7c
   2f45c:	e353007c 	cmp	r3, #124	; 0x7c
   2f460:	08bd8010 	popeq	{r4, pc}
   2f464:	e5d42010 	ldrb	r2, [r4, #16]
   2f468:	e5943014 	ldr	r3, [r4, #20]
   2f46c:	e18110a2 	orr	r1, r1, r2, lsr #1
   2f470:	e2833001 	add	r3, r3, #1
   2f474:	e6ef1071 	uxtb	r1, r1
   2f478:	e3530008 	cmp	r3, #8
   2f47c:	e5c41010 	strb	r1, [r4, #16]
   2f480:	e5843014 	str	r3, [r4, #20]
   2f484:	18bd8010 	popne	{r4, pc}
   2f488:	e1a00004 	mov	r0, r4
   2f48c:	ebffff4e 	bl	2f1cc <MiniHDLC::handleChar(unsigned char)>
   2f490:	e3a03000 	mov	r3, #0
   2f494:	e5c43010 	strb	r3, [r4, #16]
   2f498:	e5843014 	str	r3, [r4, #20]
   2f49c:	e8bd8010 	pop	{r4, pc}
   2f4a0:	e3833080 	orr	r3, r3, #128	; 0x80
   2f4a4:	e1530002 	cmp	r3, r2
   2f4a8:	e3e0107f 	mvn	r1, #127	; 0x7f
   2f4ac:	e5c0300f 	strb	r3, [r0, #15]
   2f4b0:	1affffeb 	bne	2f464 <MiniHDLC::handleBit(unsigned char)+0x38>
   2f4b4:	e1a01002 	mov	r1, r2
   2f4b8:	eafffff2 	b	2f488 <MiniHDLC::handleBit(unsigned char)+0x5c>

0002f4bc <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)>:
   2f4bc:	e3520000 	cmp	r2, #0
   2f4c0:	012fff1e 	bxeq	lr
   2f4c4:	e92d4070 	push	{r4, r5, r6, lr}
   2f4c8:	e1a06000 	mov	r6, r0
   2f4cc:	e0812002 	add	r2, r1, r2
   2f4d0:	e2425001 	sub	r5, r2, #1
   2f4d4:	e2414001 	sub	r4, r1, #1
   2f4d8:	e5f41001 	ldrb	r1, [r4, #1]!
   2f4dc:	e1a00006 	mov	r0, r6
   2f4e0:	ebffff39 	bl	2f1cc <MiniHDLC::handleChar(unsigned char)>
   2f4e4:	e1540005 	cmp	r4, r5
   2f4e8:	1afffffa 	bne	2f4d8 <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)+0x1c>
   2f4ec:	e8bd8070 	pop	{r4, r5, r6, pc}

0002f4f0 <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)>:
   2f4f0:	e3e0c000 	mvn	ip, #0
   2f4f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2f4f8:	e3520003 	cmp	r2, #3
   2f4fc:	e24dd01c 	sub	sp, sp, #28
   2f500:	e1cdc1b6 	strh	ip, [sp, #22]
   2f504:	9a000010 	bls	2f54c <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)+0x5c>
   2f508:	e3a0e001 	mov	lr, #1
   2f50c:	e5d0c004 	ldrb	ip, [r0, #4]
   2f510:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   2f514:	e58de000 	str	lr, [sp]
   2f518:	e98d0088 	stmib	sp, {r3, r7}
   2f51c:	e5c1c000 	strb	ip, [r1]
   2f520:	e28d3016 	add	r3, sp, #22
   2f524:	e1a05000 	mov	r5, r0
   2f528:	ebfffe5c 	bl	2eea0 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]>
   2f52c:	e3500000 	cmp	r0, #0
   2f530:	0a000005 	beq	2f54c <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)+0x5c>
   2f534:	e58d0000 	str	r0, [sp]
   2f538:	e28d3016 	add	r3, sp, #22
   2f53c:	e1a00005 	mov	r0, r5
   2f540:	ebfffe7e 	bl	2ef40 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]>
   2f544:	e28dd01c 	add	sp, sp, #28
   2f548:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2f54c:	e3a00000 	mov	r0, #0
   2f550:	e28dd01c 	add	sp, sp, #28
   2f554:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002f558 <MiniHDLC::encodeFrameStart(unsigned char*, unsigned long, unsigned short&)>:
   2f558:	e3e0c000 	mvn	ip, #0
   2f55c:	e3520003 	cmp	r2, #3
   2f560:	e1c3c0b0 	strh	ip, [r3]
   2f564:	85d03004 	ldrbhi	r3, [r0, #4]
   2f568:	83a00001 	movhi	r0, #1
   2f56c:	85c13000 	strbhi	r3, [r1]
   2f570:	93a00000 	movls	r0, #0
   2f574:	e12fff1e 	bx	lr

0002f578 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long)>:
   2f578:	e59dc000 	ldr	ip, [sp]
   2f57c:	e35c0000 	cmp	ip, #0
   2f580:	0a000000 	beq	2f588 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long)+0x10>
   2f584:	eafffe45 	b	2eea0 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.0]>
   2f588:	e1a0000c 	mov	r0, ip
   2f58c:	e12fff1e 	bx	lr

0002f590 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long)>:
   2f590:	e59dc000 	ldr	ip, [sp]
   2f594:	e35c0000 	cmp	ip, #0
   2f598:	0a000000 	beq	2f5a0 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long)+0x10>
   2f59c:	eafffe67 	b	2ef40 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.0]>
   2f5a0:	e1a0000c 	mov	r0, ip
   2f5a4:	e12fff1e 	bx	lr

0002f5a8 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)>:
   2f5a8:	e3520000 	cmp	r2, #0
   2f5ac:	0a000013 	beq	2f600 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x58>
   2f5b0:	e92d4010 	push	{r4, lr}
   2f5b4:	e1a0e000 	mov	lr, r0
   2f5b8:	e1a00002 	mov	r0, r2
   2f5bc:	e0812002 	add	r2, r1, r2
   2f5c0:	e5de4004 	ldrb	r4, [lr, #4]
   2f5c4:	e2422001 	sub	r2, r2, #1
   2f5c8:	e2411001 	sub	r1, r1, #1
   2f5cc:	ea000004 	b	2f5e4 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x3c>
   2f5d0:	e5dec005 	ldrb	ip, [lr, #5]
   2f5d4:	e15c0003 	cmp	ip, r3
   2f5d8:	0a000004 	beq	2f5f0 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x48>
   2f5dc:	e1510002 	cmp	r1, r2
   2f5e0:	08bd8010 	popeq	{r4, pc}
   2f5e4:	e5f13001 	ldrb	r3, [r1, #1]!
   2f5e8:	e1530004 	cmp	r3, r4
   2f5ec:	1afffff7 	bne	2f5d0 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x28>
   2f5f0:	e1510002 	cmp	r1, r2
   2f5f4:	e2800001 	add	r0, r0, #1
   2f5f8:	1afffff9 	bne	2f5e4 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x3c>
   2f5fc:	e8bd8010 	pop	{r4, pc}
   2f600:	e1a00002 	mov	r0, r2
   2f604:	e12fff1e 	bx	lr

0002f608 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)>:
   2f608:	e0211420 	eor	r1, r1, r0, lsr #8
   2f60c:	e59f3010 	ldr	r3, [pc, #16]	; 2f624 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)+0x1c>
   2f610:	e1a01081 	lsl	r1, r1, #1
   2f614:	e19330b1 	ldrh	r3, [r3, r1]
   2f618:	e0230400 	eor	r0, r3, r0, lsl #8
   2f61c:	e6ff0070 	uxth	r0, r0
   2f620:	e12fff1e 	bx	lr
   2f624:	0004451c 	.word	0x0004451c

0002f628 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)>:
   2f628:	e3520000 	cmp	r2, #0
   2f62c:	012fff1e 	bxeq	lr
   2f630:	e0812002 	add	r2, r1, r2
   2f634:	e59fc028 	ldr	ip, [pc, #40]	; 2f664 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)+0x3c>
   2f638:	e2422001 	sub	r2, r2, #1
   2f63c:	e2411001 	sub	r1, r1, #1
   2f640:	e5f13001 	ldrb	r3, [r1, #1]!
   2f644:	e0233420 	eor	r3, r3, r0, lsr #8
   2f648:	e1a03083 	lsl	r3, r3, #1
   2f64c:	e19c30b3 	ldrh	r3, [ip, r3]
   2f650:	e1520001 	cmp	r2, r1
   2f654:	e0230400 	eor	r0, r3, r0, lsl #8
   2f658:	e6ff0070 	uxth	r0, r0
   2f65c:	1afffff7 	bne	2f640 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)+0x18>
   2f660:	e12fff1e 	bx	lr
   2f664:	0004451c 	.word	0x0004451c

0002f668 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)>:
   2f668:	e5d0c005 	ldrb	ip, [r0, #5]
   2f66c:	e15c0001 	cmp	ip, r1
   2f670:	0a000005 	beq	2f68c <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x24>
   2f674:	e5d00004 	ldrb	r0, [r0, #4]
   2f678:	e1500001 	cmp	r0, r1
   2f67c:	0a000002 	beq	2f68c <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x24>
   2f680:	e7c21003 	strb	r1, [r2, r3]
   2f684:	e2830001 	add	r0, r3, #1
   2f688:	e12fff1e 	bx	lr
   2f68c:	e7c2c003 	strb	ip, [r2, r3]
   2f690:	e2211020 	eor	r1, r1, #32
   2f694:	e2833001 	add	r3, r3, #1
   2f698:	eafffff8 	b	2f680 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x18>

0002f69c <MiniHDLC::setFrameRxMaxLen(unsigned long)>:
   2f69c:	e2800a02 	add	r0, r0, #8192	; 0x2000
   2f6a0:	e5801734 	str	r1, [r0, #1844]	; 0x734
   2f6a4:	e12fff1e 	bx	lr

0002f6a8 <MiniHDLC::putCharToFrame(unsigned char)>:
   2f6a8:	e2803901 	add	r3, r0, #16384	; 0x4000
   2f6ac:	e593ce54 	ldr	ip, [r3, #3668]	; 0xe54
   2f6b0:	e5932e50 	ldr	r2, [r3, #3664]	; 0xe50
   2f6b4:	e15c0002 	cmp	ip, r2
   2f6b8:	2a000017 	bcs	2f71c <MiniHDLC::putCharToFrame(unsigned char)+0x74>
   2f6bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2f6c0:	e5d0e006 	ldrb	lr, [r0, #6]
   2f6c4:	e5932e4c 	ldr	r2, [r3, #3660]	; 0xe4c
   2f6c8:	e35e0000 	cmp	lr, #0
   2f6cc:	0a00000b 	beq	2f700 <MiniHDLC::putCharToFrame(unsigned char)+0x58>
   2f6d0:	e593ee58 	ldr	lr, [r3, #3672]	; 0xe58
   2f6d4:	e35e0000 	cmp	lr, #0
   2f6d8:	1a000013 	bne	2f72c <MiniHDLC::putCharToFrame(unsigned char)+0x84>
   2f6dc:	e3510000 	cmp	r1, #0
   2f6e0:	13a01080 	movne	r1, #128	; 0x80
   2f6e4:	e15c0002 	cmp	ip, r2
   2f6e8:	32800a02 	addcc	r0, r0, #8192	; 0x2000
   2f6ec:	3080000c 	addcc	r0, r0, ip
   2f6f0:	35c0173c 	strbcc	r1, [r0, #1852]	; 0x73c
   2f6f4:	e3a02001 	mov	r2, #1
   2f6f8:	e5832e58 	str	r2, [r3, #3672]	; 0xe58
   2f6fc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2f700:	e15c0002 	cmp	ip, r2
   2f704:	32800a02 	addcc	r0, r0, #8192	; 0x2000
   2f708:	e28c2001 	add	r2, ip, #1
   2f70c:	3080000c 	addcc	r0, r0, ip
   2f710:	e5832e54 	str	r2, [r3, #3668]	; 0xe54
   2f714:	35c0173c 	strbcc	r1, [r0, #1852]	; 0x73c
   2f718:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2f71c:	e3a02000 	mov	r2, #0
   2f720:	e5832e54 	str	r2, [r3, #3668]	; 0xe54
   2f724:	e5832e58 	str	r2, [r3, #3672]	; 0xe58
   2f728:	e12fff1e 	bx	lr
   2f72c:	e15c0002 	cmp	ip, r2
   2f730:	2a000009 	bcs	2f75c <MiniHDLC::putCharToFrame(unsigned char)+0xb4>
   2f734:	e2800a02 	add	r0, r0, #8192	; 0x2000
   2f738:	e080200c 	add	r2, r0, ip
   2f73c:	e5d2273c 	ldrb	r2, [r2, #1852]	; 0x73c
   2f740:	e3510000 	cmp	r1, #0
   2f744:	e1a010c2 	asr	r1, r2, #1
   2f748:	e1a020a2 	lsr	r2, r2, #1
   2f74c:	13822080 	orrne	r2, r2, #128	; 0x80
   2f750:	06ef2071 	uxtbeq	r2, r1
   2f754:	e080000c 	add	r0, r0, ip
   2f758:	e5c0273c 	strb	r2, [r0, #1852]	; 0x73c
   2f75c:	e35e0007 	cmp	lr, #7
   2f760:	03a02000 	moveq	r2, #0
   2f764:	e28ee001 	add	lr, lr, #1
   2f768:	028c0001 	addeq	r0, ip, #1
   2f76c:	1583ee58 	strne	lr, [r3, #3672]	; 0xe58
   2f770:	05830e54 	streq	r0, [r3, #3668]	; 0xe54
   2f774:	05832e58 	streq	r2, [r3, #3672]	; 0xe58
   2f778:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002f77c <MiniHDLC::sendChar(unsigned char)>:
   2f77c:	e5d03006 	ldrb	r3, [r0, #6]
   2f780:	e3530000 	cmp	r3, #0
   2f784:	0a00000a 	beq	2f7b4 <MiniHDLC::sendChar(unsigned char)+0x38>
   2f788:	e92d4070 	push	{r4, r5, r6, lr}
   2f78c:	e1a06000 	mov	r6, r0
   2f790:	e1a04001 	mov	r4, r1
   2f794:	e3a05008 	mov	r5, #8
   2f798:	e2041001 	and	r1, r4, #1
   2f79c:	e1a00006 	mov	r0, r6
   2f7a0:	ebffffc0 	bl	2f6a8 <MiniHDLC::putCharToFrame(unsigned char)>
   2f7a4:	e2555001 	subs	r5, r5, #1
   2f7a8:	e1a040a4 	lsr	r4, r4, #1
   2f7ac:	1afffff9 	bne	2f798 <MiniHDLC::sendChar(unsigned char)+0x1c>
   2f7b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f7b4:	eaffffbb 	b	2f6a8 <MiniHDLC::putCharToFrame(unsigned char)>

0002f7b8 <MiniHDLC::sendCharWithStuffing(unsigned char)>:
   2f7b8:	e5d03006 	ldrb	r3, [r0, #6]
   2f7bc:	e3530000 	cmp	r3, #0
   2f7c0:	0a000019 	beq	2f82c <MiniHDLC::sendCharWithStuffing(unsigned char)+0x74>
   2f7c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2f7c8:	e1a06000 	mov	r6, r0
   2f7cc:	e1a04001 	mov	r4, r1
   2f7d0:	e3a07008 	mov	r7, #8
   2f7d4:	e3a08000 	mov	r8, #0
   2f7d8:	ea000002 	b	2f7e8 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x30>
   2f7dc:	e2577001 	subs	r7, r7, #1
   2f7e0:	e1a040a4 	lsr	r4, r4, #1
   2f7e4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2f7e8:	e2045001 	and	r5, r4, #1
   2f7ec:	e1a01005 	mov	r1, r5
   2f7f0:	e1a00006 	mov	r0, r6
   2f7f4:	ebffffab 	bl	2f6a8 <MiniHDLC::putCharToFrame(unsigned char)>
   2f7f8:	e3550000 	cmp	r5, #0
   2f7fc:	05865018 	streq	r5, [r6, #24]
   2f800:	0afffff5 	beq	2f7dc <MiniHDLC::sendCharWithStuffing(unsigned char)+0x24>
   2f804:	e5963018 	ldr	r3, [r6, #24]
   2f808:	e2833001 	add	r3, r3, #1
   2f80c:	e3530005 	cmp	r3, #5
   2f810:	e5863018 	str	r3, [r6, #24]
   2f814:	1afffff0 	bne	2f7dc <MiniHDLC::sendCharWithStuffing(unsigned char)+0x24>
   2f818:	e3a01000 	mov	r1, #0
   2f81c:	e1a00006 	mov	r0, r6
   2f820:	ebffffa0 	bl	2f6a8 <MiniHDLC::putCharToFrame(unsigned char)>
   2f824:	e5868018 	str	r8, [r6, #24]
   2f828:	eaffffeb 	b	2f7dc <MiniHDLC::sendCharWithStuffing(unsigned char)+0x24>
   2f82c:	eaffffd2 	b	2f77c <MiniHDLC::sendChar(unsigned char)>

0002f830 <MiniHDLC::sendEscaped(unsigned char)>:
   2f830:	e92d4070 	push	{r4, r5, r6, lr}
   2f834:	e1a04001 	mov	r4, r1
   2f838:	e5d01005 	ldrb	r1, [r0, #5]
   2f83c:	e1a05000 	mov	r5, r0
   2f840:	e1510004 	cmp	r1, r4
   2f844:	0a000006 	beq	2f864 <MiniHDLC::sendEscaped(unsigned char)+0x34>
   2f848:	e5d03004 	ldrb	r3, [r0, #4]
   2f84c:	e1530004 	cmp	r3, r4
   2f850:	0a000003 	beq	2f864 <MiniHDLC::sendEscaped(unsigned char)+0x34>
   2f854:	e1a01004 	mov	r1, r4
   2f858:	e1a00005 	mov	r0, r5
   2f85c:	e8bd4070 	pop	{r4, r5, r6, lr}
   2f860:	eaffffd4 	b	2f7b8 <MiniHDLC::sendCharWithStuffing(unsigned char)>
   2f864:	e1a00005 	mov	r0, r5
   2f868:	e2244020 	eor	r4, r4, #32
   2f86c:	ebffffd1 	bl	2f7b8 <MiniHDLC::sendCharWithStuffing(unsigned char)>
   2f870:	e1a01004 	mov	r1, r4
   2f874:	e1a00005 	mov	r0, r5
   2f878:	e8bd4070 	pop	{r4, r5, r6, lr}
   2f87c:	eaffffcd 	b	2f7b8 <MiniHDLC::sendCharWithStuffing(unsigned char)>

0002f880 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>:
   2f880:	e3a03000 	mov	r3, #0
   2f884:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f888:	e1a05002 	mov	r5, r2
   2f88c:	e2806901 	add	r6, r0, #16384	; 0x4000
   2f890:	e5863e54 	str	r3, [r6, #3668]	; 0xe54
   2f894:	e5863e58 	str	r3, [r6, #3672]	; 0xe58
   2f898:	e1a09001 	mov	r9, r1
   2f89c:	e5d01004 	ldrb	r1, [r0, #4]
   2f8a0:	e1a08000 	mov	r8, r0
   2f8a4:	ebffffb4 	bl	2f77c <MiniHDLC::sendChar(unsigned char)>
   2f8a8:	e3550000 	cmp	r5, #0
   2f8ac:	0a00002a 	beq	2f95c <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xdc>
   2f8b0:	e59f40b0 	ldr	r4, [pc, #176]	; 2f968 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xe8>
   2f8b4:	e59f70b0 	ldr	r7, [pc, #176]	; 2f96c <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xec>
   2f8b8:	e0895005 	add	r5, r9, r5
   2f8bc:	e4d91001 	ldrb	r1, [r9], #1
   2f8c0:	e1a00008 	mov	r0, r8
   2f8c4:	e0212424 	eor	r2, r1, r4, lsr #8
   2f8c8:	e1a02082 	lsl	r2, r2, #1
   2f8cc:	e19730b2 	ldrh	r3, [r7, r2]
   2f8d0:	e0233404 	eor	r3, r3, r4, lsl #8
   2f8d4:	e6bfa073 	sxth	sl, r3
   2f8d8:	e6ff4073 	uxth	r4, r3
   2f8dc:	ebffffd3 	bl	2f830 <MiniHDLC::sendEscaped(unsigned char)>
   2f8e0:	e1590005 	cmp	r9, r5
   2f8e4:	1afffff4 	bne	2f8bc <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0x3c>
   2f8e8:	e6ef107a 	uxtb	r1, sl
   2f8ec:	e1a03424 	lsr	r3, r4, #8
   2f8f0:	e5d82007 	ldrb	r2, [r8, #7]
   2f8f4:	e1a00008 	mov	r0, r8
   2f8f8:	e3520000 	cmp	r2, #0
   2f8fc:	01a04003 	moveq	r4, r3
   2f900:	11a04001 	movne	r4, r1
   2f904:	11a01003 	movne	r1, r3
   2f908:	ebffffc8 	bl	2f830 <MiniHDLC::sendEscaped(unsigned char)>
   2f90c:	e1a01004 	mov	r1, r4
   2f910:	e1a00008 	mov	r0, r8
   2f914:	ebffffc5 	bl	2f830 <MiniHDLC::sendEscaped(unsigned char)>
   2f918:	e1a00008 	mov	r0, r8
   2f91c:	e5d81004 	ldrb	r1, [r8, #4]
   2f920:	ebffff95 	bl	2f77c <MiniHDLC::sendChar(unsigned char)>
   2f924:	e59f3044 	ldr	r3, [pc, #68]	; 2f970 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xf0>
   2f928:	e5933000 	ldr	r3, [r3]
   2f92c:	e3530000 	cmp	r3, #0
   2f930:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f934:	e5961e54 	ldr	r1, [r6, #3668]	; 0xe54
   2f938:	e3510000 	cmp	r1, #0
   2f93c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f940:	e2880c27 	add	r0, r8, #9984	; 0x2700
   2f944:	e280003c 	add	r0, r0, #60	; 0x3c
   2f948:	e12fff33 	blx	r3
   2f94c:	e3a03000 	mov	r3, #0
   2f950:	e5863e54 	str	r3, [r6, #3668]	; 0xe54
   2f954:	e5863e58 	str	r3, [r6, #3672]	; 0xe58
   2f958:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f95c:	e3a030ff 	mov	r3, #255	; 0xff
   2f960:	e1a01003 	mov	r1, r3
   2f964:	eaffffe1 	b	2f8f0 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0x70>
   2f968:	0000ffff 	.word	0x0000ffff
   2f96c:	0004451c 	.word	0x0004451c
   2f970:	0004c65c 	.word	0x0004c65c

0002f974 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)>:
   2f974:	e3510000 	cmp	r1, #0
   2f978:	e1a02000 	mov	r2, r0
   2f97c:	0a00000d 	beq	2f9b8 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x44>
   2f980:	e0801001 	add	r1, r0, r1
   2f984:	e59fc034 	ldr	ip, [pc, #52]	; 2f9c0 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x4c>
   2f988:	e59f0034 	ldr	r0, [pc, #52]	; 2f9c4 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x50>
   2f98c:	e2411001 	sub	r1, r1, #1
   2f990:	e2422001 	sub	r2, r2, #1
   2f994:	e5f23001 	ldrb	r3, [r2, #1]!
   2f998:	e0233420 	eor	r3, r3, r0, lsr #8
   2f99c:	e1a03083 	lsl	r3, r3, #1
   2f9a0:	e19c30b3 	ldrh	r3, [ip, r3]
   2f9a4:	e1510002 	cmp	r1, r2
   2f9a8:	e0230400 	eor	r0, r3, r0, lsl #8
   2f9ac:	e6ff0070 	uxth	r0, r0
   2f9b0:	1afffff7 	bne	2f994 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x20>
   2f9b4:	e12fff1e 	bx	lr
   2f9b8:	e59f0004 	ldr	r0, [pc, #4]	; 2f9c4 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x50>
   2f9bc:	e12fff1e 	bx	lr
   2f9c0:	0004451c 	.word	0x0004451c
   2f9c4:	0000ffff 	.word	0x0000ffff

0002f9c8 <CommandHandler::hdlcFrameTxStatic(unsigned char const*, unsigned int)>:
   2f9c8:	e59f3018 	ldr	r3, [pc, #24]	; 2f9e8 <CommandHandler::hdlcFrameTxStatic(unsigned char const*, unsigned int)+0x20>
   2f9cc:	e5932000 	ldr	r2, [r3]
   2f9d0:	e3520000 	cmp	r2, #0
   2f9d4:	012fff1e 	bxeq	lr
   2f9d8:	e5933004 	ldr	r3, [r3, #4]
   2f9dc:	e3530000 	cmp	r3, #0
   2f9e0:	012fff1e 	bxeq	lr
   2f9e4:	e12fff13 	bx	r3
   2f9e8:	0004c664 	.word	0x0004c664

0002f9ec <CommandHandler::CommandHandler()>:
   2f9ec:	e92d4070 	push	{r4, r5, r6, lr}
   2f9f0:	e3a020d7 	mov	r2, #215	; 0xd7
   2f9f4:	e3a04000 	mov	r4, #0
   2f9f8:	e3a06001 	mov	r6, #1
   2f9fc:	e1a05000 	mov	r5, r0
   2fa00:	e59f3090 	ldr	r3, [pc, #144]	; 2fa98 <CommandHandler::CommandHandler()+0xac>
   2fa04:	e24dd018 	sub	sp, sp, #24
   2fa08:	e58d2000 	str	r2, [sp]
   2fa0c:	e58d3008 	str	r3, [sp, #8]
   2fa10:	e58d3004 	str	r3, [sp, #4]
   2fa14:	e59f2080 	ldr	r2, [pc, #128]	; 2fa9c <CommandHandler::CommandHandler()+0xb0>
   2fa18:	e3a030e7 	mov	r3, #231	; 0xe7
   2fa1c:	e59f107c 	ldr	r1, [pc, #124]	; 2faa0 <CommandHandler::CommandHandler()+0xb4>
   2fa20:	e58d4010 	str	r4, [sp, #16]
   2fa24:	e58d600c 	str	r6, [sp, #12]
   2fa28:	e2800f65 	add	r0, r0, #404	; 0x194
   2fa2c:	ebfffda2 	bl	2f0bc <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)>
   2fa30:	e59f006c 	ldr	r0, [pc, #108]	; 2faa4 <CommandHandler::CommandHandler()+0xb8>
   2fa34:	e3a01032 	mov	r1, #50	; 0x32
   2fa38:	e5805000 	str	r5, [r0]
   2fa3c:	e1a00005 	mov	r0, r5
   2fa40:	e2853a05 	add	r3, r5, #20480	; 0x5000
   2fa44:	e2852a07 	add	r2, r5, #28672	; 0x7000
   2fa48:	e5834870 	str	r4, [r3, #2160]	; 0x870
   2fa4c:	e5831878 	str	r1, [r3, #2168]	; 0x878
   2fa50:	e5834874 	str	r4, [r3, #2164]	; 0x874
   2fa54:	e58247fc 	str	r4, [r2, #2044]	; 0x7fc
   2fa58:	e5824800 	str	r4, [r2, #2048]	; 0x800
   2fa5c:	e5824804 	str	r4, [r2, #2052]	; 0x804
   2fa60:	e5824808 	str	r4, [r2, #2056]	; 0x808
   2fa64:	e5854190 	str	r4, [r5, #400]	; 0x190
   2fa68:	e5c34066 	strb	r4, [r3, #102]	; 0x66
   2fa6c:	e5c3408f 	strb	r4, [r3, #143]	; 0x8f
   2fa70:	e5834860 	str	r4, [r3, #2144]	; 0x860
   2fa74:	e5834864 	str	r4, [r3, #2148]	; 0x864
   2fa78:	e5834868 	str	r4, [r3, #2152]	; 0x868
   2fa7c:	e583486c 	str	r4, [r3, #2156]	; 0x86c
   2fa80:	e1c360b0 	strh	r6, [r3]
   2fa84:	e58348b0 	str	r4, [r3, #2224]	; 0x8b0
   2fa88:	e58247f4 	str	r4, [r2, #2036]	; 0x7f4
   2fa8c:	e5c267f8 	strb	r6, [r2, #2040]	; 0x7f8
   2fa90:	e28dd018 	add	sp, sp, #24
   2fa94:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fa98:	00002710 	.word	0x00002710
   2fa9c:	00030a94 	.word	0x00030a94
   2faa0:	0002f9c8 	.word	0x0002f9c8
   2faa4:	0004c664 	.word	0x0004c664

0002faa8 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>:
   2faa8:	e1a0c000 	mov	ip, r0
   2faac:	e5900190 	ldr	r0, [r0, #400]	; 0x190
   2fab0:	e3500013 	cmp	r0, #19
   2fab4:	8a00000c 	bhi	2faec <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))+0x44>
   2fab8:	e92d4010 	push	{r4, lr}
   2fabc:	e0804100 	add	r4, r0, r0, lsl #2
   2fac0:	e08ce104 	add	lr, ip, r4, lsl #2
   2fac4:	e78c1104 	str	r1, [ip, r4, lsl #2]
   2fac8:	e58e3008 	str	r3, [lr, #8]
   2facc:	e59d3008 	ldr	r3, [sp, #8]
   2fad0:	e2801001 	add	r1, r0, #1
   2fad4:	e58e300c 	str	r3, [lr, #12]
   2fad8:	e59d300c 	ldr	r3, [sp, #12]
   2fadc:	e5ce2004 	strb	r2, [lr, #4]
   2fae0:	e58e3010 	str	r3, [lr, #16]
   2fae4:	e58c1190 	str	r1, [ip, #400]	; 0x190
   2fae8:	e8bd8010 	pop	{r4, pc}
   2faec:	e3e00000 	mvn	r0, #0
   2faf0:	e12fff1e 	bx	lr

0002faf4 <CommandHandler::commsSocketEnable(unsigned int, bool)>:
   2faf4:	e5903190 	ldr	r3, [r0, #400]	; 0x190
   2faf8:	e1530001 	cmp	r3, r1
   2fafc:	80811101 	addhi	r1, r1, r1, lsl #2
   2fb00:	80801101 	addhi	r1, r0, r1, lsl #2
   2fb04:	85c12004 	strbhi	r2, [r1, #4]
   2fb08:	e12fff1e 	bx	lr

0002fb0c <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)>:
   2fb0c:	e59f3010 	ldr	r3, [pc, #16]	; 2fb24 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)+0x18>
   2fb10:	e5930000 	ldr	r0, [r3]
   2fb14:	e3500000 	cmp	r0, #0
   2fb18:	012fff1e 	bxeq	lr
   2fb1c:	e2800f65 	add	r0, r0, #404	; 0x194
   2fb20:	eafffe65 	b	2f4bc <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)>
   2fb24:	0004c664 	.word	0x0004c664

0002fb28 <CommandHandler::hdlcTxAvailableStatic()>:
   2fb28:	e59f3020 	ldr	r3, [pc, #32]	; 2fb50 <CommandHandler::hdlcTxAvailableStatic()+0x28>
   2fb2c:	e5932000 	ldr	r2, [r3]
   2fb30:	e3520000 	cmp	r2, #0
   2fb34:	0a000003 	beq	2fb48 <CommandHandler::hdlcTxAvailableStatic()+0x20>
   2fb38:	e5933008 	ldr	r3, [r3, #8]
   2fb3c:	e3530000 	cmp	r3, #0
   2fb40:	0a000000 	beq	2fb48 <CommandHandler::hdlcTxAvailableStatic()+0x20>
   2fb44:	e12fff13 	bx	r3
   2fb48:	e3a00000 	mov	r0, #0
   2fb4c:	e12fff1e 	bx	lr
   2fb50:	0004c664 	.word	0x0004c664

0002fb54 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>:
   2fb54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fb58:	e1a07000 	mov	r7, r0
   2fb5c:	e5900190 	ldr	r0, [r0, #400]	; 0x190
   2fb60:	e1a08001 	mov	r8, r1
   2fb64:	e3500000 	cmp	r0, #0
   2fb68:	e1a09002 	mov	r9, r2
   2fb6c:	e1a0a003 	mov	sl, r3
   2fb70:	e24dd00c 	sub	sp, sp, #12
   2fb74:	0a00002f 	beq	2fc38 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xe4>
   2fb78:	e1a04007 	mov	r4, r7
   2fb7c:	e3a05000 	mov	r5, #0
   2fb80:	e59fb0d4 	ldr	fp, [pc, #212]	; 2fc5c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x108>
   2fb84:	ea00000f 	b	2fbc8 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x74>
   2fb88:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   2fb8c:	e1a02009 	mov	r2, r9
   2fb90:	e58d3004 	str	r3, [sp, #4]
   2fb94:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   2fb98:	e1a01008 	mov	r1, r8
   2fb9c:	e58d3000 	str	r3, [sp]
   2fba0:	e5940000 	ldr	r0, [r4]
   2fba4:	e1a0300a 	mov	r3, sl
   2fba8:	e12fff36 	blx	r6
   2fbac:	e3500000 	cmp	r0, #0
   2fbb0:	1a00001e 	bne	2fc30 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xdc>
   2fbb4:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2fbb8:	e2855001 	add	r5, r5, #1
   2fbbc:	e1500005 	cmp	r0, r5
   2fbc0:	e2844014 	add	r4, r4, #20
   2fbc4:	9a000019 	bls	2fc30 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xdc>
   2fbc8:	e5d43004 	ldrb	r3, [r4, #4]
   2fbcc:	e3530000 	cmp	r3, #0
   2fbd0:	0a00000b 	beq	2fc04 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xb0>
   2fbd4:	e5946008 	ldr	r6, [r4, #8]
   2fbd8:	e3560000 	cmp	r6, #0
   2fbdc:	1affffe9 	bne	2fb88 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x34>
   2fbe0:	e3550000 	cmp	r5, #0
   2fbe4:	0afffff3 	beq	2fbb8 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x64>
   2fbe8:	ebffdbb9 	bl	26ad4 <CLogger::Get()>
   2fbec:	e3a02004 	mov	r2, #4
   2fbf0:	e1a0100b 	mov	r1, fp
   2fbf4:	e59f3064 	ldr	r3, [pc, #100]	; 2fc60 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x10c>
   2fbf8:	e58d5000 	str	r5, [sp]
   2fbfc:	ebffdaf6 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fc00:	eaffffeb 	b	2fbb4 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x60>
   2fc04:	ebffdbb2 	bl	26ad4 <CLogger::Get()>
   2fc08:	e58d5000 	str	r5, [sp]
   2fc0c:	e3a02004 	mov	r2, #4
   2fc10:	e1a0100b 	mov	r1, fp
   2fc14:	e59f3048 	ldr	r3, [pc, #72]	; 2fc64 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x110>
   2fc18:	ebffdaef 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fc1c:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2fc20:	e2855001 	add	r5, r5, #1
   2fc24:	e1500005 	cmp	r0, r5
   2fc28:	e2844014 	add	r4, r4, #20
   2fc2c:	8affffe5 	bhi	2fbc8 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x74>
   2fc30:	e28dd00c 	add	sp, sp, #12
   2fc34:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fc38:	ebffdba5 	bl	26ad4 <CLogger::Get()>
   2fc3c:	e3a02004 	mov	r2, #4
   2fc40:	e59f3020 	ldr	r3, [pc, #32]	; 2fc68 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x114>
   2fc44:	e59f1010 	ldr	r1, [pc, #16]	; 2fc5c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x108>
   2fc48:	ebffdae3 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fc4c:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2fc50:	e3500000 	cmp	r0, #0
   2fc54:	1affffc7 	bne	2fb78 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x24>
   2fc58:	eafffff4 	b	2fc30 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xdc>
   2fc5c:	00044b18 	.word	0x00044b18
   2fc60:	0004476c 	.word	0x0004476c
   2fc64:	00044754 	.word	0x00044754
   2fc68:	0004472c 	.word	0x0004472c

0002fc6c <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)>:
   2fc6c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fc70:	e1a06000 	mov	r6, r0
   2fc74:	e5900190 	ldr	r0, [r0, #400]	; 0x190
   2fc78:	e5dd7028 	ldrb	r7, [sp, #40]	; 0x28
   2fc7c:	e3500000 	cmp	r0, #0
   2fc80:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fc84:	e1a09001 	mov	r9, r1
   2fc88:	e1a08002 	mov	r8, r2
   2fc8c:	e1a0a003 	mov	sl, r3
   2fc90:	e1a04006 	mov	r4, r6
   2fc94:	e3a05000 	mov	r5, #0
   2fc98:	ea00000c 	b	2fcd0 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x64>
   2fc9c:	e594300c 	ldr	r3, [r4, #12]
   2fca0:	e3530000 	cmp	r3, #0
   2fca4:	0a000005 	beq	2fcc0 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2fca8:	e1a0100a 	mov	r1, sl
   2fcac:	e1a00008 	mov	r0, r8
   2fcb0:	e12fff33 	blx	r3
   2fcb4:	e3500000 	cmp	r0, #0
   2fcb8:	18bd8ff8 	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fcbc:	e5960190 	ldr	r0, [r6, #400]	; 0x190
   2fcc0:	e2855001 	add	r5, r5, #1
   2fcc4:	e1500005 	cmp	r0, r5
   2fcc8:	e2844014 	add	r4, r4, #20
   2fccc:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fcd0:	e5d4c004 	ldrb	ip, [r4, #4]
   2fcd4:	e35c0000 	cmp	ip, #0
   2fcd8:	0afffff8 	beq	2fcc0 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2fcdc:	e3570000 	cmp	r7, #0
   2fce0:	1affffed 	bne	2fc9c <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x30>
   2fce4:	e594b010 	ldr	fp, [r4, #16]
   2fce8:	e35b0000 	cmp	fp, #0
   2fcec:	0afffff3 	beq	2fcc0 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2fcf0:	e1a0300a 	mov	r3, sl
   2fcf4:	e1a02008 	mov	r2, r8
   2fcf8:	e1a01009 	mov	r1, r9
   2fcfc:	e5940000 	ldr	r0, [r4]
   2fd00:	e12fff3b 	blx	fp
   2fd04:	e3500000 	cmp	r0, #0
   2fd08:	0affffeb 	beq	2fcbc <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x50>
   2fd0c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002fd10 <CommandHandler::getFileReceiveStatus(unsigned long&, unsigned long&)>:
   2fd10:	e2803a05 	add	r3, r0, #20480	; 0x5000
   2fd14:	e5930864 	ldr	r0, [r3, #2148]	; 0x864
   2fd18:	e3500000 	cmp	r0, #0
   2fd1c:	012fff1e 	bxeq	lr
   2fd20:	e5933868 	ldr	r3, [r3, #2152]	; 0x868
   2fd24:	e1500003 	cmp	r0, r3
   2fd28:	15810000 	strne	r0, [r1]
   2fd2c:	13a00001 	movne	r0, #1
   2fd30:	15823000 	strne	r3, [r2]
   2fd34:	03a00000 	moveq	r0, #0
   2fd38:	e12fff1e 	bx	lr

0002fd3c <CommandHandler::sendKeyStrToTarget(char const*)>:
   2fd3c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2fd40:	e3a04000 	mov	r4, #0
   2fd44:	e1a06000 	mov	r6, r0
   2fd48:	e1a09001 	mov	r9, r1
   2fd4c:	e1a07004 	mov	r7, r4
   2fd50:	e59f50a0 	ldr	r5, [pc, #160]	; 2fdf8 <CommandHandler::sendKeyStrToTarget(char const*)+0xbc>
   2fd54:	e2808a05 	add	r8, r0, #20480	; 0x5000
   2fd58:	ea00000f 	b	2fd9c <CommandHandler::sendKeyStrToTarget(char const*)+0x60>
   2fd5c:	e3510000 	cmp	r1, #0
   2fd60:	01520003 	cmpeq	r2, r3
   2fd64:	0a00000b 	beq	2fd98 <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2fd68:	e5983870 	ldr	r3, [r8, #2160]	; 0x870
   2fd6c:	e7d92004 	ldrb	r2, [r9, r4]
   2fd70:	e0863003 	add	r3, r6, r3
   2fd74:	e2833b16 	add	r3, r3, #22528	; 0x5800
   2fd78:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
   2fd7c:	e5983870 	ldr	r3, [r8, #2160]	; 0x870
   2fd80:	e5982878 	ldr	r2, [r8, #2168]	; 0x878
   2fd84:	e2833001 	add	r3, r3, #1
   2fd88:	e5883870 	str	r3, [r8, #2160]	; 0x870
   2fd8c:	e5983870 	ldr	r3, [r8, #2160]	; 0x870
   2fd90:	e1530002 	cmp	r3, r2
   2fd94:	25887870 	strcs	r7, [r8, #2160]	; 0x870
   2fd98:	e2844001 	add	r4, r4, #1
   2fd9c:	e1a00009 	mov	r0, r9
   2fda0:	ebffe889 	bl	29fcc <strlen>
   2fda4:	e1500004 	cmp	r0, r4
   2fda8:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   2fdac:	e5953000 	ldr	r3, [r5]
   2fdb0:	e2833a05 	add	r3, r3, #20480	; 0x5000
   2fdb4:	e5932878 	ldr	r2, [r3, #2168]	; 0x878
   2fdb8:	e3520000 	cmp	r2, #0
   2fdbc:	0afffff5 	beq	2fd98 <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2fdc0:	e5930870 	ldr	r0, [r3, #2160]	; 0x870
   2fdc4:	e5931874 	ldr	r1, [r3, #2164]	; 0x874
   2fdc8:	e1500001 	cmp	r0, r1
   2fdcc:	0affffe5 	beq	2fd68 <CommandHandler::sendKeyStrToTarget(char const*)+0x2c>
   2fdd0:	e5931874 	ldr	r1, [r3, #2164]	; 0x874
   2fdd4:	e5930870 	ldr	r0, [r3, #2160]	; 0x870
   2fdd8:	e2422001 	sub	r2, r2, #1
   2fddc:	e1510000 	cmp	r1, r0
   2fde0:	e5933870 	ldr	r3, [r3, #2160]	; 0x870
   2fde4:	3affffdc 	bcc	2fd5c <CommandHandler::sendKeyStrToTarget(char const*)+0x20>
   2fde8:	e0411003 	sub	r1, r1, r3
   2fdec:	e3510001 	cmp	r1, #1
   2fdf0:	9affffe8 	bls	2fd98 <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2fdf4:	eaffffdb 	b	2fd68 <CommandHandler::sendKeyStrToTarget(char const*)+0x2c>
   2fdf8:	0004c664 	.word	0x0004c664

0002fdfc <CommandHandler::sendKeyStrToTargetStatic(char const*)>:
   2fdfc:	e59f300c 	ldr	r3, [pc, #12]	; 2fe10 <CommandHandler::sendKeyStrToTargetStatic(char const*)+0x14>
   2fe00:	e5930000 	ldr	r0, [r3]
   2fe04:	e3500000 	cmp	r0, #0
   2fe08:	012fff1e 	bxeq	lr
   2fe0c:	eaffffca 	b	2fd3c <CommandHandler::sendKeyStrToTarget(char const*)>
   2fe10:	0004c664 	.word	0x0004c664

0002fe14 <CommandHandler::getTxAvailable()>:
   2fe14:	e59f3020 	ldr	r3, [pc, #32]	; 2fe3c <CommandHandler::getTxAvailable()+0x28>
   2fe18:	e5932000 	ldr	r2, [r3]
   2fe1c:	e3520000 	cmp	r2, #0
   2fe20:	0a000003 	beq	2fe34 <CommandHandler::getTxAvailable()+0x20>
   2fe24:	e5933008 	ldr	r3, [r3, #8]
   2fe28:	e3530000 	cmp	r3, #0
   2fe2c:	0a000000 	beq	2fe34 <CommandHandler::getTxAvailable()+0x20>
   2fe30:	e12fff13 	bx	r3
   2fe34:	e3a00000 	mov	r0, #0
   2fe38:	e12fff1e 	bx	lr
   2fe3c:	0004c664 	.word	0x0004c664

0002fe40 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>:
   2fe40:	e92d4070 	push	{r4, r5, r6, lr}
   2fe44:	e1a06001 	mov	r6, r1
   2fe48:	e1a04002 	mov	r4, r2
   2fe4c:	e24ddc4e 	sub	sp, sp, #19968	; 0x4e00
   2fe50:	e24dd050 	sub	sp, sp, #80	; 0x50
   2fe54:	e28d2c4e 	add	r2, sp, #19968	; 0x4e00
   2fe58:	e5925064 	ldr	r5, [r2, #100]	; 0x64
   2fe5c:	e28dc030 	add	ip, sp, #48	; 0x30
   2fe60:	e3a01014 	mov	r1, #20
   2fe64:	e2822064 	add	r2, r2, #100	; 0x64
   2fe68:	e28d0008 	add	r0, sp, #8
   2fe6c:	e59f2180 	ldr	r2, [pc, #384]	; 2fff4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b4>
   2fe70:	e58dc004 	str	ip, [sp, #4]
   2fe74:	ebfff866 	bl	2e014 <snprintf>
   2fe78:	e1a03005 	mov	r3, r5
   2fe7c:	e3a01014 	mov	r1, #20
   2fe80:	e59f216c 	ldr	r2, [pc, #364]	; 2fff4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b4>
   2fe84:	e28d001c 	add	r0, sp, #28
   2fe88:	ebfff861 	bl	2e014 <snprintf>
   2fe8c:	e59f2164 	ldr	r2, [pc, #356]	; 2fff8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2fe90:	e59f1164 	ldr	r1, [pc, #356]	; 2fffc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1bc>
   2fe94:	e59d0004 	ldr	r0, [sp, #4]
   2fe98:	ebfff7f1 	bl	2de64 <strlcpy>
   2fe9c:	e1a01006 	mov	r1, r6
   2fea0:	e59f2150 	ldr	r2, [pc, #336]	; 2fff8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2fea4:	e59d0004 	ldr	r0, [sp, #4]
   2fea8:	ebfff809 	bl	2ded4 <strlcat>
   2feac:	e59f2144 	ldr	r2, [pc, #324]	; 2fff8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2feb0:	e59f1148 	ldr	r1, [pc, #328]	; 30000 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c0>
   2feb4:	e59d0004 	ldr	r0, [sp, #4]
   2feb8:	ebfff805 	bl	2ded4 <strlcat>
   2febc:	e1a00004 	mov	r0, r4
   2fec0:	ebffe841 	bl	29fcc <strlen>
   2fec4:	e3500000 	cmp	r0, #0
   2fec8:	1a000038 	bne	2ffb0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x170>
   2fecc:	e59f2124 	ldr	r2, [pc, #292]	; 2fff8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2fed0:	e59f112c 	ldr	r1, [pc, #300]	; 30004 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c4>
   2fed4:	e59d0004 	ldr	r0, [sp, #4]
   2fed8:	ebfff7fd 	bl	2ded4 <strlcat>
   2fedc:	e59f2114 	ldr	r2, [pc, #276]	; 2fff8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2fee0:	e28d1008 	add	r1, sp, #8
   2fee4:	e59d0004 	ldr	r0, [sp, #4]
   2fee8:	ebfff7f9 	bl	2ded4 <strlcat>
   2feec:	e59f2104 	ldr	r2, [pc, #260]	; 2fff8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2fef0:	e59f1110 	ldr	r1, [pc, #272]	; 30008 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c8>
   2fef4:	e59d0004 	ldr	r0, [sp, #4]
   2fef8:	ebfff7f5 	bl	2ded4 <strlcat>
   2fefc:	e59f20f4 	ldr	r2, [pc, #244]	; 2fff8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff00:	e28d101c 	add	r1, sp, #28
   2ff04:	e59d0004 	ldr	r0, [sp, #4]
   2ff08:	ebfff7f1 	bl	2ded4 <strlcat>
   2ff0c:	e59f20e4 	ldr	r2, [pc, #228]	; 2fff8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff10:	e59f10f4 	ldr	r1, [pc, #244]	; 3000c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1cc>
   2ff14:	e59d0004 	ldr	r0, [sp, #4]
   2ff18:	ebfff7ed 	bl	2ded4 <strlcat>
   2ff1c:	e59d0004 	ldr	r0, [sp, #4]
   2ff20:	ebffe829 	bl	29fcc <strlen>
   2ff24:	e2800001 	add	r0, r0, #1
   2ff28:	e59f30e0 	ldr	r3, [pc, #224]	; 30010 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d0>
   2ff2c:	e0854000 	add	r4, r5, r0
   2ff30:	e2846001 	add	r6, r4, #1
   2ff34:	e1560003 	cmp	r6, r3
   2ff38:	8a000025 	bhi	2ffd4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x194>
   2ff3c:	e3550000 	cmp	r5, #0
   2ff40:	0a00000b 	beq	2ff74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x134>
   2ff44:	e28d3c4e 	add	r3, sp, #19968	; 0x4e00
   2ff48:	e2833060 	add	r3, r3, #96	; 0x60
   2ff4c:	e5933000 	ldr	r3, [r3]
   2ff50:	e3530000 	cmp	r3, #0
   2ff54:	0a000012 	beq	2ffa4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x164>
   2ff58:	e59d3004 	ldr	r3, [sp, #4]
   2ff5c:	e1a02005 	mov	r2, r5
   2ff60:	e0830000 	add	r0, r3, r0
   2ff64:	e28d3c4e 	add	r3, sp, #19968	; 0x4e00
   2ff68:	e5931060 	ldr	r1, [r3, #96]	; 0x60
   2ff6c:	e2833060 	add	r3, r3, #96	; 0x60
   2ff70:	ebffea10 	bl	2a7b8 <memcpy>
   2ff74:	e3a02000 	mov	r2, #0
   2ff78:	e59f3094 	ldr	r3, [pc, #148]	; 30014 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d4>
   2ff7c:	e5930000 	ldr	r0, [r3]
   2ff80:	e28d3ee5 	add	r3, sp, #3664	; 0xe50
   2ff84:	e0833004 	add	r3, r3, r4
   2ff88:	e1500002 	cmp	r0, r2
   2ff8c:	e5432e20 	strb	r2, [r3, #-3616]	; 0xfffff1e0
   2ff90:	0a000003 	beq	2ffa4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x164>
   2ff94:	e1a02006 	mov	r2, r6
   2ff98:	e59d1004 	ldr	r1, [sp, #4]
   2ff9c:	e2800f65 	add	r0, r0, #404	; 0x194
   2ffa0:	ebfffe36 	bl	2f880 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>
   2ffa4:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   2ffa8:	e28dd050 	add	sp, sp, #80	; 0x50
   2ffac:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ffb0:	e59f2040 	ldr	r2, [pc, #64]	; 2fff8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ffb4:	e59f105c 	ldr	r1, [pc, #92]	; 30018 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d8>
   2ffb8:	e59d0004 	ldr	r0, [sp, #4]
   2ffbc:	ebfff7c4 	bl	2ded4 <strlcat>
   2ffc0:	e1a01004 	mov	r1, r4
   2ffc4:	e59f202c 	ldr	r2, [pc, #44]	; 2fff8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ffc8:	e59d0004 	ldr	r0, [sp, #4]
   2ffcc:	ebfff7c0 	bl	2ded4 <strlcat>
   2ffd0:	eaffffbd 	b	2fecc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x8c>
   2ffd4:	ebffdabe 	bl	26ad4 <CLogger::Get()>
   2ffd8:	e3a02002 	mov	r2, #2
   2ffdc:	e59f3038 	ldr	r3, [pc, #56]	; 3001c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1dc>
   2ffe0:	e59f1038 	ldr	r1, [pc, #56]	; 30020 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1e0>
   2ffe4:	ebffd9fc 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2ffe8:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   2ffec:	e28dd050 	add	sp, sp, #80	; 0x50
   2fff0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fff4:	00044780 	.word	0x00044780
   2fff8:	00004e20 	.word	0x00004e20
   2fffc:	00044784 	.word	0x00044784
   30000:	00045258 	.word	0x00045258
   30004:	00044794 	.word	0x00044794
   30008:	000447a0 	.word	0x000447a0
   3000c:	000447c8 	.word	0x000447c8
   30010:	00004e1f 	.word	0x00004e1f
   30014:	0004c664 	.word	0x0004c664
   30018:	0003ff60 	.word	0x0003ff60
   3001c:	000447ac 	.word	0x000447ac
   30020:	00044b18 	.word	0x00044b18

00030024 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>:
   30024:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   30028:	e1a08002 	mov	r8, r2
   3002c:	e1a07003 	mov	r7, r3
   30030:	e1a05001 	mov	r5, r1
   30034:	e24ddc27 	sub	sp, sp, #9984	; 0x2700
   30038:	e24dd028 	sub	sp, sp, #40	; 0x28
   3003c:	e1a03001 	mov	r3, r1
   30040:	e28d4018 	add	r4, sp, #24
   30044:	e3a0100a 	mov	r1, #10
   30048:	e59f20c0 	ldr	r2, [pc, #192]	; 30110 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xec>
   3004c:	e1a06000 	mov	r6, r0
   30050:	e28d000c 	add	r0, sp, #12
   30054:	ebfff7ee 	bl	2e014 <snprintf>
   30058:	e59f20b4 	ldr	r2, [pc, #180]	; 30114 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   3005c:	e59f10b4 	ldr	r1, [pc, #180]	; 30118 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf4>
   30060:	e1a00004 	mov	r0, r4
   30064:	ebfff77e 	bl	2de64 <strlcpy>
   30068:	e1a01008 	mov	r1, r8
   3006c:	e59f20a0 	ldr	r2, [pc, #160]	; 30114 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   30070:	e1a00004 	mov	r0, r4
   30074:	ebfff796 	bl	2ded4 <strlcat>
   30078:	e59f2094 	ldr	r2, [pc, #148]	; 30114 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   3007c:	e59f1098 	ldr	r1, [pc, #152]	; 3011c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf8>
   30080:	e1a00004 	mov	r0, r4
   30084:	ebfff792 	bl	2ded4 <strlcat>
   30088:	e59f2084 	ldr	r2, [pc, #132]	; 30114 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   3008c:	e59f108c 	ldr	r1, [pc, #140]	; 30120 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xfc>
   30090:	e1a00004 	mov	r0, r4
   30094:	ebfff78e 	bl	2ded4 <strlcat>
   30098:	e1a01007 	mov	r1, r7
   3009c:	e1a00004 	mov	r0, r4
   300a0:	e59f206c 	ldr	r2, [pc, #108]	; 30114 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   300a4:	ebfff78a 	bl	2ded4 <strlcat>
   300a8:	e3750001 	cmn	r5, #1
   300ac:	0a000007 	beq	300d0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xac>
   300b0:	e59f205c 	ldr	r2, [pc, #92]	; 30114 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   300b4:	e59f1068 	ldr	r1, [pc, #104]	; 30124 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x100>
   300b8:	e1a00004 	mov	r0, r4
   300bc:	ebfff784 	bl	2ded4 <strlcat>
   300c0:	e1a00004 	mov	r0, r4
   300c4:	e59f2048 	ldr	r2, [pc, #72]	; 30114 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   300c8:	e28d100c 	add	r1, sp, #12
   300cc:	ebfff780 	bl	2ded4 <strlcat>
   300d0:	e59f203c 	ldr	r2, [pc, #60]	; 30114 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   300d4:	e59f104c 	ldr	r1, [pc, #76]	; 30128 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x104>
   300d8:	e1a00004 	mov	r0, r4
   300dc:	ebfff77c 	bl	2ded4 <strlcat>
   300e0:	e1a00004 	mov	r0, r4
   300e4:	ebffe7b8 	bl	29fcc <strlen>
   300e8:	e1a03005 	mov	r3, r5
   300ec:	e58d0004 	str	r0, [sp, #4]
   300f0:	e59f2034 	ldr	r2, [pc, #52]	; 3012c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x108>
   300f4:	e1a00006 	mov	r0, r6
   300f8:	e59f1030 	ldr	r1, [pc, #48]	; 30130 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x10c>
   300fc:	e58d4000 	str	r4, [sp]
   30100:	ebffff4e 	bl	2fe40 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30104:	e28ddc27 	add	sp, sp, #9984	; 0x2700
   30108:	e28dd028 	add	sp, sp, #40	; 0x28
   3010c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   30110:	00044780 	.word	0x00044780
   30114:	00002710 	.word	0x00002710
   30118:	00044784 	.word	0x00044784
   3011c:	00045258 	.word	0x00045258
   30120:	0003ff60 	.word	0x0003ff60
   30124:	00044794 	.word	0x00044794
   30128:	000447bc 	.word	0x000447bc
   3012c:	00045ac0 	.word	0x00045ac0
   30130:	000447cc 	.word	0x000447cc

00030134 <CommandHandler::sendUnnumberedMsg(char const*, char const*)>:
   30134:	e1a0c001 	mov	ip, r1
   30138:	e1a03002 	mov	r3, r2
   3013c:	e3e01000 	mvn	r1, #0
   30140:	e1a0200c 	mov	r2, ip
   30144:	eaffffb6 	b	30024 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>

00030148 <CommandHandler::handleFileStart(char const*)>:
   30148:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3014c:	e2806a05 	add	r6, r0, #20480	; 0x5000
   30150:	e1a04000 	mov	r4, r0
   30154:	e3a03064 	mov	r3, #100	; 0x64
   30158:	e59f00f0 	ldr	r0, [pc, #240]	; 30250 <CommandHandler::handleFileStart(char const*)+0x108>
   3015c:	e24dd024 	sub	sp, sp, #36	; 0x24
   30160:	e2862001 	add	r2, r6, #1
   30164:	e1a05001 	mov	r5, r1
   30168:	ebfff7ea 	bl	2e118 <jsonGetValueForKey>
   3016c:	e3500000 	cmp	r0, #0
   30170:	1a000001 	bne	3017c <CommandHandler::handleFileStart(char const*)+0x34>
   30174:	e28dd024 	add	sp, sp, #36	; 0x24
   30178:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3017c:	e3a03028 	mov	r3, #40	; 0x28
   30180:	e1a01005 	mov	r1, r5
   30184:	e59f00c8 	ldr	r0, [pc, #200]	; 30254 <CommandHandler::handleFileStart(char const*)+0x10c>
   30188:	e2862066 	add	r2, r6, #102	; 0x66
   3018c:	ebfff7e1 	bl	2e118 <jsonGetValueForKey>
   30190:	e3500000 	cmp	r0, #0
   30194:	0afffff6 	beq	30174 <CommandHandler::handleFileStart(char const*)+0x2c>
   30198:	e3a03014 	mov	r3, #20
   3019c:	e1a01005 	mov	r1, r5
   301a0:	e59f00b0 	ldr	r0, [pc, #176]	; 30258 <CommandHandler::handleFileStart(char const*)+0x110>
   301a4:	e28d2008 	add	r2, sp, #8
   301a8:	ebfff7da 	bl	2e118 <jsonGetValueForKey>
   301ac:	e3500000 	cmp	r0, #0
   301b0:	0affffef 	beq	30174 <CommandHandler::handleFileStart(char const*)+0x2c>
   301b4:	e3a0200a 	mov	r2, #10
   301b8:	e3a01000 	mov	r1, #0
   301bc:	e28d0008 	add	r0, sp, #8
   301c0:	ebffe8a9 	bl	2a46c <strtoul>
   301c4:	e1a01005 	mov	r1, r5
   301c8:	e1a07000 	mov	r7, r0
   301cc:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   301d0:	e286008f 	add	r0, r6, #143	; 0x8f
   301d4:	ebfff722 	bl	2de64 <strlcpy>
   301d8:	e5960860 	ldr	r0, [r6, #2144]	; 0x860
   301dc:	e3500000 	cmp	r0, #0
   301e0:	0a000000 	beq	301e8 <CommandHandler::handleFileStart(char const*)+0xa0>
   301e4:	ebffeb66 	bl	2af84 <operator delete[](void*)>
   301e8:	e1a00007 	mov	r0, r7
   301ec:	ebffeb5d 	bl	2af68 <operator new[](unsigned int)>
   301f0:	e3a05000 	mov	r5, #0
   301f4:	e5860860 	str	r0, [r6, #2144]	; 0x860
   301f8:	e5867864 	str	r7, [r6, #2148]	; 0x864
   301fc:	e5865868 	str	r5, [r6, #2152]	; 0x868
   30200:	e586586c 	str	r5, [r6, #2156]	; 0x86c
   30204:	ebfff6dd 	bl	2dd80 <millis>
   30208:	e2842a07 	add	r2, r4, #28672	; 0x7000
   3020c:	e282ce7f 	add	ip, r2, #2032	; 0x7f0
   30210:	e2843c4f 	add	r3, r4, #20224	; 0x4f00
   30214:	e58608b0 	str	r0, [r6, #2224]	; 0x8b0
   30218:	e28cc00c 	add	ip, ip, #12
   3021c:	e58257f4 	str	r5, [r2, #2036]	; 0x7f4
   30220:	e28330f0 	add	r3, r3, #240	; 0xf0
   30224:	e58d5004 	str	r5, [sp, #4]
   30228:	e58d5000 	str	r5, [sp]
   3022c:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   30230:	e88c000f 	stm	ip, {r0, r1, r2, r3}
   30234:	e1a03005 	mov	r3, r5
   30238:	e1a00004 	mov	r0, r4
   3023c:	e59f2018 	ldr	r2, [pc, #24]	; 3025c <CommandHandler::handleFileStart(char const*)+0x114>
   30240:	e59f1018 	ldr	r1, [pc, #24]	; 30260 <CommandHandler::handleFileStart(char const*)+0x118>
   30244:	ebfffefd 	bl	2fe40 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30248:	e28dd024 	add	sp, sp, #36	; 0x24
   3024c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   30250:	000447d0 	.word	0x000447d0
   30254:	000447dc 	.word	0x000447dc
   30258:	000447e8 	.word	0x000447e8
   3025c:	00045ac0 	.word	0x00045ac0
   30260:	000447f0 	.word	0x000447f0

00030264 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)>:
   30264:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   30268:	e2807a05 	add	r7, r0, #20480	; 0x5000
   3026c:	e1a04000 	mov	r4, r0
   30270:	e5970860 	ldr	r0, [r7, #2144]	; 0x860
   30274:	e24dd088 	sub	sp, sp, #136	; 0x88
   30278:	e3500000 	cmp	r0, #0
   3027c:	0a000007 	beq	302a0 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x3c>
   30280:	e1a06002 	mov	r6, r2
   30284:	e1a05003 	mov	r5, r3
   30288:	e59f00cc 	ldr	r0, [pc, #204]	; 3035c <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0xf8>
   3028c:	e3a03014 	mov	r3, #20
   30290:	e28d200c 	add	r2, sp, #12
   30294:	ebfff79f 	bl	2e118 <jsonGetValueForKey>
   30298:	e3500000 	cmp	r0, #0
   3029c:	1a000001 	bne	302a8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x44>
   302a0:	e28dd088 	add	sp, sp, #136	; 0x88
   302a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   302a8:	e3a0200a 	mov	r2, #10
   302ac:	e3a01000 	mov	r1, #0
   302b0:	e28d000c 	add	r0, sp, #12
   302b4:	ebffe86c 	bl	2a46c <strtoul>
   302b8:	e5973864 	ldr	r3, [r7, #2148]	; 0x864
   302bc:	e0802005 	add	r2, r0, r5
   302c0:	e1520003 	cmp	r2, r3
   302c4:	e1a08000 	mov	r8, r0
   302c8:	8afffff4 	bhi	302a0 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x3c>
   302cc:	e5970860 	ldr	r0, [r7, #2144]	; 0x860
   302d0:	e1a01006 	mov	r1, r6
   302d4:	e1a02005 	mov	r2, r5
   302d8:	e0800008 	add	r0, r0, r8
   302dc:	ebffe935 	bl	2a7b8 <memcpy>
   302e0:	e5972868 	ldr	r2, [r7, #2152]	; 0x868
   302e4:	e597386c 	ldr	r3, [r7, #2156]	; 0x86c
   302e8:	e0822005 	add	r2, r2, r5
   302ec:	e2833001 	add	r3, r3, #1
   302f0:	e5872868 	str	r2, [r7, #2152]	; 0x868
   302f4:	e587386c 	str	r3, [r7, #2156]	; 0x86c
   302f8:	ebfff6a0 	bl	2dd80 <millis>
   302fc:	e284ca07 	add	ip, r4, #28672	; 0x7000
   30300:	e58708b0 	str	r0, [r7, #2224]	; 0x8b0
   30304:	e59c37f4 	ldr	r3, [ip, #2036]	; 0x7f4
   30308:	e28d0024 	add	r0, sp, #36	; 0x24
   3030c:	e0841103 	add	r1, r4, r3, lsl #2
   30310:	e2832001 	add	r2, r3, #1
   30314:	e2813a05 	add	r3, r1, #20480	; 0x5000
   30318:	e2811a06 	add	r1, r1, #24576	; 0x6000
   3031c:	e58388b4 	str	r8, [r3, #2228]	; 0x8b4
   30320:	e5815854 	str	r5, [r1, #2132]	; 0x854
   30324:	e1a03008 	mov	r3, r8
   30328:	e58c27f4 	str	r2, [ip, #2036]	; 0x7f4
   3032c:	e3a01064 	mov	r1, #100	; 0x64
   30330:	e59f2028 	ldr	r2, [pc, #40]	; 30360 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0xfc>
   30334:	ebfff736 	bl	2e014 <snprintf>
   30338:	e3a03000 	mov	r3, #0
   3033c:	e1a00004 	mov	r0, r4
   30340:	e59f101c 	ldr	r1, [pc, #28]	; 30364 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x100>
   30344:	e28d2024 	add	r2, sp, #36	; 0x24
   30348:	e58d3004 	str	r3, [sp, #4]
   3034c:	e58d3000 	str	r3, [sp]
   30350:	ebfffeba 	bl	2fe40 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30354:	e28dd088 	add	sp, sp, #136	; 0x88
   30358:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3035c:	000447fc 	.word	0x000447fc
   30360:	00044804 	.word	0x00044804
   30364:	00044810 	.word	0x00044810

00030368 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]>:
   30368:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3036c:	e24ddb27 	sub	sp, sp, #39936	; 0x9c00
   30370:	e24dd058 	sub	sp, sp, #88	; 0x58
   30374:	e59f609c 	ldr	r6, [pc, #156]	; 30418 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0xb0>
   30378:	e28d8010 	add	r8, sp, #16
   3037c:	e1a04000 	mov	r4, r0
   30380:	e1a05001 	mov	r5, r1
   30384:	e1a00002 	mov	r0, r2
   30388:	e1a01008 	mov	r1, r8
   3038c:	e59f2088 	ldr	r2, [pc, #136]	; 3041c <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0xb4>
   30390:	ebfff805 	bl	2e3ac <jsonEscape>
   30394:	e5963000 	ldr	r3, [r6]
   30398:	e2833a05 	add	r3, r3, #20480	; 0x5000
   3039c:	e5d33000 	ldrb	r3, [r3]
   303a0:	e3530000 	cmp	r3, #0
   303a4:	0a000012 	beq	303f4 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0x8c>
   303a8:	ebfff674 	bl	2dd80 <millis>
   303ac:	e28d7c4e 	add	r7, sp, #19968	; 0x4e00
   303b0:	e2877034 	add	r7, r7, #52	; 0x34
   303b4:	e1a03000 	mov	r3, r0
   303b8:	e88d0130 	stm	sp, {r4, r5, r8}
   303bc:	e1a00007 	mov	r0, r7
   303c0:	e59f2058 	ldr	r2, [pc, #88]	; 30420 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0xb8>
   303c4:	e59f1058 	ldr	r1, [pc, #88]	; 30424 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0xbc>
   303c8:	ebfff711 	bl	2e014 <snprintf>
   303cc:	e3a03000 	mov	r3, #0
   303d0:	e1a02007 	mov	r2, r7
   303d4:	e5960000 	ldr	r0, [r6]
   303d8:	e59f1048 	ldr	r1, [pc, #72]	; 30428 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0xc0>
   303dc:	e58d3004 	str	r3, [sp, #4]
   303e0:	e58d3000 	str	r3, [sp]
   303e4:	ebfffe95 	bl	2fe40 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   303e8:	e28ddb27 	add	sp, sp, #39936	; 0x9c00
   303ec:	e28dd058 	add	sp, sp, #88	; 0x58
   303f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   303f4:	e28d7c4e 	add	r7, sp, #19968	; 0x4e00
   303f8:	e2877034 	add	r7, r7, #52	; 0x34
   303fc:	e1a03004 	mov	r3, r4
   30400:	e1a00007 	mov	r0, r7
   30404:	e88d0120 	stm	sp, {r5, r8}
   30408:	e59f201c 	ldr	r2, [pc, #28]	; 3042c <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0xc4>
   3040c:	e59f1010 	ldr	r1, [pc, #16]	; 30424 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0xbc>
   30410:	ebfff6ff 	bl	2e014 <snprintf>
   30414:	eaffffec 	b	303cc <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]+0x64>
   30418:	0004c664 	.word	0x0004c664
   3041c:	00004e20 	.word	0x00004e20
   30420:	0004481c 	.word	0x0004481c
   30424:	00004e21 	.word	0x00004e21
   30428:	00044868 	.word	0x00044868
   3042c:	00044844 	.word	0x00044844

00030430 <CommandHandler::handleFileEnd(char const*) [clone .part.0]>:
   30430:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30434:	e24ddf5f 	sub	sp, sp, #380	; 0x17c
   30438:	e1a06000 	mov	r6, r0
   3043c:	e3a03014 	mov	r3, #20
   30440:	e59f02d0 	ldr	r0, [pc, #720]	; 30718 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2e8>
   30444:	e28d201c 	add	r2, sp, #28
   30448:	e1a04001 	mov	r4, r1
   3044c:	ebfff731 	bl	2e118 <jsonGetValueForKey>
   30450:	e2505000 	subs	r5, r0, #0
   30454:	1a000072 	bne	30624 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1f4>
   30458:	e1a01004 	mov	r1, r4
   3045c:	e3a03014 	mov	r3, #20
   30460:	e59f02b4 	ldr	r0, [pc, #692]	; 3071c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2ec>
   30464:	e28d2034 	add	r2, sp, #52	; 0x34
   30468:	ebfff72a 	bl	2e118 <jsonGetValueForKey>
   3046c:	e2507000 	subs	r7, r0, #0
   30470:	1a000071 	bne	3063c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x20c>
   30474:	e2864a05 	add	r4, r6, #20480	; 0x5000
   30478:	e5941868 	ldr	r1, [r4, #2152]	; 0x868
   3047c:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30480:	ebfffd3b 	bl	2f974 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)>
   30484:	e58d7008 	str	r7, [sp, #8]
   30488:	e58d0004 	str	r0, [sp, #4]
   3048c:	e58d5000 	str	r5, [sp]
   30490:	e594386c 	ldr	r3, [r4, #2156]	; 0x86c
   30494:	e1a08000 	mov	r8, r0
   30498:	e3a01064 	mov	r1, #100	; 0x64
   3049c:	e59f227c 	ldr	r2, [pc, #636]	; 30720 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2f0>
   304a0:	e28d004c 	add	r0, sp, #76	; 0x4c
   304a4:	ebfff6da 	bl	2e014 <snprintf>
   304a8:	e594386c 	ldr	r3, [r4, #2156]	; 0x86c
   304ac:	e1550003 	cmp	r5, r3
   304b0:	1a000051 	bne	305fc <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1cc>
   304b4:	e1580007 	cmp	r8, r7
   304b8:	0a000065 	beq	30654 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x224>
   304bc:	ebffd984 	bl	26ad4 <CLogger::Get()>
   304c0:	e2843001 	add	r3, r4, #1
   304c4:	e88d0188 	stm	sp, {r3, r7, r8}
   304c8:	e3a02002 	mov	r2, #2
   304cc:	e59f3250 	ldr	r3, [pc, #592]	; 30724 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2f4>
   304d0:	e59f1250 	ldr	r1, [pc, #592]	; 30728 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2f8>
   304d4:	e58d500c 	str	r5, [sp, #12]
   304d8:	ebffd8bf 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   304dc:	e3a03000 	mov	r3, #0
   304e0:	e1a00006 	mov	r0, r6
   304e4:	e59f1240 	ldr	r1, [pc, #576]	; 3072c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2fc>
   304e8:	e28d204c 	add	r2, sp, #76	; 0x4c
   304ec:	e58d3004 	str	r3, [sp, #4]
   304f0:	e58d3000 	str	r3, [sp]
   304f4:	ebfffe51 	bl	2fe40 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   304f8:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   304fc:	e3500000 	cmp	r0, #0
   30500:	0a000000 	beq	30508 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0xd8>
   30504:	ebffea9e 	bl	2af84 <operator delete[](void*)>
   30508:	e3a02000 	mov	r2, #0
   3050c:	e2865a07 	add	r5, r6, #28672	; 0x7000
   30510:	e59537f4 	ldr	r3, [r5, #2036]	; 0x7f4
   30514:	e5842860 	str	r2, [r4, #2144]	; 0x860
   30518:	e1530002 	cmp	r3, r2
   3051c:	e5842864 	str	r2, [r4, #2148]	; 0x864
   30520:	0a00006f 	beq	306e4 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2b4>
   30524:	e1a0b002 	mov	fp, r2
   30528:	e2864b16 	add	r4, r6, #22528	; 0x5800
   3052c:	e59f81fc 	ldr	r8, [pc, #508]	; 30730 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x300>
   30530:	e59f91fc 	ldr	r9, [pc, #508]	; 30734 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x304>
   30534:	e59fa1fc 	ldr	sl, [pc, #508]	; 30738 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x308>
   30538:	e28440b0 	add	r4, r4, #176	; 0xb0
   3053c:	e28d70b0 	add	r7, sp, #176	; 0xb0
   30540:	e5b41004 	ldr	r1, [r4, #4]!
   30544:	e1510002 	cmp	r1, r2
   30548:	0a000010 	beq	30590 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x160>
   3054c:	e5940fa0 	ldr	r0, [r4, #4000]	; 0xfa0
   30550:	e1a0300b 	mov	r3, fp
   30554:	e58d0008 	str	r0, [sp, #8]
   30558:	e58d1004 	str	r1, [sp, #4]
   3055c:	e58d2000 	str	r2, [sp]
   30560:	e3a010c8 	mov	r1, #200	; 0xc8
   30564:	e1a02009 	mov	r2, r9
   30568:	e1a00007 	mov	r0, r7
   3056c:	ebfff6a8 	bl	2e014 <snprintf>
   30570:	e5983000 	ldr	r3, [r8]
   30574:	e59f01bc 	ldr	r0, [pc, #444]	; 30738 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x308>
   30578:	e3530000 	cmp	r3, #0
   3057c:	0a000002 	beq	3058c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x15c>
   30580:	e1a02007 	mov	r2, r7
   30584:	e1a0100a 	mov	r1, sl
   30588:	ebffff76 	bl	30368 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]>
   3058c:	e5942000 	ldr	r2, [r4]
   30590:	e59517f4 	ldr	r1, [r5, #2036]	; 0x7f4
   30594:	e5943fa0 	ldr	r3, [r4, #4000]	; 0xfa0
   30598:	e28bb001 	add	fp, fp, #1
   3059c:	e151000b 	cmp	r1, fp
   305a0:	e0822003 	add	r2, r2, r3
   305a4:	8affffe5 	bhi	30540 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x110>
   305a8:	e2866901 	add	r6, r6, #16384	; 0x4000
   305ac:	e5963ff8 	ldr	r3, [r6, #4088]	; 0xff8
   305b0:	e5951804 	ldr	r1, [r5, #2052]	; 0x804
   305b4:	e5952800 	ldr	r2, [r5, #2048]	; 0x800
   305b8:	e58d3004 	str	r3, [sp, #4]
   305bc:	e5963ff4 	ldr	r3, [r6, #4084]	; 0xff4
   305c0:	e1a00007 	mov	r0, r7
   305c4:	e58d1008 	str	r1, [sp, #8]
   305c8:	e58d2000 	str	r2, [sp]
   305cc:	e3a010c8 	mov	r1, #200	; 0xc8
   305d0:	e59f2164 	ldr	r2, [pc, #356]	; 3073c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x30c>
   305d4:	ebfff68e 	bl	2e014 <snprintf>
   305d8:	e5983000 	ldr	r3, [r8]
   305dc:	e3530000 	cmp	r3, #0
   305e0:	0a000003 	beq	305f4 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1c4>
   305e4:	e59f114c 	ldr	r1, [pc, #332]	; 30738 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x308>
   305e8:	e1a02007 	mov	r2, r7
   305ec:	e1a00001 	mov	r0, r1
   305f0:	ebffff5c 	bl	30368 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]>
   305f4:	e28ddf5f 	add	sp, sp, #380	; 0x17c
   305f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   305fc:	ebffd934 	bl	26ad4 <CLogger::Get()>
   30600:	e594286c 	ldr	r2, [r4, #2156]	; 0x86c
   30604:	e2843001 	add	r3, r4, #1
   30608:	e98d0024 	stmib	sp, {r2, r5}
   3060c:	e58d3000 	str	r3, [sp]
   30610:	e3a02002 	mov	r2, #2
   30614:	e59f3124 	ldr	r3, [pc, #292]	; 30740 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x310>
   30618:	e59f1108 	ldr	r1, [pc, #264]	; 30728 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2f8>
   3061c:	ebffd86e 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30620:	eaffffad 	b	304dc <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0xac>
   30624:	e3a0200a 	mov	r2, #10
   30628:	e3a01000 	mov	r1, #0
   3062c:	e28d001c 	add	r0, sp, #28
   30630:	ebffe78d 	bl	2a46c <strtoul>
   30634:	e1a05000 	mov	r5, r0
   30638:	eaffff86 	b	30458 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x28>
   3063c:	e3a02010 	mov	r2, #16
   30640:	e3a01000 	mov	r1, #0
   30644:	e28d0034 	add	r0, sp, #52	; 0x34
   30648:	ebffe787 	bl	2a46c <strtoul>
   3064c:	e1a07000 	mov	r7, r0
   30650:	eaffff87 	b	30474 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x44>
   30654:	e3a03000 	mov	r3, #0
   30658:	e1a00006 	mov	r0, r6
   3065c:	e59f10e0 	ldr	r1, [pc, #224]	; 30744 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x314>
   30660:	e28d204c 	add	r2, sp, #76	; 0x4c
   30664:	e58d3004 	str	r3, [sp, #4]
   30668:	e58d3000 	str	r3, [sp]
   3066c:	ebfffdf3 	bl	2fe40 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30670:	e59f10d0 	ldr	r1, [pc, #208]	; 30748 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x318>
   30674:	e2840066 	add	r0, r4, #102	; 0x66
   30678:	ebffe67a 	bl	2a068 <strcasecmp>
   3067c:	e3500000 	cmp	r0, #0
   30680:	03a05001 	moveq	r5, #1
   30684:	13a05000 	movne	r5, #0
   30688:	1a000018 	bne	306f0 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2c0>
   3068c:	ebffd910 	bl	26ad4 <CLogger::Get()>
   30690:	e5941864 	ldr	r1, [r4, #2148]	; 0x864
   30694:	e5942868 	ldr	r2, [r4, #2152]	; 0x868
   30698:	e2843001 	add	r3, r4, #1
   3069c:	e58d1008 	str	r1, [sp, #8]
   306a0:	e58d2004 	str	r2, [sp, #4]
   306a4:	e58d3000 	str	r3, [sp]
   306a8:	e3a02004 	mov	r2, #4
   306ac:	e59f3098 	ldr	r3, [pc, #152]	; 3074c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x31c>
   306b0:	e59f1070 	ldr	r1, [pc, #112]	; 30728 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2f8>
   306b4:	e58d7010 	str	r7, [sp, #16]
   306b8:	e58d700c 	str	r7, [sp, #12]
   306bc:	ebffd846 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   306c0:	e59f0088 	ldr	r0, [pc, #136]	; 30750 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x320>
   306c4:	ebfff5b4 	bl	2dd9c <microsDelay>
   306c8:	e58d5000 	str	r5, [sp]
   306cc:	e1a00006 	mov	r0, r6
   306d0:	e5943868 	ldr	r3, [r4, #2152]	; 0x868
   306d4:	e5942860 	ldr	r2, [r4, #2144]	; 0x860
   306d8:	e284108f 	add	r1, r4, #143	; 0x8f
   306dc:	ebfffd62 	bl	2fc6c <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)>
   306e0:	eaffff84 	b	304f8 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0xc8>
   306e4:	e59f8044 	ldr	r8, [pc, #68]	; 30730 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x300>
   306e8:	e28d70b0 	add	r7, sp, #176	; 0xb0
   306ec:	eaffffad 	b	305a8 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x178>
   306f0:	ebffd8f7 	bl	26ad4 <CLogger::Get()>
   306f4:	e5942868 	ldr	r2, [r4, #2152]	; 0x868
   306f8:	e2843001 	add	r3, r4, #1
   306fc:	e58d2004 	str	r2, [sp, #4]
   30700:	e58d3000 	str	r3, [sp]
   30704:	e3a02004 	mov	r2, #4
   30708:	e59f3044 	ldr	r3, [pc, #68]	; 30754 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x324>
   3070c:	e59f1014 	ldr	r1, [pc, #20]	; 30728 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x2f8>
   30710:	ebffd831 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30714:	eaffffeb 	b	306c8 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x298>
   30718:	0004486c 	.word	0x0004486c
   3071c:	00044878 	.word	0x00044878
   30720:	0004487c 	.word	0x0004487c
   30724:	00044900 	.word	0x00044900
   30728:	00044b18 	.word	0x00044b18
   3072c:	000448f4 	.word	0x000448f4
   30730:	0004c664 	.word	0x0004c664
   30734:	00044a0c 	.word	0x00044a0c
   30738:	00045ac0 	.word	0x00045ac0
   3073c:	000449d0 	.word	0x000449d0
   30740:	000448c0 	.word	0x000448c0
   30744:	0004494c 	.word	0x0004494c
   30748:	00044958 	.word	0x00044958
   3074c:	00044964 	.word	0x00044964
   30750:	000186a0 	.word	0x000186a0
   30754:	000449b8 	.word	0x000449b8

00030758 <CommandHandler::handleFileEnd(char const*)>:
   30758:	e2803a05 	add	r3, r0, #20480	; 0x5000
   3075c:	e5933860 	ldr	r3, [r3, #2144]	; 0x860
   30760:	e3530000 	cmp	r3, #0
   30764:	012fff1e 	bxeq	lr
   30768:	eaffff30 	b	30430 <CommandHandler::handleFileEnd(char const*) [clone .part.0]>

0003076c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)>:
   3076c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   30770:	e24ddc57 	sub	sp, sp, #22272	; 0x5700
   30774:	e24dd0b4 	sub	sp, sp, #180	; 0xb4
   30778:	e1a06000 	mov	r6, r0
   3077c:	e1a08002 	mov	r8, r2
   30780:	e1a07003 	mov	r7, r3
   30784:	e59f0280 	ldr	r0, [pc, #640]	; 30a0c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a0>
   30788:	e3a030c8 	mov	r3, #200	; 0xc8
   3078c:	e28d20f0 	add	r2, sp, #240	; 0xf0
   30790:	e1a05001 	mov	r5, r1
   30794:	ebfff65f 	bl	2e118 <jsonGetValueForKey>
   30798:	e3500000 	cmp	r0, #0
   3079c:	1a000002 	bne	307ac <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x40>
   307a0:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   307a4:	e28dd0b4 	add	sp, sp, #180	; 0xb4
   307a8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   307ac:	e3a04000 	mov	r4, #0
   307b0:	e3a03014 	mov	r3, #20
   307b4:	e1a01005 	mov	r1, r5
   307b8:	e28d2014 	add	r2, sp, #20
   307bc:	e59f024c 	ldr	r0, [pc, #588]	; 30a10 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a4>
   307c0:	e5cd4014 	strb	r4, [sp, #20]
   307c4:	ebfff653 	bl	2e118 <jsonGetValueForKey>
   307c8:	e1a01004 	mov	r1, r4
   307cc:	e3a0200a 	mov	r2, #10
   307d0:	e28d0014 	add	r0, sp, #20
   307d4:	e5cd41bc 	strb	r4, [sp, #444]	; 0x1bc
   307d8:	ebffe723 	bl	2a46c <strtoul>
   307dc:	e59f1230 	ldr	r1, [pc, #560]	; 30a14 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a8>
   307e0:	e1a09000 	mov	r9, r0
   307e4:	e28d00f0 	add	r0, sp, #240	; 0xf0
   307e8:	ebffe61e 	bl	2a068 <strcasecmp>
   307ec:	e1500004 	cmp	r0, r4
   307f0:	0a00004e 	beq	30930 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x1c4>
   307f4:	e59f121c 	ldr	r1, [pc, #540]	; 30a18 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2ac>
   307f8:	e28d00f0 	add	r0, sp, #240	; 0xf0
   307fc:	ebffe619 	bl	2a068 <strcasecmp>
   30800:	e3500000 	cmp	r0, #0
   30804:	0a00004f 	beq	30948 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x1dc>
   30808:	e59f120c 	ldr	r1, [pc, #524]	; 30a1c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b0>
   3080c:	e28d00f0 	add	r0, sp, #240	; 0xf0
   30810:	ebffe614 	bl	2a068 <strcasecmp>
   30814:	e3500000 	cmp	r0, #0
   30818:	1a000007 	bne	3083c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0xd0>
   3081c:	e2863a05 	add	r3, r6, #20480	; 0x5000
   30820:	e5933860 	ldr	r3, [r3, #2144]	; 0x860
   30824:	e3530000 	cmp	r3, #0
   30828:	0affffdc 	beq	307a0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   3082c:	e1a01005 	mov	r1, r5
   30830:	e1a00006 	mov	r0, r6
   30834:	ebfffefd 	bl	30430 <CommandHandler::handleFileEnd(char const*) [clone .part.0]>
   30838:	eaffffd8 	b	307a0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   3083c:	e59f11dc 	ldr	r1, [pc, #476]	; 30a20 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b4>
   30840:	e28d00f0 	add	r0, sp, #240	; 0xf0
   30844:	ebffe607 	bl	2a068 <strcasecmp>
   30848:	e3500000 	cmp	r0, #0
   3084c:	1a000045 	bne	30968 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x1fc>
   30850:	e1a01008 	mov	r1, r8
   30854:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   30858:	e28d0f6f 	add	r0, sp, #444	; 0x1bc
   3085c:	ebfff580 	bl	2de64 <strlcpy>
   30860:	e28d0f6f 	add	r0, sp, #444	; 0x1bc
   30864:	ebffe5d8 	bl	29fcc <strlen>
   30868:	e247c001 	sub	ip, r7, #1
   3086c:	e05c7000 	subs	r7, ip, r0
   30870:	e3a030c8 	mov	r3, #200	; 0xc8
   30874:	e0888000 	add	r8, r8, r0
   30878:	e28d20f0 	add	r2, sp, #240	; 0xf0
   3087c:	e28d1f6f 	add	r1, sp, #444	; 0x1bc
   30880:	e59f0184 	ldr	r0, [pc, #388]	; 30a0c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a0>
   30884:	12888001 	addne	r8, r8, #1
   30888:	ebfff622 	bl	2e118 <jsonGetValueForKey>
   3088c:	e3a03014 	mov	r3, #20
   30890:	e28d1f6f 	add	r1, sp, #444	; 0x1bc
   30894:	e08d2003 	add	r2, sp, r3
   30898:	e59f0170 	ldr	r0, [pc, #368]	; 30a10 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a4>
   3089c:	ebfff61d 	bl	2e118 <jsonGetValueForKey>
   308a0:	e59f117c 	ldr	r1, [pc, #380]	; 30a24 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b8>
   308a4:	e28d00f0 	add	r0, sp, #240	; 0xf0
   308a8:	ebffe5ee 	bl	2a068 <strcasecmp>
   308ac:	e2501000 	subs	r1, r0, #0
   308b0:	0a00004c 	beq	309e8 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x27c>
   308b4:	e3a00000 	mov	r0, #0
   308b8:	e59fc168 	ldr	ip, [pc, #360]	; 30a28 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2bc>
   308bc:	e28d4e99 	add	r4, sp, #2448	; 0x990
   308c0:	e28de028 	add	lr, sp, #40	; 0x28
   308c4:	e1a03007 	mov	r3, r7
   308c8:	e58dc004 	str	ip, [sp, #4]
   308cc:	e1a02008 	mov	r2, r8
   308d0:	e28d1f6f 	add	r1, sp, #444	; 0x1bc
   308d4:	e5cd0990 	strb	r0, [sp, #2448]	; 0x990
   308d8:	e58d4000 	str	r4, [sp]
   308dc:	e1a00006 	mov	r0, r6
   308e0:	e58de00c 	str	lr, [sp, #12]
   308e4:	ebfffc9a 	bl	2fb54 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>
   308e8:	e3a020c8 	mov	r2, #200	; 0xc8
   308ec:	e28d10f0 	add	r1, sp, #240	; 0xf0
   308f0:	e59d000c 	ldr	r0, [sp, #12]
   308f4:	ebfff55a 	bl	2de64 <strlcpy>
   308f8:	e3a020c8 	mov	r2, #200	; 0xc8
   308fc:	e59f1128 	ldr	r1, [pc, #296]	; 30a2c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2c0>
   30900:	e59d000c 	ldr	r0, [sp, #12]
   30904:	ebfff572 	bl	2ded4 <strlcat>
   30908:	e1a00004 	mov	r0, r4
   3090c:	ebffe5ae 	bl	29fcc <strlen>
   30910:	e3500000 	cmp	r0, #0
   30914:	0affffa1 	beq	307a0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   30918:	e1a03004 	mov	r3, r4
   3091c:	e1a01009 	mov	r1, r9
   30920:	e1a00006 	mov	r0, r6
   30924:	e59d200c 	ldr	r2, [sp, #12]
   30928:	ebfffdbd 	bl	30024 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>
   3092c:	eaffff9b 	b	307a0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   30930:	e1a01005 	mov	r1, r5
   30934:	e1a00006 	mov	r0, r6
   30938:	ebfffe02 	bl	30148 <CommandHandler::handleFileStart(char const*)>
   3093c:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   30940:	e28dd0b4 	add	sp, sp, #180	; 0xb4
   30944:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30948:	e1a03007 	mov	r3, r7
   3094c:	e1a02008 	mov	r2, r8
   30950:	e1a01005 	mov	r1, r5
   30954:	e1a00006 	mov	r0, r6
   30958:	ebfffe41 	bl	30264 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)>
   3095c:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   30960:	e28dd0b4 	add	sp, sp, #180	; 0xb4
   30964:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30968:	e59f00b8 	ldr	r0, [pc, #184]	; 30a28 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2bc>
   3096c:	e28d9e99 	add	r9, sp, #2448	; 0x990
   30970:	e28dc028 	add	ip, sp, #40	; 0x28
   30974:	e1a03007 	mov	r3, r7
   30978:	e1a02008 	mov	r2, r8
   3097c:	e1a01005 	mov	r1, r5
   30980:	e58d0004 	str	r0, [sp, #4]
   30984:	e58d9000 	str	r9, [sp]
   30988:	e1a00006 	mov	r0, r6
   3098c:	e58dc00c 	str	ip, [sp, #12]
   30990:	e5cd4990 	strb	r4, [sp, #2448]	; 0x990
   30994:	ebfffc6e 	bl	2fb54 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>
   30998:	e3a020c8 	mov	r2, #200	; 0xc8
   3099c:	e28d10f0 	add	r1, sp, #240	; 0xf0
   309a0:	e59d000c 	ldr	r0, [sp, #12]
   309a4:	ebfff52e 	bl	2de64 <strlcpy>
   309a8:	e3a020c8 	mov	r2, #200	; 0xc8
   309ac:	e59f1078 	ldr	r1, [pc, #120]	; 30a2c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2c0>
   309b0:	e59d000c 	ldr	r0, [sp, #12]
   309b4:	ebfff546 	bl	2ded4 <strlcat>
   309b8:	e1a00009 	mov	r0, r9
   309bc:	ebffe582 	bl	29fcc <strlen>
   309c0:	e3500000 	cmp	r0, #0
   309c4:	0affff75 	beq	307a0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   309c8:	e1a03004 	mov	r3, r4
   309cc:	e1a02009 	mov	r2, r9
   309d0:	e1a00006 	mov	r0, r6
   309d4:	e59d100c 	ldr	r1, [sp, #12]
   309d8:	e58d4004 	str	r4, [sp, #4]
   309dc:	e58d4000 	str	r4, [sp]
   309e0:	ebfffd16 	bl	2fe40 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   309e4:	eaffff6d 	b	307a0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   309e8:	e3a0200a 	mov	r2, #10
   309ec:	e28d0014 	add	r0, sp, #20
   309f0:	ebffe69d 	bl	2a46c <strtoul>
   309f4:	e59f3034 	ldr	r3, [pc, #52]	; 30a30 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2c4>
   309f8:	e1a01000 	mov	r1, r0
   309fc:	e59f2030 	ldr	r2, [pc, #48]	; 30a34 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2c8>
   30a00:	e1a00006 	mov	r0, r6
   30a04:	ebfffd86 	bl	30024 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>
   30a08:	eaffff64 	b	307a0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x34>
   30a0c:	0003d3d0 	.word	0x0003d3d0
   30a10:	00044a44 	.word	0x00044a44
   30a14:	00044a4c 	.word	0x00044a4c
   30a18:	00044a54 	.word	0x00044a54
   30a1c:	00044a5c 	.word	0x00044a5c
   30a20:	000447cc 	.word	0x000447cc
   30a24:	00044a64 	.word	0x00044a64
   30a28:	00004e20 	.word	0x00004e20
   30a2c:	00044a84 	.word	0x00044a84
   30a30:	00044a6c 	.word	0x00044a6c
   30a34:	00044a78 	.word	0x00044a78

00030a38 <CommandHandler::hdlcFrameRx(unsigned char const*, unsigned int)>:
   30a38:	e92d4070 	push	{r4, r5, r6, lr}
   30a3c:	e24dde7d 	sub	sp, sp, #2000	; 0x7d0
   30a40:	e24dd008 	sub	sp, sp, #8
   30a44:	e3520e7d 	cmp	r2, #2000	; 0x7d0
   30a48:	e1a04002 	mov	r4, r2
   30a4c:	e1a06000 	mov	r6, r0
   30a50:	83a02e7d 	movhi	r2, #2000	; 0x7d0
   30a54:	92822001 	addls	r2, r2, #1
   30a58:	e28d0004 	add	r0, sp, #4
   30a5c:	e1a05001 	mov	r5, r1
   30a60:	ebfff4ff 	bl	2de64 <strlcpy>
   30a64:	e28d0004 	add	r0, sp, #4
   30a68:	ebffe557 	bl	29fcc <strlen>
   30a6c:	e2444001 	sub	r4, r4, #1
   30a70:	e2802001 	add	r2, r0, #1
   30a74:	e0443000 	sub	r3, r4, r0
   30a78:	e28d1004 	add	r1, sp, #4
   30a7c:	e1a00006 	mov	r0, r6
   30a80:	e0852002 	add	r2, r5, r2
   30a84:	ebffff38 	bl	3076c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)>
   30a88:	e28dde7d 	add	sp, sp, #2000	; 0x7d0
   30a8c:	e28dd008 	add	sp, sp, #8
   30a90:	e8bd8070 	pop	{r4, r5, r6, pc}

00030a94 <CommandHandler::hdlcFrameRxStatic(unsigned char const*, unsigned int)>:
   30a94:	e59f3018 	ldr	r3, [pc, #24]	; 30ab4 <CommandHandler::hdlcFrameRxStatic(unsigned char const*, unsigned int)+0x20>
   30a98:	e1a02001 	mov	r2, r1
   30a9c:	e5933000 	ldr	r3, [r3]
   30aa0:	e3530000 	cmp	r3, #0
   30aa4:	012fff1e 	bxeq	lr
   30aa8:	e1a01000 	mov	r1, r0
   30aac:	e1a00003 	mov	r0, r3
   30ab0:	eaffffe0 	b	30a38 <CommandHandler::hdlcFrameRx(unsigned char const*, unsigned int)>
   30ab4:	0004c664 	.word	0x0004c664

00030ab8 <CommandHandler::sendAPIReq(char const*)>:
   30ab8:	e92d4010 	push	{r4, lr}
   30abc:	e24dd070 	sub	sp, sp, #112	; 0x70
   30ac0:	e3a02064 	mov	r2, #100	; 0x64
   30ac4:	e1a04001 	mov	r4, r1
   30ac8:	e28d0008 	add	r0, sp, #8
   30acc:	e59f1068 	ldr	r1, [pc, #104]	; 30b3c <CommandHandler::sendAPIReq(char const*)+0x84>
   30ad0:	ebfff4e3 	bl	2de64 <strlcpy>
   30ad4:	e28d0008 	add	r0, sp, #8
   30ad8:	ebffe53b 	bl	29fcc <strlen>
   30adc:	e28d3008 	add	r3, sp, #8
   30ae0:	e1a01004 	mov	r1, r4
   30ae4:	e3a02064 	mov	r2, #100	; 0x64
   30ae8:	e0830000 	add	r0, r3, r0
   30aec:	ebfff4dc 	bl	2de64 <strlcpy>
   30af0:	e28d0008 	add	r0, sp, #8
   30af4:	ebffe534 	bl	29fcc <strlen>
   30af8:	e28d3008 	add	r3, sp, #8
   30afc:	e0830000 	add	r0, r3, r0
   30b00:	e3a02064 	mov	r2, #100	; 0x64
   30b04:	e59f1034 	ldr	r1, [pc, #52]	; 30b40 <CommandHandler::sendAPIReq(char const*)+0x88>
   30b08:	ebfff4d5 	bl	2de64 <strlcpy>
   30b0c:	e59f3030 	ldr	r3, [pc, #48]	; 30b44 <CommandHandler::sendAPIReq(char const*)+0x8c>
   30b10:	e5930000 	ldr	r0, [r3]
   30b14:	e3500000 	cmp	r0, #0
   30b18:	0a000005 	beq	30b34 <CommandHandler::sendAPIReq(char const*)+0x7c>
   30b1c:	e3a03000 	mov	r3, #0
   30b20:	e59f1020 	ldr	r1, [pc, #32]	; 30b48 <CommandHandler::sendAPIReq(char const*)+0x90>
   30b24:	e28d2008 	add	r2, sp, #8
   30b28:	e58d3004 	str	r3, [sp, #4]
   30b2c:	e58d3000 	str	r3, [sp]
   30b30:	ebfffcc2 	bl	2fe40 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30b34:	e28dd070 	add	sp, sp, #112	; 0x70
   30b38:	e8bd8010 	pop	{r4, pc}
   30b3c:	00044a8c 	.word	0x00044a8c
   30b40:	00045258 	.word	0x00045258
   30b44:	0004c664 	.word	0x0004c664
   30b48:	00044a94 	.word	0x00044a94

00030b4c <CommandHandler::logDebugMessage(char const*)>:
   30b4c:	e59f3018 	ldr	r3, [pc, #24]	; 30b6c <CommandHandler::logDebugMessage(char const*)+0x20>
   30b50:	e1a02001 	mov	r2, r1
   30b54:	e5933000 	ldr	r3, [r3]
   30b58:	e3530000 	cmp	r3, #0
   30b5c:	012fff1e 	bxeq	lr
   30b60:	e59f1008 	ldr	r1, [pc, #8]	; 30b70 <CommandHandler::logDebugMessage(char const*)+0x24>
   30b64:	e1a00001 	mov	r0, r1
   30b68:	eafffdfe 	b	30368 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]>
   30b6c:	0004c664 	.word	0x0004c664
   30b70:	00045ac0 	.word	0x00045ac0

00030b74 <CommandHandler::logDebugJson(char const*)>:
   30b74:	e3a03000 	mov	r3, #0
   30b78:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   30b7c:	e24dd00c 	sub	sp, sp, #12
   30b80:	e1a02001 	mov	r2, r1
   30b84:	e58d3004 	str	r3, [sp, #4]
   30b88:	e59f100c 	ldr	r1, [pc, #12]	; 30b9c <CommandHandler::logDebugJson(char const*)+0x28>
   30b8c:	e58d3000 	str	r3, [sp]
   30b90:	ebfffcaa 	bl	2fe40 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30b94:	e28dd00c 	add	sp, sp, #12
   30b98:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   30b9c:	00044868 	.word	0x00044868

00030ba0 <CommandHandler::logDebug(char const*, char const*, char const*)>:
   30ba0:	e59f300c 	ldr	r3, [pc, #12]	; 30bb4 <CommandHandler::logDebug(char const*, char const*, char const*)+0x14>
   30ba4:	e5933000 	ldr	r3, [r3]
   30ba8:	e3530000 	cmp	r3, #0
   30bac:	012fff1e 	bxeq	lr
   30bb0:	eafffdec 	b	30368 <CommandHandler::logDebug(char const*, char const*, char const*) [clone .part.0]>
   30bb4:	0004c664 	.word	0x0004c664

00030bb8 <CommandHandler::service()>:
   30bb8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   30bbc:	e2804a05 	add	r4, r0, #20480	; 0x5000
   30bc0:	e5942870 	ldr	r2, [r4, #2160]	; 0x870
   30bc4:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
   30bc8:	e24dd084 	sub	sp, sp, #132	; 0x84
   30bcc:	e1520003 	cmp	r2, r3
   30bd0:	0a000016 	beq	30c30 <CommandHandler::service()+0x78>
   30bd4:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
   30bd8:	e5942874 	ldr	r2, [r4, #2164]	; 0x874
   30bdc:	e0803003 	add	r3, r0, r3
   30be0:	e2822001 	add	r2, r2, #1
   30be4:	e2833b16 	add	r3, r3, #22528	; 0x5800
   30be8:	e5d3307c 	ldrb	r3, [r3, #124]	; 0x7c
   30bec:	e5842874 	str	r2, [r4, #2164]	; 0x874
   30bf0:	e5941874 	ldr	r1, [r4, #2164]	; 0x874
   30bf4:	e5942878 	ldr	r2, [r4, #2168]	; 0x878
   30bf8:	e1a05000 	mov	r5, r0
   30bfc:	e1510002 	cmp	r1, r2
   30c00:	23a02000 	movcs	r2, #0
   30c04:	e3a01064 	mov	r1, #100	; 0x64
   30c08:	25842874 	strcs	r2, [r4, #2164]	; 0x874
   30c0c:	e28d001c 	add	r0, sp, #28
   30c10:	e59f20ac 	ldr	r2, [pc, #172]	; 30cc4 <CommandHandler::service()+0x10c>
   30c14:	ebfff4fe 	bl	2e014 <snprintf>
   30c18:	e28d001c 	add	r0, sp, #28
   30c1c:	ebffe4ea 	bl	29fcc <strlen>
   30c20:	e28d101c 	add	r1, sp, #28
   30c24:	e2802001 	add	r2, r0, #1
   30c28:	e2850f65 	add	r0, r5, #404	; 0x194
   30c2c:	ebfffb13 	bl	2f880 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>
   30c30:	e5943860 	ldr	r3, [r4, #2144]	; 0x860
   30c34:	e3530000 	cmp	r3, #0
   30c38:	0a000006 	beq	30c58 <CommandHandler::service()+0xa0>
   30c3c:	e59f5084 	ldr	r5, [pc, #132]	; 30cc8 <CommandHandler::service()+0x110>
   30c40:	ebfff44e 	bl	2dd80 <millis>
   30c44:	e1a02005 	mov	r2, r5
   30c48:	e59418b0 	ldr	r1, [r4, #2224]	; 0x8b0
   30c4c:	ebfff468 	bl	2ddf4 <isTimeout>
   30c50:	e3500000 	cmp	r0, #0
   30c54:	1a000001 	bne	30c60 <CommandHandler::service()+0xa8>
   30c58:	e28dd084 	add	sp, sp, #132	; 0x84
   30c5c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30c60:	ebffd79b 	bl	26ad4 <CLogger::Get()>
   30c64:	e594986c 	ldr	r9, [r4, #2156]	; 0x86c
   30c68:	e1a06000 	mov	r6, r0
   30c6c:	e5947868 	ldr	r7, [r4, #2152]	; 0x868
   30c70:	e59488b0 	ldr	r8, [r4, #2224]	; 0x8b0
   30c74:	ebfff441 	bl	2dd80 <millis>
   30c78:	e1a03000 	mov	r3, r0
   30c7c:	e3a02004 	mov	r2, #4
   30c80:	e1a00006 	mov	r0, r6
   30c84:	e58d300c 	str	r3, [sp, #12]
   30c88:	e98d0180 	stmib	sp, {r7, r8}
   30c8c:	e59f3038 	ldr	r3, [pc, #56]	; 30ccc <CommandHandler::service()+0x114>
   30c90:	e59f1038 	ldr	r1, [pc, #56]	; 30cd0 <CommandHandler::service()+0x118>
   30c94:	e58d9000 	str	r9, [sp]
   30c98:	e58d5010 	str	r5, [sp, #16]
   30c9c:	ebffd6ce 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30ca0:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30ca4:	e3500000 	cmp	r0, #0
   30ca8:	0a000000 	beq	30cb0 <CommandHandler::service()+0xf8>
   30cac:	ebffe8b4 	bl	2af84 <operator delete[](void*)>
   30cb0:	e3a03000 	mov	r3, #0
   30cb4:	e5843860 	str	r3, [r4, #2144]	; 0x860
   30cb8:	e5843864 	str	r3, [r4, #2148]	; 0x864
   30cbc:	e28dd084 	add	sp, sp, #132	; 0x84
   30cc0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30cc4:	00044a9c 	.word	0x00044a9c
   30cc8:	00000bb8 	.word	0x00000bb8
   30ccc:	00044abc 	.word	0x00044abc
   30cd0:	00044b18 	.word	0x00044b18

00030cd4 <CommandHandler::fileReceiveCleardown()>:
   30cd4:	e92d4010 	push	{r4, lr}
   30cd8:	e2804a05 	add	r4, r0, #20480	; 0x5000
   30cdc:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30ce0:	e3500000 	cmp	r0, #0
   30ce4:	0a000000 	beq	30cec <CommandHandler::fileReceiveCleardown()+0x18>
   30ce8:	ebffe8a5 	bl	2af84 <operator delete[](void*)>
   30cec:	e3a03000 	mov	r3, #0
   30cf0:	e5843860 	str	r3, [r4, #2144]	; 0x860
   30cf4:	e5843864 	str	r3, [r4, #2148]	; 0x864
   30cf8:	e8bd8010 	pop	{r4, pc}

00030cfc <CommandHandler::~CommandHandler()>:
   30cfc:	e92d4010 	push	{r4, lr}
   30d00:	e1a04000 	mov	r4, r0
   30d04:	e2800f65 	add	r0, r0, #404	; 0x194
   30d08:	ebfff85c 	bl	2ee80 <MiniHDLC::~MiniHDLC()>
   30d0c:	e1a00004 	mov	r0, r4
   30d10:	e8bd8010 	pop	{r4, pc}

00030d14 <CommsManager::handleRxMsg(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   30d14:	e3a00000 	mov	r0, #0
   30d18:	e12fff1e 	bx	lr

00030d1c <CommsManager::serialTxAvailable()>:
   30d1c:	e59f3014 	ldr	r3, [pc, #20]	; 30d38 <CommsManager::serialTxAvailable()+0x1c>
   30d20:	e5933000 	ldr	r3, [r3]
   30d24:	e2833a07 	add	r3, r3, #28672	; 0x7000
   30d28:	e593080c 	ldr	r0, [r3, #2060]	; 0x80c
   30d2c:	e3500000 	cmp	r0, #0
   30d30:	012fff1e 	bxeq	lr
   30d34:	eafff22e 	b	2d5f4 <CUartMaxiSerialDevice::AvailableForWrite()>
   30d38:	0004c670 	.word	0x0004c670

00030d3c <CommsManager::registerPendingOTA(unsigned char const*, unsigned int)>:
   30d3c:	e92d4030 	push	{r4, r5, lr}
   30d40:	e1a04000 	mov	r4, r0
   30d44:	e1a05001 	mov	r5, r1
   30d48:	e24dd014 	sub	sp, sp, #20
   30d4c:	ebffd760 	bl	26ad4 <CLogger::Get()>
   30d50:	e0843005 	add	r3, r4, r5
   30d54:	e5531001 	ldrb	r1, [r3, #-1]
   30d58:	e5d42010 	ldrb	r2, [r4, #16]
   30d5c:	e5d43000 	ldrb	r3, [r4]
   30d60:	e58d100c 	str	r1, [sp, #12]
   30d64:	e58d2008 	str	r2, [sp, #8]
   30d68:	e59f1030 	ldr	r1, [pc, #48]	; 30da0 <CommsManager::registerPendingOTA(unsigned char const*, unsigned int)+0x64>
   30d6c:	e3a02004 	mov	r2, #4
   30d70:	e58d3004 	str	r3, [sp, #4]
   30d74:	e58d5000 	str	r5, [sp]
   30d78:	e59f3024 	ldr	r3, [pc, #36]	; 30da4 <CommsManager::registerPendingOTA(unsigned char const*, unsigned int)+0x68>
   30d7c:	ebffd696 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30d80:	e59f0020 	ldr	r0, [pc, #32]	; 30da8 <CommsManager::registerPendingOTA(unsigned char const*, unsigned int)+0x6c>
   30d84:	ebfff404 	bl	2dd9c <microsDelay>
   30d88:	e1a00004 	mov	r0, r4
   30d8c:	e1a01005 	mov	r1, r5
   30d90:	ebffe76c 	bl	2ab48 <EnableChainBoot>
   30d94:	e3a00001 	mov	r0, #1
   30d98:	e28dd014 	add	sp, sp, #20
   30d9c:	e8bd8030 	pop	{r4, r5, pc}
   30da0:	00044b64 	.word	0x00044b64
   30da4:	00044b28 	.word	0x00044b28
   30da8:	000186a0 	.word	0x000186a0

00030dac <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)>:
   30dac:	e92d4070 	push	{r4, r5, r6, lr}
   30db0:	e1a04000 	mov	r4, r0
   30db4:	e24dd008 	sub	sp, sp, #8
   30db8:	e1a06001 	mov	r6, r1
   30dbc:	e1a05002 	mov	r5, r2
   30dc0:	ebfffb09 	bl	2f9ec <CommandHandler::CommandHandler()>
   30dc4:	e3a00000 	mov	r0, #0
   30dc8:	e2843a07 	add	r3, r4, #28672	; 0x7000
   30dcc:	e583680c 	str	r6, [r3, #2060]	; 0x80c
   30dd0:	e5835810 	str	r5, [r3, #2064]	; 0x810
   30dd4:	e5830818 	str	r0, [r3, #2072]	; 0x818
   30dd8:	e5830814 	str	r0, [r3, #2068]	; 0x814
   30ddc:	e59f2044 	ldr	r2, [pc, #68]	; 30e28 <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)+0x7c>
   30de0:	e59fc044 	ldr	ip, [pc, #68]	; 30e2c <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)+0x80>
   30de4:	e59f3044 	ldr	r3, [pc, #68]	; 30e30 <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)+0x84>
   30de8:	e58d0004 	str	r0, [sp, #4]
   30dec:	e58d2000 	str	r2, [sp]
   30df0:	e59fe03c 	ldr	lr, [pc, #60]	; 30e34 <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)+0x88>
   30df4:	e58c3000 	str	r3, [ip]
   30df8:	e59f2038 	ldr	r2, [pc, #56]	; 30e38 <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)+0x8c>
   30dfc:	e59fc038 	ldr	ip, [pc, #56]	; 30e3c <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)+0x90>
   30e00:	e1a01004 	mov	r1, r4
   30e04:	e582c000 	str	ip, [r2]
   30e08:	e1a00004 	mov	r0, r4
   30e0c:	e3a02001 	mov	r2, #1
   30e10:	e59f3028 	ldr	r3, [pc, #40]	; 30e40 <CommsManager::CommsManager(CUartMaxiSerialDevice&, AppSerialIF*)+0x94>
   30e14:	e58e4000 	str	r4, [lr]
   30e18:	ebfffb22 	bl	2faa8 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   30e1c:	e1a00004 	mov	r0, r4
   30e20:	e28dd008 	add	sp, sp, #8
   30e24:	e8bd8070 	pop	{r4, r5, r6, pc}
   30e28:	00030d3c 	.word	0x00030d3c
   30e2c:	0004c668 	.word	0x0004c668
   30e30:	00030f14 	.word	0x00030f14
   30e34:	0004c670 	.word	0x0004c670
   30e38:	0004c66c 	.word	0x0004c66c
   30e3c:	00030d1c 	.word	0x00030d1c
   30e40:	00030d14 	.word	0x00030d14

00030e44 <CommsManager::~CommsManager()>:
   30e44:	e92d4010 	push	{r4, lr}
   30e48:	e1a04000 	mov	r4, r0
   30e4c:	ebffffaa 	bl	30cfc <CommandHandler::~CommandHandler()>
   30e50:	e1a00004 	mov	r0, r4
   30e54:	e8bd8010 	pop	{r4, pc}

00030e58 <CommsManager::setup()>:
   30e58:	e3a00001 	mov	r0, #1
   30e5c:	e12fff1e 	bx	lr

00030e60 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)>:
   30e60:	e92d4010 	push	{r4, lr}
   30e64:	e1a04001 	mov	r4, r1
   30e68:	e24dd008 	sub	sp, sp, #8
   30e6c:	ebffd718 	bl	26ad4 <CLogger::Get()>
   30e70:	e59fc048 	ldr	ip, [pc, #72]	; 30ec0 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x60>
   30e74:	e5d4e000 	ldrb	lr, [r4]
   30e78:	e5d42001 	ldrb	r2, [r4, #1]
   30e7c:	e59c3004 	ldr	r3, [ip, #4]
   30e80:	e082240e 	add	r2, r2, lr, lsl #8
   30e84:	e58d2004 	str	r2, [sp, #4]
   30e88:	e2832001 	add	r2, r3, #1
   30e8c:	e58c2004 	str	r2, [ip, #4]
   30e90:	e59f102c 	ldr	r1, [pc, #44]	; 30ec4 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x64>
   30e94:	e3a02003 	mov	r2, #3
   30e98:	e58d3000 	str	r3, [sp]
   30e9c:	e59f3024 	ldr	r3, [pc, #36]	; 30ec8 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x68>
   30ea0:	ebffd64d 	bl	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30ea4:	ebffd70a 	bl	26ad4 <CLogger::Get()>
   30ea8:	e3a02003 	mov	r2, #3
   30eac:	e59f1010 	ldr	r1, [pc, #16]	; 30ec4 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x64>
   30eb0:	e59f3014 	ldr	r3, [pc, #20]	; 30ecc <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x6c>
   30eb4:	e28dd008 	add	sp, sp, #8
   30eb8:	e8bd4010 	pop	{r4, lr}
   30ebc:	eaffd646 	b	267dc <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30ec0:	0004c670 	.word	0x0004c670
   30ec4:	00044b64 	.word	0x00044b64
   30ec8:	00044b74 	.word	0x00044b74
   30ecc:	00044b88 	.word	0x00044b88

00030ed0 <CommsManager::hdlcFrameRxCBStatic(unsigned char const*, unsigned int)>:
   30ed0:	e59f300c 	ldr	r3, [pc, #12]	; 30ee4 <CommsManager::hdlcFrameRxCBStatic(unsigned char const*, unsigned int)+0x14>
   30ed4:	e1a02001 	mov	r2, r1
   30ed8:	e1a01000 	mov	r1, r0
   30edc:	e5930000 	ldr	r0, [r3]
   30ee0:	eaffffde 	b	30e60 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)>
   30ee4:	0004c670 	.word	0x0004c670

00030ee8 <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)>:
   30ee8:	e59f3020 	ldr	r3, [pc, #32]	; 30f10 <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)+0x28>
   30eec:	e1a0c000 	mov	ip, r0
   30ef0:	e5933000 	ldr	r3, [r3]
   30ef4:	e1a02001 	mov	r2, r1
   30ef8:	e2833a07 	add	r3, r3, #28672	; 0x7000
   30efc:	e593080c 	ldr	r0, [r3, #2060]	; 0x80c
   30f00:	e3500000 	cmp	r0, #0
   30f04:	012fff1e 	bxeq	lr
   30f08:	e1a0100c 	mov	r1, ip
   30f0c:	eafff1f4 	b	2d6e4 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>
   30f10:	0004c670 	.word	0x0004c670

00030f14 <CommsManager::serialPutStr(unsigned char const*, unsigned int)>:
   30f14:	eafffff3 	b	30ee8 <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)>

00030f18 <CommsManager::hdlcFrameTxCB(unsigned char const*, unsigned int)>:
   30f18:	e2800a07 	add	r0, r0, #28672	; 0x7000
   30f1c:	e590080c 	ldr	r0, [r0, #2060]	; 0x80c
   30f20:	e3500000 	cmp	r0, #0
   30f24:	012fff1e 	bxeq	lr
   30f28:	eafff1ed 	b	2d6e4 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>

00030f2c <CommsManager::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>:
   30f2c:	eafffbc3 	b	2fe40 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>

00030f30 <CommsManager::serviceGetFromSerial()>:
   30f30:	e92d4010 	push	{r4, lr}
   30f34:	e2803a07 	add	r3, r0, #28672	; 0x7000
   30f38:	e1a04000 	mov	r4, r0
   30f3c:	e593080c 	ldr	r0, [r3, #2060]	; 0x80c
   30f40:	e24ddffa 	sub	sp, sp, #1000	; 0x3e8
   30f44:	e3500000 	cmp	r0, #0
   30f48:	0a000004 	beq	30f60 <CommsManager::serviceGetFromSerial()+0x30>
   30f4c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   30f50:	e1a0100d 	mov	r1, sp
   30f54:	ebfff241 	bl	2d860 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)>
   30f58:	e2502000 	subs	r2, r0, #0
   30f5c:	ca000001 	bgt	30f68 <CommsManager::serviceGetFromSerial()+0x38>
   30f60:	e28ddffa 	add	sp, sp, #1000	; 0x3e8
   30f64:	e8bd8010 	pop	{r4, pc}
   30f68:	e1a0100d 	mov	r1, sp
   30f6c:	e1a00004 	mov	r0, r4
   30f70:	ebfffae5 	bl	2fb0c <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)>
   30f74:	e28ddffa 	add	sp, sp, #1000	; 0x3e8
   30f78:	e8bd8010 	pop	{r4, pc}

00030f7c <CommsManager::service()>:
   30f7c:	e92d4010 	push	{r4, lr}
   30f80:	e1a04000 	mov	r4, r0
   30f84:	ebffff0b 	bl	30bb8 <CommandHandler::service()>
   30f88:	e1a00004 	mov	r0, r4
   30f8c:	e8bd4010 	pop	{r4, lr}
   30f90:	eaffffe6 	b	30f30 <CommsManager::serviceGetFromSerial()>

00030f94 <BusControl::BusControl()>:
   30f94:	e92d4070 	push	{r4, r5, r6, lr}
   30f98:	e1a04000 	mov	r4, r0
   30f9c:	e2806004 	add	r6, r0, #4
   30fa0:	e1a00006 	mov	r0, r6
   30fa4:	eb0004dc 	bl	3231c <TargetClockGenerator::TargetClockGenerator()>
   30fa8:	e2845601 	add	r5, r4, #1048576	; 0x100000
   30fac:	e1a01004 	mov	r1, r4
   30fb0:	e2840014 	add	r0, r4, #20
   30fb4:	eb00056c 	bl	3256c <TargetControl::TargetControl(BusControl&)>
   30fb8:	e1a01004 	mov	r1, r4
   30fbc:	e2850f8f 	add	r0, r5, #572	; 0x23c
   30fc0:	eb0000e2 	bl	31350 <BusSocketManager::BusSocketManager(BusControl&)>
   30fc4:	e59f0044 	ldr	r0, [pc, #68]	; 31010 <BusControl::BusControl()+0x7c>
   30fc8:	e1a01004 	mov	r1, r4
   30fcc:	e0840000 	add	r0, r4, r0
   30fd0:	eb00097b 	bl	335c4 <MemoryController::MemoryController(BusControl&)>
   30fd4:	e59f0038 	ldr	r0, [pc, #56]	; 31014 <BusControl::BusControl()+0x80>
   30fd8:	e1a01006 	mov	r1, r6
   30fdc:	e0840000 	add	r0, r4, r0
   30fe0:	eb000275 	bl	319bc <BusRawAccess::BusRawAccess(TargetClockGenerator&)>
   30fe4:	e3a02f7d 	mov	r2, #500	; 0x1f4
   30fe8:	e3a03064 	mov	r3, #100	; 0x64
   30fec:	e1a01004 	mov	r1, r4
   30ff0:	e585341c 	str	r3, [r5, #1052]	; 0x41c
   30ff4:	e5852418 	str	r2, [r5, #1048]	; 0x418
   30ff8:	e2850e42 	add	r0, r5, #1056	; 0x420
   30ffc:	eb000b54 	bl	33d54 <HwManager::HwManager(BusControl&)>
   31000:	e3a03000 	mov	r3, #0
   31004:	e1a00004 	mov	r0, r4
   31008:	e5c43000 	strb	r3, [r4]
   3100c:	e8bd8070 	pop	{r4, r5, r6, pc}
   31010:	00100404 	.word	0x00100404
   31014:	00100408 	.word	0x00100408

00031018 <BusControl::init()>:
   31018:	e5d03000 	ldrb	r3, [r0]
   3101c:	e3530000 	cmp	r3, #0
   31020:	112fff1e 	bxne	lr
   31024:	e92d4070 	push	{r4, r5, r6, lr}
   31028:	e1a04000 	mov	r4, r0
   3102c:	e2805004 	add	r5, r0, #4
   31030:	e3e01000 	mvn	r1, #0
   31034:	e1a00005 	mov	r0, r5
   31038:	eb000517 	bl	3249c <TargetClockGenerator::setup(int)>
   3103c:	e1a00005 	mov	r0, r5
   31040:	e59f1038 	ldr	r1, [pc, #56]	; 31080 <BusControl::init()+0x68>
   31044:	eb000539 	bl	32530 <TargetClockGenerator::setFreqHz(unsigned long)>
   31048:	e3a01001 	mov	r1, #1
   3104c:	e1a00005 	mov	r0, r5
   31050:	eb0004ba 	bl	32340 <TargetClockGenerator::enable(bool)>
   31054:	e59f0028 	ldr	r0, [pc, #40]	; 31084 <BusControl::init()+0x6c>
   31058:	e0840000 	add	r0, r4, r0
   3105c:	eb000274 	bl	31a34 <BusRawAccess::init()>
   31060:	e2840014 	add	r0, r4, #20
   31064:	eb000555 	bl	325c0 <TargetControl::init()>
   31068:	e2840601 	add	r0, r4, #1048576	; 0x100000
   3106c:	e2800f8f 	add	r0, r0, #572	; 0x23c
   31070:	eb0000c0 	bl	31378 <BusSocketManager::init()>
   31074:	e3a03001 	mov	r3, #1
   31078:	e5c43000 	strb	r3, [r4]
   3107c:	e8bd8070 	pop	{r4, r5, r6, pc}
   31080:	000f4240 	.word	0x000f4240
   31084:	00100408 	.word	0x00100408

00031088 <BusControl::service()>:
   31088:	e92d4010 	push	{r4, lr}
   3108c:	e1a04000 	mov	r4, r0
   31090:	e59f0010 	ldr	r0, [pc, #16]	; 310a8 <BusControl::service()+0x20>
   31094:	e0840000 	add	r0, r4, r0
   31098:	eb00024b 	bl	319cc <BusRawAccess::service()>
   3109c:	e2840014 	add	r0, r4, #20
   310a0:	e8bd4010 	pop	{r4, lr}
   310a4:	ea000546 	b	325c4 <TargetControl::service()>
   310a8:	00100408 	.word	0x00100408

000310ac <BusControl::machineChangeInit()>:
   310ac:	e3a02001 	mov	r2, #1
   310b0:	e92d4010 	push	{r4, lr}
   310b4:	e1a04000 	mov	r4, r0
   310b8:	e2800601 	add	r0, r0, #1048576	; 0x100000
   310bc:	e2800f8f 	add	r0, r0, #572	; 0x23c
   310c0:	e1a01002 	mov	r1, r2
   310c4:	eb0001da 	bl	31834 <BusSocketManager::suspend(bool, bool)>
   310c8:	e2840018 	add	r0, r4, #24
   310cc:	e8bd4010 	pop	{r4, lr}
   310d0:	ea0008b9 	b	333bc <TargetProgrammer::clear()>

000310d4 <BusControl::machineChangeComplete()>:
   310d4:	e2800601 	add	r0, r0, #1048576	; 0x100000
   310d8:	e3a02001 	mov	r2, #1
   310dc:	e3a01000 	mov	r1, #0
   310e0:	e2800f8f 	add	r0, r0, #572	; 0x23c
   310e4:	ea0001d2 	b	31834 <BusSocketManager::suspend(bool, bool)>

000310e8 <BusControl::rawAccessStart()>:
   310e8:	e3a02001 	mov	r2, #1
   310ec:	e92d4010 	push	{r4, lr}
   310f0:	e1a04000 	mov	r4, r0
   310f4:	e2800601 	add	r0, r0, #1048576	; 0x100000
   310f8:	e1a01002 	mov	r1, r2
   310fc:	e2800f8f 	add	r0, r0, #572	; 0x23c
   31100:	eb0001cb 	bl	31834 <BusSocketManager::suspend(bool, bool)>
   31104:	e2840014 	add	r0, r4, #20
   31108:	e3a01001 	mov	r1, #1
   3110c:	e8bd4010 	pop	{r4, lr}
   31110:	ea00052c 	b	325c8 <TargetControl::suspend(bool)>

00031114 <BusControl::rawAccessEnd()>:
   31114:	e92d4010 	push	{r4, lr}
   31118:	e1a04000 	mov	r4, r0
   3111c:	e2800601 	add	r0, r0, #1048576	; 0x100000
   31120:	e3a01000 	mov	r1, #0
   31124:	e2800f8f 	add	r0, r0, #572	; 0x23c
   31128:	e3a02001 	mov	r2, #1
   3112c:	eb0001c0 	bl	31834 <BusSocketManager::suspend(bool, bool)>
   31130:	e2840014 	add	r0, r4, #20
   31134:	e3a01000 	mov	r1, #0
   31138:	e8bd4010 	pop	{r4, lr}
   3113c:	ea000521 	b	325c8 <TargetControl::suspend(bool)>

00031140 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]>:
   31140:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31144:	e1a07000 	mov	r7, r0
   31148:	e0810101 	add	r0, r1, r1, lsl #2
   3114c:	e0811080 	add	r1, r1, r0, lsl #1
   31150:	e0870101 	add	r0, r7, r1, lsl #2
   31154:	e5d01028 	ldrb	r1, [r0, #40]	; 0x28
   31158:	e1a09002 	mov	r9, r2
   3115c:	e3510000 	cmp	r1, #0
   31160:	1a00004c 	bne	31298 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0x158>
   31164:	e5d03012 	ldrb	r3, [r0, #18]
   31168:	e3530000 	cmp	r3, #0
   3116c:	1a000045 	bne	31288 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0x148>
   31170:	e5d03018 	ldrb	r3, [r0, #24]
   31174:	e3530000 	cmp	r3, #0
   31178:	1a00004a 	bne	312a8 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0x168>
   3117c:	e5d05020 	ldrb	r5, [r0, #32]
   31180:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   31184:	e21550ff 	ands	r5, r5, #255	; 0xff
   31188:	13a05003 	movne	r5, #3
   3118c:	13a0a004 	movne	sl, #4
   31190:	1a000000 	bne	31198 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0x58>
   31194:	e3a0a004 	mov	sl, #4
   31198:	e59711b8 	ldr	r1, [r7, #440]	; 0x1b8
   3119c:	e3510000 	cmp	r1, #0
   311a0:	11a04007 	movne	r4, r7
   311a4:	13a06000 	movne	r6, #0
   311a8:	0a000029 	beq	31254 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0x114>
   311ac:	e5d40000 	ldrb	r0, [r4]
   311b0:	e2866001 	add	r6, r6, #1
   311b4:	e3500000 	cmp	r0, #0
   311b8:	0a000008 	beq	311e0 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0xa0>
   311bc:	e5948008 	ldr	r8, [r4, #8]
   311c0:	e3580000 	cmp	r8, #0
   311c4:	0a000005 	beq	311e0 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0xa0>
   311c8:	e1a01005 	mov	r1, r5
   311cc:	e1a03009 	mov	r3, r9
   311d0:	e1a0200a 	mov	r2, sl
   311d4:	e594000c 	ldr	r0, [r4, #12]
   311d8:	e12fff38 	blx	r8
   311dc:	e59711b8 	ldr	r1, [r7, #440]	; 0x1b8
   311e0:	e1510006 	cmp	r1, r6
   311e4:	e284402c 	add	r4, r4, #44	; 0x2c
   311e8:	8affffef 	bhi	311ac <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0x6c>
   311ec:	e3510000 	cmp	r1, #0
   311f0:	0a000017 	beq	31254 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0x114>
   311f4:	e3a03000 	mov	r3, #0
   311f8:	e1a00003 	mov	r0, r3
   311fc:	ea00000b 	b	31230 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0xf0>
   31200:	e3550001 	cmp	r5, #1
   31204:	0a000015 	beq	31260 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0x120>
   31208:	e3550002 	cmp	r5, #2
   3120c:	0a000018 	beq	31274 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0x134>
   31210:	e3550003 	cmp	r5, #3
   31214:	00832103 	addeq	r2, r3, r3, lsl #2
   31218:	00832082 	addeq	r2, r3, r2, lsl #1
   3121c:	00872102 	addeq	r2, r7, r2, lsl #2
   31220:	05c20020 	strbeq	r0, [r2, #32]
   31224:	e2833001 	add	r3, r3, #1
   31228:	e1510003 	cmp	r1, r3
   3122c:	0a000008 	beq	31254 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0x114>
   31230:	e3550004 	cmp	r5, #4
   31234:	1afffff1 	bne	31200 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0xc0>
   31238:	e0832103 	add	r2, r3, r3, lsl #2
   3123c:	e0832082 	add	r2, r3, r2, lsl #1
   31240:	e2833001 	add	r3, r3, #1
   31244:	e0872102 	add	r2, r7, r2, lsl #2
   31248:	e1510003 	cmp	r1, r3
   3124c:	e5c20028 	strb	r0, [r2, #40]	; 0x28
   31250:	1afffff6 	bne	31230 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0xf0>
   31254:	e3e03000 	mvn	r3, #0
   31258:	e58731c4 	str	r3, [r7, #452]	; 0x1c4
   3125c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31260:	e0832103 	add	r2, r3, r3, lsl #2
   31264:	e0832082 	add	r2, r3, r2, lsl #1
   31268:	e0872102 	add	r2, r7, r2, lsl #2
   3126c:	e5c20012 	strb	r0, [r2, #18]
   31270:	eaffffeb 	b	31224 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0xe4>
   31274:	e0832103 	add	r2, r3, r3, lsl #2
   31278:	e0832082 	add	r2, r3, r2, lsl #1
   3127c:	e0872102 	add	r2, r7, r2, lsl #2
   31280:	e5c20018 	strb	r0, [r2, #24]
   31284:	eaffffe6 	b	31224 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0xe4>
   31288:	e3a05001 	mov	r5, #1
   3128c:	e3a0a004 	mov	sl, #4
   31290:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   31294:	eaffffbf 	b	31198 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0x58>
   31298:	e5d0a029 	ldrb	sl, [r0, #41]	; 0x29
   3129c:	e3a05004 	mov	r5, #4
   312a0:	e6efa07a 	uxtb	sl, sl
   312a4:	eaffffbb 	b	31198 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0x58>
   312a8:	e3a05002 	mov	r5, #2
   312ac:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   312b0:	eaffffb7 	b	31194 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]+0x54>

000312b4 <BusSocketManager::cycleActionStaticCB(void*, unsigned long, BR_RETURN_TYPE)>:
   312b4:	e2503000 	subs	r3, r0, #0
   312b8:	012fff1e 	bxeq	lr
   312bc:	e59331b8 	ldr	r3, [r3, #440]	; 0x1b8
   312c0:	e3510009 	cmp	r1, #9
   312c4:	91510003 	cmpls	r1, r3
   312c8:	212fff1e 	bxcs	lr
   312cc:	eaffff9b 	b	31140 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]>

000312d0 <BusSocketManager::busAccessCallbackStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   312d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   312d4:	e2507000 	subs	r7, r0, #0
   312d8:	e24dd00c 	sub	sp, sp, #12
   312dc:	e59da030 	ldr	sl, [sp, #48]	; 0x30
   312e0:	0a000018 	beq	31348 <BusSocketManager::busAccessCallbackStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)+0x78>
   312e4:	e1a0b003 	mov	fp, r3
   312e8:	e59731b8 	ldr	r3, [r7, #440]	; 0x1b8
   312ec:	e3530000 	cmp	r3, #0
   312f0:	0a000014 	beq	31348 <BusSocketManager::busAccessCallbackStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)+0x78>
   312f4:	e1a08001 	mov	r8, r1
   312f8:	e1a09002 	mov	r9, r2
   312fc:	e1a04007 	mov	r4, r7
   31300:	e3a05000 	mov	r5, #0
   31304:	e5d4c000 	ldrb	ip, [r4]
   31308:	e2855001 	add	r5, r5, #1
   3130c:	e35c0000 	cmp	ip, #0
   31310:	0a000009 	beq	3133c <BusSocketManager::busAccessCallbackStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)+0x6c>
   31314:	e5946004 	ldr	r6, [r4, #4]
   31318:	e3560000 	cmp	r6, #0
   3131c:	0a000006 	beq	3133c <BusSocketManager::busAccessCallbackStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)+0x6c>
   31320:	e1a0300b 	mov	r3, fp
   31324:	e594000c 	ldr	r0, [r4, #12]
   31328:	e1a02009 	mov	r2, r9
   3132c:	e1a01008 	mov	r1, r8
   31330:	e58da000 	str	sl, [sp]
   31334:	e12fff36 	blx	r6
   31338:	e59731b8 	ldr	r3, [r7, #440]	; 0x1b8
   3133c:	e1530005 	cmp	r3, r5
   31340:	e284402c 	add	r4, r4, #44	; 0x2c
   31344:	8affffee 	bhi	31304 <BusSocketManager::busAccessCallbackStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)+0x34>
   31348:	e28dd00c 	add	sp, sp, #12
   3134c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00031350 <BusSocketManager::BusSocketManager(BusControl&)>:
   31350:	e3a02000 	mov	r2, #0
   31354:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   31358:	e3e0e000 	mvn	lr, #0
   3135c:	e280cd07 	add	ip, r0, #448	; 0x1c0
   31360:	e58011bc 	str	r1, [r0, #444]	; 0x1bc
   31364:	e580e1c4 	str	lr, [r0, #452]	; 0x1c4
   31368:	e58021b8 	str	r2, [r0, #440]	; 0x1b8
   3136c:	e1cc20b0 	strh	r2, [ip]
   31370:	e5c021c2 	strb	r2, [r0, #450]	; 0x1c2
   31374:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00031378 <BusSocketManager::init()>:
   31378:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   3137c:	e59f200c 	ldr	r2, [pc, #12]	; 31390 <BusSocketManager::init()+0x18>
   31380:	e2833601 	add	r3, r3, #1048576	; 0x100000
   31384:	e5830238 	str	r0, [r3, #568]	; 0x238
   31388:	e5832234 	str	r2, [r3, #564]	; 0x234
   3138c:	e12fff1e 	bx	lr
   31390:	000312d0 	.word	0x000312d0

00031394 <BusSocketManager::isEnabled(unsigned long)>:
   31394:	e59031b8 	ldr	r3, [r0, #440]	; 0x1b8
   31398:	e1530001 	cmp	r3, r1
   3139c:	80813101 	addhi	r3, r1, r1, lsl #2
   313a0:	80811083 	addhi	r1, r1, r3, lsl #1
   313a4:	87d00101 	ldrbhi	r0, [r0, r1, lsl #2]
   313a8:	93a00000 	movls	r0, #0
   313ac:	e12fff1e 	bx	lr

000313b0 <BusSocketManager::socketSetAction(bool, bool, int)>:
   313b0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   313b4:	e1a04000 	mov	r4, r0
   313b8:	e5d001c0 	ldrb	r0, [r0, #448]	; 0x1c0
   313bc:	e1a05003 	mov	r5, r3
   313c0:	e0203002 	eor	r3, r0, r2
   313c4:	e0200001 	eor	r0, r0, r1
   313c8:	e1933000 	orrs	r3, r3, r0
   313cc:	e24dd00c 	sub	sp, sp, #12
   313d0:	0a000005 	beq	313ec <BusSocketManager::socketSetAction(bool, bool, int)+0x3c>
   313d4:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   313d8:	e59f00f8 	ldr	r0, [pc, #248]	; 314d8 <BusSocketManager::socketSetAction(bool, bool, int)+0x128>
   313dc:	e5c411c0 	strb	r1, [r4, #448]	; 0x1c0
   313e0:	e5c421c1 	strb	r2, [r4, #449]	; 0x1c1
   313e4:	e0830000 	add	r0, r3, r0
   313e8:	eb000216 	bl	31c48 <BusRawAccess::waitConfigure(bool, bool)>
   313ec:	e59431c4 	ldr	r3, [r4, #452]	; 0x1c4
   313f0:	e1530005 	cmp	r3, r5
   313f4:	1a000001 	bne	31400 <BusSocketManager::socketSetAction(bool, bool, int)+0x50>
   313f8:	e28dd00c 	add	sp, sp, #12
   313fc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   31400:	e0856105 	add	r6, r5, r5, lsl #2
   31404:	e0856086 	add	r6, r5, r6, lsl #1
   31408:	e0846106 	add	r6, r4, r6, lsl #2
   3140c:	e5d62028 	ldrb	r2, [r6, #40]	; 0x28
   31410:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   31414:	e3520000 	cmp	r2, #0
   31418:	e5931004 	ldr	r1, [r3, #4]
   3141c:	e2837014 	add	r7, r3, #20
   31420:	1a000027 	bne	314c4 <BusSocketManager::socketSetAction(bool, bool, int)+0x114>
   31424:	e5d63012 	ldrb	r3, [r6, #18]
   31428:	e3530000 	cmp	r3, #0
   3142c:	1a00001f 	bne	314b0 <BusSocketManager::socketSetAction(bool, bool, int)+0x100>
   31430:	e5d63018 	ldrb	r3, [r6, #24]
   31434:	e3530000 	cmp	r3, #0
   31438:	1a00000b 	bne	3146c <BusSocketManager::socketSetAction(bool, bool, int)+0xbc>
   3143c:	e5d62020 	ldrb	r2, [r6, #32]
   31440:	e21220ff 	ands	r2, r2, #255	; 0xff
   31444:	1a000011 	bne	31490 <BusSocketManager::socketSetAction(bool, bool, int)+0xe0>
   31448:	e1a01006 	mov	r1, r6
   3144c:	e1a00007 	mov	r0, r7
   31450:	e1cd40f0 	strd	r4, [sp]
   31454:	e59f3080 	ldr	r3, [pc, #128]	; 314dc <BusSocketManager::socketSetAction(bool, bool, int)+0x12c>
   31458:	eb0005d0 	bl	32ba0 <TargetControl::cycleReqAction(BusSocketInfo&, unsigned long, void (*)(void*, unsigned long, BR_RETURN_TYPE), void*, unsigned long)>
   3145c:	e3500000 	cmp	r0, #0
   31460:	158451c4 	strne	r5, [r4, #452]	; 0x1c4
   31464:	e28dd00c 	add	sp, sp, #12
   31468:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3146c:	e596301c 	ldr	r3, [r6, #28]
   31470:	e3530000 	cmp	r3, #0
   31474:	1a000008 	bne	3149c <BusSocketManager::socketSetAction(bool, bool, int)+0xec>
   31478:	e59f0060 	ldr	r0, [pc, #96]	; 314e0 <BusSocketManager::socketSetAction(bool, bool, int)+0x130>
   3147c:	e1510000 	cmp	r1, r0
   31480:	8a000012 	bhi	314d0 <BusSocketManager::socketSetAction(bool, bool, int)+0x120>
   31484:	eb002a1f 	bl	3bd08 <__udivsi3>
   31488:	e1a02000 	mov	r2, r0
   3148c:	eaffffed 	b	31448 <BusSocketManager::socketSetAction(bool, bool, int)+0x98>
   31490:	e5963024 	ldr	r3, [r6, #36]	; 0x24
   31494:	e3530000 	cmp	r3, #0
   31498:	0afffff6 	beq	31478 <BusSocketManager::socketSetAction(bool, bool, int)+0xc8>
   3149c:	e0630283 	rsb	r0, r3, r3, lsl #5
   314a0:	e0600300 	rsb	r0, r0, r0, lsl #6
   314a4:	e0833180 	add	r3, r3, r0, lsl #3
   314a8:	e1a00303 	lsl	r0, r3, #6
   314ac:	eafffff2 	b	3147c <BusSocketManager::socketSetAction(bool, bool, int)+0xcc>
   314b0:	e5962014 	ldr	r2, [r6, #20]
   314b4:	e0620282 	rsb	r0, r2, r2, lsl #5
   314b8:	e0822100 	add	r2, r2, r0, lsl #2
   314bc:	e1a02182 	lsl	r2, r2, #3
   314c0:	eaffffe0 	b	31448 <BusSocketManager::socketSetAction(bool, bool, int)+0x98>
   314c4:	e59f0018 	ldr	r0, [pc, #24]	; 314e4 <BusSocketManager::socketSetAction(bool, bool, int)+0x134>
   314c8:	e1510000 	cmp	r1, r0
   314cc:	9affffec 	bls	31484 <BusSocketManager::socketSetAction(bool, bool, int)+0xd4>
   314d0:	e3a02001 	mov	r2, #1
   314d4:	eaffffdb 	b	31448 <BusSocketManager::socketSetAction(bool, bool, int)+0x98>
   314d8:	00100408 	.word	0x00100408
   314dc:	000312b4 	.word	0x000312b4
   314e0:	01e84800 	.word	0x01e84800
   314e4:	3b9aca00 	.word	0x3b9aca00

000314e8 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>:
   314e8:	e92d4030 	push	{r4, r5, lr}
   314ec:	e59051b8 	ldr	r5, [r0, #440]	; 0x1b8
   314f0:	e3550000 	cmp	r5, #0
   314f4:	0a00002a 	beq	315a4 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0xbc>
   314f8:	e3a02000 	mov	r2, #0
   314fc:	e1a04000 	mov	r4, r0
   31500:	e1a01002 	mov	r1, r2
   31504:	e1a03000 	mov	r3, r0
   31508:	e085e105 	add	lr, r5, r5, lsl #2
   3150c:	e085e08e 	add	lr, r5, lr, lsl #1
   31510:	e080e10e 	add	lr, r0, lr, lsl #2
   31514:	e5d3c000 	ldrb	ip, [r3]
   31518:	e35c0000 	cmp	ip, #0
   3151c:	0a000003 	beq	31530 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x48>
   31520:	e3510000 	cmp	r1, #0
   31524:	05d31010 	ldrbeq	r1, [r3, #16]
   31528:	e3520000 	cmp	r2, #0
   3152c:	05d32011 	ldrbeq	r2, [r3, #17]
   31530:	e283302c 	add	r3, r3, #44	; 0x2c
   31534:	e153000e 	cmp	r3, lr
   31538:	1afffff5 	bne	31514 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x2c>
   3153c:	e3a03000 	mov	r3, #0
   31540:	e5d4e000 	ldrb	lr, [r4]
   31544:	e083c103 	add	ip, r3, r3, lsl #2
   31548:	e083c08c 	add	ip, r3, ip, lsl #1
   3154c:	e35e0000 	cmp	lr, #0
   31550:	e080c10c 	add	ip, r0, ip, lsl #2
   31554:	e284402c 	add	r4, r4, #44	; 0x2c
   31558:	0a00000b 	beq	3158c <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0xa4>
   3155c:	e5dce028 	ldrb	lr, [ip, #40]	; 0x28
   31560:	e35e0000 	cmp	lr, #0
   31564:	1a00000c 	bne	3159c <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0xb4>
   31568:	e5dce012 	ldrb	lr, [ip, #18]
   3156c:	e35e0000 	cmp	lr, #0
   31570:	1a000009 	bne	3159c <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0xb4>
   31574:	e5dce018 	ldrb	lr, [ip, #24]
   31578:	e35e0000 	cmp	lr, #0
   3157c:	1a000006 	bne	3159c <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0xb4>
   31580:	e5dcc020 	ldrb	ip, [ip, #32]
   31584:	e35c0000 	cmp	ip, #0
   31588:	1a000003 	bne	3159c <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0xb4>
   3158c:	e2833001 	add	r3, r3, #1
   31590:	e1530005 	cmp	r3, r5
   31594:	1affffe9 	bne	31540 <BusSocketManager::updateAfterSocketChange() [clone .part.0]+0x58>
   31598:	e3e03000 	mvn	r3, #0
   3159c:	e8bd4030 	pop	{r4, r5, lr}
   315a0:	eaffff82 	b	313b0 <BusSocketManager::socketSetAction(bool, bool, int)>
   315a4:	e1a01005 	mov	r1, r5
   315a8:	e1a02005 	mov	r2, r5
   315ac:	e8bd4030 	pop	{r4, r5, lr}
   315b0:	e3e03000 	mvn	r3, #0
   315b4:	eaffff7d 	b	313b0 <BusSocketManager::socketSetAction(bool, bool, int)>

000315b8 <BusSocketManager::updateAfterSocketChange()>:
   315b8:	e5d031c2 	ldrb	r3, [r0, #450]	; 0x1c2
   315bc:	e3530000 	cmp	r3, #0
   315c0:	112fff1e 	bxne	lr
   315c4:	eaffffc7 	b	314e8 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>

000315c8 <BusSocketManager::add(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>:
   315c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   315cc:	e59041b8 	ldr	r4, [r0, #440]	; 0x1b8
   315d0:	e24dd00c 	sub	sp, sp, #12
   315d4:	e5ddc054 	ldrb	ip, [sp, #84]	; 0x54
   315d8:	e5dd5058 	ldrb	r5, [sp, #88]	; 0x58
   315dc:	e3540009 	cmp	r4, #9
   315e0:	e5dd9030 	ldrb	r9, [sp, #48]	; 0x30
   315e4:	e5dd7034 	ldrb	r7, [sp, #52]	; 0x34
   315e8:	e5ddb038 	ldrb	fp, [sp, #56]	; 0x38
   315ec:	e5dda040 	ldrb	sl, [sp, #64]	; 0x40
   315f0:	e5dd8048 	ldrb	r8, [sp, #72]	; 0x48
   315f4:	e5dd6050 	ldrb	r6, [sp, #80]	; 0x50
   315f8:	e58dc000 	str	ip, [sp]
   315fc:	e58d5004 	str	r5, [sp, #4]
   31600:	8a000021 	bhi	3168c <BusSocketManager::add(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)+0xc4>
   31604:	e0845104 	add	r5, r4, r4, lsl #2
   31608:	e0845085 	add	r5, r4, r5, lsl #1
   3160c:	e080c105 	add	ip, r0, r5, lsl #2
   31610:	e7c01105 	strb	r1, [r0, r5, lsl #2]
   31614:	e58c2004 	str	r2, [ip, #4]
   31618:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
   3161c:	e5ccb012 	strb	fp, [ip, #18]
   31620:	e58c2014 	str	r2, [ip, #20]
   31624:	e59d205c 	ldr	r2, [sp, #92]	; 0x5c
   31628:	e5cca018 	strb	sl, [ip, #24]
   3162c:	e58c200c 	str	r2, [ip, #12]
   31630:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
   31634:	e58c3008 	str	r3, [ip, #8]
   31638:	e58c201c 	str	r2, [ip, #28]
   3163c:	e59d3000 	ldr	r3, [sp]
   31640:	e59d204c 	ldr	r2, [sp, #76]	; 0x4c
   31644:	e59d5004 	ldr	r5, [sp, #4]
   31648:	e5cc8020 	strb	r8, [ip, #32]
   3164c:	e5cc9010 	strb	r9, [ip, #16]
   31650:	e58c2024 	str	r2, [ip, #36]	; 0x24
   31654:	e5cc7011 	strb	r7, [ip, #17]
   31658:	e5cc6028 	strb	r6, [ip, #40]	; 0x28
   3165c:	e5cc3029 	strb	r3, [ip, #41]	; 0x29
   31660:	e5cc502a 	strb	r5, [ip, #42]	; 0x2a
   31664:	e5d021c2 	ldrb	r2, [r0, #450]	; 0x1c2
   31668:	e2843001 	add	r3, r4, #1
   3166c:	e3520000 	cmp	r2, #0
   31670:	e1a0e000 	mov	lr, r0
   31674:	e58031b8 	str	r3, [r0, #440]	; 0x1b8
   31678:	1a000000 	bne	31680 <BusSocketManager::add(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)+0xb8>
   3167c:	ebffff99 	bl	314e8 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>
   31680:	e1a00004 	mov	r0, r4
   31684:	e28dd00c 	add	sp, sp, #12
   31688:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3168c:	e3e00000 	mvn	r0, #0
   31690:	eafffffb 	b	31684 <BusSocketManager::add(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)+0xbc>

00031694 <BusSocketManager::enable(unsigned long, bool)>:
   31694:	e590c1b8 	ldr	ip, [r0, #440]	; 0x1b8
   31698:	e15c0001 	cmp	ip, r1
   3169c:	912fff1e 	bxls	lr
   316a0:	e5d0c1c2 	ldrb	ip, [r0, #450]	; 0x1c2
   316a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   316a8:	e081e101 	add	lr, r1, r1, lsl #2
   316ac:	e081108e 	add	r1, r1, lr, lsl #1
   316b0:	e35c0000 	cmp	ip, #0
   316b4:	e7c02101 	strb	r2, [r0, r1, lsl #2]
   316b8:	149df004 	popne	{pc}		; (ldrne pc, [sp], #4)
   316bc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   316c0:	eaffff88 	b	314e8 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>

000316c4 <BusSocketManager::setup(unsigned long, bool, bool)>:
   316c4:	e92d4010 	push	{r4, lr}
   316c8:	e590e1b8 	ldr	lr, [r0, #440]	; 0x1b8
   316cc:	e15e0001 	cmp	lr, r1
   316d0:	98bd8010 	popls	{r4, pc}
   316d4:	e5d0e1c2 	ldrb	lr, [r0, #450]	; 0x1c2
   316d8:	e0814101 	add	r4, r1, r1, lsl #2
   316dc:	e0811084 	add	r1, r1, r4, lsl #1
   316e0:	e080c101 	add	ip, r0, r1, lsl #2
   316e4:	e35e0000 	cmp	lr, #0
   316e8:	e5cc2010 	strb	r2, [ip, #16]
   316ec:	e5cc3011 	strb	r3, [ip, #17]
   316f0:	18bd8010 	popne	{r4, pc}
   316f4:	e8bd4010 	pop	{r4, lr}
   316f8:	eaffff7a 	b	314e8 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>

000316fc <BusSocketManager::reqIRQ(unsigned long, int)>:
   316fc:	e590c1b8 	ldr	ip, [r0, #440]	; 0x1b8
   31700:	e15c0001 	cmp	ip, r1
   31704:	912fff1e 	bxls	lr
   31708:	e3a0c001 	mov	ip, #1
   3170c:	e3520000 	cmp	r2, #0
   31710:	d3a02020 	movle	r2, #32
   31714:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   31718:	e081e101 	add	lr, r1, r1, lsl #2
   3171c:	e0811c1e 	add	r1, r1, lr, lsl ip
   31720:	e5d0e1c2 	ldrb	lr, [r0, #450]	; 0x1c2
   31724:	e0803101 	add	r3, r0, r1, lsl #2
   31728:	e35e0000 	cmp	lr, #0
   3172c:	e5832024 	str	r2, [r3, #36]	; 0x24
   31730:	e5c3c020 	strb	ip, [r3, #32]
   31734:	149df004 	popne	{pc}		; (ldrne pc, [sp], #4)
   31738:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3173c:	eaffff69 	b	314e8 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>

00031740 <BusSocketManager::reqReset(unsigned long, int)>:
   31740:	e590c1b8 	ldr	ip, [r0, #440]	; 0x1b8
   31744:	e15c0001 	cmp	ip, r1
   31748:	912fff1e 	bxls	lr
   3174c:	e3a0c001 	mov	ip, #1
   31750:	e3520000 	cmp	r2, #0
   31754:	d3a02f7d 	movle	r2, #500	; 0x1f4
   31758:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3175c:	e081e101 	add	lr, r1, r1, lsl #2
   31760:	e0811c1e 	add	r1, r1, lr, lsl ip
   31764:	e5d0e1c2 	ldrb	lr, [r0, #450]	; 0x1c2
   31768:	e0803101 	add	r3, r0, r1, lsl #2
   3176c:	e35e0000 	cmp	lr, #0
   31770:	e5832014 	str	r2, [r3, #20]
   31774:	e5c3c012 	strb	ip, [r3, #18]
   31778:	149df004 	popne	{pc}		; (ldrne pc, [sp], #4)
   3177c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   31780:	eaffff58 	b	314e8 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>

00031784 <BusSocketManager::reqNMI(unsigned long, int)>:
   31784:	e590c1b8 	ldr	ip, [r0, #440]	; 0x1b8
   31788:	e15c0001 	cmp	ip, r1
   3178c:	912fff1e 	bxls	lr
   31790:	e3a0c001 	mov	ip, #1
   31794:	e3520000 	cmp	r2, #0
   31798:	d3a02020 	movle	r2, #32
   3179c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   317a0:	e081e101 	add	lr, r1, r1, lsl #2
   317a4:	e0811c1e 	add	r1, r1, lr, lsl ip
   317a8:	e5d0e1c2 	ldrb	lr, [r0, #450]	; 0x1c2
   317ac:	e0803101 	add	r3, r0, r1, lsl #2
   317b0:	e35e0000 	cmp	lr, #0
   317b4:	e583201c 	str	r2, [r3, #28]
   317b8:	e5c3c018 	strb	ip, [r3, #24]
   317bc:	149df004 	popne	{pc}		; (ldrne pc, [sp], #4)
   317c0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   317c4:	eaffff47 	b	314e8 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>

000317c8 <BusSocketManager::reqBus(unsigned long, BR_BUS_ACTION_REASON)>:
   317c8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   317cc:	e59031b8 	ldr	r3, [r0, #440]	; 0x1b8
   317d0:	e24dd00c 	sub	sp, sp, #12
   317d4:	e1530001 	cmp	r3, r1
   317d8:	9a00000b 	bls	3180c <BusSocketManager::reqBus(unsigned long, BR_BUS_ACTION_REASON)+0x44>
   317dc:	e3a0e001 	mov	lr, #1
   317e0:	e0813101 	add	r3, r1, r1, lsl #2
   317e4:	e0811e13 	add	r1, r1, r3, lsl lr
   317e8:	e5d031c2 	ldrb	r3, [r0, #450]	; 0x1c2
   317ec:	e0801101 	add	r1, r0, r1, lsl #2
   317f0:	e3530000 	cmp	r3, #0
   317f4:	e5c1e028 	strb	lr, [r1, #40]	; 0x28
   317f8:	e5c12029 	strb	r2, [r1, #41]	; 0x29
   317fc:	1a000008 	bne	31824 <BusSocketManager::reqBus(unsigned long, BR_BUS_ACTION_REASON)+0x5c>
   31800:	e28dd00c 	add	sp, sp, #12
   31804:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   31808:	eaffff36 	b	314e8 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>
   3180c:	e58d3000 	str	r3, [sp]
   31810:	e59f2014 	ldr	r2, [pc, #20]	; 3182c <BusSocketManager::reqBus(unsigned long, BR_BUS_ACTION_REASON)+0x64>
   31814:	e1a03001 	mov	r3, r1
   31818:	e59f0010 	ldr	r0, [pc, #16]	; 31830 <BusSocketManager::reqBus(unsigned long, BR_BUS_ACTION_REASON)+0x68>
   3181c:	e3a01004 	mov	r1, #4
   31820:	ebfff55a 	bl	2ed90 <LogWrite>
   31824:	e28dd00c 	add	sp, sp, #12
   31828:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   3182c:	00044b90 	.word	0x00044b90
   31830:	00044bb4 	.word	0x00044bb4

00031834 <BusSocketManager::suspend(bool, bool)>:
   31834:	e92d4070 	push	{r4, r5, r6, lr}
   31838:	e1a06002 	mov	r6, r2
   3183c:	e1a04000 	mov	r4, r0
   31840:	e1a05001 	mov	r5, r1
   31844:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   31848:	e59f0078 	ldr	r0, [pc, #120]	; 318c8 <BusSocketManager::suspend(bool, bool)+0x94>
   3184c:	e0830000 	add	r0, r3, r0
   31850:	eb000130 	bl	31d18 <BusRawAccess::waitSuspend(bool)>
   31854:	e3560000 	cmp	r6, #0
   31858:	e5c451c2 	strb	r5, [r4, #450]	; 0x1c2
   3185c:	0a000014 	beq	318b4 <BusSocketManager::suspend(bool, bool)+0x80>
   31860:	e59401b8 	ldr	r0, [r4, #440]	; 0x1b8
   31864:	e3e03000 	mvn	r3, #0
   31868:	e3500000 	cmp	r0, #0
   3186c:	13a02000 	movne	r2, #0
   31870:	e58431c4 	str	r3, [r4, #452]	; 0x1c4
   31874:	11a01002 	movne	r1, r2
   31878:	0a000009 	beq	318a4 <BusSocketManager::suspend(bool, bool)+0x70>
   3187c:	e0823102 	add	r3, r2, r2, lsl #2
   31880:	e0823083 	add	r3, r2, r3, lsl #1
   31884:	e2822001 	add	r2, r2, #1
   31888:	e0843103 	add	r3, r4, r3, lsl #2
   3188c:	e1520000 	cmp	r2, r0
   31890:	e5c31028 	strb	r1, [r3, #40]	; 0x28
   31894:	e5c31012 	strb	r1, [r3, #18]
   31898:	e5c31018 	strb	r1, [r3, #24]
   3189c:	e5c31020 	strb	r1, [r3, #32]
   318a0:	1afffff5 	bne	3187c <BusSocketManager::suspend(bool, bool)+0x48>
   318a4:	e59401bc 	ldr	r0, [r4, #444]	; 0x1bc
   318a8:	e2800014 	add	r0, r0, #20
   318ac:	eb0004e7 	bl	32c50 <TargetControl::cycleClearAction()>
   318b0:	e5d451c2 	ldrb	r5, [r4, #450]	; 0x1c2
   318b4:	e3550000 	cmp	r5, #0
   318b8:	18bd8070 	popne	{r4, r5, r6, pc}
   318bc:	e1a00004 	mov	r0, r4
   318c0:	e8bd4070 	pop	{r4, r5, r6, lr}
   318c4:	eaffff07 	b	314e8 <BusSocketManager::updateAfterSocketChange() [clone .part.0]>
   318c8:	00100408 	.word	0x00100408

000318cc <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE)>:
   318cc:	e3510009 	cmp	r1, #9
   318d0:	93a03000 	movls	r3, #0
   318d4:	83a03001 	movhi	r3, #1
   318d8:	e590c1b8 	ldr	ip, [r0, #440]	; 0x1b8
   318dc:	e15c0001 	cmp	ip, r1
   318e0:	93833001 	orrls	r3, r3, #1
   318e4:	e3530000 	cmp	r3, #0
   318e8:	112fff1e 	bxne	lr
   318ec:	eafffe13 	b	31140 <BusSocketManager::cycleActionCB(unsigned long, BR_RETURN_TYPE) [clone .part.0]>

000318f0 <BusSocketManager::clearPending()>:
   318f0:	e3e03000 	mvn	r3, #0
   318f4:	e590c1b8 	ldr	ip, [r0, #440]	; 0x1b8
   318f8:	e58031c4 	str	r3, [r0, #452]	; 0x1c4
   318fc:	e35c0000 	cmp	ip, #0
   31900:	0a00000b 	beq	31934 <BusSocketManager::clearPending()+0x44>
   31904:	e3a02000 	mov	r2, #0
   31908:	e1a01002 	mov	r1, r2
   3190c:	e0823102 	add	r3, r2, r2, lsl #2
   31910:	e0823083 	add	r3, r2, r3, lsl #1
   31914:	e2822001 	add	r2, r2, #1
   31918:	e0803103 	add	r3, r0, r3, lsl #2
   3191c:	e152000c 	cmp	r2, ip
   31920:	e5c31028 	strb	r1, [r3, #40]	; 0x28
   31924:	e5c31012 	strb	r1, [r3, #18]
   31928:	e5c31018 	strb	r1, [r3, #24]
   3192c:	e5c31020 	strb	r1, [r3, #32]
   31930:	1afffff5 	bne	3190c <BusSocketManager::clearPending()+0x1c>
   31934:	e59001bc 	ldr	r0, [r0, #444]	; 0x1bc
   31938:	e2800014 	add	r0, r0, #20
   3193c:	ea0004c3 	b	32c50 <TargetControl::cycleClearAction()>

00031940 <BusSocketManager::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   31940:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31944:	e1a07000 	mov	r7, r0
   31948:	e59001b8 	ldr	r0, [r0, #440]	; 0x1b8
   3194c:	e24dd00c 	sub	sp, sp, #12
   31950:	e3500000 	cmp	r0, #0
   31954:	e59da030 	ldr	sl, [sp, #48]	; 0x30
   31958:	0a000015 	beq	319b4 <BusSocketManager::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x74>
   3195c:	e1a08001 	mov	r8, r1
   31960:	e1a09002 	mov	r9, r2
   31964:	e1a0b003 	mov	fp, r3
   31968:	e1a04007 	mov	r4, r7
   3196c:	e3a05000 	mov	r5, #0
   31970:	e5d4c000 	ldrb	ip, [r4]
   31974:	e2855001 	add	r5, r5, #1
   31978:	e35c0000 	cmp	ip, #0
   3197c:	0a000009 	beq	319a8 <BusSocketManager::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x68>
   31980:	e5946004 	ldr	r6, [r4, #4]
   31984:	e3560000 	cmp	r6, #0
   31988:	0a000006 	beq	319a8 <BusSocketManager::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x68>
   3198c:	e594000c 	ldr	r0, [r4, #12]
   31990:	e1a0300b 	mov	r3, fp
   31994:	e1a02009 	mov	r2, r9
   31998:	e1a01008 	mov	r1, r8
   3199c:	e58da000 	str	sl, [sp]
   319a0:	e12fff36 	blx	r6
   319a4:	e59701b8 	ldr	r0, [r7, #440]	; 0x1b8
   319a8:	e1500005 	cmp	r0, r5
   319ac:	e284402c 	add	r4, r4, #44	; 0x2c
   319b0:	8affffee 	bhi	31970 <BusSocketManager::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x30>
   319b4:	e28dd00c 	add	sp, sp, #12
   319b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000319bc <BusRawAccess::BusRawAccess(TargetClockGenerator&)>:
   319bc:	e3a02000 	mov	r2, #0
   319c0:	e5801008 	str	r1, [r0, #8]
   319c4:	e1c020b0 	strh	r2, [r0]
   319c8:	e12fff1e 	bx	lr

000319cc <BusRawAccess::service()>:
   319cc:	e12fff1e 	bx	lr

000319d0 <BusRawAccess::targetReset(unsigned long)>:
   319d0:	e92d4010 	push	{r4, lr}
   319d4:	e1a04000 	mov	r4, r0
   319d8:	e3a01005 	mov	r1, #5
   319dc:	eb0001dd 	bl	32158 <BusRawAccess::muxSet(int)>
   319e0:	e59f000c 	ldr	r0, [pc, #12]	; 319f4 <BusRawAccess::targetReset(unsigned long)+0x24>
   319e4:	ebfff0ec 	bl	2dd9c <microsDelay>
   319e8:	e1a00004 	mov	r0, r4
   319ec:	e8bd4010 	pop	{r4, lr}
   319f0:	ea0001eb 	b	321a4 <BusRawAccess::muxClear()>
   319f4:	000186a0 	.word	0x000186a0

000319f8 <BusRawAccess::setPinOut(int, bool)>:
   319f8:	e92d4010 	push	{r4, lr}
   319fc:	e1a04002 	mov	r4, r2
   31a00:	e24dd008 	sub	sp, sp, #8
   31a04:	e6ef0071 	uxtb	r0, r1
   31a08:	e1a01002 	mov	r1, r2
   31a0c:	e58d0004 	str	r0, [sp, #4]
   31a10:	eb002be5 	bl	3c9ac <digitalWrite>
   31a14:	e59d0004 	ldr	r0, [sp, #4]
   31a18:	e3a01001 	mov	r1, #1
   31a1c:	eb002ba1 	bl	3c8a8 <pinMode>
   31a20:	e1a01004 	mov	r1, r4
   31a24:	e59d0004 	ldr	r0, [sp, #4]
   31a28:	e28dd008 	add	sp, sp, #8
   31a2c:	e8bd4010 	pop	{r4, lr}
   31a30:	ea002bdd 	b	3c9ac <digitalWrite>

00031a34 <BusRawAccess::init()>:
   31a34:	e92d4070 	push	{r4, r5, r6, lr}
   31a38:	e3a05000 	mov	r5, #0
   31a3c:	e1a04000 	mov	r4, r0
   31a40:	e1a02005 	mov	r2, r5
   31a44:	e3a0100b 	mov	r1, #11
   31a48:	ebffffea 	bl	319f8 <BusRawAccess::setPinOut(int, bool)>
   31a4c:	e1a00004 	mov	r0, r4
   31a50:	e1a02005 	mov	r2, r5
   31a54:	e3a01009 	mov	r1, #9
   31a58:	ebffffe6 	bl	319f8 <BusRawAccess::setPinOut(int, bool)>
   31a5c:	e1a00004 	mov	r0, r4
   31a60:	e1a02005 	mov	r2, r5
   31a64:	e3a0100a 	mov	r1, #10
   31a68:	ebffffe2 	bl	319f8 <BusRawAccess::setPinOut(int, bool)>
   31a6c:	e1a00004 	mov	r0, r4
   31a70:	e3a02001 	mov	r2, #1
   31a74:	e3a01010 	mov	r1, #16
   31a78:	ebffffde 	bl	319f8 <BusRawAccess::setPinOut(int, bool)>
   31a7c:	e1a00004 	mov	r0, r4
   31a80:	e3a02001 	mov	r2, #1
   31a84:	e3a01013 	mov	r1, #19
   31a88:	ebffffda 	bl	319f8 <BusRawAccess::setPinOut(int, bool)>
   31a8c:	e1a00004 	mov	r0, r4
   31a90:	e1a02005 	mov	r2, r5
   31a94:	e3a01007 	mov	r1, #7
   31a98:	e5c45000 	strb	r5, [r4]
   31a9c:	ebffffd5 	bl	319f8 <BusRawAccess::setPinOut(int, bool)>
   31aa0:	e1a00004 	mov	r0, r4
   31aa4:	e3a02001 	mov	r2, #1
   31aa8:	e3a01006 	mov	r1, #6
   31aac:	ebffffd1 	bl	319f8 <BusRawAccess::setPinOut(int, bool)>
   31ab0:	e1a00004 	mov	r0, r4
   31ab4:	e3a02001 	mov	r2, #1
   31ab8:	e3a01008 	mov	r1, #8
   31abc:	ebffffcd 	bl	319f8 <BusRawAccess::setPinOut(int, bool)>
   31ac0:	e1a00004 	mov	r0, r4
   31ac4:	e5c45001 	strb	r5, [r4, #1]
   31ac8:	e8bd4070 	pop	{r4, r5, r6, lr}
   31acc:	ea000019 	b	31b38 <BusRawAccess::waitSystemInit()>

00031ad0 <BusRawAccess::setBusSignal(BR_BUS_ACTION, bool)>:
   31ad0:	e2411001 	sub	r1, r1, #1
   31ad4:	e3510003 	cmp	r1, #3
   31ad8:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   31adc:	ea000014 	b	31b34 <BusRawAccess::setBusSignal(BR_BUS_ACTION, bool)+0x64>
   31ae0:	00031b1c 	.word	0x00031b1c
   31ae4:	00031b0c 	.word	0x00031b0c
   31ae8:	00031afc 	.word	0x00031afc
   31aec:	00031af0 	.word	0x00031af0
   31af0:	e3520000 	cmp	r2, #0
   31af4:	0a00000d 	beq	31b30 <BusRawAccess::setBusSignal(BR_BUS_ACTION, bool)+0x60>
   31af8:	ea0000a8 	b	31da0 <BusRawAccess::busReqStart()>
   31afc:	e3520000 	cmp	r2, #0
   31b00:	0a000009 	beq	31b2c <BusRawAccess::setBusSignal(BR_BUS_ACTION, bool)+0x5c>
   31b04:	e3a01002 	mov	r1, #2
   31b08:	ea000192 	b	32158 <BusRawAccess::muxSet(int)>
   31b0c:	e3520000 	cmp	r2, #0
   31b10:	0a000005 	beq	31b2c <BusRawAccess::setBusSignal(BR_BUS_ACTION, bool)+0x5c>
   31b14:	e3a01006 	mov	r1, #6
   31b18:	ea00018e 	b	32158 <BusRawAccess::muxSet(int)>
   31b1c:	e3520000 	cmp	r2, #0
   31b20:	0a000001 	beq	31b2c <BusRawAccess::setBusSignal(BR_BUS_ACTION, bool)+0x5c>
   31b24:	e3a01005 	mov	r1, #5
   31b28:	ea00018a 	b	32158 <BusRawAccess::muxSet(int)>
   31b2c:	ea00019c 	b	321a4 <BusRawAccess::muxClear()>
   31b30:	ea000110 	b	31f78 <BusRawAccess::busReqRelease()>
   31b34:	e12fff1e 	bx	lr

00031b38 <BusRawAccess::waitSystemInit()>:
   31b38:	e3a02000 	mov	r2, #0
   31b3c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31b40:	e59f30d8 	ldr	r3, [pc, #216]	; 31c20 <BusRawAccess::waitSystemInit()+0xe8>
   31b44:	e1c020bc 	strh	r2, [r0, #12]
   31b48:	e1a07002 	mov	r7, r2
   31b4c:	e1a05002 	mov	r5, r2
   31b50:	e59f20cc 	ldr	r2, [pc, #204]	; 31c24 <BusRawAccess::waitSystemInit()+0xec>
   31b54:	e1a06003 	mov	r6, r3
   31b58:	e59f80c8 	ldr	r8, [pc, #200]	; 31c28 <BusRawAccess::waitSystemInit()+0xf0>
   31b5c:	e24dd010 	sub	sp, sp, #16
   31b60:	e58320a0 	str	r2, [r3, #160]	; 0xa0
   31b64:	ea000005 	b	31b80 <BusRawAccess::waitSystemInit()+0x48>
   31b68:	e3a00001 	mov	r0, #1
   31b6c:	e2855001 	add	r5, r5, #1
   31b70:	ebfff089 	bl	2dd9c <microsDelay>
   31b74:	e1550008 	cmp	r5, r8
   31b78:	e59670a0 	ldr	r7, [r6, #160]	; 0xa0
   31b7c:	0a000021 	beq	31c08 <BusRawAccess::waitSystemInit()+0xd0>
   31b80:	e59630a0 	ldr	r3, [r6, #160]	; 0xa0
   31b84:	e2134080 	ands	r4, r3, #128	; 0x80
   31b88:	1afffff6 	bne	31b68 <BusRawAccess::waitSystemInit()+0x30>
   31b8c:	e3a01004 	mov	r1, #4
   31b90:	e3a0000d 	mov	r0, #13
   31b94:	eb002b43 	bl	3c8a8 <pinMode>
   31b98:	e3a01004 	mov	r1, #4
   31b9c:	e3a0000c 	mov	r0, #12
   31ba0:	eb002b40 	bl	3c8a8 <pinMode>
   31ba4:	e3e02000 	mvn	r2, #0
   31ba8:	e59f607c 	ldr	r6, [pc, #124]	; 31c2c <BusRawAccess::waitSystemInit()+0xf4>
   31bac:	e59f806c 	ldr	r8, [pc, #108]	; 31c20 <BusRawAccess::waitSystemInit()+0xe8>
   31bb0:	e59f3078 	ldr	r3, [pc, #120]	; 31c30 <BusRawAccess::waitSystemInit()+0xf8>
   31bb4:	e5862004 	str	r2, [r6, #4]
   31bb8:	e3a00001 	mov	r0, #1
   31bbc:	e58830a4 	str	r3, [r8, #164]	; 0xa4
   31bc0:	ebfff075 	bl	2dd9c <microsDelay>
   31bc4:	e59f3068 	ldr	r3, [pc, #104]	; 31c34 <BusRawAccess::waitSystemInit()+0xfc>
   31bc8:	e3a00001 	mov	r0, #1
   31bcc:	e58830a0 	str	r3, [r8, #160]	; 0xa0
   31bd0:	ebfff071 	bl	2dd9c <microsDelay>
   31bd4:	e59f305c 	ldr	r3, [pc, #92]	; 31c38 <BusRawAccess::waitSystemInit()+0x100>
   31bd8:	e3a00001 	mov	r0, #1
   31bdc:	e5863000 	str	r3, [r6]
   31be0:	ebfff06d 	bl	2dd9c <microsDelay>
   31be4:	e3a03010 	mov	r3, #16
   31be8:	e3a01004 	mov	r1, #4
   31bec:	e88d00a0 	stm	sp, {r5, r7}
   31bf0:	e59f2044 	ldr	r2, [pc, #68]	; 31c3c <BusRawAccess::waitSystemInit()+0x104>
   31bf4:	e59f0044 	ldr	r0, [pc, #68]	; 31c40 <BusRawAccess::waitSystemInit()+0x108>
   31bf8:	e58d4008 	str	r4, [sp, #8]
   31bfc:	ebfff463 	bl	2ed90 <LogWrite>
   31c00:	e28dd010 	add	sp, sp, #16
   31c04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31c08:	e59f3034 	ldr	r3, [pc, #52]	; 31c44 <BusRawAccess::waitSystemInit()+0x10c>
   31c0c:	e3a00001 	mov	r0, #1
   31c10:	e58630a0 	str	r3, [r6, #160]	; 0xa0
   31c14:	ebfff060 	bl	2dd9c <microsDelay>
   31c18:	e59640a0 	ldr	r4, [r6, #160]	; 0xa0
   31c1c:	eaffffda 	b	31b8c <BusRawAccess::waitSystemInit()+0x54>
   31c20:	20101000 	.word	0x20101000
   31c24:	5a000006 	.word	0x5a000006
   31c28:	000186a0 	.word	0x000186a0
   31c2c:	2020c000 	.word	0x2020c000
   31c30:	5a010000 	.word	0x5a010000
   31c34:	5a000016 	.word	0x5a000016
   31c38:	00002363 	.word	0x00002363
   31c3c:	00044bc4 	.word	0x00044bc4
   31c40:	00044bfc 	.word	0x00044bfc
   31c44:	5a000026 	.word	0x5a000026

00031c48 <BusRawAccess::waitConfigure(bool, bool)>:
   31c48:	e59f302c 	ldr	r3, [pc, #44]	; 31c7c <BusRawAccess::waitConfigure(bool, bool)+0x34>
   31c4c:	e3510000 	cmp	r1, #0
   31c50:	e5933000 	ldr	r3, [r3]
   31c54:	e5c0200d 	strb	r2, [r0, #13]
   31c58:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   31c5c:	e3c33008 	bic	r3, r3, #8
   31c60:	13833b02 	orrne	r3, r3, #2048	; 0x800
   31c64:	e59f2010 	ldr	r2, [pc, #16]	; 31c7c <BusRawAccess::waitConfigure(bool, bool)+0x34>
   31c68:	13833008 	orrne	r3, r3, #8
   31c6c:	e5c0100c 	strb	r1, [r0, #12]
   31c70:	e3a00000 	mov	r0, #0
   31c74:	e5823000 	str	r3, [r2]
   31c78:	e12fff1e 	bx	lr
   31c7c:	2020c000 	.word	0x2020c000

00031c80 <BusRawAccess::waitResetFlipFlops(bool)>:
   31c80:	e59f2084 	ldr	r2, [pc, #132]	; 31d0c <BusRawAccess::waitResetFlipFlops(bool)+0x8c>
   31c84:	e5923004 	ldr	r3, [r2, #4]
   31c88:	e2133001 	ands	r3, r3, #1
   31c8c:	112fff1e 	bxne	lr
   31c90:	e59fc078 	ldr	ip, [pc, #120]	; 31d10 <BusRawAccess::waitResetFlipFlops(bool)+0x90>
   31c94:	e3510000 	cmp	r1, #0
   31c98:	e59c1034 	ldr	r1, [ip, #52]	; 0x34
   31c9c:	0a00000a 	beq	31ccc <BusRawAccess::waitResetFlipFlops(bool)+0x4c>
   31ca0:	e5d0100d 	ldrb	r1, [r0, #13]
   31ca4:	e3510000 	cmp	r1, #0
   31ca8:	13e014ff 	mvnne	r1, #-16777216	; 0xff000000
   31cac:	15821018 	strne	r1, [r2, #24]
   31cb0:	0a000013 	beq	31d04 <BusRawAccess::waitResetFlipFlops(bool)+0x84>
   31cb4:	e5d0200c 	ldrb	r2, [r0, #12]
   31cb8:	e3520000 	cmp	r2, #0
   31cbc:	13e034ff 	mvnne	r3, #-16777216	; 0xff000000
   31cc0:	e59f2044 	ldr	r2, [pc, #68]	; 31d0c <BusRawAccess::waitResetFlipFlops(bool)+0x8c>
   31cc4:	e5823018 	str	r3, [r2, #24]
   31cc8:	e12fff1e 	bx	lr
   31ccc:	e3110002 	tst	r1, #2
   31cd0:	0a000005 	beq	31cec <BusRawAccess::waitResetFlipFlops(bool)+0x6c>
   31cd4:	e3a0c000 	mov	ip, #0
   31cd8:	e59f202c 	ldr	r2, [pc, #44]	; 31d0c <BusRawAccess::waitResetFlipFlops(bool)+0x8c>
   31cdc:	e582c018 	str	ip, [r2, #24]
   31ce0:	e3110001 	tst	r1, #1
   31ce4:	1afffff5 	bne	31cc0 <BusRawAccess::waitResetFlipFlops(bool)+0x40>
   31ce8:	eafffff1 	b	31cb4 <BusRawAccess::waitResetFlipFlops(bool)+0x34>
   31cec:	e5d0c00d 	ldrb	ip, [r0, #13]
   31cf0:	e35c0000 	cmp	ip, #0
   31cf4:	13e0c4ff 	mvnne	ip, #-16777216	; 0xff000000
   31cf8:	1582c018 	strne	ip, [r2, #24]
   31cfc:	1afffff7 	bne	31ce0 <BusRawAccess::waitResetFlipFlops(bool)+0x60>
   31d00:	eafffff3 	b	31cd4 <BusRawAccess::waitResetFlipFlops(bool)+0x54>
   31d04:	e5823018 	str	r3, [r2, #24]
   31d08:	eaffffe9 	b	31cb4 <BusRawAccess::waitResetFlipFlops(bool)+0x34>
   31d0c:	2020c000 	.word	0x2020c000
   31d10:	20200000 	.word	0x20200000

00031d14 <BusRawAccess::waitClearDetected()>:
   31d14:	e12fff1e 	bx	lr

00031d18 <BusRawAccess::waitSuspend(bool)>:
   31d18:	e3510000 	cmp	r1, #0
   31d1c:	0a000005 	beq	31d38 <BusRawAccess::waitSuspend(bool)+0x20>
   31d20:	e59f2044 	ldr	r2, [pc, #68]	; 31d6c <BusRawAccess::waitSuspend(bool)+0x54>
   31d24:	e5923000 	ldr	r3, [r2]
   31d28:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   31d2c:	e3c33008 	bic	r3, r3, #8
   31d30:	e5823000 	str	r3, [r2]
   31d34:	e12fff1e 	bx	lr
   31d38:	e59f302c 	ldr	r3, [pc, #44]	; 31d6c <BusRawAccess::waitSuspend(bool)+0x54>
   31d3c:	e5d0200d 	ldrb	r2, [r0, #13]
   31d40:	e5933000 	ldr	r3, [r3]
   31d44:	e3520000 	cmp	r2, #0
   31d48:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   31d4c:	e5d0200c 	ldrb	r2, [r0, #12]
   31d50:	e3c33008 	bic	r3, r3, #8
   31d54:	13833008 	orrne	r3, r3, #8
   31d58:	e3520000 	cmp	r2, #0
   31d5c:	e59f2008 	ldr	r2, [pc, #8]	; 31d6c <BusRawAccess::waitSuspend(bool)+0x54>
   31d60:	13833b02 	orrne	r3, r3, #2048	; 0x800
   31d64:	e5823000 	str	r3, [r2]
   31d68:	e12fff1e 	bx	lr
   31d6c:	2020c000 	.word	0x2020c000

00031d70 <BusRawAccess::waitRawSet(bool, bool)>:
   31d70:	e59f3024 	ldr	r3, [pc, #36]	; 31d9c <BusRawAccess::waitRawSet(bool, bool)+0x2c>
   31d74:	e3520000 	cmp	r2, #0
   31d78:	e5933000 	ldr	r3, [r3]
   31d7c:	e59f2018 	ldr	r2, [pc, #24]	; 31d9c <BusRawAccess::waitRawSet(bool, bool)+0x2c>
   31d80:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   31d84:	e3c33008 	bic	r3, r3, #8
   31d88:	13833008 	orrne	r3, r3, #8
   31d8c:	e3510000 	cmp	r1, #0
   31d90:	13833b02 	orrne	r3, r3, #2048	; 0x800
   31d94:	e5823000 	str	r3, [r2]
   31d98:	e12fff1e 	bx	lr
   31d9c:	2020c000 	.word	0x2020c000

00031da0 <BusRawAccess::busReqStart()>:
   31da0:	e59f302c 	ldr	r3, [pc, #44]	; 31dd4 <BusRawAccess::busReqStart()+0x34>
   31da4:	e59fc02c 	ldr	ip, [pc, #44]	; 31dd8 <BusRawAccess::busReqStart()+0x38>
   31da8:	e5931008 	ldr	r1, [r3, #8]
   31dac:	e59f2028 	ldr	r2, [pc, #40]	; 31ddc <BusRawAccess::busReqStart()+0x3c>
   31db0:	e20114ff 	and	r1, r1, #-16777216	; 0xff000000
   31db4:	e5831008 	str	r1, [r3, #8]
   31db8:	e5900004 	ldr	r0, [r0, #4]
   31dbc:	e3a01000 	mov	r1, #0
   31dc0:	e3500011 	cmp	r0, #17
   31dc4:	11a0200c 	movne	r2, ip
   31dc8:	e3a00013 	mov	r0, #19
   31dcc:	e583201c 	str	r2, [r3, #28]
   31dd0:	ea002af5 	b	3c9ac <digitalWrite>
   31dd4:	20200000 	.word	0x20200000
   31dd8:	00060043 	.word	0x00060043
   31ddc:	0006004b 	.word	0x0006004b

00031de0 <BusRawAccess::busReqTakeControl()>:
   31de0:	e92d4070 	push	{r4, r5, r6, lr}
   31de4:	e3a05001 	mov	r5, #1
   31de8:	e1a01005 	mov	r1, r5
   31dec:	e5c05000 	strb	r5, [r0]
   31df0:	e1a04000 	mov	r4, r0
   31df4:	ebffffc7 	bl	31d18 <BusRawAccess::waitSuspend(bool)>
   31df8:	e3a01040 	mov	r1, #64	; 0x40
   31dfc:	e59f3088 	ldr	r3, [pc, #136]	; 31e8c <BusRawAccess::busReqTakeControl()+0xac>
   31e00:	e1a00004 	mov	r0, r4
   31e04:	e5932008 	ldr	r2, [r3, #8]
   31e08:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   31e0c:	e5832008 	str	r2, [r3, #8]
   31e10:	e583101c 	str	r1, [r3, #28]
   31e14:	e1a02005 	mov	r2, r5
   31e18:	e3a01011 	mov	r1, #17
   31e1c:	ebfffef5 	bl	319f8 <BusRawAccess::setPinOut(int, bool)>
   31e20:	e1a02005 	mov	r2, r5
   31e24:	e1a00004 	mov	r0, r4
   31e28:	e3a01012 	mov	r1, #18
   31e2c:	ebfffef1 	bl	319f8 <BusRawAccess::setPinOut(int, bool)>
   31e30:	e1a02005 	mov	r2, r5
   31e34:	e1a00004 	mov	r0, r4
   31e38:	e3a01000 	mov	r1, #0
   31e3c:	ebfffeed 	bl	319f8 <BusRawAccess::setPinOut(int, bool)>
   31e40:	e1a02005 	mov	r2, r5
   31e44:	e1a01005 	mov	r1, r5
   31e48:	e1a00004 	mov	r0, r4
   31e4c:	ebfffee9 	bl	319f8 <BusRawAccess::setPinOut(int, bool)>
   31e50:	e1a02005 	mov	r2, r5
   31e54:	e1a00004 	mov	r0, r4
   31e58:	e3a01005 	mov	r1, #5
   31e5c:	ebfffee5 	bl	319f8 <BusRawAccess::setPinOut(int, bool)>
   31e60:	e1a02005 	mov	r2, r5
   31e64:	e1a00004 	mov	r0, r4
   31e68:	e3a01003 	mov	r1, #3
   31e6c:	ebfffee1 	bl	319f8 <BusRawAccess::setPinOut(int, bool)>
   31e70:	e5943004 	ldr	r3, [r4, #4]
   31e74:	e3530011 	cmp	r3, #17
   31e78:	18bd8070 	popne	{r4, r5, r6, pc}
   31e7c:	e3a01000 	mov	r1, #0
   31e80:	e8bd4070 	pop	{r4, r5, r6, lr}
   31e84:	e3a00003 	mov	r0, #3
   31e88:	ea002ac7 	b	3c9ac <digitalWrite>
   31e8c:	20200000 	.word	0x20200000

00031e90 <BusRawAccess::busReqWaitForAck(bool, unsigned long)>:
   31e90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31e94:	e3a0cffa 	mov	ip, #1000	; 0x3e8
   31e98:	e1a04001 	mov	r4, r1
   31e9c:	e59f10cc 	ldr	r1, [pc, #204]	; 31f70 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0xe0>
   31ea0:	ea000001 	b	31eac <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0x1c>
   31ea4:	e25cc001 	subs	ip, ip, #1
   31ea8:	0a000005 	beq	31ec4 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0x34>
   31eac:	e5913034 	ldr	r3, [r1, #52]	; 0x34
   31eb0:	e1a03123 	lsr	r3, r3, #2
   31eb4:	e2233001 	eor	r3, r3, #1
   31eb8:	e2033001 	and	r3, r3, #1
   31ebc:	e1540003 	cmp	r4, r3
   31ec0:	1afffff7 	bne	31ea4 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0x14>
   31ec4:	e59f30a4 	ldr	r3, [pc, #164]	; 31f70 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0xe0>
   31ec8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   31ecc:	e1a03123 	lsr	r3, r3, #2
   31ed0:	e2233001 	eor	r3, r3, #1
   31ed4:	e2033001 	and	r3, r3, #1
   31ed8:	e1540003 	cmp	r4, r3
   31edc:	0a000011 	beq	31f28 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0x98>
   31ee0:	e3520000 	cmp	r2, #0
   31ee4:	0a000018 	beq	31f4c <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0xbc>
   31ee8:	e3520001 	cmp	r2, #1
   31eec:	21a06002 	movcs	r6, r2
   31ef0:	33a06001 	movcc	r6, #1
   31ef4:	e3a05000 	mov	r5, #0
   31ef8:	e59f7070 	ldr	r7, [pc, #112]	; 31f70 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0xe0>
   31efc:	e5973034 	ldr	r3, [r7, #52]	; 0x34
   31f00:	e2855001 	add	r5, r5, #1
   31f04:	e1a03123 	lsr	r3, r3, #2
   31f08:	e2233001 	eor	r3, r3, #1
   31f0c:	e2033001 	and	r3, r3, #1
   31f10:	e1540003 	cmp	r4, r3
   31f14:	0a000003 	beq	31f28 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0x98>
   31f18:	e3a00001 	mov	r0, #1
   31f1c:	ebffef9e 	bl	2dd9c <microsDelay>
   31f20:	e1560005 	cmp	r6, r5
   31f24:	1afffff4 	bne	31efc <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0x6c>
   31f28:	e59f3040 	ldr	r3, [pc, #64]	; 31f70 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0xe0>
   31f2c:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   31f30:	e1a00120 	lsr	r0, r0, #2
   31f34:	e2200001 	eor	r0, r0, #1
   31f38:	e2000001 	and	r0, r0, #1
   31f3c:	e0400004 	sub	r0, r0, r4
   31f40:	e16f0f10 	clz	r0, r0
   31f44:	e1a002a0 	lsr	r0, r0, #5
   31f48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31f4c:	e5903008 	ldr	r3, [r0, #8]
   31f50:	e59f001c 	ldr	r0, [pc, #28]	; 31f74 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0xe4>
   31f54:	e5931000 	ldr	r1, [r3]
   31f58:	e1510000 	cmp	r1, r0
   31f5c:	83a06001 	movhi	r6, #1
   31f60:	8affffe3 	bhi	31ef4 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0x64>
   31f64:	eb002767 	bl	3bd08 <__udivsi3>
   31f68:	e1a02000 	mov	r2, r0
   31f6c:	eaffffdd 	b	31ee8 <BusRawAccess::busReqWaitForAck(bool, unsigned long)+0x58>
   31f70:	20200000 	.word	0x20200000
   31f74:	3b9aca00 	.word	0x3b9aca00

00031f78 <BusRawAccess::busReqRelease()>:
   31f78:	e5903004 	ldr	r3, [r0, #4]
   31f7c:	e92d4070 	push	{r4, r5, r6, lr}
   31f80:	e3530011 	cmp	r3, #17
   31f84:	e1a04000 	mov	r4, r0
   31f88:	0a00003f 	beq	3208c <BusRawAccess::busReqRelease()+0x114>
   31f8c:	e3a06001 	mov	r6, #1
   31f90:	e59f5158 	ldr	r5, [pc, #344]	; 320f0 <BusRawAccess::busReqRelease()+0x178>
   31f94:	e59f3158 	ldr	r3, [pc, #344]	; 320f4 <BusRawAccess::busReqRelease()+0x17c>
   31f98:	e3a00014 	mov	r0, #20
   31f9c:	e585301c 	str	r3, [r5, #28]
   31fa0:	eb002aac 	bl	3ca58 <lowlev_cycleDelay>
   31fa4:	e3a00014 	mov	r0, #20
   31fa8:	e5856028 	str	r6, [r5, #40]	; 0x28
   31fac:	eb002aa9 	bl	3ca58 <lowlev_cycleDelay>
   31fb0:	e585601c 	str	r6, [r5, #28]
   31fb4:	e3a01040 	mov	r1, #64	; 0x40
   31fb8:	e59f3130 	ldr	r3, [pc, #304]	; 320f0 <BusRawAccess::busReqRelease()+0x178>
   31fbc:	e1a00004 	mov	r0, r4
   31fc0:	e5932008 	ldr	r2, [r3, #8]
   31fc4:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   31fc8:	e5832008 	str	r2, [r3, #8]
   31fcc:	e583101c 	str	r1, [r3, #28]
   31fd0:	eb000073 	bl	321a4 <BusRawAccess::muxClear()>
   31fd4:	e5943004 	ldr	r3, [r4, #4]
   31fd8:	e3530011 	cmp	r3, #17
   31fdc:	0a00003f 	beq	320e0 <BusRawAccess::busReqRelease()+0x168>
   31fe0:	e3a01001 	mov	r1, #1
   31fe4:	e1a00004 	mov	r0, r4
   31fe8:	ebffff24 	bl	31c80 <BusRawAccess::waitResetFlipFlops(bool)>
   31fec:	e1a00004 	mov	r0, r4
   31ff0:	ebffff47 	bl	31d14 <BusRawAccess::waitClearDetected()>
   31ff4:	e3a01000 	mov	r1, #0
   31ff8:	e1a00004 	mov	r0, r4
   31ffc:	ebffff45 	bl	31d18 <BusRawAccess::waitSuspend(bool)>
   32000:	e5940004 	ldr	r0, [r4, #4]
   32004:	e59f10ec 	ldr	r1, [pc, #236]	; 320f8 <BusRawAccess::busReqRelease()+0x180>
   32008:	e3500011 	cmp	r0, #17
   3200c:	e59f30e8 	ldr	r3, [pc, #232]	; 320fc <BusRawAccess::busReqRelease()+0x184>
   32010:	11a03001 	movne	r3, r1
   32014:	e59f20d4 	ldr	r2, [pc, #212]	; 320f0 <BusRawAccess::busReqRelease()+0x178>
   32018:	e3a01000 	mov	r1, #0
   3201c:	e582301c 	str	r3, [r2, #28]
   32020:	e3a00011 	mov	r0, #17
   32024:	eb002a1f 	bl	3c8a8 <pinMode>
   32028:	e3a01000 	mov	r1, #0
   3202c:	e3a00012 	mov	r0, #18
   32030:	eb002a1c 	bl	3c8a8 <pinMode>
   32034:	e3a01000 	mov	r1, #0
   32038:	e1a00001 	mov	r0, r1
   3203c:	eb002a19 	bl	3c8a8 <pinMode>
   32040:	e3a01000 	mov	r1, #0
   32044:	e3a00001 	mov	r0, #1
   32048:	eb002a16 	bl	3c8a8 <pinMode>
   3204c:	e3a01000 	mov	r1, #0
   32050:	e3a00005 	mov	r0, #5
   32054:	eb002a13 	bl	3c8a8 <pinMode>
   32058:	e5943004 	ldr	r3, [r4, #4]
   3205c:	e3530011 	cmp	r3, #17
   32060:	0a000002 	beq	32070 <BusRawAccess::busReqRelease()+0xf8>
   32064:	e3a01000 	mov	r1, #0
   32068:	e3a00003 	mov	r0, #3
   3206c:	eb002a0d 	bl	3c8a8 <pinMode>
   32070:	e3a02000 	mov	r2, #0
   32074:	e1a00004 	mov	r0, r4
   32078:	e1a01002 	mov	r1, r2
   3207c:	ebffff83 	bl	31e90 <BusRawAccess::busReqWaitForAck(bool, unsigned long)>
   32080:	e3a03000 	mov	r3, #0
   32084:	e5c43000 	strb	r3, [r4]
   32088:	e8bd8070 	pop	{r4, r5, r6, pc}
   3208c:	e3a02040 	mov	r2, #64	; 0x40
   32090:	e3a06001 	mov	r6, #1
   32094:	e59f5054 	ldr	r5, [pc, #84]	; 320f0 <BusRawAccess::busReqRelease()+0x178>
   32098:	e59f3060 	ldr	r3, [pc, #96]	; 32100 <BusRawAccess::busReqRelease()+0x188>
   3209c:	e5852028 	str	r2, [r5, #40]	; 0x28
   320a0:	e5952008 	ldr	r2, [r5, #8]
   320a4:	e59f1058 	ldr	r1, [pc, #88]	; 32104 <BusRawAccess::busReqRelease()+0x18c>
   320a8:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   320ac:	e1823003 	orr	r3, r2, r3
   320b0:	e5853008 	str	r3, [r5, #8]
   320b4:	e3a00064 	mov	r0, #100	; 0x64
   320b8:	e585101c 	str	r1, [r5, #28]
   320bc:	eb002a65 	bl	3ca58 <lowlev_cycleDelay>
   320c0:	e3a00014 	mov	r0, #20
   320c4:	e5856028 	str	r6, [r5, #40]	; 0x28
   320c8:	eb002a62 	bl	3ca58 <lowlev_cycleDelay>
   320cc:	e585601c 	str	r6, [r5, #28]
   320d0:	e5953008 	ldr	r3, [r5, #8]
   320d4:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   320d8:	e5853008 	str	r3, [r5, #8]
   320dc:	eaffffb4 	b	31fb4 <BusRawAccess::busReqRelease()+0x3c>
   320e0:	e3a01001 	mov	r1, #1
   320e4:	e3a00003 	mov	r0, #3
   320e8:	eb002a2f 	bl	3c9ac <digitalWrite>
   320ec:	eaffffbb 	b	31fe0 <BusRawAccess::busReqRelease()+0x68>
   320f0:	20200000 	.word	0x20200000
   320f4:	0006000b 	.word	0x0006000b
   320f8:	000e002b 	.word	0x000e002b
   320fc:	000e0023 	.word	0x000e0023
   32100:	00249249 	.word	0x00249249
   32104:	00100002 	.word	0x00100002

00032108 <BusRawAccess::busRequestAndTake(unsigned long)>:
   32108:	e92d4010 	push	{r4, lr}
   3210c:	e1a04000 	mov	r4, r0
   32110:	e24dd008 	sub	sp, sp, #8
   32114:	e58d1004 	str	r1, [sp, #4]
   32118:	ebffff20 	bl	31da0 <BusRawAccess::busReqStart()>
   3211c:	e1a00004 	mov	r0, r4
   32120:	e3a01001 	mov	r1, #1
   32124:	e59d2004 	ldr	r2, [sp, #4]
   32128:	ebffff58 	bl	31e90 <BusRawAccess::busReqWaitForAck(bool, unsigned long)>
   3212c:	e3500000 	cmp	r0, #0
   32130:	e1a00004 	mov	r0, r4
   32134:	0a000003 	beq	32148 <BusRawAccess::busRequestAndTake(unsigned long)+0x40>
   32138:	ebffff28 	bl	31de0 <BusRawAccess::busReqTakeControl()>
   3213c:	e3a00000 	mov	r0, #0
   32140:	e28dd008 	add	sp, sp, #8
   32144:	e8bd8010 	pop	{r4, pc}
   32148:	ebffff8a 	bl	31f78 <BusRawAccess::busReqRelease()>
   3214c:	e3a00002 	mov	r0, #2
   32150:	e28dd008 	add	sp, sp, #8
   32154:	e8bd8010 	pop	{r4, pc}

00032158 <BusRawAccess::muxSet(int)>:
   32158:	e5903004 	ldr	r3, [r0, #4]
   3215c:	e3530011 	cmp	r3, #17
   32160:	0a000008 	beq	32188 <BusRawAccess::muxSet(int)+0x30>
   32164:	e3a02801 	mov	r2, #65536	; 0x10000
   32168:	e3a00c0e 	mov	r0, #3584	; 0xe00
   3216c:	e59f302c 	ldr	r3, [pc, #44]	; 321a0 <BusRawAccess::muxSet(int)+0x48>
   32170:	e1a01481 	lsl	r1, r1, #9
   32174:	e583201c 	str	r2, [r3, #28]
   32178:	e5830028 	str	r0, [r3, #40]	; 0x28
   3217c:	e583101c 	str	r1, [r3, #28]
   32180:	e5832028 	str	r2, [r3, #40]	; 0x28
   32184:	e12fff1e 	bx	lr
   32188:	e3a02c0e 	mov	r2, #3584	; 0xe00
   3218c:	e59f300c 	ldr	r3, [pc, #12]	; 321a0 <BusRawAccess::muxSet(int)+0x48>
   32190:	e1a01481 	lsl	r1, r1, #9
   32194:	e5832028 	str	r2, [r3, #40]	; 0x28
   32198:	e583101c 	str	r1, [r3, #28]
   3219c:	e12fff1e 	bx	lr
   321a0:	20200000 	.word	0x20200000

000321a4 <BusRawAccess::muxClear()>:
   321a4:	e5903004 	ldr	r3, [r0, #4]
   321a8:	e3530011 	cmp	r3, #17
   321ac:	03a02c0e 	moveq	r2, #3584	; 0xe00
   321b0:	13a01801 	movne	r1, #65536	; 0x10000
   321b4:	13a02c0e 	movne	r2, #3584	; 0xe00
   321b8:	159f300c 	ldrne	r3, [pc, #12]	; 321cc <BusRawAccess::muxClear()+0x28>
   321bc:	059f3008 	ldreq	r3, [pc, #8]	; 321cc <BusRawAccess::muxClear()+0x28>
   321c0:	1583101c 	strne	r1, [r3, #28]
   321c4:	e5832028 	str	r2, [r3, #40]	; 0x28
   321c8:	e12fff1e 	bx	lr
   321cc:	20200000 	.word	0x20200000

000321d0 <BusRawAccess::muxDataBusOutputEnable()>:
   321d0:	e5903004 	ldr	r3, [r0, #4]
   321d4:	e92d4010 	push	{r4, lr}
   321d8:	e3530011 	cmp	r3, #17
   321dc:	e1a04000 	mov	r4, r0
   321e0:	0a000011 	beq	3222c <BusRawAccess::muxDataBusOutputEnable()+0x5c>
   321e4:	e3a00c0e 	mov	r0, #3584	; 0xe00
   321e8:	e3a01c02 	mov	r1, #512	; 0x200
   321ec:	e3a02801 	mov	r2, #65536	; 0x10000
   321f0:	e59f304c 	ldr	r3, [pc, #76]	; 32244 <BusRawAccess::muxDataBusOutputEnable()+0x74>
   321f4:	e5830028 	str	r0, [r3, #40]	; 0x28
   321f8:	e583101c 	str	r1, [r3, #28]
   321fc:	e5832028 	str	r2, [r3, #40]	; 0x28
   32200:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32204:	eb002a13 	bl	3ca58 <lowlev_cycleDelay>
   32208:	e5943004 	ldr	r3, [r4, #4]
   3220c:	e3530011 	cmp	r3, #17
   32210:	03a02c0e 	moveq	r2, #3584	; 0xe00
   32214:	13a02801 	movne	r2, #65536	; 0x10000
   32218:	059f3024 	ldreq	r3, [pc, #36]	; 32244 <BusRawAccess::muxDataBusOutputEnable()+0x74>
   3221c:	159f3020 	ldrne	r3, [pc, #32]	; 32244 <BusRawAccess::muxDataBusOutputEnable()+0x74>
   32220:	05832028 	streq	r2, [r3, #40]	; 0x28
   32224:	1583201c 	strne	r2, [r3, #28]
   32228:	e8bd8010 	pop	{r4, pc}
   3222c:	e3a01c0e 	mov	r1, #3584	; 0xe00
   32230:	e3a02c02 	mov	r2, #512	; 0x200
   32234:	e59f3008 	ldr	r3, [pc, #8]	; 32244 <BusRawAccess::muxDataBusOutputEnable()+0x74>
   32238:	e5831028 	str	r1, [r3, #40]	; 0x28
   3223c:	e583201c 	str	r2, [r3, #28]
   32240:	eaffffee 	b	32200 <BusRawAccess::muxDataBusOutputEnable()+0x30>
   32244:	20200000 	.word	0x20200000

00032248 <BusRawAccess::muxDataBusOutputStart()>:
   32248:	e5903004 	ldr	r3, [r0, #4]
   3224c:	e3530011 	cmp	r3, #17
   32250:	0a000007 	beq	32274 <BusRawAccess::muxDataBusOutputStart()+0x2c>
   32254:	e3a00c0e 	mov	r0, #3584	; 0xe00
   32258:	e3a01c02 	mov	r1, #512	; 0x200
   3225c:	e3a02801 	mov	r2, #65536	; 0x10000
   32260:	e59f3024 	ldr	r3, [pc, #36]	; 3228c <BusRawAccess::muxDataBusOutputStart()+0x44>
   32264:	e5830028 	str	r0, [r3, #40]	; 0x28
   32268:	e583101c 	str	r1, [r3, #28]
   3226c:	e5832028 	str	r2, [r3, #40]	; 0x28
   32270:	e12fff1e 	bx	lr
   32274:	e3a01c0e 	mov	r1, #3584	; 0xe00
   32278:	e3a02c02 	mov	r2, #512	; 0x200
   3227c:	e59f3008 	ldr	r3, [pc, #8]	; 3228c <BusRawAccess::muxDataBusOutputStart()+0x44>
   32280:	e5831028 	str	r1, [r3, #40]	; 0x28
   32284:	e583201c 	str	r2, [r3, #28]
   32288:	e12fff1e 	bx	lr
   3228c:	20200000 	.word	0x20200000

00032290 <BusRawAccess::muxDataBusOutputFinish()>:
   32290:	e5903004 	ldr	r3, [r0, #4]
   32294:	e3530011 	cmp	r3, #17
   32298:	03a02c0e 	moveq	r2, #3584	; 0xe00
   3229c:	13a02801 	movne	r2, #65536	; 0x10000
   322a0:	059f300c 	ldreq	r3, [pc, #12]	; 322b4 <BusRawAccess::muxDataBusOutputFinish()+0x24>
   322a4:	159f3008 	ldrne	r3, [pc, #8]	; 322b4 <BusRawAccess::muxDataBusOutputFinish()+0x24>
   322a8:	05832028 	streq	r2, [r3, #40]	; 0x28
   322ac:	1583201c 	strne	r2, [r3, #28]
   322b0:	e12fff1e 	bx	lr
   322b4:	20200000 	.word	0x20200000

000322b8 <BusRawAccess::muxClearLowAddr()>:
   322b8:	e5903004 	ldr	r3, [r0, #4]
   322bc:	e92d4070 	push	{r4, r5, r6, lr}
   322c0:	e3530011 	cmp	r3, #17
   322c4:	0a00000a 	beq	322f4 <BusRawAccess::muxClearLowAddr()+0x3c>
   322c8:	e3a02c0e 	mov	r2, #3584	; 0xe00
   322cc:	e3a03b02 	mov	r3, #2048	; 0x800
   322d0:	e3a05801 	mov	r5, #65536	; 0x10000
   322d4:	e59f403c 	ldr	r4, [pc, #60]	; 32318 <BusRawAccess::muxClearLowAddr()+0x60>
   322d8:	e3a00f7d 	mov	r0, #500	; 0x1f4
   322dc:	e5842028 	str	r2, [r4, #40]	; 0x28
   322e0:	e584301c 	str	r3, [r4, #28]
   322e4:	e5845028 	str	r5, [r4, #40]	; 0x28
   322e8:	eb0029da 	bl	3ca58 <lowlev_cycleDelay>
   322ec:	e584501c 	str	r5, [r4, #28]
   322f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   322f4:	e3a05c0e 	mov	r5, #3584	; 0xe00
   322f8:	e3a03b02 	mov	r3, #2048	; 0x800
   322fc:	e59f4014 	ldr	r4, [pc, #20]	; 32318 <BusRawAccess::muxClearLowAddr()+0x60>
   32300:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32304:	e5845028 	str	r5, [r4, #40]	; 0x28
   32308:	e584301c 	str	r3, [r4, #28]
   3230c:	eb0029d1 	bl	3ca58 <lowlev_cycleDelay>
   32310:	e5845028 	str	r5, [r4, #40]	; 0x28
   32314:	e8bd8070 	pop	{r4, r5, r6, pc}
   32318:	20200000 	.word	0x20200000

0003231c <TargetClockGenerator::TargetClockGenerator()>:
   3231c:	e3a02000 	mov	r2, #0
   32320:	e3e0c000 	mvn	ip, #0
   32324:	e59f1010 	ldr	r1, [pc, #16]	; 3233c <TargetClockGenerator::TargetClockGenerator()+0x20>
   32328:	e580c008 	str	ip, [r0, #8]
   3232c:	e5801000 	str	r1, [r0]
   32330:	e5c02004 	strb	r2, [r0, #4]
   32334:	e580200c 	str	r2, [r0, #12]
   32338:	e12fff1e 	bx	lr
   3233c:	000f4240 	.word	0x000f4240

00032340 <TargetClockGenerator::enable(bool)>:
   32340:	e5d03004 	ldrb	r3, [r0, #4]
   32344:	e1530001 	cmp	r3, r1
   32348:	012fff1e 	bxeq	lr
   3234c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   32350:	e59f5114 	ldr	r5, [pc, #276]	; 3246c <TargetClockGenerator::enable(bool)+0x12c>
   32354:	e59f3114 	ldr	r3, [pc, #276]	; 32470 <TargetClockGenerator::enable(bool)+0x130>
   32358:	e5952070 	ldr	r2, [r5, #112]	; 0x70
   3235c:	e3510000 	cmp	r1, #0
   32360:	e0033002 	and	r3, r3, r2
   32364:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32368:	e5853070 	str	r3, [r5, #112]	; 0x70
   3236c:	e1a06000 	mov	r6, r0
   32370:	e24dd00c 	sub	sp, sp, #12
   32374:	05c01004 	strbeq	r1, [r0, #4]
   32378:	0a000030 	beq	32440 <TargetClockGenerator::enable(bool)+0x100>
   3237c:	e5903008 	ldr	r3, [r0, #8]
   32380:	e590200c 	ldr	r2, [r0, #12]
   32384:	e3730001 	cmn	r3, #1
   32388:	0a00002e 	beq	32448 <TargetClockGenerator::enable(bool)+0x108>
   3238c:	e3520000 	cmp	r2, #0
   32390:	13a04064 	movne	r4, #100	; 0x64
   32394:	1a000004 	bne	323ac <TargetClockGenerator::enable(bool)+0x6c>
   32398:	ea00002a 	b	32448 <TargetClockGenerator::enable(bool)+0x108>
   3239c:	e3a00001 	mov	r0, #1
   323a0:	ebffee7d 	bl	2dd9c <microsDelay>
   323a4:	e2544001 	subs	r4, r4, #1
   323a8:	0a000002 	beq	323b8 <TargetClockGenerator::enable(bool)+0x78>
   323ac:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   323b0:	e3130080 	tst	r3, #128	; 0x80
   323b4:	1afffff8 	bne	3239c <TargetClockGenerator::enable(bool)+0x5c>
   323b8:	e5d6100c 	ldrb	r1, [r6, #12]
   323bc:	e5d60008 	ldrb	r0, [r6, #8]
   323c0:	eb002938 	bl	3c8a8 <pinMode>
   323c4:	e5960000 	ldr	r0, [r6]
   323c8:	e59f20a4 	ldr	r2, [pc, #164]	; 32474 <TargetClockGenerator::enable(bool)+0x134>
   323cc:	e59f10a4 	ldr	r1, [pc, #164]	; 32478 <TargetClockGenerator::enable(bool)+0x138>
   323d0:	e1500002 	cmp	r0, r2
   323d4:	e59f20a0 	ldr	r2, [pc, #160]	; 3247c <TargetClockGenerator::enable(bool)+0x13c>
   323d8:	e59f30a0 	ldr	r3, [pc, #160]	; 32480 <TargetClockGenerator::enable(bool)+0x140>
   323dc:	91a03001 	movls	r3, r1
   323e0:	e59f709c 	ldr	r7, [pc, #156]	; 32484 <TargetClockGenerator::enable(bool)+0x144>
   323e4:	91a07002 	movls	r7, r2
   323e8:	e59f407c 	ldr	r4, [pc, #124]	; 3246c <TargetClockGenerator::enable(bool)+0x12c>
   323ec:	e59f2094 	ldr	r2, [pc, #148]	; 32488 <TargetClockGenerator::enable(bool)+0x148>
   323f0:	e5843070 	str	r3, [r4, #112]	; 0x70
   323f4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   323f8:	e59f508c 	ldr	r5, [pc, #140]	; 3248c <TargetClockGenerator::enable(bool)+0x14c>
   323fc:	91a05002 	movls	r5, r2
   32400:	ebffee65 	bl	2dd9c <microsDelay>
   32404:	e5961000 	ldr	r1, [r6]
   32408:	e1a00007 	mov	r0, r7
   3240c:	eb00263d 	bl	3bd08 <__udivsi3>
   32410:	e1a03000 	mov	r3, r0
   32414:	e59f2074 	ldr	r2, [pc, #116]	; 32490 <TargetClockGenerator::enable(bool)+0x150>
   32418:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   3241c:	e1530002 	cmp	r3, r2
   32420:	21a03002 	movcs	r3, r2
   32424:	e1a03603 	lsl	r3, r3, #12
   32428:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   3242c:	e5843074 	str	r3, [r4, #116]	; 0x74
   32430:	ebffee59 	bl	2dd9c <microsDelay>
   32434:	e3a03001 	mov	r3, #1
   32438:	e5845070 	str	r5, [r4, #112]	; 0x70
   3243c:	e5c63004 	strb	r3, [r6, #4]
   32440:	e28dd00c 	add	sp, sp, #12
   32444:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   32448:	e3a01000 	mov	r1, #0
   3244c:	e58d2000 	str	r2, [sp]
   32450:	e59f003c 	ldr	r0, [pc, #60]	; 32494 <TargetClockGenerator::enable(bool)+0x154>
   32454:	e5c61004 	strb	r1, [r6, #4]
   32458:	e59f2038 	ldr	r2, [pc, #56]	; 32498 <TargetClockGenerator::enable(bool)+0x158>
   3245c:	e3a01001 	mov	r1, #1
   32460:	ebfff24a 	bl	2ed90 <LogWrite>
   32464:	e28dd00c 	add	sp, sp, #12
   32468:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3246c:	20101000 	.word	0x20101000
   32470:	00000f0f 	.word	0x00000f0f
   32474:	0003d08f 	.word	0x0003d08f
   32478:	5a000001 	.word	0x5a000001
   3247c:	0124f800 	.word	0x0124f800
   32480:	5a000006 	.word	0x5a000006
   32484:	1dcd6500 	.word	0x1dcd6500
   32488:	5a000011 	.word	0x5a000011
   3248c:	5a000016 	.word	0x5a000016
   32490:	00000fff 	.word	0x00000fff
   32494:	00044c28 	.word	0x00044c28
   32498:	00044c08 	.word	0x00044c08

0003249c <TargetClockGenerator::setup(int)>:
   3249c:	e3710001 	cmn	r1, #1
   324a0:	13510004 	cmpne	r1, #4
   324a4:	03a03004 	moveq	r3, #4
   324a8:	e92d4070 	push	{r4, r5, r6, lr}
   324ac:	03a05001 	moveq	r5, #1
   324b0:	13a05000 	movne	r5, #0
   324b4:	e1a06000 	mov	r6, r0
   324b8:	01a04003 	moveq	r4, r3
   324bc:	1a000007 	bne	324e0 <TargetClockGenerator::setup(int)+0x44>
   324c0:	e5d65004 	ldrb	r5, [r6, #4]
   324c4:	e586300c 	str	r3, [r6, #12]
   324c8:	e3550000 	cmp	r5, #0
   324cc:	03a05001 	moveq	r5, #1
   324d0:	05864008 	streq	r4, [r6, #8]
   324d4:	1a00000a 	bne	32504 <TargetClockGenerator::setup(int)+0x68>
   324d8:	e1a00005 	mov	r0, r5
   324dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   324e0:	e3510014 	cmp	r1, #20
   324e4:	e1a04001 	mov	r4, r1
   324e8:	0a00000e 	beq	32528 <TargetClockGenerator::setup(int)+0x8c>
   324ec:	e3510020 	cmp	r1, #32
   324f0:	0a000001 	beq	324fc <TargetClockGenerator::setup(int)+0x60>
   324f4:	e3510022 	cmp	r1, #34	; 0x22
   324f8:	1afffff6 	bne	324d8 <TargetClockGenerator::setup(int)+0x3c>
   324fc:	e3a03004 	mov	r3, #4
   32500:	eaffffee 	b	324c0 <TargetClockGenerator::setup(int)+0x24>
   32504:	e1a00006 	mov	r0, r6
   32508:	e3a01000 	mov	r1, #0
   3250c:	ebffff8b 	bl	32340 <TargetClockGenerator::enable(bool)>
   32510:	e1a00006 	mov	r0, r6
   32514:	e3a01001 	mov	r1, #1
   32518:	e5864008 	str	r4, [r6, #8]
   3251c:	ebffff87 	bl	32340 <TargetClockGenerator::enable(bool)>
   32520:	e1a00005 	mov	r0, r5
   32524:	e8bd8070 	pop	{r4, r5, r6, pc}
   32528:	e3a03009 	mov	r3, #9
   3252c:	eaffffe3 	b	324c0 <TargetClockGenerator::setup(int)+0x24>

00032530 <TargetClockGenerator::setFreqHz(unsigned long)>:
   32530:	e5d03004 	ldrb	r3, [r0, #4]
   32534:	e92d4070 	push	{r4, r5, r6, lr}
   32538:	e3530000 	cmp	r3, #0
   3253c:	e1a04000 	mov	r4, r0
   32540:	e1a05001 	mov	r5, r1
   32544:	1a000001 	bne	32550 <TargetClockGenerator::setFreqHz(unsigned long)+0x20>
   32548:	e5841000 	str	r1, [r4]
   3254c:	e8bd8070 	pop	{r4, r5, r6, pc}
   32550:	e3a01000 	mov	r1, #0
   32554:	ebffff79 	bl	32340 <TargetClockGenerator::enable(bool)>
   32558:	e1a00004 	mov	r0, r4
   3255c:	e5845000 	str	r5, [r4]
   32560:	e3a01001 	mov	r1, #1
   32564:	e8bd4070 	pop	{r4, r5, r6, lr}
   32568:	eaffff74 	b	32340 <TargetClockGenerator::enable(bool)>

0003256c <TargetControl::TargetControl(BusControl&)>:
   3256c:	e92d4010 	push	{r4, lr}
   32570:	e1a04000 	mov	r4, r0
   32574:	e4801004 	str	r1, [r0], #4
   32578:	eb000378 	bl	33360 <TargetProgrammer::TargetProgrammer()>
   3257c:	e1a00004 	mov	r0, r4
   32580:	eb000167 	bl	32b24 <TargetControl::cycleClear()>
   32584:	e1a00004 	mov	r0, r4
   32588:	eb000015 	bl	325e4 <TargetControl::programmingClear()>
   3258c:	e3a03000 	mov	r3, #0
   32590:	e2842601 	add	r2, r4, #1048576	; 0x100000
   32594:	e5c230f8 	strb	r3, [r2, #248]	; 0xf8
   32598:	e5823220 	str	r3, [r2, #544]	; 0x220
   3259c:	e5823224 	str	r3, [r2, #548]	; 0x224
   325a0:	e1a01003 	mov	r1, r3
   325a4:	e2823f47 	add	r3, r2, #284	; 0x11c
   325a8:	e2822f87 	add	r2, r2, #540	; 0x21c
   325ac:	e5e31001 	strb	r1, [r3, #1]!
   325b0:	e1530002 	cmp	r3, r2
   325b4:	1afffffc 	bne	325ac <TargetControl::TargetControl(BusControl&)+0x40>
   325b8:	e1a00004 	mov	r0, r4
   325bc:	e8bd8010 	pop	{r4, pc}

000325c0 <TargetControl::init()>:
   325c0:	e12fff1e 	bx	lr

000325c4 <TargetControl::service()>:
   325c4:	ea00028a 	b	32ff4 <TargetControl::cycleService()>

000325c8 <TargetControl::suspend(bool)>:
   325c8:	e92d4070 	push	{r4, r5, r6, lr}
   325cc:	e1a04000 	mov	r4, r0
   325d0:	e1a05001 	mov	r5, r1
   325d4:	e2844601 	add	r4, r4, #1048576	; 0x100000
   325d8:	eb00015f 	bl	32b5c <TargetControl::cycleSuspend(bool)>
   325dc:	e5c450f8 	strb	r5, [r4, #248]	; 0xf8
   325e0:	e8bd8070 	pop	{r4, r5, r6, pc}

000325e4 <TargetControl::programmingClear()>:
   325e4:	e3a03000 	mov	r3, #0
   325e8:	e2800601 	add	r0, r0, #1048576	; 0x100000
   325ec:	e5c030f9 	strb	r3, [r0, #249]	; 0xf9
   325f0:	e5c030fa 	strb	r3, [r0, #250]	; 0xfa
   325f4:	e12fff1e 	bx	lr

000325f8 <TargetControl::programmingStart(bool)>:
   325f8:	e92d4070 	push	{r4, r5, r6, lr}
   325fc:	e1a04000 	mov	r4, r0
   32600:	e2800004 	add	r0, r0, #4
   32604:	e1a05001 	mov	r5, r1
   32608:	eb0003b9 	bl	334f4 <TargetProgrammer::numMemoryBlocks()>
   3260c:	e3500000 	cmp	r0, #0
   32610:	0a000004 	beq	32628 <TargetControl::programmingStart(bool)+0x30>
   32614:	e3a03001 	mov	r3, #1
   32618:	e2844601 	add	r4, r4, #1048576	; 0x100000
   3261c:	e5c450fa 	strb	r5, [r4, #250]	; 0xfa
   32620:	e5c430f9 	strb	r3, [r4, #249]	; 0xf9
   32624:	e8bd8070 	pop	{r4, r5, r6, pc}
   32628:	e3a01004 	mov	r1, #4
   3262c:	e8bd4070 	pop	{r4, r5, r6, lr}
   32630:	e59f2004 	ldr	r2, [pc, #4]	; 3263c <TargetControl::programmingStart(bool)+0x44>
   32634:	e59f0004 	ldr	r0, [pc, #4]	; 32640 <TargetControl::programmingStart(bool)+0x48>
   32638:	eafff1d4 	b	2ed90 <LogWrite>
   3263c:	00044c34 	.word	0x00044c34
   32640:	00044d98 	.word	0x00044d98

00032644 <TargetControl::programmingDone()>:
   32644:	e92d4010 	push	{r4, lr}
   32648:	e3a01004 	mov	r1, #4
   3264c:	e1a04000 	mov	r4, r0
   32650:	e59f2014 	ldr	r2, [pc, #20]	; 3266c <TargetControl::programmingDone()+0x28>
   32654:	e59f0014 	ldr	r0, [pc, #20]	; 32670 <TargetControl::programmingDone()+0x2c>
   32658:	ebfff1cc 	bl	2ed90 <LogWrite>
   3265c:	e3a03000 	mov	r3, #0
   32660:	e2844601 	add	r4, r4, #1048576	; 0x100000
   32664:	e5c430f9 	strb	r3, [r4, #249]	; 0xf9
   32668:	e8bd8010 	pop	{r4, pc}
   3266c:	00044c58 	.word	0x00044c58
   32670:	00044d98 	.word	0x00044d98

00032674 <TargetControl::programExec(bool)>:
   32674:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   32678:	e3510000 	cmp	r1, #0
   3267c:	e1a04000 	mov	r4, r0
   32680:	e24ddfca 	sub	sp, sp, #808	; 0x328
   32684:	0a0000bd 	beq	32980 <TargetControl::programExec(bool)+0x30c>
   32688:	e3a01004 	mov	r1, #4
   3268c:	e3a03059 	mov	r3, #89	; 0x59
   32690:	e0845001 	add	r5, r4, r1
   32694:	e59f23a0 	ldr	r2, [pc, #928]	; 32a3c <TargetControl::programExec(bool)+0x3c8>
   32698:	e59f03a0 	ldr	r0, [pc, #928]	; 32a40 <TargetControl::programExec(bool)+0x3cc>
   3269c:	ebfff1bb 	bl	2ed90 <LogWrite>
   326a0:	e1a00005 	mov	r0, r5
   326a4:	eb0003b4 	bl	3357c <TargetProgrammer::areRegistersValid()>
   326a8:	e3500000 	cmp	r0, #0
   326ac:	0a0000ab 	beq	32960 <TargetControl::programExec(bool)+0x2ec>
   326b0:	e1a00005 	mov	r0, r5
   326b4:	eb0003b0 	bl	3357c <TargetProgrammer::areRegistersValid()>
   326b8:	e3500000 	cmp	r0, #0
   326bc:	0a0000a7 	beq	32960 <TargetControl::programExec(bool)+0x2ec>
   326c0:	e3a03000 	mov	r3, #0
   326c4:	e1a00005 	mov	r0, r5
   326c8:	e28d1024 	add	r1, sp, #36	; 0x24
   326cc:	e58d3040 	str	r3, [sp, #64]	; 0x40
   326d0:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   326d4:	e58d3038 	str	r3, [sp, #56]	; 0x38
   326d8:	e58d3034 	str	r3, [sp, #52]	; 0x34
   326dc:	e58d3030 	str	r3, [sp, #48]	; 0x30
   326e0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   326e4:	e58d3028 	str	r3, [sp, #40]	; 0x28
   326e8:	e58d3024 	str	r3, [sp, #36]	; 0x24
   326ec:	e58d3054 	str	r3, [sp, #84]	; 0x54
   326f0:	e58d3050 	str	r3, [sp, #80]	; 0x50
   326f4:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   326f8:	e58d3048 	str	r3, [sp, #72]	; 0x48
   326fc:	e58d3044 	str	r3, [sp, #68]	; 0x44
   32700:	e58d3068 	str	r3, [sp, #104]	; 0x68
   32704:	e58d3064 	str	r3, [sp, #100]	; 0x64
   32708:	e58d3060 	str	r3, [sp, #96]	; 0x60
   3270c:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   32710:	e58d3058 	str	r3, [sp, #88]	; 0x58
   32714:	eb00039b 	bl	33588 <TargetProgrammer::getTargetRegs(Z80Registers&)>
   32718:	e59d5040 	ldr	r5, [sp, #64]	; 0x40
   3271c:	e59de03c 	ldr	lr, [sp, #60]	; 0x3c
   32720:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   32724:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   32728:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   3272c:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
   32730:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   32734:	e58d5018 	str	r5, [sp, #24]
   32738:	e58de014 	str	lr, [sp, #20]
   3273c:	e58dc010 	str	ip, [sp, #16]
   32740:	e58d000c 	str	r0, [sp, #12]
   32744:	e58d1008 	str	r1, [sp, #8]
   32748:	e58d2004 	str	r2, [sp, #4]
   3274c:	e3a010c8 	mov	r1, #200	; 0xc8
   32750:	e59f22ec 	ldr	r2, [pc, #748]	; 32a44 <TargetControl::programExec(bool)+0x3d0>
   32754:	e58d3000 	str	r3, [sp]
   32758:	e28d006c 	add	r0, sp, #108	; 0x6c
   3275c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   32760:	ebffee2b 	bl	2e014 <snprintf>
   32764:	e3a02f7d 	mov	r2, #500	; 0x1f4
   32768:	e28d106c 	add	r1, sp, #108	; 0x6c
   3276c:	e28d0f4d 	add	r0, sp, #308	; 0x134
   32770:	ebffedbb 	bl	2de64 <strlcpy>
   32774:	e59dc058 	ldr	ip, [sp, #88]	; 0x58
   32778:	e59de05c 	ldr	lr, [sp, #92]	; 0x5c
   3277c:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
   32780:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
   32784:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
   32788:	e58dc00c 	str	ip, [sp, #12]
   3278c:	e58de010 	str	lr, [sp, #16]
   32790:	e58d1008 	str	r1, [sp, #8]
   32794:	e58d2004 	str	r2, [sp, #4]
   32798:	e3a010c8 	mov	r1, #200	; 0xc8
   3279c:	e59f22a4 	ldr	r2, [pc, #676]	; 32a48 <TargetControl::programExec(bool)+0x3d4>
   327a0:	e58d3000 	str	r3, [sp]
   327a4:	e28d006c 	add	r0, sp, #108	; 0x6c
   327a8:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
   327ac:	ebffee18 	bl	2e014 <snprintf>
   327b0:	e28d106c 	add	r1, sp, #108	; 0x6c
   327b4:	e3a02f7d 	mov	r2, #500	; 0x1f4
   327b8:	e28d0f4d 	add	r0, sp, #308	; 0x134
   327bc:	ebffedc4 	bl	2ded4 <strlcat>
   327c0:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   327c4:	e28d006c 	add	r0, sp, #108	; 0x6c
   327c8:	e3120080 	tst	r2, #128	; 0x80
   327cc:	13a03053 	movne	r3, #83	; 0x53
   327d0:	03a0302d 	moveq	r3, #45	; 0x2d
   327d4:	e3120040 	tst	r2, #64	; 0x40
   327d8:	13a0505a 	movne	r5, #90	; 0x5a
   327dc:	03a0502d 	moveq	r5, #45	; 0x2d
   327e0:	e3120010 	tst	r2, #16
   327e4:	13a0e048 	movne	lr, #72	; 0x48
   327e8:	03a0e02d 	moveq	lr, #45	; 0x2d
   327ec:	e3120004 	tst	r2, #4
   327f0:	13a0c050 	movne	ip, #80	; 0x50
   327f4:	03a0c02d 	moveq	ip, #45	; 0x2d
   327f8:	e3120002 	tst	r2, #2
   327fc:	13a0104e 	movne	r1, #78	; 0x4e
   32800:	03a0102d 	moveq	r1, #45	; 0x2d
   32804:	e3120001 	tst	r2, #1
   32808:	13a02043 	movne	r2, #67	; 0x43
   3280c:	03a0202d 	moveq	r2, #45	; 0x2d
   32810:	e88d4020 	stm	sp, {r5, lr}
   32814:	e58dc008 	str	ip, [sp, #8]
   32818:	e58d100c 	str	r1, [sp, #12]
   3281c:	e58d2010 	str	r2, [sp, #16]
   32820:	e3a010c8 	mov	r1, #200	; 0xc8
   32824:	e59f2220 	ldr	r2, [pc, #544]	; 32a4c <TargetControl::programExec(bool)+0x3d8>
   32828:	ebffedf9 	bl	2e014 <snprintf>
   3282c:	e28d106c 	add	r1, sp, #108	; 0x6c
   32830:	e3a02f7d 	mov	r2, #500	; 0x1f4
   32834:	e28d0f4d 	add	r0, sp, #308	; 0x134
   32838:	ebffeda5 	bl	2ded4 <strlcat>
   3283c:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   32840:	e28d006c 	add	r0, sp, #108	; 0x6c
   32844:	e3120080 	tst	r2, #128	; 0x80
   32848:	13a03053 	movne	r3, #83	; 0x53
   3284c:	03a0302d 	moveq	r3, #45	; 0x2d
   32850:	e3120040 	tst	r2, #64	; 0x40
   32854:	13a0505a 	movne	r5, #90	; 0x5a
   32858:	03a0502d 	moveq	r5, #45	; 0x2d
   3285c:	e3120010 	tst	r2, #16
   32860:	13a0e048 	movne	lr, #72	; 0x48
   32864:	03a0e02d 	moveq	lr, #45	; 0x2d
   32868:	e3120004 	tst	r2, #4
   3286c:	13a0c050 	movne	ip, #80	; 0x50
   32870:	03a0c02d 	moveq	ip, #45	; 0x2d
   32874:	e3120002 	tst	r2, #2
   32878:	13a0104e 	movne	r1, #78	; 0x4e
   3287c:	03a0102d 	moveq	r1, #45	; 0x2d
   32880:	e3120001 	tst	r2, #1
   32884:	13a02043 	movne	r2, #67	; 0x43
   32888:	03a0202d 	moveq	r2, #45	; 0x2d
   3288c:	e58dc008 	str	ip, [sp, #8]
   32890:	e88d4020 	stm	sp, {r5, lr}
   32894:	e58d100c 	str	r1, [sp, #12]
   32898:	e58d2010 	str	r2, [sp, #16]
   3289c:	e3a010c8 	mov	r1, #200	; 0xc8
   328a0:	e59f21a8 	ldr	r2, [pc, #424]	; 32a50 <TargetControl::programExec(bool)+0x3dc>
   328a4:	ebffedda 	bl	2e014 <snprintf>
   328a8:	e3a02f7d 	mov	r2, #500	; 0x1f4
   328ac:	e28d106c 	add	r1, sp, #108	; 0x6c
   328b0:	e28d0f4d 	add	r0, sp, #308	; 0x134
   328b4:	ebffed86 	bl	2ded4 <strlcat>
   328b8:	e59d2064 	ldr	r2, [sp, #100]	; 0x64
   328bc:	e59d0060 	ldr	r0, [sp, #96]	; 0x60
   328c0:	e3520000 	cmp	r2, #0
   328c4:	03a02020 	moveq	r2, #32
   328c8:	13a02031 	movne	r2, #49	; 0x31
   328cc:	01a0c002 	moveq	ip, r2
   328d0:	13a0c032 	movne	ip, #50	; 0x32
   328d4:	e59d1068 	ldr	r1, [sp, #104]	; 0x68
   328d8:	e88d1005 	stm	sp, {r0, r2, ip}
   328dc:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
   328e0:	e59f216c 	ldr	r2, [pc, #364]	; 32a54 <TargetControl::programExec(bool)+0x3e0>
   328e4:	e58d100c 	str	r1, [sp, #12]
   328e8:	e28d006c 	add	r0, sp, #108	; 0x6c
   328ec:	e3a010c8 	mov	r1, #200	; 0xc8
   328f0:	ebffedc7 	bl	2e014 <snprintf>
   328f4:	e3a02f7d 	mov	r2, #500	; 0x1f4
   328f8:	e28d106c 	add	r1, sp, #108	; 0x6c
   328fc:	e28d0f4d 	add	r0, sp, #308	; 0x134
   32900:	ebffed73 	bl	2ded4 <strlcat>
   32904:	e3a01004 	mov	r1, #4
   32908:	e59f2148 	ldr	r2, [pc, #328]	; 32a58 <TargetControl::programExec(bool)+0x3e4>
   3290c:	e59f012c 	ldr	r0, [pc, #300]	; 32a40 <TargetControl::programExec(bool)+0x3cc>
   32910:	e28d3f4d 	add	r3, sp, #308	; 0x134
   32914:	ebfff11d 	bl	2ed90 <LogWrite>
   32918:	e5940000 	ldr	r0, [r4]
   3291c:	e2843601 	add	r3, r4, #1048576	; 0x100000
   32920:	e59360f4 	ldr	r6, [r3, #244]	; 0xf4
   32924:	e2800601 	add	r0, r0, #1048576	; 0x100000
   32928:	e1a01006 	mov	r1, r6
   3292c:	e3a030c8 	mov	r3, #200	; 0xc8
   32930:	e28d206c 	add	r2, sp, #108	; 0x6c
   32934:	e2800e42 	add	r0, r0, #1056	; 0x420
   32938:	eb000507 	bl	33d5c <HwManager::getSnippetToSetupHw(unsigned long, unsigned char*, unsigned long)>
   3293c:	e28d206c 	add	r2, sp, #108	; 0x6c
   32940:	e1a05000 	mov	r5, r0
   32944:	e26030c8 	rsb	r3, r0, #200	; 0xc8
   32948:	e0822000 	add	r2, r2, r0
   3294c:	e28d1024 	add	r1, sp, #36	; 0x24
   32950:	e0800006 	add	r0, r0, r6
   32954:	eb00022b 	bl	33208 <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)>
   32958:	e0955000 	adds	r5, r5, r0
   3295c:	1a000012 	bne	329ac <TargetControl::programExec(bool)+0x338>
   32960:	e5943000 	ldr	r3, [r4]
   32964:	e59f00f0 	ldr	r0, [pc, #240]	; 32a5c <TargetControl::programExec(bool)+0x3e8>
   32968:	e2832601 	add	r2, r3, #1048576	; 0x100000
   3296c:	e5921418 	ldr	r1, [r2, #1048]	; 0x418
   32970:	e0830000 	add	r0, r3, r0
   32974:	ebfffc15 	bl	319d0 <BusRawAccess::targetReset(unsigned long)>
   32978:	e28ddfca 	add	sp, sp, #808	; 0x328
   3297c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   32980:	e3a01004 	mov	r1, #4
   32984:	e3a0304e 	mov	r3, #78	; 0x4e
   32988:	e0845001 	add	r5, r4, r1
   3298c:	e59f20a8 	ldr	r2, [pc, #168]	; 32a3c <TargetControl::programExec(bool)+0x3c8>
   32990:	e59f00a8 	ldr	r0, [pc, #168]	; 32a40 <TargetControl::programExec(bool)+0x3cc>
   32994:	ebfff0fd 	bl	2ed90 <LogWrite>
   32998:	e1a00005 	mov	r0, r5
   3299c:	eb0002f6 	bl	3357c <TargetProgrammer::areRegistersValid()>
   329a0:	e3500000 	cmp	r0, #0
   329a4:	1affff45 	bne	326c0 <TargetControl::programExec(bool)+0x4c>
   329a8:	eaffffec 	b	32960 <TargetControl::programExec(bool)+0x2ec>
   329ac:	e3a07000 	mov	r7, #0
   329b0:	e5dd006f 	ldrb	r0, [sp, #111]	; 0x6f
   329b4:	e5dd106e 	ldrb	r1, [sp, #110]	; 0x6e
   329b8:	e5dd206d 	ldrb	r2, [sp, #109]	; 0x6d
   329bc:	e5dd306c 	ldrb	r3, [sp, #108]	; 0x6c
   329c0:	e58d0010 	str	r0, [sp, #16]
   329c4:	e58d100c 	str	r1, [sp, #12]
   329c8:	e58d2008 	str	r2, [sp, #8]
   329cc:	e58d3004 	str	r3, [sp, #4]
   329d0:	e3a01004 	mov	r1, #4
   329d4:	e1a03006 	mov	r3, r6
   329d8:	e59f2080 	ldr	r2, [pc, #128]	; 32a60 <TargetControl::programExec(bool)+0x3ec>
   329dc:	e59f005c 	ldr	r0, [pc, #92]	; 32a40 <TargetControl::programExec(bool)+0x3cc>
   329e0:	e58d5000 	str	r5, [sp]
   329e4:	ebfff0e9 	bl	2ed90 <LogWrite>
   329e8:	e59f8074 	ldr	r8, [pc, #116]	; 32a64 <TargetControl::programExec(bool)+0x3f0>
   329ec:	e5940000 	ldr	r0, [r4]
   329f0:	e1a03005 	mov	r3, r5
   329f4:	e1a01006 	mov	r1, r6
   329f8:	e28d206c 	add	r2, sp, #108	; 0x6c
   329fc:	e58d7000 	str	r7, [sp]
   32a00:	e0800008 	add	r0, r0, r8
   32a04:	eb0002fb 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   32a08:	e3e0c03c 	mvn	ip, #60	; 0x3c
   32a0c:	e5940000 	ldr	r0, [r4]
   32a10:	e1a0e426 	lsr	lr, r6, #8
   32a14:	e1a01007 	mov	r1, r7
   32a18:	e3a03003 	mov	r3, #3
   32a1c:	e58d7000 	str	r7, [sp]
   32a20:	e0800008 	add	r0, r0, r8
   32a24:	e28d2020 	add	r2, sp, #32
   32a28:	e5cd6021 	strb	r6, [sp, #33]	; 0x21
   32a2c:	e5cde022 	strb	lr, [sp, #34]	; 0x22
   32a30:	e5cdc020 	strb	ip, [sp, #32]
   32a34:	eb0002ef 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   32a38:	eaffffc8 	b	32960 <TargetControl::programExec(bool)+0x2ec>
   32a3c:	00044d74 	.word	0x00044d74
   32a40:	00044d98 	.word	0x00044d98
   32a44:	00044c68 	.word	0x00044c68
   32a48:	00044ca8 	.word	0x00044ca8
   32a4c:	00044cdc 	.word	0x00044cdc
   32a50:	00044cf0 	.word	0x00044cf0
   32a54:	00044d04 	.word	0x00044d04
   32a58:	00044d28 	.word	0x00044d28
   32a5c:	00100408 	.word	0x00100408
   32a60:	00044d34 	.word	0x00044d34
   32a64:	00100404 	.word	0x00100404

00032a68 <TargetControl::programmingWrite()>:
   32a68:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32a6c:	e3a05000 	mov	r5, #0
   32a70:	e1a09000 	mov	r9, r0
   32a74:	e1a08005 	mov	r8, r5
   32a78:	e1a0b005 	mov	fp, r5
   32a7c:	e59fa09c 	ldr	sl, [pc, #156]	; 32b20 <TargetControl::programmingWrite()+0xb8>
   32a80:	e24dd014 	sub	sp, sp, #20
   32a84:	e2807004 	add	r7, r0, #4
   32a88:	ea000015 	b	32ae4 <TargetControl::programmingWrite()+0x7c>
   32a8c:	e1a01005 	mov	r1, r5
   32a90:	e1a00007 	mov	r0, r7
   32a94:	eb000299 	bl	33500 <TargetProgrammer::getMemoryBlock(unsigned long)>
   32a98:	e1a04000 	mov	r4, r0
   32a9c:	e5941000 	ldr	r1, [r4]
   32aa0:	e1a00007 	mov	r0, r7
   32aa4:	e5996000 	ldr	r6, [r9]
   32aa8:	e58d100c 	str	r1, [sp, #12]
   32aac:	eb000296 	bl	3350c <TargetProgrammer::getMemoryImagePtr()>
   32ab0:	e1a02000 	mov	r2, r0
   32ab4:	e594c000 	ldr	ip, [r4]
   32ab8:	e086600a 	add	r6, r6, sl
   32abc:	e5943004 	ldr	r3, [r4, #4]
   32ac0:	e1a00006 	mov	r0, r6
   32ac4:	e59d100c 	ldr	r1, [sp, #12]
   32ac8:	e082200c 	add	r2, r2, ip
   32acc:	e58db000 	str	fp, [sp]
   32ad0:	eb0002c8 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   32ad4:	e5943000 	ldr	r3, [r4]
   32ad8:	e2855001 	add	r5, r5, #1
   32adc:	e3530000 	cmp	r3, #0
   32ae0:	03a08001 	moveq	r8, #1
   32ae4:	e1a00007 	mov	r0, r7
   32ae8:	eb000281 	bl	334f4 <TargetProgrammer::numMemoryBlocks()>
   32aec:	e1500005 	cmp	r0, r5
   32af0:	8affffe5 	bhi	32a8c <TargetControl::programmingWrite()+0x24>
   32af4:	e2893601 	add	r3, r9, #1048576	; 0x100000
   32af8:	e5d330fa 	ldrb	r3, [r3, #250]	; 0xfa
   32afc:	e3530000 	cmp	r3, #0
   32b00:	1a000001 	bne	32b0c <TargetControl::programmingWrite()+0xa4>
   32b04:	e28dd014 	add	sp, sp, #20
   32b08:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32b0c:	e1a01008 	mov	r1, r8
   32b10:	e1a00009 	mov	r0, r9
   32b14:	e28dd014 	add	sp, sp, #20
   32b18:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32b1c:	eafffed4 	b	32674 <TargetControl::programExec(bool)>
   32b20:	00100404 	.word	0x00100404

00032b24 <TargetControl::cycleClear()>:
   32b24:	e3a03000 	mov	r3, #0
   32b28:	e3a02004 	mov	r2, #4
   32b2c:	e2800601 	add	r0, r0, #1048576	; 0x100000
   32b30:	e2801f43 	add	r1, r0, #268	; 0x10c
   32b34:	e58030fc 	str	r3, [r0, #252]	; 0xfc
   32b38:	e5803100 	str	r3, [r0, #256]	; 0x100
   32b3c:	e5803104 	str	r3, [r0, #260]	; 0x104
   32b40:	e5803108 	str	r3, [r0, #264]	; 0x108
   32b44:	e1c130b0 	strh	r3, [r1]
   32b48:	e5803110 	str	r3, [r0, #272]	; 0x110
   32b4c:	e5803114 	str	r3, [r0, #276]	; 0x114
   32b50:	e5803118 	str	r3, [r0, #280]	; 0x118
   32b54:	e5c0211c 	strb	r2, [r0, #284]	; 0x11c
   32b58:	e12fff1e 	bx	lr

00032b5c <TargetControl::cycleSuspend(bool)>:
   32b5c:	e3510000 	cmp	r1, #0
   32b60:	112fff1e 	bxne	lr
   32b64:	e92d4010 	push	{r4, lr}
   32b68:	e59f4028 	ldr	r4, [pc, #40]	; 32b98 <TargetControl::cycleSuspend(bool)+0x3c>
   32b6c:	e5902000 	ldr	r2, [r0]
   32b70:	e5943008 	ldr	r3, [r4, #8]
   32b74:	e59f0020 	ldr	r0, [pc, #32]	; 32b9c <TargetControl::cycleSuspend(bool)+0x40>
   32b78:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   32b7c:	e5843008 	str	r3, [r4, #8]
   32b80:	e3a01007 	mov	r1, #7
   32b84:	e0820000 	add	r0, r2, r0
   32b88:	ebfffd72 	bl	32158 <BusRawAccess::muxSet(int)>
   32b8c:	e3a03040 	mov	r3, #64	; 0x40
   32b90:	e584301c 	str	r3, [r4, #28]
   32b94:	e8bd8010 	pop	{r4, pc}
   32b98:	20200000 	.word	0x20200000
   32b9c:	00100408 	.word	0x00100408

00032ba0 <TargetControl::cycleReqAction(BusSocketInfo&, unsigned long, void (*)(void*, unsigned long, BR_RETURN_TYPE), void*, unsigned long)>:
   32ba0:	e92d4070 	push	{r4, r5, r6, lr}
   32ba4:	e2804601 	add	r4, r0, #1048576	; 0x100000
   32ba8:	e5d400f9 	ldrb	r0, [r4, #249]	; 0xf9
   32bac:	e3500000 	cmp	r0, #0
   32bb0:	1a000024 	bne	32c48 <TargetControl::cycleReqAction(BusSocketInfo&, unsigned long, void (*)(void*, unsigned long, BR_RETURN_TYPE), void*, unsigned long)+0xa8>
   32bb4:	e5d4c10c 	ldrb	ip, [r4, #268]	; 0x10c
   32bb8:	e35c0000 	cmp	ip, #0
   32bbc:	18bd8070 	popne	{r4, r5, r6, pc}
   32bc0:	e1a05002 	mov	r5, r2
   32bc4:	e3a02001 	mov	r2, #1
   32bc8:	e5d10028 	ldrb	r0, [r1, #40]	; 0x28
   32bcc:	e5843100 	str	r3, [r4, #256]	; 0x100
   32bd0:	e59d3010 	ldr	r3, [sp, #16]
   32bd4:	e3500000 	cmp	r0, #0
   32bd8:	e5843104 	str	r3, [r4, #260]	; 0x104
   32bdc:	e59d3014 	ldr	r3, [sp, #20]
   32be0:	13a0c004 	movne	ip, #4
   32be4:	e58410fc 	str	r1, [r4, #252]	; 0xfc
   32be8:	e5843108 	str	r3, [r4, #264]	; 0x108
   32bec:	e5c4210c 	strb	r2, [r4, #268]	; 0x10c
   32bf0:	1a00000a 	bne	32c20 <TargetControl::cycleReqAction(BusSocketInfo&, unsigned long, void (*)(void*, unsigned long, BR_RETURN_TYPE), void*, unsigned long)+0x80>
   32bf4:	e5d13012 	ldrb	r3, [r1, #18]
   32bf8:	e3530000 	cmp	r3, #0
   32bfc:	11a0c002 	movne	ip, r2
   32c00:	1a000006 	bne	32c20 <TargetControl::cycleReqAction(BusSocketInfo&, unsigned long, void (*)(void*, unsigned long, BR_RETURN_TYPE), void*, unsigned long)+0x80>
   32c04:	e5d13018 	ldrb	r3, [r1, #24]
   32c08:	e3530000 	cmp	r3, #0
   32c0c:	13a0c002 	movne	ip, #2
   32c10:	1a000002 	bne	32c20 <TargetControl::cycleReqAction(BusSocketInfo&, unsigned long, void (*)(void*, unsigned long, BR_RETURN_TYPE), void*, unsigned long)+0x80>
   32c14:	e5d13020 	ldrb	r3, [r1, #32]
   32c18:	e3530000 	cmp	r3, #0
   32c1c:	13a0c003 	movne	ip, #3
   32c20:	e5d13029 	ldrb	r3, [r1, #41]	; 0x29
   32c24:	e5c4c10d 	strb	ip, [r4, #269]	; 0x10d
   32c28:	e5c4311c 	strb	r3, [r4, #284]	; 0x11c
   32c2c:	ebffec52 	bl	2dd7c <micros>
   32c30:	e3a03000 	mov	r3, #0
   32c34:	e5840110 	str	r0, [r4, #272]	; 0x110
   32c38:	e5845118 	str	r5, [r4, #280]	; 0x118
   32c3c:	e3a00001 	mov	r0, #1
   32c40:	e5843114 	str	r3, [r4, #276]	; 0x114
   32c44:	e8bd8070 	pop	{r4, r5, r6, pc}
   32c48:	e3a00000 	mov	r0, #0
   32c4c:	e8bd8070 	pop	{r4, r5, r6, pc}

00032c50 <TargetControl::cycleClearAction()>:
   32c50:	e3a03000 	mov	r3, #0
   32c54:	e2800601 	add	r0, r0, #1048576	; 0x100000
   32c58:	e5c0310c 	strb	r3, [r0, #268]	; 0x10c
   32c5c:	e12fff1e 	bx	lr

00032c60 <TargetControl::cycleReqHandlePending()>:
   32c60:	e92d4010 	push	{r4, lr}
   32c64:	e1a04000 	mov	r4, r0
   32c68:	e59f0028 	ldr	r0, [pc, #40]	; 32c98 <TargetControl::cycleReqHandlePending()+0x38>
   32c6c:	e5943000 	ldr	r3, [r4]
   32c70:	e2844601 	add	r4, r4, #1048576	; 0x100000
   32c74:	e0830000 	add	r0, r3, r0
   32c78:	e3a02001 	mov	r2, #1
   32c7c:	e5d4110d 	ldrb	r1, [r4, #269]	; 0x10d
   32c80:	ebfffb92 	bl	31ad0 <BusRawAccess::setBusSignal(BR_BUS_ACTION, bool)>
   32c84:	ebffec3c 	bl	2dd7c <micros>
   32c88:	e3a03002 	mov	r3, #2
   32c8c:	e5840114 	str	r0, [r4, #276]	; 0x114
   32c90:	e5c4310c 	strb	r3, [r4, #268]	; 0x10c
   32c94:	e8bd8010 	pop	{r4, pc}
   32c98:	00100408 	.word	0x00100408

00032c9c <TargetControl::cycleReqAssertedBusRq()>:
   32c9c:	e59f3100 	ldr	r3, [pc, #256]	; 32da4 <TargetControl::cycleReqAssertedBusRq()+0x108>
   32ca0:	e92d4070 	push	{r4, r5, r6, lr}
   32ca4:	e5932034 	ldr	r2, [r3, #52]	; 0x34
   32ca8:	e1a04000 	mov	r4, r0
   32cac:	e2125004 	ands	r5, r2, #4
   32cb0:	1a00001f 	bne	32d34 <TargetControl::cycleReqAssertedBusRq()+0x98>
   32cb4:	e5903000 	ldr	r3, [r0]
   32cb8:	e59f00e8 	ldr	r0, [pc, #232]	; 32da8 <TargetControl::cycleReqAssertedBusRq()+0x10c>
   32cbc:	e0830000 	add	r0, r3, r0
   32cc0:	ebfffc46 	bl	31de0 <BusRawAccess::busReqTakeControl()>
   32cc4:	e2843601 	add	r3, r4, #1048576	; 0x100000
   32cc8:	e5d3211c 	ldrb	r2, [r3, #284]	; 0x11c
   32ccc:	e3520002 	cmp	r2, #2
   32cd0:	0a00002e 	beq	32d90 <TargetControl::cycleReqAssertedBusRq()+0xf4>
   32cd4:	e5936100 	ldr	r6, [r3, #256]	; 0x100
   32cd8:	e5c3510c 	strb	r5, [r3, #268]	; 0x10c
   32cdc:	e3560000 	cmp	r6, #0
   32ce0:	0a000003 	beq	32cf4 <TargetControl::cycleReqAssertedBusRq()+0x58>
   32ce4:	e1a02005 	mov	r2, r5
   32ce8:	e5931108 	ldr	r1, [r3, #264]	; 0x108
   32cec:	e5930104 	ldr	r0, [r3, #260]	; 0x104
   32cf0:	e12fff36 	blx	r6
   32cf4:	e5943000 	ldr	r3, [r4]
   32cf8:	e59f00a8 	ldr	r0, [pc, #168]	; 32da8 <TargetControl::cycleReqAssertedBusRq()+0x10c>
   32cfc:	e0830000 	add	r0, r3, r0
   32d00:	ebfffc9c 	bl	31f78 <BusRawAccess::busReqRelease()>
   32d04:	e59f5098 	ldr	r5, [pc, #152]	; 32da4 <TargetControl::cycleReqAssertedBusRq()+0x108>
   32d08:	e5942000 	ldr	r2, [r4]
   32d0c:	e5953008 	ldr	r3, [r5, #8]
   32d10:	e59f0090 	ldr	r0, [pc, #144]	; 32da8 <TargetControl::cycleReqAssertedBusRq()+0x10c>
   32d14:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   32d18:	e5853008 	str	r3, [r5, #8]
   32d1c:	e3a01007 	mov	r1, #7
   32d20:	e0820000 	add	r0, r2, r0
   32d24:	ebfffd0b 	bl	32158 <BusRawAccess::muxSet(int)>
   32d28:	e3a03040 	mov	r3, #64	; 0x40
   32d2c:	e585301c 	str	r3, [r5, #28]
   32d30:	e8bd8070 	pop	{r4, r5, r6, pc}
   32d34:	e2805601 	add	r5, r0, #1048576	; 0x100000
   32d38:	ebffec0f 	bl	2dd7c <micros>
   32d3c:	e5952118 	ldr	r2, [r5, #280]	; 0x118
   32d40:	e5951114 	ldr	r1, [r5, #276]	; 0x114
   32d44:	ebffec2a 	bl	2ddf4 <isTimeout>
   32d48:	e3500000 	cmp	r0, #0
   32d4c:	0affffec 	beq	32d04 <TargetControl::cycleReqAssertedBusRq()+0x68>
   32d50:	e3a02000 	mov	r2, #0
   32d54:	e5953100 	ldr	r3, [r5, #256]	; 0x100
   32d58:	e5c5210c 	strb	r2, [r5, #268]	; 0x10c
   32d5c:	e1530002 	cmp	r3, r2
   32d60:	0a000003 	beq	32d74 <TargetControl::cycleReqAssertedBusRq()+0xd8>
   32d64:	e3a02004 	mov	r2, #4
   32d68:	e5951108 	ldr	r1, [r5, #264]	; 0x108
   32d6c:	e5950104 	ldr	r0, [r5, #260]	; 0x104
   32d70:	e12fff33 	blx	r3
   32d74:	e5943000 	ldr	r3, [r4]
   32d78:	e59f0028 	ldr	r0, [pc, #40]	; 32da8 <TargetControl::cycleReqAssertedBusRq()+0x10c>
   32d7c:	e3a02000 	mov	r2, #0
   32d80:	e3a01004 	mov	r1, #4
   32d84:	e0830000 	add	r0, r3, r0
   32d88:	ebfffb50 	bl	31ad0 <BusRawAccess::setBusSignal(BR_BUS_ACTION, bool)>
   32d8c:	eaffffdc 	b	32d04 <TargetControl::cycleReqAssertedBusRq()+0x68>
   32d90:	e1a00004 	mov	r0, r4
   32d94:	ebffff33 	bl	32a68 <TargetControl::programmingWrite()>
   32d98:	e1a00004 	mov	r0, r4
   32d9c:	ebfffe28 	bl	32644 <TargetControl::programmingDone()>
   32da0:	eaffffd3 	b	32cf4 <TargetControl::cycleReqAssertedBusRq()+0x58>
   32da4:	20200000 	.word	0x20200000
   32da8:	00100408 	.word	0x00100408

00032dac <TargetControl::cycleReqAssertedIRQ()>:
   32dac:	e92d4010 	push	{r4, lr}
   32db0:	e59f4028 	ldr	r4, [pc, #40]	; 32de0 <TargetControl::cycleReqAssertedIRQ()+0x34>
   32db4:	e5902000 	ldr	r2, [r0]
   32db8:	e5943008 	ldr	r3, [r4, #8]
   32dbc:	e59f0020 	ldr	r0, [pc, #32]	; 32de4 <TargetControl::cycleReqAssertedIRQ()+0x38>
   32dc0:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   32dc4:	e5843008 	str	r3, [r4, #8]
   32dc8:	e3a01007 	mov	r1, #7
   32dcc:	e0820000 	add	r0, r2, r0
   32dd0:	ebfffce0 	bl	32158 <BusRawAccess::muxSet(int)>
   32dd4:	e3a03040 	mov	r3, #64	; 0x40
   32dd8:	e584301c 	str	r3, [r4, #28]
   32ddc:	e8bd8010 	pop	{r4, pc}
   32de0:	20200000 	.word	0x20200000
   32de4:	00100408 	.word	0x00100408

00032de8 <TargetControl::cycleReqAssertedOther()>:
   32de8:	eaffffef 	b	32dac <TargetControl::cycleReqAssertedIRQ()>

00032dec <TargetControl::cycleReqCallback(BR_RETURN_TYPE)>:
   32dec:	e3a0c000 	mov	ip, #0
   32df0:	e2800601 	add	r0, r0, #1048576	; 0x100000
   32df4:	e5903100 	ldr	r3, [r0, #256]	; 0x100
   32df8:	e1a02001 	mov	r2, r1
   32dfc:	e153000c 	cmp	r3, ip
   32e00:	e5c0c10c 	strb	ip, [r0, #268]	; 0x10c
   32e04:	012fff1e 	bxeq	lr
   32e08:	e5901108 	ldr	r1, [r0, #264]	; 0x108
   32e0c:	e5900104 	ldr	r0, [r0, #260]	; 0x104
   32e10:	e12fff13 	bx	r3

00032e14 <TargetControl::cycleSetupForFastWait()>:
   32e14:	eaffffe4 	b	32dac <TargetControl::cycleReqAssertedIRQ()>

00032e18 <TargetControl::cycleHandleImportantWait()>:
   32e18:	e92d4070 	push	{r4, r5, r6, lr}
   32e1c:	e1a05000 	mov	r5, r0
   32e20:	e59f6130 	ldr	r6, [pc, #304]	; 32f58 <TargetControl::cycleHandleImportantWait()+0x140>
   32e24:	e5900000 	ldr	r0, [r0]
   32e28:	e24dd018 	sub	sp, sp, #24
   32e2c:	e0800006 	add	r0, r0, r6
   32e30:	eb000280 	bl	33838 <BusRawAccess::controlBusRead()>
   32e34:	e3a03000 	mov	r3, #0
   32e38:	e1a04000 	mov	r4, r0
   32e3c:	e5950000 	ldr	r0, [r5]
   32e40:	e28d2010 	add	r2, sp, #16
   32e44:	e0800006 	add	r0, r0, r6
   32e48:	e28d100c 	add	r1, sp, #12
   32e4c:	e58d300c 	str	r3, [sp, #12]
   32e50:	e58d3010 	str	r3, [sp, #16]
   32e54:	eb0002b3 	bl	33928 <BusRawAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>
   32e58:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   32e5c:	e2853601 	add	r3, r5, #1048576	; 0x100000
   32e60:	e5936220 	ldr	r6, [r3, #544]	; 0x220
   32e64:	e58d2014 	str	r2, [sp, #20]
   32e68:	e3560000 	cmp	r6, #0
   32e6c:	0a000006 	beq	32e8c <TargetControl::cycleHandleImportantWait()+0x74>
   32e70:	e28d2014 	add	r2, sp, #20
   32e74:	e5930224 	ldr	r0, [r3, #548]	; 0x224
   32e78:	e59d100c 	ldr	r1, [sp, #12]
   32e7c:	e58d2000 	str	r2, [sp]
   32e80:	e1a03004 	mov	r3, r4
   32e84:	e59d2010 	ldr	r2, [sp, #16]
   32e88:	e12fff36 	blx	r6
   32e8c:	e3140001 	tst	r4, #1
   32e90:	0a000011 	beq	32edc <TargetControl::cycleHandleImportantWait()+0xc4>
   32e94:	e314000c 	tst	r4, #12
   32e98:	0a00000f 	beq	32edc <TargetControl::cycleHandleImportantWait()+0xc4>
   32e9c:	e59d3014 	ldr	r3, [sp, #20]
   32ea0:	e3530000 	cmp	r3, #0
   32ea4:	aa000010 	bge	32eec <TargetControl::cycleHandleImportantWait()+0xd4>
   32ea8:	e59f40ac 	ldr	r4, [pc, #172]	; 32f5c <TargetControl::cycleHandleImportantWait()+0x144>
   32eac:	e5952000 	ldr	r2, [r5]
   32eb0:	e5943008 	ldr	r3, [r4, #8]
   32eb4:	e59f009c 	ldr	r0, [pc, #156]	; 32f58 <TargetControl::cycleHandleImportantWait()+0x140>
   32eb8:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   32ebc:	e5843008 	str	r3, [r4, #8]
   32ec0:	e3a01007 	mov	r1, #7
   32ec4:	e0820000 	add	r0, r2, r0
   32ec8:	ebfffca2 	bl	32158 <BusRawAccess::muxSet(int)>
   32ecc:	e3a03040 	mov	r3, #64	; 0x40
   32ed0:	e584301c 	str	r3, [r4, #28]
   32ed4:	e28dd018 	add	sp, sp, #24
   32ed8:	e8bd8070 	pop	{r4, r5, r6, pc}
   32edc:	e2044018 	and	r4, r4, #24
   32ee0:	e3540018 	cmp	r4, #24
   32ee4:	1affffef 	bne	32ea8 <TargetControl::cycleHandleImportantWait()+0x90>
   32ee8:	eaffffeb 	b	32e9c <TargetControl::cycleHandleImportantWait()+0x84>
   32eec:	e3a02040 	mov	r2, #64	; 0x40
   32ef0:	e59f4064 	ldr	r4, [pc, #100]	; 32f5c <TargetControl::cycleHandleImportantWait()+0x144>
   32ef4:	e1a03a03 	lsl	r3, r3, #20
   32ef8:	e5842028 	str	r2, [r4, #40]	; 0x28
   32efc:	e5941008 	ldr	r1, [r4, #8]
   32f00:	e59f2058 	ldr	r2, [pc, #88]	; 32f60 <TargetControl::cycleHandleImportantWait()+0x148>
   32f04:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
   32f08:	e20114ff 	and	r1, r1, #-16777216	; 0xff000000
   32f0c:	e1812002 	orr	r2, r1, r2
   32f10:	e22316ff 	eor	r1, r3, #267386880	; 0xff00000
   32f14:	e5842008 	str	r2, [r4, #8]
   32f18:	e584301c 	str	r3, [r4, #28]
   32f1c:	e5841028 	str	r1, [r4, #40]	; 0x28
   32f20:	ebffeb95 	bl	2dd7c <micros>
   32f24:	e1a06000 	mov	r6, r0
   32f28:	ea000003 	b	32f3c <TargetControl::cycleHandleImportantWait()+0x124>
   32f2c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   32f30:	e2033003 	and	r3, r3, #3
   32f34:	e3530003 	cmp	r3, #3
   32f38:	0affffda 	beq	32ea8 <TargetControl::cycleHandleImportantWait()+0x90>
   32f3c:	ebffeb8e 	bl	2dd7c <micros>
   32f40:	e3a02064 	mov	r2, #100	; 0x64
   32f44:	e1a01006 	mov	r1, r6
   32f48:	ebffeba9 	bl	2ddf4 <isTimeout>
   32f4c:	e3500000 	cmp	r0, #0
   32f50:	0afffff5 	beq	32f2c <TargetControl::cycleHandleImportantWait()+0x114>
   32f54:	eaffffd3 	b	32ea8 <TargetControl::cycleHandleImportantWait()+0x90>
   32f58:	00100408 	.word	0x00100408
   32f5c:	20200000 	.word	0x20200000
   32f60:	00249249 	.word	0x00249249

00032f64 <TargetControl::cycleNewWait()>:
   32f64:	e2803601 	add	r3, r0, #1048576	; 0x100000
   32f68:	e5d330f8 	ldrb	r3, [r3, #248]	; 0xf8
   32f6c:	e3530000 	cmp	r3, #0
   32f70:	112fff1e 	bxne	lr
   32f74:	e59f306c 	ldr	r3, [pc, #108]	; 32fe8 <TargetControl::cycleNewWait()+0x84>
   32f78:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   32f7c:	e2032024 	and	r2, r3, #36	; 0x24
   32f80:	e3520004 	cmp	r2, #4
   32f84:	112fff1e 	bxne	lr
   32f88:	e2032806 	and	r2, r3, #393216	; 0x60000
   32f8c:	e3520806 	cmp	r2, #393216	; 0x60000
   32f90:	012fff1e 	bxeq	lr
   32f94:	e3130002 	tst	r3, #2
   32f98:	e92d4010 	push	{r4, lr}
   32f9c:	e1a04000 	mov	r4, r0
   32fa0:	0a00000d 	beq	32fdc <TargetControl::cycleNewWait()+0x78>
   32fa4:	e3130001 	tst	r3, #1
   32fa8:	1a000005 	bne	32fc4 <TargetControl::cycleNewWait()+0x60>
   32fac:	e59f2038 	ldr	r2, [pc, #56]	; 32fec <TargetControl::cycleNewWait()+0x88>
   32fb0:	e1a03a23 	lsr	r3, r3, #20
   32fb4:	e6e03073 	uxtab	r3, r0, r3
   32fb8:	e7d33002 	ldrb	r3, [r3, r2]
   32fbc:	e3530000 	cmp	r3, #0
   32fc0:	1a000005 	bne	32fdc <TargetControl::cycleNewWait()+0x78>
   32fc4:	e5943000 	ldr	r3, [r4]
   32fc8:	e59f0020 	ldr	r0, [pc, #32]	; 32ff0 <TargetControl::cycleNewWait()+0x8c>
   32fcc:	e3a01000 	mov	r1, #0
   32fd0:	e8bd4010 	pop	{r4, lr}
   32fd4:	e0830000 	add	r0, r3, r0
   32fd8:	eafffb28 	b	31c80 <BusRawAccess::waitResetFlipFlops(bool)>
   32fdc:	e1a00004 	mov	r0, r4
   32fe0:	ebffff8c 	bl	32e18 <TargetControl::cycleHandleImportantWait()>
   32fe4:	eafffff6 	b	32fc4 <TargetControl::cycleNewWait()+0x60>
   32fe8:	20200000 	.word	0x20200000
   32fec:	0010011d 	.word	0x0010011d
   32ff0:	00100408 	.word	0x00100408

00032ff4 <TargetControl::cycleService()>:
   32ff4:	e92d4070 	push	{r4, r5, r6, lr}
   32ff8:	e2805601 	add	r5, r0, #1048576	; 0x100000
   32ffc:	e5d530f8 	ldrb	r3, [r5, #248]	; 0xf8
   33000:	e3530000 	cmp	r3, #0
   33004:	18bd8070 	popne	{r4, r5, r6, pc}
   33008:	e1a04000 	mov	r4, r0
   3300c:	ebffffd4 	bl	32f64 <TargetControl::cycleNewWait()>
   33010:	e5d530f9 	ldrb	r3, [r5, #249]	; 0xf9
   33014:	e3530000 	cmp	r3, #0
   33018:	e5d5310c 	ldrb	r3, [r5, #268]	; 0x10c
   3301c:	0a000001 	beq	33028 <TargetControl::cycleService()+0x34>
   33020:	e3530000 	cmp	r3, #0
   33024:	0a000012 	beq	33074 <TargetControl::cycleService()+0x80>
   33028:	e3530001 	cmp	r3, #1
   3302c:	0a000019 	beq	33098 <TargetControl::cycleService()+0xa4>
   33030:	e3530002 	cmp	r3, #2
   33034:	18bd8070 	popne	{r4, r5, r6, pc}
   33038:	e5d5310d 	ldrb	r3, [r5, #269]	; 0x10d
   3303c:	e3530004 	cmp	r3, #4
   33040:	0a000017 	beq	330a4 <TargetControl::cycleService()+0xb0>
   33044:	e59f5064 	ldr	r5, [pc, #100]	; 330b0 <TargetControl::cycleService()+0xbc>
   33048:	e5942000 	ldr	r2, [r4]
   3304c:	e5953008 	ldr	r3, [r5, #8]
   33050:	e59f005c 	ldr	r0, [pc, #92]	; 330b4 <TargetControl::cycleService()+0xc0>
   33054:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   33058:	e5853008 	str	r3, [r5, #8]
   3305c:	e3a01007 	mov	r1, #7
   33060:	e0820000 	add	r0, r2, r0
   33064:	ebfffc3b 	bl	32158 <BusRawAccess::muxSet(int)>
   33068:	e3a03040 	mov	r3, #64	; 0x40
   3306c:	e585301c 	str	r3, [r5, #28]
   33070:	e8bd8070 	pop	{r4, r5, r6, pc}
   33074:	e3a01004 	mov	r1, #4
   33078:	e3a02002 	mov	r2, #2
   3307c:	e59f3034 	ldr	r3, [pc, #52]	; 330b8 <TargetControl::cycleService()+0xc4>
   33080:	e1a00004 	mov	r0, r4
   33084:	e5c5110d 	strb	r1, [r5, #269]	; 0x10d
   33088:	e5c5211c 	strb	r2, [r5, #284]	; 0x11c
   3308c:	e5853118 	str	r3, [r5, #280]	; 0x118
   33090:	e8bd4070 	pop	{r4, r5, r6, lr}
   33094:	eafffef1 	b	32c60 <TargetControl::cycleReqHandlePending()>
   33098:	e1a00004 	mov	r0, r4
   3309c:	e8bd4070 	pop	{r4, r5, r6, lr}
   330a0:	eafffeee 	b	32c60 <TargetControl::cycleReqHandlePending()>
   330a4:	e1a00004 	mov	r0, r4
   330a8:	e8bd4070 	pop	{r4, r5, r6, lr}
   330ac:	eafffefa 	b	32c9c <TargetControl::cycleReqAssertedBusRq()>
   330b0:	20200000 	.word	0x20200000
   330b4:	00100408 	.word	0x00100408
   330b8:	000186a0 	.word	0x000186a0

000330bc <TargetCPUZ80::store16BitVal(unsigned char*, int, unsigned short)>:
   330bc:	e1a03422 	lsr	r3, r2, #8
   330c0:	e7e02001 	strb	r2, [r0, r1]!
   330c4:	e5c03001 	strb	r3, [r0, #1]
   330c8:	e12fff1e 	bx	lr

000330cc <TargetCPUZ80::getInjectToSetRegs(Z80Registers&, unsigned char*, unsigned long)>:
   330cc:	e92d4070 	push	{r4, r5, r6, lr}
   330d0:	e590e018 	ldr	lr, [r0, #24]
   330d4:	e59f3128 	ldr	r3, [pc, #296]	; 33204 <TargetCPUZ80::getInjectToSetRegs(Z80Registers&, unsigned char*, unsigned long)+0x138>
   330d8:	e590501c 	ldr	r5, [r0, #28]
   330dc:	e6ffc07e 	uxth	ip, lr
   330e0:	e1a0c42c 	lsr	ip, ip, #8
   330e4:	e5904024 	ldr	r4, [r0, #36]	; 0x24
   330e8:	e5c3c004 	strb	ip, [r3, #4]
   330ec:	e5c35007 	strb	r5, [r3, #7]
   330f0:	e6ffc075 	uxth	ip, r5
   330f4:	e1d052b0 	ldrh	r5, [r0, #32]
   330f8:	e1a0c42c 	lsr	ip, ip, #8
   330fc:	e5c3c008 	strb	ip, [r3, #8]
   33100:	e1c350ba 	strh	r5, [r3, #10]
   33104:	e6ffc074 	uxth	ip, r4
   33108:	e1d052b8 	ldrh	r5, [r0, #40]	; 0x28
   3310c:	e1a0c42c 	lsr	ip, ip, #8
   33110:	e5c3400d 	strb	r4, [r3, #13]
   33114:	e1c351b0 	strh	r5, [r3, #16]
   33118:	e5c3c00e 	strb	ip, [r3, #14]
   3311c:	e1d0c0b4 	ldrh	ip, [r0, #4]
   33120:	e5c3e003 	strb	lr, [r3, #3]
   33124:	e1c3c2b4 	strh	ip, [r3, #36]	; 0x24
   33128:	e1d0c0b8 	ldrh	ip, [r0, #8]
   3312c:	e590402c 	ldr	r4, [r0, #44]	; 0x2c
   33130:	e1c3c1b4 	strh	ip, [r3, #20]
   33134:	e590500c 	ldr	r5, [r0, #12]
   33138:	e6ffc074 	uxth	ip, r4
   3313c:	e6ffe075 	uxth	lr, r5
   33140:	e1a0e42e 	lsr	lr, lr, #8
   33144:	e5c3e018 	strb	lr, [r3, #24]
   33148:	e5c35017 	strb	r5, [r3, #23]
   3314c:	e1d051b0 	ldrh	r5, [r0, #16]
   33150:	e590e034 	ldr	lr, [r0, #52]	; 0x34
   33154:	e1a0c42c 	lsr	ip, ip, #8
   33158:	e1c351ba 	strh	r5, [r3, #26]
   3315c:	e5c3c01e 	strb	ip, [r3, #30]
   33160:	e5c3401d 	strb	r4, [r3, #29]
   33164:	e5904014 	ldr	r4, [r0, #20]
   33168:	e5c3e027 	strb	lr, [r3, #39]	; 0x27
   3316c:	e590c038 	ldr	ip, [r0, #56]	; 0x38
   33170:	e6ffe074 	uxth	lr, r4
   33174:	e28cc0fb 	add	ip, ip, #251	; 0xfb
   33178:	e27c5000 	rsbs	r5, ip, #0
   3317c:	e6ef5075 	uxtb	r5, r5
   33180:	e6efc07c 	uxtb	ip, ip
   33184:	e1a0e42e 	lsr	lr, lr, #8
   33188:	5265c000 	rsbpl	ip, r5, #0
   3318c:	e1a05444 	asr	r5, r4, #8
   33190:	e5c34021 	strb	r4, [r3, #33]	; 0x21
   33194:	e5c3e022 	strb	lr, [r3, #34]	; 0x22
   33198:	e5c3c02b 	strb	ip, [r3, #43]	; 0x2b
   3319c:	e5c3502f 	strb	r5, [r3, #47]	; 0x2f
   331a0:	e590c03c 	ldr	ip, [r0, #60]	; 0x3c
   331a4:	e35c0000 	cmp	ip, #0
   331a8:	03a0c046 	moveq	ip, #70	; 0x46
   331ac:	0a000002 	beq	331bc <TargetCPUZ80::getInjectToSetRegs(Z80Registers&, unsigned char*, unsigned long)+0xf0>
   331b0:	e35c0001 	cmp	ip, #1
   331b4:	03a0c056 	moveq	ip, #86	; 0x56
   331b8:	13a0c05e 	movne	ip, #94	; 0x5e
   331bc:	e5c3c031 	strb	ip, [r3, #49]	; 0x31
   331c0:	e590c040 	ldr	ip, [r0, #64]	; 0x40
   331c4:	e35c0000 	cmp	ip, #0
   331c8:	03a0c0f3 	moveq	ip, #243	; 0xf3
   331cc:	13a0c0fb 	movne	ip, #251	; 0xfb
   331d0:	e5c3c032 	strb	ip, [r3, #50]	; 0x32
   331d4:	e1d000b0 	ldrh	r0, [r0]
   331d8:	e3520035 	cmp	r2, #53	; 0x35
   331dc:	e1c303b4 	strh	r0, [r3, #52]	; 0x34
   331e0:	8a000001 	bhi	331ec <TargetCPUZ80::getInjectToSetRegs(Z80Registers&, unsigned char*, unsigned long)+0x120>
   331e4:	e3a00000 	mov	r0, #0
   331e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   331ec:	e1a00001 	mov	r0, r1
   331f0:	e3a02036 	mov	r2, #54	; 0x36
   331f4:	e59f1008 	ldr	r1, [pc, #8]	; 33204 <TargetCPUZ80::getInjectToSetRegs(Z80Registers&, unsigned char*, unsigned long)+0x138>
   331f8:	ebffdd6e 	bl	2a7b8 <memcpy>
   331fc:	e3a00036 	mov	r0, #54	; 0x36
   33200:	e8bd8070 	pop	{r4, r5, r6, pc}
   33204:	000465ec 	.word	0x000465ec

00033208 <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)>:
   33208:	e92d4070 	push	{r4, r5, r6, lr}
   3320c:	e5915020 	ldr	r5, [r1, #32]
   33210:	e59fc140 	ldr	ip, [pc, #320]	; 33358 <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)+0x150>
   33214:	e6ffe075 	uxth	lr, r5
   33218:	e1a0e42e 	lsr	lr, lr, #8
   3321c:	e5cce04c 	strb	lr, [ip, #76]	; 0x4c
   33220:	e5914028 	ldr	r4, [r1, #40]	; 0x28
   33224:	e1d1e1bc 	ldrh	lr, [r1, #28]
   33228:	e1d161b8 	ldrh	r6, [r1, #24]
   3322c:	e5cc504b 	strb	r5, [ip, #75]	; 0x4b
   33230:	e1cce4b8 	strh	lr, [ip, #72]	; 0x48
   33234:	e1d152b4 	ldrh	r5, [r1, #36]	; 0x24
   33238:	e6ffe074 	uxth	lr, r4
   3323c:	e1a0e42e 	lsr	lr, lr, #8
   33240:	e1cc54be 	strh	r5, [ip, #78]	; 0x4e
   33244:	e5cce052 	strb	lr, [ip, #82]	; 0x52
   33248:	e5cc4051 	strb	r4, [ip, #81]	; 0x51
   3324c:	e1cc64b4 	strh	r6, [ip, #68]	; 0x44
   33250:	e5914004 	ldr	r4, [r1, #4]
   33254:	e280e006 	add	lr, r0, #6
   33258:	e6ff0074 	uxth	r0, r4
   3325c:	e1a00420 	lsr	r0, r0, #8
   33260:	e5cc0062 	strb	r0, [ip, #98]	; 0x62
   33264:	e5cc4061 	strb	r4, [ip, #97]	; 0x61
   33268:	e5914008 	ldr	r4, [r1, #8]
   3326c:	e5915034 	ldr	r5, [r1, #52]	; 0x34
   33270:	e6ff0074 	uxth	r0, r4
   33274:	e1a00420 	lsr	r0, r0, #8
   33278:	e5cc4055 	strb	r4, [ip, #85]	; 0x55
   3327c:	e5cc0056 	strb	r0, [ip, #86]	; 0x56
   33280:	e1d100bc 	ldrh	r0, [r1, #12]
   33284:	e6ffe07e 	uxth	lr, lr
   33288:	e1cc05b8 	strh	r0, [ip, #88]	; 0x58
   3328c:	e5914010 	ldr	r4, [r1, #16]
   33290:	e5cce039 	strb	lr, [ip, #57]	; 0x39
   33294:	e6ff0074 	uxth	r0, r4
   33298:	e1a00420 	lsr	r0, r0, #8
   3329c:	e5cc005c 	strb	r0, [ip, #92]	; 0x5c
   332a0:	e5cc405b 	strb	r4, [ip, #91]	; 0x5b
   332a4:	e1d161b4 	ldrh	r6, [r1, #20]
   332a8:	e1d102bc 	ldrh	r0, [r1, #44]	; 0x2c
   332ac:	e1a0e42e 	lsr	lr, lr, #8
   332b0:	e5914014 	ldr	r4, [r1, #20]
   332b4:	e5cce03a 	strb	lr, [ip, #58]	; 0x3a
   332b8:	e5cc5064 	strb	r5, [ip, #100]	; 0x64
   332bc:	e1cc64b0 	strh	r6, [ip, #64]	; 0x40
   332c0:	e1cc03be 	strh	r0, [ip, #62]	; 0x3e
   332c4:	e591e038 	ldr	lr, [r1, #56]	; 0x38
   332c8:	e1a04444 	asr	r4, r4, #8
   332cc:	e28ee0fb 	add	lr, lr, #251	; 0xfb
   332d0:	e27e0000 	rsbs	r0, lr, #0
   332d4:	e6ef0070 	uxtb	r0, r0
   332d8:	e6efe07e 	uxtb	lr, lr
   332dc:	5260e000 	rsbpl	lr, r0, #0
   332e0:	e5cc406c 	strb	r4, [ip, #108]	; 0x6c
   332e4:	e5cce068 	strb	lr, [ip, #104]	; 0x68
   332e8:	e591003c 	ldr	r0, [r1, #60]	; 0x3c
   332ec:	e3500000 	cmp	r0, #0
   332f0:	03a00046 	moveq	r0, #70	; 0x46
   332f4:	0a000002 	beq	33304 <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)+0xfc>
   332f8:	e3500001 	cmp	r0, #1
   332fc:	03a00056 	moveq	r0, #86	; 0x56
   33300:	13a0005e 	movne	r0, #94	; 0x5e
   33304:	e5cc006e 	strb	r0, [ip, #110]	; 0x6e
   33308:	e5910040 	ldr	r0, [r1, #64]	; 0x40
   3330c:	e3500000 	cmp	r0, #0
   33310:	03a000f3 	moveq	r0, #243	; 0xf3
   33314:	13a000fb 	movne	r0, #251	; 0xfb
   33318:	e5cc006f 	strb	r0, [ip, #111]	; 0x6f
   3331c:	e5911000 	ldr	r1, [r1]
   33320:	e353003a 	cmp	r3, #58	; 0x3a
   33324:	e6ff3071 	uxth	r3, r1
   33328:	e1a03423 	lsr	r3, r3, #8
   3332c:	e5cc1071 	strb	r1, [ip, #113]	; 0x71
   33330:	e5cc3072 	strb	r3, [ip, #114]	; 0x72
   33334:	8a000001 	bhi	33340 <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)+0x138>
   33338:	e3a00000 	mov	r0, #0
   3333c:	e8bd8070 	pop	{r4, r5, r6, pc}
   33340:	e1a00002 	mov	r0, r2
   33344:	e59f1010 	ldr	r1, [pc, #16]	; 3335c <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)+0x154>
   33348:	e3a0203b 	mov	r2, #59	; 0x3b
   3334c:	ebffdd19 	bl	2a7b8 <memcpy>
   33350:	e3a0003b 	mov	r0, #59	; 0x3b
   33354:	e8bd8070 	pop	{r4, r5, r6, pc}
   33358:	000465ec 	.word	0x000465ec
   3335c:	00046624 	.word	0x00046624

00033360 <TargetProgrammer::TargetProgrammer()>:
   33360:	e3a02000 	mov	r2, #0
   33364:	e2803601 	add	r3, r0, #1048576	; 0x100000
   33368:	e58320c4 	str	r2, [r3, #196]	; 0xc4
   3336c:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   33370:	e58320bc 	str	r2, [r3, #188]	; 0xbc
   33374:	e58320b8 	str	r2, [r3, #184]	; 0xb8
   33378:	e58320b4 	str	r2, [r3, #180]	; 0xb4
   3337c:	e58320b0 	str	r2, [r3, #176]	; 0xb0
   33380:	e58320ac 	str	r2, [r3, #172]	; 0xac
   33384:	e58320a8 	str	r2, [r3, #168]	; 0xa8
   33388:	e58320d8 	str	r2, [r3, #216]	; 0xd8
   3338c:	e58320d4 	str	r2, [r3, #212]	; 0xd4
   33390:	e58320d0 	str	r2, [r3, #208]	; 0xd0
   33394:	e58320cc 	str	r2, [r3, #204]	; 0xcc
   33398:	e58320c8 	str	r2, [r3, #200]	; 0xc8
   3339c:	e58320ec 	str	r2, [r3, #236]	; 0xec
   333a0:	e58320e8 	str	r2, [r3, #232]	; 0xe8
   333a4:	e58320e4 	str	r2, [r3, #228]	; 0xe4
   333a8:	e58320e0 	str	r2, [r3, #224]	; 0xe0
   333ac:	e58320dc 	str	r2, [r3, #220]	; 0xdc
   333b0:	e58320a0 	str	r2, [r3, #160]	; 0xa0
   333b4:	e5c320a4 	strb	r2, [r3, #164]	; 0xa4
   333b8:	e12fff1e 	bx	lr

000333bc <TargetProgrammer::clear()>:
   333bc:	e3a0c000 	mov	ip, #0
   333c0:	e1a0300c 	mov	r3, ip
   333c4:	e1a0100c 	mov	r1, ip
   333c8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   333cc:	e280e601 	add	lr, r0, #1048576	; 0x100000
   333d0:	e5cec0a4 	strb	ip, [lr, #164]	; 0xa4
   333d4:	e58ec0a0 	str	ip, [lr, #160]	; 0xa0
   333d8:	e28e2004 	add	r2, lr, #4
   333dc:	e7821183 	str	r1, [r2, r3, lsl #3]
   333e0:	e2833001 	add	r3, r3, #1
   333e4:	e3530014 	cmp	r3, #20
   333e8:	1afffffb 	bne	333dc <TargetProgrammer::clear()+0x20>
   333ec:	e3a01000 	mov	r1, #0
   333f0:	e240237f 	sub	r2, r0, #-67108863	; 0xfc000001
   333f4:	e242263f 	sub	r2, r2, #66060288	; 0x3f00000
   333f8:	e2403001 	sub	r3, r0, #1
   333fc:	e5e31001 	strb	r1, [r3, #1]!
   33400:	e1530002 	cmp	r3, r2
   33404:	1afffffc 	bne	333fc <TargetProgrammer::clear()+0x40>
   33408:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003340c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>:
   3340c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   33410:	e2807601 	add	r7, r0, #1048576	; 0x100000
   33414:	e59750a0 	ldr	r5, [r7, #160]	; 0xa0
   33418:	e3550000 	cmp	r5, #0
   3341c:	0a000029 	beq	334c8 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xbc>
   33420:	e3a0c000 	mov	ip, #0
   33424:	e2876004 	add	r6, r7, #4
   33428:	ea000002 	b	33438 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x2c>
   3342c:	e28cc001 	add	ip, ip, #1
   33430:	e15c0005 	cmp	ip, r5
   33434:	0a000014 	beq	3348c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x80>
   33438:	e796418c 	ldr	r4, [r6, ip, lsl #3]
   3343c:	e797e18c 	ldr	lr, [r7, ip, lsl #3]
   33440:	e084e00e 	add	lr, r4, lr
   33444:	e15e0001 	cmp	lr, r1
   33448:	1afffff7 	bne	3342c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x20>
   3344c:	e28cc802 	add	ip, ip, #131072	; 0x20000
   33450:	e080c18c 	add	ip, r0, ip, lsl #3
   33454:	e0844003 	add	r4, r4, r3
   33458:	e3530000 	cmp	r3, #0
   3345c:	e58c4004 	str	r4, [ip, #4]
   33460:	08bd80f0 	popeq	{r4, r5, r6, r7, pc}
   33464:	e1a0c001 	mov	ip, r1
   33468:	e0811003 	add	r1, r1, r3
   3346c:	e042200c 	sub	r2, r2, ip
   33470:	e35c0601 	cmp	ip, #1048576	; 0x100000
   33474:	37d2300c 	ldrbcc	r3, [r2, ip]
   33478:	37c0300c 	strbcc	r3, [r0, ip]
   3347c:	e28cc001 	add	ip, ip, #1
   33480:	e15c0001 	cmp	ip, r1
   33484:	1afffff9 	bne	33470 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x64>
   33488:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3348c:	e3550014 	cmp	r5, #20
   33490:	1285c001 	addne	ip, r5, #1
   33494:	0a000006 	beq	334b4 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xa8>
   33498:	e0805185 	add	r5, r0, r5, lsl #3
   3349c:	e2855601 	add	r5, r5, #1048576	; 0x100000
   334a0:	e3530000 	cmp	r3, #0
   334a4:	e885000a 	stm	r5, {r1, r3}
   334a8:	e587c0a0 	str	ip, [r7, #160]	; 0xa0
   334ac:	1affffec 	bne	33464 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x58>
   334b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   334b4:	e3a01004 	mov	r1, #4
   334b8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   334bc:	e59f200c 	ldr	r2, [pc, #12]	; 334d0 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xc4>
   334c0:	e59f000c 	ldr	r0, [pc, #12]	; 334d4 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xc8>
   334c4:	eaffee31 	b	2ed90 <LogWrite>
   334c8:	e3a0c001 	mov	ip, #1
   334cc:	eafffff1 	b	33498 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x8c>
   334d0:	00044da8 	.word	0x00044da8
   334d4:	00044e00 	.word	0x00044e00

000334d8 <TargetProgrammer::addMemoryBlockStatic(unsigned long, unsigned char const*, unsigned long, void*)>:
   334d8:	e253c000 	subs	ip, r3, #0
   334dc:	e1a03002 	mov	r3, r2
   334e0:	012fff1e 	bxeq	lr
   334e4:	e1a02001 	mov	r2, r1
   334e8:	e1a01000 	mov	r1, r0
   334ec:	e1a0000c 	mov	r0, ip
   334f0:	eaffffc5 	b	3340c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>

000334f4 <TargetProgrammer::numMemoryBlocks()>:
   334f4:	e2800601 	add	r0, r0, #1048576	; 0x100000
   334f8:	e59000a0 	ldr	r0, [r0, #160]	; 0xa0
   334fc:	e12fff1e 	bx	lr

00033500 <TargetProgrammer::getMemoryBlock(unsigned long)>:
   33500:	e2811802 	add	r1, r1, #131072	; 0x20000
   33504:	e0800181 	add	r0, r0, r1, lsl #3
   33508:	e12fff1e 	bx	lr

0003350c <TargetProgrammer::getMemoryImagePtr()>:
   3350c:	e12fff1e 	bx	lr

00033510 <TargetProgrammer::getMemoryImageSize()>:
   33510:	e3a00601 	mov	r0, #1048576	; 0x100000
   33514:	e12fff1e 	bx	lr

00033518 <TargetProgrammer::setTargetRegisters(Z80Registers const&)>:
   33518:	e92d4030 	push	{r4, r5, lr}
   3351c:	e1a04001 	mov	r4, r1
   33520:	e2805601 	add	r5, r0, #1048576	; 0x100000
   33524:	e24dd00c 	sub	sp, sp, #12
   33528:	e3a02048 	mov	r2, #72	; 0x48
   3352c:	e28500a8 	add	r0, r5, #168	; 0xa8
   33530:	ebffdca0 	bl	2a7b8 <memcpy>
   33534:	e3a03001 	mov	r3, #1
   33538:	e5942004 	ldr	r2, [r4, #4]
   3353c:	e3a01004 	mov	r1, #4
   33540:	e5c530a4 	strb	r3, [r5, #164]	; 0xa4
   33544:	e59f0014 	ldr	r0, [pc, #20]	; 33560 <TargetProgrammer::setTargetRegisters(Z80Registers const&)+0x48>
   33548:	e5943000 	ldr	r3, [r4]
   3354c:	e58d2000 	str	r2, [sp]
   33550:	e59f200c 	ldr	r2, [pc, #12]	; 33564 <TargetProgrammer::setTargetRegisters(Z80Registers const&)+0x4c>
   33554:	ebffee0d 	bl	2ed90 <LogWrite>
   33558:	e28dd00c 	add	sp, sp, #12
   3355c:	e8bd8030 	pop	{r4, r5, pc}
   33560:	00044e00 	.word	0x00044e00
   33564:	00044dc8 	.word	0x00044dc8

00033568 <TargetProgrammer::setTargetRegistersStatic(Z80Registers const&, void*)>:
   33568:	e2513000 	subs	r3, r1, #0
   3356c:	e1a01000 	mov	r1, r0
   33570:	012fff1e 	bxeq	lr
   33574:	e1a00003 	mov	r0, r3
   33578:	eaffffe6 	b	33518 <TargetProgrammer::setTargetRegisters(Z80Registers const&)>

0003357c <TargetProgrammer::areRegistersValid()>:
   3357c:	e2800601 	add	r0, r0, #1048576	; 0x100000
   33580:	e5d000a4 	ldrb	r0, [r0, #164]	; 0xa4
   33584:	e12fff1e 	bx	lr

00033588 <TargetProgrammer::getTargetRegs(Z80Registers&)>:
   33588:	e1a03001 	mov	r3, r1
   3358c:	e2801601 	add	r1, r0, #1048576	; 0x100000
   33590:	e3a02048 	mov	r2, #72	; 0x48
   33594:	e1a00003 	mov	r0, r3
   33598:	e92d4010 	push	{r4, lr}
   3359c:	e28110a8 	add	r1, r1, #168	; 0xa8
   335a0:	ebffdc84 	bl	2a7b8 <memcpy>
   335a4:	e8bd4010 	pop	{r4, lr}
   335a8:	e5903000 	ldr	r3, [r0]
   335ac:	e3a01004 	mov	r1, #4
   335b0:	e59f2004 	ldr	r2, [pc, #4]	; 335bc <TargetProgrammer::getTargetRegs(Z80Registers&)+0x34>
   335b4:	e59f0004 	ldr	r0, [pc, #4]	; 335c0 <TargetProgrammer::getTargetRegs(Z80Registers&)+0x38>
   335b8:	eaffedf4 	b	2ed90 <LogWrite>
   335bc:	00044de8 	.word	0x00044de8
   335c0:	00044e00 	.word	0x00044e00

000335c4 <MemoryController::MemoryController(BusControl&)>:
   335c4:	e5801000 	str	r1, [r0]
   335c8:	e12fff1e 	bx	lr

000335cc <MemoryController::clear()>:
   335cc:	e12fff1e 	bx	lr

000335d0 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>:
   335d0:	e1a0c000 	mov	ip, r0
   335d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   335d8:	e59f0014 	ldr	r0, [pc, #20]	; 335f4 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x24>
   335dc:	e59ce000 	ldr	lr, [ip]
   335e0:	e5ddc004 	ldrb	ip, [sp, #4]
   335e4:	e08e0000 	add	r0, lr, r0
   335e8:	e58dc004 	str	ip, [sp, #4]
   335ec:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   335f0:	ea0000fb 	b	339e4 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   335f4:	00100408 	.word	0x00100408

000335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>:
   335f8:	e1a0c000 	mov	ip, r0
   335fc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   33600:	e59f0014 	ldr	r0, [pc, #20]	; 3361c <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x24>
   33604:	e59ce000 	ldr	lr, [ip]
   33608:	e5ddc004 	ldrb	ip, [sp, #4]
   3360c:	e08e0000 	add	r0, lr, r0
   33610:	e58dc004 	str	ip, [sp, #4]
   33614:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   33618:	ea000150 	b	33b60 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3361c:	00100408 	.word	0x00100408

00033620 <BusRawAccess::addrLowSet(unsigned long)>:
   33620:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33624:	e1a04000 	mov	r4, r0
   33628:	e1a07001 	mov	r7, r1
   3362c:	ebfffb21 	bl	322b8 <BusRawAccess::muxClearLowAddr()>
   33630:	e5943004 	ldr	r3, [r4, #4]
   33634:	e3530011 	cmp	r3, #17
   33638:	0a000013 	beq	3368c <BusRawAccess::addrLowSet(unsigned long)+0x6c>
   3363c:	e3a02000 	mov	r2, #0
   33640:	e3a06801 	mov	r6, #65536	; 0x10000
   33644:	e59f307c 	ldr	r3, [pc, #124]	; 336c8 <BusRawAccess::addrLowSet(unsigned long)+0xa8>
   33648:	e3a01c0e 	mov	r1, #3584	; 0xe00
   3364c:	e1a05003 	mov	r5, r3
   33650:	e1a04002 	mov	r4, r2
   33654:	e1a08006 	mov	r8, r6
   33658:	e5831028 	str	r1, [r3, #40]	; 0x28
   3365c:	e6ef7077 	uxtb	r7, r7
   33660:	e583201c 	str	r2, [r3, #28]
   33664:	e3a00f7d 	mov	r0, #500	; 0x1f4
   33668:	e5858028 	str	r8, [r5, #40]	; 0x28
   3366c:	eb0024f9 	bl	3ca58 <lowlev_cycleDelay>
   33670:	e3a00f7d 	mov	r0, #500	; 0x1f4
   33674:	e585601c 	str	r6, [r5, #28]
   33678:	eb0024f6 	bl	3ca58 <lowlev_cycleDelay>
   3367c:	e1570004 	cmp	r7, r4
   33680:	e2844001 	add	r4, r4, #1
   33684:	1afffff6 	bne	33664 <BusRawAccess::addrLowSet(unsigned long)+0x44>
   33688:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3368c:	e3a06801 	mov	r6, #65536	; 0x10000
   33690:	e3a04000 	mov	r4, #0
   33694:	e1a08006 	mov	r8, r6
   33698:	e59f5028 	ldr	r5, [pc, #40]	; 336c8 <BusRawAccess::addrLowSet(unsigned long)+0xa8>
   3369c:	e6ef7077 	uxtb	r7, r7
   336a0:	e3a00f7d 	mov	r0, #500	; 0x1f4
   336a4:	e585801c 	str	r8, [r5, #28]
   336a8:	eb0024ea 	bl	3ca58 <lowlev_cycleDelay>
   336ac:	e3a00f7d 	mov	r0, #500	; 0x1f4
   336b0:	e5856028 	str	r6, [r5, #40]	; 0x28
   336b4:	eb0024e7 	bl	3ca58 <lowlev_cycleDelay>
   336b8:	e1570004 	cmp	r7, r4
   336bc:	e2844001 	add	r4, r4, #1
   336c0:	1afffff6 	bne	336a0 <BusRawAccess::addrLowSet(unsigned long)+0x80>
   336c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   336c8:	20200000 	.word	0x20200000

000336cc <BusRawAccess::addrHighSet(unsigned long)>:
   336cc:	e5903004 	ldr	r3, [r0, #4]
   336d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   336d4:	e3530011 	cmp	r3, #17
   336d8:	e1a04001 	mov	r4, r1
   336dc:	0a000020 	beq	33764 <BusRawAccess::addrHighSet(unsigned long)+0x98>
   336e0:	e3a05801 	mov	r5, #65536	; 0x10000
   336e4:	e3a00080 	mov	r0, #128	; 0x80
   336e8:	e3a07d3a 	mov	r7, #3712	; 0xe80
   336ec:	e3a06b02 	mov	r6, #2048	; 0x800
   336f0:	e1a0e005 	mov	lr, r5
   336f4:	e1a02000 	mov	r2, r0
   336f8:	e3a01009 	mov	r1, #9
   336fc:	e59fc0b0 	ldr	ip, [pc, #176]	; 337b4 <BusRawAccess::addrHighSet(unsigned long)+0xe8>
   33700:	e58c501c 	str	r5, [ip, #28]
   33704:	e1a0300c 	mov	r3, ip
   33708:	e58c7028 	str	r7, [ip, #40]	; 0x28
   3370c:	e58c601c 	str	r6, [ip, #28]
   33710:	e59fc0a0 	ldr	ip, [pc, #160]	; 337b8 <BusRawAccess::addrHighSet(unsigned long)+0xec>
   33714:	e3140080 	tst	r4, #128	; 0x80
   33718:	1583e01c 	strne	lr, [r3, #28]
   3371c:	0583c028 	streq	ip, [r3, #40]	; 0x28
   33720:	15830028 	strne	r0, [r3, #40]	; 0x28
   33724:	e2511001 	subs	r1, r1, #1
   33728:	e5832028 	str	r2, [r3, #40]	; 0x28
   3372c:	e1a04084 	lsl	r4, r4, #1
   33730:	e5832028 	str	r2, [r3, #40]	; 0x28
   33734:	e5832028 	str	r2, [r3, #40]	; 0x28
   33738:	e5832028 	str	r2, [r3, #40]	; 0x28
   3373c:	e5832028 	str	r2, [r3, #40]	; 0x28
   33740:	e5832028 	str	r2, [r3, #40]	; 0x28
   33744:	e5832028 	str	r2, [r3, #40]	; 0x28
   33748:	e583201c 	str	r2, [r3, #28]
   3374c:	1afffff0 	bne	33714 <BusRawAccess::addrHighSet(unsigned long)+0x48>
   33750:	e3a01801 	mov	r1, #65536	; 0x10000
   33754:	e3a02d3a 	mov	r2, #3712	; 0xe80
   33758:	e583101c 	str	r1, [r3, #28]
   3375c:	e5832028 	str	r2, [r3, #40]	; 0x28
   33760:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   33764:	e1a07000 	mov	r7, r0
   33768:	e3a05009 	mov	r5, #9
   3376c:	e59f8040 	ldr	r8, [pc, #64]	; 337b4 <BusRawAccess::addrHighSet(unsigned long)+0xe8>
   33770:	e3a06080 	mov	r6, #128	; 0x80
   33774:	e2141080 	ands	r1, r4, #128	; 0x80
   33778:	13a01004 	movne	r1, #4
   3377c:	e1a00007 	mov	r0, r7
   33780:	ebfffa74 	bl	32158 <BusRawAccess::muxSet(int)>
   33784:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   33788:	eb0024b2 	bl	3ca58 <lowlev_cycleDelay>
   3378c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   33790:	e588601c 	str	r6, [r8, #28]
   33794:	eb0024af 	bl	3ca58 <lowlev_cycleDelay>
   33798:	e2555001 	subs	r5, r5, #1
   3379c:	e1a04084 	lsl	r4, r4, #1
   337a0:	e5886028 	str	r6, [r8, #40]	; 0x28
   337a4:	1afffff1 	bne	33770 <BusRawAccess::addrHighSet(unsigned long)+0xa4>
   337a8:	e1a00007 	mov	r0, r7
   337ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   337b0:	eafffa7b 	b	321a4 <BusRawAccess::muxClear()>
   337b4:	20200000 	.word	0x20200000
   337b8:	00010080 	.word	0x00010080

000337bc <BusRawAccess::addrSet(unsigned int)>:
   337bc:	e92d4070 	push	{r4, r5, r6, lr}
   337c0:	e1a04001 	mov	r4, r1
   337c4:	e1a05000 	mov	r5, r0
   337c8:	e1a01421 	lsr	r1, r1, #8
   337cc:	ebffffbe 	bl	336cc <BusRawAccess::addrHighSet(unsigned long)>
   337d0:	e1a00005 	mov	r0, r5
   337d4:	e6ef1074 	uxtb	r1, r4
   337d8:	e8bd4070 	pop	{r4, r5, r6, lr}
   337dc:	eaffff8f 	b	33620 <BusRawAccess::addrLowSet(unsigned long)>

000337e0 <BusRawAccess::addrLowInc()>:
   337e0:	e5903004 	ldr	r3, [r0, #4]
   337e4:	e92d4070 	push	{r4, r5, r6, lr}
   337e8:	e3530011 	cmp	r3, #17
   337ec:	0a000007 	beq	33810 <BusRawAccess::addrLowInc()+0x30>
   337f0:	e3a03c0e 	mov	r3, #3584	; 0xe00
   337f4:	e59f4038 	ldr	r4, [pc, #56]	; 33834 <BusRawAccess::addrLowInc()+0x54>
   337f8:	e3a00f7d 	mov	r0, #500	; 0x1f4
   337fc:	e5843028 	str	r3, [r4, #40]	; 0x28
   33800:	eb002494 	bl	3ca58 <lowlev_cycleDelay>
   33804:	e3a03801 	mov	r3, #65536	; 0x10000
   33808:	e584301c 	str	r3, [r4, #28]
   3380c:	e8bd8070 	pop	{r4, r5, r6, pc}
   33810:	e3a05801 	mov	r5, #65536	; 0x10000
   33814:	e59f4018 	ldr	r4, [pc, #24]	; 33834 <BusRawAccess::addrLowInc()+0x54>
   33818:	e3a00f7d 	mov	r0, #500	; 0x1f4
   3381c:	e584501c 	str	r5, [r4, #28]
   33820:	eb00248c 	bl	3ca58 <lowlev_cycleDelay>
   33824:	e5845028 	str	r5, [r4, #40]	; 0x28
   33828:	e3a00f7d 	mov	r0, #500	; 0x1f4
   3382c:	e8bd4070 	pop	{r4, r5, r6, lr}
   33830:	ea002488 	b	3ca58 <lowlev_cycleDelay>
   33834:	20200000 	.word	0x20200000

00033838 <BusRawAccess::controlBusRead()>:
   33838:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3383c:	e1a06000 	mov	r6, r0
   33840:	ebffe94d 	bl	2dd7c <micros>
   33844:	e3a0a000 	mov	sl, #0
   33848:	e1a07000 	mov	r7, r0
   3384c:	e3a09040 	mov	r9, #64	; 0x40
   33850:	e59f50c8 	ldr	r5, [pc, #200]	; 33920 <BusRawAccess::controlBusRead()+0xe8>
   33854:	e59f80c8 	ldr	r8, [pc, #200]	; 33924 <BusRawAccess::controlBusRead()+0xec>
   33858:	ea000023 	b	338ec <BusRawAccess::controlBusRead()+0xb4>
   3385c:	e1a03922 	lsr	r3, r2, #18
   33860:	e2233001 	eor	r3, r3, #1
   33864:	e2033001 	and	r3, r3, #1
   33868:	e3120802 	tst	r2, #131072	; 0x20000
   3386c:	03833002 	orreq	r3, r3, #2
   33870:	e3120001 	tst	r2, #1
   33874:	03833004 	orreq	r3, r3, #4
   33878:	e3120002 	tst	r2, #2
   3387c:	03833008 	orreq	r3, r3, #8
   33880:	e3120020 	tst	r2, #32
   33884:	03833020 	orreq	r3, r3, #32
   33888:	e3120008 	tst	r2, #8
   3388c:	03833010 	orreq	r3, r3, #16
   33890:	e3120004 	tst	r2, #4
   33894:	03833b01 	orreq	r3, r3, #1024	; 0x400
   33898:	e3510011 	cmp	r1, #17
   3389c:	e1a04003 	mov	r4, r3
   338a0:	1a000002 	bne	338b0 <BusRawAccess::controlBusRead()+0x78>
   338a4:	e3120601 	tst	r2, #1048576	; 0x100000
   338a8:	e3c34010 	bic	r4, r3, #16
   338ac:	03844010 	orreq	r4, r4, #16
   338b0:	e314000c 	tst	r4, #12
   338b4:	0a000001 	beq	338c0 <BusRawAccess::controlBusRead()+0x88>
   338b8:	e3140003 	tst	r4, #3
   338bc:	1a000015 	bne	33918 <BusRawAccess::controlBusRead()+0xe0>
   338c0:	e2043018 	and	r3, r4, #24
   338c4:	e3530018 	cmp	r3, #24
   338c8:	0a000012 	beq	33918 <BusRawAccess::controlBusRead()+0xe0>
   338cc:	ebffe92a 	bl	2dd7c <micros>
   338d0:	e3a0200a 	mov	r2, #10
   338d4:	e1a01007 	mov	r1, r7
   338d8:	ebffe945 	bl	2ddf4 <isTimeout>
   338dc:	e28aa001 	add	sl, sl, #1
   338e0:	e3500000 	cmp	r0, #0
   338e4:	115a0008 	cmpne	sl, r8
   338e8:	ca00000a 	bgt	33918 <BusRawAccess::controlBusRead()+0xe0>
   338ec:	e5961004 	ldr	r1, [r6, #4]
   338f0:	e5952034 	ldr	r2, [r5, #52]	; 0x34
   338f4:	e3510011 	cmp	r1, #17
   338f8:	1affffd7 	bne	3385c <BusRawAccess::controlBusRead()+0x24>
   338fc:	e3a00064 	mov	r0, #100	; 0x64
   33900:	e5859028 	str	r9, [r5, #40]	; 0x28
   33904:	eb002453 	bl	3ca58 <lowlev_cycleDelay>
   33908:	e5952034 	ldr	r2, [r5, #52]	; 0x34
   3390c:	e585901c 	str	r9, [r5, #28]
   33910:	e5961004 	ldr	r1, [r6, #4]
   33914:	eaffffd0 	b	3385c <BusRawAccess::controlBusRead()+0x24>
   33918:	e1a00004 	mov	r0, r4
   3391c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33920:	20200000 	.word	0x20200000
   33924:	00002710 	.word	0x00002710

00033928 <BusRawAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>:
   33928:	e5903004 	ldr	r3, [r0, #4]
   3392c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33930:	e3530011 	cmp	r3, #17
   33934:	e1a07002 	mov	r7, r2
   33938:	03a02040 	moveq	r2, #64	; 0x40
   3393c:	e1a04000 	mov	r4, r0
   33940:	e1a06001 	mov	r6, r1
   33944:	059f3094 	ldreq	r3, [pc, #148]	; 339e0 <BusRawAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0xb8>
   33948:	e59f5090 	ldr	r5, [pc, #144]	; 339e0 <BusRawAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0xb8>
   3394c:	05832028 	streq	r2, [r3, #40]	; 0x28
   33950:	e5953008 	ldr	r3, [r5, #8]
   33954:	e3a01007 	mov	r1, #7
   33958:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   3395c:	e5853008 	str	r3, [r5, #8]
   33960:	ebfff9fc 	bl	32158 <BusRawAccess::muxSet(int)>
   33964:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   33968:	eb00243a 	bl	3ca58 <lowlev_cycleDelay>
   3396c:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   33970:	e3a01003 	mov	r1, #3
   33974:	e1a03623 	lsr	r3, r3, #12
   33978:	e2033cff 	and	r3, r3, #65280	; 0xff00
   3397c:	e5863000 	str	r3, [r6]
   33980:	e1a00004 	mov	r0, r4
   33984:	ebfff9f3 	bl	32158 <BusRawAccess::muxSet(int)>
   33988:	e3a00f7d 	mov	r0, #500	; 0x1f4
   3398c:	eb002431 	bl	3ca58 <lowlev_cycleDelay>
   33990:	e5952034 	ldr	r2, [r5, #52]	; 0x34
   33994:	e5963000 	ldr	r3, [r6]
   33998:	e1a02202 	lsl	r2, r2, #4
   3399c:	e1833c22 	orr	r3, r3, r2, lsr #24
   339a0:	e5863000 	str	r3, [r6]
   339a4:	e1a00004 	mov	r0, r4
   339a8:	ebfff9fd 	bl	321a4 <BusRawAccess::muxClear()>
   339ac:	e3a00f7d 	mov	r0, #500	; 0x1f4
   339b0:	eb002428 	bl	3ca58 <lowlev_cycleDelay>
   339b4:	e3a03040 	mov	r3, #64	; 0x40
   339b8:	e1a00004 	mov	r0, r4
   339bc:	e585301c 	str	r3, [r5, #28]
   339c0:	ebfffa02 	bl	321d0 <BusRawAccess::muxDataBusOutputEnable()>
   339c4:	e3a00f7d 	mov	r0, #500	; 0x1f4
   339c8:	eb002422 	bl	3ca58 <lowlev_cycleDelay>
   339cc:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   339d0:	e1a03a23 	lsr	r3, r3, #20
   339d4:	e6ef3073 	uxtb	r3, r3
   339d8:	e5873000 	str	r3, [r7]
   339dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   339e0:	20200000 	.word	0x20200000

000339e4 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>:
   339e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   339e8:	e3a0e040 	mov	lr, #64	; 0x40
   339ec:	e59f4158 	ldr	r4, [pc, #344]	; 33b4c <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x168>
   339f0:	e24dd00c 	sub	sp, sp, #12
   339f4:	e594c008 	ldr	ip, [r4, #8]
   339f8:	e5dd5030 	ldrb	r5, [sp, #48]	; 0x30
   339fc:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   33a00:	e58d2004 	str	r2, [sp, #4]
   33a04:	e584c008 	str	ip, [r4, #8]
   33a08:	e584e01c 	str	lr, [r4, #28]
   33a0c:	e1a0a000 	mov	sl, r0
   33a10:	e1a09001 	mov	r9, r1
   33a14:	e1a08003 	mov	r8, r3
   33a18:	ebffff67 	bl	337bc <BusRawAccess::addrSet(unsigned int)>
   33a1c:	e3a03801 	mov	r3, #65536	; 0x10000
   33a20:	e3a00001 	mov	r0, #1
   33a24:	e584301c 	str	r3, [r4, #28]
   33a28:	ebffe8db 	bl	2dd9c <microsDelay>
   33a2c:	e59f111c 	ldr	r1, [pc, #284]	; 33b50 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x16c>
   33a30:	e59a3004 	ldr	r3, [sl, #4]
   33a34:	e3550001 	cmp	r5, #1
   33a38:	e59f7114 	ldr	r7, [pc, #276]	; 33b54 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x170>
   33a3c:	11a07001 	movne	r7, r1
   33a40:	e3530011 	cmp	r3, #17
   33a44:	e59d2004 	ldr	r2, [sp, #4]
   33a48:	0a000026 	beq	33ae8 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x104>
   33a4c:	e3580000 	cmp	r8, #0
   33a50:	e387bc0e 	orr	fp, r7, #3584	; 0xe00
   33a54:	e3877801 	orr	r7, r7, #65536	; 0x10000
   33a58:	0a00001f 	beq	33adc <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0xf8>
   33a5c:	e1a06002 	mov	r6, r2
   33a60:	e59f30f0 	ldr	r3, [pc, #240]	; 33b58 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x174>
   33a64:	e59f50f0 	ldr	r5, [pc, #240]	; 33b5c <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x178>
   33a68:	e0828008 	add	r8, r2, r8
   33a6c:	e0499002 	sub	r9, r9, r2
   33a70:	ea000001 	b	33a7c <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x98>
   33a74:	e1580006 	cmp	r8, r6
   33a78:	0a000017 	beq	33adc <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0xf8>
   33a7c:	e3a02801 	mov	r2, #65536	; 0x10000
   33a80:	e584b028 	str	fp, [r4, #40]	; 0x28
   33a84:	e584301c 	str	r3, [r4, #28]
   33a88:	e5842028 	str	r2, [r4, #40]	; 0x28
   33a8c:	e5845028 	str	r5, [r4, #40]	; 0x28
   33a90:	e5845028 	str	r5, [r4, #40]	; 0x28
   33a94:	e5845028 	str	r5, [r4, #40]	; 0x28
   33a98:	e5845028 	str	r5, [r4, #40]	; 0x28
   33a9c:	e5845028 	str	r5, [r4, #40]	; 0x28
   33aa0:	e5845028 	str	r5, [r4, #40]	; 0x28
   33aa4:	e5845028 	str	r5, [r4, #40]	; 0x28
   33aa8:	e5845028 	str	r5, [r4, #40]	; 0x28
   33aac:	e5942034 	ldr	r2, [r4, #52]	; 0x34
   33ab0:	e1a02a22 	lsr	r2, r2, #20
   33ab4:	e4c62001 	strb	r2, [r6], #1
   33ab8:	e0861009 	add	r1, r6, r9
   33abc:	e31100ff 	tst	r1, #255	; 0xff
   33ac0:	e584701c 	str	r7, [r4, #28]
   33ac4:	1affffea 	bne	33a74 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x90>
   33ac8:	e1a0000a 	mov	r0, sl
   33acc:	ebffff3a 	bl	337bc <BusRawAccess::addrSet(unsigned int)>
   33ad0:	e1580006 	cmp	r8, r6
   33ad4:	e59f307c 	ldr	r3, [pc, #124]	; 33b58 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x174>
   33ad8:	1affffe7 	bne	33a7c <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x98>
   33adc:	e3a00000 	mov	r0, #0
   33ae0:	e28dd00c 	add	sp, sp, #12
   33ae4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33ae8:	e3580000 	cmp	r8, #0
   33aec:	0afffffa 	beq	33adc <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0xf8>
   33af0:	e1a05002 	mov	r5, r2
   33af4:	e0828008 	add	r8, r2, r8
   33af8:	e0499002 	sub	r9, r9, r2
   33afc:	ea000001 	b	33b08 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x124>
   33b00:	e1550008 	cmp	r5, r8
   33b04:	0afffff4 	beq	33adc <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0xf8>
   33b08:	e1a0000a 	mov	r0, sl
   33b0c:	ebfff9af 	bl	321d0 <BusRawAccess::muxDataBusOutputEnable()>
   33b10:	e3a00f7d 	mov	r0, #500	; 0x1f4
   33b14:	e5847028 	str	r7, [r4, #40]	; 0x28
   33b18:	eb0023ce 	bl	3ca58 <lowlev_cycleDelay>
   33b1c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   33b20:	e1a0000a 	mov	r0, sl
   33b24:	e1a03a23 	lsr	r3, r3, #20
   33b28:	e4c53001 	strb	r3, [r5], #1
   33b2c:	e584701c 	str	r7, [r4, #28]
   33b30:	ebffff2a 	bl	337e0 <BusRawAccess::addrLowInc()>
   33b34:	e0851009 	add	r1, r5, r9
   33b38:	e31100ff 	tst	r1, #255	; 0xff
   33b3c:	1affffef 	bne	33b00 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x11c>
   33b40:	e1a0000a 	mov	r0, sl
   33b44:	ebffff1c 	bl	337bc <BusRawAccess::addrSet(unsigned int)>
   33b48:	eaffffec 	b	33b00 <BusRawAccess::rawBlockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)+0x11c>
   33b4c:	20200000 	.word	0x20200000
   33b50:	00040001 	.word	0x00040001
   33b54:	00040002 	.word	0x00040002
   33b58:	00010200 	.word	0x00010200
   33b5c:	00010e00 	.word	0x00010e00

00033b60 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>:
   33b60:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33b64:	e1a07000 	mov	r7, r0
   33b68:	e59f41c8 	ldr	r4, [pc, #456]	; 33d38 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1d8>
   33b6c:	e24dd00c 	sub	sp, sp, #12
   33b70:	e594c008 	ldr	ip, [r4, #8]
   33b74:	e5dda030 	ldrb	sl, [sp, #48]	; 0x30
   33b78:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   33b7c:	e584c008 	str	ip, [r4, #8]
   33b80:	e1a09002 	mov	r9, r2
   33b84:	e1a05003 	mov	r5, r3
   33b88:	e1a06001 	mov	r6, r1
   33b8c:	ebffff0a 	bl	337bc <BusRawAccess::addrSet(unsigned int)>
   33b90:	e5942008 	ldr	r2, [r4, #8]
   33b94:	e59f31a0 	ldr	r3, [pc, #416]	; 33d3c <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1dc>
   33b98:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   33b9c:	e1823003 	orr	r3, r2, r3
   33ba0:	e5843008 	str	r3, [r4, #8]
   33ba4:	e5973004 	ldr	r3, [r7, #4]
   33ba8:	e3530011 	cmp	r3, #17
   33bac:	0a000031 	beq	33c78 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x118>
   33bb0:	e59f2188 	ldr	r2, [pc, #392]	; 33d40 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1e0>
   33bb4:	e59f3188 	ldr	r3, [pc, #392]	; 33d44 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1e4>
   33bb8:	e35a0001 	cmp	sl, #1
   33bbc:	01a0a002 	moveq	sl, r2
   33bc0:	11a0a003 	movne	sl, r3
   33bc4:	e3550000 	cmp	r5, #0
   33bc8:	0a000023 	beq	33c5c <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0xfc>
   33bcc:	e1a0b009 	mov	fp, r9
   33bd0:	e59f8170 	ldr	r8, [pc, #368]	; 33d48 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1e8>
   33bd4:	e0899005 	add	r9, r9, r5
   33bd8:	e046600b 	sub	r6, r6, fp
   33bdc:	e38a5801 	orr	r5, sl, #65536	; 0x10000
   33be0:	ea000001 	b	33bec <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x8c>
   33be4:	e159000b 	cmp	r9, fp
   33be8:	0a00001b 	beq	33c5c <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0xfc>
   33bec:	e3a0cc02 	mov	ip, #512	; 0x200
   33bf0:	e3a00803 	mov	r0, #196608	; 0x30000
   33bf4:	e3a02802 	mov	r2, #131072	; 0x20000
   33bf8:	e4db3001 	ldrb	r3, [fp], #1
   33bfc:	e1a03a03 	lsl	r3, r3, #20
   33c00:	e08b1006 	add	r1, fp, r6
   33c04:	e584301c 	str	r3, [r4, #28]
   33c08:	e31100ff 	tst	r1, #255	; 0xff
   33c0c:	e22336ff 	eor	r3, r3, #267386880	; 0xff00000
   33c10:	e5843028 	str	r3, [r4, #40]	; 0x28
   33c14:	e584a028 	str	sl, [r4, #40]	; 0x28
   33c18:	e584c01c 	str	ip, [r4, #28]
   33c1c:	e5840028 	str	r0, [r4, #40]	; 0x28
   33c20:	e5848028 	str	r8, [r4, #40]	; 0x28
   33c24:	e5848028 	str	r8, [r4, #40]	; 0x28
   33c28:	e5848028 	str	r8, [r4, #40]	; 0x28
   33c2c:	e5848028 	str	r8, [r4, #40]	; 0x28
   33c30:	e5848028 	str	r8, [r4, #40]	; 0x28
   33c34:	e5848028 	str	r8, [r4, #40]	; 0x28
   33c38:	e5848028 	str	r8, [r4, #40]	; 0x28
   33c3c:	e5848028 	str	r8, [r4, #40]	; 0x28
   33c40:	e584201c 	str	r2, [r4, #28]
   33c44:	e584501c 	str	r5, [r4, #28]
   33c48:	1affffe5 	bne	33be4 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x84>
   33c4c:	e1a00007 	mov	r0, r7
   33c50:	ebfffed9 	bl	337bc <BusRawAccess::addrSet(unsigned int)>
   33c54:	e159000b 	cmp	r9, fp
   33c58:	1affffe3 	bne	33bec <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x8c>
   33c5c:	e3a00000 	mov	r0, #0
   33c60:	e59f20d0 	ldr	r2, [pc, #208]	; 33d38 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1d8>
   33c64:	e5923008 	ldr	r3, [r2, #8]
   33c68:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   33c6c:	e5823008 	str	r3, [r2, #8]
   33c70:	e28dd00c 	add	sp, sp, #12
   33c74:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c78:	e3550000 	cmp	r5, #0
   33c7c:	0afffff6 	beq	33c5c <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0xfc>
   33c80:	e59f30c4 	ldr	r3, [pc, #196]	; 33d4c <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1ec>
   33c84:	e35a0001 	cmp	sl, #1
   33c88:	e59f20c0 	ldr	r2, [pc, #192]	; 33d50 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1f0>
   33c8c:	11a02003 	movne	r2, r3
   33c90:	e2455001 	sub	r5, r5, #1
   33c94:	e1a0b004 	mov	fp, r4
   33c98:	e58d2004 	str	r2, [sp, #4]
   33c9c:	e0895005 	add	r5, r9, r5
   33ca0:	e2498001 	sub	r8, r9, #1
   33ca4:	ea000014 	b	33cfc <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x19c>
   33ca8:	e3a01c02 	mov	r1, #512	; 0x200
   33cac:	e3a03802 	mov	r3, #131072	; 0x20000
   33cb0:	e59f208c 	ldr	r2, [pc, #140]	; 33d44 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1e4>
   33cb4:	e58b2028 	str	r2, [fp, #40]	; 0x28
   33cb8:	e3a000fa 	mov	r0, #250	; 0xfa
   33cbc:	e58b101c 	str	r1, [fp, #28]
   33cc0:	e58b3028 	str	r3, [fp, #40]	; 0x28
   33cc4:	eb002363 	bl	3ca58 <lowlev_cycleDelay>
   33cc8:	e59d3004 	ldr	r3, [sp, #4]
   33ccc:	e1a00007 	mov	r0, r7
   33cd0:	e58b301c 	str	r3, [fp, #28]
   33cd4:	ebfff932 	bl	321a4 <BusRawAccess::muxClear()>
   33cd8:	e1a00007 	mov	r0, r7
   33cdc:	ebfffebf 	bl	337e0 <BusRawAccess::addrLowInc()>
   33ce0:	e2841002 	add	r1, r4, #2
   33ce4:	e0811006 	add	r1, r1, r6
   33ce8:	e0411009 	sub	r1, r1, r9
   33cec:	e31100ff 	tst	r1, #255	; 0xff
   33cf0:	0a00000d 	beq	33d2c <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1cc>
   33cf4:	e1550008 	cmp	r5, r8
   33cf8:	0affffd7 	beq	33c5c <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0xfc>
   33cfc:	e1a04008 	mov	r4, r8
   33d00:	e5f83001 	ldrb	r3, [r8, #1]!
   33d04:	e35a0001 	cmp	sl, #1
   33d08:	e1a03a03 	lsl	r3, r3, #20
   33d0c:	e22316ff 	eor	r1, r3, #267386880	; 0xff00000
   33d10:	e58b301c 	str	r3, [fp, #28]
   33d14:	e58b1028 	str	r1, [fp, #40]	; 0x28
   33d18:	1affffe2 	bne	33ca8 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x148>
   33d1c:	e3a01c02 	mov	r1, #512	; 0x200
   33d20:	e3a03802 	mov	r3, #131072	; 0x20000
   33d24:	e59f2014 	ldr	r2, [pc, #20]	; 33d40 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x1e0>
   33d28:	eaffffe1 	b	33cb4 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x154>
   33d2c:	e1a00007 	mov	r0, r7
   33d30:	ebfffea1 	bl	337bc <BusRawAccess::addrSet(unsigned int)>
   33d34:	eaffffee 	b	33cf4 <BusRawAccess::rawBlockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)+0x194>
   33d38:	20200000 	.word	0x20200000
   33d3c:	00249249 	.word	0x00249249
   33d40:	00000e42 	.word	0x00000e42
   33d44:	00000e41 	.word	0x00000e41
   33d48:	00010e00 	.word	0x00010e00
   33d4c:	00020041 	.word	0x00020041
   33d50:	00020042 	.word	0x00020042

00033d54 <HwManager::HwManager(BusControl&)>:
   33d54:	e5801000 	str	r1, [r0]
   33d58:	e12fff1e 	bx	lr

00033d5c <HwManager::getSnippetToSetupHw(unsigned long, unsigned char*, unsigned long)>:
   33d5c:	e3530009 	cmp	r3, #9
   33d60:	8a000001 	bhi	33d6c <HwManager::getSnippetToSetupHw(unsigned long, unsigned char*, unsigned long)+0x10>
   33d64:	e3a00000 	mov	r0, #0
   33d68:	e12fff1e 	bx	lr
   33d6c:	e1a00002 	mov	r0, r2
   33d70:	e92d4010 	push	{r4, lr}
   33d74:	e3a0200a 	mov	r2, #10
   33d78:	e59f1008 	ldr	r1, [pc, #8]	; 33d88 <HwManager::getSnippetToSetupHw(unsigned long, unsigned char*, unsigned long)+0x2c>
   33d7c:	ebffda8d 	bl	2a7b8 <memcpy>
   33d80:	e3a0000a 	mov	r0, #10
   33d84:	e8bd8010 	pop	{r4, pc}
   33d88:	00046660 	.word	0x00046660

00033d8c <ControlAPI::busActionActiveStatic(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE)>:
   33d8c:	e12fff1e 	bx	lr

00033d90 <ControlAPI::handleWaitInterruptStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   33d90:	e12fff1e 	bx	lr

00033d94 <ControlAPI::ControlAPI(CommandHandler&, BusControl&, McManager&)>:
   33d94:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   33d98:	e3e0e000 	mvn	lr, #0
   33d9c:	e5801000 	str	r1, [r0]
   33da0:	e59f1010 	ldr	r1, [pc, #16]	; 33db8 <ControlAPI::ControlAPI(CommandHandler&, BusControl&, McManager&)+0x24>
   33da4:	e1c020f4 	strd	r2, [r0, #4]
   33da8:	e5810000 	str	r0, [r1]
   33dac:	e580e00c 	str	lr, [r0, #12]
   33db0:	e580e010 	str	lr, [r0, #16]
   33db4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   33db8:	0004c678 	.word	0x0004c678

00033dbc <ControlAPI::init()>:
   33dbc:	e92d4010 	push	{r4, lr}
   33dc0:	e590300c 	ldr	r3, [r0, #12]
   33dc4:	e1a04000 	mov	r4, r0
   33dc8:	e3530000 	cmp	r3, #0
   33dcc:	e24dd030 	sub	sp, sp, #48	; 0x30
   33dd0:	ba000004 	blt	33de8 <ControlAPI::init()+0x2c>
   33dd4:	e5943010 	ldr	r3, [r4, #16]
   33dd8:	e3530000 	cmp	r3, #0
   33ddc:	ba00001a 	blt	33e4c <ControlAPI::init()+0x90>
   33de0:	e28dd030 	add	sp, sp, #48	; 0x30
   33de4:	e8bd8010 	pop	{r4, pc}
   33de8:	e3a03000 	mov	r3, #0
   33dec:	e3a02004 	mov	r2, #4
   33df0:	e5900004 	ldr	r0, [r0, #4]
   33df4:	e3a01001 	mov	r1, #1
   33df8:	e2800601 	add	r0, r0, #1048576	; 0x100000
   33dfc:	e58d3028 	str	r3, [sp, #40]	; 0x28
   33e00:	e58d3020 	str	r3, [sp, #32]
   33e04:	e58d301c 	str	r3, [sp, #28]
   33e08:	e58d3018 	str	r3, [sp, #24]
   33e0c:	e58d3014 	str	r3, [sp, #20]
   33e10:	e58d3010 	str	r3, [sp, #16]
   33e14:	e58d300c 	str	r3, [sp, #12]
   33e18:	e58d3008 	str	r3, [sp, #8]
   33e1c:	e58d3004 	str	r3, [sp, #4]
   33e20:	e58d3000 	str	r3, [sp]
   33e24:	e58d2024 	str	r2, [sp, #36]	; 0x24
   33e28:	e59f305c 	ldr	r3, [pc, #92]	; 33e8c <ControlAPI::init()+0xd0>
   33e2c:	e59f205c 	ldr	r2, [pc, #92]	; 33e90 <ControlAPI::init()+0xd4>
   33e30:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   33e34:	e2800f8f 	add	r0, r0, #572	; 0x23c
   33e38:	ebfff5e2 	bl	315c8 <BusSocketManager::add(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>
   33e3c:	e5943010 	ldr	r3, [r4, #16]
   33e40:	e584000c 	str	r0, [r4, #12]
   33e44:	e3530000 	cmp	r3, #0
   33e48:	aaffffe4 	bge	33de0 <ControlAPI::init()+0x24>
   33e4c:	e3a02000 	mov	r2, #0
   33e50:	e58d2004 	str	r2, [sp, #4]
   33e54:	e58d2000 	str	r2, [sp]
   33e58:	e1a01004 	mov	r1, r4
   33e5c:	e3a02001 	mov	r2, #1
   33e60:	e59f302c 	ldr	r3, [pc, #44]	; 33e94 <ControlAPI::init()+0xd8>
   33e64:	e5940000 	ldr	r0, [r4]
   33e68:	ebffef0e 	bl	2faa8 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   33e6c:	e3a01004 	mov	r1, #4
   33e70:	e1a03000 	mov	r3, r0
   33e74:	e5840010 	str	r0, [r4, #16]
   33e78:	e59f2018 	ldr	r2, [pc, #24]	; 33e98 <ControlAPI::init()+0xdc>
   33e7c:	e59f0018 	ldr	r0, [pc, #24]	; 33e9c <ControlAPI::init()+0xe0>
   33e80:	e28dd030 	add	sp, sp, #48	; 0x30
   33e84:	e8bd4010 	pop	{r4, lr}
   33e88:	eaffebc0 	b	2ed90 <LogWrite>
   33e8c:	00033d8c 	.word	0x00033d8c
   33e90:	00033d90 	.word	0x00033d90
   33e94:	000351d8 	.word	0x000351d8
   33e98:	00044e6c 	.word	0x00044e6c
   33e9c:	000453b4 	.word	0x000453b4

00033ea0 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>:
   33ea0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33ea4:	e24ddf4f 	sub	sp, sp, #316	; 0x13c
   33ea8:	e1a07003 	mov	r7, r3
   33eac:	e1a08001 	mov	r8, r1
   33eb0:	e1a06002 	mov	r6, r2
   33eb4:	e1a01003 	mov	r1, r3
   33eb8:	e59f01b0 	ldr	r0, [pc, #432]	; 34070 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1d0>
   33ebc:	e3a030c8 	mov	r3, #200	; 0xc8
   33ec0:	e28d206c 	add	r2, sp, #108	; 0x6c
   33ec4:	e5dd916c 	ldrb	r9, [sp, #364]	; 0x16c
   33ec8:	ebffe892 	bl	2e118 <jsonGetValueForKey>
   33ecc:	e2505000 	subs	r5, r0, #0
   33ed0:	0a00000f 	beq	33f14 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x74>
   33ed4:	e3760001 	cmn	r6, #1
   33ed8:	e28d406c 	add	r4, sp, #108	; 0x6c
   33edc:	ba000045 	blt	33ff8 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x158>
   33ee0:	e3a0a000 	mov	sl, #0
   33ee4:	e59fb188 	ldr	fp, [pc, #392]	; 34074 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1d4>
   33ee8:	ea000004 	b	33f00 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x60>
   33eec:	e156000a 	cmp	r6, sl
   33ef0:	e2804001 	add	r4, r0, #1
   33ef4:	e28a3001 	add	r3, sl, #1
   33ef8:	ba00003e 	blt	33ff8 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x158>
   33efc:	e1a0a003 	mov	sl, r3
   33f00:	e1a00004 	mov	r0, r4
   33f04:	e1a0100b 	mov	r1, fp
   33f08:	ebffd907 	bl	2a32c <strstr>
   33f0c:	e3500000 	cmp	r0, #0
   33f10:	1afffff5 	bne	33eec <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x4c>
   33f14:	e3a02032 	mov	r2, #50	; 0x32
   33f18:	e1a01008 	mov	r1, r8
   33f1c:	e28d0038 	add	r0, sp, #56	; 0x38
   33f20:	ebffe7cf 	bl	2de64 <strlcpy>
   33f24:	e3a02032 	mov	r2, #50	; 0x32
   33f28:	e59f1148 	ldr	r1, [pc, #328]	; 34078 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1d8>
   33f2c:	e28d0038 	add	r0, sp, #56	; 0x38
   33f30:	ebffe7e7 	bl	2ded4 <strlcat>
   33f34:	e1a00008 	mov	r0, r8
   33f38:	e3a03032 	mov	r3, #50	; 0x32
   33f3c:	e1a01007 	mov	r1, r7
   33f40:	e28d2004 	add	r2, sp, #4
   33f44:	ebffe873 	bl	2e118 <jsonGetValueForKey>
   33f48:	e2505000 	subs	r5, r0, #0
   33f4c:	0a000012 	beq	33f9c <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xfc>
   33f50:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   33f54:	e3530000 	cmp	r3, #0
   33f58:	0a000003 	beq	33f6c <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xcc>
   33f5c:	e1a00003 	mov	r0, r3
   33f60:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   33f64:	e28d1004 	add	r1, sp, #4
   33f68:	ebffe7bd 	bl	2de64 <strlcpy>
   33f6c:	e3590000 	cmp	r9, #0
   33f70:	0a000035 	beq	3404c <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1ac>
   33f74:	e28d0004 	add	r0, sp, #4
   33f78:	e3a0200a 	mov	r2, #10
   33f7c:	e3a01000 	mov	r1, #0
   33f80:	ebffd939 	bl	2a46c <strtoul>
   33f84:	e1a05009 	mov	r5, r9
   33f88:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   33f8c:	e5830000 	str	r0, [r3]
   33f90:	e1a00005 	mov	r0, r5
   33f94:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   33f98:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33f9c:	e1a01007 	mov	r1, r7
   33fa0:	e3a03032 	mov	r3, #50	; 0x32
   33fa4:	e28d0038 	add	r0, sp, #56	; 0x38
   33fa8:	e28d2004 	add	r2, sp, #4
   33fac:	ebffe859 	bl	2e118 <jsonGetValueForKey>
   33fb0:	e2505000 	subs	r5, r0, #0
   33fb4:	0afffff5 	beq	33f90 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xf0>
   33fb8:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   33fbc:	e3530000 	cmp	r3, #0
   33fc0:	0a000003 	beq	33fd4 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x134>
   33fc4:	e1a00003 	mov	r0, r3
   33fc8:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   33fcc:	e28d1004 	add	r1, sp, #4
   33fd0:	ebffe7a3 	bl	2de64 <strlcpy>
   33fd4:	e3a0200a 	mov	r2, #10
   33fd8:	e3a01000 	mov	r1, #0
   33fdc:	e28d0004 	add	r0, sp, #4
   33fe0:	ebffd921 	bl	2a46c <strtoul>
   33fe4:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   33fe8:	e5830000 	str	r0, [r3]
   33fec:	e1a00005 	mov	r0, r5
   33ff0:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   33ff4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33ff8:	e1a00004 	mov	r0, r4
   33ffc:	ebffd7f2 	bl	29fcc <strlen>
   34000:	e3500000 	cmp	r0, #0
   34004:	0affffc2 	beq	33f14 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x74>
   34008:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   3400c:	e3530000 	cmp	r3, #0
   34010:	0a000003 	beq	34024 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x184>
   34014:	e1a00003 	mov	r0, r3
   34018:	e1a01004 	mov	r1, r4
   3401c:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   34020:	ebffe78f 	bl	2de64 <strlcpy>
   34024:	e3590000 	cmp	r9, #0
   34028:	11a00004 	movne	r0, r4
   3402c:	1affffd1 	bne	33f78 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xd8>
   34030:	e1a01009 	mov	r1, r9
   34034:	e1a00004 	mov	r0, r4
   34038:	e3a02010 	mov	r2, #16
   3403c:	ebffd90a 	bl	2a46c <strtoul>
   34040:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   34044:	e5830000 	str	r0, [r3]
   34048:	eaffffd0 	b	33f90 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xf0>
   3404c:	e1a01009 	mov	r1, r9
   34050:	e3a02010 	mov	r2, #16
   34054:	e28d0004 	add	r0, sp, #4
   34058:	ebffd903 	bl	2a46c <strtoul>
   3405c:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   34060:	e5830000 	str	r0, [r3]
   34064:	e1a00005 	mov	r0, r5
   34068:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   3406c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34070:	00044e84 	.word	0x00044e84
   34074:	00045424 	.word	0x00045424
   34078:	00043c18 	.word	0x00043c18

0003407c <ControlAPI::busLineHandler(char const*)>:
   3407c:	e3a00001 	mov	r0, #1
   34080:	e12fff1e 	bx	lr

00034084 <ControlAPI::muxLineHandler(char const*)>:
   34084:	e3a00001 	mov	r0, #1
   34088:	e12fff1e 	bx	lr

0003408c <ControlAPI::busLinesRead(char*, int)>:
   3408c:	e12fff1e 	bx	lr

00034090 <ControlAPI::busActionActive(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE)>:
   34090:	e12fff1e 	bx	lr

00034094 <ControlAPI::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   34094:	e12fff1e 	bx	lr

00034098 <ControlAPI::service()>:
   34098:	e12fff1e 	bx	lr

0003409c <ControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>:
   3409c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   340a0:	e1a05000 	mov	r5, r0
   340a4:	e24dd00c 	sub	sp, sp, #12
   340a8:	e5900004 	ldr	r0, [r0, #4]
   340ac:	e1a07002 	mov	r7, r2
   340b0:	e1a08003 	mov	r8, r3
   340b4:	e1a06001 	mov	r6, r1
   340b8:	e5dd9030 	ldrb	r9, [sp, #48]	; 0x30
   340bc:	e5dda034 	ldrb	sl, [sp, #52]	; 0x34
   340c0:	e5ddb038 	ldrb	fp, [sp, #56]	; 0x38
   340c4:	ebfff407 	bl	310e8 <BusControl::rawAccessStart()>
   340c8:	e3a01000 	mov	r1, #0
   340cc:	e3a00008 	mov	r0, #8
   340d0:	eb002235 	bl	3c9ac <digitalWrite>
   340d4:	e3a01000 	mov	r1, #0
   340d8:	e3a00008 	mov	r0, #8
   340dc:	eb002232 	bl	3c9ac <digitalWrite>
   340e0:	e3a01000 	mov	r1, #0
   340e4:	e3a00008 	mov	r0, #8
   340e8:	eb00222f 	bl	3c9ac <digitalWrite>
   340ec:	e3a01000 	mov	r1, #0
   340f0:	e3a00008 	mov	r0, #8
   340f4:	eb00222c 	bl	3c9ac <digitalWrite>
   340f8:	e3a01001 	mov	r1, #1
   340fc:	e3a00008 	mov	r0, #8
   34100:	eb002229 	bl	3c9ac <digitalWrite>
   34104:	e3a01001 	mov	r1, #1
   34108:	e3a00008 	mov	r0, #8
   3410c:	eb002226 	bl	3c9ac <digitalWrite>
   34110:	e3a01001 	mov	r1, #1
   34114:	e3a00008 	mov	r0, #8
   34118:	eb002223 	bl	3c9ac <digitalWrite>
   3411c:	e3a01001 	mov	r1, #1
   34120:	e3a00008 	mov	r0, #8
   34124:	eb002220 	bl	3c9ac <digitalWrite>
   34128:	e5953004 	ldr	r3, [r5, #4]
   3412c:	e59f01bc 	ldr	r0, [pc, #444]	; 342f0 <ControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x254>
   34130:	e3a01000 	mov	r1, #0
   34134:	e0830000 	add	r0, r3, r0
   34138:	ebfff7f2 	bl	32108 <BusRawAccess::busRequestAndTake(unsigned long)>
   3413c:	e2504000 	subs	r4, r0, #0
   34140:	1a000065 	bne	342dc <ControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x240>
   34144:	e1a01004 	mov	r1, r4
   34148:	e3a00008 	mov	r0, #8
   3414c:	eb002216 	bl	3c9ac <digitalWrite>
   34150:	e1a01004 	mov	r1, r4
   34154:	e3a00008 	mov	r0, #8
   34158:	eb002213 	bl	3c9ac <digitalWrite>
   3415c:	e1a01004 	mov	r1, r4
   34160:	e3a00008 	mov	r0, #8
   34164:	eb002210 	bl	3c9ac <digitalWrite>
   34168:	e1a01004 	mov	r1, r4
   3416c:	e3a00008 	mov	r0, #8
   34170:	eb00220d 	bl	3c9ac <digitalWrite>
   34174:	e3a01001 	mov	r1, #1
   34178:	e3a00008 	mov	r0, #8
   3417c:	eb00220a 	bl	3c9ac <digitalWrite>
   34180:	e3a01001 	mov	r1, #1
   34184:	e3a00008 	mov	r0, #8
   34188:	eb002207 	bl	3c9ac <digitalWrite>
   3418c:	e3a01001 	mov	r1, #1
   34190:	e3a00008 	mov	r0, #8
   34194:	eb002204 	bl	3c9ac <digitalWrite>
   34198:	e3a01001 	mov	r1, #1
   3419c:	e3a00008 	mov	r0, #8
   341a0:	eb002201 	bl	3c9ac <digitalWrite>
   341a4:	e35b0000 	cmp	fp, #0
   341a8:	0a000007 	beq	341cc <ControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x130>
   341ac:	e5953004 	ldr	r3, [r5, #4]
   341b0:	e59f013c 	ldr	r0, [pc, #316]	; 342f4 <ControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x258>
   341b4:	e1a02007 	mov	r2, r7
   341b8:	e0830000 	add	r0, r3, r0
   341bc:	e1a01006 	mov	r1, r6
   341c0:	e1a03008 	mov	r3, r8
   341c4:	e58d9000 	str	r9, [sp]
   341c8:	ebfffd0a 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   341cc:	e35a0000 	cmp	sl, #0
   341d0:	1a000038 	bne	342b8 <ControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x21c>
   341d4:	e3a01000 	mov	r1, #0
   341d8:	e3a00008 	mov	r0, #8
   341dc:	eb0021f2 	bl	3c9ac <digitalWrite>
   341e0:	e3a01000 	mov	r1, #0
   341e4:	e3a00008 	mov	r0, #8
   341e8:	eb0021ef 	bl	3c9ac <digitalWrite>
   341ec:	e3a01000 	mov	r1, #0
   341f0:	e3a00008 	mov	r0, #8
   341f4:	eb0021ec 	bl	3c9ac <digitalWrite>
   341f8:	e3a01000 	mov	r1, #0
   341fc:	e3a00008 	mov	r0, #8
   34200:	eb0021e9 	bl	3c9ac <digitalWrite>
   34204:	e3a01001 	mov	r1, #1
   34208:	e3a00008 	mov	r0, #8
   3420c:	eb0021e6 	bl	3c9ac <digitalWrite>
   34210:	e3a01001 	mov	r1, #1
   34214:	e3a00008 	mov	r0, #8
   34218:	eb0021e3 	bl	3c9ac <digitalWrite>
   3421c:	e3a01001 	mov	r1, #1
   34220:	e3a00008 	mov	r0, #8
   34224:	eb0021e0 	bl	3c9ac <digitalWrite>
   34228:	e3a01001 	mov	r1, #1
   3422c:	e3a00008 	mov	r0, #8
   34230:	eb0021dd 	bl	3c9ac <digitalWrite>
   34234:	e5953004 	ldr	r3, [r5, #4]
   34238:	e59f00b0 	ldr	r0, [pc, #176]	; 342f0 <ControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x254>
   3423c:	e0830000 	add	r0, r3, r0
   34240:	ebfff74c 	bl	31f78 <BusRawAccess::busReqRelease()>
   34244:	e5950004 	ldr	r0, [r5, #4]
   34248:	ebfff3b1 	bl	31114 <BusControl::rawAccessEnd()>
   3424c:	e3a01000 	mov	r1, #0
   34250:	e3a00008 	mov	r0, #8
   34254:	eb0021d4 	bl	3c9ac <digitalWrite>
   34258:	e3a01000 	mov	r1, #0
   3425c:	e3a00008 	mov	r0, #8
   34260:	eb0021d1 	bl	3c9ac <digitalWrite>
   34264:	e3a01000 	mov	r1, #0
   34268:	e3a00008 	mov	r0, #8
   3426c:	eb0021ce 	bl	3c9ac <digitalWrite>
   34270:	e3a01000 	mov	r1, #0
   34274:	e3a00008 	mov	r0, #8
   34278:	eb0021cb 	bl	3c9ac <digitalWrite>
   3427c:	e3a01001 	mov	r1, #1
   34280:	e3a00008 	mov	r0, #8
   34284:	eb0021c8 	bl	3c9ac <digitalWrite>
   34288:	e3a01001 	mov	r1, #1
   3428c:	e3a00008 	mov	r0, #8
   34290:	eb0021c5 	bl	3c9ac <digitalWrite>
   34294:	e3a01001 	mov	r1, #1
   34298:	e3a00008 	mov	r0, #8
   3429c:	eb0021c2 	bl	3c9ac <digitalWrite>
   342a0:	e3a01001 	mov	r1, #1
   342a4:	e3a00008 	mov	r0, #8
   342a8:	eb0021bf 	bl	3c9ac <digitalWrite>
   342ac:	e1a00004 	mov	r0, r4
   342b0:	e28dd00c 	add	sp, sp, #12
   342b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   342b8:	e595c004 	ldr	ip, [r5, #4]
   342bc:	e59f0030 	ldr	r0, [pc, #48]	; 342f4 <ControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x258>
   342c0:	e1a03008 	mov	r3, r8
   342c4:	e1a02007 	mov	r2, r7
   342c8:	e1a01006 	mov	r1, r6
   342cc:	e58d9000 	str	r9, [sp]
   342d0:	e08c0000 	add	r0, ip, r0
   342d4:	ebfffcbd 	bl	335d0 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   342d8:	eaffffbd 	b	341d4 <ControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x138>
   342dc:	e5950004 	ldr	r0, [r5, #4]
   342e0:	ebfff38b 	bl	31114 <BusControl::rawAccessEnd()>
   342e4:	e1a00004 	mov	r0, r4
   342e8:	e28dd00c 	add	sp, sp, #12
   342ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   342f0:	00100408 	.word	0x00100408
   342f4:	00100404 	.word	0x00100404

000342f8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   342f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   342fc:	ed2d8b02 	vpush	{d8}
   34300:	e28db028 	add	fp, sp, #40	; 0x28
   34304:	e24ddd33 	sub	sp, sp, #3264	; 0xcc0
   34308:	e24dd00c 	sub	sp, sp, #12
   3430c:	e1a08002 	mov	r8, r2
   34310:	e24b2d33 	sub	r2, fp, #3264	; 0xcc0
   34314:	e1a06000 	mov	r6, r0
   34318:	e1a07003 	mov	r7, r3
   3431c:	e59f0d60 	ldr	r0, [pc, #3424]	; 35084 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd8c>
   34320:	e3a03032 	mov	r3, #50	; 0x32
   34324:	e2422004 	sub	r2, r2, #4
   34328:	e1a05001 	mov	r5, r1
   3432c:	ebffe779 	bl	2e118 <jsonGetValueForKey>
   34330:	e2504000 	subs	r4, r0, #0
   34334:	0a0000a9 	beq	345e0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e8>
   34338:	e59f9d48 	ldr	r9, [pc, #3400]	; 35088 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd90>
   3433c:	e24b3d33 	sub	r3, fp, #3264	; 0xcc0
   34340:	e1a00009 	mov	r0, r9
   34344:	e3a01004 	mov	r1, #4
   34348:	e59f2d3c 	ldr	r2, [pc, #3388]	; 3508c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd94>
   3434c:	e2433004 	sub	r3, r3, #4
   34350:	e58d5000 	str	r5, [sp]
   34354:	ebffea8d 	bl	2ed90 <LogWrite>
   34358:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   3435c:	e59f1d2c 	ldr	r1, [pc, #3372]	; 35090 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd98>
   34360:	e2400004 	sub	r0, r0, #4
   34364:	ebffd73f 	bl	2a068 <strcasecmp>
   34368:	e3500000 	cmp	r0, #0
   3436c:	0a000084 	beq	34584 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x28c>
   34370:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34374:	e59f1d18 	ldr	r1, [pc, #3352]	; 35094 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd9c>
   34378:	e2400004 	sub	r0, r0, #4
   3437c:	ebffd739 	bl	2a068 <strcasecmp>
   34380:	e2501000 	subs	r1, r0, #0
   34384:	05960004 	ldreq	r0, [r6, #4]
   34388:	0a00008a 	beq	345b8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2c0>
   3438c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34390:	e59f1d00 	ldr	r1, [pc, #3328]	; 35098 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xda0>
   34394:	e2400004 	sub	r0, r0, #4
   34398:	ebffd732 	bl	2a068 <strcasecmp>
   3439c:	e3500000 	cmp	r0, #0
   343a0:	0a000082 	beq	345b0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2b8>
   343a4:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   343a8:	e59f1cec 	ldr	r1, [pc, #3308]	; 3509c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xda4>
   343ac:	e2400004 	sub	r0, r0, #4
   343b0:	ebffd72c 	bl	2a068 <strcasecmp>
   343b4:	e3500000 	cmp	r0, #0
   343b8:	0a00007c 	beq	345b0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2b8>
   343bc:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   343c0:	e59f1cd8 	ldr	r1, [pc, #3288]	; 350a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xda8>
   343c4:	e2400004 	sub	r0, r0, #4
   343c8:	ebffd726 	bl	2a068 <strcasecmp>
   343cc:	e3500000 	cmp	r0, #0
   343d0:	0a00009d 	beq	3464c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x354>
   343d4:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   343d8:	e59f1cc4 	ldr	r1, [pc, #3268]	; 350a4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdac>
   343dc:	e2400004 	sub	r0, r0, #4
   343e0:	ebffd720 	bl	2a068 <strcasecmp>
   343e4:	e3500000 	cmp	r0, #0
   343e8:	0a000085 	beq	34604 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30c>
   343ec:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   343f0:	e59f1cb0 	ldr	r1, [pc, #3248]	; 350a8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdb0>
   343f4:	e2400004 	sub	r0, r0, #4
   343f8:	ebffd71a 	bl	2a068 <strcasecmp>
   343fc:	e3500000 	cmp	r0, #0
   34400:	0a00007f 	beq	34604 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30c>
   34404:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34408:	e59f1c9c 	ldr	r1, [pc, #3228]	; 350ac <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdb4>
   3440c:	e2400004 	sub	r0, r0, #4
   34410:	ebffd714 	bl	2a068 <strcasecmp>
   34414:	e3500000 	cmp	r0, #0
   34418:	0a000096 	beq	34678 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x380>
   3441c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34420:	e59f1c88 	ldr	r1, [pc, #3208]	; 350b0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdb8>
   34424:	e2400004 	sub	r0, r0, #4
   34428:	ebffd70e 	bl	2a068 <strcasecmp>
   3442c:	e3500000 	cmp	r0, #0
   34430:	0a00005a 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34434:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34438:	e59f1c74 	ldr	r1, [pc, #3188]	; 350b4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdbc>
   3443c:	e2400004 	sub	r0, r0, #4
   34440:	ebffd708 	bl	2a068 <strcasecmp>
   34444:	e2501000 	subs	r1, r0, #0
   34448:	0a00009c 	beq	346c0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x3c8>
   3444c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34450:	e59f1c60 	ldr	r1, [pc, #3168]	; 350b8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdc0>
   34454:	e2400004 	sub	r0, r0, #4
   34458:	ebffd702 	bl	2a068 <strcasecmp>
   3445c:	e250a000 	subs	sl, r0, #0
   34460:	1a0000b2 	bne	34730 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x438>
   34464:	e59f2c50 	ldr	r2, [pc, #3152]	; 350bc <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdc4>
   34468:	e1a03005 	mov	r3, r5
   3446c:	e5921034 	ldr	r1, [r2, #52]	; 0x34
   34470:	e59f0c10 	ldr	r0, [pc, #3088]	; 35088 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd90>
   34474:	e59f2c44 	ldr	r2, [pc, #3140]	; 350c0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdc8>
   34478:	e58d1000 	str	r1, [sp]
   3447c:	e3a01004 	mov	r1, #4
   34480:	ebffea42 	bl	2ed90 <LogWrite>
   34484:	e24b2ecd 	sub	r2, fp, #3280	; 0xcd0
   34488:	e50bacd0 	str	sl, [fp, #-3280]	; 0xfffff330
   3448c:	e50baccc 	str	sl, [fp, #-3276]	; 0xfffff334
   34490:	e1a03005 	mov	r3, r5
   34494:	e88d0404 	stm	sp, {r2, sl}
   34498:	e1a00006 	mov	r0, r6
   3449c:	e3a02001 	mov	r2, #1
   344a0:	e59f1c1c 	ldr	r1, [pc, #3100]	; 350c4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdcc>
   344a4:	e58da00c 	str	sl, [sp, #12]
   344a8:	e58da008 	str	sl, [sp, #8]
   344ac:	ebfffe7b 	bl	33ea0 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   344b0:	e3500000 	cmp	r0, #0
   344b4:	0a000098 	beq	3471c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x424>
   344b8:	e24b3d33 	sub	r3, fp, #3264	; 0xcc0
   344bc:	e243300c 	sub	r3, r3, #12
   344c0:	e58d3000 	str	r3, [sp]
   344c4:	e3a02002 	mov	r2, #2
   344c8:	e1a03005 	mov	r3, r5
   344cc:	e1a00006 	mov	r0, r6
   344d0:	e59f1bf0 	ldr	r1, [pc, #3056]	; 350c8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdd0>
   344d4:	e58da00c 	str	sl, [sp, #12]
   344d8:	e58da008 	str	sl, [sp, #8]
   344dc:	e58da004 	str	sl, [sp, #4]
   344e0:	ebfffe6e 	bl	33ea0 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   344e4:	e3500000 	cmp	r0, #0
   344e8:	0a00008b 	beq	3471c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x424>
   344ec:	e24b3ecb 	sub	r3, fp, #3248	; 0xcb0
   344f0:	e243300c 	sub	r3, r3, #12
   344f4:	e243200c 	sub	r2, r3, #12
   344f8:	e50bacc8 	str	sl, [fp, #-3272]	; 0xfffff338
   344fc:	e1a03005 	mov	r3, r5
   34500:	e58d2000 	str	r2, [sp]
   34504:	e1a00006 	mov	r0, r6
   34508:	e3a02003 	mov	r2, #3
   3450c:	e59f1bb8 	ldr	r1, [pc, #3000]	; 350cc <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdd4>
   34510:	e58da00c 	str	sl, [sp, #12]
   34514:	e58da008 	str	sl, [sp, #8]
   34518:	e58da004 	str	sl, [sp, #4]
   3451c:	ebfffe5f 	bl	33ea0 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   34520:	e3500000 	cmp	r0, #0
   34524:	0a00007c 	beq	3471c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x424>
   34528:	e51b3ccc 	ldr	r3, [fp, #-3276]	; 0xfffff334
   3452c:	e2432001 	sub	r2, r3, #1
   34530:	e3520b01 	cmp	r2, #1024	; 0x400
   34534:	2a0000b7 	bcs	34818 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x520>
   34538:	e3a02001 	mov	r2, #1
   3453c:	e58da008 	str	sl, [sp, #8]
   34540:	e58d2004 	str	r2, [sp, #4]
   34544:	e58da000 	str	sl, [sp]
   34548:	e24b5ec9 	sub	r5, fp, #3216	; 0xc90
   3454c:	e1a00006 	mov	r0, r6
   34550:	e1a02005 	mov	r2, r5
   34554:	e51b1cd0 	ldr	r1, [fp, #-3280]	; 0xfffff330
   34558:	ebfffecf 	bl	3409c <ControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   3455c:	e3500000 	cmp	r0, #0
   34560:	0a0001c7 	beq	34c84 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x98c>
   34564:	e3500003 	cmp	r0, #3
   34568:	90890100 	addls	r0, r9, r0, lsl #2
   3456c:	9590300c 	ldrls	r3, [r0, #12]
   34570:	859f3b58 	ldrhi	r3, [pc, #2904]	; 350d0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdd8>
   34574:	e59f2b58 	ldr	r2, [pc, #2904]	; 350d4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xddc>
   34578:	e1cb00d4 	ldrd	r0, [fp, #4]
   3457c:	ebffe6a4 	bl	2e014 <snprintf>
   34580:	ea000006 	b	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34584:	e5960004 	ldr	r0, [r6, #4]
   34588:	e2800018 	add	r0, r0, #24
   3458c:	ebfffb8a 	bl	333bc <TargetProgrammer::clear()>
   34590:	e59b2008 	ldr	r2, [fp, #8]
   34594:	e59f1b3c 	ldr	r1, [pc, #2876]	; 350d8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xde0>
   34598:	e59b0004 	ldr	r0, [fp, #4]
   3459c:	ebffe630 	bl	2de64 <strlcpy>
   345a0:	e1a00004 	mov	r0, r4
   345a4:	e24bd028 	sub	sp, fp, #40	; 0x28
   345a8:	ecbd8b02 	vpop	{d8}
   345ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   345b0:	e3a01001 	mov	r1, #1
   345b4:	e5960004 	ldr	r0, [r6, #4]
   345b8:	e2800014 	add	r0, r0, #20
   345bc:	ebfff80d 	bl	325f8 <TargetControl::programmingStart(bool)>
   345c0:	e59b2008 	ldr	r2, [fp, #8]
   345c4:	e59f1b0c 	ldr	r1, [pc, #2828]	; 350d8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xde0>
   345c8:	e59b0004 	ldr	r0, [fp, #4]
   345cc:	ebffe624 	bl	2de64 <strlcpy>
   345d0:	e1a00004 	mov	r0, r4
   345d4:	e24bd028 	sub	sp, fp, #40	; 0x28
   345d8:	ecbd8b02 	vpop	{d8}
   345dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   345e0:	e1a03005 	mov	r3, r5
   345e4:	e3a01002 	mov	r1, #2
   345e8:	e59f2aec 	ldr	r2, [pc, #2796]	; 350dc <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xde4>
   345ec:	e59f0a94 	ldr	r0, [pc, #2708]	; 35088 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd90>
   345f0:	ebffe9e6 	bl	2ed90 <LogWrite>
   345f4:	e1a00004 	mov	r0, r4
   345f8:	e24bd028 	sub	sp, fp, #40	; 0x28
   345fc:	ecbd8b02 	vpop	{d8}
   34600:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34604:	e1a03007 	mov	r3, r7
   34608:	e3a01004 	mov	r1, #4
   3460c:	e59f2acc 	ldr	r2, [pc, #2764]	; 350e0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xde8>
   34610:	e59f0a70 	ldr	r0, [pc, #2672]	; 35088 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd90>
   34614:	e58d5000 	str	r5, [sp]
   34618:	ebffe9dc 	bl	2ed90 <LogWrite>
   3461c:	e1a03007 	mov	r3, r7
   34620:	e1a02008 	mov	r2, r8
   34624:	e1a01005 	mov	r1, r5
   34628:	e5960008 	ldr	r0, [r6, #8]
   3462c:	eb00057f 	bl	35c30 <McManager::targetFileHandler(char const*, unsigned char const*, unsigned int)>
   34630:	e3500000 	cmp	r0, #0
   34634:	1affffe1 	bne	345c0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2c8>
   34638:	e59b2008 	ldr	r2, [fp, #8]
   3463c:	e59f1aa0 	ldr	r1, [pc, #2720]	; 350e4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdec>
   34640:	e59b0004 	ldr	r0, [fp, #4]
   34644:	ebffe606 	bl	2de64 <strlcpy>
   34648:	eaffffd4 	b	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   3464c:	e5960004 	ldr	r0, [r6, #4]
   34650:	e596100c 	ldr	r1, [r6, #12]
   34654:	e2800601 	add	r0, r0, #1048576	; 0x100000
   34658:	e3e02000 	mvn	r2, #0
   3465c:	e2800f8f 	add	r0, r0, #572	; 0x23c
   34660:	ebfff436 	bl	31740 <BusSocketManager::reqReset(unsigned long, int)>
   34664:	e59b2008 	ldr	r2, [fp, #8]
   34668:	e59f1a68 	ldr	r1, [pc, #2664]	; 350d8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xde0>
   3466c:	e59b0004 	ldr	r0, [fp, #4]
   34670:	ebffe5fb 	bl	2de64 <strlcpy>
   34674:	eaffffc9 	b	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34678:	e59f3a68 	ldr	r3, [pc, #2664]	; 350e8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdf0>
   3467c:	e2872001 	add	r2, r7, #1
   34680:	e1520003 	cmp	r2, r3
   34684:	21a02003 	movcs	r2, r3
   34688:	e1a01008 	mov	r1, r8
   3468c:	e59f0a58 	ldr	r0, [pc, #2648]	; 350ec <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdf4>
   34690:	ebffe5f3 	bl	2de64 <strlcpy>
   34694:	e1a00009 	mov	r0, r9
   34698:	e3a01004 	mov	r1, #4
   3469c:	e59f3a48 	ldr	r3, [pc, #2632]	; 350ec <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdf4>
   346a0:	e59f2a48 	ldr	r2, [pc, #2632]	; 350f0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdf8>
   346a4:	ebffe9b9 	bl	2ed90 <LogWrite>
   346a8:	e5960008 	ldr	r0, [r6, #8]
   346ac:	e59f1a38 	ldr	r1, [pc, #2616]	; 350ec <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdf4>
   346b0:	eb0003ce 	bl	355f0 <McManager::setupMachine(char const*)>
   346b4:	e3500000 	cmp	r0, #0
   346b8:	1affffc0 	bne	345c0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2c8>
   346bc:	eaffffdd 	b	34638 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x340>
   346c0:	e3a02006 	mov	r2, #6
   346c4:	e24b0e89 	sub	r0, fp, #2192	; 0x890
   346c8:	e50b1c90 	str	r1, [fp, #-3216]	; 0xfffff370
   346cc:	ebffd5f0 	bl	29e94 <memset>
   346d0:	e24b1ec9 	sub	r1, fp, #3216	; 0xc90
   346d4:	e1a00008 	mov	r0, r8
   346d8:	e3a0200a 	mov	r2, #10
   346dc:	ebffd762 	bl	2a46c <strtoul>
   346e0:	e24b1ec9 	sub	r1, fp, #3216	; 0xc90
   346e4:	e3a0200a 	mov	r2, #10
   346e8:	e51b0c90 	ldr	r0, [fp, #-3216]	; 0xfffff370
   346ec:	ebffd75e 	bl	2a46c <strtoul>
   346f0:	e1a03000 	mov	r3, r0
   346f4:	e24b1ec9 	sub	r1, fp, #3216	; 0xc90
   346f8:	e3a0200a 	mov	r2, #10
   346fc:	e51b0c90 	ldr	r0, [fp, #-3216]	; 0xfffff370
   34700:	e54b3890 	strb	r3, [fp, #-2192]	; 0xfffff770
   34704:	ebffd758 	bl	2a46c <strtoul>
   34708:	e24b2e89 	sub	r2, fp, #2192	; 0x890
   3470c:	e6ef1070 	uxtb	r1, r0
   34710:	e5960008 	ldr	r0, [r6, #8]
   34714:	eb00053c 	bl	35c0c <McManager::keyHandler(unsigned char, unsigned char const*)>
   34718:	eaffffa0 	b	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   3471c:	e59b2008 	ldr	r2, [fp, #8]
   34720:	e59f19cc 	ldr	r1, [pc, #2508]	; 350f4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdfc>
   34724:	e59b0004 	ldr	r0, [fp, #4]
   34728:	ebffe5cd 	bl	2de64 <strlcpy>
   3472c:	eaffff9b 	b	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34730:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34734:	e59f19bc 	ldr	r1, [pc, #2492]	; 350f8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe00>
   34738:	e2400004 	sub	r0, r0, #4
   3473c:	ebffd649 	bl	2a068 <strcasecmp>
   34740:	e250a000 	subs	sl, r0, #0
   34744:	1a000038 	bne	3482c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x534>
   34748:	e1a03005 	mov	r3, r5
   3474c:	e3a01004 	mov	r1, #4
   34750:	e59f29a4 	ldr	r2, [pc, #2468]	; 350fc <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe04>
   34754:	e59f092c 	ldr	r0, [pc, #2348]	; 35088 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd90>
   34758:	ebffe98c 	bl	2ed90 <LogWrite>
   3475c:	e24b3ecb 	sub	r3, fp, #3248	; 0xcb0
   34760:	e243300c 	sub	r3, r3, #12
   34764:	e243200c 	sub	r2, r3, #12
   34768:	e50bacc8 	str	sl, [fp, #-3272]	; 0xfffff338
   3476c:	e50bac90 	str	sl, [fp, #-3216]	; 0xfffff370
   34770:	e50ba890 	str	sl, [fp, #-2192]	; 0xfffff770
   34774:	e1a03005 	mov	r3, r5
   34778:	e58d2000 	str	r2, [sp]
   3477c:	e1a00006 	mov	r0, r6
   34780:	e3a02001 	mov	r2, #1
   34784:	e59f1938 	ldr	r1, [pc, #2360]	; 350c4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdcc>
   34788:	e58da00c 	str	sl, [sp, #12]
   3478c:	e58da008 	str	sl, [sp, #8]
   34790:	e58da004 	str	sl, [sp, #4]
   34794:	ebfffdc1 	bl	33ea0 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   34798:	e3500000 	cmp	r0, #0
   3479c:	0affffde 	beq	3471c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x424>
   347a0:	e24b3ec9 	sub	r3, fp, #3216	; 0xc90
   347a4:	e88d0408 	stm	sp, {r3, sl}
   347a8:	e3a02002 	mov	r2, #2
   347ac:	e1a03005 	mov	r3, r5
   347b0:	e1a00006 	mov	r0, r6
   347b4:	e59f190c 	ldr	r1, [pc, #2316]	; 350c8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdd0>
   347b8:	e58da00c 	str	sl, [sp, #12]
   347bc:	e58da008 	str	sl, [sp, #8]
   347c0:	ebfffdb6 	bl	33ea0 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   347c4:	e3500000 	cmp	r0, #0
   347c8:	0affffd3 	beq	3471c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x424>
   347cc:	e24b2e89 	sub	r2, fp, #2192	; 0x890
   347d0:	e58d2000 	str	r2, [sp]
   347d4:	e1a03005 	mov	r3, r5
   347d8:	e3a02003 	mov	r2, #3
   347dc:	e1a00006 	mov	r0, r6
   347e0:	e59f18e4 	ldr	r1, [pc, #2276]	; 350cc <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdd4>
   347e4:	e58da00c 	str	sl, [sp, #12]
   347e8:	e58da008 	str	sl, [sp, #8]
   347ec:	e58da004 	str	sl, [sp, #4]
   347f0:	ebfffdaa 	bl	33ea0 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   347f4:	e3500000 	cmp	r0, #0
   347f8:	0affffc7 	beq	3471c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x424>
   347fc:	e51b3c90 	ldr	r3, [fp, #-3216]	; 0xfffff370
   34800:	e2432001 	sub	r2, r3, #1
   34804:	e1530007 	cmp	r3, r7
   34808:	93520b01 	cmpls	r2, #1024	; 0x400
   3480c:	23a02001 	movcs	r2, #1
   34810:	33a02000 	movcc	r2, #0
   34814:	3a000156 	bcc	34d74 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa7c>
   34818:	e59b2008 	ldr	r2, [fp, #8]
   3481c:	e59f18dc 	ldr	r1, [pc, #2268]	; 35100 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe08>
   34820:	e59b0004 	ldr	r0, [fp, #4]
   34824:	ebffe58e 	bl	2de64 <strlcpy>
   34828:	eaffff5c 	b	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   3482c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34830:	e59f18cc 	ldr	r1, [pc, #2252]	; 35104 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe0c>
   34834:	e2400004 	sub	r0, r0, #4
   34838:	ebffd60a 	bl	2a068 <strcasecmp>
   3483c:	e250a000 	subs	sl, r0, #0
   34840:	1a00003b 	bne	34934 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x63c>
   34844:	e1a03005 	mov	r3, r5
   34848:	e3a01004 	mov	r1, #4
   3484c:	e59f28b4 	ldr	r2, [pc, #2228]	; 35108 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe10>
   34850:	e59f0830 	ldr	r0, [pc, #2096]	; 35088 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd90>
   34854:	ebffe94d 	bl	2ed90 <LogWrite>
   34858:	e24b2d33 	sub	r2, fp, #3264	; 0xcc0
   3485c:	e242200c 	sub	r2, r2, #12
   34860:	e50baccc 	str	sl, [fp, #-3276]	; 0xfffff334
   34864:	e50bacc8 	str	sl, [fp, #-3272]	; 0xfffff338
   34868:	e50bac90 	str	sl, [fp, #-3216]	; 0xfffff370
   3486c:	e1a03005 	mov	r3, r5
   34870:	e88d0404 	stm	sp, {r2, sl}
   34874:	e1a00006 	mov	r0, r6
   34878:	e3a02001 	mov	r2, #1
   3487c:	e59f1840 	ldr	r1, [pc, #2112]	; 350c4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdcc>
   34880:	e58da00c 	str	sl, [sp, #12]
   34884:	e58da008 	str	sl, [sp, #8]
   34888:	ebfffd84 	bl	33ea0 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   3488c:	e1a0300d 	mov	r3, sp
   34890:	e3500000 	cmp	r0, #0
   34894:	ee083a10 	vmov	s16, r3
   34898:	0a0000f4 	beq	34c70 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x978>
   3489c:	e24b3ecb 	sub	r3, fp, #3248	; 0xcb0
   348a0:	e243300c 	sub	r3, r3, #12
   348a4:	e243300c 	sub	r3, r3, #12
   348a8:	e58d3000 	str	r3, [sp]
   348ac:	e3a02002 	mov	r2, #2
   348b0:	e1a03005 	mov	r3, r5
   348b4:	e1a00006 	mov	r0, r6
   348b8:	e59f1808 	ldr	r1, [pc, #2056]	; 350c8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdd0>
   348bc:	e58da00c 	str	sl, [sp, #12]
   348c0:	e58da008 	str	sl, [sp, #8]
   348c4:	e58da004 	str	sl, [sp, #4]
   348c8:	ebfffd74 	bl	33ea0 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   348cc:	e3500000 	cmp	r0, #0
   348d0:	0a0000e6 	beq	34c70 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x978>
   348d4:	e24b2ec9 	sub	r2, fp, #3216	; 0xc90
   348d8:	e58d2000 	str	r2, [sp]
   348dc:	e1a03005 	mov	r3, r5
   348e0:	e3a02003 	mov	r2, #3
   348e4:	e1a00006 	mov	r0, r6
   348e8:	e59f17dc 	ldr	r1, [pc, #2012]	; 350cc <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdd4>
   348ec:	e58da00c 	str	sl, [sp, #12]
   348f0:	e58da008 	str	sl, [sp, #8]
   348f4:	e58da004 	str	sl, [sp, #4]
   348f8:	ebfffd68 	bl	33ea0 <ControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   348fc:	e3500000 	cmp	r0, #0
   34900:	0a0000da 	beq	34c70 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x978>
   34904:	e51b2cc8 	ldr	r2, [fp, #-3272]	; 0xfffff338
   34908:	e2423001 	sub	r3, r2, #1
   3490c:	e1520007 	cmp	r2, r7
   34910:	93530b01 	cmpls	r3, #1024	; 0x400
   34914:	3a00012d 	bcc	34dd0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xad8>
   34918:	e59b2008 	ldr	r2, [fp, #8]
   3491c:	e59f17dc 	ldr	r1, [pc, #2012]	; 35100 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe08>
   34920:	e59b0004 	ldr	r0, [fp, #4]
   34924:	ebffe54e 	bl	2de64 <strlcpy>
   34928:	ee183a10 	vmov	r3, s16
   3492c:	e1a0d003 	mov	sp, r3
   34930:	eaffff1a 	b	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34934:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34938:	e59f17cc 	ldr	r1, [pc, #1996]	; 3510c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe14>
   3493c:	e2400004 	sub	r0, r0, #4
   34940:	ebffd5c8 	bl	2a068 <strcasecmp>
   34944:	e3500000 	cmp	r0, #0
   34948:	0affff14 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   3494c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34950:	e59f17b8 	ldr	r1, [pc, #1976]	; 35110 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe18>
   34954:	e2400004 	sub	r0, r0, #4
   34958:	ebffd5c2 	bl	2a068 <strcasecmp>
   3495c:	e3500000 	cmp	r0, #0
   34960:	0affff0e 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34964:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34968:	e59f17a4 	ldr	r1, [pc, #1956]	; 35114 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe1c>
   3496c:	e2400004 	sub	r0, r0, #4
   34970:	ebffd5bc 	bl	2a068 <strcasecmp>
   34974:	e3500000 	cmp	r0, #0
   34978:	0affff08 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   3497c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34980:	e59f1790 	ldr	r1, [pc, #1936]	; 35118 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe20>
   34984:	e2400004 	sub	r0, r0, #4
   34988:	ebffd5b6 	bl	2a068 <strcasecmp>
   3498c:	e3500000 	cmp	r0, #0
   34990:	0affff02 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34994:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34998:	e59f177c 	ldr	r1, [pc, #1916]	; 3511c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe24>
   3499c:	e2400004 	sub	r0, r0, #4
   349a0:	ebffd5b0 	bl	2a068 <strcasecmp>
   349a4:	e3500000 	cmp	r0, #0
   349a8:	0afffefc 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   349ac:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   349b0:	e59f1768 	ldr	r1, [pc, #1896]	; 35120 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe28>
   349b4:	e2400004 	sub	r0, r0, #4
   349b8:	ebffd5aa 	bl	2a068 <strcasecmp>
   349bc:	e3500000 	cmp	r0, #0
   349c0:	0afffef6 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   349c4:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   349c8:	e59f1754 	ldr	r1, [pc, #1876]	; 35124 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe2c>
   349cc:	e2400004 	sub	r0, r0, #4
   349d0:	ebffd5a4 	bl	2a068 <strcasecmp>
   349d4:	e3500000 	cmp	r0, #0
   349d8:	0afffef0 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   349dc:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   349e0:	e59f1740 	ldr	r1, [pc, #1856]	; 35128 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe30>
   349e4:	e2400004 	sub	r0, r0, #4
   349e8:	ebffd59e 	bl	2a068 <strcasecmp>
   349ec:	e3500000 	cmp	r0, #0
   349f0:	0afffeea 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   349f4:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   349f8:	e59f172c 	ldr	r1, [pc, #1836]	; 3512c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe34>
   349fc:	e2400004 	sub	r0, r0, #4
   34a00:	ebffd598 	bl	2a068 <strcasecmp>
   34a04:	e3500000 	cmp	r0, #0
   34a08:	0afffee4 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34a0c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34a10:	e59f1718 	ldr	r1, [pc, #1816]	; 35130 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe38>
   34a14:	e2400004 	sub	r0, r0, #4
   34a18:	ebffd592 	bl	2a068 <strcasecmp>
   34a1c:	e3500000 	cmp	r0, #0
   34a20:	0afffede 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34a24:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34a28:	e59f1704 	ldr	r1, [pc, #1796]	; 35134 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe3c>
   34a2c:	e2400004 	sub	r0, r0, #4
   34a30:	ebffd58c 	bl	2a068 <strcasecmp>
   34a34:	e3500000 	cmp	r0, #0
   34a38:	0afffed8 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34a3c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34a40:	e59f16f0 	ldr	r1, [pc, #1776]	; 35138 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe40>
   34a44:	e2400004 	sub	r0, r0, #4
   34a48:	ebffd586 	bl	2a068 <strcasecmp>
   34a4c:	e3500000 	cmp	r0, #0
   34a50:	0afffed2 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34a54:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34a58:	e59f16dc 	ldr	r1, [pc, #1756]	; 3513c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe44>
   34a5c:	e2400004 	sub	r0, r0, #4
   34a60:	ebffd580 	bl	2a068 <strcasecmp>
   34a64:	e3500000 	cmp	r0, #0
   34a68:	0afffecc 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34a6c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34a70:	e59f16c8 	ldr	r1, [pc, #1736]	; 35140 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe48>
   34a74:	e2400004 	sub	r0, r0, #4
   34a78:	ebffd57a 	bl	2a068 <strcasecmp>
   34a7c:	e3500000 	cmp	r0, #0
   34a80:	0afffec6 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34a84:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34a88:	e59f16b4 	ldr	r1, [pc, #1716]	; 35144 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe4c>
   34a8c:	e2400004 	sub	r0, r0, #4
   34a90:	ebffd574 	bl	2a068 <strcasecmp>
   34a94:	e3500000 	cmp	r0, #0
   34a98:	0afffec0 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34a9c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34aa0:	e59f16a0 	ldr	r1, [pc, #1696]	; 35148 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe50>
   34aa4:	e2400004 	sub	r0, r0, #4
   34aa8:	ebffd56e 	bl	2a068 <strcasecmp>
   34aac:	e3500000 	cmp	r0, #0
   34ab0:	0afffeba 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34ab4:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34ab8:	e59f168c 	ldr	r1, [pc, #1676]	; 3514c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe54>
   34abc:	e2400004 	sub	r0, r0, #4
   34ac0:	ebffd568 	bl	2a068 <strcasecmp>
   34ac4:	e3500000 	cmp	r0, #0
   34ac8:	0afffeb4 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34acc:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34ad0:	e59f1678 	ldr	r1, [pc, #1656]	; 35150 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe58>
   34ad4:	e2400004 	sub	r0, r0, #4
   34ad8:	ebffd562 	bl	2a068 <strcasecmp>
   34adc:	e3500000 	cmp	r0, #0
   34ae0:	0afffeae 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34ae4:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34ae8:	e59f1664 	ldr	r1, [pc, #1636]	; 35154 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe5c>
   34aec:	e2400004 	sub	r0, r0, #4
   34af0:	ebffd55c 	bl	2a068 <strcasecmp>
   34af4:	e3500000 	cmp	r0, #0
   34af8:	0afffea8 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34afc:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34b00:	e59f1650 	ldr	r1, [pc, #1616]	; 35158 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe60>
   34b04:	e2400004 	sub	r0, r0, #4
   34b08:	ebffd556 	bl	2a068 <strcasecmp>
   34b0c:	e3500000 	cmp	r0, #0
   34b10:	0afffea2 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34b14:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34b18:	e59f163c 	ldr	r1, [pc, #1596]	; 3515c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe64>
   34b1c:	e2400004 	sub	r0, r0, #4
   34b20:	ebffd550 	bl	2a068 <strcasecmp>
   34b24:	e3500000 	cmp	r0, #0
   34b28:	0afffe9c 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34b2c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34b30:	e59f1628 	ldr	r1, [pc, #1576]	; 35160 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe68>
   34b34:	e2400004 	sub	r0, r0, #4
   34b38:	ebffd54a 	bl	2a068 <strcasecmp>
   34b3c:	e3500000 	cmp	r0, #0
   34b40:	0afffe96 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34b44:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34b48:	e59f1614 	ldr	r1, [pc, #1556]	; 35164 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe6c>
   34b4c:	e2400004 	sub	r0, r0, #4
   34b50:	ebffd544 	bl	2a068 <strcasecmp>
   34b54:	e3500000 	cmp	r0, #0
   34b58:	0afffe90 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34b5c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34b60:	e59f1600 	ldr	r1, [pc, #1536]	; 35168 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe70>
   34b64:	e2400004 	sub	r0, r0, #4
   34b68:	ebffd53e 	bl	2a068 <strcasecmp>
   34b6c:	e3500000 	cmp	r0, #0
   34b70:	0afffe8a 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34b74:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34b78:	e59f15ec 	ldr	r1, [pc, #1516]	; 3516c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe74>
   34b7c:	e2400004 	sub	r0, r0, #4
   34b80:	ebffd538 	bl	2a068 <strcasecmp>
   34b84:	e3500000 	cmp	r0, #0
   34b88:	0a000132 	beq	35058 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd60>
   34b8c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34b90:	e59f15d8 	ldr	r1, [pc, #1496]	; 35170 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe78>
   34b94:	e2400004 	sub	r0, r0, #4
   34b98:	ebffd532 	bl	2a068 <strcasecmp>
   34b9c:	e3500000 	cmp	r0, #0
   34ba0:	1a0000a7 	bne	34e44 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb4c>
   34ba4:	e5d82003 	ldrb	r2, [r8, #3]
   34ba8:	e1a03005 	mov	r3, r5
   34bac:	e58d2010 	str	r2, [sp, #16]
   34bb0:	e5d81002 	ldrb	r1, [r8, #2]
   34bb4:	e59f25b8 	ldr	r2, [pc, #1464]	; 35174 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe7c>
   34bb8:	e58d100c 	str	r1, [sp, #12]
   34bbc:	e5d80001 	ldrb	r0, [r8, #1]
   34bc0:	e3a01004 	mov	r1, #4
   34bc4:	e58d0008 	str	r0, [sp, #8]
   34bc8:	e5d80000 	ldrb	r0, [r8]
   34bcc:	e24b7e89 	sub	r7, fp, #2192	; 0x890
   34bd0:	e58d0004 	str	r0, [sp, #4]
   34bd4:	e58d8000 	str	r8, [sp]
   34bd8:	e59f04a8 	ldr	r0, [pc, #1192]	; 35088 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd90>
   34bdc:	ebffe86b 	bl	2ed90 <LogWrite>
   34be0:	e1a01005 	mov	r1, r5
   34be4:	e1a02007 	mov	r2, r7
   34be8:	e3a03032 	mov	r3, #50	; 0x32
   34bec:	e59f0584 	ldr	r0, [pc, #1412]	; 35178 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe80>
   34bf0:	ebffe548 	bl	2e118 <jsonGetValueForKey>
   34bf4:	e3500000 	cmp	r0, #0
   34bf8:	1a000006 	bne	34c18 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x920>
   34bfc:	e1a01008 	mov	r1, r8
   34c00:	e3a03032 	mov	r3, #50	; 0x32
   34c04:	e1a02007 	mov	r2, r7
   34c08:	e59f0568 	ldr	r0, [pc, #1384]	; 35178 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe80>
   34c0c:	ebffe541 	bl	2e118 <jsonGetValueForKey>
   34c10:	e2505000 	subs	r5, r0, #0
   34c14:	0a000115 	beq	35070 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd78>
   34c18:	e3a0200a 	mov	r2, #10
   34c1c:	e3a01000 	mov	r1, #0
   34c20:	e1a00007 	mov	r0, r7
   34c24:	ebffd610 	bl	2a46c <strtoul>
   34c28:	e1a05000 	mov	r5, r0
   34c2c:	e1a03000 	mov	r3, r0
   34c30:	e59f2544 	ldr	r2, [pc, #1348]	; 3517c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe84>
   34c34:	e3a01004 	mov	r1, #4
   34c38:	e59f0448 	ldr	r0, [pc, #1096]	; 35088 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd90>
   34c3c:	ebffe853 	bl	2ed90 <LogWrite>
   34c40:	e5960004 	ldr	r0, [r6, #4]
   34c44:	e1a01005 	mov	r1, r5
   34c48:	e2800004 	add	r0, r0, #4
   34c4c:	ebfff637 	bl	32530 <TargetClockGenerator::setFreqHz(unsigned long)>
   34c50:	e1cb00d4 	ldrd	r0, [fp, #4]
   34c54:	e5963004 	ldr	r3, [r6, #4]
   34c58:	e59f2520 	ldr	r2, [pc, #1312]	; 35180 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe88>
   34c5c:	e5933004 	ldr	r3, [r3, #4]
   34c60:	e1a05004 	mov	r5, r4
   34c64:	ebffe4ea 	bl	2e014 <snprintf>
   34c68:	e1a04005 	mov	r4, r5
   34c6c:	eafffe4b 	b	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34c70:	e59b2008 	ldr	r2, [fp, #8]
   34c74:	e59f1478 	ldr	r1, [pc, #1144]	; 350f4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdfc>
   34c78:	e59b0004 	ldr	r0, [fp, #4]
   34c7c:	ebffe478 	bl	2de64 <strlcpy>
   34c80:	eaffff28 	b	34928 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x630>
   34c84:	e58d0004 	str	r0, [sp, #4]
   34c88:	e51b3cd0 	ldr	r3, [fp, #-3280]	; 0xfffff330
   34c8c:	e24b7e89 	sub	r7, fp, #2192	; 0x890
   34c90:	e58d3000 	str	r3, [sp]
   34c94:	e51b3ccc 	ldr	r3, [fp, #-3276]	; 0xfffff334
   34c98:	e59f24e4 	ldr	r2, [pc, #1252]	; 35184 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe8c>
   34c9c:	e59f14e4 	ldr	r1, [pc, #1252]	; 35188 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe90>
   34ca0:	e1a00007 	mov	r0, r7
   34ca4:	ebffe4da 	bl	2e014 <snprintf>
   34ca8:	e1a00007 	mov	r0, r7
   34cac:	ebffd4c6 	bl	29fcc <strlen>
   34cb0:	e51b3ccc 	ldr	r3, [fp, #-3276]	; 0xfffff334
   34cb4:	e3530000 	cmp	r3, #0
   34cb8:	0a000011 	beq	34d04 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa0c>
   34cbc:	e24b3d32 	sub	r3, fp, #3200	; 0xc80
   34cc0:	e243300c 	sub	r3, r3, #12
   34cc4:	e59f24c0 	ldr	r2, [pc, #1216]	; 3518c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe94>
   34cc8:	e59fa4b8 	ldr	sl, [pc, #1208]	; 35188 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe90>
   34ccc:	e2438005 	sub	r8, r3, #5
   34cd0:	e0876000 	add	r6, r7, r0
   34cd4:	e1a09008 	mov	r9, r8
   34cd8:	e1a0100a 	mov	r1, sl
   34cdc:	e1a00006 	mov	r0, r6
   34ce0:	e5f83001 	ldrb	r3, [r8, #1]!
   34ce4:	ebffe4ca 	bl	2e014 <snprintf>
   34ce8:	e51b1ccc 	ldr	r1, [fp, #-3276]	; 0xfffff334
   34cec:	e2893002 	add	r3, r9, #2
   34cf0:	e0433005 	sub	r3, r3, r5
   34cf4:	e1510003 	cmp	r1, r3
   34cf8:	e59f248c 	ldr	r2, [pc, #1164]	; 3518c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe94>
   34cfc:	e2866002 	add	r6, r6, #2
   34d00:	8afffff3 	bhi	34cd4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9dc>
   34d04:	e1a00007 	mov	r0, r7
   34d08:	e59f2478 	ldr	r2, [pc, #1144]	; 35188 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe90>
   34d0c:	e59f147c 	ldr	r1, [pc, #1148]	; 35190 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe98>
   34d10:	ebffe46f 	bl	2ded4 <strlcat>
   34d14:	e1a01007 	mov	r1, r7
   34d18:	e59b2008 	ldr	r2, [fp, #8]
   34d1c:	e59b0004 	ldr	r0, [fp, #4]
   34d20:	ebffe44f 	bl	2de64 <strlcpy>
   34d24:	e1a00007 	mov	r0, r7
   34d28:	ebffd4a7 	bl	29fcc <strlen>
   34d2c:	e24b302c 	sub	r3, fp, #44	; 0x2c
   34d30:	e0830000 	add	r0, r3, r0
   34d34:	e2403e86 	sub	r3, r0, #2144	; 0x860
   34d38:	e15330d7 	ldrsb	r3, [r3, #-7]
   34d3c:	e1a00007 	mov	r0, r7
   34d40:	e50b3cd8 	str	r3, [fp, #-3288]	; 0xfffff328
   34d44:	ebffd4a0 	bl	29fcc <strlen>
   34d48:	e24b302c 	sub	r3, fp, #44	; 0x2c
   34d4c:	e0830000 	add	r0, r3, r0
   34d50:	e2402e86 	sub	r2, r0, #2144	; 0x860
   34d54:	e15220d6 	ldrsb	r2, [r2, #-6]
   34d58:	e51b3cd8 	ldr	r3, [fp, #-3288]	; 0xfffff328
   34d5c:	e3a01004 	mov	r1, #4
   34d60:	e58d2000 	str	r2, [sp]
   34d64:	e59f031c 	ldr	r0, [pc, #796]	; 35088 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd90>
   34d68:	e59f2424 	ldr	r2, [pc, #1060]	; 35194 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe9c>
   34d6c:	ebffe807 	bl	2ed90 <LogWrite>
   34d70:	eafffe0a 	b	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34d74:	e3a01001 	mov	r1, #1
   34d78:	e98d0006 	stmib	sp, {r1, r2}
   34d7c:	e51b2890 	ldr	r2, [fp, #-2192]	; 0xfffff770
   34d80:	e1a00006 	mov	r0, r6
   34d84:	e2522000 	subs	r2, r2, #0
   34d88:	13a02001 	movne	r2, #1
   34d8c:	e58d2000 	str	r2, [sp]
   34d90:	e51b1cc8 	ldr	r1, [fp, #-3272]	; 0xfffff338
   34d94:	e1a02008 	mov	r2, r8
   34d98:	ebfffcbf 	bl	3409c <ControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   34d9c:	e3500000 	cmp	r0, #0
   34da0:	0afffe06 	beq	345c0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2c8>
   34da4:	e3500003 	cmp	r0, #3
   34da8:	90890100 	addls	r0, r9, r0, lsl #2
   34dac:	9590300c 	ldrls	r3, [r0, #12]
   34db0:	859f3318 	ldrhi	r3, [pc, #792]	; 350d0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdd8>
   34db4:	e3a01002 	mov	r1, #2
   34db8:	e59f23d8 	ldr	r2, [pc, #984]	; 35198 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xea0>
   34dbc:	e59f02c4 	ldr	r0, [pc, #708]	; 35088 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd90>
   34dc0:	e50b3cd8 	str	r3, [fp, #-3288]	; 0xfffff328
   34dc4:	ebffe7f1 	bl	2ed90 <LogWrite>
   34dc8:	e51b3cd8 	ldr	r3, [fp, #-3288]	; 0xfffff328
   34dcc:	eafffde8 	b	34574 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x27c>
   34dd0:	e2823007 	add	r3, r2, #7
   34dd4:	e3c33007 	bic	r3, r3, #7
   34dd8:	e04dd003 	sub	sp, sp, r3
   34ddc:	e28d5018 	add	r5, sp, #24
   34de0:	e1a01008 	mov	r1, r8
   34de4:	e1a00005 	mov	r0, r5
   34de8:	ebffd672 	bl	2a7b8 <memcpy>
   34dec:	e3a03001 	mov	r3, #1
   34df0:	e58d3008 	str	r3, [sp, #8]
   34df4:	e58d3004 	str	r3, [sp, #4]
   34df8:	e51b3c90 	ldr	r3, [fp, #-3216]	; 0xfffff370
   34dfc:	e1a00006 	mov	r0, r6
   34e00:	e2533000 	subs	r3, r3, #0
   34e04:	13a03001 	movne	r3, #1
   34e08:	e58d3000 	str	r3, [sp]
   34e0c:	e1a02005 	mov	r2, r5
   34e10:	e51b3cc8 	ldr	r3, [fp, #-3272]	; 0xfffff338
   34e14:	e51b1ccc 	ldr	r1, [fp, #-3276]	; 0xfffff334
   34e18:	ebfffc9f 	bl	3409c <ControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   34e1c:	e2506000 	subs	r6, r0, #0
   34e20:	0a000056 	beq	34f80 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc88>
   34e24:	e1cb00d4 	ldrd	r0, [fp, #4]
   34e28:	e3560003 	cmp	r6, #3
   34e2c:	90899106 	addls	r9, r9, r6, lsl #2
   34e30:	9599300c 	ldrls	r3, [r9, #12]
   34e34:	859f3294 	ldrhi	r3, [pc, #660]	; 350d0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xdd8>
   34e38:	e59f2294 	ldr	r2, [pc, #660]	; 350d4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xddc>
   34e3c:	ebffe474 	bl	2e014 <snprintf>
   34e40:	eafffeb8 	b	34928 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x630>
   34e44:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34e48:	e59f134c 	ldr	r1, [pc, #844]	; 3519c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xea4>
   34e4c:	e2400004 	sub	r0, r0, #4
   34e50:	ebffd484 	bl	2a068 <strcasecmp>
   34e54:	e3500000 	cmp	r0, #0
   34e58:	0afffdd0 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34e5c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34e60:	e59f1338 	ldr	r1, [pc, #824]	; 351a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xea8>
   34e64:	e2400004 	sub	r0, r0, #4
   34e68:	ebffd47e 	bl	2a068 <strcasecmp>
   34e6c:	e3500000 	cmp	r0, #0
   34e70:	0afffdca 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34e74:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34e78:	e59f1324 	ldr	r1, [pc, #804]	; 351a4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xeac>
   34e7c:	e2400004 	sub	r0, r0, #4
   34e80:	ebffd478 	bl	2a068 <strcasecmp>
   34e84:	e3500000 	cmp	r0, #0
   34e88:	0afffdc4 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34e8c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34e90:	e59f1310 	ldr	r1, [pc, #784]	; 351a8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xeb0>
   34e94:	e2400004 	sub	r0, r0, #4
   34e98:	ebffd472 	bl	2a068 <strcasecmp>
   34e9c:	e3500000 	cmp	r0, #0
   34ea0:	0afffdbe 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34ea4:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34ea8:	e59f12fc 	ldr	r1, [pc, #764]	; 351ac <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xeb4>
   34eac:	e2400004 	sub	r0, r0, #4
   34eb0:	ebffd46c 	bl	2a068 <strcasecmp>
   34eb4:	e3500000 	cmp	r0, #0
   34eb8:	0afffdb8 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34ebc:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34ec0:	e59f12e8 	ldr	r1, [pc, #744]	; 351b0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xeb8>
   34ec4:	e2400004 	sub	r0, r0, #4
   34ec8:	ebffd466 	bl	2a068 <strcasecmp>
   34ecc:	e3500000 	cmp	r0, #0
   34ed0:	0afffdb2 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34ed4:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34ed8:	e59f12d4 	ldr	r1, [pc, #724]	; 351b4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xebc>
   34edc:	e2400004 	sub	r0, r0, #4
   34ee0:	ebffd460 	bl	2a068 <strcasecmp>
   34ee4:	e3500000 	cmp	r0, #0
   34ee8:	0afffdac 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34eec:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34ef0:	e59f12c0 	ldr	r1, [pc, #704]	; 351b8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xec0>
   34ef4:	e2400004 	sub	r0, r0, #4
   34ef8:	ebffd45a 	bl	2a068 <strcasecmp>
   34efc:	e3500000 	cmp	r0, #0
   34f00:	0afffda6 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34f04:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34f08:	e59f12ac 	ldr	r1, [pc, #684]	; 351bc <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xec4>
   34f0c:	e2400004 	sub	r0, r0, #4
   34f10:	ebffd454 	bl	2a068 <strcasecmp>
   34f14:	e3500000 	cmp	r0, #0
   34f18:	0afffda0 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34f1c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34f20:	e59f1298 	ldr	r1, [pc, #664]	; 351c0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xec8>
   34f24:	e2400004 	sub	r0, r0, #4
   34f28:	ebffd44e 	bl	2a068 <strcasecmp>
   34f2c:	e3500000 	cmp	r0, #0
   34f30:	0afffd9a 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34f34:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34f38:	e59f1284 	ldr	r1, [pc, #644]	; 351c4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xecc>
   34f3c:	e2400004 	sub	r0, r0, #4
   34f40:	ebffd448 	bl	2a068 <strcasecmp>
   34f44:	e3500000 	cmp	r0, #0
   34f48:	0afffd94 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34f4c:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34f50:	e59f1270 	ldr	r1, [pc, #624]	; 351c8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xed0>
   34f54:	e2400004 	sub	r0, r0, #4
   34f58:	ebffd442 	bl	2a068 <strcasecmp>
   34f5c:	e3500000 	cmp	r0, #0
   34f60:	0afffd8e 	beq	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34f64:	e24b0d33 	sub	r0, fp, #3264	; 0xcc0
   34f68:	e59f125c 	ldr	r1, [pc, #604]	; 351cc <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xed4>
   34f6c:	e2400004 	sub	r0, r0, #4
   34f70:	ebffd43c 	bl	2a068 <strcasecmp>
   34f74:	e16f4f10 	clz	r4, r0
   34f78:	e1a042a4 	lsr	r4, r4, #5
   34f7c:	eafffd87 	b	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   34f80:	e51b3c90 	ldr	r3, [fp, #-3216]	; 0xfffff370
   34f84:	e24b7e89 	sub	r7, fp, #2192	; 0x890
   34f88:	e58d3004 	str	r3, [sp, #4]
   34f8c:	e51b3ccc 	ldr	r3, [fp, #-3276]	; 0xfffff334
   34f90:	e59f21ec 	ldr	r2, [pc, #492]	; 35184 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe8c>
   34f94:	e58d3000 	str	r3, [sp]
   34f98:	e51b3cc8 	ldr	r3, [fp, #-3272]	; 0xfffff338
   34f9c:	e59f11e4 	ldr	r1, [pc, #484]	; 35188 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe90>
   34fa0:	e1a00007 	mov	r0, r7
   34fa4:	ebffe41a 	bl	2e014 <snprintf>
   34fa8:	e1a00007 	mov	r0, r7
   34fac:	ebffd406 	bl	29fcc <strlen>
   34fb0:	e59fa1d4 	ldr	sl, [pc, #468]	; 3518c <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe94>
   34fb4:	e59f91cc 	ldr	r9, [pc, #460]	; 35188 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe90>
   34fb8:	e0878000 	add	r8, r7, r0
   34fbc:	ea000006 	b	34fdc <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   34fc0:	e1a00008 	mov	r0, r8
   34fc4:	e7d53006 	ldrb	r3, [r5, r6]
   34fc8:	e1a0200a 	mov	r2, sl
   34fcc:	e1a01009 	mov	r1, r9
   34fd0:	ebffe40f 	bl	2e014 <snprintf>
   34fd4:	e2866001 	add	r6, r6, #1
   34fd8:	e2888002 	add	r8, r8, #2
   34fdc:	e51b3cc8 	ldr	r3, [fp, #-3272]	; 0xfffff338
   34fe0:	e1560003 	cmp	r6, r3
   34fe4:	3afffff5 	bcc	34fc0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc8>
   34fe8:	e1a00007 	mov	r0, r7
   34fec:	e59f2194 	ldr	r2, [pc, #404]	; 35188 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe90>
   34ff0:	e59f1198 	ldr	r1, [pc, #408]	; 35190 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe98>
   34ff4:	ebffe3b6 	bl	2ded4 <strlcat>
   34ff8:	e1a01007 	mov	r1, r7
   34ffc:	e59b2008 	ldr	r2, [fp, #8]
   35000:	e59b0004 	ldr	r0, [fp, #4]
   35004:	ebffe396 	bl	2de64 <strlcpy>
   35008:	e1a00007 	mov	r0, r7
   3500c:	ebffd3ee 	bl	29fcc <strlen>
   35010:	e24b302c 	sub	r3, fp, #44	; 0x2c
   35014:	e0830000 	add	r0, r3, r0
   35018:	e2403e86 	sub	r3, r0, #2144	; 0x860
   3501c:	e15330d7 	ldrsb	r3, [r3, #-7]
   35020:	e1a00007 	mov	r0, r7
   35024:	e50b3cd8 	str	r3, [fp, #-3288]	; 0xfffff328
   35028:	ebffd3e7 	bl	29fcc <strlen>
   3502c:	e24b302c 	sub	r3, fp, #44	; 0x2c
   35030:	e0830000 	add	r0, r3, r0
   35034:	e2402e86 	sub	r2, r0, #2144	; 0x860
   35038:	e15220d6 	ldrsb	r2, [r2, #-6]
   3503c:	e51b3cd8 	ldr	r3, [fp, #-3288]	; 0xfffff328
   35040:	e3a01004 	mov	r1, #4
   35044:	e58d2000 	str	r2, [sp]
   35048:	e59f0038 	ldr	r0, [pc, #56]	; 35088 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd90>
   3504c:	e59f217c 	ldr	r2, [pc, #380]	; 351d0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xed8>
   35050:	ebffe74e 	bl	2ed90 <LogWrite>
   35054:	eafffe33 	b	34928 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x630>
   35058:	e5963004 	ldr	r3, [r6, #4]
   3505c:	e59f211c 	ldr	r2, [pc, #284]	; 35180 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe88>
   35060:	e5933004 	ldr	r3, [r3, #4]
   35064:	e1cb00d4 	ldrd	r0, [fp, #4]
   35068:	ebffe3e9 	bl	2e014 <snprintf>
   3506c:	eafffd4b 	b	345a0 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2a8>
   35070:	e3a01002 	mov	r1, #2
   35074:	e59f2158 	ldr	r2, [pc, #344]	; 351d4 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xedc>
   35078:	e59f0008 	ldr	r0, [pc, #8]	; 35088 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd90>
   3507c:	ebffe743 	bl	2ed90 <LogWrite>
   35080:	eafffef8 	b	34c68 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x970>
   35084:	0003d3d0 	.word	0x0003d3d0
   35088:	000453b4 	.word	0x000453b4
   3508c:	00044ec4 	.word	0x00044ec4
   35090:	00044ee4 	.word	0x00044ee4
   35094:	00044efc 	.word	0x00044efc
   35098:	00044f0c 	.word	0x00044f0c
   3509c:	00044f1c 	.word	0x00044f1c
   350a0:	00044f2c 	.word	0x00044f2c
   350a4:	00044f38 	.word	0x00044f38
   350a8:	00044f44 	.word	0x00044f44
   350ac:	00044f50 	.word	0x00044f50
   350b0:	00044f9c 	.word	0x00044f9c
   350b4:	00044fa4 	.word	0x00044fa4
   350b8:	00044fac 	.word	0x00044fac
   350bc:	20200000 	.word	0x20200000
   350c0:	00044fb0 	.word	0x00044fb0
   350c4:	00044fbc 	.word	0x00044fbc
   350c8:	00044fd4 	.word	0x00044fd4
   350cc:	00044fd8 	.word	0x00044fd8
   350d0:	00044e8c 	.word	0x00044e8c
   350d4:	00044ff4 	.word	0x00044ff4
   350d8:	00044ef0 	.word	0x00044ef0
   350dc:	00044e9c 	.word	0x00044e9c
   350e0:	00044f5c 	.word	0x00044f5c
   350e4:	00044f7c 	.word	0x00044f7c
   350e8:	00002710 	.word	0x00002710
   350ec:	0004c67c 	.word	0x0004c67c
   350f0:	00044f8c 	.word	0x00044f8c
   350f4:	00044fc4 	.word	0x00044fc4
   350f8:	00045058 	.word	0x00045058
   350fc:	0004505c 	.word	0x0004505c
   35100:	00044fe0 	.word	0x00044fe0
   35104:	00045074 	.word	0x00045074
   35108:	00045080 	.word	0x00045080
   3510c:	000450b0 	.word	0x000450b0
   35110:	000450c0 	.word	0x000450c0
   35114:	000450d4 	.word	0x000450d4
   35118:	000450e4 	.word	0x000450e4
   3511c:	000450f8 	.word	0x000450f8
   35120:	0004510c 	.word	0x0004510c
   35124:	00045120 	.word	0x00045120
   35128:	0004512c 	.word	0x0004512c
   3512c:	0004513c 	.word	0x0004513c
   35130:	00045150 	.word	0x00045150
   35134:	00045160 	.word	0x00045160
   35138:	00045170 	.word	0x00045170
   3513c:	00045180 	.word	0x00045180
   35140:	00045190 	.word	0x00045190
   35144:	000451a0 	.word	0x000451a0
   35148:	000451b0 	.word	0x000451b0
   3514c:	000451c0 	.word	0x000451c0
   35150:	000451d4 	.word	0x000451d4
   35154:	000451e4 	.word	0x000451e4
   35158:	000451f0 	.word	0x000451f0
   3515c:	00045200 	.word	0x00045200
   35160:	00045208 	.word	0x00045208
   35164:	00045214 	.word	0x00045214
   35168:	00045224 	.word	0x00045224
   3516c:	00045234 	.word	0x00045234
   35170:	0004525c 	.word	0x0004525c
   35174:	00045268 	.word	0x00045268
   35178:	00045298 	.word	0x00045298
   3517c:	000452c4 	.word	0x000452c4
   35180:	00045240 	.word	0x00045240
   35184:	00045000 	.word	0x00045000
   35188:	00000864 	.word	0x00000864
   3518c:	00045c4c 	.word	0x00045c4c
   35190:	00045258 	.word	0x00045258
   35194:	00045038 	.word	0x00045038
   35198:	00045064 	.word	0x00045064
   3519c:	000452d4 	.word	0x000452d4
   351a0:	000452e0 	.word	0x000452e0
   351a4:	000452ec 	.word	0x000452ec
   351a8:	000452f8 	.word	0x000452f8
   351ac:	00045308 	.word	0x00045308
   351b0:	00045318 	.word	0x00045318
   351b4:	00045324 	.word	0x00045324
   351b8:	00045330 	.word	0x00045330
   351bc:	00045340 	.word	0x00045340
   351c0:	00045354 	.word	0x00045354
   351c4:	00045360 	.word	0x00045360
   351c8:	00045368 	.word	0x00045368
   351cc:	00045370 	.word	0x00045370
   351d0:	0004508c 	.word	0x0004508c
   351d4:	000452a0 	.word	0x000452a0

000351d8 <ControlAPI::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   351d8:	e3500000 	cmp	r0, #0
   351dc:	012fff1e 	bxeq	lr
   351e0:	eafffc44 	b	342f8 <ControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

000351e4 <McManager::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   351e4:	e3a00000 	mov	r0, #0
   351e8:	e12fff1e 	bx	lr

000351ec <McManager::handleWaitInterruptStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   351ec:	e3500000 	cmp	r0, #0
   351f0:	012fff1e 	bxeq	lr
   351f4:	e2800a02 	add	r0, r0, #8192	; 0x2000
   351f8:	e5900758 	ldr	r0, [r0, #1880]	; 0x758
   351fc:	e3500000 	cmp	r0, #0
   35200:	012fff1e 	bxeq	lr
   35204:	e590c000 	ldr	ip, [r0]
   35208:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3520c:	e59ce03c 	ldr	lr, [ip, #60]	; 0x3c
   35210:	e1a0c00e 	mov	ip, lr
   35214:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   35218:	e12fff1c 	bx	ip

0003521c <McManager::busActionActive(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE) [clone .part.0]>:
   3521c:	e16f1f11 	clz	r1, r1
   35220:	e92d4010 	push	{r4, lr}
   35224:	e2804a02 	add	r4, r0, #8192	; 0x2000
   35228:	e5940758 	ldr	r0, [r4, #1880]	; 0x758
   3522c:	e1a012a1 	lsr	r1, r1, #5
   35230:	e3500000 	cmp	r0, #0
   35234:	03a01000 	moveq	r1, #0
   35238:	e3510000 	cmp	r1, #0
   3523c:	0a000002 	beq	3524c <McManager::busActionActive(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE) [clone .part.0]+0x30>
   35240:	e5903000 	ldr	r3, [r0]
   35244:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   35248:	e12fff33 	blx	r3
   3524c:	e3a03000 	mov	r3, #0
   35250:	e5c4375c 	strb	r3, [r4, #1884]	; 0x75c
   35254:	e8bd8010 	pop	{r4, pc}

00035258 <McManager::busActionActiveStatic(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE)>:
   35258:	e2411004 	sub	r1, r1, #4
   3525c:	e16f1f11 	clz	r1, r1
   35260:	e3500000 	cmp	r0, #0
   35264:	e1a012a1 	lsr	r1, r1, #5
   35268:	11a02001 	movne	r2, r1
   3526c:	03a02000 	moveq	r2, #0
   35270:	e3520000 	cmp	r2, #0
   35274:	012fff1e 	bxeq	lr
   35278:	e2802a02 	add	r2, r0, #8192	; 0x2000
   3527c:	e5d2275c 	ldrb	r2, [r2, #1884]	; 0x75c
   35280:	e3520000 	cmp	r2, #0
   35284:	012fff1e 	bxeq	lr
   35288:	e1a01003 	mov	r1, r3
   3528c:	eaffffe2 	b	3521c <McManager::busActionActive(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE) [clone .part.0]>

00035290 <McManager::McManager(DisplayBase*, CommandHandler&, BusControl&)>:
   35290:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   35294:	e3a0c000 	mov	ip, #0
   35298:	e3e04000 	mvn	r4, #0
   3529c:	e3a07ffa 	mov	r7, #1000	; 0x3e8
   352a0:	e3a06064 	mov	r6, #100	; 0x64
   352a4:	e3a05f7d 	mov	r5, #500	; 0x1f4
   352a8:	e880000e 	stm	r0, {r1, r2, r3}
   352ac:	e59f3048 	ldr	r3, [pc, #72]	; 352fc <McManager::McManager(DisplayBase*, CommandHandler&, BusControl&)+0x6c>
   352b0:	e1a0e000 	mov	lr, r0
   352b4:	e5830000 	str	r0, [r3]
   352b8:	e2803a02 	add	r3, r0, #8192	; 0x2000
   352bc:	e5837760 	str	r7, [r3, #1888]	; 0x760
   352c0:	e5836774 	str	r6, [r3, #1908]	; 0x774
   352c4:	e5835780 	str	r5, [r3, #1920]	; 0x780
   352c8:	e580400c 	str	r4, [r0, #12]
   352cc:	e5804010 	str	r4, [r0, #16]
   352d0:	e583c754 	str	ip, [r3, #1876]	; 0x754
   352d4:	e583c758 	str	ip, [r3, #1880]	; 0x758
   352d8:	e583c728 	str	ip, [r3, #1832]	; 0x728
   352dc:	e583c764 	str	ip, [r3, #1892]	; 0x764
   352e0:	e583c76c 	str	ip, [r3, #1900]	; 0x76c
   352e4:	e583c770 	str	ip, [r3, #1904]	; 0x770
   352e8:	e583c768 	str	ip, [r3, #1896]	; 0x768
   352ec:	e5c3c778 	strb	ip, [r3, #1912]	; 0x778
   352f0:	e583c784 	str	ip, [r3, #1924]	; 0x784
   352f4:	e583c77c 	str	ip, [r3, #1916]	; 0x77c
   352f8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   352fc:	0004ed8c 	.word	0x0004ed8c

00035300 <McManager::init()>:
   35300:	e92d4010 	push	{r4, lr}
   35304:	e590300c 	ldr	r3, [r0, #12]
   35308:	e1a04000 	mov	r4, r0
   3530c:	e3530000 	cmp	r3, #0
   35310:	e24dd030 	sub	sp, sp, #48	; 0x30
   35314:	ba000015 	blt	35370 <McManager::init()+0x70>
   35318:	e5943010 	ldr	r3, [r4, #16]
   3531c:	e3530000 	cmp	r3, #0
   35320:	ba00002a 	blt	353d0 <McManager::init()+0xd0>
   35324:	e59f00cc 	ldr	r0, [pc, #204]	; 353f8 <McManager::init()+0xf8>
   35328:	ebffd708 	bl	2af50 <operator new(unsigned int)>
   3532c:	e1a01004 	mov	r1, r4
   35330:	e5942008 	ldr	r2, [r4, #8]
   35334:	eb0007a2 	bl	371c4 <McTerminal::McTerminal(McManager&, BusControl&)>
   35338:	e59f00bc 	ldr	r0, [pc, #188]	; 353fc <McManager::init()+0xfc>
   3533c:	ebffd703 	bl	2af50 <operator new(unsigned int)>
   35340:	e1a01004 	mov	r1, r4
   35344:	e5942008 	ldr	r2, [r4, #8]
   35348:	eb0003cb 	bl	3627c <McTRS80::McTRS80(McManager&, BusControl&)>
   3534c:	e3a03000 	mov	r3, #0
   35350:	e3a02001 	mov	r2, #1
   35354:	e2844a02 	add	r4, r4, #8192	; 0x2000
   35358:	e5c42778 	strb	r2, [r4, #1912]	; 0x778
   3535c:	e5843764 	str	r3, [r4, #1892]	; 0x764
   35360:	e584376c 	str	r3, [r4, #1900]	; 0x76c
   35364:	e584377c 	str	r3, [r4, #1916]	; 0x77c
   35368:	e28dd030 	add	sp, sp, #48	; 0x30
   3536c:	e8bd8010 	pop	{r4, pc}
   35370:	e3a03000 	mov	r3, #0
   35374:	e5900008 	ldr	r0, [r0, #8]
   35378:	e3a01001 	mov	r1, #1
   3537c:	e2800601 	add	r0, r0, #1048576	; 0x100000
   35380:	e58d3028 	str	r3, [sp, #40]	; 0x28
   35384:	e58d3024 	str	r3, [sp, #36]	; 0x24
   35388:	e58d3020 	str	r3, [sp, #32]
   3538c:	e58d301c 	str	r3, [sp, #28]
   35390:	e58d3018 	str	r3, [sp, #24]
   35394:	e58d3014 	str	r3, [sp, #20]
   35398:	e58d3010 	str	r3, [sp, #16]
   3539c:	e58d300c 	str	r3, [sp, #12]
   353a0:	e58d3008 	str	r3, [sp, #8]
   353a4:	e58d3004 	str	r3, [sp, #4]
   353a8:	e58d3000 	str	r3, [sp]
   353ac:	e59f204c 	ldr	r2, [pc, #76]	; 35400 <McManager::init()+0x100>
   353b0:	e59f304c 	ldr	r3, [pc, #76]	; 35404 <McManager::init()+0x104>
   353b4:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   353b8:	e2800f8f 	add	r0, r0, #572	; 0x23c
   353bc:	ebfff081 	bl	315c8 <BusSocketManager::add(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>
   353c0:	e5943010 	ldr	r3, [r4, #16]
   353c4:	e584000c 	str	r0, [r4, #12]
   353c8:	e3530000 	cmp	r3, #0
   353cc:	aaffffd4 	bge	35324 <McManager::init()+0x24>
   353d0:	e3a02000 	mov	r2, #0
   353d4:	e59f302c 	ldr	r3, [pc, #44]	; 35408 <McManager::init()+0x108>
   353d8:	e1a01004 	mov	r1, r4
   353dc:	e1cd20f0 	strd	r2, [sp]
   353e0:	e3a02001 	mov	r2, #1
   353e4:	e59f3020 	ldr	r3, [pc, #32]	; 3540c <McManager::init()+0x10c>
   353e8:	e5940004 	ldr	r0, [r4, #4]
   353ec:	ebffe9ad 	bl	2faa8 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   353f0:	e5840010 	str	r0, [r4, #16]
   353f4:	eaffffca 	b	35324 <McManager::init()+0x24>
   353f8:	00062f20 	.word	0x00062f20
   353fc:	000005e8 	.word	0x000005e8
   35400:	000351ec 	.word	0x000351ec
   35404:	00035258 	.word	0x00035258
   35408:	00035c9c 	.word	0x00035c9c
   3540c:	000351e4 	.word	0x000351e4

00035410 <McManager::getNumMachines()>:
   35410:	e2800a02 	add	r0, r0, #8192	; 0x2000
   35414:	e5900754 	ldr	r0, [r0, #1876]	; 0x754
   35418:	e12fff1e 	bx	lr

0003541c <McManager::getMachine()>:
   3541c:	e2800a02 	add	r0, r0, #8192	; 0x2000
   35420:	e5900758 	ldr	r0, [r0, #1880]	; 0x758
   35424:	e12fff1e 	bx	lr

00035428 <McManager::getMachineName()>:
   35428:	e2800a02 	add	r0, r0, #8192	; 0x2000
   3542c:	e5900758 	ldr	r0, [r0, #1880]	; 0x758
   35430:	e3500000 	cmp	r0, #0
   35434:	0a000002 	beq	35444 <McManager::getMachineName()+0x1c>
   35438:	e5903000 	ldr	r3, [r0]
   3543c:	e5933008 	ldr	r3, [r3, #8]
   35440:	e12fff13 	bx	r3
   35444:	e59f0000 	ldr	r0, [pc]	; 3544c <McManager::getMachineName()+0x24>
   35448:	e12fff1e 	bx	lr
   3544c:	00043cb4 	.word	0x00043cb4

00035450 <McManager::getMachineJSON()>:
   35450:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   35454:	e3a02e46 	mov	r2, #1120	; 0x460
   35458:	e2807a02 	add	r7, r0, #8192	; 0x2000
   3545c:	e1a09000 	mov	r9, r0
   35460:	e59f113c 	ldr	r1, [pc, #316]	; 355a4 <McManager::getMachineJSON()+0x154>
   35464:	e59f013c 	ldr	r0, [pc, #316]	; 355a8 <McManager::getMachineJSON()+0x158>
   35468:	e24ddf4e 	sub	sp, sp, #312	; 0x138
   3546c:	ebffe27c 	bl	2de64 <strlcpy>
   35470:	e5973754 	ldr	r3, [r7, #1876]	; 0x754
   35474:	e3530000 	cmp	r3, #0
   35478:	da000047 	ble	3559c <McManager::getMachineJSON()+0x14c>
   3547c:	e597072c 	ldr	r0, [r7, #1836]	; 0x72c
   35480:	e59fa120 	ldr	sl, [pc, #288]	; 355a8 <McManager::getMachineJSON()+0x158>
   35484:	e5903000 	ldr	r3, [r0]
   35488:	e3a02f4b 	mov	r2, #300	; 0x12c
   3548c:	e593300c 	ldr	r3, [r3, #12]
   35490:	e28d100c 	add	r1, sp, #12
   35494:	e2895c27 	add	r5, r9, #9984	; 0x2700
   35498:	e12fff33 	blx	r3
   3549c:	e1a0600a 	mov	r6, sl
   354a0:	e3a04000 	mov	r4, #0
   354a4:	e59f8100 	ldr	r8, [pc, #256]	; 355ac <McManager::getMachineJSON()+0x15c>
   354a8:	e285502c 	add	r5, r5, #44	; 0x2c
   354ac:	ea000009 	b	354d8 <McManager::getMachineJSON()+0x88>
   354b0:	e5b50004 	ldr	r0, [r5, #4]!
   354b4:	e3a02f4b 	mov	r2, #300	; 0x12c
   354b8:	e5903000 	ldr	r3, [r0]
   354bc:	e28d100c 	add	r1, sp, #12
   354c0:	e593300c 	ldr	r3, [r3, #12]
   354c4:	e12fff33 	blx	r3
   354c8:	e3a02e46 	mov	r2, #1120	; 0x460
   354cc:	e1a01008 	mov	r1, r8
   354d0:	e1a00006 	mov	r0, r6
   354d4:	ebffe27e 	bl	2ded4 <strlcat>
   354d8:	e3a02e46 	mov	r2, #1120	; 0x460
   354dc:	e1a00006 	mov	r0, r6
   354e0:	e28d100c 	add	r1, sp, #12
   354e4:	ebffe27a 	bl	2ded4 <strlcat>
   354e8:	e5973754 	ldr	r3, [r7, #1876]	; 0x754
   354ec:	e2844001 	add	r4, r4, #1
   354f0:	e1530004 	cmp	r3, r4
   354f4:	caffffed 	bgt	354b0 <McManager::getMachineJSON()+0x60>
   354f8:	e3a02e46 	mov	r2, #1120	; 0x460
   354fc:	e59f10ac 	ldr	r1, [pc, #172]	; 355b0 <McManager::getMachineJSON()+0x160>
   35500:	e59f00a0 	ldr	r0, [pc, #160]	; 355a8 <McManager::getMachineJSON()+0x158>
   35504:	ebffe272 	bl	2ded4 <strlcat>
   35508:	e3a02e46 	mov	r2, #1120	; 0x460
   3550c:	e59f10a0 	ldr	r1, [pc, #160]	; 355b4 <McManager::getMachineJSON()+0x164>
   35510:	e59f0090 	ldr	r0, [pc, #144]	; 355a8 <McManager::getMachineJSON()+0x158>
   35514:	ebffe26e 	bl	2ded4 <strlcat>
   35518:	e3a02e46 	mov	r2, #1120	; 0x460
   3551c:	e59f1094 	ldr	r1, [pc, #148]	; 355b8 <McManager::getMachineJSON()+0x168>
   35520:	e59f0080 	ldr	r0, [pc, #128]	; 355a8 <McManager::getMachineJSON()+0x158>
   35524:	ebffe26a 	bl	2ded4 <strlcat>
   35528:	e5970758 	ldr	r0, [r7, #1880]	; 0x758
   3552c:	e3500000 	cmp	r0, #0
   35530:	0a000017 	beq	35594 <McManager::getMachineJSON()+0x144>
   35534:	e5903000 	ldr	r3, [r0]
   35538:	e5933008 	ldr	r3, [r3, #8]
   3553c:	e12fff33 	blx	r3
   35540:	e1a01000 	mov	r1, r0
   35544:	e3a02e46 	mov	r2, #1120	; 0x460
   35548:	e59f0058 	ldr	r0, [pc, #88]	; 355a8 <McManager::getMachineJSON()+0x158>
   3554c:	ebffe260 	bl	2ded4 <strlcat>
   35550:	e3a02e46 	mov	r2, #1120	; 0x460
   35554:	e59f105c 	ldr	r1, [pc, #92]	; 355b8 <McManager::getMachineJSON()+0x168>
   35558:	e59f0048 	ldr	r0, [pc, #72]	; 355a8 <McManager::getMachineJSON()+0x158>
   3555c:	ebffe25c 	bl	2ded4 <strlcat>
   35560:	e5993008 	ldr	r3, [r9, #8]
   35564:	e59f003c 	ldr	r0, [pc, #60]	; 355a8 <McManager::getMachineJSON()+0x158>
   35568:	e5933004 	ldr	r3, [r3, #4]
   3556c:	e58d3004 	str	r3, [sp, #4]
   35570:	ebffd295 	bl	29fcc <strlen>
   35574:	e3a01e46 	mov	r1, #1120	; 0x460
   35578:	e59d3004 	ldr	r3, [sp, #4]
   3557c:	e59f2038 	ldr	r2, [pc, #56]	; 355bc <McManager::getMachineJSON()+0x16c>
   35580:	e08a0000 	add	r0, sl, r0
   35584:	ebffe2a2 	bl	2e014 <snprintf>
   35588:	e59f0018 	ldr	r0, [pc, #24]	; 355a8 <McManager::getMachineJSON()+0x158>
   3558c:	e28ddf4e 	add	sp, sp, #312	; 0x138
   35590:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35594:	e59f1024 	ldr	r1, [pc, #36]	; 355c0 <McManager::getMachineJSON()+0x170>
   35598:	eaffffe9 	b	35544 <McManager::getMachineJSON()+0xf4>
   3559c:	e59fa004 	ldr	sl, [pc, #4]	; 355a8 <McManager::getMachineJSON()+0x158>
   355a0:	eaffffd4 	b	354f8 <McManager::getMachineJSON()+0xa8>
   355a4:	000453d0 	.word	0x000453d0
   355a8:	0004ed90 	.word	0x0004ed90
   355ac:	0003ff60 	.word	0x0003ff60
   355b0:	000453e0 	.word	0x000453e0
   355b4:	000453e4 	.word	0x000453e4
   355b8:	00045258 	.word	0x00045258
   355bc:	000453f4 	.word	0x000453f4
   355c0:	00043cb4 	.word	0x00043cb4

000355c4 <McManager::add(McBase*)>:
   355c4:	e2802a02 	add	r2, r0, #8192	; 0x2000
   355c8:	e5923754 	ldr	r3, [r2, #1876]	; 0x754
   355cc:	e3530009 	cmp	r3, #9
   355d0:	c12fff1e 	bxgt	lr
   355d4:	e283cd27 	add	ip, r3, #2496	; 0x9c0
   355d8:	e28cc00a 	add	ip, ip, #10
   355dc:	e080010c 	add	r0, r0, ip, lsl #2
   355e0:	e2833001 	add	r3, r3, #1
   355e4:	e5823754 	str	r3, [r2, #1876]	; 0x754
   355e8:	e5801004 	str	r1, [r0, #4]
   355ec:	e12fff1e 	bx	lr

000355f0 <McManager::setupMachine(char const*)>:
   355f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   355f4:	e24ddf66 	sub	sp, sp, #408	; 0x198
   355f8:	e1a07000 	mov	r7, r0
   355fc:	e3a03064 	mov	r3, #100	; 0x64
   35600:	e59f0234 	ldr	r0, [pc, #564]	; 3583c <McManager::setupMachine(char const*)+0x24c>
   35604:	e28d2008 	add	r2, sp, #8
   35608:	e1a08001 	mov	r8, r1
   3560c:	ebffe2c1 	bl	2e118 <jsonGetValueForKey>
   35610:	e3500000 	cmp	r0, #0
   35614:	e2879a02 	add	r9, r7, #8192	; 0x2000
   35618:	1a00005e 	bne	35798 <McManager::setupMachine(char const*)+0x1a8>
   3561c:	e5993754 	ldr	r3, [r9, #1876]	; 0x754
   35620:	e3530000 	cmp	r3, #0
   35624:	da00001d 	ble	356a0 <McManager::setupMachine(char const*)+0xb0>
   35628:	e599072c 	ldr	r0, [r9, #1836]	; 0x72c
   3562c:	e5903000 	ldr	r3, [r0]
   35630:	e5933008 	ldr	r3, [r3, #8]
   35634:	e12fff33 	blx	r3
   35638:	e3a02064 	mov	r2, #100	; 0x64
   3563c:	e1a01000 	mov	r1, r0
   35640:	e28d0008 	add	r0, sp, #8
   35644:	ebffe206 	bl	2de64 <strlcpy>
   35648:	e5993754 	ldr	r3, [r9, #1876]	; 0x754
   3564c:	e3530000 	cmp	r3, #0
   35650:	da000012 	ble	356a0 <McManager::setupMachine(char const*)+0xb0>
   35654:	e3a04000 	mov	r4, #0
   35658:	e1a0a004 	mov	sl, r4
   3565c:	e2876c27 	add	r6, r7, #9984	; 0x2700
   35660:	e2866028 	add	r6, r6, #40	; 0x28
   35664:	e5b60004 	ldr	r0, [r6, #4]!
   35668:	e3500000 	cmp	r0, #0
   3566c:	0a000007 	beq	35690 <McManager::setupMachine(char const*)+0xa0>
   35670:	e5903000 	ldr	r3, [r0]
   35674:	e28d20d0 	add	r2, sp, #208	; 0xd0
   35678:	e5933000 	ldr	r3, [r3]
   3567c:	e58da0d0 	str	sl, [sp, #208]	; 0xd0
   35680:	e28d1008 	add	r1, sp, #8
   35684:	e12fff33 	blx	r3
   35688:	e2505000 	subs	r5, r0, #0
   3568c:	1a000007 	bne	356b0 <McManager::setupMachine(char const*)+0xc0>
   35690:	e5993754 	ldr	r3, [r9, #1876]	; 0x754
   35694:	e2844001 	add	r4, r4, #1
   35698:	e1530004 	cmp	r3, r4
   3569c:	cafffff0 	bgt	35664 <McManager::setupMachine(char const*)+0x74>
   356a0:	e3a05000 	mov	r5, #0
   356a4:	e1a00005 	mov	r0, r5
   356a8:	e28ddf66 	add	sp, sp, #408	; 0x198
   356ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   356b0:	e2844d27 	add	r4, r4, #2496	; 0x9c0
   356b4:	e284400a 	add	r4, r4, #10
   356b8:	e0874104 	add	r4, r7, r4, lsl #2
   356bc:	e5944004 	ldr	r4, [r4, #4]
   356c0:	e3540000 	cmp	r4, #0
   356c4:	0afffff5 	beq	356a0 <McManager::setupMachine(char const*)+0xb0>
   356c8:	e5970008 	ldr	r0, [r7, #8]
   356cc:	e5894758 	str	r4, [r9, #1880]	; 0x758
   356d0:	ebffee75 	bl	310ac <BusControl::machineChangeInit()>
   356d4:	e5943000 	ldr	r3, [r4]
   356d8:	e1a02008 	mov	r2, r8
   356dc:	e5933010 	ldr	r3, [r3, #16]
   356e0:	e28d1008 	add	r1, sp, #8
   356e4:	e1a00004 	mov	r0, r4
   356e8:	e12fff33 	blx	r3
   356ec:	e5943000 	ldr	r3, [r4]
   356f0:	e5971000 	ldr	r1, [r7]
   356f4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   356f8:	e1a00004 	mov	r0, r4
   356fc:	e12fff33 	blx	r3
   35700:	e5943000 	ldr	r3, [r4]
   35704:	e59f1134 	ldr	r1, [pc, #308]	; 35840 <McManager::setupMachine(char const*)+0x250>
   35708:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
   3570c:	e5976008 	ldr	r6, [r7, #8]
   35710:	e1520001 	cmp	r2, r1
   35714:	e2866601 	add	r6, r6, #1048576	; 0x100000
   35718:	e597100c 	ldr	r1, [r7, #12]
   3571c:	e2866f8f 	add	r6, r6, #572	; 0x23c
   35720:	1a000032 	bne	357f0 <McManager::setupMachine(char const*)+0x200>
   35724:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   35728:	e59f0114 	ldr	r0, [pc, #276]	; 35844 <McManager::setupMachine(char const*)+0x254>
   3572c:	e5d420a9 	ldrb	r2, [r4, #169]	; 0xa9
   35730:	e1530000 	cmp	r3, r0
   35734:	1a000037 	bne	35818 <McManager::setupMachine(char const*)+0x228>
   35738:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
   3573c:	e1a00006 	mov	r0, r6
   35740:	ebffefdf 	bl	316c4 <BusSocketManager::setup(unsigned long, bool, bool)>
   35744:	e5943000 	ldr	r3, [r4]
   35748:	e59f20f8 	ldr	r2, [pc, #248]	; 35848 <McManager::setupMachine(char const*)+0x258>
   3574c:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
   35750:	e5976008 	ldr	r6, [r7, #8]
   35754:	e1530002 	cmp	r3, r2
   35758:	1a000034 	bne	35830 <McManager::setupMachine(char const*)+0x240>
   3575c:	e59400ac 	ldr	r0, [r4, #172]	; 0xac
   35760:	e2866601 	add	r6, r6, #1048576	; 0x100000
   35764:	e5860108 	str	r0, [r6, #264]	; 0x108
   35768:	e1a01008 	mov	r1, r8
   3576c:	e3a03064 	mov	r3, #100	; 0x64
   35770:	e59f00d4 	ldr	r0, [pc, #212]	; 3584c <McManager::setupMachine(char const*)+0x25c>
   35774:	e28d206c 	add	r2, sp, #108	; 0x6c
   35778:	ebffe266 	bl	2e118 <jsonGetValueForKey>
   3577c:	e3500000 	cmp	r0, #0
   35780:	1a000009 	bne	357ac <McManager::setupMachine(char const*)+0x1bc>
   35784:	e5970008 	ldr	r0, [r7, #8]
   35788:	ebffee51 	bl	310d4 <BusControl::machineChangeComplete()>
   3578c:	e1a00005 	mov	r0, r5
   35790:	e28ddf66 	add	sp, sp, #408	; 0x198
   35794:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35798:	e28d0008 	add	r0, sp, #8
   3579c:	ebffd20a 	bl	29fcc <strlen>
   357a0:	e3500000 	cmp	r0, #0
   357a4:	0affff9c 	beq	3561c <McManager::setupMachine(char const*)+0x2c>
   357a8:	eaffffa6 	b	35648 <McManager::setupMachine(char const*)+0x58>
   357ac:	e3a020c8 	mov	r2, #200	; 0xc8
   357b0:	e59f1098 	ldr	r1, [pc, #152]	; 35850 <McManager::setupMachine(char const*)+0x260>
   357b4:	e28d00d0 	add	r0, sp, #208	; 0xd0
   357b8:	ebffe1a9 	bl	2de64 <strlcpy>
   357bc:	e3a020c8 	mov	r2, #200	; 0xc8
   357c0:	e28d106c 	add	r1, sp, #108	; 0x6c
   357c4:	e28d00d0 	add	r0, sp, #208	; 0xd0
   357c8:	ebffe1c1 	bl	2ded4 <strlcat>
   357cc:	e5970004 	ldr	r0, [r7, #4]
   357d0:	e28d10d0 	add	r1, sp, #208	; 0xd0
   357d4:	ebffecb7 	bl	30ab8 <CommandHandler::sendAPIReq(char const*)>
   357d8:	e3a01004 	mov	r1, #4
   357dc:	e59f2070 	ldr	r2, [pc, #112]	; 35854 <McManager::setupMachine(char const*)+0x264>
   357e0:	e59f0070 	ldr	r0, [pc, #112]	; 35858 <McManager::setupMachine(char const*)+0x268>
   357e4:	e28d30d0 	add	r3, sp, #208	; 0xd0
   357e8:	ebffe568 	bl	2ed90 <LogWrite>
   357ec:	eaffffe4 	b	35784 <McManager::setupMachine(char const*)+0x194>
   357f0:	e58d1000 	str	r1, [sp]
   357f4:	e1a00004 	mov	r0, r4
   357f8:	e12fff32 	blx	r2
   357fc:	e5943000 	ldr	r3, [r4]
   35800:	e1a02000 	mov	r2, r0
   35804:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   35808:	e59f0034 	ldr	r0, [pc, #52]	; 35844 <McManager::setupMachine(char const*)+0x254>
   3580c:	e59d1000 	ldr	r1, [sp]
   35810:	e1530000 	cmp	r3, r0
   35814:	0affffc7 	beq	35738 <McManager::setupMachine(char const*)+0x148>
   35818:	e88d0006 	stm	sp, {r1, r2}
   3581c:	e1a00004 	mov	r0, r4
   35820:	e12fff33 	blx	r3
   35824:	e89d0006 	ldm	sp, {r1, r2}
   35828:	e1a03000 	mov	r3, r0
   3582c:	eaffffc2 	b	3573c <McManager::setupMachine(char const*)+0x14c>
   35830:	e1a00004 	mov	r0, r4
   35834:	e12fff33 	blx	r3
   35838:	eaffffc8 	b	35760 <McManager::setupMachine(char const*)+0x170>
   3583c:	00045404 	.word	0x00045404
   35840:	00035cdc 	.word	0x00035cdc
   35844:	00035cd4 	.word	0x00035cd4
   35848:	00035cec 	.word	0x00035cec
   3584c:	0004540c 	.word	0x0004540c
   35850:	00045414 	.word	0x00045414
   35854:	00045428 	.word	0x00045428
   35858:	0004546c 	.word	0x0004546c

0003585c <McManager::setMachineByName(char const*)>:
   3585c:	e92d4010 	push	{r4, lr}
   35860:	e1a04000 	mov	r4, r0
   35864:	e24ddffa 	sub	sp, sp, #1000	; 0x3e8
   35868:	e1a03001 	mov	r3, r1
   3586c:	e59f201c 	ldr	r2, [pc, #28]	; 35890 <McManager::setMachineByName(char const*)+0x34>
   35870:	e1a0000d 	mov	r0, sp
   35874:	e3a01ffa 	mov	r1, #1000	; 0x3e8
   35878:	ebffe1e5 	bl	2e014 <snprintf>
   3587c:	e1a0100d 	mov	r1, sp
   35880:	e1a00004 	mov	r0, r4
   35884:	ebffff59 	bl	355f0 <McManager::setupMachine(char const*)>
   35888:	e28ddffa 	add	sp, sp, #1000	; 0x3e8
   3588c:	e8bd8010 	pop	{r4, pc}
   35890:	0004543c 	.word	0x0004543c

00035894 <McManager::displayRefresh()>:
   35894:	e92d4070 	push	{r4, r5, r6, lr}
   35898:	e2804a02 	add	r4, r0, #8192	; 0x2000
   3589c:	e1a05000 	mov	r5, r0
   358a0:	e5940758 	ldr	r0, [r4, #1880]	; 0x758
   358a4:	e24dd008 	sub	sp, sp, #8
   358a8:	e3500000 	cmp	r0, #0
   358ac:	0a00001d 	beq	35928 <McManager::displayRefresh()+0x94>
   358b0:	e5903000 	ldr	r3, [r0]
   358b4:	e59f214c 	ldr	r2, [pc, #332]	; 35a08 <McManager::displayRefresh()+0x174>
   358b8:	e5933058 	ldr	r3, [r3, #88]	; 0x58
   358bc:	e1530002 	cmp	r3, r2
   358c0:	1a00004a 	bne	359f0 <McManager::displayRefresh()+0x15c>
   358c4:	e5901074 	ldr	r1, [r0, #116]	; 0x74
   358c8:	e58d1004 	str	r1, [sp, #4]
   358cc:	ebffe12b 	bl	2dd80 <millis>
   358d0:	e59d1004 	ldr	r1, [sp, #4]
   358d4:	e1a06000 	mov	r6, r0
   358d8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   358dc:	eb001909 	bl	3bd08 <__udivsi3>
   358e0:	e594176c 	ldr	r1, [r4, #1900]	; 0x76c
   358e4:	e1a02000 	mov	r2, r0
   358e8:	e1a00006 	mov	r0, r6
   358ec:	ebffe140 	bl	2ddf4 <isTimeout>
   358f0:	e3500000 	cmp	r0, #0
   358f4:	1a00000d 	bne	35930 <McManager::displayRefresh()+0x9c>
   358f8:	e5940758 	ldr	r0, [r4, #1880]	; 0x758
   358fc:	e5903000 	ldr	r3, [r0]
   35900:	e59f2104 	ldr	r2, [pc, #260]	; 35a0c <McManager::displayRefresh()+0x178>
   35904:	e5933020 	ldr	r3, [r3, #32]
   35908:	e1530002 	cmp	r3, r2
   3590c:	1a000035 	bne	359e8 <McManager::displayRefresh()+0x154>
   35910:	ebffe11a 	bl	2dd80 <millis>
   35914:	e5942760 	ldr	r2, [r4, #1888]	; 0x760
   35918:	e5941770 	ldr	r1, [r4, #1904]	; 0x770
   3591c:	ebffe134 	bl	2ddf4 <isTimeout>
   35920:	e3500000 	cmp	r0, #0
   35924:	1a00001a 	bne	35994 <McManager::displayRefresh()+0x100>
   35928:	e28dd008 	add	sp, sp, #8
   3592c:	e8bd8070 	pop	{r4, r5, r6, pc}
   35930:	ebffe112 	bl	2dd80 <millis>
   35934:	e5942758 	ldr	r2, [r4, #1880]	; 0x758
   35938:	e59fc0d0 	ldr	ip, [pc, #208]	; 35a10 <McManager::displayRefresh()+0x17c>
   3593c:	e5923000 	ldr	r3, [r2]
   35940:	e584076c 	str	r0, [r4, #1900]	; 0x76c
   35944:	e5931060 	ldr	r1, [r3, #96]	; 0x60
   35948:	e5943764 	ldr	r3, [r4, #1892]	; 0x764
   3594c:	e151000c 	cmp	r1, ip
   35950:	e2833001 	add	r3, r3, #1
   35954:	e5843764 	str	r3, [r4, #1892]	; 0x764
   35958:	1a000027 	bne	359fc <McManager::displayRefresh()+0x168>
   3595c:	e5d2009c 	ldrb	r0, [r2, #156]	; 0x9c
   35960:	e3500000 	cmp	r0, #0
   35964:	1a000017 	bne	359c8 <McManager::displayRefresh()+0x134>
   35968:	e5940758 	ldr	r0, [r4, #1880]	; 0x758
   3596c:	e5903000 	ldr	r3, [r0]
   35970:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   35974:	e12fff33 	blx	r3
   35978:	e5940758 	ldr	r0, [r4, #1880]	; 0x758
   3597c:	e3500000 	cmp	r0, #0
   35980:	0affffdd 	beq	358fc <McManager::displayRefresh()+0x68>
   35984:	e5903000 	ldr	r3, [r0]
   35988:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   3598c:	e12fff33 	blx	r3
   35990:	eaffffd8 	b	358f8 <McManager::displayRefresh()+0x64>
   35994:	e5940764 	ldr	r0, [r4, #1892]	; 0x764
   35998:	e5941760 	ldr	r1, [r4, #1888]	; 0x760
   3599c:	e0603280 	rsb	r3, r0, r0, lsl #5
   359a0:	e0800103 	add	r0, r0, r3, lsl #2
   359a4:	e1a00180 	lsl	r0, r0, #3
   359a8:	eb0018d6 	bl	3bd08 <__udivsi3>
   359ac:	e3a03000 	mov	r3, #0
   359b0:	e5840768 	str	r0, [r4, #1896]	; 0x768
   359b4:	e5843764 	str	r3, [r4, #1892]	; 0x764
   359b8:	ebffe0f0 	bl	2dd80 <millis>
   359bc:	e5840770 	str	r0, [r4, #1904]	; 0x770
   359c0:	e28dd008 	add	sp, sp, #8
   359c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   359c8:	e1c500d8 	ldrd	r0, [r5, #8]
   359cc:	e2800601 	add	r0, r0, #1048576	; 0x100000
   359d0:	e3a02000 	mov	r2, #0
   359d4:	e2800f8f 	add	r0, r0, #572	; 0x23c
   359d8:	ebffef7a 	bl	317c8 <BusSocketManager::reqBus(unsigned long, BR_BUS_ACTION_REASON)>
   359dc:	e3a03001 	mov	r3, #1
   359e0:	e5c4375c 	strb	r3, [r4, #1884]	; 0x75c
   359e4:	eaffffe3 	b	35978 <McManager::displayRefresh()+0xe4>
   359e8:	e12fff33 	blx	r3
   359ec:	eaffffc7 	b	35910 <McManager::displayRefresh()+0x7c>
   359f0:	e12fff33 	blx	r3
   359f4:	e1a01000 	mov	r1, r0
   359f8:	eaffffb2 	b	358c8 <McManager::displayRefresh()+0x34>
   359fc:	e1a00002 	mov	r0, r2
   35a00:	e12fff31 	blx	r1
   35a04:	eaffffd5 	b	35960 <McManager::displayRefresh()+0xcc>
   35a08:	00035ce4 	.word	0x00035ce4
   35a0c:	00035cc8 	.word	0x00035cc8
   35a10:	00035cf4 	.word	0x00035cf4

00035a14 <McManager::service()>:
   35a14:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   35a18:	e24ddd4e 	sub	sp, sp, #4992	; 0x1380
   35a1c:	e2806a02 	add	r6, r0, #8192	; 0x2000
   35a20:	e24dd014 	sub	sp, sp, #20
   35a24:	e1a04000 	mov	r4, r0
   35a28:	ebffff99 	bl	35894 <McManager::displayRefresh()>
   35a2c:	e5d65778 	ldrb	r5, [r6, #1912]	; 0x778
   35a30:	e3550000 	cmp	r5, #0
   35a34:	0a000018 	beq	35a9c <McManager::service()+0x88>
   35a38:	e5963758 	ldr	r3, [r6, #1880]	; 0x758
   35a3c:	e3530000 	cmp	r3, #0
   35a40:	0a000015 	beq	35a9c <McManager::service()+0x88>
   35a44:	ebffe0cd 	bl	2dd80 <millis>
   35a48:	e5962774 	ldr	r2, [r6, #1908]	; 0x774
   35a4c:	e596177c 	ldr	r1, [r6, #1916]	; 0x77c
   35a50:	ebffe0e7 	bl	2ddf4 <isTimeout>
   35a54:	e3500000 	cmp	r0, #0
   35a58:	0a00000f 	beq	35a9c <McManager::service()+0x88>
   35a5c:	e5963784 	ldr	r3, [r6, #1924]	; 0x784
   35a60:	e5961780 	ldr	r1, [r6, #1920]	; 0x780
   35a64:	e2832001 	add	r2, r3, #1
   35a68:	e1530001 	cmp	r3, r1
   35a6c:	83a03000 	movhi	r3, #0
   35a70:	e5960758 	ldr	r0, [r6, #1880]	; 0x758
   35a74:	e5862784 	str	r2, [r6, #1924]	; 0x784
   35a78:	e5902000 	ldr	r2, [r0]
   35a7c:	85863784 	strhi	r3, [r6, #1924]	; 0x784
   35a80:	e5927044 	ldr	r7, [r2, #68]	; 0x44
   35a84:	e59f3058 	ldr	r3, [pc, #88]	; 35ae4 <McManager::service()+0xd0>
   35a88:	93a05000 	movls	r5, #0
   35a8c:	e1570003 	cmp	r7, r3
   35a90:	1a000004 	bne	35aa8 <McManager::service()+0x94>
   35a94:	ebffe0b9 	bl	2dd80 <millis>
   35a98:	e586077c 	str	r0, [r6, #1916]	; 0x77c
   35a9c:	e28ddd4e 	add	sp, sp, #4992	; 0x1380
   35aa0:	e28dd014 	add	sp, sp, #20
   35aa4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   35aa8:	e1a03005 	mov	r3, r5
   35aac:	e59f2034 	ldr	r2, [pc, #52]	; 35ae8 <McManager::service()+0xd4>
   35ab0:	e28d1008 	add	r1, sp, #8
   35ab4:	e12fff37 	blx	r7
   35ab8:	e3500000 	cmp	r0, #0
   35abc:	0afffff4 	beq	35a94 <McManager::service()+0x80>
   35ac0:	e28d3008 	add	r3, sp, #8
   35ac4:	e58d3000 	str	r3, [sp]
   35ac8:	e58d0004 	str	r0, [sp, #4]
   35acc:	e3a03000 	mov	r3, #0
   35ad0:	e5940004 	ldr	r0, [r4, #4]
   35ad4:	e59f2010 	ldr	r2, [pc, #16]	; 35aec <McManager::service()+0xd8>
   35ad8:	e59f1010 	ldr	r1, [pc, #16]	; 35af0 <McManager::service()+0xdc>
   35adc:	ebffe8d7 	bl	2fe40 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   35ae0:	eaffffeb 	b	35a94 <McManager::service()+0x80>
   35ae4:	00035ccc 	.word	0x00035ccc
   35ae8:	00001388 	.word	0x00001388
   35aec:	00045ac0 	.word	0x00045ac0
   35af0:	00045448 	.word	0x00045448

00035af4 <McManager::machineHeartbeat()>:
   35af4:	e2800a02 	add	r0, r0, #8192	; 0x2000
   35af8:	e5900758 	ldr	r0, [r0, #1880]	; 0x758
   35afc:	e3500000 	cmp	r0, #0
   35b00:	012fff1e 	bxeq	lr
   35b04:	e5903000 	ldr	r3, [r0]
   35b08:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   35b0c:	e12fff13 	bx	r3

00035b10 <McManager::getDisplayRefreshRate()>:
   35b10:	e2800a02 	add	r0, r0, #8192	; 0x2000
   35b14:	e5900768 	ldr	r0, [r0, #1896]	; 0x768
   35b18:	e12fff1e 	bx	lr

00035b1c <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)>:
   35b1c:	e92d4070 	push	{r4, r5, r6, lr}
   35b20:	e1a04002 	mov	r4, r2
   35b24:	e2805a02 	add	r5, r0, #8192	; 0x2000
   35b28:	e5953728 	ldr	r3, [r5, #1832]	; 0x728
   35b2c:	e59f2038 	ldr	r2, [pc, #56]	; 35b6c <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)+0x50>
   35b30:	e083c004 	add	ip, r3, r4
   35b34:	e15c0002 	cmp	ip, r2
   35b38:	9a000003 	bls	35b4c <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)+0x30>
   35b3c:	e3a03000 	mov	r3, #0
   35b40:	e1540002 	cmp	r4, r2
   35b44:	e5853728 	str	r3, [r5, #1832]	; 0x728
   35b48:	88bd8070 	pophi	{r4, r5, r6, pc}
   35b4c:	e2800014 	add	r0, r0, #20
   35b50:	e1a02004 	mov	r2, r4
   35b54:	e0800003 	add	r0, r0, r3
   35b58:	ebffd316 	bl	2a7b8 <memcpy>
   35b5c:	e5952728 	ldr	r2, [r5, #1832]	; 0x728
   35b60:	e0822004 	add	r2, r2, r4
   35b64:	e5852728 	str	r2, [r5, #1832]	; 0x728
   35b68:	e8bd8070 	pop	{r4, r5, r6, pc}
   35b6c:	0000270f 	.word	0x0000270f

00035b70 <McManager::hostSerialNumChAvailable()>:
   35b70:	e2800a02 	add	r0, r0, #8192	; 0x2000
   35b74:	e5900728 	ldr	r0, [r0, #1832]	; 0x728
   35b78:	e12fff1e 	bx	lr

00035b7c <McManager::hostSerialReadChars(unsigned char*, unsigned long)>:
   35b7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   35b80:	e2807a02 	add	r7, r0, #8192	; 0x2000
   35b84:	e5973728 	ldr	r3, [r7, #1832]	; 0x728
   35b88:	e1520003 	cmp	r2, r3
   35b8c:	31a04002 	movcc	r4, r2
   35b90:	21a04003 	movcs	r4, r3
   35b94:	e16f3f14 	clz	r3, r4
   35b98:	e3510000 	cmp	r1, #0
   35b9c:	e1a032a3 	lsr	r3, r3, #5
   35ba0:	11a05003 	movne	r5, r3
   35ba4:	03a05001 	moveq	r5, #1
   35ba8:	e3550000 	cmp	r5, #0
   35bac:	13a04000 	movne	r4, #0
   35bb0:	0a000001 	beq	35bbc <McManager::hostSerialReadChars(unsigned char*, unsigned long)+0x40>
   35bb4:	e1a00004 	mov	r0, r4
   35bb8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   35bbc:	e2806014 	add	r6, r0, #20
   35bc0:	e1a02004 	mov	r2, r4
   35bc4:	e1a00001 	mov	r0, r1
   35bc8:	e1a01006 	mov	r1, r6
   35bcc:	ebffd2f9 	bl	2a7b8 <memcpy>
   35bd0:	e5972728 	ldr	r2, [r7, #1832]	; 0x728
   35bd4:	e1520004 	cmp	r2, r4
   35bd8:	25875728 	strcs	r5, [r7, #1832]	; 0x728
   35bdc:	2afffff4 	bcs	35bb4 <McManager::hostSerialReadChars(unsigned char*, unsigned long)+0x38>
   35be0:	e1a00006 	mov	r0, r6
   35be4:	e0422004 	sub	r2, r2, r4
   35be8:	e0861004 	add	r1, r6, r4
   35bec:	ebffd0d4 	bl	29f44 <memmove>
   35bf0:	e5973728 	ldr	r3, [r7, #1832]	; 0x728
   35bf4:	e1a00004 	mov	r0, r4
   35bf8:	e0433004 	sub	r3, r3, r4
   35bfc:	e5873728 	str	r3, [r7, #1832]	; 0x728
   35c00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00035c04 <McManager::sendKeyStrToTargetStatic(char const*)>:
   35c04:	e5900004 	ldr	r0, [r0, #4]
   35c08:	eaffe87b 	b	2fdfc <CommandHandler::sendKeyStrToTargetStatic(char const*)>

00035c0c <McManager::keyHandler(unsigned char, unsigned char const*)>:
   35c0c:	e2800a02 	add	r0, r0, #8192	; 0x2000
   35c10:	e5900758 	ldr	r0, [r0, #1880]	; 0x758
   35c14:	e3500000 	cmp	r0, #0
   35c18:	012fff1e 	bxeq	lr
   35c1c:	e5903000 	ldr	r3, [r0]
   35c20:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   35c24:	e12fff13 	bx	r3

00035c28 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   35c28:	e3a00000 	mov	r0, #0
   35c2c:	e12fff1e 	bx	lr

00035c30 <McManager::targetFileHandler(char const*, unsigned char const*, unsigned int)>:
   35c30:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   35c34:	e1a04000 	mov	r4, r0
   35c38:	e1a05001 	mov	r5, r1
   35c3c:	e59f0050 	ldr	r0, [pc, #80]	; 35c94 <McManager::targetFileHandler(char const*, unsigned char const*, unsigned int)+0x64>
   35c40:	e1a06002 	mov	r6, r2
   35c44:	e3a01004 	mov	r1, #4
   35c48:	e59f2048 	ldr	r2, [pc, #72]	; 35c98 <McManager::targetFileHandler(char const*, unsigned char const*, unsigned int)+0x68>
   35c4c:	e24dd00c 	sub	sp, sp, #12
   35c50:	e1a07003 	mov	r7, r3
   35c54:	ebffe44d 	bl	2ed90 <LogWrite>
   35c58:	e2843a02 	add	r3, r4, #8192	; 0x2000
   35c5c:	e5930758 	ldr	r0, [r3, #1880]	; 0x758
   35c60:	e3500000 	cmp	r0, #0
   35c64:	0a000008 	beq	35c8c <McManager::targetFileHandler(char const*, unsigned char const*, unsigned int)+0x5c>
   35c68:	e5943008 	ldr	r3, [r4, #8]
   35c6c:	e590c000 	ldr	ip, [r0]
   35c70:	e2833018 	add	r3, r3, #24
   35c74:	e58d3000 	str	r3, [sp]
   35c78:	e1a02006 	mov	r2, r6
   35c7c:	e1a03007 	mov	r3, r7
   35c80:	e1a01005 	mov	r1, r5
   35c84:	e59c4038 	ldr	r4, [ip, #56]	; 0x38
   35c88:	e12fff34 	blx	r4
   35c8c:	e28dd00c 	add	sp, sp, #12
   35c90:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   35c94:	0004546c 	.word	0x0004546c
   35c98:	00045458 	.word	0x00045458

00035c9c <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)>:
   35c9c:	e3500000 	cmp	r0, #0
   35ca0:	012fff1e 	bxeq	lr
   35ca4:	eaffffe1 	b	35c30 <McManager::targetFileHandler(char const*, unsigned char const*, unsigned int)>

00035ca8 <McManager::busActionActive(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE)>:
   35ca8:	e3510004 	cmp	r1, #4
   35cac:	112fff1e 	bxne	lr
   35cb0:	e2802a02 	add	r2, r0, #8192	; 0x2000
   35cb4:	e5d2275c 	ldrb	r2, [r2, #1884]	; 0x75c
   35cb8:	e3520000 	cmp	r2, #0
   35cbc:	012fff1e 	bxeq	lr
   35cc0:	e1a01003 	mov	r1, r3
   35cc4:	eafffd54 	b	3521c <McManager::busActionActive(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE) [clone .part.0]>

00035cc8 <McBase::service()>:
   35cc8:	e12fff1e 	bx	lr

00035ccc <McBase::getMirrorChanges(unsigned char*, unsigned long, bool)>:
   35ccc:	e3a00000 	mov	r0, #0
   35cd0:	e12fff1e 	bx	lr

00035cd4 <McBase::isMonitorIORQEnabled()>:
   35cd4:	e5d000a8 	ldrb	r0, [r0, #168]	; 0xa8
   35cd8:	e12fff1e 	bx	lr

00035cdc <McBase::isMonitorMREQEnabled()>:
   35cdc:	e5d000a9 	ldrb	r0, [r0, #169]	; 0xa9
   35ce0:	e12fff1e 	bx	lr

00035ce4 <McBase::getDisplayRefreshRatePerSec()>:
   35ce4:	e5900074 	ldr	r0, [r0, #116]	; 0x74
   35ce8:	e12fff1e 	bx	lr

00035cec <McBase::getSetRegistersCodeAddr()>:
   35cec:	e59000ac 	ldr	r0, [r0, #172]	; 0xac
   35cf0:	e12fff1e 	bx	lr

00035cf4 <McBase::isDisplayMemoryMapped()>:
   35cf4:	e5d0009c 	ldrb	r0, [r0, #156]	; 0x9c
   35cf8:	e12fff1e 	bx	lr

00035cfc <McTRS80::enableMachine()>:
   35cfc:	e3a03000 	mov	r3, #0
   35d00:	e5c034e4 	strb	r3, [r0, #1252]	; 0x4e4
   35d04:	e5c035e5 	strb	r3, [r0, #1509]	; 0x5e5
   35d08:	e12fff1e 	bx	lr

00035d0c <McTRS80::disableMachine()>:
   35d0c:	e12fff1e 	bx	lr

00035d10 <McTRS80::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   35d10:	e2033009 	and	r3, r3, #9
   35d14:	e3530009 	cmp	r3, #9
   35d18:	112fff1e 	bxne	lr
   35d1c:	e6ef1071 	uxtb	r1, r1
   35d20:	e3510013 	cmp	r1, #19
   35d24:	03a030ff 	moveq	r3, #255	; 0xff
   35d28:	059d2000 	ldreq	r2, [sp]
   35d2c:	05823000 	streq	r3, [r2]
   35d30:	e12fff1e 	bx	lr

00035d34 <McTRS80::busActionActiveCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE)>:
   35d34:	e12fff1e 	bx	lr

00035d38 <McTRS80::keyHandler(unsigned char, unsigned char const*)>:
   35d38:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35d3c:	e1a04002 	mov	r4, r2
   35d40:	e1a07002 	mov	r7, r2
   35d44:	e4542001 	ldrb	r2, [r4], #-1
   35d48:	e24dd014 	sub	sp, sp, #20
   35d4c:	e1a03001 	mov	r3, r1
   35d50:	e1a05001 	mov	r5, r1
   35d54:	e58d2000 	str	r2, [sp]
   35d58:	e3a01004 	mov	r1, #4
   35d5c:	e1a06000 	mov	r6, r0
   35d60:	e59f23a0 	ldr	r2, [pc, #928]	; 36108 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3d0>
   35d64:	e59f03a0 	ldr	r0, [pc, #928]	; 3610c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3d4>
   35d68:	ebffe408 	bl	2ed90 <LogWrite>
   35d6c:	e3a03000 	mov	r3, #0
   35d70:	e3a09001 	mov	r9, #1
   35d74:	e1a01003 	mov	r1, r3
   35d78:	e1a00003 	mov	r0, r3
   35d7c:	e1a0e003 	mov	lr, r3
   35d80:	e1a0c003 	mov	ip, r3
   35d84:	e1a08003 	mov	r8, r3
   35d88:	e3e0a07f 	mvn	sl, #127	; 0x7f
   35d8c:	e2877005 	add	r7, r7, #5
   35d90:	e2055002 	and	r5, r5, #2
   35d94:	e58d3008 	str	r3, [sp, #8]
   35d98:	e58d300c 	str	r3, [sp, #12]
   35d9c:	ea000008 	b	35dc4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x8c>
   35da0:	e2433003 	sub	r3, r3, #3
   35da4:	e28d2010 	add	r2, sp, #16
   35da8:	e082b1c3 	add	fp, r2, r3, asr #3
   35dac:	e55b2008 	ldrb	r2, [fp, #-8]
   35db0:	e2033007 	and	r3, r3, #7
   35db4:	e1823319 	orr	r3, r2, r9, lsl r3
   35db8:	e54b3008 	strb	r3, [fp, #-8]
   35dbc:	e1540007 	cmp	r4, r7
   35dc0:	0a000016 	beq	35e20 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xe8>
   35dc4:	e5f43001 	ldrb	r3, [r4, #1]!
   35dc8:	e2432004 	sub	r2, r3, #4
   35dcc:	e3520019 	cmp	r2, #25
   35dd0:	9afffff2 	bls	35da0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x68>
   35dd4:	e353001f 	cmp	r3, #31
   35dd8:	0a000033 	beq	35eac <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x174>
   35ddc:	e3530023 	cmp	r3, #35	; 0x23
   35de0:	0a000038 	beq	35ec8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x190>
   35de4:	e3530024 	cmp	r3, #36	; 0x24
   35de8:	0a000041 	beq	35ef4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1bc>
   35dec:	e3530025 	cmp	r3, #37	; 0x25
   35df0:	0a000045 	beq	35f0c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1d4>
   35df4:	e3530026 	cmp	r3, #38	; 0x26
   35df8:	1a000049 	bne	35f24 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1ec>
   35dfc:	e3550000 	cmp	r5, #0
   35e00:	0a000033 	beq	35ed4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x19c>
   35e04:	e5dd300d 	ldrb	r3, [sp, #13]
   35e08:	e1540007 	cmp	r4, r7
   35e0c:	e3833001 	orr	r3, r3, #1
   35e10:	e3a0e001 	mov	lr, #1
   35e14:	e38cc001 	orr	ip, ip, #1
   35e18:	e5cd300d 	strb	r3, [sp, #13]
   35e1c:	1affffe8 	bne	35dc4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x8c>
   35e20:	e35e0000 	cmp	lr, #0
   35e24:	e3a0e001 	mov	lr, #1
   35e28:	15cdc00f 	strbne	ip, [sp, #15]
   35e2c:	e3510000 	cmp	r1, #0
   35e30:	15cd000e 	strbne	r0, [sp, #14]
   35e34:	e3580000 	cmp	r8, #0
   35e38:	15dd300f 	ldrbne	r3, [sp, #15]
   35e3c:	e59f72cc 	ldr	r7, [pc, #716]	; 36110 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3d8>
   35e40:	13c33003 	bicne	r3, r3, #3
   35e44:	e2865e4e 	add	r5, r6, #1248	; 0x4e0
   35e48:	e2860e5e 	add	r0, r6, #1504	; 0x5e0
   35e4c:	15cd300f 	strbne	r3, [sp, #15]
   35e50:	e0477006 	sub	r7, r7, r6
   35e54:	e2855005 	add	r5, r5, #5
   35e58:	e2800005 	add	r0, r0, #5
   35e5c:	e3a01000 	mov	r1, #0
   35e60:	e1a03001 	mov	r3, r1
   35e64:	e28d2008 	add	r2, sp, #8
   35e68:	e087c005 	add	ip, r7, r5
   35e6c:	e01c431e 	ands	r4, ip, lr, lsl r3
   35e70:	15d24000 	ldrbne	r4, [r2]
   35e74:	e2833001 	add	r3, r3, #1
   35e78:	11811004 	orrne	r1, r1, r4
   35e7c:	e3530008 	cmp	r3, #8
   35e80:	e2822001 	add	r2, r2, #1
   35e84:	1afffff8 	bne	35e6c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x134>
   35e88:	e5d53000 	ldrb	r3, [r5]
   35e8c:	e2855001 	add	r5, r5, #1
   35e90:	e1530001 	cmp	r3, r1
   35e94:	15451001 	strbne	r1, [r5, #-1]
   35e98:	15c6e5e5 	strbne	lr, [r6, #1509]	; 0x5e5
   35e9c:	e1550000 	cmp	r5, r0
   35ea0:	1affffed 	bne	35e5c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x124>
   35ea4:	e28dd014 	add	sp, sp, #20
   35ea8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35eac:	e3550000 	cmp	r5, #0
   35eb0:	0a000007 	beq	35ed4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x19c>
   35eb4:	e3a08001 	mov	r8, #1
   35eb8:	e5dd3008 	ldrb	r3, [sp, #8]
   35ebc:	e1833008 	orr	r3, r3, r8
   35ec0:	e5cd3008 	strb	r3, [sp, #8]
   35ec4:	eaffffbc 	b	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   35ec8:	e3550000 	cmp	r5, #0
   35ecc:	13a08001 	movne	r8, #1
   35ed0:	1affffb9 	bne	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   35ed4:	e243301d 	sub	r3, r3, #29
   35ed8:	e28d2010 	add	r2, sp, #16
   35edc:	e082b1c3 	add	fp, r2, r3, asr #3
   35ee0:	e55b2004 	ldrb	r2, [fp, #-4]
   35ee4:	e2033007 	and	r3, r3, #7
   35ee8:	e1823319 	orr	r3, r2, r9, lsl r3
   35eec:	e54b3004 	strb	r3, [fp, #-4]
   35ef0:	eaffffb1 	b	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   35ef4:	e3550000 	cmp	r5, #0
   35ef8:	0afffff5 	beq	35ed4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x19c>
   35efc:	e5dd300c 	ldrb	r3, [sp, #12]
   35f00:	e3833040 	orr	r3, r3, #64	; 0x40
   35f04:	e5cd300c 	strb	r3, [sp, #12]
   35f08:	eaffffab 	b	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   35f0c:	e3550000 	cmp	r5, #0
   35f10:	0affffef 	beq	35ed4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x19c>
   35f14:	e5dd300d 	ldrb	r3, [sp, #13]
   35f18:	e3833004 	orr	r3, r3, #4
   35f1c:	e5cd300d 	strb	r3, [sp, #13]
   35f20:	eaffffa5 	b	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   35f24:	e3530027 	cmp	r3, #39	; 0x27
   35f28:	1a000005 	bne	35f44 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x20c>
   35f2c:	e3550000 	cmp	r5, #0
   35f30:	1a00003d 	bne	3602c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2f4>
   35f34:	e5dd300c 	ldrb	r3, [sp, #12]
   35f38:	e3833001 	orr	r3, r3, #1
   35f3c:	e5cd300c 	strb	r3, [sp, #12]
   35f40:	eaffff9d 	b	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   35f44:	e243201e 	sub	r2, r3, #30
   35f48:	e3520008 	cmp	r2, #8
   35f4c:	9affffe0 	bls	35ed4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x19c>
   35f50:	e3530033 	cmp	r3, #51	; 0x33
   35f54:	0a000042 	beq	36064 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x32c>
   35f58:	e3530034 	cmp	r3, #52	; 0x34
   35f5c:	0a000038 	beq	36044 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x30c>
   35f60:	e3530036 	cmp	r3, #54	; 0x36
   35f64:	0a000045 	beq	36080 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x348>
   35f68:	e3530037 	cmp	r3, #55	; 0x37
   35f6c:	0a00004d 	beq	360a8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x370>
   35f70:	e353002e 	cmp	r3, #46	; 0x2e
   35f74:	0a00004f 	beq	360b8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x380>
   35f78:	e353002d 	cmp	r3, #45	; 0x2d
   35f7c:	0a000043 	beq	36090 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x358>
   35f80:	e3530038 	cmp	r3, #56	; 0x38
   35f84:	0a00005b 	beq	360f8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3c0>
   35f88:	e3530028 	cmp	r3, #40	; 0x28
   35f8c:	03a01001 	moveq	r1, #1
   35f90:	03800001 	orreq	r0, r0, #1
   35f94:	0affff88 	beq	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   35f98:	e353002a 	cmp	r3, #42	; 0x2a
   35f9c:	0a000052 	beq	360ec <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3b4>
   35fa0:	e3530029 	cmp	r3, #41	; 0x29
   35fa4:	03a01001 	moveq	r1, #1
   35fa8:	03800004 	orreq	r0, r0, #4
   35fac:	0affff82 	beq	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   35fb0:	e3530052 	cmp	r3, #82	; 0x52
   35fb4:	03a01001 	moveq	r1, #1
   35fb8:	03800008 	orreq	r0, r0, #8
   35fbc:	0affff7e 	beq	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   35fc0:	e3530051 	cmp	r3, #81	; 0x51
   35fc4:	03a01001 	moveq	r1, #1
   35fc8:	03800010 	orreq	r0, r0, #16
   35fcc:	0affff7a 	beq	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   35fd0:	e3530050 	cmp	r3, #80	; 0x50
   35fd4:	0a000044 	beq	360ec <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3b4>
   35fd8:	e353004f 	cmp	r3, #79	; 0x4f
   35fdc:	03a01001 	moveq	r1, #1
   35fe0:	03800040 	orreq	r0, r0, #64	; 0x40
   35fe4:	0affff74 	beq	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   35fe8:	e353002c 	cmp	r3, #44	; 0x2c
   35fec:	03a01001 	moveq	r1, #1
   35ff0:	03800080 	orreq	r0, r0, #128	; 0x80
   35ff4:	0affff70 	beq	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   35ff8:	e353003a 	cmp	r3, #58	; 0x3a
   35ffc:	03a01001 	moveq	r1, #1
   36000:	03800002 	orreq	r0, r0, #2
   36004:	0affff6c 	beq	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   36008:	e35300e1 	cmp	r3, #225	; 0xe1
   3600c:	03a0e001 	moveq	lr, #1
   36010:	038cc001 	orreq	ip, ip, #1
   36014:	0affff68 	beq	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   36018:	e35300e5 	cmp	r3, #229	; 0xe5
   3601c:	1a00002d 	bne	360d8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3a0>
   36020:	e3a0e001 	mov	lr, #1
   36024:	e38cc002 	orr	ip, ip, #2
   36028:	eaffff63 	b	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   3602c:	e5dd300d 	ldrb	r3, [sp, #13]
   36030:	e3a0e001 	mov	lr, #1
   36034:	e3833002 	orr	r3, r3, #2
   36038:	e38cc001 	orr	ip, ip, #1
   3603c:	e5cd300d 	strb	r3, [sp, #13]
   36040:	eaffff5d 	b	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   36044:	e3550000 	cmp	r5, #0
   36048:	0affff5b 	beq	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   3604c:	e5dd300c 	ldrb	r3, [sp, #12]
   36050:	e3a0e001 	mov	lr, #1
   36054:	e3833004 	orr	r3, r3, #4
   36058:	e38cc001 	orr	ip, ip, #1
   3605c:	e5cd300c 	strb	r3, [sp, #12]
   36060:	eaffff55 	b	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   36064:	e5dd300d 	ldrb	r3, [sp, #13]
   36068:	e3550000 	cmp	r5, #0
   3606c:	03833008 	orreq	r3, r3, #8
   36070:	13833004 	orrne	r3, r3, #4
   36074:	e3a08001 	mov	r8, #1
   36078:	e5cd300d 	strb	r3, [sp, #13]
   3607c:	eaffff4e 	b	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   36080:	e5dd300d 	ldrb	r3, [sp, #13]
   36084:	e3833010 	orr	r3, r3, #16
   36088:	e5cd300d 	strb	r3, [sp, #13]
   3608c:	eaffff4a 	b	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   36090:	e3550000 	cmp	r5, #0
   36094:	05dd300d 	ldrbeq	r3, [sp, #13]
   36098:	03a08001 	moveq	r8, #1
   3609c:	03833020 	orreq	r3, r3, #32
   360a0:	05cd300d 	strbeq	r3, [sp, #13]
   360a4:	eaffff44 	b	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   360a8:	e5dd300d 	ldrb	r3, [sp, #13]
   360ac:	e3833040 	orr	r3, r3, #64	; 0x40
   360b0:	e5cd300d 	strb	r3, [sp, #13]
   360b4:	eaffff40 	b	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   360b8:	e5dd300d 	ldrb	r3, [sp, #13]
   360bc:	e3550000 	cmp	r5, #0
   360c0:	03833020 	orreq	r3, r3, #32
   360c4:	13833008 	orrne	r3, r3, #8
   360c8:	e3a0e001 	mov	lr, #1
   360cc:	e38cc001 	orr	ip, ip, #1
   360d0:	e5cd300d 	strb	r3, [sp, #13]
   360d4:	eaffff38 	b	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   360d8:	e20330fb 	and	r3, r3, #251	; 0xfb
   360dc:	e35300e0 	cmp	r3, #224	; 0xe0
   360e0:	03a0e001 	moveq	lr, #1
   360e4:	038cc010 	orreq	ip, ip, #16
   360e8:	eaffff33 	b	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   360ec:	e3a01001 	mov	r1, #1
   360f0:	e3800020 	orr	r0, r0, #32
   360f4:	eaffff30 	b	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   360f8:	e5dd300d 	ldrb	r3, [sp, #13]
   360fc:	e18a3003 	orr	r3, sl, r3
   36100:	e5cd300d 	strb	r3, [sp, #13]
   36104:	eaffff2c 	b	35dbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x84>
   36108:	00045478 	.word	0x00045478
   3610c:	00045490 	.word	0x00045490
   36110:	fffffb1b 	.word	0xfffffb1b

00036114 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)>:
   36114:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   36118:	e1a04001 	mov	r4, r1
   3611c:	e24dd094 	sub	sp, sp, #148	; 0x94
   36120:	e59f0124 	ldr	r0, [pc, #292]	; 3624c <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x138>
   36124:	e1a06002 	mov	r6, r2
   36128:	e1a07003 	mov	r7, r3
   3612c:	e59f211c 	ldr	r2, [pc, #284]	; 36250 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x13c>
   36130:	e1a03001 	mov	r3, r1
   36134:	e3a01004 	mov	r1, #4
   36138:	ebffe314 	bl	2ed90 <LogWrite>
   3613c:	e1a01004 	mov	r1, r4
   36140:	e3a03064 	mov	r3, #100	; 0x64
   36144:	e59f0108 	ldr	r0, [pc, #264]	; 36254 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x140>
   36148:	e28d2028 	add	r2, sp, #40	; 0x28
   3614c:	ebffdff1 	bl	2e118 <jsonGetValueForKey>
   36150:	e2505000 	subs	r5, r0, #0
   36154:	0a00002e 	beq	36214 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x100>
   36158:	e59f10f8 	ldr	r1, [pc, #248]	; 36258 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x144>
   3615c:	e28d0028 	add	r0, sp, #40	; 0x28
   36160:	ebffd071 	bl	2a32c <strstr>
   36164:	e59f30f0 	ldr	r3, [pc, #240]	; 3625c <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x148>
   36168:	e3500000 	cmp	r0, #0
   3616c:	01a00003 	moveq	r0, r3
   36170:	e59f10e8 	ldr	r1, [pc, #232]	; 36260 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x14c>
   36174:	ebffcfbb 	bl	2a068 <strcasecmp>
   36178:	e3500000 	cmp	r0, #0
   3617c:	0a000014 	beq	361d4 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0xc0>
   36180:	e1a01004 	mov	r1, r4
   36184:	e3a0301e 	mov	r3, #30
   36188:	e59f00d4 	ldr	r0, [pc, #212]	; 36264 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x150>
   3618c:	e28d2008 	add	r2, sp, #8
   36190:	ebffdfe0 	bl	2e118 <jsonGetValueForKey>
   36194:	e2504000 	subs	r4, r0, #0
   36198:	01a03004 	moveq	r3, r4
   3619c:	1a000023 	bne	36230 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x11c>
   361a0:	e3a01004 	mov	r1, #4
   361a4:	e59f20bc 	ldr	r2, [pc, #188]	; 36268 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x154>
   361a8:	e59f009c 	ldr	r0, [pc, #156]	; 3624c <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x138>
   361ac:	e58d7000 	str	r7, [sp]
   361b0:	ebffe2f6 	bl	2ed90 <LogWrite>
   361b4:	e59d00a8 	ldr	r0, [sp, #168]	; 0xa8
   361b8:	e1a03007 	mov	r3, r7
   361bc:	e1a02006 	mov	r2, r6
   361c0:	e1a01004 	mov	r1, r4
   361c4:	ebfff490 	bl	3340c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   361c8:	e1a00005 	mov	r0, r5
   361cc:	e28dd094 	add	sp, sp, #148	; 0x94
   361d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   361d4:	e28d0008 	add	r0, sp, #8
   361d8:	eb000e96 	bl	39c38 <McTRS80CmdFormat::McTRS80CmdFormat()>
   361dc:	e1a03007 	mov	r3, r7
   361e0:	e3a01004 	mov	r1, #4
   361e4:	e59f2080 	ldr	r2, [pc, #128]	; 3626c <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x158>
   361e8:	e59f005c 	ldr	r0, [pc, #92]	; 3624c <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x138>
   361ec:	ebffe2e7 	bl	2ed90 <LogWrite>
   361f0:	e28d0008 	add	r0, sp, #8
   361f4:	e1cd60f0 	strd	r6, [sp]
   361f8:	e59d30a8 	ldr	r3, [sp, #168]	; 0xa8
   361fc:	e59f206c 	ldr	r2, [pc, #108]	; 36270 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x15c>
   36200:	e59f106c 	ldr	r1, [pc, #108]	; 36274 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x160>
   36204:	eb000e8c 	bl	39c3c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>
   36208:	e1a00005 	mov	r0, r5
   3620c:	e28dd094 	add	sp, sp, #148	; 0x94
   36210:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   36214:	e3a01004 	mov	r1, #4
   36218:	e59f2058 	ldr	r2, [pc, #88]	; 36278 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x164>
   3621c:	e59f0028 	ldr	r0, [pc, #40]	; 3624c <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x138>
   36220:	ebffe2da 	bl	2ed90 <LogWrite>
   36224:	e1a00005 	mov	r0, r5
   36228:	e28dd094 	add	sp, sp, #148	; 0x94
   3622c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   36230:	e3a02010 	mov	r2, #16
   36234:	e3a01000 	mov	r1, #0
   36238:	e28d0008 	add	r0, sp, #8
   3623c:	ebffd08a 	bl	2a46c <strtoul>
   36240:	e6ff3070 	uxth	r3, r0
   36244:	e1a04003 	mov	r4, r3
   36248:	eaffffd4 	b	361a0 <McTRS80::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x8c>
   3624c:	00045490 	.word	0x00045490
   36250:	00045498 	.word	0x00045498
   36254:	000447d0 	.word	0x000447d0
   36258:	0003d08c 	.word	0x0003d08c
   3625c:	00045ac0 	.word	0x00045ac0
   36260:	000454c4 	.word	0x000454c4
   36264:	000454f0 	.word	0x000454f0
   36268:	000454fc 	.word	0x000454fc
   3626c:	000454cc 	.word	0x000454cc
   36270:	00033568 	.word	0x00033568
   36274:	000334d8 	.word	0x000334d8
   36278:	000454a8 	.word	0x000454a8

0003627c <McTRS80::McTRS80(McManager&, BusControl&)>:
   3627c:	e3a03001 	mov	r3, #1
   36280:	e92d4010 	push	{r4, lr}
   36284:	e1a04000 	mov	r4, r0
   36288:	e24dd008 	sub	sp, sp, #8
   3628c:	e58d3000 	str	r3, [sp]
   36290:	e59f3040 	ldr	r3, [pc, #64]	; 362d8 <McTRS80::McTRS80(McManager&, BusControl&)+0x5c>
   36294:	eb000517 	bl	376f8 <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)>
   36298:	e1a03004 	mov	r3, r4
   3629c:	e3a01000 	mov	r1, #0
   362a0:	e59f0034 	ldr	r0, [pc, #52]	; 362dc <McTRS80::McTRS80(McManager&, BusControl&)+0x60>
   362a4:	e2842e5e 	add	r2, r4, #1504	; 0x5e0
   362a8:	e48304e0 	str	r0, [r3], #1248	; 0x4e0
   362ac:	e2833004 	add	r3, r3, #4
   362b0:	e2822004 	add	r2, r2, #4
   362b4:	e5e31001 	strb	r1, [r3, #1]!
   362b8:	e1530002 	cmp	r3, r2
   362bc:	1afffffc 	bne	362b4 <McTRS80::McTRS80(McManager&, BusControl&)+0x38>
   362c0:	e3a03001 	mov	r3, #1
   362c4:	e1a00004 	mov	r0, r4
   362c8:	e5c414e4 	strb	r1, [r4, #1252]	; 0x4e4
   362cc:	e5c435e5 	strb	r3, [r4, #1509]	; 0x5e5
   362d0:	e28dd008 	add	sp, sp, #8
   362d4:	e8bd8010 	pop	{r4, pc}
   362d8:	00046670 	.word	0x00046670
   362dc:	00045554 	.word	0x00045554

000362e0 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)>:
   362e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   362e4:	e5903000 	ldr	r3, [r0]
   362e8:	e59fc1b8 	ldr	ip, [pc, #440]	; 364a8 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1c8>
   362ec:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   362f0:	e24dd01c 	sub	sp, sp, #28
   362f4:	e153000c 	cmp	r3, ip
   362f8:	e1a08000 	mov	r8, r0
   362fc:	e1a04002 	mov	r4, r2
   36300:	e58d1014 	str	r1, [sp, #20]
   36304:	1a000064 	bne	3649c <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1bc>
   36308:	e59090e0 	ldr	r9, [r0, #224]	; 0xe0
   3630c:	e3540b01 	cmp	r4, #1024	; 0x400
   36310:	23a02000 	movcs	r2, #0
   36314:	33a02001 	movcc	r2, #1
   36318:	e3590000 	cmp	r9, #0
   3631c:	11a04002 	movne	r4, r2
   36320:	03a04001 	moveq	r4, #1
   36324:	e3540000 	cmp	r4, #0
   36328:	1a000059 	bne	36494 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1b4>
   3632c:	e5983000 	ldr	r3, [r8]
   36330:	e1a00008 	mov	r0, r8
   36334:	e5933014 	ldr	r3, [r3, #20]
   36338:	e12fff33 	blx	r3
   3633c:	e1a02000 	mov	r2, r0
   36340:	e5983000 	ldr	r3, [r8]
   36344:	e1a00008 	mov	r0, r8
   36348:	e5933014 	ldr	r3, [r3, #20]
   3634c:	e592506c 	ldr	r5, [r2, #108]	; 0x6c
   36350:	e12fff33 	blx	r3
   36354:	e1a03000 	mov	r3, r0
   36358:	e1a00005 	mov	r0, r5
   3635c:	e5931074 	ldr	r1, [r3, #116]	; 0x74
   36360:	eb0016eb 	bl	3bf14 <__divsi3>
   36364:	e5983000 	ldr	r3, [r8]
   36368:	e1a0b000 	mov	fp, r0
   3636c:	e5933014 	ldr	r3, [r3, #20]
   36370:	e1a00008 	mov	r0, r8
   36374:	e12fff33 	blx	r3
   36378:	e1a02000 	mov	r2, r0
   3637c:	e5983000 	ldr	r3, [r8]
   36380:	e1a00008 	mov	r0, r8
   36384:	e5933014 	ldr	r3, [r3, #20]
   36388:	e5925070 	ldr	r5, [r2, #112]	; 0x70
   3638c:	e12fff33 	blx	r3
   36390:	e1a03000 	mov	r3, r0
   36394:	e1a00005 	mov	r0, r5
   36398:	e5931078 	ldr	r1, [r3, #120]	; 0x78
   3639c:	eb0016dc 	bl	3bf14 <__divsi3>
   363a0:	e2503000 	subs	r3, r0, #0
   363a4:	e58d3010 	str	r3, [sp, #16]
   363a8:	da000037 	ble	3648c <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1ac>
   363ac:	e2683000 	rsb	r3, r8, #0
   363b0:	e1a00009 	mov	r0, r9
   363b4:	e1a02004 	mov	r2, r4
   363b8:	e1a09003 	mov	r9, r3
   363bc:	e28870e4 	add	r7, r8, #228	; 0xe4
   363c0:	e59fa0e4 	ldr	sl, [pc, #228]	; 364ac <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1cc>
   363c4:	e58d4000 	str	r4, [sp]
   363c8:	e087700b 	add	r7, r7, fp
   363cc:	e35b0000 	cmp	fp, #0
   363d0:	da000024 	ble	36468 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x188>
   363d4:	e59d3014 	ldr	r3, [sp, #20]
   363d8:	e59d1000 	ldr	r1, [sp]
   363dc:	e047400b 	sub	r4, r7, fp
   363e0:	e0835001 	add	r5, r3, r1
   363e4:	e24930e4 	sub	r3, r9, #228	; 0xe4
   363e8:	e98d0808 	stmib	sp, {r3, fp}
   363ec:	e58d900c 	str	r9, [sp, #12]
   363f0:	e1a0b000 	mov	fp, r0
   363f4:	e1a09002 	mov	r9, r2
   363f8:	ea000004 	b	36410 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x130>
   363fc:	e5c43000 	strb	r3, [r4]
   36400:	e2844001 	add	r4, r4, #1
   36404:	e1540007 	cmp	r4, r7
   36408:	e2855001 	add	r5, r5, #1
   3640c:	0a000011 	beq	36458 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x178>
   36410:	e5d834e4 	ldrb	r3, [r8, #1252]	; 0x4e4
   36414:	e3530000 	cmp	r3, #0
   36418:	e5d53000 	ldrb	r3, [r5]
   3641c:	0a000002 	beq	3642c <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x14c>
   36420:	e5d41000 	ldrb	r1, [r4]
   36424:	e1510003 	cmp	r1, r3
   36428:	0afffff4 	beq	36400 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x120>
   3642c:	e59b1000 	ldr	r1, [fp]
   36430:	e5916028 	ldr	r6, [r1, #40]	; 0x28
   36434:	e156000a 	cmp	r6, sl
   36438:	0affffef 	beq	363fc <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x11c>
   3643c:	e59d1004 	ldr	r1, [sp, #4]
   36440:	e1a02009 	mov	r2, r9
   36444:	e1a0000b 	mov	r0, fp
   36448:	e0811004 	add	r1, r1, r4
   3644c:	e12fff36 	blx	r6
   36450:	e5d53000 	ldrb	r3, [r5]
   36454:	eaffffe8 	b	363fc <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x11c>
   36458:	e1a02009 	mov	r2, r9
   3645c:	e1a0000b 	mov	r0, fp
   36460:	e59d900c 	ldr	r9, [sp, #12]
   36464:	e59db008 	ldr	fp, [sp, #8]
   36468:	e59d3010 	ldr	r3, [sp, #16]
   3646c:	e2822001 	add	r2, r2, #1
   36470:	e1530002 	cmp	r3, r2
   36474:	e59d3000 	ldr	r3, [sp]
   36478:	e087700b 	add	r7, r7, fp
   3647c:	e083300b 	add	r3, r3, fp
   36480:	e58d3000 	str	r3, [sp]
   36484:	e049900b 	sub	r9, r9, fp
   36488:	1affffcf 	bne	363cc <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xec>
   3648c:	e3a03001 	mov	r3, #1
   36490:	e5c834e4 	strb	r3, [r8, #1252]	; 0x4e4
   36494:	e28dd01c 	add	sp, sp, #28
   36498:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3649c:	e12fff33 	blx	r3
   364a0:	e1a09000 	mov	r9, r0
   364a4:	eaffff98 	b	3630c <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x2c>
   364a8:	000365a4 	.word	0x000365a4
   364ac:	00036590 	.word	0x00036590

000364b0 <McTRS80::refreshDisplay()>:
   364b0:	e3a03000 	mov	r3, #0
   364b4:	e92d4070 	push	{r4, r5, r6, lr}
   364b8:	e5902008 	ldr	r2, [r0, #8]
   364bc:	e1a04000 	mov	r4, r0
   364c0:	e24ddb01 	sub	sp, sp, #1024	; 0x400
   364c4:	e59f00b4 	ldr	r0, [pc, #180]	; 36580 <McTRS80::refreshDisplay()+0xd0>
   364c8:	e24dd008 	sub	sp, sp, #8
   364cc:	e0820000 	add	r0, r2, r0
   364d0:	e58d3000 	str	r3, [sp]
   364d4:	e3a01b0f 	mov	r1, #15360	; 0x3c00
   364d8:	e3a03b01 	mov	r3, #1024	; 0x400
   364dc:	e28d2008 	add	r2, sp, #8
   364e0:	ebfff43a 	bl	335d0 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   364e4:	e3500000 	cmp	r0, #0
   364e8:	0a00001f 	beq	3656c <McTRS80::refreshDisplay()+0xbc>
   364ec:	e5d435e5 	ldrb	r3, [r4, #1509]	; 0x5e5
   364f0:	e3530000 	cmp	r3, #0
   364f4:	0a000019 	beq	36560 <McTRS80::refreshDisplay()+0xb0>
   364f8:	e2846e4e 	add	r6, r4, #1248	; 0x4e0
   364fc:	e3a03000 	mov	r3, #0
   36500:	e2862004 	add	r2, r6, #4
   36504:	ea000002 	b	36514 <McTRS80::refreshDisplay()+0x64>
   36508:	e2833001 	add	r3, r3, #1
   3650c:	e3530c01 	cmp	r3, #256	; 0x100
   36510:	0a000008 	beq	36538 <McTRS80::refreshDisplay()+0x88>
   36514:	e5f21001 	ldrb	r1, [r2, #1]!
   36518:	e3510000 	cmp	r1, #0
   3651c:	0afffff9 	beq	36508 <McTRS80::refreshDisplay()+0x58>
   36520:	e58d1000 	str	r1, [sp]
   36524:	e59f2058 	ldr	r2, [pc, #88]	; 36584 <McTRS80::refreshDisplay()+0xd4>
   36528:	e3a01004 	mov	r1, #4
   3652c:	e59f0054 	ldr	r0, [pc, #84]	; 36588 <McTRS80::refreshDisplay()+0xd8>
   36530:	e2833b0e 	add	r3, r3, #14336	; 0x3800
   36534:	ebffe215 	bl	2ed90 <LogWrite>
   36538:	e3a05000 	mov	r5, #0
   3653c:	e5943008 	ldr	r3, [r4, #8]
   36540:	e59f0038 	ldr	r0, [pc, #56]	; 36580 <McTRS80::refreshDisplay()+0xd0>
   36544:	e3a01b0e 	mov	r1, #14336	; 0x3800
   36548:	e0830000 	add	r0, r3, r0
   3654c:	e2862005 	add	r2, r6, #5
   36550:	e3a03c01 	mov	r3, #256	; 0x100
   36554:	e58d5000 	str	r5, [sp]
   36558:	ebfff426 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3655c:	e5c455e5 	strb	r5, [r4, #1509]	; 0x5e5
   36560:	e28ddb01 	add	sp, sp, #1024	; 0x400
   36564:	e28dd008 	add	sp, sp, #8
   36568:	e8bd8070 	pop	{r4, r5, r6, pc}
   3656c:	e3a02b01 	mov	r2, #1024	; 0x400
   36570:	e1a00004 	mov	r0, r4
   36574:	e28d1008 	add	r1, sp, #8
   36578:	ebffff58 	bl	362e0 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)>
   3657c:	eaffffda 	b	364ec <McTRS80::refreshDisplay()+0x3c>
   36580:	00100404 	.word	0x00100404
   36584:	0004552c 	.word	0x0004552c
   36588:	00045490 	.word	0x00045490

0003658c <McTRS80::handleWD1771DiskController(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   3658c:	e12fff1e 	bx	lr

00036590 <DisplayBase::write(unsigned long, unsigned long, unsigned long)>:
   36590:	e12fff1e 	bx	lr

00036594 <McBase::setMonitorIORQEnabled(bool)>:
   36594:	e5c010a8 	strb	r1, [r0, #168]	; 0xa8
   36598:	e12fff1e 	bx	lr

0003659c <McBase::setMonitorMREQEnabled(bool)>:
   3659c:	e5c010a9 	strb	r1, [r0, #169]	; 0xa9
   365a0:	e12fff1e 	bx	lr

000365a4 <McBase::getDisplay()>:
   365a4:	e59000e0 	ldr	r0, [r0, #224]	; 0xe0
   365a8:	e12fff1e 	bx	lr

000365ac <McTerminal::enableMachine()>:
   365ac:	e12fff1e 	bx	lr

000365b0 <McTerminal::busActionActiveCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON, BR_RETURN_TYPE)>:
   365b0:	e3510001 	cmp	r1, #1
   365b4:	03530000 	cmpeq	r3, #0
   365b8:	03a02001 	moveq	r2, #1
   365bc:	03a03000 	moveq	r3, #0
   365c0:	02800a61 	addeq	r0, r0, #397312	; 0x61000
   365c4:	05c02b85 	strbeq	r2, [r0, #2949]	; 0xb85
   365c8:	05c03b86 	strbeq	r3, [r0, #2950]	; 0xb86
   365cc:	e12fff1e 	bx	lr

000365d0 <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)>:
   365d0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   365d4:	e24dd094 	sub	sp, sp, #148	; 0x94
   365d8:	e1a06002 	mov	r6, r2
   365dc:	e1a05003 	mov	r5, r3
   365e0:	e59f009c 	ldr	r0, [pc, #156]	; 36684 <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0xb4>
   365e4:	e3a03064 	mov	r3, #100	; 0x64
   365e8:	e28d2028 	add	r2, sp, #40	; 0x28
   365ec:	e1a04001 	mov	r4, r1
   365f0:	ebffdec8 	bl	2e118 <jsonGetValueForKey>
   365f4:	e2507000 	subs	r7, r0, #0
   365f8:	1a000002 	bne	36608 <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x38>
   365fc:	e1a00007 	mov	r0, r7
   36600:	e28dd094 	add	sp, sp, #148	; 0x94
   36604:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   36608:	e59f1078 	ldr	r1, [pc, #120]	; 36688 <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0xb8>
   3660c:	e28d0028 	add	r0, sp, #40	; 0x28
   36610:	ebffcf45 	bl	2a32c <strstr>
   36614:	e1a01004 	mov	r1, r4
   36618:	e3a0301e 	mov	r3, #30
   3661c:	e59f0068 	ldr	r0, [pc, #104]	; 3668c <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0xbc>
   36620:	e28d2008 	add	r2, sp, #8
   36624:	ebffdebb 	bl	2e118 <jsonGetValueForKey>
   36628:	e2504000 	subs	r4, r0, #0
   3662c:	01a03004 	moveq	r3, r4
   36630:	1a00000c 	bne	36668 <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x98>
   36634:	e3a01004 	mov	r1, #4
   36638:	e59f2050 	ldr	r2, [pc, #80]	; 36690 <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0xc0>
   3663c:	e59f0050 	ldr	r0, [pc, #80]	; 36694 <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0xc4>
   36640:	e58d5000 	str	r5, [sp]
   36644:	ebffe1d1 	bl	2ed90 <LogWrite>
   36648:	e59d00a8 	ldr	r0, [sp, #168]	; 0xa8
   3664c:	e1a03005 	mov	r3, r5
   36650:	e1a02006 	mov	r2, r6
   36654:	e1a01004 	mov	r1, r4
   36658:	ebfff36b 	bl	3340c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   3665c:	e1a00007 	mov	r0, r7
   36660:	e28dd094 	add	sp, sp, #148	; 0x94
   36664:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   36668:	e3a02010 	mov	r2, #16
   3666c:	e3a01000 	mov	r1, #0
   36670:	e28d0008 	add	r0, sp, #8
   36674:	ebffcf7c 	bl	2a46c <strtoul>
   36678:	e6ff3070 	uxth	r3, r0
   3667c:	e1a04003 	mov	r4, r3
   36680:	eaffffeb 	b	36634 <McTerminal::fileHandler(char const*, unsigned char const*, int, TargetProgrammer&)+0x64>
   36684:	000447d0 	.word	0x000447d0
   36688:	0003d08c 	.word	0x0003d08c
   3668c:	000454f0 	.word	0x000454f0
   36690:	000454fc 	.word	0x000454fc
   36694:	000455bc 	.word	0x000455bc

00036698 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   36698:	e92d4010 	push	{r4, lr}
   3669c:	e2804a61 	add	r4, r0, #397312	; 0x61000
   366a0:	e5d4cb84 	ldrb	ip, [r4, #2948]	; 0xb84
   366a4:	e35c0000 	cmp	ip, #0
   366a8:	e59dc008 	ldr	ip, [sp, #8]
   366ac:	08bd8010 	popeq	{r4, pc}
   366b0:	e203e018 	and	lr, r3, #24
   366b4:	e35e0008 	cmp	lr, #8
   366b8:	18bd8010 	popne	{r4, pc}
   366bc:	e201e0c0 	and	lr, r1, #192	; 0xc0
   366c0:	e35e0080 	cmp	lr, #128	; 0x80
   366c4:	18bd8010 	popne	{r4, pc}
   366c8:	e3130001 	tst	r3, #1
   366cc:	1a00000d 	bne	36708 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x70>
   366d0:	e3130002 	tst	r3, #2
   366d4:	08bd8010 	popeq	{r4, pc}
   366d8:	e2113001 	ands	r3, r1, #1
   366dc:	1a00003d 	bne	367d8 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x140>
   366e0:	e1a013a2 	lsr	r1, r2, #7
   366e4:	e2022003 	and	r2, r2, #3
   366e8:	e2011001 	and	r1, r1, #1
   366ec:	e3520003 	cmp	r2, #3
   366f0:	e5c41b87 	strb	r1, [r4, #2951]	; 0xb87
   366f4:	0a00003f 	beq	367f8 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x160>
   366f8:	e5d42b86 	ldrb	r2, [r4, #2950]	; 0xb86
   366fc:	e3520000 	cmp	r2, #0
   36700:	15c43b86 	strbne	r3, [r4, #2950]	; 0xb86
   36704:	e8bd8010 	pop	{r4, pc}
   36708:	e3110001 	tst	r1, #1
   3670c:	1a00000b 	bne	36740 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0xa8>
   36710:	e5943b8c 	ldr	r3, [r4, #2956]	; 0xb8c
   36714:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   36718:	e1530002 	cmp	r3, r2
   3671c:	13a03003 	movne	r3, #3
   36720:	03a03002 	moveq	r3, #2
   36724:	e58c3000 	str	r3, [ip]
   36728:	e5d42b85 	ldrb	r2, [r4, #2949]	; 0xb85
   3672c:	e3520000 	cmp	r2, #0
   36730:	0a000024 	beq	367c8 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x130>
   36734:	e3833030 	orr	r3, r3, #48	; 0x30
   36738:	e58c3000 	str	r3, [ip]
   3673c:	e8bd8010 	pop	{r4, pc}
   36740:	e3a01000 	mov	r1, #0
   36744:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   36748:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   3674c:	e58c1000 	str	r1, [ip]
   36750:	e1520003 	cmp	r2, r3
   36754:	0a000018 	beq	367bc <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x124>
   36758:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   3675c:	e59fe0a4 	ldr	lr, [pc, #164]	; 36808 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x170>
   36760:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   36764:	e0802002 	add	r2, r0, r2
   36768:	e7d2200e 	ldrb	r2, [r2, lr]
   3676c:	e2833001 	add	r3, r3, #1
   36770:	e58c2000 	str	r2, [ip]
   36774:	e5843b90 	str	r3, [r4, #2960]	; 0xb90
   36778:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   3677c:	e5943b94 	ldr	r3, [r4, #2964]	; 0xb94
   36780:	e1520003 	cmp	r2, r3
   36784:	e5d43b87 	ldrb	r3, [r4, #2951]	; 0xb87
   36788:	25841b90 	strcs	r1, [r4, #2960]	; 0xb90
   3678c:	e3530000 	cmp	r3, #0
   36790:	0a000009 	beq	367bc <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x124>
   36794:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   36798:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   3679c:	e1520003 	cmp	r2, r3
   367a0:	0a000005 	beq	367bc <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x124>
   367a4:	e5903004 	ldr	r3, [r0, #4]
   367a8:	e3e02000 	mvn	r2, #0
   367ac:	e1c300d8 	ldrd	r0, [r3, #8]
   367b0:	e2800601 	add	r0, r0, #1048576	; 0x100000
   367b4:	e2800f8f 	add	r0, r0, #572	; 0x23c
   367b8:	ebffebcf 	bl	316fc <BusSocketManager::reqIRQ(unsigned long, int)>
   367bc:	e3a03000 	mov	r3, #0
   367c0:	e5c43b85 	strb	r3, [r4, #2949]	; 0xb85
   367c4:	e8bd8010 	pop	{r4, pc}
   367c8:	e5d43b86 	ldrb	r3, [r4, #2950]	; 0xb86
   367cc:	e3530000 	cmp	r3, #0
   367d0:	158c2000 	strne	r2, [ip]
   367d4:	e8bd8010 	pop	{r4, pc}
   367d8:	e5940b88 	ldr	r0, [r4, #2952]	; 0xb88
   367dc:	e3500000 	cmp	r0, #0
   367e0:	08bd8010 	popeq	{r4, pc}
   367e4:	e5903000 	ldr	r3, [r0]
   367e8:	e1a01002 	mov	r1, r2
   367ec:	e8bd4010 	pop	{r4, lr}
   367f0:	e593300c 	ldr	r3, [r3, #12]
   367f4:	e12fff13 	bx	r3
   367f8:	e3a02001 	mov	r2, #1
   367fc:	e5c43b85 	strb	r3, [r4, #2949]	; 0xb85
   36800:	e5c42b86 	strb	r2, [r4, #2950]	; 0xb86
   36804:	e8bd8010 	pop	{r4, pc}
   36808:	00061b98 	.word	0x00061b98

0003680c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)>:
   3680c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36810:	e3530000 	cmp	r3, #0
   36814:	e24dd014 	sub	sp, sp, #20
   36818:	e1a09000 	mov	r9, r0
   3681c:	e1a06001 	mov	r6, r1
   36820:	e58d2004 	str	r2, [sp, #4]
   36824:	0a000010 	beq	3686c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x60>
   36828:	e1a03000 	mov	r3, r0
   3682c:	e3e01000 	mvn	r1, #0
   36830:	e2802bc3 	add	r2, r0, #199680	; 0x30c00
   36834:	e2822d05 	add	r2, r2, #320	; 0x140
   36838:	e5c310e7 	strb	r1, [r3, #231]	; 0xe7
   3683c:	e2833004 	add	r3, r3, #4
   36840:	e1520003 	cmp	r2, r3
   36844:	1afffffb 	bne	36838 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x2c>
   36848:	e3a03000 	mov	r3, #0
   3684c:	e3e00000 	mvn	r0, #0
   36850:	e59f2144 	ldr	r2, [pc, #324]	; 3699c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x190>
   36854:	e59f1144 	ldr	r1, [pc, #324]	; 369a0 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x194>
   36858:	e0892002 	add	r2, r9, r2
   3685c:	e7c20103 	strb	r0, [r2, r3, lsl #2]
   36860:	e2833001 	add	r3, r3, #1
   36864:	e1530001 	cmp	r3, r1
   36868:	1afffffb 	bne	3685c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x50>
   3686c:	e59d3004 	ldr	r3, [sp, #4]
   36870:	e3530009 	cmp	r3, #9
   36874:	83a05000 	movhi	r5, #0
   36878:	93a05001 	movls	r5, #1
   3687c:	e3560000 	cmp	r6, #0
   36880:	03a05001 	moveq	r5, #1
   36884:	e3550000 	cmp	r5, #0
   36888:	1a00003f 	bne	3698c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x180>
   3688c:	e2897a61 	add	r7, r9, #397312	; 0x61000
   36890:	e5973b88 	ldr	r3, [r7, #2952]	; 0xb88
   36894:	e593300c 	ldr	r3, [r3, #12]
   36898:	e5c63000 	strb	r3, [r6]
   3689c:	e5973b88 	ldr	r3, [r7, #2952]	; 0xb88
   368a0:	e5933010 	ldr	r3, [r3, #16]
   368a4:	e5c63001 	strb	r3, [r6, #1]
   368a8:	e5973b88 	ldr	r3, [r7, #2952]	; 0xb88
   368ac:	e5932010 	ldr	r2, [r3, #16]
   368b0:	e3520000 	cmp	r2, #0
   368b4:	13a02002 	movne	r2, #2
   368b8:	0a000033 	beq	3698c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x180>
   368bc:	e593c00c 	ldr	ip, [r3, #12]
   368c0:	e35c0000 	cmp	ip, #0
   368c4:	0a000027 	beq	36968 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x15c>
   368c8:	e3a04000 	mov	r4, #0
   368cc:	e02c4c95 	mla	ip, r5, ip, r4
   368d0:	e5931008 	ldr	r1, [r3, #8]
   368d4:	e28cacc3 	add	sl, ip, #49920	; 0xc300
   368d8:	e15c0001 	cmp	ip, r1
   368dc:	35933004 	ldrcc	r3, [r3, #4]
   368e0:	2283b028 	addcs	fp, r3, #40	; 0x28
   368e4:	3083b10c 	addcc	fp, r3, ip, lsl #2
   368e8:	e28a3089 	add	r3, sl, #137	; 0x89
   368ec:	e7990103 	ldr	r0, [r9, r3, lsl #2]
   368f0:	e59b1000 	ldr	r1, [fp]
   368f4:	e2828006 	add	r8, r2, #6
   368f8:	e1500001 	cmp	r0, r1
   368fc:	e0860002 	add	r0, r6, r2
   36900:	0a000013 	beq	36954 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x148>
   36904:	e59d3004 	ldr	r3, [sp, #4]
   36908:	e1530008 	cmp	r3, r8
   3690c:	3a000019 	bcc	36978 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x16c>
   36910:	e5cd5009 	strb	r5, [sp, #9]
   36914:	e5cd4008 	strb	r4, [sp, #8]
   36918:	e5db1000 	ldrb	r1, [fp]
   3691c:	e3a02006 	mov	r2, #6
   36920:	e5cd100a 	strb	r1, [sp, #10]
   36924:	e5dbc001 	ldrb	ip, [fp, #1]
   36928:	e28d1008 	add	r1, sp, #8
   3692c:	e5cdc00b 	strb	ip, [sp, #11]
   36930:	e5dbc002 	ldrb	ip, [fp, #2]
   36934:	e5cdc00c 	strb	ip, [sp, #12]
   36938:	e5dbc003 	ldrb	ip, [fp, #3]
   3693c:	e5cdc00d 	strb	ip, [sp, #13]
   36940:	ebffcf9c 	bl	2a7b8 <memcpy>
   36944:	e1a02008 	mov	r2, r8
   36948:	e59b3000 	ldr	r3, [fp]
   3694c:	e089c10a 	add	ip, r9, sl, lsl #2
   36950:	e58c3224 	str	r3, [ip, #548]	; 0x224
   36954:	e5973b88 	ldr	r3, [r7, #2952]	; 0xb88
   36958:	e2844001 	add	r4, r4, #1
   3695c:	e593c00c 	ldr	ip, [r3, #12]
   36960:	e15c0004 	cmp	ip, r4
   36964:	8affffd8 	bhi	368cc <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0xc0>
   36968:	e5931010 	ldr	r1, [r3, #16]
   3696c:	e2855001 	add	r5, r5, #1
   36970:	e1510005 	cmp	r1, r5
   36974:	8affffd0 	bhi	368bc <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0xb0>
   36978:	e3520002 	cmp	r2, #2
   3697c:	0a000002 	beq	3698c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x180>
   36980:	e1a00002 	mov	r0, r2
   36984:	e28dd014 	add	sp, sp, #20
   36988:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3698c:	e3a02000 	mov	r2, #0
   36990:	e1a00002 	mov	r0, r2
   36994:	e28dd014 	add	sp, sp, #20
   36998:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3699c:	00030e27 	.word	0x00030e27
   369a0:	0000c350 	.word	0x0000c350

000369a4 <McTerminal::refreshDisplay()>:
   369a4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   369a8:	e5903000 	ldr	r3, [r0]
   369ac:	e59f244c 	ldr	r2, [pc, #1100]	; 36e00 <McTerminal::refreshDisplay()+0x45c>
   369b0:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   369b4:	e1a07000 	mov	r7, r0
   369b8:	e1530002 	cmp	r3, r2
   369bc:	e24ddffb 	sub	sp, sp, #1004	; 0x3ec
   369c0:	1a0000ba 	bne	36cb0 <McTerminal::refreshDisplay()+0x30c>
   369c4:	e59080e0 	ldr	r8, [r0, #224]	; 0xe0
   369c8:	e3580000 	cmp	r8, #0
   369cc:	0a000068 	beq	36b74 <McTerminal::refreshDisplay()+0x1d0>
   369d0:	e5970004 	ldr	r0, [r7, #4]
   369d4:	ebfffc65 	bl	35b70 <McManager::hostSerialNumChAvailable()>
   369d8:	e3500000 	cmp	r0, #0
   369dc:	1a000066 	bne	36b7c <McTerminal::refreshDisplay()+0x1d8>
   369e0:	e287aa61 	add	sl, r7, #397312	; 0x61000
   369e4:	e59a0b88 	ldr	r0, [sl, #2952]	; 0xb88
   369e8:	e3500000 	cmp	r0, #0
   369ec:	0a000060 	beq	36b74 <McTerminal::refreshDisplay()+0x1d0>
   369f0:	e5903000 	ldr	r3, [r0]
   369f4:	e59f2408 	ldr	r2, [pc, #1032]	; 36e04 <McTerminal::refreshDisplay()+0x460>
   369f8:	e5933014 	ldr	r3, [r3, #20]
   369fc:	e1530002 	cmp	r3, r2
   36a00:	1a0000c9 	bne	36d2c <McTerminal::refreshDisplay()+0x388>
   36a04:	e5d0001c 	ldrb	r0, [r0, #28]
   36a08:	e3500000 	cmp	r0, #0
   36a0c:	0a000095 	beq	36c68 <McTerminal::refreshDisplay()+0x2c4>
   36a10:	e5da3b6c 	ldrb	r3, [sl, #2924]	; 0xb6c
   36a14:	e3530000 	cmp	r3, #0
   36a18:	1a0000a7 	bne	36cbc <McTerminal::refreshDisplay()+0x318>
   36a1c:	e59a4b88 	ldr	r4, [sl, #2952]	; 0xb88
   36a20:	e5943010 	ldr	r3, [r4, #16]
   36a24:	e3530000 	cmp	r3, #0
   36a28:	0a00008f 	beq	36c6c <McTerminal::refreshDisplay()+0x2c8>
   36a2c:	e3a0b000 	mov	fp, #0
   36a30:	e594300c 	ldr	r3, [r4, #12]
   36a34:	e3530000 	cmp	r3, #0
   36a38:	0a00006a 	beq	36be8 <McTerminal::refreshDisplay()+0x244>
   36a3c:	e3a05000 	mov	r5, #0
   36a40:	ea000011 	b	36a8c <McTerminal::refreshDisplay()+0xe8>
   36a44:	e1520001 	cmp	r2, r1
   36a48:	1a0000a5 	bne	36ce4 <McTerminal::refreshDisplay()+0x340>
   36a4c:	e5932020 	ldr	r2, [r3, #32]
   36a50:	e59f13b0 	ldr	r1, [pc, #944]	; 36e08 <McTerminal::refreshDisplay()+0x464>
   36a54:	e1520001 	cmp	r2, r1
   36a58:	1a0000a9 	bne	36d04 <McTerminal::refreshDisplay()+0x360>
   36a5c:	e5939028 	ldr	r9, [r3, #40]	; 0x28
   36a60:	e59f33a4 	ldr	r3, [pc, #932]	; 36e0c <McTerminal::refreshDisplay()+0x468>
   36a64:	e1590003 	cmp	r9, r3
   36a68:	1a000026 	bne	36b08 <McTerminal::refreshDisplay()+0x164>
   36a6c:	e5942000 	ldr	r2, [r4]
   36a70:	e0873106 	add	r3, r7, r6, lsl #2
   36a74:	e58320e4 	str	r2, [r3, #228]	; 0xe4
   36a78:	e59a4b88 	ldr	r4, [sl, #2952]	; 0xb88
   36a7c:	e2855001 	add	r5, r5, #1
   36a80:	e594300c 	ldr	r3, [r4, #12]
   36a84:	e1530005 	cmp	r3, r5
   36a88:	9a000056 	bls	36be8 <McTerminal::refreshDisplay()+0x244>
   36a8c:	e026539b 	mla	r6, fp, r3, r5
   36a90:	e5943008 	ldr	r3, [r4, #8]
   36a94:	e1560003 	cmp	r6, r3
   36a98:	35944004 	ldrcc	r4, [r4, #4]
   36a9c:	22844028 	addcs	r4, r4, #40	; 0x28
   36aa0:	30844106 	addcc	r4, r4, r6, lsl #2
   36aa4:	e2863039 	add	r3, r6, #57	; 0x39
   36aa8:	e7972103 	ldr	r2, [r7, r3, lsl #2]
   36aac:	e5943000 	ldr	r3, [r4]
   36ab0:	e1520003 	cmp	r2, r3
   36ab4:	0affffef 	beq	36a78 <McTerminal::refreshDisplay()+0xd4>
   36ab8:	e5d43003 	ldrb	r3, [r4, #3]
   36abc:	e59f134c 	ldr	r1, [pc, #844]	; 36e10 <McTerminal::refreshDisplay()+0x46c>
   36ac0:	e3130010 	tst	r3, #16
   36ac4:	e5983000 	ldr	r3, [r8]
   36ac8:	e593201c 	ldr	r2, [r3, #28]
   36acc:	1affffdc 	bne	36a44 <McTerminal::refreshDisplay()+0xa0>
   36ad0:	e1520001 	cmp	r2, r1
   36ad4:	1a00008f 	bne	36d18 <McTerminal::refreshDisplay()+0x374>
   36ad8:	e5932020 	ldr	r2, [r3, #32]
   36adc:	e59f1324 	ldr	r1, [pc, #804]	; 36e08 <McTerminal::refreshDisplay()+0x464>
   36ae0:	e1520001 	cmp	r2, r1
   36ae4:	0affffdc 	beq	36a5c <McTerminal::refreshDisplay()+0xb8>
   36ae8:	e1a00008 	mov	r0, r8
   36aec:	e1d410d2 	ldrsb	r1, [r4, #2]
   36af0:	e12fff32 	blx	r2
   36af4:	e5983000 	ldr	r3, [r8]
   36af8:	e5939028 	ldr	r9, [r3, #40]	; 0x28
   36afc:	e59f3308 	ldr	r3, [pc, #776]	; 36e0c <McTerminal::refreshDisplay()+0x468>
   36b00:	e1590003 	cmp	r9, r3
   36b04:	0affffd8 	beq	36a6c <McTerminal::refreshDisplay()+0xc8>
   36b08:	e1a0200b 	mov	r2, fp
   36b0c:	e1a01005 	mov	r1, r5
   36b10:	e1a00008 	mov	r0, r8
   36b14:	e5d43000 	ldrb	r3, [r4]
   36b18:	e12fff39 	blx	r9
   36b1c:	eaffffd2 	b	36a6c <McTerminal::refreshDisplay()+0xc8>
   36b20:	ebffdc95 	bl	2dd7c <micros>
   36b24:	e59a3b68 	ldr	r3, [sl, #2920]	; 0xb68
   36b28:	e59a1b64 	ldr	r1, [sl, #2916]	; 0xb64
   36b2c:	e0632283 	rsb	r2, r3, r3, lsl #5
   36b30:	e0832102 	add	r2, r3, r2, lsl #2
   36b34:	e1a02182 	lsl	r2, r2, #3
   36b38:	ebffdcad 	bl	2ddf4 <isTimeout>
   36b3c:	e3500000 	cmp	r0, #0
   36b40:	0a00000b 	beq	36b74 <McTerminal::refreshDisplay()+0x1d0>
   36b44:	e5dacb6c 	ldrb	ip, [sl, #2924]	; 0xb6c
   36b48:	e35c0000 	cmp	ip, #0
   36b4c:	0a000078 	beq	36d34 <McTerminal::refreshDisplay()+0x390>
   36b50:	e5982000 	ldr	r2, [r8]
   36b54:	e59f32b0 	ldr	r3, [pc, #688]	; 36e0c <McTerminal::refreshDisplay()+0x468>
   36b58:	e5924028 	ldr	r4, [r2, #40]	; 0x28
   36b5c:	e1540003 	cmp	r4, r3
   36b60:	1a00009f 	bne	36de4 <McTerminal::refreshDisplay()+0x440>
   36b64:	e22cc001 	eor	ip, ip, #1
   36b68:	e5cacb6c 	strb	ip, [sl, #2924]	; 0xb6c
   36b6c:	ebffdc82 	bl	2dd7c <micros>
   36b70:	e58a0b64 	str	r0, [sl, #2916]	; 0xb64
   36b74:	e28ddffb 	add	sp, sp, #1004	; 0x3ec
   36b78:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36b7c:	e3500ffa 	cmp	r0, #1000	; 0x3e8
   36b80:	b1a02000 	movlt	r2, r0
   36b84:	a3a02ffa 	movge	r2, #1000	; 0x3e8
   36b88:	e1a0100d 	mov	r1, sp
   36b8c:	e5970004 	ldr	r0, [r7, #4]
   36b90:	ebfffbf9 	bl	35b7c <McManager::hostSerialReadChars(unsigned char*, unsigned long)>
   36b94:	e2505000 	subs	r5, r0, #0
   36b98:	0affff90 	beq	369e0 <McTerminal::refreshDisplay()+0x3c>
   36b9c:	e1a0400d 	mov	r4, sp
   36ba0:	e287aa61 	add	sl, r7, #397312	; 0x61000
   36ba4:	e59a0b88 	ldr	r0, [sl, #2952]	; 0xb88
   36ba8:	e0845005 	add	r5, r4, r5
   36bac:	ea000007 	b	36bd0 <McTerminal::refreshDisplay()+0x22c>
   36bb0:	e5903000 	ldr	r3, [r0]
   36bb4:	e5d41000 	ldrb	r1, [r4]
   36bb8:	e593300c 	ldr	r3, [r3, #12]
   36bbc:	e12fff33 	blx	r3
   36bc0:	e59a0b88 	ldr	r0, [sl, #2952]	; 0xb88
   36bc4:	e2844001 	add	r4, r4, #1
   36bc8:	e1550004 	cmp	r5, r4
   36bcc:	0affff85 	beq	369e8 <McTerminal::refreshDisplay()+0x44>
   36bd0:	e3500000 	cmp	r0, #0
   36bd4:	1afffff5 	bne	36bb0 <McTerminal::refreshDisplay()+0x20c>
   36bd8:	e2844001 	add	r4, r4, #1
   36bdc:	e1540005 	cmp	r4, r5
   36be0:	1afffff7 	bne	36bc4 <McTerminal::refreshDisplay()+0x220>
   36be4:	eaffffe2 	b	36b74 <McTerminal::refreshDisplay()+0x1d0>
   36be8:	e5943010 	ldr	r3, [r4, #16]
   36bec:	e28bb001 	add	fp, fp, #1
   36bf0:	e153000b 	cmp	r3, fp
   36bf4:	8affff8d 	bhi	36a30 <McTerminal::refreshDisplay()+0x8c>
   36bf8:	e5da3b6c 	ldrb	r3, [sl, #2924]	; 0xb6c
   36bfc:	e3530000 	cmp	r3, #0
   36c00:	0a000018 	beq	36c68 <McTerminal::refreshDisplay()+0x2c4>
   36c04:	e5983000 	ldr	r3, [r8]
   36c08:	e59f61fc 	ldr	r6, [pc, #508]	; 36e0c <McTerminal::refreshDisplay()+0x468>
   36c0c:	e5935028 	ldr	r5, [r3, #40]	; 0x28
   36c10:	e284e014 	add	lr, r4, #20
   36c14:	e28aceb7 	add	ip, sl, #2928	; 0xb70
   36c18:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   36c1c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   36c20:	e59e3000 	ldr	r3, [lr]
   36c24:	e58c3000 	str	r3, [ip]
   36c28:	e594300c 	ldr	r3, [r4, #12]
   36c2c:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   36c30:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   36c34:	e5940008 	ldr	r0, [r4, #8]
   36c38:	e0231293 	mla	r3, r3, r2, r1
   36c3c:	e1530000 	cmp	r3, r0
   36c40:	35944004 	ldrcc	r4, [r4, #4]
   36c44:	22844028 	addcs	r4, r4, #40	; 0x28
   36c48:	30844103 	addcc	r4, r4, r3, lsl #2
   36c4c:	e5d43000 	ldrb	r3, [r4]
   36c50:	e1550006 	cmp	r5, r6
   36c54:	e58a3b80 	str	r3, [sl, #2944]	; 0xb80
   36c58:	0a000002 	beq	36c68 <McTerminal::refreshDisplay()+0x2c4>
   36c5c:	e1a00008 	mov	r0, r8
   36c60:	e59a3b7c 	ldr	r3, [sl, #2940]	; 0xb7c
   36c64:	e12fff35 	blx	r5
   36c68:	e59a4b88 	ldr	r4, [sl, #2952]	; 0xb88
   36c6c:	e3a02000 	mov	r2, #0
   36c70:	e5d4301d 	ldrb	r3, [r4, #29]
   36c74:	e5c4201c 	strb	r2, [r4, #28]
   36c78:	e1530002 	cmp	r3, r2
   36c7c:	0affffa7 	beq	36b20 <McTerminal::refreshDisplay()+0x17c>
   36c80:	e5da3b6c 	ldrb	r3, [sl, #2924]	; 0xb6c
   36c84:	e3530000 	cmp	r3, #0
   36c88:	0a000004 	beq	36ca0 <McTerminal::refreshDisplay()+0x2fc>
   36c8c:	e5982000 	ldr	r2, [r8]
   36c90:	e59f3174 	ldr	r3, [pc, #372]	; 36e0c <McTerminal::refreshDisplay()+0x468>
   36c94:	e5924028 	ldr	r4, [r2, #40]	; 0x28
   36c98:	e1540003 	cmp	r4, r3
   36c9c:	1a000040 	bne	36da4 <McTerminal::refreshDisplay()+0x400>
   36ca0:	e3a03000 	mov	r3, #0
   36ca4:	e5ca3b6c 	strb	r3, [sl, #2924]	; 0xb6c
   36ca8:	e28ddffb 	add	sp, sp, #1004	; 0x3ec
   36cac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36cb0:	e12fff33 	blx	r3
   36cb4:	e1a08000 	mov	r8, r0
   36cb8:	eaffff42 	b	369c8 <McTerminal::refreshDisplay()+0x24>
   36cbc:	e5983000 	ldr	r3, [r8]
   36cc0:	e59f6144 	ldr	r6, [pc, #324]	; 36e0c <McTerminal::refreshDisplay()+0x468>
   36cc4:	e5935028 	ldr	r5, [r3, #40]	; 0x28
   36cc8:	e1550006 	cmp	r5, r6
   36ccc:	1a00003a 	bne	36dbc <McTerminal::refreshDisplay()+0x418>
   36cd0:	e59a4b88 	ldr	r4, [sl, #2952]	; 0xb88
   36cd4:	e5943010 	ldr	r3, [r4, #16]
   36cd8:	e3530000 	cmp	r3, #0
   36cdc:	1affff52 	bne	36a2c <McTerminal::refreshDisplay()+0x88>
   36ce0:	eaffffca 	b	36c10 <McTerminal::refreshDisplay()+0x26c>
   36ce4:	e1d410d2 	ldrsb	r1, [r4, #2]
   36ce8:	e1a00008 	mov	r0, r8
   36cec:	e12fff32 	blx	r2
   36cf0:	e5983000 	ldr	r3, [r8]
   36cf4:	e59f110c 	ldr	r1, [pc, #268]	; 36e08 <McTerminal::refreshDisplay()+0x464>
   36cf8:	e5932020 	ldr	r2, [r3, #32]
   36cfc:	e1520001 	cmp	r2, r1
   36d00:	0affff55 	beq	36a5c <McTerminal::refreshDisplay()+0xb8>
   36d04:	e1a00008 	mov	r0, r8
   36d08:	e1d410d1 	ldrsb	r1, [r4, #1]
   36d0c:	e12fff32 	blx	r2
   36d10:	e5983000 	ldr	r3, [r8]
   36d14:	eaffff50 	b	36a5c <McTerminal::refreshDisplay()+0xb8>
   36d18:	e1a00008 	mov	r0, r8
   36d1c:	e1d410d1 	ldrsb	r1, [r4, #1]
   36d20:	e12fff32 	blx	r2
   36d24:	e5983000 	ldr	r3, [r8]
   36d28:	eaffff6a 	b	36ad8 <McTerminal::refreshDisplay()+0x134>
   36d2c:	e12fff33 	blx	r3
   36d30:	eaffff34 	b	36a08 <McTerminal::refreshDisplay()+0x64>
   36d34:	e59aeb88 	ldr	lr, [sl, #2952]	; 0xb88
   36d38:	e28a4eb7 	add	r4, sl, #2928	; 0xb70
   36d3c:	e28e5014 	add	r5, lr, #20
   36d40:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
   36d44:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
   36d48:	e5953000 	ldr	r3, [r5]
   36d4c:	e5843000 	str	r3, [r4]
   36d50:	e59e300c 	ldr	r3, [lr, #12]
   36d54:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   36d58:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   36d5c:	e59e0008 	ldr	r0, [lr, #8]
   36d60:	e0231293 	mla	r3, r3, r2, r1
   36d64:	e1530000 	cmp	r3, r0
   36d68:	359ee004 	ldrcc	lr, [lr, #4]
   36d6c:	228ee028 	addcs	lr, lr, #40	; 0x28
   36d70:	308ee103 	addcc	lr, lr, r3, lsl #2
   36d74:	e5983000 	ldr	r3, [r8]
   36d78:	e59f008c 	ldr	r0, [pc, #140]	; 36e0c <McTerminal::refreshDisplay()+0x468>
   36d7c:	e5934028 	ldr	r4, [r3, #40]	; 0x28
   36d80:	e5de3000 	ldrb	r3, [lr]
   36d84:	e1540000 	cmp	r4, r0
   36d88:	e58a3b80 	str	r3, [sl, #2944]	; 0xb80
   36d8c:	0affff74 	beq	36b64 <McTerminal::refreshDisplay()+0x1c0>
   36d90:	e1a00008 	mov	r0, r8
   36d94:	e59a3b7c 	ldr	r3, [sl, #2940]	; 0xb7c
   36d98:	e12fff34 	blx	r4
   36d9c:	e5dacb6c 	ldrb	ip, [sl, #2924]	; 0xb6c
   36da0:	eaffff6f 	b	36b64 <McTerminal::refreshDisplay()+0x1c0>
   36da4:	e1a00008 	mov	r0, r8
   36da8:	e59a3b80 	ldr	r3, [sl, #2944]	; 0xb80
   36dac:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   36db0:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   36db4:	e12fff34 	blx	r4
   36db8:	eaffffb8 	b	36ca0 <McTerminal::refreshDisplay()+0x2fc>
   36dbc:	e59a3b80 	ldr	r3, [sl, #2944]	; 0xb80
   36dc0:	e1a00008 	mov	r0, r8
   36dc4:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   36dc8:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   36dcc:	e12fff35 	blx	r5
   36dd0:	e59a4b88 	ldr	r4, [sl, #2952]	; 0xb88
   36dd4:	e5943010 	ldr	r3, [r4, #16]
   36dd8:	e3530000 	cmp	r3, #0
   36ddc:	1affff12 	bne	36a2c <McTerminal::refreshDisplay()+0x88>
   36de0:	eaffff84 	b	36bf8 <McTerminal::refreshDisplay()+0x254>
   36de4:	e1a00008 	mov	r0, r8
   36de8:	e59a3b80 	ldr	r3, [sl, #2944]	; 0xb80
   36dec:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   36df0:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   36df4:	e12fff34 	blx	r4
   36df8:	e5dacb6c 	ldrb	ip, [sl, #2924]	; 0xb6c
   36dfc:	eaffff58 	b	36b64 <McTerminal::refreshDisplay()+0x1c0>
   36e00:	000365a4 	.word	0x000365a4
   36e04:	00037318 	.word	0x00037318
   36e08:	00037314 	.word	0x00037314
   36e0c:	00036590 	.word	0x00036590
   36e10:	00037310 	.word	0x00037310

00036e14 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>:
   36e14:	e92d4070 	push	{r4, r5, r6, lr}
   36e18:	e1a04001 	mov	r4, r1
   36e1c:	e1a05000 	mov	r5, r0
   36e20:	e59f109c 	ldr	r1, [pc, #156]	; 36ec4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb0>
   36e24:	e59f009c 	ldr	r0, [pc, #156]	; 36ec8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb4>
   36e28:	ebffcd0b 	bl	2a25c <strcpy>
   36e2c:	e5d43000 	ldrb	r3, [r4]
   36e30:	e353007f 	cmp	r3, #127	; 0x7f
   36e34:	da000009 	ble	36e60 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x4c>
   36e38:	e5d43001 	ldrb	r3, [r4, #1]
   36e3c:	e3530000 	cmp	r3, #0
   36e40:	1a000006 	bne	36e60 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x4c>
   36e44:	e3e03000 	mvn	r3, #0
   36e48:	e59f1078 	ldr	r1, [pc, #120]	; 36ec8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb4>
   36e4c:	e3150011 	tst	r5, #17
   36e50:	1203301f 	andne	r3, r3, #31
   36e54:	e59f006c 	ldr	r0, [pc, #108]	; 36ec8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb4>
   36e58:	e5c13000 	strb	r3, [r1]
   36e5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   36e60:	e3530001 	cmp	r3, #1
   36e64:	da000014 	ble	36ebc <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xa8>
   36e68:	e3130080 	tst	r3, #128	; 0x80
   36e6c:	1afffff4 	bne	36e44 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x30>
   36e70:	e3150022 	tst	r5, #34	; 0x22
   36e74:	13a02001 	movne	r2, #1
   36e78:	03a02000 	moveq	r2, #0
   36e7c:	e59f1044 	ldr	r1, [pc, #68]	; 36ec8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb4>
   36e80:	e3150044 	tst	r5, #68	; 0x44
   36e84:	e591c004 	ldr	ip, [r1, #4]
   36e88:	12822002 	addne	r2, r2, #2
   36e8c:	e083338c 	add	r3, r3, ip, lsl #7
   36e90:	e0823103 	add	r3, r2, r3, lsl #2
   36e94:	e59f0030 	ldr	r0, [pc, #48]	; 36ecc <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xb8>
   36e98:	e1a03083 	lsl	r3, r3, #1
   36e9c:	e19030b3 	ldrh	r3, [r0, r3]
   36ea0:	e2432c01 	sub	r2, r3, #256	; 0x100
   36ea4:	e3520032 	cmp	r2, #50	; 0x32
   36ea8:	86af3073 	sxtbhi	r3, r3
   36eac:	8affffe6 	bhi	36e4c <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x38>
   36eb0:	e59f3018 	ldr	r3, [pc, #24]	; 36ed0 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xbc>
   36eb4:	e7930102 	ldr	r0, [r3, r2, lsl #2]
   36eb8:	e8bd8070 	pop	{r4, r5, r6, pc}
   36ebc:	e59f0010 	ldr	r0, [pc, #16]	; 36ed4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xc0>
   36ec0:	e8bd8070 	pop	{r4, r5, r6, pc}
   36ec4:	0003d1a4 	.word	0x0003d1a4
   36ec8:	0004f1f4 	.word	0x0004f1f4
   36ecc:	0004ac18 	.word	0x0004ac18
   36ed0:	0004c418 	.word	0x0004c418
   36ed4:	00045ac0 	.word	0x00045ac0

00036ed8 <McTerminal::keyHandler(unsigned char, unsigned char const*)>:
   36ed8:	e1a03001 	mov	r3, r1
   36edc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36ee0:	e1a01002 	mov	r1, r2
   36ee4:	e1a07000 	mov	r7, r0
   36ee8:	e1a00003 	mov	r0, r3
   36eec:	ebffffc8 	bl	36e14 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>
   36ef0:	e1a06000 	mov	r6, r0
   36ef4:	ebffcc34 	bl	29fcc <strlen>
   36ef8:	e3500000 	cmp	r0, #0
   36efc:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   36f00:	e2874a61 	add	r4, r7, #397312	; 0x61000
   36f04:	e5d43b84 	ldrb	r3, [r4, #2948]	; 0xb84
   36f08:	e3530000 	cmp	r3, #0
   36f0c:	0a000029 	beq	36fb8 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0xe0>
   36f10:	e3a05000 	mov	r5, #0
   36f14:	e59f80c8 	ldr	r8, [pc, #200]	; 36fe4 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x10c>
   36f18:	e1a09005 	mov	r9, r5
   36f1c:	ea000011 	b	36f68 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   36f20:	e2430001 	sub	r0, r3, #1
   36f24:	e3520000 	cmp	r2, #0
   36f28:	01500001 	cmpeq	r0, r1
   36f2c:	0a00000c 	beq	36f64 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x8c>
   36f30:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   36f34:	e7d61005 	ldrb	r1, [r6, r5]
   36f38:	e0872002 	add	r2, r7, r2
   36f3c:	e7c21008 	strb	r1, [r2, r8]
   36f40:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   36f44:	e2822001 	add	r2, r2, #1
   36f48:	e5842b8c 	str	r2, [r4, #2956]	; 0xb8c
   36f4c:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   36f50:	e1520003 	cmp	r2, r3
   36f54:	e5d43b87 	ldrb	r3, [r4, #2951]	; 0xb87
   36f58:	25849b8c 	strcs	r9, [r4, #2956]	; 0xb8c
   36f5c:	e3530000 	cmp	r3, #0
   36f60:	1a000018 	bne	36fc8 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0xf0>
   36f64:	e2855001 	add	r5, r5, #1
   36f68:	e1a00006 	mov	r0, r6
   36f6c:	ebffcc16 	bl	29fcc <strlen>
   36f70:	e1500005 	cmp	r0, r5
   36f74:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   36f78:	e5943b94 	ldr	r3, [r4, #2964]	; 0xb94
   36f7c:	e3530000 	cmp	r3, #0
   36f80:	0afffff7 	beq	36f64 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x8c>
   36f84:	e5941b8c 	ldr	r1, [r4, #2956]	; 0xb8c
   36f88:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   36f8c:	e1510002 	cmp	r1, r2
   36f90:	0affffe6 	beq	36f30 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x58>
   36f94:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   36f98:	e5941b8c 	ldr	r1, [r4, #2956]	; 0xb8c
   36f9c:	e1520001 	cmp	r2, r1
   36fa0:	e5941b8c 	ldr	r1, [r4, #2956]	; 0xb8c
   36fa4:	3affffdd 	bcc	36f20 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x48>
   36fa8:	e0422001 	sub	r2, r2, r1
   36fac:	e3520001 	cmp	r2, #1
   36fb0:	9affffeb 	bls	36f64 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x8c>
   36fb4:	eaffffdd 	b	36f30 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x58>
   36fb8:	e1a01006 	mov	r1, r6
   36fbc:	e5970004 	ldr	r0, [r7, #4]
   36fc0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   36fc4:	eafffb0e 	b	35c04 <McManager::sendKeyStrToTargetStatic(char const*)>
   36fc8:	e5973004 	ldr	r3, [r7, #4]
   36fcc:	e3e02000 	mvn	r2, #0
   36fd0:	e1c300d8 	ldrd	r0, [r3, #8]
   36fd4:	e2800601 	add	r0, r0, #1048576	; 0x100000
   36fd8:	e2800f8f 	add	r0, r0, #572	; 0x23c
   36fdc:	ebffe9c6 	bl	316fc <BusSocketManager::reqIRQ(unsigned long, int)>
   36fe0:	eaffffdf 	b	36f64 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x8c>
   36fe4:	00061b98 	.word	0x00061b98

00036fe8 <McTerminal::invalidateScreenCaches(bool)>:
   36fe8:	e3510000 	cmp	r1, #0
   36fec:	0a000007 	beq	37010 <McTerminal::invalidateScreenCaches(bool)+0x28>
   36ff0:	e1a03000 	mov	r3, r0
   36ff4:	e3e01000 	mvn	r1, #0
   36ff8:	e2802bc3 	add	r2, r0, #199680	; 0x30c00
   36ffc:	e2822d05 	add	r2, r2, #320	; 0x140
   37000:	e5c310e7 	strb	r1, [r3, #231]	; 0xe7
   37004:	e2833004 	add	r3, r3, #4
   37008:	e1520003 	cmp	r2, r3
   3700c:	1afffffb 	bne	37000 <McTerminal::invalidateScreenCaches(bool)+0x18>
   37010:	e3a03000 	mov	r3, #0
   37014:	e3e0c000 	mvn	ip, #0
   37018:	e59f2018 	ldr	r2, [pc, #24]	; 37038 <McTerminal::invalidateScreenCaches(bool)+0x50>
   3701c:	e59f1018 	ldr	r1, [pc, #24]	; 3703c <McTerminal::invalidateScreenCaches(bool)+0x54>
   37020:	e0802002 	add	r2, r0, r2
   37024:	e7c2c103 	strb	ip, [r2, r3, lsl #2]
   37028:	e2833001 	add	r3, r3, #1
   3702c:	e1530001 	cmp	r3, r1
   37030:	1afffffb 	bne	37024 <McTerminal::invalidateScreenCaches(bool)+0x3c>
   37034:	e12fff1e 	bx	lr
   37038:	00030e27 	.word	0x00030e27
   3703c:	0000c350 	.word	0x0000c350

00037040 <McTerminal::setupMachine(char const*, char const*)>:
   37040:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   37044:	e1a04000 	mov	r4, r0
   37048:	e24dd0d4 	sub	sp, sp, #212	; 0xd4
   3704c:	e1a05002 	mov	r5, r2
   37050:	eb00012b 	bl	37504 <McBase::setupMachine(char const*, char const*)>
   37054:	e3a01001 	mov	r1, #1
   37058:	e3a02000 	mov	r2, #0
   3705c:	e5943000 	ldr	r3, [r4]
   37060:	e59f8134 	ldr	r8, [pc, #308]	; 3719c <McTerminal::setupMachine(char const*, char const*)+0x15c>
   37064:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   37068:	e2846a61 	add	r6, r4, #397312	; 0x61000
   3706c:	e1530008 	cmp	r3, r8
   37070:	e5c62b87 	strb	r2, [r6, #2951]	; 0xb87
   37074:	e5c61b84 	strb	r1, [r6, #2948]	; 0xb84
   37078:	e1a07000 	mov	r7, r0
   3707c:	05c410a8 	strbeq	r1, [r4, #168]	; 0xa8
   37080:	1a000040 	bne	37188 <McTerminal::setupMachine(char const*, char const*)+0x148>
   37084:	e3a03064 	mov	r3, #100	; 0x64
   37088:	e1a01005 	mov	r1, r5
   3708c:	e59f010c 	ldr	r0, [pc, #268]	; 371a0 <McTerminal::setupMachine(char const*, char const*)+0x160>
   37090:	e28d2008 	add	r2, sp, #8
   37094:	ebffdc1f 	bl	2e118 <jsonGetValueForKey>
   37098:	e3500000 	cmp	r0, #0
   3709c:	1a000017 	bne	37100 <McTerminal::setupMachine(char const*, char const*)+0xc0>
   370a0:	e1a01005 	mov	r1, r5
   370a4:	e3a03064 	mov	r3, #100	; 0x64
   370a8:	e59f00f4 	ldr	r0, [pc, #244]	; 371a4 <McTerminal::setupMachine(char const*, char const*)+0x164>
   370ac:	e28d206c 	add	r2, sp, #108	; 0x6c
   370b0:	ebffdc18 	bl	2e118 <jsonGetValueForKey>
   370b4:	e3500000 	cmp	r0, #0
   370b8:	1a000021 	bne	37144 <McTerminal::setupMachine(char const*, char const*)+0x104>
   370bc:	e59f30e4 	ldr	r3, [pc, #228]	; 371a8 <McTerminal::setupMachine(char const*, char const*)+0x168>
   370c0:	e5934004 	ldr	r4, [r3, #4]
   370c4:	e59f20e0 	ldr	r2, [pc, #224]	; 371ac <McTerminal::setupMachine(char const*, char const*)+0x16c>
   370c8:	e5d60b84 	ldrb	r0, [r6, #2948]	; 0xb84
   370cc:	e7922104 	ldr	r2, [r2, r4, lsl #2]
   370d0:	e59f10d8 	ldr	r1, [pc, #216]	; 371b0 <McTerminal::setupMachine(char const*, char const*)+0x170>
   370d4:	e3500000 	cmp	r0, #0
   370d8:	e59f30d4 	ldr	r3, [pc, #212]	; 371b4 <McTerminal::setupMachine(char const*, char const*)+0x174>
   370dc:	e58d2000 	str	r2, [sp]
   370e0:	01a03001 	moveq	r3, r1
   370e4:	e59f20cc 	ldr	r2, [pc, #204]	; 371b8 <McTerminal::setupMachine(char const*, char const*)+0x178>
   370e8:	e3a01004 	mov	r1, #4
   370ec:	e59f00c8 	ldr	r0, [pc, #200]	; 371bc <McTerminal::setupMachine(char const*, char const*)+0x17c>
   370f0:	ebffdf26 	bl	2ed90 <LogWrite>
   370f4:	e1a00007 	mov	r0, r7
   370f8:	e28dd0d4 	add	sp, sp, #212	; 0xd4
   370fc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   37100:	e3a01000 	mov	r1, #0
   37104:	e3a0200a 	mov	r2, #10
   37108:	e28d0008 	add	r0, sp, #8
   3710c:	ebffccd6 	bl	2a46c <strtoul>
   37110:	e2501000 	subs	r1, r0, #0
   37114:	13a03001 	movne	r3, #1
   37118:	03a03000 	moveq	r3, #0
   3711c:	e5c63b84 	strb	r3, [r6, #2948]	; 0xb84
   37120:	1affffde 	bne	370a0 <McTerminal::setupMachine(char const*, char const*)+0x60>
   37124:	e5943000 	ldr	r3, [r4]
   37128:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   3712c:	e1530008 	cmp	r3, r8
   37130:	05c410a8 	strbeq	r1, [r4, #168]	; 0xa8
   37134:	0affffd9 	beq	370a0 <McTerminal::setupMachine(char const*, char const*)+0x60>
   37138:	e1a00004 	mov	r0, r4
   3713c:	e12fff33 	blx	r3
   37140:	eaffffd6 	b	370a0 <McTerminal::setupMachine(char const*, char const*)+0x60>
   37144:	e59f905c 	ldr	r9, [pc, #92]	; 371a8 <McTerminal::setupMachine(char const*, char const*)+0x168>
   37148:	e3a04000 	mov	r4, #0
   3714c:	e59f506c 	ldr	r5, [pc, #108]	; 371c0 <McTerminal::setupMachine(char const*, char const*)+0x180>
   37150:	e2898004 	add	r8, r9, #4
   37154:	ea000005 	b	37170 <McTerminal::setupMachine(char const*, char const*)+0x130>
   37158:	e5b51004 	ldr	r1, [r5, #4]!
   3715c:	e28d006c 	add	r0, sp, #108	; 0x6c
   37160:	ebffcbc0 	bl	2a068 <strcasecmp>
   37164:	e3500000 	cmp	r0, #0
   37168:	0a000009 	beq	37194 <McTerminal::setupMachine(char const*, char const*)+0x154>
   3716c:	e2844001 	add	r4, r4, #1
   37170:	e1a00008 	mov	r0, r8
   37174:	eb00169e 	bl	3cbf4 <KeyConversion::getNumTypes()>
   37178:	e1500004 	cmp	r0, r4
   3717c:	8afffff5 	bhi	37158 <McTerminal::setupMachine(char const*, char const*)+0x118>
   37180:	e5994004 	ldr	r4, [r9, #4]
   37184:	eaffffce 	b	370c4 <McTerminal::setupMachine(char const*, char const*)+0x84>
   37188:	e1a00004 	mov	r0, r4
   3718c:	e12fff33 	blx	r3
   37190:	eaffffbb 	b	37084 <McTerminal::setupMachine(char const*, char const*)+0x44>
   37194:	e5894004 	str	r4, [r9, #4]
   37198:	eaffffc9 	b	370c4 <McTerminal::setupMachine(char const*, char const*)+0x84>
   3719c:	00036594 	.word	0x00036594
   371a0:	000455cc 	.word	0x000455cc
   371a4:	000455d8 	.word	0x000455d8
   371a8:	0004f1f4 	.word	0x0004f1f4
   371ac:	0004c4e4 	.word	0x0004c4e4
   371b0:	000455c8 	.word	0x000455c8
   371b4:	000455c4 	.word	0x000455c4
   371b8:	000455e8 	.word	0x000455e8
   371bc:	000455bc 	.word	0x000455bc
   371c0:	0004c4e0 	.word	0x0004c4e0

000371c4 <McTerminal::McTerminal(McManager&, BusControl&)>:
   371c4:	e3a03002 	mov	r3, #2
   371c8:	e92d4070 	push	{r4, r5, r6, lr}
   371cc:	e1a04000 	mov	r4, r0
   371d0:	e24dd008 	sub	sp, sp, #8
   371d4:	e58d3000 	str	r3, [sp]
   371d8:	e59f3110 	ldr	r3, [pc, #272]	; 372f0 <McTerminal::McTerminal(McManager&, BusControl&)+0x12c>
   371dc:	eb000145 	bl	376f8 <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)>
   371e0:	e1a03004 	mov	r3, r4
   371e4:	e3a0c020 	mov	ip, #32
   371e8:	e3a0000f 	mov	r0, #15
   371ec:	e3a02000 	mov	r2, #0
   371f0:	e59fe0fc 	ldr	lr, [pc, #252]	; 372f4 <McTerminal::McTerminal(McManager&, BusControl&)+0x130>
   371f4:	e2841bc3 	add	r1, r4, #199680	; 0x30c00
   371f8:	e483e0e4 	str	lr, [r3], #228	; 0xe4
   371fc:	e2811f89 	add	r1, r1, #548	; 0x224
   37200:	e5c3c000 	strb	ip, [r3]
   37204:	e5c30001 	strb	r0, [r3, #1]
   37208:	e5c32002 	strb	r2, [r3, #2]
   3720c:	e5c32003 	strb	r2, [r3, #3]
   37210:	e2833004 	add	r3, r3, #4
   37214:	e1530001 	cmp	r3, r1
   37218:	1afffff8 	bne	37200 <McTerminal::McTerminal(McManager&, BusControl&)+0x3c>
   3721c:	e3a00020 	mov	r0, #32
   37220:	e3a0c00f 	mov	ip, #15
   37224:	e3a02000 	mov	r2, #0
   37228:	e59f10c8 	ldr	r1, [pc, #200]	; 372f8 <McTerminal::McTerminal(McManager&, BusControl&)+0x134>
   3722c:	e0841001 	add	r1, r4, r1
   37230:	e5c30000 	strb	r0, [r3]
   37234:	e5c3c001 	strb	ip, [r3, #1]
   37238:	e5c32002 	strb	r2, [r3, #2]
   3723c:	e5c32003 	strb	r2, [r3, #3]
   37240:	e2833004 	add	r3, r3, #4
   37244:	e1510003 	cmp	r1, r3
   37248:	1afffff8 	bne	37230 <McTerminal::McTerminal(McManager&, BusControl&)+0x6c>
   3724c:	e3a0105f 	mov	r1, #95	; 0x5f
   37250:	e2845a61 	add	r5, r4, #397312	; 0x61000
   37254:	e59f30a0 	ldr	r3, [pc, #160]	; 372fc <McTerminal::McTerminal(McManager&, BusControl&)+0x138>
   37258:	e285ceb7 	add	ip, r5, #2928	; 0xb70
   3725c:	e5852b70 	str	r2, [r5, #2928]	; 0xb70
   37260:	e5852b74 	str	r2, [r5, #2932]	; 0xb74
   37264:	e1cc20b8 	strh	r2, [ip, #8]
   37268:	e5852b8c 	str	r2, [r5, #2956]	; 0xb8c
   3726c:	e5853b94 	str	r3, [r5, #2964]	; 0xb94
   37270:	e5c52b7a 	strb	r2, [r5, #2938]	; 0xb7a
   37274:	e5852b90 	str	r2, [r5, #2960]	; 0xb90
   37278:	e5851b7c 	str	r1, [r5, #2940]	; 0xb7c
   3727c:	e5850b80 	str	r0, [r5, #2944]	; 0xb80
   37280:	e59f0078 	ldr	r0, [pc, #120]	; 37300 <McTerminal::McTerminal(McManager&, BusControl&)+0x13c>
   37284:	ebffcf31 	bl	2af50 <operator new(unsigned int)>
   37288:	e1a06000 	mov	r6, r0
   3728c:	eb00029a 	bl	37cfc <TermAnsi::TermAnsi()>
   37290:	e1a00006 	mov	r0, r6
   37294:	e3a02019 	mov	r2, #25
   37298:	e3a01050 	mov	r1, #80	; 0x50
   3729c:	e5856b88 	str	r6, [r5, #2952]	; 0xb88
   372a0:	eb0009e0 	bl	39a28 <TermAnsi::init(unsigned long, unsigned long)>
   372a4:	e3a03000 	mov	r3, #0
   372a8:	e3e00000 	mvn	r0, #0
   372ac:	e59f2050 	ldr	r2, [pc, #80]	; 37304 <McTerminal::McTerminal(McManager&, BusControl&)+0x140>
   372b0:	e59f1050 	ldr	r1, [pc, #80]	; 37308 <McTerminal::McTerminal(McManager&, BusControl&)+0x144>
   372b4:	e0842002 	add	r2, r4, r2
   372b8:	e7c20103 	strb	r0, [r2, r3, lsl #2]
   372bc:	e2833001 	add	r3, r3, #1
   372c0:	e1530001 	cmp	r3, r1
   372c4:	1afffffb 	bne	372b8 <McTerminal::McTerminal(McManager&, BusControl&)+0xf4>
   372c8:	e3a03000 	mov	r3, #0
   372cc:	e3a01f7d 	mov	r1, #500	; 0x1f4
   372d0:	e1a00004 	mov	r0, r4
   372d4:	e59f2030 	ldr	r2, [pc, #48]	; 3730c <McTerminal::McTerminal(McManager&, BusControl&)+0x148>
   372d8:	e5853b64 	str	r3, [r5, #2916]	; 0xb64
   372dc:	e5c53b6c 	strb	r3, [r5, #2924]	; 0xb6c
   372e0:	e5851b68 	str	r1, [r5, #2920]	; 0xb68
   372e4:	e5852b84 	str	r2, [r5, #2948]	; 0xb84
   372e8:	e28dd008 	add	sp, sp, #8
   372ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   372f0:	00046714 	.word	0x00046714
   372f4:	0004561c 	.word	0x0004561c
   372f8:	00061b64 	.word	0x00061b64
   372fc:	00001388 	.word	0x00001388
   37300:	000008ac 	.word	0x000008ac
   37304:	00030e27 	.word	0x00030e27
   37308:	0000c350 	.word	0x0000c350
   3730c:	00000101 	.word	0x00000101

00037310 <DisplayBase::foreground(DISPLAY_FX_COLOUR)>:
   37310:	e12fff1e 	bx	lr

00037314 <DisplayBase::background(DISPLAY_FX_COLOUR)>:
   37314:	e12fff1e 	bx	lr

00037318 <TermEmu::hasChanged()>:
   37318:	e5d0001c 	ldrb	r0, [r0, #28]
   3731c:	e12fff1e 	bx	lr

00037320 <_GLOBAL__sub_I__ZN10McTerminal14_keyConversionE>:
   37320:	e3a02000 	mov	r2, #0
   37324:	e59f3004 	ldr	r3, [pc, #4]	; 37330 <_GLOBAL__sub_I__ZN10McTerminal14_keyConversionE+0x10>
   37328:	e5832004 	str	r2, [r3, #4]
   3732c:	e12fff1e 	bx	lr
   37330:	0004f1f4 	.word	0x0004f1f4

00037334 <McBase::getDescriptorTable()>:
   37334:	e280000c 	add	r0, r0, #12
   37338:	e12fff1e 	bx	lr

0003733c <McBase::getMachineName()>:
   3733c:	e280000c 	add	r0, r0, #12
   37340:	e12fff1e 	bx	lr

00037344 <McBase::machineHeartbeat()>:
   37344:	e12fff1e 	bx	lr

00037348 <McBase::reset(bool, bool)>:
   37348:	e3a00000 	mov	r0, #0
   3734c:	e12fff1e 	bx	lr

00037350 <McBase::canProcFileType(char const*)>:
   37350:	e3a00000 	mov	r0, #0
   37354:	e12fff1e 	bx	lr

00037358 <McBase::isCalled(char const*, unsigned long&)>:
   37358:	e59030d8 	ldr	r3, [r0, #216]	; 0xd8
   3735c:	e3530000 	cmp	r3, #0
   37360:	0a000014 	beq	373b8 <McBase::isCalled(char const*, unsigned long&)+0x60>
   37364:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   37368:	e1a06000 	mov	r6, r0
   3736c:	e1a07001 	mov	r7, r1
   37370:	e1a08002 	mov	r8, r2
   37374:	e3a04000 	mov	r4, #0
   37378:	e28050ac 	add	r5, r0, #172	; 0xac
   3737c:	ea000003 	b	37390 <McBase::isCalled(char const*, unsigned long&)+0x38>
   37380:	e59630d8 	ldr	r3, [r6, #216]	; 0xd8
   37384:	e2844001 	add	r4, r4, #1
   37388:	e1530004 	cmp	r3, r4
   3738c:	9a000007 	bls	373b0 <McBase::isCalled(char const*, unsigned long&)+0x58>
   37390:	e1a01007 	mov	r1, r7
   37394:	e5b50004 	ldr	r0, [r5, #4]!
   37398:	ebffcb32 	bl	2a068 <strcasecmp>
   3739c:	e3500000 	cmp	r0, #0
   373a0:	1afffff6 	bne	37380 <McBase::isCalled(char const*, unsigned long&)+0x28>
   373a4:	e3a00001 	mov	r0, #1
   373a8:	e5884000 	str	r4, [r8]
   373ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   373b0:	e3a00000 	mov	r0, #0
   373b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   373b8:	e3a00000 	mov	r0, #0
   373bc:	e12fff1e 	bx	lr

000373c0 <McBase::getMachineNames(char*, unsigned long)>:
   373c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   373c4:	e3a06000 	mov	r6, #0
   373c8:	e5c16000 	strb	r6, [r1]
   373cc:	e59030d8 	ldr	r3, [r0, #216]	; 0xd8
   373d0:	e1530006 	cmp	r3, r6
   373d4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   373d8:	e1a04001 	mov	r4, r1
   373dc:	e1a09000 	mov	r9, r0
   373e0:	e1a05002 	mov	r5, r2
   373e4:	e59f7058 	ldr	r7, [pc, #88]	; 37444 <McBase::getMachineNames(char*, unsigned long)+0x84>
   373e8:	e59fa058 	ldr	sl, [pc, #88]	; 37448 <McBase::getMachineNames(char*, unsigned long)+0x88>
   373ec:	e28080ac 	add	r8, r0, #172	; 0xac
   373f0:	e1a02005 	mov	r2, r5
   373f4:	e1a01007 	mov	r1, r7
   373f8:	e1a00004 	mov	r0, r4
   373fc:	ebffdab4 	bl	2ded4 <strlcat>
   37400:	e1a02005 	mov	r2, r5
   37404:	e5b81004 	ldr	r1, [r8, #4]!
   37408:	e1a00004 	mov	r0, r4
   3740c:	ebffdab0 	bl	2ded4 <strlcat>
   37410:	e1a02005 	mov	r2, r5
   37414:	e1a01007 	mov	r1, r7
   37418:	e1a00004 	mov	r0, r4
   3741c:	ebffdaac 	bl	2ded4 <strlcat>
   37420:	e59930d8 	ldr	r3, [r9, #216]	; 0xd8
   37424:	e2866001 	add	r6, r6, #1
   37428:	e1560003 	cmp	r6, r3
   3742c:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
   37430:	e1a02005 	mov	r2, r5
   37434:	e1a0100a 	mov	r1, sl
   37438:	e1a00004 	mov	r0, r4
   3743c:	ebffdaa4 	bl	2ded4 <strlcat>
   37440:	eaffffea 	b	373f0 <McBase::getMachineNames(char*, unsigned long)+0x30>
   37444:	00045258 	.word	0x00045258
   37448:	0003ff60 	.word	0x0003ff60

0003744c <McBase::setupDisplay(DisplayBase*)>:
   3744c:	e92d4070 	push	{r4, r5, r6, lr}
   37450:	e1a05001 	mov	r5, r1
   37454:	e5903090 	ldr	r3, [r0, #144]	; 0x90
   37458:	e590107c 	ldr	r1, [r0, #124]	; 0x7c
   3745c:	e5902078 	ldr	r2, [r0, #120]	; 0x78
   37460:	e24dd018 	sub	sp, sp, #24
   37464:	e2833018 	add	r3, r3, #24
   37468:	e58050e0 	str	r5, [r0, #224]	; 0xe0
   3746c:	e1a04000 	mov	r4, r0
   37470:	e98d000a 	stmib	sp, {r1, r3}
   37474:	e58d2000 	str	r2, [sp]
   37478:	e280300c 	add	r3, r0, #12
   3747c:	e3a01004 	mov	r1, #4
   37480:	e59f2070 	ldr	r2, [pc, #112]	; 374f8 <McBase::setupDisplay(DisplayBase*)+0xac>
   37484:	e59f0070 	ldr	r0, [pc, #112]	; 374fc <McBase::setupDisplay(DisplayBase*)+0xb0>
   37488:	ebffde40 	bl	2ed90 <LogWrite>
   3748c:	e3550000 	cmp	r5, #0
   37490:	0a000004 	beq	374a8 <McBase::setupDisplay(DisplayBase*)+0x5c>
   37494:	e5952000 	ldr	r2, [r5]
   37498:	e59f3060 	ldr	r3, [pc, #96]	; 37500 <McBase::setupDisplay(DisplayBase*)+0xb4>
   3749c:	e5926034 	ldr	r6, [r2, #52]	; 0x34
   374a0:	e1560003 	cmp	r6, r3
   374a4:	1a000001 	bne	374b0 <McBase::setupDisplay(DisplayBase*)+0x64>
   374a8:	e28dd018 	add	sp, sp, #24
   374ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   374b0:	e5941098 	ldr	r1, [r4, #152]	; 0x98
   374b4:	e5942094 	ldr	r2, [r4, #148]	; 0x94
   374b8:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   374bc:	e58d1014 	str	r1, [sp, #20]
   374c0:	e594108c 	ldr	r1, [r4, #140]	; 0x8c
   374c4:	e58d2010 	str	r2, [sp, #16]
   374c8:	e5942088 	ldr	r2, [r4, #136]	; 0x88
   374cc:	e58d300c 	str	r3, [sp, #12]
   374d0:	e5943084 	ldr	r3, [r4, #132]	; 0x84
   374d4:	e58d1008 	str	r1, [sp, #8]
   374d8:	e58d2004 	str	r2, [sp, #4]
   374dc:	e58d3000 	str	r3, [sp]
   374e0:	e1a00005 	mov	r0, r5
   374e4:	e1c427dc 	ldrd	r2, [r4, #124]	; 0x7c
   374e8:	e5941078 	ldr	r1, [r4, #120]	; 0x78
   374ec:	e12fff36 	blx	r6
   374f0:	e28dd018 	add	sp, sp, #24
   374f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   374f8:	00045684 	.word	0x00045684
   374fc:	000456f4 	.word	0x000456f4
   37500:	000377b0 	.word	0x000377b0

00037504 <McBase::setupMachine(char const*, char const*)>:
   37504:	e3a0c000 	mov	ip, #0
   37508:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3750c:	e5903000 	ldr	r3, [r0]
   37510:	e24dd06c 	sub	sp, sp, #108	; 0x6c
   37514:	e1a06002 	mov	r6, r2
   37518:	e5933000 	ldr	r3, [r3]
   3751c:	e1a0200d 	mov	r2, sp
   37520:	e58dc000 	str	ip, [sp]
   37524:	e1a04000 	mov	r4, r0
   37528:	e1a05001 	mov	r5, r1
   3752c:	e12fff33 	blx	r3
   37530:	e2507000 	subs	r7, r0, #0
   37534:	0a00004b 	beq	37668 <McBase::setupMachine(char const*, char const*)+0x164>
   37538:	e59d3000 	ldr	r3, [sp]
   3753c:	e284500c 	add	r5, r4, #12
   37540:	e283202c 	add	r2, r3, #44	; 0x2c
   37544:	e7941102 	ldr	r1, [r4, r2, lsl #2]
   37548:	e58430dc 	str	r3, [r4, #220]	; 0xdc
   3754c:	e1a00005 	mov	r0, r5
   37550:	e3a020a4 	mov	r2, #164	; 0xa4
   37554:	ebffcc97 	bl	2a7b8 <memcpy>
   37558:	e5943000 	ldr	r3, [r4]
   3755c:	e59f816c 	ldr	r8, [pc, #364]	; 376d0 <McBase::setupMachine(char const*, char const*)+0x1cc>
   37560:	e5933008 	ldr	r3, [r3, #8]
   37564:	e1530008 	cmp	r3, r8
   37568:	01a03005 	moveq	r3, r5
   3756c:	1a000053 	bne	376c0 <McBase::setupMachine(char const*, char const*)+0x1bc>
   37570:	e59f215c 	ldr	r2, [pc, #348]	; 376d4 <McBase::setupMachine(char const*, char const*)+0x1d0>
   37574:	e3a01004 	mov	r1, #4
   37578:	e59f0158 	ldr	r0, [pc, #344]	; 376d8 <McBase::setupMachine(char const*, char const*)+0x1d4>
   3757c:	ebffde03 	bl	2ed90 <LogWrite>
   37580:	e5943000 	ldr	r3, [r4]
   37584:	e59f2150 	ldr	r2, [pc, #336]	; 376dc <McBase::setupMachine(char const*, char const*)+0x1d8>
   37588:	e593301c 	ldr	r3, [r3, #28]
   3758c:	e1530002 	cmp	r3, r2
   37590:	1a000047 	bne	376b4 <McBase::setupMachine(char const*, char const*)+0x1b0>
   37594:	e1a01006 	mov	r1, r6
   37598:	e3a03064 	mov	r3, #100	; 0x64
   3759c:	e59f013c 	ldr	r0, [pc, #316]	; 376e0 <McBase::setupMachine(char const*, char const*)+0x1dc>
   375a0:	e28d2004 	add	r2, sp, #4
   375a4:	e59490a0 	ldr	r9, [r4, #160]	; 0xa0
   375a8:	ebffdada 	bl	2e118 <jsonGetValueForKey>
   375ac:	e5946008 	ldr	r6, [r4, #8]
   375b0:	e3500000 	cmp	r0, #0
   375b4:	e2866004 	add	r6, r6, #4
   375b8:	1a000017 	bne	3761c <McBase::setupMachine(char const*, char const*)+0x118>
   375bc:	e3590000 	cmp	r9, #0
   375c0:	0a000002 	beq	375d0 <McBase::setupMachine(char const*, char const*)+0xcc>
   375c4:	e59f3118 	ldr	r3, [pc, #280]	; 376e4 <McBase::setupMachine(char const*, char const*)+0x1e0>
   375c8:	e1590003 	cmp	r9, r3
   375cc:	9a00001b 	bls	37640 <McBase::setupMachine(char const*, char const*)+0x13c>
   375d0:	e1a00006 	mov	r0, r6
   375d4:	e3a01000 	mov	r1, #0
   375d8:	ebffeb58 	bl	32340 <TargetClockGenerator::enable(bool)>
   375dc:	e5943000 	ldr	r3, [r4]
   375e0:	e59f1100 	ldr	r1, [pc, #256]	; 376e8 <McBase::setupMachine(char const*, char const*)+0x1e4>
   375e4:	e5932018 	ldr	r2, [r3, #24]
   375e8:	e1520001 	cmp	r2, r1
   375ec:	1a000025 	bne	37688 <McBase::setupMachine(char const*, char const*)+0x184>
   375f0:	e5933008 	ldr	r3, [r3, #8]
   375f4:	e1530008 	cmp	r3, r8
   375f8:	01a03005 	moveq	r3, r5
   375fc:	1a000028 	bne	376a4 <McBase::setupMachine(char const*, char const*)+0x1a0>
   37600:	e3a01004 	mov	r1, #4
   37604:	e59f20e0 	ldr	r2, [pc, #224]	; 376ec <McBase::setupMachine(char const*, char const*)+0x1e8>
   37608:	e59f00c8 	ldr	r0, [pc, #200]	; 376d8 <McBase::setupMachine(char const*, char const*)+0x1d4>
   3760c:	ebffdddf 	bl	2ed90 <LogWrite>
   37610:	e1a00007 	mov	r0, r7
   37614:	e28dd06c 	add	sp, sp, #108	; 0x6c
   37618:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3761c:	e3a0200a 	mov	r2, #10
   37620:	e3a01000 	mov	r1, #0
   37624:	e28d0004 	add	r0, sp, #4
   37628:	ebffcb8f 	bl	2a46c <strtoul>
   3762c:	e59f30bc 	ldr	r3, [pc, #188]	; 376f0 <McBase::setupMachine(char const*, char const*)+0x1ec>
   37630:	e2402001 	sub	r2, r0, #1
   37634:	e1520003 	cmp	r2, r3
   37638:	8affffdf 	bhi	375bc <McBase::setupMachine(char const*, char const*)+0xb8>
   3763c:	e1a09000 	mov	r9, r0
   37640:	e3e01000 	mvn	r1, #0
   37644:	e1a00006 	mov	r0, r6
   37648:	ebffeb93 	bl	3249c <TargetClockGenerator::setup(int)>
   3764c:	e1a01009 	mov	r1, r9
   37650:	e1a00006 	mov	r0, r6
   37654:	ebffebb5 	bl	32530 <TargetClockGenerator::setFreqHz(unsigned long)>
   37658:	e1a00006 	mov	r0, r6
   3765c:	e3a01001 	mov	r1, #1
   37660:	ebffeb36 	bl	32340 <TargetClockGenerator::enable(bool)>
   37664:	eaffffdc 	b	375dc <McBase::setupMachine(char const*, char const*)+0xd8>
   37668:	e1a03005 	mov	r3, r5
   3766c:	e3a01002 	mov	r1, #2
   37670:	e59f207c 	ldr	r2, [pc, #124]	; 376f4 <McBase::setupMachine(char const*, char const*)+0x1f0>
   37674:	e59f005c 	ldr	r0, [pc, #92]	; 376d8 <McBase::setupMachine(char const*, char const*)+0x1d4>
   37678:	ebffddc4 	bl	2ed90 <LogWrite>
   3767c:	e1a00007 	mov	r0, r7
   37680:	e28dd06c 	add	sp, sp, #108	; 0x6c
   37684:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   37688:	e1a00004 	mov	r0, r4
   3768c:	e12fff32 	blx	r2
   37690:	e5943000 	ldr	r3, [r4]
   37694:	e5933008 	ldr	r3, [r3, #8]
   37698:	e1530008 	cmp	r3, r8
   3769c:	01a03005 	moveq	r3, r5
   376a0:	0affffd6 	beq	37600 <McBase::setupMachine(char const*, char const*)+0xfc>
   376a4:	e1a00004 	mov	r0, r4
   376a8:	e12fff33 	blx	r3
   376ac:	e1a03000 	mov	r3, r0
   376b0:	eaffffd2 	b	37600 <McBase::setupMachine(char const*, char const*)+0xfc>
   376b4:	e1a00004 	mov	r0, r4
   376b8:	e12fff33 	blx	r3
   376bc:	eaffffb4 	b	37594 <McBase::setupMachine(char const*, char const*)+0x90>
   376c0:	e1a00004 	mov	r0, r4
   376c4:	e12fff33 	blx	r3
   376c8:	e1a03000 	mov	r3, r0
   376cc:	eaffffa7 	b	37570 <McBase::setupMachine(char const*, char const*)+0x6c>
   376d0:	0003733c 	.word	0x0003733c
   376d4:	000456d8 	.word	0x000456d8
   376d8:	000456f4 	.word	0x000456f4
   376dc:	000377b8 	.word	0x000377b8
   376e0:	00045298 	.word	0x00045298
   376e4:	017d7840 	.word	0x017d7840
   376e8:	000377b4 	.word	0x000377b4
   376ec:	000456e8 	.word	0x000456e8
   376f0:	017d783f 	.word	0x017d783f
   376f4:	000456b4 	.word	0x000456b4

000376f8 <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)>:
   376f8:	e92d4070 	push	{r4, r5, r6, lr}
   376fc:	e1a05000 	mov	r5, r0
   37700:	e1a06001 	mov	r6, r1
   37704:	e59d0010 	ldr	r0, [sp, #16]
   37708:	e59f1098 	ldr	r1, [pc, #152]	; 377a8 <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)+0xb0>
   3770c:	e3500000 	cmp	r0, #0
   37710:	e5856004 	str	r6, [r5, #4]
   37714:	e5852008 	str	r2, [r5, #8]
   37718:	e5851000 	str	r1, [r5]
   3771c:	0a000019 	beq	37788 <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)+0x90>
   37720:	e1a0e003 	mov	lr, r3
   37724:	e3a02000 	mov	r2, #0
   37728:	e28540ac 	add	r4, r5, #172	; 0xac
   3772c:	e2822001 	add	r2, r2, #1
   37730:	e3520009 	cmp	r2, #9
   37734:	93a0c000 	movls	ip, #0
   37738:	83a0c001 	movhi	ip, #1
   3773c:	e1500002 	cmp	r0, r2
   37740:	938cc001 	orrls	ip, ip, #1
   37744:	e35c0000 	cmp	ip, #0
   37748:	e5a4e004 	str	lr, [r4, #4]!
   3774c:	e28ee0a4 	add	lr, lr, #164	; 0xa4
   37750:	0afffff5 	beq	3772c <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)+0x34>
   37754:	e3a02000 	mov	r2, #0
   37758:	e58500d8 	str	r0, [r5, #216]	; 0xd8
   3775c:	e58520e0 	str	r2, [r5, #224]	; 0xe0
   37760:	e58520dc 	str	r2, [r5, #220]	; 0xdc
   37764:	e1a01003 	mov	r1, r3
   37768:	e3a020a4 	mov	r2, #164	; 0xa4
   3776c:	e285000c 	add	r0, r5, #12
   37770:	ebffcc10 	bl	2a7b8 <memcpy>
   37774:	e1a00006 	mov	r0, r6
   37778:	e1a01005 	mov	r1, r5
   3777c:	ebfff790 	bl	355c4 <McManager::add(McBase*)>
   37780:	e1a00005 	mov	r0, r5
   37784:	e8bd8070 	pop	{r4, r5, r6, pc}
   37788:	e58500d8 	str	r0, [r5, #216]	; 0xd8
   3778c:	e58500e0 	str	r0, [r5, #224]	; 0xe0
   37790:	e58500dc 	str	r0, [r5, #220]	; 0xdc
   37794:	e3a020a4 	mov	r2, #164	; 0xa4
   37798:	e59f100c 	ldr	r1, [pc, #12]	; 377ac <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)+0xb4>
   3779c:	e285000c 	add	r0, r5, #12
   377a0:	ebffcc04 	bl	2a7b8 <memcpy>
   377a4:	eafffff2 	b	37774 <McBase::McBase(McManager&, BusControl&, McVariantTable const*, unsigned long)+0x7c>
   377a8:	00045704 	.word	0x00045704
   377ac:	0004685c 	.word	0x0004685c

000377b0 <DisplayBase::targetLayout(int, int, int, int, int, int, WgfxFont*, int, int)>:
   377b0:	e12fff1e 	bx	lr

000377b4 <McBase::enableMachine()>:
   377b4:	e12fff1e 	bx	lr

000377b8 <McBase::disableMachine()>:
   377b8:	e12fff1e 	bx	lr

000377bc <selfTestMemory(BusRaiderApp*, Display&, BusControl&)>:
   377bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   377c0:	e1a04001 	mov	r4, r1
   377c4:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
   377c8:	e1a05000 	mov	r5, r0
   377cc:	e1a00001 	mov	r0, r1
   377d0:	e3a0100c 	mov	r1, #12
   377d4:	e1a07002 	mov	r7, r2
   377d8:	eb000b13 	bl	3a42c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   377dc:	e1a00004 	mov	r0, r4
   377e0:	e59f1460 	ldr	r1, [pc, #1120]	; 37c48 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x48c>
   377e4:	eb000b01 	bl	3a3f0 <Display::consolePut(char const*)>
   377e8:	e1a00004 	mov	r0, r4
   377ec:	e3a0100f 	mov	r1, #15
   377f0:	eb000b0d 	bl	3a42c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   377f4:	e59f8450 	ldr	r8, [pc, #1104]	; 37c4c <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x490>
   377f8:	e1a00004 	mov	r0, r4
   377fc:	e59f144c 	ldr	r1, [pc, #1100]	; 37c50 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x494>
   37800:	eb000afa 	bl	3a3f0 <Display::consolePut(char const*)>
   37804:	e1a00004 	mov	r0, r4
   37808:	e59f1444 	ldr	r1, [pc, #1092]	; 37c54 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x498>
   3780c:	eb000af7 	bl	3a3f0 <Display::consolePut(char const*)>
   37810:	e1a0e008 	mov	lr, r8
   37814:	e28dc010 	add	ip, sp, #16
   37818:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3781c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   37820:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
   37824:	e88c000f 	stm	ip, {r0, r1, r2, r3}
   37828:	e1a00005 	mov	r0, r5
   3782c:	ebff47ba 	bl	971c <BusRaiderApp::selfTestHelperService()>
   37830:	e1a00004 	mov	r0, r4
   37834:	e59f141c 	ldr	r1, [pc, #1052]	; 37c58 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x49c>
   37838:	eb000aec 	bl	3a3f0 <Display::consolePut(char const*)>
   3783c:	e1a00005 	mov	r0, r5
   37840:	ebff47b5 	bl	971c <BusRaiderApp::selfTestHelperService()>
   37844:	e1a00005 	mov	r0, r5
   37848:	ebff47b4 	bl	9720 <BusRaiderApp::selfTestKeyboardGet()>
   3784c:	e6af6070 	sxtb	r6, r0
   37850:	e1a00006 	mov	r0, r6
   37854:	ebffdb20 	bl	2e4dc <rdtolower>
   37858:	e3500079 	cmp	r0, #121	; 0x79
   3785c:	0a000006 	beq	3787c <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0xc0>
   37860:	e1a00006 	mov	r0, r6
   37864:	ebffdb1c 	bl	2e4dc <rdtolower>
   37868:	e350006e 	cmp	r0, #110	; 0x6e
   3786c:	0a0000d3 	beq	37bc0 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x404>
   37870:	e1a00005 	mov	r0, r5
   37874:	ebff47a8 	bl	971c <BusRaiderApp::selfTestHelperService()>
   37878:	eafffff1 	b	37844 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x88>
   3787c:	e59f93d8 	ldr	r9, [pc, #984]	; 37c5c <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4a0>
   37880:	e59f13d8 	ldr	r1, [pc, #984]	; 37c60 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4a4>
   37884:	e1a00004 	mov	r0, r4
   37888:	eb000ad8 	bl	3a3f0 <Display::consolePut(char const*)>
   3788c:	e0879009 	add	r9, r7, r9
   37890:	e1a00005 	mov	r0, r5
   37894:	ebff47a0 	bl	971c <BusRaiderApp::selfTestHelperService()>
   37898:	e1a00009 	mov	r0, r9
   3789c:	e3a01064 	mov	r1, #100	; 0x64
   378a0:	ebffe84a 	bl	319d0 <BusRawAccess::targetReset(unsigned long)>
   378a4:	e1a00005 	mov	r0, r5
   378a8:	ebff479b 	bl	971c <BusRaiderApp::selfTestHelperService()>
   378ac:	e1a00007 	mov	r0, r7
   378b0:	ebffe60c 	bl	310e8 <BusControl::rawAccessStart()>
   378b4:	e3a01000 	mov	r1, #0
   378b8:	e1a00009 	mov	r0, r9
   378bc:	ebffea11 	bl	32108 <BusRawAccess::busRequestAndTake(unsigned long)>
   378c0:	e2506000 	subs	r6, r0, #0
   378c4:	1a000082 	bne	37ad4 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x318>
   378c8:	e1a00005 	mov	r0, r5
   378cc:	e58d6008 	str	r6, [sp, #8]
   378d0:	ebff4791 	bl	971c <BusRaiderApp::selfTestHelperService()>
   378d4:	e28d8010 	add	r8, sp, #16
   378d8:	e28da030 	add	sl, sp, #48	; 0x30
   378dc:	e5981004 	ldr	r1, [r8, #4]
   378e0:	e5983000 	ldr	r3, [r8]
   378e4:	e1a0000a 	mov	r0, sl
   378e8:	e0832001 	add	r2, r3, r1
   378ec:	e2422001 	sub	r2, r2, #1
   378f0:	e58d1004 	str	r1, [sp, #4]
   378f4:	e58d2000 	str	r2, [sp]
   378f8:	e3a010c8 	mov	r1, #200	; 0xc8
   378fc:	e59f2360 	ldr	r2, [pc, #864]	; 37c64 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4a8>
   37900:	ebffd9c3 	bl	2e014 <snprintf>
   37904:	e1a0100a 	mov	r1, sl
   37908:	e1a00004 	mov	r0, r4
   3790c:	eb000ab7 	bl	3a3f0 <Display::consolePut(char const*)>
   37910:	e1a00005 	mov	r0, r5
   37914:	ebff4780 	bl	971c <BusRaiderApp::selfTestHelperService()>
   37918:	e1a00005 	mov	r0, r5
   3791c:	ebff477f 	bl	9720 <BusRaiderApp::selfTestKeyboardGet()>
   37920:	e6afb070 	sxtb	fp, r0
   37924:	e1a0000b 	mov	r0, fp
   37928:	ebffdaeb 	bl	2e4dc <rdtolower>
   3792c:	e3500079 	cmp	r0, #121	; 0x79
   37930:	0a000020 	beq	379b8 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x1fc>
   37934:	e1a0000b 	mov	r0, fp
   37938:	ebffdae7 	bl	2e4dc <rdtolower>
   3793c:	e350006e 	cmp	r0, #110	; 0x6e
   37940:	1afffff2 	bne	37910 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x154>
   37944:	e1a00004 	mov	r0, r4
   37948:	e59f1318 	ldr	r1, [pc, #792]	; 37c68 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4ac>
   3794c:	eb000aa7 	bl	3a3f0 <Display::consolePut(char const*)>
   37950:	e2866001 	add	r6, r6, #1
   37954:	e1a00005 	mov	r0, r5
   37958:	ebff476f 	bl	971c <BusRaiderApp::selfTestHelperService()>
   3795c:	e3560004 	cmp	r6, #4
   37960:	e2888008 	add	r8, r8, #8
   37964:	1a00003b 	bne	37a58 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x29c>
   37968:	e1a00005 	mov	r0, r5
   3796c:	ebff476a 	bl	971c <BusRaiderApp::selfTestHelperService()>
   37970:	e1a00009 	mov	r0, r9
   37974:	ebffe97f 	bl	31f78 <BusRawAccess::busReqRelease()>
   37978:	e1a00007 	mov	r0, r7
   3797c:	ebffe5e4 	bl	31114 <BusControl::rawAccessEnd()>
   37980:	e59d3008 	ldr	r3, [sp, #8]
   37984:	e3530000 	cmp	r3, #0
   37988:	1a000084 	bne	37ba0 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x3e4>
   3798c:	e3a0100a 	mov	r1, #10
   37990:	e1a00004 	mov	r0, r4
   37994:	eb000aa4 	bl	3a42c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   37998:	e59f12cc 	ldr	r1, [pc, #716]	; 37c6c <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4b0>
   3799c:	e1a00004 	mov	r0, r4
   379a0:	eb000a92 	bl	3a3f0 <Display::consolePut(char const*)>
   379a4:	e1a00004 	mov	r0, r4
   379a8:	e3a0100f 	mov	r1, #15
   379ac:	eb000a9e 	bl	3a42c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   379b0:	e28dd0fc 	add	sp, sp, #252	; 0xfc
   379b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   379b8:	e59f12b0 	ldr	r1, [pc, #688]	; 37c70 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4b4>
   379bc:	e1a00004 	mov	r0, r4
   379c0:	eb000a8a 	bl	3a3f0 <Display::consolePut(char const*)>
   379c4:	e1a00005 	mov	r0, r5
   379c8:	ebff4753 	bl	971c <BusRaiderApp::selfTestHelperService()>
   379cc:	e28d30f8 	add	r3, sp, #248	; 0xf8
   379d0:	e0833186 	add	r3, r3, r6, lsl #3
   379d4:	e513b0e8 	ldr	fp, [r3, #-232]	; 0xffffff18
   379d8:	e51320e4 	ldr	r2, [r3, #-228]	; 0xffffff1c
   379dc:	e1a0100b 	mov	r1, fp
   379e0:	e1a00007 	mov	r0, r7
   379e4:	e58d200c 	str	r2, [sp, #12]
   379e8:	eb001515 	bl	3ce44 <memTestDevice(BusControl&, unsigned long, unsigned long)>
   379ec:	e2503000 	subs	r3, r0, #0
   379f0:	e59d200c 	ldr	r2, [sp, #12]
   379f4:	0a00001a 	beq	37a64 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x2a8>
   379f8:	e3a01009 	mov	r1, #9
   379fc:	e1a00004 	mov	r0, r4
   37a00:	e58d300c 	str	r3, [sp, #12]
   37a04:	eb000a88 	bl	3a42c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   37a08:	e59d300c 	ldr	r3, [sp, #12]
   37a0c:	e59f2260 	ldr	r2, [pc, #608]	; 37c74 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4b8>
   37a10:	e3a01064 	mov	r1, #100	; 0x64
   37a14:	e1a0000a 	mov	r0, sl
   37a18:	ebffd97d 	bl	2e014 <snprintf>
   37a1c:	e1a0100a 	mov	r1, sl
   37a20:	e1a00004 	mov	r0, r4
   37a24:	eb000a71 	bl	3a3f0 <Display::consolePut(char const*)>
   37a28:	e1a00004 	mov	r0, r4
   37a2c:	e3a0100f 	mov	r1, #15
   37a30:	eb000a7d 	bl	3a42c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   37a34:	e59d3008 	ldr	r3, [sp, #8]
   37a38:	e1a00005 	mov	r0, r5
   37a3c:	e2833001 	add	r3, r3, #1
   37a40:	e58d3008 	str	r3, [sp, #8]
   37a44:	ebff4734 	bl	971c <BusRaiderApp::selfTestHelperService()>
   37a48:	e2866001 	add	r6, r6, #1
   37a4c:	e3560004 	cmp	r6, #4
   37a50:	e2888008 	add	r8, r8, #8
   37a54:	0affffc3 	beq	37968 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x1ac>
   37a58:	e1a00005 	mov	r0, r5
   37a5c:	ebff472e 	bl	971c <BusRaiderApp::selfTestHelperService()>
   37a60:	eaffff9d 	b	378dc <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x120>
   37a64:	e1a0100b 	mov	r1, fp
   37a68:	e1a00007 	mov	r0, r7
   37a6c:	eb001483 	bl	3cc80 <memTestAddressBus(BusControl&, unsigned long, unsigned long)>
   37a70:	e2503000 	subs	r3, r0, #0
   37a74:	1a000059 	bne	37be0 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x424>
   37a78:	e1a0100b 	mov	r1, fp
   37a7c:	e1a00007 	mov	r0, r7
   37a80:	eb00145d 	bl	3cbfc <memTestDataBus(BusControl&, unsigned long)>
   37a84:	e250b000 	subs	fp, r0, #0
   37a88:	0a000005 	beq	37aa4 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x2e8>
   37a8c:	e3a01009 	mov	r1, #9
   37a90:	e1a00004 	mov	r0, r4
   37a94:	eb000a64 	bl	3a42c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   37a98:	e1a0300b 	mov	r3, fp
   37a9c:	e59f21d4 	ldr	r2, [pc, #468]	; 37c78 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4bc>
   37aa0:	eaffffda 	b	37a10 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x254>
   37aa4:	e1a00004 	mov	r0, r4
   37aa8:	e3a0100a 	mov	r1, #10
   37aac:	eb000a5e 	bl	3a42c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   37ab0:	e1a00004 	mov	r0, r4
   37ab4:	e59f11c0 	ldr	r1, [pc, #448]	; 37c7c <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4c0>
   37ab8:	eb000a4c 	bl	3a3f0 <Display::consolePut(char const*)>
   37abc:	e1a00004 	mov	r0, r4
   37ac0:	e3a0100f 	mov	r1, #15
   37ac4:	eb000a58 	bl	3a42c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   37ac8:	e1a00005 	mov	r0, r5
   37acc:	ebff4712 	bl	971c <BusRaiderApp::selfTestHelperService()>
   37ad0:	eaffffdc 	b	37a48 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x28c>
   37ad4:	e3a01009 	mov	r1, #9
   37ad8:	e1a00004 	mov	r0, r4
   37adc:	eb000a52 	bl	3a42c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   37ae0:	e59f1198 	ldr	r1, [pc, #408]	; 37c80 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4c4>
   37ae4:	e1a00004 	mov	r0, r4
   37ae8:	eb000a40 	bl	3a3f0 <Display::consolePut(char const*)>
   37aec:	e3560003 	cmp	r6, #3
   37af0:	90886106 	addls	r6, r8, r6, lsl #2
   37af4:	95961020 	ldrls	r1, [r6, #32]
   37af8:	859f1184 	ldrhi	r1, [pc, #388]	; 37c84 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4c8>
   37afc:	e1a00004 	mov	r0, r4
   37b00:	eb000a3a 	bl	3a3f0 <Display::consolePut(char const*)>
   37b04:	e1a00004 	mov	r0, r4
   37b08:	e59f1178 	ldr	r1, [pc, #376]	; 37c88 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4cc>
   37b0c:	eb000a37 	bl	3a3f0 <Display::consolePut(char const*)>
   37b10:	e1a00004 	mov	r0, r4
   37b14:	e59f1170 	ldr	r1, [pc, #368]	; 37c8c <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4d0>
   37b18:	eb000a34 	bl	3a3f0 <Display::consolePut(char const*)>
   37b1c:	e1a00004 	mov	r0, r4
   37b20:	e59f1168 	ldr	r1, [pc, #360]	; 37c90 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4d4>
   37b24:	eb000a31 	bl	3a3f0 <Display::consolePut(char const*)>
   37b28:	e1a00004 	mov	r0, r4
   37b2c:	e59f1160 	ldr	r1, [pc, #352]	; 37c94 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4d8>
   37b30:	eb000a2e 	bl	3a3f0 <Display::consolePut(char const*)>
   37b34:	e1a00004 	mov	r0, r4
   37b38:	e59f1158 	ldr	r1, [pc, #344]	; 37c98 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4dc>
   37b3c:	eb000a2b 	bl	3a3f0 <Display::consolePut(char const*)>
   37b40:	e3a0100f 	mov	r1, #15
   37b44:	e1a00004 	mov	r0, r4
   37b48:	eb000a37 	bl	3a42c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   37b4c:	e1a00005 	mov	r0, r5
   37b50:	ebff46f1 	bl	971c <BusRaiderApp::selfTestHelperService()>
   37b54:	e1a00009 	mov	r0, r9
   37b58:	ebffe906 	bl	31f78 <BusRawAccess::busReqRelease()>
   37b5c:	e1a00007 	mov	r0, r7
   37b60:	ebffe56b 	bl	31114 <BusControl::rawAccessEnd()>
   37b64:	e3a01009 	mov	r1, #9
   37b68:	e1a00004 	mov	r0, r4
   37b6c:	eb000a2e 	bl	3a42c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   37b70:	e28da030 	add	sl, sp, #48	; 0x30
   37b74:	e3a03001 	mov	r3, #1
   37b78:	e58d3008 	str	r3, [sp, #8]
   37b7c:	e59f3118 	ldr	r3, [pc, #280]	; 37c9c <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4e0>
   37b80:	e3a01064 	mov	r1, #100	; 0x64
   37b84:	e58d3000 	str	r3, [sp]
   37b88:	e1a0000a 	mov	r0, sl
   37b8c:	e59d3008 	ldr	r3, [sp, #8]
   37b90:	e59f2108 	ldr	r2, [pc, #264]	; 37ca0 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4e4>
   37b94:	ebffd91e 	bl	2e014 <snprintf>
   37b98:	e1a0100a 	mov	r1, sl
   37b9c:	eaffff7e 	b	3799c <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x1e0>
   37ba0:	e3a01009 	mov	r1, #9
   37ba4:	e1a00004 	mov	r0, r4
   37ba8:	eb000a1f 	bl	3a42c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   37bac:	e59d3008 	ldr	r3, [sp, #8]
   37bb0:	e3530001 	cmp	r3, #1
   37bb4:	159f30e8 	ldrne	r3, [pc, #232]	; 37ca4 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4e8>
   37bb8:	1afffff0 	bne	37b80 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x3c4>
   37bbc:	eaffffec 	b	37b74 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x3b8>
   37bc0:	e1a00004 	mov	r0, r4
   37bc4:	e59f1094 	ldr	r1, [pc, #148]	; 37c60 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4a4>
   37bc8:	e59f908c 	ldr	r9, [pc, #140]	; 37c5c <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4a0>
   37bcc:	eb000a07 	bl	3a3f0 <Display::consolePut(char const*)>
   37bd0:	e1a00005 	mov	r0, r5
   37bd4:	ebff46d0 	bl	971c <BusRaiderApp::selfTestHelperService()>
   37bd8:	e0879009 	add	r9, r7, r9
   37bdc:	eaffff32 	b	378ac <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0xf0>
   37be0:	e3a01009 	mov	r1, #9
   37be4:	e1a00004 	mov	r0, r4
   37be8:	e58d300c 	str	r3, [sp, #12]
   37bec:	eb000a0e 	bl	3a42c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   37bf0:	e59d300c 	ldr	r3, [sp, #12]
   37bf4:	e59f20ac 	ldr	r2, [pc, #172]	; 37ca8 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x4ec>
   37bf8:	e3a01064 	mov	r1, #100	; 0x64
   37bfc:	e1a0000a 	mov	r0, sl
   37c00:	ebffd903 	bl	2e014 <snprintf>
   37c04:	e1a0100a 	mov	r1, sl
   37c08:	e1a00004 	mov	r0, r4
   37c0c:	eb0009f7 	bl	3a3f0 <Display::consolePut(char const*)>
   37c10:	e3a0100f 	mov	r1, #15
   37c14:	e1a00004 	mov	r0, r4
   37c18:	eb000a03 	bl	3a42c <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   37c1c:	e1a0100b 	mov	r1, fp
   37c20:	e1a00007 	mov	r0, r7
   37c24:	eb0013f4 	bl	3cbfc <memTestDataBus(BusControl&, unsigned long)>
   37c28:	e59d3008 	ldr	r3, [sp, #8]
   37c2c:	e250b000 	subs	fp, r0, #0
   37c30:	e2833001 	add	r3, r3, #1
   37c34:	e58d3008 	str	r3, [sp, #8]
   37c38:	1affff93 	bne	37a8c <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x2d0>
   37c3c:	e1a00005 	mov	r0, r5
   37c40:	ebff46b5 	bl	971c <BusRaiderApp::selfTestHelperService()>
   37c44:	eaffff7f 	b	37a48 <selfTestMemory(BusRaiderApp*, Display&, BusControl&)+0x28c>
   37c48:	0004576c 	.word	0x0004576c
   37c4c:	00045ac4 	.word	0x00045ac4
   37c50:	0004577c 	.word	0x0004577c
   37c54:	000457b0 	.word	0x000457b0
   37c58:	000457d8 	.word	0x000457d8
   37c5c:	00100408 	.word	0x00100408
   37c60:	000458c4 	.word	0x000458c4
   37c64:	00045944 	.word	0x00045944
   37c68:	000459b4 	.word	0x000459b4
   37c6c:	00045a74 	.word	0x00045a74
   37c70:	0004599c 	.word	0x0004599c
   37c74:	000459c8 	.word	0x000459c8
   37c78:	00045a3c 	.word	0x00045a3c
   37c7c:	00045ab4 	.word	0x00045ab4
   37c80:	00045814 	.word	0x00045814
   37c84:	00044e8c 	.word	0x00044e8c
   37c88:	00045830 	.word	0x00045830
   37c8c:	00045870 	.word	0x00045870
   37c90:	00045898 	.word	0x00045898
   37c94:	000458c8 	.word	0x000458c8
   37c98:	00045900 	.word	0x00045900
   37c9c:	00045ac0 	.word	0x00045ac0
   37ca0:	00045a94 	.word	0x00045a94
   37ca4:	000423b4 	.word	0x000423b4
   37ca8:	00045a00 	.word	0x00045a00

00037cac <TermAnsi::~TermAnsi()>:
   37cac:	e92d4010 	push	{r4, lr}
   37cb0:	e1a04000 	mov	r4, r0
   37cb4:	e59f300c 	ldr	r3, [pc, #12]	; 37cc8 <TermAnsi::~TermAnsi()+0x1c>
   37cb8:	e5803000 	str	r3, [r0]
   37cbc:	eb000786 	bl	39adc <TermEmu::~TermEmu()>
   37cc0:	e1a00004 	mov	r0, r4
   37cc4:	e8bd8010 	pop	{r4, pc}
   37cc8:	00045b6c 	.word	0x00045b6c

00037ccc <TermAnsi::~TermAnsi()>:
   37ccc:	e92d4010 	push	{r4, lr}
   37cd0:	e1a04000 	mov	r4, r0
   37cd4:	e59f3018 	ldr	r3, [pc, #24]	; 37cf4 <TermAnsi::~TermAnsi()+0x28>
   37cd8:	e5803000 	str	r3, [r0]
   37cdc:	eb00077e 	bl	39adc <TermEmu::~TermEmu()>
   37ce0:	e1a00004 	mov	r0, r4
   37ce4:	e59f100c 	ldr	r1, [pc, #12]	; 37cf8 <TermAnsi::~TermAnsi()+0x2c>
   37ce8:	ebffcca6 	bl	2af88 <operator delete(void*, unsigned int)>
   37cec:	e1a00004 	mov	r0, r4
   37cf0:	e8bd8010 	pop	{r4, pc}
   37cf4:	00045b6c 	.word	0x00045b6c
   37cf8:	000008ac 	.word	0x000008ac

00037cfc <TermAnsi::TermAnsi()>:
   37cfc:	e92d4010 	push	{r4, lr}
   37d00:	e1a04000 	mov	r4, r0
   37d04:	eb0007b5 	bl	39be0 <TermEmu::TermEmu()>
   37d08:	e1a03004 	mov	r3, r4
   37d0c:	e3a0c020 	mov	ip, #32
   37d10:	e3a0e00f 	mov	lr, #15
   37d14:	e3a02000 	mov	r2, #0
   37d18:	e59f0058 	ldr	r0, [pc, #88]	; 37d78 <TermAnsi::TermAnsi()+0x7c>
   37d1c:	e2841e82 	add	r1, r4, #2080	; 0x820
   37d20:	e483005c 	str	r0, [r3], #92	; 0x5c
   37d24:	e281100c 	add	r1, r1, #12
   37d28:	e5c3c000 	strb	ip, [r3]
   37d2c:	e5c3e001 	strb	lr, [r3, #1]
   37d30:	e5c32002 	strb	r2, [r3, #2]
   37d34:	e5c32003 	strb	r2, [r3, #3]
   37d38:	e2833004 	add	r3, r3, #4
   37d3c:	e1530001 	cmp	r3, r1
   37d40:	1afffff8 	bne	37d28 <TermAnsi::TermAnsi()+0x2c>
   37d44:	e3a03ef2 	mov	r3, #3872	; 0xf20
   37d48:	e3a0105f 	mov	r1, #95	; 0x5f
   37d4c:	e2840e8a 	add	r0, r4, #2208	; 0x8a0
   37d50:	e5842898 	str	r2, [r4, #2200]	; 0x898
   37d54:	e584289c 	str	r2, [r4, #2204]	; 0x89c
   37d58:	e5843890 	str	r3, [r4, #2192]	; 0x890
   37d5c:	e5843894 	str	r3, [r4, #2196]	; 0x894
   37d60:	e1c020b0 	strh	r2, [r0]
   37d64:	e1a00004 	mov	r0, r4
   37d68:	e5c428a2 	strb	r2, [r4, #2210]	; 0x8a2
   37d6c:	e584c8a8 	str	ip, [r4, #2216]	; 0x8a8
   37d70:	e58418a4 	str	r1, [r4, #2212]	; 0x8a4
   37d74:	e8bd8010 	pop	{r4, pc}
   37d78:	00045b6c 	.word	0x00045b6c

00037d7c <TermAnsi::fixcursor()>:
   37d7c:	e590c010 	ldr	ip, [r0, #16]
   37d80:	e5902018 	ldr	r2, [r0, #24]
   37d84:	e590100c 	ldr	r1, [r0, #12]
   37d88:	e5903014 	ldr	r3, [r0, #20]
   37d8c:	e24cc001 	sub	ip, ip, #1
   37d90:	e152000c 	cmp	r2, ip
   37d94:	e2411001 	sub	r1, r1, #1
   37d98:	21a0200c 	movcs	r2, ip
   37d9c:	e1530001 	cmp	r3, r1
   37da0:	21a03001 	movcs	r3, r1
   37da4:	e5802018 	str	r2, [r0, #24]
   37da8:	e5803014 	str	r3, [r0, #20]
   37dac:	e12fff1e 	bx	lr

00037db0 <TermAnsi::consumearg()>:
   37db0:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   37db4:	e3530007 	cmp	r3, #7
   37db8:	95902054 	ldrls	r2, [r0, #84]	; 0x54
   37dbc:	92831001 	addls	r1, r3, #1
   37dc0:	9283300c 	addls	r3, r3, #12
   37dc4:	95801050 	strls	r1, [r0, #80]	; 0x50
   37dc8:	97802103 	strls	r2, [r0, r3, lsl #2]
   37dcc:	e3a03000 	mov	r3, #0
   37dd0:	e5803054 	str	r3, [r0, #84]	; 0x54
   37dd4:	e12fff1e 	bx	lr

00037dd8 <TermAnsi::resetparser()>:
   37dd8:	e92d4010 	push	{r4, lr}
   37ddc:	e3a02020 	mov	r2, #32
   37de0:	e1a04000 	mov	r4, r0
   37de4:	e3a01000 	mov	r1, #0
   37de8:	e2800030 	add	r0, r0, #48	; 0x30
   37dec:	ebffc828 	bl	29e94 <memset>
   37df0:	e3a03000 	mov	r3, #0
   37df4:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   37df8:	e5843050 	str	r3, [r4, #80]	; 0x50
   37dfc:	e5843054 	str	r3, [r4, #84]	; 0x54
   37e00:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   37e04:	e8bd8010 	pop	{r4, pc}

00037e08 <TermAnsi::dirtylines(unsigned int, unsigned int)>:
   37e08:	e3a0c001 	mov	ip, #1
   37e0c:	e1510002 	cmp	r1, r2
   37e10:	e5c0c01c 	strb	ip, [r0, #28]
   37e14:	212fff1e 	bxcs	lr
   37e18:	e2813e82 	add	r3, r1, #2080	; 0x820
   37e1c:	e2822e82 	add	r2, r2, #2080	; 0x820
   37e20:	e283300c 	add	r3, r3, #12
   37e24:	e282200c 	add	r2, r2, #12
   37e28:	e0803003 	add	r3, r0, r3
   37e2c:	e0800002 	add	r0, r0, r2
   37e30:	e4c3c001 	strb	ip, [r3], #1
   37e34:	e1530000 	cmp	r3, r0
   37e38:	1afffffc 	bne	37e30 <TermAnsi::dirtylines(unsigned int, unsigned int)+0x28>
   37e3c:	e12fff1e 	bx	lr

00037e40 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>:
   37e40:	e92d4030 	push	{r4, r5, lr}
   37e44:	e3a0e001 	mov	lr, #1
   37e48:	e5c0e01c 	strb	lr, [r0, #28]
   37e4c:	e3a0e001 	mov	lr, #1
   37e50:	e590c010 	ldr	ip, [r0, #16]
   37e54:	e15c0001 	cmp	ip, r1
   37e58:	924c1001 	subls	r1, ip, #1
   37e5c:	e080c001 	add	ip, r0, r1
   37e60:	e1520003 	cmp	r2, r3
   37e64:	e5cce82c 	strb	lr, [ip, #2092]	; 0x82c
   37e68:	28bd8030 	popcs	{r4, r5, pc}
   37e6c:	e3a04ef2 	mov	r4, #3872	; 0xf20
   37e70:	e2805028 	add	r5, r0, #40	; 0x28
   37e74:	e590c00c 	ldr	ip, [r0, #12]
   37e78:	e15c0002 	cmp	ip, r2
   37e7c:	98bd8030 	popls	{r4, r5, pc}
   37e80:	e02c2c91 	mla	ip, r1, ip, r2
   37e84:	e590e008 	ldr	lr, [r0, #8]
   37e88:	e2822001 	add	r2, r2, #1
   37e8c:	e15c000e 	cmp	ip, lr
   37e90:	21a0c005 	movcs	ip, r5
   37e94:	3590e004 	ldrcc	lr, [r0, #4]
   37e98:	308ec10c 	addcc	ip, lr, ip, lsl #2
   37e9c:	e1530002 	cmp	r3, r2
   37ea0:	e58c4000 	str	r4, [ip]
   37ea4:	1afffff2 	bne	37e74 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)+0x34>
   37ea8:	e8bd8030 	pop	{r4, r5, pc}

00037eac <TermAnsi::clearlines(unsigned int, unsigned int)>:
   37eac:	e92d4070 	push	{r4, r5, r6, lr}
   37eb0:	e0815002 	add	r5, r1, r2
   37eb4:	e1510005 	cmp	r1, r5
   37eb8:	28bd8070 	popcs	{r4, r5, r6, pc}
   37ebc:	e1a04001 	mov	r4, r1
   37ec0:	e5903010 	ldr	r3, [r0, #16]
   37ec4:	e1530004 	cmp	r3, r4
   37ec8:	98bd8070 	popls	{r4, r5, r6, pc}
   37ecc:	e1a01004 	mov	r1, r4
   37ed0:	e3a02000 	mov	r2, #0
   37ed4:	e590300c 	ldr	r3, [r0, #12]
   37ed8:	e2844001 	add	r4, r4, #1
   37edc:	ebffffd7 	bl	37e40 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   37ee0:	e1540005 	cmp	r4, r5
   37ee4:	1afffff5 	bne	37ec0 <TermAnsi::clearlines(unsigned int, unsigned int)+0x14>
   37ee8:	e8bd8070 	pop	{r4, r5, r6, pc}

00037eec <TermAnsi::scrollUp(unsigned int, unsigned int)>:
   37eec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   37ef0:	e1e06001 	mvn	r6, r1
   37ef4:	e1a07001 	mov	r7, r1
   37ef8:	e5901010 	ldr	r1, [r0, #16]
   37efc:	e5903004 	ldr	r3, [r0, #4]
   37f00:	e0866001 	add	r6, r6, r1
   37f04:	e1560002 	cmp	r6, r2
   37f08:	21a06002 	movcs	r6, r2
   37f0c:	e3530000 	cmp	r3, #0
   37f10:	13560000 	cmpne	r6, #0
   37f14:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   37f18:	e590c00c 	ldr	ip, [r0, #12]
   37f1c:	e1a04000 	mov	r4, r0
   37f20:	e005069c 	mul	r5, ip, r6
   37f24:	e375022e 	cmn	r5, #-536870910	; 0xe0000002
   37f28:	91a00105 	lslls	r0, r5, #2
   37f2c:	83e00000 	mvnhi	r0, #0
   37f30:	ebffcc0c 	bl	2af68 <operator new[](unsigned int)>
   37f34:	e255c001 	subs	ip, r5, #1
   37f38:	51a03000 	movpl	r3, r0
   37f3c:	e1a05000 	mov	r5, r0
   37f40:	53a0e020 	movpl	lr, #32
   37f44:	53a0100f 	movpl	r1, #15
   37f48:	53a02000 	movpl	r2, #0
   37f4c:	4a000007 	bmi	37f70 <TermAnsi::scrollUp(unsigned int, unsigned int)+0x84>
   37f50:	e24cc001 	sub	ip, ip, #1
   37f54:	e37c0001 	cmn	ip, #1
   37f58:	e5c3e000 	strb	lr, [r3]
   37f5c:	e5c31001 	strb	r1, [r3, #1]
   37f60:	e5c32002 	strb	r2, [r3, #2]
   37f64:	e5c32003 	strb	r2, [r3, #3]
   37f68:	e2833004 	add	r3, r3, #4
   37f6c:	1afffff7 	bne	37f50 <TermAnsi::scrollUp(unsigned int, unsigned int)+0x64>
   37f70:	e594300c 	ldr	r3, [r4, #12]
   37f74:	e5941004 	ldr	r1, [r4, #4]
   37f78:	e0080396 	mul	r8, r6, r3
   37f7c:	e1a09107 	lsl	r9, r7, #2
   37f80:	e1a08108 	lsl	r8, r8, #2
   37f84:	e0211399 	mla	r1, r9, r3, r1
   37f88:	e1a02008 	mov	r2, r8
   37f8c:	e1a00005 	mov	r0, r5
   37f90:	ebffca08 	bl	2a7b8 <memcpy>
   37f94:	e5942010 	ldr	r2, [r4, #16]
   37f98:	e594000c 	ldr	r0, [r4, #12]
   37f9c:	e5943004 	ldr	r3, [r4, #4]
   37fa0:	e0422007 	sub	r2, r2, r7
   37fa4:	e087c006 	add	ip, r7, r6
   37fa8:	e1a01100 	lsl	r1, r0, #2
   37fac:	e0422006 	sub	r2, r2, r6
   37fb0:	e0020291 	mul	r2, r1, r2
   37fb4:	e0203099 	mla	r0, r9, r0, r3
   37fb8:	e0213c91 	mla	r1, r1, ip, r3
   37fbc:	ebffc7e0 	bl	29f44 <memmove>
   37fc0:	e5940010 	ldr	r0, [r4, #16]
   37fc4:	e594300c 	ldr	r3, [r4, #12]
   37fc8:	e0400006 	sub	r0, r0, r6
   37fcc:	e0030093 	mul	r3, r3, r0
   37fd0:	e5940004 	ldr	r0, [r4, #4]
   37fd4:	e1a02008 	mov	r2, r8
   37fd8:	e0800103 	add	r0, r0, r3, lsl #2
   37fdc:	e1a01005 	mov	r1, r5
   37fe0:	ebffc9f4 	bl	2a7b8 <memcpy>
   37fe4:	e1a00005 	mov	r0, r5
   37fe8:	ebffcbe5 	bl	2af84 <operator delete[](void*)>
   37fec:	e5941010 	ldr	r1, [r4, #16]
   37ff0:	e1a02006 	mov	r2, r6
   37ff4:	e1a00004 	mov	r0, r4
   37ff8:	e0411006 	sub	r1, r1, r6
   37ffc:	ebffffaa 	bl	37eac <TermAnsi::clearlines(unsigned int, unsigned int)>
   38000:	e3a02001 	mov	r2, #1
   38004:	e5943010 	ldr	r3, [r4, #16]
   38008:	e5c4201c 	strb	r2, [r4, #28]
   3800c:	e1530007 	cmp	r3, r7
   38010:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   38014:	e2870e82 	add	r0, r7, #2080	; 0x820
   38018:	e0843003 	add	r3, r4, r3
   3801c:	e280000c 	add	r0, r0, #12
   38020:	e2833e82 	add	r3, r3, #2080	; 0x820
   38024:	e0840000 	add	r0, r4, r0
   38028:	e283300c 	add	r3, r3, #12
   3802c:	e4c02001 	strb	r2, [r0], #1
   38030:	e1530000 	cmp	r3, r0
   38034:	1afffffc 	bne	3802c <TermAnsi::scrollUp(unsigned int, unsigned int)+0x140>
   38038:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003803c <TermAnsi::writeCharAtCurs(int)>:
   3803c:	e92d4010 	push	{r4, lr}
   38040:	e1a04000 	mov	r4, r0
   38044:	e5903018 	ldr	r3, [r0, #24]
   38048:	e5942014 	ldr	r2, [r4, #20]
   3804c:	e590000c 	ldr	r0, [r0, #12]
   38050:	e5d4e892 	ldrb	lr, [r4, #2194]	; 0x892
   38054:	e0222390 	mla	r2, r0, r3, r2
   38058:	e5943008 	ldr	r3, [r4, #8]
   3805c:	e5d4c891 	ldrb	ip, [r4, #2193]	; 0x891
   38060:	e1520003 	cmp	r2, r3
   38064:	35943004 	ldrcc	r3, [r4, #4]
   38068:	22843028 	addcs	r3, r4, #40	; 0x28
   3806c:	30833102 	addcc	r3, r3, r2, lsl #2
   38070:	e5d42893 	ldrb	r2, [r4, #2195]	; 0x893
   38074:	e5c31000 	strb	r1, [r3]
   38078:	e5c3e002 	strb	lr, [r3, #2]
   3807c:	e5c3c001 	strb	ip, [r3, #1]
   38080:	e5c32003 	strb	r2, [r3, #3]
   38084:	e594300c 	ldr	r3, [r4, #12]
   38088:	e5942014 	ldr	r2, [r4, #20]
   3808c:	e2433001 	sub	r3, r3, #1
   38090:	e1520003 	cmp	r2, r3
   38094:	e3a00001 	mov	r0, #1
   38098:	23a02000 	movcs	r2, #0
   3809c:	e5943018 	ldr	r3, [r4, #24]
   380a0:	30822000 	addcc	r2, r2, r0
   380a4:	22833001 	addcs	r3, r3, #1
   380a8:	21c421f4 	strdcs	r2, [r4, #20]
   380ac:	35842014 	strcc	r2, [r4, #20]
   380b0:	e5942010 	ldr	r2, [r4, #16]
   380b4:	e5c4001c 	strb	r0, [r4, #28]
   380b8:	e1520003 	cmp	r2, r3
   380bc:	9a000002 	bls	380cc <TermAnsi::writeCharAtCurs(int)+0x90>
   380c0:	e3a03001 	mov	r3, #1
   380c4:	e5c4301c 	strb	r3, [r4, #28]
   380c8:	e8bd8010 	pop	{r4, pc}
   380cc:	e2422001 	sub	r2, r2, #1
   380d0:	e5842018 	str	r2, [r4, #24]
   380d4:	e3a01000 	mov	r1, #0
   380d8:	e3a02001 	mov	r2, #1
   380dc:	e1a00004 	mov	r0, r4
   380e0:	ebffff81 	bl	37eec <TermAnsi::scrollUp(unsigned int, unsigned int)>
   380e4:	eafffff5 	b	380c0 <TermAnsi::writeCharAtCurs(int)+0x84>

000380e8 <TermAnsi::scrollDown(unsigned int, unsigned int)>:
   380e8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   380ec:	e1e06001 	mvn	r6, r1
   380f0:	e1a07001 	mov	r7, r1
   380f4:	e5901010 	ldr	r1, [r0, #16]
   380f8:	e5903004 	ldr	r3, [r0, #4]
   380fc:	e0866001 	add	r6, r6, r1
   38100:	e1560002 	cmp	r6, r2
   38104:	21a06002 	movcs	r6, r2
   38108:	e3530000 	cmp	r3, #0
   3810c:	13560000 	cmpne	r6, #0
   38110:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   38114:	e590c00c 	ldr	ip, [r0, #12]
   38118:	e1a04000 	mov	r4, r0
   3811c:	e005069c 	mul	r5, ip, r6
   38120:	e375022e 	cmn	r5, #-536870910	; 0xe0000002
   38124:	91a00105 	lslls	r0, r5, #2
   38128:	83e00000 	mvnhi	r0, #0
   3812c:	ebffcb8d 	bl	2af68 <operator new[](unsigned int)>
   38130:	e255c001 	subs	ip, r5, #1
   38134:	51a03000 	movpl	r3, r0
   38138:	e1a05000 	mov	r5, r0
   3813c:	53a0e020 	movpl	lr, #32
   38140:	53a0100f 	movpl	r1, #15
   38144:	53a02000 	movpl	r2, #0
   38148:	4a000007 	bmi	3816c <TermAnsi::scrollDown(unsigned int, unsigned int)+0x84>
   3814c:	e24cc001 	sub	ip, ip, #1
   38150:	e37c0001 	cmn	ip, #1
   38154:	e5c3e000 	strb	lr, [r3]
   38158:	e5c31001 	strb	r1, [r3, #1]
   3815c:	e5c32002 	strb	r2, [r3, #2]
   38160:	e5c32003 	strb	r2, [r3, #3]
   38164:	e2833004 	add	r3, r3, #4
   38168:	1afffff7 	bne	3814c <TermAnsi::scrollDown(unsigned int, unsigned int)+0x64>
   3816c:	e594300c 	ldr	r3, [r4, #12]
   38170:	e5942010 	ldr	r2, [r4, #16]
   38174:	e1a03103 	lsl	r3, r3, #2
   38178:	e0090693 	mul	r9, r3, r6
   3817c:	e5941004 	ldr	r1, [r4, #4]
   38180:	e0422006 	sub	r2, r2, r6
   38184:	e0211293 	mla	r1, r3, r2, r1
   38188:	e1a00005 	mov	r0, r5
   3818c:	e1a02009 	mov	r2, r9
   38190:	ebffc988 	bl	2a7b8 <memcpy>
   38194:	e5942010 	ldr	r2, [r4, #16]
   38198:	e594100c 	ldr	r1, [r4, #12]
   3819c:	e5943004 	ldr	r3, [r4, #4]
   381a0:	e0422007 	sub	r2, r2, r7
   381a4:	e087c006 	add	ip, r7, r6
   381a8:	e1a00101 	lsl	r0, r1, #2
   381ac:	e1a08107 	lsl	r8, r7, #2
   381b0:	e0422006 	sub	r2, r2, r6
   381b4:	e0020290 	mul	r2, r0, r2
   381b8:	e0213198 	mla	r1, r8, r1, r3
   381bc:	e0203c90 	mla	r0, r0, ip, r3
   381c0:	ebffc75f 	bl	29f44 <memmove>
   381c4:	e5943004 	ldr	r3, [r4, #4]
   381c8:	e594000c 	ldr	r0, [r4, #12]
   381cc:	e1a02009 	mov	r2, r9
   381d0:	e0203890 	mla	r0, r0, r8, r3
   381d4:	e1a01005 	mov	r1, r5
   381d8:	ebffc976 	bl	2a7b8 <memcpy>
   381dc:	e1a00005 	mov	r0, r5
   381e0:	ebffcb67 	bl	2af84 <operator delete[](void*)>
   381e4:	e1a02006 	mov	r2, r6
   381e8:	e1a01007 	mov	r1, r7
   381ec:	e1a00004 	mov	r0, r4
   381f0:	ebffff2d 	bl	37eac <TermAnsi::clearlines(unsigned int, unsigned int)>
   381f4:	e3a02001 	mov	r2, #1
   381f8:	e5943010 	ldr	r3, [r4, #16]
   381fc:	e5c4201c 	strb	r2, [r4, #28]
   38200:	e1530007 	cmp	r3, r7
   38204:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   38208:	e2870e82 	add	r0, r7, #2080	; 0x820
   3820c:	e0843003 	add	r3, r4, r3
   38210:	e280000c 	add	r0, r0, #12
   38214:	e2833e82 	add	r3, r3, #2080	; 0x820
   38218:	e0840000 	add	r0, r4, r0
   3821c:	e283300c 	add	r3, r3, #12
   38220:	e4c02001 	strb	r2, [r0], #1
   38224:	e1530000 	cmp	r3, r0
   38228:	1afffffc 	bne	38220 <TermAnsi::scrollDown(unsigned int, unsigned int)+0x138>
   3822c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00038230 <TermAnsi::ed()>:
   38230:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   38234:	e92d4070 	push	{r4, r5, r6, lr}
   38238:	e3530001 	cmp	r3, #1
   3823c:	e1a04000 	mov	r4, r0
   38240:	e5905010 	ldr	r5, [r0, #16]
   38244:	0a000010 	beq	3828c <TermAnsi::ed()+0x5c>
   38248:	e3530002 	cmp	r3, #2
   3824c:	0a00000c 	beq	38284 <TermAnsi::ed()+0x54>
   38250:	e3530000 	cmp	r3, #0
   38254:	18bd8070 	popne	{r4, r5, r6, pc}
   38258:	e5901018 	ldr	r1, [r0, #24]
   3825c:	e590300c 	ldr	r3, [r0, #12]
   38260:	e2816001 	add	r6, r1, #1
   38264:	e5902014 	ldr	r2, [r0, #20]
   38268:	e0455006 	sub	r5, r5, r6
   3826c:	ebfffef3 	bl	37e40 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   38270:	e1a02005 	mov	r2, r5
   38274:	e1a01006 	mov	r1, r6
   38278:	e1a00004 	mov	r0, r4
   3827c:	e8bd4070 	pop	{r4, r5, r6, lr}
   38280:	eaffff09 	b	37eac <TermAnsi::clearlines(unsigned int, unsigned int)>
   38284:	e3a06000 	mov	r6, #0
   38288:	eafffff8 	b	38270 <TermAnsi::ed()+0x40>
   3828c:	e5901018 	ldr	r1, [r0, #24]
   38290:	e3a02000 	mov	r2, #0
   38294:	e5903014 	ldr	r3, [r0, #20]
   38298:	e2415001 	sub	r5, r1, #1
   3829c:	e3a06000 	mov	r6, #0
   382a0:	ebfffee6 	bl	37e40 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   382a4:	eafffff1 	b	38270 <TermAnsi::ed()+0x40>

000382a8 <TermAnsi::el()>:
   382a8:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   382ac:	e3530001 	cmp	r3, #1
   382b0:	0a00000b 	beq	382e4 <TermAnsi::el()+0x3c>
   382b4:	e3530002 	cmp	r3, #2
   382b8:	0a000005 	beq	382d4 <TermAnsi::el()+0x2c>
   382bc:	e3530000 	cmp	r3, #0
   382c0:	112fff1e 	bxne	lr
   382c4:	e590300c 	ldr	r3, [r0, #12]
   382c8:	e5902014 	ldr	r2, [r0, #20]
   382cc:	e5901018 	ldr	r1, [r0, #24]
   382d0:	eafffeda 	b	37e40 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   382d4:	e3a02000 	mov	r2, #0
   382d8:	e590300c 	ldr	r3, [r0, #12]
   382dc:	e5901018 	ldr	r1, [r0, #24]
   382e0:	eafffed6 	b	37e40 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   382e4:	e590200c 	ldr	r2, [r0, #12]
   382e8:	e5903014 	ldr	r3, [r0, #20]
   382ec:	e2422001 	sub	r2, r2, #1
   382f0:	e2833001 	add	r3, r3, #1
   382f4:	e1520003 	cmp	r2, r3
   382f8:	31a03002 	movcc	r3, r2
   382fc:	e5901018 	ldr	r1, [r0, #24]
   38300:	e3a02000 	mov	r2, #0
   38304:	eafffecd 	b	37e40 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

00038308 <TermAnsi::dch()>:
   38308:	e590c004 	ldr	ip, [r0, #4]
   3830c:	e35c0000 	cmp	ip, #0
   38310:	012fff1e 	bxeq	lr
   38314:	e92d4070 	push	{r4, r5, r6, lr}
   38318:	e5905030 	ldr	r5, [r0, #48]	; 0x30
   3831c:	e590200c 	ldr	r2, [r0, #12]
   38320:	e3550001 	cmp	r5, #1
   38324:	33a05001 	movcc	r5, #1
   38328:	e1a04000 	mov	r4, r0
   3832c:	e1c001d4 	ldrd	r0, [r0, #20]
   38330:	e0423000 	sub	r3, r2, r0
   38334:	e1550003 	cmp	r5, r3
   38338:	21a05003 	movcs	r5, r3
   3833c:	e0200291 	mla	r0, r1, r2, r0
   38340:	e0433005 	sub	r3, r3, r5
   38344:	e0020392 	mul	r2, r2, r3
   38348:	e0801005 	add	r1, r0, r5
   3834c:	e1a02102 	lsl	r2, r2, #2
   38350:	e08c1101 	add	r1, ip, r1, lsl #2
   38354:	e08c0100 	add	r0, ip, r0, lsl #2
   38358:	ebffc6f9 	bl	29f44 <memmove>
   3835c:	e594300c 	ldr	r3, [r4, #12]
   38360:	e5942014 	ldr	r2, [r4, #20]
   38364:	e1a00004 	mov	r0, r4
   38368:	e0432002 	sub	r2, r3, r2
   3836c:	e5941018 	ldr	r1, [r4, #24]
   38370:	e0422005 	sub	r2, r2, r5
   38374:	e8bd4070 	pop	{r4, r5, r6, lr}
   38378:	eafffeb0 	b	37e40 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

0003837c <TermAnsi::ich()>:
   3837c:	e590c004 	ldr	ip, [r0, #4]
   38380:	e35c0000 	cmp	ip, #0
   38384:	012fff1e 	bxeq	lr
   38388:	e92d4070 	push	{r4, r5, r6, lr}
   3838c:	e5905030 	ldr	r5, [r0, #48]	; 0x30
   38390:	e1a04000 	mov	r4, r0
   38394:	e3550001 	cmp	r5, #1
   38398:	33a05001 	movcc	r5, #1
   3839c:	e590000c 	ldr	r0, [r0, #12]
   383a0:	e5941014 	ldr	r1, [r4, #20]
   383a4:	e2402001 	sub	r2, r0, #1
   383a8:	e0422001 	sub	r2, r2, r1
   383ac:	e1550002 	cmp	r5, r2
   383b0:	21a05002 	movcs	r5, r2
   383b4:	e0423005 	sub	r3, r2, r5
   383b8:	e1530002 	cmp	r3, r2
   383bc:	31a02003 	movcc	r2, r3
   383c0:	e5943018 	ldr	r3, [r4, #24]
   383c4:	e0020290 	mul	r2, r0, r2
   383c8:	e0211093 	mla	r1, r3, r0, r1
   383cc:	e0810005 	add	r0, r1, r5
   383d0:	e1a02102 	lsl	r2, r2, #2
   383d4:	e08c1101 	add	r1, ip, r1, lsl #2
   383d8:	e08c0100 	add	r0, ip, r0, lsl #2
   383dc:	ebffc6d8 	bl	29f44 <memmove>
   383e0:	e1a03005 	mov	r3, r5
   383e4:	e1a00004 	mov	r0, r4
   383e8:	e5942014 	ldr	r2, [r4, #20]
   383ec:	e5941018 	ldr	r1, [r4, #24]
   383f0:	e8bd4070 	pop	{r4, r5, r6, lr}
   383f4:	eafffe91 	b	37e40 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

000383f8 <TermAnsi::rep()>:
   383f8:	e5902014 	ldr	r2, [r0, #20]
   383fc:	e3520000 	cmp	r2, #0
   38400:	012fff1e 	bxeq	lr
   38404:	e92d4070 	push	{r4, r5, r6, lr}
   38408:	e1a05000 	mov	r5, r0
   3840c:	e3a04000 	mov	r4, #0
   38410:	e5903018 	ldr	r3, [r0, #24]
   38414:	e590000c 	ldr	r0, [r0, #12]
   38418:	e5951004 	ldr	r1, [r5, #4]
   3841c:	e0232390 	mla	r3, r0, r3, r2
   38420:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   38424:	e7d16103 	ldrb	r6, [r1, r3, lsl #2]
   38428:	e1a01006 	mov	r1, r6
   3842c:	e1a00005 	mov	r0, r5
   38430:	ebffff01 	bl	3803c <TermAnsi::writeCharAtCurs(int)>
   38434:	e5953030 	ldr	r3, [r5, #48]	; 0x30
   38438:	e2844001 	add	r4, r4, #1
   3843c:	e3530001 	cmp	r3, #1
   38440:	33a03001 	movcc	r3, #1
   38444:	e1530004 	cmp	r3, r4
   38448:	8afffff6 	bhi	38428 <TermAnsi::rep()+0x30>
   3844c:	e8bd8070 	pop	{r4, r5, r6, pc}

00038450 <TermAnsi::sgr()>:
   38450:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   38454:	e3530000 	cmp	r3, #0
   38458:	1a000002 	bne	38468 <TermAnsi::sgr()+0x18>
   3845c:	e5d01893 	ldrb	r1, [r0, #2195]	; 0x893
   38460:	e5c01893 	strb	r1, [r0, #2195]	; 0x893
   38464:	e12fff1e 	bx	lr
   38468:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3846c:	e590e030 	ldr	lr, [r0, #48]	; 0x30
   38470:	e24e201e 	sub	r2, lr, #30
   38474:	e3520012 	cmp	r2, #18
   38478:	9a000048 	bls	385a0 <TermAnsi::sgr()+0x150>
   3847c:	e35e0013 	cmp	lr, #19
   38480:	e280c030 	add	ip, r0, #48	; 0x30
   38484:	e08cc103 	add	ip, ip, r3, lsl #2
   38488:	93a08020 	movls	r8, #32
   3848c:	83a08000 	movhi	r8, #0
   38490:	93a07010 	movls	r7, #16
   38494:	83a07000 	movhi	r7, #0
   38498:	93a06008 	movls	r6, #8
   3849c:	83a06000 	movhi	r6, #0
   384a0:	93a05004 	movls	r5, #4
   384a4:	83a05000 	movhi	r5, #0
   384a8:	93a04002 	movls	r4, #2
   384ac:	83a04000 	movhi	r4, #0
   384b0:	e1a0300e 	mov	r3, lr
   384b4:	e3a0a00f 	mov	sl, #15
   384b8:	e3a09000 	mov	r9, #0
   384bc:	e5d01893 	ldrb	r1, [r0, #2195]	; 0x893
   384c0:	e2802034 	add	r2, r0, #52	; 0x34
   384c4:	e353001c 	cmp	r3, #28
   384c8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   384cc:	ea00001d 	b	38548 <TermAnsi::sgr()+0xf8>
   384d0:	00038590 	.word	0x00038590
   384d4:	00038584 	.word	0x00038584
   384d8:	0003857c 	.word	0x0003857c
   384dc:	00038548 	.word	0x00038548
   384e0:	00038574 	.word	0x00038574
   384e4:	0003856c 	.word	0x0003856c
   384e8:	00038548 	.word	0x00038548
   384ec:	00038558 	.word	0x00038558
   384f0:	00038544 	.word	0x00038544
   384f4:	00038548 	.word	0x00038548
   384f8:	00038548 	.word	0x00038548
   384fc:	00038548 	.word	0x00038548
   38500:	00038548 	.word	0x00038548
   38504:	00038548 	.word	0x00038548
   38508:	00038548 	.word	0x00038548
   3850c:	00038548 	.word	0x00038548
   38510:	00038548 	.word	0x00038548
   38514:	00038548 	.word	0x00038548
   38518:	00038548 	.word	0x00038548
   3851c:	00038548 	.word	0x00038548
   38520:	00038548 	.word	0x00038548
   38524:	00038548 	.word	0x00038548
   38528:	00038584 	.word	0x00038584
   3852c:	0003857c 	.word	0x0003857c
   38530:	00038574 	.word	0x00038574
   38534:	0003856c 	.word	0x0003856c
   38538:	00038548 	.word	0x00038548
   3853c:	00038558 	.word	0x00038558
   38540:	00038544 	.word	0x00038544
   38544:	e1881001 	orr	r1, r8, r1
   38548:	e15c0002 	cmp	ip, r2
   3854c:	0a000004 	beq	38564 <TermAnsi::sgr()+0x114>
   38550:	e4923004 	ldr	r3, [r2], #4
   38554:	eaffffda 	b	384c4 <TermAnsi::sgr()+0x74>
   38558:	e15c0002 	cmp	ip, r2
   3855c:	e1871001 	orr	r1, r7, r1
   38560:	1afffffa 	bne	38550 <TermAnsi::sgr()+0x100>
   38564:	e5c01893 	strb	r1, [r0, #2195]	; 0x893
   38568:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3856c:	e1861001 	orr	r1, r6, r1
   38570:	eafffff4 	b	38548 <TermAnsi::sgr()+0xf8>
   38574:	e1851001 	orr	r1, r5, r1
   38578:	eafffff2 	b	38548 <TermAnsi::sgr()+0xf8>
   3857c:	e1841001 	orr	r1, r4, r1
   38580:	eafffff0 	b	38548 <TermAnsi::sgr()+0xf8>
   38584:	e35e0013 	cmp	lr, #19
   38588:	93811001 	orrls	r1, r1, #1
   3858c:	eaffffed 	b	38548 <TermAnsi::sgr()+0xf8>
   38590:	e3a01000 	mov	r1, #0
   38594:	e5c0a891 	strb	sl, [r0, #2193]	; 0x891
   38598:	e5c09892 	strb	r9, [r0, #2194]	; 0x892
   3859c:	eaffffe9 	b	38548 <TermAnsi::sgr()+0xf8>
   385a0:	e3530001 	cmp	r3, #1
   385a4:	0a00000d 	beq	385e0 <TermAnsi::sgr()+0x190>
   385a8:	e3530002 	cmp	r3, #2
   385ac:	0a000015 	beq	38608 <TermAnsi::sgr()+0x1b8>
   385b0:	e3530003 	cmp	r3, #3
   385b4:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   385b8:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   385bc:	e3530005 	cmp	r3, #5
   385c0:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   385c4:	e35e0027 	cmp	lr, #39	; 0x27
   385c8:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   385cc:	e2800e89 	add	r0, r0, #2192	; 0x890
   385d0:	8a00000a 	bhi	38600 <TermAnsi::sgr()+0x1b0>
   385d4:	e2800001 	add	r0, r0, #1
   385d8:	e5c03000 	strb	r3, [r0]
   385dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   385e0:	e59f305c 	ldr	r3, [pc, #92]	; 38644 <TermAnsi::sgr()+0x1f4>
   385e4:	e35e0027 	cmp	lr, #39	; 0x27
   385e8:	e0831293 	umull	r1, r3, r3, r2
   385ec:	e1a031a3 	lsr	r3, r3, #3
   385f0:	e0833103 	add	r3, r3, r3, lsl #2
   385f4:	e2800e89 	add	r0, r0, #2192	; 0x890
   385f8:	e0423083 	sub	r3, r2, r3, lsl #1
   385fc:	9afffff4 	bls	385d4 <TermAnsi::sgr()+0x184>
   38600:	e2800002 	add	r0, r0, #2
   38604:	eafffff3 	b	385d8 <TermAnsi::sgr()+0x188>
   38608:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   3860c:	e3530001 	cmp	r3, #1
   38610:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   38614:	e59f3028 	ldr	r3, [pc, #40]	; 38644 <TermAnsi::sgr()+0x1f4>
   38618:	e2800e89 	add	r0, r0, #2192	; 0x890
   3861c:	e0831293 	umull	r1, r3, r3, r2
   38620:	e1a031a3 	lsr	r3, r3, #3
   38624:	e0833103 	add	r3, r3, r3, lsl #2
   38628:	e0423083 	sub	r3, r2, r3, lsl #1
   3862c:	e35e0027 	cmp	lr, #39	; 0x27
   38630:	e6ef3073 	uxtb	r3, r3
   38634:	92800001 	addls	r0, r0, #1
   38638:	82800002 	addhi	r0, r0, #2
   3863c:	e2833008 	add	r3, r3, #8
   38640:	eaffffe4 	b	385d8 <TermAnsi::sgr()+0x188>
   38644:	cccccccd 	.word	0xcccccccd

00038648 <TermAnsi::handleAnsiChar(unsigned char)>:
   38648:	e3a03000 	mov	r3, #0
   3864c:	e92d4070 	push	{r4, r5, r6, lr}
   38650:	e5d0502c 	ldrb	r5, [r0, #44]	; 0x2c
   38654:	e24dd008 	sub	sp, sp, #8
   38658:	e1550003 	cmp	r5, r3
   3865c:	e1a04000 	mov	r4, r0
   38660:	e1a06001 	mov	r6, r1
   38664:	e5cd1004 	strb	r1, [sp, #4]
   38668:	e5cd3005 	strb	r3, [sp, #5]
   3866c:	0a00000e 	beq	386ac <TermAnsi::handleAnsiChar(unsigned char)+0x64>
   38670:	e3550001 	cmp	r5, #1
   38674:	0a0000a7 	beq	38918 <TermAnsi::handleAnsiChar(unsigned char)+0x2d0>
   38678:	e3550002 	cmp	r5, #2
   3867c:	0a000173 	beq	38c50 <TermAnsi::handleAnsiChar(unsigned char)+0x608>
   38680:	e3a02020 	mov	r2, #32
   38684:	e3a01000 	mov	r1, #0
   38688:	e2840030 	add	r0, r4, #48	; 0x30
   3868c:	ebffc600 	bl	29e94 <memset>
   38690:	e3a03000 	mov	r3, #0
   38694:	e1a00003 	mov	r0, r3
   38698:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3869c:	e5843050 	str	r3, [r4, #80]	; 0x50
   386a0:	e5843054 	str	r3, [r4, #84]	; 0x54
   386a4:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   386a8:	ea000021 	b	38734 <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   386ac:	e59f0fdc 	ldr	r0, [pc, #4060]	; 39690 <TermAnsi::handleAnsiChar(unsigned char)+0x1048>
   386b0:	ebffc713 	bl	2a304 <strchr>
   386b4:	e3500000 	cmp	r0, #0
   386b8:	0a00001f 	beq	3873c <TermAnsi::handleAnsiChar(unsigned char)+0xf4>
   386bc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   386c0:	e5940010 	ldr	r0, [r4, #16]
   386c4:	e3530007 	cmp	r3, #7
   386c8:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   386cc:	92831001 	addls	r1, r3, #1
   386d0:	9283300c 	addls	r3, r3, #12
   386d4:	95841050 	strls	r1, [r4, #80]	; 0x50
   386d8:	97842103 	strls	r2, [r4, r3, lsl #2]
   386dc:	e594100c 	ldr	r1, [r4, #12]
   386e0:	e5942018 	ldr	r2, [r4, #24]
   386e4:	e5943014 	ldr	r3, [r4, #20]
   386e8:	e2400001 	sub	r0, r0, #1
   386ec:	e1520000 	cmp	r2, r0
   386f0:	e2411001 	sub	r1, r1, #1
   386f4:	21a02000 	movcs	r2, r0
   386f8:	e1530001 	cmp	r3, r1
   386fc:	e3a05000 	mov	r5, #0
   38700:	21a03001 	movcs	r3, r1
   38704:	e5842018 	str	r2, [r4, #24]
   38708:	e1a01005 	mov	r1, r5
   3870c:	e3a02020 	mov	r2, #32
   38710:	e5843014 	str	r3, [r4, #20]
   38714:	e5845054 	str	r5, [r4, #84]	; 0x54
   38718:	e2840030 	add	r0, r4, #48	; 0x30
   3871c:	ebffc5dc 	bl	29e94 <memset>
   38720:	e3a00001 	mov	r0, #1
   38724:	e5c4502c 	strb	r5, [r4, #44]	; 0x2c
   38728:	e5845050 	str	r5, [r4, #80]	; 0x50
   3872c:	e5845054 	str	r5, [r4, #84]	; 0x54
   38730:	e5c45058 	strb	r5, [r4, #88]	; 0x58
   38734:	e28dd008 	add	sp, sp, #8
   38738:	e8bd8070 	pop	{r4, r5, r6, pc}
   3873c:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   38740:	e3550000 	cmp	r5, #0
   38744:	1affffc9 	bne	38670 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   38748:	e1a01006 	mov	r1, r6
   3874c:	e59f0f40 	ldr	r0, [pc, #3904]	; 39694 <TermAnsi::handleAnsiChar(unsigned char)+0x104c>
   38750:	ebffc6eb 	bl	2a304 <strchr>
   38754:	e3500000 	cmp	r0, #0
   38758:	0a000025 	beq	387f4 <TermAnsi::handleAnsiChar(unsigned char)+0x1ac>
   3875c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   38760:	e5940014 	ldr	r0, [r4, #20]
   38764:	e3530007 	cmp	r3, #7
   38768:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3876c:	92831001 	addls	r1, r3, #1
   38770:	9283300c 	addls	r3, r3, #12
   38774:	95841050 	strls	r1, [r4, #80]	; 0x50
   38778:	97842103 	strls	r2, [r4, r3, lsl #2]
   3877c:	e3a02000 	mov	r2, #0
   38780:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   38784:	e5842054 	str	r2, [r4, #84]	; 0x54
   38788:	e1530002 	cmp	r3, r2
   3878c:	1a000001 	bne	38798 <TermAnsi::handleAnsiChar(unsigned char)+0x150>
   38790:	e3500000 	cmp	r0, #0
   38794:	12400001 	subne	r0, r0, #1
   38798:	e5941010 	ldr	r1, [r4, #16]
   3879c:	e5942018 	ldr	r2, [r4, #24]
   387a0:	e594300c 	ldr	r3, [r4, #12]
   387a4:	e2411001 	sub	r1, r1, #1
   387a8:	e1520001 	cmp	r2, r1
   387ac:	e2433001 	sub	r3, r3, #1
   387b0:	21a02001 	movcs	r2, r1
   387b4:	e1530000 	cmp	r3, r0
   387b8:	21a03000 	movcs	r3, r0
   387bc:	e5842018 	str	r2, [r4, #24]
   387c0:	e5843014 	str	r3, [r4, #20]
   387c4:	e3a02020 	mov	r2, #32
   387c8:	e3a01000 	mov	r1, #0
   387cc:	e2840030 	add	r0, r4, #48	; 0x30
   387d0:	ebffc5af 	bl	29e94 <memset>
   387d4:	e3a03000 	mov	r3, #0
   387d8:	e3a00001 	mov	r0, #1
   387dc:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   387e0:	e5843050 	str	r3, [r4, #80]	; 0x50
   387e4:	e5843054 	str	r3, [r4, #84]	; 0x54
   387e8:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   387ec:	e28dd008 	add	sp, sp, #8
   387f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   387f4:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   387f8:	e3550000 	cmp	r5, #0
   387fc:	1affff9b 	bne	38670 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   38800:	e1a01006 	mov	r1, r6
   38804:	e59f0e8c 	ldr	r0, [pc, #3724]	; 39698 <TermAnsi::handleAnsiChar(unsigned char)+0x1050>
   38808:	ebffc6bd 	bl	2a304 <strchr>
   3880c:	e3500000 	cmp	r0, #0
   38810:	0a000020 	beq	38898 <TermAnsi::handleAnsiChar(unsigned char)+0x250>
   38814:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   38818:	e3530007 	cmp	r3, #7
   3881c:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   38820:	92831001 	addls	r1, r3, #1
   38824:	9283300c 	addls	r3, r3, #12
   38828:	95841050 	strls	r1, [r4, #80]	; 0x50
   3882c:	97842103 	strls	r2, [r4, r3, lsl #2]
   38830:	e3a02000 	mov	r2, #0
   38834:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   38838:	e594100c 	ldr	r1, [r4, #12]
   3883c:	e1530002 	cmp	r3, r2
   38840:	e5842054 	str	r2, [r4, #84]	; 0x54
   38844:	e5943014 	ldr	r3, [r4, #20]
   38848:	e2411001 	sub	r1, r1, #1
   3884c:	1a000009 	bne	38878 <TermAnsi::handleAnsiChar(unsigned char)+0x230>
   38850:	e2833001 	add	r3, r3, #1
   38854:	e284c058 	add	ip, r4, #88	; 0x58
   38858:	ea000003 	b	3886c <TermAnsi::handleAnsiChar(unsigned char)+0x224>
   3885c:	e7dc0102 	ldrb	r0, [ip, r2, lsl #2]
   38860:	e350002a 	cmp	r0, #42	; 0x2a
   38864:	0a000003 	beq	38878 <TermAnsi::handleAnsiChar(unsigned char)+0x230>
   38868:	e1a03002 	mov	r3, r2
   3886c:	e1510003 	cmp	r1, r3
   38870:	e2832001 	add	r2, r3, #1
   38874:	8afffff8 	bhi	3885c <TermAnsi::handleAnsiChar(unsigned char)+0x214>
   38878:	e5940010 	ldr	r0, [r4, #16]
   3887c:	e5942018 	ldr	r2, [r4, #24]
   38880:	e2400001 	sub	r0, r0, #1
   38884:	e1520000 	cmp	r2, r0
   38888:	21a02000 	movcs	r2, r0
   3888c:	e1510003 	cmp	r1, r3
   38890:	31a03001 	movcc	r3, r1
   38894:	eaffffc8 	b	387bc <TermAnsi::handleAnsiChar(unsigned char)+0x174>
   38898:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   3889c:	e3550000 	cmp	r5, #0
   388a0:	1affff72 	bne	38670 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   388a4:	e1a01006 	mov	r1, r6
   388a8:	e59f0dec 	ldr	r0, [pc, #3564]	; 3969c <TermAnsi::handleAnsiChar(unsigned char)+0x1054>
   388ac:	ebffc694 	bl	2a304 <strchr>
   388b0:	e3500000 	cmp	r0, #0
   388b4:	0a000039 	beq	389a0 <TermAnsi::handleAnsiChar(unsigned char)+0x358>
   388b8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   388bc:	e3530007 	cmp	r3, #7
   388c0:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   388c4:	92831001 	addls	r1, r3, #1
   388c8:	9283300c 	addls	r3, r3, #12
   388cc:	95841050 	strls	r1, [r4, #80]	; 0x50
   388d0:	97842103 	strls	r2, [r4, r3, lsl #2]
   388d4:	e3a03000 	mov	r3, #0
   388d8:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   388dc:	e5843054 	str	r3, [r4, #84]	; 0x54
   388e0:	e1510003 	cmp	r1, r3
   388e4:	0a000057 	beq	38a48 <TermAnsi::handleAnsiChar(unsigned char)+0x400>
   388e8:	e5942010 	ldr	r2, [r4, #16]
   388ec:	e5940018 	ldr	r0, [r4, #24]
   388f0:	e2423001 	sub	r3, r2, #1
   388f4:	e1530000 	cmp	r3, r0
   388f8:	21a03000 	movcs	r3, r0
   388fc:	e594100c 	ldr	r1, [r4, #12]
   38900:	e5942014 	ldr	r2, [r4, #20]
   38904:	e2411001 	sub	r1, r1, #1
   38908:	e1520001 	cmp	r2, r1
   3890c:	21a02001 	movcs	r2, r1
   38910:	e1c421f4 	strd	r2, [r4, #20]
   38914:	eaffffaa 	b	387c4 <TermAnsi::handleAnsiChar(unsigned char)+0x17c>
   38918:	e1a01006 	mov	r1, r6
   3891c:	e59f0d7c 	ldr	r0, [pc, #3452]	; 396a0 <TermAnsi::handleAnsiChar(unsigned char)+0x1058>
   38920:	ebffc677 	bl	2a304 <strchr>
   38924:	e3500000 	cmp	r0, #0
   38928:	0a000003 	beq	3893c <TermAnsi::handleAnsiChar(unsigned char)+0x2f4>
   3892c:	e3a00001 	mov	r0, #1
   38930:	e5c4002c 	strb	r0, [r4, #44]	; 0x2c
   38934:	e28dd008 	add	sp, sp, #8
   38938:	e8bd8070 	pop	{r4, r5, r6, pc}
   3893c:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   38940:	e3550001 	cmp	r5, #1
   38944:	1affff4b 	bne	38678 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   38948:	e1a01006 	mov	r1, r6
   3894c:	e59f0d50 	ldr	r0, [pc, #3408]	; 396a4 <TermAnsi::handleAnsiChar(unsigned char)+0x105c>
   38950:	ebffc66b 	bl	2a304 <strchr>
   38954:	e3500000 	cmp	r0, #0
   38958:	0a000044 	beq	38a70 <TermAnsi::handleAnsiChar(unsigned char)+0x428>
   3895c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   38960:	e3530007 	cmp	r3, #7
   38964:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   38968:	92831001 	addls	r1, r3, #1
   3896c:	9283300c 	addls	r3, r3, #12
   38970:	95841050 	strls	r1, [r4, #80]	; 0x50
   38974:	97842103 	strls	r2, [r4, r3, lsl #2]
   38978:	e3a02000 	mov	r2, #0
   3897c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   38980:	e5842054 	str	r2, [r4, #84]	; 0x54
   38984:	e1530002 	cmp	r3, r2
   38988:	03a0202a 	moveq	r2, #42	; 0x2a
   3898c:	05940014 	ldreq	r0, [r4, #20]
   38990:	15940014 	ldrne	r0, [r4, #20]
   38994:	00843100 	addeq	r3, r4, r0, lsl #2
   38998:	05c3205c 	strbeq	r2, [r3, #92]	; 0x5c
   3899c:	eaffff7d 	b	38798 <TermAnsi::handleAnsiChar(unsigned char)+0x150>
   389a0:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   389a4:	e3550000 	cmp	r5, #0
   389a8:	1affff30 	bne	38670 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   389ac:	e1a01006 	mov	r1, r6
   389b0:	e59f0cf0 	ldr	r0, [pc, #3312]	; 396a8 <TermAnsi::handleAnsiChar(unsigned char)+0x1060>
   389b4:	ebffc652 	bl	2a304 <strchr>
   389b8:	e3500000 	cmp	r0, #0
   389bc:	0a000017 	beq	38a20 <TermAnsi::handleAnsiChar(unsigned char)+0x3d8>
   389c0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   389c4:	e5940010 	ldr	r0, [r4, #16]
   389c8:	e3530007 	cmp	r3, #7
   389cc:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   389d0:	92831001 	addls	r1, r3, #1
   389d4:	9283300c 	addls	r3, r3, #12
   389d8:	95841050 	strls	r1, [r4, #80]	; 0x50
   389dc:	97842103 	strls	r2, [r4, r3, lsl #2]
   389e0:	e3a02000 	mov	r2, #0
   389e4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   389e8:	e5941018 	ldr	r1, [r4, #24]
   389ec:	e1530002 	cmp	r3, r2
   389f0:	e2400001 	sub	r0, r0, #1
   389f4:	e5842054 	str	r2, [r4, #84]	; 0x54
   389f8:	01a02003 	moveq	r2, r3
   389fc:	15942014 	ldrne	r2, [r4, #20]
   38a00:	e1510000 	cmp	r1, r0
   38a04:	21a01000 	movcs	r1, r0
   38a08:	e594300c 	ldr	r3, [r4, #12]
   38a0c:	e5841018 	str	r1, [r4, #24]
   38a10:	e2433001 	sub	r3, r3, #1
   38a14:	e1530002 	cmp	r3, r2
   38a18:	21a03002 	movcs	r3, r2
   38a1c:	eaffff67 	b	387c0 <TermAnsi::handleAnsiChar(unsigned char)+0x178>
   38a20:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   38a24:	e3550000 	cmp	r5, #0
   38a28:	1affff10 	bne	38670 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   38a2c:	e1a01006 	mov	r1, r6
   38a30:	e59f0c68 	ldr	r0, [pc, #3176]	; 396a0 <TermAnsi::handleAnsiChar(unsigned char)+0x1058>
   38a34:	ebffc632 	bl	2a304 <strchr>
   38a38:	e3500000 	cmp	r0, #0
   38a3c:	1affffba 	bne	3892c <TermAnsi::handleAnsiChar(unsigned char)+0x2e4>
   38a40:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   38a44:	eaffff09 	b	38670 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   38a48:	e5943010 	ldr	r3, [r4, #16]
   38a4c:	e5940018 	ldr	r0, [r4, #24]
   38a50:	e2433001 	sub	r3, r3, #1
   38a54:	e1500003 	cmp	r0, r3
   38a58:	32800001 	addcc	r0, r0, #1
   38a5c:	3affffa4 	bcc	388f4 <TermAnsi::handleAnsiChar(unsigned char)+0x2ac>
   38a60:	e3a02001 	mov	r2, #1
   38a64:	e1a00004 	mov	r0, r4
   38a68:	ebfffd1f 	bl	37eec <TermAnsi::scrollUp(unsigned int, unsigned int)>
   38a6c:	eaffff9d 	b	388e8 <TermAnsi::handleAnsiChar(unsigned char)+0x2a0>
   38a70:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   38a74:	e3550001 	cmp	r5, #1
   38a78:	1afffefe 	bne	38678 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   38a7c:	e1a01006 	mov	r1, r6
   38a80:	e59f0c24 	ldr	r0, [pc, #3108]	; 396ac <TermAnsi::handleAnsiChar(unsigned char)+0x1064>
   38a84:	ebffc61e 	bl	2a304 <strchr>
   38a88:	e3500000 	cmp	r0, #0
   38a8c:	0a00001f 	beq	38b10 <TermAnsi::handleAnsiChar(unsigned char)+0x4c8>
   38a90:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   38a94:	e3530007 	cmp	r3, #7
   38a98:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   38a9c:	92831001 	addls	r1, r3, #1
   38aa0:	9283300c 	addls	r3, r3, #12
   38aa4:	95841050 	strls	r1, [r4, #80]	; 0x50
   38aa8:	97842103 	strls	r2, [r4, r3, lsl #2]
   38aac:	e3a02000 	mov	r2, #0
   38ab0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   38ab4:	e5842054 	str	r2, [r4, #84]	; 0x54
   38ab8:	e1530002 	cmp	r3, r2
   38abc:	1a000008 	bne	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   38ac0:	e5943890 	ldr	r3, [r4, #2192]	; 0x890
   38ac4:	e284ce89 	add	ip, r4, #2192	; 0x890
   38ac8:	e28cc008 	add	ip, ip, #8
   38acc:	e284e014 	add	lr, r4, #20
   38ad0:	e5843894 	str	r3, [r4, #2196]	; 0x894
   38ad4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   38ad8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   38adc:	e59e3000 	ldr	r3, [lr]
   38ae0:	e58c3000 	str	r3, [ip]
   38ae4:	e5940010 	ldr	r0, [r4, #16]
   38ae8:	e5942018 	ldr	r2, [r4, #24]
   38aec:	e594100c 	ldr	r1, [r4, #12]
   38af0:	e2400001 	sub	r0, r0, #1
   38af4:	e5943014 	ldr	r3, [r4, #20]
   38af8:	e1520000 	cmp	r2, r0
   38afc:	e2411001 	sub	r1, r1, #1
   38b00:	21a02000 	movcs	r2, r0
   38b04:	e1530001 	cmp	r3, r1
   38b08:	21a03001 	movcs	r3, r1
   38b0c:	eaffff2a 	b	387bc <TermAnsi::handleAnsiChar(unsigned char)+0x174>
   38b10:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   38b14:	e3550001 	cmp	r5, #1
   38b18:	1afffed6 	bne	38678 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   38b1c:	e1a01006 	mov	r1, r6
   38b20:	e59f0b88 	ldr	r0, [pc, #2952]	; 396b0 <TermAnsi::handleAnsiChar(unsigned char)+0x1068>
   38b24:	ebffc5f6 	bl	2a304 <strchr>
   38b28:	e3500000 	cmp	r0, #0
   38b2c:	0a000015 	beq	38b88 <TermAnsi::handleAnsiChar(unsigned char)+0x540>
   38b30:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   38b34:	e3530007 	cmp	r3, #7
   38b38:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   38b3c:	92831001 	addls	r1, r3, #1
   38b40:	9283300c 	addls	r3, r3, #12
   38b44:	95841050 	strls	r1, [r4, #80]	; 0x50
   38b48:	97842103 	strls	r2, [r4, r3, lsl #2]
   38b4c:	e3a02000 	mov	r2, #0
   38b50:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   38b54:	e5842054 	str	r2, [r4, #84]	; 0x54
   38b58:	e1530002 	cmp	r3, r2
   38b5c:	1affffe0 	bne	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   38b60:	e5945894 	ldr	r5, [r4, #2196]	; 0x894
   38b64:	e284ce89 	add	ip, r4, #2192	; 0x890
   38b68:	e28cc008 	add	ip, ip, #8
   38b6c:	e284e014 	add	lr, r4, #20
   38b70:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
   38b74:	e5845890 	str	r5, [r4, #2192]	; 0x890
   38b78:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   38b7c:	e59c3000 	ldr	r3, [ip]
   38b80:	e58e3000 	str	r3, [lr]
   38b84:	eaffffd6 	b	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   38b88:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   38b8c:	e3550001 	cmp	r5, #1
   38b90:	1afffeb8 	bne	38678 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   38b94:	e1a01006 	mov	r1, r6
   38b98:	e59f0b14 	ldr	r0, [pc, #2836]	; 396b4 <TermAnsi::handleAnsiChar(unsigned char)+0x106c>
   38b9c:	ebffc5d8 	bl	2a304 <strchr>
   38ba0:	e3500000 	cmp	r0, #0
   38ba4:	0a000004 	beq	38bbc <TermAnsi::handleAnsiChar(unsigned char)+0x574>
   38ba8:	e3a00001 	mov	r0, #1
   38bac:	e3a03002 	mov	r3, #2
   38bb0:	e5c40058 	strb	r0, [r4, #88]	; 0x58
   38bb4:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   38bb8:	eafffedd 	b	38734 <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   38bbc:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   38bc0:	e3550001 	cmp	r5, #1
   38bc4:	1afffeab 	bne	38678 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   38bc8:	e1a01006 	mov	r1, r6
   38bcc:	e59f0b44 	ldr	r0, [pc, #2884]	; 39718 <TermAnsi::handleAnsiChar(unsigned char)+0x10d0>
   38bd0:	ebffc5cb 	bl	2a304 <strchr>
   38bd4:	e3500000 	cmp	r0, #0
   38bd8:	0a000010 	beq	38c20 <TermAnsi::handleAnsiChar(unsigned char)+0x5d8>
   38bdc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   38be0:	e3530007 	cmp	r3, #7
   38be4:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   38be8:	92831001 	addls	r1, r3, #1
   38bec:	9283300c 	addls	r3, r3, #12
   38bf0:	95841050 	strls	r1, [r4, #80]	; 0x50
   38bf4:	97842103 	strls	r2, [r4, r3, lsl #2]
   38bf8:	e3a02000 	mov	r2, #0
   38bfc:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   38c00:	e5842054 	str	r2, [r4, #84]	; 0x54
   38c04:	e1530002 	cmp	r3, r2
   38c08:	1affffb5 	bne	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   38c0c:	e5943000 	ldr	r3, [r4]
   38c10:	e1a00004 	mov	r0, r4
   38c14:	e5933010 	ldr	r3, [r3, #16]
   38c18:	e12fff33 	blx	r3
   38c1c:	eaffffb0 	b	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   38c20:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   38c24:	e3550001 	cmp	r5, #1
   38c28:	1afffe92 	bne	38678 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   38c2c:	e1a01006 	mov	r1, r6
   38c30:	e59f0a80 	ldr	r0, [pc, #2688]	; 396b8 <TermAnsi::handleAnsiChar(unsigned char)+0x1070>
   38c34:	ebffc5b2 	bl	2a304 <strchr>
   38c38:	e3500000 	cmp	r0, #0
   38c3c:	0a000082 	beq	38e4c <TermAnsi::handleAnsiChar(unsigned char)+0x804>
   38c40:	e3a03002 	mov	r3, #2
   38c44:	e1a00005 	mov	r0, r5
   38c48:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   38c4c:	eafffeb8 	b	38734 <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   38c50:	e1a01006 	mov	r1, r6
   38c54:	e59f0a44 	ldr	r0, [pc, #2628]	; 396a0 <TermAnsi::handleAnsiChar(unsigned char)+0x1058>
   38c58:	ebffc5a9 	bl	2a304 <strchr>
   38c5c:	e3500000 	cmp	r0, #0
   38c60:	1affff31 	bne	3892c <TermAnsi::handleAnsiChar(unsigned char)+0x2e4>
   38c64:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   38c68:	e3530002 	cmp	r3, #2
   38c6c:	1afffe83 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   38c70:	e1a01006 	mov	r1, r6
   38c74:	e59f0a40 	ldr	r0, [pc, #2624]	; 396bc <TermAnsi::handleAnsiChar(unsigned char)+0x1074>
   38c78:	ebffc5a1 	bl	2a304 <strchr>
   38c7c:	e3500000 	cmp	r0, #0
   38c80:	0a00000a 	beq	38cb0 <TermAnsi::handleAnsiChar(unsigned char)+0x668>
   38c84:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   38c88:	e3a00001 	mov	r0, #1
   38c8c:	e3530007 	cmp	r3, #7
   38c90:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   38c94:	92831001 	addls	r1, r3, #1
   38c98:	9283300c 	addls	r3, r3, #12
   38c9c:	95841050 	strls	r1, [r4, #80]	; 0x50
   38ca0:	97842103 	strls	r2, [r4, r3, lsl #2]
   38ca4:	e3a03000 	mov	r3, #0
   38ca8:	e5843054 	str	r3, [r4, #84]	; 0x54
   38cac:	eafffea0 	b	38734 <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   38cb0:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   38cb4:	e3530002 	cmp	r3, #2
   38cb8:	1afffe70 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   38cbc:	e1a01006 	mov	r1, r6
   38cc0:	e59f09f8 	ldr	r0, [pc, #2552]	; 396c0 <TermAnsi::handleAnsiChar(unsigned char)+0x1078>
   38cc4:	ebffc58e 	bl	2a304 <strchr>
   38cc8:	e3500000 	cmp	r0, #0
   38ccc:	13a00001 	movne	r0, #1
   38cd0:	1afffe97 	bne	38734 <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   38cd4:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   38cd8:	e3530002 	cmp	r3, #2
   38cdc:	1afffe67 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   38ce0:	e1a01006 	mov	r1, r6
   38ce4:	e59f09d8 	ldr	r0, [pc, #2520]	; 396c4 <TermAnsi::handleAnsiChar(unsigned char)+0x107c>
   38ce8:	ebffc585 	bl	2a304 <strchr>
   38cec:	e3500000 	cmp	r0, #0
   38cf0:	1a0000e9 	bne	3909c <TermAnsi::handleAnsiChar(unsigned char)+0xa54>
   38cf4:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   38cf8:	e3530002 	cmp	r3, #2
   38cfc:	1afffe5f 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   38d00:	e1a01006 	mov	r1, r6
   38d04:	e59f09bc 	ldr	r0, [pc, #2492]	; 396c8 <TermAnsi::handleAnsiChar(unsigned char)+0x1080>
   38d08:	ebffc57d 	bl	2a304 <strchr>
   38d0c:	e3500000 	cmp	r0, #0
   38d10:	0a000018 	beq	38d78 <TermAnsi::handleAnsiChar(unsigned char)+0x730>
   38d14:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   38d18:	e3530007 	cmp	r3, #7
   38d1c:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   38d20:	92831001 	addls	r1, r3, #1
   38d24:	9283300c 	addls	r3, r3, #12
   38d28:	95841050 	strls	r1, [r4, #80]	; 0x50
   38d2c:	97842103 	strls	r2, [r4, r3, lsl #2]
   38d30:	e3a02000 	mov	r2, #0
   38d34:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   38d38:	e5842054 	str	r2, [r4, #84]	; 0x54
   38d3c:	e1530002 	cmp	r3, r2
   38d40:	0a000151 	beq	3928c <TermAnsi::handleAnsiChar(unsigned char)+0xc44>
   38d44:	e5942018 	ldr	r2, [r4, #24]
   38d48:	e5943010 	ldr	r3, [r4, #16]
   38d4c:	e594000c 	ldr	r0, [r4, #12]
   38d50:	e2433001 	sub	r3, r3, #1
   38d54:	e5941014 	ldr	r1, [r4, #20]
   38d58:	e1530002 	cmp	r3, r2
   38d5c:	e2400001 	sub	r0, r0, #1
   38d60:	21a03002 	movcs	r3, r2
   38d64:	e1510000 	cmp	r1, r0
   38d68:	21a01000 	movcs	r1, r0
   38d6c:	e5843018 	str	r3, [r4, #24]
   38d70:	e5841014 	str	r1, [r4, #20]
   38d74:	eafffe92 	b	387c4 <TermAnsi::handleAnsiChar(unsigned char)+0x17c>
   38d78:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   38d7c:	e3530002 	cmp	r3, #2
   38d80:	1afffe3e 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   38d84:	e1a01006 	mov	r1, r6
   38d88:	e59f093c 	ldr	r0, [pc, #2364]	; 396cc <TermAnsi::handleAnsiChar(unsigned char)+0x1084>
   38d8c:	ebffc55c 	bl	2a304 <strchr>
   38d90:	e3500000 	cmp	r0, #0
   38d94:	0a000010 	beq	38ddc <TermAnsi::handleAnsiChar(unsigned char)+0x794>
   38d98:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   38d9c:	e3530007 	cmp	r3, #7
   38da0:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   38da4:	92831001 	addls	r1, r3, #1
   38da8:	9283300c 	addls	r3, r3, #12
   38dac:	95841050 	strls	r1, [r4, #80]	; 0x50
   38db0:	97842103 	strls	r2, [r4, r3, lsl #2]
   38db4:	e3a02000 	mov	r2, #0
   38db8:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   38dbc:	e5842054 	str	r2, [r4, #84]	; 0x54
   38dc0:	e1530002 	cmp	r3, r2
   38dc4:	0a000138 	beq	392ac <TermAnsi::handleAnsiChar(unsigned char)+0xc64>
   38dc8:	e5943010 	ldr	r3, [r4, #16]
   38dcc:	e5942018 	ldr	r2, [r4, #24]
   38dd0:	e2433001 	sub	r3, r3, #1
   38dd4:	e594000c 	ldr	r0, [r4, #12]
   38dd8:	eaffffdd 	b	38d54 <TermAnsi::handleAnsiChar(unsigned char)+0x70c>
   38ddc:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   38de0:	e3530002 	cmp	r3, #2
   38de4:	1afffe25 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   38de8:	e1a01006 	mov	r1, r6
   38dec:	e59f08dc 	ldr	r0, [pc, #2268]	; 396d0 <TermAnsi::handleAnsiChar(unsigned char)+0x1088>
   38df0:	ebffc543 	bl	2a304 <strchr>
   38df4:	e3500000 	cmp	r0, #0
   38df8:	0a000015 	beq	38e54 <TermAnsi::handleAnsiChar(unsigned char)+0x80c>
   38dfc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   38e00:	e3530007 	cmp	r3, #7
   38e04:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   38e08:	92831001 	addls	r1, r3, #1
   38e0c:	9283300c 	addls	r3, r3, #12
   38e10:	95841050 	strls	r1, [r4, #80]	; 0x50
   38e14:	97842103 	strls	r2, [r4, r3, lsl #2]
   38e18:	e3a02000 	mov	r2, #0
   38e1c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   38e20:	e5842054 	str	r2, [r4, #84]	; 0x54
   38e24:	e1530002 	cmp	r3, r2
   38e28:	0a000144 	beq	39340 <TermAnsi::handleAnsiChar(unsigned char)+0xcf8>
   38e2c:	e594300c 	ldr	r3, [r4, #12]
   38e30:	e5941014 	ldr	r1, [r4, #20]
   38e34:	e2433001 	sub	r3, r3, #1
   38e38:	e5940010 	ldr	r0, [r4, #16]
   38e3c:	e5942018 	ldr	r2, [r4, #24]
   38e40:	e2400001 	sub	r0, r0, #1
   38e44:	e1520000 	cmp	r2, r0
   38e48:	eaffff2c 	b	38b00 <TermAnsi::handleAnsiChar(unsigned char)+0x4b8>
   38e4c:	e5d4502c 	ldrb	r5, [r4, #44]	; 0x2c
   38e50:	eafffe08 	b	38678 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   38e54:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   38e58:	e3530002 	cmp	r3, #2
   38e5c:	1afffe07 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   38e60:	e1a01006 	mov	r1, r6
   38e64:	e59f0868 	ldr	r0, [pc, #2152]	; 396d4 <TermAnsi::handleAnsiChar(unsigned char)+0x108c>
   38e68:	ebffc525 	bl	2a304 <strchr>
   38e6c:	e3500000 	cmp	r0, #0
   38e70:	0a000013 	beq	38ec4 <TermAnsi::handleAnsiChar(unsigned char)+0x87c>
   38e74:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   38e78:	e3530007 	cmp	r3, #7
   38e7c:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   38e80:	92831001 	addls	r1, r3, #1
   38e84:	9283300c 	addls	r3, r3, #12
   38e88:	95841050 	strls	r1, [r4, #80]	; 0x50
   38e8c:	97842103 	strls	r2, [r4, r3, lsl #2]
   38e90:	e3a02000 	mov	r2, #0
   38e94:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   38e98:	e5842054 	str	r2, [r4, #84]	; 0x54
   38e9c:	e1530002 	cmp	r3, r2
   38ea0:	0a00014b 	beq	393d4 <TermAnsi::handleAnsiChar(unsigned char)+0xd8c>
   38ea4:	e5941014 	ldr	r1, [r4, #20]
   38ea8:	e5940010 	ldr	r0, [r4, #16]
   38eac:	e5942018 	ldr	r2, [r4, #24]
   38eb0:	e594300c 	ldr	r3, [r4, #12]
   38eb4:	e2400001 	sub	r0, r0, #1
   38eb8:	e1520000 	cmp	r2, r0
   38ebc:	e2433001 	sub	r3, r3, #1
   38ec0:	eaffff0e 	b	38b00 <TermAnsi::handleAnsiChar(unsigned char)+0x4b8>
   38ec4:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   38ec8:	e3530002 	cmp	r3, #2
   38ecc:	1afffdeb 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   38ed0:	e1a01006 	mov	r1, r6
   38ed4:	e59f07fc 	ldr	r0, [pc, #2044]	; 396d8 <TermAnsi::handleAnsiChar(unsigned char)+0x1090>
   38ed8:	ebffc509 	bl	2a304 <strchr>
   38edc:	e3500000 	cmp	r0, #0
   38ee0:	0a000014 	beq	38f38 <TermAnsi::handleAnsiChar(unsigned char)+0x8f0>
   38ee4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   38ee8:	e3530007 	cmp	r3, #7
   38eec:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   38ef0:	92831001 	addls	r1, r3, #1
   38ef4:	9283300c 	addls	r3, r3, #12
   38ef8:	95841050 	strls	r1, [r4, #80]	; 0x50
   38efc:	97842103 	strls	r2, [r4, r3, lsl #2]
   38f00:	e3a03000 	mov	r3, #0
   38f04:	e5d42058 	ldrb	r2, [r4, #88]	; 0x58
   38f08:	e5843054 	str	r3, [r4, #84]	; 0x54
   38f0c:	e1520003 	cmp	r2, r3
   38f10:	0a000151 	beq	3945c <TermAnsi::handleAnsiChar(unsigned char)+0xe14>
   38f14:	e5943010 	ldr	r3, [r4, #16]
   38f18:	e5940018 	ldr	r0, [r4, #24]
   38f1c:	e5941014 	ldr	r1, [r4, #20]
   38f20:	e2433001 	sub	r3, r3, #1
   38f24:	e594200c 	ldr	r2, [r4, #12]
   38f28:	e1530000 	cmp	r3, r0
   38f2c:	21a03000 	movcs	r3, r0
   38f30:	e2422001 	sub	r2, r2, #1
   38f34:	eafffe73 	b	38908 <TermAnsi::handleAnsiChar(unsigned char)+0x2c0>
   38f38:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   38f3c:	e3530002 	cmp	r3, #2
   38f40:	1afffdce 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   38f44:	e1a01006 	mov	r1, r6
   38f48:	e59f078c 	ldr	r0, [pc, #1932]	; 396dc <TermAnsi::handleAnsiChar(unsigned char)+0x1094>
   38f4c:	ebffc4ec 	bl	2a304 <strchr>
   38f50:	e3500000 	cmp	r0, #0
   38f54:	0a000012 	beq	38fa4 <TermAnsi::handleAnsiChar(unsigned char)+0x95c>
   38f58:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   38f5c:	e3530007 	cmp	r3, #7
   38f60:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   38f64:	92831001 	addls	r1, r3, #1
   38f68:	9283300c 	addls	r3, r3, #12
   38f6c:	95841050 	strls	r1, [r4, #80]	; 0x50
   38f70:	97842103 	strls	r2, [r4, r3, lsl #2]
   38f74:	e3a03000 	mov	r3, #0
   38f78:	e5d42058 	ldrb	r2, [r4, #88]	; 0x58
   38f7c:	e5843054 	str	r3, [r4, #84]	; 0x54
   38f80:	e1520003 	cmp	r2, r3
   38f84:	0a000155 	beq	394e0 <TermAnsi::handleAnsiChar(unsigned char)+0xe98>
   38f88:	e1c401d4 	ldrd	r0, [r4, #20]
   38f8c:	e5942010 	ldr	r2, [r4, #16]
   38f90:	e594300c 	ldr	r3, [r4, #12]
   38f94:	e2422001 	sub	r2, r2, #1
   38f98:	e1520001 	cmp	r2, r1
   38f9c:	e2433001 	sub	r3, r3, #1
   38fa0:	eafffe02 	b	387b0 <TermAnsi::handleAnsiChar(unsigned char)+0x168>
   38fa4:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   38fa8:	e3530002 	cmp	r3, #2
   38fac:	1afffdb3 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   38fb0:	e1a01006 	mov	r1, r6
   38fb4:	e59f0724 	ldr	r0, [pc, #1828]	; 396e0 <TermAnsi::handleAnsiChar(unsigned char)+0x1098>
   38fb8:	ebffc4d1 	bl	2a304 <strchr>
   38fbc:	e3500000 	cmp	r0, #0
   38fc0:	0a000018 	beq	39028 <TermAnsi::handleAnsiChar(unsigned char)+0x9e0>
   38fc4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   38fc8:	e3530007 	cmp	r3, #7
   38fcc:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   38fd0:	92831001 	addls	r1, r3, #1
   38fd4:	9283300c 	addls	r3, r3, #12
   38fd8:	95841050 	strls	r1, [r4, #80]	; 0x50
   38fdc:	97842103 	strls	r2, [r4, r3, lsl #2]
   38fe0:	e3a02000 	mov	r2, #0
   38fe4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   38fe8:	e5842054 	str	r2, [r4, #84]	; 0x54
   38fec:	e1530002 	cmp	r3, r2
   38ff0:	0a000159 	beq	3955c <TermAnsi::handleAnsiChar(unsigned char)+0xf14>
   38ff4:	e594300c 	ldr	r3, [r4, #12]
   38ff8:	e5942014 	ldr	r2, [r4, #20]
   38ffc:	e2433001 	sub	r3, r3, #1
   39000:	e1530002 	cmp	r3, r2
   39004:	21a03002 	movcs	r3, r2
   39008:	e5941010 	ldr	r1, [r4, #16]
   3900c:	e5942018 	ldr	r2, [r4, #24]
   39010:	e2411001 	sub	r1, r1, #1
   39014:	e1520001 	cmp	r2, r1
   39018:	21a02001 	movcs	r2, r1
   3901c:	e5843014 	str	r3, [r4, #20]
   39020:	e5842018 	str	r2, [r4, #24]
   39024:	eafffde6 	b	387c4 <TermAnsi::handleAnsiChar(unsigned char)+0x17c>
   39028:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3902c:	e3530002 	cmp	r3, #2
   39030:	1afffd92 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   39034:	e1a01006 	mov	r1, r6
   39038:	e59f06a4 	ldr	r0, [pc, #1700]	; 396e4 <TermAnsi::handleAnsiChar(unsigned char)+0x109c>
   3903c:	ebffc4b0 	bl	2a304 <strchr>
   39040:	e3500000 	cmp	r0, #0
   39044:	0a00001d 	beq	390c0 <TermAnsi::handleAnsiChar(unsigned char)+0xa78>
   39048:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3904c:	e3530007 	cmp	r3, #7
   39050:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39054:	92831001 	addls	r1, r3, #1
   39058:	9283300c 	addls	r3, r3, #12
   3905c:	95841050 	strls	r1, [r4, #80]	; 0x50
   39060:	97842103 	strls	r2, [r4, r3, lsl #2]
   39064:	e3a02000 	mov	r2, #0
   39068:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3906c:	e5842054 	str	r2, [r4, #84]	; 0x54
   39070:	e1530002 	cmp	r3, r2
   39074:	0a00015d 	beq	395f0 <TermAnsi::handleAnsiChar(unsigned char)+0xfa8>
   39078:	e5943010 	ldr	r3, [r4, #16]
   3907c:	e5942018 	ldr	r2, [r4, #24]
   39080:	e2433001 	sub	r3, r3, #1
   39084:	e1530002 	cmp	r3, r2
   39088:	21a03002 	movcs	r3, r2
   3908c:	e594100c 	ldr	r1, [r4, #12]
   39090:	e5942014 	ldr	r2, [r4, #20]
   39094:	e2411001 	sub	r1, r1, #1
   39098:	eafffe1a 	b	38908 <TermAnsi::handleAnsiChar(unsigned char)+0x2c0>
   3909c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   390a0:	e28d0004 	add	r0, sp, #4
   390a4:	e0833103 	add	r3, r3, r3, lsl #2
   390a8:	e1a05083 	lsl	r5, r3, #1
   390ac:	ebffc5bd 	bl	2a7a8 <atoi>
   390b0:	e0800005 	add	r0, r0, r5
   390b4:	e5840054 	str	r0, [r4, #84]	; 0x54
   390b8:	e3a00001 	mov	r0, #1
   390bc:	eafffd9c 	b	38734 <TermAnsi::handleAnsiChar(unsigned char)+0xec>
   390c0:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   390c4:	e3530002 	cmp	r3, #2
   390c8:	1afffd6c 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   390cc:	e1a01006 	mov	r1, r6
   390d0:	e59f0610 	ldr	r0, [pc, #1552]	; 396e8 <TermAnsi::handleAnsiChar(unsigned char)+0x10a0>
   390d4:	ebffc48a 	bl	2a304 <strchr>
   390d8:	e3500000 	cmp	r0, #0
   390dc:	0a000013 	beq	39130 <TermAnsi::handleAnsiChar(unsigned char)+0xae8>
   390e0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   390e4:	e3530007 	cmp	r3, #7
   390e8:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   390ec:	92831001 	addls	r1, r3, #1
   390f0:	9283300c 	addls	r3, r3, #12
   390f4:	95841050 	strls	r1, [r4, #80]	; 0x50
   390f8:	97842103 	strls	r2, [r4, r3, lsl #2]
   390fc:	e3a02000 	mov	r2, #0
   39100:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   39104:	e5842054 	str	r2, [r4, #84]	; 0x54
   39108:	e1530002 	cmp	r3, r2
   3910c:	0a00018b 	beq	39740 <TermAnsi::handleAnsiChar(unsigned char)+0x10f8>
   39110:	e5940018 	ldr	r0, [r4, #24]
   39114:	e5941014 	ldr	r1, [r4, #20]
   39118:	e5942010 	ldr	r2, [r4, #16]
   3911c:	e594300c 	ldr	r3, [r4, #12]
   39120:	e2422001 	sub	r2, r2, #1
   39124:	e1520000 	cmp	r2, r0
   39128:	e2433001 	sub	r3, r3, #1
   3912c:	eafffe73 	b	38b00 <TermAnsi::handleAnsiChar(unsigned char)+0x4b8>
   39130:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   39134:	e3530002 	cmp	r3, #2
   39138:	1afffd50 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3913c:	e1a01006 	mov	r1, r6
   39140:	e59f05a4 	ldr	r0, [pc, #1444]	; 396ec <TermAnsi::handleAnsiChar(unsigned char)+0x10a4>
   39144:	ebffc46e 	bl	2a304 <strchr>
   39148:	e3500000 	cmp	r0, #0
   3914c:	0a000020 	beq	391d4 <TermAnsi::handleAnsiChar(unsigned char)+0xb8c>
   39150:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   39154:	e594000c 	ldr	r0, [r4, #12]
   39158:	e3530007 	cmp	r3, #7
   3915c:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39160:	92831001 	addls	r1, r3, #1
   39164:	9283300c 	addls	r3, r3, #12
   39168:	95841050 	strls	r1, [r4, #80]	; 0x50
   3916c:	97842103 	strls	r2, [r4, r3, lsl #2]
   39170:	e3a02000 	mov	r2, #0
   39174:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   39178:	e5842054 	str	r2, [r4, #84]	; 0x54
   3917c:	e1530002 	cmp	r3, r2
   39180:	1a00000c 	bne	391b8 <TermAnsi::handleAnsiChar(unsigned char)+0xb70>
   39184:	e5943014 	ldr	r3, [r4, #20]
   39188:	e240c001 	sub	ip, r0, #1
   3918c:	e2833001 	add	r3, r3, #1
   39190:	e284e058 	add	lr, r4, #88	; 0x58
   39194:	ea000003 	b	391a8 <TermAnsi::handleAnsiChar(unsigned char)+0xb60>
   39198:	e7de1102 	ldrb	r1, [lr, r2, lsl #2]
   3919c:	e351002a 	cmp	r1, #42	; 0x2a
   391a0:	0a000003 	beq	391b4 <TermAnsi::handleAnsiChar(unsigned char)+0xb6c>
   391a4:	e1a03002 	mov	r3, r2
   391a8:	e15c0003 	cmp	ip, r3
   391ac:	e2832001 	add	r2, r3, #1
   391b0:	8afffff8 	bhi	39198 <TermAnsi::handleAnsiChar(unsigned char)+0xb50>
   391b4:	e5843014 	str	r3, [r4, #20]
   391b8:	e5941010 	ldr	r1, [r4, #16]
   391bc:	e5942018 	ldr	r2, [r4, #24]
   391c0:	e2411001 	sub	r1, r1, #1
   391c4:	e5943014 	ldr	r3, [r4, #20]
   391c8:	e2400001 	sub	r0, r0, #1
   391cc:	e1520001 	cmp	r2, r1
   391d0:	eafffd76 	b	387b0 <TermAnsi::handleAnsiChar(unsigned char)+0x168>
   391d4:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   391d8:	e3530002 	cmp	r3, #2
   391dc:	1afffd27 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   391e0:	e1a01006 	mov	r1, r6
   391e4:	e59f0504 	ldr	r0, [pc, #1284]	; 396f0 <TermAnsi::handleAnsiChar(unsigned char)+0x10a8>
   391e8:	ebffc445 	bl	2a304 <strchr>
   391ec:	e3500000 	cmp	r0, #0
   391f0:	0a00000e 	beq	39230 <TermAnsi::handleAnsiChar(unsigned char)+0xbe8>
   391f4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   391f8:	e3530007 	cmp	r3, #7
   391fc:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39200:	92831001 	addls	r1, r3, #1
   39204:	9283300c 	addls	r3, r3, #12
   39208:	95841050 	strls	r1, [r4, #80]	; 0x50
   3920c:	97842103 	strls	r2, [r4, r3, lsl #2]
   39210:	e3a02000 	mov	r2, #0
   39214:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   39218:	e5842054 	str	r2, [r4, #84]	; 0x54
   3921c:	e1530002 	cmp	r3, r2
   39220:	1afffe2f 	bne	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   39224:	e1a00004 	mov	r0, r4
   39228:	ebfffc00 	bl	38230 <TermAnsi::ed()>
   3922c:	eafffe2c 	b	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   39230:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   39234:	e3530002 	cmp	r3, #2
   39238:	1afffd10 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3923c:	e1a01006 	mov	r1, r6
   39240:	e59f04ac 	ldr	r0, [pc, #1196]	; 396f4 <TermAnsi::handleAnsiChar(unsigned char)+0x10ac>
   39244:	ebffc42e 	bl	2a304 <strchr>
   39248:	e3500000 	cmp	r0, #0
   3924c:	0a000020 	beq	392d4 <TermAnsi::handleAnsiChar(unsigned char)+0xc8c>
   39250:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   39254:	e3530007 	cmp	r3, #7
   39258:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3925c:	92831001 	addls	r1, r3, #1
   39260:	9283300c 	addls	r3, r3, #12
   39264:	95841050 	strls	r1, [r4, #80]	; 0x50
   39268:	97842103 	strls	r2, [r4, r3, lsl #2]
   3926c:	e3a02000 	mov	r2, #0
   39270:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   39274:	e5842054 	str	r2, [r4, #84]	; 0x54
   39278:	e1530002 	cmp	r3, r2
   3927c:	1afffe18 	bne	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   39280:	e1a00004 	mov	r0, r4
   39284:	ebfffc07 	bl	382a8 <TermAnsi::el()>
   39288:	eafffe15 	b	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3928c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   39290:	e5941018 	ldr	r1, [r4, #24]
   39294:	e3520001 	cmp	r2, #1
   39298:	33a02001 	movcc	r2, #1
   3929c:	e1510002 	cmp	r1, r2
   392a0:	31a02003 	movcc	r2, r3
   392a4:	20412002 	subcs	r2, r1, r2
   392a8:	eafffea6 	b	38d48 <TermAnsi::handleAnsiChar(unsigned char)+0x700>
   392ac:	e5941030 	ldr	r1, [r4, #48]	; 0x30
   392b0:	e5942018 	ldr	r2, [r4, #24]
   392b4:	e5943010 	ldr	r3, [r4, #16]
   392b8:	e3510001 	cmp	r1, #1
   392bc:	20822001 	addcs	r2, r2, r1
   392c0:	32822001 	addcc	r2, r2, #1
   392c4:	e2433001 	sub	r3, r3, #1
   392c8:	e1520003 	cmp	r2, r3
   392cc:	21a02003 	movcs	r2, r3
   392d0:	eafffebf 	b	38dd4 <TermAnsi::handleAnsiChar(unsigned char)+0x78c>
   392d4:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   392d8:	e3530002 	cmp	r3, #2
   392dc:	1afffce7 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   392e0:	e1a01006 	mov	r1, r6
   392e4:	e59f040c 	ldr	r0, [pc, #1036]	; 396f8 <TermAnsi::handleAnsiChar(unsigned char)+0x10b0>
   392e8:	ebffc405 	bl	2a304 <strchr>
   392ec:	e3500000 	cmp	r0, #0
   392f0:	0a00001c 	beq	39368 <TermAnsi::handleAnsiChar(unsigned char)+0xd20>
   392f4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   392f8:	e3530007 	cmp	r3, #7
   392fc:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39300:	92831001 	addls	r1, r3, #1
   39304:	9283300c 	addls	r3, r3, #12
   39308:	95841050 	strls	r1, [r4, #80]	; 0x50
   3930c:	97842103 	strls	r2, [r4, r3, lsl #2]
   39310:	e3a02000 	mov	r2, #0
   39314:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   39318:	e5842054 	str	r2, [r4, #84]	; 0x54
   3931c:	e1530002 	cmp	r3, r2
   39320:	05942030 	ldreq	r2, [r4, #48]	; 0x30
   39324:	05941018 	ldreq	r1, [r4, #24]
   39328:	1afffded 	bne	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3932c:	e3520001 	cmp	r2, #1
   39330:	33a02001 	movcc	r2, #1
   39334:	e1a00004 	mov	r0, r4
   39338:	ebfffb6a 	bl	380e8 <TermAnsi::scrollDown(unsigned int, unsigned int)>
   3933c:	eafffde8 	b	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   39340:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   39344:	e5941014 	ldr	r1, [r4, #20]
   39348:	e594300c 	ldr	r3, [r4, #12]
   3934c:	e3520001 	cmp	r2, #1
   39350:	20811002 	addcs	r1, r1, r2
   39354:	32811001 	addcc	r1, r1, #1
   39358:	e2433001 	sub	r3, r3, #1
   3935c:	e1510003 	cmp	r1, r3
   39360:	21a01003 	movcs	r1, r3
   39364:	eafffeb3 	b	38e38 <TermAnsi::handleAnsiChar(unsigned char)+0x7f0>
   39368:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3936c:	e3530002 	cmp	r3, #2
   39370:	1afffcc2 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   39374:	e1a01006 	mov	r1, r6
   39378:	e59f037c 	ldr	r0, [pc, #892]	; 396fc <TermAnsi::handleAnsiChar(unsigned char)+0x10b4>
   3937c:	ebffc3e0 	bl	2a304 <strchr>
   39380:	e3500000 	cmp	r0, #0
   39384:	0a00001d 	beq	39400 <TermAnsi::handleAnsiChar(unsigned char)+0xdb8>
   39388:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3938c:	e3530007 	cmp	r3, #7
   39390:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39394:	92831001 	addls	r1, r3, #1
   39398:	9283300c 	addls	r3, r3, #12
   3939c:	95841050 	strls	r1, [r4, #80]	; 0x50
   393a0:	97842103 	strls	r2, [r4, r3, lsl #2]
   393a4:	e3a02000 	mov	r2, #0
   393a8:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   393ac:	e5842054 	str	r2, [r4, #84]	; 0x54
   393b0:	e1530002 	cmp	r3, r2
   393b4:	05942030 	ldreq	r2, [r4, #48]	; 0x30
   393b8:	05941018 	ldreq	r1, [r4, #24]
   393bc:	1afffdc8 	bne	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   393c0:	e3520001 	cmp	r2, #1
   393c4:	33a02001 	movcc	r2, #1
   393c8:	e1a00004 	mov	r0, r4
   393cc:	ebfffac6 	bl	37eec <TermAnsi::scrollUp(unsigned int, unsigned int)>
   393d0:	eafffdc3 	b	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   393d4:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   393d8:	e5941014 	ldr	r1, [r4, #20]
   393dc:	e3520001 	cmp	r2, #1
   393e0:	33a02001 	movcc	r2, #1
   393e4:	e1520001 	cmp	r2, r1
   393e8:	81a01003 	movhi	r1, r3
   393ec:	8afffead 	bhi	38ea8 <TermAnsi::handleAnsiChar(unsigned char)+0x860>
   393f0:	e0412002 	sub	r2, r1, r2
   393f4:	e1520001 	cmp	r2, r1
   393f8:	31a01002 	movcc	r1, r2
   393fc:	eafffea9 	b	38ea8 <TermAnsi::handleAnsiChar(unsigned char)+0x860>
   39400:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   39404:	e3530002 	cmp	r3, #2
   39408:	1afffc9c 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3940c:	e1a01006 	mov	r1, r6
   39410:	e59f02e8 	ldr	r0, [pc, #744]	; 39700 <TermAnsi::handleAnsiChar(unsigned char)+0x10b8>
   39414:	ebffc3ba 	bl	2a304 <strchr>
   39418:	e3500000 	cmp	r0, #0
   3941c:	0a000019 	beq	39488 <TermAnsi::handleAnsiChar(unsigned char)+0xe40>
   39420:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   39424:	e3530007 	cmp	r3, #7
   39428:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   3942c:	92831001 	addls	r1, r3, #1
   39430:	9283300c 	addls	r3, r3, #12
   39434:	95841050 	strls	r1, [r4, #80]	; 0x50
   39438:	97842103 	strls	r2, [r4, r3, lsl #2]
   3943c:	e3a02000 	mov	r2, #0
   39440:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   39444:	e5842054 	str	r2, [r4, #84]	; 0x54
   39448:	e1530002 	cmp	r3, r2
   3944c:	1afffda4 	bne	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   39450:	e1a00004 	mov	r0, r4
   39454:	ebfffbab 	bl	38308 <TermAnsi::dch()>
   39458:	eafffda1 	b	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3945c:	e5941030 	ldr	r1, [r4, #48]	; 0x30
   39460:	e5940018 	ldr	r0, [r4, #24]
   39464:	e5943010 	ldr	r3, [r4, #16]
   39468:	e3510001 	cmp	r1, #1
   3946c:	20800001 	addcs	r0, r0, r1
   39470:	32800001 	addcc	r0, r0, #1
   39474:	e2433001 	sub	r3, r3, #1
   39478:	e1500003 	cmp	r0, r3
   3947c:	e1a01002 	mov	r1, r2
   39480:	21a00003 	movcs	r0, r3
   39484:	eafffea6 	b	38f24 <TermAnsi::handleAnsiChar(unsigned char)+0x8dc>
   39488:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3948c:	e3530002 	cmp	r3, #2
   39490:	1afffc7a 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   39494:	e1a01006 	mov	r1, r6
   39498:	e59f0264 	ldr	r0, [pc, #612]	; 39704 <TermAnsi::handleAnsiChar(unsigned char)+0x10bc>
   3949c:	ebffc398 	bl	2a304 <strchr>
   394a0:	e3500000 	cmp	r0, #0
   394a4:	0a000016 	beq	39504 <TermAnsi::handleAnsiChar(unsigned char)+0xebc>
   394a8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   394ac:	e3530007 	cmp	r3, #7
   394b0:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   394b4:	92831001 	addls	r1, r3, #1
   394b8:	9283300c 	addls	r3, r3, #12
   394bc:	95841050 	strls	r1, [r4, #80]	; 0x50
   394c0:	97842103 	strls	r2, [r4, r3, lsl #2]
   394c4:	e3a03000 	mov	r3, #0
   394c8:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   394cc:	e5843054 	str	r3, [r4, #84]	; 0x54
   394d0:	e1510003 	cmp	r1, r3
   394d4:	1afffd82 	bne	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   394d8:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   394dc:	eaffffb7 	b	393c0 <TermAnsi::handleAnsiChar(unsigned char)+0xd78>
   394e0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   394e4:	e5941018 	ldr	r1, [r4, #24]
   394e8:	e3530001 	cmp	r3, #1
   394ec:	33a03001 	movcc	r3, #1
   394f0:	e1510003 	cmp	r1, r3
   394f4:	01a01002 	moveq	r1, r2
   394f8:	e3a00000 	mov	r0, #0
   394fc:	10411003 	subne	r1, r1, r3
   39500:	eafffea1 	b	38f8c <TermAnsi::handleAnsiChar(unsigned char)+0x944>
   39504:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   39508:	e3530002 	cmp	r3, #2
   3950c:	1afffc5b 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   39510:	e1a01006 	mov	r1, r6
   39514:	e59f01ec 	ldr	r0, [pc, #492]	; 39708 <TermAnsi::handleAnsiChar(unsigned char)+0x10c0>
   39518:	ebffc379 	bl	2a304 <strchr>
   3951c:	e3500000 	cmp	r0, #0
   39520:	0a000016 	beq	39580 <TermAnsi::handleAnsiChar(unsigned char)+0xf38>
   39524:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   39528:	e3530007 	cmp	r3, #7
   3952c:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39530:	92831001 	addls	r1, r3, #1
   39534:	9283300c 	addls	r3, r3, #12
   39538:	95841050 	strls	r1, [r4, #80]	; 0x50
   3953c:	97842103 	strls	r2, [r4, r3, lsl #2]
   39540:	e3a03000 	mov	r3, #0
   39544:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   39548:	e5843054 	str	r3, [r4, #84]	; 0x54
   3954c:	e1510003 	cmp	r1, r3
   39550:	1afffd63 	bne	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   39554:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   39558:	eaffff73 	b	3932c <TermAnsi::handleAnsiChar(unsigned char)+0xce4>
   3955c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   39560:	e594200c 	ldr	r2, [r4, #12]
   39564:	e3530000 	cmp	r3, #0
   39568:	0afffea6 	beq	39008 <TermAnsi::handleAnsiChar(unsigned char)+0x9c0>
   3956c:	e2422001 	sub	r2, r2, #1
   39570:	e2433001 	sub	r3, r3, #1
   39574:	e1530002 	cmp	r3, r2
   39578:	21a03002 	movcs	r3, r2
   3957c:	eafffea1 	b	39008 <TermAnsi::handleAnsiChar(unsigned char)+0x9c0>
   39580:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   39584:	e3530002 	cmp	r3, #2
   39588:	1afffc3c 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3958c:	e1a01006 	mov	r1, r6
   39590:	e59f0174 	ldr	r0, [pc, #372]	; 3970c <TermAnsi::handleAnsiChar(unsigned char)+0x10c4>
   39594:	ebffc35a 	bl	2a304 <strchr>
   39598:	e3500000 	cmp	r0, #0
   3959c:	0a00001c 	beq	39614 <TermAnsi::handleAnsiChar(unsigned char)+0xfcc>
   395a0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   395a4:	e3530007 	cmp	r3, #7
   395a8:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   395ac:	92831001 	addls	r1, r3, #1
   395b0:	9283300c 	addls	r3, r3, #12
   395b4:	95841050 	strls	r1, [r4, #80]	; 0x50
   395b8:	97842103 	strls	r2, [r4, r3, lsl #2]
   395bc:	e3a02000 	mov	r2, #0
   395c0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   395c4:	e5842054 	str	r2, [r4, #84]	; 0x54
   395c8:	e1530002 	cmp	r3, r2
   395cc:	1afffd44 	bne	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   395d0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   395d4:	e1a00004 	mov	r0, r4
   395d8:	e3530001 	cmp	r3, #1
   395dc:	33a03001 	movcc	r3, #1
   395e0:	e5942014 	ldr	r2, [r4, #20]
   395e4:	e5941018 	ldr	r1, [r4, #24]
   395e8:	ebfffa14 	bl	37e40 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   395ec:	eafffd3c 	b	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   395f0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   395f4:	e5942010 	ldr	r2, [r4, #16]
   395f8:	e3530000 	cmp	r3, #0
   395fc:	0afffea2 	beq	3908c <TermAnsi::handleAnsiChar(unsigned char)+0xa44>
   39600:	e2422001 	sub	r2, r2, #1
   39604:	e2433001 	sub	r3, r3, #1
   39608:	e1530002 	cmp	r3, r2
   3960c:	21a03002 	movcs	r3, r2
   39610:	eafffe9d 	b	3908c <TermAnsi::handleAnsiChar(unsigned char)+0xa44>
   39614:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   39618:	e3530002 	cmp	r3, #2
   3961c:	1afffc17 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   39620:	e1a01006 	mov	r1, r6
   39624:	e59f00e4 	ldr	r0, [pc, #228]	; 39710 <TermAnsi::handleAnsiChar(unsigned char)+0x10c8>
   39628:	ebffc335 	bl	2a304 <strchr>
   3962c:	e3500000 	cmp	r0, #0
   39630:	0a000049 	beq	3975c <TermAnsi::handleAnsiChar(unsigned char)+0x1114>
   39634:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   39638:	e3530007 	cmp	r3, #7
   3963c:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39640:	92831001 	addls	r1, r3, #1
   39644:	9283300c 	addls	r3, r3, #12
   39648:	95841050 	strls	r1, [r4, #80]	; 0x50
   3964c:	97842103 	strls	r2, [r4, r3, lsl #2]
   39650:	e3a02000 	mov	r2, #0
   39654:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   39658:	e5842054 	str	r2, [r4, #84]	; 0x54
   3965c:	e1530002 	cmp	r3, r2
   39660:	1afffd1f 	bne	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   39664:	e5943014 	ldr	r3, [r4, #20]
   39668:	e284105c 	add	r1, r4, #92	; 0x5c
   3966c:	ea000003 	b	39680 <TermAnsi::handleAnsiChar(unsigned char)+0x1038>
   39670:	e5843014 	str	r3, [r4, #20]
   39674:	e7d12103 	ldrb	r2, [r1, r3, lsl #2]
   39678:	e352002a 	cmp	r2, #42	; 0x2a
   3967c:	0afffd18 	beq	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   39680:	e3530000 	cmp	r3, #0
   39684:	e2433001 	sub	r3, r3, #1
   39688:	1afffff8 	bne	39670 <TermAnsi::handleAnsiChar(unsigned char)+0x1028>
   3968c:	eafffd14 	b	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   39690:	00045b0c 	.word	0x00045b0c
   39694:	00045b10 	.word	0x00045b10
   39698:	0003fea8 	.word	0x0003fea8
   3969c:	000458c4 	.word	0x000458c4
   396a0:	0003fea0 	.word	0x0003fea0
   396a4:	0003f9a0 	.word	0x0003f9a0
   396a8:	00045b14 	.word	0x00045b14
   396ac:	0003ff50 	.word	0x0003ff50
   396b0:	0003ff54 	.word	0x0003ff54
   396b4:	00045b18 	.word	0x00045b18
   396b8:	00045b20 	.word	0x00045b20
   396bc:	00045b24 	.word	0x00045b24
   396c0:	00045b28 	.word	0x00045b28
   396c4:	00045b2c 	.word	0x00045b2c
   396c8:	00045b38 	.word	0x00045b38
   396cc:	00045b3c 	.word	0x00045b3c
   396d0:	0004330c 	.word	0x0004330c
   396d4:	000444b4 	.word	0x000444b4
   396d8:	00042f60 	.word	0x00042f60
   396dc:	00045b40 	.word	0x00045b40
   396e0:	00045b44 	.word	0x00045b44
   396e4:	00044d24 	.word	0x00044d24
   396e8:	00045b48 	.word	0x00045b48
   396ec:	000444bc 	.word	0x000444bc
   396f0:	00045b4c 	.word	0x00045b4c
   396f4:	00042bec 	.word	0x00042bec
   396f8:	00043fac 	.word	0x00043fac
   396fc:	00045b50 	.word	0x00045b50
   39700:	0003f968 	.word	0x0003f968
   39704:	0003d87c 	.word	0x0003d87c
   39708:	0003d924 	.word	0x0003d924
   3970c:	0003f788 	.word	0x0003f788
   39710:	00045b54 	.word	0x00045b54
   39714:	00045b58 	.word	0x00045b58
   39718:	00045054 	.word	0x00045054
   3971c:	00042c50 	.word	0x00042c50
   39720:	00045b5c 	.word	0x00045b5c
   39724:	0003de80 	.word	0x0003de80
   39728:	00043800 	.word	0x00043800
   3972c:	0003dd30 	.word	0x0003dd30
   39730:	0003e610 	.word	0x0003e610
   39734:	000423b4 	.word	0x000423b4
   39738:	0004262c 	.word	0x0004262c
   3973c:	00045b60 	.word	0x00045b60
   39740:	e5940030 	ldr	r0, [r4, #48]	; 0x30
   39744:	e5941034 	ldr	r1, [r4, #52]	; 0x34
   39748:	e3500000 	cmp	r0, #0
   3974c:	12400001 	subne	r0, r0, #1
   39750:	e3510000 	cmp	r1, #0
   39754:	12411001 	subne	r1, r1, #1
   39758:	eafffe6e 	b	39118 <TermAnsi::handleAnsiChar(unsigned char)+0xad0>
   3975c:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   39760:	e3530002 	cmp	r3, #2
   39764:	1afffbc5 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   39768:	e1a01006 	mov	r1, r6
   3976c:	e51f0060 	ldr	r0, [pc, #-96]	; 39714 <TermAnsi::handleAnsiChar(unsigned char)+0x10cc>
   39770:	ebffc2e3 	bl	2a304 <strchr>
   39774:	e3500000 	cmp	r0, #0
   39778:	0a00000e 	beq	397b8 <TermAnsi::handleAnsiChar(unsigned char)+0x1170>
   3977c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   39780:	e3530007 	cmp	r3, #7
   39784:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39788:	92831001 	addls	r1, r3, #1
   3978c:	9283300c 	addls	r3, r3, #12
   39790:	95841050 	strls	r1, [r4, #80]	; 0x50
   39794:	97842103 	strls	r2, [r4, r3, lsl #2]
   39798:	e3a02000 	mov	r2, #0
   3979c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   397a0:	e5842054 	str	r2, [r4, #84]	; 0x54
   397a4:	e1530002 	cmp	r3, r2
   397a8:	1afffccd 	bne	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   397ac:	e1a00004 	mov	r0, r4
   397b0:	ebfffb10 	bl	383f8 <TermAnsi::rep()>
   397b4:	eafffcca 	b	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   397b8:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   397bc:	e3530002 	cmp	r3, #2
   397c0:	1afffbae 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   397c4:	e1a01006 	mov	r1, r6
   397c8:	e51f00b8 	ldr	r0, [pc, #-184]	; 39718 <TermAnsi::handleAnsiChar(unsigned char)+0x10d0>
   397cc:	ebffc2cc 	bl	2a304 <strchr>
   397d0:	e3500000 	cmp	r0, #0
   397d4:	1afffbb8 	bne	386bc <TermAnsi::handleAnsiChar(unsigned char)+0x74>
   397d8:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   397dc:	e3530002 	cmp	r3, #2
   397e0:	1afffba6 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   397e4:	e1a01006 	mov	r1, r6
   397e8:	e51f00d4 	ldr	r0, [pc, #-212]	; 3971c <TermAnsi::handleAnsiChar(unsigned char)+0x10d4>
   397ec:	ebffc2c4 	bl	2a304 <strchr>
   397f0:	e3500000 	cmp	r0, #0
   397f4:	0a000010 	beq	3983c <TermAnsi::handleAnsiChar(unsigned char)+0x11f4>
   397f8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   397fc:	e3530007 	cmp	r3, #7
   39800:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39804:	92831001 	addls	r1, r3, #1
   39808:	9283300c 	addls	r3, r3, #12
   3980c:	95841050 	strls	r1, [r4, #80]	; 0x50
   39810:	97842103 	strls	r2, [r4, r3, lsl #2]
   39814:	e3a03000 	mov	r3, #0
   39818:	e5d42058 	ldrb	r2, [r4, #88]	; 0x58
   3981c:	e5843054 	str	r3, [r4, #84]	; 0x54
   39820:	e1520003 	cmp	r2, r3
   39824:	1a000002 	bne	39834 <TermAnsi::handleAnsiChar(unsigned char)+0x11ec>
   39828:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3982c:	e3530003 	cmp	r3, #3
   39830:	0a00005f 	beq	399b4 <TermAnsi::handleAnsiChar(unsigned char)+0x136c>
   39834:	e594000c 	ldr	r0, [r4, #12]
   39838:	eafffe5e 	b	391b8 <TermAnsi::handleAnsiChar(unsigned char)+0xb70>
   3983c:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   39840:	e3530002 	cmp	r3, #2
   39844:	1afffb8d 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   39848:	e1a01006 	mov	r1, r6
   3984c:	e51f0134 	ldr	r0, [pc, #-308]	; 39720 <TermAnsi::handleAnsiChar(unsigned char)+0x10d8>
   39850:	ebffc2ab 	bl	2a304 <strchr>
   39854:	e3500000 	cmp	r0, #0
   39858:	0a00000e 	beq	39898 <TermAnsi::handleAnsiChar(unsigned char)+0x1250>
   3985c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   39860:	e3530007 	cmp	r3, #7
   39864:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39868:	92831001 	addls	r1, r3, #1
   3986c:	9283300c 	addls	r3, r3, #12
   39870:	95841050 	strls	r1, [r4, #80]	; 0x50
   39874:	97842103 	strls	r2, [r4, r3, lsl #2]
   39878:	e3a02000 	mov	r2, #0
   3987c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   39880:	e5842054 	str	r2, [r4, #84]	; 0x54
   39884:	e1530002 	cmp	r3, r2
   39888:	1afffc95 	bne	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   3988c:	e1a00004 	mov	r0, r4
   39890:	ebfffaee 	bl	38450 <TermAnsi::sgr()>
   39894:	eafffc92 	b	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   39898:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3989c:	e3530002 	cmp	r3, #2
   398a0:	1afffb76 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   398a4:	e1a01006 	mov	r1, r6
   398a8:	e51f018c 	ldr	r0, [pc, #-396]	; 39724 <TermAnsi::handleAnsiChar(unsigned char)+0x10dc>
   398ac:	ebffc294 	bl	2a304 <strchr>
   398b0:	e3500000 	cmp	r0, #0
   398b4:	1afffb80 	bne	386bc <TermAnsi::handleAnsiChar(unsigned char)+0x74>
   398b8:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   398bc:	e3530002 	cmp	r3, #2
   398c0:	1afffb6e 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   398c4:	e1a01006 	mov	r1, r6
   398c8:	e51f01a8 	ldr	r0, [pc, #-424]	; 39728 <TermAnsi::handleAnsiChar(unsigned char)+0x10e0>
   398cc:	ebffc28c 	bl	2a304 <strchr>
   398d0:	e3500000 	cmp	r0, #0
   398d4:	1afffb78 	bne	386bc <TermAnsi::handleAnsiChar(unsigned char)+0x74>
   398d8:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   398dc:	e3530002 	cmp	r3, #2
   398e0:	1afffb66 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   398e4:	e1a01006 	mov	r1, r6
   398e8:	e51f01c4 	ldr	r0, [pc, #-452]	; 3972c <TermAnsi::handleAnsiChar(unsigned char)+0x10e4>
   398ec:	ebffc284 	bl	2a304 <strchr>
   398f0:	e3500000 	cmp	r0, #0
   398f4:	1afffb70 	bne	386bc <TermAnsi::handleAnsiChar(unsigned char)+0x74>
   398f8:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   398fc:	e3530002 	cmp	r3, #2
   39900:	1afffb5e 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   39904:	e1a01006 	mov	r1, r6
   39908:	e51f01e0 	ldr	r0, [pc, #-480]	; 39730 <TermAnsi::handleAnsiChar(unsigned char)+0x10e8>
   3990c:	ebffc27c 	bl	2a304 <strchr>
   39910:	e3500000 	cmp	r0, #0
   39914:	1afffb68 	bne	386bc <TermAnsi::handleAnsiChar(unsigned char)+0x74>
   39918:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3991c:	e3530002 	cmp	r3, #2
   39920:	1afffb56 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   39924:	e1a01006 	mov	r1, r6
   39928:	e51f01fc 	ldr	r0, [pc, #-508]	; 39734 <TermAnsi::handleAnsiChar(unsigned char)+0x10ec>
   3992c:	ebffc274 	bl	2a304 <strchr>
   39930:	e3500000 	cmp	r0, #0
   39934:	1afffc55 	bne	38a90 <TermAnsi::handleAnsiChar(unsigned char)+0x448>
   39938:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3993c:	e3530002 	cmp	r3, #2
   39940:	1afffb4e 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   39944:	e1a01006 	mov	r1, r6
   39948:	e51f0218 	ldr	r0, [pc, #-536]	; 39738 <TermAnsi::handleAnsiChar(unsigned char)+0x10f0>
   3994c:	ebffc26c 	bl	2a304 <strchr>
   39950:	e3500000 	cmp	r0, #0
   39954:	1afffc75 	bne	38b30 <TermAnsi::handleAnsiChar(unsigned char)+0x4e8>
   39958:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   3995c:	e3530002 	cmp	r3, #2
   39960:	1afffb46 	bne	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   39964:	e1a01006 	mov	r1, r6
   39968:	e51f0234 	ldr	r0, [pc, #-564]	; 3973c <TermAnsi::handleAnsiChar(unsigned char)+0x10f4>
   3996c:	ebffc264 	bl	2a304 <strchr>
   39970:	e3500000 	cmp	r0, #0
   39974:	0afffb41 	beq	38680 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   39978:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3997c:	e3530007 	cmp	r3, #7
   39980:	95942054 	ldrls	r2, [r4, #84]	; 0x54
   39984:	92831001 	addls	r1, r3, #1
   39988:	9283300c 	addls	r3, r3, #12
   3998c:	95841050 	strls	r1, [r4, #80]	; 0x50
   39990:	97842103 	strls	r2, [r4, r3, lsl #2]
   39994:	e3a02000 	mov	r2, #0
   39998:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3999c:	e5842054 	str	r2, [r4, #84]	; 0x54
   399a0:	e1530002 	cmp	r3, r2
   399a4:	1afffc4e 	bne	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   399a8:	e1a00004 	mov	r0, r4
   399ac:	ebfffa72 	bl	3837c <TermAnsi::ich()>
   399b0:	eafffc4b 	b	38ae4 <TermAnsi::handleAnsiChar(unsigned char)+0x49c>
   399b4:	e594000c 	ldr	r0, [r4, #12]
   399b8:	e3500000 	cmp	r0, #0
   399bc:	0afffdfd 	beq	391b8 <TermAnsi::handleAnsiChar(unsigned char)+0xb70>
   399c0:	e1a03004 	mov	r3, r4
   399c4:	e3a0c020 	mov	ip, #32
   399c8:	e3a0100f 	mov	r1, #15
   399cc:	e0840100 	add	r0, r4, r0, lsl #2
   399d0:	e5c3c05c 	strb	ip, [r3, #92]	; 0x5c
   399d4:	e5c3105d 	strb	r1, [r3, #93]	; 0x5d
   399d8:	e5c3205e 	strb	r2, [r3, #94]	; 0x5e
   399dc:	e5c3205f 	strb	r2, [r3, #95]	; 0x5f
   399e0:	e2833004 	add	r3, r3, #4
   399e4:	e1500003 	cmp	r0, r3
   399e8:	1afffff8 	bne	399d0 <TermAnsi::handleAnsiChar(unsigned char)+0x1388>
   399ec:	eaffff90 	b	39834 <TermAnsi::handleAnsiChar(unsigned char)+0x11ec>

000399f0 <TermAnsi::putChar(unsigned long)>:
   399f0:	e92d4070 	push	{r4, r5, r6, lr}
   399f4:	e1a04001 	mov	r4, r1
   399f8:	e6ef1071 	uxtb	r1, r1
   399fc:	e1a05000 	mov	r5, r0
   39a00:	ebfffb10 	bl	38648 <TermAnsi::handleAnsiChar(unsigned char)>
   39a04:	e3500000 	cmp	r0, #0
   39a08:	18bd8070 	popne	{r4, r5, r6, pc}
   39a0c:	e1a01004 	mov	r1, r4
   39a10:	e1a00005 	mov	r0, r5
   39a14:	ebfff988 	bl	3803c <TermAnsi::writeCharAtCurs(int)>
   39a18:	e3a03001 	mov	r3, #1
   39a1c:	e5c5301c 	strb	r3, [r5, #28]
   39a20:	e8bd8070 	pop	{r4, r5, r6, pc}

00039a24 <TermAnsi::dsr()>:
   39a24:	e12fff1e 	bx	lr

00039a28 <TermAnsi::init(unsigned long, unsigned long)>:
   39a28:	e92d4010 	push	{r4, lr}
   39a2c:	e1a04000 	mov	r4, r0
   39a30:	eb000042 	bl	39b40 <TermEmu::init(unsigned long, unsigned long)>
   39a34:	e5943000 	ldr	r3, [r4]
   39a38:	e1a00004 	mov	r0, r4
   39a3c:	e8bd4010 	pop	{r4, lr}
   39a40:	e5933010 	ldr	r3, [r3, #16]
   39a44:	e12fff13 	bx	r3

00039a48 <TermAnsi::reset()>:
   39a48:	e92d4010 	push	{r4, lr}
   39a4c:	e1a04000 	mov	r4, r0
   39a50:	eb000020 	bl	39ad8 <TermEmu::reset()>
   39a54:	e3a00000 	mov	r0, #0
   39a58:	e3a01001 	mov	r1, #1
   39a5c:	e2843e82 	add	r3, r4, #2080	; 0x820
   39a60:	e2842d22 	add	r2, r4, #2176	; 0x880
   39a64:	e283300b 	add	r3, r3, #11
   39a68:	e282200f 	add	r2, r2, #15
   39a6c:	e5c4001d 	strb	r0, [r4, #29]
   39a70:	e5840050 	str	r0, [r4, #80]	; 0x50
   39a74:	e5840054 	str	r0, [r4, #84]	; 0x54
   39a78:	e5c40058 	strb	r0, [r4, #88]	; 0x58
   39a7c:	e5e31001 	strb	r1, [r3, #1]!
   39a80:	e1530002 	cmp	r3, r2
   39a84:	1afffffc 	bne	39a7c <TermAnsi::reset()+0x34>
   39a88:	e3a03ef2 	mov	r3, #3872	; 0xf20
   39a8c:	e3a02020 	mov	r2, #32
   39a90:	e5843890 	str	r3, [r4, #2192]	; 0x890
   39a94:	e3a01000 	mov	r1, #0
   39a98:	e2840030 	add	r0, r4, #48	; 0x30
   39a9c:	ebffc0fc 	bl	29e94 <memset>
   39aa0:	e3a03000 	mov	r3, #0
   39aa4:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   39aa8:	e5843050 	str	r3, [r4, #80]	; 0x50
   39aac:	e5843054 	str	r3, [r4, #84]	; 0x54
   39ab0:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   39ab4:	e8bd8010 	pop	{r4, pc}

00039ab8 <TermEmu::sendData(int)>:
   39ab8:	e1a03001 	mov	r3, r1
   39abc:	e59f2008 	ldr	r2, [pc, #8]	; 39acc <TermEmu::sendData(int)+0x14>
   39ac0:	e3a01004 	mov	r1, #4
   39ac4:	e59f0004 	ldr	r0, [pc, #4]	; 39ad0 <TermEmu::sendData(int)+0x18>
   39ac8:	eaffd4b0 	b	2ed90 <LogWrite>
   39acc:	00045af4 	.word	0x00045af4
   39ad0:	00045b04 	.word	0x00045b04

00039ad4 <TermEmu::putChar(unsigned long)>:
   39ad4:	e12fff1e 	bx	lr

00039ad8 <TermEmu::reset()>:
   39ad8:	e12fff1e 	bx	lr

00039adc <TermEmu::~TermEmu()>:
   39adc:	e92d4010 	push	{r4, lr}
   39ae0:	e1a04000 	mov	r4, r0
   39ae4:	e5900004 	ldr	r0, [r0, #4]
   39ae8:	e59f3014 	ldr	r3, [pc, #20]	; 39b04 <TermEmu::~TermEmu()+0x28>
   39aec:	e3500000 	cmp	r0, #0
   39af0:	e5843000 	str	r3, [r4]
   39af4:	0a000000 	beq	39afc <TermEmu::~TermEmu()+0x20>
   39af8:	ebffc521 	bl	2af84 <operator delete[](void*)>
   39afc:	e1a00004 	mov	r0, r4
   39b00:	e8bd8010 	pop	{r4, pc}
   39b04:	00045b90 	.word	0x00045b90

00039b08 <TermEmu::~TermEmu()>:
   39b08:	e92d4010 	push	{r4, lr}
   39b0c:	e1a04000 	mov	r4, r0
   39b10:	e5900004 	ldr	r0, [r0, #4]
   39b14:	e59f3020 	ldr	r3, [pc, #32]	; 39b3c <TermEmu::~TermEmu()+0x34>
   39b18:	e3500000 	cmp	r0, #0
   39b1c:	e5843000 	str	r3, [r4]
   39b20:	0a000000 	beq	39b28 <TermEmu::~TermEmu()+0x20>
   39b24:	ebffc516 	bl	2af84 <operator delete[](void*)>
   39b28:	e1a00004 	mov	r0, r4
   39b2c:	e3a0102c 	mov	r1, #44	; 0x2c
   39b30:	ebffc514 	bl	2af88 <operator delete(void*, unsigned int)>
   39b34:	e1a00004 	mov	r0, r4
   39b38:	e8bd8010 	pop	{r4, pc}
   39b3c:	00045b90 	.word	0x00045b90

00039b40 <TermEmu::init(unsigned long, unsigned long)>:
   39b40:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39b44:	e1a04000 	mov	r4, r0
   39b48:	e5900004 	ldr	r0, [r0, #4]
   39b4c:	e1a08001 	mov	r8, r1
   39b50:	e3500000 	cmp	r0, #0
   39b54:	e1a07002 	mov	r7, r2
   39b58:	0a000000 	beq	39b60 <TermEmu::init(unsigned long, unsigned long)+0x20>
   39b5c:	ebffc508 	bl	2af84 <operator delete[](void*)>
   39b60:	e0090897 	mul	r9, r7, r8
   39b64:	e379022e 	cmn	r9, #-536870910	; 0xe0000002
   39b68:	83e00000 	mvnhi	r0, #0
   39b6c:	91a00109 	lslls	r0, r9, #2
   39b70:	ebffc4fc 	bl	2af68 <operator new[](unsigned int)>
   39b74:	e259c001 	subs	ip, r9, #1
   39b78:	4a00000b 	bmi	39bac <TermEmu::init(unsigned long, unsigned long)+0x6c>
   39b7c:	e1a03000 	mov	r3, r0
   39b80:	e3a06020 	mov	r6, #32
   39b84:	e3a0500f 	mov	r5, #15
   39b88:	e3a0e000 	mov	lr, #0
   39b8c:	e24cc001 	sub	ip, ip, #1
   39b90:	e37c0001 	cmn	ip, #1
   39b94:	e5c36000 	strb	r6, [r3]
   39b98:	e5c35001 	strb	r5, [r3, #1]
   39b9c:	e5c3e002 	strb	lr, [r3, #2]
   39ba0:	e5c3e003 	strb	lr, [r3, #3]
   39ba4:	e2833004 	add	r3, r3, #4
   39ba8:	1afffff7 	bne	39b8c <TermEmu::init(unsigned long, unsigned long)+0x4c>
   39bac:	e3a03000 	mov	r3, #0
   39bb0:	e3a0105f 	mov	r1, #95	; 0x5f
   39bb4:	e3a02020 	mov	r2, #32
   39bb8:	e9840201 	stmib	r4, {r0, r9}
   39bbc:	e584800c 	str	r8, [r4, #12]
   39bc0:	e5847010 	str	r7, [r4, #16]
   39bc4:	e5843014 	str	r3, [r4, #20]
   39bc8:	e5843018 	str	r3, [r4, #24]
   39bcc:	e1c431bc 	strh	r3, [r4, #28]
   39bd0:	e5c4301e 	strb	r3, [r4, #30]
   39bd4:	e5841020 	str	r1, [r4, #32]
   39bd8:	e5842024 	str	r2, [r4, #36]	; 0x24
   39bdc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00039be0 <TermEmu::TermEmu()>:
   39be0:	e3a02000 	mov	r2, #0
   39be4:	e92d4070 	push	{r4, r5, r6, lr}
   39be8:	e3a0c050 	mov	ip, #80	; 0x50
   39bec:	e3a0605f 	mov	r6, #95	; 0x5f
   39bf0:	e3a04020 	mov	r4, #32
   39bf4:	e3a0eef2 	mov	lr, #3872	; 0xf20
   39bf8:	e3a01019 	mov	r1, #25
   39bfc:	e59f5030 	ldr	r5, [pc, #48]	; 39c34 <TermEmu::TermEmu()+0x54>
   39c00:	e5806020 	str	r6, [r0, #32]
   39c04:	e5805000 	str	r5, [r0]
   39c08:	e5804024 	str	r4, [r0, #36]	; 0x24
   39c0c:	e580e028 	str	lr, [r0, #40]	; 0x28
   39c10:	e580c00c 	str	ip, [r0, #12]
   39c14:	e5801010 	str	r1, [r0, #16]
   39c18:	e5802004 	str	r2, [r0, #4]
   39c1c:	e5802008 	str	r2, [r0, #8]
   39c20:	e5802014 	str	r2, [r0, #20]
   39c24:	e5802018 	str	r2, [r0, #24]
   39c28:	e1c021bc 	strh	r2, [r0, #28]
   39c2c:	e5c0201e 	strb	r2, [r0, #30]
   39c30:	e8bd8070 	pop	{r4, r5, r6, pc}
   39c34:	00045b90 	.word	0x00045b90

00039c38 <McTRS80CmdFormat::McTRS80CmdFormat()>:
   39c38:	e12fff1e 	bx	lr

00039c3c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>:
   39c3c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39c40:	e24dd064 	sub	sp, sp, #100	; 0x64
   39c44:	e59d508c 	ldr	r5, [sp, #140]	; 0x8c
   39c48:	e59d7088 	ldr	r7, [sp, #136]	; 0x88
   39c4c:	e2458002 	sub	r8, r5, #2
   39c50:	e3580000 	cmp	r8, #0
   39c54:	e58d100c 	str	r1, [sp, #12]
   39c58:	e58d2010 	str	r2, [sp, #16]
   39c5c:	da000028 	ble	39d04 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xc8>
   39c60:	e1a09003 	mov	r9, r3
   39c64:	e3a0c000 	mov	ip, #0
   39c68:	e59fb268 	ldr	fp, [pc, #616]	; 39ed8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x29c>
   39c6c:	e59fa268 	ldr	sl, [pc, #616]	; 39edc <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a0>
   39c70:	e2455001 	sub	r5, r5, #1
   39c74:	e1a01007 	mov	r1, r7
   39c78:	e7f1300c 	ldrb	r3, [r1, ip]!
   39c7c:	e28c6002 	add	r6, ip, #2
   39c80:	e5d14001 	ldrb	r4, [r1, #1]
   39c84:	e2432001 	sub	r2, r3, #1
   39c88:	e1540005 	cmp	r4, r5
   39c8c:	a1a04005 	movge	r4, r5
   39c90:	e3540000 	cmp	r4, #0
   39c94:	0a00001c 	beq	39d0c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xd0>
   39c98:	e3520004 	cmp	r2, #4
   39c9c:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   39ca0:	ea000087 	b	39ec4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x288>
   39ca4:	00039dc4 	.word	0x00039dc4
   39ca8:	00039d44 	.word	0x00039d44
   39cac:	00039cf4 	.word	0x00039cf4
   39cb0:	00039ce0 	.word	0x00039ce0
   39cb4:	00039cbc 	.word	0x00039cbc
   39cb8:	e3a04c01 	mov	r4, #256	; 0x100
   39cbc:	e1a0200b 	mov	r2, fp
   39cc0:	e3a01004 	mov	r1, #4
   39cc4:	e59f0214 	ldr	r0, [pc, #532]	; 39ee0 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   39cc8:	ebffd430 	bl	2ed90 <LogWrite>
   39ccc:	e086c004 	add	ip, r6, r4
   39cd0:	e158000c 	cmp	r8, ip
   39cd4:	caffffe6 	bgt	39c74 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x38>
   39cd8:	ea000009 	b	39d04 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xc8>
   39cdc:	e3a04c01 	mov	r4, #256	; 0x100
   39ce0:	e1a0200a 	mov	r2, sl
   39ce4:	e3a01004 	mov	r1, #4
   39ce8:	e59f01f0 	ldr	r0, [pc, #496]	; 39ee0 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   39cec:	ebffd427 	bl	2ed90 <LogWrite>
   39cf0:	eafffff5 	b	39ccc <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   39cf4:	e3a01004 	mov	r1, #4
   39cf8:	e59f21e4 	ldr	r2, [pc, #484]	; 39ee4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a8>
   39cfc:	e59f01dc 	ldr	r0, [pc, #476]	; 39ee0 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   39d00:	ebffd422 	bl	2ed90 <LogWrite>
   39d04:	e28dd064 	add	sp, sp, #100	; 0x64
   39d08:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39d0c:	e3520004 	cmp	r2, #4
   39d10:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   39d14:	ea000069 	b	39ec0 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x284>
   39d18:	00039e18 	.word	0x00039e18
   39d1c:	00039d2c 	.word	0x00039d2c
   39d20:	00039cf4 	.word	0x00039cf4
   39d24:	00039cdc 	.word	0x00039cdc
   39d28:	00039cb8 	.word	0x00039cb8
   39d2c:	e3a04c01 	mov	r4, #256	; 0x100
   39d30:	e3a01004 	mov	r1, #4
   39d34:	e59f21ac 	ldr	r2, [pc, #428]	; 39ee8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2ac>
   39d38:	e59f01a0 	ldr	r0, [pc, #416]	; 39ee0 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   39d3c:	ebffd413 	bl	2ed90 <LogWrite>
   39d40:	eaffffe1 	b	39ccc <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   39d44:	e3540001 	cmp	r4, #1
   39d48:	1a000039 	bne	39e34 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1f8>
   39d4c:	e3a03000 	mov	r3, #0
   39d50:	e7d72006 	ldrb	r2, [r7, r6]
   39d54:	e1a01009 	mov	r1, r9
   39d58:	e28d0018 	add	r0, sp, #24
   39d5c:	e58d3034 	str	r3, [sp, #52]	; 0x34
   39d60:	e58d3030 	str	r3, [sp, #48]	; 0x30
   39d64:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   39d68:	e58d3028 	str	r3, [sp, #40]	; 0x28
   39d6c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   39d70:	e58d3020 	str	r3, [sp, #32]
   39d74:	e58d301c 	str	r3, [sp, #28]
   39d78:	e58d3048 	str	r3, [sp, #72]	; 0x48
   39d7c:	e58d3044 	str	r3, [sp, #68]	; 0x44
   39d80:	e58d3040 	str	r3, [sp, #64]	; 0x40
   39d84:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   39d88:	e58d3038 	str	r3, [sp, #56]	; 0x38
   39d8c:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   39d90:	e58d3058 	str	r3, [sp, #88]	; 0x58
   39d94:	e58d3054 	str	r3, [sp, #84]	; 0x54
   39d98:	e58d3050 	str	r3, [sp, #80]	; 0x50
   39d9c:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   39da0:	e59d3010 	ldr	r3, [sp, #16]
   39da4:	e58d2018 	str	r2, [sp, #24]
   39da8:	e12fff33 	blx	r3
   39dac:	e3a01004 	mov	r1, #4
   39db0:	e59d3018 	ldr	r3, [sp, #24]
   39db4:	e59f2130 	ldr	r2, [pc, #304]	; 39eec <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2b0>
   39db8:	e59f0120 	ldr	r0, [pc, #288]	; 39ee0 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   39dbc:	ebffd3f3 	bl	2ed90 <LogWrite>
   39dc0:	eaffffc1 	b	39ccc <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   39dc4:	e3540002 	cmp	r4, #2
   39dc8:	d28440fe 	addle	r4, r4, #254	; 0xfe
   39dcc:	c2444002 	subgt	r4, r4, #2
   39dd0:	e1a02004 	mov	r2, r4
   39dd4:	e7d70006 	ldrb	r0, [r7, r6]
   39dd8:	e5d13003 	ldrb	r3, [r1, #3]
   39ddc:	e28c6004 	add	r6, ip, #4
   39de0:	e0800403 	add	r0, r0, r3, lsl #8
   39de4:	e1a03009 	mov	r3, r9
   39de8:	e0871006 	add	r1, r7, r6
   39dec:	e59dc00c 	ldr	ip, [sp, #12]
   39df0:	e58d0014 	str	r0, [sp, #20]
   39df4:	e12fff3c 	blx	ip
   39df8:	e59d0014 	ldr	r0, [sp, #20]
   39dfc:	e3a01004 	mov	r1, #4
   39e00:	e1a03000 	mov	r3, r0
   39e04:	e59f20e4 	ldr	r2, [pc, #228]	; 39ef0 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2b4>
   39e08:	e59f00d0 	ldr	r0, [pc, #208]	; 39ee0 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   39e0c:	e58d4000 	str	r4, [sp]
   39e10:	ebffd3de 	bl	2ed90 <LogWrite>
   39e14:	eaffffac 	b	39ccc <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   39e18:	e3a020fe 	mov	r2, #254	; 0xfe
   39e1c:	e7d70006 	ldrb	r0, [r7, r6]
   39e20:	e5d13003 	ldrb	r3, [r1, #3]
   39e24:	e1a04002 	mov	r4, r2
   39e28:	e28c6004 	add	r6, ip, #4
   39e2c:	e0800403 	add	r0, r0, r3, lsl #8
   39e30:	eaffffeb 	b	39de4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1a8>
   39e34:	e3540002 	cmp	r4, #2
   39e38:	1affffbc 	bne	39d30 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xf4>
   39e3c:	e3a03000 	mov	r3, #0
   39e40:	e5d10003 	ldrb	r0, [r1, #3]
   39e44:	e7d72006 	ldrb	r2, [r7, r6]
   39e48:	e1a01009 	mov	r1, r9
   39e4c:	e0822400 	add	r2, r2, r0, lsl #8
   39e50:	e58d3034 	str	r3, [sp, #52]	; 0x34
   39e54:	e28d0018 	add	r0, sp, #24
   39e58:	e58d3030 	str	r3, [sp, #48]	; 0x30
   39e5c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   39e60:	e58d3028 	str	r3, [sp, #40]	; 0x28
   39e64:	e58d3024 	str	r3, [sp, #36]	; 0x24
   39e68:	e58d3020 	str	r3, [sp, #32]
   39e6c:	e58d301c 	str	r3, [sp, #28]
   39e70:	e58d3048 	str	r3, [sp, #72]	; 0x48
   39e74:	e58d3044 	str	r3, [sp, #68]	; 0x44
   39e78:	e58d3040 	str	r3, [sp, #64]	; 0x40
   39e7c:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   39e80:	e58d3038 	str	r3, [sp, #56]	; 0x38
   39e84:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   39e88:	e58d3058 	str	r3, [sp, #88]	; 0x58
   39e8c:	e58d3054 	str	r3, [sp, #84]	; 0x54
   39e90:	e58d3050 	str	r3, [sp, #80]	; 0x50
   39e94:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   39e98:	e59d3010 	ldr	r3, [sp, #16]
   39e9c:	e58d2018 	str	r2, [sp, #24]
   39ea0:	e28c6004 	add	r6, ip, #4
   39ea4:	e12fff33 	blx	r3
   39ea8:	e3a01004 	mov	r1, #4
   39eac:	e59d3018 	ldr	r3, [sp, #24]
   39eb0:	e59f203c 	ldr	r2, [pc, #60]	; 39ef4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2b8>
   39eb4:	e59f0024 	ldr	r0, [pc, #36]	; 39ee0 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   39eb8:	ebffd3b4 	bl	2ed90 <LogWrite>
   39ebc:	eaffff82 	b	39ccc <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   39ec0:	e3a04c01 	mov	r4, #256	; 0x100
   39ec4:	e3a01004 	mov	r1, #4
   39ec8:	e59f2028 	ldr	r2, [pc, #40]	; 39ef8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2bc>
   39ecc:	e59f000c 	ldr	r0, [pc, #12]	; 39ee0 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a4>
   39ed0:	ebffd3ae 	bl	2ed90 <LogWrite>
   39ed4:	eaffff7c 	b	39ccc <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x90>
   39ed8:	00045c34 	.word	0x00045c34
   39edc:	00045c1c 	.word	0x00045c1c
   39ee0:	00045bcc 	.word	0x00045bcc
   39ee4:	00045c0c 	.word	0x00045c0c
   39ee8:	00045bf8 	.word	0x00045bf8
   39eec:	00045bd8 	.word	0x00045bd8
   39ef0:	00045bac 	.word	0x00045bac
   39ef4:	00045be8 	.word	0x00045be8
   39ef8:	00045c3c 	.word	0x00045c3c

00039efc <Display::~Display()>:
   39efc:	e92d4010 	push	{r4, lr}
   39f00:	e1a04000 	mov	r4, r0
   39f04:	e59f301c 	ldr	r3, [pc, #28]	; 39f28 <Display::~Display()+0x2c>
   39f08:	e4803004 	str	r3, [r0], #4
   39f0c:	eb000226 	bl	3a7ac <DisplayFX::~DisplayFX()>
   39f10:	e59f3014 	ldr	r3, [pc, #20]	; 39f2c <Display::~Display()+0x30>
   39f14:	e1a00004 	mov	r0, r4
   39f18:	e5843000 	str	r3, [r4]
   39f1c:	ebffabdd 	bl	24e98 <CDevice::~CDevice()>
   39f20:	e1a00004 	mov	r0, r4
   39f24:	e8bd8010 	pop	{r4, pc}
   39f28:	00045ca4 	.word	0x00045ca4
   39f2c:	00045c64 	.word	0x00045c64

00039f30 <Display::~Display()>:
   39f30:	e92d4010 	push	{r4, lr}
   39f34:	e1a04000 	mov	r4, r0
   39f38:	e59f3028 	ldr	r3, [pc, #40]	; 39f68 <Display::~Display()+0x38>
   39f3c:	e4803004 	str	r3, [r0], #4
   39f40:	eb000219 	bl	3a7ac <DisplayFX::~DisplayFX()>
   39f44:	e59f3020 	ldr	r3, [pc, #32]	; 39f6c <Display::~Display()+0x3c>
   39f48:	e1a00004 	mov	r0, r4
   39f4c:	e5843000 	str	r3, [r4]
   39f50:	ebffabd0 	bl	24e98 <CDevice::~CDevice()>
   39f54:	e1a00004 	mov	r0, r4
   39f58:	e59f1010 	ldr	r1, [pc, #16]	; 39f70 <Display::~Display()+0x40>
   39f5c:	ebffc409 	bl	2af88 <operator delete(void*, unsigned int)>
   39f60:	e1a00004 	mov	r0, r4
   39f64:	e8bd8010 	pop	{r4, pc}
   39f68:	00045ca4 	.word	0x00045ca4
   39f6c:	00045c64 	.word	0x00045c64
   39f70:	00001030 	.word	0x00001030

00039f74 <Display::foreground(DISPLAY_FX_COLOUR)>:
   39f74:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   39f78:	e3530000 	cmp	r3, #0
   39f7c:	012fff1e 	bxeq	lr
   39f80:	e1a02001 	mov	r2, r1
   39f84:	e2800004 	add	r0, r0, #4
   39f88:	e3a01000 	mov	r1, #0
   39f8c:	ea0002ef 	b	3ab50 <DisplayFX::windowForeground(unsigned long, DISPLAY_FX_COLOUR)>

00039f90 <Display::background(DISPLAY_FX_COLOUR)>:
   39f90:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   39f94:	e3530000 	cmp	r3, #0
   39f98:	012fff1e 	bxeq	lr
   39f9c:	e1a02001 	mov	r2, r1
   39fa0:	e2800004 	add	r0, r0, #4
   39fa4:	e3a01000 	mov	r1, #0
   39fa8:	ea0002ee 	b	3ab68 <DisplayFX::windowBackground(unsigned long, DISPLAY_FX_COLOUR)>

00039fac <Display::write(unsigned long, unsigned long, unsigned char const*)>:
   39fac:	e5d0cbe0 	ldrb	ip, [r0, #3040]	; 0xbe0
   39fb0:	e35c0000 	cmp	ip, #0
   39fb4:	012fff1e 	bxeq	lr
   39fb8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   39fbc:	e24dd00c 	sub	sp, sp, #12
   39fc0:	e58d3000 	str	r3, [sp]
   39fc4:	e2800004 	add	r0, r0, #4
   39fc8:	e1a03002 	mov	r3, r2
   39fcc:	e1a02001 	mov	r2, r1
   39fd0:	e3a01000 	mov	r1, #0
   39fd4:	eb0002ba 	bl	3aac4 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)>
   39fd8:	e28dd00c 	add	sp, sp, #12
   39fdc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00039fe0 <Display::write(unsigned long, unsigned long, unsigned long)>:
   39fe0:	e5d0cbe0 	ldrb	ip, [r0, #3040]	; 0xbe0
   39fe4:	e35c0000 	cmp	ip, #0
   39fe8:	012fff1e 	bxeq	lr
   39fec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   39ff0:	e24dd00c 	sub	sp, sp, #12
   39ff4:	e58d3000 	str	r3, [sp]
   39ff8:	e2800004 	add	r0, r0, #4
   39ffc:	e1a03002 	mov	r3, r2
   3a000:	e1a02001 	mov	r2, r1
   3a004:	e3a01000 	mov	r1, #0
   3a008:	eb00022f 	bl	3a8cc <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)>
   3a00c:	e28dd00c 	add	sp, sp, #12
   3a010:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003a014 <Display::setPixel(unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)>:
   3a014:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3a018:	e5d0cbe0 	ldrb	ip, [r0, #3040]	; 0xbe0
   3a01c:	e24dd00c 	sub	sp, sp, #12
   3a020:	e35c0000 	cmp	ip, #0
   3a024:	e1ddc1d0 	ldrsb	ip, [sp, #16]
   3a028:	0a000005 	beq	3a044 <Display::setPixel(unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)+0x30>
   3a02c:	e88d1008 	stm	sp, {r3, ip}
   3a030:	e2800004 	add	r0, r0, #4
   3a034:	e1a03002 	mov	r3, r2
   3a038:	e1a02001 	mov	r2, r1
   3a03c:	e3a01000 	mov	r1, #0
   3a040:	eb0002ce 	bl	3ab80 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)>
   3a044:	e28dd00c 	add	sp, sp, #12
   3a048:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003a04c <Display::getFrameBufferInfo(FrameBufferInfo&)>:
   3a04c:	e1a02001 	mov	r2, r1
   3a050:	e2800004 	add	r0, r0, #4
   3a054:	e3a01000 	mov	r1, #0
   3a058:	ea00031a 	b	3acc8 <DisplayFX::getFramebuffer(unsigned long, FrameBufferInfo&)>

0003a05c <Display::Write(void const*, unsigned int)>:
   3a05c:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3a060:	e92d4010 	push	{r4, lr}
   3a064:	e3530000 	cmp	r3, #0
   3a068:	e1a04002 	mov	r4, r2
   3a06c:	0a000001 	beq	3a078 <Display::Write(void const*, unsigned int)+0x1c>
   3a070:	e2800004 	add	r0, r0, #4
   3a074:	eb000420 	bl	3b0fc <DisplayFX::consolePut(char const*, unsigned int)>
   3a078:	e1a00004 	mov	r0, r4
   3a07c:	e8bd8010 	pop	{r4, pc}

0003a080 <Display::targetLayout(int, int, int, int, int, int, WgfxFont*, int, int)>:
   3a080:	e5d0cbe0 	ldrb	ip, [r0, #3040]	; 0xbe0
   3a084:	e35c0000 	cmp	ip, #0
   3a088:	012fff1e 	bxeq	lr
   3a08c:	e92d4070 	push	{r4, r5, r6, lr}
   3a090:	e1a04002 	mov	r4, r2
   3a094:	e1a05003 	mov	r5, r3
   3a098:	e3a02000 	mov	r2, #0
   3a09c:	e3a03fe1 	mov	r3, #900	; 0x384
   3a0a0:	e24dd038 	sub	sp, sp, #56	; 0x38
   3a0a4:	e1a06001 	mov	r6, r1
   3a0a8:	e2800004 	add	r0, r0, #4
   3a0ac:	e1a01002 	mov	r1, r2
   3a0b0:	e58d3000 	str	r3, [sp]
   3a0b4:	e3a03e41 	mov	r3, #1040	; 0x410
   3a0b8:	e58d0034 	str	r0, [sp, #52]	; 0x34
   3a0bc:	eb0001ea 	bl	3a86c <DisplayFX::screenRectClear(unsigned long, unsigned long, unsigned long, unsigned long)>
   3a0c0:	e3a03000 	mov	r3, #0
   3a0c4:	e3a02008 	mov	r2, #8
   3a0c8:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
   3a0cc:	e58d2028 	str	r2, [sp, #40]	; 0x28
   3a0d0:	e58d1020 	str	r1, [sp, #32]
   3a0d4:	e59d1058 	ldr	r1, [sp, #88]	; 0x58
   3a0d8:	e58d2024 	str	r2, [sp, #36]	; 0x24
   3a0dc:	e58d101c 	str	r1, [sp, #28]
   3a0e0:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   3a0e4:	e1a02003 	mov	r2, r3
   3a0e8:	e58d1018 	str	r1, [sp, #24]
   3a0ec:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
   3a0f0:	e1cd40f4 	strd	r4, [sp, #4]
   3a0f4:	e58d1014 	str	r1, [sp, #20]
   3a0f8:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   3a0fc:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
   3a100:	e58d1010 	str	r1, [sp, #16]
   3a104:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
   3a108:	e58d6000 	str	r6, [sp]
   3a10c:	e58d100c 	str	r1, [sp, #12]
   3a110:	e1a01003 	mov	r1, r3
   3a114:	eb00064b 	bl	3ba48 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3a118:	e28dd038 	add	sp, sp, #56	; 0x38
   3a11c:	e8bd8070 	pop	{r4, r5, r6, pc}

0003a120 <Display::Display()>:
   3a120:	e92d4010 	push	{r4, lr}
   3a124:	e1a04000 	mov	r4, r0
   3a128:	ebffab68 	bl	24ed0 <CDevice::CDevice()>
   3a12c:	e1a00004 	mov	r0, r4
   3a130:	e59f3014 	ldr	r3, [pc, #20]	; 3a14c <Display::Display()+0x2c>
   3a134:	e4803004 	str	r3, [r0], #4
   3a138:	eb00016d 	bl	3a6f4 <DisplayFX::DisplayFX()>
   3a13c:	e3a03000 	mov	r3, #0
   3a140:	e1a00004 	mov	r0, r4
   3a144:	e5c43be0 	strb	r3, [r4, #3040]	; 0xbe0
   3a148:	e8bd8010 	pop	{r4, pc}
   3a14c:	00045ca4 	.word	0x00045ca4

0003a150 <Display::init()>:
   3a150:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3a154:	e2809004 	add	r9, r0, #4
   3a158:	e24dd034 	sub	sp, sp, #52	; 0x34
   3a15c:	e1a07000 	mov	r7, r0
   3a160:	e3a02fe1 	mov	r2, #900	; 0x384
   3a164:	e3a01d19 	mov	r1, #1600	; 0x640
   3a168:	e1a00009 	mov	r0, r9
   3a16c:	eb000638 	bl	3ba54 <DisplayFX::init(unsigned long, unsigned long)>
   3a170:	e3e05000 	mvn	r5, #0
   3a174:	e3a04000 	mov	r4, #0
   3a178:	e3a06001 	mov	r6, #1
   3a17c:	e3a08008 	mov	r8, #8
   3a180:	e3a0cb01 	mov	ip, #1024	; 0x400
   3a184:	e3a0efdd 	mov	lr, #884	; 0x374
   3a188:	e1a00009 	mov	r0, r9
   3a18c:	e88d5000 	stm	sp, {ip, lr}
   3a190:	e1a03004 	mov	r3, r4
   3a194:	e1a02004 	mov	r2, r4
   3a198:	e1a01004 	mov	r1, r4
   3a19c:	e1cd41f8 	strd	r4, [sp, #24]
   3a1a0:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3a1a4:	e58d8024 	str	r8, [sp, #36]	; 0x24
   3a1a8:	e58d800c 	str	r8, [sp, #12]
   3a1ac:	e58d8008 	str	r8, [sp, #8]
   3a1b0:	e58d5020 	str	r5, [sp, #32]
   3a1b4:	e58d6014 	str	r6, [sp, #20]
   3a1b8:	e58d6010 	str	r6, [sp, #16]
   3a1bc:	eb000621 	bl	3ba48 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3a1c0:	e1a00009 	mov	r0, r9
   3a1c4:	e1a03004 	mov	r3, r4
   3a1c8:	e1a01006 	mov	r1, r6
   3a1cc:	e59f20a8 	ldr	r2, [pc, #168]	; 3a27c <Display::init()+0x12c>
   3a1d0:	e1cd41f8 	strd	r4, [sp, #24]
   3a1d4:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3a1d8:	e58d4024 	str	r4, [sp, #36]	; 0x24
   3a1dc:	e58d5020 	str	r5, [sp, #32]
   3a1e0:	e58d6014 	str	r6, [sp, #20]
   3a1e4:	e58d6010 	str	r6, [sp, #16]
   3a1e8:	e58d500c 	str	r5, [sp, #12]
   3a1ec:	e58d5008 	str	r5, [sp, #8]
   3a1f0:	e58d5004 	str	r5, [sp, #4]
   3a1f4:	e58d5000 	str	r5, [sp]
   3a1f8:	eb000612 	bl	3ba48 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3a1fc:	e59f307c 	ldr	r3, [pc, #124]	; 3a280 <Display::init()+0x130>
   3a200:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3a204:	e5933004 	ldr	r3, [r3, #4]
   3a208:	e59f206c 	ldr	r2, [pc, #108]	; 3a27c <Display::init()+0x12c>
   3a20c:	e1a03183 	lsl	r3, r3, #3
   3a210:	e1a00009 	mov	r0, r9
   3a214:	e3a01002 	mov	r1, #2
   3a218:	e1cd41f8 	strd	r4, [sp, #24]
   3a21c:	e58d4024 	str	r4, [sp, #36]	; 0x24
   3a220:	e58d5020 	str	r5, [sp, #32]
   3a224:	e58d6014 	str	r6, [sp, #20]
   3a228:	e58d6010 	str	r6, [sp, #16]
   3a22c:	e58d500c 	str	r5, [sp, #12]
   3a230:	e58d5008 	str	r5, [sp, #8]
   3a234:	e58d5004 	str	r5, [sp, #4]
   3a238:	e58d5000 	str	r5, [sp]
   3a23c:	eb000601 	bl	3ba48 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3a240:	e1a00009 	mov	r0, r9
   3a244:	e3a01002 	mov	r1, #2
   3a248:	eb00030f 	bl	3ae8c <DisplayFX::consoleSetWindow(unsigned long)>
   3a24c:	e1a03004 	mov	r3, r4
   3a250:	e1a0c007 	mov	ip, r7
   3a254:	e2872d11 	add	r2, r7, #1088	; 0x440
   3a258:	e282200c 	add	r2, r2, #12
   3a25c:	e5cc3be1 	strb	r3, [ip, #3041]	; 0xbe1
   3a260:	e28cc064 	add	ip, ip, #100	; 0x64
   3a264:	e15c0002 	cmp	ip, r2
   3a268:	1afffffb 	bne	3a25c <Display::init()+0x10c>
   3a26c:	e3a00001 	mov	r0, #1
   3a270:	e5c70be0 	strb	r0, [r7, #3040]	; 0xbe0
   3a274:	e28dd034 	add	sp, sp, #52	; 0x34
   3a278:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3a27c:	0000041a 	.word	0x0000041a
   3a280:	00049b70 	.word	0x00049b70

0003a284 <Display::statusPut(int, int, char const*)>:
   3a284:	e351000a 	cmp	r1, #10
   3a288:	c12fff1e 	bxgt	lr
   3a28c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3a290:	e0814101 	add	r4, r1, r1, lsl #2
   3a294:	e0844104 	add	r4, r4, r4, lsl #2
   3a298:	e0804104 	add	r4, r0, r4, lsl #2
   3a29c:	e2844ebe 	add	r4, r4, #3040	; 0xbe0
   3a2a0:	e2844001 	add	r4, r4, #1
   3a2a4:	e1a05001 	mov	r5, r1
   3a2a8:	e1a06000 	mov	r6, r0
   3a2ac:	e1a01003 	mov	r1, r3
   3a2b0:	e1a00004 	mov	r0, r4
   3a2b4:	e24dd010 	sub	sp, sp, #16
   3a2b8:	e1a07002 	mov	r7, r2
   3a2bc:	e1a08003 	mov	r8, r3
   3a2c0:	ebffbf4b 	bl	29ff4 <strcmp>
   3a2c4:	e3500000 	cmp	r0, #0
   3a2c8:	0a00000c 	beq	3a300 <Display::statusPut(int, int, char const*)+0x7c>
   3a2cc:	e3a02063 	mov	r2, #99	; 0x63
   3a2d0:	e1a00004 	mov	r0, r4
   3a2d4:	e1a01008 	mov	r1, r8
   3a2d8:	ebffbfea 	bl	2a288 <strncpy>
   3a2dc:	e3570001 	cmp	r7, #1
   3a2e0:	03a02009 	moveq	r2, #9
   3a2e4:	0a000002 	beq	3a2f4 <Display::statusPut(int, int, char const*)+0x70>
   3a2e8:	e3570000 	cmp	r7, #0
   3a2ec:	03a0200b 	moveq	r2, #11
   3a2f0:	13a0200a 	movne	r2, #10
   3a2f4:	e5d63be0 	ldrb	r3, [r6, #3040]	; 0xbe0
   3a2f8:	e3530000 	cmp	r3, #0
   3a2fc:	1a000001 	bne	3a308 <Display::statusPut(int, int, char const*)+0x84>
   3a300:	e28dd010 	add	sp, sp, #16
   3a304:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3a308:	e59f1068 	ldr	r1, [pc, #104]	; 3a378 <Display::statusPut(int, int, char const*)+0xf4>
   3a30c:	e2860004 	add	r0, r6, #4
   3a310:	e0815185 	add	r5, r1, r5, lsl #3
   3a314:	e5953044 	ldr	r3, [r5, #68]	; 0x44
   3a318:	e3a01001 	mov	r1, #1
   3a31c:	e5954040 	ldr	r4, [r5, #64]	; 0x40
   3a320:	e58d000c 	str	r0, [sp, #12]
   3a324:	e58d3008 	str	r3, [sp, #8]
   3a328:	eb000208 	bl	3ab50 <DisplayFX::windowForeground(unsigned long, DISPLAY_FX_COLOUR)>
   3a32c:	e5d62be0 	ldrb	r2, [r6, #3040]	; 0xbe0
   3a330:	e3520000 	cmp	r2, #0
   3a334:	0afffff1 	beq	3a300 <Display::statusPut(int, int, char const*)+0x7c>
   3a338:	e59d000c 	ldr	r0, [sp, #12]
   3a33c:	e59d3008 	ldr	r3, [sp, #8]
   3a340:	e1a02004 	mov	r2, r4
   3a344:	e3a01001 	mov	r1, #1
   3a348:	e58d8000 	str	r8, [sp]
   3a34c:	e58d0008 	str	r0, [sp, #8]
   3a350:	eb0001db 	bl	3aac4 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)>
   3a354:	e5d63be0 	ldrb	r3, [r6, #3040]	; 0xbe0
   3a358:	e3530000 	cmp	r3, #0
   3a35c:	0affffe7 	beq	3a300 <Display::statusPut(int, int, char const*)+0x7c>
   3a360:	e3a0200f 	mov	r2, #15
   3a364:	e3a01001 	mov	r1, #1
   3a368:	e59d0008 	ldr	r0, [sp, #8]
   3a36c:	e28dd010 	add	sp, sp, #16
   3a370:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3a374:	ea0001f5 	b	3ab50 <DisplayFX::windowForeground(unsigned long, DISPLAY_FX_COLOUR)>
   3a378:	00045c9c 	.word	0x00045c9c

0003a37c <Display::windowForeground(unsigned long, DISPLAY_FX_COLOUR)>:
   3a37c:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3a380:	e3530000 	cmp	r3, #0
   3a384:	012fff1e 	bxeq	lr
   3a388:	e2800004 	add	r0, r0, #4
   3a38c:	ea0001ef 	b	3ab50 <DisplayFX::windowForeground(unsigned long, DISPLAY_FX_COLOUR)>

0003a390 <Display::windowBackground(unsigned long, DISPLAY_FX_COLOUR)>:
   3a390:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3a394:	e3530000 	cmp	r3, #0
   3a398:	012fff1e 	bxeq	lr
   3a39c:	e2800004 	add	r0, r0, #4
   3a3a0:	ea0001f0 	b	3ab68 <DisplayFX::windowBackground(unsigned long, DISPLAY_FX_COLOUR)>

0003a3a4 <Display::windowWrite(unsigned long, unsigned long, unsigned long, unsigned char const*)>:
   3a3a4:	e5d0cbe0 	ldrb	ip, [r0, #3040]	; 0xbe0
   3a3a8:	e35c0000 	cmp	ip, #0
   3a3ac:	012fff1e 	bxeq	lr
   3a3b0:	e2800004 	add	r0, r0, #4
   3a3b4:	ea0001c2 	b	3aac4 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)>

0003a3b8 <Display::windowWrite(unsigned long, unsigned long, unsigned long, unsigned long)>:
   3a3b8:	e5d0cbe0 	ldrb	ip, [r0, #3040]	; 0xbe0
   3a3bc:	e35c0000 	cmp	ip, #0
   3a3c0:	012fff1e 	bxeq	lr
   3a3c4:	e2800004 	add	r0, r0, #4
   3a3c8:	ea00013f 	b	3a8cc <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)>

0003a3cc <Display::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)>:
   3a3cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3a3d0:	e5d0cbe0 	ldrb	ip, [r0, #3040]	; 0xbe0
   3a3d4:	e1dde0d8 	ldrsb	lr, [sp, #8]
   3a3d8:	e35c0000 	cmp	ip, #0
   3a3dc:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   3a3e0:	e58de008 	str	lr, [sp, #8]
   3a3e4:	e2800004 	add	r0, r0, #4
   3a3e8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3a3ec:	ea0001e3 	b	3ab80 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)>

0003a3f0 <Display::consolePut(char const*)>:
   3a3f0:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3a3f4:	e3530000 	cmp	r3, #0
   3a3f8:	012fff1e 	bxeq	lr
   3a3fc:	e2800004 	add	r0, r0, #4
   3a400:	ea000331 	b	3b0cc <DisplayFX::consolePut(char const*)>

0003a404 <Display::consolePut(unsigned long)>:
   3a404:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3a408:	e3530000 	cmp	r3, #0
   3a40c:	012fff1e 	bxeq	lr
   3a410:	e2800004 	add	r0, r0, #4
   3a414:	ea0002ce 	b	3af54 <DisplayFX::consolePut(int)>

0003a418 <Display::consolePut(char const*, unsigned int)>:
   3a418:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3a41c:	e3530000 	cmp	r3, #0
   3a420:	012fff1e 	bxeq	lr
   3a424:	e2800004 	add	r0, r0, #4
   3a428:	ea000333 	b	3b0fc <DisplayFX::consolePut(char const*, unsigned int)>

0003a42c <Display::consoleForeground(DISPLAY_FX_COLOUR)>:
   3a42c:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3a430:	e3530000 	cmp	r3, #0
   3a434:	012fff1e 	bxeq	lr
   3a438:	e2800004 	add	r0, r0, #4
   3a43c:	ea00027f 	b	3ae40 <DisplayFX::consoleForeground(DISPLAY_FX_COLOUR)>

0003a440 <Display::consoleGetWidth()>:
   3a440:	e5d03be0 	ldrb	r3, [r0, #3040]	; 0xbe0
   3a444:	e3530000 	cmp	r3, #0
   3a448:	1a000001 	bne	3a454 <Display::consoleGetWidth()+0x14>
   3a44c:	e1a00003 	mov	r0, r3
   3a450:	e12fff1e 	bx	lr
   3a454:	e2800004 	add	r0, r0, #4
   3a458:	ea00027e 	b	3ae58 <DisplayFX::consoleGetWidth()>

0003a45c <Display::logDebug(char const*, char const*, char const*)>:
   3a45c:	e92d4070 	push	{r4, r5, r6, lr}
   3a460:	e1a04000 	mov	r4, r0
   3a464:	e5d00be0 	ldrb	r0, [r0, #3040]	; 0xbe0
   3a468:	e24dd008 	sub	sp, sp, #8
   3a46c:	e3500000 	cmp	r0, #0
   3a470:	1a000001 	bne	3a47c <Display::logDebug(char const*, char const*, char const*)+0x20>
   3a474:	e28dd008 	add	sp, sp, #8
   3a478:	e8bd8070 	pop	{r4, r5, r6, pc}
   3a47c:	e2840004 	add	r0, r4, #4
   3a480:	e1a05003 	mov	r5, r3
   3a484:	e1a06002 	mov	r6, r2
   3a488:	e58d0004 	str	r0, [sp, #4]
   3a48c:	eb00030e 	bl	3b0cc <DisplayFX::consolePut(char const*)>
   3a490:	e5d43be0 	ldrb	r3, [r4, #3040]	; 0xbe0
   3a494:	e3530000 	cmp	r3, #0
   3a498:	0afffff5 	beq	3a474 <Display::logDebug(char const*, char const*, char const*)+0x18>
   3a49c:	e59f106c 	ldr	r1, [pc, #108]	; 3a510 <Display::logDebug(char const*, char const*, char const*)+0xb4>
   3a4a0:	e59d0004 	ldr	r0, [sp, #4]
   3a4a4:	eb000308 	bl	3b0cc <DisplayFX::consolePut(char const*)>
   3a4a8:	e5d43be0 	ldrb	r3, [r4, #3040]	; 0xbe0
   3a4ac:	e3530000 	cmp	r3, #0
   3a4b0:	0affffef 	beq	3a474 <Display::logDebug(char const*, char const*, char const*)+0x18>
   3a4b4:	e1a01006 	mov	r1, r6
   3a4b8:	e59d0004 	ldr	r0, [sp, #4]
   3a4bc:	eb000302 	bl	3b0cc <DisplayFX::consolePut(char const*)>
   3a4c0:	e5d43be0 	ldrb	r3, [r4, #3040]	; 0xbe0
   3a4c4:	e3530000 	cmp	r3, #0
   3a4c8:	0affffe9 	beq	3a474 <Display::logDebug(char const*, char const*, char const*)+0x18>
   3a4cc:	e59f1040 	ldr	r1, [pc, #64]	; 3a514 <Display::logDebug(char const*, char const*, char const*)+0xb8>
   3a4d0:	e59d0004 	ldr	r0, [sp, #4]
   3a4d4:	eb0002fc 	bl	3b0cc <DisplayFX::consolePut(char const*)>
   3a4d8:	e5d43be0 	ldrb	r3, [r4, #3040]	; 0xbe0
   3a4dc:	e3530000 	cmp	r3, #0
   3a4e0:	0affffe3 	beq	3a474 <Display::logDebug(char const*, char const*, char const*)+0x18>
   3a4e4:	e1a01005 	mov	r1, r5
   3a4e8:	e59d0004 	ldr	r0, [sp, #4]
   3a4ec:	eb0002f6 	bl	3b0cc <DisplayFX::consolePut(char const*)>
   3a4f0:	e5d43be0 	ldrb	r3, [r4, #3040]	; 0xbe0
   3a4f4:	e3530000 	cmp	r3, #0
   3a4f8:	0affffdd 	beq	3a474 <Display::logDebug(char const*, char const*, char const*)+0x18>
   3a4fc:	e59d0004 	ldr	r0, [sp, #4]
   3a500:	e59f1010 	ldr	r1, [pc, #16]	; 3a518 <Display::logDebug(char const*, char const*, char const*)+0xbc>
   3a504:	e28dd008 	add	sp, sp, #8
   3a508:	e8bd4070 	pop	{r4, r5, r6, lr}
   3a50c:	ea0002ee 	b	3b0cc <DisplayFX::consolePut(char const*)>
   3a510:	00045c54 	.word	0x00045c54
   3a514:	00045c58 	.word	0x00045c58
   3a518:	000458c4 	.word	0x000458c4

0003a51c <DisplayBase::debug()>:
   3a51c:	e12fff1e 	bx	lr

0003a520 <DisplayBase::write(unsigned long, unsigned long, unsigned char const*)>:
   3a520:	e12fff1e 	bx	lr

0003a524 <DisplayBase::setPixel(unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)>:
   3a524:	e12fff1e 	bx	lr

0003a528 <DisplayBase::getFrameBufferInfo(FrameBufferInfo&)>:
   3a528:	e12fff1e 	bx	lr

0003a52c <DisplayBase::~DisplayBase()>:
   3a52c:	e92d4010 	push	{r4, lr}
   3a530:	e1a04000 	mov	r4, r0
   3a534:	e59f300c 	ldr	r3, [pc, #12]	; 3a548 <DisplayBase::~DisplayBase()+0x1c>
   3a538:	e5803000 	str	r3, [r0]
   3a53c:	ebffaa55 	bl	24e98 <CDevice::~CDevice()>
   3a540:	e1a00004 	mov	r0, r4
   3a544:	e8bd8010 	pop	{r4, pc}
   3a548:	00045c64 	.word	0x00045c64

0003a54c <DisplayBase::~DisplayBase()>:
   3a54c:	e92d4010 	push	{r4, lr}
   3a550:	e1a04000 	mov	r4, r0
   3a554:	e59f3018 	ldr	r3, [pc, #24]	; 3a574 <DisplayBase::~DisplayBase()+0x28>
   3a558:	e5803000 	str	r3, [r0]
   3a55c:	ebffaa4d 	bl	24e98 <CDevice::~CDevice()>
   3a560:	e1a00004 	mov	r0, r4
   3a564:	e3a01004 	mov	r1, #4
   3a568:	ebffc286 	bl	2af88 <operator delete(void*, unsigned int)>
   3a56c:	e1a00004 	mov	r0, r4
   3a570:	e8bd8010 	pop	{r4, pc}
   3a574:	00045c64 	.word	0x00045c64

0003a578 <Display::debug()>:
   3a578:	e5903bd8 	ldr	r3, [r0, #3032]	; 0xbd8
   3a57c:	e2800004 	add	r0, r0, #4
   3a580:	e0833103 	add	r3, r3, r3, lsl #2
   3a584:	e0633203 	rsb	r3, r3, r3, lsl #4
   3a588:	e0800183 	add	r0, r0, r3, lsl #3
   3a58c:	ea000594 	b	3bbe4 <DisplayWindow::debug()>

0003a590 <DisplayFX::windowScroll(unsigned long, long) [clone .part.0]>:
   3a590:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a594:	e3520000 	cmp	r2, #0
   3a598:	e0224fc2 	eor	r4, r2, r2, asr #31
   3a59c:	e1a07000 	mov	r7, r0
   3a5a0:	e1a06001 	mov	r6, r1
   3a5a4:	e0444fc2 	sub	r4, r4, r2, asr #31
   3a5a8:	da00002b 	ble	3a65c <DisplayFX::windowScroll(unsigned long, long) [clone .part.0]+0xcc>
   3a5ac:	e0816101 	add	r6, r1, r1, lsl #2
   3a5b0:	e0666206 	rsb	r6, r6, r6, lsl #4
   3a5b4:	e0806186 	add	r6, r0, r6, lsl #3
   3a5b8:	e596301c 	ldr	r3, [r6, #28]
   3a5bc:	e5968024 	ldr	r8, [r6, #36]	; 0x24
   3a5c0:	e5965010 	ldr	r5, [r6, #16]
   3a5c4:	e0090398 	mul	r9, r8, r3
   3a5c8:	e0245499 	mla	r4, r9, r4, r5
   3a5cc:	e5963008 	ldr	r3, [r6, #8]
   3a5d0:	e5902bc4 	ldr	r2, [r0, #3012]	; 0xbc4
   3a5d4:	e596a018 	ldr	sl, [r6, #24]
   3a5d8:	e0243492 	mla	r4, r2, r4, r3
   3a5dc:	e0253592 	mla	r5, r2, r5, r3
   3a5e0:	e5903bcc 	ldr	r3, [r0, #3020]	; 0xbcc
   3a5e4:	e35a0000 	cmp	sl, #0
   3a5e8:	e5968020 	ldr	r8, [r6, #32]
   3a5ec:	e596000c 	ldr	r0, [r6, #12]
   3a5f0:	e0834004 	add	r4, r3, r4
   3a5f4:	e0835005 	add	r5, r3, r5
   3a5f8:	0a000003 	beq	3a60c <DisplayFX::windowScroll(unsigned long, long) [clone .part.0]+0x7c>
   3a5fc:	e1a0100a 	mov	r1, sl
   3a600:	eb0005c0 	bl	3bd08 <__udivsi3>
   3a604:	e00a0a98 	mul	sl, r8, sl
   3a608:	e00a009a 	mul	sl, sl, r0
   3a60c:	e596101c 	ldr	r1, [r6, #28]
   3a610:	e5960014 	ldr	r0, [r6, #20]
   3a614:	e3510000 	cmp	r1, #0
   3a618:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a61c:	eb0005b9 	bl	3bd08 <__udivsi3>
   3a620:	e0090099 	mul	r9, r9, r0
   3a624:	e3590000 	cmp	r9, #0
   3a628:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a62c:	e3a06000 	mov	r6, #0
   3a630:	e1a01004 	mov	r1, r4
   3a634:	e1a00005 	mov	r0, r5
   3a638:	e1a0200a 	mov	r2, sl
   3a63c:	ebffc05d 	bl	2a7b8 <memcpy>
   3a640:	e2866001 	add	r6, r6, #1
   3a644:	e5973bc4 	ldr	r3, [r7, #3012]	; 0xbc4
   3a648:	e1590006 	cmp	r9, r6
   3a64c:	e0855003 	add	r5, r5, r3
   3a650:	e0844003 	add	r4, r4, r3
   3a654:	1afffff5 	bne	3a630 <DisplayFX::windowScroll(unsigned long, long) [clone .part.0]+0xa0>
   3a658:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a65c:	e0813101 	add	r3, r1, r1, lsl #2
   3a660:	e0633203 	rsb	r3, r3, r3, lsl #4
   3a664:	e0803183 	add	r3, r0, r3, lsl #3
   3a668:	e593101c 	ldr	r1, [r3, #28]
   3a66c:	e5930014 	ldr	r0, [r3, #20]
   3a670:	e3510000 	cmp	r1, #0
   3a674:	e1a05106 	lsl	r5, r6, #2
   3a678:	0a000001 	beq	3a684 <DisplayFX::windowScroll(unsigned long, long) [clone .part.0]+0xf4>
   3a67c:	eb0005a1 	bl	3bd08 <__udivsi3>
   3a680:	e1a01000 	mov	r1, r0
   3a684:	e0856006 	add	r6, r5, r6
   3a688:	e0666206 	rsb	r6, r6, r6, lsl #4
   3a68c:	e0876186 	add	r6, r7, r6, lsl #3
   3a690:	e596301c 	ldr	r3, [r6, #28]
   3a694:	e5960024 	ldr	r0, [r6, #36]	; 0x24
   3a698:	e5965010 	ldr	r5, [r6, #16]
   3a69c:	e0000390 	mul	r0, r0, r3
   3a6a0:	e0413004 	sub	r3, r1, r4
   3a6a4:	e0235390 	mla	r3, r0, r3, r5
   3a6a8:	e5962008 	ldr	r2, [r6, #8]
   3a6ac:	e597ebc4 	ldr	lr, [r7, #3012]	; 0xbc4
   3a6b0:	e2424001 	sub	r4, r2, #1
   3a6b4:	e02c259e 	mla	ip, lr, r5, r2
   3a6b8:	e023439e 	mla	r3, lr, r3, r4
   3a6bc:	e0215190 	mla	r1, r0, r1, r5
   3a6c0:	e5972bcc 	ldr	r2, [r7, #3020]	; 0xbcc
   3a6c4:	e021419e 	mla	r1, lr, r1, r4
   3a6c8:	e0823003 	add	r3, r2, r3
   3a6cc:	e082000c 	add	r0, r2, ip
   3a6d0:	e1530000 	cmp	r3, r0
   3a6d4:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a6d8:	e2811001 	add	r1, r1, #1
   3a6dc:	e0822001 	add	r2, r2, r1
   3a6e0:	e4531001 	ldrb	r1, [r3], #-1
   3a6e4:	e1500003 	cmp	r0, r3
   3a6e8:	e5621001 	strb	r1, [r2, #-1]!
   3a6ec:	1afffffb 	bne	3a6e0 <DisplayFX::windowScroll(unsigned long, long) [clone .part.0]+0x150>
   3a6f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003a6f4 <DisplayFX::DisplayFX()>:
   3a6f4:	e92d4010 	push	{r4, lr}
   3a6f8:	e3a02000 	mov	r2, #0
   3a6fc:	e1a03000 	mov	r3, r0
   3a700:	e3a01001 	mov	r1, #1
   3a704:	e3a0400f 	mov	r4, #15
   3a708:	e280cebb 	add	ip, r0, #2992	; 0xbb0
   3a70c:	e59fe094 	ldr	lr, [pc, #148]	; 3a7a8 <DisplayFX::DisplayFX()+0xb4>
   3a710:	e28cc008 	add	ip, ip, #8
   3a714:	e583e000 	str	lr, [r3]
   3a718:	e5c32004 	strb	r2, [r3, #4]
   3a71c:	e5832010 	str	r2, [r3, #16]
   3a720:	e5832008 	str	r2, [r3, #8]
   3a724:	e5832014 	str	r2, [r3, #20]
   3a728:	e583200c 	str	r2, [r3, #12]
   3a72c:	e583201c 	str	r2, [r3, #28]
   3a730:	e5832018 	str	r2, [r3, #24]
   3a734:	e5831024 	str	r1, [r3, #36]	; 0x24
   3a738:	e5831020 	str	r1, [r3, #32]
   3a73c:	e5832028 	str	r2, [r3, #40]	; 0x28
   3a740:	e583402c 	str	r4, [r3, #44]	; 0x2c
   3a744:	e5832030 	str	r2, [r3, #48]	; 0x30
   3a748:	e583204c 	str	r2, [r3, #76]	; 0x4c
   3a74c:	e5832050 	str	r2, [r3, #80]	; 0x50
   3a750:	e5c32054 	strb	r2, [r3, #84]	; 0x54
   3a754:	e5832048 	str	r2, [r3, #72]	; 0x48
   3a758:	e5831034 	str	r1, [r3, #52]	; 0x34
   3a75c:	e5831038 	str	r1, [r3, #56]	; 0x38
   3a760:	e583203c 	str	r2, [r3, #60]	; 0x3c
   3a764:	e5832040 	str	r2, [r3, #64]	; 0x40
   3a768:	e5832044 	str	r2, [r3, #68]	; 0x44
   3a76c:	e2833f96 	add	r3, r3, #600	; 0x258
   3a770:	e153000c 	cmp	r3, ip
   3a774:	1affffe6 	bne	3a714 <DisplayFX::DisplayFX()+0x20>
   3a778:	e3a01c0f 	mov	r1, #3840	; 0xf00
   3a77c:	e2803ebd 	add	r3, r0, #3024	; 0xbd0
   3a780:	e5802bd4 	str	r2, [r0, #3028]	; 0xbd4
   3a784:	e5802bb8 	str	r2, [r0, #3000]	; 0xbb8
   3a788:	e5802bbc 	str	r2, [r0, #3004]	; 0xbbc
   3a78c:	e5802bc0 	str	r2, [r0, #3008]	; 0xbc0
   3a790:	e5802bc4 	str	r2, [r0, #3012]	; 0xbc4
   3a794:	e5802bc8 	str	r2, [r0, #3016]	; 0xbc8
   3a798:	e5802bcc 	str	r2, [r0, #3020]	; 0xbcc
   3a79c:	e1c310b0 	strh	r1, [r3]
   3a7a0:	e5802bd8 	str	r2, [r0, #3032]	; 0xbd8
   3a7a4:	e8bd8010 	pop	{r4, pc}
   3a7a8:	00045da0 	.word	0x00045da0

0003a7ac <DisplayFX::~DisplayFX()>:
   3a7ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3a7b0:	e5904bb8 	ldr	r4, [r0, #3000]	; 0xbb8
   3a7b4:	e1a05000 	mov	r5, r0
   3a7b8:	e3540000 	cmp	r4, #0
   3a7bc:	0a000004 	beq	3a7d4 <DisplayFX::~DisplayFX()+0x28>
   3a7c0:	e1a00004 	mov	r0, r4
   3a7c4:	eb000774 	bl	3c59c <CBcmFrameBuffer::~CBcmFrameBuffer()>
   3a7c8:	e1a00004 	mov	r0, r4
   3a7cc:	e3a01094 	mov	r1, #148	; 0x94
   3a7d0:	ebffc1ec 	bl	2af88 <operator delete(void*, unsigned int)>
   3a7d4:	e2853ebb 	add	r3, r5, #2992	; 0xbb0
   3a7d8:	e59f605c 	ldr	r6, [pc, #92]	; 3a83c <DisplayFX::~DisplayFX()+0x90>
   3a7dc:	e59f705c 	ldr	r7, [pc, #92]	; 3a840 <DisplayFX::~DisplayFX()+0x94>
   3a7e0:	e2833008 	add	r3, r3, #8
   3a7e4:	ea000008 	b	3a80c <DisplayFX::~DisplayFX()+0x60>
   3a7e8:	e5130210 	ldr	r0, [r3, #-528]	; 0xfffffdf0
   3a7ec:	e5037258 	str	r7, [r3, #-600]	; 0xfffffda8
   3a7f0:	e3500000 	cmp	r0, #0
   3a7f4:	0a000001 	beq	3a800 <DisplayFX::~DisplayFX()+0x54>
   3a7f8:	e3a01004 	mov	r1, #4
   3a7fc:	ebffc1e1 	bl	2af88 <operator delete(void*, unsigned int)>
   3a800:	e1540005 	cmp	r4, r5
   3a804:	e1a03004 	mov	r3, r4
   3a808:	0a000009 	beq	3a834 <DisplayFX::~DisplayFX()+0x88>
   3a80c:	e5132258 	ldr	r2, [r3, #-600]	; 0xfffffda8
   3a810:	e2434f96 	sub	r4, r3, #600	; 0x258
   3a814:	e5922000 	ldr	r2, [r2]
   3a818:	e1520006 	cmp	r2, r6
   3a81c:	0afffff1 	beq	3a7e8 <DisplayFX::~DisplayFX()+0x3c>
   3a820:	e1a00004 	mov	r0, r4
   3a824:	e12fff32 	blx	r2
   3a828:	e1540005 	cmp	r4, r5
   3a82c:	e1a03004 	mov	r3, r4
   3a830:	1afffff5 	bne	3a80c <DisplayFX::~DisplayFX()+0x60>
   3a834:	e1a00004 	mov	r0, r4
   3a838:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3a83c:	0003bc9c 	.word	0x0003bc9c
   3a840:	00045da0 	.word	0x00045da0

0003a844 <DisplayFX::screenClear()>:
   3a844:	e5903bcc 	ldr	r3, [r0, #3020]	; 0xbcc
   3a848:	e5901bc8 	ldr	r1, [r0, #3016]	; 0xbc8
   3a84c:	e0831001 	add	r1, r3, r1
   3a850:	e1530001 	cmp	r3, r1
   3a854:	212fff1e 	bxcs	lr
   3a858:	e5d02bd0 	ldrb	r2, [r0, #3024]	; 0xbd0
   3a85c:	e4c32001 	strb	r2, [r3], #1
   3a860:	e1510003 	cmp	r1, r3
   3a864:	1afffffb 	bne	3a858 <DisplayFX::screenClear()+0x14>
   3a868:	e12fff1e 	bx	lr

0003a86c <DisplayFX::screenRectClear(unsigned long, unsigned long, unsigned long, unsigned long)>:
   3a86c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a870:	e5904bc4 	ldr	r4, [r0, #3012]	; 0xbc4
   3a874:	e59d8020 	ldr	r8, [sp, #32]
   3a878:	e0211294 	mla	r1, r4, r2, r1
   3a87c:	e5904bcc 	ldr	r4, [r0, #3020]	; 0xbcc
   3a880:	e3580000 	cmp	r8, #0
   3a884:	e0844001 	add	r4, r4, r1
   3a888:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a88c:	e1a06000 	mov	r6, r0
   3a890:	e1a07003 	mov	r7, r3
   3a894:	e3a05000 	mov	r5, #0
   3a898:	e2809ebd 	add	r9, r0, #3024	; 0xbd0
   3a89c:	e1a00004 	mov	r0, r4
   3a8a0:	e1d910d0 	ldrsb	r1, [r9]
   3a8a4:	e1a02007 	mov	r2, r7
   3a8a8:	ebffbd79 	bl	29e94 <memset>
   3a8ac:	e2855001 	add	r5, r5, #1
   3a8b0:	e5961bc4 	ldr	r1, [r6, #3012]	; 0xbc4
   3a8b4:	e1580005 	cmp	r8, r5
   3a8b8:	e0844001 	add	r4, r4, r1
   3a8bc:	1afffff6 	bne	3a89c <DisplayFX::screenRectClear(unsigned long, unsigned long, unsigned long, unsigned long)+0x30>
   3a8c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003a8c4 <DisplayFX::screenBackground(DISPLAY_FX_COLOUR)>:
   3a8c4:	e5c01bd0 	strb	r1, [r0, #3024]	; 0xbd0
   3a8c8:	e12fff1e 	bx	lr

0003a8cc <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)>:
   3a8cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a8d0:	e3510004 	cmp	r1, #4
   3a8d4:	e24dd01c 	sub	sp, sp, #28
   3a8d8:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
   3a8dc:	8a000076 	bhi	3aabc <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1f0>
   3a8e0:	e1a0b003 	mov	fp, r3
   3a8e4:	e0813101 	add	r3, r1, r1, lsl #2
   3a8e8:	e0633203 	rsb	r3, r3, r3, lsl #4
   3a8ec:	e0808183 	add	r8, r0, r3, lsl #3
   3a8f0:	e1a0a002 	mov	sl, r2
   3a8f4:	e5d82004 	ldrb	r2, [r8, #4]
   3a8f8:	e1a03101 	lsl	r3, r1, #2
   3a8fc:	e3520000 	cmp	r2, #0
   3a900:	e1a07001 	mov	r7, r1
   3a904:	e1a06000 	mov	r6, r0
   3a908:	e58d3004 	str	r3, [sp, #4]
   3a90c:	0a00006a 	beq	3aabc <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1f0>
   3a910:	e5985018 	ldr	r5, [r8, #24]
   3a914:	e3550000 	cmp	r5, #0
   3a918:	0a000067 	beq	3aabc <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1f0>
   3a91c:	e1a01005 	mov	r1, r5
   3a920:	e598000c 	ldr	r0, [r8, #12]
   3a924:	eb0004f7 	bl	3bd08 <__udivsi3>
   3a928:	e150000a 	cmp	r0, sl
   3a92c:	9a000062 	bls	3aabc <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1f0>
   3a930:	e598401c 	ldr	r4, [r8, #28]
   3a934:	e3540000 	cmp	r4, #0
   3a938:	0a00005f 	beq	3aabc <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1f0>
   3a93c:	e1a01004 	mov	r1, r4
   3a940:	e5980014 	ldr	r0, [r8, #20]
   3a944:	eb0004ef 	bl	3bd08 <__udivsi3>
   3a948:	e15b0000 	cmp	fp, r0
   3a94c:	2a00005a 	bcs	3aabc <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1f0>
   3a950:	e1a03004 	mov	r3, r4
   3a954:	e598c030 	ldr	ip, [r8, #48]	; 0x30
   3a958:	e5980024 	ldr	r0, [r8, #36]	; 0x24
   3a95c:	e59c2014 	ldr	r2, [ip, #20]
   3a960:	e00e0390 	mul	lr, r0, r3
   3a964:	e1590002 	cmp	r9, r2
   3a968:	23a09000 	movcs	r9, #0
   3a96c:	e58d4008 	str	r4, [sp, #8]
   3a970:	e5984020 	ldr	r4, [r8, #32]
   3a974:	e5981010 	ldr	r1, [r8, #16]
   3a978:	e0020594 	mul	r2, r4, r5
   3a97c:	e02b1e9b 	mla	fp, fp, lr, r1
   3a980:	e598e008 	ldr	lr, [r8, #8]
   3a984:	e598102c 	ldr	r1, [r8, #44]	; 0x2c
   3a988:	e02ae29a 	mla	sl, sl, r2, lr
   3a98c:	e59c200c 	ldr	r2, [ip, #12]
   3a990:	e59cc010 	ldr	ip, [ip, #16]
   3a994:	e3710001 	cmn	r1, #1
   3a998:	e022c992 	mla	r2, r2, r9, ip
   3a99c:	e58d2004 	str	r2, [sp, #4]
   3a9a0:	02862ebd 	addeq	r2, r6, #3024	; 0xbd0
   3a9a4:	01d210d1 	ldrsbeq	r1, [r2, #1]
   3a9a8:	e5963bc4 	ldr	r3, [r6, #3012]	; 0xbc4
   3a9ac:	e1812401 	orr	r2, r1, r1, lsl #8
   3a9b0:	e58d200c 	str	r2, [sp, #12]
   3a9b4:	e1a02107 	lsl	r2, r7, #2
   3a9b8:	e0822007 	add	r2, r2, r7
   3a9bc:	e0622202 	rsb	r2, r2, r2, lsl #4
   3a9c0:	e0862182 	add	r2, r6, r2, lsl #3
   3a9c4:	e5922028 	ldr	r2, [r2, #40]	; 0x28
   3a9c8:	e02bab93 	mla	fp, r3, fp, sl
   3a9cc:	e3720001 	cmn	r2, #1
   3a9d0:	02862ebd 	addeq	r2, r6, #3024	; 0xbd0
   3a9d4:	e59d1008 	ldr	r1, [sp, #8]
   3a9d8:	01d220d0 	ldrsbeq	r2, [r2]
   3a9dc:	e596abcc 	ldr	sl, [r6, #3020]	; 0xbcc
   3a9e0:	e3510000 	cmp	r1, #0
   3a9e4:	e08aa00b 	add	sl, sl, fp
   3a9e8:	e1822402 	orr	r2, r2, r2, lsl #8
   3a9ec:	0a000032 	beq	3aabc <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1f0>
   3a9f0:	e3a01000 	mov	r1, #0
   3a9f4:	e58d1010 	str	r1, [sp, #16]
   3a9f8:	e1a01107 	lsl	r1, r7, #2
   3a9fc:	e0817007 	add	r7, r1, r7
   3aa00:	e0677207 	rsb	r7, r7, r7, lsl #4
   3aa04:	e0861187 	add	r1, r6, r7, lsl #3
   3aa08:	e58d1014 	str	r1, [sp, #20]
   3aa0c:	e6ef7072 	uxtb	r7, r2
   3aa10:	e3500000 	cmp	r0, #0
   3aa14:	0a00001c 	beq	3aa8c <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1c0>
   3aa18:	e3a0b000 	mov	fp, #0
   3aa1c:	e5dd800c 	ldrb	r8, [sp, #12]
   3aa20:	e3550000 	cmp	r5, #0
   3aa24:	0a000014 	beq	3aa7c <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x1b0>
   3aa28:	e1a0300a 	mov	r3, sl
   3aa2c:	e3a01080 	mov	r1, #128	; 0x80
   3aa30:	e3a09000 	mov	r9, #0
   3aa34:	e59dc004 	ldr	ip, [sp, #4]
   3aa38:	e3540000 	cmp	r4, #0
   3aa3c:	0a000007 	beq	3aa60 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x194>
   3aa40:	e083e004 	add	lr, r3, r4
   3aa44:	e5dc2000 	ldrb	r2, [ip]
   3aa48:	e1120001 	tst	r2, r1
   3aa4c:	11a02008 	movne	r2, r8
   3aa50:	01a02007 	moveq	r2, r7
   3aa54:	e4c32001 	strb	r2, [r3], #1
   3aa58:	e153000e 	cmp	r3, lr
   3aa5c:	1afffff8 	bne	3aa44 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x178>
   3aa60:	e1b010c1 	asrs	r1, r1, #1
   3aa64:	e2899001 	add	r9, r9, #1
   3aa68:	03a01080 	moveq	r1, #128	; 0x80
   3aa6c:	028cc001 	addeq	ip, ip, #1
   3aa70:	e1550009 	cmp	r5, r9
   3aa74:	1affffef 	bne	3aa38 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x16c>
   3aa78:	e5963bc4 	ldr	r3, [r6, #3012]	; 0xbc4
   3aa7c:	e28bb001 	add	fp, fp, #1
   3aa80:	e150000b 	cmp	r0, fp
   3aa84:	e08aa003 	add	sl, sl, r3
   3aa88:	1affffe4 	bne	3aa20 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x154>
   3aa8c:	e59d2014 	ldr	r2, [sp, #20]
   3aa90:	e59d1010 	ldr	r1, [sp, #16]
   3aa94:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   3aa98:	e59dc008 	ldr	ip, [sp, #8]
   3aa9c:	e2811001 	add	r1, r1, #1
   3aaa0:	e5922008 	ldr	r2, [r2, #8]
   3aaa4:	e58d1010 	str	r1, [sp, #16]
   3aaa8:	e15c0001 	cmp	ip, r1
   3aaac:	e59d1004 	ldr	r1, [sp, #4]
   3aab0:	e0812002 	add	r2, r1, r2
   3aab4:	e58d2004 	str	r2, [sp, #4]
   3aab8:	1affffd4 	bne	3aa10 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)+0x144>
   3aabc:	e28dd01c 	add	sp, sp, #28
   3aac0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003aac4 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)>:
   3aac4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3aac8:	e3510004 	cmp	r1, #4
   3aacc:	e24dd008 	sub	sp, sp, #8
   3aad0:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
   3aad4:	8a00001b 	bhi	3ab48 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)+0x84>
   3aad8:	e5d75000 	ldrb	r5, [r7]
   3aadc:	e3550000 	cmp	r5, #0
   3aae0:	0a000018 	beq	3ab48 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)+0x84>
   3aae4:	e0816101 	add	r6, r1, r1, lsl #2
   3aae8:	e0666206 	rsb	r6, r6, r6, lsl #4
   3aaec:	e1a08001 	mov	r8, r1
   3aaf0:	e1a09000 	mov	r9, r0
   3aaf4:	e1a04002 	mov	r4, r2
   3aaf8:	e1a0a003 	mov	sl, r3
   3aafc:	e0806186 	add	r6, r0, r6, lsl #3
   3ab00:	ea00000c 	b	3ab38 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)+0x74>
   3ab04:	eb00047f 	bl	3bd08 <__udivsi3>
   3ab08:	e1500004 	cmp	r0, r4
   3ab0c:	9a00000d 	bls	3ab48 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)+0x84>
   3ab10:	e1a02004 	mov	r2, r4
   3ab14:	e58d5000 	str	r5, [sp]
   3ab18:	e1a0300a 	mov	r3, sl
   3ab1c:	e1a01008 	mov	r1, r8
   3ab20:	e1a00009 	mov	r0, r9
   3ab24:	ebffff68 	bl	3a8cc <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)>
   3ab28:	e5f75001 	ldrb	r5, [r7, #1]!
   3ab2c:	e2844001 	add	r4, r4, #1
   3ab30:	e3550000 	cmp	r5, #0
   3ab34:	0a000003 	beq	3ab48 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)+0x84>
   3ab38:	e5961018 	ldr	r1, [r6, #24]
   3ab3c:	e596000c 	ldr	r0, [r6, #12]
   3ab40:	e3510000 	cmp	r1, #0
   3ab44:	1affffee 	bne	3ab04 <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned char const*)+0x40>
   3ab48:	e28dd008 	add	sp, sp, #8
   3ab4c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003ab50 <DisplayFX::windowForeground(unsigned long, DISPLAY_FX_COLOUR)>:
   3ab50:	e3510004 	cmp	r1, #4
   3ab54:	90811101 	addls	r1, r1, r1, lsl #2
   3ab58:	90611201 	rsbls	r1, r1, r1, lsl #4
   3ab5c:	90801181 	addls	r1, r0, r1, lsl #3
   3ab60:	9581202c 	strls	r2, [r1, #44]	; 0x2c
   3ab64:	e12fff1e 	bx	lr

0003ab68 <DisplayFX::windowBackground(unsigned long, DISPLAY_FX_COLOUR)>:
   3ab68:	e3510004 	cmp	r1, #4
   3ab6c:	90811101 	addls	r1, r1, r1, lsl #2
   3ab70:	90611201 	rsbls	r1, r1, r1, lsl #4
   3ab74:	90801181 	addls	r1, r0, r1, lsl #3
   3ab78:	95812028 	strls	r2, [r1, #40]	; 0x28
   3ab7c:	e12fff1e 	bx	lr

0003ab80 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)>:
   3ab80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3ab84:	e0814101 	add	r4, r1, r1, lsl #2
   3ab88:	e0644204 	rsb	r4, r4, r4, lsl #4
   3ab8c:	e0804184 	add	r4, r0, r4, lsl #3
   3ab90:	e594c010 	ldr	ip, [r4, #16]
   3ab94:	e5945020 	ldr	r5, [r4, #32]
   3ab98:	e5947024 	ldr	r7, [r4, #36]	; 0x24
   3ab9c:	e594e008 	ldr	lr, [r4, #8]
   3aba0:	e594402c 	ldr	r4, [r4, #44]	; 0x2c
   3aba4:	e1dd61dc 	ldrsb	r6, [sp, #28]
   3aba8:	e3740001 	cmn	r4, #1
   3abac:	e023c397 	mla	r3, r7, r3, ip
   3abb0:	0280cebd 	addeq	ip, r0, #3024	; 0xbd0
   3abb4:	01dc40d1 	ldrsbeq	r4, [ip, #1]
   3abb8:	e3760001 	cmn	r6, #1
   3abbc:	11a04006 	movne	r4, r6
   3abc0:	e02ee295 	mla	lr, r5, r2, lr
   3abc4:	e5902bc4 	ldr	r2, [r0, #3012]	; 0xbc4
   3abc8:	e59d8018 	ldr	r8, [sp, #24]
   3abcc:	e023e392 	mla	r3, r2, r3, lr
   3abd0:	e590ebcc 	ldr	lr, [r0, #3020]	; 0xbcc
   3abd4:	e08ee003 	add	lr, lr, r3
   3abd8:	e1a03101 	lsl	r3, r1, #2
   3abdc:	e083c001 	add	ip, r3, r1
   3abe0:	e06cc20c 	rsb	ip, ip, ip, lsl #4
   3abe4:	e080c18c 	add	ip, r0, ip, lsl #3
   3abe8:	e59cc028 	ldr	ip, [ip, #40]	; 0x28
   3abec:	e37c0001 	cmn	ip, #1
   3abf0:	0280cebd 	addeq	ip, r0, #3024	; 0xbd0
   3abf4:	01dcc0d0 	ldrsbeq	ip, [ip]
   3abf8:	e3580000 	cmp	r8, #0
   3abfc:	16ef4074 	uxtbne	r4, r4
   3ac00:	06ef407c 	uxtbeq	r4, ip
   3ac04:	e2156003 	ands	r6, r5, #3
   3ac08:	1a000018 	bne	3ac70 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)+0xf0>
   3ac0c:	e1a0c804 	lsl	ip, r4, #16
   3ac10:	e08ccc04 	add	ip, ip, r4, lsl #24
   3ac14:	e08cc404 	add	ip, ip, r4, lsl #8
   3ac18:	e3570000 	cmp	r7, #0
   3ac1c:	e08c4004 	add	r4, ip, r4
   3ac20:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3ac24:	e083c001 	add	ip, r3, r1
   3ac28:	e06cc20c 	rsb	ip, ip, ip, lsl #4
   3ac2c:	e080c18c 	add	ip, r0, ip, lsl #3
   3ac30:	e1b03125 	lsrs	r3, r5, #2
   3ac34:	13a03000 	movne	r3, #0
   3ac38:	e022e296 	mla	r2, r6, r2, lr
   3ac3c:	0a000004 	beq	3ac54 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)+0xd4>
   3ac40:	e4824004 	str	r4, [r2], #4
   3ac44:	e59c1020 	ldr	r1, [ip, #32]
   3ac48:	e2833001 	add	r3, r3, #1
   3ac4c:	e1530121 	cmp	r3, r1, lsr #2
   3ac50:	3afffffa 	bcc	3ac40 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)+0xc0>
   3ac54:	e59c3024 	ldr	r3, [ip, #36]	; 0x24
   3ac58:	e2866001 	add	r6, r6, #1
   3ac5c:	e1530006 	cmp	r3, r6
   3ac60:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   3ac64:	e5902bc4 	ldr	r2, [r0, #3012]	; 0xbc4
   3ac68:	e59c5020 	ldr	r5, [ip, #32]
   3ac6c:	eaffffef 	b	3ac30 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)+0xb0>
   3ac70:	e3570000 	cmp	r7, #0
   3ac74:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3ac78:	e3a06000 	mov	r6, #0
   3ac7c:	e083c001 	add	ip, r3, r1
   3ac80:	e06cc20c 	rsb	ip, ip, ip, lsl #4
   3ac84:	e080c18c 	add	ip, r0, ip, lsl #3
   3ac88:	e3550000 	cmp	r5, #0
   3ac8c:	13a03000 	movne	r3, #0
   3ac90:	e022e296 	mla	r2, r6, r2, lr
   3ac94:	0a000004 	beq	3acac <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)+0x12c>
   3ac98:	e4c24001 	strb	r4, [r2], #1
   3ac9c:	e59c1020 	ldr	r1, [ip, #32]
   3aca0:	e2833001 	add	r3, r3, #1
   3aca4:	e1510003 	cmp	r1, r3
   3aca8:	8afffffa 	bhi	3ac98 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)+0x118>
   3acac:	e59c3024 	ldr	r3, [ip, #36]	; 0x24
   3acb0:	e2866001 	add	r6, r6, #1
   3acb4:	e1530006 	cmp	r3, r6
   3acb8:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   3acbc:	e5902bc4 	ldr	r2, [r0, #3012]	; 0xbc4
   3acc0:	e59c5020 	ldr	r5, [ip, #32]
   3acc4:	eaffffef 	b	3ac88 <DisplayFX::windowSetPixel(unsigned long, unsigned long, unsigned long, unsigned long, DISPLAY_FX_COLOUR)+0x108>

0003acc8 <DisplayFX::getFramebuffer(unsigned long, FrameBufferInfo&)>:
   3acc8:	e92d4030 	push	{r4, r5, lr}
   3accc:	e3a04001 	mov	r4, #1
   3acd0:	e0811101 	add	r1, r1, r1, lsl #2
   3acd4:	e0611201 	rsb	r1, r1, r1, lsl #4
   3acd8:	e0801181 	add	r1, r0, r1, lsl #3
   3acdc:	e591e008 	ldr	lr, [r1, #8]
   3ace0:	e590cbc4 	ldr	ip, [r0, #3012]	; 0xbc4
   3ace4:	e5913010 	ldr	r3, [r1, #16]
   3ace8:	e591500c 	ldr	r5, [r1, #12]
   3acec:	e023ec93 	mla	r3, r3, ip, lr
   3acf0:	e590ebcc 	ldr	lr, [r0, #3020]	; 0xbcc
   3acf4:	e5900bbc 	ldr	r0, [r0, #3004]	; 0xbbc
   3acf8:	e08e3003 	add	r3, lr, r3
   3acfc:	e5823010 	str	r3, [r2, #16]
   3ad00:	e5913014 	ldr	r3, [r1, #20]
   3ad04:	e582e000 	str	lr, [r2]
   3ad08:	e5820004 	str	r0, [r2, #4]
   3ad0c:	e5820008 	str	r0, [r2, #8]
   3ad10:	e582c00c 	str	ip, [r2, #12]
   3ad14:	e5825014 	str	r5, [r2, #20]
   3ad18:	e5823018 	str	r3, [r2, #24]
   3ad1c:	e582401c 	str	r4, [r2, #28]
   3ad20:	e8bd8030 	pop	{r4, r5, pc}

0003ad24 <DisplayFX::windowClear(unsigned long)>:
   3ad24:	e3510004 	cmp	r1, #4
   3ad28:	812fff1e 	bxhi	lr
   3ad2c:	e0811101 	add	r1, r1, r1, lsl #2
   3ad30:	e0611201 	rsb	r1, r1, r1, lsl #4
   3ad34:	e0801181 	add	r1, r0, r1, lsl #3
   3ad38:	e5d13004 	ldrb	r3, [r1, #4]
   3ad3c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3ad40:	e3530000 	cmp	r3, #0
   3ad44:	e1a06000 	mov	r6, r0
   3ad48:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ad4c:	e5914010 	ldr	r4, [r1, #16]
   3ad50:	e5902bc4 	ldr	r2, [r0, #3012]	; 0xbc4
   3ad54:	e5913008 	ldr	r3, [r1, #8]
   3ad58:	e5917014 	ldr	r7, [r1, #20]
   3ad5c:	e0233492 	mla	r3, r2, r4, r3
   3ad60:	e5904bcc 	ldr	r4, [r0, #3020]	; 0xbcc
   3ad64:	e3570000 	cmp	r7, #0
   3ad68:	e591800c 	ldr	r8, [r1, #12]
   3ad6c:	e0844003 	add	r4, r4, r3
   3ad70:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ad74:	e3a05000 	mov	r5, #0
   3ad78:	e2809ebd 	add	r9, r0, #3024	; 0xbd0
   3ad7c:	e1a00004 	mov	r0, r4
   3ad80:	e1a02008 	mov	r2, r8
   3ad84:	e1d910d0 	ldrsb	r1, [r9]
   3ad88:	ebffbc41 	bl	29e94 <memset>
   3ad8c:	e2855001 	add	r5, r5, #1
   3ad90:	e5963bc4 	ldr	r3, [r6, #3012]	; 0xbc4
   3ad94:	e1570005 	cmp	r7, r5
   3ad98:	e0844003 	add	r4, r4, r3
   3ad9c:	1afffff6 	bne	3ad7c <DisplayFX::windowClear(unsigned long)+0x58>
   3ada0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003ada4 <DisplayFX::windowGetPFB(unsigned long, unsigned long, unsigned long)>:
   3ada4:	e0811101 	add	r1, r1, r1, lsl #2
   3ada8:	e0611201 	rsb	r1, r1, r1, lsl #4
   3adac:	e0801181 	add	r1, r0, r1, lsl #3
   3adb0:	e92d4030 	push	{r4, r5, lr}
   3adb4:	e591c024 	ldr	ip, [r1, #36]	; 0x24
   3adb8:	e591e01c 	ldr	lr, [r1, #28]
   3adbc:	e5915018 	ldr	r5, [r1, #24]
   3adc0:	e00c0e9c 	mul	ip, ip, lr
   3adc4:	e591e020 	ldr	lr, [r1, #32]
   3adc8:	e5914010 	ldr	r4, [r1, #16]
   3adcc:	e00e059e 	mul	lr, lr, r5
   3add0:	e5911008 	ldr	r1, [r1, #8]
   3add4:	e0234c93 	mla	r3, r3, ip, r4
   3add8:	e0221e92 	mla	r2, r2, lr, r1
   3addc:	e590cbc4 	ldr	ip, [r0, #3012]	; 0xbc4
   3ade0:	e5900bcc 	ldr	r0, [r0, #3020]	; 0xbcc
   3ade4:	e023239c 	mla	r3, ip, r3, r2
   3ade8:	e0800003 	add	r0, r0, r3
   3adec:	e8bd8030 	pop	{r4, r5, pc}

0003adf0 <DisplayFX::screenGetPFBXY(unsigned long, unsigned long)>:
   3adf0:	e5903bc4 	ldr	r3, [r0, #3012]	; 0xbc4
   3adf4:	e5900bcc 	ldr	r0, [r0, #3020]	; 0xbcc
   3adf8:	e0211293 	mla	r1, r3, r2, r1
   3adfc:	e0800001 	add	r0, r0, r1
   3ae00:	e12fff1e 	bx	lr

0003ae04 <DisplayFX::windowGetPFBXY(unsigned long, unsigned long, unsigned long)>:
   3ae04:	e0811101 	add	r1, r1, r1, lsl #2
   3ae08:	e0611201 	rsb	r1, r1, r1, lsl #4
   3ae0c:	e0801181 	add	r1, r0, r1, lsl #3
   3ae10:	e92d4010 	push	{r4, lr}
   3ae14:	e591c020 	ldr	ip, [r1, #32]
   3ae18:	e5914024 	ldr	r4, [r1, #36]	; 0x24
   3ae1c:	e591e010 	ldr	lr, [r1, #16]
   3ae20:	e5911008 	ldr	r1, [r1, #8]
   3ae24:	e023e394 	mla	r3, r4, r3, lr
   3ae28:	e022129c 	mla	r2, ip, r2, r1
   3ae2c:	e5901bc4 	ldr	r1, [r0, #3012]	; 0xbc4
   3ae30:	e5900bcc 	ldr	r0, [r0, #3020]	; 0xbcc
   3ae34:	e0232391 	mla	r3, r1, r3, r2
   3ae38:	e0800003 	add	r0, r0, r3
   3ae3c:	e8bd8010 	pop	{r4, pc}

0003ae40 <DisplayFX::consoleForeground(DISPLAY_FX_COLOUR)>:
   3ae40:	e5903bd4 	ldr	r3, [r0, #3028]	; 0xbd4
   3ae44:	e0833103 	add	r3, r3, r3, lsl #2
   3ae48:	e0633203 	rsb	r3, r3, r3, lsl #4
   3ae4c:	e0803183 	add	r3, r0, r3, lsl #3
   3ae50:	e583102c 	str	r1, [r3, #44]	; 0x2c
   3ae54:	e12fff1e 	bx	lr

0003ae58 <DisplayFX::consoleGetWidth()>:
   3ae58:	e5903bd4 	ldr	r3, [r0, #3028]	; 0xbd4
   3ae5c:	e0833103 	add	r3, r3, r3, lsl #2
   3ae60:	e0633203 	rsb	r3, r3, r3, lsl #4
   3ae64:	e0803183 	add	r3, r0, r3, lsl #3
   3ae68:	e5931018 	ldr	r1, [r3, #24]
   3ae6c:	e593000c 	ldr	r0, [r3, #12]
   3ae70:	e3510000 	cmp	r1, #0
   3ae74:	0a000002 	beq	3ae84 <DisplayFX::consoleGetWidth()+0x2c>
   3ae78:	e92d4010 	push	{r4, lr}
   3ae7c:	eb0003a1 	bl	3bd08 <__udivsi3>
   3ae80:	e8bd8010 	pop	{r4, pc}
   3ae84:	e1a00001 	mov	r0, r1
   3ae88:	e12fff1e 	bx	lr

0003ae8c <DisplayFX::consoleSetWindow(unsigned long)>:
   3ae8c:	e3510004 	cmp	r1, #4
   3ae90:	95801bd4 	strls	r1, [r0, #3028]	; 0xbd4
   3ae94:	e12fff1e 	bx	lr

0003ae98 <DisplayFX::cursorCheck()>:
   3ae98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3ae9c:	e5906bd4 	ldr	r6, [r0, #3028]	; 0xbd4
   3aea0:	e1a05000 	mov	r5, r0
   3aea4:	e0864106 	add	r4, r6, r6, lsl #2
   3aea8:	e0644204 	rsb	r4, r4, r4, lsl #4
   3aeac:	e0804184 	add	r4, r0, r4, lsl #3
   3aeb0:	e5941018 	ldr	r1, [r4, #24]
   3aeb4:	e1a07106 	lsl	r7, r6, #2
   3aeb8:	e3510000 	cmp	r1, #0
   3aebc:	0a00001b 	beq	3af30 <DisplayFX::cursorCheck()+0x98>
   3aec0:	e594000c 	ldr	r0, [r4, #12]
   3aec4:	eb00038f 	bl	3bd08 <__udivsi3>
   3aec8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3aecc:	e1530000 	cmp	r3, r0
   3aed0:	2a000016 	bcs	3af30 <DisplayFX::cursorCheck()+0x98>
   3aed4:	e594101c 	ldr	r1, [r4, #28]
   3aed8:	e0873006 	add	r3, r7, r6
   3aedc:	e0633203 	rsb	r3, r3, r3, lsl #4
   3aee0:	e0853183 	add	r3, r5, r3, lsl #3
   3aee4:	e3510000 	cmp	r1, #0
   3aee8:	e593804c 	ldr	r8, [r3, #76]	; 0x4c
   3aeec:	0a000003 	beq	3af00 <DisplayFX::cursorCheck()+0x68>
   3aef0:	e5940014 	ldr	r0, [r4, #20]
   3aef4:	eb000383 	bl	3bd08 <__udivsi3>
   3aef8:	e1580000 	cmp	r8, r0
   3aefc:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
   3af00:	e0877006 	add	r7, r7, r6
   3af04:	e0677207 	rsb	r7, r7, r7, lsl #4
   3af08:	e0857187 	add	r7, r5, r7, lsl #3
   3af0c:	e2488001 	sub	r8, r8, #1
   3af10:	e3560004 	cmp	r6, #4
   3af14:	e587804c 	str	r8, [r7, #76]	; 0x4c
   3af18:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   3af1c:	e1a01006 	mov	r1, r6
   3af20:	e1a00005 	mov	r0, r5
   3af24:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3af28:	e3a02001 	mov	r2, #1
   3af2c:	eafffd97 	b	3a590 <DisplayFX::windowScroll(unsigned long, long) [clone .part.0]>
   3af30:	e3a01000 	mov	r1, #0
   3af34:	e0873006 	add	r3, r7, r6
   3af38:	e0633203 	rsb	r3, r3, r3, lsl #4
   3af3c:	e0853183 	add	r3, r5, r3, lsl #3
   3af40:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
   3af44:	e5831050 	str	r1, [r3, #80]	; 0x50
   3af48:	e2822001 	add	r2, r2, #1
   3af4c:	e583204c 	str	r2, [r3, #76]	; 0x4c
   3af50:	eaffffdf 	b	3aed4 <DisplayFX::cursorCheck()+0x3c>

0003af54 <DisplayFX::consolePut(int)>:
   3af54:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3af58:	e2413008 	sub	r3, r1, #8
   3af5c:	e1a04000 	mov	r4, r0
   3af60:	e24dd00c 	sub	sp, sp, #12
   3af64:	e3530005 	cmp	r3, #5
   3af68:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   3af6c:	ea00000d 	b	3afa8 <DisplayFX::consolePut(int)+0x54>
   3af70:	0003aff8 	.word	0x0003aff8
   3af74:	0003b034 	.word	0x0003b034
   3af78:	0003b09c 	.word	0x0003b09c
   3af7c:	0003afa8 	.word	0x0003afa8
   3af80:	0003afa8 	.word	0x0003afa8
   3af84:	0003af88 	.word	0x0003af88
   3af88:	e3a03000 	mov	r3, #0
   3af8c:	e5900bd4 	ldr	r0, [r0, #3028]	; 0xbd4
   3af90:	e0800100 	add	r0, r0, r0, lsl #2
   3af94:	e0600200 	rsb	r0, r0, r0, lsl #4
   3af98:	e0844180 	add	r4, r4, r0, lsl #3
   3af9c:	e5843050 	str	r3, [r4, #80]	; 0x50
   3afa0:	e28dd00c 	add	sp, sp, #12
   3afa4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3afa8:	e1a0c001 	mov	ip, r1
   3afac:	e5901bd4 	ldr	r1, [r0, #3028]	; 0xbd4
   3afb0:	e0812101 	add	r2, r1, r1, lsl #2
   3afb4:	e0622202 	rsb	r2, r2, r2, lsl #4
   3afb8:	e0802182 	add	r2, r0, r2, lsl #3
   3afbc:	e592304c 	ldr	r3, [r2, #76]	; 0x4c
   3afc0:	e5922050 	ldr	r2, [r2, #80]	; 0x50
   3afc4:	e58dc000 	str	ip, [sp]
   3afc8:	ebfffe3f 	bl	3a8cc <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)>
   3afcc:	e1a00004 	mov	r0, r4
   3afd0:	e5943bd4 	ldr	r3, [r4, #3028]	; 0xbd4
   3afd4:	e0833103 	add	r3, r3, r3, lsl #2
   3afd8:	e0633203 	rsb	r3, r3, r3, lsl #4
   3afdc:	e0844183 	add	r4, r4, r3, lsl #3
   3afe0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3afe4:	e2833001 	add	r3, r3, #1
   3afe8:	e5843050 	str	r3, [r4, #80]	; 0x50
   3afec:	e28dd00c 	add	sp, sp, #12
   3aff0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   3aff4:	eaffffa7 	b	3ae98 <DisplayFX::cursorCheck()>
   3aff8:	e5901bd4 	ldr	r1, [r0, #3028]	; 0xbd4
   3affc:	e0813101 	add	r3, r1, r1, lsl #2
   3b000:	e0633203 	rsb	r3, r3, r3, lsl #4
   3b004:	e0800183 	add	r0, r0, r3, lsl #3
   3b008:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   3b00c:	e3520000 	cmp	r2, #0
   3b010:	0affffe2 	beq	3afa0 <DisplayFX::consolePut(int)+0x4c>
   3b014:	e3a0c020 	mov	ip, #32
   3b018:	e2422001 	sub	r2, r2, #1
   3b01c:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   3b020:	e5802050 	str	r2, [r0, #80]	; 0x50
   3b024:	e1a00004 	mov	r0, r4
   3b028:	e58dc000 	str	ip, [sp]
   3b02c:	ebfffe26 	bl	3a8cc <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)>
   3b030:	eaffffda 	b	3afa0 <DisplayFX::consolePut(int)+0x4c>
   3b034:	e5907bd4 	ldr	r7, [r0, #3028]	; 0xbd4
   3b038:	e0873107 	add	r3, r7, r7, lsl #2
   3b03c:	e0633203 	rsb	r3, r3, r3, lsl #4
   3b040:	e0803183 	add	r3, r0, r3, lsl #3
   3b044:	e5932050 	ldr	r2, [r3, #80]	; 0x50
   3b048:	e5931018 	ldr	r1, [r3, #24]
   3b04c:	e2822001 	add	r2, r2, #1
   3b050:	e3c26007 	bic	r6, r2, #7
   3b054:	e3510000 	cmp	r1, #0
   3b058:	e593000c 	ldr	r0, [r3, #12]
   3b05c:	e5832050 	str	r2, [r3, #80]	; 0x50
   3b060:	e2866008 	add	r6, r6, #8
   3b064:	e1a05107 	lsl	r5, r7, #2
   3b068:	0a000003 	beq	3b07c <DisplayFX::consolePut(int)+0x128>
   3b06c:	eb000325 	bl	3bd08 <__udivsi3>
   3b070:	e2400001 	sub	r0, r0, #1
   3b074:	e1560000 	cmp	r6, r0
   3b078:	21a06000 	movcs	r6, r0
   3b07c:	e1a00004 	mov	r0, r4
   3b080:	e0853007 	add	r3, r5, r7
   3b084:	e0633203 	rsb	r3, r3, r3, lsl #4
   3b088:	e0843183 	add	r3, r4, r3, lsl #3
   3b08c:	e5836050 	str	r6, [r3, #80]	; 0x50
   3b090:	e28dd00c 	add	sp, sp, #12
   3b094:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   3b098:	eaffff7e 	b	3ae98 <DisplayFX::cursorCheck()>
   3b09c:	e3a02000 	mov	r2, #0
   3b0a0:	e5903bd4 	ldr	r3, [r0, #3028]	; 0xbd4
   3b0a4:	e0833103 	add	r3, r3, r3, lsl #2
   3b0a8:	e0633203 	rsb	r3, r3, r3, lsl #4
   3b0ac:	e0804183 	add	r4, r0, r3, lsl #3
   3b0b0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   3b0b4:	e5842050 	str	r2, [r4, #80]	; 0x50
   3b0b8:	e2833001 	add	r3, r3, #1
   3b0bc:	e584304c 	str	r3, [r4, #76]	; 0x4c
   3b0c0:	e28dd00c 	add	sp, sp, #12
   3b0c4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   3b0c8:	eaffff72 	b	3ae98 <DisplayFX::cursorCheck()>

0003b0cc <DisplayFX::consolePut(char const*)>:
   3b0cc:	e92d4070 	push	{r4, r5, r6, lr}
   3b0d0:	e1a04001 	mov	r4, r1
   3b0d4:	e1d110d0 	ldrsb	r1, [r1]
   3b0d8:	e3510000 	cmp	r1, #0
   3b0dc:	08bd8070 	popeq	{r4, r5, r6, pc}
   3b0e0:	e1a05000 	mov	r5, r0
   3b0e4:	e1a00005 	mov	r0, r5
   3b0e8:	ebffff99 	bl	3af54 <DisplayFX::consolePut(int)>
   3b0ec:	e1f410d1 	ldrsb	r1, [r4, #1]!
   3b0f0:	e3510000 	cmp	r1, #0
   3b0f4:	1afffffa 	bne	3b0e4 <DisplayFX::consolePut(char const*)+0x18>
   3b0f8:	e8bd8070 	pop	{r4, r5, r6, pc}

0003b0fc <DisplayFX::consolePut(char const*, unsigned int)>:
   3b0fc:	e3520000 	cmp	r2, #0
   3b100:	012fff1e 	bxeq	lr
   3b104:	e92d4070 	push	{r4, r5, r6, lr}
   3b108:	e1a06000 	mov	r6, r0
   3b10c:	e0812002 	add	r2, r1, r2
   3b110:	e2425001 	sub	r5, r2, #1
   3b114:	e2414001 	sub	r4, r1, #1
   3b118:	e1f410d1 	ldrsb	r1, [r4, #1]!
   3b11c:	e1a00006 	mov	r0, r6
   3b120:	ebffff8b 	bl	3af54 <DisplayFX::consolePut(int)>
   3b124:	e1540005 	cmp	r4, r5
   3b128:	1afffffa 	bne	3b118 <DisplayFX::consolePut(char const*, unsigned int)+0x1c>
   3b12c:	e8bd8070 	pop	{r4, r5, r6, pc}

0003b130 <DisplayFX::windowScroll(unsigned long, long)>:
   3b130:	e16f3f12 	clz	r3, r2
   3b134:	e1a032a3 	lsr	r3, r3, #5
   3b138:	e3510004 	cmp	r1, #4
   3b13c:	83833001 	orrhi	r3, r3, #1
   3b140:	e3530000 	cmp	r3, #0
   3b144:	112fff1e 	bxne	lr
   3b148:	eafffd10 	b	3a590 <DisplayFX::windowScroll(unsigned long, long) [clone .part.0]>

0003b14c <DisplayFX::drawHorizontal(unsigned long, unsigned long, unsigned long, unsigned long)>:
   3b14c:	e590cbc4 	ldr	ip, [r0, #3012]	; 0xbc4
   3b150:	e5900bcc 	ldr	r0, [r0, #3020]	; 0xbcc
   3b154:	e022129c 	mla	r2, ip, r2, r1
   3b158:	e3530000 	cmp	r3, #0
   3b15c:	e0802002 	add	r2, r0, r2
   3b160:	012fff1e 	bxeq	lr
   3b164:	e59d1000 	ldr	r1, [sp]
   3b168:	e0823003 	add	r3, r2, r3
   3b16c:	e6ef1071 	uxtb	r1, r1
   3b170:	e4c21001 	strb	r1, [r2], #1
   3b174:	e1520003 	cmp	r2, r3
   3b178:	1afffffc 	bne	3b170 <DisplayFX::drawHorizontal(unsigned long, unsigned long, unsigned long, unsigned long)+0x24>
   3b17c:	e12fff1e 	bx	lr

0003b180 <DisplayFX::drawVertical(unsigned long, unsigned long, unsigned long, unsigned long)>:
   3b180:	e590cbc4 	ldr	ip, [r0, #3012]	; 0xbc4
   3b184:	e3530000 	cmp	r3, #0
   3b188:	e022129c 	mla	r2, ip, r2, r1
   3b18c:	e590cbcc 	ldr	ip, [r0, #3020]	; 0xbcc
   3b190:	e08c2002 	add	r2, ip, r2
   3b194:	012fff1e 	bxeq	lr
   3b198:	e3a01000 	mov	r1, #0
   3b19c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3b1a0:	e59dc004 	ldr	ip, [sp, #4]
   3b1a4:	e6efe07c 	uxtb	lr, ip
   3b1a8:	e5c2e000 	strb	lr, [r2]
   3b1ac:	e590cbc4 	ldr	ip, [r0, #3012]	; 0xbc4
   3b1b0:	e2811001 	add	r1, r1, #1
   3b1b4:	e1530001 	cmp	r3, r1
   3b1b8:	e082200c 	add	r2, r2, ip
   3b1bc:	1afffff9 	bne	3b1a8 <DisplayFX::drawVertical(unsigned long, unsigned long, unsigned long, unsigned long)+0x28>
   3b1c0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003b1c4 <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)>:
   3b1c4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b1c8:	e3510004 	cmp	r1, #4
   3b1cc:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   3b1d0:	88bd8ff8 	pophi	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b1d4:	e0811101 	add	r1, r1, r1, lsl #2
   3b1d8:	e0611201 	rsb	r1, r1, r1, lsl #4
   3b1dc:	e0806181 	add	r6, r0, r1, lsl #3
   3b1e0:	e596b018 	ldr	fp, [r6, #24]
   3b1e4:	e1a05000 	mov	r5, r0
   3b1e8:	e35b0000 	cmp	fp, #0
   3b1ec:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b1f0:	e1a0100b 	mov	r1, fp
   3b1f4:	e596000c 	ldr	r0, [r6, #12]
   3b1f8:	e1a08002 	mov	r8, r2
   3b1fc:	e1a09003 	mov	r9, r3
   3b200:	eb0002c0 	bl	3bd08 <__udivsi3>
   3b204:	e1500008 	cmp	r0, r8
   3b208:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b20c:	e596a01c 	ldr	sl, [r6, #28]
   3b210:	e35a0000 	cmp	sl, #0
   3b214:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b218:	e1a0100a 	mov	r1, sl
   3b21c:	e5960014 	ldr	r0, [r6, #20]
   3b220:	eb0002b8 	bl	3bd08 <__udivsi3>
   3b224:	e1590000 	cmp	r9, r0
   3b228:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b22c:	e5d63004 	ldrb	r3, [r6, #4]
   3b230:	e3530000 	cmp	r3, #0
   3b234:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b238:	e1a0c006 	mov	ip, r6
   3b23c:	e3a07000 	mov	r7, #0
   3b240:	e5961024 	ldr	r1, [r6, #36]	; 0x24
   3b244:	e5963020 	ldr	r3, [r6, #32]
   3b248:	e0020a91 	mul	r2, r1, sl
   3b24c:	e0030b93 	mul	r3, r3, fp
   3b250:	e5960008 	ldr	r0, [r6, #8]
   3b254:	e596e010 	ldr	lr, [r6, #16]
   3b258:	e0280398 	mla	r8, r8, r3, r0
   3b25c:	e022e299 	mla	r2, r9, r2, lr
   3b260:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3b264:	e5950bcc 	ldr	r0, [r5, #3020]	; 0xbcc
   3b268:	e0228293 	mla	r2, r3, r2, r8
   3b26c:	e0800002 	add	r0, r0, r2
   3b270:	e3510000 	cmp	r1, #0
   3b274:	0a000019 	beq	3b2e0 <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0x11c>
   3b278:	e3a06000 	mov	r6, #0
   3b27c:	e59c2018 	ldr	r2, [ip, #24]
   3b280:	e3520000 	cmp	r2, #0
   3b284:	0a000010 	beq	3b2cc <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0x108>
   3b288:	e1a02000 	mov	r2, r0
   3b28c:	e3a0e000 	mov	lr, #0
   3b290:	e59c3020 	ldr	r3, [ip, #32]
   3b294:	e3530000 	cmp	r3, #0
   3b298:	0a000006 	beq	3b2b8 <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xf4>
   3b29c:	e3a03000 	mov	r3, #0
   3b2a0:	e4d21001 	ldrb	r1, [r2], #1
   3b2a4:	e2833001 	add	r3, r3, #1
   3b2a8:	e4c41001 	strb	r1, [r4], #1
   3b2ac:	e59c1020 	ldr	r1, [ip, #32]
   3b2b0:	e1510003 	cmp	r1, r3
   3b2b4:	8afffff9 	bhi	3b2a0 <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xdc>
   3b2b8:	e59c3018 	ldr	r3, [ip, #24]
   3b2bc:	e28ee001 	add	lr, lr, #1
   3b2c0:	e153000e 	cmp	r3, lr
   3b2c4:	8afffff1 	bhi	3b290 <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xcc>
   3b2c8:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3b2cc:	e59c2024 	ldr	r2, [ip, #36]	; 0x24
   3b2d0:	e2866001 	add	r6, r6, #1
   3b2d4:	e1520006 	cmp	r2, r6
   3b2d8:	e0800003 	add	r0, r0, r3
   3b2dc:	8affffe6 	bhi	3b27c <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xb8>
   3b2e0:	e59c201c 	ldr	r2, [ip, #28]
   3b2e4:	e2877001 	add	r7, r7, #1
   3b2e8:	e1520007 	cmp	r2, r7
   3b2ec:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b2f0:	e59c1024 	ldr	r1, [ip, #36]	; 0x24
   3b2f4:	eaffffdd 	b	3b270 <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xac>

0003b2f8 <DisplayFX::cursorRestore()>:
   3b2f8:	e5901bd4 	ldr	r1, [r0, #3028]	; 0xbd4
   3b2fc:	e0813101 	add	r3, r1, r1, lsl #2
   3b300:	e0633203 	rsb	r3, r3, r3, lsl #4
   3b304:	e0802183 	add	r2, r0, r3, lsl #3
   3b308:	e5d2c004 	ldrb	ip, [r2, #4]
   3b30c:	e35c0000 	cmp	ip, #0
   3b310:	012fff1e 	bxeq	lr
   3b314:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3b318:	e1a03183 	lsl	r3, r3, #3
   3b31c:	e283c055 	add	ip, r3, #85	; 0x55
   3b320:	e24dd00c 	sub	sp, sp, #12
   3b324:	e080c00c 	add	ip, r0, ip
   3b328:	e592304c 	ldr	r3, [r2, #76]	; 0x4c
   3b32c:	e5922050 	ldr	r2, [r2, #80]	; 0x50
   3b330:	e58dc000 	str	ip, [sp]
   3b334:	ebffffa2 	bl	3b1c4 <DisplayFX::screenReadCell(unsigned long, unsigned long, unsigned long, unsigned char*)>
   3b338:	e28dd00c 	add	sp, sp, #12
   3b33c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003b340 <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)>:
   3b340:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b344:	e3510004 	cmp	r1, #4
   3b348:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   3b34c:	88bd8ff8 	pophi	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b350:	e0811101 	add	r1, r1, r1, lsl #2
   3b354:	e0611201 	rsb	r1, r1, r1, lsl #4
   3b358:	e0806181 	add	r6, r0, r1, lsl #3
   3b35c:	e596b018 	ldr	fp, [r6, #24]
   3b360:	e1a05000 	mov	r5, r0
   3b364:	e35b0000 	cmp	fp, #0
   3b368:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b36c:	e1a0100b 	mov	r1, fp
   3b370:	e596000c 	ldr	r0, [r6, #12]
   3b374:	e1a08002 	mov	r8, r2
   3b378:	e1a09003 	mov	r9, r3
   3b37c:	eb000261 	bl	3bd08 <__udivsi3>
   3b380:	e1500008 	cmp	r0, r8
   3b384:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b388:	e596a01c 	ldr	sl, [r6, #28]
   3b38c:	e35a0000 	cmp	sl, #0
   3b390:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b394:	e1a0100a 	mov	r1, sl
   3b398:	e5960014 	ldr	r0, [r6, #20]
   3b39c:	eb000259 	bl	3bd08 <__udivsi3>
   3b3a0:	e1590000 	cmp	r9, r0
   3b3a4:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b3a8:	e5d63004 	ldrb	r3, [r6, #4]
   3b3ac:	e3530000 	cmp	r3, #0
   3b3b0:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b3b4:	e1a0c006 	mov	ip, r6
   3b3b8:	e3a07000 	mov	r7, #0
   3b3bc:	e5961024 	ldr	r1, [r6, #36]	; 0x24
   3b3c0:	e5963020 	ldr	r3, [r6, #32]
   3b3c4:	e0020a91 	mul	r2, r1, sl
   3b3c8:	e0030b93 	mul	r3, r3, fp
   3b3cc:	e5960008 	ldr	r0, [r6, #8]
   3b3d0:	e596e010 	ldr	lr, [r6, #16]
   3b3d4:	e0280398 	mla	r8, r8, r3, r0
   3b3d8:	e022e299 	mla	r2, r9, r2, lr
   3b3dc:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3b3e0:	e5950bcc 	ldr	r0, [r5, #3020]	; 0xbcc
   3b3e4:	e0228293 	mla	r2, r3, r2, r8
   3b3e8:	e0800002 	add	r0, r0, r2
   3b3ec:	e3510000 	cmp	r1, #0
   3b3f0:	0a000019 	beq	3b45c <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0x11c>
   3b3f4:	e3a06000 	mov	r6, #0
   3b3f8:	e59c2018 	ldr	r2, [ip, #24]
   3b3fc:	e3520000 	cmp	r2, #0
   3b400:	0a000010 	beq	3b448 <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0x108>
   3b404:	e1a02000 	mov	r2, r0
   3b408:	e3a0e000 	mov	lr, #0
   3b40c:	e59c3020 	ldr	r3, [ip, #32]
   3b410:	e3530000 	cmp	r3, #0
   3b414:	0a000006 	beq	3b434 <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xf4>
   3b418:	e3a03000 	mov	r3, #0
   3b41c:	e4d41001 	ldrb	r1, [r4], #1
   3b420:	e2833001 	add	r3, r3, #1
   3b424:	e4c21001 	strb	r1, [r2], #1
   3b428:	e59c1020 	ldr	r1, [ip, #32]
   3b42c:	e1510003 	cmp	r1, r3
   3b430:	8afffff9 	bhi	3b41c <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xdc>
   3b434:	e59c3018 	ldr	r3, [ip, #24]
   3b438:	e28ee001 	add	lr, lr, #1
   3b43c:	e153000e 	cmp	r3, lr
   3b440:	8afffff1 	bhi	3b40c <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xcc>
   3b444:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3b448:	e59c2024 	ldr	r2, [ip, #36]	; 0x24
   3b44c:	e2866001 	add	r6, r6, #1
   3b450:	e1520006 	cmp	r2, r6
   3b454:	e0800003 	add	r0, r0, r3
   3b458:	8affffe6 	bhi	3b3f8 <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xb8>
   3b45c:	e59c201c 	ldr	r2, [ip, #28]
   3b460:	e2877001 	add	r7, r7, #1
   3b464:	e1520007 	cmp	r2, r7
   3b468:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b46c:	e59c1024 	ldr	r1, [ip, #36]	; 0x24
   3b470:	eaffffdd 	b	3b3ec <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)+0xac>

0003b474 <DisplayFX::cursorRender()>:
   3b474:	e5901bd4 	ldr	r1, [r0, #3028]	; 0xbd4
   3b478:	e0813101 	add	r3, r1, r1, lsl #2
   3b47c:	e0633203 	rsb	r3, r3, r3, lsl #4
   3b480:	e0802183 	add	r2, r0, r3, lsl #3
   3b484:	e5d2c004 	ldrb	ip, [r2, #4]
   3b488:	e35c0000 	cmp	ip, #0
   3b48c:	012fff1e 	bxeq	lr
   3b490:	e92d4010 	push	{r4, lr}
   3b494:	e1a04000 	mov	r4, r0
   3b498:	e1a03183 	lsl	r3, r3, #3
   3b49c:	e283c055 	add	ip, r3, #85	; 0x55
   3b4a0:	e24dd008 	sub	sp, sp, #8
   3b4a4:	e080c00c 	add	ip, r0, ip
   3b4a8:	e592304c 	ldr	r3, [r2, #76]	; 0x4c
   3b4ac:	e5922050 	ldr	r2, [r2, #80]	; 0x50
   3b4b0:	e58dc000 	str	ip, [sp]
   3b4b4:	ebffffa1 	bl	3b340 <DisplayFX::screenWriteCell(unsigned long, unsigned long, unsigned long, unsigned char*)>
   3b4b8:	e3a0c05f 	mov	ip, #95	; 0x5f
   3b4bc:	e5941bd4 	ldr	r1, [r4, #3028]	; 0xbd4
   3b4c0:	e1a00004 	mov	r0, r4
   3b4c4:	e0813101 	add	r3, r1, r1, lsl #2
   3b4c8:	e0633203 	rsb	r3, r3, r3, lsl #4
   3b4cc:	e0844183 	add	r4, r4, r3, lsl #3
   3b4d0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   3b4d4:	e5942050 	ldr	r2, [r4, #80]	; 0x50
   3b4d8:	e58dc000 	str	ip, [sp]
   3b4dc:	ebfffcfa 	bl	3a8cc <DisplayFX::windowPut(unsigned long, unsigned long, unsigned long, unsigned long)>
   3b4e0:	e28dd008 	add	sp, sp, #8
   3b4e4:	e8bd8010 	pop	{r4, pc}

0003b4e8 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)>:
   3b4e8:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3b4ec:	e3530000 	cmp	r3, #0
   3b4f0:	012fff1e 	bxeq	lr
   3b4f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b4f8:	e1a0b000 	mov	fp, r0
   3b4fc:	e5900048 	ldr	r0, [r0, #72]	; 0x48
   3b500:	e1a09001 	mov	r9, r1
   3b504:	e3500000 	cmp	r0, #0
   3b508:	e1a08002 	mov	r8, r2
   3b50c:	e24dd024 	sub	sp, sp, #36	; 0x24
   3b510:	0a000002 	beq	3b520 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x38>
   3b514:	e3a01004 	mov	r1, #4
   3b518:	ebffbe9a 	bl	2af88 <operator delete(void*, unsigned int)>
   3b51c:	e59b3030 	ldr	r3, [fp, #48]	; 0x30
   3b520:	e3a01000 	mov	r1, #0
   3b524:	e593000c 	ldr	r0, [r3, #12]
   3b528:	e5932014 	ldr	r2, [r3, #20]
   3b52c:	e58b1048 	str	r1, [fp, #72]	; 0x48
   3b530:	e0020092 	mul	r2, r2, r0
   3b534:	e1520001 	cmp	r2, r1
   3b538:	0a000092 	beq	3b788 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x2a0>
   3b53c:	e5930010 	ldr	r0, [r3, #16]
   3b540:	e0802002 	add	r2, r0, r2
   3b544:	e2422001 	sub	r2, r2, #1
   3b548:	e2400001 	sub	r0, r0, #1
   3b54c:	e5f0c001 	ldrb	ip, [r0, #1]!
   3b550:	e151000c 	cmp	r1, ip
   3b554:	31a0100c 	movcc	r1, ip
   3b558:	e1520000 	cmp	r2, r0
   3b55c:	1afffffa 	bne	3b54c <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x64>
   3b560:	e3510000 	cmp	r1, #0
   3b564:	0a000087 	beq	3b788 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x2a0>
   3b568:	e5932008 	ldr	r2, [r3, #8]
   3b56c:	e59b0020 	ldr	r0, [fp, #32]
   3b570:	e0000290 	mul	r0, r0, r2
   3b574:	e1a00180 	lsl	r0, r0, #3
   3b578:	e1a00120 	lsr	r0, r0, #2
   3b57c:	e58b0034 	str	r0, [fp, #52]	; 0x34
   3b580:	e5932004 	ldr	r2, [r3, #4]
   3b584:	e0020092 	mul	r2, r2, r0
   3b588:	e58b2038 	str	r2, [fp, #56]	; 0x38
   3b58c:	e5930014 	ldr	r0, [r3, #20]
   3b590:	e0000290 	mul	r0, r0, r2
   3b594:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   3b598:	83e00000 	mvnhi	r0, #0
   3b59c:	91a00100 	lslls	r0, r0, #2
   3b5a0:	ebffbe70 	bl	2af68 <operator new[](unsigned int)>
   3b5a4:	e59b3030 	ldr	r3, [fp, #48]	; 0x30
   3b5a8:	e59b102c 	ldr	r1, [fp, #44]	; 0x2c
   3b5ac:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
   3b5b0:	e3710001 	cmn	r1, #1
   3b5b4:	e58d3000 	str	r3, [sp]
   3b5b8:	e5933014 	ldr	r3, [r3, #20]
   3b5bc:	11a09001 	movne	r9, r1
   3b5c0:	e3720001 	cmn	r2, #1
   3b5c4:	11a08002 	movne	r8, r2
   3b5c8:	e3530000 	cmp	r3, #0
   3b5cc:	e58d0018 	str	r0, [sp, #24]
   3b5d0:	e58b0048 	str	r0, [fp, #72]	; 0x48
   3b5d4:	0a000065 	beq	3b770 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x288>
   3b5d8:	e3a02000 	mov	r2, #0
   3b5dc:	e1a0a002 	mov	sl, r2
   3b5e0:	e58d2014 	str	r2, [sp, #20]
   3b5e4:	e59d2000 	ldr	r2, [sp]
   3b5e8:	e5921010 	ldr	r1, [r2, #16]
   3b5ec:	e5922004 	ldr	r2, [r2, #4]
   3b5f0:	e58d101c 	str	r1, [sp, #28]
   3b5f4:	e59d1000 	ldr	r1, [sp]
   3b5f8:	e59d0014 	ldr	r0, [sp, #20]
   3b5fc:	e591100c 	ldr	r1, [r1, #12]
   3b600:	e59dc01c 	ldr	ip, [sp, #28]
   3b604:	e3520000 	cmp	r2, #0
   3b608:	e021c091 	mla	r1, r1, r0, ip
   3b60c:	e58d1008 	str	r1, [sp, #8]
   3b610:	0a000051 	beq	3b75c <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x274>
   3b614:	e1cb03d4 	ldrd	r0, [fp, #52]	; 0x34
   3b618:	e3a03000 	mov	r3, #0
   3b61c:	e58d300c 	str	r3, [sp, #12]
   3b620:	e59d3014 	ldr	r3, [sp, #20]
   3b624:	e59dc018 	ldr	ip, [sp, #24]
   3b628:	e0010391 	mul	r1, r1, r3
   3b62c:	e59d3000 	ldr	r3, [sp]
   3b630:	e08c1101 	add	r1, ip, r1, lsl #2
   3b634:	e58d1004 	str	r1, [sp, #4]
   3b638:	e5933000 	ldr	r3, [r3]
   3b63c:	e1a01100 	lsl	r1, r0, #2
   3b640:	e58d1010 	str	r1, [sp, #16]
   3b644:	e3a00001 	mov	r0, #1
   3b648:	e2831007 	add	r1, r3, #7
   3b64c:	e2011007 	and	r1, r1, #7
   3b650:	e3530000 	cmp	r3, #0
   3b654:	e59dc004 	ldr	ip, [sp, #4]
   3b658:	e1a04110 	lsl	r4, r0, r1
   3b65c:	0a00002e 	beq	3b71c <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x234>
   3b660:	e3a02000 	mov	r2, #0
   3b664:	e1a07002 	mov	r7, r2
   3b668:	e59d5008 	ldr	r5, [sp, #8]
   3b66c:	e59b6020 	ldr	r6, [fp, #32]
   3b670:	e3560000 	cmp	r6, #0
   3b674:	0a000020 	beq	3b6fc <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x214>
   3b678:	e3a00000 	mov	r0, #0
   3b67c:	ea000001 	b	3b688 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x1a0>
   3b680:	e1500006 	cmp	r0, r6
   3b684:	2a00001a 	bcs	3b6f4 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x20c>
   3b688:	e3520000 	cmp	r2, #0
   3b68c:	0a000012 	beq	3b6dc <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x1f4>
   3b690:	e2623003 	rsb	r3, r2, #3
   3b694:	e1a01183 	lsl	r1, r3, #3
   3b698:	e59c3000 	ldr	r3, [ip]
   3b69c:	e2822001 	add	r2, r2, #1
   3b6a0:	e5d5e000 	ldrb	lr, [r5]
   3b6a4:	e2800001 	add	r0, r0, #1
   3b6a8:	e11e0004 	tst	lr, r4
   3b6ac:	11a0e009 	movne	lr, r9
   3b6b0:	01a0e008 	moveq	lr, r8
   3b6b4:	e183311e 	orr	r3, r3, lr, lsl r1
   3b6b8:	e3730001 	cmn	r3, #1
   3b6bc:	e58c3000 	str	r3, [ip]
   3b6c0:	03a03004 	moveq	r3, #4
   3b6c4:	058b303c 	streq	r3, [fp, #60]	; 0x3c
   3b6c8:	e3520004 	cmp	r2, #4
   3b6cc:	1affffeb 	bne	3b680 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x198>
   3b6d0:	e1500006 	cmp	r0, r6
   3b6d4:	e28cc004 	add	ip, ip, #4
   3b6d8:	2a000004 	bcs	3b6f0 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x208>
   3b6dc:	e3a02001 	mov	r2, #1
   3b6e0:	e3a01018 	mov	r1, #24
   3b6e4:	e3a03000 	mov	r3, #0
   3b6e8:	e58ca000 	str	sl, [ip]
   3b6ec:	eaffffeb 	b	3b6a0 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x1b8>
   3b6f0:	e3a02000 	mov	r2, #0
   3b6f4:	e59d3000 	ldr	r3, [sp]
   3b6f8:	e5933000 	ldr	r3, [r3]
   3b6fc:	e1b040a4 	lsrs	r4, r4, #1
   3b700:	e2877001 	add	r7, r7, #1
   3b704:	03a04080 	moveq	r4, #128	; 0x80
   3b708:	02855001 	addeq	r5, r5, #1
   3b70c:	e1530007 	cmp	r3, r7
   3b710:	8affffd6 	bhi	3b670 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x188>
   3b714:	e59d2000 	ldr	r2, [sp]
   3b718:	e5922004 	ldr	r2, [r2, #4]
   3b71c:	e59d100c 	ldr	r1, [sp, #12]
   3b720:	e59dc010 	ldr	ip, [sp, #16]
   3b724:	e2810001 	add	r0, r1, #1
   3b728:	e58d000c 	str	r0, [sp, #12]
   3b72c:	e1520000 	cmp	r2, r0
   3b730:	e59d0004 	ldr	r0, [sp, #4]
   3b734:	e59d1000 	ldr	r1, [sp]
   3b738:	e080000c 	add	r0, r0, ip
   3b73c:	e5911008 	ldr	r1, [r1, #8]
   3b740:	e58d0004 	str	r0, [sp, #4]
   3b744:	e59d0008 	ldr	r0, [sp, #8]
   3b748:	e0801001 	add	r1, r0, r1
   3b74c:	e58d1008 	str	r1, [sp, #8]
   3b750:	8affffbb 	bhi	3b644 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x15c>
   3b754:	e59d3000 	ldr	r3, [sp]
   3b758:	e5933014 	ldr	r3, [r3, #20]
   3b75c:	e59d1014 	ldr	r1, [sp, #20]
   3b760:	e2811001 	add	r1, r1, #1
   3b764:	e1530001 	cmp	r3, r1
   3b768:	e58d1014 	str	r1, [sp, #20]
   3b76c:	8affffa0 	bhi	3b5f4 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x10c>
   3b770:	e59b303c 	ldr	r3, [fp, #60]	; 0x3c
   3b774:	e3530000 	cmp	r3, #0
   3b778:	03a03002 	moveq	r3, #2
   3b77c:	058b303c 	streq	r3, [fp, #60]	; 0x3c
   3b780:	e28dd024 	add	sp, sp, #36	; 0x24
   3b784:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b788:	e3a02001 	mov	r2, #1
   3b78c:	e58b203c 	str	r2, [fp, #60]	; 0x3c
   3b790:	eaffff74 	b	3b568 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)+0x80>

0003b794 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]>:
   3b794:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b798:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
   3b79c:	e292e001 	adds	lr, r2, #1
   3b7a0:	13a0e001 	movne	lr, #1
   3b7a4:	e3780001 	cmn	r8, #1
   3b7a8:	13a0e000 	movne	lr, #0
   3b7ac:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
   3b7b0:	e59f428c 	ldr	r4, [pc, #652]	; 3ba44 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x2b0>
   3b7b4:	e35c0000 	cmp	ip, #0
   3b7b8:	01a0c004 	moveq	ip, r4
   3b7bc:	e35e0000 	cmp	lr, #0
   3b7c0:	e1a05000 	mov	r5, r0
   3b7c4:	e1a07001 	mov	r7, r1
   3b7c8:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
   3b7cc:	e59de030 	ldr	lr, [sp, #48]	; 0x30
   3b7d0:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
   3b7d4:	e59da038 	ldr	sl, [sp, #56]	; 0x38
   3b7d8:	e59d903c 	ldr	r9, [sp, #60]	; 0x3c
   3b7dc:	e59d604c 	ldr	r6, [sp, #76]	; 0x4c
   3b7e0:	e59d4050 	ldr	r4, [sp, #80]	; 0x50
   3b7e4:	0a00008b 	beq	3ba18 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x284>
   3b7e8:	e5958bbc 	ldr	r8, [r5, #3004]	; 0xbbc
   3b7ec:	e0811101 	add	r1, r1, r1, lsl #2
   3b7f0:	e0488086 	sub	r8, r8, r6, lsl #1
   3b7f4:	e0611201 	rsb	r1, r1, r1, lsl #4
   3b7f8:	e0488002 	sub	r8, r8, r2
   3b7fc:	e0851181 	add	r1, r5, r1, lsl #3
   3b800:	e581800c 	str	r8, [r1, #12]
   3b804:	e1a08107 	lsl	r8, r7, #2
   3b808:	e37b0001 	cmn	fp, #1
   3b80c:	0595bbc0 	ldreq	fp, [r5, #3008]	; 0xbc0
   3b810:	100b0b99 	mulne	fp, r9, fp
   3b814:	e0881007 	add	r1, r8, r7
   3b818:	004bb003 	subeq	fp, fp, r3
   3b81c:	e0611201 	rsb	r1, r1, r1, lsl #4
   3b820:	e0851181 	add	r1, r5, r1, lsl #3
   3b824:	004bb086 	subeq	fp, fp, r6, lsl #1
   3b828:	e581b014 	str	fp, [r1, #20]
   3b82c:	e3720001 	cmn	r2, #1
   3b830:	05952bbc 	ldreq	r2, [r5, #3004]	; 0xbbc
   3b834:	0591100c 	ldreq	r1, [r1, #12]
   3b838:	1022629a 	mlane	r2, sl, r2, r6
   3b83c:	e0236399 	mla	r3, r9, r3, r6
   3b840:	00422001 	subeq	r2, r2, r1
   3b844:	e0881007 	add	r1, r8, r7
   3b848:	e0611201 	rsb	r1, r1, r1, lsl #4
   3b84c:	01a020a2 	lsreq	r2, r2, #1
   3b850:	e0851181 	add	r1, r5, r1, lsl #3
   3b854:	e5813010 	str	r3, [r1, #16]
   3b858:	e5812008 	str	r2, [r1, #8]
   3b85c:	e37e0001 	cmn	lr, #1
   3b860:	e0883007 	add	r3, r8, r7
   3b864:	059ce000 	ldreq	lr, [ip]
   3b868:	e0633203 	rsb	r3, r3, r3, lsl #4
   3b86c:	e088b007 	add	fp, r8, r7
   3b870:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
   3b874:	e0853183 	add	r3, r5, r3, lsl #3
   3b878:	e06bb20b 	rsb	fp, fp, fp, lsl #4
   3b87c:	e583e018 	str	lr, [r3, #24]
   3b880:	e085b18b 	add	fp, r5, fp, lsl #3
   3b884:	e3700001 	cmn	r0, #1
   3b888:	059c0004 	ldreq	r0, [ip, #4]
   3b88c:	e58b202c 	str	r2, [fp, #44]	; 0x2c
   3b890:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   3b894:	e2853ebd 	add	r3, r5, #3024	; 0xbd0
   3b898:	e58b001c 	str	r0, [fp, #28]
   3b89c:	e58b2028 	str	r2, [fp, #40]	; 0x28
   3b8a0:	e1a0000b 	mov	r0, fp
   3b8a4:	e1d320d0 	ldrsb	r2, [r3]
   3b8a8:	e1d310d1 	ldrsb	r1, [r3, #1]
   3b8ac:	e58ba020 	str	sl, [fp, #32]
   3b8b0:	e58b9024 	str	r9, [fp, #36]	; 0x24
   3b8b4:	e58bc030 	str	ip, [fp, #48]	; 0x30
   3b8b8:	ebffff0a 	bl	3b4e8 <DisplayWindow::genFontAtCurRes(DISPLAY_FX_COLOUR, DISPLAY_FX_COLOUR)>
   3b8bc:	e3740001 	cmn	r4, #1
   3b8c0:	13560000 	cmpne	r6, #0
   3b8c4:	da00004d 	ble	3ba00 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x26c>
   3b8c8:	e3a00000 	mov	r0, #0
   3b8cc:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3b8d0:	e6ef4074 	uxtb	r4, r4
   3b8d4:	e1a0e086 	lsl	lr, r6, #1
   3b8d8:	e59b2010 	ldr	r2, [fp, #16]
   3b8dc:	e59ba008 	ldr	sl, [fp, #8]
   3b8e0:	e0422006 	sub	r2, r2, r6
   3b8e4:	e082c000 	add	ip, r2, r0
   3b8e8:	e04aa006 	sub	sl, sl, r6
   3b8ec:	e02cac93 	mla	ip, r3, ip, sl
   3b8f0:	e59b900c 	ldr	r9, [fp, #12]
   3b8f4:	e5951bcc 	ldr	r1, [r5, #3020]	; 0xbcc
   3b8f8:	e09e9009 	adds	r9, lr, r9
   3b8fc:	e081c00c 	add	ip, r1, ip
   3b900:	0a00001b 	beq	3b974 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x1e0>
   3b904:	e08c3009 	add	r3, ip, r9
   3b908:	e4cc4001 	strb	r4, [ip], #1
   3b90c:	e15c0003 	cmp	ip, r3
   3b910:	1afffffc 	bne	3b908 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x174>
   3b914:	e59b9010 	ldr	r9, [fp, #16]
   3b918:	e59b2014 	ldr	r2, [fp, #20]
   3b91c:	e59ba008 	ldr	sl, [fp, #8]
   3b920:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3b924:	e0892002 	add	r2, r9, r2
   3b928:	e0822000 	add	r2, r2, r0
   3b92c:	e04aa006 	sub	sl, sl, r6
   3b930:	e022a293 	mla	r2, r3, r2, sl
   3b934:	e59bc00c 	ldr	ip, [fp, #12]
   3b938:	e5951bcc 	ldr	r1, [r5, #3020]	; 0xbcc
   3b93c:	e09ec00c 	adds	ip, lr, ip
   3b940:	e0812002 	add	r2, r1, r2
   3b944:	00492006 	subeq	r2, r9, r6
   3b948:	0a000009 	beq	3b974 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x1e0>
   3b94c:	e082300c 	add	r3, r2, ip
   3b950:	e4c24001 	strb	r4, [r2], #1
   3b954:	e1520003 	cmp	r2, r3
   3b958:	1afffffc 	bne	3b950 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x1bc>
   3b95c:	e59b2010 	ldr	r2, [fp, #16]
   3b960:	e59ba008 	ldr	sl, [fp, #8]
   3b964:	e5951bcc 	ldr	r1, [r5, #3020]	; 0xbcc
   3b968:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3b96c:	e0422006 	sub	r2, r2, r6
   3b970:	e04aa006 	sub	sl, sl, r6
   3b974:	e080a00a 	add	sl, r0, sl
   3b978:	e022a293 	mla	r2, r3, r2, sl
   3b97c:	e59bc014 	ldr	ip, [fp, #20]
   3b980:	e0812002 	add	r2, r1, r2
   3b984:	e09ec00c 	adds	ip, lr, ip
   3b988:	13a01000 	movne	r1, #0
   3b98c:	0a000018 	beq	3b9f4 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x260>
   3b990:	e5c24000 	strb	r4, [r2]
   3b994:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3b998:	e2811001 	add	r1, r1, #1
   3b99c:	e15c0001 	cmp	ip, r1
   3b9a0:	e0822003 	add	r2, r2, r3
   3b9a4:	1afffff9 	bne	3b990 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x1fc>
   3b9a8:	e59bc00c 	ldr	ip, [fp, #12]
   3b9ac:	e59b1008 	ldr	r1, [fp, #8]
   3b9b0:	e59b2010 	ldr	r2, [fp, #16]
   3b9b4:	e081100c 	add	r1, r1, ip
   3b9b8:	e0422006 	sub	r2, r2, r6
   3b9bc:	e0811000 	add	r1, r1, r0
   3b9c0:	e0211293 	mla	r1, r3, r2, r1
   3b9c4:	e59bc014 	ldr	ip, [fp, #20]
   3b9c8:	e5952bcc 	ldr	r2, [r5, #3020]	; 0xbcc
   3b9cc:	e09ec00c 	adds	ip, lr, ip
   3b9d0:	e0822001 	add	r2, r2, r1
   3b9d4:	0a000006 	beq	3b9f4 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x260>
   3b9d8:	e3a01000 	mov	r1, #0
   3b9dc:	e5c24000 	strb	r4, [r2]
   3b9e0:	e5953bc4 	ldr	r3, [r5, #3012]	; 0xbc4
   3b9e4:	e2811001 	add	r1, r1, #1
   3b9e8:	e15c0001 	cmp	ip, r1
   3b9ec:	e0822003 	add	r2, r2, r3
   3b9f0:	1afffff9 	bne	3b9dc <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x248>
   3b9f4:	e2800001 	add	r0, r0, #1
   3b9f8:	e1560000 	cmp	r6, r0
   3b9fc:	caffffb5 	bgt	3b8d8 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x144>
   3ba00:	e3a03001 	mov	r3, #1
   3ba04:	e0887007 	add	r7, r8, r7
   3ba08:	e0677207 	rsb	r7, r7, r7, lsl #4
   3ba0c:	e0855187 	add	r5, r5, r7, lsl #3
   3ba10:	e5c53004 	strb	r3, [r5, #4]
   3ba14:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ba18:	e3780001 	cmn	r8, #1
   3ba1c:	1008089a 	mulne	r8, sl, r8
   3ba20:	00811101 	addeq	r1, r1, r1, lsl #2
   3ba24:	10871107 	addne	r1, r7, r7, lsl #2
   3ba28:	05958bbc 	ldreq	r8, [r5, #3004]	; 0xbbc
   3ba2c:	00611201 	rsbeq	r1, r1, r1, lsl #4
   3ba30:	10611201 	rsbne	r1, r1, r1, lsl #4
   3ba34:	e0851181 	add	r1, r5, r1, lsl #3
   3ba38:	e581800c 	str	r8, [r1, #12]
   3ba3c:	e1a08107 	lsl	r8, r7, #2
   3ba40:	eaffff70 	b	3b808 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]+0x74>
   3ba44:	00049b70 	.word	0x00049b70

0003ba48 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>:
   3ba48:	e3510004 	cmp	r1, #4
   3ba4c:	812fff1e 	bxhi	lr
   3ba50:	eaffff4f 	b	3b794 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]>

0003ba54 <DisplayFX::init(unsigned long, unsigned long)>:
   3ba54:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3ba58:	e1a06000 	mov	r6, r0
   3ba5c:	e24dd034 	sub	sp, sp, #52	; 0x34
   3ba60:	e3a00094 	mov	r0, #148	; 0x94
   3ba64:	e1a07001 	mov	r7, r1
   3ba68:	e1a08002 	mov	r8, r2
   3ba6c:	ebffbd37 	bl	2af50 <operator new(unsigned int)>
   3ba70:	e3a04000 	mov	r4, #0
   3ba74:	e1a05000 	mov	r5, r0
   3ba78:	e3a03008 	mov	r3, #8
   3ba7c:	e58d4004 	str	r4, [sp, #4]
   3ba80:	e58d4000 	str	r4, [sp]
   3ba84:	e1a02008 	mov	r2, r8
   3ba88:	e1a01007 	mov	r1, r7
   3ba8c:	eb000270 	bl	3c454 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   3ba90:	e1a09004 	mov	r9, r4
   3ba94:	e1a03004 	mov	r3, r4
   3ba98:	e5865bb8 	str	r5, [r6, #3000]	; 0xbb8
   3ba9c:	e59f413c 	ldr	r4, [pc, #316]	; 3bbe0 <DisplayFX::init(unsigned long, unsigned long)+0x18c>
   3baa0:	ea000001 	b	3baac <DisplayFX::init(unsigned long, unsigned long)+0x58>
   3baa4:	e5965bb8 	ldr	r5, [r6, #3000]	; 0xbb8
   3baa8:	e5b43004 	ldr	r3, [r4, #4]!
   3baac:	e1a02803 	lsl	r2, r3, #16
   3bab0:	e1a01403 	lsl	r1, r3, #8
   3bab4:	e20228ff 	and	r2, r2, #16711680	; 0xff0000
   3bab8:	e1822c21 	orr	r2, r2, r1, lsr #24
   3babc:	e2033cff 	and	r3, r3, #65280	; 0xff00
   3bac0:	e6ef1079 	uxtb	r1, r9
   3bac4:	e1a00005 	mov	r0, r5
   3bac8:	e1822003 	orr	r2, r2, r3
   3bacc:	e2899001 	add	r9, r9, #1
   3bad0:	eb0002d0 	bl	3c618 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>
   3bad4:	e3590c01 	cmp	r9, #256	; 0x100
   3bad8:	1afffff1 	bne	3baa4 <DisplayFX::init(unsigned long, unsigned long)+0x50>
   3badc:	e5960bb8 	ldr	r0, [r6, #3000]	; 0xbb8
   3bae0:	e3500000 	cmp	r0, #0
   3bae4:	0a000002 	beq	3baf4 <DisplayFX::init(unsigned long, unsigned long)+0xa0>
   3bae8:	eb0002d8 	bl	3c650 <CBcmFrameBuffer::Initialize()>
   3baec:	e2504000 	subs	r4, r0, #0
   3baf0:	1a000003 	bne	3bb04 <DisplayFX::init(unsigned long, unsigned long)+0xb0>
   3baf4:	e3a04000 	mov	r4, #0
   3baf8:	e1a00004 	mov	r0, r4
   3bafc:	e28dd034 	add	sp, sp, #52	; 0x34
   3bb00:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3bb04:	e5960bb8 	ldr	r0, [r6, #3000]	; 0xbb8
   3bb08:	eb00030b 	bl	3c73c <CBcmFrameBuffer::GetDepth() const>
   3bb0c:	e3500008 	cmp	r0, #8
   3bb10:	1afffff7 	bne	3baf4 <DisplayFX::init(unsigned long, unsigned long)+0xa0>
   3bb14:	e5960bb8 	ldr	r0, [r6, #3000]	; 0xbb8
   3bb18:	eb000309 	bl	3c744 <CBcmFrameBuffer::GetBuffer() const>
   3bb1c:	e5860bcc 	str	r0, [r6, #3020]	; 0xbcc
   3bb20:	e5960bb8 	ldr	r0, [r6, #3000]	; 0xbb8
   3bb24:	eb000308 	bl	3c74c <CBcmFrameBuffer::GetSize() const>
   3bb28:	e5860bc8 	str	r0, [r6, #3016]	; 0xbc8
   3bb2c:	e5960bb8 	ldr	r0, [r6, #3000]	; 0xbb8
   3bb30:	eb0002ff 	bl	3c734 <CBcmFrameBuffer::GetPitch() const>
   3bb34:	e5860bc4 	str	r0, [r6, #3012]	; 0xbc4
   3bb38:	e5960bb8 	ldr	r0, [r6, #3000]	; 0xbb8
   3bb3c:	eb0002f4 	bl	3c714 <CBcmFrameBuffer::GetWidth() const>
   3bb40:	e5860bbc 	str	r0, [r6, #3004]	; 0xbbc
   3bb44:	e5960bb8 	ldr	r0, [r6, #3000]	; 0xbb8
   3bb48:	eb0002f3 	bl	3c71c <CBcmFrameBuffer::GetHeight() const>
   3bb4c:	e5963bc4 	ldr	r3, [r6, #3012]	; 0xbc4
   3bb50:	e5860bc0 	str	r0, [r6, #3008]	; 0xbc0
   3bb54:	e3130003 	tst	r3, #3
   3bb58:	1affffe5 	bne	3baf4 <DisplayFX::init(unsigned long, unsigned long)+0xa0>
   3bb5c:	e5963bcc 	ldr	r3, [r6, #3020]	; 0xbcc
   3bb60:	e5961bc8 	ldr	r1, [r6, #3016]	; 0xbc8
   3bb64:	e0831001 	add	r1, r3, r1
   3bb68:	e1530001 	cmp	r3, r1
   3bb6c:	2a000003 	bcs	3bb80 <DisplayFX::init(unsigned long, unsigned long)+0x12c>
   3bb70:	e5d62bd0 	ldrb	r2, [r6, #3024]	; 0xbd0
   3bb74:	e4c32001 	strb	r2, [r3], #1
   3bb78:	e1510003 	cmp	r1, r3
   3bb7c:	1afffffb 	bne	3bb70 <DisplayFX::init(unsigned long, unsigned long)+0x11c>
   3bb80:	e3a05000 	mov	r5, #0
   3bb84:	e3e00000 	mvn	r0, #0
   3bb88:	e3a0c002 	mov	ip, #2
   3bb8c:	e58d0020 	str	r0, [sp, #32]
   3bb90:	e58d001c 	str	r0, [sp, #28]
   3bb94:	e58d000c 	str	r0, [sp, #12]
   3bb98:	e58d0008 	str	r0, [sp, #8]
   3bb9c:	e1a03005 	mov	r3, r5
   3bba0:	e1a02005 	mov	r2, r5
   3bba4:	e1a01005 	mov	r1, r5
   3bba8:	e1a00006 	mov	r0, r6
   3bbac:	e88d0180 	stm	sp, {r7, r8}
   3bbb0:	e58d5028 	str	r5, [sp, #40]	; 0x28
   3bbb4:	e58d5024 	str	r5, [sp, #36]	; 0x24
   3bbb8:	e58d5018 	str	r5, [sp, #24]
   3bbbc:	e58dc014 	str	ip, [sp, #20]
   3bbc0:	e58dc010 	str	ip, [sp, #16]
   3bbc4:	ebfffef2 	bl	3b794 <DisplayFX::windowSetup(unsigned long, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.0]>
   3bbc8:	e5c65004 	strb	r5, [r6, #4]
   3bbcc:	e5c6525c 	strb	r5, [r6, #604]	; 0x25c
   3bbd0:	e5c654b4 	strb	r5, [r6, #1204]	; 0x4b4
   3bbd4:	e5c6570c 	strb	r5, [r6, #1804]	; 0x70c
   3bbd8:	e5c65964 	strb	r5, [r6, #2404]	; 0x964
   3bbdc:	eaffffc5 	b	3baf8 <DisplayFX::init(unsigned long, unsigned long)+0xa4>
   3bbe0:	00045da8 	.word	0x00045da8

0003bbe4 <DisplayWindow::debug()>:
   3bbe4:	e92d4010 	push	{r4, lr}
   3bbe8:	e1a04000 	mov	r4, r0
   3bbec:	e594c028 	ldr	ip, [r4, #40]	; 0x28
   3bbf0:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
   3bbf4:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   3bbf8:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   3bbfc:	e24dd018 	sub	sp, sp, #24
   3bc00:	e58dc00c 	str	ip, [sp, #12]
   3bc04:	e58d1008 	str	r1, [sp, #8]
   3bc08:	e58d2004 	str	r2, [sp, #4]
   3bc0c:	e58d3000 	str	r3, [sp]
   3bc10:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   3bc14:	e3a01004 	mov	r1, #4
   3bc18:	e59f006c 	ldr	r0, [pc, #108]	; 3bc8c <DisplayWindow::debug()+0xa8>
   3bc1c:	e59f206c 	ldr	r2, [pc, #108]	; 3bc90 <DisplayWindow::debug()+0xac>
   3bc20:	ebffcc5a 	bl	2ed90 <LogWrite>
   3bc24:	e5941048 	ldr	r1, [r4, #72]	; 0x48
   3bc28:	e59f005c 	ldr	r0, [pc, #92]	; 3bc8c <DisplayWindow::debug()+0xa8>
   3bc2c:	e2812a02 	add	r2, r1, #8192	; 0x2000
   3bc30:	e592c33c 	ldr	ip, [r2, #828]	; 0x33c
   3bc34:	e5913000 	ldr	r3, [r1]
   3bc38:	e58dc010 	str	ip, [sp, #16]
   3bc3c:	e592c338 	ldr	ip, [r2, #824]	; 0x338
   3bc40:	e58dc00c 	str	ip, [sp, #12]
   3bc44:	e592c0c4 	ldr	ip, [r2, #196]	; 0xc4
   3bc48:	e59f2044 	ldr	r2, [pc, #68]	; 3bc94 <DisplayWindow::debug()+0xb0>
   3bc4c:	e58dc008 	str	ip, [sp, #8]
   3bc50:	e591c098 	ldr	ip, [r1, #152]	; 0x98
   3bc54:	e58dc004 	str	ip, [sp, #4]
   3bc58:	e591c004 	ldr	ip, [r1, #4]
   3bc5c:	e3a01004 	mov	r1, #4
   3bc60:	e58dc000 	str	ip, [sp]
   3bc64:	ebffcc49 	bl	2ed90 <LogWrite>
   3bc68:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   3bc6c:	e3a01004 	mov	r1, #4
   3bc70:	e58d3000 	str	r3, [sp]
   3bc74:	e59f0010 	ldr	r0, [pc, #16]	; 3bc8c <DisplayWindow::debug()+0xa8>
   3bc78:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   3bc7c:	e59f2014 	ldr	r2, [pc, #20]	; 3bc98 <DisplayWindow::debug()+0xb4>
   3bc80:	ebffcc42 	bl	2ed90 <LogWrite>
   3bc84:	e28dd018 	add	sp, sp, #24
   3bc88:	e8bd8010 	pop	{r4, pc}
   3bc8c:	00045d6c 	.word	0x00045d6c
   3bc90:	00045d34 	.word	0x00045d34
   3bc94:	00045d78 	.word	0x00045d78
   3bc98:	00045d8c 	.word	0x00045d8c

0003bc9c <DisplayWindow::~DisplayWindow()>:
   3bc9c:	e92d4010 	push	{r4, lr}
   3bca0:	e1a04000 	mov	r4, r0
   3bca4:	e5900048 	ldr	r0, [r0, #72]	; 0x48
   3bca8:	e59f3018 	ldr	r3, [pc, #24]	; 3bcc8 <DisplayWindow::~DisplayWindow()+0x2c>
   3bcac:	e3500000 	cmp	r0, #0
   3bcb0:	e5843000 	str	r3, [r4]
   3bcb4:	0a000001 	beq	3bcc0 <DisplayWindow::~DisplayWindow()+0x24>
   3bcb8:	e3a01004 	mov	r1, #4
   3bcbc:	ebffbcb1 	bl	2af88 <operator delete(void*, unsigned int)>
   3bcc0:	e1a00004 	mov	r0, r4
   3bcc4:	e8bd8010 	pop	{r4, pc}
   3bcc8:	00045da0 	.word	0x00045da0

0003bccc <DisplayWindow::~DisplayWindow()>:
   3bccc:	e92d4010 	push	{r4, lr}
   3bcd0:	e1a04000 	mov	r4, r0
   3bcd4:	e5900048 	ldr	r0, [r0, #72]	; 0x48
   3bcd8:	e59f3024 	ldr	r3, [pc, #36]	; 3bd04 <DisplayWindow::~DisplayWindow()+0x38>
   3bcdc:	e3500000 	cmp	r0, #0
   3bce0:	e5843000 	str	r3, [r4]
   3bce4:	0a000001 	beq	3bcf0 <DisplayWindow::~DisplayWindow()+0x24>
   3bce8:	e3a01004 	mov	r1, #4
   3bcec:	ebffbca5 	bl	2af88 <operator delete(void*, unsigned int)>
   3bcf0:	e1a00004 	mov	r0, r4
   3bcf4:	e3a01f96 	mov	r1, #600	; 0x258
   3bcf8:	ebffbca2 	bl	2af88 <operator delete(void*, unsigned int)>
   3bcfc:	e1a00004 	mov	r0, r4
   3bd00:	e8bd8010 	pop	{r4, pc}
   3bd04:	00045da0 	.word	0x00045da0

0003bd08 <__udivsi3>:
   3bd08:	e2512001 	subs	r2, r1, #1
   3bd0c:	012fff1e 	bxeq	lr
   3bd10:	3a000074 	bcc	3bee8 <__udivsi3+0x1e0>
   3bd14:	e1500001 	cmp	r0, r1
   3bd18:	9a00006b 	bls	3becc <__udivsi3+0x1c4>
   3bd1c:	e1110002 	tst	r1, r2
   3bd20:	0a00006c 	beq	3bed8 <__udivsi3+0x1d0>
   3bd24:	e16f3f10 	clz	r3, r0
   3bd28:	e16f2f11 	clz	r2, r1
   3bd2c:	e0423003 	sub	r3, r2, r3
   3bd30:	e273301f 	rsbs	r3, r3, #31
   3bd34:	10833083 	addne	r3, r3, r3, lsl #1
   3bd38:	e3a02000 	mov	r2, #0
   3bd3c:	108ff103 	addne	pc, pc, r3, lsl #2
   3bd40:	e1a00000 	nop			; (mov r0, r0)
   3bd44:	e1500f81 	cmp	r0, r1, lsl #31
   3bd48:	e0a22002 	adc	r2, r2, r2
   3bd4c:	20400f81 	subcs	r0, r0, r1, lsl #31
   3bd50:	e1500f01 	cmp	r0, r1, lsl #30
   3bd54:	e0a22002 	adc	r2, r2, r2
   3bd58:	20400f01 	subcs	r0, r0, r1, lsl #30
   3bd5c:	e1500e81 	cmp	r0, r1, lsl #29
   3bd60:	e0a22002 	adc	r2, r2, r2
   3bd64:	20400e81 	subcs	r0, r0, r1, lsl #29
   3bd68:	e1500e01 	cmp	r0, r1, lsl #28
   3bd6c:	e0a22002 	adc	r2, r2, r2
   3bd70:	20400e01 	subcs	r0, r0, r1, lsl #28
   3bd74:	e1500d81 	cmp	r0, r1, lsl #27
   3bd78:	e0a22002 	adc	r2, r2, r2
   3bd7c:	20400d81 	subcs	r0, r0, r1, lsl #27
   3bd80:	e1500d01 	cmp	r0, r1, lsl #26
   3bd84:	e0a22002 	adc	r2, r2, r2
   3bd88:	20400d01 	subcs	r0, r0, r1, lsl #26
   3bd8c:	e1500c81 	cmp	r0, r1, lsl #25
   3bd90:	e0a22002 	adc	r2, r2, r2
   3bd94:	20400c81 	subcs	r0, r0, r1, lsl #25
   3bd98:	e1500c01 	cmp	r0, r1, lsl #24
   3bd9c:	e0a22002 	adc	r2, r2, r2
   3bda0:	20400c01 	subcs	r0, r0, r1, lsl #24
   3bda4:	e1500b81 	cmp	r0, r1, lsl #23
   3bda8:	e0a22002 	adc	r2, r2, r2
   3bdac:	20400b81 	subcs	r0, r0, r1, lsl #23
   3bdb0:	e1500b01 	cmp	r0, r1, lsl #22
   3bdb4:	e0a22002 	adc	r2, r2, r2
   3bdb8:	20400b01 	subcs	r0, r0, r1, lsl #22
   3bdbc:	e1500a81 	cmp	r0, r1, lsl #21
   3bdc0:	e0a22002 	adc	r2, r2, r2
   3bdc4:	20400a81 	subcs	r0, r0, r1, lsl #21
   3bdc8:	e1500a01 	cmp	r0, r1, lsl #20
   3bdcc:	e0a22002 	adc	r2, r2, r2
   3bdd0:	20400a01 	subcs	r0, r0, r1, lsl #20
   3bdd4:	e1500981 	cmp	r0, r1, lsl #19
   3bdd8:	e0a22002 	adc	r2, r2, r2
   3bddc:	20400981 	subcs	r0, r0, r1, lsl #19
   3bde0:	e1500901 	cmp	r0, r1, lsl #18
   3bde4:	e0a22002 	adc	r2, r2, r2
   3bde8:	20400901 	subcs	r0, r0, r1, lsl #18
   3bdec:	e1500881 	cmp	r0, r1, lsl #17
   3bdf0:	e0a22002 	adc	r2, r2, r2
   3bdf4:	20400881 	subcs	r0, r0, r1, lsl #17
   3bdf8:	e1500801 	cmp	r0, r1, lsl #16
   3bdfc:	e0a22002 	adc	r2, r2, r2
   3be00:	20400801 	subcs	r0, r0, r1, lsl #16
   3be04:	e1500781 	cmp	r0, r1, lsl #15
   3be08:	e0a22002 	adc	r2, r2, r2
   3be0c:	20400781 	subcs	r0, r0, r1, lsl #15
   3be10:	e1500701 	cmp	r0, r1, lsl #14
   3be14:	e0a22002 	adc	r2, r2, r2
   3be18:	20400701 	subcs	r0, r0, r1, lsl #14
   3be1c:	e1500681 	cmp	r0, r1, lsl #13
   3be20:	e0a22002 	adc	r2, r2, r2
   3be24:	20400681 	subcs	r0, r0, r1, lsl #13
   3be28:	e1500601 	cmp	r0, r1, lsl #12
   3be2c:	e0a22002 	adc	r2, r2, r2
   3be30:	20400601 	subcs	r0, r0, r1, lsl #12
   3be34:	e1500581 	cmp	r0, r1, lsl #11
   3be38:	e0a22002 	adc	r2, r2, r2
   3be3c:	20400581 	subcs	r0, r0, r1, lsl #11
   3be40:	e1500501 	cmp	r0, r1, lsl #10
   3be44:	e0a22002 	adc	r2, r2, r2
   3be48:	20400501 	subcs	r0, r0, r1, lsl #10
   3be4c:	e1500481 	cmp	r0, r1, lsl #9
   3be50:	e0a22002 	adc	r2, r2, r2
   3be54:	20400481 	subcs	r0, r0, r1, lsl #9
   3be58:	e1500401 	cmp	r0, r1, lsl #8
   3be5c:	e0a22002 	adc	r2, r2, r2
   3be60:	20400401 	subcs	r0, r0, r1, lsl #8
   3be64:	e1500381 	cmp	r0, r1, lsl #7
   3be68:	e0a22002 	adc	r2, r2, r2
   3be6c:	20400381 	subcs	r0, r0, r1, lsl #7
   3be70:	e1500301 	cmp	r0, r1, lsl #6
   3be74:	e0a22002 	adc	r2, r2, r2
   3be78:	20400301 	subcs	r0, r0, r1, lsl #6
   3be7c:	e1500281 	cmp	r0, r1, lsl #5
   3be80:	e0a22002 	adc	r2, r2, r2
   3be84:	20400281 	subcs	r0, r0, r1, lsl #5
   3be88:	e1500201 	cmp	r0, r1, lsl #4
   3be8c:	e0a22002 	adc	r2, r2, r2
   3be90:	20400201 	subcs	r0, r0, r1, lsl #4
   3be94:	e1500181 	cmp	r0, r1, lsl #3
   3be98:	e0a22002 	adc	r2, r2, r2
   3be9c:	20400181 	subcs	r0, r0, r1, lsl #3
   3bea0:	e1500101 	cmp	r0, r1, lsl #2
   3bea4:	e0a22002 	adc	r2, r2, r2
   3bea8:	20400101 	subcs	r0, r0, r1, lsl #2
   3beac:	e1500081 	cmp	r0, r1, lsl #1
   3beb0:	e0a22002 	adc	r2, r2, r2
   3beb4:	20400081 	subcs	r0, r0, r1, lsl #1
   3beb8:	e1500001 	cmp	r0, r1
   3bebc:	e0a22002 	adc	r2, r2, r2
   3bec0:	20400001 	subcs	r0, r0, r1
   3bec4:	e1a00002 	mov	r0, r2
   3bec8:	e12fff1e 	bx	lr
   3becc:	03a00001 	moveq	r0, #1
   3bed0:	13a00000 	movne	r0, #0
   3bed4:	e12fff1e 	bx	lr
   3bed8:	e16f2f11 	clz	r2, r1
   3bedc:	e262201f 	rsb	r2, r2, #31
   3bee0:	e1a00230 	lsr	r0, r0, r2
   3bee4:	e12fff1e 	bx	lr
   3bee8:	e3500000 	cmp	r0, #0
   3beec:	13e00000 	mvnne	r0, #0
   3bef0:	ea000097 	b	3c154 <__aeabi_idiv0>

0003bef4 <__aeabi_uidivmod>:
   3bef4:	e3510000 	cmp	r1, #0
   3bef8:	0afffffa 	beq	3bee8 <__udivsi3+0x1e0>
   3befc:	e92d4003 	push	{r0, r1, lr}
   3bf00:	ebffff80 	bl	3bd08 <__udivsi3>
   3bf04:	e8bd4006 	pop	{r1, r2, lr}
   3bf08:	e0030092 	mul	r3, r2, r0
   3bf0c:	e0411003 	sub	r1, r1, r3
   3bf10:	e12fff1e 	bx	lr

0003bf14 <__divsi3>:
   3bf14:	e3510000 	cmp	r1, #0
   3bf18:	0a000081 	beq	3c124 <.divsi3_skip_div0_test+0x208>

0003bf1c <.divsi3_skip_div0_test>:
   3bf1c:	e020c001 	eor	ip, r0, r1
   3bf20:	42611000 	rsbmi	r1, r1, #0
   3bf24:	e2512001 	subs	r2, r1, #1
   3bf28:	0a000070 	beq	3c0f0 <.divsi3_skip_div0_test+0x1d4>
   3bf2c:	e1b03000 	movs	r3, r0
   3bf30:	42603000 	rsbmi	r3, r0, #0
   3bf34:	e1530001 	cmp	r3, r1
   3bf38:	9a00006f 	bls	3c0fc <.divsi3_skip_div0_test+0x1e0>
   3bf3c:	e1110002 	tst	r1, r2
   3bf40:	0a000071 	beq	3c10c <.divsi3_skip_div0_test+0x1f0>
   3bf44:	e16f2f13 	clz	r2, r3
   3bf48:	e16f0f11 	clz	r0, r1
   3bf4c:	e0402002 	sub	r2, r0, r2
   3bf50:	e272201f 	rsbs	r2, r2, #31
   3bf54:	10822082 	addne	r2, r2, r2, lsl #1
   3bf58:	e3a00000 	mov	r0, #0
   3bf5c:	108ff102 	addne	pc, pc, r2, lsl #2
   3bf60:	e1a00000 	nop			; (mov r0, r0)
   3bf64:	e1530f81 	cmp	r3, r1, lsl #31
   3bf68:	e0a00000 	adc	r0, r0, r0
   3bf6c:	20433f81 	subcs	r3, r3, r1, lsl #31
   3bf70:	e1530f01 	cmp	r3, r1, lsl #30
   3bf74:	e0a00000 	adc	r0, r0, r0
   3bf78:	20433f01 	subcs	r3, r3, r1, lsl #30
   3bf7c:	e1530e81 	cmp	r3, r1, lsl #29
   3bf80:	e0a00000 	adc	r0, r0, r0
   3bf84:	20433e81 	subcs	r3, r3, r1, lsl #29
   3bf88:	e1530e01 	cmp	r3, r1, lsl #28
   3bf8c:	e0a00000 	adc	r0, r0, r0
   3bf90:	20433e01 	subcs	r3, r3, r1, lsl #28
   3bf94:	e1530d81 	cmp	r3, r1, lsl #27
   3bf98:	e0a00000 	adc	r0, r0, r0
   3bf9c:	20433d81 	subcs	r3, r3, r1, lsl #27
   3bfa0:	e1530d01 	cmp	r3, r1, lsl #26
   3bfa4:	e0a00000 	adc	r0, r0, r0
   3bfa8:	20433d01 	subcs	r3, r3, r1, lsl #26
   3bfac:	e1530c81 	cmp	r3, r1, lsl #25
   3bfb0:	e0a00000 	adc	r0, r0, r0
   3bfb4:	20433c81 	subcs	r3, r3, r1, lsl #25
   3bfb8:	e1530c01 	cmp	r3, r1, lsl #24
   3bfbc:	e0a00000 	adc	r0, r0, r0
   3bfc0:	20433c01 	subcs	r3, r3, r1, lsl #24
   3bfc4:	e1530b81 	cmp	r3, r1, lsl #23
   3bfc8:	e0a00000 	adc	r0, r0, r0
   3bfcc:	20433b81 	subcs	r3, r3, r1, lsl #23
   3bfd0:	e1530b01 	cmp	r3, r1, lsl #22
   3bfd4:	e0a00000 	adc	r0, r0, r0
   3bfd8:	20433b01 	subcs	r3, r3, r1, lsl #22
   3bfdc:	e1530a81 	cmp	r3, r1, lsl #21
   3bfe0:	e0a00000 	adc	r0, r0, r0
   3bfe4:	20433a81 	subcs	r3, r3, r1, lsl #21
   3bfe8:	e1530a01 	cmp	r3, r1, lsl #20
   3bfec:	e0a00000 	adc	r0, r0, r0
   3bff0:	20433a01 	subcs	r3, r3, r1, lsl #20
   3bff4:	e1530981 	cmp	r3, r1, lsl #19
   3bff8:	e0a00000 	adc	r0, r0, r0
   3bffc:	20433981 	subcs	r3, r3, r1, lsl #19
   3c000:	e1530901 	cmp	r3, r1, lsl #18
   3c004:	e0a00000 	adc	r0, r0, r0
   3c008:	20433901 	subcs	r3, r3, r1, lsl #18
   3c00c:	e1530881 	cmp	r3, r1, lsl #17
   3c010:	e0a00000 	adc	r0, r0, r0
   3c014:	20433881 	subcs	r3, r3, r1, lsl #17
   3c018:	e1530801 	cmp	r3, r1, lsl #16
   3c01c:	e0a00000 	adc	r0, r0, r0
   3c020:	20433801 	subcs	r3, r3, r1, lsl #16
   3c024:	e1530781 	cmp	r3, r1, lsl #15
   3c028:	e0a00000 	adc	r0, r0, r0
   3c02c:	20433781 	subcs	r3, r3, r1, lsl #15
   3c030:	e1530701 	cmp	r3, r1, lsl #14
   3c034:	e0a00000 	adc	r0, r0, r0
   3c038:	20433701 	subcs	r3, r3, r1, lsl #14
   3c03c:	e1530681 	cmp	r3, r1, lsl #13
   3c040:	e0a00000 	adc	r0, r0, r0
   3c044:	20433681 	subcs	r3, r3, r1, lsl #13
   3c048:	e1530601 	cmp	r3, r1, lsl #12
   3c04c:	e0a00000 	adc	r0, r0, r0
   3c050:	20433601 	subcs	r3, r3, r1, lsl #12
   3c054:	e1530581 	cmp	r3, r1, lsl #11
   3c058:	e0a00000 	adc	r0, r0, r0
   3c05c:	20433581 	subcs	r3, r3, r1, lsl #11
   3c060:	e1530501 	cmp	r3, r1, lsl #10
   3c064:	e0a00000 	adc	r0, r0, r0
   3c068:	20433501 	subcs	r3, r3, r1, lsl #10
   3c06c:	e1530481 	cmp	r3, r1, lsl #9
   3c070:	e0a00000 	adc	r0, r0, r0
   3c074:	20433481 	subcs	r3, r3, r1, lsl #9
   3c078:	e1530401 	cmp	r3, r1, lsl #8
   3c07c:	e0a00000 	adc	r0, r0, r0
   3c080:	20433401 	subcs	r3, r3, r1, lsl #8
   3c084:	e1530381 	cmp	r3, r1, lsl #7
   3c088:	e0a00000 	adc	r0, r0, r0
   3c08c:	20433381 	subcs	r3, r3, r1, lsl #7
   3c090:	e1530301 	cmp	r3, r1, lsl #6
   3c094:	e0a00000 	adc	r0, r0, r0
   3c098:	20433301 	subcs	r3, r3, r1, lsl #6
   3c09c:	e1530281 	cmp	r3, r1, lsl #5
   3c0a0:	e0a00000 	adc	r0, r0, r0
   3c0a4:	20433281 	subcs	r3, r3, r1, lsl #5
   3c0a8:	e1530201 	cmp	r3, r1, lsl #4
   3c0ac:	e0a00000 	adc	r0, r0, r0
   3c0b0:	20433201 	subcs	r3, r3, r1, lsl #4
   3c0b4:	e1530181 	cmp	r3, r1, lsl #3
   3c0b8:	e0a00000 	adc	r0, r0, r0
   3c0bc:	20433181 	subcs	r3, r3, r1, lsl #3
   3c0c0:	e1530101 	cmp	r3, r1, lsl #2
   3c0c4:	e0a00000 	adc	r0, r0, r0
   3c0c8:	20433101 	subcs	r3, r3, r1, lsl #2
   3c0cc:	e1530081 	cmp	r3, r1, lsl #1
   3c0d0:	e0a00000 	adc	r0, r0, r0
   3c0d4:	20433081 	subcs	r3, r3, r1, lsl #1
   3c0d8:	e1530001 	cmp	r3, r1
   3c0dc:	e0a00000 	adc	r0, r0, r0
   3c0e0:	20433001 	subcs	r3, r3, r1
   3c0e4:	e35c0000 	cmp	ip, #0
   3c0e8:	42600000 	rsbmi	r0, r0, #0
   3c0ec:	e12fff1e 	bx	lr
   3c0f0:	e13c0000 	teq	ip, r0
   3c0f4:	42600000 	rsbmi	r0, r0, #0
   3c0f8:	e12fff1e 	bx	lr
   3c0fc:	33a00000 	movcc	r0, #0
   3c100:	01a00fcc 	asreq	r0, ip, #31
   3c104:	03800001 	orreq	r0, r0, #1
   3c108:	e12fff1e 	bx	lr
   3c10c:	e16f2f11 	clz	r2, r1
   3c110:	e262201f 	rsb	r2, r2, #31
   3c114:	e35c0000 	cmp	ip, #0
   3c118:	e1a00233 	lsr	r0, r3, r2
   3c11c:	42600000 	rsbmi	r0, r0, #0
   3c120:	e12fff1e 	bx	lr
   3c124:	e3500000 	cmp	r0, #0
   3c128:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
   3c12c:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
   3c130:	ea000007 	b	3c154 <__aeabi_idiv0>

0003c134 <__aeabi_idivmod>:
   3c134:	e3510000 	cmp	r1, #0
   3c138:	0afffff9 	beq	3c124 <.divsi3_skip_div0_test+0x208>
   3c13c:	e92d4003 	push	{r0, r1, lr}
   3c140:	ebffff75 	bl	3bf1c <.divsi3_skip_div0_test>
   3c144:	e8bd4006 	pop	{r1, r2, lr}
   3c148:	e0030092 	mul	r3, r2, r0
   3c14c:	e0411003 	sub	r1, r1, r3
   3c150:	e12fff1e 	bx	lr

0003c154 <__aeabi_idiv0>:
   3c154:	e12fff1e 	bx	lr

0003c158 <__aeabi_ldivmod>:
   3c158:	e3530000 	cmp	r3, #0
   3c15c:	03520000 	cmpeq	r2, #0
   3c160:	1a000007 	bne	3c184 <__aeabi_ldivmod+0x2c>
   3c164:	e3510000 	cmp	r1, #0
   3c168:	b3a01102 	movlt	r1, #-2147483648	; 0x80000000
   3c16c:	b3a00000 	movlt	r0, #0
   3c170:	ba000002 	blt	3c180 <__aeabi_ldivmod+0x28>
   3c174:	03500000 	cmpeq	r0, #0
   3c178:	13e01102 	mvnne	r1, #-2147483648	; 0x80000000
   3c17c:	13e00000 	mvnne	r0, #0
   3c180:	eafffff3 	b	3c154 <__aeabi_idiv0>
   3c184:	e24dd008 	sub	sp, sp, #8
   3c188:	e92d6000 	push	{sp, lr}
   3c18c:	e3510000 	cmp	r1, #0
   3c190:	ba000006 	blt	3c1b0 <__aeabi_ldivmod+0x58>
   3c194:	e3530000 	cmp	r3, #0
   3c198:	ba000011 	blt	3c1e4 <__aeabi_ldivmod+0x8c>
   3c19c:	eb000031 	bl	3c268 <__udivmoddi4>
   3c1a0:	e59de004 	ldr	lr, [sp, #4]
   3c1a4:	e28dd008 	add	sp, sp, #8
   3c1a8:	e8bd000c 	pop	{r2, r3}
   3c1ac:	e12fff1e 	bx	lr
   3c1b0:	e2700000 	rsbs	r0, r0, #0
   3c1b4:	e0c11081 	sbc	r1, r1, r1, lsl #1
   3c1b8:	e3530000 	cmp	r3, #0
   3c1bc:	ba000011 	blt	3c208 <__aeabi_ldivmod+0xb0>
   3c1c0:	eb000028 	bl	3c268 <__udivmoddi4>
   3c1c4:	e59de004 	ldr	lr, [sp, #4]
   3c1c8:	e28dd008 	add	sp, sp, #8
   3c1cc:	e8bd000c 	pop	{r2, r3}
   3c1d0:	e2700000 	rsbs	r0, r0, #0
   3c1d4:	e0c11081 	sbc	r1, r1, r1, lsl #1
   3c1d8:	e2722000 	rsbs	r2, r2, #0
   3c1dc:	e0c33083 	sbc	r3, r3, r3, lsl #1
   3c1e0:	e12fff1e 	bx	lr
   3c1e4:	e2722000 	rsbs	r2, r2, #0
   3c1e8:	e0c33083 	sbc	r3, r3, r3, lsl #1
   3c1ec:	eb00001d 	bl	3c268 <__udivmoddi4>
   3c1f0:	e59de004 	ldr	lr, [sp, #4]
   3c1f4:	e28dd008 	add	sp, sp, #8
   3c1f8:	e8bd000c 	pop	{r2, r3}
   3c1fc:	e2700000 	rsbs	r0, r0, #0
   3c200:	e0c11081 	sbc	r1, r1, r1, lsl #1
   3c204:	e12fff1e 	bx	lr
   3c208:	e2722000 	rsbs	r2, r2, #0
   3c20c:	e0c33083 	sbc	r3, r3, r3, lsl #1
   3c210:	eb000014 	bl	3c268 <__udivmoddi4>
   3c214:	e59de004 	ldr	lr, [sp, #4]
   3c218:	e28dd008 	add	sp, sp, #8
   3c21c:	e8bd000c 	pop	{r2, r3}
   3c220:	e2722000 	rsbs	r2, r2, #0
   3c224:	e0c33083 	sbc	r3, r3, r3, lsl #1
   3c228:	e12fff1e 	bx	lr

0003c22c <__aeabi_uldivmod>:
   3c22c:	e3530000 	cmp	r3, #0
   3c230:	03520000 	cmpeq	r2, #0
   3c234:	1a000004 	bne	3c24c <__aeabi_uldivmod+0x20>
   3c238:	e3510000 	cmp	r1, #0
   3c23c:	03500000 	cmpeq	r0, #0
   3c240:	13e01000 	mvnne	r1, #0
   3c244:	13e00000 	mvnne	r0, #0
   3c248:	eaffffc1 	b	3c154 <__aeabi_idiv0>
   3c24c:	e24dd008 	sub	sp, sp, #8
   3c250:	e92d6000 	push	{sp, lr}
   3c254:	eb000003 	bl	3c268 <__udivmoddi4>
   3c258:	e59de004 	ldr	lr, [sp, #4]
   3c25c:	e28dd008 	add	sp, sp, #8
   3c260:	e8bd000c 	pop	{r2, r3}
   3c264:	e12fff1e 	bx	lr

0003c268 <__udivmoddi4>:
   3c268:	e1510003 	cmp	r1, r3
   3c26c:	01500002 	cmpeq	r0, r2
   3c270:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3c274:	e1a04000 	mov	r4, r0
   3c278:	33a00000 	movcc	r0, #0
   3c27c:	e1a05001 	mov	r5, r1
   3c280:	e59dc020 	ldr	ip, [sp, #32]
   3c284:	31a01000 	movcc	r1, r0
   3c288:	3a00003f 	bcc	3c38c <__udivmoddi4+0x124>
   3c28c:	e1a06002 	mov	r6, r2
   3c290:	e3530000 	cmp	r3, #0
   3c294:	116f2f13 	clzne	r2, r3
   3c298:	016f2f16 	clzeq	r2, r6
   3c29c:	02822020 	addeq	r2, r2, #32
   3c2a0:	e3550000 	cmp	r5, #0
   3c2a4:	e1a07003 	mov	r7, r3
   3c2a8:	016f3f14 	clzeq	r3, r4
   3c2ac:	02833020 	addeq	r3, r3, #32
   3c2b0:	116f3f15 	clzne	r3, r5
   3c2b4:	e0422003 	sub	r2, r2, r3
   3c2b8:	e1a09217 	lsl	r9, r7, r2
   3c2bc:	e242a020 	sub	sl, r2, #32
   3c2c0:	e1899a16 	orr	r9, r9, r6, lsl sl
   3c2c4:	e262e020 	rsb	lr, r2, #32
   3c2c8:	e1899e36 	orr	r9, r9, r6, lsr lr
   3c2cc:	e1a08216 	lsl	r8, r6, r2
   3c2d0:	e1550009 	cmp	r5, r9
   3c2d4:	01540008 	cmpeq	r4, r8
   3c2d8:	33a00000 	movcc	r0, #0
   3c2dc:	31a01000 	movcc	r1, r0
   3c2e0:	3a000005 	bcc	3c2fc <__udivmoddi4+0x94>
   3c2e4:	e3a00001 	mov	r0, #1
   3c2e8:	e1a01a10 	lsl	r1, r0, sl
   3c2ec:	e0544008 	subs	r4, r4, r8
   3c2f0:	e1811e30 	orr	r1, r1, r0, lsr lr
   3c2f4:	e1a00210 	lsl	r0, r0, r2
   3c2f8:	e0c55009 	sbc	r5, r5, r9
   3c2fc:	e3520000 	cmp	r2, #0
   3c300:	0a000021 	beq	3c38c <__udivmoddi4+0x124>
   3c304:	e1a060a8 	lsr	r6, r8, #1
   3c308:	e1866f89 	orr	r6, r6, r9, lsl #31
   3c30c:	e1a070a9 	lsr	r7, r9, #1
   3c310:	e1a08002 	mov	r8, r2
   3c314:	ea000007 	b	3c338 <__udivmoddi4+0xd0>
   3c318:	e0543006 	subs	r3, r4, r6
   3c31c:	e0c59007 	sbc	r9, r5, r7
   3c320:	e0933003 	adds	r3, r3, r3
   3c324:	e0a99009 	adc	r9, r9, r9
   3c328:	e2934001 	adds	r4, r3, #1
   3c32c:	e2a95000 	adc	r5, r9, #0
   3c330:	e2588001 	subs	r8, r8, #1
   3c334:	0a000006 	beq	3c354 <__udivmoddi4+0xec>
   3c338:	e1550007 	cmp	r5, r7
   3c33c:	01540006 	cmpeq	r4, r6
   3c340:	2afffff4 	bcs	3c318 <__udivmoddi4+0xb0>
   3c344:	e0944004 	adds	r4, r4, r4
   3c348:	e0a55005 	adc	r5, r5, r5
   3c34c:	e2588001 	subs	r8, r8, #1
   3c350:	1afffff8 	bne	3c338 <__udivmoddi4+0xd0>
   3c354:	e1a03234 	lsr	r3, r4, r2
   3c358:	e1833e15 	orr	r3, r3, r5, lsl lr
   3c35c:	e1a06235 	lsr	r6, r5, r2
   3c360:	e1833a35 	orr	r3, r3, r5, lsr sl
   3c364:	e0900004 	adds	r0, r0, r4
   3c368:	e1a04003 	mov	r4, r3
   3c36c:	e1a03216 	lsl	r3, r6, r2
   3c370:	e1833a14 	orr	r3, r3, r4, lsl sl
   3c374:	e1a02214 	lsl	r2, r4, r2
   3c378:	e1833e34 	orr	r3, r3, r4, lsr lr
   3c37c:	e0a11005 	adc	r1, r1, r5
   3c380:	e0500002 	subs	r0, r0, r2
   3c384:	e1a05006 	mov	r5, r6
   3c388:	e0c11003 	sbc	r1, r1, r3
   3c38c:	e35c0000 	cmp	ip, #0
   3c390:	11cc40f0 	strdne	r4, [ip]
   3c394:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003c398 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   3c398:	e3a01000 	mov	r1, #0
   3c39c:	e3a02001 	mov	r2, #1
   3c3a0:	e92d4030 	push	{r4, r5, lr}
   3c3a4:	e1a05000 	mov	r5, r0
   3c3a8:	e5903020 	ldr	r3, [r0, #32]
   3c3ac:	e24dd014 	sub	sp, sp, #20
   3c3b0:	e5c32011 	strb	r2, [r3, #17]
   3c3b4:	e5c3100c 	strb	r1, [r3, #12]
   3c3b8:	e5c3100d 	strb	r1, [r3, #13]
   3c3bc:	e5c3100e 	strb	r1, [r3, #14]
   3c3c0:	e5c3100f 	strb	r1, [r3, #15]
   3c3c4:	e5c31010 	strb	r1, [r3, #16]
   3c3c8:	e5c31012 	strb	r1, [r3, #18]
   3c3cc:	e5c31013 	strb	r1, [r3, #19]
   3c3d0:	e28d0008 	add	r0, sp, #8
   3c3d4:	ebffa0f7 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3c3d8:	e59f306c 	ldr	r3, [pc, #108]	; 3c44c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   3c3dc:	e5952020 	ldr	r2, [r5, #32]
   3c3e0:	e59f1068 	ldr	r1, [pc, #104]	; 3c450 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   3c3e4:	e58d3000 	str	r3, [sp]
   3c3e8:	e28d0008 	add	r0, sp, #8
   3c3ec:	e283300c 	add	r3, r3, #12
   3c3f0:	ebffa0fc 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3c3f4:	e2504000 	subs	r4, r0, #0
   3c3f8:	0a000008 	beq	3c420 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   3c3fc:	e5952020 	ldr	r2, [r5, #32]
   3c400:	e5d2300c 	ldrb	r3, [r2, #12]
   3c404:	e5d2000d 	ldrb	r0, [r2, #13]
   3c408:	e5d2100e 	ldrb	r1, [r2, #14]
   3c40c:	e1833400 	orr	r3, r3, r0, lsl #8
   3c410:	e5d2200f 	ldrb	r2, [r2, #15]
   3c414:	e1833801 	orr	r3, r3, r1, lsl #16
   3c418:	e1933c02 	orrs	r3, r3, r2, lsl #24
   3c41c:	0a000005 	beq	3c438 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   3c420:	e3a04000 	mov	r4, #0
   3c424:	e28d0008 	add	r0, sp, #8
   3c428:	ebffa0e9 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   3c42c:	e1a00004 	mov	r0, r4
   3c430:	e28dd014 	add	sp, sp, #20
   3c434:	e8bd8030 	pop	{r4, r5, pc}
   3c438:	e28d0008 	add	r0, sp, #8
   3c43c:	ebffa0e4 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   3c440:	e1a00004 	mov	r0, r4
   3c444:	e28dd014 	add	sp, sp, #20
   3c448:	e8bd8030 	pop	{r4, r5, pc}
   3c44c:	00000408 	.word	0x00000408
   3c450:	0004800b 	.word	0x0004800b

0003c454 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   3c454:	e92d4030 	push	{r4, r5, lr}
   3c458:	e1a04000 	mov	r4, r0
   3c45c:	e3a05000 	mov	r5, #0
   3c460:	e3520000 	cmp	r2, #0
   3c464:	13510000 	cmpne	r1, #0
   3c468:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   3c46c:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
   3c470:	e5841000 	str	r1, [r4]
   3c474:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   3c478:	e5842004 	str	r2, [r4, #4]
   3c47c:	e5843010 	str	r3, [r4, #16]
   3c480:	e584000c 	str	r0, [r4, #12]
   3c484:	e5841008 	str	r1, [r4, #8]
   3c488:	e5845014 	str	r5, [r4, #20]
   3c48c:	e5845018 	str	r5, [r4, #24]
   3c490:	e584501c 	str	r5, [r4, #28]
   3c494:	e5845020 	str	r5, [r4, #32]
   3c498:	1a000011 	bne	3c4e4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x90>
   3c49c:	e1a01005 	mov	r1, r5
   3c4a0:	e28d000c 	add	r0, sp, #12
   3c4a4:	ebffa0c3 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3c4a8:	e3a03014 	mov	r3, #20
   3c4ac:	e59f10dc 	ldr	r1, [pc, #220]	; 3c590 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x13c>
   3c4b0:	e58d5000 	str	r5, [sp]
   3c4b4:	e28d000c 	add	r0, sp, #12
   3c4b8:	e08d2003 	add	r2, sp, r3
   3c4bc:	ebffa0c9 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3c4c0:	e1500005 	cmp	r0, r5
   3c4c4:	1a000029 	bne	3c570 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x11c>
   3c4c8:	e3a02d0a 	mov	r2, #640	; 0x280
   3c4cc:	e3a03e1e 	mov	r3, #480	; 0x1e0
   3c4d0:	e1c420f0 	strd	r2, [r4]
   3c4d4:	e28d000c 	add	r0, sp, #12
   3c4d8:	ebffa0bd 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   3c4dc:	e5941008 	ldr	r1, [r4, #8]
   3c4e0:	e5943010 	ldr	r3, [r4, #16]
   3c4e4:	e3510000 	cmp	r1, #0
   3c4e8:	0a000013 	beq	3c53c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xe8>
   3c4ec:	e594200c 	ldr	r2, [r4, #12]
   3c4f0:	e3520000 	cmp	r2, #0
   3c4f4:	0a000010 	beq	3c53c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xe8>
   3c4f8:	e3530008 	cmp	r3, #8
   3c4fc:	9a000013 	bls	3c550 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
   3c500:	e3a02070 	mov	r2, #112	; 0x70
   3c504:	e59f1088 	ldr	r1, [pc, #136]	; 3c594 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x140>
   3c508:	e2840024 	add	r0, r4, #36	; 0x24
   3c50c:	ebffb8a9 	bl	2a7b8 <memcpy>
   3c510:	e1c400d4 	ldrd	r0, [r4, #4]
   3c514:	e1c420dc 	ldrd	r2, [r4, #12]
   3c518:	e5840034 	str	r0, [r4, #52]	; 0x34
   3c51c:	e1a00004 	mov	r0, r4
   3c520:	e594c000 	ldr	ip, [r4]
   3c524:	e5841044 	str	r1, [r4, #68]	; 0x44
   3c528:	e584c030 	str	ip, [r4, #48]	; 0x30
   3c52c:	e5842048 	str	r2, [r4, #72]	; 0x48
   3c530:	e5843058 	str	r3, [r4, #88]	; 0x58
   3c534:	e28dd02c 	add	sp, sp, #44	; 0x2c
   3c538:	e8bd8030 	pop	{r4, r5, pc}
   3c53c:	e3530008 	cmp	r3, #8
   3c540:	e8940006 	ldm	r4, {r1, r2}
   3c544:	e5841008 	str	r1, [r4, #8]
   3c548:	e584200c 	str	r2, [r4, #12]
   3c54c:	8affffeb 	bhi	3c500 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   3c550:	e59f0040 	ldr	r0, [pc, #64]	; 3c598 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x144>
   3c554:	ebffba83 	bl	2af68 <operator new[](unsigned int)>
   3c558:	e3a02b01 	mov	r2, #1024	; 0x400
   3c55c:	e5840020 	str	r0, [r4, #32]
   3c560:	e3a01000 	mov	r1, #0
   3c564:	e2800014 	add	r0, r0, #20
   3c568:	ebffb649 	bl	29e94 <memset>
   3c56c:	eaffffe3 	b	3c500 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   3c570:	e1cd22d0 	ldrd	r2, [sp, #32]
   3c574:	e2420d0a 	sub	r0, r2, #640	; 0x280
   3c578:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   3c57c:	e3510f96 	cmp	r1, #600	; 0x258
   3c580:	93500c05 	cmpls	r0, #1280	; 0x500
   3c584:	e1c420f0 	strd	r2, [r4]
   3c588:	8affffce 	bhi	3c4c8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   3c58c:	eaffffd0 	b	3c4d4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x80>
   3c590:	00040003 	.word	0x00040003
   3c594:	0004aba8 	.word	0x0004aba8
   3c598:	00000414 	.word	0x00000414

0003c59c <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   3c59c:	e92d4010 	push	{r4, lr}
   3c5a0:	e1a04000 	mov	r4, r0
   3c5a4:	e5900020 	ldr	r0, [r0, #32]
   3c5a8:	e3500000 	cmp	r0, #0
   3c5ac:	0a000001 	beq	3c5b8 <CBcmFrameBuffer::~CBcmFrameBuffer()+0x1c>
   3c5b0:	e3a01014 	mov	r1, #20
   3c5b4:	ebffba73 	bl	2af88 <operator delete(void*, unsigned int)>
   3c5b8:	e1a00004 	mov	r0, r4
   3c5bc:	e8bd8010 	pop	{r4, pc}

0003c5c0 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   3c5c0:	e5903010 	ldr	r3, [r0, #16]
   3c5c4:	e3530008 	cmp	r3, #8
   3c5c8:	812fff1e 	bxhi	lr
   3c5cc:	e1a0c982 	lsl	ip, r2, #19
   3c5d0:	e1a035a2 	lsr	r3, r2, #11
   3c5d4:	e20cc73e 	and	ip, ip, #16252928	; 0xf80000
   3c5d8:	e1a02282 	lsl	r2, r2, #5
   3c5dc:	e18cc183 	orr	ip, ip, r3, lsl #3
   3c5e0:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   3c5e4:	e5903020 	ldr	r3, [r0, #32]
   3c5e8:	e182200c 	orr	r2, r2, ip
   3c5ec:	e38204ff 	orr	r0, r2, #-16777216	; 0xff000000
   3c5f0:	e2811004 	add	r1, r1, #4
   3c5f4:	e0831101 	add	r1, r3, r1, lsl #2
   3c5f8:	e1a0c420 	lsr	ip, r0, #8
   3c5fc:	e1a03820 	lsr	r3, r0, #16
   3c600:	e1a00c20 	lsr	r0, r0, #24
   3c604:	e5c12004 	strb	r2, [r1, #4]
   3c608:	e5c1c005 	strb	ip, [r1, #5]
   3c60c:	e5c13006 	strb	r3, [r1, #6]
   3c610:	e5c10007 	strb	r0, [r1, #7]
   3c614:	e12fff1e 	bx	lr

0003c618 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   3c618:	e5903010 	ldr	r3, [r0, #16]
   3c61c:	e3530008 	cmp	r3, #8
   3c620:	812fff1e 	bxhi	lr
   3c624:	e5903020 	ldr	r3, [r0, #32]
   3c628:	e2811004 	add	r1, r1, #4
   3c62c:	e0831101 	add	r1, r3, r1, lsl #2
   3c630:	e1a0c422 	lsr	ip, r2, #8
   3c634:	e1a00822 	lsr	r0, r2, #16
   3c638:	e1a03c22 	lsr	r3, r2, #24
   3c63c:	e5c12004 	strb	r2, [r1, #4]
   3c640:	e5c1c005 	strb	ip, [r1, #5]
   3c644:	e5c10006 	strb	r0, [r1, #6]
   3c648:	e5c13007 	strb	r3, [r1, #7]
   3c64c:	e12fff1e 	bx	lr

0003c650 <CBcmFrameBuffer::Initialize()>:
   3c650:	e92d4030 	push	{r4, r5, lr}
   3c654:	e1a04000 	mov	r4, r0
   3c658:	e24dd00c 	sub	sp, sp, #12
   3c65c:	e3a01000 	mov	r1, #0
   3c660:	e1a0000d 	mov	r0, sp
   3c664:	ebffa053 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3c668:	e1a0000d 	mov	r0, sp
   3c66c:	e3a02070 	mov	r2, #112	; 0x70
   3c670:	e2841024 	add	r1, r4, #36	; 0x24
   3c674:	ebffa098 	bl	248dc <CBcmPropertyTags::GetTags(void*, unsigned int)>
   3c678:	e2505000 	subs	r5, r0, #0
   3c67c:	0a00001f 	beq	3c700 <CBcmFrameBuffer::Initialize()+0xb0>
   3c680:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3c684:	e3530000 	cmp	r3, #0
   3c688:	0a00001b 	beq	3c6fc <CBcmFrameBuffer::Initialize()+0xac>
   3c68c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   3c690:	e3530000 	cmp	r3, #0
   3c694:	0a000018 	beq	3c6fc <CBcmFrameBuffer::Initialize()+0xac>
   3c698:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   3c69c:	e3530000 	cmp	r3, #0
   3c6a0:	0a000015 	beq	3c6fc <CBcmFrameBuffer::Initialize()+0xac>
   3c6a4:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   3c6a8:	e3530000 	cmp	r3, #0
   3c6ac:	0a000012 	beq	3c6fc <CBcmFrameBuffer::Initialize()+0xac>
   3c6b0:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   3c6b4:	e3530000 	cmp	r3, #0
   3c6b8:	0a00000f 	beq	3c6fc <CBcmFrameBuffer::Initialize()+0xac>
   3c6bc:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   3c6c0:	e3530000 	cmp	r3, #0
   3c6c4:	0a00000c 	beq	3c6fc <CBcmFrameBuffer::Initialize()+0xac>
   3c6c8:	e5942010 	ldr	r2, [r4, #16]
   3c6cc:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   3c6d0:	e3520008 	cmp	r2, #8
   3c6d4:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   3c6d8:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   3c6dc:	e5843014 	str	r3, [r4, #20]
   3c6e0:	e5841018 	str	r1, [r4, #24]
   3c6e4:	e584201c 	str	r2, [r4, #28]
   3c6e8:	8a000004 	bhi	3c700 <CBcmFrameBuffer::Initialize()+0xb0>
   3c6ec:	e1a00004 	mov	r0, r4
   3c6f0:	ebffff28 	bl	3c398 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   3c6f4:	e1a05000 	mov	r5, r0
   3c6f8:	ea000000 	b	3c700 <CBcmFrameBuffer::Initialize()+0xb0>
   3c6fc:	e1a05003 	mov	r5, r3
   3c700:	e1a0000d 	mov	r0, sp
   3c704:	ebffa032 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   3c708:	e1a00005 	mov	r0, r5
   3c70c:	e28dd00c 	add	sp, sp, #12
   3c710:	e8bd8030 	pop	{r4, r5, pc}

0003c714 <CBcmFrameBuffer::GetWidth() const>:
   3c714:	e5900000 	ldr	r0, [r0]
   3c718:	e12fff1e 	bx	lr

0003c71c <CBcmFrameBuffer::GetHeight() const>:
   3c71c:	e5900004 	ldr	r0, [r0, #4]
   3c720:	e12fff1e 	bx	lr

0003c724 <CBcmFrameBuffer::GetVirtWidth() const>:
   3c724:	e5900008 	ldr	r0, [r0, #8]
   3c728:	e12fff1e 	bx	lr

0003c72c <CBcmFrameBuffer::GetVirtHeight() const>:
   3c72c:	e590000c 	ldr	r0, [r0, #12]
   3c730:	e12fff1e 	bx	lr

0003c734 <CBcmFrameBuffer::GetPitch() const>:
   3c734:	e590001c 	ldr	r0, [r0, #28]
   3c738:	e12fff1e 	bx	lr

0003c73c <CBcmFrameBuffer::GetDepth() const>:
   3c73c:	e5900010 	ldr	r0, [r0, #16]
   3c740:	e12fff1e 	bx	lr

0003c744 <CBcmFrameBuffer::GetBuffer() const>:
   3c744:	e5900014 	ldr	r0, [r0, #20]
   3c748:	e12fff1e 	bx	lr

0003c74c <CBcmFrameBuffer::GetSize() const>:
   3c74c:	e5900018 	ldr	r0, [r0, #24]
   3c750:	e12fff1e 	bx	lr

0003c754 <CBcmFrameBuffer::UpdatePalette()>:
   3c754:	e5903010 	ldr	r3, [r0, #16]
   3c758:	e3530008 	cmp	r3, #8
   3c75c:	9a000001 	bls	3c768 <CBcmFrameBuffer::UpdatePalette()+0x14>
   3c760:	e3a00001 	mov	r0, #1
   3c764:	e12fff1e 	bx	lr
   3c768:	eaffff0a 	b	3c398 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

0003c76c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   3c76c:	e92d4070 	push	{r4, r5, r6, lr}
   3c770:	e24dd028 	sub	sp, sp, #40	; 0x28
   3c774:	e1a05001 	mov	r5, r1
   3c778:	e28d000c 	add	r0, sp, #12
   3c77c:	e3a01000 	mov	r1, #0
   3c780:	e1a06002 	mov	r6, r2
   3c784:	ebffa00b 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3c788:	e3a03008 	mov	r3, #8
   3c78c:	e58d3000 	str	r3, [sp]
   3c790:	e3a03014 	mov	r3, #20
   3c794:	e59f1048 	ldr	r1, [pc, #72]	; 3c7e4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x78>
   3c798:	e28d000c 	add	r0, sp, #12
   3c79c:	e08d2003 	add	r2, sp, r3
   3c7a0:	e58d5020 	str	r5, [sp, #32]
   3c7a4:	e58d6024 	str	r6, [sp, #36]	; 0x24
   3c7a8:	ebffa00e 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3c7ac:	e2504000 	subs	r4, r0, #0
   3c7b0:	0a000006 	beq	3c7d0 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   3c7b4:	e59d3020 	ldr	r3, [sp, #32]
   3c7b8:	e1530005 	cmp	r3, r5
   3c7bc:	059d0024 	ldreq	r0, [sp, #36]	; 0x24
   3c7c0:	13a04000 	movne	r4, #0
   3c7c4:	00404006 	subeq	r4, r0, r6
   3c7c8:	016f4f14 	clzeq	r4, r4
   3c7cc:	01a042a4 	lsreq	r4, r4, #5
   3c7d0:	e28d000c 	add	r0, sp, #12
   3c7d4:	ebff9ffe 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   3c7d8:	e1a00004 	mov	r0, r4
   3c7dc:	e28dd028 	add	sp, sp, #40	; 0x28
   3c7e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   3c7e4:	00048009 	.word	0x00048009

0003c7e8 <CBcmFrameBuffer::WaitForVerticalSync()>:
   3c7e8:	e92d4010 	push	{r4, lr}
   3c7ec:	e24dd020 	sub	sp, sp, #32
   3c7f0:	e3a01000 	mov	r1, #0
   3c7f4:	e28d0008 	add	r0, sp, #8
   3c7f8:	ebff9fee 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3c7fc:	e3a03000 	mov	r3, #0
   3c800:	e58d3000 	str	r3, [sp]
   3c804:	e3a03010 	mov	r3, #16
   3c808:	e59f1020 	ldr	r1, [pc, #32]	; 3c830 <CBcmFrameBuffer::WaitForVerticalSync()+0x48>
   3c80c:	e08d2003 	add	r2, sp, r3
   3c810:	e28d0008 	add	r0, sp, #8
   3c814:	ebff9ff3 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3c818:	e1a04000 	mov	r4, r0
   3c81c:	e28d0008 	add	r0, sp, #8
   3c820:	ebff9feb 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   3c824:	e1a00004 	mov	r0, r4
   3c828:	e28dd020 	add	sp, sp, #32
   3c82c:	e8bd8010 	pop	{r4, pc}
   3c830:	0004800e 	.word	0x0004800e

0003c834 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   3c834:	e92d4010 	push	{r4, lr}
   3c838:	e24dd020 	sub	sp, sp, #32
   3c83c:	e1a04001 	mov	r4, r1
   3c840:	e28d0008 	add	r0, sp, #8
   3c844:	e3a01000 	mov	r1, #0
   3c848:	ebff9fda 	bl	247b8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3c84c:	e3a03004 	mov	r3, #4
   3c850:	e58d3000 	str	r3, [sp]
   3c854:	e3a03010 	mov	r3, #16
   3c858:	e59f1024 	ldr	r1, [pc, #36]	; 3c884 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)+0x50>
   3c85c:	e08d2003 	add	r2, sp, r3
   3c860:	e28d0008 	add	r0, sp, #8
   3c864:	e58d401c 	str	r4, [sp, #28]
   3c868:	ebff9fde 	bl	247e8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3c86c:	e1a04000 	mov	r4, r0
   3c870:	e28d0008 	add	r0, sp, #8
   3c874:	ebff9fd6 	bl	247d4 <CBcmPropertyTags::~CBcmPropertyTags()>
   3c878:	e1a00004 	mov	r0, r4
   3c87c:	e28dd020 	add	sp, sp, #32
   3c880:	e8bd8010 	pop	{r4, pc}
   3c884:	0004800f 	.word	0x0004800f

0003c888 <convModeToVal>:
   3c888:	e2400001 	sub	r0, r0, #1
   3c88c:	e6ef0070 	uxtb	r0, r0
   3c890:	e3500008 	cmp	r0, #8
   3c894:	959f3008 	ldrls	r3, [pc, #8]	; 3c8a4 <convModeToVal+0x1c>
   3c898:	97d30000 	ldrbls	r0, [r3, r0]
   3c89c:	83a00000 	movhi	r0, #0
   3c8a0:	e12fff1e 	bx	lr
   3c8a4:	000461a8 	.word	0x000461a8

0003c8a8 <pinMode>:
   3c8a8:	e92d4070 	push	{r4, r5, r6, lr}
   3c8ac:	e1a04000 	mov	r4, r0
   3c8b0:	e3a0c007 	mov	ip, #7
   3c8b4:	e59f20e0 	ldr	r2, [pc, #224]	; 3c99c <pinMode+0xf4>
   3c8b8:	e59f00e0 	ldr	r0, [pc, #224]	; 3c9a0 <pinMode+0xf8>
   3c8bc:	e0823492 	umull	r3, r2, r2, r4
   3c8c0:	e1a021a2 	lsr	r2, r2, #3
   3c8c4:	e0623e82 	rsb	r3, r2, r2, lsl #29
   3c8c8:	e0623103 	rsb	r3, r2, r3, lsl #2
   3c8cc:	e0843083 	add	r3, r4, r3, lsl #1
   3c8d0:	e0ce0390 	smull	r0, lr, r0, r3
   3c8d4:	e1a00fc3 	asr	r0, r3, #31
   3c8d8:	e2822302 	add	r2, r2, #134217728	; 0x8000000
   3c8dc:	e060014e 	rsb	r0, r0, lr, asr #2
   3c8e0:	e0800100 	add	r0, r0, r0, lsl #2
   3c8e4:	e2822702 	add	r2, r2, #524288	; 0x80000
   3c8e8:	e0433080 	sub	r3, r3, r0, lsl #1
   3c8ec:	e2411001 	sub	r1, r1, #1
   3c8f0:	e1a02102 	lsl	r2, r2, #2
   3c8f4:	e5920000 	ldr	r0, [r2]
   3c8f8:	e6ef1071 	uxtb	r1, r1
   3c8fc:	e0833083 	add	r3, r3, r3, lsl #1
   3c900:	e6ef3073 	uxtb	r3, r3
   3c904:	e3510008 	cmp	r1, #8
   3c908:	e1c0c31c 	bic	ip, r0, ip, lsl r3
   3c90c:	8a000016 	bhi	3c96c <pinMode+0xc4>
   3c910:	e59f008c 	ldr	r0, [pc, #140]	; 3c9a4 <pinMode+0xfc>
   3c914:	e7d01001 	ldrb	r1, [r0, r1]
   3c918:	e201000f 	and	r0, r1, #15
   3c91c:	e18cc310 	orr	ip, ip, r0, lsl r3
   3c920:	e31100f0 	tst	r1, #240	; 0xf0
   3c924:	e582c000 	str	ip, [r2]
   3c928:	08bd8070 	popeq	{r4, r5, r6, pc}
   3c92c:	e59f5074 	ldr	r5, [pc, #116]	; 3c9a8 <pinMode+0x100>
   3c930:	e1a01241 	asr	r1, r1, #4
   3c934:	e3a00096 	mov	r0, #150	; 0x96
   3c938:	e5851094 	str	r1, [r5, #148]	; 0x94
   3c93c:	ebffbf25 	bl	2c5d8 <DelayLoop>
   3c940:	e354001f 	cmp	r4, #31
   3c944:	8a00000a 	bhi	3c974 <pinMode+0xcc>
   3c948:	e3a00001 	mov	r0, #1
   3c94c:	e1a04410 	lsl	r4, r0, r4
   3c950:	e5854098 	str	r4, [r5, #152]	; 0x98
   3c954:	e3a00096 	mov	r0, #150	; 0x96
   3c958:	ebffbf1e 	bl	2c5d8 <DelayLoop>
   3c95c:	e3a03000 	mov	r3, #0
   3c960:	e5853094 	str	r3, [r5, #148]	; 0x94
   3c964:	e5853098 	str	r3, [r5, #152]	; 0x98
   3c968:	e8bd8070 	pop	{r4, r5, r6, pc}
   3c96c:	e582c000 	str	ip, [r2]
   3c970:	e8bd8070 	pop	{r4, r5, r6, pc}
   3c974:	e3a03001 	mov	r3, #1
   3c978:	e2444020 	sub	r4, r4, #32
   3c97c:	e1a04413 	lsl	r4, r3, r4
   3c980:	e3a00096 	mov	r0, #150	; 0x96
   3c984:	e585409c 	str	r4, [r5, #156]	; 0x9c
   3c988:	ebffbf12 	bl	2c5d8 <DelayLoop>
   3c98c:	e3a03000 	mov	r3, #0
   3c990:	e5853094 	str	r3, [r5, #148]	; 0x94
   3c994:	e585309c 	str	r3, [r5, #156]	; 0x9c
   3c998:	e8bd8070 	pop	{r4, r5, r6, pc}
   3c99c:	cccccccd 	.word	0xcccccccd
   3c9a0:	66666667 	.word	0x66666667
   3c9a4:	000461a8 	.word	0x000461a8
   3c9a8:	20200000 	.word	0x20200000

0003c9ac <digitalWrite>:
   3c9ac:	e3510000 	cmp	r1, #0
   3c9b0:	e3a03001 	mov	r3, #1
   3c9b4:	0a000008 	beq	3c9dc <digitalWrite+0x30>
   3c9b8:	e350001f 	cmp	r0, #31
   3c9bc:	82400020 	subhi	r0, r0, #32
   3c9c0:	959f2038 	ldrls	r2, [pc, #56]	; 3ca00 <digitalWrite+0x54>
   3c9c4:	859f2034 	ldrhi	r2, [pc, #52]	; 3ca00 <digitalWrite+0x54>
   3c9c8:	91a00013 	lslls	r0, r3, r0
   3c9cc:	81a00013 	lslhi	r0, r3, r0
   3c9d0:	9582001c 	strls	r0, [r2, #28]
   3c9d4:	85820020 	strhi	r0, [r2, #32]
   3c9d8:	e12fff1e 	bx	lr
   3c9dc:	e350001f 	cmp	r0, #31
   3c9e0:	82400020 	subhi	r0, r0, #32
   3c9e4:	959f2014 	ldrls	r2, [pc, #20]	; 3ca00 <digitalWrite+0x54>
   3c9e8:	859f2010 	ldrhi	r2, [pc, #16]	; 3ca00 <digitalWrite+0x54>
   3c9ec:	91a00013 	lslls	r0, r3, r0
   3c9f0:	81a00013 	lslhi	r0, r3, r0
   3c9f4:	95820028 	strls	r0, [r2, #40]	; 0x28
   3c9f8:	8582002c 	strhi	r0, [r2, #44]	; 0x2c
   3c9fc:	e12fff1e 	bx	lr
   3ca00:	20200000 	.word	0x20200000

0003ca04 <digitalRead>:
   3ca04:	e59f3018 	ldr	r3, [pc, #24]	; 3ca24 <digitalRead+0x20>
   3ca08:	e350001f 	cmp	r0, #31
   3ca0c:	95933034 	ldrls	r3, [r3, #52]	; 0x34
   3ca10:	85933038 	ldrhi	r3, [r3, #56]	; 0x38
   3ca14:	82400020 	subhi	r0, r0, #32
   3ca18:	e1a00033 	lsr	r0, r3, r0
   3ca1c:	e2000001 	and	r0, r0, #1
   3ca20:	e12fff1e 	bx	lr
   3ca24:	20200000 	.word	0x20200000

0003ca28 <lowlev_enable_irq>:
   3ca28:	e10f0000 	mrs	r0, CPSR
   3ca2c:	e3c00080 	bic	r0, r0, #128	; 0x80
   3ca30:	e121f000 	msr	CPSR_c, r0
   3ca34:	e12fff1e 	bx	lr

0003ca38 <lowlev_disable_irq>:
   3ca38:	f10c0080 	cpsid	i
   3ca3c:	e1a0f00e 	mov	pc, lr

0003ca40 <lowlev_enable_fiq>:
   3ca40:	e10f0000 	mrs	r0, CPSR
   3ca44:	e3c00040 	bic	r0, r0, #64	; 0x40
   3ca48:	e121f000 	msr	CPSR_c, r0
   3ca4c:	e12fff1e 	bx	lr

0003ca50 <lowlev_disable_fiq>:
   3ca50:	f10c0040 	cpsid	f
   3ca54:	e1a0f00e 	mov	pc, lr

0003ca58 <lowlev_cycleDelay>:
   3ca58:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
   3ca5c:	e1a000c0 	asr	r0, r0, #1

0003ca60 <bloop>:
   3ca60:	e2500001 	subs	r0, r0, #1
   3ca64:	1afffffd 	bne	3ca60 <bloop>
   3ca68:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
   3ca6c:	e12fff1e 	bx	lr

0003ca70 <membarrier>:
   3ca70:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   3ca74:	e3a03000 	mov	r3, #0
   3ca78:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   3ca7c:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   3ca80:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
   3ca84:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   3ca88:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3ca8c:	e12fff1e 	bx	lr

0003ca90 <disable_mmu_and_cache>:
   3ca90:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
   3ca94:	e3c00a01 	bic	r0, r0, #4096	; 0x1000
   3ca98:	e3c00004 	bic	r0, r0, #4
   3ca9c:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
   3caa0:	e92d040f 	push	{r0, r1, r2, r3, sl}
   3caa4:	e3a03000 	mov	r3, #0
   3caa8:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   3caac:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   3cab0:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
   3cab4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   3cab8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3cabc:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   3cac0:	e3a00005 	mov	r0, #5
   3cac4:	e1c33000 	bic	r3, r3, r0
   3cac8:	e3a00003 	mov	r0, #3
   3cacc:	e1c33580 	bic	r3, r3, r0, lsl #11
   3cad0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   3cad4:	e8bd040f 	pop	{r0, r1, r2, r3, sl}
   3cad8:	e12fff1e 	bx	lr

0003cadc <blinkCE0>:
   3cadc:	e92d040f 	push	{r0, r1, r2, r3, sl}
   3cae0:	e59f0108 	ldr	r0, [pc, #264]	; 3cbf0 <memcopyfast+0x5c>
   3cae4:	e3a01401 	mov	r1, #16777216	; 0x1000000
   3cae8:	e5801000 	str	r1, [r0]
   3caec:	e3a01c01 	mov	r1, #256	; 0x100
   3caf0:	e3a02c01 	mov	r2, #256	; 0x100
   3caf4:	e580101c 	str	r1, [r0, #28]
   3caf8:	e3a0a000 	mov	sl, #0

0003cafc <delay>:
   3cafc:	e28aa001 	add	sl, sl, #1
   3cb00:	e15a0002 	cmp	sl, r2
   3cb04:	1afffffc 	bne	3cafc <delay>
   3cb08:	e5801028 	str	r1, [r0, #40]	; 0x28
   3cb0c:	e3a0a000 	mov	sl, #0

0003cb10 <delay2>:
   3cb10:	e28aa001 	add	sl, sl, #1
   3cb14:	e15a0002 	cmp	sl, r2
   3cb18:	1afffffc 	bne	3cb10 <delay2>
   3cb1c:	e8bd040f 	pop	{r0, r1, r2, r3, sl}
   3cb20:	e12fff1e 	bx	lr

0003cb24 <blinkLEDForever>:
   3cb24:	e59f00c4 	ldr	r0, [pc, #196]	; 3cbf0 <memcopyfast+0x5c>
   3cb28:	e3a0260f 	mov	r2, #15728640	; 0xf00000
   3cb2c:	e3a01602 	mov	r1, #2097152	; 0x200000
   3cb30:	e5801010 	str	r1, [r0, #16]
   3cb34:	e3a01902 	mov	r1, #32768	; 0x8000
   3cb38:	e5801020 	str	r1, [r0, #32]

0003cb3c <loopBlink>:
   3cb3c:	e5801020 	str	r1, [r0, #32]
   3cb40:	e3a0a000 	mov	sl, #0

0003cb44 <delay1a>:
   3cb44:	e28aa001 	add	sl, sl, #1
   3cb48:	e15a0002 	cmp	sl, r2
   3cb4c:	1afffffc 	bne	3cb44 <delay1a>
   3cb50:	e580102c 	str	r1, [r0, #44]	; 0x2c
   3cb54:	e3a0a000 	mov	sl, #0

0003cb58 <delay2a>:
   3cb58:	e28aa001 	add	sl, sl, #1
   3cb5c:	e15a0002 	cmp	sl, r2
   3cb60:	1afffffc 	bne	3cb58 <delay2a>
   3cb64:	eafffff4 	b	3cb3c <loopBlink>

0003cb68 <lowlev_blockCopyExecRelocatable>:
   3cb68:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

0003cb6c <blockCopyExecRelocatableLoop>:
   3cb6c:	e4d13001 	ldrb	r3, [r1], #1
   3cb70:	e4c03001 	strb	r3, [r0], #1
   3cb74:	e2522001 	subs	r2, r2, #1
   3cb78:	aafffffb 	bge	3cb6c <blockCopyExecRelocatableLoop>
   3cb7c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   3cb80:	e12fff10 	bx	r0

0003cb84 <lowlev_blockCopyExecRelocatableLen>:
   3cb84:	0000001c 	.word	0x0000001c

0003cb88 <lowlev_goto>:
   3cb88:	e12fff10 	bx	r0

0003cb8c <lowlev_store_abs8>:
   3cb8c:	e5c01000 	strb	r1, [r0]
   3cb90:	e12fff1e 	bx	lr

0003cb94 <memcopyfast>:
   3cb94:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   3cb98:	e352007f 	cmp	r2, #127	; 0x7f
   3cb9c:	9a00000b 	bls	3cbd0 <memcopyfast+0x3c>
   3cba0:	e3110003 	tst	r1, #3
   3cba4:	1a000009 	bne	3cbd0 <memcopyfast+0x3c>
   3cba8:	e3100003 	tst	r0, #3
   3cbac:	1a000007 	bne	3cbd0 <memcopyfast+0x3c>
   3cbb0:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   3cbb4:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   3cbb8:	e2422020 	sub	r2, r2, #32
   3cbbc:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   3cbc0:	f5d1f040 	pld	[r1, #64]	; 0x40
   3cbc4:	e352001f 	cmp	r2, #31
   3cbc8:	8afffff9 	bhi	3cbb4 <memcopyfast+0x20>
   3cbcc:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   3cbd0:	e3520000 	cmp	r2, #0
   3cbd4:	0a000003 	beq	3cbe8 <memcopyfast+0x54>
   3cbd8:	e4d13001 	ldrb	r3, [r1], #1
   3cbdc:	e2522001 	subs	r2, r2, #1
   3cbe0:	e4c03001 	strb	r3, [r0], #1
   3cbe4:	1afffffb 	bne	3cbd8 <memcopyfast+0x44>
   3cbe8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   3cbec:	e12fff1e 	bx	lr
   3cbf0:	20200000 	.word	0x20200000

0003cbf4 <KeyConversion::getNumTypes()>:
   3cbf4:	e3a00006 	mov	r0, #6
   3cbf8:	e12fff1e 	bx	lr

0003cbfc <memTestDataBus(BusControl&, unsigned long)>:
   3cbfc:	e3a03001 	mov	r3, #1
   3cc00:	e92d4070 	push	{r4, r5, r6, lr}
   3cc04:	e59f4070 	ldr	r4, [pc, #112]	; 3cc7c <memTestDataBus(BusControl&, unsigned long)+0x80>
   3cc08:	e24dd010 	sub	sp, sp, #16
   3cc0c:	e1a05001 	mov	r5, r1
   3cc10:	e3a06000 	mov	r6, #0
   3cc14:	e5cd300e 	strb	r3, [sp, #14]
   3cc18:	e0804004 	add	r4, r0, r4
   3cc1c:	ea000003 	b	3cc30 <memTestDataBus(BusControl&, unsigned long)+0x34>
   3cc20:	e6ef0072 	uxtb	r0, r2
   3cc24:	e3500000 	cmp	r0, #0
   3cc28:	e5cd000e 	strb	r0, [sp, #14]
   3cc2c:	0a000010 	beq	3cc74 <memTestDataBus(BusControl&, unsigned long)+0x78>
   3cc30:	e3a03001 	mov	r3, #1
   3cc34:	e1a01005 	mov	r1, r5
   3cc38:	e28d200e 	add	r2, sp, #14
   3cc3c:	e1a00004 	mov	r0, r4
   3cc40:	e58d6000 	str	r6, [sp]
   3cc44:	ebffda6b 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3cc48:	e3a03001 	mov	r3, #1
   3cc4c:	e28d200f 	add	r2, sp, #15
   3cc50:	e1a01005 	mov	r1, r5
   3cc54:	e1a00004 	mov	r0, r4
   3cc58:	e58d6000 	str	r6, [sp]
   3cc5c:	ebffda5b 	bl	335d0 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   3cc60:	e5dd000e 	ldrb	r0, [sp, #14]
   3cc64:	e5dd300f 	ldrb	r3, [sp, #15]
   3cc68:	e1a02080 	lsl	r2, r0, #1
   3cc6c:	e1530000 	cmp	r3, r0
   3cc70:	0affffea 	beq	3cc20 <memTestDataBus(BusControl&, unsigned long)+0x24>
   3cc74:	e28dd010 	add	sp, sp, #16
   3cc78:	e8bd8070 	pop	{r4, r5, r6, pc}
   3cc7c:	00100404 	.word	0x00100404

0003cc80 <memTestAddressBus(BusControl&, unsigned long, unsigned long)>:
   3cc80:	e3e0c055 	mvn	ip, #85	; 0x55
   3cc84:	e3a03055 	mov	r3, #85	; 0x55
   3cc88:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cc8c:	e2425001 	sub	r5, r2, #1
   3cc90:	e24dd014 	sub	sp, sp, #20
   3cc94:	e2159001 	ands	r9, r5, #1
   3cc98:	e1a07001 	mov	r7, r1
   3cc9c:	e5cdc00c 	strb	ip, [sp, #12]
   3cca0:	e5cd300d 	strb	r3, [sp, #13]
   3cca4:	0a000056 	beq	3ce04 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0x184>
   3cca8:	e1a04009 	mov	r4, r9
   3ccac:	e3a08000 	mov	r8, #0
   3ccb0:	e59f6188 	ldr	r6, [pc, #392]	; 3ce40 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0x1c0>
   3ccb4:	e0806006 	add	r6, r0, r6
   3ccb8:	e3a03001 	mov	r3, #1
   3ccbc:	e0871004 	add	r1, r7, r4
   3ccc0:	e1a00006 	mov	r0, r6
   3ccc4:	e1a04314 	lsl	r4, r4, r3
   3ccc8:	e58d8000 	str	r8, [sp]
   3cccc:	e28d200c 	add	r2, sp, #12
   3ccd0:	ebffda48 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3ccd4:	e015b004 	ands	fp, r5, r4
   3ccd8:	1afffff6 	bne	3ccb8 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0x38>
   3ccdc:	e3a03001 	mov	r3, #1
   3cce0:	e1a01007 	mov	r1, r7
   3cce4:	e1a00006 	mov	r0, r6
   3cce8:	e58db000 	str	fp, [sp]
   3ccec:	e28d200d 	add	r2, sp, #13
   3ccf0:	ebffda40 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3ccf4:	e1a04009 	mov	r4, r9
   3ccf8:	ea000001 	b	3cd04 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0x84>
   3ccfc:	e0158004 	ands	r8, r5, r4
   3cd00:	0a00000e 	beq	3cd40 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0xc0>
   3cd04:	e087a004 	add	sl, r7, r4
   3cd08:	e3a03001 	mov	r3, #1
   3cd0c:	e28d200f 	add	r2, sp, #15
   3cd10:	e1a0100a 	mov	r1, sl
   3cd14:	e1a00006 	mov	r0, r6
   3cd18:	e58db000 	str	fp, [sp]
   3cd1c:	ebffda2b 	bl	335d0 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   3cd20:	e5dd200f 	ldrb	r2, [sp, #15]
   3cd24:	e5dd300c 	ldrb	r3, [sp, #12]
   3cd28:	e1a04084 	lsl	r4, r4, #1
   3cd2c:	e1520003 	cmp	r2, r3
   3cd30:	0afffff1 	beq	3ccfc <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0x7c>
   3cd34:	e1a0000a 	mov	r0, sl
   3cd38:	e28dd014 	add	sp, sp, #20
   3cd3c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cd40:	e3a03001 	mov	r3, #1
   3cd44:	e1a01007 	mov	r1, r7
   3cd48:	e1a00006 	mov	r0, r6
   3cd4c:	e58d8000 	str	r8, [sp]
   3cd50:	e28d200c 	add	r2, sp, #12
   3cd54:	ebffda27 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3cd58:	e1a0b009 	mov	fp, r9
   3cd5c:	e087a00b 	add	sl, r7, fp
   3cd60:	e1a0100a 	mov	r1, sl
   3cd64:	e3a03001 	mov	r3, #1
   3cd68:	e28d200d 	add	r2, sp, #13
   3cd6c:	e1a00006 	mov	r0, r6
   3cd70:	e58d8000 	str	r8, [sp]
   3cd74:	ebffda1f 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3cd78:	e3a03001 	mov	r3, #1
   3cd7c:	e28d200e 	add	r2, sp, #14
   3cd80:	e1a01007 	mov	r1, r7
   3cd84:	e1a00006 	mov	r0, r6
   3cd88:	e58d8000 	str	r8, [sp]
   3cd8c:	ebffda0f 	bl	335d0 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   3cd90:	e5dd200e 	ldrb	r2, [sp, #14]
   3cd94:	e5dd300c 	ldrb	r3, [sp, #12]
   3cd98:	e1520003 	cmp	r2, r3
   3cd9c:	1affffe4 	bne	3cd34 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0xb4>
   3cda0:	e1a04009 	mov	r4, r9
   3cda4:	e3a03001 	mov	r3, #1
   3cda8:	e28d200f 	add	r2, sp, #15
   3cdac:	e0871004 	add	r1, r7, r4
   3cdb0:	e1a00006 	mov	r0, r6
   3cdb4:	e58d8000 	str	r8, [sp]
   3cdb8:	ebffda04 	bl	335d0 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   3cdbc:	e5dd200f 	ldrb	r2, [sp, #15]
   3cdc0:	e5dd300c 	ldrb	r3, [sp, #12]
   3cdc4:	e1520003 	cmp	r2, r3
   3cdc8:	1154000b 	cmpne	r4, fp
   3cdcc:	e1a04084 	lsl	r4, r4, #1
   3cdd0:	1affffd7 	bne	3cd34 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0xb4>
   3cdd4:	e0153004 	ands	r3, r5, r4
   3cdd8:	1afffff1 	bne	3cda4 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0x124>
   3cddc:	e1a0100a 	mov	r1, sl
   3cde0:	e58d3000 	str	r3, [sp]
   3cde4:	e1a00006 	mov	r0, r6
   3cde8:	e3a03001 	mov	r3, #1
   3cdec:	e1a0b08b 	lsl	fp, fp, #1
   3cdf0:	e28d200c 	add	r2, sp, #12
   3cdf4:	ebffd9ff 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3cdf8:	e015a00b 	ands	sl, r5, fp
   3cdfc:	1affffd6 	bne	3cd5c <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0xdc>
   3ce00:	eaffffcb 	b	3cd34 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0xb4>
   3ce04:	e59f4034 	ldr	r4, [pc, #52]	; 3ce40 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0x1c0>
   3ce08:	e28d200d 	add	r2, sp, #13
   3ce0c:	e0804004 	add	r4, r0, r4
   3ce10:	e1a00004 	mov	r0, r4
   3ce14:	e3a03001 	mov	r3, #1
   3ce18:	e58d9000 	str	r9, [sp]
   3ce1c:	ebffd9f5 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3ce20:	e1a00004 	mov	r0, r4
   3ce24:	e1a01007 	mov	r1, r7
   3ce28:	e3a03001 	mov	r3, #1
   3ce2c:	e58d9000 	str	r9, [sp]
   3ce30:	e28d200c 	add	r2, sp, #12
   3ce34:	e1a0a009 	mov	sl, r9
   3ce38:	ebffd9ee 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3ce3c:	eaffffbc 	b	3cd34 <memTestAddressBus(BusControl&, unsigned long, unsigned long)+0xb4>
   3ce40:	00100404 	.word	0x00100404

0003ce44 <memTestDevice(BusControl&, unsigned long, unsigned long)>:
   3ce44:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3ce48:	e1a05002 	mov	r5, r2
   3ce4c:	e1a09000 	mov	r9, r0
   3ce50:	e24dd014 	sub	sp, sp, #20
   3ce54:	e1a00002 	mov	r0, r2
   3ce58:	e1a07001 	mov	r7, r1
   3ce5c:	ebffb841 	bl	2af68 <operator new[](unsigned int)>
   3ce60:	e3550000 	cmp	r5, #0
   3ce64:	e1a02000 	mov	r2, r0
   3ce68:	0a000048 	beq	3cf90 <memTestDevice(BusControl&, unsigned long, unsigned long)+0x14c>
   3ce6c:	e2406001 	sub	r6, r0, #1
   3ce70:	e1a03006 	mov	r3, r6
   3ce74:	e2450001 	sub	r0, r5, #1
   3ce78:	e266c001 	rsb	ip, r6, #1
   3ce7c:	e0820000 	add	r0, r2, r0
   3ce80:	e08c1003 	add	r1, ip, r3
   3ce84:	e5e31001 	strb	r1, [r3, #1]!
   3ce88:	e1530000 	cmp	r3, r0
   3ce8c:	1afffffb 	bne	3ce80 <memTestDevice(BusControl&, unsigned long, unsigned long)+0x3c>
   3ce90:	e3a04000 	mov	r4, #0
   3ce94:	e59f8164 	ldr	r8, [pc, #356]	; 3d000 <memTestDevice(BusControl&, unsigned long, unsigned long)+0x1bc>
   3ce98:	e1a03005 	mov	r3, r5
   3ce9c:	e0898008 	add	r8, r9, r8
   3cea0:	e1a01007 	mov	r1, r7
   3cea4:	e1a00008 	mov	r0, r8
   3cea8:	e58d4000 	str	r4, [sp]
   3ceac:	e58d200c 	str	r2, [sp, #12]
   3ceb0:	ebffd9d0 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3ceb4:	e1a03005 	mov	r3, r5
   3ceb8:	e59d200c 	ldr	r2, [sp, #12]
   3cebc:	e1a00008 	mov	r0, r8
   3cec0:	e1a01007 	mov	r1, r7
   3cec4:	e58d4000 	str	r4, [sp]
   3cec8:	ebffd9c0 	bl	335d0 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   3cecc:	e3e09001 	mvn	r9, #1
   3ced0:	e1a03006 	mov	r3, r6
   3ced4:	e59d200c 	ldr	r2, [sp, #12]
   3ced8:	ea000003 	b	3ceec <memTestDevice(BusControl&, unsigned long, unsigned long)+0xa8>
   3cedc:	e1550001 	cmp	r5, r1
   3cee0:	e5c3c000 	strb	ip, [r3]
   3cee4:	0a00000b 	beq	3cf18 <memTestDevice(BusControl&, unsigned long, unsigned long)+0xd4>
   3cee8:	e1a04001 	mov	r4, r1
   3ceec:	e6efc074 	uxtb	ip, r4
   3cef0:	e28ce001 	add	lr, ip, #1
   3cef4:	e5f30001 	ldrb	r0, [r3, #1]!
   3cef8:	e6efe07e 	uxtb	lr, lr
   3cefc:	e150000e 	cmp	r0, lr
   3cf00:	e2841001 	add	r1, r4, #1
   3cf04:	e049c00c 	sub	ip, r9, ip
   3cf08:	0afffff3 	beq	3cedc <memTestDevice(BusControl&, unsigned long, unsigned long)+0x98>
   3cf0c:	e0870004 	add	r0, r7, r4
   3cf10:	e28dd014 	add	sp, sp, #20
   3cf14:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3cf18:	e3a09000 	mov	r9, #0
   3cf1c:	e1a03005 	mov	r3, r5
   3cf20:	e1a01007 	mov	r1, r7
   3cf24:	e1a00008 	mov	r0, r8
   3cf28:	e58d9000 	str	r9, [sp]
   3cf2c:	e58d200c 	str	r2, [sp, #12]
   3cf30:	ebffd9b0 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3cf34:	e1a03005 	mov	r3, r5
   3cf38:	e1a01007 	mov	r1, r7
   3cf3c:	e1a00008 	mov	r0, r8
   3cf40:	e59d200c 	ldr	r2, [sp, #12]
   3cf44:	e58d9000 	str	r9, [sp]
   3cf48:	ebffd9a0 	bl	335d0 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   3cf4c:	e1a05009 	mov	r5, r9
   3cf50:	e3e01001 	mvn	r1, #1
   3cf54:	ea000002 	b	3cf64 <memTestDevice(BusControl&, unsigned long, unsigned long)+0x120>
   3cf58:	e1540005 	cmp	r4, r5
   3cf5c:	e2855001 	add	r5, r5, #1
   3cf60:	0a000007 	beq	3cf84 <memTestDevice(BusControl&, unsigned long, unsigned long)+0x140>
   3cf64:	e5f62001 	ldrb	r2, [r6, #1]!
   3cf68:	e0413005 	sub	r3, r1, r5
   3cf6c:	e6ef3073 	uxtb	r3, r3
   3cf70:	e1520003 	cmp	r2, r3
   3cf74:	0afffff7 	beq	3cf58 <memTestDevice(BusControl&, unsigned long, unsigned long)+0x114>
   3cf78:	e0870005 	add	r0, r7, r5
   3cf7c:	e28dd014 	add	sp, sp, #20
   3cf80:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3cf84:	e3a00000 	mov	r0, #0
   3cf88:	e28dd014 	add	sp, sp, #20
   3cf8c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3cf90:	e59f4068 	ldr	r4, [pc, #104]	; 3d000 <memTestDevice(BusControl&, unsigned long, unsigned long)+0x1bc>
   3cf94:	e1a03005 	mov	r3, r5
   3cf98:	e0894004 	add	r4, r9, r4
   3cf9c:	e1a01007 	mov	r1, r7
   3cfa0:	e1a00004 	mov	r0, r4
   3cfa4:	e58d5000 	str	r5, [sp]
   3cfa8:	e58d200c 	str	r2, [sp, #12]
   3cfac:	ebffd991 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3cfb0:	e1a03005 	mov	r3, r5
   3cfb4:	e1a01007 	mov	r1, r7
   3cfb8:	e59d200c 	ldr	r2, [sp, #12]
   3cfbc:	e1a00004 	mov	r0, r4
   3cfc0:	e58d5000 	str	r5, [sp]
   3cfc4:	ebffd981 	bl	335d0 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   3cfc8:	e1a03005 	mov	r3, r5
   3cfcc:	e1a01007 	mov	r1, r7
   3cfd0:	e59d200c 	ldr	r2, [sp, #12]
   3cfd4:	e1a00004 	mov	r0, r4
   3cfd8:	e58d5000 	str	r5, [sp]
   3cfdc:	ebffd985 	bl	335f8 <MemoryController::blockWrite(unsigned long, unsigned char const*, unsigned long, BlockAccessType)>
   3cfe0:	e1a00004 	mov	r0, r4
   3cfe4:	e1a01007 	mov	r1, r7
   3cfe8:	e1a03005 	mov	r3, r5
   3cfec:	e59d200c 	ldr	r2, [sp, #12]
   3cff0:	e58d5000 	str	r5, [sp]
   3cff4:	ebffd975 	bl	335d0 <MemoryController::blockRead(unsigned long, unsigned char*, unsigned long, BlockAccessType)>
   3cff8:	e1a00005 	mov	r0, r5
   3cffc:	eaffffc3 	b	3cf10 <memTestDevice(BusControl&, unsigned long, unsigned long)+0xcc>
   3d000:	00100404 	.word	0x00100404
