// Bus Raider
// Rob Dobson 2018-2020

#include "BusControl.h"
#include "PiWiring.h"
#include <circle/interrupt.h>
#include "lowlib.h"
#include <circle/bcm2835.h>
#include "logging.h"
#include "circle/timer.h"

// Module name
static const char MODULE_PREFIX[] = "BusControl";

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BusControl::BusControl()
    : _targetController(*this), 
      _busSocketManager(*this), 
      _memoryController(*this)
{
    // Not init yet
    _isInitialized = false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initialise the hardware
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BusControl::init()
{
    if (!_isInitialized)
    {
        // Clock
        _clockGenerator.setup();
        _clockGenerator.setFreqHz(1000000);
        _clockGenerator.enable(true);
        
        // Raw access
        _busRawAccess.init();

        // Now initialized
        _isInitialized = true;
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Service
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BusControl::service()
{
    // Service raw access
    _busRawAccess.service();

    // Service target controller
    _targetController.service();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initialise the hardware
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BusControl::machineChangeInit()
{
    // Clear socket manager
    _busSocketManager.clear();

    // Clear the target controller
    _targetController.clear();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Raw access start/end
// Used by self-test to suspend normal bus operation (wait handling etc)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BusControl::rawAccessStart()
{
    _busSocketManager.suspend(true);
}

void BusControl::rawAccessEnd()
{
    _busSocketManager.suspend(false);
}
